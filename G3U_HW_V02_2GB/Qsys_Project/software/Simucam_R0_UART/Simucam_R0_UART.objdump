
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00040bd0 memsz 0x00054904 flags rwx
    LOAD off    0x00042000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003b790  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000034b0  8113b9ec  8113b9ec  0003c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  8113ee9c  8113ee9c  0003fe9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d34  81140bf0  81140bf0  00041bf0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81154924  81154924  00042000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00042000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00042000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c18  00000000  00000000  00042028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005a79e  00000000  00000000  00043c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001483b  00000000  00000000  0009e3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d31d  00000000  00000000  000b2c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007a3c  00000000  00000000  000cff38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a6ef  00000000  00000000  000d7974  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026ce7  00000000  00000000  000e2063  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00108d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  00108d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00114ec9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00114ecf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00114edb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00114edc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00114edd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00114ee1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00114ee5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00114ee9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  00114ef4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  00114efe  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00114f08  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00114f19  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  00114f58  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113b9ec l    d  .rodata	00000000 .rodata
8113ee9c l    d  .rwdata	00000000 .rwdata
81140bf0 l    d  .bss	00000000 .bss
81154924 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81140c0c l     O .bss	00000004 viCh1HoldContext
81140c10 l     O .bss	00000004 viCh2HoldContext
81140c14 l     O .bss	00000004 viCh3HoldContext
81140c18 l     O .bss	00000004 viCh4HoldContext
81140c1c l     O .bss	00000004 viCh5HoldContext
81140c20 l     O .bss	00000004 viCh6HoldContext
81140c24 l     O .bss	00000004 viCh7HoldContext
81140c28 l     O .bss	00000004 viCh8HoldContext
811050d8 l     F .text	00000054 vFeebWriteReg
8110512c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
811056dc l     F .text	00000050 uliSpwcReadReg
81105688 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81140b1c l     O .rwdata	00000001 ucIoValue
811058dc l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811061cc l     F .text	0000013c msgdma_write_extended_descriptor
81106308 l     F .text	00000164 msgdma_construct_extended_descriptor
8110646c l     F .text	00000318 msgdma_descriptor_async_transfer
81106784 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107300 l     F .text	00000054 vRstcWriteReg
81107354 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81140c30 l     O .bss	00000004 viHoldContext
81108688 l     F .text	00000058 uliSyncReadReg
8110862c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
81140c36 l     O .bss	00000004 xRAckLocal.4450
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
81140c3a l     O .bss	00000004 xSAckLocal.4446
00000000 l    df *ABS*	00000000 parser_comm_task.c
81140d84 l     O .bss	0000004c PreParsedLocal.4533
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81140dd0 l     O .bss	0000004c xPreParsedReader.4523
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113d42b l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113e579 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113ee9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81112f6c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113e746 l     O .rodata	00000010 zeroes.4389
8113e756 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113e766 l     O .rodata	00000010 zeroes.4404
81117ba0 l     F .text	000000c4 __sbprintf
8113e776 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113e78e l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81119728 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111b278 l     F .text	00000008 __fp_unlock
8111b28c l     F .text	000001a4 __sinit.part.1
8111b430 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113f6e8 l     O .rwdata	00000020 lc_ctype_charset
8113f6c8 l     O .rwdata	00000020 lc_message_charset
8113f708 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113e7cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111e2a0 l     F .text	0000006c sulp
8113e914 l     O .rodata	00000014 fpi.2737
8113e928 l     O .rodata	00000028 tinytens
8113e900 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113e960 l     O .rodata	00000010 blanks.4332
8113e950 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81121910 l     F .text	00000104 __sprint_r.part.0
8113e980 l     O .rodata	00000010 blanks.4348
8113e970 l     O .rodata	00000010 zeroes.4349
81122eac l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81123360 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
8112725c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811273a0 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811273d4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81127658 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81127748 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
8112792c l     F .text	00000044 alt_get_errno
81127970 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81127b98 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81140b60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81128138 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81140b6c l     O .rwdata	00000004 lockid
81140ccc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81140b70 l     O .rwdata	00000004 lockid
81140cd4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81129c3c l     F .text	00000050 OS_InitMisc
81129c8c l     F .text	00000074 OS_InitRdyList
81129e10 l     F .text	000000ec OS_InitTCBList
81129b54 l     F .text	000000e8 OS_InitEventList
81129d00 l     F .text	00000088 OS_InitTaskIdle
81129d88 l     F .text	00000088 OS_InitTaskStat
8112a0a0 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112beb8 l     F .text	000000fc OS_FlagTaskRdy
8112bc68 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112d7a4 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
811321d4 l     F .text	00000044 OSTmr_Lock
81131c74 l     F .text	00000074 OSTmr_Alloc
81132218 l     F .text	0000003c OSTmr_Unlock
811320d8 l     F .text	000000fc OSTmr_Unlink
81131ce8 l     F .text	000000a4 OSTmr_Free
81131f88 l     F .text	00000150 OSTmr_Link
81131f00 l     F .text	00000088 OSTmr_InitTask
81132254 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
81132364 l     F .text	0000003c alt_dev_reg
8113f8e8 l     O .rwdata	0000106c jtag_uart_0
81140954 l     O .rwdata	000000d0 rs232_uart
81140a24 l     O .rwdata	00000064 dma_DDR_M1
81140a88 l     O .rwdata	00000064 dma_DDR_M2
81140aec l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81136b74 l     F .text	000002ac altera_avalon_jtag_uart_irq
81136e20 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81137624 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
811379b8 l     F .text	000000a4 altera_avalon_uart_irq
81137a5c l     F .text	00000140 altera_avalon_uart_rxirq
81137b9c l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81137da4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81138058 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
811382dc l     F .text	00000044 alt_get_errno
81138320 l     F .text	0000009c alt_msgdma_write_standard_descriptor
811383bc l     F .text	00000134 alt_msgdma_write_extended_descriptor
811384f0 l     F .text	0000018c alt_msgdma_irq
8113867c l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81138710 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
8113886c l     F .text	00000340 alt_msgdma_descriptor_async_transfer
81138bac l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
811392b4 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
81139360 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113a52c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113ac40 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
81140d7c l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81140d80 g     O .bss	00000004 alt_instruction_exception_handler
8110e660 g     F .text	0000004c vFailDeleteInitialization
81140d50 g     O .bss	00000004 aux_status_register
81141344 g     O .bss	00002000 vInAckHandlerTask_stk
8113a2e8 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110788c g     F .text	0000004c vSyncInitIrq
8111d924 g     F .text	0000007c _mprec_log10
81107a08 g     F .text	00000040 bSyncSetMbt
81105ac0 g     F .text	00000108 I2C_Read
81140bbe g     O .rwdata	00000002 OSTaskNameSize
81143344 g     O .bss	00000118 xBuffer64
8111da18 g     F .text	0000008c __any_on
8111c3ec g     F .text	0000005c _isatty_r
8113e7d8 g     O .rodata	00000028 __mprec_tinytens
81127868 g     F .text	000000c4 alt_main
81112e90 g     F .text	000000c8 _puts_r
81104964 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81140cdc g     O .bss	00000004 OSTmrFreeList
81154824 g     O .bss	00000100 alt_irq
8111c55c g     F .text	00000068 _lseek_r
8110fd74 g     F .text	00000030 vChangeDefaultAutoResetSync
8112c718 g     F .text	000000d4 OS_MemInit
8110d2b8 g     F .text	0000098c vLoadDefaultETHConf
811311b4 g     F .text	00000068 OSTimeSet
8111b630 g     F .text	000000ac __sflags
811263bc g     F .text	00000088 .hidden __eqdf2
81102a38 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110fbec g     F .text	00000034 vLoadDefaultSyncSource
81132864 g     F .text	000001ac Check_for_Master_Boot_Record
8114fc60 g     O .bss	00000010 OSTmrWheelTbl
81139074 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
8112881c g     F .text	00000618 OSEventPendMulti
81154924 g       *ABS*	00000000 __alt_heap_start
8113b278 g     F .text	0000002c OSTaskCreateHook
811366dc g     F .text	000001c4 alt_up_sd_card_fclose
81140c44 g     O .bss	00000004 xSemCountBuffer64
81112e4c g     F .text	00000044 printf
81140c2d g     O .bss	00000001 SspdConfigControl
81107e24 g     F .text	00000054 bSyncCtrReset
81140b96 g     O .rwdata	00000002 OSMboxEn
8110bae8 g     F .text	00000398 bSendUART128
811103e8 g     F .text	000000a4 aatoh
81128e98 g     F .text	00000054 OSIntEnter
8112412c g     F .text	000000a4 _wcrtomb_r
81104870 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110e5c8 g     F .text	0000004c vFailReceiverCreate
811044d4 g     F .text	00000040 vFeebCh2HandleIrq
811133f8 g     F .text	00000064 __sseek
8111b5e0 g     F .text	00000010 __sinit
81106c40 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
81123fcc g     F .text	00000148 __swbuf_r
8110b574 g     F .text	000002cc bResourcesInitRTOS
8110534c g     F .text	000000f4 bSpwcGetLinkError
81140ba6 g     O .rwdata	00000002 OSQEn
8111c478 g     F .text	00000084 _setlocale_r
81140b20 g     O .rwdata	00000004 LedsPainelControl
81140e44 g     O .bss	00000100 cDebugBuffer
8111b438 g     F .text	00000070 __sfmoreglue
811218f8 g     F .text	00000018 ungetc
811284d8 g     F .text	000000d4 __malloc_unlock
81102d28 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113b2f8 g     F .text	00000028 OSTaskStatHook
8110fc5c g     F .text	00000030 vChangeDefaultSyncSource
81140ce0 g     O .bss	00000001 OSLockNesting
81140ce4 g     O .bss	00000004 OSTmrSemSignal
8110f1d4 g     F .text	000000d8 vNFeeStructureInit
81140c48 g     O .bss	00000004 xSemCommInit
811028bc g     F .text	00000080 uliXorshift32
8111e30c g     F .text	00001600 _strtod_r
81140c4c g     O .bss	00000004 xSemCountSenderACK
81110524 g     F .text	00000448 .hidden __divsf3
81140d74 g     O .bss	00000004 current_sector_modified
81140be4 g     O .rwdata	00000002 OSDataSize
81140ce8 g     O .bss	00000001 OSRunning
81105510 g     F .text	00000178 bSpwcInitCh
8114345c g     O .bss	00002000 senderTask_stk
81140c50 g     O .bss	00000004 fp
8111c8ec g     F .text	0000015c memmove
8114545c g     O .bss	0000045c xSimMebStruct
8113b374 g     F .text	0000002c OSInitHookBegin
811082c0 g     F .text	00000074 bSyncCtrCh8OutEnable
81140bdc g     O .rwdata	00000002 OSTmrSize
8111b5c8 g     F .text	00000018 _cleanup
81110020 g     F .text	00000040 siCloseFile
8111ca48 g     F .text	000000b0 _Balloc
8110fd00 g     F .text	00000038 vLoadDefaultAutoResetSync
811352b8 g     F .text	000000cc alt_up_sd_card_is_Present
81138fb4 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81140bf8 g     O .bss	00000004 pxDmaM1Dev
81102ad0 g     F .text	000000a4 DMA_DISPATCHER_STOP
8113258c g     F .text	00000054 Save_Modified_Sector
81104ac4 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81140cec g     O .bss	00000004 OSIdleCtr
8110572c g     F .text	0000003c bEnableIsoDrivers
81126444 g     F .text	000000dc .hidden __gtdf2
8113b008 g     F .text	0000002c altera_nios2_gen2_irq_init
8113b0f0 g       .text	00000000 OSStartTsk
81107b7c g     F .text	00000070 bSyncSetNCycles
8112a410 g     F .text	000002dc OS_TCBInit
8110f7d4 g     F .text	00000068 vInitSimucamBasicHW
811458b8 g     O .bss	00002000 vTimeoutCheckerTask_stk
811081d8 g     F .text	00000074 bSyncCtrCh6OutEnable
81105e3c g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
81140d6c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81140cf0 g     O .bss	00000002 OSTmrUsed
81140c54 g     O .bss	00000004 xSemCountBuffer128
81103200 g     F .text	000000f8 TEMP_Read
81104554 g     F .text	00000040 vFeebCh4HandleIrq
81140be2 g     O .rwdata	00000002 OSTmrWheelTblSize
8110f6a4 g     F .text	0000002c cFeeSpwChannelDisable
81140b82 g     O .rwdata	00000002 OSEventSize
81140cf2 g     O .bss	00000001 OSPrioHighRdy
81111fe8 g     F .text	00000064 _fstat_r
8113b2a4 g     F .text	0000002c OSTaskDelHook
81140c94 g     O .bss	00000004 errno
811085b4 g     F .text	0000003c uliSyncGetCtr
81119498 g     F .text	0000001c __svfscanf
8111336c g     F .text	00000008 __seofread
8113b0d0 g       .text	00000000 OSStartHighRdy
8112fbe4 g     F .text	000001ec OSTaskCreateExt
8110e84c g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8112043c g     F .text	00001244 ___svfiprintf_internal_r
8112b798 g     F .text	00000068 OSFlagPendGetFlagsRdy
81140bc2 g     O .rwdata	00000002 OSTaskStatStkSize
8112a8e4 g     F .text	00000310 OSFlagAccept
8112dec0 g     F .text	000000c0 OSQFlush
8112d93c g     F .text	00000148 OSQAccept
81140cbc g     O .bss	00000004 alt_argv
8110c5b0 g     F .text	00000398 bSendStatusFirstTime
81148b18 g       *ABS*	00000000 _gp
8110e290 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
81127ffc g     F .text	0000013c usleep
81135890 g     F .text	00000384 alt_up_sd_card_fopen
8110fe8c g     F .text	00000030 bSDcardIsPresent
8110a920 g     F .text	00000344 vSenderComTask
811353f8 g     F .text	000000d8 alt_up_sd_card_find_first
8112fa30 g     F .text	000001b4 OSTaskCreate
8110e9ec g     F .text	00000068 vFailSendNack
81140d60 g     O .bss	00000004 command_argument_register
8112f538 g     F .text	000004f8 OSTaskChangePrio
8110f0fc g     F .text	00000088 vCouldNotSendTMPusCommand
81140cd8 g     O .bss	00000004 alt_heapsem
811060d4 g     F .text	00000080 bSetBoardLeds
8112a6ec g     F .text	000001f8 OSDebugInit
8112fdd0 g     F .text	0000034c OSTaskDel
8112c7ec g     F .text	000001ac OSMutexAccept
8110fc8c g     F .text	00000040 vSetTimeCode
81139b5c g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81140c58 g     O .bss	00000004 xSemCountPreParsed
8113f768 g     O .rwdata	00000180 alt_fd_list
81104a14 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
8114fc70 g     O .bss	00000370 OSFlagTbl
8110e3f8 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110fb44 g     F .text	0000003c vLoadDefaultRTValue
8112991c g     F .text	000000c0 OS_EventTaskRemove
81134b0c g     F .text	00000134 find_first_empty_record_in_root_directory
8113a6ec g     F .text	00000098 alt_find_dev
81112b34 g     F .text	00000150 memcpy
81123c98 g     F .text	00000264 __hexnan
811478b8 g     O .bss	00000130 xBuffer32
81140bac g     O .rwdata	00000002 OSRdyTblSize
8114ffe0 g     O .bss	000001a0 OSTmrTbl
8111b280 g     F .text	0000000c _cleanup_r
81126f98 g     F .text	000000e4 .hidden __floatsidf
8110cee0 g     F .text	000001a8 vSendPusTM64
81107978 g     F .text	0000004c ucSyncStatusErrorCode
8110f7a0 g     F .text	00000034 cFeeRMAPLogDisable
81109234 g     F .text	00000a80 vParserCommTask
8113ad0c g     F .text	00000084 alt_io_redirect
8110f734 g     F .text	00000034 cFeeRMAPEchoingDisable
81126520 g     F .text	000000f4 .hidden __ltdf2
81104cf4 g     F .text	000000d4 bFeebSetIrqControl
8110ef5c g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
81140c5c g     O .bss	00000004 xMutexReceivedACK
81103b7c g     F .text	000000b0 bSdmaInitM2Dma
8113b9ec g       *ABS*	00000000 __DTOR_END__
81139fe4 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113a32c g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107ecc g     F .text	00000054 bSyncCtrErrInj
8113a28c g     F .text	0000005c alt_msgdma_register_callback
8110dc44 g     F .text	00000330 vShowEthConfig
8110f83c g     F .text	00000030 bLogWriteSDCard
8110e714 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
81109dcc g     F .text	000000a0 bTrySendSemaphoreCommInit
8110c218 g     F .text	00000398 bSendUART32
81112f58 g     F .text	00000014 puts
8113b41c g     F .text	000000a4 alt_exception_cause_generated_bad_addr
8110784c g     F .text	00000040 vSyncHandleIrq
811285ac g     F .text	00000128 OSEventNameGet
811046d8 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
81140b90 g     O .rwdata	00000002 OSFlagMax
8111c678 g     F .text	000000e0 mbrtowc
81134704 g     F .text	000001b4 find_first_empty_cluster
81108164 g     F .text	00000074 bSyncCtrCh5OutEnable
81140c34 g     O .bss	00000001 vucN
8111e078 g     F .text	00000074 __fpclassifyd
811078d8 g     F .text	00000054 bSyncStatusExtnIrq
811194b4 g     F .text	00000054 _vfscanf_r
8112ce6c g     F .text	000005a4 OSMutexPend
8111d878 g     F .text	000000ac __ratio
811351f4 g     F .text	000000c4 alt_up_sd_card_open_dev
81128eec g     F .text	00000100 OSIntExit
81107a48 g     F .text	00000040 bSyncSetBt
81122e90 g     F .text	0000001c __vfiprintf_internal
81140bca g     O .rwdata	00000002 OSTCBSize
81104694 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81140cf3 g     O .bss	00000001 OSPrioCur
81137094 g     F .text	000002c4 altera_avalon_jtag_uart_read
81139824 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81112e14 g     F .text	00000038 _printf_r
81124f60 g     F .text	00000064 .hidden __udivsi3
8112769c g     F .text	000000ac isatty
81140c2c g     O .bss	00000001 LedsBoardControl
81140c60 g     O .bss	00000004 xSemCountReceivedACK
81140bb0 g     O .rwdata	00000002 OSStkWidth
8111c448 g     F .text	00000030 iswspace
8113e828 g     O .rodata	000000c8 __mprec_tens
81140ba4 g     O .rwdata	00000002 OSPtrSize
8111c4fc g     F .text	0000000c __locale_charset
8110807c g     F .text	00000074 bSyncCtrCh3OutEnable
81125150 g     F .text	000000c8 .hidden __lesf2
81140b84 g     O .rwdata	00000002 OSEventTblSize
8112432c g     F .text	0000007c .hidden __fixunsdfsi
8113b034 g       .text	00000000 OSCtxSw
81105bc8 g     F .text	00000160 I2C_MultipleRead
81140ca0 g     O .bss	00000004 __malloc_top_pad
81140cf4 g     O .bss	00000004 OSTCBList
81131c34 g     F .text	00000040 OSTmrSignal
81140cb0 g     O .bss	00000004 alt_fd_list_lock
8111ff68 g     F .text	0000001c strtoul
81140b38 g     O .rwdata	00000004 __mb_cur_max
8111c52c g     F .text	0000000c _localeconv_r
8111ff84 g     F .text	000002e0 _strtoull_r
81107290 g     F .text	00000070 vRstcHoldDeviceReset
8111ce6c g     F .text	00000044 __i2b
8111bd90 g     F .text	000004c4 __sfvwrite_r
811339e4 g     F .text	000000c0 get_dir_divider_location
81150180 g     O .bss	00000c30 OSMemTbl
81140cf8 g     O .bss	00000001 OSTickStepState
811479e8 g     O .bss	00002000 vReceiverUartTask_stk
81113164 g     F .text	0000005c _sbrk_r
81140c64 g     O .bss	00000004 xSemTimeoutChecker
811336a4 g     F .text	000000cc filename_to_upper_case
81140ba8 g     O .rwdata	00000002 OSQMax
81135c14 g     F .text	00000090 alt_up_sd_card_set_attributes
8112cb68 g     F .text	00000304 OSMutexDel
81150db0 g     O .bss	00000800 OSTaskStatStk
8110febc g     F .text	00000030 bSDcardFAT16Check
8112c334 g     F .text	000000f8 OSMemNameGet
8110e0e4 g     F .text	00000060 vFailCreateMutexSResources
81132a10 g     F .text	00000284 Read_File_Record_At_Offset
81140b88 g     O .rwdata	00000002 OSFlagEn
8111daa4 g     F .text	00000068 _read_r
81140bce g     O .rwdata	00000002 OSTimeTickHookEn
8112e388 g     F .text	00000170 OSQPost
8112bfb4 g     F .text	000000ac OS_FlagUnlink
81102420 g     F .text	0000049c bDdr2MemoryRandomReadTest
81140b54 g     O .rwdata	00000004 alt_max_fd
8110ed08 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
81129f58 g     F .text	00000070 OS_MemCopy
81129fc8 g     F .text	000000d8 OS_Sched
81134288 g     F .text	0000047c find_file_in_directory
8112303c g     F .text	000000f8 _fclose_r
8112c23c g     F .text	000000f8 OSMemGet
81130414 g     F .text	000001bc OSTaskNameSet
8111b248 g     F .text	00000030 fflush
81140c9c g     O .bss	00000004 __malloc_max_sbrked_mem
81140cfc g     O .bss	00000004 OSCtxSwCtr
8113b320 g     F .text	00000054 OSTimeTickHook
811499e8 g     O .bss	00002000 vOutAckHandlerTask_stk
811274d0 g     F .text	00000188 alt_irq_register
81140b92 g     O .rwdata	00000002 OSFlagNameSize
811116b4 g     F .text	00000118 .hidden __extendsfdf2
811299dc g     F .text	00000108 OS_EventTaskRemoveMulti
81135384 g     F .text	00000074 alt_up_sd_card_is_FAT16
81105958 g     F .text	00000088 I2C_TestAdress
81125218 g     F .text	000008b4 .hidden __adddf3
8112501c g     F .text	00000078 .hidden __nesf2
811297c4 g     F .text	00000158 OS_EventTaskWaitMulti
8111d610 g     F .text	00000114 __b2d
8113955c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81140baa g     O .rwdata	00000002 OSQSize
81124928 g     F .text	00000540 .hidden __umoddi3
8112778c g     F .text	000000dc lseek
8112ee78 g     F .text	00000214 OSSemPend
81105440 g     F .text	000000d0 bSpwcGetLinkStatus
81104fa4 g     F .text	00000088 bFeebGetWindowing
81140b28 g     O .rwdata	00000004 _global_impure_ptr
81107800 g     F .text	0000004c bSSDisplayUpdate
81133d48 g     F .text	00000540 get_home_directory_cluster_for_file
8111db0c g     F .text	0000056c _realloc_r
81140b94 g     O .rwdata	00000002 OSLowestPrio
81154924 g       *ABS*	00000000 __bss_end
8113ab48 g     F .text	000000f8 alt_iic_isr_register
8113b3f0 g     F .text	0000002c OSTCBInitHook
81140bda g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81127eec g     F .text	00000110 alt_tick
8110e390 g     F .text	00000068 vFailGetMutexSenderTask
811071b0 g     F .text	0000006c vRstcSimucamReset
8113e990 g     O .rodata	00000100 __hexdig
8113a0d8 g     F .text	000001b4 alt_msgdma_init
811243a8 g     F .text	00000580 .hidden __udivdi3
8110a5d0 g     F .text	000001a8 setPreAckSenderFreePos
811232b4 g     F .text	00000024 _fputwc_r
81140b7c g     O .rwdata	00000002 OSEventEn
8113e800 g     O .rodata	00000028 __mprec_bigtens
8111cc48 g     F .text	0000010c __s2b
81140bd6 g     O .rwdata	00000002 OSTmrCfgNameSize
81107b08 g     F .text	00000074 bSyncSetPolarity
8112707c g     F .text	000000b0 .hidden __floatunsidf
8110e7e4 g     F .text	00000068 vFailFoundBufferRetransmission
8111d348 g     F .text	00000060 __mcmp
81140d78 g     O .bss	00000004 current_sector_index
81137850 g     F .text	00000168 altera_avalon_uart_init
8113a3b4 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110405c g     F .text	00000438 bSdmaDmaM2Transfer
8110fccc g     F .text	00000034 vResetTimeCode
8110f678 g     F .text	0000002c cFeeSpwChannelEnable
8111b600 g     F .text	00000018 __fp_lock_all
8113aaf4 g     F .text	00000054 alt_ic_irq_enabled
811059e0 g     F .text	000000e0 I2C_Write
81140d00 g     O .bss	00000002 OSTmrFree
8112bdd0 g     F .text	000000e8 OS_FlagInit
81127e48 g     F .text	000000a4 alt_alarm_stop
81113788 g     F .text	0000001c strtol
811313e0 g     F .text	00000140 OSTmrDel
8113277c g     F .text	000000e8 mark_cluster
81140bb8 g     O .rwdata	00000002 OSTaskIdleStkSize
81140cb4 g     O .bss	00000004 alt_irq_active
8112ea98 g     F .text	000000b8 OSSemAccept
81111b80 g     F .text	0000044c _fseeko_r
8112c548 g     F .text	000000e0 OSMemPut
8112c060 g     F .text	000001dc OSMemCreate
81140d04 g     O .bss	00000004 OSIdleCtrMax
8110d088 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
8113f740 g     O .rwdata	00000028 alt_dev_null
8113916c g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107ac8 g     F .text	00000040 bSyncSetOst
81140bcc g     O .rwdata	00000002 OSTicksPerSec
81134c40 g     F .text	00000194 convert_filename_to_name_extension
8110ac64 g     F .text	00000030 vSimMebTask
81105d28 g     F .text	00000094 i2c_start
8113b034 g       .text	00000000 OSIntCtxSw
811080f0 g     F .text	00000074 bSyncCtrCh4OutEnable
81139f50 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81127378 g     F .text	00000028 alt_dcache_flush_all
8111cd54 g     F .text	00000068 __hi0bits
8110fb80 g     F .text	0000003c vChangeRTValue
81140d4c g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110f184 g     F .text	00000050 vNFeeNotInUse
81126f18 g     F .text	00000080 .hidden __fixdfsi
8114b9e8 g     O .bss	00002000 vInitialTask_stk
81140c68 g     O .bss	00000002 usiIdCMD
81107dd0 g     F .text	00000054 bSyncCtrStart
811348b8 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
8110a05c g     F .text	00000410 bPreParser
8111f90c g     F .text	00000018 strtod
81140d08 g     O .bss	00000004 OSTCBFreeList
8112f08c g     F .text	00000174 OSSemPendAbort
8110e530 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110ec70 g     F .text	0000004c vFailCreateTimerRetransmisison
8110f904 g     F .text	0000019c vSimucamStructureInit
81140b4c g     O .rwdata	00000008 alt_dev_list
8112817c g     F .text	00000100 write
8113b590 g     F .text	000000a8 _putc_r
81140d70 g     O .bss	00000004 device_pointer
81140bd0 g     O .rwdata	00000002 OSVersionNbr
81125094 g     F .text	000000bc .hidden __gtsf2
81109cb4 g     F .text	00000118 getPreParsedPacket
81127418 g     F .text	000000b8 fstat
8110fdd8 g     F .text	00000040 vChangeIdNFEEMaster
81111b34 g     F .text	0000002c fprintf
8110f768 g     F .text	00000038 cFeeRMAPLogEnable
81102c18 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104a6c g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110edbc g     F .text	00000068 vFailPostBlockingSemTimeoutTask
811100c8 g     F .text	00000058 _reg_write
8110fe18 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81126520 g     F .text	000000f4 .hidden __ledf2
8110f094 g     F .text	00000068 vCouldNotSendLog
81131660 g     F .text	000001b8 OSTmrRemainGet
81140b78 g     O .rwdata	00000004 OSEndiannessTest
811073a4 g     F .text	00000058 v_spi_start
8111d0b0 g     F .text	00000148 __pow5mult
81121a2c g     F .text	00001464 ___vfiprintf_internal_r
81140cac g     O .bss	00000004 __nlocale_changed
81124fc4 g     F .text	00000058 .hidden __umodsi3
81107f20 g     F .text	00000074 bSyncCtrSyncOutEnable
8110feec g     F .text	000000f8 bInitializeSDCard
8110eb8c g     F .text	0000004c vFailParserCommTaskCreate
81113204 g     F .text	00000038 _scanf_r
8110ec24 g     F .text	0000004c vFailOutAckHandlerTaskCreate
81140b8a g     O .rwdata	00000002 OSFlagGrpSize
811395bc g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81131818 g     F .text	000000ec OSTmrStateGet
81154924 g       *ABS*	00000000 end
811045d4 g     F .text	00000040 vFeebCh6HandleIrq
8110e91c g     F .text	00000068 vNoContentInPreParsedBuffer
81111fcc g     F .text	0000001c fseeko
811119e4 g     F .text	0000000c _atoi_r
8113809c g     F .text	00000240 altera_avalon_uart_write
81111b64 g     F .text	0000001c fseek
8110ba58 g     F .text	00000090 vCCDChangeValues
81136a24 g     F .text	00000150 altera_avalon_jtag_uart_init
8112a258 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110e190 g     F .text	0000004c vFailTestCriticasParts
8113b9ec g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101fb0 g     F .text	00000470 bDdr2MemoryRandomWriteTest
811376a4 g     F .text	00000084 alt_avalon_timer_sc_init
81104efc g     F .text	000000a8 bFeebSetWindowing
81137790 g     F .text	00000068 altera_avalon_uart_write_fd
81111974 g     F .text	00000064 .hidden __clzsi2
811377f8 g     F .text	00000058 altera_avalon_uart_close_fd
81137358 g     F .text	000002cc altera_avalon_jtag_uart_write
81131d8c g     F .text	00000174 OSTmr_Init
8114d9e8 g     O .bss	0000010c xBuffer128
8111b5f0 g     F .text	00000004 __sfp_lock_acquire
811032f8 g     F .text	00000048 sense_log_temp
8111c808 g     F .text	000000e4 memchr
81129efc g     F .text	0000005c OS_MemClr
81115984 g     F .text	00002200 ___vfprintf_internal_r
8113b114 g     F .text	00000164 OSTaskStkInit
8111323c g     F .text	00000060 _sprintf_r
8111ba78 g     F .text	00000318 _free_r
8113ad90 g     F .text	00000234 alt_printf
8110ce90 g     F .text	00000050 vTimeoutCheck
81110178 g     F .text	000001fc _print_codec_status
8111c508 g     F .text	00000010 __locale_mb_cur_max
8112950c g     F .text	000001a0 OS_EventTaskRdy
81102b74 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113b828 g     F .text	00000188 __call_exitprocs
81140d0c g     O .bss	00000001 OSCPUUsage
81140ca8 g     O .bss	00000004 __mlocale_changed
81107e78 g     F .text	00000054 bSyncCtrOneShot
81140b30 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
811085f0 g     F .text	0000003c uliSyncReadStatus
81140cc4 g     O .bss	00000004 _alt_tick_rate
8112df80 g     F .text	00000294 OSQPend
8111fa2c g     F .text	000002e8 _strtoll_r
81130d04 g     F .text	0000010c OSTimeDly
8111d1f8 g     F .text	00000150 __lshift
81108f74 g     F .text	000002c0 vOutAckHandlerTask
81139014 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
81140cc8 g     O .bss	00000004 _alt_nticks
81127bdc g     F .text	00000104 read
811323e0 g     F .text	000000f0 alt_sys_init
81110d70 g     F .text	0000012c .hidden __floatsisf
81120264 g     F .text	000001d8 __ssprint_r
81112dac g     F .text	00000068 _open_r
811100a0 g     F .text	00000028 bTestSimucamCriticalHW
8110502c g     F .text	000000ac bFeebGetBuffersStatus
8110df74 g     F .text	000000a4 ucCrc8
811007ac g     F .text	00000cb4 bDdr2EepromDump
8113b708 g     F .text	00000120 __register_exitproc
81140d0d g     O .bss	00000001 OSTaskCtr
8110ce40 g     F .text	00000050 siPosStr
81123efc g     F .text	000000d0 strncmp
81130e10 g     F .text	00000164 OSTimeDlyHMSM
8111ceb0 g     F .text	00000200 __multiply
81136f2c g     F .text	00000070 altera_avalon_jtag_uart_close
81107574 g     F .text	00000058 v_spi_end
81110060 g     F .text	00000040 cGetNextChar
81140e1c g     O .bss	00000028 __malloc_current_mallinfo
81140b7e g     O .rwdata	00000002 OSEventMax
8112501c g     F .text	00000078 .hidden __eqsf2
8111d724 g     F .text	00000154 __d2b
8112f200 g     F .text	00000118 OSSemPost
81104760 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110fbbc g     F .text	00000030 vChangeDefaultRTValue
81104654 g     F .text	00000040 vFeebCh8HandleIrq
81140d48 g     O .bss	00000004 initialized
8110ccf0 g     F .text	00000100 vSendLog
81129080 g     F .text	000000e4 OSSchedUnlock
811075cc g     F .text	00000164 RTCC_SPI_R_MAC
811368a0 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111fd14 g     F .text	00000254 _strtoul_r
8113a894 g     F .text	000000e4 alt_get_fd
81140d10 g     O .bss	00000004 OSMemFreeList
811291dc g     F .text	000000b8 OSStatInit
8110293c g     F .text	00000064 DMA_OPEN_DEVICE
811542bc g     O .bss	00000014 search_data
8110517c g     F .text	00000100 bSpwcSetLink
8112712c g     F .text	00000130 alt_busy_sleep
8112bb9c g     F .text	000000cc OSFlagQuery
81107f94 g     F .text	00000074 bSyncCtrCh1OutEnable
81140bb4 g     O .rwdata	00000002 OSTaskCreateExtEn
81110374 g     F .text	00000074 _split_codec_status
811196cc g     F .text	0000005c _close_r
8110e984 g     F .text	00000068 vCouldNotSendEthConfUART
81108c6c g     F .text	00000308 vInitialTask
811394fc g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113b514 g     F .text	0000007c memcmp
811294e4 g     F .text	00000028 OS_Dummy
81136970 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81154924 g       *ABS*	00000000 __alt_stack_base
811369c8 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
811047a4 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
8111204c g     F .text	000000d4 _fwrite_r
8113961c g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811048b4 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
81119570 g     F .text	0000015c __swsetup_r
811515b0 g     O .bss	000001e0 OSQTbl
8110ac94 g     F .text	000008e0 vTimeoutCheckerTask
8114fc44 g     O .bss	0000001c xConfEth
81125acc g     F .text	000008f0 .hidden __divdf3
8110fc20 g     F .text	0000003c vChangeSyncSource
8111b4a8 g     F .text	00000120 __sfp
811542d0 g     O .bss	00000054 boot_sector_data
81102a84 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111d9a0 g     F .text	00000078 __copybits
8113f2c0 g     O .rwdata	00000408 __malloc_av_
8111b5fc g     F .text	00000004 __sinit_lock_release
81140bf0 g     O .bss	00000004 uliInitialState
81105dbc g     F .text	00000080 i2c_stop
8111048c g     F .text	00000064 Verif_Error
811104f0 g     F .text	00000034 toInt
8110e2dc g     F .text	0000004c vFailSendPreAckSenderSemaphore
81140d14 g     O .bss	00000004 OSTCBHighRdy
81110f94 g     F .text	00000720 .hidden __muldf3
81113310 g     F .text	0000005c __sread
8111b910 g     F .text	0000003c fread
81140d18 g     O .bss	00000004 OSQFreeList
8113a784 g     F .text	00000110 alt_find_file
8113a570 g     F .text	000000ac alt_dev_llist_insert
811283b0 g     F .text	00000128 __malloc_lock
81111b04 g     F .text	00000030 _fprintf_r
81127d4c g     F .text	000000fc sbrk
8110f5f4 g     F .text	0000002c vFeeSpwRMAPLoadDefault
811137a4 g     F .text	000021e0 ___svfprintf_internal_r
8110d230 g     F .text	00000088 vTMPusTestConnection
811286d4 g     F .text	00000148 OSEventNameSet
8111b1e4 g     F .text	00000064 _fflush_r
81122f70 g     F .text	000000cc _calloc_r
81140d1c g     O .bss	00000001 OSRdyGrp
811079c4 g     F .text	00000044 ucSyncStatusCycleNumber
81131904 g     F .text	00000148 OSTmrStart
81104594 g     F .text	00000040 vFeebCh5HandleIrq
81111aec g     F .text	00000018 fopen
811029a0 g     F .text	0000004c DMA_CONFIG
81140bf0 g       *ABS*	00000000 __bss_start
81112c84 g     F .text	00000128 memset
8110a46c g     F .text	00000164 setPreParsedFreePos
8113a078 g     F .text	00000060 alt_msgdma_open
81108710 g     F .text	0000055c vInAckHandlerTask
8110b870 g     F .text	00000180 main
8110e460 g     F .text	00000068 vFailGetMutexReceiverTask
8110fad8 g     F .text	0000003c vChangeEPValue
81140cc0 g     O .bss	00000004 alt_envp
81140c98 g     O .bss	00000004 __malloc_max_total_mem
8113991c g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110e018 g     F .text	0000005c ucCrc8wInit
8110ecbc g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81136908 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102f38 g     F .text	000002c8 POWER_Read
81105f74 g     F .text	00000160 i2c_read
81124114 g     F .text	00000018 __swbuf
8113eac0 g     O .rodata	00000100 OSUnMapTbl
81125150 g     F .text	000000c8 .hidden __ltsf2
81135ca4 g     F .text	00000090 alt_up_sd_card_get_attributes
8111b6dc g     F .text	00000234 _fread_r
8110e328 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
81105768 g     F .text	0000003c bDisableIsoDrivers
81140bae g     O .rwdata	00000002 OSSemEn
811324d0 g     F .text	000000bc Write_Sector_Data
811360b4 g     F .text	00000628 alt_up_sd_card_write
8112b800 g     F .text	0000039c OSFlagPost
8111345c g     F .text	00000008 __sclose
8110efc4 g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
81123134 g     F .text	00000014 fclose
811296ac g     F .text	00000118 OS_EventTaskWait
8110ee8c g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81113548 g     F .text	00000240 _strtol_r
811117cc g     F .text	000001a8 .hidden __truncdfsf2
8112a33c g     F .text	000000d4 OS_TaskStatStkChk
8113011c g     F .text	00000158 OSTaskDelReq
81119930 g     F .text	00001690 _dtoa_r
81139c38 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81112320 g     F .text	00000814 _malloc_r
81124298 g     F .text	00000030 __ascii_wctomb
8112c998 g     F .text	000001d0 OSMutexCreate
8110ee24 g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81140b58 g     O .rwdata	00000004 alt_errno
81139764 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81129164 g     F .text	00000078 OSStart
8110527c g     F .text	000000d0 bSpwcGetLink
81106cc8 g     F .text	000004e8 POWER_SPI_RW
81121680 g     F .text	000000dc __submore
81128348 g     F .text	00000068 __env_unlock
8111c254 g     F .text	000000cc _fwalk
811305d0 g     F .text	000001dc OSTaskResume
8112c628 g     F .text	000000f0 OSMemQuery
81140bc0 g     O .rwdata	00000002 OSTaskStatEn
81154924 g       *ABS*	00000000 __alt_stack_limit
81140c08 g     O .bss	00000004 ECommSpwCh
8110fd38 g     F .text	0000003c vChangeAutoResetSync
8111c7a4 g     F .text	00000064 _mbtowc_r
81140b9a g     O .rwdata	00000002 OSMemMax
8112e4f8 g     F .text	00000178 OSQPostFront
8113b638 g     F .text	000000d0 putc
81124e68 g     F .text	00000084 .hidden __divsi3
81140d1d g     O .bss	00000006 OSRdyTbl
81140b74 g     O .rwdata	00000002 OSDebugEn
8111b94c g     F .text	0000012c _malloc_trim_r
8113b9ec g       *ABS*	00000000 __CTOR_END__
81140c8c g     O .bss	00000008 xSdHandle
8111096c g     F .text	00000404 .hidden __mulsf3
81140b8c g     O .rwdata	00000002 OSFlagNodeSize
81140bf4 g     O .bss	00000004 pnt_memory
8110fe4c g     F .text	00000040 vSyncReset
81107a88 g     F .text	00000040 bSyncSetPer
81100298 g     F .text	00000514 bDdr2EepromTest
81140d54 g     O .bss	00000004 status_register
81140bd4 g     O .rwdata	00000002 OSTmrCfgMax
8110841c g     F .text	00000074 bSyncIrqFlagClrError
8110ea54 g     F .text	00000068 vFailSetPreAckSenderBuffer
8111e1c4 g     F .text	000000dc strcmp
81140d5c g     O .bss	00000004 command_register
8112da84 g     F .text	000001b4 OSQCreate
81130274 g     F .text	000001a0 OSTaskNameGet
8114daf4 g     O .bss	00000010 xReceivedACK
8112e670 g     F .text	00000214 OSQPostOpt
81129294 g     F .text	00000228 OSTimeTick
81140bbc g     O .rwdata	00000002 OSTaskMax
8113b9ec g       *ABS*	00000000 __DTOR_LIST__
8112eb50 g     F .text	000000e0 OSSemCreate
81140be0 g     O .rwdata	00000002 OSTmrWheelSize
81110120 g     F .text	00000058 _reg_read
8112d630 g     F .text	00000174 OSMutexQuery
811263bc g     F .text	00000088 .hidden __nedf2
81140bb6 g     O .rwdata	00000002 OSTaskDelEn
8110faa0 g     F .text	00000038 vLoadDefaultEPValue
8110824c g     F .text	00000074 bSyncCtrCh7OutEnable
8112f318 g     F .text	00000118 OSSemQuery
8112dc38 g     F .text	00000288 OSQDel
8112e214 g     F .text	00000174 OSQPendAbort
81140c6c g     O .bss	00000004 xMutexPreParsed
811323a0 g     F .text	00000040 alt_irq_init
8110be80 g     F .text	00000398 bSendUART64
81127ce0 g     F .text	0000006c alt_release_fd
811326c0 g     F .text	000000bc get_cluster_flag
81108490 g     F .text	00000074 bSyncIrqFlagClrBlank
8113a370 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
8111329c g     F .text	00000074 sprintf
8113e378 g     O .rodata	00000100 .hidden __clz_tab
81132c94 g     F .text	00000294 Write_File_Record_At_Offset
81101520 g     F .text	00000580 bDdr2MemoryWriteTest
8110e4c8 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
81140ca4 g     O .bss	00000004 _PathLocale
8110855c g     F .text	00000058 bSyncIrqFlagBlank
81106b80 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81131a4c g     F .text	000001e8 OSTmrStop
8110cdf0 g     F .text	00000050 usiGetIdCMD
8111f924 g     F .text	00000108 strtof
8113b4c0 g     F .text	00000014 atexit
81104514 g     F .text	00000040 vFeebCh3HandleIrq
81125094 g     F .text	000000bc .hidden __gesf2
81113464 g     F .text	0000004c strcspn
81119508 g     F .text	00000068 _write_r
8110721c g     F .text	00000074 vRstcReleaseDeviceReset
8110ebd8 g     F .text	0000004c vFailInAckHandlerTaskCreate
81128fec g     F .text	00000094 OSSchedLock
8111c538 g     F .text	00000018 setlocale
811396c4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81151790 g     O .bss	00000800 OSTmrTaskStk
811131c0 g     F .text	00000044 scanf
8112abf4 g     F .text	00000110 OSFlagCreate
81132f28 g     F .text	00000688 Check_for_DOS_FAT
81134dd4 g     F .text	000002d0 create_file
8111e1bc g     F .text	00000008 nanf
81140b2c g     O .rwdata	00000004 _impure_ptr
81140d58 g     O .bss	00000004 CSD_register_w0
81140cb8 g     O .bss	00000004 alt_argc
8111afc0 g     F .text	00000224 __sflush_r
8111c5c4 g     F .text	000000b4 _mbrtowc_r
8113a684 g     F .text	00000068 _do_dtors
8111c524 g     F .text	00000008 __locale_cjk_lang
81103340 g     F .text	0000078c sense_log
81140c00 g     O .bss	00000004 ESdmaBufferSide
81140b86 g     O .rwdata	00000002 OSEventMultiEn
81111b60 g     F .text	00000004 _fseek_r
8114db04 g     O .bss	00002000 vParserCommTask_stk
8110e074 g     F .text	00000070 printErrorTask
8110fb14 g     F .text	00000030 vChangeDefaultEPValue
8113121c g     F .text	000001c4 OSTmrCreate
81112f88 g     F .text	000001dc __srefill_r
811057a4 g     F .text	0000003c bEnableLvdsBoard
81140c70 g     O .bss	00000004 xMutexBuffer32
8112ad04 g     F .text	00000250 OSFlagDel
81140d24 g     O .bss	00000004 OSEventFreeList
8110581c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111c758 g     F .text	0000004c __ascii_mbtowc
81107d58 g     F .text	00000078 bSyncCtrExtnIrq
8111d5ac g     F .text	00000064 __ulp
8112b1d8 g     F .text	000005c0 OSFlagPend
81140bd2 g     O .rwdata	00000002 OSTmrEn
8111b618 g     F .text	00000018 __fp_unlock_all
8110a778 g     F .text	000001a8 setPreAckReceiverFreePos
81107d18 g     F .text	00000040 bSyncErrInj
81140b44 g     O .rwdata	00000008 alt_fs_list
81133770 g     F .text	00000274 check_file_name_for_FAT16_compliance
81131520 g     F .text	00000140 OSTmrNameGet
81140f44 g     O .bss	00000400 xSZData
8112a11c g     F .text	0000007c OS_StrCopy
81140d64 g     O .bss	00000004 buffer_memory
8110e8b4 g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8110f86c g     F .text	00000098 vLogWriteNUC
81140b9c g     O .rwdata	00000002 OSMemNameSize
81103acc g     F .text	000000b0 bSdmaInitM1Dma
811083a8 g     F .text	00000074 bSyncIrqEnableBlank
8113b3a0 g     F .text	00000028 OSInitHookEnd
8110f2ac g     F .text	00000348 vUpdateMemMapFEE
8110eb24 g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b1c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
81140bc8 g     O .rwdata	00000002 OSTCBPrioTblMax
8111c550 g     F .text	0000000c localeconv
81140c74 g     O .bss	00000004 xTimerRetransmission
81109e6c g     F .text	000001f0 vReceiverUartTask
81140bc4 g     O .rwdata	00000002 OSTaskStatStkChkEn
81140c78 g     O .bss	00000004 xMutexBuffer128
81104494 g     F .text	00000040 vFeebCh1HandleIrq
81104614 g     F .text	00000040 vFeebCh7HandleIrq
8113a978 g     F .text	00000058 alt_ic_isr_register
81140b98 g     O .rwdata	00000002 OSMemEn
81140b18 g     O .rwdata	00000004 alt_stack_limit_value
81112120 g     F .text	0000003c fwrite
81140d68 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
81140ba2 g     O .rwdata	00000002 OSMutexEn
81140bf0 g       *ABS*	00000000 _edata
81137728 g     F .text	00000068 altera_avalon_uart_read_fd
8110fda4 g     F .text	00000034 vLoadDefaultIdNFEEMaster
81154924 g       *ABS*	00000000 _end
81154324 g     O .bss	00000500 active_files
81140d28 g     O .bss	00000001 OSIntNesting
8110e57c g     F .text	0000004c vFailInitialization
81101460 g     F .text	000000c0 bDdr2SwitchMemory
8110f6d0 g     F .text	0000002c cFeeRMAPDump
81140c7c g     O .bss	00000004 xSemCountBuffer32
81123148 g     F .text	0000016c __fputwc
8110f620 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81119428 g     F .text	00000070 vfscanf
811350a4 g     F .text	00000150 copy_file_record_name_to_string
81136f9c g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81130f74 g     F .text	000001dc OSTimeDlyResume
811335b0 g     F .text	000000f4 Look_for_FAT16
8112b084 g     F .text	00000154 OSFlagNameSet
81140c80 g     O .bss	00000004 xMutexBuffer64
811307ac g     F .text	000001c8 OSTaskStkChk
8113aa60 g     F .text	00000094 alt_ic_irq_disable
81103c2c g     F .text	00000430 bSdmaDmaM1Transfer
81140b9e g     O .rwdata	00000002 OSMemSize
8110e6ac g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81113374 g     F .text	00000084 __swrite
81140b34 g     O .rwdata	00000004 __malloc_trim_threshold
8111c518 g     F .text	0000000c __locale_msgcharset
81140d2c g     O .bss	00000004 OSTCBCur
8110eef4 g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106c84 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113b4d4 g     F .text	00000040 exit
8112d410 g     F .text	00000220 OSMutexPost
81108504 g     F .text	00000058 bSyncIrqFlagError
811354d0 g     F .text	000003c0 alt_up_sd_card_find_next
81140ba0 g     O .rwdata	00000002 OSMemTblSize
8111c320 g     F .text	000000cc _fwalk_reent
81139abc g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81110e9c g     F .text	000000f8 .hidden __floatunsisf
8111d3a8 g     F .text	00000204 __mdiff
81104b74 g     F .text	00000180 vFeebInitIrq
8110e614 g     F .text	0000004c vFailSenderCreate
81124eec g     F .text	00000074 .hidden __modsi3
81107c64 g     F .text	0000003c uliSyncGetPer
81140c84 g     O .bss	00000004 xMutexSenderACK
8110ed54 g     F .text	00000068 vFailGetBlockingSemTimeoutTask
81140b24 g     O .rwdata	00000004 __ctype_ptr__
8110eabc g     F .text	00000068 vFailSetPreParsedBuffer
811325e0 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111b5f4 g     F .text	00000004 __sfp_lock_release
81104dc8 g     F .text	000000ac bFeebGetIrqControl
8110f02c g     F .text	00000068 vCouldNotSendTurnOff
81128e34 g     F .text	00000064 OSInit
81106154 g     F .text	00000078 bSetPainelLeds
81139204 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81140d30 g     O .bss	00000004 OSTmrTime
81101aa0 g     F .text	00000510 bDdr2MemoryReadTest
81130b60 g     F .text	0000012c OSTaskQuery
81108334 g     F .text	00000074 bSyncIrqEnableError
8112e9e8 g     F .text	000000b0 OS_QInit
8111e0ec g     F .text	000000d0 __sccl
811119d8 g     F .text	0000000c atoi
811086e0 g     F .text	00000030 vFeeTask
8112a198 g     F .text	0000005c OS_StrLen
8110490c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112c42c g     F .text	0000011c OSMemNameSet
8113e478 g     O .rodata	00000101 _ctype_
81107c28 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110e77c g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81140bba g     O .rwdata	00000002 OSTaskProfileEn
811390d4 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
81140c88 g     O .bss	00000004 xTxUARTMutex
81140d34 g     O .bss	00000004 OSTime
81140b3c g     O .rwdata	00000004 __mbtowc
81137d48 g     F .text	0000005c altera_avalon_uart_close
81140d38 g     O .bss	00000004 OSTmrSem
81151f90 g     O .bss	00000800 OSTaskIdleStk
811119f0 g     F .text	000000fc _fopen_r
81140c40 g     O .bss	00000004 pdata
8113b9b0 g     F .text	0000003c _exit
8113a3f8 g     F .text	00000134 alt_alarm_start
8112af54 g     F .text	00000130 OSFlagNameGet
81131150 g     F .text	00000064 OSTimeGet
81140c04 g     O .bss	00000004 ESdmaChBufferId
81135d34 g     F .text	00000380 alt_up_sd_card_read
8111215c g     F .text	000001c4 __smakebuf_r
811049bc g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81140be8 g     O .rwdata	00000008 alt_msgdma_list
811134b0 g     F .text	00000098 strlen
811074c0 g     F .text	000000b4 uc_spi_get_byte
8113b2d0 g     F .text	00000028 OSTaskSwHook
81127a3c g     F .text	0000015c open
81152790 g     O .bss	00000c30 OSEventTbl
8110f64c g     F .text	0000002c vFeeSpwRMAPChangeDefault
81126444 g     F .text	000000dc .hidden __gedf2
8114fb04 g     O .bss	00000010 xSenderACK
8113afc4 g     F .text	00000044 alt_putchar
811533c0 g     O .bss	00000e58 OSTCBTbl
81123460 g     F .text	00000838 __gethex
8112f430 g     F .text	00000108 OSSemSet
8110f6fc g     F .text	00000038 cFeeRMAPEchoingEnable
81140b40 g     O .rwdata	00000004 __wctomb
8110b840 g     F .text	00000030 vVariablesInitialization
81121a14 g     F .text	00000018 __sprint_r
81104e74 g     F .text	00000088 bFeebGetIrqFlags
81140bfc g     O .bss	00000004 pxDmaM2Dev
8110e144 g     F .text	0000004c vFailCreateSemaphoreResources
81140b5c g     O .rwdata	00000004 alt_priority_mask
811057e0 g     F .text	0000003c bDisableLvdsBoard
8112ec30 g     F .text	00000248 OSSemDel
81140d3c g     O .bss	00000004 OSFlagFreeList
811073fc g     F .text	000000c4 v_spi_send_byte
81107730 g     F .text	000000d0 bSSDisplayConfig
8113a9d0 g     F .text	00000090 alt_ic_irq_enable
81140b80 g     O .rwdata	00000002 OSEventNameSize
81117b84 g     F .text	0000001c __vfprintf_internal
81140d40 g     O .bss	00000001 OSStatRdy
81108008 g     F .text	00000074 bSyncCtrCh2OutEnable
81154218 g     O .bss	000000a4 OSTCBPrioTbl
81137de8 g     F .text	00000270 altera_avalon_uart_read
811242c8 g     F .text	00000064 _wctomb_r
8112827c g     F .text	000000cc __env_lock
81140bc6 g     O .rwdata	00000002 OSTaskSwHookEn
8110471c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
81126614 g     F .text	00000904 .hidden __subdf3
8114fb14 g     O .bss	00000130 xPreParsed
81107ca0 g     F .text	0000003c uliSyncGetOst
811047e8 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110c948 g     F .text	00000290 vSendEthConf
8111cdbc g     F .text	000000b0 __lo0bits
81117c64 g     F .text	000017c4 __svfscanf_r
81140b64 g     O .rwdata	00000008 alt_alarm_list
8112175c g     F .text	0000019c _ungetc_r
81140b8e g     O .rwdata	00000002 OSFlagWidth
8113a61c g     F .text	00000068 _do_ctors
811029ec g     F .text	0000004c DMA_BUSY
811241d0 g     F .text	000000c8 wcrtomb
8110b9f0 g     F .text	00000068 vCCDLoadDefaultValues
811272a0 g     F .text	000000d8 close
81107cdc g     F .text	0000003c uliSyncGetGeneral
81140cd0 g     O .bss	00000004 alt_envsem
81140d44 g     O .bss	00000004 OSIdleCtrRun
811294bc g     F .text	00000028 OSVersion
81140bd8 g     O .rwdata	00000002 OSTmrCfgWheelSize
81130c8c g     F .text	00000078 OS_TaskStkClr
8110ffe4 g     F .text	0000003c siOpenFile
81140bb2 g     O .rwdata	00000002 OSTaskCreateEn
8110cbd8 g     F .text	00000118 vSendTurnOff
8110e244 g     F .text	0000004c vFailSendPreParsedSemaphore
81133aa4 g     F .text	000002a4 match_file_record_to_name_ext
81129ae4 g     F .text	00000070 OS_EventWaitListInit
811232d8 g     F .text	00000088 fputwc
8110e1dc g     F .text	00000068 vFailSendxSemCommInit
8113b3c8 g     F .text	00000028 OSTaskIdleHook
8111b5f8 g     F .text	00000004 __sinit_lock_acquire
8111cb20 g     F .text	00000128 __multadd
8110482c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110792c g     F .text	0000004c ucSyncStatusState
81130974 g     F .text	000001ec OSTaskSuspend
8111caf8 g     F .text	00000028 _Bfree
81107bec g     F .text	0000003c uliSyncGetMbt
8112a1f4 g     F .text	00000064 OS_TaskIdle
81140bde g     O .rwdata	00000002 OSTmrTblSize
8112e884 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	1128e980 	call	81128e98 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	10920904 	addi	r2,r2,18468
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	10920904 	addi	r2,r2,18468
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	1128eec0 	call	81128eec <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a09a17 	ldw	r2,-32152(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a09a17 	ldw	r2,-32152(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110025c:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100260:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
81100264:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100268:	d6a2c614 	ori	gp,gp,35608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
8110026c:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
81100270:	1082fc14 	ori	r2,r2,3056

    movhi r3, %hi(__bss_end)
81100274:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
81100278:	18d24914 	ori	r3,r3,18724

    beq r2, r3, 1f
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>

0:
    stw zero, (r2)
81100280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
81100284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
8110028c:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100290:	11278680 	call	81127868 <alt_main>

81100294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <bDdr2EepromTest+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	00e04534 	movhi	r3,33044
811002bc:	18c39104 	addi	r3,r3,3652
811002c0:	00a04534 	movhi	r2,33044
811002c4:	10ae7b04 	addi	r2,r2,-17940
811002c8:	1009883a 	mov	r4,r2
811002cc:	00800884 	movi	r2,34
811002d0:	100d883a 	mov	r6,r2
811002d4:	200b883a 	mov	r5,r4
811002d8:	1809883a 	mov	r4,r3
811002dc:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
811002e0:	d0a04e17 	ldw	r2,-32456(gp)
811002e4:	01604534 	movhi	r5,33044
811002e8:	29439104 	addi	r5,r5,3652
811002ec:	1009883a 	mov	r4,r2
811002f0:	1111b340 	call	81111b34 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002f4:	00bfe804 	movi	r2,-96
811002f8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002fc:	00800044 	movi	r2,1
81100300:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100304:	e0bfff03 	ldbu	r2,-4(fp)
81100308:	10c00060 	cmpeqi	r3,r2,1
8110030c:	1800031e 	bne	r3,zero,8110031c <bDdr2EepromTest+0x84>
81100310:	108000a0 	cmpeqi	r2,r2,2
81100314:	1000081e 	bne	r2,zero,81100338 <bDdr2EepromTest+0xa0>
81100318:	00000e06 	br	81100354 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10827c04 	addi	r2,r2,2544
81100324:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100328:	00a00034 	movhi	r2,32768
8110032c:	10828004 	addi	r2,r2,2560
81100330:	e0bffb15 	stw	r2,-20(fp)
		break;
81100334:	00001906 	br	8110039c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100338:	00a00034 	movhi	r2,32768
8110033c:	10825804 	addi	r2,r2,2400
81100340:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100344:	00a00034 	movhi	r2,32768
81100348:	10825c04 	addi	r2,r2,2416
8110034c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100350:	00001206 	br	8110039c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
81100354:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100358:	00e04534 	movhi	r3,33044
8110035c:	18c39104 	addi	r3,r3,3652
81100360:	00a04534 	movhi	r2,33044
81100364:	10ae8404 	addi	r2,r2,-17904
81100368:	1009883a 	mov	r4,r2
8110036c:	00800bc4 	movi	r2,47
81100370:	100d883a 	mov	r6,r2
81100374:	200b883a 	mov	r5,r4
81100378:	1809883a 	mov	r4,r3
8110037c:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100380:	d0a04e17 	ldw	r2,-32456(gp)
81100384:	01604534 	movhi	r5,33044
81100388:	29439104 	addi	r5,r5,3652
8110038c:	1009883a 	mov	r4,r2
81100390:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	0000ff06 	br	81100798 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110039c:	00e04534 	movhi	r3,33044
811003a0:	18c39104 	addi	r3,r3,3652
811003a4:	00a04534 	movhi	r2,33044
811003a8:	10ae9004 	addi	r2,r2,-17856
811003ac:	1009883a 	mov	r4,r2
811003b0:	008005c4 	movi	r2,23
811003b4:	100d883a 	mov	r6,r2
811003b8:	200b883a 	mov	r5,r4
811003bc:	1809883a 	mov	r4,r3
811003c0:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
811003c4:	d0a04e17 	ldw	r2,-32456(gp)
811003c8:	01604534 	movhi	r5,33044
811003cc:	29439104 	addi	r5,r5,3652
811003d0:	1009883a 	mov	r4,r2
811003d4:	1111b340 	call	81111b34 <fprintf>
#endif
	usleep(20 * 1000);
811003d8:	01138804 	movi	r4,20000
811003dc:	1127ffc0 	call	81127ffc <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003e0:	e03ffc15 	stw	zero,-16(fp)
811003e4:	00003306 	br	811004b4 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
811003e8:	e0bffc17 	ldw	r2,-16(fp)
811003ec:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003f0:	e0bffd03 	ldbu	r2,-12(fp)
811003f4:	10c03fcc 	andi	r3,r2,255
811003f8:	18c0201c 	xori	r3,r3,128
811003fc:	18ffe004 	addi	r3,r3,-128
81100400:	e13ffd43 	ldbu	r4,-11(fp)
81100404:	e0bffe04 	addi	r2,fp,-8
81100408:	d8800015 	stw	r2,0(sp)
8110040c:	200f883a 	mov	r7,r4
81100410:	180d883a 	mov	r6,r3
81100414:	e17ffb17 	ldw	r5,-20(fp)
81100418:	e13ffa17 	ldw	r4,-24(fp)
8110041c:	1105ac00 	call	81105ac0 <I2C_Read>
81100420:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100424:	e0bff917 	ldw	r2,-28(fp)
81100428:	10001026 	beq	r2,zero,8110046c <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110042c:	e0bffd43 	ldbu	r2,-11(fp)
81100430:	e0fffe03 	ldbu	r3,-8(fp)
81100434:	18c03fcc 	andi	r3,r3,255
81100438:	180f883a 	mov	r7,r3
8110043c:	100d883a 	mov	r6,r2
81100440:	01604534 	movhi	r5,33044
81100444:	296e9604 	addi	r5,r5,-17832
81100448:	01204534 	movhi	r4,33044
8110044c:	21039104 	addi	r4,r4,3652
81100450:	111329c0 	call	8111329c <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100454:	d0a04e17 	ldw	r2,-32456(gp)
81100458:	01604534 	movhi	r5,33044
8110045c:	29439104 	addi	r5,r5,3652
81100460:	1009883a 	mov	r4,r2
81100464:	1111b340 	call	81111b34 <fprintf>
81100468:	00000f06 	br	811004a8 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
8110046c:	00e04534 	movhi	r3,33044
81100470:	18c39104 	addi	r3,r3,3652
81100474:	00a04534 	movhi	r2,33044
81100478:	10ae9b04 	addi	r2,r2,-17812
8110047c:	1009883a 	mov	r4,r2
81100480:	008005c4 	movi	r2,23
81100484:	100d883a 	mov	r6,r2
81100488:	200b883a 	mov	r5,r4
8110048c:	1809883a 	mov	r4,r3
81100490:	1112b340 	call	81112b34 <memcpy>
			debug(fp, cDebugBuffer);
81100494:	d0a04e17 	ldw	r2,-32456(gp)
81100498:	01604534 	movhi	r5,33044
8110049c:	29439104 	addi	r5,r5,3652
811004a0:	1009883a 	mov	r4,r2
811004a4:	1111b340 	call	81111b34 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811004a8:	e0bffc17 	ldw	r2,-16(fp)
811004ac:	10800044 	addi	r2,r2,1
811004b0:	e0bffc15 	stw	r2,-16(fp)
811004b4:	e0bffc17 	ldw	r2,-16(fp)
811004b8:	10804008 	cmpgei	r2,r2,256
811004bc:	1000021e 	bne	r2,zero,811004c8 <bDdr2EepromTest+0x230>
811004c0:	e0bff917 	ldw	r2,-28(fp)
811004c4:	103fc81e 	bne	r2,zero,811003e8 <__reset+0xfb0e03e8>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004c8:	e0bff917 	ldw	r2,-28(fp)
811004cc:	10001026 	beq	r2,zero,81100510 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004d0:	00e04534 	movhi	r3,33044
811004d4:	18c39104 	addi	r3,r3,3652
811004d8:	00a04534 	movhi	r2,33044
811004dc:	10aea104 	addi	r2,r2,-17788
811004e0:	1009883a 	mov	r4,r2
811004e4:	00800884 	movi	r2,34
811004e8:	100d883a 	mov	r6,r2
811004ec:	200b883a 	mov	r5,r4
811004f0:	1809883a 	mov	r4,r3
811004f4:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
811004f8:	d0a04e17 	ldw	r2,-32456(gp)
811004fc:	01604534 	movhi	r5,33044
81100500:	29439104 	addi	r5,r5,3652
81100504:	1009883a 	mov	r4,r2
81100508:	1111b340 	call	81111b34 <fprintf>
8110050c:	00000f06 	br	8110054c <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100510:	00e04534 	movhi	r3,33044
81100514:	18c39104 	addi	r3,r3,3652
81100518:	00a04534 	movhi	r2,33044
8110051c:	10aeaa04 	addi	r2,r2,-17752
81100520:	1009883a 	mov	r4,r2
81100524:	008007c4 	movi	r2,31
81100528:	100d883a 	mov	r6,r2
8110052c:	200b883a 	mov	r5,r4
81100530:	1809883a 	mov	r4,r3
81100534:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81100538:	d0a04e17 	ldw	r2,-32456(gp)
8110053c:	01604534 	movhi	r5,33044
81100540:	29439104 	addi	r5,r5,3652
81100544:	1009883a 	mov	r4,r2
81100548:	1111b340 	call	81111b34 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
8110054c:	00e04534 	movhi	r3,33044
81100550:	18c39104 	addi	r3,r3,3652
81100554:	00a04534 	movhi	r2,33044
81100558:	10aeb204 	addi	r2,r2,-17720
8110055c:	1009883a 	mov	r4,r2
81100560:	00800604 	movi	r2,24
81100564:	100d883a 	mov	r6,r2
81100568:	200b883a 	mov	r5,r4
8110056c:	1809883a 	mov	r4,r3
81100570:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81100574:	d0a04e17 	ldw	r2,-32456(gp)
81100578:	01604534 	movhi	r5,33044
8110057c:	29439104 	addi	r5,r5,3652
81100580:	1009883a 	mov	r4,r2
81100584:	1111b340 	call	81111b34 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100588:	00800484 	movi	r2,18
8110058c:	e0bffd85 	stb	r2,-10(fp)
81100590:	00bfe004 	movi	r2,-128
81100594:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100598:	01138804 	movi	r4,20000
8110059c:	1127ffc0 	call	81127ffc <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005a0:	e0bffd03 	ldbu	r2,-12(fp)
811005a4:	10c03fcc 	andi	r3,r2,255
811005a8:	18c0201c 	xori	r3,r3,128
811005ac:	18ffe004 	addi	r3,r3,-128
811005b0:	e13ffdc3 	ldbu	r4,-9(fp)
811005b4:	e0bffd83 	ldbu	r2,-10(fp)
811005b8:	d8800015 	stw	r2,0(sp)
811005bc:	200f883a 	mov	r7,r4
811005c0:	180d883a 	mov	r6,r3
811005c4:	e17ffb17 	ldw	r5,-20(fp)
811005c8:	e13ffa17 	ldw	r4,-24(fp)
811005cc:	11059e00 	call	811059e0 <I2C_Write>
811005d0:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005d4:	e0bff917 	ldw	r2,-28(fp)
811005d8:	1000101e 	bne	r2,zero,8110061c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005dc:	00e04534 	movhi	r3,33044
811005e0:	18c39104 	addi	r3,r3,3652
811005e4:	00a04534 	movhi	r2,33044
811005e8:	10aeb804 	addi	r2,r2,-17696
811005ec:	1009883a 	mov	r4,r2
811005f0:	00800604 	movi	r2,24
811005f4:	100d883a 	mov	r6,r2
811005f8:	200b883a 	mov	r5,r4
811005fc:	1809883a 	mov	r4,r3
81100600:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81100604:	d0a04e17 	ldw	r2,-32456(gp)
81100608:	01604534 	movhi	r5,33044
8110060c:	29439104 	addi	r5,r5,3652
81100610:	1009883a 	mov	r4,r2
81100614:	1111b340 	call	81111b34 <fprintf>
81100618:	00003306 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110061c:	e0bffd03 	ldbu	r2,-12(fp)
81100620:	10c03fcc 	andi	r3,r2,255
81100624:	18c0201c 	xori	r3,r3,128
81100628:	18ffe004 	addi	r3,r3,-128
8110062c:	e13ffdc3 	ldbu	r4,-9(fp)
81100630:	e0bffe44 	addi	r2,fp,-7
81100634:	d8800015 	stw	r2,0(sp)
81100638:	200f883a 	mov	r7,r4
8110063c:	180d883a 	mov	r6,r3
81100640:	e17ffb17 	ldw	r5,-20(fp)
81100644:	e13ffa17 	ldw	r4,-24(fp)
81100648:	1105ac00 	call	81105ac0 <I2C_Read>
8110064c:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100650:	e0bff917 	ldw	r2,-28(fp)
81100654:	1000101e 	bne	r2,zero,81100698 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100658:	00e04534 	movhi	r3,33044
8110065c:	18c39104 	addi	r3,r3,3652
81100660:	00a04534 	movhi	r2,33044
81100664:	10aebe04 	addi	r2,r2,-17672
81100668:	1009883a 	mov	r4,r2
8110066c:	00800884 	movi	r2,34
81100670:	100d883a 	mov	r6,r2
81100674:	200b883a 	mov	r5,r4
81100678:	1809883a 	mov	r4,r3
8110067c:	1112b340 	call	81112b34 <memcpy>
			debug(fp, cDebugBuffer);
81100680:	d0a04e17 	ldw	r2,-32456(gp)
81100684:	01604534 	movhi	r5,33044
81100688:	29439104 	addi	r5,r5,3652
8110068c:	1009883a 	mov	r4,r2
81100690:	1111b340 	call	81111b34 <fprintf>
81100694:	00001406 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100698:	e0bffe43 	ldbu	r2,-7(fp)
8110069c:	10c03fcc 	andi	r3,r2,255
811006a0:	e0bffd83 	ldbu	r2,-10(fp)
811006a4:	18801026 	beq	r3,r2,811006e8 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
811006a8:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811006ac:	e0bffe43 	ldbu	r2,-7(fp)
811006b0:	10803fcc 	andi	r2,r2,255
811006b4:	e0fffd83 	ldbu	r3,-10(fp)
811006b8:	180f883a 	mov	r7,r3
811006bc:	100d883a 	mov	r6,r2
811006c0:	01604534 	movhi	r5,33044
811006c4:	296ec704 	addi	r5,r5,-17636
811006c8:	01204534 	movhi	r4,33044
811006cc:	21039104 	addi	r4,r4,3652
811006d0:	111329c0 	call	8111329c <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006d4:	d0a04e17 	ldw	r2,-32456(gp)
811006d8:	01604534 	movhi	r5,33044
811006dc:	29439104 	addi	r5,r5,3652
811006e0:	1009883a 	mov	r4,r2
811006e4:	1111b340 	call	81111b34 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006e8:	e0bff917 	ldw	r2,-28(fp)
811006ec:	10001026 	beq	r2,zero,81100730 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006f0:	00e04534 	movhi	r3,33044
811006f4:	18c39104 	addi	r3,r3,3652
811006f8:	00a04534 	movhi	r2,33044
811006fc:	10aed604 	addi	r2,r2,-17576
81100700:	1009883a 	mov	r4,r2
81100704:	008008c4 	movi	r2,35
81100708:	100d883a 	mov	r6,r2
8110070c:	200b883a 	mov	r5,r4
81100710:	1809883a 	mov	r4,r3
81100714:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81100718:	d0a04e17 	ldw	r2,-32456(gp)
8110071c:	01604534 	movhi	r5,33044
81100720:	29439104 	addi	r5,r5,3652
81100724:	1009883a 	mov	r4,r2
81100728:	1111b340 	call	81111b34 <fprintf>
8110072c:	00000f06 	br	8110076c <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100730:	00e04534 	movhi	r3,33044
81100734:	18c39104 	addi	r3,r3,3652
81100738:	00a04534 	movhi	r2,33044
8110073c:	10aedf04 	addi	r2,r2,-17540
81100740:	1009883a 	mov	r4,r2
81100744:	00800804 	movi	r2,32
81100748:	100d883a 	mov	r6,r2
8110074c:	200b883a 	mov	r5,r4
81100750:	1809883a 	mov	r4,r3
81100754:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81100758:	d0a04e17 	ldw	r2,-32456(gp)
8110075c:	01604534 	movhi	r5,33044
81100760:	29439104 	addi	r5,r5,3652
81100764:	1009883a 	mov	r4,r2
81100768:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110076c:	00a04534 	movhi	r2,33044
81100770:	10839104 	addi	r2,r2,3652
81100774:	00c00284 	movi	r3,10
81100778:	10c00005 	stb	r3,0(r2)
8110077c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100780:	d0a04e17 	ldw	r2,-32456(gp)
81100784:	01604534 	movhi	r5,33044
81100788:	29439104 	addi	r5,r5,3652
8110078c:	1009883a 	mov	r4,r2
81100790:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
81100794:	e0bff917 	ldw	r2,-28(fp)
}
81100798:	e037883a 	mov	sp,fp
8110079c:	dfc00117 	ldw	ra,4(sp)
811007a0:	df000017 	ldw	fp,0(sp)
811007a4:	dec00204 	addi	sp,sp,8
811007a8:	f800283a 	ret

811007ac <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811007ac:	deffb704 	addi	sp,sp,-292
811007b0:	de00012e 	bgeu	sp,et,811007b8 <bDdr2EepromDump+0xc>
811007b4:	003b68fa 	trap	3
811007b8:	dfc04815 	stw	ra,288(sp)
811007bc:	df004715 	stw	fp,284(sp)
811007c0:	df004704 	addi	fp,sp,284
811007c4:	2005883a 	mov	r2,r4
811007c8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007cc:	00e04534 	movhi	r3,33044
811007d0:	18c39104 	addi	r3,r3,3652
811007d4:	00a04534 	movhi	r2,33044
811007d8:	10aee704 	addi	r2,r2,-17508
811007dc:	1009883a 	mov	r4,r2
811007e0:	00800884 	movi	r2,34
811007e4:	100d883a 	mov	r6,r2
811007e8:	200b883a 	mov	r5,r4
811007ec:	1809883a 	mov	r4,r3
811007f0:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
811007f4:	d0a04e17 	ldw	r2,-32456(gp)
811007f8:	01604534 	movhi	r5,33044
811007fc:	29439104 	addi	r5,r5,3652
81100800:	1009883a 	mov	r4,r2
81100804:	1111b340 	call	81111b34 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100808:	00bfe804 	movi	r2,-96
8110080c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100810:	00800044 	movi	r2,1
81100814:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100818:	e0bfff03 	ldbu	r2,-4(fp)
8110081c:	10c00060 	cmpeqi	r3,r2,1
81100820:	1800031e 	bne	r3,zero,81100830 <bDdr2EepromDump+0x84>
81100824:	108000a0 	cmpeqi	r2,r2,2
81100828:	1000081e 	bne	r2,zero,8110084c <bDdr2EepromDump+0xa0>
8110082c:	00000e06 	br	81100868 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100830:	00a00034 	movhi	r2,32768
81100834:	10827c04 	addi	r2,r2,2544
81100838:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110083c:	00a00034 	movhi	r2,32768
81100840:	10828004 	addi	r2,r2,2560
81100844:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100848:	00001906 	br	811008b0 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8110084c:	00a00034 	movhi	r2,32768
81100850:	10825804 	addi	r2,r2,2400
81100854:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100858:	00a00034 	movhi	r2,32768
8110085c:	10825c04 	addi	r2,r2,2416
81100860:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100864:	00001206 	br	811008b0 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
81100868:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110086c:	00e04534 	movhi	r3,33044
81100870:	18c39104 	addi	r3,r3,3652
81100874:	00a04534 	movhi	r2,33044
81100878:	10aef004 	addi	r2,r2,-17472
8110087c:	1009883a 	mov	r4,r2
81100880:	00800bc4 	movi	r2,47
81100884:	100d883a 	mov	r6,r2
81100888:	200b883a 	mov	r5,r4
8110088c:	1809883a 	mov	r4,r3
81100890:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100894:	d0a04e17 	ldw	r2,-32456(gp)
81100898:	01604534 	movhi	r5,33044
8110089c:	29439104 	addi	r5,r5,3652
811008a0:	1009883a 	mov	r4,r2
811008a4:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
811008a8:	e0bfbe17 	ldw	r2,-264(fp)
811008ac:	0002e706 	br	8110144c <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811008b0:	e0bfbd03 	ldbu	r2,-268(fp)
811008b4:	10c03fcc 	andi	r3,r2,255
811008b8:	18c0201c 	xori	r3,r3,128
811008bc:	18ffe004 	addi	r3,r3,-128
811008c0:	e13fbf04 	addi	r4,fp,-260
811008c4:	00804004 	movi	r2,256
811008c8:	d8800015 	stw	r2,0(sp)
811008cc:	200f883a 	mov	r7,r4
811008d0:	180d883a 	mov	r6,r3
811008d4:	e17fbb17 	ldw	r5,-276(fp)
811008d8:	e13fba17 	ldw	r4,-280(fp)
811008dc:	1105bc80 	call	81105bc8 <I2C_MultipleRead>
811008e0:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008e4:	e0bfbe17 	ldw	r2,-264(fp)
811008e8:	1002be26 	beq	r2,zero,811013e4 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008ec:	e03fbc15 	stw	zero,-272(fp)
811008f0:	0002b606 	br	811013cc <bDdr2EepromDump+0xc20>
			if (iI == 0) {
811008f4:	e0bfbc17 	ldw	r2,-272(fp)
811008f8:	1000121e 	bne	r2,zero,81100944 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008fc:	e0ffbf04 	addi	r3,fp,-260
81100900:	e0bfbc17 	ldw	r2,-272(fp)
81100904:	1885883a 	add	r2,r3,r2
81100908:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110090c:	10803fcc 	andi	r2,r2,255
81100910:	100f883a 	mov	r7,r2
81100914:	e1bfbc17 	ldw	r6,-272(fp)
81100918:	01604534 	movhi	r5,33044
8110091c:	296efc04 	addi	r5,r5,-17424
81100920:	01204534 	movhi	r4,33044
81100924:	21039104 	addi	r4,r4,3652
81100928:	111329c0 	call	8111329c <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110092c:	d0a04e17 	ldw	r2,-32456(gp)
81100930:	01604534 	movhi	r5,33044
81100934:	29439104 	addi	r5,r5,3652
81100938:	1009883a 	mov	r4,r2
8110093c:	1111b340 	call	81111b34 <fprintf>
81100940:	00029f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10800058 	cmpnei	r2,r2,1
8110094c:	1000101e 	bne	r2,zero,81100990 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100950:	00e04534 	movhi	r3,33044
81100954:	18c39104 	addi	r3,r3,3652
81100958:	00a04534 	movhi	r2,33044
8110095c:	10af0804 	addi	r2,r2,-17376
81100960:	1009883a 	mov	r4,r2
81100964:	00800c04 	movi	r2,48
81100968:	100d883a 	mov	r6,r2
8110096c:	200b883a 	mov	r5,r4
81100970:	1809883a 	mov	r4,r3
81100974:	1112b340 	call	81112b34 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100978:	d0a04e17 	ldw	r2,-32456(gp)
8110097c:	01604534 	movhi	r5,33044
81100980:	29439104 	addi	r5,r5,3652
81100984:	1009883a 	mov	r4,r2
81100988:	1111b340 	call	81111b34 <fprintf>
8110098c:	00028c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100990:	e0bfbc17 	ldw	r2,-272(fp)
81100994:	10800098 	cmpnei	r2,r2,2
81100998:	1000101e 	bne	r2,zero,811009dc <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
8110099c:	00e04534 	movhi	r3,33044
811009a0:	18c39104 	addi	r3,r3,3652
811009a4:	00a04534 	movhi	r2,33044
811009a8:	10af1404 	addi	r2,r2,-17328
811009ac:	1009883a 	mov	r4,r2
811009b0:	008007c4 	movi	r2,31
811009b4:	100d883a 	mov	r6,r2
811009b8:	200b883a 	mov	r5,r4
811009bc:	1809883a 	mov	r4,r3
811009c0:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
811009c4:	d0a04e17 	ldw	r2,-32456(gp)
811009c8:	01604534 	movhi	r5,33044
811009cc:	29439104 	addi	r5,r5,3652
811009d0:	1009883a 	mov	r4,r2
811009d4:	1111b340 	call	81111b34 <fprintf>
811009d8:	00027906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108000d8 	cmpnei	r2,r2,3
811009e4:	1000101e 	bne	r2,zero,81100a28 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009e8:	00e04534 	movhi	r3,33044
811009ec:	18c39104 	addi	r3,r3,3652
811009f0:	00a04534 	movhi	r2,33044
811009f4:	10af1c04 	addi	r2,r2,-17296
811009f8:	1009883a 	mov	r4,r2
811009fc:	008009c4 	movi	r2,39
81100a00:	100d883a 	mov	r6,r2
81100a04:	200b883a 	mov	r5,r4
81100a08:	1809883a 	mov	r4,r3
81100a0c:	1112b340 	call	81112b34 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a10:	d0a04e17 	ldw	r2,-32456(gp)
81100a14:	01604534 	movhi	r5,33044
81100a18:	29439104 	addi	r5,r5,3652
81100a1c:	1009883a 	mov	r4,r2
81100a20:	1111b340 	call	81111b34 <fprintf>
81100a24:	00026606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a28:	e0bfbc17 	ldw	r2,-272(fp)
81100a2c:	10800118 	cmpnei	r2,r2,4
81100a30:	1000101e 	bne	r2,zero,81100a74 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a34:	00e04534 	movhi	r3,33044
81100a38:	18c39104 	addi	r3,r3,3652
81100a3c:	00a04534 	movhi	r2,33044
81100a40:	10af2604 	addi	r2,r2,-17256
81100a44:	1009883a 	mov	r4,r2
81100a48:	00800a84 	movi	r2,42
81100a4c:	100d883a 	mov	r6,r2
81100a50:	200b883a 	mov	r5,r4
81100a54:	1809883a 	mov	r4,r3
81100a58:	1112b340 	call	81112b34 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a5c:	d0a04e17 	ldw	r2,-32456(gp)
81100a60:	01604534 	movhi	r5,33044
81100a64:	29439104 	addi	r5,r5,3652
81100a68:	1009883a 	mov	r4,r2
81100a6c:	1111b340 	call	81111b34 <fprintf>
81100a70:	00025306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100a74:	e0bfbc17 	ldw	r2,-272(fp)
81100a78:	10800158 	cmpnei	r2,r2,5
81100a7c:	1000101e 	bne	r2,zero,81100ac0 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a80:	00e04534 	movhi	r3,33044
81100a84:	18c39104 	addi	r3,r3,3652
81100a88:	00a04534 	movhi	r2,33044
81100a8c:	10af3104 	addi	r2,r2,-17212
81100a90:	1009883a 	mov	r4,r2
81100a94:	00800c04 	movi	r2,48
81100a98:	100d883a 	mov	r6,r2
81100a9c:	200b883a 	mov	r5,r4
81100aa0:	1809883a 	mov	r4,r3
81100aa4:	1112b340 	call	81112b34 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100aa8:	d0a04e17 	ldw	r2,-32456(gp)
81100aac:	01604534 	movhi	r5,33044
81100ab0:	29439104 	addi	r5,r5,3652
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	1111b340 	call	81111b34 <fprintf>
81100abc:	00024006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100ac0:	e0bfbc17 	ldw	r2,-272(fp)
81100ac4:	10800198 	cmpnei	r2,r2,6
81100ac8:	1000101e 	bne	r2,zero,81100b0c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100acc:	00e04534 	movhi	r3,33044
81100ad0:	18c39104 	addi	r3,r3,3652
81100ad4:	00a04534 	movhi	r2,33044
81100ad8:	10af3d04 	addi	r2,r2,-17164
81100adc:	1009883a 	mov	r4,r2
81100ae0:	00800544 	movi	r2,21
81100ae4:	100d883a 	mov	r6,r2
81100ae8:	200b883a 	mov	r5,r4
81100aec:	1809883a 	mov	r4,r3
81100af0:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100af4:	d0a04e17 	ldw	r2,-32456(gp)
81100af8:	01604534 	movhi	r5,33044
81100afc:	29439104 	addi	r5,r5,3652
81100b00:	1009883a 	mov	r4,r2
81100b04:	1111b340 	call	81111b34 <fprintf>
81100b08:	00022d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b0c:	e0bfbc17 	ldw	r2,-272(fp)
81100b10:	108001d8 	cmpnei	r2,r2,7
81100b14:	1000101e 	bne	r2,zero,81100b58 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b18:	00e04534 	movhi	r3,33044
81100b1c:	18c39104 	addi	r3,r3,3652
81100b20:	00a04534 	movhi	r2,33044
81100b24:	10af4304 	addi	r2,r2,-17140
81100b28:	1009883a 	mov	r4,r2
81100b2c:	00800804 	movi	r2,32
81100b30:	100d883a 	mov	r6,r2
81100b34:	200b883a 	mov	r5,r4
81100b38:	1809883a 	mov	r4,r3
81100b3c:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100b40:	d0a04e17 	ldw	r2,-32456(gp)
81100b44:	01604534 	movhi	r5,33044
81100b48:	29439104 	addi	r5,r5,3652
81100b4c:	1009883a 	mov	r4,r2
81100b50:	1111b340 	call	81111b34 <fprintf>
81100b54:	00021a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100b58:	e0bfbc17 	ldw	r2,-272(fp)
81100b5c:	10800418 	cmpnei	r2,r2,16
81100b60:	1000101e 	bne	r2,zero,81100ba4 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b64:	00e04534 	movhi	r3,33044
81100b68:	18c39104 	addi	r3,r3,3652
81100b6c:	00a04534 	movhi	r2,33044
81100b70:	10af4b04 	addi	r2,r2,-17108
81100b74:	1009883a 	mov	r4,r2
81100b78:	00800d04 	movi	r2,52
81100b7c:	100d883a 	mov	r6,r2
81100b80:	200b883a 	mov	r5,r4
81100b84:	1809883a 	mov	r4,r3
81100b88:	1112b340 	call	81112b34 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b8c:	d0a04e17 	ldw	r2,-32456(gp)
81100b90:	01604534 	movhi	r5,33044
81100b94:	29439104 	addi	r5,r5,3652
81100b98:	1009883a 	mov	r4,r2
81100b9c:	1111b340 	call	81111b34 <fprintf>
81100ba0:	00020706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100ba4:	e0bfbc17 	ldw	r2,-272(fp)
81100ba8:	10800358 	cmpnei	r2,r2,13
81100bac:	1000101e 	bne	r2,zero,81100bf0 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100bb0:	00e04534 	movhi	r3,33044
81100bb4:	18c39104 	addi	r3,r3,3652
81100bb8:	00a04534 	movhi	r2,33044
81100bbc:	10af5804 	addi	r2,r2,-17056
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	008005c4 	movi	r2,23
81100bc8:	100d883a 	mov	r6,r2
81100bcc:	200b883a 	mov	r5,r4
81100bd0:	1809883a 	mov	r4,r3
81100bd4:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100bd8:	d0a04e17 	ldw	r2,-32456(gp)
81100bdc:	01604534 	movhi	r5,33044
81100be0:	29439104 	addi	r5,r5,3652
81100be4:	1009883a 	mov	r4,r2
81100be8:	1111b340 	call	81111b34 <fprintf>
81100bec:	0001f406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100bf0:	e0bfbc17 	ldw	r2,-272(fp)
81100bf4:	10800398 	cmpnei	r2,r2,14
81100bf8:	1000101e 	bne	r2,zero,81100c3c <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bfc:	00e04534 	movhi	r3,33044
81100c00:	18c39104 	addi	r3,r3,3652
81100c04:	00a04534 	movhi	r2,33044
81100c08:	10af5e04 	addi	r2,r2,-17032
81100c0c:	1009883a 	mov	r4,r2
81100c10:	008004c4 	movi	r2,19
81100c14:	100d883a 	mov	r6,r2
81100c18:	200b883a 	mov	r5,r4
81100c1c:	1809883a 	mov	r4,r3
81100c20:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100c24:	d0a04e17 	ldw	r2,-32456(gp)
81100c28:	01604534 	movhi	r5,33044
81100c2c:	29439104 	addi	r5,r5,3652
81100c30:	1009883a 	mov	r4,r2
81100c34:	1111b340 	call	81111b34 <fprintf>
81100c38:	0001e106 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100c3c:	e0bfbc17 	ldw	r2,-272(fp)
81100c40:	10800458 	cmpnei	r2,r2,17
81100c44:	1000101e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c48:	00e04534 	movhi	r3,33044
81100c4c:	18c39104 	addi	r3,r3,3652
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10af6304 	addi	r2,r2,-17012
81100c58:	1009883a 	mov	r4,r2
81100c5c:	00800684 	movi	r2,26
81100c60:	100d883a 	mov	r6,r2
81100c64:	200b883a 	mov	r5,r4
81100c68:	1809883a 	mov	r4,r3
81100c6c:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100c70:	d0a04e17 	ldw	r2,-32456(gp)
81100c74:	01604534 	movhi	r5,33044
81100c78:	29439104 	addi	r5,r5,3652
81100c7c:	1009883a 	mov	r4,r2
81100c80:	1111b340 	call	81111b34 <fprintf>
81100c84:	0001ce06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	10800498 	cmpnei	r2,r2,18
81100c90:	1000101e 	bne	r2,zero,81100cd4 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c94:	00e04534 	movhi	r3,33044
81100c98:	18c39104 	addi	r3,r3,3652
81100c9c:	00a04534 	movhi	r2,33044
81100ca0:	10af6a04 	addi	r2,r2,-16984
81100ca4:	1009883a 	mov	r4,r2
81100ca8:	00800d44 	movi	r2,53
81100cac:	100d883a 	mov	r6,r2
81100cb0:	200b883a 	mov	r5,r4
81100cb4:	1809883a 	mov	r4,r3
81100cb8:	1112b340 	call	81112b34 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100cbc:	d0a04e17 	ldw	r2,-32456(gp)
81100cc0:	01604534 	movhi	r5,33044
81100cc4:	29439104 	addi	r5,r5,3652
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	1111b340 	call	81111b34 <fprintf>
81100cd0:	0001bb06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100cd4:	e0bfbc17 	ldw	r2,-272(fp)
81100cd8:	10800518 	cmpnei	r2,r2,20
81100cdc:	1000101e 	bne	r2,zero,81100d20 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ce0:	00e04534 	movhi	r3,33044
81100ce4:	18c39104 	addi	r3,r3,3652
81100ce8:	00a04534 	movhi	r2,33044
81100cec:	10af7804 	addi	r2,r2,-16928
81100cf0:	1009883a 	mov	r4,r2
81100cf4:	00801204 	movi	r2,72
81100cf8:	100d883a 	mov	r6,r2
81100cfc:	200b883a 	mov	r5,r4
81100d00:	1809883a 	mov	r4,r3
81100d04:	1112b340 	call	81112b34 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d08:	d0a04e17 	ldw	r2,-32456(gp)
81100d0c:	01604534 	movhi	r5,33044
81100d10:	29439104 	addi	r5,r5,3652
81100d14:	1009883a 	mov	r4,r2
81100d18:	1111b340 	call	81111b34 <fprintf>
81100d1c:	0001a806 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d20:	e0bfbc17 	ldw	r2,-272(fp)
81100d24:	10800598 	cmpnei	r2,r2,22
81100d28:	1000101e 	bne	r2,zero,81100d6c <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d2c:	00e04534 	movhi	r3,33044
81100d30:	18c39104 	addi	r3,r3,3652
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10af8a04 	addi	r2,r2,-16856
81100d3c:	1009883a 	mov	r4,r2
81100d40:	00800784 	movi	r2,30
81100d44:	100d883a 	mov	r6,r2
81100d48:	200b883a 	mov	r5,r4
81100d4c:	1809883a 	mov	r4,r3
81100d50:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81100d54:	d0a04e17 	ldw	r2,-32456(gp)
81100d58:	01604534 	movhi	r5,33044
81100d5c:	29439104 	addi	r5,r5,3652
81100d60:	1009883a 	mov	r4,r2
81100d64:	1111b340 	call	81111b34 <fprintf>
81100d68:	00019506 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100d6c:	e0bfbc17 	ldw	r2,-272(fp)
81100d70:	108006d8 	cmpnei	r2,r2,27
81100d74:	1000101e 	bne	r2,zero,81100db8 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d78:	00e04534 	movhi	r3,33044
81100d7c:	18c39104 	addi	r3,r3,3652
81100d80:	00a04534 	movhi	r2,33044
81100d84:	10af9204 	addi	r2,r2,-16824
81100d88:	1009883a 	mov	r4,r2
81100d8c:	00800a04 	movi	r2,40
81100d90:	100d883a 	mov	r6,r2
81100d94:	200b883a 	mov	r5,r4
81100d98:	1809883a 	mov	r4,r3
81100d9c:	1112b340 	call	81112b34 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100da0:	d0a04e17 	ldw	r2,-32456(gp)
81100da4:	01604534 	movhi	r5,33044
81100da8:	29439104 	addi	r5,r5,3652
81100dac:	1009883a 	mov	r4,r2
81100db0:	1111b340 	call	81111b34 <fprintf>
81100db4:	00018206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100db8:	e0bfbc17 	ldw	r2,-272(fp)
81100dbc:	10800718 	cmpnei	r2,r2,28
81100dc0:	1000101e 	bne	r2,zero,81100e04 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100dc4:	00e04534 	movhi	r3,33044
81100dc8:	18c39104 	addi	r3,r3,3652
81100dcc:	00a04534 	movhi	r2,33044
81100dd0:	10af9c04 	addi	r2,r2,-16784
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	00800cc4 	movi	r2,51
81100ddc:	100d883a 	mov	r6,r2
81100de0:	200b883a 	mov	r5,r4
81100de4:	1809883a 	mov	r4,r3
81100de8:	1112b340 	call	81112b34 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dec:	d0a04e17 	ldw	r2,-32456(gp)
81100df0:	01604534 	movhi	r5,33044
81100df4:	29439104 	addi	r5,r5,3652
81100df8:	1009883a 	mov	r4,r2
81100dfc:	1111b340 	call	81111b34 <fprintf>
81100e00:	00016f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e04:	e0bfbc17 	ldw	r2,-272(fp)
81100e08:	10800758 	cmpnei	r2,r2,29
81100e0c:	1000101e 	bne	r2,zero,81100e50 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e10:	00e04534 	movhi	r3,33044
81100e14:	18c39104 	addi	r3,r3,3652
81100e18:	00a04534 	movhi	r2,33044
81100e1c:	10afa904 	addi	r2,r2,-16732
81100e20:	1009883a 	mov	r4,r2
81100e24:	008009c4 	movi	r2,39
81100e28:	100d883a 	mov	r6,r2
81100e2c:	200b883a 	mov	r5,r4
81100e30:	1809883a 	mov	r4,r3
81100e34:	1112b340 	call	81112b34 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e38:	d0a04e17 	ldw	r2,-32456(gp)
81100e3c:	01604534 	movhi	r5,33044
81100e40:	29439104 	addi	r5,r5,3652
81100e44:	1009883a 	mov	r4,r2
81100e48:	1111b340 	call	81111b34 <fprintf>
81100e4c:	00015c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100e50:	e0bfbc17 	ldw	r2,-272(fp)
81100e54:	10800798 	cmpnei	r2,r2,30
81100e58:	1000101e 	bne	r2,zero,81100e9c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e5c:	00e04534 	movhi	r3,33044
81100e60:	18c39104 	addi	r3,r3,3652
81100e64:	00a04534 	movhi	r2,33044
81100e68:	10afb304 	addi	r2,r2,-16692
81100e6c:	1009883a 	mov	r4,r2
81100e70:	00800b04 	movi	r2,44
81100e74:	100d883a 	mov	r6,r2
81100e78:	200b883a 	mov	r5,r4
81100e7c:	1809883a 	mov	r4,r3
81100e80:	1112b340 	call	81112b34 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e84:	d0a04e17 	ldw	r2,-32456(gp)
81100e88:	01604534 	movhi	r5,33044
81100e8c:	29439104 	addi	r5,r5,3652
81100e90:	1009883a 	mov	r4,r2
81100e94:	1111b340 	call	81111b34 <fprintf>
81100e98:	00014906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100e9c:	e0bfbc17 	ldw	r2,-272(fp)
81100ea0:	108007d8 	cmpnei	r2,r2,31
81100ea4:	1000101e 	bne	r2,zero,81100ee8 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ea8:	00e04534 	movhi	r3,33044
81100eac:	18c39104 	addi	r3,r3,3652
81100eb0:	00a04534 	movhi	r2,33044
81100eb4:	10afbe04 	addi	r2,r2,-16648
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	008010c4 	movi	r2,67
81100ec0:	100d883a 	mov	r6,r2
81100ec4:	200b883a 	mov	r5,r4
81100ec8:	1809883a 	mov	r4,r3
81100ecc:	1112b340 	call	81112b34 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ed0:	d0a04e17 	ldw	r2,-32456(gp)
81100ed4:	01604534 	movhi	r5,33044
81100ed8:	29439104 	addi	r5,r5,3652
81100edc:	1009883a 	mov	r4,r2
81100ee0:	1111b340 	call	81111b34 <fprintf>
81100ee4:	00013606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100ee8:	e0bfbc17 	ldw	r2,-272(fp)
81100eec:	10800918 	cmpnei	r2,r2,36
81100ef0:	1000101e 	bne	r2,zero,81100f34 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ef4:	00e04534 	movhi	r3,33044
81100ef8:	18c39104 	addi	r3,r3,3652
81100efc:	00a04534 	movhi	r2,33044
81100f00:	10afcf04 	addi	r2,r2,-16580
81100f04:	1009883a 	mov	r4,r2
81100f08:	00800a84 	movi	r2,42
81100f0c:	100d883a 	mov	r6,r2
81100f10:	200b883a 	mov	r5,r4
81100f14:	1809883a 	mov	r4,r3
81100f18:	1112b340 	call	81112b34 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f1c:	d0a04e17 	ldw	r2,-32456(gp)
81100f20:	01604534 	movhi	r5,33044
81100f24:	29439104 	addi	r5,r5,3652
81100f28:	1009883a 	mov	r4,r2
81100f2c:	1111b340 	call	81111b34 <fprintf>
81100f30:	00012306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100f34:	e0bfbc17 	ldw	r2,-272(fp)
81100f38:	10800958 	cmpnei	r2,r2,37
81100f3c:	1000101e 	bne	r2,zero,81100f80 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f40:	00e04534 	movhi	r3,33044
81100f44:	18c39104 	addi	r3,r3,3652
81100f48:	00a04534 	movhi	r2,33044
81100f4c:	10afda04 	addi	r2,r2,-16536
81100f50:	1009883a 	mov	r4,r2
81100f54:	00800cc4 	movi	r2,51
81100f58:	100d883a 	mov	r6,r2
81100f5c:	200b883a 	mov	r5,r4
81100f60:	1809883a 	mov	r4,r3
81100f64:	1112b340 	call	81112b34 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f68:	d0a04e17 	ldw	r2,-32456(gp)
81100f6c:	01604534 	movhi	r5,33044
81100f70:	29439104 	addi	r5,r5,3652
81100f74:	1009883a 	mov	r4,r2
81100f78:	1111b340 	call	81111b34 <fprintf>
81100f7c:	00011006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100f80:	e0bfbc17 	ldw	r2,-272(fp)
81100f84:	10800998 	cmpnei	r2,r2,38
81100f88:	1000101e 	bne	r2,zero,81100fcc <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f8c:	00e04534 	movhi	r3,33044
81100f90:	18c39104 	addi	r3,r3,3652
81100f94:	00a04534 	movhi	r2,33044
81100f98:	10afe704 	addi	r2,r2,-16484
81100f9c:	1009883a 	mov	r4,r2
81100fa0:	00800dc4 	movi	r2,55
81100fa4:	100d883a 	mov	r6,r2
81100fa8:	200b883a 	mov	r5,r4
81100fac:	1809883a 	mov	r4,r3
81100fb0:	1112b340 	call	81112b34 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fb4:	d0a04e17 	ldw	r2,-32456(gp)
81100fb8:	01604534 	movhi	r5,33044
81100fbc:	29439104 	addi	r5,r5,3652
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	1111b340 	call	81111b34 <fprintf>
81100fc8:	0000fd06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
81100fcc:	e0bfbc17 	ldw	r2,-272(fp)
81100fd0:	10800a58 	cmpnei	r2,r2,41
81100fd4:	1000101e 	bne	r2,zero,81101018 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fd8:	00e04534 	movhi	r3,33044
81100fdc:	18c39104 	addi	r3,r3,3652
81100fe0:	00a04534 	movhi	r2,33044
81100fe4:	10aff504 	addi	r2,r2,-16428
81100fe8:	1009883a 	mov	r4,r2
81100fec:	00800c84 	movi	r2,50
81100ff0:	100d883a 	mov	r6,r2
81100ff4:	200b883a 	mov	r5,r4
81100ff8:	1809883a 	mov	r4,r3
81100ffc:	1112b340 	call	81112b34 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101000:	d0a04e17 	ldw	r2,-32456(gp)
81101004:	01604534 	movhi	r5,33044
81101008:	29439104 	addi	r5,r5,3652
8110100c:	1009883a 	mov	r4,r2
81101010:	1111b340 	call	81111b34 <fprintf>
81101014:	0000ea06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101018:	e0bfbc17 	ldw	r2,-272(fp)
8110101c:	10800a98 	cmpnei	r2,r2,42
81101020:	1000101e 	bne	r2,zero,81101064 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101024:	00e04534 	movhi	r3,33044
81101028:	18c39104 	addi	r3,r3,3652
8110102c:	00a04534 	movhi	r2,33044
81101030:	10b00204 	addi	r2,r2,-16376
81101034:	1009883a 	mov	r4,r2
81101038:	00800cc4 	movi	r2,51
8110103c:	100d883a 	mov	r6,r2
81101040:	200b883a 	mov	r5,r4
81101044:	1809883a 	mov	r4,r3
81101048:	1112b340 	call	81112b34 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
8110104c:	d0a04e17 	ldw	r2,-32456(gp)
81101050:	01604534 	movhi	r5,33044
81101054:	29439104 	addi	r5,r5,3652
81101058:	1009883a 	mov	r4,r2
8110105c:	1111b340 	call	81111b34 <fprintf>
81101060:	0000d706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
81101064:	e0bfbc17 	ldw	r2,-272(fp)
81101068:	10800f98 	cmpnei	r2,r2,62
8110106c:	1000101e 	bne	r2,zero,811010b0 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101070:	00e04534 	movhi	r3,33044
81101074:	18c39104 	addi	r3,r3,3652
81101078:	00a04534 	movhi	r2,33044
8110107c:	10b00f04 	addi	r2,r2,-16324
81101080:	1009883a 	mov	r4,r2
81101084:	00800404 	movi	r2,16
81101088:	100d883a 	mov	r6,r2
8110108c:	200b883a 	mov	r5,r4
81101090:	1809883a 	mov	r4,r3
81101094:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81101098:	d0a04e17 	ldw	r2,-32456(gp)
8110109c:	01604534 	movhi	r5,33044
811010a0:	29439104 	addi	r5,r5,3652
811010a4:	1009883a 	mov	r4,r2
811010a8:	1111b340 	call	81111b34 <fprintf>
811010ac:	0000c406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
811010b0:	e0bfbc17 	ldw	r2,-272(fp)
811010b4:	10800fd8 	cmpnei	r2,r2,63
811010b8:	10001f1e 	bne	r2,zero,81101138 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
811010bc:	00a04534 	movhi	r2,33044
811010c0:	10839104 	addi	r2,r2,3652
811010c4:	00c00a04 	movi	r3,40
811010c8:	10c00005 	stb	r3,0(r2)
811010cc:	00c010c4 	movi	r3,67
811010d0:	10c00045 	stb	r3,1(r2)
811010d4:	00c01a04 	movi	r3,104
811010d8:	10c00085 	stb	r3,2(r2)
811010dc:	00c01944 	movi	r3,101
811010e0:	10c000c5 	stb	r3,3(r2)
811010e4:	00c018c4 	movi	r3,99
811010e8:	10c00105 	stb	r3,4(r2)
811010ec:	00c01ac4 	movi	r3,107
811010f0:	10c00145 	stb	r3,5(r2)
811010f4:	00c01cc4 	movi	r3,115
811010f8:	10c00185 	stb	r3,6(r2)
811010fc:	00c01d44 	movi	r3,117
81101100:	10c001c5 	stb	r3,7(r2)
81101104:	00c01b44 	movi	r3,109
81101108:	10c00205 	stb	r3,8(r2)
8110110c:	00c00a44 	movi	r3,41
81101110:	10c00245 	stb	r3,9(r2)
81101114:	00c00284 	movi	r3,10
81101118:	10c00285 	stb	r3,10(r2)
8110111c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101120:	d0a04e17 	ldw	r2,-32456(gp)
81101124:	01604534 	movhi	r5,33044
81101128:	29439104 	addi	r5,r5,3652
8110112c:	1009883a 	mov	r4,r2
81101130:	1111b340 	call	81111b34 <fprintf>
81101134:	0000a206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
81101138:	e0bfbc17 	ldw	r2,-272(fp)
8110113c:	10801018 	cmpnei	r2,r2,64
81101140:	1000101e 	bne	r2,zero,81101184 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101144:	00e04534 	movhi	r3,33044
81101148:	18c39104 	addi	r3,r3,3652
8110114c:	00a04534 	movhi	r2,33044
81101150:	10b01304 	addi	r2,r2,-16308
81101154:	1009883a 	mov	r4,r2
81101158:	00800804 	movi	r2,32
8110115c:	100d883a 	mov	r6,r2
81101160:	200b883a 	mov	r5,r4
81101164:	1809883a 	mov	r4,r3
81101168:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
8110116c:	d0a04e17 	ldw	r2,-32456(gp)
81101170:	01604534 	movhi	r5,33044
81101174:	29439104 	addi	r5,r5,3652
81101178:	1009883a 	mov	r4,r2
8110117c:	1111b340 	call	81111b34 <fprintf>
81101180:	00008f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
81101184:	e0bfbc17 	ldw	r2,-272(fp)
81101188:	10801218 	cmpnei	r2,r2,72
8110118c:	1000101e 	bne	r2,zero,811011d0 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101190:	00e04534 	movhi	r3,33044
81101194:	18c39104 	addi	r3,r3,3652
81101198:	00a04534 	movhi	r2,33044
8110119c:	10b01b04 	addi	r2,r2,-16276
811011a0:	1009883a 	mov	r4,r2
811011a4:	00800dc4 	movi	r2,55
811011a8:	100d883a 	mov	r6,r2
811011ac:	200b883a 	mov	r5,r4
811011b0:	1809883a 	mov	r4,r3
811011b4:	1112b340 	call	81112b34 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
811011b8:	d0a04e17 	ldw	r2,-32456(gp)
811011bc:	01604534 	movhi	r5,33044
811011c0:	29439104 	addi	r5,r5,3652
811011c4:	1009883a 	mov	r4,r2
811011c8:	1111b340 	call	81111b34 <fprintf>
811011cc:	00007c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
811011d0:	e0bfbc17 	ldw	r2,-272(fp)
811011d4:	10801258 	cmpnei	r2,r2,73
811011d8:	1000101e 	bne	r2,zero,8110121c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011dc:	00e04534 	movhi	r3,33044
811011e0:	18c39104 	addi	r3,r3,3652
811011e4:	00a04534 	movhi	r2,33044
811011e8:	10b02904 	addi	r2,r2,-16220
811011ec:	1009883a 	mov	r4,r2
811011f0:	00800784 	movi	r2,30
811011f4:	100d883a 	mov	r6,r2
811011f8:	200b883a 	mov	r5,r4
811011fc:	1809883a 	mov	r4,r3
81101200:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81101204:	d0a04e17 	ldw	r2,-32456(gp)
81101208:	01604534 	movhi	r5,33044
8110120c:	29439104 	addi	r5,r5,3652
81101210:	1009883a 	mov	r4,r2
81101214:	1111b340 	call	81111b34 <fprintf>
81101218:	00006906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110121c:	e0bfbc17 	ldw	r2,-272(fp)
81101220:	108016d8 	cmpnei	r2,r2,91
81101224:	1000101e 	bne	r2,zero,81101268 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101228:	00e04534 	movhi	r3,33044
8110122c:	18c39104 	addi	r3,r3,3652
81101230:	00a04534 	movhi	r2,33044
81101234:	10b03104 	addi	r2,r2,-16188
81101238:	1009883a 	mov	r4,r2
8110123c:	00800804 	movi	r2,32
81101240:	100d883a 	mov	r6,r2
81101244:	200b883a 	mov	r5,r4
81101248:	1809883a 	mov	r4,r3
8110124c:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81101250:	d0a04e17 	ldw	r2,-32456(gp)
81101254:	01604534 	movhi	r5,33044
81101258:	29439104 	addi	r5,r5,3652
8110125c:	1009883a 	mov	r4,r2
81101260:	1111b340 	call	81111b34 <fprintf>
81101264:	00005606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
81101268:	e0bfbc17 	ldw	r2,-272(fp)
8110126c:	10801758 	cmpnei	r2,r2,93
81101270:	1000101e 	bne	r2,zero,811012b4 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101274:	00e04534 	movhi	r3,33044
81101278:	18c39104 	addi	r3,r3,3652
8110127c:	00a04534 	movhi	r2,33044
81101280:	10b03904 	addi	r2,r2,-16156
81101284:	1009883a 	mov	r4,r2
81101288:	008009c4 	movi	r2,39
8110128c:	100d883a 	mov	r6,r2
81101290:	200b883a 	mov	r5,r4
81101294:	1809883a 	mov	r4,r3
81101298:	1112b340 	call	81112b34 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110129c:	d0a04e17 	ldw	r2,-32456(gp)
811012a0:	01604534 	movhi	r5,33044
811012a4:	29439104 	addi	r5,r5,3652
811012a8:	1009883a 	mov	r4,r2
811012ac:	1111b340 	call	81111b34 <fprintf>
811012b0:	00004306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
811012b4:	e0bfbc17 	ldw	r2,-272(fp)
811012b8:	10801798 	cmpnei	r2,r2,94
811012bc:	1000101e 	bne	r2,zero,81101300 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
811012c0:	00e04534 	movhi	r3,33044
811012c4:	18c39104 	addi	r3,r3,3652
811012c8:	00a04534 	movhi	r2,33044
811012cc:	10b04304 	addi	r2,r2,-16116
811012d0:	1009883a 	mov	r4,r2
811012d4:	008006c4 	movi	r2,27
811012d8:	100d883a 	mov	r6,r2
811012dc:	200b883a 	mov	r5,r4
811012e0:	1809883a 	mov	r4,r3
811012e4:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
811012e8:	d0a04e17 	ldw	r2,-32456(gp)
811012ec:	01604534 	movhi	r5,33044
811012f0:	29439104 	addi	r5,r5,3652
811012f4:	1009883a 	mov	r4,r2
811012f8:	1111b340 	call	81111b34 <fprintf>
811012fc:	00003006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101300:	e0bfbc17 	ldw	r2,-272(fp)
81101304:	108017d8 	cmpnei	r2,r2,95
81101308:	1000101e 	bne	r2,zero,8110134c <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110130c:	00e04534 	movhi	r3,33044
81101310:	18c39104 	addi	r3,r3,3652
81101314:	00a04534 	movhi	r2,33044
81101318:	10b04a04 	addi	r2,r2,-16088
8110131c:	1009883a 	mov	r4,r2
81101320:	00800a04 	movi	r2,40
81101324:	100d883a 	mov	r6,r2
81101328:	200b883a 	mov	r5,r4
8110132c:	1809883a 	mov	r4,r3
81101330:	1112b340 	call	81112b34 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101334:	d0a04e17 	ldw	r2,-32456(gp)
81101338:	01604534 	movhi	r5,33044
8110133c:	29439104 	addi	r5,r5,3652
81101340:	1009883a 	mov	r4,r2
81101344:	1111b340 	call	81111b34 <fprintf>
81101348:	00001d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
8110134c:	e0bfbc17 	ldw	r2,-272(fp)
81101350:	108018d8 	cmpnei	r2,r2,99
81101354:	1000101e 	bne	r2,zero,81101398 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101358:	00e04534 	movhi	r3,33044
8110135c:	18c39104 	addi	r3,r3,3652
81101360:	00a04534 	movhi	r2,33044
81101364:	10b05404 	addi	r2,r2,-16048
81101368:	1009883a 	mov	r4,r2
8110136c:	00800984 	movi	r2,38
81101370:	100d883a 	mov	r6,r2
81101374:	200b883a 	mov	r5,r4
81101378:	1809883a 	mov	r4,r3
8110137c:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
81101380:	d0a04e17 	ldw	r2,-32456(gp)
81101384:	01604534 	movhi	r5,33044
81101388:	29439104 	addi	r5,r5,3652
8110138c:	1009883a 	mov	r4,r2
81101390:	1111b340 	call	81111b34 <fprintf>
81101394:	00000a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101398:	00a04534 	movhi	r2,33044
8110139c:	10839104 	addi	r2,r2,3652
811013a0:	00c00284 	movi	r3,10
811013a4:	10c00005 	stb	r3,0(r2)
811013a8:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
811013ac:	d0a04e17 	ldw	r2,-32456(gp)
811013b0:	01604534 	movhi	r5,33044
811013b4:	29439104 	addi	r5,r5,3652
811013b8:	1009883a 	mov	r4,r2
811013bc:	1111b340 	call	81111b34 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811013c0:	e0bfbc17 	ldw	r2,-272(fp)
811013c4:	10800044 	addi	r2,r2,1
811013c8:	e0bfbc15 	stw	r2,-272(fp)
811013cc:	e0bfbc17 	ldw	r2,-272(fp)
811013d0:	10804008 	cmpgei	r2,r2,256
811013d4:	1000121e 	bne	r2,zero,81101420 <bDdr2EepromDump+0xc74>
811013d8:	e0bfbe17 	ldw	r2,-264(fp)
811013dc:	103d451e 	bne	r2,zero,811008f4 <__reset+0xfb0e08f4>
811013e0:	00000f06 	br	81101420 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013e4:	00e04534 	movhi	r3,33044
811013e8:	18c39104 	addi	r3,r3,3652
811013ec:	00a04534 	movhi	r2,33044
811013f0:	10b05e04 	addi	r2,r2,-16008
811013f4:	1009883a 	mov	r4,r2
811013f8:	008005c4 	movi	r2,23
811013fc:	100d883a 	mov	r6,r2
81101400:	200b883a 	mov	r5,r4
81101404:	1809883a 	mov	r4,r3
81101408:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
8110140c:	d0a04e17 	ldw	r2,-32456(gp)
81101410:	01604534 	movhi	r5,33044
81101414:	29439104 	addi	r5,r5,3652
81101418:	1009883a 	mov	r4,r2
8110141c:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101420:	00a04534 	movhi	r2,33044
81101424:	10839104 	addi	r2,r2,3652
81101428:	00c00284 	movi	r3,10
8110142c:	10c00005 	stb	r3,0(r2)
81101430:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101434:	d0a04e17 	ldw	r2,-32456(gp)
81101438:	01604534 	movhi	r5,33044
8110143c:	29439104 	addi	r5,r5,3652
81101440:	1009883a 	mov	r4,r2
81101444:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
81101448:	e0bfbe17 	ldw	r2,-264(fp)
}
8110144c:	e037883a 	mov	sp,fp
81101450:	dfc00117 	ldw	ra,4(sp)
81101454:	df000017 	ldw	fp,0(sp)
81101458:	dec00204 	addi	sp,sp,8
8110145c:	f800283a 	ret

81101460 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101460:	defffb04 	addi	sp,sp,-20
81101464:	de00012e 	bgeu	sp,et,8110146c <bDdr2SwitchMemory+0xc>
81101468:	003b68fa 	trap	3
8110146c:	dfc00415 	stw	ra,16(sp)
81101470:	df000315 	stw	fp,12(sp)
81101474:	df000304 	addi	fp,sp,12
81101478:	2005883a 	mov	r2,r4
8110147c:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101480:	00a04834 	movhi	r2,33056
81101484:	108c2204 	addi	r2,r2,12424
81101488:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
8110148c:	00800044 	movi	r2,1
81101490:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101494:	e0bfff03 	ldbu	r2,-4(fp)
81101498:	10c00060 	cmpeqi	r3,r2,1
8110149c:	1800031e 	bne	r3,zero,811014ac <bDdr2SwitchMemory+0x4c>
811014a0:	108000a0 	cmpeqi	r2,r2,2
811014a4:	1000041e 	bne	r2,zero,811014b8 <bDdr2SwitchMemory+0x58>
811014a8:	00000706 	br	811014c8 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811014ac:	e0bffe17 	ldw	r2,-8(fp)
811014b0:	10000015 	stw	zero,0(r2)
		break;
811014b4:	00001406 	br	81101508 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811014b8:	e0bffe17 	ldw	r2,-8(fp)
811014bc:	00e00034 	movhi	r3,32768
811014c0:	10c00015 	stw	r3,0(r2)
		break;
811014c4:	00001006 	br	81101508 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
811014c8:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811014cc:	00e04534 	movhi	r3,33044
811014d0:	18c39104 	addi	r3,r3,3652
811014d4:	00a04534 	movhi	r2,33044
811014d8:	10b06404 	addi	r2,r2,-15984
811014dc:	1009883a 	mov	r4,r2
811014e0:	00800f04 	movi	r2,60
811014e4:	100d883a 	mov	r6,r2
811014e8:	200b883a 	mov	r5,r4
811014ec:	1809883a 	mov	r4,r3
811014f0:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014f4:	d0a04e17 	ldw	r2,-32456(gp)
811014f8:	01604534 	movhi	r5,33044
811014fc:	29439104 	addi	r5,r5,3652
81101500:	1009883a 	mov	r4,r2
81101504:	1111b340 	call	81111b34 <fprintf>
		;
#endif
	}

	return bSuccess;
81101508:	e0bffd17 	ldw	r2,-12(fp)
}
8110150c:	e037883a 	mov	sp,fp
81101510:	dfc00117 	ldw	ra,4(sp)
81101514:	df000017 	ldw	fp,0(sp)
81101518:	dec00204 	addi	sp,sp,8
8110151c:	f800283a 	ret

81101520 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101520:	deffe204 	addi	sp,sp,-120
81101524:	de00012e 	bgeu	sp,et,8110152c <bDdr2MemoryWriteTest+0xc>
81101528:	003b68fa 	trap	3
8110152c:	dfc01d15 	stw	ra,116(sp)
81101530:	df001c15 	stw	fp,112(sp)
81101534:	dc401b15 	stw	r17,108(sp)
81101538:	dc001a15 	stw	r16,104(sp)
8110153c:	df001c04 	addi	fp,sp,112
81101540:	2005883a 	mov	r2,r4
81101544:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101548:	00e04534 	movhi	r3,33044
8110154c:	18c39104 	addi	r3,r3,3652
81101550:	00a04534 	movhi	r2,33044
81101554:	10b07304 	addi	r2,r2,-15924
81101558:	1009883a 	mov	r4,r2
8110155c:	00800a04 	movi	r2,40
81101560:	100d883a 	mov	r6,r2
81101564:	200b883a 	mov	r5,r4
81101568:	1809883a 	mov	r4,r3
8110156c:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81101570:	d0a04e17 	ldw	r2,-32456(gp)
81101574:	01604534 	movhi	r5,33044
81101578:	29439104 	addi	r5,r5,3652
8110157c:	1009883a 	mov	r4,r2
81101580:	1111b340 	call	81111b34 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101584:	00800044 	movi	r2,1
81101588:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
8110158c:	e0bffd03 	ldbu	r2,-12(fp)
81101590:	10c00060 	cmpeqi	r3,r2,1
81101594:	1800031e 	bne	r3,zero,811015a4 <bDdr2MemoryWriteTest+0x84>
81101598:	108000a0 	cmpeqi	r2,r2,2
8110159c:	1000081e 	bne	r2,zero,811015c0 <bDdr2MemoryWriteTest+0xa0>
811015a0:	00000e06 	br	811015dc <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	1009883a 	mov	r4,r2
811015ac:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015b0:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015b4:	00a00034 	movhi	r2,32768
811015b8:	e0bfe615 	stw	r2,-104(fp)
		break;
811015bc:	00001906 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015c0:	e0bffd03 	ldbu	r2,-12(fp)
811015c4:	1009883a 	mov	r4,r2
811015c8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015cc:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015d0:	00a00034 	movhi	r2,32768
811015d4:	e0bfe615 	stw	r2,-104(fp)
		break;
811015d8:	00001206 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
811015dc:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015e0:	00e04534 	movhi	r3,33044
811015e4:	18c39104 	addi	r3,r3,3652
811015e8:	00a04534 	movhi	r2,33044
811015ec:	10ae8404 	addi	r2,r2,-17904
811015f0:	1009883a 	mov	r4,r2
811015f4:	00800bc4 	movi	r2,47
811015f8:	100d883a 	mov	r6,r2
811015fc:	200b883a 	mov	r5,r4
81101600:	1809883a 	mov	r4,r3
81101604:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101608:	d0a04e17 	ldw	r2,-32456(gp)
8110160c:	01604534 	movhi	r5,33044
81101610:	29439104 	addi	r5,r5,3652
81101614:	1009883a 	mov	r4,r2
81101618:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
8110161c:	e0bfed17 	ldw	r2,-76(fp)
81101620:	00011806 	br	81101a84 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101624:	e0bfe617 	ldw	r2,-104(fp)
81101628:	1004d53a 	srli	r2,r2,20
8110162c:	100d883a 	mov	r6,r2
81101630:	01604534 	movhi	r5,33044
81101634:	29707d04 	addi	r5,r5,-15884
81101638:	01204534 	movhi	r4,33044
8110163c:	21039104 	addi	r4,r4,3652
81101640:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81101644:	d0a04e17 	ldw	r2,-32456(gp)
81101648:	01604534 	movhi	r5,33044
8110164c:	29439104 	addi	r5,r5,3652
81101650:	1009883a 	mov	r4,r2
81101654:	1111b340 	call	81111b34 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81101658:	00800104 	movi	r2,4
8110165c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101660:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101664:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81101668:	e03fe715 	stw	zero,-100(fp)
8110166c:	00001506 	br	811016c4 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101670:	e0ffe617 	ldw	r3,-104(fp)
81101674:	00b33374 	movhi	r2,52429
81101678:	10b33344 	addi	r2,r2,-13107
8110167c:	1888383a 	mulxuu	r4,r3,r2
81101680:	1885383a 	mul	r2,r3,r2
81101684:	1021883a 	mov	r16,r2
81101688:	2023883a 	mov	r17,r4
8110168c:	8804d0fa 	srli	r2,r17,3
81101690:	e0ffe717 	ldw	r3,-100(fp)
81101694:	18c00044 	addi	r3,r3,1
81101698:	10c7383a 	mul	r3,r2,r3
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1085883a 	add	r2,r2,r2
811016a4:	1085883a 	add	r2,r2,r2
811016a8:	e13fe504 	addi	r4,fp,-108
811016ac:	2085883a 	add	r2,r4,r2
811016b0:	10800e04 	addi	r2,r2,56
811016b4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811016b8:	e0bfe717 	ldw	r2,-100(fp)
811016bc:	10800044 	addi	r2,r2,1
811016c0:	e0bfe715 	stw	r2,-100(fp)
811016c4:	e0bfe717 	ldw	r2,-100(fp)
811016c8:	10800290 	cmplti	r2,r2,10
811016cc:	103fe81e 	bne	r2,zero,81101670 <__reset+0xfb0e1670>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016d0:	d0a06c17 	ldw	r2,-32336(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
811016d4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
811016d8:	00804004 	movi	r2,256
811016dc:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016e0:	e03fe715 	stw	zero,-100(fp)
811016e4:	00001e06 	br	81101760 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
811016e8:	e0bfe717 	ldw	r2,-100(fp)
811016ec:	1000091e 	bne	r2,zero,81101714 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
811016f0:	00a04534 	movhi	r2,33044
811016f4:	1083d104 	addi	r2,r2,3908
811016f8:	e0ffe717 	ldw	r3,-100(fp)
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	18c7883a 	add	r3,r3,r3
81101704:	10c5883a 	add	r2,r2,r3
81101708:	e0fff017 	ldw	r3,-64(fp)
8110170c:	10c00015 	stw	r3,0(r2)
81101710:	00001006 	br	81101754 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101714:	e0bfe717 	ldw	r2,-100(fp)
81101718:	10ffffc4 	addi	r3,r2,-1
8110171c:	00a04534 	movhi	r2,33044
81101720:	1083d104 	addi	r2,r2,3908
81101724:	18c7883a 	add	r3,r3,r3
81101728:	18c7883a 	add	r3,r3,r3
8110172c:	10c5883a 	add	r2,r2,r3
81101730:	10800017 	ldw	r2,0(r2)
81101734:	11000364 	muli	r4,r2,13
81101738:	00a04534 	movhi	r2,33044
8110173c:	1083d104 	addi	r2,r2,3908
81101740:	e0ffe717 	ldw	r3,-100(fp)
81101744:	18c7883a 	add	r3,r3,r3
81101748:	18c7883a 	add	r3,r3,r3
8110174c:	10c5883a 	add	r2,r2,r3
81101750:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101754:	e0bfe717 	ldw	r2,-100(fp)
81101758:	10800044 	addi	r2,r2,1
8110175c:	e0bfe715 	stw	r2,-100(fp)
81101760:	e0ffe717 	ldw	r3,-100(fp)
81101764:	e0bfea17 	ldw	r2,-88(fp)
81101768:	18bfdf16 	blt	r3,r2,811016e8 <__reset+0xfb0e16e8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
8110176c:	e0bfea17 	ldw	r2,-88(fp)
81101770:	10ffffc4 	addi	r3,r2,-1
81101774:	00a04534 	movhi	r2,33044
81101778:	1083d104 	addi	r2,r2,3908
8110177c:	18c7883a 	add	r3,r3,r3
81101780:	18c7883a 	add	r3,r3,r3
81101784:	10c7883a 	add	r3,r2,r3
81101788:	00aaaaf4 	movhi	r2,43691
8110178c:	10aaaa84 	addi	r2,r2,-21846
81101790:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101794:	e0bfea17 	ldw	r2,-88(fp)
81101798:	10ffff84 	addi	r3,r2,-2
8110179c:	00a04534 	movhi	r2,33044
811017a0:	1083d104 	addi	r2,r2,3908
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	18c7883a 	add	r3,r3,r3
811017ac:	10c7883a 	add	r3,r2,r3
811017b0:	00955574 	movhi	r2,21845
811017b4:	10955544 	addi	r2,r2,21845
811017b8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
811017bc:	e0bfea17 	ldw	r2,-88(fp)
811017c0:	10ffff44 	addi	r3,r2,-3
811017c4:	00a04534 	movhi	r2,33044
811017c8:	1083d104 	addi	r2,r2,3908
811017cc:	18c7883a 	add	r3,r3,r3
811017d0:	18c7883a 	add	r3,r3,r3
811017d4:	10c5883a 	add	r2,r2,r3
811017d8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffff04 	addi	r3,r2,-4
811017e4:	00a04534 	movhi	r2,33044
811017e8:	1083d104 	addi	r2,r2,3908
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c5883a 	add	r2,r2,r3
811017f8:	00ffffc4 	movi	r3,-1
811017fc:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101800:	00e04534 	movhi	r3,33044
81101804:	18c39104 	addi	r3,r3,3652
81101808:	00a04534 	movhi	r2,33044
8110180c:	10b08304 	addi	r2,r2,-15860
81101810:	1009883a 	mov	r4,r2
81101814:	00800444 	movi	r2,17
81101818:	100d883a 	mov	r6,r2
8110181c:	200b883a 	mov	r5,r4
81101820:	1809883a 	mov	r4,r3
81101824:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81101828:	d0a04e17 	ldw	r2,-32456(gp)
8110182c:	01604534 	movhi	r5,33044
81101830:	29439104 	addi	r5,r5,3652
81101834:	1009883a 	mov	r4,r2
81101838:	1111b340 	call	81111b34 <fprintf>
8110183c:	d0a06c17 	ldw	r2,-32336(gp)
#endif
	iTimeStart = alt_nticks();
81101840:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101844:	e0bfe517 	ldw	r2,-108(fp)
81101848:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
8110184c:	00810004 	movi	r2,1024
81101850:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101864:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
81101868:	00003a06 	br	81101954 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
8110186c:	e0bfeb17 	ldw	r2,-84(fp)
81101870:	e0ffe617 	ldw	r3,-104(fp)
81101874:	1885c83a 	sub	r2,r3,r2
81101878:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110187c:	e0bfe817 	ldw	r2,-96(fp)
81101880:	e0fff217 	ldw	r3,-56(fp)
81101884:	1880060e 	bge	r3,r2,811018a0 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
81101888:	e0bff217 	ldw	r2,-56(fp)
8110188c:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101890:	e0ffe817 	ldw	r3,-96(fp)
81101894:	e0bfee17 	ldw	r2,-72(fp)
81101898:	1885283a 	div	r2,r3,r2
8110189c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
811018a0:	e0bfe817 	ldw	r2,-96(fp)
811018a4:	100d883a 	mov	r6,r2
811018a8:	01604534 	movhi	r5,33044
811018ac:	2943d104 	addi	r5,r5,3908
811018b0:	e13fe917 	ldw	r4,-92(fp)
811018b4:	1112b340 	call	81112b34 <memcpy>
		pxDes += iNItemNum;
811018b8:	e0bfea17 	ldw	r2,-88(fp)
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	1085883a 	add	r2,r2,r2
811018c4:	1007883a 	mov	r3,r2
811018c8:	e0bfe917 	ldw	r2,-92(fp)
811018cc:	10c5883a 	add	r2,r2,r3
811018d0:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
811018d4:	e0ffeb17 	ldw	r3,-84(fp)
811018d8:	e0bfe817 	ldw	r2,-96(fp)
811018dc:	1885883a 	add	r2,r3,r2
811018e0:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	10800288 	cmpgei	r2,r2,10
811018ec:	1000191e 	bne	r2,zero,81101954 <bDdr2MemoryWriteTest+0x434>
811018f0:	e0bfec17 	ldw	r2,-80(fp)
811018f4:	1085883a 	add	r2,r2,r2
811018f8:	1085883a 	add	r2,r2,r2
811018fc:	e0ffe504 	addi	r3,fp,-108
81101900:	1885883a 	add	r2,r3,r2
81101904:	10800e04 	addi	r2,r2,56
81101908:	10800017 	ldw	r2,0(r2)
8110190c:	e0ffeb17 	ldw	r3,-84(fp)
81101910:	18801036 	bltu	r3,r2,81101954 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101914:	e0bfec17 	ldw	r2,-80(fp)
81101918:	10800044 	addi	r2,r2,1
8110191c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101920:	e0bfec17 	ldw	r2,-80(fp)
81101924:	108002a4 	muli	r2,r2,10
81101928:	100d883a 	mov	r6,r2
8110192c:	01604534 	movhi	r5,33044
81101930:	29708804 	addi	r5,r5,-15840
81101934:	01204534 	movhi	r4,33044
81101938:	21039104 	addi	r4,r4,3652
8110193c:	111329c0 	call	8111329c <sprintf>
			debug(fp, cDebugBuffer);
81101940:	d0a04e17 	ldw	r2,-32456(gp)
81101944:	01604534 	movhi	r5,33044
81101948:	29439104 	addi	r5,r5,3652
8110194c:	1009883a 	mov	r4,r2
81101950:	1111b340 	call	81111b34 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101954:	e0ffeb17 	ldw	r3,-84(fp)
81101958:	e0bfe617 	ldw	r2,-104(fp)
8110195c:	18bfc336 	bltu	r3,r2,8110186c <__reset+0xfb0e186c>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101960:	11273780 	call	81127378 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101964:	00a04534 	movhi	r2,33044
81101968:	10839104 	addi	r2,r2,3652
8110196c:	00c00284 	movi	r3,10
81101970:	10c00005 	stb	r3,0(r2)
81101974:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101978:	d0a04e17 	ldw	r2,-32456(gp)
8110197c:	01604534 	movhi	r5,33044
81101980:	29439104 	addi	r5,r5,3652
81101984:	1009883a 	mov	r4,r2
81101988:	1111b340 	call	81111b34 <fprintf>
8110198c:	d0e06c17 	ldw	r3,-32336(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101990:	e0bff117 	ldw	r2,-60(fp)
81101994:	1885c83a 	sub	r2,r3,r2
81101998:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
8110199c:	e0bfed17 	ldw	r2,-76(fp)
811019a0:	10001e26 	beq	r2,zero,81101a1c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811019a4:	e13fef17 	ldw	r4,-68(fp)
811019a8:	1110d700 	call	81110d70 <__floatsisf>
811019ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811019b0:	d0a06b17 	ldw	r2,-32340(gp)
811019b4:	1009883a 	mov	r4,r2
811019b8:	1110e9c0 	call	81110e9c <__floatunsisf>
811019bc:	1007883a 	mov	r3,r2
811019c0:	180b883a 	mov	r5,r3
811019c4:	8009883a 	mov	r4,r16
811019c8:	11105240 	call	81110524 <__divsf3>
811019cc:	1007883a 	mov	r3,r2
811019d0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811019d4:	1009883a 	mov	r4,r2
811019d8:	11116b40 	call	811116b4 <__extendsfdf2>
811019dc:	1009883a 	mov	r4,r2
811019e0:	180b883a 	mov	r5,r3
811019e4:	d9400015 	stw	r5,0(sp)
811019e8:	200f883a 	mov	r7,r4
811019ec:	e1bfe617 	ldw	r6,-104(fp)
811019f0:	01604534 	movhi	r5,33044
811019f4:	29708a04 	addi	r5,r5,-15832
811019f8:	01204534 	movhi	r4,33044
811019fc:	21039104 	addi	r4,r4,3652
81101a00:	111329c0 	call	8111329c <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a04:	d0a04e17 	ldw	r2,-32456(gp)
81101a08:	01604534 	movhi	r5,33044
81101a0c:	29439104 	addi	r5,r5,3652
81101a10:	1009883a 	mov	r4,r2
81101a14:	1111b340 	call	81111b34 <fprintf>
81101a18:	00000f06 	br	81101a58 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a1c:	00e04534 	movhi	r3,33044
81101a20:	18c39104 	addi	r3,r3,3652
81101a24:	00a04534 	movhi	r2,33044
81101a28:	10b09604 	addi	r2,r2,-15784
81101a2c:	1009883a 	mov	r4,r2
81101a30:	00800584 	movi	r2,22
81101a34:	100d883a 	mov	r6,r2
81101a38:	200b883a 	mov	r5,r4
81101a3c:	1809883a 	mov	r4,r3
81101a40:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81101a44:	d0a04e17 	ldw	r2,-32456(gp)
81101a48:	01604534 	movhi	r5,33044
81101a4c:	29439104 	addi	r5,r5,3652
81101a50:	1009883a 	mov	r4,r2
81101a54:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a58:	00a04534 	movhi	r2,33044
81101a5c:	10839104 	addi	r2,r2,3652
81101a60:	00c00284 	movi	r3,10
81101a64:	10c00005 	stb	r3,0(r2)
81101a68:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a6c:	d0a04e17 	ldw	r2,-32456(gp)
81101a70:	01604534 	movhi	r5,33044
81101a74:	29439104 	addi	r5,r5,3652
81101a78:	1009883a 	mov	r4,r2
81101a7c:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
81101a80:	e0bfed17 	ldw	r2,-76(fp)
}
81101a84:	e6fffe04 	addi	sp,fp,-8
81101a88:	dfc00317 	ldw	ra,12(sp)
81101a8c:	df000217 	ldw	fp,8(sp)
81101a90:	dc400117 	ldw	r17,4(sp)
81101a94:	dc000017 	ldw	r16,0(sp)
81101a98:	dec00404 	addi	sp,sp,16
81101a9c:	f800283a 	ret

81101aa0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101aa0:	deffe204 	addi	sp,sp,-120
81101aa4:	de00012e 	bgeu	sp,et,81101aac <bDdr2MemoryReadTest+0xc>
81101aa8:	003b68fa 	trap	3
81101aac:	dfc01d15 	stw	ra,116(sp)
81101ab0:	df001c15 	stw	fp,112(sp)
81101ab4:	dc401b15 	stw	r17,108(sp)
81101ab8:	dc001a15 	stw	r16,104(sp)
81101abc:	df001c04 	addi	fp,sp,112
81101ac0:	2005883a 	mov	r2,r4
81101ac4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101ac8:	00e04534 	movhi	r3,33044
81101acc:	18c39104 	addi	r3,r3,3652
81101ad0:	00a04534 	movhi	r2,33044
81101ad4:	10b09c04 	addi	r2,r2,-15760
81101ad8:	1009883a 	mov	r4,r2
81101adc:	008009c4 	movi	r2,39
81101ae0:	100d883a 	mov	r6,r2
81101ae4:	200b883a 	mov	r5,r4
81101ae8:	1809883a 	mov	r4,r3
81101aec:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81101af0:	d0a04e17 	ldw	r2,-32456(gp)
81101af4:	01604534 	movhi	r5,33044
81101af8:	29439104 	addi	r5,r5,3652
81101afc:	1009883a 	mov	r4,r2
81101b00:	1111b340 	call	81111b34 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b04:	00800044 	movi	r2,1
81101b08:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10c00060 	cmpeqi	r3,r2,1
81101b14:	1800031e 	bne	r3,zero,81101b24 <bDdr2MemoryReadTest+0x84>
81101b18:	108000a0 	cmpeqi	r2,r2,2
81101b1c:	1000081e 	bne	r2,zero,81101b40 <bDdr2MemoryReadTest+0xa0>
81101b20:	00000e06 	br	81101b5c <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b24:	e0bffd03 	ldbu	r2,-12(fp)
81101b28:	1009883a 	mov	r4,r2
81101b2c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b30:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101b34:	00a00034 	movhi	r2,32768
81101b38:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b3c:	00001906 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b40:	e0bffd03 	ldbu	r2,-12(fp)
81101b44:	1009883a 	mov	r4,r2
81101b48:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b4c:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b50:	00a00034 	movhi	r2,32768
81101b54:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b58:	00001206 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101b5c:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b60:	00e04534 	movhi	r3,33044
81101b64:	18c39104 	addi	r3,r3,3652
81101b68:	00a04534 	movhi	r2,33044
81101b6c:	10ae8404 	addi	r2,r2,-17904
81101b70:	1009883a 	mov	r4,r2
81101b74:	00800bc4 	movi	r2,47
81101b78:	100d883a 	mov	r6,r2
81101b7c:	200b883a 	mov	r5,r4
81101b80:	1809883a 	mov	r4,r3
81101b84:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b88:	d0a04e17 	ldw	r2,-32456(gp)
81101b8c:	01604534 	movhi	r5,33044
81101b90:	29439104 	addi	r5,r5,3652
81101b94:	1009883a 	mov	r4,r2
81101b98:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
81101b9c:	e0bfe517 	ldw	r2,-108(fp)
81101ba0:	0000fc06 	br	81101f94 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101ba4:	e0bfe717 	ldw	r2,-100(fp)
81101ba8:	1004d53a 	srli	r2,r2,20
81101bac:	100d883a 	mov	r6,r2
81101bb0:	01604534 	movhi	r5,33044
81101bb4:	2970a604 	addi	r5,r5,-15720
81101bb8:	01204534 	movhi	r4,33044
81101bbc:	21039104 	addi	r4,r4,3652
81101bc0:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81101bc4:	d0a04e17 	ldw	r2,-32456(gp)
81101bc8:	01604534 	movhi	r5,33044
81101bcc:	29439104 	addi	r5,r5,3652
81101bd0:	1009883a 	mov	r4,r2
81101bd4:	1111b340 	call	81111b34 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101bd8:	00804004 	movi	r2,256
81101bdc:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101be0:	00800104 	movi	r2,4
81101be4:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101be8:	e0ffec17 	ldw	r3,-80(fp)
81101bec:	e0bfef17 	ldw	r2,-68(fp)
81101bf0:	1885383a 	mul	r2,r3,r2
81101bf4:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bf8:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bfc:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c00:	e03fe815 	stw	zero,-96(fp)
81101c04:	00001506 	br	81101c5c <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c08:	e0ffe717 	ldw	r3,-100(fp)
81101c0c:	00b33374 	movhi	r2,52429
81101c10:	10b33344 	addi	r2,r2,-13107
81101c14:	1888383a 	mulxuu	r4,r3,r2
81101c18:	1885383a 	mul	r2,r3,r2
81101c1c:	1021883a 	mov	r16,r2
81101c20:	2023883a 	mov	r17,r4
81101c24:	8804d0fa 	srli	r2,r17,3
81101c28:	e0ffe817 	ldw	r3,-96(fp)
81101c2c:	18c00044 	addi	r3,r3,1
81101c30:	10c7383a 	mul	r3,r2,r3
81101c34:	e0bfe817 	ldw	r2,-96(fp)
81101c38:	1085883a 	add	r2,r2,r2
81101c3c:	1085883a 	add	r2,r2,r2
81101c40:	e13fe504 	addi	r4,fp,-108
81101c44:	2085883a 	add	r2,r4,r2
81101c48:	10800e04 	addi	r2,r2,56
81101c4c:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c50:	e0bfe817 	ldw	r2,-96(fp)
81101c54:	10800044 	addi	r2,r2,1
81101c58:	e0bfe815 	stw	r2,-96(fp)
81101c5c:	e0bfe817 	ldw	r2,-96(fp)
81101c60:	10800290 	cmplti	r2,r2,10
81101c64:	103fe81e 	bne	r2,zero,81101c08 <__reset+0xfb0e1c08>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c6c:	00e04534 	movhi	r3,33044
81101c70:	18c39104 	addi	r3,r3,3652
81101c74:	00a04534 	movhi	r2,33044
81101c78:	10b0ac04 	addi	r2,r2,-15696
81101c7c:	1009883a 	mov	r4,r2
81101c80:	008006c4 	movi	r2,27
81101c84:	100d883a 	mov	r6,r2
81101c88:	200b883a 	mov	r5,r4
81101c8c:	1809883a 	mov	r4,r3
81101c90:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81101c94:	d0a04e17 	ldw	r2,-32456(gp)
81101c98:	01604534 	movhi	r5,33044
81101c9c:	29439104 	addi	r5,r5,3652
81101ca0:	1009883a 	mov	r4,r2
81101ca4:	1111b340 	call	81111b34 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101ca8:	d0a06c17 	ldw	r2,-32336(gp)
#endif
	iTimeStart = alt_nticks();
81101cac:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101cb0:	e0bfe617 	ldw	r2,-104(fp)
81101cb4:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101cb8:	00810004 	movi	r2,1024
81101cbc:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101cc0:	e0ffe917 	ldw	r3,-92(fp)
81101cc4:	e0bfef17 	ldw	r2,-68(fp)
81101cc8:	1885283a 	div	r2,r3,r2
81101ccc:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101cd0:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101cd4:	00006206 	br	81101e60 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101cd8:	e0bfed17 	ldw	r2,-76(fp)
81101cdc:	e0ffe717 	ldw	r3,-100(fp)
81101ce0:	1885c83a 	sub	r2,r3,r2
81101ce4:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ce8:	e0bfe917 	ldw	r2,-92(fp)
81101cec:	e0fff217 	ldw	r3,-56(fp)
81101cf0:	1880060e 	bge	r3,r2,81101d0c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101cf4:	e0bff217 	ldw	r2,-56(fp)
81101cf8:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cfc:	e0ffe917 	ldw	r3,-92(fp)
81101d00:	e0bfef17 	ldw	r2,-68(fp)
81101d04:	1885283a 	div	r2,r3,r2
81101d08:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d0c:	00a04534 	movhi	r2,33044
81101d10:	1083d104 	addi	r2,r2,3908
81101d14:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d18:	e03fe815 	stw	zero,-96(fp)
81101d1c:	00002b06 	br	81101dcc <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d20:	e0bfeb17 	ldw	r2,-84(fp)
81101d24:	10c00104 	addi	r3,r2,4
81101d28:	e0ffeb15 	stw	r3,-84(fp)
81101d2c:	10c00017 	ldw	r3,0(r2)
81101d30:	e0bfea17 	ldw	r2,-88(fp)
81101d34:	11000104 	addi	r4,r2,4
81101d38:	e13fea15 	stw	r4,-88(fp)
81101d3c:	10800017 	ldw	r2,0(r2)
81101d40:	18801f26 	beq	r3,r2,81101dc0 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d44:	e0bfeb17 	ldw	r2,-84(fp)
81101d48:	10bfff04 	addi	r2,r2,-4
81101d4c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d50:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d54:	00a04534 	movhi	r2,33044
81101d58:	1083d104 	addi	r2,r2,3908
81101d5c:	e0ffe817 	ldw	r3,-96(fp)
81101d60:	18c7883a 	add	r3,r3,r3
81101d64:	18c7883a 	add	r3,r3,r3
81101d68:	10c5883a 	add	r2,r2,r3
81101d6c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d70:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d74:	e0ffed17 	ldw	r3,-76(fp)
81101d78:	e0bfef17 	ldw	r2,-68(fp)
81101d7c:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d80:	e0bfe817 	ldw	r2,-96(fp)
81101d84:	1885883a 	add	r2,r3,r2
81101d88:	d8800015 	stw	r2,0(sp)
81101d8c:	280f883a 	mov	r7,r5
81101d90:	200d883a 	mov	r6,r4
81101d94:	01604534 	movhi	r5,33044
81101d98:	2970b304 	addi	r5,r5,-15668
81101d9c:	01204534 	movhi	r4,33044
81101da0:	21039104 	addi	r4,r4,3652
81101da4:	111329c0 	call	8111329c <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101da8:	d0a04e17 	ldw	r2,-32456(gp)
81101dac:	01604534 	movhi	r5,33044
81101db0:	29439104 	addi	r5,r5,3652
81101db4:	1009883a 	mov	r4,r2
81101db8:	1111b340 	call	81111b34 <fprintf>
#endif
				bSuccess = FALSE;
81101dbc:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101dc0:	e0bfe817 	ldw	r2,-96(fp)
81101dc4:	10800044 	addi	r2,r2,1
81101dc8:	e0bfe815 	stw	r2,-96(fp)
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	e0bfec17 	ldw	r2,-80(fp)
81101dd4:	1880020e 	bge	r3,r2,81101de0 <bDdr2MemoryReadTest+0x340>
81101dd8:	e0bfe517 	ldw	r2,-108(fp)
81101ddc:	103fd01e 	bne	r2,zero,81101d20 <__reset+0xfb0e1d20>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101de0:	e0ffed17 	ldw	r3,-76(fp)
81101de4:	e0bfe917 	ldw	r2,-92(fp)
81101de8:	1885883a 	add	r2,r3,r2
81101dec:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101df0:	e0bfee17 	ldw	r2,-72(fp)
81101df4:	10800288 	cmpgei	r2,r2,10
81101df8:	1000191e 	bne	r2,zero,81101e60 <bDdr2MemoryReadTest+0x3c0>
81101dfc:	e0bfee17 	ldw	r2,-72(fp)
81101e00:	1085883a 	add	r2,r2,r2
81101e04:	1085883a 	add	r2,r2,r2
81101e08:	e0ffe504 	addi	r3,fp,-108
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800e04 	addi	r2,r2,56
81101e14:	10800017 	ldw	r2,0(r2)
81101e18:	e0ffed17 	ldw	r3,-76(fp)
81101e1c:	18801036 	bltu	r3,r2,81101e60 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e20:	e0bfee17 	ldw	r2,-72(fp)
81101e24:	10800044 	addi	r2,r2,1
81101e28:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e2c:	e0bfee17 	ldw	r2,-72(fp)
81101e30:	108002a4 	muli	r2,r2,10
81101e34:	100d883a 	mov	r6,r2
81101e38:	01604534 	movhi	r5,33044
81101e3c:	29708804 	addi	r5,r5,-15840
81101e40:	01204534 	movhi	r4,33044
81101e44:	21039104 	addi	r4,r4,3652
81101e48:	111329c0 	call	8111329c <sprintf>
			debug(fp, cDebugBuffer);
81101e4c:	d0a04e17 	ldw	r2,-32456(gp)
81101e50:	01604534 	movhi	r5,33044
81101e54:	29439104 	addi	r5,r5,3652
81101e58:	1009883a 	mov	r4,r2
81101e5c:	1111b340 	call	81111b34 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e60:	e0bfe517 	ldw	r2,-108(fp)
81101e64:	10000326 	beq	r2,zero,81101e74 <bDdr2MemoryReadTest+0x3d4>
81101e68:	e0ffed17 	ldw	r3,-76(fp)
81101e6c:	e0bfe717 	ldw	r2,-100(fp)
81101e70:	18bf9936 	bltu	r3,r2,81101cd8 <__reset+0xfb0e1cd8>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e74:	00a04534 	movhi	r2,33044
81101e78:	10839104 	addi	r2,r2,3652
81101e7c:	00c00284 	movi	r3,10
81101e80:	10c00005 	stb	r3,0(r2)
81101e84:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e88:	d0a04e17 	ldw	r2,-32456(gp)
81101e8c:	01604534 	movhi	r5,33044
81101e90:	29439104 	addi	r5,r5,3652
81101e94:	1009883a 	mov	r4,r2
81101e98:	1111b340 	call	81111b34 <fprintf>
81101e9c:	d0e06c17 	ldw	r3,-32336(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101ea0:	e0bff117 	ldw	r2,-60(fp)
81101ea4:	1885c83a 	sub	r2,r3,r2
81101ea8:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101eac:	e0bfe517 	ldw	r2,-108(fp)
81101eb0:	10001e26 	beq	r2,zero,81101f2c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101eb4:	e13ff017 	ldw	r4,-64(fp)
81101eb8:	1110d700 	call	81110d70 <__floatsisf>
81101ebc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ec0:	d0a06b17 	ldw	r2,-32340(gp)
81101ec4:	1009883a 	mov	r4,r2
81101ec8:	1110e9c0 	call	81110e9c <__floatunsisf>
81101ecc:	1007883a 	mov	r3,r2
81101ed0:	180b883a 	mov	r5,r3
81101ed4:	8009883a 	mov	r4,r16
81101ed8:	11105240 	call	81110524 <__divsf3>
81101edc:	1007883a 	mov	r3,r2
81101ee0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	11116b40 	call	811116b4 <__extendsfdf2>
81101eec:	1009883a 	mov	r4,r2
81101ef0:	180b883a 	mov	r5,r3
81101ef4:	d9400015 	stw	r5,0(sp)
81101ef8:	200f883a 	mov	r7,r4
81101efc:	e1bfe717 	ldw	r6,-100(fp)
81101f00:	01604534 	movhi	r5,33044
81101f04:	2970c104 	addi	r5,r5,-15612
81101f08:	01204534 	movhi	r4,33044
81101f0c:	21039104 	addi	r4,r4,3652
81101f10:	111329c0 	call	8111329c <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f14:	d0a04e17 	ldw	r2,-32456(gp)
81101f18:	01604534 	movhi	r5,33044
81101f1c:	29439104 	addi	r5,r5,3652
81101f20:	1009883a 	mov	r4,r2
81101f24:	1111b340 	call	81111b34 <fprintf>
81101f28:	00000f06 	br	81101f68 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f2c:	00e04534 	movhi	r3,33044
81101f30:	18c39104 	addi	r3,r3,3652
81101f34:	00a04534 	movhi	r2,33044
81101f38:	10b0cd04 	addi	r2,r2,-15564
81101f3c:	1009883a 	mov	r4,r2
81101f40:	00800544 	movi	r2,21
81101f44:	100d883a 	mov	r6,r2
81101f48:	200b883a 	mov	r5,r4
81101f4c:	1809883a 	mov	r4,r3
81101f50:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81101f54:	d0a04e17 	ldw	r2,-32456(gp)
81101f58:	01604534 	movhi	r5,33044
81101f5c:	29439104 	addi	r5,r5,3652
81101f60:	1009883a 	mov	r4,r2
81101f64:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f68:	00a04534 	movhi	r2,33044
81101f6c:	10839104 	addi	r2,r2,3652
81101f70:	00c00284 	movi	r3,10
81101f74:	10c00005 	stb	r3,0(r2)
81101f78:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f7c:	d0a04e17 	ldw	r2,-32456(gp)
81101f80:	01604534 	movhi	r5,33044
81101f84:	29439104 	addi	r5,r5,3652
81101f88:	1009883a 	mov	r4,r2
81101f8c:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
81101f90:	e0bfe517 	ldw	r2,-108(fp)
}
81101f94:	e6fffe04 	addi	sp,fp,-8
81101f98:	dfc00317 	ldw	ra,12(sp)
81101f9c:	df000217 	ldw	fp,8(sp)
81101fa0:	dc400117 	ldw	r17,4(sp)
81101fa4:	dc000017 	ldw	r16,0(sp)
81101fa8:	dec00404 	addi	sp,sp,16
81101fac:	f800283a 	ret

81101fb0 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101fb0:	deffec04 	addi	sp,sp,-80
81101fb4:	de00012e 	bgeu	sp,et,81101fbc <bDdr2MemoryRandomWriteTest+0xc>
81101fb8:	003b68fa 	trap	3
81101fbc:	dfc01315 	stw	ra,76(sp)
81101fc0:	df001215 	stw	fp,72(sp)
81101fc4:	dcc01115 	stw	r19,68(sp)
81101fc8:	dc801015 	stw	r18,64(sp)
81101fcc:	dc400f15 	stw	r17,60(sp)
81101fd0:	dc000e15 	stw	r16,56(sp)
81101fd4:	df001204 	addi	fp,sp,72
81101fd8:	2005883a 	mov	r2,r4
81101fdc:	e17ffa15 	stw	r5,-24(fp)
81101fe0:	e1bffb15 	stw	r6,-20(fp)
81101fe4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101fe8:	00e04534 	movhi	r3,33044
81101fec:	18c39104 	addi	r3,r3,3652
81101ff0:	00a04534 	movhi	r2,33044
81101ff4:	10b0d304 	addi	r2,r2,-15540
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	00800bc4 	movi	r2,47
81102000:	100d883a 	mov	r6,r2
81102004:	200b883a 	mov	r5,r4
81102008:	1809883a 	mov	r4,r3
8110200c:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81102010:	d0a04e17 	ldw	r2,-32456(gp)
81102014:	01604534 	movhi	r5,33044
81102018:	29439104 	addi	r5,r5,3652
8110201c:	1009883a 	mov	r4,r2
81102020:	1111b340 	call	81111b34 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102024:	00800044 	movi	r2,1
81102028:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110202c:	e0bff903 	ldbu	r2,-28(fp)
81102030:	10c00060 	cmpeqi	r3,r2,1
81102034:	1800031e 	bne	r3,zero,81102044 <bDdr2MemoryRandomWriteTest+0x94>
81102038:	108000a0 	cmpeqi	r2,r2,2
8110203c:	1000081e 	bne	r2,zero,81102060 <bDdr2MemoryRandomWriteTest+0xb0>
81102040:	00000e06 	br	8110207c <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102044:	e0bff903 	ldbu	r2,-28(fp)
81102048:	1009883a 	mov	r4,r2
8110204c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102050:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102054:	00a00034 	movhi	r2,32768
81102058:	e0bff015 	stw	r2,-64(fp)
		break;
8110205c:	00001906 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102060:	e0bff903 	ldbu	r2,-28(fp)
81102064:	1009883a 	mov	r4,r2
81102068:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110206c:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00a00034 	movhi	r2,32768
81102074:	e0bff015 	stw	r2,-64(fp)
		break;
81102078:	00001206 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102080:	00e04534 	movhi	r3,33044
81102084:	18c39104 	addi	r3,r3,3652
81102088:	00a04534 	movhi	r2,33044
8110208c:	10ae8404 	addi	r2,r2,-17904
81102090:	1009883a 	mov	r4,r2
81102094:	00800bc4 	movi	r2,47
81102098:	100d883a 	mov	r6,r2
8110209c:	200b883a 	mov	r5,r4
811020a0:	1809883a 	mov	r4,r3
811020a4:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811020a8:	d0a04e17 	ldw	r2,-32456(gp)
811020ac:	01604534 	movhi	r5,33044
811020b0:	29439104 	addi	r5,r5,3652
811020b4:	1009883a 	mov	r4,r2
811020b8:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
811020bc:	e0bff417 	ldw	r2,-48(fp)
811020c0:	0000ce06 	br	811023fc <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811020c4:	e0bff017 	ldw	r2,-64(fp)
811020c8:	1004d53a 	srli	r2,r2,20
811020cc:	100d883a 	mov	r6,r2
811020d0:	01604534 	movhi	r5,33044
811020d4:	29707d04 	addi	r5,r5,-15884
811020d8:	01204534 	movhi	r4,33044
811020dc:	21039104 	addi	r4,r4,3652
811020e0:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
811020e4:	d0a04e17 	ldw	r2,-32456(gp)
811020e8:	01604534 	movhi	r5,33044
811020ec:	29439104 	addi	r5,r5,3652
811020f0:	1009883a 	mov	r4,r2
811020f4:	1111b340 	call	81111b34 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020f8:	d0a06c17 	ldw	r2,-32336(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020fc:	d0a03615 	stw	r2,-32552(gp)
	uliCurrentState = uliInitialState;
81102100:	d0a03617 	ldw	r2,-32552(gp)
81102104:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102108:	e0ffef17 	ldw	r3,-68(fp)
8110210c:	e0bff017 	ldw	r2,-64(fp)
81102110:	1885883a 	add	r2,r3,r2
81102114:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102118:	e0fff017 	ldw	r3,-64(fp)
8110211c:	00b33374 	movhi	r2,52429
81102120:	10b33344 	addi	r2,r2,-13107
81102124:	1888383a 	mulxuu	r4,r3,r2
81102128:	1885383a 	mul	r2,r3,r2
8110212c:	1025883a 	mov	r18,r2
81102130:	2027883a 	mov	r19,r4
81102134:	9806d13a 	srli	r3,r19,4
81102138:	e0bfef17 	ldw	r2,-68(fp)
8110213c:	1885883a 	add	r2,r3,r2
81102140:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
81102144:	00800144 	movi	r2,5
81102148:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
8110214c:	00e04534 	movhi	r3,33044
81102150:	18c39104 	addi	r3,r3,3652
81102154:	00a04534 	movhi	r2,33044
81102158:	10b0df04 	addi	r2,r2,-15492
8110215c:	1009883a 	mov	r4,r2
81102160:	00800584 	movi	r2,22
81102164:	100d883a 	mov	r6,r2
81102168:	200b883a 	mov	r5,r4
8110216c:	1809883a 	mov	r4,r3
81102170:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81102174:	d0a04e17 	ldw	r2,-32456(gp)
81102178:	01604534 	movhi	r5,33044
8110217c:	29439104 	addi	r5,r5,3652
81102180:	1009883a 	mov	r4,r2
81102184:	1111b340 	call	81111b34 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800058 	cmpnei	r2,r2,1
81102190:	10000a1e 	bne	r2,zero,811021bc <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102194:	01604534 	movhi	r5,33044
81102198:	2970e504 	addi	r5,r5,-15468
8110219c:	01204534 	movhi	r4,33044
811021a0:	21039104 	addi	r4,r4,3652
811021a4:	111329c0 	call	8111329c <sprintf>
		debug(fp, cDebugBuffer);
811021a8:	d0a04e17 	ldw	r2,-32456(gp)
811021ac:	01604534 	movhi	r5,33044
811021b0:	29439104 	addi	r5,r5,3652
811021b4:	1009883a 	mov	r4,r2
811021b8:	1111b340 	call	81111b34 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
811021bc:	e03ff615 	stw	zero,-40(fp)
811021c0:	d0a06c17 	ldw	r2,-32336(gp)

	TimeStart = alt_nticks();
811021c4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811021c8:	e0bfef17 	ldw	r2,-68(fp)
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	00002c06 	br	81102284 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811021d4:	e0bff804 	addi	r2,fp,-32
811021d8:	1009883a 	mov	r4,r2
811021dc:	11028bc0 	call	811028bc <uliXorshift32>
811021e0:	1007883a 	mov	r3,r2
811021e4:	e0bff117 	ldw	r2,-60(fp)
811021e8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021ec:	e0bffa17 	ldw	r2,-24(fp)
811021f0:	10800060 	cmpeqi	r2,r2,1
811021f4:	1009883a 	mov	r4,r2
811021f8:	e0bff117 	ldw	r2,-60(fp)
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885803a 	cmpltu	r2,r3,r2
81102204:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102208:	10803fcc 	andi	r2,r2,255
8110220c:	10001a26 	beq	r2,zero,81102278 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102210:	e0bff303 	ldbu	r2,-52(fp)
81102214:	100d883a 	mov	r6,r2
81102218:	01604534 	movhi	r5,33044
8110221c:	2970e704 	addi	r5,r5,-15460
81102220:	01204534 	movhi	r4,33044
81102224:	21039104 	addi	r4,r4,3652
81102228:	111329c0 	call	8111329c <sprintf>
			debug(fp, cDebugBuffer);
8110222c:	d0a04e17 	ldw	r2,-32456(gp)
81102230:	01604534 	movhi	r5,33044
81102234:	29439104 	addi	r5,r5,3652
81102238:	1009883a 	mov	r4,r2
8110223c:	1111b340 	call	81111b34 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102240:	e0fff017 	ldw	r3,-64(fp)
81102244:	00b33374 	movhi	r2,52429
81102248:	10b33344 	addi	r2,r2,-13107
8110224c:	1888383a 	mulxuu	r4,r3,r2
81102250:	1885383a 	mul	r2,r3,r2
81102254:	1021883a 	mov	r16,r2
81102258:	2023883a 	mov	r17,r4
8110225c:	8804d13a 	srli	r2,r17,4
81102260:	e0fff217 	ldw	r3,-56(fp)
81102264:	1885883a 	add	r2,r3,r2
81102268:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
8110226c:	e0bff303 	ldbu	r2,-52(fp)
81102270:	10800144 	addi	r2,r2,5
81102274:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102278:	e0bff117 	ldw	r2,-60(fp)
8110227c:	10800104 	addi	r2,r2,4
81102280:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102284:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102288:	e0bff517 	ldw	r2,-44(fp)
8110228c:	18bfd136 	bltu	r3,r2,811021d4 <__reset+0xfb0e21d4>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102290:	11273780 	call	81127378 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102294:	e0bffa17 	ldw	r2,-24(fp)
81102298:	10800058 	cmpnei	r2,r2,1
8110229c:	10000a1e 	bne	r2,zero,811022c8 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811022a0:	01604534 	movhi	r5,33044
811022a4:	2970ea04 	addi	r5,r5,-15448
811022a8:	01204534 	movhi	r4,33044
811022ac:	21039104 	addi	r4,r4,3652
811022b0:	111329c0 	call	8111329c <sprintf>
		debug(fp, cDebugBuffer);
811022b4:	d0a04e17 	ldw	r2,-32456(gp)
811022b8:	01604534 	movhi	r5,33044
811022bc:	29439104 	addi	r5,r5,3652
811022c0:	1009883a 	mov	r4,r2
811022c4:	1111b340 	call	81111b34 <fprintf>
#endif
	}

	if (bSuccess) {
811022c8:	e0bff417 	ldw	r2,-48(fp)
811022cc:	10003126 	beq	r2,zero,81102394 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
811022d0:	e0bffb17 	ldw	r2,-20(fp)
811022d4:	10800058 	cmpnei	r2,r2,1
811022d8:	1000221e 	bne	r2,zero,81102364 <bDdr2MemoryRandomWriteTest+0x3b4>
811022dc:	d0e06c17 	ldw	r3,-32336(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811022e0:	e0bff717 	ldw	r2,-36(fp)
811022e4:	1885c83a 	sub	r2,r3,r2
811022e8:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022ec:	e13ff617 	ldw	r4,-40(fp)
811022f0:	1110d700 	call	81110d70 <__floatsisf>
811022f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022f8:	d0a06b17 	ldw	r2,-32340(gp)
811022fc:	1009883a 	mov	r4,r2
81102300:	1110e9c0 	call	81110e9c <__floatunsisf>
81102304:	1007883a 	mov	r3,r2
81102308:	180b883a 	mov	r5,r3
8110230c:	8009883a 	mov	r4,r16
81102310:	11105240 	call	81110524 <__divsf3>
81102314:	1007883a 	mov	r3,r2
81102318:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110231c:	1009883a 	mov	r4,r2
81102320:	11116b40 	call	811116b4 <__extendsfdf2>
81102324:	1009883a 	mov	r4,r2
81102328:	180b883a 	mov	r5,r3
8110232c:	d9400015 	stw	r5,0(sp)
81102330:	200f883a 	mov	r7,r4
81102334:	e1bff017 	ldw	r6,-64(fp)
81102338:	01604534 	movhi	r5,33044
8110233c:	2970ed04 	addi	r5,r5,-15436
81102340:	01204534 	movhi	r4,33044
81102344:	21039104 	addi	r4,r4,3652
81102348:	111329c0 	call	8111329c <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
8110234c:	d0a04e17 	ldw	r2,-32456(gp)
81102350:	01604534 	movhi	r5,33044
81102354:	29439104 	addi	r5,r5,3652
81102358:	1009883a 	mov	r4,r2
8110235c:	1111b340 	call	81111b34 <fprintf>
81102360:	00001b06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102364:	e1bff017 	ldw	r6,-64(fp)
81102368:	01604534 	movhi	r5,33044
8110236c:	2970f904 	addi	r5,r5,-15388
81102370:	01204534 	movhi	r4,33044
81102374:	21039104 	addi	r4,r4,3652
81102378:	111329c0 	call	8111329c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8110237c:	d0a04e17 	ldw	r2,-32456(gp)
81102380:	01604534 	movhi	r5,33044
81102384:	29439104 	addi	r5,r5,3652
81102388:	1009883a 	mov	r4,r2
8110238c:	1111b340 	call	81111b34 <fprintf>
81102390:	00000f06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102394:	00e04534 	movhi	r3,33044
81102398:	18c39104 	addi	r3,r3,3652
8110239c:	00a04534 	movhi	r2,33044
811023a0:	10b09604 	addi	r2,r2,-15784
811023a4:	1009883a 	mov	r4,r2
811023a8:	00800584 	movi	r2,22
811023ac:	100d883a 	mov	r6,r2
811023b0:	200b883a 	mov	r5,r4
811023b4:	1809883a 	mov	r4,r3
811023b8:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
811023bc:	d0a04e17 	ldw	r2,-32456(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	29439104 	addi	r5,r5,3652
811023c8:	1009883a 	mov	r4,r2
811023cc:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811023d0:	00a04534 	movhi	r2,33044
811023d4:	10839104 	addi	r2,r2,3652
811023d8:	00c00284 	movi	r3,10
811023dc:	10c00005 	stb	r3,0(r2)
811023e0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811023e4:	d0a04e17 	ldw	r2,-32456(gp)
811023e8:	01604534 	movhi	r5,33044
811023ec:	29439104 	addi	r5,r5,3652
811023f0:	1009883a 	mov	r4,r2
811023f4:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
811023f8:	e0bff417 	ldw	r2,-48(fp)
}
811023fc:	e6fffc04 	addi	sp,fp,-16
81102400:	dfc00517 	ldw	ra,20(sp)
81102404:	df000417 	ldw	fp,16(sp)
81102408:	dcc00317 	ldw	r19,12(sp)
8110240c:	dc800217 	ldw	r18,8(sp)
81102410:	dc400117 	ldw	r17,4(sp)
81102414:	dc000017 	ldw	r16,0(sp)
81102418:	dec00604 	addi	sp,sp,24
8110241c:	f800283a 	ret

81102420 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102420:	deffec04 	addi	sp,sp,-80
81102424:	de00012e 	bgeu	sp,et,8110242c <bDdr2MemoryRandomReadTest+0xc>
81102428:	003b68fa 	trap	3
8110242c:	dfc01315 	stw	ra,76(sp)
81102430:	df001215 	stw	fp,72(sp)
81102434:	dcc01115 	stw	r19,68(sp)
81102438:	dc801015 	stw	r18,64(sp)
8110243c:	dc400f15 	stw	r17,60(sp)
81102440:	dc000e15 	stw	r16,56(sp)
81102444:	df001204 	addi	fp,sp,72
81102448:	2005883a 	mov	r2,r4
8110244c:	e17ffa15 	stw	r5,-24(fp)
81102450:	e1bffb15 	stw	r6,-20(fp)
81102454:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102458:	00e04534 	movhi	r3,33044
8110245c:	18c39104 	addi	r3,r3,3652
81102460:	00a04534 	movhi	r2,33044
81102464:	10b10304 	addi	r2,r2,-15348
81102468:	1009883a 	mov	r4,r2
8110246c:	00800b84 	movi	r2,46
81102470:	100d883a 	mov	r6,r2
81102474:	200b883a 	mov	r5,r4
81102478:	1809883a 	mov	r4,r3
8110247c:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
81102480:	d0a04e17 	ldw	r2,-32456(gp)
81102484:	01604534 	movhi	r5,33044
81102488:	29439104 	addi	r5,r5,3652
8110248c:	1009883a 	mov	r4,r2
81102490:	1111b340 	call	81111b34 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102494:	00800044 	movi	r2,1
81102498:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110249c:	e0bff903 	ldbu	r2,-28(fp)
811024a0:	10c00060 	cmpeqi	r3,r2,1
811024a4:	1800031e 	bne	r3,zero,811024b4 <bDdr2MemoryRandomReadTest+0x94>
811024a8:	108000a0 	cmpeqi	r2,r2,2
811024ac:	1000081e 	bne	r2,zero,811024d0 <bDdr2MemoryRandomReadTest+0xb0>
811024b0:	00000e06 	br	811024ec <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024b4:	e0bff903 	ldbu	r2,-28(fp)
811024b8:	1009883a 	mov	r4,r2
811024bc:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024c0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811024c4:	00a00034 	movhi	r2,32768
811024c8:	e0bff115 	stw	r2,-60(fp)
		break;
811024cc:	00001906 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024d0:	e0bff903 	ldbu	r2,-28(fp)
811024d4:	1009883a 	mov	r4,r2
811024d8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811024e0:	00a00034 	movhi	r2,32768
811024e4:	e0bff115 	stw	r2,-60(fp)
		break;
811024e8:	00001206 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
811024ec:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811024f0:	00e04534 	movhi	r3,33044
811024f4:	18c39104 	addi	r3,r3,3652
811024f8:	00a04534 	movhi	r2,33044
811024fc:	10ae8404 	addi	r2,r2,-17904
81102500:	1009883a 	mov	r4,r2
81102504:	00800bc4 	movi	r2,47
81102508:	100d883a 	mov	r6,r2
8110250c:	200b883a 	mov	r5,r4
81102510:	1809883a 	mov	r4,r3
81102514:	1112b340 	call	81112b34 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102518:	d0a04e17 	ldw	r2,-32456(gp)
8110251c:	01604534 	movhi	r5,33044
81102520:	29439104 	addi	r5,r5,3652
81102524:	1009883a 	mov	r4,r2
81102528:	1111b340 	call	81111b34 <fprintf>
		;
#endif
		return bSuccess;
8110252c:	e0bfef17 	ldw	r2,-68(fp)
81102530:	0000d906 	br	81102898 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102534:	e0bff117 	ldw	r2,-60(fp)
81102538:	1004d53a 	srli	r2,r2,20
8110253c:	100d883a 	mov	r6,r2
81102540:	01604534 	movhi	r5,33044
81102544:	29707d04 	addi	r5,r5,-15884
81102548:	01204534 	movhi	r4,33044
8110254c:	21039104 	addi	r4,r4,3652
81102550:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81102554:	d0a04e17 	ldw	r2,-32456(gp)
81102558:	01604534 	movhi	r5,33044
8110255c:	29439104 	addi	r5,r5,3652
81102560:	1009883a 	mov	r4,r2
81102564:	1111b340 	call	81111b34 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102568:	d0a03617 	ldw	r2,-32552(gp)
8110256c:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102570:	e0fff017 	ldw	r3,-64(fp)
81102574:	e0bff117 	ldw	r2,-60(fp)
81102578:	1885883a 	add	r2,r3,r2
8110257c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102580:	e0fff117 	ldw	r3,-60(fp)
81102584:	00b33374 	movhi	r2,52429
81102588:	10b33344 	addi	r2,r2,-13107
8110258c:	1888383a 	mulxuu	r4,r3,r2
81102590:	1885383a 	mul	r2,r3,r2
81102594:	1025883a 	mov	r18,r2
81102598:	2027883a 	mov	r19,r4
8110259c:	9806d13a 	srli	r3,r19,4
811025a0:	e0bff017 	ldw	r2,-64(fp)
811025a4:	1885883a 	add	r2,r3,r2
811025a8:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
811025ac:	00800144 	movi	r2,5
811025b0:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
811025b4:	00e04534 	movhi	r3,33044
811025b8:	18c39104 	addi	r3,r3,3652
811025bc:	00a04534 	movhi	r2,33044
811025c0:	10b10f04 	addi	r2,r2,-15300
811025c4:	1009883a 	mov	r4,r2
811025c8:	00800604 	movi	r2,24
811025cc:	100d883a 	mov	r6,r2
811025d0:	200b883a 	mov	r5,r4
811025d4:	1809883a 	mov	r4,r3
811025d8:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
811025dc:	d0a04e17 	ldw	r2,-32456(gp)
811025e0:	01604534 	movhi	r5,33044
811025e4:	29439104 	addi	r5,r5,3652
811025e8:	1009883a 	mov	r4,r2
811025ec:	1111b340 	call	81111b34 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811025f0:	e0bffa17 	ldw	r2,-24(fp)
811025f4:	10800058 	cmpnei	r2,r2,1
811025f8:	10000a1e 	bne	r2,zero,81102624 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025fc:	01604534 	movhi	r5,33044
81102600:	2970e504 	addi	r5,r5,-15468
81102604:	01204534 	movhi	r4,33044
81102608:	21039104 	addi	r4,r4,3652
8110260c:	111329c0 	call	8111329c <sprintf>
		debug(fp, cDebugBuffer);
81102610:	d0a04e17 	ldw	r2,-32456(gp)
81102614:	01604534 	movhi	r5,33044
81102618:	29439104 	addi	r5,r5,3652
8110261c:	1009883a 	mov	r4,r2
81102620:	1111b340 	call	81111b34 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102624:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102628:	d0a06c17 	ldw	r2,-32336(gp)

	TimeStart = alt_nticks();
8110262c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
81102630:	e0bff017 	ldw	r2,-64(fp)
81102634:	e0bff215 	stw	r2,-56(fp)
81102638:	00003a06 	br	81102724 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
8110263c:	e0bff804 	addi	r2,fp,-32
81102640:	1009883a 	mov	r4,r2
81102644:	11028bc0 	call	811028bc <uliXorshift32>
81102648:	1007883a 	mov	r3,r2
8110264c:	e0bff217 	ldw	r2,-56(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	18801026 	beq	r3,r2,81102698 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
81102658:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
8110265c:	e0bffa17 	ldw	r2,-24(fp)
81102660:	10800058 	cmpnei	r2,r2,1
81102664:	10000c1e 	bne	r2,zero,81102698 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102668:	e0bff217 	ldw	r2,-56(fp)
8110266c:	100d883a 	mov	r6,r2
81102670:	01604534 	movhi	r5,33044
81102674:	29711504 	addi	r5,r5,-15276
81102678:	01204534 	movhi	r4,33044
8110267c:	21039104 	addi	r4,r4,3652
81102680:	111329c0 	call	8111329c <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102684:	d0a04e17 	ldw	r2,-32456(gp)
81102688:	01604534 	movhi	r5,33044
8110268c:	29439104 	addi	r5,r5,3652
81102690:	1009883a 	mov	r4,r2
81102694:	1111b340 	call	81111b34 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102698:	e0bffa17 	ldw	r2,-24(fp)
8110269c:	10800058 	cmpnei	r2,r2,1
811026a0:	10001d1e 	bne	r2,zero,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811026a4:	e0bff217 	ldw	r2,-56(fp)
811026a8:	e0fff317 	ldw	r3,-52(fp)
811026ac:	18801a2e 	bgeu	r3,r2,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811026b0:	e0bff403 	ldbu	r2,-48(fp)
811026b4:	100d883a 	mov	r6,r2
811026b8:	01604534 	movhi	r5,33044
811026bc:	2970e704 	addi	r5,r5,-15460
811026c0:	01204534 	movhi	r4,33044
811026c4:	21039104 	addi	r4,r4,3652
811026c8:	111329c0 	call	8111329c <sprintf>
			debug(fp, cDebugBuffer);
811026cc:	d0a04e17 	ldw	r2,-32456(gp)
811026d0:	01604534 	movhi	r5,33044
811026d4:	29439104 	addi	r5,r5,3652
811026d8:	1009883a 	mov	r4,r2
811026dc:	1111b340 	call	81111b34 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811026e0:	e0fff117 	ldw	r3,-60(fp)
811026e4:	00b33374 	movhi	r2,52429
811026e8:	10b33344 	addi	r2,r2,-13107
811026ec:	1888383a 	mulxuu	r4,r3,r2
811026f0:	1885383a 	mul	r2,r3,r2
811026f4:	1021883a 	mov	r16,r2
811026f8:	2023883a 	mov	r17,r4
811026fc:	8804d13a 	srli	r2,r17,4
81102700:	e0fff317 	ldw	r3,-52(fp)
81102704:	1885883a 	add	r2,r3,r2
81102708:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110270c:	e0bff403 	ldbu	r2,-48(fp)
81102710:	10800144 	addi	r2,r2,5
81102714:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102718:	e0bff217 	ldw	r2,-56(fp)
8110271c:	10800104 	addi	r2,r2,4
81102720:	e0bff215 	stw	r2,-56(fp)
81102724:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102728:	e0bff517 	ldw	r2,-44(fp)
8110272c:	18bfc336 	bltu	r3,r2,8110263c <__reset+0xfb0e263c>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81102730:	e0bffa17 	ldw	r2,-24(fp)
81102734:	10800058 	cmpnei	r2,r2,1
81102738:	10000a1e 	bne	r2,zero,81102764 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110273c:	01604534 	movhi	r5,33044
81102740:	2970ea04 	addi	r5,r5,-15448
81102744:	01204534 	movhi	r4,33044
81102748:	21039104 	addi	r4,r4,3652
8110274c:	111329c0 	call	8111329c <sprintf>
		debug(fp, cDebugBuffer);
81102750:	d0a04e17 	ldw	r2,-32456(gp)
81102754:	01604534 	movhi	r5,33044
81102758:	29439104 	addi	r5,r5,3652
8110275c:	1009883a 	mov	r4,r2
81102760:	1111b340 	call	81111b34 <fprintf>
#endif
	}

	if (bSuccess) {
81102764:	e0bfef17 	ldw	r2,-68(fp)
81102768:	10003126 	beq	r2,zero,81102830 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
8110276c:	e0bffb17 	ldw	r2,-20(fp)
81102770:	10800058 	cmpnei	r2,r2,1
81102774:	1000221e 	bne	r2,zero,81102800 <bDdr2MemoryRandomReadTest+0x3e0>
81102778:	d0e06c17 	ldw	r3,-32336(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110277c:	e0bff717 	ldw	r2,-36(fp)
81102780:	1885c83a 	sub	r2,r3,r2
81102784:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102788:	e13ff617 	ldw	r4,-40(fp)
8110278c:	1110d700 	call	81110d70 <__floatsisf>
81102790:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102794:	d0a06b17 	ldw	r2,-32340(gp)
81102798:	1009883a 	mov	r4,r2
8110279c:	1110e9c0 	call	81110e9c <__floatunsisf>
811027a0:	1007883a 	mov	r3,r2
811027a4:	180b883a 	mov	r5,r3
811027a8:	8009883a 	mov	r4,r16
811027ac:	11105240 	call	81110524 <__divsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811027b8:	1009883a 	mov	r4,r2
811027bc:	11116b40 	call	811116b4 <__extendsfdf2>
811027c0:	1009883a 	mov	r4,r2
811027c4:	180b883a 	mov	r5,r3
811027c8:	d9400015 	stw	r5,0(sp)
811027cc:	200f883a 	mov	r7,r4
811027d0:	e1bff117 	ldw	r6,-60(fp)
811027d4:	01604534 	movhi	r5,33044
811027d8:	29711d04 	addi	r5,r5,-15244
811027dc:	01204534 	movhi	r4,33044
811027e0:	21039104 	addi	r4,r4,3652
811027e4:	111329c0 	call	8111329c <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811027e8:	d0a04e17 	ldw	r2,-32456(gp)
811027ec:	01604534 	movhi	r5,33044
811027f0:	29439104 	addi	r5,r5,3652
811027f4:	1009883a 	mov	r4,r2
811027f8:	1111b340 	call	81111b34 <fprintf>
811027fc:	00001b06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102800:	e1bff117 	ldw	r6,-60(fp)
81102804:	01604534 	movhi	r5,33044
81102808:	29712904 	addi	r5,r5,-15196
8110280c:	01204534 	movhi	r4,33044
81102810:	21039104 	addi	r4,r4,3652
81102814:	111329c0 	call	8111329c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102818:	d0a04e17 	ldw	r2,-32456(gp)
8110281c:	01604534 	movhi	r5,33044
81102820:	29439104 	addi	r5,r5,3652
81102824:	1009883a 	mov	r4,r2
81102828:	1111b340 	call	81111b34 <fprintf>
8110282c:	00000f06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81102830:	00e04534 	movhi	r3,33044
81102834:	18c39104 	addi	r3,r3,3652
81102838:	00a04534 	movhi	r2,33044
8110283c:	10b0cd04 	addi	r2,r2,-15564
81102840:	1009883a 	mov	r4,r2
81102844:	00800544 	movi	r2,21
81102848:	100d883a 	mov	r6,r2
8110284c:	200b883a 	mov	r5,r4
81102850:	1809883a 	mov	r4,r3
81102854:	1112b340 	call	81112b34 <memcpy>
		debug(fp, cDebugBuffer);
81102858:	d0a04e17 	ldw	r2,-32456(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	29439104 	addi	r5,r5,3652
81102864:	1009883a 	mov	r4,r2
81102868:	1111b340 	call	81111b34 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110286c:	00a04534 	movhi	r2,33044
81102870:	10839104 	addi	r2,r2,3652
81102874:	00c00284 	movi	r3,10
81102878:	10c00005 	stb	r3,0(r2)
8110287c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102880:	d0a04e17 	ldw	r2,-32456(gp)
81102884:	01604534 	movhi	r5,33044
81102888:	29439104 	addi	r5,r5,3652
8110288c:	1009883a 	mov	r4,r2
81102890:	1111b340 	call	81111b34 <fprintf>
#endif

	return bSuccess;
81102894:	e0bfef17 	ldw	r2,-68(fp)
}
81102898:	e6fffc04 	addi	sp,fp,-16
8110289c:	dfc00517 	ldw	ra,20(sp)
811028a0:	df000417 	ldw	fp,16(sp)
811028a4:	dcc00317 	ldw	r19,12(sp)
811028a8:	dc800217 	ldw	r18,8(sp)
811028ac:	dc400117 	ldw	r17,4(sp)
811028b0:	dc000017 	ldw	r16,0(sp)
811028b4:	dec00604 	addi	sp,sp,24
811028b8:	f800283a 	ret

811028bc <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
811028bc:	defffd04 	addi	sp,sp,-12
811028c0:	de00012e 	bgeu	sp,et,811028c8 <uliXorshift32+0xc>
811028c4:	003b68fa 	trap	3
811028c8:	df000215 	stw	fp,8(sp)
811028cc:	df000204 	addi	fp,sp,8
811028d0:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
811028d4:	e0bfff17 	ldw	r2,-4(fp)
811028d8:	10800017 	ldw	r2,0(r2)
811028dc:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
811028e0:	e0bffe17 	ldw	r2,-8(fp)
811028e4:	1004937a 	slli	r2,r2,13
811028e8:	e0fffe17 	ldw	r3,-8(fp)
811028ec:	1884f03a 	xor	r2,r3,r2
811028f0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
811028f4:	e0bffe17 	ldw	r2,-8(fp)
811028f8:	1004d47a 	srli	r2,r2,17
811028fc:	e0fffe17 	ldw	r3,-8(fp)
81102900:	1884f03a 	xor	r2,r3,r2
81102904:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102908:	e0bffe17 	ldw	r2,-8(fp)
8110290c:	1004917a 	slli	r2,r2,5
81102910:	e0fffe17 	ldw	r3,-8(fp)
81102914:	1884f03a 	xor	r2,r3,r2
81102918:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110291c:	e0bfff17 	ldw	r2,-4(fp)
81102920:	e0fffe17 	ldw	r3,-8(fp)
81102924:	10c00015 	stw	r3,0(r2)

	return uliX;
81102928:	e0bffe17 	ldw	r2,-8(fp)
}
8110292c:	e037883a 	mov	sp,fp
81102930:	df000017 	ldw	fp,0(sp)
81102934:	dec00104 	addi	sp,sp,4
81102938:	f800283a 	ret

8110293c <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
8110293c:	defffb04 	addi	sp,sp,-20
81102940:	de00012e 	bgeu	sp,et,81102948 <DMA_OPEN_DEVICE+0xc>
81102944:	003b68fa 	trap	3
81102948:	dfc00415 	stw	ra,16(sp)
8110294c:	df000315 	stw	fp,12(sp)
81102950:	df000304 	addi	fp,sp,12
81102954:	e13ffe15 	stw	r4,-8(fp)
81102958:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110295c:	00800044 	movi	r2,1
81102960:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102964:	e13fff17 	ldw	r4,-4(fp)
81102968:	113a0780 	call	8113a078 <alt_msgdma_open>
8110296c:	1007883a 	mov	r3,r2
81102970:	e0bffe17 	ldw	r2,-8(fp)
81102974:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	10800017 	ldw	r2,0(r2)
81102980:	1000011e 	bne	r2,zero,81102988 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81102984:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81102988:	e0bffd17 	ldw	r2,-12(fp)
}
8110298c:	e037883a 	mov	sp,fp
81102990:	dfc00117 	ldw	ra,4(sp)
81102994:	df000017 	ldw	fp,0(sp)
81102998:	dec00204 	addi	sp,sp,8
8110299c:	f800283a 	ret

811029a0 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
811029a0:	defffc04 	addi	sp,sp,-16
811029a4:	de00012e 	bgeu	sp,et,811029ac <DMA_CONFIG+0xc>
811029a8:	003b68fa 	trap	3
811029ac:	df000315 	stw	fp,12(sp)
811029b0:	df000304 	addi	fp,sp,12
811029b4:	e13ffe15 	stw	r4,-8(fp)
811029b8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029bc:	00800044 	movi	r2,1
811029c0:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	10800317 	ldw	r2,12(r2)
811029cc:	10800104 	addi	r2,r2,4
811029d0:	e0ffff17 	ldw	r3,-4(fp)
811029d4:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811029d8:	e0bffd17 	ldw	r2,-12(fp)
}
811029dc:	e037883a 	mov	sp,fp
811029e0:	df000017 	ldw	fp,0(sp)
811029e4:	dec00104 	addi	sp,sp,4
811029e8:	f800283a 	ret

811029ec <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811029ec:	defffd04 	addi	sp,sp,-12
811029f0:	de00012e 	bgeu	sp,et,811029f8 <DMA_BUSY+0xc>
811029f4:	003b68fa 	trap	3
811029f8:	df000215 	stw	fp,8(sp)
811029fc:	df000204 	addi	fp,sp,8
81102a00:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a04:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a08:	e0bfff17 	ldw	r2,-4(fp)
81102a0c:	10800317 	ldw	r2,12(r2)
81102a10:	10800037 	ldwio	r2,0(r2)
81102a14:	1080004c 	andi	r2,r2,1
81102a18:	10000226 	beq	r2,zero,81102a24 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a1c:	00800044 	movi	r2,1
81102a20:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a24:	e0bffe17 	ldw	r2,-8(fp)
}
81102a28:	e037883a 	mov	sp,fp
81102a2c:	df000017 	ldw	fp,0(sp)
81102a30:	dec00104 	addi	sp,sp,4
81102a34:	f800283a 	ret

81102a38 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102a38:	defffd04 	addi	sp,sp,-12
81102a3c:	de00012e 	bgeu	sp,et,81102a44 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102a40:	003b68fa 	trap	3
81102a44:	df000215 	stw	fp,8(sp)
81102a48:	df000204 	addi	fp,sp,8
81102a4c:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102a50:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102a54:	e0bfff17 	ldw	r2,-4(fp)
81102a58:	10800317 	ldw	r2,12(r2)
81102a5c:	10800037 	ldwio	r2,0(r2)
81102a60:	1080010c 	andi	r2,r2,4
81102a64:	10000226 	beq	r2,zero,81102a70 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102a68:	00800044 	movi	r2,1
81102a6c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102a70:	e0bffe17 	ldw	r2,-8(fp)
}
81102a74:	e037883a 	mov	sp,fp
81102a78:	df000017 	ldw	fp,0(sp)
81102a7c:	dec00104 	addi	sp,sp,4
81102a80:	f800283a 	ret

81102a84 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102a84:	defffd04 	addi	sp,sp,-12
81102a88:	de00012e 	bgeu	sp,et,81102a90 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102a8c:	003b68fa 	trap	3
81102a90:	df000215 	stw	fp,8(sp)
81102a94:	df000204 	addi	fp,sp,8
81102a98:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102a9c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102aa0:	e0bfff17 	ldw	r2,-4(fp)
81102aa4:	10800317 	ldw	r2,12(r2)
81102aa8:	10800037 	ldwio	r2,0(r2)
81102aac:	1080008c 	andi	r2,r2,2
81102ab0:	10000226 	beq	r2,zero,81102abc <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102ab4:	00800044 	movi	r2,1
81102ab8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102abc:	e0bffe17 	ldw	r2,-8(fp)
}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	de00012e 	bgeu	sp,et,81102adc <DMA_DISPATCHER_STOP+0xc>
81102ad8:	003b68fa 	trap	3
81102adc:	dfc00515 	stw	ra,20(sp)
81102ae0:	df000415 	stw	fp,16(sp)
81102ae4:	df000404 	addi	fp,sp,16
81102ae8:	e13ffd15 	stw	r4,-12(fp)
81102aec:	e17ffe15 	stw	r5,-8(fp)
81102af0:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102af4:	00800044 	movi	r2,1
81102af8:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102afc:	e0bffd17 	ldw	r2,-12(fp)
81102b00:	10800317 	ldw	r2,12(r2)
81102b04:	10800104 	addi	r2,r2,4
81102b08:	00c00044 	movi	r3,1
81102b0c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b10:	e0bffe17 	ldw	r2,-8(fp)
81102b14:	10800058 	cmpnei	r2,r2,1
81102b18:	10000e1e 	bne	r2,zero,81102b54 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b1c:	00000706 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b20:	e0bfff17 	ldw	r2,-4(fp)
81102b24:	1000031e 	bne	r2,zero,81102b34 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b28:	01000044 	movi	r4,1
81102b2c:	1127ffc0 	call	81127ffc <usleep>
81102b30:	00000206 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102b34:	e13fff17 	ldw	r4,-4(fp)
81102b38:	1127ffc0 	call	81127ffc <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b3c:	e0bffd17 	ldw	r2,-12(fp)
81102b40:	10800317 	ldw	r2,12(r2)
81102b44:	10800037 	ldwio	r2,0(r2)
81102b48:	1080080c 	andi	r2,r2,32
81102b4c:	103ff41e 	bne	r2,zero,81102b20 <__reset+0xfb0e2b20>
81102b50:	00000206 	br	81102b5c <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102b54:	e0bffc17 	ldw	r2,-16(fp)
81102b58:	00000106 	br	81102b60 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102b5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102b60:	e037883a 	mov	sp,fp
81102b64:	dfc00117 	ldw	ra,4(sp)
81102b68:	df000017 	ldw	fp,0(sp)
81102b6c:	dec00204 	addi	sp,sp,8
81102b70:	f800283a 	ret

81102b74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b74:	defffa04 	addi	sp,sp,-24
81102b78:	de00012e 	bgeu	sp,et,81102b80 <DMA_DISPATCHER_RESET+0xc>
81102b7c:	003b68fa 	trap	3
81102b80:	dfc00515 	stw	ra,20(sp)
81102b84:	df000415 	stw	fp,16(sp)
81102b88:	df000404 	addi	fp,sp,16
81102b8c:	e13ffd15 	stw	r4,-12(fp)
81102b90:	e17ffe15 	stw	r5,-8(fp)
81102b94:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b98:	00800044 	movi	r2,1
81102b9c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102ba0:	e0bffd17 	ldw	r2,-12(fp)
81102ba4:	10800317 	ldw	r2,12(r2)
81102ba8:	10800104 	addi	r2,r2,4
81102bac:	00c00084 	movi	r3,2
81102bb0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102bb4:	e0bffe17 	ldw	r2,-8(fp)
81102bb8:	10800058 	cmpnei	r2,r2,1
81102bbc:	10000e1e 	bne	r2,zero,81102bf8 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102bc0:	00000706 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102bc4:	e0bfff17 	ldw	r2,-4(fp)
81102bc8:	1000031e 	bne	r2,zero,81102bd8 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102bcc:	01000044 	movi	r4,1
81102bd0:	1127ffc0 	call	81127ffc <usleep>
81102bd4:	00000206 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102bd8:	e13fff17 	ldw	r4,-4(fp)
81102bdc:	1127ffc0 	call	81127ffc <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102be0:	e0bffd17 	ldw	r2,-12(fp)
81102be4:	10800317 	ldw	r2,12(r2)
81102be8:	10800037 	ldwio	r2,0(r2)
81102bec:	1080100c 	andi	r2,r2,64
81102bf0:	103ff41e 	bne	r2,zero,81102bc4 <__reset+0xfb0e2bc4>
81102bf4:	00000206 	br	81102c00 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	00000106 	br	81102c04 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c18:	defff604 	addi	sp,sp,-40
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <DMA_SINGLE_TRANSFER+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00915 	stw	ra,36(sp)
81102c28:	df000815 	stw	fp,32(sp)
81102c2c:	dc000715 	stw	r16,28(sp)
81102c30:	df000804 	addi	fp,sp,32
81102c34:	e13ffb15 	stw	r4,-20(fp)
81102c38:	e17ffc15 	stw	r5,-16(fp)
81102c3c:	e1bffd15 	stw	r6,-12(fp)
81102c40:	e1fffe15 	stw	r7,-8(fp)
81102c44:	defff804 	addi	sp,sp,-32
81102c48:	d8800204 	addi	r2,sp,8
81102c4c:	108003c4 	addi	r2,r2,15
81102c50:	1004d13a 	srli	r2,r2,4
81102c54:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102c58:	00800044 	movi	r2,1
81102c5c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102c60:	e0fffc17 	ldw	r3,-16(fp)
81102c64:	e13ffd17 	ldw	r4,-12(fp)
81102c68:	e0800217 	ldw	r2,8(fp)
81102c6c:	d8800115 	stw	r2,4(sp)
81102c70:	e0bffe17 	ldw	r2,-8(fp)
81102c74:	d8800015 	stw	r2,0(sp)
81102c78:	200f883a 	mov	r7,r4
81102c7c:	180d883a 	mov	r6,r3
81102c80:	800b883a 	mov	r5,r16
81102c84:	e13ffb17 	ldw	r4,-20(fp)
81102c88:	11390740 	call	81139074 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102c8c:	10000326 	beq	r2,zero,81102c9c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102c90:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102c94:	e0bffa17 	ldw	r2,-24(fp)
81102c98:	00001d06 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102c9c:	800b883a 	mov	r5,r16
81102ca0:	e13ffb17 	ldw	r4,-20(fp)
81102ca4:	113a2e80 	call	8113a2e8 <alt_msgdma_standard_descriptor_async_transfer>
81102ca8:	10000326 	beq	r2,zero,81102cb8 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102cb0:	e0bffa17 	ldw	r2,-24(fp)
81102cb4:	00001606 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102cb8:	e0bffa17 	ldw	r2,-24(fp)
81102cbc:	10800060 	cmpeqi	r2,r2,1
81102cc0:	1007883a 	mov	r3,r2
81102cc4:	e0800317 	ldw	r2,12(fp)
81102cc8:	10800060 	cmpeqi	r2,r2,1
81102ccc:	1884703a 	and	r2,r3,r2
81102cd0:	10803fcc 	andi	r2,r2,255
81102cd4:	10000d26 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cd8:	00000706 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102cdc:	e0800417 	ldw	r2,16(fp)
81102ce0:	1000031e 	bne	r2,zero,81102cf0 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102ce4:	0100fa04 	movi	r4,1000
81102ce8:	1127ffc0 	call	81127ffc <usleep>
81102cec:	00000206 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102cf0:	e1000417 	ldw	r4,16(fp)
81102cf4:	1127ffc0 	call	81127ffc <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cf8:	e0bffb17 	ldw	r2,-20(fp)
81102cfc:	10800317 	ldw	r2,12(r2)
81102d00:	10800037 	ldwio	r2,0(r2)
81102d04:	1080004c 	andi	r2,r2,1
81102d08:	103ff41e 	bne	r2,zero,81102cdc <__reset+0xfb0e2cdc>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d0c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d10:	e6ffff04 	addi	sp,fp,-4
81102d14:	dfc00217 	ldw	ra,8(sp)
81102d18:	df000117 	ldw	fp,4(sp)
81102d1c:	dc000017 	ldw	r16,0(sp)
81102d20:	dec00304 	addi	sp,sp,12
81102d24:	f800283a 	ret

81102d28 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d28:	defff504 	addi	sp,sp,-44
81102d2c:	de00012e 	bgeu	sp,et,81102d34 <DMA_MULTIPLE_TRANSFER+0xc>
81102d30:	003b68fa 	trap	3
81102d34:	dfc00a15 	stw	ra,40(sp)
81102d38:	df000915 	stw	fp,36(sp)
81102d3c:	dc000815 	stw	r16,32(sp)
81102d40:	df000904 	addi	fp,sp,36
81102d44:	e13ffb15 	stw	r4,-20(fp)
81102d48:	e17ffc15 	stw	r5,-16(fp)
81102d4c:	e1bffd15 	stw	r6,-12(fp)
81102d50:	3805883a 	mov	r2,r7
81102d54:	e0bffe05 	stb	r2,-8(fp)
81102d58:	defff804 	addi	sp,sp,-32
81102d5c:	d8800204 	addi	r2,sp,8
81102d60:	108003c4 	addi	r2,r2,15
81102d64:	1004d13a 	srli	r2,r2,4
81102d68:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102d6c:	00800044 	movi	r2,1
81102d70:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102d74:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102d78:	00002506 	br	81102e10 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102d7c:	e0bffa03 	ldbu	r2,-24(fp)
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1085883a 	add	r2,r2,r2
81102d88:	1007883a 	mov	r3,r2
81102d8c:	e0bffc17 	ldw	r2,-16(fp)
81102d90:	10c5883a 	add	r2,r2,r3
81102d94:	10800017 	ldw	r2,0(r2)
81102d98:	1009883a 	mov	r4,r2
81102d9c:	e0bffa03 	ldbu	r2,-24(fp)
81102da0:	1085883a 	add	r2,r2,r2
81102da4:	1085883a 	add	r2,r2,r2
81102da8:	1007883a 	mov	r3,r2
81102dac:	e0bffd17 	ldw	r2,-12(fp)
81102db0:	10c5883a 	add	r2,r2,r3
81102db4:	10800017 	ldw	r2,0(r2)
81102db8:	1007883a 	mov	r3,r2
81102dbc:	e0800317 	ldw	r2,12(fp)
81102dc0:	10804034 	orhi	r2,r2,256
81102dc4:	d8800115 	stw	r2,4(sp)
81102dc8:	e0800217 	ldw	r2,8(fp)
81102dcc:	d8800015 	stw	r2,0(sp)
81102dd0:	180f883a 	mov	r7,r3
81102dd4:	200d883a 	mov	r6,r4
81102dd8:	800b883a 	mov	r5,r16
81102ddc:	e13ffb17 	ldw	r4,-20(fp)
81102de0:	11390740 	call	81139074 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102de4:	10000226 	beq	r2,zero,81102df0 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102de8:	e03ff915 	stw	zero,-28(fp)
81102dec:	00000506 	br	81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102df0:	800b883a 	mov	r5,r16
81102df4:	e13ffb17 	ldw	r4,-20(fp)
81102df8:	113a2e80 	call	8113a2e8 <alt_msgdma_standard_descriptor_async_transfer>
81102dfc:	10000126 	beq	r2,zero,81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e00:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e04:	e0bffa03 	ldbu	r2,-24(fp)
81102e08:	10800044 	addi	r2,r2,1
81102e0c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e10:	e0bff917 	ldw	r2,-28(fp)
81102e14:	10800060 	cmpeqi	r2,r2,1
81102e18:	1009883a 	mov	r4,r2
81102e1c:	e0fffa03 	ldbu	r3,-24(fp)
81102e20:	e0bffe03 	ldbu	r2,-8(fp)
81102e24:	10bfffc4 	addi	r2,r2,-1
81102e28:	1884803a 	cmplt	r2,r3,r2
81102e2c:	2084703a 	and	r2,r4,r2
81102e30:	10803fcc 	andi	r2,r2,255
81102e34:	103fd11e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102e38:	e0bff917 	ldw	r2,-28(fp)
81102e3c:	10800058 	cmpnei	r2,r2,1
81102e40:	1000211e 	bne	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102e44:	e0bffa03 	ldbu	r2,-24(fp)
81102e48:	1085883a 	add	r2,r2,r2
81102e4c:	1085883a 	add	r2,r2,r2
81102e50:	1007883a 	mov	r3,r2
81102e54:	e0bffc17 	ldw	r2,-16(fp)
81102e58:	10c5883a 	add	r2,r2,r3
81102e5c:	10800017 	ldw	r2,0(r2)
81102e60:	1009883a 	mov	r4,r2
81102e64:	e0bffa03 	ldbu	r2,-24(fp)
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	1085883a 	add	r2,r2,r2
81102e70:	1007883a 	mov	r3,r2
81102e74:	e0bffd17 	ldw	r2,-12(fp)
81102e78:	10c5883a 	add	r2,r2,r3
81102e7c:	10800017 	ldw	r2,0(r2)
81102e80:	1007883a 	mov	r3,r2
81102e84:	e0800317 	ldw	r2,12(fp)
81102e88:	d8800115 	stw	r2,4(sp)
81102e8c:	e0800217 	ldw	r2,8(fp)
81102e90:	d8800015 	stw	r2,0(sp)
81102e94:	180f883a 	mov	r7,r3
81102e98:	200d883a 	mov	r6,r4
81102e9c:	800b883a 	mov	r5,r16
81102ea0:	e13ffb17 	ldw	r4,-20(fp)
81102ea4:	11390740 	call	81139074 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102ea8:	10000226 	beq	r2,zero,81102eb4 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102eac:	e03ff915 	stw	zero,-28(fp)
81102eb0:	00000506 	br	81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102eb4:	800b883a 	mov	r5,r16
81102eb8:	e13ffb17 	ldw	r4,-20(fp)
81102ebc:	113a2e80 	call	8113a2e8 <alt_msgdma_standard_descriptor_async_transfer>
81102ec0:	10000126 	beq	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102ec4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102ec8:	e0bff917 	ldw	r2,-28(fp)
81102ecc:	10800060 	cmpeqi	r2,r2,1
81102ed0:	1007883a 	mov	r3,r2
81102ed4:	e0800417 	ldw	r2,16(fp)
81102ed8:	10800060 	cmpeqi	r2,r2,1
81102edc:	1884703a 	and	r2,r3,r2
81102ee0:	10803fcc 	andi	r2,r2,255
81102ee4:	10000d26 	beq	r2,zero,81102f1c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102ee8:	00000706 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102eec:	e0800517 	ldw	r2,20(fp)
81102ef0:	1000031e 	bne	r2,zero,81102f00 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102ef4:	0100fa04 	movi	r4,1000
81102ef8:	1127ffc0 	call	81127ffc <usleep>
81102efc:	00000206 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f00:	e1000517 	ldw	r4,20(fp)
81102f04:	1127ffc0 	call	81127ffc <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f08:	e0bffb17 	ldw	r2,-20(fp)
81102f0c:	10800317 	ldw	r2,12(r2)
81102f10:	10800037 	ldwio	r2,0(r2)
81102f14:	1080004c 	andi	r2,r2,1
81102f18:	103ff41e 	bne	r2,zero,81102eec <__reset+0xfb0e2eec>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f1c:	e0bff917 	ldw	r2,-28(fp)
}
81102f20:	e6ffff04 	addi	sp,fp,-4
81102f24:	dfc00217 	ldw	ra,8(sp)
81102f28:	df000117 	ldw	fp,4(sp)
81102f2c:	dc000017 	ldw	r16,0(sp)
81102f30:	dec00304 	addi	sp,sp,12
81102f34:	f800283a 	ret

81102f38 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102f38:	deffef04 	addi	sp,sp,-68
81102f3c:	de00012e 	bgeu	sp,et,81102f44 <POWER_Read+0xc>
81102f40:	003b68fa 	trap	3
81102f44:	dfc01015 	stw	ra,64(sp)
81102f48:	df000f15 	stw	fp,60(sp)
81102f4c:	df000f04 	addi	fp,sp,60
81102f50:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102f54:	00800044 	movi	r2,1
81102f58:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102f5c:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102f60:	00800204 	movi	r2,8
81102f64:	e0bffc15 	stw	r2,-16(fp)
81102f68:	00800104 	movi	r2,4
81102f6c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102f70:	00800044 	movi	r2,1
81102f74:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102f80:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102f84:	e03ff515 	stw	zero,-44(fp)
81102f88:	00009206 	br	811031d4 <POWER_Read+0x29c>
		NextChannel = 0;
81102f8c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102f90:	e0bff517 	ldw	r2,-44(fp)
81102f94:	10c03fcc 	andi	r3,r2,255
81102f98:	e13ffa03 	ldbu	r4,-24(fp)
81102f9c:	e0bfff17 	ldw	r2,-4(fp)
81102fa0:	d8800115 	stw	r2,4(sp)
81102fa4:	e0bff917 	ldw	r2,-28(fp)
81102fa8:	d8800015 	stw	r2,0(sp)
81102fac:	e1fff817 	ldw	r7,-32(fp)
81102fb0:	e1bff717 	ldw	r6,-36(fp)
81102fb4:	200b883a 	mov	r5,r4
81102fb8:	1809883a 	mov	r4,r3
81102fbc:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81102fc0:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102fc4:	e03ff415 	stw	zero,-48(fp)
81102fc8:	00007406 	br	8110319c <POWER_Read+0x264>
			NextChannel = i + 1;
81102fcc:	e0bff417 	ldw	r2,-48(fp)
81102fd0:	10800044 	addi	r2,r2,1
81102fd4:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102fd8:	e0bff517 	ldw	r2,-44(fp)
81102fdc:	10c03fcc 	andi	r3,r2,255
81102fe0:	e13ffa03 	ldbu	r4,-24(fp)
81102fe4:	e0bffe04 	addi	r2,fp,-8
81102fe8:	d8800115 	stw	r2,4(sp)
81102fec:	e0bff917 	ldw	r2,-28(fp)
81102ff0:	d8800015 	stw	r2,0(sp)
81102ff4:	e1fff817 	ldw	r7,-32(fp)
81102ff8:	e1bff717 	ldw	r6,-36(fp)
81102ffc:	200b883a 	mov	r5,r4
81103000:	1809883a 	mov	r4,r3
81103004:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81103008:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110300c:	e0bff317 	ldw	r2,-52(fp)
81103010:	10005026 	beq	r2,zero,81103154 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103014:	e0bffe17 	ldw	r2,-8(fp)
81103018:	1004d7ba 	srli	r2,r2,30
8110301c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103020:	e0bffe17 	ldw	r2,-8(fp)
81103024:	1004d07a 	srli	r2,r2,1
81103028:	108001cc 	andi	r2,r2,7
8110302c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
81103030:	e0bffe17 	ldw	r2,-8(fp)
81103034:	1004d13a 	srli	r2,r2,4
81103038:	1080004c 	andi	r2,r2,1
8110303c:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	1004d17a 	srli	r2,r2,5
81103048:	1080004c 	andi	r2,r2,1
8110304c:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
81103050:	e0bffe17 	ldw	r2,-8(fp)
81103054:	1080004c 	andi	r2,r2,1
81103058:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
8110305c:	e0bffa43 	ldbu	r2,-23(fp)
81103060:	10000d26 	beq	r2,zero,81103098 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81103064:	e1bff417 	ldw	r6,-48(fp)
81103068:	01604534 	movhi	r5,33044
8110306c:	29713304 	addi	r5,r5,-15156
81103070:	01204534 	movhi	r4,33044
81103074:	21039104 	addi	r4,r4,3652
81103078:	111329c0 	call	8111329c <sprintf>
					debug(fp, cDebugBuffer);
8110307c:	d0a04e17 	ldw	r2,-32456(gp)
81103080:	01604534 	movhi	r5,33044
81103084:	29439104 	addi	r5,r5,3652
81103088:	1009883a 	mov	r4,r2
8110308c:	1111b340 	call	81111b34 <fprintf>
#endif
					bSuccess = FALSE;
81103090:	e03ff315 	stw	zero,-52(fp)
81103094:	00002206 	br	81103120 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103098:	e0fffa83 	ldbu	r3,-22(fp)
8110309c:	e0bff417 	ldw	r2,-48(fp)
811030a0:	18801026 	beq	r3,r2,811030e4 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
811030a4:	e0bffa83 	ldbu	r2,-22(fp)
811030a8:	d8800015 	stw	r2,0(sp)
811030ac:	e1fff417 	ldw	r7,-48(fp)
811030b0:	e1bff417 	ldw	r6,-48(fp)
811030b4:	01604534 	movhi	r5,33044
811030b8:	29713904 	addi	r5,r5,-15132
811030bc:	01204534 	movhi	r4,33044
811030c0:	21039104 	addi	r4,r4,3652
811030c4:	111329c0 	call	8111329c <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
811030c8:	d0a04e17 	ldw	r2,-32456(gp)
811030cc:	01604534 	movhi	r5,33044
811030d0:	29439104 	addi	r5,r5,3652
811030d4:	1009883a 	mov	r4,r2
811030d8:	1111b340 	call	81111b34 <fprintf>
#endif
					bSuccess = FALSE;
811030dc:	e03ff315 	stw	zero,-52(fp)
811030e0:	00000f06 	br	81103120 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
811030e4:	e0fffac3 	ldbu	r3,-21(fp)
811030e8:	e0bff817 	ldw	r2,-32(fp)
811030ec:	18800c26 	beq	r3,r2,81103120 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
811030f0:	e1bff417 	ldw	r6,-48(fp)
811030f4:	01604534 	movhi	r5,33044
811030f8:	29714504 	addi	r5,r5,-15084
811030fc:	01204534 	movhi	r4,33044
81103100:	21039104 	addi	r4,r4,3652
81103104:	111329c0 	call	8111329c <sprintf>
					debug(fp, cDebugBuffer);
81103108:	d0a04e17 	ldw	r2,-32456(gp)
8110310c:	01604534 	movhi	r5,33044
81103110:	29439104 	addi	r5,r5,3652
81103114:	1009883a 	mov	r4,r2
81103118:	1111b340 	call	81111b34 <fprintf>
#endif
					bSuccess = FALSE;
8110311c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103120:	e0bff317 	ldw	r2,-52(fp)
81103124:	10001a26 	beq	r2,zero,81103190 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103128:	e0bff617 	ldw	r2,-40(fp)
8110312c:	10c00044 	addi	r3,r2,1
81103130:	e0fff615 	stw	r3,-40(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	1085883a 	add	r2,r2,r2
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bfff17 	ldw	r2,-4(fp)
81103144:	10c5883a 	add	r2,r2,r3
81103148:	e0fffe17 	ldw	r3,-8(fp)
8110314c:	10c00015 	stw	r3,0(r2)
81103150:	00000f06 	br	81103190 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81103154:	00e04534 	movhi	r3,33044
81103158:	18c39104 	addi	r3,r3,3652
8110315c:	00a04534 	movhi	r2,33044
81103160:	10b14b04 	addi	r2,r2,-15060
81103164:	1009883a 	mov	r4,r2
81103168:	00800444 	movi	r2,17
8110316c:	100d883a 	mov	r6,r2
81103170:	200b883a 	mov	r5,r4
81103174:	1809883a 	mov	r4,r3
81103178:	1112b340 	call	81112b34 <memcpy>
				debug(fp, cDebugBuffer);
8110317c:	d0a04e17 	ldw	r2,-32456(gp)
81103180:	01604534 	movhi	r5,33044
81103184:	29439104 	addi	r5,r5,3652
81103188:	1009883a 	mov	r4,r2
8110318c:	1111b340 	call	81111b34 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103190:	e0bff417 	ldw	r2,-48(fp)
81103194:	10800044 	addi	r2,r2,1
81103198:	e0bff415 	stw	r2,-48(fp)
8110319c:	e0bff517 	ldw	r2,-44(fp)
811031a0:	1085883a 	add	r2,r2,r2
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	e0fff304 	addi	r3,fp,-52
811031ac:	1885883a 	add	r2,r3,r2
811031b0:	10800904 	addi	r2,r2,36
811031b4:	10800017 	ldw	r2,0(r2)
811031b8:	e0fff417 	ldw	r3,-48(fp)
811031bc:	1880020e 	bge	r3,r2,811031c8 <POWER_Read+0x290>
811031c0:	e0bff317 	ldw	r2,-52(fp)
811031c4:	103f811e 	bne	r2,zero,81102fcc <__reset+0xfb0e2fcc>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
811031c8:	e0bff517 	ldw	r2,-44(fp)
811031cc:	10800044 	addi	r2,r2,1
811031d0:	e0bff515 	stw	r2,-44(fp)
811031d4:	e0bff517 	ldw	r2,-44(fp)
811031d8:	10800088 	cmpgei	r2,r2,2
811031dc:	1000021e 	bne	r2,zero,811031e8 <POWER_Read+0x2b0>
811031e0:	e0bff317 	ldw	r2,-52(fp)
811031e4:	103f691e 	bne	r2,zero,81102f8c <__reset+0xfb0e2f8c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
811031e8:	e0bff317 	ldw	r2,-52(fp)
}
811031ec:	e037883a 	mov	sp,fp
811031f0:	dfc00117 	ldw	ra,4(sp)
811031f4:	df000017 	ldw	fp,0(sp)
811031f8:	dec00204 	addi	sp,sp,8
811031fc:	f800283a 	ret

81103200 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103200:	defff904 	addi	sp,sp,-28
81103204:	de00012e 	bgeu	sp,et,8110320c <TEMP_Read+0xc>
81103208:	003b68fa 	trap	3
8110320c:	dfc00615 	stw	ra,24(sp)
81103210:	df000515 	stw	fp,20(sp)
81103214:	df000504 	addi	fp,sp,20
81103218:	e13ffe15 	stw	r4,-8(fp)
8110321c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103220:	00800c04 	movi	r2,48
81103224:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103228:	e0bffd83 	ldbu	r2,-10(fp)
8110322c:	10c03fcc 	andi	r3,r2,255
81103230:	18c0201c 	xori	r3,r3,128
81103234:	18ffe004 	addi	r3,r3,-128
81103238:	e0bffdc4 	addi	r2,fp,-9
8110323c:	d8800015 	stw	r2,0(sp)
81103240:	000f883a 	mov	r7,zero
81103244:	180d883a 	mov	r6,r3
81103248:	01600034 	movhi	r5,32768
8110324c:	29426004 	addi	r5,r5,2432
81103250:	01200034 	movhi	r4,32768
81103254:	21026404 	addi	r4,r4,2448
81103258:	1105ac00 	call	81105ac0 <I2C_Read>
8110325c:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81103260:	e0bffc17 	ldw	r2,-16(fp)
81103264:	10000226 	beq	r2,zero,81103270 <TEMP_Read+0x70>
		BoardTemp = Data;
81103268:	e0bffdc3 	ldbu	r2,-9(fp)
8110326c:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81103270:	e0bffc17 	ldw	r2,-16(fp)
81103274:	10001226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81103278:	e0bffd83 	ldbu	r2,-10(fp)
8110327c:	10c03fcc 	andi	r3,r2,255
81103280:	18c0201c 	xori	r3,r3,128
81103284:	18ffe004 	addi	r3,r3,-128
81103288:	e0bffdc4 	addi	r2,fp,-9
8110328c:	d8800015 	stw	r2,0(sp)
81103290:	01c00044 	movi	r7,1
81103294:	180d883a 	mov	r6,r3
81103298:	01600034 	movhi	r5,32768
8110329c:	29426004 	addi	r5,r5,2432
811032a0:	01200034 	movhi	r4,32768
811032a4:	21026404 	addi	r4,r4,2448
811032a8:	1105ac00 	call	81105ac0 <I2C_Read>
811032ac:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
811032b0:	e0bffc17 	ldw	r2,-16(fp)
811032b4:	10000226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
			FpgaTemp = Data;
811032b8:	e0bffdc3 	ldbu	r2,-9(fp)
811032bc:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
811032c0:	e0bffc17 	ldw	r2,-16(fp)
811032c4:	10000626 	beq	r2,zero,811032e0 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
811032c8:	e0bffe17 	ldw	r2,-8(fp)
811032cc:	e0fffd03 	ldbu	r3,-12(fp)
811032d0:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
811032d4:	e0bfff17 	ldw	r2,-4(fp)
811032d8:	e0fffd43 	ldbu	r3,-11(fp)
811032dc:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
811032e0:	e0bffc17 	ldw	r2,-16(fp)
}
811032e4:	e037883a 	mov	sp,fp
811032e8:	dfc00117 	ldw	ra,4(sp)
811032ec:	df000017 	ldw	fp,0(sp)
811032f0:	dec00204 	addi	sp,sp,8
811032f4:	f800283a 	ret

811032f8 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
811032f8:	defffb04 	addi	sp,sp,-20
811032fc:	de00012e 	bgeu	sp,et,81103304 <sense_log_temp+0xc>
81103300:	003b68fa 	trap	3
81103304:	dfc00415 	stw	ra,16(sp)
81103308:	df000315 	stw	fp,12(sp)
8110330c:	df000304 	addi	fp,sp,12
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103318:	e17fff17 	ldw	r5,-4(fp)
8110331c:	e13ffe17 	ldw	r4,-8(fp)
81103320:	11032000 	call	81103200 <TEMP_Read>
81103324:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103328:	e0bffd17 	ldw	r2,-12(fp)
}
8110332c:	e037883a 	mov	sp,fp
81103330:	dfc00117 	ldw	ra,4(sp)
81103334:	df000017 	ldw	fp,0(sp)
81103338:	dec00204 	addi	sp,sp,8
8110333c:	f800283a 	ret

81103340 <sense_log>:

void sense_log(void) {
81103340:	deff0404 	addi	sp,sp,-1008
81103344:	de00012e 	bgeu	sp,et,8110334c <sense_log+0xc>
81103348:	003b68fa 	trap	3
8110334c:	dfc0fb15 	stw	ra,1004(sp)
81103350:	df00fa15 	stw	fp,1000(sp)
81103354:	dd40f915 	stw	r21,996(sp)
81103358:	dd00f815 	stw	r20,992(sp)
8110335c:	dcc0f715 	stw	r19,988(sp)
81103360:	dc80f615 	stw	r18,984(sp)
81103364:	dc40f515 	stw	r17,980(sp)
81103368:	dc00f415 	stw	r16,976(sp)
8110336c:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81103370:	00902834 	movhi	r2,16544
81103374:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81103378:	008ed174 	movhi	r2,15173
8110337c:	10a6e984 	addi	r2,r2,-25690
81103380:	e0bf2215 	stw	r2,-888(fp)
81103384:	008ea0f4 	movhi	r2,14979
81103388:	10849bc4 	addi	r2,r2,4719
8110338c:	e0bf2315 	stw	r2,-884(fp)
81103390:	008ed174 	movhi	r2,15173
81103394:	10a6e984 	addi	r2,r2,-25690
81103398:	e0bf2415 	stw	r2,-880(fp)
8110339c:	008ed174 	movhi	r2,15173
811033a0:	10a6e984 	addi	r2,r2,-25690
811033a4:	e0bf2515 	stw	r2,-876(fp)
811033a8:	008ed174 	movhi	r2,15173
811033ac:	10a6e984 	addi	r2,r2,-25690
811033b0:	e0bf2615 	stw	r2,-872(fp)
811033b4:	008ed174 	movhi	r2,15173
811033b8:	10a6e984 	addi	r2,r2,-25690
811033bc:	e0bf2715 	stw	r2,-868(fp)
811033c0:	008ed174 	movhi	r2,15173
811033c4:	10a6e984 	addi	r2,r2,-25690
811033c8:	e0bf2815 	stw	r2,-864(fp)
811033cc:	008ed174 	movhi	r2,15173
811033d0:	10a6e984 	addi	r2,r2,-25690
811033d4:	e0bf2915 	stw	r2,-860(fp)
811033d8:	008ed174 	movhi	r2,15173
811033dc:	10a6e984 	addi	r2,r2,-25690
811033e0:	e0bf2a15 	stw	r2,-856(fp)
811033e4:	008ed174 	movhi	r2,15173
811033e8:	10a6e984 	addi	r2,r2,-25690
811033ec:	e0bf2b15 	stw	r2,-852(fp)
811033f0:	008ed174 	movhi	r2,15173
811033f4:	10a6e984 	addi	r2,r2,-25690
811033f8:	e0bf2c15 	stw	r2,-848(fp)
811033fc:	008ed174 	movhi	r2,15173
81103400:	10a6e984 	addi	r2,r2,-25690
81103404:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103408:	008fd9b4 	movhi	r2,16230
8110340c:	10999984 	addi	r2,r2,26214
81103410:	e0bf2e15 	stw	r2,-840(fp)
81103414:	008fd9b4 	movhi	r2,16230
81103418:	10999984 	addi	r2,r2,26214
8110341c:	e0bf2f15 	stw	r2,-836(fp)
81103420:	00901034 	movhi	r2,16448
81103424:	e0bf3015 	stw	r2,-832(fp)
81103428:	008fd9b4 	movhi	r2,16230
8110342c:	10999984 	addi	r2,r2,26214
81103430:	e0bf3115 	stw	r2,-828(fp)
81103434:	008ff9b4 	movhi	r2,16358
81103438:	10999984 	addi	r2,r2,26214
8110343c:	e0bf3215 	stw	r2,-824(fp)
81103440:	00900834 	movhi	r2,16416
81103444:	e0bf3315 	stw	r2,-820(fp)
81103448:	008ff9b4 	movhi	r2,16358
8110344c:	10999984 	addi	r2,r2,26214
81103450:	e0bf3415 	stw	r2,-816(fp)
81103454:	00900834 	movhi	r2,16416
81103458:	e0bf3515 	stw	r2,-812(fp)
8110345c:	008fe374 	movhi	r2,16269
81103460:	10b33344 	addi	r2,r2,-13107
81103464:	e0bf3615 	stw	r2,-808(fp)
81103468:	008fecf4 	movhi	r2,16307
8110346c:	108cccc4 	addi	r2,r2,13107
81103470:	e0bf3715 	stw	r2,-804(fp)
81103474:	009014f4 	movhi	r2,16467
81103478:	108cccc4 	addi	r2,r2,13107
8110347c:	e0bf3815 	stw	r2,-800(fp)
81103480:	00900834 	movhi	r2,16416
81103484:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81103488:	00a04534 	movhi	r2,33044
8110348c:	10b18204 	addi	r2,r2,-14840
81103490:	e0ff3a04 	addi	r3,fp,-792
81103494:	1009883a 	mov	r4,r2
81103498:	0080c004 	movi	r2,768
8110349c:	100d883a 	mov	r6,r2
811034a0:	200b883a 	mov	r5,r4
811034a4:	1809883a 	mov	r4,r3
811034a8:	1112b340 	call	81112b34 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
811034ac:	e0bf1604 	addi	r2,fp,-936
811034b0:	1009883a 	mov	r4,r2
811034b4:	1102f380 	call	81102f38 <POWER_Read>
811034b8:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
811034bc:	e0bf0f17 	ldw	r2,-964(fp)
811034c0:	10016026 	beq	r2,zero,81103a44 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811034c4:	e03f0c15 	stw	zero,-976(fp)
811034c8:	00014c06 	br	811039fc <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
811034cc:	e0bf0c17 	ldw	r2,-976(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	1085883a 	add	r2,r2,r2
811034d8:	e0ff0c04 	addi	r3,fp,-976
811034dc:	1885883a 	add	r2,r3,r2
811034e0:	10800a04 	addi	r2,r2,40
811034e4:	10800017 	ldw	r2,0(r2)
811034e8:	1004d77a 	srli	r2,r2,29
811034ec:	1080004c 	andi	r2,r2,1
811034f0:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
811034f4:	e0bf0c17 	ldw	r2,-976(fp)
811034f8:	1085883a 	add	r2,r2,r2
811034fc:	1085883a 	add	r2,r2,r2
81103500:	e0ff0c04 	addi	r3,fp,-976
81103504:	1885883a 	add	r2,r3,r2
81103508:	10800a04 	addi	r2,r2,40
8110350c:	10800017 	ldw	r2,0(r2)
81103510:	1004d73a 	srli	r2,r2,28
81103514:	1080004c 	andi	r2,r2,1
81103518:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110351c:	e0bf0c17 	ldw	r2,-976(fp)
81103520:	1085883a 	add	r2,r2,r2
81103524:	1085883a 	add	r2,r2,r2
81103528:	e0ff0c04 	addi	r3,fp,-976
8110352c:	1885883a 	add	r2,r3,r2
81103530:	10800a04 	addi	r2,r2,40
81103534:	10800017 	ldw	r2,0(r2)
81103538:	1006d1ba 	srli	r3,r2,6
8110353c:	00801034 	movhi	r2,64
81103540:	10bfffc4 	addi	r2,r2,-1
81103544:	1884703a 	and	r2,r3,r2
81103548:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
8110354c:	e0bf1117 	ldw	r2,-956(fp)
81103550:	1000091e 	bne	r2,zero,81103578 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81103554:	e13f1217 	ldw	r4,-952(fp)
81103558:	1110e9c0 	call	81110e9c <__floatunsisf>
8110355c:	1007883a 	mov	r3,r2
81103560:	0152a034 	movhi	r5,19072
81103564:	1809883a 	mov	r4,r3
81103568:	11105240 	call	81110524 <__divsf3>
8110356c:	1007883a 	mov	r3,r2
81103570:	e0ff0d15 	stw	r3,-972(fp)
81103574:	00000106 	br	8110357c <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103578:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
8110357c:	e0bf1017 	ldw	r2,-960(fp)
81103580:	10002626 	beq	r2,zero,8110361c <sense_log+0x2dc>
81103584:	e0bf1117 	ldw	r2,-956(fp)
81103588:	10002426 	beq	r2,zero,8110361c <sense_log+0x2dc>
				fVol = fRef * 0.5;
8110358c:	014fc034 	movhi	r5,16128
81103590:	e13f0e17 	ldw	r4,-968(fp)
81103594:	111096c0 	call	8111096c <__mulsf3>
81103598:	1007883a 	mov	r3,r2
8110359c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811035a0:	e0ff3a04 	addi	r3,fp,-792
811035a4:	e0bf0c17 	ldw	r2,-976(fp)
811035a8:	100491ba 	slli	r2,r2,6
811035ac:	18a1883a 	add	r16,r3,r2
811035b0:	e0bf0c17 	ldw	r2,-976(fp)
811035b4:	1085883a 	add	r2,r2,r2
811035b8:	1085883a 	add	r2,r2,r2
811035bc:	e0ff0c04 	addi	r3,fp,-976
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	10800a04 	addi	r2,r2,40
811035c8:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
811035cc:	1023883a 	mov	r17,r2
811035d0:	e13f1317 	ldw	r4,-948(fp)
811035d4:	11116b40 	call	811116b4 <__extendsfdf2>
811035d8:	1009883a 	mov	r4,r2
811035dc:	180b883a 	mov	r5,r3
811035e0:	d9000015 	stw	r4,0(sp)
811035e4:	d9400115 	stw	r5,4(sp)
811035e8:	880f883a 	mov	r7,r17
811035ec:	800d883a 	mov	r6,r16
811035f0:	01604534 	movhi	r5,33044
811035f4:	29715004 	addi	r5,r5,-15040
811035f8:	01204534 	movhi	r4,33044
811035fc:	21039104 	addi	r4,r4,3652
81103600:	111329c0 	call	8111329c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103604:	d0a04e17 	ldw	r2,-32456(gp)
81103608:	01604534 	movhi	r5,33044
8110360c:	29439104 	addi	r5,r5,3652
81103610:	1009883a 	mov	r4,r2
81103614:	1111b340 	call	81111b34 <fprintf>
81103618:	0000f506 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110361c:	e0bf1017 	ldw	r2,-960(fp)
81103620:	10006426 	beq	r2,zero,811037b4 <sense_log+0x474>
81103624:	e0bf1117 	ldw	r2,-956(fp)
81103628:	1000621e 	bne	r2,zero,811037b4 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110362c:	e13f0e17 	ldw	r4,-968(fp)
81103630:	11116b40 	call	811116b4 <__extendsfdf2>
81103634:	1011883a 	mov	r8,r2
81103638:	1813883a 	mov	r9,r3
8110363c:	000d883a 	mov	r6,zero
81103640:	01cff834 	movhi	r7,16352
81103644:	4009883a 	mov	r4,r8
81103648:	480b883a 	mov	r5,r9
8110364c:	1110f940 	call	81110f94 <__muldf3>
81103650:	1009883a 	mov	r4,r2
81103654:	180b883a 	mov	r5,r3
81103658:	2021883a 	mov	r16,r4
8110365c:	2823883a 	mov	r17,r5
81103660:	e13f0d17 	ldw	r4,-972(fp)
81103664:	11116b40 	call	811116b4 <__extendsfdf2>
81103668:	1009883a 	mov	r4,r2
8110366c:	180b883a 	mov	r5,r3
81103670:	200d883a 	mov	r6,r4
81103674:	280f883a 	mov	r7,r5
81103678:	8009883a 	mov	r4,r16
8110367c:	880b883a 	mov	r5,r17
81103680:	1110f940 	call	81110f94 <__muldf3>
81103684:	1009883a 	mov	r4,r2
81103688:	180b883a 	mov	r5,r3
8110368c:	2005883a 	mov	r2,r4
81103690:	2807883a 	mov	r3,r5
81103694:	1009883a 	mov	r4,r2
81103698:	180b883a 	mov	r5,r3
8110369c:	11117cc0 	call	811117cc <__truncdfsf2>
811036a0:	1007883a 	mov	r3,r2
811036a4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811036a8:	e0bf0c17 	ldw	r2,-976(fp)
811036ac:	1085883a 	add	r2,r2,r2
811036b0:	1085883a 	add	r2,r2,r2
811036b4:	e0ff0c04 	addi	r3,fp,-976
811036b8:	1885883a 	add	r2,r3,r2
811036bc:	10801604 	addi	r2,r2,88
811036c0:	10c00017 	ldw	r3,0(r2)
811036c4:	180b883a 	mov	r5,r3
811036c8:	e13f0d17 	ldw	r4,-972(fp)
811036cc:	11105240 	call	81110524 <__divsf3>
811036d0:	1007883a 	mov	r3,r2
811036d4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811036d8:	e0bf0c17 	ldw	r2,-976(fp)
811036dc:	1085883a 	add	r2,r2,r2
811036e0:	1085883a 	add	r2,r2,r2
811036e4:	e0ff0c04 	addi	r3,fp,-976
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10802204 	addi	r2,r2,136
811036f0:	10c00017 	ldw	r3,0(r2)
811036f4:	e17f1417 	ldw	r5,-944(fp)
811036f8:	1809883a 	mov	r4,r3
811036fc:	111096c0 	call	8111096c <__mulsf3>
81103700:	1007883a 	mov	r3,r2
81103704:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103708:	e0ff3a04 	addi	r3,fp,-792
8110370c:	e0bf0c17 	ldw	r2,-976(fp)
81103710:	100491ba 	slli	r2,r2,6
81103714:	18a9883a 	add	r20,r3,r2
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10800a04 	addi	r2,r2,40
81103730:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103734:	102b883a 	mov	r21,r2
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	11116b40 	call	811116b4 <__extendsfdf2>
81103740:	1021883a 	mov	r16,r2
81103744:	1823883a 	mov	r17,r3
81103748:	e13f1417 	ldw	r4,-944(fp)
8110374c:	11116b40 	call	811116b4 <__extendsfdf2>
81103750:	1025883a 	mov	r18,r2
81103754:	1827883a 	mov	r19,r3
81103758:	e13f1517 	ldw	r4,-940(fp)
8110375c:	11116b40 	call	811116b4 <__extendsfdf2>
81103760:	1009883a 	mov	r4,r2
81103764:	180b883a 	mov	r5,r3
81103768:	d9000415 	stw	r4,16(sp)
8110376c:	d9400515 	stw	r5,20(sp)
81103770:	dc800215 	stw	r18,8(sp)
81103774:	dcc00315 	stw	r19,12(sp)
81103778:	dc000015 	stw	r16,0(sp)
8110377c:	dc400115 	stw	r17,4(sp)
81103780:	a80f883a 	mov	r7,r21
81103784:	a00d883a 	mov	r6,r20
81103788:	01604534 	movhi	r5,33044
8110378c:	29715904 	addi	r5,r5,-15004
81103790:	01204534 	movhi	r4,33044
81103794:	21039104 	addi	r4,r4,3652
81103798:	111329c0 	call	8111329c <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110379c:	d0a04e17 	ldw	r2,-32456(gp)
811037a0:	01604534 	movhi	r5,33044
811037a4:	29439104 	addi	r5,r5,3652
811037a8:	1009883a 	mov	r4,r2
811037ac:	1111b340 	call	81111b34 <fprintf>
811037b0:	00008f06 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
811037b4:	e0bf1017 	ldw	r2,-960(fp)
811037b8:	1000641e 	bne	r2,zero,8110394c <sense_log+0x60c>
811037bc:	e0bf1117 	ldw	r2,-956(fp)
811037c0:	10006226 	beq	r2,zero,8110394c <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
811037c4:	e13f0e17 	ldw	r4,-968(fp)
811037c8:	11116b40 	call	811116b4 <__extendsfdf2>
811037cc:	1011883a 	mov	r8,r2
811037d0:	1813883a 	mov	r9,r3
811037d4:	000d883a 	mov	r6,zero
811037d8:	01cff834 	movhi	r7,16352
811037dc:	4009883a 	mov	r4,r8
811037e0:	480b883a 	mov	r5,r9
811037e4:	1110f940 	call	81110f94 <__muldf3>
811037e8:	1009883a 	mov	r4,r2
811037ec:	180b883a 	mov	r5,r3
811037f0:	2021883a 	mov	r16,r4
811037f4:	2823883a 	mov	r17,r5
811037f8:	e13f0d17 	ldw	r4,-972(fp)
811037fc:	11116b40 	call	811116b4 <__extendsfdf2>
81103800:	1009883a 	mov	r4,r2
81103804:	180b883a 	mov	r5,r3
81103808:	200d883a 	mov	r6,r4
8110380c:	280f883a 	mov	r7,r5
81103810:	8009883a 	mov	r4,r16
81103814:	880b883a 	mov	r5,r17
81103818:	1110f940 	call	81110f94 <__muldf3>
8110381c:	1009883a 	mov	r4,r2
81103820:	180b883a 	mov	r5,r3
81103824:	2005883a 	mov	r2,r4
81103828:	2807883a 	mov	r3,r5
8110382c:	1009883a 	mov	r4,r2
81103830:	180b883a 	mov	r5,r3
81103834:	11117cc0 	call	811117cc <__truncdfsf2>
81103838:	1007883a 	mov	r3,r2
8110383c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103840:	e0bf0c17 	ldw	r2,-976(fp)
81103844:	1085883a 	add	r2,r2,r2
81103848:	1085883a 	add	r2,r2,r2
8110384c:	e0ff0c04 	addi	r3,fp,-976
81103850:	1885883a 	add	r2,r3,r2
81103854:	10801604 	addi	r2,r2,88
81103858:	10c00017 	ldw	r3,0(r2)
8110385c:	180b883a 	mov	r5,r3
81103860:	e13f0d17 	ldw	r4,-972(fp)
81103864:	11105240 	call	81110524 <__divsf3>
81103868:	1007883a 	mov	r3,r2
8110386c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103870:	e0bf0c17 	ldw	r2,-976(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	e0ff0c04 	addi	r3,fp,-976
81103880:	1885883a 	add	r2,r3,r2
81103884:	10802204 	addi	r2,r2,136
81103888:	10c00017 	ldw	r3,0(r2)
8110388c:	e17f1417 	ldw	r5,-944(fp)
81103890:	1809883a 	mov	r4,r3
81103894:	111096c0 	call	8111096c <__mulsf3>
81103898:	1007883a 	mov	r3,r2
8110389c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
811038a0:	e0ff3a04 	addi	r3,fp,-792
811038a4:	e0bf0c17 	ldw	r2,-976(fp)
811038a8:	100491ba 	slli	r2,r2,6
811038ac:	18a9883a 	add	r20,r3,r2
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10800a04 	addi	r2,r2,40
811038c8:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811038cc:	102b883a 	mov	r21,r2
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	11116b40 	call	811116b4 <__extendsfdf2>
811038d8:	1021883a 	mov	r16,r2
811038dc:	1823883a 	mov	r17,r3
811038e0:	e13f1417 	ldw	r4,-944(fp)
811038e4:	11116b40 	call	811116b4 <__extendsfdf2>
811038e8:	1025883a 	mov	r18,r2
811038ec:	1827883a 	mov	r19,r3
811038f0:	e13f1517 	ldw	r4,-940(fp)
811038f4:	11116b40 	call	811116b4 <__extendsfdf2>
811038f8:	1009883a 	mov	r4,r2
811038fc:	180b883a 	mov	r5,r3
81103900:	d9000415 	stw	r4,16(sp)
81103904:	d9400515 	stw	r5,20(sp)
81103908:	dc800215 	stw	r18,8(sp)
8110390c:	dcc00315 	stw	r19,12(sp)
81103910:	dc000015 	stw	r16,0(sp)
81103914:	dc400115 	stw	r17,4(sp)
81103918:	a80f883a 	mov	r7,r21
8110391c:	a00d883a 	mov	r6,r20
81103920:	01604534 	movhi	r5,33044
81103924:	29716904 	addi	r5,r5,-14940
81103928:	01204534 	movhi	r4,33044
8110392c:	21039104 	addi	r4,r4,3652
81103930:	111329c0 	call	8111329c <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103934:	d0a04e17 	ldw	r2,-32456(gp)
81103938:	01604534 	movhi	r5,33044
8110393c:	29439104 	addi	r5,r5,3652
81103940:	1009883a 	mov	r4,r2
81103944:	1111b340 	call	81111b34 <fprintf>
81103948:	00002906 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
8110394c:	e0bf1017 	ldw	r2,-960(fp)
81103950:	1000271e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
81103954:	e0bf1117 	ldw	r2,-956(fp)
81103958:	1000251e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
8110395c:	e0bf0e17 	ldw	r2,-968(fp)
81103960:	10a0003c 	xorhi	r2,r2,32768
81103964:	014fc034 	movhi	r5,16128
81103968:	1009883a 	mov	r4,r2
8110396c:	111096c0 	call	8111096c <__mulsf3>
81103970:	1007883a 	mov	r3,r2
81103974:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103978:	e0ff3a04 	addi	r3,fp,-792
8110397c:	e0bf0c17 	ldw	r2,-976(fp)
81103980:	100491ba 	slli	r2,r2,6
81103984:	18a1883a 	add	r16,r3,r2
81103988:	e0bf0c17 	ldw	r2,-976(fp)
8110398c:	1085883a 	add	r2,r2,r2
81103990:	1085883a 	add	r2,r2,r2
81103994:	e0ff0c04 	addi	r3,fp,-976
81103998:	1885883a 	add	r2,r3,r2
8110399c:	10800a04 	addi	r2,r2,40
811039a0:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
811039a4:	1023883a 	mov	r17,r2
811039a8:	e13f1317 	ldw	r4,-948(fp)
811039ac:	11116b40 	call	811116b4 <__extendsfdf2>
811039b0:	1009883a 	mov	r4,r2
811039b4:	180b883a 	mov	r5,r3
811039b8:	d9000015 	stw	r4,0(sp)
811039bc:	d9400115 	stw	r5,4(sp)
811039c0:	880f883a 	mov	r7,r17
811039c4:	800d883a 	mov	r6,r16
811039c8:	01604534 	movhi	r5,33044
811039cc:	29717904 	addi	r5,r5,-14876
811039d0:	01204534 	movhi	r4,33044
811039d4:	21039104 	addi	r4,r4,3652
811039d8:	111329c0 	call	8111329c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
811039dc:	d0a04e17 	ldw	r2,-32456(gp)
811039e0:	01604534 	movhi	r5,33044
811039e4:	29439104 	addi	r5,r5,3652
811039e8:	1009883a 	mov	r4,r2
811039ec:	1111b340 	call	81111b34 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811039f0:	e0bf0c17 	ldw	r2,-976(fp)
811039f4:	10800044 	addi	r2,r2,1
811039f8:	e0bf0c15 	stw	r2,-976(fp)
811039fc:	e0bf0c17 	ldw	r2,-976(fp)
81103a00:	10800308 	cmpgei	r2,r2,12
81103a04:	1000021e 	bne	r2,zero,81103a10 <sense_log+0x6d0>
81103a08:	e0bf0f17 	ldw	r2,-964(fp)
81103a0c:	103eaf1e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a10:	00a04534 	movhi	r2,33044
81103a14:	10839104 	addi	r2,r2,3652
81103a18:	00c00344 	movi	r3,13
81103a1c:	10c00005 	stb	r3,0(r2)
81103a20:	00c00284 	movi	r3,10
81103a24:	10c00045 	stb	r3,1(r2)
81103a28:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a2c:	d0a04e17 	ldw	r2,-32456(gp)
81103a30:	01604534 	movhi	r5,33044
81103a34:	29439104 	addi	r5,r5,3652
81103a38:	1009883a 	mov	r4,r2
81103a3c:	1111b340 	call	81111b34 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103a40:	00001606 	br	81103a9c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103a44:	00a04534 	movhi	r2,33044
81103a48:	10839104 	addi	r2,r2,3652
81103a4c:	00c01144 	movi	r3,69
81103a50:	10c00005 	stb	r3,0(r2)
81103a54:	00c01c84 	movi	r3,114
81103a58:	10c00045 	stb	r3,1(r2)
81103a5c:	00c01c84 	movi	r3,114
81103a60:	10c00085 	stb	r3,2(r2)
81103a64:	00c01bc4 	movi	r3,111
81103a68:	10c000c5 	stb	r3,3(r2)
81103a6c:	00c01c84 	movi	r3,114
81103a70:	10c00105 	stb	r3,4(r2)
81103a74:	00c00344 	movi	r3,13
81103a78:	10c00145 	stb	r3,5(r2)
81103a7c:	00c00284 	movi	r3,10
81103a80:	10c00185 	stb	r3,6(r2)
81103a84:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103a88:	d0a04e17 	ldw	r2,-32456(gp)
81103a8c:	01604534 	movhi	r5,33044
81103a90:	29439104 	addi	r5,r5,3652
81103a94:	1009883a 	mov	r4,r2
81103a98:	1111b340 	call	81111b34 <fprintf>
#endif
	}
}
81103a9c:	0001883a 	nop
81103aa0:	e6fffa04 	addi	sp,fp,-24
81103aa4:	dfc00717 	ldw	ra,28(sp)
81103aa8:	df000617 	ldw	fp,24(sp)
81103aac:	dd400517 	ldw	r21,20(sp)
81103ab0:	dd000417 	ldw	r20,16(sp)
81103ab4:	dcc00317 	ldw	r19,12(sp)
81103ab8:	dc800217 	ldw	r18,8(sp)
81103abc:	dc400117 	ldw	r17,4(sp)
81103ac0:	dc000017 	ldw	r16,0(sp)
81103ac4:	dec00804 	addi	sp,sp,32
81103ac8:	f800283a 	ret

81103acc <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103acc:	defffc04 	addi	sp,sp,-16
81103ad0:	de00012e 	bgeu	sp,et,81103ad8 <bSdmaInitM1Dma+0xc>
81103ad4:	003b68fa 	trap	3
81103ad8:	dfc00315 	stw	ra,12(sp)
81103adc:	df000215 	stw	fp,8(sp)
81103ae0:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103ae4:	00800044 	movi	r2,1
81103ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103aec:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103af0:	01204534 	movhi	r4,33044
81103af4:	21324204 	addi	r4,r4,-14072
81103af8:	113a0780 	call	8113a078 <alt_msgdma_open>
81103afc:	d0a03815 	stw	r2,-32544(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b00:	d0a03817 	ldw	r2,-32544(gp)
81103b04:	1000021e 	bne	r2,zero,81103b10 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b08:	e03ffe15 	stw	zero,-8(fp)
81103b0c:	00001506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b10:	d0a03817 	ldw	r2,-32544(gp)
81103b14:	10800317 	ldw	r2,12(r2)
81103b18:	10800104 	addi	r2,r2,4
81103b1c:	00c00084 	movi	r3,2
81103b20:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b24:	00000a06 	br	81103b50 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b28:	01000044 	movi	r4,1
81103b2c:	1127ffc0 	call	81127ffc <usleep>
			usiCounter++;
81103b30:	e0bfff0b 	ldhu	r2,-4(fp)
81103b34:	10800044 	addi	r2,r2,1
81103b38:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103b3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103b40:	1084e230 	cmpltui	r2,r2,5000
81103b44:	1000021e 	bne	r2,zero,81103b50 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103b48:	e03ffe15 	stw	zero,-8(fp)
				break;
81103b4c:	00000506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b50:	d0a03817 	ldw	r2,-32544(gp)
81103b54:	10800317 	ldw	r2,12(r2)
81103b58:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103b5c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b60:	103ff11e 	bne	r2,zero,81103b28 <__reset+0xfb0e3b28>
				break;
			}
		}
	}

	return bStatus;
81103b64:	e0bffe17 	ldw	r2,-8(fp)
}
81103b68:	e037883a 	mov	sp,fp
81103b6c:	dfc00117 	ldw	ra,4(sp)
81103b70:	df000017 	ldw	fp,0(sp)
81103b74:	dec00204 	addi	sp,sp,8
81103b78:	f800283a 	ret

81103b7c <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103b7c:	defffc04 	addi	sp,sp,-16
81103b80:	de00012e 	bgeu	sp,et,81103b88 <bSdmaInitM2Dma+0xc>
81103b84:	003b68fa 	trap	3
81103b88:	dfc00315 	stw	ra,12(sp)
81103b8c:	df000215 	stw	fp,8(sp)
81103b90:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b94:	00800044 	movi	r2,1
81103b98:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b9c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103ba0:	01204534 	movhi	r4,33044
81103ba4:	21324704 	addi	r4,r4,-14052
81103ba8:	113a0780 	call	8113a078 <alt_msgdma_open>
81103bac:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103bb0:	d0a03917 	ldw	r2,-32540(gp)
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
81103bbc:	00001506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800104 	addi	r2,r2,4
81103bcc:	00c00084 	movi	r3,2
81103bd0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103bd4:	00000a06 	br	81103c00 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103bd8:	01000044 	movi	r4,1
81103bdc:	1127ffc0 	call	81127ffc <usleep>
			usiCounter++;
81103be0:	e0bfff0b 	ldhu	r2,-4(fp)
81103be4:	10800044 	addi	r2,r2,1
81103be8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bec:	e0bfff0b 	ldhu	r2,-4(fp)
81103bf0:	1084e230 	cmpltui	r2,r2,5000
81103bf4:	1000021e 	bne	r2,zero,81103c00 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103bf8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bfc:	00000506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c00:	d0a03917 	ldw	r2,-32540(gp)
81103c04:	10800317 	ldw	r2,12(r2)
81103c08:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c0c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c10:	103ff11e 	bne	r2,zero,81103bd8 <__reset+0xfb0e3bd8>
				break;
			}
		}
	}

	return bStatus;
81103c14:	e0bffe17 	ldw	r2,-8(fp)
}
81103c18:	e037883a 	mov	sp,fp
81103c1c:	dfc00117 	ldw	ra,4(sp)
81103c20:	df000017 	ldw	fp,0(sp)
81103c24:	dec00204 	addi	sp,sp,8
81103c28:	f800283a 	ret

81103c2c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c2c:	deffe904 	addi	sp,sp,-92
81103c30:	de00012e 	bgeu	sp,et,81103c38 <bSdmaDmaM1Transfer+0xc>
81103c34:	003b68fa 	trap	3
81103c38:	dfc01615 	stw	ra,88(sp)
81103c3c:	df001515 	stw	fp,84(sp)
81103c40:	dc001415 	stw	r16,80(sp)
81103c44:	df001504 	addi	fp,sp,84
81103c48:	e13ffb15 	stw	r4,-20(fp)
81103c4c:	2809883a 	mov	r4,r5
81103c50:	3007883a 	mov	r3,r6
81103c54:	3805883a 	mov	r2,r7
81103c58:	e13ffc0d 	sth	r4,-16(fp)
81103c5c:	e0fffd05 	stb	r3,-12(fp)
81103c60:	e0bffe05 	stb	r2,-8(fp)
81103c64:	defff004 	addi	sp,sp,-64
81103c68:	d8800904 	addi	r2,sp,36
81103c6c:	108007c4 	addi	r2,r2,31
81103c70:	1004d17a 	srli	r2,r2,5
81103c74:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103c80:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103c84:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103c88:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103c8c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103c90:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103c94:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103c98:	e0bffe03 	ldbu	r2,-8(fp)
81103c9c:	10c00268 	cmpgeui	r3,r2,9
81103ca0:	1800a51e 	bne	r3,zero,81103f38 <bSdmaDmaM1Transfer+0x30c>
81103ca4:	100690ba 	slli	r3,r2,2
81103ca8:	00a04434 	movhi	r2,33040
81103cac:	108f2f04 	addi	r2,r2,15548
81103cb0:	1885883a 	add	r2,r3,r2
81103cb4:	10800017 	ldw	r2,0(r2)
81103cb8:	1000683a 	jmp	r2
81103cbc:	81103f38 	rdprs	r4,r16,16636
81103cc0:	81103ce0 	cmpeqi	r4,r16,16627
81103cc4:	81103d24 	muli	r4,r16,16628
81103cc8:	81103d70 	cmpltui	r4,r16,16629
81103ccc:	81103dbc 	xorhi	r4,r16,16630
81103cd0:	81103e08 	cmpgei	r4,r16,16632
81103cd4:	81103e54 	ori	r4,r16,16633
81103cd8:	81103ea0 	cmpeqi	r4,r16,16634
81103cdc:	81103eec 	andhi	r4,r16,16635
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ce0:	e0bffd03 	ldbu	r2,-12(fp)
81103ce4:	10000326 	beq	r2,zero,81103cf4 <bSdmaDmaM1Transfer+0xc8>
81103ce8:	10800060 	cmpeqi	r2,r2,1
81103cec:	1000051e 	bne	r2,zero,81103d04 <bSdmaDmaM1Transfer+0xd8>
81103cf0:	00000906 	br	81103d18 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103cf4:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103cf8:	00800044 	movi	r2,1
81103cfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103d00:	00000706 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d04:	00800074 	movhi	r2,1
81103d08:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d0c:	00800044 	movi	r2,1
81103d10:	e0bff715 	stw	r2,-36(fp)
			break;
81103d14:	00000206 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d18:	e03ff415 	stw	zero,-48(fp)
			break;
81103d1c:	0001883a 	nop
		}
		break;
81103d20:	00008706 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d24:	e0bffd03 	ldbu	r2,-12(fp)
81103d28:	10000326 	beq	r2,zero,81103d38 <bSdmaDmaM1Transfer+0x10c>
81103d2c:	10800060 	cmpeqi	r2,r2,1
81103d30:	1000061e 	bne	r2,zero,81103d4c <bSdmaDmaM1Transfer+0x120>
81103d34:	00000b06 	br	81103d64 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103d38:	00880004 	movi	r2,8192
81103d3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103d40:	00800044 	movi	r2,1
81103d44:	e0bff715 	stw	r2,-36(fp)
			break;
81103d48:	00000806 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103d4c:	00800074 	movhi	r2,1
81103d50:	10880004 	addi	r2,r2,8192
81103d54:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103d58:	00800044 	movi	r2,1
81103d5c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d60:	00000206 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103d64:	e03ff415 	stw	zero,-48(fp)
			break;
81103d68:	0001883a 	nop
		}
		break;
81103d6c:	00007406 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103d70:	e0bffd03 	ldbu	r2,-12(fp)
81103d74:	10000326 	beq	r2,zero,81103d84 <bSdmaDmaM1Transfer+0x158>
81103d78:	10800060 	cmpeqi	r2,r2,1
81103d7c:	1000061e 	bne	r2,zero,81103d98 <bSdmaDmaM1Transfer+0x16c>
81103d80:	00000b06 	br	81103db0 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103d84:	00900004 	movi	r2,16384
81103d88:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103d8c:	00800044 	movi	r2,1
81103d90:	e0bff715 	stw	r2,-36(fp)
			break;
81103d94:	00000806 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103d98:	00800074 	movhi	r2,1
81103d9c:	10900004 	addi	r2,r2,16384
81103da0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103da4:	00800044 	movi	r2,1
81103da8:	e0bff715 	stw	r2,-36(fp)
			break;
81103dac:	00000206 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
			break;
81103db4:	0001883a 	nop
		}
		break;
81103db8:	00006106 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103dbc:	e0bffd03 	ldbu	r2,-12(fp)
81103dc0:	10000326 	beq	r2,zero,81103dd0 <bSdmaDmaM1Transfer+0x1a4>
81103dc4:	10800060 	cmpeqi	r2,r2,1
81103dc8:	1000061e 	bne	r2,zero,81103de4 <bSdmaDmaM1Transfer+0x1b8>
81103dcc:	00000b06 	br	81103dfc <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103dd0:	00980004 	movi	r2,24576
81103dd4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103dd8:	00800044 	movi	r2,1
81103ddc:	e0bff715 	stw	r2,-36(fp)
			break;
81103de0:	00000806 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103de4:	00800074 	movhi	r2,1
81103de8:	10980004 	addi	r2,r2,24576
81103dec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103df0:	00800044 	movi	r2,1
81103df4:	e0bff715 	stw	r2,-36(fp)
			break;
81103df8:	00000206 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103dfc:	e03ff415 	stw	zero,-48(fp)
			break;
81103e00:	0001883a 	nop
		}
		break;
81103e04:	00004e06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e08:	e0bffd03 	ldbu	r2,-12(fp)
81103e0c:	10000326 	beq	r2,zero,81103e1c <bSdmaDmaM1Transfer+0x1f0>
81103e10:	10800060 	cmpeqi	r2,r2,1
81103e14:	1000061e 	bne	r2,zero,81103e30 <bSdmaDmaM1Transfer+0x204>
81103e18:	00000b06 	br	81103e48 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e1c:	00a00014 	movui	r2,32768
81103e20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e24:	00800044 	movi	r2,1
81103e28:	e0bff715 	stw	r2,-36(fp)
			break;
81103e2c:	00000806 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103e30:	008000b4 	movhi	r2,2
81103e34:	10a00004 	addi	r2,r2,-32768
81103e38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103e3c:	00800044 	movi	r2,1
81103e40:	e0bff715 	stw	r2,-36(fp)
			break;
81103e44:	00000206 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103e48:	e03ff415 	stw	zero,-48(fp)
			break;
81103e4c:	0001883a 	nop
		}
		break;
81103e50:	00003b06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103e54:	e0bffd03 	ldbu	r2,-12(fp)
81103e58:	10000326 	beq	r2,zero,81103e68 <bSdmaDmaM1Transfer+0x23c>
81103e5c:	10800060 	cmpeqi	r2,r2,1
81103e60:	1000061e 	bne	r2,zero,81103e7c <bSdmaDmaM1Transfer+0x250>
81103e64:	00000b06 	br	81103e94 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103e68:	00a80014 	movui	r2,40960
81103e6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103e70:	00800044 	movi	r2,1
81103e74:	e0bff715 	stw	r2,-36(fp)
			break;
81103e78:	00000806 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103e7c:	008000b4 	movhi	r2,2
81103e80:	10a80004 	addi	r2,r2,-24576
81103e84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e90:	00000206 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103e94:	e03ff415 	stw	zero,-48(fp)
			break;
81103e98:	0001883a 	nop
		}
		break;
81103e9c:	00002806 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103ea0:	e0bffd03 	ldbu	r2,-12(fp)
81103ea4:	10000326 	beq	r2,zero,81103eb4 <bSdmaDmaM1Transfer+0x288>
81103ea8:	10800060 	cmpeqi	r2,r2,1
81103eac:	1000061e 	bne	r2,zero,81103ec8 <bSdmaDmaM1Transfer+0x29c>
81103eb0:	00000b06 	br	81103ee0 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103eb4:	00b00014 	movui	r2,49152
81103eb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103ebc:	00800044 	movi	r2,1
81103ec0:	e0bff715 	stw	r2,-36(fp)
			break;
81103ec4:	00000806 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103ec8:	008000b4 	movhi	r2,2
81103ecc:	10b00004 	addi	r2,r2,-16384
81103ed0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103ed4:	00800044 	movi	r2,1
81103ed8:	e0bff715 	stw	r2,-36(fp)
			break;
81103edc:	00000206 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103ee0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ee4:	0001883a 	nop
		}
		break;
81103ee8:	00001506 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103eec:	e0bffd03 	ldbu	r2,-12(fp)
81103ef0:	10000326 	beq	r2,zero,81103f00 <bSdmaDmaM1Transfer+0x2d4>
81103ef4:	10800060 	cmpeqi	r2,r2,1
81103ef8:	1000061e 	bne	r2,zero,81103f14 <bSdmaDmaM1Transfer+0x2e8>
81103efc:	00000b06 	br	81103f2c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f00:	00b80014 	movui	r2,57344
81103f04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f08:	00800044 	movi	r2,1
81103f0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f10:	00000806 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f14:	008000b4 	movhi	r2,2
81103f18:	10b80004 	addi	r2,r2,-8192
81103f1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f20:	00800044 	movi	r2,1
81103f24:	e0bff715 	stw	r2,-36(fp)
			break;
81103f28:	00000206 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103f30:	0001883a 	nop
		}
		break;
81103f34:	00000206 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103f38:	e03ff415 	stw	zero,-48(fp)
		break;
81103f3c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103f40:	e0bffb17 	ldw	r2,-20(fp)
81103f44:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103f48:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103f4c:	e0bff417 	ldw	r2,-48(fp)
81103f50:	10003b26 	beq	r2,zero,81104040 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103f54:	d0a03817 	ldw	r2,-32544(gp)
81103f58:	1000021e 	bne	r2,zero,81103f64 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103f5c:	e03ff415 	stw	zero,-48(fp)
81103f60:	00003706 	br	81104040 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103f64:	e03ff50d 	sth	zero,-44(fp)
81103f68:	00003206 	br	81104034 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103f6c:	01000044 	movi	r4,1
81103f70:	112712c0 	call	8112712c <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103f74:	d0a03817 	ldw	r2,-32544(gp)
81103f78:	10800317 	ldw	r2,12(r2)
81103f7c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103f80:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103f84:	103ff91e 	bne	r2,zero,81103f6c <__reset+0xfb0e3f6c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103f88:	d2203817 	ldw	r8,-32544(gp)
81103f8c:	e17ff817 	ldw	r5,-32(fp)
81103f90:	e1bff617 	ldw	r6,-40(fp)
81103f94:	e0bff917 	ldw	r2,-28(fp)
81103f98:	e0fff717 	ldw	r3,-36(fp)
81103f9c:	01000044 	movi	r4,1
81103fa0:	d9000815 	stw	r4,32(sp)
81103fa4:	01000044 	movi	r4,1
81103fa8:	d9000715 	stw	r4,28(sp)
81103fac:	01000044 	movi	r4,1
81103fb0:	d9000615 	stw	r4,24(sp)
81103fb4:	01000044 	movi	r4,1
81103fb8:	d9000515 	stw	r4,20(sp)
81103fbc:	01000044 	movi	r4,1
81103fc0:	d9000415 	stw	r4,16(sp)
81103fc4:	d8c00315 	stw	r3,12(sp)
81103fc8:	d8800215 	stw	r2,8(sp)
81103fcc:	e0bffa17 	ldw	r2,-24(fp)
81103fd0:	d8800115 	stw	r2,4(sp)
81103fd4:	00802204 	movi	r2,136
81103fd8:	d8800015 	stw	r2,0(sp)
81103fdc:	300f883a 	mov	r7,r6
81103fe0:	280d883a 	mov	r6,r5
81103fe4:	800b883a 	mov	r5,r16
81103fe8:	4009883a 	mov	r4,r8
81103fec:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103ff0:	10000226 	beq	r2,zero,81103ffc <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103ff4:	e03ff415 	stw	zero,-48(fp)
					break;
81103ff8:	00001106 	br	81104040 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
81103ffc:	d0a03817 	ldw	r2,-32544(gp)
81104000:	800b883a 	mov	r5,r16
81104004:	1009883a 	mov	r4,r2
81104008:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
8110400c:	10000226 	beq	r2,zero,81104018 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104010:	e03ff415 	stw	zero,-48(fp)
						break;
81104014:	00000a06 	br	81104040 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104018:	e0bff817 	ldw	r2,-32(fp)
8110401c:	10802204 	addi	r2,r2,136
81104020:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104024:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104028:	e0bff50b 	ldhu	r2,-44(fp)
8110402c:	10800044 	addi	r2,r2,1
81104030:	e0bff50d 	sth	r2,-44(fp)
81104034:	e0fff50b 	ldhu	r3,-44(fp)
81104038:	e0bffc0b 	ldhu	r2,-16(fp)
8110403c:	18bfcd36 	bltu	r3,r2,81103f74 <__reset+0xfb0e3f74>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104040:	e0bff417 	ldw	r2,-48(fp)
}
81104044:	e6ffff04 	addi	sp,fp,-4
81104048:	dfc00217 	ldw	ra,8(sp)
8110404c:	df000117 	ldw	fp,4(sp)
81104050:	dc000017 	ldw	r16,0(sp)
81104054:	dec00304 	addi	sp,sp,12
81104058:	f800283a 	ret

8110405c <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
8110405c:	deffe904 	addi	sp,sp,-92
81104060:	de00012e 	bgeu	sp,et,81104068 <bSdmaDmaM2Transfer+0xc>
81104064:	003b68fa 	trap	3
81104068:	dfc01615 	stw	ra,88(sp)
8110406c:	df001515 	stw	fp,84(sp)
81104070:	dc001415 	stw	r16,80(sp)
81104074:	df001504 	addi	fp,sp,84
81104078:	e13ffb15 	stw	r4,-20(fp)
8110407c:	2809883a 	mov	r4,r5
81104080:	3007883a 	mov	r3,r6
81104084:	3805883a 	mov	r2,r7
81104088:	e13ffc0d 	sth	r4,-16(fp)
8110408c:	e0fffd05 	stb	r3,-12(fp)
81104090:	e0bffe05 	stb	r2,-8(fp)
81104094:	defff004 	addi	sp,sp,-64
81104098:	d8800904 	addi	r2,sp,36
8110409c:	108007c4 	addi	r2,r2,31
811040a0:	1004d17a 	srli	r2,r2,5
811040a4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811040a8:	00800044 	movi	r2,1
811040ac:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811040b0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811040b4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811040b8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811040bc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
811040c0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
811040c4:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10c00268 	cmpgeui	r3,r2,9
811040d0:	1800a51e 	bne	r3,zero,81104368 <bSdmaDmaM2Transfer+0x30c>
811040d4:	100690ba 	slli	r3,r2,2
811040d8:	00a04434 	movhi	r2,33040
811040dc:	10903b04 	addi	r2,r2,16620
811040e0:	1885883a 	add	r2,r3,r2
811040e4:	10800017 	ldw	r2,0(r2)
811040e8:	1000683a 	jmp	r2
811040ec:	81104368 	cmpgeui	r4,r16,16653
811040f0:	81104110 	cmplti	r4,r16,16644
811040f4:	81104154 	ori	r4,r16,16645
811040f8:	811041a0 	cmpeqi	r4,r16,16646
811040fc:	811041ec 	andhi	r4,r16,16647
81104100:	81104238 	rdprs	r4,r16,16648
81104104:	81104284 	addi	r4,r16,16650
81104108:	811042d0 	cmplti	r4,r16,16651
8110410c:	8110431c 	xori	r4,r16,16652
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104110:	e0bffd03 	ldbu	r2,-12(fp)
81104114:	10000326 	beq	r2,zero,81104124 <bSdmaDmaM2Transfer+0xc8>
81104118:	10800060 	cmpeqi	r2,r2,1
8110411c:	1000051e 	bne	r2,zero,81104134 <bSdmaDmaM2Transfer+0xd8>
81104120:	00000906 	br	81104148 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104124:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104128:	00800044 	movi	r2,1
8110412c:	e0bff715 	stw	r2,-36(fp)
			break;
81104130:	00000706 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81104134:	00800074 	movhi	r2,1
81104138:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110413c:	00800044 	movi	r2,1
81104140:	e0bff715 	stw	r2,-36(fp)
			break;
81104144:	00000206 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
81104148:	e03ff415 	stw	zero,-48(fp)
			break;
8110414c:	0001883a 	nop
		}
		break;
81104150:	00008706 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81104154:	e0bffd03 	ldbu	r2,-12(fp)
81104158:	10000326 	beq	r2,zero,81104168 <bSdmaDmaM2Transfer+0x10c>
8110415c:	10800060 	cmpeqi	r2,r2,1
81104160:	1000061e 	bne	r2,zero,8110417c <bSdmaDmaM2Transfer+0x120>
81104164:	00000b06 	br	81104194 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81104168:	00880004 	movi	r2,8192
8110416c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81104170:	00800044 	movi	r2,1
81104174:	e0bff715 	stw	r2,-36(fp)
			break;
81104178:	00000806 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8110417c:	00800074 	movhi	r2,1
81104180:	10880004 	addi	r2,r2,8192
81104184:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81104188:	00800044 	movi	r2,1
8110418c:	e0bff715 	stw	r2,-36(fp)
			break;
81104190:	00000206 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104194:	e03ff415 	stw	zero,-48(fp)
			break;
81104198:	0001883a 	nop
		}
		break;
8110419c:	00007406 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811041a0:	e0bffd03 	ldbu	r2,-12(fp)
811041a4:	10000326 	beq	r2,zero,811041b4 <bSdmaDmaM2Transfer+0x158>
811041a8:	10800060 	cmpeqi	r2,r2,1
811041ac:	1000061e 	bne	r2,zero,811041c8 <bSdmaDmaM2Transfer+0x16c>
811041b0:	00000b06 	br	811041e0 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811041b4:	00900004 	movi	r2,16384
811041b8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811041bc:	00800044 	movi	r2,1
811041c0:	e0bff715 	stw	r2,-36(fp)
			break;
811041c4:	00000806 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
811041c8:	00800074 	movhi	r2,1
811041cc:	10900004 	addi	r2,r2,16384
811041d0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
811041d4:	00800044 	movi	r2,1
811041d8:	e0bff715 	stw	r2,-36(fp)
			break;
811041dc:	00000206 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
811041e0:	e03ff415 	stw	zero,-48(fp)
			break;
811041e4:	0001883a 	nop
		}
		break;
811041e8:	00006106 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
811041ec:	e0bffd03 	ldbu	r2,-12(fp)
811041f0:	10000326 	beq	r2,zero,81104200 <bSdmaDmaM2Transfer+0x1a4>
811041f4:	10800060 	cmpeqi	r2,r2,1
811041f8:	1000061e 	bne	r2,zero,81104214 <bSdmaDmaM2Transfer+0x1b8>
811041fc:	00000b06 	br	8110422c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104200:	00980004 	movi	r2,24576
81104204:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104208:	00800044 	movi	r2,1
8110420c:	e0bff715 	stw	r2,-36(fp)
			break;
81104210:	00000806 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104214:	00800074 	movhi	r2,1
81104218:	10980004 	addi	r2,r2,24576
8110421c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104220:	00800044 	movi	r2,1
81104224:	e0bff715 	stw	r2,-36(fp)
			break;
81104228:	00000206 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110422c:	e03ff415 	stw	zero,-48(fp)
			break;
81104230:	0001883a 	nop
		}
		break;
81104234:	00004e06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81104238:	e0bffd03 	ldbu	r2,-12(fp)
8110423c:	10000326 	beq	r2,zero,8110424c <bSdmaDmaM2Transfer+0x1f0>
81104240:	10800060 	cmpeqi	r2,r2,1
81104244:	1000061e 	bne	r2,zero,81104260 <bSdmaDmaM2Transfer+0x204>
81104248:	00000b06 	br	81104278 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110424c:	00a00014 	movui	r2,32768
81104250:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81104254:	00800044 	movi	r2,1
81104258:	e0bff715 	stw	r2,-36(fp)
			break;
8110425c:	00000806 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81104260:	008000b4 	movhi	r2,2
81104264:	10a00004 	addi	r2,r2,-32768
81104268:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8110426c:	00800044 	movi	r2,1
81104270:	e0bff715 	stw	r2,-36(fp)
			break;
81104274:	00000206 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
81104278:	e03ff415 	stw	zero,-48(fp)
			break;
8110427c:	0001883a 	nop
		}
		break;
81104280:	00003b06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81104284:	e0bffd03 	ldbu	r2,-12(fp)
81104288:	10000326 	beq	r2,zero,81104298 <bSdmaDmaM2Transfer+0x23c>
8110428c:	10800060 	cmpeqi	r2,r2,1
81104290:	1000061e 	bne	r2,zero,811042ac <bSdmaDmaM2Transfer+0x250>
81104294:	00000b06 	br	811042c4 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104298:	00a80014 	movui	r2,40960
8110429c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811042a0:	00800044 	movi	r2,1
811042a4:	e0bff715 	stw	r2,-36(fp)
			break;
811042a8:	00000806 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811042ac:	008000b4 	movhi	r2,2
811042b0:	10a80004 	addi	r2,r2,-24576
811042b4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bff715 	stw	r2,-36(fp)
			break;
811042c0:	00000206 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
811042c4:	e03ff415 	stw	zero,-48(fp)
			break;
811042c8:	0001883a 	nop
		}
		break;
811042cc:	00002806 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
811042d0:	e0bffd03 	ldbu	r2,-12(fp)
811042d4:	10000326 	beq	r2,zero,811042e4 <bSdmaDmaM2Transfer+0x288>
811042d8:	10800060 	cmpeqi	r2,r2,1
811042dc:	1000061e 	bne	r2,zero,811042f8 <bSdmaDmaM2Transfer+0x29c>
811042e0:	00000b06 	br	81104310 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
811042e4:	00b00014 	movui	r2,49152
811042e8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
811042ec:	00800044 	movi	r2,1
811042f0:	e0bff715 	stw	r2,-36(fp)
			break;
811042f4:	00000806 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
811042f8:	008000b4 	movhi	r2,2
811042fc:	10b00004 	addi	r2,r2,-16384
81104300:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104304:	00800044 	movi	r2,1
81104308:	e0bff715 	stw	r2,-36(fp)
			break;
8110430c:	00000206 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104310:	e03ff415 	stw	zero,-48(fp)
			break;
81104314:	0001883a 	nop
		}
		break;
81104318:	00001506 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110431c:	e0bffd03 	ldbu	r2,-12(fp)
81104320:	10000326 	beq	r2,zero,81104330 <bSdmaDmaM2Transfer+0x2d4>
81104324:	10800060 	cmpeqi	r2,r2,1
81104328:	1000061e 	bne	r2,zero,81104344 <bSdmaDmaM2Transfer+0x2e8>
8110432c:	00000b06 	br	8110435c <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81104330:	00b80014 	movui	r2,57344
81104334:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81104338:	00800044 	movi	r2,1
8110433c:	e0bff715 	stw	r2,-36(fp)
			break;
81104340:	00000806 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81104344:	008000b4 	movhi	r2,2
81104348:	10b80004 	addi	r2,r2,-8192
8110434c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81104350:	00800044 	movi	r2,1
81104354:	e0bff715 	stw	r2,-36(fp)
			break;
81104358:	00000206 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
8110435c:	e03ff415 	stw	zero,-48(fp)
			break;
81104360:	0001883a 	nop
		}
		break;
81104364:	00000206 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
81104368:	e03ff415 	stw	zero,-48(fp)
		break;
8110436c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81104370:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81104374:	00a00034 	movhi	r2,32768
81104378:	1885883a 	add	r2,r3,r2
8110437c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81104380:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81104384:	e0bff417 	ldw	r2,-48(fp)
81104388:	10003b26 	beq	r2,zero,81104478 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
8110438c:	d0a03917 	ldw	r2,-32540(gp)
81104390:	1000021e 	bne	r2,zero,8110439c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104394:	e03ff415 	stw	zero,-48(fp)
81104398:	00003706 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110439c:	e03ff50d 	sth	zero,-44(fp)
811043a0:	00003206 	br	8110446c <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811043a4:	01000044 	movi	r4,1
811043a8:	112712c0 	call	8112712c <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
811043ac:	d0a03917 	ldw	r2,-32540(gp)
811043b0:	10800317 	ldw	r2,12(r2)
811043b4:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811043b8:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811043bc:	103ff91e 	bne	r2,zero,811043a4 <__reset+0xfb0e43a4>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
811043c0:	d2203917 	ldw	r8,-32540(gp)
811043c4:	e17ff817 	ldw	r5,-32(fp)
811043c8:	e1bff617 	ldw	r6,-40(fp)
811043cc:	e0bff917 	ldw	r2,-28(fp)
811043d0:	e0fff717 	ldw	r3,-36(fp)
811043d4:	01000044 	movi	r4,1
811043d8:	d9000815 	stw	r4,32(sp)
811043dc:	01000044 	movi	r4,1
811043e0:	d9000715 	stw	r4,28(sp)
811043e4:	01000044 	movi	r4,1
811043e8:	d9000615 	stw	r4,24(sp)
811043ec:	01000044 	movi	r4,1
811043f0:	d9000515 	stw	r4,20(sp)
811043f4:	01000044 	movi	r4,1
811043f8:	d9000415 	stw	r4,16(sp)
811043fc:	d8c00315 	stw	r3,12(sp)
81104400:	d8800215 	stw	r2,8(sp)
81104404:	e0bffa17 	ldw	r2,-24(fp)
81104408:	d8800115 	stw	r2,4(sp)
8110440c:	00802204 	movi	r2,136
81104410:	d8800015 	stw	r2,0(sp)
81104414:	300f883a 	mov	r7,r6
81104418:	280d883a 	mov	r6,r5
8110441c:	800b883a 	mov	r5,r16
81104420:	4009883a 	mov	r4,r8
81104424:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104428:	10000226 	beq	r2,zero,81104434 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110442c:	e03ff415 	stw	zero,-48(fp)
					break;
81104430:	00001106 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81104434:	d0a03917 	ldw	r2,-32540(gp)
81104438:	800b883a 	mov	r5,r16
8110443c:	1009883a 	mov	r4,r2
81104440:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
81104444:	10000226 	beq	r2,zero,81104450 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104448:	e03ff415 	stw	zero,-48(fp)
						break;
8110444c:	00000a06 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104450:	e0bff817 	ldw	r2,-32(fp)
81104454:	10802204 	addi	r2,r2,136
81104458:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
8110445c:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104460:	e0bff50b 	ldhu	r2,-44(fp)
81104464:	10800044 	addi	r2,r2,1
81104468:	e0bff50d 	sth	r2,-44(fp)
8110446c:	e0fff50b 	ldhu	r3,-44(fp)
81104470:	e0bffc0b 	ldhu	r2,-16(fp)
81104474:	18bfcd36 	bltu	r3,r2,811043ac <__reset+0xfb0e43ac>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104478:	e0bff417 	ldw	r2,-48(fp)
}
8110447c:	e6ffff04 	addi	sp,fp,-4
81104480:	dfc00217 	ldw	ra,8(sp)
81104484:	df000117 	ldw	fp,4(sp)
81104488:	dc000017 	ldw	r16,0(sp)
8110448c:	dec00304 	addi	sp,sp,12
81104490:	f800283a 	ret

81104494 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104494:	defffc04 	addi	sp,sp,-16
81104498:	de00012e 	bgeu	sp,et,811044a0 <vFeebCh1HandleIrq+0xc>
8110449c:	003b68fa 	trap	3
811044a0:	dfc00315 	stw	ra,12(sp)
811044a4:	df000215 	stw	fp,8(sp)
811044a8:	df000204 	addi	fp,sp,8
811044ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044b0:	e0bfff17 	ldw	r2,-4(fp)
811044b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
811044b8:	11046940 	call	81104694 <vFeebCh1IrqFlagClrBufferEmpty>
}
811044bc:	0001883a 	nop
811044c0:	e037883a 	mov	sp,fp
811044c4:	dfc00117 	ldw	ra,4(sp)
811044c8:	df000017 	ldw	fp,0(sp)
811044cc:	dec00204 	addi	sp,sp,8
811044d0:	f800283a 	ret

811044d4 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
811044d4:	defffc04 	addi	sp,sp,-16
811044d8:	de00012e 	bgeu	sp,et,811044e0 <vFeebCh2HandleIrq+0xc>
811044dc:	003b68fa 	trap	3
811044e0:	dfc00315 	stw	ra,12(sp)
811044e4:	df000215 	stw	fp,8(sp)
811044e8:	df000204 	addi	fp,sp,8
811044ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044f0:	e0bfff17 	ldw	r2,-4(fp)
811044f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
811044f8:	11046d80 	call	811046d8 <vFeebCh2IrqFlagClrBufferEmpty>
}
811044fc:	0001883a 	nop
81104500:	e037883a 	mov	sp,fp
81104504:	dfc00117 	ldw	ra,4(sp)
81104508:	df000017 	ldw	fp,0(sp)
8110450c:	dec00204 	addi	sp,sp,8
81104510:	f800283a 	ret

81104514 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104514:	defffc04 	addi	sp,sp,-16
81104518:	de00012e 	bgeu	sp,et,81104520 <vFeebCh3HandleIrq+0xc>
8110451c:	003b68fa 	trap	3
81104520:	dfc00315 	stw	ra,12(sp)
81104524:	df000215 	stw	fp,8(sp)
81104528:	df000204 	addi	fp,sp,8
8110452c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104530:	e0bfff17 	ldw	r2,-4(fp)
81104534:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81104538:	110471c0 	call	8110471c <vFeebCh3IrqFlagClrBufferEmpty>
}
8110453c:	0001883a 	nop
81104540:	e037883a 	mov	sp,fp
81104544:	dfc00117 	ldw	ra,4(sp)
81104548:	df000017 	ldw	fp,0(sp)
8110454c:	dec00204 	addi	sp,sp,8
81104550:	f800283a 	ret

81104554 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104554:	defffc04 	addi	sp,sp,-16
81104558:	de00012e 	bgeu	sp,et,81104560 <vFeebCh4HandleIrq+0xc>
8110455c:	003b68fa 	trap	3
81104560:	dfc00315 	stw	ra,12(sp)
81104564:	df000215 	stw	fp,8(sp)
81104568:	df000204 	addi	fp,sp,8
8110456c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104570:	e0bfff17 	ldw	r2,-4(fp)
81104574:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81104578:	11047600 	call	81104760 <vFeebCh4IrqFlagClrBufferEmpty>
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104594:	defffc04 	addi	sp,sp,-16
81104598:	de00012e 	bgeu	sp,et,811045a0 <vFeebCh5HandleIrq+0xc>
8110459c:	003b68fa 	trap	3
811045a0:	dfc00315 	stw	ra,12(sp)
811045a4:	df000215 	stw	fp,8(sp)
811045a8:	df000204 	addi	fp,sp,8
811045ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
811045b8:	11047a40 	call	811047a4 <vFeebCh5IrqFlagClrBufferEmpty>
}
811045bc:	0001883a 	nop
811045c0:	e037883a 	mov	sp,fp
811045c4:	dfc00117 	ldw	ra,4(sp)
811045c8:	df000017 	ldw	fp,0(sp)
811045cc:	dec00204 	addi	sp,sp,8
811045d0:	f800283a 	ret

811045d4 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811045d4:	defffc04 	addi	sp,sp,-16
811045d8:	de00012e 	bgeu	sp,et,811045e0 <vFeebCh6HandleIrq+0xc>
811045dc:	003b68fa 	trap	3
811045e0:	dfc00315 	stw	ra,12(sp)
811045e4:	df000215 	stw	fp,8(sp)
811045e8:	df000204 	addi	fp,sp,8
811045ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
811045f8:	11047e80 	call	811047e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
811045fc:	0001883a 	nop
81104600:	e037883a 	mov	sp,fp
81104604:	dfc00117 	ldw	ra,4(sp)
81104608:	df000017 	ldw	fp,0(sp)
8110460c:	dec00204 	addi	sp,sp,8
81104610:	f800283a 	ret

81104614 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104614:	defffc04 	addi	sp,sp,-16
81104618:	de00012e 	bgeu	sp,et,81104620 <vFeebCh7HandleIrq+0xc>
8110461c:	003b68fa 	trap	3
81104620:	dfc00315 	stw	ra,12(sp)
81104624:	df000215 	stw	fp,8(sp)
81104628:	df000204 	addi	fp,sp,8
8110462c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104630:	e0bfff17 	ldw	r2,-4(fp)
81104634:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81104638:	110482c0 	call	8110482c <vFeebCh7IrqFlagClrBufferEmpty>
}
8110463c:	0001883a 	nop
81104640:	e037883a 	mov	sp,fp
81104644:	dfc00117 	ldw	ra,4(sp)
81104648:	df000017 	ldw	fp,0(sp)
8110464c:	dec00204 	addi	sp,sp,8
81104650:	f800283a 	ret

81104654 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104654:	defffc04 	addi	sp,sp,-16
81104658:	de00012e 	bgeu	sp,et,81104660 <vFeebCh8HandleIrq+0xc>
8110465c:	003b68fa 	trap	3
81104660:	dfc00315 	stw	ra,12(sp)
81104664:	df000215 	stw	fp,8(sp)
81104668:	df000204 	addi	fp,sp,8
8110466c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81104678:	11048700 	call	81104870 <vFeebCh8IrqFlagClrBufferEmpty>
}
8110467c:	0001883a 	nop
81104680:	e037883a 	mov	sp,fp
81104684:	dfc00117 	ldw	ra,4(sp)
81104688:	df000017 	ldw	fp,0(sp)
8110468c:	dec00204 	addi	sp,sp,8
81104690:	f800283a 	ret

81104694 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104694:	defffe04 	addi	sp,sp,-8
81104698:	de00012e 	bgeu	sp,et,811046a0 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110469c:	003b68fa 	trap	3
811046a0:	dfc00115 	stw	ra,4(sp)
811046a4:	df000015 	stw	fp,0(sp)
811046a8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811046ac:	01800044 	movi	r6,1
811046b0:	01400144 	movi	r5,5
811046b4:	01204834 	movhi	r4,33056
811046b8:	210b0004 	addi	r4,r4,11264
811046bc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811046c0:	0001883a 	nop
811046c4:	e037883a 	mov	sp,fp
811046c8:	dfc00117 	ldw	ra,4(sp)
811046cc:	df000017 	ldw	fp,0(sp)
811046d0:	dec00204 	addi	sp,sp,8
811046d4:	f800283a 	ret

811046d8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
811046d8:	defffe04 	addi	sp,sp,-8
811046dc:	de00012e 	bgeu	sp,et,811046e4 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
811046e0:	003b68fa 	trap	3
811046e4:	dfc00115 	stw	ra,4(sp)
811046e8:	df000015 	stw	fp,0(sp)
811046ec:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811046f0:	01800044 	movi	r6,1
811046f4:	01400144 	movi	r5,5
811046f8:	01204834 	movhi	r4,33056
811046fc:	210a0004 	addi	r4,r4,10240
81104700:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104704:	0001883a 	nop
81104708:	e037883a 	mov	sp,fp
8110470c:	dfc00117 	ldw	ra,4(sp)
81104710:	df000017 	ldw	fp,0(sp)
81104714:	dec00204 	addi	sp,sp,8
81104718:	f800283a 	ret

8110471c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110471c:	defffe04 	addi	sp,sp,-8
81104720:	de00012e 	bgeu	sp,et,81104728 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104724:	003b68fa 	trap	3
81104728:	dfc00115 	stw	ra,4(sp)
8110472c:	df000015 	stw	fp,0(sp)
81104730:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104734:	01800044 	movi	r6,1
81104738:	01400144 	movi	r5,5
8110473c:	01204834 	movhi	r4,33056
81104740:	21090004 	addi	r4,r4,9216
81104744:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104748:	0001883a 	nop
8110474c:	e037883a 	mov	sp,fp
81104750:	dfc00117 	ldw	ra,4(sp)
81104754:	df000017 	ldw	fp,0(sp)
81104758:	dec00204 	addi	sp,sp,8
8110475c:	f800283a 	ret

81104760 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104760:	defffe04 	addi	sp,sp,-8
81104764:	de00012e 	bgeu	sp,et,8110476c <vFeebCh4IrqFlagClrBufferEmpty+0xc>
81104768:	003b68fa 	trap	3
8110476c:	dfc00115 	stw	ra,4(sp)
81104770:	df000015 	stw	fp,0(sp)
81104774:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104778:	01800044 	movi	r6,1
8110477c:	01400144 	movi	r5,5
81104780:	01204834 	movhi	r4,33056
81104784:	21080004 	addi	r4,r4,8192
81104788:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110478c:	0001883a 	nop
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811047a4:	defffe04 	addi	sp,sp,-8
811047a8:	de00012e 	bgeu	sp,et,811047b0 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
811047ac:	003b68fa 	trap	3
811047b0:	dfc00115 	stw	ra,4(sp)
811047b4:	df000015 	stw	fp,0(sp)
811047b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811047bc:	01800044 	movi	r6,1
811047c0:	01400144 	movi	r5,5
811047c4:	01204834 	movhi	r4,33056
811047c8:	21070004 	addi	r4,r4,7168
811047cc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047d0:	0001883a 	nop
811047d4:	e037883a 	mov	sp,fp
811047d8:	dfc00117 	ldw	ra,4(sp)
811047dc:	df000017 	ldw	fp,0(sp)
811047e0:	dec00204 	addi	sp,sp,8
811047e4:	f800283a 	ret

811047e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811047e8:	defffe04 	addi	sp,sp,-8
811047ec:	de00012e 	bgeu	sp,et,811047f4 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
811047f0:	003b68fa 	trap	3
811047f4:	dfc00115 	stw	ra,4(sp)
811047f8:	df000015 	stw	fp,0(sp)
811047fc:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104800:	01800044 	movi	r6,1
81104804:	01400144 	movi	r5,5
81104808:	01204834 	movhi	r4,33056
8110480c:	21060004 	addi	r4,r4,6144
81104810:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104814:	0001883a 	nop
81104818:	e037883a 	mov	sp,fp
8110481c:	dfc00117 	ldw	ra,4(sp)
81104820:	df000017 	ldw	fp,0(sp)
81104824:	dec00204 	addi	sp,sp,8
81104828:	f800283a 	ret

8110482c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110482c:	defffe04 	addi	sp,sp,-8
81104830:	de00012e 	bgeu	sp,et,81104838 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
81104834:	003b68fa 	trap	3
81104838:	dfc00115 	stw	ra,4(sp)
8110483c:	df000015 	stw	fp,0(sp)
81104840:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104844:	01800044 	movi	r6,1
81104848:	01400144 	movi	r5,5
8110484c:	01204834 	movhi	r4,33056
81104850:	21050004 	addi	r4,r4,5120
81104854:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104858:	0001883a 	nop
8110485c:	e037883a 	mov	sp,fp
81104860:	dfc00117 	ldw	ra,4(sp)
81104864:	df000017 	ldw	fp,0(sp)
81104868:	dec00204 	addi	sp,sp,8
8110486c:	f800283a 	ret

81104870 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104870:	defffe04 	addi	sp,sp,-8
81104874:	de00012e 	bgeu	sp,et,8110487c <vFeebCh8IrqFlagClrBufferEmpty+0xc>
81104878:	003b68fa 	trap	3
8110487c:	dfc00115 	stw	ra,4(sp)
81104880:	df000015 	stw	fp,0(sp)
81104884:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104888:	01800044 	movi	r6,1
8110488c:	01400144 	movi	r5,5
81104890:	01204834 	movhi	r4,33056
81104894:	21040004 	addi	r4,r4,4096
81104898:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
811048b4:	defffd04 	addi	sp,sp,-12
811048b8:	de00012e 	bgeu	sp,et,811048c0 <bFeebCh1IrqFlagBufferEmpty+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00215 	stw	ra,8(sp)
811048c4:	df000115 	stw	fp,4(sp)
811048c8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048cc:	01400144 	movi	r5,5
811048d0:	01204834 	movhi	r4,33056
811048d4:	210b0004 	addi	r4,r4,11264
811048d8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811048dc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048e0:	10000326 	beq	r2,zero,811048f0 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811048e4:	00800044 	movi	r2,1
811048e8:	e0bfff15 	stw	r2,-4(fp)
811048ec:	00000106 	br	811048f4 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811048f0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
}
811048f8:	e037883a 	mov	sp,fp
811048fc:	dfc00117 	ldw	ra,4(sp)
81104900:	df000017 	ldw	fp,0(sp)
81104904:	dec00204 	addi	sp,sp,8
81104908:	f800283a 	ret

8110490c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110490c:	defffd04 	addi	sp,sp,-12
81104910:	de00012e 	bgeu	sp,et,81104918 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104914:	003b68fa 	trap	3
81104918:	dfc00215 	stw	ra,8(sp)
8110491c:	df000115 	stw	fp,4(sp)
81104920:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104924:	01400144 	movi	r5,5
81104928:	01204834 	movhi	r4,33056
8110492c:	210a0004 	addi	r4,r4,10240
81104930:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104934:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104938:	10000326 	beq	r2,zero,81104948 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
8110493c:	00800044 	movi	r2,1
81104940:	e0bfff15 	stw	r2,-4(fp)
81104944:	00000106 	br	8110494c <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104948:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110494c:	e0bfff17 	ldw	r2,-4(fp)
}
81104950:	e037883a 	mov	sp,fp
81104954:	dfc00117 	ldw	ra,4(sp)
81104958:	df000017 	ldw	fp,0(sp)
8110495c:	dec00204 	addi	sp,sp,8
81104960:	f800283a 	ret

81104964 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104964:	defffd04 	addi	sp,sp,-12
81104968:	de00012e 	bgeu	sp,et,81104970 <bFeebCh3IrqFlagBufferEmpty+0xc>
8110496c:	003b68fa 	trap	3
81104970:	dfc00215 	stw	ra,8(sp)
81104974:	df000115 	stw	fp,4(sp)
81104978:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110497c:	01400144 	movi	r5,5
81104980:	01204834 	movhi	r4,33056
81104984:	21090004 	addi	r4,r4,9216
81104988:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110498c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104990:	10000326 	beq	r2,zero,811049a0 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104994:	00800044 	movi	r2,1
81104998:	e0bfff15 	stw	r2,-4(fp)
8110499c:	00000106 	br	811049a4 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049a0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049a4:	e0bfff17 	ldw	r2,-4(fp)
}
811049a8:	e037883a 	mov	sp,fp
811049ac:	dfc00117 	ldw	ra,4(sp)
811049b0:	df000017 	ldw	fp,0(sp)
811049b4:	dec00204 	addi	sp,sp,8
811049b8:	f800283a 	ret

811049bc <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
811049bc:	defffd04 	addi	sp,sp,-12
811049c0:	de00012e 	bgeu	sp,et,811049c8 <bFeebCh4IrqFlagBufferEmpty+0xc>
811049c4:	003b68fa 	trap	3
811049c8:	dfc00215 	stw	ra,8(sp)
811049cc:	df000115 	stw	fp,4(sp)
811049d0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049d4:	01400144 	movi	r5,5
811049d8:	01204834 	movhi	r4,33056
811049dc:	21080004 	addi	r4,r4,8192
811049e0:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049e4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049e8:	10000326 	beq	r2,zero,811049f8 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bfff15 	stw	r2,-4(fp)
811049f4:	00000106 	br	811049fc <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049f8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049fc:	e0bfff17 	ldw	r2,-4(fp)
}
81104a00:	e037883a 	mov	sp,fp
81104a04:	dfc00117 	ldw	ra,4(sp)
81104a08:	df000017 	ldw	fp,0(sp)
81104a0c:	dec00204 	addi	sp,sp,8
81104a10:	f800283a 	ret

81104a14 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a14:	defffd04 	addi	sp,sp,-12
81104a18:	de00012e 	bgeu	sp,et,81104a20 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a1c:	003b68fa 	trap	3
81104a20:	dfc00215 	stw	ra,8(sp)
81104a24:	df000115 	stw	fp,4(sp)
81104a28:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a2c:	01400144 	movi	r5,5
81104a30:	01204834 	movhi	r4,33056
81104a34:	21070004 	addi	r4,r4,7168
81104a38:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a3c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a40:	10000326 	beq	r2,zero,81104a50 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bfff15 	stw	r2,-4(fp)
81104a4c:	00000106 	br	81104a54 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a50:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a54:	e0bfff17 	ldw	r2,-4(fp)
}
81104a58:	e037883a 	mov	sp,fp
81104a5c:	dfc00117 	ldw	ra,4(sp)
81104a60:	df000017 	ldw	fp,0(sp)
81104a64:	dec00204 	addi	sp,sp,8
81104a68:	f800283a 	ret

81104a6c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104a6c:	defffd04 	addi	sp,sp,-12
81104a70:	de00012e 	bgeu	sp,et,81104a78 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104a74:	003b68fa 	trap	3
81104a78:	dfc00215 	stw	ra,8(sp)
81104a7c:	df000115 	stw	fp,4(sp)
81104a80:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a84:	01400144 	movi	r5,5
81104a88:	01204834 	movhi	r4,33056
81104a8c:	21060004 	addi	r4,r4,6144
81104a90:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a94:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a98:	10000326 	beq	r2,zero,81104aa8 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a9c:	00800044 	movi	r2,1
81104aa0:	e0bfff15 	stw	r2,-4(fp)
81104aa4:	00000106 	br	81104aac <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104aa8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104aac:	e0bfff17 	ldw	r2,-4(fp)
}
81104ab0:	e037883a 	mov	sp,fp
81104ab4:	dfc00117 	ldw	ra,4(sp)
81104ab8:	df000017 	ldw	fp,0(sp)
81104abc:	dec00204 	addi	sp,sp,8
81104ac0:	f800283a 	ret

81104ac4 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104ac4:	defffd04 	addi	sp,sp,-12
81104ac8:	de00012e 	bgeu	sp,et,81104ad0 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104acc:	003b68fa 	trap	3
81104ad0:	dfc00215 	stw	ra,8(sp)
81104ad4:	df000115 	stw	fp,4(sp)
81104ad8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104adc:	01400144 	movi	r5,5
81104ae0:	01204834 	movhi	r4,33056
81104ae4:	21050004 	addi	r4,r4,5120
81104ae8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104af0:	10000326 	beq	r2,zero,81104b00 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104af4:	00800044 	movi	r2,1
81104af8:	e0bfff15 	stw	r2,-4(fp)
81104afc:	00000106 	br	81104b04 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b00:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b04:	e0bfff17 	ldw	r2,-4(fp)
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	dfc00117 	ldw	ra,4(sp)
81104b10:	df000017 	ldw	fp,0(sp)
81104b14:	dec00204 	addi	sp,sp,8
81104b18:	f800283a 	ret

81104b1c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b1c:	defffd04 	addi	sp,sp,-12
81104b20:	de00012e 	bgeu	sp,et,81104b28 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b24:	003b68fa 	trap	3
81104b28:	dfc00215 	stw	ra,8(sp)
81104b2c:	df000115 	stw	fp,4(sp)
81104b30:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b34:	01400144 	movi	r5,5
81104b38:	01204834 	movhi	r4,33056
81104b3c:	21040004 	addi	r4,r4,4096
81104b40:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b44:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b48:	10000326 	beq	r2,zero,81104b58 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b4c:	00800044 	movi	r2,1
81104b50:	e0bfff15 	stw	r2,-4(fp)
81104b54:	00000106 	br	81104b5c <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b58:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b5c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104b74:	defffc04 	addi	sp,sp,-16
81104b78:	de00012e 	bgeu	sp,et,81104b80 <vFeebInitIrq+0xc>
81104b7c:	003b68fa 	trap	3
81104b80:	dfc00315 	stw	ra,12(sp)
81104b84:	df000215 	stw	fp,8(sp)
81104b88:	df000204 	addi	fp,sp,8
81104b8c:	2005883a 	mov	r2,r4
81104b90:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104b94:	e0bfff03 	ldbu	r2,-4(fp)
81104b98:	10c00268 	cmpgeui	r3,r2,9
81104b9c:	18004f1e 	bne	r3,zero,81104cdc <vFeebInitIrq+0x168>
81104ba0:	100690ba 	slli	r3,r2,2
81104ba4:	00a04434 	movhi	r2,33040
81104ba8:	1092ee04 	addi	r2,r2,19384
81104bac:	1885883a 	add	r2,r3,r2
81104bb0:	10800017 	ldw	r2,0(r2)
81104bb4:	1000683a 	jmp	r2
81104bb8:	81104cdc 	xori	r4,r16,16691
81104bbc:	81104bdc 	xori	r4,r16,16687
81104bc0:	81104bfc 	xorhi	r4,r16,16687
81104bc4:	81104c1c 	xori	r4,r16,16688
81104bc8:	81104c3c 	xorhi	r4,r16,16688
81104bcc:	81104c5c 	xori	r4,r16,16689
81104bd0:	81104c7c 	xorhi	r4,r16,16689
81104bd4:	81104c9c 	xori	r4,r16,16690
81104bd8:	81104cbc 	xorhi	r4,r16,16690
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104bdc:	d0a03d04 	addi	r2,gp,-32524
81104be0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104be4:	01a04434 	movhi	r6,33040
81104be8:	31912504 	addi	r6,r6,17556
81104bec:	e17ffe17 	ldw	r5,-8(fp)
81104bf0:	01000084 	movi	r4,2
81104bf4:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104bf8:	00003806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104bfc:	d0a03e04 	addi	r2,gp,-32520
81104c00:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c04:	01a04434 	movhi	r6,33040
81104c08:	31913504 	addi	r6,r6,17620
81104c0c:	e17ffe17 	ldw	r5,-8(fp)
81104c10:	010000c4 	movi	r4,3
81104c14:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c18:	00003006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c1c:	d0a03f04 	addi	r2,gp,-32516
81104c20:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c24:	01a04434 	movhi	r6,33040
81104c28:	31914504 	addi	r6,r6,17684
81104c2c:	e17ffe17 	ldw	r5,-8(fp)
81104c30:	01000104 	movi	r4,4
81104c34:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104c38:	00002806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104c3c:	d0a04004 	addi	r2,gp,-32512
81104c40:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104c44:	01a04434 	movhi	r6,33040
81104c48:	31915504 	addi	r6,r6,17748
81104c4c:	e17ffe17 	ldw	r5,-8(fp)
81104c50:	01000204 	movi	r4,8
81104c54:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104c58:	00002006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104c5c:	d0a04104 	addi	r2,gp,-32508
81104c60:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104c64:	01a04434 	movhi	r6,33040
81104c68:	31916504 	addi	r6,r6,17812
81104c6c:	e17ffe17 	ldw	r5,-8(fp)
81104c70:	010001c4 	movi	r4,7
81104c74:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104c78:	00001806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104c7c:	d0a04204 	addi	r2,gp,-32504
81104c80:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104c84:	01a04434 	movhi	r6,33040
81104c88:	31917504 	addi	r6,r6,17876
81104c8c:	e17ffe17 	ldw	r5,-8(fp)
81104c90:	01000184 	movi	r4,6
81104c94:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104c98:	00001006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104c9c:	d0a04304 	addi	r2,gp,-32500
81104ca0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104ca4:	01a04434 	movhi	r6,33040
81104ca8:	31918504 	addi	r6,r6,17940
81104cac:	e17ffe17 	ldw	r5,-8(fp)
81104cb0:	01000144 	movi	r4,5
81104cb4:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104cb8:	00000806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104cbc:	d0a04404 	addi	r2,gp,-32496
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104cc4:	01a04434 	movhi	r6,33040
81104cc8:	31919504 	addi	r6,r6,18004
81104ccc:	e17ffe17 	ldw	r5,-8(fp)
81104cd0:	01000244 	movi	r4,9
81104cd4:	11274d00 	call	811274d0 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104cd8:	0001883a 	nop
	}
}
81104cdc:	0001883a 	nop
81104ce0:	e037883a 	mov	sp,fp
81104ce4:	dfc00117 	ldw	ra,4(sp)
81104ce8:	df000017 	ldw	fp,0(sp)
81104cec:	dec00204 	addi	sp,sp,8
81104cf0:	f800283a 	ret

81104cf4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104cf4:	defffb04 	addi	sp,sp,-20
81104cf8:	de00012e 	bgeu	sp,et,81104d00 <bFeebSetIrqControl+0xc>
81104cfc:	003b68fa 	trap	3
81104d00:	dfc00415 	stw	ra,16(sp)
81104d04:	df000315 	stw	fp,12(sp)
81104d08:	df000304 	addi	fp,sp,12
81104d0c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d10:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d14:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	10002426 	beq	r2,zero,81104db0 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d20:	e0bfff17 	ldw	r2,-4(fp)
81104d24:	10800017 	ldw	r2,0(r2)
81104d28:	01400104 	movi	r5,4
81104d2c:	1009883a 	mov	r4,r2
81104d30:	110512c0 	call	8110512c <uliFeebReadReg>
81104d34:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104d38:	e0bfff17 	ldw	r2,-4(fp)
81104d3c:	10800217 	ldw	r2,8(r2)
81104d40:	10000426 	beq	r2,zero,81104d54 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10804014 	ori	r2,r2,256
81104d4c:	e0bffe15 	stw	r2,-8(fp)
81104d50:	00000406 	br	81104d64 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104d54:	e0fffe17 	ldw	r3,-8(fp)
81104d58:	00bfbfc4 	movi	r2,-257
81104d5c:	1884703a 	and	r2,r3,r2
81104d60:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104d64:	e0bfff17 	ldw	r2,-4(fp)
81104d68:	10800317 	ldw	r2,12(r2)
81104d6c:	10000426 	beq	r2,zero,81104d80 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10800054 	ori	r2,r2,1
81104d78:	e0bffe15 	stw	r2,-8(fp)
81104d7c:	00000406 	br	81104d90 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104d80:	e0fffe17 	ldw	r3,-8(fp)
81104d84:	00bfff84 	movi	r2,-2
81104d88:	1884703a 	and	r2,r3,r2
81104d8c:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	e1bffe17 	ldw	r6,-8(fp)
81104d9c:	01400104 	movi	r5,4
81104da0:	1009883a 	mov	r4,r2
81104da4:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104da8:	00800044 	movi	r2,1
81104dac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104db0:	e0bffd17 	ldw	r2,-12(fp)
}
81104db4:	e037883a 	mov	sp,fp
81104db8:	dfc00117 	ldw	ra,4(sp)
81104dbc:	df000017 	ldw	fp,0(sp)
81104dc0:	dec00204 	addi	sp,sp,8
81104dc4:	f800283a 	ret

81104dc8 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104dc8:	defffb04 	addi	sp,sp,-20
81104dcc:	de00012e 	bgeu	sp,et,81104dd4 <bFeebGetIrqControl+0xc>
81104dd0:	003b68fa 	trap	3
81104dd4:	dfc00415 	stw	ra,16(sp)
81104dd8:	df000315 	stw	fp,12(sp)
81104ddc:	df000304 	addi	fp,sp,12
81104de0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104de4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104de8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104dec:	e0bfff17 	ldw	r2,-4(fp)
81104df0:	10001a26 	beq	r2,zero,81104e5c <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104df4:	e0bfff17 	ldw	r2,-4(fp)
81104df8:	10800017 	ldw	r2,0(r2)
81104dfc:	01400104 	movi	r5,4
81104e00:	1009883a 	mov	r4,r2
81104e04:	110512c0 	call	8110512c <uliFeebReadReg>
81104e08:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e0c:	e0bffe17 	ldw	r2,-8(fp)
81104e10:	1080400c 	andi	r2,r2,256
81104e14:	10000426 	beq	r2,zero,81104e28 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e18:	e0bfff17 	ldw	r2,-4(fp)
81104e1c:	00c00044 	movi	r3,1
81104e20:	10c00215 	stw	r3,8(r2)
81104e24:	00000206 	br	81104e30 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e28:	e0bfff17 	ldw	r2,-4(fp)
81104e2c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104e30:	e0bffe17 	ldw	r2,-8(fp)
81104e34:	1080004c 	andi	r2,r2,1
81104e38:	10000426 	beq	r2,zero,81104e4c <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104e3c:	e0bfff17 	ldw	r2,-4(fp)
81104e40:	00c00044 	movi	r3,1
81104e44:	10c00315 	stw	r3,12(r2)
81104e48:	00000206 	br	81104e54 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104e4c:	e0bfff17 	ldw	r2,-4(fp)
81104e50:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104e54:	00800044 	movi	r2,1
81104e58:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e5c:	e0bffd17 	ldw	r2,-12(fp)
}
81104e60:	e037883a 	mov	sp,fp
81104e64:	dfc00117 	ldw	ra,4(sp)
81104e68:	df000017 	ldw	fp,0(sp)
81104e6c:	dec00204 	addi	sp,sp,8
81104e70:	f800283a 	ret

81104e74 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104e74:	defffb04 	addi	sp,sp,-20
81104e78:	de00012e 	bgeu	sp,et,81104e80 <bFeebGetIrqFlags+0xc>
81104e7c:	003b68fa 	trap	3
81104e80:	dfc00415 	stw	ra,16(sp)
81104e84:	df000315 	stw	fp,12(sp)
81104e88:	df000304 	addi	fp,sp,12
81104e8c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e90:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e94:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10001126 	beq	r2,zero,81104ee4 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104ea0:	e0bfff17 	ldw	r2,-4(fp)
81104ea4:	10800017 	ldw	r2,0(r2)
81104ea8:	01400144 	movi	r5,5
81104eac:	1009883a 	mov	r4,r2
81104eb0:	110512c0 	call	8110512c <uliFeebReadReg>
81104eb4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104eb8:	e0bffe17 	ldw	r2,-8(fp)
81104ebc:	1080004c 	andi	r2,r2,1
81104ec0:	10000426 	beq	r2,zero,81104ed4 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104ec4:	e0bfff17 	ldw	r2,-4(fp)
81104ec8:	00c00044 	movi	r3,1
81104ecc:	10c00415 	stw	r3,16(r2)
81104ed0:	00000206 	br	81104edc <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104ed4:	e0bfff17 	ldw	r2,-4(fp)
81104ed8:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104edc:	00800044 	movi	r2,1
81104ee0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ee4:	e0bffd17 	ldw	r2,-12(fp)
}
81104ee8:	e037883a 	mov	sp,fp
81104eec:	dfc00117 	ldw	ra,4(sp)
81104ef0:	df000017 	ldw	fp,0(sp)
81104ef4:	dec00204 	addi	sp,sp,8
81104ef8:	f800283a 	ret

81104efc <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104efc:	defffb04 	addi	sp,sp,-20
81104f00:	de00012e 	bgeu	sp,et,81104f08 <bFeebSetWindowing+0xc>
81104f04:	003b68fa 	trap	3
81104f08:	dfc00415 	stw	ra,16(sp)
81104f0c:	df000315 	stw	fp,12(sp)
81104f10:	df000304 	addi	fp,sp,12
81104f14:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f18:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f1c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	10001926 	beq	r2,zero,81104f8c <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f28:	e0bfff17 	ldw	r2,-4(fp)
81104f2c:	10800017 	ldw	r2,0(r2)
81104f30:	000b883a 	mov	r5,zero
81104f34:	1009883a 	mov	r4,r2
81104f38:	110512c0 	call	8110512c <uliFeebReadReg>
81104f3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104f40:	e0bfff17 	ldw	r2,-4(fp)
81104f44:	10800117 	ldw	r2,4(r2)
81104f48:	10000426 	beq	r2,zero,81104f5c <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10804014 	ori	r2,r2,256
81104f54:	e0bffe15 	stw	r2,-8(fp)
81104f58:	00000406 	br	81104f6c <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104f5c:	e0fffe17 	ldw	r3,-8(fp)
81104f60:	00bfbfc4 	movi	r2,-257
81104f64:	1884703a 	and	r2,r3,r2
81104f68:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104f6c:	e0bfff17 	ldw	r2,-4(fp)
81104f70:	10800017 	ldw	r2,0(r2)
81104f74:	e1bffe17 	ldw	r6,-8(fp)
81104f78:	000b883a 	mov	r5,zero
81104f7c:	1009883a 	mov	r4,r2
81104f80:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f8c:	e0bffd17 	ldw	r2,-12(fp)
}
81104f90:	e037883a 	mov	sp,fp
81104f94:	dfc00117 	ldw	ra,4(sp)
81104f98:	df000017 	ldw	fp,0(sp)
81104f9c:	dec00204 	addi	sp,sp,8
81104fa0:	f800283a 	ret

81104fa4 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104fa4:	defffb04 	addi	sp,sp,-20
81104fa8:	de00012e 	bgeu	sp,et,81104fb0 <bFeebGetWindowing+0xc>
81104fac:	003b68fa 	trap	3
81104fb0:	dfc00415 	stw	ra,16(sp)
81104fb4:	df000315 	stw	fp,12(sp)
81104fb8:	df000304 	addi	fp,sp,12
81104fbc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104fc0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104fc4:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104fc8:	e0bfff17 	ldw	r2,-4(fp)
81104fcc:	10001126 	beq	r2,zero,81105014 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104fd0:	e0bfff17 	ldw	r2,-4(fp)
81104fd4:	10800017 	ldw	r2,0(r2)
81104fd8:	000b883a 	mov	r5,zero
81104fdc:	1009883a 	mov	r4,r2
81104fe0:	110512c0 	call	8110512c <uliFeebReadReg>
81104fe4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104fe8:	e0bffe17 	ldw	r2,-8(fp)
81104fec:	1080400c 	andi	r2,r2,256
81104ff0:	10000426 	beq	r2,zero,81105004 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81104ff4:	e0bfff17 	ldw	r2,-4(fp)
81104ff8:	00c00044 	movi	r3,1
81104ffc:	10c00115 	stw	r3,4(r2)
81105000:	00000206 	br	8110500c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105004:	e0bfff17 	ldw	r2,-4(fp)
81105008:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105014:	e0bffd17 	ldw	r2,-12(fp)
}
81105018:	e037883a 	mov	sp,fp
8110501c:	dfc00117 	ldw	ra,4(sp)
81105020:	df000017 	ldw	fp,0(sp)
81105024:	dec00204 	addi	sp,sp,8
81105028:	f800283a 	ret

8110502c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110502c:	defffb04 	addi	sp,sp,-20
81105030:	de00012e 	bgeu	sp,et,81105038 <bFeebGetBuffersStatus+0xc>
81105034:	003b68fa 	trap	3
81105038:	dfc00415 	stw	ra,16(sp)
8110503c:	df000315 	stw	fp,12(sp)
81105040:	df000304 	addi	fp,sp,12
81105044:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105048:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110504c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105050:	e0bfff17 	ldw	r2,-4(fp)
81105054:	10001a26 	beq	r2,zero,811050c0 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105058:	e0bfff17 	ldw	r2,-4(fp)
8110505c:	10800017 	ldw	r2,0(r2)
81105060:	01400184 	movi	r5,6
81105064:	1009883a 	mov	r4,r2
81105068:	110512c0 	call	8110512c <uliFeebReadReg>
8110506c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
81105070:	e0bffe17 	ldw	r2,-8(fp)
81105074:	1080400c 	andi	r2,r2,256
81105078:	10000426 	beq	r2,zero,8110508c <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110507c:	e0bfff17 	ldw	r2,-4(fp)
81105080:	00c00044 	movi	r3,1
81105084:	10c00515 	stw	r3,20(r2)
81105088:	00000206 	br	81105094 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110508c:	e0bfff17 	ldw	r2,-4(fp)
81105090:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105094:	e0bffe17 	ldw	r2,-8(fp)
81105098:	1080004c 	andi	r2,r2,1
8110509c:	10000426 	beq	r2,zero,811050b0 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
811050a0:	e0bfff17 	ldw	r2,-4(fp)
811050a4:	00c00044 	movi	r3,1
811050a8:	10c00615 	stw	r3,24(r2)
811050ac:	00000206 	br	811050b8 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
811050b0:	e0bfff17 	ldw	r2,-4(fp)
811050b4:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811050c0:	e0bffd17 	ldw	r2,-12(fp)
}
811050c4:	e037883a 	mov	sp,fp
811050c8:	dfc00117 	ldw	ra,4(sp)
811050cc:	df000017 	ldw	fp,0(sp)
811050d0:	dec00204 	addi	sp,sp,8
811050d4:	f800283a 	ret

811050d8 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811050d8:	defffc04 	addi	sp,sp,-16
811050dc:	de00012e 	bgeu	sp,et,811050e4 <vFeebWriteReg+0xc>
811050e0:	003b68fa 	trap	3
811050e4:	df000315 	stw	fp,12(sp)
811050e8:	df000304 	addi	fp,sp,12
811050ec:	e13ffd15 	stw	r4,-12(fp)
811050f0:	e17ffe15 	stw	r5,-8(fp)
811050f4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811050f8:	e0bffe17 	ldw	r2,-8(fp)
811050fc:	1085883a 	add	r2,r2,r2
81105100:	1085883a 	add	r2,r2,r2
81105104:	1007883a 	mov	r3,r2
81105108:	e0bffd17 	ldw	r2,-12(fp)
8110510c:	10c5883a 	add	r2,r2,r3
81105110:	e0ffff17 	ldw	r3,-4(fp)
81105114:	10c00015 	stw	r3,0(r2)
}
81105118:	0001883a 	nop
8110511c:	e037883a 	mov	sp,fp
81105120:	df000017 	ldw	fp,0(sp)
81105124:	dec00104 	addi	sp,sp,4
81105128:	f800283a 	ret

8110512c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110512c:	defffc04 	addi	sp,sp,-16
81105130:	de00012e 	bgeu	sp,et,81105138 <uliFeebReadReg+0xc>
81105134:	003b68fa 	trap	3
81105138:	df000315 	stw	fp,12(sp)
8110513c:	df000304 	addi	fp,sp,12
81105140:	e13ffe15 	stw	r4,-8(fp)
81105144:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105148:	e0bfff17 	ldw	r2,-4(fp)
8110514c:	1085883a 	add	r2,r2,r2
81105150:	1085883a 	add	r2,r2,r2
81105154:	1007883a 	mov	r3,r2
81105158:	e0bffe17 	ldw	r2,-8(fp)
8110515c:	10c5883a 	add	r2,r2,r3
81105160:	10800017 	ldw	r2,0(r2)
81105164:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105168:	e0bffd17 	ldw	r2,-12(fp)
}
8110516c:	e037883a 	mov	sp,fp
81105170:	df000017 	ldw	fp,0(sp)
81105174:	dec00104 	addi	sp,sp,4
81105178:	f800283a 	ret

8110517c <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
8110517c:	defffb04 	addi	sp,sp,-20
81105180:	de00012e 	bgeu	sp,et,81105188 <bSpwcSetLink+0xc>
81105184:	003b68fa 	trap	3
81105188:	dfc00415 	stw	ra,16(sp)
8110518c:	df000315 	stw	fp,12(sp)
81105190:	df000304 	addi	fp,sp,12
81105194:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105198:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110519c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10002f26 	beq	r2,zero,81105264 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811051a8:	e0bfff17 	ldw	r2,-4(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	000b883a 	mov	r5,zero
811051b4:	1009883a 	mov	r4,r2
811051b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811051bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
811051c0:	e0bfff17 	ldw	r2,-4(fp)
811051c4:	10800117 	ldw	r2,4(r2)
811051c8:	10000426 	beq	r2,zero,811051dc <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
811051cc:	e0bffe17 	ldw	r2,-8(fp)
811051d0:	10800114 	ori	r2,r2,4
811051d4:	e0bffe15 	stw	r2,-8(fp)
811051d8:	00000406 	br	811051ec <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
811051dc:	e0fffe17 	ldw	r3,-8(fp)
811051e0:	00bffec4 	movi	r2,-5
811051e4:	1884703a 	and	r2,r3,r2
811051e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
811051ec:	e0bfff17 	ldw	r2,-4(fp)
811051f0:	10800217 	ldw	r2,8(r2)
811051f4:	10000426 	beq	r2,zero,81105208 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
811051f8:	e0bffe17 	ldw	r2,-8(fp)
811051fc:	10800094 	ori	r2,r2,2
81105200:	e0bffe15 	stw	r2,-8(fp)
81105204:	00000406 	br	81105218 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105208:	e0fffe17 	ldw	r3,-8(fp)
8110520c:	00bfff44 	movi	r2,-3
81105210:	1884703a 	and	r2,r3,r2
81105214:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800317 	ldw	r2,12(r2)
81105220:	10000426 	beq	r2,zero,81105234 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105224:	e0bffe17 	ldw	r2,-8(fp)
81105228:	10800054 	ori	r2,r2,1
8110522c:	e0bffe15 	stw	r2,-8(fp)
81105230:	00000406 	br	81105244 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81105234:	e0fffe17 	ldw	r3,-8(fp)
81105238:	00bfff84 	movi	r2,-2
8110523c:	1884703a 	and	r2,r3,r2
81105240:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81105244:	e0bfff17 	ldw	r2,-4(fp)
81105248:	10800017 	ldw	r2,0(r2)
8110524c:	e1bffe17 	ldw	r6,-8(fp)
81105250:	000b883a 	mov	r5,zero
81105254:	1009883a 	mov	r4,r2
81105258:	11056880 	call	81105688 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
8110525c:	00800044 	movi	r2,1
81105260:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105264:	e0bffd17 	ldw	r2,-12(fp)
}
81105268:	e037883a 	mov	sp,fp
8110526c:	dfc00117 	ldw	ra,4(sp)
81105270:	df000017 	ldw	fp,0(sp)
81105274:	dec00204 	addi	sp,sp,8
81105278:	f800283a 	ret

8110527c <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
8110527c:	defffb04 	addi	sp,sp,-20
81105280:	de00012e 	bgeu	sp,et,81105288 <bSpwcGetLink+0xc>
81105284:	003b68fa 	trap	3
81105288:	dfc00415 	stw	ra,16(sp)
8110528c:	df000315 	stw	fp,12(sp)
81105290:	df000304 	addi	fp,sp,12
81105294:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105298:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110529c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811052a0:	e0bfff17 	ldw	r2,-4(fp)
811052a4:	10002326 	beq	r2,zero,81105334 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811052a8:	e0bfff17 	ldw	r2,-4(fp)
811052ac:	10800017 	ldw	r2,0(r2)
811052b0:	000b883a 	mov	r5,zero
811052b4:	1009883a 	mov	r4,r2
811052b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811052bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
811052c0:	e0bffe17 	ldw	r2,-8(fp)
811052c4:	1080010c 	andi	r2,r2,4
811052c8:	10000426 	beq	r2,zero,811052dc <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
811052cc:	e0bfff17 	ldw	r2,-4(fp)
811052d0:	00c00044 	movi	r3,1
811052d4:	10c00115 	stw	r3,4(r2)
811052d8:	00000206 	br	811052e4 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
811052dc:	e0bfff17 	ldw	r2,-4(fp)
811052e0:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
811052e4:	e0bffe17 	ldw	r2,-8(fp)
811052e8:	1080008c 	andi	r2,r2,2
811052ec:	10000426 	beq	r2,zero,81105300 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
811052f0:	e0bfff17 	ldw	r2,-4(fp)
811052f4:	00c00044 	movi	r3,1
811052f8:	10c00215 	stw	r3,8(r2)
811052fc:	00000206 	br	81105308 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105300:	e0bfff17 	ldw	r2,-4(fp)
81105304:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105308:	e0bffe17 	ldw	r2,-8(fp)
8110530c:	1080004c 	andi	r2,r2,1
81105310:	10000426 	beq	r2,zero,81105324 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105314:	e0bfff17 	ldw	r2,-4(fp)
81105318:	00c00044 	movi	r3,1
8110531c:	10c00315 	stw	r3,12(r2)
81105320:	00000206 	br	8110532c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105334:	e0bffd17 	ldw	r2,-12(fp)
}
81105338:	e037883a 	mov	sp,fp
8110533c:	dfc00117 	ldw	ra,4(sp)
81105340:	df000017 	ldw	fp,0(sp)
81105344:	dec00204 	addi	sp,sp,8
81105348:	f800283a 	ret

8110534c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
8110534c:	defffb04 	addi	sp,sp,-20
81105350:	de00012e 	bgeu	sp,et,81105358 <bSpwcGetLinkError+0xc>
81105354:	003b68fa 	trap	3
81105358:	dfc00415 	stw	ra,16(sp)
8110535c:	df000315 	stw	fp,12(sp)
81105360:	df000304 	addi	fp,sp,12
81105364:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105368:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110536c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10002c26 	beq	r2,zero,81105428 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105378:	e0bfff17 	ldw	r2,-4(fp)
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	01400044 	movi	r5,1
81105384:	1009883a 	mov	r4,r2
81105388:	11056dc0 	call	811056dc <uliSpwcReadReg>
8110538c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	1082000c 	andi	r2,r2,2048
81105398:	10000426 	beq	r2,zero,811053ac <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110539c:	e0bfff17 	ldw	r2,-4(fp)
811053a0:	00c00044 	movi	r3,1
811053a4:	10c00415 	stw	r3,16(r2)
811053a8:	00000206 	br	811053b4 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
811053b4:	e0bffe17 	ldw	r2,-8(fp)
811053b8:	1081000c 	andi	r2,r2,1024
811053bc:	10000426 	beq	r2,zero,811053d0 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
811053c0:	e0bfff17 	ldw	r2,-4(fp)
811053c4:	00c00044 	movi	r3,1
811053c8:	10c00515 	stw	r3,20(r2)
811053cc:	00000206 	br	811053d8 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
811053d0:	e0bfff17 	ldw	r2,-4(fp)
811053d4:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
811053d8:	e0bffe17 	ldw	r2,-8(fp)
811053dc:	1080800c 	andi	r2,r2,512
811053e0:	10000426 	beq	r2,zero,811053f4 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
811053e4:	e0bfff17 	ldw	r2,-4(fp)
811053e8:	00c00044 	movi	r3,1
811053ec:	10c00615 	stw	r3,24(r2)
811053f0:	00000206 	br	811053fc <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811053f4:	e0bfff17 	ldw	r2,-4(fp)
811053f8:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	1080400c 	andi	r2,r2,256
81105404:	10000426 	beq	r2,zero,81105418 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105408:	e0bfff17 	ldw	r2,-4(fp)
8110540c:	00c00044 	movi	r3,1
81105410:	10c00715 	stw	r3,28(r2)
81105414:	00000206 	br	81105420 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105418:	e0bfff17 	ldw	r2,-4(fp)
8110541c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105420:	00800044 	movi	r2,1
81105424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105428:	e0bffd17 	ldw	r2,-12(fp)
}
8110542c:	e037883a 	mov	sp,fp
81105430:	dfc00117 	ldw	ra,4(sp)
81105434:	df000017 	ldw	fp,0(sp)
81105438:	dec00204 	addi	sp,sp,8
8110543c:	f800283a 	ret

81105440 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81105440:	defffb04 	addi	sp,sp,-20
81105444:	de00012e 	bgeu	sp,et,8110544c <bSpwcGetLinkStatus+0xc>
81105448:	003b68fa 	trap	3
8110544c:	dfc00415 	stw	ra,16(sp)
81105450:	df000315 	stw	fp,12(sp)
81105454:	df000304 	addi	fp,sp,12
81105458:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110545c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105460:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10002326 	beq	r2,zero,811054f8 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110546c:	e0bfff17 	ldw	r2,-4(fp)
81105470:	10800017 	ldw	r2,0(r2)
81105474:	01400044 	movi	r5,1
81105478:	1009883a 	mov	r4,r2
8110547c:	11056dc0 	call	811056dc <uliSpwcReadReg>
81105480:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	1080010c 	andi	r2,r2,4
8110548c:	10000426 	beq	r2,zero,811054a0 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105490:	e0bfff17 	ldw	r2,-4(fp)
81105494:	00c00044 	movi	r3,1
81105498:	10c00815 	stw	r3,32(r2)
8110549c:	00000206 	br	811054a8 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
811054a0:	e0bfff17 	ldw	r2,-4(fp)
811054a4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
811054a8:	e0bffe17 	ldw	r2,-8(fp)
811054ac:	1080008c 	andi	r2,r2,2
811054b0:	10000426 	beq	r2,zero,811054c4 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
811054b4:	e0bfff17 	ldw	r2,-4(fp)
811054b8:	00c00044 	movi	r3,1
811054bc:	10c00915 	stw	r3,36(r2)
811054c0:	00000206 	br	811054cc <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
811054c4:	e0bfff17 	ldw	r2,-4(fp)
811054c8:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
811054cc:	e0bffe17 	ldw	r2,-8(fp)
811054d0:	1080004c 	andi	r2,r2,1
811054d4:	10000426 	beq	r2,zero,811054e8 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
811054d8:	e0bfff17 	ldw	r2,-4(fp)
811054dc:	00c00044 	movi	r3,1
811054e0:	10c00a15 	stw	r3,40(r2)
811054e4:	00000206 	br	811054f0 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
811054e8:	e0bfff17 	ldw	r2,-4(fp)
811054ec:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
811054f0:	00800044 	movi	r2,1
811054f4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811054f8:	e0bffd17 	ldw	r2,-12(fp)
}
811054fc:	e037883a 	mov	sp,fp
81105500:	dfc00117 	ldw	ra,4(sp)
81105504:	df000017 	ldw	fp,0(sp)
81105508:	dec00204 	addi	sp,sp,8
8110550c:	f800283a 	ret

81105510 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105510:	defffb04 	addi	sp,sp,-20
81105514:	de00012e 	bgeu	sp,et,8110551c <bSpwcInitCh+0xc>
81105518:	003b68fa 	trap	3
8110551c:	dfc00415 	stw	ra,16(sp)
81105520:	df000315 	stw	fp,12(sp)
81105524:	df000304 	addi	fp,sp,12
81105528:	e13ffe15 	stw	r4,-8(fp)
8110552c:	2805883a 	mov	r2,r5
81105530:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105534:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	10004c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
		bStatus = TRUE;
81105540:	00800044 	movi	r2,1
81105544:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105548:	e0bfff03 	ldbu	r2,-4(fp)
8110554c:	10c00268 	cmpgeui	r3,r2,9
81105550:	1800371e 	bne	r3,zero,81105630 <bSpwcInitCh+0x120>
81105554:	100690ba 	slli	r3,r2,2
81105558:	00a04434 	movhi	r2,33040
8110555c:	10955b04 	addi	r2,r2,21868
81105560:	1885883a 	add	r2,r3,r2
81105564:	10800017 	ldw	r2,0(r2)
81105568:	1000683a 	jmp	r2
8110556c:	81105630 	cmpltui	r4,r16,16728
81105570:	81105590 	cmplti	r4,r16,16726
81105574:	811055a4 	muli	r4,r16,16726
81105578:	811055b8 	rdprs	r4,r16,16726
8110557c:	811055cc 	andi	r4,r16,16727
81105580:	811055e0 	cmpeqi	r4,r16,16727
81105584:	811055f4 	orhi	r4,r16,16727
81105588:	81105608 	cmpgei	r4,r16,16728
8110558c:	8110561c 	xori	r4,r16,16728
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105590:	e0fffe17 	ldw	r3,-8(fp)
81105594:	00a04834 	movhi	r2,33056
81105598:	108b0004 	addi	r2,r2,11264
8110559c:	18800015 	stw	r2,0(r3)
			break;
811055a0:	00002506 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
811055a4:	e0fffe17 	ldw	r3,-8(fp)
811055a8:	00a04834 	movhi	r2,33056
811055ac:	108a0004 	addi	r2,r2,10240
811055b0:	18800015 	stw	r2,0(r3)
			break;
811055b4:	00002006 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
811055b8:	e0fffe17 	ldw	r3,-8(fp)
811055bc:	00a04834 	movhi	r2,33056
811055c0:	10890004 	addi	r2,r2,9216
811055c4:	18800015 	stw	r2,0(r3)
			break;
811055c8:	00001b06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
811055cc:	e0fffe17 	ldw	r3,-8(fp)
811055d0:	00a04834 	movhi	r2,33056
811055d4:	10880004 	addi	r2,r2,8192
811055d8:	18800015 	stw	r2,0(r3)
			break;
811055dc:	00001606 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811055e0:	e0fffe17 	ldw	r3,-8(fp)
811055e4:	00a04834 	movhi	r2,33056
811055e8:	10870004 	addi	r2,r2,7168
811055ec:	18800015 	stw	r2,0(r3)
			break;
811055f0:	00001106 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811055f4:	e0fffe17 	ldw	r3,-8(fp)
811055f8:	00a04834 	movhi	r2,33056
811055fc:	10860004 	addi	r2,r2,6144
81105600:	18800015 	stw	r2,0(r3)
			break;
81105604:	00000c06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105608:	e0fffe17 	ldw	r3,-8(fp)
8110560c:	00a04834 	movhi	r2,33056
81105610:	10850004 	addi	r2,r2,5120
81105614:	18800015 	stw	r2,0(r3)
			break;
81105618:	00000706 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110561c:	e0fffe17 	ldw	r3,-8(fp)
81105620:	00a04834 	movhi	r2,33056
81105624:	10840004 	addi	r2,r2,4096
81105628:	18800015 	stw	r2,0(r3)
			break;
8110562c:	00000206 	br	81105638 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
81105630:	e03ffd15 	stw	zero,-12(fp)
			break;
81105634:	0001883a 	nop
		}

		if (bStatus) {
81105638:	e0bffd17 	ldw	r2,-12(fp)
8110563c:	10000c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81105640:	e13ffe17 	ldw	r4,-8(fp)
81105644:	110527c0 	call	8110527c <bSpwcGetLink>
81105648:	1000011e 	bne	r2,zero,81105650 <bSpwcInitCh+0x140>
				bStatus = FALSE;
8110564c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81105650:	e13ffe17 	ldw	r4,-8(fp)
81105654:	110534c0 	call	8110534c <bSpwcGetLinkError>
81105658:	1000011e 	bne	r2,zero,81105660 <bSpwcInitCh+0x150>
				bStatus = FALSE;
8110565c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81105660:	e13ffe17 	ldw	r4,-8(fp)
81105664:	11054400 	call	81105440 <bSpwcGetLinkStatus>
81105668:	1000011e 	bne	r2,zero,81105670 <bSpwcInitCh+0x160>
				bStatus = FALSE;
8110566c:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81105670:	e0bffd17 	ldw	r2,-12(fp)
}
81105674:	e037883a 	mov	sp,fp
81105678:	dfc00117 	ldw	ra,4(sp)
8110567c:	df000017 	ldw	fp,0(sp)
81105680:	dec00204 	addi	sp,sp,8
81105684:	f800283a 	ret

81105688 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105688:	defffc04 	addi	sp,sp,-16
8110568c:	de00012e 	bgeu	sp,et,81105694 <vSpwcWriteReg+0xc>
81105690:	003b68fa 	trap	3
81105694:	df000315 	stw	fp,12(sp)
81105698:	df000304 	addi	fp,sp,12
8110569c:	e13ffd15 	stw	r4,-12(fp)
811056a0:	e17ffe15 	stw	r5,-8(fp)
811056a4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811056a8:	e0bffe17 	ldw	r2,-8(fp)
811056ac:	1085883a 	add	r2,r2,r2
811056b0:	1085883a 	add	r2,r2,r2
811056b4:	1007883a 	mov	r3,r2
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	10c5883a 	add	r2,r2,r3
811056c0:	e0ffff17 	ldw	r3,-4(fp)
811056c4:	10c00015 	stw	r3,0(r2)
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	df000017 	ldw	fp,0(sp)
811056d4:	dec00104 	addi	sp,sp,4
811056d8:	f800283a 	ret

811056dc <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811056dc:	defffc04 	addi	sp,sp,-16
811056e0:	de00012e 	bgeu	sp,et,811056e8 <uliSpwcReadReg+0xc>
811056e4:	003b68fa 	trap	3
811056e8:	df000315 	stw	fp,12(sp)
811056ec:	df000304 	addi	fp,sp,12
811056f0:	e13ffe15 	stw	r4,-8(fp)
811056f4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	1085883a 	add	r2,r2,r2
81105700:	1085883a 	add	r2,r2,r2
81105704:	1007883a 	mov	r3,r2
81105708:	e0bffe17 	ldw	r2,-8(fp)
8110570c:	10c5883a 	add	r2,r2,r3
81105710:	10800017 	ldw	r2,0(r2)
81105714:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105718:	e0bffd17 	ldw	r2,-12(fp)
}
8110571c:	e037883a 	mov	sp,fp
81105720:	df000017 	ldw	fp,0(sp)
81105724:	dec00104 	addi	sp,sp,4
81105728:	f800283a 	ret

8110572c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110572c:	defffe04 	addi	sp,sp,-8
81105730:	de00012e 	bgeu	sp,et,81105738 <bEnableIsoDrivers+0xc>
81105734:	003b68fa 	trap	3
81105738:	dfc00115 	stw	ra,4(sp)
8110573c:	df000015 	stw	fp,0(sp)
81105740:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81105744:	01400204 	movi	r5,8
81105748:	01000044 	movi	r4,1
8110574c:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105750:	00800044 	movi	r2,1
}
81105754:	e037883a 	mov	sp,fp
81105758:	dfc00117 	ldw	ra,4(sp)
8110575c:	df000017 	ldw	fp,0(sp)
81105760:	dec00204 	addi	sp,sp,8
81105764:	f800283a 	ret

81105768 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81105768:	defffe04 	addi	sp,sp,-8
8110576c:	de00012e 	bgeu	sp,et,81105774 <bDisableIsoDrivers+0xc>
81105770:	003b68fa 	trap	3
81105774:	dfc00115 	stw	ra,4(sp)
81105778:	df000015 	stw	fp,0(sp)
8110577c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81105780:	01400204 	movi	r5,8
81105784:	0009883a 	mov	r4,zero
81105788:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110578c:	00800044 	movi	r2,1
}
81105790:	e037883a 	mov	sp,fp
81105794:	dfc00117 	ldw	ra,4(sp)
81105798:	df000017 	ldw	fp,0(sp)
8110579c:	dec00204 	addi	sp,sp,8
811057a0:	f800283a 	ret

811057a4 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
811057a4:	defffe04 	addi	sp,sp,-8
811057a8:	de00012e 	bgeu	sp,et,811057b0 <bEnableLvdsBoard+0xc>
811057ac:	003b68fa 	trap	3
811057b0:	dfc00115 	stw	ra,4(sp)
811057b4:	df000015 	stw	fp,0(sp)
811057b8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811057bc:	01400104 	movi	r5,4
811057c0:	01000044 	movi	r4,1
811057c4:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
811057c8:	00800044 	movi	r2,1
}
811057cc:	e037883a 	mov	sp,fp
811057d0:	dfc00117 	ldw	ra,4(sp)
811057d4:	df000017 	ldw	fp,0(sp)
811057d8:	dec00204 	addi	sp,sp,8
811057dc:	f800283a 	ret

811057e0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811057e0:	defffe04 	addi	sp,sp,-8
811057e4:	de00012e 	bgeu	sp,et,811057ec <bDisableLvdsBoard+0xc>
811057e8:	003b68fa 	trap	3
811057ec:	dfc00115 	stw	ra,4(sp)
811057f0:	df000015 	stw	fp,0(sp)
811057f4:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811057f8:	01400104 	movi	r5,4
811057fc:	0009883a 	mov	r4,zero
81105800:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105804:	00800044 	movi	r2,1
}
81105808:	e037883a 	mov	sp,fp
8110580c:	dfc00117 	ldw	ra,4(sp)
81105810:	df000017 	ldw	fp,0(sp)
81105814:	dec00204 	addi	sp,sp,8
81105818:	f800283a 	ret

8110581c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110581c:	defffd04 	addi	sp,sp,-12
81105820:	de00012e 	bgeu	sp,et,81105828 <bSetPreEmphasys+0xc>
81105824:	003b68fa 	trap	3
81105828:	dfc00215 	stw	ra,8(sp)
8110582c:	df000115 	stw	fp,4(sp)
81105830:	df000104 	addi	fp,sp,4
81105834:	2005883a 	mov	r2,r4
81105838:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110583c:	e0bfff03 	ldbu	r2,-4(fp)
81105840:	10c00060 	cmpeqi	r3,r2,1
81105844:	18000d1e 	bne	r3,zero,8110587c <bSetPreEmphasys+0x60>
81105848:	10c00088 	cmpgei	r3,r2,2
8110584c:	1800021e 	bne	r3,zero,81105858 <bSetPreEmphasys+0x3c>
81105850:	10000626 	beq	r2,zero,8110586c <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105854:	00001b06 	br	811058c4 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105858:	10c000a0 	cmpeqi	r3,r2,2
8110585c:	18000e1e 	bne	r3,zero,81105898 <bSetPreEmphasys+0x7c>
81105860:	108000e0 	cmpeqi	r2,r2,3
81105864:	1000131e 	bne	r2,zero,811058b4 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105868:	00001606 	br	811058c4 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110586c:	014000c4 	movi	r5,3
81105870:	0009883a 	mov	r4,zero
81105874:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105878:	00001206 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110587c:	01400084 	movi	r5,2
81105880:	0009883a 	mov	r4,zero
81105884:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105888:	01400044 	movi	r5,1
8110588c:	01000044 	movi	r4,1
81105890:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105894:	00000b06 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105898:	01400044 	movi	r5,1
8110589c:	0009883a 	mov	r4,zero
811058a0:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811058a4:	01400084 	movi	r5,2
811058a8:	01000044 	movi	r4,1
811058ac:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058b0:	00000406 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058b4:	014000c4 	movi	r5,3
811058b8:	01000044 	movi	r4,1
811058bc:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811058c4:	00800044 	movi	r2,1
}
811058c8:	e037883a 	mov	sp,fp
811058cc:	dfc00117 	ldw	ra,4(sp)
811058d0:	df000017 	ldw	fp,0(sp)
811058d4:	dec00204 	addi	sp,sp,8
811058d8:	f800283a 	ret

811058dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811058dc:	defffd04 	addi	sp,sp,-12
811058e0:	de00012e 	bgeu	sp,et,811058e8 <bCtrlIoLvdsDrive+0xc>
811058e4:	003b68fa 	trap	3
811058e8:	df000215 	stw	fp,8(sp)
811058ec:	df000204 	addi	fp,sp,8
811058f0:	e13ffe15 	stw	r4,-8(fp)
811058f4:	2805883a 	mov	r2,r5
811058f8:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811058fc:	e0bffe17 	ldw	r2,-8(fp)
81105900:	1000071e 	bne	r2,zero,81105920 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105904:	e0bfff03 	ldbu	r2,-4(fp)
81105908:	0084303a 	nor	r2,zero,r2
8110590c:	1007883a 	mov	r3,r2
81105910:	d0a00103 	ldbu	r2,-32764(gp)
81105914:	1884703a 	and	r2,r3,r2
81105918:	d0a00105 	stb	r2,-32764(gp)
8110591c:	00000406 	br	81105930 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105920:	d0e00103 	ldbu	r3,-32764(gp)
81105924:	e0bfff03 	ldbu	r2,-4(fp)
81105928:	1884b03a 	or	r2,r3,r2
8110592c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105930:	d0a00103 	ldbu	r2,-32764(gp)
81105934:	10c03fcc 	andi	r3,r2,255
81105938:	00a00034 	movhi	r2,32768
8110593c:	10822804 	addi	r2,r2,2208
81105940:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81105944:	00800044 	movi	r2,1
}
81105948:	e037883a 	mov	sp,fp
8110594c:	df000017 	ldw	fp,0(sp)
81105950:	dec00104 	addi	sp,sp,4
81105954:	f800283a 	ret

81105958 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105958:	defffa04 	addi	sp,sp,-24
8110595c:	de00012e 	bgeu	sp,et,81105964 <I2C_TestAdress+0xc>
81105960:	003b68fa 	trap	3
81105964:	dfc00515 	stw	ra,20(sp)
81105968:	df000415 	stw	fp,16(sp)
8110596c:	df000404 	addi	fp,sp,16
81105970:	e13ffd15 	stw	r4,-12(fp)
81105974:	e17ffe15 	stw	r5,-8(fp)
81105978:	3005883a 	mov	r2,r6
8110597c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105988:	e17ffe17 	ldw	r5,-8(fp)
8110598c:	e13ffd17 	ldw	r4,-12(fp)
81105990:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	10803fcc 	andi	r2,r2,255
8110599c:	100d883a 	mov	r6,r2
811059a0:	e17ffe17 	ldw	r5,-8(fp)
811059a4:	e13ffd17 	ldw	r4,-12(fp)
811059a8:	1105e3c0 	call	81105e3c <i2c_write>
811059ac:	1000011e 	bne	r2,zero,811059b4 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
811059b0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811059b4:	e17ffe17 	ldw	r5,-8(fp)
811059b8:	e13ffd17 	ldw	r4,-12(fp)
811059bc:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811059c0:	0106d604 	movi	r4,7000
811059c4:	1127ffc0 	call	81127ffc <usleep>
    
    return bSuccess;
811059c8:	e0bffc17 	ldw	r2,-16(fp)

}
811059cc:	e037883a 	mov	sp,fp
811059d0:	dfc00117 	ldw	ra,4(sp)
811059d4:	df000017 	ldw	fp,0(sp)
811059d8:	dec00204 	addi	sp,sp,8
811059dc:	f800283a 	ret

811059e0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811059e0:	defff804 	addi	sp,sp,-32
811059e4:	de00012e 	bgeu	sp,et,811059ec <I2C_Write+0xc>
811059e8:	003b68fa 	trap	3
811059ec:	dfc00715 	stw	ra,28(sp)
811059f0:	df000615 	stw	fp,24(sp)
811059f4:	df000604 	addi	fp,sp,24
811059f8:	e13ffb15 	stw	r4,-20(fp)
811059fc:	e17ffc15 	stw	r5,-16(fp)
81105a00:	3009883a 	mov	r4,r6
81105a04:	3807883a 	mov	r3,r7
81105a08:	e0800217 	ldw	r2,8(fp)
81105a0c:	e13ffd05 	stb	r4,-12(fp)
81105a10:	e0fffe05 	stb	r3,-8(fp)
81105a14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a18:	00800044 	movi	r2,1
81105a1c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a20:	e17ffc17 	ldw	r5,-16(fp)
81105a24:	e13ffb17 	ldw	r4,-20(fp)
81105a28:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a2c:	e0bffd03 	ldbu	r2,-12(fp)
81105a30:	10803fcc 	andi	r2,r2,255
81105a34:	100d883a 	mov	r6,r2
81105a38:	e17ffc17 	ldw	r5,-16(fp)
81105a3c:	e13ffb17 	ldw	r4,-20(fp)
81105a40:	1105e3c0 	call	81105e3c <i2c_write>
81105a44:	1000011e 	bne	r2,zero,81105a4c <I2C_Write+0x6c>
        bSuccess = FALSE;
81105a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105a4c:	e0bffa17 	ldw	r2,-24(fp)
81105a50:	10000726 	beq	r2,zero,81105a70 <I2C_Write+0x90>
81105a54:	e0bffe03 	ldbu	r2,-8(fp)
81105a58:	100d883a 	mov	r6,r2
81105a5c:	e17ffc17 	ldw	r5,-16(fp)
81105a60:	e13ffb17 	ldw	r4,-20(fp)
81105a64:	1105e3c0 	call	81105e3c <i2c_write>
81105a68:	1000011e 	bne	r2,zero,81105a70 <I2C_Write+0x90>
        bSuccess = FALSE;
81105a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105a70:	e0bffa17 	ldw	r2,-24(fp)
81105a74:	10000726 	beq	r2,zero,81105a94 <I2C_Write+0xb4>
81105a78:	e0bfff03 	ldbu	r2,-4(fp)
81105a7c:	100d883a 	mov	r6,r2
81105a80:	e17ffc17 	ldw	r5,-16(fp)
81105a84:	e13ffb17 	ldw	r4,-20(fp)
81105a88:	1105e3c0 	call	81105e3c <i2c_write>
81105a8c:	1000011e 	bne	r2,zero,81105a94 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105a90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	e13ffb17 	ldw	r4,-20(fp)
81105a9c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105aa0:	0106d604 	movi	r4,7000
81105aa4:	1127ffc0 	call	81127ffc <usleep>
    
    return bSuccess;
81105aa8:	e0bffa17 	ldw	r2,-24(fp)

}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105ac0:	defff904 	addi	sp,sp,-28
81105ac4:	de00012e 	bgeu	sp,et,81105acc <I2C_Read+0xc>
81105ac8:	003b68fa 	trap	3
81105acc:	dfc00615 	stw	ra,24(sp)
81105ad0:	df000515 	stw	fp,20(sp)
81105ad4:	df000504 	addi	fp,sp,20
81105ad8:	e13ffc15 	stw	r4,-16(fp)
81105adc:	e17ffd15 	stw	r5,-12(fp)
81105ae0:	3007883a 	mov	r3,r6
81105ae4:	3805883a 	mov	r2,r7
81105ae8:	e0fffe05 	stb	r3,-8(fp)
81105aec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105af0:	00800044 	movi	r2,1
81105af4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105af8:	e17ffd17 	ldw	r5,-12(fp)
81105afc:	e13ffc17 	ldw	r4,-16(fp)
81105b00:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b04:	e0bffe03 	ldbu	r2,-8(fp)
81105b08:	10803fcc 	andi	r2,r2,255
81105b0c:	100d883a 	mov	r6,r2
81105b10:	e17ffd17 	ldw	r5,-12(fp)
81105b14:	e13ffc17 	ldw	r4,-16(fp)
81105b18:	1105e3c0 	call	81105e3c <i2c_write>
81105b1c:	1000011e 	bne	r2,zero,81105b24 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b24:	e0bffb17 	ldw	r2,-20(fp)
81105b28:	10000726 	beq	r2,zero,81105b48 <I2C_Read+0x88>
81105b2c:	e0bfff03 	ldbu	r2,-4(fp)
81105b30:	100d883a 	mov	r6,r2
81105b34:	e17ffd17 	ldw	r5,-12(fp)
81105b38:	e13ffc17 	ldw	r4,-16(fp)
81105b3c:	1105e3c0 	call	81105e3c <i2c_write>
81105b40:	1000011e 	bne	r2,zero,81105b48 <I2C_Read+0x88>
        bSuccess = FALSE;
81105b44:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105b48:	e17ffd17 	ldw	r5,-12(fp)
81105b4c:	e13ffc17 	ldw	r4,-16(fp)
81105b50:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105b54:	e0bffe03 	ldbu	r2,-8(fp)
81105b58:	10800054 	ori	r2,r2,1
81105b5c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105b60:	e0bffb17 	ldw	r2,-20(fp)
81105b64:	10000826 	beq	r2,zero,81105b88 <I2C_Read+0xc8>
81105b68:	e0bffe03 	ldbu	r2,-8(fp)
81105b6c:	10803fcc 	andi	r2,r2,255
81105b70:	100d883a 	mov	r6,r2
81105b74:	e17ffd17 	ldw	r5,-12(fp)
81105b78:	e13ffc17 	ldw	r4,-16(fp)
81105b7c:	1105e3c0 	call	81105e3c <i2c_write>
81105b80:	1000011e 	bne	r2,zero,81105b88 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105b84:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105b88:	e0bffb17 	ldw	r2,-20(fp)
81105b8c:	10000526 	beq	r2,zero,81105ba4 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105b90:	000f883a 	mov	r7,zero
81105b94:	e1800217 	ldw	r6,8(fp)
81105b98:	e17ffd17 	ldw	r5,-12(fp)
81105b9c:	e13ffc17 	ldw	r4,-16(fp)
81105ba0:	1105f740 	call	81105f74 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105bc8:	defff604 	addi	sp,sp,-40
81105bcc:	de00012e 	bgeu	sp,et,81105bd4 <I2C_MultipleRead+0xc>
81105bd0:	003b68fa 	trap	3
81105bd4:	dfc00915 	stw	ra,36(sp)
81105bd8:	df000815 	stw	fp,32(sp)
81105bdc:	df000804 	addi	fp,sp,32
81105be0:	e13ffb15 	stw	r4,-20(fp)
81105be4:	e17ffc15 	stw	r5,-16(fp)
81105be8:	3007883a 	mov	r3,r6
81105bec:	e1fffe15 	stw	r7,-8(fp)
81105bf0:	e0800217 	ldw	r2,8(fp)
81105bf4:	e0fffd05 	stb	r3,-12(fp)
81105bf8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105bfc:	00800044 	movi	r2,1
81105c00:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c04:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c08:	e17ffc17 	ldw	r5,-16(fp)
81105c0c:	e13ffb17 	ldw	r4,-20(fp)
81105c10:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c14:	e0bffd03 	ldbu	r2,-12(fp)
81105c18:	10803fcc 	andi	r2,r2,255
81105c1c:	100d883a 	mov	r6,r2
81105c20:	e17ffc17 	ldw	r5,-16(fp)
81105c24:	e13ffb17 	ldw	r4,-20(fp)
81105c28:	1105e3c0 	call	81105e3c <i2c_write>
81105c2c:	1000011e 	bne	r2,zero,81105c34 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105c30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105c34:	e0bff917 	ldw	r2,-28(fp)
81105c38:	10000726 	beq	r2,zero,81105c58 <I2C_MultipleRead+0x90>
81105c3c:	e0bffa03 	ldbu	r2,-24(fp)
81105c40:	100d883a 	mov	r6,r2
81105c44:	e17ffc17 	ldw	r5,-16(fp)
81105c48:	e13ffb17 	ldw	r4,-20(fp)
81105c4c:	1105e3c0 	call	81105e3c <i2c_write>
81105c50:	1000011e 	bne	r2,zero,81105c58 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105c58:	e0bff917 	ldw	r2,-28(fp)
81105c5c:	10000326 	beq	r2,zero,81105c6c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105c60:	e17ffc17 	ldw	r5,-16(fp)
81105c64:	e13ffb17 	ldw	r4,-20(fp)
81105c68:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105c6c:	e0bffd03 	ldbu	r2,-12(fp)
81105c70:	10800054 	ori	r2,r2,1
81105c74:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105c78:	e0bff917 	ldw	r2,-28(fp)
81105c7c:	10000826 	beq	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
81105c80:	e0bffd03 	ldbu	r2,-12(fp)
81105c84:	10803fcc 	andi	r2,r2,255
81105c88:	100d883a 	mov	r6,r2
81105c8c:	e17ffc17 	ldw	r5,-16(fp)
81105c90:	e13ffb17 	ldw	r4,-20(fp)
81105c94:	1105e3c0 	call	81105e3c <i2c_write>
81105c98:	1000011e 	bne	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105c9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105ca0:	e0bff917 	ldw	r2,-28(fp)
81105ca4:	10001726 	beq	r2,zero,81105d04 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105ca8:	e03ff815 	stw	zero,-32(fp)
81105cac:	00001006 	br	81105cf0 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105cb0:	e0bff817 	ldw	r2,-32(fp)
81105cb4:	e0fffe17 	ldw	r3,-8(fp)
81105cb8:	1889883a 	add	r4,r3,r2
81105cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81105cc0:	10ffffc4 	addi	r3,r2,-1
81105cc4:	e0bff817 	ldw	r2,-32(fp)
81105cc8:	1884c03a 	cmpne	r2,r3,r2
81105ccc:	10803fcc 	andi	r2,r2,255
81105cd0:	100f883a 	mov	r7,r2
81105cd4:	200d883a 	mov	r6,r4
81105cd8:	e17ffc17 	ldw	r5,-16(fp)
81105cdc:	e13ffb17 	ldw	r4,-20(fp)
81105ce0:	1105f740 	call	81105f74 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105ce4:	e0bff817 	ldw	r2,-32(fp)
81105ce8:	10800044 	addi	r2,r2,1
81105cec:	e0bff815 	stw	r2,-32(fp)
81105cf0:	e0bfff0b 	ldhu	r2,-4(fp)
81105cf4:	e0fff817 	ldw	r3,-32(fp)
81105cf8:	1880020e 	bge	r3,r2,81105d04 <I2C_MultipleRead+0x13c>
81105cfc:	e0bff917 	ldw	r2,-28(fp)
81105d00:	103feb1e 	bne	r2,zero,81105cb0 <__reset+0xfb0e5cb0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d04:	e17ffc17 	ldw	r5,-16(fp)
81105d08:	e13ffb17 	ldw	r4,-20(fp)
81105d0c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;    
81105d10:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d14:	e037883a 	mov	sp,fp
81105d18:	dfc00117 	ldw	ra,4(sp)
81105d1c:	df000017 	ldw	fp,0(sp)
81105d20:	dec00204 	addi	sp,sp,8
81105d24:	f800283a 	ret

81105d28 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d28:	defffc04 	addi	sp,sp,-16
81105d2c:	de00012e 	bgeu	sp,et,81105d34 <i2c_start+0xc>
81105d30:	003b68fa 	trap	3
81105d34:	dfc00315 	stw	ra,12(sp)
81105d38:	df000215 	stw	fp,8(sp)
81105d3c:	df000204 	addi	fp,sp,8
81105d40:	e13ffe15 	stw	r4,-8(fp)
81105d44:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105d48:	e0bfff17 	ldw	r2,-4(fp)
81105d4c:	10800104 	addi	r2,r2,4
81105d50:	1007883a 	mov	r3,r2
81105d54:	00800044 	movi	r2,1
81105d58:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105d5c:	e0bfff17 	ldw	r2,-4(fp)
81105d60:	00c00044 	movi	r3,1
81105d64:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	00c00044 	movi	r3,1
81105d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d74:	01000044 	movi	r4,1
81105d78:	1127ffc0 	call	81127ffc <usleep>
     
    SDA_LOW(data_base); // data low
81105d7c:	e0bfff17 	ldw	r2,-4(fp)
81105d80:	0007883a 	mov	r3,zero
81105d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105d88:	01000044 	movi	r4,1
81105d8c:	1127ffc0 	call	81127ffc <usleep>
    SCL_LOW(clk_base); // clock low
81105d90:	e0bffe17 	ldw	r2,-8(fp)
81105d94:	0007883a 	mov	r3,zero
81105d98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d9c:	01000044 	movi	r4,1
81105da0:	1127ffc0 	call	81127ffc <usleep>
}
81105da4:	0001883a 	nop
81105da8:	e037883a 	mov	sp,fp
81105dac:	dfc00117 	ldw	ra,4(sp)
81105db0:	df000017 	ldw	fp,0(sp)
81105db4:	dec00204 	addi	sp,sp,8
81105db8:	f800283a 	ret

81105dbc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105dbc:	defffc04 	addi	sp,sp,-16
81105dc0:	de00012e 	bgeu	sp,et,81105dc8 <i2c_stop+0xc>
81105dc4:	003b68fa 	trap	3
81105dc8:	dfc00315 	stw	ra,12(sp)
81105dcc:	df000215 	stw	fp,8(sp)
81105dd0:	df000204 	addi	fp,sp,8
81105dd4:	e13ffe15 	stw	r4,-8(fp)
81105dd8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105ddc:	e0bfff17 	ldw	r2,-4(fp)
81105de0:	10800104 	addi	r2,r2,4
81105de4:	1007883a 	mov	r3,r2
81105de8:	00800044 	movi	r2,1
81105dec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105df0:	e0bfff17 	ldw	r2,-4(fp)
81105df4:	0007883a 	mov	r3,zero
81105df8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105dfc:	e0bffe17 	ldw	r2,-8(fp)
81105e00:	00c00044 	movi	r3,1
81105e04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e08:	01000044 	movi	r4,1
81105e0c:	1127ffc0 	call	81127ffc <usleep>
    SDA_HIGH(data_base); // data high
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	00c00044 	movi	r3,1
81105e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e1c:	01000044 	movi	r4,1
81105e20:	1127ffc0 	call	81127ffc <usleep>
    

    
}
81105e24:	0001883a 	nop
81105e28:	e037883a 	mov	sp,fp
81105e2c:	dfc00117 	ldw	ra,4(sp)
81105e30:	df000017 	ldw	fp,0(sp)
81105e34:	dec00204 	addi	sp,sp,8
81105e38:	f800283a 	ret

81105e3c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105e3c:	defff804 	addi	sp,sp,-32
81105e40:	de00012e 	bgeu	sp,et,81105e48 <i2c_write+0xc>
81105e44:	003b68fa 	trap	3
81105e48:	dfc00715 	stw	ra,28(sp)
81105e4c:	df000615 	stw	fp,24(sp)
81105e50:	df000604 	addi	fp,sp,24
81105e54:	e13ffd15 	stw	r4,-12(fp)
81105e58:	e17ffe15 	stw	r5,-8(fp)
81105e5c:	3005883a 	mov	r2,r6
81105e60:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105e64:	00bfe004 	movi	r2,-128
81105e68:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	1007883a 	mov	r3,r2
81105e78:	00800044 	movi	r2,1
81105e7c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105e80:	e03ffb15 	stw	zero,-20(fp)
81105e84:	00001f06 	br	81105f04 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105e88:	e0bffd17 	ldw	r2,-12(fp)
81105e8c:	0007883a 	mov	r3,zero
81105e90:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105e94:	e0ffff03 	ldbu	r3,-4(fp)
81105e98:	e0bffa03 	ldbu	r2,-24(fp)
81105e9c:	1884703a 	and	r2,r3,r2
81105ea0:	10803fcc 	andi	r2,r2,255
81105ea4:	10000426 	beq	r2,zero,81105eb8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105ea8:	e0bffe17 	ldw	r2,-8(fp)
81105eac:	00c00044 	movi	r3,1
81105eb0:	10c00035 	stwio	r3,0(r2)
81105eb4:	00000306 	br	81105ec4 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105eb8:	e0bffe17 	ldw	r2,-8(fp)
81105ebc:	0007883a 	mov	r3,zero
81105ec0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105ec4:	e0bffa03 	ldbu	r2,-24(fp)
81105ec8:	1004d07a 	srli	r2,r2,1
81105ecc:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
81105ed4:	00c00044 	movi	r3,1
81105ed8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105edc:	01000044 	movi	r4,1
81105ee0:	1127ffc0 	call	81127ffc <usleep>
        SCL_LOW(clk_base);
81105ee4:	e0bffd17 	ldw	r2,-12(fp)
81105ee8:	0007883a 	mov	r3,zero
81105eec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105ef0:	01000044 	movi	r4,1
81105ef4:	1127ffc0 	call	81127ffc <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105ef8:	e0bffb17 	ldw	r2,-20(fp)
81105efc:	10800044 	addi	r2,r2,1
81105f00:	e0bffb15 	stw	r2,-20(fp)
81105f04:	e0bffb17 	ldw	r2,-20(fp)
81105f08:	10800210 	cmplti	r2,r2,8
81105f0c:	103fde1e 	bne	r2,zero,81105e88 <__reset+0xfb0e5e88>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f10:	e0bffe17 	ldw	r2,-8(fp)
81105f14:	10800104 	addi	r2,r2,4
81105f18:	0007883a 	mov	r3,zero
81105f1c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f20:	e0bffd17 	ldw	r2,-12(fp)
81105f24:	00c00044 	movi	r3,1
81105f28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f2c:	01000044 	movi	r4,1
81105f30:	1127ffc0 	call	81127ffc <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	10800037 	ldwio	r2,0(r2)
81105f3c:	1005003a 	cmpeq	r2,r2,zero
81105f40:	10803fcc 	andi	r2,r2,255
81105f44:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105f48:	e0bffd17 	ldw	r2,-12(fp)
81105f4c:	0007883a 	mov	r3,zero
81105f50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105f54:	01000044 	movi	r4,1
81105f58:	1127ffc0 	call	81127ffc <usleep>
    return bAck;
81105f5c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105f60:	e037883a 	mov	sp,fp
81105f64:	dfc00117 	ldw	ra,4(sp)
81105f68:	df000017 	ldw	fp,0(sp)
81105f6c:	dec00204 	addi	sp,sp,8
81105f70:	f800283a 	ret

81105f74 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105f74:	defff804 	addi	sp,sp,-32
81105f78:	de00012e 	bgeu	sp,et,81105f80 <i2c_read+0xc>
81105f7c:	003b68fa 	trap	3
81105f80:	dfc00715 	stw	ra,28(sp)
81105f84:	df000615 	stw	fp,24(sp)
81105f88:	df000604 	addi	fp,sp,24
81105f8c:	e13ffc15 	stw	r4,-16(fp)
81105f90:	e17ffd15 	stw	r5,-12(fp)
81105f94:	e1bffe15 	stw	r6,-8(fp)
81105f98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105f9c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105fa0:	e0bffd17 	ldw	r2,-12(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	0007883a 	mov	r3,zero
81105fac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105fb0:	e0bffc17 	ldw	r2,-16(fp)
81105fb4:	0007883a 	mov	r3,zero
81105fb8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fbc:	01000044 	movi	r4,1
81105fc0:	1127ffc0 	call	81127ffc <usleep>

    for(i=0;i<8;i++){
81105fc4:	e03ffb15 	stw	zero,-20(fp)
81105fc8:	00001606 	br	81106024 <i2c_read+0xb0>
        Data <<= 1;
81105fcc:	e0bffa03 	ldbu	r2,-24(fp)
81105fd0:	1085883a 	add	r2,r2,r2
81105fd4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105fd8:	e0bffc17 	ldw	r2,-16(fp)
81105fdc:	00c00044 	movi	r3,1
81105fe0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105fe4:	01000044 	movi	r4,1
81105fe8:	1127ffc0 	call	81127ffc <usleep>
        if (SDA_READ(data_base))  // read data   
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10800037 	ldwio	r2,0(r2)
81105ff4:	10000326 	beq	r2,zero,81106004 <i2c_read+0x90>
            Data |= 0x01;
81105ff8:	e0bffa03 	ldbu	r2,-24(fp)
81105ffc:	10800054 	ori	r2,r2,1
81106000:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106004:	e0bffc17 	ldw	r2,-16(fp)
81106008:	0007883a 	mov	r3,zero
8110600c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106010:	01000044 	movi	r4,1
81106014:	1127ffc0 	call	81127ffc <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106018:	e0bffb17 	ldw	r2,-20(fp)
8110601c:	10800044 	addi	r2,r2,1
81106020:	e0bffb15 	stw	r2,-20(fp)
81106024:	e0bffb17 	ldw	r2,-20(fp)
81106028:	10800210 	cmplti	r2,r2,8
8110602c:	103fe71e 	bne	r2,zero,81105fcc <__reset+0xfb0e5fcc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81106030:	e0bffc17 	ldw	r2,-16(fp)
81106034:	0007883a 	mov	r3,zero
81106038:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8110603c:	e0bffd17 	ldw	r2,-12(fp)
81106040:	10800104 	addi	r2,r2,4
81106044:	1007883a 	mov	r3,r2
81106048:	00800044 	movi	r2,1
8110604c:	18800035 	stwio	r2,0(r3)
    if (bAck)
81106050:	e0bfff17 	ldw	r2,-4(fp)
81106054:	10000426 	beq	r2,zero,81106068 <i2c_read+0xf4>
        SDA_LOW(data_base);
81106058:	e0bffd17 	ldw	r2,-12(fp)
8110605c:	0007883a 	mov	r3,zero
81106060:	10c00035 	stwio	r3,0(r2)
81106064:	00000306 	br	81106074 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
81106068:	e0bffd17 	ldw	r2,-12(fp)
8110606c:	00c00044 	movi	r3,1
81106070:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	00c00044 	movi	r3,1
8110607c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81106080:	01000044 	movi	r4,1
81106084:	1127ffc0 	call	81127ffc <usleep>
    SCL_LOW(clk_base); // clock low
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	0007883a 	mov	r3,zero
81106090:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106094:	01000044 	movi	r4,1
81106098:	1127ffc0 	call	81127ffc <usleep>
    SDA_LOW(data_base);  // data low
8110609c:	e0bffd17 	ldw	r2,-12(fp)
811060a0:	0007883a 	mov	r3,zero
811060a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811060a8:	01000044 	movi	r4,1
811060ac:	1127ffc0 	call	81127ffc <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811060b0:	e0bffe17 	ldw	r2,-8(fp)
811060b4:	e0fffa03 	ldbu	r3,-24(fp)
811060b8:	10c00005 	stb	r3,0(r2)
}
811060bc:	0001883a 	nop
811060c0:	e037883a 	mov	sp,fp
811060c4:	dfc00117 	ldw	ra,4(sp)
811060c8:	df000017 	ldw	fp,0(sp)
811060cc:	dec00204 	addi	sp,sp,8
811060d0:	f800283a 	ret

811060d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
811060d4:	defffd04 	addi	sp,sp,-12
811060d8:	de00012e 	bgeu	sp,et,811060e0 <bSetBoardLeds+0xc>
811060dc:	003b68fa 	trap	3
811060e0:	df000215 	stw	fp,8(sp)
811060e4:	df000204 	addi	fp,sp,8
811060e8:	e13ffe15 	stw	r4,-8(fp)
811060ec:	2805883a 	mov	r2,r5
811060f0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811060f4:	e0bffe17 	ldw	r2,-8(fp)
811060f8:	10800058 	cmpnei	r2,r2,1
811060fc:	1000071e 	bne	r2,zero,8110611c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106100:	e0bfff03 	ldbu	r2,-4(fp)
81106104:	0084303a 	nor	r2,zero,r2
81106108:	1007883a 	mov	r3,r2
8110610c:	d0a04503 	ldbu	r2,-32492(gp)
81106110:	1884703a 	and	r2,r3,r2
81106114:	d0a04505 	stb	r2,-32492(gp)
81106118:	00000406 	br	8110612c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110611c:	d0e04503 	ldbu	r3,-32492(gp)
81106120:	e0bfff03 	ldbu	r2,-4(fp)
81106124:	1884b03a 	or	r2,r3,r2
81106128:	d0a04505 	stb	r2,-32492(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110612c:	d0a04503 	ldbu	r2,-32492(gp)
81106130:	10c03fcc 	andi	r3,r2,255
81106134:	00a00034 	movhi	r2,32768
81106138:	10827404 	addi	r2,r2,2512
8110613c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106140:	00800044 	movi	r2,1
}
81106144:	e037883a 	mov	sp,fp
81106148:	df000017 	ldw	fp,0(sp)
8110614c:	dec00104 	addi	sp,sp,4
81106150:	f800283a 	ret

81106154 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81106154:	defffd04 	addi	sp,sp,-12
81106158:	de00012e 	bgeu	sp,et,81106160 <bSetPainelLeds+0xc>
8110615c:	003b68fa 	trap	3
81106160:	df000215 	stw	fp,8(sp)
81106164:	df000204 	addi	fp,sp,8
81106168:	e13ffe15 	stw	r4,-8(fp)
8110616c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81106170:	e0bffe17 	ldw	r2,-8(fp)
81106174:	10800058 	cmpnei	r2,r2,1
81106178:	1000051e 	bne	r2,zero,81106190 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
8110617c:	d0e00217 	ldw	r3,-32760(gp)
81106180:	e0bfff17 	ldw	r2,-4(fp)
81106184:	1884b03a 	or	r2,r3,r2
81106188:	d0a00215 	stw	r2,-32760(gp)
8110618c:	00000506 	br	811061a4 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106190:	e0bfff17 	ldw	r2,-4(fp)
81106194:	0086303a 	nor	r3,zero,r2
81106198:	d0a00217 	ldw	r2,-32760(gp)
8110619c:	1884703a 	and	r2,r3,r2
811061a0:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811061a4:	d0a00217 	ldw	r2,-32760(gp)
811061a8:	1007883a 	mov	r3,r2
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10824004 	addi	r2,r2,2304
811061b4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b8:	00800044 	movi	r2,1
}
811061bc:	e037883a 	mov	sp,fp
811061c0:	df000017 	ldw	fp,0(sp)
811061c4:	dec00104 	addi	sp,sp,4
811061c8:	f800283a 	ret

811061cc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811061cc:	defffc04 	addi	sp,sp,-16
811061d0:	de00012e 	bgeu	sp,et,811061d8 <msgdma_write_extended_descriptor+0xc>
811061d4:	003b68fa 	trap	3
811061d8:	df000315 	stw	fp,12(sp)
811061dc:	df000304 	addi	fp,sp,12
811061e0:	e13ffd15 	stw	r4,-12(fp)
811061e4:	e17ffe15 	stw	r5,-8(fp)
811061e8:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811061ec:	e0bffd17 	ldw	r2,-12(fp)
811061f0:	10800037 	ldwio	r2,0(r2)
811061f4:	1080010c 	andi	r2,r2,4
811061f8:	10000226 	beq	r2,zero,81106204 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811061fc:	00bff904 	movi	r2,-28
81106200:	00003d06 	br	811062f8 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106204:	e0bfff17 	ldw	r2,-4(fp)
81106208:	10800017 	ldw	r2,0(r2)
8110620c:	1007883a 	mov	r3,r2
81106210:	e0bffe17 	ldw	r2,-8(fp)
81106214:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106218:	e0bffe17 	ldw	r2,-8(fp)
8110621c:	10800104 	addi	r2,r2,4
81106220:	e0ffff17 	ldw	r3,-4(fp)
81106224:	18c00117 	ldw	r3,4(r3)
81106228:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110622c:	e0bffe17 	ldw	r2,-8(fp)
81106230:	10800204 	addi	r2,r2,8
81106234:	e0ffff17 	ldw	r3,-4(fp)
81106238:	18c00217 	ldw	r3,8(r3)
8110623c:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10800304 	addi	r2,r2,12
81106248:	e0ffff17 	ldw	r3,-4(fp)
8110624c:	18c0030b 	ldhu	r3,12(r3)
81106250:	18ffffcc 	andi	r3,r3,65535
81106254:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81106258:	e0bffe17 	ldw	r2,-8(fp)
8110625c:	10800384 	addi	r2,r2,14
81106260:	e0ffff17 	ldw	r3,-4(fp)
81106264:	18c00383 	ldbu	r3,14(r3)
81106268:	18c03fcc 	andi	r3,r3,255
8110626c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81106270:	e0bffe17 	ldw	r2,-8(fp)
81106274:	108003c4 	addi	r2,r2,15
81106278:	e0ffff17 	ldw	r3,-4(fp)
8110627c:	18c003c3 	ldbu	r3,15(r3)
81106280:	18c03fcc 	andi	r3,r3,255
81106284:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800404 	addi	r2,r2,16
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c0040b 	ldhu	r3,16(r3)
81106298:	18ffffcc 	andi	r3,r3,65535
8110629c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811062a0:	e0bffe17 	ldw	r2,-8(fp)
811062a4:	10800484 	addi	r2,r2,18
811062a8:	e0ffff17 	ldw	r3,-4(fp)
811062ac:	18c0048b 	ldhu	r3,18(r3)
811062b0:	18ffffcc 	andi	r3,r3,65535
811062b4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
811062b8:	e0bffe17 	ldw	r2,-8(fp)
811062bc:	10800504 	addi	r2,r2,20
811062c0:	e0ffff17 	ldw	r3,-4(fp)
811062c4:	18c00517 	ldw	r3,20(r3)
811062c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
811062cc:	e0bffe17 	ldw	r2,-8(fp)
811062d0:	10800604 	addi	r2,r2,24
811062d4:	e0ffff17 	ldw	r3,-4(fp)
811062d8:	18c00617 	ldw	r3,24(r3)
811062dc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	10800704 	addi	r2,r2,28
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c00717 	ldw	r3,28(r3)
811062f0:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
811062f4:	0005883a 	mov	r2,zero
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	df000017 	ldw	fp,0(sp)
81106300:	dec00104 	addi	sp,sp,4
81106304:	f800283a 	ret

81106308 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106308:	defff604 	addi	sp,sp,-40
8110630c:	de00012e 	bgeu	sp,et,81106314 <msgdma_construct_extended_descriptor+0xc>
81106310:	003b68fa 	trap	3
81106314:	df000915 	stw	fp,36(sp)
81106318:	df000904 	addi	fp,sp,36
8110631c:	e13ff715 	stw	r4,-36(fp)
81106320:	e17ff815 	stw	r5,-32(fp)
81106324:	e1bff915 	stw	r6,-28(fp)
81106328:	e1fffa15 	stw	r7,-24(fp)
8110632c:	e1800517 	ldw	r6,20(fp)
81106330:	e1400617 	ldw	r5,24(fp)
81106334:	e1000717 	ldw	r4,28(fp)
81106338:	e0c00817 	ldw	r3,32(fp)
8110633c:	e0800917 	ldw	r2,36(fp)
81106340:	e1bffb0d 	sth	r6,-20(fp)
81106344:	e17ffc05 	stb	r5,-16(fp)
81106348:	e13ffd05 	stb	r4,-12(fp)
8110634c:	e0fffe0d 	sth	r3,-8(fp)
81106350:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81106354:	e0bff717 	ldw	r2,-36(fp)
81106358:	10c01217 	ldw	r3,72(r2)
8110635c:	e0800117 	ldw	r2,4(fp)
81106360:	18801936 	bltu	r3,r2,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106364:	e13ff717 	ldw	r4,-36(fp)
81106368:	20801317 	ldw	r2,76(r4)
8110636c:	20c01417 	ldw	r3,80(r4)
81106370:	e13ffe0b 	ldhu	r4,-8(fp)
81106374:	213fffcc 	andi	r4,r4,65535
81106378:	2015883a 	mov	r10,r4
8110637c:	0017883a 	mov	r11,zero
81106380:	1ac01136 	bltu	r3,r11,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106384:	58c0011e 	bne	r11,r3,8110638c <msgdma_construct_extended_descriptor+0x84>
81106388:	12800f36 	bltu	r2,r10,811063c8 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110638c:	e13ff717 	ldw	r4,-36(fp)
81106390:	20801317 	ldw	r2,76(r4)
81106394:	20c01417 	ldw	r3,80(r4)
81106398:	e13fff0b 	ldhu	r4,-4(fp)
8110639c:	213fffcc 	andi	r4,r4,65535
811063a0:	2011883a 	mov	r8,r4
811063a4:	0013883a 	mov	r9,zero
811063a8:	1a400736 	bltu	r3,r9,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063ac:	48c0011e 	bne	r9,r3,811063b4 <msgdma_construct_extended_descriptor+0xac>
811063b0:	12000536 	bltu	r2,r8,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063b4:	e0bff717 	ldw	r2,-36(fp)
811063b8:	10801703 	ldbu	r2,92(r2)
811063bc:	10803fcc 	andi	r2,r2,255
811063c0:	10800060 	cmpeqi	r2,r2,1
811063c4:	1000021e 	bne	r2,zero,811063d0 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
811063c8:	00bffa84 	movi	r2,-22
811063cc:	00002306 	br	8110645c <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
811063d0:	e0bff817 	ldw	r2,-32(fp)
811063d4:	e0fff917 	ldw	r3,-28(fp)
811063d8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
811063dc:	e0bff817 	ldw	r2,-32(fp)
811063e0:	e0fffa17 	ldw	r3,-24(fp)
811063e4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
811063e8:	e0bff817 	ldw	r2,-32(fp)
811063ec:	e0c00117 	ldw	r3,4(fp)
811063f0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
811063f4:	e0bff817 	ldw	r2,-32(fp)
811063f8:	e0fffb0b 	ldhu	r3,-20(fp)
811063fc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106400:	e0bff817 	ldw	r2,-32(fp)
81106404:	e0fffc03 	ldbu	r3,-16(fp)
81106408:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110640c:	e0bff817 	ldw	r2,-32(fp)
81106410:	e0fffd03 	ldbu	r3,-12(fp)
81106414:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106418:	e0bff817 	ldw	r2,-32(fp)
8110641c:	e0fffe0b 	ldhu	r3,-8(fp)
81106420:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106424:	e0bff817 	ldw	r2,-32(fp)
81106428:	e0ffff0b 	ldhu	r3,-4(fp)
8110642c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81106430:	e0bff817 	ldw	r2,-32(fp)
81106434:	e0c00317 	ldw	r3,12(fp)
81106438:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110643c:	e0bff817 	ldw	r2,-32(fp)
81106440:	e0c00417 	ldw	r3,16(fp)
81106444:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106448:	e0800217 	ldw	r2,8(fp)
8110644c:	10e00034 	orhi	r3,r2,32768
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10c00715 	stw	r3,28(r2)

	return 0;
81106458:	0005883a 	mov	r2,zero

}
8110645c:	e037883a 	mov	sp,fp
81106460:	df000017 	ldw	fp,0(sp)
81106464:	dec00104 	addi	sp,sp,4
81106468:	f800283a 	ret

8110646c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110646c:	deffee04 	addi	sp,sp,-72
81106470:	de00012e 	bgeu	sp,et,81106478 <msgdma_descriptor_async_transfer+0xc>
81106474:	003b68fa 	trap	3
81106478:	dfc01115 	stw	ra,68(sp)
8110647c:	df001015 	stw	fp,64(sp)
81106480:	df001004 	addi	fp,sp,64
81106484:	e13ffd15 	stw	r4,-12(fp)
81106488:	e17ffe15 	stw	r5,-8(fp)
8110648c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106490:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106494:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106498:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110649c:	e0bffd17 	ldw	r2,-12(fp)
811064a0:	10800317 	ldw	r2,12(r2)
811064a4:	10800204 	addi	r2,r2,8
811064a8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811064ac:	10bfffcc 	andi	r2,r2,65535
811064b0:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811064b4:	e0bffd17 	ldw	r2,-12(fp)
811064b8:	10800317 	ldw	r2,12(r2)
811064bc:	10800204 	addi	r2,r2,8
811064c0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811064c4:	1004d43a 	srli	r2,r2,16
811064c8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811064cc:	e0bffd17 	ldw	r2,-12(fp)
811064d0:	10800917 	ldw	r2,36(r2)
811064d4:	e0fff417 	ldw	r3,-48(fp)
811064d8:	1880042e 	bgeu	r3,r2,811064ec <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811064dc:	e0bffd17 	ldw	r2,-12(fp)
811064e0:	10800917 	ldw	r2,36(r2)
811064e4:	e0fff317 	ldw	r3,-52(fp)
811064e8:	18800236 	bltu	r3,r2,811064f4 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
811064ec:	00bff904 	movi	r2,-28
811064f0:	00009f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811064f4:	e0bffd17 	ldw	r2,-12(fp)
811064f8:	10801817 	ldw	r2,96(r2)
811064fc:	e0bff615 	stw	r2,-40(fp)
81106500:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106504:	e0bffc0b 	ldhu	r2,-16(fp)
81106508:	e0fffc84 	addi	r3,fp,-14
8110650c:	180d883a 	mov	r6,r3
81106510:	100b883a 	mov	r5,r2
81106514:	e13ff617 	ldw	r4,-40(fp)
81106518:	112ee780 	call	8112ee78 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110651c:	00800804 	movi	r2,32
81106520:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106524:	0005303a 	rdctl	r2,status
81106528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110652c:	e0fff717 	ldw	r3,-36(fp)
81106530:	00bfff84 	movi	r2,-2
81106534:	1884703a 	and	r2,r3,r2
81106538:	1001703a 	wrctl	status,r2
  
  return context;
8110653c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106540:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106544:	e0bffd17 	ldw	r2,-12(fp)
81106548:	10800317 	ldw	r2,12(r2)
8110654c:	10800104 	addi	r2,r2,4
81106550:	e0fff117 	ldw	r3,-60(fp)
81106554:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106558:	e0bffd17 	ldw	r2,-12(fp)
8110655c:	10800317 	ldw	r2,12(r2)
81106560:	e0fffd17 	ldw	r3,-12(fp)
81106564:	18c00317 	ldw	r3,12(r3)
81106568:	18c00037 	ldwio	r3,0(r3)
8110656c:	10c00035 	stwio	r3,0(r2)
81106570:	e0bff217 	ldw	r2,-56(fp)
81106574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106578:	e0bffb17 	ldw	r2,-20(fp)
8110657c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81106580:	e0bffe17 	ldw	r2,-8(fp)
81106584:	10001026 	beq	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
81106588:	e0bfff17 	ldw	r2,-4(fp)
8110658c:	10000e1e 	bne	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106590:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106594:	d0a04e17 	ldw	r2,-32456(gp)
81106598:	100f883a 	mov	r7,r2
8110659c:	01800784 	movi	r6,30
811065a0:	01400044 	movi	r5,1
811065a4:	01204534 	movhi	r4,33044
811065a8:	21324c04 	addi	r4,r4,-14032
811065ac:	11121200 	call	81112120 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10801817 	ldw	r2,96(r2)
811065b8:	1009883a 	mov	r4,r2
811065bc:	112f2000 	call	8112f200 <OSSemPost>

		return -ETIME;
811065c0:	00bff084 	movi	r2,-62
811065c4:	00006a06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811065c8:	e0bffe17 	ldw	r2,-8(fp)
811065cc:	1000231e 	bne	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
811065d0:	e0bfff17 	ldw	r2,-4(fp)
811065d4:	10002126 	beq	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
811065d8:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811065dc:	00001506 	br	81106634 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811065e0:	01000044 	movi	r4,1
811065e4:	112712c0 	call	8112712c <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811065e8:	e0bff00b 	ldhu	r2,-64(fp)
811065ec:	1084e230 	cmpltui	r2,r2,5000
811065f0:	10000d1e 	bne	r2,zero,81106628 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
811065f4:	d0a04e17 	ldw	r2,-32456(gp)
811065f8:	100f883a 	mov	r7,r2
811065fc:	01801544 	movi	r6,85
81106600:	01400044 	movi	r5,1
81106604:	01204534 	movhi	r4,33044
81106608:	21325404 	addi	r4,r4,-14000
8110660c:	11121200 	call	81112120 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106610:	e0bffd17 	ldw	r2,-12(fp)
81106614:	10801817 	ldw	r2,96(r2)
81106618:	1009883a 	mov	r4,r2
8110661c:	112f2000 	call	8112f200 <OSSemPost>

				return -ETIME;
81106620:	00bff084 	movi	r2,-62
81106624:	00005206 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106628:	e0bff00b 	ldhu	r2,-64(fp)
8110662c:	10800044 	addi	r2,r2,1
81106630:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106634:	e0bffd17 	ldw	r2,-12(fp)
81106638:	10c00317 	ldw	r3,12(r2)
8110663c:	e0bffd17 	ldw	r2,-12(fp)
81106640:	10800417 	ldw	r2,16(r2)
81106644:	e1bfff17 	ldw	r6,-4(fp)
81106648:	100b883a 	mov	r5,r2
8110664c:	1809883a 	mov	r4,r3
81106650:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106654:	103fe21e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106658:	00000606 	br	81106674 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110665c:	e0bffd17 	ldw	r2,-12(fp)
81106660:	10801817 	ldw	r2,96(r2)
81106664:	1009883a 	mov	r4,r2
81106668:	112f2000 	call	8112f200 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110666c:	00bfffc4 	movi	r2,-1
81106670:	00003f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81106674:	e0bffd17 	ldw	r2,-12(fp)
81106678:	10800b17 	ldw	r2,44(r2)
8110667c:	10001c26 	beq	r2,zero,811066f0 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10c00d17 	ldw	r3,52(r2)
81106688:	e0bff117 	ldw	r2,-60(fp)
8110668c:	1884b03a 	or	r2,r3,r2
81106690:	10800514 	ori	r2,r2,20
81106694:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106698:	e0fff117 	ldw	r3,-60(fp)
8110669c:	00bff7c4 	movi	r2,-33
811066a0:	1884703a 	and	r2,r3,r2
811066a4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811066a8:	0005303a 	rdctl	r2,status
811066ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811066b0:	e0fff917 	ldw	r3,-28(fp)
811066b4:	00bfff84 	movi	r2,-2
811066b8:	1884703a 	and	r2,r3,r2
811066bc:	1001703a 	wrctl	status,r2
  
  return context;
811066c0:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811066c4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811066c8:	e0bffd17 	ldw	r2,-12(fp)
811066cc:	10800317 	ldw	r2,12(r2)
811066d0:	10800104 	addi	r2,r2,4
811066d4:	e0fff117 	ldw	r3,-60(fp)
811066d8:	10c00035 	stwio	r3,0(r2)
811066dc:	e0bff217 	ldw	r2,-56(fp)
811066e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811066e4:	e0bff517 	ldw	r2,-44(fp)
811066e8:	1001703a 	wrctl	status,r2
811066ec:	00001b06 	br	8110675c <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800114 	ori	r2,r2,4
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff3c4 	movi	r2,-49
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fffa17 	ldw	r3,-24(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff817 	ldw	r2,-32(fp)
81106758:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
8110675c:	e0bffd17 	ldw	r2,-12(fp)
81106760:	10801817 	ldw	r2,96(r2)
81106764:	1009883a 	mov	r4,r2
81106768:	112f2000 	call	8112f200 <OSSemPost>

	return 0;
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	dfc00117 	ldw	ra,4(sp)
81106778:	df000017 	ldw	fp,0(sp)
8110677c:	dec00204 	addi	sp,sp,8
81106780:	f800283a 	ret

81106784 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81106784:	deffee04 	addi	sp,sp,-72
81106788:	de00012e 	bgeu	sp,et,81106790 <msgdma_descriptor_sync_transfer+0xc>
8110678c:	003b68fa 	trap	3
81106790:	dfc01115 	stw	ra,68(sp)
81106794:	df001015 	stw	fp,64(sp)
81106798:	df001004 	addi	fp,sp,64
8110679c:	e13ffd15 	stw	r4,-12(fp)
811067a0:	e17ffe15 	stw	r5,-8(fp)
811067a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811067a8:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
811067ac:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
811067b0:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
811067b4:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067b8:	e0bffd17 	ldw	r2,-12(fp)
811067bc:	10800317 	ldw	r2,12(r2)
811067c0:	10800204 	addi	r2,r2,8
811067c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811067c8:	10bfffcc 	andi	r2,r2,65535
811067cc:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067d0:	e0bffd17 	ldw	r2,-12(fp)
811067d4:	10800317 	ldw	r2,12(r2)
811067d8:	10800204 	addi	r2,r2,8
811067dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811067e0:	1004d43a 	srli	r2,r2,16
811067e4:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
811067e8:	00807804 	movi	r2,480
811067ec:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811067f0:	00001d06 	br	81106868 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
811067f4:	01000044 	movi	r4,1
811067f8:	112712c0 	call	8112712c <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811067fc:	e0bff10b 	ldhu	r2,-60(fp)
81106800:	1084e230 	cmpltui	r2,r2,5000
81106804:	1000091e 	bne	r2,zero,8110682c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106808:	d0a04e17 	ldw	r2,-32456(gp)
8110680c:	100f883a 	mov	r7,r2
81106810:	01801304 	movi	r6,76
81106814:	01400044 	movi	r5,1
81106818:	01204534 	movhi	r4,33044
8110681c:	21326a04 	addi	r4,r4,-13912
81106820:	11121200 	call	81112120 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106824:	00bff084 	movi	r2,-62
81106828:	0000d006 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110682c:	e0bff10b 	ldhu	r2,-60(fp)
81106830:	10800044 	addi	r2,r2,1
81106834:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106838:	e0bffd17 	ldw	r2,-12(fp)
8110683c:	10800317 	ldw	r2,12(r2)
81106840:	10800204 	addi	r2,r2,8
81106844:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81106848:	10bfffcc 	andi	r2,r2,65535
8110684c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106850:	e0bffd17 	ldw	r2,-12(fp)
81106854:	10800317 	ldw	r2,12(r2)
81106858:	10800204 	addi	r2,r2,8
8110685c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81106860:	1004d43a 	srli	r2,r2,16
81106864:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106868:	e0bffd17 	ldw	r2,-12(fp)
8110686c:	10800917 	ldw	r2,36(r2)
81106870:	e0fff317 	ldw	r3,-52(fp)
81106874:	18bfdf2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81106878:	e0bffd17 	ldw	r2,-12(fp)
8110687c:	10800917 	ldw	r2,36(r2)
81106880:	e0fff217 	ldw	r3,-56(fp)
81106884:	18bfdb2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106888:	e0bffd17 	ldw	r2,-12(fp)
8110688c:	10801817 	ldw	r2,96(r2)
81106890:	e0bff815 	stw	r2,-32(fp)
81106894:	e03ffc0d 	sth	zero,-16(fp)
81106898:	e0bffc0b 	ldhu	r2,-16(fp)
8110689c:	e0fffc84 	addi	r3,fp,-14
811068a0:	180d883a 	mov	r6,r3
811068a4:	100b883a 	mov	r5,r2
811068a8:	e13ff817 	ldw	r4,-32(fp)
811068ac:	112ee780 	call	8112ee78 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811068b0:	0005303a 	rdctl	r2,status
811068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811068b8:	e0fffb17 	ldw	r3,-20(fp)
811068bc:	00bfff84 	movi	r2,-2
811068c0:	1884703a 	and	r2,r3,r2
811068c4:	1001703a 	wrctl	status,r2
  
  return context;
811068c8:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811068cc:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811068d0:	e0bffd17 	ldw	r2,-12(fp)
811068d4:	10800317 	ldw	r2,12(r2)
811068d8:	10800104 	addi	r2,r2,4
811068dc:	00c00804 	movi	r3,32
811068e0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811068e4:	e0bffd17 	ldw	r2,-12(fp)
811068e8:	10800317 	ldw	r2,12(r2)
811068ec:	e0fffd17 	ldw	r3,-12(fp)
811068f0:	18c00317 	ldw	r3,12(r3)
811068f4:	18c00037 	ldwio	r3,0(r3)
811068f8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
811068fc:	e0bffe17 	ldw	r2,-8(fp)
81106900:	10001026 	beq	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
81106904:	e0bfff17 	ldw	r2,-4(fp)
81106908:	10000e1e 	bne	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110690c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106910:	d0a04e17 	ldw	r2,-32456(gp)
81106914:	100f883a 	mov	r7,r2
81106918:	01800784 	movi	r6,30
8110691c:	01400044 	movi	r5,1
81106920:	01204534 	movhi	r4,33044
81106924:	21324c04 	addi	r4,r4,-14032
81106928:	11121200 	call	81112120 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110692c:	e0bffd17 	ldw	r2,-12(fp)
81106930:	10801817 	ldw	r2,96(r2)
81106934:	1009883a 	mov	r4,r2
81106938:	112f2000 	call	8112f200 <OSSemPost>

		return -ETIME;
8110693c:	00bff084 	movi	r2,-62
81106940:	00008a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106944:	e0bffe17 	ldw	r2,-8(fp)
81106948:	1000231e 	bne	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
8110694c:	e0bfff17 	ldw	r2,-4(fp)
81106950:	10002126 	beq	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
81106954:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106958:	00001506 	br	811069b0 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110695c:	01000044 	movi	r4,1
81106960:	112712c0 	call	8112712c <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106964:	e0bff10b 	ldhu	r2,-60(fp)
81106968:	1084e230 	cmpltui	r2,r2,5000
8110696c:	10000d1e 	bne	r2,zero,811069a4 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
81106970:	d0a04e17 	ldw	r2,-32456(gp)
81106974:	100f883a 	mov	r7,r2
81106978:	01801004 	movi	r6,64
8110697c:	01400044 	movi	r5,1
81106980:	01204534 	movhi	r4,33044
81106984:	21327e04 	addi	r4,r4,-13832
81106988:	11121200 	call	81112120 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
8110698c:	e0bffd17 	ldw	r2,-12(fp)
81106990:	10801817 	ldw	r2,96(r2)
81106994:	1009883a 	mov	r4,r2
81106998:	112f2000 	call	8112f200 <OSSemPost>

				return -ETIME;
8110699c:	00bff084 	movi	r2,-62
811069a0:	00007206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
811069a4:	e0bff10b 	ldhu	r2,-60(fp)
811069a8:	10800044 	addi	r2,r2,1
811069ac:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811069b0:	e0bffd17 	ldw	r2,-12(fp)
811069b4:	10c00317 	ldw	r3,12(r2)
811069b8:	e0bffd17 	ldw	r2,-12(fp)
811069bc:	10800417 	ldw	r2,16(r2)
811069c0:	e1bfff17 	ldw	r6,-4(fp)
811069c4:	100b883a 	mov	r5,r2
811069c8:	1809883a 	mov	r4,r3
811069cc:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069d0:	103fe21e 	bne	r2,zero,8110695c <__reset+0xfb0e695c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069d4:	00000606 	br	811069f0 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811069d8:	e0bffd17 	ldw	r2,-12(fp)
811069dc:	10801817 	ldw	r2,96(r2)
811069e0:	1009883a 	mov	r4,r2
811069e4:	112f2000 	call	8112f200 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811069e8:	00bfffc4 	movi	r2,-1
811069ec:	00005f06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811069f0:	e0bffd17 	ldw	r2,-12(fp)
811069f4:	10800317 	ldw	r2,12(r2)
811069f8:	10800104 	addi	r2,r2,4
811069fc:	e0fffd17 	ldw	r3,-12(fp)
81106a00:	19000d17 	ldw	r4,52(r3)
81106a04:	00fff2c4 	movi	r3,-53
81106a08:	20c6703a 	and	r3,r4,r3
81106a0c:	18c00114 	ori	r3,r3,4
81106a10:	10c00035 	stwio	r3,0(r2)
81106a14:	e0bff517 	ldw	r2,-44(fp)
81106a18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a24:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800317 	ldw	r2,12(r2)
81106a30:	10800037 	ldwio	r2,0(r2)
81106a34:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106a38:	00001906 	br	81106aa0 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106a3c:	01000044 	movi	r4,1
81106a40:	112712c0 	call	8112712c <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106a44:	e0bff10b 	ldhu	r2,-60(fp)
81106a48:	1084e230 	cmpltui	r2,r2,5000
81106a4c:	10000d1e 	bne	r2,zero,81106a84 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106a50:	d0a04e17 	ldw	r2,-32456(gp)
81106a54:	100f883a 	mov	r7,r2
81106a58:	01801184 	movi	r6,70
81106a5c:	01400044 	movi	r5,1
81106a60:	01204534 	movhi	r4,33044
81106a64:	21328f04 	addi	r4,r4,-13764
81106a68:	11121200 	call	81112120 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106a6c:	e0bffd17 	ldw	r2,-12(fp)
81106a70:	10801817 	ldw	r2,96(r2)
81106a74:	1009883a 	mov	r4,r2
81106a78:	112f2000 	call	8112f200 <OSSemPost>

			return -ETIME;
81106a7c:	00bff084 	movi	r2,-62
81106a80:	00003a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106a84:	e0bff10b 	ldhu	r2,-60(fp)
81106a88:	10800044 	addi	r2,r2,1
81106a8c:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a90:	e0bffd17 	ldw	r2,-12(fp)
81106a94:	10800317 	ldw	r2,12(r2)
81106a98:	10800037 	ldwio	r2,0(r2)
81106a9c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa0:	e0fff017 	ldw	r3,-64(fp)
81106aa4:	e0bff617 	ldw	r2,-40(fp)
81106aa8:	1884703a 	and	r2,r3,r2
81106aac:	1000031e 	bne	r2,zero,81106abc <msgdma_descriptor_sync_transfer+0x338>
81106ab0:	e0bff017 	ldw	r2,-64(fp)
81106ab4:	1080004c 	andi	r2,r2,1
81106ab8:	103fe01e 	bne	r2,zero,81106a3c <__reset+0xfb0e6a3c>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106abc:	e0fff017 	ldw	r3,-64(fp)
81106ac0:	e0bff617 	ldw	r2,-40(fp)
81106ac4:	1884703a 	and	r2,r3,r2
81106ac8:	10000626 	beq	r2,zero,81106ae4 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106acc:	e0bffd17 	ldw	r2,-12(fp)
81106ad0:	10801817 	ldw	r2,96(r2)
81106ad4:	1009883a 	mov	r4,r2
81106ad8:	112f2000 	call	8112f200 <OSSemPost>

		return error;
81106adc:	e0bff617 	ldw	r2,-40(fp)
81106ae0:	00002206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106ae4:	e0bffd17 	ldw	r2,-12(fp)
81106ae8:	10800317 	ldw	r2,12(r2)
81106aec:	10800104 	addi	r2,r2,4
81106af0:	10800037 	ldwio	r2,0(r2)
81106af4:	10800814 	ori	r2,r2,32
81106af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106afc:	0005303a 	rdctl	r2,status
81106b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b04:	e0fffa17 	ldw	r3,-24(fp)
81106b08:	00bfff84 	movi	r2,-2
81106b0c:	1884703a 	and	r2,r3,r2
81106b10:	1001703a 	wrctl	status,r2
  
  return context;
81106b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b18:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b1c:	e0bffd17 	ldw	r2,-12(fp)
81106b20:	10800317 	ldw	r2,12(r2)
81106b24:	10800104 	addi	r2,r2,4
81106b28:	e0fff417 	ldw	r3,-48(fp)
81106b2c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106b30:	e0bffd17 	ldw	r2,-12(fp)
81106b34:	10800317 	ldw	r2,12(r2)
81106b38:	e0fffd17 	ldw	r3,-12(fp)
81106b3c:	18c00317 	ldw	r3,12(r3)
81106b40:	18c00037 	ldwio	r3,0(r3)
81106b44:	10c00035 	stwio	r3,0(r2)
81106b48:	e0bff517 	ldw	r2,-44(fp)
81106b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b50:	e0bff917 	ldw	r2,-28(fp)
81106b54:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106b58:	e0bffd17 	ldw	r2,-12(fp)
81106b5c:	10801817 	ldw	r2,96(r2)
81106b60:	1009883a 	mov	r4,r2
81106b64:	112f2000 	call	8112f200 <OSSemPost>

	return 0;
81106b68:	0005883a 	mov	r2,zero

}
81106b6c:	e037883a 	mov	sp,fp
81106b70:	dfc00117 	ldw	ra,4(sp)
81106b74:	df000017 	ldw	fp,0(sp)
81106b78:	dec00204 	addi	sp,sp,8
81106b7c:	f800283a 	ret

81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106b80:	deffec04 	addi	sp,sp,-80
81106b84:	de00012e 	bgeu	sp,et,81106b8c <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106b88:	003b68fa 	trap	3
81106b8c:	dfc01315 	stw	ra,76(sp)
81106b90:	df001215 	stw	fp,72(sp)
81106b94:	df001204 	addi	fp,sp,72
81106b98:	e13ff715 	stw	r4,-36(fp)
81106b9c:	e17ff815 	stw	r5,-32(fp)
81106ba0:	e1bff915 	stw	r6,-28(fp)
81106ba4:	e1fffa15 	stw	r7,-24(fp)
81106ba8:	e1800617 	ldw	r6,24(fp)
81106bac:	e1400717 	ldw	r5,28(fp)
81106bb0:	e1000817 	ldw	r4,32(fp)
81106bb4:	e0c00917 	ldw	r3,36(fp)
81106bb8:	e0800a17 	ldw	r2,40(fp)
81106bbc:	e1bffb0d 	sth	r6,-20(fp)
81106bc0:	e17ffc05 	stb	r5,-16(fp)
81106bc4:	e13ffd05 	stb	r4,-12(fp)
81106bc8:	e0fffe0d 	sth	r3,-8(fp)
81106bcc:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106bd0:	e0bffb0b 	ldhu	r2,-20(fp)
81106bd4:	e0fffc03 	ldbu	r3,-16(fp)
81106bd8:	e13ffd03 	ldbu	r4,-12(fp)
81106bdc:	e17ffe0b 	ldhu	r5,-8(fp)
81106be0:	e1bfff0b 	ldhu	r6,-4(fp)
81106be4:	d9800815 	stw	r6,32(sp)
81106be8:	d9400715 	stw	r5,28(sp)
81106bec:	d9000615 	stw	r4,24(sp)
81106bf0:	d8c00515 	stw	r3,20(sp)
81106bf4:	d8800415 	stw	r2,16(sp)
81106bf8:	e0800517 	ldw	r2,20(fp)
81106bfc:	d8800315 	stw	r2,12(sp)
81106c00:	e0800417 	ldw	r2,16(fp)
81106c04:	d8800215 	stw	r2,8(sp)
81106c08:	e0800317 	ldw	r2,12(fp)
81106c0c:	d8800115 	stw	r2,4(sp)
81106c10:	e0800217 	ldw	r2,8(fp)
81106c14:	d8800015 	stw	r2,0(sp)
81106c18:	e1fffa17 	ldw	r7,-24(fp)
81106c1c:	e1bff917 	ldw	r6,-28(fp)
81106c20:	e17ff817 	ldw	r5,-32(fp)
81106c24:	e13ff717 	ldw	r4,-36(fp)
81106c28:	11063080 	call	81106308 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c2c:	e037883a 	mov	sp,fp
81106c30:	dfc00117 	ldw	ra,4(sp)
81106c34:	df000017 	ldw	fp,0(sp)
81106c38:	dec00204 	addi	sp,sp,8
81106c3c:	f800283a 	ret

81106c40 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c40:	defffc04 	addi	sp,sp,-16
81106c44:	de00012e 	bgeu	sp,et,81106c4c <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106c48:	003b68fa 	trap	3
81106c4c:	dfc00315 	stw	ra,12(sp)
81106c50:	df000215 	stw	fp,8(sp)
81106c54:	df000204 	addi	fp,sp,8
81106c58:	e13ffe15 	stw	r4,-8(fp)
81106c5c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106c60:	e1bfff17 	ldw	r6,-4(fp)
81106c64:	000b883a 	mov	r5,zero
81106c68:	e13ffe17 	ldw	r4,-8(fp)
81106c6c:	110646c0 	call	8110646c <msgdma_descriptor_async_transfer>
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c84:	defffc04 	addi	sp,sp,-16
81106c88:	de00012e 	bgeu	sp,et,81106c90 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106c8c:	003b68fa 	trap	3
81106c90:	dfc00315 	stw	ra,12(sp)
81106c94:	df000215 	stw	fp,8(sp)
81106c98:	df000204 	addi	fp,sp,8
81106c9c:	e13ffe15 	stw	r4,-8(fp)
81106ca0:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106ca4:	e1bfff17 	ldw	r6,-4(fp)
81106ca8:	000b883a 	mov	r5,zero
81106cac:	e13ffe17 	ldw	r4,-8(fp)
81106cb0:	11067840 	call	81106784 <msgdma_descriptor_sync_transfer>
}
81106cb4:	e037883a 	mov	sp,fp
81106cb8:	dfc00117 	ldw	ra,4(sp)
81106cbc:	df000017 	ldw	fp,0(sp)
81106cc0:	dec00204 	addi	sp,sp,8
81106cc4:	f800283a 	ret

81106cc8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106cc8:	defff204 	addi	sp,sp,-56
81106ccc:	de00012e 	bgeu	sp,et,81106cd4 <POWER_SPI_RW+0xc>
81106cd0:	003b68fa 	trap	3
81106cd4:	dfc00d15 	stw	ra,52(sp)
81106cd8:	df000c15 	stw	fp,48(sp)
81106cdc:	df000c04 	addi	fp,sp,48
81106ce0:	2007883a 	mov	r3,r4
81106ce4:	2805883a 	mov	r2,r5
81106ce8:	e1bffe15 	stw	r6,-8(fp)
81106cec:	e1ffff15 	stw	r7,-4(fp)
81106cf0:	e0fffc05 	stb	r3,-16(fp)
81106cf4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106cf8:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106cfc:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d00:	008003f4 	movhi	r2,15
81106d04:	10909004 	addi	r2,r2,16960
81106d08:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d0c:	00bfe004 	movi	r2,-128
81106d10:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d14:	e0bffe17 	ldw	r2,-8(fp)
81106d18:	10000226 	beq	r2,zero,81106d24 <POWER_SPI_RW+0x5c>
81106d1c:	00800804 	movi	r2,32
81106d20:	00000106 	br	81106d28 <POWER_SPI_RW+0x60>
81106d24:	0005883a 	mov	r2,zero
81106d28:	e0fff403 	ldbu	r3,-48(fp)
81106d2c:	10c4b03a 	or	r2,r2,r3
81106d30:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106d34:	e0800217 	ldw	r2,8(fp)
81106d38:	10000226 	beq	r2,zero,81106d44 <POWER_SPI_RW+0x7c>
81106d3c:	00800404 	movi	r2,16
81106d40:	00000106 	br	81106d48 <POWER_SPI_RW+0x80>
81106d44:	0005883a 	mov	r2,zero
81106d48:	e0fff403 	ldbu	r3,-48(fp)
81106d4c:	10c4b03a 	or	r2,r2,r3
81106d50:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106d54:	e0bfff17 	ldw	r2,-4(fp)
81106d58:	10000226 	beq	r2,zero,81106d64 <POWER_SPI_RW+0x9c>
81106d5c:	00800204 	movi	r2,8
81106d60:	00000106 	br	81106d68 <POWER_SPI_RW+0xa0>
81106d64:	0005883a 	mov	r2,zero
81106d68:	e0fff403 	ldbu	r3,-48(fp)
81106d6c:	10c4b03a 	or	r2,r2,r3
81106d70:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106d74:	e0bffd03 	ldbu	r2,-12(fp)
81106d78:	108001cc 	andi	r2,r2,7
81106d7c:	1007883a 	mov	r3,r2
81106d80:	e0bff403 	ldbu	r2,-48(fp)
81106d84:	1884b03a 	or	r2,r3,r2
81106d88:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106d8c:	0007883a 	mov	r3,zero
81106d90:	00a00034 	movhi	r2,32768
81106d94:	10824404 	addi	r2,r2,2320
81106d98:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106d9c:	0007883a 	mov	r3,zero
81106da0:	00a00034 	movhi	r2,32768
81106da4:	10824c04 	addi	r2,r2,2352
81106da8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106dac:	e0bffc03 	ldbu	r2,-16(fp)
81106db0:	1000021e 	bne	r2,zero,81106dbc <POWER_SPI_RW+0xf4>
81106db4:	00c00084 	movi	r3,2
81106db8:	00000106 	br	81106dc0 <POWER_SPI_RW+0xf8>
81106dbc:	00c00044 	movi	r3,1
81106dc0:	00a00034 	movhi	r2,32768
81106dc4:	10824804 	addi	r2,r2,2336
81106dc8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106dcc:	010003c4 	movi	r4,15
81106dd0:	1127ffc0 	call	81127ffc <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106dd4:	00000306 	br	81106de4 <POWER_SPI_RW+0x11c>
		nWait++;
81106dd8:	e0bff817 	ldw	r2,-32(fp)
81106ddc:	10800044 	addi	r2,r2,1
81106de0:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106de4:	00a00034 	movhi	r2,32768
81106de8:	10825404 	addi	r2,r2,2384
81106dec:	10800037 	ldwio	r2,0(r2)
81106df0:	1080004c 	andi	r2,r2,1
81106df4:	10000326 	beq	r2,zero,81106e04 <POWER_SPI_RW+0x13c>
81106df8:	e0fff817 	ldw	r3,-32(fp)
81106dfc:	e0bffa17 	ldw	r2,-24(fp)
81106e00:	18bff516 	blt	r3,r2,81106dd8 <__reset+0xfb0e6dd8>
		nWait++;
	}

	if (SPI_SDO) {
81106e04:	00a00034 	movhi	r2,32768
81106e08:	10825404 	addi	r2,r2,2384
81106e0c:	10800037 	ldwio	r2,0(r2)
81106e10:	1080004c 	andi	r2,r2,1
81106e14:	10000626 	beq	r2,zero,81106e30 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e18:	00c000c4 	movi	r3,3
81106e1c:	00a00034 	movhi	r2,32768
81106e20:	10824804 	addi	r2,r2,2336
81106e24:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e28:	0005883a 	mov	r2,zero
81106e2c:	0000db06 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106e30:	e03ff715 	stw	zero,-36(fp)
81106e34:	00002406 	br	81106ec8 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106e38:	e0bff403 	ldbu	r2,-48(fp)
81106e3c:	10803fcc 	andi	r2,r2,255
81106e40:	1004d1fa 	srli	r2,r2,7
81106e44:	10c03fcc 	andi	r3,r2,255
81106e48:	00a00034 	movhi	r2,32768
81106e4c:	10825004 	addi	r2,r2,2368
81106e50:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106e54:	e0bff403 	ldbu	r2,-48(fp)
81106e58:	1085883a 	add	r2,r2,r2
81106e5c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106e60:	e0bff517 	ldw	r2,-44(fp)
81106e64:	1085883a 	add	r2,r2,r2
81106e68:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106e6c:	00a00034 	movhi	r2,32768
81106e70:	10825404 	addi	r2,r2,2384
81106e74:	10800037 	ldwio	r2,0(r2)
81106e78:	1080004c 	andi	r2,r2,1
81106e7c:	1007883a 	mov	r3,r2
81106e80:	e0bff517 	ldw	r2,-44(fp)
81106e84:	10c4b03a 	or	r2,r2,r3
81106e88:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106e8c:	00c00044 	movi	r3,1
81106e90:	00a00034 	movhi	r2,32768
81106e94:	10824c04 	addi	r2,r2,2352
81106e98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106e9c:	010003c4 	movi	r4,15
81106ea0:	1127ffc0 	call	81127ffc <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106ea4:	0007883a 	mov	r3,zero
81106ea8:	00a00034 	movhi	r2,32768
81106eac:	10824c04 	addi	r2,r2,2352
81106eb0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106eb4:	010003c4 	movi	r4,15
81106eb8:	1127ffc0 	call	81127ffc <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ebc:	e0bff717 	ldw	r2,-36(fp)
81106ec0:	10800044 	addi	r2,r2,1
81106ec4:	e0bff715 	stw	r2,-36(fp)
81106ec8:	e0bff717 	ldw	r2,-36(fp)
81106ecc:	10800090 	cmplti	r2,r2,2
81106ed0:	103fd91e 	bne	r2,zero,81106e38 <__reset+0xfb0e6e38>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106ed4:	e03ff715 	stw	zero,-36(fp)
81106ed8:	00002406 	br	81106f6c <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106edc:	e0bff403 	ldbu	r2,-48(fp)
81106ee0:	10803fcc 	andi	r2,r2,255
81106ee4:	1004d1fa 	srli	r2,r2,7
81106ee8:	10c03fcc 	andi	r3,r2,255
81106eec:	00a00034 	movhi	r2,32768
81106ef0:	10825004 	addi	r2,r2,2368
81106ef4:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ef8:	e0bff403 	ldbu	r2,-48(fp)
81106efc:	1085883a 	add	r2,r2,r2
81106f00:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f04:	e0bff517 	ldw	r2,-44(fp)
81106f08:	1085883a 	add	r2,r2,r2
81106f0c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f10:	00a00034 	movhi	r2,32768
81106f14:	10825404 	addi	r2,r2,2384
81106f18:	10800037 	ldwio	r2,0(r2)
81106f1c:	1080004c 	andi	r2,r2,1
81106f20:	1007883a 	mov	r3,r2
81106f24:	e0bff517 	ldw	r2,-44(fp)
81106f28:	10c4b03a 	or	r2,r2,r3
81106f2c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106f30:	00c00044 	movi	r3,1
81106f34:	00a00034 	movhi	r2,32768
81106f38:	10824c04 	addi	r2,r2,2352
81106f3c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f40:	010003c4 	movi	r4,15
81106f44:	1127ffc0 	call	81127ffc <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f48:	0007883a 	mov	r3,zero
81106f4c:	00a00034 	movhi	r2,32768
81106f50:	10824c04 	addi	r2,r2,2352
81106f54:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f58:	010003c4 	movi	r4,15
81106f5c:	1127ffc0 	call	81127ffc <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f60:	e0bff717 	ldw	r2,-36(fp)
81106f64:	10800044 	addi	r2,r2,1
81106f68:	e0bff715 	stw	r2,-36(fp)
81106f6c:	e0bff717 	ldw	r2,-36(fp)
81106f70:	10800210 	cmplti	r2,r2,8
81106f74:	103fd91e 	bne	r2,zero,81106edc <__reset+0xfb0e6edc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106f78:	e03ff715 	stw	zero,-36(fp)
81106f7c:	00001a06 	br	81106fe8 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106f80:	e0bff517 	ldw	r2,-44(fp)
81106f84:	1085883a 	add	r2,r2,r2
81106f88:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106f8c:	00a00034 	movhi	r2,32768
81106f90:	10825404 	addi	r2,r2,2384
81106f94:	10800037 	ldwio	r2,0(r2)
81106f98:	1080004c 	andi	r2,r2,1
81106f9c:	1007883a 	mov	r3,r2
81106fa0:	e0bff517 	ldw	r2,-44(fp)
81106fa4:	10c4b03a 	or	r2,r2,r3
81106fa8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fac:	00c00044 	movi	r3,1
81106fb0:	00a00034 	movhi	r2,32768
81106fb4:	10824c04 	addi	r2,r2,2352
81106fb8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fbc:	010003c4 	movi	r4,15
81106fc0:	1127ffc0 	call	81127ffc <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fc4:	0007883a 	mov	r3,zero
81106fc8:	00a00034 	movhi	r2,32768
81106fcc:	10824c04 	addi	r2,r2,2352
81106fd0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fd4:	010003c4 	movi	r4,15
81106fd8:	1127ffc0 	call	81127ffc <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800044 	addi	r2,r2,1
81106fe4:	e0bff715 	stw	r2,-36(fp)
81106fe8:	e0bff717 	ldw	r2,-36(fp)
81106fec:	10800210 	cmplti	r2,r2,8
81106ff0:	103fe31e 	bne	r2,zero,81106f80 <__reset+0xfb0e6f80>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81106ff4:	e03ff715 	stw	zero,-36(fp)
81106ff8:	00001a06 	br	81107064 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106ffc:	e0bff517 	ldw	r2,-44(fp)
81107000:	1085883a 	add	r2,r2,r2
81107004:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107008:	00a00034 	movhi	r2,32768
8110700c:	10825404 	addi	r2,r2,2384
81107010:	10800037 	ldwio	r2,0(r2)
81107014:	1080004c 	andi	r2,r2,1
81107018:	1007883a 	mov	r3,r2
8110701c:	e0bff517 	ldw	r2,-44(fp)
81107020:	10c4b03a 	or	r2,r2,r3
81107024:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107028:	00c00044 	movi	r3,1
8110702c:	00a00034 	movhi	r2,32768
81107030:	10824c04 	addi	r2,r2,2352
81107034:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107038:	010003c4 	movi	r4,15
8110703c:	1127ffc0 	call	81127ffc <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107040:	0007883a 	mov	r3,zero
81107044:	00a00034 	movhi	r2,32768
81107048:	10824c04 	addi	r2,r2,2352
8110704c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107050:	010003c4 	movi	r4,15
81107054:	1127ffc0 	call	81127ffc <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800044 	addi	r2,r2,1
81107060:	e0bff715 	stw	r2,-36(fp)
81107064:	e0bff717 	ldw	r2,-36(fp)
81107068:	10800210 	cmplti	r2,r2,8
8110706c:	103fe31e 	bne	r2,zero,81106ffc <__reset+0xfb0e6ffc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107070:	e03ff715 	stw	zero,-36(fp)
81107074:	00001a06 	br	811070e0 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81107078:	e0bff517 	ldw	r2,-44(fp)
8110707c:	1085883a 	add	r2,r2,r2
81107080:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81107084:	00a00034 	movhi	r2,32768
81107088:	10825404 	addi	r2,r2,2384
8110708c:	10800037 	ldwio	r2,0(r2)
81107090:	1080004c 	andi	r2,r2,1
81107094:	1007883a 	mov	r3,r2
81107098:	e0bff517 	ldw	r2,-44(fp)
8110709c:	10c4b03a 	or	r2,r2,r3
811070a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811070a4:	00c00044 	movi	r3,1
811070a8:	00a00034 	movhi	r2,32768
811070ac:	10824c04 	addi	r2,r2,2352
811070b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070b4:	010003c4 	movi	r4,15
811070b8:	1127ffc0 	call	81127ffc <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070bc:	0007883a 	mov	r3,zero
811070c0:	00a00034 	movhi	r2,32768
811070c4:	10824c04 	addi	r2,r2,2352
811070c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070cc:	010003c4 	movi	r4,15
811070d0:	1127ffc0 	call	81127ffc <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800044 	addi	r2,r2,1
811070dc:	e0bff715 	stw	r2,-36(fp)
811070e0:	e0bff717 	ldw	r2,-36(fp)
811070e4:	10800190 	cmplti	r2,r2,6
811070e8:	103fe31e 	bne	r2,zero,81107078 <__reset+0xfb0e7078>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
811070ec:	00c00044 	movi	r3,1
811070f0:	00a00034 	movhi	r2,32768
811070f4:	10824c04 	addi	r2,r2,2352
811070f8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
811070fc:	010003c4 	movi	r4,15
81107100:	1127ffc0 	call	81127ffc <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107104:	00c000c4 	movi	r3,3
81107108:	00a00034 	movhi	r2,32768
8110710c:	10824804 	addi	r2,r2,2336
81107110:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107114:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107118:	00800044 	movi	r2,1
8110711c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107120:	e03ff715 	stw	zero,-36(fp)
81107124:	00000d06 	br	8110715c <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107128:	e0fff517 	ldw	r3,-44(fp)
8110712c:	e0bff617 	ldw	r2,-40(fp)
81107130:	1884703a 	and	r2,r3,r2
81107134:	1000031e 	bne	r2,zero,81107144 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
81107138:	e0bff917 	ldw	r2,-28(fp)
8110713c:	10800044 	addi	r2,r2,1
81107140:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
81107144:	e0bff617 	ldw	r2,-40(fp)
81107148:	1085883a 	add	r2,r2,r2
8110714c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800044 	addi	r2,r2,1
81107158:	e0bff715 	stw	r2,-36(fp)
8110715c:	e0bff717 	ldw	r2,-36(fp)
81107160:	10800810 	cmplti	r2,r2,32
81107164:	103ff01e 	bne	r2,zero,81107128 <__reset+0xfb0e7128>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
81107168:	e0bff917 	ldw	r2,-28(fp)
8110716c:	1080004c 	andi	r2,r2,1
81107170:	1005003a 	cmpeq	r2,r2,zero
81107174:	10803fcc 	andi	r2,r2,255
81107178:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110717c:	e0bffb17 	ldw	r2,-20(fp)
81107180:	1000021e 	bne	r2,zero,8110718c <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
81107184:	0005883a 	mov	r2,zero
81107188:	00000406 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
8110718c:	e0800317 	ldw	r2,12(fp)
81107190:	e0fff517 	ldw	r3,-44(fp)
81107194:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107198:	e0bffb17 	ldw	r2,-20(fp)
}
8110719c:	e037883a 	mov	sp,fp
811071a0:	dfc00117 	ldw	ra,4(sp)
811071a4:	df000017 	ldw	fp,0(sp)
811071a8:	dec00204 	addi	sp,sp,8
811071ac:	f800283a 	ret

811071b0 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
811071b0:	defffc04 	addi	sp,sp,-16
811071b4:	de00012e 	bgeu	sp,et,811071bc <vRstcSimucamReset+0xc>
811071b8:	003b68fa 	trap	3
811071bc:	dfc00315 	stw	ra,12(sp)
811071c0:	df000215 	stw	fp,8(sp)
811071c4:	df000204 	addi	fp,sp,8
811071c8:	2005883a 	mov	r2,r4
811071cc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
811071d0:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
811071d4:	e0bfff0b 	ldhu	r2,-4(fp)
811071d8:	e0fffe17 	ldw	r3,-8(fp)
811071dc:	1884b03a 	or	r2,r3,r2
811071e0:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
811071e4:	e0bffe17 	ldw	r2,-8(fp)
811071e8:	10800074 	orhi	r2,r2,1
811071ec:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	000b883a 	mov	r5,zero
811071f8:	01200034 	movhi	r4,32768
811071fc:	21020004 	addi	r4,r4,2048
81107200:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107204:	0001883a 	nop
81107208:	e037883a 	mov	sp,fp
8110720c:	dfc00117 	ldw	ra,4(sp)
81107210:	df000017 	ldw	fp,0(sp)
81107214:	dec00204 	addi	sp,sp,8
81107218:	f800283a 	ret

8110721c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110721c:	defffc04 	addi	sp,sp,-16
81107220:	de00012e 	bgeu	sp,et,81107228 <vRstcReleaseDeviceReset+0xc>
81107224:	003b68fa 	trap	3
81107228:	dfc00315 	stw	ra,12(sp)
8110722c:	df000215 	stw	fp,8(sp)
81107230:	df000204 	addi	fp,sp,8
81107234:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
81107238:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110723c:	01400044 	movi	r5,1
81107240:	01200034 	movhi	r4,32768
81107244:	21020004 	addi	r4,r4,2048
81107248:	11073540 	call	81107354 <uliRstReadReg>
8110724c:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	0084303a 	nor	r2,zero,r2
81107258:	e0fffe17 	ldw	r3,-8(fp)
8110725c:	1884703a 	and	r2,r3,r2
81107260:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107264:	e1bffe17 	ldw	r6,-8(fp)
81107268:	01400044 	movi	r5,1
8110726c:	01200034 	movhi	r4,32768
81107270:	21020004 	addi	r4,r4,2048
81107274:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107278:	0001883a 	nop
8110727c:	e037883a 	mov	sp,fp
81107280:	dfc00117 	ldw	ra,4(sp)
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00204 	addi	sp,sp,8
8110728c:	f800283a 	ret

81107290 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107290:	defffc04 	addi	sp,sp,-16
81107294:	de00012e 	bgeu	sp,et,8110729c <vRstcHoldDeviceReset+0xc>
81107298:	003b68fa 	trap	3
8110729c:	dfc00315 	stw	ra,12(sp)
811072a0:	df000215 	stw	fp,8(sp)
811072a4:	df000204 	addi	fp,sp,8
811072a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072ac:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072b0:	01400044 	movi	r5,1
811072b4:	01200034 	movhi	r4,32768
811072b8:	21020004 	addi	r4,r4,2048
811072bc:	11073540 	call	81107354 <uliRstReadReg>
811072c0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
811072c4:	e0fffe17 	ldw	r3,-8(fp)
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	1884b03a 	or	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcWriteReg+0xc>
81107308:	003b68fa 	trap	3
8110730c:	df000315 	stw	fp,12(sp)
81107310:	df000304 	addi	fp,sp,12
81107314:	e13ffd15 	stw	r4,-12(fp)
81107318:	e17ffe15 	stw	r5,-8(fp)
8110731c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	1085883a 	add	r2,r2,r2
81107328:	1085883a 	add	r2,r2,r2
8110732c:	1007883a 	mov	r3,r2
81107330:	e0bffd17 	ldw	r2,-12(fp)
81107334:	10c5883a 	add	r2,r2,r3
81107338:	e0ffff17 	ldw	r3,-4(fp)
8110733c:	10c00015 	stw	r3,0(r2)
}
81107340:	0001883a 	nop
81107344:	e037883a 	mov	sp,fp
81107348:	df000017 	ldw	fp,0(sp)
8110734c:	dec00104 	addi	sp,sp,4
81107350:	f800283a 	ret

81107354 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81107354:	defffc04 	addi	sp,sp,-16
81107358:	de00012e 	bgeu	sp,et,81107360 <uliRstReadReg+0xc>
8110735c:	003b68fa 	trap	3
81107360:	df000315 	stw	fp,12(sp)
81107364:	df000304 	addi	fp,sp,12
81107368:	e13ffe15 	stw	r4,-8(fp)
8110736c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81107370:	e0bfff17 	ldw	r2,-4(fp)
81107374:	1085883a 	add	r2,r2,r2
81107378:	1085883a 	add	r2,r2,r2
8110737c:	1007883a 	mov	r3,r2
81107380:	e0bffe17 	ldw	r2,-8(fp)
81107384:	10c5883a 	add	r2,r2,r3
81107388:	10800017 	ldw	r2,0(r2)
8110738c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107390:	e0bffd17 	ldw	r2,-12(fp)
}
81107394:	e037883a 	mov	sp,fp
81107398:	df000017 	ldw	fp,0(sp)
8110739c:	dec00104 	addi	sp,sp,4
811073a0:	f800283a 	ret

811073a4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811073a4:	defffe04 	addi	sp,sp,-8
811073a8:	de00012e 	bgeu	sp,et,811073b0 <v_spi_start+0xc>
811073ac:	003b68fa 	trap	3
811073b0:	dfc00115 	stw	ra,4(sp)
811073b4:	df000015 	stw	fp,0(sp)
811073b8:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811073bc:	0007883a 	mov	r3,zero
811073c0:	00a00034 	movhi	r2,32768
811073c4:	10823004 	addi	r2,r2,2240
811073c8:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
811073cc:	0007883a 	mov	r3,zero
811073d0:	00a00034 	movhi	r2,32768
811073d4:	10822c04 	addi	r2,r2,2224
811073d8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811073dc:	01002584 	movi	r4,150
811073e0:	1127ffc0 	call	81127ffc <usleep>
}
811073e4:	0001883a 	nop
811073e8:	e037883a 	mov	sp,fp
811073ec:	dfc00117 	ldw	ra,4(sp)
811073f0:	df000017 	ldw	fp,0(sp)
811073f4:	dec00204 	addi	sp,sp,8
811073f8:	f800283a 	ret

811073fc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811073fc:	defffc04 	addi	sp,sp,-16
81107400:	de00012e 	bgeu	sp,et,81107408 <v_spi_send_byte+0xc>
81107404:	003b68fa 	trap	3
81107408:	dfc00315 	stw	ra,12(sp)
8110740c:	df000215 	stw	fp,8(sp)
81107410:	df000204 	addi	fp,sp,8
81107414:	2005883a 	mov	r2,r4
81107418:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110741c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107420:	00bfe004 	movi	r2,-128
81107424:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107428:	e03ffe05 	stb	zero,-8(fp)
8110742c:	00001b06 	br	8110749c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81107430:	e0ffff03 	ldbu	r3,-4(fp)
81107434:	e0bffe43 	ldbu	r2,-7(fp)
81107438:	1884703a 	and	r2,r3,r2
8110743c:	10803fcc 	andi	r2,r2,255
81107440:	1004c03a 	cmpne	r2,r2,zero
81107444:	10c03fcc 	andi	r3,r2,255
81107448:	00a00034 	movhi	r2,32768
8110744c:	10823404 	addi	r2,r2,2256
81107450:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81107454:	e0bffe43 	ldbu	r2,-7(fp)
81107458:	1004d07a 	srli	r2,r2,1
8110745c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81107460:	00c00044 	movi	r3,1
81107464:	00a00034 	movhi	r2,32768
81107468:	10823004 	addi	r2,r2,2240
8110746c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107470:	01002584 	movi	r4,150
81107474:	1127ffc0 	call	81127ffc <usleep>
        SPI_SCK(0);//sck=0; // clock low
81107478:	0007883a 	mov	r3,zero
8110747c:	00a00034 	movhi	r2,32768
81107480:	10823004 	addi	r2,r2,2240
81107484:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107488:	01002584 	movi	r4,150
8110748c:	1127ffc0 	call	81127ffc <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107490:	e0bffe03 	ldbu	r2,-8(fp)
81107494:	10800044 	addi	r2,r2,1
81107498:	e0bffe05 	stb	r2,-8(fp)
8110749c:	e0bffe03 	ldbu	r2,-8(fp)
811074a0:	10800230 	cmpltui	r2,r2,8
811074a4:	103fe21e 	bne	r2,zero,81107430 <__reset+0xfb0e7430>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
811074a8:	0001883a 	nop
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	de00012e 	bgeu	sp,et,811074cc <uc_spi_get_byte+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00215 	stw	ra,8(sp)
811074d0:	df000115 	stw	fp,4(sp)
811074d4:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811074d8:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811074dc:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811074e0:	e03fff05 	stb	zero,-4(fp)
811074e4:	00001a06 	br	81107550 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811074e8:	e0bfff43 	ldbu	r2,-3(fp)
811074ec:	1085883a 	add	r2,r2,r2
811074f0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811074f4:	00a00034 	movhi	r2,32768
811074f8:	10823804 	addi	r2,r2,2272
811074fc:	10800037 	ldwio	r2,0(r2)
81107500:	1080004c 	andi	r2,r2,1
81107504:	1007883a 	mov	r3,r2
81107508:	e0bfff43 	ldbu	r2,-3(fp)
8110750c:	1884b03a 	or	r2,r3,r2
81107510:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107514:	00c00044 	movi	r3,1
81107518:	00a00034 	movhi	r2,32768
8110751c:	10823004 	addi	r2,r2,2240
81107520:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107524:	01002584 	movi	r4,150
81107528:	1127ffc0 	call	81127ffc <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110752c:	0007883a 	mov	r3,zero
81107530:	00a00034 	movhi	r2,32768
81107534:	10823004 	addi	r2,r2,2240
81107538:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110753c:	01002584 	movi	r4,150
81107540:	1127ffc0 	call	81127ffc <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81107544:	e0bfff03 	ldbu	r2,-4(fp)
81107548:	10800044 	addi	r2,r2,1
8110754c:	e0bfff05 	stb	r2,-4(fp)
81107550:	e0bfff03 	ldbu	r2,-4(fp)
81107554:	10800230 	cmpltui	r2,r2,8
81107558:	103fe31e 	bne	r2,zero,811074e8 <__reset+0xfb0e74e8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110755c:	e0bfff43 	ldbu	r2,-3(fp)
}
81107560:	e037883a 	mov	sp,fp
81107564:	dfc00117 	ldw	ra,4(sp)
81107568:	df000017 	ldw	fp,0(sp)
8110756c:	dec00204 	addi	sp,sp,8
81107570:	f800283a 	ret

81107574 <v_spi_end>:

void v_spi_end(void){
81107574:	defffe04 	addi	sp,sp,-8
81107578:	de00012e 	bgeu	sp,et,81107580 <v_spi_end+0xc>
8110757c:	003b68fa 	trap	3
81107580:	dfc00115 	stw	ra,4(sp)
81107584:	df000015 	stw	fp,0(sp)
81107588:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110758c:	0007883a 	mov	r3,zero
81107590:	00a00034 	movhi	r2,32768
81107594:	10823004 	addi	r2,r2,2240
81107598:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110759c:	01002584 	movi	r4,150
811075a0:	1127ffc0 	call	81127ffc <usleep>
    SPI_CS_N(1);
811075a4:	00c00044 	movi	r3,1
811075a8:	00a00034 	movhi	r2,32768
811075ac:	10822c04 	addi	r2,r2,2224
811075b0:	10c00035 	stwio	r3,0(r2)
}
811075b4:	0001883a 	nop
811075b8:	e037883a 	mov	sp,fp
811075bc:	dfc00117 	ldw	ra,4(sp)
811075c0:	df000017 	ldw	fp,0(sp)
811075c4:	dec00204 	addi	sp,sp,8
811075c8:	f800283a 	ret

811075cc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811075cc:	defff604 	addi	sp,sp,-40
811075d0:	de00012e 	bgeu	sp,et,811075d8 <RTCC_SPI_R_MAC+0xc>
811075d4:	003b68fa 	trap	3
811075d8:	dfc00915 	stw	ra,36(sp)
811075dc:	df000815 	stw	fp,32(sp)
811075e0:	df000804 	addi	fp,sp,32
811075e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811075e8:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
811075ec:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
811075f0:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
811075f4:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
811075f8:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
811075fc:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107600:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107604:	00800084 	movi	r2,2
81107608:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110760c:	00800cc4 	movi	r2,51
81107610:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107614:	11073a40 	call	811073a4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107618:	e0bffec3 	ldbu	r2,-5(fp)
8110761c:	1009883a 	mov	r4,r2
81107620:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107624:	e0bffe83 	ldbu	r2,-6(fp)
81107628:	1009883a 	mov	r4,r2
8110762c:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81107630:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107634:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81107638:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110763c:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81107640:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107644:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81107648:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110764c:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81107650:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107654:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81107658:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110765c:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81107660:	11075740 	call	81107574 <v_spi_end>

    bSuccess = TRUE;
81107664:	00800044 	movi	r2,1
81107668:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110766c:	e0bfff17 	ldw	r2,-4(fp)
81107670:	e0fffd03 	ldbu	r3,-12(fp)
81107674:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81107678:	e0bfff17 	ldw	r2,-4(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0fffd43 	ldbu	r3,-11(fp)
81107684:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	10800084 	addi	r2,r2,2
81107690:	e0fffd83 	ldbu	r3,-10(fp)
81107694:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107698:	e0bfff17 	ldw	r2,-4(fp)
8110769c:	108000c4 	addi	r2,r2,3
811076a0:	e0fffdc3 	ldbu	r3,-9(fp)
811076a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811076a8:	e0bfff17 	ldw	r2,-4(fp)
811076ac:	10800104 	addi	r2,r2,4
811076b0:	e0fffe03 	ldbu	r3,-8(fp)
811076b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811076b8:	e0bfff17 	ldw	r2,-4(fp)
811076bc:	10800144 	addi	r2,r2,5
811076c0:	e0fffe43 	ldbu	r3,-7(fp)
811076c4:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811076c8:	e1bffd03 	ldbu	r6,-12(fp)
811076cc:	e1fffd43 	ldbu	r7,-11(fp)
811076d0:	e0bffd83 	ldbu	r2,-10(fp)
811076d4:	e0fffdc3 	ldbu	r3,-9(fp)
811076d8:	e13ffe03 	ldbu	r4,-8(fp)
811076dc:	e17ffe43 	ldbu	r5,-7(fp)
811076e0:	d9400315 	stw	r5,12(sp)
811076e4:	d9000215 	stw	r4,8(sp)
811076e8:	d8c00115 	stw	r3,4(sp)
811076ec:	d8800015 	stw	r2,0(sp)
811076f0:	01604534 	movhi	r5,33044
811076f4:	2972a104 	addi	r5,r5,-13692
811076f8:	01204534 	movhi	r4,33044
811076fc:	21039104 	addi	r4,r4,3652
81107700:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81107704:	d0a04e17 	ldw	r2,-32456(gp)
81107708:	01604534 	movhi	r5,33044
8110770c:	29439104 	addi	r5,r5,3652
81107710:	1009883a 	mov	r4,r2
81107714:	1111b340 	call	81111b34 <fprintf>
#endif

    return bSuccess;
81107718:	e0bffc17 	ldw	r2,-16(fp)
}
8110771c:	e037883a 	mov	sp,fp
81107720:	dfc00117 	ldw	ra,4(sp)
81107724:	df000017 	ldw	fp,0(sp)
81107728:	dec00204 	addi	sp,sp,8
8110772c:	f800283a 	ret

81107730 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81107730:	defffd04 	addi	sp,sp,-12
81107734:	de00012e 	bgeu	sp,et,8110773c <bSSDisplayConfig+0xc>
81107738:	003b68fa 	trap	3
8110773c:	df000215 	stw	fp,8(sp)
81107740:	df000204 	addi	fp,sp,8
81107744:	2005883a 	mov	r2,r4
81107748:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110774c:	e0bfff03 	ldbu	r2,-4(fp)
81107750:	10c00168 	cmpgeui	r3,r2,5
81107754:	18001c1e 	bne	r3,zero,811077c8 <bSSDisplayConfig+0x98>
81107758:	100690ba 	slli	r3,r2,2
8110775c:	00a04434 	movhi	r2,33040
81107760:	109ddc04 	addi	r2,r2,30576
81107764:	1885883a 	add	r2,r3,r2
81107768:	10800017 	ldw	r2,0(r2)
8110776c:	1000683a 	jmp	r2
81107770:	81107784 	addi	r4,r16,16862
81107774:	81107790 	cmplti	r4,r16,16862
81107778:	8110779c 	xori	r4,r16,16862
8110777c:	811077b0 	cmpltui	r4,r16,16862
81107780:	811077c0 	call	8811077c <__reset+0x20f077c>
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81107784:	00800cc4 	movi	r2,51
81107788:	d0a04545 	stb	r2,-32491(gp)
	    break;
8110778c:	00001006 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107790:	00801544 	movi	r2,85
81107794:	d0a04545 	stb	r2,-32491(gp)
	    break;
81107798:	00000d06 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110779c:	d0e04543 	ldbu	r3,-32491(gp)
811077a0:	00bff744 	movi	r2,-35
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077ac:	00000806 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
811077b0:	d0a04543 	ldbu	r2,-32491(gp)
811077b4:	10800894 	ori	r2,r2,34
811077b8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077bc:	00000406 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
811077c0:	d0204545 	stb	zero,-32491(gp)
	    break;
811077c4:	00000206 	br	811077d0 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
811077c8:	0005883a 	mov	r2,zero
811077cc:	00000806 	br	811077f0 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
811077d0:	00a00034 	movhi	r2,32768
811077d4:	10828404 	addi	r2,r2,2576
811077d8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811077dc:	d0a04543 	ldbu	r2,-32491(gp)
811077e0:	10c03fcc 	andi	r3,r2,255
811077e4:	e0bffe17 	ldw	r2,-8(fp)
811077e8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811077ec:	00800044 	movi	r2,1
}
811077f0:	e037883a 	mov	sp,fp
811077f4:	df000017 	ldw	fp,0(sp)
811077f8:	dec00104 	addi	sp,sp,4
811077fc:	f800283a 	ret

81107800 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107800:	defffd04 	addi	sp,sp,-12
81107804:	de00012e 	bgeu	sp,et,8110780c <bSSDisplayUpdate+0xc>
81107808:	003b68fa 	trap	3
8110780c:	df000215 	stw	fp,8(sp)
81107810:	df000204 	addi	fp,sp,8
81107814:	2005883a 	mov	r2,r4
81107818:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110781c:	00a00034 	movhi	r2,32768
81107820:	10828404 	addi	r2,r2,2576
81107824:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107828:	e0bffe17 	ldw	r2,-8(fp)
8110782c:	10800104 	addi	r2,r2,4
81107830:	e0ffff03 	ldbu	r3,-4(fp)
81107834:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81107838:	00800044 	movi	r2,1
}
8110783c:	e037883a 	mov	sp,fp
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00104 	addi	sp,sp,4
81107848:	f800283a 	ret

8110784c <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110784c:	defffd04 	addi	sp,sp,-12
81107850:	de00012e 	bgeu	sp,et,81107858 <vSyncHandleIrq+0xc>
81107854:	003b68fa 	trap	3
81107858:	df000215 	stw	fp,8(sp)
8110785c:	df000204 	addi	fp,sp,8
81107860:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81107864:	e0bfff17 	ldw	r2,-4(fp)
81107868:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
8110786c:	d0a04703 	ldbu	r2,-32484(gp)
81107870:	10800044 	addi	r2,r2,1
81107874:	d0a04705 	stb	r2,-32484(gp)
}
81107878:	0001883a 	nop
8110787c:	e037883a 	mov	sp,fp
81107880:	df000017 	ldw	fp,0(sp)
81107884:	dec00104 	addi	sp,sp,4
81107888:	f800283a 	ret

8110788c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110788c:	defffd04 	addi	sp,sp,-12
81107890:	de00012e 	bgeu	sp,et,81107898 <vSyncInitIrq+0xc>
81107894:	003b68fa 	trap	3
81107898:	dfc00215 	stw	ra,8(sp)
8110789c:	df000115 	stw	fp,4(sp)
811078a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
811078a4:	d0a04604 	addi	r2,gp,-32488
811078a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
811078ac:	01a04434 	movhi	r6,33040
811078b0:	319e1304 	addi	r6,r6,30796
811078b4:	e17fff17 	ldw	r5,-4(fp)
811078b8:	01000284 	movi	r4,10
811078bc:	11274d00 	call	811274d0 <alt_irq_register>
}
811078c0:	0001883a 	nop
811078c4:	e037883a 	mov	sp,fp
811078c8:	dfc00117 	ldw	ra,4(sp)
811078cc:	df000017 	ldw	fp,0(sp)
811078d0:	dec00204 	addi	sp,sp,8
811078d4:	f800283a 	ret

811078d8 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
811078d8:	defffc04 	addi	sp,sp,-16
811078dc:	de00012e 	bgeu	sp,et,811078e4 <bSyncStatusExtnIrq+0xc>
811078e0:	003b68fa 	trap	3
811078e4:	dfc00315 	stw	ra,12(sp)
811078e8:	df000215 	stw	fp,8(sp)
811078ec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811078f0:	0009883a 	mov	r4,zero
811078f4:	11086880 	call	81108688 <uliSyncReadReg>
811078f8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
811078fc:	e0bfff17 	ldw	r2,-4(fp)
81107900:	1000030e 	bge	r2,zero,81107910 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107904:	00800044 	movi	r2,1
81107908:	e0bffe15 	stw	r2,-8(fp)
8110790c:	00000106 	br	81107914 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107910:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107914:	e0bffe17 	ldw	r2,-8(fp)
}
81107918:	e037883a 	mov	sp,fp
8110791c:	dfc00117 	ldw	ra,4(sp)
81107920:	df000017 	ldw	fp,0(sp)
81107924:	dec00204 	addi	sp,sp,8
81107928:	f800283a 	ret

8110792c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110792c:	defffc04 	addi	sp,sp,-16
81107930:	de00012e 	bgeu	sp,et,81107938 <ucSyncStatusState+0xc>
81107934:	003b68fa 	trap	3
81107938:	dfc00315 	stw	ra,12(sp)
8110793c:	df000215 	stw	fp,8(sp)
81107940:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107944:	0009883a 	mov	r4,zero
81107948:	11086880 	call	81108688 <uliSyncReadReg>
8110794c:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81107950:	e0bffe17 	ldw	r2,-8(fp)
81107954:	10803fec 	andhi	r2,r2,255
81107958:	1004d43a 	srli	r2,r2,16
8110795c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107960:	e0bfff03 	ldbu	r2,-4(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81107978:	defffc04 	addi	sp,sp,-16
8110797c:	de00012e 	bgeu	sp,et,81107984 <ucSyncStatusErrorCode+0xc>
81107980:	003b68fa 	trap	3
81107984:	dfc00315 	stw	ra,12(sp)
81107988:	df000215 	stw	fp,8(sp)
8110798c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107990:	0009883a 	mov	r4,zero
81107994:	11086880 	call	81108688 <uliSyncReadReg>
81107998:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10bfc00c 	andi	r2,r2,65280
811079a4:	1004d23a 	srli	r2,r2,8
811079a8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079ac:	e0bfff03 	ldbu	r2,-4(fp)
}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	de00012e 	bgeu	sp,et,811079d0 <ucSyncStatusCycleNumber+0xc>
811079cc:	003b68fa 	trap	3
811079d0:	dfc00315 	stw	ra,12(sp)
811079d4:	df000215 	stw	fp,8(sp)
811079d8:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079dc:	0009883a 	mov	r4,zero
811079e0:	11086880 	call	81108688 <uliSyncReadReg>
811079e4:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
811079e8:	e0bffe17 	ldw	r2,-8(fp)
811079ec:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079f0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079f4:	e037883a 	mov	sp,fp
811079f8:	dfc00117 	ldw	ra,4(sp)
811079fc:	df000017 	ldw	fp,0(sp)
81107a00:	dec00204 	addi	sp,sp,8
81107a04:	f800283a 	ret

81107a08 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a08:	defffd04 	addi	sp,sp,-12
81107a0c:	de00012e 	bgeu	sp,et,81107a14 <bSyncSetMbt+0xc>
81107a10:	003b68fa 	trap	3
81107a14:	dfc00215 	stw	ra,8(sp)
81107a18:	df000115 	stw	fp,4(sp)
81107a1c:	df000104 	addi	fp,sp,4
81107a20:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a24:	e17fff17 	ldw	r5,-4(fp)
81107a28:	01000104 	movi	r4,4
81107a2c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a30:	00800044 	movi	r2,1
}
81107a34:	e037883a 	mov	sp,fp
81107a38:	dfc00117 	ldw	ra,4(sp)
81107a3c:	df000017 	ldw	fp,0(sp)
81107a40:	dec00204 	addi	sp,sp,8
81107a44:	f800283a 	ret

81107a48 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107a48:	defffd04 	addi	sp,sp,-12
81107a4c:	de00012e 	bgeu	sp,et,81107a54 <bSyncSetBt+0xc>
81107a50:	003b68fa 	trap	3
81107a54:	dfc00215 	stw	ra,8(sp)
81107a58:	df000115 	stw	fp,4(sp)
81107a5c:	df000104 	addi	fp,sp,4
81107a60:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107a64:	e17fff17 	ldw	r5,-4(fp)
81107a68:	01000144 	movi	r4,5
81107a6c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a70:	00800044 	movi	r2,1
}
81107a74:	e037883a 	mov	sp,fp
81107a78:	dfc00117 	ldw	ra,4(sp)
81107a7c:	df000017 	ldw	fp,0(sp)
81107a80:	dec00204 	addi	sp,sp,8
81107a84:	f800283a 	ret

81107a88 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107a88:	defffd04 	addi	sp,sp,-12
81107a8c:	de00012e 	bgeu	sp,et,81107a94 <bSyncSetPer+0xc>
81107a90:	003b68fa 	trap	3
81107a94:	dfc00215 	stw	ra,8(sp)
81107a98:	df000115 	stw	fp,4(sp)
81107a9c:	df000104 	addi	fp,sp,4
81107aa0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107aa4:	e17fff17 	ldw	r5,-4(fp)
81107aa8:	01000184 	movi	r4,6
81107aac:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ab0:	00800044 	movi	r2,1
}
81107ab4:	e037883a 	mov	sp,fp
81107ab8:	dfc00117 	ldw	ra,4(sp)
81107abc:	df000017 	ldw	fp,0(sp)
81107ac0:	dec00204 	addi	sp,sp,8
81107ac4:	f800283a 	ret

81107ac8 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107ac8:	defffd04 	addi	sp,sp,-12
81107acc:	de00012e 	bgeu	sp,et,81107ad4 <bSyncSetOst+0xc>
81107ad0:	003b68fa 	trap	3
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
81107ae0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107ae4:	e17fff17 	ldw	r5,-4(fp)
81107ae8:	010001c4 	movi	r4,7
81107aec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107af0:	00800044 	movi	r2,1
}
81107af4:	e037883a 	mov	sp,fp
81107af8:	dfc00117 	ldw	ra,4(sp)
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00204 	addi	sp,sp,8
81107b04:	f800283a 	ret

81107b08 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b08:	defffc04 	addi	sp,sp,-16
81107b0c:	de00012e 	bgeu	sp,et,81107b14 <bSyncSetPolarity+0xc>
81107b10:	003b68fa 	trap	3
81107b14:	dfc00315 	stw	ra,12(sp)
81107b18:	df000215 	stw	fp,8(sp)
81107b1c:	df000204 	addi	fp,sp,8
81107b20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b24:	01000204 	movi	r4,8
81107b28:	11086880 	call	81108688 <uliSyncReadReg>
81107b2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107b38:	e0fffe17 	ldw	r3,-8(fp)
81107b3c:	00bfbfc4 	movi	r2,-257
81107b40:	1884703a 	and	r2,r3,r2
81107b44:	e0bffe15 	stw	r2,-8(fp)
81107b48:	00000306 	br	81107b58 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107b4c:	e0bffe17 	ldw	r2,-8(fp)
81107b50:	10804014 	ori	r2,r2,256
81107b54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107b58:	e17ffe17 	ldw	r5,-8(fp)
81107b5c:	01000204 	movi	r4,8
81107b60:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107b64:	00800044 	movi	r2,1
}
81107b68:	e037883a 	mov	sp,fp
81107b6c:	dfc00117 	ldw	ra,4(sp)
81107b70:	df000017 	ldw	fp,0(sp)
81107b74:	dec00204 	addi	sp,sp,8
81107b78:	f800283a 	ret

81107b7c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107b7c:	defffc04 	addi	sp,sp,-16
81107b80:	de00012e 	bgeu	sp,et,81107b88 <bSyncSetNCycles+0xc>
81107b84:	003b68fa 	trap	3
81107b88:	dfc00315 	stw	ra,12(sp)
81107b8c:	df000215 	stw	fp,8(sp)
81107b90:	df000204 	addi	fp,sp,8
81107b94:	2005883a 	mov	r2,r4
81107b98:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b9c:	01000204 	movi	r4,8
81107ba0:	11086880 	call	81108688 <uliSyncReadReg>
81107ba4:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfc004 	movi	r2,-256
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107bb8:	e0bfff03 	ldbu	r2,-4(fp)
81107bbc:	e0fffe17 	ldw	r3,-8(fp)
81107bc0:	1884b03a 	or	r2,r3,r2
81107bc4:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107bec:	defffd04 	addi	sp,sp,-12
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <uliSyncGetMbt+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00215 	stw	ra,8(sp)
81107bfc:	df000115 	stw	fp,4(sp)
81107c00:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c04:	01000104 	movi	r4,4
81107c08:	11086880 	call	81108688 <uliSyncReadReg>
81107c0c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c10:	e0bfff17 	ldw	r2,-4(fp)
}
81107c14:	e037883a 	mov	sp,fp
81107c18:	dfc00117 	ldw	ra,4(sp)
81107c1c:	df000017 	ldw	fp,0(sp)
81107c20:	dec00204 	addi	sp,sp,8
81107c24:	f800283a 	ret

81107c28 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c28:	defffd04 	addi	sp,sp,-12
81107c2c:	de00012e 	bgeu	sp,et,81107c34 <uliSyncGetBt+0xc>
81107c30:	003b68fa 	trap	3
81107c34:	dfc00215 	stw	ra,8(sp)
81107c38:	df000115 	stw	fp,4(sp)
81107c3c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107c40:	01000144 	movi	r4,5
81107c44:	11086880 	call	81108688 <uliSyncReadReg>
81107c48:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c4c:	e0bfff17 	ldw	r2,-4(fp)
}
81107c50:	e037883a 	mov	sp,fp
81107c54:	dfc00117 	ldw	ra,4(sp)
81107c58:	df000017 	ldw	fp,0(sp)
81107c5c:	dec00204 	addi	sp,sp,8
81107c60:	f800283a 	ret

81107c64 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107c64:	defffd04 	addi	sp,sp,-12
81107c68:	de00012e 	bgeu	sp,et,81107c70 <uliSyncGetPer+0xc>
81107c6c:	003b68fa 	trap	3
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	df000115 	stw	fp,4(sp)
81107c78:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107c7c:	01000184 	movi	r4,6
81107c80:	11086880 	call	81108688 <uliSyncReadReg>
81107c84:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c88:	e0bfff17 	ldw	r2,-4(fp)
}
81107c8c:	e037883a 	mov	sp,fp
81107c90:	dfc00117 	ldw	ra,4(sp)
81107c94:	df000017 	ldw	fp,0(sp)
81107c98:	dec00204 	addi	sp,sp,8
81107c9c:	f800283a 	ret

81107ca0 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107ca0:	defffd04 	addi	sp,sp,-12
81107ca4:	de00012e 	bgeu	sp,et,81107cac <uliSyncGetOst+0xc>
81107ca8:	003b68fa 	trap	3
81107cac:	dfc00215 	stw	ra,8(sp)
81107cb0:	df000115 	stw	fp,4(sp)
81107cb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107cb8:	010001c4 	movi	r4,7
81107cbc:	11086880 	call	81108688 <uliSyncReadReg>
81107cc0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cc4:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc8:	e037883a 	mov	sp,fp
81107ccc:	dfc00117 	ldw	ra,4(sp)
81107cd0:	df000017 	ldw	fp,0(sp)
81107cd4:	dec00204 	addi	sp,sp,8
81107cd8:	f800283a 	ret

81107cdc <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107cdc:	defffd04 	addi	sp,sp,-12
81107ce0:	de00012e 	bgeu	sp,et,81107ce8 <uliSyncGetGeneral+0xc>
81107ce4:	003b68fa 	trap	3
81107ce8:	dfc00215 	stw	ra,8(sp)
81107cec:	df000115 	stw	fp,4(sp)
81107cf0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107cf4:	01000204 	movi	r4,8
81107cf8:	11086880 	call	81108688 <uliSyncReadReg>
81107cfc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d00:	e0bfff17 	ldw	r2,-4(fp)
}
81107d04:	e037883a 	mov	sp,fp
81107d08:	dfc00117 	ldw	ra,4(sp)
81107d0c:	df000017 	ldw	fp,0(sp)
81107d10:	dec00204 	addi	sp,sp,8
81107d14:	f800283a 	ret

81107d18 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d18:	defffd04 	addi	sp,sp,-12
81107d1c:	de00012e 	bgeu	sp,et,81107d24 <bSyncErrInj+0xc>
81107d20:	003b68fa 	trap	3
81107d24:	dfc00215 	stw	ra,8(sp)
81107d28:	df000115 	stw	fp,4(sp)
81107d2c:	df000104 	addi	fp,sp,4
81107d30:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107d34:	e17fff17 	ldw	r5,-4(fp)
81107d38:	01000244 	movi	r4,9
81107d3c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107d40:	00800044 	movi	r2,1
}
81107d44:	e037883a 	mov	sp,fp
81107d48:	dfc00117 	ldw	ra,4(sp)
81107d4c:	df000017 	ldw	fp,0(sp)
81107d50:	dec00204 	addi	sp,sp,8
81107d54:	f800283a 	ret

81107d58 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107d58:	defffc04 	addi	sp,sp,-16
81107d5c:	de00012e 	bgeu	sp,et,81107d64 <bSyncCtrExtnIrq+0xc>
81107d60:	003b68fa 	trap	3
81107d64:	dfc00315 	stw	ra,12(sp)
81107d68:	df000215 	stw	fp,8(sp)
81107d6c:	df000204 	addi	fp,sp,8
81107d70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107d74:	01000284 	movi	r4,10
81107d78:	11086880 	call	81108688 <uliSyncReadReg>
81107d7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107d80:	e0bfff17 	ldw	r2,-4(fp)
81107d84:	1000061e 	bne	r2,zero,81107da0 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107d88:	e0fffe17 	ldw	r3,-8(fp)
81107d8c:	00a00034 	movhi	r2,32768
81107d90:	10bfffc4 	addi	r2,r2,-1
81107d94:	1884703a 	and	r2,r3,r2
81107d98:	e0bffe15 	stw	r2,-8(fp)
81107d9c:	00000306 	br	81107dac <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10a00034 	orhi	r2,r2,32768
81107da8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107dac:	e17ffe17 	ldw	r5,-8(fp)
81107db0:	01000284 	movi	r4,10
81107db4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107db8:	00800044 	movi	r2,1
}
81107dbc:	e037883a 	mov	sp,fp
81107dc0:	dfc00117 	ldw	ra,4(sp)
81107dc4:	df000017 	ldw	fp,0(sp)
81107dc8:	dec00204 	addi	sp,sp,8
81107dcc:	f800283a 	ret

81107dd0 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	de00012e 	bgeu	sp,et,81107ddc <bSyncCtrStart+0xc>
81107dd8:	003b68fa 	trap	3
81107ddc:	dfc00215 	stw	ra,8(sp)
81107de0:	df000115 	stw	fp,4(sp)
81107de4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de8:	01000284 	movi	r4,10
81107dec:	11086880 	call	81108688 <uliSyncReadReg>
81107df0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800234 	orhi	r2,r2,8
81107dfc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e00:	e17fff17 	ldw	r5,-4(fp)
81107e04:	01000284 	movi	r4,10
81107e08:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e0c:	00800044 	movi	r2,1
}
81107e10:	e037883a 	mov	sp,fp
81107e14:	dfc00117 	ldw	ra,4(sp)
81107e18:	df000017 	ldw	fp,0(sp)
81107e1c:	dec00204 	addi	sp,sp,8
81107e20:	f800283a 	ret

81107e24 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e24:	defffd04 	addi	sp,sp,-12
81107e28:	de00012e 	bgeu	sp,et,81107e30 <bSyncCtrReset+0xc>
81107e2c:	003b68fa 	trap	3
81107e30:	dfc00215 	stw	ra,8(sp)
81107e34:	df000115 	stw	fp,4(sp)
81107e38:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e3c:	01000284 	movi	r4,10
81107e40:	11086880 	call	81108688 <uliSyncReadReg>
81107e44:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800134 	orhi	r2,r2,4
81107e50:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e54:	e17fff17 	ldw	r5,-4(fp)
81107e58:	01000284 	movi	r4,10
81107e5c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e60:	00800044 	movi	r2,1
}
81107e64:	e037883a 	mov	sp,fp
81107e68:	dfc00117 	ldw	ra,4(sp)
81107e6c:	df000017 	ldw	fp,0(sp)
81107e70:	dec00204 	addi	sp,sp,8
81107e74:	f800283a 	ret

81107e78 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107e78:	defffd04 	addi	sp,sp,-12
81107e7c:	de00012e 	bgeu	sp,et,81107e84 <bSyncCtrOneShot+0xc>
81107e80:	003b68fa 	trap	3
81107e84:	dfc00215 	stw	ra,8(sp)
81107e88:	df000115 	stw	fp,4(sp)
81107e8c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e90:	01000284 	movi	r4,10
81107e94:	11086880 	call	81108688 <uliSyncReadReg>
81107e98:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107e9c:	e0bfff17 	ldw	r2,-4(fp)
81107ea0:	108000b4 	orhi	r2,r2,2
81107ea4:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ea8:	e17fff17 	ldw	r5,-4(fp)
81107eac:	01000284 	movi	r4,10
81107eb0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107eb4:	00800044 	movi	r2,1
}
81107eb8:	e037883a 	mov	sp,fp
81107ebc:	dfc00117 	ldw	ra,4(sp)
81107ec0:	df000017 	ldw	fp,0(sp)
81107ec4:	dec00204 	addi	sp,sp,8
81107ec8:	f800283a 	ret

81107ecc <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107ecc:	defffd04 	addi	sp,sp,-12
81107ed0:	de00012e 	bgeu	sp,et,81107ed8 <bSyncCtrErrInj+0xc>
81107ed4:	003b68fa 	trap	3
81107ed8:	dfc00215 	stw	ra,8(sp)
81107edc:	df000115 	stw	fp,4(sp)
81107ee0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107ee4:	01000284 	movi	r4,10
81107ee8:	11086880 	call	81108688 <uliSyncReadReg>
81107eec:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800074 	orhi	r2,r2,1
81107ef8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107efc:	e17fff17 	ldw	r5,-4(fp)
81107f00:	01000284 	movi	r4,10
81107f04:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f08:	00800044 	movi	r2,1
}
81107f0c:	e037883a 	mov	sp,fp
81107f10:	dfc00117 	ldw	ra,4(sp)
81107f14:	df000017 	ldw	fp,0(sp)
81107f18:	dec00204 	addi	sp,sp,8
81107f1c:	f800283a 	ret

81107f20 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f20:	defffc04 	addi	sp,sp,-16
81107f24:	de00012e 	bgeu	sp,et,81107f2c <bSyncCtrSyncOutEnable+0xc>
81107f28:	003b68fa 	trap	3
81107f2c:	dfc00315 	stw	ra,12(sp)
81107f30:	df000215 	stw	fp,8(sp)
81107f34:	df000204 	addi	fp,sp,8
81107f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f3c:	01000284 	movi	r4,10
81107f40:	11086880 	call	81108688 <uliSyncReadReg>
81107f44:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107f48:	e0bfff17 	ldw	r2,-4(fp)
81107f4c:	1000051e 	bne	r2,zero,81107f64 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107f50:	e0fffe17 	ldw	r3,-8(fp)
81107f54:	00bfbfc4 	movi	r2,-257
81107f58:	1884703a 	and	r2,r3,r2
81107f5c:	e0bffe15 	stw	r2,-8(fp)
81107f60:	00000306 	br	81107f70 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107f64:	e0bffe17 	ldw	r2,-8(fp)
81107f68:	10804014 	ori	r2,r2,256
81107f6c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f70:	e17ffe17 	ldw	r5,-8(fp)
81107f74:	01000284 	movi	r4,10
81107f78:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f7c:	00800044 	movi	r2,1
}
81107f80:	e037883a 	mov	sp,fp
81107f84:	dfc00117 	ldw	ra,4(sp)
81107f88:	df000017 	ldw	fp,0(sp)
81107f8c:	dec00204 	addi	sp,sp,8
81107f90:	f800283a 	ret

81107f94 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81107f94:	defffc04 	addi	sp,sp,-16
81107f98:	de00012e 	bgeu	sp,et,81107fa0 <bSyncCtrCh1OutEnable+0xc>
81107f9c:	003b68fa 	trap	3
81107fa0:	dfc00315 	stw	ra,12(sp)
81107fa4:	df000215 	stw	fp,8(sp)
81107fa8:	df000204 	addi	fp,sp,8
81107fac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fb0:	01000284 	movi	r4,10
81107fb4:	11086880 	call	81108688 <uliSyncReadReg>
81107fb8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fbc:	e0bfff17 	ldw	r2,-4(fp)
81107fc0:	1000051e 	bne	r2,zero,81107fd8 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107fc4:	e0fffe17 	ldw	r3,-8(fp)
81107fc8:	00bfff84 	movi	r2,-2
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	e0bffe15 	stw	r2,-8(fp)
81107fd4:	00000306 	br	81107fe4 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107fd8:	e0bffe17 	ldw	r2,-8(fp)
81107fdc:	10800054 	ori	r2,r2,1
81107fe0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe4:	e17ffe17 	ldw	r5,-8(fp)
81107fe8:	01000284 	movi	r4,10
81107fec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ff0:	00800044 	movi	r2,1
}
81107ff4:	e037883a 	mov	sp,fp
81107ff8:	dfc00117 	ldw	ra,4(sp)
81107ffc:	df000017 	ldw	fp,0(sp)
81108000:	dec00204 	addi	sp,sp,8
81108004:	f800283a 	ret

81108008 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108008:	defffc04 	addi	sp,sp,-16
8110800c:	de00012e 	bgeu	sp,et,81108014 <bSyncCtrCh2OutEnable+0xc>
81108010:	003b68fa 	trap	3
81108014:	dfc00315 	stw	ra,12(sp)
81108018:	df000215 	stw	fp,8(sp)
8110801c:	df000204 	addi	fp,sp,8
81108020:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108024:	01000284 	movi	r4,10
81108028:	11086880 	call	81108688 <uliSyncReadReg>
8110802c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108030:	e0bfff17 	ldw	r2,-4(fp)
81108034:	1000051e 	bne	r2,zero,8110804c <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81108038:	e0fffe17 	ldw	r3,-8(fp)
8110803c:	00bfff44 	movi	r2,-3
81108040:	1884703a 	and	r2,r3,r2
81108044:	e0bffe15 	stw	r2,-8(fp)
81108048:	00000306 	br	81108058 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110804c:	e0bffe17 	ldw	r2,-8(fp)
81108050:	10800094 	ori	r2,r2,2
81108054:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108058:	e17ffe17 	ldw	r5,-8(fp)
8110805c:	01000284 	movi	r4,10
81108060:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108064:	00800044 	movi	r2,1
}
81108068:	e037883a 	mov	sp,fp
8110806c:	dfc00117 	ldw	ra,4(sp)
81108070:	df000017 	ldw	fp,0(sp)
81108074:	dec00204 	addi	sp,sp,8
81108078:	f800283a 	ret

8110807c <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110807c:	defffc04 	addi	sp,sp,-16
81108080:	de00012e 	bgeu	sp,et,81108088 <bSyncCtrCh3OutEnable+0xc>
81108084:	003b68fa 	trap	3
81108088:	dfc00315 	stw	ra,12(sp)
8110808c:	df000215 	stw	fp,8(sp)
81108090:	df000204 	addi	fp,sp,8
81108094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108098:	01000284 	movi	r4,10
8110809c:	11086880 	call	81108688 <uliSyncReadReg>
811080a0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a4:	e0bfff17 	ldw	r2,-4(fp)
811080a8:	1000051e 	bne	r2,zero,811080c0 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811080ac:	e0fffe17 	ldw	r3,-8(fp)
811080b0:	00bffec4 	movi	r2,-5
811080b4:	1884703a 	and	r2,r3,r2
811080b8:	e0bffe15 	stw	r2,-8(fp)
811080bc:	00000306 	br	811080cc <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
811080c0:	e0bffe17 	ldw	r2,-8(fp)
811080c4:	10800114 	ori	r2,r2,4
811080c8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080cc:	e17ffe17 	ldw	r5,-8(fp)
811080d0:	01000284 	movi	r4,10
811080d4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811080d8:	00800044 	movi	r2,1
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
811080f0:	defffc04 	addi	sp,sp,-16
811080f4:	de00012e 	bgeu	sp,et,811080fc <bSyncCtrCh4OutEnable+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00315 	stw	ra,12(sp)
81108100:	df000215 	stw	fp,8(sp)
81108104:	df000204 	addi	fp,sp,8
81108108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110810c:	01000284 	movi	r4,10
81108110:	11086880 	call	81108688 <uliSyncReadReg>
81108114:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108118:	e0bfff17 	ldw	r2,-4(fp)
8110811c:	1000051e 	bne	r2,zero,81108134 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108120:	e0fffe17 	ldw	r3,-8(fp)
81108124:	00bffdc4 	movi	r2,-9
81108128:	1884703a 	and	r2,r3,r2
8110812c:	e0bffe15 	stw	r2,-8(fp)
81108130:	00000306 	br	81108140 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
81108134:	e0bffe17 	ldw	r2,-8(fp)
81108138:	10800214 	ori	r2,r2,8
8110813c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108140:	e17ffe17 	ldw	r5,-8(fp)
81108144:	01000284 	movi	r4,10
81108148:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110814c:	00800044 	movi	r2,1
}
81108150:	e037883a 	mov	sp,fp
81108154:	dfc00117 	ldw	ra,4(sp)
81108158:	df000017 	ldw	fp,0(sp)
8110815c:	dec00204 	addi	sp,sp,8
81108160:	f800283a 	ret

81108164 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
81108164:	defffc04 	addi	sp,sp,-16
81108168:	de00012e 	bgeu	sp,et,81108170 <bSyncCtrCh5OutEnable+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00315 	stw	ra,12(sp)
81108174:	df000215 	stw	fp,8(sp)
81108178:	df000204 	addi	fp,sp,8
8110817c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108180:	01000284 	movi	r4,10
81108184:	11086880 	call	81108688 <uliSyncReadReg>
81108188:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110818c:	e0bfff17 	ldw	r2,-4(fp)
81108190:	1000051e 	bne	r2,zero,811081a8 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108194:	e0fffe17 	ldw	r3,-8(fp)
81108198:	00bffbc4 	movi	r2,-17
8110819c:	1884703a 	and	r2,r3,r2
811081a0:	e0bffe15 	stw	r2,-8(fp)
811081a4:	00000306 	br	811081b4 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811081a8:	e0bffe17 	ldw	r2,-8(fp)
811081ac:	10800414 	ori	r2,r2,16
811081b0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b4:	e17ffe17 	ldw	r5,-8(fp)
811081b8:	01000284 	movi	r4,10
811081bc:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811081c0:	00800044 	movi	r2,1
}
811081c4:	e037883a 	mov	sp,fp
811081c8:	dfc00117 	ldw	ra,4(sp)
811081cc:	df000017 	ldw	fp,0(sp)
811081d0:	dec00204 	addi	sp,sp,8
811081d4:	f800283a 	ret

811081d8 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
811081d8:	defffc04 	addi	sp,sp,-16
811081dc:	de00012e 	bgeu	sp,et,811081e4 <bSyncCtrCh6OutEnable+0xc>
811081e0:	003b68fa 	trap	3
811081e4:	dfc00315 	stw	ra,12(sp)
811081e8:	df000215 	stw	fp,8(sp)
811081ec:	df000204 	addi	fp,sp,8
811081f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f4:	01000284 	movi	r4,10
811081f8:	11086880 	call	81108688 <uliSyncReadReg>
811081fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108200:	e0bfff17 	ldw	r2,-4(fp)
81108204:	1000051e 	bne	r2,zero,8110821c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108208:	e0fffe17 	ldw	r3,-8(fp)
8110820c:	00bff7c4 	movi	r2,-33
81108210:	1884703a 	and	r2,r3,r2
81108214:	e0bffe15 	stw	r2,-8(fp)
81108218:	00000306 	br	81108228 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110821c:	e0bffe17 	ldw	r2,-8(fp)
81108220:	10800814 	ori	r2,r2,32
81108224:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108228:	e17ffe17 	ldw	r5,-8(fp)
8110822c:	01000284 	movi	r4,10
81108230:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108234:	00800044 	movi	r2,1
}
81108238:	e037883a 	mov	sp,fp
8110823c:	dfc00117 	ldw	ra,4(sp)
81108240:	df000017 	ldw	fp,0(sp)
81108244:	dec00204 	addi	sp,sp,8
81108248:	f800283a 	ret

8110824c <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110824c:	defffc04 	addi	sp,sp,-16
81108250:	de00012e 	bgeu	sp,et,81108258 <bSyncCtrCh7OutEnable+0xc>
81108254:	003b68fa 	trap	3
81108258:	dfc00315 	stw	ra,12(sp)
8110825c:	df000215 	stw	fp,8(sp)
81108260:	df000204 	addi	fp,sp,8
81108264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108268:	01000284 	movi	r4,10
8110826c:	11086880 	call	81108688 <uliSyncReadReg>
81108270:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108274:	e0bfff17 	ldw	r2,-4(fp)
81108278:	1000051e 	bne	r2,zero,81108290 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110827c:	e0fffe17 	ldw	r3,-8(fp)
81108280:	00bfefc4 	movi	r2,-65
81108284:	1884703a 	and	r2,r3,r2
81108288:	e0bffe15 	stw	r2,-8(fp)
8110828c:	00000306 	br	8110829c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108290:	e0bffe17 	ldw	r2,-8(fp)
81108294:	10801014 	ori	r2,r2,64
81108298:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110829c:	e17ffe17 	ldw	r5,-8(fp)
811082a0:	01000284 	movi	r4,10
811082a4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811082a8:	00800044 	movi	r2,1
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	dfc00117 	ldw	ra,4(sp)
811082b4:	df000017 	ldw	fp,0(sp)
811082b8:	dec00204 	addi	sp,sp,8
811082bc:	f800283a 	ret

811082c0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811082c0:	defffc04 	addi	sp,sp,-16
811082c4:	de00012e 	bgeu	sp,et,811082cc <bSyncCtrCh8OutEnable+0xc>
811082c8:	003b68fa 	trap	3
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082dc:	01000284 	movi	r4,10
811082e0:	11086880 	call	81108688 <uliSyncReadReg>
811082e4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e8:	e0bfff17 	ldw	r2,-4(fp)
811082ec:	1000051e 	bne	r2,zero,81108304 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
811082f0:	e0fffe17 	ldw	r3,-8(fp)
811082f4:	00bfdfc4 	movi	r2,-129
811082f8:	1884703a 	and	r2,r3,r2
811082fc:	e0bffe15 	stw	r2,-8(fp)
81108300:	00000306 	br	81108310 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10802014 	ori	r2,r2,128
8110830c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108310:	e17ffe17 	ldw	r5,-8(fp)
81108314:	01000284 	movi	r4,10
81108318:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110831c:	00800044 	movi	r2,1
}
81108320:	e037883a 	mov	sp,fp
81108324:	dfc00117 	ldw	ra,4(sp)
81108328:	df000017 	ldw	fp,0(sp)
8110832c:	dec00204 	addi	sp,sp,8
81108330:	f800283a 	ret

81108334 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
81108334:	defffc04 	addi	sp,sp,-16
81108338:	de00012e 	bgeu	sp,et,81108340 <bSyncIrqEnableError+0xc>
8110833c:	003b68fa 	trap	3
81108340:	dfc00315 	stw	ra,12(sp)
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108350:	01000044 	movi	r4,1
81108354:	11086880 	call	81108688 <uliSyncReadReg>
81108358:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	1000051e 	bne	r2,zero,81108378 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81108364:	e0fffe17 	ldw	r3,-8(fp)
81108368:	00bfff44 	movi	r2,-3
8110836c:	1884703a 	and	r2,r3,r2
81108370:	e0bffe15 	stw	r2,-8(fp)
81108374:	00000306 	br	81108384 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81108378:	e0bffe17 	ldw	r2,-8(fp)
8110837c:	10800094 	ori	r2,r2,2
81108380:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108384:	e17ffe17 	ldw	r5,-8(fp)
81108388:	01000044 	movi	r4,1
8110838c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108390:	00800044 	movi	r2,1
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811083a8:	defffc04 	addi	sp,sp,-16
811083ac:	de00012e 	bgeu	sp,et,811083b4 <bSyncIrqEnableBlank+0xc>
811083b0:	003b68fa 	trap	3
811083b4:	dfc00315 	stw	ra,12(sp)
811083b8:	df000215 	stw	fp,8(sp)
811083bc:	df000204 	addi	fp,sp,8
811083c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c4:	01000044 	movi	r4,1
811083c8:	11086880 	call	81108688 <uliSyncReadReg>
811083cc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083d0:	e0bfff17 	ldw	r2,-4(fp)
811083d4:	1000051e 	bne	r2,zero,811083ec <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811083d8:	e0fffe17 	ldw	r3,-8(fp)
811083dc:	00bfff84 	movi	r2,-2
811083e0:	1884703a 	and	r2,r3,r2
811083e4:	e0bffe15 	stw	r2,-8(fp)
811083e8:	00000306 	br	811083f8 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811083ec:	e0bffe17 	ldw	r2,-8(fp)
811083f0:	10800054 	ori	r2,r2,1
811083f4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f8:	e17ffe17 	ldw	r5,-8(fp)
811083fc:	01000044 	movi	r4,1
81108400:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108404:	00800044 	movi	r2,1
}
81108408:	e037883a 	mov	sp,fp
8110840c:	dfc00117 	ldw	ra,4(sp)
81108410:	df000017 	ldw	fp,0(sp)
81108414:	dec00204 	addi	sp,sp,8
81108418:	f800283a 	ret

8110841c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110841c:	defffc04 	addi	sp,sp,-16
81108420:	de00012e 	bgeu	sp,et,81108428 <bSyncIrqFlagClrError+0xc>
81108424:	003b68fa 	trap	3
81108428:	dfc00315 	stw	ra,12(sp)
8110842c:	df000215 	stw	fp,8(sp)
81108430:	df000204 	addi	fp,sp,8
81108434:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81108438:	01000084 	movi	r4,2
8110843c:	11086880 	call	81108688 <uliSyncReadReg>
81108440:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110844c:	e0fffe17 	ldw	r3,-8(fp)
81108450:	00bfff44 	movi	r2,-3
81108454:	1884703a 	and	r2,r3,r2
81108458:	e0bffe15 	stw	r2,-8(fp)
8110845c:	00000306 	br	8110846c <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81108460:	e0bffe17 	ldw	r2,-8(fp)
81108464:	10800094 	ori	r2,r2,2
81108468:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110846c:	e17ffe17 	ldw	r5,-8(fp)
81108470:	01000084 	movi	r4,2
81108474:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108478:	00800044 	movi	r2,1
}
8110847c:	e037883a 	mov	sp,fp
81108480:	dfc00117 	ldw	ra,4(sp)
81108484:	df000017 	ldw	fp,0(sp)
81108488:	dec00204 	addi	sp,sp,8
8110848c:	f800283a 	ret

81108490 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108490:	defffc04 	addi	sp,sp,-16
81108494:	de00012e 	bgeu	sp,et,8110849c <bSyncIrqFlagClrBlank+0xc>
81108498:	003b68fa 	trap	3
8110849c:	dfc00315 	stw	ra,12(sp)
811084a0:	df000215 	stw	fp,8(sp)
811084a4:	df000204 	addi	fp,sp,8
811084a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084ac:	01000084 	movi	r4,2
811084b0:	11086880 	call	81108688 <uliSyncReadReg>
811084b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b8:	e0bfff17 	ldw	r2,-4(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084c0:	e0fffe17 	ldw	r3,-8(fp)
811084c4:	00bfff84 	movi	r2,-2
811084c8:	1884703a 	and	r2,r3,r2
811084cc:	e0bffe15 	stw	r2,-8(fp)
811084d0:	00000306 	br	811084e0 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	10800054 	ori	r2,r2,1
811084dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	01000084 	movi	r4,2
811084e8:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811084ec:	00800044 	movi	r2,1
}
811084f0:	e037883a 	mov	sp,fp
811084f4:	dfc00117 	ldw	ra,4(sp)
811084f8:	df000017 	ldw	fp,0(sp)
811084fc:	dec00204 	addi	sp,sp,8
81108500:	f800283a 	ret

81108504 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108504:	defffc04 	addi	sp,sp,-16
81108508:	de00012e 	bgeu	sp,et,81108510 <bSyncIrqFlagError+0xc>
8110850c:	003b68fa 	trap	3
81108510:	dfc00315 	stw	ra,12(sp)
81108514:	df000215 	stw	fp,8(sp)
81108518:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110851c:	010000c4 	movi	r4,3
81108520:	11086880 	call	81108688 <uliSyncReadReg>
81108524:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1080008c 	andi	r2,r2,2
81108530:	10000326 	beq	r2,zero,81108540 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
81108534:	00800044 	movi	r2,1
81108538:	e0bffe15 	stw	r2,-8(fp)
8110853c:	00000106 	br	81108544 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
81108540:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81108544:	e0bffe17 	ldw	r2,-8(fp)
}
81108548:	e037883a 	mov	sp,fp
8110854c:	dfc00117 	ldw	ra,4(sp)
81108550:	df000017 	ldw	fp,0(sp)
81108554:	dec00204 	addi	sp,sp,8
81108558:	f800283a 	ret

8110855c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110855c:	defffc04 	addi	sp,sp,-16
81108560:	de00012e 	bgeu	sp,et,81108568 <bSyncIrqFlagBlank+0xc>
81108564:	003b68fa 	trap	3
81108568:	dfc00315 	stw	ra,12(sp)
8110856c:	df000215 	stw	fp,8(sp)
81108570:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81108574:	010000c4 	movi	r4,3
81108578:	11086880 	call	81108688 <uliSyncReadReg>
8110857c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	1080004c 	andi	r2,r2,1
81108588:	10000326 	beq	r2,zero,81108598 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
8110858c:	00800044 	movi	r2,1
81108590:	e0bffe15 	stw	r2,-8(fp)
81108594:	00000106 	br	8110859c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108598:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110859c:	e0bffe17 	ldw	r2,-8(fp)
}
811085a0:	e037883a 	mov	sp,fp
811085a4:	dfc00117 	ldw	ra,4(sp)
811085a8:	df000017 	ldw	fp,0(sp)
811085ac:	dec00204 	addi	sp,sp,8
811085b0:	f800283a 	ret

811085b4 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
811085b4:	defffd04 	addi	sp,sp,-12
811085b8:	de00012e 	bgeu	sp,et,811085c0 <uliSyncGetCtr+0xc>
811085bc:	003b68fa 	trap	3
811085c0:	dfc00215 	stw	ra,8(sp)
811085c4:	df000115 	stw	fp,4(sp)
811085c8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811085cc:	01000284 	movi	r4,10
811085d0:	11086880 	call	81108688 <uliSyncReadReg>
811085d4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811085d8:	e0bfff17 	ldw	r2,-4(fp)
}
811085dc:	e037883a 	mov	sp,fp
811085e0:	dfc00117 	ldw	ra,4(sp)
811085e4:	df000017 	ldw	fp,0(sp)
811085e8:	dec00204 	addi	sp,sp,8
811085ec:	f800283a 	ret

811085f0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
811085f0:	defffd04 	addi	sp,sp,-12
811085f4:	de00012e 	bgeu	sp,et,811085fc <uliSyncReadStatus+0xc>
811085f8:	003b68fa 	trap	3
811085fc:	dfc00215 	stw	ra,8(sp)
81108600:	df000115 	stw	fp,4(sp)
81108604:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108608:	0009883a 	mov	r4,zero
8110860c:	11086880 	call	81108688 <uliSyncReadReg>
81108610:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108614:	e0bfff17 	ldw	r2,-4(fp)
}
81108618:	e037883a 	mov	sp,fp
8110861c:	dfc00117 	ldw	ra,4(sp)
81108620:	df000017 	ldw	fp,0(sp)
81108624:	dec00204 	addi	sp,sp,8
81108628:	f800283a 	ret

8110862c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110862c:	defffc04 	addi	sp,sp,-16
81108630:	de00012e 	bgeu	sp,et,81108638 <bSyncWriteReg+0xc>
81108634:	003b68fa 	trap	3
81108638:	df000315 	stw	fp,12(sp)
8110863c:	df000304 	addi	fp,sp,12
81108640:	e13ffe15 	stw	r4,-8(fp)
81108644:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108648:	00a00034 	movhi	r2,32768
8110864c:	10810004 	addi	r2,r2,1024
81108650:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81108654:	e0bffe17 	ldw	r2,-8(fp)
81108658:	1085883a 	add	r2,r2,r2
8110865c:	1085883a 	add	r2,r2,r2
81108660:	1007883a 	mov	r3,r2
81108664:	e0bffd17 	ldw	r2,-12(fp)
81108668:	10c5883a 	add	r2,r2,r3
8110866c:	e0ffff17 	ldw	r3,-4(fp)
81108670:	10c00015 	stw	r3,0(r2)
	return TRUE;
81108674:	00800044 	movi	r2,1
}
81108678:	e037883a 	mov	sp,fp
8110867c:	df000017 	ldw	fp,0(sp)
81108680:	dec00104 	addi	sp,sp,4
81108684:	f800283a 	ret

81108688 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81108688:	defffc04 	addi	sp,sp,-16
8110868c:	de00012e 	bgeu	sp,et,81108694 <uliSyncReadReg+0xc>
81108690:	003b68fa 	trap	3
81108694:	df000315 	stw	fp,12(sp)
81108698:	df000304 	addi	fp,sp,12
8110869c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086a0:	00a00034 	movhi	r2,32768
811086a4:	10810004 	addi	r2,r2,1024
811086a8:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
811086ac:	e0bfff17 	ldw	r2,-4(fp)
811086b0:	1085883a 	add	r2,r2,r2
811086b4:	1085883a 	add	r2,r2,r2
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	10c5883a 	add	r2,r2,r3
811086c4:	10800017 	ldw	r2,0(r2)
811086c8:	e0bffe15 	stw	r2,-8(fp)
	return value;
811086cc:	e0bffe17 	ldw	r2,-8(fp)
}
811086d0:	e037883a 	mov	sp,fp
811086d4:	df000017 	ldw	fp,0(sp)
811086d8:	dec00104 	addi	sp,sp,4
811086dc:	f800283a 	ret

811086e0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811086e0:	defffd04 	addi	sp,sp,-12
811086e4:	de00012e 	bgeu	sp,et,811086ec <vFeeTask+0xc>
811086e8:	003b68fa 	trap	3
811086ec:	df000215 	stw	fp,8(sp)
811086f0:	df000204 	addi	fp,sp,8
811086f4:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
811086f8:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
811086fc:	0001883a 	nop
81108700:	e037883a 	mov	sp,fp
81108704:	df000017 	ldw	fp,0(sp)
81108708:	dec00104 	addi	sp,sp,4
8110870c:	f800283a 	ret

81108710 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81108710:	defff504 	addi	sp,sp,-44
81108714:	de00012e 	bgeu	sp,et,8110871c <vInAckHandlerTask+0xc>
81108718:	003b68fa 	trap	3
8110871c:	dfc00a15 	stw	ra,40(sp)
81108720:	df000915 	stw	fp,36(sp)
81108724:	df000904 	addi	fp,sp,36
81108728:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110872c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81108730:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81108734:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81108738:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110873c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81108740:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81108744:	d0a04e17 	ldw	r2,-32456(gp)
81108748:	100f883a 	mov	r7,r2
8110874c:	01800784 	movi	r6,30
81108750:	01400044 	movi	r5,1
81108754:	01204534 	movhi	r4,33044
81108758:	2132b004 	addi	r4,r4,-13632
8110875c:	11121200 	call	81112120 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81108760:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	10c00060 	cmpeqi	r3,r2,1
8110876c:	1800071e 	bne	r3,zero,8110878c <vInAckHandlerTask+0x7c>
81108770:	0080032e 	bgeu	zero,r2,81108780 <vInAckHandlerTask+0x70>
81108774:	108000a0 	cmpeqi	r2,r2,2
81108778:	10005a1e 	bne	r2,zero,811088e4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110877c:	00013a06 	br	81108c68 <vInAckHandlerTask+0x558>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81108780:	00800044 	movi	r2,1
81108784:	e0bffd15 	stw	r2,-12(fp)
				break;
81108788:	00013706 	br	81108c68 <vInAckHandlerTask+0x558>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110878c:	d0a05217 	ldw	r2,-32440(gp)
81108790:	e0fffec4 	addi	r3,fp,-5
81108794:	180d883a 	mov	r6,r3
81108798:	000b883a 	mov	r5,zero
8110879c:	1009883a 	mov	r4,r2
811087a0:	112ee780 	call	8112ee78 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811087a4:	e0bffec3 	ldbu	r2,-5(fp)
811087a8:	10803fcc 	andi	r2,r2,255
811087ac:	10004b1e 	bne	r2,zero,811088dc <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811087b0:	d0a05117 	ldw	r2,-32444(gp)
811087b4:	e0fffec4 	addi	r3,fp,-5
811087b8:	180d883a 	mov	r6,r3
811087bc:	000b883a 	mov	r5,zero
811087c0:	1009883a 	mov	r4,r2
811087c4:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811087c8:	e0bffec3 	ldbu	r2,-5(fp)
811087cc:	10803fcc 	andi	r2,r2,255
811087d0:	1000401e 	bne	r2,zero,811088d4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811087d4:	e03ffe45 	stb	zero,-7(fp)
811087d8:	00003706 	br	811088b8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811087dc:	e0fffe43 	ldbu	r3,-7(fp)
811087e0:	00a04574 	movhi	r2,33045
811087e4:	10b6bd04 	addi	r2,r2,-9484
811087e8:	18c7883a 	add	r3,r3,r3
811087ec:	18c7883a 	add	r3,r3,r3
811087f0:	10c5883a 	add	r2,r2,r3
811087f4:	10800003 	ldbu	r2,0(r2)
811087f8:	10803fcc 	andi	r2,r2,255
811087fc:	1080201c 	xori	r2,r2,128
81108800:	10bfe004 	addi	r2,r2,-128
81108804:	10002926 	beq	r2,zero,811088ac <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81108808:	e0fffe43 	ldbu	r3,-7(fp)
8110880c:	00a04574 	movhi	r2,33045
81108810:	10b6bd04 	addi	r2,r2,-9484
81108814:	18c7883a 	add	r3,r3,r3
81108818:	18c7883a 	add	r3,r3,r3
8110881c:	10c5883a 	add	r2,r2,r3
81108820:	10800003 	ldbu	r2,0(r2)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1080201c 	xori	r2,r2,128
8110882c:	10bfe004 	addi	r2,r2,-128
81108830:	108008e0 	cmpeqi	r2,r2,35
81108834:	10000d1e 	bne	r2,zero,8110886c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81108838:	e0fffe43 	ldbu	r3,-7(fp)
8110883c:	00a04574 	movhi	r2,33045
81108840:	10b6bd04 	addi	r2,r2,-9484
81108844:	18c7883a 	add	r3,r3,r3
81108848:	18c7883a 	add	r3,r3,r3
8110884c:	10c5883a 	add	r2,r2,r3
81108850:	10c0000b 	ldhu	r3,0(r2)
81108854:	d0e0478d 	sth	r3,-32482(gp)
81108858:	1080008b 	ldhu	r2,2(r2)
8110885c:	d0a0480d 	sth	r2,-32480(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81108860:	00800084 	movi	r2,2
81108864:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81108868:	00001606 	br	811088c4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110886c:	d0a04e17 	ldw	r2,-32456(gp)
81108870:	100f883a 	mov	r7,r2
81108874:	01800384 	movi	r6,14
81108878:	01400044 	movi	r5,1
8110887c:	01204534 	movhi	r4,33044
81108880:	2132b804 	addi	r4,r4,-13600
81108884:	11121200 	call	81112120 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81108888:	00800044 	movi	r2,1
8110888c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81108890:	e0fffe43 	ldbu	r3,-7(fp)
81108894:	00a04574 	movhi	r2,33045
81108898:	10b6bd04 	addi	r2,r2,-9484
8110889c:	18c7883a 	add	r3,r3,r3
811088a0:	18c7883a 	add	r3,r3,r3
811088a4:	10c5883a 	add	r2,r2,r3
811088a8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088ac:	e0bffe43 	ldbu	r2,-7(fp)
811088b0:	10800044 	addi	r2,r2,1
811088b4:	e0bffe45 	stb	r2,-7(fp)
811088b8:	e0bffe43 	ldbu	r2,-7(fp)
811088bc:	10800130 	cmpltui	r2,r2,4
811088c0:	103fc61e 	bne	r2,zero,811087dc <__reset+0xfb0e87dc>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811088c4:	d0a05117 	ldw	r2,-32444(gp)
811088c8:	1009883a 	mov	r4,r2
811088cc:	112d4100 	call	8112d410 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d0:	0000e506 	br	81108c68 <vInAckHandlerTask+0x558>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811088d4:	110e4600 	call	8110e460 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d8:	0000e306 	br	81108c68 <vInAckHandlerTask+0x558>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811088dc:	110e3f80 	call	8110e3f8 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811088e0:	0000e106 	br	81108c68 <vInAckHandlerTask+0x558>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811088e4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811088e8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811088ec:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811088f0:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
811088f4:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811088f8:	0000ca06 	br	81108c24 <vInAckHandlerTask+0x514>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811088fc:	e0bff917 	ldw	r2,-28(fp)
81108900:	1000371e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
81108904:	e0bffa17 	ldw	r2,-24(fp)
81108908:	1000351e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110890c:	d0a05617 	ldw	r2,-32424(gp)
81108910:	e0fffec4 	addi	r3,fp,-5
81108914:	180b883a 	mov	r5,r3
81108918:	1009883a 	mov	r4,r2
8110891c:	112c7ec0 	call	8112c7ec <OSMutexAccept>
81108920:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108924:	e0bffec3 	ldbu	r2,-5(fp)
81108928:	10803fcc 	andi	r2,r2,255
8110892c:	10002c1e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
81108930:	e03ffe45 	stb	zero,-7(fp)
81108934:	00002006 	br	811089b8 <vInAckHandlerTask+0x2a8>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81108938:	e0fffe43 	ldbu	r3,-7(fp)
8110893c:	00a04534 	movhi	r2,33044
81108940:	109e2e04 	addi	r2,r2,30904
81108944:	18c009a4 	muli	r3,r3,38
81108948:	10c5883a 	add	r2,r2,r3
8110894c:	10800804 	addi	r2,r2,32
81108950:	10c0000b 	ldhu	r3,0(r2)
81108954:	d0a0480b 	ldhu	r2,-32480(gp)
81108958:	18ffffcc 	andi	r3,r3,65535
8110895c:	10bfffcc 	andi	r2,r2,65535
81108960:	1880121e 	bne	r3,r2,811089ac <vInAckHandlerTask+0x29c>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81108964:	e0fffe43 	ldbu	r3,-7(fp)
81108968:	00a04534 	movhi	r2,33044
8110896c:	109e2e04 	addi	r2,r2,30904
81108970:	18c009a4 	muli	r3,r3,38
81108974:	10c5883a 	add	r2,r2,r3
81108978:	10800804 	addi	r2,r2,32
8110897c:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108980:	00800044 	movi	r2,1
81108984:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108988:	d0a05917 	ldw	r2,-32412(gp)
8110898c:	1009883a 	mov	r4,r2
81108990:	112f2000 	call	8112f200 <OSSemPost>
81108994:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108998:	e0bffec3 	ldbu	r2,-5(fp)
8110899c:	10803fcc 	andi	r2,r2,255
811089a0:	10000926 	beq	r2,zero,811089c8 <vInAckHandlerTask+0x2b8>
                                        vFailSetCountSemaphorexBuffer32();
811089a4:	110e6ac0 	call	8110e6ac <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811089a8:	00000706 	br	811089c8 <vInAckHandlerTask+0x2b8>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811089ac:	e0bffe43 	ldbu	r2,-7(fp)
811089b0:	10800044 	addi	r2,r2,1
811089b4:	e0bffe45 	stb	r2,-7(fp)
811089b8:	e0bffe43 	ldbu	r2,-7(fp)
811089bc:	10800230 	cmpltui	r2,r2,8
811089c0:	103fdd1e 	bne	r2,zero,81108938 <__reset+0xfb0e8938>
811089c4:	00000106 	br	811089cc <vInAckHandlerTask+0x2bc>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811089c8:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
811089cc:	d0a05617 	ldw	r2,-32424(gp)
811089d0:	1009883a 	mov	r4,r2
811089d4:	112d4100 	call	8112d410 <OSMutexPost>
                            bFinished32 = TRUE;
811089d8:	00800044 	movi	r2,1
811089dc:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811089e0:	e0bff917 	ldw	r2,-28(fp)
811089e4:	1000371e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
811089e8:	e0bffb17 	ldw	r2,-20(fp)
811089ec:	1000351e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811089f0:	d0a05a17 	ldw	r2,-32408(gp)
811089f4:	e0fffec4 	addi	r3,fp,-5
811089f8:	180b883a 	mov	r5,r3
811089fc:	1009883a 	mov	r4,r2
81108a00:	112c7ec0 	call	8112c7ec <OSMutexAccept>
81108a04:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108a08:	e0bffec3 	ldbu	r2,-5(fp)
81108a0c:	10803fcc 	andi	r2,r2,255
81108a10:	10002c1e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a14:	e03ffe45 	stb	zero,-7(fp)
81108a18:	00002006 	br	81108a9c <vInAckHandlerTask+0x38c>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81108a1c:	e0fffe43 	ldbu	r3,-7(fp)
81108a20:	00a04534 	movhi	r2,33044
81108a24:	108cd104 	addi	r2,r2,13124
81108a28:	18c011a4 	muli	r3,r3,70
81108a2c:	10c5883a 	add	r2,r2,r3
81108a30:	10801004 	addi	r2,r2,64
81108a34:	10c0000b 	ldhu	r3,0(r2)
81108a38:	d0a0480b 	ldhu	r2,-32480(gp)
81108a3c:	18ffffcc 	andi	r3,r3,65535
81108a40:	10bfffcc 	andi	r2,r2,65535
81108a44:	1880121e 	bne	r3,r2,81108a90 <vInAckHandlerTask+0x380>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81108a48:	e0fffe43 	ldbu	r3,-7(fp)
81108a4c:	00a04534 	movhi	r2,33044
81108a50:	108cd104 	addi	r2,r2,13124
81108a54:	18c011a4 	muli	r3,r3,70
81108a58:	10c5883a 	add	r2,r2,r3
81108a5c:	10801004 	addi	r2,r2,64
81108a60:	1000000d 	sth	zero,0(r2)

                                    bFound = TRUE;
81108a64:	00800044 	movi	r2,1
81108a68:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108a6c:	d0a04b17 	ldw	r2,-32468(gp)
81108a70:	1009883a 	mov	r4,r2
81108a74:	112f2000 	call	8112f200 <OSSemPost>
81108a78:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108a7c:	e0bffec3 	ldbu	r2,-5(fp)
81108a80:	10803fcc 	andi	r2,r2,255
81108a84:	10000926 	beq	r2,zero,81108aac <vInAckHandlerTask+0x39c>
                                        vFailSetCountSemaphorexBuffer64();
81108a88:	110e7140 	call	8110e714 <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81108a8c:	00000706 	br	81108aac <vInAckHandlerTask+0x39c>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a90:	e0bffe43 	ldbu	r2,-7(fp)
81108a94:	10800044 	addi	r2,r2,1
81108a98:	e0bffe45 	stb	r2,-7(fp)
81108a9c:	e0bffe43 	ldbu	r2,-7(fp)
81108aa0:	10800130 	cmpltui	r2,r2,4
81108aa4:	103fdd1e 	bne	r2,zero,81108a1c <__reset+0xfb0e8a1c>
81108aa8:	00000106 	br	81108ab0 <vInAckHandlerTask+0x3a0>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81108aac:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81108ab0:	d0a05a17 	ldw	r2,-32408(gp)
81108ab4:	1009883a 	mov	r4,r2
81108ab8:	112d4100 	call	8112d410 <OSMutexPost>
                            bFinished64 = TRUE;
81108abc:	00800044 	movi	r2,1
81108ac0:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81108ac4:	e0bff917 	ldw	r2,-28(fp)
81108ac8:	1000371e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
81108acc:	e0bffc17 	ldw	r2,-16(fp)
81108ad0:	1000351e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81108ad4:	d0a05817 	ldw	r2,-32416(gp)
81108ad8:	e0fffec4 	addi	r3,fp,-5
81108adc:	180b883a 	mov	r5,r3
81108ae0:	1009883a 	mov	r4,r2
81108ae4:	112c7ec0 	call	8112c7ec <OSMutexAccept>
81108ae8:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108aec:	e0bffec3 	ldbu	r2,-5(fp)
81108af0:	10803fcc 	andi	r2,r2,255
81108af4:	10002c1e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108af8:	e03ffe45 	stb	zero,-7(fp)
81108afc:	00002006 	br	81108b80 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81108b00:	e0fffe43 	ldbu	r3,-7(fp)
81108b04:	00a04574 	movhi	r2,33045
81108b08:	10b67a04 	addi	r2,r2,-9752
81108b0c:	18c021a4 	muli	r3,r3,134
81108b10:	10c5883a 	add	r2,r2,r3
81108b14:	10802004 	addi	r2,r2,128
81108b18:	10c0000b 	ldhu	r3,0(r2)
81108b1c:	d0a0480b 	ldhu	r2,-32480(gp)
81108b20:	18ffffcc 	andi	r3,r3,65535
81108b24:	10bfffcc 	andi	r2,r2,65535
81108b28:	1880121e 	bne	r3,r2,81108b74 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81108b2c:	e0fffe43 	ldbu	r3,-7(fp)
81108b30:	00a04574 	movhi	r2,33045
81108b34:	10b67a04 	addi	r2,r2,-9752
81108b38:	18c021a4 	muli	r3,r3,134
81108b3c:	10c5883a 	add	r2,r2,r3
81108b40:	10802004 	addi	r2,r2,128
81108b44:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108b48:	00800044 	movi	r2,1
81108b4c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108b50:	d0a04f17 	ldw	r2,-32452(gp)
81108b54:	1009883a 	mov	r4,r2
81108b58:	112f2000 	call	8112f200 <OSSemPost>
81108b5c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108b60:	e0bffec3 	ldbu	r2,-5(fp)
81108b64:	10803fcc 	andi	r2,r2,255
81108b68:	10000926 	beq	r2,zero,81108b90 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81108b6c:	110e77c0 	call	8110e77c <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81108b70:	00000706 	br	81108b90 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108b74:	e0bffe43 	ldbu	r2,-7(fp)
81108b78:	10800044 	addi	r2,r2,1
81108b7c:	e0bffe45 	stb	r2,-7(fp)
81108b80:	e0bffe43 	ldbu	r2,-7(fp)
81108b84:	108000b0 	cmpltui	r2,r2,2
81108b88:	103fdd1e 	bne	r2,zero,81108b00 <__reset+0xfb0e8b00>
81108b8c:	00000106 	br	81108b94 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81108b90:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108b94:	d0a05817 	ldw	r2,-32416(gp)
81108b98:	1009883a 	mov	r4,r2
81108b9c:	112d4100 	call	8112d410 <OSMutexPost>
                            bFinished128 = TRUE;
81108ba0:	00800044 	movi	r2,1
81108ba4:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81108ba8:	e0bff917 	ldw	r2,-28(fp)
81108bac:	10001d1e 	bne	r2,zero,81108c24 <vInAckHandlerTask+0x514>
81108bb0:	e0bffa17 	ldw	r2,-24(fp)
81108bb4:	10000426 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bb8:	e0bffb17 	ldw	r2,-20(fp)
81108bbc:	10000226 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bc0:	e0bffc17 	ldw	r2,-16(fp)
81108bc4:	1000171e 	bne	r2,zero,81108c24 <vInAckHandlerTask+0x514>
                        OSTimeDly(3); /* Make this task sleep for 3 ticks*/
81108bc8:	010000c4 	movi	r4,3
81108bcc:	1130d040 	call	81130d04 <OSTimeDly>
                        ucCountRetries++;
81108bd0:	e0bffe03 	ldbu	r2,-8(fp)
81108bd4:	10800044 	addi	r2,r2,1
81108bd8:	e0bffe05 	stb	r2,-8(fp)
                        #ifdef DEBUG_ON
                            /* Debug:remove */
                            debug(fp, "Temp. Debug: Retrying again. ucCountRetries++; \n");
81108bdc:	d0a04e17 	ldw	r2,-32456(gp)
81108be0:	100f883a 	mov	r7,r2
81108be4:	01800c04 	movi	r6,48
81108be8:	01400044 	movi	r5,1
81108bec:	01204534 	movhi	r4,33044
81108bf0:	2132bc04 	addi	r4,r4,-13584
81108bf4:	11121200 	call	81112120 <fwrite>
                            fprintf( fp, " bFound = %d , bFinished32 = %d , bFinished64 = %d , bFinished128 = %d  \n", bFound, bFinished32, bFinished64, bFinished128 );
81108bf8:	d0e04e17 	ldw	r3,-32456(gp)
81108bfc:	e0bffc17 	ldw	r2,-16(fp)
81108c00:	d8800115 	stw	r2,4(sp)
81108c04:	e0bffb17 	ldw	r2,-20(fp)
81108c08:	d8800015 	stw	r2,0(sp)
81108c0c:	e1fffa17 	ldw	r7,-24(fp)
81108c10:	e1bff917 	ldw	r6,-28(fp)
81108c14:	01604534 	movhi	r5,33044
81108c18:	2972c904 	addi	r5,r5,-13532
81108c1c:	1809883a 	mov	r4,r3
81108c20:	1111b340 	call	81111b34 <fprintf>
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81108c24:	e0bff917 	ldw	r2,-28(fp)
81108c28:	1000091e 	bne	r2,zero,81108c50 <vInAckHandlerTask+0x540>
81108c2c:	e0bffe03 	ldbu	r2,-8(fp)
81108c30:	108001a8 	cmpgeui	r2,r2,6
81108c34:	1000061e 	bne	r2,zero,81108c50 <vInAckHandlerTask+0x540>
81108c38:	e0bffa17 	ldw	r2,-24(fp)
81108c3c:	103f2f26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108c40:	e0bffb17 	ldw	r2,-20(fp)
81108c44:	103f2d26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108c48:	e0bffc17 	ldw	r2,-16(fp)
81108c4c:	103f2b26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
                            fprintf( fp, " bFound = %d , bFinished32 = %d , bFinished64 = %d , bFinished128 = %d  \n", bFound, bFinished32, bFinished64, bFinished128 );
                        #endif                      
                    }
                }
                
                if (bFound == FALSE) {
81108c50:	e0bff917 	ldw	r2,-28(fp)
81108c54:	1000011e 	bne	r2,zero,81108c5c <vInAckHandlerTask+0x54c>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108c58:	110e7e40 	call	8110e7e4 <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81108c5c:	00800044 	movi	r2,1
81108c60:	e0bffd15 	stw	r2,-12(fp)
				break;
81108c64:	0001883a 	nop
			default:
				break;
		}
	}
81108c68:	003ebe06 	br	81108764 <__reset+0xfb0e8764>

81108c6c <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108c6c:	defff704 	addi	sp,sp,-36
81108c70:	de00012e 	bgeu	sp,et,81108c78 <vInitialTask+0xc>
81108c74:	003b68fa 	trap	3
81108c78:	dfc00815 	stw	ra,32(sp)
81108c7c:	df000715 	stw	fp,28(sp)
81108c80:	df000704 	addi	fp,sp,28
81108c84:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108c88:	e03ffe05 	stb	zero,-8(fp)
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);

	OSStatInit();  /* todo: Talves remover */

	#else
		error_code = OSTaskCreateExt(vReceiverUartTask,
81108c8c:	d8000415 	stw	zero,16(sp)
81108c90:	d8000315 	stw	zero,12(sp)
81108c94:	00820004 	movi	r2,2048
81108c98:	d8800215 	stw	r2,8(sp)
81108c9c:	00a04534 	movhi	r2,33044
81108ca0:	109e7a04 	addi	r2,r2,31208
81108ca4:	d8800115 	stw	r2,4(sp)
81108ca8:	00800784 	movi	r2,30
81108cac:	d8800015 	stw	r2,0(sp)
81108cb0:	01c00784 	movi	r7,30
81108cb4:	01a04574 	movhi	r6,33045
81108cb8:	31a67904 	addi	r6,r6,-26140
81108cbc:	000b883a 	mov	r5,zero
81108cc0:	01204474 	movhi	r4,33041
81108cc4:	21279b04 	addi	r4,r4,-24980
81108cc8:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108ccc:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108cd0:	e0bffe03 	ldbu	r2,-8(fp)
81108cd4:	10803fcc 	andi	r2,r2,255
81108cd8:	10000526 	beq	r2,zero,81108cf0 <vInitialTask+0x84>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108cdc:	e0bffe03 	ldbu	r2,-8(fp)
81108ce0:	10803fcc 	andi	r2,r2,255
81108ce4:	1009883a 	mov	r4,r2
81108ce8:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailReceiverCreate();
81108cec:	110e5c80 	call	8110e5c8 <vFailReceiverCreate>
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);


	#else
		error_code = OSTaskCreateExt(vParserCommTask,
81108cf0:	d8000415 	stw	zero,16(sp)
81108cf4:	d8000315 	stw	zero,12(sp)
81108cf8:	00820004 	movi	r2,2048
81108cfc:	d8800215 	stw	r2,8(sp)
81108d00:	00a04574 	movhi	r2,33045
81108d04:	10b6c104 	addi	r2,r2,-9468
81108d08:	d8800115 	stw	r2,4(sp)
81108d0c:	00800684 	movi	r2,26
81108d10:	d8800015 	stw	r2,0(sp)
81108d14:	01c00684 	movi	r7,26
81108d18:	01a04574 	movhi	r6,33045
81108d1c:	31bec004 	addi	r6,r6,-1280
81108d20:	000b883a 	mov	r5,zero
81108d24:	01204474 	movhi	r4,33041
81108d28:	21248d04 	addi	r4,r4,-28108
81108d2c:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108d30:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d34:	e0bffe03 	ldbu	r2,-8(fp)
81108d38:	10803fcc 	andi	r2,r2,255
81108d3c:	10000526 	beq	r2,zero,81108d54 <vInitialTask+0xe8>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d40:	e0bffe03 	ldbu	r2,-8(fp)
81108d44:	10803fcc 	andi	r2,r2,255
81108d48:	1009883a 	mov	r4,r2
81108d4c:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81108d50:	110eb8c0 	call	8110eb8c <vFailParserCommTaskCreate>
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);


	#else
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81108d54:	d8000415 	stw	zero,16(sp)
81108d58:	d8000315 	stw	zero,12(sp)
81108d5c:	00820004 	movi	r2,2048
81108d60:	d8800215 	stw	r2,8(sp)
81108d64:	00a04534 	movhi	r2,33044
81108d68:	1084d104 	addi	r2,r2,4932
81108d6c:	d8800115 	stw	r2,4(sp)
81108d70:	008005c4 	movi	r2,23
81108d74:	d8800015 	stw	r2,0(sp)
81108d78:	01c005c4 	movi	r7,23
81108d7c:	01a04534 	movhi	r6,33044
81108d80:	318cd004 	addi	r6,r6,13120
81108d84:	000b883a 	mov	r5,zero
81108d88:	01204474 	movhi	r4,33041
81108d8c:	2121c404 	addi	r4,r4,-30960
81108d90:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108d94:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d98:	e0bffe03 	ldbu	r2,-8(fp)
81108d9c:	10803fcc 	andi	r2,r2,255
81108da0:	10000526 	beq	r2,zero,81108db8 <vInitialTask+0x14c>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108da4:	e0bffe03 	ldbu	r2,-8(fp)
81108da8:	10803fcc 	andi	r2,r2,255
81108dac:	1009883a 	mov	r4,r2
81108db0:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81108db4:	110ebd80 	call	8110ebd8 <vFailInAckHandlerTaskCreate>
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);


	#else
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108db8:	d8000415 	stw	zero,16(sp)
81108dbc:	d8000315 	stw	zero,12(sp)
81108dc0:	00820004 	movi	r2,2048
81108dc4:	d8800215 	stw	r2,8(sp)
81108dc8:	00a04574 	movhi	r2,33045
81108dcc:	10a67a04 	addi	r2,r2,-26136
81108dd0:	d8800115 	stw	r2,4(sp)
81108dd4:	00800644 	movi	r2,25
81108dd8:	d8800015 	stw	r2,0(sp)
81108ddc:	01c00644 	movi	r7,25
81108de0:	01a04574 	movhi	r6,33045
81108de4:	31ae7904 	addi	r6,r6,-17948
81108de8:	000b883a 	mov	r5,zero
81108dec:	01204474 	movhi	r4,33041
81108df0:	2123dd04 	addi	r4,r4,-28812
81108df4:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108df8:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108dfc:	e0bffe03 	ldbu	r2,-8(fp)
81108e00:	10803fcc 	andi	r2,r2,255
81108e04:	10000526 	beq	r2,zero,81108e1c <vInitialTask+0x1b0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e08:	e0bffe03 	ldbu	r2,-8(fp)
81108e0c:	10803fcc 	andi	r2,r2,255
81108e10:	1009883a 	mov	r4,r2
81108e14:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108e18:	110ec240 	call	8110ec24 <vFailOutAckHandlerTaskCreate>
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);


	#else
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81108e1c:	d8000415 	stw	zero,16(sp)
81108e20:	d8000315 	stw	zero,12(sp)
81108e24:	00820004 	movi	r2,2048
81108e28:	d8800215 	stw	r2,8(sp)
81108e2c:	00a04534 	movhi	r2,33044
81108e30:	10962e04 	addi	r2,r2,22712
81108e34:	d8800115 	stw	r2,4(sp)
81108e38:	00800704 	movi	r2,28
81108e3c:	d8800015 	stw	r2,0(sp)
81108e40:	01c00704 	movi	r7,28
81108e44:	01a04534 	movhi	r6,33044
81108e48:	319e2d04 	addi	r6,r6,30900
81108e4c:	000b883a 	mov	r5,zero
81108e50:	01204474 	movhi	r4,33041
81108e54:	212b2504 	addi	r4,r4,-21356
81108e58:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108e5c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e60:	e0bffe03 	ldbu	r2,-8(fp)
81108e64:	10803fcc 	andi	r2,r2,255
81108e68:	10000526 	beq	r2,zero,81108e80 <vInitialTask+0x214>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e6c:	e0bffe03 	ldbu	r2,-8(fp)
81108e70:	10803fcc 	andi	r2,r2,255
81108e74:	1009883a 	mov	r4,r2
81108e78:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108e7c:	110ed080 	call	8110ed08 <vFailTimeoutCheckerTaskCreate>
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);


	#else
		error_code = OSTaskCreateExt(vSenderComTask,
81108e80:	d8000415 	stw	zero,16(sp)
81108e84:	d8000315 	stw	zero,12(sp)
81108e88:	00820004 	movi	r2,2048
81108e8c:	d8800215 	stw	r2,8(sp)
81108e90:	00a04534 	movhi	r2,33044
81108e94:	108d1704 	addi	r2,r2,13404
81108e98:	d8800115 	stw	r2,4(sp)
81108e9c:	00800604 	movi	r2,24
81108ea0:	d8800015 	stw	r2,0(sp)
81108ea4:	01c00604 	movi	r7,24
81108ea8:	01a04534 	movhi	r6,33044
81108eac:	31951604 	addi	r6,r6,21592
81108eb0:	000b883a 	mov	r5,zero
81108eb4:	01204474 	movhi	r4,33041
81108eb8:	212a4804 	addi	r4,r4,-22240
81108ebc:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
81108ec0:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108ec4:	e0bffe03 	ldbu	r2,-8(fp)
81108ec8:	10803fcc 	andi	r2,r2,255
81108ecc:	10000526 	beq	r2,zero,81108ee4 <vInitialTask+0x278>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ed0:	e0bffe03 	ldbu	r2,-8(fp)
81108ed4:	10803fcc 	andi	r2,r2,255
81108ed8:	1009883a 	mov	r4,r2
81108edc:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailSenderCreate();
81108ee0:	110e6140 	call	8110e614 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81108ee4:	d0a05717 	ldw	r2,-32420(gp)
81108ee8:	e17ffe04 	addi	r5,fp,-8
81108eec:	1009883a 	mov	r4,r2
81108ef0:	11319040 	call	81131904 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81108ef4:	e0bffe03 	ldbu	r2,-8(fp)
81108ef8:	10803fcc 	andi	r2,r2,255
81108efc:	10000126 	beq	r2,zero,81108f04 <vInitialTask+0x298>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81108f00:	110efc40 	call	8110efc4 <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81108f04:	01003fc4 	movi	r4,255
81108f08:	112fdd00 	call	8112fdd0 <OSTaskDel>
81108f0c:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81108f10:	e0bffe03 	ldbu	r2,-8(fp)
81108f14:	10803fcc 	andi	r2,r2,255
81108f18:	10001026 	beq	r2,zero,81108f5c <vInitialTask+0x2f0>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108f1c:	e0bffe03 	ldbu	r2,-8(fp)
81108f20:	10803fcc 	andi	r2,r2,255
81108f24:	1009883a 	mov	r4,r2
81108f28:	110e0740 	call	8110e074 <printErrorTask>
		#endif
		vFailDeleteInitialization();
81108f2c:	110e6600 	call	8110e660 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81108f30:	014009c4 	movi	r5,39
81108f34:	01000044 	movi	r4,1
81108f38:	112f5380 	call	8112f538 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81108f3c:	01003fc4 	movi	r4,255
81108f40:	112fdd00 	call	8112fdd0 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81108f44:	000f883a 	mov	r7,zero
81108f48:	01800284 	movi	r6,10
81108f4c:	000b883a 	mov	r5,zero
81108f50:	0009883a 	mov	r4,zero
81108f54:	1130e100 	call	81130e10 <OSTimeDlyHMSM>
		}
81108f58:	003ff806 	br	81108f3c <__reset+0xfb0e8f3c>
	}

}
81108f5c:	0001883a 	nop
81108f60:	e037883a 	mov	sp,fp
81108f64:	dfc00117 	ldw	ra,4(sp)
81108f68:	df000017 	ldw	fp,0(sp)
81108f6c:	dec00204 	addi	sp,sp,8
81108f70:	f800283a 	ret

81108f74 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81108f74:	defff604 	addi	sp,sp,-40
81108f78:	de00012e 	bgeu	sp,et,81108f80 <vOutAckHandlerTask+0xc>
81108f7c:	003b68fa 	trap	3
81108f80:	dfc00915 	stw	ra,36(sp)
81108f84:	df000815 	stw	fp,32(sp)
81108f88:	df000804 	addi	fp,sp,32
81108f8c:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81108f90:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81108f94:	e03ffb15 	stw	zero,-20(fp)
81108f98:	e03ffc15 	stw	zero,-16(fp)
81108f9c:	e03ffd15 	stw	zero,-12(fp)
81108fa0:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81108fa4:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81108fa8:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81108fac:	d0a04e17 	ldw	r2,-32456(gp)
81108fb0:	100f883a 	mov	r7,r2
81108fb4:	01800704 	movi	r6,28
81108fb8:	01400044 	movi	r5,1
81108fbc:	01204534 	movhi	r4,33044
81108fc0:	2132dc04 	addi	r4,r4,-13456
81108fc4:	11121200 	call	81112120 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81108fc8:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81108fcc:	e0bff917 	ldw	r2,-28(fp)
81108fd0:	10c00060 	cmpeqi	r3,r2,1
81108fd4:	1800071e 	bne	r3,zero,81108ff4 <vOutAckHandlerTask+0x80>
81108fd8:	0080032e 	bgeu	zero,r2,81108fe8 <vOutAckHandlerTask+0x74>
81108fdc:	108000a0 	cmpeqi	r2,r2,2
81108fe0:	1000451e 	bne	r2,zero,811090f8 <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81108fe4:	00009206 	br	81109230 <vOutAckHandlerTask+0x2bc>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81108fe8:	00800044 	movi	r2,1
81108fec:	e0bff915 	stw	r2,-28(fp)
				break;
81108ff0:	00008f06 	br	81109230 <vOutAckHandlerTask+0x2bc>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81108ff4:	d0a04d17 	ldw	r2,-32460(gp)
81108ff8:	e0fffac4 	addi	r3,fp,-21
81108ffc:	180d883a 	mov	r6,r3
81109000:	000b883a 	mov	r5,zero
81109004:	1009883a 	mov	r4,r2
81109008:	112ee780 	call	8112ee78 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110900c:	e0bffac3 	ldbu	r2,-21(fp)
81109010:	10803fcc 	andi	r2,r2,255
81109014:	1000361e 	bne	r2,zero,811090f0 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81109018:	d0a05b17 	ldw	r2,-32404(gp)
8110901c:	e0fffac4 	addi	r3,fp,-21
81109020:	180d883a 	mov	r6,r3
81109024:	000b883a 	mov	r5,zero
81109028:	1009883a 	mov	r4,r2
8110902c:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109030:	e0bffac3 	ldbu	r2,-21(fp)
81109034:	10803fcc 	andi	r2,r2,255
81109038:	10002b1e 	bne	r2,zero,811090e8 <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110903c:	e03ffa45 	stb	zero,-23(fp)
81109040:	00002206 	br	811090cc <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109044:	e0fffa43 	ldbu	r3,-23(fp)
81109048:	00a04574 	movhi	r2,33045
8110904c:	10bec104 	addi	r2,r2,-1276
81109050:	18c7883a 	add	r3,r3,r3
81109054:	18c7883a 	add	r3,r3,r3
81109058:	10c5883a 	add	r2,r2,r3
8110905c:	10800003 	ldbu	r2,0(r2)
81109060:	10803fcc 	andi	r2,r2,255
81109064:	1080201c 	xori	r2,r2,128
81109068:	10bfe004 	addi	r2,r2,-128
8110906c:	10001426 	beq	r2,zero,811090c0 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109070:	e0fffa43 	ldbu	r3,-23(fp)
81109074:	00a04574 	movhi	r2,33045
81109078:	10bec104 	addi	r2,r2,-1276
8110907c:	18c7883a 	add	r3,r3,r3
81109080:	18c7883a 	add	r3,r3,r3
81109084:	10c5883a 	add	r2,r2,r3
81109088:	10c0000b 	ldhu	r3,0(r2)
8110908c:	d0e0488d 	sth	r3,-32478(gp)
81109090:	1080008b 	ldhu	r2,2(r2)
81109094:	d0a0490d 	sth	r2,-32476(gp)
                                eSenderAckState = sSASending;
81109098:	00800084 	movi	r2,2
8110909c:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811090a0:	e0fffa43 	ldbu	r3,-23(fp)
811090a4:	00a04574 	movhi	r2,33045
811090a8:	10bec104 	addi	r2,r2,-1276
811090ac:	18c7883a 	add	r3,r3,r3
811090b0:	18c7883a 	add	r3,r3,r3
811090b4:	10c5883a 	add	r2,r2,r3
811090b8:	10000005 	stb	zero,0(r2)
                                break;
811090bc:	00000606 	br	811090d8 <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811090c0:	e0bffa43 	ldbu	r2,-23(fp)
811090c4:	10800044 	addi	r2,r2,1
811090c8:	e0bffa45 	stb	r2,-23(fp)
811090cc:	e0bffa43 	ldbu	r2,-23(fp)
811090d0:	10800130 	cmpltui	r2,r2,4
811090d4:	103fdb1e 	bne	r2,zero,81109044 <__reset+0xfb0e9044>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811090d8:	d0a05b17 	ldw	r2,-32404(gp)
811090dc:	1009883a 	mov	r4,r2
811090e0:	112d4100 	call	8112d410 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090e4:	00005206 	br	81109230 <vOutAckHandlerTask+0x2bc>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811090e8:	110e3900 	call	8110e390 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090ec:	00005006 	br	81109230 <vOutAckHandlerTask+0x2bc>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811090f0:	110e3280 	call	8110e328 <vFailGetCountSemaphoreSenderTask>
                }
                break;
811090f4:	00004e06 	br	81109230 <vOutAckHandlerTask+0x2bc>
			case sSASending:

                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
811090f8:	d0a04883 	ldbu	r2,-32478(gp)
811090fc:	10803fcc 	andi	r2,r2,255
81109100:	1080201c 	xori	r2,r2,128
81109104:	10bfe004 	addi	r2,r2,-128
81109108:	108008e0 	cmpeqi	r2,r2,35
8110910c:	1000201e 	bne	r2,zero,81109190 <vOutAckHandlerTask+0x21c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
81109110:	d0a048c3 	ldbu	r2,-32477(gp)
81109114:	10c03fcc 	andi	r3,r2,255
81109118:	18c0201c 	xori	r3,r3,128
8110911c:	18ffe004 	addi	r3,r3,-128
81109120:	d0a0490b 	ldhu	r2,-32476(gp)
81109124:	113fffcc 	andi	r4,r2,65535
81109128:	e0bffb04 	addi	r2,fp,-20
8110912c:	200f883a 	mov	r7,r4
81109130:	180d883a 	mov	r6,r3
81109134:	01604534 	movhi	r5,33044
81109138:	2972e404 	addi	r5,r5,-13424
8110913c:	1009883a 	mov	r4,r2
81109140:	111329c0 	call	8111329c <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81109144:	e0bffb04 	addi	r2,fp,-20
81109148:	1009883a 	mov	r4,r2
8110914c:	11134b00 	call	811134b0 <strlen>
81109150:	1007883a 	mov	r3,r2
81109154:	e0bffb04 	addi	r2,fp,-20
81109158:	180b883a 	mov	r5,r3
8110915c:	1009883a 	mov	r4,r2
81109160:	110e0180 	call	8110e018 <ucCrc8wInit>
81109164:	e0bffa85 	stb	r2,-22(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109168:	e13ffa83 	ldbu	r4,-22(fp)
8110916c:	e0fffb04 	addi	r3,fp,-20
81109170:	e0bffb04 	addi	r2,fp,-20
81109174:	200f883a 	mov	r7,r4
81109178:	180d883a 	mov	r6,r3
8110917c:	01604534 	movhi	r5,33044
81109180:	2972e604 	addi	r5,r5,-13416
81109184:	1009883a 	mov	r4,r2
81109188:	111329c0 	call	8111329c <sprintf>
8110918c:	00000606 	br	811091a8 <vOutAckHandlerTask+0x234>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
81109190:	e0fffb04 	addi	r3,fp,-20
81109194:	008d0d74 	movhi	r2,13365
81109198:	109f08c4 	addi	r2,r2,31779
8110919c:	18800015 	stw	r2,0(r3)
811091a0:	00800ec4 	movi	r2,59
811091a4:	1880010d 	sth	r2,4(r3)
                }

                bSuccess = FALSE;
811091a8:	e03ff815 	stw	zero,-32(fp)
                ucCountRetries = 0;
811091ac:	e03ffa05 	stb	zero,-24(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811091b0:	00001406 	br	81109204 <vOutAckHandlerTask+0x290>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
811091b4:	d0a05c17 	ldw	r2,-32400(gp)
811091b8:	e0fffac4 	addi	r3,fp,-21
811091bc:	180d883a 	mov	r6,r3
811091c0:	01400144 	movi	r5,5
811091c4:	1009883a 	mov	r4,r2
811091c8:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
811091cc:	e0bffac3 	ldbu	r2,-21(fp)
811091d0:	10803fcc 	andi	r2,r2,255
811091d4:	1000081e 	bne	r2,zero,811091f8 <vOutAckHandlerTask+0x284>
                        puts(cBufferAck);
811091d8:	e0bffb04 	addi	r2,fp,-20
811091dc:	1009883a 	mov	r4,r2
811091e0:	1112f580 	call	81112f58 <puts>
                        OSMutexPost(xTxUARTMutex);
811091e4:	d0a05c17 	ldw	r2,-32400(gp)
811091e8:	1009883a 	mov	r4,r2
811091ec:	112d4100 	call	8112d410 <OSMutexPost>
                        bSuccess = TRUE;
811091f0:	00800044 	movi	r2,1
811091f4:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
811091f8:	e0bffa03 	ldbu	r2,-24(fp)
811091fc:	10800044 	addi	r2,r2,1
81109200:	e0bffa05 	stb	r2,-24(fp)
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
                }

                bSuccess = FALSE;
                ucCountRetries = 0;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81109204:	e0bff817 	ldw	r2,-32(fp)
81109208:	1000031e 	bne	r2,zero,81109218 <vOutAckHandlerTask+0x2a4>
8110920c:	e0bffa03 	ldbu	r2,-24(fp)
81109210:	108001b0 	cmpltui	r2,r2,6
81109214:	103fe71e 	bne	r2,zero,811091b4 <__reset+0xfb0e91b4>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
81109218:	e0bff817 	ldw	r2,-32(fp)
8110921c:	1000011e 	bne	r2,zero,81109224 <vOutAckHandlerTask+0x2b0>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
81109220:	110e4c80 	call	8110e4c8 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
81109224:	00800044 	movi	r2,1
81109228:	e0bff915 	stw	r2,-28(fp)
				break;
8110922c:	0001883a 	nop
			default:
				break;
		}
	}
81109230:	003f6606 	br	81108fcc <__reset+0xfb0e8fcc>

81109234 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
81109234:	deffc104 	addi	sp,sp,-252
81109238:	de00012e 	bgeu	sp,et,81109240 <vParserCommTask+0xc>
8110923c:	003b68fa 	trap	3
81109240:	dfc03e15 	stw	ra,248(sp)
81109244:	df003d15 	stw	fp,244(sp)
81109248:	df003d04 	addi	fp,sp,244
8110924c:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
81109250:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

	#ifdef DEBUG_ON
		debug(fp,"vParserCommTask, enter task.\n");
81109254:	d0a04e17 	ldw	r2,-32456(gp)
81109258:	100f883a 	mov	r7,r2
8110925c:	01800744 	movi	r6,29
81109260:	01400044 	movi	r5,1
81109264:	01204534 	movhi	r4,33044
81109268:	2132e904 	addi	r4,r4,-13404
8110926c:	11121200 	call	81112120 <fwrite>
	#endif

	eParserMode = sConfiguring;
81109270:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
81109274:	e0bfc817 	ldw	r2,-224(fp)
81109278:	108001a8 	cmpgeui	r2,r2,6
8110927c:	1002881e 	bne	r2,zero,81109ca0 <vParserCommTask+0xa6c>
81109280:	e0bfc817 	ldw	r2,-224(fp)
81109284:	100690ba 	slli	r3,r2,2
81109288:	00a04474 	movhi	r2,33041
8110928c:	10a4a704 	addi	r2,r2,-28004
81109290:	1885883a 	add	r2,r3,r2
81109294:	10800017 	ldw	r2,0(r2)
81109298:	1000683a 	jmp	r2
8110929c:	811092b4 	orhi	r4,r16,16970
811092a0:	811092c0 	call	8811092c <__reset+0x20f092c>
811092a4:	8110938c 	andi	r4,r16,16974
811092a8:	81109420 	cmpeqi	r4,r16,16976
811092ac:	81109578 	rdprs	r4,r16,16981
811092b0:	811095c0 	call	8811095c <__reset+0x20f095c>
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
811092b4:	00800044 	movi	r2,1
811092b8:	e0bfc815 	stw	r2,-224(fp)
				break;
811092bc:	00027c06 	br	81109cb0 <vParserCommTask+0xa7c>
			case sWaitingConn:

				bSuccess = FALSE;
811092c0:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingConn;
811092c4:	00800044 	movi	r2,1
811092c8:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
811092cc:	d0a05017 	ldw	r2,-32448(gp)
811092d0:	e0ffca84 	addi	r3,fp,-214
811092d4:	180d883a 	mov	r6,r3
811092d8:	000b883a 	mov	r5,zero
811092dc:	1009883a 	mov	r4,r2
811092e0:	112ee780 	call	8112ee78 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811092e4:	e0bfca83 	ldbu	r2,-214(fp)
811092e8:	10803fcc 	andi	r2,r2,255
811092ec:	1000251e 	bne	r2,zero,81109384 <vParserCommTask+0x150>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
811092f0:	d0a04c17 	ldw	r2,-32464(gp)
811092f4:	1009883a 	mov	r4,r2
811092f8:	112f2000 	call	8112f200 <OSSemPost>
811092fc:	e0bfca85 	stb	r2,-214(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109300:	e0bfca83 	ldbu	r2,-214(fp)
81109304:	10803fcc 	andi	r2,r2,255
81109308:	1000171e 	bne	r2,zero,81109368 <vParserCommTask+0x134>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
8110930c:	01204534 	movhi	r4,33044
81109310:	21036104 	addi	r4,r4,3460
81109314:	1109cb40 	call	81109cb4 <getPreParsedPacket>
81109318:	e0bfc915 	stw	r2,-220(fp)
                    	if (bSuccess == TRUE) {
8110931c:	e0bfc917 	ldw	r2,-220(fp)
81109320:	10800058 	cmpnei	r2,r2,1
81109324:	10000e1e 	bne	r2,zero,81109360 <vParserCommTask+0x12c>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109328:	00a04534 	movhi	r2,33044
8110932c:	10836104 	addi	r2,r2,3460
81109330:	10800103 	ldbu	r2,4(r2)
81109334:	10803fcc 	andi	r2,r2,255
81109338:	1080201c 	xori	r2,r2,128
8110933c:	10bfe004 	addi	r2,r2,-128
81109340:	10800858 	cmpnei	r2,r2,33
81109344:	1000031e 	bne	r2,zero,81109354 <vParserCommTask+0x120>
                            	eParserMode = sReplyParsing;
81109348:	00800104 	movi	r2,4
8110934c:	e0bfc815 	stw	r2,-224(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109350:	00025606 	br	81109cac <vParserCommTask+0xa78>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
81109354:	008000c4 	movi	r2,3
81109358:	e0bfc815 	stw	r2,-224(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
8110935c:	00025306 	br	81109cac <vParserCommTask+0xa78>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81109360:	110e91c0 	call	8110e91c <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109364:	00025106 	br	81109cac <vParserCommTask+0xa78>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81109368:	1109dcc0 	call	81109dcc <bTrySendSemaphoreCommInit>
8110936c:	e0bfc915 	stw	r2,-220(fp)
						if (bSuccess == TRUE) {
81109370:	e0bfc917 	ldw	r2,-220(fp)
81109374:	10800058 	cmpnei	r2,r2,1
81109378:	10024c1e 	bne	r2,zero,81109cac <vParserCommTask+0xa78>
							vFailSendxSemCommInit();
8110937c:	110e1dc0 	call	8110e1dc <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109380:	00024a06 	br	81109cac <vParserCommTask+0xa78>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109384:	110e84c0 	call	8110e84c <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81109388:	00024806 	br	81109cac <vParserCommTask+0xa78>
			case sWaitingMessage:

				bSuccess = FALSE;
8110938c:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
81109390:	00800084 	movi	r2,2
81109394:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109398:	d0a05017 	ldw	r2,-32448(gp)
8110939c:	e0ffca84 	addi	r3,fp,-214
811093a0:	180d883a 	mov	r6,r3
811093a4:	000b883a 	mov	r5,zero
811093a8:	1009883a 	mov	r4,r2
811093ac:	112ee780 	call	8112ee78 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811093b0:	e0bfca83 	ldbu	r2,-214(fp)
811093b4:	10803fcc 	andi	r2,r2,255
811093b8:	1000171e 	bne	r2,zero,81109418 <vParserCommTask+0x1e4>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811093bc:	01204534 	movhi	r4,33044
811093c0:	21036104 	addi	r4,r4,3460
811093c4:	1109cb40 	call	81109cb4 <getPreParsedPacket>
811093c8:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
811093cc:	e0bfc917 	ldw	r2,-220(fp)
811093d0:	10800058 	cmpnei	r2,r2,1
811093d4:	10000e1e 	bne	r2,zero,81109410 <vParserCommTask+0x1dc>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
811093d8:	00a04534 	movhi	r2,33044
811093dc:	10836104 	addi	r2,r2,3460
811093e0:	10800103 	ldbu	r2,4(r2)
811093e4:	10803fcc 	andi	r2,r2,255
811093e8:	1080201c 	xori	r2,r2,128
811093ec:	10bfe004 	addi	r2,r2,-128
811093f0:	10800858 	cmpnei	r2,r2,33
811093f4:	1000031e 	bne	r2,zero,81109404 <vParserCommTask+0x1d0>
							eParserMode = sReplyParsing;
811093f8:	00800104 	movi	r2,4
811093fc:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109400:	00022b06 	br	81109cb0 <vParserCommTask+0xa7c>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
81109404:	008000c4 	movi	r2,3
81109408:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110940c:	00022806 	br	81109cb0 <vParserCommTask+0xa7c>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
81109410:	110e91c0 	call	8110e91c <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109414:	00022606 	br	81109cb0 <vParserCommTask+0xa7c>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109418:	110e84c0 	call	8110e84c <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
8110941c:	00022406 	br	81109cb0 <vParserCommTask+0xa7c>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
81109420:	00a04534 	movhi	r2,33044
81109424:	10836104 	addi	r2,r2,3460
81109428:	10800143 	ldbu	r2,5(r2)
8110942c:	10803fcc 	andi	r2,r2,255
81109430:	1080201c 	xori	r2,r2,128
81109434:	10bfe004 	addi	r2,r2,-128
81109438:	10c01120 	cmpeqi	r3,r2,68
8110943c:	1800081e 	bne	r3,zero,81109460 <vParserCommTask+0x22c>
81109440:	10c01420 	cmpeqi	r3,r2,80
81109444:	18000a1e 	bne	r3,zero,81109470 <vParserCommTask+0x23c>
81109448:	108010e0 	cmpeqi	r2,r2,67
8110944c:	10004626 	beq	r2,zero,81109568 <vParserCommTask+0x334>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
81109450:	110c9480 	call	8110c948 <vSendEthConf>
						eParserMode = sWaitingMessage;
81109454:	00800084 	movi	r2,2
81109458:	e0bfc815 	stw	r2,-224(fp)
						break;
8110945c:	00004506 	br	81109574 <vParserCommTask+0x340>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109460:	110cbd80 	call	8110cbd8 <vSendTurnOff>
						eParserMode = sWaitingMessage;
81109464:	00800084 	movi	r2,2
81109468:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110946c:	00004106 	br	81109574 <vParserCommTask+0x340>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
81109470:	d0a04e17 	ldw	r2,-32456(gp)
81109474:	100f883a 	mov	r7,r2
81109478:	01800384 	movi	r6,14
8110947c:	01400044 	movi	r5,1
81109480:	01204534 	movhi	r4,33044
81109484:	2132f104 	addi	r4,r4,-13372
81109488:	11121200 	call	81112120 <fwrite>
							memset(cPUSDebug,0,128);
8110948c:	e0bfdf04 	addi	r2,fp,-132
81109490:	01802004 	movi	r6,128
81109494:	000b883a 	mov	r5,zero
81109498:	1009883a 	mov	r4,r2
8110949c:	1112c840 	call	81112c84 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
811094a0:	00a04534 	movhi	r2,33044
811094a4:	10836104 	addi	r2,r2,3460
811094a8:	1080028b 	ldhu	r2,10(r2)
811094ac:	117fffcc 	andi	r5,r2,65535
811094b0:	00a04534 	movhi	r2,33044
811094b4:	10836104 	addi	r2,r2,3460
811094b8:	1080030b 	ldhu	r2,12(r2)
811094bc:	11bfffcc 	andi	r6,r2,65535
811094c0:	00a04534 	movhi	r2,33044
811094c4:	10836104 	addi	r2,r2,3460
811094c8:	1080038b 	ldhu	r2,14(r2)
811094cc:	10ffffcc 	andi	r3,r2,65535
811094d0:	00a04534 	movhi	r2,33044
811094d4:	10836104 	addi	r2,r2,3460
811094d8:	1080040b 	ldhu	r2,16(r2)
811094dc:	113fffcc 	andi	r4,r2,65535
811094e0:	00a04534 	movhi	r2,33044
811094e4:	10836104 	addi	r2,r2,3460
811094e8:	1080048b 	ldhu	r2,18(r2)
811094ec:	10bfffcc 	andi	r2,r2,65535
811094f0:	e23fdf04 	addi	r8,fp,-132
811094f4:	d8800215 	stw	r2,8(sp)
811094f8:	d9000115 	stw	r4,4(sp)
811094fc:	d8c00015 	stw	r3,0(sp)
81109500:	300f883a 	mov	r7,r6
81109504:	280d883a 	mov	r6,r5
81109508:	01604534 	movhi	r5,33044
8110950c:	2972f504 	addi	r5,r5,-13356
81109510:	4009883a 	mov	r4,r8
81109514:	111329c0 	call	8111329c <sprintf>
							debug(fp, cPUSDebug );
81109518:	d0a04e17 	ldw	r2,-32456(gp)
8110951c:	e0ffdf04 	addi	r3,fp,-132
81109520:	180b883a 	mov	r5,r3
81109524:	1009883a 	mov	r4,r2
81109528:	1111b340 	call	81111b34 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
8110952c:	00a04534 	movhi	r2,33044
81109530:	10836104 	addi	r2,r2,3460
81109534:	1080038b 	ldhu	r2,14(r2)
81109538:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
8110953c:	00a04534 	movhi	r2,33044
81109540:	10836104 	addi	r2,r2,3460
81109544:	1080040b 	ldhu	r2,16(r2)
81109548:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
8110954c:	00a04534 	movhi	r2,33044
81109550:	10836104 	addi	r2,r2,3460
81109554:	1080048b 	ldhu	r2,18(r2)
81109558:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
8110955c:	00800144 	movi	r2,5
81109560:	e0bfc815 	stw	r2,-224(fp)
                        break;						
81109564:	00000306 	br	81109574 <vParserCommTask+0x340>
					default:
						eParserMode = sWaitingMessage;
81109568:	00800084 	movi	r2,2
8110956c:	e0bfc815 	stw	r2,-224(fp)
						break;
81109570:	0001883a 	nop
				}
				break;
81109574:	0001ce06 	br	81109cb0 <vParserCommTask+0xa7c>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
81109578:	00800084 	movi	r2,2
8110957c:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
81109580:	e0bfc60b 	ldhu	r2,-232(fp)
81109584:	10c01220 	cmpeqi	r3,r2,72
81109588:	1800091e 	bne	r3,zero,811095b0 <vParserCommTask+0x37c>
8110958c:	10c014e0 	cmpeqi	r3,r2,83
81109590:	1800091e 	bne	r3,zero,811095b8 <vParserCommTask+0x384>
81109594:	10801120 	cmpeqi	r2,r2,68
81109598:	10000226 	beq	r2,zero,811095a4 <vParserCommTask+0x370>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
8110959c:	110cbd80 	call	8110cbd8 <vSendTurnOff>
						
						
                        break;
811095a0:	00000606 	br	811095bc <vParserCommTask+0x388>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
811095a4:	00800084 	movi	r2,2
811095a8:	e0bfc815 	stw	r2,-224(fp)
                        break;
811095ac:	00000306 	br	811095bc <vParserCommTask+0x388>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
811095b0:	0001883a 	nop
811095b4:	0001be06 	br	81109cb0 <vParserCommTask+0xa7c>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
811095b8:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
811095bc:	0001bc06 	br	81109cb0 <vParserCommTask+0xa7c>
			case sPusHandling:
				eParserMode = sWaitingMessage;
811095c0:	00800084 	movi	r2,2
811095c4:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
811095c8:	e0bfc60b 	ldhu	r2,-232(fp)
811095cc:	10c03ea0 	cmpeqi	r3,r2,250
811095d0:	1800311e 	bne	r3,zero,81109698 <vParserCommTask+0x464>
811095d4:	10c03ec8 	cmpgei	r3,r2,251
811095d8:	1800031e 	bne	r3,zero,811095e8 <vParserCommTask+0x3b4>
811095dc:	10800460 	cmpeqi	r2,r2,17
811095e0:	1000061e 	bne	r2,zero,811095fc <vParserCommTask+0x3c8>
811095e4:	0001aa06 	br	81109c90 <vParserCommTask+0xa5c>
811095e8:	10c03ee0 	cmpeqi	r3,r2,251
811095ec:	1800621e 	bne	r3,zero,81109778 <vParserCommTask+0x544>
811095f0:	10803f20 	cmpeqi	r2,r2,252
811095f4:	1000ba1e 	bne	r2,zero,811098e0 <vParserCommTask+0x6ac>
811095f8:	0001a506 	br	81109c90 <vParserCommTask+0xa5c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
811095fc:	e0bfc68b 	ldhu	r2,-230(fp)
81109600:	10800060 	cmpeqi	r2,r2,1
81109604:	10000b26 	beq	r2,zero,81109634 <vParserCommTask+0x400>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
81109608:	d0a04e17 	ldw	r2,-32456(gp)
8110960c:	100f883a 	mov	r7,r2
81109610:	01800604 	movi	r6,24
81109614:	01400044 	movi	r5,1
81109618:	01204534 	movhi	r4,33044
8110961c:	21330804 	addi	r4,r4,-13280
81109620:	11121200 	call	81112120 <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
81109624:	e0bfc70b 	ldhu	r2,-228(fp)
81109628:	1009883a 	mov	r4,r2
8110962c:	110d2300 	call	8110d230 <vTMPusTestConnection>

								break;
81109630:	00001806 	br	81109694 <vParserCommTask+0x460>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109634:	e0bfdf04 	addi	r2,fp,-132
81109638:	01802004 	movi	r6,128
8110963c:	000b883a 	mov	r5,zero
81109640:	1009883a 	mov	r4,r2
81109644:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109648:	e13fc60b 	ldhu	r4,-232(fp)
8110964c:	e17fc68b 	ldhu	r5,-230(fp)
81109650:	e0bfc70b 	ldhu	r2,-228(fp)
81109654:	e0ffdf04 	addi	r3,fp,-132
81109658:	d8800015 	stw	r2,0(sp)
8110965c:	280f883a 	mov	r7,r5
81109660:	200d883a 	mov	r6,r4
81109664:	01604534 	movhi	r5,33044
81109668:	29730f04 	addi	r5,r5,-13252
8110966c:	1809883a 	mov	r4,r3
81109670:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109674:	d0a04e17 	ldw	r2,-32456(gp)
81109678:	e0ffdf04 	addi	r3,fp,-132
8110967c:	180b883a 	mov	r5,r3
81109680:	1009883a 	mov	r4,r2
81109684:	1111b340 	call	81111b34 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
81109688:	00800084 	movi	r2,2
8110968c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109690:	0001883a 	nop
						}
                        break;
81109694:	00018106 	br	81109c9c <vParserCommTask+0xa68>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
81109698:	e0bfc68b 	ldhu	r2,-230(fp)
8110969c:	10c00f20 	cmpeqi	r3,r2,60
811096a0:	18000c1e 	bne	r3,zero,811096d4 <vParserCommTask+0x4a0>
811096a4:	10c00f60 	cmpeqi	r3,r2,61
811096a8:	1800121e 	bne	r3,zero,811096f4 <vParserCommTask+0x4c0>
811096ac:	10800ee0 	cmpeqi	r2,r2,59
811096b0:	10001826 	beq	r2,zero,81109714 <vParserCommTask+0x4e0>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
811096b4:	d0a04e17 	ldw	r2,-32456(gp)
811096b8:	100f883a 	mov	r7,r2
811096bc:	01800384 	movi	r6,14
811096c0:	01400044 	movi	r5,1
811096c4:	01204534 	movhi	r4,33044
811096c8:	21331f04 	addi	r4,r4,-13188
811096cc:	11121200 	call	81112120 <fwrite>
								#endif

								
								break;
811096d0:	00002806 	br	81109774 <vParserCommTask+0x540>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
811096d4:	d0a04e17 	ldw	r2,-32456(gp)
811096d8:	100f883a 	mov	r7,r2
811096dc:	018003c4 	movi	r6,15
811096e0:	01400044 	movi	r5,1
811096e4:	01204534 	movhi	r4,33044
811096e8:	21332304 	addi	r4,r4,-13172
811096ec:	11121200 	call	81112120 <fwrite>
								#endif


								break;
811096f0:	00002006 	br	81109774 <vParserCommTask+0x540>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
811096f4:	d0a04e17 	ldw	r2,-32456(gp)
811096f8:	100f883a 	mov	r7,r2
811096fc:	01800304 	movi	r6,12
81109700:	01400044 	movi	r5,1
81109704:	01204534 	movhi	r4,33044
81109708:	21332704 	addi	r4,r4,-13156
8110970c:	11121200 	call	81112120 <fwrite>
								#endif


								break;
81109710:	00001806 	br	81109774 <vParserCommTask+0x540>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109714:	e0bfdf04 	addi	r2,fp,-132
81109718:	01802004 	movi	r6,128
8110971c:	000b883a 	mov	r5,zero
81109720:	1009883a 	mov	r4,r2
81109724:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109728:	e13fc60b 	ldhu	r4,-232(fp)
8110972c:	e17fc68b 	ldhu	r5,-230(fp)
81109730:	e0bfc70b 	ldhu	r2,-228(fp)
81109734:	e0ffdf04 	addi	r3,fp,-132
81109738:	d8800015 	stw	r2,0(sp)
8110973c:	280f883a 	mov	r7,r5
81109740:	200d883a 	mov	r6,r4
81109744:	01604534 	movhi	r5,33044
81109748:	29730f04 	addi	r5,r5,-13252
8110974c:	1809883a 	mov	r4,r3
81109750:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109754:	d0a04e17 	ldw	r2,-32456(gp)
81109758:	e0ffdf04 	addi	r3,fp,-132
8110975c:	180b883a 	mov	r5,r3
81109760:	1009883a 	mov	r4,r2
81109764:	1111b340 	call	81111b34 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109768:	00800084 	movi	r2,2
8110976c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109770:	0001883a 	nop
						}
                        break;
81109774:	00014906 	br	81109c9c <vParserCommTask+0xa68>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109778:	00a04534 	movhi	r2,33044
8110977c:	10836104 	addi	r2,r2,3460
81109780:	1080050b 	ldhu	r2,20(r2)
81109784:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
81109788:	e0bfc68b 	ldhu	r2,-230(fp)
8110978c:	10c000a0 	cmpeqi	r3,r2,2
81109790:	1800161e 	bne	r3,zero,811097ec <vParserCommTask+0x5b8>
81109794:	10c000e0 	cmpeqi	r3,r2,3
81109798:	1800261e 	bne	r3,zero,81109834 <vParserCommTask+0x600>
8110979c:	10800060 	cmpeqi	r2,r2,1
811097a0:	10003626 	beq	r2,zero,8110987c <vParserCommTask+0x648>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811097a4:	e0bfdf04 	addi	r2,fp,-132
811097a8:	01802004 	movi	r6,128
811097ac:	000b883a 	mov	r5,zero
811097b0:	1009883a 	mov	r4,r2
811097b4:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
811097b8:	e0ffca0b 	ldhu	r3,-216(fp)
811097bc:	e0bfdf04 	addi	r2,fp,-132
811097c0:	180d883a 	mov	r6,r3
811097c4:	01604534 	movhi	r5,33044
811097c8:	29732b04 	addi	r5,r5,-13140
811097cc:	1009883a 	mov	r4,r2
811097d0:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
811097d4:	d0a04e17 	ldw	r2,-32456(gp)
811097d8:	e0ffdf04 	addi	r3,fp,-132
811097dc:	180b883a 	mov	r5,r3
811097e0:	1009883a 	mov	r4,r2
811097e4:	1111b340 	call	81111b34 <fprintf>
								#endif							


								break;
811097e8:	00003c06 	br	811098dc <vParserCommTask+0x6a8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811097ec:	e0bfdf04 	addi	r2,fp,-132
811097f0:	01802004 	movi	r6,128
811097f4:	000b883a 	mov	r5,zero
811097f8:	1009883a 	mov	r4,r2
811097fc:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109800:	e0ffca0b 	ldhu	r3,-216(fp)
81109804:	e0bfdf04 	addi	r2,fp,-132
81109808:	180d883a 	mov	r6,r3
8110980c:	01604534 	movhi	r5,33044
81109810:	29733704 	addi	r5,r5,-13092
81109814:	1009883a 	mov	r4,r2
81109818:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
8110981c:	d0a04e17 	ldw	r2,-32456(gp)
81109820:	e0ffdf04 	addi	r3,fp,-132
81109824:	180b883a 	mov	r5,r3
81109828:	1009883a 	mov	r4,r2
8110982c:	1111b340 	call	81111b34 <fprintf>
								#endif


								break;
81109830:	00002a06 	br	811098dc <vParserCommTask+0x6a8>
							case 3: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109834:	e0bfdf04 	addi	r2,fp,-132
81109838:	01802004 	movi	r6,128
8110983c:	000b883a 	mov	r5,zero
81109840:	1009883a 	mov	r4,r2
81109844:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109848:	e0ffca0b 	ldhu	r3,-216(fp)
8110984c:	e0bfdf04 	addi	r2,fp,-132
81109850:	180d883a 	mov	r6,r3
81109854:	01604534 	movhi	r5,33044
81109858:	29734304 	addi	r5,r5,-13044
8110985c:	1009883a 	mov	r4,r2
81109860:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109864:	d0a04e17 	ldw	r2,-32456(gp)
81109868:	e0ffdf04 	addi	r3,fp,-132
8110986c:	180b883a 	mov	r5,r3
81109870:	1009883a 	mov	r4,r2
81109874:	1111b340 	call	81111b34 <fprintf>
								#endif


								break;
81109878:	00001806 	br	811098dc <vParserCommTask+0x6a8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110987c:	e0bfdf04 	addi	r2,fp,-132
81109880:	01802004 	movi	r6,128
81109884:	000b883a 	mov	r5,zero
81109888:	1009883a 	mov	r4,r2
8110988c:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109890:	e13fc60b 	ldhu	r4,-232(fp)
81109894:	e17fc68b 	ldhu	r5,-230(fp)
81109898:	e0bfc70b 	ldhu	r2,-228(fp)
8110989c:	e0ffdf04 	addi	r3,fp,-132
811098a0:	d8800015 	stw	r2,0(sp)
811098a4:	280f883a 	mov	r7,r5
811098a8:	200d883a 	mov	r6,r4
811098ac:	01604534 	movhi	r5,33044
811098b0:	29730f04 	addi	r5,r5,-13252
811098b4:	1809883a 	mov	r4,r3
811098b8:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
811098bc:	d0a04e17 	ldw	r2,-32456(gp)
811098c0:	e0ffdf04 	addi	r3,fp,-132
811098c4:	180b883a 	mov	r5,r3
811098c8:	1009883a 	mov	r4,r2
811098cc:	1111b340 	call	81111b34 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
811098d0:	00800084 	movi	r2,2
811098d4:	e0bfc815 	stw	r2,-224(fp)
								break;
811098d8:	0001883a 	nop
						}
                        break;
811098dc:	0000ef06 	br	81109c9c <vParserCommTask+0xa68>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
811098e0:	00a04534 	movhi	r2,33044
811098e4:	10836104 	addi	r2,r2,3460
811098e8:	1080050b 	ldhu	r2,20(r2)
811098ec:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
811098f0:	e0bfc68b 	ldhu	r2,-230(fp)
811098f4:	10c000e0 	cmpeqi	r3,r2,3
811098f8:	18000a1e 	bne	r3,zero,81109924 <vParserCommTask+0x6f0>
811098fc:	10c00108 	cmpgei	r3,r2,4
81109900:	1800031e 	bne	r3,zero,81109910 <vParserCommTask+0x6dc>
81109904:	108000a0 	cmpeqi	r2,r2,2
81109908:	10003c1e 	bne	r2,zero,811099fc <vParserCommTask+0x7c8>
8110990c:	0000c706 	br	81109c2c <vParserCommTask+0x9f8>
81109910:	10c00120 	cmpeqi	r3,r2,4
81109914:	1800151e 	bne	r3,zero,8110996c <vParserCommTask+0x738>
81109918:	10800160 	cmpeqi	r2,r2,5
8110991c:	1000251e 	bne	r2,zero,811099b4 <vParserCommTask+0x780>
81109920:	0000c206 	br	81109c2c <vParserCommTask+0x9f8>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109924:	e0bfdf04 	addi	r2,fp,-132
81109928:	01802004 	movi	r6,128
8110992c:	000b883a 	mov	r5,zero
81109930:	1009883a 	mov	r4,r2
81109934:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109938:	e0ffca0b 	ldhu	r3,-216(fp)
8110993c:	e0bfdf04 	addi	r2,fp,-132
81109940:	180d883a 	mov	r6,r3
81109944:	01604534 	movhi	r5,33044
81109948:	29735004 	addi	r5,r5,-12992
8110994c:	1009883a 	mov	r4,r2
81109950:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109954:	d0a04e17 	ldw	r2,-32456(gp)
81109958:	e0ffdf04 	addi	r3,fp,-132
8110995c:	180b883a 	mov	r5,r3
81109960:	1009883a 	mov	r4,r2
81109964:	1111b340 	call	81111b34 <fprintf>
								#endif


								break;
81109968:	0000c806 	br	81109c8c <vParserCommTask+0xa58>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110996c:	e0bfdf04 	addi	r2,fp,-132
81109970:	01802004 	movi	r6,128
81109974:	000b883a 	mov	r5,zero
81109978:	1009883a 	mov	r4,r2
8110997c:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109980:	e0ffca0b 	ldhu	r3,-216(fp)
81109984:	e0bfdf04 	addi	r2,fp,-132
81109988:	180d883a 	mov	r6,r3
8110998c:	01604534 	movhi	r5,33044
81109990:	29735d04 	addi	r5,r5,-12940
81109994:	1009883a 	mov	r4,r2
81109998:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
8110999c:	d0a04e17 	ldw	r2,-32456(gp)
811099a0:	e0ffdf04 	addi	r3,fp,-132
811099a4:	180b883a 	mov	r5,r3
811099a8:	1009883a 	mov	r4,r2
811099ac:	1111b340 	call	81111b34 <fprintf>
								#endif


								break;
811099b0:	0000b606 	br	81109c8c <vParserCommTask+0xa58>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099b4:	e0bfdf04 	addi	r2,fp,-132
811099b8:	01802004 	movi	r6,128
811099bc:	000b883a 	mov	r5,zero
811099c0:	1009883a 	mov	r4,r2
811099c4:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
811099c8:	e0ffca0b 	ldhu	r3,-216(fp)
811099cc:	e0bfdf04 	addi	r2,fp,-132
811099d0:	180d883a 	mov	r6,r3
811099d4:	01604534 	movhi	r5,33044
811099d8:	29736a04 	addi	r5,r5,-12888
811099dc:	1009883a 	mov	r4,r2
811099e0:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
811099e4:	d0a04e17 	ldw	r2,-32456(gp)
811099e8:	e0ffdf04 	addi	r3,fp,-132
811099ec:	180b883a 	mov	r5,r3
811099f0:	1009883a 	mov	r4,r2
811099f4:	1111b340 	call	81111b34 <fprintf>
								#endif


								break;
811099f8:	0000a406 	br	81109c8c <vParserCommTask+0xa58>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099fc:	e0bfdf04 	addi	r2,fp,-132
81109a00:	01802004 	movi	r6,128
81109a04:	000b883a 	mov	r5,zero
81109a08:	1009883a 	mov	r4,r2
81109a0c:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
81109a10:	e0bfdf04 	addi	r2,fp,-132
81109a14:	00d4d7f4 	movhi	r3,21343
81109a18:	18d0d504 	addi	r3,r3,17236
81109a1c:	10c00015 	stw	r3,0(r2)
81109a20:	00d7d374 	movhi	r3,24397
81109a24:	18d050c4 	addi	r3,r3,16707
81109a28:	10c00115 	stw	r3,4(r2)
81109a2c:	00d7d5f4 	movhi	r3,24407
81109a30:	18d414c4 	addi	r3,r3,20563
81109a34:	10c00215 	stw	r3,8(r2)
81109a38:	00d41074 	movhi	r3,20545
81109a3c:	18d35484 	addi	r3,r3,19794
81109a40:	10c00315 	stw	r3,12(r2)
81109a44:	00d393f4 	movhi	r3,20047
81109a48:	18d0d7c4 	addi	r3,r3,17247
81109a4c:	10c00415 	stw	r3,16(r2)
81109a50:	00d7d1f4 	movhi	r3,24391
81109a54:	18d25184 	addi	r3,r3,18758
81109a58:	10c00515 	stw	r3,20(r2)
81109a5c:	00d05134 	movhi	r3,16708
81109a60:	18d41544 	addi	r3,r3,20565
81109a64:	10c00615 	stw	r3,24(r2)
81109a68:	00cf8b74 	movhi	r3,15917
81109a6c:	18d15504 	addi	r3,r3,17748
81109a70:	10c00715 	stw	r3,28(r2)
81109a74:	00c00284 	movi	r3,10
81109a78:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
81109a7c:	d0a04e17 	ldw	r2,-32456(gp)
81109a80:	e0ffdf04 	addi	r3,fp,-132
81109a84:	180b883a 	mov	r5,r3
81109a88:	1009883a 	mov	r4,r2
81109a8c:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109a90:	e0ffca0b 	ldhu	r3,-216(fp)
81109a94:	e0bfdf04 	addi	r2,fp,-132
81109a98:	180d883a 	mov	r6,r3
81109a9c:	01604534 	movhi	r5,33044
81109aa0:	29737604 	addi	r5,r5,-12840
81109aa4:	1009883a 	mov	r4,r2
81109aa8:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109aac:	d0a04e17 	ldw	r2,-32456(gp)
81109ab0:	e0ffdf04 	addi	r3,fp,-132
81109ab4:	180b883a 	mov	r5,r3
81109ab8:	1009883a 	mov	r4,r2
81109abc:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
81109ac0:	00a04534 	movhi	r2,33044
81109ac4:	10836104 	addi	r2,r2,3460
81109ac8:	1080058b 	ldhu	r2,22(r2)
81109acc:	10ffffcc 	andi	r3,r2,65535
81109ad0:	e0bfdf04 	addi	r2,fp,-132
81109ad4:	180d883a 	mov	r6,r3
81109ad8:	01604534 	movhi	r5,33044
81109adc:	29737d04 	addi	r5,r5,-12812
81109ae0:	1009883a 	mov	r4,r2
81109ae4:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109ae8:	d0a04e17 	ldw	r2,-32456(gp)
81109aec:	e0ffdf04 	addi	r3,fp,-132
81109af0:	180b883a 	mov	r5,r3
81109af4:	1009883a 	mov	r4,r2
81109af8:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
81109afc:	00a04534 	movhi	r2,33044
81109b00:	10836104 	addi	r2,r2,3460
81109b04:	1080060b 	ldhu	r2,24(r2)
81109b08:	10ffffcc 	andi	r3,r2,65535
81109b0c:	e0bfdf04 	addi	r2,fp,-132
81109b10:	180d883a 	mov	r6,r3
81109b14:	01604534 	movhi	r5,33044
81109b18:	29738104 	addi	r5,r5,-12796
81109b1c:	1009883a 	mov	r4,r2
81109b20:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109b24:	d0a04e17 	ldw	r2,-32456(gp)
81109b28:	e0ffdf04 	addi	r3,fp,-132
81109b2c:	180b883a 	mov	r5,r3
81109b30:	1009883a 	mov	r4,r2
81109b34:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
81109b38:	00a04534 	movhi	r2,33044
81109b3c:	10836104 	addi	r2,r2,3460
81109b40:	1080068b 	ldhu	r2,26(r2)
81109b44:	10ffffcc 	andi	r3,r2,65535
81109b48:	e0bfdf04 	addi	r2,fp,-132
81109b4c:	180d883a 	mov	r6,r3
81109b50:	01604534 	movhi	r5,33044
81109b54:	29738604 	addi	r5,r5,-12776
81109b58:	1009883a 	mov	r4,r2
81109b5c:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109b60:	d0a04e17 	ldw	r2,-32456(gp)
81109b64:	e0ffdf04 	addi	r3,fp,-132
81109b68:	180b883a 	mov	r5,r3
81109b6c:	1009883a 	mov	r4,r2
81109b70:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
81109b74:	00a04534 	movhi	r2,33044
81109b78:	10836104 	addi	r2,r2,3460
81109b7c:	1080070b 	ldhu	r2,28(r2)
81109b80:	10ffffcc 	andi	r3,r2,65535
81109b84:	e0bfdf04 	addi	r2,fp,-132
81109b88:	180d883a 	mov	r6,r3
81109b8c:	01604534 	movhi	r5,33044
81109b90:	29738d04 	addi	r5,r5,-12748
81109b94:	1009883a 	mov	r4,r2
81109b98:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109b9c:	d0a04e17 	ldw	r2,-32456(gp)
81109ba0:	e0ffdf04 	addi	r3,fp,-132
81109ba4:	180b883a 	mov	r5,r3
81109ba8:	1009883a 	mov	r4,r2
81109bac:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
81109bb0:	00a04534 	movhi	r2,33044
81109bb4:	10836104 	addi	r2,r2,3460
81109bb8:	1080078b 	ldhu	r2,30(r2)
81109bbc:	10ffffcc 	andi	r3,r2,65535
81109bc0:	e0bfdf04 	addi	r2,fp,-132
81109bc4:	180d883a 	mov	r6,r3
81109bc8:	01604534 	movhi	r5,33044
81109bcc:	29739404 	addi	r5,r5,-12720
81109bd0:	1009883a 	mov	r4,r2
81109bd4:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109bd8:	d0a04e17 	ldw	r2,-32456(gp)
81109bdc:	e0ffdf04 	addi	r3,fp,-132
81109be0:	180b883a 	mov	r5,r3
81109be4:	1009883a 	mov	r4,r2
81109be8:	1111b340 	call	81111b34 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
81109bec:	00a04534 	movhi	r2,33044
81109bf0:	10836104 	addi	r2,r2,3460
81109bf4:	1080080b 	ldhu	r2,32(r2)
81109bf8:	10ffffcc 	andi	r3,r2,65535
81109bfc:	e0bfdf04 	addi	r2,fp,-132
81109c00:	180d883a 	mov	r6,r3
81109c04:	01604534 	movhi	r5,33044
81109c08:	29739a04 	addi	r5,r5,-12696
81109c0c:	1009883a 	mov	r4,r2
81109c10:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109c14:	d0a04e17 	ldw	r2,-32456(gp)
81109c18:	e0ffdf04 	addi	r3,fp,-132
81109c1c:	180b883a 	mov	r5,r3
81109c20:	1009883a 	mov	r4,r2
81109c24:	1111b340 	call	81111b34 <fprintf>
								#endif



								break;
81109c28:	00001806 	br	81109c8c <vParserCommTask+0xa58>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109c2c:	e0bfdf04 	addi	r2,fp,-132
81109c30:	01802004 	movi	r6,128
81109c34:	000b883a 	mov	r5,zero
81109c38:	1009883a 	mov	r4,r2
81109c3c:	1112c840 	call	81112c84 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109c40:	e13fc60b 	ldhu	r4,-232(fp)
81109c44:	e17fc68b 	ldhu	r5,-230(fp)
81109c48:	e0bfc70b 	ldhu	r2,-228(fp)
81109c4c:	e0ffdf04 	addi	r3,fp,-132
81109c50:	d8800015 	stw	r2,0(sp)
81109c54:	280f883a 	mov	r7,r5
81109c58:	200d883a 	mov	r6,r4
81109c5c:	01604534 	movhi	r5,33044
81109c60:	29730f04 	addi	r5,r5,-13252
81109c64:	1809883a 	mov	r4,r3
81109c68:	111329c0 	call	8111329c <sprintf>
									debug(fp, cPUSDebug );
81109c6c:	d0a04e17 	ldw	r2,-32456(gp)
81109c70:	e0ffdf04 	addi	r3,fp,-132
81109c74:	180b883a 	mov	r5,r3
81109c78:	1009883a 	mov	r4,r2
81109c7c:	1111b340 	call	81111b34 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109c80:	00800084 	movi	r2,2
81109c84:	e0bfc815 	stw	r2,-224(fp)
								break;
81109c88:	0001883a 	nop
						}
                        break;
81109c8c:	00000306 	br	81109c9c <vParserCommTask+0xa68>
                    default:
						eParserMode = sWaitingMessage;
81109c90:	00800084 	movi	r2,2
81109c94:	e0bfc815 	stw	r2,-224(fp)
                        break;
81109c98:	0001883a 	nop
                }
				break;				
81109c9c:	00000406 	br	81109cb0 <vParserCommTask+0xa7c>
			default:
				eParserMode = sWaitingMessage;
81109ca0:	00800084 	movi	r2,2
81109ca4:	e0bfc815 	stw	r2,-224(fp)
				break;
81109ca8:	00000106 	br	81109cb0 <vParserCommTask+0xa7c>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109cac:	0001883a 	nop
				break;				
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
81109cb0:	003d7006 	br	81109274 <__reset+0xfb0e9274>

81109cb4 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109cb4:	defffb04 	addi	sp,sp,-20
81109cb8:	de00012e 	bgeu	sp,et,81109cc0 <getPreParsedPacket+0xc>
81109cbc:	003b68fa 	trap	3
81109cc0:	dfc00415 	stw	ra,16(sp)
81109cc4:	df000315 	stw	fp,12(sp)
81109cc8:	df000304 	addi	fp,sp,12
81109ccc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109cd0:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
81109cd4:	d0a05517 	ldw	r2,-32428(gp)
81109cd8:	e0fffe44 	addi	r3,fp,-7
81109cdc:	180d883a 	mov	r6,r3
81109ce0:	000b883a 	mov	r5,zero
81109ce4:	1009883a 	mov	r4,r2
81109ce8:	112ce6c0 	call	8112ce6c <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
81109cec:	e0bffe43 	ldbu	r2,-7(fp)
81109cf0:	10803fcc 	andi	r2,r2,255
81109cf4:	10002e1e 	bne	r2,zero,81109db0 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109cf8:	e03ffe05 	stb	zero,-8(fp)
81109cfc:	00002506 	br	81109d94 <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
81109d00:	e0fffe03 	ldbu	r3,-8(fp)
81109d04:	00a04574 	movhi	r2,33045
81109d08:	10bec504 	addi	r2,r2,-1260
81109d0c:	18c01324 	muli	r3,r3,76
81109d10:	10c5883a 	add	r2,r2,r3
81109d14:	10800104 	addi	r2,r2,4
81109d18:	10800003 	ldbu	r2,0(r2)
81109d1c:	10803fcc 	andi	r2,r2,255
81109d20:	1080201c 	xori	r2,r2,128
81109d24:	10bfe004 	addi	r2,r2,-128
81109d28:	10001726 	beq	r2,zero,81109d88 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109d2c:	e0fffe03 	ldbu	r3,-8(fp)
81109d30:	e13fff17 	ldw	r4,-4(fp)
81109d34:	00a04574 	movhi	r2,33045
81109d38:	10bec504 	addi	r2,r2,-1260
81109d3c:	18c01324 	muli	r3,r3,76
81109d40:	10c5883a 	add	r2,r2,r3
81109d44:	2007883a 	mov	r3,r4
81109d48:	1009883a 	mov	r4,r2
81109d4c:	00801304 	movi	r2,76
81109d50:	100d883a 	mov	r6,r2
81109d54:	200b883a 	mov	r5,r4
81109d58:	1809883a 	mov	r4,r3
81109d5c:	1112b340 	call	81112b34 <memcpy>
                bSuccess = TRUE;
81109d60:	00800044 	movi	r2,1
81109d64:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81109d68:	e0fffe03 	ldbu	r3,-8(fp)
81109d6c:	00a04574 	movhi	r2,33045
81109d70:	10bec504 	addi	r2,r2,-1260
81109d74:	18c01324 	muli	r3,r3,76
81109d78:	10c5883a 	add	r2,r2,r3
81109d7c:	10800104 	addi	r2,r2,4
81109d80:	10000005 	stb	zero,0(r2)
                break;
81109d84:	00000606 	br	81109da0 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109d88:	e0bffe03 	ldbu	r2,-8(fp)
81109d8c:	10800044 	addi	r2,r2,1
81109d90:	e0bffe05 	stb	r2,-8(fp)
81109d94:	e0bffe03 	ldbu	r2,-8(fp)
81109d98:	10800130 	cmpltui	r2,r2,4
81109d9c:	103fd81e 	bne	r2,zero,81109d00 <__reset+0xfb0e9d00>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
81109da0:	d0a05517 	ldw	r2,-32428(gp)
81109da4:	1009883a 	mov	r4,r2
81109da8:	112d4100 	call	8112d410 <OSMutexPost>
81109dac:	00000106 	br	81109db4 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
81109db0:	110e8b40 	call	8110e8b4 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81109db4:	e0bffd17 	ldw	r2,-12(fp)
}
81109db8:	e037883a 	mov	sp,fp
81109dbc:	dfc00117 	ldw	ra,4(sp)
81109dc0:	df000017 	ldw	fp,0(sp)
81109dc4:	dec00204 	addi	sp,sp,8
81109dc8:	f800283a 	ret

81109dcc <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
81109dcc:	defffc04 	addi	sp,sp,-16
81109dd0:	de00012e 	bgeu	sp,et,81109dd8 <bTrySendSemaphoreCommInit+0xc>
81109dd4:	003b68fa 	trap	3
81109dd8:	dfc00315 	stw	ra,12(sp)
81109ddc:	df000215 	stw	fp,8(sp)
81109de0:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
81109de4:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
81109de8:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
81109dec:	d0a04e17 	ldw	r2,-32456(gp)
81109df0:	100f883a 	mov	r7,r2
81109df4:	01800e84 	movi	r6,58
81109df8:	01400044 	movi	r5,1
81109dfc:	01204534 	movhi	r4,33044
81109e00:	2133a004 	addi	r4,r4,-12672
81109e04:	11121200 	call	81112120 <fwrite>
	#endif

	ucCountRetries = 0;
81109e08:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
81109e0c:	e0bfff03 	ldbu	r2,-4(fp)
81109e10:	10800044 	addi	r2,r2,1
81109e14:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
81109e18:	01000c84 	movi	r4,50
81109e1c:	1130d040 	call	81130d04 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
81109e20:	d0a04c17 	ldw	r2,-32464(gp)
81109e24:	1009883a 	mov	r4,r2
81109e28:	112f2000 	call	8112f200 <OSSemPost>
81109e2c:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
81109e30:	e0bfff43 	ldbu	r2,-3(fp)
81109e34:	10000326 	beq	r2,zero,81109e44 <bTrySendSemaphoreCommInit+0x78>
81109e38:	e0bfff03 	ldbu	r2,-4(fp)
81109e3c:	108002f0 	cmpltui	r2,r2,11
81109e40:	103ff21e 	bne	r2,zero,81109e0c <__reset+0xfb0e9e0c>

	if ( error_code == OS_ERR_NONE ) {
81109e44:	e0bfff43 	ldbu	r2,-3(fp)
81109e48:	1000021e 	bne	r2,zero,81109e54 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81109e4c:	00800044 	movi	r2,1
81109e50:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81109e54:	e0bffe17 	ldw	r2,-8(fp)
}
81109e58:	e037883a 	mov	sp,fp
81109e5c:	dfc00117 	ldw	ra,4(sp)
81109e60:	df000017 	ldw	fp,0(sp)
81109e64:	dec00204 	addi	sp,sp,8
81109e68:	f800283a 	ret

81109e6c <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81109e6c:	deffeb04 	addi	sp,sp,-84
81109e70:	de00012e 	bgeu	sp,et,81109e78 <vReceiverUartTask+0xc>
81109e74:	003b68fa 	trap	3
81109e78:	dfc01415 	stw	ra,80(sp)
81109e7c:	df001315 	stw	fp,76(sp)
81109e80:	df001304 	addi	fp,sp,76
81109e84:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109e88:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81109e8c:	d0a04e17 	ldw	r2,-32456(gp)
81109e90:	100f883a 	mov	r7,r2
81109e94:	018006c4 	movi	r6,27
81109e98:	01400044 	movi	r5,1
81109e9c:	01204534 	movhi	r4,33044
81109ea0:	2133af04 	addi	r4,r4,-12612
81109ea4:	11121200 	call	81112120 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81109ea8:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81109eac:	e0bfed17 	ldw	r2,-76(fp)
81109eb0:	10c00060 	cmpeqi	r3,r2,1
81109eb4:	1800091e 	bne	r3,zero,81109edc <vReceiverUartTask+0x70>
81109eb8:	0080052e 	bgeu	zero,r2,81109ed0 <vReceiverUartTask+0x64>
81109ebc:	10c000a0 	cmpeqi	r3,r2,2
81109ec0:	1800451e 	bne	r3,zero,81109fd8 <vReceiverUartTask+0x16c>
81109ec4:	108000e0 	cmpeqi	r2,r2,3
81109ec8:	1000561e 	bne	r2,zero,8110a024 <vReceiverUartTask+0x1b8>
81109ecc:	00005f06 	br	8110a04c <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
81109ed0:	00800044 	movi	r2,1
81109ed4:	e0bfed15 	stw	r2,-76(fp)
                break;
81109ed8:	00005f06 	br	8110a058 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81109edc:	e0bfef04 	addi	r2,fp,-68
81109ee0:	01801004 	movi	r6,64
81109ee4:	000b883a 	mov	r5,zero
81109ee8:	1009883a 	mov	r4,r2
81109eec:	1112c840 	call	81112c84 <memset>
                scanf("%s", cReceiveBuffer);
81109ef0:	e0bfef04 	addi	r2,fp,-68
81109ef4:	100b883a 	mov	r5,r2
81109ef8:	01204534 	movhi	r4,33044
81109efc:	2133b604 	addi	r4,r4,-12584
81109f00:	11131c00 	call	811131c0 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
81109f04:	e0bfef04 	addi	r2,fp,-68
81109f08:	01604534 	movhi	r5,33044
81109f0c:	29437404 	addi	r5,r5,3536
81109f10:	1009883a 	mov	r4,r2
81109f14:	110a05c0 	call	8110a05c <bPreParser>
81109f18:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
81109f1c:	e0bfee17 	ldw	r2,-72(fp)
81109f20:	10800058 	cmpnei	r2,r2,1
81109f24:	1000161e 	bne	r2,zero,81109f80 <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
81109f28:	00a04534 	movhi	r2,33044
81109f2c:	10837404 	addi	r2,r2,3536
81109f30:	10800103 	ldbu	r2,4(r2)
81109f34:	10803fcc 	andi	r2,r2,255
81109f38:	1080201c 	xori	r2,r2,128
81109f3c:	10bfe004 	addi	r2,r2,-128
81109f40:	10800fe0 	cmpeqi	r2,r2,63
81109f44:	1000081e 	bne	r2,zero,81109f68 <vReceiverUartTask+0xfc>
81109f48:	00a04534 	movhi	r2,33044
81109f4c:	10837404 	addi	r2,r2,3536
81109f50:	10800103 	ldbu	r2,4(r2)
81109f54:	10803fcc 	andi	r2,r2,255
81109f58:	1080201c 	xori	r2,r2,128
81109f5c:	10bfe004 	addi	r2,r2,-128
81109f60:	10800858 	cmpnei	r2,r2,33
81109f64:	1000031e 	bne	r2,zero,81109f74 <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81109f68:	00800084 	movi	r2,2
81109f6c:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f70:	00003906 	br	8110a058 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81109f74:	008000c4 	movi	r2,3
81109f78:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f7c:	00003606 	br	8110a058 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
81109f80:	00a04534 	movhi	r2,33044
81109f84:	10837404 	addi	r2,r2,3536
81109f88:	00c008c4 	movi	r3,35
81109f8c:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
81109f90:	00a04534 	movhi	r2,33044
81109f94:	10837404 	addi	r2,r2,3536
81109f98:	00c00a44 	movi	r3,41
81109f9c:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
81109fa0:	00a04534 	movhi	r2,33044
81109fa4:	10837404 	addi	r2,r2,3536
81109fa8:	00c00044 	movi	r3,1
81109fac:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109fb0:	01204534 	movhi	r4,33044
81109fb4:	21037404 	addi	r4,r4,3536
81109fb8:	110a5d00 	call	8110a5d0 <setPreAckSenderFreePos>
81109fbc:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81109fc0:	e0bfee17 	ldw	r2,-72(fp)
81109fc4:	1000011e 	bne	r2,zero,81109fcc <vReceiverUartTask+0x160>
                        vFailSendNack();
81109fc8:	110e9ec0 	call	8110e9ec <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
81109fcc:	00800044 	movi	r2,1
81109fd0:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
81109fd4:	00002006 	br	8110a058 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109fd8:	01204534 	movhi	r4,33044
81109fdc:	21037404 	addi	r4,r4,3536
81109fe0:	110a5d00 	call	8110a5d0 <setPreAckSenderFreePos>
81109fe4:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
81109fe8:	e0bfee17 	ldw	r2,-72(fp)
81109fec:	10800058 	cmpnei	r2,r2,1
81109ff0:	1000081e 	bne	r2,zero,8110a014 <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
81109ff4:	01204534 	movhi	r4,33044
81109ff8:	21037404 	addi	r4,r4,3536
81109ffc:	110a46c0 	call	8110a46c <setPreParsedFreePos>
8110a000:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
8110a004:	e0bfee17 	ldw	r2,-72(fp)
8110a008:	1000031e 	bne	r2,zero,8110a018 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110a00c:	110eabc0 	call	8110eabc <vFailSetPreParsedBuffer>
8110a010:	00000106 	br	8110a018 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110a014:	110ea540 	call	8110ea54 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110a018:	00800044 	movi	r2,1
8110a01c:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a020:	00000d06 	br	8110a058 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110a024:	01204534 	movhi	r4,33044
8110a028:	21037404 	addi	r4,r4,3536
8110a02c:	110a7780 	call	8110a778 <setPreAckReceiverFreePos>
8110a030:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
8110a034:	e0bfee17 	ldw	r2,-72(fp)
8110a038:	1000011e 	bne	r2,zero,8110a040 <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110a03c:	110eb240 	call	8110eb24 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110a040:	00800044 	movi	r2,1
8110a044:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a048:	00000306 	br	8110a058 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
8110a04c:	00800044 	movi	r2,1
8110a050:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a054:	0001883a 	nop
        }

    }
8110a058:	003f9406 	br	81109eac <__reset+0xfb0e9eac>

8110a05c <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110a05c:	defff204 	addi	sp,sp,-56
8110a060:	de00012e 	bgeu	sp,et,8110a068 <bPreParser+0xc>
8110a064:	003b68fa 	trap	3
8110a068:	dfc00d15 	stw	ra,52(sp)
8110a06c:	df000c15 	stw	fp,48(sp)
8110a070:	dc000b15 	stw	r16,44(sp)
8110a074:	df000c04 	addi	fp,sp,48
8110a078:	e13ffd15 	stw	r4,-12(fp)
8110a07c:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110a080:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
8110a084:	e13ffd17 	ldw	r4,-12(fp)
8110a088:	11134b00 	call	811134b0 <strlen>
8110a08c:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110a090:	01400ec4 	movi	r5,59
8110a094:	e13ffd17 	ldw	r4,-12(fp)
8110a098:	110ce400 	call	8110ce40 <siPosStr>
8110a09c:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
8110a0a0:	01401004 	movi	r5,64
8110a0a4:	e13ffd17 	ldw	r4,-12(fp)
8110a0a8:	110ce400 	call	8110ce40 <siPosStr>
8110a0ac:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
8110a0b0:	014008c4 	movi	r5,35
8110a0b4:	e13ffd17 	ldw	r4,-12(fp)
8110a0b8:	110ce400 	call	8110ce40 <siPosStr>
8110a0bc:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
8110a0c0:	e17ff80b 	ldhu	r5,-32(fp)
8110a0c4:	e0bff88b 	ldhu	r2,-30(fp)
8110a0c8:	10ffffcc 	andi	r3,r2,65535
8110a0cc:	18e0001c 	xori	r3,r3,32768
8110a0d0:	18e00004 	addi	r3,r3,-32768
8110a0d4:	293fffcc 	andi	r4,r5,65535
8110a0d8:	2120001c 	xori	r4,r4,32768
8110a0dc:	21200004 	addi	r4,r4,-32768
8110a0e0:	20c0010e 	bge	r4,r3,8110a0e8 <bPreParser+0x8c>
8110a0e4:	2805883a 	mov	r2,r5
8110a0e8:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
8110a0ec:	01400fc4 	movi	r5,63
8110a0f0:	e13ffd17 	ldw	r4,-12(fp)
8110a0f4:	110ce400 	call	8110ce40 <siPosStr>
8110a0f8:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
8110a0fc:	01400844 	movi	r5,33
8110a100:	e13ffd17 	ldw	r4,-12(fp)
8110a104:	110ce400 	call	8110ce40 <siPosStr>
8110a108:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
8110a10c:	e17ff90b 	ldhu	r5,-28(fp)
8110a110:	e0bff98b 	ldhu	r2,-26(fp)
8110a114:	10ffffcc 	andi	r3,r2,65535
8110a118:	18e0001c 	xori	r3,r3,32768
8110a11c:	18e00004 	addi	r3,r3,-32768
8110a120:	293fffcc 	andi	r4,r5,65535
8110a124:	2120001c 	xori	r4,r4,32768
8110a128:	21200004 	addi	r4,r4,-32768
8110a12c:	20c0010e 	bge	r4,r3,8110a134 <bPreParser+0xd8>
8110a130:	2805883a 	mov	r2,r5
8110a134:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
8110a138:	e17ff90b 	ldhu	r5,-28(fp)
8110a13c:	e0bff80b 	ldhu	r2,-32(fp)
8110a140:	10ffffcc 	andi	r3,r2,65535
8110a144:	18e0001c 	xori	r3,r3,32768
8110a148:	18e00004 	addi	r3,r3,-32768
8110a14c:	293fffcc 	andi	r4,r5,65535
8110a150:	2120001c 	xori	r4,r4,32768
8110a154:	21200004 	addi	r4,r4,-32768
8110a158:	20c0010e 	bge	r4,r3,8110a160 <bPreParser+0x104>
8110a15c:	2805883a 	mov	r2,r5
8110a160:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110a164:	01401f04 	movi	r5,124
8110a168:	e13ffd17 	ldw	r4,-12(fp)
8110a16c:	110ce400 	call	8110ce40 <siPosStr>
8110a170:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
8110a174:	e0fff78f 	ldh	r3,-34(fp)
8110a178:	e0bff70f 	ldh	r2,-36(fp)
8110a17c:	10bfffc4 	addi	r2,r2,-1
8110a180:	1880ac1e 	bne	r3,r2,8110a434 <bPreParser+0x3d8>
8110a184:	e0fffa0f 	ldh	r3,-24(fp)
8110a188:	e0bff78f 	ldh	r2,-34(fp)
8110a18c:	1880a90e 	bge	r3,r2,8110a434 <bPreParser+0x3d8>
8110a190:	e0fff90f 	ldh	r3,-28(fp)
8110a194:	e0bffa0f 	ldh	r2,-24(fp)
8110a198:	1880a60e 	bge	r3,r2,8110a434 <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
8110a19c:	e0bff90f 	ldh	r2,-28(fp)
8110a1a0:	e0fffd17 	ldw	r3,-12(fp)
8110a1a4:	1889883a 	add	r4,r3,r2
8110a1a8:	e0fffa0f 	ldh	r3,-24(fp)
8110a1ac:	e0bff90f 	ldh	r2,-28(fp)
8110a1b0:	1885c83a 	sub	r2,r3,r2
8110a1b4:	100b883a 	mov	r5,r2
8110a1b8:	110e0180 	call	8110e018 <ucCrc8wInit>
8110a1bc:	1007883a 	mov	r3,r2
8110a1c0:	e0bffe17 	ldw	r2,-8(fp)
8110a1c4:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
8110a1c8:	e0bff90f 	ldh	r2,-28(fp)
8110a1cc:	e0fffd17 	ldw	r3,-12(fp)
8110a1d0:	1885883a 	add	r2,r3,r2
8110a1d4:	10c00003 	ldbu	r3,0(r2)
8110a1d8:	e0bffe17 	ldw	r2,-8(fp)
8110a1dc:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a1e0:	e0bffe17 	ldw	r2,-8(fp)
8110a1e4:	10800103 	ldbu	r2,4(r2)
8110a1e8:	10803fcc 	andi	r2,r2,255
8110a1ec:	1080201c 	xori	r2,r2,128
8110a1f0:	10bfe004 	addi	r2,r2,-128
8110a1f4:	108008d8 	cmpnei	r2,r2,35
8110a1f8:	1000091e 	bne	r2,zero,8110a220 <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
8110a1fc:	e0bffe17 	ldw	r2,-8(fp)
8110a200:	00c00d84 	movi	r3,54
8110a204:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
8110a208:	e0bffe17 	ldw	r2,-8(fp)
8110a20c:	00c00d84 	movi	r3,54
8110a210:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
8110a214:	00800044 	movi	r2,1
8110a218:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a21c:	00008606 	br	8110a438 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
8110a220:	e0bff90f 	ldh	r2,-28(fp)
8110a224:	10800044 	addi	r2,r2,1
8110a228:	e0fffd17 	ldw	r3,-12(fp)
8110a22c:	1885883a 	add	r2,r3,r2
8110a230:	10c00003 	ldbu	r3,0(r2)
8110a234:	e0bffe17 	ldw	r2,-8(fp)
8110a238:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
8110a23c:	e0bffe17 	ldw	r2,-8(fp)
8110a240:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
8110a244:	e0bffe17 	ldw	r2,-8(fp)
8110a248:	10800204 	addi	r2,r2,8
8110a24c:	01800804 	movi	r6,32
8110a250:	000b883a 	mov	r5,zero
8110a254:	1009883a 	mov	r4,r2
8110a258:	1112c840 	call	81112c84 <memset>

            i = siIniReq + 3; /* "?C:i..." */
8110a25c:	e0bff90b 	ldhu	r2,-28(fp)
8110a260:	108000c4 	addi	r2,r2,3
8110a264:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
8110a268:	e0bffac4 	addi	r2,fp,-21
8110a26c:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110a270:	e0bffac4 	addi	r2,fp,-21
8110a274:	01800184 	movi	r6,6
8110a278:	000b883a 	mov	r5,zero
8110a27c:	1009883a 	mov	r4,r2
8110a280:	1112c840 	call	81112c84 <memset>
                do {
                    c = buffer[i];
8110a284:	e0bff503 	ldbu	r2,-44(fp)
8110a288:	e0fffd17 	ldw	r3,-12(fp)
8110a28c:	1885883a 	add	r2,r3,r2
8110a290:	10800003 	ldbu	r2,0(r2)
8110a294:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
8110a298:	d0e00317 	ldw	r3,-32756(gp)
8110a29c:	e0bffa87 	ldb	r2,-22(fp)
8110a2a0:	10800044 	addi	r2,r2,1
8110a2a4:	1885883a 	add	r2,r3,r2
8110a2a8:	10800003 	ldbu	r2,0(r2)
8110a2ac:	10803fcc 	andi	r2,r2,255
8110a2b0:	1080010c 	andi	r2,r2,4
8110a2b4:	10000626 	beq	r2,zero,8110a2d0 <bPreParser+0x274>
                        (*p_inteiro) = c;
8110a2b8:	e0bff617 	ldw	r2,-40(fp)
8110a2bc:	e0fffa83 	ldbu	r3,-22(fp)
8110a2c0:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
8110a2c4:	e0bff617 	ldw	r2,-40(fp)
8110a2c8:	10800044 	addi	r2,r2,1
8110a2cc:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
8110a2d0:	e0bff503 	ldbu	r2,-44(fp)
8110a2d4:	10800044 	addi	r2,r2,1
8110a2d8:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110a2dc:	e0bff70f 	ldh	r2,-36(fp)
8110a2e0:	e0fff503 	ldbu	r3,-44(fp)
8110a2e4:	1880090e 	bge	r3,r2,8110a30c <bPreParser+0x2b0>
8110a2e8:	e0bffa87 	ldb	r2,-22(fp)
8110a2ec:	10800ea0 	cmpeqi	r2,r2,58
8110a2f0:	1000061e 	bne	r2,zero,8110a30c <bPreParser+0x2b0>
8110a2f4:	e0bffa87 	ldb	r2,-22(fp)
8110a2f8:	10800ee0 	cmpeqi	r2,r2,59
8110a2fc:	1000031e 	bne	r2,zero,8110a30c <bPreParser+0x2b0>
8110a300:	e0bffa87 	ldb	r2,-22(fp)
8110a304:	10801f18 	cmpnei	r2,r2,124
8110a308:	103fde1e 	bne	r2,zero,8110a284 <__reset+0xfb0ea284>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a30c:	e0bff617 	ldw	r2,-40(fp)
8110a310:	00c00284 	movi	r3,10
8110a314:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110a318:	e0bffa87 	ldb	r2,-22(fp)
8110a31c:	10800ea0 	cmpeqi	r2,r2,58
8110a320:	1000031e 	bne	r2,zero,8110a330 <bPreParser+0x2d4>
8110a324:	e0bffa87 	ldb	r2,-22(fp)
8110a328:	10801f18 	cmpnei	r2,r2,124
8110a32c:	10001a1e 	bne	r2,zero,8110a398 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110a330:	e0bffe17 	ldw	r2,-8(fp)
8110a334:	10800183 	ldbu	r2,6(r2)
8110a338:	10803fcc 	andi	r2,r2,255
8110a33c:	10800828 	cmpgeui	r2,r2,32
8110a340:	1000041e 	bne	r2,zero,8110a354 <bPreParser+0x2f8>
8110a344:	e0bffe17 	ldw	r2,-8(fp)
8110a348:	10800183 	ldbu	r2,6(r2)
8110a34c:	14003fcc 	andi	r16,r2,255
8110a350:	00000106 	br	8110a358 <bPreParser+0x2fc>
8110a354:	04000804 	movi	r16,32
8110a358:	e0bffac4 	addi	r2,fp,-21
8110a35c:	1009883a 	mov	r4,r2
8110a360:	11119d80 	call	811119d8 <atoi>
8110a364:	1009883a 	mov	r4,r2
8110a368:	e0fffe17 	ldw	r3,-8(fp)
8110a36c:	80800104 	addi	r2,r16,4
8110a370:	1085883a 	add	r2,r2,r2
8110a374:	1885883a 	add	r2,r3,r2
8110a378:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
8110a37c:	e0bffe17 	ldw	r2,-8(fp)
8110a380:	10800183 	ldbu	r2,6(r2)
8110a384:	10800044 	addi	r2,r2,1
8110a388:	1007883a 	mov	r3,r2
8110a38c:	e0bffe17 	ldw	r2,-8(fp)
8110a390:	10c00185 	stb	r3,6(r2)
8110a394:	00000906 	br	8110a3bc <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
8110a398:	e0bffa87 	ldb	r2,-22(fp)
8110a39c:	10800ed8 	cmpnei	r2,r2,59
8110a3a0:	1000061e 	bne	r2,zero,8110a3bc <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110a3a4:	e0bffac4 	addi	r2,fp,-21
8110a3a8:	1009883a 	mov	r4,r2
8110a3ac:	11119d80 	call	811119d8 <atoi>
8110a3b0:	1007883a 	mov	r3,r2
8110a3b4:	e0bffe17 	ldw	r2,-8(fp)
8110a3b8:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110a3bc:	e0bffa87 	ldb	r2,-22(fp)
8110a3c0:	10800ee0 	cmpeqi	r2,r2,59
8110a3c4:	1000031e 	bne	r2,zero,8110a3d4 <bPreParser+0x378>
8110a3c8:	e0bff70f 	ldh	r2,-36(fp)
8110a3cc:	e0fff503 	ldbu	r3,-44(fp)
8110a3d0:	18bfa516 	blt	r3,r2,8110a268 <__reset+0xfb0ea268>

            if ( c == FINAL_CHAR )
8110a3d4:	e0bffa87 	ldb	r2,-22(fp)
8110a3d8:	10800ed8 	cmpnei	r2,r2,59
8110a3dc:	1000131e 	bne	r2,zero,8110a42c <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110a3e0:	e0bffe17 	ldw	r2,-8(fp)
8110a3e4:	10c01243 	ldbu	r3,73(r2)
8110a3e8:	e0bffe17 	ldw	r2,-8(fp)
8110a3ec:	10801203 	ldbu	r2,72(r2)
8110a3f0:	18c03fcc 	andi	r3,r3,255
8110a3f4:	10803fcc 	andi	r2,r2,255
8110a3f8:	1880031e 	bne	r3,r2,8110a408 <bPreParser+0x3ac>
                    bSuccess = TRUE;
8110a3fc:	00800044 	movi	r2,1
8110a400:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a404:	00000c06 	br	8110a438 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
8110a408:	d0a04e17 	ldw	r2,-32456(gp)
8110a40c:	100f883a 	mov	r7,r2
8110a410:	018005c4 	movi	r6,23
8110a414:	01400044 	movi	r5,1
8110a418:	01204534 	movhi	r4,33044
8110a41c:	2133b704 	addi	r4,r4,-12580
8110a420:	11121200 	call	81112120 <fwrite>
                    #endif
                    bSuccess = FALSE;
8110a424:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a428:	00000306 	br	8110a438 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
8110a42c:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a430:	00000106 	br	8110a438 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
8110a434:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
8110a438:	e13ffd17 	ldw	r4,-12(fp)
8110a43c:	11134b00 	call	811134b0 <strlen>
8110a440:	100d883a 	mov	r6,r2
8110a444:	000b883a 	mov	r5,zero
8110a448:	e13ffd17 	ldw	r4,-12(fp)
8110a44c:	1112c840 	call	81112c84 <memset>

    return bSuccess;
8110a450:	e0bff417 	ldw	r2,-48(fp)
}
8110a454:	e6ffff04 	addi	sp,fp,-4
8110a458:	dfc00217 	ldw	ra,8(sp)
8110a45c:	df000117 	ldw	fp,4(sp)
8110a460:	dc000017 	ldw	r16,0(sp)
8110a464:	dec00304 	addi	sp,sp,12
8110a468:	f800283a 	ret

8110a46c <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110a46c:	defffb04 	addi	sp,sp,-20
8110a470:	de00012e 	bgeu	sp,et,8110a478 <setPreParsedFreePos+0xc>
8110a474:	003b68fa 	trap	3
8110a478:	dfc00415 	stw	ra,16(sp)
8110a47c:	df000315 	stw	fp,12(sp)
8110a480:	df000304 	addi	fp,sp,12
8110a484:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a488:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a48c:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a490:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a494:	00004306 	br	8110a5a4 <setPreParsedFreePos+0x138>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a498:	d0a05517 	ldw	r2,-32428(gp)
8110a49c:	e0fffe84 	addi	r3,fp,-6
8110a4a0:	180d883a 	mov	r6,r3
8110a4a4:	01400084 	movi	r5,2
8110a4a8:	1009883a 	mov	r4,r2
8110a4ac:	112ce6c0 	call	8112ce6c <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a4b0:	e0bffe83 	ldbu	r2,-6(fp)
8110a4b4:	10803fcc 	andi	r2,r2,255
8110a4b8:	1000371e 	bne	r2,zero,8110a598 <setPreParsedFreePos+0x12c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a4bc:	e03ffe45 	stb	zero,-7(fp)
8110a4c0:	00002e06 	br	8110a57c <setPreParsedFreePos+0x110>
            {
                if ( xPreParsed[i].cType == 0 ) {
8110a4c4:	e0fffe43 	ldbu	r3,-7(fp)
8110a4c8:	00a04574 	movhi	r2,33045
8110a4cc:	10bec504 	addi	r2,r2,-1260
8110a4d0:	18c01324 	muli	r3,r3,76
8110a4d4:	10c5883a 	add	r2,r2,r3
8110a4d8:	10800104 	addi	r2,r2,4
8110a4dc:	10800003 	ldbu	r2,0(r2)
8110a4e0:	10803fcc 	andi	r2,r2,255
8110a4e4:	1080201c 	xori	r2,r2,128
8110a4e8:	10bfe004 	addi	r2,r2,-128
8110a4ec:	1000201e 	bne	r2,zero,8110a570 <setPreParsedFreePos+0x104>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
8110a4f0:	e0fffe43 	ldbu	r3,-7(fp)
8110a4f4:	00a04574 	movhi	r2,33045
8110a4f8:	10bec504 	addi	r2,r2,-1260
8110a4fc:	18c01324 	muli	r3,r3,76
8110a500:	10c7883a 	add	r3,r2,r3
8110a504:	e0bfff17 	ldw	r2,-4(fp)
8110a508:	1009883a 	mov	r4,r2
8110a50c:	00801304 	movi	r2,76
8110a510:	100d883a 	mov	r6,r2
8110a514:	200b883a 	mov	r5,r4
8110a518:	1809883a 	mov	r4,r3
8110a51c:	1112b340 	call	81112b34 <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
8110a520:	d0a05017 	ldw	r2,-32448(gp)
8110a524:	1009883a 	mov	r4,r2
8110a528:	112f2000 	call	8112f200 <OSSemPost>
8110a52c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a530:	e0bffe83 	ldbu	r2,-6(fp)
8110a534:	10803fcc 	andi	r2,r2,255
8110a538:	1000031e 	bne	r2,zero,8110a548 <setPreParsedFreePos+0xdc>
                        bSuccess = TRUE;
8110a53c:	00800044 	movi	r2,1
8110a540:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a544:	00001006 	br	8110a588 <setPreParsedFreePos+0x11c>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
8110a548:	110e2440 	call	8110e244 <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
8110a54c:	e0fffe43 	ldbu	r3,-7(fp)
8110a550:	00a04574 	movhi	r2,33045
8110a554:	10bec504 	addi	r2,r2,-1260
8110a558:	18c01324 	muli	r3,r3,76
8110a55c:	10c5883a 	add	r2,r2,r3
8110a560:	10800104 	addi	r2,r2,4
8110a564:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a568:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a56c:	00000606 	br	8110a588 <setPreParsedFreePos+0x11c>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a570:	e0bffe43 	ldbu	r2,-7(fp)
8110a574:	10800044 	addi	r2,r2,1
8110a578:	e0bffe45 	stb	r2,-7(fp)
8110a57c:	e0bffe43 	ldbu	r2,-7(fp)
8110a580:	10800130 	cmpltui	r2,r2,4
8110a584:	103fcf1e 	bne	r2,zero,8110a4c4 <__reset+0xfb0ea4c4>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
8110a588:	d0a05517 	ldw	r2,-32428(gp)
8110a58c:	1009883a 	mov	r4,r2
8110a590:	112d4100 	call	8112d410 <OSMutexPost>
8110a594:	00000306 	br	8110a5a4 <setPreParsedFreePos+0x138>
        } else {
            ucCountRetries++;
8110a598:	e0bffe03 	ldbu	r2,-8(fp)
8110a59c:	10800044 	addi	r2,r2,1
8110a5a0:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a5a4:	e0bffd17 	ldw	r2,-12(fp)
8110a5a8:	1000031e 	bne	r2,zero,8110a5b8 <setPreParsedFreePos+0x14c>
8110a5ac:	e0bffe03 	ldbu	r2,-8(fp)
8110a5b0:	108000b0 	cmpltui	r2,r2,2
8110a5b4:	103fb81e 	bne	r2,zero,8110a498 <__reset+0xfb0ea498>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a5b8:	e0bffd17 	ldw	r2,-12(fp)
}
8110a5bc:	e037883a 	mov	sp,fp
8110a5c0:	dfc00117 	ldw	ra,4(sp)
8110a5c4:	df000017 	ldw	fp,0(sp)
8110a5c8:	dec00204 	addi	sp,sp,8
8110a5cc:	f800283a 	ret

8110a5d0 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110a5d0:	defffb04 	addi	sp,sp,-20
8110a5d4:	de00012e 	bgeu	sp,et,8110a5dc <setPreAckSenderFreePos+0xc>
8110a5d8:	003b68fa 	trap	3
8110a5dc:	dfc00415 	stw	ra,16(sp)
8110a5e0:	df000315 	stw	fp,12(sp)
8110a5e4:	df000304 	addi	fp,sp,12
8110a5e8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a5ec:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a5f0:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a5f4:	e03ffe05 	stb	zero,-8(fp)
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a5f8:	00005406 	br	8110a74c <setPreAckSenderFreePos+0x17c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
8110a5fc:	d0a05b17 	ldw	r2,-32404(gp)
8110a600:	e0fffe84 	addi	r3,fp,-6
8110a604:	180d883a 	mov	r6,r3
8110a608:	01400104 	movi	r5,4
8110a60c:	1009883a 	mov	r4,r2
8110a610:	112ce6c0 	call	8112ce6c <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a614:	e0bffe83 	ldbu	r2,-6(fp)
8110a618:	10803fcc 	andi	r2,r2,255
8110a61c:	1000481e 	bne	r2,zero,8110a740 <setPreAckSenderFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a620:	e03ffe45 	stb	zero,-7(fp)
8110a624:	00003f06 	br	8110a724 <setPreAckSenderFreePos+0x154>
            {
                if ( xSenderACK[i].cType == 0 ) {
8110a628:	e0fffe43 	ldbu	r3,-7(fp)
8110a62c:	00a04574 	movhi	r2,33045
8110a630:	10bec104 	addi	r2,r2,-1276
8110a634:	18c7883a 	add	r3,r3,r3
8110a638:	18c7883a 	add	r3,r3,r3
8110a63c:	10c5883a 	add	r2,r2,r3
8110a640:	10800003 	ldbu	r2,0(r2)
8110a644:	10803fcc 	andi	r2,r2,255
8110a648:	1080201c 	xori	r2,r2,128
8110a64c:	10bfe004 	addi	r2,r2,-128
8110a650:	1000311e 	bne	r2,zero,8110a718 <setPreAckSenderFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
8110a654:	e0fffe43 	ldbu	r3,-7(fp)
8110a658:	e0bfff17 	ldw	r2,-4(fp)
8110a65c:	11000103 	ldbu	r4,4(r2)
8110a660:	00a04574 	movhi	r2,33045
8110a664:	10bec104 	addi	r2,r2,-1276
8110a668:	18c7883a 	add	r3,r3,r3
8110a66c:	18c7883a 	add	r3,r3,r3
8110a670:	10c5883a 	add	r2,r2,r3
8110a674:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
8110a678:	e0fffe43 	ldbu	r3,-7(fp)
8110a67c:	e0bfff17 	ldw	r2,-4(fp)
8110a680:	11000143 	ldbu	r4,5(r2)
8110a684:	00a04574 	movhi	r2,33045
8110a688:	10bec104 	addi	r2,r2,-1276
8110a68c:	18c7883a 	add	r3,r3,r3
8110a690:	18c7883a 	add	r3,r3,r3
8110a694:	10c5883a 	add	r2,r2,r3
8110a698:	10800044 	addi	r2,r2,1
8110a69c:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110a6a0:	e0fffe43 	ldbu	r3,-7(fp)
8110a6a4:	e0bfff17 	ldw	r2,-4(fp)
8110a6a8:	1100020b 	ldhu	r4,8(r2)
8110a6ac:	00a04574 	movhi	r2,33045
8110a6b0:	10bec104 	addi	r2,r2,-1276
8110a6b4:	18c7883a 	add	r3,r3,r3
8110a6b8:	18c7883a 	add	r3,r3,r3
8110a6bc:	10c5883a 	add	r2,r2,r3
8110a6c0:	10800084 	addi	r2,r2,2
8110a6c4:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
8110a6c8:	d0a04d17 	ldw	r2,-32460(gp)
8110a6cc:	1009883a 	mov	r4,r2
8110a6d0:	112f2000 	call	8112f200 <OSSemPost>
8110a6d4:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a6d8:	e0bffe83 	ldbu	r2,-6(fp)
8110a6dc:	10803fcc 	andi	r2,r2,255
8110a6e0:	1000031e 	bne	r2,zero,8110a6f0 <setPreAckSenderFreePos+0x120>
                        bSuccess = TRUE;
8110a6e4:	00800044 	movi	r2,1
8110a6e8:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a6ec:	00001006 	br	8110a730 <setPreAckSenderFreePos+0x160>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
8110a6f0:	110e2dc0 	call	8110e2dc <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
8110a6f4:	e0fffe43 	ldbu	r3,-7(fp)
8110a6f8:	00a04574 	movhi	r2,33045
8110a6fc:	10bec104 	addi	r2,r2,-1276
8110a700:	18c7883a 	add	r3,r3,r3
8110a704:	18c7883a 	add	r3,r3,r3
8110a708:	10c5883a 	add	r2,r2,r3
8110a70c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a710:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a714:	00000606 	br	8110a730 <setPreAckSenderFreePos+0x160>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a718:	e0bffe43 	ldbu	r2,-7(fp)
8110a71c:	10800044 	addi	r2,r2,1
8110a720:	e0bffe45 	stb	r2,-7(fp)
8110a724:	e0bffe43 	ldbu	r2,-7(fp)
8110a728:	10800130 	cmpltui	r2,r2,4
8110a72c:	103fbe1e 	bne	r2,zero,8110a628 <__reset+0xfb0ea628>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
8110a730:	d0a05b17 	ldw	r2,-32404(gp)
8110a734:	1009883a 	mov	r4,r2
8110a738:	112d4100 	call	8112d410 <OSMutexPost>
8110a73c:	00000306 	br	8110a74c <setPreAckSenderFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a740:	e0bffe03 	ldbu	r2,-8(fp)
8110a744:	10800044 	addi	r2,r2,1
8110a748:	e0bffe05 	stb	r2,-8(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a74c:	e0bffd17 	ldw	r2,-12(fp)
8110a750:	1000031e 	bne	r2,zero,8110a760 <setPreAckSenderFreePos+0x190>
8110a754:	e0bffe03 	ldbu	r2,-8(fp)
8110a758:	108000b0 	cmpltui	r2,r2,2
8110a75c:	103fa71e 	bne	r2,zero,8110a5fc <__reset+0xfb0ea5fc>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a760:	e0bffd17 	ldw	r2,-12(fp)
}
8110a764:	e037883a 	mov	sp,fp
8110a768:	dfc00117 	ldw	ra,4(sp)
8110a76c:	df000017 	ldw	fp,0(sp)
8110a770:	dec00204 	addi	sp,sp,8
8110a774:	f800283a 	ret

8110a778 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110a778:	defffb04 	addi	sp,sp,-20
8110a77c:	de00012e 	bgeu	sp,et,8110a784 <setPreAckReceiverFreePos+0xc>
8110a780:	003b68fa 	trap	3
8110a784:	dfc00415 	stw	ra,16(sp)
8110a788:	df000315 	stw	fp,12(sp)
8110a78c:	df000304 	addi	fp,sp,12
8110a790:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a794:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a798:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a79c:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a7a0:	00005406 	br	8110a8f4 <setPreAckReceiverFreePos+0x17c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a7a4:	d0a05117 	ldw	r2,-32444(gp)
8110a7a8:	e0fffe84 	addi	r3,fp,-6
8110a7ac:	180d883a 	mov	r6,r3
8110a7b0:	01400084 	movi	r5,2
8110a7b4:	1009883a 	mov	r4,r2
8110a7b8:	112ce6c0 	call	8112ce6c <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a7bc:	e0bffe83 	ldbu	r2,-6(fp)
8110a7c0:	10803fcc 	andi	r2,r2,255
8110a7c4:	1000481e 	bne	r2,zero,8110a8e8 <setPreAckReceiverFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a7c8:	e03ffe45 	stb	zero,-7(fp)
8110a7cc:	00003f06 	br	8110a8cc <setPreAckReceiverFreePos+0x154>
            {
                if ( xReceivedACK[i].cType == 0 ) {
8110a7d0:	e0fffe43 	ldbu	r3,-7(fp)
8110a7d4:	00a04574 	movhi	r2,33045
8110a7d8:	10b6bd04 	addi	r2,r2,-9484
8110a7dc:	18c7883a 	add	r3,r3,r3
8110a7e0:	18c7883a 	add	r3,r3,r3
8110a7e4:	10c5883a 	add	r2,r2,r3
8110a7e8:	10800003 	ldbu	r2,0(r2)
8110a7ec:	10803fcc 	andi	r2,r2,255
8110a7f0:	1080201c 	xori	r2,r2,128
8110a7f4:	10bfe004 	addi	r2,r2,-128
8110a7f8:	1000311e 	bne	r2,zero,8110a8c0 <setPreAckReceiverFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
8110a7fc:	e0fffe43 	ldbu	r3,-7(fp)
8110a800:	e0bfff17 	ldw	r2,-4(fp)
8110a804:	11000103 	ldbu	r4,4(r2)
8110a808:	00a04574 	movhi	r2,33045
8110a80c:	10b6bd04 	addi	r2,r2,-9484
8110a810:	18c7883a 	add	r3,r3,r3
8110a814:	18c7883a 	add	r3,r3,r3
8110a818:	10c5883a 	add	r2,r2,r3
8110a81c:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a820:	e0fffe43 	ldbu	r3,-7(fp)
8110a824:	e0bfff17 	ldw	r2,-4(fp)
8110a828:	11000143 	ldbu	r4,5(r2)
8110a82c:	00a04574 	movhi	r2,33045
8110a830:	10b6bd04 	addi	r2,r2,-9484
8110a834:	18c7883a 	add	r3,r3,r3
8110a838:	18c7883a 	add	r3,r3,r3
8110a83c:	10c5883a 	add	r2,r2,r3
8110a840:	10800044 	addi	r2,r2,1
8110a844:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a848:	e0fffe43 	ldbu	r3,-7(fp)
8110a84c:	e0bfff17 	ldw	r2,-4(fp)
8110a850:	1100020b 	ldhu	r4,8(r2)
8110a854:	00a04574 	movhi	r2,33045
8110a858:	10b6bd04 	addi	r2,r2,-9484
8110a85c:	18c7883a 	add	r3,r3,r3
8110a860:	18c7883a 	add	r3,r3,r3
8110a864:	10c5883a 	add	r2,r2,r3
8110a868:	10800084 	addi	r2,r2,2
8110a86c:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
8110a870:	d0a05217 	ldw	r2,-32440(gp)
8110a874:	1009883a 	mov	r4,r2
8110a878:	112f2000 	call	8112f200 <OSSemPost>
8110a87c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a880:	e0bffe83 	ldbu	r2,-6(fp)
8110a884:	10803fcc 	andi	r2,r2,255
8110a888:	1000031e 	bne	r2,zero,8110a898 <setPreAckReceiverFreePos+0x120>
                        bSuccess = TRUE;
8110a88c:	00800044 	movi	r2,1
8110a890:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a894:	00001006 	br	8110a8d8 <setPreAckReceiverFreePos+0x160>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
8110a898:	110e2900 	call	8110e290 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110a89c:	e0fffe43 	ldbu	r3,-7(fp)
8110a8a0:	00a04574 	movhi	r2,33045
8110a8a4:	10b6bd04 	addi	r2,r2,-9484
8110a8a8:	18c7883a 	add	r3,r3,r3
8110a8ac:	18c7883a 	add	r3,r3,r3
8110a8b0:	10c5883a 	add	r2,r2,r3
8110a8b4:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a8b8:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a8bc:	00000606 	br	8110a8d8 <setPreAckReceiverFreePos+0x160>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a8c0:	e0bffe43 	ldbu	r2,-7(fp)
8110a8c4:	10800044 	addi	r2,r2,1
8110a8c8:	e0bffe45 	stb	r2,-7(fp)
8110a8cc:	e0bffe43 	ldbu	r2,-7(fp)
8110a8d0:	10800130 	cmpltui	r2,r2,4
8110a8d4:	103fbe1e 	bne	r2,zero,8110a7d0 <__reset+0xfb0ea7d0>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
8110a8d8:	d0a05117 	ldw	r2,-32444(gp)
8110a8dc:	1009883a 	mov	r4,r2
8110a8e0:	112d4100 	call	8112d410 <OSMutexPost>
8110a8e4:	00000306 	br	8110a8f4 <setPreAckReceiverFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a8e8:	e0bffe03 	ldbu	r2,-8(fp)
8110a8ec:	10800044 	addi	r2,r2,1
8110a8f0:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a8f4:	e0bffd17 	ldw	r2,-12(fp)
8110a8f8:	1000031e 	bne	r2,zero,8110a908 <setPreAckReceiverFreePos+0x190>
8110a8fc:	e0bffe03 	ldbu	r2,-8(fp)
8110a900:	108000b0 	cmpltui	r2,r2,2
8110a904:	103fa71e 	bne	r2,zero,8110a7a4 <__reset+0xfb0ea7a4>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a908:	e0bffd17 	ldw	r2,-12(fp)
}
8110a90c:	e037883a 	mov	sp,fp
8110a910:	dfc00117 	ldw	ra,4(sp)
8110a914:	df000017 	ldw	fp,0(sp)
8110a918:	dec00204 	addi	sp,sp,8
8110a91c:	f800283a 	ret

8110a920 <vSenderComTask>:


OS_STK_DATA *pdata;

void vSenderComTask(void *task_data)
{
8110a920:	defff704 	addi	sp,sp,-36
8110a924:	de00012e 	bgeu	sp,et,8110a92c <vSenderComTask+0xc>
8110a928:	003b68fa 	trap	3
8110a92c:	dfc00815 	stw	ra,32(sp)
8110a930:	df000715 	stw	fp,28(sp)
8110a934:	df000704 	addi	fp,sp,28
8110a938:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    OS_STK_DATA data;
    bool bSuccess;
    int desligarEm = 0;
8110a93c:	e03ffb15 	stw	zero,-20(fp)

    eSenderMode = sConfiguringSender;
8110a940:	e03ffa15 	stw	zero,-24(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
8110a944:	d0a04e17 	ldw	r2,-32456(gp)
8110a948:	100f883a 	mov	r7,r2
8110a94c:	01800704 	movi	r6,28
8110a950:	01400044 	movi	r5,1
8110a954:	01204534 	movhi	r4,33044
8110a958:	2133bd04 	addi	r4,r4,-12556
8110a95c:	11121200 	call	81112120 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110a960:	e0bffa17 	ldw	r2,-24(fp)
8110a964:	10c00060 	cmpeqi	r3,r2,1
8110a968:	1800091e 	bne	r3,zero,8110a990 <vSenderComTask+0x70>
8110a96c:	0080052e 	bgeu	zero,r2,8110a984 <vSenderComTask+0x64>
8110a970:	10c000a0 	cmpeqi	r3,r2,2
8110a974:	1800b91e 	bne	r3,zero,8110ac5c <vSenderComTask+0x33c>
8110a978:	10800160 	cmpeqi	r2,r2,5
8110a97c:	10002c1e 	bne	r2,zero,8110aa30 <vSenderComTask+0x110>
8110a980:	0000ae06 	br	8110ac3c <vSenderComTask+0x31c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110a984:	00800044 	movi	r2,1
8110a988:	e0bffa15 	stw	r2,-24(fp)
                break;
8110a98c:	0000b406 	br	8110ac60 <vSenderComTask+0x340>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110a990:	d0a04e17 	ldw	r2,-32456(gp)
8110a994:	100f883a 	mov	r7,r2
8110a998:	01800784 	movi	r6,30
8110a99c:	01400044 	movi	r5,1
8110a9a0:	01204534 	movhi	r4,33044
8110a9a4:	2133c504 	addi	r4,r4,-12524
8110a9a8:	11121200 	call	81112120 <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendStatusFirstTime(START_STATUS_SEQUENCE, 1);
8110a9ac:	01400044 	movi	r5,1
8110a9b0:	01204534 	movhi	r4,33044
8110a9b4:	2133cd04 	addi	r4,r4,-12492
8110a9b8:	110c5b00 	call	8110c5b0 <bSendStatusFirstTime>
8110a9bc:	e0bffc15 	stw	r2,-16(fp)
                if ( bSuccess == TRUE ) {
8110a9c0:	e0bffc17 	ldw	r2,-16(fp)
8110a9c4:	10800058 	cmpnei	r2,r2,1
8110a9c8:	10000a1e 	bne	r2,zero,8110a9f4 <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110a9cc:	00800144 	movi	r2,5
8110a9d0:	e0bffa15 	stw	r2,-24(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110a9d4:	d0a04e17 	ldw	r2,-32456(gp)
8110a9d8:	100f883a 	mov	r7,r2
8110a9dc:	01800d44 	movi	r6,53
8110a9e0:	01400044 	movi	r5,1
8110a9e4:	01204534 	movhi	r4,33044
8110a9e8:	2133d004 	addi	r4,r4,-12480
8110a9ec:	11121200 	call	81112120 <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110a9f0:	00009b06 	br	8110ac60 <vSenderComTask+0x340>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110a9f4:	d0a04e17 	ldw	r2,-32456(gp)
8110a9f8:	100f883a 	mov	r7,r2
8110a9fc:	01800784 	movi	r6,30
8110aa00:	01400044 	movi	r5,1
8110aa04:	01204534 	movhi	r4,33044
8110aa08:	2133de04 	addi	r4,r4,-12424
8110aa0c:	11121200 	call	81112120 <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110aa10:	00800044 	movi	r2,1
8110aa14:	e0bffa15 	stw	r2,-24(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110aa18:	000f883a 	mov	r7,zero
8110aa1c:	01800144 	movi	r6,5
8110aa20:	000b883a 	mov	r5,zero
8110aa24:	0009883a 	mov	r4,zero
8110aa28:	1130e100 	call	81130e10 <OSTimeDlyHMSM>
                }
                break;
8110aa2c:	00008c06 	br	8110ac60 <vSenderComTask+0x340>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110aa30:	00800144 	movi	r2,5
8110aa34:	e0bffa15 	stw	r2,-24(fp)
                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110aa38:	d0a04e17 	ldw	r2,-32456(gp)
8110aa3c:	100f883a 	mov	r7,r2
8110aa40:	01800344 	movi	r6,13
8110aa44:	01400044 	movi	r5,1
8110aa48:	01204534 	movhi	r4,33044
8110aa4c:	2133e604 	addi	r4,r4,-12392
8110aa50:	11121200 	call	81112120 <fwrite>

                    OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
8110aa54:	e0bffd04 	addi	r2,fp,-12
8110aa58:	100b883a 	mov	r5,r2
8110aa5c:	010005c4 	movi	r4,23
8110aa60:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "In_ack  total=%4ld,  free=%4ld, used=%4ld.\n", data.OSFree + data.OSUsed, data.OSFree, data.OSUsed);
8110aa64:	d1204e17 	ldw	r4,-32456(gp)
8110aa68:	e0fffd17 	ldw	r3,-12(fp)
8110aa6c:	e0bffe17 	ldw	r2,-8(fp)
8110aa70:	1887883a 	add	r3,r3,r2
8110aa74:	e17ffd17 	ldw	r5,-12(fp)
8110aa78:	e0bffe17 	ldw	r2,-8(fp)
8110aa7c:	d8800015 	stw	r2,0(sp)
8110aa80:	280f883a 	mov	r7,r5
8110aa84:	180d883a 	mov	r6,r3
8110aa88:	01604534 	movhi	r5,33044
8110aa8c:	2973ea04 	addi	r5,r5,-12376
8110aa90:	1111b340 	call	81111b34 <fprintf>

                    OSTaskStkChk( OUT_ACK_TASK_PRIO , pdata);
8110aa94:	d0a04a17 	ldw	r2,-32472(gp)
8110aa98:	100b883a 	mov	r5,r2
8110aa9c:	01000644 	movi	r4,25
8110aaa0:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "Out_ack  total=%4ld,  free=%4ld, used=%4ld.\n", pdata->OSFree + pdata->OSUsed, pdata->OSFree, pdata->OSUsed);
8110aaa4:	d1204e17 	ldw	r4,-32456(gp)
8110aaa8:	d0a04a17 	ldw	r2,-32472(gp)
8110aaac:	10c00017 	ldw	r3,0(r2)
8110aab0:	d0a04a17 	ldw	r2,-32472(gp)
8110aab4:	10800117 	ldw	r2,4(r2)
8110aab8:	1887883a 	add	r3,r3,r2
8110aabc:	d0a04a17 	ldw	r2,-32472(gp)
8110aac0:	11400017 	ldw	r5,0(r2)
8110aac4:	d0a04a17 	ldw	r2,-32472(gp)
8110aac8:	10800117 	ldw	r2,4(r2)
8110aacc:	d8800015 	stw	r2,0(sp)
8110aad0:	280f883a 	mov	r7,r5
8110aad4:	180d883a 	mov	r6,r3
8110aad8:	01604534 	movhi	r5,33044
8110aadc:	2973f504 	addi	r5,r5,-12332
8110aae0:	1111b340 	call	81111b34 <fprintf>

                    OSTaskStkChk( RECEIVER_TASK_PRIO , pdata);
8110aae4:	d0a04a17 	ldw	r2,-32472(gp)
8110aae8:	100b883a 	mov	r5,r2
8110aaec:	01000784 	movi	r4,30
8110aaf0:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "Receiver  total=%4ld,  free=%4ld, used=%4ld.\n", pdata->OSFree + pdata->OSUsed, pdata->OSFree, pdata->OSUsed);
8110aaf4:	d1204e17 	ldw	r4,-32456(gp)
8110aaf8:	d0a04a17 	ldw	r2,-32472(gp)
8110aafc:	10c00017 	ldw	r3,0(r2)
8110ab00:	d0a04a17 	ldw	r2,-32472(gp)
8110ab04:	10800117 	ldw	r2,4(r2)
8110ab08:	1887883a 	add	r3,r3,r2
8110ab0c:	d0a04a17 	ldw	r2,-32472(gp)
8110ab10:	11400017 	ldw	r5,0(r2)
8110ab14:	d0a04a17 	ldw	r2,-32472(gp)
8110ab18:	10800117 	ldw	r2,4(r2)
8110ab1c:	d8800015 	stw	r2,0(sp)
8110ab20:	280f883a 	mov	r7,r5
8110ab24:	180d883a 	mov	r6,r3
8110ab28:	01604534 	movhi	r5,33044
8110ab2c:	29740104 	addi	r5,r5,-12284
8110ab30:	1111b340 	call	81111b34 <fprintf>

                    OSTaskStkChk( PARSER_TASK_PRIO , pdata);
8110ab34:	d0a04a17 	ldw	r2,-32472(gp)
8110ab38:	100b883a 	mov	r5,r2
8110ab3c:	01000684 	movi	r4,26
8110ab40:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "Parser_comm  total=%4ld,  free=%4ld, used=%4ld.\n",  pdata->OSFree + pdata->OSUsed, pdata->OSFree, pdata->OSUsed);
8110ab44:	d1204e17 	ldw	r4,-32456(gp)
8110ab48:	d0a04a17 	ldw	r2,-32472(gp)
8110ab4c:	10c00017 	ldw	r3,0(r2)
8110ab50:	d0a04a17 	ldw	r2,-32472(gp)
8110ab54:	10800117 	ldw	r2,4(r2)
8110ab58:	1887883a 	add	r3,r3,r2
8110ab5c:	d0a04a17 	ldw	r2,-32472(gp)
8110ab60:	11400017 	ldw	r5,0(r2)
8110ab64:	d0a04a17 	ldw	r2,-32472(gp)
8110ab68:	10800117 	ldw	r2,4(r2)
8110ab6c:	d8800015 	stw	r2,0(sp)
8110ab70:	280f883a 	mov	r7,r5
8110ab74:	180d883a 	mov	r6,r3
8110ab78:	01604534 	movhi	r5,33044
8110ab7c:	29740d04 	addi	r5,r5,-12236
8110ab80:	1111b340 	call	81111b34 <fprintf>

                    OSTaskStkChk( TIMEOUT_CHECKER_PRIO , pdata);
8110ab84:	d0a04a17 	ldw	r2,-32472(gp)
8110ab88:	100b883a 	mov	r5,r2
8110ab8c:	01000704 	movi	r4,28
8110ab90:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "Timeoutchecker  total=%4ld,  free=%4ld, used=%4ld.\n",  pdata->OSFree + pdata->OSUsed, pdata->OSFree, pdata->OSUsed);
8110ab94:	d1204e17 	ldw	r4,-32456(gp)
8110ab98:	d0a04a17 	ldw	r2,-32472(gp)
8110ab9c:	10c00017 	ldw	r3,0(r2)
8110aba0:	d0a04a17 	ldw	r2,-32472(gp)
8110aba4:	10800117 	ldw	r2,4(r2)
8110aba8:	1887883a 	add	r3,r3,r2
8110abac:	d0a04a17 	ldw	r2,-32472(gp)
8110abb0:	11400017 	ldw	r5,0(r2)
8110abb4:	d0a04a17 	ldw	r2,-32472(gp)
8110abb8:	10800117 	ldw	r2,4(r2)
8110abbc:	d8800015 	stw	r2,0(sp)
8110abc0:	280f883a 	mov	r7,r5
8110abc4:	180d883a 	mov	r6,r3
8110abc8:	01604534 	movhi	r5,33044
8110abcc:	29741a04 	addi	r5,r5,-12184
8110abd0:	1111b340 	call	81111b34 <fprintf>

                    OSTaskStkChk( SENDER_TASK_PRIO , pdata);
8110abd4:	d0a04a17 	ldw	r2,-32472(gp)
8110abd8:	100b883a 	mov	r5,r2
8110abdc:	01000604 	movi	r4,24
8110abe0:	11307ac0 	call	811307ac <OSTaskStkChk>
                    fprintf(fp, "Sender  total=%4ld,  free=%4ld, used=%4ld.\n",  pdata->OSFree + pdata->OSUsed, pdata->OSFree, pdata->OSUsed);
8110abe4:	d1204e17 	ldw	r4,-32456(gp)
8110abe8:	d0a04a17 	ldw	r2,-32472(gp)
8110abec:	10c00017 	ldw	r3,0(r2)
8110abf0:	d0a04a17 	ldw	r2,-32472(gp)
8110abf4:	10800117 	ldw	r2,4(r2)
8110abf8:	1887883a 	add	r3,r3,r2
8110abfc:	d0a04a17 	ldw	r2,-32472(gp)
8110ac00:	11400017 	ldw	r5,0(r2)
8110ac04:	d0a04a17 	ldw	r2,-32472(gp)
8110ac08:	10800117 	ldw	r2,4(r2)
8110ac0c:	d8800015 	stw	r2,0(sp)
8110ac10:	280f883a 	mov	r7,r5
8110ac14:	180d883a 	mov	r6,r3
8110ac18:	01604534 	movhi	r5,33044
8110ac1c:	29742704 	addi	r5,r5,-12132
8110ac20:	1111b340 	call	81111b34 <fprintf>



                

				OSTimeDlyHMSM(0, 0, 0, 250); /*Sleeps for 3 second*/
8110ac24:	01c03e84 	movi	r7,250
8110ac28:	000d883a 	mov	r6,zero
8110ac2c:	000b883a 	mov	r5,zero
8110ac30:	0009883a 	mov	r4,zero
8110ac34:	1130e100 	call	81130e10 <OSTimeDlyHMSM>

                break;
8110ac38:	00000906 	br	8110ac60 <vSenderComTask+0x340>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
8110ac3c:	d0a04e17 	ldw	r2,-32456(gp)
8110ac40:	100f883a 	mov	r7,r2
8110ac44:	018003c4 	movi	r6,15
8110ac48:	01400044 	movi	r5,1
8110ac4c:	01204534 	movhi	r4,33044
8110ac50:	21343204 	addi	r4,r4,-12088
8110ac54:	11121200 	call	81112120 <fwrite>
#endif
                break;
8110ac58:	00000106 	br	8110ac60 <vSenderComTask+0x340>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110ac5c:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
8110ac60:	003f3f06 	br	8110a960 <__reset+0xfb0ea960>

8110ac64 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110ac64:	defffd04 	addi	sp,sp,-12
8110ac68:	de00012e 	bgeu	sp,et,8110ac70 <vSimMebTask+0xc>
8110ac6c:	003b68fa 	trap	3
8110ac70:	df000215 	stw	fp,8(sp)
8110ac74:	df000204 	addi	fp,sp,8
8110ac78:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110ac7c:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110ac80:	0001883a 	nop
8110ac84:	e037883a 	mov	sp,fp
8110ac88:	df000017 	ldw	fp,0(sp)
8110ac8c:	dec00104 	addi	sp,sp,4
8110ac90:	f800283a 	ret

8110ac94 <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
8110ac94:	defff504 	addi	sp,sp,-44
8110ac98:	de00012e 	bgeu	sp,et,8110aca0 <vTimeoutCheckerTask+0xc>
8110ac9c:	003b68fa 	trap	3
8110aca0:	dfc00a15 	stw	ra,40(sp)
8110aca4:	df000915 	stw	fp,36(sp)
8110aca8:	df000904 	addi	fp,sp,36
8110acac:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
8110acb0:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
8110acb4:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
8110acb8:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
8110acbc:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
8110acc0:	e03ffa45 	stb	zero,-23(fp)
8110acc4:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110acc8:	d0a04e17 	ldw	r2,-32456(gp)
8110accc:	100f883a 	mov	r7,r2
8110acd0:	01800844 	movi	r6,33
8110acd4:	01400044 	movi	r5,1
8110acd8:	01204534 	movhi	r4,33044
8110acdc:	21343604 	addi	r4,r4,-12072
8110ace0:	11121200 	call	81112120 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
8110ace4:	d0a05317 	ldw	r2,-32436(gp)
8110ace8:	e0fffac4 	addi	r3,fp,-21
8110acec:	180d883a 	mov	r6,r3
8110acf0:	000b883a 	mov	r5,zero
8110acf4:	1009883a 	mov	r4,r2
8110acf8:	112ee780 	call	8112ee78 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
8110acfc:	e0bffac3 	ldbu	r2,-21(fp)
8110ad00:	10803fcc 	andi	r2,r2,255
8110ad04:	1002191e 	bne	r2,zero,8110b56c <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
8110ad08:	e0bffb04 	addi	r2,fp,-20
8110ad0c:	01800204 	movi	r6,8
8110ad10:	01403fc4 	movi	r5,255
8110ad14:	1009883a 	mov	r4,r2
8110ad18:	1112c840 	call	81112c84 <memset>
            memset(ucRetransB64, 255, N_64);
8110ad1c:	e0bffd04 	addi	r2,fp,-12
8110ad20:	01800104 	movi	r6,4
8110ad24:	01403fc4 	movi	r5,255
8110ad28:	1009883a 	mov	r4,r2
8110ad2c:	1112c840 	call	81112c84 <memset>
            memset(ucRetransB128, 255, N_128);
8110ad30:	e0bffe04 	addi	r2,fp,-8
8110ad34:	01800084 	movi	r6,2
8110ad38:	01403fc4 	movi	r5,255
8110ad3c:	1009883a 	mov	r4,r2
8110ad40:	1112c840 	call	81112c84 <memset>

            bFinished32=FALSE;
8110ad44:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
8110ad48:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
8110ad4c:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
8110ad50:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110ad54:	00011a06 	br	8110b1c0 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
8110ad58:	e0bff717 	ldw	r2,-36(fp)
8110ad5c:	10005b1e 	bne	r2,zero,8110aecc <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110ad60:	d0a05617 	ldw	r2,-32424(gp)
8110ad64:	e0fffac4 	addi	r3,fp,-21
8110ad68:	180d883a 	mov	r6,r3
8110ad6c:	01400084 	movi	r5,2
8110ad70:	1009883a 	mov	r4,r2
8110ad74:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110ad78:	e0bffac3 	ldbu	r2,-21(fp)
8110ad7c:	10803fcc 	andi	r2,r2,255
8110ad80:	1000521e 	bne	r2,zero,8110aecc <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
8110ad84:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
8110ad88:	e03ffa45 	stb	zero,-23(fp)
8110ad8c:	00004706 	br	8110aeac <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
8110ad90:	e0fffa43 	ldbu	r3,-23(fp)
8110ad94:	00a04534 	movhi	r2,33044
8110ad98:	109e2e04 	addi	r2,r2,30904
8110ad9c:	18c009a4 	muli	r3,r3,38
8110ada0:	10c5883a 	add	r2,r2,r3
8110ada4:	10800804 	addi	r2,r2,32
8110ada8:	1080000b 	ldhu	r2,0(r2)
8110adac:	10bfffcc 	andi	r2,r2,65535
8110adb0:	10003b26 	beq	r2,zero,8110aea0 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
8110adb4:	e0fffa43 	ldbu	r3,-23(fp)
8110adb8:	00a04534 	movhi	r2,33044
8110adbc:	109e2e04 	addi	r2,r2,30904
8110adc0:	18c009a4 	muli	r3,r3,38
8110adc4:	10c5883a 	add	r2,r2,r3
8110adc8:	10800904 	addi	r2,r2,36
8110adcc:	10800003 	ldbu	r2,0(r2)
8110add0:	10803fcc 	andi	r2,r2,255
8110add4:	1000101e 	bne	r2,zero,8110ae18 <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
8110add8:	e0fffa43 	ldbu	r3,-23(fp)
8110addc:	00a04534 	movhi	r2,33044
8110ade0:	109e2e04 	addi	r2,r2,30904
8110ade4:	18c009a4 	muli	r3,r3,38
8110ade8:	10c5883a 	add	r2,r2,r3
8110adec:	10800804 	addi	r2,r2,32
8110adf0:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
8110adf4:	d0a05917 	ldw	r2,-32412(gp)
8110adf8:	1009883a 	mov	r4,r2
8110adfc:	112f2000 	call	8112f200 <OSSemPost>
8110ae00:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110ae04:	e0bffac3 	ldbu	r2,-21(fp)
8110ae08:	10803fcc 	andi	r2,r2,255
8110ae0c:	10002426 	beq	r2,zero,8110aea0 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
8110ae10:	110e6ac0 	call	8110e6ac <vFailSetCountSemaphorexBuffer32>
8110ae14:	00002206 	br	8110aea0 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
8110ae18:	e0fffa43 	ldbu	r3,-23(fp)
8110ae1c:	00a04534 	movhi	r2,33044
8110ae20:	109e2e04 	addi	r2,r2,30904
8110ae24:	190009a4 	muli	r4,r3,38
8110ae28:	1105883a 	add	r2,r2,r4
8110ae2c:	10800884 	addi	r2,r2,34
8110ae30:	1080000b 	ldhu	r2,0(r2)
8110ae34:	10bfffc4 	addi	r2,r2,-1
8110ae38:	1009883a 	mov	r4,r2
8110ae3c:	00a04534 	movhi	r2,33044
8110ae40:	109e2e04 	addi	r2,r2,30904
8110ae44:	18c009a4 	muli	r3,r3,38
8110ae48:	10c5883a 	add	r2,r2,r3
8110ae4c:	10800884 	addi	r2,r2,34
8110ae50:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
8110ae54:	e0fffa43 	ldbu	r3,-23(fp)
8110ae58:	00a04534 	movhi	r2,33044
8110ae5c:	109e2e04 	addi	r2,r2,30904
8110ae60:	18c009a4 	muli	r3,r3,38
8110ae64:	10c5883a 	add	r2,r2,r3
8110ae68:	10800884 	addi	r2,r2,34
8110ae6c:	1080000b 	ldhu	r2,0(r2)
8110ae70:	10bfffcc 	andi	r2,r2,65535
8110ae74:	10a0001c 	xori	r2,r2,32768
8110ae78:	10a00004 	addi	r2,r2,-32768
8110ae7c:	00800816 	blt	zero,r2,8110aea0 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
8110ae80:	e0bffa83 	ldbu	r2,-22(fp)
8110ae84:	e0fffb04 	addi	r3,fp,-20
8110ae88:	1885883a 	add	r2,r3,r2
8110ae8c:	e0fffa43 	ldbu	r3,-23(fp)
8110ae90:	10c00005 	stb	r3,0(r2)
                                        k++;
8110ae94:	e0bffa83 	ldbu	r2,-22(fp)
8110ae98:	10800044 	addi	r2,r2,1
8110ae9c:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
8110aea0:	e0bffa43 	ldbu	r2,-23(fp)
8110aea4:	10800044 	addi	r2,r2,1
8110aea8:	e0bffa45 	stb	r2,-23(fp)
8110aeac:	e0bffa43 	ldbu	r2,-23(fp)
8110aeb0:	10800230 	cmpltui	r2,r2,8
8110aeb4:	103fb61e 	bne	r2,zero,8110ad90 <__reset+0xfb0ead90>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110aeb8:	d0a05617 	ldw	r2,-32424(gp)
8110aebc:	1009883a 	mov	r4,r2
8110aec0:	112d4100 	call	8112d410 <OSMutexPost>
                        bFinished32 = TRUE;
8110aec4:	00800044 	movi	r2,1
8110aec8:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
8110aecc:	e0bff817 	ldw	r2,-32(fp)
8110aed0:	10005b1e 	bne	r2,zero,8110b040 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110aed4:	d0a05a17 	ldw	r2,-32408(gp)
8110aed8:	e0fffac4 	addi	r3,fp,-21
8110aedc:	180d883a 	mov	r6,r3
8110aee0:	01400084 	movi	r5,2
8110aee4:	1009883a 	mov	r4,r2
8110aee8:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110aeec:	e0bffac3 	ldbu	r2,-21(fp)
8110aef0:	10803fcc 	andi	r2,r2,255
8110aef4:	1000521e 	bne	r2,zero,8110b040 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
8110aef8:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
8110aefc:	e03ffa45 	stb	zero,-23(fp)
8110af00:	00004706 	br	8110b020 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
8110af04:	e0fffa43 	ldbu	r3,-23(fp)
8110af08:	00a04534 	movhi	r2,33044
8110af0c:	108cd104 	addi	r2,r2,13124
8110af10:	18c011a4 	muli	r3,r3,70
8110af14:	10c5883a 	add	r2,r2,r3
8110af18:	10801004 	addi	r2,r2,64
8110af1c:	1080000b 	ldhu	r2,0(r2)
8110af20:	10bfffcc 	andi	r2,r2,65535
8110af24:	10003b26 	beq	r2,zero,8110b014 <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
8110af28:	e0fffa43 	ldbu	r3,-23(fp)
8110af2c:	00a04534 	movhi	r2,33044
8110af30:	108cd104 	addi	r2,r2,13124
8110af34:	18c011a4 	muli	r3,r3,70
8110af38:	10c5883a 	add	r2,r2,r3
8110af3c:	10801104 	addi	r2,r2,68
8110af40:	10800003 	ldbu	r2,0(r2)
8110af44:	10803fcc 	andi	r2,r2,255
8110af48:	1000101e 	bne	r2,zero,8110af8c <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
8110af4c:	e0fffa43 	ldbu	r3,-23(fp)
8110af50:	00a04534 	movhi	r2,33044
8110af54:	108cd104 	addi	r2,r2,13124
8110af58:	18c011a4 	muli	r3,r3,70
8110af5c:	10c5883a 	add	r2,r2,r3
8110af60:	10801004 	addi	r2,r2,64
8110af64:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
8110af68:	d0a04b17 	ldw	r2,-32468(gp)
8110af6c:	1009883a 	mov	r4,r2
8110af70:	112f2000 	call	8112f200 <OSSemPost>
8110af74:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110af78:	e0bffac3 	ldbu	r2,-21(fp)
8110af7c:	10803fcc 	andi	r2,r2,255
8110af80:	10002426 	beq	r2,zero,8110b014 <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
8110af84:	110e7140 	call	8110e714 <vFailSetCountSemaphorexBuffer64>
8110af88:	00002206 	br	8110b014 <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
8110af8c:	e0fffa43 	ldbu	r3,-23(fp)
8110af90:	00a04534 	movhi	r2,33044
8110af94:	108cd104 	addi	r2,r2,13124
8110af98:	190011a4 	muli	r4,r3,70
8110af9c:	1105883a 	add	r2,r2,r4
8110afa0:	10801084 	addi	r2,r2,66
8110afa4:	1080000b 	ldhu	r2,0(r2)
8110afa8:	10bfffc4 	addi	r2,r2,-1
8110afac:	1009883a 	mov	r4,r2
8110afb0:	00a04534 	movhi	r2,33044
8110afb4:	108cd104 	addi	r2,r2,13124
8110afb8:	18c011a4 	muli	r3,r3,70
8110afbc:	10c5883a 	add	r2,r2,r3
8110afc0:	10801084 	addi	r2,r2,66
8110afc4:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
8110afc8:	e0fffa43 	ldbu	r3,-23(fp)
8110afcc:	00a04534 	movhi	r2,33044
8110afd0:	108cd104 	addi	r2,r2,13124
8110afd4:	18c011a4 	muli	r3,r3,70
8110afd8:	10c5883a 	add	r2,r2,r3
8110afdc:	10801084 	addi	r2,r2,66
8110afe0:	1080000b 	ldhu	r2,0(r2)
8110afe4:	10bfffcc 	andi	r2,r2,65535
8110afe8:	10a0001c 	xori	r2,r2,32768
8110afec:	10a00004 	addi	r2,r2,-32768
8110aff0:	00800816 	blt	zero,r2,8110b014 <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
8110aff4:	e0bffa83 	ldbu	r2,-22(fp)
8110aff8:	e0fffd04 	addi	r3,fp,-12
8110affc:	1885883a 	add	r2,r3,r2
8110b000:	e0fffa43 	ldbu	r3,-23(fp)
8110b004:	10c00005 	stb	r3,0(r2)
                                        k++;
8110b008:	e0bffa83 	ldbu	r2,-22(fp)
8110b00c:	10800044 	addi	r2,r2,1
8110b010:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
8110b014:	e0bffa43 	ldbu	r2,-23(fp)
8110b018:	10800044 	addi	r2,r2,1
8110b01c:	e0bffa45 	stb	r2,-23(fp)
8110b020:	e0bffa43 	ldbu	r2,-23(fp)
8110b024:	10800130 	cmpltui	r2,r2,4
8110b028:	103fb61e 	bne	r2,zero,8110af04 <__reset+0xfb0eaf04>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
8110b02c:	d0a05a17 	ldw	r2,-32408(gp)
8110b030:	1009883a 	mov	r4,r2
8110b034:	112d4100 	call	8112d410 <OSMutexPost>
                        bFinished64 = TRUE;
8110b038:	00800044 	movi	r2,1
8110b03c:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
8110b040:	e0bff917 	ldw	r2,-28(fp)
8110b044:	10005b1e 	bne	r2,zero,8110b1b4 <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110b048:	d0a05817 	ldw	r2,-32416(gp)
8110b04c:	e0fffac4 	addi	r3,fp,-21
8110b050:	180d883a 	mov	r6,r3
8110b054:	01400084 	movi	r5,2
8110b058:	1009883a 	mov	r4,r2
8110b05c:	112ce6c0 	call	8112ce6c <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110b060:	e0bffac3 	ldbu	r2,-21(fp)
8110b064:	10803fcc 	andi	r2,r2,255
8110b068:	1000521e 	bne	r2,zero,8110b1b4 <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
8110b06c:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
8110b070:	e03ffa45 	stb	zero,-23(fp)
8110b074:	00004706 	br	8110b194 <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
8110b078:	e0fffa43 	ldbu	r3,-23(fp)
8110b07c:	00a04574 	movhi	r2,33045
8110b080:	10b67a04 	addi	r2,r2,-9752
8110b084:	18c021a4 	muli	r3,r3,134
8110b088:	10c5883a 	add	r2,r2,r3
8110b08c:	10802004 	addi	r2,r2,128
8110b090:	1080000b 	ldhu	r2,0(r2)
8110b094:	10bfffcc 	andi	r2,r2,65535
8110b098:	10003b26 	beq	r2,zero,8110b188 <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
8110b09c:	e0fffa43 	ldbu	r3,-23(fp)
8110b0a0:	00a04574 	movhi	r2,33045
8110b0a4:	10b67a04 	addi	r2,r2,-9752
8110b0a8:	18c021a4 	muli	r3,r3,134
8110b0ac:	10c5883a 	add	r2,r2,r3
8110b0b0:	10802104 	addi	r2,r2,132
8110b0b4:	10800003 	ldbu	r2,0(r2)
8110b0b8:	10803fcc 	andi	r2,r2,255
8110b0bc:	1000101e 	bne	r2,zero,8110b100 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
8110b0c0:	e0fffa43 	ldbu	r3,-23(fp)
8110b0c4:	00a04574 	movhi	r2,33045
8110b0c8:	10b67a04 	addi	r2,r2,-9752
8110b0cc:	18c021a4 	muli	r3,r3,134
8110b0d0:	10c5883a 	add	r2,r2,r3
8110b0d4:	10802004 	addi	r2,r2,128
8110b0d8:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
8110b0dc:	d0a04f17 	ldw	r2,-32452(gp)
8110b0e0:	1009883a 	mov	r4,r2
8110b0e4:	112f2000 	call	8112f200 <OSSemPost>
8110b0e8:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110b0ec:	e0bffac3 	ldbu	r2,-21(fp)
8110b0f0:	10803fcc 	andi	r2,r2,255
8110b0f4:	10002426 	beq	r2,zero,8110b188 <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
8110b0f8:	110e77c0 	call	8110e77c <vFailSetCountSemaphorexBuffer128>
8110b0fc:	00002206 	br	8110b188 <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
8110b100:	e0fffa43 	ldbu	r3,-23(fp)
8110b104:	00a04574 	movhi	r2,33045
8110b108:	10b67a04 	addi	r2,r2,-9752
8110b10c:	190021a4 	muli	r4,r3,134
8110b110:	1105883a 	add	r2,r2,r4
8110b114:	10802084 	addi	r2,r2,130
8110b118:	1080000b 	ldhu	r2,0(r2)
8110b11c:	10bfffc4 	addi	r2,r2,-1
8110b120:	1009883a 	mov	r4,r2
8110b124:	00a04574 	movhi	r2,33045
8110b128:	10b67a04 	addi	r2,r2,-9752
8110b12c:	18c021a4 	muli	r3,r3,134
8110b130:	10c5883a 	add	r2,r2,r3
8110b134:	10802084 	addi	r2,r2,130
8110b138:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
8110b13c:	e0fffa43 	ldbu	r3,-23(fp)
8110b140:	00a04574 	movhi	r2,33045
8110b144:	10b67a04 	addi	r2,r2,-9752
8110b148:	18c021a4 	muli	r3,r3,134
8110b14c:	10c5883a 	add	r2,r2,r3
8110b150:	10802084 	addi	r2,r2,130
8110b154:	1080000b 	ldhu	r2,0(r2)
8110b158:	10bfffcc 	andi	r2,r2,65535
8110b15c:	10a0001c 	xori	r2,r2,32768
8110b160:	10a00004 	addi	r2,r2,-32768
8110b164:	00800816 	blt	zero,r2,8110b188 <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
8110b168:	e0bffa83 	ldbu	r2,-22(fp)
8110b16c:	e0fffe04 	addi	r3,fp,-8
8110b170:	1885883a 	add	r2,r3,r2
8110b174:	e0fffa43 	ldbu	r3,-23(fp)
8110b178:	10c00005 	stb	r3,0(r2)
                                        k++;
8110b17c:	e0bffa83 	ldbu	r2,-22(fp)
8110b180:	10800044 	addi	r2,r2,1
8110b184:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110b188:	e0bffa43 	ldbu	r2,-23(fp)
8110b18c:	10800044 	addi	r2,r2,1
8110b190:	e0bffa45 	stb	r2,-23(fp)
8110b194:	e0bffa43 	ldbu	r2,-23(fp)
8110b198:	108000b0 	cmpltui	r2,r2,2
8110b19c:	103fb61e 	bne	r2,zero,8110b078 <__reset+0xfb0eb078>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
8110b1a0:	d0a05817 	ldw	r2,-32416(gp)
8110b1a4:	1009883a 	mov	r4,r2
8110b1a8:	112d4100 	call	8112d410 <OSMutexPost>
                        bFinished128 = TRUE;
8110b1ac:	00800044 	movi	r2,1
8110b1b0:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
8110b1b4:	e0bffa03 	ldbu	r2,-24(fp)
8110b1b8:	10800044 	addi	r2,r2,1
8110b1bc:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110b1c0:	e0bffa03 	ldbu	r2,-24(fp)
8110b1c4:	108001a8 	cmpgeui	r2,r2,6
8110b1c8:	1000061e 	bne	r2,zero,8110b1e4 <vTimeoutCheckerTask+0x550>
8110b1cc:	e0bff717 	ldw	r2,-36(fp)
8110b1d0:	103ee126 	beq	r2,zero,8110ad58 <__reset+0xfb0ead58>
8110b1d4:	e0bff817 	ldw	r2,-32(fp)
8110b1d8:	103edf26 	beq	r2,zero,8110ad58 <__reset+0xfb0ead58>
8110b1dc:	e0bff917 	ldw	r2,-28(fp)
8110b1e0:	103edd26 	beq	r2,zero,8110ad58 <__reset+0xfb0ead58>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
8110b1e4:	e0bff717 	ldw	r2,-36(fp)
8110b1e8:	10000426 	beq	r2,zero,8110b1fc <vTimeoutCheckerTask+0x568>
8110b1ec:	e0bff817 	ldw	r2,-32(fp)
8110b1f0:	10000226 	beq	r2,zero,8110b1fc <vTimeoutCheckerTask+0x568>
8110b1f4:	e0bff917 	ldw	r2,-28(fp)
8110b1f8:	1000011e 	bne	r2,zero,8110b200 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is occourring*/
                vCouldNotCheckBufferTimeOutFunction();
8110b1fc:	110ecbc0 	call	8110ecbc <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) || (ucRetransB64[0] != 255) || (ucRetransB128[0] != 255) ) {
8110b200:	e0bffb03 	ldbu	r2,-20(fp)
8110b204:	10803fcc 	andi	r2,r2,255
8110b208:	10803fd8 	cmpnei	r2,r2,255
8110b20c:	1000081e 	bne	r2,zero,8110b230 <vTimeoutCheckerTask+0x59c>
8110b210:	e0bffd03 	ldbu	r2,-12(fp)
8110b214:	10803fcc 	andi	r2,r2,255
8110b218:	10803fd8 	cmpnei	r2,r2,255
8110b21c:	1000041e 	bne	r2,zero,8110b230 <vTimeoutCheckerTask+0x59c>
8110b220:	e0bffe03 	ldbu	r2,-8(fp)
8110b224:	10803fcc 	andi	r2,r2,255
8110b228:	10803fe0 	cmpeqi	r2,r2,255
8110b22c:	103ead1e 	bne	r2,zero,8110ace4 <__reset+0xfb0eace4>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
8110b230:	d0a05c17 	ldw	r2,-32400(gp)
8110b234:	e0fffac4 	addi	r3,fp,-21
8110b238:	180d883a 	mov	r6,r3
8110b23c:	01400c84 	movi	r5,50
8110b240:	1009883a 	mov	r4,r2
8110b244:	112ce6c0 	call	8112ce6c <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110b248:	e0bffac3 	ldbu	r2,-21(fp)
8110b24c:	10803fcc 	andi	r2,r2,255
8110b250:	1000c41e 	bne	r2,zero,8110b564 <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
8110b254:	e0bffb03 	ldbu	r2,-20(fp)
8110b258:	10803fcc 	andi	r2,r2,255
8110b25c:	10803fe0 	cmpeqi	r2,r2,255
8110b260:	10003c1e 	bne	r2,zero,8110b354 <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b264:	d0a05617 	ldw	r2,-32424(gp)
8110b268:	e0fffac4 	addi	r3,fp,-21
8110b26c:	180d883a 	mov	r6,r3
8110b270:	01400044 	movi	r5,1
8110b274:	1009883a 	mov	r4,r2
8110b278:	112ce6c0 	call	8112ce6c <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b27c:	e0bffac3 	ldbu	r2,-21(fp)
8110b280:	10803fcc 	andi	r2,r2,255
8110b284:	1000321e 	bne	r2,zero,8110b350 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110b288:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
8110b28c:	e0bffa83 	ldbu	r2,-22(fp)
8110b290:	e0fffb04 	addi	r3,fp,-20
8110b294:	1885883a 	add	r2,r3,r2
8110b298:	10800003 	ldbu	r2,0(r2)
8110b29c:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
8110b2a0:	e0fffa43 	ldbu	r3,-23(fp)
8110b2a4:	00a04534 	movhi	r2,33044
8110b2a8:	109e2e04 	addi	r2,r2,30904
8110b2ac:	190009a4 	muli	r4,r3,38
8110b2b0:	1105883a 	add	r2,r2,r4
8110b2b4:	10800904 	addi	r2,r2,36
8110b2b8:	10800003 	ldbu	r2,0(r2)
8110b2bc:	10bfffc4 	addi	r2,r2,-1
8110b2c0:	1009883a 	mov	r4,r2
8110b2c4:	00a04534 	movhi	r2,33044
8110b2c8:	109e2e04 	addi	r2,r2,30904
8110b2cc:	18c009a4 	muli	r3,r3,38
8110b2d0:	10c5883a 	add	r2,r2,r3
8110b2d4:	10800904 	addi	r2,r2,36
8110b2d8:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110b2dc:	e0fffa43 	ldbu	r3,-23(fp)
8110b2e0:	00a04534 	movhi	r2,33044
8110b2e4:	109e2e04 	addi	r2,r2,30904
8110b2e8:	18c009a4 	muli	r3,r3,38
8110b2ec:	10c5883a 	add	r2,r2,r3
8110b2f0:	10800884 	addi	r2,r2,34
8110b2f4:	00c00144 	movi	r3,5
8110b2f8:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
8110b2fc:	e0bffa43 	ldbu	r2,-23(fp)
8110b300:	10c009a4 	muli	r3,r2,38
8110b304:	00a04534 	movhi	r2,33044
8110b308:	109e2e04 	addi	r2,r2,30904
8110b30c:	1885883a 	add	r2,r3,r2
8110b310:	1009883a 	mov	r4,r2
8110b314:	1112f580 	call	81112f58 <puts>
                                k++;
8110b318:	e0bffa83 	ldbu	r2,-22(fp)
8110b31c:	10800044 	addi	r2,r2,1
8110b320:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
8110b324:	e0bffa83 	ldbu	r2,-22(fp)
8110b328:	e0fffb04 	addi	r3,fp,-20
8110b32c:	1885883a 	add	r2,r3,r2
8110b330:	10800003 	ldbu	r2,0(r2)
8110b334:	10803fcc 	andi	r2,r2,255
8110b338:	10803fd8 	cmpnei	r2,r2,255
8110b33c:	103fd31e 	bne	r2,zero,8110b28c <__reset+0xfb0eb28c>

                            OSMutexPost(xMutexBuffer32);
8110b340:	d0a05617 	ldw	r2,-32424(gp)
8110b344:	1009883a 	mov	r4,r2
8110b348:	112d4100 	call	8112d410 <OSMutexPost>
8110b34c:	00000106 	br	8110b354 <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
8110b350:	110ee8c0 	call	8110ee8c <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
8110b354:	e0bffd03 	ldbu	r2,-12(fp)
8110b358:	10803fcc 	andi	r2,r2,255
8110b35c:	10803fe0 	cmpeqi	r2,r2,255
8110b360:	10003c1e 	bne	r2,zero,8110b454 <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b364:	d0a05a17 	ldw	r2,-32408(gp)
8110b368:	e0fffac4 	addi	r3,fp,-21
8110b36c:	180d883a 	mov	r6,r3
8110b370:	01400044 	movi	r5,1
8110b374:	1009883a 	mov	r4,r2
8110b378:	112ce6c0 	call	8112ce6c <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b37c:	e0bffac3 	ldbu	r2,-21(fp)
8110b380:	10803fcc 	andi	r2,r2,255
8110b384:	1000321e 	bne	r2,zero,8110b450 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110b388:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
8110b38c:	e0bffa83 	ldbu	r2,-22(fp)
8110b390:	e0fffd04 	addi	r3,fp,-12
8110b394:	1885883a 	add	r2,r3,r2
8110b398:	10800003 	ldbu	r2,0(r2)
8110b39c:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
8110b3a0:	e0fffa43 	ldbu	r3,-23(fp)
8110b3a4:	00a04534 	movhi	r2,33044
8110b3a8:	108cd104 	addi	r2,r2,13124
8110b3ac:	190011a4 	muli	r4,r3,70
8110b3b0:	1105883a 	add	r2,r2,r4
8110b3b4:	10801104 	addi	r2,r2,68
8110b3b8:	10800003 	ldbu	r2,0(r2)
8110b3bc:	10bfffc4 	addi	r2,r2,-1
8110b3c0:	1009883a 	mov	r4,r2
8110b3c4:	00a04534 	movhi	r2,33044
8110b3c8:	108cd104 	addi	r2,r2,13124
8110b3cc:	18c011a4 	muli	r3,r3,70
8110b3d0:	10c5883a 	add	r2,r2,r3
8110b3d4:	10801104 	addi	r2,r2,68
8110b3d8:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110b3dc:	e0fffa43 	ldbu	r3,-23(fp)
8110b3e0:	00a04534 	movhi	r2,33044
8110b3e4:	108cd104 	addi	r2,r2,13124
8110b3e8:	18c011a4 	muli	r3,r3,70
8110b3ec:	10c5883a 	add	r2,r2,r3
8110b3f0:	10801084 	addi	r2,r2,66
8110b3f4:	00c00144 	movi	r3,5
8110b3f8:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
8110b3fc:	e0bffa43 	ldbu	r2,-23(fp)
8110b400:	10c011a4 	muli	r3,r2,70
8110b404:	00a04534 	movhi	r2,33044
8110b408:	108cd104 	addi	r2,r2,13124
8110b40c:	1885883a 	add	r2,r3,r2
8110b410:	1009883a 	mov	r4,r2
8110b414:	1112f580 	call	81112f58 <puts>
                                k++;
8110b418:	e0bffa83 	ldbu	r2,-22(fp)
8110b41c:	10800044 	addi	r2,r2,1
8110b420:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
8110b424:	e0bffa83 	ldbu	r2,-22(fp)
8110b428:	e0fffd04 	addi	r3,fp,-12
8110b42c:	1885883a 	add	r2,r3,r2
8110b430:	10800003 	ldbu	r2,0(r2)
8110b434:	10803fcc 	andi	r2,r2,255
8110b438:	10803fd8 	cmpnei	r2,r2,255
8110b43c:	103fd31e 	bne	r2,zero,8110b38c <__reset+0xfb0eb38c>

                            OSMutexPost(xMutexBuffer64);
8110b440:	d0a05a17 	ldw	r2,-32408(gp)
8110b444:	1009883a 	mov	r4,r2
8110b448:	112d4100 	call	8112d410 <OSMutexPost>
8110b44c:	00000106 	br	8110b454 <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
8110b450:	110eef40 	call	8110eef4 <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
8110b454:	e0bffe03 	ldbu	r2,-8(fp)
8110b458:	10803fcc 	andi	r2,r2,255
8110b45c:	10803fe0 	cmpeqi	r2,r2,255
8110b460:	10003c1e 	bne	r2,zero,8110b554 <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b464:	d0a05817 	ldw	r2,-32416(gp)
8110b468:	e0fffac4 	addi	r3,fp,-21
8110b46c:	180d883a 	mov	r6,r3
8110b470:	01400044 	movi	r5,1
8110b474:	1009883a 	mov	r4,r2
8110b478:	112ce6c0 	call	8112ce6c <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b47c:	e0bffac3 	ldbu	r2,-21(fp)
8110b480:	10803fcc 	andi	r2,r2,255
8110b484:	1000321e 	bne	r2,zero,8110b550 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110b488:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
8110b48c:	e0bffa83 	ldbu	r2,-22(fp)
8110b490:	e0fffe04 	addi	r3,fp,-8
8110b494:	1885883a 	add	r2,r3,r2
8110b498:	10800003 	ldbu	r2,0(r2)
8110b49c:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
8110b4a0:	e0fffa43 	ldbu	r3,-23(fp)
8110b4a4:	00a04574 	movhi	r2,33045
8110b4a8:	10b67a04 	addi	r2,r2,-9752
8110b4ac:	190021a4 	muli	r4,r3,134
8110b4b0:	1105883a 	add	r2,r2,r4
8110b4b4:	10802104 	addi	r2,r2,132
8110b4b8:	10800003 	ldbu	r2,0(r2)
8110b4bc:	10bfffc4 	addi	r2,r2,-1
8110b4c0:	1009883a 	mov	r4,r2
8110b4c4:	00a04574 	movhi	r2,33045
8110b4c8:	10b67a04 	addi	r2,r2,-9752
8110b4cc:	18c021a4 	muli	r3,r3,134
8110b4d0:	10c5883a 	add	r2,r2,r3
8110b4d4:	10802104 	addi	r2,r2,132
8110b4d8:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b4dc:	e0fffa43 	ldbu	r3,-23(fp)
8110b4e0:	00a04574 	movhi	r2,33045
8110b4e4:	10b67a04 	addi	r2,r2,-9752
8110b4e8:	18c021a4 	muli	r3,r3,134
8110b4ec:	10c5883a 	add	r2,r2,r3
8110b4f0:	10802084 	addi	r2,r2,130
8110b4f4:	00c00144 	movi	r3,5
8110b4f8:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
8110b4fc:	e0bffa43 	ldbu	r2,-23(fp)
8110b500:	10c021a4 	muli	r3,r2,134
8110b504:	00a04574 	movhi	r2,33045
8110b508:	10b67a04 	addi	r2,r2,-9752
8110b50c:	1885883a 	add	r2,r3,r2
8110b510:	1009883a 	mov	r4,r2
8110b514:	1112f580 	call	81112f58 <puts>
                                k++;
8110b518:	e0bffa83 	ldbu	r2,-22(fp)
8110b51c:	10800044 	addi	r2,r2,1
8110b520:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
8110b524:	e0bffa83 	ldbu	r2,-22(fp)
8110b528:	e0fffe04 	addi	r3,fp,-8
8110b52c:	1885883a 	add	r2,r3,r2
8110b530:	10800003 	ldbu	r2,0(r2)
8110b534:	10803fcc 	andi	r2,r2,255
8110b538:	10803fd8 	cmpnei	r2,r2,255
8110b53c:	103fd31e 	bne	r2,zero,8110b48c <__reset+0xfb0eb48c>

                            OSMutexPost(xMutexBuffer128);
8110b540:	d0a05817 	ldw	r2,-32416(gp)
8110b544:	1009883a 	mov	r4,r2
8110b548:	112d4100 	call	8112d410 <OSMutexPost>
8110b54c:	00000106 	br	8110b554 <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
8110b550:	110ef5c0 	call	8110ef5c <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
8110b554:	d0a05c17 	ldw	r2,-32400(gp)
8110b558:	1009883a 	mov	r4,r2
8110b55c:	112d4100 	call	8112d410 <OSMutexPost>
8110b560:	003de006 	br	8110ace4 <__reset+0xfb0eace4>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
8110b564:	110ee240 	call	8110ee24 <vFailCouldNotRetransmitTimeoutTask>
8110b568:	003dde06 	br	8110ace4 <__reset+0xfb0eace4>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110b56c:	110ed540 	call	8110ed54 <vFailGetBlockingSemTimeoutTask>
        }
    }
8110b570:	003ddc06 	br	8110ace4 <__reset+0xfb0eace4>

8110b574 <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110b574:	defff904 	addi	sp,sp,-28
8110b578:	de00012e 	bgeu	sp,et,8110b580 <bResourcesInitRTOS+0xc>
8110b57c:	003b68fa 	trap	3
8110b580:	dfc00615 	stw	ra,24(sp)
8110b584:	df000515 	stw	fp,20(sp)
8110b588:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110b58c:	00800044 	movi	r2,1
8110b590:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110b594:	0009883a 	mov	r4,zero
8110b598:	112eb500 	call	8112eb50 <OSSemCreate>
8110b59c:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCommInit) {
8110b5a0:	d0a04c17 	ldw	r2,-32464(gp)
8110b5a4:	1000021e 	bne	r2,zero,8110b5b0 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110b5a8:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b5ac:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110b5b0:	e0bfff04 	addi	r2,fp,-4
8110b5b4:	100b883a 	mov	r5,r2
8110b5b8:	010000c4 	movi	r4,3
8110b5bc:	112c9980 	call	8112c998 <OSMutexCreate>
8110b5c0:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
8110b5c4:	e0bfff03 	ldbu	r2,-4(fp)
8110b5c8:	10803fcc 	andi	r2,r2,255
8110b5cc:	10000526 	beq	r2,zero,8110b5e4 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110b5d0:	e0bfff03 	ldbu	r2,-4(fp)
8110b5d4:	10803fcc 	andi	r2,r2,255
8110b5d8:	1009883a 	mov	r4,r2
8110b5dc:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b5e0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110b5e4:	e0bfff04 	addi	r2,fp,-4
8110b5e8:	100b883a 	mov	r5,r2
8110b5ec:	01000184 	movi	r4,6
8110b5f0:	112c9980 	call	8112c998 <OSMutexCreate>
8110b5f4:	d0a05815 	stw	r2,-32416(gp)
	if ( err != OS_ERR_NONE ) {
8110b5f8:	e0bfff03 	ldbu	r2,-4(fp)
8110b5fc:	10803fcc 	andi	r2,r2,255
8110b600:	10000526 	beq	r2,zero,8110b618 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110b604:	e0bfff03 	ldbu	r2,-4(fp)
8110b608:	10803fcc 	andi	r2,r2,255
8110b60c:	1009883a 	mov	r4,r2
8110b610:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b614:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110b618:	e0bfff04 	addi	r2,fp,-4
8110b61c:	100b883a 	mov	r5,r2
8110b620:	010001c4 	movi	r4,7
8110b624:	112c9980 	call	8112c998 <OSMutexCreate>
8110b628:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110b62c:	e0bfff03 	ldbu	r2,-4(fp)
8110b630:	10803fcc 	andi	r2,r2,255
8110b634:	10000526 	beq	r2,zero,8110b64c <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110b638:	e0bfff03 	ldbu	r2,-4(fp)
8110b63c:	10803fcc 	andi	r2,r2,255
8110b640:	1009883a 	mov	r4,r2
8110b644:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b648:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110b64c:	e0bfff04 	addi	r2,fp,-4
8110b650:	100b883a 	mov	r5,r2
8110b654:	01000204 	movi	r4,8
8110b658:	112c9980 	call	8112c998 <OSMutexCreate>
8110b65c:	d0a05615 	stw	r2,-32424(gp)
	if ( err != OS_ERR_NONE ) {
8110b660:	e0bfff03 	ldbu	r2,-4(fp)
8110b664:	10803fcc 	andi	r2,r2,255
8110b668:	10000526 	beq	r2,zero,8110b680 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110b66c:	e0bfff03 	ldbu	r2,-4(fp)
8110b670:	10803fcc 	andi	r2,r2,255
8110b674:	1009883a 	mov	r4,r2
8110b678:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b67c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110b680:	01000084 	movi	r4,2
8110b684:	112eb500 	call	8112eb50 <OSSemCreate>
8110b688:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountBuffer128) {
8110b68c:	d0a04f17 	ldw	r2,-32452(gp)
8110b690:	1000021e 	bne	r2,zero,8110b69c <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
8110b694:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b698:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
8110b69c:	01000104 	movi	r4,4
8110b6a0:	112eb500 	call	8112eb50 <OSSemCreate>
8110b6a4:	d0a04b15 	stw	r2,-32468(gp)
	if (!xSemCountBuffer64) {
8110b6a8:	d0a04b17 	ldw	r2,-32468(gp)
8110b6ac:	1000021e 	bne	r2,zero,8110b6b8 <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
8110b6b0:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b6b4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110b6b8:	01000204 	movi	r4,8
8110b6bc:	112eb500 	call	8112eb50 <OSSemCreate>
8110b6c0:	d0a05915 	stw	r2,-32412(gp)
	if (!xSemCountBuffer32) {
8110b6c4:	d0a05917 	ldw	r2,-32412(gp)
8110b6c8:	1000021e 	bne	r2,zero,8110b6d4 <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
8110b6cc:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b6d0:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110b6d4:	e0bfff04 	addi	r2,fp,-4
8110b6d8:	100b883a 	mov	r5,r2
8110b6dc:	01000144 	movi	r4,5
8110b6e0:	112c9980 	call	8112c998 <OSMutexCreate>
8110b6e4:	d0a05115 	stw	r2,-32444(gp)
	if ( err != OS_ERR_NONE ) {
8110b6e8:	e0bfff03 	ldbu	r2,-4(fp)
8110b6ec:	10803fcc 	andi	r2,r2,255
8110b6f0:	10000526 	beq	r2,zero,8110b708 <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
8110b6f4:	e0bfff03 	ldbu	r2,-4(fp)
8110b6f8:	10803fcc 	andi	r2,r2,255
8110b6fc:	1009883a 	mov	r4,r2
8110b700:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b704:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110b708:	e0bfff04 	addi	r2,fp,-4
8110b70c:	100b883a 	mov	r5,r2
8110b710:	01000244 	movi	r4,9
8110b714:	112c9980 	call	8112c998 <OSMutexCreate>
8110b718:	d0a05515 	stw	r2,-32428(gp)
	if ( err != OS_ERR_NONE ) {
8110b71c:	e0bfff03 	ldbu	r2,-4(fp)
8110b720:	10803fcc 	andi	r2,r2,255
8110b724:	10000526 	beq	r2,zero,8110b73c <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110b728:	e0bfff03 	ldbu	r2,-4(fp)
8110b72c:	10803fcc 	andi	r2,r2,255
8110b730:	1009883a 	mov	r4,r2
8110b734:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b738:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110b73c:	0009883a 	mov	r4,zero
8110b740:	112eb500 	call	8112eb50 <OSSemCreate>
8110b744:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemCountReceivedACK) {
8110b748:	d0a05217 	ldw	r2,-32440(gp)
8110b74c:	1000021e 	bne	r2,zero,8110b758 <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
8110b750:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b754:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110b758:	0009883a 	mov	r4,zero
8110b75c:	112eb500 	call	8112eb50 <OSSemCreate>
8110b760:	d0a05015 	stw	r2,-32448(gp)
	if (!xSemCountPreParsed) {
8110b764:	d0a05017 	ldw	r2,-32448(gp)
8110b768:	1000021e 	bne	r2,zero,8110b774 <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
8110b76c:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b770:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110b774:	0009883a 	mov	r4,zero
8110b778:	112eb500 	call	8112eb50 <OSSemCreate>
8110b77c:	d0a04d15 	stw	r2,-32460(gp)
	if (!xSemCountSenderACK) {
8110b780:	d0a04d17 	ldw	r2,-32460(gp)
8110b784:	1000021e 	bne	r2,zero,8110b790 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110b788:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b78c:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110b790:	e0bfff04 	addi	r2,fp,-4
8110b794:	100b883a 	mov	r5,r2
8110b798:	01000104 	movi	r4,4
8110b79c:	112c9980 	call	8112c998 <OSMutexCreate>
8110b7a0:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110b7a4:	e0bfff03 	ldbu	r2,-4(fp)
8110b7a8:	10803fcc 	andi	r2,r2,255
8110b7ac:	10000526 	beq	r2,zero,8110b7c4 <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
8110b7b0:	e0bfff03 	ldbu	r2,-4(fp)
8110b7b4:	10803fcc 	andi	r2,r2,255
8110b7b8:	1009883a 	mov	r4,r2
8110b7bc:	110e0e40 	call	8110e0e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b7c0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110b7c4:	0009883a 	mov	r4,zero
8110b7c8:	112eb500 	call	8112eb50 <OSSemCreate>
8110b7cc:	d0a05315 	stw	r2,-32436(gp)
	if (!xSemTimeoutChecker) {
8110b7d0:	d0a05317 	ldw	r2,-32436(gp)
8110b7d4:	1000021e 	bne	r2,zero,8110b7e0 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110b7d8:	110e1440 	call	8110e144 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b7dc:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110b7e0:	e0bfff04 	addi	r2,fp,-4
8110b7e4:	d8800215 	stw	r2,8(sp)
8110b7e8:	00a04534 	movhi	r2,33044
8110b7ec:	10b43f04 	addi	r2,r2,-12036
8110b7f0:	d8800115 	stw	r2,4(sp)
8110b7f4:	d8000015 	stw	zero,0(sp)
8110b7f8:	01e04474 	movhi	r7,33041
8110b7fc:	39f3a404 	addi	r7,r7,-12656
8110b800:	01800084 	movi	r6,2
8110b804:	01400144 	movi	r5,5
8110b808:	01003204 	movi	r4,200
8110b80c:	113121c0 	call	8113121c <OSTmrCreate>
8110b810:	d0a05715 	stw	r2,-32420(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110b814:	e0bfff03 	ldbu	r2,-4(fp)
8110b818:	10803fcc 	andi	r2,r2,255
8110b81c:	10000226 	beq	r2,zero,8110b828 <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
8110b820:	110ec700 	call	8110ec70 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110b824:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110b828:	e0bffe17 	ldw	r2,-8(fp)
}
8110b82c:	e037883a 	mov	sp,fp
8110b830:	dfc00117 	ldw	ra,4(sp)
8110b834:	df000017 	ldw	fp,0(sp)
8110b838:	dec00204 	addi	sp,sp,8
8110b83c:	f800283a 	ret

8110b840 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
8110b840:	deffff04 	addi	sp,sp,-4
8110b844:	de00012e 	bgeu	sp,et,8110b84c <vVariablesInitialization+0xc>
8110b848:	003b68fa 	trap	3
8110b84c:	df000015 	stw	fp,0(sp)
8110b850:	d839883a 	mov	fp,sp
	usiIdCMD = 2;
8110b854:	00800084 	movi	r2,2
8110b858:	d0a0540d 	sth	r2,-32432(gp)
}
8110b85c:	0001883a 	nop
8110b860:	e037883a 	mov	sp,fp
8110b864:	df000017 	ldw	fp,0(sp)
8110b868:	dec00104 	addi	sp,sp,4
8110b86c:	f800283a 	ret

8110b870 <main>:



/* Entry point */
int main(void)
{
8110b870:	defff704 	addi	sp,sp,-36
8110b874:	de00012e 	bgeu	sp,et,8110b87c <main+0xc>
8110b878:	003b68fa 	trap	3
8110b87c:	dfc00815 	stw	ra,32(sp)
8110b880:	df000715 	stw	fp,28(sp)
8110b884:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110b888:	e03ffe15 	stw	zero,-8(fp)
	
	OSInit(); /* todo: Talvez remover */
8110b88c:	1128e340 	call	81128e34 <OSInit>

	/* Clear the RTOS timer */
	OSTimeSet(0);
8110b890:	0009883a 	mov	r4,zero
8110b894:	11311b40 	call	811311b4 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110b898:	01604534 	movhi	r5,33044
8110b89c:	29744304 	addi	r5,r5,-12020
8110b8a0:	01204534 	movhi	r4,33044
8110b8a4:	21344404 	addi	r4,r4,-12016
8110b8a8:	1111aec0 	call	81111aec <fopen>
8110b8ac:	d0a04e15 	stw	r2,-32456(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110b8b0:	d0a04e17 	ldw	r2,-32456(gp)
8110b8b4:	100f883a 	mov	r7,r2
8110b8b8:	01800484 	movi	r6,18
8110b8bc:	01400044 	movi	r5,1
8110b8c0:	01204534 	movhi	r4,33044
8110b8c4:	21344904 	addi	r4,r4,-11996
8110b8c8:	11121200 	call	81112120 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110b8cc:	110f7d40 	call	8110f7d4 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110b8d0:	11100a00 	call	811100a0 <bTestSimucamCriticalHW>
8110b8d4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b8d8:	e0bffe17 	ldw	r2,-8(fp)
8110b8dc:	1000031e 	bne	r2,zero,8110b8ec <main+0x7c>
		vFailTestCriticasParts();
8110b8e0:	110e1900 	call	8110e190 <vFailTestCriticasParts>
		return -1;
8110b8e4:	00bfffc4 	movi	r2,-1
8110b8e8:	00003c06 	br	8110b9dc <main+0x16c>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110b8ec:	110feec0 	call	8110feec <bInitializeSDCard>
8110b8f0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b8f4:	e0bffe17 	ldw	r2,-8(fp)
8110b8f8:	1000031e 	bne	r2,zero,8110b908 <main+0x98>
		vFailTestCriticasParts();
8110b8fc:	110e1900 	call	8110e190 <vFailTestCriticasParts>
		return -1;
8110b900:	00bfffc4 	movi	r2,-1
8110b904:	00003506 	br	8110b9dc <main+0x16c>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110b908:	110d2b80 	call	8110d2b8 <vLoadDefaultETHConf>
8110b90c:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b910:	e0bffe17 	ldw	r2,-8(fp)
8110b914:	1000091e 	bne	r2,zero,8110b93c <main+0xcc>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110b918:	d0a04e17 	ldw	r2,-32456(gp)
8110b91c:	100f883a 	mov	r7,r2
8110b920:	01801644 	movi	r6,89
8110b924:	01400044 	movi	r5,1
8110b928:	01204534 	movhi	r4,33044
8110b92c:	21344e04 	addi	r4,r4,-11976
8110b930:	11121200 	call	81112120 <fwrite>
		#endif
		return -1;
8110b934:	00bfffc4 	movi	r2,-1
8110b938:	00002806 	br	8110b9dc <main+0x16c>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110b93c:	110dc440 	call	8110dc44 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110b940:	110b5740 	call	8110b574 <bResourcesInitRTOS>
8110b944:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b948:	e0bffe17 	ldw	r2,-8(fp)
8110b94c:	1000091e 	bne	r2,zero,8110b974 <main+0x104>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110b950:	d0a04e17 	ldw	r2,-32456(gp)
8110b954:	100f883a 	mov	r7,r2
8110b958:	01800ac4 	movi	r6,43
8110b95c:	01400044 	movi	r5,1
8110b960:	01204534 	movhi	r4,33044
8110b964:	21346504 	addi	r4,r4,-11884
8110b968:	11121200 	call	81112120 <fwrite>
		return -1;
8110b96c:	00bfffc4 	movi	r2,-1
8110b970:	00001a06 	br	8110b9dc <main+0x16c>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110b974:	01204534 	movhi	r4,33044
8110b978:	21151704 	addi	r4,r4,21596
8110b97c:	110f9040 	call	8110f904 <vSimucamStructureInit>
									vInitialTask_stk,
									INITIALIZATION_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vInitialTask,
8110b980:	d8000415 	stw	zero,16(sp)
8110b984:	d8000315 	stw	zero,12(sp)
8110b988:	00820004 	movi	r2,2048
8110b98c:	d8800215 	stw	r2,8(sp)
8110b990:	00a04574 	movhi	r2,33045
8110b994:	10ae7a04 	addi	r2,r2,-17944
8110b998:	d8800115 	stw	r2,4(sp)
8110b99c:	00800044 	movi	r2,1
8110b9a0:	d8800015 	stw	r2,0(sp)
8110b9a4:	01c00044 	movi	r7,1
8110b9a8:	01a04574 	movhi	r6,33045
8110b9ac:	31b67904 	addi	r6,r6,-9756
8110b9b0:	000b883a 	mov	r5,zero
8110b9b4:	01204474 	movhi	r4,33041
8110b9b8:	21231b04 	addi	r4,r4,-29588
8110b9bc:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
8110b9c0:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110b9c4:	e0bfff03 	ldbu	r2,-4(fp)
8110b9c8:	1000021e 	bne	r2,zero,8110b9d4 <main+0x164>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110b9cc:	11291640 	call	81129164 <OSStart>
8110b9d0:	00000106 	br	8110b9d8 <main+0x168>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110b9d4:	110e57c0 	call	8110e57c <vFailInitialization>
	}
  
	return 0;
8110b9d8:	0005883a 	mov	r2,zero
}
8110b9dc:	e037883a 	mov	sp,fp
8110b9e0:	dfc00117 	ldw	ra,4(sp)
8110b9e4:	df000017 	ldw	fp,0(sp)
8110b9e8:	dec00204 	addi	sp,sp,8
8110b9ec:	f800283a 	ret

8110b9f0 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110b9f0:	defffe04 	addi	sp,sp,-8
8110b9f4:	de00012e 	bgeu	sp,et,8110b9fc <vCCDLoadDefaultValues+0xc>
8110b9f8:	003b68fa 	trap	3
8110b9fc:	df000115 	stw	fp,4(sp)
8110ba00:	df000104 	addi	fp,sp,4
8110ba04:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110ba08:	e0bfff17 	ldw	r2,-4(fp)
8110ba0c:	00c46784 	movi	r3,4510
8110ba10:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110ba14:	e0bfff17 	ldw	r2,-4(fp)
8110ba18:	00c00784 	movi	r3,30
8110ba1c:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110ba20:	e0bfff17 	ldw	r2,-4(fp)
8110ba24:	00c233c4 	movi	r3,2255
8110ba28:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110ba2c:	e0bfff17 	ldw	r2,-4(fp)
8110ba30:	00c003c4 	movi	r3,15
8110ba34:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110ba38:	e0bfff17 	ldw	r2,-4(fp)
8110ba3c:	00c00644 	movi	r3,25
8110ba40:	10c0000d 	sth	r3,0(r2)
}
8110ba44:	0001883a 	nop
8110ba48:	e037883a 	mov	sp,fp
8110ba4c:	df000017 	ldw	fp,0(sp)
8110ba50:	dec00104 	addi	sp,sp,4
8110ba54:	f800283a 	ret

8110ba58 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110ba58:	defff904 	addi	sp,sp,-28
8110ba5c:	de00012e 	bgeu	sp,et,8110ba64 <vCCDChangeValues+0xc>
8110ba60:	003b68fa 	trap	3
8110ba64:	df000615 	stw	fp,24(sp)
8110ba68:	df000604 	addi	fp,sp,24
8110ba6c:	e13ffa15 	stw	r4,-24(fp)
8110ba70:	2811883a 	mov	r8,r5
8110ba74:	300b883a 	mov	r5,r6
8110ba78:	3809883a 	mov	r4,r7
8110ba7c:	e0c00117 	ldw	r3,4(fp)
8110ba80:	e0800217 	ldw	r2,8(fp)
8110ba84:	e23ffb0d 	sth	r8,-20(fp)
8110ba88:	e17ffc0d 	sth	r5,-16(fp)
8110ba8c:	e13ffd0d 	sth	r4,-12(fp)
8110ba90:	e0fffe0d 	sth	r3,-8(fp)
8110ba94:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110ba98:	e0bffa17 	ldw	r2,-24(fp)
8110ba9c:	e0fffb0b 	ldhu	r3,-20(fp)
8110baa0:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110baa4:	e0bffa17 	ldw	r2,-24(fp)
8110baa8:	e0fffc0b 	ldhu	r3,-16(fp)
8110baac:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110bab0:	e0bffa17 	ldw	r2,-24(fp)
8110bab4:	e0fffd0b 	ldhu	r3,-12(fp)
8110bab8:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110babc:	e0bffa17 	ldw	r2,-24(fp)
8110bac0:	e0fffe0b 	ldhu	r3,-8(fp)
8110bac4:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110bac8:	e0bffa17 	ldw	r2,-24(fp)
8110bacc:	e0ffff0b 	ldhu	r3,-4(fp)
8110bad0:	10c0000d 	sth	r3,0(r2)
}
8110bad4:	0001883a 	nop
8110bad8:	e037883a 	mov	sp,fp
8110badc:	df000017 	ldw	fp,0(sp)
8110bae0:	dec00104 	addi	sp,sp,4
8110bae4:	f800283a 	ret

8110bae8 <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110bae8:	deffd804 	addi	sp,sp,-160
8110baec:	de00012e 	bgeu	sp,et,8110baf4 <bSendUART128+0xc>
8110baf0:	003b68fa 	trap	3
8110baf4:	dfc02715 	stw	ra,156(sp)
8110baf8:	df002615 	stw	fp,152(sp)
8110bafc:	df002604 	addi	fp,sp,152
8110bb00:	e13ffe15 	stw	r4,-8(fp)
8110bb04:	2805883a 	mov	r2,r5
8110bb08:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110bb0c:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110bb10:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110bb14:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110bb18:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110bb1c:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, strlen(cBuffer));
8110bb20:	e13ffe17 	ldw	r4,-8(fp)
8110bb24:	11134b00 	call	811134b0 <strlen>
8110bb28:	1007883a 	mov	r3,r2
8110bb2c:	e0bfdd44 	addi	r2,fp,-139
8110bb30:	180d883a 	mov	r6,r3
8110bb34:	e17ffe17 	ldw	r5,-8(fp)
8110bb38:	1009883a 	mov	r4,r2
8110bb3c:	1112b340 	call	81112b34 <memcpy>
	bSuccess = FALSE;
8110bb40:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110bb44:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
8110bb48:	e0bfda03 	ldbu	r2,-152(fp)
8110bb4c:	10800044 	addi	r2,r2,1
8110bb50:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110bb54:	d0a04f17 	ldw	r2,-32452(gp)
8110bb58:	e0ffdc84 	addi	r3,fp,-142
8110bb5c:	180d883a 	mov	r6,r3
8110bb60:	01401904 	movi	r5,100
8110bb64:	1009883a 	mov	r4,r2
8110bb68:	112ee780 	call	8112ee78 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110bb6c:	e0bfdc83 	ldbu	r2,-142(fp)
8110bb70:	10803fcc 	andi	r2,r2,255
8110bb74:	1000b61e 	bne	r2,zero,8110be50 <bSendUART128+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110bb78:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110bb7c:	e0bfda83 	ldbu	r2,-150(fp)
8110bb80:	10800044 	addi	r2,r2,1
8110bb84:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110bb88:	d0a05c17 	ldw	r2,-32400(gp)
8110bb8c:	e0ffdd04 	addi	r3,fp,-140
8110bb90:	180d883a 	mov	r6,r3
8110bb94:	01400144 	movi	r5,5
8110bb98:	1009883a 	mov	r4,r2
8110bb9c:	112ce6c0 	call	8112ce6c <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110bba0:	e0bfdd03 	ldbu	r2,-140(fp)
8110bba4:	10803fcc 	andi	r2,r2,255
8110bba8:	1000991e 	bne	r2,zero,8110be10 <bSendUART128+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
8110bbac:	e0bfdd44 	addi	r2,fp,-139
8110bbb0:	1009883a 	mov	r4,r2
8110bbb4:	1112f580 	call	81112f58 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110bbb8:	d0a05817 	ldw	r2,-32416(gp)
8110bbbc:	e0ffdcc4 	addi	r3,fp,-141
8110bbc0:	180b883a 	mov	r5,r3
8110bbc4:	1009883a 	mov	r4,r2
8110bbc8:	112c7ec0 	call	8112c7ec <OSMutexAccept>
8110bbcc:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110bbd0:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bbd4:	10803fcc 	andi	r2,r2,255
8110bbd8:	10003a1e 	bne	r2,zero,8110bcc4 <bSendUART128+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110bbdc:	e03fdac5 	stb	zero,-149(fp)
8110bbe0:	00003206 	br	8110bcac <bSendUART128+0x1c4>
						{
							if ( xBuffer128[i].usiId == 0 ) {
8110bbe4:	e0ffdac3 	ldbu	r3,-149(fp)
8110bbe8:	00a04574 	movhi	r2,33045
8110bbec:	10b67a04 	addi	r2,r2,-9752
8110bbf0:	18c021a4 	muli	r3,r3,134
8110bbf4:	10c5883a 	add	r2,r2,r3
8110bbf8:	10802004 	addi	r2,r2,128
8110bbfc:	1080000b 	ldhu	r2,0(r2)
8110bc00:	10bfffcc 	andi	r2,r2,65535
8110bc04:	1000261e 	bne	r2,zero,8110bca0 <bSendUART128+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110bc08:	00800044 	movi	r2,1
8110bc0c:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110bc10:	e0bfdac3 	ldbu	r2,-149(fp)
8110bc14:	10c021a4 	muli	r3,r2,134
8110bc18:	00a04574 	movhi	r2,33045
8110bc1c:	10b67a04 	addi	r2,r2,-9752
8110bc20:	1885883a 	add	r2,r3,r2
8110bc24:	1009883a 	mov	r4,r2
8110bc28:	e0bfdd44 	addi	r2,fp,-139
8110bc2c:	00c02004 	movi	r3,128
8110bc30:	180d883a 	mov	r6,r3
8110bc34:	100b883a 	mov	r5,r2
8110bc38:	1112b340 	call	81112b34 <memcpy>
								xBuffer128[i].usiId = siIdMessage;
8110bc3c:	e13fdac3 	ldbu	r4,-149(fp)
8110bc40:	e0ffff0b 	ldhu	r3,-4(fp)
8110bc44:	00a04574 	movhi	r2,33045
8110bc48:	10b67a04 	addi	r2,r2,-9752
8110bc4c:	210021a4 	muli	r4,r4,134
8110bc50:	1105883a 	add	r2,r2,r4
8110bc54:	10802004 	addi	r2,r2,128
8110bc58:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110bc5c:	e0ffdac3 	ldbu	r3,-149(fp)
8110bc60:	00a04574 	movhi	r2,33045
8110bc64:	10b67a04 	addi	r2,r2,-9752
8110bc68:	18c021a4 	muli	r3,r3,134
8110bc6c:	10c5883a 	add	r2,r2,r3
8110bc70:	10802104 	addi	r2,r2,132
8110bc74:	00c000c4 	movi	r3,3
8110bc78:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110bc7c:	e0ffdac3 	ldbu	r3,-149(fp)
8110bc80:	00a04574 	movhi	r2,33045
8110bc84:	10b67a04 	addi	r2,r2,-9752
8110bc88:	18c021a4 	muli	r3,r3,134
8110bc8c:	10c5883a 	add	r2,r2,r3
8110bc90:	10802084 	addi	r2,r2,130
8110bc94:	00c00144 	movi	r3,5
8110bc98:	10c0000d 	sth	r3,0(r2)
								break;
8110bc9c:	00000606 	br	8110bcb8 <bSendUART128+0x1d0>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110bca0:	e0bfdac3 	ldbu	r2,-149(fp)
8110bca4:	10800044 	addi	r2,r2,1
8110bca8:	e0bfdac5 	stb	r2,-149(fp)
8110bcac:	e0bfdac3 	ldbu	r2,-149(fp)
8110bcb0:	108000b0 	cmpltui	r2,r2,2
8110bcb4:	103fcb1e 	bne	r2,zero,8110bbe4 <__reset+0xfb0ebbe4>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110bcb8:	d0a05817 	ldw	r2,-32416(gp)
8110bcbc:	1009883a 	mov	r4,r2
8110bcc0:	112d4100 	call	8112d410 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110bcc4:	d0a05c17 	ldw	r2,-32400(gp)
8110bcc8:	1009883a 	mov	r4,r2
8110bccc:	112d4100 	call	8112d410 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110bcd0:	e0bfdb17 	ldw	r2,-148(fp)
8110bcd4:	10800060 	cmpeqi	r2,r2,1
8110bcd8:	10004d1e 	bne	r2,zero,8110be10 <bSendUART128+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110bcdc:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110bce0:	e0bfda43 	ldbu	r2,-151(fp)
8110bce4:	10800044 	addi	r2,r2,1
8110bce8:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110bcec:	d0a05817 	ldw	r2,-32416(gp)
8110bcf0:	e0ffdcc4 	addi	r3,fp,-141
8110bcf4:	180d883a 	mov	r6,r3
8110bcf8:	01400144 	movi	r5,5
8110bcfc:	1009883a 	mov	r4,r2
8110bd00:	112ce6c0 	call	8112ce6c <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110bd04:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bd08:	10803fcc 	andi	r2,r2,255
8110bd0c:	10003a1e 	bne	r2,zero,8110bdf8 <bSendUART128+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110bd10:	e03fdac5 	stb	zero,-149(fp)
8110bd14:	00003206 	br	8110bde0 <bSendUART128+0x2f8>
								{
									if ( xBuffer128[i].usiId == 0 ) {
8110bd18:	e0ffdac3 	ldbu	r3,-149(fp)
8110bd1c:	00a04574 	movhi	r2,33045
8110bd20:	10b67a04 	addi	r2,r2,-9752
8110bd24:	18c021a4 	muli	r3,r3,134
8110bd28:	10c5883a 	add	r2,r2,r3
8110bd2c:	10802004 	addi	r2,r2,128
8110bd30:	1080000b 	ldhu	r2,0(r2)
8110bd34:	10bfffcc 	andi	r2,r2,65535
8110bd38:	1000261e 	bne	r2,zero,8110bdd4 <bSendUART128+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110bd3c:	00800044 	movi	r2,1
8110bd40:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110bd44:	e0bfdac3 	ldbu	r2,-149(fp)
8110bd48:	10c021a4 	muli	r3,r2,134
8110bd4c:	00a04574 	movhi	r2,33045
8110bd50:	10b67a04 	addi	r2,r2,-9752
8110bd54:	1885883a 	add	r2,r3,r2
8110bd58:	1009883a 	mov	r4,r2
8110bd5c:	e0bfdd44 	addi	r2,fp,-139
8110bd60:	00c02004 	movi	r3,128
8110bd64:	180d883a 	mov	r6,r3
8110bd68:	100b883a 	mov	r5,r2
8110bd6c:	1112b340 	call	81112b34 <memcpy>
										xBuffer128[i].usiId = siIdMessage;
8110bd70:	e13fdac3 	ldbu	r4,-149(fp)
8110bd74:	e0ffff0b 	ldhu	r3,-4(fp)
8110bd78:	00a04574 	movhi	r2,33045
8110bd7c:	10b67a04 	addi	r2,r2,-9752
8110bd80:	210021a4 	muli	r4,r4,134
8110bd84:	1105883a 	add	r2,r2,r4
8110bd88:	10802004 	addi	r2,r2,128
8110bd8c:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110bd90:	e0ffdac3 	ldbu	r3,-149(fp)
8110bd94:	00a04574 	movhi	r2,33045
8110bd98:	10b67a04 	addi	r2,r2,-9752
8110bd9c:	18c021a4 	muli	r3,r3,134
8110bda0:	10c5883a 	add	r2,r2,r3
8110bda4:	10802104 	addi	r2,r2,132
8110bda8:	00c000c4 	movi	r3,3
8110bdac:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110bdb0:	e0ffdac3 	ldbu	r3,-149(fp)
8110bdb4:	00a04574 	movhi	r2,33045
8110bdb8:	10b67a04 	addi	r2,r2,-9752
8110bdbc:	18c021a4 	muli	r3,r3,134
8110bdc0:	10c5883a 	add	r2,r2,r3
8110bdc4:	10802084 	addi	r2,r2,130
8110bdc8:	00c00144 	movi	r3,5
8110bdcc:	10c0000d 	sth	r3,0(r2)
										break;
8110bdd0:	00000606 	br	8110bdec <bSendUART128+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110bdd4:	e0bfdac3 	ldbu	r2,-149(fp)
8110bdd8:	10800044 	addi	r2,r2,1
8110bddc:	e0bfdac5 	stb	r2,-149(fp)
8110bde0:	e0bfdac3 	ldbu	r2,-149(fp)
8110bde4:	108000b0 	cmpltui	r2,r2,2
8110bde8:	103fcb1e 	bne	r2,zero,8110bd18 <__reset+0xfb0ebd18>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110bdec:	d0a05817 	ldw	r2,-32416(gp)
8110bdf0:	1009883a 	mov	r4,r2
8110bdf4:	112d4100 	call	8112d410 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110bdf8:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bdfc:	10803fcc 	andi	r2,r2,255
8110be00:	10000326 	beq	r2,zero,8110be10 <bSendUART128+0x328>
8110be04:	e0bfda43 	ldbu	r2,-151(fp)
8110be08:	10800130 	cmpltui	r2,r2,4
8110be0c:	103fb41e 	bne	r2,zero,8110bce0 <__reset+0xfb0ebce0>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110be10:	e0bfdd03 	ldbu	r2,-140(fp)
8110be14:	10803fcc 	andi	r2,r2,255
8110be18:	10000326 	beq	r2,zero,8110be28 <bSendUART128+0x340>
8110be1c:	e0bfda83 	ldbu	r2,-150(fp)
8110be20:	10800130 	cmpltui	r2,r2,4
8110be24:	103f551e 	bne	r2,zero,8110bb7c <__reset+0xfb0ebb7c>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110be28:	e0bfdb17 	ldw	r2,-148(fp)
8110be2c:	10800060 	cmpeqi	r2,r2,1
8110be30:	1000071e 	bne	r2,zero,8110be50 <bSendUART128+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
8110be34:	d0a04f17 	ldw	r2,-32452(gp)
8110be38:	1009883a 	mov	r4,r2
8110be3c:	112f2000 	call	8112f200 <OSSemPost>
8110be40:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
8110be44:	e0bfdc43 	ldbu	r2,-143(fp)
8110be48:	10000126 	beq	r2,zero,8110be50 <bSendUART128+0x368>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110be4c:	110e77c0 	call	8110e77c <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110be50:	e0bfdc83 	ldbu	r2,-142(fp)
8110be54:	10803fcc 	andi	r2,r2,255
8110be58:	10000326 	beq	r2,zero,8110be68 <bSendUART128+0x380>
8110be5c:	e0bfda03 	ldbu	r2,-152(fp)
8110be60:	108001b0 	cmpltui	r2,r2,6
8110be64:	103f381e 	bne	r2,zero,8110bb48 <__reset+0xfb0ebb48>

	return bSuccess;
8110be68:	e0bfdb17 	ldw	r2,-148(fp)
}
8110be6c:	e037883a 	mov	sp,fp
8110be70:	dfc00117 	ldw	ra,4(sp)
8110be74:	df000017 	ldw	fp,0(sp)
8110be78:	dec00204 	addi	sp,sp,8
8110be7c:	f800283a 	ret

8110be80 <bSendUART64>:



/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART64 ( char *cBuffer, short int siIdMessage ) {
8110be80:	deffe804 	addi	sp,sp,-96
8110be84:	de00012e 	bgeu	sp,et,8110be8c <bSendUART64+0xc>
8110be88:	003b68fa 	trap	3
8110be8c:	dfc01715 	stw	ra,92(sp)
8110be90:	df001615 	stw	fp,88(sp)
8110be94:	df001604 	addi	fp,sp,88
8110be98:	e13ffe15 	stw	r4,-8(fp)
8110be9c:	2805883a 	mov	r2,r5
8110bea0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110bea4:	e03fea05 	stb	zero,-88(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110bea8:	e03fea45 	stb	zero,-87(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110beac:	e03fea85 	stb	zero,-86(fp)
	unsigned char i = 0;
8110beb0:	e03feac5 	stb	zero,-85(fp)
	bool bSuccess = FALSE;
8110beb4:	e03feb15 	stw	zero,-84(fp)
	char cLocalBuffer64[64];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer64, cBuffer, strlen(cBuffer));
8110beb8:	e13ffe17 	ldw	r4,-8(fp)
8110bebc:	11134b00 	call	811134b0 <strlen>
8110bec0:	1007883a 	mov	r3,r2
8110bec4:	e0bfed44 	addi	r2,fp,-75
8110bec8:	180d883a 	mov	r6,r3
8110becc:	e17ffe17 	ldw	r5,-8(fp)
8110bed0:	1009883a 	mov	r4,r2
8110bed4:	1112b340 	call	81112b34 <memcpy>
	bSuccess = FALSE;
8110bed8:	e03feb15 	stw	zero,-84(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110bedc:	e03fea05 	stb	zero,-88(fp)
	do
	{
		ucCountRetriesSem++;
8110bee0:	e0bfea03 	ldbu	r2,-88(fp)
8110bee4:	10800044 	addi	r2,r2,1
8110bee8:	e0bfea05 	stb	r2,-88(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110beec:	d0a04b17 	ldw	r2,-32468(gp)
8110bef0:	e0ffec84 	addi	r3,fp,-78
8110bef4:	180d883a 	mov	r6,r3
8110bef8:	01401904 	movi	r5,100
8110befc:	1009883a 	mov	r4,r2
8110bf00:	112ee780 	call	8112ee78 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110bf04:	e0bfec83 	ldbu	r2,-78(fp)
8110bf08:	10803fcc 	andi	r2,r2,255
8110bf0c:	1000b61e 	bne	r2,zero,8110c1e8 <bSendUART64+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110bf10:	e03fea85 	stb	zero,-86(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110bf14:	e0bfea83 	ldbu	r2,-86(fp)
8110bf18:	10800044 	addi	r2,r2,1
8110bf1c:	e0bfea85 	stb	r2,-86(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110bf20:	d0a05c17 	ldw	r2,-32400(gp)
8110bf24:	e0ffed04 	addi	r3,fp,-76
8110bf28:	180d883a 	mov	r6,r3
8110bf2c:	01400144 	movi	r5,5
8110bf30:	1009883a 	mov	r4,r2
8110bf34:	112ce6c0 	call	8112ce6c <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110bf38:	e0bfed03 	ldbu	r2,-76(fp)
8110bf3c:	10803fcc 	andi	r2,r2,255
8110bf40:	1000991e 	bne	r2,zero,8110c1a8 <bSendUART64+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer64);
8110bf44:	e0bfed44 	addi	r2,fp,-75
8110bf48:	1009883a 	mov	r4,r2
8110bf4c:	1112f580 	call	81112f58 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110bf50:	d0a05a17 	ldw	r2,-32408(gp)
8110bf54:	e0ffecc4 	addi	r3,fp,-77
8110bf58:	180b883a 	mov	r5,r3
8110bf5c:	1009883a 	mov	r4,r2
8110bf60:	112c7ec0 	call	8112c7ec <OSMutexAccept>
8110bf64:	e0bfec05 	stb	r2,-80(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110bf68:	e0bfecc3 	ldbu	r2,-77(fp)
8110bf6c:	10803fcc 	andi	r2,r2,255
8110bf70:	10003a1e 	bne	r2,zero,8110c05c <bSendUART64+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110bf74:	e03feac5 	stb	zero,-85(fp)
8110bf78:	00003206 	br	8110c044 <bSendUART64+0x1c4>
						{
							if ( xBuffer64[i].usiId == 0 ) {
8110bf7c:	e0ffeac3 	ldbu	r3,-85(fp)
8110bf80:	00a04534 	movhi	r2,33044
8110bf84:	108cd104 	addi	r2,r2,13124
8110bf88:	18c011a4 	muli	r3,r3,70
8110bf8c:	10c5883a 	add	r2,r2,r3
8110bf90:	10801004 	addi	r2,r2,64
8110bf94:	1080000b 	ldhu	r2,0(r2)
8110bf98:	10bfffcc 	andi	r2,r2,65535
8110bf9c:	1000261e 	bne	r2,zero,8110c038 <bSendUART64+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110bfa0:	00800044 	movi	r2,1
8110bfa4:	e0bfeb15 	stw	r2,-84(fp)
								memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110bfa8:	e0bfeac3 	ldbu	r2,-85(fp)
8110bfac:	10c011a4 	muli	r3,r2,70
8110bfb0:	00a04534 	movhi	r2,33044
8110bfb4:	108cd104 	addi	r2,r2,13124
8110bfb8:	1885883a 	add	r2,r3,r2
8110bfbc:	1009883a 	mov	r4,r2
8110bfc0:	e0bfed44 	addi	r2,fp,-75
8110bfc4:	00c01004 	movi	r3,64
8110bfc8:	180d883a 	mov	r6,r3
8110bfcc:	100b883a 	mov	r5,r2
8110bfd0:	1112b340 	call	81112b34 <memcpy>
								xBuffer64[i].usiId = siIdMessage;
8110bfd4:	e13feac3 	ldbu	r4,-85(fp)
8110bfd8:	e0ffff0b 	ldhu	r3,-4(fp)
8110bfdc:	00a04534 	movhi	r2,33044
8110bfe0:	108cd104 	addi	r2,r2,13124
8110bfe4:	210011a4 	muli	r4,r4,70
8110bfe8:	1105883a 	add	r2,r2,r4
8110bfec:	10801004 	addi	r2,r2,64
8110bff0:	10c0000d 	sth	r3,0(r2)
								xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110bff4:	e0ffeac3 	ldbu	r3,-85(fp)
8110bff8:	00a04534 	movhi	r2,33044
8110bffc:	108cd104 	addi	r2,r2,13124
8110c000:	18c011a4 	muli	r3,r3,70
8110c004:	10c5883a 	add	r2,r2,r3
8110c008:	10801104 	addi	r2,r2,68
8110c00c:	00c000c4 	movi	r3,3
8110c010:	10c00005 	stb	r3,0(r2)
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110c014:	e0ffeac3 	ldbu	r3,-85(fp)
8110c018:	00a04534 	movhi	r2,33044
8110c01c:	108cd104 	addi	r2,r2,13124
8110c020:	18c011a4 	muli	r3,r3,70
8110c024:	10c5883a 	add	r2,r2,r3
8110c028:	10801084 	addi	r2,r2,66
8110c02c:	00c00144 	movi	r3,5
8110c030:	10c0000d 	sth	r3,0(r2)
								break;
8110c034:	00000606 	br	8110c050 <bSendUART64+0x1d0>
					puts(cLocalBuffer64);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110c038:	e0bfeac3 	ldbu	r2,-85(fp)
8110c03c:	10800044 	addi	r2,r2,1
8110c040:	e0bfeac5 	stb	r2,-85(fp)
8110c044:	e0bfeac3 	ldbu	r2,-85(fp)
8110c048:	10800130 	cmpltui	r2,r2,4
8110c04c:	103fcb1e 	bne	r2,zero,8110bf7c <__reset+0xfb0ebf7c>
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
8110c050:	d0a05a17 	ldw	r2,-32408(gp)
8110c054:	1009883a 	mov	r4,r2
8110c058:	112d4100 	call	8112d410 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c05c:	d0a05c17 	ldw	r2,-32400(gp)
8110c060:	1009883a 	mov	r4,r2
8110c064:	112d4100 	call	8112d410 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c068:	e0bfeb17 	ldw	r2,-84(fp)
8110c06c:	10800060 	cmpeqi	r2,r2,1
8110c070:	10004d1e 	bne	r2,zero,8110c1a8 <bSendUART64+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c074:	e03fea45 	stb	zero,-87(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c078:	e0bfea43 	ldbu	r2,-87(fp)
8110c07c:	10800044 	addi	r2,r2,1
8110c080:	e0bfea45 	stb	r2,-87(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c084:	d0a05a17 	ldw	r2,-32408(gp)
8110c088:	e0ffecc4 	addi	r3,fp,-77
8110c08c:	180d883a 	mov	r6,r3
8110c090:	01400144 	movi	r5,5
8110c094:	1009883a 	mov	r4,r2
8110c098:	112ce6c0 	call	8112ce6c <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c09c:	e0bfecc3 	ldbu	r2,-77(fp)
8110c0a0:	10803fcc 	andi	r2,r2,255
8110c0a4:	10003a1e 	bne	r2,zero,8110c190 <bSendUART64+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110c0a8:	e03feac5 	stb	zero,-85(fp)
8110c0ac:	00003206 	br	8110c178 <bSendUART64+0x2f8>
								{
									if ( xBuffer64[i].usiId == 0 ) {
8110c0b0:	e0ffeac3 	ldbu	r3,-85(fp)
8110c0b4:	00a04534 	movhi	r2,33044
8110c0b8:	108cd104 	addi	r2,r2,13124
8110c0bc:	18c011a4 	muli	r3,r3,70
8110c0c0:	10c5883a 	add	r2,r2,r3
8110c0c4:	10801004 	addi	r2,r2,64
8110c0c8:	1080000b 	ldhu	r2,0(r2)
8110c0cc:	10bfffcc 	andi	r2,r2,65535
8110c0d0:	1000261e 	bne	r2,zero,8110c16c <bSendUART64+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c0d4:	00800044 	movi	r2,1
8110c0d8:	e0bfeb15 	stw	r2,-84(fp)
										memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110c0dc:	e0bfeac3 	ldbu	r2,-85(fp)
8110c0e0:	10c011a4 	muli	r3,r2,70
8110c0e4:	00a04534 	movhi	r2,33044
8110c0e8:	108cd104 	addi	r2,r2,13124
8110c0ec:	1885883a 	add	r2,r3,r2
8110c0f0:	1009883a 	mov	r4,r2
8110c0f4:	e0bfed44 	addi	r2,fp,-75
8110c0f8:	00c01004 	movi	r3,64
8110c0fc:	180d883a 	mov	r6,r3
8110c100:	100b883a 	mov	r5,r2
8110c104:	1112b340 	call	81112b34 <memcpy>
										xBuffer64[i].usiId = siIdMessage;
8110c108:	e13feac3 	ldbu	r4,-85(fp)
8110c10c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c110:	00a04534 	movhi	r2,33044
8110c114:	108cd104 	addi	r2,r2,13124
8110c118:	210011a4 	muli	r4,r4,70
8110c11c:	1105883a 	add	r2,r2,r4
8110c120:	10801004 	addi	r2,r2,64
8110c124:	10c0000d 	sth	r3,0(r2)
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110c128:	e0ffeac3 	ldbu	r3,-85(fp)
8110c12c:	00a04534 	movhi	r2,33044
8110c130:	108cd104 	addi	r2,r2,13124
8110c134:	18c011a4 	muli	r3,r3,70
8110c138:	10c5883a 	add	r2,r2,r3
8110c13c:	10801104 	addi	r2,r2,68
8110c140:	00c000c4 	movi	r3,3
8110c144:	10c00005 	stb	r3,0(r2)
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110c148:	e0ffeac3 	ldbu	r3,-85(fp)
8110c14c:	00a04534 	movhi	r2,33044
8110c150:	108cd104 	addi	r2,r2,13124
8110c154:	18c011a4 	muli	r3,r3,70
8110c158:	10c5883a 	add	r2,r2,r3
8110c15c:	10801084 	addi	r2,r2,66
8110c160:	00c00144 	movi	r3,5
8110c164:	10c0000d 	sth	r3,0(r2)
										break;
8110c168:	00000606 	br	8110c184 <bSendUART64+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110c16c:	e0bfeac3 	ldbu	r2,-85(fp)
8110c170:	10800044 	addi	r2,r2,1
8110c174:	e0bfeac5 	stb	r2,-85(fp)
8110c178:	e0bfeac3 	ldbu	r2,-85(fp)
8110c17c:	10800130 	cmpltui	r2,r2,4
8110c180:	103fcb1e 	bne	r2,zero,8110c0b0 <__reset+0xfb0ec0b0>
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
8110c184:	d0a05a17 	ldw	r2,-32408(gp)
8110c188:	1009883a 	mov	r4,r2
8110c18c:	112d4100 	call	8112d410 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c190:	e0bfecc3 	ldbu	r2,-77(fp)
8110c194:	10803fcc 	andi	r2,r2,255
8110c198:	10000326 	beq	r2,zero,8110c1a8 <bSendUART64+0x328>
8110c19c:	e0bfea43 	ldbu	r2,-87(fp)
8110c1a0:	10800130 	cmpltui	r2,r2,4
8110c1a4:	103fb41e 	bne	r2,zero,8110c078 <__reset+0xfb0ec078>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c1a8:	e0bfed03 	ldbu	r2,-76(fp)
8110c1ac:	10803fcc 	andi	r2,r2,255
8110c1b0:	10000326 	beq	r2,zero,8110c1c0 <bSendUART64+0x340>
8110c1b4:	e0bfea83 	ldbu	r2,-86(fp)
8110c1b8:	10800130 	cmpltui	r2,r2,4
8110c1bc:	103f551e 	bne	r2,zero,8110bf14 <__reset+0xfb0ebf14>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c1c0:	e0bfeb17 	ldw	r2,-84(fp)
8110c1c4:	10800060 	cmpeqi	r2,r2,1
8110c1c8:	1000071e 	bne	r2,zero,8110c1e8 <bSendUART64+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer64);
8110c1cc:	d0a04b17 	ldw	r2,-32468(gp)
8110c1d0:	1009883a 	mov	r4,r2
8110c1d4:	112f2000 	call	8112f200 <OSSemPost>
8110c1d8:	e0bfec45 	stb	r2,-79(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c1dc:	e0bfec43 	ldbu	r2,-79(fp)
8110c1e0:	10000126 	beq	r2,zero,8110c1e8 <bSendUART64+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c1e4:	110e7140 	call	8110e714 <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c1e8:	e0bfec83 	ldbu	r2,-78(fp)
8110c1ec:	10803fcc 	andi	r2,r2,255
8110c1f0:	10000326 	beq	r2,zero,8110c200 <bSendUART64+0x380>
8110c1f4:	e0bfea03 	ldbu	r2,-88(fp)
8110c1f8:	108001b0 	cmpltui	r2,r2,6
8110c1fc:	103f381e 	bne	r2,zero,8110bee0 <__reset+0xfb0ebee0>

	return bSuccess;
8110c200:	e0bfeb17 	ldw	r2,-84(fp)
}
8110c204:	e037883a 	mov	sp,fp
8110c208:	dfc00117 	ldw	ra,4(sp)
8110c20c:	df000017 	ldw	fp,0(sp)
8110c210:	dec00204 	addi	sp,sp,8
8110c214:	f800283a 	ret

8110c218 <bSendUART32>:

/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART32 ( char *cBuffer, short int siIdMessage ) {
8110c218:	defff004 	addi	sp,sp,-64
8110c21c:	de00012e 	bgeu	sp,et,8110c224 <bSendUART32+0xc>
8110c220:	003b68fa 	trap	3
8110c224:	dfc00f15 	stw	ra,60(sp)
8110c228:	df000e15 	stw	fp,56(sp)
8110c22c:	df000e04 	addi	fp,sp,56
8110c230:	e13ffe15 	stw	r4,-8(fp)
8110c234:	2805883a 	mov	r2,r5
8110c238:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110c23c:	e03ff205 	stb	zero,-56(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110c240:	e03ff245 	stb	zero,-55(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110c244:	e03ff285 	stb	zero,-54(fp)
	unsigned char i = 0;
8110c248:	e03ff2c5 	stb	zero,-53(fp)
	bool bSuccess = FALSE;
8110c24c:	e03ff315 	stw	zero,-52(fp)
	char cLocalBuffer32[32];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer32, cBuffer, strlen(cBuffer));
8110c250:	e13ffe17 	ldw	r4,-8(fp)
8110c254:	11134b00 	call	811134b0 <strlen>
8110c258:	1007883a 	mov	r3,r2
8110c25c:	e0bff544 	addi	r2,fp,-43
8110c260:	180d883a 	mov	r6,r3
8110c264:	e17ffe17 	ldw	r5,-8(fp)
8110c268:	1009883a 	mov	r4,r2
8110c26c:	1112b340 	call	81112b34 <memcpy>
	bSuccess = FALSE;
8110c270:	e03ff315 	stw	zero,-52(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110c274:	e03ff205 	stb	zero,-56(fp)
	do
	{
		ucCountRetriesSem++;
8110c278:	e0bff203 	ldbu	r2,-56(fp)
8110c27c:	10800044 	addi	r2,r2,1
8110c280:	e0bff205 	stb	r2,-56(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110c284:	d0a05917 	ldw	r2,-32412(gp)
8110c288:	e0fff484 	addi	r3,fp,-46
8110c28c:	180d883a 	mov	r6,r3
8110c290:	01401904 	movi	r5,100
8110c294:	1009883a 	mov	r4,r2
8110c298:	112ee780 	call	8112ee78 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110c29c:	e0bff483 	ldbu	r2,-46(fp)
8110c2a0:	10803fcc 	andi	r2,r2,255
8110c2a4:	1000b61e 	bne	r2,zero,8110c580 <bSendUART32+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110c2a8:	e03ff285 	stb	zero,-54(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110c2ac:	e0bff283 	ldbu	r2,-54(fp)
8110c2b0:	10800044 	addi	r2,r2,1
8110c2b4:	e0bff285 	stb	r2,-54(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110c2b8:	d0a05c17 	ldw	r2,-32400(gp)
8110c2bc:	e0fff504 	addi	r3,fp,-44
8110c2c0:	180d883a 	mov	r6,r3
8110c2c4:	01400144 	movi	r5,5
8110c2c8:	1009883a 	mov	r4,r2
8110c2cc:	112ce6c0 	call	8112ce6c <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110c2d0:	e0bff503 	ldbu	r2,-44(fp)
8110c2d4:	10803fcc 	andi	r2,r2,255
8110c2d8:	1000991e 	bne	r2,zero,8110c540 <bSendUART32+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer32);
8110c2dc:	e0bff544 	addi	r2,fp,-43
8110c2e0:	1009883a 	mov	r4,r2
8110c2e4:	1112f580 	call	81112f58 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110c2e8:	d0a05617 	ldw	r2,-32424(gp)
8110c2ec:	e0fff4c4 	addi	r3,fp,-45
8110c2f0:	180b883a 	mov	r5,r3
8110c2f4:	1009883a 	mov	r4,r2
8110c2f8:	112c7ec0 	call	8112c7ec <OSMutexAccept>
8110c2fc:	e0bff405 	stb	r2,-48(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110c300:	e0bff4c3 	ldbu	r2,-45(fp)
8110c304:	10803fcc 	andi	r2,r2,255
8110c308:	10003a1e 	bne	r2,zero,8110c3f4 <bSendUART32+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c30c:	e03ff2c5 	stb	zero,-53(fp)
8110c310:	00003206 	br	8110c3dc <bSendUART32+0x1c4>
						{
							if ( xBuffer32[i].usiId == 0 ) {
8110c314:	e0fff2c3 	ldbu	r3,-53(fp)
8110c318:	00a04534 	movhi	r2,33044
8110c31c:	109e2e04 	addi	r2,r2,30904
8110c320:	18c009a4 	muli	r3,r3,38
8110c324:	10c5883a 	add	r2,r2,r3
8110c328:	10800804 	addi	r2,r2,32
8110c32c:	1080000b 	ldhu	r2,0(r2)
8110c330:	10bfffcc 	andi	r2,r2,65535
8110c334:	1000261e 	bne	r2,zero,8110c3d0 <bSendUART32+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110c338:	00800044 	movi	r2,1
8110c33c:	e0bff315 	stw	r2,-52(fp)
								memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c340:	e0bff2c3 	ldbu	r2,-53(fp)
8110c344:	10c009a4 	muli	r3,r2,38
8110c348:	00a04534 	movhi	r2,33044
8110c34c:	109e2e04 	addi	r2,r2,30904
8110c350:	1885883a 	add	r2,r3,r2
8110c354:	1009883a 	mov	r4,r2
8110c358:	e0bff544 	addi	r2,fp,-43
8110c35c:	00c00804 	movi	r3,32
8110c360:	180d883a 	mov	r6,r3
8110c364:	100b883a 	mov	r5,r2
8110c368:	1112b340 	call	81112b34 <memcpy>
								xBuffer32[i].usiId = siIdMessage;
8110c36c:	e13ff2c3 	ldbu	r4,-53(fp)
8110c370:	e0ffff0b 	ldhu	r3,-4(fp)
8110c374:	00a04534 	movhi	r2,33044
8110c378:	109e2e04 	addi	r2,r2,30904
8110c37c:	210009a4 	muli	r4,r4,38
8110c380:	1105883a 	add	r2,r2,r4
8110c384:	10800804 	addi	r2,r2,32
8110c388:	10c0000d 	sth	r3,0(r2)
								xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c38c:	e0fff2c3 	ldbu	r3,-53(fp)
8110c390:	00a04534 	movhi	r2,33044
8110c394:	109e2e04 	addi	r2,r2,30904
8110c398:	18c009a4 	muli	r3,r3,38
8110c39c:	10c5883a 	add	r2,r2,r3
8110c3a0:	10800904 	addi	r2,r2,36
8110c3a4:	00c000c4 	movi	r3,3
8110c3a8:	10c00005 	stb	r3,0(r2)
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c3ac:	e0fff2c3 	ldbu	r3,-53(fp)
8110c3b0:	00a04534 	movhi	r2,33044
8110c3b4:	109e2e04 	addi	r2,r2,30904
8110c3b8:	18c009a4 	muli	r3,r3,38
8110c3bc:	10c5883a 	add	r2,r2,r3
8110c3c0:	10800884 	addi	r2,r2,34
8110c3c4:	00c00144 	movi	r3,5
8110c3c8:	10c0000d 	sth	r3,0(r2)
								break;
8110c3cc:	00000606 	br	8110c3e8 <bSendUART32+0x1d0>
					puts(cLocalBuffer32);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c3d0:	e0bff2c3 	ldbu	r2,-53(fp)
8110c3d4:	10800044 	addi	r2,r2,1
8110c3d8:	e0bff2c5 	stb	r2,-53(fp)
8110c3dc:	e0bff2c3 	ldbu	r2,-53(fp)
8110c3e0:	10800230 	cmpltui	r2,r2,8
8110c3e4:	103fcb1e 	bne	r2,zero,8110c314 <__reset+0xfb0ec314>
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c3e8:	d0a05617 	ldw	r2,-32424(gp)
8110c3ec:	1009883a 	mov	r4,r2
8110c3f0:	112d4100 	call	8112d410 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c3f4:	d0a05c17 	ldw	r2,-32400(gp)
8110c3f8:	1009883a 	mov	r4,r2
8110c3fc:	112d4100 	call	8112d410 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c400:	e0bff317 	ldw	r2,-52(fp)
8110c404:	10800060 	cmpeqi	r2,r2,1
8110c408:	10004d1e 	bne	r2,zero,8110c540 <bSendUART32+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c40c:	e03ff245 	stb	zero,-55(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c410:	e0bff243 	ldbu	r2,-55(fp)
8110c414:	10800044 	addi	r2,r2,1
8110c418:	e0bff245 	stb	r2,-55(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c41c:	d0a05617 	ldw	r2,-32424(gp)
8110c420:	e0fff4c4 	addi	r3,fp,-45
8110c424:	180d883a 	mov	r6,r3
8110c428:	01400144 	movi	r5,5
8110c42c:	1009883a 	mov	r4,r2
8110c430:	112ce6c0 	call	8112ce6c <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c434:	e0bff4c3 	ldbu	r2,-45(fp)
8110c438:	10803fcc 	andi	r2,r2,255
8110c43c:	10003a1e 	bne	r2,zero,8110c528 <bSendUART32+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c440:	e03ff2c5 	stb	zero,-53(fp)
8110c444:	00003206 	br	8110c510 <bSendUART32+0x2f8>
								{
									if ( xBuffer32[i].usiId == 0 ) {
8110c448:	e0fff2c3 	ldbu	r3,-53(fp)
8110c44c:	00a04534 	movhi	r2,33044
8110c450:	109e2e04 	addi	r2,r2,30904
8110c454:	18c009a4 	muli	r3,r3,38
8110c458:	10c5883a 	add	r2,r2,r3
8110c45c:	10800804 	addi	r2,r2,32
8110c460:	1080000b 	ldhu	r2,0(r2)
8110c464:	10bfffcc 	andi	r2,r2,65535
8110c468:	1000261e 	bne	r2,zero,8110c504 <bSendUART32+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c46c:	00800044 	movi	r2,1
8110c470:	e0bff315 	stw	r2,-52(fp)
										memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c474:	e0bff2c3 	ldbu	r2,-53(fp)
8110c478:	10c009a4 	muli	r3,r2,38
8110c47c:	00a04534 	movhi	r2,33044
8110c480:	109e2e04 	addi	r2,r2,30904
8110c484:	1885883a 	add	r2,r3,r2
8110c488:	1009883a 	mov	r4,r2
8110c48c:	e0bff544 	addi	r2,fp,-43
8110c490:	00c00804 	movi	r3,32
8110c494:	180d883a 	mov	r6,r3
8110c498:	100b883a 	mov	r5,r2
8110c49c:	1112b340 	call	81112b34 <memcpy>
										xBuffer32[i].usiId = siIdMessage;
8110c4a0:	e13ff2c3 	ldbu	r4,-53(fp)
8110c4a4:	e0ffff0b 	ldhu	r3,-4(fp)
8110c4a8:	00a04534 	movhi	r2,33044
8110c4ac:	109e2e04 	addi	r2,r2,30904
8110c4b0:	210009a4 	muli	r4,r4,38
8110c4b4:	1105883a 	add	r2,r2,r4
8110c4b8:	10800804 	addi	r2,r2,32
8110c4bc:	10c0000d 	sth	r3,0(r2)
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c4c0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c4c4:	00a04534 	movhi	r2,33044
8110c4c8:	109e2e04 	addi	r2,r2,30904
8110c4cc:	18c009a4 	muli	r3,r3,38
8110c4d0:	10c5883a 	add	r2,r2,r3
8110c4d4:	10800904 	addi	r2,r2,36
8110c4d8:	00c000c4 	movi	r3,3
8110c4dc:	10c00005 	stb	r3,0(r2)
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c4e0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c4e4:	00a04534 	movhi	r2,33044
8110c4e8:	109e2e04 	addi	r2,r2,30904
8110c4ec:	18c009a4 	muli	r3,r3,38
8110c4f0:	10c5883a 	add	r2,r2,r3
8110c4f4:	10800884 	addi	r2,r2,34
8110c4f8:	00c00144 	movi	r3,5
8110c4fc:	10c0000d 	sth	r3,0(r2)
										break;
8110c500:	00000606 	br	8110c51c <bSendUART32+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c504:	e0bff2c3 	ldbu	r2,-53(fp)
8110c508:	10800044 	addi	r2,r2,1
8110c50c:	e0bff2c5 	stb	r2,-53(fp)
8110c510:	e0bff2c3 	ldbu	r2,-53(fp)
8110c514:	10800230 	cmpltui	r2,r2,8
8110c518:	103fcb1e 	bne	r2,zero,8110c448 <__reset+0xfb0ec448>
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c51c:	d0a05617 	ldw	r2,-32424(gp)
8110c520:	1009883a 	mov	r4,r2
8110c524:	112d4100 	call	8112d410 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c528:	e0bff4c3 	ldbu	r2,-45(fp)
8110c52c:	10803fcc 	andi	r2,r2,255
8110c530:	10000326 	beq	r2,zero,8110c540 <bSendUART32+0x328>
8110c534:	e0bff243 	ldbu	r2,-55(fp)
8110c538:	10800130 	cmpltui	r2,r2,4
8110c53c:	103fb41e 	bne	r2,zero,8110c410 <__reset+0xfb0ec410>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c540:	e0bff503 	ldbu	r2,-44(fp)
8110c544:	10803fcc 	andi	r2,r2,255
8110c548:	10000326 	beq	r2,zero,8110c558 <bSendUART32+0x340>
8110c54c:	e0bff283 	ldbu	r2,-54(fp)
8110c550:	10800130 	cmpltui	r2,r2,4
8110c554:	103f551e 	bne	r2,zero,8110c2ac <__reset+0xfb0ec2ac>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c558:	e0bff317 	ldw	r2,-52(fp)
8110c55c:	10800060 	cmpeqi	r2,r2,1
8110c560:	1000071e 	bne	r2,zero,8110c580 <bSendUART32+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer32);
8110c564:	d0a05917 	ldw	r2,-32412(gp)
8110c568:	1009883a 	mov	r4,r2
8110c56c:	112f2000 	call	8112f200 <OSSemPost>
8110c570:	e0bff445 	stb	r2,-47(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c574:	e0bff443 	ldbu	r2,-47(fp)
8110c578:	10000126 	beq	r2,zero,8110c580 <bSendUART32+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c57c:	110e7140 	call	8110e714 <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c580:	e0bff483 	ldbu	r2,-46(fp)
8110c584:	10803fcc 	andi	r2,r2,255
8110c588:	10000326 	beq	r2,zero,8110c598 <bSendUART32+0x380>
8110c58c:	e0bff203 	ldbu	r2,-56(fp)
8110c590:	108001b0 	cmpltui	r2,r2,6
8110c594:	103f381e 	bne	r2,zero,8110c278 <__reset+0xfb0ec278>

	return bSuccess;
8110c598:	e0bff317 	ldw	r2,-52(fp)
}
8110c59c:	e037883a 	mov	sp,fp
8110c5a0:	dfc00117 	ldw	ra,4(sp)
8110c5a4:	df000017 	ldw	fp,0(sp)
8110c5a8:	dec00204 	addi	sp,sp,8
8110c5ac:	f800283a 	ret

8110c5b0 <bSendStatusFirstTime>:

/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendStatusFirstTime ( char *cBuffer, short int siIdMessage ) {
8110c5b0:	defff004 	addi	sp,sp,-64
8110c5b4:	de00012e 	bgeu	sp,et,8110c5bc <bSendStatusFirstTime+0xc>
8110c5b8:	003b68fa 	trap	3
8110c5bc:	dfc00f15 	stw	ra,60(sp)
8110c5c0:	df000e15 	stw	fp,56(sp)
8110c5c4:	df000e04 	addi	fp,sp,56
8110c5c8:	e13ffe15 	stw	r4,-8(fp)
8110c5cc:	2805883a 	mov	r2,r5
8110c5d0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110c5d4:	e03ff205 	stb	zero,-56(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110c5d8:	e03ff245 	stb	zero,-55(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110c5dc:	e03ff285 	stb	zero,-54(fp)
	unsigned char i = 0;
8110c5e0:	e03ff2c5 	stb	zero,-53(fp)
	bool bSuccess = FALSE;
8110c5e4:	e03ff315 	stw	zero,-52(fp)
	char cLocalBuffer32[32];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer32, cBuffer, strlen(cBuffer));
8110c5e8:	e13ffe17 	ldw	r4,-8(fp)
8110c5ec:	11134b00 	call	811134b0 <strlen>
8110c5f0:	1007883a 	mov	r3,r2
8110c5f4:	e0bff544 	addi	r2,fp,-43
8110c5f8:	180d883a 	mov	r6,r3
8110c5fc:	e17ffe17 	ldw	r5,-8(fp)
8110c600:	1009883a 	mov	r4,r2
8110c604:	1112b340 	call	81112b34 <memcpy>
	bSuccess = FALSE;
8110c608:	e03ff315 	stw	zero,-52(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110c60c:	e03ff205 	stb	zero,-56(fp)
	do
	{
		ucCountRetriesSem++;
8110c610:	e0bff203 	ldbu	r2,-56(fp)
8110c614:	10800044 	addi	r2,r2,1
8110c618:	e0bff205 	stb	r2,-56(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110c61c:	d0a05917 	ldw	r2,-32412(gp)
8110c620:	e0fff484 	addi	r3,fp,-46
8110c624:	180d883a 	mov	r6,r3
8110c628:	01401904 	movi	r5,100
8110c62c:	1009883a 	mov	r4,r2
8110c630:	112ee780 	call	8112ee78 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110c634:	e0bff483 	ldbu	r2,-46(fp)
8110c638:	10803fcc 	andi	r2,r2,255
8110c63c:	1000b61e 	bne	r2,zero,8110c918 <bSendStatusFirstTime+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110c640:	e03ff285 	stb	zero,-54(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110c644:	e0bff283 	ldbu	r2,-54(fp)
8110c648:	10800044 	addi	r2,r2,1
8110c64c:	e0bff285 	stb	r2,-54(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110c650:	d0a05c17 	ldw	r2,-32400(gp)
8110c654:	e0fff504 	addi	r3,fp,-44
8110c658:	180d883a 	mov	r6,r3
8110c65c:	01400144 	movi	r5,5
8110c660:	1009883a 	mov	r4,r2
8110c664:	112ce6c0 	call	8112ce6c <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110c668:	e0bff503 	ldbu	r2,-44(fp)
8110c66c:	10803fcc 	andi	r2,r2,255
8110c670:	1000991e 	bne	r2,zero,8110c8d8 <bSendStatusFirstTime+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer32);
8110c674:	e0bff544 	addi	r2,fp,-43
8110c678:	1009883a 	mov	r4,r2
8110c67c:	1112f580 	call	81112f58 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110c680:	d0a05617 	ldw	r2,-32424(gp)
8110c684:	e0fff4c4 	addi	r3,fp,-45
8110c688:	180b883a 	mov	r5,r3
8110c68c:	1009883a 	mov	r4,r2
8110c690:	112c7ec0 	call	8112c7ec <OSMutexAccept>
8110c694:	e0bff405 	stb	r2,-48(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110c698:	e0bff4c3 	ldbu	r2,-45(fp)
8110c69c:	10803fcc 	andi	r2,r2,255
8110c6a0:	10003a1e 	bne	r2,zero,8110c78c <bSendStatusFirstTime+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c6a4:	e03ff2c5 	stb	zero,-53(fp)
8110c6a8:	00003206 	br	8110c774 <bSendStatusFirstTime+0x1c4>
						{
							if ( xBuffer32[i].usiId == 0 ) {
8110c6ac:	e0fff2c3 	ldbu	r3,-53(fp)
8110c6b0:	00a04534 	movhi	r2,33044
8110c6b4:	109e2e04 	addi	r2,r2,30904
8110c6b8:	18c009a4 	muli	r3,r3,38
8110c6bc:	10c5883a 	add	r2,r2,r3
8110c6c0:	10800804 	addi	r2,r2,32
8110c6c4:	1080000b 	ldhu	r2,0(r2)
8110c6c8:	10bfffcc 	andi	r2,r2,65535
8110c6cc:	1000261e 	bne	r2,zero,8110c768 <bSendStatusFirstTime+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110c6d0:	00800044 	movi	r2,1
8110c6d4:	e0bff315 	stw	r2,-52(fp)
								memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c6d8:	e0bff2c3 	ldbu	r2,-53(fp)
8110c6dc:	10c009a4 	muli	r3,r2,38
8110c6e0:	00a04534 	movhi	r2,33044
8110c6e4:	109e2e04 	addi	r2,r2,30904
8110c6e8:	1885883a 	add	r2,r3,r2
8110c6ec:	1009883a 	mov	r4,r2
8110c6f0:	e0bff544 	addi	r2,fp,-43
8110c6f4:	00c00804 	movi	r3,32
8110c6f8:	180d883a 	mov	r6,r3
8110c6fc:	100b883a 	mov	r5,r2
8110c700:	1112b340 	call	81112b34 <memcpy>
								xBuffer32[i].usiId = siIdMessage;
8110c704:	e13ff2c3 	ldbu	r4,-53(fp)
8110c708:	e0ffff0b 	ldhu	r3,-4(fp)
8110c70c:	00a04534 	movhi	r2,33044
8110c710:	109e2e04 	addi	r2,r2,30904
8110c714:	210009a4 	muli	r4,r4,38
8110c718:	1105883a 	add	r2,r2,r4
8110c71c:	10800804 	addi	r2,r2,32
8110c720:	10c0000d 	sth	r3,0(r2)
								xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
8110c724:	e0fff2c3 	ldbu	r3,-53(fp)
8110c728:	00a04534 	movhi	r2,33044
8110c72c:	109e2e04 	addi	r2,r2,30904
8110c730:	18c009a4 	muli	r3,r3,38
8110c734:	10c5883a 	add	r2,r2,r3
8110c738:	10800904 	addi	r2,r2,36
8110c73c:	00ffffc4 	movi	r3,-1
8110c740:	10c00005 	stb	r3,0(r2)
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c744:	e0fff2c3 	ldbu	r3,-53(fp)
8110c748:	00a04534 	movhi	r2,33044
8110c74c:	109e2e04 	addi	r2,r2,30904
8110c750:	18c009a4 	muli	r3,r3,38
8110c754:	10c5883a 	add	r2,r2,r3
8110c758:	10800884 	addi	r2,r2,34
8110c75c:	00c00144 	movi	r3,5
8110c760:	10c0000d 	sth	r3,0(r2)
								break;
8110c764:	00000606 	br	8110c780 <bSendStatusFirstTime+0x1d0>
					puts(cLocalBuffer32);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c768:	e0bff2c3 	ldbu	r2,-53(fp)
8110c76c:	10800044 	addi	r2,r2,1
8110c770:	e0bff2c5 	stb	r2,-53(fp)
8110c774:	e0bff2c3 	ldbu	r2,-53(fp)
8110c778:	10800230 	cmpltui	r2,r2,8
8110c77c:	103fcb1e 	bne	r2,zero,8110c6ac <__reset+0xfb0ec6ac>
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c780:	d0a05617 	ldw	r2,-32424(gp)
8110c784:	1009883a 	mov	r4,r2
8110c788:	112d4100 	call	8112d410 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c78c:	d0a05c17 	ldw	r2,-32400(gp)
8110c790:	1009883a 	mov	r4,r2
8110c794:	112d4100 	call	8112d410 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c798:	e0bff317 	ldw	r2,-52(fp)
8110c79c:	10800060 	cmpeqi	r2,r2,1
8110c7a0:	10004d1e 	bne	r2,zero,8110c8d8 <bSendStatusFirstTime+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c7a4:	e03ff245 	stb	zero,-55(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c7a8:	e0bff243 	ldbu	r2,-55(fp)
8110c7ac:	10800044 	addi	r2,r2,1
8110c7b0:	e0bff245 	stb	r2,-55(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c7b4:	d0a05617 	ldw	r2,-32424(gp)
8110c7b8:	e0fff4c4 	addi	r3,fp,-45
8110c7bc:	180d883a 	mov	r6,r3
8110c7c0:	01400144 	movi	r5,5
8110c7c4:	1009883a 	mov	r4,r2
8110c7c8:	112ce6c0 	call	8112ce6c <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c7cc:	e0bff4c3 	ldbu	r2,-45(fp)
8110c7d0:	10803fcc 	andi	r2,r2,255
8110c7d4:	10003a1e 	bne	r2,zero,8110c8c0 <bSendStatusFirstTime+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c7d8:	e03ff2c5 	stb	zero,-53(fp)
8110c7dc:	00003206 	br	8110c8a8 <bSendStatusFirstTime+0x2f8>
								{
									if ( xBuffer32[i].usiId == 0 ) {
8110c7e0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c7e4:	00a04534 	movhi	r2,33044
8110c7e8:	109e2e04 	addi	r2,r2,30904
8110c7ec:	18c009a4 	muli	r3,r3,38
8110c7f0:	10c5883a 	add	r2,r2,r3
8110c7f4:	10800804 	addi	r2,r2,32
8110c7f8:	1080000b 	ldhu	r2,0(r2)
8110c7fc:	10bfffcc 	andi	r2,r2,65535
8110c800:	1000261e 	bne	r2,zero,8110c89c <bSendStatusFirstTime+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c804:	00800044 	movi	r2,1
8110c808:	e0bff315 	stw	r2,-52(fp)
										memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c80c:	e0bff2c3 	ldbu	r2,-53(fp)
8110c810:	10c009a4 	muli	r3,r2,38
8110c814:	00a04534 	movhi	r2,33044
8110c818:	109e2e04 	addi	r2,r2,30904
8110c81c:	1885883a 	add	r2,r3,r2
8110c820:	1009883a 	mov	r4,r2
8110c824:	e0bff544 	addi	r2,fp,-43
8110c828:	00c00804 	movi	r3,32
8110c82c:	180d883a 	mov	r6,r3
8110c830:	100b883a 	mov	r5,r2
8110c834:	1112b340 	call	81112b34 <memcpy>
										xBuffer32[i].usiId = siIdMessage;
8110c838:	e13ff2c3 	ldbu	r4,-53(fp)
8110c83c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c840:	00a04534 	movhi	r2,33044
8110c844:	109e2e04 	addi	r2,r2,30904
8110c848:	210009a4 	muli	r4,r4,38
8110c84c:	1105883a 	add	r2,r2,r4
8110c850:	10800804 	addi	r2,r2,32
8110c854:	10c0000d 	sth	r3,0(r2)
										xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
8110c858:	e0fff2c3 	ldbu	r3,-53(fp)
8110c85c:	00a04534 	movhi	r2,33044
8110c860:	109e2e04 	addi	r2,r2,30904
8110c864:	18c009a4 	muli	r3,r3,38
8110c868:	10c5883a 	add	r2,r2,r3
8110c86c:	10800904 	addi	r2,r2,36
8110c870:	00ffffc4 	movi	r3,-1
8110c874:	10c00005 	stb	r3,0(r2)
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c878:	e0fff2c3 	ldbu	r3,-53(fp)
8110c87c:	00a04534 	movhi	r2,33044
8110c880:	109e2e04 	addi	r2,r2,30904
8110c884:	18c009a4 	muli	r3,r3,38
8110c888:	10c5883a 	add	r2,r2,r3
8110c88c:	10800884 	addi	r2,r2,34
8110c890:	00c00144 	movi	r3,5
8110c894:	10c0000d 	sth	r3,0(r2)
										break;
8110c898:	00000606 	br	8110c8b4 <bSendStatusFirstTime+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c89c:	e0bff2c3 	ldbu	r2,-53(fp)
8110c8a0:	10800044 	addi	r2,r2,1
8110c8a4:	e0bff2c5 	stb	r2,-53(fp)
8110c8a8:	e0bff2c3 	ldbu	r2,-53(fp)
8110c8ac:	10800230 	cmpltui	r2,r2,8
8110c8b0:	103fcb1e 	bne	r2,zero,8110c7e0 <__reset+0xfb0ec7e0>
										xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c8b4:	d0a05617 	ldw	r2,-32424(gp)
8110c8b8:	1009883a 	mov	r4,r2
8110c8bc:	112d4100 	call	8112d410 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c8c0:	e0bff4c3 	ldbu	r2,-45(fp)
8110c8c4:	10803fcc 	andi	r2,r2,255
8110c8c8:	10000326 	beq	r2,zero,8110c8d8 <bSendStatusFirstTime+0x328>
8110c8cc:	e0bff243 	ldbu	r2,-55(fp)
8110c8d0:	10800130 	cmpltui	r2,r2,4
8110c8d4:	103fb41e 	bne	r2,zero,8110c7a8 <__reset+0xfb0ec7a8>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c8d8:	e0bff503 	ldbu	r2,-44(fp)
8110c8dc:	10803fcc 	andi	r2,r2,255
8110c8e0:	10000326 	beq	r2,zero,8110c8f0 <bSendStatusFirstTime+0x340>
8110c8e4:	e0bff283 	ldbu	r2,-54(fp)
8110c8e8:	10800130 	cmpltui	r2,r2,4
8110c8ec:	103f551e 	bne	r2,zero,8110c644 <__reset+0xfb0ec644>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c8f0:	e0bff317 	ldw	r2,-52(fp)
8110c8f4:	10800060 	cmpeqi	r2,r2,1
8110c8f8:	1000071e 	bne	r2,zero,8110c918 <bSendStatusFirstTime+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer32);
8110c8fc:	d0a05917 	ldw	r2,-32412(gp)
8110c900:	1009883a 	mov	r4,r2
8110c904:	112f2000 	call	8112f200 <OSSemPost>
8110c908:	e0bff445 	stb	r2,-47(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c90c:	e0bff443 	ldbu	r2,-47(fp)
8110c910:	10000126 	beq	r2,zero,8110c918 <bSendStatusFirstTime+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c914:	110e7140 	call	8110e714 <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c918:	e0bff483 	ldbu	r2,-46(fp)
8110c91c:	10803fcc 	andi	r2,r2,255
8110c920:	10000326 	beq	r2,zero,8110c930 <bSendStatusFirstTime+0x380>
8110c924:	e0bff203 	ldbu	r2,-56(fp)
8110c928:	108001b0 	cmpltui	r2,r2,6
8110c92c:	103f381e 	bne	r2,zero,8110c610 <__reset+0xfb0ec610>

	return bSuccess;
8110c930:	e0bff317 	ldw	r2,-52(fp)
}
8110c934:	e037883a 	mov	sp,fp
8110c938:	dfc00117 	ldw	ra,4(sp)
8110c93c:	df000017 	ldw	fp,0(sp)
8110c940:	dec00204 	addi	sp,sp,8
8110c944:	f800283a 	ret

8110c948 <vSendEthConf>:



void vSendEthConf ( void ) {
8110c948:	deffc304 	addi	sp,sp,-244
8110c94c:	de00012e 	bgeu	sp,et,8110c954 <vSendEthConf+0xc>
8110c950:	003b68fa 	trap	3
8110c954:	dfc03c15 	stw	ra,240(sp)
8110c958:	df003b15 	stw	fp,236(sp)
8110c95c:	dd403a15 	stw	r21,232(sp)
8110c960:	dd003915 	stw	r20,228(sp)
8110c964:	dcc03815 	stw	r19,224(sp)
8110c968:	dc803715 	stw	r18,220(sp)
8110c96c:	dc403615 	stw	r17,216(sp)
8110c970:	dc003515 	stw	r16,212(sp)
8110c974:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110c978:	e03fd98d 	sth	zero,-154(fp)
8110c97c:	e03fda0d 	sth	zero,-152(fp)
8110c980:	e0bfda84 	addi	r2,fp,-150
8110c984:	00c01f04 	movi	r3,124
8110c988:	180d883a 	mov	r6,r3
8110c98c:	000b883a 	mov	r5,zero
8110c990:	1009883a 	mov	r4,r2
8110c994:	1112c840 	call	81112c84 <memset>
    unsigned char crc = 0;
8110c998:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110c99c:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110c9a0:	110cdf00 	call	8110cdf0 <usiGetIdCMD>
8110c9a4:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c9a8:	e57fd90b 	ldhu	r21,-156(fp)
8110c9ac:	00a04574 	movhi	r2,33045
8110c9b0:	10bf1104 	addi	r2,r2,-956
8110c9b4:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c9b8:	00a04574 	movhi	r2,33045
8110c9bc:	10bf1104 	addi	r2,r2,-956
8110c9c0:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c9c4:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c9c8:	00a04574 	movhi	r2,33045
8110c9cc:	10bf1104 	addi	r2,r2,-956
8110c9d0:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c9d4:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c9d8:	00a04574 	movhi	r2,33045
8110c9dc:	10bf1104 	addi	r2,r2,-956
8110c9e0:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c9e4:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c9e8:	00a04574 	movhi	r2,33045
8110c9ec:	10bf1104 	addi	r2,r2,-956
8110c9f0:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c9f4:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c9f8:	00a04574 	movhi	r2,33045
8110c9fc:	10bf1104 	addi	r2,r2,-956
8110ca00:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca04:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110ca08:	00a04574 	movhi	r2,33045
8110ca0c:	10bf1104 	addi	r2,r2,-956
8110ca10:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca14:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110ca18:	00a04574 	movhi	r2,33045
8110ca1c:	10bf1104 	addi	r2,r2,-956
8110ca20:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca24:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110ca28:	00a04574 	movhi	r2,33045
8110ca2c:	10bf1104 	addi	r2,r2,-956
8110ca30:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca34:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ca38:	00a04574 	movhi	r2,33045
8110ca3c:	10bf1104 	addi	r2,r2,-956
8110ca40:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca44:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ca48:	00a04574 	movhi	r2,33045
8110ca4c:	10bf1104 	addi	r2,r2,-956
8110ca50:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca54:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ca58:	00a04574 	movhi	r2,33045
8110ca5c:	10bf1104 	addi	r2,r2,-956
8110ca60:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca64:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ca68:	00a04574 	movhi	r2,33045
8110ca6c:	10bf1104 	addi	r2,r2,-956
8110ca70:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca74:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110ca78:	00a04574 	movhi	r2,33045
8110ca7c:	10bf1104 	addi	r2,r2,-956
8110ca80:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca84:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110ca88:	00a04574 	movhi	r2,33045
8110ca8c:	10bf1104 	addi	r2,r2,-956
8110ca90:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ca94:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110ca98:	00a04574 	movhi	r2,33045
8110ca9c:	10bf1104 	addi	r2,r2,-956
8110caa0:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110caa4:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110caa8:	00a04574 	movhi	r2,33045
8110caac:	10bf1104 	addi	r2,r2,-956
8110cab0:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cab4:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110cab8:	00a04574 	movhi	r2,33045
8110cabc:	10bf1104 	addi	r2,r2,-956
8110cac0:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cac4:	10bfffcc 	andi	r2,r2,65535
8110cac8:	e53fd984 	addi	r20,fp,-154
8110cacc:	d8801115 	stw	r2,68(sp)
8110cad0:	dcc01015 	stw	r19,64(sp)
8110cad4:	dc800f15 	stw	r18,60(sp)
8110cad8:	dc400e15 	stw	r17,56(sp)
8110cadc:	dc000d15 	stw	r16,52(sp)
8110cae0:	dbc00c15 	stw	r15,48(sp)
8110cae4:	db800b15 	stw	r14,44(sp)
8110cae8:	db400a15 	stw	r13,40(sp)
8110caec:	db000915 	stw	r12,36(sp)
8110caf0:	dac00815 	stw	r11,32(sp)
8110caf4:	da800715 	stw	r10,28(sp)
8110caf8:	da400615 	stw	r9,24(sp)
8110cafc:	da000515 	stw	r8,20(sp)
8110cb00:	d9c00415 	stw	r7,16(sp)
8110cb04:	d9800315 	stw	r6,12(sp)
8110cb08:	d9400215 	stw	r5,8(sp)
8110cb0c:	d9000115 	stw	r4,4(sp)
8110cb10:	d8c00015 	stw	r3,0(sp)
8110cb14:	a80f883a 	mov	r7,r21
8110cb18:	018010c4 	movi	r6,67
8110cb1c:	01604534 	movhi	r5,33044
8110cb20:	29747004 	addi	r5,r5,-11840
8110cb24:	a009883a 	mov	r4,r20
8110cb28:	111329c0 	call	8111329c <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110cb2c:	e0bfd984 	addi	r2,fp,-154
8110cb30:	1009883a 	mov	r4,r2
8110cb34:	11134b00 	call	811134b0 <strlen>
8110cb38:	1007883a 	mov	r3,r2
8110cb3c:	e0bfd984 	addi	r2,fp,-154
8110cb40:	180b883a 	mov	r5,r3
8110cb44:	1009883a 	mov	r4,r2
8110cb48:	110e0180 	call	8110e018 <ucCrc8wInit>
8110cb4c:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110cb50:	e13fd703 	ldbu	r4,-164(fp)
8110cb54:	e0ffd984 	addi	r3,fp,-154
8110cb58:	e0bfd984 	addi	r2,fp,-154
8110cb5c:	200f883a 	mov	r7,r4
8110cb60:	180d883a 	mov	r6,r3
8110cb64:	01604534 	movhi	r5,33044
8110cb68:	29748804 	addi	r5,r5,-11744
8110cb6c:	1009883a 	mov	r4,r2
8110cb70:	111329c0 	call	8111329c <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
8110cb74:	e0bfd90b 	ldhu	r2,-156(fp)
8110cb78:	10ffffcc 	andi	r3,r2,65535
8110cb7c:	18e0001c 	xori	r3,r3,32768
8110cb80:	18e00004 	addi	r3,r3,-32768
8110cb84:	e0bfd984 	addi	r2,fp,-154
8110cb88:	180b883a 	mov	r5,r3
8110cb8c:	1009883a 	mov	r4,r2
8110cb90:	110bae80 	call	8110bae8 <bSendUART128>
8110cb94:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110cb98:	e0bfd817 	ldw	r2,-160(fp)
8110cb9c:	10800060 	cmpeqi	r2,r2,1
8110cba0:	1000011e 	bne	r2,zero,8110cba8 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110cba4:	110e9840 	call	8110e984 <vCouldNotSendEthConfUART>
	}
}
8110cba8:	0001883a 	nop
8110cbac:	e6fffa04 	addi	sp,fp,-24
8110cbb0:	dfc00717 	ldw	ra,28(sp)
8110cbb4:	df000617 	ldw	fp,24(sp)
8110cbb8:	dd400517 	ldw	r21,20(sp)
8110cbbc:	dd000417 	ldw	r20,16(sp)
8110cbc0:	dcc00317 	ldw	r19,12(sp)
8110cbc4:	dc800217 	ldw	r18,8(sp)
8110cbc8:	dc400117 	ldw	r17,4(sp)
8110cbcc:	dc000017 	ldw	r16,0(sp)
8110cbd0:	dec00804 	addi	sp,sp,32
8110cbd4:	f800283a 	ret

8110cbd8 <vSendTurnOff>:

void vSendTurnOff ( void ) {
8110cbd8:	defff304 	addi	sp,sp,-52
8110cbdc:	de00012e 	bgeu	sp,et,8110cbe4 <vSendTurnOff+0xc>
8110cbe0:	003b68fa 	trap	3
8110cbe4:	dfc00c15 	stw	ra,48(sp)
8110cbe8:	df000b15 	stw	fp,44(sp)
8110cbec:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110cbf0:	e03ff78d 	sth	zero,-34(fp)
8110cbf4:	e03ff80d 	sth	zero,-32(fp)
8110cbf8:	e03ff88d 	sth	zero,-30(fp)
8110cbfc:	e03ff90d 	sth	zero,-28(fp)
8110cc00:	e03ff98d 	sth	zero,-26(fp)
8110cc04:	e03ffa0d 	sth	zero,-24(fp)
8110cc08:	e03ffa8d 	sth	zero,-22(fp)
8110cc0c:	e03ffb0d 	sth	zero,-20(fp)
8110cc10:	e03ffb8d 	sth	zero,-18(fp)
8110cc14:	e03ffc0d 	sth	zero,-16(fp)
8110cc18:	e03ffc8d 	sth	zero,-14(fp)
8110cc1c:	e03ffd0d 	sth	zero,-12(fp)
8110cc20:	e03ffd8d 	sth	zero,-10(fp)
8110cc24:	e03ffe0d 	sth	zero,-8(fp)
8110cc28:	e03ffe8d 	sth	zero,-6(fp)
8110cc2c:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110cc30:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cc34:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cc38:	110cdf00 	call	8110cdf0 <usiGetIdCMD>
8110cc3c:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110cc40:	e0fff70b 	ldhu	r3,-36(fp)
8110cc44:	e0bff784 	addi	r2,fp,-34
8110cc48:	180d883a 	mov	r6,r3
8110cc4c:	01604534 	movhi	r5,33044
8110cc50:	29748b04 	addi	r5,r5,-11732
8110cc54:	1009883a 	mov	r4,r2
8110cc58:	111329c0 	call	8111329c <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110cc5c:	e0bff784 	addi	r2,fp,-34
8110cc60:	1009883a 	mov	r4,r2
8110cc64:	11134b00 	call	811134b0 <strlen>
8110cc68:	1007883a 	mov	r3,r2
8110cc6c:	e0bff784 	addi	r2,fp,-34
8110cc70:	180b883a 	mov	r5,r3
8110cc74:	1009883a 	mov	r4,r2
8110cc78:	110e0180 	call	8110e018 <ucCrc8wInit>
8110cc7c:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110cc80:	e13ff503 	ldbu	r4,-44(fp)
8110cc84:	e0fff784 	addi	r3,fp,-34
8110cc88:	e0bff784 	addi	r2,fp,-34
8110cc8c:	200f883a 	mov	r7,r4
8110cc90:	180d883a 	mov	r6,r3
8110cc94:	01604534 	movhi	r5,33044
8110cc98:	29748804 	addi	r5,r5,-11744
8110cc9c:	1009883a 	mov	r4,r2
8110cca0:	111329c0 	call	8111329c <sprintf>

	bSuccees = bSendUART32(cBufferTurnOff, usiIdCMDLocal);
8110cca4:	e0bff70b 	ldhu	r2,-36(fp)
8110cca8:	10ffffcc 	andi	r3,r2,65535
8110ccac:	18e0001c 	xori	r3,r3,32768
8110ccb0:	18e00004 	addi	r3,r3,-32768
8110ccb4:	e0bff784 	addi	r2,fp,-34
8110ccb8:	180b883a 	mov	r5,r3
8110ccbc:	1009883a 	mov	r4,r2
8110ccc0:	110c2180 	call	8110c218 <bSendUART32>
8110ccc4:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110ccc8:	e0bff617 	ldw	r2,-40(fp)
8110cccc:	10800060 	cmpeqi	r2,r2,1
8110ccd0:	1000011e 	bne	r2,zero,8110ccd8 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110ccd4:	110f02c0 	call	8110f02c <vCouldNotSendTurnOff>
	}
}
8110ccd8:	0001883a 	nop
8110ccdc:	e037883a 	mov	sp,fp
8110cce0:	dfc00117 	ldw	ra,4(sp)
8110cce4:	df000017 	ldw	fp,0(sp)
8110cce8:	dec00204 	addi	sp,sp,8
8110ccec:	f800283a 	ret

8110ccf0 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110ccf0:	deffda04 	addi	sp,sp,-152
8110ccf4:	de00012e 	bgeu	sp,et,8110ccfc <vSendLog+0xc>
8110ccf8:	003b68fa 	trap	3
8110ccfc:	dfc02515 	stw	ra,148(sp)
8110cd00:	df002415 	stw	fp,144(sp)
8110cd04:	df002404 	addi	fp,sp,144
8110cd08:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110cd0c:	e03fde8d 	sth	zero,-134(fp)
8110cd10:	e03fdf0d 	sth	zero,-132(fp)
8110cd14:	e0bfdf84 	addi	r2,fp,-130
8110cd18:	00c01f04 	movi	r3,124
8110cd1c:	180d883a 	mov	r6,r3
8110cd20:	000b883a 	mov	r5,zero
8110cd24:	1009883a 	mov	r4,r2
8110cd28:	1112c840 	call	81112c84 <memset>
    unsigned char crc = 0;
8110cd2c:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cd30:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cd34:	110cdf00 	call	8110cdf0 <usiGetIdCMD>
8110cd38:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110cd3c:	e0ffde0b 	ldhu	r3,-136(fp)
8110cd40:	e0bfde84 	addi	r2,fp,-134
8110cd44:	e1ffff17 	ldw	r7,-4(fp)
8110cd48:	180d883a 	mov	r6,r3
8110cd4c:	01604534 	movhi	r5,33044
8110cd50:	29748d04 	addi	r5,r5,-11724
8110cd54:	1009883a 	mov	r4,r2
8110cd58:	111329c0 	call	8111329c <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110cd5c:	e0bfde84 	addi	r2,fp,-134
8110cd60:	1009883a 	mov	r4,r2
8110cd64:	11134b00 	call	811134b0 <strlen>
8110cd68:	1007883a 	mov	r3,r2
8110cd6c:	e0bfde84 	addi	r2,fp,-134
8110cd70:	180b883a 	mov	r5,r3
8110cd74:	1009883a 	mov	r4,r2
8110cd78:	110e0180 	call	8110e018 <ucCrc8wInit>
8110cd7c:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110cd80:	e13fdc03 	ldbu	r4,-144(fp)
8110cd84:	e0ffde84 	addi	r3,fp,-134
8110cd88:	e0bfde84 	addi	r2,fp,-134
8110cd8c:	200f883a 	mov	r7,r4
8110cd90:	180d883a 	mov	r6,r3
8110cd94:	01604534 	movhi	r5,33044
8110cd98:	29748804 	addi	r5,r5,-11744
8110cd9c:	1009883a 	mov	r4,r2
8110cda0:	111329c0 	call	8111329c <sprintf>

	bSuccees = bSendUART128(cBufferLog, usiIdCMDLocal);
8110cda4:	e0bfde0b 	ldhu	r2,-136(fp)
8110cda8:	10ffffcc 	andi	r3,r2,65535
8110cdac:	18e0001c 	xori	r3,r3,32768
8110cdb0:	18e00004 	addi	r3,r3,-32768
8110cdb4:	e0bfde84 	addi	r2,fp,-134
8110cdb8:	180b883a 	mov	r5,r3
8110cdbc:	1009883a 	mov	r4,r2
8110cdc0:	110bae80 	call	8110bae8 <bSendUART128>
8110cdc4:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110cdc8:	e0bfdd17 	ldw	r2,-140(fp)
8110cdcc:	10800060 	cmpeqi	r2,r2,1
8110cdd0:	1000011e 	bne	r2,zero,8110cdd8 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110cdd4:	110f0940 	call	8110f094 <vCouldNotSendLog>
	}
}
8110cdd8:	0001883a 	nop
8110cddc:	e037883a 	mov	sp,fp
8110cde0:	dfc00117 	ldw	ra,4(sp)
8110cde4:	df000017 	ldw	fp,0(sp)
8110cde8:	dec00204 	addi	sp,sp,8
8110cdec:	f800283a 	ret

8110cdf0 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110cdf0:	deffff04 	addi	sp,sp,-4
8110cdf4:	de00012e 	bgeu	sp,et,8110cdfc <usiGetIdCMD+0xc>
8110cdf8:	003b68fa 	trap	3
8110cdfc:	df000015 	stw	fp,0(sp)
8110ce00:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110ce04:	d0a0540b 	ldhu	r2,-32432(gp)
8110ce08:	10ffffcc 	andi	r3,r2,65535
8110ce0c:	00bfffd4 	movui	r2,65535
8110ce10:	1880031e 	bne	r3,r2,8110ce20 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
8110ce14:	00800044 	movi	r2,1
8110ce18:	d0a0540d 	sth	r2,-32432(gp)
8110ce1c:	00000306 	br	8110ce2c <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110ce20:	d0a0540b 	ldhu	r2,-32432(gp)
8110ce24:	10800044 	addi	r2,r2,1
8110ce28:	d0a0540d 	sth	r2,-32432(gp)
    return usiIdCMD;
8110ce2c:	d0a0540b 	ldhu	r2,-32432(gp)
}
8110ce30:	e037883a 	mov	sp,fp
8110ce34:	df000017 	ldw	fp,0(sp)
8110ce38:	dec00104 	addi	sp,sp,4
8110ce3c:	f800283a 	ret

8110ce40 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110ce40:	defffb04 	addi	sp,sp,-20
8110ce44:	de00012e 	bgeu	sp,et,8110ce4c <siPosStr+0xc>
8110ce48:	003b68fa 	trap	3
8110ce4c:	dfc00415 	stw	ra,16(sp)
8110ce50:	df000315 	stw	fp,12(sp)
8110ce54:	df000304 	addi	fp,sp,12
8110ce58:	e13ffe15 	stw	r4,-8(fp)
8110ce5c:	2805883a 	mov	r2,r5
8110ce60:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110ce64:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110ce68:	e0bfff03 	ldbu	r2,-4(fp)
8110ce6c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110ce70:	e17ffd04 	addi	r5,fp,-12
8110ce74:	e13ffe17 	ldw	r4,-8(fp)
8110ce78:	11134640 	call	81113464 <strcspn>
}
8110ce7c:	e037883a 	mov	sp,fp
8110ce80:	dfc00117 	ldw	ra,4(sp)
8110ce84:	df000017 	ldw	fp,0(sp)
8110ce88:	dec00204 	addi	sp,sp,8
8110ce8c:	f800283a 	ret

8110ce90 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110ce90:	defffc04 	addi	sp,sp,-16
8110ce94:	de00012e 	bgeu	sp,et,8110ce9c <vTimeoutCheck+0xc>
8110ce98:	003b68fa 	trap	3
8110ce9c:	dfc00315 	stw	ra,12(sp)
8110cea0:	df000215 	stw	fp,8(sp)
8110cea4:	df000204 	addi	fp,sp,8
8110cea8:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110ceac:	d0a05317 	ldw	r2,-32436(gp)
8110ceb0:	1009883a 	mov	r4,r2
8110ceb4:	112f2000 	call	8112f200 <OSSemPost>
8110ceb8:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110cebc:	e0bffe03 	ldbu	r2,-8(fp)
8110cec0:	10000126 	beq	r2,zero,8110cec8 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110cec4:	110edbc0 	call	8110edbc <vFailPostBlockingSemTimeoutTask>
	}
}
8110cec8:	0001883a 	nop
8110cecc:	e037883a 	mov	sp,fp
8110ced0:	dfc00117 	ldw	ra,4(sp)
8110ced4:	df000017 	ldw	fp,0(sp)
8110ced8:	dec00204 	addi	sp,sp,8
8110cedc:	f800283a 	ret

8110cee0 <vSendPusTM64>:

/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110cee0:	deffe304 	addi	sp,sp,-116
8110cee4:	de00012e 	bgeu	sp,et,8110ceec <vSendPusTM64+0xc>
8110cee8:	003b68fa 	trap	3
8110ceec:	dfc01815 	stw	ra,96(sp)
8110cef0:	df001715 	stw	fp,92(sp)
8110cef4:	df001704 	addi	fp,sp,92
8110cef8:	e1000215 	stw	r4,8(fp)
8110cefc:	e1400315 	stw	r5,12(fp)
8110cf00:	e1800415 	stw	r6,16(fp)
8110cf04:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110cf08:	e03fef8d 	sth	zero,-66(fp)
8110cf0c:	e03ff00d 	sth	zero,-64(fp)
8110cf10:	e0bff084 	addi	r2,fp,-62
8110cf14:	00c00f04 	movi	r3,60
8110cf18:	180d883a 	mov	r6,r3
8110cf1c:	000b883a 	mov	r5,zero
8110cf20:	1009883a 	mov	r4,r2
8110cf24:	1112c840 	call	81112c84 <memset>
    unsigned char crc = 0;
8110cf28:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110cf2c:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cf30:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cf34:	110cdf00 	call	8110cdf0 <usiGetIdCMD>
8110cf38:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110cf3c:	e1bfef0b 	ldhu	r6,-68(fp)
8110cf40:	e080030b 	ldhu	r2,12(fp)
8110cf44:	11ffffcc 	andi	r7,r2,65535
8110cf48:	e080038b 	ldhu	r2,14(fp)
8110cf4c:	10bfffcc 	andi	r2,r2,65535
8110cf50:	e0c0040b 	ldhu	r3,16(fp)
8110cf54:	18ffffcc 	andi	r3,r3,65535
8110cf58:	e100048b 	ldhu	r4,18(fp)
8110cf5c:	213fffcc 	andi	r4,r4,65535
8110cf60:	e140050b 	ldhu	r5,20(fp)
8110cf64:	297fffcc 	andi	r5,r5,65535
8110cf68:	e23fef84 	addi	r8,fp,-66
8110cf6c:	d9400315 	stw	r5,12(sp)
8110cf70:	d9000215 	stw	r4,8(sp)
8110cf74:	d8c00115 	stw	r3,4(sp)
8110cf78:	d8800015 	stw	r2,0(sp)
8110cf7c:	01604534 	movhi	r5,33044
8110cf80:	29749004 	addi	r5,r5,-11712
8110cf84:	4009883a 	mov	r4,r8
8110cf88:	111329c0 	call	8111329c <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110cf8c:	e03fed05 	stb	zero,-76(fp)
8110cf90:	00001206 	br	8110cfdc <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110cf94:	e0bfed03 	ldbu	r2,-76(fp)
8110cf98:	10800204 	addi	r2,r2,8
8110cf9c:	1085883a 	add	r2,r2,r2
8110cfa0:	e0c00204 	addi	r3,fp,8
8110cfa4:	1885883a 	add	r2,r3,r2
8110cfa8:	1080000b 	ldhu	r2,0(r2)
8110cfac:	113fffcc 	andi	r4,r2,65535
8110cfb0:	e0ffef84 	addi	r3,fp,-66
8110cfb4:	e0bfef84 	addi	r2,fp,-66
8110cfb8:	200f883a 	mov	r7,r4
8110cfbc:	180d883a 	mov	r6,r3
8110cfc0:	01604534 	movhi	r5,33044
8110cfc4:	29749704 	addi	r5,r5,-11684
8110cfc8:	1009883a 	mov	r4,r2
8110cfcc:	111329c0 	call	8111329c <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110cfd0:	e0bfed03 	ldbu	r2,-76(fp)
8110cfd4:	10800044 	addi	r2,r2,1
8110cfd8:	e0bfed05 	stb	r2,-76(fp)
8110cfdc:	e0800583 	ldbu	r2,22(fp)
8110cfe0:	10803fcc 	andi	r2,r2,255
8110cfe4:	e0ffed03 	ldbu	r3,-76(fp)
8110cfe8:	18bfea36 	bltu	r3,r2,8110cf94 <__reset+0xfb0ecf94>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110cfec:	e0bfef84 	addi	r2,fp,-66
8110cff0:	1009883a 	mov	r4,r2
8110cff4:	11134b00 	call	811134b0 <strlen>
8110cff8:	1007883a 	mov	r3,r2
8110cffc:	e0bfef84 	addi	r2,fp,-66
8110d000:	180b883a 	mov	r5,r3
8110d004:	1009883a 	mov	r4,r2
8110d008:	110e0180 	call	8110e018 <ucCrc8wInit>
8110d00c:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d010:	e13fed43 	ldbu	r4,-75(fp)
8110d014:	e0ffef84 	addi	r3,fp,-66
8110d018:	e0bfef84 	addi	r2,fp,-66
8110d01c:	200f883a 	mov	r7,r4
8110d020:	180d883a 	mov	r6,r3
8110d024:	01604534 	movhi	r5,33044
8110d028:	29748804 	addi	r5,r5,-11744
8110d02c:	1009883a 	mov	r4,r2
8110d030:	111329c0 	call	8111329c <sprintf>

	bSuccees = bSendUART64(cBufferPus, usiIdCMDLocal);
8110d034:	e0bfef0b 	ldhu	r2,-68(fp)
8110d038:	10ffffcc 	andi	r3,r2,65535
8110d03c:	18e0001c 	xori	r3,r3,32768
8110d040:	18e00004 	addi	r3,r3,-32768
8110d044:	e0bfef84 	addi	r2,fp,-66
8110d048:	180b883a 	mov	r5,r3
8110d04c:	1009883a 	mov	r4,r2
8110d050:	110be800 	call	8110be80 <bSendUART64>
8110d054:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110d058:	e0bfee17 	ldw	r2,-72(fp)
8110d05c:	10800060 	cmpeqi	r2,r2,1
8110d060:	1000031e 	bne	r2,zero,8110d070 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d064:	e0bfef84 	addi	r2,fp,-66
8110d068:	1009883a 	mov	r4,r2
8110d06c:	110f0fc0 	call	8110f0fc <vCouldNotSendTMPusCommand>
	}
}
8110d070:	0001883a 	nop
8110d074:	e037883a 	mov	sp,fp
8110d078:	dfc00117 	ldw	ra,4(sp)
8110d07c:	df000017 	ldw	fp,0(sp)
8110d080:	dec00604 	addi	sp,sp,24
8110d084:	f800283a 	ret

8110d088 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110d088:	deffd304 	addi	sp,sp,-180
8110d08c:	de00012e 	bgeu	sp,et,8110d094 <vSendPusTM128+0xc>
8110d090:	003b68fa 	trap	3
8110d094:	dfc02815 	stw	ra,160(sp)
8110d098:	df002715 	stw	fp,156(sp)
8110d09c:	df002704 	addi	fp,sp,156
8110d0a0:	e1000215 	stw	r4,8(fp)
8110d0a4:	e1400315 	stw	r5,12(fp)
8110d0a8:	e1800415 	stw	r6,16(fp)
8110d0ac:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110d0b0:	e03fdf8d 	sth	zero,-130(fp)
8110d0b4:	e03fe00d 	sth	zero,-128(fp)
8110d0b8:	e0bfe084 	addi	r2,fp,-126
8110d0bc:	00c01f04 	movi	r3,124
8110d0c0:	180d883a 	mov	r6,r3
8110d0c4:	000b883a 	mov	r5,zero
8110d0c8:	1009883a 	mov	r4,r2
8110d0cc:	1112c840 	call	81112c84 <memset>
    unsigned char crc = 0;
8110d0d0:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110d0d4:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d0d8:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d0dc:	110cdf00 	call	8110cdf0 <usiGetIdCMD>
8110d0e0:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110d0e4:	e1bfdf0b 	ldhu	r6,-132(fp)
8110d0e8:	e080030b 	ldhu	r2,12(fp)
8110d0ec:	11ffffcc 	andi	r7,r2,65535
8110d0f0:	e080038b 	ldhu	r2,14(fp)
8110d0f4:	10bfffcc 	andi	r2,r2,65535
8110d0f8:	e0c0040b 	ldhu	r3,16(fp)
8110d0fc:	18ffffcc 	andi	r3,r3,65535
8110d100:	e100048b 	ldhu	r4,18(fp)
8110d104:	213fffcc 	andi	r4,r4,65535
8110d108:	e140050b 	ldhu	r5,20(fp)
8110d10c:	297fffcc 	andi	r5,r5,65535
8110d110:	e23fdf84 	addi	r8,fp,-130
8110d114:	d9400315 	stw	r5,12(sp)
8110d118:	d9000215 	stw	r4,8(sp)
8110d11c:	d8c00115 	stw	r3,4(sp)
8110d120:	d8800015 	stw	r2,0(sp)
8110d124:	01604534 	movhi	r5,33044
8110d128:	29749004 	addi	r5,r5,-11712
8110d12c:	4009883a 	mov	r4,r8
8110d130:	111329c0 	call	8111329c <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d134:	e03fdd05 	stb	zero,-140(fp)
8110d138:	00001206 	br	8110d184 <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110d13c:	e0bfdd03 	ldbu	r2,-140(fp)
8110d140:	10800204 	addi	r2,r2,8
8110d144:	1085883a 	add	r2,r2,r2
8110d148:	e0c00204 	addi	r3,fp,8
8110d14c:	1885883a 	add	r2,r3,r2
8110d150:	1080000b 	ldhu	r2,0(r2)
8110d154:	113fffcc 	andi	r4,r2,65535
8110d158:	e0ffdf84 	addi	r3,fp,-130
8110d15c:	e0bfdf84 	addi	r2,fp,-130
8110d160:	200f883a 	mov	r7,r4
8110d164:	180d883a 	mov	r6,r3
8110d168:	01604534 	movhi	r5,33044
8110d16c:	29749704 	addi	r5,r5,-11684
8110d170:	1009883a 	mov	r4,r2
8110d174:	111329c0 	call	8111329c <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d178:	e0bfdd03 	ldbu	r2,-140(fp)
8110d17c:	10800044 	addi	r2,r2,1
8110d180:	e0bfdd05 	stb	r2,-140(fp)
8110d184:	e0800583 	ldbu	r2,22(fp)
8110d188:	10803fcc 	andi	r2,r2,255
8110d18c:	e0ffdd03 	ldbu	r3,-140(fp)
8110d190:	18bfea36 	bltu	r3,r2,8110d13c <__reset+0xfb0ed13c>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110d194:	e0bfdf84 	addi	r2,fp,-130
8110d198:	1009883a 	mov	r4,r2
8110d19c:	11134b00 	call	811134b0 <strlen>
8110d1a0:	1007883a 	mov	r3,r2
8110d1a4:	e0bfdf84 	addi	r2,fp,-130
8110d1a8:	180b883a 	mov	r5,r3
8110d1ac:	1009883a 	mov	r4,r2
8110d1b0:	110e0180 	call	8110e018 <ucCrc8wInit>
8110d1b4:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d1b8:	e13fdd43 	ldbu	r4,-139(fp)
8110d1bc:	e0ffdf84 	addi	r3,fp,-130
8110d1c0:	e0bfdf84 	addi	r2,fp,-130
8110d1c4:	200f883a 	mov	r7,r4
8110d1c8:	180d883a 	mov	r6,r3
8110d1cc:	01604534 	movhi	r5,33044
8110d1d0:	29748804 	addi	r5,r5,-11744
8110d1d4:	1009883a 	mov	r4,r2
8110d1d8:	111329c0 	call	8111329c <sprintf>

	bSuccees = bSendUART128(cBufferPus, usiIdCMDLocal);
8110d1dc:	e0bfdf0b 	ldhu	r2,-132(fp)
8110d1e0:	10ffffcc 	andi	r3,r2,65535
8110d1e4:	18e0001c 	xori	r3,r3,32768
8110d1e8:	18e00004 	addi	r3,r3,-32768
8110d1ec:	e0bfdf84 	addi	r2,fp,-130
8110d1f0:	180b883a 	mov	r5,r3
8110d1f4:	1009883a 	mov	r4,r2
8110d1f8:	110bae80 	call	8110bae8 <bSendUART128>
8110d1fc:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110d200:	e0bfde17 	ldw	r2,-136(fp)
8110d204:	10800060 	cmpeqi	r2,r2,1
8110d208:	1000031e 	bne	r2,zero,8110d218 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d20c:	e0bfdf84 	addi	r2,fp,-130
8110d210:	1009883a 	mov	r4,r2
8110d214:	110f0fc0 	call	8110f0fc <vCouldNotSendTMPusCommand>
	}
}
8110d218:	0001883a 	nop
8110d21c:	e037883a 	mov	sp,fp
8110d220:	dfc00117 	ldw	ra,4(sp)
8110d224:	df000017 	ldw	fp,0(sp)
8110d228:	dec00604 	addi	sp,sp,24
8110d22c:	f800283a 	ret

8110d230 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				64			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110d230:	deffd904 	addi	sp,sp,-156
8110d234:	de00012e 	bgeu	sp,et,8110d23c <vTMPusTestConnection+0xc>
8110d238:	003b68fa 	trap	3
8110d23c:	dfc02615 	stw	ra,152(sp)
8110d240:	df002515 	stw	fp,148(sp)
8110d244:	df002504 	addi	fp,sp,148
8110d248:	2005883a 	mov	r2,r4
8110d24c:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110d250:	e0bfff0b 	ldhu	r2,-4(fp)
8110d254:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 64;
8110d258:	00801004 	movi	r2,64
8110d25c:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110d260:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110d264:	00800444 	movi	r2,17
8110d268:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110d26c:	00800084 	movi	r2,2
8110d270:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110d274:	d809883a 	mov	r4,sp
8110d278:	e0bfef04 	addi	r2,fp,-68
8110d27c:	00c01004 	movi	r3,64
8110d280:	180d883a 	mov	r6,r3
8110d284:	100b883a 	mov	r5,r2
8110d288:	1112b340 	call	81112b34 <memcpy>
8110d28c:	e13feb17 	ldw	r4,-84(fp)
8110d290:	e17fec17 	ldw	r5,-80(fp)
8110d294:	e1bfed17 	ldw	r6,-76(fp)
8110d298:	e1ffee17 	ldw	r7,-72(fp)
8110d29c:	110cee00 	call	8110cee0 <vSendPusTM64>
}
8110d2a0:	0001883a 	nop
8110d2a4:	e037883a 	mov	sp,fp
8110d2a8:	dfc00117 	ldw	ra,4(sp)
8110d2ac:	df000017 	ldw	fp,0(sp)
8110d2b0:	dec00204 	addi	sp,sp,8
8110d2b4:	f800283a 	ret

8110d2b8 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110d2b8:	defff504 	addi	sp,sp,-44
8110d2bc:	de00012e 	bgeu	sp,et,8110d2c4 <vLoadDefaultETHConf+0xc>
8110d2c0:	003b68fa 	trap	3
8110d2c4:	dfc00a15 	stw	ra,40(sp)
8110d2c8:	df000915 	stw	fp,36(sp)
8110d2cc:	dc000815 	stw	r16,32(sp)
8110d2d0:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110d2d4:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110d2d8:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110d2dc:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110d2e0:	d0a05d17 	ldw	r2,-32396(gp)
8110d2e4:	10800058 	cmpnei	r2,r2,1
8110d2e8:	1001f61e 	bne	r2,zero,8110dac4 <vLoadDefaultETHConf+0x80c>
8110d2ec:	110fe8c0 	call	8110fe8c <bSDcardIsPresent>
8110d2f0:	1001f426 	beq	r2,zero,8110dac4 <vLoadDefaultETHConf+0x80c>
8110d2f4:	110febc0 	call	8110febc <bSDcardFAT16Check>
8110d2f8:	1001f226 	beq	r2,zero,8110dac4 <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110d2fc:	01204534 	movhi	r4,33044
8110d300:	21349904 	addi	r4,r4,-11676
8110d304:	110ffe40 	call	8110ffe4 <siOpenFile>
8110d308:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110d30c:	e0bffc0f 	ldh	r2,-16(fp)
8110d310:	1001e816 	blt	r2,zero,8110dab4 <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110d314:	e0bffd04 	addi	r2,fp,-12
8110d318:	01800204 	movi	r6,8
8110d31c:	01400284 	movi	r5,10
8110d320:	1009883a 	mov	r4,r2
8110d324:	1112c840 	call	81112c84 <memset>
			p_inteiro = inteiro;
8110d328:	e0bffd04 	addi	r2,fp,-12
8110d32c:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110d330:	e0bffc0f 	ldh	r2,-16(fp)
8110d334:	1009883a 	mov	r4,r2
8110d338:	11100600 	call	81110060 <cGetNextChar>
8110d33c:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110d340:	e0bff947 	ldb	r2,-27(fp)
8110d344:	10800084 	addi	r2,r2,2
8110d348:	10c015a8 	cmpgeui	r3,r2,86
8110d34c:	1801cf1e 	bne	r3,zero,8110da8c <vLoadDefaultETHConf+0x7d4>
8110d350:	100690ba 	slli	r3,r2,2
8110d354:	00a04474 	movhi	r2,33041
8110d358:	10b4da04 	addi	r2,r2,-11416
8110d35c:	1885883a 	add	r2,r3,r2
8110d360:	10800017 	ldw	r2,0(r2)
8110d364:	1000683a 	jmp	r2
8110d368:	8110d500 	call	88110d50 <__reset+0x20f0d50>
8110d36c:	8110d4f4 	orhi	r4,r16,17235
8110d370:	8110da8c 	andi	r4,r16,17258
8110d374:	8110da8c 	andi	r4,r16,17258
8110d378:	8110da8c 	andi	r4,r16,17258
8110d37c:	8110da8c 	andi	r4,r16,17258
8110d380:	8110da8c 	andi	r4,r16,17258
8110d384:	8110da8c 	andi	r4,r16,17258
8110d388:	8110da8c 	andi	r4,r16,17258
8110d38c:	8110da8c 	andi	r4,r16,17258
8110d390:	8110da8c 	andi	r4,r16,17258
8110d394:	8110da8c 	andi	r4,r16,17258
8110d398:	8110daa4 	muli	r4,r16,17258
8110d39c:	8110da8c 	andi	r4,r16,17258
8110d3a0:	8110da8c 	andi	r4,r16,17258
8110d3a4:	8110daa4 	muli	r4,r16,17258
8110d3a8:	8110da8c 	andi	r4,r16,17258
8110d3ac:	8110da8c 	andi	r4,r16,17258
8110d3b0:	8110da8c 	andi	r4,r16,17258
8110d3b4:	8110da8c 	andi	r4,r16,17258
8110d3b8:	8110da8c 	andi	r4,r16,17258
8110d3bc:	8110da8c 	andi	r4,r16,17258
8110d3c0:	8110da8c 	andi	r4,r16,17258
8110d3c4:	8110da8c 	andi	r4,r16,17258
8110d3c8:	8110da8c 	andi	r4,r16,17258
8110d3cc:	8110da8c 	andi	r4,r16,17258
8110d3d0:	8110da8c 	andi	r4,r16,17258
8110d3d4:	8110da8c 	andi	r4,r16,17258
8110d3d8:	8110da8c 	andi	r4,r16,17258
8110d3dc:	8110da8c 	andi	r4,r16,17258
8110d3e0:	8110da8c 	andi	r4,r16,17258
8110d3e4:	8110da8c 	andi	r4,r16,17258
8110d3e8:	8110da8c 	andi	r4,r16,17258
8110d3ec:	8110da8c 	andi	r4,r16,17258
8110d3f0:	8110daa4 	muli	r4,r16,17258
8110d3f4:	8110da8c 	andi	r4,r16,17258
8110d3f8:	8110da8c 	andi	r4,r16,17258
8110d3fc:	8110da8c 	andi	r4,r16,17258
8110d400:	8110da8c 	andi	r4,r16,17258
8110d404:	8110da8c 	andi	r4,r16,17258
8110d408:	8110da8c 	andi	r4,r16,17258
8110d40c:	8110d4c0 	call	88110d4c <__reset+0x20f0d4c>
8110d410:	8110da8c 	andi	r4,r16,17258
8110d414:	8110da8c 	andi	r4,r16,17258
8110d418:	8110da8c 	andi	r4,r16,17258
8110d41c:	8110da8c 	andi	r4,r16,17258
8110d420:	8110da8c 	andi	r4,r16,17258
8110d424:	8110da8c 	andi	r4,r16,17258
8110d428:	8110da8c 	andi	r4,r16,17258
8110d42c:	8110da8c 	andi	r4,r16,17258
8110d430:	8110da8c 	andi	r4,r16,17258
8110d434:	8110da8c 	andi	r4,r16,17258
8110d438:	8110da8c 	andi	r4,r16,17258
8110d43c:	8110da8c 	andi	r4,r16,17258
8110d440:	8110da8c 	andi	r4,r16,17258
8110d444:	8110da8c 	andi	r4,r16,17258
8110d448:	8110da8c 	andi	r4,r16,17258
8110d44c:	8110da8c 	andi	r4,r16,17258
8110d450:	8110da8c 	andi	r4,r16,17258
8110d454:	8110da8c 	andi	r4,r16,17258
8110d458:	8110da8c 	andi	r4,r16,17258
8110d45c:	8110da8c 	andi	r4,r16,17258
8110d460:	8110da54 	ori	r4,r16,17257
8110d464:	8110da8c 	andi	r4,r16,17258
8110d468:	8110da8c 	andi	r4,r16,17258
8110d46c:	8110da8c 	andi	r4,r16,17258
8110d470:	8110da8c 	andi	r4,r16,17258
8110d474:	8110da8c 	andi	r4,r16,17258
8110d478:	8110da8c 	andi	r4,r16,17258
8110d47c:	8110da8c 	andi	r4,r16,17258
8110d480:	8110d854 	ori	r4,r16,17249
8110d484:	8110da8c 	andi	r4,r16,17258
8110d488:	8110da8c 	andi	r4,r16,17258
8110d48c:	8110d6b4 	orhi	r4,r16,17242
8110d490:	8110d9ac 	andhi	r4,r16,17254
8110d494:	8110d5e8 	cmpgeui	r4,r16,17239
8110d498:	8110da8c 	andi	r4,r16,17258
8110d49c:	8110da8c 	andi	r4,r16,17258
8110d4a0:	8110da8c 	andi	r4,r16,17258
8110d4a4:	8110d518 	cmpnei	r4,r16,17236
8110d4a8:	8110da8c 	andi	r4,r16,17258
8110d4ac:	8110da8c 	andi	r4,r16,17258
8110d4b0:	8110d924 	muli	r4,r16,17252
8110d4b4:	8110da8c 	andi	r4,r16,17258
8110d4b8:	8110da8c 	andi	r4,r16,17258
8110d4bc:	8110d784 	addi	r4,r16,17246
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110d4c0:	e0bffc0f 	ldh	r2,-16(fp)
8110d4c4:	1009883a 	mov	r4,r2
8110d4c8:	11100600 	call	81110060 <cGetNextChar>
8110d4cc:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110d4d0:	00000406 	br	8110d4e4 <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110d4d4:	e0bffc0f 	ldh	r2,-16(fp)
8110d4d8:	1009883a 	mov	r4,r2
8110d4dc:	11100600 	call	81110060 <cGetNextChar>
8110d4e0:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110d4e4:	e0bff947 	ldb	r2,-27(fp)
8110d4e8:	108009d8 	cmpnei	r2,r2,39
8110d4ec:	103ff91e 	bne	r2,zero,8110d4d4 <__reset+0xfb0ed4d4>
							c = cGetNextChar(siFile);
						}
						break;
8110d4f0:	00016d06 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110d4f4:	00800044 	movi	r2,1
8110d4f8:	e0bff815 	stw	r2,-32(fp)
						break;
8110d4fc:	00016a06 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110d500:	01204534 	movhi	r4,33044
8110d504:	21349b04 	addi	r4,r4,-11668
8110d508:	1112e4c0 	call	81112e4c <printf>
						bEOF = TRUE;
8110d50c:	00800044 	movi	r2,1
8110d510:	e0bff815 	stw	r2,-32(fp)
						break;
8110d514:	00016406 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110d518:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d51c:	e0bffc0f 	ldh	r2,-16(fp)
8110d520:	1009883a 	mov	r4,r2
8110d524:	11100600 	call	81110060 <cGetNextChar>
8110d528:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d52c:	d0e00317 	ldw	r3,-32756(gp)
8110d530:	e0bff947 	ldb	r2,-27(fp)
8110d534:	10800044 	addi	r2,r2,1
8110d538:	1885883a 	add	r2,r3,r2
8110d53c:	10800003 	ldbu	r2,0(r2)
8110d540:	10803fcc 	andi	r2,r2,255
8110d544:	1080010c 	andi	r2,r2,4
8110d548:	10000626 	beq	r2,zero,8110d564 <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110d54c:	e0bffa17 	ldw	r2,-24(fp)
8110d550:	e0fff943 	ldbu	r3,-27(fp)
8110d554:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d558:	e0bffa17 	ldw	r2,-24(fp)
8110d55c:	10800044 	addi	r2,r2,1
8110d560:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110d564:	e0bff947 	ldb	r2,-27(fp)
8110d568:	10800ea0 	cmpeqi	r2,r2,58
8110d56c:	1000031e 	bne	r2,zero,8110d57c <vLoadDefaultETHConf+0x2c4>
8110d570:	e0bff947 	ldb	r2,-27(fp)
8110d574:	10800ed8 	cmpnei	r2,r2,59
8110d578:	103fe81e 	bne	r2,zero,8110d51c <__reset+0xfb0ed51c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d57c:	e0bffa17 	ldw	r2,-24(fp)
8110d580:	00c00284 	movi	r3,10
8110d584:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110d588:	e0bff903 	ldbu	r2,-28(fp)
8110d58c:	10800168 	cmpgeui	r2,r2,5
8110d590:	1000021e 	bne	r2,zero,8110d59c <vLoadDefaultETHConf+0x2e4>
8110d594:	e43ff903 	ldbu	r16,-28(fp)
8110d598:	00000106 	br	8110d5a0 <vLoadDefaultETHConf+0x2e8>
8110d59c:	04000144 	movi	r16,5
8110d5a0:	e0bffd04 	addi	r2,fp,-12
8110d5a4:	1009883a 	mov	r4,r2
8110d5a8:	11119d80 	call	811119d8 <atoi>
8110d5ac:	1007883a 	mov	r3,r2
8110d5b0:	00a04574 	movhi	r2,33045
8110d5b4:	10bf1104 	addi	r2,r2,-956
8110d5b8:	1405883a 	add	r2,r2,r16
8110d5bc:	10800404 	addi	r2,r2,16
8110d5c0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d5c4:	e0bffd04 	addi	r2,fp,-12
8110d5c8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d5cc:	e0bff903 	ldbu	r2,-28(fp)
8110d5d0:	10800044 	addi	r2,r2,1
8110d5d4:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d5d8:	e0bff947 	ldb	r2,-27(fp)
8110d5dc:	10800ed8 	cmpnei	r2,r2,59
8110d5e0:	103fce1e 	bne	r2,zero,8110d51c <__reset+0xfb0ed51c>

						break;
8110d5e4:	00013006 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110d5e8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d5ec:	e0bffc0f 	ldh	r2,-16(fp)
8110d5f0:	1009883a 	mov	r4,r2
8110d5f4:	11100600 	call	81110060 <cGetNextChar>
8110d5f8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d5fc:	d0e00317 	ldw	r3,-32756(gp)
8110d600:	e0bff947 	ldb	r2,-27(fp)
8110d604:	10800044 	addi	r2,r2,1
8110d608:	1885883a 	add	r2,r3,r2
8110d60c:	10800003 	ldbu	r2,0(r2)
8110d610:	10803fcc 	andi	r2,r2,255
8110d614:	1080010c 	andi	r2,r2,4
8110d618:	10000626 	beq	r2,zero,8110d634 <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110d61c:	e0bffa17 	ldw	r2,-24(fp)
8110d620:	e0fff943 	ldbu	r3,-27(fp)
8110d624:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d628:	e0bffa17 	ldw	r2,-24(fp)
8110d62c:	10800044 	addi	r2,r2,1
8110d630:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d634:	e0bff947 	ldb	r2,-27(fp)
8110d638:	10800ba0 	cmpeqi	r2,r2,46
8110d63c:	1000031e 	bne	r2,zero,8110d64c <vLoadDefaultETHConf+0x394>
8110d640:	e0bff947 	ldb	r2,-27(fp)
8110d644:	10800ed8 	cmpnei	r2,r2,59
8110d648:	103fe81e 	bne	r2,zero,8110d5ec <__reset+0xfb0ed5ec>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d64c:	e0bffa17 	ldw	r2,-24(fp)
8110d650:	00c00284 	movi	r3,10
8110d654:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110d658:	e0bff903 	ldbu	r2,-28(fp)
8110d65c:	108000e8 	cmpgeui	r2,r2,3
8110d660:	1000021e 	bne	r2,zero,8110d66c <vLoadDefaultETHConf+0x3b4>
8110d664:	e43ff903 	ldbu	r16,-28(fp)
8110d668:	00000106 	br	8110d670 <vLoadDefaultETHConf+0x3b8>
8110d66c:	040000c4 	movi	r16,3
8110d670:	e0bffd04 	addi	r2,fp,-12
8110d674:	1009883a 	mov	r4,r2
8110d678:	11119d80 	call	811119d8 <atoi>
8110d67c:	1007883a 	mov	r3,r2
8110d680:	00a04574 	movhi	r2,33045
8110d684:	10bf1104 	addi	r2,r2,-956
8110d688:	1405883a 	add	r2,r2,r16
8110d68c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d690:	e0bffd04 	addi	r2,fp,-12
8110d694:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d698:	e0bff903 	ldbu	r2,-28(fp)
8110d69c:	10800044 	addi	r2,r2,1
8110d6a0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d6a4:	e0bff947 	ldb	r2,-27(fp)
8110d6a8:	10800ed8 	cmpnei	r2,r2,59
8110d6ac:	103fcf1e 	bne	r2,zero,8110d5ec <__reset+0xfb0ed5ec>

						break;
8110d6b0:	0000fd06 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110d6b4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d6b8:	e0bffc0f 	ldh	r2,-16(fp)
8110d6bc:	1009883a 	mov	r4,r2
8110d6c0:	11100600 	call	81110060 <cGetNextChar>
8110d6c4:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d6c8:	d0e00317 	ldw	r3,-32756(gp)
8110d6cc:	e0bff947 	ldb	r2,-27(fp)
8110d6d0:	10800044 	addi	r2,r2,1
8110d6d4:	1885883a 	add	r2,r3,r2
8110d6d8:	10800003 	ldbu	r2,0(r2)
8110d6dc:	10803fcc 	andi	r2,r2,255
8110d6e0:	1080010c 	andi	r2,r2,4
8110d6e4:	10000626 	beq	r2,zero,8110d700 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110d6e8:	e0bffa17 	ldw	r2,-24(fp)
8110d6ec:	e0fff943 	ldbu	r3,-27(fp)
8110d6f0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d6f4:	e0bffa17 	ldw	r2,-24(fp)
8110d6f8:	10800044 	addi	r2,r2,1
8110d6fc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d700:	e0bff947 	ldb	r2,-27(fp)
8110d704:	10800ba0 	cmpeqi	r2,r2,46
8110d708:	1000031e 	bne	r2,zero,8110d718 <vLoadDefaultETHConf+0x460>
8110d70c:	e0bff947 	ldb	r2,-27(fp)
8110d710:	10800ed8 	cmpnei	r2,r2,59
8110d714:	103fe81e 	bne	r2,zero,8110d6b8 <__reset+0xfb0ed6b8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d718:	e0bffa17 	ldw	r2,-24(fp)
8110d71c:	00c00284 	movi	r3,10
8110d720:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110d724:	e0bff903 	ldbu	r2,-28(fp)
8110d728:	108000e8 	cmpgeui	r2,r2,3
8110d72c:	1000021e 	bne	r2,zero,8110d738 <vLoadDefaultETHConf+0x480>
8110d730:	e43ff903 	ldbu	r16,-28(fp)
8110d734:	00000106 	br	8110d73c <vLoadDefaultETHConf+0x484>
8110d738:	040000c4 	movi	r16,3
8110d73c:	e0bffd04 	addi	r2,fp,-12
8110d740:	1009883a 	mov	r4,r2
8110d744:	11119d80 	call	811119d8 <atoi>
8110d748:	1007883a 	mov	r3,r2
8110d74c:	00a04574 	movhi	r2,33045
8110d750:	10bf1104 	addi	r2,r2,-956
8110d754:	1405883a 	add	r2,r2,r16
8110d758:	10800104 	addi	r2,r2,4
8110d75c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d760:	e0bffd04 	addi	r2,fp,-12
8110d764:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d768:	e0bff903 	ldbu	r2,-28(fp)
8110d76c:	10800044 	addi	r2,r2,1
8110d770:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d774:	e0bff947 	ldb	r2,-27(fp)
8110d778:	10800ed8 	cmpnei	r2,r2,59
8110d77c:	103fce1e 	bne	r2,zero,8110d6b8 <__reset+0xfb0ed6b8>

						break;
8110d780:	0000c906 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110d784:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d788:	e0bffc0f 	ldh	r2,-16(fp)
8110d78c:	1009883a 	mov	r4,r2
8110d790:	11100600 	call	81110060 <cGetNextChar>
8110d794:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d798:	d0e00317 	ldw	r3,-32756(gp)
8110d79c:	e0bff947 	ldb	r2,-27(fp)
8110d7a0:	10800044 	addi	r2,r2,1
8110d7a4:	1885883a 	add	r2,r3,r2
8110d7a8:	10800003 	ldbu	r2,0(r2)
8110d7ac:	10803fcc 	andi	r2,r2,255
8110d7b0:	1080010c 	andi	r2,r2,4
8110d7b4:	10000626 	beq	r2,zero,8110d7d0 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110d7b8:	e0bffa17 	ldw	r2,-24(fp)
8110d7bc:	e0fff943 	ldbu	r3,-27(fp)
8110d7c0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d7c4:	e0bffa17 	ldw	r2,-24(fp)
8110d7c8:	10800044 	addi	r2,r2,1
8110d7cc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d7d0:	e0bff947 	ldb	r2,-27(fp)
8110d7d4:	10800ba0 	cmpeqi	r2,r2,46
8110d7d8:	1000031e 	bne	r2,zero,8110d7e8 <vLoadDefaultETHConf+0x530>
8110d7dc:	e0bff947 	ldb	r2,-27(fp)
8110d7e0:	10800ed8 	cmpnei	r2,r2,59
8110d7e4:	103fe81e 	bne	r2,zero,8110d788 <__reset+0xfb0ed788>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d7e8:	e0bffa17 	ldw	r2,-24(fp)
8110d7ec:	00c00284 	movi	r3,10
8110d7f0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110d7f4:	e0bff903 	ldbu	r2,-28(fp)
8110d7f8:	108000e8 	cmpgeui	r2,r2,3
8110d7fc:	1000021e 	bne	r2,zero,8110d808 <vLoadDefaultETHConf+0x550>
8110d800:	e43ff903 	ldbu	r16,-28(fp)
8110d804:	00000106 	br	8110d80c <vLoadDefaultETHConf+0x554>
8110d808:	040000c4 	movi	r16,3
8110d80c:	e0bffd04 	addi	r2,fp,-12
8110d810:	1009883a 	mov	r4,r2
8110d814:	11119d80 	call	811119d8 <atoi>
8110d818:	1007883a 	mov	r3,r2
8110d81c:	00a04574 	movhi	r2,33045
8110d820:	10bf1104 	addi	r2,r2,-956
8110d824:	1405883a 	add	r2,r2,r16
8110d828:	10800204 	addi	r2,r2,8
8110d82c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d830:	e0bffd04 	addi	r2,fp,-12
8110d834:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d838:	e0bff903 	ldbu	r2,-28(fp)
8110d83c:	10800044 	addi	r2,r2,1
8110d840:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d844:	e0bff947 	ldb	r2,-27(fp)
8110d848:	10800ed8 	cmpnei	r2,r2,59
8110d84c:	103fce1e 	bne	r2,zero,8110d788 <__reset+0xfb0ed788>

						break;
8110d850:	00009506 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110d854:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d858:	e0bffc0f 	ldh	r2,-16(fp)
8110d85c:	1009883a 	mov	r4,r2
8110d860:	11100600 	call	81110060 <cGetNextChar>
8110d864:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d868:	d0e00317 	ldw	r3,-32756(gp)
8110d86c:	e0bff947 	ldb	r2,-27(fp)
8110d870:	10800044 	addi	r2,r2,1
8110d874:	1885883a 	add	r2,r3,r2
8110d878:	10800003 	ldbu	r2,0(r2)
8110d87c:	10803fcc 	andi	r2,r2,255
8110d880:	1080010c 	andi	r2,r2,4
8110d884:	10000626 	beq	r2,zero,8110d8a0 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110d888:	e0bffa17 	ldw	r2,-24(fp)
8110d88c:	e0fff943 	ldbu	r3,-27(fp)
8110d890:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d894:	e0bffa17 	ldw	r2,-24(fp)
8110d898:	10800044 	addi	r2,r2,1
8110d89c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d8a0:	e0bff947 	ldb	r2,-27(fp)
8110d8a4:	10800ba0 	cmpeqi	r2,r2,46
8110d8a8:	1000031e 	bne	r2,zero,8110d8b8 <vLoadDefaultETHConf+0x600>
8110d8ac:	e0bff947 	ldb	r2,-27(fp)
8110d8b0:	10800ed8 	cmpnei	r2,r2,59
8110d8b4:	103fe81e 	bne	r2,zero,8110d858 <__reset+0xfb0ed858>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d8b8:	e0bffa17 	ldw	r2,-24(fp)
8110d8bc:	00c00284 	movi	r3,10
8110d8c0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110d8c4:	e0bff903 	ldbu	r2,-28(fp)
8110d8c8:	108000e8 	cmpgeui	r2,r2,3
8110d8cc:	1000021e 	bne	r2,zero,8110d8d8 <vLoadDefaultETHConf+0x620>
8110d8d0:	e43ff903 	ldbu	r16,-28(fp)
8110d8d4:	00000106 	br	8110d8dc <vLoadDefaultETHConf+0x624>
8110d8d8:	040000c4 	movi	r16,3
8110d8dc:	e0bffd04 	addi	r2,fp,-12
8110d8e0:	1009883a 	mov	r4,r2
8110d8e4:	11119d80 	call	811119d8 <atoi>
8110d8e8:	1007883a 	mov	r3,r2
8110d8ec:	00a04574 	movhi	r2,33045
8110d8f0:	10bf1104 	addi	r2,r2,-956
8110d8f4:	1405883a 	add	r2,r2,r16
8110d8f8:	10800304 	addi	r2,r2,12
8110d8fc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d900:	e0bffd04 	addi	r2,fp,-12
8110d904:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d908:	e0bff903 	ldbu	r2,-28(fp)
8110d90c:	10800044 	addi	r2,r2,1
8110d910:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d914:	e0bff947 	ldb	r2,-27(fp)
8110d918:	10800ed8 	cmpnei	r2,r2,59
8110d91c:	103fce1e 	bne	r2,zero,8110d858 <__reset+0xfb0ed858>

						break;						
8110d920:	00006106 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110d924:	e0bffc0f 	ldh	r2,-16(fp)
8110d928:	1009883a 	mov	r4,r2
8110d92c:	11100600 	call	81110060 <cGetNextChar>
8110d930:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110d934:	d0e00317 	ldw	r3,-32756(gp)
8110d938:	e0bff947 	ldb	r2,-27(fp)
8110d93c:	10800044 	addi	r2,r2,1
8110d940:	1885883a 	add	r2,r3,r2
8110d944:	10800003 	ldbu	r2,0(r2)
8110d948:	10803fcc 	andi	r2,r2,255
8110d94c:	1080010c 	andi	r2,r2,4
8110d950:	10000626 	beq	r2,zero,8110d96c <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110d954:	e0bffa17 	ldw	r2,-24(fp)
8110d958:	e0fff943 	ldbu	r3,-27(fp)
8110d95c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110d960:	e0bffa17 	ldw	r2,-24(fp)
8110d964:	10800044 	addi	r2,r2,1
8110d968:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110d96c:	e0bff947 	ldb	r2,-27(fp)
8110d970:	10800ed8 	cmpnei	r2,r2,59
8110d974:	103feb1e 	bne	r2,zero,8110d924 <__reset+0xfb0ed924>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d978:	e0bffa17 	ldw	r2,-24(fp)
8110d97c:	00c00284 	movi	r3,10
8110d980:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110d984:	e0bffd04 	addi	r2,fp,-12
8110d988:	1009883a 	mov	r4,r2
8110d98c:	11119d80 	call	811119d8 <atoi>
8110d990:	1007883a 	mov	r3,r2
8110d994:	00a04574 	movhi	r2,33045
8110d998:	10bf1104 	addi	r2,r2,-956
8110d99c:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110d9a0:	e0bffd04 	addi	r2,fp,-12
8110d9a4:	e0bffa15 	stw	r2,-24(fp)

						break;
8110d9a8:	00003f06 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110d9ac:	e0bffc0f 	ldh	r2,-16(fp)
8110d9b0:	1009883a 	mov	r4,r2
8110d9b4:	11100600 	call	81110060 <cGetNextChar>
8110d9b8:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110d9bc:	d0e00317 	ldw	r3,-32756(gp)
8110d9c0:	e0bff947 	ldb	r2,-27(fp)
8110d9c4:	10800044 	addi	r2,r2,1
8110d9c8:	1885883a 	add	r2,r3,r2
8110d9cc:	10800003 	ldbu	r2,0(r2)
8110d9d0:	10803fcc 	andi	r2,r2,255
8110d9d4:	1080010c 	andi	r2,r2,4
8110d9d8:	10000626 	beq	r2,zero,8110d9f4 <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110d9dc:	e0bffa17 	ldw	r2,-24(fp)
8110d9e0:	e0fff943 	ldbu	r3,-27(fp)
8110d9e4:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110d9e8:	e0bffa17 	ldw	r2,-24(fp)
8110d9ec:	10800044 	addi	r2,r2,1
8110d9f0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110d9f4:	e0bff947 	ldb	r2,-27(fp)
8110d9f8:	10800ed8 	cmpnei	r2,r2,59
8110d9fc:	103feb1e 	bne	r2,zero,8110d9ac <__reset+0xfb0ed9ac>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110da00:	e0bffa17 	ldw	r2,-24(fp)
8110da04:	00c00284 	movi	r3,10
8110da08:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110da0c:	e0bffd04 	addi	r2,fp,-12
8110da10:	1009883a 	mov	r4,r2
8110da14:	11119d80 	call	811119d8 <atoi>
8110da18:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110da1c:	e0bffc8f 	ldh	r2,-14(fp)
8110da20:	10800058 	cmpnei	r2,r2,1
8110da24:	1000051e 	bne	r2,zero,8110da3c <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110da28:	00a04574 	movhi	r2,33045
8110da2c:	10bf1104 	addi	r2,r2,-956
8110da30:	00c00044 	movi	r3,1
8110da34:	10c00615 	stw	r3,24(r2)
8110da38:	00000306 	br	8110da48 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110da3c:	00a04574 	movhi	r2,33045
8110da40:	10bf1104 	addi	r2,r2,-956
8110da44:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110da48:	e0bffd04 	addi	r2,fp,-12
8110da4c:	e0bffa15 	stw	r2,-24(fp)

						break;
8110da50:	00001506 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110da54:	e0bffc0f 	ldh	r2,-16(fp)
8110da58:	1009883a 	mov	r4,r2
8110da5c:	11100200 	call	81110020 <siCloseFile>
8110da60:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110da64:	e0bffb17 	ldw	r2,-20(fp)
8110da68:	1000031e 	bne	r2,zero,8110da78 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110da6c:	01204534 	movhi	r4,33044
8110da70:	2134a004 	addi	r4,r4,-11648
8110da74:	1112f580 	call	81112f58 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110da78:	00800044 	movi	r2,1
8110da7c:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110da80:	00800044 	movi	r2,1
8110da84:	e0bff715 	stw	r2,-36(fp)
						break;
8110da88:	00000706 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110da8c:	e0bff947 	ldb	r2,-27(fp)
8110da90:	100b883a 	mov	r5,r2
8110da94:	01204534 	movhi	r4,33044
8110da98:	2134a804 	addi	r4,r4,-11616
8110da9c:	1112e4c0 	call	81112e4c <printf>
						break;
8110daa0:	00000106 	br	8110daa8 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110daa4:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110daa8:	e0bff817 	ldw	r2,-32(fp)
8110daac:	103e2026 	beq	r2,zero,8110d330 <__reset+0xfb0ed330>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110dab0:	00000706 	br	8110dad0 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110dab4:	01204534 	movhi	r4,33044
8110dab8:	2134b504 	addi	r4,r4,-11564
8110dabc:	1112f580 	call	81112f58 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110dac0:	00000306 	br	8110dad0 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110dac4:	01204534 	movhi	r4,33044
8110dac8:	2134be04 	addi	r4,r4,-11528
8110dacc:	1112f580 	call	81112f58 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110dad0:	e0bff717 	ldw	r2,-36(fp)
8110dad4:	1000541e 	bne	r2,zero,8110dc28 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110dad8:	01204534 	movhi	r4,33044
8110dadc:	2134c104 	addi	r4,r4,-11516
8110dae0:	1112f580 	call	81112f58 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110dae4:	01604534 	movhi	r5,33044
8110dae8:	29749904 	addi	r5,r5,-11676
8110daec:	01204534 	movhi	r4,33044
8110daf0:	2134d504 	addi	r4,r4,-11436
8110daf4:	1112e4c0 	call	81112e4c <printf>


		xConfEth.siPortPUS = 17000;
8110daf8:	00a04574 	movhi	r2,33045
8110dafc:	10bf1104 	addi	r2,r2,-956
8110db00:	00d09a04 	movi	r3,17000
8110db04:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110db08:	00a04574 	movhi	r2,33045
8110db0c:	10bf1104 	addi	r2,r2,-956
8110db10:	00fff004 	movi	r3,-64
8110db14:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110db18:	00a04574 	movhi	r2,33045
8110db1c:	10bf1104 	addi	r2,r2,-956
8110db20:	00ffea04 	movi	r3,-88
8110db24:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110db28:	00a04574 	movhi	r2,33045
8110db2c:	10bf1104 	addi	r2,r2,-956
8110db30:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110db34:	00a04574 	movhi	r2,33045
8110db38:	10bf1104 	addi	r2,r2,-956
8110db3c:	00c00144 	movi	r3,5
8110db40:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110db44:	00a04574 	movhi	r2,33045
8110db48:	10bf1104 	addi	r2,r2,-956
8110db4c:	00fff004 	movi	r3,-64
8110db50:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110db54:	00a04574 	movhi	r2,33045
8110db58:	10bf1104 	addi	r2,r2,-956
8110db5c:	00ffea04 	movi	r3,-88
8110db60:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110db64:	00a04574 	movhi	r2,33045
8110db68:	10bf1104 	addi	r2,r2,-956
8110db6c:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110db70:	00a04574 	movhi	r2,33045
8110db74:	10bf1104 	addi	r2,r2,-956
8110db78:	00c00044 	movi	r3,1
8110db7c:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110db80:	00a04574 	movhi	r2,33045
8110db84:	10bf1104 	addi	r2,r2,-956
8110db88:	00ffffc4 	movi	r3,-1
8110db8c:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110db90:	00a04574 	movhi	r2,33045
8110db94:	10bf1104 	addi	r2,r2,-956
8110db98:	00ffffc4 	movi	r3,-1
8110db9c:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110dba0:	00a04574 	movhi	r2,33045
8110dba4:	10bf1104 	addi	r2,r2,-956
8110dba8:	00ffffc4 	movi	r3,-1
8110dbac:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110dbb0:	00a04574 	movhi	r2,33045
8110dbb4:	10bf1104 	addi	r2,r2,-956
8110dbb8:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110dbbc:	00a04574 	movhi	r2,33045
8110dbc0:	10bf1104 	addi	r2,r2,-956
8110dbc4:	00ffff04 	movi	r3,-4
8110dbc8:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110dbcc:	00a04574 	movhi	r2,33045
8110dbd0:	10bf1104 	addi	r2,r2,-956
8110dbd4:	00fffdc4 	movi	r3,-9
8110dbd8:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110dbdc:	00a04574 	movhi	r2,33045
8110dbe0:	10bf1104 	addi	r2,r2,-956
8110dbe4:	00c018c4 	movi	r3,99
8110dbe8:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110dbec:	00a04574 	movhi	r2,33045
8110dbf0:	10bf1104 	addi	r2,r2,-956
8110dbf4:	00c01344 	movi	r3,77
8110dbf8:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110dbfc:	00a04574 	movhi	r2,33045
8110dc00:	10bf1104 	addi	r2,r2,-956
8110dc04:	00c007c4 	movi	r3,31
8110dc08:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110dc0c:	00a04574 	movhi	r2,33045
8110dc10:	10bf1104 	addi	r2,r2,-956
8110dc14:	00c01084 	movi	r3,66
8110dc18:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110dc1c:	00a04574 	movhi	r2,33045
8110dc20:	10bf1104 	addi	r2,r2,-956
8110dc24:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110dc28:	e0bff717 	ldw	r2,-36(fp)
}
8110dc2c:	e6ffff04 	addi	sp,fp,-4
8110dc30:	dfc00217 	ldw	ra,8(sp)
8110dc34:	df000117 	ldw	fp,4(sp)
8110dc38:	dc000017 	ldw	r16,0(sp)
8110dc3c:	dec00304 	addi	sp,sp,12
8110dc40:	f800283a 	ret

8110dc44 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110dc44:	defff004 	addi	sp,sp,-64
8110dc48:	de00012e 	bgeu	sp,et,8110dc50 <vShowEthConfig+0xc>
8110dc4c:	003b68fa 	trap	3
8110dc50:	dfc00f15 	stw	ra,60(sp)
8110dc54:	df000e15 	stw	fp,56(sp)
8110dc58:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110dc5c:	d0a04e17 	ldw	r2,-32456(gp)
8110dc60:	100f883a 	mov	r7,r2
8110dc64:	018007c4 	movi	r6,31
8110dc68:	01400044 	movi	r5,1
8110dc6c:	01204534 	movhi	r4,33044
8110dc70:	2134db04 	addi	r4,r4,-11412
8110dc74:	11121200 	call	81112120 <fwrite>

		memset(buffer,0,40);
8110dc78:	01800a04 	movi	r6,40
8110dc7c:	000b883a 	mov	r5,zero
8110dc80:	e13ff604 	addi	r4,fp,-40
8110dc84:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110dc88:	00a04574 	movhi	r2,33045
8110dc8c:	10bf1104 	addi	r2,r2,-956
8110dc90:	10800403 	ldbu	r2,16(r2)
8110dc94:	11803fcc 	andi	r6,r2,255
8110dc98:	00a04574 	movhi	r2,33045
8110dc9c:	10bf1104 	addi	r2,r2,-956
8110dca0:	10800443 	ldbu	r2,17(r2)
8110dca4:	11c03fcc 	andi	r7,r2,255
8110dca8:	00a04574 	movhi	r2,33045
8110dcac:	10bf1104 	addi	r2,r2,-956
8110dcb0:	10800483 	ldbu	r2,18(r2)
8110dcb4:	10c03fcc 	andi	r3,r2,255
8110dcb8:	00a04574 	movhi	r2,33045
8110dcbc:	10bf1104 	addi	r2,r2,-956
8110dcc0:	108004c3 	ldbu	r2,19(r2)
8110dcc4:	11003fcc 	andi	r4,r2,255
8110dcc8:	00a04574 	movhi	r2,33045
8110dccc:	10bf1104 	addi	r2,r2,-956
8110dcd0:	10800503 	ldbu	r2,20(r2)
8110dcd4:	11403fcc 	andi	r5,r2,255
8110dcd8:	00a04574 	movhi	r2,33045
8110dcdc:	10bf1104 	addi	r2,r2,-956
8110dce0:	10800543 	ldbu	r2,21(r2)
8110dce4:	10803fcc 	andi	r2,r2,255
8110dce8:	d8800315 	stw	r2,12(sp)
8110dcec:	d9400215 	stw	r5,8(sp)
8110dcf0:	d9000115 	stw	r4,4(sp)
8110dcf4:	d8c00015 	stw	r3,0(sp)
8110dcf8:	01604534 	movhi	r5,33044
8110dcfc:	2974e304 	addi	r5,r5,-11380
8110dd00:	e13ff604 	addi	r4,fp,-40
8110dd04:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110dd08:	d0a04e17 	ldw	r2,-32456(gp)
8110dd0c:	e17ff604 	addi	r5,fp,-40
8110dd10:	1009883a 	mov	r4,r2
8110dd14:	1111b340 	call	81111b34 <fprintf>

		memset(buffer,0,40);
8110dd18:	01800a04 	movi	r6,40
8110dd1c:	000b883a 	mov	r5,zero
8110dd20:	e13ff604 	addi	r4,fp,-40
8110dd24:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110dd28:	00a04574 	movhi	r2,33045
8110dd2c:	10bf1104 	addi	r2,r2,-956
8110dd30:	10800003 	ldbu	r2,0(r2)
8110dd34:	11003fcc 	andi	r4,r2,255
8110dd38:	00a04574 	movhi	r2,33045
8110dd3c:	10bf1104 	addi	r2,r2,-956
8110dd40:	10800043 	ldbu	r2,1(r2)
8110dd44:	11403fcc 	andi	r5,r2,255
8110dd48:	00a04574 	movhi	r2,33045
8110dd4c:	10bf1104 	addi	r2,r2,-956
8110dd50:	10800083 	ldbu	r2,2(r2)
8110dd54:	10c03fcc 	andi	r3,r2,255
8110dd58:	00a04574 	movhi	r2,33045
8110dd5c:	10bf1104 	addi	r2,r2,-956
8110dd60:	108000c3 	ldbu	r2,3(r2)
8110dd64:	10803fcc 	andi	r2,r2,255
8110dd68:	d8800115 	stw	r2,4(sp)
8110dd6c:	d8c00015 	stw	r3,0(sp)
8110dd70:	280f883a 	mov	r7,r5
8110dd74:	200d883a 	mov	r6,r4
8110dd78:	01604534 	movhi	r5,33044
8110dd7c:	2974ec04 	addi	r5,r5,-11344
8110dd80:	e13ff604 	addi	r4,fp,-40
8110dd84:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110dd88:	d0a04e17 	ldw	r2,-32456(gp)
8110dd8c:	e17ff604 	addi	r5,fp,-40
8110dd90:	1009883a 	mov	r4,r2
8110dd94:	1111b340 	call	81111b34 <fprintf>

		memset(buffer,0,40);
8110dd98:	01800a04 	movi	r6,40
8110dd9c:	000b883a 	mov	r5,zero
8110dda0:	e13ff604 	addi	r4,fp,-40
8110dda4:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110dda8:	00a04574 	movhi	r2,33045
8110ddac:	10bf1104 	addi	r2,r2,-956
8110ddb0:	10800103 	ldbu	r2,4(r2)
8110ddb4:	11003fcc 	andi	r4,r2,255
8110ddb8:	00a04574 	movhi	r2,33045
8110ddbc:	10bf1104 	addi	r2,r2,-956
8110ddc0:	10800143 	ldbu	r2,5(r2)
8110ddc4:	11403fcc 	andi	r5,r2,255
8110ddc8:	00a04574 	movhi	r2,33045
8110ddcc:	10bf1104 	addi	r2,r2,-956
8110ddd0:	10800183 	ldbu	r2,6(r2)
8110ddd4:	10c03fcc 	andi	r3,r2,255
8110ddd8:	00a04574 	movhi	r2,33045
8110dddc:	10bf1104 	addi	r2,r2,-956
8110dde0:	108001c3 	ldbu	r2,7(r2)
8110dde4:	10803fcc 	andi	r2,r2,255
8110dde8:	d8800115 	stw	r2,4(sp)
8110ddec:	d8c00015 	stw	r3,0(sp)
8110ddf0:	280f883a 	mov	r7,r5
8110ddf4:	200d883a 	mov	r6,r4
8110ddf8:	01604534 	movhi	r5,33044
8110ddfc:	2974f204 	addi	r5,r5,-11320
8110de00:	e13ff604 	addi	r4,fp,-40
8110de04:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110de08:	d0a04e17 	ldw	r2,-32456(gp)
8110de0c:	e17ff604 	addi	r5,fp,-40
8110de10:	1009883a 	mov	r4,r2
8110de14:	1111b340 	call	81111b34 <fprintf>

		memset(buffer,0,40);
8110de18:	01800a04 	movi	r6,40
8110de1c:	000b883a 	mov	r5,zero
8110de20:	e13ff604 	addi	r4,fp,-40
8110de24:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110de28:	00a04574 	movhi	r2,33045
8110de2c:	10bf1104 	addi	r2,r2,-956
8110de30:	10800203 	ldbu	r2,8(r2)
8110de34:	11003fcc 	andi	r4,r2,255
8110de38:	00a04574 	movhi	r2,33045
8110de3c:	10bf1104 	addi	r2,r2,-956
8110de40:	10800243 	ldbu	r2,9(r2)
8110de44:	11403fcc 	andi	r5,r2,255
8110de48:	00a04574 	movhi	r2,33045
8110de4c:	10bf1104 	addi	r2,r2,-956
8110de50:	10800283 	ldbu	r2,10(r2)
8110de54:	10c03fcc 	andi	r3,r2,255
8110de58:	00a04574 	movhi	r2,33045
8110de5c:	10bf1104 	addi	r2,r2,-956
8110de60:	108002c3 	ldbu	r2,11(r2)
8110de64:	10803fcc 	andi	r2,r2,255
8110de68:	d8800115 	stw	r2,4(sp)
8110de6c:	d8c00015 	stw	r3,0(sp)
8110de70:	280f883a 	mov	r7,r5
8110de74:	200d883a 	mov	r6,r4
8110de78:	01604534 	movhi	r5,33044
8110de7c:	2974f904 	addi	r5,r5,-11292
8110de80:	e13ff604 	addi	r4,fp,-40
8110de84:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110de88:	d0a04e17 	ldw	r2,-32456(gp)
8110de8c:	e17ff604 	addi	r5,fp,-40
8110de90:	1009883a 	mov	r4,r2
8110de94:	1111b340 	call	81111b34 <fprintf>

		memset(buffer,0,40);
8110de98:	01800a04 	movi	r6,40
8110de9c:	000b883a 	mov	r5,zero
8110dea0:	e13ff604 	addi	r4,fp,-40
8110dea4:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110dea8:	00a04574 	movhi	r2,33045
8110deac:	10bf1104 	addi	r2,r2,-956
8110deb0:	10800303 	ldbu	r2,12(r2)
8110deb4:	11003fcc 	andi	r4,r2,255
8110deb8:	00a04574 	movhi	r2,33045
8110debc:	10bf1104 	addi	r2,r2,-956
8110dec0:	10800343 	ldbu	r2,13(r2)
8110dec4:	11403fcc 	andi	r5,r2,255
8110dec8:	00a04574 	movhi	r2,33045
8110decc:	10bf1104 	addi	r2,r2,-956
8110ded0:	10800383 	ldbu	r2,14(r2)
8110ded4:	10c03fcc 	andi	r3,r2,255
8110ded8:	00a04574 	movhi	r2,33045
8110dedc:	10bf1104 	addi	r2,r2,-956
8110dee0:	108003c3 	ldbu	r2,15(r2)
8110dee4:	10803fcc 	andi	r2,r2,255
8110dee8:	d8800115 	stw	r2,4(sp)
8110deec:	d8c00015 	stw	r3,0(sp)
8110def0:	280f883a 	mov	r7,r5
8110def4:	200d883a 	mov	r6,r4
8110def8:	01604534 	movhi	r5,33044
8110defc:	29750004 	addi	r5,r5,-11264
8110df00:	e13ff604 	addi	r4,fp,-40
8110df04:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110df08:	d0a04e17 	ldw	r2,-32456(gp)
8110df0c:	e17ff604 	addi	r5,fp,-40
8110df10:	1009883a 	mov	r4,r2
8110df14:	1111b340 	call	81111b34 <fprintf>

		memset(buffer,0,40);
8110df18:	01800a04 	movi	r6,40
8110df1c:	000b883a 	mov	r5,zero
8110df20:	e13ff604 	addi	r4,fp,-40
8110df24:	1112c840 	call	81112c84 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110df28:	00a04574 	movhi	r2,33045
8110df2c:	10bf1104 	addi	r2,r2,-956
8110df30:	1080058b 	ldhu	r2,22(r2)
8110df34:	10bfffcc 	andi	r2,r2,65535
8110df38:	100d883a 	mov	r6,r2
8110df3c:	01604534 	movhi	r5,33044
8110df40:	29750704 	addi	r5,r5,-11236
8110df44:	e13ff604 	addi	r4,fp,-40
8110df48:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer );
8110df4c:	d0a04e17 	ldw	r2,-32456(gp)
8110df50:	e17ff604 	addi	r5,fp,-40
8110df54:	1009883a 	mov	r4,r2
8110df58:	1111b340 	call	81111b34 <fprintf>

	}
8110df5c:	0001883a 	nop
8110df60:	e037883a 	mov	sp,fp
8110df64:	dfc00117 	ldw	ra,4(sp)
8110df68:	df000017 	ldw	fp,0(sp)
8110df6c:	dec00204 	addi	sp,sp,8
8110df70:	f800283a 	ret

8110df74 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110df74:	defffb04 	addi	sp,sp,-20
8110df78:	de00012e 	bgeu	sp,et,8110df80 <ucCrc8+0xc>
8110df7c:	003b68fa 	trap	3
8110df80:	df000415 	stw	fp,16(sp)
8110df84:	df000404 	addi	fp,sp,16
8110df88:	e13ffd15 	stw	r4,-12(fp)
8110df8c:	e17ffe15 	stw	r5,-8(fp)
8110df90:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110df94:	e0bffe17 	ldw	r2,-8(fp)
8110df98:	1000021e 	bne	r2,zero,8110dfa4 <ucCrc8+0x30>
        return 0;
8110df9c:	0005883a 	mov	r2,zero
8110dfa0:	00001906 	br	8110e008 <ucCrc8+0x94>
    crc &= 0xff;
8110dfa4:	e0bffd17 	ldw	r2,-12(fp)
8110dfa8:	10803fcc 	andi	r2,r2,255
8110dfac:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110dfb0:	e0fffe17 	ldw	r3,-8(fp)
8110dfb4:	e0bfff17 	ldw	r2,-4(fp)
8110dfb8:	1885883a 	add	r2,r3,r2
8110dfbc:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110dfc0:	00000d06 	br	8110dff8 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110dfc4:	e0bffe17 	ldw	r2,-8(fp)
8110dfc8:	10c00044 	addi	r3,r2,1
8110dfcc:	e0fffe15 	stw	r3,-8(fp)
8110dfd0:	10800003 	ldbu	r2,0(r2)
8110dfd4:	10c03fcc 	andi	r3,r2,255
8110dfd8:	e0bffd17 	ldw	r2,-12(fp)
8110dfdc:	1886f03a 	xor	r3,r3,r2
8110dfe0:	00a04534 	movhi	r2,33044
8110dfe4:	10b50ac4 	addi	r2,r2,-11221
8110dfe8:	10c5883a 	add	r2,r2,r3
8110dfec:	10800003 	ldbu	r2,0(r2)
8110dff0:	10803fcc 	andi	r2,r2,255
8110dff4:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110dff8:	e0fffe17 	ldw	r3,-8(fp)
8110dffc:	e0bffc17 	ldw	r2,-16(fp)
8110e000:	18bff036 	bltu	r3,r2,8110dfc4 <__reset+0xfb0edfc4>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110e004:	e0bffd17 	ldw	r2,-12(fp)
}
8110e008:	e037883a 	mov	sp,fp
8110e00c:	df000017 	ldw	fp,0(sp)
8110e010:	dec00104 	addi	sp,sp,4
8110e014:	f800283a 	ret

8110e018 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110e018:	defffb04 	addi	sp,sp,-20
8110e01c:	de00012e 	bgeu	sp,et,8110e024 <ucCrc8wInit+0xc>
8110e020:	003b68fa 	trap	3
8110e024:	dfc00415 	stw	ra,16(sp)
8110e028:	df000315 	stw	fp,12(sp)
8110e02c:	df000304 	addi	fp,sp,12
8110e030:	e13ffe15 	stw	r4,-8(fp)
8110e034:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110e038:	000d883a 	mov	r6,zero
8110e03c:	000b883a 	mov	r5,zero
8110e040:	0009883a 	mov	r4,zero
8110e044:	110df740 	call	8110df74 <ucCrc8>
8110e048:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110e04c:	e0bffd03 	ldbu	r2,-12(fp)
8110e050:	e1bfff17 	ldw	r6,-4(fp)
8110e054:	e17ffe17 	ldw	r5,-8(fp)
8110e058:	1009883a 	mov	r4,r2
8110e05c:	110df740 	call	8110df74 <ucCrc8>
}
8110e060:	e037883a 	mov	sp,fp
8110e064:	dfc00117 	ldw	ra,4(sp)
8110e068:	df000017 	ldw	fp,0(sp)
8110e06c:	dec00204 	addi	sp,sp,8
8110e070:	f800283a 	ret

8110e074 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110e074:	defff904 	addi	sp,sp,-28
8110e078:	de00012e 	bgeu	sp,et,8110e080 <printErrorTask+0xc>
8110e07c:	003b68fa 	trap	3
8110e080:	dfc00615 	stw	ra,24(sp)
8110e084:	df000515 	stw	fp,20(sp)
8110e088:	df000504 	addi	fp,sp,20
8110e08c:	2005883a 	mov	r2,r4
8110e090:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110e094:	e03ffb15 	stw	zero,-20(fp)
8110e098:	e03ffc15 	stw	zero,-16(fp)
8110e09c:	e03ffd15 	stw	zero,-12(fp)
8110e0a0:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110e0a4:	e0bfff03 	ldbu	r2,-4(fp)
8110e0a8:	100d883a 	mov	r6,r2
8110e0ac:	01604534 	movhi	r5,33044
8110e0b0:	29754b04 	addi	r5,r5,-10964
8110e0b4:	e13ffb04 	addi	r4,fp,-20
8110e0b8:	111329c0 	call	8111329c <sprintf>
		debug(fp, buffer);
8110e0bc:	d0a04e17 	ldw	r2,-32456(gp)
8110e0c0:	e17ffb04 	addi	r5,fp,-20
8110e0c4:	1009883a 	mov	r4,r2
8110e0c8:	1111b340 	call	81111b34 <fprintf>
	}
8110e0cc:	0001883a 	nop
8110e0d0:	e037883a 	mov	sp,fp
8110e0d4:	dfc00117 	ldw	ra,4(sp)
8110e0d8:	df000017 	ldw	fp,0(sp)
8110e0dc:	dec00204 	addi	sp,sp,8
8110e0e0:	f800283a 	ret

8110e0e4 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110e0e4:	defffd04 	addi	sp,sp,-12
8110e0e8:	de00012e 	bgeu	sp,et,8110e0f0 <vFailCreateMutexSResources+0xc>
8110e0ec:	003b68fa 	trap	3
8110e0f0:	dfc00215 	stw	ra,8(sp)
8110e0f4:	df000115 	stw	fp,4(sp)
8110e0f8:	df000104 	addi	fp,sp,4
8110e0fc:	2005883a 	mov	r2,r4
8110e100:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110e104:	d0a04e17 	ldw	r2,-32456(gp)
8110e108:	100f883a 	mov	r7,r2
8110e10c:	018008c4 	movi	r6,35
8110e110:	01400044 	movi	r5,1
8110e114:	01204534 	movhi	r4,33044
8110e118:	21354e04 	addi	r4,r4,-10952
8110e11c:	11121200 	call	81112120 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110e120:	e0bfff03 	ldbu	r2,-4(fp)
8110e124:	1009883a 	mov	r4,r2
8110e128:	110e0740 	call	8110e074 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e12c:	0001883a 	nop
8110e130:	e037883a 	mov	sp,fp
8110e134:	dfc00117 	ldw	ra,4(sp)
8110e138:	df000017 	ldw	fp,0(sp)
8110e13c:	dec00204 	addi	sp,sp,8
8110e140:	f800283a 	ret

8110e144 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110e144:	defffe04 	addi	sp,sp,-8
8110e148:	de00012e 	bgeu	sp,et,8110e150 <vFailCreateSemaphoreResources+0xc>
8110e14c:	003b68fa 	trap	3
8110e150:	dfc00115 	stw	ra,4(sp)
8110e154:	df000015 	stw	fp,0(sp)
8110e158:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110e15c:	d0a04e17 	ldw	r2,-32456(gp)
8110e160:	100f883a 	mov	r7,r2
8110e164:	01800984 	movi	r6,38
8110e168:	01400044 	movi	r5,1
8110e16c:	01204534 	movhi	r4,33044
8110e170:	21355704 	addi	r4,r4,-10916
8110e174:	11121200 	call	81112120 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e178:	0001883a 	nop
8110e17c:	e037883a 	mov	sp,fp
8110e180:	dfc00117 	ldw	ra,4(sp)
8110e184:	df000017 	ldw	fp,0(sp)
8110e188:	dec00204 	addi	sp,sp,8
8110e18c:	f800283a 	ret

8110e190 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110e190:	defffe04 	addi	sp,sp,-8
8110e194:	de00012e 	bgeu	sp,et,8110e19c <vFailTestCriticasParts+0xc>
8110e198:	003b68fa 	trap	3
8110e19c:	dfc00115 	stw	ra,4(sp)
8110e1a0:	df000015 	stw	fp,0(sp)
8110e1a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110e1a8:	d0a04e17 	ldw	r2,-32456(gp)
8110e1ac:	100f883a 	mov	r7,r2
8110e1b0:	018007c4 	movi	r6,31
8110e1b4:	01400044 	movi	r5,1
8110e1b8:	01204534 	movhi	r4,33044
8110e1bc:	21356104 	addi	r4,r4,-10876
8110e1c0:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e1c4:	0001883a 	nop
8110e1c8:	e037883a 	mov	sp,fp
8110e1cc:	dfc00117 	ldw	ra,4(sp)
8110e1d0:	df000017 	ldw	fp,0(sp)
8110e1d4:	dec00204 	addi	sp,sp,8
8110e1d8:	f800283a 	ret

8110e1dc <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110e1dc:	defffe04 	addi	sp,sp,-8
8110e1e0:	de00012e 	bgeu	sp,et,8110e1e8 <vFailSendxSemCommInit+0xc>
8110e1e4:	003b68fa 	trap	3
8110e1e8:	dfc00115 	stw	ra,4(sp)
8110e1ec:	df000015 	stw	fp,0(sp)
8110e1f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110e1f4:	d0a04e17 	ldw	r2,-32456(gp)
8110e1f8:	100f883a 	mov	r7,r2
8110e1fc:	01800744 	movi	r6,29
8110e200:	01400044 	movi	r5,1
8110e204:	01204534 	movhi	r4,33044
8110e208:	21356904 	addi	r4,r4,-10844
8110e20c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110e210:	d0a04e17 	ldw	r2,-32456(gp)
8110e214:	100f883a 	mov	r7,r2
8110e218:	01800a44 	movi	r6,41
8110e21c:	01400044 	movi	r5,1
8110e220:	01204534 	movhi	r4,33044
8110e224:	21357104 	addi	r4,r4,-10812
8110e228:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e22c:	0001883a 	nop
8110e230:	e037883a 	mov	sp,fp
8110e234:	dfc00117 	ldw	ra,4(sp)
8110e238:	df000017 	ldw	fp,0(sp)
8110e23c:	dec00204 	addi	sp,sp,8
8110e240:	f800283a 	ret

8110e244 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110e244:	defffe04 	addi	sp,sp,-8
8110e248:	de00012e 	bgeu	sp,et,8110e250 <vFailSendPreParsedSemaphore+0xc>
8110e24c:	003b68fa 	trap	3
8110e250:	dfc00115 	stw	ra,4(sp)
8110e254:	df000015 	stw	fp,0(sp)
8110e258:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110e25c:	d0a04e17 	ldw	r2,-32456(gp)
8110e260:	100f883a 	mov	r7,r2
8110e264:	01800904 	movi	r6,36
8110e268:	01400044 	movi	r5,1
8110e26c:	01204534 	movhi	r4,33044
8110e270:	21357c04 	addi	r4,r4,-10768
8110e274:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e278:	0001883a 	nop
8110e27c:	e037883a 	mov	sp,fp
8110e280:	dfc00117 	ldw	ra,4(sp)
8110e284:	df000017 	ldw	fp,0(sp)
8110e288:	dec00204 	addi	sp,sp,8
8110e28c:	f800283a 	ret

8110e290 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110e290:	defffe04 	addi	sp,sp,-8
8110e294:	de00012e 	bgeu	sp,et,8110e29c <vFailSendPreAckReceiverSemaphore+0xc>
8110e298:	003b68fa 	trap	3
8110e29c:	dfc00115 	stw	ra,4(sp)
8110e2a0:	df000015 	stw	fp,0(sp)
8110e2a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110e2a8:	d0a04e17 	ldw	r2,-32456(gp)
8110e2ac:	100f883a 	mov	r7,r2
8110e2b0:	01800a44 	movi	r6,41
8110e2b4:	01400044 	movi	r5,1
8110e2b8:	01204534 	movhi	r4,33044
8110e2bc:	21358604 	addi	r4,r4,-10728
8110e2c0:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e2c4:	0001883a 	nop
8110e2c8:	e037883a 	mov	sp,fp
8110e2cc:	dfc00117 	ldw	ra,4(sp)
8110e2d0:	df000017 	ldw	fp,0(sp)
8110e2d4:	dec00204 	addi	sp,sp,8
8110e2d8:	f800283a 	ret

8110e2dc <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110e2dc:	defffe04 	addi	sp,sp,-8
8110e2e0:	de00012e 	bgeu	sp,et,8110e2e8 <vFailSendPreAckSenderSemaphore+0xc>
8110e2e4:	003b68fa 	trap	3
8110e2e8:	dfc00115 	stw	ra,4(sp)
8110e2ec:	df000015 	stw	fp,0(sp)
8110e2f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110e2f4:	d0a04e17 	ldw	r2,-32456(gp)
8110e2f8:	100f883a 	mov	r7,r2
8110e2fc:	018009c4 	movi	r6,39
8110e300:	01400044 	movi	r5,1
8110e304:	01204534 	movhi	r4,33044
8110e308:	21359104 	addi	r4,r4,-10684
8110e30c:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e310:	0001883a 	nop
8110e314:	e037883a 	mov	sp,fp
8110e318:	dfc00117 	ldw	ra,4(sp)
8110e31c:	df000017 	ldw	fp,0(sp)
8110e320:	dec00204 	addi	sp,sp,8
8110e324:	f800283a 	ret

8110e328 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110e328:	defffe04 	addi	sp,sp,-8
8110e32c:	de00012e 	bgeu	sp,et,8110e334 <vFailGetCountSemaphoreSenderTask+0xc>
8110e330:	003b68fa 	trap	3
8110e334:	dfc00115 	stw	ra,4(sp)
8110e338:	df000015 	stw	fp,0(sp)
8110e33c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110e340:	d0a04e17 	ldw	r2,-32456(gp)
8110e344:	100f883a 	mov	r7,r2
8110e348:	01800a44 	movi	r6,41
8110e34c:	01400044 	movi	r5,1
8110e350:	01204534 	movhi	r4,33044
8110e354:	21359b04 	addi	r4,r4,-10644
8110e358:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110e35c:	d0a04e17 	ldw	r2,-32456(gp)
8110e360:	100f883a 	mov	r7,r2
8110e364:	01801104 	movi	r6,68
8110e368:	01400044 	movi	r5,1
8110e36c:	01204534 	movhi	r4,33044
8110e370:	2135a604 	addi	r4,r4,-10600
8110e374:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e378:	0001883a 	nop
8110e37c:	e037883a 	mov	sp,fp
8110e380:	dfc00117 	ldw	ra,4(sp)
8110e384:	df000017 	ldw	fp,0(sp)
8110e388:	dec00204 	addi	sp,sp,8
8110e38c:	f800283a 	ret

8110e390 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110e390:	defffe04 	addi	sp,sp,-8
8110e394:	de00012e 	bgeu	sp,et,8110e39c <vFailGetMutexSenderTask+0xc>
8110e398:	003b68fa 	trap	3
8110e39c:	dfc00115 	stw	ra,4(sp)
8110e3a0:	df000015 	stw	fp,0(sp)
8110e3a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110e3a8:	d0a04e17 	ldw	r2,-32456(gp)
8110e3ac:	100f883a 	mov	r7,r2
8110e3b0:	01800804 	movi	r6,32
8110e3b4:	01400044 	movi	r5,1
8110e3b8:	01204534 	movhi	r4,33044
8110e3bc:	2135b804 	addi	r4,r4,-10528
8110e3c0:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110e3c4:	d0a04e17 	ldw	r2,-32456(gp)
8110e3c8:	100f883a 	mov	r7,r2
8110e3cc:	01801084 	movi	r6,66
8110e3d0:	01400044 	movi	r5,1
8110e3d4:	01204534 	movhi	r4,33044
8110e3d8:	2135c104 	addi	r4,r4,-10492
8110e3dc:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e3e0:	0001883a 	nop
8110e3e4:	e037883a 	mov	sp,fp
8110e3e8:	dfc00117 	ldw	ra,4(sp)
8110e3ec:	df000017 	ldw	fp,0(sp)
8110e3f0:	dec00204 	addi	sp,sp,8
8110e3f4:	f800283a 	ret

8110e3f8 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110e3f8:	defffe04 	addi	sp,sp,-8
8110e3fc:	de00012e 	bgeu	sp,et,8110e404 <vFailGetCountSemaphoreReceiverTask+0xc>
8110e400:	003b68fa 	trap	3
8110e404:	dfc00115 	stw	ra,4(sp)
8110e408:	df000015 	stw	fp,0(sp)
8110e40c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110e410:	d0a04e17 	ldw	r2,-32456(gp)
8110e414:	100f883a 	mov	r7,r2
8110e418:	01800ac4 	movi	r6,43
8110e41c:	01400044 	movi	r5,1
8110e420:	01204534 	movhi	r4,33044
8110e424:	2135d204 	addi	r4,r4,-10424
8110e428:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110e42c:	d0a04e17 	ldw	r2,-32456(gp)
8110e430:	100f883a 	mov	r7,r2
8110e434:	01801184 	movi	r6,70
8110e438:	01400044 	movi	r5,1
8110e43c:	01204534 	movhi	r4,33044
8110e440:	2135dd04 	addi	r4,r4,-10380
8110e444:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e448:	0001883a 	nop
8110e44c:	e037883a 	mov	sp,fp
8110e450:	dfc00117 	ldw	ra,4(sp)
8110e454:	df000017 	ldw	fp,0(sp)
8110e458:	dec00204 	addi	sp,sp,8
8110e45c:	f800283a 	ret

8110e460 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110e460:	defffe04 	addi	sp,sp,-8
8110e464:	de00012e 	bgeu	sp,et,8110e46c <vFailGetMutexReceiverTask+0xc>
8110e468:	003b68fa 	trap	3
8110e46c:	dfc00115 	stw	ra,4(sp)
8110e470:	df000015 	stw	fp,0(sp)
8110e474:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110e478:	d0a04e17 	ldw	r2,-32456(gp)
8110e47c:	100f883a 	mov	r7,r2
8110e480:	01800884 	movi	r6,34
8110e484:	01400044 	movi	r5,1
8110e488:	01204534 	movhi	r4,33044
8110e48c:	2135ef04 	addi	r4,r4,-10308
8110e490:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110e494:	d0a04e17 	ldw	r2,-32456(gp)
8110e498:	100f883a 	mov	r7,r2
8110e49c:	01801104 	movi	r6,68
8110e4a0:	01400044 	movi	r5,1
8110e4a4:	01204534 	movhi	r4,33044
8110e4a8:	2135f804 	addi	r4,r4,-10272
8110e4ac:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4b0:	0001883a 	nop
8110e4b4:	e037883a 	mov	sp,fp
8110e4b8:	dfc00117 	ldw	ra,4(sp)
8110e4bc:	df000017 	ldw	fp,0(sp)
8110e4c0:	dec00204 	addi	sp,sp,8
8110e4c4:	f800283a 	ret

8110e4c8 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110e4c8:	defffe04 	addi	sp,sp,-8
8110e4cc:	de00012e 	bgeu	sp,et,8110e4d4 <vFailGetMutexTxUARTSenderTask+0xc>
8110e4d0:	003b68fa 	trap	3
8110e4d4:	dfc00115 	stw	ra,4(sp)
8110e4d8:	df000015 	stw	fp,0(sp)
8110e4dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110e4e0:	d0a04e17 	ldw	r2,-32456(gp)
8110e4e4:	100f883a 	mov	r7,r2
8110e4e8:	01800984 	movi	r6,38
8110e4ec:	01400044 	movi	r5,1
8110e4f0:	01204534 	movhi	r4,33044
8110e4f4:	21360a04 	addi	r4,r4,-10200
8110e4f8:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110e4fc:	d0a04e17 	ldw	r2,-32456(gp)
8110e500:	100f883a 	mov	r7,r2
8110e504:	01801044 	movi	r6,65
8110e508:	01400044 	movi	r5,1
8110e50c:	01204534 	movhi	r4,33044
8110e510:	21361404 	addi	r4,r4,-10160
8110e514:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e518:	0001883a 	nop
8110e51c:	e037883a 	mov	sp,fp
8110e520:	dfc00117 	ldw	ra,4(sp)
8110e524:	df000017 	ldw	fp,0(sp)
8110e528:	dec00204 	addi	sp,sp,8
8110e52c:	f800283a 	ret

8110e530 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110e530:	defffe04 	addi	sp,sp,-8
8110e534:	de00012e 	bgeu	sp,et,8110e53c <vFailGetMacRTC+0xc>
8110e538:	003b68fa 	trap	3
8110e53c:	dfc00115 	stw	ra,4(sp)
8110e540:	df000015 	stw	fp,0(sp)
8110e544:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110e548:	d0a04e17 	ldw	r2,-32456(gp)
8110e54c:	100f883a 	mov	r7,r2
8110e550:	018003c4 	movi	r6,15
8110e554:	01400044 	movi	r5,1
8110e558:	01204534 	movhi	r4,33044
8110e55c:	21362504 	addi	r4,r4,-10092
8110e560:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e564:	0001883a 	nop
8110e568:	e037883a 	mov	sp,fp
8110e56c:	dfc00117 	ldw	ra,4(sp)
8110e570:	df000017 	ldw	fp,0(sp)
8110e574:	dec00204 	addi	sp,sp,8
8110e578:	f800283a 	ret

8110e57c <vFailInitialization>:


void vFailInitialization( void )
{
8110e57c:	defffe04 	addi	sp,sp,-8
8110e580:	de00012e 	bgeu	sp,et,8110e588 <vFailInitialization+0xc>
8110e584:	003b68fa 	trap	3
8110e588:	dfc00115 	stw	ra,4(sp)
8110e58c:	df000015 	stw	fp,0(sp)
8110e590:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110e594:	d0a04e17 	ldw	r2,-32456(gp)
8110e598:	100f883a 	mov	r7,r2
8110e59c:	01800504 	movi	r6,20
8110e5a0:	01400044 	movi	r5,1
8110e5a4:	01204534 	movhi	r4,33044
8110e5a8:	21362904 	addi	r4,r4,-10076
8110e5ac:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5b0:	0001883a 	nop
8110e5b4:	e037883a 	mov	sp,fp
8110e5b8:	dfc00117 	ldw	ra,4(sp)
8110e5bc:	df000017 	ldw	fp,0(sp)
8110e5c0:	dec00204 	addi	sp,sp,8
8110e5c4:	f800283a 	ret

8110e5c8 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110e5c8:	defffe04 	addi	sp,sp,-8
8110e5cc:	de00012e 	bgeu	sp,et,8110e5d4 <vFailReceiverCreate+0xc>
8110e5d0:	003b68fa 	trap	3
8110e5d4:	dfc00115 	stw	ra,4(sp)
8110e5d8:	df000015 	stw	fp,0(sp)
8110e5dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110e5e0:	d0a04e17 	ldw	r2,-32456(gp)
8110e5e4:	100f883a 	mov	r7,r2
8110e5e8:	01800484 	movi	r6,18
8110e5ec:	01400044 	movi	r5,1
8110e5f0:	01204534 	movhi	r4,33044
8110e5f4:	21362f04 	addi	r4,r4,-10052
8110e5f8:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5fc:	0001883a 	nop
8110e600:	e037883a 	mov	sp,fp
8110e604:	dfc00117 	ldw	ra,4(sp)
8110e608:	df000017 	ldw	fp,0(sp)
8110e60c:	dec00204 	addi	sp,sp,8
8110e610:	f800283a 	ret

8110e614 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110e614:	defffe04 	addi	sp,sp,-8
8110e618:	de00012e 	bgeu	sp,et,8110e620 <vFailSenderCreate+0xc>
8110e61c:	003b68fa 	trap	3
8110e620:	dfc00115 	stw	ra,4(sp)
8110e624:	df000015 	stw	fp,0(sp)
8110e628:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110e62c:	d0a04e17 	ldw	r2,-32456(gp)
8110e630:	100f883a 	mov	r7,r2
8110e634:	01800484 	movi	r6,18
8110e638:	01400044 	movi	r5,1
8110e63c:	01204534 	movhi	r4,33044
8110e640:	21363404 	addi	r4,r4,-10032
8110e644:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e648:	0001883a 	nop
8110e64c:	e037883a 	mov	sp,fp
8110e650:	dfc00117 	ldw	ra,4(sp)
8110e654:	df000017 	ldw	fp,0(sp)
8110e658:	dec00204 	addi	sp,sp,8
8110e65c:	f800283a 	ret

8110e660 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110e660:	defffe04 	addi	sp,sp,-8
8110e664:	de00012e 	bgeu	sp,et,8110e66c <vFailDeleteInitialization+0xc>
8110e668:	003b68fa 	trap	3
8110e66c:	dfc00115 	stw	ra,4(sp)
8110e670:	df000015 	stw	fp,0(sp)
8110e674:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110e678:	d0a04e17 	ldw	r2,-32456(gp)
8110e67c:	100f883a 	mov	r7,r2
8110e680:	01800684 	movi	r6,26
8110e684:	01400044 	movi	r5,1
8110e688:	01204534 	movhi	r4,33044
8110e68c:	21363904 	addi	r4,r4,-10012
8110e690:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e694:	0001883a 	nop
8110e698:	e037883a 	mov	sp,fp
8110e69c:	dfc00117 	ldw	ra,4(sp)
8110e6a0:	df000017 	ldw	fp,0(sp)
8110e6a4:	dec00204 	addi	sp,sp,8
8110e6a8:	f800283a 	ret

8110e6ac <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110e6ac:	defffe04 	addi	sp,sp,-8
8110e6b0:	de00012e 	bgeu	sp,et,8110e6b8 <vFailSetCountSemaphorexBuffer32+0xc>
8110e6b4:	003b68fa 	trap	3
8110e6b8:	dfc00115 	stw	ra,4(sp)
8110e6bc:	df000015 	stw	fp,0(sp)
8110e6c0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110e6c4:	d0a04e17 	ldw	r2,-32456(gp)
8110e6c8:	100f883a 	mov	r7,r2
8110e6cc:	01800a04 	movi	r6,40
8110e6d0:	01400044 	movi	r5,1
8110e6d4:	01204534 	movhi	r4,33044
8110e6d8:	21364004 	addi	r4,r4,-9984
8110e6dc:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e6e0:	d0a04e17 	ldw	r2,-32456(gp)
8110e6e4:	100f883a 	mov	r7,r2
8110e6e8:	018008c4 	movi	r6,35
8110e6ec:	01400044 	movi	r5,1
8110e6f0:	01204534 	movhi	r4,33044
8110e6f4:	21364b04 	addi	r4,r4,-9940
8110e6f8:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6fc:	0001883a 	nop
8110e700:	e037883a 	mov	sp,fp
8110e704:	dfc00117 	ldw	ra,4(sp)
8110e708:	df000017 	ldw	fp,0(sp)
8110e70c:	dec00204 	addi	sp,sp,8
8110e710:	f800283a 	ret

8110e714 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110e714:	defffe04 	addi	sp,sp,-8
8110e718:	de00012e 	bgeu	sp,et,8110e720 <vFailSetCountSemaphorexBuffer64+0xc>
8110e71c:	003b68fa 	trap	3
8110e720:	dfc00115 	stw	ra,4(sp)
8110e724:	df000015 	stw	fp,0(sp)
8110e728:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110e72c:	d0a04e17 	ldw	r2,-32456(gp)
8110e730:	100f883a 	mov	r7,r2
8110e734:	01800a04 	movi	r6,40
8110e738:	01400044 	movi	r5,1
8110e73c:	01204534 	movhi	r4,33044
8110e740:	21365404 	addi	r4,r4,-9904
8110e744:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e748:	d0a04e17 	ldw	r2,-32456(gp)
8110e74c:	100f883a 	mov	r7,r2
8110e750:	018008c4 	movi	r6,35
8110e754:	01400044 	movi	r5,1
8110e758:	01204534 	movhi	r4,33044
8110e75c:	21364b04 	addi	r4,r4,-9940
8110e760:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e764:	0001883a 	nop
8110e768:	e037883a 	mov	sp,fp
8110e76c:	dfc00117 	ldw	ra,4(sp)
8110e770:	df000017 	ldw	fp,0(sp)
8110e774:	dec00204 	addi	sp,sp,8
8110e778:	f800283a 	ret

8110e77c <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110e77c:	defffe04 	addi	sp,sp,-8
8110e780:	de00012e 	bgeu	sp,et,8110e788 <vFailSetCountSemaphorexBuffer128+0xc>
8110e784:	003b68fa 	trap	3
8110e788:	dfc00115 	stw	ra,4(sp)
8110e78c:	df000015 	stw	fp,0(sp)
8110e790:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110e794:	d0a04e17 	ldw	r2,-32456(gp)
8110e798:	100f883a 	mov	r7,r2
8110e79c:	01800a44 	movi	r6,41
8110e7a0:	01400044 	movi	r5,1
8110e7a4:	01204534 	movhi	r4,33044
8110e7a8:	21365f04 	addi	r4,r4,-9860
8110e7ac:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e7b0:	d0a04e17 	ldw	r2,-32456(gp)
8110e7b4:	100f883a 	mov	r7,r2
8110e7b8:	018008c4 	movi	r6,35
8110e7bc:	01400044 	movi	r5,1
8110e7c0:	01204534 	movhi	r4,33044
8110e7c4:	21364b04 	addi	r4,r4,-9940
8110e7c8:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e7cc:	0001883a 	nop
8110e7d0:	e037883a 	mov	sp,fp
8110e7d4:	dfc00117 	ldw	ra,4(sp)
8110e7d8:	df000017 	ldw	fp,0(sp)
8110e7dc:	dec00204 	addi	sp,sp,8
8110e7e0:	f800283a 	ret

8110e7e4 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110e7e4:	defffe04 	addi	sp,sp,-8
8110e7e8:	de00012e 	bgeu	sp,et,8110e7f0 <vFailFoundBufferRetransmission+0xc>
8110e7ec:	003b68fa 	trap	3
8110e7f0:	dfc00115 	stw	ra,4(sp)
8110e7f4:	df000015 	stw	fp,0(sp)
8110e7f8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)\n");
8110e7fc:	d0a04e17 	ldw	r2,-32456(gp)
8110e800:	100f883a 	mov	r7,r2
8110e804:	018009c4 	movi	r6,39
8110e808:	01400044 	movi	r5,1
8110e80c:	01204534 	movhi	r4,33044
8110e810:	21366a04 	addi	r4,r4,-9816
8110e814:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110e818:	d0a04e17 	ldw	r2,-32456(gp)
8110e81c:	100f883a 	mov	r7,r2
8110e820:	01801284 	movi	r6,74
8110e824:	01400044 	movi	r5,1
8110e828:	01204534 	movhi	r4,33044
8110e82c:	21367404 	addi	r4,r4,-9776
8110e830:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e834:	0001883a 	nop
8110e838:	e037883a 	mov	sp,fp
8110e83c:	dfc00117 	ldw	ra,4(sp)
8110e840:	df000017 	ldw	fp,0(sp)
8110e844:	dec00204 	addi	sp,sp,8
8110e848:	f800283a 	ret

8110e84c <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110e84c:	defffe04 	addi	sp,sp,-8
8110e850:	de00012e 	bgeu	sp,et,8110e858 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110e854:	003b68fa 	trap	3
8110e858:	dfc00115 	stw	ra,4(sp)
8110e85c:	df000015 	stw	fp,0(sp)
8110e860:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110e864:	d0a04e17 	ldw	r2,-32456(gp)
8110e868:	100f883a 	mov	r7,r2
8110e86c:	01800b84 	movi	r6,46
8110e870:	01400044 	movi	r5,1
8110e874:	01204534 	movhi	r4,33044
8110e878:	21368704 	addi	r4,r4,-9700
8110e87c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110e880:	d0a04e17 	ldw	r2,-32456(gp)
8110e884:	100f883a 	mov	r7,r2
8110e888:	018010c4 	movi	r6,67
8110e88c:	01400044 	movi	r5,1
8110e890:	01204534 	movhi	r4,33044
8110e894:	21369304 	addi	r4,r4,-9652
8110e898:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e89c:	0001883a 	nop
8110e8a0:	e037883a 	mov	sp,fp
8110e8a4:	dfc00117 	ldw	ra,4(sp)
8110e8a8:	df000017 	ldw	fp,0(sp)
8110e8ac:	dec00204 	addi	sp,sp,8
8110e8b0:	f800283a 	ret

8110e8b4 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110e8b4:	defffe04 	addi	sp,sp,-8
8110e8b8:	de00012e 	bgeu	sp,et,8110e8c0 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110e8bc:	003b68fa 	trap	3
8110e8c0:	dfc00115 	stw	ra,4(sp)
8110e8c4:	df000015 	stw	fp,0(sp)
8110e8c8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110e8cc:	d0a04e17 	ldw	r2,-32456(gp)
8110e8d0:	100f883a 	mov	r7,r2
8110e8d4:	01800b04 	movi	r6,44
8110e8d8:	01400044 	movi	r5,1
8110e8dc:	01204534 	movhi	r4,33044
8110e8e0:	2136a404 	addi	r4,r4,-9584
8110e8e4:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110e8e8:	d0a04e17 	ldw	r2,-32456(gp)
8110e8ec:	100f883a 	mov	r7,r2
8110e8f0:	01800fc4 	movi	r6,63
8110e8f4:	01400044 	movi	r5,1
8110e8f8:	01204534 	movhi	r4,33044
8110e8fc:	2136b004 	addi	r4,r4,-9536
8110e900:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e904:	0001883a 	nop
8110e908:	e037883a 	mov	sp,fp
8110e90c:	dfc00117 	ldw	ra,4(sp)
8110e910:	df000017 	ldw	fp,0(sp)
8110e914:	dec00204 	addi	sp,sp,8
8110e918:	f800283a 	ret

8110e91c <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110e91c:	defffe04 	addi	sp,sp,-8
8110e920:	de00012e 	bgeu	sp,et,8110e928 <vNoContentInPreParsedBuffer+0xc>
8110e924:	003b68fa 	trap	3
8110e928:	dfc00115 	stw	ra,4(sp)
8110e92c:	df000015 	stw	fp,0(sp)
8110e930:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110e934:	d0a04e17 	ldw	r2,-32456(gp)
8110e938:	100f883a 	mov	r7,r2
8110e93c:	01800904 	movi	r6,36
8110e940:	01400044 	movi	r5,1
8110e944:	01204534 	movhi	r4,33044
8110e948:	2136c004 	addi	r4,r4,-9472
8110e94c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110e950:	d0a04e17 	ldw	r2,-32456(gp)
8110e954:	100f883a 	mov	r7,r2
8110e958:	01801684 	movi	r6,90
8110e95c:	01400044 	movi	r5,1
8110e960:	01204534 	movhi	r4,33044
8110e964:	2136ca04 	addi	r4,r4,-9432
8110e968:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e96c:	0001883a 	nop
8110e970:	e037883a 	mov	sp,fp
8110e974:	dfc00117 	ldw	ra,4(sp)
8110e978:	df000017 	ldw	fp,0(sp)
8110e97c:	dec00204 	addi	sp,sp,8
8110e980:	f800283a 	ret

8110e984 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110e984:	defffe04 	addi	sp,sp,-8
8110e988:	de00012e 	bgeu	sp,et,8110e990 <vCouldNotSendEthConfUART+0xc>
8110e98c:	003b68fa 	trap	3
8110e990:	dfc00115 	stw	ra,4(sp)
8110e994:	df000015 	stw	fp,0(sp)
8110e998:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110e99c:	d0a04e17 	ldw	r2,-32456(gp)
8110e9a0:	100f883a 	mov	r7,r2
8110e9a4:	01800844 	movi	r6,33
8110e9a8:	01400044 	movi	r5,1
8110e9ac:	01204534 	movhi	r4,33044
8110e9b0:	2136e104 	addi	r4,r4,-9340
8110e9b4:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110e9b8:	d0a04e17 	ldw	r2,-32456(gp)
8110e9bc:	100f883a 	mov	r7,r2
8110e9c0:	01801784 	movi	r6,94
8110e9c4:	01400044 	movi	r5,1
8110e9c8:	01204534 	movhi	r4,33044
8110e9cc:	2136ea04 	addi	r4,r4,-9304
8110e9d0:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e9d4:	0001883a 	nop
8110e9d8:	e037883a 	mov	sp,fp
8110e9dc:	dfc00117 	ldw	ra,4(sp)
8110e9e0:	df000017 	ldw	fp,0(sp)
8110e9e4:	dec00204 	addi	sp,sp,8
8110e9e8:	f800283a 	ret

8110e9ec <vFailSendNack>:

void vFailSendNack( void )
{
8110e9ec:	defffe04 	addi	sp,sp,-8
8110e9f0:	de00012e 	bgeu	sp,et,8110e9f8 <vFailSendNack+0xc>
8110e9f4:	003b68fa 	trap	3
8110e9f8:	dfc00115 	stw	ra,4(sp)
8110e9fc:	df000015 	stw	fp,0(sp)
8110ea00:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110ea04:	d0a04e17 	ldw	r2,-32456(gp)
8110ea08:	100f883a 	mov	r7,r2
8110ea0c:	01800584 	movi	r6,22
8110ea10:	01400044 	movi	r5,1
8110ea14:	01204534 	movhi	r4,33044
8110ea18:	21370204 	addi	r4,r4,-9208
8110ea1c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110ea20:	d0a04e17 	ldw	r2,-32456(gp)
8110ea24:	100f883a 	mov	r7,r2
8110ea28:	01800a84 	movi	r6,42
8110ea2c:	01400044 	movi	r5,1
8110ea30:	01204534 	movhi	r4,33044
8110ea34:	21370804 	addi	r4,r4,-9184
8110ea38:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ea3c:	0001883a 	nop
8110ea40:	e037883a 	mov	sp,fp
8110ea44:	dfc00117 	ldw	ra,4(sp)
8110ea48:	df000017 	ldw	fp,0(sp)
8110ea4c:	dec00204 	addi	sp,sp,8
8110ea50:	f800283a 	ret

8110ea54 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110ea54:	defffe04 	addi	sp,sp,-8
8110ea58:	de00012e 	bgeu	sp,et,8110ea60 <vFailSetPreAckSenderBuffer+0xc>
8110ea5c:	003b68fa 	trap	3
8110ea60:	dfc00115 	stw	ra,4(sp)
8110ea64:	df000015 	stw	fp,0(sp)
8110ea68:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110ea6c:	d0a04e17 	ldw	r2,-32456(gp)
8110ea70:	100f883a 	mov	r7,r2
8110ea74:	018008c4 	movi	r6,35
8110ea78:	01400044 	movi	r5,1
8110ea7c:	01204534 	movhi	r4,33044
8110ea80:	21371304 	addi	r4,r4,-9140
8110ea84:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110ea88:	d0a04e17 	ldw	r2,-32456(gp)
8110ea8c:	100f883a 	mov	r7,r2
8110ea90:	01801584 	movi	r6,86
8110ea94:	01400044 	movi	r5,1
8110ea98:	01204534 	movhi	r4,33044
8110ea9c:	21371c04 	addi	r4,r4,-9104
8110eaa0:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eaa4:	0001883a 	nop
8110eaa8:	e037883a 	mov	sp,fp
8110eaac:	dfc00117 	ldw	ra,4(sp)
8110eab0:	df000017 	ldw	fp,0(sp)
8110eab4:	dec00204 	addi	sp,sp,8
8110eab8:	f800283a 	ret

8110eabc <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110eabc:	defffe04 	addi	sp,sp,-8
8110eac0:	de00012e 	bgeu	sp,et,8110eac8 <vFailSetPreParsedBuffer+0xc>
8110eac4:	003b68fa 	trap	3
8110eac8:	dfc00115 	stw	ra,4(sp)
8110eacc:	df000015 	stw	fp,0(sp)
8110ead0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
8110ead4:	d0a04e17 	ldw	r2,-32456(gp)
8110ead8:	100f883a 	mov	r7,r2
8110eadc:	01800804 	movi	r6,32
8110eae0:	01400044 	movi	r5,1
8110eae4:	01204534 	movhi	r4,33044
8110eae8:	21373204 	addi	r4,r4,-9016
8110eaec:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110eaf0:	d0a04e17 	ldw	r2,-32456(gp)
8110eaf4:	100f883a 	mov	r7,r2
8110eaf8:	018013c4 	movi	r6,79
8110eafc:	01400044 	movi	r5,1
8110eb00:	01204534 	movhi	r4,33044
8110eb04:	21373b04 	addi	r4,r4,-8980
8110eb08:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eb0c:	0001883a 	nop
8110eb10:	e037883a 	mov	sp,fp
8110eb14:	dfc00117 	ldw	ra,4(sp)
8110eb18:	df000017 	ldw	fp,0(sp)
8110eb1c:	dec00204 	addi	sp,sp,8
8110eb20:	f800283a 	ret

8110eb24 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110eb24:	defffe04 	addi	sp,sp,-8
8110eb28:	de00012e 	bgeu	sp,et,8110eb30 <vFailSetPreAckReceiverBuffer+0xc>
8110eb2c:	003b68fa 	trap	3
8110eb30:	dfc00115 	stw	ra,4(sp)
8110eb34:	df000015 	stw	fp,0(sp)
8110eb38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
8110eb3c:	d0a04e17 	ldw	r2,-32456(gp)
8110eb40:	100f883a 	mov	r7,r2
8110eb44:	01800944 	movi	r6,37
8110eb48:	01400044 	movi	r5,1
8110eb4c:	01204534 	movhi	r4,33044
8110eb50:	21374f04 	addi	r4,r4,-8900
8110eb54:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110eb58:	d0a04e17 	ldw	r2,-32456(gp)
8110eb5c:	100f883a 	mov	r7,r2
8110eb60:	018015c4 	movi	r6,87
8110eb64:	01400044 	movi	r5,1
8110eb68:	01204534 	movhi	r4,33044
8110eb6c:	21375904 	addi	r4,r4,-8860
8110eb70:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eb74:	0001883a 	nop
8110eb78:	e037883a 	mov	sp,fp
8110eb7c:	dfc00117 	ldw	ra,4(sp)
8110eb80:	df000017 	ldw	fp,0(sp)
8110eb84:	dec00204 	addi	sp,sp,8
8110eb88:	f800283a 	ret

8110eb8c <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110eb8c:	defffe04 	addi	sp,sp,-8
8110eb90:	de00012e 	bgeu	sp,et,8110eb98 <vFailParserCommTaskCreate+0xc>
8110eb94:	003b68fa 	trap	3
8110eb98:	dfc00115 	stw	ra,4(sp)
8110eb9c:	df000015 	stw	fp,0(sp)
8110eba0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
8110eba4:	d0a04e17 	ldw	r2,-32456(gp)
8110eba8:	100f883a 	mov	r7,r2
8110ebac:	01800684 	movi	r6,26
8110ebb0:	01400044 	movi	r5,1
8110ebb4:	01204534 	movhi	r4,33044
8110ebb8:	21376f04 	addi	r4,r4,-8772
8110ebbc:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ebc0:	0001883a 	nop
8110ebc4:	e037883a 	mov	sp,fp
8110ebc8:	dfc00117 	ldw	ra,4(sp)
8110ebcc:	df000017 	ldw	fp,0(sp)
8110ebd0:	dec00204 	addi	sp,sp,8
8110ebd4:	f800283a 	ret

8110ebd8 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110ebd8:	defffe04 	addi	sp,sp,-8
8110ebdc:	de00012e 	bgeu	sp,et,8110ebe4 <vFailInAckHandlerTaskCreate+0xc>
8110ebe0:	003b68fa 	trap	3
8110ebe4:	dfc00115 	stw	ra,4(sp)
8110ebe8:	df000015 	stw	fp,0(sp)
8110ebec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ebf0:	d0a04e17 	ldw	r2,-32456(gp)
8110ebf4:	100f883a 	mov	r7,r2
8110ebf8:	01800704 	movi	r6,28
8110ebfc:	01400044 	movi	r5,1
8110ec00:	01204534 	movhi	r4,33044
8110ec04:	21377604 	addi	r4,r4,-8744
8110ec08:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ec0c:	0001883a 	nop
8110ec10:	e037883a 	mov	sp,fp
8110ec14:	dfc00117 	ldw	ra,4(sp)
8110ec18:	df000017 	ldw	fp,0(sp)
8110ec1c:	dec00204 	addi	sp,sp,8
8110ec20:	f800283a 	ret

8110ec24 <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110ec24:	defffe04 	addi	sp,sp,-8
8110ec28:	de00012e 	bgeu	sp,et,8110ec30 <vFailOutAckHandlerTaskCreate+0xc>
8110ec2c:	003b68fa 	trap	3
8110ec30:	dfc00115 	stw	ra,4(sp)
8110ec34:	df000015 	stw	fp,0(sp)
8110ec38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ec3c:	d0a04e17 	ldw	r2,-32456(gp)
8110ec40:	100f883a 	mov	r7,r2
8110ec44:	01800704 	movi	r6,28
8110ec48:	01400044 	movi	r5,1
8110ec4c:	01204534 	movhi	r4,33044
8110ec50:	21377604 	addi	r4,r4,-8744
8110ec54:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ec58:	0001883a 	nop
8110ec5c:	e037883a 	mov	sp,fp
8110ec60:	dfc00117 	ldw	ra,4(sp)
8110ec64:	df000017 	ldw	fp,0(sp)
8110ec68:	dec00204 	addi	sp,sp,8
8110ec6c:	f800283a 	ret

8110ec70 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110ec70:	defffe04 	addi	sp,sp,-8
8110ec74:	de00012e 	bgeu	sp,et,8110ec7c <vFailCreateTimerRetransmisison+0xc>
8110ec78:	003b68fa 	trap	3
8110ec7c:	dfc00115 	stw	ra,4(sp)
8110ec80:	df000015 	stw	fp,0(sp)
8110ec84:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
8110ec88:	d0a04e17 	ldw	r2,-32456(gp)
8110ec8c:	100f883a 	mov	r7,r2
8110ec90:	018007c4 	movi	r6,31
8110ec94:	01400044 	movi	r5,1
8110ec98:	01204534 	movhi	r4,33044
8110ec9c:	21377e04 	addi	r4,r4,-8712
8110eca0:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eca4:	0001883a 	nop
8110eca8:	e037883a 	mov	sp,fp
8110ecac:	dfc00117 	ldw	ra,4(sp)
8110ecb0:	df000017 	ldw	fp,0(sp)
8110ecb4:	dec00204 	addi	sp,sp,8
8110ecb8:	f800283a 	ret

8110ecbc <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110ecbc:	defffe04 	addi	sp,sp,-8
8110ecc0:	de00012e 	bgeu	sp,et,8110ecc8 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110ecc4:	003b68fa 	trap	3
8110ecc8:	dfc00115 	stw	ra,4(sp)
8110eccc:	df000015 	stw	fp,0(sp)
8110ecd0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
8110ecd4:	d0a04e17 	ldw	r2,-32456(gp)
8110ecd8:	100f883a 	mov	r7,r2
8110ecdc:	01800904 	movi	r6,36
8110ece0:	01400044 	movi	r5,1
8110ece4:	01204534 	movhi	r4,33044
8110ece8:	21378604 	addi	r4,r4,-8680
8110ecec:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ecf0:	0001883a 	nop
8110ecf4:	e037883a 	mov	sp,fp
8110ecf8:	dfc00117 	ldw	ra,4(sp)
8110ecfc:	df000017 	ldw	fp,0(sp)
8110ed00:	dec00204 	addi	sp,sp,8
8110ed04:	f800283a 	ret

8110ed08 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110ed08:	defffe04 	addi	sp,sp,-8
8110ed0c:	de00012e 	bgeu	sp,et,8110ed14 <vFailTimeoutCheckerTaskCreate+0xc>
8110ed10:	003b68fa 	trap	3
8110ed14:	dfc00115 	stw	ra,4(sp)
8110ed18:	df000015 	stw	fp,0(sp)
8110ed1c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate\n");
8110ed20:	d0a04e17 	ldw	r2,-32456(gp)
8110ed24:	100f883a 	mov	r7,r2
8110ed28:	01800784 	movi	r6,30
8110ed2c:	01400044 	movi	r5,1
8110ed30:	01204534 	movhi	r4,33044
8110ed34:	21379004 	addi	r4,r4,-8640
8110ed38:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ed3c:	0001883a 	nop
8110ed40:	e037883a 	mov	sp,fp
8110ed44:	dfc00117 	ldw	ra,4(sp)
8110ed48:	df000017 	ldw	fp,0(sp)
8110ed4c:	dec00204 	addi	sp,sp,8
8110ed50:	f800283a 	ret

8110ed54 <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110ed54:	defffe04 	addi	sp,sp,-8
8110ed58:	de00012e 	bgeu	sp,et,8110ed60 <vFailGetBlockingSemTimeoutTask+0xc>
8110ed5c:	003b68fa 	trap	3
8110ed60:	dfc00115 	stw	ra,4(sp)
8110ed64:	df000015 	stw	fp,0(sp)
8110ed68:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
8110ed6c:	d0a04e17 	ldw	r2,-32456(gp)
8110ed70:	100f883a 	mov	r7,r2
8110ed74:	018009c4 	movi	r6,39
8110ed78:	01400044 	movi	r5,1
8110ed7c:	01204534 	movhi	r4,33044
8110ed80:	21379804 	addi	r4,r4,-8608
8110ed84:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
8110ed88:	d0a04e17 	ldw	r2,-32456(gp)
8110ed8c:	100f883a 	mov	r7,r2
8110ed90:	01800cc4 	movi	r6,51
8110ed94:	01400044 	movi	r5,1
8110ed98:	01204534 	movhi	r4,33044
8110ed9c:	2137a204 	addi	r4,r4,-8568
8110eda0:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eda4:	0001883a 	nop
8110eda8:	e037883a 	mov	sp,fp
8110edac:	dfc00117 	ldw	ra,4(sp)
8110edb0:	df000017 	ldw	fp,0(sp)
8110edb4:	dec00204 	addi	sp,sp,8
8110edb8:	f800283a 	ret

8110edbc <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110edbc:	defffe04 	addi	sp,sp,-8
8110edc0:	de00012e 	bgeu	sp,et,8110edc8 <vFailPostBlockingSemTimeoutTask+0xc>
8110edc4:	003b68fa 	trap	3
8110edc8:	dfc00115 	stw	ra,4(sp)
8110edcc:	df000015 	stw	fp,0(sp)
8110edd0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
8110edd4:	d0a04e17 	ldw	r2,-32456(gp)
8110edd8:	100f883a 	mov	r7,r2
8110eddc:	01800a04 	movi	r6,40
8110ede0:	01400044 	movi	r5,1
8110ede4:	01204534 	movhi	r4,33044
8110ede8:	2137af04 	addi	r4,r4,-8516
8110edec:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8110edf0:	d0a04e17 	ldw	r2,-32456(gp)
8110edf4:	100f883a 	mov	r7,r2
8110edf8:	01800c84 	movi	r6,50
8110edfc:	01400044 	movi	r5,1
8110ee00:	01204534 	movhi	r4,33044
8110ee04:	2137ba04 	addi	r4,r4,-8472
8110ee08:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ee0c:	0001883a 	nop
8110ee10:	e037883a 	mov	sp,fp
8110ee14:	dfc00117 	ldw	ra,4(sp)
8110ee18:	df000017 	ldw	fp,0(sp)
8110ee1c:	dec00204 	addi	sp,sp,8
8110ee20:	f800283a 	ret

8110ee24 <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110ee24:	defffe04 	addi	sp,sp,-8
8110ee28:	de00012e 	bgeu	sp,et,8110ee30 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110ee2c:	003b68fa 	trap	3
8110ee30:	dfc00115 	stw	ra,4(sp)
8110ee34:	df000015 	stw	fp,0(sp)
8110ee38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
8110ee3c:	d0a04e17 	ldw	r2,-32456(gp)
8110ee40:	100f883a 	mov	r7,r2
8110ee44:	01800ac4 	movi	r6,43
8110ee48:	01400044 	movi	r5,1
8110ee4c:	01204534 	movhi	r4,33044
8110ee50:	2137c704 	addi	r4,r4,-8420
8110ee54:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
8110ee58:	d0a04e17 	ldw	r2,-32456(gp)
8110ee5c:	100f883a 	mov	r7,r2
8110ee60:	01801644 	movi	r6,89
8110ee64:	01400044 	movi	r5,1
8110ee68:	01204534 	movhi	r4,33044
8110ee6c:	2137d204 	addi	r4,r4,-8376
8110ee70:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ee74:	0001883a 	nop
8110ee78:	e037883a 	mov	sp,fp
8110ee7c:	dfc00117 	ldw	ra,4(sp)
8110ee80:	df000017 	ldw	fp,0(sp)
8110ee84:	dec00204 	addi	sp,sp,8
8110ee88:	f800283a 	ret

8110ee8c <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110ee8c:	defffe04 	addi	sp,sp,-8
8110ee90:	de00012e 	bgeu	sp,et,8110ee98 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110ee94:	003b68fa 	trap	3
8110ee98:	dfc00115 	stw	ra,4(sp)
8110ee9c:	df000015 	stw	fp,0(sp)
8110eea0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
8110eea4:	d0a04e17 	ldw	r2,-32456(gp)
8110eea8:	100f883a 	mov	r7,r2
8110eeac:	01800a84 	movi	r6,42
8110eeb0:	01400044 	movi	r5,1
8110eeb4:	01204534 	movhi	r4,33044
8110eeb8:	2137e904 	addi	r4,r4,-8284
8110eebc:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8110eec0:	d0a04e17 	ldw	r2,-32456(gp)
8110eec4:	100f883a 	mov	r7,r2
8110eec8:	01801444 	movi	r6,81
8110eecc:	01400044 	movi	r5,1
8110eed0:	01204534 	movhi	r4,33044
8110eed4:	2137f404 	addi	r4,r4,-8240
8110eed8:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eedc:	0001883a 	nop
8110eee0:	e037883a 	mov	sp,fp
8110eee4:	dfc00117 	ldw	ra,4(sp)
8110eee8:	df000017 	ldw	fp,0(sp)
8110eeec:	dec00204 	addi	sp,sp,8
8110eef0:	f800283a 	ret

8110eef4 <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110eef4:	defffe04 	addi	sp,sp,-8
8110eef8:	de00012e 	bgeu	sp,et,8110ef00 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110eefc:	003b68fa 	trap	3
8110ef00:	dfc00115 	stw	ra,4(sp)
8110ef04:	df000015 	stw	fp,0(sp)
8110ef08:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
8110ef0c:	d0a04e17 	ldw	r2,-32456(gp)
8110ef10:	100f883a 	mov	r7,r2
8110ef14:	01800a84 	movi	r6,42
8110ef18:	01400044 	movi	r5,1
8110ef1c:	01204534 	movhi	r4,33044
8110ef20:	21380904 	addi	r4,r4,-8156
8110ef24:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
8110ef28:	d0a04e17 	ldw	r2,-32456(gp)
8110ef2c:	100f883a 	mov	r7,r2
8110ef30:	01801444 	movi	r6,81
8110ef34:	01400044 	movi	r5,1
8110ef38:	01204534 	movhi	r4,33044
8110ef3c:	21381404 	addi	r4,r4,-8112
8110ef40:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ef44:	0001883a 	nop
8110ef48:	e037883a 	mov	sp,fp
8110ef4c:	dfc00117 	ldw	ra,4(sp)
8110ef50:	df000017 	ldw	fp,0(sp)
8110ef54:	dec00204 	addi	sp,sp,8
8110ef58:	f800283a 	ret

8110ef5c <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110ef5c:	defffe04 	addi	sp,sp,-8
8110ef60:	de00012e 	bgeu	sp,et,8110ef68 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110ef64:	003b68fa 	trap	3
8110ef68:	dfc00115 	stw	ra,4(sp)
8110ef6c:	df000015 	stw	fp,0(sp)
8110ef70:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
8110ef74:	d0a04e17 	ldw	r2,-32456(gp)
8110ef78:	100f883a 	mov	r7,r2
8110ef7c:	01800ac4 	movi	r6,43
8110ef80:	01400044 	movi	r5,1
8110ef84:	01204534 	movhi	r4,33044
8110ef88:	21382904 	addi	r4,r4,-8028
8110ef8c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8110ef90:	d0a04e17 	ldw	r2,-32456(gp)
8110ef94:	100f883a 	mov	r7,r2
8110ef98:	01801484 	movi	r6,82
8110ef9c:	01400044 	movi	r5,1
8110efa0:	01204534 	movhi	r4,33044
8110efa4:	21383404 	addi	r4,r4,-7984
8110efa8:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110efac:	0001883a 	nop
8110efb0:	e037883a 	mov	sp,fp
8110efb4:	dfc00117 	ldw	ra,4(sp)
8110efb8:	df000017 	ldw	fp,0(sp)
8110efbc:	dec00204 	addi	sp,sp,8
8110efc0:	f800283a 	ret

8110efc4 <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110efc4:	defffe04 	addi	sp,sp,-8
8110efc8:	de00012e 	bgeu	sp,et,8110efd0 <vFailStartTimerRetransmission+0xc>
8110efcc:	003b68fa 	trap	3
8110efd0:	dfc00115 	stw	ra,4(sp)
8110efd4:	df000015 	stw	fp,0(sp)
8110efd8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
8110efdc:	d0a04e17 	ldw	r2,-32456(gp)
8110efe0:	100f883a 	mov	r7,r2
8110efe4:	01800984 	movi	r6,38
8110efe8:	01400044 	movi	r5,1
8110efec:	01204534 	movhi	r4,33044
8110eff0:	21384904 	addi	r4,r4,-7900
8110eff4:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
8110eff8:	d0a04e17 	ldw	r2,-32456(gp)
8110effc:	100f883a 	mov	r7,r2
8110f000:	01800d44 	movi	r6,53
8110f004:	01400044 	movi	r5,1
8110f008:	01204534 	movhi	r4,33044
8110f00c:	21385304 	addi	r4,r4,-7860
8110f010:	11121200 	call	81112120 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f014:	0001883a 	nop
8110f018:	e037883a 	mov	sp,fp
8110f01c:	dfc00117 	ldw	ra,4(sp)
8110f020:	df000017 	ldw	fp,0(sp)
8110f024:	dec00204 	addi	sp,sp,8
8110f028:	f800283a 	ret

8110f02c <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
8110f02c:	defffe04 	addi	sp,sp,-8
8110f030:	de00012e 	bgeu	sp,et,8110f038 <vCouldNotSendTurnOff+0xc>
8110f034:	003b68fa 	trap	3
8110f038:	dfc00115 	stw	ra,4(sp)
8110f03c:	df000015 	stw	fp,0(sp)
8110f040:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
8110f044:	d0a04e17 	ldw	r2,-32456(gp)
8110f048:	100f883a 	mov	r7,r2
8110f04c:	01800744 	movi	r6,29
8110f050:	01400044 	movi	r5,1
8110f054:	01204534 	movhi	r4,33044
8110f058:	21386104 	addi	r4,r4,-7804
8110f05c:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
8110f060:	d0a04e17 	ldw	r2,-32456(gp)
8110f064:	100f883a 	mov	r7,r2
8110f068:	01800984 	movi	r6,38
8110f06c:	01400044 	movi	r5,1
8110f070:	01204534 	movhi	r4,33044
8110f074:	21386904 	addi	r4,r4,-7772
8110f078:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f07c:	0001883a 	nop
8110f080:	e037883a 	mov	sp,fp
8110f084:	dfc00117 	ldw	ra,4(sp)
8110f088:	df000017 	ldw	fp,0(sp)
8110f08c:	dec00204 	addi	sp,sp,8
8110f090:	f800283a 	ret

8110f094 <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
8110f094:	defffe04 	addi	sp,sp,-8
8110f098:	de00012e 	bgeu	sp,et,8110f0a0 <vCouldNotSendLog+0xc>
8110f09c:	003b68fa 	trap	3
8110f0a0:	dfc00115 	stw	ra,4(sp)
8110f0a4:	df000015 	stw	fp,0(sp)
8110f0a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
8110f0ac:	d0a04e17 	ldw	r2,-32456(gp)
8110f0b0:	100f883a 	mov	r7,r2
8110f0b4:	01800644 	movi	r6,25
8110f0b8:	01400044 	movi	r5,1
8110f0bc:	01204534 	movhi	r4,33044
8110f0c0:	21387304 	addi	r4,r4,-7732
8110f0c4:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
8110f0c8:	d0a04e17 	ldw	r2,-32456(gp)
8110f0cc:	100f883a 	mov	r7,r2
8110f0d0:	018008c4 	movi	r6,35
8110f0d4:	01400044 	movi	r5,1
8110f0d8:	01204534 	movhi	r4,33044
8110f0dc:	21387a04 	addi	r4,r4,-7704
8110f0e0:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f0e4:	0001883a 	nop
8110f0e8:	e037883a 	mov	sp,fp
8110f0ec:	dfc00117 	ldw	ra,4(sp)
8110f0f0:	df000017 	ldw	fp,0(sp)
8110f0f4:	dec00204 	addi	sp,sp,8
8110f0f8:	f800283a 	ret

8110f0fc <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
8110f0fc:	defffd04 	addi	sp,sp,-12
8110f100:	de00012e 	bgeu	sp,et,8110f108 <vCouldNotSendTMPusCommand+0xc>
8110f104:	003b68fa 	trap	3
8110f108:	dfc00215 	stw	ra,8(sp)
8110f10c:	df000115 	stw	fp,4(sp)
8110f110:	df000104 	addi	fp,sp,4
8110f114:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
8110f118:	d0a04e17 	ldw	r2,-32456(gp)
8110f11c:	100f883a 	mov	r7,r2
8110f120:	01800884 	movi	r6,34
8110f124:	01400044 	movi	r5,1
8110f128:	01204534 	movhi	r4,33044
8110f12c:	21388304 	addi	r4,r4,-7668
8110f130:	11121200 	call	81112120 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
8110f134:	d0a04e17 	ldw	r2,-32456(gp)
8110f138:	100f883a 	mov	r7,r2
8110f13c:	01800ac4 	movi	r6,43
8110f140:	01400044 	movi	r5,1
8110f144:	01204534 	movhi	r4,33044
8110f148:	21388c04 	addi	r4,r4,-7632
8110f14c:	11121200 	call	81112120 <fwrite>
		debug(fp,"cData");
8110f150:	d0a04e17 	ldw	r2,-32456(gp)
8110f154:	100f883a 	mov	r7,r2
8110f158:	01800144 	movi	r6,5
8110f15c:	01400044 	movi	r5,1
8110f160:	01204534 	movhi	r4,33044
8110f164:	21389704 	addi	r4,r4,-7588
8110f168:	11121200 	call	81112120 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f16c:	0001883a 	nop
8110f170:	e037883a 	mov	sp,fp
8110f174:	dfc00117 	ldw	ra,4(sp)
8110f178:	df000017 	ldw	fp,0(sp)
8110f17c:	dec00204 	addi	sp,sp,8
8110f180:	f800283a 	ret

8110f184 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f184:	defffd04 	addi	sp,sp,-12
8110f188:	de00012e 	bgeu	sp,et,8110f190 <vNFeeNotInUse+0xc>
8110f18c:	003b68fa 	trap	3
8110f190:	df000215 	stw	fp,8(sp)
8110f194:	df000204 	addi	fp,sp,8
8110f198:	e13ffe15 	stw	r4,-8(fp)
8110f19c:	2805883a 	mov	r2,r5
8110f1a0:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110f1a4:	e0bffe17 	ldw	r2,-8(fp)
8110f1a8:	e0ffff03 	ldbu	r3,-4(fp)
8110f1ac:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110f1b0:	e0bffe17 	ldw	r2,-8(fp)
8110f1b4:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f1b8:	e0bffe17 	ldw	r2,-8(fp)
8110f1bc:	10002115 	stw	zero,132(r2)
}
8110f1c0:	0001883a 	nop
8110f1c4:	e037883a 	mov	sp,fp
8110f1c8:	df000017 	ldw	fp,0(sp)
8110f1cc:	dec00104 	addi	sp,sp,4
8110f1d0:	f800283a 	ret

8110f1d4 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f1d4:	defffb04 	addi	sp,sp,-20
8110f1d8:	de00012e 	bgeu	sp,et,8110f1e0 <vNFeeStructureInit+0xc>
8110f1dc:	003b68fa 	trap	3
8110f1e0:	dfc00415 	stw	ra,16(sp)
8110f1e4:	df000315 	stw	fp,12(sp)
8110f1e8:	df000304 	addi	fp,sp,12
8110f1ec:	e13ffe15 	stw	r4,-8(fp)
8110f1f0:	2805883a 	mov	r2,r5
8110f1f4:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110f1f8:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110f1fc:	e0bffe17 	ldw	r2,-8(fp)
8110f200:	e0ffff03 	ldbu	r3,-4(fp)
8110f204:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110f208:	e0bffe17 	ldw	r2,-8(fp)
8110f20c:	10802804 	addi	r2,r2,160
8110f210:	1009883a 	mov	r4,r2
8110f214:	110b9f00 	call	8110b9f0 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110f218:	e13ffe17 	ldw	r4,-8(fp)
8110f21c:	110f2ac0 	call	8110f2ac <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110f220:	e0bffe17 	ldw	r2,-8(fp)
8110f224:	00c00044 	movi	r3,1
8110f228:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f22c:	e0bffe17 	ldw	r2,-8(fp)
8110f230:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110f234:	e0bffe17 	ldw	r2,-8(fp)
8110f238:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f23c:	e03ffd05 	stb	zero,-12(fp)
8110f240:	00000906 	br	8110f268 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110f244:	e0bffd03 	ldbu	r2,-12(fp)
8110f248:	e0fffe17 	ldw	r3,-8(fp)
8110f24c:	1885883a 	add	r2,r3,r2
8110f250:	10802504 	addi	r2,r2,148
8110f254:	e0fffd03 	ldbu	r3,-12(fp)
8110f258:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f25c:	e0bffd03 	ldbu	r2,-12(fp)
8110f260:	10800044 	addi	r2,r2,1
8110f264:	e0bffd05 	stb	r2,-12(fp)
8110f268:	e0bffd03 	ldbu	r2,-12(fp)
8110f26c:	10800130 	cmpltui	r2,r2,4
8110f270:	103ff41e 	bne	r2,zero,8110f244 <__reset+0xfb0ef244>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110f274:	e0bffe17 	ldw	r2,-8(fp)
8110f278:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f27c:	e0bffe17 	ldw	r2,-8(fp)
8110f280:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110f284:	e0bffe17 	ldw	r2,-8(fp)
8110f288:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110f28c:	e0bffe17 	ldw	r2,-8(fp)
8110f290:	10002415 	stw	zero,144(r2)

}
8110f294:	0001883a 	nop
8110f298:	e037883a 	mov	sp,fp
8110f29c:	dfc00117 	ldw	ra,4(sp)
8110f2a0:	df000017 	ldw	fp,0(sp)
8110f2a4:	dec00204 	addi	sp,sp,8
8110f2a8:	f800283a 	ret

8110f2ac <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110f2ac:	defff404 	addi	sp,sp,-48
8110f2b0:	de00012e 	bgeu	sp,et,8110f2b8 <vUpdateMemMapFEE+0xc>
8110f2b4:	003b68fa 	trap	3
8110f2b8:	df000b15 	stw	fp,44(sp)
8110f2bc:	df000b04 	addi	fp,sp,44
8110f2c0:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110f2c4:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110f2c8:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110f2cc:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110f2d0:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110f2d4:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110f2d8:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110f2dc:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110f2e0:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110f2e4:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110f2e8:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110f2ec:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110f2f0:	e17fff17 	ldw	r5,-4(fp)
8110f2f4:	01035a34 	movhi	r4,3432
8110f2f8:	21348c04 	addi	r4,r4,-11728
8110f2fc:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110f300:	e13fff17 	ldw	r4,-4(fp)
8110f304:	21000003 	ldbu	r4,0(r4)
8110f308:	21403fcc 	andi	r5,r4,255
8110f30c:	01035a34 	movhi	r4,3432
8110f310:	21348c04 	addi	r4,r4,-11728
8110f314:	2909383a 	mul	r4,r5,r4
8110f318:	200b883a 	mov	r5,r4
8110f31c:	e13fff17 	ldw	r4,-4(fp)
8110f320:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110f324:	e13fff17 	ldw	r4,-4(fp)
8110f328:	21400117 	ldw	r5,4(r4)
8110f32c:	01033234 	movhi	r4,3272
8110f330:	21348c04 	addi	r4,r4,-11728
8110f334:	290b883a 	add	r5,r5,r4
8110f338:	e13fff17 	ldw	r4,-4(fp)
8110f33c:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f340:	e13fff17 	ldw	r4,-4(fp)
8110f344:	21002a0b 	ldhu	r4,168(r4)
8110f348:	217fffcc 	andi	r5,r4,65535
8110f34c:	e13fff17 	ldw	r4,-4(fp)
8110f350:	2100290b 	ldhu	r4,164(r4)
8110f354:	213fffcc 	andi	r4,r4,65535
8110f358:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110f35c:	e13fff17 	ldw	r4,-4(fp)
8110f360:	2100298b 	ldhu	r4,166(r4)
8110f364:	21bfffcc 	andi	r6,r4,65535
8110f368:	e13fff17 	ldw	r4,-4(fp)
8110f36c:	2100288b 	ldhu	r4,162(r4)
8110f370:	213fffcc 	andi	r4,r4,65535
8110f374:	310d883a 	add	r6,r6,r4
8110f378:	e13fff17 	ldw	r4,-4(fp)
8110f37c:	2100280b 	ldhu	r4,160(r4)
8110f380:	213fffcc 	andi	r4,r4,65535
8110f384:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f388:	2909383a 	mul	r4,r5,r4
8110f38c:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110f390:	e13ff917 	ldw	r4,-28(fp)
8110f394:	2109883a 	add	r4,r4,r4
8110f398:	200b883a 	mov	r5,r4
8110f39c:	e13fff17 	ldw	r4,-4(fp)
8110f3a0:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110f3a4:	e13fff17 	ldw	r4,-4(fp)
8110f3a8:	2100048b 	ldhu	r4,18(r4)
8110f3ac:	213fffcc 	andi	r4,r4,65535
8110f3b0:	2008d0fa 	srli	r4,r4,3
8110f3b4:	213fffcc 	andi	r4,r4,65535
8110f3b8:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110f3bc:	e13fff17 	ldw	r4,-4(fp)
8110f3c0:	2100048b 	ldhu	r4,18(r4)
8110f3c4:	213fffcc 	andi	r4,r4,65535
8110f3c8:	210001cc 	andi	r4,r4,7
8110f3cc:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110f3d0:	e13ffb17 	ldw	r4,-20(fp)
8110f3d4:	20001326 	beq	r4,zero,8110f424 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110f3d8:	e13ff517 	ldw	r4,-44(fp)
8110f3dc:	21000044 	addi	r4,r4,1
8110f3e0:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110f3e4:	e13fff17 	ldw	r4,-4(fp)
8110f3e8:	2100048b 	ldhu	r4,18(r4)
8110f3ec:	e17ffb17 	ldw	r5,-20(fp)
8110f3f0:	2149c83a 	sub	r4,r4,r5
8110f3f4:	21000204 	addi	r4,r4,8
8110f3f8:	200b883a 	mov	r5,r4
8110f3fc:	e13fff17 	ldw	r4,-4(fp)
8110f400:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110f404:	e13ffb17 	ldw	r4,-20(fp)
8110f408:	200b883a 	mov	r5,r4
8110f40c:	01000204 	movi	r4,8
8110f410:	2149c83a 	sub	r4,r4,r5
8110f414:	200b883a 	mov	r5,r4
8110f418:	e13fff17 	ldw	r4,-4(fp)
8110f41c:	21400505 	stb	r5,20(r4)
8110f420:	00000206 	br	8110f42c <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110f424:	e13fff17 	ldw	r4,-4(fp)
8110f428:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110f42c:	e13ff517 	ldw	r4,-44(fp)
8110f430:	2008d13a 	srli	r4,r4,4
8110f434:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110f438:	e13ff517 	ldw	r4,-44(fp)
8110f43c:	210003cc 	andi	r4,r4,15
8110f440:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110f444:	e13ffc17 	ldw	r4,-16(fp)
8110f448:	20000b26 	beq	r4,zero,8110f478 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110f44c:	e13ff617 	ldw	r4,-40(fp)
8110f450:	21000044 	addi	r4,r4,1
8110f454:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110f458:	e17ff517 	ldw	r5,-44(fp)
8110f45c:	e13ffc17 	ldw	r4,-16(fp)
8110f460:	290bc83a 	sub	r5,r5,r4
8110f464:	e13ff617 	ldw	r4,-40(fp)
8110f468:	2909883a 	add	r4,r5,r4
8110f46c:	21000404 	addi	r4,r4,16
8110f470:	e13ffa15 	stw	r4,-24(fp)
8110f474:	00000406 	br	8110f488 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110f478:	e17ff517 	ldw	r5,-44(fp)
8110f47c:	e13ff617 	ldw	r4,-40(fp)
8110f480:	2909883a 	add	r4,r5,r4
8110f484:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110f488:	e13ffb17 	ldw	r4,-20(fp)
8110f48c:	20000926 	beq	r4,zero,8110f4b4 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110f490:	e13ffc17 	ldw	r4,-16(fp)
8110f494:	2109883a 	add	r4,r4,r4
8110f498:	2109883a 	add	r4,r4,r4
8110f49c:	200b883a 	mov	r5,r4
8110f4a0:	e13ffb17 	ldw	r4,-20(fp)
8110f4a4:	2008d07a 	srli	r4,r4,1
8110f4a8:	2909883a 	add	r4,r5,r4
8110f4ac:	e13ff705 	stb	r4,-36(fp)
8110f4b0:	00000406 	br	8110f4c4 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110f4b4:	e13ffc17 	ldw	r4,-16(fp)
8110f4b8:	2109883a 	add	r4,r4,r4
8110f4bc:	2109883a 	add	r4,r4,r4
8110f4c0:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110f4c4:	e13ff703 	ldbu	r4,-36(fp)
8110f4c8:	01401004 	movi	r5,64
8110f4cc:	2909c83a 	sub	r4,r5,r4
8110f4d0:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110f4d4:	e13ffd03 	ldbu	r4,-12(fp)
8110f4d8:	217ff804 	addi	r5,r4,-32
8110f4dc:	28000416 	blt	r5,zero,8110f4f0 <vUpdateMemMapFEE+0x244>
8110f4e0:	013fffc4 	movi	r4,-1
8110f4e4:	2144d83a 	srl	r2,r4,r5
8110f4e8:	0007883a 	mov	r3,zero
8110f4ec:	00000a06 	br	8110f518 <vUpdateMemMapFEE+0x26c>
8110f4f0:	017fffc4 	movi	r5,-1
8110f4f4:	280c907a 	slli	r6,r5,1
8110f4f8:	014007c4 	movi	r5,31
8110f4fc:	290bc83a 	sub	r5,r5,r4
8110f500:	314a983a 	sll	r5,r6,r5
8110f504:	01bfffc4 	movi	r6,-1
8110f508:	3104d83a 	srl	r2,r6,r4
8110f50c:	2884b03a 	or	r2,r5,r2
8110f510:	017fffc4 	movi	r5,-1
8110f514:	2906d83a 	srl	r3,r5,r4
8110f518:	e13fff17 	ldw	r4,-4(fp)
8110f51c:	20800615 	stw	r2,24(r4)
8110f520:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110f524:	e0bff617 	ldw	r2,-40(fp)
8110f528:	1007883a 	mov	r3,r2
8110f52c:	e0bfff17 	ldw	r2,-4(fp)
8110f530:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110f534:	e0bfff17 	ldw	r2,-4(fp)
8110f538:	10c00117 	ldw	r3,4(r2)
8110f53c:	008004b4 	movhi	r2,18
8110f540:	10a40004 	addi	r2,r2,-28672
8110f544:	1885883a 	add	r2,r3,r2
8110f548:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110f54c:	e0bfff17 	ldw	r2,-4(fp)
8110f550:	1080048b 	ldhu	r2,18(r2)
8110f554:	10ffffcc 	andi	r3,r2,65535
8110f558:	008000b4 	movhi	r2,2
8110f55c:	10a40004 	addi	r2,r2,-28672
8110f560:	1885883a 	add	r2,r3,r2
8110f564:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f568:	e03ff745 	stb	zero,-35(fp)
8110f56c:	00001906 	br	8110f5d4 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110f570:	e0bff743 	ldbu	r2,-35(fp)
8110f574:	e0ffff17 	ldw	r3,-4(fp)
8110f578:	10800624 	muli	r2,r2,24
8110f57c:	1885883a 	add	r2,r3,r2
8110f580:	10800804 	addi	r2,r2,32
8110f584:	e0fff817 	ldw	r3,-32(fp)
8110f588:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f58c:	e0fff817 	ldw	r3,-32(fp)
8110f590:	e0bffe17 	ldw	r2,-8(fp)
8110f594:	1885883a 	add	r2,r3,r2
8110f598:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110f59c:	e0bff743 	ldbu	r2,-35(fp)
8110f5a0:	e0ffff17 	ldw	r3,-4(fp)
8110f5a4:	10800624 	muli	r2,r2,24
8110f5a8:	1885883a 	add	r2,r3,r2
8110f5ac:	10800b04 	addi	r2,r2,44
8110f5b0:	e0fff817 	ldw	r3,-32(fp)
8110f5b4:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f5b8:	e0fff817 	ldw	r3,-32(fp)
8110f5bc:	e0bffe17 	ldw	r2,-8(fp)
8110f5c0:	1885883a 	add	r2,r3,r2
8110f5c4:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f5c8:	e0bff743 	ldbu	r2,-35(fp)
8110f5cc:	10800044 	addi	r2,r2,1
8110f5d0:	e0bff745 	stb	r2,-35(fp)
8110f5d4:	e0bff743 	ldbu	r2,-35(fp)
8110f5d8:	10800130 	cmpltui	r2,r2,4
8110f5dc:	103fe41e 	bne	r2,zero,8110f570 <__reset+0xfb0ef570>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110f5e0:	0001883a 	nop
8110f5e4:	e037883a 	mov	sp,fp
8110f5e8:	df000017 	ldw	fp,0(sp)
8110f5ec:	dec00104 	addi	sp,sp,4
8110f5f0:	f800283a 	ret

8110f5f4 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110f5f4:	defffe04 	addi	sp,sp,-8
8110f5f8:	de00012e 	bgeu	sp,et,8110f600 <vFeeSpwRMAPLoadDefault+0xc>
8110f5fc:	003b68fa 	trap	3
8110f600:	df000115 	stw	fp,4(sp)
8110f604:	df000104 	addi	fp,sp,4
8110f608:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f60c:	0001883a 	nop
8110f610:	e037883a 	mov	sp,fp
8110f614:	df000017 	ldw	fp,0(sp)
8110f618:	dec00104 	addi	sp,sp,4
8110f61c:	f800283a 	ret

8110f620 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110f620:	defffe04 	addi	sp,sp,-8
8110f624:	de00012e 	bgeu	sp,et,8110f62c <vFeeSpwRMAPChangeConfig+0xc>
8110f628:	003b68fa 	trap	3
8110f62c:	df000115 	stw	fp,4(sp)
8110f630:	df000104 	addi	fp,sp,4
8110f634:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f638:	0001883a 	nop
8110f63c:	e037883a 	mov	sp,fp
8110f640:	df000017 	ldw	fp,0(sp)
8110f644:	dec00104 	addi	sp,sp,4
8110f648:	f800283a 	ret

8110f64c <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110f64c:	defffe04 	addi	sp,sp,-8
8110f650:	de00012e 	bgeu	sp,et,8110f658 <vFeeSpwRMAPChangeDefault+0xc>
8110f654:	003b68fa 	trap	3
8110f658:	df000115 	stw	fp,4(sp)
8110f65c:	df000104 	addi	fp,sp,4
8110f660:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110f664:	0001883a 	nop
8110f668:	e037883a 	mov	sp,fp
8110f66c:	df000017 	ldw	fp,0(sp)
8110f670:	dec00104 	addi	sp,sp,4
8110f674:	f800283a 	ret

8110f678 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110f678:	defffe04 	addi	sp,sp,-8
8110f67c:	de00012e 	bgeu	sp,et,8110f684 <cFeeSpwChannelEnable+0xc>
8110f680:	003b68fa 	trap	3
8110f684:	df000115 	stw	fp,4(sp)
8110f688:	df000104 	addi	fp,sp,4
8110f68c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f690:	0001883a 	nop
8110f694:	e037883a 	mov	sp,fp
8110f698:	df000017 	ldw	fp,0(sp)
8110f69c:	dec00104 	addi	sp,sp,4
8110f6a0:	f800283a 	ret

8110f6a4 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110f6a4:	defffe04 	addi	sp,sp,-8
8110f6a8:	de00012e 	bgeu	sp,et,8110f6b0 <cFeeSpwChannelDisable+0xc>
8110f6ac:	003b68fa 	trap	3
8110f6b0:	df000115 	stw	fp,4(sp)
8110f6b4:	df000104 	addi	fp,sp,4
8110f6b8:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f6bc:	0001883a 	nop
8110f6c0:	e037883a 	mov	sp,fp
8110f6c4:	df000017 	ldw	fp,0(sp)
8110f6c8:	dec00104 	addi	sp,sp,4
8110f6cc:	f800283a 	ret

8110f6d0 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110f6d0:	defffe04 	addi	sp,sp,-8
8110f6d4:	de00012e 	bgeu	sp,et,8110f6dc <cFeeRMAPDump+0xc>
8110f6d8:	003b68fa 	trap	3
8110f6dc:	df000115 	stw	fp,4(sp)
8110f6e0:	df000104 	addi	fp,sp,4
8110f6e4:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110f6e8:	0001883a 	nop
8110f6ec:	e037883a 	mov	sp,fp
8110f6f0:	df000017 	ldw	fp,0(sp)
8110f6f4:	dec00104 	addi	sp,sp,4
8110f6f8:	f800283a 	ret

8110f6fc <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110f6fc:	defffe04 	addi	sp,sp,-8
8110f700:	de00012e 	bgeu	sp,et,8110f708 <cFeeRMAPEchoingEnable+0xc>
8110f704:	003b68fa 	trap	3
8110f708:	df000115 	stw	fp,4(sp)
8110f70c:	df000104 	addi	fp,sp,4
8110f710:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110f714:	e0bfff17 	ldw	r2,-4(fp)
8110f718:	00c00044 	movi	r3,1
8110f71c:	10c02315 	stw	r3,140(r2)
}
8110f720:	0001883a 	nop
8110f724:	e037883a 	mov	sp,fp
8110f728:	df000017 	ldw	fp,0(sp)
8110f72c:	dec00104 	addi	sp,sp,4
8110f730:	f800283a 	ret

8110f734 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110f734:	defffe04 	addi	sp,sp,-8
8110f738:	de00012e 	bgeu	sp,et,8110f740 <cFeeRMAPEchoingDisable+0xc>
8110f73c:	003b68fa 	trap	3
8110f740:	df000115 	stw	fp,4(sp)
8110f744:	df000104 	addi	fp,sp,4
8110f748:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f74c:	e0bfff17 	ldw	r2,-4(fp)
8110f750:	10002315 	stw	zero,140(r2)
}
8110f754:	0001883a 	nop
8110f758:	e037883a 	mov	sp,fp
8110f75c:	df000017 	ldw	fp,0(sp)
8110f760:	dec00104 	addi	sp,sp,4
8110f764:	f800283a 	ret

8110f768 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110f768:	defffe04 	addi	sp,sp,-8
8110f76c:	de00012e 	bgeu	sp,et,8110f774 <cFeeRMAPLogEnable+0xc>
8110f770:	003b68fa 	trap	3
8110f774:	df000115 	stw	fp,4(sp)
8110f778:	df000104 	addi	fp,sp,4
8110f77c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110f780:	e0bfff17 	ldw	r2,-4(fp)
8110f784:	00c00044 	movi	r3,1
8110f788:	10c02215 	stw	r3,136(r2)
}
8110f78c:	0001883a 	nop
8110f790:	e037883a 	mov	sp,fp
8110f794:	df000017 	ldw	fp,0(sp)
8110f798:	dec00104 	addi	sp,sp,4
8110f79c:	f800283a 	ret

8110f7a0 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110f7a0:	defffe04 	addi	sp,sp,-8
8110f7a4:	de00012e 	bgeu	sp,et,8110f7ac <cFeeRMAPLogDisable+0xc>
8110f7a8:	003b68fa 	trap	3
8110f7ac:	df000115 	stw	fp,4(sp)
8110f7b0:	df000104 	addi	fp,sp,4
8110f7b4:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110f7b8:	e0bfff17 	ldw	r2,-4(fp)
8110f7bc:	10002215 	stw	zero,136(r2)
}
8110f7c0:	0001883a 	nop
8110f7c4:	e037883a 	mov	sp,fp
8110f7c8:	df000017 	ldw	fp,0(sp)
8110f7cc:	dec00104 	addi	sp,sp,4
8110f7d0:	f800283a 	ret

8110f7d4 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110f7d4:	defffe04 	addi	sp,sp,-8
8110f7d8:	de00012e 	bgeu	sp,et,8110f7e0 <vInitSimucamBasicHW+0xc>
8110f7dc:	003b68fa 	trap	3
8110f7e0:	dfc00115 	stw	ra,4(sp)
8110f7e4:	df000015 	stw	fp,0(sp)
8110f7e8:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110f7ec:	01403fc4 	movi	r5,255
8110f7f0:	0009883a 	mov	r4,zero
8110f7f4:	11060d40 	call	811060d4 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110f7f8:	01400834 	movhi	r5,32
8110f7fc:	297fffc4 	addi	r5,r5,-1
8110f800:	0009883a 	mov	r4,zero
8110f804:	11061540 	call	81106154 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110f808:	01400074 	movhi	r5,1
8110f80c:	01000044 	movi	r4,1
8110f810:	11061540 	call	81106154 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110f814:	0009883a 	mov	r4,zero
8110f818:	11077300 	call	81107730 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110f81c:	0009883a 	mov	r4,zero
8110f820:	11078000 	call	81107800 <bSSDisplayUpdate>

}
8110f824:	0001883a 	nop
8110f828:	e037883a 	mov	sp,fp
8110f82c:	dfc00117 	ldw	ra,4(sp)
8110f830:	df000017 	ldw	fp,0(sp)
8110f834:	dec00204 	addi	sp,sp,8
8110f838:	f800283a 	ret

8110f83c <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110f83c:	defffd04 	addi	sp,sp,-12
8110f840:	de00012e 	bgeu	sp,et,8110f848 <bLogWriteSDCard+0xc>
8110f844:	003b68fa 	trap	3
8110f848:	df000215 	stw	fp,8(sp)
8110f84c:	df000204 	addi	fp,sp,8
8110f850:	e13ffe15 	stw	r4,-8(fp)
8110f854:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110f858:	00800044 	movi	r2,1
}
8110f85c:	e037883a 	mov	sp,fp
8110f860:	df000017 	ldw	fp,0(sp)
8110f864:	dec00104 	addi	sp,sp,4
8110f868:	f800283a 	ret

8110f86c <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8110f86c:	deffe004 	addi	sp,sp,-128
8110f870:	de00012e 	bgeu	sp,et,8110f878 <vLogWriteNUC+0xc>
8110f874:	003b68fa 	trap	3
8110f878:	dfc01f15 	stw	ra,124(sp)
8110f87c:	df001e15 	stw	fp,120(sp)
8110f880:	df001e04 	addi	fp,sp,120
8110f884:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
8110f888:	e03fe215 	stw	zero,-120(fp)
8110f88c:	e0bfe304 	addi	r2,fp,-116
8110f890:	00c01b84 	movi	r3,110
8110f894:	180d883a 	mov	r6,r3
8110f898:	000b883a 	mov	r5,zero
8110f89c:	1009883a 	mov	r4,r2
8110f8a0:	1112c840 	call	81112c84 <memset>
	memset(cTemp,0,114);
8110f8a4:	01801c84 	movi	r6,114
8110f8a8:	000b883a 	mov	r5,zero
8110f8ac:	e13fe204 	addi	r4,fp,-120
8110f8b0:	1112c840 	call	81112c84 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8110f8b4:	e13fff17 	ldw	r4,-4(fp)
8110f8b8:	11134b00 	call	811134b0 <strlen>
8110f8bc:	10801c68 	cmpgeui	r2,r2,113
8110f8c0:	1000031e 	bne	r2,zero,8110f8d0 <vLogWriteNUC+0x64>
8110f8c4:	e13fff17 	ldw	r4,-4(fp)
8110f8c8:	11134b00 	call	811134b0 <strlen>
8110f8cc:	00000106 	br	8110f8d4 <vLogWriteNUC+0x68>
8110f8d0:	00801c44 	movi	r2,113
8110f8d4:	100d883a 	mov	r6,r2
8110f8d8:	e17fff17 	ldw	r5,-4(fp)
8110f8dc:	e13fe204 	addi	r4,fp,-120
8110f8e0:	1112b340 	call	81112b34 <memcpy>
	vSendLog ( cDataIn );
8110f8e4:	e13fff17 	ldw	r4,-4(fp)
8110f8e8:	110ccf00 	call	8110ccf0 <vSendLog>
}
8110f8ec:	0001883a 	nop
8110f8f0:	e037883a 	mov	sp,fp
8110f8f4:	dfc00117 	ldw	ra,4(sp)
8110f8f8:	df000017 	ldw	fp,0(sp)
8110f8fc:	dec00204 	addi	sp,sp,8
8110f900:	f800283a 	ret

8110f904 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110f904:	defffc04 	addi	sp,sp,-16
8110f908:	de00012e 	bgeu	sp,et,8110f910 <vSimucamStructureInit+0xc>
8110f90c:	003b68fa 	trap	3
8110f910:	dfc00315 	stw	ra,12(sp)
8110f914:	df000215 	stw	fp,8(sp)
8110f918:	df000204 	addi	fp,sp,8
8110f91c:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110f920:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110f924:	e0bfff17 	ldw	r2,-4(fp)
8110f928:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110f92c:	e0bfff17 	ldw	r2,-4(fp)
8110f930:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110f934:	e13fff17 	ldw	r4,-4(fp)
8110f938:	110faa00 	call	8110faa0 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110f93c:	e13fff17 	ldw	r4,-4(fp)
8110f940:	110fb440 	call	8110fb44 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110f944:	e13fff17 	ldw	r4,-4(fp)
8110f948:	110fbec0 	call	8110fbec <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110f94c:	e13fff17 	ldw	r4,-4(fp)
8110f950:	110fccc0 	call	8110fccc <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110f954:	e13fff17 	ldw	r4,-4(fp)
8110f958:	110fda40 	call	8110fda4 <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110f95c:	e13fff17 	ldw	r4,-4(fp)
8110f960:	110fd000 	call	8110fd00 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110f964:	e0bfff17 	ldw	r2,-4(fp)
8110f968:	00c00084 	movi	r3,2
8110f96c:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110f970:	e0bfff17 	ldw	r2,-4(fp)
8110f974:	10800017 	ldw	r2,0(r2)
8110f978:	1000391e 	bne	r2,zero,8110fa60 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110f97c:	e03ffe05 	stb	zero,-8(fp)
8110f980:	00003306 	br	8110fa50 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110f984:	e0bfff17 	ldw	r2,-4(fp)
8110f988:	10800203 	ldbu	r2,8(r2)
8110f98c:	10803fcc 	andi	r2,r2,255
8110f990:	e0fffe03 	ldbu	r3,-8(fp)
8110f994:	18800a2e 	bgeu	r3,r2,8110f9c0 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110f998:	e0bffe03 	ldbu	r2,-8(fp)
8110f99c:	10802b24 	muli	r2,r2,172
8110f9a0:	10800304 	addi	r2,r2,12
8110f9a4:	e0ffff17 	ldw	r3,-4(fp)
8110f9a8:	1885883a 	add	r2,r3,r2
8110f9ac:	e0fffe03 	ldbu	r3,-8(fp)
8110f9b0:	180b883a 	mov	r5,r3
8110f9b4:	1009883a 	mov	r4,r2
8110f9b8:	110f1d40 	call	8110f1d4 <vNFeeStructureInit>
8110f9bc:	00000906 	br	8110f9e4 <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110f9c0:	e0bffe03 	ldbu	r2,-8(fp)
8110f9c4:	10802b24 	muli	r2,r2,172
8110f9c8:	10800304 	addi	r2,r2,12
8110f9cc:	e0ffff17 	ldw	r3,-4(fp)
8110f9d0:	1885883a 	add	r2,r3,r2
8110f9d4:	e0fffe03 	ldbu	r3,-8(fp)
8110f9d8:	180b883a 	mov	r5,r3
8110f9dc:	1009883a 	mov	r4,r2
8110f9e0:	110f1840 	call	8110f184 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110f9e4:	e0bffe03 	ldbu	r2,-8(fp)
8110f9e8:	e0fffe03 	ldbu	r3,-8(fp)
8110f9ec:	18c02b24 	muli	r3,r3,172
8110f9f0:	18c02304 	addi	r3,r3,140
8110f9f4:	e13fff17 	ldw	r4,-4(fp)
8110f9f8:	20c7883a 	add	r3,r4,r3
8110f9fc:	e13fff17 	ldw	r4,-4(fp)
8110fa00:	108042c4 	addi	r2,r2,267
8110fa04:	1085883a 	add	r2,r2,r2
8110fa08:	1085883a 	add	r2,r2,r2
8110fa0c:	2085883a 	add	r2,r4,r2
8110fa10:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110fa14:	e0bffe03 	ldbu	r2,-8(fp)
8110fa18:	e0fffe03 	ldbu	r3,-8(fp)
8110fa1c:	18c02b24 	muli	r3,r3,172
8110fa20:	18c02404 	addi	r3,r3,144
8110fa24:	e13fff17 	ldw	r4,-4(fp)
8110fa28:	20c7883a 	add	r3,r4,r3
8110fa2c:	e13fff17 	ldw	r4,-4(fp)
8110fa30:	10804444 	addi	r2,r2,273
8110fa34:	1085883a 	add	r2,r2,r2
8110fa38:	1085883a 	add	r2,r2,r2
8110fa3c:	2085883a 	add	r2,r4,r2
8110fa40:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110fa44:	e0bffe03 	ldbu	r2,-8(fp)
8110fa48:	10800044 	addi	r2,r2,1
8110fa4c:	e0bffe05 	stb	r2,-8(fp)
8110fa50:	e0bffe03 	ldbu	r2,-8(fp)
8110fa54:	108001b0 	cmpltui	r2,r2,6
8110fa58:	103fca1e 	bne	r2,zero,8110f984 <__reset+0xfb0ef984>
8110fa5c:	00000806 	br	8110fa80 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110fa60:	e03ffe05 	stb	zero,-8(fp)
8110fa64:	00000306 	br	8110fa74 <vSimucamStructureInit+0x170>
8110fa68:	e0bffe03 	ldbu	r2,-8(fp)
8110fa6c:	10800044 	addi	r2,r2,1
8110fa70:	e0bffe05 	stb	r2,-8(fp)
8110fa74:	e0bffe03 	ldbu	r2,-8(fp)
8110fa78:	108000b0 	cmpltui	r2,r2,2
8110fa7c:	103ffa1e 	bne	r2,zero,8110fa68 <__reset+0xfb0efa68>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110fa80:	e0bfff17 	ldw	r2,-4(fp)
8110fa84:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110fa88:	0001883a 	nop
8110fa8c:	e037883a 	mov	sp,fp
8110fa90:	dfc00117 	ldw	ra,4(sp)
8110fa94:	df000017 	ldw	fp,0(sp)
8110fa98:	dec00204 	addi	sp,sp,8
8110fa9c:	f800283a 	ret

8110faa0 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110faa0:	defffe04 	addi	sp,sp,-8
8110faa4:	de00012e 	bgeu	sp,et,8110faac <vLoadDefaultEPValue+0xc>
8110faa8:	003b68fa 	trap	3
8110faac:	df000115 	stw	fp,4(sp)
8110fab0:	df000104 	addi	fp,sp,4
8110fab4:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110fab8:	e0bfff17 	ldw	r2,-4(fp)
8110fabc:	00d07234 	movhi	r3,16840
8110fac0:	10c10615 	stw	r3,1048(r2)
}
8110fac4:	0001883a 	nop
8110fac8:	e037883a 	mov	sp,fp
8110facc:	df000017 	ldw	fp,0(sp)
8110fad0:	dec00104 	addi	sp,sp,4
8110fad4:	f800283a 	ret

8110fad8 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fad8:	defffd04 	addi	sp,sp,-12
8110fadc:	de00012e 	bgeu	sp,et,8110fae4 <vChangeEPValue+0xc>
8110fae0:	003b68fa 	trap	3
8110fae4:	df000215 	stw	fp,8(sp)
8110fae8:	df000204 	addi	fp,sp,8
8110faec:	e13ffe15 	stw	r4,-8(fp)
8110faf0:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110faf4:	e0bffe17 	ldw	r2,-8(fp)
8110faf8:	e0ffff17 	ldw	r3,-4(fp)
8110fafc:	10c10615 	stw	r3,1048(r2)
}
8110fb00:	0001883a 	nop
8110fb04:	e037883a 	mov	sp,fp
8110fb08:	df000017 	ldw	fp,0(sp)
8110fb0c:	dec00104 	addi	sp,sp,4
8110fb10:	f800283a 	ret

8110fb14 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fb14:	defffd04 	addi	sp,sp,-12
8110fb18:	de00012e 	bgeu	sp,et,8110fb20 <vChangeDefaultEPValue+0xc>
8110fb1c:	003b68fa 	trap	3
8110fb20:	df000215 	stw	fp,8(sp)
8110fb24:	df000204 	addi	fp,sp,8
8110fb28:	e13ffe15 	stw	r4,-8(fp)
8110fb2c:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110fb30:	0001883a 	nop
8110fb34:	e037883a 	mov	sp,fp
8110fb38:	df000017 	ldw	fp,0(sp)
8110fb3c:	dec00104 	addi	sp,sp,4
8110fb40:	f800283a 	ret

8110fb44 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110fb44:	defffe04 	addi	sp,sp,-8
8110fb48:	de00012e 	bgeu	sp,et,8110fb50 <vLoadDefaultRTValue+0xc>
8110fb4c:	003b68fa 	trap	3
8110fb50:	df000115 	stw	fp,4(sp)
8110fb54:	df000104 	addi	fp,sp,4
8110fb58:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110fb5c:	e0ffff17 	ldw	r3,-4(fp)
8110fb60:	00901eb4 	movhi	r2,16506
8110fb64:	10a66684 	addi	r2,r2,-26214
8110fb68:	18810715 	stw	r2,1052(r3)
}
8110fb6c:	0001883a 	nop
8110fb70:	e037883a 	mov	sp,fp
8110fb74:	df000017 	ldw	fp,0(sp)
8110fb78:	dec00104 	addi	sp,sp,4
8110fb7c:	f800283a 	ret

8110fb80 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fb80:	defffd04 	addi	sp,sp,-12
8110fb84:	de00012e 	bgeu	sp,et,8110fb8c <vChangeRTValue+0xc>
8110fb88:	003b68fa 	trap	3
8110fb8c:	df000215 	stw	fp,8(sp)
8110fb90:	df000204 	addi	fp,sp,8
8110fb94:	e13ffe15 	stw	r4,-8(fp)
8110fb98:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110fb9c:	e0bffe17 	ldw	r2,-8(fp)
8110fba0:	e0ffff17 	ldw	r3,-4(fp)
8110fba4:	10c10715 	stw	r3,1052(r2)
}
8110fba8:	0001883a 	nop
8110fbac:	e037883a 	mov	sp,fp
8110fbb0:	df000017 	ldw	fp,0(sp)
8110fbb4:	dec00104 	addi	sp,sp,4
8110fbb8:	f800283a 	ret

8110fbbc <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fbbc:	defffd04 	addi	sp,sp,-12
8110fbc0:	de00012e 	bgeu	sp,et,8110fbc8 <vChangeDefaultRTValue+0xc>
8110fbc4:	003b68fa 	trap	3
8110fbc8:	df000215 	stw	fp,8(sp)
8110fbcc:	df000204 	addi	fp,sp,8
8110fbd0:	e13ffe15 	stw	r4,-8(fp)
8110fbd4:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110fbd8:	0001883a 	nop
8110fbdc:	e037883a 	mov	sp,fp
8110fbe0:	df000017 	ldw	fp,0(sp)
8110fbe4:	dec00104 	addi	sp,sp,4
8110fbe8:	f800283a 	ret

8110fbec <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110fbec:	defffe04 	addi	sp,sp,-8
8110fbf0:	de00012e 	bgeu	sp,et,8110fbf8 <vLoadDefaultSyncSource+0xc>
8110fbf4:	003b68fa 	trap	3
8110fbf8:	df000115 	stw	fp,4(sp)
8110fbfc:	df000104 	addi	fp,sp,4
8110fc00:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110fc04:	e0bfff17 	ldw	r2,-4(fp)
8110fc08:	10010815 	stw	zero,1056(r2)
}
8110fc0c:	0001883a 	nop
8110fc10:	e037883a 	mov	sp,fp
8110fc14:	df000017 	ldw	fp,0(sp)
8110fc18:	dec00104 	addi	sp,sp,4
8110fc1c:	f800283a 	ret

8110fc20 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110fc20:	defffd04 	addi	sp,sp,-12
8110fc24:	de00012e 	bgeu	sp,et,8110fc2c <vChangeSyncSource+0xc>
8110fc28:	003b68fa 	trap	3
8110fc2c:	df000215 	stw	fp,8(sp)
8110fc30:	df000204 	addi	fp,sp,8
8110fc34:	e13ffe15 	stw	r4,-8(fp)
8110fc38:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110fc3c:	e0bffe17 	ldw	r2,-8(fp)
8110fc40:	e0ffff17 	ldw	r3,-4(fp)
8110fc44:	10c10815 	stw	r3,1056(r2)
}
8110fc48:	0001883a 	nop
8110fc4c:	e037883a 	mov	sp,fp
8110fc50:	df000017 	ldw	fp,0(sp)
8110fc54:	dec00104 	addi	sp,sp,4
8110fc58:	f800283a 	ret

8110fc5c <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110fc5c:	defffd04 	addi	sp,sp,-12
8110fc60:	de00012e 	bgeu	sp,et,8110fc68 <vChangeDefaultSyncSource+0xc>
8110fc64:	003b68fa 	trap	3
8110fc68:	df000215 	stw	fp,8(sp)
8110fc6c:	df000204 	addi	fp,sp,8
8110fc70:	e13ffe15 	stw	r4,-8(fp)
8110fc74:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110fc78:	0001883a 	nop
8110fc7c:	e037883a 	mov	sp,fp
8110fc80:	df000017 	ldw	fp,0(sp)
8110fc84:	dec00104 	addi	sp,sp,4
8110fc88:	f800283a 	ret

8110fc8c <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110fc8c:	defffd04 	addi	sp,sp,-12
8110fc90:	de00012e 	bgeu	sp,et,8110fc98 <vSetTimeCode+0xc>
8110fc94:	003b68fa 	trap	3
8110fc98:	df000215 	stw	fp,8(sp)
8110fc9c:	df000204 	addi	fp,sp,8
8110fca0:	e13ffe15 	stw	r4,-8(fp)
8110fca4:	2805883a 	mov	r2,r5
8110fca8:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110fcac:	e0bffe17 	ldw	r2,-8(fp)
8110fcb0:	e0ffff03 	ldbu	r3,-4(fp)
8110fcb4:	10c10905 	stb	r3,1060(r2)
}
8110fcb8:	0001883a 	nop
8110fcbc:	e037883a 	mov	sp,fp
8110fcc0:	df000017 	ldw	fp,0(sp)
8110fcc4:	dec00104 	addi	sp,sp,4
8110fcc8:	f800283a 	ret

8110fccc <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110fccc:	defffe04 	addi	sp,sp,-8
8110fcd0:	de00012e 	bgeu	sp,et,8110fcd8 <vResetTimeCode+0xc>
8110fcd4:	003b68fa 	trap	3
8110fcd8:	df000115 	stw	fp,4(sp)
8110fcdc:	df000104 	addi	fp,sp,4
8110fce0:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110fce4:	e0bfff17 	ldw	r2,-4(fp)
8110fce8:	10010905 	stb	zero,1060(r2)
}
8110fcec:	0001883a 	nop
8110fcf0:	e037883a 	mov	sp,fp
8110fcf4:	df000017 	ldw	fp,0(sp)
8110fcf8:	dec00104 	addi	sp,sp,4
8110fcfc:	f800283a 	ret

8110fd00 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110fd00:	defffe04 	addi	sp,sp,-8
8110fd04:	de00012e 	bgeu	sp,et,8110fd0c <vLoadDefaultAutoResetSync+0xc>
8110fd08:	003b68fa 	trap	3
8110fd0c:	df000115 	stw	fp,4(sp)
8110fd10:	df000104 	addi	fp,sp,4
8110fd14:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110fd18:	e0bfff17 	ldw	r2,-4(fp)
8110fd1c:	00c00044 	movi	r3,1
8110fd20:	10c10a15 	stw	r3,1064(r2)
}
8110fd24:	0001883a 	nop
8110fd28:	e037883a 	mov	sp,fp
8110fd2c:	df000017 	ldw	fp,0(sp)
8110fd30:	dec00104 	addi	sp,sp,4
8110fd34:	f800283a 	ret

8110fd38 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110fd38:	defffd04 	addi	sp,sp,-12
8110fd3c:	de00012e 	bgeu	sp,et,8110fd44 <vChangeAutoResetSync+0xc>
8110fd40:	003b68fa 	trap	3
8110fd44:	df000215 	stw	fp,8(sp)
8110fd48:	df000204 	addi	fp,sp,8
8110fd4c:	e13ffe15 	stw	r4,-8(fp)
8110fd50:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110fd54:	e0bffe17 	ldw	r2,-8(fp)
8110fd58:	e0ffff17 	ldw	r3,-4(fp)
8110fd5c:	10c10a15 	stw	r3,1064(r2)
}
8110fd60:	0001883a 	nop
8110fd64:	e037883a 	mov	sp,fp
8110fd68:	df000017 	ldw	fp,0(sp)
8110fd6c:	dec00104 	addi	sp,sp,4
8110fd70:	f800283a 	ret

8110fd74 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110fd74:	defffd04 	addi	sp,sp,-12
8110fd78:	de00012e 	bgeu	sp,et,8110fd80 <vChangeDefaultAutoResetSync+0xc>
8110fd7c:	003b68fa 	trap	3
8110fd80:	df000215 	stw	fp,8(sp)
8110fd84:	df000204 	addi	fp,sp,8
8110fd88:	e13ffe15 	stw	r4,-8(fp)
8110fd8c:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110fd90:	0001883a 	nop
8110fd94:	e037883a 	mov	sp,fp
8110fd98:	df000017 	ldw	fp,0(sp)
8110fd9c:	dec00104 	addi	sp,sp,4
8110fda0:	f800283a 	ret

8110fda4 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110fda4:	defffe04 	addi	sp,sp,-8
8110fda8:	de00012e 	bgeu	sp,et,8110fdb0 <vLoadDefaultIdNFEEMaster+0xc>
8110fdac:	003b68fa 	trap	3
8110fdb0:	df000115 	stw	fp,4(sp)
8110fdb4:	df000104 	addi	fp,sp,4
8110fdb8:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110fdbc:	e0bfff17 	ldw	r2,-4(fp)
8110fdc0:	10010945 	stb	zero,1061(r2)
}
8110fdc4:	0001883a 	nop
8110fdc8:	e037883a 	mov	sp,fp
8110fdcc:	df000017 	ldw	fp,0(sp)
8110fdd0:	dec00104 	addi	sp,sp,4
8110fdd4:	f800283a 	ret

8110fdd8 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110fdd8:	defffd04 	addi	sp,sp,-12
8110fddc:	de00012e 	bgeu	sp,et,8110fde4 <vChangeIdNFEEMaster+0xc>
8110fde0:	003b68fa 	trap	3
8110fde4:	df000215 	stw	fp,8(sp)
8110fde8:	df000204 	addi	fp,sp,8
8110fdec:	e13ffe15 	stw	r4,-8(fp)
8110fdf0:	2805883a 	mov	r2,r5
8110fdf4:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110fdf8:	e0bffe17 	ldw	r2,-8(fp)
8110fdfc:	e0ffff03 	ldbu	r3,-4(fp)
8110fe00:	10c10945 	stb	r3,1061(r2)
}
8110fe04:	0001883a 	nop
8110fe08:	e037883a 	mov	sp,fp
8110fe0c:	df000017 	ldw	fp,0(sp)
8110fe10:	dec00104 	addi	sp,sp,4
8110fe14:	f800283a 	ret

8110fe18 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110fe18:	defffd04 	addi	sp,sp,-12
8110fe1c:	de00012e 	bgeu	sp,et,8110fe24 <vChangeDefaultIdNFEEMaster+0xc>
8110fe20:	003b68fa 	trap	3
8110fe24:	df000215 	stw	fp,8(sp)
8110fe28:	df000204 	addi	fp,sp,8
8110fe2c:	e13ffe15 	stw	r4,-8(fp)
8110fe30:	2805883a 	mov	r2,r5
8110fe34:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110fe38:	0001883a 	nop
8110fe3c:	e037883a 	mov	sp,fp
8110fe40:	df000017 	ldw	fp,0(sp)
8110fe44:	dec00104 	addi	sp,sp,4
8110fe48:	f800283a 	ret

8110fe4c <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110fe4c:	defffc04 	addi	sp,sp,-16
8110fe50:	de00012e 	bgeu	sp,et,8110fe58 <vSyncReset+0xc>
8110fe54:	003b68fa 	trap	3
8110fe58:	dfc00315 	stw	ra,12(sp)
8110fe5c:	df000215 	stw	fp,8(sp)
8110fe60:	df000204 	addi	fp,sp,8
8110fe64:	e13ffe15 	stw	r4,-8(fp)
8110fe68:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110fe6c:	e13ffe17 	ldw	r4,-8(fp)
8110fe70:	110fccc0 	call	8110fccc <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110fe74:	0001883a 	nop
8110fe78:	e037883a 	mov	sp,fp
8110fe7c:	dfc00117 	ldw	ra,4(sp)
8110fe80:	df000017 	ldw	fp,0(sp)
8110fe84:	dec00204 	addi	sp,sp,8
8110fe88:	f800283a 	ret

8110fe8c <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110fe8c:	defffe04 	addi	sp,sp,-8
8110fe90:	de00012e 	bgeu	sp,et,8110fe98 <bSDcardIsPresent+0xc>
8110fe94:	003b68fa 	trap	3
8110fe98:	dfc00115 	stw	ra,4(sp)
8110fe9c:	df000015 	stw	fp,0(sp)
8110fea0:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110fea4:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
}
8110fea8:	e037883a 	mov	sp,fp
8110feac:	dfc00117 	ldw	ra,4(sp)
8110feb0:	df000017 	ldw	fp,0(sp)
8110feb4:	dec00204 	addi	sp,sp,8
8110feb8:	f800283a 	ret

8110febc <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110febc:	defffe04 	addi	sp,sp,-8
8110fec0:	de00012e 	bgeu	sp,et,8110fec8 <bSDcardFAT16Check+0xc>
8110fec4:	003b68fa 	trap	3
8110fec8:	dfc00115 	stw	ra,4(sp)
8110fecc:	df000015 	stw	fp,0(sp)
8110fed0:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110fed4:	11353840 	call	81135384 <alt_up_sd_card_is_FAT16>
}
8110fed8:	e037883a 	mov	sp,fp
8110fedc:	dfc00117 	ldw	ra,4(sp)
8110fee0:	df000017 	ldw	fp,0(sp)
8110fee4:	dec00204 	addi	sp,sp,8
8110fee8:	f800283a 	ret

8110feec <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110feec:	defffd04 	addi	sp,sp,-12
8110fef0:	de00012e 	bgeu	sp,et,8110fef8 <bInitializeSDCard+0xc>
8110fef4:	003b68fa 	trap	3
8110fef8:	dfc00215 	stw	ra,8(sp)
8110fefc:	df000115 	stw	fp,4(sp)
8110ff00:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110ff04:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110ff08:	d0205e15 	stw	zero,-32392(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110ff0c:	01204534 	movhi	r4,33044
8110ff10:	21389904 	addi	r4,r4,-7580
8110ff14:	11351f40 	call	811351f4 <alt_up_sd_card_open_dev>
8110ff18:	d0a05e15 	stw	r2,-32392(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110ff1c:	d0a05e17 	ldw	r2,-32392(gp)
8110ff20:	10002226 	beq	r2,zero,8110ffac <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110ff24:	110fe8c0 	call	8110fe8c <bSDcardIsPresent>
8110ff28:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110ff2c:	e0bfff17 	ldw	r2,-4(fp)
8110ff30:	10001626 	beq	r2,zero,8110ff8c <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110ff34:	110febc0 	call	8110febc <bSDcardFAT16Check>
8110ff38:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110ff3c:	e0bfff17 	ldw	r2,-4(fp)
8110ff40:	10000a26 	beq	r2,zero,8110ff6c <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110ff44:	00800044 	movi	r2,1
8110ff48:	d0a05d15 	stw	r2,-32396(gp)
				debug(fp, "SD is up.\r\n");
8110ff4c:	d0a04e17 	ldw	r2,-32456(gp)
8110ff50:	100f883a 	mov	r7,r2
8110ff54:	018002c4 	movi	r6,11
8110ff58:	01400044 	movi	r5,1
8110ff5c:	01204534 	movhi	r4,33044
8110ff60:	2138a404 	addi	r4,r4,-7536
8110ff64:	11121200 	call	81112120 <fwrite>
8110ff68:	00001806 	br	8110ffcc <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110ff6c:	d0a04e17 	ldw	r2,-32456(gp)
8110ff70:	100f883a 	mov	r7,r2
8110ff74:	01800984 	movi	r6,38
8110ff78:	01400044 	movi	r5,1
8110ff7c:	01204534 	movhi	r4,33044
8110ff80:	2138a704 	addi	r4,r4,-7524
8110ff84:	11121200 	call	81112120 <fwrite>
8110ff88:	00001006 	br	8110ffcc <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110ff8c:	d0a04e17 	ldw	r2,-32456(gp)
8110ff90:	100f883a 	mov	r7,r2
8110ff94:	01800744 	movi	r6,29
8110ff98:	01400044 	movi	r5,1
8110ff9c:	01204534 	movhi	r4,33044
8110ffa0:	2138b104 	addi	r4,r4,-7484
8110ffa4:	11121200 	call	81112120 <fwrite>
8110ffa8:	00000806 	br	8110ffcc <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110ffac:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110ffb0:	d0a04e17 	ldw	r2,-32456(gp)
8110ffb4:	100f883a 	mov	r7,r2
8110ffb8:	018008c4 	movi	r6,35
8110ffbc:	01400044 	movi	r5,1
8110ffc0:	01204534 	movhi	r4,33044
8110ffc4:	2138b904 	addi	r4,r4,-7452
8110ffc8:	11121200 	call	81112120 <fwrite>
	}

	return bSucess;
8110ffcc:	e0bfff17 	ldw	r2,-4(fp)
}
8110ffd0:	e037883a 	mov	sp,fp
8110ffd4:	dfc00117 	ldw	ra,4(sp)
8110ffd8:	df000017 	ldw	fp,0(sp)
8110ffdc:	dec00204 	addi	sp,sp,8
8110ffe0:	f800283a 	ret

8110ffe4 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110ffe4:	defffd04 	addi	sp,sp,-12
8110ffe8:	de00012e 	bgeu	sp,et,8110fff0 <siOpenFile+0xc>
8110ffec:	003b68fa 	trap	3
8110fff0:	dfc00215 	stw	ra,8(sp)
8110fff4:	df000115 	stw	fp,4(sp)
8110fff8:	df000104 	addi	fp,sp,4
8110fffc:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
81110000:	000b883a 	mov	r5,zero
81110004:	e13fff17 	ldw	r4,-4(fp)
81110008:	11358900 	call	81135890 <alt_up_sd_card_fopen>
}
8111000c:	e037883a 	mov	sp,fp
81110010:	dfc00117 	ldw	ra,4(sp)
81110014:	df000017 	ldw	fp,0(sp)
81110018:	dec00204 	addi	sp,sp,8
8111001c:	f800283a 	ret

81110020 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
81110020:	defffd04 	addi	sp,sp,-12
81110024:	de00012e 	bgeu	sp,et,8111002c <siCloseFile+0xc>
81110028:	003b68fa 	trap	3
8111002c:	dfc00215 	stw	ra,8(sp)
81110030:	df000115 	stw	fp,4(sp)
81110034:	df000104 	addi	fp,sp,4
81110038:	2005883a 	mov	r2,r4
8111003c:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
81110040:	e0bfff0f 	ldh	r2,-4(fp)
81110044:	1009883a 	mov	r4,r2
81110048:	11366dc0 	call	811366dc <alt_up_sd_card_fclose>
}
8111004c:	e037883a 	mov	sp,fp
81110050:	dfc00117 	ldw	ra,4(sp)
81110054:	df000017 	ldw	fp,0(sp)
81110058:	dec00204 	addi	sp,sp,8
8111005c:	f800283a 	ret

81110060 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81110060:	defffd04 	addi	sp,sp,-12
81110064:	de00012e 	bgeu	sp,et,8111006c <cGetNextChar+0xc>
81110068:	003b68fa 	trap	3
8111006c:	dfc00215 	stw	ra,8(sp)
81110070:	df000115 	stw	fp,4(sp)
81110074:	df000104 	addi	fp,sp,4
81110078:	2005883a 	mov	r2,r4
8111007c:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81110080:	e0bfff0f 	ldh	r2,-4(fp)
81110084:	1009883a 	mov	r4,r2
81110088:	1135d340 	call	81135d34 <alt_up_sd_card_read>
}
8111008c:	e037883a 	mov	sp,fp
81110090:	dfc00117 	ldw	ra,4(sp)
81110094:	df000017 	ldw	fp,0(sp)
81110098:	dec00204 	addi	sp,sp,8
8111009c:	f800283a 	ret

811100a0 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
811100a0:	deffff04 	addi	sp,sp,-4
811100a4:	de00012e 	bgeu	sp,et,811100ac <bTestSimucamCriticalHW+0xc>
811100a8:	003b68fa 	trap	3
811100ac:	df000015 	stw	fp,0(sp)
811100b0:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
811100b4:	00800044 	movi	r2,1
}
811100b8:	e037883a 	mov	sp,fp
811100bc:	df000017 	ldw	fp,0(sp)
811100c0:	dec00104 	addi	sp,sp,4
811100c4:	f800283a 	ret

811100c8 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
811100c8:	defffc04 	addi	sp,sp,-16
811100cc:	de00012e 	bgeu	sp,et,811100d4 <_reg_write+0xc>
811100d0:	003b68fa 	trap	3
811100d4:	df000315 	stw	fp,12(sp)
811100d8:	df000304 	addi	fp,sp,12
811100dc:	e13ffd15 	stw	r4,-12(fp)
811100e0:	e17ffe15 	stw	r5,-8(fp)
811100e4:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
811100e8:	e0bffe17 	ldw	r2,-8(fp)
811100ec:	1085883a 	add	r2,r2,r2
811100f0:	1085883a 	add	r2,r2,r2
811100f4:	1007883a 	mov	r3,r2
811100f8:	e0bffd17 	ldw	r2,-12(fp)
811100fc:	1885883a 	add	r2,r3,r2
81110100:	1007883a 	mov	r3,r2
81110104:	e0bfff17 	ldw	r2,-4(fp)
81110108:	18800035 	stwio	r2,0(r3)
	return 1;
8111010c:	00800044 	movi	r2,1

}
81110110:	e037883a 	mov	sp,fp
81110114:	df000017 	ldw	fp,0(sp)
81110118:	dec00104 	addi	sp,sp,4
8111011c:	f800283a 	ret

81110120 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
81110120:	defffc04 	addi	sp,sp,-16
81110124:	de00012e 	bgeu	sp,et,8111012c <_reg_read+0xc>
81110128:	003b68fa 	trap	3
8111012c:	df000315 	stw	fp,12(sp)
81110130:	df000304 	addi	fp,sp,12
81110134:	e13ffd15 	stw	r4,-12(fp)
81110138:	e17ffe15 	stw	r5,-8(fp)
8111013c:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81110140:	e0bffe17 	ldw	r2,-8(fp)
81110144:	1085883a 	add	r2,r2,r2
81110148:	1085883a 	add	r2,r2,r2
8111014c:	1007883a 	mov	r3,r2
81110150:	e0bffd17 	ldw	r2,-12(fp)
81110154:	1885883a 	add	r2,r3,r2
81110158:	10c00037 	ldwio	r3,0(r2)
8111015c:	e0bfff17 	ldw	r2,-4(fp)
81110160:	10c00015 	stw	r3,0(r2)
	return 1;
81110164:	00800044 	movi	r2,1

}
81110168:	e037883a 	mov	sp,fp
8111016c:	df000017 	ldw	fp,0(sp)
81110170:	dec00104 	addi	sp,sp,4
81110174:	f800283a 	ret

81110178 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81110178:	defffa04 	addi	sp,sp,-24
8111017c:	de00012e 	bgeu	sp,et,81110184 <_print_codec_status+0xc>
81110180:	003b68fa 	trap	3
81110184:	dfc00515 	stw	ra,20(sp)
81110188:	df000415 	stw	fp,16(sp)
8111018c:	df000404 	addi	fp,sp,16
81110190:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81110194:	e0bfff17 	ldw	r2,-4(fp)
81110198:	1005d1ba 	srai	r2,r2,6
8111019c:	1080004c 	andi	r2,r2,1
811101a0:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
811101a4:	e0bfff17 	ldw	r2,-4(fp)
811101a8:	1005d17a 	srai	r2,r2,5
811101ac:	1080004c 	andi	r2,r2,1
811101b0:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
811101b4:	e0bfff17 	ldw	r2,-4(fp)
811101b8:	1005d13a 	srai	r2,r2,4
811101bc:	1080004c 	andi	r2,r2,1
811101c0:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
811101c4:	00e04534 	movhi	r3,33044
811101c8:	18c39104 	addi	r3,r3,3652
811101cc:	00a04534 	movhi	r2,33044
811101d0:	10b8c204 	addi	r2,r2,-7416
811101d4:	1009883a 	mov	r4,r2
811101d8:	008005c4 	movi	r2,23
811101dc:	100d883a 	mov	r6,r2
811101e0:	200b883a 	mov	r5,r4
811101e4:	1809883a 	mov	r4,r3
811101e8:	1112b340 	call	81112b34 <memcpy>
	debug(fp, cDebugBuffer);
811101ec:	d0a04e17 	ldw	r2,-32456(gp)
811101f0:	01604534 	movhi	r5,33044
811101f4:	29439104 	addi	r5,r5,3652
811101f8:	1009883a 	mov	r4,r2
811101fc:	1111b340 	call	81111b34 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
81110200:	e0bffc17 	ldw	r2,-16(fp)
81110204:	10800058 	cmpnei	r2,r2,1
81110208:	1000031e 	bne	r2,zero,81110218 <_print_codec_status+0xa0>
8111020c:	00a04534 	movhi	r2,33044
81110210:	10b8c804 	addi	r2,r2,-7392
81110214:	00000206 	br	81110220 <_print_codec_status+0xa8>
81110218:	00a04534 	movhi	r2,33044
8111021c:	10b8c904 	addi	r2,r2,-7388
81110220:	100d883a 	mov	r6,r2
81110224:	01604534 	movhi	r5,33044
81110228:	2978ca04 	addi	r5,r5,-7384
8111022c:	01204534 	movhi	r4,33044
81110230:	21039104 	addi	r4,r4,3652
81110234:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81110238:	d0a04e17 	ldw	r2,-32456(gp)
8111023c:	01604534 	movhi	r5,33044
81110240:	29439104 	addi	r5,r5,3652
81110244:	1009883a 	mov	r4,r2
81110248:	1111b340 	call	81111b34 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8111024c:	e0bffd17 	ldw	r2,-12(fp)
81110250:	10800058 	cmpnei	r2,r2,1
81110254:	1000031e 	bne	r2,zero,81110264 <_print_codec_status+0xec>
81110258:	00a04534 	movhi	r2,33044
8111025c:	10b8c804 	addi	r2,r2,-7392
81110260:	00000206 	br	8111026c <_print_codec_status+0xf4>
81110264:	00a04534 	movhi	r2,33044
81110268:	10b8c904 	addi	r2,r2,-7388
8111026c:	100d883a 	mov	r6,r2
81110270:	01604534 	movhi	r5,33044
81110274:	2978d004 	addi	r5,r5,-7360
81110278:	01204534 	movhi	r4,33044
8111027c:	21039104 	addi	r4,r4,3652
81110280:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
81110284:	d0a04e17 	ldw	r2,-32456(gp)
81110288:	01604534 	movhi	r5,33044
8111028c:	29439104 	addi	r5,r5,3652
81110290:	1009883a 	mov	r4,r2
81110294:	1111b340 	call	81111b34 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
81110298:	e0bffe17 	ldw	r2,-8(fp)
8111029c:	10800058 	cmpnei	r2,r2,1
811102a0:	1000031e 	bne	r2,zero,811102b0 <_print_codec_status+0x138>
811102a4:	00a04534 	movhi	r2,33044
811102a8:	10b8c804 	addi	r2,r2,-7392
811102ac:	00000206 	br	811102b8 <_print_codec_status+0x140>
811102b0:	00a04534 	movhi	r2,33044
811102b4:	10b8c904 	addi	r2,r2,-7388
811102b8:	100d883a 	mov	r6,r2
811102bc:	01604534 	movhi	r5,33044
811102c0:	2978d604 	addi	r5,r5,-7336
811102c4:	01204534 	movhi	r4,33044
811102c8:	21039104 	addi	r4,r4,3652
811102cc:	111329c0 	call	8111329c <sprintf>
	debug(fp, cDebugBuffer);
811102d0:	d0a04e17 	ldw	r2,-32456(gp)
811102d4:	01604534 	movhi	r5,33044
811102d8:	29439104 	addi	r5,r5,3652
811102dc:	1009883a 	mov	r4,r2
811102e0:	1111b340 	call	81111b34 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
811102e4:	00a04534 	movhi	r2,33044
811102e8:	10839104 	addi	r2,r2,3652
811102ec:	00c00b44 	movi	r3,45
811102f0:	10c00005 	stb	r3,0(r2)
811102f4:	00c00b44 	movi	r3,45
811102f8:	10c00045 	stb	r3,1(r2)
811102fc:	00c00b44 	movi	r3,45
81110300:	10c00085 	stb	r3,2(r2)
81110304:	00c00b44 	movi	r3,45
81110308:	10c000c5 	stb	r3,3(r2)
8111030c:	00c00b44 	movi	r3,45
81110310:	10c00105 	stb	r3,4(r2)
81110314:	00c00b44 	movi	r3,45
81110318:	10c00145 	stb	r3,5(r2)
8111031c:	00c00b44 	movi	r3,45
81110320:	10c00185 	stb	r3,6(r2)
81110324:	00c00b44 	movi	r3,45
81110328:	10c001c5 	stb	r3,7(r2)
8111032c:	00c00804 	movi	r3,32
81110330:	10c00205 	stb	r3,8(r2)
81110334:	00c00804 	movi	r3,32
81110338:	10c00245 	stb	r3,9(r2)
8111033c:	00c00284 	movi	r3,10
81110340:	10c00285 	stb	r3,10(r2)
81110344:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
81110348:	d0a04e17 	ldw	r2,-32456(gp)
8111034c:	01604534 	movhi	r5,33044
81110350:	29439104 	addi	r5,r5,3652
81110354:	1009883a 	mov	r4,r2
81110358:	1111b340 	call	81111b34 <fprintf>
#endif
}
8111035c:	0001883a 	nop
81110360:	e037883a 	mov	sp,fp
81110364:	dfc00117 	ldw	ra,4(sp)
81110368:	df000017 	ldw	fp,0(sp)
8111036c:	dec00204 	addi	sp,sp,8
81110370:	f800283a 	ret

81110374 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81110374:	defffb04 	addi	sp,sp,-20
81110378:	de00012e 	bgeu	sp,et,81110380 <_split_codec_status+0xc>
8111037c:	003b68fa 	trap	3
81110380:	df000415 	stw	fp,16(sp)
81110384:	df000404 	addi	fp,sp,16
81110388:	e13ffc15 	stw	r4,-16(fp)
8111038c:	e17ffd15 	stw	r5,-12(fp)
81110390:	e1bffe15 	stw	r6,-8(fp)
81110394:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81110398:	e0bffc17 	ldw	r2,-16(fp)
8111039c:	1005d1ba 	srai	r2,r2,6
811103a0:	10c0004c 	andi	r3,r2,1
811103a4:	e0bffd17 	ldw	r2,-12(fp)
811103a8:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
811103ac:	e0bffc17 	ldw	r2,-16(fp)
811103b0:	1005d17a 	srai	r2,r2,5
811103b4:	10c0004c 	andi	r3,r2,1
811103b8:	e0bffe17 	ldw	r2,-8(fp)
811103bc:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
811103c0:	e0bffc17 	ldw	r2,-16(fp)
811103c4:	1005d13a 	srai	r2,r2,4
811103c8:	10c0004c 	andi	r3,r2,1
811103cc:	e0bfff17 	ldw	r2,-4(fp)
811103d0:	10c00015 	stw	r3,0(r2)
}
811103d4:	0001883a 	nop
811103d8:	e037883a 	mov	sp,fp
811103dc:	df000017 	ldw	fp,0(sp)
811103e0:	dec00104 	addi	sp,sp,4
811103e4:	f800283a 	ret

811103e8 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
811103e8:	defffc04 	addi	sp,sp,-16
811103ec:	de00012e 	bgeu	sp,et,811103f4 <aatoh+0xc>
811103f0:	003b68fa 	trap	3
811103f4:	df000315 	stw	fp,12(sp)
811103f8:	df000304 	addi	fp,sp,12
811103fc:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
81110400:	e0bfff17 	ldw	r2,-4(fp)
81110404:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81110408:	e0bffd17 	ldw	r2,-12(fp)
8111040c:	10c00003 	ldbu	r3,0(r2)
81110410:	e0bffd17 	ldw	r2,-12(fp)
81110414:	10800003 	ldbu	r2,0(r2)
81110418:	10803fcc 	andi	r2,r2,255
8111041c:	10800eb0 	cmpltui	r2,r2,58
81110420:	1000021e 	bne	r2,zero,8111042c <aatoh+0x44>
81110424:	00800dc4 	movi	r2,55
81110428:	00000106 	br	81110430 <aatoh+0x48>
8111042c:	00800c04 	movi	r2,48
81110430:	1885c83a 	sub	r2,r3,r2
81110434:	1004913a 	slli	r2,r2,4
81110438:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8111043c:	e0bffd17 	ldw	r2,-12(fp)
81110440:	10800044 	addi	r2,r2,1
81110444:	10c00003 	ldbu	r3,0(r2)
81110448:	e0bffd17 	ldw	r2,-12(fp)
8111044c:	10800044 	addi	r2,r2,1
81110450:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81110454:	10803fcc 	andi	r2,r2,255
81110458:	10800eb0 	cmpltui	r2,r2,58
8111045c:	1000021e 	bne	r2,zero,81110468 <aatoh+0x80>
81110460:	00800dc4 	movi	r2,55
81110464:	00000106 	br	8111046c <aatoh+0x84>
81110468:	00800c04 	movi	r2,48
8111046c:	1885c83a 	sub	r2,r3,r2
81110470:	2085883a 	add	r2,r4,r2
81110474:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81110478:	e0bffe03 	ldbu	r2,-8(fp)
}
8111047c:	e037883a 	mov	sp,fp
81110480:	df000017 	ldw	fp,0(sp)
81110484:	dec00104 	addi	sp,sp,4
81110488:	f800283a 	ret

8111048c <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8111048c:	defffd04 	addi	sp,sp,-12
81110490:	de00012e 	bgeu	sp,et,81110498 <Verif_Error+0xc>
81110494:	003b68fa 	trap	3
81110498:	dfc00215 	stw	ra,8(sp)
8111049c:	df000115 	stw	fp,4(sp)
811104a0:	df000104 	addi	fp,sp,4
811104a4:	2005883a 	mov	r2,r4
811104a8:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
811104ac:	e0bfff03 	ldbu	r2,-4(fp)
811104b0:	1000091e 	bne	r2,zero,811104d8 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
811104b4:	d0a04e17 	ldw	r2,-32456(gp)
811104b8:	100f883a 	mov	r7,r2
811104bc:	018001c4 	movi	r6,7
811104c0:	01400044 	movi	r5,1
811104c4:	01204534 	movhi	r4,33044
811104c8:	2138dc04 	addi	r4,r4,-7312
811104cc:	11121200 	call	81112120 <fwrite>
#endif
		return 0;
811104d0:	0005883a 	mov	r2,zero
811104d4:	00000106 	br	811104dc <Verif_Error+0x50>
	} else
		return 1;
811104d8:	00800044 	movi	r2,1
}
811104dc:	e037883a 	mov	sp,fp
811104e0:	dfc00117 	ldw	ra,4(sp)
811104e4:	df000017 	ldw	fp,0(sp)
811104e8:	dec00204 	addi	sp,sp,8
811104ec:	f800283a 	ret

811104f0 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
811104f0:	defffe04 	addi	sp,sp,-8
811104f4:	de00012e 	bgeu	sp,et,811104fc <toInt+0xc>
811104f8:	003b68fa 	trap	3
811104fc:	df000115 	stw	fp,4(sp)
81110500:	df000104 	addi	fp,sp,4
81110504:	2005883a 	mov	r2,r4
81110508:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8111050c:	e0bfff03 	ldbu	r2,-4(fp)
81110510:	10bff404 	addi	r2,r2,-48
}
81110514:	e037883a 	mov	sp,fp
81110518:	df000017 	ldw	fp,0(sp)
8111051c:	dec00104 	addi	sp,sp,4
81110520:	f800283a 	ret

81110524 <__divsf3>:
81110524:	defff504 	addi	sp,sp,-44
81110528:	200cd5fa 	srli	r6,r4,23
8111052c:	de00012e 	bgeu	sp,et,81110534 <__divsf3+0x10>
81110530:	003b68fa 	trap	3
81110534:	dcc00415 	stw	r19,16(sp)
81110538:	2026d7fa 	srli	r19,r4,31
8111053c:	00c02034 	movhi	r3,128
81110540:	dd800715 	stw	r22,28(sp)
81110544:	dd000515 	stw	r20,20(sp)
81110548:	dc800315 	stw	r18,12(sp)
8111054c:	18ffffc4 	addi	r3,r3,-1
81110550:	dfc00a15 	stw	ra,40(sp)
81110554:	df000915 	stw	fp,36(sp)
81110558:	ddc00815 	stw	r23,32(sp)
8111055c:	dd400615 	stw	r21,24(sp)
81110560:	dc400215 	stw	r17,8(sp)
81110564:	dc000115 	stw	r16,4(sp)
81110568:	35003fcc 	andi	r20,r6,255
8111056c:	1924703a 	and	r18,r3,r4
81110570:	9d803fcc 	andi	r22,r19,255
81110574:	a0005226 	beq	r20,zero,811106c0 <__divsf3+0x19c>
81110578:	00803fc4 	movi	r2,255
8111057c:	a0802e26 	beq	r20,r2,81110638 <__divsf3+0x114>
81110580:	91002034 	orhi	r4,r18,128
81110584:	202490fa 	slli	r18,r4,3
81110588:	a53fe044 	addi	r20,r20,-127
8111058c:	0021883a 	mov	r16,zero
81110590:	002f883a 	mov	r23,zero
81110594:	280cd5fa 	srli	r6,r5,23
81110598:	282ad7fa 	srli	r21,r5,31
8111059c:	00c02034 	movhi	r3,128
811105a0:	18ffffc4 	addi	r3,r3,-1
811105a4:	31803fcc 	andi	r6,r6,255
811105a8:	1962703a 	and	r17,r3,r5
811105ac:	af003fcc 	andi	fp,r21,255
811105b0:	30004a26 	beq	r6,zero,811106dc <__divsf3+0x1b8>
811105b4:	00803fc4 	movi	r2,255
811105b8:	30804526 	beq	r6,r2,811106d0 <__divsf3+0x1ac>
811105bc:	89402034 	orhi	r5,r17,128
811105c0:	282290fa 	slli	r17,r5,3
811105c4:	31bfe044 	addi	r6,r6,-127
811105c8:	000b883a 	mov	r5,zero
811105cc:	2c20b03a 	or	r16,r5,r16
811105d0:	802090ba 	slli	r16,r16,2
811105d4:	00a04474 	movhi	r2,33041
811105d8:	10817e04 	addi	r2,r2,1528
811105dc:	80a1883a 	add	r16,r16,r2
811105e0:	81000017 	ldw	r4,0(r16)
811105e4:	9d46f03a 	xor	r3,r19,r21
811105e8:	180f883a 	mov	r7,r3
811105ec:	18803fcc 	andi	r2,r3,255
811105f0:	a18dc83a 	sub	r6,r20,r6
811105f4:	2000683a 	jmp	r4
811105f8:	811107dc 	xori	r4,r16,17439
811105fc:	81110660 	cmpeqi	r4,r16,17433
81110600:	811107d0 	cmplti	r4,r16,17439
81110604:	8111064c 	andi	r4,r16,17433
81110608:	811107d0 	cmplti	r4,r16,17439
8111060c:	811107a8 	cmpgeui	r4,r16,17438
81110610:	811107d0 	cmplti	r4,r16,17439
81110614:	8111064c 	andi	r4,r16,17433
81110618:	81110660 	cmpeqi	r4,r16,17433
8111061c:	81110660 	cmpeqi	r4,r16,17433
81110620:	811107a8 	cmpgeui	r4,r16,17438
81110624:	8111064c 	andi	r4,r16,17433
81110628:	811108bc 	xorhi	r4,r16,17442
8111062c:	811108bc 	xorhi	r4,r16,17442
81110630:	811108bc 	xorhi	r4,r16,17442
81110634:	81110870 	cmpltui	r4,r16,17441
81110638:	9000581e 	bne	r18,zero,8111079c <__divsf3+0x278>
8111063c:	04000204 	movi	r16,8
81110640:	05c00084 	movi	r23,2
81110644:	003fd306 	br	81110594 <__reset+0xfb0f0594>
81110648:	0023883a 	mov	r17,zero
8111064c:	e02d883a 	mov	r22,fp
81110650:	282f883a 	mov	r23,r5
81110654:	00800084 	movi	r2,2
81110658:	b8808f1e 	bne	r23,r2,81110898 <__divsf3+0x374>
8111065c:	b005883a 	mov	r2,r22
81110660:	11c0004c 	andi	r7,r2,1
81110664:	013fffc4 	movi	r4,-1
81110668:	000d883a 	mov	r6,zero
8111066c:	21003fcc 	andi	r4,r4,255
81110670:	200895fa 	slli	r4,r4,23
81110674:	38803fcc 	andi	r2,r7,255
81110678:	00c02034 	movhi	r3,128
8111067c:	100497fa 	slli	r2,r2,31
81110680:	18ffffc4 	addi	r3,r3,-1
81110684:	30c6703a 	and	r3,r6,r3
81110688:	1906b03a 	or	r3,r3,r4
8111068c:	1884b03a 	or	r2,r3,r2
81110690:	dfc00a17 	ldw	ra,40(sp)
81110694:	df000917 	ldw	fp,36(sp)
81110698:	ddc00817 	ldw	r23,32(sp)
8111069c:	dd800717 	ldw	r22,28(sp)
811106a0:	dd400617 	ldw	r21,24(sp)
811106a4:	dd000517 	ldw	r20,20(sp)
811106a8:	dcc00417 	ldw	r19,16(sp)
811106ac:	dc800317 	ldw	r18,12(sp)
811106b0:	dc400217 	ldw	r17,8(sp)
811106b4:	dc000117 	ldw	r16,4(sp)
811106b8:	dec00b04 	addi	sp,sp,44
811106bc:	f800283a 	ret
811106c0:	90002b1e 	bne	r18,zero,81110770 <__divsf3+0x24c>
811106c4:	04000104 	movi	r16,4
811106c8:	05c00044 	movi	r23,1
811106cc:	003fb106 	br	81110594 <__reset+0xfb0f0594>
811106d0:	8800251e 	bne	r17,zero,81110768 <__divsf3+0x244>
811106d4:	01400084 	movi	r5,2
811106d8:	00000206 	br	811106e4 <__divsf3+0x1c0>
811106dc:	88001a1e 	bne	r17,zero,81110748 <__divsf3+0x224>
811106e0:	01400044 	movi	r5,1
811106e4:	8160b03a 	or	r16,r16,r5
811106e8:	802090ba 	slli	r16,r16,2
811106ec:	00e04474 	movhi	r3,33041
811106f0:	18c1c204 	addi	r3,r3,1800
811106f4:	80e1883a 	add	r16,r16,r3
811106f8:	80c00017 	ldw	r3,0(r16)
811106fc:	9d44f03a 	xor	r2,r19,r21
81110700:	a18dc83a 	sub	r6,r20,r6
81110704:	1800683a 	jmp	r3
81110708:	81110660 	cmpeqi	r4,r16,17433
8111070c:	81110660 	cmpeqi	r4,r16,17433
81110710:	811108ac 	andhi	r4,r16,17442
81110714:	81110648 	cmpgei	r4,r16,17433
81110718:	811108ac 	andhi	r4,r16,17442
8111071c:	811107a8 	cmpgeui	r4,r16,17438
81110720:	811108ac 	andhi	r4,r16,17442
81110724:	81110648 	cmpgei	r4,r16,17433
81110728:	81110660 	cmpeqi	r4,r16,17433
8111072c:	81110660 	cmpeqi	r4,r16,17433
81110730:	811107a8 	cmpgeui	r4,r16,17438
81110734:	81110648 	cmpgei	r4,r16,17433
81110738:	811108bc 	xorhi	r4,r16,17442
8111073c:	811108bc 	xorhi	r4,r16,17442
81110740:	811108bc 	xorhi	r4,r16,17442
81110744:	811108d4 	ori	r4,r16,17443
81110748:	8809883a 	mov	r4,r17
8111074c:	11119740 	call	81111974 <__clzsi2>
81110750:	10fffec4 	addi	r3,r2,-5
81110754:	10801d84 	addi	r2,r2,118
81110758:	88e2983a 	sll	r17,r17,r3
8111075c:	008dc83a 	sub	r6,zero,r2
81110760:	000b883a 	mov	r5,zero
81110764:	003f9906 	br	811105cc <__reset+0xfb0f05cc>
81110768:	014000c4 	movi	r5,3
8111076c:	003f9706 	br	811105cc <__reset+0xfb0f05cc>
81110770:	9009883a 	mov	r4,r18
81110774:	d9400015 	stw	r5,0(sp)
81110778:	11119740 	call	81111974 <__clzsi2>
8111077c:	10fffec4 	addi	r3,r2,-5
81110780:	11801d84 	addi	r6,r2,118
81110784:	90e4983a 	sll	r18,r18,r3
81110788:	01a9c83a 	sub	r20,zero,r6
8111078c:	0021883a 	mov	r16,zero
81110790:	002f883a 	mov	r23,zero
81110794:	d9400017 	ldw	r5,0(sp)
81110798:	003f7e06 	br	81110594 <__reset+0xfb0f0594>
8111079c:	04000304 	movi	r16,12
811107a0:	05c000c4 	movi	r23,3
811107a4:	003f7b06 	br	81110594 <__reset+0xfb0f0594>
811107a8:	01802034 	movhi	r6,128
811107ac:	000f883a 	mov	r7,zero
811107b0:	31bfffc4 	addi	r6,r6,-1
811107b4:	013fffc4 	movi	r4,-1
811107b8:	003fac06 	br	8111066c <__reset+0xfb0f066c>
811107bc:	01400044 	movi	r5,1
811107c0:	2909c83a 	sub	r4,r5,r4
811107c4:	00c006c4 	movi	r3,27
811107c8:	19004b0e 	bge	r3,r4,811108f8 <__divsf3+0x3d4>
811107cc:	114e703a 	and	r7,r2,r5
811107d0:	0009883a 	mov	r4,zero
811107d4:	000d883a 	mov	r6,zero
811107d8:	003fa406 	br	8111066c <__reset+0xfb0f066c>
811107dc:	9006917a 	slli	r3,r18,5
811107e0:	8822917a 	slli	r17,r17,5
811107e4:	1c40372e 	bgeu	r3,r17,811108c4 <__divsf3+0x3a0>
811107e8:	31bfffc4 	addi	r6,r6,-1
811107ec:	010006c4 	movi	r4,27
811107f0:	000b883a 	mov	r5,zero
811107f4:	180f883a 	mov	r7,r3
811107f8:	294b883a 	add	r5,r5,r5
811107fc:	18c7883a 	add	r3,r3,r3
81110800:	38000116 	blt	r7,zero,81110808 <__divsf3+0x2e4>
81110804:	1c400236 	bltu	r3,r17,81110810 <__divsf3+0x2ec>
81110808:	1c47c83a 	sub	r3,r3,r17
8111080c:	29400054 	ori	r5,r5,1
81110810:	213fffc4 	addi	r4,r4,-1
81110814:	203ff71e 	bne	r4,zero,811107f4 <__reset+0xfb0f07f4>
81110818:	1806c03a 	cmpne	r3,r3,zero
8111081c:	1962b03a 	or	r17,r3,r5
81110820:	31001fc4 	addi	r4,r6,127
81110824:	013fe50e 	bge	zero,r4,811107bc <__reset+0xfb0f07bc>
81110828:	88c001cc 	andi	r3,r17,7
8111082c:	18000426 	beq	r3,zero,81110840 <__divsf3+0x31c>
81110830:	88c003cc 	andi	r3,r17,15
81110834:	01400104 	movi	r5,4
81110838:	19400126 	beq	r3,r5,81110840 <__divsf3+0x31c>
8111083c:	8963883a 	add	r17,r17,r5
81110840:	88c2002c 	andhi	r3,r17,2048
81110844:	18000426 	beq	r3,zero,81110858 <__divsf3+0x334>
81110848:	00fe0034 	movhi	r3,63488
8111084c:	18ffffc4 	addi	r3,r3,-1
81110850:	31002004 	addi	r4,r6,128
81110854:	88e2703a 	and	r17,r17,r3
81110858:	00c03f84 	movi	r3,254
8111085c:	193f8016 	blt	r3,r4,81110660 <__reset+0xfb0f0660>
81110860:	880c91ba 	slli	r6,r17,6
81110864:	11c0004c 	andi	r7,r2,1
81110868:	300cd27a 	srli	r6,r6,9
8111086c:	003f7f06 	br	8111066c <__reset+0xfb0f066c>
81110870:	9080102c 	andhi	r2,r18,64
81110874:	10000226 	beq	r2,zero,81110880 <__divsf3+0x35c>
81110878:	8880102c 	andhi	r2,r17,64
8111087c:	10001826 	beq	r2,zero,811108e0 <__divsf3+0x3bc>
81110880:	00802034 	movhi	r2,128
81110884:	91801034 	orhi	r6,r18,64
81110888:	10bfffc4 	addi	r2,r2,-1
8111088c:	980f883a 	mov	r7,r19
81110890:	308c703a 	and	r6,r6,r2
81110894:	003fc706 	br	811107b4 <__reset+0xfb0f07b4>
81110898:	008000c4 	movi	r2,3
8111089c:	b8802d26 	beq	r23,r2,81110954 <__divsf3+0x430>
811108a0:	00c00044 	movi	r3,1
811108a4:	b005883a 	mov	r2,r22
811108a8:	b8ffdd1e 	bne	r23,r3,81110820 <__reset+0xfb0f0820>
811108ac:	11c0004c 	andi	r7,r2,1
811108b0:	0009883a 	mov	r4,zero
811108b4:	000d883a 	mov	r6,zero
811108b8:	003f6c06 	br	8111066c <__reset+0xfb0f066c>
811108bc:	9023883a 	mov	r17,r18
811108c0:	003f6406 	br	81110654 <__reset+0xfb0f0654>
811108c4:	1c47c83a 	sub	r3,r3,r17
811108c8:	01000684 	movi	r4,26
811108cc:	01400044 	movi	r5,1
811108d0:	003fc806 	br	811107f4 <__reset+0xfb0f07f4>
811108d4:	9080102c 	andhi	r2,r18,64
811108d8:	103fe926 	beq	r2,zero,81110880 <__reset+0xfb0f0880>
811108dc:	0023883a 	mov	r17,zero
811108e0:	00802034 	movhi	r2,128
811108e4:	89801034 	orhi	r6,r17,64
811108e8:	10bfffc4 	addi	r2,r2,-1
811108ec:	a80f883a 	mov	r7,r21
811108f0:	308c703a 	and	r6,r6,r2
811108f4:	003faf06 	br	811107b4 <__reset+0xfb0f07b4>
811108f8:	01c00804 	movi	r7,32
811108fc:	390fc83a 	sub	r7,r7,r4
81110900:	89ce983a 	sll	r7,r17,r7
81110904:	890ad83a 	srl	r5,r17,r4
81110908:	380ec03a 	cmpne	r7,r7,zero
8111090c:	29cab03a 	or	r5,r5,r7
81110910:	28c001cc 	andi	r3,r5,7
81110914:	18000426 	beq	r3,zero,81110928 <__divsf3+0x404>
81110918:	28c003cc 	andi	r3,r5,15
8111091c:	01000104 	movi	r4,4
81110920:	19000126 	beq	r3,r4,81110928 <__divsf3+0x404>
81110924:	290b883a 	add	r5,r5,r4
81110928:	28c1002c 	andhi	r3,r5,1024
8111092c:	18000426 	beq	r3,zero,81110940 <__divsf3+0x41c>
81110930:	11c0004c 	andi	r7,r2,1
81110934:	01000044 	movi	r4,1
81110938:	000d883a 	mov	r6,zero
8111093c:	003f4b06 	br	8111066c <__reset+0xfb0f066c>
81110940:	280a91ba 	slli	r5,r5,6
81110944:	11c0004c 	andi	r7,r2,1
81110948:	0009883a 	mov	r4,zero
8111094c:	280cd27a 	srli	r6,r5,9
81110950:	003f4606 	br	8111066c <__reset+0xfb0f066c>
81110954:	00802034 	movhi	r2,128
81110958:	89801034 	orhi	r6,r17,64
8111095c:	10bfffc4 	addi	r2,r2,-1
81110960:	b00f883a 	mov	r7,r22
81110964:	308c703a 	and	r6,r6,r2
81110968:	003f9206 	br	811107b4 <__reset+0xfb0f07b4>

8111096c <__mulsf3>:
8111096c:	defff504 	addi	sp,sp,-44
81110970:	de00012e 	bgeu	sp,et,81110978 <__mulsf3+0xc>
81110974:	003b68fa 	trap	3
81110978:	dc000115 	stw	r16,4(sp)
8111097c:	2020d5fa 	srli	r16,r4,23
81110980:	dd400615 	stw	r21,24(sp)
81110984:	202ad7fa 	srli	r21,r4,31
81110988:	dc800315 	stw	r18,12(sp)
8111098c:	04802034 	movhi	r18,128
81110990:	df000915 	stw	fp,36(sp)
81110994:	dd000515 	stw	r20,20(sp)
81110998:	94bfffc4 	addi	r18,r18,-1
8111099c:	dfc00a15 	stw	ra,40(sp)
811109a0:	ddc00815 	stw	r23,32(sp)
811109a4:	dd800715 	stw	r22,28(sp)
811109a8:	dcc00415 	stw	r19,16(sp)
811109ac:	dc400215 	stw	r17,8(sp)
811109b0:	84003fcc 	andi	r16,r16,255
811109b4:	9124703a 	and	r18,r18,r4
811109b8:	a829883a 	mov	r20,r21
811109bc:	af003fcc 	andi	fp,r21,255
811109c0:	80005426 	beq	r16,zero,81110b14 <__mulsf3+0x1a8>
811109c4:	00803fc4 	movi	r2,255
811109c8:	80802f26 	beq	r16,r2,81110a88 <__mulsf3+0x11c>
811109cc:	91002034 	orhi	r4,r18,128
811109d0:	202490fa 	slli	r18,r4,3
811109d4:	843fe044 	addi	r16,r16,-127
811109d8:	0023883a 	mov	r17,zero
811109dc:	002f883a 	mov	r23,zero
811109e0:	2804d5fa 	srli	r2,r5,23
811109e4:	282cd7fa 	srli	r22,r5,31
811109e8:	01002034 	movhi	r4,128
811109ec:	213fffc4 	addi	r4,r4,-1
811109f0:	10803fcc 	andi	r2,r2,255
811109f4:	2166703a 	and	r19,r4,r5
811109f8:	b1803fcc 	andi	r6,r22,255
811109fc:	10004c26 	beq	r2,zero,81110b30 <__mulsf3+0x1c4>
81110a00:	00c03fc4 	movi	r3,255
81110a04:	10c04726 	beq	r2,r3,81110b24 <__mulsf3+0x1b8>
81110a08:	99002034 	orhi	r4,r19,128
81110a0c:	202690fa 	slli	r19,r4,3
81110a10:	10bfe044 	addi	r2,r2,-127
81110a14:	0007883a 	mov	r3,zero
81110a18:	80a1883a 	add	r16,r16,r2
81110a1c:	010003c4 	movi	r4,15
81110a20:	1c44b03a 	or	r2,r3,r17
81110a24:	b56af03a 	xor	r21,r22,r21
81110a28:	81c00044 	addi	r7,r16,1
81110a2c:	20806b36 	bltu	r4,r2,81110bdc <__mulsf3+0x270>
81110a30:	100490ba 	slli	r2,r2,2
81110a34:	01204474 	movhi	r4,33041
81110a38:	21029204 	addi	r4,r4,2632
81110a3c:	1105883a 	add	r2,r2,r4
81110a40:	10800017 	ldw	r2,0(r2)
81110a44:	1000683a 	jmp	r2
81110a48:	81110bdc 	xori	r4,r16,17455
81110a4c:	81110a9c 	xori	r4,r16,17450
81110a50:	81110a9c 	xori	r4,r16,17450
81110a54:	81110a98 	cmpnei	r4,r16,17450
81110a58:	81110bc0 	call	881110bc <__reset+0x20f10bc>
81110a5c:	81110bc0 	call	881110bc <__reset+0x20f10bc>
81110a60:	81110bac 	andhi	r4,r16,17454
81110a64:	81110a98 	cmpnei	r4,r16,17450
81110a68:	81110bc0 	call	881110bc <__reset+0x20f10bc>
81110a6c:	81110bac 	andhi	r4,r16,17454
81110a70:	81110bc0 	call	881110bc <__reset+0x20f10bc>
81110a74:	81110a98 	cmpnei	r4,r16,17450
81110a78:	81110bcc 	andi	r4,r16,17455
81110a7c:	81110bcc 	andi	r4,r16,17455
81110a80:	81110bcc 	andi	r4,r16,17455
81110a84:	81110ca8 	cmpgeui	r4,r16,17458
81110a88:	90003b1e 	bne	r18,zero,81110b78 <__mulsf3+0x20c>
81110a8c:	04400204 	movi	r17,8
81110a90:	05c00084 	movi	r23,2
81110a94:	003fd206 	br	811109e0 <__reset+0xfb0f09e0>
81110a98:	302b883a 	mov	r21,r6
81110a9c:	00800084 	movi	r2,2
81110aa0:	18802626 	beq	r3,r2,81110b3c <__mulsf3+0x1d0>
81110aa4:	008000c4 	movi	r2,3
81110aa8:	1880ab26 	beq	r3,r2,81110d58 <__mulsf3+0x3ec>
81110aac:	00800044 	movi	r2,1
81110ab0:	1880a21e 	bne	r3,r2,81110d3c <__mulsf3+0x3d0>
81110ab4:	a829883a 	mov	r20,r21
81110ab8:	0007883a 	mov	r3,zero
81110abc:	0009883a 	mov	r4,zero
81110ac0:	18803fcc 	andi	r2,r3,255
81110ac4:	100695fa 	slli	r3,r2,23
81110ac8:	a0803fcc 	andi	r2,r20,255
81110acc:	100a97fa 	slli	r5,r2,31
81110ad0:	00802034 	movhi	r2,128
81110ad4:	10bfffc4 	addi	r2,r2,-1
81110ad8:	2084703a 	and	r2,r4,r2
81110adc:	10c4b03a 	or	r2,r2,r3
81110ae0:	1144b03a 	or	r2,r2,r5
81110ae4:	dfc00a17 	ldw	ra,40(sp)
81110ae8:	df000917 	ldw	fp,36(sp)
81110aec:	ddc00817 	ldw	r23,32(sp)
81110af0:	dd800717 	ldw	r22,28(sp)
81110af4:	dd400617 	ldw	r21,24(sp)
81110af8:	dd000517 	ldw	r20,20(sp)
81110afc:	dcc00417 	ldw	r19,16(sp)
81110b00:	dc800317 	ldw	r18,12(sp)
81110b04:	dc400217 	ldw	r17,8(sp)
81110b08:	dc000117 	ldw	r16,4(sp)
81110b0c:	dec00b04 	addi	sp,sp,44
81110b10:	f800283a 	ret
81110b14:	90000d1e 	bne	r18,zero,81110b4c <__mulsf3+0x1e0>
81110b18:	04400104 	movi	r17,4
81110b1c:	05c00044 	movi	r23,1
81110b20:	003faf06 	br	811109e0 <__reset+0xfb0f09e0>
81110b24:	9806c03a 	cmpne	r3,r19,zero
81110b28:	18c00084 	addi	r3,r3,2
81110b2c:	003fba06 	br	81110a18 <__reset+0xfb0f0a18>
81110b30:	9800141e 	bne	r19,zero,81110b84 <__mulsf3+0x218>
81110b34:	00c00044 	movi	r3,1
81110b38:	003fb706 	br	81110a18 <__reset+0xfb0f0a18>
81110b3c:	a829883a 	mov	r20,r21
81110b40:	00ffffc4 	movi	r3,-1
81110b44:	0009883a 	mov	r4,zero
81110b48:	003fdd06 	br	81110ac0 <__reset+0xfb0f0ac0>
81110b4c:	9009883a 	mov	r4,r18
81110b50:	d9400015 	stw	r5,0(sp)
81110b54:	11119740 	call	81111974 <__clzsi2>
81110b58:	10fffec4 	addi	r3,r2,-5
81110b5c:	10801d84 	addi	r2,r2,118
81110b60:	90e4983a 	sll	r18,r18,r3
81110b64:	00a1c83a 	sub	r16,zero,r2
81110b68:	0023883a 	mov	r17,zero
81110b6c:	002f883a 	mov	r23,zero
81110b70:	d9400017 	ldw	r5,0(sp)
81110b74:	003f9a06 	br	811109e0 <__reset+0xfb0f09e0>
81110b78:	04400304 	movi	r17,12
81110b7c:	05c000c4 	movi	r23,3
81110b80:	003f9706 	br	811109e0 <__reset+0xfb0f09e0>
81110b84:	9809883a 	mov	r4,r19
81110b88:	d9800015 	stw	r6,0(sp)
81110b8c:	11119740 	call	81111974 <__clzsi2>
81110b90:	10fffec4 	addi	r3,r2,-5
81110b94:	10801d84 	addi	r2,r2,118
81110b98:	98e6983a 	sll	r19,r19,r3
81110b9c:	0085c83a 	sub	r2,zero,r2
81110ba0:	0007883a 	mov	r3,zero
81110ba4:	d9800017 	ldw	r6,0(sp)
81110ba8:	003f9b06 	br	81110a18 <__reset+0xfb0f0a18>
81110bac:	01002034 	movhi	r4,128
81110bb0:	0029883a 	mov	r20,zero
81110bb4:	213fffc4 	addi	r4,r4,-1
81110bb8:	00ffffc4 	movi	r3,-1
81110bbc:	003fc006 	br	81110ac0 <__reset+0xfb0f0ac0>
81110bc0:	9027883a 	mov	r19,r18
81110bc4:	b807883a 	mov	r3,r23
81110bc8:	003fb406 	br	81110a9c <__reset+0xfb0f0a9c>
81110bcc:	9027883a 	mov	r19,r18
81110bd0:	e02b883a 	mov	r21,fp
81110bd4:	b807883a 	mov	r3,r23
81110bd8:	003fb006 	br	81110a9c <__reset+0xfb0f0a9c>
81110bdc:	9004d43a 	srli	r2,r18,16
81110be0:	9810d43a 	srli	r8,r19,16
81110be4:	94bfffcc 	andi	r18,r18,65535
81110be8:	993fffcc 	andi	r4,r19,65535
81110bec:	910d383a 	mul	r6,r18,r4
81110bf0:	20a7383a 	mul	r19,r4,r2
81110bf4:	9225383a 	mul	r18,r18,r8
81110bf8:	3006d43a 	srli	r3,r6,16
81110bfc:	1211383a 	mul	r8,r2,r8
81110c00:	94e5883a 	add	r18,r18,r19
81110c04:	1c87883a 	add	r3,r3,r18
81110c08:	1cc0022e 	bgeu	r3,r19,81110c14 <__mulsf3+0x2a8>
81110c0c:	00800074 	movhi	r2,1
81110c10:	4091883a 	add	r8,r8,r2
81110c14:	1804943a 	slli	r2,r3,16
81110c18:	31bfffcc 	andi	r6,r6,65535
81110c1c:	1806d43a 	srli	r3,r3,16
81110c20:	1185883a 	add	r2,r2,r6
81110c24:	102691ba 	slli	r19,r2,6
81110c28:	1a07883a 	add	r3,r3,r8
81110c2c:	1004d6ba 	srli	r2,r2,26
81110c30:	180891ba 	slli	r4,r3,6
81110c34:	9826c03a 	cmpne	r19,r19,zero
81110c38:	9884b03a 	or	r2,r19,r2
81110c3c:	1126b03a 	or	r19,r2,r4
81110c40:	9882002c 	andhi	r2,r19,2048
81110c44:	10000426 	beq	r2,zero,81110c58 <__mulsf3+0x2ec>
81110c48:	9804d07a 	srli	r2,r19,1
81110c4c:	9900004c 	andi	r4,r19,1
81110c50:	3821883a 	mov	r16,r7
81110c54:	1126b03a 	or	r19,r2,r4
81110c58:	80c01fc4 	addi	r3,r16,127
81110c5c:	00c0210e 	bge	zero,r3,81110ce4 <__mulsf3+0x378>
81110c60:	988001cc 	andi	r2,r19,7
81110c64:	10000426 	beq	r2,zero,81110c78 <__mulsf3+0x30c>
81110c68:	988003cc 	andi	r2,r19,15
81110c6c:	01000104 	movi	r4,4
81110c70:	11000126 	beq	r2,r4,81110c78 <__mulsf3+0x30c>
81110c74:	9927883a 	add	r19,r19,r4
81110c78:	9882002c 	andhi	r2,r19,2048
81110c7c:	10000426 	beq	r2,zero,81110c90 <__mulsf3+0x324>
81110c80:	00be0034 	movhi	r2,63488
81110c84:	10bfffc4 	addi	r2,r2,-1
81110c88:	80c02004 	addi	r3,r16,128
81110c8c:	98a6703a 	and	r19,r19,r2
81110c90:	00803f84 	movi	r2,254
81110c94:	10ffa916 	blt	r2,r3,81110b3c <__reset+0xfb0f0b3c>
81110c98:	980891ba 	slli	r4,r19,6
81110c9c:	a829883a 	mov	r20,r21
81110ca0:	2008d27a 	srli	r4,r4,9
81110ca4:	003f8606 	br	81110ac0 <__reset+0xfb0f0ac0>
81110ca8:	9080102c 	andhi	r2,r18,64
81110cac:	10000826 	beq	r2,zero,81110cd0 <__mulsf3+0x364>
81110cb0:	9880102c 	andhi	r2,r19,64
81110cb4:	1000061e 	bne	r2,zero,81110cd0 <__mulsf3+0x364>
81110cb8:	00802034 	movhi	r2,128
81110cbc:	99001034 	orhi	r4,r19,64
81110cc0:	10bfffc4 	addi	r2,r2,-1
81110cc4:	b029883a 	mov	r20,r22
81110cc8:	2088703a 	and	r4,r4,r2
81110ccc:	003fba06 	br	81110bb8 <__reset+0xfb0f0bb8>
81110cd0:	00802034 	movhi	r2,128
81110cd4:	91001034 	orhi	r4,r18,64
81110cd8:	10bfffc4 	addi	r2,r2,-1
81110cdc:	2088703a 	and	r4,r4,r2
81110ce0:	003fb506 	br	81110bb8 <__reset+0xfb0f0bb8>
81110ce4:	00800044 	movi	r2,1
81110ce8:	10c7c83a 	sub	r3,r2,r3
81110cec:	008006c4 	movi	r2,27
81110cf0:	10ff7016 	blt	r2,r3,81110ab4 <__reset+0xfb0f0ab4>
81110cf4:	00800804 	movi	r2,32
81110cf8:	10c5c83a 	sub	r2,r2,r3
81110cfc:	9884983a 	sll	r2,r19,r2
81110d00:	98c6d83a 	srl	r3,r19,r3
81110d04:	1004c03a 	cmpne	r2,r2,zero
81110d08:	1884b03a 	or	r2,r3,r2
81110d0c:	10c001cc 	andi	r3,r2,7
81110d10:	18000426 	beq	r3,zero,81110d24 <__mulsf3+0x3b8>
81110d14:	10c003cc 	andi	r3,r2,15
81110d18:	01000104 	movi	r4,4
81110d1c:	19000126 	beq	r3,r4,81110d24 <__mulsf3+0x3b8>
81110d20:	1105883a 	add	r2,r2,r4
81110d24:	10c1002c 	andhi	r3,r2,1024
81110d28:	18000626 	beq	r3,zero,81110d44 <__mulsf3+0x3d8>
81110d2c:	a829883a 	mov	r20,r21
81110d30:	00c00044 	movi	r3,1
81110d34:	0009883a 	mov	r4,zero
81110d38:	003f6106 	br	81110ac0 <__reset+0xfb0f0ac0>
81110d3c:	3821883a 	mov	r16,r7
81110d40:	003fc506 	br	81110c58 <__reset+0xfb0f0c58>
81110d44:	100491ba 	slli	r2,r2,6
81110d48:	a829883a 	mov	r20,r21
81110d4c:	0007883a 	mov	r3,zero
81110d50:	1008d27a 	srli	r4,r2,9
81110d54:	003f5a06 	br	81110ac0 <__reset+0xfb0f0ac0>
81110d58:	00802034 	movhi	r2,128
81110d5c:	99001034 	orhi	r4,r19,64
81110d60:	10bfffc4 	addi	r2,r2,-1
81110d64:	a829883a 	mov	r20,r21
81110d68:	2088703a 	and	r4,r4,r2
81110d6c:	003f9206 	br	81110bb8 <__reset+0xfb0f0bb8>

81110d70 <__floatsisf>:
81110d70:	defffd04 	addi	sp,sp,-12
81110d74:	de00012e 	bgeu	sp,et,81110d7c <__floatsisf+0xc>
81110d78:	003b68fa 	trap	3
81110d7c:	dfc00215 	stw	ra,8(sp)
81110d80:	dc400115 	stw	r17,4(sp)
81110d84:	dc000015 	stw	r16,0(sp)
81110d88:	20003526 	beq	r4,zero,81110e60 <__floatsisf+0xf0>
81110d8c:	2021883a 	mov	r16,r4
81110d90:	2022d7fa 	srli	r17,r4,31
81110d94:	20003616 	blt	r4,zero,81110e70 <__floatsisf+0x100>
81110d98:	8009883a 	mov	r4,r16
81110d9c:	11119740 	call	81111974 <__clzsi2>
81110da0:	00c02784 	movi	r3,158
81110da4:	1887c83a 	sub	r3,r3,r2
81110da8:	01002584 	movi	r4,150
81110dac:	20c01416 	blt	r4,r3,81110e00 <__floatsisf+0x90>
81110db0:	20c9c83a 	sub	r4,r4,r3
81110db4:	8120983a 	sll	r16,r16,r4
81110db8:	00802034 	movhi	r2,128
81110dbc:	10bfffc4 	addi	r2,r2,-1
81110dc0:	8809883a 	mov	r4,r17
81110dc4:	80a0703a 	and	r16,r16,r2
81110dc8:	18803fcc 	andi	r2,r3,255
81110dcc:	100695fa 	slli	r3,r2,23
81110dd0:	20803fcc 	andi	r2,r4,255
81110dd4:	100897fa 	slli	r4,r2,31
81110dd8:	00802034 	movhi	r2,128
81110ddc:	10bfffc4 	addi	r2,r2,-1
81110de0:	8084703a 	and	r2,r16,r2
81110de4:	10c4b03a 	or	r2,r2,r3
81110de8:	1104b03a 	or	r2,r2,r4
81110dec:	dfc00217 	ldw	ra,8(sp)
81110df0:	dc400117 	ldw	r17,4(sp)
81110df4:	dc000017 	ldw	r16,0(sp)
81110df8:	dec00304 	addi	sp,sp,12
81110dfc:	f800283a 	ret
81110e00:	01002644 	movi	r4,153
81110e04:	20c01c16 	blt	r4,r3,81110e78 <__floatsisf+0x108>
81110e08:	20c9c83a 	sub	r4,r4,r3
81110e0c:	8120983a 	sll	r16,r16,r4
81110e10:	013f0034 	movhi	r4,64512
81110e14:	213fffc4 	addi	r4,r4,-1
81110e18:	814001cc 	andi	r5,r16,7
81110e1c:	8108703a 	and	r4,r16,r4
81110e20:	28000426 	beq	r5,zero,81110e34 <__floatsisf+0xc4>
81110e24:	840003cc 	andi	r16,r16,15
81110e28:	01400104 	movi	r5,4
81110e2c:	81400126 	beq	r16,r5,81110e34 <__floatsisf+0xc4>
81110e30:	2149883a 	add	r4,r4,r5
81110e34:	2141002c 	andhi	r5,r4,1024
81110e38:	28000526 	beq	r5,zero,81110e50 <__floatsisf+0xe0>
81110e3c:	00c027c4 	movi	r3,159
81110e40:	1887c83a 	sub	r3,r3,r2
81110e44:	00bf0034 	movhi	r2,64512
81110e48:	10bfffc4 	addi	r2,r2,-1
81110e4c:	2088703a 	and	r4,r4,r2
81110e50:	202091ba 	slli	r16,r4,6
81110e54:	8809883a 	mov	r4,r17
81110e58:	8020d27a 	srli	r16,r16,9
81110e5c:	003fda06 	br	81110dc8 <__reset+0xfb0f0dc8>
81110e60:	0009883a 	mov	r4,zero
81110e64:	0007883a 	mov	r3,zero
81110e68:	0021883a 	mov	r16,zero
81110e6c:	003fd606 	br	81110dc8 <__reset+0xfb0f0dc8>
81110e70:	0121c83a 	sub	r16,zero,r4
81110e74:	003fc806 	br	81110d98 <__reset+0xfb0f0d98>
81110e78:	01002e44 	movi	r4,185
81110e7c:	20c9c83a 	sub	r4,r4,r3
81110e80:	01400144 	movi	r5,5
81110e84:	8108983a 	sll	r4,r16,r4
81110e88:	288bc83a 	sub	r5,r5,r2
81110e8c:	8160d83a 	srl	r16,r16,r5
81110e90:	2008c03a 	cmpne	r4,r4,zero
81110e94:	8120b03a 	or	r16,r16,r4
81110e98:	003fdd06 	br	81110e10 <__reset+0xfb0f0e10>

81110e9c <__floatunsisf>:
81110e9c:	defffe04 	addi	sp,sp,-8
81110ea0:	de00012e 	bgeu	sp,et,81110ea8 <__floatunsisf+0xc>
81110ea4:	003b68fa 	trap	3
81110ea8:	dfc00115 	stw	ra,4(sp)
81110eac:	dc000015 	stw	r16,0(sp)
81110eb0:	20002c26 	beq	r4,zero,81110f64 <__floatunsisf+0xc8>
81110eb4:	2021883a 	mov	r16,r4
81110eb8:	11119740 	call	81111974 <__clzsi2>
81110ebc:	00c02784 	movi	r3,158
81110ec0:	1887c83a 	sub	r3,r3,r2
81110ec4:	01002584 	movi	r4,150
81110ec8:	20c00f16 	blt	r4,r3,81110f08 <__floatunsisf+0x6c>
81110ecc:	20c9c83a 	sub	r4,r4,r3
81110ed0:	8108983a 	sll	r4,r16,r4
81110ed4:	00802034 	movhi	r2,128
81110ed8:	10bfffc4 	addi	r2,r2,-1
81110edc:	2088703a 	and	r4,r4,r2
81110ee0:	18803fcc 	andi	r2,r3,255
81110ee4:	100695fa 	slli	r3,r2,23
81110ee8:	00802034 	movhi	r2,128
81110eec:	10bfffc4 	addi	r2,r2,-1
81110ef0:	2084703a 	and	r2,r4,r2
81110ef4:	10c4b03a 	or	r2,r2,r3
81110ef8:	dfc00117 	ldw	ra,4(sp)
81110efc:	dc000017 	ldw	r16,0(sp)
81110f00:	dec00204 	addi	sp,sp,8
81110f04:	f800283a 	ret
81110f08:	01002644 	movi	r4,153
81110f0c:	20c01816 	blt	r4,r3,81110f70 <__floatunsisf+0xd4>
81110f10:	20c9c83a 	sub	r4,r4,r3
81110f14:	8108983a 	sll	r4,r16,r4
81110f18:	017f0034 	movhi	r5,64512
81110f1c:	297fffc4 	addi	r5,r5,-1
81110f20:	218001cc 	andi	r6,r4,7
81110f24:	214a703a 	and	r5,r4,r5
81110f28:	30000426 	beq	r6,zero,81110f3c <__floatunsisf+0xa0>
81110f2c:	210003cc 	andi	r4,r4,15
81110f30:	01800104 	movi	r6,4
81110f34:	21800126 	beq	r4,r6,81110f3c <__floatunsisf+0xa0>
81110f38:	298b883a 	add	r5,r5,r6
81110f3c:	2901002c 	andhi	r4,r5,1024
81110f40:	20000526 	beq	r4,zero,81110f58 <__floatunsisf+0xbc>
81110f44:	00c027c4 	movi	r3,159
81110f48:	1887c83a 	sub	r3,r3,r2
81110f4c:	00bf0034 	movhi	r2,64512
81110f50:	10bfffc4 	addi	r2,r2,-1
81110f54:	288a703a 	and	r5,r5,r2
81110f58:	280891ba 	slli	r4,r5,6
81110f5c:	2008d27a 	srli	r4,r4,9
81110f60:	003fdf06 	br	81110ee0 <__reset+0xfb0f0ee0>
81110f64:	0007883a 	mov	r3,zero
81110f68:	0009883a 	mov	r4,zero
81110f6c:	003fdc06 	br	81110ee0 <__reset+0xfb0f0ee0>
81110f70:	01402e44 	movi	r5,185
81110f74:	28cbc83a 	sub	r5,r5,r3
81110f78:	01000144 	movi	r4,5
81110f7c:	2089c83a 	sub	r4,r4,r2
81110f80:	814a983a 	sll	r5,r16,r5
81110f84:	8108d83a 	srl	r4,r16,r4
81110f88:	2820c03a 	cmpne	r16,r5,zero
81110f8c:	2408b03a 	or	r4,r4,r16
81110f90:	003fe106 	br	81110f18 <__reset+0xfb0f0f18>

81110f94 <__muldf3>:
81110f94:	defff304 	addi	sp,sp,-52
81110f98:	2804d53a 	srli	r2,r5,20
81110f9c:	de00012e 	bgeu	sp,et,81110fa4 <__muldf3+0x10>
81110fa0:	003b68fa 	trap	3
81110fa4:	dd800915 	stw	r22,36(sp)
81110fa8:	282cd7fa 	srli	r22,r5,31
81110fac:	dc000315 	stw	r16,12(sp)
81110fb0:	04000434 	movhi	r16,16
81110fb4:	dd400815 	stw	r21,32(sp)
81110fb8:	dc800515 	stw	r18,20(sp)
81110fbc:	843fffc4 	addi	r16,r16,-1
81110fc0:	dfc00c15 	stw	ra,48(sp)
81110fc4:	df000b15 	stw	fp,44(sp)
81110fc8:	ddc00a15 	stw	r23,40(sp)
81110fcc:	dd000715 	stw	r20,28(sp)
81110fd0:	dcc00615 	stw	r19,24(sp)
81110fd4:	dc400415 	stw	r17,16(sp)
81110fd8:	1481ffcc 	andi	r18,r2,2047
81110fdc:	2c20703a 	and	r16,r5,r16
81110fe0:	b02b883a 	mov	r21,r22
81110fe4:	b2403fcc 	andi	r9,r22,255
81110fe8:	90006026 	beq	r18,zero,8111116c <__muldf3+0x1d8>
81110fec:	0081ffc4 	movi	r2,2047
81110ff0:	2029883a 	mov	r20,r4
81110ff4:	90803626 	beq	r18,r2,811110d0 <__muldf3+0x13c>
81110ff8:	80800434 	orhi	r2,r16,16
81110ffc:	100490fa 	slli	r2,r2,3
81111000:	2020d77a 	srli	r16,r4,29
81111004:	202890fa 	slli	r20,r4,3
81111008:	94bf0044 	addi	r18,r18,-1023
8111100c:	80a0b03a 	or	r16,r16,r2
81111010:	0027883a 	mov	r19,zero
81111014:	0039883a 	mov	fp,zero
81111018:	3804d53a 	srli	r2,r7,20
8111101c:	382ed7fa 	srli	r23,r7,31
81111020:	04400434 	movhi	r17,16
81111024:	8c7fffc4 	addi	r17,r17,-1
81111028:	1081ffcc 	andi	r2,r2,2047
8111102c:	3011883a 	mov	r8,r6
81111030:	3c62703a 	and	r17,r7,r17
81111034:	ba803fcc 	andi	r10,r23,255
81111038:	10006d26 	beq	r2,zero,811111f0 <__muldf3+0x25c>
8111103c:	00c1ffc4 	movi	r3,2047
81111040:	10c06526 	beq	r2,r3,811111d8 <__muldf3+0x244>
81111044:	88c00434 	orhi	r3,r17,16
81111048:	180690fa 	slli	r3,r3,3
8111104c:	3022d77a 	srli	r17,r6,29
81111050:	301090fa 	slli	r8,r6,3
81111054:	10bf0044 	addi	r2,r2,-1023
81111058:	88e2b03a 	or	r17,r17,r3
8111105c:	000b883a 	mov	r5,zero
81111060:	9085883a 	add	r2,r18,r2
81111064:	2cc8b03a 	or	r4,r5,r19
81111068:	00c003c4 	movi	r3,15
8111106c:	bdacf03a 	xor	r22,r23,r22
81111070:	12c00044 	addi	r11,r2,1
81111074:	19009936 	bltu	r3,r4,811112dc <__muldf3+0x348>
81111078:	200890ba 	slli	r4,r4,2
8111107c:	00e04474 	movhi	r3,33041
81111080:	18c42404 	addi	r3,r3,4240
81111084:	20c9883a 	add	r4,r4,r3
81111088:	20c00017 	ldw	r3,0(r4)
8111108c:	1800683a 	jmp	r3
81111090:	811112dc 	xori	r4,r16,17483
81111094:	811110f0 	cmpltui	r4,r16,17475
81111098:	811110f0 	cmpltui	r4,r16,17475
8111109c:	811110ec 	andhi	r4,r16,17475
811110a0:	811112b8 	rdprs	r4,r16,17482
811110a4:	811112b8 	rdprs	r4,r16,17482
811110a8:	811112a0 	cmpeqi	r4,r16,17482
811110ac:	811110ec 	andhi	r4,r16,17475
811110b0:	811112b8 	rdprs	r4,r16,17482
811110b4:	811112a0 	cmpeqi	r4,r16,17482
811110b8:	811112b8 	rdprs	r4,r16,17482
811110bc:	811110ec 	andhi	r4,r16,17475
811110c0:	811112c8 	cmpgei	r4,r16,17483
811110c4:	811112c8 	cmpgei	r4,r16,17483
811110c8:	811112c8 	cmpgei	r4,r16,17483
811110cc:	811114e4 	muli	r4,r16,17491
811110d0:	2404b03a 	or	r2,r4,r16
811110d4:	10006f1e 	bne	r2,zero,81111294 <__muldf3+0x300>
811110d8:	04c00204 	movi	r19,8
811110dc:	0021883a 	mov	r16,zero
811110e0:	0029883a 	mov	r20,zero
811110e4:	07000084 	movi	fp,2
811110e8:	003fcb06 	br	81111018 <__reset+0xfb0f1018>
811110ec:	502d883a 	mov	r22,r10
811110f0:	00800084 	movi	r2,2
811110f4:	28805726 	beq	r5,r2,81111254 <__muldf3+0x2c0>
811110f8:	008000c4 	movi	r2,3
811110fc:	28816626 	beq	r5,r2,81111698 <__muldf3+0x704>
81111100:	00800044 	movi	r2,1
81111104:	2881411e 	bne	r5,r2,8111160c <__muldf3+0x678>
81111108:	b02b883a 	mov	r21,r22
8111110c:	0005883a 	mov	r2,zero
81111110:	000b883a 	mov	r5,zero
81111114:	0029883a 	mov	r20,zero
81111118:	1004953a 	slli	r2,r2,20
8111111c:	a8c03fcc 	andi	r3,r21,255
81111120:	04400434 	movhi	r17,16
81111124:	8c7fffc4 	addi	r17,r17,-1
81111128:	180697fa 	slli	r3,r3,31
8111112c:	2c4a703a 	and	r5,r5,r17
81111130:	288ab03a 	or	r5,r5,r2
81111134:	28c6b03a 	or	r3,r5,r3
81111138:	a005883a 	mov	r2,r20
8111113c:	dfc00c17 	ldw	ra,48(sp)
81111140:	df000b17 	ldw	fp,44(sp)
81111144:	ddc00a17 	ldw	r23,40(sp)
81111148:	dd800917 	ldw	r22,36(sp)
8111114c:	dd400817 	ldw	r21,32(sp)
81111150:	dd000717 	ldw	r20,28(sp)
81111154:	dcc00617 	ldw	r19,24(sp)
81111158:	dc800517 	ldw	r18,20(sp)
8111115c:	dc400417 	ldw	r17,16(sp)
81111160:	dc000317 	ldw	r16,12(sp)
81111164:	dec00d04 	addi	sp,sp,52
81111168:	f800283a 	ret
8111116c:	2404b03a 	or	r2,r4,r16
81111170:	2027883a 	mov	r19,r4
81111174:	10004226 	beq	r2,zero,81111280 <__muldf3+0x2ec>
81111178:	8000fc26 	beq	r16,zero,8111156c <__muldf3+0x5d8>
8111117c:	8009883a 	mov	r4,r16
81111180:	d9800215 	stw	r6,8(sp)
81111184:	d9c00015 	stw	r7,0(sp)
81111188:	da400115 	stw	r9,4(sp)
8111118c:	11119740 	call	81111974 <__clzsi2>
81111190:	d9800217 	ldw	r6,8(sp)
81111194:	d9c00017 	ldw	r7,0(sp)
81111198:	da400117 	ldw	r9,4(sp)
8111119c:	113ffd44 	addi	r4,r2,-11
811111a0:	00c00704 	movi	r3,28
811111a4:	1900ed16 	blt	r3,r4,8111155c <__muldf3+0x5c8>
811111a8:	00c00744 	movi	r3,29
811111ac:	147ffe04 	addi	r17,r2,-8
811111b0:	1907c83a 	sub	r3,r3,r4
811111b4:	8460983a 	sll	r16,r16,r17
811111b8:	98c6d83a 	srl	r3,r19,r3
811111bc:	9c68983a 	sll	r20,r19,r17
811111c0:	1c20b03a 	or	r16,r3,r16
811111c4:	1080fcc4 	addi	r2,r2,1011
811111c8:	00a5c83a 	sub	r18,zero,r2
811111cc:	0027883a 	mov	r19,zero
811111d0:	0039883a 	mov	fp,zero
811111d4:	003f9006 	br	81111018 <__reset+0xfb0f1018>
811111d8:	3446b03a 	or	r3,r6,r17
811111dc:	1800261e 	bne	r3,zero,81111278 <__muldf3+0x2e4>
811111e0:	0023883a 	mov	r17,zero
811111e4:	0011883a 	mov	r8,zero
811111e8:	01400084 	movi	r5,2
811111ec:	003f9c06 	br	81111060 <__reset+0xfb0f1060>
811111f0:	3446b03a 	or	r3,r6,r17
811111f4:	18001c26 	beq	r3,zero,81111268 <__muldf3+0x2d4>
811111f8:	8800ce26 	beq	r17,zero,81111534 <__muldf3+0x5a0>
811111fc:	8809883a 	mov	r4,r17
81111200:	d9800215 	stw	r6,8(sp)
81111204:	da400115 	stw	r9,4(sp)
81111208:	da800015 	stw	r10,0(sp)
8111120c:	11119740 	call	81111974 <__clzsi2>
81111210:	d9800217 	ldw	r6,8(sp)
81111214:	da400117 	ldw	r9,4(sp)
81111218:	da800017 	ldw	r10,0(sp)
8111121c:	113ffd44 	addi	r4,r2,-11
81111220:	00c00704 	movi	r3,28
81111224:	1900bf16 	blt	r3,r4,81111524 <__muldf3+0x590>
81111228:	00c00744 	movi	r3,29
8111122c:	123ffe04 	addi	r8,r2,-8
81111230:	1907c83a 	sub	r3,r3,r4
81111234:	8a22983a 	sll	r17,r17,r8
81111238:	30c6d83a 	srl	r3,r6,r3
8111123c:	3210983a 	sll	r8,r6,r8
81111240:	1c62b03a 	or	r17,r3,r17
81111244:	1080fcc4 	addi	r2,r2,1011
81111248:	0085c83a 	sub	r2,zero,r2
8111124c:	000b883a 	mov	r5,zero
81111250:	003f8306 	br	81111060 <__reset+0xfb0f1060>
81111254:	b02b883a 	mov	r21,r22
81111258:	0081ffc4 	movi	r2,2047
8111125c:	000b883a 	mov	r5,zero
81111260:	0029883a 	mov	r20,zero
81111264:	003fac06 	br	81111118 <__reset+0xfb0f1118>
81111268:	0023883a 	mov	r17,zero
8111126c:	0011883a 	mov	r8,zero
81111270:	01400044 	movi	r5,1
81111274:	003f7a06 	br	81111060 <__reset+0xfb0f1060>
81111278:	014000c4 	movi	r5,3
8111127c:	003f7806 	br	81111060 <__reset+0xfb0f1060>
81111280:	04c00104 	movi	r19,4
81111284:	0021883a 	mov	r16,zero
81111288:	0029883a 	mov	r20,zero
8111128c:	07000044 	movi	fp,1
81111290:	003f6106 	br	81111018 <__reset+0xfb0f1018>
81111294:	04c00304 	movi	r19,12
81111298:	070000c4 	movi	fp,3
8111129c:	003f5e06 	br	81111018 <__reset+0xfb0f1018>
811112a0:	01400434 	movhi	r5,16
811112a4:	002b883a 	mov	r21,zero
811112a8:	297fffc4 	addi	r5,r5,-1
811112ac:	053fffc4 	movi	r20,-1
811112b0:	0081ffc4 	movi	r2,2047
811112b4:	003f9806 	br	81111118 <__reset+0xfb0f1118>
811112b8:	8023883a 	mov	r17,r16
811112bc:	a011883a 	mov	r8,r20
811112c0:	e00b883a 	mov	r5,fp
811112c4:	003f8a06 	br	811110f0 <__reset+0xfb0f10f0>
811112c8:	8023883a 	mov	r17,r16
811112cc:	a011883a 	mov	r8,r20
811112d0:	482d883a 	mov	r22,r9
811112d4:	e00b883a 	mov	r5,fp
811112d8:	003f8506 	br	811110f0 <__reset+0xfb0f10f0>
811112dc:	a00ad43a 	srli	r5,r20,16
811112e0:	401ad43a 	srli	r13,r8,16
811112e4:	a53fffcc 	andi	r20,r20,65535
811112e8:	423fffcc 	andi	r8,r8,65535
811112ec:	4519383a 	mul	r12,r8,r20
811112f0:	4147383a 	mul	r3,r8,r5
811112f4:	6d09383a 	mul	r4,r13,r20
811112f8:	600cd43a 	srli	r6,r12,16
811112fc:	2b5d383a 	mul	r14,r5,r13
81111300:	20c9883a 	add	r4,r4,r3
81111304:	310d883a 	add	r6,r6,r4
81111308:	30c0022e 	bgeu	r6,r3,81111314 <__muldf3+0x380>
8111130c:	00c00074 	movhi	r3,1
81111310:	70dd883a 	add	r14,r14,r3
81111314:	8826d43a 	srli	r19,r17,16
81111318:	8bffffcc 	andi	r15,r17,65535
8111131c:	7d23383a 	mul	r17,r15,r20
81111320:	7949383a 	mul	r4,r15,r5
81111324:	9d29383a 	mul	r20,r19,r20
81111328:	8814d43a 	srli	r10,r17,16
8111132c:	3012943a 	slli	r9,r6,16
81111330:	a129883a 	add	r20,r20,r4
81111334:	633fffcc 	andi	r12,r12,65535
81111338:	5515883a 	add	r10,r10,r20
8111133c:	3006d43a 	srli	r3,r6,16
81111340:	4b13883a 	add	r9,r9,r12
81111344:	2ccb383a 	mul	r5,r5,r19
81111348:	5100022e 	bgeu	r10,r4,81111354 <__muldf3+0x3c0>
8111134c:	01000074 	movhi	r4,1
81111350:	290b883a 	add	r5,r5,r4
81111354:	802ad43a 	srli	r21,r16,16
81111358:	843fffcc 	andi	r16,r16,65535
8111135c:	440d383a 	mul	r6,r8,r16
81111360:	4565383a 	mul	r18,r8,r21
81111364:	8349383a 	mul	r4,r16,r13
81111368:	500e943a 	slli	r7,r10,16
8111136c:	3010d43a 	srli	r8,r6,16
81111370:	5028d43a 	srli	r20,r10,16
81111374:	2489883a 	add	r4,r4,r18
81111378:	8abfffcc 	andi	r10,r17,65535
8111137c:	3a95883a 	add	r10,r7,r10
81111380:	4119883a 	add	r12,r8,r4
81111384:	a169883a 	add	r20,r20,r5
81111388:	1a87883a 	add	r3,r3,r10
8111138c:	6d5b383a 	mul	r13,r13,r21
81111390:	6480022e 	bgeu	r12,r18,8111139c <__muldf3+0x408>
81111394:	01000074 	movhi	r4,1
81111398:	691b883a 	add	r13,r13,r4
8111139c:	7c25383a 	mul	r18,r15,r16
811113a0:	7d4b383a 	mul	r5,r15,r21
811113a4:	84cf383a 	mul	r7,r16,r19
811113a8:	901ed43a 	srli	r15,r18,16
811113ac:	6008d43a 	srli	r4,r12,16
811113b0:	6010943a 	slli	r8,r12,16
811113b4:	394f883a 	add	r7,r7,r5
811113b8:	333fffcc 	andi	r12,r6,65535
811113bc:	79df883a 	add	r15,r15,r7
811113c0:	235b883a 	add	r13,r4,r13
811113c4:	9d63383a 	mul	r17,r19,r21
811113c8:	4309883a 	add	r4,r8,r12
811113cc:	7940022e 	bgeu	r15,r5,811113d8 <__muldf3+0x444>
811113d0:	01400074 	movhi	r5,1
811113d4:	8963883a 	add	r17,r17,r5
811113d8:	780a943a 	slli	r5,r15,16
811113dc:	91bfffcc 	andi	r6,r18,65535
811113e0:	70c7883a 	add	r3,r14,r3
811113e4:	298d883a 	add	r6,r5,r6
811113e8:	1a8f803a 	cmpltu	r7,r3,r10
811113ec:	350b883a 	add	r5,r6,r20
811113f0:	20c7883a 	add	r3,r4,r3
811113f4:	3955883a 	add	r10,r7,r5
811113f8:	1909803a 	cmpltu	r4,r3,r4
811113fc:	6a91883a 	add	r8,r13,r10
81111400:	780cd43a 	srli	r6,r15,16
81111404:	2219883a 	add	r12,r4,r8
81111408:	2d0b803a 	cmpltu	r5,r5,r20
8111140c:	51cf803a 	cmpltu	r7,r10,r7
81111410:	29ceb03a 	or	r7,r5,r7
81111414:	4351803a 	cmpltu	r8,r8,r13
81111418:	610b803a 	cmpltu	r5,r12,r4
8111141c:	4148b03a 	or	r4,r8,r5
81111420:	398f883a 	add	r7,r7,r6
81111424:	3909883a 	add	r4,r7,r4
81111428:	1810927a 	slli	r8,r3,9
8111142c:	2449883a 	add	r4,r4,r17
81111430:	2008927a 	slli	r4,r4,9
81111434:	6022d5fa 	srli	r17,r12,23
81111438:	1806d5fa 	srli	r3,r3,23
8111143c:	4252b03a 	or	r9,r8,r9
81111440:	600a927a 	slli	r5,r12,9
81111444:	4810c03a 	cmpne	r8,r9,zero
81111448:	2462b03a 	or	r17,r4,r17
8111144c:	40c6b03a 	or	r3,r8,r3
81111450:	8900402c 	andhi	r4,r17,256
81111454:	1950b03a 	or	r8,r3,r5
81111458:	20000726 	beq	r4,zero,81111478 <__muldf3+0x4e4>
8111145c:	4006d07a 	srli	r3,r8,1
81111460:	880497fa 	slli	r2,r17,31
81111464:	4200004c 	andi	r8,r8,1
81111468:	8822d07a 	srli	r17,r17,1
8111146c:	1a10b03a 	or	r8,r3,r8
81111470:	1210b03a 	or	r8,r2,r8
81111474:	5805883a 	mov	r2,r11
81111478:	1140ffc4 	addi	r5,r2,1023
8111147c:	0140440e 	bge	zero,r5,81111590 <__muldf3+0x5fc>
81111480:	40c001cc 	andi	r3,r8,7
81111484:	18000726 	beq	r3,zero,811114a4 <__muldf3+0x510>
81111488:	40c003cc 	andi	r3,r8,15
8111148c:	01000104 	movi	r4,4
81111490:	19000426 	beq	r3,r4,811114a4 <__muldf3+0x510>
81111494:	4107883a 	add	r3,r8,r4
81111498:	1a11803a 	cmpltu	r8,r3,r8
8111149c:	8a23883a 	add	r17,r17,r8
811114a0:	1811883a 	mov	r8,r3
811114a4:	88c0402c 	andhi	r3,r17,256
811114a8:	18000426 	beq	r3,zero,811114bc <__muldf3+0x528>
811114ac:	11410004 	addi	r5,r2,1024
811114b0:	00bfc034 	movhi	r2,65280
811114b4:	10bfffc4 	addi	r2,r2,-1
811114b8:	88a2703a 	and	r17,r17,r2
811114bc:	0081ff84 	movi	r2,2046
811114c0:	117f6416 	blt	r2,r5,81111254 <__reset+0xfb0f1254>
811114c4:	8828977a 	slli	r20,r17,29
811114c8:	4010d0fa 	srli	r8,r8,3
811114cc:	8822927a 	slli	r17,r17,9
811114d0:	2881ffcc 	andi	r2,r5,2047
811114d4:	a228b03a 	or	r20,r20,r8
811114d8:	880ad33a 	srli	r5,r17,12
811114dc:	b02b883a 	mov	r21,r22
811114e0:	003f0d06 	br	81111118 <__reset+0xfb0f1118>
811114e4:	8080022c 	andhi	r2,r16,8
811114e8:	10000926 	beq	r2,zero,81111510 <__muldf3+0x57c>
811114ec:	8880022c 	andhi	r2,r17,8
811114f0:	1000071e 	bne	r2,zero,81111510 <__muldf3+0x57c>
811114f4:	00800434 	movhi	r2,16
811114f8:	89400234 	orhi	r5,r17,8
811114fc:	10bfffc4 	addi	r2,r2,-1
81111500:	b82b883a 	mov	r21,r23
81111504:	288a703a 	and	r5,r5,r2
81111508:	4029883a 	mov	r20,r8
8111150c:	003f6806 	br	811112b0 <__reset+0xfb0f12b0>
81111510:	00800434 	movhi	r2,16
81111514:	81400234 	orhi	r5,r16,8
81111518:	10bfffc4 	addi	r2,r2,-1
8111151c:	288a703a 	and	r5,r5,r2
81111520:	003f6306 	br	811112b0 <__reset+0xfb0f12b0>
81111524:	147ff604 	addi	r17,r2,-40
81111528:	3462983a 	sll	r17,r6,r17
8111152c:	0011883a 	mov	r8,zero
81111530:	003f4406 	br	81111244 <__reset+0xfb0f1244>
81111534:	3009883a 	mov	r4,r6
81111538:	d9800215 	stw	r6,8(sp)
8111153c:	da400115 	stw	r9,4(sp)
81111540:	da800015 	stw	r10,0(sp)
81111544:	11119740 	call	81111974 <__clzsi2>
81111548:	10800804 	addi	r2,r2,32
8111154c:	da800017 	ldw	r10,0(sp)
81111550:	da400117 	ldw	r9,4(sp)
81111554:	d9800217 	ldw	r6,8(sp)
81111558:	003f3006 	br	8111121c <__reset+0xfb0f121c>
8111155c:	143ff604 	addi	r16,r2,-40
81111560:	9c20983a 	sll	r16,r19,r16
81111564:	0029883a 	mov	r20,zero
81111568:	003f1606 	br	811111c4 <__reset+0xfb0f11c4>
8111156c:	d9800215 	stw	r6,8(sp)
81111570:	d9c00015 	stw	r7,0(sp)
81111574:	da400115 	stw	r9,4(sp)
81111578:	11119740 	call	81111974 <__clzsi2>
8111157c:	10800804 	addi	r2,r2,32
81111580:	da400117 	ldw	r9,4(sp)
81111584:	d9c00017 	ldw	r7,0(sp)
81111588:	d9800217 	ldw	r6,8(sp)
8111158c:	003f0306 	br	8111119c <__reset+0xfb0f119c>
81111590:	00c00044 	movi	r3,1
81111594:	1947c83a 	sub	r3,r3,r5
81111598:	00800e04 	movi	r2,56
8111159c:	10feda16 	blt	r2,r3,81111108 <__reset+0xfb0f1108>
811115a0:	008007c4 	movi	r2,31
811115a4:	10c01b16 	blt	r2,r3,81111614 <__muldf3+0x680>
811115a8:	00800804 	movi	r2,32
811115ac:	10c5c83a 	sub	r2,r2,r3
811115b0:	888a983a 	sll	r5,r17,r2
811115b4:	40c8d83a 	srl	r4,r8,r3
811115b8:	4084983a 	sll	r2,r8,r2
811115bc:	88e2d83a 	srl	r17,r17,r3
811115c0:	2906b03a 	or	r3,r5,r4
811115c4:	1004c03a 	cmpne	r2,r2,zero
811115c8:	1886b03a 	or	r3,r3,r2
811115cc:	188001cc 	andi	r2,r3,7
811115d0:	10000726 	beq	r2,zero,811115f0 <__muldf3+0x65c>
811115d4:	188003cc 	andi	r2,r3,15
811115d8:	01000104 	movi	r4,4
811115dc:	11000426 	beq	r2,r4,811115f0 <__muldf3+0x65c>
811115e0:	1805883a 	mov	r2,r3
811115e4:	10c00104 	addi	r3,r2,4
811115e8:	1885803a 	cmpltu	r2,r3,r2
811115ec:	88a3883a 	add	r17,r17,r2
811115f0:	8880202c 	andhi	r2,r17,128
811115f4:	10001c26 	beq	r2,zero,81111668 <__muldf3+0x6d4>
811115f8:	b02b883a 	mov	r21,r22
811115fc:	00800044 	movi	r2,1
81111600:	000b883a 	mov	r5,zero
81111604:	0029883a 	mov	r20,zero
81111608:	003ec306 	br	81111118 <__reset+0xfb0f1118>
8111160c:	5805883a 	mov	r2,r11
81111610:	003f9906 	br	81111478 <__reset+0xfb0f1478>
81111614:	00bff844 	movi	r2,-31
81111618:	1145c83a 	sub	r2,r2,r5
8111161c:	8888d83a 	srl	r4,r17,r2
81111620:	00800804 	movi	r2,32
81111624:	18801a26 	beq	r3,r2,81111690 <__muldf3+0x6fc>
81111628:	00801004 	movi	r2,64
8111162c:	10c5c83a 	sub	r2,r2,r3
81111630:	8884983a 	sll	r2,r17,r2
81111634:	1204b03a 	or	r2,r2,r8
81111638:	1004c03a 	cmpne	r2,r2,zero
8111163c:	2084b03a 	or	r2,r4,r2
81111640:	144001cc 	andi	r17,r2,7
81111644:	88000d1e 	bne	r17,zero,8111167c <__muldf3+0x6e8>
81111648:	000b883a 	mov	r5,zero
8111164c:	1028d0fa 	srli	r20,r2,3
81111650:	b02b883a 	mov	r21,r22
81111654:	0005883a 	mov	r2,zero
81111658:	a468b03a 	or	r20,r20,r17
8111165c:	003eae06 	br	81111118 <__reset+0xfb0f1118>
81111660:	1007883a 	mov	r3,r2
81111664:	0023883a 	mov	r17,zero
81111668:	880a927a 	slli	r5,r17,9
8111166c:	1805883a 	mov	r2,r3
81111670:	8822977a 	slli	r17,r17,29
81111674:	280ad33a 	srli	r5,r5,12
81111678:	003ff406 	br	8111164c <__reset+0xfb0f164c>
8111167c:	10c003cc 	andi	r3,r2,15
81111680:	01000104 	movi	r4,4
81111684:	193ff626 	beq	r3,r4,81111660 <__reset+0xfb0f1660>
81111688:	0023883a 	mov	r17,zero
8111168c:	003fd506 	br	811115e4 <__reset+0xfb0f15e4>
81111690:	0005883a 	mov	r2,zero
81111694:	003fe706 	br	81111634 <__reset+0xfb0f1634>
81111698:	00800434 	movhi	r2,16
8111169c:	89400234 	orhi	r5,r17,8
811116a0:	10bfffc4 	addi	r2,r2,-1
811116a4:	b02b883a 	mov	r21,r22
811116a8:	288a703a 	and	r5,r5,r2
811116ac:	4029883a 	mov	r20,r8
811116b0:	003eff06 	br	811112b0 <__reset+0xfb0f12b0>

811116b4 <__extendsfdf2>:
811116b4:	200ad5fa 	srli	r5,r4,23
811116b8:	defffd04 	addi	sp,sp,-12
811116bc:	de00012e 	bgeu	sp,et,811116c4 <__extendsfdf2+0x10>
811116c0:	003b68fa 	trap	3
811116c4:	29403fcc 	andi	r5,r5,255
811116c8:	dc400115 	stw	r17,4(sp)
811116cc:	29800044 	addi	r6,r5,1
811116d0:	04402034 	movhi	r17,128
811116d4:	dc000015 	stw	r16,0(sp)
811116d8:	8c7fffc4 	addi	r17,r17,-1
811116dc:	dfc00215 	stw	ra,8(sp)
811116e0:	31803fcc 	andi	r6,r6,255
811116e4:	00800044 	movi	r2,1
811116e8:	8922703a 	and	r17,r17,r4
811116ec:	2020d7fa 	srli	r16,r4,31
811116f0:	1180110e 	bge	r2,r6,81111738 <__extendsfdf2+0x84>
811116f4:	880cd0fa 	srli	r6,r17,3
811116f8:	8822977a 	slli	r17,r17,29
811116fc:	2940e004 	addi	r5,r5,896
81111700:	2941ffcc 	andi	r5,r5,2047
81111704:	2804953a 	slli	r2,r5,20
81111708:	01400434 	movhi	r5,16
8111170c:	800697fa 	slli	r3,r16,31
81111710:	297fffc4 	addi	r5,r5,-1
81111714:	314a703a 	and	r5,r6,r5
81111718:	288ab03a 	or	r5,r5,r2
8111171c:	28c6b03a 	or	r3,r5,r3
81111720:	8805883a 	mov	r2,r17
81111724:	dfc00217 	ldw	ra,8(sp)
81111728:	dc400117 	ldw	r17,4(sp)
8111172c:	dc000017 	ldw	r16,0(sp)
81111730:	dec00304 	addi	sp,sp,12
81111734:	f800283a 	ret
81111738:	2800111e 	bne	r5,zero,81111780 <__extendsfdf2+0xcc>
8111173c:	88001c26 	beq	r17,zero,811117b0 <__extendsfdf2+0xfc>
81111740:	8809883a 	mov	r4,r17
81111744:	11119740 	call	81111974 <__clzsi2>
81111748:	00c00284 	movi	r3,10
8111174c:	18801b16 	blt	r3,r2,811117bc <__extendsfdf2+0x108>
81111750:	018002c4 	movi	r6,11
81111754:	308dc83a 	sub	r6,r6,r2
81111758:	11000544 	addi	r4,r2,21
8111175c:	8986d83a 	srl	r3,r17,r6
81111760:	8922983a 	sll	r17,r17,r4
81111764:	0180e244 	movi	r6,905
81111768:	01400434 	movhi	r5,16
8111176c:	3085c83a 	sub	r2,r6,r2
81111770:	297fffc4 	addi	r5,r5,-1
81111774:	194c703a 	and	r6,r3,r5
81111778:	1141ffcc 	andi	r5,r2,2047
8111177c:	003fe006 	br	81111700 <__reset+0xfb0f1700>
81111780:	88000826 	beq	r17,zero,811117a4 <__extendsfdf2+0xf0>
81111784:	880cd0fa 	srli	r6,r17,3
81111788:	00800434 	movhi	r2,16
8111178c:	10bfffc4 	addi	r2,r2,-1
81111790:	31800234 	orhi	r6,r6,8
81111794:	8822977a 	slli	r17,r17,29
81111798:	308c703a 	and	r6,r6,r2
8111179c:	0141ffc4 	movi	r5,2047
811117a0:	003fd706 	br	81111700 <__reset+0xfb0f1700>
811117a4:	0141ffc4 	movi	r5,2047
811117a8:	000d883a 	mov	r6,zero
811117ac:	003fd406 	br	81111700 <__reset+0xfb0f1700>
811117b0:	000b883a 	mov	r5,zero
811117b4:	000d883a 	mov	r6,zero
811117b8:	003fd106 	br	81111700 <__reset+0xfb0f1700>
811117bc:	11bffd44 	addi	r6,r2,-11
811117c0:	8986983a 	sll	r3,r17,r6
811117c4:	0023883a 	mov	r17,zero
811117c8:	003fe606 	br	81111764 <__reset+0xfb0f1764>

811117cc <__truncdfsf2>:
811117cc:	2810d53a 	srli	r8,r5,20
811117d0:	01c00434 	movhi	r7,16
811117d4:	39ffffc4 	addi	r7,r7,-1
811117d8:	29ce703a 	and	r7,r5,r7
811117dc:	4201ffcc 	andi	r8,r8,2047
811117e0:	380e90fa 	slli	r7,r7,3
811117e4:	200cd77a 	srli	r6,r4,29
811117e8:	42400044 	addi	r9,r8,1
811117ec:	4a41ffcc 	andi	r9,r9,2047
811117f0:	00c00044 	movi	r3,1
811117f4:	280ad7fa 	srli	r5,r5,31
811117f8:	31ceb03a 	or	r7,r6,r7
811117fc:	200490fa 	slli	r2,r4,3
81111800:	1a40230e 	bge	r3,r9,81111890 <__truncdfsf2+0xc4>
81111804:	40ff2004 	addi	r3,r8,-896
81111808:	01803f84 	movi	r6,254
8111180c:	30c01516 	blt	r6,r3,81111864 <__truncdfsf2+0x98>
81111810:	00c0380e 	bge	zero,r3,811118f4 <__truncdfsf2+0x128>
81111814:	200c91ba 	slli	r6,r4,6
81111818:	380e90fa 	slli	r7,r7,3
8111181c:	1004d77a 	srli	r2,r2,29
81111820:	300cc03a 	cmpne	r6,r6,zero
81111824:	31ccb03a 	or	r6,r6,r7
81111828:	308cb03a 	or	r6,r6,r2
8111182c:	308001cc 	andi	r2,r6,7
81111830:	10000426 	beq	r2,zero,81111844 <__truncdfsf2+0x78>
81111834:	308003cc 	andi	r2,r6,15
81111838:	01000104 	movi	r4,4
8111183c:	11000126 	beq	r2,r4,81111844 <__truncdfsf2+0x78>
81111840:	31800104 	addi	r6,r6,4
81111844:	3081002c 	andhi	r2,r6,1024
81111848:	10001626 	beq	r2,zero,811118a4 <__truncdfsf2+0xd8>
8111184c:	18c00044 	addi	r3,r3,1
81111850:	00803fc4 	movi	r2,255
81111854:	18800326 	beq	r3,r2,81111864 <__truncdfsf2+0x98>
81111858:	300c91ba 	slli	r6,r6,6
8111185c:	300cd27a 	srli	r6,r6,9
81111860:	00000206 	br	8111186c <__truncdfsf2+0xa0>
81111864:	00ffffc4 	movi	r3,-1
81111868:	000d883a 	mov	r6,zero
8111186c:	18c03fcc 	andi	r3,r3,255
81111870:	180895fa 	slli	r4,r3,23
81111874:	00c02034 	movhi	r3,128
81111878:	280a97fa 	slli	r5,r5,31
8111187c:	18ffffc4 	addi	r3,r3,-1
81111880:	30c6703a 	and	r3,r6,r3
81111884:	1906b03a 	or	r3,r3,r4
81111888:	1944b03a 	or	r2,r3,r5
8111188c:	f800283a 	ret
81111890:	40000b1e 	bne	r8,zero,811118c0 <__truncdfsf2+0xf4>
81111894:	388cb03a 	or	r6,r7,r2
81111898:	0007883a 	mov	r3,zero
8111189c:	30000426 	beq	r6,zero,811118b0 <__truncdfsf2+0xe4>
811118a0:	01800144 	movi	r6,5
811118a4:	00803fc4 	movi	r2,255
811118a8:	300cd0fa 	srli	r6,r6,3
811118ac:	18800a26 	beq	r3,r2,811118d8 <__truncdfsf2+0x10c>
811118b0:	00802034 	movhi	r2,128
811118b4:	10bfffc4 	addi	r2,r2,-1
811118b8:	308c703a 	and	r6,r6,r2
811118bc:	003feb06 	br	8111186c <__reset+0xfb0f186c>
811118c0:	3888b03a 	or	r4,r7,r2
811118c4:	203fe726 	beq	r4,zero,81111864 <__reset+0xfb0f1864>
811118c8:	380c90fa 	slli	r6,r7,3
811118cc:	00c03fc4 	movi	r3,255
811118d0:	31808034 	orhi	r6,r6,512
811118d4:	003fd506 	br	8111182c <__reset+0xfb0f182c>
811118d8:	303fe226 	beq	r6,zero,81111864 <__reset+0xfb0f1864>
811118dc:	00802034 	movhi	r2,128
811118e0:	31801034 	orhi	r6,r6,64
811118e4:	10bfffc4 	addi	r2,r2,-1
811118e8:	00ffffc4 	movi	r3,-1
811118ec:	308c703a 	and	r6,r6,r2
811118f0:	003fde06 	br	8111186c <__reset+0xfb0f186c>
811118f4:	013ffa44 	movi	r4,-23
811118f8:	19000e16 	blt	r3,r4,81111934 <__truncdfsf2+0x168>
811118fc:	01000784 	movi	r4,30
81111900:	20c9c83a 	sub	r4,r4,r3
81111904:	018007c4 	movi	r6,31
81111908:	39c02034 	orhi	r7,r7,128
8111190c:	31000b16 	blt	r6,r4,8111193c <__truncdfsf2+0x170>
81111910:	423f2084 	addi	r8,r8,-894
81111914:	120c983a 	sll	r6,r2,r8
81111918:	3a0e983a 	sll	r7,r7,r8
8111191c:	1104d83a 	srl	r2,r2,r4
81111920:	300cc03a 	cmpne	r6,r6,zero
81111924:	31ceb03a 	or	r7,r6,r7
81111928:	388cb03a 	or	r6,r7,r2
8111192c:	0007883a 	mov	r3,zero
81111930:	003fbe06 	br	8111182c <__reset+0xfb0f182c>
81111934:	0007883a 	mov	r3,zero
81111938:	003fd906 	br	811118a0 <__reset+0xfb0f18a0>
8111193c:	01bfff84 	movi	r6,-2
81111940:	30cdc83a 	sub	r6,r6,r3
81111944:	00c00804 	movi	r3,32
81111948:	398cd83a 	srl	r6,r7,r6
8111194c:	20c00726 	beq	r4,r3,8111196c <__truncdfsf2+0x1a0>
81111950:	423f2884 	addi	r8,r8,-862
81111954:	3a0e983a 	sll	r7,r7,r8
81111958:	3884b03a 	or	r2,r7,r2
8111195c:	1004c03a 	cmpne	r2,r2,zero
81111960:	118cb03a 	or	r6,r2,r6
81111964:	0007883a 	mov	r3,zero
81111968:	003fb006 	br	8111182c <__reset+0xfb0f182c>
8111196c:	000f883a 	mov	r7,zero
81111970:	003ff906 	br	81111958 <__reset+0xfb0f1958>

81111974 <__clzsi2>:
81111974:	00bfffd4 	movui	r2,65535
81111978:	11000536 	bltu	r2,r4,81111990 <__clzsi2+0x1c>
8111197c:	00803fc4 	movi	r2,255
81111980:	11000f36 	bltu	r2,r4,811119c0 <__clzsi2+0x4c>
81111984:	00800804 	movi	r2,32
81111988:	0007883a 	mov	r3,zero
8111198c:	00000506 	br	811119a4 <__clzsi2+0x30>
81111990:	00804034 	movhi	r2,256
81111994:	10bfffc4 	addi	r2,r2,-1
81111998:	11000c2e 	bgeu	r2,r4,811119cc <__clzsi2+0x58>
8111199c:	00800204 	movi	r2,8
811119a0:	00c00604 	movi	r3,24
811119a4:	20c8d83a 	srl	r4,r4,r3
811119a8:	00e04534 	movhi	r3,33044
811119ac:	18f8de04 	addi	r3,r3,-7304
811119b0:	1909883a 	add	r4,r3,r4
811119b4:	20c00003 	ldbu	r3,0(r4)
811119b8:	10c5c83a 	sub	r2,r2,r3
811119bc:	f800283a 	ret
811119c0:	00800604 	movi	r2,24
811119c4:	00c00204 	movi	r3,8
811119c8:	003ff606 	br	811119a4 <__reset+0xfb0f19a4>
811119cc:	00800404 	movi	r2,16
811119d0:	1007883a 	mov	r3,r2
811119d4:	003ff306 	br	811119a4 <__reset+0xfb0f19a4>

811119d8 <atoi>:
811119d8:	01800284 	movi	r6,10
811119dc:	000b883a 	mov	r5,zero
811119e0:	11137881 	jmpi	81113788 <strtol>

811119e4 <_atoi_r>:
811119e4:	01c00284 	movi	r7,10
811119e8:	000d883a 	mov	r6,zero
811119ec:	11135481 	jmpi	81113548 <_strtol_r>

811119f0 <_fopen_r>:
811119f0:	defffa04 	addi	sp,sp,-24
811119f4:	3005883a 	mov	r2,r6
811119f8:	de00012e 	bgeu	sp,et,81111a00 <_fopen_r+0x10>
811119fc:	003b68fa 	trap	3
81111a00:	d80d883a 	mov	r6,sp
81111a04:	dcc00415 	stw	r19,16(sp)
81111a08:	2827883a 	mov	r19,r5
81111a0c:	100b883a 	mov	r5,r2
81111a10:	dc800315 	stw	r18,12(sp)
81111a14:	dfc00515 	stw	ra,20(sp)
81111a18:	dc400215 	stw	r17,8(sp)
81111a1c:	dc000115 	stw	r16,4(sp)
81111a20:	2025883a 	mov	r18,r4
81111a24:	111b6300 	call	8111b630 <__sflags>
81111a28:	10002726 	beq	r2,zero,81111ac8 <_fopen_r+0xd8>
81111a2c:	9009883a 	mov	r4,r18
81111a30:	1023883a 	mov	r17,r2
81111a34:	111b4a80 	call	8111b4a8 <__sfp>
81111a38:	1021883a 	mov	r16,r2
81111a3c:	10002226 	beq	r2,zero,81111ac8 <_fopen_r+0xd8>
81111a40:	d9800017 	ldw	r6,0(sp)
81111a44:	01c06d84 	movi	r7,438
81111a48:	980b883a 	mov	r5,r19
81111a4c:	9009883a 	mov	r4,r18
81111a50:	1112dac0 	call	81112dac <_open_r>
81111a54:	10001916 	blt	r2,zero,81111abc <_fopen_r+0xcc>
81111a58:	8080038d 	sth	r2,14(r16)
81111a5c:	00a04474 	movhi	r2,33041
81111a60:	108cc404 	addi	r2,r2,13072
81111a64:	80800815 	stw	r2,32(r16)
81111a68:	00a04474 	movhi	r2,33041
81111a6c:	108cdd04 	addi	r2,r2,13172
81111a70:	80800915 	stw	r2,36(r16)
81111a74:	00a04474 	movhi	r2,33041
81111a78:	108cfe04 	addi	r2,r2,13304
81111a7c:	80800a15 	stw	r2,40(r16)
81111a80:	00a04474 	movhi	r2,33041
81111a84:	108d1704 	addi	r2,r2,13404
81111a88:	8440030d 	sth	r17,12(r16)
81111a8c:	84000715 	stw	r16,28(r16)
81111a90:	80800b15 	stw	r2,44(r16)
81111a94:	8c40400c 	andi	r17,r17,256
81111a98:	88000d1e 	bne	r17,zero,81111ad0 <_fopen_r+0xe0>
81111a9c:	8005883a 	mov	r2,r16
81111aa0:	dfc00517 	ldw	ra,20(sp)
81111aa4:	dcc00417 	ldw	r19,16(sp)
81111aa8:	dc800317 	ldw	r18,12(sp)
81111aac:	dc400217 	ldw	r17,8(sp)
81111ab0:	dc000117 	ldw	r16,4(sp)
81111ab4:	dec00604 	addi	sp,sp,24
81111ab8:	f800283a 	ret
81111abc:	111b5f00 	call	8111b5f0 <__sfp_lock_acquire>
81111ac0:	8000030d 	sth	zero,12(r16)
81111ac4:	111b5f40 	call	8111b5f4 <__sfp_lock_release>
81111ac8:	0005883a 	mov	r2,zero
81111acc:	003ff406 	br	81111aa0 <__reset+0xfb0f1aa0>
81111ad0:	01c00084 	movi	r7,2
81111ad4:	000d883a 	mov	r6,zero
81111ad8:	800b883a 	mov	r5,r16
81111adc:	9009883a 	mov	r4,r18
81111ae0:	1111b600 	call	81111b60 <_fseek_r>
81111ae4:	8005883a 	mov	r2,r16
81111ae8:	003fed06 	br	81111aa0 <__reset+0xfb0f1aa0>

81111aec <fopen>:
81111aec:	00a04534 	movhi	r2,33044
81111af0:	1082cb04 	addi	r2,r2,2860
81111af4:	280d883a 	mov	r6,r5
81111af8:	200b883a 	mov	r5,r4
81111afc:	11000017 	ldw	r4,0(r2)
81111b00:	11119f01 	jmpi	811119f0 <_fopen_r>

81111b04 <_fprintf_r>:
81111b04:	defffe04 	addi	sp,sp,-8
81111b08:	2809883a 	mov	r4,r5
81111b0c:	300b883a 	mov	r5,r6
81111b10:	de00012e 	bgeu	sp,et,81111b18 <_fprintf_r+0x14>
81111b14:	003b68fa 	trap	3
81111b18:	dfc00015 	stw	ra,0(sp)
81111b1c:	d9c00115 	stw	r7,4(sp)
81111b20:	d9800104 	addi	r6,sp,4
81111b24:	1117b840 	call	81117b84 <__vfprintf_internal>
81111b28:	dfc00017 	ldw	ra,0(sp)
81111b2c:	dec00204 	addi	sp,sp,8
81111b30:	f800283a 	ret

81111b34 <fprintf>:
81111b34:	defffd04 	addi	sp,sp,-12
81111b38:	de00012e 	bgeu	sp,et,81111b40 <fprintf+0xc>
81111b3c:	003b68fa 	trap	3
81111b40:	dfc00015 	stw	ra,0(sp)
81111b44:	d9800115 	stw	r6,4(sp)
81111b48:	d9c00215 	stw	r7,8(sp)
81111b4c:	d9800104 	addi	r6,sp,4
81111b50:	1117b840 	call	81117b84 <__vfprintf_internal>
81111b54:	dfc00017 	ldw	ra,0(sp)
81111b58:	dec00304 	addi	sp,sp,12
81111b5c:	f800283a 	ret

81111b60 <_fseek_r>:
81111b60:	1111b801 	jmpi	81111b80 <_fseeko_r>

81111b64 <fseek>:
81111b64:	00a04534 	movhi	r2,33044
81111b68:	1082cb04 	addi	r2,r2,2860
81111b6c:	300f883a 	mov	r7,r6
81111b70:	280d883a 	mov	r6,r5
81111b74:	200b883a 	mov	r5,r4
81111b78:	11000017 	ldw	r4,0(r2)
81111b7c:	1111b801 	jmpi	81111b80 <_fseeko_r>

81111b80 <_fseeko_r>:
81111b80:	deffe804 	addi	sp,sp,-96
81111b84:	de00012e 	bgeu	sp,et,81111b8c <_fseeko_r+0xc>
81111b88:	003b68fa 	trap	3
81111b8c:	dd401415 	stw	r21,80(sp)
81111b90:	dc801115 	stw	r18,68(sp)
81111b94:	dc401015 	stw	r17,64(sp)
81111b98:	dc000f15 	stw	r16,60(sp)
81111b9c:	dfc01715 	stw	ra,92(sp)
81111ba0:	ddc01615 	stw	r23,88(sp)
81111ba4:	dd801515 	stw	r22,84(sp)
81111ba8:	dd001315 	stw	r20,76(sp)
81111bac:	dcc01215 	stw	r19,72(sp)
81111bb0:	2023883a 	mov	r17,r4
81111bb4:	2821883a 	mov	r16,r5
81111bb8:	302b883a 	mov	r21,r6
81111bbc:	3825883a 	mov	r18,r7
81111bc0:	20000226 	beq	r4,zero,81111bcc <_fseeko_r+0x4c>
81111bc4:	20800e17 	ldw	r2,56(r4)
81111bc8:	10005a26 	beq	r2,zero,81111d34 <_fseeko_r+0x1b4>
81111bcc:	8080030b 	ldhu	r2,12(r16)
81111bd0:	00c04204 	movi	r3,264
81111bd4:	1080420c 	andi	r2,r2,264
81111bd8:	10c05b26 	beq	r2,r3,81111d48 <_fseeko_r+0x1c8>
81111bdc:	85000a17 	ldw	r20,40(r16)
81111be0:	a000f626 	beq	r20,zero,81111fbc <_fseeko_r+0x43c>
81111be4:	00800044 	movi	r2,1
81111be8:	90803e26 	beq	r18,r2,81111ce4 <_fseeko_r+0x164>
81111bec:	00800084 	movi	r2,2
81111bf0:	90801026 	beq	r18,r2,81111c34 <_fseeko_r+0xb4>
81111bf4:	90000f26 	beq	r18,zero,81111c34 <_fseeko_r+0xb4>
81111bf8:	00800584 	movi	r2,22
81111bfc:	88800015 	stw	r2,0(r17)
81111c00:	04ffffc4 	movi	r19,-1
81111c04:	9805883a 	mov	r2,r19
81111c08:	dfc01717 	ldw	ra,92(sp)
81111c0c:	ddc01617 	ldw	r23,88(sp)
81111c10:	dd801517 	ldw	r22,84(sp)
81111c14:	dd401417 	ldw	r21,80(sp)
81111c18:	dd001317 	ldw	r20,76(sp)
81111c1c:	dcc01217 	ldw	r19,72(sp)
81111c20:	dc801117 	ldw	r18,68(sp)
81111c24:	dc401017 	ldw	r17,64(sp)
81111c28:	dc000f17 	ldw	r16,60(sp)
81111c2c:	dec01804 	addi	sp,sp,96
81111c30:	f800283a 	ret
81111c34:	80800417 	ldw	r2,16(r16)
81111c38:	002f883a 	mov	r23,zero
81111c3c:	0027883a 	mov	r19,zero
81111c40:	1000cb26 	beq	r2,zero,81111f70 <_fseeko_r+0x3f0>
81111c44:	8080030b 	ldhu	r2,12(r16)
81111c48:	10c2068c 	andi	r3,r2,2074
81111c4c:	1800071e 	bne	r3,zero,81111c6c <_fseeko_r+0xec>
81111c50:	10c1000c 	andi	r3,r2,1024
81111c54:	1800451e 	bne	r3,zero,81111d6c <_fseeko_r+0x1ec>
81111c58:	00e04474 	movhi	r3,33041
81111c5c:	18ccfe04 	addi	r3,r3,13304
81111c60:	a0c0b726 	beq	r20,r3,81111f40 <_fseeko_r+0x3c0>
81111c64:	10820014 	ori	r2,r2,2048
81111c68:	8080030d 	sth	r2,12(r16)
81111c6c:	800b883a 	mov	r5,r16
81111c70:	8809883a 	mov	r4,r17
81111c74:	111b1e40 	call	8111b1e4 <_fflush_r>
81111c78:	1027883a 	mov	r19,r2
81111c7c:	103fe01e 	bne	r2,zero,81111c00 <__reset+0xfb0f1c00>
81111c80:	81400717 	ldw	r5,28(r16)
81111c84:	900f883a 	mov	r7,r18
81111c88:	a80d883a 	mov	r6,r21
81111c8c:	8809883a 	mov	r4,r17
81111c90:	a03ee83a 	callr	r20
81111c94:	00ffffc4 	movi	r3,-1
81111c98:	10ffd926 	beq	r2,r3,81111c00 <__reset+0xfb0f1c00>
81111c9c:	81400c17 	ldw	r5,48(r16)
81111ca0:	28000526 	beq	r5,zero,81111cb8 <_fseeko_r+0x138>
81111ca4:	80801004 	addi	r2,r16,64
81111ca8:	28800226 	beq	r5,r2,81111cb4 <_fseeko_r+0x134>
81111cac:	8809883a 	mov	r4,r17
81111cb0:	111ba780 	call	8111ba78 <_free_r>
81111cb4:	80000c15 	stw	zero,48(r16)
81111cb8:	8080030b 	ldhu	r2,12(r16)
81111cbc:	80c00417 	ldw	r3,16(r16)
81111cc0:	80000115 	stw	zero,4(r16)
81111cc4:	10bdf7cc 	andi	r2,r2,63455
81111cc8:	80c00015 	stw	r3,0(r16)
81111ccc:	8080030d 	sth	r2,12(r16)
81111cd0:	01800204 	movi	r6,8
81111cd4:	000b883a 	mov	r5,zero
81111cd8:	81001704 	addi	r4,r16,92
81111cdc:	1112c840 	call	81112c84 <memset>
81111ce0:	003fc806 	br	81111c04 <__reset+0xfb0f1c04>
81111ce4:	800b883a 	mov	r5,r16
81111ce8:	8809883a 	mov	r4,r17
81111cec:	111b1e40 	call	8111b1e4 <_fflush_r>
81111cf0:	8080030b 	ldhu	r2,12(r16)
81111cf4:	10c4000c 	andi	r3,r2,4096
81111cf8:	18008726 	beq	r3,zero,81111f18 <_fseeko_r+0x398>
81111cfc:	84c01417 	ldw	r19,80(r16)
81111d00:	10c0010c 	andi	r3,r2,4
81111d04:	1800431e 	bne	r3,zero,81111e14 <_fseeko_r+0x294>
81111d08:	1080020c 	andi	r2,r2,8
81111d0c:	10008026 	beq	r2,zero,81111f10 <_fseeko_r+0x390>
81111d10:	80c00017 	ldw	r3,0(r16)
81111d14:	80800417 	ldw	r2,16(r16)
81111d18:	18000226 	beq	r3,zero,81111d24 <_fseeko_r+0x1a4>
81111d1c:	1887c83a 	sub	r3,r3,r2
81111d20:	98e7883a 	add	r19,r19,r3
81111d24:	aceb883a 	add	r21,r21,r19
81111d28:	05c00044 	movi	r23,1
81111d2c:	0025883a 	mov	r18,zero
81111d30:	003fc306 	br	81111c40 <__reset+0xfb0f1c40>
81111d34:	111b5e00 	call	8111b5e0 <__sinit>
81111d38:	8080030b 	ldhu	r2,12(r16)
81111d3c:	00c04204 	movi	r3,264
81111d40:	1080420c 	andi	r2,r2,264
81111d44:	10ffa51e 	bne	r2,r3,81111bdc <__reset+0xfb0f1bdc>
81111d48:	800b883a 	mov	r5,r16
81111d4c:	8809883a 	mov	r4,r17
81111d50:	111b1e40 	call	8111b1e4 <_fflush_r>
81111d54:	003fa106 	br	81111bdc <__reset+0xfb0f1bdc>
81111d58:	8080030b 	ldhu	r2,12(r16)
81111d5c:	00c10004 	movi	r3,1024
81111d60:	80c01315 	stw	r3,76(r16)
81111d64:	10c4b03a 	or	r2,r2,r3
81111d68:	8080030d 	sth	r2,12(r16)
81111d6c:	9000311e 	bne	r18,zero,81111e34 <_fseeko_r+0x2b4>
81111d70:	a82d883a 	mov	r22,r21
81111d74:	b800371e 	bne	r23,zero,81111e54 <_fseeko_r+0x2d4>
81111d78:	8080030b 	ldhu	r2,12(r16)
81111d7c:	1084000c 	andi	r2,r2,4096
81111d80:	10007f26 	beq	r2,zero,81111f80 <_fseeko_r+0x400>
81111d84:	80801417 	ldw	r2,80(r16)
81111d88:	81800117 	ldw	r6,4(r16)
81111d8c:	81400c17 	ldw	r5,48(r16)
81111d90:	11a7c83a 	sub	r19,r2,r6
81111d94:	28008226 	beq	r5,zero,81111fa0 <_fseeko_r+0x420>
81111d98:	81c00f17 	ldw	r7,60(r16)
81111d9c:	99e7c83a 	sub	r19,r19,r7
81111da0:	81000e17 	ldw	r4,56(r16)
81111da4:	80800417 	ldw	r2,16(r16)
81111da8:	99a7883a 	add	r19,r19,r6
81111dac:	2087c83a 	sub	r3,r4,r2
81111db0:	98e7c83a 	sub	r19,r19,r3
81111db4:	38c7883a 	add	r3,r7,r3
81111db8:	b4c02b16 	blt	r22,r19,81111e68 <_fseeko_r+0x2e8>
81111dbc:	98c9883a 	add	r4,r19,r3
81111dc0:	b100292e 	bgeu	r22,r4,81111e68 <_fseeko_r+0x2e8>
81111dc4:	b4e7c83a 	sub	r19,r22,r19
81111dc8:	14c5883a 	add	r2,r2,r19
81111dcc:	1ce7c83a 	sub	r19,r3,r19
81111dd0:	80800015 	stw	r2,0(r16)
81111dd4:	84c00115 	stw	r19,4(r16)
81111dd8:	28000526 	beq	r5,zero,81111df0 <_fseeko_r+0x270>
81111ddc:	80801004 	addi	r2,r16,64
81111de0:	28800226 	beq	r5,r2,81111dec <_fseeko_r+0x26c>
81111de4:	8809883a 	mov	r4,r17
81111de8:	111ba780 	call	8111ba78 <_free_r>
81111dec:	80000c15 	stw	zero,48(r16)
81111df0:	8080030b 	ldhu	r2,12(r16)
81111df4:	01800204 	movi	r6,8
81111df8:	000b883a 	mov	r5,zero
81111dfc:	10bff7cc 	andi	r2,r2,65503
81111e00:	8080030d 	sth	r2,12(r16)
81111e04:	81001704 	addi	r4,r16,92
81111e08:	1112c840 	call	81112c84 <memset>
81111e0c:	0027883a 	mov	r19,zero
81111e10:	003f7c06 	br	81111c04 <__reset+0xfb0f1c04>
81111e14:	80c00117 	ldw	r3,4(r16)
81111e18:	80800c17 	ldw	r2,48(r16)
81111e1c:	98e7c83a 	sub	r19,r19,r3
81111e20:	10003b26 	beq	r2,zero,81111f10 <_fseeko_r+0x390>
81111e24:	80c00f17 	ldw	r3,60(r16)
81111e28:	80800417 	ldw	r2,16(r16)
81111e2c:	98e7c83a 	sub	r19,r19,r3
81111e30:	003fbc06 	br	81111d24 <__reset+0xfb0f1d24>
81111e34:	8140038f 	ldh	r5,14(r16)
81111e38:	d80d883a 	mov	r6,sp
81111e3c:	8809883a 	mov	r4,r17
81111e40:	1111fe80 	call	81111fe8 <_fstat_r>
81111e44:	103f891e 	bne	r2,zero,81111c6c <__reset+0xfb0f1c6c>
81111e48:	dd800417 	ldw	r22,16(sp)
81111e4c:	adad883a 	add	r22,r21,r22
81111e50:	b83fc926 	beq	r23,zero,81111d78 <__reset+0xfb0f1d78>
81111e54:	81400c17 	ldw	r5,48(r16)
81111e58:	81800117 	ldw	r6,4(r16)
81111e5c:	28005026 	beq	r5,zero,81111fa0 <_fseeko_r+0x420>
81111e60:	81c00f17 	ldw	r7,60(r16)
81111e64:	003fce06 	br	81111da0 <__reset+0xfb0f1da0>
81111e68:	84c01317 	ldw	r19,76(r16)
81111e6c:	81400717 	ldw	r5,28(r16)
81111e70:	000f883a 	mov	r7,zero
81111e74:	04e7c83a 	sub	r19,zero,r19
81111e78:	9da6703a 	and	r19,r19,r22
81111e7c:	980d883a 	mov	r6,r19
81111e80:	8809883a 	mov	r4,r17
81111e84:	a03ee83a 	callr	r20
81111e88:	00ffffc4 	movi	r3,-1
81111e8c:	10ff7726 	beq	r2,r3,81111c6c <__reset+0xfb0f1c6c>
81111e90:	80800417 	ldw	r2,16(r16)
81111e94:	81400c17 	ldw	r5,48(r16)
81111e98:	80000115 	stw	zero,4(r16)
81111e9c:	80800015 	stw	r2,0(r16)
81111ea0:	28000526 	beq	r5,zero,81111eb8 <_fseeko_r+0x338>
81111ea4:	80801004 	addi	r2,r16,64
81111ea8:	28800226 	beq	r5,r2,81111eb4 <_fseeko_r+0x334>
81111eac:	8809883a 	mov	r4,r17
81111eb0:	111ba780 	call	8111ba78 <_free_r>
81111eb4:	80000c15 	stw	zero,48(r16)
81111eb8:	8080030b 	ldhu	r2,12(r16)
81111ebc:	b4e7c83a 	sub	r19,r22,r19
81111ec0:	10bff7cc 	andi	r2,r2,65503
81111ec4:	8080030d 	sth	r2,12(r16)
81111ec8:	98000b26 	beq	r19,zero,81111ef8 <_fseeko_r+0x378>
81111ecc:	800b883a 	mov	r5,r16
81111ed0:	8809883a 	mov	r4,r17
81111ed4:	1112f880 	call	81112f88 <__srefill_r>
81111ed8:	103f641e 	bne	r2,zero,81111c6c <__reset+0xfb0f1c6c>
81111edc:	80800117 	ldw	r2,4(r16)
81111ee0:	14ff6236 	bltu	r2,r19,81111c6c <__reset+0xfb0f1c6c>
81111ee4:	80c00017 	ldw	r3,0(r16)
81111ee8:	14c5c83a 	sub	r2,r2,r19
81111eec:	80800115 	stw	r2,4(r16)
81111ef0:	1ce7883a 	add	r19,r3,r19
81111ef4:	84c00015 	stw	r19,0(r16)
81111ef8:	01800204 	movi	r6,8
81111efc:	000b883a 	mov	r5,zero
81111f00:	81001704 	addi	r4,r16,92
81111f04:	1112c840 	call	81112c84 <memset>
81111f08:	0027883a 	mov	r19,zero
81111f0c:	003f3d06 	br	81111c04 <__reset+0xfb0f1c04>
81111f10:	80800417 	ldw	r2,16(r16)
81111f14:	003f8306 	br	81111d24 <__reset+0xfb0f1d24>
81111f18:	81400717 	ldw	r5,28(r16)
81111f1c:	900f883a 	mov	r7,r18
81111f20:	000d883a 	mov	r6,zero
81111f24:	8809883a 	mov	r4,r17
81111f28:	a03ee83a 	callr	r20
81111f2c:	1027883a 	mov	r19,r2
81111f30:	00bfffc4 	movi	r2,-1
81111f34:	98bf3226 	beq	r19,r2,81111c00 <__reset+0xfb0f1c00>
81111f38:	8080030b 	ldhu	r2,12(r16)
81111f3c:	003f7006 	br	81111d00 <__reset+0xfb0f1d00>
81111f40:	8140038f 	ldh	r5,14(r16)
81111f44:	283f4716 	blt	r5,zero,81111c64 <__reset+0xfb0f1c64>
81111f48:	d80d883a 	mov	r6,sp
81111f4c:	8809883a 	mov	r4,r17
81111f50:	1111fe80 	call	81111fe8 <_fstat_r>
81111f54:	1000041e 	bne	r2,zero,81111f68 <_fseeko_r+0x3e8>
81111f58:	d8800117 	ldw	r2,4(sp)
81111f5c:	00e00014 	movui	r3,32768
81111f60:	10bc000c 	andi	r2,r2,61440
81111f64:	10ff7c26 	beq	r2,r3,81111d58 <__reset+0xfb0f1d58>
81111f68:	8080030b 	ldhu	r2,12(r16)
81111f6c:	003f3d06 	br	81111c64 <__reset+0xfb0f1c64>
81111f70:	800b883a 	mov	r5,r16
81111f74:	8809883a 	mov	r4,r17
81111f78:	111215c0 	call	8111215c <__smakebuf_r>
81111f7c:	003f3106 	br	81111c44 <__reset+0xfb0f1c44>
81111f80:	81400717 	ldw	r5,28(r16)
81111f84:	01c00044 	movi	r7,1
81111f88:	000d883a 	mov	r6,zero
81111f8c:	8809883a 	mov	r4,r17
81111f90:	a03ee83a 	callr	r20
81111f94:	00ffffc4 	movi	r3,-1
81111f98:	10ff7b1e 	bne	r2,r3,81111d88 <__reset+0xfb0f1d88>
81111f9c:	003f3306 	br	81111c6c <__reset+0xfb0f1c6c>
81111fa0:	80c00017 	ldw	r3,0(r16)
81111fa4:	80800417 	ldw	r2,16(r16)
81111fa8:	000b883a 	mov	r5,zero
81111fac:	1887c83a 	sub	r3,r3,r2
81111fb0:	98e7c83a 	sub	r19,r19,r3
81111fb4:	30c7883a 	add	r3,r6,r3
81111fb8:	003f7f06 	br	81111db8 <__reset+0xfb0f1db8>
81111fbc:	00800744 	movi	r2,29
81111fc0:	88800015 	stw	r2,0(r17)
81111fc4:	04ffffc4 	movi	r19,-1
81111fc8:	003f0e06 	br	81111c04 <__reset+0xfb0f1c04>

81111fcc <fseeko>:
81111fcc:	00a04534 	movhi	r2,33044
81111fd0:	1082cb04 	addi	r2,r2,2860
81111fd4:	300f883a 	mov	r7,r6
81111fd8:	280d883a 	mov	r6,r5
81111fdc:	200b883a 	mov	r5,r4
81111fe0:	11000017 	ldw	r4,0(r2)
81111fe4:	1111b801 	jmpi	81111b80 <_fseeko_r>

81111fe8 <_fstat_r>:
81111fe8:	defffd04 	addi	sp,sp,-12
81111fec:	de00012e 	bgeu	sp,et,81111ff4 <_fstat_r+0xc>
81111ff0:	003b68fa 	trap	3
81111ff4:	2805883a 	mov	r2,r5
81111ff8:	dc000015 	stw	r16,0(sp)
81111ffc:	04204534 	movhi	r16,33044
81112000:	dc400115 	stw	r17,4(sp)
81112004:	84032504 	addi	r16,r16,3220
81112008:	2023883a 	mov	r17,r4
8111200c:	300b883a 	mov	r5,r6
81112010:	1009883a 	mov	r4,r2
81112014:	dfc00215 	stw	ra,8(sp)
81112018:	80000015 	stw	zero,0(r16)
8111201c:	11274180 	call	81127418 <fstat>
81112020:	00ffffc4 	movi	r3,-1
81112024:	10c00526 	beq	r2,r3,8111203c <_fstat_r+0x54>
81112028:	dfc00217 	ldw	ra,8(sp)
8111202c:	dc400117 	ldw	r17,4(sp)
81112030:	dc000017 	ldw	r16,0(sp)
81112034:	dec00304 	addi	sp,sp,12
81112038:	f800283a 	ret
8111203c:	80c00017 	ldw	r3,0(r16)
81112040:	183ff926 	beq	r3,zero,81112028 <__reset+0xfb0f2028>
81112044:	88c00015 	stw	r3,0(r17)
81112048:	003ff706 	br	81112028 <__reset+0xfb0f2028>

8111204c <_fwrite_r>:
8111204c:	defff504 	addi	sp,sp,-44
81112050:	de00012e 	bgeu	sp,et,81112058 <_fwrite_r+0xc>
81112054:	003b68fa 	trap	3
81112058:	dc800815 	stw	r18,32(sp)
8111205c:	39a5383a 	mul	r18,r7,r6
81112060:	d8800304 	addi	r2,sp,12
81112064:	d8800015 	stw	r2,0(sp)
81112068:	00800044 	movi	r2,1
8111206c:	dcc00915 	stw	r19,36(sp)
81112070:	dc400715 	stw	r17,28(sp)
81112074:	dc000615 	stw	r16,24(sp)
81112078:	d9400315 	stw	r5,12(sp)
8111207c:	dfc00a15 	stw	ra,40(sp)
81112080:	dc800415 	stw	r18,16(sp)
81112084:	dc800215 	stw	r18,8(sp)
81112088:	d8800115 	stw	r2,4(sp)
8111208c:	3027883a 	mov	r19,r6
81112090:	3821883a 	mov	r16,r7
81112094:	2023883a 	mov	r17,r4
81112098:	d9400b17 	ldw	r5,44(sp)
8111209c:	20000226 	beq	r4,zero,811120a8 <_fwrite_r+0x5c>
811120a0:	20800e17 	ldw	r2,56(r4)
811120a4:	10001a26 	beq	r2,zero,81112110 <_fwrite_r+0xc4>
811120a8:	2880030b 	ldhu	r2,12(r5)
811120ac:	10c8000c 	andi	r3,r2,8192
811120b0:	1800061e 	bne	r3,zero,811120cc <_fwrite_r+0x80>
811120b4:	29001917 	ldw	r4,100(r5)
811120b8:	00f7ffc4 	movi	r3,-8193
811120bc:	10880014 	ori	r2,r2,8192
811120c0:	20c6703a 	and	r3,r4,r3
811120c4:	2880030d 	sth	r2,12(r5)
811120c8:	28c01915 	stw	r3,100(r5)
811120cc:	d80d883a 	mov	r6,sp
811120d0:	8809883a 	mov	r4,r17
811120d4:	111bd900 	call	8111bd90 <__sfvwrite_r>
811120d8:	10000b26 	beq	r2,zero,81112108 <_fwrite_r+0xbc>
811120dc:	d9000217 	ldw	r4,8(sp)
811120e0:	980b883a 	mov	r5,r19
811120e4:	9109c83a 	sub	r4,r18,r4
811120e8:	1124f600 	call	81124f60 <__udivsi3>
811120ec:	dfc00a17 	ldw	ra,40(sp)
811120f0:	dcc00917 	ldw	r19,36(sp)
811120f4:	dc800817 	ldw	r18,32(sp)
811120f8:	dc400717 	ldw	r17,28(sp)
811120fc:	dc000617 	ldw	r16,24(sp)
81112100:	dec00b04 	addi	sp,sp,44
81112104:	f800283a 	ret
81112108:	8005883a 	mov	r2,r16
8111210c:	003ff706 	br	811120ec <__reset+0xfb0f20ec>
81112110:	d9400515 	stw	r5,20(sp)
81112114:	111b5e00 	call	8111b5e0 <__sinit>
81112118:	d9400517 	ldw	r5,20(sp)
8111211c:	003fe206 	br	811120a8 <__reset+0xfb0f20a8>

81112120 <fwrite>:
81112120:	defffe04 	addi	sp,sp,-8
81112124:	00a04534 	movhi	r2,33044
81112128:	de00012e 	bgeu	sp,et,81112130 <fwrite+0x10>
8111212c:	003b68fa 	trap	3
81112130:	1082cb04 	addi	r2,r2,2860
81112134:	d9c00015 	stw	r7,0(sp)
81112138:	300f883a 	mov	r7,r6
8111213c:	280d883a 	mov	r6,r5
81112140:	200b883a 	mov	r5,r4
81112144:	11000017 	ldw	r4,0(r2)
81112148:	dfc00115 	stw	ra,4(sp)
8111214c:	111204c0 	call	8111204c <_fwrite_r>
81112150:	dfc00117 	ldw	ra,4(sp)
81112154:	dec00204 	addi	sp,sp,8
81112158:	f800283a 	ret

8111215c <__smakebuf_r>:
8111215c:	2880030b 	ldhu	r2,12(r5)
81112160:	10c0008c 	andi	r3,r2,2
81112164:	1800431e 	bne	r3,zero,81112274 <__smakebuf_r+0x118>
81112168:	deffec04 	addi	sp,sp,-80
8111216c:	de00012e 	bgeu	sp,et,81112174 <__smakebuf_r+0x18>
81112170:	003b68fa 	trap	3
81112174:	dc000f15 	stw	r16,60(sp)
81112178:	2821883a 	mov	r16,r5
8111217c:	2940038f 	ldh	r5,14(r5)
81112180:	dc401015 	stw	r17,64(sp)
81112184:	dfc01315 	stw	ra,76(sp)
81112188:	dcc01215 	stw	r19,72(sp)
8111218c:	dc801115 	stw	r18,68(sp)
81112190:	2023883a 	mov	r17,r4
81112194:	28001c16 	blt	r5,zero,81112208 <__smakebuf_r+0xac>
81112198:	d80d883a 	mov	r6,sp
8111219c:	1111fe80 	call	81111fe8 <_fstat_r>
811121a0:	10001816 	blt	r2,zero,81112204 <__smakebuf_r+0xa8>
811121a4:	d8800117 	ldw	r2,4(sp)
811121a8:	00e00014 	movui	r3,32768
811121ac:	10bc000c 	andi	r2,r2,61440
811121b0:	14c80020 	cmpeqi	r19,r2,8192
811121b4:	10c03726 	beq	r2,r3,81112294 <__smakebuf_r+0x138>
811121b8:	80c0030b 	ldhu	r3,12(r16)
811121bc:	18c20014 	ori	r3,r3,2048
811121c0:	80c0030d 	sth	r3,12(r16)
811121c4:	00c80004 	movi	r3,8192
811121c8:	10c0521e 	bne	r2,r3,81112314 <__smakebuf_r+0x1b8>
811121cc:	8140038f 	ldh	r5,14(r16)
811121d0:	8809883a 	mov	r4,r17
811121d4:	111c3ec0 	call	8111c3ec <_isatty_r>
811121d8:	10004c26 	beq	r2,zero,8111230c <__smakebuf_r+0x1b0>
811121dc:	8080030b 	ldhu	r2,12(r16)
811121e0:	80c010c4 	addi	r3,r16,67
811121e4:	80c00015 	stw	r3,0(r16)
811121e8:	10800054 	ori	r2,r2,1
811121ec:	8080030d 	sth	r2,12(r16)
811121f0:	00800044 	movi	r2,1
811121f4:	80c00415 	stw	r3,16(r16)
811121f8:	80800515 	stw	r2,20(r16)
811121fc:	04810004 	movi	r18,1024
81112200:	00000706 	br	81112220 <__smakebuf_r+0xc4>
81112204:	8080030b 	ldhu	r2,12(r16)
81112208:	10c0200c 	andi	r3,r2,128
8111220c:	18001f1e 	bne	r3,zero,8111228c <__smakebuf_r+0x130>
81112210:	04810004 	movi	r18,1024
81112214:	10820014 	ori	r2,r2,2048
81112218:	8080030d 	sth	r2,12(r16)
8111221c:	0027883a 	mov	r19,zero
81112220:	900b883a 	mov	r5,r18
81112224:	8809883a 	mov	r4,r17
81112228:	11123200 	call	81112320 <_malloc_r>
8111222c:	10002c26 	beq	r2,zero,811122e0 <__smakebuf_r+0x184>
81112230:	80c0030b 	ldhu	r3,12(r16)
81112234:	012044b4 	movhi	r4,33042
81112238:	212ca004 	addi	r4,r4,-19840
8111223c:	89000f15 	stw	r4,60(r17)
81112240:	18c02014 	ori	r3,r3,128
81112244:	80c0030d 	sth	r3,12(r16)
81112248:	80800015 	stw	r2,0(r16)
8111224c:	80800415 	stw	r2,16(r16)
81112250:	84800515 	stw	r18,20(r16)
81112254:	98001a1e 	bne	r19,zero,811122c0 <__smakebuf_r+0x164>
81112258:	dfc01317 	ldw	ra,76(sp)
8111225c:	dcc01217 	ldw	r19,72(sp)
81112260:	dc801117 	ldw	r18,68(sp)
81112264:	dc401017 	ldw	r17,64(sp)
81112268:	dc000f17 	ldw	r16,60(sp)
8111226c:	dec01404 	addi	sp,sp,80
81112270:	f800283a 	ret
81112274:	288010c4 	addi	r2,r5,67
81112278:	28800015 	stw	r2,0(r5)
8111227c:	28800415 	stw	r2,16(r5)
81112280:	00800044 	movi	r2,1
81112284:	28800515 	stw	r2,20(r5)
81112288:	f800283a 	ret
8111228c:	04801004 	movi	r18,64
81112290:	003fe006 	br	81112214 <__reset+0xfb0f2214>
81112294:	81000a17 	ldw	r4,40(r16)
81112298:	00e04474 	movhi	r3,33041
8111229c:	18ccfe04 	addi	r3,r3,13304
811122a0:	20ffc51e 	bne	r4,r3,811121b8 <__reset+0xfb0f21b8>
811122a4:	8080030b 	ldhu	r2,12(r16)
811122a8:	04810004 	movi	r18,1024
811122ac:	84801315 	stw	r18,76(r16)
811122b0:	1484b03a 	or	r2,r2,r18
811122b4:	8080030d 	sth	r2,12(r16)
811122b8:	0027883a 	mov	r19,zero
811122bc:	003fd806 	br	81112220 <__reset+0xfb0f2220>
811122c0:	8140038f 	ldh	r5,14(r16)
811122c4:	8809883a 	mov	r4,r17
811122c8:	111c3ec0 	call	8111c3ec <_isatty_r>
811122cc:	103fe226 	beq	r2,zero,81112258 <__reset+0xfb0f2258>
811122d0:	8080030b 	ldhu	r2,12(r16)
811122d4:	10800054 	ori	r2,r2,1
811122d8:	8080030d 	sth	r2,12(r16)
811122dc:	003fde06 	br	81112258 <__reset+0xfb0f2258>
811122e0:	8080030b 	ldhu	r2,12(r16)
811122e4:	10c0800c 	andi	r3,r2,512
811122e8:	183fdb1e 	bne	r3,zero,81112258 <__reset+0xfb0f2258>
811122ec:	10800094 	ori	r2,r2,2
811122f0:	80c010c4 	addi	r3,r16,67
811122f4:	8080030d 	sth	r2,12(r16)
811122f8:	00800044 	movi	r2,1
811122fc:	80c00015 	stw	r3,0(r16)
81112300:	80c00415 	stw	r3,16(r16)
81112304:	80800515 	stw	r2,20(r16)
81112308:	003fd306 	br	81112258 <__reset+0xfb0f2258>
8111230c:	04810004 	movi	r18,1024
81112310:	003fc306 	br	81112220 <__reset+0xfb0f2220>
81112314:	0027883a 	mov	r19,zero
81112318:	04810004 	movi	r18,1024
8111231c:	003fc006 	br	81112220 <__reset+0xfb0f2220>

81112320 <_malloc_r>:
81112320:	defff504 	addi	sp,sp,-44
81112324:	de00012e 	bgeu	sp,et,8111232c <_malloc_r+0xc>
81112328:	003b68fa 	trap	3
8111232c:	288002c4 	addi	r2,r5,11
81112330:	dc800315 	stw	r18,12(sp)
81112334:	dfc00a15 	stw	ra,40(sp)
81112338:	df000915 	stw	fp,36(sp)
8111233c:	ddc00815 	stw	r23,32(sp)
81112340:	dd800715 	stw	r22,28(sp)
81112344:	dd400615 	stw	r21,24(sp)
81112348:	dd000515 	stw	r20,20(sp)
8111234c:	dcc00415 	stw	r19,16(sp)
81112350:	dc400215 	stw	r17,8(sp)
81112354:	dc000115 	stw	r16,4(sp)
81112358:	00c00584 	movi	r3,22
8111235c:	2025883a 	mov	r18,r4
81112360:	18807f2e 	bgeu	r3,r2,81112560 <_malloc_r+0x240>
81112364:	047ffe04 	movi	r17,-8
81112368:	1462703a 	and	r17,r2,r17
8111236c:	8800a316 	blt	r17,zero,811125fc <_malloc_r+0x2dc>
81112370:	8940a236 	bltu	r17,r5,811125fc <_malloc_r+0x2dc>
81112374:	11283b00 	call	811283b0 <__malloc_lock>
81112378:	00807dc4 	movi	r2,503
8111237c:	1441e92e 	bgeu	r2,r17,81112b24 <_malloc_r+0x804>
81112380:	8804d27a 	srli	r2,r17,9
81112384:	1000a126 	beq	r2,zero,8111260c <_malloc_r+0x2ec>
81112388:	00c00104 	movi	r3,4
8111238c:	18811e36 	bltu	r3,r2,81112808 <_malloc_r+0x4e8>
81112390:	8804d1ba 	srli	r2,r17,6
81112394:	12000e44 	addi	r8,r2,57
81112398:	11c00e04 	addi	r7,r2,56
8111239c:	4209883a 	add	r4,r8,r8
811123a0:	04e04534 	movhi	r19,33044
811123a4:	2109883a 	add	r4,r4,r4
811123a8:	9cfcb004 	addi	r19,r19,-3392
811123ac:	2109883a 	add	r4,r4,r4
811123b0:	9909883a 	add	r4,r19,r4
811123b4:	24000117 	ldw	r16,4(r4)
811123b8:	213ffe04 	addi	r4,r4,-8
811123bc:	24009726 	beq	r4,r16,8111261c <_malloc_r+0x2fc>
811123c0:	80800117 	ldw	r2,4(r16)
811123c4:	01bfff04 	movi	r6,-4
811123c8:	014003c4 	movi	r5,15
811123cc:	1184703a 	and	r2,r2,r6
811123d0:	1447c83a 	sub	r3,r2,r17
811123d4:	28c00716 	blt	r5,r3,811123f4 <_malloc_r+0xd4>
811123d8:	1800920e 	bge	r3,zero,81112624 <_malloc_r+0x304>
811123dc:	84000317 	ldw	r16,12(r16)
811123e0:	24008e26 	beq	r4,r16,8111261c <_malloc_r+0x2fc>
811123e4:	80800117 	ldw	r2,4(r16)
811123e8:	1184703a 	and	r2,r2,r6
811123ec:	1447c83a 	sub	r3,r2,r17
811123f0:	28fff90e 	bge	r5,r3,811123d8 <__reset+0xfb0f23d8>
811123f4:	3809883a 	mov	r4,r7
811123f8:	01a04534 	movhi	r6,33044
811123fc:	9c000417 	ldw	r16,16(r19)
81112400:	31bcb004 	addi	r6,r6,-3392
81112404:	32000204 	addi	r8,r6,8
81112408:	82013426 	beq	r16,r8,811128dc <_malloc_r+0x5bc>
8111240c:	80c00117 	ldw	r3,4(r16)
81112410:	00bfff04 	movi	r2,-4
81112414:	188e703a 	and	r7,r3,r2
81112418:	3c45c83a 	sub	r2,r7,r17
8111241c:	00c003c4 	movi	r3,15
81112420:	18811f16 	blt	r3,r2,811128a0 <_malloc_r+0x580>
81112424:	32000515 	stw	r8,20(r6)
81112428:	32000415 	stw	r8,16(r6)
8111242c:	10007f0e 	bge	r2,zero,8111262c <_malloc_r+0x30c>
81112430:	00807fc4 	movi	r2,511
81112434:	11c0fd36 	bltu	r2,r7,8111282c <_malloc_r+0x50c>
81112438:	3806d0fa 	srli	r3,r7,3
8111243c:	01c00044 	movi	r7,1
81112440:	30800117 	ldw	r2,4(r6)
81112444:	19400044 	addi	r5,r3,1
81112448:	294b883a 	add	r5,r5,r5
8111244c:	1807d0ba 	srai	r3,r3,2
81112450:	294b883a 	add	r5,r5,r5
81112454:	294b883a 	add	r5,r5,r5
81112458:	298b883a 	add	r5,r5,r6
8111245c:	38c6983a 	sll	r3,r7,r3
81112460:	29c00017 	ldw	r7,0(r5)
81112464:	2a7ffe04 	addi	r9,r5,-8
81112468:	1886b03a 	or	r3,r3,r2
8111246c:	82400315 	stw	r9,12(r16)
81112470:	81c00215 	stw	r7,8(r16)
81112474:	30c00115 	stw	r3,4(r6)
81112478:	2c000015 	stw	r16,0(r5)
8111247c:	3c000315 	stw	r16,12(r7)
81112480:	2005d0ba 	srai	r2,r4,2
81112484:	01400044 	movi	r5,1
81112488:	288a983a 	sll	r5,r5,r2
8111248c:	19406f36 	bltu	r3,r5,8111264c <_malloc_r+0x32c>
81112490:	28c4703a 	and	r2,r5,r3
81112494:	10000a1e 	bne	r2,zero,811124c0 <_malloc_r+0x1a0>
81112498:	00bfff04 	movi	r2,-4
8111249c:	294b883a 	add	r5,r5,r5
811124a0:	2088703a 	and	r4,r4,r2
811124a4:	28c4703a 	and	r2,r5,r3
811124a8:	21000104 	addi	r4,r4,4
811124ac:	1000041e 	bne	r2,zero,811124c0 <_malloc_r+0x1a0>
811124b0:	294b883a 	add	r5,r5,r5
811124b4:	28c4703a 	and	r2,r5,r3
811124b8:	21000104 	addi	r4,r4,4
811124bc:	103ffc26 	beq	r2,zero,811124b0 <__reset+0xfb0f24b0>
811124c0:	02bfff04 	movi	r10,-4
811124c4:	024003c4 	movi	r9,15
811124c8:	21800044 	addi	r6,r4,1
811124cc:	318d883a 	add	r6,r6,r6
811124d0:	318d883a 	add	r6,r6,r6
811124d4:	318d883a 	add	r6,r6,r6
811124d8:	998d883a 	add	r6,r19,r6
811124dc:	333ffe04 	addi	r12,r6,-8
811124e0:	2017883a 	mov	r11,r4
811124e4:	31800104 	addi	r6,r6,4
811124e8:	34000017 	ldw	r16,0(r6)
811124ec:	31fffd04 	addi	r7,r6,-12
811124f0:	81c0041e 	bne	r16,r7,81112504 <_malloc_r+0x1e4>
811124f4:	0000fb06 	br	811128e4 <_malloc_r+0x5c4>
811124f8:	1801030e 	bge	r3,zero,81112908 <_malloc_r+0x5e8>
811124fc:	84000317 	ldw	r16,12(r16)
81112500:	81c0f826 	beq	r16,r7,811128e4 <_malloc_r+0x5c4>
81112504:	80800117 	ldw	r2,4(r16)
81112508:	1284703a 	and	r2,r2,r10
8111250c:	1447c83a 	sub	r3,r2,r17
81112510:	48fff90e 	bge	r9,r3,811124f8 <__reset+0xfb0f24f8>
81112514:	80800317 	ldw	r2,12(r16)
81112518:	81000217 	ldw	r4,8(r16)
8111251c:	89400054 	ori	r5,r17,1
81112520:	81400115 	stw	r5,4(r16)
81112524:	20800315 	stw	r2,12(r4)
81112528:	11000215 	stw	r4,8(r2)
8111252c:	8463883a 	add	r17,r16,r17
81112530:	9c400515 	stw	r17,20(r19)
81112534:	9c400415 	stw	r17,16(r19)
81112538:	18800054 	ori	r2,r3,1
8111253c:	88800115 	stw	r2,4(r17)
81112540:	8a000315 	stw	r8,12(r17)
81112544:	8a000215 	stw	r8,8(r17)
81112548:	88e3883a 	add	r17,r17,r3
8111254c:	88c00015 	stw	r3,0(r17)
81112550:	9009883a 	mov	r4,r18
81112554:	11284d80 	call	811284d8 <__malloc_unlock>
81112558:	80800204 	addi	r2,r16,8
8111255c:	00001b06 	br	811125cc <_malloc_r+0x2ac>
81112560:	04400404 	movi	r17,16
81112564:	89402536 	bltu	r17,r5,811125fc <_malloc_r+0x2dc>
81112568:	11283b00 	call	811283b0 <__malloc_lock>
8111256c:	00800184 	movi	r2,6
81112570:	01000084 	movi	r4,2
81112574:	04e04534 	movhi	r19,33044
81112578:	1085883a 	add	r2,r2,r2
8111257c:	9cfcb004 	addi	r19,r19,-3392
81112580:	1085883a 	add	r2,r2,r2
81112584:	9885883a 	add	r2,r19,r2
81112588:	14000117 	ldw	r16,4(r2)
8111258c:	10fffe04 	addi	r3,r2,-8
81112590:	80c0d926 	beq	r16,r3,811128f8 <_malloc_r+0x5d8>
81112594:	80c00117 	ldw	r3,4(r16)
81112598:	81000317 	ldw	r4,12(r16)
8111259c:	00bfff04 	movi	r2,-4
811125a0:	1884703a 	and	r2,r3,r2
811125a4:	81400217 	ldw	r5,8(r16)
811125a8:	8085883a 	add	r2,r16,r2
811125ac:	10c00117 	ldw	r3,4(r2)
811125b0:	29000315 	stw	r4,12(r5)
811125b4:	21400215 	stw	r5,8(r4)
811125b8:	18c00054 	ori	r3,r3,1
811125bc:	10c00115 	stw	r3,4(r2)
811125c0:	9009883a 	mov	r4,r18
811125c4:	11284d80 	call	811284d8 <__malloc_unlock>
811125c8:	80800204 	addi	r2,r16,8
811125cc:	dfc00a17 	ldw	ra,40(sp)
811125d0:	df000917 	ldw	fp,36(sp)
811125d4:	ddc00817 	ldw	r23,32(sp)
811125d8:	dd800717 	ldw	r22,28(sp)
811125dc:	dd400617 	ldw	r21,24(sp)
811125e0:	dd000517 	ldw	r20,20(sp)
811125e4:	dcc00417 	ldw	r19,16(sp)
811125e8:	dc800317 	ldw	r18,12(sp)
811125ec:	dc400217 	ldw	r17,8(sp)
811125f0:	dc000117 	ldw	r16,4(sp)
811125f4:	dec00b04 	addi	sp,sp,44
811125f8:	f800283a 	ret
811125fc:	00800304 	movi	r2,12
81112600:	90800015 	stw	r2,0(r18)
81112604:	0005883a 	mov	r2,zero
81112608:	003ff006 	br	811125cc <__reset+0xfb0f25cc>
8111260c:	01002004 	movi	r4,128
81112610:	02001004 	movi	r8,64
81112614:	01c00fc4 	movi	r7,63
81112618:	003f6106 	br	811123a0 <__reset+0xfb0f23a0>
8111261c:	4009883a 	mov	r4,r8
81112620:	003f7506 	br	811123f8 <__reset+0xfb0f23f8>
81112624:	81000317 	ldw	r4,12(r16)
81112628:	003fde06 	br	811125a4 <__reset+0xfb0f25a4>
8111262c:	81c5883a 	add	r2,r16,r7
81112630:	11400117 	ldw	r5,4(r2)
81112634:	9009883a 	mov	r4,r18
81112638:	29400054 	ori	r5,r5,1
8111263c:	11400115 	stw	r5,4(r2)
81112640:	11284d80 	call	811284d8 <__malloc_unlock>
81112644:	80800204 	addi	r2,r16,8
81112648:	003fe006 	br	811125cc <__reset+0xfb0f25cc>
8111264c:	9c000217 	ldw	r16,8(r19)
81112650:	00bfff04 	movi	r2,-4
81112654:	85800117 	ldw	r22,4(r16)
81112658:	b0ac703a 	and	r22,r22,r2
8111265c:	b4400336 	bltu	r22,r17,8111266c <_malloc_r+0x34c>
81112660:	b445c83a 	sub	r2,r22,r17
81112664:	00c003c4 	movi	r3,15
81112668:	18805d16 	blt	r3,r2,811127e0 <_malloc_r+0x4c0>
8111266c:	05e04534 	movhi	r23,33044
81112670:	00a04534 	movhi	r2,33044
81112674:	10832804 	addi	r2,r2,3232
81112678:	bdc2cc04 	addi	r23,r23,2864
8111267c:	15400017 	ldw	r21,0(r2)
81112680:	b8c00017 	ldw	r3,0(r23)
81112684:	00bfffc4 	movi	r2,-1
81112688:	858d883a 	add	r6,r16,r22
8111268c:	8d6b883a 	add	r21,r17,r21
81112690:	1880ea26 	beq	r3,r2,81112a3c <_malloc_r+0x71c>
81112694:	ad4403c4 	addi	r21,r21,4111
81112698:	00bc0004 	movi	r2,-4096
8111269c:	a8aa703a 	and	r21,r21,r2
811126a0:	a80b883a 	mov	r5,r21
811126a4:	9009883a 	mov	r4,r18
811126a8:	d9800015 	stw	r6,0(sp)
811126ac:	11131640 	call	81113164 <_sbrk_r>
811126b0:	1029883a 	mov	r20,r2
811126b4:	00bfffc4 	movi	r2,-1
811126b8:	d9800017 	ldw	r6,0(sp)
811126bc:	a080e826 	beq	r20,r2,81112a60 <_malloc_r+0x740>
811126c0:	a180a636 	bltu	r20,r6,8111295c <_malloc_r+0x63c>
811126c4:	07204534 	movhi	fp,33044
811126c8:	e7038704 	addi	fp,fp,3612
811126cc:	e0800017 	ldw	r2,0(fp)
811126d0:	a887883a 	add	r3,r21,r2
811126d4:	e0c00015 	stw	r3,0(fp)
811126d8:	3500e626 	beq	r6,r20,81112a74 <_malloc_r+0x754>
811126dc:	b9000017 	ldw	r4,0(r23)
811126e0:	00bfffc4 	movi	r2,-1
811126e4:	2080ee26 	beq	r4,r2,81112aa0 <_malloc_r+0x780>
811126e8:	a185c83a 	sub	r2,r20,r6
811126ec:	10c5883a 	add	r2,r2,r3
811126f0:	e0800015 	stw	r2,0(fp)
811126f4:	a0c001cc 	andi	r3,r20,7
811126f8:	1800bc26 	beq	r3,zero,811129ec <_malloc_r+0x6cc>
811126fc:	a0e9c83a 	sub	r20,r20,r3
81112700:	00840204 	movi	r2,4104
81112704:	a5000204 	addi	r20,r20,8
81112708:	10c7c83a 	sub	r3,r2,r3
8111270c:	a545883a 	add	r2,r20,r21
81112710:	1083ffcc 	andi	r2,r2,4095
81112714:	18abc83a 	sub	r21,r3,r2
81112718:	a80b883a 	mov	r5,r21
8111271c:	9009883a 	mov	r4,r18
81112720:	11131640 	call	81113164 <_sbrk_r>
81112724:	00ffffc4 	movi	r3,-1
81112728:	10c0e126 	beq	r2,r3,81112ab0 <_malloc_r+0x790>
8111272c:	1505c83a 	sub	r2,r2,r20
81112730:	1545883a 	add	r2,r2,r21
81112734:	10800054 	ori	r2,r2,1
81112738:	e0c00017 	ldw	r3,0(fp)
8111273c:	9d000215 	stw	r20,8(r19)
81112740:	a0800115 	stw	r2,4(r20)
81112744:	a8c7883a 	add	r3,r21,r3
81112748:	e0c00015 	stw	r3,0(fp)
8111274c:	84c00e26 	beq	r16,r19,81112788 <_malloc_r+0x468>
81112750:	018003c4 	movi	r6,15
81112754:	3580a72e 	bgeu	r6,r22,811129f4 <_malloc_r+0x6d4>
81112758:	81400117 	ldw	r5,4(r16)
8111275c:	013ffe04 	movi	r4,-8
81112760:	b0bffd04 	addi	r2,r22,-12
81112764:	1104703a 	and	r2,r2,r4
81112768:	2900004c 	andi	r4,r5,1
8111276c:	2088b03a 	or	r4,r4,r2
81112770:	81000115 	stw	r4,4(r16)
81112774:	01400144 	movi	r5,5
81112778:	8089883a 	add	r4,r16,r2
8111277c:	21400115 	stw	r5,4(r4)
81112780:	21400215 	stw	r5,8(r4)
81112784:	3080cd36 	bltu	r6,r2,81112abc <_malloc_r+0x79c>
81112788:	00a04534 	movhi	r2,33044
8111278c:	10832704 	addi	r2,r2,3228
81112790:	11000017 	ldw	r4,0(r2)
81112794:	20c0012e 	bgeu	r4,r3,8111279c <_malloc_r+0x47c>
81112798:	10c00015 	stw	r3,0(r2)
8111279c:	00a04534 	movhi	r2,33044
811127a0:	10832604 	addi	r2,r2,3224
811127a4:	11000017 	ldw	r4,0(r2)
811127a8:	9c000217 	ldw	r16,8(r19)
811127ac:	20c0012e 	bgeu	r4,r3,811127b4 <_malloc_r+0x494>
811127b0:	10c00015 	stw	r3,0(r2)
811127b4:	80c00117 	ldw	r3,4(r16)
811127b8:	00bfff04 	movi	r2,-4
811127bc:	1886703a 	and	r3,r3,r2
811127c0:	1c45c83a 	sub	r2,r3,r17
811127c4:	1c400236 	bltu	r3,r17,811127d0 <_malloc_r+0x4b0>
811127c8:	00c003c4 	movi	r3,15
811127cc:	18800416 	blt	r3,r2,811127e0 <_malloc_r+0x4c0>
811127d0:	9009883a 	mov	r4,r18
811127d4:	11284d80 	call	811284d8 <__malloc_unlock>
811127d8:	0005883a 	mov	r2,zero
811127dc:	003f7b06 	br	811125cc <__reset+0xfb0f25cc>
811127e0:	88c00054 	ori	r3,r17,1
811127e4:	80c00115 	stw	r3,4(r16)
811127e8:	8463883a 	add	r17,r16,r17
811127ec:	10800054 	ori	r2,r2,1
811127f0:	9c400215 	stw	r17,8(r19)
811127f4:	88800115 	stw	r2,4(r17)
811127f8:	9009883a 	mov	r4,r18
811127fc:	11284d80 	call	811284d8 <__malloc_unlock>
81112800:	80800204 	addi	r2,r16,8
81112804:	003f7106 	br	811125cc <__reset+0xfb0f25cc>
81112808:	00c00504 	movi	r3,20
8111280c:	18804a2e 	bgeu	r3,r2,81112938 <_malloc_r+0x618>
81112810:	00c01504 	movi	r3,84
81112814:	18806e36 	bltu	r3,r2,811129d0 <_malloc_r+0x6b0>
81112818:	8804d33a 	srli	r2,r17,12
8111281c:	12001bc4 	addi	r8,r2,111
81112820:	11c01b84 	addi	r7,r2,110
81112824:	4209883a 	add	r4,r8,r8
81112828:	003edd06 	br	811123a0 <__reset+0xfb0f23a0>
8111282c:	3804d27a 	srli	r2,r7,9
81112830:	00c00104 	movi	r3,4
81112834:	1880442e 	bgeu	r3,r2,81112948 <_malloc_r+0x628>
81112838:	00c00504 	movi	r3,20
8111283c:	18808136 	bltu	r3,r2,81112a44 <_malloc_r+0x724>
81112840:	11401704 	addi	r5,r2,92
81112844:	10c016c4 	addi	r3,r2,91
81112848:	294b883a 	add	r5,r5,r5
8111284c:	294b883a 	add	r5,r5,r5
81112850:	294b883a 	add	r5,r5,r5
81112854:	994b883a 	add	r5,r19,r5
81112858:	28800017 	ldw	r2,0(r5)
8111285c:	01a04534 	movhi	r6,33044
81112860:	297ffe04 	addi	r5,r5,-8
81112864:	31bcb004 	addi	r6,r6,-3392
81112868:	28806526 	beq	r5,r2,81112a00 <_malloc_r+0x6e0>
8111286c:	01bfff04 	movi	r6,-4
81112870:	10c00117 	ldw	r3,4(r2)
81112874:	1986703a 	and	r3,r3,r6
81112878:	38c0022e 	bgeu	r7,r3,81112884 <_malloc_r+0x564>
8111287c:	10800217 	ldw	r2,8(r2)
81112880:	28bffb1e 	bne	r5,r2,81112870 <__reset+0xfb0f2870>
81112884:	11400317 	ldw	r5,12(r2)
81112888:	98c00117 	ldw	r3,4(r19)
8111288c:	81400315 	stw	r5,12(r16)
81112890:	80800215 	stw	r2,8(r16)
81112894:	2c000215 	stw	r16,8(r5)
81112898:	14000315 	stw	r16,12(r2)
8111289c:	003ef806 	br	81112480 <__reset+0xfb0f2480>
811128a0:	88c00054 	ori	r3,r17,1
811128a4:	80c00115 	stw	r3,4(r16)
811128a8:	8463883a 	add	r17,r16,r17
811128ac:	34400515 	stw	r17,20(r6)
811128b0:	34400415 	stw	r17,16(r6)
811128b4:	10c00054 	ori	r3,r2,1
811128b8:	8a000315 	stw	r8,12(r17)
811128bc:	8a000215 	stw	r8,8(r17)
811128c0:	88c00115 	stw	r3,4(r17)
811128c4:	88a3883a 	add	r17,r17,r2
811128c8:	88800015 	stw	r2,0(r17)
811128cc:	9009883a 	mov	r4,r18
811128d0:	11284d80 	call	811284d8 <__malloc_unlock>
811128d4:	80800204 	addi	r2,r16,8
811128d8:	003f3c06 	br	811125cc <__reset+0xfb0f25cc>
811128dc:	30c00117 	ldw	r3,4(r6)
811128e0:	003ee706 	br	81112480 <__reset+0xfb0f2480>
811128e4:	5ac00044 	addi	r11,r11,1
811128e8:	588000cc 	andi	r2,r11,3
811128ec:	31800204 	addi	r6,r6,8
811128f0:	103efd1e 	bne	r2,zero,811124e8 <__reset+0xfb0f24e8>
811128f4:	00002406 	br	81112988 <_malloc_r+0x668>
811128f8:	14000317 	ldw	r16,12(r2)
811128fc:	143f251e 	bne	r2,r16,81112594 <__reset+0xfb0f2594>
81112900:	21000084 	addi	r4,r4,2
81112904:	003ebc06 	br	811123f8 <__reset+0xfb0f23f8>
81112908:	8085883a 	add	r2,r16,r2
8111290c:	10c00117 	ldw	r3,4(r2)
81112910:	81000317 	ldw	r4,12(r16)
81112914:	81400217 	ldw	r5,8(r16)
81112918:	18c00054 	ori	r3,r3,1
8111291c:	10c00115 	stw	r3,4(r2)
81112920:	29000315 	stw	r4,12(r5)
81112924:	21400215 	stw	r5,8(r4)
81112928:	9009883a 	mov	r4,r18
8111292c:	11284d80 	call	811284d8 <__malloc_unlock>
81112930:	80800204 	addi	r2,r16,8
81112934:	003f2506 	br	811125cc <__reset+0xfb0f25cc>
81112938:	12001704 	addi	r8,r2,92
8111293c:	11c016c4 	addi	r7,r2,91
81112940:	4209883a 	add	r4,r8,r8
81112944:	003e9606 	br	811123a0 <__reset+0xfb0f23a0>
81112948:	3804d1ba 	srli	r2,r7,6
8111294c:	11400e44 	addi	r5,r2,57
81112950:	10c00e04 	addi	r3,r2,56
81112954:	294b883a 	add	r5,r5,r5
81112958:	003fbc06 	br	8111284c <__reset+0xfb0f284c>
8111295c:	84ff5926 	beq	r16,r19,811126c4 <__reset+0xfb0f26c4>
81112960:	00a04534 	movhi	r2,33044
81112964:	10bcb004 	addi	r2,r2,-3392
81112968:	14000217 	ldw	r16,8(r2)
8111296c:	00bfff04 	movi	r2,-4
81112970:	80c00117 	ldw	r3,4(r16)
81112974:	1886703a 	and	r3,r3,r2
81112978:	003f9106 	br	811127c0 <__reset+0xfb0f27c0>
8111297c:	60800217 	ldw	r2,8(r12)
81112980:	213fffc4 	addi	r4,r4,-1
81112984:	1300651e 	bne	r2,r12,81112b1c <_malloc_r+0x7fc>
81112988:	208000cc 	andi	r2,r4,3
8111298c:	633ffe04 	addi	r12,r12,-8
81112990:	103ffa1e 	bne	r2,zero,8111297c <__reset+0xfb0f297c>
81112994:	98800117 	ldw	r2,4(r19)
81112998:	0146303a 	nor	r3,zero,r5
8111299c:	1884703a 	and	r2,r3,r2
811129a0:	98800115 	stw	r2,4(r19)
811129a4:	294b883a 	add	r5,r5,r5
811129a8:	117f2836 	bltu	r2,r5,8111264c <__reset+0xfb0f264c>
811129ac:	283f2726 	beq	r5,zero,8111264c <__reset+0xfb0f264c>
811129b0:	2886703a 	and	r3,r5,r2
811129b4:	5809883a 	mov	r4,r11
811129b8:	183ec31e 	bne	r3,zero,811124c8 <__reset+0xfb0f24c8>
811129bc:	294b883a 	add	r5,r5,r5
811129c0:	2886703a 	and	r3,r5,r2
811129c4:	21000104 	addi	r4,r4,4
811129c8:	183ffc26 	beq	r3,zero,811129bc <__reset+0xfb0f29bc>
811129cc:	003ebe06 	br	811124c8 <__reset+0xfb0f24c8>
811129d0:	00c05504 	movi	r3,340
811129d4:	18801236 	bltu	r3,r2,81112a20 <_malloc_r+0x700>
811129d8:	8804d3fa 	srli	r2,r17,15
811129dc:	12001e04 	addi	r8,r2,120
811129e0:	11c01dc4 	addi	r7,r2,119
811129e4:	4209883a 	add	r4,r8,r8
811129e8:	003e6d06 	br	811123a0 <__reset+0xfb0f23a0>
811129ec:	00c40004 	movi	r3,4096
811129f0:	003f4606 	br	8111270c <__reset+0xfb0f270c>
811129f4:	00800044 	movi	r2,1
811129f8:	a0800115 	stw	r2,4(r20)
811129fc:	003f7406 	br	811127d0 <__reset+0xfb0f27d0>
81112a00:	1805d0ba 	srai	r2,r3,2
81112a04:	01c00044 	movi	r7,1
81112a08:	30c00117 	ldw	r3,4(r6)
81112a0c:	388e983a 	sll	r7,r7,r2
81112a10:	2805883a 	mov	r2,r5
81112a14:	38c6b03a 	or	r3,r7,r3
81112a18:	30c00115 	stw	r3,4(r6)
81112a1c:	003f9b06 	br	8111288c <__reset+0xfb0f288c>
81112a20:	00c15504 	movi	r3,1364
81112a24:	18801a36 	bltu	r3,r2,81112a90 <_malloc_r+0x770>
81112a28:	8804d4ba 	srli	r2,r17,18
81112a2c:	12001f44 	addi	r8,r2,125
81112a30:	11c01f04 	addi	r7,r2,124
81112a34:	4209883a 	add	r4,r8,r8
81112a38:	003e5906 	br	811123a0 <__reset+0xfb0f23a0>
81112a3c:	ad400404 	addi	r21,r21,16
81112a40:	003f1706 	br	811126a0 <__reset+0xfb0f26a0>
81112a44:	00c01504 	movi	r3,84
81112a48:	18802336 	bltu	r3,r2,81112ad8 <_malloc_r+0x7b8>
81112a4c:	3804d33a 	srli	r2,r7,12
81112a50:	11401bc4 	addi	r5,r2,111
81112a54:	10c01b84 	addi	r3,r2,110
81112a58:	294b883a 	add	r5,r5,r5
81112a5c:	003f7b06 	br	8111284c <__reset+0xfb0f284c>
81112a60:	9c000217 	ldw	r16,8(r19)
81112a64:	00bfff04 	movi	r2,-4
81112a68:	80c00117 	ldw	r3,4(r16)
81112a6c:	1886703a 	and	r3,r3,r2
81112a70:	003f5306 	br	811127c0 <__reset+0xfb0f27c0>
81112a74:	3083ffcc 	andi	r2,r6,4095
81112a78:	103f181e 	bne	r2,zero,811126dc <__reset+0xfb0f26dc>
81112a7c:	99000217 	ldw	r4,8(r19)
81112a80:	b545883a 	add	r2,r22,r21
81112a84:	10800054 	ori	r2,r2,1
81112a88:	20800115 	stw	r2,4(r4)
81112a8c:	003f3e06 	br	81112788 <__reset+0xfb0f2788>
81112a90:	01003f84 	movi	r4,254
81112a94:	02001fc4 	movi	r8,127
81112a98:	01c01f84 	movi	r7,126
81112a9c:	003e4006 	br	811123a0 <__reset+0xfb0f23a0>
81112aa0:	00a04534 	movhi	r2,33044
81112aa4:	1082cc04 	addi	r2,r2,2864
81112aa8:	15000015 	stw	r20,0(r2)
81112aac:	003f1106 	br	811126f4 <__reset+0xfb0f26f4>
81112ab0:	00800044 	movi	r2,1
81112ab4:	002b883a 	mov	r21,zero
81112ab8:	003f1f06 	br	81112738 <__reset+0xfb0f2738>
81112abc:	81400204 	addi	r5,r16,8
81112ac0:	9009883a 	mov	r4,r18
81112ac4:	111ba780 	call	8111ba78 <_free_r>
81112ac8:	00a04534 	movhi	r2,33044
81112acc:	10838704 	addi	r2,r2,3612
81112ad0:	10c00017 	ldw	r3,0(r2)
81112ad4:	003f2c06 	br	81112788 <__reset+0xfb0f2788>
81112ad8:	00c05504 	movi	r3,340
81112adc:	18800536 	bltu	r3,r2,81112af4 <_malloc_r+0x7d4>
81112ae0:	3804d3fa 	srli	r2,r7,15
81112ae4:	11401e04 	addi	r5,r2,120
81112ae8:	10c01dc4 	addi	r3,r2,119
81112aec:	294b883a 	add	r5,r5,r5
81112af0:	003f5606 	br	8111284c <__reset+0xfb0f284c>
81112af4:	00c15504 	movi	r3,1364
81112af8:	18800536 	bltu	r3,r2,81112b10 <_malloc_r+0x7f0>
81112afc:	3804d4ba 	srli	r2,r7,18
81112b00:	11401f44 	addi	r5,r2,125
81112b04:	10c01f04 	addi	r3,r2,124
81112b08:	294b883a 	add	r5,r5,r5
81112b0c:	003f4f06 	br	8111284c <__reset+0xfb0f284c>
81112b10:	01403f84 	movi	r5,254
81112b14:	00c01f84 	movi	r3,126
81112b18:	003f4c06 	br	8111284c <__reset+0xfb0f284c>
81112b1c:	98800117 	ldw	r2,4(r19)
81112b20:	003fa006 	br	811129a4 <__reset+0xfb0f29a4>
81112b24:	8808d0fa 	srli	r4,r17,3
81112b28:	20800044 	addi	r2,r4,1
81112b2c:	1085883a 	add	r2,r2,r2
81112b30:	003e9006 	br	81112574 <__reset+0xfb0f2574>

81112b34 <memcpy>:
81112b34:	defffd04 	addi	sp,sp,-12
81112b38:	de00012e 	bgeu	sp,et,81112b40 <memcpy+0xc>
81112b3c:	003b68fa 	trap	3
81112b40:	00c003c4 	movi	r3,15
81112b44:	dfc00215 	stw	ra,8(sp)
81112b48:	dc400115 	stw	r17,4(sp)
81112b4c:	dc000015 	stw	r16,0(sp)
81112b50:	2005883a 	mov	r2,r4
81112b54:	1980452e 	bgeu	r3,r6,81112c6c <memcpy+0x138>
81112b58:	2906b03a 	or	r3,r5,r4
81112b5c:	18c000cc 	andi	r3,r3,3
81112b60:	1800441e 	bne	r3,zero,81112c74 <memcpy+0x140>
81112b64:	347ffc04 	addi	r17,r6,-16
81112b68:	8822d13a 	srli	r17,r17,4
81112b6c:	28c00104 	addi	r3,r5,4
81112b70:	23400104 	addi	r13,r4,4
81112b74:	8820913a 	slli	r16,r17,4
81112b78:	2b000204 	addi	r12,r5,8
81112b7c:	22c00204 	addi	r11,r4,8
81112b80:	84000504 	addi	r16,r16,20
81112b84:	2a800304 	addi	r10,r5,12
81112b88:	22400304 	addi	r9,r4,12
81112b8c:	2c21883a 	add	r16,r5,r16
81112b90:	2811883a 	mov	r8,r5
81112b94:	200f883a 	mov	r7,r4
81112b98:	41000017 	ldw	r4,0(r8)
81112b9c:	1fc00017 	ldw	ra,0(r3)
81112ba0:	63c00017 	ldw	r15,0(r12)
81112ba4:	39000015 	stw	r4,0(r7)
81112ba8:	53800017 	ldw	r14,0(r10)
81112bac:	6fc00015 	stw	ra,0(r13)
81112bb0:	5bc00015 	stw	r15,0(r11)
81112bb4:	4b800015 	stw	r14,0(r9)
81112bb8:	18c00404 	addi	r3,r3,16
81112bbc:	39c00404 	addi	r7,r7,16
81112bc0:	42000404 	addi	r8,r8,16
81112bc4:	6b400404 	addi	r13,r13,16
81112bc8:	63000404 	addi	r12,r12,16
81112bcc:	5ac00404 	addi	r11,r11,16
81112bd0:	52800404 	addi	r10,r10,16
81112bd4:	4a400404 	addi	r9,r9,16
81112bd8:	1c3fef1e 	bne	r3,r16,81112b98 <__reset+0xfb0f2b98>
81112bdc:	89c00044 	addi	r7,r17,1
81112be0:	380e913a 	slli	r7,r7,4
81112be4:	310003cc 	andi	r4,r6,15
81112be8:	02c000c4 	movi	r11,3
81112bec:	11c7883a 	add	r3,r2,r7
81112bf0:	29cb883a 	add	r5,r5,r7
81112bf4:	5900212e 	bgeu	r11,r4,81112c7c <memcpy+0x148>
81112bf8:	1813883a 	mov	r9,r3
81112bfc:	2811883a 	mov	r8,r5
81112c00:	200f883a 	mov	r7,r4
81112c04:	42800017 	ldw	r10,0(r8)
81112c08:	4a400104 	addi	r9,r9,4
81112c0c:	39ffff04 	addi	r7,r7,-4
81112c10:	4abfff15 	stw	r10,-4(r9)
81112c14:	42000104 	addi	r8,r8,4
81112c18:	59fffa36 	bltu	r11,r7,81112c04 <__reset+0xfb0f2c04>
81112c1c:	213fff04 	addi	r4,r4,-4
81112c20:	2008d0ba 	srli	r4,r4,2
81112c24:	318000cc 	andi	r6,r6,3
81112c28:	21000044 	addi	r4,r4,1
81112c2c:	2109883a 	add	r4,r4,r4
81112c30:	2109883a 	add	r4,r4,r4
81112c34:	1907883a 	add	r3,r3,r4
81112c38:	290b883a 	add	r5,r5,r4
81112c3c:	30000626 	beq	r6,zero,81112c58 <memcpy+0x124>
81112c40:	198d883a 	add	r6,r3,r6
81112c44:	29c00003 	ldbu	r7,0(r5)
81112c48:	18c00044 	addi	r3,r3,1
81112c4c:	29400044 	addi	r5,r5,1
81112c50:	19ffffc5 	stb	r7,-1(r3)
81112c54:	19bffb1e 	bne	r3,r6,81112c44 <__reset+0xfb0f2c44>
81112c58:	dfc00217 	ldw	ra,8(sp)
81112c5c:	dc400117 	ldw	r17,4(sp)
81112c60:	dc000017 	ldw	r16,0(sp)
81112c64:	dec00304 	addi	sp,sp,12
81112c68:	f800283a 	ret
81112c6c:	2007883a 	mov	r3,r4
81112c70:	003ff206 	br	81112c3c <__reset+0xfb0f2c3c>
81112c74:	2007883a 	mov	r3,r4
81112c78:	003ff106 	br	81112c40 <__reset+0xfb0f2c40>
81112c7c:	200d883a 	mov	r6,r4
81112c80:	003fee06 	br	81112c3c <__reset+0xfb0f2c3c>

81112c84 <memset>:
81112c84:	20c000cc 	andi	r3,r4,3
81112c88:	2005883a 	mov	r2,r4
81112c8c:	18004426 	beq	r3,zero,81112da0 <memset+0x11c>
81112c90:	31ffffc4 	addi	r7,r6,-1
81112c94:	30004026 	beq	r6,zero,81112d98 <memset+0x114>
81112c98:	2813883a 	mov	r9,r5
81112c9c:	200d883a 	mov	r6,r4
81112ca0:	2007883a 	mov	r3,r4
81112ca4:	00000406 	br	81112cb8 <memset+0x34>
81112ca8:	3a3fffc4 	addi	r8,r7,-1
81112cac:	31800044 	addi	r6,r6,1
81112cb0:	38003926 	beq	r7,zero,81112d98 <memset+0x114>
81112cb4:	400f883a 	mov	r7,r8
81112cb8:	18c00044 	addi	r3,r3,1
81112cbc:	32400005 	stb	r9,0(r6)
81112cc0:	1a0000cc 	andi	r8,r3,3
81112cc4:	403ff81e 	bne	r8,zero,81112ca8 <__reset+0xfb0f2ca8>
81112cc8:	010000c4 	movi	r4,3
81112ccc:	21c02d2e 	bgeu	r4,r7,81112d84 <memset+0x100>
81112cd0:	29003fcc 	andi	r4,r5,255
81112cd4:	200c923a 	slli	r6,r4,8
81112cd8:	3108b03a 	or	r4,r6,r4
81112cdc:	200c943a 	slli	r6,r4,16
81112ce0:	218cb03a 	or	r6,r4,r6
81112ce4:	010003c4 	movi	r4,15
81112ce8:	21c0182e 	bgeu	r4,r7,81112d4c <memset+0xc8>
81112cec:	3b3ffc04 	addi	r12,r7,-16
81112cf0:	6018d13a 	srli	r12,r12,4
81112cf4:	1a000104 	addi	r8,r3,4
81112cf8:	1ac00204 	addi	r11,r3,8
81112cfc:	6008913a 	slli	r4,r12,4
81112d00:	1a800304 	addi	r10,r3,12
81112d04:	1813883a 	mov	r9,r3
81112d08:	21000504 	addi	r4,r4,20
81112d0c:	1909883a 	add	r4,r3,r4
81112d10:	49800015 	stw	r6,0(r9)
81112d14:	41800015 	stw	r6,0(r8)
81112d18:	59800015 	stw	r6,0(r11)
81112d1c:	51800015 	stw	r6,0(r10)
81112d20:	42000404 	addi	r8,r8,16
81112d24:	4a400404 	addi	r9,r9,16
81112d28:	5ac00404 	addi	r11,r11,16
81112d2c:	52800404 	addi	r10,r10,16
81112d30:	413ff71e 	bne	r8,r4,81112d10 <__reset+0xfb0f2d10>
81112d34:	63000044 	addi	r12,r12,1
81112d38:	6018913a 	slli	r12,r12,4
81112d3c:	39c003cc 	andi	r7,r7,15
81112d40:	010000c4 	movi	r4,3
81112d44:	1b07883a 	add	r3,r3,r12
81112d48:	21c00e2e 	bgeu	r4,r7,81112d84 <memset+0x100>
81112d4c:	1813883a 	mov	r9,r3
81112d50:	3811883a 	mov	r8,r7
81112d54:	010000c4 	movi	r4,3
81112d58:	49800015 	stw	r6,0(r9)
81112d5c:	423fff04 	addi	r8,r8,-4
81112d60:	4a400104 	addi	r9,r9,4
81112d64:	223ffc36 	bltu	r4,r8,81112d58 <__reset+0xfb0f2d58>
81112d68:	393fff04 	addi	r4,r7,-4
81112d6c:	2008d0ba 	srli	r4,r4,2
81112d70:	39c000cc 	andi	r7,r7,3
81112d74:	21000044 	addi	r4,r4,1
81112d78:	2109883a 	add	r4,r4,r4
81112d7c:	2109883a 	add	r4,r4,r4
81112d80:	1907883a 	add	r3,r3,r4
81112d84:	38000526 	beq	r7,zero,81112d9c <memset+0x118>
81112d88:	19cf883a 	add	r7,r3,r7
81112d8c:	19400005 	stb	r5,0(r3)
81112d90:	18c00044 	addi	r3,r3,1
81112d94:	38fffd1e 	bne	r7,r3,81112d8c <__reset+0xfb0f2d8c>
81112d98:	f800283a 	ret
81112d9c:	f800283a 	ret
81112da0:	2007883a 	mov	r3,r4
81112da4:	300f883a 	mov	r7,r6
81112da8:	003fc706 	br	81112cc8 <__reset+0xfb0f2cc8>

81112dac <_open_r>:
81112dac:	defffd04 	addi	sp,sp,-12
81112db0:	de00012e 	bgeu	sp,et,81112db8 <_open_r+0xc>
81112db4:	003b68fa 	trap	3
81112db8:	2805883a 	mov	r2,r5
81112dbc:	dc000015 	stw	r16,0(sp)
81112dc0:	04204534 	movhi	r16,33044
81112dc4:	dc400115 	stw	r17,4(sp)
81112dc8:	300b883a 	mov	r5,r6
81112dcc:	84032504 	addi	r16,r16,3220
81112dd0:	2023883a 	mov	r17,r4
81112dd4:	380d883a 	mov	r6,r7
81112dd8:	1009883a 	mov	r4,r2
81112ddc:	dfc00215 	stw	ra,8(sp)
81112de0:	80000015 	stw	zero,0(r16)
81112de4:	1127a3c0 	call	81127a3c <open>
81112de8:	00ffffc4 	movi	r3,-1
81112dec:	10c00526 	beq	r2,r3,81112e04 <_open_r+0x58>
81112df0:	dfc00217 	ldw	ra,8(sp)
81112df4:	dc400117 	ldw	r17,4(sp)
81112df8:	dc000017 	ldw	r16,0(sp)
81112dfc:	dec00304 	addi	sp,sp,12
81112e00:	f800283a 	ret
81112e04:	80c00017 	ldw	r3,0(r16)
81112e08:	183ff926 	beq	r3,zero,81112df0 <__reset+0xfb0f2df0>
81112e0c:	88c00015 	stw	r3,0(r17)
81112e10:	003ff706 	br	81112df0 <__reset+0xfb0f2df0>

81112e14 <_printf_r>:
81112e14:	defffd04 	addi	sp,sp,-12
81112e18:	2805883a 	mov	r2,r5
81112e1c:	de00012e 	bgeu	sp,et,81112e24 <_printf_r+0x10>
81112e20:	003b68fa 	trap	3
81112e24:	dfc00015 	stw	ra,0(sp)
81112e28:	d9800115 	stw	r6,4(sp)
81112e2c:	d9c00215 	stw	r7,8(sp)
81112e30:	21400217 	ldw	r5,8(r4)
81112e34:	d9c00104 	addi	r7,sp,4
81112e38:	100d883a 	mov	r6,r2
81112e3c:	11159840 	call	81115984 <___vfprintf_internal_r>
81112e40:	dfc00017 	ldw	ra,0(sp)
81112e44:	dec00304 	addi	sp,sp,12
81112e48:	f800283a 	ret

81112e4c <printf>:
81112e4c:	defffc04 	addi	sp,sp,-16
81112e50:	de00012e 	bgeu	sp,et,81112e58 <printf+0xc>
81112e54:	003b68fa 	trap	3
81112e58:	dfc00015 	stw	ra,0(sp)
81112e5c:	d9400115 	stw	r5,4(sp)
81112e60:	d9800215 	stw	r6,8(sp)
81112e64:	d9c00315 	stw	r7,12(sp)
81112e68:	00a04534 	movhi	r2,33044
81112e6c:	1082cb04 	addi	r2,r2,2860
81112e70:	10800017 	ldw	r2,0(r2)
81112e74:	200b883a 	mov	r5,r4
81112e78:	d9800104 	addi	r6,sp,4
81112e7c:	11000217 	ldw	r4,8(r2)
81112e80:	1117b840 	call	81117b84 <__vfprintf_internal>
81112e84:	dfc00017 	ldw	ra,0(sp)
81112e88:	dec00404 	addi	sp,sp,16
81112e8c:	f800283a 	ret

81112e90 <_puts_r>:
81112e90:	defff604 	addi	sp,sp,-40
81112e94:	de00012e 	bgeu	sp,et,81112e9c <_puts_r+0xc>
81112e98:	003b68fa 	trap	3
81112e9c:	dc000715 	stw	r16,28(sp)
81112ea0:	2021883a 	mov	r16,r4
81112ea4:	2809883a 	mov	r4,r5
81112ea8:	dc400815 	stw	r17,32(sp)
81112eac:	dfc00915 	stw	ra,36(sp)
81112eb0:	2823883a 	mov	r17,r5
81112eb4:	11134b00 	call	811134b0 <strlen>
81112eb8:	10c00044 	addi	r3,r2,1
81112ebc:	d8800115 	stw	r2,4(sp)
81112ec0:	00a04534 	movhi	r2,33044
81112ec4:	10b9c004 	addi	r2,r2,-6400
81112ec8:	d8800215 	stw	r2,8(sp)
81112ecc:	00800044 	movi	r2,1
81112ed0:	d8800315 	stw	r2,12(sp)
81112ed4:	00800084 	movi	r2,2
81112ed8:	dc400015 	stw	r17,0(sp)
81112edc:	d8c00615 	stw	r3,24(sp)
81112ee0:	dec00415 	stw	sp,16(sp)
81112ee4:	d8800515 	stw	r2,20(sp)
81112ee8:	80000226 	beq	r16,zero,81112ef4 <_puts_r+0x64>
81112eec:	80800e17 	ldw	r2,56(r16)
81112ef0:	10001426 	beq	r2,zero,81112f44 <_puts_r+0xb4>
81112ef4:	81400217 	ldw	r5,8(r16)
81112ef8:	2880030b 	ldhu	r2,12(r5)
81112efc:	10c8000c 	andi	r3,r2,8192
81112f00:	1800061e 	bne	r3,zero,81112f1c <_puts_r+0x8c>
81112f04:	29001917 	ldw	r4,100(r5)
81112f08:	00f7ffc4 	movi	r3,-8193
81112f0c:	10880014 	ori	r2,r2,8192
81112f10:	20c6703a 	and	r3,r4,r3
81112f14:	2880030d 	sth	r2,12(r5)
81112f18:	28c01915 	stw	r3,100(r5)
81112f1c:	d9800404 	addi	r6,sp,16
81112f20:	8009883a 	mov	r4,r16
81112f24:	111bd900 	call	8111bd90 <__sfvwrite_r>
81112f28:	1000091e 	bne	r2,zero,81112f50 <_puts_r+0xc0>
81112f2c:	00800284 	movi	r2,10
81112f30:	dfc00917 	ldw	ra,36(sp)
81112f34:	dc400817 	ldw	r17,32(sp)
81112f38:	dc000717 	ldw	r16,28(sp)
81112f3c:	dec00a04 	addi	sp,sp,40
81112f40:	f800283a 	ret
81112f44:	8009883a 	mov	r4,r16
81112f48:	111b5e00 	call	8111b5e0 <__sinit>
81112f4c:	003fe906 	br	81112ef4 <__reset+0xfb0f2ef4>
81112f50:	00bfffc4 	movi	r2,-1
81112f54:	003ff606 	br	81112f30 <__reset+0xfb0f2f30>

81112f58 <puts>:
81112f58:	00a04534 	movhi	r2,33044
81112f5c:	1082cb04 	addi	r2,r2,2860
81112f60:	200b883a 	mov	r5,r4
81112f64:	11000017 	ldw	r4,0(r2)
81112f68:	1112e901 	jmpi	81112e90 <_puts_r>

81112f6c <lflush>:
81112f6c:	2080030b 	ldhu	r2,12(r4)
81112f70:	00c00244 	movi	r3,9
81112f74:	1080024c 	andi	r2,r2,9
81112f78:	10c00226 	beq	r2,r3,81112f84 <lflush+0x18>
81112f7c:	0005883a 	mov	r2,zero
81112f80:	f800283a 	ret
81112f84:	111b2481 	jmpi	8111b248 <fflush>

81112f88 <__srefill_r>:
81112f88:	defffc04 	addi	sp,sp,-16
81112f8c:	de00012e 	bgeu	sp,et,81112f94 <__srefill_r+0xc>
81112f90:	003b68fa 	trap	3
81112f94:	dc400115 	stw	r17,4(sp)
81112f98:	dc000015 	stw	r16,0(sp)
81112f9c:	dfc00315 	stw	ra,12(sp)
81112fa0:	dc800215 	stw	r18,8(sp)
81112fa4:	2023883a 	mov	r17,r4
81112fa8:	2821883a 	mov	r16,r5
81112fac:	20000226 	beq	r4,zero,81112fb8 <__srefill_r+0x30>
81112fb0:	20800e17 	ldw	r2,56(r4)
81112fb4:	10003c26 	beq	r2,zero,811130a8 <__srefill_r+0x120>
81112fb8:	80c0030b 	ldhu	r3,12(r16)
81112fbc:	1908000c 	andi	r4,r3,8192
81112fc0:	1805883a 	mov	r2,r3
81112fc4:	2000071e 	bne	r4,zero,81112fe4 <__srefill_r+0x5c>
81112fc8:	81001917 	ldw	r4,100(r16)
81112fcc:	18880014 	ori	r2,r3,8192
81112fd0:	00f7ffc4 	movi	r3,-8193
81112fd4:	20c8703a 	and	r4,r4,r3
81112fd8:	8080030d 	sth	r2,12(r16)
81112fdc:	1007883a 	mov	r3,r2
81112fe0:	81001915 	stw	r4,100(r16)
81112fe4:	80000115 	stw	zero,4(r16)
81112fe8:	1100080c 	andi	r4,r2,32
81112fec:	2000571e 	bne	r4,zero,8111314c <__srefill_r+0x1c4>
81112ff0:	1100010c 	andi	r4,r2,4
81112ff4:	20001f26 	beq	r4,zero,81113074 <__srefill_r+0xec>
81112ff8:	81400c17 	ldw	r5,48(r16)
81112ffc:	28000826 	beq	r5,zero,81113020 <__srefill_r+0x98>
81113000:	80801004 	addi	r2,r16,64
81113004:	28800226 	beq	r5,r2,81113010 <__srefill_r+0x88>
81113008:	8809883a 	mov	r4,r17
8111300c:	111ba780 	call	8111ba78 <_free_r>
81113010:	80800f17 	ldw	r2,60(r16)
81113014:	80000c15 	stw	zero,48(r16)
81113018:	80800115 	stw	r2,4(r16)
8111301c:	1000391e 	bne	r2,zero,81113104 <__srefill_r+0x17c>
81113020:	80800417 	ldw	r2,16(r16)
81113024:	10004b26 	beq	r2,zero,81113154 <__srefill_r+0x1cc>
81113028:	8480030b 	ldhu	r18,12(r16)
8111302c:	908000cc 	andi	r2,r18,3
81113030:	10001f1e 	bne	r2,zero,811130b0 <__srefill_r+0x128>
81113034:	81800417 	ldw	r6,16(r16)
81113038:	80800817 	ldw	r2,32(r16)
8111303c:	81c00517 	ldw	r7,20(r16)
81113040:	81400717 	ldw	r5,28(r16)
81113044:	81800015 	stw	r6,0(r16)
81113048:	8809883a 	mov	r4,r17
8111304c:	103ee83a 	callr	r2
81113050:	80800115 	stw	r2,4(r16)
81113054:	00800e0e 	bge	zero,r2,81113090 <__srefill_r+0x108>
81113058:	0005883a 	mov	r2,zero
8111305c:	dfc00317 	ldw	ra,12(sp)
81113060:	dc800217 	ldw	r18,8(sp)
81113064:	dc400117 	ldw	r17,4(sp)
81113068:	dc000017 	ldw	r16,0(sp)
8111306c:	dec00404 	addi	sp,sp,16
81113070:	f800283a 	ret
81113074:	1100040c 	andi	r4,r2,16
81113078:	20003026 	beq	r4,zero,8111313c <__srefill_r+0x1b4>
8111307c:	1080020c 	andi	r2,r2,8
81113080:	1000241e 	bne	r2,zero,81113114 <__srefill_r+0x18c>
81113084:	18c00114 	ori	r3,r3,4
81113088:	80c0030d 	sth	r3,12(r16)
8111308c:	003fe406 	br	81113020 <__reset+0xfb0f3020>
81113090:	80c0030b 	ldhu	r3,12(r16)
81113094:	1000161e 	bne	r2,zero,811130f0 <__srefill_r+0x168>
81113098:	18c00814 	ori	r3,r3,32
8111309c:	00bfffc4 	movi	r2,-1
811130a0:	80c0030d 	sth	r3,12(r16)
811130a4:	003fed06 	br	8111305c <__reset+0xfb0f305c>
811130a8:	111b5e00 	call	8111b5e0 <__sinit>
811130ac:	003fc206 	br	81112fb8 <__reset+0xfb0f2fb8>
811130b0:	00a04534 	movhi	r2,33044
811130b4:	1082ca04 	addi	r2,r2,2856
811130b8:	11000017 	ldw	r4,0(r2)
811130bc:	01604474 	movhi	r5,33041
811130c0:	00800044 	movi	r2,1
811130c4:	294bdb04 	addi	r5,r5,12140
811130c8:	8080030d 	sth	r2,12(r16)
811130cc:	111c2540 	call	8111c254 <_fwalk>
811130d0:	00800244 	movi	r2,9
811130d4:	8480030d 	sth	r18,12(r16)
811130d8:	9480024c 	andi	r18,r18,9
811130dc:	90bfd51e 	bne	r18,r2,81113034 <__reset+0xfb0f3034>
811130e0:	800b883a 	mov	r5,r16
811130e4:	8809883a 	mov	r4,r17
811130e8:	111afc00 	call	8111afc0 <__sflush_r>
811130ec:	003fd106 	br	81113034 <__reset+0xfb0f3034>
811130f0:	18c01014 	ori	r3,r3,64
811130f4:	80000115 	stw	zero,4(r16)
811130f8:	00bfffc4 	movi	r2,-1
811130fc:	80c0030d 	sth	r3,12(r16)
81113100:	003fd606 	br	8111305c <__reset+0xfb0f305c>
81113104:	80c00e17 	ldw	r3,56(r16)
81113108:	0005883a 	mov	r2,zero
8111310c:	80c00015 	stw	r3,0(r16)
81113110:	003fd206 	br	8111305c <__reset+0xfb0f305c>
81113114:	800b883a 	mov	r5,r16
81113118:	8809883a 	mov	r4,r17
8111311c:	111b1e40 	call	8111b1e4 <_fflush_r>
81113120:	10000a1e 	bne	r2,zero,8111314c <__srefill_r+0x1c4>
81113124:	8080030b 	ldhu	r2,12(r16)
81113128:	00fffdc4 	movi	r3,-9
8111312c:	80000215 	stw	zero,8(r16)
81113130:	1886703a 	and	r3,r3,r2
81113134:	80000615 	stw	zero,24(r16)
81113138:	003fd206 	br	81113084 <__reset+0xfb0f3084>
8111313c:	00800244 	movi	r2,9
81113140:	88800015 	stw	r2,0(r17)
81113144:	18c01014 	ori	r3,r3,64
81113148:	80c0030d 	sth	r3,12(r16)
8111314c:	00bfffc4 	movi	r2,-1
81113150:	003fc206 	br	8111305c <__reset+0xfb0f305c>
81113154:	800b883a 	mov	r5,r16
81113158:	8809883a 	mov	r4,r17
8111315c:	111215c0 	call	8111215c <__smakebuf_r>
81113160:	003fb106 	br	81113028 <__reset+0xfb0f3028>

81113164 <_sbrk_r>:
81113164:	defffd04 	addi	sp,sp,-12
81113168:	de00012e 	bgeu	sp,et,81113170 <_sbrk_r+0xc>
8111316c:	003b68fa 	trap	3
81113170:	dc000015 	stw	r16,0(sp)
81113174:	04204534 	movhi	r16,33044
81113178:	dc400115 	stw	r17,4(sp)
8111317c:	84032504 	addi	r16,r16,3220
81113180:	2023883a 	mov	r17,r4
81113184:	2809883a 	mov	r4,r5
81113188:	dfc00215 	stw	ra,8(sp)
8111318c:	80000015 	stw	zero,0(r16)
81113190:	1127d4c0 	call	81127d4c <sbrk>
81113194:	00ffffc4 	movi	r3,-1
81113198:	10c00526 	beq	r2,r3,811131b0 <_sbrk_r+0x4c>
8111319c:	dfc00217 	ldw	ra,8(sp)
811131a0:	dc400117 	ldw	r17,4(sp)
811131a4:	dc000017 	ldw	r16,0(sp)
811131a8:	dec00304 	addi	sp,sp,12
811131ac:	f800283a 	ret
811131b0:	80c00017 	ldw	r3,0(r16)
811131b4:	183ff926 	beq	r3,zero,8111319c <__reset+0xfb0f319c>
811131b8:	88c00015 	stw	r3,0(r17)
811131bc:	003ff706 	br	8111319c <__reset+0xfb0f319c>

811131c0 <scanf>:
811131c0:	defffc04 	addi	sp,sp,-16
811131c4:	de00012e 	bgeu	sp,et,811131cc <scanf+0xc>
811131c8:	003b68fa 	trap	3
811131cc:	dfc00015 	stw	ra,0(sp)
811131d0:	d9400115 	stw	r5,4(sp)
811131d4:	d9800215 	stw	r6,8(sp)
811131d8:	d9c00315 	stw	r7,12(sp)
811131dc:	00a04534 	movhi	r2,33044
811131e0:	1082cb04 	addi	r2,r2,2860
811131e4:	200d883a 	mov	r6,r4
811131e8:	11000017 	ldw	r4,0(r2)
811131ec:	d9c00104 	addi	r7,sp,4
811131f0:	21400117 	ldw	r5,4(r4)
811131f4:	11194b40 	call	811194b4 <_vfscanf_r>
811131f8:	dfc00017 	ldw	ra,0(sp)
811131fc:	dec00404 	addi	sp,sp,16
81113200:	f800283a 	ret

81113204 <_scanf_r>:
81113204:	defffd04 	addi	sp,sp,-12
81113208:	2805883a 	mov	r2,r5
8111320c:	de00012e 	bgeu	sp,et,81113214 <_scanf_r+0x10>
81113210:	003b68fa 	trap	3
81113214:	dfc00015 	stw	ra,0(sp)
81113218:	d9800115 	stw	r6,4(sp)
8111321c:	d9c00215 	stw	r7,8(sp)
81113220:	21400117 	ldw	r5,4(r4)
81113224:	d9c00104 	addi	r7,sp,4
81113228:	100d883a 	mov	r6,r2
8111322c:	11194b40 	call	811194b4 <_vfscanf_r>
81113230:	dfc00017 	ldw	ra,0(sp)
81113234:	dec00304 	addi	sp,sp,12
81113238:	f800283a 	ret

8111323c <_sprintf_r>:
8111323c:	deffe404 	addi	sp,sp,-112
81113240:	2807883a 	mov	r3,r5
81113244:	de00012e 	bgeu	sp,et,8111324c <_sprintf_r+0x10>
81113248:	003b68fa 	trap	3
8111324c:	dfc01a15 	stw	ra,104(sp)
81113250:	d9c01b15 	stw	r7,108(sp)
81113254:	00a00034 	movhi	r2,32768
81113258:	10bfffc4 	addi	r2,r2,-1
8111325c:	02008204 	movi	r8,520
81113260:	d8800215 	stw	r2,8(sp)
81113264:	d8800515 	stw	r2,20(sp)
81113268:	d9c01b04 	addi	r7,sp,108
8111326c:	d80b883a 	mov	r5,sp
81113270:	00bfffc4 	movi	r2,-1
81113274:	d8c00015 	stw	r3,0(sp)
81113278:	d8c00415 	stw	r3,16(sp)
8111327c:	da00030d 	sth	r8,12(sp)
81113280:	d880038d 	sth	r2,14(sp)
81113284:	11137a40 	call	811137a4 <___svfprintf_internal_r>
81113288:	d8c00017 	ldw	r3,0(sp)
8111328c:	18000005 	stb	zero,0(r3)
81113290:	dfc01a17 	ldw	ra,104(sp)
81113294:	dec01c04 	addi	sp,sp,112
81113298:	f800283a 	ret

8111329c <sprintf>:
8111329c:	deffe304 	addi	sp,sp,-116
811132a0:	2007883a 	mov	r3,r4
811132a4:	de00012e 	bgeu	sp,et,811132ac <sprintf+0x10>
811132a8:	003b68fa 	trap	3
811132ac:	dfc01a15 	stw	ra,104(sp)
811132b0:	d9801b15 	stw	r6,108(sp)
811132b4:	d9c01c15 	stw	r7,112(sp)
811132b8:	01204534 	movhi	r4,33044
811132bc:	2102cb04 	addi	r4,r4,2860
811132c0:	21000017 	ldw	r4,0(r4)
811132c4:	00a00034 	movhi	r2,32768
811132c8:	10bfffc4 	addi	r2,r2,-1
811132cc:	280d883a 	mov	r6,r5
811132d0:	02008204 	movi	r8,520
811132d4:	d8800215 	stw	r2,8(sp)
811132d8:	d8800515 	stw	r2,20(sp)
811132dc:	d9c01b04 	addi	r7,sp,108
811132e0:	d80b883a 	mov	r5,sp
811132e4:	00bfffc4 	movi	r2,-1
811132e8:	d8c00015 	stw	r3,0(sp)
811132ec:	d8c00415 	stw	r3,16(sp)
811132f0:	da00030d 	sth	r8,12(sp)
811132f4:	d880038d 	sth	r2,14(sp)
811132f8:	11137a40 	call	811137a4 <___svfprintf_internal_r>
811132fc:	d8c00017 	ldw	r3,0(sp)
81113300:	18000005 	stb	zero,0(r3)
81113304:	dfc01a17 	ldw	ra,104(sp)
81113308:	dec01d04 	addi	sp,sp,116
8111330c:	f800283a 	ret

81113310 <__sread>:
81113310:	defffe04 	addi	sp,sp,-8
81113314:	de00012e 	bgeu	sp,et,8111331c <__sread+0xc>
81113318:	003b68fa 	trap	3
8111331c:	dc000015 	stw	r16,0(sp)
81113320:	2821883a 	mov	r16,r5
81113324:	2940038f 	ldh	r5,14(r5)
81113328:	dfc00115 	stw	ra,4(sp)
8111332c:	111daa40 	call	8111daa4 <_read_r>
81113330:	10000716 	blt	r2,zero,81113350 <__sread+0x40>
81113334:	80c01417 	ldw	r3,80(r16)
81113338:	1887883a 	add	r3,r3,r2
8111333c:	80c01415 	stw	r3,80(r16)
81113340:	dfc00117 	ldw	ra,4(sp)
81113344:	dc000017 	ldw	r16,0(sp)
81113348:	dec00204 	addi	sp,sp,8
8111334c:	f800283a 	ret
81113350:	80c0030b 	ldhu	r3,12(r16)
81113354:	18fbffcc 	andi	r3,r3,61439
81113358:	80c0030d 	sth	r3,12(r16)
8111335c:	dfc00117 	ldw	ra,4(sp)
81113360:	dc000017 	ldw	r16,0(sp)
81113364:	dec00204 	addi	sp,sp,8
81113368:	f800283a 	ret

8111336c <__seofread>:
8111336c:	0005883a 	mov	r2,zero
81113370:	f800283a 	ret

81113374 <__swrite>:
81113374:	defffb04 	addi	sp,sp,-20
81113378:	de00012e 	bgeu	sp,et,81113380 <__swrite+0xc>
8111337c:	003b68fa 	trap	3
81113380:	2880030b 	ldhu	r2,12(r5)
81113384:	dcc00315 	stw	r19,12(sp)
81113388:	dc800215 	stw	r18,8(sp)
8111338c:	dc400115 	stw	r17,4(sp)
81113390:	dc000015 	stw	r16,0(sp)
81113394:	dfc00415 	stw	ra,16(sp)
81113398:	10c0400c 	andi	r3,r2,256
8111339c:	2821883a 	mov	r16,r5
811133a0:	2023883a 	mov	r17,r4
811133a4:	3025883a 	mov	r18,r6
811133a8:	3827883a 	mov	r19,r7
811133ac:	18000526 	beq	r3,zero,811133c4 <__swrite+0x50>
811133b0:	2940038f 	ldh	r5,14(r5)
811133b4:	01c00084 	movi	r7,2
811133b8:	000d883a 	mov	r6,zero
811133bc:	111c55c0 	call	8111c55c <_lseek_r>
811133c0:	8080030b 	ldhu	r2,12(r16)
811133c4:	8140038f 	ldh	r5,14(r16)
811133c8:	10bbffcc 	andi	r2,r2,61439
811133cc:	980f883a 	mov	r7,r19
811133d0:	900d883a 	mov	r6,r18
811133d4:	8809883a 	mov	r4,r17
811133d8:	8080030d 	sth	r2,12(r16)
811133dc:	dfc00417 	ldw	ra,16(sp)
811133e0:	dcc00317 	ldw	r19,12(sp)
811133e4:	dc800217 	ldw	r18,8(sp)
811133e8:	dc400117 	ldw	r17,4(sp)
811133ec:	dc000017 	ldw	r16,0(sp)
811133f0:	dec00504 	addi	sp,sp,20
811133f4:	11195081 	jmpi	81119508 <_write_r>

811133f8 <__sseek>:
811133f8:	defffe04 	addi	sp,sp,-8
811133fc:	de00012e 	bgeu	sp,et,81113404 <__sseek+0xc>
81113400:	003b68fa 	trap	3
81113404:	dc000015 	stw	r16,0(sp)
81113408:	2821883a 	mov	r16,r5
8111340c:	2940038f 	ldh	r5,14(r5)
81113410:	dfc00115 	stw	ra,4(sp)
81113414:	111c55c0 	call	8111c55c <_lseek_r>
81113418:	00ffffc4 	movi	r3,-1
8111341c:	10c00826 	beq	r2,r3,81113440 <__sseek+0x48>
81113420:	80c0030b 	ldhu	r3,12(r16)
81113424:	80801415 	stw	r2,80(r16)
81113428:	18c40014 	ori	r3,r3,4096
8111342c:	80c0030d 	sth	r3,12(r16)
81113430:	dfc00117 	ldw	ra,4(sp)
81113434:	dc000017 	ldw	r16,0(sp)
81113438:	dec00204 	addi	sp,sp,8
8111343c:	f800283a 	ret
81113440:	80c0030b 	ldhu	r3,12(r16)
81113444:	18fbffcc 	andi	r3,r3,61439
81113448:	80c0030d 	sth	r3,12(r16)
8111344c:	dfc00117 	ldw	ra,4(sp)
81113450:	dc000017 	ldw	r16,0(sp)
81113454:	dec00204 	addi	sp,sp,8
81113458:	f800283a 	ret

8111345c <__sclose>:
8111345c:	2940038f 	ldh	r5,14(r5)
81113460:	11196cc1 	jmpi	811196cc <_close_r>

81113464 <strcspn>:
81113464:	21c00007 	ldb	r7,0(r4)
81113468:	38000f26 	beq	r7,zero,811134a8 <strcspn+0x44>
8111346c:	2a000007 	ldb	r8,0(r5)
81113470:	2005883a 	mov	r2,r4
81113474:	40000726 	beq	r8,zero,81113494 <strcspn+0x30>
81113478:	3a000926 	beq	r7,r8,811134a0 <strcspn+0x3c>
8111347c:	2807883a 	mov	r3,r5
81113480:	00000106 	br	81113488 <strcspn+0x24>
81113484:	31c00626 	beq	r6,r7,811134a0 <strcspn+0x3c>
81113488:	18c00044 	addi	r3,r3,1
8111348c:	19800007 	ldb	r6,0(r3)
81113490:	303ffc1e 	bne	r6,zero,81113484 <__reset+0xfb0f3484>
81113494:	10800044 	addi	r2,r2,1
81113498:	11c00007 	ldb	r7,0(r2)
8111349c:	383ff51e 	bne	r7,zero,81113474 <__reset+0xfb0f3474>
811134a0:	1105c83a 	sub	r2,r2,r4
811134a4:	f800283a 	ret
811134a8:	0005883a 	mov	r2,zero
811134ac:	f800283a 	ret

811134b0 <strlen>:
811134b0:	208000cc 	andi	r2,r4,3
811134b4:	10002026 	beq	r2,zero,81113538 <strlen+0x88>
811134b8:	20800007 	ldb	r2,0(r4)
811134bc:	10002026 	beq	r2,zero,81113540 <strlen+0x90>
811134c0:	2005883a 	mov	r2,r4
811134c4:	00000206 	br	811134d0 <strlen+0x20>
811134c8:	10c00007 	ldb	r3,0(r2)
811134cc:	18001826 	beq	r3,zero,81113530 <strlen+0x80>
811134d0:	10800044 	addi	r2,r2,1
811134d4:	10c000cc 	andi	r3,r2,3
811134d8:	183ffb1e 	bne	r3,zero,811134c8 <__reset+0xfb0f34c8>
811134dc:	10c00017 	ldw	r3,0(r2)
811134e0:	01ffbff4 	movhi	r7,65279
811134e4:	39ffbfc4 	addi	r7,r7,-257
811134e8:	00ca303a 	nor	r5,zero,r3
811134ec:	01a02074 	movhi	r6,32897
811134f0:	19c7883a 	add	r3,r3,r7
811134f4:	31a02004 	addi	r6,r6,-32640
811134f8:	1946703a 	and	r3,r3,r5
811134fc:	1986703a 	and	r3,r3,r6
81113500:	1800091e 	bne	r3,zero,81113528 <strlen+0x78>
81113504:	10800104 	addi	r2,r2,4
81113508:	10c00017 	ldw	r3,0(r2)
8111350c:	19cb883a 	add	r5,r3,r7
81113510:	00c6303a 	nor	r3,zero,r3
81113514:	28c6703a 	and	r3,r5,r3
81113518:	1986703a 	and	r3,r3,r6
8111351c:	183ff926 	beq	r3,zero,81113504 <__reset+0xfb0f3504>
81113520:	00000106 	br	81113528 <strlen+0x78>
81113524:	10800044 	addi	r2,r2,1
81113528:	10c00007 	ldb	r3,0(r2)
8111352c:	183ffd1e 	bne	r3,zero,81113524 <__reset+0xfb0f3524>
81113530:	1105c83a 	sub	r2,r2,r4
81113534:	f800283a 	ret
81113538:	2005883a 	mov	r2,r4
8111353c:	003fe706 	br	811134dc <__reset+0xfb0f34dc>
81113540:	0005883a 	mov	r2,zero
81113544:	f800283a 	ret

81113548 <_strtol_r>:
81113548:	00a04534 	movhi	r2,33044
8111354c:	defff404 	addi	sp,sp,-48
81113550:	1082c904 	addi	r2,r2,2852
81113554:	de00012e 	bgeu	sp,et,8111355c <_strtol_r+0x14>
81113558:	003b68fa 	trap	3
8111355c:	dd400715 	stw	r21,28(sp)
81113560:	15400017 	ldw	r21,0(r2)
81113564:	dd800815 	stw	r22,32(sp)
81113568:	dd000615 	stw	r20,24(sp)
8111356c:	dcc00515 	stw	r19,20(sp)
81113570:	d9000015 	stw	r4,0(sp)
81113574:	dfc00b15 	stw	ra,44(sp)
81113578:	df000a15 	stw	fp,40(sp)
8111357c:	ddc00915 	stw	r23,36(sp)
81113580:	dc800415 	stw	r18,16(sp)
81113584:	dc400315 	stw	r17,12(sp)
81113588:	dc000215 	stw	r16,8(sp)
8111358c:	2829883a 	mov	r20,r5
81113590:	3027883a 	mov	r19,r6
81113594:	382d883a 	mov	r22,r7
81113598:	2809883a 	mov	r4,r5
8111359c:	24000003 	ldbu	r16,0(r4)
811135a0:	24400044 	addi	r17,r4,1
811135a4:	2007883a 	mov	r3,r4
811135a8:	ac05883a 	add	r2,r21,r16
811135ac:	10800043 	ldbu	r2,1(r2)
811135b0:	8809883a 	mov	r4,r17
811135b4:	1080020c 	andi	r2,r2,8
811135b8:	103ff81e 	bne	r2,zero,8111359c <__reset+0xfb0f359c>
811135bc:	00800b44 	movi	r2,45
811135c0:	80805826 	beq	r16,r2,81113724 <_strtol_r+0x1dc>
811135c4:	00800ac4 	movi	r2,43
811135c8:	80805a26 	beq	r16,r2,81113734 <_strtol_r+0x1ec>
811135cc:	0039883a 	mov	fp,zero
811135d0:	b0004426 	beq	r22,zero,811136e4 <_strtol_r+0x19c>
811135d4:	00800404 	movi	r2,16
811135d8:	b0806026 	beq	r22,r2,8111375c <_strtol_r+0x214>
811135dc:	b02f883a 	mov	r23,r22
811135e0:	00a00034 	movhi	r2,32768
811135e4:	e025003a 	cmpeq	r18,fp,zero
811135e8:	14a5c83a 	sub	r18,r2,r18
811135ec:	b80b883a 	mov	r5,r23
811135f0:	9009883a 	mov	r4,r18
811135f4:	1124fc40 	call	81124fc4 <__umodsi3>
811135f8:	b80b883a 	mov	r5,r23
811135fc:	9009883a 	mov	r4,r18
81113600:	d8800115 	stw	r2,4(sp)
81113604:	1124f600 	call	81124f60 <__udivsi3>
81113608:	ac07883a 	add	r3,r21,r16
8111360c:	18c00043 	ldbu	r3,1(r3)
81113610:	880b883a 	mov	r5,r17
81113614:	000d883a 	mov	r6,zero
81113618:	1a00010c 	andi	r8,r3,4
8111361c:	0009883a 	mov	r4,zero
81113620:	02800044 	movi	r10,1
81113624:	027fffc4 	movi	r9,-1
81113628:	d9c00117 	ldw	r7,4(sp)
8111362c:	40000e26 	beq	r8,zero,81113668 <_strtol_r+0x120>
81113630:	843ff404 	addi	r16,r16,-48
81113634:	8580120e 	bge	r16,r22,81113680 <_strtol_r+0x138>
81113638:	32400526 	beq	r6,r9,81113650 <_strtol_r+0x108>
8111363c:	11002536 	bltu	r2,r4,811136d4 <_strtol_r+0x18c>
81113640:	20802326 	beq	r4,r2,811136d0 <_strtol_r+0x188>
81113644:	25c9383a 	mul	r4,r4,r23
81113648:	01800044 	movi	r6,1
8111364c:	8109883a 	add	r4,r16,r4
81113650:	2c000003 	ldbu	r16,0(r5)
81113654:	29400044 	addi	r5,r5,1
81113658:	ac07883a 	add	r3,r21,r16
8111365c:	18c00043 	ldbu	r3,1(r3)
81113660:	1a00010c 	andi	r8,r3,4
81113664:	403ff21e 	bne	r8,zero,81113630 <__reset+0xfb0f3630>
81113668:	18c000cc 	andi	r3,r3,3
8111366c:	18000426 	beq	r3,zero,81113680 <_strtol_r+0x138>
81113670:	1a801a26 	beq	r3,r10,811136dc <_strtol_r+0x194>
81113674:	00c015c4 	movi	r3,87
81113678:	80e1c83a 	sub	r16,r16,r3
8111367c:	85bfee16 	blt	r16,r22,81113638 <__reset+0xfb0f3638>
81113680:	00bfffc4 	movi	r2,-1
81113684:	30801e26 	beq	r6,r2,81113700 <_strtol_r+0x1b8>
81113688:	e0001b1e 	bne	fp,zero,811136f8 <_strtol_r+0x1b0>
8111368c:	2005883a 	mov	r2,r4
81113690:	98000326 	beq	r19,zero,811136a0 <_strtol_r+0x158>
81113694:	3000211e 	bne	r6,zero,8111371c <_strtol_r+0x1d4>
81113698:	a00b883a 	mov	r5,r20
8111369c:	99400015 	stw	r5,0(r19)
811136a0:	dfc00b17 	ldw	ra,44(sp)
811136a4:	df000a17 	ldw	fp,40(sp)
811136a8:	ddc00917 	ldw	r23,36(sp)
811136ac:	dd800817 	ldw	r22,32(sp)
811136b0:	dd400717 	ldw	r21,28(sp)
811136b4:	dd000617 	ldw	r20,24(sp)
811136b8:	dcc00517 	ldw	r19,20(sp)
811136bc:	dc800417 	ldw	r18,16(sp)
811136c0:	dc400317 	ldw	r17,12(sp)
811136c4:	dc000217 	ldw	r16,8(sp)
811136c8:	dec00c04 	addi	sp,sp,48
811136cc:	f800283a 	ret
811136d0:	3c3fdc0e 	bge	r7,r16,81113644 <__reset+0xfb0f3644>
811136d4:	01bfffc4 	movi	r6,-1
811136d8:	003fdd06 	br	81113650 <__reset+0xfb0f3650>
811136dc:	00c00dc4 	movi	r3,55
811136e0:	003fe506 	br	81113678 <__reset+0xfb0f3678>
811136e4:	00800c04 	movi	r2,48
811136e8:	80801626 	beq	r16,r2,81113744 <_strtol_r+0x1fc>
811136ec:	05800284 	movi	r22,10
811136f0:	b02f883a 	mov	r23,r22
811136f4:	003fba06 	br	811135e0 <__reset+0xfb0f35e0>
811136f8:	0109c83a 	sub	r4,zero,r4
811136fc:	003fe306 	br	8111368c <__reset+0xfb0f368c>
81113700:	d9000017 	ldw	r4,0(sp)
81113704:	00c00884 	movi	r3,34
81113708:	e005003a 	cmpeq	r2,fp,zero
8111370c:	20c00015 	stw	r3,0(r4)
81113710:	00e00034 	movhi	r3,32768
81113714:	1885c83a 	sub	r2,r3,r2
81113718:	983fe126 	beq	r19,zero,811136a0 <__reset+0xfb0f36a0>
8111371c:	297fffc4 	addi	r5,r5,-1
81113720:	003fde06 	br	8111369c <__reset+0xfb0f369c>
81113724:	1c400084 	addi	r17,r3,2
81113728:	1c000043 	ldbu	r16,1(r3)
8111372c:	07000044 	movi	fp,1
81113730:	003fa706 	br	811135d0 <__reset+0xfb0f35d0>
81113734:	1c400084 	addi	r17,r3,2
81113738:	1c000043 	ldbu	r16,1(r3)
8111373c:	0039883a 	mov	fp,zero
81113740:	003fa306 	br	811135d0 <__reset+0xfb0f35d0>
81113744:	88800003 	ldbu	r2,0(r17)
81113748:	00c01604 	movi	r3,88
8111374c:	108037cc 	andi	r2,r2,223
81113750:	10c00826 	beq	r2,r3,81113774 <_strtol_r+0x22c>
81113754:	05800204 	movi	r22,8
81113758:	003fa006 	br	811135dc <__reset+0xfb0f35dc>
8111375c:	00800c04 	movi	r2,48
81113760:	80bf9e1e 	bne	r16,r2,811135dc <__reset+0xfb0f35dc>
81113764:	88800003 	ldbu	r2,0(r17)
81113768:	00c01604 	movi	r3,88
8111376c:	108037cc 	andi	r2,r2,223
81113770:	10ff9a1e 	bne	r2,r3,811135dc <__reset+0xfb0f35dc>
81113774:	05c00404 	movi	r23,16
81113778:	8c000043 	ldbu	r16,1(r17)
8111377c:	b82d883a 	mov	r22,r23
81113780:	8c400084 	addi	r17,r17,2
81113784:	003f9606 	br	811135e0 <__reset+0xfb0f35e0>

81113788 <strtol>:
81113788:	00a04534 	movhi	r2,33044
8111378c:	1082cb04 	addi	r2,r2,2860
81113790:	300f883a 	mov	r7,r6
81113794:	280d883a 	mov	r6,r5
81113798:	200b883a 	mov	r5,r4
8111379c:	11000017 	ldw	r4,0(r2)
811137a0:	11135481 	jmpi	81113548 <_strtol_r>

811137a4 <___svfprintf_internal_r>:
811137a4:	deffb704 	addi	sp,sp,-292
811137a8:	de00012e 	bgeu	sp,et,811137b0 <___svfprintf_internal_r+0xc>
811137ac:	003b68fa 	trap	3
811137b0:	dfc04815 	stw	ra,288(sp)
811137b4:	ddc04615 	stw	r23,280(sp)
811137b8:	d9402c15 	stw	r5,176(sp)
811137bc:	d9003915 	stw	r4,228(sp)
811137c0:	302f883a 	mov	r23,r6
811137c4:	d9c02d15 	stw	r7,180(sp)
811137c8:	df004715 	stw	fp,284(sp)
811137cc:	dd804515 	stw	r22,276(sp)
811137d0:	dd404415 	stw	r21,272(sp)
811137d4:	dd004315 	stw	r20,268(sp)
811137d8:	dcc04215 	stw	r19,264(sp)
811137dc:	dc804115 	stw	r18,260(sp)
811137e0:	dc404015 	stw	r17,256(sp)
811137e4:	dc003f15 	stw	r16,252(sp)
811137e8:	111c52c0 	call	8111c52c <_localeconv_r>
811137ec:	10800017 	ldw	r2,0(r2)
811137f0:	1009883a 	mov	r4,r2
811137f4:	d8803415 	stw	r2,208(sp)
811137f8:	11134b00 	call	811134b0 <strlen>
811137fc:	d8c02c17 	ldw	r3,176(sp)
81113800:	d8803815 	stw	r2,224(sp)
81113804:	1880030b 	ldhu	r2,12(r3)
81113808:	1080200c 	andi	r2,r2,128
8111380c:	10000226 	beq	r2,zero,81113818 <___svfprintf_internal_r+0x74>
81113810:	18800417 	ldw	r2,16(r3)
81113814:	10067f26 	beq	r2,zero,81115214 <___svfprintf_internal_r+0x1a70>
81113818:	dcc03917 	ldw	r19,228(sp)
8111381c:	d8c00404 	addi	r3,sp,16
81113820:	05604534 	movhi	r21,33044
81113824:	d9001e04 	addi	r4,sp,120
81113828:	ad79d184 	addi	r21,r21,-6330
8111382c:	d8c01e15 	stw	r3,120(sp)
81113830:	d8002015 	stw	zero,128(sp)
81113834:	d8001f15 	stw	zero,124(sp)
81113838:	d8003315 	stw	zero,204(sp)
8111383c:	d8003615 	stw	zero,216(sp)
81113840:	d8003715 	stw	zero,220(sp)
81113844:	1811883a 	mov	r8,r3
81113848:	d8003a15 	stw	zero,232(sp)
8111384c:	d8003b15 	stw	zero,236(sp)
81113850:	d8002f15 	stw	zero,188(sp)
81113854:	d9002815 	stw	r4,160(sp)
81113858:	b8800007 	ldb	r2,0(r23)
8111385c:	10026726 	beq	r2,zero,811141fc <___svfprintf_internal_r+0xa58>
81113860:	00c00944 	movi	r3,37
81113864:	b821883a 	mov	r16,r23
81113868:	10c0021e 	bne	r2,r3,81113874 <___svfprintf_internal_r+0xd0>
8111386c:	00001406 	br	811138c0 <___svfprintf_internal_r+0x11c>
81113870:	10c00326 	beq	r2,r3,81113880 <___svfprintf_internal_r+0xdc>
81113874:	84000044 	addi	r16,r16,1
81113878:	80800007 	ldb	r2,0(r16)
8111387c:	103ffc1e 	bne	r2,zero,81113870 <__reset+0xfb0f3870>
81113880:	85e3c83a 	sub	r17,r16,r23
81113884:	88000e26 	beq	r17,zero,811138c0 <___svfprintf_internal_r+0x11c>
81113888:	d8c02017 	ldw	r3,128(sp)
8111388c:	d8801f17 	ldw	r2,124(sp)
81113890:	45c00015 	stw	r23,0(r8)
81113894:	1c47883a 	add	r3,r3,r17
81113898:	10800044 	addi	r2,r2,1
8111389c:	d8c02015 	stw	r3,128(sp)
811138a0:	44400115 	stw	r17,4(r8)
811138a4:	d8801f15 	stw	r2,124(sp)
811138a8:	00c001c4 	movi	r3,7
811138ac:	18809716 	blt	r3,r2,81113b0c <___svfprintf_internal_r+0x368>
811138b0:	42000204 	addi	r8,r8,8
811138b4:	d9402f17 	ldw	r5,188(sp)
811138b8:	2c4b883a 	add	r5,r5,r17
811138bc:	d9402f15 	stw	r5,188(sp)
811138c0:	80800007 	ldb	r2,0(r16)
811138c4:	10009826 	beq	r2,zero,81113b28 <___svfprintf_internal_r+0x384>
811138c8:	84400047 	ldb	r17,1(r16)
811138cc:	00bfffc4 	movi	r2,-1
811138d0:	85c00044 	addi	r23,r16,1
811138d4:	d8002785 	stb	zero,158(sp)
811138d8:	0007883a 	mov	r3,zero
811138dc:	000f883a 	mov	r7,zero
811138e0:	d8802915 	stw	r2,164(sp)
811138e4:	d8003115 	stw	zero,196(sp)
811138e8:	0025883a 	mov	r18,zero
811138ec:	01401604 	movi	r5,88
811138f0:	01800244 	movi	r6,9
811138f4:	02800a84 	movi	r10,42
811138f8:	02401b04 	movi	r9,108
811138fc:	bdc00044 	addi	r23,r23,1
81113900:	88bff804 	addi	r2,r17,-32
81113904:	2882f036 	bltu	r5,r2,811144c8 <___svfprintf_internal_r+0xd24>
81113908:	100490ba 	slli	r2,r2,2
8111390c:	01204474 	movhi	r4,33041
81113910:	210e4804 	addi	r4,r4,14624
81113914:	1105883a 	add	r2,r2,r4
81113918:	10800017 	ldw	r2,0(r2)
8111391c:	1000683a 	jmp	r2
81113920:	81114430 	cmpltui	r4,r16,17680
81113924:	811144c8 	cmpgei	r4,r16,17683
81113928:	811144c8 	cmpgei	r4,r16,17683
8111392c:	81114424 	muli	r4,r16,17680
81113930:	811144c8 	cmpgei	r4,r16,17683
81113934:	811144c8 	cmpgei	r4,r16,17683
81113938:	811144c8 	cmpgei	r4,r16,17683
8111393c:	811144c8 	cmpgei	r4,r16,17683
81113940:	811144c8 	cmpgei	r4,r16,17683
81113944:	811144c8 	cmpgei	r4,r16,17683
81113948:	81113b84 	addi	r4,r16,17646
8111394c:	81114360 	cmpeqi	r4,r16,17677
81113950:	811144c8 	cmpgei	r4,r16,17683
81113954:	81113a94 	ori	r4,r16,17642
81113958:	81113bac 	andhi	r4,r16,17646
8111395c:	811144c8 	cmpgei	r4,r16,17683
81113960:	81113c20 	cmpeqi	r4,r16,17648
81113964:	81113bec 	andhi	r4,r16,17647
81113968:	81113bec 	andhi	r4,r16,17647
8111396c:	81113bec 	andhi	r4,r16,17647
81113970:	81113bec 	andhi	r4,r16,17647
81113974:	81113bec 	andhi	r4,r16,17647
81113978:	81113bec 	andhi	r4,r16,17647
8111397c:	81113bec 	andhi	r4,r16,17647
81113980:	81113bec 	andhi	r4,r16,17647
81113984:	81113bec 	andhi	r4,r16,17647
81113988:	811144c8 	cmpgei	r4,r16,17683
8111398c:	811144c8 	cmpgei	r4,r16,17683
81113990:	811144c8 	cmpgei	r4,r16,17683
81113994:	811144c8 	cmpgei	r4,r16,17683
81113998:	811144c8 	cmpgei	r4,r16,17683
8111399c:	811144c8 	cmpgei	r4,r16,17683
811139a0:	811144c8 	cmpgei	r4,r16,17683
811139a4:	811144c8 	cmpgei	r4,r16,17683
811139a8:	811144c8 	cmpgei	r4,r16,17683
811139ac:	811144c8 	cmpgei	r4,r16,17683
811139b0:	81113cd8 	cmpnei	r4,r16,17651
811139b4:	81113c2c 	andhi	r4,r16,17648
811139b8:	811144c8 	cmpgei	r4,r16,17683
811139bc:	81113c2c 	andhi	r4,r16,17648
811139c0:	811144c8 	cmpgei	r4,r16,17683
811139c4:	811144c8 	cmpgei	r4,r16,17683
811139c8:	811144c8 	cmpgei	r4,r16,17683
811139cc:	811144c8 	cmpgei	r4,r16,17683
811139d0:	81113ccc 	andi	r4,r16,17651
811139d4:	811144c8 	cmpgei	r4,r16,17683
811139d8:	811144c8 	cmpgei	r4,r16,17683
811139dc:	81113d94 	ori	r4,r16,17654
811139e0:	811144c8 	cmpgei	r4,r16,17683
811139e4:	811144c8 	cmpgei	r4,r16,17683
811139e8:	811144c8 	cmpgei	r4,r16,17683
811139ec:	811144c8 	cmpgei	r4,r16,17683
811139f0:	811144c8 	cmpgei	r4,r16,17683
811139f4:	81114204 	addi	r4,r16,17672
811139f8:	811144c8 	cmpgei	r4,r16,17683
811139fc:	811144c8 	cmpgei	r4,r16,17683
81113a00:	81114264 	muli	r4,r16,17673
81113a04:	811144c8 	cmpgei	r4,r16,17683
81113a08:	811144c8 	cmpgei	r4,r16,17683
81113a0c:	811144c8 	cmpgei	r4,r16,17683
81113a10:	811144c8 	cmpgei	r4,r16,17683
81113a14:	811144c8 	cmpgei	r4,r16,17683
81113a18:	811144c8 	cmpgei	r4,r16,17683
81113a1c:	811144c8 	cmpgei	r4,r16,17683
81113a20:	811144c8 	cmpgei	r4,r16,17683
81113a24:	811144c8 	cmpgei	r4,r16,17683
81113a28:	811144c8 	cmpgei	r4,r16,17683
81113a2c:	81114314 	ori	r4,r16,17676
81113a30:	81114450 	cmplti	r4,r16,17681
81113a34:	81113c2c 	andhi	r4,r16,17648
81113a38:	81113c2c 	andhi	r4,r16,17648
81113a3c:	81113c2c 	andhi	r4,r16,17648
81113a40:	811144a4 	muli	r4,r16,17682
81113a44:	81114450 	cmplti	r4,r16,17681
81113a48:	811144c8 	cmpgei	r4,r16,17683
81113a4c:	811144c8 	cmpgei	r4,r16,17683
81113a50:	81114460 	cmpeqi	r4,r16,17681
81113a54:	811144c8 	cmpgei	r4,r16,17683
81113a58:	81114470 	cmpltui	r4,r16,17681
81113a5c:	81114350 	cmplti	r4,r16,17677
81113a60:	81113aa0 	cmpeqi	r4,r16,17642
81113a64:	81114370 	cmpltui	r4,r16,17677
81113a68:	811144c8 	cmpgei	r4,r16,17683
81113a6c:	8111437c 	xorhi	r4,r16,17677
81113a70:	811144c8 	cmpgei	r4,r16,17683
81113a74:	811143d8 	cmpnei	r4,r16,17679
81113a78:	811144c8 	cmpgei	r4,r16,17683
81113a7c:	811144c8 	cmpgei	r4,r16,17683
81113a80:	811143e8 	cmpgeui	r4,r16,17679
81113a84:	d9003117 	ldw	r4,196(sp)
81113a88:	d8802d15 	stw	r2,180(sp)
81113a8c:	0109c83a 	sub	r4,zero,r4
81113a90:	d9003115 	stw	r4,196(sp)
81113a94:	94800114 	ori	r18,r18,4
81113a98:	bc400007 	ldb	r17,0(r23)
81113a9c:	003f9706 	br	811138fc <__reset+0xfb0f38fc>
81113aa0:	00800c04 	movi	r2,48
81113aa4:	d9002d17 	ldw	r4,180(sp)
81113aa8:	d9402917 	ldw	r5,164(sp)
81113aac:	d8802705 	stb	r2,156(sp)
81113ab0:	00801e04 	movi	r2,120
81113ab4:	d8802745 	stb	r2,157(sp)
81113ab8:	d8002785 	stb	zero,158(sp)
81113abc:	20c00104 	addi	r3,r4,4
81113ac0:	25000017 	ldw	r20,0(r4)
81113ac4:	002d883a 	mov	r22,zero
81113ac8:	90800094 	ori	r2,r18,2
81113acc:	28028616 	blt	r5,zero,811144e8 <___svfprintf_internal_r+0xd44>
81113ad0:	00bfdfc4 	movi	r2,-129
81113ad4:	90a4703a 	and	r18,r18,r2
81113ad8:	d8c02d15 	stw	r3,180(sp)
81113adc:	94800094 	ori	r18,r18,2
81113ae0:	a002731e 	bne	r20,zero,811144b0 <___svfprintf_internal_r+0xd0c>
81113ae4:	00a04534 	movhi	r2,33044
81113ae8:	10b9ca04 	addi	r2,r2,-6360
81113aec:	d8803a15 	stw	r2,232(sp)
81113af0:	04401e04 	movi	r17,120
81113af4:	d8c02917 	ldw	r3,164(sp)
81113af8:	0039883a 	mov	fp,zero
81113afc:	1801d526 	beq	r3,zero,81114254 <___svfprintf_internal_r+0xab0>
81113b00:	0029883a 	mov	r20,zero
81113b04:	002d883a 	mov	r22,zero
81113b08:	0001f106 	br	811142d0 <___svfprintf_internal_r+0xb2c>
81113b0c:	d9402c17 	ldw	r5,176(sp)
81113b10:	d9801e04 	addi	r6,sp,120
81113b14:	9809883a 	mov	r4,r19
81113b18:	11202640 	call	81120264 <__ssprint_r>
81113b1c:	1000081e 	bne	r2,zero,81113b40 <___svfprintf_internal_r+0x39c>
81113b20:	da000404 	addi	r8,sp,16
81113b24:	003f6306 	br	811138b4 <__reset+0xfb0f38b4>
81113b28:	d8802017 	ldw	r2,128(sp)
81113b2c:	10000426 	beq	r2,zero,81113b40 <___svfprintf_internal_r+0x39c>
81113b30:	d9402c17 	ldw	r5,176(sp)
81113b34:	d9003917 	ldw	r4,228(sp)
81113b38:	d9801e04 	addi	r6,sp,120
81113b3c:	11202640 	call	81120264 <__ssprint_r>
81113b40:	d8802c17 	ldw	r2,176(sp)
81113b44:	10c0030b 	ldhu	r3,12(r2)
81113b48:	d8802f17 	ldw	r2,188(sp)
81113b4c:	18c0100c 	andi	r3,r3,64
81113b50:	1805f51e 	bne	r3,zero,81115328 <___svfprintf_internal_r+0x1b84>
81113b54:	dfc04817 	ldw	ra,288(sp)
81113b58:	df004717 	ldw	fp,284(sp)
81113b5c:	ddc04617 	ldw	r23,280(sp)
81113b60:	dd804517 	ldw	r22,276(sp)
81113b64:	dd404417 	ldw	r21,272(sp)
81113b68:	dd004317 	ldw	r20,268(sp)
81113b6c:	dcc04217 	ldw	r19,264(sp)
81113b70:	dc804117 	ldw	r18,260(sp)
81113b74:	dc404017 	ldw	r17,256(sp)
81113b78:	dc003f17 	ldw	r16,252(sp)
81113b7c:	dec04904 	addi	sp,sp,292
81113b80:	f800283a 	ret
81113b84:	d8802d17 	ldw	r2,180(sp)
81113b88:	d9002d17 	ldw	r4,180(sp)
81113b8c:	10800017 	ldw	r2,0(r2)
81113b90:	d8803115 	stw	r2,196(sp)
81113b94:	20800104 	addi	r2,r4,4
81113b98:	d9003117 	ldw	r4,196(sp)
81113b9c:	203fb916 	blt	r4,zero,81113a84 <__reset+0xfb0f3a84>
81113ba0:	d8802d15 	stw	r2,180(sp)
81113ba4:	bc400007 	ldb	r17,0(r23)
81113ba8:	003f5406 	br	811138fc <__reset+0xfb0f38fc>
81113bac:	bc400007 	ldb	r17,0(r23)
81113bb0:	bac00044 	addi	r11,r23,1
81113bb4:	8a873926 	beq	r17,r10,8111589c <___svfprintf_internal_r+0x20f8>
81113bb8:	88bff404 	addi	r2,r17,-48
81113bbc:	0009883a 	mov	r4,zero
81113bc0:	30868836 	bltu	r6,r2,811155e4 <___svfprintf_internal_r+0x1e40>
81113bc4:	5c400007 	ldb	r17,0(r11)
81113bc8:	210002a4 	muli	r4,r4,10
81113bcc:	5dc00044 	addi	r23,r11,1
81113bd0:	b817883a 	mov	r11,r23
81113bd4:	2089883a 	add	r4,r4,r2
81113bd8:	88bff404 	addi	r2,r17,-48
81113bdc:	30bff92e 	bgeu	r6,r2,81113bc4 <__reset+0xfb0f3bc4>
81113be0:	2005d716 	blt	r4,zero,81115340 <___svfprintf_internal_r+0x1b9c>
81113be4:	d9002915 	stw	r4,164(sp)
81113be8:	003f4506 	br	81113900 <__reset+0xfb0f3900>
81113bec:	b809883a 	mov	r4,r23
81113bf0:	d8003115 	stw	zero,196(sp)
81113bf4:	88bff404 	addi	r2,r17,-48
81113bf8:	0017883a 	mov	r11,zero
81113bfc:	24400007 	ldb	r17,0(r4)
81113c00:	5ac002a4 	muli	r11,r11,10
81113c04:	bdc00044 	addi	r23,r23,1
81113c08:	b809883a 	mov	r4,r23
81113c0c:	12d7883a 	add	r11,r2,r11
81113c10:	88bff404 	addi	r2,r17,-48
81113c14:	30bff92e 	bgeu	r6,r2,81113bfc <__reset+0xfb0f3bfc>
81113c18:	dac03115 	stw	r11,196(sp)
81113c1c:	003f3806 	br	81113900 <__reset+0xfb0f3900>
81113c20:	94802014 	ori	r18,r18,128
81113c24:	bc400007 	ldb	r17,0(r23)
81113c28:	003f3406 	br	811138fc <__reset+0xfb0f38fc>
81113c2c:	18c03fcc 	andi	r3,r3,255
81113c30:	1807471e 	bne	r3,zero,81115950 <___svfprintf_internal_r+0x21ac>
81113c34:	9080020c 	andi	r2,r18,8
81113c38:	10047d26 	beq	r2,zero,81114e30 <___svfprintf_internal_r+0x168c>
81113c3c:	d8c02d17 	ldw	r3,180(sp)
81113c40:	d9002d17 	ldw	r4,180(sp)
81113c44:	d9402d17 	ldw	r5,180(sp)
81113c48:	18c00017 	ldw	r3,0(r3)
81113c4c:	21000117 	ldw	r4,4(r4)
81113c50:	29400204 	addi	r5,r5,8
81113c54:	d8c03615 	stw	r3,216(sp)
81113c58:	d9003715 	stw	r4,220(sp)
81113c5c:	d9402d15 	stw	r5,180(sp)
81113c60:	d9003617 	ldw	r4,216(sp)
81113c64:	d9403717 	ldw	r5,220(sp)
81113c68:	da003e15 	stw	r8,248(sp)
81113c6c:	04000044 	movi	r16,1
81113c70:	111e0780 	call	8111e078 <__fpclassifyd>
81113c74:	da003e17 	ldw	r8,248(sp)
81113c78:	14044b1e 	bne	r2,r16,81114da8 <___svfprintf_internal_r+0x1604>
81113c7c:	d9003617 	ldw	r4,216(sp)
81113c80:	d9403717 	ldw	r5,220(sp)
81113c84:	000d883a 	mov	r6,zero
81113c88:	000f883a 	mov	r7,zero
81113c8c:	11265200 	call	81126520 <__ledf2>
81113c90:	da003e17 	ldw	r8,248(sp)
81113c94:	1005f316 	blt	r2,zero,81115464 <___svfprintf_internal_r+0x1cc0>
81113c98:	df002783 	ldbu	fp,158(sp)
81113c9c:	008011c4 	movi	r2,71
81113ca0:	1445590e 	bge	r2,r17,81115208 <___svfprintf_internal_r+0x1a64>
81113ca4:	04204534 	movhi	r16,33044
81113ca8:	8439c204 	addi	r16,r16,-6392
81113cac:	00c000c4 	movi	r3,3
81113cb0:	00bfdfc4 	movi	r2,-129
81113cb4:	d8c02a15 	stw	r3,168(sp)
81113cb8:	90a4703a 	and	r18,r18,r2
81113cbc:	d8c02e15 	stw	r3,184(sp)
81113cc0:	d8002915 	stw	zero,164(sp)
81113cc4:	d8003215 	stw	zero,200(sp)
81113cc8:	00006606 	br	81113e64 <___svfprintf_internal_r+0x6c0>
81113ccc:	94800214 	ori	r18,r18,8
81113cd0:	bc400007 	ldb	r17,0(r23)
81113cd4:	003f0906 	br	811138fc <__reset+0xfb0f38fc>
81113cd8:	18c03fcc 	andi	r3,r3,255
81113cdc:	1807181e 	bne	r3,zero,81115940 <___svfprintf_internal_r+0x219c>
81113ce0:	94800414 	ori	r18,r18,16
81113ce4:	9080080c 	andi	r2,r18,32
81113ce8:	10039626 	beq	r2,zero,81114b44 <___svfprintf_internal_r+0x13a0>
81113cec:	d9402d17 	ldw	r5,180(sp)
81113cf0:	28800117 	ldw	r2,4(r5)
81113cf4:	2d000017 	ldw	r20,0(r5)
81113cf8:	29400204 	addi	r5,r5,8
81113cfc:	d9402d15 	stw	r5,180(sp)
81113d00:	102d883a 	mov	r22,r2
81113d04:	10039816 	blt	r2,zero,81114b68 <___svfprintf_internal_r+0x13c4>
81113d08:	d9402917 	ldw	r5,164(sp)
81113d0c:	df002783 	ldbu	fp,158(sp)
81113d10:	2803ab16 	blt	r5,zero,81114bc0 <___svfprintf_internal_r+0x141c>
81113d14:	00ffdfc4 	movi	r3,-129
81113d18:	a584b03a 	or	r2,r20,r22
81113d1c:	90e4703a 	and	r18,r18,r3
81113d20:	10014a26 	beq	r2,zero,8111424c <___svfprintf_internal_r+0xaa8>
81113d24:	b0034b26 	beq	r22,zero,81114a54 <___svfprintf_internal_r+0x12b0>
81113d28:	dc402a15 	stw	r17,168(sp)
81113d2c:	dc001e04 	addi	r16,sp,120
81113d30:	b023883a 	mov	r17,r22
81113d34:	402d883a 	mov	r22,r8
81113d38:	a009883a 	mov	r4,r20
81113d3c:	880b883a 	mov	r5,r17
81113d40:	01800284 	movi	r6,10
81113d44:	000f883a 	mov	r7,zero
81113d48:	11249280 	call	81124928 <__umoddi3>
81113d4c:	10800c04 	addi	r2,r2,48
81113d50:	843fffc4 	addi	r16,r16,-1
81113d54:	a009883a 	mov	r4,r20
81113d58:	880b883a 	mov	r5,r17
81113d5c:	80800005 	stb	r2,0(r16)
81113d60:	01800284 	movi	r6,10
81113d64:	000f883a 	mov	r7,zero
81113d68:	11243a80 	call	811243a8 <__udivdi3>
81113d6c:	1029883a 	mov	r20,r2
81113d70:	10c4b03a 	or	r2,r2,r3
81113d74:	1823883a 	mov	r17,r3
81113d78:	103fef1e 	bne	r2,zero,81113d38 <__reset+0xfb0f3d38>
81113d7c:	d8c02817 	ldw	r3,160(sp)
81113d80:	dc402a17 	ldw	r17,168(sp)
81113d84:	b011883a 	mov	r8,r22
81113d88:	1c07c83a 	sub	r3,r3,r16
81113d8c:	d8c02e15 	stw	r3,184(sp)
81113d90:	00002e06 	br	81113e4c <___svfprintf_internal_r+0x6a8>
81113d94:	18c03fcc 	andi	r3,r3,255
81113d98:	1806e71e 	bne	r3,zero,81115938 <___svfprintf_internal_r+0x2194>
81113d9c:	94800414 	ori	r18,r18,16
81113da0:	9080080c 	andi	r2,r18,32
81113da4:	1002d426 	beq	r2,zero,811148f8 <___svfprintf_internal_r+0x1154>
81113da8:	d9402d17 	ldw	r5,180(sp)
81113dac:	d8c02917 	ldw	r3,164(sp)
81113db0:	d8002785 	stb	zero,158(sp)
81113db4:	28800204 	addi	r2,r5,8
81113db8:	2d000017 	ldw	r20,0(r5)
81113dbc:	2d800117 	ldw	r22,4(r5)
81113dc0:	18041516 	blt	r3,zero,81114e18 <___svfprintf_internal_r+0x1674>
81113dc4:	013fdfc4 	movi	r4,-129
81113dc8:	a586b03a 	or	r3,r20,r22
81113dcc:	d8802d15 	stw	r2,180(sp)
81113dd0:	9124703a 	and	r18,r18,r4
81113dd4:	1802d51e 	bne	r3,zero,8111492c <___svfprintf_internal_r+0x1188>
81113dd8:	d9402917 	ldw	r5,164(sp)
81113ddc:	0039883a 	mov	fp,zero
81113de0:	2806be26 	beq	r5,zero,811158dc <___svfprintf_internal_r+0x2138>
81113de4:	0029883a 	mov	r20,zero
81113de8:	002d883a 	mov	r22,zero
81113dec:	dc001e04 	addi	r16,sp,120
81113df0:	a006d0fa 	srli	r3,r20,3
81113df4:	b008977a 	slli	r4,r22,29
81113df8:	b02cd0fa 	srli	r22,r22,3
81113dfc:	a50001cc 	andi	r20,r20,7
81113e00:	a0800c04 	addi	r2,r20,48
81113e04:	843fffc4 	addi	r16,r16,-1
81113e08:	20e8b03a 	or	r20,r4,r3
81113e0c:	80800005 	stb	r2,0(r16)
81113e10:	a586b03a 	or	r3,r20,r22
81113e14:	183ff61e 	bne	r3,zero,81113df0 <__reset+0xfb0f3df0>
81113e18:	90c0004c 	andi	r3,r18,1
81113e1c:	18013926 	beq	r3,zero,81114304 <___svfprintf_internal_r+0xb60>
81113e20:	10803fcc 	andi	r2,r2,255
81113e24:	1080201c 	xori	r2,r2,128
81113e28:	10bfe004 	addi	r2,r2,-128
81113e2c:	00c00c04 	movi	r3,48
81113e30:	10c13426 	beq	r2,r3,81114304 <___svfprintf_internal_r+0xb60>
81113e34:	80ffffc5 	stb	r3,-1(r16)
81113e38:	d8c02817 	ldw	r3,160(sp)
81113e3c:	80bfffc4 	addi	r2,r16,-1
81113e40:	1021883a 	mov	r16,r2
81113e44:	1887c83a 	sub	r3,r3,r2
81113e48:	d8c02e15 	stw	r3,184(sp)
81113e4c:	d8802e17 	ldw	r2,184(sp)
81113e50:	d9002917 	ldw	r4,164(sp)
81113e54:	1100010e 	bge	r2,r4,81113e5c <___svfprintf_internal_r+0x6b8>
81113e58:	2005883a 	mov	r2,r4
81113e5c:	d8802a15 	stw	r2,168(sp)
81113e60:	d8003215 	stw	zero,200(sp)
81113e64:	e7003fcc 	andi	fp,fp,255
81113e68:	e700201c 	xori	fp,fp,128
81113e6c:	e73fe004 	addi	fp,fp,-128
81113e70:	e0000326 	beq	fp,zero,81113e80 <___svfprintf_internal_r+0x6dc>
81113e74:	d8c02a17 	ldw	r3,168(sp)
81113e78:	18c00044 	addi	r3,r3,1
81113e7c:	d8c02a15 	stw	r3,168(sp)
81113e80:	90c0008c 	andi	r3,r18,2
81113e84:	d8c02b15 	stw	r3,172(sp)
81113e88:	18000326 	beq	r3,zero,81113e98 <___svfprintf_internal_r+0x6f4>
81113e8c:	d8c02a17 	ldw	r3,168(sp)
81113e90:	18c00084 	addi	r3,r3,2
81113e94:	d8c02a15 	stw	r3,168(sp)
81113e98:	90c0210c 	andi	r3,r18,132
81113e9c:	d8c03015 	stw	r3,192(sp)
81113ea0:	1801a11e 	bne	r3,zero,81114528 <___svfprintf_internal_r+0xd84>
81113ea4:	d9003117 	ldw	r4,196(sp)
81113ea8:	d8c02a17 	ldw	r3,168(sp)
81113eac:	20e9c83a 	sub	r20,r4,r3
81113eb0:	05019d0e 	bge	zero,r20,81114528 <___svfprintf_internal_r+0xd84>
81113eb4:	02400404 	movi	r9,16
81113eb8:	d8c02017 	ldw	r3,128(sp)
81113ebc:	d8801f17 	ldw	r2,124(sp)
81113ec0:	4d051b0e 	bge	r9,r20,81115330 <___svfprintf_internal_r+0x1b8c>
81113ec4:	01604534 	movhi	r5,33044
81113ec8:	2979d584 	addi	r5,r5,-6314
81113ecc:	dc403c15 	stw	r17,240(sp)
81113ed0:	d9403515 	stw	r5,212(sp)
81113ed4:	a023883a 	mov	r17,r20
81113ed8:	482d883a 	mov	r22,r9
81113edc:	9029883a 	mov	r20,r18
81113ee0:	070001c4 	movi	fp,7
81113ee4:	8025883a 	mov	r18,r16
81113ee8:	dc002c17 	ldw	r16,176(sp)
81113eec:	00000306 	br	81113efc <___svfprintf_internal_r+0x758>
81113ef0:	8c7ffc04 	addi	r17,r17,-16
81113ef4:	42000204 	addi	r8,r8,8
81113ef8:	b440130e 	bge	r22,r17,81113f48 <___svfprintf_internal_r+0x7a4>
81113efc:	01204534 	movhi	r4,33044
81113f00:	18c00404 	addi	r3,r3,16
81113f04:	10800044 	addi	r2,r2,1
81113f08:	2139d584 	addi	r4,r4,-6314
81113f0c:	41000015 	stw	r4,0(r8)
81113f10:	45800115 	stw	r22,4(r8)
81113f14:	d8c02015 	stw	r3,128(sp)
81113f18:	d8801f15 	stw	r2,124(sp)
81113f1c:	e0bff40e 	bge	fp,r2,81113ef0 <__reset+0xfb0f3ef0>
81113f20:	d9801e04 	addi	r6,sp,120
81113f24:	800b883a 	mov	r5,r16
81113f28:	9809883a 	mov	r4,r19
81113f2c:	11202640 	call	81120264 <__ssprint_r>
81113f30:	103f031e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81113f34:	8c7ffc04 	addi	r17,r17,-16
81113f38:	d8c02017 	ldw	r3,128(sp)
81113f3c:	d8801f17 	ldw	r2,124(sp)
81113f40:	da000404 	addi	r8,sp,16
81113f44:	b47fed16 	blt	r22,r17,81113efc <__reset+0xfb0f3efc>
81113f48:	9021883a 	mov	r16,r18
81113f4c:	a025883a 	mov	r18,r20
81113f50:	8829883a 	mov	r20,r17
81113f54:	dc403c17 	ldw	r17,240(sp)
81113f58:	d9403517 	ldw	r5,212(sp)
81113f5c:	a0c7883a 	add	r3,r20,r3
81113f60:	10800044 	addi	r2,r2,1
81113f64:	41400015 	stw	r5,0(r8)
81113f68:	45000115 	stw	r20,4(r8)
81113f6c:	d8c02015 	stw	r3,128(sp)
81113f70:	d8801f15 	stw	r2,124(sp)
81113f74:	010001c4 	movi	r4,7
81113f78:	20829f16 	blt	r4,r2,811149f8 <___svfprintf_internal_r+0x1254>
81113f7c:	df002787 	ldb	fp,158(sp)
81113f80:	42000204 	addi	r8,r8,8
81113f84:	e0000c26 	beq	fp,zero,81113fb8 <___svfprintf_internal_r+0x814>
81113f88:	d8801f17 	ldw	r2,124(sp)
81113f8c:	d9002784 	addi	r4,sp,158
81113f90:	18c00044 	addi	r3,r3,1
81113f94:	10800044 	addi	r2,r2,1
81113f98:	41000015 	stw	r4,0(r8)
81113f9c:	01000044 	movi	r4,1
81113fa0:	41000115 	stw	r4,4(r8)
81113fa4:	d8c02015 	stw	r3,128(sp)
81113fa8:	d8801f15 	stw	r2,124(sp)
81113fac:	010001c4 	movi	r4,7
81113fb0:	20823816 	blt	r4,r2,81114894 <___svfprintf_internal_r+0x10f0>
81113fb4:	42000204 	addi	r8,r8,8
81113fb8:	d8802b17 	ldw	r2,172(sp)
81113fbc:	10000c26 	beq	r2,zero,81113ff0 <___svfprintf_internal_r+0x84c>
81113fc0:	d8801f17 	ldw	r2,124(sp)
81113fc4:	d9002704 	addi	r4,sp,156
81113fc8:	18c00084 	addi	r3,r3,2
81113fcc:	10800044 	addi	r2,r2,1
81113fd0:	41000015 	stw	r4,0(r8)
81113fd4:	01000084 	movi	r4,2
81113fd8:	41000115 	stw	r4,4(r8)
81113fdc:	d8c02015 	stw	r3,128(sp)
81113fe0:	d8801f15 	stw	r2,124(sp)
81113fe4:	010001c4 	movi	r4,7
81113fe8:	20823216 	blt	r4,r2,811148b4 <___svfprintf_internal_r+0x1110>
81113fec:	42000204 	addi	r8,r8,8
81113ff0:	d9003017 	ldw	r4,192(sp)
81113ff4:	00802004 	movi	r2,128
81113ff8:	20819726 	beq	r4,r2,81114658 <___svfprintf_internal_r+0xeb4>
81113ffc:	d9402917 	ldw	r5,164(sp)
81114000:	d8802e17 	ldw	r2,184(sp)
81114004:	28adc83a 	sub	r22,r5,r2
81114008:	05802f0e 	bge	zero,r22,811140c8 <___svfprintf_internal_r+0x924>
8111400c:	07000404 	movi	fp,16
81114010:	d8801f17 	ldw	r2,124(sp)
81114014:	e583c00e 	bge	fp,r22,81114f18 <___svfprintf_internal_r+0x1774>
81114018:	01604534 	movhi	r5,33044
8111401c:	2979d184 	addi	r5,r5,-6330
81114020:	dc402915 	stw	r17,164(sp)
81114024:	d9402b15 	stw	r5,172(sp)
81114028:	b023883a 	mov	r17,r22
8111402c:	050001c4 	movi	r20,7
81114030:	902d883a 	mov	r22,r18
81114034:	8025883a 	mov	r18,r16
81114038:	dc002c17 	ldw	r16,176(sp)
8111403c:	00000306 	br	8111404c <___svfprintf_internal_r+0x8a8>
81114040:	8c7ffc04 	addi	r17,r17,-16
81114044:	42000204 	addi	r8,r8,8
81114048:	e440110e 	bge	fp,r17,81114090 <___svfprintf_internal_r+0x8ec>
8111404c:	18c00404 	addi	r3,r3,16
81114050:	10800044 	addi	r2,r2,1
81114054:	45400015 	stw	r21,0(r8)
81114058:	47000115 	stw	fp,4(r8)
8111405c:	d8c02015 	stw	r3,128(sp)
81114060:	d8801f15 	stw	r2,124(sp)
81114064:	a0bff60e 	bge	r20,r2,81114040 <__reset+0xfb0f4040>
81114068:	d9801e04 	addi	r6,sp,120
8111406c:	800b883a 	mov	r5,r16
81114070:	9809883a 	mov	r4,r19
81114074:	11202640 	call	81120264 <__ssprint_r>
81114078:	103eb11e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
8111407c:	8c7ffc04 	addi	r17,r17,-16
81114080:	d8c02017 	ldw	r3,128(sp)
81114084:	d8801f17 	ldw	r2,124(sp)
81114088:	da000404 	addi	r8,sp,16
8111408c:	e47fef16 	blt	fp,r17,8111404c <__reset+0xfb0f404c>
81114090:	9021883a 	mov	r16,r18
81114094:	b025883a 	mov	r18,r22
81114098:	882d883a 	mov	r22,r17
8111409c:	dc402917 	ldw	r17,164(sp)
811140a0:	d9002b17 	ldw	r4,172(sp)
811140a4:	1d87883a 	add	r3,r3,r22
811140a8:	10800044 	addi	r2,r2,1
811140ac:	41000015 	stw	r4,0(r8)
811140b0:	45800115 	stw	r22,4(r8)
811140b4:	d8c02015 	stw	r3,128(sp)
811140b8:	d8801f15 	stw	r2,124(sp)
811140bc:	010001c4 	movi	r4,7
811140c0:	2081ec16 	blt	r4,r2,81114874 <___svfprintf_internal_r+0x10d0>
811140c4:	42000204 	addi	r8,r8,8
811140c8:	9080400c 	andi	r2,r18,256
811140cc:	1001181e 	bne	r2,zero,81114530 <___svfprintf_internal_r+0xd8c>
811140d0:	d9402e17 	ldw	r5,184(sp)
811140d4:	d8801f17 	ldw	r2,124(sp)
811140d8:	44000015 	stw	r16,0(r8)
811140dc:	1947883a 	add	r3,r3,r5
811140e0:	10800044 	addi	r2,r2,1
811140e4:	41400115 	stw	r5,4(r8)
811140e8:	d8c02015 	stw	r3,128(sp)
811140ec:	d8801f15 	stw	r2,124(sp)
811140f0:	010001c4 	movi	r4,7
811140f4:	2081d116 	blt	r4,r2,8111483c <___svfprintf_internal_r+0x1098>
811140f8:	42000204 	addi	r8,r8,8
811140fc:	9480010c 	andi	r18,r18,4
81114100:	90003226 	beq	r18,zero,811141cc <___svfprintf_internal_r+0xa28>
81114104:	d9403117 	ldw	r5,196(sp)
81114108:	d8802a17 	ldw	r2,168(sp)
8111410c:	28a1c83a 	sub	r16,r5,r2
81114110:	04002e0e 	bge	zero,r16,811141cc <___svfprintf_internal_r+0xa28>
81114114:	04400404 	movi	r17,16
81114118:	d8801f17 	ldw	r2,124(sp)
8111411c:	8c04b90e 	bge	r17,r16,81115404 <___svfprintf_internal_r+0x1c60>
81114120:	01604534 	movhi	r5,33044
81114124:	2979d584 	addi	r5,r5,-6314
81114128:	d9403515 	stw	r5,212(sp)
8111412c:	048001c4 	movi	r18,7
81114130:	dd002c17 	ldw	r20,176(sp)
81114134:	00000306 	br	81114144 <___svfprintf_internal_r+0x9a0>
81114138:	843ffc04 	addi	r16,r16,-16
8111413c:	42000204 	addi	r8,r8,8
81114140:	8c00130e 	bge	r17,r16,81114190 <___svfprintf_internal_r+0x9ec>
81114144:	01204534 	movhi	r4,33044
81114148:	18c00404 	addi	r3,r3,16
8111414c:	10800044 	addi	r2,r2,1
81114150:	2139d584 	addi	r4,r4,-6314
81114154:	41000015 	stw	r4,0(r8)
81114158:	44400115 	stw	r17,4(r8)
8111415c:	d8c02015 	stw	r3,128(sp)
81114160:	d8801f15 	stw	r2,124(sp)
81114164:	90bff40e 	bge	r18,r2,81114138 <__reset+0xfb0f4138>
81114168:	d9801e04 	addi	r6,sp,120
8111416c:	a00b883a 	mov	r5,r20
81114170:	9809883a 	mov	r4,r19
81114174:	11202640 	call	81120264 <__ssprint_r>
81114178:	103e711e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
8111417c:	843ffc04 	addi	r16,r16,-16
81114180:	d8c02017 	ldw	r3,128(sp)
81114184:	d8801f17 	ldw	r2,124(sp)
81114188:	da000404 	addi	r8,sp,16
8111418c:	8c3fed16 	blt	r17,r16,81114144 <__reset+0xfb0f4144>
81114190:	d9403517 	ldw	r5,212(sp)
81114194:	1c07883a 	add	r3,r3,r16
81114198:	10800044 	addi	r2,r2,1
8111419c:	41400015 	stw	r5,0(r8)
811141a0:	44000115 	stw	r16,4(r8)
811141a4:	d8c02015 	stw	r3,128(sp)
811141a8:	d8801f15 	stw	r2,124(sp)
811141ac:	010001c4 	movi	r4,7
811141b0:	2080060e 	bge	r4,r2,811141cc <___svfprintf_internal_r+0xa28>
811141b4:	d9402c17 	ldw	r5,176(sp)
811141b8:	d9801e04 	addi	r6,sp,120
811141bc:	9809883a 	mov	r4,r19
811141c0:	11202640 	call	81120264 <__ssprint_r>
811141c4:	103e5e1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811141c8:	d8c02017 	ldw	r3,128(sp)
811141cc:	d8803117 	ldw	r2,196(sp)
811141d0:	d9002a17 	ldw	r4,168(sp)
811141d4:	1100010e 	bge	r2,r4,811141dc <___svfprintf_internal_r+0xa38>
811141d8:	2005883a 	mov	r2,r4
811141dc:	d9402f17 	ldw	r5,188(sp)
811141e0:	288b883a 	add	r5,r5,r2
811141e4:	d9402f15 	stw	r5,188(sp)
811141e8:	18019c1e 	bne	r3,zero,8111485c <___svfprintf_internal_r+0x10b8>
811141ec:	b8800007 	ldb	r2,0(r23)
811141f0:	d8001f15 	stw	zero,124(sp)
811141f4:	da000404 	addi	r8,sp,16
811141f8:	103d991e 	bne	r2,zero,81113860 <__reset+0xfb0f3860>
811141fc:	b821883a 	mov	r16,r23
81114200:	003daf06 	br	811138c0 <__reset+0xfb0f38c0>
81114204:	18c03fcc 	andi	r3,r3,255
81114208:	1805c71e 	bne	r3,zero,81115928 <___svfprintf_internal_r+0x2184>
8111420c:	94800414 	ori	r18,r18,16
81114210:	9080080c 	andi	r2,r18,32
81114214:	10020126 	beq	r2,zero,81114a1c <___svfprintf_internal_r+0x1278>
81114218:	d8802d17 	ldw	r2,180(sp)
8111421c:	d9002917 	ldw	r4,164(sp)
81114220:	d8002785 	stb	zero,158(sp)
81114224:	10c00204 	addi	r3,r2,8
81114228:	15000017 	ldw	r20,0(r2)
8111422c:	15800117 	ldw	r22,4(r2)
81114230:	20038e16 	blt	r4,zero,8111506c <___svfprintf_internal_r+0x18c8>
81114234:	013fdfc4 	movi	r4,-129
81114238:	a584b03a 	or	r2,r20,r22
8111423c:	d8c02d15 	stw	r3,180(sp)
81114240:	9124703a 	and	r18,r18,r4
81114244:	0039883a 	mov	fp,zero
81114248:	103eb61e 	bne	r2,zero,81113d24 <__reset+0xfb0f3d24>
8111424c:	d8802917 	ldw	r2,164(sp)
81114250:	1002c81e 	bne	r2,zero,81114d74 <___svfprintf_internal_r+0x15d0>
81114254:	d8002915 	stw	zero,164(sp)
81114258:	d8002e15 	stw	zero,184(sp)
8111425c:	dc001e04 	addi	r16,sp,120
81114260:	003efa06 	br	81113e4c <__reset+0xfb0f3e4c>
81114264:	18c03fcc 	andi	r3,r3,255
81114268:	1805ad1e 	bne	r3,zero,81115920 <___svfprintf_internal_r+0x217c>
8111426c:	01604534 	movhi	r5,33044
81114270:	2979c504 	addi	r5,r5,-6380
81114274:	d9403a15 	stw	r5,232(sp)
81114278:	9080080c 	andi	r2,r18,32
8111427c:	10006126 	beq	r2,zero,81114404 <___svfprintf_internal_r+0xc60>
81114280:	d8802d17 	ldw	r2,180(sp)
81114284:	15000017 	ldw	r20,0(r2)
81114288:	15800117 	ldw	r22,4(r2)
8111428c:	10800204 	addi	r2,r2,8
81114290:	d8802d15 	stw	r2,180(sp)
81114294:	9080004c 	andi	r2,r18,1
81114298:	10018e26 	beq	r2,zero,811148d4 <___svfprintf_internal_r+0x1130>
8111429c:	a584b03a 	or	r2,r20,r22
811142a0:	10030926 	beq	r2,zero,81114ec8 <___svfprintf_internal_r+0x1724>
811142a4:	d8c02917 	ldw	r3,164(sp)
811142a8:	00800c04 	movi	r2,48
811142ac:	d8802705 	stb	r2,156(sp)
811142b0:	dc402745 	stb	r17,157(sp)
811142b4:	d8002785 	stb	zero,158(sp)
811142b8:	90800094 	ori	r2,r18,2
811142bc:	18048716 	blt	r3,zero,811154dc <___svfprintf_internal_r+0x1d38>
811142c0:	00bfdfc4 	movi	r2,-129
811142c4:	90a4703a 	and	r18,r18,r2
811142c8:	94800094 	ori	r18,r18,2
811142cc:	0039883a 	mov	fp,zero
811142d0:	d9003a17 	ldw	r4,232(sp)
811142d4:	dc001e04 	addi	r16,sp,120
811142d8:	a08003cc 	andi	r2,r20,15
811142dc:	b006973a 	slli	r3,r22,28
811142e0:	2085883a 	add	r2,r4,r2
811142e4:	a028d13a 	srli	r20,r20,4
811142e8:	10800003 	ldbu	r2,0(r2)
811142ec:	b02cd13a 	srli	r22,r22,4
811142f0:	843fffc4 	addi	r16,r16,-1
811142f4:	1d28b03a 	or	r20,r3,r20
811142f8:	80800005 	stb	r2,0(r16)
811142fc:	a584b03a 	or	r2,r20,r22
81114300:	103ff51e 	bne	r2,zero,811142d8 <__reset+0xfb0f42d8>
81114304:	d8c02817 	ldw	r3,160(sp)
81114308:	1c07c83a 	sub	r3,r3,r16
8111430c:	d8c02e15 	stw	r3,184(sp)
81114310:	003ece06 	br	81113e4c <__reset+0xfb0f3e4c>
81114314:	d8c02d17 	ldw	r3,180(sp)
81114318:	d9002d17 	ldw	r4,180(sp)
8111431c:	d8002785 	stb	zero,158(sp)
81114320:	18800017 	ldw	r2,0(r3)
81114324:	21000104 	addi	r4,r4,4
81114328:	00c00044 	movi	r3,1
8111432c:	d8c02a15 	stw	r3,168(sp)
81114330:	d8801405 	stb	r2,80(sp)
81114334:	d9002d15 	stw	r4,180(sp)
81114338:	d8c02e15 	stw	r3,184(sp)
8111433c:	d8002915 	stw	zero,164(sp)
81114340:	d8003215 	stw	zero,200(sp)
81114344:	dc001404 	addi	r16,sp,80
81114348:	0039883a 	mov	fp,zero
8111434c:	003ecc06 	br	81113e80 <__reset+0xfb0f3e80>
81114350:	18c03fcc 	andi	r3,r3,255
81114354:	183e9226 	beq	r3,zero,81113da0 <__reset+0xfb0f3da0>
81114358:	d9c02785 	stb	r7,158(sp)
8111435c:	003e9006 	br	81113da0 <__reset+0xfb0f3da0>
81114360:	00c00044 	movi	r3,1
81114364:	01c00ac4 	movi	r7,43
81114368:	bc400007 	ldb	r17,0(r23)
8111436c:	003d6306 	br	811138fc <__reset+0xfb0f38fc>
81114370:	94800814 	ori	r18,r18,32
81114374:	bc400007 	ldb	r17,0(r23)
81114378:	003d6006 	br	811138fc <__reset+0xfb0f38fc>
8111437c:	d8c02d17 	ldw	r3,180(sp)
81114380:	d8002785 	stb	zero,158(sp)
81114384:	1c000017 	ldw	r16,0(r3)
81114388:	1d000104 	addi	r20,r3,4
8111438c:	80040f26 	beq	r16,zero,811153cc <___svfprintf_internal_r+0x1c28>
81114390:	d9002917 	ldw	r4,164(sp)
81114394:	2003dc16 	blt	r4,zero,81115308 <___svfprintf_internal_r+0x1b64>
81114398:	200d883a 	mov	r6,r4
8111439c:	000b883a 	mov	r5,zero
811143a0:	8009883a 	mov	r4,r16
811143a4:	da003e15 	stw	r8,248(sp)
811143a8:	111c8080 	call	8111c808 <memchr>
811143ac:	da003e17 	ldw	r8,248(sp)
811143b0:	10045826 	beq	r2,zero,81115514 <___svfprintf_internal_r+0x1d70>
811143b4:	1405c83a 	sub	r2,r2,r16
811143b8:	d8802e15 	stw	r2,184(sp)
811143bc:	1003d816 	blt	r2,zero,81115320 <___svfprintf_internal_r+0x1b7c>
811143c0:	df002783 	ldbu	fp,158(sp)
811143c4:	d8802a15 	stw	r2,168(sp)
811143c8:	dd002d15 	stw	r20,180(sp)
811143cc:	d8002915 	stw	zero,164(sp)
811143d0:	d8003215 	stw	zero,200(sp)
811143d4:	003ea306 	br	81113e64 <__reset+0xfb0f3e64>
811143d8:	18c03fcc 	andi	r3,r3,255
811143dc:	183f8c26 	beq	r3,zero,81114210 <__reset+0xfb0f4210>
811143e0:	d9c02785 	stb	r7,158(sp)
811143e4:	003f8a06 	br	81114210 <__reset+0xfb0f4210>
811143e8:	18c03fcc 	andi	r3,r3,255
811143ec:	1805631e 	bne	r3,zero,8111597c <___svfprintf_internal_r+0x21d8>
811143f0:	01604534 	movhi	r5,33044
811143f4:	2979ca04 	addi	r5,r5,-6360
811143f8:	d9403a15 	stw	r5,232(sp)
811143fc:	9080080c 	andi	r2,r18,32
81114400:	103f9f1e 	bne	r2,zero,81114280 <__reset+0xfb0f4280>
81114404:	9080040c 	andi	r2,r18,16
81114408:	10029c26 	beq	r2,zero,81114e7c <___svfprintf_internal_r+0x16d8>
8111440c:	d8c02d17 	ldw	r3,180(sp)
81114410:	002d883a 	mov	r22,zero
81114414:	1d000017 	ldw	r20,0(r3)
81114418:	18c00104 	addi	r3,r3,4
8111441c:	d8c02d15 	stw	r3,180(sp)
81114420:	003f9c06 	br	81114294 <__reset+0xfb0f4294>
81114424:	94800054 	ori	r18,r18,1
81114428:	bc400007 	ldb	r17,0(r23)
8111442c:	003d3306 	br	811138fc <__reset+0xfb0f38fc>
81114430:	38803fcc 	andi	r2,r7,255
81114434:	1080201c 	xori	r2,r2,128
81114438:	10bfe004 	addi	r2,r2,-128
8111443c:	1002971e 	bne	r2,zero,81114e9c <___svfprintf_internal_r+0x16f8>
81114440:	00c00044 	movi	r3,1
81114444:	01c00804 	movi	r7,32
81114448:	bc400007 	ldb	r17,0(r23)
8111444c:	003d2b06 	br	811138fc <__reset+0xfb0f38fc>
81114450:	18c03fcc 	andi	r3,r3,255
81114454:	183e2326 	beq	r3,zero,81113ce4 <__reset+0xfb0f3ce4>
81114458:	d9c02785 	stb	r7,158(sp)
8111445c:	003e2106 	br	81113ce4 <__reset+0xfb0f3ce4>
81114460:	bc400007 	ldb	r17,0(r23)
81114464:	8a430426 	beq	r17,r9,81115078 <___svfprintf_internal_r+0x18d4>
81114468:	94800414 	ori	r18,r18,16
8111446c:	003d2306 	br	811138fc <__reset+0xfb0f38fc>
81114470:	18c03fcc 	andi	r3,r3,255
81114474:	18053f1e 	bne	r3,zero,81115974 <___svfprintf_internal_r+0x21d0>
81114478:	9080080c 	andi	r2,r18,32
8111447c:	10028926 	beq	r2,zero,81114ea4 <___svfprintf_internal_r+0x1700>
81114480:	d9402d17 	ldw	r5,180(sp)
81114484:	d9002f17 	ldw	r4,188(sp)
81114488:	28800017 	ldw	r2,0(r5)
8111448c:	2007d7fa 	srai	r3,r4,31
81114490:	29400104 	addi	r5,r5,4
81114494:	d9402d15 	stw	r5,180(sp)
81114498:	11000015 	stw	r4,0(r2)
8111449c:	10c00115 	stw	r3,4(r2)
811144a0:	003ced06 	br	81113858 <__reset+0xfb0f3858>
811144a4:	94801014 	ori	r18,r18,64
811144a8:	bc400007 	ldb	r17,0(r23)
811144ac:	003d1306 	br	811138fc <__reset+0xfb0f38fc>
811144b0:	01204534 	movhi	r4,33044
811144b4:	2139ca04 	addi	r4,r4,-6360
811144b8:	0039883a 	mov	fp,zero
811144bc:	d9003a15 	stw	r4,232(sp)
811144c0:	04401e04 	movi	r17,120
811144c4:	003f8206 	br	811142d0 <__reset+0xfb0f42d0>
811144c8:	18c03fcc 	andi	r3,r3,255
811144cc:	1805221e 	bne	r3,zero,81115958 <___svfprintf_internal_r+0x21b4>
811144d0:	883d9526 	beq	r17,zero,81113b28 <__reset+0xfb0f3b28>
811144d4:	00c00044 	movi	r3,1
811144d8:	d8c02a15 	stw	r3,168(sp)
811144dc:	dc401405 	stb	r17,80(sp)
811144e0:	d8002785 	stb	zero,158(sp)
811144e4:	003f9406 	br	81114338 <__reset+0xfb0f4338>
811144e8:	01204534 	movhi	r4,33044
811144ec:	2139ca04 	addi	r4,r4,-6360
811144f0:	d9003a15 	stw	r4,232(sp)
811144f4:	d8c02d15 	stw	r3,180(sp)
811144f8:	1025883a 	mov	r18,r2
811144fc:	04401e04 	movi	r17,120
81114500:	a584b03a 	or	r2,r20,r22
81114504:	1000fa1e 	bne	r2,zero,811148f0 <___svfprintf_internal_r+0x114c>
81114508:	0039883a 	mov	fp,zero
8111450c:	00800084 	movi	r2,2
81114510:	10803fcc 	andi	r2,r2,255
81114514:	00c00044 	movi	r3,1
81114518:	10c21626 	beq	r2,r3,81114d74 <___svfprintf_internal_r+0x15d0>
8111451c:	00c00084 	movi	r3,2
81114520:	10fe301e 	bne	r2,r3,81113de4 <__reset+0xfb0f3de4>
81114524:	003d7606 	br	81113b00 <__reset+0xfb0f3b00>
81114528:	d8c02017 	ldw	r3,128(sp)
8111452c:	003e9506 	br	81113f84 <__reset+0xfb0f3f84>
81114530:	00801944 	movi	r2,101
81114534:	14407c0e 	bge	r2,r17,81114728 <___svfprintf_internal_r+0xf84>
81114538:	d9003617 	ldw	r4,216(sp)
8111453c:	d9403717 	ldw	r5,220(sp)
81114540:	000d883a 	mov	r6,zero
81114544:	000f883a 	mov	r7,zero
81114548:	d8c03d15 	stw	r3,244(sp)
8111454c:	da003e15 	stw	r8,248(sp)
81114550:	11263bc0 	call	811263bc <__eqdf2>
81114554:	d8c03d17 	ldw	r3,244(sp)
81114558:	da003e17 	ldw	r8,248(sp)
8111455c:	1000f51e 	bne	r2,zero,81114934 <___svfprintf_internal_r+0x1190>
81114560:	d8801f17 	ldw	r2,124(sp)
81114564:	01204534 	movhi	r4,33044
81114568:	2139d104 	addi	r4,r4,-6332
8111456c:	18c00044 	addi	r3,r3,1
81114570:	10800044 	addi	r2,r2,1
81114574:	41000015 	stw	r4,0(r8)
81114578:	01000044 	movi	r4,1
8111457c:	41000115 	stw	r4,4(r8)
81114580:	d8c02015 	stw	r3,128(sp)
81114584:	d8801f15 	stw	r2,124(sp)
81114588:	010001c4 	movi	r4,7
8111458c:	20826616 	blt	r4,r2,81114f28 <___svfprintf_internal_r+0x1784>
81114590:	42000204 	addi	r8,r8,8
81114594:	d8802617 	ldw	r2,152(sp)
81114598:	d9403317 	ldw	r5,204(sp)
8111459c:	11400216 	blt	r2,r5,811145a8 <___svfprintf_internal_r+0xe04>
811145a0:	9080004c 	andi	r2,r18,1
811145a4:	103ed526 	beq	r2,zero,811140fc <__reset+0xfb0f40fc>
811145a8:	d8803817 	ldw	r2,224(sp)
811145ac:	d9003417 	ldw	r4,208(sp)
811145b0:	d9403817 	ldw	r5,224(sp)
811145b4:	1887883a 	add	r3,r3,r2
811145b8:	d8801f17 	ldw	r2,124(sp)
811145bc:	41000015 	stw	r4,0(r8)
811145c0:	41400115 	stw	r5,4(r8)
811145c4:	10800044 	addi	r2,r2,1
811145c8:	d8c02015 	stw	r3,128(sp)
811145cc:	d8801f15 	stw	r2,124(sp)
811145d0:	010001c4 	movi	r4,7
811145d4:	2082af16 	blt	r4,r2,81115094 <___svfprintf_internal_r+0x18f0>
811145d8:	42000204 	addi	r8,r8,8
811145dc:	d8803317 	ldw	r2,204(sp)
811145e0:	143fffc4 	addi	r16,r2,-1
811145e4:	043ec50e 	bge	zero,r16,811140fc <__reset+0xfb0f40fc>
811145e8:	04400404 	movi	r17,16
811145ec:	d8801f17 	ldw	r2,124(sp)
811145f0:	8c00860e 	bge	r17,r16,8111480c <___svfprintf_internal_r+0x1068>
811145f4:	01604534 	movhi	r5,33044
811145f8:	2979d184 	addi	r5,r5,-6330
811145fc:	d9402b15 	stw	r5,172(sp)
81114600:	058001c4 	movi	r22,7
81114604:	dd002c17 	ldw	r20,176(sp)
81114608:	00000306 	br	81114618 <___svfprintf_internal_r+0xe74>
8111460c:	42000204 	addi	r8,r8,8
81114610:	843ffc04 	addi	r16,r16,-16
81114614:	8c00800e 	bge	r17,r16,81114818 <___svfprintf_internal_r+0x1074>
81114618:	18c00404 	addi	r3,r3,16
8111461c:	10800044 	addi	r2,r2,1
81114620:	45400015 	stw	r21,0(r8)
81114624:	44400115 	stw	r17,4(r8)
81114628:	d8c02015 	stw	r3,128(sp)
8111462c:	d8801f15 	stw	r2,124(sp)
81114630:	b0bff60e 	bge	r22,r2,8111460c <__reset+0xfb0f460c>
81114634:	d9801e04 	addi	r6,sp,120
81114638:	a00b883a 	mov	r5,r20
8111463c:	9809883a 	mov	r4,r19
81114640:	11202640 	call	81120264 <__ssprint_r>
81114644:	103d3e1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114648:	d8c02017 	ldw	r3,128(sp)
8111464c:	d8801f17 	ldw	r2,124(sp)
81114650:	da000404 	addi	r8,sp,16
81114654:	003fee06 	br	81114610 <__reset+0xfb0f4610>
81114658:	d9403117 	ldw	r5,196(sp)
8111465c:	d8802a17 	ldw	r2,168(sp)
81114660:	28adc83a 	sub	r22,r5,r2
81114664:	05be650e 	bge	zero,r22,81113ffc <__reset+0xfb0f3ffc>
81114668:	07000404 	movi	fp,16
8111466c:	d8801f17 	ldw	r2,124(sp)
81114670:	e583a20e 	bge	fp,r22,811154fc <___svfprintf_internal_r+0x1d58>
81114674:	01604534 	movhi	r5,33044
81114678:	2979d184 	addi	r5,r5,-6330
8111467c:	dc403015 	stw	r17,192(sp)
81114680:	d9402b15 	stw	r5,172(sp)
81114684:	b023883a 	mov	r17,r22
81114688:	050001c4 	movi	r20,7
8111468c:	902d883a 	mov	r22,r18
81114690:	8025883a 	mov	r18,r16
81114694:	dc002c17 	ldw	r16,176(sp)
81114698:	00000306 	br	811146a8 <___svfprintf_internal_r+0xf04>
8111469c:	8c7ffc04 	addi	r17,r17,-16
811146a0:	42000204 	addi	r8,r8,8
811146a4:	e440110e 	bge	fp,r17,811146ec <___svfprintf_internal_r+0xf48>
811146a8:	18c00404 	addi	r3,r3,16
811146ac:	10800044 	addi	r2,r2,1
811146b0:	45400015 	stw	r21,0(r8)
811146b4:	47000115 	stw	fp,4(r8)
811146b8:	d8c02015 	stw	r3,128(sp)
811146bc:	d8801f15 	stw	r2,124(sp)
811146c0:	a0bff60e 	bge	r20,r2,8111469c <__reset+0xfb0f469c>
811146c4:	d9801e04 	addi	r6,sp,120
811146c8:	800b883a 	mov	r5,r16
811146cc:	9809883a 	mov	r4,r19
811146d0:	11202640 	call	81120264 <__ssprint_r>
811146d4:	103d1a1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811146d8:	8c7ffc04 	addi	r17,r17,-16
811146dc:	d8c02017 	ldw	r3,128(sp)
811146e0:	d8801f17 	ldw	r2,124(sp)
811146e4:	da000404 	addi	r8,sp,16
811146e8:	e47fef16 	blt	fp,r17,811146a8 <__reset+0xfb0f46a8>
811146ec:	9021883a 	mov	r16,r18
811146f0:	b025883a 	mov	r18,r22
811146f4:	882d883a 	mov	r22,r17
811146f8:	dc403017 	ldw	r17,192(sp)
811146fc:	d9002b17 	ldw	r4,172(sp)
81114700:	1d87883a 	add	r3,r3,r22
81114704:	10800044 	addi	r2,r2,1
81114708:	41000015 	stw	r4,0(r8)
8111470c:	45800115 	stw	r22,4(r8)
81114710:	d8c02015 	stw	r3,128(sp)
81114714:	d8801f15 	stw	r2,124(sp)
81114718:	010001c4 	movi	r4,7
8111471c:	20819a16 	blt	r4,r2,81114d88 <___svfprintf_internal_r+0x15e4>
81114720:	42000204 	addi	r8,r8,8
81114724:	003e3506 	br	81113ffc <__reset+0xfb0f3ffc>
81114728:	d9403317 	ldw	r5,204(sp)
8111472c:	00800044 	movi	r2,1
81114730:	18c00044 	addi	r3,r3,1
81114734:	1141710e 	bge	r2,r5,81114cfc <___svfprintf_internal_r+0x1558>
81114738:	dc401f17 	ldw	r17,124(sp)
8111473c:	00800044 	movi	r2,1
81114740:	40800115 	stw	r2,4(r8)
81114744:	8c400044 	addi	r17,r17,1
81114748:	44000015 	stw	r16,0(r8)
8111474c:	d8c02015 	stw	r3,128(sp)
81114750:	dc401f15 	stw	r17,124(sp)
81114754:	008001c4 	movi	r2,7
81114758:	14417416 	blt	r2,r17,81114d2c <___svfprintf_internal_r+0x1588>
8111475c:	42000204 	addi	r8,r8,8
81114760:	d8803817 	ldw	r2,224(sp)
81114764:	d9003417 	ldw	r4,208(sp)
81114768:	8c400044 	addi	r17,r17,1
8111476c:	10c7883a 	add	r3,r2,r3
81114770:	40800115 	stw	r2,4(r8)
81114774:	41000015 	stw	r4,0(r8)
81114778:	d8c02015 	stw	r3,128(sp)
8111477c:	dc401f15 	stw	r17,124(sp)
81114780:	008001c4 	movi	r2,7
81114784:	14417216 	blt	r2,r17,81114d50 <___svfprintf_internal_r+0x15ac>
81114788:	45800204 	addi	r22,r8,8
8111478c:	d9003617 	ldw	r4,216(sp)
81114790:	d9403717 	ldw	r5,220(sp)
81114794:	000d883a 	mov	r6,zero
81114798:	000f883a 	mov	r7,zero
8111479c:	d8c03d15 	stw	r3,244(sp)
811147a0:	11263bc0 	call	811263bc <__eqdf2>
811147a4:	d8c03d17 	ldw	r3,244(sp)
811147a8:	1000b326 	beq	r2,zero,81114a78 <___svfprintf_internal_r+0x12d4>
811147ac:	d9403317 	ldw	r5,204(sp)
811147b0:	84000044 	addi	r16,r16,1
811147b4:	8c400044 	addi	r17,r17,1
811147b8:	28bfffc4 	addi	r2,r5,-1
811147bc:	1887883a 	add	r3,r3,r2
811147c0:	b0800115 	stw	r2,4(r22)
811147c4:	b4000015 	stw	r16,0(r22)
811147c8:	d8c02015 	stw	r3,128(sp)
811147cc:	dc401f15 	stw	r17,124(sp)
811147d0:	008001c4 	movi	r2,7
811147d4:	1440d216 	blt	r2,r17,81114b20 <___svfprintf_internal_r+0x137c>
811147d8:	b5800204 	addi	r22,r22,8
811147dc:	d9003b17 	ldw	r4,236(sp)
811147e0:	df0022c4 	addi	fp,sp,139
811147e4:	8c400044 	addi	r17,r17,1
811147e8:	20c7883a 	add	r3,r4,r3
811147ec:	b7000015 	stw	fp,0(r22)
811147f0:	b1000115 	stw	r4,4(r22)
811147f4:	d8c02015 	stw	r3,128(sp)
811147f8:	dc401f15 	stw	r17,124(sp)
811147fc:	008001c4 	movi	r2,7
81114800:	14400e16 	blt	r2,r17,8111483c <___svfprintf_internal_r+0x1098>
81114804:	b2000204 	addi	r8,r22,8
81114808:	003e3c06 	br	811140fc <__reset+0xfb0f40fc>
8111480c:	01204534 	movhi	r4,33044
81114810:	2139d184 	addi	r4,r4,-6330
81114814:	d9002b15 	stw	r4,172(sp)
81114818:	d9002b17 	ldw	r4,172(sp)
8111481c:	1c07883a 	add	r3,r3,r16
81114820:	44000115 	stw	r16,4(r8)
81114824:	41000015 	stw	r4,0(r8)
81114828:	10800044 	addi	r2,r2,1
8111482c:	d8c02015 	stw	r3,128(sp)
81114830:	d8801f15 	stw	r2,124(sp)
81114834:	010001c4 	movi	r4,7
81114838:	20be2f0e 	bge	r4,r2,811140f8 <__reset+0xfb0f40f8>
8111483c:	d9402c17 	ldw	r5,176(sp)
81114840:	d9801e04 	addi	r6,sp,120
81114844:	9809883a 	mov	r4,r19
81114848:	11202640 	call	81120264 <__ssprint_r>
8111484c:	103cbc1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114850:	d8c02017 	ldw	r3,128(sp)
81114854:	da000404 	addi	r8,sp,16
81114858:	003e2806 	br	811140fc <__reset+0xfb0f40fc>
8111485c:	d9402c17 	ldw	r5,176(sp)
81114860:	d9801e04 	addi	r6,sp,120
81114864:	9809883a 	mov	r4,r19
81114868:	11202640 	call	81120264 <__ssprint_r>
8111486c:	103e5f26 	beq	r2,zero,811141ec <__reset+0xfb0f41ec>
81114870:	003cb306 	br	81113b40 <__reset+0xfb0f3b40>
81114874:	d9402c17 	ldw	r5,176(sp)
81114878:	d9801e04 	addi	r6,sp,120
8111487c:	9809883a 	mov	r4,r19
81114880:	11202640 	call	81120264 <__ssprint_r>
81114884:	103cae1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114888:	d8c02017 	ldw	r3,128(sp)
8111488c:	da000404 	addi	r8,sp,16
81114890:	003e0d06 	br	811140c8 <__reset+0xfb0f40c8>
81114894:	d9402c17 	ldw	r5,176(sp)
81114898:	d9801e04 	addi	r6,sp,120
8111489c:	9809883a 	mov	r4,r19
811148a0:	11202640 	call	81120264 <__ssprint_r>
811148a4:	103ca61e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811148a8:	d8c02017 	ldw	r3,128(sp)
811148ac:	da000404 	addi	r8,sp,16
811148b0:	003dc106 	br	81113fb8 <__reset+0xfb0f3fb8>
811148b4:	d9402c17 	ldw	r5,176(sp)
811148b8:	d9801e04 	addi	r6,sp,120
811148bc:	9809883a 	mov	r4,r19
811148c0:	11202640 	call	81120264 <__ssprint_r>
811148c4:	103c9e1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811148c8:	d8c02017 	ldw	r3,128(sp)
811148cc:	da000404 	addi	r8,sp,16
811148d0:	003dc706 	br	81113ff0 <__reset+0xfb0f3ff0>
811148d4:	d8802917 	ldw	r2,164(sp)
811148d8:	d8002785 	stb	zero,158(sp)
811148dc:	103f0816 	blt	r2,zero,81114500 <__reset+0xfb0f4500>
811148e0:	00ffdfc4 	movi	r3,-129
811148e4:	a584b03a 	or	r2,r20,r22
811148e8:	90e4703a 	and	r18,r18,r3
811148ec:	103c8126 	beq	r2,zero,81113af4 <__reset+0xfb0f3af4>
811148f0:	0039883a 	mov	fp,zero
811148f4:	003e7606 	br	811142d0 <__reset+0xfb0f42d0>
811148f8:	9080040c 	andi	r2,r18,16
811148fc:	10013d26 	beq	r2,zero,81114df4 <___svfprintf_internal_r+0x1650>
81114900:	d9002d17 	ldw	r4,180(sp)
81114904:	d9402917 	ldw	r5,164(sp)
81114908:	d8002785 	stb	zero,158(sp)
8111490c:	20800104 	addi	r2,r4,4
81114910:	25000017 	ldw	r20,0(r4)
81114914:	002d883a 	mov	r22,zero
81114918:	28013f16 	blt	r5,zero,81114e18 <___svfprintf_internal_r+0x1674>
8111491c:	00ffdfc4 	movi	r3,-129
81114920:	d8802d15 	stw	r2,180(sp)
81114924:	90e4703a 	and	r18,r18,r3
81114928:	a03d2b26 	beq	r20,zero,81113dd8 <__reset+0xfb0f3dd8>
8111492c:	0039883a 	mov	fp,zero
81114930:	003d2e06 	br	81113dec <__reset+0xfb0f3dec>
81114934:	dc402617 	ldw	r17,152(sp)
81114938:	0441830e 	bge	zero,r17,81114f48 <___svfprintf_internal_r+0x17a4>
8111493c:	dc403217 	ldw	r17,200(sp)
81114940:	d8803317 	ldw	r2,204(sp)
81114944:	1440010e 	bge	r2,r17,8111494c <___svfprintf_internal_r+0x11a8>
81114948:	1023883a 	mov	r17,r2
8111494c:	04400a0e 	bge	zero,r17,81114978 <___svfprintf_internal_r+0x11d4>
81114950:	d8801f17 	ldw	r2,124(sp)
81114954:	1c47883a 	add	r3,r3,r17
81114958:	44000015 	stw	r16,0(r8)
8111495c:	10800044 	addi	r2,r2,1
81114960:	44400115 	stw	r17,4(r8)
81114964:	d8c02015 	stw	r3,128(sp)
81114968:	d8801f15 	stw	r2,124(sp)
8111496c:	010001c4 	movi	r4,7
81114970:	20827516 	blt	r4,r2,81115348 <___svfprintf_internal_r+0x1ba4>
81114974:	42000204 	addi	r8,r8,8
81114978:	88027b16 	blt	r17,zero,81115368 <___svfprintf_internal_r+0x1bc4>
8111497c:	d9003217 	ldw	r4,200(sp)
81114980:	2463c83a 	sub	r17,r4,r17
81114984:	0440990e 	bge	zero,r17,81114bec <___svfprintf_internal_r+0x1448>
81114988:	05800404 	movi	r22,16
8111498c:	d8801f17 	ldw	r2,124(sp)
81114990:	b441530e 	bge	r22,r17,81114ee0 <___svfprintf_internal_r+0x173c>
81114994:	01204534 	movhi	r4,33044
81114998:	2139d184 	addi	r4,r4,-6330
8111499c:	d9002b15 	stw	r4,172(sp)
811149a0:	070001c4 	movi	fp,7
811149a4:	dd002c17 	ldw	r20,176(sp)
811149a8:	00000306 	br	811149b8 <___svfprintf_internal_r+0x1214>
811149ac:	42000204 	addi	r8,r8,8
811149b0:	8c7ffc04 	addi	r17,r17,-16
811149b4:	b4414d0e 	bge	r22,r17,81114eec <___svfprintf_internal_r+0x1748>
811149b8:	18c00404 	addi	r3,r3,16
811149bc:	10800044 	addi	r2,r2,1
811149c0:	45400015 	stw	r21,0(r8)
811149c4:	45800115 	stw	r22,4(r8)
811149c8:	d8c02015 	stw	r3,128(sp)
811149cc:	d8801f15 	stw	r2,124(sp)
811149d0:	e0bff60e 	bge	fp,r2,811149ac <__reset+0xfb0f49ac>
811149d4:	d9801e04 	addi	r6,sp,120
811149d8:	a00b883a 	mov	r5,r20
811149dc:	9809883a 	mov	r4,r19
811149e0:	11202640 	call	81120264 <__ssprint_r>
811149e4:	103c561e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811149e8:	d8c02017 	ldw	r3,128(sp)
811149ec:	d8801f17 	ldw	r2,124(sp)
811149f0:	da000404 	addi	r8,sp,16
811149f4:	003fee06 	br	811149b0 <__reset+0xfb0f49b0>
811149f8:	d9402c17 	ldw	r5,176(sp)
811149fc:	d9801e04 	addi	r6,sp,120
81114a00:	9809883a 	mov	r4,r19
81114a04:	11202640 	call	81120264 <__ssprint_r>
81114a08:	103c4d1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114a0c:	d8c02017 	ldw	r3,128(sp)
81114a10:	df002787 	ldb	fp,158(sp)
81114a14:	da000404 	addi	r8,sp,16
81114a18:	003d5a06 	br	81113f84 <__reset+0xfb0f3f84>
81114a1c:	9080040c 	andi	r2,r18,16
81114a20:	10005c26 	beq	r2,zero,81114b94 <___svfprintf_internal_r+0x13f0>
81114a24:	d9402d17 	ldw	r5,180(sp)
81114a28:	d8c02917 	ldw	r3,164(sp)
81114a2c:	d8002785 	stb	zero,158(sp)
81114a30:	28800104 	addi	r2,r5,4
81114a34:	2d000017 	ldw	r20,0(r5)
81114a38:	002d883a 	mov	r22,zero
81114a3c:	18005e16 	blt	r3,zero,81114bb8 <___svfprintf_internal_r+0x1414>
81114a40:	00ffdfc4 	movi	r3,-129
81114a44:	d8802d15 	stw	r2,180(sp)
81114a48:	90e4703a 	and	r18,r18,r3
81114a4c:	0039883a 	mov	fp,zero
81114a50:	a03dfe26 	beq	r20,zero,8111424c <__reset+0xfb0f424c>
81114a54:	00800244 	movi	r2,9
81114a58:	153cb336 	bltu	r2,r20,81113d28 <__reset+0xfb0f3d28>
81114a5c:	a5000c04 	addi	r20,r20,48
81114a60:	dc001dc4 	addi	r16,sp,119
81114a64:	dd001dc5 	stb	r20,119(sp)
81114a68:	d8c02817 	ldw	r3,160(sp)
81114a6c:	1c07c83a 	sub	r3,r3,r16
81114a70:	d8c02e15 	stw	r3,184(sp)
81114a74:	003cf506 	br	81113e4c <__reset+0xfb0f3e4c>
81114a78:	d8803317 	ldw	r2,204(sp)
81114a7c:	143fffc4 	addi	r16,r2,-1
81114a80:	043f560e 	bge	zero,r16,811147dc <__reset+0xfb0f47dc>
81114a84:	07000404 	movi	fp,16
81114a88:	e403530e 	bge	fp,r16,811157d8 <___svfprintf_internal_r+0x2034>
81114a8c:	01604534 	movhi	r5,33044
81114a90:	2979d184 	addi	r5,r5,-6330
81114a94:	d9402b15 	stw	r5,172(sp)
81114a98:	01c001c4 	movi	r7,7
81114a9c:	dd002c17 	ldw	r20,176(sp)
81114aa0:	00000306 	br	81114ab0 <___svfprintf_internal_r+0x130c>
81114aa4:	843ffc04 	addi	r16,r16,-16
81114aa8:	b5800204 	addi	r22,r22,8
81114aac:	e400130e 	bge	fp,r16,81114afc <___svfprintf_internal_r+0x1358>
81114ab0:	18c00404 	addi	r3,r3,16
81114ab4:	8c400044 	addi	r17,r17,1
81114ab8:	b5400015 	stw	r21,0(r22)
81114abc:	b7000115 	stw	fp,4(r22)
81114ac0:	d8c02015 	stw	r3,128(sp)
81114ac4:	dc401f15 	stw	r17,124(sp)
81114ac8:	3c7ff60e 	bge	r7,r17,81114aa4 <__reset+0xfb0f4aa4>
81114acc:	d9801e04 	addi	r6,sp,120
81114ad0:	a00b883a 	mov	r5,r20
81114ad4:	9809883a 	mov	r4,r19
81114ad8:	d9c03d15 	stw	r7,244(sp)
81114adc:	11202640 	call	81120264 <__ssprint_r>
81114ae0:	d9c03d17 	ldw	r7,244(sp)
81114ae4:	103c161e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114ae8:	843ffc04 	addi	r16,r16,-16
81114aec:	d8c02017 	ldw	r3,128(sp)
81114af0:	dc401f17 	ldw	r17,124(sp)
81114af4:	dd800404 	addi	r22,sp,16
81114af8:	e43fed16 	blt	fp,r16,81114ab0 <__reset+0xfb0f4ab0>
81114afc:	d8802b17 	ldw	r2,172(sp)
81114b00:	1c07883a 	add	r3,r3,r16
81114b04:	8c400044 	addi	r17,r17,1
81114b08:	b0800015 	stw	r2,0(r22)
81114b0c:	b4000115 	stw	r16,4(r22)
81114b10:	d8c02015 	stw	r3,128(sp)
81114b14:	dc401f15 	stw	r17,124(sp)
81114b18:	008001c4 	movi	r2,7
81114b1c:	147f2e0e 	bge	r2,r17,811147d8 <__reset+0xfb0f47d8>
81114b20:	d9402c17 	ldw	r5,176(sp)
81114b24:	d9801e04 	addi	r6,sp,120
81114b28:	9809883a 	mov	r4,r19
81114b2c:	11202640 	call	81120264 <__ssprint_r>
81114b30:	103c031e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114b34:	d8c02017 	ldw	r3,128(sp)
81114b38:	dc401f17 	ldw	r17,124(sp)
81114b3c:	dd800404 	addi	r22,sp,16
81114b40:	003f2606 	br	811147dc <__reset+0xfb0f47dc>
81114b44:	9080040c 	andi	r2,r18,16
81114b48:	1000c326 	beq	r2,zero,81114e58 <___svfprintf_internal_r+0x16b4>
81114b4c:	d8802d17 	ldw	r2,180(sp)
81114b50:	15000017 	ldw	r20,0(r2)
81114b54:	10800104 	addi	r2,r2,4
81114b58:	d8802d15 	stw	r2,180(sp)
81114b5c:	a02dd7fa 	srai	r22,r20,31
81114b60:	b005883a 	mov	r2,r22
81114b64:	103c680e 	bge	r2,zero,81113d08 <__reset+0xfb0f3d08>
81114b68:	0529c83a 	sub	r20,zero,r20
81114b6c:	a004c03a 	cmpne	r2,r20,zero
81114b70:	05adc83a 	sub	r22,zero,r22
81114b74:	b0adc83a 	sub	r22,r22,r2
81114b78:	d8802917 	ldw	r2,164(sp)
81114b7c:	07000b44 	movi	fp,45
81114b80:	df002785 	stb	fp,158(sp)
81114b84:	10022e16 	blt	r2,zero,81115440 <___svfprintf_internal_r+0x1c9c>
81114b88:	00bfdfc4 	movi	r2,-129
81114b8c:	90a4703a 	and	r18,r18,r2
81114b90:	003c6406 	br	81113d24 <__reset+0xfb0f3d24>
81114b94:	9080100c 	andi	r2,r18,64
81114b98:	d8002785 	stb	zero,158(sp)
81114b9c:	10012526 	beq	r2,zero,81115034 <___svfprintf_internal_r+0x1890>
81114ba0:	d9002d17 	ldw	r4,180(sp)
81114ba4:	d9402917 	ldw	r5,164(sp)
81114ba8:	002d883a 	mov	r22,zero
81114bac:	20800104 	addi	r2,r4,4
81114bb0:	2500000b 	ldhu	r20,0(r4)
81114bb4:	283fa20e 	bge	r5,zero,81114a40 <__reset+0xfb0f4a40>
81114bb8:	d8802d15 	stw	r2,180(sp)
81114bbc:	0039883a 	mov	fp,zero
81114bc0:	a584b03a 	or	r2,r20,r22
81114bc4:	103c571e 	bne	r2,zero,81113d24 <__reset+0xfb0f3d24>
81114bc8:	00800044 	movi	r2,1
81114bcc:	003e5006 	br	81114510 <__reset+0xfb0f4510>
81114bd0:	d9402c17 	ldw	r5,176(sp)
81114bd4:	d9801e04 	addi	r6,sp,120
81114bd8:	9809883a 	mov	r4,r19
81114bdc:	11202640 	call	81120264 <__ssprint_r>
81114be0:	103bd71e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114be4:	d8c02017 	ldw	r3,128(sp)
81114be8:	da000404 	addi	r8,sp,16
81114bec:	d9003217 	ldw	r4,200(sp)
81114bf0:	d8802617 	ldw	r2,152(sp)
81114bf4:	d9403317 	ldw	r5,204(sp)
81114bf8:	8123883a 	add	r17,r16,r4
81114bfc:	11400216 	blt	r2,r5,81114c08 <___svfprintf_internal_r+0x1464>
81114c00:	9100004c 	andi	r4,r18,1
81114c04:	20000d26 	beq	r4,zero,81114c3c <___svfprintf_internal_r+0x1498>
81114c08:	d9003817 	ldw	r4,224(sp)
81114c0c:	d9403417 	ldw	r5,208(sp)
81114c10:	1907883a 	add	r3,r3,r4
81114c14:	d9001f17 	ldw	r4,124(sp)
81114c18:	41400015 	stw	r5,0(r8)
81114c1c:	d9403817 	ldw	r5,224(sp)
81114c20:	21000044 	addi	r4,r4,1
81114c24:	d8c02015 	stw	r3,128(sp)
81114c28:	41400115 	stw	r5,4(r8)
81114c2c:	d9001f15 	stw	r4,124(sp)
81114c30:	014001c4 	movi	r5,7
81114c34:	2901dc16 	blt	r5,r4,811153a8 <___svfprintf_internal_r+0x1c04>
81114c38:	42000204 	addi	r8,r8,8
81114c3c:	d9003317 	ldw	r4,204(sp)
81114c40:	8121883a 	add	r16,r16,r4
81114c44:	2085c83a 	sub	r2,r4,r2
81114c48:	8461c83a 	sub	r16,r16,r17
81114c4c:	1400010e 	bge	r2,r16,81114c54 <___svfprintf_internal_r+0x14b0>
81114c50:	1021883a 	mov	r16,r2
81114c54:	04000a0e 	bge	zero,r16,81114c80 <___svfprintf_internal_r+0x14dc>
81114c58:	d9001f17 	ldw	r4,124(sp)
81114c5c:	1c07883a 	add	r3,r3,r16
81114c60:	44400015 	stw	r17,0(r8)
81114c64:	21000044 	addi	r4,r4,1
81114c68:	44000115 	stw	r16,4(r8)
81114c6c:	d8c02015 	stw	r3,128(sp)
81114c70:	d9001f15 	stw	r4,124(sp)
81114c74:	014001c4 	movi	r5,7
81114c78:	2901e616 	blt	r5,r4,81115414 <___svfprintf_internal_r+0x1c70>
81114c7c:	42000204 	addi	r8,r8,8
81114c80:	8001f616 	blt	r16,zero,8111545c <___svfprintf_internal_r+0x1cb8>
81114c84:	1421c83a 	sub	r16,r2,r16
81114c88:	043d1c0e 	bge	zero,r16,811140fc <__reset+0xfb0f40fc>
81114c8c:	04400404 	movi	r17,16
81114c90:	d8801f17 	ldw	r2,124(sp)
81114c94:	8c3edd0e 	bge	r17,r16,8111480c <__reset+0xfb0f480c>
81114c98:	01604534 	movhi	r5,33044
81114c9c:	2979d184 	addi	r5,r5,-6330
81114ca0:	d9402b15 	stw	r5,172(sp)
81114ca4:	058001c4 	movi	r22,7
81114ca8:	dd002c17 	ldw	r20,176(sp)
81114cac:	00000306 	br	81114cbc <___svfprintf_internal_r+0x1518>
81114cb0:	42000204 	addi	r8,r8,8
81114cb4:	843ffc04 	addi	r16,r16,-16
81114cb8:	8c3ed70e 	bge	r17,r16,81114818 <__reset+0xfb0f4818>
81114cbc:	18c00404 	addi	r3,r3,16
81114cc0:	10800044 	addi	r2,r2,1
81114cc4:	45400015 	stw	r21,0(r8)
81114cc8:	44400115 	stw	r17,4(r8)
81114ccc:	d8c02015 	stw	r3,128(sp)
81114cd0:	d8801f15 	stw	r2,124(sp)
81114cd4:	b0bff60e 	bge	r22,r2,81114cb0 <__reset+0xfb0f4cb0>
81114cd8:	d9801e04 	addi	r6,sp,120
81114cdc:	a00b883a 	mov	r5,r20
81114ce0:	9809883a 	mov	r4,r19
81114ce4:	11202640 	call	81120264 <__ssprint_r>
81114ce8:	103b951e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114cec:	d8c02017 	ldw	r3,128(sp)
81114cf0:	d8801f17 	ldw	r2,124(sp)
81114cf4:	da000404 	addi	r8,sp,16
81114cf8:	003fee06 	br	81114cb4 <__reset+0xfb0f4cb4>
81114cfc:	9088703a 	and	r4,r18,r2
81114d00:	203e8d1e 	bne	r4,zero,81114738 <__reset+0xfb0f4738>
81114d04:	dc401f17 	ldw	r17,124(sp)
81114d08:	40800115 	stw	r2,4(r8)
81114d0c:	44000015 	stw	r16,0(r8)
81114d10:	8c400044 	addi	r17,r17,1
81114d14:	d8c02015 	stw	r3,128(sp)
81114d18:	dc401f15 	stw	r17,124(sp)
81114d1c:	008001c4 	movi	r2,7
81114d20:	147f7f16 	blt	r2,r17,81114b20 <__reset+0xfb0f4b20>
81114d24:	45800204 	addi	r22,r8,8
81114d28:	003eac06 	br	811147dc <__reset+0xfb0f47dc>
81114d2c:	d9402c17 	ldw	r5,176(sp)
81114d30:	d9801e04 	addi	r6,sp,120
81114d34:	9809883a 	mov	r4,r19
81114d38:	11202640 	call	81120264 <__ssprint_r>
81114d3c:	103b801e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114d40:	d8c02017 	ldw	r3,128(sp)
81114d44:	dc401f17 	ldw	r17,124(sp)
81114d48:	da000404 	addi	r8,sp,16
81114d4c:	003e8406 	br	81114760 <__reset+0xfb0f4760>
81114d50:	d9402c17 	ldw	r5,176(sp)
81114d54:	d9801e04 	addi	r6,sp,120
81114d58:	9809883a 	mov	r4,r19
81114d5c:	11202640 	call	81120264 <__ssprint_r>
81114d60:	103b771e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114d64:	d8c02017 	ldw	r3,128(sp)
81114d68:	dc401f17 	ldw	r17,124(sp)
81114d6c:	dd800404 	addi	r22,sp,16
81114d70:	003e8606 	br	8111478c <__reset+0xfb0f478c>
81114d74:	0029883a 	mov	r20,zero
81114d78:	a5000c04 	addi	r20,r20,48
81114d7c:	dc001dc4 	addi	r16,sp,119
81114d80:	dd001dc5 	stb	r20,119(sp)
81114d84:	003f3806 	br	81114a68 <__reset+0xfb0f4a68>
81114d88:	d9402c17 	ldw	r5,176(sp)
81114d8c:	d9801e04 	addi	r6,sp,120
81114d90:	9809883a 	mov	r4,r19
81114d94:	11202640 	call	81120264 <__ssprint_r>
81114d98:	103b691e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114d9c:	d8c02017 	ldw	r3,128(sp)
81114da0:	da000404 	addi	r8,sp,16
81114da4:	003c9506 	br	81113ffc <__reset+0xfb0f3ffc>
81114da8:	d9003617 	ldw	r4,216(sp)
81114dac:	d9403717 	ldw	r5,220(sp)
81114db0:	da003e15 	stw	r8,248(sp)
81114db4:	111e0780 	call	8111e078 <__fpclassifyd>
81114db8:	da003e17 	ldw	r8,248(sp)
81114dbc:	1000bd1e 	bne	r2,zero,811150b4 <___svfprintf_internal_r+0x1910>
81114dc0:	008011c4 	movi	r2,71
81114dc4:	14411e0e 	bge	r2,r17,81115240 <___svfprintf_internal_r+0x1a9c>
81114dc8:	04204534 	movhi	r16,33044
81114dcc:	8439c404 	addi	r16,r16,-6384
81114dd0:	00c000c4 	movi	r3,3
81114dd4:	00bfdfc4 	movi	r2,-129
81114dd8:	d8c02a15 	stw	r3,168(sp)
81114ddc:	90a4703a 	and	r18,r18,r2
81114de0:	df002783 	ldbu	fp,158(sp)
81114de4:	d8c02e15 	stw	r3,184(sp)
81114de8:	d8002915 	stw	zero,164(sp)
81114dec:	d8003215 	stw	zero,200(sp)
81114df0:	003c1c06 	br	81113e64 <__reset+0xfb0f3e64>
81114df4:	9080100c 	andi	r2,r18,64
81114df8:	d8002785 	stb	zero,158(sp)
81114dfc:	10009426 	beq	r2,zero,81115050 <___svfprintf_internal_r+0x18ac>
81114e00:	d8c02d17 	ldw	r3,180(sp)
81114e04:	d9002917 	ldw	r4,164(sp)
81114e08:	002d883a 	mov	r22,zero
81114e0c:	18800104 	addi	r2,r3,4
81114e10:	1d00000b 	ldhu	r20,0(r3)
81114e14:	203ec10e 	bge	r4,zero,8111491c <__reset+0xfb0f491c>
81114e18:	a586b03a 	or	r3,r20,r22
81114e1c:	d8802d15 	stw	r2,180(sp)
81114e20:	183ec21e 	bne	r3,zero,8111492c <__reset+0xfb0f492c>
81114e24:	0039883a 	mov	fp,zero
81114e28:	0005883a 	mov	r2,zero
81114e2c:	003db806 	br	81114510 <__reset+0xfb0f4510>
81114e30:	d8802d17 	ldw	r2,180(sp)
81114e34:	d8c02d17 	ldw	r3,180(sp)
81114e38:	d9002d17 	ldw	r4,180(sp)
81114e3c:	10800017 	ldw	r2,0(r2)
81114e40:	18c00117 	ldw	r3,4(r3)
81114e44:	21000204 	addi	r4,r4,8
81114e48:	d8803615 	stw	r2,216(sp)
81114e4c:	d8c03715 	stw	r3,220(sp)
81114e50:	d9002d15 	stw	r4,180(sp)
81114e54:	003b8206 	br	81113c60 <__reset+0xfb0f3c60>
81114e58:	9080100c 	andi	r2,r18,64
81114e5c:	10010726 	beq	r2,zero,8111527c <___svfprintf_internal_r+0x1ad8>
81114e60:	d8c02d17 	ldw	r3,180(sp)
81114e64:	1d00000f 	ldh	r20,0(r3)
81114e68:	18c00104 	addi	r3,r3,4
81114e6c:	d8c02d15 	stw	r3,180(sp)
81114e70:	a02dd7fa 	srai	r22,r20,31
81114e74:	b005883a 	mov	r2,r22
81114e78:	003ba206 	br	81113d04 <__reset+0xfb0f3d04>
81114e7c:	9080100c 	andi	r2,r18,64
81114e80:	10010526 	beq	r2,zero,81115298 <___svfprintf_internal_r+0x1af4>
81114e84:	d9002d17 	ldw	r4,180(sp)
81114e88:	002d883a 	mov	r22,zero
81114e8c:	2500000b 	ldhu	r20,0(r4)
81114e90:	21000104 	addi	r4,r4,4
81114e94:	d9002d15 	stw	r4,180(sp)
81114e98:	003cfe06 	br	81114294 <__reset+0xfb0f4294>
81114e9c:	bc400007 	ldb	r17,0(r23)
81114ea0:	003a9606 	br	811138fc <__reset+0xfb0f38fc>
81114ea4:	9080040c 	andi	r2,r18,16
81114ea8:	10010126 	beq	r2,zero,811152b0 <___svfprintf_internal_r+0x1b0c>
81114eac:	d9402d17 	ldw	r5,180(sp)
81114eb0:	d8c02f17 	ldw	r3,188(sp)
81114eb4:	28800017 	ldw	r2,0(r5)
81114eb8:	29400104 	addi	r5,r5,4
81114ebc:	d9402d15 	stw	r5,180(sp)
81114ec0:	10c00015 	stw	r3,0(r2)
81114ec4:	003a6406 	br	81113858 <__reset+0xfb0f3858>
81114ec8:	d9002917 	ldw	r4,164(sp)
81114ecc:	d8002785 	stb	zero,158(sp)
81114ed0:	203d8d16 	blt	r4,zero,81114508 <__reset+0xfb0f4508>
81114ed4:	00bfdfc4 	movi	r2,-129
81114ed8:	90a4703a 	and	r18,r18,r2
81114edc:	003b0506 	br	81113af4 <__reset+0xfb0f3af4>
81114ee0:	01604534 	movhi	r5,33044
81114ee4:	2979d184 	addi	r5,r5,-6330
81114ee8:	d9402b15 	stw	r5,172(sp)
81114eec:	d9402b17 	ldw	r5,172(sp)
81114ef0:	1c47883a 	add	r3,r3,r17
81114ef4:	10800044 	addi	r2,r2,1
81114ef8:	41400015 	stw	r5,0(r8)
81114efc:	44400115 	stw	r17,4(r8)
81114f00:	d8c02015 	stw	r3,128(sp)
81114f04:	d8801f15 	stw	r2,124(sp)
81114f08:	010001c4 	movi	r4,7
81114f0c:	20bf3016 	blt	r4,r2,81114bd0 <__reset+0xfb0f4bd0>
81114f10:	42000204 	addi	r8,r8,8
81114f14:	003f3506 	br	81114bec <__reset+0xfb0f4bec>
81114f18:	01204534 	movhi	r4,33044
81114f1c:	2139d184 	addi	r4,r4,-6330
81114f20:	d9002b15 	stw	r4,172(sp)
81114f24:	003c5e06 	br	811140a0 <__reset+0xfb0f40a0>
81114f28:	d9402c17 	ldw	r5,176(sp)
81114f2c:	d9801e04 	addi	r6,sp,120
81114f30:	9809883a 	mov	r4,r19
81114f34:	11202640 	call	81120264 <__ssprint_r>
81114f38:	103b011e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81114f3c:	d8c02017 	ldw	r3,128(sp)
81114f40:	da000404 	addi	r8,sp,16
81114f44:	003d9306 	br	81114594 <__reset+0xfb0f4594>
81114f48:	d8801f17 	ldw	r2,124(sp)
81114f4c:	01604534 	movhi	r5,33044
81114f50:	01000044 	movi	r4,1
81114f54:	18c00044 	addi	r3,r3,1
81114f58:	10800044 	addi	r2,r2,1
81114f5c:	2979d104 	addi	r5,r5,-6332
81114f60:	41000115 	stw	r4,4(r8)
81114f64:	41400015 	stw	r5,0(r8)
81114f68:	d8c02015 	stw	r3,128(sp)
81114f6c:	d8801f15 	stw	r2,124(sp)
81114f70:	010001c4 	movi	r4,7
81114f74:	2080b516 	blt	r4,r2,8111524c <___svfprintf_internal_r+0x1aa8>
81114f78:	42000204 	addi	r8,r8,8
81114f7c:	8800041e 	bne	r17,zero,81114f90 <___svfprintf_internal_r+0x17ec>
81114f80:	d8803317 	ldw	r2,204(sp)
81114f84:	1000021e 	bne	r2,zero,81114f90 <___svfprintf_internal_r+0x17ec>
81114f88:	9080004c 	andi	r2,r18,1
81114f8c:	103c5b26 	beq	r2,zero,811140fc <__reset+0xfb0f40fc>
81114f90:	d9003817 	ldw	r4,224(sp)
81114f94:	d8801f17 	ldw	r2,124(sp)
81114f98:	d9403417 	ldw	r5,208(sp)
81114f9c:	20c7883a 	add	r3,r4,r3
81114fa0:	10800044 	addi	r2,r2,1
81114fa4:	41000115 	stw	r4,4(r8)
81114fa8:	41400015 	stw	r5,0(r8)
81114fac:	d8c02015 	stw	r3,128(sp)
81114fb0:	d8801f15 	stw	r2,124(sp)
81114fb4:	010001c4 	movi	r4,7
81114fb8:	20818016 	blt	r4,r2,811155bc <___svfprintf_internal_r+0x1e18>
81114fbc:	42000204 	addi	r8,r8,8
81114fc0:	0463c83a 	sub	r17,zero,r17
81114fc4:	0440cb0e 	bge	zero,r17,811152f4 <___svfprintf_internal_r+0x1b50>
81114fc8:	05800404 	movi	r22,16
81114fcc:	b440e80e 	bge	r22,r17,81115370 <___svfprintf_internal_r+0x1bcc>
81114fd0:	01604534 	movhi	r5,33044
81114fd4:	2979d184 	addi	r5,r5,-6330
81114fd8:	d9402b15 	stw	r5,172(sp)
81114fdc:	070001c4 	movi	fp,7
81114fe0:	dd002c17 	ldw	r20,176(sp)
81114fe4:	00000306 	br	81114ff4 <___svfprintf_internal_r+0x1850>
81114fe8:	42000204 	addi	r8,r8,8
81114fec:	8c7ffc04 	addi	r17,r17,-16
81114ff0:	b440e20e 	bge	r22,r17,8111537c <___svfprintf_internal_r+0x1bd8>
81114ff4:	18c00404 	addi	r3,r3,16
81114ff8:	10800044 	addi	r2,r2,1
81114ffc:	45400015 	stw	r21,0(r8)
81115000:	45800115 	stw	r22,4(r8)
81115004:	d8c02015 	stw	r3,128(sp)
81115008:	d8801f15 	stw	r2,124(sp)
8111500c:	e0bff60e 	bge	fp,r2,81114fe8 <__reset+0xfb0f4fe8>
81115010:	d9801e04 	addi	r6,sp,120
81115014:	a00b883a 	mov	r5,r20
81115018:	9809883a 	mov	r4,r19
8111501c:	11202640 	call	81120264 <__ssprint_r>
81115020:	103ac71e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81115024:	d8c02017 	ldw	r3,128(sp)
81115028:	d8801f17 	ldw	r2,124(sp)
8111502c:	da000404 	addi	r8,sp,16
81115030:	003fee06 	br	81114fec <__reset+0xfb0f4fec>
81115034:	d8c02d17 	ldw	r3,180(sp)
81115038:	d9002917 	ldw	r4,164(sp)
8111503c:	002d883a 	mov	r22,zero
81115040:	18800104 	addi	r2,r3,4
81115044:	1d000017 	ldw	r20,0(r3)
81115048:	203e7d0e 	bge	r4,zero,81114a40 <__reset+0xfb0f4a40>
8111504c:	003eda06 	br	81114bb8 <__reset+0xfb0f4bb8>
81115050:	d9402d17 	ldw	r5,180(sp)
81115054:	d8c02917 	ldw	r3,164(sp)
81115058:	002d883a 	mov	r22,zero
8111505c:	28800104 	addi	r2,r5,4
81115060:	2d000017 	ldw	r20,0(r5)
81115064:	183e2d0e 	bge	r3,zero,8111491c <__reset+0xfb0f491c>
81115068:	003f6b06 	br	81114e18 <__reset+0xfb0f4e18>
8111506c:	d8c02d15 	stw	r3,180(sp)
81115070:	0039883a 	mov	fp,zero
81115074:	003ed206 	br	81114bc0 <__reset+0xfb0f4bc0>
81115078:	bc400043 	ldbu	r17,1(r23)
8111507c:	94800814 	ori	r18,r18,32
81115080:	bdc00044 	addi	r23,r23,1
81115084:	8c403fcc 	andi	r17,r17,255
81115088:	8c40201c 	xori	r17,r17,128
8111508c:	8c7fe004 	addi	r17,r17,-128
81115090:	003a1a06 	br	811138fc <__reset+0xfb0f38fc>
81115094:	d9402c17 	ldw	r5,176(sp)
81115098:	d9801e04 	addi	r6,sp,120
8111509c:	9809883a 	mov	r4,r19
811150a0:	11202640 	call	81120264 <__ssprint_r>
811150a4:	103aa61e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811150a8:	d8c02017 	ldw	r3,128(sp)
811150ac:	da000404 	addi	r8,sp,16
811150b0:	003d4a06 	br	811145dc <__reset+0xfb0f45dc>
811150b4:	d9002917 	ldw	r4,164(sp)
811150b8:	05bff7c4 	movi	r22,-33
811150bc:	00bfffc4 	movi	r2,-1
811150c0:	8dac703a 	and	r22,r17,r22
811150c4:	20806a26 	beq	r4,r2,81115270 <___svfprintf_internal_r+0x1acc>
811150c8:	008011c4 	movi	r2,71
811150cc:	b0813726 	beq	r22,r2,811155ac <___svfprintf_internal_r+0x1e08>
811150d0:	d9003717 	ldw	r4,220(sp)
811150d4:	90c04014 	ori	r3,r18,256
811150d8:	d8c02b15 	stw	r3,172(sp)
811150dc:	20015d16 	blt	r4,zero,81115654 <___svfprintf_internal_r+0x1eb0>
811150e0:	dd003717 	ldw	r20,220(sp)
811150e4:	d8002a05 	stb	zero,168(sp)
811150e8:	00801984 	movi	r2,102
811150ec:	88814026 	beq	r17,r2,811155f0 <___svfprintf_internal_r+0x1e4c>
811150f0:	00801184 	movi	r2,70
811150f4:	88817126 	beq	r17,r2,811156bc <___svfprintf_internal_r+0x1f18>
811150f8:	00801144 	movi	r2,69
811150fc:	b0816226 	beq	r22,r2,81115688 <___svfprintf_internal_r+0x1ee4>
81115100:	d8c02917 	ldw	r3,164(sp)
81115104:	d8802104 	addi	r2,sp,132
81115108:	d8800315 	stw	r2,12(sp)
8111510c:	d9403617 	ldw	r5,216(sp)
81115110:	d8802504 	addi	r2,sp,148
81115114:	d8800215 	stw	r2,8(sp)
81115118:	d8802604 	addi	r2,sp,152
8111511c:	d8c00015 	stw	r3,0(sp)
81115120:	d8800115 	stw	r2,4(sp)
81115124:	01c00084 	movi	r7,2
81115128:	a00d883a 	mov	r6,r20
8111512c:	9809883a 	mov	r4,r19
81115130:	d8c03d15 	stw	r3,244(sp)
81115134:	da003e15 	stw	r8,248(sp)
81115138:	11199300 	call	81119930 <_dtoa_r>
8111513c:	1021883a 	mov	r16,r2
81115140:	008019c4 	movi	r2,103
81115144:	d8c03d17 	ldw	r3,244(sp)
81115148:	da003e17 	ldw	r8,248(sp)
8111514c:	8880e726 	beq	r17,r2,811154ec <___svfprintf_internal_r+0x1d48>
81115150:	008011c4 	movi	r2,71
81115154:	8880d426 	beq	r17,r2,811154a8 <___svfprintf_internal_r+0x1d04>
81115158:	80f9883a 	add	fp,r16,r3
8111515c:	d9003617 	ldw	r4,216(sp)
81115160:	000d883a 	mov	r6,zero
81115164:	000f883a 	mov	r7,zero
81115168:	a00b883a 	mov	r5,r20
8111516c:	da003e15 	stw	r8,248(sp)
81115170:	11263bc0 	call	811263bc <__eqdf2>
81115174:	da003e17 	ldw	r8,248(sp)
81115178:	1000e426 	beq	r2,zero,8111550c <___svfprintf_internal_r+0x1d68>
8111517c:	d8802117 	ldw	r2,132(sp)
81115180:	1700062e 	bgeu	r2,fp,8111519c <___svfprintf_internal_r+0x19f8>
81115184:	01000c04 	movi	r4,48
81115188:	10c00044 	addi	r3,r2,1
8111518c:	d8c02115 	stw	r3,132(sp)
81115190:	11000005 	stb	r4,0(r2)
81115194:	d8802117 	ldw	r2,132(sp)
81115198:	173ffb36 	bltu	r2,fp,81115188 <__reset+0xfb0f5188>
8111519c:	1405c83a 	sub	r2,r2,r16
811151a0:	d8803315 	stw	r2,204(sp)
811151a4:	008011c4 	movi	r2,71
811151a8:	b080c526 	beq	r22,r2,811154c0 <___svfprintf_internal_r+0x1d1c>
811151ac:	00801944 	movi	r2,101
811151b0:	1441d90e 	bge	r2,r17,81115918 <___svfprintf_internal_r+0x2174>
811151b4:	d8c02617 	ldw	r3,152(sp)
811151b8:	00801984 	movi	r2,102
811151bc:	d8c03215 	stw	r3,200(sp)
811151c0:	88813426 	beq	r17,r2,81115694 <___svfprintf_internal_r+0x1ef0>
811151c4:	d8c03217 	ldw	r3,200(sp)
811151c8:	d9003317 	ldw	r4,204(sp)
811151cc:	19012516 	blt	r3,r4,81115664 <___svfprintf_internal_r+0x1ec0>
811151d0:	9480004c 	andi	r18,r18,1
811151d4:	9001841e 	bne	r18,zero,811157e8 <___svfprintf_internal_r+0x2044>
811151d8:	1805883a 	mov	r2,r3
811151dc:	1801cc16 	blt	r3,zero,81115910 <___svfprintf_internal_r+0x216c>
811151e0:	d8c03217 	ldw	r3,200(sp)
811151e4:	044019c4 	movi	r17,103
811151e8:	d8c02e15 	stw	r3,184(sp)
811151ec:	df002a07 	ldb	fp,168(sp)
811151f0:	e000a61e 	bne	fp,zero,8111548c <___svfprintf_internal_r+0x1ce8>
811151f4:	df002783 	ldbu	fp,158(sp)
811151f8:	d8802a15 	stw	r2,168(sp)
811151fc:	dc802b17 	ldw	r18,172(sp)
81115200:	d8002915 	stw	zero,164(sp)
81115204:	003b1706 	br	81113e64 <__reset+0xfb0f3e64>
81115208:	04204534 	movhi	r16,33044
8111520c:	8439c104 	addi	r16,r16,-6396
81115210:	003aa606 	br	81113cac <__reset+0xfb0f3cac>
81115214:	d9003917 	ldw	r4,228(sp)
81115218:	04001004 	movi	r16,64
8111521c:	800b883a 	mov	r5,r16
81115220:	11123200 	call	81112320 <_malloc_r>
81115224:	d9002c17 	ldw	r4,176(sp)
81115228:	20800015 	stw	r2,0(r4)
8111522c:	20800415 	stw	r2,16(r4)
81115230:	1001cb26 	beq	r2,zero,81115960 <___svfprintf_internal_r+0x21bc>
81115234:	d8802c17 	ldw	r2,176(sp)
81115238:	14000515 	stw	r16,20(r2)
8111523c:	00397606 	br	81113818 <__reset+0xfb0f3818>
81115240:	04204534 	movhi	r16,33044
81115244:	8439c304 	addi	r16,r16,-6388
81115248:	003ee106 	br	81114dd0 <__reset+0xfb0f4dd0>
8111524c:	d9402c17 	ldw	r5,176(sp)
81115250:	d9801e04 	addi	r6,sp,120
81115254:	9809883a 	mov	r4,r19
81115258:	11202640 	call	81120264 <__ssprint_r>
8111525c:	103a381e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81115260:	dc402617 	ldw	r17,152(sp)
81115264:	d8c02017 	ldw	r3,128(sp)
81115268:	da000404 	addi	r8,sp,16
8111526c:	003f4306 	br	81114f7c <__reset+0xfb0f4f7c>
81115270:	01400184 	movi	r5,6
81115274:	d9402915 	stw	r5,164(sp)
81115278:	003f9506 	br	811150d0 <__reset+0xfb0f50d0>
8111527c:	d9002d17 	ldw	r4,180(sp)
81115280:	25000017 	ldw	r20,0(r4)
81115284:	21000104 	addi	r4,r4,4
81115288:	d9002d15 	stw	r4,180(sp)
8111528c:	a02dd7fa 	srai	r22,r20,31
81115290:	b005883a 	mov	r2,r22
81115294:	003a9b06 	br	81113d04 <__reset+0xfb0f3d04>
81115298:	d9402d17 	ldw	r5,180(sp)
8111529c:	002d883a 	mov	r22,zero
811152a0:	2d000017 	ldw	r20,0(r5)
811152a4:	29400104 	addi	r5,r5,4
811152a8:	d9402d15 	stw	r5,180(sp)
811152ac:	003bf906 	br	81114294 <__reset+0xfb0f4294>
811152b0:	9480100c 	andi	r18,r18,64
811152b4:	90006e26 	beq	r18,zero,81115470 <___svfprintf_internal_r+0x1ccc>
811152b8:	d9002d17 	ldw	r4,180(sp)
811152bc:	d9402f17 	ldw	r5,188(sp)
811152c0:	20800017 	ldw	r2,0(r4)
811152c4:	21000104 	addi	r4,r4,4
811152c8:	d9002d15 	stw	r4,180(sp)
811152cc:	1140000d 	sth	r5,0(r2)
811152d0:	00396106 	br	81113858 <__reset+0xfb0f3858>
811152d4:	d9402c17 	ldw	r5,176(sp)
811152d8:	d9801e04 	addi	r6,sp,120
811152dc:	9809883a 	mov	r4,r19
811152e0:	11202640 	call	81120264 <__ssprint_r>
811152e4:	103a161e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811152e8:	d8c02017 	ldw	r3,128(sp)
811152ec:	d8801f17 	ldw	r2,124(sp)
811152f0:	da000404 	addi	r8,sp,16
811152f4:	d9403317 	ldw	r5,204(sp)
811152f8:	10800044 	addi	r2,r2,1
811152fc:	44000015 	stw	r16,0(r8)
81115300:	28c7883a 	add	r3,r5,r3
81115304:	003b7706 	br	811140e4 <__reset+0xfb0f40e4>
81115308:	8009883a 	mov	r4,r16
8111530c:	da003e15 	stw	r8,248(sp)
81115310:	11134b00 	call	811134b0 <strlen>
81115314:	d8802e15 	stw	r2,184(sp)
81115318:	da003e17 	ldw	r8,248(sp)
8111531c:	103c280e 	bge	r2,zero,811143c0 <__reset+0xfb0f43c0>
81115320:	0005883a 	mov	r2,zero
81115324:	003c2606 	br	811143c0 <__reset+0xfb0f43c0>
81115328:	00bfffc4 	movi	r2,-1
8111532c:	003a0906 	br	81113b54 <__reset+0xfb0f3b54>
81115330:	01204534 	movhi	r4,33044
81115334:	2139d584 	addi	r4,r4,-6314
81115338:	d9003515 	stw	r4,212(sp)
8111533c:	003b0606 	br	81113f58 <__reset+0xfb0f3f58>
81115340:	013fffc4 	movi	r4,-1
81115344:	003a2706 	br	81113be4 <__reset+0xfb0f3be4>
81115348:	d9402c17 	ldw	r5,176(sp)
8111534c:	d9801e04 	addi	r6,sp,120
81115350:	9809883a 	mov	r4,r19
81115354:	11202640 	call	81120264 <__ssprint_r>
81115358:	1039f91e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
8111535c:	d8c02017 	ldw	r3,128(sp)
81115360:	da000404 	addi	r8,sp,16
81115364:	003d8406 	br	81114978 <__reset+0xfb0f4978>
81115368:	0023883a 	mov	r17,zero
8111536c:	003d8306 	br	8111497c <__reset+0xfb0f497c>
81115370:	01204534 	movhi	r4,33044
81115374:	2139d184 	addi	r4,r4,-6330
81115378:	d9002b15 	stw	r4,172(sp)
8111537c:	d9002b17 	ldw	r4,172(sp)
81115380:	1c47883a 	add	r3,r3,r17
81115384:	10800044 	addi	r2,r2,1
81115388:	41000015 	stw	r4,0(r8)
8111538c:	44400115 	stw	r17,4(r8)
81115390:	d8c02015 	stw	r3,128(sp)
81115394:	d8801f15 	stw	r2,124(sp)
81115398:	010001c4 	movi	r4,7
8111539c:	20bfcd16 	blt	r4,r2,811152d4 <__reset+0xfb0f52d4>
811153a0:	42000204 	addi	r8,r8,8
811153a4:	003fd306 	br	811152f4 <__reset+0xfb0f52f4>
811153a8:	d9402c17 	ldw	r5,176(sp)
811153ac:	d9801e04 	addi	r6,sp,120
811153b0:	9809883a 	mov	r4,r19
811153b4:	11202640 	call	81120264 <__ssprint_r>
811153b8:	1039e11e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811153bc:	d8802617 	ldw	r2,152(sp)
811153c0:	d8c02017 	ldw	r3,128(sp)
811153c4:	da000404 	addi	r8,sp,16
811153c8:	003e1c06 	br	81114c3c <__reset+0xfb0f4c3c>
811153cc:	d8802917 	ldw	r2,164(sp)
811153d0:	00c00184 	movi	r3,6
811153d4:	1880012e 	bgeu	r3,r2,811153dc <___svfprintf_internal_r+0x1c38>
811153d8:	1805883a 	mov	r2,r3
811153dc:	d8802e15 	stw	r2,184(sp)
811153e0:	1000f316 	blt	r2,zero,811157b0 <___svfprintf_internal_r+0x200c>
811153e4:	04204534 	movhi	r16,33044
811153e8:	d8802a15 	stw	r2,168(sp)
811153ec:	dd002d15 	stw	r20,180(sp)
811153f0:	d8002915 	stw	zero,164(sp)
811153f4:	d8003215 	stw	zero,200(sp)
811153f8:	8439cf04 	addi	r16,r16,-6340
811153fc:	0039883a 	mov	fp,zero
81115400:	003a9f06 	br	81113e80 <__reset+0xfb0f3e80>
81115404:	01204534 	movhi	r4,33044
81115408:	2139d584 	addi	r4,r4,-6314
8111540c:	d9003515 	stw	r4,212(sp)
81115410:	003b5f06 	br	81114190 <__reset+0xfb0f4190>
81115414:	d9402c17 	ldw	r5,176(sp)
81115418:	d9801e04 	addi	r6,sp,120
8111541c:	9809883a 	mov	r4,r19
81115420:	11202640 	call	81120264 <__ssprint_r>
81115424:	1039c61e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
81115428:	d8802617 	ldw	r2,152(sp)
8111542c:	d9403317 	ldw	r5,204(sp)
81115430:	d8c02017 	ldw	r3,128(sp)
81115434:	da000404 	addi	r8,sp,16
81115438:	2885c83a 	sub	r2,r5,r2
8111543c:	003e1006 	br	81114c80 <__reset+0xfb0f4c80>
81115440:	00800044 	movi	r2,1
81115444:	10803fcc 	andi	r2,r2,255
81115448:	00c00044 	movi	r3,1
8111544c:	10fa3526 	beq	r2,r3,81113d24 <__reset+0xfb0f3d24>
81115450:	00c00084 	movi	r3,2
81115454:	10fb9e26 	beq	r2,r3,811142d0 <__reset+0xfb0f42d0>
81115458:	003a6406 	br	81113dec <__reset+0xfb0f3dec>
8111545c:	0021883a 	mov	r16,zero
81115460:	003e0806 	br	81114c84 <__reset+0xfb0f4c84>
81115464:	07000b44 	movi	fp,45
81115468:	df002785 	stb	fp,158(sp)
8111546c:	003a0b06 	br	81113c9c <__reset+0xfb0f3c9c>
81115470:	d8c02d17 	ldw	r3,180(sp)
81115474:	d9002f17 	ldw	r4,188(sp)
81115478:	18800017 	ldw	r2,0(r3)
8111547c:	18c00104 	addi	r3,r3,4
81115480:	d8c02d15 	stw	r3,180(sp)
81115484:	11000015 	stw	r4,0(r2)
81115488:	0038f306 	br	81113858 <__reset+0xfb0f3858>
8111548c:	00c00b44 	movi	r3,45
81115490:	d8c02785 	stb	r3,158(sp)
81115494:	d8802a15 	stw	r2,168(sp)
81115498:	dc802b17 	ldw	r18,172(sp)
8111549c:	d8002915 	stw	zero,164(sp)
811154a0:	07000b44 	movi	fp,45
811154a4:	003a7306 	br	81113e74 <__reset+0xfb0f3e74>
811154a8:	9080004c 	andi	r2,r18,1
811154ac:	1000941e 	bne	r2,zero,81115700 <___svfprintf_internal_r+0x1f5c>
811154b0:	d8802117 	ldw	r2,132(sp)
811154b4:	1405c83a 	sub	r2,r2,r16
811154b8:	d8803315 	stw	r2,204(sp)
811154bc:	b441161e 	bne	r22,r17,81115918 <___svfprintf_internal_r+0x2174>
811154c0:	dd802617 	ldw	r22,152(sp)
811154c4:	00bfff44 	movi	r2,-3
811154c8:	b0801a16 	blt	r22,r2,81115534 <___svfprintf_internal_r+0x1d90>
811154cc:	d9402917 	ldw	r5,164(sp)
811154d0:	2d801816 	blt	r5,r22,81115534 <___svfprintf_internal_r+0x1d90>
811154d4:	dd803215 	stw	r22,200(sp)
811154d8:	003f3a06 	br	811151c4 <__reset+0xfb0f51c4>
811154dc:	1025883a 	mov	r18,r2
811154e0:	0039883a 	mov	fp,zero
811154e4:	00800084 	movi	r2,2
811154e8:	003fd606 	br	81115444 <__reset+0xfb0f5444>
811154ec:	9080004c 	andi	r2,r18,1
811154f0:	103f191e 	bne	r2,zero,81115158 <__reset+0xfb0f5158>
811154f4:	d8802117 	ldw	r2,132(sp)
811154f8:	003f2806 	br	8111519c <__reset+0xfb0f519c>
811154fc:	01204534 	movhi	r4,33044
81115500:	2139d184 	addi	r4,r4,-6330
81115504:	d9002b15 	stw	r4,172(sp)
81115508:	003c7c06 	br	811146fc <__reset+0xfb0f46fc>
8111550c:	e005883a 	mov	r2,fp
81115510:	003f2206 	br	8111519c <__reset+0xfb0f519c>
81115514:	d9402917 	ldw	r5,164(sp)
81115518:	df002783 	ldbu	fp,158(sp)
8111551c:	dd002d15 	stw	r20,180(sp)
81115520:	d9402a15 	stw	r5,168(sp)
81115524:	d9402e15 	stw	r5,184(sp)
81115528:	d8002915 	stw	zero,164(sp)
8111552c:	d8003215 	stw	zero,200(sp)
81115530:	003a4c06 	br	81113e64 <__reset+0xfb0f3e64>
81115534:	8c7fff84 	addi	r17,r17,-2
81115538:	b5bfffc4 	addi	r22,r22,-1
8111553c:	dd802615 	stw	r22,152(sp)
81115540:	dc4022c5 	stb	r17,139(sp)
81115544:	b000c316 	blt	r22,zero,81115854 <___svfprintf_internal_r+0x20b0>
81115548:	00800ac4 	movi	r2,43
8111554c:	d8802305 	stb	r2,140(sp)
81115550:	00800244 	movi	r2,9
81115554:	15806e16 	blt	r2,r22,81115710 <___svfprintf_internal_r+0x1f6c>
81115558:	00800c04 	movi	r2,48
8111555c:	b5800c04 	addi	r22,r22,48
81115560:	d8802345 	stb	r2,141(sp)
81115564:	dd802385 	stb	r22,142(sp)
81115568:	d88023c4 	addi	r2,sp,143
8111556c:	df0022c4 	addi	fp,sp,139
81115570:	d8c03317 	ldw	r3,204(sp)
81115574:	1739c83a 	sub	fp,r2,fp
81115578:	d9003317 	ldw	r4,204(sp)
8111557c:	e0c7883a 	add	r3,fp,r3
81115580:	df003b15 	stw	fp,236(sp)
81115584:	d8c02e15 	stw	r3,184(sp)
81115588:	00800044 	movi	r2,1
8111558c:	1100b70e 	bge	r2,r4,8111586c <___svfprintf_internal_r+0x20c8>
81115590:	d8c02e17 	ldw	r3,184(sp)
81115594:	18c00044 	addi	r3,r3,1
81115598:	d8c02e15 	stw	r3,184(sp)
8111559c:	1805883a 	mov	r2,r3
811155a0:	1800b016 	blt	r3,zero,81115864 <___svfprintf_internal_r+0x20c0>
811155a4:	d8003215 	stw	zero,200(sp)
811155a8:	003f1006 	br	811151ec <__reset+0xfb0f51ec>
811155ac:	d8802917 	ldw	r2,164(sp)
811155b0:	103ec71e 	bne	r2,zero,811150d0 <__reset+0xfb0f50d0>
811155b4:	dc002915 	stw	r16,164(sp)
811155b8:	003ec506 	br	811150d0 <__reset+0xfb0f50d0>
811155bc:	d9402c17 	ldw	r5,176(sp)
811155c0:	d9801e04 	addi	r6,sp,120
811155c4:	9809883a 	mov	r4,r19
811155c8:	11202640 	call	81120264 <__ssprint_r>
811155cc:	10395c1e 	bne	r2,zero,81113b40 <__reset+0xfb0f3b40>
811155d0:	dc402617 	ldw	r17,152(sp)
811155d4:	d8c02017 	ldw	r3,128(sp)
811155d8:	d8801f17 	ldw	r2,124(sp)
811155dc:	da000404 	addi	r8,sp,16
811155e0:	003e7706 	br	81114fc0 <__reset+0xfb0f4fc0>
811155e4:	582f883a 	mov	r23,r11
811155e8:	d8002915 	stw	zero,164(sp)
811155ec:	0038c406 	br	81113900 <__reset+0xfb0f3900>
811155f0:	d8c02917 	ldw	r3,164(sp)
811155f4:	d8802104 	addi	r2,sp,132
811155f8:	d8800315 	stw	r2,12(sp)
811155fc:	d9403617 	ldw	r5,216(sp)
81115600:	d8802504 	addi	r2,sp,148
81115604:	d8800215 	stw	r2,8(sp)
81115608:	d8802604 	addi	r2,sp,152
8111560c:	d8c00015 	stw	r3,0(sp)
81115610:	9809883a 	mov	r4,r19
81115614:	d8800115 	stw	r2,4(sp)
81115618:	01c000c4 	movi	r7,3
8111561c:	a00d883a 	mov	r6,r20
81115620:	da003e15 	stw	r8,248(sp)
81115624:	11199300 	call	81119930 <_dtoa_r>
81115628:	d9002917 	ldw	r4,164(sp)
8111562c:	da003e17 	ldw	r8,248(sp)
81115630:	1021883a 	mov	r16,r2
81115634:	1139883a 	add	fp,r2,r4
81115638:	2007883a 	mov	r3,r4
8111563c:	81000007 	ldb	r4,0(r16)
81115640:	00800c04 	movi	r2,48
81115644:	20806f26 	beq	r4,r2,81115804 <___svfprintf_internal_r+0x2060>
81115648:	d8c02617 	ldw	r3,152(sp)
8111564c:	e0f9883a 	add	fp,fp,r3
81115650:	003ec206 	br	8111515c <__reset+0xfb0f515c>
81115654:	00c00b44 	movi	r3,45
81115658:	2520003c 	xorhi	r20,r4,32768
8111565c:	d8c02a05 	stb	r3,168(sp)
81115660:	003ea106 	br	811150e8 <__reset+0xfb0f50e8>
81115664:	d8c03217 	ldw	r3,200(sp)
81115668:	00c0890e 	bge	zero,r3,81115890 <___svfprintf_internal_r+0x20ec>
8111566c:	00800044 	movi	r2,1
81115670:	d9003317 	ldw	r4,204(sp)
81115674:	1105883a 	add	r2,r2,r4
81115678:	d8802e15 	stw	r2,184(sp)
8111567c:	10005f16 	blt	r2,zero,811157fc <___svfprintf_internal_r+0x2058>
81115680:	044019c4 	movi	r17,103
81115684:	003ed906 	br	811151ec <__reset+0xfb0f51ec>
81115688:	d9002917 	ldw	r4,164(sp)
8111568c:	20c00044 	addi	r3,r4,1
81115690:	003e9c06 	br	81115104 <__reset+0xfb0f5104>
81115694:	d9002917 	ldw	r4,164(sp)
81115698:	00c0680e 	bge	zero,r3,8111583c <___svfprintf_internal_r+0x2098>
8111569c:	2000461e 	bne	r4,zero,811157b8 <___svfprintf_internal_r+0x2014>
811156a0:	9480004c 	andi	r18,r18,1
811156a4:	9000441e 	bne	r18,zero,811157b8 <___svfprintf_internal_r+0x2014>
811156a8:	1805883a 	mov	r2,r3
811156ac:	1800a016 	blt	r3,zero,81115930 <___svfprintf_internal_r+0x218c>
811156b0:	d8c03217 	ldw	r3,200(sp)
811156b4:	d8c02e15 	stw	r3,184(sp)
811156b8:	003ecc06 	br	811151ec <__reset+0xfb0f51ec>
811156bc:	d9402917 	ldw	r5,164(sp)
811156c0:	d8802104 	addi	r2,sp,132
811156c4:	d8800315 	stw	r2,12(sp)
811156c8:	d9400015 	stw	r5,0(sp)
811156cc:	d8802504 	addi	r2,sp,148
811156d0:	d9403617 	ldw	r5,216(sp)
811156d4:	d8800215 	stw	r2,8(sp)
811156d8:	d8802604 	addi	r2,sp,152
811156dc:	d8800115 	stw	r2,4(sp)
811156e0:	01c000c4 	movi	r7,3
811156e4:	a00d883a 	mov	r6,r20
811156e8:	9809883a 	mov	r4,r19
811156ec:	da003e15 	stw	r8,248(sp)
811156f0:	11199300 	call	81119930 <_dtoa_r>
811156f4:	d8c02917 	ldw	r3,164(sp)
811156f8:	da003e17 	ldw	r8,248(sp)
811156fc:	1021883a 	mov	r16,r2
81115700:	00801184 	movi	r2,70
81115704:	80f9883a 	add	fp,r16,r3
81115708:	88bfcc26 	beq	r17,r2,8111563c <__reset+0xfb0f563c>
8111570c:	003e9306 	br	8111515c <__reset+0xfb0f515c>
81115710:	df0022c4 	addi	fp,sp,139
81115714:	dc002915 	stw	r16,164(sp)
81115718:	9829883a 	mov	r20,r19
8111571c:	e021883a 	mov	r16,fp
81115720:	4027883a 	mov	r19,r8
81115724:	b009883a 	mov	r4,r22
81115728:	01400284 	movi	r5,10
8111572c:	1124eec0 	call	81124eec <__modsi3>
81115730:	10800c04 	addi	r2,r2,48
81115734:	843fffc4 	addi	r16,r16,-1
81115738:	b009883a 	mov	r4,r22
8111573c:	01400284 	movi	r5,10
81115740:	80800005 	stb	r2,0(r16)
81115744:	1124e680 	call	81124e68 <__divsi3>
81115748:	102d883a 	mov	r22,r2
8111574c:	00800244 	movi	r2,9
81115750:	15bff416 	blt	r2,r22,81115724 <__reset+0xfb0f5724>
81115754:	9811883a 	mov	r8,r19
81115758:	b0800c04 	addi	r2,r22,48
8111575c:	a027883a 	mov	r19,r20
81115760:	8029883a 	mov	r20,r16
81115764:	a17fffc4 	addi	r5,r20,-1
81115768:	a0bfffc5 	stb	r2,-1(r20)
8111576c:	dc002917 	ldw	r16,164(sp)
81115770:	2f00752e 	bgeu	r5,fp,81115948 <___svfprintf_internal_r+0x21a4>
81115774:	d9c02384 	addi	r7,sp,142
81115778:	3d0fc83a 	sub	r7,r7,r20
8111577c:	d9002344 	addi	r4,sp,141
81115780:	e1cf883a 	add	r7,fp,r7
81115784:	00000106 	br	8111578c <___svfprintf_internal_r+0x1fe8>
81115788:	28800003 	ldbu	r2,0(r5)
8111578c:	20800005 	stb	r2,0(r4)
81115790:	21000044 	addi	r4,r4,1
81115794:	29400044 	addi	r5,r5,1
81115798:	21fffb1e 	bne	r4,r7,81115788 <__reset+0xfb0f5788>
8111579c:	d8802304 	addi	r2,sp,140
811157a0:	1505c83a 	sub	r2,r2,r20
811157a4:	d8c02344 	addi	r3,sp,141
811157a8:	1885883a 	add	r2,r3,r2
811157ac:	003f7006 	br	81115570 <__reset+0xfb0f5570>
811157b0:	0005883a 	mov	r2,zero
811157b4:	003f0b06 	br	811153e4 <__reset+0xfb0f53e4>
811157b8:	d9002917 	ldw	r4,164(sp)
811157bc:	d8c03217 	ldw	r3,200(sp)
811157c0:	20800044 	addi	r2,r4,1
811157c4:	1885883a 	add	r2,r3,r2
811157c8:	d8802e15 	stw	r2,184(sp)
811157cc:	103e870e 	bge	r2,zero,811151ec <__reset+0xfb0f51ec>
811157d0:	0005883a 	mov	r2,zero
811157d4:	003e8506 	br	811151ec <__reset+0xfb0f51ec>
811157d8:	01204534 	movhi	r4,33044
811157dc:	2139d184 	addi	r4,r4,-6330
811157e0:	d9002b15 	stw	r4,172(sp)
811157e4:	003cc506 	br	81114afc <__reset+0xfb0f4afc>
811157e8:	d8c03217 	ldw	r3,200(sp)
811157ec:	18c00044 	addi	r3,r3,1
811157f0:	d8c02e15 	stw	r3,184(sp)
811157f4:	1805883a 	mov	r2,r3
811157f8:	183fa10e 	bge	r3,zero,81115680 <__reset+0xfb0f5680>
811157fc:	0005883a 	mov	r2,zero
81115800:	003f9f06 	br	81115680 <__reset+0xfb0f5680>
81115804:	d9003617 	ldw	r4,216(sp)
81115808:	000d883a 	mov	r6,zero
8111580c:	000f883a 	mov	r7,zero
81115810:	a00b883a 	mov	r5,r20
81115814:	d8c03d15 	stw	r3,244(sp)
81115818:	da003e15 	stw	r8,248(sp)
8111581c:	11263bc0 	call	811263bc <__eqdf2>
81115820:	d8c03d17 	ldw	r3,244(sp)
81115824:	da003e17 	ldw	r8,248(sp)
81115828:	103f8726 	beq	r2,zero,81115648 <__reset+0xfb0f5648>
8111582c:	00800044 	movi	r2,1
81115830:	10c7c83a 	sub	r3,r2,r3
81115834:	d8c02615 	stw	r3,152(sp)
81115838:	003f8406 	br	8111564c <__reset+0xfb0f564c>
8111583c:	20000e1e 	bne	r4,zero,81115878 <___svfprintf_internal_r+0x20d4>
81115840:	9480004c 	andi	r18,r18,1
81115844:	90000c1e 	bne	r18,zero,81115878 <___svfprintf_internal_r+0x20d4>
81115848:	00800044 	movi	r2,1
8111584c:	d8802e15 	stw	r2,184(sp)
81115850:	003e6606 	br	811151ec <__reset+0xfb0f51ec>
81115854:	00800b44 	movi	r2,45
81115858:	05adc83a 	sub	r22,zero,r22
8111585c:	d8802305 	stb	r2,140(sp)
81115860:	003f3b06 	br	81115550 <__reset+0xfb0f5550>
81115864:	0005883a 	mov	r2,zero
81115868:	003f4e06 	br	811155a4 <__reset+0xfb0f55a4>
8111586c:	90a4703a 	and	r18,r18,r2
81115870:	903f4a26 	beq	r18,zero,8111559c <__reset+0xfb0f559c>
81115874:	003f4606 	br	81115590 <__reset+0xfb0f5590>
81115878:	d8c02917 	ldw	r3,164(sp)
8111587c:	18c00084 	addi	r3,r3,2
81115880:	d8c02e15 	stw	r3,184(sp)
81115884:	1805883a 	mov	r2,r3
81115888:	183e580e 	bge	r3,zero,811151ec <__reset+0xfb0f51ec>
8111588c:	003fd006 	br	811157d0 <__reset+0xfb0f57d0>
81115890:	00800084 	movi	r2,2
81115894:	10c5c83a 	sub	r2,r2,r3
81115898:	003f7506 	br	81115670 <__reset+0xfb0f5670>
8111589c:	d8802d17 	ldw	r2,180(sp)
811158a0:	d9002d17 	ldw	r4,180(sp)
811158a4:	bc400043 	ldbu	r17,1(r23)
811158a8:	10800017 	ldw	r2,0(r2)
811158ac:	582f883a 	mov	r23,r11
811158b0:	d8802915 	stw	r2,164(sp)
811158b4:	20800104 	addi	r2,r4,4
811158b8:	d9002917 	ldw	r4,164(sp)
811158bc:	d8802d15 	stw	r2,180(sp)
811158c0:	203df00e 	bge	r4,zero,81115084 <__reset+0xfb0f5084>
811158c4:	8c403fcc 	andi	r17,r17,255
811158c8:	00bfffc4 	movi	r2,-1
811158cc:	8c40201c 	xori	r17,r17,128
811158d0:	d8802915 	stw	r2,164(sp)
811158d4:	8c7fe004 	addi	r17,r17,-128
811158d8:	00380806 	br	811138fc <__reset+0xfb0f38fc>
811158dc:	9080004c 	andi	r2,r18,1
811158e0:	0039883a 	mov	fp,zero
811158e4:	10000726 	beq	r2,zero,81115904 <___svfprintf_internal_r+0x2160>
811158e8:	d8c02817 	ldw	r3,160(sp)
811158ec:	dc001dc4 	addi	r16,sp,119
811158f0:	00800c04 	movi	r2,48
811158f4:	1c07c83a 	sub	r3,r3,r16
811158f8:	d8801dc5 	stb	r2,119(sp)
811158fc:	d8c02e15 	stw	r3,184(sp)
81115900:	00395206 	br	81113e4c <__reset+0xfb0f3e4c>
81115904:	d8002e15 	stw	zero,184(sp)
81115908:	dc001e04 	addi	r16,sp,120
8111590c:	00394f06 	br	81113e4c <__reset+0xfb0f3e4c>
81115910:	0005883a 	mov	r2,zero
81115914:	003e3206 	br	811151e0 <__reset+0xfb0f51e0>
81115918:	dd802617 	ldw	r22,152(sp)
8111591c:	003f0606 	br	81115538 <__reset+0xfb0f5538>
81115920:	d9c02785 	stb	r7,158(sp)
81115924:	003a5106 	br	8111426c <__reset+0xfb0f426c>
81115928:	d9c02785 	stb	r7,158(sp)
8111592c:	003a3706 	br	8111420c <__reset+0xfb0f420c>
81115930:	0005883a 	mov	r2,zero
81115934:	003f5e06 	br	811156b0 <__reset+0xfb0f56b0>
81115938:	d9c02785 	stb	r7,158(sp)
8111593c:	00391706 	br	81113d9c <__reset+0xfb0f3d9c>
81115940:	d9c02785 	stb	r7,158(sp)
81115944:	0038e606 	br	81113ce0 <__reset+0xfb0f3ce0>
81115948:	d8802344 	addi	r2,sp,141
8111594c:	003f0806 	br	81115570 <__reset+0xfb0f5570>
81115950:	d9c02785 	stb	r7,158(sp)
81115954:	0038b706 	br	81113c34 <__reset+0xfb0f3c34>
81115958:	d9c02785 	stb	r7,158(sp)
8111595c:	003adc06 	br	811144d0 <__reset+0xfb0f44d0>
81115960:	d9403917 	ldw	r5,228(sp)
81115964:	00800304 	movi	r2,12
81115968:	28800015 	stw	r2,0(r5)
8111596c:	00bfffc4 	movi	r2,-1
81115970:	00387806 	br	81113b54 <__reset+0xfb0f3b54>
81115974:	d9c02785 	stb	r7,158(sp)
81115978:	003abf06 	br	81114478 <__reset+0xfb0f4478>
8111597c:	d9c02785 	stb	r7,158(sp)
81115980:	003a9b06 	br	811143f0 <__reset+0xfb0f43f0>

81115984 <___vfprintf_internal_r>:
81115984:	deffb804 	addi	sp,sp,-288
81115988:	de00012e 	bgeu	sp,et,81115990 <___vfprintf_internal_r+0xc>
8111598c:	003b68fa 	trap	3
81115990:	dfc04715 	stw	ra,284(sp)
81115994:	ddc04515 	stw	r23,276(sp)
81115998:	dd404315 	stw	r21,268(sp)
8111599c:	d9002c15 	stw	r4,176(sp)
811159a0:	282f883a 	mov	r23,r5
811159a4:	302b883a 	mov	r21,r6
811159a8:	d9c02d15 	stw	r7,180(sp)
811159ac:	df004615 	stw	fp,280(sp)
811159b0:	dd804415 	stw	r22,272(sp)
811159b4:	dd004215 	stw	r20,264(sp)
811159b8:	dcc04115 	stw	r19,260(sp)
811159bc:	dc804015 	stw	r18,256(sp)
811159c0:	dc403f15 	stw	r17,252(sp)
811159c4:	dc003e15 	stw	r16,248(sp)
811159c8:	111c52c0 	call	8111c52c <_localeconv_r>
811159cc:	10800017 	ldw	r2,0(r2)
811159d0:	1009883a 	mov	r4,r2
811159d4:	d8803415 	stw	r2,208(sp)
811159d8:	11134b00 	call	811134b0 <strlen>
811159dc:	d8803715 	stw	r2,220(sp)
811159e0:	d8802c17 	ldw	r2,176(sp)
811159e4:	10000226 	beq	r2,zero,811159f0 <___vfprintf_internal_r+0x6c>
811159e8:	10800e17 	ldw	r2,56(r2)
811159ec:	1000f926 	beq	r2,zero,81115dd4 <___vfprintf_internal_r+0x450>
811159f0:	b880030b 	ldhu	r2,12(r23)
811159f4:	10c8000c 	andi	r3,r2,8192
811159f8:	1800061e 	bne	r3,zero,81115a14 <___vfprintf_internal_r+0x90>
811159fc:	b9001917 	ldw	r4,100(r23)
81115a00:	00f7ffc4 	movi	r3,-8193
81115a04:	10880014 	ori	r2,r2,8192
81115a08:	20c6703a 	and	r3,r4,r3
81115a0c:	b880030d 	sth	r2,12(r23)
81115a10:	b8c01915 	stw	r3,100(r23)
81115a14:	10c0020c 	andi	r3,r2,8
81115a18:	1800c126 	beq	r3,zero,81115d20 <___vfprintf_internal_r+0x39c>
81115a1c:	b8c00417 	ldw	r3,16(r23)
81115a20:	1800bf26 	beq	r3,zero,81115d20 <___vfprintf_internal_r+0x39c>
81115a24:	1080068c 	andi	r2,r2,26
81115a28:	00c00284 	movi	r3,10
81115a2c:	10c0c426 	beq	r2,r3,81115d40 <___vfprintf_internal_r+0x3bc>
81115a30:	d8c00404 	addi	r3,sp,16
81115a34:	05204534 	movhi	r20,33044
81115a38:	d9001e04 	addi	r4,sp,120
81115a3c:	a539d984 	addi	r20,r20,-6298
81115a40:	d8c01e15 	stw	r3,120(sp)
81115a44:	d8002015 	stw	zero,128(sp)
81115a48:	d8001f15 	stw	zero,124(sp)
81115a4c:	d8003315 	stw	zero,204(sp)
81115a50:	d8003615 	stw	zero,216(sp)
81115a54:	d8003815 	stw	zero,224(sp)
81115a58:	1811883a 	mov	r8,r3
81115a5c:	d8003915 	stw	zero,228(sp)
81115a60:	d8003a15 	stw	zero,232(sp)
81115a64:	d8002f15 	stw	zero,188(sp)
81115a68:	d9002815 	stw	r4,160(sp)
81115a6c:	a8800007 	ldb	r2,0(r21)
81115a70:	10027b26 	beq	r2,zero,81116460 <___vfprintf_internal_r+0xadc>
81115a74:	00c00944 	movi	r3,37
81115a78:	a821883a 	mov	r16,r21
81115a7c:	10c0021e 	bne	r2,r3,81115a88 <___vfprintf_internal_r+0x104>
81115a80:	00001406 	br	81115ad4 <___vfprintf_internal_r+0x150>
81115a84:	10c00326 	beq	r2,r3,81115a94 <___vfprintf_internal_r+0x110>
81115a88:	84000044 	addi	r16,r16,1
81115a8c:	80800007 	ldb	r2,0(r16)
81115a90:	103ffc1e 	bne	r2,zero,81115a84 <__reset+0xfb0f5a84>
81115a94:	8563c83a 	sub	r17,r16,r21
81115a98:	88000e26 	beq	r17,zero,81115ad4 <___vfprintf_internal_r+0x150>
81115a9c:	d8c02017 	ldw	r3,128(sp)
81115aa0:	d8801f17 	ldw	r2,124(sp)
81115aa4:	45400015 	stw	r21,0(r8)
81115aa8:	1c47883a 	add	r3,r3,r17
81115aac:	10800044 	addi	r2,r2,1
81115ab0:	d8c02015 	stw	r3,128(sp)
81115ab4:	44400115 	stw	r17,4(r8)
81115ab8:	d8801f15 	stw	r2,124(sp)
81115abc:	00c001c4 	movi	r3,7
81115ac0:	1880a716 	blt	r3,r2,81115d60 <___vfprintf_internal_r+0x3dc>
81115ac4:	42000204 	addi	r8,r8,8
81115ac8:	d9402f17 	ldw	r5,188(sp)
81115acc:	2c4b883a 	add	r5,r5,r17
81115ad0:	d9402f15 	stw	r5,188(sp)
81115ad4:	80800007 	ldb	r2,0(r16)
81115ad8:	1000a826 	beq	r2,zero,81115d7c <___vfprintf_internal_r+0x3f8>
81115adc:	84400047 	ldb	r17,1(r16)
81115ae0:	00bfffc4 	movi	r2,-1
81115ae4:	85400044 	addi	r21,r16,1
81115ae8:	d8002785 	stb	zero,158(sp)
81115aec:	0007883a 	mov	r3,zero
81115af0:	000f883a 	mov	r7,zero
81115af4:	d8802915 	stw	r2,164(sp)
81115af8:	d8003115 	stw	zero,196(sp)
81115afc:	0025883a 	mov	r18,zero
81115b00:	01401604 	movi	r5,88
81115b04:	01800244 	movi	r6,9
81115b08:	02800a84 	movi	r10,42
81115b0c:	02401b04 	movi	r9,108
81115b10:	ad400044 	addi	r21,r21,1
81115b14:	88bff804 	addi	r2,r17,-32
81115b18:	28830436 	bltu	r5,r2,8111672c <___vfprintf_internal_r+0xda8>
81115b1c:	100490ba 	slli	r2,r2,2
81115b20:	01204474 	movhi	r4,33041
81115b24:	2116cd04 	addi	r4,r4,23348
81115b28:	1105883a 	add	r2,r2,r4
81115b2c:	10800017 	ldw	r2,0(r2)
81115b30:	1000683a 	jmp	r2
81115b34:	8111664c 	andi	r4,r16,17817
81115b38:	8111672c 	andhi	r4,r16,17820
81115b3c:	8111672c 	andhi	r4,r16,17820
81115b40:	8111666c 	andhi	r4,r16,17817
81115b44:	8111672c 	andhi	r4,r16,17820
81115b48:	8111672c 	andhi	r4,r16,17820
81115b4c:	8111672c 	andhi	r4,r16,17820
81115b50:	8111672c 	andhi	r4,r16,17820
81115b54:	8111672c 	andhi	r4,r16,17820
81115b58:	8111672c 	andhi	r4,r16,17820
81115b5c:	81115de0 	cmpeqi	r4,r16,17783
81115b60:	81116588 	cmpgei	r4,r16,17814
81115b64:	8111672c 	andhi	r4,r16,17820
81115b68:	81115ca8 	cmpgeui	r4,r16,17778
81115b6c:	81115e08 	cmpgei	r4,r16,17784
81115b70:	8111672c 	andhi	r4,r16,17820
81115b74:	81115e48 	cmpgei	r4,r16,17785
81115b78:	81115e54 	ori	r4,r16,17785
81115b7c:	81115e54 	ori	r4,r16,17785
81115b80:	81115e54 	ori	r4,r16,17785
81115b84:	81115e54 	ori	r4,r16,17785
81115b88:	81115e54 	ori	r4,r16,17785
81115b8c:	81115e54 	ori	r4,r16,17785
81115b90:	81115e54 	ori	r4,r16,17785
81115b94:	81115e54 	ori	r4,r16,17785
81115b98:	81115e54 	ori	r4,r16,17785
81115b9c:	8111672c 	andhi	r4,r16,17820
81115ba0:	8111672c 	andhi	r4,r16,17820
81115ba4:	8111672c 	andhi	r4,r16,17820
81115ba8:	8111672c 	andhi	r4,r16,17820
81115bac:	8111672c 	andhi	r4,r16,17820
81115bb0:	8111672c 	andhi	r4,r16,17820
81115bb4:	8111672c 	andhi	r4,r16,17820
81115bb8:	8111672c 	andhi	r4,r16,17820
81115bbc:	8111672c 	andhi	r4,r16,17820
81115bc0:	8111672c 	andhi	r4,r16,17820
81115bc4:	81115e88 	cmpgei	r4,r16,17786
81115bc8:	81115f44 	addi	r4,r16,17789
81115bcc:	8111672c 	andhi	r4,r16,17820
81115bd0:	81115f44 	addi	r4,r16,17789
81115bd4:	8111672c 	andhi	r4,r16,17820
81115bd8:	8111672c 	andhi	r4,r16,17820
81115bdc:	8111672c 	andhi	r4,r16,17820
81115be0:	8111672c 	andhi	r4,r16,17820
81115be4:	81115fe4 	muli	r4,r16,17791
81115be8:	8111672c 	andhi	r4,r16,17820
81115bec:	8111672c 	andhi	r4,r16,17820
81115bf0:	81115ff0 	cmpltui	r4,r16,17791
81115bf4:	8111672c 	andhi	r4,r16,17820
81115bf8:	8111672c 	andhi	r4,r16,17820
81115bfc:	8111672c 	andhi	r4,r16,17820
81115c00:	8111672c 	andhi	r4,r16,17820
81115c04:	8111672c 	andhi	r4,r16,17820
81115c08:	81116468 	cmpgeui	r4,r16,17809
81115c0c:	8111672c 	andhi	r4,r16,17820
81115c10:	8111672c 	andhi	r4,r16,17820
81115c14:	811164c8 	cmpgei	r4,r16,17811
81115c18:	8111672c 	andhi	r4,r16,17820
81115c1c:	8111672c 	andhi	r4,r16,17820
81115c20:	8111672c 	andhi	r4,r16,17820
81115c24:	8111672c 	andhi	r4,r16,17820
81115c28:	8111672c 	andhi	r4,r16,17820
81115c2c:	8111672c 	andhi	r4,r16,17820
81115c30:	8111672c 	andhi	r4,r16,17820
81115c34:	8111672c 	andhi	r4,r16,17820
81115c38:	8111672c 	andhi	r4,r16,17820
81115c3c:	8111672c 	andhi	r4,r16,17820
81115c40:	811166d8 	cmpnei	r4,r16,17819
81115c44:	81116678 	rdprs	r4,r16,17817
81115c48:	81115f44 	addi	r4,r16,17789
81115c4c:	81115f44 	addi	r4,r16,17789
81115c50:	81115f44 	addi	r4,r16,17789
81115c54:	81116688 	cmpgei	r4,r16,17818
81115c58:	81116678 	rdprs	r4,r16,17817
81115c5c:	8111672c 	andhi	r4,r16,17820
81115c60:	8111672c 	andhi	r4,r16,17820
81115c64:	81116694 	ori	r4,r16,17818
81115c68:	8111672c 	andhi	r4,r16,17820
81115c6c:	811166a4 	muli	r4,r16,17818
81115c70:	81116578 	rdprs	r4,r16,17813
81115c74:	81115cb4 	orhi	r4,r16,17778
81115c78:	81116598 	cmpnei	r4,r16,17814
81115c7c:	8111672c 	andhi	r4,r16,17820
81115c80:	811165a4 	muli	r4,r16,17814
81115c84:	8111672c 	andhi	r4,r16,17820
81115c88:	81116600 	call	88111660 <__reset+0x20f1660>
81115c8c:	8111672c 	andhi	r4,r16,17820
81115c90:	8111672c 	andhi	r4,r16,17820
81115c94:	81116610 	cmplti	r4,r16,17816
81115c98:	d9003117 	ldw	r4,196(sp)
81115c9c:	d8802d15 	stw	r2,180(sp)
81115ca0:	0109c83a 	sub	r4,zero,r4
81115ca4:	d9003115 	stw	r4,196(sp)
81115ca8:	94800114 	ori	r18,r18,4
81115cac:	ac400007 	ldb	r17,0(r21)
81115cb0:	003f9706 	br	81115b10 <__reset+0xfb0f5b10>
81115cb4:	00800c04 	movi	r2,48
81115cb8:	d9002d17 	ldw	r4,180(sp)
81115cbc:	d9402917 	ldw	r5,164(sp)
81115cc0:	d8802705 	stb	r2,156(sp)
81115cc4:	00801e04 	movi	r2,120
81115cc8:	d8802745 	stb	r2,157(sp)
81115ccc:	d8002785 	stb	zero,158(sp)
81115cd0:	20c00104 	addi	r3,r4,4
81115cd4:	24c00017 	ldw	r19,0(r4)
81115cd8:	002d883a 	mov	r22,zero
81115cdc:	90800094 	ori	r2,r18,2
81115ce0:	28029a16 	blt	r5,zero,8111674c <___vfprintf_internal_r+0xdc8>
81115ce4:	00bfdfc4 	movi	r2,-129
81115ce8:	90a4703a 	and	r18,r18,r2
81115cec:	d8c02d15 	stw	r3,180(sp)
81115cf0:	94800094 	ori	r18,r18,2
81115cf4:	9802871e 	bne	r19,zero,81116714 <___vfprintf_internal_r+0xd90>
81115cf8:	00a04534 	movhi	r2,33044
81115cfc:	10b9ca04 	addi	r2,r2,-6360
81115d00:	d8803915 	stw	r2,228(sp)
81115d04:	04401e04 	movi	r17,120
81115d08:	d8802917 	ldw	r2,164(sp)
81115d0c:	0039883a 	mov	fp,zero
81115d10:	1001e926 	beq	r2,zero,811164b8 <___vfprintf_internal_r+0xb34>
81115d14:	0027883a 	mov	r19,zero
81115d18:	002d883a 	mov	r22,zero
81115d1c:	00020506 	br	81116534 <___vfprintf_internal_r+0xbb0>
81115d20:	d9002c17 	ldw	r4,176(sp)
81115d24:	b80b883a 	mov	r5,r23
81115d28:	11195700 	call	81119570 <__swsetup_r>
81115d2c:	1005ac1e 	bne	r2,zero,811173e0 <___vfprintf_internal_r+0x1a5c>
81115d30:	b880030b 	ldhu	r2,12(r23)
81115d34:	00c00284 	movi	r3,10
81115d38:	1080068c 	andi	r2,r2,26
81115d3c:	10ff3c1e 	bne	r2,r3,81115a30 <__reset+0xfb0f5a30>
81115d40:	b880038f 	ldh	r2,14(r23)
81115d44:	103f3a16 	blt	r2,zero,81115a30 <__reset+0xfb0f5a30>
81115d48:	d9c02d17 	ldw	r7,180(sp)
81115d4c:	d9002c17 	ldw	r4,176(sp)
81115d50:	a80d883a 	mov	r6,r21
81115d54:	b80b883a 	mov	r5,r23
81115d58:	1117ba00 	call	81117ba0 <__sbprintf>
81115d5c:	00001106 	br	81115da4 <___vfprintf_internal_r+0x420>
81115d60:	d9002c17 	ldw	r4,176(sp)
81115d64:	d9801e04 	addi	r6,sp,120
81115d68:	b80b883a 	mov	r5,r23
81115d6c:	1121a140 	call	81121a14 <__sprint_r>
81115d70:	1000081e 	bne	r2,zero,81115d94 <___vfprintf_internal_r+0x410>
81115d74:	da000404 	addi	r8,sp,16
81115d78:	003f5306 	br	81115ac8 <__reset+0xfb0f5ac8>
81115d7c:	d8802017 	ldw	r2,128(sp)
81115d80:	10000426 	beq	r2,zero,81115d94 <___vfprintf_internal_r+0x410>
81115d84:	d9002c17 	ldw	r4,176(sp)
81115d88:	d9801e04 	addi	r6,sp,120
81115d8c:	b80b883a 	mov	r5,r23
81115d90:	1121a140 	call	81121a14 <__sprint_r>
81115d94:	b880030b 	ldhu	r2,12(r23)
81115d98:	1080100c 	andi	r2,r2,64
81115d9c:	1005901e 	bne	r2,zero,811173e0 <___vfprintf_internal_r+0x1a5c>
81115da0:	d8802f17 	ldw	r2,188(sp)
81115da4:	dfc04717 	ldw	ra,284(sp)
81115da8:	df004617 	ldw	fp,280(sp)
81115dac:	ddc04517 	ldw	r23,276(sp)
81115db0:	dd804417 	ldw	r22,272(sp)
81115db4:	dd404317 	ldw	r21,268(sp)
81115db8:	dd004217 	ldw	r20,264(sp)
81115dbc:	dcc04117 	ldw	r19,260(sp)
81115dc0:	dc804017 	ldw	r18,256(sp)
81115dc4:	dc403f17 	ldw	r17,252(sp)
81115dc8:	dc003e17 	ldw	r16,248(sp)
81115dcc:	dec04804 	addi	sp,sp,288
81115dd0:	f800283a 	ret
81115dd4:	d9002c17 	ldw	r4,176(sp)
81115dd8:	111b5e00 	call	8111b5e0 <__sinit>
81115ddc:	003f0406 	br	811159f0 <__reset+0xfb0f59f0>
81115de0:	d8802d17 	ldw	r2,180(sp)
81115de4:	d9002d17 	ldw	r4,180(sp)
81115de8:	10800017 	ldw	r2,0(r2)
81115dec:	d8803115 	stw	r2,196(sp)
81115df0:	20800104 	addi	r2,r4,4
81115df4:	d9003117 	ldw	r4,196(sp)
81115df8:	203fa716 	blt	r4,zero,81115c98 <__reset+0xfb0f5c98>
81115dfc:	d8802d15 	stw	r2,180(sp)
81115e00:	ac400007 	ldb	r17,0(r21)
81115e04:	003f4206 	br	81115b10 <__reset+0xfb0f5b10>
81115e08:	ac400007 	ldb	r17,0(r21)
81115e0c:	aac00044 	addi	r11,r21,1
81115e10:	8a872826 	beq	r17,r10,81117ab4 <___vfprintf_internal_r+0x2130>
81115e14:	88bff404 	addi	r2,r17,-48
81115e18:	0009883a 	mov	r4,zero
81115e1c:	30867d36 	bltu	r6,r2,81117814 <___vfprintf_internal_r+0x1e90>
81115e20:	5c400007 	ldb	r17,0(r11)
81115e24:	210002a4 	muli	r4,r4,10
81115e28:	5d400044 	addi	r21,r11,1
81115e2c:	a817883a 	mov	r11,r21
81115e30:	2089883a 	add	r4,r4,r2
81115e34:	88bff404 	addi	r2,r17,-48
81115e38:	30bff92e 	bgeu	r6,r2,81115e20 <__reset+0xfb0f5e20>
81115e3c:	2005c916 	blt	r4,zero,81117564 <___vfprintf_internal_r+0x1be0>
81115e40:	d9002915 	stw	r4,164(sp)
81115e44:	003f3306 	br	81115b14 <__reset+0xfb0f5b14>
81115e48:	94802014 	ori	r18,r18,128
81115e4c:	ac400007 	ldb	r17,0(r21)
81115e50:	003f2f06 	br	81115b10 <__reset+0xfb0f5b10>
81115e54:	a809883a 	mov	r4,r21
81115e58:	d8003115 	stw	zero,196(sp)
81115e5c:	88bff404 	addi	r2,r17,-48
81115e60:	0017883a 	mov	r11,zero
81115e64:	24400007 	ldb	r17,0(r4)
81115e68:	5ac002a4 	muli	r11,r11,10
81115e6c:	ad400044 	addi	r21,r21,1
81115e70:	a809883a 	mov	r4,r21
81115e74:	12d7883a 	add	r11,r2,r11
81115e78:	88bff404 	addi	r2,r17,-48
81115e7c:	30bff92e 	bgeu	r6,r2,81115e64 <__reset+0xfb0f5e64>
81115e80:	dac03115 	stw	r11,196(sp)
81115e84:	003f2306 	br	81115b14 <__reset+0xfb0f5b14>
81115e88:	18c03fcc 	andi	r3,r3,255
81115e8c:	18072b1e 	bne	r3,zero,81117b3c <___vfprintf_internal_r+0x21b8>
81115e90:	94800414 	ori	r18,r18,16
81115e94:	9080080c 	andi	r2,r18,32
81115e98:	10037b26 	beq	r2,zero,81116c88 <___vfprintf_internal_r+0x1304>
81115e9c:	d9402d17 	ldw	r5,180(sp)
81115ea0:	28800117 	ldw	r2,4(r5)
81115ea4:	2cc00017 	ldw	r19,0(r5)
81115ea8:	29400204 	addi	r5,r5,8
81115eac:	d9402d15 	stw	r5,180(sp)
81115eb0:	102d883a 	mov	r22,r2
81115eb4:	10044b16 	blt	r2,zero,81116fe4 <___vfprintf_internal_r+0x1660>
81115eb8:	d9402917 	ldw	r5,164(sp)
81115ebc:	df002783 	ldbu	fp,158(sp)
81115ec0:	2803bc16 	blt	r5,zero,81116db4 <___vfprintf_internal_r+0x1430>
81115ec4:	00ffdfc4 	movi	r3,-129
81115ec8:	9d84b03a 	or	r2,r19,r22
81115ecc:	90e4703a 	and	r18,r18,r3
81115ed0:	10017726 	beq	r2,zero,811164b0 <___vfprintf_internal_r+0xb2c>
81115ed4:	b0038326 	beq	r22,zero,81116ce4 <___vfprintf_internal_r+0x1360>
81115ed8:	dc402a15 	stw	r17,168(sp)
81115edc:	dc001e04 	addi	r16,sp,120
81115ee0:	b023883a 	mov	r17,r22
81115ee4:	402d883a 	mov	r22,r8
81115ee8:	9809883a 	mov	r4,r19
81115eec:	880b883a 	mov	r5,r17
81115ef0:	01800284 	movi	r6,10
81115ef4:	000f883a 	mov	r7,zero
81115ef8:	11249280 	call	81124928 <__umoddi3>
81115efc:	10800c04 	addi	r2,r2,48
81115f00:	843fffc4 	addi	r16,r16,-1
81115f04:	9809883a 	mov	r4,r19
81115f08:	880b883a 	mov	r5,r17
81115f0c:	80800005 	stb	r2,0(r16)
81115f10:	01800284 	movi	r6,10
81115f14:	000f883a 	mov	r7,zero
81115f18:	11243a80 	call	811243a8 <__udivdi3>
81115f1c:	1027883a 	mov	r19,r2
81115f20:	10c4b03a 	or	r2,r2,r3
81115f24:	1823883a 	mov	r17,r3
81115f28:	103fef1e 	bne	r2,zero,81115ee8 <__reset+0xfb0f5ee8>
81115f2c:	d8c02817 	ldw	r3,160(sp)
81115f30:	dc402a17 	ldw	r17,168(sp)
81115f34:	b011883a 	mov	r8,r22
81115f38:	1c07c83a 	sub	r3,r3,r16
81115f3c:	d8c02e15 	stw	r3,184(sp)
81115f40:	00005906 	br	811160a8 <___vfprintf_internal_r+0x724>
81115f44:	18c03fcc 	andi	r3,r3,255
81115f48:	1806fa1e 	bne	r3,zero,81117b34 <___vfprintf_internal_r+0x21b0>
81115f4c:	9080020c 	andi	r2,r18,8
81115f50:	10048a26 	beq	r2,zero,8111717c <___vfprintf_internal_r+0x17f8>
81115f54:	d8c02d17 	ldw	r3,180(sp)
81115f58:	d9002d17 	ldw	r4,180(sp)
81115f5c:	d9402d17 	ldw	r5,180(sp)
81115f60:	18c00017 	ldw	r3,0(r3)
81115f64:	21000117 	ldw	r4,4(r4)
81115f68:	29400204 	addi	r5,r5,8
81115f6c:	d8c03615 	stw	r3,216(sp)
81115f70:	d9003815 	stw	r4,224(sp)
81115f74:	d9402d15 	stw	r5,180(sp)
81115f78:	d9003617 	ldw	r4,216(sp)
81115f7c:	d9403817 	ldw	r5,224(sp)
81115f80:	da003d15 	stw	r8,244(sp)
81115f84:	04000044 	movi	r16,1
81115f88:	111e0780 	call	8111e078 <__fpclassifyd>
81115f8c:	da003d17 	ldw	r8,244(sp)
81115f90:	14041f1e 	bne	r2,r16,81117010 <___vfprintf_internal_r+0x168c>
81115f94:	d9003617 	ldw	r4,216(sp)
81115f98:	d9403817 	ldw	r5,224(sp)
81115f9c:	000d883a 	mov	r6,zero
81115fa0:	000f883a 	mov	r7,zero
81115fa4:	11265200 	call	81126520 <__ledf2>
81115fa8:	da003d17 	ldw	r8,244(sp)
81115fac:	1005be16 	blt	r2,zero,811176a8 <___vfprintf_internal_r+0x1d24>
81115fb0:	df002783 	ldbu	fp,158(sp)
81115fb4:	008011c4 	movi	r2,71
81115fb8:	1445330e 	bge	r2,r17,81117488 <___vfprintf_internal_r+0x1b04>
81115fbc:	04204534 	movhi	r16,33044
81115fc0:	8439c204 	addi	r16,r16,-6392
81115fc4:	00c000c4 	movi	r3,3
81115fc8:	00bfdfc4 	movi	r2,-129
81115fcc:	d8c02a15 	stw	r3,168(sp)
81115fd0:	90a4703a 	and	r18,r18,r2
81115fd4:	d8c02e15 	stw	r3,184(sp)
81115fd8:	d8002915 	stw	zero,164(sp)
81115fdc:	d8003215 	stw	zero,200(sp)
81115fe0:	00003706 	br	811160c0 <___vfprintf_internal_r+0x73c>
81115fe4:	94800214 	ori	r18,r18,8
81115fe8:	ac400007 	ldb	r17,0(r21)
81115fec:	003ec806 	br	81115b10 <__reset+0xfb0f5b10>
81115ff0:	18c03fcc 	andi	r3,r3,255
81115ff4:	1806db1e 	bne	r3,zero,81117b64 <___vfprintf_internal_r+0x21e0>
81115ff8:	94800414 	ori	r18,r18,16
81115ffc:	9080080c 	andi	r2,r18,32
81116000:	1002d826 	beq	r2,zero,81116b64 <___vfprintf_internal_r+0x11e0>
81116004:	d9402d17 	ldw	r5,180(sp)
81116008:	d8c02917 	ldw	r3,164(sp)
8111600c:	d8002785 	stb	zero,158(sp)
81116010:	28800204 	addi	r2,r5,8
81116014:	2cc00017 	ldw	r19,0(r5)
81116018:	2d800117 	ldw	r22,4(r5)
8111601c:	18048f16 	blt	r3,zero,8111725c <___vfprintf_internal_r+0x18d8>
81116020:	013fdfc4 	movi	r4,-129
81116024:	9d86b03a 	or	r3,r19,r22
81116028:	d8802d15 	stw	r2,180(sp)
8111602c:	9124703a 	and	r18,r18,r4
81116030:	1802d91e 	bne	r3,zero,81116b98 <___vfprintf_internal_r+0x1214>
81116034:	d8c02917 	ldw	r3,164(sp)
81116038:	0039883a 	mov	fp,zero
8111603c:	1805c326 	beq	r3,zero,8111774c <___vfprintf_internal_r+0x1dc8>
81116040:	0027883a 	mov	r19,zero
81116044:	002d883a 	mov	r22,zero
81116048:	dc001e04 	addi	r16,sp,120
8111604c:	9806d0fa 	srli	r3,r19,3
81116050:	b008977a 	slli	r4,r22,29
81116054:	b02cd0fa 	srli	r22,r22,3
81116058:	9cc001cc 	andi	r19,r19,7
8111605c:	98800c04 	addi	r2,r19,48
81116060:	843fffc4 	addi	r16,r16,-1
81116064:	20e6b03a 	or	r19,r4,r3
81116068:	80800005 	stb	r2,0(r16)
8111606c:	9d86b03a 	or	r3,r19,r22
81116070:	183ff61e 	bne	r3,zero,8111604c <__reset+0xfb0f604c>
81116074:	90c0004c 	andi	r3,r18,1
81116078:	18013b26 	beq	r3,zero,81116568 <___vfprintf_internal_r+0xbe4>
8111607c:	10803fcc 	andi	r2,r2,255
81116080:	1080201c 	xori	r2,r2,128
81116084:	10bfe004 	addi	r2,r2,-128
81116088:	00c00c04 	movi	r3,48
8111608c:	10c13626 	beq	r2,r3,81116568 <___vfprintf_internal_r+0xbe4>
81116090:	80ffffc5 	stb	r3,-1(r16)
81116094:	d8c02817 	ldw	r3,160(sp)
81116098:	80bfffc4 	addi	r2,r16,-1
8111609c:	1021883a 	mov	r16,r2
811160a0:	1887c83a 	sub	r3,r3,r2
811160a4:	d8c02e15 	stw	r3,184(sp)
811160a8:	d8802e17 	ldw	r2,184(sp)
811160ac:	d9002917 	ldw	r4,164(sp)
811160b0:	1100010e 	bge	r2,r4,811160b8 <___vfprintf_internal_r+0x734>
811160b4:	2005883a 	mov	r2,r4
811160b8:	d8802a15 	stw	r2,168(sp)
811160bc:	d8003215 	stw	zero,200(sp)
811160c0:	e7003fcc 	andi	fp,fp,255
811160c4:	e700201c 	xori	fp,fp,128
811160c8:	e73fe004 	addi	fp,fp,-128
811160cc:	e0000326 	beq	fp,zero,811160dc <___vfprintf_internal_r+0x758>
811160d0:	d8c02a17 	ldw	r3,168(sp)
811160d4:	18c00044 	addi	r3,r3,1
811160d8:	d8c02a15 	stw	r3,168(sp)
811160dc:	90c0008c 	andi	r3,r18,2
811160e0:	d8c02b15 	stw	r3,172(sp)
811160e4:	18000326 	beq	r3,zero,811160f4 <___vfprintf_internal_r+0x770>
811160e8:	d8c02a17 	ldw	r3,168(sp)
811160ec:	18c00084 	addi	r3,r3,2
811160f0:	d8c02a15 	stw	r3,168(sp)
811160f4:	90c0210c 	andi	r3,r18,132
811160f8:	d8c03015 	stw	r3,192(sp)
811160fc:	1801a31e 	bne	r3,zero,8111678c <___vfprintf_internal_r+0xe08>
81116100:	d9003117 	ldw	r4,196(sp)
81116104:	d8c02a17 	ldw	r3,168(sp)
81116108:	20e7c83a 	sub	r19,r4,r3
8111610c:	04c19f0e 	bge	zero,r19,8111678c <___vfprintf_internal_r+0xe08>
81116110:	02400404 	movi	r9,16
81116114:	d8c02017 	ldw	r3,128(sp)
81116118:	d8801f17 	ldw	r2,124(sp)
8111611c:	4cc50d0e 	bge	r9,r19,81117554 <___vfprintf_internal_r+0x1bd0>
81116120:	01604534 	movhi	r5,33044
81116124:	2979dd84 	addi	r5,r5,-6282
81116128:	dc403b15 	stw	r17,236(sp)
8111612c:	d9403515 	stw	r5,212(sp)
81116130:	9823883a 	mov	r17,r19
81116134:	482d883a 	mov	r22,r9
81116138:	9027883a 	mov	r19,r18
8111613c:	070001c4 	movi	fp,7
81116140:	8025883a 	mov	r18,r16
81116144:	dc002c17 	ldw	r16,176(sp)
81116148:	00000306 	br	81116158 <___vfprintf_internal_r+0x7d4>
8111614c:	8c7ffc04 	addi	r17,r17,-16
81116150:	42000204 	addi	r8,r8,8
81116154:	b440130e 	bge	r22,r17,811161a4 <___vfprintf_internal_r+0x820>
81116158:	01204534 	movhi	r4,33044
8111615c:	18c00404 	addi	r3,r3,16
81116160:	10800044 	addi	r2,r2,1
81116164:	2139dd84 	addi	r4,r4,-6282
81116168:	41000015 	stw	r4,0(r8)
8111616c:	45800115 	stw	r22,4(r8)
81116170:	d8c02015 	stw	r3,128(sp)
81116174:	d8801f15 	stw	r2,124(sp)
81116178:	e0bff40e 	bge	fp,r2,8111614c <__reset+0xfb0f614c>
8111617c:	d9801e04 	addi	r6,sp,120
81116180:	b80b883a 	mov	r5,r23
81116184:	8009883a 	mov	r4,r16
81116188:	1121a140 	call	81121a14 <__sprint_r>
8111618c:	103f011e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116190:	8c7ffc04 	addi	r17,r17,-16
81116194:	d8c02017 	ldw	r3,128(sp)
81116198:	d8801f17 	ldw	r2,124(sp)
8111619c:	da000404 	addi	r8,sp,16
811161a0:	b47fed16 	blt	r22,r17,81116158 <__reset+0xfb0f6158>
811161a4:	9021883a 	mov	r16,r18
811161a8:	9825883a 	mov	r18,r19
811161ac:	8827883a 	mov	r19,r17
811161b0:	dc403b17 	ldw	r17,236(sp)
811161b4:	d9403517 	ldw	r5,212(sp)
811161b8:	98c7883a 	add	r3,r19,r3
811161bc:	10800044 	addi	r2,r2,1
811161c0:	41400015 	stw	r5,0(r8)
811161c4:	44c00115 	stw	r19,4(r8)
811161c8:	d8c02015 	stw	r3,128(sp)
811161cc:	d8801f15 	stw	r2,124(sp)
811161d0:	010001c4 	movi	r4,7
811161d4:	2082a316 	blt	r4,r2,81116c64 <___vfprintf_internal_r+0x12e0>
811161d8:	df002787 	ldb	fp,158(sp)
811161dc:	42000204 	addi	r8,r8,8
811161e0:	e0000c26 	beq	fp,zero,81116214 <___vfprintf_internal_r+0x890>
811161e4:	d8801f17 	ldw	r2,124(sp)
811161e8:	d9002784 	addi	r4,sp,158
811161ec:	18c00044 	addi	r3,r3,1
811161f0:	10800044 	addi	r2,r2,1
811161f4:	41000015 	stw	r4,0(r8)
811161f8:	01000044 	movi	r4,1
811161fc:	41000115 	stw	r4,4(r8)
81116200:	d8c02015 	stw	r3,128(sp)
81116204:	d8801f15 	stw	r2,124(sp)
81116208:	010001c4 	movi	r4,7
8111620c:	20823c16 	blt	r4,r2,81116b00 <___vfprintf_internal_r+0x117c>
81116210:	42000204 	addi	r8,r8,8
81116214:	d8802b17 	ldw	r2,172(sp)
81116218:	10000c26 	beq	r2,zero,8111624c <___vfprintf_internal_r+0x8c8>
8111621c:	d8801f17 	ldw	r2,124(sp)
81116220:	d9002704 	addi	r4,sp,156
81116224:	18c00084 	addi	r3,r3,2
81116228:	10800044 	addi	r2,r2,1
8111622c:	41000015 	stw	r4,0(r8)
81116230:	01000084 	movi	r4,2
81116234:	41000115 	stw	r4,4(r8)
81116238:	d8c02015 	stw	r3,128(sp)
8111623c:	d8801f15 	stw	r2,124(sp)
81116240:	010001c4 	movi	r4,7
81116244:	20823616 	blt	r4,r2,81116b20 <___vfprintf_internal_r+0x119c>
81116248:	42000204 	addi	r8,r8,8
8111624c:	d9003017 	ldw	r4,192(sp)
81116250:	00802004 	movi	r2,128
81116254:	20819926 	beq	r4,r2,811168bc <___vfprintf_internal_r+0xf38>
81116258:	d9402917 	ldw	r5,164(sp)
8111625c:	d8802e17 	ldw	r2,184(sp)
81116260:	28adc83a 	sub	r22,r5,r2
81116264:	0580310e 	bge	zero,r22,8111632c <___vfprintf_internal_r+0x9a8>
81116268:	07000404 	movi	fp,16
8111626c:	d8801f17 	ldw	r2,124(sp)
81116270:	e584140e 	bge	fp,r22,811172c4 <___vfprintf_internal_r+0x1940>
81116274:	01604534 	movhi	r5,33044
81116278:	2979d984 	addi	r5,r5,-6298
8111627c:	dc402915 	stw	r17,164(sp)
81116280:	d9402b15 	stw	r5,172(sp)
81116284:	b023883a 	mov	r17,r22
81116288:	04c001c4 	movi	r19,7
8111628c:	a82d883a 	mov	r22,r21
81116290:	902b883a 	mov	r21,r18
81116294:	8025883a 	mov	r18,r16
81116298:	dc002c17 	ldw	r16,176(sp)
8111629c:	00000306 	br	811162ac <___vfprintf_internal_r+0x928>
811162a0:	8c7ffc04 	addi	r17,r17,-16
811162a4:	42000204 	addi	r8,r8,8
811162a8:	e440110e 	bge	fp,r17,811162f0 <___vfprintf_internal_r+0x96c>
811162ac:	18c00404 	addi	r3,r3,16
811162b0:	10800044 	addi	r2,r2,1
811162b4:	45000015 	stw	r20,0(r8)
811162b8:	47000115 	stw	fp,4(r8)
811162bc:	d8c02015 	stw	r3,128(sp)
811162c0:	d8801f15 	stw	r2,124(sp)
811162c4:	98bff60e 	bge	r19,r2,811162a0 <__reset+0xfb0f62a0>
811162c8:	d9801e04 	addi	r6,sp,120
811162cc:	b80b883a 	mov	r5,r23
811162d0:	8009883a 	mov	r4,r16
811162d4:	1121a140 	call	81121a14 <__sprint_r>
811162d8:	103eae1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811162dc:	8c7ffc04 	addi	r17,r17,-16
811162e0:	d8c02017 	ldw	r3,128(sp)
811162e4:	d8801f17 	ldw	r2,124(sp)
811162e8:	da000404 	addi	r8,sp,16
811162ec:	e47fef16 	blt	fp,r17,811162ac <__reset+0xfb0f62ac>
811162f0:	9021883a 	mov	r16,r18
811162f4:	a825883a 	mov	r18,r21
811162f8:	b02b883a 	mov	r21,r22
811162fc:	882d883a 	mov	r22,r17
81116300:	dc402917 	ldw	r17,164(sp)
81116304:	d9002b17 	ldw	r4,172(sp)
81116308:	1d87883a 	add	r3,r3,r22
8111630c:	10800044 	addi	r2,r2,1
81116310:	41000015 	stw	r4,0(r8)
81116314:	45800115 	stw	r22,4(r8)
81116318:	d8c02015 	stw	r3,128(sp)
8111631c:	d8801f15 	stw	r2,124(sp)
81116320:	010001c4 	movi	r4,7
81116324:	2081ee16 	blt	r4,r2,81116ae0 <___vfprintf_internal_r+0x115c>
81116328:	42000204 	addi	r8,r8,8
8111632c:	9080400c 	andi	r2,r18,256
81116330:	1001181e 	bne	r2,zero,81116794 <___vfprintf_internal_r+0xe10>
81116334:	d9402e17 	ldw	r5,184(sp)
81116338:	d8801f17 	ldw	r2,124(sp)
8111633c:	44000015 	stw	r16,0(r8)
81116340:	1947883a 	add	r3,r3,r5
81116344:	10800044 	addi	r2,r2,1
81116348:	41400115 	stw	r5,4(r8)
8111634c:	d8c02015 	stw	r3,128(sp)
81116350:	d8801f15 	stw	r2,124(sp)
81116354:	010001c4 	movi	r4,7
81116358:	2081d316 	blt	r4,r2,81116aa8 <___vfprintf_internal_r+0x1124>
8111635c:	42000204 	addi	r8,r8,8
81116360:	9480010c 	andi	r18,r18,4
81116364:	90003226 	beq	r18,zero,81116430 <___vfprintf_internal_r+0xaac>
81116368:	d9403117 	ldw	r5,196(sp)
8111636c:	d8802a17 	ldw	r2,168(sp)
81116370:	28a1c83a 	sub	r16,r5,r2
81116374:	04002e0e 	bge	zero,r16,81116430 <___vfprintf_internal_r+0xaac>
81116378:	04400404 	movi	r17,16
8111637c:	d8801f17 	ldw	r2,124(sp)
81116380:	8c04a20e 	bge	r17,r16,8111760c <___vfprintf_internal_r+0x1c88>
81116384:	01604534 	movhi	r5,33044
81116388:	2979dd84 	addi	r5,r5,-6282
8111638c:	d9403515 	stw	r5,212(sp)
81116390:	048001c4 	movi	r18,7
81116394:	dcc02c17 	ldw	r19,176(sp)
81116398:	00000306 	br	811163a8 <___vfprintf_internal_r+0xa24>
8111639c:	843ffc04 	addi	r16,r16,-16
811163a0:	42000204 	addi	r8,r8,8
811163a4:	8c00130e 	bge	r17,r16,811163f4 <___vfprintf_internal_r+0xa70>
811163a8:	01204534 	movhi	r4,33044
811163ac:	18c00404 	addi	r3,r3,16
811163b0:	10800044 	addi	r2,r2,1
811163b4:	2139dd84 	addi	r4,r4,-6282
811163b8:	41000015 	stw	r4,0(r8)
811163bc:	44400115 	stw	r17,4(r8)
811163c0:	d8c02015 	stw	r3,128(sp)
811163c4:	d8801f15 	stw	r2,124(sp)
811163c8:	90bff40e 	bge	r18,r2,8111639c <__reset+0xfb0f639c>
811163cc:	d9801e04 	addi	r6,sp,120
811163d0:	b80b883a 	mov	r5,r23
811163d4:	9809883a 	mov	r4,r19
811163d8:	1121a140 	call	81121a14 <__sprint_r>
811163dc:	103e6d1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811163e0:	843ffc04 	addi	r16,r16,-16
811163e4:	d8c02017 	ldw	r3,128(sp)
811163e8:	d8801f17 	ldw	r2,124(sp)
811163ec:	da000404 	addi	r8,sp,16
811163f0:	8c3fed16 	blt	r17,r16,811163a8 <__reset+0xfb0f63a8>
811163f4:	d9403517 	ldw	r5,212(sp)
811163f8:	1c07883a 	add	r3,r3,r16
811163fc:	10800044 	addi	r2,r2,1
81116400:	41400015 	stw	r5,0(r8)
81116404:	44000115 	stw	r16,4(r8)
81116408:	d8c02015 	stw	r3,128(sp)
8111640c:	d8801f15 	stw	r2,124(sp)
81116410:	010001c4 	movi	r4,7
81116414:	2080060e 	bge	r4,r2,81116430 <___vfprintf_internal_r+0xaac>
81116418:	d9002c17 	ldw	r4,176(sp)
8111641c:	d9801e04 	addi	r6,sp,120
81116420:	b80b883a 	mov	r5,r23
81116424:	1121a140 	call	81121a14 <__sprint_r>
81116428:	103e5a1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
8111642c:	d8c02017 	ldw	r3,128(sp)
81116430:	d8803117 	ldw	r2,196(sp)
81116434:	d9002a17 	ldw	r4,168(sp)
81116438:	1100010e 	bge	r2,r4,81116440 <___vfprintf_internal_r+0xabc>
8111643c:	2005883a 	mov	r2,r4
81116440:	d9402f17 	ldw	r5,188(sp)
81116444:	288b883a 	add	r5,r5,r2
81116448:	d9402f15 	stw	r5,188(sp)
8111644c:	18019e1e 	bne	r3,zero,81116ac8 <___vfprintf_internal_r+0x1144>
81116450:	a8800007 	ldb	r2,0(r21)
81116454:	d8001f15 	stw	zero,124(sp)
81116458:	da000404 	addi	r8,sp,16
8111645c:	103d851e 	bne	r2,zero,81115a74 <__reset+0xfb0f5a74>
81116460:	a821883a 	mov	r16,r21
81116464:	003d9b06 	br	81115ad4 <__reset+0xfb0f5ad4>
81116468:	18c03fcc 	andi	r3,r3,255
8111646c:	1805c11e 	bne	r3,zero,81117b74 <___vfprintf_internal_r+0x21f0>
81116470:	94800414 	ori	r18,r18,16
81116474:	9080080c 	andi	r2,r18,32
81116478:	10020c26 	beq	r2,zero,81116cac <___vfprintf_internal_r+0x1328>
8111647c:	d8802d17 	ldw	r2,180(sp)
81116480:	d9002917 	ldw	r4,164(sp)
81116484:	d8002785 	stb	zero,158(sp)
81116488:	10c00204 	addi	r3,r2,8
8111648c:	14c00017 	ldw	r19,0(r2)
81116490:	15800117 	ldw	r22,4(r2)
81116494:	20040f16 	blt	r4,zero,811174d4 <___vfprintf_internal_r+0x1b50>
81116498:	013fdfc4 	movi	r4,-129
8111649c:	9d84b03a 	or	r2,r19,r22
811164a0:	d8c02d15 	stw	r3,180(sp)
811164a4:	9124703a 	and	r18,r18,r4
811164a8:	0039883a 	mov	fp,zero
811164ac:	103e891e 	bne	r2,zero,81115ed4 <__reset+0xfb0f5ed4>
811164b0:	d9002917 	ldw	r4,164(sp)
811164b4:	2002c11e 	bne	r4,zero,81116fbc <___vfprintf_internal_r+0x1638>
811164b8:	d8002915 	stw	zero,164(sp)
811164bc:	d8002e15 	stw	zero,184(sp)
811164c0:	dc001e04 	addi	r16,sp,120
811164c4:	003ef806 	br	811160a8 <__reset+0xfb0f60a8>
811164c8:	18c03fcc 	andi	r3,r3,255
811164cc:	18059d1e 	bne	r3,zero,81117b44 <___vfprintf_internal_r+0x21c0>
811164d0:	01604534 	movhi	r5,33044
811164d4:	2979c504 	addi	r5,r5,-6380
811164d8:	d9403915 	stw	r5,228(sp)
811164dc:	9080080c 	andi	r2,r18,32
811164e0:	10005226 	beq	r2,zero,8111662c <___vfprintf_internal_r+0xca8>
811164e4:	d8802d17 	ldw	r2,180(sp)
811164e8:	14c00017 	ldw	r19,0(r2)
811164ec:	15800117 	ldw	r22,4(r2)
811164f0:	10800204 	addi	r2,r2,8
811164f4:	d8802d15 	stw	r2,180(sp)
811164f8:	9080004c 	andi	r2,r18,1
811164fc:	10019026 	beq	r2,zero,81116b40 <___vfprintf_internal_r+0x11bc>
81116500:	9d84b03a 	or	r2,r19,r22
81116504:	10036926 	beq	r2,zero,811172ac <___vfprintf_internal_r+0x1928>
81116508:	d8c02917 	ldw	r3,164(sp)
8111650c:	00800c04 	movi	r2,48
81116510:	d8802705 	stb	r2,156(sp)
81116514:	dc402745 	stb	r17,157(sp)
81116518:	d8002785 	stb	zero,158(sp)
8111651c:	90800094 	ori	r2,r18,2
81116520:	18045d16 	blt	r3,zero,81117698 <___vfprintf_internal_r+0x1d14>
81116524:	00bfdfc4 	movi	r2,-129
81116528:	90a4703a 	and	r18,r18,r2
8111652c:	94800094 	ori	r18,r18,2
81116530:	0039883a 	mov	fp,zero
81116534:	d9003917 	ldw	r4,228(sp)
81116538:	dc001e04 	addi	r16,sp,120
8111653c:	988003cc 	andi	r2,r19,15
81116540:	b006973a 	slli	r3,r22,28
81116544:	2085883a 	add	r2,r4,r2
81116548:	9826d13a 	srli	r19,r19,4
8111654c:	10800003 	ldbu	r2,0(r2)
81116550:	b02cd13a 	srli	r22,r22,4
81116554:	843fffc4 	addi	r16,r16,-1
81116558:	1ce6b03a 	or	r19,r3,r19
8111655c:	80800005 	stb	r2,0(r16)
81116560:	9d84b03a 	or	r2,r19,r22
81116564:	103ff51e 	bne	r2,zero,8111653c <__reset+0xfb0f653c>
81116568:	d8c02817 	ldw	r3,160(sp)
8111656c:	1c07c83a 	sub	r3,r3,r16
81116570:	d8c02e15 	stw	r3,184(sp)
81116574:	003ecc06 	br	811160a8 <__reset+0xfb0f60a8>
81116578:	18c03fcc 	andi	r3,r3,255
8111657c:	183e9f26 	beq	r3,zero,81115ffc <__reset+0xfb0f5ffc>
81116580:	d9c02785 	stb	r7,158(sp)
81116584:	003e9d06 	br	81115ffc <__reset+0xfb0f5ffc>
81116588:	00c00044 	movi	r3,1
8111658c:	01c00ac4 	movi	r7,43
81116590:	ac400007 	ldb	r17,0(r21)
81116594:	003d5e06 	br	81115b10 <__reset+0xfb0f5b10>
81116598:	94800814 	ori	r18,r18,32
8111659c:	ac400007 	ldb	r17,0(r21)
811165a0:	003d5b06 	br	81115b10 <__reset+0xfb0f5b10>
811165a4:	d8c02d17 	ldw	r3,180(sp)
811165a8:	d8002785 	stb	zero,158(sp)
811165ac:	1c000017 	ldw	r16,0(r3)
811165b0:	1cc00104 	addi	r19,r3,4
811165b4:	80041926 	beq	r16,zero,8111761c <___vfprintf_internal_r+0x1c98>
811165b8:	d9002917 	ldw	r4,164(sp)
811165bc:	2003d016 	blt	r4,zero,81117500 <___vfprintf_internal_r+0x1b7c>
811165c0:	200d883a 	mov	r6,r4
811165c4:	000b883a 	mov	r5,zero
811165c8:	8009883a 	mov	r4,r16
811165cc:	da003d15 	stw	r8,244(sp)
811165d0:	111c8080 	call	8111c808 <memchr>
811165d4:	da003d17 	ldw	r8,244(sp)
811165d8:	10045426 	beq	r2,zero,8111772c <___vfprintf_internal_r+0x1da8>
811165dc:	1405c83a 	sub	r2,r2,r16
811165e0:	d8802e15 	stw	r2,184(sp)
811165e4:	1003cc16 	blt	r2,zero,81117518 <___vfprintf_internal_r+0x1b94>
811165e8:	df002783 	ldbu	fp,158(sp)
811165ec:	d8802a15 	stw	r2,168(sp)
811165f0:	dcc02d15 	stw	r19,180(sp)
811165f4:	d8002915 	stw	zero,164(sp)
811165f8:	d8003215 	stw	zero,200(sp)
811165fc:	003eb006 	br	811160c0 <__reset+0xfb0f60c0>
81116600:	18c03fcc 	andi	r3,r3,255
81116604:	183f9b26 	beq	r3,zero,81116474 <__reset+0xfb0f6474>
81116608:	d9c02785 	stb	r7,158(sp)
8111660c:	003f9906 	br	81116474 <__reset+0xfb0f6474>
81116610:	18c03fcc 	andi	r3,r3,255
81116614:	1805551e 	bne	r3,zero,81117b6c <___vfprintf_internal_r+0x21e8>
81116618:	01604534 	movhi	r5,33044
8111661c:	2979ca04 	addi	r5,r5,-6360
81116620:	d9403915 	stw	r5,228(sp)
81116624:	9080080c 	andi	r2,r18,32
81116628:	103fae1e 	bne	r2,zero,811164e4 <__reset+0xfb0f64e4>
8111662c:	9080040c 	andi	r2,r18,16
81116630:	1002de26 	beq	r2,zero,811171ac <___vfprintf_internal_r+0x1828>
81116634:	d8c02d17 	ldw	r3,180(sp)
81116638:	002d883a 	mov	r22,zero
8111663c:	1cc00017 	ldw	r19,0(r3)
81116640:	18c00104 	addi	r3,r3,4
81116644:	d8c02d15 	stw	r3,180(sp)
81116648:	003fab06 	br	811164f8 <__reset+0xfb0f64f8>
8111664c:	38803fcc 	andi	r2,r7,255
81116650:	1080201c 	xori	r2,r2,128
81116654:	10bfe004 	addi	r2,r2,-128
81116658:	1002d21e 	bne	r2,zero,811171a4 <___vfprintf_internal_r+0x1820>
8111665c:	00c00044 	movi	r3,1
81116660:	01c00804 	movi	r7,32
81116664:	ac400007 	ldb	r17,0(r21)
81116668:	003d2906 	br	81115b10 <__reset+0xfb0f5b10>
8111666c:	94800054 	ori	r18,r18,1
81116670:	ac400007 	ldb	r17,0(r21)
81116674:	003d2606 	br	81115b10 <__reset+0xfb0f5b10>
81116678:	18c03fcc 	andi	r3,r3,255
8111667c:	183e0526 	beq	r3,zero,81115e94 <__reset+0xfb0f5e94>
81116680:	d9c02785 	stb	r7,158(sp)
81116684:	003e0306 	br	81115e94 <__reset+0xfb0f5e94>
81116688:	94801014 	ori	r18,r18,64
8111668c:	ac400007 	ldb	r17,0(r21)
81116690:	003d1f06 	br	81115b10 <__reset+0xfb0f5b10>
81116694:	ac400007 	ldb	r17,0(r21)
81116698:	8a438726 	beq	r17,r9,811174b8 <___vfprintf_internal_r+0x1b34>
8111669c:	94800414 	ori	r18,r18,16
811166a0:	003d1b06 	br	81115b10 <__reset+0xfb0f5b10>
811166a4:	18c03fcc 	andi	r3,r3,255
811166a8:	1805341e 	bne	r3,zero,81117b7c <___vfprintf_internal_r+0x21f8>
811166ac:	9080080c 	andi	r2,r18,32
811166b0:	1002cd26 	beq	r2,zero,811171e8 <___vfprintf_internal_r+0x1864>
811166b4:	d9402d17 	ldw	r5,180(sp)
811166b8:	d9002f17 	ldw	r4,188(sp)
811166bc:	28800017 	ldw	r2,0(r5)
811166c0:	2007d7fa 	srai	r3,r4,31
811166c4:	29400104 	addi	r5,r5,4
811166c8:	d9402d15 	stw	r5,180(sp)
811166cc:	11000015 	stw	r4,0(r2)
811166d0:	10c00115 	stw	r3,4(r2)
811166d4:	003ce506 	br	81115a6c <__reset+0xfb0f5a6c>
811166d8:	d8c02d17 	ldw	r3,180(sp)
811166dc:	d9002d17 	ldw	r4,180(sp)
811166e0:	d8002785 	stb	zero,158(sp)
811166e4:	18800017 	ldw	r2,0(r3)
811166e8:	21000104 	addi	r4,r4,4
811166ec:	00c00044 	movi	r3,1
811166f0:	d8c02a15 	stw	r3,168(sp)
811166f4:	d8801405 	stb	r2,80(sp)
811166f8:	d9002d15 	stw	r4,180(sp)
811166fc:	d8c02e15 	stw	r3,184(sp)
81116700:	d8002915 	stw	zero,164(sp)
81116704:	d8003215 	stw	zero,200(sp)
81116708:	dc001404 	addi	r16,sp,80
8111670c:	0039883a 	mov	fp,zero
81116710:	003e7206 	br	811160dc <__reset+0xfb0f60dc>
81116714:	01204534 	movhi	r4,33044
81116718:	2139ca04 	addi	r4,r4,-6360
8111671c:	0039883a 	mov	fp,zero
81116720:	d9003915 	stw	r4,228(sp)
81116724:	04401e04 	movi	r17,120
81116728:	003f8206 	br	81116534 <__reset+0xfb0f6534>
8111672c:	18c03fcc 	andi	r3,r3,255
81116730:	1805061e 	bne	r3,zero,81117b4c <___vfprintf_internal_r+0x21c8>
81116734:	883d9126 	beq	r17,zero,81115d7c <__reset+0xfb0f5d7c>
81116738:	00c00044 	movi	r3,1
8111673c:	d8c02a15 	stw	r3,168(sp)
81116740:	dc401405 	stb	r17,80(sp)
81116744:	d8002785 	stb	zero,158(sp)
81116748:	003fec06 	br	811166fc <__reset+0xfb0f66fc>
8111674c:	01604534 	movhi	r5,33044
81116750:	2979ca04 	addi	r5,r5,-6360
81116754:	d9403915 	stw	r5,228(sp)
81116758:	d8c02d15 	stw	r3,180(sp)
8111675c:	1025883a 	mov	r18,r2
81116760:	04401e04 	movi	r17,120
81116764:	9d84b03a 	or	r2,r19,r22
81116768:	1000fc1e 	bne	r2,zero,81116b5c <___vfprintf_internal_r+0x11d8>
8111676c:	0039883a 	mov	fp,zero
81116770:	00800084 	movi	r2,2
81116774:	10803fcc 	andi	r2,r2,255
81116778:	00c00044 	movi	r3,1
8111677c:	10c20f26 	beq	r2,r3,81116fbc <___vfprintf_internal_r+0x1638>
81116780:	00c00084 	movi	r3,2
81116784:	10fd6326 	beq	r2,r3,81115d14 <__reset+0xfb0f5d14>
81116788:	003e2d06 	br	81116040 <__reset+0xfb0f6040>
8111678c:	d8c02017 	ldw	r3,128(sp)
81116790:	003e9306 	br	811161e0 <__reset+0xfb0f61e0>
81116794:	00801944 	movi	r2,101
81116798:	14407e0e 	bge	r2,r17,81116994 <___vfprintf_internal_r+0x1010>
8111679c:	d9003617 	ldw	r4,216(sp)
811167a0:	d9403817 	ldw	r5,224(sp)
811167a4:	000d883a 	mov	r6,zero
811167a8:	000f883a 	mov	r7,zero
811167ac:	d8c03c15 	stw	r3,240(sp)
811167b0:	da003d15 	stw	r8,244(sp)
811167b4:	11263bc0 	call	811263bc <__eqdf2>
811167b8:	d8c03c17 	ldw	r3,240(sp)
811167bc:	da003d17 	ldw	r8,244(sp)
811167c0:	1000f71e 	bne	r2,zero,81116ba0 <___vfprintf_internal_r+0x121c>
811167c4:	d8801f17 	ldw	r2,124(sp)
811167c8:	01204534 	movhi	r4,33044
811167cc:	2139d104 	addi	r4,r4,-6332
811167d0:	18c00044 	addi	r3,r3,1
811167d4:	10800044 	addi	r2,r2,1
811167d8:	41000015 	stw	r4,0(r8)
811167dc:	01000044 	movi	r4,1
811167e0:	41000115 	stw	r4,4(r8)
811167e4:	d8c02015 	stw	r3,128(sp)
811167e8:	d8801f15 	stw	r2,124(sp)
811167ec:	010001c4 	movi	r4,7
811167f0:	2082b816 	blt	r4,r2,811172d4 <___vfprintf_internal_r+0x1950>
811167f4:	42000204 	addi	r8,r8,8
811167f8:	d8802617 	ldw	r2,152(sp)
811167fc:	d9403317 	ldw	r5,204(sp)
81116800:	11400216 	blt	r2,r5,8111680c <___vfprintf_internal_r+0xe88>
81116804:	9080004c 	andi	r2,r18,1
81116808:	103ed526 	beq	r2,zero,81116360 <__reset+0xfb0f6360>
8111680c:	d8803717 	ldw	r2,220(sp)
81116810:	d9003417 	ldw	r4,208(sp)
81116814:	d9403717 	ldw	r5,220(sp)
81116818:	1887883a 	add	r3,r3,r2
8111681c:	d8801f17 	ldw	r2,124(sp)
81116820:	41000015 	stw	r4,0(r8)
81116824:	41400115 	stw	r5,4(r8)
81116828:	10800044 	addi	r2,r2,1
8111682c:	d8c02015 	stw	r3,128(sp)
81116830:	d8801f15 	stw	r2,124(sp)
81116834:	010001c4 	movi	r4,7
81116838:	20832916 	blt	r4,r2,811174e0 <___vfprintf_internal_r+0x1b5c>
8111683c:	42000204 	addi	r8,r8,8
81116840:	d8803317 	ldw	r2,204(sp)
81116844:	143fffc4 	addi	r16,r2,-1
81116848:	043ec50e 	bge	zero,r16,81116360 <__reset+0xfb0f6360>
8111684c:	04400404 	movi	r17,16
81116850:	d8801f17 	ldw	r2,124(sp)
81116854:	8c00880e 	bge	r17,r16,81116a78 <___vfprintf_internal_r+0x10f4>
81116858:	01604534 	movhi	r5,33044
8111685c:	2979d984 	addi	r5,r5,-6298
81116860:	d9402b15 	stw	r5,172(sp)
81116864:	058001c4 	movi	r22,7
81116868:	dcc02c17 	ldw	r19,176(sp)
8111686c:	00000306 	br	8111687c <___vfprintf_internal_r+0xef8>
81116870:	42000204 	addi	r8,r8,8
81116874:	843ffc04 	addi	r16,r16,-16
81116878:	8c00820e 	bge	r17,r16,81116a84 <___vfprintf_internal_r+0x1100>
8111687c:	18c00404 	addi	r3,r3,16
81116880:	10800044 	addi	r2,r2,1
81116884:	45000015 	stw	r20,0(r8)
81116888:	44400115 	stw	r17,4(r8)
8111688c:	d8c02015 	stw	r3,128(sp)
81116890:	d8801f15 	stw	r2,124(sp)
81116894:	b0bff60e 	bge	r22,r2,81116870 <__reset+0xfb0f6870>
81116898:	d9801e04 	addi	r6,sp,120
8111689c:	b80b883a 	mov	r5,r23
811168a0:	9809883a 	mov	r4,r19
811168a4:	1121a140 	call	81121a14 <__sprint_r>
811168a8:	103d3a1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811168ac:	d8c02017 	ldw	r3,128(sp)
811168b0:	d8801f17 	ldw	r2,124(sp)
811168b4:	da000404 	addi	r8,sp,16
811168b8:	003fee06 	br	81116874 <__reset+0xfb0f6874>
811168bc:	d9403117 	ldw	r5,196(sp)
811168c0:	d8802a17 	ldw	r2,168(sp)
811168c4:	28adc83a 	sub	r22,r5,r2
811168c8:	05be630e 	bge	zero,r22,81116258 <__reset+0xfb0f6258>
811168cc:	07000404 	movi	fp,16
811168d0:	d8801f17 	ldw	r2,124(sp)
811168d4:	e5838f0e 	bge	fp,r22,81117714 <___vfprintf_internal_r+0x1d90>
811168d8:	01604534 	movhi	r5,33044
811168dc:	2979d984 	addi	r5,r5,-6298
811168e0:	dc403015 	stw	r17,192(sp)
811168e4:	d9402b15 	stw	r5,172(sp)
811168e8:	b023883a 	mov	r17,r22
811168ec:	04c001c4 	movi	r19,7
811168f0:	a82d883a 	mov	r22,r21
811168f4:	902b883a 	mov	r21,r18
811168f8:	8025883a 	mov	r18,r16
811168fc:	dc002c17 	ldw	r16,176(sp)
81116900:	00000306 	br	81116910 <___vfprintf_internal_r+0xf8c>
81116904:	8c7ffc04 	addi	r17,r17,-16
81116908:	42000204 	addi	r8,r8,8
8111690c:	e440110e 	bge	fp,r17,81116954 <___vfprintf_internal_r+0xfd0>
81116910:	18c00404 	addi	r3,r3,16
81116914:	10800044 	addi	r2,r2,1
81116918:	45000015 	stw	r20,0(r8)
8111691c:	47000115 	stw	fp,4(r8)
81116920:	d8c02015 	stw	r3,128(sp)
81116924:	d8801f15 	stw	r2,124(sp)
81116928:	98bff60e 	bge	r19,r2,81116904 <__reset+0xfb0f6904>
8111692c:	d9801e04 	addi	r6,sp,120
81116930:	b80b883a 	mov	r5,r23
81116934:	8009883a 	mov	r4,r16
81116938:	1121a140 	call	81121a14 <__sprint_r>
8111693c:	103d151e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116940:	8c7ffc04 	addi	r17,r17,-16
81116944:	d8c02017 	ldw	r3,128(sp)
81116948:	d8801f17 	ldw	r2,124(sp)
8111694c:	da000404 	addi	r8,sp,16
81116950:	e47fef16 	blt	fp,r17,81116910 <__reset+0xfb0f6910>
81116954:	9021883a 	mov	r16,r18
81116958:	a825883a 	mov	r18,r21
8111695c:	b02b883a 	mov	r21,r22
81116960:	882d883a 	mov	r22,r17
81116964:	dc403017 	ldw	r17,192(sp)
81116968:	d9002b17 	ldw	r4,172(sp)
8111696c:	1d87883a 	add	r3,r3,r22
81116970:	10800044 	addi	r2,r2,1
81116974:	41000015 	stw	r4,0(r8)
81116978:	45800115 	stw	r22,4(r8)
8111697c:	d8c02015 	stw	r3,128(sp)
81116980:	d8801f15 	stw	r2,124(sp)
81116984:	010001c4 	movi	r4,7
81116988:	20818e16 	blt	r4,r2,81116fc4 <___vfprintf_internal_r+0x1640>
8111698c:	42000204 	addi	r8,r8,8
81116990:	003e3106 	br	81116258 <__reset+0xfb0f6258>
81116994:	d9403317 	ldw	r5,204(sp)
81116998:	00800044 	movi	r2,1
8111699c:	18c00044 	addi	r3,r3,1
811169a0:	1141530e 	bge	r2,r5,81116ef0 <___vfprintf_internal_r+0x156c>
811169a4:	dc401f17 	ldw	r17,124(sp)
811169a8:	00800044 	movi	r2,1
811169ac:	40800115 	stw	r2,4(r8)
811169b0:	8c400044 	addi	r17,r17,1
811169b4:	44000015 	stw	r16,0(r8)
811169b8:	d8c02015 	stw	r3,128(sp)
811169bc:	dc401f15 	stw	r17,124(sp)
811169c0:	008001c4 	movi	r2,7
811169c4:	14416b16 	blt	r2,r17,81116f74 <___vfprintf_internal_r+0x15f0>
811169c8:	42000204 	addi	r8,r8,8
811169cc:	d8803717 	ldw	r2,220(sp)
811169d0:	d9003417 	ldw	r4,208(sp)
811169d4:	8c400044 	addi	r17,r17,1
811169d8:	10c7883a 	add	r3,r2,r3
811169dc:	40800115 	stw	r2,4(r8)
811169e0:	41000015 	stw	r4,0(r8)
811169e4:	d8c02015 	stw	r3,128(sp)
811169e8:	dc401f15 	stw	r17,124(sp)
811169ec:	008001c4 	movi	r2,7
811169f0:	14416916 	blt	r2,r17,81116f98 <___vfprintf_internal_r+0x1614>
811169f4:	45800204 	addi	r22,r8,8
811169f8:	d9003617 	ldw	r4,216(sp)
811169fc:	d9403817 	ldw	r5,224(sp)
81116a00:	000d883a 	mov	r6,zero
81116a04:	000f883a 	mov	r7,zero
81116a08:	d8c03c15 	stw	r3,240(sp)
81116a0c:	11263bc0 	call	811263bc <__eqdf2>
81116a10:	d8c03c17 	ldw	r3,240(sp)
81116a14:	1000bc26 	beq	r2,zero,81116d08 <___vfprintf_internal_r+0x1384>
81116a18:	d9403317 	ldw	r5,204(sp)
81116a1c:	84000044 	addi	r16,r16,1
81116a20:	8c400044 	addi	r17,r17,1
81116a24:	28bfffc4 	addi	r2,r5,-1
81116a28:	1887883a 	add	r3,r3,r2
81116a2c:	b0800115 	stw	r2,4(r22)
81116a30:	b4000015 	stw	r16,0(r22)
81116a34:	d8c02015 	stw	r3,128(sp)
81116a38:	dc401f15 	stw	r17,124(sp)
81116a3c:	008001c4 	movi	r2,7
81116a40:	14414316 	blt	r2,r17,81116f50 <___vfprintf_internal_r+0x15cc>
81116a44:	b5800204 	addi	r22,r22,8
81116a48:	d9003a17 	ldw	r4,232(sp)
81116a4c:	df0022c4 	addi	fp,sp,139
81116a50:	8c400044 	addi	r17,r17,1
81116a54:	20c7883a 	add	r3,r4,r3
81116a58:	b7000015 	stw	fp,0(r22)
81116a5c:	b1000115 	stw	r4,4(r22)
81116a60:	d8c02015 	stw	r3,128(sp)
81116a64:	dc401f15 	stw	r17,124(sp)
81116a68:	008001c4 	movi	r2,7
81116a6c:	14400e16 	blt	r2,r17,81116aa8 <___vfprintf_internal_r+0x1124>
81116a70:	b2000204 	addi	r8,r22,8
81116a74:	003e3a06 	br	81116360 <__reset+0xfb0f6360>
81116a78:	01204534 	movhi	r4,33044
81116a7c:	2139d984 	addi	r4,r4,-6298
81116a80:	d9002b15 	stw	r4,172(sp)
81116a84:	d9002b17 	ldw	r4,172(sp)
81116a88:	1c07883a 	add	r3,r3,r16
81116a8c:	44000115 	stw	r16,4(r8)
81116a90:	41000015 	stw	r4,0(r8)
81116a94:	10800044 	addi	r2,r2,1
81116a98:	d8c02015 	stw	r3,128(sp)
81116a9c:	d8801f15 	stw	r2,124(sp)
81116aa0:	010001c4 	movi	r4,7
81116aa4:	20be2d0e 	bge	r4,r2,8111635c <__reset+0xfb0f635c>
81116aa8:	d9002c17 	ldw	r4,176(sp)
81116aac:	d9801e04 	addi	r6,sp,120
81116ab0:	b80b883a 	mov	r5,r23
81116ab4:	1121a140 	call	81121a14 <__sprint_r>
81116ab8:	103cb61e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116abc:	d8c02017 	ldw	r3,128(sp)
81116ac0:	da000404 	addi	r8,sp,16
81116ac4:	003e2606 	br	81116360 <__reset+0xfb0f6360>
81116ac8:	d9002c17 	ldw	r4,176(sp)
81116acc:	d9801e04 	addi	r6,sp,120
81116ad0:	b80b883a 	mov	r5,r23
81116ad4:	1121a140 	call	81121a14 <__sprint_r>
81116ad8:	103e5d26 	beq	r2,zero,81116450 <__reset+0xfb0f6450>
81116adc:	003cad06 	br	81115d94 <__reset+0xfb0f5d94>
81116ae0:	d9002c17 	ldw	r4,176(sp)
81116ae4:	d9801e04 	addi	r6,sp,120
81116ae8:	b80b883a 	mov	r5,r23
81116aec:	1121a140 	call	81121a14 <__sprint_r>
81116af0:	103ca81e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116af4:	d8c02017 	ldw	r3,128(sp)
81116af8:	da000404 	addi	r8,sp,16
81116afc:	003e0b06 	br	8111632c <__reset+0xfb0f632c>
81116b00:	d9002c17 	ldw	r4,176(sp)
81116b04:	d9801e04 	addi	r6,sp,120
81116b08:	b80b883a 	mov	r5,r23
81116b0c:	1121a140 	call	81121a14 <__sprint_r>
81116b10:	103ca01e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116b14:	d8c02017 	ldw	r3,128(sp)
81116b18:	da000404 	addi	r8,sp,16
81116b1c:	003dbd06 	br	81116214 <__reset+0xfb0f6214>
81116b20:	d9002c17 	ldw	r4,176(sp)
81116b24:	d9801e04 	addi	r6,sp,120
81116b28:	b80b883a 	mov	r5,r23
81116b2c:	1121a140 	call	81121a14 <__sprint_r>
81116b30:	103c981e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116b34:	d8c02017 	ldw	r3,128(sp)
81116b38:	da000404 	addi	r8,sp,16
81116b3c:	003dc306 	br	8111624c <__reset+0xfb0f624c>
81116b40:	d8802917 	ldw	r2,164(sp)
81116b44:	d8002785 	stb	zero,158(sp)
81116b48:	103f0616 	blt	r2,zero,81116764 <__reset+0xfb0f6764>
81116b4c:	00ffdfc4 	movi	r3,-129
81116b50:	9d84b03a 	or	r2,r19,r22
81116b54:	90e4703a 	and	r18,r18,r3
81116b58:	103c6b26 	beq	r2,zero,81115d08 <__reset+0xfb0f5d08>
81116b5c:	0039883a 	mov	fp,zero
81116b60:	003e7406 	br	81116534 <__reset+0xfb0f6534>
81116b64:	9080040c 	andi	r2,r18,16
81116b68:	1001b326 	beq	r2,zero,81117238 <___vfprintf_internal_r+0x18b4>
81116b6c:	d9002d17 	ldw	r4,180(sp)
81116b70:	d9402917 	ldw	r5,164(sp)
81116b74:	d8002785 	stb	zero,158(sp)
81116b78:	20800104 	addi	r2,r4,4
81116b7c:	24c00017 	ldw	r19,0(r4)
81116b80:	002d883a 	mov	r22,zero
81116b84:	2801b516 	blt	r5,zero,8111725c <___vfprintf_internal_r+0x18d8>
81116b88:	00ffdfc4 	movi	r3,-129
81116b8c:	d8802d15 	stw	r2,180(sp)
81116b90:	90e4703a 	and	r18,r18,r3
81116b94:	983d2726 	beq	r19,zero,81116034 <__reset+0xfb0f6034>
81116b98:	0039883a 	mov	fp,zero
81116b9c:	003d2a06 	br	81116048 <__reset+0xfb0f6048>
81116ba0:	dc402617 	ldw	r17,152(sp)
81116ba4:	0441d30e 	bge	zero,r17,811172f4 <___vfprintf_internal_r+0x1970>
81116ba8:	dc403217 	ldw	r17,200(sp)
81116bac:	d8803317 	ldw	r2,204(sp)
81116bb0:	1440010e 	bge	r2,r17,81116bb8 <___vfprintf_internal_r+0x1234>
81116bb4:	1023883a 	mov	r17,r2
81116bb8:	04400a0e 	bge	zero,r17,81116be4 <___vfprintf_internal_r+0x1260>
81116bbc:	d8801f17 	ldw	r2,124(sp)
81116bc0:	1c47883a 	add	r3,r3,r17
81116bc4:	44000015 	stw	r16,0(r8)
81116bc8:	10800044 	addi	r2,r2,1
81116bcc:	44400115 	stw	r17,4(r8)
81116bd0:	d8c02015 	stw	r3,128(sp)
81116bd4:	d8801f15 	stw	r2,124(sp)
81116bd8:	010001c4 	movi	r4,7
81116bdc:	20826516 	blt	r4,r2,81117574 <___vfprintf_internal_r+0x1bf0>
81116be0:	42000204 	addi	r8,r8,8
81116be4:	88026116 	blt	r17,zero,8111756c <___vfprintf_internal_r+0x1be8>
81116be8:	d9003217 	ldw	r4,200(sp)
81116bec:	2463c83a 	sub	r17,r4,r17
81116bf0:	04407b0e 	bge	zero,r17,81116de0 <___vfprintf_internal_r+0x145c>
81116bf4:	05800404 	movi	r22,16
81116bf8:	d8801f17 	ldw	r2,124(sp)
81116bfc:	b4419d0e 	bge	r22,r17,81117274 <___vfprintf_internal_r+0x18f0>
81116c00:	01204534 	movhi	r4,33044
81116c04:	2139d984 	addi	r4,r4,-6298
81116c08:	d9002b15 	stw	r4,172(sp)
81116c0c:	070001c4 	movi	fp,7
81116c10:	dcc02c17 	ldw	r19,176(sp)
81116c14:	00000306 	br	81116c24 <___vfprintf_internal_r+0x12a0>
81116c18:	42000204 	addi	r8,r8,8
81116c1c:	8c7ffc04 	addi	r17,r17,-16
81116c20:	b441970e 	bge	r22,r17,81117280 <___vfprintf_internal_r+0x18fc>
81116c24:	18c00404 	addi	r3,r3,16
81116c28:	10800044 	addi	r2,r2,1
81116c2c:	45000015 	stw	r20,0(r8)
81116c30:	45800115 	stw	r22,4(r8)
81116c34:	d8c02015 	stw	r3,128(sp)
81116c38:	d8801f15 	stw	r2,124(sp)
81116c3c:	e0bff60e 	bge	fp,r2,81116c18 <__reset+0xfb0f6c18>
81116c40:	d9801e04 	addi	r6,sp,120
81116c44:	b80b883a 	mov	r5,r23
81116c48:	9809883a 	mov	r4,r19
81116c4c:	1121a140 	call	81121a14 <__sprint_r>
81116c50:	103c501e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116c54:	d8c02017 	ldw	r3,128(sp)
81116c58:	d8801f17 	ldw	r2,124(sp)
81116c5c:	da000404 	addi	r8,sp,16
81116c60:	003fee06 	br	81116c1c <__reset+0xfb0f6c1c>
81116c64:	d9002c17 	ldw	r4,176(sp)
81116c68:	d9801e04 	addi	r6,sp,120
81116c6c:	b80b883a 	mov	r5,r23
81116c70:	1121a140 	call	81121a14 <__sprint_r>
81116c74:	103c471e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116c78:	d8c02017 	ldw	r3,128(sp)
81116c7c:	df002787 	ldb	fp,158(sp)
81116c80:	da000404 	addi	r8,sp,16
81116c84:	003d5606 	br	811161e0 <__reset+0xfb0f61e0>
81116c88:	9080040c 	andi	r2,r18,16
81116c8c:	10016126 	beq	r2,zero,81117214 <___vfprintf_internal_r+0x1890>
81116c90:	d8802d17 	ldw	r2,180(sp)
81116c94:	14c00017 	ldw	r19,0(r2)
81116c98:	10800104 	addi	r2,r2,4
81116c9c:	d8802d15 	stw	r2,180(sp)
81116ca0:	982dd7fa 	srai	r22,r19,31
81116ca4:	b005883a 	mov	r2,r22
81116ca8:	003c8206 	br	81115eb4 <__reset+0xfb0f5eb4>
81116cac:	9080040c 	andi	r2,r18,16
81116cb0:	10003526 	beq	r2,zero,81116d88 <___vfprintf_internal_r+0x1404>
81116cb4:	d9402d17 	ldw	r5,180(sp)
81116cb8:	d8c02917 	ldw	r3,164(sp)
81116cbc:	d8002785 	stb	zero,158(sp)
81116cc0:	28800104 	addi	r2,r5,4
81116cc4:	2cc00017 	ldw	r19,0(r5)
81116cc8:	002d883a 	mov	r22,zero
81116ccc:	18003716 	blt	r3,zero,81116dac <___vfprintf_internal_r+0x1428>
81116cd0:	00ffdfc4 	movi	r3,-129
81116cd4:	d8802d15 	stw	r2,180(sp)
81116cd8:	90e4703a 	and	r18,r18,r3
81116cdc:	0039883a 	mov	fp,zero
81116ce0:	983df326 	beq	r19,zero,811164b0 <__reset+0xfb0f64b0>
81116ce4:	00800244 	movi	r2,9
81116ce8:	14fc7b36 	bltu	r2,r19,81115ed8 <__reset+0xfb0f5ed8>
81116cec:	d8c02817 	ldw	r3,160(sp)
81116cf0:	dc001dc4 	addi	r16,sp,119
81116cf4:	9cc00c04 	addi	r19,r19,48
81116cf8:	1c07c83a 	sub	r3,r3,r16
81116cfc:	dcc01dc5 	stb	r19,119(sp)
81116d00:	d8c02e15 	stw	r3,184(sp)
81116d04:	003ce806 	br	811160a8 <__reset+0xfb0f60a8>
81116d08:	d8803317 	ldw	r2,204(sp)
81116d0c:	143fffc4 	addi	r16,r2,-1
81116d10:	043f4d0e 	bge	zero,r16,81116a48 <__reset+0xfb0f6a48>
81116d14:	07000404 	movi	fp,16
81116d18:	e400810e 	bge	fp,r16,81116f20 <___vfprintf_internal_r+0x159c>
81116d1c:	01604534 	movhi	r5,33044
81116d20:	2979d984 	addi	r5,r5,-6298
81116d24:	d9402b15 	stw	r5,172(sp)
81116d28:	01c001c4 	movi	r7,7
81116d2c:	dcc02c17 	ldw	r19,176(sp)
81116d30:	00000306 	br	81116d40 <___vfprintf_internal_r+0x13bc>
81116d34:	b5800204 	addi	r22,r22,8
81116d38:	843ffc04 	addi	r16,r16,-16
81116d3c:	e4007b0e 	bge	fp,r16,81116f2c <___vfprintf_internal_r+0x15a8>
81116d40:	18c00404 	addi	r3,r3,16
81116d44:	8c400044 	addi	r17,r17,1
81116d48:	b5000015 	stw	r20,0(r22)
81116d4c:	b7000115 	stw	fp,4(r22)
81116d50:	d8c02015 	stw	r3,128(sp)
81116d54:	dc401f15 	stw	r17,124(sp)
81116d58:	3c7ff60e 	bge	r7,r17,81116d34 <__reset+0xfb0f6d34>
81116d5c:	d9801e04 	addi	r6,sp,120
81116d60:	b80b883a 	mov	r5,r23
81116d64:	9809883a 	mov	r4,r19
81116d68:	d9c03c15 	stw	r7,240(sp)
81116d6c:	1121a140 	call	81121a14 <__sprint_r>
81116d70:	d9c03c17 	ldw	r7,240(sp)
81116d74:	103c071e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116d78:	d8c02017 	ldw	r3,128(sp)
81116d7c:	dc401f17 	ldw	r17,124(sp)
81116d80:	dd800404 	addi	r22,sp,16
81116d84:	003fec06 	br	81116d38 <__reset+0xfb0f6d38>
81116d88:	9080100c 	andi	r2,r18,64
81116d8c:	d8002785 	stb	zero,158(sp)
81116d90:	10010e26 	beq	r2,zero,811171cc <___vfprintf_internal_r+0x1848>
81116d94:	d9002d17 	ldw	r4,180(sp)
81116d98:	d9402917 	ldw	r5,164(sp)
81116d9c:	002d883a 	mov	r22,zero
81116da0:	20800104 	addi	r2,r4,4
81116da4:	24c0000b 	ldhu	r19,0(r4)
81116da8:	283fc90e 	bge	r5,zero,81116cd0 <__reset+0xfb0f6cd0>
81116dac:	d8802d15 	stw	r2,180(sp)
81116db0:	0039883a 	mov	fp,zero
81116db4:	9d84b03a 	or	r2,r19,r22
81116db8:	103c461e 	bne	r2,zero,81115ed4 <__reset+0xfb0f5ed4>
81116dbc:	00800044 	movi	r2,1
81116dc0:	003e6c06 	br	81116774 <__reset+0xfb0f6774>
81116dc4:	d9002c17 	ldw	r4,176(sp)
81116dc8:	d9801e04 	addi	r6,sp,120
81116dcc:	b80b883a 	mov	r5,r23
81116dd0:	1121a140 	call	81121a14 <__sprint_r>
81116dd4:	103bef1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116dd8:	d8c02017 	ldw	r3,128(sp)
81116ddc:	da000404 	addi	r8,sp,16
81116de0:	d9003217 	ldw	r4,200(sp)
81116de4:	d8802617 	ldw	r2,152(sp)
81116de8:	d9403317 	ldw	r5,204(sp)
81116dec:	8123883a 	add	r17,r16,r4
81116df0:	11400216 	blt	r2,r5,81116dfc <___vfprintf_internal_r+0x1478>
81116df4:	9100004c 	andi	r4,r18,1
81116df8:	20000d26 	beq	r4,zero,81116e30 <___vfprintf_internal_r+0x14ac>
81116dfc:	d9003717 	ldw	r4,220(sp)
81116e00:	d9403417 	ldw	r5,208(sp)
81116e04:	1907883a 	add	r3,r3,r4
81116e08:	d9001f17 	ldw	r4,124(sp)
81116e0c:	41400015 	stw	r5,0(r8)
81116e10:	d9403717 	ldw	r5,220(sp)
81116e14:	21000044 	addi	r4,r4,1
81116e18:	d8c02015 	stw	r3,128(sp)
81116e1c:	41400115 	stw	r5,4(r8)
81116e20:	d9001f15 	stw	r4,124(sp)
81116e24:	014001c4 	movi	r5,7
81116e28:	2901e816 	blt	r5,r4,811175cc <___vfprintf_internal_r+0x1c48>
81116e2c:	42000204 	addi	r8,r8,8
81116e30:	d9003317 	ldw	r4,204(sp)
81116e34:	8121883a 	add	r16,r16,r4
81116e38:	2085c83a 	sub	r2,r4,r2
81116e3c:	8461c83a 	sub	r16,r16,r17
81116e40:	1400010e 	bge	r2,r16,81116e48 <___vfprintf_internal_r+0x14c4>
81116e44:	1021883a 	mov	r16,r2
81116e48:	04000a0e 	bge	zero,r16,81116e74 <___vfprintf_internal_r+0x14f0>
81116e4c:	d9001f17 	ldw	r4,124(sp)
81116e50:	1c07883a 	add	r3,r3,r16
81116e54:	44400015 	stw	r17,0(r8)
81116e58:	21000044 	addi	r4,r4,1
81116e5c:	44000115 	stw	r16,4(r8)
81116e60:	d8c02015 	stw	r3,128(sp)
81116e64:	d9001f15 	stw	r4,124(sp)
81116e68:	014001c4 	movi	r5,7
81116e6c:	2901fb16 	blt	r5,r4,8111765c <___vfprintf_internal_r+0x1cd8>
81116e70:	42000204 	addi	r8,r8,8
81116e74:	8001f716 	blt	r16,zero,81117654 <___vfprintf_internal_r+0x1cd0>
81116e78:	1421c83a 	sub	r16,r2,r16
81116e7c:	043d380e 	bge	zero,r16,81116360 <__reset+0xfb0f6360>
81116e80:	04400404 	movi	r17,16
81116e84:	d8801f17 	ldw	r2,124(sp)
81116e88:	8c3efb0e 	bge	r17,r16,81116a78 <__reset+0xfb0f6a78>
81116e8c:	01604534 	movhi	r5,33044
81116e90:	2979d984 	addi	r5,r5,-6298
81116e94:	d9402b15 	stw	r5,172(sp)
81116e98:	058001c4 	movi	r22,7
81116e9c:	dcc02c17 	ldw	r19,176(sp)
81116ea0:	00000306 	br	81116eb0 <___vfprintf_internal_r+0x152c>
81116ea4:	42000204 	addi	r8,r8,8
81116ea8:	843ffc04 	addi	r16,r16,-16
81116eac:	8c3ef50e 	bge	r17,r16,81116a84 <__reset+0xfb0f6a84>
81116eb0:	18c00404 	addi	r3,r3,16
81116eb4:	10800044 	addi	r2,r2,1
81116eb8:	45000015 	stw	r20,0(r8)
81116ebc:	44400115 	stw	r17,4(r8)
81116ec0:	d8c02015 	stw	r3,128(sp)
81116ec4:	d8801f15 	stw	r2,124(sp)
81116ec8:	b0bff60e 	bge	r22,r2,81116ea4 <__reset+0xfb0f6ea4>
81116ecc:	d9801e04 	addi	r6,sp,120
81116ed0:	b80b883a 	mov	r5,r23
81116ed4:	9809883a 	mov	r4,r19
81116ed8:	1121a140 	call	81121a14 <__sprint_r>
81116edc:	103bad1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116ee0:	d8c02017 	ldw	r3,128(sp)
81116ee4:	d8801f17 	ldw	r2,124(sp)
81116ee8:	da000404 	addi	r8,sp,16
81116eec:	003fee06 	br	81116ea8 <__reset+0xfb0f6ea8>
81116ef0:	9088703a 	and	r4,r18,r2
81116ef4:	203eab1e 	bne	r4,zero,811169a4 <__reset+0xfb0f69a4>
81116ef8:	dc401f17 	ldw	r17,124(sp)
81116efc:	40800115 	stw	r2,4(r8)
81116f00:	44000015 	stw	r16,0(r8)
81116f04:	8c400044 	addi	r17,r17,1
81116f08:	d8c02015 	stw	r3,128(sp)
81116f0c:	dc401f15 	stw	r17,124(sp)
81116f10:	008001c4 	movi	r2,7
81116f14:	14400e16 	blt	r2,r17,81116f50 <___vfprintf_internal_r+0x15cc>
81116f18:	45800204 	addi	r22,r8,8
81116f1c:	003eca06 	br	81116a48 <__reset+0xfb0f6a48>
81116f20:	01204534 	movhi	r4,33044
81116f24:	2139d984 	addi	r4,r4,-6298
81116f28:	d9002b15 	stw	r4,172(sp)
81116f2c:	d8802b17 	ldw	r2,172(sp)
81116f30:	1c07883a 	add	r3,r3,r16
81116f34:	8c400044 	addi	r17,r17,1
81116f38:	b0800015 	stw	r2,0(r22)
81116f3c:	b4000115 	stw	r16,4(r22)
81116f40:	d8c02015 	stw	r3,128(sp)
81116f44:	dc401f15 	stw	r17,124(sp)
81116f48:	008001c4 	movi	r2,7
81116f4c:	147ebd0e 	bge	r2,r17,81116a44 <__reset+0xfb0f6a44>
81116f50:	d9002c17 	ldw	r4,176(sp)
81116f54:	d9801e04 	addi	r6,sp,120
81116f58:	b80b883a 	mov	r5,r23
81116f5c:	1121a140 	call	81121a14 <__sprint_r>
81116f60:	103b8c1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116f64:	d8c02017 	ldw	r3,128(sp)
81116f68:	dc401f17 	ldw	r17,124(sp)
81116f6c:	dd800404 	addi	r22,sp,16
81116f70:	003eb506 	br	81116a48 <__reset+0xfb0f6a48>
81116f74:	d9002c17 	ldw	r4,176(sp)
81116f78:	d9801e04 	addi	r6,sp,120
81116f7c:	b80b883a 	mov	r5,r23
81116f80:	1121a140 	call	81121a14 <__sprint_r>
81116f84:	103b831e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116f88:	d8c02017 	ldw	r3,128(sp)
81116f8c:	dc401f17 	ldw	r17,124(sp)
81116f90:	da000404 	addi	r8,sp,16
81116f94:	003e8d06 	br	811169cc <__reset+0xfb0f69cc>
81116f98:	d9002c17 	ldw	r4,176(sp)
81116f9c:	d9801e04 	addi	r6,sp,120
81116fa0:	b80b883a 	mov	r5,r23
81116fa4:	1121a140 	call	81121a14 <__sprint_r>
81116fa8:	103b7a1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116fac:	d8c02017 	ldw	r3,128(sp)
81116fb0:	dc401f17 	ldw	r17,124(sp)
81116fb4:	dd800404 	addi	r22,sp,16
81116fb8:	003e8f06 	br	811169f8 <__reset+0xfb0f69f8>
81116fbc:	0027883a 	mov	r19,zero
81116fc0:	003f4a06 	br	81116cec <__reset+0xfb0f6cec>
81116fc4:	d9002c17 	ldw	r4,176(sp)
81116fc8:	d9801e04 	addi	r6,sp,120
81116fcc:	b80b883a 	mov	r5,r23
81116fd0:	1121a140 	call	81121a14 <__sprint_r>
81116fd4:	103b6f1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81116fd8:	d8c02017 	ldw	r3,128(sp)
81116fdc:	da000404 	addi	r8,sp,16
81116fe0:	003c9d06 	br	81116258 <__reset+0xfb0f6258>
81116fe4:	04e7c83a 	sub	r19,zero,r19
81116fe8:	9804c03a 	cmpne	r2,r19,zero
81116fec:	05adc83a 	sub	r22,zero,r22
81116ff0:	b0adc83a 	sub	r22,r22,r2
81116ff4:	d8802917 	ldw	r2,164(sp)
81116ff8:	07000b44 	movi	fp,45
81116ffc:	df002785 	stb	fp,158(sp)
81117000:	10017b16 	blt	r2,zero,811175f0 <___vfprintf_internal_r+0x1c6c>
81117004:	00bfdfc4 	movi	r2,-129
81117008:	90a4703a 	and	r18,r18,r2
8111700c:	003bb106 	br	81115ed4 <__reset+0xfb0f5ed4>
81117010:	d9003617 	ldw	r4,216(sp)
81117014:	d9403817 	ldw	r5,224(sp)
81117018:	da003d15 	stw	r8,244(sp)
8111701c:	111e0780 	call	8111e078 <__fpclassifyd>
81117020:	da003d17 	ldw	r8,244(sp)
81117024:	1000f026 	beq	r2,zero,811173e8 <___vfprintf_internal_r+0x1a64>
81117028:	d9002917 	ldw	r4,164(sp)
8111702c:	05bff7c4 	movi	r22,-33
81117030:	00bfffc4 	movi	r2,-1
81117034:	8dac703a 	and	r22,r17,r22
81117038:	20820026 	beq	r4,r2,8111783c <___vfprintf_internal_r+0x1eb8>
8111703c:	008011c4 	movi	r2,71
81117040:	b081f726 	beq	r22,r2,81117820 <___vfprintf_internal_r+0x1e9c>
81117044:	d9003817 	ldw	r4,224(sp)
81117048:	90c04014 	ori	r3,r18,256
8111704c:	d8c02b15 	stw	r3,172(sp)
81117050:	20021516 	blt	r4,zero,811178a8 <___vfprintf_internal_r+0x1f24>
81117054:	dcc03817 	ldw	r19,224(sp)
81117058:	d8002a05 	stb	zero,168(sp)
8111705c:	00801984 	movi	r2,102
81117060:	8881f926 	beq	r17,r2,81117848 <___vfprintf_internal_r+0x1ec4>
81117064:	00801184 	movi	r2,70
81117068:	88821c26 	beq	r17,r2,811178dc <___vfprintf_internal_r+0x1f58>
8111706c:	00801144 	movi	r2,69
81117070:	b081ef26 	beq	r22,r2,81117830 <___vfprintf_internal_r+0x1eac>
81117074:	d8c02917 	ldw	r3,164(sp)
81117078:	d8802104 	addi	r2,sp,132
8111707c:	d8800315 	stw	r2,12(sp)
81117080:	d9403617 	ldw	r5,216(sp)
81117084:	d8802504 	addi	r2,sp,148
81117088:	d9002c17 	ldw	r4,176(sp)
8111708c:	d8800215 	stw	r2,8(sp)
81117090:	d8802604 	addi	r2,sp,152
81117094:	d8c00015 	stw	r3,0(sp)
81117098:	d8800115 	stw	r2,4(sp)
8111709c:	01c00084 	movi	r7,2
811170a0:	980d883a 	mov	r6,r19
811170a4:	d8c03c15 	stw	r3,240(sp)
811170a8:	da003d15 	stw	r8,244(sp)
811170ac:	11199300 	call	81119930 <_dtoa_r>
811170b0:	1021883a 	mov	r16,r2
811170b4:	008019c4 	movi	r2,103
811170b8:	d8c03c17 	ldw	r3,240(sp)
811170bc:	da003d17 	ldw	r8,244(sp)
811170c0:	88817126 	beq	r17,r2,81117688 <___vfprintf_internal_r+0x1d04>
811170c4:	008011c4 	movi	r2,71
811170c8:	88829226 	beq	r17,r2,81117b14 <___vfprintf_internal_r+0x2190>
811170cc:	80f9883a 	add	fp,r16,r3
811170d0:	d9003617 	ldw	r4,216(sp)
811170d4:	000d883a 	mov	r6,zero
811170d8:	000f883a 	mov	r7,zero
811170dc:	980b883a 	mov	r5,r19
811170e0:	da003d15 	stw	r8,244(sp)
811170e4:	11263bc0 	call	811263bc <__eqdf2>
811170e8:	da003d17 	ldw	r8,244(sp)
811170ec:	10018d26 	beq	r2,zero,81117724 <___vfprintf_internal_r+0x1da0>
811170f0:	d8802117 	ldw	r2,132(sp)
811170f4:	1700062e 	bgeu	r2,fp,81117110 <___vfprintf_internal_r+0x178c>
811170f8:	01000c04 	movi	r4,48
811170fc:	10c00044 	addi	r3,r2,1
81117100:	d8c02115 	stw	r3,132(sp)
81117104:	11000005 	stb	r4,0(r2)
81117108:	d8802117 	ldw	r2,132(sp)
8111710c:	173ffb36 	bltu	r2,fp,811170fc <__reset+0xfb0f70fc>
81117110:	1405c83a 	sub	r2,r2,r16
81117114:	d8803315 	stw	r2,204(sp)
81117118:	008011c4 	movi	r2,71
8111711c:	b0817626 	beq	r22,r2,811176f8 <___vfprintf_internal_r+0x1d74>
81117120:	00801944 	movi	r2,101
81117124:	1442810e 	bge	r2,r17,81117b2c <___vfprintf_internal_r+0x21a8>
81117128:	d8c02617 	ldw	r3,152(sp)
8111712c:	00801984 	movi	r2,102
81117130:	d8c03215 	stw	r3,200(sp)
81117134:	8881fe26 	beq	r17,r2,81117930 <___vfprintf_internal_r+0x1fac>
81117138:	d8c03217 	ldw	r3,200(sp)
8111713c:	d9003317 	ldw	r4,204(sp)
81117140:	1901dd16 	blt	r3,r4,811178b8 <___vfprintf_internal_r+0x1f34>
81117144:	9480004c 	andi	r18,r18,1
81117148:	90022b1e 	bne	r18,zero,811179f8 <___vfprintf_internal_r+0x2074>
8111714c:	1805883a 	mov	r2,r3
81117150:	18028016 	blt	r3,zero,81117b54 <___vfprintf_internal_r+0x21d0>
81117154:	d8c03217 	ldw	r3,200(sp)
81117158:	044019c4 	movi	r17,103
8111715c:	d8c02e15 	stw	r3,184(sp)
81117160:	df002a07 	ldb	fp,168(sp)
81117164:	e001531e 	bne	fp,zero,811176b4 <___vfprintf_internal_r+0x1d30>
81117168:	df002783 	ldbu	fp,158(sp)
8111716c:	d8802a15 	stw	r2,168(sp)
81117170:	dc802b17 	ldw	r18,172(sp)
81117174:	d8002915 	stw	zero,164(sp)
81117178:	003bd106 	br	811160c0 <__reset+0xfb0f60c0>
8111717c:	d8802d17 	ldw	r2,180(sp)
81117180:	d8c02d17 	ldw	r3,180(sp)
81117184:	d9002d17 	ldw	r4,180(sp)
81117188:	10800017 	ldw	r2,0(r2)
8111718c:	18c00117 	ldw	r3,4(r3)
81117190:	21000204 	addi	r4,r4,8
81117194:	d8803615 	stw	r2,216(sp)
81117198:	d8c03815 	stw	r3,224(sp)
8111719c:	d9002d15 	stw	r4,180(sp)
811171a0:	003b7506 	br	81115f78 <__reset+0xfb0f5f78>
811171a4:	ac400007 	ldb	r17,0(r21)
811171a8:	003a5906 	br	81115b10 <__reset+0xfb0f5b10>
811171ac:	9080100c 	andi	r2,r18,64
811171b0:	1000a826 	beq	r2,zero,81117454 <___vfprintf_internal_r+0x1ad0>
811171b4:	d9002d17 	ldw	r4,180(sp)
811171b8:	002d883a 	mov	r22,zero
811171bc:	24c0000b 	ldhu	r19,0(r4)
811171c0:	21000104 	addi	r4,r4,4
811171c4:	d9002d15 	stw	r4,180(sp)
811171c8:	003ccb06 	br	811164f8 <__reset+0xfb0f64f8>
811171cc:	d8c02d17 	ldw	r3,180(sp)
811171d0:	d9002917 	ldw	r4,164(sp)
811171d4:	002d883a 	mov	r22,zero
811171d8:	18800104 	addi	r2,r3,4
811171dc:	1cc00017 	ldw	r19,0(r3)
811171e0:	203ebb0e 	bge	r4,zero,81116cd0 <__reset+0xfb0f6cd0>
811171e4:	003ef106 	br	81116dac <__reset+0xfb0f6dac>
811171e8:	9080040c 	andi	r2,r18,16
811171ec:	1000921e 	bne	r2,zero,81117438 <___vfprintf_internal_r+0x1ab4>
811171f0:	9480100c 	andi	r18,r18,64
811171f4:	90013926 	beq	r18,zero,811176dc <___vfprintf_internal_r+0x1d58>
811171f8:	d9002d17 	ldw	r4,180(sp)
811171fc:	d9402f17 	ldw	r5,188(sp)
81117200:	20800017 	ldw	r2,0(r4)
81117204:	21000104 	addi	r4,r4,4
81117208:	d9002d15 	stw	r4,180(sp)
8111720c:	1140000d 	sth	r5,0(r2)
81117210:	003a1606 	br	81115a6c <__reset+0xfb0f5a6c>
81117214:	9080100c 	andi	r2,r18,64
81117218:	10008026 	beq	r2,zero,8111741c <___vfprintf_internal_r+0x1a98>
8111721c:	d8c02d17 	ldw	r3,180(sp)
81117220:	1cc0000f 	ldh	r19,0(r3)
81117224:	18c00104 	addi	r3,r3,4
81117228:	d8c02d15 	stw	r3,180(sp)
8111722c:	982dd7fa 	srai	r22,r19,31
81117230:	b005883a 	mov	r2,r22
81117234:	003b1f06 	br	81115eb4 <__reset+0xfb0f5eb4>
81117238:	9080100c 	andi	r2,r18,64
8111723c:	d8002785 	stb	zero,158(sp)
81117240:	10008a1e 	bne	r2,zero,8111746c <___vfprintf_internal_r+0x1ae8>
81117244:	d9402d17 	ldw	r5,180(sp)
81117248:	d8c02917 	ldw	r3,164(sp)
8111724c:	002d883a 	mov	r22,zero
81117250:	28800104 	addi	r2,r5,4
81117254:	2cc00017 	ldw	r19,0(r5)
81117258:	183e4b0e 	bge	r3,zero,81116b88 <__reset+0xfb0f6b88>
8111725c:	9d86b03a 	or	r3,r19,r22
81117260:	d8802d15 	stw	r2,180(sp)
81117264:	183e4c1e 	bne	r3,zero,81116b98 <__reset+0xfb0f6b98>
81117268:	0039883a 	mov	fp,zero
8111726c:	0005883a 	mov	r2,zero
81117270:	003d4006 	br	81116774 <__reset+0xfb0f6774>
81117274:	01604534 	movhi	r5,33044
81117278:	2979d984 	addi	r5,r5,-6298
8111727c:	d9402b15 	stw	r5,172(sp)
81117280:	d9402b17 	ldw	r5,172(sp)
81117284:	1c47883a 	add	r3,r3,r17
81117288:	10800044 	addi	r2,r2,1
8111728c:	41400015 	stw	r5,0(r8)
81117290:	44400115 	stw	r17,4(r8)
81117294:	d8c02015 	stw	r3,128(sp)
81117298:	d8801f15 	stw	r2,124(sp)
8111729c:	010001c4 	movi	r4,7
811172a0:	20bec816 	blt	r4,r2,81116dc4 <__reset+0xfb0f6dc4>
811172a4:	42000204 	addi	r8,r8,8
811172a8:	003ecd06 	br	81116de0 <__reset+0xfb0f6de0>
811172ac:	d9002917 	ldw	r4,164(sp)
811172b0:	d8002785 	stb	zero,158(sp)
811172b4:	203d2d16 	blt	r4,zero,8111676c <__reset+0xfb0f676c>
811172b8:	00bfdfc4 	movi	r2,-129
811172bc:	90a4703a 	and	r18,r18,r2
811172c0:	003a9106 	br	81115d08 <__reset+0xfb0f5d08>
811172c4:	01204534 	movhi	r4,33044
811172c8:	2139d984 	addi	r4,r4,-6298
811172cc:	d9002b15 	stw	r4,172(sp)
811172d0:	003c0c06 	br	81116304 <__reset+0xfb0f6304>
811172d4:	d9002c17 	ldw	r4,176(sp)
811172d8:	d9801e04 	addi	r6,sp,120
811172dc:	b80b883a 	mov	r5,r23
811172e0:	1121a140 	call	81121a14 <__sprint_r>
811172e4:	103aab1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811172e8:	d8c02017 	ldw	r3,128(sp)
811172ec:	da000404 	addi	r8,sp,16
811172f0:	003d4106 	br	811167f8 <__reset+0xfb0f67f8>
811172f4:	d8801f17 	ldw	r2,124(sp)
811172f8:	01604534 	movhi	r5,33044
811172fc:	01000044 	movi	r4,1
81117300:	18c00044 	addi	r3,r3,1
81117304:	10800044 	addi	r2,r2,1
81117308:	2979d104 	addi	r5,r5,-6332
8111730c:	41000115 	stw	r4,4(r8)
81117310:	41400015 	stw	r5,0(r8)
81117314:	d8c02015 	stw	r3,128(sp)
81117318:	d8801f15 	stw	r2,124(sp)
8111731c:	010001c4 	movi	r4,7
81117320:	20805c16 	blt	r4,r2,81117494 <___vfprintf_internal_r+0x1b10>
81117324:	42000204 	addi	r8,r8,8
81117328:	8800041e 	bne	r17,zero,8111733c <___vfprintf_internal_r+0x19b8>
8111732c:	d8803317 	ldw	r2,204(sp)
81117330:	1000021e 	bne	r2,zero,8111733c <___vfprintf_internal_r+0x19b8>
81117334:	9080004c 	andi	r2,r18,1
81117338:	103c0926 	beq	r2,zero,81116360 <__reset+0xfb0f6360>
8111733c:	d9003717 	ldw	r4,220(sp)
81117340:	d8801f17 	ldw	r2,124(sp)
81117344:	d9403417 	ldw	r5,208(sp)
81117348:	20c7883a 	add	r3,r4,r3
8111734c:	10800044 	addi	r2,r2,1
81117350:	41000115 	stw	r4,4(r8)
81117354:	41400015 	stw	r5,0(r8)
81117358:	d8c02015 	stw	r3,128(sp)
8111735c:	d8801f15 	stw	r2,124(sp)
81117360:	010001c4 	movi	r4,7
81117364:	20812116 	blt	r4,r2,811177ec <___vfprintf_internal_r+0x1e68>
81117368:	42000204 	addi	r8,r8,8
8111736c:	0463c83a 	sub	r17,zero,r17
81117370:	0440730e 	bge	zero,r17,81117540 <___vfprintf_internal_r+0x1bbc>
81117374:	05800404 	movi	r22,16
81117378:	b440860e 	bge	r22,r17,81117594 <___vfprintf_internal_r+0x1c10>
8111737c:	01604534 	movhi	r5,33044
81117380:	2979d984 	addi	r5,r5,-6298
81117384:	d9402b15 	stw	r5,172(sp)
81117388:	070001c4 	movi	fp,7
8111738c:	dcc02c17 	ldw	r19,176(sp)
81117390:	00000306 	br	811173a0 <___vfprintf_internal_r+0x1a1c>
81117394:	42000204 	addi	r8,r8,8
81117398:	8c7ffc04 	addi	r17,r17,-16
8111739c:	b440800e 	bge	r22,r17,811175a0 <___vfprintf_internal_r+0x1c1c>
811173a0:	18c00404 	addi	r3,r3,16
811173a4:	10800044 	addi	r2,r2,1
811173a8:	45000015 	stw	r20,0(r8)
811173ac:	45800115 	stw	r22,4(r8)
811173b0:	d8c02015 	stw	r3,128(sp)
811173b4:	d8801f15 	stw	r2,124(sp)
811173b8:	e0bff60e 	bge	fp,r2,81117394 <__reset+0xfb0f7394>
811173bc:	d9801e04 	addi	r6,sp,120
811173c0:	b80b883a 	mov	r5,r23
811173c4:	9809883a 	mov	r4,r19
811173c8:	1121a140 	call	81121a14 <__sprint_r>
811173cc:	103a711e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811173d0:	d8c02017 	ldw	r3,128(sp)
811173d4:	d8801f17 	ldw	r2,124(sp)
811173d8:	da000404 	addi	r8,sp,16
811173dc:	003fee06 	br	81117398 <__reset+0xfb0f7398>
811173e0:	00bfffc4 	movi	r2,-1
811173e4:	003a6f06 	br	81115da4 <__reset+0xfb0f5da4>
811173e8:	008011c4 	movi	r2,71
811173ec:	1440b816 	blt	r2,r17,811176d0 <___vfprintf_internal_r+0x1d4c>
811173f0:	04204534 	movhi	r16,33044
811173f4:	8439c304 	addi	r16,r16,-6388
811173f8:	00c000c4 	movi	r3,3
811173fc:	00bfdfc4 	movi	r2,-129
81117400:	d8c02a15 	stw	r3,168(sp)
81117404:	90a4703a 	and	r18,r18,r2
81117408:	df002783 	ldbu	fp,158(sp)
8111740c:	d8c02e15 	stw	r3,184(sp)
81117410:	d8002915 	stw	zero,164(sp)
81117414:	d8003215 	stw	zero,200(sp)
81117418:	003b2906 	br	811160c0 <__reset+0xfb0f60c0>
8111741c:	d9002d17 	ldw	r4,180(sp)
81117420:	24c00017 	ldw	r19,0(r4)
81117424:	21000104 	addi	r4,r4,4
81117428:	d9002d15 	stw	r4,180(sp)
8111742c:	982dd7fa 	srai	r22,r19,31
81117430:	b005883a 	mov	r2,r22
81117434:	003a9f06 	br	81115eb4 <__reset+0xfb0f5eb4>
81117438:	d9402d17 	ldw	r5,180(sp)
8111743c:	d8c02f17 	ldw	r3,188(sp)
81117440:	28800017 	ldw	r2,0(r5)
81117444:	29400104 	addi	r5,r5,4
81117448:	d9402d15 	stw	r5,180(sp)
8111744c:	10c00015 	stw	r3,0(r2)
81117450:	00398606 	br	81115a6c <__reset+0xfb0f5a6c>
81117454:	d9402d17 	ldw	r5,180(sp)
81117458:	002d883a 	mov	r22,zero
8111745c:	2cc00017 	ldw	r19,0(r5)
81117460:	29400104 	addi	r5,r5,4
81117464:	d9402d15 	stw	r5,180(sp)
81117468:	003c2306 	br	811164f8 <__reset+0xfb0f64f8>
8111746c:	d8c02d17 	ldw	r3,180(sp)
81117470:	d9002917 	ldw	r4,164(sp)
81117474:	002d883a 	mov	r22,zero
81117478:	18800104 	addi	r2,r3,4
8111747c:	1cc0000b 	ldhu	r19,0(r3)
81117480:	203dc10e 	bge	r4,zero,81116b88 <__reset+0xfb0f6b88>
81117484:	003f7506 	br	8111725c <__reset+0xfb0f725c>
81117488:	04204534 	movhi	r16,33044
8111748c:	8439c104 	addi	r16,r16,-6396
81117490:	003acc06 	br	81115fc4 <__reset+0xfb0f5fc4>
81117494:	d9002c17 	ldw	r4,176(sp)
81117498:	d9801e04 	addi	r6,sp,120
8111749c:	b80b883a 	mov	r5,r23
811174a0:	1121a140 	call	81121a14 <__sprint_r>
811174a4:	103a3b1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811174a8:	dc402617 	ldw	r17,152(sp)
811174ac:	d8c02017 	ldw	r3,128(sp)
811174b0:	da000404 	addi	r8,sp,16
811174b4:	003f9c06 	br	81117328 <__reset+0xfb0f7328>
811174b8:	ac400043 	ldbu	r17,1(r21)
811174bc:	94800814 	ori	r18,r18,32
811174c0:	ad400044 	addi	r21,r21,1
811174c4:	8c403fcc 	andi	r17,r17,255
811174c8:	8c40201c 	xori	r17,r17,128
811174cc:	8c7fe004 	addi	r17,r17,-128
811174d0:	00398f06 	br	81115b10 <__reset+0xfb0f5b10>
811174d4:	d8c02d15 	stw	r3,180(sp)
811174d8:	0039883a 	mov	fp,zero
811174dc:	003e3506 	br	81116db4 <__reset+0xfb0f6db4>
811174e0:	d9002c17 	ldw	r4,176(sp)
811174e4:	d9801e04 	addi	r6,sp,120
811174e8:	b80b883a 	mov	r5,r23
811174ec:	1121a140 	call	81121a14 <__sprint_r>
811174f0:	103a281e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811174f4:	d8c02017 	ldw	r3,128(sp)
811174f8:	da000404 	addi	r8,sp,16
811174fc:	003cd006 	br	81116840 <__reset+0xfb0f6840>
81117500:	8009883a 	mov	r4,r16
81117504:	da003d15 	stw	r8,244(sp)
81117508:	11134b00 	call	811134b0 <strlen>
8111750c:	d8802e15 	stw	r2,184(sp)
81117510:	da003d17 	ldw	r8,244(sp)
81117514:	103c340e 	bge	r2,zero,811165e8 <__reset+0xfb0f65e8>
81117518:	0005883a 	mov	r2,zero
8111751c:	003c3206 	br	811165e8 <__reset+0xfb0f65e8>
81117520:	d9002c17 	ldw	r4,176(sp)
81117524:	d9801e04 	addi	r6,sp,120
81117528:	b80b883a 	mov	r5,r23
8111752c:	1121a140 	call	81121a14 <__sprint_r>
81117530:	103a181e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81117534:	d8c02017 	ldw	r3,128(sp)
81117538:	d8801f17 	ldw	r2,124(sp)
8111753c:	da000404 	addi	r8,sp,16
81117540:	d9403317 	ldw	r5,204(sp)
81117544:	10800044 	addi	r2,r2,1
81117548:	44000015 	stw	r16,0(r8)
8111754c:	28c7883a 	add	r3,r5,r3
81117550:	003b7d06 	br	81116348 <__reset+0xfb0f6348>
81117554:	01204534 	movhi	r4,33044
81117558:	2139dd84 	addi	r4,r4,-6282
8111755c:	d9003515 	stw	r4,212(sp)
81117560:	003b1406 	br	811161b4 <__reset+0xfb0f61b4>
81117564:	013fffc4 	movi	r4,-1
81117568:	003a3506 	br	81115e40 <__reset+0xfb0f5e40>
8111756c:	0023883a 	mov	r17,zero
81117570:	003d9d06 	br	81116be8 <__reset+0xfb0f6be8>
81117574:	d9002c17 	ldw	r4,176(sp)
81117578:	d9801e04 	addi	r6,sp,120
8111757c:	b80b883a 	mov	r5,r23
81117580:	1121a140 	call	81121a14 <__sprint_r>
81117584:	103a031e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81117588:	d8c02017 	ldw	r3,128(sp)
8111758c:	da000404 	addi	r8,sp,16
81117590:	003d9406 	br	81116be4 <__reset+0xfb0f6be4>
81117594:	01204534 	movhi	r4,33044
81117598:	2139d984 	addi	r4,r4,-6298
8111759c:	d9002b15 	stw	r4,172(sp)
811175a0:	d9002b17 	ldw	r4,172(sp)
811175a4:	1c47883a 	add	r3,r3,r17
811175a8:	10800044 	addi	r2,r2,1
811175ac:	41000015 	stw	r4,0(r8)
811175b0:	44400115 	stw	r17,4(r8)
811175b4:	d8c02015 	stw	r3,128(sp)
811175b8:	d8801f15 	stw	r2,124(sp)
811175bc:	010001c4 	movi	r4,7
811175c0:	20bfd716 	blt	r4,r2,81117520 <__reset+0xfb0f7520>
811175c4:	42000204 	addi	r8,r8,8
811175c8:	003fdd06 	br	81117540 <__reset+0xfb0f7540>
811175cc:	d9002c17 	ldw	r4,176(sp)
811175d0:	d9801e04 	addi	r6,sp,120
811175d4:	b80b883a 	mov	r5,r23
811175d8:	1121a140 	call	81121a14 <__sprint_r>
811175dc:	1039ed1e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
811175e0:	d8802617 	ldw	r2,152(sp)
811175e4:	d8c02017 	ldw	r3,128(sp)
811175e8:	da000404 	addi	r8,sp,16
811175ec:	003e1006 	br	81116e30 <__reset+0xfb0f6e30>
811175f0:	00800044 	movi	r2,1
811175f4:	10803fcc 	andi	r2,r2,255
811175f8:	00c00044 	movi	r3,1
811175fc:	10fa3526 	beq	r2,r3,81115ed4 <__reset+0xfb0f5ed4>
81117600:	00c00084 	movi	r3,2
81117604:	10fbcb26 	beq	r2,r3,81116534 <__reset+0xfb0f6534>
81117608:	003a8f06 	br	81116048 <__reset+0xfb0f6048>
8111760c:	01204534 	movhi	r4,33044
81117610:	2139dd84 	addi	r4,r4,-6282
81117614:	d9003515 	stw	r4,212(sp)
81117618:	003b7606 	br	811163f4 <__reset+0xfb0f63f4>
8111761c:	d8802917 	ldw	r2,164(sp)
81117620:	00c00184 	movi	r3,6
81117624:	1880012e 	bgeu	r3,r2,8111762c <___vfprintf_internal_r+0x1ca8>
81117628:	1805883a 	mov	r2,r3
8111762c:	d8802e15 	stw	r2,184(sp)
81117630:	1000ef16 	blt	r2,zero,811179f0 <___vfprintf_internal_r+0x206c>
81117634:	04204534 	movhi	r16,33044
81117638:	d8802a15 	stw	r2,168(sp)
8111763c:	dcc02d15 	stw	r19,180(sp)
81117640:	d8002915 	stw	zero,164(sp)
81117644:	d8003215 	stw	zero,200(sp)
81117648:	8439cf04 	addi	r16,r16,-6340
8111764c:	0039883a 	mov	fp,zero
81117650:	003aa206 	br	811160dc <__reset+0xfb0f60dc>
81117654:	0021883a 	mov	r16,zero
81117658:	003e0706 	br	81116e78 <__reset+0xfb0f6e78>
8111765c:	d9002c17 	ldw	r4,176(sp)
81117660:	d9801e04 	addi	r6,sp,120
81117664:	b80b883a 	mov	r5,r23
81117668:	1121a140 	call	81121a14 <__sprint_r>
8111766c:	1039c91e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81117670:	d8802617 	ldw	r2,152(sp)
81117674:	d9403317 	ldw	r5,204(sp)
81117678:	d8c02017 	ldw	r3,128(sp)
8111767c:	da000404 	addi	r8,sp,16
81117680:	2885c83a 	sub	r2,r5,r2
81117684:	003dfb06 	br	81116e74 <__reset+0xfb0f6e74>
81117688:	9080004c 	andi	r2,r18,1
8111768c:	103e8f1e 	bne	r2,zero,811170cc <__reset+0xfb0f70cc>
81117690:	d8802117 	ldw	r2,132(sp)
81117694:	003e9e06 	br	81117110 <__reset+0xfb0f7110>
81117698:	1025883a 	mov	r18,r2
8111769c:	0039883a 	mov	fp,zero
811176a0:	00800084 	movi	r2,2
811176a4:	003fd306 	br	811175f4 <__reset+0xfb0f75f4>
811176a8:	07000b44 	movi	fp,45
811176ac:	df002785 	stb	fp,158(sp)
811176b0:	003a4006 	br	81115fb4 <__reset+0xfb0f5fb4>
811176b4:	00c00b44 	movi	r3,45
811176b8:	d8c02785 	stb	r3,158(sp)
811176bc:	d8802a15 	stw	r2,168(sp)
811176c0:	dc802b17 	ldw	r18,172(sp)
811176c4:	d8002915 	stw	zero,164(sp)
811176c8:	07000b44 	movi	fp,45
811176cc:	003a8006 	br	811160d0 <__reset+0xfb0f60d0>
811176d0:	04204534 	movhi	r16,33044
811176d4:	8439c404 	addi	r16,r16,-6384
811176d8:	003f4706 	br	811173f8 <__reset+0xfb0f73f8>
811176dc:	d8c02d17 	ldw	r3,180(sp)
811176e0:	d9002f17 	ldw	r4,188(sp)
811176e4:	18800017 	ldw	r2,0(r3)
811176e8:	18c00104 	addi	r3,r3,4
811176ec:	d8c02d15 	stw	r3,180(sp)
811176f0:	11000015 	stw	r4,0(r2)
811176f4:	0038dd06 	br	81115a6c <__reset+0xfb0f5a6c>
811176f8:	dd802617 	ldw	r22,152(sp)
811176fc:	00bfff44 	movi	r2,-3
81117700:	b0801c16 	blt	r22,r2,81117774 <___vfprintf_internal_r+0x1df0>
81117704:	d9402917 	ldw	r5,164(sp)
81117708:	2d801a16 	blt	r5,r22,81117774 <___vfprintf_internal_r+0x1df0>
8111770c:	dd803215 	stw	r22,200(sp)
81117710:	003e8906 	br	81117138 <__reset+0xfb0f7138>
81117714:	01204534 	movhi	r4,33044
81117718:	2139d984 	addi	r4,r4,-6298
8111771c:	d9002b15 	stw	r4,172(sp)
81117720:	003c9106 	br	81116968 <__reset+0xfb0f6968>
81117724:	e005883a 	mov	r2,fp
81117728:	003e7906 	br	81117110 <__reset+0xfb0f7110>
8111772c:	d9402917 	ldw	r5,164(sp)
81117730:	df002783 	ldbu	fp,158(sp)
81117734:	dcc02d15 	stw	r19,180(sp)
81117738:	d9402a15 	stw	r5,168(sp)
8111773c:	d9402e15 	stw	r5,184(sp)
81117740:	d8002915 	stw	zero,164(sp)
81117744:	d8003215 	stw	zero,200(sp)
81117748:	003a5d06 	br	811160c0 <__reset+0xfb0f60c0>
8111774c:	9080004c 	andi	r2,r18,1
81117750:	0039883a 	mov	fp,zero
81117754:	10000426 	beq	r2,zero,81117768 <___vfprintf_internal_r+0x1de4>
81117758:	00800c04 	movi	r2,48
8111775c:	dc001dc4 	addi	r16,sp,119
81117760:	d8801dc5 	stb	r2,119(sp)
81117764:	003b8006 	br	81116568 <__reset+0xfb0f6568>
81117768:	d8002e15 	stw	zero,184(sp)
8111776c:	dc001e04 	addi	r16,sp,120
81117770:	003a4d06 	br	811160a8 <__reset+0xfb0f60a8>
81117774:	8c7fff84 	addi	r17,r17,-2
81117778:	b5bfffc4 	addi	r22,r22,-1
8111777c:	dd802615 	stw	r22,152(sp)
81117780:	dc4022c5 	stb	r17,139(sp)
81117784:	b000bf16 	blt	r22,zero,81117a84 <___vfprintf_internal_r+0x2100>
81117788:	00800ac4 	movi	r2,43
8111778c:	d8802305 	stb	r2,140(sp)
81117790:	00800244 	movi	r2,9
81117794:	15807016 	blt	r2,r22,81117958 <___vfprintf_internal_r+0x1fd4>
81117798:	00800c04 	movi	r2,48
8111779c:	b5800c04 	addi	r22,r22,48
811177a0:	d8802345 	stb	r2,141(sp)
811177a4:	dd802385 	stb	r22,142(sp)
811177a8:	d88023c4 	addi	r2,sp,143
811177ac:	df0022c4 	addi	fp,sp,139
811177b0:	d8c03317 	ldw	r3,204(sp)
811177b4:	1739c83a 	sub	fp,r2,fp
811177b8:	d9003317 	ldw	r4,204(sp)
811177bc:	e0c7883a 	add	r3,fp,r3
811177c0:	df003a15 	stw	fp,232(sp)
811177c4:	d8c02e15 	stw	r3,184(sp)
811177c8:	00800044 	movi	r2,1
811177cc:	1100b30e 	bge	r2,r4,81117a9c <___vfprintf_internal_r+0x2118>
811177d0:	d8c02e17 	ldw	r3,184(sp)
811177d4:	18c00044 	addi	r3,r3,1
811177d8:	d8c02e15 	stw	r3,184(sp)
811177dc:	1805883a 	mov	r2,r3
811177e0:	1800ac16 	blt	r3,zero,81117a94 <___vfprintf_internal_r+0x2110>
811177e4:	d8003215 	stw	zero,200(sp)
811177e8:	003e5d06 	br	81117160 <__reset+0xfb0f7160>
811177ec:	d9002c17 	ldw	r4,176(sp)
811177f0:	d9801e04 	addi	r6,sp,120
811177f4:	b80b883a 	mov	r5,r23
811177f8:	1121a140 	call	81121a14 <__sprint_r>
811177fc:	1039651e 	bne	r2,zero,81115d94 <__reset+0xfb0f5d94>
81117800:	dc402617 	ldw	r17,152(sp)
81117804:	d8c02017 	ldw	r3,128(sp)
81117808:	d8801f17 	ldw	r2,124(sp)
8111780c:	da000404 	addi	r8,sp,16
81117810:	003ed606 	br	8111736c <__reset+0xfb0f736c>
81117814:	582b883a 	mov	r21,r11
81117818:	d8002915 	stw	zero,164(sp)
8111781c:	0038bd06 	br	81115b14 <__reset+0xfb0f5b14>
81117820:	d8802917 	ldw	r2,164(sp)
81117824:	103e071e 	bne	r2,zero,81117044 <__reset+0xfb0f7044>
81117828:	dc002915 	stw	r16,164(sp)
8111782c:	003e0506 	br	81117044 <__reset+0xfb0f7044>
81117830:	d9002917 	ldw	r4,164(sp)
81117834:	20c00044 	addi	r3,r4,1
81117838:	003e0f06 	br	81117078 <__reset+0xfb0f7078>
8111783c:	01400184 	movi	r5,6
81117840:	d9402915 	stw	r5,164(sp)
81117844:	003dff06 	br	81117044 <__reset+0xfb0f7044>
81117848:	d8802104 	addi	r2,sp,132
8111784c:	d8800315 	stw	r2,12(sp)
81117850:	d8802504 	addi	r2,sp,148
81117854:	d8800215 	stw	r2,8(sp)
81117858:	d8802604 	addi	r2,sp,152
8111785c:	d8800115 	stw	r2,4(sp)
81117860:	d8802917 	ldw	r2,164(sp)
81117864:	d9403617 	ldw	r5,216(sp)
81117868:	d9002c17 	ldw	r4,176(sp)
8111786c:	d8800015 	stw	r2,0(sp)
81117870:	01c000c4 	movi	r7,3
81117874:	980d883a 	mov	r6,r19
81117878:	da003d15 	stw	r8,244(sp)
8111787c:	11199300 	call	81119930 <_dtoa_r>
81117880:	d8c02917 	ldw	r3,164(sp)
81117884:	da003d17 	ldw	r8,244(sp)
81117888:	1021883a 	mov	r16,r2
8111788c:	10f9883a 	add	fp,r2,r3
81117890:	81000007 	ldb	r4,0(r16)
81117894:	00800c04 	movi	r2,48
81117898:	20805e26 	beq	r4,r2,81117a14 <___vfprintf_internal_r+0x2090>
8111789c:	d8c02617 	ldw	r3,152(sp)
811178a0:	e0f9883a 	add	fp,fp,r3
811178a4:	003e0a06 	br	811170d0 <__reset+0xfb0f70d0>
811178a8:	00c00b44 	movi	r3,45
811178ac:	24e0003c 	xorhi	r19,r4,32768
811178b0:	d8c02a05 	stb	r3,168(sp)
811178b4:	003de906 	br	8111705c <__reset+0xfb0f705c>
811178b8:	d8c03217 	ldw	r3,200(sp)
811178bc:	00c07a0e 	bge	zero,r3,81117aa8 <___vfprintf_internal_r+0x2124>
811178c0:	00800044 	movi	r2,1
811178c4:	d9003317 	ldw	r4,204(sp)
811178c8:	1105883a 	add	r2,r2,r4
811178cc:	d8802e15 	stw	r2,184(sp)
811178d0:	10004e16 	blt	r2,zero,81117a0c <___vfprintf_internal_r+0x2088>
811178d4:	044019c4 	movi	r17,103
811178d8:	003e2106 	br	81117160 <__reset+0xfb0f7160>
811178dc:	d9002917 	ldw	r4,164(sp)
811178e0:	d8802104 	addi	r2,sp,132
811178e4:	d8800315 	stw	r2,12(sp)
811178e8:	d9000015 	stw	r4,0(sp)
811178ec:	d8802504 	addi	r2,sp,148
811178f0:	d9403617 	ldw	r5,216(sp)
811178f4:	d9002c17 	ldw	r4,176(sp)
811178f8:	d8800215 	stw	r2,8(sp)
811178fc:	d8802604 	addi	r2,sp,152
81117900:	d8800115 	stw	r2,4(sp)
81117904:	01c000c4 	movi	r7,3
81117908:	980d883a 	mov	r6,r19
8111790c:	da003d15 	stw	r8,244(sp)
81117910:	11199300 	call	81119930 <_dtoa_r>
81117914:	d8c02917 	ldw	r3,164(sp)
81117918:	da003d17 	ldw	r8,244(sp)
8111791c:	1021883a 	mov	r16,r2
81117920:	00801184 	movi	r2,70
81117924:	80f9883a 	add	fp,r16,r3
81117928:	88bfd926 	beq	r17,r2,81117890 <__reset+0xfb0f7890>
8111792c:	003de806 	br	811170d0 <__reset+0xfb0f70d0>
81117930:	d9002917 	ldw	r4,164(sp)
81117934:	00c04d0e 	bge	zero,r3,81117a6c <___vfprintf_internal_r+0x20e8>
81117938:	2000441e 	bne	r4,zero,81117a4c <___vfprintf_internal_r+0x20c8>
8111793c:	9480004c 	andi	r18,r18,1
81117940:	9000421e 	bne	r18,zero,81117a4c <___vfprintf_internal_r+0x20c8>
81117944:	1805883a 	mov	r2,r3
81117948:	18007016 	blt	r3,zero,81117b0c <___vfprintf_internal_r+0x2188>
8111794c:	d8c03217 	ldw	r3,200(sp)
81117950:	d8c02e15 	stw	r3,184(sp)
81117954:	003e0206 	br	81117160 <__reset+0xfb0f7160>
81117958:	df0022c4 	addi	fp,sp,139
8111795c:	dc002915 	stw	r16,164(sp)
81117960:	4027883a 	mov	r19,r8
81117964:	e021883a 	mov	r16,fp
81117968:	b009883a 	mov	r4,r22
8111796c:	01400284 	movi	r5,10
81117970:	1124eec0 	call	81124eec <__modsi3>
81117974:	10800c04 	addi	r2,r2,48
81117978:	843fffc4 	addi	r16,r16,-1
8111797c:	b009883a 	mov	r4,r22
81117980:	01400284 	movi	r5,10
81117984:	80800005 	stb	r2,0(r16)
81117988:	1124e680 	call	81124e68 <__divsi3>
8111798c:	102d883a 	mov	r22,r2
81117990:	00800244 	movi	r2,9
81117994:	15bff416 	blt	r2,r22,81117968 <__reset+0xfb0f7968>
81117998:	9811883a 	mov	r8,r19
8111799c:	b0800c04 	addi	r2,r22,48
811179a0:	8027883a 	mov	r19,r16
811179a4:	997fffc4 	addi	r5,r19,-1
811179a8:	98bfffc5 	stb	r2,-1(r19)
811179ac:	dc002917 	ldw	r16,164(sp)
811179b0:	2f006a2e 	bgeu	r5,fp,81117b5c <___vfprintf_internal_r+0x21d8>
811179b4:	d9c02384 	addi	r7,sp,142
811179b8:	3ccfc83a 	sub	r7,r7,r19
811179bc:	d9002344 	addi	r4,sp,141
811179c0:	e1cf883a 	add	r7,fp,r7
811179c4:	00000106 	br	811179cc <___vfprintf_internal_r+0x2048>
811179c8:	28800003 	ldbu	r2,0(r5)
811179cc:	20800005 	stb	r2,0(r4)
811179d0:	21000044 	addi	r4,r4,1
811179d4:	29400044 	addi	r5,r5,1
811179d8:	393ffb1e 	bne	r7,r4,811179c8 <__reset+0xfb0f79c8>
811179dc:	d8802304 	addi	r2,sp,140
811179e0:	14c5c83a 	sub	r2,r2,r19
811179e4:	d8c02344 	addi	r3,sp,141
811179e8:	1885883a 	add	r2,r3,r2
811179ec:	003f7006 	br	811177b0 <__reset+0xfb0f77b0>
811179f0:	0005883a 	mov	r2,zero
811179f4:	003f0f06 	br	81117634 <__reset+0xfb0f7634>
811179f8:	d8c03217 	ldw	r3,200(sp)
811179fc:	18c00044 	addi	r3,r3,1
81117a00:	d8c02e15 	stw	r3,184(sp)
81117a04:	1805883a 	mov	r2,r3
81117a08:	183fb20e 	bge	r3,zero,811178d4 <__reset+0xfb0f78d4>
81117a0c:	0005883a 	mov	r2,zero
81117a10:	003fb006 	br	811178d4 <__reset+0xfb0f78d4>
81117a14:	d9003617 	ldw	r4,216(sp)
81117a18:	000d883a 	mov	r6,zero
81117a1c:	000f883a 	mov	r7,zero
81117a20:	980b883a 	mov	r5,r19
81117a24:	d8c03c15 	stw	r3,240(sp)
81117a28:	da003d15 	stw	r8,244(sp)
81117a2c:	11263bc0 	call	811263bc <__eqdf2>
81117a30:	d8c03c17 	ldw	r3,240(sp)
81117a34:	da003d17 	ldw	r8,244(sp)
81117a38:	103f9826 	beq	r2,zero,8111789c <__reset+0xfb0f789c>
81117a3c:	00800044 	movi	r2,1
81117a40:	10c7c83a 	sub	r3,r2,r3
81117a44:	d8c02615 	stw	r3,152(sp)
81117a48:	003f9506 	br	811178a0 <__reset+0xfb0f78a0>
81117a4c:	d9002917 	ldw	r4,164(sp)
81117a50:	d8c03217 	ldw	r3,200(sp)
81117a54:	20800044 	addi	r2,r4,1
81117a58:	1885883a 	add	r2,r3,r2
81117a5c:	d8802e15 	stw	r2,184(sp)
81117a60:	103dbf0e 	bge	r2,zero,81117160 <__reset+0xfb0f7160>
81117a64:	0005883a 	mov	r2,zero
81117a68:	003dbd06 	br	81117160 <__reset+0xfb0f7160>
81117a6c:	2000211e 	bne	r4,zero,81117af4 <___vfprintf_internal_r+0x2170>
81117a70:	9480004c 	andi	r18,r18,1
81117a74:	90001f1e 	bne	r18,zero,81117af4 <___vfprintf_internal_r+0x2170>
81117a78:	00800044 	movi	r2,1
81117a7c:	d8802e15 	stw	r2,184(sp)
81117a80:	003db706 	br	81117160 <__reset+0xfb0f7160>
81117a84:	00800b44 	movi	r2,45
81117a88:	05adc83a 	sub	r22,zero,r22
81117a8c:	d8802305 	stb	r2,140(sp)
81117a90:	003f3f06 	br	81117790 <__reset+0xfb0f7790>
81117a94:	0005883a 	mov	r2,zero
81117a98:	003f5206 	br	811177e4 <__reset+0xfb0f77e4>
81117a9c:	90a4703a 	and	r18,r18,r2
81117aa0:	903f4e26 	beq	r18,zero,811177dc <__reset+0xfb0f77dc>
81117aa4:	003f4a06 	br	811177d0 <__reset+0xfb0f77d0>
81117aa8:	00800084 	movi	r2,2
81117aac:	10c5c83a 	sub	r2,r2,r3
81117ab0:	003f8406 	br	811178c4 <__reset+0xfb0f78c4>
81117ab4:	d8802d17 	ldw	r2,180(sp)
81117ab8:	d9002d17 	ldw	r4,180(sp)
81117abc:	ac400043 	ldbu	r17,1(r21)
81117ac0:	10800017 	ldw	r2,0(r2)
81117ac4:	582b883a 	mov	r21,r11
81117ac8:	d8802915 	stw	r2,164(sp)
81117acc:	20800104 	addi	r2,r4,4
81117ad0:	d9002917 	ldw	r4,164(sp)
81117ad4:	d8802d15 	stw	r2,180(sp)
81117ad8:	203e7a0e 	bge	r4,zero,811174c4 <__reset+0xfb0f74c4>
81117adc:	8c403fcc 	andi	r17,r17,255
81117ae0:	00bfffc4 	movi	r2,-1
81117ae4:	8c40201c 	xori	r17,r17,128
81117ae8:	d8802915 	stw	r2,164(sp)
81117aec:	8c7fe004 	addi	r17,r17,-128
81117af0:	00380706 	br	81115b10 <__reset+0xfb0f5b10>
81117af4:	d8c02917 	ldw	r3,164(sp)
81117af8:	18c00084 	addi	r3,r3,2
81117afc:	d8c02e15 	stw	r3,184(sp)
81117b00:	1805883a 	mov	r2,r3
81117b04:	183d960e 	bge	r3,zero,81117160 <__reset+0xfb0f7160>
81117b08:	003fd606 	br	81117a64 <__reset+0xfb0f7a64>
81117b0c:	0005883a 	mov	r2,zero
81117b10:	003f8e06 	br	8111794c <__reset+0xfb0f794c>
81117b14:	9080004c 	andi	r2,r18,1
81117b18:	103f811e 	bne	r2,zero,81117920 <__reset+0xfb0f7920>
81117b1c:	d8802117 	ldw	r2,132(sp)
81117b20:	1405c83a 	sub	r2,r2,r16
81117b24:	d8803315 	stw	r2,204(sp)
81117b28:	b47ef326 	beq	r22,r17,811176f8 <__reset+0xfb0f76f8>
81117b2c:	dd802617 	ldw	r22,152(sp)
81117b30:	003f1106 	br	81117778 <__reset+0xfb0f7778>
81117b34:	d9c02785 	stb	r7,158(sp)
81117b38:	00390406 	br	81115f4c <__reset+0xfb0f5f4c>
81117b3c:	d9c02785 	stb	r7,158(sp)
81117b40:	0038d306 	br	81115e90 <__reset+0xfb0f5e90>
81117b44:	d9c02785 	stb	r7,158(sp)
81117b48:	003a6106 	br	811164d0 <__reset+0xfb0f64d0>
81117b4c:	d9c02785 	stb	r7,158(sp)
81117b50:	003af806 	br	81116734 <__reset+0xfb0f6734>
81117b54:	0005883a 	mov	r2,zero
81117b58:	003d7e06 	br	81117154 <__reset+0xfb0f7154>
81117b5c:	d8802344 	addi	r2,sp,141
81117b60:	003f1306 	br	811177b0 <__reset+0xfb0f77b0>
81117b64:	d9c02785 	stb	r7,158(sp)
81117b68:	00392306 	br	81115ff8 <__reset+0xfb0f5ff8>
81117b6c:	d9c02785 	stb	r7,158(sp)
81117b70:	003aa906 	br	81116618 <__reset+0xfb0f6618>
81117b74:	d9c02785 	stb	r7,158(sp)
81117b78:	003a3d06 	br	81116470 <__reset+0xfb0f6470>
81117b7c:	d9c02785 	stb	r7,158(sp)
81117b80:	003aca06 	br	811166ac <__reset+0xfb0f66ac>

81117b84 <__vfprintf_internal>:
81117b84:	00a04534 	movhi	r2,33044
81117b88:	1082cb04 	addi	r2,r2,2860
81117b8c:	300f883a 	mov	r7,r6
81117b90:	280d883a 	mov	r6,r5
81117b94:	200b883a 	mov	r5,r4
81117b98:	11000017 	ldw	r4,0(r2)
81117b9c:	11159841 	jmpi	81115984 <___vfprintf_internal_r>

81117ba0 <__sbprintf>:
81117ba0:	defee204 	addi	sp,sp,-1144
81117ba4:	de00012e 	bgeu	sp,et,81117bac <__sbprintf+0xc>
81117ba8:	003b68fa 	trap	3
81117bac:	2880030b 	ldhu	r2,12(r5)
81117bb0:	2ac01917 	ldw	r11,100(r5)
81117bb4:	2a80038b 	ldhu	r10,14(r5)
81117bb8:	2a400717 	ldw	r9,28(r5)
81117bbc:	2a000917 	ldw	r8,36(r5)
81117bc0:	00c10004 	movi	r3,1024
81117bc4:	dc011a15 	stw	r16,1128(sp)
81117bc8:	10bfff4c 	andi	r2,r2,65533
81117bcc:	2821883a 	mov	r16,r5
81117bd0:	d8cb883a 	add	r5,sp,r3
81117bd4:	dc811c15 	stw	r18,1136(sp)
81117bd8:	dc411b15 	stw	r17,1132(sp)
81117bdc:	dfc11d15 	stw	ra,1140(sp)
81117be0:	2025883a 	mov	r18,r4
81117be4:	d881030d 	sth	r2,1036(sp)
81117be8:	dac11915 	stw	r11,1124(sp)
81117bec:	da81038d 	sth	r10,1038(sp)
81117bf0:	da410715 	stw	r9,1052(sp)
81117bf4:	da010915 	stw	r8,1060(sp)
81117bf8:	dec10015 	stw	sp,1024(sp)
81117bfc:	dec10415 	stw	sp,1040(sp)
81117c00:	d8c10215 	stw	r3,1032(sp)
81117c04:	d8c10515 	stw	r3,1044(sp)
81117c08:	d8010615 	stw	zero,1048(sp)
81117c0c:	11159840 	call	81115984 <___vfprintf_internal_r>
81117c10:	1023883a 	mov	r17,r2
81117c14:	10000416 	blt	r2,zero,81117c28 <__sbprintf+0x88>
81117c18:	d9410004 	addi	r5,sp,1024
81117c1c:	9009883a 	mov	r4,r18
81117c20:	111b1e40 	call	8111b1e4 <_fflush_r>
81117c24:	10000d1e 	bne	r2,zero,81117c5c <__sbprintf+0xbc>
81117c28:	d881030b 	ldhu	r2,1036(sp)
81117c2c:	1080100c 	andi	r2,r2,64
81117c30:	10000326 	beq	r2,zero,81117c40 <__sbprintf+0xa0>
81117c34:	8080030b 	ldhu	r2,12(r16)
81117c38:	10801014 	ori	r2,r2,64
81117c3c:	8080030d 	sth	r2,12(r16)
81117c40:	8805883a 	mov	r2,r17
81117c44:	dfc11d17 	ldw	ra,1140(sp)
81117c48:	dc811c17 	ldw	r18,1136(sp)
81117c4c:	dc411b17 	ldw	r17,1132(sp)
81117c50:	dc011a17 	ldw	r16,1128(sp)
81117c54:	dec11e04 	addi	sp,sp,1144
81117c58:	f800283a 	ret
81117c5c:	047fffc4 	movi	r17,-1
81117c60:	003ff106 	br	81117c28 <__reset+0xfb0f7c28>

81117c64 <__svfscanf_r>:
81117c64:	deff4b04 	addi	sp,sp,-724
81117c68:	de00012e 	bgeu	sp,et,81117c70 <__svfscanf_r+0xc>
81117c6c:	003b68fa 	trap	3
81117c70:	2880030b 	ldhu	r2,12(r5)
81117c74:	df00b315 	stw	fp,716(sp)
81117c78:	dd80b115 	stw	r22,708(sp)
81117c7c:	dfc0b415 	stw	ra,720(sp)
81117c80:	ddc0b215 	stw	r23,712(sp)
81117c84:	dd40b015 	stw	r21,704(sp)
81117c88:	dd00af15 	stw	r20,700(sp)
81117c8c:	dcc0ae15 	stw	r19,696(sp)
81117c90:	dc80ad15 	stw	r18,692(sp)
81117c94:	dc40ac15 	stw	r17,688(sp)
81117c98:	dc00ab15 	stw	r16,684(sp)
81117c9c:	10c8000c 	andi	r3,r2,8192
81117ca0:	d9c09c15 	stw	r7,624(sp)
81117ca4:	2839883a 	mov	fp,r5
81117ca8:	202d883a 	mov	r22,r4
81117cac:	1800061e 	bne	r3,zero,81117cc8 <__svfscanf_r+0x64>
81117cb0:	29001917 	ldw	r4,100(r5)
81117cb4:	00f7ffc4 	movi	r3,-8193
81117cb8:	10880014 	ori	r2,r2,8192
81117cbc:	20c6703a 	and	r3,r4,r3
81117cc0:	2880030d 	sth	r2,12(r5)
81117cc4:	28c01915 	stw	r3,100(r5)
81117cc8:	30800003 	ldbu	r2,0(r6)
81117ccc:	0021883a 	mov	r16,zero
81117cd0:	05e04534 	movhi	r23,33044
81117cd4:	d800a115 	stw	zero,644(sp)
81117cd8:	d8009e15 	stw	zero,632(sp)
81117cdc:	d800a015 	stw	zero,640(sp)
81117ce0:	d8809b15 	stw	r2,620(sp)
81117ce4:	bdc2c904 	addi	r23,r23,2852
81117ce8:	8025883a 	mov	r18,r16
81117cec:	35000044 	addi	r20,r6,1
81117cf0:	10001e26 	beq	r2,zero,81117d6c <__svfscanf_r+0x108>
81117cf4:	b9c00017 	ldw	r7,0(r23)
81117cf8:	3887883a 	add	r3,r7,r2
81117cfc:	18c00043 	ldbu	r3,1(r3)
81117d00:	18c0020c 	andi	r3,r3,8
81117d04:	18001b26 	beq	r3,zero,81117d74 <__svfscanf_r+0x110>
81117d08:	e0800117 	ldw	r2,4(fp)
81117d0c:	00800e0e 	bge	zero,r2,81117d48 <__svfscanf_r+0xe4>
81117d10:	e0c00017 	ldw	r3,0(fp)
81117d14:	b9000017 	ldw	r4,0(r23)
81117d18:	18800003 	ldbu	r2,0(r3)
81117d1c:	2085883a 	add	r2,r4,r2
81117d20:	10800043 	ldbu	r2,1(r2)
81117d24:	1080020c 	andi	r2,r2,8
81117d28:	10000b26 	beq	r2,zero,81117d58 <__svfscanf_r+0xf4>
81117d2c:	e0800117 	ldw	r2,4(fp)
81117d30:	18c00044 	addi	r3,r3,1
81117d34:	e0c00015 	stw	r3,0(fp)
81117d38:	10bfffc4 	addi	r2,r2,-1
81117d3c:	e0800115 	stw	r2,4(fp)
81117d40:	94800044 	addi	r18,r18,1
81117d44:	00bff216 	blt	zero,r2,81117d10 <__reset+0xfb0f7d10>
81117d48:	e00b883a 	mov	r5,fp
81117d4c:	b009883a 	mov	r4,r22
81117d50:	1112f880 	call	81112f88 <__srefill_r>
81117d54:	103fee26 	beq	r2,zero,81117d10 <__reset+0xfb0f7d10>
81117d58:	a00d883a 	mov	r6,r20
81117d5c:	30800003 	ldbu	r2,0(r6)
81117d60:	35000044 	addi	r20,r6,1
81117d64:	d8809b15 	stw	r2,620(sp)
81117d68:	103fe21e 	bne	r2,zero,81117cf4 <__reset+0xfb0f7cf4>
81117d6c:	d880a017 	ldw	r2,640(sp)
81117d70:	00009906 	br	81117fd8 <__svfscanf_r+0x374>
81117d74:	00c00944 	movi	r3,37
81117d78:	10c0881e 	bne	r2,r3,81117f9c <__svfscanf_r+0x338>
81117d7c:	30c00043 	ldbu	r3,1(r6)
81117d80:	0023883a 	mov	r17,zero
81117d84:	0027883a 	mov	r19,zero
81117d88:	01001e04 	movi	r4,120
81117d8c:	01401b04 	movi	r5,108
81117d90:	a1800044 	addi	r6,r20,1
81117d94:	20c0a236 	bltu	r4,r3,81118020 <__svfscanf_r+0x3bc>
81117d98:	180490ba 	slli	r2,r3,2
81117d9c:	02204474 	movhi	r8,33041
81117da0:	421f6c04 	addi	r8,r8,32176
81117da4:	1205883a 	add	r2,r2,r8
81117da8:	10800017 	ldw	r2,0(r2)
81117dac:	1000683a 	jmp	r2
81117db0:	81117fd4 	ori	r4,r16,17919
81117db4:	81118020 	cmpeqi	r4,r16,17920
81117db8:	81118020 	cmpeqi	r4,r16,17920
81117dbc:	81118020 	cmpeqi	r4,r16,17920
81117dc0:	81118020 	cmpeqi	r4,r16,17920
81117dc4:	81118020 	cmpeqi	r4,r16,17920
81117dc8:	81118020 	cmpeqi	r4,r16,17920
81117dcc:	81118020 	cmpeqi	r4,r16,17920
81117dd0:	81118020 	cmpeqi	r4,r16,17920
81117dd4:	81118020 	cmpeqi	r4,r16,17920
81117dd8:	81118020 	cmpeqi	r4,r16,17920
81117ddc:	81118020 	cmpeqi	r4,r16,17920
81117de0:	81118020 	cmpeqi	r4,r16,17920
81117de4:	81118020 	cmpeqi	r4,r16,17920
81117de8:	81118020 	cmpeqi	r4,r16,17920
81117dec:	81118020 	cmpeqi	r4,r16,17920
81117df0:	81118020 	cmpeqi	r4,r16,17920
81117df4:	81118020 	cmpeqi	r4,r16,17920
81117df8:	81118020 	cmpeqi	r4,r16,17920
81117dfc:	81118020 	cmpeqi	r4,r16,17920
81117e00:	81118020 	cmpeqi	r4,r16,17920
81117e04:	81118020 	cmpeqi	r4,r16,17920
81117e08:	81118020 	cmpeqi	r4,r16,17920
81117e0c:	81118020 	cmpeqi	r4,r16,17920
81117e10:	81118020 	cmpeqi	r4,r16,17920
81117e14:	81118020 	cmpeqi	r4,r16,17920
81117e18:	81118020 	cmpeqi	r4,r16,17920
81117e1c:	81118020 	cmpeqi	r4,r16,17920
81117e20:	81118020 	cmpeqi	r4,r16,17920
81117e24:	81118020 	cmpeqi	r4,r16,17920
81117e28:	81118020 	cmpeqi	r4,r16,17920
81117e2c:	81118020 	cmpeqi	r4,r16,17920
81117e30:	81118020 	cmpeqi	r4,r16,17920
81117e34:	81118020 	cmpeqi	r4,r16,17920
81117e38:	81118020 	cmpeqi	r4,r16,17920
81117e3c:	81118020 	cmpeqi	r4,r16,17920
81117e40:	81118020 	cmpeqi	r4,r16,17920
81117e44:	81117f94 	ori	r4,r16,17918
81117e48:	81118020 	cmpeqi	r4,r16,17920
81117e4c:	81118020 	cmpeqi	r4,r16,17920
81117e50:	81118020 	cmpeqi	r4,r16,17920
81117e54:	81118020 	cmpeqi	r4,r16,17920
81117e58:	81118008 	cmpgei	r4,r16,17920
81117e5c:	81118020 	cmpeqi	r4,r16,17920
81117e60:	81118020 	cmpeqi	r4,r16,17920
81117e64:	81118020 	cmpeqi	r4,r16,17920
81117e68:	81118020 	cmpeqi	r4,r16,17920
81117e6c:	81118020 	cmpeqi	r4,r16,17920
81117e70:	8111813c 	xorhi	r4,r16,17924
81117e74:	8111813c 	xorhi	r4,r16,17924
81117e78:	8111813c 	xorhi	r4,r16,17924
81117e7c:	8111813c 	xorhi	r4,r16,17924
81117e80:	8111813c 	xorhi	r4,r16,17924
81117e84:	8111813c 	xorhi	r4,r16,17924
81117e88:	8111813c 	xorhi	r4,r16,17924
81117e8c:	8111813c 	xorhi	r4,r16,17924
81117e90:	8111813c 	xorhi	r4,r16,17924
81117e94:	8111813c 	xorhi	r4,r16,17924
81117e98:	81118020 	cmpeqi	r4,r16,17920
81117e9c:	81118020 	cmpeqi	r4,r16,17920
81117ea0:	81118020 	cmpeqi	r4,r16,17920
81117ea4:	81118020 	cmpeqi	r4,r16,17920
81117ea8:	81118020 	cmpeqi	r4,r16,17920
81117eac:	81118020 	cmpeqi	r4,r16,17920
81117eb0:	81118020 	cmpeqi	r4,r16,17920
81117eb4:	81118020 	cmpeqi	r4,r16,17920
81117eb8:	81118020 	cmpeqi	r4,r16,17920
81117ebc:	81118020 	cmpeqi	r4,r16,17920
81117ec0:	81118110 	cmplti	r4,r16,17924
81117ec4:	811181c0 	call	8811181c <__reset+0x20f181c>
81117ec8:	81118020 	cmpeqi	r4,r16,17920
81117ecc:	811181c0 	call	8811181c <__reset+0x20f181c>
81117ed0:	81118020 	cmpeqi	r4,r16,17920
81117ed4:	81118020 	cmpeqi	r4,r16,17920
81117ed8:	81118020 	cmpeqi	r4,r16,17920
81117edc:	81118020 	cmpeqi	r4,r16,17920
81117ee0:	811181ac 	andhi	r4,r16,17926
81117ee4:	81118020 	cmpeqi	r4,r16,17920
81117ee8:	81118020 	cmpeqi	r4,r16,17920
81117eec:	81118180 	call	88111818 <__reset+0x20f1818>
81117ef0:	81118020 	cmpeqi	r4,r16,17920
81117ef4:	81118020 	cmpeqi	r4,r16,17920
81117ef8:	81118020 	cmpeqi	r4,r16,17920
81117efc:	81118020 	cmpeqi	r4,r16,17920
81117f00:	81118020 	cmpeqi	r4,r16,17920
81117f04:	81118020 	cmpeqi	r4,r16,17920
81117f08:	81118020 	cmpeqi	r4,r16,17920
81117f0c:	81118020 	cmpeqi	r4,r16,17920
81117f10:	81118158 	cmpnei	r4,r16,17925
81117f14:	81118020 	cmpeqi	r4,r16,17920
81117f18:	81118020 	cmpeqi	r4,r16,17920
81117f1c:	811182f4 	orhi	r4,r16,17931
81117f20:	81118020 	cmpeqi	r4,r16,17920
81117f24:	81118020 	cmpeqi	r4,r16,17920
81117f28:	81118020 	cmpeqi	r4,r16,17920
81117f2c:	81118020 	cmpeqi	r4,r16,17920
81117f30:	81118020 	cmpeqi	r4,r16,17920
81117f34:	81118020 	cmpeqi	r4,r16,17920
81117f38:	81118020 	cmpeqi	r4,r16,17920
81117f3c:	81118278 	rdprs	r4,r16,17929
81117f40:	81118250 	cmplti	r4,r16,17929
81117f44:	811181c0 	call	8811181c <__reset+0x20f181c>
81117f48:	811181c0 	call	8811181c <__reset+0x20f181c>
81117f4c:	811181c0 	call	8811181c <__reset+0x20f181c>
81117f50:	8111823c 	xorhi	r4,r16,17928
81117f54:	81118380 	call	88111838 <__reset+0x20f1838>
81117f58:	81118020 	cmpeqi	r4,r16,17920
81117f5c:	81118020 	cmpeqi	r4,r16,17920
81117f60:	81118228 	cmpgeui	r4,r16,17928
81117f64:	81118020 	cmpeqi	r4,r16,17920
81117f68:	811181f8 	rdprs	r4,r16,17927
81117f6c:	811181d4 	ori	r4,r16,17927
81117f70:	811180e4 	muli	r4,r16,17923
81117f74:	81118020 	cmpeqi	r4,r16,17920
81117f78:	81118020 	cmpeqi	r4,r16,17920
81117f7c:	811180d0 	cmplti	r4,r16,17923
81117f80:	81118020 	cmpeqi	r4,r16,17920
81117f84:	81118058 	cmpnei	r4,r16,17921
81117f88:	81118020 	cmpeqi	r4,r16,17920
81117f8c:	81118020 	cmpeqi	r4,r16,17920
81117f90:	81118158 	cmpnei	r4,r16,17925
81117f94:	d9809d15 	stw	r6,628(sp)
81117f98:	3029883a 	mov	r20,r6
81117f9c:	e0800117 	ldw	r2,4(fp)
81117fa0:	0081aa0e 	bge	zero,r2,8111864c <__svfscanf_r+0x9e8>
81117fa4:	e0800017 	ldw	r2,0(fp)
81117fa8:	a0ffffc3 	ldbu	r3,-1(r20)
81117fac:	11000003 	ldbu	r4,0(r2)
81117fb0:	20ff6e1e 	bne	r4,r3,81117d6c <__reset+0xfb0f7d6c>
81117fb4:	e0c00117 	ldw	r3,4(fp)
81117fb8:	10800044 	addi	r2,r2,1
81117fbc:	e0800015 	stw	r2,0(fp)
81117fc0:	18bfffc4 	addi	r2,r3,-1
81117fc4:	e0800115 	stw	r2,4(fp)
81117fc8:	94800044 	addi	r18,r18,1
81117fcc:	a00d883a 	mov	r6,r20
81117fd0:	003f6206 	br	81117d5c <__reset+0xfb0f7d5c>
81117fd4:	00bfffc4 	movi	r2,-1
81117fd8:	dfc0b417 	ldw	ra,720(sp)
81117fdc:	df00b317 	ldw	fp,716(sp)
81117fe0:	ddc0b217 	ldw	r23,712(sp)
81117fe4:	dd80b117 	ldw	r22,708(sp)
81117fe8:	dd40b017 	ldw	r21,704(sp)
81117fec:	dd00af17 	ldw	r20,700(sp)
81117ff0:	dcc0ae17 	ldw	r19,696(sp)
81117ff4:	dc80ad17 	ldw	r18,692(sp)
81117ff8:	dc40ac17 	ldw	r17,688(sp)
81117ffc:	dc00ab17 	ldw	r16,684(sp)
81118000:	dec0b504 	addi	sp,sp,724
81118004:	f800283a 	ret
81118008:	a0800043 	ldbu	r2,1(r20)
8111800c:	3029883a 	mov	r20,r6
81118010:	8c400414 	ori	r17,r17,16
81118014:	10c03fcc 	andi	r3,r2,255
81118018:	a1800044 	addi	r6,r20,1
8111801c:	20ff5e2e 	bgeu	r4,r3,81117d98 <__reset+0xfb0f7d98>
81118020:	38c7883a 	add	r3,r7,r3
81118024:	18800043 	ldbu	r2,1(r3)
81118028:	d9809d15 	stw	r6,628(sp)
8111802c:	00c00044 	movi	r3,1
81118030:	108000cc 	andi	r2,r2,3
81118034:	10c18f26 	beq	r2,r3,81118674 <__svfscanf_r+0xa10>
81118038:	e0800117 	ldw	r2,4(fp)
8111803c:	00808716 	blt	zero,r2,8111825c <__svfscanf_r+0x5f8>
81118040:	e00b883a 	mov	r5,fp
81118044:	b009883a 	mov	r4,r22
81118048:	1112f880 	call	81112f88 <__srefill_r>
8111804c:	1001431e 	bne	r2,zero,8111855c <__svfscanf_r+0x8f8>
81118050:	b9c00017 	ldw	r7,0(r23)
81118054:	00008106 	br	8111825c <__svfscanf_r+0x5f8>
81118058:	e0800117 	ldw	r2,4(fp)
8111805c:	d9809d15 	stw	r6,628(sp)
81118060:	0081a30e 	bge	zero,r2,811186f0 <__svfscanf_r+0xa8c>
81118064:	00a044b4 	movhi	r2,33042
81118068:	10bf4504 	addi	r2,r2,-748
8111806c:	02000284 	movi	r8,10
81118070:	d880a115 	stw	r2,644(sp)
81118074:	da009e15 	stw	r8,632(sp)
81118078:	050000c4 	movi	r20,3
8111807c:	e0c00017 	ldw	r3,0(fp)
81118080:	00000206 	br	8111808c <__svfscanf_r+0x428>
81118084:	18c00044 	addi	r3,r3,1
81118088:	e0c00015 	stw	r3,0(fp)
8111808c:	19000003 	ldbu	r4,0(r3)
81118090:	20803fcc 	andi	r2,r4,255
81118094:	3885883a 	add	r2,r7,r2
81118098:	10800043 	ldbu	r2,1(r2)
8111809c:	1140020c 	andi	r5,r2,8
811180a0:	2801ab26 	beq	r5,zero,81118750 <__svfscanf_r+0xaec>
811180a4:	e0800117 	ldw	r2,4(fp)
811180a8:	94800044 	addi	r18,r18,1
811180ac:	10bfffc4 	addi	r2,r2,-1
811180b0:	e0800115 	stw	r2,4(fp)
811180b4:	00bff316 	blt	zero,r2,81118084 <__reset+0xfb0f8084>
811180b8:	e00b883a 	mov	r5,fp
811180bc:	b009883a 	mov	r4,r22
811180c0:	1112f880 	call	81112f88 <__srefill_r>
811180c4:	1001251e 	bne	r2,zero,8111855c <__svfscanf_r+0x8f8>
811180c8:	b9c00017 	ldw	r7,0(r23)
811180cc:	003feb06 	br	8111807c <__reset+0xfb0f807c>
811180d0:	e0800117 	ldw	r2,4(fp)
811180d4:	d9809d15 	stw	r6,628(sp)
811180d8:	00818b0e 	bge	zero,r2,81118708 <__svfscanf_r+0xaa4>
811180dc:	05000084 	movi	r20,2
811180e0:	003fe606 	br	8111807c <__reset+0xfb0f807c>
811180e4:	e0800117 	ldw	r2,4(fp)
811180e8:	d9809d15 	stw	r6,628(sp)
811180ec:	8c408814 	ori	r17,r17,544
811180f0:	00801d0e 	bge	zero,r2,81118168 <__svfscanf_r+0x504>
811180f4:	00a044b4 	movhi	r2,33042
811180f8:	10bf4504 	addi	r2,r2,-748
811180fc:	02000404 	movi	r8,16
81118100:	d880a115 	stw	r2,644(sp)
81118104:	da009e15 	stw	r8,632(sp)
81118108:	050000c4 	movi	r20,3
8111810c:	003fdb06 	br	8111807c <__reset+0xfb0f807c>
81118110:	e0800117 	ldw	r2,4(fp)
81118114:	d9809d15 	stw	r6,628(sp)
81118118:	8c400054 	ori	r17,r17,1
8111811c:	00bfc80e 	bge	zero,r2,81118040 <__reset+0xfb0f8040>
81118120:	00e04474 	movhi	r3,33041
81118124:	18cd5204 	addi	r3,r3,13640
81118128:	02000284 	movi	r8,10
8111812c:	d8c0a115 	stw	r3,644(sp)
81118130:	da009e15 	stw	r8,632(sp)
81118134:	050000c4 	movi	r20,3
81118138:	003fd006 	br	8111807c <__reset+0xfb0f807c>
8111813c:	9cc002a4 	muli	r19,r19,10
81118140:	a0800043 	ldbu	r2,1(r20)
81118144:	3029883a 	mov	r20,r6
81118148:	98e7883a 	add	r19,r19,r3
8111814c:	9cfff404 	addi	r19,r19,-48
81118150:	10c03fcc 	andi	r3,r2,255
81118154:	003f0e06 	br	81117d90 <__reset+0xfb0f7d90>
81118158:	e0800117 	ldw	r2,4(fp)
8111815c:	d9809d15 	stw	r6,628(sp)
81118160:	8c408014 	ori	r17,r17,512
81118164:	00bfe316 	blt	zero,r2,811180f4 <__reset+0xfb0f80f4>
81118168:	e00b883a 	mov	r5,fp
8111816c:	b009883a 	mov	r4,r22
81118170:	1112f880 	call	81112f88 <__srefill_r>
81118174:	1000f91e 	bne	r2,zero,8111855c <__svfscanf_r+0x8f8>
81118178:	b9c00017 	ldw	r7,0(r23)
8111817c:	003fdd06 	br	811180f4 <__reset+0xfb0f80f4>
81118180:	e0800117 	ldw	r2,4(fp)
81118184:	d9809d15 	stw	r6,628(sp)
81118188:	8c400054 	ori	r17,r17,1
8111818c:	0080140e 	bge	zero,r2,811181e0 <__svfscanf_r+0x57c>
81118190:	00a044b4 	movhi	r2,33042
81118194:	10bf4504 	addi	r2,r2,-748
81118198:	02000204 	movi	r8,8
8111819c:	d880a115 	stw	r2,644(sp)
811181a0:	da009e15 	stw	r8,632(sp)
811181a4:	050000c4 	movi	r20,3
811181a8:	003fb406 	br	8111807c <__reset+0xfb0f807c>
811181ac:	a0800043 	ldbu	r2,1(r20)
811181b0:	8c400094 	ori	r17,r17,2
811181b4:	3029883a 	mov	r20,r6
811181b8:	10c03fcc 	andi	r3,r2,255
811181bc:	003ef406 	br	81117d90 <__reset+0xfb0f7d90>
811181c0:	e0800117 	ldw	r2,4(fp)
811181c4:	d9809d15 	stw	r6,628(sp)
811181c8:	0081420e 	bge	zero,r2,811186d4 <__svfscanf_r+0xa70>
811181cc:	05000104 	movi	r20,4
811181d0:	003faa06 	br	8111807c <__reset+0xfb0f807c>
811181d4:	e0800117 	ldw	r2,4(fp)
811181d8:	d9809d15 	stw	r6,628(sp)
811181dc:	00bfec16 	blt	zero,r2,81118190 <__reset+0xfb0f8190>
811181e0:	e00b883a 	mov	r5,fp
811181e4:	b009883a 	mov	r4,r22
811181e8:	1112f880 	call	81112f88 <__srefill_r>
811181ec:	1000db1e 	bne	r2,zero,8111855c <__svfscanf_r+0x8f8>
811181f0:	b9c00017 	ldw	r7,0(r23)
811181f4:	003fe606 	br	81118190 <__reset+0xfb0f8190>
811181f8:	d9809d15 	stw	r6,628(sp)
811181fc:	8880040c 	andi	r2,r17,16
81118200:	10009c1e 	bne	r2,zero,81118474 <__svfscanf_r+0x810>
81118204:	8880010c 	andi	r2,r17,4
81118208:	10011e26 	beq	r2,zero,81118684 <__svfscanf_r+0xa20>
8111820c:	da009c17 	ldw	r8,624(sp)
81118210:	3029883a 	mov	r20,r6
81118214:	40800017 	ldw	r2,0(r8)
81118218:	42000104 	addi	r8,r8,4
8111821c:	da009c15 	stw	r8,624(sp)
81118220:	1480000d 	sth	r18,0(r2)
81118224:	003ecc06 	br	81117d58 <__reset+0xfb0f7d58>
81118228:	a0c00043 	ldbu	r3,1(r20)
8111822c:	19410c26 	beq	r3,r5,81118660 <__svfscanf_r+0x9fc>
81118230:	8c400054 	ori	r17,r17,1
81118234:	3029883a 	mov	r20,r6
81118238:	003ed506 	br	81117d90 <__reset+0xfb0f7d90>
8111823c:	a0800043 	ldbu	r2,1(r20)
81118240:	8c400114 	ori	r17,r17,4
81118244:	3029883a 	mov	r20,r6
81118248:	10c03fcc 	andi	r3,r2,255
8111824c:	003ed006 	br	81117d90 <__reset+0xfb0f7d90>
81118250:	e0800117 	ldw	r2,4(fp)
81118254:	d9809d15 	stw	r6,628(sp)
81118258:	00bf790e 	bge	zero,r2,81118040 <__reset+0xfb0f8040>
8111825c:	00a04474 	movhi	r2,33041
81118260:	108d5204 	addi	r2,r2,13640
81118264:	02000284 	movi	r8,10
81118268:	d880a115 	stw	r2,644(sp)
8111826c:	da009e15 	stw	r8,632(sp)
81118270:	050000c4 	movi	r20,3
81118274:	003f8106 	br	8111807c <__reset+0xfb0f807c>
81118278:	e0800117 	ldw	r2,4(fp)
8111827c:	d9809d15 	stw	r6,628(sp)
81118280:	0080c40e 	bge	zero,r2,81118594 <__svfscanf_r+0x930>
81118284:	9800011e 	bne	r19,zero,8111828c <__svfscanf_r+0x628>
81118288:	04c00044 	movi	r19,1
8111828c:	8880004c 	andi	r2,r17,1
81118290:	1000441e 	bne	r2,zero,811183a4 <__svfscanf_r+0x740>
81118294:	8c40040c 	andi	r17,r17,16
81118298:	8800da26 	beq	r17,zero,81118604 <__svfscanf_r+0x9a0>
8111829c:	0021883a 	mov	r16,zero
811182a0:	00000806 	br	811182c4 <__svfscanf_r+0x660>
811182a4:	1887883a 	add	r3,r3,r2
811182a8:	e00b883a 	mov	r5,fp
811182ac:	b009883a 	mov	r4,r22
811182b0:	e0c00015 	stw	r3,0(fp)
811182b4:	80a1883a 	add	r16,r16,r2
811182b8:	98a7c83a 	sub	r19,r19,r2
811182bc:	1112f880 	call	81112f88 <__srefill_r>
811182c0:	1000ca1e 	bne	r2,zero,811185ec <__svfscanf_r+0x988>
811182c4:	e0800117 	ldw	r2,4(fp)
811182c8:	e0c00017 	ldw	r3,0(fp)
811182cc:	14fff516 	blt	r2,r19,811182a4 <__reset+0xfb0f82a4>
811182d0:	14c5c83a 	sub	r2,r2,r19
811182d4:	1cd5883a 	add	r10,r3,r19
811182d8:	84e1883a 	add	r16,r16,r19
811182dc:	e0800115 	stw	r2,4(fp)
811182e0:	e2800015 	stw	r10,0(fp)
811182e4:	dd009d17 	ldw	r20,628(sp)
811182e8:	9425883a 	add	r18,r18,r16
811182ec:	a00d883a 	mov	r6,r20
811182f0:	003e9a06 	br	81117d5c <__reset+0xfb0f7d5c>
811182f4:	300b883a 	mov	r5,r6
811182f8:	d9005884 	addi	r4,sp,354
811182fc:	d9809d15 	stw	r6,628(sp)
81118300:	111e0ec0 	call	8111e0ec <__sccl>
81118304:	1029883a 	mov	r20,r2
81118308:	e0800117 	ldw	r2,4(fp)
8111830c:	0081050e 	bge	zero,r2,81118724 <__svfscanf_r+0xac0>
81118310:	e1000017 	ldw	r4,0(fp)
81118314:	20800003 	ldbu	r2,0(r4)
81118318:	98005926 	beq	r19,zero,81118480 <__svfscanf_r+0x81c>
8111831c:	8c40040c 	andi	r17,r17,16
81118320:	88005a26 	beq	r17,zero,8111848c <__svfscanf_r+0x828>
81118324:	9823883a 	mov	r17,r19
81118328:	0021883a 	mov	r16,zero
8111832c:	00000106 	br	81118334 <__svfscanf_r+0x6d0>
81118330:	20800003 	ldbu	r2,0(r4)
81118334:	10803fcc 	andi	r2,r2,255
81118338:	d8c05884 	addi	r3,sp,354
8111833c:	1885883a 	add	r2,r3,r2
81118340:	10800007 	ldb	r2,0(r2)
81118344:	1000ad26 	beq	r2,zero,811185fc <__svfscanf_r+0x998>
81118348:	e0800117 	ldw	r2,4(fp)
8111834c:	21000044 	addi	r4,r4,1
81118350:	84000044 	addi	r16,r16,1
81118354:	10bfffc4 	addi	r2,r2,-1
81118358:	e0800115 	stw	r2,4(fp)
8111835c:	e1000015 	stw	r4,0(fp)
81118360:	84c0a026 	beq	r16,r19,811185e4 <__svfscanf_r+0x980>
81118364:	00bff216 	blt	zero,r2,81118330 <__reset+0xfb0f8330>
81118368:	e00b883a 	mov	r5,fp
8111836c:	b009883a 	mov	r4,r22
81118370:	1112f880 	call	81112f88 <__srefill_r>
81118374:	10009a1e 	bne	r2,zero,811185e0 <__svfscanf_r+0x97c>
81118378:	e1000017 	ldw	r4,0(fp)
8111837c:	003fec06 	br	81118330 <__reset+0xfb0f8330>
81118380:	e0800117 	ldw	r2,4(fp)
81118384:	d9809d15 	stw	r6,628(sp)
81118388:	0080eb0e 	bge	zero,r2,81118738 <__svfscanf_r+0xad4>
8111838c:	00a04474 	movhi	r2,33041
81118390:	108d5204 	addi	r2,r2,13640
81118394:	d880a115 	stw	r2,644(sp)
81118398:	d8009e15 	stw	zero,632(sp)
8111839c:	050000c4 	movi	r20,3
811183a0:	003f3606 	br	8111807c <__reset+0xfb0f807c>
811183a4:	dd409904 	addi	r21,sp,612
811183a8:	8c40040c 	andi	r17,r17,16
811183ac:	01800204 	movi	r6,8
811183b0:	000b883a 	mov	r5,zero
811183b4:	a809883a 	mov	r4,r21
811183b8:	dc409f15 	stw	r17,636(sp)
811183bc:	1112c840 	call	81112c84 <memset>
811183c0:	dc409f17 	ldw	r17,636(sp)
811183c4:	88006e26 	beq	r17,zero,81118580 <__svfscanf_r+0x91c>
811183c8:	0029883a 	mov	r20,zero
811183cc:	0023883a 	mov	r17,zero
811183d0:	111c5080 	call	8111c508 <__locale_mb_cur_max>
811183d4:	14406126 	beq	r2,r17,8111855c <__svfscanf_r+0x8f8>
811183d8:	e0800017 	ldw	r2,0(fp)
811183dc:	e0c00117 	ldw	r3,4(fp)
811183e0:	d9000104 	addi	r4,sp,4
811183e4:	12000003 	ldbu	r8,0(r2)
811183e8:	18ffffc4 	addi	r3,r3,-1
811183ec:	10800044 	addi	r2,r2,1
811183f0:	e0c00115 	stw	r3,4(fp)
811183f4:	e0800015 	stw	r2,0(fp)
811183f8:	8c000044 	addi	r16,r17,1
811183fc:	dd400015 	stw	r21,0(sp)
81118400:	2463883a 	add	r17,r4,r17
81118404:	200d883a 	mov	r6,r4
81118408:	a00b883a 	mov	r5,r20
8111840c:	800f883a 	mov	r7,r16
81118410:	b009883a 	mov	r4,r22
81118414:	8a000005 	stb	r8,0(r17)
81118418:	111c5c40 	call	8111c5c4 <_mbrtowc_r>
8111841c:	017fffc4 	movi	r5,-1
81118420:	11404e26 	beq	r2,r5,8111855c <__svfscanf_r+0x8f8>
81118424:	1000601e 	bne	r2,zero,811185a8 <__svfscanf_r+0x944>
81118428:	da009f17 	ldw	r8,636(sp)
8111842c:	4000641e 	bne	r8,zero,811185c0 <__svfscanf_r+0x95c>
81118430:	a0000015 	stw	zero,0(r20)
81118434:	9425883a 	add	r18,r18,r16
81118438:	9967883a 	add	r19,r19,r5
8111843c:	a5000104 	addi	r20,r20,4
81118440:	e0800117 	ldw	r2,4(fp)
81118444:	0023883a 	mov	r17,zero
81118448:	00804b16 	blt	zero,r2,81118578 <__svfscanf_r+0x914>
8111844c:	e00b883a 	mov	r5,fp
81118450:	b009883a 	mov	r4,r22
81118454:	1112f880 	call	81112f88 <__srefill_r>
81118458:	10004726 	beq	r2,zero,81118578 <__svfscanf_r+0x914>
8111845c:	88003f1e 	bne	r17,zero,8111855c <__svfscanf_r+0x8f8>
81118460:	d8c09f17 	ldw	r3,636(sp)
81118464:	1800031e 	bne	r3,zero,81118474 <__svfscanf_r+0x810>
81118468:	da00a017 	ldw	r8,640(sp)
8111846c:	42000044 	addi	r8,r8,1
81118470:	da00a015 	stw	r8,640(sp)
81118474:	dd009d17 	ldw	r20,628(sp)
81118478:	a00d883a 	mov	r6,r20
8111847c:	003e3706 	br	81117d5c <__reset+0xfb0f7d5c>
81118480:	8c40040c 	andi	r17,r17,16
81118484:	04ffffc4 	movi	r19,-1
81118488:	883fa61e 	bne	r17,zero,81118324 <__reset+0xfb0f8324>
8111848c:	da009c17 	ldw	r8,624(sp)
81118490:	9abfffc4 	addi	r10,r19,-1
81118494:	44000017 	ldw	r16,0(r8)
81118498:	44400104 	addi	r17,r8,4
8111849c:	8007883a 	mov	r3,r16
811184a0:	82ab883a 	add	r21,r16,r10
811184a4:	00000306 	br	811184b4 <__svfscanf_r+0x850>
811184a8:	e1000017 	ldw	r4,0(fp)
811184ac:	9807883a 	mov	r3,r19
811184b0:	20800003 	ldbu	r2,0(r4)
811184b4:	10803fcc 	andi	r2,r2,255
811184b8:	d9405884 	addi	r5,sp,354
811184bc:	2885883a 	add	r2,r5,r2
811184c0:	10800007 	ldb	r2,0(r2)
811184c4:	10004b26 	beq	r2,zero,811185f4 <__svfscanf_r+0x990>
811184c8:	e0800117 	ldw	r2,4(fp)
811184cc:	21400044 	addi	r5,r4,1
811184d0:	e1400015 	stw	r5,0(fp)
811184d4:	10bfffc4 	addi	r2,r2,-1
811184d8:	e0800115 	stw	r2,4(fp)
811184dc:	20800003 	ldbu	r2,0(r4)
811184e0:	1cc00044 	addi	r19,r3,1
811184e4:	18800005 	stb	r2,0(r3)
811184e8:	1d400726 	beq	r3,r21,81118508 <__svfscanf_r+0x8a4>
811184ec:	e0800117 	ldw	r2,4(fp)
811184f0:	00bfed16 	blt	zero,r2,811184a8 <__reset+0xfb0f84a8>
811184f4:	e00b883a 	mov	r5,fp
811184f8:	b009883a 	mov	r4,r22
811184fc:	1112f880 	call	81112f88 <__srefill_r>
81118500:	103fe926 	beq	r2,zero,811184a8 <__reset+0xfb0f84a8>
81118504:	84c01526 	beq	r16,r19,8111855c <__svfscanf_r+0x8f8>
81118508:	9c21c83a 	sub	r16,r19,r16
8111850c:	803e1726 	beq	r16,zero,81117d6c <__reset+0xfb0f7d6c>
81118510:	da00a017 	ldw	r8,640(sp)
81118514:	98000005 	stb	zero,0(r19)
81118518:	dc409c15 	stw	r17,624(sp)
8111851c:	42000044 	addi	r8,r8,1
81118520:	da00a015 	stw	r8,640(sp)
81118524:	9425883a 	add	r18,r18,r16
81118528:	a00d883a 	mov	r6,r20
8111852c:	003e0b06 	br	81117d5c <__reset+0xfb0f7d5c>
81118530:	017fff84 	movi	r5,-2
81118534:	11439b1e 	bne	r2,r5,811193a4 <__svfscanf_r+0x1740>
81118538:	8821883a 	mov	r16,r17
8111853c:	e0800117 	ldw	r2,4(fp)
81118540:	0082e516 	blt	zero,r2,811190d8 <__svfscanf_r+0x1474>
81118544:	e00b883a 	mov	r5,fp
81118548:	b009883a 	mov	r4,r22
8111854c:	1112f880 	call	81112f88 <__srefill_r>
81118550:	1002e126 	beq	r2,zero,811190d8 <__svfscanf_r+0x1474>
81118554:	dc409f17 	ldw	r17,636(sp)
81118558:	8002e826 	beq	r16,zero,811190fc <__svfscanf_r+0x1498>
8111855c:	da00a017 	ldw	r8,640(sp)
81118560:	403e9c26 	beq	r8,zero,81117fd4 <__reset+0xfb0f7fd4>
81118564:	e080030b 	ldhu	r2,12(fp)
81118568:	1080100c 	andi	r2,r2,64
8111856c:	103e991e 	bne	r2,zero,81117fd4 <__reset+0xfb0f7fd4>
81118570:	4005883a 	mov	r2,r8
81118574:	003e9806 	br	81117fd8 <__reset+0xfb0f7fd8>
81118578:	983f951e 	bne	r19,zero,811183d0 <__reset+0xfb0f83d0>
8111857c:	003fb806 	br	81118460 <__reset+0xfb0f8460>
81118580:	da009c17 	ldw	r8,624(sp)
81118584:	45000017 	ldw	r20,0(r8)
81118588:	42000104 	addi	r8,r8,4
8111858c:	da009c15 	stw	r8,624(sp)
81118590:	003f8e06 	br	811183cc <__reset+0xfb0f83cc>
81118594:	e00b883a 	mov	r5,fp
81118598:	b009883a 	mov	r4,r22
8111859c:	1112f880 	call	81112f88 <__srefill_r>
811185a0:	103f3826 	beq	r2,zero,81118284 <__reset+0xfb0f8284>
811185a4:	003fed06 	br	8111855c <__reset+0xfb0f855c>
811185a8:	00ffff84 	movi	r3,-2
811185ac:	10c0071e 	bne	r2,r3,811185cc <__svfscanf_r+0x968>
811185b0:	e0800117 	ldw	r2,4(fp)
811185b4:	8023883a 	mov	r17,r16
811185b8:	00bf8516 	blt	zero,r2,811183d0 <__reset+0xfb0f83d0>
811185bc:	003fa306 	br	8111844c <__reset+0xfb0f844c>
811185c0:	9425883a 	add	r18,r18,r16
811185c4:	9cffffc4 	addi	r19,r19,-1
811185c8:	003f9d06 	br	81118440 <__reset+0xfb0f8440>
811185cc:	da009f17 	ldw	r8,636(sp)
811185d0:	9425883a 	add	r18,r18,r16
811185d4:	9cffffc4 	addi	r19,r19,-1
811185d8:	403f9826 	beq	r8,zero,8111843c <__reset+0xfb0f843c>
811185dc:	003f9806 	br	81118440 <__reset+0xfb0f8440>
811185e0:	8023883a 	mov	r17,r16
811185e4:	8821883a 	mov	r16,r17
811185e8:	003fce06 	br	81118524 <__reset+0xfb0f8524>
811185ec:	803f3d1e 	bne	r16,zero,811182e4 <__reset+0xfb0f82e4>
811185f0:	003fda06 	br	8111855c <__reset+0xfb0f855c>
811185f4:	1827883a 	mov	r19,r3
811185f8:	003fc306 	br	81118508 <__reset+0xfb0f8508>
811185fc:	803fc91e 	bne	r16,zero,81118524 <__reset+0xfb0f8524>
81118600:	003dda06 	br	81117d6c <__reset+0xfb0f7d6c>
81118604:	da009c17 	ldw	r8,624(sp)
81118608:	df000015 	stw	fp,0(sp)
8111860c:	980f883a 	mov	r7,r19
81118610:	41400017 	ldw	r5,0(r8)
81118614:	01800044 	movi	r6,1
81118618:	b009883a 	mov	r4,r22
8111861c:	111b6dc0 	call	8111b6dc <_fread_r>
81118620:	da009c17 	ldw	r8,624(sp)
81118624:	40c00104 	addi	r3,r8,4
81118628:	103fcc26 	beq	r2,zero,8111855c <__reset+0xfb0f855c>
8111862c:	da00a017 	ldw	r8,640(sp)
81118630:	dd009d17 	ldw	r20,628(sp)
81118634:	90a5883a 	add	r18,r18,r2
81118638:	42000044 	addi	r8,r8,1
8111863c:	da00a015 	stw	r8,640(sp)
81118640:	d8c09c15 	stw	r3,624(sp)
81118644:	a00d883a 	mov	r6,r20
81118648:	003dc406 	br	81117d5c <__reset+0xfb0f7d5c>
8111864c:	e00b883a 	mov	r5,fp
81118650:	b009883a 	mov	r4,r22
81118654:	1112f880 	call	81112f88 <__srefill_r>
81118658:	103e5226 	beq	r2,zero,81117fa4 <__reset+0xfb0f7fa4>
8111865c:	003fbf06 	br	8111855c <__reset+0xfb0f855c>
81118660:	a0800083 	ldbu	r2,2(r20)
81118664:	8c400094 	ori	r17,r17,2
81118668:	a5000084 	addi	r20,r20,2
8111866c:	10c03fcc 	andi	r3,r2,255
81118670:	003dc706 	br	81117d90 <__reset+0xfb0f7d90>
81118674:	e0800117 	ldw	r2,4(fp)
81118678:	88e2b03a 	or	r17,r17,r3
8111867c:	00bef716 	blt	zero,r2,8111825c <__reset+0xfb0f825c>
81118680:	003e6f06 	br	81118040 <__reset+0xfb0f8040>
81118684:	8880004c 	andi	r2,r17,1
81118688:	10000b1e 	bne	r2,zero,811186b8 <__svfscanf_r+0xa54>
8111868c:	8c40008c 	andi	r17,r17,2
81118690:	88000926 	beq	r17,zero,811186b8 <__svfscanf_r+0xa54>
81118694:	da009c17 	ldw	r8,624(sp)
81118698:	9007d7fa 	srai	r3,r18,31
8111869c:	dd009d17 	ldw	r20,628(sp)
811186a0:	40800017 	ldw	r2,0(r8)
811186a4:	42000104 	addi	r8,r8,4
811186a8:	da009c15 	stw	r8,624(sp)
811186ac:	14800015 	stw	r18,0(r2)
811186b0:	10c00115 	stw	r3,4(r2)
811186b4:	003da806 	br	81117d58 <__reset+0xfb0f7d58>
811186b8:	da009c17 	ldw	r8,624(sp)
811186bc:	dd009d17 	ldw	r20,628(sp)
811186c0:	40800017 	ldw	r2,0(r8)
811186c4:	42000104 	addi	r8,r8,4
811186c8:	da009c15 	stw	r8,624(sp)
811186cc:	14800015 	stw	r18,0(r2)
811186d0:	003da106 	br	81117d58 <__reset+0xfb0f7d58>
811186d4:	e00b883a 	mov	r5,fp
811186d8:	b009883a 	mov	r4,r22
811186dc:	1112f880 	call	81112f88 <__srefill_r>
811186e0:	103f9e1e 	bne	r2,zero,8111855c <__reset+0xfb0f855c>
811186e4:	b9c00017 	ldw	r7,0(r23)
811186e8:	05000104 	movi	r20,4
811186ec:	003e6306 	br	8111807c <__reset+0xfb0f807c>
811186f0:	e00b883a 	mov	r5,fp
811186f4:	b009883a 	mov	r4,r22
811186f8:	1112f880 	call	81112f88 <__srefill_r>
811186fc:	103f971e 	bne	r2,zero,8111855c <__reset+0xfb0f855c>
81118700:	b9c00017 	ldw	r7,0(r23)
81118704:	003e5706 	br	81118064 <__reset+0xfb0f8064>
81118708:	e00b883a 	mov	r5,fp
8111870c:	b009883a 	mov	r4,r22
81118710:	1112f880 	call	81112f88 <__srefill_r>
81118714:	103f911e 	bne	r2,zero,8111855c <__reset+0xfb0f855c>
81118718:	b9c00017 	ldw	r7,0(r23)
8111871c:	05000084 	movi	r20,2
81118720:	003e5606 	br	8111807c <__reset+0xfb0f807c>
81118724:	e00b883a 	mov	r5,fp
81118728:	b009883a 	mov	r4,r22
8111872c:	1112f880 	call	81112f88 <__srefill_r>
81118730:	103ef726 	beq	r2,zero,81118310 <__reset+0xfb0f8310>
81118734:	003f8906 	br	8111855c <__reset+0xfb0f855c>
81118738:	e00b883a 	mov	r5,fp
8111873c:	b009883a 	mov	r4,r22
81118740:	1112f880 	call	81112f88 <__srefill_r>
81118744:	103f851e 	bne	r2,zero,8111855c <__reset+0xfb0f855c>
81118748:	b9c00017 	ldw	r7,0(r23)
8111874c:	003f0f06 	br	8111838c <__reset+0xfb0f838c>
81118750:	014000c4 	movi	r5,3
81118754:	a1414a26 	beq	r20,r5,81118c80 <__svfscanf_r+0x101c>
81118758:	01000104 	movi	r4,4
8111875c:	a101f11e 	bne	r20,r4,81118f24 <__svfscanf_r+0x12c0>
81118760:	b009883a 	mov	r4,r22
81118764:	111c52c0 	call	8111c52c <_localeconv_r>
81118768:	10800017 	ldw	r2,0(r2)
8111876c:	98ffffc4 	addi	r3,r19,-1
81118770:	d880a315 	stw	r2,652(sp)
81118774:	00805704 	movi	r2,348
81118778:	10c21e2e 	bgeu	r2,r3,81118ff4 <__svfscanf_r+0x1390>
8111877c:	9cffa8c4 	addi	r19,r19,-349
81118780:	dcc0a215 	stw	r19,648(sp)
81118784:	04c05744 	movi	r19,349
81118788:	8d01e014 	ori	r20,r17,1920
8111878c:	0023883a 	mov	r17,zero
81118790:	dc000104 	addi	r16,sp,4
81118794:	8805883a 	mov	r2,r17
81118798:	0019883a 	mov	r12,zero
8111879c:	8023883a 	mov	r17,r16
811187a0:	b007883a 	mov	r3,r22
811187a4:	9821883a 	mov	r16,r19
811187a8:	002b883a 	mov	r21,zero
811187ac:	d800a515 	stw	zero,660(sp)
811187b0:	d800a415 	stw	zero,656(sp)
811187b4:	d8009f15 	stw	zero,636(sp)
811187b8:	01c01384 	movi	r7,78
811187bc:	602d883a 	mov	r22,r12
811187c0:	1027883a 	mov	r19,r2
811187c4:	e1000017 	ldw	r4,0(fp)
811187c8:	21400003 	ldbu	r5,0(r4)
811187cc:	28bff544 	addi	r2,r5,-43
811187d0:	10803fcc 	andi	r2,r2,255
811187d4:	38810e36 	bltu	r7,r2,81118c10 <__svfscanf_r+0xfac>
811187d8:	100490ba 	slli	r2,r2,2
811187dc:	01a044b4 	movhi	r6,33042
811187e0:	31a1fc04 	addi	r6,r6,-30736
811187e4:	1185883a 	add	r2,r2,r6
811187e8:	10800017 	ldw	r2,0(r2)
811187ec:	1000683a 	jmp	r2
811187f0:	81118ae8 	cmpgeui	r4,r16,17963
811187f4:	81118c10 	cmplti	r4,r16,17968
811187f8:	81118ae8 	cmpgeui	r4,r16,17963
811187fc:	81118c10 	cmplti	r4,r16,17968
81118800:	81118c10 	cmplti	r4,r16,17968
81118804:	81118abc 	xorhi	r4,r16,17962
81118808:	8111892c 	andhi	r4,r16,17956
8111880c:	8111892c 	andhi	r4,r16,17956
81118810:	8111892c 	andhi	r4,r16,17956
81118814:	8111892c 	andhi	r4,r16,17956
81118818:	8111892c 	andhi	r4,r16,17956
8111881c:	8111892c 	andhi	r4,r16,17956
81118820:	8111892c 	andhi	r4,r16,17956
81118824:	8111892c 	andhi	r4,r16,17956
81118828:	8111892c 	andhi	r4,r16,17956
8111882c:	81118c10 	cmplti	r4,r16,17968
81118830:	81118c10 	cmplti	r4,r16,17968
81118834:	81118c10 	cmplti	r4,r16,17968
81118838:	81118c10 	cmplti	r4,r16,17968
8111883c:	81118c10 	cmplti	r4,r16,17968
81118840:	81118c10 	cmplti	r4,r16,17968
81118844:	81118c10 	cmplti	r4,r16,17968
81118848:	81118c00 	call	881118c0 <__reset+0x20f18c0>
8111884c:	81118c10 	cmplti	r4,r16,17968
81118850:	81118c10 	cmplti	r4,r16,17968
81118854:	81118c10 	cmplti	r4,r16,17968
81118858:	81118bbc 	xorhi	r4,r16,17966
8111885c:	81118ba0 	cmpeqi	r4,r16,17966
81118860:	81118c10 	cmplti	r4,r16,17968
81118864:	81118c10 	cmplti	r4,r16,17968
81118868:	81118b6c 	andhi	r4,r16,17965
8111886c:	81118c10 	cmplti	r4,r16,17968
81118870:	81118c10 	cmplti	r4,r16,17968
81118874:	81118c10 	cmplti	r4,r16,17968
81118878:	81118c10 	cmplti	r4,r16,17968
8111887c:	81118b34 	orhi	r4,r16,17964
81118880:	81118c10 	cmplti	r4,r16,17968
81118884:	81118c10 	cmplti	r4,r16,17968
81118888:	81118c10 	cmplti	r4,r16,17968
8111888c:	81118c10 	cmplti	r4,r16,17968
81118890:	81118c10 	cmplti	r4,r16,17968
81118894:	81118b18 	cmpnei	r4,r16,17964
81118898:	81118c10 	cmplti	r4,r16,17968
8111889c:	81118c10 	cmplti	r4,r16,17968
811188a0:	81118c10 	cmplti	r4,r16,17968
811188a4:	81118c10 	cmplti	r4,r16,17968
811188a8:	81118afc 	xorhi	r4,r16,17963
811188ac:	81118c10 	cmplti	r4,r16,17968
811188b0:	81118c10 	cmplti	r4,r16,17968
811188b4:	81118c10 	cmplti	r4,r16,17968
811188b8:	81118c10 	cmplti	r4,r16,17968
811188bc:	81118c10 	cmplti	r4,r16,17968
811188c0:	81118c10 	cmplti	r4,r16,17968
811188c4:	81118c10 	cmplti	r4,r16,17968
811188c8:	81118c00 	call	881118c0 <__reset+0x20f18c0>
811188cc:	81118c10 	cmplti	r4,r16,17968
811188d0:	81118c10 	cmplti	r4,r16,17968
811188d4:	81118c10 	cmplti	r4,r16,17968
811188d8:	81118bbc 	xorhi	r4,r16,17966
811188dc:	81118ba0 	cmpeqi	r4,r16,17966
811188e0:	81118c10 	cmplti	r4,r16,17968
811188e4:	81118c10 	cmplti	r4,r16,17968
811188e8:	81118b6c 	andhi	r4,r16,17965
811188ec:	81118c10 	cmplti	r4,r16,17968
811188f0:	81118c10 	cmplti	r4,r16,17968
811188f4:	81118c10 	cmplti	r4,r16,17968
811188f8:	81118c10 	cmplti	r4,r16,17968
811188fc:	81118b34 	orhi	r4,r16,17964
81118900:	81118c10 	cmplti	r4,r16,17968
81118904:	81118c10 	cmplti	r4,r16,17968
81118908:	81118c10 	cmplti	r4,r16,17968
8111890c:	81118c10 	cmplti	r4,r16,17968
81118910:	81118c10 	cmplti	r4,r16,17968
81118914:	81118b18 	cmpnei	r4,r16,17964
81118918:	81118c10 	cmplti	r4,r16,17968
8111891c:	81118c10 	cmplti	r4,r16,17968
81118920:	81118c10 	cmplti	r4,r16,17968
81118924:	81118c10 	cmplti	r4,r16,17968
81118928:	81118afc 	xorhi	r4,r16,17963
8111892c:	a8803fcc 	andi	r2,r21,255
81118930:	1080201c 	xori	r2,r2,128
81118934:	10bfe004 	addi	r2,r2,-128
81118938:	b085883a 	add	r2,r22,r2
8111893c:	10000d1e 	bne	r2,zero,81118974 <__svfscanf_r+0xd10>
81118940:	00bf9fc4 	movi	r2,-385
81118944:	a0a8703a 	and	r20,r20,r2
81118948:	89400005 	stb	r5,0(r17)
8111894c:	8c400044 	addi	r17,r17,1
81118950:	e0800117 	ldw	r2,4(fp)
81118954:	843fffc4 	addi	r16,r16,-1
81118958:	94800044 	addi	r18,r18,1
8111895c:	10bfffc4 	addi	r2,r2,-1
81118960:	e0800115 	stw	r2,4(fp)
81118964:	0080b40e 	bge	zero,r2,81118c38 <__svfscanf_r+0xfd4>
81118968:	21000044 	addi	r4,r4,1
8111896c:	e1000015 	stw	r4,0(fp)
81118970:	803f941e 	bne	r16,zero,811187c4 <__reset+0xfb0f87c4>
81118974:	8821883a 	mov	r16,r17
81118978:	b019883a 	mov	r12,r22
8111897c:	9823883a 	mov	r17,r19
81118980:	182d883a 	mov	r22,r3
81118984:	9801961e 	bne	r19,zero,81118fe0 <__svfscanf_r+0x137c>
81118988:	633fffc4 	addi	r12,r12,-1
8111898c:	00800044 	movi	r2,1
81118990:	1302882e 	bgeu	r2,r12,811193b4 <__svfscanf_r+0x1750>
81118994:	a8803fcc 	andi	r2,r21,255
81118998:	1080201c 	xori	r2,r2,128
8111899c:	10bfe004 	addi	r2,r2,-128
811189a0:	113fffc4 	addi	r4,r2,-1
811189a4:	01400184 	movi	r5,6
811189a8:	29001136 	bltu	r5,r4,811189f0 <__svfscanf_r+0xd8c>
811189ac:	01000084 	movi	r4,2
811189b0:	2082900e 	bge	r4,r2,811193f4 <__svfscanf_r+0x1790>
811189b4:	00c000c4 	movi	r3,3
811189b8:	10c00d26 	beq	r2,r3,811189f0 <__svfscanf_r+0xd8c>
811189bc:	9425c83a 	sub	r18,r18,r16
811189c0:	1827883a 	mov	r19,r3
811189c4:	843fffc4 	addi	r16,r16,-1
811189c8:	81400007 	ldb	r5,0(r16)
811189cc:	e00d883a 	mov	r6,fp
811189d0:	b009883a 	mov	r4,r22
811189d4:	112175c0 	call	8112175c <_ungetc_r>
811189d8:	a8bfffc4 	addi	r2,r21,-1
811189dc:	10c03fcc 	andi	r3,r2,255
811189e0:	8493883a 	add	r9,r16,r18
811189e4:	102b883a 	mov	r21,r2
811189e8:	98fff636 	bltu	r19,r3,811189c4 <__reset+0xfb0f89c4>
811189ec:	4825883a 	mov	r18,r9
811189f0:	a080400c 	andi	r2,r20,256
811189f4:	10001426 	beq	r2,zero,81118a48 <__svfscanf_r+0xde4>
811189f8:	a081000c 	andi	r2,r20,1024
811189fc:	1002571e 	bne	r2,zero,8111935c <__svfscanf_r+0x16f8>
81118a00:	817fffc7 	ldb	r5,-1(r16)
81118a04:	00801944 	movi	r2,101
81118a08:	84ffffc4 	addi	r19,r16,-1
81118a0c:	957fffc4 	addi	r21,r18,-1
81118a10:	28800826 	beq	r5,r2,81118a34 <__svfscanf_r+0xdd0>
81118a14:	00801144 	movi	r2,69
81118a18:	28800626 	beq	r5,r2,81118a34 <__svfscanf_r+0xdd0>
81118a1c:	e00d883a 	mov	r6,fp
81118a20:	b009883a 	mov	r4,r22
81118a24:	112175c0 	call	8112175c <_ungetc_r>
81118a28:	817fff87 	ldb	r5,-2(r16)
81118a2c:	84ffff84 	addi	r19,r16,-2
81118a30:	957fff84 	addi	r21,r18,-2
81118a34:	e00d883a 	mov	r6,fp
81118a38:	b009883a 	mov	r4,r22
81118a3c:	112175c0 	call	8112175c <_ungetc_r>
81118a40:	a825883a 	mov	r18,r21
81118a44:	9821883a 	mov	r16,r19
81118a48:	a080040c 	andi	r2,r20,16
81118a4c:	103e891e 	bne	r2,zero,81118474 <__reset+0xfb0f8474>
81118a50:	80000005 	stb	zero,0(r16)
81118a54:	a081800c 	andi	r2,r20,1536
81118a58:	01010004 	movi	r4,1024
81118a5c:	1101dd26 	beq	r2,r4,811191d4 <__svfscanf_r+0x1570>
81118a60:	da00a417 	ldw	r8,656(sp)
81118a64:	4001e71e 	bne	r8,zero,81119204 <__svfscanf_r+0x15a0>
81118a68:	000d883a 	mov	r6,zero
81118a6c:	d9400104 	addi	r5,sp,4
81118a70:	b009883a 	mov	r4,r22
81118a74:	111e30c0 	call	8111e30c <_strtod_r>
81118a78:	1021883a 	mov	r16,r2
81118a7c:	a080004c 	andi	r2,r20,1
81118a80:	1000021e 	bne	r2,zero,81118a8c <__svfscanf_r+0xe28>
81118a84:	a2c0008c 	andi	r11,r20,2
81118a88:	5801e826 	beq	r11,zero,8111922c <__svfscanf_r+0x15c8>
81118a8c:	da009c17 	ldw	r8,624(sp)
81118a90:	40800017 	ldw	r2,0(r8)
81118a94:	42000104 	addi	r8,r8,4
81118a98:	da009c15 	stw	r8,624(sp)
81118a9c:	14000015 	stw	r16,0(r2)
81118aa0:	10c00115 	stw	r3,4(r2)
81118aa4:	da00a017 	ldw	r8,640(sp)
81118aa8:	dd009d17 	ldw	r20,628(sp)
81118aac:	42000044 	addi	r8,r8,1
81118ab0:	da00a015 	stw	r8,640(sp)
81118ab4:	a00d883a 	mov	r6,r20
81118ab8:	003ca806 	br	81117d5c <__reset+0xfb0f7d5c>
81118abc:	a080400c 	andi	r2,r20,256
81118ac0:	103f9a26 	beq	r2,zero,8111892c <__reset+0xfb0f892c>
81118ac4:	da00a217 	ldw	r8,648(sp)
81118ac8:	00bfdfc4 	movi	r2,-129
81118acc:	a0a8703a 	and	r20,r20,r2
81118ad0:	9cc00044 	addi	r19,r19,1
81118ad4:	403f9e26 	beq	r8,zero,81118950 <__reset+0xfb0f8950>
81118ad8:	423fffc4 	addi	r8,r8,-1
81118adc:	da00a215 	stw	r8,648(sp)
81118ae0:	84000044 	addi	r16,r16,1
81118ae4:	003f9a06 	br	81118950 <__reset+0xfb0f8950>
81118ae8:	a080200c 	andi	r2,r20,128
81118aec:	103fa126 	beq	r2,zero,81118974 <__reset+0xfb0f8974>
81118af0:	00bfdfc4 	movi	r2,-129
81118af4:	a0a8703a 	and	r20,r20,r2
81118af8:	003f9306 	br	81118948 <__reset+0xfb0f8948>
81118afc:	a8803fcc 	andi	r2,r21,255
81118b00:	1080201c 	xori	r2,r2,128
81118b04:	10bfe004 	addi	r2,r2,-128
81118b08:	020001c4 	movi	r8,7
81118b0c:	123f991e 	bne	r2,r8,81118974 <__reset+0xfb0f8974>
81118b10:	05400204 	movi	r21,8
81118b14:	003f8c06 	br	81118948 <__reset+0xfb0f8948>
81118b18:	a8803fcc 	andi	r2,r21,255
81118b1c:	1080201c 	xori	r2,r2,128
81118b20:	10bfe004 	addi	r2,r2,-128
81118b24:	01800184 	movi	r6,6
81118b28:	11bf921e 	bne	r2,r6,81118974 <__reset+0xfb0f8974>
81118b2c:	054001c4 	movi	r21,7
81118b30:	003f8506 	br	81118948 <__reset+0xfb0f8948>
81118b34:	b000491e 	bne	r22,zero,81118c5c <__svfscanf_r+0xff8>
81118b38:	9800031e 	bne	r19,zero,81118b48 <__svfscanf_r+0xee4>
81118b3c:	a081c00c 	andi	r2,r20,1792
81118b40:	0181c004 	movi	r6,1792
81118b44:	11819f26 	beq	r2,r6,811191c4 <__svfscanf_r+0x1560>
81118b48:	a8803fcc 	andi	r2,r21,255
81118b4c:	1080201c 	xori	r2,r2,128
81118b50:	10bfe004 	addi	r2,r2,-128
81118b54:	01800044 	movi	r6,1
81118b58:	11800226 	beq	r2,r6,81118b64 <__svfscanf_r+0xf00>
81118b5c:	01800104 	movi	r6,4
81118b60:	11bf841e 	bne	r2,r6,81118974 <__reset+0xfb0f8974>
81118b64:	ad400044 	addi	r21,r21,1
81118b68:	003f7706 	br	81118948 <__reset+0xfb0f8948>
81118b6c:	a8803fcc 	andi	r2,r21,255
81118b70:	1080201c 	xori	r2,r2,128
81118b74:	10bfe004 	addi	r2,r2,-128
81118b78:	10003c1e 	bne	r2,zero,81118c6c <__svfscanf_r+0x1008>
81118b7c:	9801141e 	bne	r19,zero,81118fd0 <__svfscanf_r+0x136c>
81118b80:	a081c00c 	andi	r2,r20,1792
81118b84:	0181c004 	movi	r6,1792
81118b88:	11818226 	beq	r2,r6,81119194 <__svfscanf_r+0x1530>
81118b8c:	8821883a 	mov	r16,r17
81118b90:	b019883a 	mov	r12,r22
81118b94:	9823883a 	mov	r17,r19
81118b98:	182d883a 	mov	r22,r3
81118b9c:	003f7a06 	br	81118988 <__reset+0xfb0f8988>
81118ba0:	a8803fcc 	andi	r2,r21,255
81118ba4:	1080201c 	xori	r2,r2,128
81118ba8:	10bfe004 	addi	r2,r2,-128
81118bac:	01800084 	movi	r6,2
81118bb0:	11bf701e 	bne	r2,r6,81118974 <__reset+0xfb0f8974>
81118bb4:	054000c4 	movi	r21,3
81118bb8:	003f6306 	br	81118948 <__reset+0xfb0f8948>
81118bbc:	a081400c 	andi	r2,r20,1280
81118bc0:	01810004 	movi	r6,1024
81118bc4:	11800326 	beq	r2,r6,81118bd4 <__svfscanf_r+0xf70>
81118bc8:	a184703a 	and	r2,r20,r6
81118bcc:	103f6926 	beq	r2,zero,81118974 <__reset+0xfb0f8974>
81118bd0:	983fee26 	beq	r19,zero,81118b8c <__reset+0xfb0f8b8c>
81118bd4:	a080800c 	andi	r2,r20,512
81118bd8:	1000041e 	bne	r2,zero,81118bec <__svfscanf_r+0xf88>
81118bdc:	da009f17 	ldw	r8,636(sp)
81118be0:	dc40a515 	stw	r17,660(sp)
81118be4:	9a27c83a 	sub	r19,r19,r8
81118be8:	dcc0a415 	stw	r19,656(sp)
81118bec:	00be1fc4 	movi	r2,-1921
81118bf0:	a0a8703a 	and	r20,r20,r2
81118bf4:	a5006014 	ori	r20,r20,384
81118bf8:	0027883a 	mov	r19,zero
81118bfc:	003f5206 	br	81118948 <__reset+0xfb0f8948>
81118c00:	00800044 	movi	r2,1
81118c04:	b0bf5b1e 	bne	r22,r2,81118974 <__reset+0xfb0f8974>
81118c08:	05800084 	movi	r22,2
81118c0c:	003f4e06 	br	81118948 <__reset+0xfb0f8948>
81118c10:	d980a317 	ldw	r6,652(sp)
81118c14:	30800003 	ldbu	r2,0(r6)
81118c18:	29803fcc 	andi	r6,r5,255
81118c1c:	30bf551e 	bne	r6,r2,81118974 <__reset+0xfb0f8974>
81118c20:	a080800c 	andi	r2,r20,512
81118c24:	103f5326 	beq	r2,zero,81118974 <__reset+0xfb0f8974>
81118c28:	023f5fc4 	movi	r8,-641
81118c2c:	a228703a 	and	r20,r20,r8
81118c30:	dcc09f15 	stw	r19,636(sp)
81118c34:	003f4406 	br	81118948 <__reset+0xfb0f8948>
81118c38:	1809883a 	mov	r4,r3
81118c3c:	e00b883a 	mov	r5,fp
81118c40:	d8c0a615 	stw	r3,664(sp)
81118c44:	d9c0aa15 	stw	r7,680(sp)
81118c48:	1112f880 	call	81112f88 <__srefill_r>
81118c4c:	d8c0a617 	ldw	r3,664(sp)
81118c50:	d9c0aa17 	ldw	r7,680(sp)
81118c54:	103f4626 	beq	r2,zero,81118970 <__reset+0xfb0f8970>
81118c58:	003f4606 	br	81118974 <__reset+0xfb0f8974>
81118c5c:	00800084 	movi	r2,2
81118c60:	b0bfb91e 	bne	r22,r2,81118b48 <__reset+0xfb0f8b48>
81118c64:	058000c4 	movi	r22,3
81118c68:	003f3706 	br	81118948 <__reset+0xfb0f8948>
81118c6c:	018000c4 	movi	r6,3
81118c70:	11bfbc26 	beq	r2,r6,81118b64 <__reset+0xfb0f8b64>
81118c74:	01800144 	movi	r6,5
81118c78:	11bfba26 	beq	r2,r6,81118b64 <__reset+0xfb0f8b64>
81118c7c:	003f3d06 	br	81118974 <__reset+0xfb0f8974>
81118c80:	98bfffc4 	addi	r2,r19,-1
81118c84:	01405704 	movi	r5,348
81118c88:	2880d82e 	bgeu	r5,r2,81118fec <__svfscanf_r+0x1388>
81118c8c:	99ffa8c4 	addi	r7,r19,-349
81118c90:	04c05744 	movi	r19,349
81118c94:	8c436014 	ori	r17,r17,3456
81118c98:	9013883a 	mov	r9,r18
81118c9c:	8825883a 	mov	r18,r17
81118ca0:	dc409e17 	ldw	r17,632(sp)
81118ca4:	0029883a 	mov	r20,zero
81118ca8:	dc000104 	addi	r16,sp,4
81118cac:	05401344 	movi	r21,77
81118cb0:	02c08004 	movi	r11,512
81118cb4:	01bf7fc4 	movi	r6,-513
81118cb8:	023fdfc4 	movi	r8,-129
81118cbc:	20bff544 	addi	r2,r4,-43
81118cc0:	10803fcc 	andi	r2,r2,255
81118cc4:	a8807236 	bltu	r21,r2,81118e90 <__svfscanf_r+0x122c>
81118cc8:	100490ba 	slli	r2,r2,2
81118ccc:	016044b4 	movhi	r5,33042
81118cd0:	29633804 	addi	r5,r5,-29472
81118cd4:	1145883a 	add	r2,r2,r5
81118cd8:	10800017 	ldw	r2,0(r2)
81118cdc:	1000683a 	jmp	r2
81118ce0:	81118f14 	ori	r4,r16,17980
81118ce4:	81118e90 	cmplti	r4,r16,17978
81118ce8:	81118f14 	ori	r4,r16,17980
81118cec:	81118e90 	cmplti	r4,r16,17978
81118cf0:	81118e90 	cmplti	r4,r16,17978
81118cf4:	81118eec 	andhi	r4,r16,17979
81118cf8:	81118ecc 	andi	r4,r16,17979
81118cfc:	81118ecc 	andi	r4,r16,17979
81118d00:	81118ecc 	andi	r4,r16,17979
81118d04:	81118ecc 	andi	r4,r16,17979
81118d08:	81118ecc 	andi	r4,r16,17979
81118d0c:	81118ecc 	andi	r4,r16,17979
81118d10:	81118ecc 	andi	r4,r16,17979
81118d14:	81118e74 	orhi	r4,r16,17977
81118d18:	81118e74 	orhi	r4,r16,17977
81118d1c:	81118e90 	cmplti	r4,r16,17978
81118d20:	81118e90 	cmplti	r4,r16,17978
81118d24:	81118e90 	cmplti	r4,r16,17978
81118d28:	81118e90 	cmplti	r4,r16,17978
81118d2c:	81118e90 	cmplti	r4,r16,17978
81118d30:	81118e90 	cmplti	r4,r16,17978
81118d34:	81118e90 	cmplti	r4,r16,17978
81118d38:	81118e60 	cmpeqi	r4,r16,17977
81118d3c:	81118e60 	cmpeqi	r4,r16,17977
81118d40:	81118e60 	cmpeqi	r4,r16,17977
81118d44:	81118e60 	cmpeqi	r4,r16,17977
81118d48:	81118e60 	cmpeqi	r4,r16,17977
81118d4c:	81118e60 	cmpeqi	r4,r16,17977
81118d50:	81118e90 	cmplti	r4,r16,17978
81118d54:	81118e90 	cmplti	r4,r16,17978
81118d58:	81118e90 	cmplti	r4,r16,17978
81118d5c:	81118e90 	cmplti	r4,r16,17978
81118d60:	81118e90 	cmplti	r4,r16,17978
81118d64:	81118e90 	cmplti	r4,r16,17978
81118d68:	81118e90 	cmplti	r4,r16,17978
81118d6c:	81118e90 	cmplti	r4,r16,17978
81118d70:	81118e90 	cmplti	r4,r16,17978
81118d74:	81118e90 	cmplti	r4,r16,17978
81118d78:	81118e90 	cmplti	r4,r16,17978
81118d7c:	81118e90 	cmplti	r4,r16,17978
81118d80:	81118e90 	cmplti	r4,r16,17978
81118d84:	81118e90 	cmplti	r4,r16,17978
81118d88:	81118e90 	cmplti	r4,r16,17978
81118d8c:	81118e90 	cmplti	r4,r16,17978
81118d90:	81118e90 	cmplti	r4,r16,17978
81118d94:	81118e18 	cmpnei	r4,r16,17976
81118d98:	81118e90 	cmplti	r4,r16,17978
81118d9c:	81118e90 	cmplti	r4,r16,17978
81118da0:	81118e90 	cmplti	r4,r16,17978
81118da4:	81118e90 	cmplti	r4,r16,17978
81118da8:	81118e90 	cmplti	r4,r16,17978
81118dac:	81118e90 	cmplti	r4,r16,17978
81118db0:	81118e90 	cmplti	r4,r16,17978
81118db4:	81118e90 	cmplti	r4,r16,17978
81118db8:	81118e60 	cmpeqi	r4,r16,17977
81118dbc:	81118e60 	cmpeqi	r4,r16,17977
81118dc0:	81118e60 	cmpeqi	r4,r16,17977
81118dc4:	81118e60 	cmpeqi	r4,r16,17977
81118dc8:	81118e60 	cmpeqi	r4,r16,17977
81118dcc:	81118e60 	cmpeqi	r4,r16,17977
81118dd0:	81118e90 	cmplti	r4,r16,17978
81118dd4:	81118e90 	cmplti	r4,r16,17978
81118dd8:	81118e90 	cmplti	r4,r16,17978
81118ddc:	81118e90 	cmplti	r4,r16,17978
81118de0:	81118e90 	cmplti	r4,r16,17978
81118de4:	81118e90 	cmplti	r4,r16,17978
81118de8:	81118e90 	cmplti	r4,r16,17978
81118dec:	81118e90 	cmplti	r4,r16,17978
81118df0:	81118e90 	cmplti	r4,r16,17978
81118df4:	81118e90 	cmplti	r4,r16,17978
81118df8:	81118e90 	cmplti	r4,r16,17978
81118dfc:	81118e90 	cmplti	r4,r16,17978
81118e00:	81118e90 	cmplti	r4,r16,17978
81118e04:	81118e90 	cmplti	r4,r16,17978
81118e08:	81118e90 	cmplti	r4,r16,17978
81118e0c:	81118e90 	cmplti	r4,r16,17978
81118e10:	81118e90 	cmplti	r4,r16,17978
81118e14:	81118e18 	cmpnei	r4,r16,17976
81118e18:	9081800c 	andi	r2,r18,1536
81118e1c:	12c01c1e 	bne	r2,r11,81118e90 <__svfscanf_r+0x122c>
81118e20:	91a4703a 	and	r18,r18,r6
81118e24:	94814014 	ori	r18,r18,1280
81118e28:	04400404 	movi	r17,16
81118e2c:	81000005 	stb	r4,0(r16)
81118e30:	84000044 	addi	r16,r16,1
81118e34:	e0800117 	ldw	r2,4(fp)
81118e38:	10bfffc4 	addi	r2,r2,-1
81118e3c:	e0800115 	stw	r2,4(fp)
81118e40:	0080540e 	bge	zero,r2,81118f94 <__svfscanf_r+0x1330>
81118e44:	18c00044 	addi	r3,r3,1
81118e48:	e0c00015 	stw	r3,0(fp)
81118e4c:	9cffffc4 	addi	r19,r19,-1
81118e50:	98000f26 	beq	r19,zero,81118e90 <__svfscanf_r+0x122c>
81118e54:	e0c00017 	ldw	r3,0(fp)
81118e58:	19000003 	ldbu	r4,0(r3)
81118e5c:	003f9706 	br	81118cbc <__reset+0xfb0f8cbc>
81118e60:	00800284 	movi	r2,10
81118e64:	14400a0e 	bge	r2,r17,81118e90 <__svfscanf_r+0x122c>
81118e68:	00bd1fc4 	movi	r2,-2945
81118e6c:	90a4703a 	and	r18,r18,r2
81118e70:	003fee06 	br	81118e2c <__reset+0xfb0f8e2c>
81118e74:	01604534 	movhi	r5,33044
81118e78:	8c63883a 	add	r17,r17,r17
81118e7c:	2979e384 	addi	r5,r5,-6258
81118e80:	2c45883a 	add	r2,r5,r17
81118e84:	1440000f 	ldh	r17,0(r2)
81118e88:	00800204 	movi	r2,8
81118e8c:	147ff616 	blt	r2,r17,81118e68 <__reset+0xfb0f8e68>
81118e90:	dc409e15 	stw	r17,632(sp)
81118e94:	9023883a 	mov	r17,r18
81118e98:	8880400c 	andi	r2,r17,256
81118e9c:	4825883a 	mov	r18,r9
81118ea0:	10000426 	beq	r2,zero,81118eb4 <__svfscanf_r+0x1250>
81118ea4:	d9800104 	addi	r6,sp,4
81118ea8:	3400be36 	bltu	r6,r16,811191a4 <__svfscanf_r+0x1540>
81118eac:	da000104 	addi	r8,sp,4
81118eb0:	443bae26 	beq	r8,r16,81117d6c <__reset+0xfb0f7d6c>
81118eb4:	8880040c 	andi	r2,r17,16
81118eb8:	10009326 	beq	r2,zero,81119108 <__svfscanf_r+0x14a4>
81118ebc:	d8800104 	addi	r2,sp,4
81118ec0:	80a1c83a 	sub	r16,r16,r2
81118ec4:	8521883a 	add	r16,r16,r20
81118ec8:	003d0606 	br	811182e4 <__reset+0xfb0f82e4>
81118ecc:	01604534 	movhi	r5,33044
81118ed0:	8c63883a 	add	r17,r17,r17
81118ed4:	2979e384 	addi	r5,r5,-6258
81118ed8:	2c45883a 	add	r2,r5,r17
81118edc:	1440000f 	ldh	r17,0(r2)
81118ee0:	00bd1fc4 	movi	r2,-2945
81118ee4:	90a4703a 	and	r18,r18,r2
81118ee8:	003fd006 	br	81118e2c <__reset+0xfb0f8e2c>
81118eec:	9082000c 	andi	r2,r18,2048
81118ef0:	103fce26 	beq	r2,zero,81118e2c <__reset+0xfb0f8e2c>
81118ef4:	8800021e 	bne	r17,zero,81118f00 <__svfscanf_r+0x129c>
81118ef8:	94808014 	ori	r18,r18,512
81118efc:	04400204 	movi	r17,8
81118f00:	9081000c 	andi	r2,r18,1024
81118f04:	10009426 	beq	r2,zero,81119158 <__svfscanf_r+0x14f4>
81118f08:	00be9fc4 	movi	r2,-1409
81118f0c:	90a4703a 	and	r18,r18,r2
81118f10:	003fc606 	br	81118e2c <__reset+0xfb0f8e2c>
81118f14:	9080200c 	andi	r2,r18,128
81118f18:	103fdd26 	beq	r2,zero,81118e90 <__reset+0xfb0f8e90>
81118f1c:	9224703a 	and	r18,r18,r8
81118f20:	003fc206 	br	81118e2c <__reset+0xfb0f8e2c>
81118f24:	9800011e 	bne	r19,zero,81118f2c <__svfscanf_r+0x12c8>
81118f28:	04ffffc4 	movi	r19,-1
81118f2c:	8900004c 	andi	r4,r17,1
81118f30:	20005b1e 	bne	r4,zero,811190a0 <__svfscanf_r+0x143c>
81118f34:	8c40040c 	andi	r17,r17,16
81118f38:	88003026 	beq	r17,zero,81118ffc <__svfscanf_r+0x1398>
81118f3c:	0021883a 	mov	r16,zero
81118f40:	00000306 	br	81118f50 <__svfscanf_r+0x12ec>
81118f44:	18800003 	ldbu	r2,0(r3)
81118f48:	3885883a 	add	r2,r7,r2
81118f4c:	10800043 	ldbu	r2,1(r2)
81118f50:	1080020c 	andi	r2,r2,8
81118f54:	103ce31e 	bne	r2,zero,811182e4 <__reset+0xfb0f82e4>
81118f58:	e0800117 	ldw	r2,4(fp)
81118f5c:	18c00044 	addi	r3,r3,1
81118f60:	84000044 	addi	r16,r16,1
81118f64:	10bfffc4 	addi	r2,r2,-1
81118f68:	e0800115 	stw	r2,4(fp)
81118f6c:	e0c00015 	stw	r3,0(fp)
81118f70:	84fcdc26 	beq	r16,r19,811182e4 <__reset+0xfb0f82e4>
81118f74:	00bff316 	blt	zero,r2,81118f44 <__reset+0xfb0f8f44>
81118f78:	e00b883a 	mov	r5,fp
81118f7c:	b009883a 	mov	r4,r22
81118f80:	1112f880 	call	81112f88 <__srefill_r>
81118f84:	103cd71e 	bne	r2,zero,811182e4 <__reset+0xfb0f82e4>
81118f88:	b9c00017 	ldw	r7,0(r23)
81118f8c:	e0c00017 	ldw	r3,0(fp)
81118f90:	003fec06 	br	81118f44 <__reset+0xfb0f8f44>
81118f94:	e00b883a 	mov	r5,fp
81118f98:	b009883a 	mov	r4,r22
81118f9c:	d980a715 	stw	r6,668(sp)
81118fa0:	d9c0aa15 	stw	r7,680(sp)
81118fa4:	da00a815 	stw	r8,672(sp)
81118fa8:	da40a915 	stw	r9,676(sp)
81118fac:	dac0a615 	stw	r11,664(sp)
81118fb0:	1112f880 	call	81112f88 <__srefill_r>
81118fb4:	d980a717 	ldw	r6,668(sp)
81118fb8:	d9c0aa17 	ldw	r7,680(sp)
81118fbc:	da00a817 	ldw	r8,672(sp)
81118fc0:	da40a917 	ldw	r9,676(sp)
81118fc4:	dac0a617 	ldw	r11,664(sp)
81118fc8:	103fa026 	beq	r2,zero,81118e4c <__reset+0xfb0f8e4c>
81118fcc:	003fb006 	br	81118e90 <__reset+0xfb0f8e90>
81118fd0:	8821883a 	mov	r16,r17
81118fd4:	b019883a 	mov	r12,r22
81118fd8:	9823883a 	mov	r17,r19
81118fdc:	182d883a 	mov	r22,r3
81118fe0:	00bfbfc4 	movi	r2,-257
81118fe4:	a0a8703a 	and	r20,r20,r2
81118fe8:	003e6706 	br	81118988 <__reset+0xfb0f8988>
81118fec:	000f883a 	mov	r7,zero
81118ff0:	003f2806 	br	81118c94 <__reset+0xfb0f8c94>
81118ff4:	d800a215 	stw	zero,648(sp)
81118ff8:	003de306 	br	81118788 <__reset+0xfb0f8788>
81118ffc:	da009c17 	ldw	r8,624(sp)
81119000:	9abfffc4 	addi	r10,r19,-1
81119004:	44400017 	ldw	r17,0(r8)
81119008:	44000104 	addi	r16,r8,4
8111900c:	880b883a 	mov	r5,r17
81119010:	8aa9883a 	add	r20,r17,r10
81119014:	00000606 	br	81119030 <__svfscanf_r+0x13cc>
81119018:	e0c00017 	ldw	r3,0(fp)
8111901c:	b9000017 	ldw	r4,0(r23)
81119020:	a80b883a 	mov	r5,r21
81119024:	18800003 	ldbu	r2,0(r3)
81119028:	2085883a 	add	r2,r4,r2
8111902c:	10800043 	ldbu	r2,1(r2)
81119030:	1080020c 	andi	r2,r2,8
81119034:	1000551e 	bne	r2,zero,8111918c <__svfscanf_r+0x1528>
81119038:	e0800117 	ldw	r2,4(fp)
8111903c:	19000044 	addi	r4,r3,1
81119040:	e1000015 	stw	r4,0(fp)
81119044:	10bfffc4 	addi	r2,r2,-1
81119048:	e0800115 	stw	r2,4(fp)
8111904c:	18800003 	ldbu	r2,0(r3)
81119050:	2d400044 	addi	r21,r5,1
81119054:	a827883a 	mov	r19,r21
81119058:	28800005 	stb	r2,0(r5)
8111905c:	2d000626 	beq	r5,r20,81119078 <__svfscanf_r+0x1414>
81119060:	e0800117 	ldw	r2,4(fp)
81119064:	00bfec16 	blt	zero,r2,81119018 <__reset+0xfb0f9018>
81119068:	e00b883a 	mov	r5,fp
8111906c:	b009883a 	mov	r4,r22
81119070:	1112f880 	call	81112f88 <__srefill_r>
81119074:	103fe826 	beq	r2,zero,81119018 <__reset+0xfb0f9018>
81119078:	da00a017 	ldw	r8,640(sp)
8111907c:	dd009d17 	ldw	r20,628(sp)
81119080:	9c63c83a 	sub	r17,r19,r17
81119084:	42000044 	addi	r8,r8,1
81119088:	98000005 	stb	zero,0(r19)
8111908c:	9465883a 	add	r18,r18,r17
81119090:	da00a015 	stw	r8,640(sp)
81119094:	dc009c15 	stw	r16,624(sp)
81119098:	a00d883a 	mov	r6,r20
8111909c:	003b2f06 	br	81117d5c <__reset+0xfb0f7d5c>
811190a0:	dd409904 	addi	r21,sp,612
811190a4:	8c40040c 	andi	r17,r17,16
811190a8:	01800204 	movi	r6,8
811190ac:	000b883a 	mov	r5,zero
811190b0:	a809883a 	mov	r4,r21
811190b4:	1112c840 	call	81112c84 <memset>
811190b8:	8800401e 	bne	r17,zero,811191bc <__svfscanf_r+0x1558>
811190bc:	da009c17 	ldw	r8,624(sp)
811190c0:	45000017 	ldw	r20,0(r8)
811190c4:	42000104 	addi	r8,r8,4
811190c8:	da009c15 	stw	r8,624(sp)
811190cc:	000d883a 	mov	r6,zero
811190d0:	3021883a 	mov	r16,r6
811190d4:	dc409f15 	stw	r17,636(sp)
811190d8:	e0800017 	ldw	r2,0(fp)
811190dc:	b8c00017 	ldw	r3,0(r23)
811190e0:	10800003 	ldbu	r2,0(r2)
811190e4:	1885883a 	add	r2,r3,r2
811190e8:	10800043 	ldbu	r2,1(r2)
811190ec:	1080020c 	andi	r2,r2,8
811190f0:	1000011e 	bne	r2,zero,811190f8 <__svfscanf_r+0x1494>
811190f4:	9800701e 	bne	r19,zero,811192b8 <__svfscanf_r+0x1654>
811190f8:	dc409f17 	ldw	r17,636(sp)
811190fc:	883cdd1e 	bne	r17,zero,81118474 <__reset+0xfb0f8474>
81119100:	a0000015 	stw	zero,0(r20)
81119104:	003cd806 	br	81118468 <__reset+0xfb0f8468>
81119108:	d9c09e17 	ldw	r7,632(sp)
8111910c:	da00a117 	ldw	r8,644(sp)
81119110:	000d883a 	mov	r6,zero
81119114:	d9400104 	addi	r5,sp,4
81119118:	b009883a 	mov	r4,r22
8111911c:	80000005 	stb	zero,0(r16)
81119120:	403ee83a 	callr	r8
81119124:	88c0080c 	andi	r3,r17,32
81119128:	1800121e 	bne	r3,zero,81119174 <__svfscanf_r+0x1510>
8111912c:	88c0010c 	andi	r3,r17,4
81119130:	18004d26 	beq	r3,zero,81119268 <__svfscanf_r+0x1604>
81119134:	da009c17 	ldw	r8,624(sp)
81119138:	40c00017 	ldw	r3,0(r8)
8111913c:	42000104 	addi	r8,r8,4
81119140:	da009c15 	stw	r8,624(sp)
81119144:	1880000d 	sth	r2,0(r3)
81119148:	da00a017 	ldw	r8,640(sp)
8111914c:	42000044 	addi	r8,r8,1
81119150:	da00a015 	stw	r8,640(sp)
81119154:	003f5906 	br	81118ebc <__reset+0xfb0f8ebc>
81119158:	00bf1fc4 	movi	r2,-897
8111915c:	90a4703a 	and	r18,r18,r2
81119160:	38000226 	beq	r7,zero,8111916c <__svfscanf_r+0x1508>
81119164:	39ffffc4 	addi	r7,r7,-1
81119168:	9cc00044 	addi	r19,r19,1
8111916c:	a5000044 	addi	r20,r20,1
81119170:	003f3006 	br	81118e34 <__reset+0xfb0f8e34>
81119174:	da009c17 	ldw	r8,624(sp)
81119178:	40c00017 	ldw	r3,0(r8)
8111917c:	42000104 	addi	r8,r8,4
81119180:	da009c15 	stw	r8,624(sp)
81119184:	18800015 	stw	r2,0(r3)
81119188:	003fef06 	br	81119148 <__reset+0xfb0f9148>
8111918c:	2827883a 	mov	r19,r5
81119190:	003fb906 	br	81119078 <__reset+0xfb0f9078>
81119194:	01be1fc4 	movi	r6,-1921
81119198:	a1a8703a 	and	r20,r20,r6
8111919c:	05400044 	movi	r21,1
811191a0:	003de906 	br	81118948 <__reset+0xfb0f8948>
811191a4:	817fffc7 	ldb	r5,-1(r16)
811191a8:	e00d883a 	mov	r6,fp
811191ac:	b009883a 	mov	r4,r22
811191b0:	843fffc4 	addi	r16,r16,-1
811191b4:	112175c0 	call	8112175c <_ungetc_r>
811191b8:	003f3c06 	br	81118eac <__reset+0xfb0f8eac>
811191bc:	dd009b04 	addi	r20,sp,620
811191c0:	003fc206 	br	811190cc <__reset+0xfb0f90cc>
811191c4:	00be1fc4 	movi	r2,-1921
811191c8:	a0a8703a 	and	r20,r20,r2
811191cc:	05800044 	movi	r22,1
811191d0:	003ddd06 	br	81118948 <__reset+0xfb0f8948>
811191d4:	d8c09f17 	ldw	r3,636(sp)
811191d8:	88e3c83a 	sub	r17,r17,r3
811191dc:	044dc83a 	sub	r6,zero,r17
811191e0:	883e2126 	beq	r17,zero,81118a68 <__reset+0xfb0f8a68>
811191e4:	d88055c4 	addi	r2,sp,343
811191e8:	80800136 	bltu	r16,r2,811191f0 <__svfscanf_r+0x158c>
811191ec:	dc005584 	addi	r16,sp,342
811191f0:	01604534 	movhi	r5,33044
811191f4:	2979e204 	addi	r5,r5,-6264
811191f8:	8009883a 	mov	r4,r16
811191fc:	111329c0 	call	8111329c <sprintf>
81119200:	003e1906 	br	81118a68 <__reset+0xfb0f8a68>
81119204:	d8c0a517 	ldw	r3,660(sp)
81119208:	000d883a 	mov	r6,zero
8111920c:	01c00284 	movi	r7,10
81119210:	19400044 	addi	r5,r3,1
81119214:	b009883a 	mov	r4,r22
81119218:	11135480 	call	81113548 <_strtol_r>
8111921c:	da00a417 	ldw	r8,656(sp)
81119220:	dc00a517 	ldw	r16,660(sp)
81119224:	120dc83a 	sub	r6,r2,r8
81119228:	003fee06 	br	811191e4 <__reset+0xfb0f91e4>
8111922c:	da009c17 	ldw	r8,624(sp)
81119230:	180b883a 	mov	r5,r3
81119234:	8009883a 	mov	r4,r16
81119238:	45000017 	ldw	r20,0(r8)
8111923c:	44400104 	addi	r17,r8,4
81119240:	d8c0a615 	stw	r3,664(sp)
81119244:	111e0780 	call	8111e078 <__fpclassifyd>
81119248:	d8c0a617 	ldw	r3,664(sp)
8111924c:	10006426 	beq	r2,zero,811193e0 <__svfscanf_r+0x177c>
81119250:	8009883a 	mov	r4,r16
81119254:	180b883a 	mov	r5,r3
81119258:	11117cc0 	call	811117cc <__truncdfsf2>
8111925c:	a0800015 	stw	r2,0(r20)
81119260:	dc409c15 	stw	r17,624(sp)
81119264:	003e0f06 	br	81118aa4 <__reset+0xfb0f8aa4>
81119268:	88c0004c 	andi	r3,r17,1
8111926c:	183fc11e 	bne	r3,zero,81119174 <__reset+0xfb0f9174>
81119270:	8c40008c 	andi	r17,r17,2
81119274:	883fbf26 	beq	r17,zero,81119174 <__reset+0xfb0f9174>
81119278:	da00a117 	ldw	r8,644(sp)
8111927c:	00a044b4 	movhi	r2,33042
81119280:	10bf4504 	addi	r2,r2,-748
81119284:	d9c09e17 	ldw	r7,632(sp)
81119288:	000d883a 	mov	r6,zero
8111928c:	d9400104 	addi	r5,sp,4
81119290:	b009883a 	mov	r4,r22
81119294:	40806226 	beq	r8,r2,81119420 <__svfscanf_r+0x17bc>
81119298:	111fa2c0 	call	8111fa2c <_strtoll_r>
8111929c:	da009c17 	ldw	r8,624(sp)
811192a0:	41000017 	ldw	r4,0(r8)
811192a4:	42000104 	addi	r8,r8,4
811192a8:	da009c15 	stw	r8,624(sp)
811192ac:	20800015 	stw	r2,0(r4)
811192b0:	20c00115 	stw	r3,4(r4)
811192b4:	003fa406 	br	81119148 <__reset+0xfb0f9148>
811192b8:	111c5080 	call	8111c508 <__locale_mb_cur_max>
811192bc:	80bca726 	beq	r16,r2,8111855c <__reset+0xfb0f855c>
811192c0:	e0800017 	ldw	r2,0(fp)
811192c4:	e1000117 	ldw	r4,4(fp)
811192c8:	d8c00104 	addi	r3,sp,4
811192cc:	12000003 	ldbu	r8,0(r2)
811192d0:	213fffc4 	addi	r4,r4,-1
811192d4:	10800044 	addi	r2,r2,1
811192d8:	e1000115 	stw	r4,4(fp)
811192dc:	e0800015 	stw	r2,0(fp)
811192e0:	84400044 	addi	r17,r16,1
811192e4:	dd400015 	stw	r21,0(sp)
811192e8:	1c21883a 	add	r16,r3,r16
811192ec:	b009883a 	mov	r4,r22
811192f0:	880f883a 	mov	r7,r17
811192f4:	180d883a 	mov	r6,r3
811192f8:	a00b883a 	mov	r5,r20
811192fc:	82000005 	stb	r8,0(r16)
81119300:	111c5c40 	call	8111c5c4 <_mbrtowc_r>
81119304:	013fffc4 	movi	r4,-1
81119308:	113c9426 	beq	r2,r4,8111855c <__reset+0xfb0f855c>
8111930c:	103c881e 	bne	r2,zero,81118530 <__reset+0xfb0f8530>
81119310:	a0000015 	stw	zero,0(r20)
81119314:	0009883a 	mov	r4,zero
81119318:	111c4480 	call	8111c448 <iswspace>
8111931c:	10001a26 	beq	r2,zero,81119388 <__svfscanf_r+0x1724>
81119320:	8821883a 	mov	r16,r17
81119324:	dc409f17 	ldw	r17,636(sp)
81119328:	803f7426 	beq	r16,zero,811190fc <__reset+0xfb0f90fc>
8111932c:	843fffc4 	addi	r16,r16,-1
81119330:	d9800104 	addi	r6,sp,4
81119334:	342b883a 	add	r21,r6,r16
81119338:	00000106 	br	81119340 <__svfscanf_r+0x16dc>
8111933c:	843fffc4 	addi	r16,r16,-1
81119340:	a9400003 	ldbu	r5,0(r21)
81119344:	e00d883a 	mov	r6,fp
81119348:	b009883a 	mov	r4,r22
8111934c:	112175c0 	call	8112175c <_ungetc_r>
81119350:	ad7fffc4 	addi	r21,r21,-1
81119354:	803ff91e 	bne	r16,zero,8111933c <__reset+0xfb0f933c>
81119358:	003f6806 	br	811190fc <__reset+0xfb0f90fc>
8111935c:	d9800104 	addi	r6,sp,4
81119360:	802b883a 	mov	r21,r16
81119364:	343a812e 	bgeu	r6,r16,81117d6c <__reset+0xfb0f7d6c>
81119368:	ad7fffc4 	addi	r21,r21,-1
8111936c:	a9400007 	ldb	r5,0(r21)
81119370:	e00d883a 	mov	r6,fp
81119374:	b009883a 	mov	r4,r22
81119378:	112175c0 	call	8112175c <_ungetc_r>
8111937c:	da000104 	addi	r8,sp,4
81119380:	457ff91e 	bne	r8,r21,81119368 <__reset+0xfb0f9368>
81119384:	003a7906 	br	81117d6c <__reset+0xfb0f7d6c>
81119388:	da009f17 	ldw	r8,636(sp)
8111938c:	9465883a 	add	r18,r18,r17
81119390:	9cffffc4 	addi	r19,r19,-1
81119394:	4000051e 	bne	r8,zero,811193ac <__svfscanf_r+0x1748>
81119398:	a5000104 	addi	r20,r20,4
8111939c:	0021883a 	mov	r16,zero
811193a0:	003c6606 	br	8111853c <__reset+0xfb0f853c>
811193a4:	a1000017 	ldw	r4,0(r20)
811193a8:	003fdb06 	br	81119318 <__reset+0xfb0f9318>
811193ac:	0021883a 	mov	r16,zero
811193b0:	003c6206 	br	8111853c <__reset+0xfb0f853c>
811193b4:	d8800104 	addi	r2,sp,4
811193b8:	802b883a 	mov	r21,r16
811193bc:	143a6b2e 	bgeu	r2,r16,81117d6c <__reset+0xfb0f7d6c>
811193c0:	ad7fffc4 	addi	r21,r21,-1
811193c4:	a9400007 	ldb	r5,0(r21)
811193c8:	e00d883a 	mov	r6,fp
811193cc:	b009883a 	mov	r4,r22
811193d0:	112175c0 	call	8112175c <_ungetc_r>
811193d4:	d8c00104 	addi	r3,sp,4
811193d8:	1d7ff91e 	bne	r3,r21,811193c0 <__reset+0xfb0f93c0>
811193dc:	003a6306 	br	81117d6c <__reset+0xfb0f7d6c>
811193e0:	0009883a 	mov	r4,zero
811193e4:	111e1bc0 	call	8111e1bc <nanf>
811193e8:	a0800015 	stw	r2,0(r20)
811193ec:	dc409c15 	stw	r17,624(sp)
811193f0:	003dac06 	br	81118aa4 <__reset+0xfb0f8aa4>
811193f4:	d9000104 	addi	r4,sp,4
811193f8:	802b883a 	mov	r21,r16
811193fc:	243a5b2e 	bgeu	r4,r16,81117d6c <__reset+0xfb0f7d6c>
81119400:	ad7fffc4 	addi	r21,r21,-1
81119404:	a9400007 	ldb	r5,0(r21)
81119408:	e00d883a 	mov	r6,fp
8111940c:	b009883a 	mov	r4,r22
81119410:	112175c0 	call	8112175c <_ungetc_r>
81119414:	d9400104 	addi	r5,sp,4
81119418:	2d7ff91e 	bne	r5,r21,81119400 <__reset+0xfb0f9400>
8111941c:	003a5306 	br	81117d6c <__reset+0xfb0f7d6c>
81119420:	111ff840 	call	8111ff84 <_strtoull_r>
81119424:	003f9d06 	br	8111929c <__reset+0xfb0f929c>

81119428 <vfscanf>:
81119428:	00a04534 	movhi	r2,33044
8111942c:	defffb04 	addi	sp,sp,-20
81119430:	1082cb04 	addi	r2,r2,2860
81119434:	de00012e 	bgeu	sp,et,8111943c <vfscanf+0x14>
81119438:	003b68fa 	trap	3
8111943c:	dc000215 	stw	r16,8(sp)
81119440:	14000017 	ldw	r16,0(r2)
81119444:	dc400315 	stw	r17,12(sp)
81119448:	dfc00415 	stw	ra,16(sp)
8111944c:	2023883a 	mov	r17,r4
81119450:	80000826 	beq	r16,zero,81119474 <vfscanf+0x4c>
81119454:	80800e17 	ldw	r2,56(r16)
81119458:	1000061e 	bne	r2,zero,81119474 <vfscanf+0x4c>
8111945c:	8009883a 	mov	r4,r16
81119460:	d9400015 	stw	r5,0(sp)
81119464:	d9800115 	stw	r6,4(sp)
81119468:	111b5e00 	call	8111b5e0 <__sinit>
8111946c:	d9800117 	ldw	r6,4(sp)
81119470:	d9400017 	ldw	r5,0(sp)
81119474:	300f883a 	mov	r7,r6
81119478:	8009883a 	mov	r4,r16
8111947c:	280d883a 	mov	r6,r5
81119480:	880b883a 	mov	r5,r17
81119484:	dfc00417 	ldw	ra,16(sp)
81119488:	dc400317 	ldw	r17,12(sp)
8111948c:	dc000217 	ldw	r16,8(sp)
81119490:	dec00504 	addi	sp,sp,20
81119494:	1117c641 	jmpi	81117c64 <__svfscanf_r>

81119498 <__svfscanf>:
81119498:	00a04534 	movhi	r2,33044
8111949c:	1082cb04 	addi	r2,r2,2860
811194a0:	300f883a 	mov	r7,r6
811194a4:	280d883a 	mov	r6,r5
811194a8:	200b883a 	mov	r5,r4
811194ac:	11000017 	ldw	r4,0(r2)
811194b0:	1117c641 	jmpi	81117c64 <__svfscanf_r>

811194b4 <_vfscanf_r>:
811194b4:	defffb04 	addi	sp,sp,-20
811194b8:	de00012e 	bgeu	sp,et,811194c0 <_vfscanf_r+0xc>
811194bc:	003b68fa 	trap	3
811194c0:	dc000315 	stw	r16,12(sp)
811194c4:	dfc00415 	stw	ra,16(sp)
811194c8:	2021883a 	mov	r16,r4
811194cc:	20000926 	beq	r4,zero,811194f4 <_vfscanf_r+0x40>
811194d0:	20800e17 	ldw	r2,56(r4)
811194d4:	1000071e 	bne	r2,zero,811194f4 <_vfscanf_r+0x40>
811194d8:	d9400015 	stw	r5,0(sp)
811194dc:	d9800115 	stw	r6,4(sp)
811194e0:	d9c00215 	stw	r7,8(sp)
811194e4:	111b5e00 	call	8111b5e0 <__sinit>
811194e8:	d9c00217 	ldw	r7,8(sp)
811194ec:	d9800117 	ldw	r6,4(sp)
811194f0:	d9400017 	ldw	r5,0(sp)
811194f4:	8009883a 	mov	r4,r16
811194f8:	dfc00417 	ldw	ra,16(sp)
811194fc:	dc000317 	ldw	r16,12(sp)
81119500:	dec00504 	addi	sp,sp,20
81119504:	1117c641 	jmpi	81117c64 <__svfscanf_r>

81119508 <_write_r>:
81119508:	defffd04 	addi	sp,sp,-12
8111950c:	de00012e 	bgeu	sp,et,81119514 <_write_r+0xc>
81119510:	003b68fa 	trap	3
81119514:	2805883a 	mov	r2,r5
81119518:	dc000015 	stw	r16,0(sp)
8111951c:	04204534 	movhi	r16,33044
81119520:	dc400115 	stw	r17,4(sp)
81119524:	300b883a 	mov	r5,r6
81119528:	84032504 	addi	r16,r16,3220
8111952c:	2023883a 	mov	r17,r4
81119530:	380d883a 	mov	r6,r7
81119534:	1009883a 	mov	r4,r2
81119538:	dfc00215 	stw	ra,8(sp)
8111953c:	80000015 	stw	zero,0(r16)
81119540:	112817c0 	call	8112817c <write>
81119544:	00ffffc4 	movi	r3,-1
81119548:	10c00526 	beq	r2,r3,81119560 <_write_r+0x58>
8111954c:	dfc00217 	ldw	ra,8(sp)
81119550:	dc400117 	ldw	r17,4(sp)
81119554:	dc000017 	ldw	r16,0(sp)
81119558:	dec00304 	addi	sp,sp,12
8111955c:	f800283a 	ret
81119560:	80c00017 	ldw	r3,0(r16)
81119564:	183ff926 	beq	r3,zero,8111954c <__reset+0xfb0f954c>
81119568:	88c00015 	stw	r3,0(r17)
8111956c:	003ff706 	br	8111954c <__reset+0xfb0f954c>

81119570 <__swsetup_r>:
81119570:	00a04534 	movhi	r2,33044
81119574:	defffd04 	addi	sp,sp,-12
81119578:	1082cb04 	addi	r2,r2,2860
8111957c:	de00012e 	bgeu	sp,et,81119584 <__swsetup_r+0x14>
81119580:	003b68fa 	trap	3
81119584:	dc400115 	stw	r17,4(sp)
81119588:	2023883a 	mov	r17,r4
8111958c:	11000017 	ldw	r4,0(r2)
81119590:	dc000015 	stw	r16,0(sp)
81119594:	dfc00215 	stw	ra,8(sp)
81119598:	2821883a 	mov	r16,r5
8111959c:	20000226 	beq	r4,zero,811195a8 <__swsetup_r+0x38>
811195a0:	20800e17 	ldw	r2,56(r4)
811195a4:	10003126 	beq	r2,zero,8111966c <__swsetup_r+0xfc>
811195a8:	8080030b 	ldhu	r2,12(r16)
811195ac:	10c0020c 	andi	r3,r2,8
811195b0:	1009883a 	mov	r4,r2
811195b4:	18000f26 	beq	r3,zero,811195f4 <__swsetup_r+0x84>
811195b8:	80c00417 	ldw	r3,16(r16)
811195bc:	18001526 	beq	r3,zero,81119614 <__swsetup_r+0xa4>
811195c0:	1100004c 	andi	r4,r2,1
811195c4:	20001c1e 	bne	r4,zero,81119638 <__swsetup_r+0xc8>
811195c8:	1080008c 	andi	r2,r2,2
811195cc:	1000291e 	bne	r2,zero,81119674 <__swsetup_r+0x104>
811195d0:	80800517 	ldw	r2,20(r16)
811195d4:	80800215 	stw	r2,8(r16)
811195d8:	18001c26 	beq	r3,zero,8111964c <__swsetup_r+0xdc>
811195dc:	0005883a 	mov	r2,zero
811195e0:	dfc00217 	ldw	ra,8(sp)
811195e4:	dc400117 	ldw	r17,4(sp)
811195e8:	dc000017 	ldw	r16,0(sp)
811195ec:	dec00304 	addi	sp,sp,12
811195f0:	f800283a 	ret
811195f4:	2080040c 	andi	r2,r4,16
811195f8:	10002e26 	beq	r2,zero,811196b4 <__swsetup_r+0x144>
811195fc:	2080010c 	andi	r2,r4,4
81119600:	10001e1e 	bne	r2,zero,8111967c <__swsetup_r+0x10c>
81119604:	80c00417 	ldw	r3,16(r16)
81119608:	20800214 	ori	r2,r4,8
8111960c:	8080030d 	sth	r2,12(r16)
81119610:	183feb1e 	bne	r3,zero,811195c0 <__reset+0xfb0f95c0>
81119614:	1100a00c 	andi	r4,r2,640
81119618:	01408004 	movi	r5,512
8111961c:	217fe826 	beq	r4,r5,811195c0 <__reset+0xfb0f95c0>
81119620:	800b883a 	mov	r5,r16
81119624:	8809883a 	mov	r4,r17
81119628:	111215c0 	call	8111215c <__smakebuf_r>
8111962c:	8080030b 	ldhu	r2,12(r16)
81119630:	80c00417 	ldw	r3,16(r16)
81119634:	003fe206 	br	811195c0 <__reset+0xfb0f95c0>
81119638:	80800517 	ldw	r2,20(r16)
8111963c:	80000215 	stw	zero,8(r16)
81119640:	0085c83a 	sub	r2,zero,r2
81119644:	80800615 	stw	r2,24(r16)
81119648:	183fe41e 	bne	r3,zero,811195dc <__reset+0xfb0f95dc>
8111964c:	80c0030b 	ldhu	r3,12(r16)
81119650:	0005883a 	mov	r2,zero
81119654:	1900200c 	andi	r4,r3,128
81119658:	203fe126 	beq	r4,zero,811195e0 <__reset+0xfb0f95e0>
8111965c:	18c01014 	ori	r3,r3,64
81119660:	80c0030d 	sth	r3,12(r16)
81119664:	00bfffc4 	movi	r2,-1
81119668:	003fdd06 	br	811195e0 <__reset+0xfb0f95e0>
8111966c:	111b5e00 	call	8111b5e0 <__sinit>
81119670:	003fcd06 	br	811195a8 <__reset+0xfb0f95a8>
81119674:	0005883a 	mov	r2,zero
81119678:	003fd606 	br	811195d4 <__reset+0xfb0f95d4>
8111967c:	81400c17 	ldw	r5,48(r16)
81119680:	28000626 	beq	r5,zero,8111969c <__swsetup_r+0x12c>
81119684:	80801004 	addi	r2,r16,64
81119688:	28800326 	beq	r5,r2,81119698 <__swsetup_r+0x128>
8111968c:	8809883a 	mov	r4,r17
81119690:	111ba780 	call	8111ba78 <_free_r>
81119694:	8100030b 	ldhu	r4,12(r16)
81119698:	80000c15 	stw	zero,48(r16)
8111969c:	80c00417 	ldw	r3,16(r16)
811196a0:	00bff6c4 	movi	r2,-37
811196a4:	1108703a 	and	r4,r2,r4
811196a8:	80000115 	stw	zero,4(r16)
811196ac:	80c00015 	stw	r3,0(r16)
811196b0:	003fd506 	br	81119608 <__reset+0xfb0f9608>
811196b4:	00800244 	movi	r2,9
811196b8:	88800015 	stw	r2,0(r17)
811196bc:	20801014 	ori	r2,r4,64
811196c0:	8080030d 	sth	r2,12(r16)
811196c4:	00bfffc4 	movi	r2,-1
811196c8:	003fc506 	br	811195e0 <__reset+0xfb0f95e0>

811196cc <_close_r>:
811196cc:	defffd04 	addi	sp,sp,-12
811196d0:	de00012e 	bgeu	sp,et,811196d8 <_close_r+0xc>
811196d4:	003b68fa 	trap	3
811196d8:	dc000015 	stw	r16,0(sp)
811196dc:	04204534 	movhi	r16,33044
811196e0:	dc400115 	stw	r17,4(sp)
811196e4:	84032504 	addi	r16,r16,3220
811196e8:	2023883a 	mov	r17,r4
811196ec:	2809883a 	mov	r4,r5
811196f0:	dfc00215 	stw	ra,8(sp)
811196f4:	80000015 	stw	zero,0(r16)
811196f8:	11272a00 	call	811272a0 <close>
811196fc:	00ffffc4 	movi	r3,-1
81119700:	10c00526 	beq	r2,r3,81119718 <_close_r+0x4c>
81119704:	dfc00217 	ldw	ra,8(sp)
81119708:	dc400117 	ldw	r17,4(sp)
8111970c:	dc000017 	ldw	r16,0(sp)
81119710:	dec00304 	addi	sp,sp,12
81119714:	f800283a 	ret
81119718:	80c00017 	ldw	r3,0(r16)
8111971c:	183ff926 	beq	r3,zero,81119704 <__reset+0xfb0f9704>
81119720:	88c00015 	stw	r3,0(r17)
81119724:	003ff706 	br	81119704 <__reset+0xfb0f9704>

81119728 <quorem>:
81119728:	defff704 	addi	sp,sp,-36
8111972c:	de00012e 	bgeu	sp,et,81119734 <quorem+0xc>
81119730:	003b68fa 	trap	3
81119734:	dc800215 	stw	r18,8(sp)
81119738:	20800417 	ldw	r2,16(r4)
8111973c:	2c800417 	ldw	r18,16(r5)
81119740:	dfc00815 	stw	ra,32(sp)
81119744:	ddc00715 	stw	r23,28(sp)
81119748:	dd800615 	stw	r22,24(sp)
8111974c:	dd400515 	stw	r21,20(sp)
81119750:	dd000415 	stw	r20,16(sp)
81119754:	dcc00315 	stw	r19,12(sp)
81119758:	dc400115 	stw	r17,4(sp)
8111975c:	dc000015 	stw	r16,0(sp)
81119760:	14807116 	blt	r2,r18,81119928 <quorem+0x200>
81119764:	94bfffc4 	addi	r18,r18,-1
81119768:	94ad883a 	add	r22,r18,r18
8111976c:	b5ad883a 	add	r22,r22,r22
81119770:	2c400504 	addi	r17,r5,20
81119774:	8da9883a 	add	r20,r17,r22
81119778:	25400504 	addi	r21,r4,20
8111977c:	282f883a 	mov	r23,r5
81119780:	adad883a 	add	r22,r21,r22
81119784:	a1400017 	ldw	r5,0(r20)
81119788:	2021883a 	mov	r16,r4
8111978c:	b1000017 	ldw	r4,0(r22)
81119790:	29400044 	addi	r5,r5,1
81119794:	1124f600 	call	81124f60 <__udivsi3>
81119798:	1027883a 	mov	r19,r2
8111979c:	10002c26 	beq	r2,zero,81119850 <quorem+0x128>
811197a0:	a813883a 	mov	r9,r21
811197a4:	880b883a 	mov	r5,r17
811197a8:	0009883a 	mov	r4,zero
811197ac:	000d883a 	mov	r6,zero
811197b0:	2a000017 	ldw	r8,0(r5)
811197b4:	49c00017 	ldw	r7,0(r9)
811197b8:	29400104 	addi	r5,r5,4
811197bc:	40bfffcc 	andi	r2,r8,65535
811197c0:	14c5383a 	mul	r2,r2,r19
811197c4:	4010d43a 	srli	r8,r8,16
811197c8:	38ffffcc 	andi	r3,r7,65535
811197cc:	1105883a 	add	r2,r2,r4
811197d0:	1008d43a 	srli	r4,r2,16
811197d4:	44d1383a 	mul	r8,r8,r19
811197d8:	198d883a 	add	r6,r3,r6
811197dc:	10ffffcc 	andi	r3,r2,65535
811197e0:	30c7c83a 	sub	r3,r6,r3
811197e4:	380ed43a 	srli	r7,r7,16
811197e8:	4105883a 	add	r2,r8,r4
811197ec:	180dd43a 	srai	r6,r3,16
811197f0:	113fffcc 	andi	r4,r2,65535
811197f4:	390fc83a 	sub	r7,r7,r4
811197f8:	398d883a 	add	r6,r7,r6
811197fc:	300e943a 	slli	r7,r6,16
81119800:	18ffffcc 	andi	r3,r3,65535
81119804:	1008d43a 	srli	r4,r2,16
81119808:	38ceb03a 	or	r7,r7,r3
8111980c:	49c00015 	stw	r7,0(r9)
81119810:	300dd43a 	srai	r6,r6,16
81119814:	4a400104 	addi	r9,r9,4
81119818:	a17fe52e 	bgeu	r20,r5,811197b0 <__reset+0xfb0f97b0>
8111981c:	b0800017 	ldw	r2,0(r22)
81119820:	10000b1e 	bne	r2,zero,81119850 <quorem+0x128>
81119824:	b0bfff04 	addi	r2,r22,-4
81119828:	a880082e 	bgeu	r21,r2,8111984c <quorem+0x124>
8111982c:	b0ffff17 	ldw	r3,-4(r22)
81119830:	18000326 	beq	r3,zero,81119840 <quorem+0x118>
81119834:	00000506 	br	8111984c <quorem+0x124>
81119838:	10c00017 	ldw	r3,0(r2)
8111983c:	1800031e 	bne	r3,zero,8111984c <quorem+0x124>
81119840:	10bfff04 	addi	r2,r2,-4
81119844:	94bfffc4 	addi	r18,r18,-1
81119848:	a8bffb36 	bltu	r21,r2,81119838 <__reset+0xfb0f9838>
8111984c:	84800415 	stw	r18,16(r16)
81119850:	b80b883a 	mov	r5,r23
81119854:	8009883a 	mov	r4,r16
81119858:	111d3480 	call	8111d348 <__mcmp>
8111985c:	10002616 	blt	r2,zero,811198f8 <quorem+0x1d0>
81119860:	9cc00044 	addi	r19,r19,1
81119864:	a805883a 	mov	r2,r21
81119868:	000b883a 	mov	r5,zero
8111986c:	11000017 	ldw	r4,0(r2)
81119870:	89800017 	ldw	r6,0(r17)
81119874:	10800104 	addi	r2,r2,4
81119878:	20ffffcc 	andi	r3,r4,65535
8111987c:	194b883a 	add	r5,r3,r5
81119880:	30ffffcc 	andi	r3,r6,65535
81119884:	28c7c83a 	sub	r3,r5,r3
81119888:	300cd43a 	srli	r6,r6,16
8111988c:	2008d43a 	srli	r4,r4,16
81119890:	180bd43a 	srai	r5,r3,16
81119894:	18ffffcc 	andi	r3,r3,65535
81119898:	2189c83a 	sub	r4,r4,r6
8111989c:	2149883a 	add	r4,r4,r5
811198a0:	200c943a 	slli	r6,r4,16
811198a4:	8c400104 	addi	r17,r17,4
811198a8:	200bd43a 	srai	r5,r4,16
811198ac:	30c6b03a 	or	r3,r6,r3
811198b0:	10ffff15 	stw	r3,-4(r2)
811198b4:	a47fed2e 	bgeu	r20,r17,8111986c <__reset+0xfb0f986c>
811198b8:	9485883a 	add	r2,r18,r18
811198bc:	1085883a 	add	r2,r2,r2
811198c0:	a887883a 	add	r3,r21,r2
811198c4:	18800017 	ldw	r2,0(r3)
811198c8:	10000b1e 	bne	r2,zero,811198f8 <quorem+0x1d0>
811198cc:	18bfff04 	addi	r2,r3,-4
811198d0:	a880082e 	bgeu	r21,r2,811198f4 <quorem+0x1cc>
811198d4:	18ffff17 	ldw	r3,-4(r3)
811198d8:	18000326 	beq	r3,zero,811198e8 <quorem+0x1c0>
811198dc:	00000506 	br	811198f4 <quorem+0x1cc>
811198e0:	10c00017 	ldw	r3,0(r2)
811198e4:	1800031e 	bne	r3,zero,811198f4 <quorem+0x1cc>
811198e8:	10bfff04 	addi	r2,r2,-4
811198ec:	94bfffc4 	addi	r18,r18,-1
811198f0:	a8bffb36 	bltu	r21,r2,811198e0 <__reset+0xfb0f98e0>
811198f4:	84800415 	stw	r18,16(r16)
811198f8:	9805883a 	mov	r2,r19
811198fc:	dfc00817 	ldw	ra,32(sp)
81119900:	ddc00717 	ldw	r23,28(sp)
81119904:	dd800617 	ldw	r22,24(sp)
81119908:	dd400517 	ldw	r21,20(sp)
8111990c:	dd000417 	ldw	r20,16(sp)
81119910:	dcc00317 	ldw	r19,12(sp)
81119914:	dc800217 	ldw	r18,8(sp)
81119918:	dc400117 	ldw	r17,4(sp)
8111991c:	dc000017 	ldw	r16,0(sp)
81119920:	dec00904 	addi	sp,sp,36
81119924:	f800283a 	ret
81119928:	0005883a 	mov	r2,zero
8111992c:	003ff306 	br	811198fc <__reset+0xfb0f98fc>

81119930 <_dtoa_r>:
81119930:	deffde04 	addi	sp,sp,-136
81119934:	de00012e 	bgeu	sp,et,8111993c <_dtoa_r+0xc>
81119938:	003b68fa 	trap	3
8111993c:	20801017 	ldw	r2,64(r4)
81119940:	df002015 	stw	fp,128(sp)
81119944:	dcc01b15 	stw	r19,108(sp)
81119948:	dc801a15 	stw	r18,104(sp)
8111994c:	dc401915 	stw	r17,100(sp)
81119950:	dc001815 	stw	r16,96(sp)
81119954:	dfc02115 	stw	ra,132(sp)
81119958:	ddc01f15 	stw	r23,124(sp)
8111995c:	dd801e15 	stw	r22,120(sp)
81119960:	dd401d15 	stw	r21,116(sp)
81119964:	dd001c15 	stw	r20,112(sp)
81119968:	d9c00315 	stw	r7,12(sp)
8111996c:	2039883a 	mov	fp,r4
81119970:	3023883a 	mov	r17,r6
81119974:	2825883a 	mov	r18,r5
81119978:	dc002417 	ldw	r16,144(sp)
8111997c:	3027883a 	mov	r19,r6
81119980:	10000826 	beq	r2,zero,811199a4 <_dtoa_r+0x74>
81119984:	21801117 	ldw	r6,68(r4)
81119988:	00c00044 	movi	r3,1
8111998c:	100b883a 	mov	r5,r2
81119990:	1986983a 	sll	r3,r3,r6
81119994:	11800115 	stw	r6,4(r2)
81119998:	10c00215 	stw	r3,8(r2)
8111999c:	111caf80 	call	8111caf8 <_Bfree>
811199a0:	e0001015 	stw	zero,64(fp)
811199a4:	88002e16 	blt	r17,zero,81119a60 <_dtoa_r+0x130>
811199a8:	80000015 	stw	zero,0(r16)
811199ac:	889ffc2c 	andhi	r2,r17,32752
811199b0:	00dffc34 	movhi	r3,32752
811199b4:	10c01c26 	beq	r2,r3,81119a28 <_dtoa_r+0xf8>
811199b8:	000d883a 	mov	r6,zero
811199bc:	000f883a 	mov	r7,zero
811199c0:	9009883a 	mov	r4,r18
811199c4:	980b883a 	mov	r5,r19
811199c8:	11263bc0 	call	811263bc <__eqdf2>
811199cc:	10002b1e 	bne	r2,zero,81119a7c <_dtoa_r+0x14c>
811199d0:	d9c02317 	ldw	r7,140(sp)
811199d4:	00800044 	movi	r2,1
811199d8:	38800015 	stw	r2,0(r7)
811199dc:	d8802517 	ldw	r2,148(sp)
811199e0:	10019e26 	beq	r2,zero,8111a05c <_dtoa_r+0x72c>
811199e4:	d8c02517 	ldw	r3,148(sp)
811199e8:	00a04534 	movhi	r2,33044
811199ec:	10b9d144 	addi	r2,r2,-6331
811199f0:	18800015 	stw	r2,0(r3)
811199f4:	10bfffc4 	addi	r2,r2,-1
811199f8:	dfc02117 	ldw	ra,132(sp)
811199fc:	df002017 	ldw	fp,128(sp)
81119a00:	ddc01f17 	ldw	r23,124(sp)
81119a04:	dd801e17 	ldw	r22,120(sp)
81119a08:	dd401d17 	ldw	r21,116(sp)
81119a0c:	dd001c17 	ldw	r20,112(sp)
81119a10:	dcc01b17 	ldw	r19,108(sp)
81119a14:	dc801a17 	ldw	r18,104(sp)
81119a18:	dc401917 	ldw	r17,100(sp)
81119a1c:	dc001817 	ldw	r16,96(sp)
81119a20:	dec02204 	addi	sp,sp,136
81119a24:	f800283a 	ret
81119a28:	d8c02317 	ldw	r3,140(sp)
81119a2c:	0089c3c4 	movi	r2,9999
81119a30:	18800015 	stw	r2,0(r3)
81119a34:	90017726 	beq	r18,zero,8111a014 <_dtoa_r+0x6e4>
81119a38:	00a04534 	movhi	r2,33044
81119a3c:	10b9ef04 	addi	r2,r2,-6212
81119a40:	d9002517 	ldw	r4,148(sp)
81119a44:	203fec26 	beq	r4,zero,811199f8 <__reset+0xfb0f99f8>
81119a48:	10c000c7 	ldb	r3,3(r2)
81119a4c:	1801781e 	bne	r3,zero,8111a030 <_dtoa_r+0x700>
81119a50:	10c000c4 	addi	r3,r2,3
81119a54:	d9802517 	ldw	r6,148(sp)
81119a58:	30c00015 	stw	r3,0(r6)
81119a5c:	003fe606 	br	811199f8 <__reset+0xfb0f99f8>
81119a60:	04e00034 	movhi	r19,32768
81119a64:	9cffffc4 	addi	r19,r19,-1
81119a68:	00800044 	movi	r2,1
81119a6c:	8ce6703a 	and	r19,r17,r19
81119a70:	80800015 	stw	r2,0(r16)
81119a74:	9823883a 	mov	r17,r19
81119a78:	003fcc06 	br	811199ac <__reset+0xfb0f99ac>
81119a7c:	d8800204 	addi	r2,sp,8
81119a80:	d8800015 	stw	r2,0(sp)
81119a84:	d9c00104 	addi	r7,sp,4
81119a88:	900b883a 	mov	r5,r18
81119a8c:	980d883a 	mov	r6,r19
81119a90:	e009883a 	mov	r4,fp
81119a94:	8820d53a 	srli	r16,r17,20
81119a98:	111d7240 	call	8111d724 <__d2b>
81119a9c:	d8800915 	stw	r2,36(sp)
81119aa0:	8001651e 	bne	r16,zero,8111a038 <_dtoa_r+0x708>
81119aa4:	dd800217 	ldw	r22,8(sp)
81119aa8:	dc000117 	ldw	r16,4(sp)
81119aac:	00800804 	movi	r2,32
81119ab0:	b421883a 	add	r16,r22,r16
81119ab4:	80c10c84 	addi	r3,r16,1074
81119ab8:	10c2d10e 	bge	r2,r3,8111a600 <_dtoa_r+0xcd0>
81119abc:	00801004 	movi	r2,64
81119ac0:	81010484 	addi	r4,r16,1042
81119ac4:	10c7c83a 	sub	r3,r2,r3
81119ac8:	9108d83a 	srl	r4,r18,r4
81119acc:	88e2983a 	sll	r17,r17,r3
81119ad0:	2448b03a 	or	r4,r4,r17
81119ad4:	112707c0 	call	8112707c <__floatunsidf>
81119ad8:	017f8434 	movhi	r5,65040
81119adc:	01800044 	movi	r6,1
81119ae0:	1009883a 	mov	r4,r2
81119ae4:	194b883a 	add	r5,r3,r5
81119ae8:	843fffc4 	addi	r16,r16,-1
81119aec:	d9801115 	stw	r6,68(sp)
81119af0:	000d883a 	mov	r6,zero
81119af4:	01cffe34 	movhi	r7,16376
81119af8:	11266140 	call	81126614 <__subdf3>
81119afc:	0198dbf4 	movhi	r6,25455
81119b00:	01cff4f4 	movhi	r7,16339
81119b04:	3190d844 	addi	r6,r6,17249
81119b08:	39e1e9c4 	addi	r7,r7,-30809
81119b0c:	1009883a 	mov	r4,r2
81119b10:	180b883a 	mov	r5,r3
81119b14:	1110f940 	call	81110f94 <__muldf3>
81119b18:	01a2d874 	movhi	r6,35681
81119b1c:	01cff1f4 	movhi	r7,16327
81119b20:	31b22cc4 	addi	r6,r6,-14157
81119b24:	39e28a04 	addi	r7,r7,-30168
81119b28:	180b883a 	mov	r5,r3
81119b2c:	1009883a 	mov	r4,r2
81119b30:	11252180 	call	81125218 <__adddf3>
81119b34:	8009883a 	mov	r4,r16
81119b38:	1029883a 	mov	r20,r2
81119b3c:	1823883a 	mov	r17,r3
81119b40:	1126f980 	call	81126f98 <__floatsidf>
81119b44:	019427f4 	movhi	r6,20639
81119b48:	01cff4f4 	movhi	r7,16339
81119b4c:	319e7ec4 	addi	r6,r6,31227
81119b50:	39d104c4 	addi	r7,r7,17427
81119b54:	1009883a 	mov	r4,r2
81119b58:	180b883a 	mov	r5,r3
81119b5c:	1110f940 	call	81110f94 <__muldf3>
81119b60:	100d883a 	mov	r6,r2
81119b64:	180f883a 	mov	r7,r3
81119b68:	a009883a 	mov	r4,r20
81119b6c:	880b883a 	mov	r5,r17
81119b70:	11252180 	call	81125218 <__adddf3>
81119b74:	1009883a 	mov	r4,r2
81119b78:	180b883a 	mov	r5,r3
81119b7c:	1029883a 	mov	r20,r2
81119b80:	1823883a 	mov	r17,r3
81119b84:	1126f180 	call	81126f18 <__fixdfsi>
81119b88:	000d883a 	mov	r6,zero
81119b8c:	000f883a 	mov	r7,zero
81119b90:	a009883a 	mov	r4,r20
81119b94:	880b883a 	mov	r5,r17
81119b98:	d8800515 	stw	r2,20(sp)
81119b9c:	11265200 	call	81126520 <__ledf2>
81119ba0:	10028716 	blt	r2,zero,8111a5c0 <_dtoa_r+0xc90>
81119ba4:	d8c00517 	ldw	r3,20(sp)
81119ba8:	00800584 	movi	r2,22
81119bac:	10c27536 	bltu	r2,r3,8111a584 <_dtoa_r+0xc54>
81119bb0:	180490fa 	slli	r2,r3,3
81119bb4:	00e04534 	movhi	r3,33044
81119bb8:	18fa0a04 	addi	r3,r3,-6104
81119bbc:	1885883a 	add	r2,r3,r2
81119bc0:	11000017 	ldw	r4,0(r2)
81119bc4:	11400117 	ldw	r5,4(r2)
81119bc8:	900d883a 	mov	r6,r18
81119bcc:	980f883a 	mov	r7,r19
81119bd0:	11264440 	call	81126444 <__gedf2>
81119bd4:	00828d0e 	bge	zero,r2,8111a60c <_dtoa_r+0xcdc>
81119bd8:	d9000517 	ldw	r4,20(sp)
81119bdc:	d8000e15 	stw	zero,56(sp)
81119be0:	213fffc4 	addi	r4,r4,-1
81119be4:	d9000515 	stw	r4,20(sp)
81119be8:	b42dc83a 	sub	r22,r22,r16
81119bec:	b5bfffc4 	addi	r22,r22,-1
81119bf0:	b0026f16 	blt	r22,zero,8111a5b0 <_dtoa_r+0xc80>
81119bf4:	d8000815 	stw	zero,32(sp)
81119bf8:	d9c00517 	ldw	r7,20(sp)
81119bfc:	38026416 	blt	r7,zero,8111a590 <_dtoa_r+0xc60>
81119c00:	b1ed883a 	add	r22,r22,r7
81119c04:	d9c00d15 	stw	r7,52(sp)
81119c08:	d8000a15 	stw	zero,40(sp)
81119c0c:	d9800317 	ldw	r6,12(sp)
81119c10:	00800244 	movi	r2,9
81119c14:	11811436 	bltu	r2,r6,8111a068 <_dtoa_r+0x738>
81119c18:	00800144 	movi	r2,5
81119c1c:	1184e10e 	bge	r2,r6,8111afa4 <_dtoa_r+0x1674>
81119c20:	31bfff04 	addi	r6,r6,-4
81119c24:	d9800315 	stw	r6,12(sp)
81119c28:	0023883a 	mov	r17,zero
81119c2c:	d9800317 	ldw	r6,12(sp)
81119c30:	008000c4 	movi	r2,3
81119c34:	30836726 	beq	r6,r2,8111a9d4 <_dtoa_r+0x10a4>
81119c38:	1183410e 	bge	r2,r6,8111a940 <_dtoa_r+0x1010>
81119c3c:	d9c00317 	ldw	r7,12(sp)
81119c40:	00800104 	movi	r2,4
81119c44:	38827c26 	beq	r7,r2,8111a638 <_dtoa_r+0xd08>
81119c48:	00800144 	movi	r2,5
81119c4c:	3884c41e 	bne	r7,r2,8111af60 <_dtoa_r+0x1630>
81119c50:	00800044 	movi	r2,1
81119c54:	d8800b15 	stw	r2,44(sp)
81119c58:	d8c00517 	ldw	r3,20(sp)
81119c5c:	d9002217 	ldw	r4,136(sp)
81119c60:	1907883a 	add	r3,r3,r4
81119c64:	19800044 	addi	r6,r3,1
81119c68:	d8c00c15 	stw	r3,48(sp)
81119c6c:	d9800615 	stw	r6,24(sp)
81119c70:	0183a40e 	bge	zero,r6,8111ab04 <_dtoa_r+0x11d4>
81119c74:	d9800617 	ldw	r6,24(sp)
81119c78:	3021883a 	mov	r16,r6
81119c7c:	e0001115 	stw	zero,68(fp)
81119c80:	008005c4 	movi	r2,23
81119c84:	1184c92e 	bgeu	r2,r6,8111afac <_dtoa_r+0x167c>
81119c88:	00c00044 	movi	r3,1
81119c8c:	00800104 	movi	r2,4
81119c90:	1085883a 	add	r2,r2,r2
81119c94:	11000504 	addi	r4,r2,20
81119c98:	180b883a 	mov	r5,r3
81119c9c:	18c00044 	addi	r3,r3,1
81119ca0:	313ffb2e 	bgeu	r6,r4,81119c90 <__reset+0xfb0f9c90>
81119ca4:	e1401115 	stw	r5,68(fp)
81119ca8:	e009883a 	mov	r4,fp
81119cac:	111ca480 	call	8111ca48 <_Balloc>
81119cb0:	d8800715 	stw	r2,28(sp)
81119cb4:	e0801015 	stw	r2,64(fp)
81119cb8:	00800384 	movi	r2,14
81119cbc:	1400f736 	bltu	r2,r16,8111a09c <_dtoa_r+0x76c>
81119cc0:	8800f626 	beq	r17,zero,8111a09c <_dtoa_r+0x76c>
81119cc4:	d9c00517 	ldw	r7,20(sp)
81119cc8:	01c39a0e 	bge	zero,r7,8111ab34 <_dtoa_r+0x1204>
81119ccc:	388003cc 	andi	r2,r7,15
81119cd0:	100490fa 	slli	r2,r2,3
81119cd4:	382bd13a 	srai	r21,r7,4
81119cd8:	00e04534 	movhi	r3,33044
81119cdc:	18fa0a04 	addi	r3,r3,-6104
81119ce0:	1885883a 	add	r2,r3,r2
81119ce4:	a8c0040c 	andi	r3,r21,16
81119ce8:	12400017 	ldw	r9,0(r2)
81119cec:	12000117 	ldw	r8,4(r2)
81119cf0:	18037926 	beq	r3,zero,8111aad8 <_dtoa_r+0x11a8>
81119cf4:	00a04534 	movhi	r2,33044
81119cf8:	10ba0004 	addi	r2,r2,-6144
81119cfc:	11800817 	ldw	r6,32(r2)
81119d00:	11c00917 	ldw	r7,36(r2)
81119d04:	9009883a 	mov	r4,r18
81119d08:	980b883a 	mov	r5,r19
81119d0c:	da001715 	stw	r8,92(sp)
81119d10:	da401615 	stw	r9,88(sp)
81119d14:	1125acc0 	call	81125acc <__divdf3>
81119d18:	da001717 	ldw	r8,92(sp)
81119d1c:	da401617 	ldw	r9,88(sp)
81119d20:	ad4003cc 	andi	r21,r21,15
81119d24:	040000c4 	movi	r16,3
81119d28:	1023883a 	mov	r17,r2
81119d2c:	1829883a 	mov	r20,r3
81119d30:	a8001126 	beq	r21,zero,81119d78 <_dtoa_r+0x448>
81119d34:	05e04534 	movhi	r23,33044
81119d38:	bdfa0004 	addi	r23,r23,-6144
81119d3c:	4805883a 	mov	r2,r9
81119d40:	4007883a 	mov	r3,r8
81119d44:	a980004c 	andi	r6,r21,1
81119d48:	1009883a 	mov	r4,r2
81119d4c:	a82bd07a 	srai	r21,r21,1
81119d50:	180b883a 	mov	r5,r3
81119d54:	30000426 	beq	r6,zero,81119d68 <_dtoa_r+0x438>
81119d58:	b9800017 	ldw	r6,0(r23)
81119d5c:	b9c00117 	ldw	r7,4(r23)
81119d60:	84000044 	addi	r16,r16,1
81119d64:	1110f940 	call	81110f94 <__muldf3>
81119d68:	bdc00204 	addi	r23,r23,8
81119d6c:	a83ff51e 	bne	r21,zero,81119d44 <__reset+0xfb0f9d44>
81119d70:	1013883a 	mov	r9,r2
81119d74:	1811883a 	mov	r8,r3
81119d78:	480d883a 	mov	r6,r9
81119d7c:	400f883a 	mov	r7,r8
81119d80:	8809883a 	mov	r4,r17
81119d84:	a00b883a 	mov	r5,r20
81119d88:	1125acc0 	call	81125acc <__divdf3>
81119d8c:	d8800f15 	stw	r2,60(sp)
81119d90:	d8c01015 	stw	r3,64(sp)
81119d94:	d8c00e17 	ldw	r3,56(sp)
81119d98:	18000626 	beq	r3,zero,81119db4 <_dtoa_r+0x484>
81119d9c:	d9000f17 	ldw	r4,60(sp)
81119da0:	d9401017 	ldw	r5,64(sp)
81119da4:	000d883a 	mov	r6,zero
81119da8:	01cffc34 	movhi	r7,16368
81119dac:	11265200 	call	81126520 <__ledf2>
81119db0:	10040b16 	blt	r2,zero,8111ade0 <_dtoa_r+0x14b0>
81119db4:	8009883a 	mov	r4,r16
81119db8:	1126f980 	call	81126f98 <__floatsidf>
81119dbc:	d9800f17 	ldw	r6,60(sp)
81119dc0:	d9c01017 	ldw	r7,64(sp)
81119dc4:	1009883a 	mov	r4,r2
81119dc8:	180b883a 	mov	r5,r3
81119dcc:	1110f940 	call	81110f94 <__muldf3>
81119dd0:	000d883a 	mov	r6,zero
81119dd4:	01d00734 	movhi	r7,16412
81119dd8:	1009883a 	mov	r4,r2
81119ddc:	180b883a 	mov	r5,r3
81119de0:	11252180 	call	81125218 <__adddf3>
81119de4:	1021883a 	mov	r16,r2
81119de8:	d8800617 	ldw	r2,24(sp)
81119dec:	047f3034 	movhi	r17,64704
81119df0:	1c63883a 	add	r17,r3,r17
81119df4:	10031826 	beq	r2,zero,8111aa58 <_dtoa_r+0x1128>
81119df8:	d8c00517 	ldw	r3,20(sp)
81119dfc:	db000617 	ldw	r12,24(sp)
81119e00:	d8c01315 	stw	r3,76(sp)
81119e04:	d9000b17 	ldw	r4,44(sp)
81119e08:	20038f26 	beq	r4,zero,8111ac48 <_dtoa_r+0x1318>
81119e0c:	60bfffc4 	addi	r2,r12,-1
81119e10:	100490fa 	slli	r2,r2,3
81119e14:	00e04534 	movhi	r3,33044
81119e18:	18fa0a04 	addi	r3,r3,-6104
81119e1c:	1885883a 	add	r2,r3,r2
81119e20:	11800017 	ldw	r6,0(r2)
81119e24:	11c00117 	ldw	r7,4(r2)
81119e28:	d8800717 	ldw	r2,28(sp)
81119e2c:	0009883a 	mov	r4,zero
81119e30:	014ff834 	movhi	r5,16352
81119e34:	db001615 	stw	r12,88(sp)
81119e38:	15c00044 	addi	r23,r2,1
81119e3c:	1125acc0 	call	81125acc <__divdf3>
81119e40:	800d883a 	mov	r6,r16
81119e44:	880f883a 	mov	r7,r17
81119e48:	1009883a 	mov	r4,r2
81119e4c:	180b883a 	mov	r5,r3
81119e50:	11266140 	call	81126614 <__subdf3>
81119e54:	d9401017 	ldw	r5,64(sp)
81119e58:	d9000f17 	ldw	r4,60(sp)
81119e5c:	102b883a 	mov	r21,r2
81119e60:	d8c01215 	stw	r3,72(sp)
81119e64:	1126f180 	call	81126f18 <__fixdfsi>
81119e68:	1009883a 	mov	r4,r2
81119e6c:	1029883a 	mov	r20,r2
81119e70:	1126f980 	call	81126f98 <__floatsidf>
81119e74:	d9000f17 	ldw	r4,60(sp)
81119e78:	d9401017 	ldw	r5,64(sp)
81119e7c:	100d883a 	mov	r6,r2
81119e80:	180f883a 	mov	r7,r3
81119e84:	11266140 	call	81126614 <__subdf3>
81119e88:	1823883a 	mov	r17,r3
81119e8c:	d8c00717 	ldw	r3,28(sp)
81119e90:	d9401217 	ldw	r5,72(sp)
81119e94:	a2000c04 	addi	r8,r20,48
81119e98:	1021883a 	mov	r16,r2
81119e9c:	1a000005 	stb	r8,0(r3)
81119ea0:	800d883a 	mov	r6,r16
81119ea4:	880f883a 	mov	r7,r17
81119ea8:	a809883a 	mov	r4,r21
81119eac:	4029883a 	mov	r20,r8
81119eb0:	11264440 	call	81126444 <__gedf2>
81119eb4:	00841d16 	blt	zero,r2,8111af2c <_dtoa_r+0x15fc>
81119eb8:	800d883a 	mov	r6,r16
81119ebc:	880f883a 	mov	r7,r17
81119ec0:	0009883a 	mov	r4,zero
81119ec4:	014ffc34 	movhi	r5,16368
81119ec8:	11266140 	call	81126614 <__subdf3>
81119ecc:	d9401217 	ldw	r5,72(sp)
81119ed0:	100d883a 	mov	r6,r2
81119ed4:	180f883a 	mov	r7,r3
81119ed8:	a809883a 	mov	r4,r21
81119edc:	11264440 	call	81126444 <__gedf2>
81119ee0:	db001617 	ldw	r12,88(sp)
81119ee4:	00840e16 	blt	zero,r2,8111af20 <_dtoa_r+0x15f0>
81119ee8:	00800044 	movi	r2,1
81119eec:	13006b0e 	bge	r2,r12,8111a09c <_dtoa_r+0x76c>
81119ef0:	d9000717 	ldw	r4,28(sp)
81119ef4:	dd800f15 	stw	r22,60(sp)
81119ef8:	dcc01015 	stw	r19,64(sp)
81119efc:	2319883a 	add	r12,r4,r12
81119f00:	dcc01217 	ldw	r19,72(sp)
81119f04:	602d883a 	mov	r22,r12
81119f08:	dc801215 	stw	r18,72(sp)
81119f0c:	b825883a 	mov	r18,r23
81119f10:	00000906 	br	81119f38 <_dtoa_r+0x608>
81119f14:	11266140 	call	81126614 <__subdf3>
81119f18:	a80d883a 	mov	r6,r21
81119f1c:	980f883a 	mov	r7,r19
81119f20:	1009883a 	mov	r4,r2
81119f24:	180b883a 	mov	r5,r3
81119f28:	11265200 	call	81126520 <__ledf2>
81119f2c:	1003e816 	blt	r2,zero,8111aed0 <_dtoa_r+0x15a0>
81119f30:	b825883a 	mov	r18,r23
81119f34:	bd83e926 	beq	r23,r22,8111aedc <_dtoa_r+0x15ac>
81119f38:	a809883a 	mov	r4,r21
81119f3c:	980b883a 	mov	r5,r19
81119f40:	000d883a 	mov	r6,zero
81119f44:	01d00934 	movhi	r7,16420
81119f48:	1110f940 	call	81110f94 <__muldf3>
81119f4c:	000d883a 	mov	r6,zero
81119f50:	01d00934 	movhi	r7,16420
81119f54:	8009883a 	mov	r4,r16
81119f58:	880b883a 	mov	r5,r17
81119f5c:	102b883a 	mov	r21,r2
81119f60:	1827883a 	mov	r19,r3
81119f64:	1110f940 	call	81110f94 <__muldf3>
81119f68:	180b883a 	mov	r5,r3
81119f6c:	1009883a 	mov	r4,r2
81119f70:	1821883a 	mov	r16,r3
81119f74:	1023883a 	mov	r17,r2
81119f78:	1126f180 	call	81126f18 <__fixdfsi>
81119f7c:	1009883a 	mov	r4,r2
81119f80:	1029883a 	mov	r20,r2
81119f84:	1126f980 	call	81126f98 <__floatsidf>
81119f88:	8809883a 	mov	r4,r17
81119f8c:	800b883a 	mov	r5,r16
81119f90:	100d883a 	mov	r6,r2
81119f94:	180f883a 	mov	r7,r3
81119f98:	11266140 	call	81126614 <__subdf3>
81119f9c:	a5000c04 	addi	r20,r20,48
81119fa0:	a80d883a 	mov	r6,r21
81119fa4:	980f883a 	mov	r7,r19
81119fa8:	1009883a 	mov	r4,r2
81119fac:	180b883a 	mov	r5,r3
81119fb0:	95000005 	stb	r20,0(r18)
81119fb4:	1021883a 	mov	r16,r2
81119fb8:	1823883a 	mov	r17,r3
81119fbc:	11265200 	call	81126520 <__ledf2>
81119fc0:	bdc00044 	addi	r23,r23,1
81119fc4:	800d883a 	mov	r6,r16
81119fc8:	880f883a 	mov	r7,r17
81119fcc:	0009883a 	mov	r4,zero
81119fd0:	014ffc34 	movhi	r5,16368
81119fd4:	103fcf0e 	bge	r2,zero,81119f14 <__reset+0xfb0f9f14>
81119fd8:	d8c01317 	ldw	r3,76(sp)
81119fdc:	d8c00515 	stw	r3,20(sp)
81119fe0:	d9400917 	ldw	r5,36(sp)
81119fe4:	e009883a 	mov	r4,fp
81119fe8:	111caf80 	call	8111caf8 <_Bfree>
81119fec:	d9000517 	ldw	r4,20(sp)
81119ff0:	d9802317 	ldw	r6,140(sp)
81119ff4:	d9c02517 	ldw	r7,148(sp)
81119ff8:	b8000005 	stb	zero,0(r23)
81119ffc:	20800044 	addi	r2,r4,1
8111a000:	30800015 	stw	r2,0(r6)
8111a004:	3802aa26 	beq	r7,zero,8111aab0 <_dtoa_r+0x1180>
8111a008:	3dc00015 	stw	r23,0(r7)
8111a00c:	d8800717 	ldw	r2,28(sp)
8111a010:	003e7906 	br	811199f8 <__reset+0xfb0f99f8>
8111a014:	00800434 	movhi	r2,16
8111a018:	10bfffc4 	addi	r2,r2,-1
8111a01c:	88a2703a 	and	r17,r17,r2
8111a020:	883e851e 	bne	r17,zero,81119a38 <__reset+0xfb0f9a38>
8111a024:	00a04534 	movhi	r2,33044
8111a028:	10b9ec04 	addi	r2,r2,-6224
8111a02c:	003e8406 	br	81119a40 <__reset+0xfb0f9a40>
8111a030:	10c00204 	addi	r3,r2,8
8111a034:	003e8706 	br	81119a54 <__reset+0xfb0f9a54>
8111a038:	01400434 	movhi	r5,16
8111a03c:	297fffc4 	addi	r5,r5,-1
8111a040:	994a703a 	and	r5,r19,r5
8111a044:	9009883a 	mov	r4,r18
8111a048:	843f0044 	addi	r16,r16,-1023
8111a04c:	294ffc34 	orhi	r5,r5,16368
8111a050:	dd800217 	ldw	r22,8(sp)
8111a054:	d8001115 	stw	zero,68(sp)
8111a058:	003ea506 	br	81119af0 <__reset+0xfb0f9af0>
8111a05c:	00a04534 	movhi	r2,33044
8111a060:	10b9d104 	addi	r2,r2,-6332
8111a064:	003e6406 	br	811199f8 <__reset+0xfb0f99f8>
8111a068:	e0001115 	stw	zero,68(fp)
8111a06c:	000b883a 	mov	r5,zero
8111a070:	e009883a 	mov	r4,fp
8111a074:	111ca480 	call	8111ca48 <_Balloc>
8111a078:	01bfffc4 	movi	r6,-1
8111a07c:	01c00044 	movi	r7,1
8111a080:	d8800715 	stw	r2,28(sp)
8111a084:	d9800c15 	stw	r6,48(sp)
8111a088:	e0801015 	stw	r2,64(fp)
8111a08c:	d8000315 	stw	zero,12(sp)
8111a090:	d9c00b15 	stw	r7,44(sp)
8111a094:	d9800615 	stw	r6,24(sp)
8111a098:	d8002215 	stw	zero,136(sp)
8111a09c:	d8800117 	ldw	r2,4(sp)
8111a0a0:	10008916 	blt	r2,zero,8111a2c8 <_dtoa_r+0x998>
8111a0a4:	d9000517 	ldw	r4,20(sp)
8111a0a8:	00c00384 	movi	r3,14
8111a0ac:	19008616 	blt	r3,r4,8111a2c8 <_dtoa_r+0x998>
8111a0b0:	200490fa 	slli	r2,r4,3
8111a0b4:	00e04534 	movhi	r3,33044
8111a0b8:	d9802217 	ldw	r6,136(sp)
8111a0bc:	18fa0a04 	addi	r3,r3,-6104
8111a0c0:	1885883a 	add	r2,r3,r2
8111a0c4:	14000017 	ldw	r16,0(r2)
8111a0c8:	14400117 	ldw	r17,4(r2)
8111a0cc:	30016316 	blt	r6,zero,8111a65c <_dtoa_r+0xd2c>
8111a0d0:	800d883a 	mov	r6,r16
8111a0d4:	880f883a 	mov	r7,r17
8111a0d8:	9009883a 	mov	r4,r18
8111a0dc:	980b883a 	mov	r5,r19
8111a0e0:	1125acc0 	call	81125acc <__divdf3>
8111a0e4:	180b883a 	mov	r5,r3
8111a0e8:	1009883a 	mov	r4,r2
8111a0ec:	1126f180 	call	81126f18 <__fixdfsi>
8111a0f0:	1009883a 	mov	r4,r2
8111a0f4:	102b883a 	mov	r21,r2
8111a0f8:	1126f980 	call	81126f98 <__floatsidf>
8111a0fc:	800d883a 	mov	r6,r16
8111a100:	880f883a 	mov	r7,r17
8111a104:	1009883a 	mov	r4,r2
8111a108:	180b883a 	mov	r5,r3
8111a10c:	1110f940 	call	81110f94 <__muldf3>
8111a110:	100d883a 	mov	r6,r2
8111a114:	180f883a 	mov	r7,r3
8111a118:	9009883a 	mov	r4,r18
8111a11c:	980b883a 	mov	r5,r19
8111a120:	11266140 	call	81126614 <__subdf3>
8111a124:	d9c00717 	ldw	r7,28(sp)
8111a128:	1009883a 	mov	r4,r2
8111a12c:	a8800c04 	addi	r2,r21,48
8111a130:	38800005 	stb	r2,0(r7)
8111a134:	3dc00044 	addi	r23,r7,1
8111a138:	d9c00617 	ldw	r7,24(sp)
8111a13c:	01800044 	movi	r6,1
8111a140:	180b883a 	mov	r5,r3
8111a144:	2005883a 	mov	r2,r4
8111a148:	39803826 	beq	r7,r6,8111a22c <_dtoa_r+0x8fc>
8111a14c:	000d883a 	mov	r6,zero
8111a150:	01d00934 	movhi	r7,16420
8111a154:	1110f940 	call	81110f94 <__muldf3>
8111a158:	000d883a 	mov	r6,zero
8111a15c:	000f883a 	mov	r7,zero
8111a160:	1009883a 	mov	r4,r2
8111a164:	180b883a 	mov	r5,r3
8111a168:	1025883a 	mov	r18,r2
8111a16c:	1827883a 	mov	r19,r3
8111a170:	11263bc0 	call	811263bc <__eqdf2>
8111a174:	103f9a26 	beq	r2,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a178:	d9c00617 	ldw	r7,24(sp)
8111a17c:	d8c00717 	ldw	r3,28(sp)
8111a180:	b829883a 	mov	r20,r23
8111a184:	38bfffc4 	addi	r2,r7,-1
8111a188:	18ad883a 	add	r22,r3,r2
8111a18c:	00000a06 	br	8111a1b8 <_dtoa_r+0x888>
8111a190:	1110f940 	call	81110f94 <__muldf3>
8111a194:	000d883a 	mov	r6,zero
8111a198:	000f883a 	mov	r7,zero
8111a19c:	1009883a 	mov	r4,r2
8111a1a0:	180b883a 	mov	r5,r3
8111a1a4:	1025883a 	mov	r18,r2
8111a1a8:	1827883a 	mov	r19,r3
8111a1ac:	b829883a 	mov	r20,r23
8111a1b0:	11263bc0 	call	811263bc <__eqdf2>
8111a1b4:	103f8a26 	beq	r2,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a1b8:	800d883a 	mov	r6,r16
8111a1bc:	880f883a 	mov	r7,r17
8111a1c0:	9009883a 	mov	r4,r18
8111a1c4:	980b883a 	mov	r5,r19
8111a1c8:	1125acc0 	call	81125acc <__divdf3>
8111a1cc:	180b883a 	mov	r5,r3
8111a1d0:	1009883a 	mov	r4,r2
8111a1d4:	1126f180 	call	81126f18 <__fixdfsi>
8111a1d8:	1009883a 	mov	r4,r2
8111a1dc:	102b883a 	mov	r21,r2
8111a1e0:	1126f980 	call	81126f98 <__floatsidf>
8111a1e4:	800d883a 	mov	r6,r16
8111a1e8:	880f883a 	mov	r7,r17
8111a1ec:	1009883a 	mov	r4,r2
8111a1f0:	180b883a 	mov	r5,r3
8111a1f4:	1110f940 	call	81110f94 <__muldf3>
8111a1f8:	100d883a 	mov	r6,r2
8111a1fc:	180f883a 	mov	r7,r3
8111a200:	9009883a 	mov	r4,r18
8111a204:	980b883a 	mov	r5,r19
8111a208:	11266140 	call	81126614 <__subdf3>
8111a20c:	aa000c04 	addi	r8,r21,48
8111a210:	a2000005 	stb	r8,0(r20)
8111a214:	000d883a 	mov	r6,zero
8111a218:	01d00934 	movhi	r7,16420
8111a21c:	1009883a 	mov	r4,r2
8111a220:	180b883a 	mov	r5,r3
8111a224:	a5c00044 	addi	r23,r20,1
8111a228:	b53fd91e 	bne	r22,r20,8111a190 <__reset+0xfb0fa190>
8111a22c:	100d883a 	mov	r6,r2
8111a230:	180f883a 	mov	r7,r3
8111a234:	1009883a 	mov	r4,r2
8111a238:	180b883a 	mov	r5,r3
8111a23c:	11252180 	call	81125218 <__adddf3>
8111a240:	100d883a 	mov	r6,r2
8111a244:	180f883a 	mov	r7,r3
8111a248:	8009883a 	mov	r4,r16
8111a24c:	880b883a 	mov	r5,r17
8111a250:	1027883a 	mov	r19,r2
8111a254:	1825883a 	mov	r18,r3
8111a258:	11265200 	call	81126520 <__ledf2>
8111a25c:	10000816 	blt	r2,zero,8111a280 <_dtoa_r+0x950>
8111a260:	980d883a 	mov	r6,r19
8111a264:	900f883a 	mov	r7,r18
8111a268:	8009883a 	mov	r4,r16
8111a26c:	880b883a 	mov	r5,r17
8111a270:	11263bc0 	call	811263bc <__eqdf2>
8111a274:	103f5a1e 	bne	r2,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a278:	ad40004c 	andi	r21,r21,1
8111a27c:	a83f5826 	beq	r21,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a280:	bd3fffc3 	ldbu	r20,-1(r23)
8111a284:	b8bfffc4 	addi	r2,r23,-1
8111a288:	1007883a 	mov	r3,r2
8111a28c:	01400e44 	movi	r5,57
8111a290:	d9800717 	ldw	r6,28(sp)
8111a294:	00000506 	br	8111a2ac <_dtoa_r+0x97c>
8111a298:	18ffffc4 	addi	r3,r3,-1
8111a29c:	11824726 	beq	r2,r6,8111abbc <_dtoa_r+0x128c>
8111a2a0:	1d000003 	ldbu	r20,0(r3)
8111a2a4:	102f883a 	mov	r23,r2
8111a2a8:	10bfffc4 	addi	r2,r2,-1
8111a2ac:	a1003fcc 	andi	r4,r20,255
8111a2b0:	2100201c 	xori	r4,r4,128
8111a2b4:	213fe004 	addi	r4,r4,-128
8111a2b8:	217ff726 	beq	r4,r5,8111a298 <__reset+0xfb0fa298>
8111a2bc:	a2000044 	addi	r8,r20,1
8111a2c0:	12000005 	stb	r8,0(r2)
8111a2c4:	003f4606 	br	81119fe0 <__reset+0xfb0f9fe0>
8111a2c8:	d9000b17 	ldw	r4,44(sp)
8111a2cc:	2000c826 	beq	r4,zero,8111a5f0 <_dtoa_r+0xcc0>
8111a2d0:	d9800317 	ldw	r6,12(sp)
8111a2d4:	00c00044 	movi	r3,1
8111a2d8:	1980f90e 	bge	r3,r6,8111a6c0 <_dtoa_r+0xd90>
8111a2dc:	d8800617 	ldw	r2,24(sp)
8111a2e0:	d8c00a17 	ldw	r3,40(sp)
8111a2e4:	157fffc4 	addi	r21,r2,-1
8111a2e8:	1d41f316 	blt	r3,r21,8111aab8 <_dtoa_r+0x1188>
8111a2ec:	1d6bc83a 	sub	r21,r3,r21
8111a2f0:	d9c00617 	ldw	r7,24(sp)
8111a2f4:	3802aa16 	blt	r7,zero,8111ada0 <_dtoa_r+0x1470>
8111a2f8:	dd000817 	ldw	r20,32(sp)
8111a2fc:	d8800617 	ldw	r2,24(sp)
8111a300:	d8c00817 	ldw	r3,32(sp)
8111a304:	01400044 	movi	r5,1
8111a308:	e009883a 	mov	r4,fp
8111a30c:	1887883a 	add	r3,r3,r2
8111a310:	d8c00815 	stw	r3,32(sp)
8111a314:	b0ad883a 	add	r22,r22,r2
8111a318:	111ce6c0 	call	8111ce6c <__i2b>
8111a31c:	1023883a 	mov	r17,r2
8111a320:	a0000826 	beq	r20,zero,8111a344 <_dtoa_r+0xa14>
8111a324:	0580070e 	bge	zero,r22,8111a344 <_dtoa_r+0xa14>
8111a328:	a005883a 	mov	r2,r20
8111a32c:	b500b916 	blt	r22,r20,8111a614 <_dtoa_r+0xce4>
8111a330:	d9000817 	ldw	r4,32(sp)
8111a334:	a0a9c83a 	sub	r20,r20,r2
8111a338:	b0adc83a 	sub	r22,r22,r2
8111a33c:	2089c83a 	sub	r4,r4,r2
8111a340:	d9000815 	stw	r4,32(sp)
8111a344:	d9800a17 	ldw	r6,40(sp)
8111a348:	0181810e 	bge	zero,r6,8111a950 <_dtoa_r+0x1020>
8111a34c:	d9c00b17 	ldw	r7,44(sp)
8111a350:	3800b326 	beq	r7,zero,8111a620 <_dtoa_r+0xcf0>
8111a354:	a800b226 	beq	r21,zero,8111a620 <_dtoa_r+0xcf0>
8111a358:	880b883a 	mov	r5,r17
8111a35c:	a80d883a 	mov	r6,r21
8111a360:	e009883a 	mov	r4,fp
8111a364:	111d0b00 	call	8111d0b0 <__pow5mult>
8111a368:	d9800917 	ldw	r6,36(sp)
8111a36c:	100b883a 	mov	r5,r2
8111a370:	e009883a 	mov	r4,fp
8111a374:	1023883a 	mov	r17,r2
8111a378:	111ceb00 	call	8111ceb0 <__multiply>
8111a37c:	1021883a 	mov	r16,r2
8111a380:	d8800a17 	ldw	r2,40(sp)
8111a384:	d9400917 	ldw	r5,36(sp)
8111a388:	e009883a 	mov	r4,fp
8111a38c:	1545c83a 	sub	r2,r2,r21
8111a390:	d8800a15 	stw	r2,40(sp)
8111a394:	111caf80 	call	8111caf8 <_Bfree>
8111a398:	d8c00a17 	ldw	r3,40(sp)
8111a39c:	18009f1e 	bne	r3,zero,8111a61c <_dtoa_r+0xcec>
8111a3a0:	05c00044 	movi	r23,1
8111a3a4:	e009883a 	mov	r4,fp
8111a3a8:	b80b883a 	mov	r5,r23
8111a3ac:	111ce6c0 	call	8111ce6c <__i2b>
8111a3b0:	d9000d17 	ldw	r4,52(sp)
8111a3b4:	102b883a 	mov	r21,r2
8111a3b8:	2000ce26 	beq	r4,zero,8111a6f4 <_dtoa_r+0xdc4>
8111a3bc:	200d883a 	mov	r6,r4
8111a3c0:	100b883a 	mov	r5,r2
8111a3c4:	e009883a 	mov	r4,fp
8111a3c8:	111d0b00 	call	8111d0b0 <__pow5mult>
8111a3cc:	d9800317 	ldw	r6,12(sp)
8111a3d0:	102b883a 	mov	r21,r2
8111a3d4:	b981810e 	bge	r23,r6,8111a9dc <_dtoa_r+0x10ac>
8111a3d8:	0027883a 	mov	r19,zero
8111a3dc:	a8800417 	ldw	r2,16(r21)
8111a3e0:	05c00804 	movi	r23,32
8111a3e4:	10800104 	addi	r2,r2,4
8111a3e8:	1085883a 	add	r2,r2,r2
8111a3ec:	1085883a 	add	r2,r2,r2
8111a3f0:	a885883a 	add	r2,r21,r2
8111a3f4:	11000017 	ldw	r4,0(r2)
8111a3f8:	111cd540 	call	8111cd54 <__hi0bits>
8111a3fc:	b885c83a 	sub	r2,r23,r2
8111a400:	1585883a 	add	r2,r2,r22
8111a404:	108007cc 	andi	r2,r2,31
8111a408:	1000b326 	beq	r2,zero,8111a6d8 <_dtoa_r+0xda8>
8111a40c:	00c00804 	movi	r3,32
8111a410:	1887c83a 	sub	r3,r3,r2
8111a414:	01000104 	movi	r4,4
8111a418:	20c2cd0e 	bge	r4,r3,8111af50 <_dtoa_r+0x1620>
8111a41c:	00c00704 	movi	r3,28
8111a420:	1885c83a 	sub	r2,r3,r2
8111a424:	d8c00817 	ldw	r3,32(sp)
8111a428:	a0a9883a 	add	r20,r20,r2
8111a42c:	b0ad883a 	add	r22,r22,r2
8111a430:	1887883a 	add	r3,r3,r2
8111a434:	d8c00815 	stw	r3,32(sp)
8111a438:	d9800817 	ldw	r6,32(sp)
8111a43c:	0180040e 	bge	zero,r6,8111a450 <_dtoa_r+0xb20>
8111a440:	800b883a 	mov	r5,r16
8111a444:	e009883a 	mov	r4,fp
8111a448:	111d1f80 	call	8111d1f8 <__lshift>
8111a44c:	1021883a 	mov	r16,r2
8111a450:	0580050e 	bge	zero,r22,8111a468 <_dtoa_r+0xb38>
8111a454:	a80b883a 	mov	r5,r21
8111a458:	b00d883a 	mov	r6,r22
8111a45c:	e009883a 	mov	r4,fp
8111a460:	111d1f80 	call	8111d1f8 <__lshift>
8111a464:	102b883a 	mov	r21,r2
8111a468:	d9c00e17 	ldw	r7,56(sp)
8111a46c:	3801211e 	bne	r7,zero,8111a8f4 <_dtoa_r+0xfc4>
8111a470:	d9800617 	ldw	r6,24(sp)
8111a474:	0181380e 	bge	zero,r6,8111a958 <_dtoa_r+0x1028>
8111a478:	d8c00b17 	ldw	r3,44(sp)
8111a47c:	1800ab1e 	bne	r3,zero,8111a72c <_dtoa_r+0xdfc>
8111a480:	dc800717 	ldw	r18,28(sp)
8111a484:	dcc00617 	ldw	r19,24(sp)
8111a488:	9029883a 	mov	r20,r18
8111a48c:	00000206 	br	8111a498 <_dtoa_r+0xb68>
8111a490:	111cb200 	call	8111cb20 <__multadd>
8111a494:	1021883a 	mov	r16,r2
8111a498:	a80b883a 	mov	r5,r21
8111a49c:	8009883a 	mov	r4,r16
8111a4a0:	11197280 	call	81119728 <quorem>
8111a4a4:	10800c04 	addi	r2,r2,48
8111a4a8:	90800005 	stb	r2,0(r18)
8111a4ac:	94800044 	addi	r18,r18,1
8111a4b0:	9507c83a 	sub	r3,r18,r20
8111a4b4:	000f883a 	mov	r7,zero
8111a4b8:	01800284 	movi	r6,10
8111a4bc:	800b883a 	mov	r5,r16
8111a4c0:	e009883a 	mov	r4,fp
8111a4c4:	1cfff216 	blt	r3,r19,8111a490 <__reset+0xfb0fa490>
8111a4c8:	1011883a 	mov	r8,r2
8111a4cc:	d8800617 	ldw	r2,24(sp)
8111a4d0:	0082370e 	bge	zero,r2,8111adb0 <_dtoa_r+0x1480>
8111a4d4:	d9000717 	ldw	r4,28(sp)
8111a4d8:	0025883a 	mov	r18,zero
8111a4dc:	20af883a 	add	r23,r4,r2
8111a4e0:	01800044 	movi	r6,1
8111a4e4:	800b883a 	mov	r5,r16
8111a4e8:	e009883a 	mov	r4,fp
8111a4ec:	da001715 	stw	r8,92(sp)
8111a4f0:	111d1f80 	call	8111d1f8 <__lshift>
8111a4f4:	a80b883a 	mov	r5,r21
8111a4f8:	1009883a 	mov	r4,r2
8111a4fc:	d8800915 	stw	r2,36(sp)
8111a500:	111d3480 	call	8111d348 <__mcmp>
8111a504:	da001717 	ldw	r8,92(sp)
8111a508:	0081800e 	bge	zero,r2,8111ab0c <_dtoa_r+0x11dc>
8111a50c:	b93fffc3 	ldbu	r4,-1(r23)
8111a510:	b8bfffc4 	addi	r2,r23,-1
8111a514:	1007883a 	mov	r3,r2
8111a518:	01800e44 	movi	r6,57
8111a51c:	d9c00717 	ldw	r7,28(sp)
8111a520:	00000506 	br	8111a538 <_dtoa_r+0xc08>
8111a524:	18ffffc4 	addi	r3,r3,-1
8111a528:	11c12326 	beq	r2,r7,8111a9b8 <_dtoa_r+0x1088>
8111a52c:	19000003 	ldbu	r4,0(r3)
8111a530:	102f883a 	mov	r23,r2
8111a534:	10bfffc4 	addi	r2,r2,-1
8111a538:	21403fcc 	andi	r5,r4,255
8111a53c:	2940201c 	xori	r5,r5,128
8111a540:	297fe004 	addi	r5,r5,-128
8111a544:	29bff726 	beq	r5,r6,8111a524 <__reset+0xfb0fa524>
8111a548:	21000044 	addi	r4,r4,1
8111a54c:	11000005 	stb	r4,0(r2)
8111a550:	a80b883a 	mov	r5,r21
8111a554:	e009883a 	mov	r4,fp
8111a558:	111caf80 	call	8111caf8 <_Bfree>
8111a55c:	883ea026 	beq	r17,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a560:	90000426 	beq	r18,zero,8111a574 <_dtoa_r+0xc44>
8111a564:	94400326 	beq	r18,r17,8111a574 <_dtoa_r+0xc44>
8111a568:	900b883a 	mov	r5,r18
8111a56c:	e009883a 	mov	r4,fp
8111a570:	111caf80 	call	8111caf8 <_Bfree>
8111a574:	880b883a 	mov	r5,r17
8111a578:	e009883a 	mov	r4,fp
8111a57c:	111caf80 	call	8111caf8 <_Bfree>
8111a580:	003e9706 	br	81119fe0 <__reset+0xfb0f9fe0>
8111a584:	01800044 	movi	r6,1
8111a588:	d9800e15 	stw	r6,56(sp)
8111a58c:	003d9606 	br	81119be8 <__reset+0xfb0f9be8>
8111a590:	d8800817 	ldw	r2,32(sp)
8111a594:	d8c00517 	ldw	r3,20(sp)
8111a598:	d8000d15 	stw	zero,52(sp)
8111a59c:	10c5c83a 	sub	r2,r2,r3
8111a5a0:	00c9c83a 	sub	r4,zero,r3
8111a5a4:	d8800815 	stw	r2,32(sp)
8111a5a8:	d9000a15 	stw	r4,40(sp)
8111a5ac:	003d9706 	br	81119c0c <__reset+0xfb0f9c0c>
8111a5b0:	05adc83a 	sub	r22,zero,r22
8111a5b4:	dd800815 	stw	r22,32(sp)
8111a5b8:	002d883a 	mov	r22,zero
8111a5bc:	003d8e06 	br	81119bf8 <__reset+0xfb0f9bf8>
8111a5c0:	d9000517 	ldw	r4,20(sp)
8111a5c4:	1126f980 	call	81126f98 <__floatsidf>
8111a5c8:	100d883a 	mov	r6,r2
8111a5cc:	180f883a 	mov	r7,r3
8111a5d0:	a009883a 	mov	r4,r20
8111a5d4:	880b883a 	mov	r5,r17
8111a5d8:	11263bc0 	call	811263bc <__eqdf2>
8111a5dc:	103d7126 	beq	r2,zero,81119ba4 <__reset+0xfb0f9ba4>
8111a5e0:	d9c00517 	ldw	r7,20(sp)
8111a5e4:	39ffffc4 	addi	r7,r7,-1
8111a5e8:	d9c00515 	stw	r7,20(sp)
8111a5ec:	003d6d06 	br	81119ba4 <__reset+0xfb0f9ba4>
8111a5f0:	dd400a17 	ldw	r21,40(sp)
8111a5f4:	dd000817 	ldw	r20,32(sp)
8111a5f8:	0023883a 	mov	r17,zero
8111a5fc:	003f4806 	br	8111a320 <__reset+0xfb0fa320>
8111a600:	10e3c83a 	sub	r17,r2,r3
8111a604:	9448983a 	sll	r4,r18,r17
8111a608:	003d3206 	br	81119ad4 <__reset+0xfb0f9ad4>
8111a60c:	d8000e15 	stw	zero,56(sp)
8111a610:	003d7506 	br	81119be8 <__reset+0xfb0f9be8>
8111a614:	b005883a 	mov	r2,r22
8111a618:	003f4506 	br	8111a330 <__reset+0xfb0fa330>
8111a61c:	dc000915 	stw	r16,36(sp)
8111a620:	d9800a17 	ldw	r6,40(sp)
8111a624:	d9400917 	ldw	r5,36(sp)
8111a628:	e009883a 	mov	r4,fp
8111a62c:	111d0b00 	call	8111d0b0 <__pow5mult>
8111a630:	1021883a 	mov	r16,r2
8111a634:	003f5a06 	br	8111a3a0 <__reset+0xfb0fa3a0>
8111a638:	01c00044 	movi	r7,1
8111a63c:	d9c00b15 	stw	r7,44(sp)
8111a640:	d8802217 	ldw	r2,136(sp)
8111a644:	0081280e 	bge	zero,r2,8111aae8 <_dtoa_r+0x11b8>
8111a648:	100d883a 	mov	r6,r2
8111a64c:	1021883a 	mov	r16,r2
8111a650:	d8800c15 	stw	r2,48(sp)
8111a654:	d8800615 	stw	r2,24(sp)
8111a658:	003d8806 	br	81119c7c <__reset+0xfb0f9c7c>
8111a65c:	d8800617 	ldw	r2,24(sp)
8111a660:	00be9b16 	blt	zero,r2,8111a0d0 <__reset+0xfb0fa0d0>
8111a664:	10010f1e 	bne	r2,zero,8111aaa4 <_dtoa_r+0x1174>
8111a668:	880b883a 	mov	r5,r17
8111a66c:	000d883a 	mov	r6,zero
8111a670:	01d00534 	movhi	r7,16404
8111a674:	8009883a 	mov	r4,r16
8111a678:	1110f940 	call	81110f94 <__muldf3>
8111a67c:	900d883a 	mov	r6,r18
8111a680:	980f883a 	mov	r7,r19
8111a684:	1009883a 	mov	r4,r2
8111a688:	180b883a 	mov	r5,r3
8111a68c:	11264440 	call	81126444 <__gedf2>
8111a690:	002b883a 	mov	r21,zero
8111a694:	0023883a 	mov	r17,zero
8111a698:	1000bf16 	blt	r2,zero,8111a998 <_dtoa_r+0x1068>
8111a69c:	d9802217 	ldw	r6,136(sp)
8111a6a0:	ddc00717 	ldw	r23,28(sp)
8111a6a4:	018c303a 	nor	r6,zero,r6
8111a6a8:	d9800515 	stw	r6,20(sp)
8111a6ac:	a80b883a 	mov	r5,r21
8111a6b0:	e009883a 	mov	r4,fp
8111a6b4:	111caf80 	call	8111caf8 <_Bfree>
8111a6b8:	883e4926 	beq	r17,zero,81119fe0 <__reset+0xfb0f9fe0>
8111a6bc:	003fad06 	br	8111a574 <__reset+0xfb0fa574>
8111a6c0:	d9c01117 	ldw	r7,68(sp)
8111a6c4:	3801bc26 	beq	r7,zero,8111adb8 <_dtoa_r+0x1488>
8111a6c8:	10810cc4 	addi	r2,r2,1075
8111a6cc:	dd400a17 	ldw	r21,40(sp)
8111a6d0:	dd000817 	ldw	r20,32(sp)
8111a6d4:	003f0a06 	br	8111a300 <__reset+0xfb0fa300>
8111a6d8:	00800704 	movi	r2,28
8111a6dc:	d9000817 	ldw	r4,32(sp)
8111a6e0:	a0a9883a 	add	r20,r20,r2
8111a6e4:	b0ad883a 	add	r22,r22,r2
8111a6e8:	2089883a 	add	r4,r4,r2
8111a6ec:	d9000815 	stw	r4,32(sp)
8111a6f0:	003f5106 	br	8111a438 <__reset+0xfb0fa438>
8111a6f4:	d8c00317 	ldw	r3,12(sp)
8111a6f8:	b8c1fc0e 	bge	r23,r3,8111aeec <_dtoa_r+0x15bc>
8111a6fc:	0027883a 	mov	r19,zero
8111a700:	b805883a 	mov	r2,r23
8111a704:	003f3e06 	br	8111a400 <__reset+0xfb0fa400>
8111a708:	880b883a 	mov	r5,r17
8111a70c:	e009883a 	mov	r4,fp
8111a710:	000f883a 	mov	r7,zero
8111a714:	01800284 	movi	r6,10
8111a718:	111cb200 	call	8111cb20 <__multadd>
8111a71c:	d9000c17 	ldw	r4,48(sp)
8111a720:	1023883a 	mov	r17,r2
8111a724:	0102040e 	bge	zero,r4,8111af38 <_dtoa_r+0x1608>
8111a728:	d9000615 	stw	r4,24(sp)
8111a72c:	0500050e 	bge	zero,r20,8111a744 <_dtoa_r+0xe14>
8111a730:	880b883a 	mov	r5,r17
8111a734:	a00d883a 	mov	r6,r20
8111a738:	e009883a 	mov	r4,fp
8111a73c:	111d1f80 	call	8111d1f8 <__lshift>
8111a740:	1023883a 	mov	r17,r2
8111a744:	9801241e 	bne	r19,zero,8111abd8 <_dtoa_r+0x12a8>
8111a748:	8829883a 	mov	r20,r17
8111a74c:	d9000617 	ldw	r4,24(sp)
8111a750:	dcc00717 	ldw	r19,28(sp)
8111a754:	9480004c 	andi	r18,r18,1
8111a758:	20bfffc4 	addi	r2,r4,-1
8111a75c:	9885883a 	add	r2,r19,r2
8111a760:	d8800415 	stw	r2,16(sp)
8111a764:	dc800615 	stw	r18,24(sp)
8111a768:	a80b883a 	mov	r5,r21
8111a76c:	8009883a 	mov	r4,r16
8111a770:	11197280 	call	81119728 <quorem>
8111a774:	880b883a 	mov	r5,r17
8111a778:	8009883a 	mov	r4,r16
8111a77c:	102f883a 	mov	r23,r2
8111a780:	111d3480 	call	8111d348 <__mcmp>
8111a784:	a80b883a 	mov	r5,r21
8111a788:	a00d883a 	mov	r6,r20
8111a78c:	e009883a 	mov	r4,fp
8111a790:	102d883a 	mov	r22,r2
8111a794:	111d3a80 	call	8111d3a8 <__mdiff>
8111a798:	1007883a 	mov	r3,r2
8111a79c:	10800317 	ldw	r2,12(r2)
8111a7a0:	bc800c04 	addi	r18,r23,48
8111a7a4:	180b883a 	mov	r5,r3
8111a7a8:	10004e1e 	bne	r2,zero,8111a8e4 <_dtoa_r+0xfb4>
8111a7ac:	8009883a 	mov	r4,r16
8111a7b0:	d8c01615 	stw	r3,88(sp)
8111a7b4:	111d3480 	call	8111d348 <__mcmp>
8111a7b8:	d8c01617 	ldw	r3,88(sp)
8111a7bc:	e009883a 	mov	r4,fp
8111a7c0:	d8801615 	stw	r2,88(sp)
8111a7c4:	180b883a 	mov	r5,r3
8111a7c8:	111caf80 	call	8111caf8 <_Bfree>
8111a7cc:	d8801617 	ldw	r2,88(sp)
8111a7d0:	1000041e 	bne	r2,zero,8111a7e4 <_dtoa_r+0xeb4>
8111a7d4:	d9800317 	ldw	r6,12(sp)
8111a7d8:	3000021e 	bne	r6,zero,8111a7e4 <_dtoa_r+0xeb4>
8111a7dc:	d8c00617 	ldw	r3,24(sp)
8111a7e0:	18003726 	beq	r3,zero,8111a8c0 <_dtoa_r+0xf90>
8111a7e4:	b0002016 	blt	r22,zero,8111a868 <_dtoa_r+0xf38>
8111a7e8:	b000041e 	bne	r22,zero,8111a7fc <_dtoa_r+0xecc>
8111a7ec:	d9000317 	ldw	r4,12(sp)
8111a7f0:	2000021e 	bne	r4,zero,8111a7fc <_dtoa_r+0xecc>
8111a7f4:	d8c00617 	ldw	r3,24(sp)
8111a7f8:	18001b26 	beq	r3,zero,8111a868 <_dtoa_r+0xf38>
8111a7fc:	00810716 	blt	zero,r2,8111ac1c <_dtoa_r+0x12ec>
8111a800:	d8c00417 	ldw	r3,16(sp)
8111a804:	9d800044 	addi	r22,r19,1
8111a808:	9c800005 	stb	r18,0(r19)
8111a80c:	b02f883a 	mov	r23,r22
8111a810:	98c10626 	beq	r19,r3,8111ac2c <_dtoa_r+0x12fc>
8111a814:	800b883a 	mov	r5,r16
8111a818:	000f883a 	mov	r7,zero
8111a81c:	01800284 	movi	r6,10
8111a820:	e009883a 	mov	r4,fp
8111a824:	111cb200 	call	8111cb20 <__multadd>
8111a828:	1021883a 	mov	r16,r2
8111a82c:	000f883a 	mov	r7,zero
8111a830:	01800284 	movi	r6,10
8111a834:	880b883a 	mov	r5,r17
8111a838:	e009883a 	mov	r4,fp
8111a83c:	8d002526 	beq	r17,r20,8111a8d4 <_dtoa_r+0xfa4>
8111a840:	111cb200 	call	8111cb20 <__multadd>
8111a844:	a00b883a 	mov	r5,r20
8111a848:	000f883a 	mov	r7,zero
8111a84c:	01800284 	movi	r6,10
8111a850:	e009883a 	mov	r4,fp
8111a854:	1023883a 	mov	r17,r2
8111a858:	111cb200 	call	8111cb20 <__multadd>
8111a85c:	1029883a 	mov	r20,r2
8111a860:	b027883a 	mov	r19,r22
8111a864:	003fc006 	br	8111a768 <__reset+0xfb0fa768>
8111a868:	9011883a 	mov	r8,r18
8111a86c:	00800e0e 	bge	zero,r2,8111a8a8 <_dtoa_r+0xf78>
8111a870:	800b883a 	mov	r5,r16
8111a874:	01800044 	movi	r6,1
8111a878:	e009883a 	mov	r4,fp
8111a87c:	da001715 	stw	r8,92(sp)
8111a880:	111d1f80 	call	8111d1f8 <__lshift>
8111a884:	a80b883a 	mov	r5,r21
8111a888:	1009883a 	mov	r4,r2
8111a88c:	1021883a 	mov	r16,r2
8111a890:	111d3480 	call	8111d348 <__mcmp>
8111a894:	da001717 	ldw	r8,92(sp)
8111a898:	0081960e 	bge	zero,r2,8111aef4 <_dtoa_r+0x15c4>
8111a89c:	00800e44 	movi	r2,57
8111a8a0:	40817026 	beq	r8,r2,8111ae64 <_dtoa_r+0x1534>
8111a8a4:	ba000c44 	addi	r8,r23,49
8111a8a8:	8825883a 	mov	r18,r17
8111a8ac:	9dc00044 	addi	r23,r19,1
8111a8b0:	9a000005 	stb	r8,0(r19)
8111a8b4:	a023883a 	mov	r17,r20
8111a8b8:	dc000915 	stw	r16,36(sp)
8111a8bc:	003f2406 	br	8111a550 <__reset+0xfb0fa550>
8111a8c0:	00800e44 	movi	r2,57
8111a8c4:	9011883a 	mov	r8,r18
8111a8c8:	90816626 	beq	r18,r2,8111ae64 <_dtoa_r+0x1534>
8111a8cc:	05bff516 	blt	zero,r22,8111a8a4 <__reset+0xfb0fa8a4>
8111a8d0:	003ff506 	br	8111a8a8 <__reset+0xfb0fa8a8>
8111a8d4:	111cb200 	call	8111cb20 <__multadd>
8111a8d8:	1023883a 	mov	r17,r2
8111a8dc:	1029883a 	mov	r20,r2
8111a8e0:	003fdf06 	br	8111a860 <__reset+0xfb0fa860>
8111a8e4:	e009883a 	mov	r4,fp
8111a8e8:	111caf80 	call	8111caf8 <_Bfree>
8111a8ec:	00800044 	movi	r2,1
8111a8f0:	003fbc06 	br	8111a7e4 <__reset+0xfb0fa7e4>
8111a8f4:	a80b883a 	mov	r5,r21
8111a8f8:	8009883a 	mov	r4,r16
8111a8fc:	111d3480 	call	8111d348 <__mcmp>
8111a900:	103edb0e 	bge	r2,zero,8111a470 <__reset+0xfb0fa470>
8111a904:	800b883a 	mov	r5,r16
8111a908:	000f883a 	mov	r7,zero
8111a90c:	01800284 	movi	r6,10
8111a910:	e009883a 	mov	r4,fp
8111a914:	111cb200 	call	8111cb20 <__multadd>
8111a918:	1021883a 	mov	r16,r2
8111a91c:	d8800517 	ldw	r2,20(sp)
8111a920:	d8c00b17 	ldw	r3,44(sp)
8111a924:	10bfffc4 	addi	r2,r2,-1
8111a928:	d8800515 	stw	r2,20(sp)
8111a92c:	183f761e 	bne	r3,zero,8111a708 <__reset+0xfb0fa708>
8111a930:	d9000c17 	ldw	r4,48(sp)
8111a934:	0101730e 	bge	zero,r4,8111af04 <_dtoa_r+0x15d4>
8111a938:	d9000615 	stw	r4,24(sp)
8111a93c:	003ed006 	br	8111a480 <__reset+0xfb0fa480>
8111a940:	00800084 	movi	r2,2
8111a944:	3081861e 	bne	r6,r2,8111af60 <_dtoa_r+0x1630>
8111a948:	d8000b15 	stw	zero,44(sp)
8111a94c:	003f3c06 	br	8111a640 <__reset+0xfb0fa640>
8111a950:	dc000917 	ldw	r16,36(sp)
8111a954:	003e9206 	br	8111a3a0 <__reset+0xfb0fa3a0>
8111a958:	d9c00317 	ldw	r7,12(sp)
8111a95c:	00800084 	movi	r2,2
8111a960:	11fec50e 	bge	r2,r7,8111a478 <__reset+0xfb0fa478>
8111a964:	d9000617 	ldw	r4,24(sp)
8111a968:	20013c1e 	bne	r4,zero,8111ae5c <_dtoa_r+0x152c>
8111a96c:	a80b883a 	mov	r5,r21
8111a970:	000f883a 	mov	r7,zero
8111a974:	01800144 	movi	r6,5
8111a978:	e009883a 	mov	r4,fp
8111a97c:	111cb200 	call	8111cb20 <__multadd>
8111a980:	100b883a 	mov	r5,r2
8111a984:	8009883a 	mov	r4,r16
8111a988:	102b883a 	mov	r21,r2
8111a98c:	111d3480 	call	8111d348 <__mcmp>
8111a990:	dc000915 	stw	r16,36(sp)
8111a994:	00bf410e 	bge	zero,r2,8111a69c <__reset+0xfb0fa69c>
8111a998:	d9c00717 	ldw	r7,28(sp)
8111a99c:	00800c44 	movi	r2,49
8111a9a0:	38800005 	stb	r2,0(r7)
8111a9a4:	d8800517 	ldw	r2,20(sp)
8111a9a8:	3dc00044 	addi	r23,r7,1
8111a9ac:	10800044 	addi	r2,r2,1
8111a9b0:	d8800515 	stw	r2,20(sp)
8111a9b4:	003f3d06 	br	8111a6ac <__reset+0xfb0fa6ac>
8111a9b8:	d9800517 	ldw	r6,20(sp)
8111a9bc:	d9c00717 	ldw	r7,28(sp)
8111a9c0:	00800c44 	movi	r2,49
8111a9c4:	31800044 	addi	r6,r6,1
8111a9c8:	d9800515 	stw	r6,20(sp)
8111a9cc:	38800005 	stb	r2,0(r7)
8111a9d0:	003edf06 	br	8111a550 <__reset+0xfb0fa550>
8111a9d4:	d8000b15 	stw	zero,44(sp)
8111a9d8:	003c9f06 	br	81119c58 <__reset+0xfb0f9c58>
8111a9dc:	903e7e1e 	bne	r18,zero,8111a3d8 <__reset+0xfb0fa3d8>
8111a9e0:	00800434 	movhi	r2,16
8111a9e4:	10bfffc4 	addi	r2,r2,-1
8111a9e8:	9884703a 	and	r2,r19,r2
8111a9ec:	1000ea1e 	bne	r2,zero,8111ad98 <_dtoa_r+0x1468>
8111a9f0:	9cdffc2c 	andhi	r19,r19,32752
8111a9f4:	9800e826 	beq	r19,zero,8111ad98 <_dtoa_r+0x1468>
8111a9f8:	d9c00817 	ldw	r7,32(sp)
8111a9fc:	b5800044 	addi	r22,r22,1
8111aa00:	04c00044 	movi	r19,1
8111aa04:	39c00044 	addi	r7,r7,1
8111aa08:	d9c00815 	stw	r7,32(sp)
8111aa0c:	d8800d17 	ldw	r2,52(sp)
8111aa10:	103e721e 	bne	r2,zero,8111a3dc <__reset+0xfb0fa3dc>
8111aa14:	00800044 	movi	r2,1
8111aa18:	003e7906 	br	8111a400 <__reset+0xfb0fa400>
8111aa1c:	8009883a 	mov	r4,r16
8111aa20:	1126f980 	call	81126f98 <__floatsidf>
8111aa24:	d9800f17 	ldw	r6,60(sp)
8111aa28:	d9c01017 	ldw	r7,64(sp)
8111aa2c:	1009883a 	mov	r4,r2
8111aa30:	180b883a 	mov	r5,r3
8111aa34:	1110f940 	call	81110f94 <__muldf3>
8111aa38:	000d883a 	mov	r6,zero
8111aa3c:	01d00734 	movhi	r7,16412
8111aa40:	1009883a 	mov	r4,r2
8111aa44:	180b883a 	mov	r5,r3
8111aa48:	11252180 	call	81125218 <__adddf3>
8111aa4c:	047f3034 	movhi	r17,64704
8111aa50:	1021883a 	mov	r16,r2
8111aa54:	1c63883a 	add	r17,r3,r17
8111aa58:	d9000f17 	ldw	r4,60(sp)
8111aa5c:	d9401017 	ldw	r5,64(sp)
8111aa60:	000d883a 	mov	r6,zero
8111aa64:	01d00534 	movhi	r7,16404
8111aa68:	11266140 	call	81126614 <__subdf3>
8111aa6c:	800d883a 	mov	r6,r16
8111aa70:	880f883a 	mov	r7,r17
8111aa74:	1009883a 	mov	r4,r2
8111aa78:	180b883a 	mov	r5,r3
8111aa7c:	102b883a 	mov	r21,r2
8111aa80:	1829883a 	mov	r20,r3
8111aa84:	11264440 	call	81126444 <__gedf2>
8111aa88:	00806c16 	blt	zero,r2,8111ac3c <_dtoa_r+0x130c>
8111aa8c:	89e0003c 	xorhi	r7,r17,32768
8111aa90:	800d883a 	mov	r6,r16
8111aa94:	a809883a 	mov	r4,r21
8111aa98:	a00b883a 	mov	r5,r20
8111aa9c:	11265200 	call	81126520 <__ledf2>
8111aaa0:	103d7e0e 	bge	r2,zero,8111a09c <__reset+0xfb0fa09c>
8111aaa4:	002b883a 	mov	r21,zero
8111aaa8:	0023883a 	mov	r17,zero
8111aaac:	003efb06 	br	8111a69c <__reset+0xfb0fa69c>
8111aab0:	d8800717 	ldw	r2,28(sp)
8111aab4:	003bd006 	br	811199f8 <__reset+0xfb0f99f8>
8111aab8:	d9000a17 	ldw	r4,40(sp)
8111aabc:	d9800d17 	ldw	r6,52(sp)
8111aac0:	dd400a15 	stw	r21,40(sp)
8111aac4:	a905c83a 	sub	r2,r21,r4
8111aac8:	308d883a 	add	r6,r6,r2
8111aacc:	d9800d15 	stw	r6,52(sp)
8111aad0:	002b883a 	mov	r21,zero
8111aad4:	003e0606 	br	8111a2f0 <__reset+0xfb0fa2f0>
8111aad8:	9023883a 	mov	r17,r18
8111aadc:	9829883a 	mov	r20,r19
8111aae0:	04000084 	movi	r16,2
8111aae4:	003c9206 	br	81119d30 <__reset+0xfb0f9d30>
8111aae8:	04000044 	movi	r16,1
8111aaec:	dc000c15 	stw	r16,48(sp)
8111aaf0:	dc000615 	stw	r16,24(sp)
8111aaf4:	dc002215 	stw	r16,136(sp)
8111aaf8:	e0001115 	stw	zero,68(fp)
8111aafc:	000b883a 	mov	r5,zero
8111ab00:	003c6906 	br	81119ca8 <__reset+0xfb0f9ca8>
8111ab04:	3021883a 	mov	r16,r6
8111ab08:	003ffb06 	br	8111aaf8 <__reset+0xfb0faaf8>
8111ab0c:	1000021e 	bne	r2,zero,8111ab18 <_dtoa_r+0x11e8>
8111ab10:	4200004c 	andi	r8,r8,1
8111ab14:	403e7d1e 	bne	r8,zero,8111a50c <__reset+0xfb0fa50c>
8111ab18:	01000c04 	movi	r4,48
8111ab1c:	00000106 	br	8111ab24 <_dtoa_r+0x11f4>
8111ab20:	102f883a 	mov	r23,r2
8111ab24:	b8bfffc4 	addi	r2,r23,-1
8111ab28:	10c00007 	ldb	r3,0(r2)
8111ab2c:	193ffc26 	beq	r3,r4,8111ab20 <__reset+0xfb0fab20>
8111ab30:	003e8706 	br	8111a550 <__reset+0xfb0fa550>
8111ab34:	d8800517 	ldw	r2,20(sp)
8111ab38:	00a3c83a 	sub	r17,zero,r2
8111ab3c:	8800a426 	beq	r17,zero,8111add0 <_dtoa_r+0x14a0>
8111ab40:	888003cc 	andi	r2,r17,15
8111ab44:	100490fa 	slli	r2,r2,3
8111ab48:	00e04534 	movhi	r3,33044
8111ab4c:	18fa0a04 	addi	r3,r3,-6104
8111ab50:	1885883a 	add	r2,r3,r2
8111ab54:	11800017 	ldw	r6,0(r2)
8111ab58:	11c00117 	ldw	r7,4(r2)
8111ab5c:	9009883a 	mov	r4,r18
8111ab60:	980b883a 	mov	r5,r19
8111ab64:	8823d13a 	srai	r17,r17,4
8111ab68:	1110f940 	call	81110f94 <__muldf3>
8111ab6c:	d8800f15 	stw	r2,60(sp)
8111ab70:	d8c01015 	stw	r3,64(sp)
8111ab74:	8800e826 	beq	r17,zero,8111af18 <_dtoa_r+0x15e8>
8111ab78:	05204534 	movhi	r20,33044
8111ab7c:	a53a0004 	addi	r20,r20,-6144
8111ab80:	04000084 	movi	r16,2
8111ab84:	8980004c 	andi	r6,r17,1
8111ab88:	1009883a 	mov	r4,r2
8111ab8c:	8823d07a 	srai	r17,r17,1
8111ab90:	180b883a 	mov	r5,r3
8111ab94:	30000426 	beq	r6,zero,8111aba8 <_dtoa_r+0x1278>
8111ab98:	a1800017 	ldw	r6,0(r20)
8111ab9c:	a1c00117 	ldw	r7,4(r20)
8111aba0:	84000044 	addi	r16,r16,1
8111aba4:	1110f940 	call	81110f94 <__muldf3>
8111aba8:	a5000204 	addi	r20,r20,8
8111abac:	883ff51e 	bne	r17,zero,8111ab84 <__reset+0xfb0fab84>
8111abb0:	d8800f15 	stw	r2,60(sp)
8111abb4:	d8c01015 	stw	r3,64(sp)
8111abb8:	003c7606 	br	81119d94 <__reset+0xfb0f9d94>
8111abbc:	00c00c04 	movi	r3,48
8111abc0:	10c00005 	stb	r3,0(r2)
8111abc4:	d8c00517 	ldw	r3,20(sp)
8111abc8:	bd3fffc3 	ldbu	r20,-1(r23)
8111abcc:	18c00044 	addi	r3,r3,1
8111abd0:	d8c00515 	stw	r3,20(sp)
8111abd4:	003db906 	br	8111a2bc <__reset+0xfb0fa2bc>
8111abd8:	89400117 	ldw	r5,4(r17)
8111abdc:	e009883a 	mov	r4,fp
8111abe0:	111ca480 	call	8111ca48 <_Balloc>
8111abe4:	89800417 	ldw	r6,16(r17)
8111abe8:	89400304 	addi	r5,r17,12
8111abec:	11000304 	addi	r4,r2,12
8111abf0:	31800084 	addi	r6,r6,2
8111abf4:	318d883a 	add	r6,r6,r6
8111abf8:	318d883a 	add	r6,r6,r6
8111abfc:	1027883a 	mov	r19,r2
8111ac00:	1112b340 	call	81112b34 <memcpy>
8111ac04:	01800044 	movi	r6,1
8111ac08:	980b883a 	mov	r5,r19
8111ac0c:	e009883a 	mov	r4,fp
8111ac10:	111d1f80 	call	8111d1f8 <__lshift>
8111ac14:	1029883a 	mov	r20,r2
8111ac18:	003ecc06 	br	8111a74c <__reset+0xfb0fa74c>
8111ac1c:	00800e44 	movi	r2,57
8111ac20:	90809026 	beq	r18,r2,8111ae64 <_dtoa_r+0x1534>
8111ac24:	92000044 	addi	r8,r18,1
8111ac28:	003f1f06 	br	8111a8a8 <__reset+0xfb0fa8a8>
8111ac2c:	9011883a 	mov	r8,r18
8111ac30:	8825883a 	mov	r18,r17
8111ac34:	a023883a 	mov	r17,r20
8111ac38:	003e2906 	br	8111a4e0 <__reset+0xfb0fa4e0>
8111ac3c:	002b883a 	mov	r21,zero
8111ac40:	0023883a 	mov	r17,zero
8111ac44:	003f5406 	br	8111a998 <__reset+0xfb0fa998>
8111ac48:	61bfffc4 	addi	r6,r12,-1
8111ac4c:	300490fa 	slli	r2,r6,3
8111ac50:	00e04534 	movhi	r3,33044
8111ac54:	18fa0a04 	addi	r3,r3,-6104
8111ac58:	1885883a 	add	r2,r3,r2
8111ac5c:	11000017 	ldw	r4,0(r2)
8111ac60:	11400117 	ldw	r5,4(r2)
8111ac64:	d8800717 	ldw	r2,28(sp)
8111ac68:	880f883a 	mov	r7,r17
8111ac6c:	d9801215 	stw	r6,72(sp)
8111ac70:	800d883a 	mov	r6,r16
8111ac74:	db001615 	stw	r12,88(sp)
8111ac78:	15c00044 	addi	r23,r2,1
8111ac7c:	1110f940 	call	81110f94 <__muldf3>
8111ac80:	d9401017 	ldw	r5,64(sp)
8111ac84:	d9000f17 	ldw	r4,60(sp)
8111ac88:	d8c01515 	stw	r3,84(sp)
8111ac8c:	d8801415 	stw	r2,80(sp)
8111ac90:	1126f180 	call	81126f18 <__fixdfsi>
8111ac94:	1009883a 	mov	r4,r2
8111ac98:	1021883a 	mov	r16,r2
8111ac9c:	1126f980 	call	81126f98 <__floatsidf>
8111aca0:	d9000f17 	ldw	r4,60(sp)
8111aca4:	d9401017 	ldw	r5,64(sp)
8111aca8:	100d883a 	mov	r6,r2
8111acac:	180f883a 	mov	r7,r3
8111acb0:	11266140 	call	81126614 <__subdf3>
8111acb4:	1829883a 	mov	r20,r3
8111acb8:	d8c00717 	ldw	r3,28(sp)
8111acbc:	84000c04 	addi	r16,r16,48
8111acc0:	1023883a 	mov	r17,r2
8111acc4:	1c000005 	stb	r16,0(r3)
8111acc8:	db001617 	ldw	r12,88(sp)
8111accc:	00800044 	movi	r2,1
8111acd0:	60802226 	beq	r12,r2,8111ad5c <_dtoa_r+0x142c>
8111acd4:	d9c00717 	ldw	r7,28(sp)
8111acd8:	8805883a 	mov	r2,r17
8111acdc:	b82b883a 	mov	r21,r23
8111ace0:	3b19883a 	add	r12,r7,r12
8111ace4:	6023883a 	mov	r17,r12
8111ace8:	a007883a 	mov	r3,r20
8111acec:	dc800f15 	stw	r18,60(sp)
8111acf0:	000d883a 	mov	r6,zero
8111acf4:	01d00934 	movhi	r7,16420
8111acf8:	1009883a 	mov	r4,r2
8111acfc:	180b883a 	mov	r5,r3
8111ad00:	1110f940 	call	81110f94 <__muldf3>
8111ad04:	180b883a 	mov	r5,r3
8111ad08:	1009883a 	mov	r4,r2
8111ad0c:	1829883a 	mov	r20,r3
8111ad10:	1025883a 	mov	r18,r2
8111ad14:	1126f180 	call	81126f18 <__fixdfsi>
8111ad18:	1009883a 	mov	r4,r2
8111ad1c:	1021883a 	mov	r16,r2
8111ad20:	1126f980 	call	81126f98 <__floatsidf>
8111ad24:	100d883a 	mov	r6,r2
8111ad28:	180f883a 	mov	r7,r3
8111ad2c:	9009883a 	mov	r4,r18
8111ad30:	a00b883a 	mov	r5,r20
8111ad34:	84000c04 	addi	r16,r16,48
8111ad38:	11266140 	call	81126614 <__subdf3>
8111ad3c:	ad400044 	addi	r21,r21,1
8111ad40:	ac3fffc5 	stb	r16,-1(r21)
8111ad44:	ac7fea1e 	bne	r21,r17,8111acf0 <__reset+0xfb0facf0>
8111ad48:	1023883a 	mov	r17,r2
8111ad4c:	d8801217 	ldw	r2,72(sp)
8111ad50:	dc800f17 	ldw	r18,60(sp)
8111ad54:	1829883a 	mov	r20,r3
8111ad58:	b8af883a 	add	r23,r23,r2
8111ad5c:	d9001417 	ldw	r4,80(sp)
8111ad60:	d9401517 	ldw	r5,84(sp)
8111ad64:	000d883a 	mov	r6,zero
8111ad68:	01cff834 	movhi	r7,16352
8111ad6c:	11252180 	call	81125218 <__adddf3>
8111ad70:	880d883a 	mov	r6,r17
8111ad74:	a00f883a 	mov	r7,r20
8111ad78:	1009883a 	mov	r4,r2
8111ad7c:	180b883a 	mov	r5,r3
8111ad80:	11265200 	call	81126520 <__ledf2>
8111ad84:	10003e0e 	bge	r2,zero,8111ae80 <_dtoa_r+0x1550>
8111ad88:	d9001317 	ldw	r4,76(sp)
8111ad8c:	bd3fffc3 	ldbu	r20,-1(r23)
8111ad90:	d9000515 	stw	r4,20(sp)
8111ad94:	003d3b06 	br	8111a284 <__reset+0xfb0fa284>
8111ad98:	0027883a 	mov	r19,zero
8111ad9c:	003f1b06 	br	8111aa0c <__reset+0xfb0faa0c>
8111ada0:	d8800817 	ldw	r2,32(sp)
8111ada4:	11e9c83a 	sub	r20,r2,r7
8111ada8:	0005883a 	mov	r2,zero
8111adac:	003d5406 	br	8111a300 <__reset+0xfb0fa300>
8111adb0:	00800044 	movi	r2,1
8111adb4:	003dc706 	br	8111a4d4 <__reset+0xfb0fa4d4>
8111adb8:	d8c00217 	ldw	r3,8(sp)
8111adbc:	00800d84 	movi	r2,54
8111adc0:	dd400a17 	ldw	r21,40(sp)
8111adc4:	10c5c83a 	sub	r2,r2,r3
8111adc8:	dd000817 	ldw	r20,32(sp)
8111adcc:	003d4c06 	br	8111a300 <__reset+0xfb0fa300>
8111add0:	dc800f15 	stw	r18,60(sp)
8111add4:	dcc01015 	stw	r19,64(sp)
8111add8:	04000084 	movi	r16,2
8111addc:	003bed06 	br	81119d94 <__reset+0xfb0f9d94>
8111ade0:	d9000617 	ldw	r4,24(sp)
8111ade4:	203f0d26 	beq	r4,zero,8111aa1c <__reset+0xfb0faa1c>
8111ade8:	d9800c17 	ldw	r6,48(sp)
8111adec:	01bcab0e 	bge	zero,r6,8111a09c <__reset+0xfb0fa09c>
8111adf0:	d9401017 	ldw	r5,64(sp)
8111adf4:	d9000f17 	ldw	r4,60(sp)
8111adf8:	000d883a 	mov	r6,zero
8111adfc:	01d00934 	movhi	r7,16420
8111ae00:	1110f940 	call	81110f94 <__muldf3>
8111ae04:	81000044 	addi	r4,r16,1
8111ae08:	d8800f15 	stw	r2,60(sp)
8111ae0c:	d8c01015 	stw	r3,64(sp)
8111ae10:	1126f980 	call	81126f98 <__floatsidf>
8111ae14:	d9800f17 	ldw	r6,60(sp)
8111ae18:	d9c01017 	ldw	r7,64(sp)
8111ae1c:	1009883a 	mov	r4,r2
8111ae20:	180b883a 	mov	r5,r3
8111ae24:	1110f940 	call	81110f94 <__muldf3>
8111ae28:	01d00734 	movhi	r7,16412
8111ae2c:	000d883a 	mov	r6,zero
8111ae30:	1009883a 	mov	r4,r2
8111ae34:	180b883a 	mov	r5,r3
8111ae38:	11252180 	call	81125218 <__adddf3>
8111ae3c:	d9c00517 	ldw	r7,20(sp)
8111ae40:	047f3034 	movhi	r17,64704
8111ae44:	1021883a 	mov	r16,r2
8111ae48:	39ffffc4 	addi	r7,r7,-1
8111ae4c:	d9c01315 	stw	r7,76(sp)
8111ae50:	1c63883a 	add	r17,r3,r17
8111ae54:	db000c17 	ldw	r12,48(sp)
8111ae58:	003bea06 	br	81119e04 <__reset+0xfb0f9e04>
8111ae5c:	dc000915 	stw	r16,36(sp)
8111ae60:	003e0e06 	br	8111a69c <__reset+0xfb0fa69c>
8111ae64:	01000e44 	movi	r4,57
8111ae68:	8825883a 	mov	r18,r17
8111ae6c:	9dc00044 	addi	r23,r19,1
8111ae70:	99000005 	stb	r4,0(r19)
8111ae74:	a023883a 	mov	r17,r20
8111ae78:	dc000915 	stw	r16,36(sp)
8111ae7c:	003da406 	br	8111a510 <__reset+0xfb0fa510>
8111ae80:	d9801417 	ldw	r6,80(sp)
8111ae84:	d9c01517 	ldw	r7,84(sp)
8111ae88:	0009883a 	mov	r4,zero
8111ae8c:	014ff834 	movhi	r5,16352
8111ae90:	11266140 	call	81126614 <__subdf3>
8111ae94:	880d883a 	mov	r6,r17
8111ae98:	a00f883a 	mov	r7,r20
8111ae9c:	1009883a 	mov	r4,r2
8111aea0:	180b883a 	mov	r5,r3
8111aea4:	11264440 	call	81126444 <__gedf2>
8111aea8:	00bc7c0e 	bge	zero,r2,8111a09c <__reset+0xfb0fa09c>
8111aeac:	01000c04 	movi	r4,48
8111aeb0:	00000106 	br	8111aeb8 <_dtoa_r+0x1588>
8111aeb4:	102f883a 	mov	r23,r2
8111aeb8:	b8bfffc4 	addi	r2,r23,-1
8111aebc:	10c00007 	ldb	r3,0(r2)
8111aec0:	193ffc26 	beq	r3,r4,8111aeb4 <__reset+0xfb0faeb4>
8111aec4:	d9801317 	ldw	r6,76(sp)
8111aec8:	d9800515 	stw	r6,20(sp)
8111aecc:	003c4406 	br	81119fe0 <__reset+0xfb0f9fe0>
8111aed0:	d9801317 	ldw	r6,76(sp)
8111aed4:	d9800515 	stw	r6,20(sp)
8111aed8:	003cea06 	br	8111a284 <__reset+0xfb0fa284>
8111aedc:	dd800f17 	ldw	r22,60(sp)
8111aee0:	dcc01017 	ldw	r19,64(sp)
8111aee4:	dc801217 	ldw	r18,72(sp)
8111aee8:	003c6c06 	br	8111a09c <__reset+0xfb0fa09c>
8111aeec:	903e031e 	bne	r18,zero,8111a6fc <__reset+0xfb0fa6fc>
8111aef0:	003ebb06 	br	8111a9e0 <__reset+0xfb0fa9e0>
8111aef4:	103e6c1e 	bne	r2,zero,8111a8a8 <__reset+0xfb0fa8a8>
8111aef8:	4080004c 	andi	r2,r8,1
8111aefc:	103e6a26 	beq	r2,zero,8111a8a8 <__reset+0xfb0fa8a8>
8111af00:	003e6606 	br	8111a89c <__reset+0xfb0fa89c>
8111af04:	d8c00317 	ldw	r3,12(sp)
8111af08:	00800084 	movi	r2,2
8111af0c:	10c02916 	blt	r2,r3,8111afb4 <_dtoa_r+0x1684>
8111af10:	d9000c17 	ldw	r4,48(sp)
8111af14:	003e8806 	br	8111a938 <__reset+0xfb0fa938>
8111af18:	04000084 	movi	r16,2
8111af1c:	003b9d06 	br	81119d94 <__reset+0xfb0f9d94>
8111af20:	d9001317 	ldw	r4,76(sp)
8111af24:	d9000515 	stw	r4,20(sp)
8111af28:	003cd606 	br	8111a284 <__reset+0xfb0fa284>
8111af2c:	d8801317 	ldw	r2,76(sp)
8111af30:	d8800515 	stw	r2,20(sp)
8111af34:	003c2a06 	br	81119fe0 <__reset+0xfb0f9fe0>
8111af38:	d9800317 	ldw	r6,12(sp)
8111af3c:	00800084 	movi	r2,2
8111af40:	11801516 	blt	r2,r6,8111af98 <_dtoa_r+0x1668>
8111af44:	d9c00c17 	ldw	r7,48(sp)
8111af48:	d9c00615 	stw	r7,24(sp)
8111af4c:	003df706 	br	8111a72c <__reset+0xfb0fa72c>
8111af50:	193d3926 	beq	r3,r4,8111a438 <__reset+0xfb0fa438>
8111af54:	00c00f04 	movi	r3,60
8111af58:	1885c83a 	sub	r2,r3,r2
8111af5c:	003ddf06 	br	8111a6dc <__reset+0xfb0fa6dc>
8111af60:	e009883a 	mov	r4,fp
8111af64:	e0001115 	stw	zero,68(fp)
8111af68:	000b883a 	mov	r5,zero
8111af6c:	111ca480 	call	8111ca48 <_Balloc>
8111af70:	d8800715 	stw	r2,28(sp)
8111af74:	d8c00717 	ldw	r3,28(sp)
8111af78:	00bfffc4 	movi	r2,-1
8111af7c:	01000044 	movi	r4,1
8111af80:	d8800c15 	stw	r2,48(sp)
8111af84:	e0c01015 	stw	r3,64(fp)
8111af88:	d9000b15 	stw	r4,44(sp)
8111af8c:	d8800615 	stw	r2,24(sp)
8111af90:	d8002215 	stw	zero,136(sp)
8111af94:	003c4106 	br	8111a09c <__reset+0xfb0fa09c>
8111af98:	d8c00c17 	ldw	r3,48(sp)
8111af9c:	d8c00615 	stw	r3,24(sp)
8111afa0:	003e7006 	br	8111a964 <__reset+0xfb0fa964>
8111afa4:	04400044 	movi	r17,1
8111afa8:	003b2006 	br	81119c2c <__reset+0xfb0f9c2c>
8111afac:	000b883a 	mov	r5,zero
8111afb0:	003b3d06 	br	81119ca8 <__reset+0xfb0f9ca8>
8111afb4:	d8800c17 	ldw	r2,48(sp)
8111afb8:	d8800615 	stw	r2,24(sp)
8111afbc:	003e6906 	br	8111a964 <__reset+0xfb0fa964>

8111afc0 <__sflush_r>:
8111afc0:	defffb04 	addi	sp,sp,-20
8111afc4:	de00012e 	bgeu	sp,et,8111afcc <__sflush_r+0xc>
8111afc8:	003b68fa 	trap	3
8111afcc:	2880030b 	ldhu	r2,12(r5)
8111afd0:	dcc00315 	stw	r19,12(sp)
8111afd4:	dc400115 	stw	r17,4(sp)
8111afd8:	dfc00415 	stw	ra,16(sp)
8111afdc:	dc800215 	stw	r18,8(sp)
8111afe0:	dc000015 	stw	r16,0(sp)
8111afe4:	10c0020c 	andi	r3,r2,8
8111afe8:	2823883a 	mov	r17,r5
8111afec:	2027883a 	mov	r19,r4
8111aff0:	1800311e 	bne	r3,zero,8111b0b8 <__sflush_r+0xf8>
8111aff4:	28c00117 	ldw	r3,4(r5)
8111aff8:	10820014 	ori	r2,r2,2048
8111affc:	2880030d 	sth	r2,12(r5)
8111b000:	00c04b0e 	bge	zero,r3,8111b130 <__sflush_r+0x170>
8111b004:	8a000a17 	ldw	r8,40(r17)
8111b008:	40002326 	beq	r8,zero,8111b098 <__sflush_r+0xd8>
8111b00c:	9c000017 	ldw	r16,0(r19)
8111b010:	10c4000c 	andi	r3,r2,4096
8111b014:	98000015 	stw	zero,0(r19)
8111b018:	18004826 	beq	r3,zero,8111b13c <__sflush_r+0x17c>
8111b01c:	89801417 	ldw	r6,80(r17)
8111b020:	10c0010c 	andi	r3,r2,4
8111b024:	18000626 	beq	r3,zero,8111b040 <__sflush_r+0x80>
8111b028:	88c00117 	ldw	r3,4(r17)
8111b02c:	88800c17 	ldw	r2,48(r17)
8111b030:	30cdc83a 	sub	r6,r6,r3
8111b034:	10000226 	beq	r2,zero,8111b040 <__sflush_r+0x80>
8111b038:	88800f17 	ldw	r2,60(r17)
8111b03c:	308dc83a 	sub	r6,r6,r2
8111b040:	89400717 	ldw	r5,28(r17)
8111b044:	000f883a 	mov	r7,zero
8111b048:	9809883a 	mov	r4,r19
8111b04c:	403ee83a 	callr	r8
8111b050:	00ffffc4 	movi	r3,-1
8111b054:	10c04426 	beq	r2,r3,8111b168 <__sflush_r+0x1a8>
8111b058:	88c0030b 	ldhu	r3,12(r17)
8111b05c:	89000417 	ldw	r4,16(r17)
8111b060:	88000115 	stw	zero,4(r17)
8111b064:	197dffcc 	andi	r5,r3,63487
8111b068:	8940030d 	sth	r5,12(r17)
8111b06c:	89000015 	stw	r4,0(r17)
8111b070:	18c4000c 	andi	r3,r3,4096
8111b074:	18002c1e 	bne	r3,zero,8111b128 <__sflush_r+0x168>
8111b078:	89400c17 	ldw	r5,48(r17)
8111b07c:	9c000015 	stw	r16,0(r19)
8111b080:	28000526 	beq	r5,zero,8111b098 <__sflush_r+0xd8>
8111b084:	88801004 	addi	r2,r17,64
8111b088:	28800226 	beq	r5,r2,8111b094 <__sflush_r+0xd4>
8111b08c:	9809883a 	mov	r4,r19
8111b090:	111ba780 	call	8111ba78 <_free_r>
8111b094:	88000c15 	stw	zero,48(r17)
8111b098:	0005883a 	mov	r2,zero
8111b09c:	dfc00417 	ldw	ra,16(sp)
8111b0a0:	dcc00317 	ldw	r19,12(sp)
8111b0a4:	dc800217 	ldw	r18,8(sp)
8111b0a8:	dc400117 	ldw	r17,4(sp)
8111b0ac:	dc000017 	ldw	r16,0(sp)
8111b0b0:	dec00504 	addi	sp,sp,20
8111b0b4:	f800283a 	ret
8111b0b8:	2c800417 	ldw	r18,16(r5)
8111b0bc:	903ff626 	beq	r18,zero,8111b098 <__reset+0xfb0fb098>
8111b0c0:	2c000017 	ldw	r16,0(r5)
8111b0c4:	108000cc 	andi	r2,r2,3
8111b0c8:	2c800015 	stw	r18,0(r5)
8111b0cc:	84a1c83a 	sub	r16,r16,r18
8111b0d0:	1000131e 	bne	r2,zero,8111b120 <__sflush_r+0x160>
8111b0d4:	28800517 	ldw	r2,20(r5)
8111b0d8:	88800215 	stw	r2,8(r17)
8111b0dc:	04000316 	blt	zero,r16,8111b0ec <__sflush_r+0x12c>
8111b0e0:	003fed06 	br	8111b098 <__reset+0xfb0fb098>
8111b0e4:	90a5883a 	add	r18,r18,r2
8111b0e8:	043feb0e 	bge	zero,r16,8111b098 <__reset+0xfb0fb098>
8111b0ec:	88800917 	ldw	r2,36(r17)
8111b0f0:	89400717 	ldw	r5,28(r17)
8111b0f4:	800f883a 	mov	r7,r16
8111b0f8:	900d883a 	mov	r6,r18
8111b0fc:	9809883a 	mov	r4,r19
8111b100:	103ee83a 	callr	r2
8111b104:	80a1c83a 	sub	r16,r16,r2
8111b108:	00bff616 	blt	zero,r2,8111b0e4 <__reset+0xfb0fb0e4>
8111b10c:	88c0030b 	ldhu	r3,12(r17)
8111b110:	00bfffc4 	movi	r2,-1
8111b114:	18c01014 	ori	r3,r3,64
8111b118:	88c0030d 	sth	r3,12(r17)
8111b11c:	003fdf06 	br	8111b09c <__reset+0xfb0fb09c>
8111b120:	0005883a 	mov	r2,zero
8111b124:	003fec06 	br	8111b0d8 <__reset+0xfb0fb0d8>
8111b128:	88801415 	stw	r2,80(r17)
8111b12c:	003fd206 	br	8111b078 <__reset+0xfb0fb078>
8111b130:	28c00f17 	ldw	r3,60(r5)
8111b134:	00ffb316 	blt	zero,r3,8111b004 <__reset+0xfb0fb004>
8111b138:	003fd706 	br	8111b098 <__reset+0xfb0fb098>
8111b13c:	89400717 	ldw	r5,28(r17)
8111b140:	000d883a 	mov	r6,zero
8111b144:	01c00044 	movi	r7,1
8111b148:	9809883a 	mov	r4,r19
8111b14c:	403ee83a 	callr	r8
8111b150:	100d883a 	mov	r6,r2
8111b154:	00bfffc4 	movi	r2,-1
8111b158:	30801426 	beq	r6,r2,8111b1ac <__sflush_r+0x1ec>
8111b15c:	8880030b 	ldhu	r2,12(r17)
8111b160:	8a000a17 	ldw	r8,40(r17)
8111b164:	003fae06 	br	8111b020 <__reset+0xfb0fb020>
8111b168:	98c00017 	ldw	r3,0(r19)
8111b16c:	183fba26 	beq	r3,zero,8111b058 <__reset+0xfb0fb058>
8111b170:	01000744 	movi	r4,29
8111b174:	19000626 	beq	r3,r4,8111b190 <__sflush_r+0x1d0>
8111b178:	01000584 	movi	r4,22
8111b17c:	19000426 	beq	r3,r4,8111b190 <__sflush_r+0x1d0>
8111b180:	88c0030b 	ldhu	r3,12(r17)
8111b184:	18c01014 	ori	r3,r3,64
8111b188:	88c0030d 	sth	r3,12(r17)
8111b18c:	003fc306 	br	8111b09c <__reset+0xfb0fb09c>
8111b190:	8880030b 	ldhu	r2,12(r17)
8111b194:	88c00417 	ldw	r3,16(r17)
8111b198:	88000115 	stw	zero,4(r17)
8111b19c:	10bdffcc 	andi	r2,r2,63487
8111b1a0:	8880030d 	sth	r2,12(r17)
8111b1a4:	88c00015 	stw	r3,0(r17)
8111b1a8:	003fb306 	br	8111b078 <__reset+0xfb0fb078>
8111b1ac:	98800017 	ldw	r2,0(r19)
8111b1b0:	103fea26 	beq	r2,zero,8111b15c <__reset+0xfb0fb15c>
8111b1b4:	00c00744 	movi	r3,29
8111b1b8:	10c00226 	beq	r2,r3,8111b1c4 <__sflush_r+0x204>
8111b1bc:	00c00584 	movi	r3,22
8111b1c0:	10c0031e 	bne	r2,r3,8111b1d0 <__sflush_r+0x210>
8111b1c4:	9c000015 	stw	r16,0(r19)
8111b1c8:	0005883a 	mov	r2,zero
8111b1cc:	003fb306 	br	8111b09c <__reset+0xfb0fb09c>
8111b1d0:	88c0030b 	ldhu	r3,12(r17)
8111b1d4:	3005883a 	mov	r2,r6
8111b1d8:	18c01014 	ori	r3,r3,64
8111b1dc:	88c0030d 	sth	r3,12(r17)
8111b1e0:	003fae06 	br	8111b09c <__reset+0xfb0fb09c>

8111b1e4 <_fflush_r>:
8111b1e4:	defffd04 	addi	sp,sp,-12
8111b1e8:	de00012e 	bgeu	sp,et,8111b1f0 <_fflush_r+0xc>
8111b1ec:	003b68fa 	trap	3
8111b1f0:	dc000115 	stw	r16,4(sp)
8111b1f4:	dfc00215 	stw	ra,8(sp)
8111b1f8:	2021883a 	mov	r16,r4
8111b1fc:	20000226 	beq	r4,zero,8111b208 <_fflush_r+0x24>
8111b200:	20800e17 	ldw	r2,56(r4)
8111b204:	10000c26 	beq	r2,zero,8111b238 <_fflush_r+0x54>
8111b208:	2880030f 	ldh	r2,12(r5)
8111b20c:	1000051e 	bne	r2,zero,8111b224 <_fflush_r+0x40>
8111b210:	0005883a 	mov	r2,zero
8111b214:	dfc00217 	ldw	ra,8(sp)
8111b218:	dc000117 	ldw	r16,4(sp)
8111b21c:	dec00304 	addi	sp,sp,12
8111b220:	f800283a 	ret
8111b224:	8009883a 	mov	r4,r16
8111b228:	dfc00217 	ldw	ra,8(sp)
8111b22c:	dc000117 	ldw	r16,4(sp)
8111b230:	dec00304 	addi	sp,sp,12
8111b234:	111afc01 	jmpi	8111afc0 <__sflush_r>
8111b238:	d9400015 	stw	r5,0(sp)
8111b23c:	111b5e00 	call	8111b5e0 <__sinit>
8111b240:	d9400017 	ldw	r5,0(sp)
8111b244:	003ff006 	br	8111b208 <__reset+0xfb0fb208>

8111b248 <fflush>:
8111b248:	20000526 	beq	r4,zero,8111b260 <fflush+0x18>
8111b24c:	00a04534 	movhi	r2,33044
8111b250:	1082cb04 	addi	r2,r2,2860
8111b254:	200b883a 	mov	r5,r4
8111b258:	11000017 	ldw	r4,0(r2)
8111b25c:	111b1e41 	jmpi	8111b1e4 <_fflush_r>
8111b260:	00a04534 	movhi	r2,33044
8111b264:	1082ca04 	addi	r2,r2,2856
8111b268:	11000017 	ldw	r4,0(r2)
8111b26c:	016044b4 	movhi	r5,33042
8111b270:	296c7904 	addi	r5,r5,-19996
8111b274:	111c3201 	jmpi	8111c320 <_fwalk_reent>

8111b278 <__fp_unlock>:
8111b278:	0005883a 	mov	r2,zero
8111b27c:	f800283a 	ret

8111b280 <_cleanup_r>:
8111b280:	016044b4 	movhi	r5,33042
8111b284:	294c0f04 	addi	r5,r5,12348
8111b288:	111c3201 	jmpi	8111c320 <_fwalk_reent>

8111b28c <__sinit.part.1>:
8111b28c:	defff704 	addi	sp,sp,-36
8111b290:	00e044b4 	movhi	r3,33042
8111b294:	de00012e 	bgeu	sp,et,8111b29c <__sinit.part.1+0x10>
8111b298:	003b68fa 	trap	3
8111b29c:	18eca004 	addi	r3,r3,-19840
8111b2a0:	dfc00815 	stw	ra,32(sp)
8111b2a4:	ddc00715 	stw	r23,28(sp)
8111b2a8:	dd800615 	stw	r22,24(sp)
8111b2ac:	dd400515 	stw	r21,20(sp)
8111b2b0:	dd000415 	stw	r20,16(sp)
8111b2b4:	dcc00315 	stw	r19,12(sp)
8111b2b8:	dc800215 	stw	r18,8(sp)
8111b2bc:	dc400115 	stw	r17,4(sp)
8111b2c0:	dc000015 	stw	r16,0(sp)
8111b2c4:	24000117 	ldw	r16,4(r4)
8111b2c8:	20c00f15 	stw	r3,60(r4)
8111b2cc:	2080bb04 	addi	r2,r4,748
8111b2d0:	00c000c4 	movi	r3,3
8111b2d4:	20c0b915 	stw	r3,740(r4)
8111b2d8:	2080ba15 	stw	r2,744(r4)
8111b2dc:	2000b815 	stw	zero,736(r4)
8111b2e0:	05c00204 	movi	r23,8
8111b2e4:	00800104 	movi	r2,4
8111b2e8:	2025883a 	mov	r18,r4
8111b2ec:	b80d883a 	mov	r6,r23
8111b2f0:	81001704 	addi	r4,r16,92
8111b2f4:	000b883a 	mov	r5,zero
8111b2f8:	80000015 	stw	zero,0(r16)
8111b2fc:	80000115 	stw	zero,4(r16)
8111b300:	80000215 	stw	zero,8(r16)
8111b304:	8080030d 	sth	r2,12(r16)
8111b308:	80001915 	stw	zero,100(r16)
8111b30c:	8000038d 	sth	zero,14(r16)
8111b310:	80000415 	stw	zero,16(r16)
8111b314:	80000515 	stw	zero,20(r16)
8111b318:	80000615 	stw	zero,24(r16)
8111b31c:	1112c840 	call	81112c84 <memset>
8111b320:	05a04474 	movhi	r22,33041
8111b324:	94400217 	ldw	r17,8(r18)
8111b328:	05604474 	movhi	r21,33041
8111b32c:	05204474 	movhi	r20,33041
8111b330:	04e04474 	movhi	r19,33041
8111b334:	b58cc404 	addi	r22,r22,13072
8111b338:	ad4cdd04 	addi	r21,r21,13172
8111b33c:	a50cfe04 	addi	r20,r20,13304
8111b340:	9ccd1704 	addi	r19,r19,13404
8111b344:	85800815 	stw	r22,32(r16)
8111b348:	85400915 	stw	r21,36(r16)
8111b34c:	85000a15 	stw	r20,40(r16)
8111b350:	84c00b15 	stw	r19,44(r16)
8111b354:	84000715 	stw	r16,28(r16)
8111b358:	00800284 	movi	r2,10
8111b35c:	8880030d 	sth	r2,12(r17)
8111b360:	00800044 	movi	r2,1
8111b364:	b80d883a 	mov	r6,r23
8111b368:	89001704 	addi	r4,r17,92
8111b36c:	000b883a 	mov	r5,zero
8111b370:	88000015 	stw	zero,0(r17)
8111b374:	88000115 	stw	zero,4(r17)
8111b378:	88000215 	stw	zero,8(r17)
8111b37c:	88001915 	stw	zero,100(r17)
8111b380:	8880038d 	sth	r2,14(r17)
8111b384:	88000415 	stw	zero,16(r17)
8111b388:	88000515 	stw	zero,20(r17)
8111b38c:	88000615 	stw	zero,24(r17)
8111b390:	1112c840 	call	81112c84 <memset>
8111b394:	94000317 	ldw	r16,12(r18)
8111b398:	00800484 	movi	r2,18
8111b39c:	8c400715 	stw	r17,28(r17)
8111b3a0:	8d800815 	stw	r22,32(r17)
8111b3a4:	8d400915 	stw	r21,36(r17)
8111b3a8:	8d000a15 	stw	r20,40(r17)
8111b3ac:	8cc00b15 	stw	r19,44(r17)
8111b3b0:	8080030d 	sth	r2,12(r16)
8111b3b4:	00800084 	movi	r2,2
8111b3b8:	80000015 	stw	zero,0(r16)
8111b3bc:	80000115 	stw	zero,4(r16)
8111b3c0:	80000215 	stw	zero,8(r16)
8111b3c4:	80001915 	stw	zero,100(r16)
8111b3c8:	8080038d 	sth	r2,14(r16)
8111b3cc:	80000415 	stw	zero,16(r16)
8111b3d0:	80000515 	stw	zero,20(r16)
8111b3d4:	80000615 	stw	zero,24(r16)
8111b3d8:	b80d883a 	mov	r6,r23
8111b3dc:	000b883a 	mov	r5,zero
8111b3e0:	81001704 	addi	r4,r16,92
8111b3e4:	1112c840 	call	81112c84 <memset>
8111b3e8:	00800044 	movi	r2,1
8111b3ec:	84000715 	stw	r16,28(r16)
8111b3f0:	85800815 	stw	r22,32(r16)
8111b3f4:	85400915 	stw	r21,36(r16)
8111b3f8:	85000a15 	stw	r20,40(r16)
8111b3fc:	84c00b15 	stw	r19,44(r16)
8111b400:	90800e15 	stw	r2,56(r18)
8111b404:	dfc00817 	ldw	ra,32(sp)
8111b408:	ddc00717 	ldw	r23,28(sp)
8111b40c:	dd800617 	ldw	r22,24(sp)
8111b410:	dd400517 	ldw	r21,20(sp)
8111b414:	dd000417 	ldw	r20,16(sp)
8111b418:	dcc00317 	ldw	r19,12(sp)
8111b41c:	dc800217 	ldw	r18,8(sp)
8111b420:	dc400117 	ldw	r17,4(sp)
8111b424:	dc000017 	ldw	r16,0(sp)
8111b428:	dec00904 	addi	sp,sp,36
8111b42c:	f800283a 	ret

8111b430 <__fp_lock>:
8111b430:	0005883a 	mov	r2,zero
8111b434:	f800283a 	ret

8111b438 <__sfmoreglue>:
8111b438:	defffc04 	addi	sp,sp,-16
8111b43c:	de00012e 	bgeu	sp,et,8111b444 <__sfmoreglue+0xc>
8111b440:	003b68fa 	trap	3
8111b444:	dc400115 	stw	r17,4(sp)
8111b448:	2c7fffc4 	addi	r17,r5,-1
8111b44c:	8c401a24 	muli	r17,r17,104
8111b450:	dc800215 	stw	r18,8(sp)
8111b454:	2825883a 	mov	r18,r5
8111b458:	89401d04 	addi	r5,r17,116
8111b45c:	dc000015 	stw	r16,0(sp)
8111b460:	dfc00315 	stw	ra,12(sp)
8111b464:	11123200 	call	81112320 <_malloc_r>
8111b468:	1021883a 	mov	r16,r2
8111b46c:	10000726 	beq	r2,zero,8111b48c <__sfmoreglue+0x54>
8111b470:	11000304 	addi	r4,r2,12
8111b474:	10000015 	stw	zero,0(r2)
8111b478:	14800115 	stw	r18,4(r2)
8111b47c:	11000215 	stw	r4,8(r2)
8111b480:	89801a04 	addi	r6,r17,104
8111b484:	000b883a 	mov	r5,zero
8111b488:	1112c840 	call	81112c84 <memset>
8111b48c:	8005883a 	mov	r2,r16
8111b490:	dfc00317 	ldw	ra,12(sp)
8111b494:	dc800217 	ldw	r18,8(sp)
8111b498:	dc400117 	ldw	r17,4(sp)
8111b49c:	dc000017 	ldw	r16,0(sp)
8111b4a0:	dec00404 	addi	sp,sp,16
8111b4a4:	f800283a 	ret

8111b4a8 <__sfp>:
8111b4a8:	defffb04 	addi	sp,sp,-20
8111b4ac:	de00012e 	bgeu	sp,et,8111b4b4 <__sfp+0xc>
8111b4b0:	003b68fa 	trap	3
8111b4b4:	dc000015 	stw	r16,0(sp)
8111b4b8:	04204534 	movhi	r16,33044
8111b4bc:	8402ca04 	addi	r16,r16,2856
8111b4c0:	dcc00315 	stw	r19,12(sp)
8111b4c4:	2027883a 	mov	r19,r4
8111b4c8:	81000017 	ldw	r4,0(r16)
8111b4cc:	dfc00415 	stw	ra,16(sp)
8111b4d0:	dc800215 	stw	r18,8(sp)
8111b4d4:	20800e17 	ldw	r2,56(r4)
8111b4d8:	dc400115 	stw	r17,4(sp)
8111b4dc:	1000021e 	bne	r2,zero,8111b4e8 <__sfp+0x40>
8111b4e0:	111b28c0 	call	8111b28c <__sinit.part.1>
8111b4e4:	81000017 	ldw	r4,0(r16)
8111b4e8:	2480b804 	addi	r18,r4,736
8111b4ec:	047fffc4 	movi	r17,-1
8111b4f0:	91000117 	ldw	r4,4(r18)
8111b4f4:	94000217 	ldw	r16,8(r18)
8111b4f8:	213fffc4 	addi	r4,r4,-1
8111b4fc:	20000a16 	blt	r4,zero,8111b528 <__sfp+0x80>
8111b500:	8080030f 	ldh	r2,12(r16)
8111b504:	10000c26 	beq	r2,zero,8111b538 <__sfp+0x90>
8111b508:	80c01d04 	addi	r3,r16,116
8111b50c:	00000206 	br	8111b518 <__sfp+0x70>
8111b510:	18bfe60f 	ldh	r2,-104(r3)
8111b514:	10000826 	beq	r2,zero,8111b538 <__sfp+0x90>
8111b518:	213fffc4 	addi	r4,r4,-1
8111b51c:	1c3ffd04 	addi	r16,r3,-12
8111b520:	18c01a04 	addi	r3,r3,104
8111b524:	247ffa1e 	bne	r4,r17,8111b510 <__reset+0xfb0fb510>
8111b528:	90800017 	ldw	r2,0(r18)
8111b52c:	10001d26 	beq	r2,zero,8111b5a4 <__sfp+0xfc>
8111b530:	1025883a 	mov	r18,r2
8111b534:	003fee06 	br	8111b4f0 <__reset+0xfb0fb4f0>
8111b538:	00bfffc4 	movi	r2,-1
8111b53c:	8080038d 	sth	r2,14(r16)
8111b540:	00800044 	movi	r2,1
8111b544:	8080030d 	sth	r2,12(r16)
8111b548:	80001915 	stw	zero,100(r16)
8111b54c:	80000015 	stw	zero,0(r16)
8111b550:	80000215 	stw	zero,8(r16)
8111b554:	80000115 	stw	zero,4(r16)
8111b558:	80000415 	stw	zero,16(r16)
8111b55c:	80000515 	stw	zero,20(r16)
8111b560:	80000615 	stw	zero,24(r16)
8111b564:	01800204 	movi	r6,8
8111b568:	000b883a 	mov	r5,zero
8111b56c:	81001704 	addi	r4,r16,92
8111b570:	1112c840 	call	81112c84 <memset>
8111b574:	8005883a 	mov	r2,r16
8111b578:	80000c15 	stw	zero,48(r16)
8111b57c:	80000d15 	stw	zero,52(r16)
8111b580:	80001115 	stw	zero,68(r16)
8111b584:	80001215 	stw	zero,72(r16)
8111b588:	dfc00417 	ldw	ra,16(sp)
8111b58c:	dcc00317 	ldw	r19,12(sp)
8111b590:	dc800217 	ldw	r18,8(sp)
8111b594:	dc400117 	ldw	r17,4(sp)
8111b598:	dc000017 	ldw	r16,0(sp)
8111b59c:	dec00504 	addi	sp,sp,20
8111b5a0:	f800283a 	ret
8111b5a4:	01400104 	movi	r5,4
8111b5a8:	9809883a 	mov	r4,r19
8111b5ac:	111b4380 	call	8111b438 <__sfmoreglue>
8111b5b0:	90800015 	stw	r2,0(r18)
8111b5b4:	103fde1e 	bne	r2,zero,8111b530 <__reset+0xfb0fb530>
8111b5b8:	00800304 	movi	r2,12
8111b5bc:	98800015 	stw	r2,0(r19)
8111b5c0:	0005883a 	mov	r2,zero
8111b5c4:	003ff006 	br	8111b588 <__reset+0xfb0fb588>

8111b5c8 <_cleanup>:
8111b5c8:	00a04534 	movhi	r2,33044
8111b5cc:	1082ca04 	addi	r2,r2,2856
8111b5d0:	11000017 	ldw	r4,0(r2)
8111b5d4:	016044b4 	movhi	r5,33042
8111b5d8:	294c0f04 	addi	r5,r5,12348
8111b5dc:	111c3201 	jmpi	8111c320 <_fwalk_reent>

8111b5e0 <__sinit>:
8111b5e0:	20800e17 	ldw	r2,56(r4)
8111b5e4:	10000126 	beq	r2,zero,8111b5ec <__sinit+0xc>
8111b5e8:	f800283a 	ret
8111b5ec:	111b28c1 	jmpi	8111b28c <__sinit.part.1>

8111b5f0 <__sfp_lock_acquire>:
8111b5f0:	f800283a 	ret

8111b5f4 <__sfp_lock_release>:
8111b5f4:	f800283a 	ret

8111b5f8 <__sinit_lock_acquire>:
8111b5f8:	f800283a 	ret

8111b5fc <__sinit_lock_release>:
8111b5fc:	f800283a 	ret

8111b600 <__fp_lock_all>:
8111b600:	00a04534 	movhi	r2,33044
8111b604:	1082cb04 	addi	r2,r2,2860
8111b608:	11000017 	ldw	r4,0(r2)
8111b60c:	016044b4 	movhi	r5,33042
8111b610:	296d0c04 	addi	r5,r5,-19408
8111b614:	111c2541 	jmpi	8111c254 <_fwalk>

8111b618 <__fp_unlock_all>:
8111b618:	00a04534 	movhi	r2,33044
8111b61c:	1082cb04 	addi	r2,r2,2860
8111b620:	11000017 	ldw	r4,0(r2)
8111b624:	016044b4 	movhi	r5,33042
8111b628:	296c9e04 	addi	r5,r5,-19848
8111b62c:	111c2541 	jmpi	8111c254 <_fwalk>

8111b630 <__sflags>:
8111b630:	28800007 	ldb	r2,0(r5)
8111b634:	00c01c84 	movi	r3,114
8111b638:	10c02426 	beq	r2,r3,8111b6cc <__sflags+0x9c>
8111b63c:	00c01dc4 	movi	r3,119
8111b640:	10c01e26 	beq	r2,r3,8111b6bc <__sflags+0x8c>
8111b644:	00c01844 	movi	r3,97
8111b648:	10c00426 	beq	r2,r3,8111b65c <__sflags+0x2c>
8111b64c:	00800584 	movi	r2,22
8111b650:	20800015 	stw	r2,0(r4)
8111b654:	0005883a 	mov	r2,zero
8111b658:	f800283a 	ret
8111b65c:	02c08204 	movi	r11,520
8111b660:	01000044 	movi	r4,1
8111b664:	00804204 	movi	r2,264
8111b668:	01c00ac4 	movi	r7,43
8111b66c:	02bff8c4 	movi	r10,-29
8111b670:	027fff04 	movi	r9,-4
8111b674:	02001e04 	movi	r8,120
8111b678:	29400044 	addi	r5,r5,1
8111b67c:	28c00007 	ldb	r3,0(r5)
8111b680:	18000626 	beq	r3,zero,8111b69c <__sflags+0x6c>
8111b684:	19c00826 	beq	r3,r7,8111b6a8 <__sflags+0x78>
8111b688:	1a3ffb1e 	bne	r3,r8,8111b678 <__reset+0xfb0fb678>
8111b68c:	29400044 	addi	r5,r5,1
8111b690:	28c00007 	ldb	r3,0(r5)
8111b694:	21020014 	ori	r4,r4,2048
8111b698:	183ffa1e 	bne	r3,zero,8111b684 <__reset+0xfb0fb684>
8111b69c:	22c8b03a 	or	r4,r4,r11
8111b6a0:	31000015 	stw	r4,0(r6)
8111b6a4:	f800283a 	ret
8111b6a8:	1284703a 	and	r2,r2,r10
8111b6ac:	2248703a 	and	r4,r4,r9
8111b6b0:	10800414 	ori	r2,r2,16
8111b6b4:	21000094 	ori	r4,r4,2
8111b6b8:	003fef06 	br	8111b678 <__reset+0xfb0fb678>
8111b6bc:	02c18004 	movi	r11,1536
8111b6c0:	01000044 	movi	r4,1
8111b6c4:	00800204 	movi	r2,8
8111b6c8:	003fe706 	br	8111b668 <__reset+0xfb0fb668>
8111b6cc:	0017883a 	mov	r11,zero
8111b6d0:	0009883a 	mov	r4,zero
8111b6d4:	00800104 	movi	r2,4
8111b6d8:	003fe306 	br	8111b668 <__reset+0xfb0fb668>

8111b6dc <_fread_r>:
8111b6dc:	defff404 	addi	sp,sp,-48
8111b6e0:	de00012e 	bgeu	sp,et,8111b6e8 <_fread_r+0xc>
8111b6e4:	003b68fa 	trap	3
8111b6e8:	dd800815 	stw	r22,32(sp)
8111b6ec:	39ad383a 	mul	r22,r7,r6
8111b6f0:	dc000215 	stw	r16,8(sp)
8111b6f4:	dfc00b15 	stw	ra,44(sp)
8111b6f8:	df000a15 	stw	fp,40(sp)
8111b6fc:	ddc00915 	stw	r23,36(sp)
8111b700:	dd400715 	stw	r21,28(sp)
8111b704:	dd000615 	stw	r20,24(sp)
8111b708:	dcc00515 	stw	r19,20(sp)
8111b70c:	dc800415 	stw	r18,16(sp)
8111b710:	dc400315 	stw	r17,12(sp)
8111b714:	dc000c17 	ldw	r16,48(sp)
8111b718:	b0003b26 	beq	r22,zero,8111b808 <_fread_r+0x12c>
8111b71c:	302f883a 	mov	r23,r6
8111b720:	382b883a 	mov	r21,r7
8111b724:	2029883a 	mov	r20,r4
8111b728:	2827883a 	mov	r19,r5
8111b72c:	20000226 	beq	r4,zero,8111b738 <_fread_r+0x5c>
8111b730:	20800e17 	ldw	r2,56(r4)
8111b734:	10006e26 	beq	r2,zero,8111b8f0 <_fread_r+0x214>
8111b738:	8080030b 	ldhu	r2,12(r16)
8111b73c:	10c8000c 	andi	r3,r2,8192
8111b740:	1800061e 	bne	r3,zero,8111b75c <_fread_r+0x80>
8111b744:	81001917 	ldw	r4,100(r16)
8111b748:	00f7ffc4 	movi	r3,-8193
8111b74c:	10880014 	ori	r2,r2,8192
8111b750:	20c6703a 	and	r3,r4,r3
8111b754:	8080030d 	sth	r2,12(r16)
8111b758:	80c01915 	stw	r3,100(r16)
8111b75c:	84400117 	ldw	r17,4(r16)
8111b760:	88005f16 	blt	r17,zero,8111b8e0 <_fread_r+0x204>
8111b764:	8809883a 	mov	r4,r17
8111b768:	1080008c 	andi	r2,r2,2
8111b76c:	1000281e 	bne	r2,zero,8111b810 <_fread_r+0x134>
8111b770:	b025883a 	mov	r18,r22
8111b774:	00000b06 	br	8111b7a4 <_fread_r+0xc8>
8111b778:	1112b340 	call	81112b34 <memcpy>
8111b77c:	80800017 	ldw	r2,0(r16)
8111b780:	9c67883a 	add	r19,r19,r17
8111b784:	9465c83a 	sub	r18,r18,r17
8111b788:	1463883a 	add	r17,r2,r17
8111b78c:	800b883a 	mov	r5,r16
8111b790:	a009883a 	mov	r4,r20
8111b794:	84400015 	stw	r17,0(r16)
8111b798:	1112f880 	call	81112f88 <__srefill_r>
8111b79c:	10004c1e 	bne	r2,zero,8111b8d0 <_fread_r+0x1f4>
8111b7a0:	84400117 	ldw	r17,4(r16)
8111b7a4:	880d883a 	mov	r6,r17
8111b7a8:	9809883a 	mov	r4,r19
8111b7ac:	81400017 	ldw	r5,0(r16)
8111b7b0:	8cbff136 	bltu	r17,r18,8111b778 <__reset+0xfb0fb778>
8111b7b4:	900d883a 	mov	r6,r18
8111b7b8:	1112b340 	call	81112b34 <memcpy>
8111b7bc:	80c00117 	ldw	r3,4(r16)
8111b7c0:	81000017 	ldw	r4,0(r16)
8111b7c4:	a805883a 	mov	r2,r21
8111b7c8:	1c87c83a 	sub	r3,r3,r18
8111b7cc:	24a5883a 	add	r18,r4,r18
8111b7d0:	80c00115 	stw	r3,4(r16)
8111b7d4:	84800015 	stw	r18,0(r16)
8111b7d8:	dfc00b17 	ldw	ra,44(sp)
8111b7dc:	df000a17 	ldw	fp,40(sp)
8111b7e0:	ddc00917 	ldw	r23,36(sp)
8111b7e4:	dd800817 	ldw	r22,32(sp)
8111b7e8:	dd400717 	ldw	r21,28(sp)
8111b7ec:	dd000617 	ldw	r20,24(sp)
8111b7f0:	dcc00517 	ldw	r19,20(sp)
8111b7f4:	dc800417 	ldw	r18,16(sp)
8111b7f8:	dc400317 	ldw	r17,12(sp)
8111b7fc:	dc000217 	ldw	r16,8(sp)
8111b800:	dec00c04 	addi	sp,sp,48
8111b804:	f800283a 	ret
8111b808:	0005883a 	mov	r2,zero
8111b80c:	003ff206 	br	8111b7d8 <__reset+0xfb0fb7d8>
8111b810:	b007883a 	mov	r3,r22
8111b814:	2580012e 	bgeu	r4,r22,8111b81c <_fread_r+0x140>
8111b818:	2007883a 	mov	r3,r4
8111b81c:	81400017 	ldw	r5,0(r16)
8111b820:	180d883a 	mov	r6,r3
8111b824:	9809883a 	mov	r4,r19
8111b828:	d8c00115 	stw	r3,4(sp)
8111b82c:	1112b340 	call	81112b34 <memcpy>
8111b830:	d8c00117 	ldw	r3,4(sp)
8111b834:	84400017 	ldw	r17,0(r16)
8111b838:	80800117 	ldw	r2,4(r16)
8111b83c:	81400c17 	ldw	r5,48(r16)
8111b840:	88e3883a 	add	r17,r17,r3
8111b844:	10c5c83a 	sub	r2,r2,r3
8111b848:	84400015 	stw	r17,0(r16)
8111b84c:	80800115 	stw	r2,4(r16)
8111b850:	b0e5c83a 	sub	r18,r22,r3
8111b854:	28002b26 	beq	r5,zero,8111b904 <_fread_r+0x228>
8111b858:	90002b26 	beq	r18,zero,8111b908 <_fread_r+0x22c>
8111b85c:	80801004 	addi	r2,r16,64
8111b860:	28800526 	beq	r5,r2,8111b878 <_fread_r+0x19c>
8111b864:	a009883a 	mov	r4,r20
8111b868:	d8c00115 	stw	r3,4(sp)
8111b86c:	111ba780 	call	8111ba78 <_free_r>
8111b870:	d8c00117 	ldw	r3,4(sp)
8111b874:	84400017 	ldw	r17,0(r16)
8111b878:	80000c15 	stw	zero,48(r16)
8111b87c:	80800517 	ldw	r2,20(r16)
8111b880:	87000417 	ldw	fp,16(r16)
8111b884:	98e7883a 	add	r19,r19,r3
8111b888:	d8800015 	stw	r2,0(sp)
8111b88c:	00000106 	br	8111b894 <_fread_r+0x1b8>
8111b890:	90001d26 	beq	r18,zero,8111b908 <_fread_r+0x22c>
8111b894:	84c00415 	stw	r19,16(r16)
8111b898:	84800515 	stw	r18,20(r16)
8111b89c:	84c00015 	stw	r19,0(r16)
8111b8a0:	a009883a 	mov	r4,r20
8111b8a4:	800b883a 	mov	r5,r16
8111b8a8:	1112f880 	call	81112f88 <__srefill_r>
8111b8ac:	d9000017 	ldw	r4,0(sp)
8111b8b0:	80c00117 	ldw	r3,4(r16)
8111b8b4:	87000415 	stw	fp,16(r16)
8111b8b8:	81000515 	stw	r4,20(r16)
8111b8bc:	84400015 	stw	r17,0(r16)
8111b8c0:	80000115 	stw	zero,4(r16)
8111b8c4:	90e5c83a 	sub	r18,r18,r3
8111b8c8:	98e7883a 	add	r19,r19,r3
8111b8cc:	103ff026 	beq	r2,zero,8111b890 <__reset+0xfb0fb890>
8111b8d0:	b80b883a 	mov	r5,r23
8111b8d4:	b489c83a 	sub	r4,r22,r18
8111b8d8:	1124f600 	call	81124f60 <__udivsi3>
8111b8dc:	003fbe06 	br	8111b7d8 <__reset+0xfb0fb7d8>
8111b8e0:	80000115 	stw	zero,4(r16)
8111b8e4:	0009883a 	mov	r4,zero
8111b8e8:	0023883a 	mov	r17,zero
8111b8ec:	003f9e06 	br	8111b768 <__reset+0xfb0fb768>
8111b8f0:	111b5e00 	call	8111b5e0 <__sinit>
8111b8f4:	8080030b 	ldhu	r2,12(r16)
8111b8f8:	10c8000c 	andi	r3,r2,8192
8111b8fc:	183f971e 	bne	r3,zero,8111b75c <__reset+0xfb0fb75c>
8111b900:	003f9006 	br	8111b744 <__reset+0xfb0fb744>
8111b904:	903fdd1e 	bne	r18,zero,8111b87c <__reset+0xfb0fb87c>
8111b908:	a805883a 	mov	r2,r21
8111b90c:	003fb206 	br	8111b7d8 <__reset+0xfb0fb7d8>

8111b910 <fread>:
8111b910:	defffe04 	addi	sp,sp,-8
8111b914:	00a04534 	movhi	r2,33044
8111b918:	de00012e 	bgeu	sp,et,8111b920 <fread+0x10>
8111b91c:	003b68fa 	trap	3
8111b920:	1082cb04 	addi	r2,r2,2860
8111b924:	d9c00015 	stw	r7,0(sp)
8111b928:	300f883a 	mov	r7,r6
8111b92c:	280d883a 	mov	r6,r5
8111b930:	200b883a 	mov	r5,r4
8111b934:	11000017 	ldw	r4,0(r2)
8111b938:	dfc00115 	stw	ra,4(sp)
8111b93c:	111b6dc0 	call	8111b6dc <_fread_r>
8111b940:	dfc00117 	ldw	ra,4(sp)
8111b944:	dec00204 	addi	sp,sp,8
8111b948:	f800283a 	ret

8111b94c <_malloc_trim_r>:
8111b94c:	defffb04 	addi	sp,sp,-20
8111b950:	de00012e 	bgeu	sp,et,8111b958 <_malloc_trim_r+0xc>
8111b954:	003b68fa 	trap	3
8111b958:	dcc00315 	stw	r19,12(sp)
8111b95c:	04e04534 	movhi	r19,33044
8111b960:	dc800215 	stw	r18,8(sp)
8111b964:	dc400115 	stw	r17,4(sp)
8111b968:	dc000015 	stw	r16,0(sp)
8111b96c:	dfc00415 	stw	ra,16(sp)
8111b970:	2821883a 	mov	r16,r5
8111b974:	9cfcb004 	addi	r19,r19,-3392
8111b978:	2025883a 	mov	r18,r4
8111b97c:	11283b00 	call	811283b0 <__malloc_lock>
8111b980:	98800217 	ldw	r2,8(r19)
8111b984:	14400117 	ldw	r17,4(r2)
8111b988:	00bfff04 	movi	r2,-4
8111b98c:	88a2703a 	and	r17,r17,r2
8111b990:	8c21c83a 	sub	r16,r17,r16
8111b994:	8403fbc4 	addi	r16,r16,4079
8111b998:	8020d33a 	srli	r16,r16,12
8111b99c:	0083ffc4 	movi	r2,4095
8111b9a0:	843fffc4 	addi	r16,r16,-1
8111b9a4:	8020933a 	slli	r16,r16,12
8111b9a8:	1400060e 	bge	r2,r16,8111b9c4 <_malloc_trim_r+0x78>
8111b9ac:	000b883a 	mov	r5,zero
8111b9b0:	9009883a 	mov	r4,r18
8111b9b4:	11131640 	call	81113164 <_sbrk_r>
8111b9b8:	98c00217 	ldw	r3,8(r19)
8111b9bc:	1c47883a 	add	r3,r3,r17
8111b9c0:	10c00a26 	beq	r2,r3,8111b9ec <_malloc_trim_r+0xa0>
8111b9c4:	9009883a 	mov	r4,r18
8111b9c8:	11284d80 	call	811284d8 <__malloc_unlock>
8111b9cc:	0005883a 	mov	r2,zero
8111b9d0:	dfc00417 	ldw	ra,16(sp)
8111b9d4:	dcc00317 	ldw	r19,12(sp)
8111b9d8:	dc800217 	ldw	r18,8(sp)
8111b9dc:	dc400117 	ldw	r17,4(sp)
8111b9e0:	dc000017 	ldw	r16,0(sp)
8111b9e4:	dec00504 	addi	sp,sp,20
8111b9e8:	f800283a 	ret
8111b9ec:	040bc83a 	sub	r5,zero,r16
8111b9f0:	9009883a 	mov	r4,r18
8111b9f4:	11131640 	call	81113164 <_sbrk_r>
8111b9f8:	00ffffc4 	movi	r3,-1
8111b9fc:	10c00d26 	beq	r2,r3,8111ba34 <_malloc_trim_r+0xe8>
8111ba00:	00e04534 	movhi	r3,33044
8111ba04:	18c38704 	addi	r3,r3,3612
8111ba08:	18800017 	ldw	r2,0(r3)
8111ba0c:	99000217 	ldw	r4,8(r19)
8111ba10:	8c23c83a 	sub	r17,r17,r16
8111ba14:	8c400054 	ori	r17,r17,1
8111ba18:	1421c83a 	sub	r16,r2,r16
8111ba1c:	24400115 	stw	r17,4(r4)
8111ba20:	9009883a 	mov	r4,r18
8111ba24:	1c000015 	stw	r16,0(r3)
8111ba28:	11284d80 	call	811284d8 <__malloc_unlock>
8111ba2c:	00800044 	movi	r2,1
8111ba30:	003fe706 	br	8111b9d0 <__reset+0xfb0fb9d0>
8111ba34:	000b883a 	mov	r5,zero
8111ba38:	9009883a 	mov	r4,r18
8111ba3c:	11131640 	call	81113164 <_sbrk_r>
8111ba40:	99000217 	ldw	r4,8(r19)
8111ba44:	014003c4 	movi	r5,15
8111ba48:	1107c83a 	sub	r3,r2,r4
8111ba4c:	28ffdd0e 	bge	r5,r3,8111b9c4 <__reset+0xfb0fb9c4>
8111ba50:	01604534 	movhi	r5,33044
8111ba54:	2942cc04 	addi	r5,r5,2864
8111ba58:	29400017 	ldw	r5,0(r5)
8111ba5c:	18c00054 	ori	r3,r3,1
8111ba60:	20c00115 	stw	r3,4(r4)
8111ba64:	00e04534 	movhi	r3,33044
8111ba68:	1145c83a 	sub	r2,r2,r5
8111ba6c:	18c38704 	addi	r3,r3,3612
8111ba70:	18800015 	stw	r2,0(r3)
8111ba74:	003fd306 	br	8111b9c4 <__reset+0xfb0fb9c4>

8111ba78 <_free_r>:
8111ba78:	28004326 	beq	r5,zero,8111bb88 <_free_r+0x110>
8111ba7c:	defffd04 	addi	sp,sp,-12
8111ba80:	de00012e 	bgeu	sp,et,8111ba88 <_free_r+0x10>
8111ba84:	003b68fa 	trap	3
8111ba88:	dc400115 	stw	r17,4(sp)
8111ba8c:	dc000015 	stw	r16,0(sp)
8111ba90:	2023883a 	mov	r17,r4
8111ba94:	2821883a 	mov	r16,r5
8111ba98:	dfc00215 	stw	ra,8(sp)
8111ba9c:	11283b00 	call	811283b0 <__malloc_lock>
8111baa0:	81ffff17 	ldw	r7,-4(r16)
8111baa4:	00bfff84 	movi	r2,-2
8111baa8:	01204534 	movhi	r4,33044
8111baac:	81bffe04 	addi	r6,r16,-8
8111bab0:	3884703a 	and	r2,r7,r2
8111bab4:	213cb004 	addi	r4,r4,-3392
8111bab8:	308b883a 	add	r5,r6,r2
8111babc:	2a400117 	ldw	r9,4(r5)
8111bac0:	22000217 	ldw	r8,8(r4)
8111bac4:	00ffff04 	movi	r3,-4
8111bac8:	48c6703a 	and	r3,r9,r3
8111bacc:	2a005726 	beq	r5,r8,8111bc2c <_free_r+0x1b4>
8111bad0:	28c00115 	stw	r3,4(r5)
8111bad4:	39c0004c 	andi	r7,r7,1
8111bad8:	3800091e 	bne	r7,zero,8111bb00 <_free_r+0x88>
8111badc:	823ffe17 	ldw	r8,-8(r16)
8111bae0:	22400204 	addi	r9,r4,8
8111bae4:	320dc83a 	sub	r6,r6,r8
8111bae8:	31c00217 	ldw	r7,8(r6)
8111baec:	1205883a 	add	r2,r2,r8
8111baf0:	3a406526 	beq	r7,r9,8111bc88 <_free_r+0x210>
8111baf4:	32000317 	ldw	r8,12(r6)
8111baf8:	3a000315 	stw	r8,12(r7)
8111bafc:	41c00215 	stw	r7,8(r8)
8111bb00:	28cf883a 	add	r7,r5,r3
8111bb04:	39c00117 	ldw	r7,4(r7)
8111bb08:	39c0004c 	andi	r7,r7,1
8111bb0c:	38003a26 	beq	r7,zero,8111bbf8 <_free_r+0x180>
8111bb10:	10c00054 	ori	r3,r2,1
8111bb14:	30c00115 	stw	r3,4(r6)
8111bb18:	3087883a 	add	r3,r6,r2
8111bb1c:	18800015 	stw	r2,0(r3)
8111bb20:	00c07fc4 	movi	r3,511
8111bb24:	18801936 	bltu	r3,r2,8111bb8c <_free_r+0x114>
8111bb28:	1004d0fa 	srli	r2,r2,3
8111bb2c:	01c00044 	movi	r7,1
8111bb30:	21400117 	ldw	r5,4(r4)
8111bb34:	10c00044 	addi	r3,r2,1
8111bb38:	18c7883a 	add	r3,r3,r3
8111bb3c:	1005d0ba 	srai	r2,r2,2
8111bb40:	18c7883a 	add	r3,r3,r3
8111bb44:	18c7883a 	add	r3,r3,r3
8111bb48:	1907883a 	add	r3,r3,r4
8111bb4c:	3884983a 	sll	r2,r7,r2
8111bb50:	19c00017 	ldw	r7,0(r3)
8111bb54:	1a3ffe04 	addi	r8,r3,-8
8111bb58:	1144b03a 	or	r2,r2,r5
8111bb5c:	32000315 	stw	r8,12(r6)
8111bb60:	31c00215 	stw	r7,8(r6)
8111bb64:	20800115 	stw	r2,4(r4)
8111bb68:	19800015 	stw	r6,0(r3)
8111bb6c:	39800315 	stw	r6,12(r7)
8111bb70:	8809883a 	mov	r4,r17
8111bb74:	dfc00217 	ldw	ra,8(sp)
8111bb78:	dc400117 	ldw	r17,4(sp)
8111bb7c:	dc000017 	ldw	r16,0(sp)
8111bb80:	dec00304 	addi	sp,sp,12
8111bb84:	11284d81 	jmpi	811284d8 <__malloc_unlock>
8111bb88:	f800283a 	ret
8111bb8c:	100ad27a 	srli	r5,r2,9
8111bb90:	00c00104 	movi	r3,4
8111bb94:	19404a36 	bltu	r3,r5,8111bcc0 <_free_r+0x248>
8111bb98:	100ad1ba 	srli	r5,r2,6
8111bb9c:	28c00e44 	addi	r3,r5,57
8111bba0:	18c7883a 	add	r3,r3,r3
8111bba4:	29400e04 	addi	r5,r5,56
8111bba8:	18c7883a 	add	r3,r3,r3
8111bbac:	18c7883a 	add	r3,r3,r3
8111bbb0:	1909883a 	add	r4,r3,r4
8111bbb4:	20c00017 	ldw	r3,0(r4)
8111bbb8:	01e04534 	movhi	r7,33044
8111bbbc:	213ffe04 	addi	r4,r4,-8
8111bbc0:	39fcb004 	addi	r7,r7,-3392
8111bbc4:	20c04426 	beq	r4,r3,8111bcd8 <_free_r+0x260>
8111bbc8:	01ffff04 	movi	r7,-4
8111bbcc:	19400117 	ldw	r5,4(r3)
8111bbd0:	29ca703a 	and	r5,r5,r7
8111bbd4:	1140022e 	bgeu	r2,r5,8111bbe0 <_free_r+0x168>
8111bbd8:	18c00217 	ldw	r3,8(r3)
8111bbdc:	20fffb1e 	bne	r4,r3,8111bbcc <__reset+0xfb0fbbcc>
8111bbe0:	19000317 	ldw	r4,12(r3)
8111bbe4:	31000315 	stw	r4,12(r6)
8111bbe8:	30c00215 	stw	r3,8(r6)
8111bbec:	21800215 	stw	r6,8(r4)
8111bbf0:	19800315 	stw	r6,12(r3)
8111bbf4:	003fde06 	br	8111bb70 <__reset+0xfb0fbb70>
8111bbf8:	29c00217 	ldw	r7,8(r5)
8111bbfc:	10c5883a 	add	r2,r2,r3
8111bc00:	00e04534 	movhi	r3,33044
8111bc04:	18fcb204 	addi	r3,r3,-3384
8111bc08:	38c03b26 	beq	r7,r3,8111bcf8 <_free_r+0x280>
8111bc0c:	2a000317 	ldw	r8,12(r5)
8111bc10:	11400054 	ori	r5,r2,1
8111bc14:	3087883a 	add	r3,r6,r2
8111bc18:	3a000315 	stw	r8,12(r7)
8111bc1c:	41c00215 	stw	r7,8(r8)
8111bc20:	31400115 	stw	r5,4(r6)
8111bc24:	18800015 	stw	r2,0(r3)
8111bc28:	003fbd06 	br	8111bb20 <__reset+0xfb0fbb20>
8111bc2c:	39c0004c 	andi	r7,r7,1
8111bc30:	10c5883a 	add	r2,r2,r3
8111bc34:	3800071e 	bne	r7,zero,8111bc54 <_free_r+0x1dc>
8111bc38:	81fffe17 	ldw	r7,-8(r16)
8111bc3c:	31cdc83a 	sub	r6,r6,r7
8111bc40:	30c00317 	ldw	r3,12(r6)
8111bc44:	31400217 	ldw	r5,8(r6)
8111bc48:	11c5883a 	add	r2,r2,r7
8111bc4c:	28c00315 	stw	r3,12(r5)
8111bc50:	19400215 	stw	r5,8(r3)
8111bc54:	10c00054 	ori	r3,r2,1
8111bc58:	30c00115 	stw	r3,4(r6)
8111bc5c:	00e04534 	movhi	r3,33044
8111bc60:	18c2cd04 	addi	r3,r3,2868
8111bc64:	18c00017 	ldw	r3,0(r3)
8111bc68:	21800215 	stw	r6,8(r4)
8111bc6c:	10ffc036 	bltu	r2,r3,8111bb70 <__reset+0xfb0fbb70>
8111bc70:	00a04534 	movhi	r2,33044
8111bc74:	10832804 	addi	r2,r2,3232
8111bc78:	11400017 	ldw	r5,0(r2)
8111bc7c:	8809883a 	mov	r4,r17
8111bc80:	111b94c0 	call	8111b94c <_malloc_trim_r>
8111bc84:	003fba06 	br	8111bb70 <__reset+0xfb0fbb70>
8111bc88:	28c9883a 	add	r4,r5,r3
8111bc8c:	21000117 	ldw	r4,4(r4)
8111bc90:	2100004c 	andi	r4,r4,1
8111bc94:	2000391e 	bne	r4,zero,8111bd7c <_free_r+0x304>
8111bc98:	29c00217 	ldw	r7,8(r5)
8111bc9c:	29000317 	ldw	r4,12(r5)
8111bca0:	1885883a 	add	r2,r3,r2
8111bca4:	10c00054 	ori	r3,r2,1
8111bca8:	39000315 	stw	r4,12(r7)
8111bcac:	21c00215 	stw	r7,8(r4)
8111bcb0:	30c00115 	stw	r3,4(r6)
8111bcb4:	308d883a 	add	r6,r6,r2
8111bcb8:	30800015 	stw	r2,0(r6)
8111bcbc:	003fac06 	br	8111bb70 <__reset+0xfb0fbb70>
8111bcc0:	00c00504 	movi	r3,20
8111bcc4:	19401536 	bltu	r3,r5,8111bd1c <_free_r+0x2a4>
8111bcc8:	28c01704 	addi	r3,r5,92
8111bccc:	18c7883a 	add	r3,r3,r3
8111bcd0:	294016c4 	addi	r5,r5,91
8111bcd4:	003fb406 	br	8111bba8 <__reset+0xfb0fbba8>
8111bcd8:	280bd0ba 	srai	r5,r5,2
8111bcdc:	00c00044 	movi	r3,1
8111bce0:	38800117 	ldw	r2,4(r7)
8111bce4:	194a983a 	sll	r5,r3,r5
8111bce8:	2007883a 	mov	r3,r4
8111bcec:	2884b03a 	or	r2,r5,r2
8111bcf0:	38800115 	stw	r2,4(r7)
8111bcf4:	003fbb06 	br	8111bbe4 <__reset+0xfb0fbbe4>
8111bcf8:	21800515 	stw	r6,20(r4)
8111bcfc:	21800415 	stw	r6,16(r4)
8111bd00:	10c00054 	ori	r3,r2,1
8111bd04:	31c00315 	stw	r7,12(r6)
8111bd08:	31c00215 	stw	r7,8(r6)
8111bd0c:	30c00115 	stw	r3,4(r6)
8111bd10:	308d883a 	add	r6,r6,r2
8111bd14:	30800015 	stw	r2,0(r6)
8111bd18:	003f9506 	br	8111bb70 <__reset+0xfb0fbb70>
8111bd1c:	00c01504 	movi	r3,84
8111bd20:	19400536 	bltu	r3,r5,8111bd38 <_free_r+0x2c0>
8111bd24:	100ad33a 	srli	r5,r2,12
8111bd28:	28c01bc4 	addi	r3,r5,111
8111bd2c:	18c7883a 	add	r3,r3,r3
8111bd30:	29401b84 	addi	r5,r5,110
8111bd34:	003f9c06 	br	8111bba8 <__reset+0xfb0fbba8>
8111bd38:	00c05504 	movi	r3,340
8111bd3c:	19400536 	bltu	r3,r5,8111bd54 <_free_r+0x2dc>
8111bd40:	100ad3fa 	srli	r5,r2,15
8111bd44:	28c01e04 	addi	r3,r5,120
8111bd48:	18c7883a 	add	r3,r3,r3
8111bd4c:	29401dc4 	addi	r5,r5,119
8111bd50:	003f9506 	br	8111bba8 <__reset+0xfb0fbba8>
8111bd54:	00c15504 	movi	r3,1364
8111bd58:	19400536 	bltu	r3,r5,8111bd70 <_free_r+0x2f8>
8111bd5c:	100ad4ba 	srli	r5,r2,18
8111bd60:	28c01f44 	addi	r3,r5,125
8111bd64:	18c7883a 	add	r3,r3,r3
8111bd68:	29401f04 	addi	r5,r5,124
8111bd6c:	003f8e06 	br	8111bba8 <__reset+0xfb0fbba8>
8111bd70:	00c03f84 	movi	r3,254
8111bd74:	01401f84 	movi	r5,126
8111bd78:	003f8b06 	br	8111bba8 <__reset+0xfb0fbba8>
8111bd7c:	10c00054 	ori	r3,r2,1
8111bd80:	30c00115 	stw	r3,4(r6)
8111bd84:	308d883a 	add	r6,r6,r2
8111bd88:	30800015 	stw	r2,0(r6)
8111bd8c:	003f7806 	br	8111bb70 <__reset+0xfb0fbb70>

8111bd90 <__sfvwrite_r>:
8111bd90:	30800217 	ldw	r2,8(r6)
8111bd94:	10006926 	beq	r2,zero,8111bf3c <__sfvwrite_r+0x1ac>
8111bd98:	defff404 	addi	sp,sp,-48
8111bd9c:	de00012e 	bgeu	sp,et,8111bda4 <__sfvwrite_r+0x14>
8111bda0:	003b68fa 	trap	3
8111bda4:	28c0030b 	ldhu	r3,12(r5)
8111bda8:	dd400715 	stw	r21,28(sp)
8111bdac:	dd000615 	stw	r20,24(sp)
8111bdb0:	dc000215 	stw	r16,8(sp)
8111bdb4:	dfc00b15 	stw	ra,44(sp)
8111bdb8:	df000a15 	stw	fp,40(sp)
8111bdbc:	ddc00915 	stw	r23,36(sp)
8111bdc0:	dd800815 	stw	r22,32(sp)
8111bdc4:	dcc00515 	stw	r19,20(sp)
8111bdc8:	dc800415 	stw	r18,16(sp)
8111bdcc:	dc400315 	stw	r17,12(sp)
8111bdd0:	1880020c 	andi	r2,r3,8
8111bdd4:	2821883a 	mov	r16,r5
8111bdd8:	202b883a 	mov	r21,r4
8111bddc:	3029883a 	mov	r20,r6
8111bde0:	10002726 	beq	r2,zero,8111be80 <__sfvwrite_r+0xf0>
8111bde4:	28800417 	ldw	r2,16(r5)
8111bde8:	10002526 	beq	r2,zero,8111be80 <__sfvwrite_r+0xf0>
8111bdec:	1880008c 	andi	r2,r3,2
8111bdf0:	a4400017 	ldw	r17,0(r20)
8111bdf4:	10002a26 	beq	r2,zero,8111bea0 <__sfvwrite_r+0x110>
8111bdf8:	05a00034 	movhi	r22,32768
8111bdfc:	0027883a 	mov	r19,zero
8111be00:	0025883a 	mov	r18,zero
8111be04:	b5bf0004 	addi	r22,r22,-1024
8111be08:	980d883a 	mov	r6,r19
8111be0c:	a809883a 	mov	r4,r21
8111be10:	90004626 	beq	r18,zero,8111bf2c <__sfvwrite_r+0x19c>
8111be14:	900f883a 	mov	r7,r18
8111be18:	b480022e 	bgeu	r22,r18,8111be24 <__sfvwrite_r+0x94>
8111be1c:	01e00034 	movhi	r7,32768
8111be20:	39ff0004 	addi	r7,r7,-1024
8111be24:	80800917 	ldw	r2,36(r16)
8111be28:	81400717 	ldw	r5,28(r16)
8111be2c:	103ee83a 	callr	r2
8111be30:	0080570e 	bge	zero,r2,8111bf90 <__sfvwrite_r+0x200>
8111be34:	a0c00217 	ldw	r3,8(r20)
8111be38:	98a7883a 	add	r19,r19,r2
8111be3c:	90a5c83a 	sub	r18,r18,r2
8111be40:	1885c83a 	sub	r2,r3,r2
8111be44:	a0800215 	stw	r2,8(r20)
8111be48:	103fef1e 	bne	r2,zero,8111be08 <__reset+0xfb0fbe08>
8111be4c:	0005883a 	mov	r2,zero
8111be50:	dfc00b17 	ldw	ra,44(sp)
8111be54:	df000a17 	ldw	fp,40(sp)
8111be58:	ddc00917 	ldw	r23,36(sp)
8111be5c:	dd800817 	ldw	r22,32(sp)
8111be60:	dd400717 	ldw	r21,28(sp)
8111be64:	dd000617 	ldw	r20,24(sp)
8111be68:	dcc00517 	ldw	r19,20(sp)
8111be6c:	dc800417 	ldw	r18,16(sp)
8111be70:	dc400317 	ldw	r17,12(sp)
8111be74:	dc000217 	ldw	r16,8(sp)
8111be78:	dec00c04 	addi	sp,sp,48
8111be7c:	f800283a 	ret
8111be80:	800b883a 	mov	r5,r16
8111be84:	a809883a 	mov	r4,r21
8111be88:	11195700 	call	81119570 <__swsetup_r>
8111be8c:	1000eb1e 	bne	r2,zero,8111c23c <__sfvwrite_r+0x4ac>
8111be90:	80c0030b 	ldhu	r3,12(r16)
8111be94:	a4400017 	ldw	r17,0(r20)
8111be98:	1880008c 	andi	r2,r3,2
8111be9c:	103fd61e 	bne	r2,zero,8111bdf8 <__reset+0xfb0fbdf8>
8111bea0:	1880004c 	andi	r2,r3,1
8111bea4:	10003f1e 	bne	r2,zero,8111bfa4 <__sfvwrite_r+0x214>
8111bea8:	0039883a 	mov	fp,zero
8111beac:	0025883a 	mov	r18,zero
8111beb0:	90001a26 	beq	r18,zero,8111bf1c <__sfvwrite_r+0x18c>
8111beb4:	1880800c 	andi	r2,r3,512
8111beb8:	84c00217 	ldw	r19,8(r16)
8111bebc:	10002126 	beq	r2,zero,8111bf44 <__sfvwrite_r+0x1b4>
8111bec0:	982f883a 	mov	r23,r19
8111bec4:	94c09336 	bltu	r18,r19,8111c114 <__sfvwrite_r+0x384>
8111bec8:	1881200c 	andi	r2,r3,1152
8111becc:	10009e1e 	bne	r2,zero,8111c148 <__sfvwrite_r+0x3b8>
8111bed0:	81000017 	ldw	r4,0(r16)
8111bed4:	b80d883a 	mov	r6,r23
8111bed8:	e00b883a 	mov	r5,fp
8111bedc:	111c8ec0 	call	8111c8ec <memmove>
8111bee0:	80c00217 	ldw	r3,8(r16)
8111bee4:	81000017 	ldw	r4,0(r16)
8111bee8:	9005883a 	mov	r2,r18
8111beec:	1ce7c83a 	sub	r19,r3,r19
8111bef0:	25cf883a 	add	r7,r4,r23
8111bef4:	84c00215 	stw	r19,8(r16)
8111bef8:	81c00015 	stw	r7,0(r16)
8111befc:	a0c00217 	ldw	r3,8(r20)
8111bf00:	e0b9883a 	add	fp,fp,r2
8111bf04:	90a5c83a 	sub	r18,r18,r2
8111bf08:	18a7c83a 	sub	r19,r3,r2
8111bf0c:	a4c00215 	stw	r19,8(r20)
8111bf10:	983fce26 	beq	r19,zero,8111be4c <__reset+0xfb0fbe4c>
8111bf14:	80c0030b 	ldhu	r3,12(r16)
8111bf18:	903fe61e 	bne	r18,zero,8111beb4 <__reset+0xfb0fbeb4>
8111bf1c:	8f000017 	ldw	fp,0(r17)
8111bf20:	8c800117 	ldw	r18,4(r17)
8111bf24:	8c400204 	addi	r17,r17,8
8111bf28:	003fe106 	br	8111beb0 <__reset+0xfb0fbeb0>
8111bf2c:	8cc00017 	ldw	r19,0(r17)
8111bf30:	8c800117 	ldw	r18,4(r17)
8111bf34:	8c400204 	addi	r17,r17,8
8111bf38:	003fb306 	br	8111be08 <__reset+0xfb0fbe08>
8111bf3c:	0005883a 	mov	r2,zero
8111bf40:	f800283a 	ret
8111bf44:	81000017 	ldw	r4,0(r16)
8111bf48:	80800417 	ldw	r2,16(r16)
8111bf4c:	11005736 	bltu	r2,r4,8111c0ac <__sfvwrite_r+0x31c>
8111bf50:	85c00517 	ldw	r23,20(r16)
8111bf54:	95c05536 	bltu	r18,r23,8111c0ac <__sfvwrite_r+0x31c>
8111bf58:	00a00034 	movhi	r2,32768
8111bf5c:	10bfffc4 	addi	r2,r2,-1
8111bf60:	9009883a 	mov	r4,r18
8111bf64:	1480012e 	bgeu	r2,r18,8111bf6c <__sfvwrite_r+0x1dc>
8111bf68:	1009883a 	mov	r4,r2
8111bf6c:	b80b883a 	mov	r5,r23
8111bf70:	1124e680 	call	81124e68 <__divsi3>
8111bf74:	15cf383a 	mul	r7,r2,r23
8111bf78:	81400717 	ldw	r5,28(r16)
8111bf7c:	80800917 	ldw	r2,36(r16)
8111bf80:	e00d883a 	mov	r6,fp
8111bf84:	a809883a 	mov	r4,r21
8111bf88:	103ee83a 	callr	r2
8111bf8c:	00bfdb16 	blt	zero,r2,8111befc <__reset+0xfb0fbefc>
8111bf90:	8080030b 	ldhu	r2,12(r16)
8111bf94:	10801014 	ori	r2,r2,64
8111bf98:	8080030d 	sth	r2,12(r16)
8111bf9c:	00bfffc4 	movi	r2,-1
8111bfa0:	003fab06 	br	8111be50 <__reset+0xfb0fbe50>
8111bfa4:	0027883a 	mov	r19,zero
8111bfa8:	0011883a 	mov	r8,zero
8111bfac:	0039883a 	mov	fp,zero
8111bfb0:	0025883a 	mov	r18,zero
8111bfb4:	90001f26 	beq	r18,zero,8111c034 <__sfvwrite_r+0x2a4>
8111bfb8:	40005a26 	beq	r8,zero,8111c124 <__sfvwrite_r+0x394>
8111bfbc:	982d883a 	mov	r22,r19
8111bfc0:	94c0012e 	bgeu	r18,r19,8111bfc8 <__sfvwrite_r+0x238>
8111bfc4:	902d883a 	mov	r22,r18
8111bfc8:	81000017 	ldw	r4,0(r16)
8111bfcc:	80800417 	ldw	r2,16(r16)
8111bfd0:	b02f883a 	mov	r23,r22
8111bfd4:	81c00517 	ldw	r7,20(r16)
8111bfd8:	1100032e 	bgeu	r2,r4,8111bfe8 <__sfvwrite_r+0x258>
8111bfdc:	80c00217 	ldw	r3,8(r16)
8111bfe0:	38c7883a 	add	r3,r7,r3
8111bfe4:	1d801816 	blt	r3,r22,8111c048 <__sfvwrite_r+0x2b8>
8111bfe8:	b1c03e16 	blt	r22,r7,8111c0e4 <__sfvwrite_r+0x354>
8111bfec:	80800917 	ldw	r2,36(r16)
8111bff0:	81400717 	ldw	r5,28(r16)
8111bff4:	e00d883a 	mov	r6,fp
8111bff8:	da000115 	stw	r8,4(sp)
8111bffc:	a809883a 	mov	r4,r21
8111c000:	103ee83a 	callr	r2
8111c004:	102f883a 	mov	r23,r2
8111c008:	da000117 	ldw	r8,4(sp)
8111c00c:	00bfe00e 	bge	zero,r2,8111bf90 <__reset+0xfb0fbf90>
8111c010:	9de7c83a 	sub	r19,r19,r23
8111c014:	98001f26 	beq	r19,zero,8111c094 <__sfvwrite_r+0x304>
8111c018:	a0800217 	ldw	r2,8(r20)
8111c01c:	e5f9883a 	add	fp,fp,r23
8111c020:	95e5c83a 	sub	r18,r18,r23
8111c024:	15efc83a 	sub	r23,r2,r23
8111c028:	a5c00215 	stw	r23,8(r20)
8111c02c:	b83f8726 	beq	r23,zero,8111be4c <__reset+0xfb0fbe4c>
8111c030:	903fe11e 	bne	r18,zero,8111bfb8 <__reset+0xfb0fbfb8>
8111c034:	8f000017 	ldw	fp,0(r17)
8111c038:	8c800117 	ldw	r18,4(r17)
8111c03c:	0011883a 	mov	r8,zero
8111c040:	8c400204 	addi	r17,r17,8
8111c044:	003fdb06 	br	8111bfb4 <__reset+0xfb0fbfb4>
8111c048:	180d883a 	mov	r6,r3
8111c04c:	e00b883a 	mov	r5,fp
8111c050:	da000115 	stw	r8,4(sp)
8111c054:	d8c00015 	stw	r3,0(sp)
8111c058:	111c8ec0 	call	8111c8ec <memmove>
8111c05c:	d8c00017 	ldw	r3,0(sp)
8111c060:	80800017 	ldw	r2,0(r16)
8111c064:	800b883a 	mov	r5,r16
8111c068:	a809883a 	mov	r4,r21
8111c06c:	10c5883a 	add	r2,r2,r3
8111c070:	80800015 	stw	r2,0(r16)
8111c074:	d8c00015 	stw	r3,0(sp)
8111c078:	111b1e40 	call	8111b1e4 <_fflush_r>
8111c07c:	d8c00017 	ldw	r3,0(sp)
8111c080:	da000117 	ldw	r8,4(sp)
8111c084:	103fc21e 	bne	r2,zero,8111bf90 <__reset+0xfb0fbf90>
8111c088:	182f883a 	mov	r23,r3
8111c08c:	9de7c83a 	sub	r19,r19,r23
8111c090:	983fe11e 	bne	r19,zero,8111c018 <__reset+0xfb0fc018>
8111c094:	800b883a 	mov	r5,r16
8111c098:	a809883a 	mov	r4,r21
8111c09c:	111b1e40 	call	8111b1e4 <_fflush_r>
8111c0a0:	103fbb1e 	bne	r2,zero,8111bf90 <__reset+0xfb0fbf90>
8111c0a4:	0011883a 	mov	r8,zero
8111c0a8:	003fdb06 	br	8111c018 <__reset+0xfb0fc018>
8111c0ac:	94c0012e 	bgeu	r18,r19,8111c0b4 <__sfvwrite_r+0x324>
8111c0b0:	9027883a 	mov	r19,r18
8111c0b4:	980d883a 	mov	r6,r19
8111c0b8:	e00b883a 	mov	r5,fp
8111c0bc:	111c8ec0 	call	8111c8ec <memmove>
8111c0c0:	80800217 	ldw	r2,8(r16)
8111c0c4:	80c00017 	ldw	r3,0(r16)
8111c0c8:	14c5c83a 	sub	r2,r2,r19
8111c0cc:	1cc7883a 	add	r3,r3,r19
8111c0d0:	80800215 	stw	r2,8(r16)
8111c0d4:	80c00015 	stw	r3,0(r16)
8111c0d8:	10004326 	beq	r2,zero,8111c1e8 <__sfvwrite_r+0x458>
8111c0dc:	9805883a 	mov	r2,r19
8111c0e0:	003f8606 	br	8111befc <__reset+0xfb0fbefc>
8111c0e4:	b00d883a 	mov	r6,r22
8111c0e8:	e00b883a 	mov	r5,fp
8111c0ec:	da000115 	stw	r8,4(sp)
8111c0f0:	111c8ec0 	call	8111c8ec <memmove>
8111c0f4:	80800217 	ldw	r2,8(r16)
8111c0f8:	80c00017 	ldw	r3,0(r16)
8111c0fc:	da000117 	ldw	r8,4(sp)
8111c100:	1585c83a 	sub	r2,r2,r22
8111c104:	1dad883a 	add	r22,r3,r22
8111c108:	80800215 	stw	r2,8(r16)
8111c10c:	85800015 	stw	r22,0(r16)
8111c110:	003fbf06 	br	8111c010 <__reset+0xfb0fc010>
8111c114:	81000017 	ldw	r4,0(r16)
8111c118:	9027883a 	mov	r19,r18
8111c11c:	902f883a 	mov	r23,r18
8111c120:	003f6c06 	br	8111bed4 <__reset+0xfb0fbed4>
8111c124:	900d883a 	mov	r6,r18
8111c128:	01400284 	movi	r5,10
8111c12c:	e009883a 	mov	r4,fp
8111c130:	111c8080 	call	8111c808 <memchr>
8111c134:	10003e26 	beq	r2,zero,8111c230 <__sfvwrite_r+0x4a0>
8111c138:	10800044 	addi	r2,r2,1
8111c13c:	1727c83a 	sub	r19,r2,fp
8111c140:	02000044 	movi	r8,1
8111c144:	003f9d06 	br	8111bfbc <__reset+0xfb0fbfbc>
8111c148:	80800517 	ldw	r2,20(r16)
8111c14c:	81400417 	ldw	r5,16(r16)
8111c150:	81c00017 	ldw	r7,0(r16)
8111c154:	10a7883a 	add	r19,r2,r2
8111c158:	9885883a 	add	r2,r19,r2
8111c15c:	1026d7fa 	srli	r19,r2,31
8111c160:	396dc83a 	sub	r22,r7,r5
8111c164:	b1000044 	addi	r4,r22,1
8111c168:	9885883a 	add	r2,r19,r2
8111c16c:	1027d07a 	srai	r19,r2,1
8111c170:	2485883a 	add	r2,r4,r18
8111c174:	980d883a 	mov	r6,r19
8111c178:	9880022e 	bgeu	r19,r2,8111c184 <__sfvwrite_r+0x3f4>
8111c17c:	1027883a 	mov	r19,r2
8111c180:	100d883a 	mov	r6,r2
8111c184:	18c1000c 	andi	r3,r3,1024
8111c188:	18001c26 	beq	r3,zero,8111c1fc <__sfvwrite_r+0x46c>
8111c18c:	300b883a 	mov	r5,r6
8111c190:	a809883a 	mov	r4,r21
8111c194:	11123200 	call	81112320 <_malloc_r>
8111c198:	102f883a 	mov	r23,r2
8111c19c:	10002926 	beq	r2,zero,8111c244 <__sfvwrite_r+0x4b4>
8111c1a0:	81400417 	ldw	r5,16(r16)
8111c1a4:	b00d883a 	mov	r6,r22
8111c1a8:	1009883a 	mov	r4,r2
8111c1ac:	1112b340 	call	81112b34 <memcpy>
8111c1b0:	8080030b 	ldhu	r2,12(r16)
8111c1b4:	00fedfc4 	movi	r3,-1153
8111c1b8:	10c4703a 	and	r2,r2,r3
8111c1bc:	10802014 	ori	r2,r2,128
8111c1c0:	8080030d 	sth	r2,12(r16)
8111c1c4:	bd89883a 	add	r4,r23,r22
8111c1c8:	9d8fc83a 	sub	r7,r19,r22
8111c1cc:	85c00415 	stw	r23,16(r16)
8111c1d0:	84c00515 	stw	r19,20(r16)
8111c1d4:	81000015 	stw	r4,0(r16)
8111c1d8:	9027883a 	mov	r19,r18
8111c1dc:	81c00215 	stw	r7,8(r16)
8111c1e0:	902f883a 	mov	r23,r18
8111c1e4:	003f3b06 	br	8111bed4 <__reset+0xfb0fbed4>
8111c1e8:	800b883a 	mov	r5,r16
8111c1ec:	a809883a 	mov	r4,r21
8111c1f0:	111b1e40 	call	8111b1e4 <_fflush_r>
8111c1f4:	103fb926 	beq	r2,zero,8111c0dc <__reset+0xfb0fc0dc>
8111c1f8:	003f6506 	br	8111bf90 <__reset+0xfb0fbf90>
8111c1fc:	a809883a 	mov	r4,r21
8111c200:	111db0c0 	call	8111db0c <_realloc_r>
8111c204:	102f883a 	mov	r23,r2
8111c208:	103fee1e 	bne	r2,zero,8111c1c4 <__reset+0xfb0fc1c4>
8111c20c:	81400417 	ldw	r5,16(r16)
8111c210:	a809883a 	mov	r4,r21
8111c214:	111ba780 	call	8111ba78 <_free_r>
8111c218:	8080030b 	ldhu	r2,12(r16)
8111c21c:	00ffdfc4 	movi	r3,-129
8111c220:	1884703a 	and	r2,r3,r2
8111c224:	00c00304 	movi	r3,12
8111c228:	a8c00015 	stw	r3,0(r21)
8111c22c:	003f5906 	br	8111bf94 <__reset+0xfb0fbf94>
8111c230:	94c00044 	addi	r19,r18,1
8111c234:	02000044 	movi	r8,1
8111c238:	003f6006 	br	8111bfbc <__reset+0xfb0fbfbc>
8111c23c:	00bfffc4 	movi	r2,-1
8111c240:	003f0306 	br	8111be50 <__reset+0xfb0fbe50>
8111c244:	00800304 	movi	r2,12
8111c248:	a8800015 	stw	r2,0(r21)
8111c24c:	8080030b 	ldhu	r2,12(r16)
8111c250:	003f5006 	br	8111bf94 <__reset+0xfb0fbf94>

8111c254 <_fwalk>:
8111c254:	defff704 	addi	sp,sp,-36
8111c258:	de00012e 	bgeu	sp,et,8111c260 <_fwalk+0xc>
8111c25c:	003b68fa 	trap	3
8111c260:	dd000415 	stw	r20,16(sp)
8111c264:	dfc00815 	stw	ra,32(sp)
8111c268:	ddc00715 	stw	r23,28(sp)
8111c26c:	dd800615 	stw	r22,24(sp)
8111c270:	dd400515 	stw	r21,20(sp)
8111c274:	dcc00315 	stw	r19,12(sp)
8111c278:	dc800215 	stw	r18,8(sp)
8111c27c:	dc400115 	stw	r17,4(sp)
8111c280:	dc000015 	stw	r16,0(sp)
8111c284:	2500b804 	addi	r20,r4,736
8111c288:	a0002326 	beq	r20,zero,8111c318 <_fwalk+0xc4>
8111c28c:	282b883a 	mov	r21,r5
8111c290:	002f883a 	mov	r23,zero
8111c294:	05800044 	movi	r22,1
8111c298:	04ffffc4 	movi	r19,-1
8111c29c:	a4400117 	ldw	r17,4(r20)
8111c2a0:	a4800217 	ldw	r18,8(r20)
8111c2a4:	8c7fffc4 	addi	r17,r17,-1
8111c2a8:	88000d16 	blt	r17,zero,8111c2e0 <_fwalk+0x8c>
8111c2ac:	94000304 	addi	r16,r18,12
8111c2b0:	94800384 	addi	r18,r18,14
8111c2b4:	8080000b 	ldhu	r2,0(r16)
8111c2b8:	8c7fffc4 	addi	r17,r17,-1
8111c2bc:	813ffd04 	addi	r4,r16,-12
8111c2c0:	b080042e 	bgeu	r22,r2,8111c2d4 <_fwalk+0x80>
8111c2c4:	9080000f 	ldh	r2,0(r18)
8111c2c8:	14c00226 	beq	r2,r19,8111c2d4 <_fwalk+0x80>
8111c2cc:	a83ee83a 	callr	r21
8111c2d0:	b8aeb03a 	or	r23,r23,r2
8111c2d4:	84001a04 	addi	r16,r16,104
8111c2d8:	94801a04 	addi	r18,r18,104
8111c2dc:	8cfff51e 	bne	r17,r19,8111c2b4 <__reset+0xfb0fc2b4>
8111c2e0:	a5000017 	ldw	r20,0(r20)
8111c2e4:	a03fed1e 	bne	r20,zero,8111c29c <__reset+0xfb0fc29c>
8111c2e8:	b805883a 	mov	r2,r23
8111c2ec:	dfc00817 	ldw	ra,32(sp)
8111c2f0:	ddc00717 	ldw	r23,28(sp)
8111c2f4:	dd800617 	ldw	r22,24(sp)
8111c2f8:	dd400517 	ldw	r21,20(sp)
8111c2fc:	dd000417 	ldw	r20,16(sp)
8111c300:	dcc00317 	ldw	r19,12(sp)
8111c304:	dc800217 	ldw	r18,8(sp)
8111c308:	dc400117 	ldw	r17,4(sp)
8111c30c:	dc000017 	ldw	r16,0(sp)
8111c310:	dec00904 	addi	sp,sp,36
8111c314:	f800283a 	ret
8111c318:	002f883a 	mov	r23,zero
8111c31c:	003ff206 	br	8111c2e8 <__reset+0xfb0fc2e8>

8111c320 <_fwalk_reent>:
8111c320:	defff704 	addi	sp,sp,-36
8111c324:	de00012e 	bgeu	sp,et,8111c32c <_fwalk_reent+0xc>
8111c328:	003b68fa 	trap	3
8111c32c:	dd000415 	stw	r20,16(sp)
8111c330:	dfc00815 	stw	ra,32(sp)
8111c334:	ddc00715 	stw	r23,28(sp)
8111c338:	dd800615 	stw	r22,24(sp)
8111c33c:	dd400515 	stw	r21,20(sp)
8111c340:	dcc00315 	stw	r19,12(sp)
8111c344:	dc800215 	stw	r18,8(sp)
8111c348:	dc400115 	stw	r17,4(sp)
8111c34c:	dc000015 	stw	r16,0(sp)
8111c350:	2500b804 	addi	r20,r4,736
8111c354:	a0002326 	beq	r20,zero,8111c3e4 <_fwalk_reent+0xc4>
8111c358:	282b883a 	mov	r21,r5
8111c35c:	2027883a 	mov	r19,r4
8111c360:	002f883a 	mov	r23,zero
8111c364:	05800044 	movi	r22,1
8111c368:	04bfffc4 	movi	r18,-1
8111c36c:	a4400117 	ldw	r17,4(r20)
8111c370:	a4000217 	ldw	r16,8(r20)
8111c374:	8c7fffc4 	addi	r17,r17,-1
8111c378:	88000c16 	blt	r17,zero,8111c3ac <_fwalk_reent+0x8c>
8111c37c:	84000304 	addi	r16,r16,12
8111c380:	8080000b 	ldhu	r2,0(r16)
8111c384:	8c7fffc4 	addi	r17,r17,-1
8111c388:	817ffd04 	addi	r5,r16,-12
8111c38c:	b080052e 	bgeu	r22,r2,8111c3a4 <_fwalk_reent+0x84>
8111c390:	8080008f 	ldh	r2,2(r16)
8111c394:	9809883a 	mov	r4,r19
8111c398:	14800226 	beq	r2,r18,8111c3a4 <_fwalk_reent+0x84>
8111c39c:	a83ee83a 	callr	r21
8111c3a0:	b8aeb03a 	or	r23,r23,r2
8111c3a4:	84001a04 	addi	r16,r16,104
8111c3a8:	8cbff51e 	bne	r17,r18,8111c380 <__reset+0xfb0fc380>
8111c3ac:	a5000017 	ldw	r20,0(r20)
8111c3b0:	a03fee1e 	bne	r20,zero,8111c36c <__reset+0xfb0fc36c>
8111c3b4:	b805883a 	mov	r2,r23
8111c3b8:	dfc00817 	ldw	ra,32(sp)
8111c3bc:	ddc00717 	ldw	r23,28(sp)
8111c3c0:	dd800617 	ldw	r22,24(sp)
8111c3c4:	dd400517 	ldw	r21,20(sp)
8111c3c8:	dd000417 	ldw	r20,16(sp)
8111c3cc:	dcc00317 	ldw	r19,12(sp)
8111c3d0:	dc800217 	ldw	r18,8(sp)
8111c3d4:	dc400117 	ldw	r17,4(sp)
8111c3d8:	dc000017 	ldw	r16,0(sp)
8111c3dc:	dec00904 	addi	sp,sp,36
8111c3e0:	f800283a 	ret
8111c3e4:	002f883a 	mov	r23,zero
8111c3e8:	003ff206 	br	8111c3b4 <__reset+0xfb0fc3b4>

8111c3ec <_isatty_r>:
8111c3ec:	defffd04 	addi	sp,sp,-12
8111c3f0:	de00012e 	bgeu	sp,et,8111c3f8 <_isatty_r+0xc>
8111c3f4:	003b68fa 	trap	3
8111c3f8:	dc000015 	stw	r16,0(sp)
8111c3fc:	04204534 	movhi	r16,33044
8111c400:	dc400115 	stw	r17,4(sp)
8111c404:	84032504 	addi	r16,r16,3220
8111c408:	2023883a 	mov	r17,r4
8111c40c:	2809883a 	mov	r4,r5
8111c410:	dfc00215 	stw	ra,8(sp)
8111c414:	80000015 	stw	zero,0(r16)
8111c418:	112769c0 	call	8112769c <isatty>
8111c41c:	00ffffc4 	movi	r3,-1
8111c420:	10c00526 	beq	r2,r3,8111c438 <_isatty_r+0x4c>
8111c424:	dfc00217 	ldw	ra,8(sp)
8111c428:	dc400117 	ldw	r17,4(sp)
8111c42c:	dc000017 	ldw	r16,0(sp)
8111c430:	dec00304 	addi	sp,sp,12
8111c434:	f800283a 	ret
8111c438:	80c00017 	ldw	r3,0(r16)
8111c43c:	183ff926 	beq	r3,zero,8111c424 <__reset+0xfb0fc424>
8111c440:	88c00015 	stw	r3,0(r17)
8111c444:	003ff706 	br	8111c424 <__reset+0xfb0fc424>

8111c448 <iswspace>:
8111c448:	00803fc4 	movi	r2,255
8111c44c:	11000836 	bltu	r2,r4,8111c470 <iswspace+0x28>
8111c450:	00a04534 	movhi	r2,33044
8111c454:	1082c904 	addi	r2,r2,2852
8111c458:	10800017 	ldw	r2,0(r2)
8111c45c:	1109883a 	add	r4,r2,r4
8111c460:	20800043 	ldbu	r2,1(r4)
8111c464:	1080020c 	andi	r2,r2,8
8111c468:	10803fcc 	andi	r2,r2,255
8111c46c:	f800283a 	ret
8111c470:	0005883a 	mov	r2,zero
8111c474:	f800283a 	ret

8111c478 <_setlocale_r>:
8111c478:	30001d26 	beq	r6,zero,8111c4f0 <_setlocale_r+0x78>
8111c47c:	01604534 	movhi	r5,33044
8111c480:	defffe04 	addi	sp,sp,-8
8111c484:	2979f004 	addi	r5,r5,-6208
8111c488:	3009883a 	mov	r4,r6
8111c48c:	de00012e 	bgeu	sp,et,8111c494 <_setlocale_r+0x1c>
8111c490:	003b68fa 	trap	3
8111c494:	dc000015 	stw	r16,0(sp)
8111c498:	dfc00115 	stw	ra,4(sp)
8111c49c:	3021883a 	mov	r16,r6
8111c4a0:	111e1c40 	call	8111e1c4 <strcmp>
8111c4a4:	1000061e 	bne	r2,zero,8111c4c0 <_setlocale_r+0x48>
8111c4a8:	00a04534 	movhi	r2,33044
8111c4ac:	10b9bf04 	addi	r2,r2,-6404
8111c4b0:	dfc00117 	ldw	ra,4(sp)
8111c4b4:	dc000017 	ldw	r16,0(sp)
8111c4b8:	dec00204 	addi	sp,sp,8
8111c4bc:	f800283a 	ret
8111c4c0:	01604534 	movhi	r5,33044
8111c4c4:	2979bf04 	addi	r5,r5,-6404
8111c4c8:	8009883a 	mov	r4,r16
8111c4cc:	111e1c40 	call	8111e1c4 <strcmp>
8111c4d0:	103ff526 	beq	r2,zero,8111c4a8 <__reset+0xfb0fc4a8>
8111c4d4:	01604534 	movhi	r5,33044
8111c4d8:	2979c904 	addi	r5,r5,-6364
8111c4dc:	8009883a 	mov	r4,r16
8111c4e0:	111e1c40 	call	8111e1c4 <strcmp>
8111c4e4:	103ff026 	beq	r2,zero,8111c4a8 <__reset+0xfb0fc4a8>
8111c4e8:	0005883a 	mov	r2,zero
8111c4ec:	003ff006 	br	8111c4b0 <__reset+0xfb0fc4b0>
8111c4f0:	00a04534 	movhi	r2,33044
8111c4f4:	10b9bf04 	addi	r2,r2,-6404
8111c4f8:	f800283a 	ret

8111c4fc <__locale_charset>:
8111c4fc:	00a04534 	movhi	r2,33044
8111c500:	10bdba04 	addi	r2,r2,-2328
8111c504:	f800283a 	ret

8111c508 <__locale_mb_cur_max>:
8111c508:	00a04534 	movhi	r2,33044
8111c50c:	1082ce04 	addi	r2,r2,2872
8111c510:	10800017 	ldw	r2,0(r2)
8111c514:	f800283a 	ret

8111c518 <__locale_msgcharset>:
8111c518:	00a04534 	movhi	r2,33044
8111c51c:	10bdb204 	addi	r2,r2,-2360
8111c520:	f800283a 	ret

8111c524 <__locale_cjk_lang>:
8111c524:	0005883a 	mov	r2,zero
8111c528:	f800283a 	ret

8111c52c <_localeconv_r>:
8111c52c:	00a04534 	movhi	r2,33044
8111c530:	10bdc204 	addi	r2,r2,-2296
8111c534:	f800283a 	ret

8111c538 <setlocale>:
8111c538:	00a04534 	movhi	r2,33044
8111c53c:	1082cb04 	addi	r2,r2,2860
8111c540:	280d883a 	mov	r6,r5
8111c544:	200b883a 	mov	r5,r4
8111c548:	11000017 	ldw	r4,0(r2)
8111c54c:	111c4781 	jmpi	8111c478 <_setlocale_r>

8111c550 <localeconv>:
8111c550:	00a04534 	movhi	r2,33044
8111c554:	10bdc204 	addi	r2,r2,-2296
8111c558:	f800283a 	ret

8111c55c <_lseek_r>:
8111c55c:	defffd04 	addi	sp,sp,-12
8111c560:	de00012e 	bgeu	sp,et,8111c568 <_lseek_r+0xc>
8111c564:	003b68fa 	trap	3
8111c568:	2805883a 	mov	r2,r5
8111c56c:	dc000015 	stw	r16,0(sp)
8111c570:	04204534 	movhi	r16,33044
8111c574:	dc400115 	stw	r17,4(sp)
8111c578:	300b883a 	mov	r5,r6
8111c57c:	84032504 	addi	r16,r16,3220
8111c580:	2023883a 	mov	r17,r4
8111c584:	380d883a 	mov	r6,r7
8111c588:	1009883a 	mov	r4,r2
8111c58c:	dfc00215 	stw	ra,8(sp)
8111c590:	80000015 	stw	zero,0(r16)
8111c594:	112778c0 	call	8112778c <lseek>
8111c598:	00ffffc4 	movi	r3,-1
8111c59c:	10c00526 	beq	r2,r3,8111c5b4 <_lseek_r+0x58>
8111c5a0:	dfc00217 	ldw	ra,8(sp)
8111c5a4:	dc400117 	ldw	r17,4(sp)
8111c5a8:	dc000017 	ldw	r16,0(sp)
8111c5ac:	dec00304 	addi	sp,sp,12
8111c5b0:	f800283a 	ret
8111c5b4:	80c00017 	ldw	r3,0(r16)
8111c5b8:	183ff926 	beq	r3,zero,8111c5a0 <__reset+0xfb0fc5a0>
8111c5bc:	88c00015 	stw	r3,0(r17)
8111c5c0:	003ff706 	br	8111c5a0 <__reset+0xfb0fc5a0>

8111c5c4 <_mbrtowc_r>:
8111c5c4:	defff704 	addi	sp,sp,-36
8111c5c8:	00a04534 	movhi	r2,33044
8111c5cc:	de00012e 	bgeu	sp,et,8111c5d4 <_mbrtowc_r+0x10>
8111c5d0:	003b68fa 	trap	3
8111c5d4:	1082cf04 	addi	r2,r2,2876
8111c5d8:	dc800715 	stw	r18,28(sp)
8111c5dc:	dc400615 	stw	r17,24(sp)
8111c5e0:	dc000515 	stw	r16,20(sp)
8111c5e4:	dfc00815 	stw	ra,32(sp)
8111c5e8:	2021883a 	mov	r16,r4
8111c5ec:	dc400917 	ldw	r17,36(sp)
8111c5f0:	14800017 	ldw	r18,0(r2)
8111c5f4:	30001626 	beq	r6,zero,8111c650 <_mbrtowc_r+0x8c>
8111c5f8:	d9400215 	stw	r5,8(sp)
8111c5fc:	d9800315 	stw	r6,12(sp)
8111c600:	d9c00415 	stw	r7,16(sp)
8111c604:	111c4fc0 	call	8111c4fc <__locale_charset>
8111c608:	d9c00417 	ldw	r7,16(sp)
8111c60c:	d9800317 	ldw	r6,12(sp)
8111c610:	d9400217 	ldw	r5,8(sp)
8111c614:	d8800015 	stw	r2,0(sp)
8111c618:	dc400115 	stw	r17,4(sp)
8111c61c:	8009883a 	mov	r4,r16
8111c620:	903ee83a 	callr	r18
8111c624:	00ffffc4 	movi	r3,-1
8111c628:	10c0031e 	bne	r2,r3,8111c638 <_mbrtowc_r+0x74>
8111c62c:	88000015 	stw	zero,0(r17)
8111c630:	00c02284 	movi	r3,138
8111c634:	80c00015 	stw	r3,0(r16)
8111c638:	dfc00817 	ldw	ra,32(sp)
8111c63c:	dc800717 	ldw	r18,28(sp)
8111c640:	dc400617 	ldw	r17,24(sp)
8111c644:	dc000517 	ldw	r16,20(sp)
8111c648:	dec00904 	addi	sp,sp,36
8111c64c:	f800283a 	ret
8111c650:	111c4fc0 	call	8111c4fc <__locale_charset>
8111c654:	01a04534 	movhi	r6,33044
8111c658:	31b9c904 	addi	r6,r6,-6364
8111c65c:	dc400115 	stw	r17,4(sp)
8111c660:	d8800015 	stw	r2,0(sp)
8111c664:	01c00044 	movi	r7,1
8111c668:	000b883a 	mov	r5,zero
8111c66c:	8009883a 	mov	r4,r16
8111c670:	903ee83a 	callr	r18
8111c674:	003feb06 	br	8111c624 <__reset+0xfb0fc624>

8111c678 <mbrtowc>:
8111c678:	defff704 	addi	sp,sp,-36
8111c67c:	00a04534 	movhi	r2,33044
8111c680:	de00012e 	bgeu	sp,et,8111c688 <mbrtowc+0x10>
8111c684:	003b68fa 	trap	3
8111c688:	1082cb04 	addi	r2,r2,2860
8111c68c:	dc800415 	stw	r18,16(sp)
8111c690:	dc400315 	stw	r17,12(sp)
8111c694:	dfc00815 	stw	ra,32(sp)
8111c698:	dd400715 	stw	r21,28(sp)
8111c69c:	dd000615 	stw	r20,24(sp)
8111c6a0:	dcc00515 	stw	r19,20(sp)
8111c6a4:	dc000215 	stw	r16,8(sp)
8111c6a8:	3825883a 	mov	r18,r7
8111c6ac:	14400017 	ldw	r17,0(r2)
8111c6b0:	28001c26 	beq	r5,zero,8111c724 <mbrtowc+0xac>
8111c6b4:	00a04534 	movhi	r2,33044
8111c6b8:	1082cf04 	addi	r2,r2,2876
8111c6bc:	15400017 	ldw	r21,0(r2)
8111c6c0:	2821883a 	mov	r16,r5
8111c6c4:	2027883a 	mov	r19,r4
8111c6c8:	3029883a 	mov	r20,r6
8111c6cc:	111c4fc0 	call	8111c4fc <__locale_charset>
8111c6d0:	d8800015 	stw	r2,0(sp)
8111c6d4:	dc800115 	stw	r18,4(sp)
8111c6d8:	a00f883a 	mov	r7,r20
8111c6dc:	800d883a 	mov	r6,r16
8111c6e0:	980b883a 	mov	r5,r19
8111c6e4:	8809883a 	mov	r4,r17
8111c6e8:	a83ee83a 	callr	r21
8111c6ec:	00ffffc4 	movi	r3,-1
8111c6f0:	10c0031e 	bne	r2,r3,8111c700 <mbrtowc+0x88>
8111c6f4:	90000015 	stw	zero,0(r18)
8111c6f8:	00c02284 	movi	r3,138
8111c6fc:	88c00015 	stw	r3,0(r17)
8111c700:	dfc00817 	ldw	ra,32(sp)
8111c704:	dd400717 	ldw	r21,28(sp)
8111c708:	dd000617 	ldw	r20,24(sp)
8111c70c:	dcc00517 	ldw	r19,20(sp)
8111c710:	dc800417 	ldw	r18,16(sp)
8111c714:	dc400317 	ldw	r17,12(sp)
8111c718:	dc000217 	ldw	r16,8(sp)
8111c71c:	dec00904 	addi	sp,sp,36
8111c720:	f800283a 	ret
8111c724:	00a04534 	movhi	r2,33044
8111c728:	1082cf04 	addi	r2,r2,2876
8111c72c:	14000017 	ldw	r16,0(r2)
8111c730:	111c4fc0 	call	8111c4fc <__locale_charset>
8111c734:	01a04534 	movhi	r6,33044
8111c738:	31b9c904 	addi	r6,r6,-6364
8111c73c:	dc800115 	stw	r18,4(sp)
8111c740:	d8800015 	stw	r2,0(sp)
8111c744:	01c00044 	movi	r7,1
8111c748:	000b883a 	mov	r5,zero
8111c74c:	8809883a 	mov	r4,r17
8111c750:	803ee83a 	callr	r16
8111c754:	003fe506 	br	8111c6ec <__reset+0xfb0fc6ec>

8111c758 <__ascii_mbtowc>:
8111c758:	deffff04 	addi	sp,sp,-4
8111c75c:	de00012e 	bgeu	sp,et,8111c764 <__ascii_mbtowc+0xc>
8111c760:	003b68fa 	trap	3
8111c764:	28000826 	beq	r5,zero,8111c788 <__ascii_mbtowc+0x30>
8111c768:	30000926 	beq	r6,zero,8111c790 <__ascii_mbtowc+0x38>
8111c76c:	38000b26 	beq	r7,zero,8111c79c <__ascii_mbtowc+0x44>
8111c770:	30800003 	ldbu	r2,0(r6)
8111c774:	28800015 	stw	r2,0(r5)
8111c778:	30800003 	ldbu	r2,0(r6)
8111c77c:	1004c03a 	cmpne	r2,r2,zero
8111c780:	dec00104 	addi	sp,sp,4
8111c784:	f800283a 	ret
8111c788:	d80b883a 	mov	r5,sp
8111c78c:	303ff71e 	bne	r6,zero,8111c76c <__reset+0xfb0fc76c>
8111c790:	0005883a 	mov	r2,zero
8111c794:	dec00104 	addi	sp,sp,4
8111c798:	f800283a 	ret
8111c79c:	00bfff84 	movi	r2,-2
8111c7a0:	003ff706 	br	8111c780 <__reset+0xfb0fc780>

8111c7a4 <_mbtowc_r>:
8111c7a4:	00a04534 	movhi	r2,33044
8111c7a8:	defff804 	addi	sp,sp,-32
8111c7ac:	1082cf04 	addi	r2,r2,2876
8111c7b0:	de00012e 	bgeu	sp,et,8111c7b8 <_mbtowc_r+0x14>
8111c7b4:	003b68fa 	trap	3
8111c7b8:	dfc00715 	stw	ra,28(sp)
8111c7bc:	dc000615 	stw	r16,24(sp)
8111c7c0:	14000017 	ldw	r16,0(r2)
8111c7c4:	d9000215 	stw	r4,8(sp)
8111c7c8:	d9400315 	stw	r5,12(sp)
8111c7cc:	d9800415 	stw	r6,16(sp)
8111c7d0:	d9c00515 	stw	r7,20(sp)
8111c7d4:	111c4fc0 	call	8111c4fc <__locale_charset>
8111c7d8:	d8800015 	stw	r2,0(sp)
8111c7dc:	d8800817 	ldw	r2,32(sp)
8111c7e0:	d9c00517 	ldw	r7,20(sp)
8111c7e4:	d9800417 	ldw	r6,16(sp)
8111c7e8:	d9400317 	ldw	r5,12(sp)
8111c7ec:	d9000217 	ldw	r4,8(sp)
8111c7f0:	d8800115 	stw	r2,4(sp)
8111c7f4:	803ee83a 	callr	r16
8111c7f8:	dfc00717 	ldw	ra,28(sp)
8111c7fc:	dc000617 	ldw	r16,24(sp)
8111c800:	dec00804 	addi	sp,sp,32
8111c804:	f800283a 	ret

8111c808 <memchr>:
8111c808:	208000cc 	andi	r2,r4,3
8111c80c:	280f883a 	mov	r7,r5
8111c810:	10003426 	beq	r2,zero,8111c8e4 <memchr+0xdc>
8111c814:	30bfffc4 	addi	r2,r6,-1
8111c818:	30001a26 	beq	r6,zero,8111c884 <memchr+0x7c>
8111c81c:	20c00003 	ldbu	r3,0(r4)
8111c820:	29803fcc 	andi	r6,r5,255
8111c824:	30c0051e 	bne	r6,r3,8111c83c <memchr+0x34>
8111c828:	00001806 	br	8111c88c <memchr+0x84>
8111c82c:	10001526 	beq	r2,zero,8111c884 <memchr+0x7c>
8111c830:	20c00003 	ldbu	r3,0(r4)
8111c834:	10bfffc4 	addi	r2,r2,-1
8111c838:	30c01426 	beq	r6,r3,8111c88c <memchr+0x84>
8111c83c:	21000044 	addi	r4,r4,1
8111c840:	20c000cc 	andi	r3,r4,3
8111c844:	183ff91e 	bne	r3,zero,8111c82c <__reset+0xfb0fc82c>
8111c848:	020000c4 	movi	r8,3
8111c84c:	40801136 	bltu	r8,r2,8111c894 <memchr+0x8c>
8111c850:	10000c26 	beq	r2,zero,8111c884 <memchr+0x7c>
8111c854:	20c00003 	ldbu	r3,0(r4)
8111c858:	29403fcc 	andi	r5,r5,255
8111c85c:	28c00b26 	beq	r5,r3,8111c88c <memchr+0x84>
8111c860:	20c00044 	addi	r3,r4,1
8111c864:	39803fcc 	andi	r6,r7,255
8111c868:	2089883a 	add	r4,r4,r2
8111c86c:	00000306 	br	8111c87c <memchr+0x74>
8111c870:	18c00044 	addi	r3,r3,1
8111c874:	197fffc3 	ldbu	r5,-1(r3)
8111c878:	31400526 	beq	r6,r5,8111c890 <memchr+0x88>
8111c87c:	1805883a 	mov	r2,r3
8111c880:	20fffb1e 	bne	r4,r3,8111c870 <__reset+0xfb0fc870>
8111c884:	0005883a 	mov	r2,zero
8111c888:	f800283a 	ret
8111c88c:	2005883a 	mov	r2,r4
8111c890:	f800283a 	ret
8111c894:	28c03fcc 	andi	r3,r5,255
8111c898:	1812923a 	slli	r9,r3,8
8111c89c:	02ffbff4 	movhi	r11,65279
8111c8a0:	02a02074 	movhi	r10,32897
8111c8a4:	48d2b03a 	or	r9,r9,r3
8111c8a8:	4806943a 	slli	r3,r9,16
8111c8ac:	5affbfc4 	addi	r11,r11,-257
8111c8b0:	52a02004 	addi	r10,r10,-32640
8111c8b4:	48d2b03a 	or	r9,r9,r3
8111c8b8:	20c00017 	ldw	r3,0(r4)
8111c8bc:	48c6f03a 	xor	r3,r9,r3
8111c8c0:	1acd883a 	add	r6,r3,r11
8111c8c4:	00c6303a 	nor	r3,zero,r3
8111c8c8:	30c6703a 	and	r3,r6,r3
8111c8cc:	1a86703a 	and	r3,r3,r10
8111c8d0:	183fe01e 	bne	r3,zero,8111c854 <__reset+0xfb0fc854>
8111c8d4:	10bfff04 	addi	r2,r2,-4
8111c8d8:	21000104 	addi	r4,r4,4
8111c8dc:	40bff636 	bltu	r8,r2,8111c8b8 <__reset+0xfb0fc8b8>
8111c8e0:	003fdb06 	br	8111c850 <__reset+0xfb0fc850>
8111c8e4:	3005883a 	mov	r2,r6
8111c8e8:	003fd706 	br	8111c848 <__reset+0xfb0fc848>

8111c8ec <memmove>:
8111c8ec:	2005883a 	mov	r2,r4
8111c8f0:	29000b2e 	bgeu	r5,r4,8111c920 <memmove+0x34>
8111c8f4:	298f883a 	add	r7,r5,r6
8111c8f8:	21c0092e 	bgeu	r4,r7,8111c920 <memmove+0x34>
8111c8fc:	2187883a 	add	r3,r4,r6
8111c900:	198bc83a 	sub	r5,r3,r6
8111c904:	30004826 	beq	r6,zero,8111ca28 <memmove+0x13c>
8111c908:	39ffffc4 	addi	r7,r7,-1
8111c90c:	39000003 	ldbu	r4,0(r7)
8111c910:	18ffffc4 	addi	r3,r3,-1
8111c914:	19000005 	stb	r4,0(r3)
8111c918:	28fffb1e 	bne	r5,r3,8111c908 <__reset+0xfb0fc908>
8111c91c:	f800283a 	ret
8111c920:	00c003c4 	movi	r3,15
8111c924:	1980412e 	bgeu	r3,r6,8111ca2c <memmove+0x140>
8111c928:	2886b03a 	or	r3,r5,r2
8111c92c:	18c000cc 	andi	r3,r3,3
8111c930:	1800401e 	bne	r3,zero,8111ca34 <memmove+0x148>
8111c934:	33fffc04 	addi	r15,r6,-16
8111c938:	781ed13a 	srli	r15,r15,4
8111c93c:	28c00104 	addi	r3,r5,4
8111c940:	13400104 	addi	r13,r2,4
8111c944:	781c913a 	slli	r14,r15,4
8111c948:	2b000204 	addi	r12,r5,8
8111c94c:	12c00204 	addi	r11,r2,8
8111c950:	73800504 	addi	r14,r14,20
8111c954:	2a800304 	addi	r10,r5,12
8111c958:	12400304 	addi	r9,r2,12
8111c95c:	2b9d883a 	add	r14,r5,r14
8111c960:	2811883a 	mov	r8,r5
8111c964:	100f883a 	mov	r7,r2
8111c968:	41000017 	ldw	r4,0(r8)
8111c96c:	39c00404 	addi	r7,r7,16
8111c970:	18c00404 	addi	r3,r3,16
8111c974:	393ffc15 	stw	r4,-16(r7)
8111c978:	193ffc17 	ldw	r4,-16(r3)
8111c97c:	6b400404 	addi	r13,r13,16
8111c980:	5ac00404 	addi	r11,r11,16
8111c984:	693ffc15 	stw	r4,-16(r13)
8111c988:	61000017 	ldw	r4,0(r12)
8111c98c:	4a400404 	addi	r9,r9,16
8111c990:	42000404 	addi	r8,r8,16
8111c994:	593ffc15 	stw	r4,-16(r11)
8111c998:	51000017 	ldw	r4,0(r10)
8111c99c:	63000404 	addi	r12,r12,16
8111c9a0:	52800404 	addi	r10,r10,16
8111c9a4:	493ffc15 	stw	r4,-16(r9)
8111c9a8:	1bbfef1e 	bne	r3,r14,8111c968 <__reset+0xfb0fc968>
8111c9ac:	79000044 	addi	r4,r15,1
8111c9b0:	2008913a 	slli	r4,r4,4
8111c9b4:	328003cc 	andi	r10,r6,15
8111c9b8:	02c000c4 	movi	r11,3
8111c9bc:	1107883a 	add	r3,r2,r4
8111c9c0:	290b883a 	add	r5,r5,r4
8111c9c4:	5a801e2e 	bgeu	r11,r10,8111ca40 <memmove+0x154>
8111c9c8:	1813883a 	mov	r9,r3
8111c9cc:	2811883a 	mov	r8,r5
8111c9d0:	500f883a 	mov	r7,r10
8111c9d4:	41000017 	ldw	r4,0(r8)
8111c9d8:	4a400104 	addi	r9,r9,4
8111c9dc:	39ffff04 	addi	r7,r7,-4
8111c9e0:	493fff15 	stw	r4,-4(r9)
8111c9e4:	42000104 	addi	r8,r8,4
8111c9e8:	59fffa36 	bltu	r11,r7,8111c9d4 <__reset+0xfb0fc9d4>
8111c9ec:	513fff04 	addi	r4,r10,-4
8111c9f0:	2008d0ba 	srli	r4,r4,2
8111c9f4:	318000cc 	andi	r6,r6,3
8111c9f8:	21000044 	addi	r4,r4,1
8111c9fc:	2109883a 	add	r4,r4,r4
8111ca00:	2109883a 	add	r4,r4,r4
8111ca04:	1907883a 	add	r3,r3,r4
8111ca08:	290b883a 	add	r5,r5,r4
8111ca0c:	30000b26 	beq	r6,zero,8111ca3c <memmove+0x150>
8111ca10:	198d883a 	add	r6,r3,r6
8111ca14:	29c00003 	ldbu	r7,0(r5)
8111ca18:	18c00044 	addi	r3,r3,1
8111ca1c:	29400044 	addi	r5,r5,1
8111ca20:	19ffffc5 	stb	r7,-1(r3)
8111ca24:	19bffb1e 	bne	r3,r6,8111ca14 <__reset+0xfb0fca14>
8111ca28:	f800283a 	ret
8111ca2c:	1007883a 	mov	r3,r2
8111ca30:	003ff606 	br	8111ca0c <__reset+0xfb0fca0c>
8111ca34:	1007883a 	mov	r3,r2
8111ca38:	003ff506 	br	8111ca10 <__reset+0xfb0fca10>
8111ca3c:	f800283a 	ret
8111ca40:	500d883a 	mov	r6,r10
8111ca44:	003ff106 	br	8111ca0c <__reset+0xfb0fca0c>

8111ca48 <_Balloc>:
8111ca48:	defffc04 	addi	sp,sp,-16
8111ca4c:	de00012e 	bgeu	sp,et,8111ca54 <_Balloc+0xc>
8111ca50:	003b68fa 	trap	3
8111ca54:	20801317 	ldw	r2,76(r4)
8111ca58:	dc400115 	stw	r17,4(sp)
8111ca5c:	dc000015 	stw	r16,0(sp)
8111ca60:	dfc00315 	stw	ra,12(sp)
8111ca64:	dc800215 	stw	r18,8(sp)
8111ca68:	2023883a 	mov	r17,r4
8111ca6c:	2821883a 	mov	r16,r5
8111ca70:	10000f26 	beq	r2,zero,8111cab0 <_Balloc+0x68>
8111ca74:	8407883a 	add	r3,r16,r16
8111ca78:	18c7883a 	add	r3,r3,r3
8111ca7c:	10c7883a 	add	r3,r2,r3
8111ca80:	18800017 	ldw	r2,0(r3)
8111ca84:	10001126 	beq	r2,zero,8111cacc <_Balloc+0x84>
8111ca88:	11000017 	ldw	r4,0(r2)
8111ca8c:	19000015 	stw	r4,0(r3)
8111ca90:	10000415 	stw	zero,16(r2)
8111ca94:	10000315 	stw	zero,12(r2)
8111ca98:	dfc00317 	ldw	ra,12(sp)
8111ca9c:	dc800217 	ldw	r18,8(sp)
8111caa0:	dc400117 	ldw	r17,4(sp)
8111caa4:	dc000017 	ldw	r16,0(sp)
8111caa8:	dec00404 	addi	sp,sp,16
8111caac:	f800283a 	ret
8111cab0:	01800844 	movi	r6,33
8111cab4:	01400104 	movi	r5,4
8111cab8:	1122f700 	call	81122f70 <_calloc_r>
8111cabc:	88801315 	stw	r2,76(r17)
8111cac0:	103fec1e 	bne	r2,zero,8111ca74 <__reset+0xfb0fca74>
8111cac4:	0005883a 	mov	r2,zero
8111cac8:	003ff306 	br	8111ca98 <__reset+0xfb0fca98>
8111cacc:	01400044 	movi	r5,1
8111cad0:	2c24983a 	sll	r18,r5,r16
8111cad4:	8809883a 	mov	r4,r17
8111cad8:	91800144 	addi	r6,r18,5
8111cadc:	318d883a 	add	r6,r6,r6
8111cae0:	318d883a 	add	r6,r6,r6
8111cae4:	1122f700 	call	81122f70 <_calloc_r>
8111cae8:	103ff626 	beq	r2,zero,8111cac4 <__reset+0xfb0fcac4>
8111caec:	14000115 	stw	r16,4(r2)
8111caf0:	14800215 	stw	r18,8(r2)
8111caf4:	003fe606 	br	8111ca90 <__reset+0xfb0fca90>

8111caf8 <_Bfree>:
8111caf8:	28000826 	beq	r5,zero,8111cb1c <_Bfree+0x24>
8111cafc:	28c00117 	ldw	r3,4(r5)
8111cb00:	20801317 	ldw	r2,76(r4)
8111cb04:	18c7883a 	add	r3,r3,r3
8111cb08:	18c7883a 	add	r3,r3,r3
8111cb0c:	10c5883a 	add	r2,r2,r3
8111cb10:	10c00017 	ldw	r3,0(r2)
8111cb14:	28c00015 	stw	r3,0(r5)
8111cb18:	11400015 	stw	r5,0(r2)
8111cb1c:	f800283a 	ret

8111cb20 <__multadd>:
8111cb20:	defffa04 	addi	sp,sp,-24
8111cb24:	de00012e 	bgeu	sp,et,8111cb2c <__multadd+0xc>
8111cb28:	003b68fa 	trap	3
8111cb2c:	0011883a 	mov	r8,zero
8111cb30:	dc800315 	stw	r18,12(sp)
8111cb34:	dc400215 	stw	r17,8(sp)
8111cb38:	dc000115 	stw	r16,4(sp)
8111cb3c:	2823883a 	mov	r17,r5
8111cb40:	2c000417 	ldw	r16,16(r5)
8111cb44:	dfc00515 	stw	ra,20(sp)
8111cb48:	dcc00415 	stw	r19,16(sp)
8111cb4c:	2025883a 	mov	r18,r4
8111cb50:	29400504 	addi	r5,r5,20
8111cb54:	28c00017 	ldw	r3,0(r5)
8111cb58:	29400104 	addi	r5,r5,4
8111cb5c:	42000044 	addi	r8,r8,1
8111cb60:	18bfffcc 	andi	r2,r3,65535
8111cb64:	1185383a 	mul	r2,r2,r6
8111cb68:	1806d43a 	srli	r3,r3,16
8111cb6c:	11cf883a 	add	r7,r2,r7
8111cb70:	3808d43a 	srli	r4,r7,16
8111cb74:	1987383a 	mul	r3,r3,r6
8111cb78:	38bfffcc 	andi	r2,r7,65535
8111cb7c:	1907883a 	add	r3,r3,r4
8111cb80:	1808943a 	slli	r4,r3,16
8111cb84:	180ed43a 	srli	r7,r3,16
8111cb88:	2085883a 	add	r2,r4,r2
8111cb8c:	28bfff15 	stw	r2,-4(r5)
8111cb90:	443ff016 	blt	r8,r16,8111cb54 <__reset+0xfb0fcb54>
8111cb94:	38000926 	beq	r7,zero,8111cbbc <__multadd+0x9c>
8111cb98:	88800217 	ldw	r2,8(r17)
8111cb9c:	80800f0e 	bge	r16,r2,8111cbdc <__multadd+0xbc>
8111cba0:	80800144 	addi	r2,r16,5
8111cba4:	1085883a 	add	r2,r2,r2
8111cba8:	1085883a 	add	r2,r2,r2
8111cbac:	8885883a 	add	r2,r17,r2
8111cbb0:	11c00015 	stw	r7,0(r2)
8111cbb4:	84000044 	addi	r16,r16,1
8111cbb8:	8c000415 	stw	r16,16(r17)
8111cbbc:	8805883a 	mov	r2,r17
8111cbc0:	dfc00517 	ldw	ra,20(sp)
8111cbc4:	dcc00417 	ldw	r19,16(sp)
8111cbc8:	dc800317 	ldw	r18,12(sp)
8111cbcc:	dc400217 	ldw	r17,8(sp)
8111cbd0:	dc000117 	ldw	r16,4(sp)
8111cbd4:	dec00604 	addi	sp,sp,24
8111cbd8:	f800283a 	ret
8111cbdc:	89400117 	ldw	r5,4(r17)
8111cbe0:	9009883a 	mov	r4,r18
8111cbe4:	d9c00015 	stw	r7,0(sp)
8111cbe8:	29400044 	addi	r5,r5,1
8111cbec:	111ca480 	call	8111ca48 <_Balloc>
8111cbf0:	89800417 	ldw	r6,16(r17)
8111cbf4:	89400304 	addi	r5,r17,12
8111cbf8:	11000304 	addi	r4,r2,12
8111cbfc:	31800084 	addi	r6,r6,2
8111cc00:	318d883a 	add	r6,r6,r6
8111cc04:	318d883a 	add	r6,r6,r6
8111cc08:	1027883a 	mov	r19,r2
8111cc0c:	1112b340 	call	81112b34 <memcpy>
8111cc10:	d9c00017 	ldw	r7,0(sp)
8111cc14:	88000a26 	beq	r17,zero,8111cc40 <__multadd+0x120>
8111cc18:	88c00117 	ldw	r3,4(r17)
8111cc1c:	90801317 	ldw	r2,76(r18)
8111cc20:	18c7883a 	add	r3,r3,r3
8111cc24:	18c7883a 	add	r3,r3,r3
8111cc28:	10c5883a 	add	r2,r2,r3
8111cc2c:	10c00017 	ldw	r3,0(r2)
8111cc30:	88c00015 	stw	r3,0(r17)
8111cc34:	14400015 	stw	r17,0(r2)
8111cc38:	9823883a 	mov	r17,r19
8111cc3c:	003fd806 	br	8111cba0 <__reset+0xfb0fcba0>
8111cc40:	9823883a 	mov	r17,r19
8111cc44:	003fd606 	br	8111cba0 <__reset+0xfb0fcba0>

8111cc48 <__s2b>:
8111cc48:	defff904 	addi	sp,sp,-28
8111cc4c:	de00012e 	bgeu	sp,et,8111cc54 <__s2b+0xc>
8111cc50:	003b68fa 	trap	3
8111cc54:	dc400115 	stw	r17,4(sp)
8111cc58:	dc000015 	stw	r16,0(sp)
8111cc5c:	2023883a 	mov	r17,r4
8111cc60:	2821883a 	mov	r16,r5
8111cc64:	39000204 	addi	r4,r7,8
8111cc68:	01400244 	movi	r5,9
8111cc6c:	dcc00315 	stw	r19,12(sp)
8111cc70:	dc800215 	stw	r18,8(sp)
8111cc74:	dfc00615 	stw	ra,24(sp)
8111cc78:	dd400515 	stw	r21,20(sp)
8111cc7c:	dd000415 	stw	r20,16(sp)
8111cc80:	3825883a 	mov	r18,r7
8111cc84:	3027883a 	mov	r19,r6
8111cc88:	1124e680 	call	81124e68 <__divsi3>
8111cc8c:	00c00044 	movi	r3,1
8111cc90:	000b883a 	mov	r5,zero
8111cc94:	1880030e 	bge	r3,r2,8111cca4 <__s2b+0x5c>
8111cc98:	18c7883a 	add	r3,r3,r3
8111cc9c:	29400044 	addi	r5,r5,1
8111cca0:	18bffd16 	blt	r3,r2,8111cc98 <__reset+0xfb0fcc98>
8111cca4:	8809883a 	mov	r4,r17
8111cca8:	111ca480 	call	8111ca48 <_Balloc>
8111ccac:	d8c00717 	ldw	r3,28(sp)
8111ccb0:	10c00515 	stw	r3,20(r2)
8111ccb4:	00c00044 	movi	r3,1
8111ccb8:	10c00415 	stw	r3,16(r2)
8111ccbc:	00c00244 	movi	r3,9
8111ccc0:	1cc0210e 	bge	r3,r19,8111cd48 <__s2b+0x100>
8111ccc4:	80eb883a 	add	r21,r16,r3
8111ccc8:	a829883a 	mov	r20,r21
8111cccc:	84e1883a 	add	r16,r16,r19
8111ccd0:	a1c00007 	ldb	r7,0(r20)
8111ccd4:	01800284 	movi	r6,10
8111ccd8:	a5000044 	addi	r20,r20,1
8111ccdc:	100b883a 	mov	r5,r2
8111cce0:	39fff404 	addi	r7,r7,-48
8111cce4:	8809883a 	mov	r4,r17
8111cce8:	111cb200 	call	8111cb20 <__multadd>
8111ccec:	a43ff81e 	bne	r20,r16,8111ccd0 <__reset+0xfb0fccd0>
8111ccf0:	ace1883a 	add	r16,r21,r19
8111ccf4:	843ffe04 	addi	r16,r16,-8
8111ccf8:	9c800a0e 	bge	r19,r18,8111cd24 <__s2b+0xdc>
8111ccfc:	94e5c83a 	sub	r18,r18,r19
8111cd00:	84a5883a 	add	r18,r16,r18
8111cd04:	81c00007 	ldb	r7,0(r16)
8111cd08:	01800284 	movi	r6,10
8111cd0c:	84000044 	addi	r16,r16,1
8111cd10:	100b883a 	mov	r5,r2
8111cd14:	39fff404 	addi	r7,r7,-48
8111cd18:	8809883a 	mov	r4,r17
8111cd1c:	111cb200 	call	8111cb20 <__multadd>
8111cd20:	84bff81e 	bne	r16,r18,8111cd04 <__reset+0xfb0fcd04>
8111cd24:	dfc00617 	ldw	ra,24(sp)
8111cd28:	dd400517 	ldw	r21,20(sp)
8111cd2c:	dd000417 	ldw	r20,16(sp)
8111cd30:	dcc00317 	ldw	r19,12(sp)
8111cd34:	dc800217 	ldw	r18,8(sp)
8111cd38:	dc400117 	ldw	r17,4(sp)
8111cd3c:	dc000017 	ldw	r16,0(sp)
8111cd40:	dec00704 	addi	sp,sp,28
8111cd44:	f800283a 	ret
8111cd48:	84000284 	addi	r16,r16,10
8111cd4c:	1827883a 	mov	r19,r3
8111cd50:	003fe906 	br	8111ccf8 <__reset+0xfb0fccf8>

8111cd54 <__hi0bits>:
8111cd54:	20bfffec 	andhi	r2,r4,65535
8111cd58:	1000141e 	bne	r2,zero,8111cdac <__hi0bits+0x58>
8111cd5c:	2008943a 	slli	r4,r4,16
8111cd60:	00800404 	movi	r2,16
8111cd64:	20ffc02c 	andhi	r3,r4,65280
8111cd68:	1800021e 	bne	r3,zero,8111cd74 <__hi0bits+0x20>
8111cd6c:	2008923a 	slli	r4,r4,8
8111cd70:	10800204 	addi	r2,r2,8
8111cd74:	20fc002c 	andhi	r3,r4,61440
8111cd78:	1800021e 	bne	r3,zero,8111cd84 <__hi0bits+0x30>
8111cd7c:	2008913a 	slli	r4,r4,4
8111cd80:	10800104 	addi	r2,r2,4
8111cd84:	20f0002c 	andhi	r3,r4,49152
8111cd88:	1800031e 	bne	r3,zero,8111cd98 <__hi0bits+0x44>
8111cd8c:	2109883a 	add	r4,r4,r4
8111cd90:	10800084 	addi	r2,r2,2
8111cd94:	2109883a 	add	r4,r4,r4
8111cd98:	20000316 	blt	r4,zero,8111cda8 <__hi0bits+0x54>
8111cd9c:	2110002c 	andhi	r4,r4,16384
8111cda0:	2000041e 	bne	r4,zero,8111cdb4 <__hi0bits+0x60>
8111cda4:	00800804 	movi	r2,32
8111cda8:	f800283a 	ret
8111cdac:	0005883a 	mov	r2,zero
8111cdb0:	003fec06 	br	8111cd64 <__reset+0xfb0fcd64>
8111cdb4:	10800044 	addi	r2,r2,1
8111cdb8:	f800283a 	ret

8111cdbc <__lo0bits>:
8111cdbc:	20c00017 	ldw	r3,0(r4)
8111cdc0:	188001cc 	andi	r2,r3,7
8111cdc4:	10000826 	beq	r2,zero,8111cde8 <__lo0bits+0x2c>
8111cdc8:	1880004c 	andi	r2,r3,1
8111cdcc:	1000211e 	bne	r2,zero,8111ce54 <__lo0bits+0x98>
8111cdd0:	1880008c 	andi	r2,r3,2
8111cdd4:	1000211e 	bne	r2,zero,8111ce5c <__lo0bits+0xa0>
8111cdd8:	1806d0ba 	srli	r3,r3,2
8111cddc:	00800084 	movi	r2,2
8111cde0:	20c00015 	stw	r3,0(r4)
8111cde4:	f800283a 	ret
8111cde8:	18bfffcc 	andi	r2,r3,65535
8111cdec:	10001326 	beq	r2,zero,8111ce3c <__lo0bits+0x80>
8111cdf0:	0005883a 	mov	r2,zero
8111cdf4:	19403fcc 	andi	r5,r3,255
8111cdf8:	2800021e 	bne	r5,zero,8111ce04 <__lo0bits+0x48>
8111cdfc:	1806d23a 	srli	r3,r3,8
8111ce00:	10800204 	addi	r2,r2,8
8111ce04:	194003cc 	andi	r5,r3,15
8111ce08:	2800021e 	bne	r5,zero,8111ce14 <__lo0bits+0x58>
8111ce0c:	1806d13a 	srli	r3,r3,4
8111ce10:	10800104 	addi	r2,r2,4
8111ce14:	194000cc 	andi	r5,r3,3
8111ce18:	2800021e 	bne	r5,zero,8111ce24 <__lo0bits+0x68>
8111ce1c:	1806d0ba 	srli	r3,r3,2
8111ce20:	10800084 	addi	r2,r2,2
8111ce24:	1940004c 	andi	r5,r3,1
8111ce28:	2800081e 	bne	r5,zero,8111ce4c <__lo0bits+0x90>
8111ce2c:	1806d07a 	srli	r3,r3,1
8111ce30:	1800051e 	bne	r3,zero,8111ce48 <__lo0bits+0x8c>
8111ce34:	00800804 	movi	r2,32
8111ce38:	f800283a 	ret
8111ce3c:	1806d43a 	srli	r3,r3,16
8111ce40:	00800404 	movi	r2,16
8111ce44:	003feb06 	br	8111cdf4 <__reset+0xfb0fcdf4>
8111ce48:	10800044 	addi	r2,r2,1
8111ce4c:	20c00015 	stw	r3,0(r4)
8111ce50:	f800283a 	ret
8111ce54:	0005883a 	mov	r2,zero
8111ce58:	f800283a 	ret
8111ce5c:	1806d07a 	srli	r3,r3,1
8111ce60:	00800044 	movi	r2,1
8111ce64:	20c00015 	stw	r3,0(r4)
8111ce68:	f800283a 	ret

8111ce6c <__i2b>:
8111ce6c:	defffd04 	addi	sp,sp,-12
8111ce70:	de00012e 	bgeu	sp,et,8111ce78 <__i2b+0xc>
8111ce74:	003b68fa 	trap	3
8111ce78:	dc000015 	stw	r16,0(sp)
8111ce7c:	04000044 	movi	r16,1
8111ce80:	dc400115 	stw	r17,4(sp)
8111ce84:	2823883a 	mov	r17,r5
8111ce88:	800b883a 	mov	r5,r16
8111ce8c:	dfc00215 	stw	ra,8(sp)
8111ce90:	111ca480 	call	8111ca48 <_Balloc>
8111ce94:	14400515 	stw	r17,20(r2)
8111ce98:	14000415 	stw	r16,16(r2)
8111ce9c:	dfc00217 	ldw	ra,8(sp)
8111cea0:	dc400117 	ldw	r17,4(sp)
8111cea4:	dc000017 	ldw	r16,0(sp)
8111cea8:	dec00304 	addi	sp,sp,12
8111ceac:	f800283a 	ret

8111ceb0 <__multiply>:
8111ceb0:	defffa04 	addi	sp,sp,-24
8111ceb4:	de00012e 	bgeu	sp,et,8111cebc <__multiply+0xc>
8111ceb8:	003b68fa 	trap	3
8111cebc:	dcc00315 	stw	r19,12(sp)
8111cec0:	dc800215 	stw	r18,8(sp)
8111cec4:	34c00417 	ldw	r19,16(r6)
8111cec8:	2c800417 	ldw	r18,16(r5)
8111cecc:	dd000415 	stw	r20,16(sp)
8111ced0:	dc400115 	stw	r17,4(sp)
8111ced4:	dfc00515 	stw	ra,20(sp)
8111ced8:	dc000015 	stw	r16,0(sp)
8111cedc:	2829883a 	mov	r20,r5
8111cee0:	3023883a 	mov	r17,r6
8111cee4:	94c0050e 	bge	r18,r19,8111cefc <__multiply+0x4c>
8111cee8:	9007883a 	mov	r3,r18
8111ceec:	3029883a 	mov	r20,r6
8111cef0:	9825883a 	mov	r18,r19
8111cef4:	2823883a 	mov	r17,r5
8111cef8:	1827883a 	mov	r19,r3
8111cefc:	a0800217 	ldw	r2,8(r20)
8111cf00:	94e1883a 	add	r16,r18,r19
8111cf04:	a1400117 	ldw	r5,4(r20)
8111cf08:	1400010e 	bge	r2,r16,8111cf10 <__multiply+0x60>
8111cf0c:	29400044 	addi	r5,r5,1
8111cf10:	111ca480 	call	8111ca48 <_Balloc>
8111cf14:	8415883a 	add	r10,r16,r16
8111cf18:	12c00504 	addi	r11,r2,20
8111cf1c:	5295883a 	add	r10,r10,r10
8111cf20:	5a95883a 	add	r10,r11,r10
8111cf24:	5807883a 	mov	r3,r11
8111cf28:	5a80032e 	bgeu	r11,r10,8111cf38 <__multiply+0x88>
8111cf2c:	18000015 	stw	zero,0(r3)
8111cf30:	18c00104 	addi	r3,r3,4
8111cf34:	1abffd36 	bltu	r3,r10,8111cf2c <__reset+0xfb0fcf2c>
8111cf38:	9ce7883a 	add	r19,r19,r19
8111cf3c:	94a5883a 	add	r18,r18,r18
8111cf40:	89800504 	addi	r6,r17,20
8111cf44:	9ce7883a 	add	r19,r19,r19
8111cf48:	a3400504 	addi	r13,r20,20
8111cf4c:	94a5883a 	add	r18,r18,r18
8111cf50:	34d9883a 	add	r12,r6,r19
8111cf54:	6c93883a 	add	r9,r13,r18
8111cf58:	3300422e 	bgeu	r6,r12,8111d064 <__multiply+0x1b4>
8111cf5c:	37c00017 	ldw	ra,0(r6)
8111cf60:	fbffffcc 	andi	r15,ra,65535
8111cf64:	78001b26 	beq	r15,zero,8111cfd4 <__multiply+0x124>
8111cf68:	5811883a 	mov	r8,r11
8111cf6c:	681d883a 	mov	r14,r13
8111cf70:	000f883a 	mov	r7,zero
8111cf74:	71000017 	ldw	r4,0(r14)
8111cf78:	40c00017 	ldw	r3,0(r8)
8111cf7c:	73800104 	addi	r14,r14,4
8111cf80:	217fffcc 	andi	r5,r4,65535
8111cf84:	2bcb383a 	mul	r5,r5,r15
8111cf88:	2008d43a 	srli	r4,r4,16
8111cf8c:	1c7fffcc 	andi	r17,r3,65535
8111cf90:	2c4b883a 	add	r5,r5,r17
8111cf94:	29cb883a 	add	r5,r5,r7
8111cf98:	23c9383a 	mul	r4,r4,r15
8111cf9c:	1806d43a 	srli	r3,r3,16
8111cfa0:	280ed43a 	srli	r7,r5,16
8111cfa4:	297fffcc 	andi	r5,r5,65535
8111cfa8:	20c7883a 	add	r3,r4,r3
8111cfac:	19c7883a 	add	r3,r3,r7
8111cfb0:	1808943a 	slli	r4,r3,16
8111cfb4:	4023883a 	mov	r17,r8
8111cfb8:	180ed43a 	srli	r7,r3,16
8111cfbc:	214ab03a 	or	r5,r4,r5
8111cfc0:	41400015 	stw	r5,0(r8)
8111cfc4:	42000104 	addi	r8,r8,4
8111cfc8:	727fea36 	bltu	r14,r9,8111cf74 <__reset+0xfb0fcf74>
8111cfcc:	89c00115 	stw	r7,4(r17)
8111cfd0:	37c00017 	ldw	ra,0(r6)
8111cfd4:	f83ed43a 	srli	ra,ra,16
8111cfd8:	f8001f26 	beq	ra,zero,8111d058 <__multiply+0x1a8>
8111cfdc:	58c00017 	ldw	r3,0(r11)
8111cfe0:	681d883a 	mov	r14,r13
8111cfe4:	581f883a 	mov	r15,r11
8111cfe8:	1811883a 	mov	r8,r3
8111cfec:	5825883a 	mov	r18,r11
8111cff0:	000f883a 	mov	r7,zero
8111cff4:	00000106 	br	8111cffc <__multiply+0x14c>
8111cff8:	8825883a 	mov	r18,r17
8111cffc:	7140000b 	ldhu	r5,0(r14)
8111d000:	4010d43a 	srli	r8,r8,16
8111d004:	193fffcc 	andi	r4,r3,65535
8111d008:	2fcb383a 	mul	r5,r5,ra
8111d00c:	7bc00104 	addi	r15,r15,4
8111d010:	73800104 	addi	r14,r14,4
8111d014:	2a0b883a 	add	r5,r5,r8
8111d018:	29cb883a 	add	r5,r5,r7
8111d01c:	2806943a 	slli	r3,r5,16
8111d020:	94400104 	addi	r17,r18,4
8111d024:	280ad43a 	srli	r5,r5,16
8111d028:	1908b03a 	or	r4,r3,r4
8111d02c:	793fff15 	stw	r4,-4(r15)
8111d030:	70ffff17 	ldw	r3,-4(r14)
8111d034:	8a000017 	ldw	r8,0(r17)
8111d038:	1806d43a 	srli	r3,r3,16
8111d03c:	413fffcc 	andi	r4,r8,65535
8111d040:	1fc7383a 	mul	r3,r3,ra
8111d044:	1907883a 	add	r3,r3,r4
8111d048:	1947883a 	add	r3,r3,r5
8111d04c:	180ed43a 	srli	r7,r3,16
8111d050:	727fe936 	bltu	r14,r9,8111cff8 <__reset+0xfb0fcff8>
8111d054:	90c00115 	stw	r3,4(r18)
8111d058:	31800104 	addi	r6,r6,4
8111d05c:	5ac00104 	addi	r11,r11,4
8111d060:	333fbe36 	bltu	r6,r12,8111cf5c <__reset+0xfb0fcf5c>
8111d064:	0400090e 	bge	zero,r16,8111d08c <__multiply+0x1dc>
8111d068:	50ffff17 	ldw	r3,-4(r10)
8111d06c:	52bfff04 	addi	r10,r10,-4
8111d070:	18000326 	beq	r3,zero,8111d080 <__multiply+0x1d0>
8111d074:	00000506 	br	8111d08c <__multiply+0x1dc>
8111d078:	50c00017 	ldw	r3,0(r10)
8111d07c:	1800031e 	bne	r3,zero,8111d08c <__multiply+0x1dc>
8111d080:	843fffc4 	addi	r16,r16,-1
8111d084:	52bfff04 	addi	r10,r10,-4
8111d088:	803ffb1e 	bne	r16,zero,8111d078 <__reset+0xfb0fd078>
8111d08c:	14000415 	stw	r16,16(r2)
8111d090:	dfc00517 	ldw	ra,20(sp)
8111d094:	dd000417 	ldw	r20,16(sp)
8111d098:	dcc00317 	ldw	r19,12(sp)
8111d09c:	dc800217 	ldw	r18,8(sp)
8111d0a0:	dc400117 	ldw	r17,4(sp)
8111d0a4:	dc000017 	ldw	r16,0(sp)
8111d0a8:	dec00604 	addi	sp,sp,24
8111d0ac:	f800283a 	ret

8111d0b0 <__pow5mult>:
8111d0b0:	defffa04 	addi	sp,sp,-24
8111d0b4:	de00012e 	bgeu	sp,et,8111d0bc <__pow5mult+0xc>
8111d0b8:	003b68fa 	trap	3
8111d0bc:	308000cc 	andi	r2,r6,3
8111d0c0:	dcc00315 	stw	r19,12(sp)
8111d0c4:	dc000015 	stw	r16,0(sp)
8111d0c8:	dfc00515 	stw	ra,20(sp)
8111d0cc:	dd000415 	stw	r20,16(sp)
8111d0d0:	dc800215 	stw	r18,8(sp)
8111d0d4:	dc400115 	stw	r17,4(sp)
8111d0d8:	3021883a 	mov	r16,r6
8111d0dc:	2027883a 	mov	r19,r4
8111d0e0:	10002f1e 	bne	r2,zero,8111d1a0 <__pow5mult+0xf0>
8111d0e4:	2825883a 	mov	r18,r5
8111d0e8:	8021d0ba 	srai	r16,r16,2
8111d0ec:	80001a26 	beq	r16,zero,8111d158 <__pow5mult+0xa8>
8111d0f0:	9c401217 	ldw	r17,72(r19)
8111d0f4:	8800061e 	bne	r17,zero,8111d110 <__pow5mult+0x60>
8111d0f8:	00003406 	br	8111d1cc <__pow5mult+0x11c>
8111d0fc:	8021d07a 	srai	r16,r16,1
8111d100:	80001526 	beq	r16,zero,8111d158 <__pow5mult+0xa8>
8111d104:	88800017 	ldw	r2,0(r17)
8111d108:	10001c26 	beq	r2,zero,8111d17c <__pow5mult+0xcc>
8111d10c:	1023883a 	mov	r17,r2
8111d110:	8080004c 	andi	r2,r16,1
8111d114:	103ff926 	beq	r2,zero,8111d0fc <__reset+0xfb0fd0fc>
8111d118:	880d883a 	mov	r6,r17
8111d11c:	900b883a 	mov	r5,r18
8111d120:	9809883a 	mov	r4,r19
8111d124:	111ceb00 	call	8111ceb0 <__multiply>
8111d128:	90001b26 	beq	r18,zero,8111d198 <__pow5mult+0xe8>
8111d12c:	91000117 	ldw	r4,4(r18)
8111d130:	98c01317 	ldw	r3,76(r19)
8111d134:	8021d07a 	srai	r16,r16,1
8111d138:	2109883a 	add	r4,r4,r4
8111d13c:	2109883a 	add	r4,r4,r4
8111d140:	1907883a 	add	r3,r3,r4
8111d144:	19000017 	ldw	r4,0(r3)
8111d148:	91000015 	stw	r4,0(r18)
8111d14c:	1c800015 	stw	r18,0(r3)
8111d150:	1025883a 	mov	r18,r2
8111d154:	803feb1e 	bne	r16,zero,8111d104 <__reset+0xfb0fd104>
8111d158:	9005883a 	mov	r2,r18
8111d15c:	dfc00517 	ldw	ra,20(sp)
8111d160:	dd000417 	ldw	r20,16(sp)
8111d164:	dcc00317 	ldw	r19,12(sp)
8111d168:	dc800217 	ldw	r18,8(sp)
8111d16c:	dc400117 	ldw	r17,4(sp)
8111d170:	dc000017 	ldw	r16,0(sp)
8111d174:	dec00604 	addi	sp,sp,24
8111d178:	f800283a 	ret
8111d17c:	880d883a 	mov	r6,r17
8111d180:	880b883a 	mov	r5,r17
8111d184:	9809883a 	mov	r4,r19
8111d188:	111ceb00 	call	8111ceb0 <__multiply>
8111d18c:	88800015 	stw	r2,0(r17)
8111d190:	10000015 	stw	zero,0(r2)
8111d194:	003fdd06 	br	8111d10c <__reset+0xfb0fd10c>
8111d198:	1025883a 	mov	r18,r2
8111d19c:	003fd706 	br	8111d0fc <__reset+0xfb0fd0fc>
8111d1a0:	10bfffc4 	addi	r2,r2,-1
8111d1a4:	1085883a 	add	r2,r2,r2
8111d1a8:	00e04534 	movhi	r3,33044
8111d1ac:	18f9f304 	addi	r3,r3,-6196
8111d1b0:	1085883a 	add	r2,r2,r2
8111d1b4:	1885883a 	add	r2,r3,r2
8111d1b8:	11800017 	ldw	r6,0(r2)
8111d1bc:	000f883a 	mov	r7,zero
8111d1c0:	111cb200 	call	8111cb20 <__multadd>
8111d1c4:	1025883a 	mov	r18,r2
8111d1c8:	003fc706 	br	8111d0e8 <__reset+0xfb0fd0e8>
8111d1cc:	05000044 	movi	r20,1
8111d1d0:	a00b883a 	mov	r5,r20
8111d1d4:	9809883a 	mov	r4,r19
8111d1d8:	111ca480 	call	8111ca48 <_Balloc>
8111d1dc:	1023883a 	mov	r17,r2
8111d1e0:	00809c44 	movi	r2,625
8111d1e4:	88800515 	stw	r2,20(r17)
8111d1e8:	8d000415 	stw	r20,16(r17)
8111d1ec:	9c401215 	stw	r17,72(r19)
8111d1f0:	88000015 	stw	zero,0(r17)
8111d1f4:	003fc606 	br	8111d110 <__reset+0xfb0fd110>

8111d1f8 <__lshift>:
8111d1f8:	defff904 	addi	sp,sp,-28
8111d1fc:	de00012e 	bgeu	sp,et,8111d204 <__lshift+0xc>
8111d200:	003b68fa 	trap	3
8111d204:	dd400515 	stw	r21,20(sp)
8111d208:	dcc00315 	stw	r19,12(sp)
8111d20c:	302bd17a 	srai	r21,r6,5
8111d210:	2cc00417 	ldw	r19,16(r5)
8111d214:	28800217 	ldw	r2,8(r5)
8111d218:	dd000415 	stw	r20,16(sp)
8111d21c:	ace7883a 	add	r19,r21,r19
8111d220:	dc800215 	stw	r18,8(sp)
8111d224:	dc400115 	stw	r17,4(sp)
8111d228:	dc000015 	stw	r16,0(sp)
8111d22c:	dfc00615 	stw	ra,24(sp)
8111d230:	9c000044 	addi	r16,r19,1
8111d234:	2823883a 	mov	r17,r5
8111d238:	3029883a 	mov	r20,r6
8111d23c:	2025883a 	mov	r18,r4
8111d240:	29400117 	ldw	r5,4(r5)
8111d244:	1400030e 	bge	r2,r16,8111d254 <__lshift+0x5c>
8111d248:	1085883a 	add	r2,r2,r2
8111d24c:	29400044 	addi	r5,r5,1
8111d250:	143ffd16 	blt	r2,r16,8111d248 <__reset+0xfb0fd248>
8111d254:	9009883a 	mov	r4,r18
8111d258:	111ca480 	call	8111ca48 <_Balloc>
8111d25c:	10c00504 	addi	r3,r2,20
8111d260:	0540070e 	bge	zero,r21,8111d280 <__lshift+0x88>
8111d264:	ad6b883a 	add	r21,r21,r21
8111d268:	ad6b883a 	add	r21,r21,r21
8111d26c:	1809883a 	mov	r4,r3
8111d270:	1d47883a 	add	r3,r3,r21
8111d274:	20000015 	stw	zero,0(r4)
8111d278:	21000104 	addi	r4,r4,4
8111d27c:	193ffd1e 	bne	r3,r4,8111d274 <__reset+0xfb0fd274>
8111d280:	8a000417 	ldw	r8,16(r17)
8111d284:	89000504 	addi	r4,r17,20
8111d288:	a18007cc 	andi	r6,r20,31
8111d28c:	4211883a 	add	r8,r8,r8
8111d290:	4211883a 	add	r8,r8,r8
8111d294:	2211883a 	add	r8,r4,r8
8111d298:	30002326 	beq	r6,zero,8111d328 <__lshift+0x130>
8111d29c:	02400804 	movi	r9,32
8111d2a0:	4993c83a 	sub	r9,r9,r6
8111d2a4:	000b883a 	mov	r5,zero
8111d2a8:	21c00017 	ldw	r7,0(r4)
8111d2ac:	1815883a 	mov	r10,r3
8111d2b0:	18c00104 	addi	r3,r3,4
8111d2b4:	398e983a 	sll	r7,r7,r6
8111d2b8:	21000104 	addi	r4,r4,4
8111d2bc:	394ab03a 	or	r5,r7,r5
8111d2c0:	197fff15 	stw	r5,-4(r3)
8111d2c4:	217fff17 	ldw	r5,-4(r4)
8111d2c8:	2a4ad83a 	srl	r5,r5,r9
8111d2cc:	223ff636 	bltu	r4,r8,8111d2a8 <__reset+0xfb0fd2a8>
8111d2d0:	51400115 	stw	r5,4(r10)
8111d2d4:	28001a1e 	bne	r5,zero,8111d340 <__lshift+0x148>
8111d2d8:	843fffc4 	addi	r16,r16,-1
8111d2dc:	14000415 	stw	r16,16(r2)
8111d2e0:	88000826 	beq	r17,zero,8111d304 <__lshift+0x10c>
8111d2e4:	89000117 	ldw	r4,4(r17)
8111d2e8:	90c01317 	ldw	r3,76(r18)
8111d2ec:	2109883a 	add	r4,r4,r4
8111d2f0:	2109883a 	add	r4,r4,r4
8111d2f4:	1907883a 	add	r3,r3,r4
8111d2f8:	19000017 	ldw	r4,0(r3)
8111d2fc:	89000015 	stw	r4,0(r17)
8111d300:	1c400015 	stw	r17,0(r3)
8111d304:	dfc00617 	ldw	ra,24(sp)
8111d308:	dd400517 	ldw	r21,20(sp)
8111d30c:	dd000417 	ldw	r20,16(sp)
8111d310:	dcc00317 	ldw	r19,12(sp)
8111d314:	dc800217 	ldw	r18,8(sp)
8111d318:	dc400117 	ldw	r17,4(sp)
8111d31c:	dc000017 	ldw	r16,0(sp)
8111d320:	dec00704 	addi	sp,sp,28
8111d324:	f800283a 	ret
8111d328:	21400017 	ldw	r5,0(r4)
8111d32c:	18c00104 	addi	r3,r3,4
8111d330:	21000104 	addi	r4,r4,4
8111d334:	197fff15 	stw	r5,-4(r3)
8111d338:	223ffb36 	bltu	r4,r8,8111d328 <__reset+0xfb0fd328>
8111d33c:	003fe606 	br	8111d2d8 <__reset+0xfb0fd2d8>
8111d340:	9c000084 	addi	r16,r19,2
8111d344:	003fe406 	br	8111d2d8 <__reset+0xfb0fd2d8>

8111d348 <__mcmp>:
8111d348:	20800417 	ldw	r2,16(r4)
8111d34c:	28c00417 	ldw	r3,16(r5)
8111d350:	10c5c83a 	sub	r2,r2,r3
8111d354:	1000111e 	bne	r2,zero,8111d39c <__mcmp+0x54>
8111d358:	18c7883a 	add	r3,r3,r3
8111d35c:	18c7883a 	add	r3,r3,r3
8111d360:	21000504 	addi	r4,r4,20
8111d364:	29400504 	addi	r5,r5,20
8111d368:	20c5883a 	add	r2,r4,r3
8111d36c:	28cb883a 	add	r5,r5,r3
8111d370:	00000106 	br	8111d378 <__mcmp+0x30>
8111d374:	20800a2e 	bgeu	r4,r2,8111d3a0 <__mcmp+0x58>
8111d378:	10bfff04 	addi	r2,r2,-4
8111d37c:	297fff04 	addi	r5,r5,-4
8111d380:	11800017 	ldw	r6,0(r2)
8111d384:	28c00017 	ldw	r3,0(r5)
8111d388:	30fffa26 	beq	r6,r3,8111d374 <__reset+0xfb0fd374>
8111d38c:	30c00236 	bltu	r6,r3,8111d398 <__mcmp+0x50>
8111d390:	00800044 	movi	r2,1
8111d394:	f800283a 	ret
8111d398:	00bfffc4 	movi	r2,-1
8111d39c:	f800283a 	ret
8111d3a0:	0005883a 	mov	r2,zero
8111d3a4:	f800283a 	ret

8111d3a8 <__mdiff>:
8111d3a8:	defffa04 	addi	sp,sp,-24
8111d3ac:	de00012e 	bgeu	sp,et,8111d3b4 <__mdiff+0xc>
8111d3b0:	003b68fa 	trap	3
8111d3b4:	28c00417 	ldw	r3,16(r5)
8111d3b8:	30800417 	ldw	r2,16(r6)
8111d3bc:	dcc00315 	stw	r19,12(sp)
8111d3c0:	dc800215 	stw	r18,8(sp)
8111d3c4:	dfc00515 	stw	ra,20(sp)
8111d3c8:	dd000415 	stw	r20,16(sp)
8111d3cc:	dc400115 	stw	r17,4(sp)
8111d3d0:	dc000015 	stw	r16,0(sp)
8111d3d4:	1887c83a 	sub	r3,r3,r2
8111d3d8:	2825883a 	mov	r18,r5
8111d3dc:	3027883a 	mov	r19,r6
8111d3e0:	1800141e 	bne	r3,zero,8111d434 <__mdiff+0x8c>
8111d3e4:	1085883a 	add	r2,r2,r2
8111d3e8:	1085883a 	add	r2,r2,r2
8111d3ec:	2a000504 	addi	r8,r5,20
8111d3f0:	34000504 	addi	r16,r6,20
8111d3f4:	4087883a 	add	r3,r8,r2
8111d3f8:	8085883a 	add	r2,r16,r2
8111d3fc:	00000106 	br	8111d404 <__mdiff+0x5c>
8111d400:	40c0592e 	bgeu	r8,r3,8111d568 <__mdiff+0x1c0>
8111d404:	18ffff04 	addi	r3,r3,-4
8111d408:	10bfff04 	addi	r2,r2,-4
8111d40c:	19c00017 	ldw	r7,0(r3)
8111d410:	11400017 	ldw	r5,0(r2)
8111d414:	397ffa26 	beq	r7,r5,8111d400 <__reset+0xfb0fd400>
8111d418:	3940592e 	bgeu	r7,r5,8111d580 <__mdiff+0x1d8>
8111d41c:	9005883a 	mov	r2,r18
8111d420:	4023883a 	mov	r17,r8
8111d424:	9825883a 	mov	r18,r19
8111d428:	05000044 	movi	r20,1
8111d42c:	1027883a 	mov	r19,r2
8111d430:	00000406 	br	8111d444 <__mdiff+0x9c>
8111d434:	18005616 	blt	r3,zero,8111d590 <__mdiff+0x1e8>
8111d438:	34400504 	addi	r17,r6,20
8111d43c:	2c000504 	addi	r16,r5,20
8111d440:	0029883a 	mov	r20,zero
8111d444:	91400117 	ldw	r5,4(r18)
8111d448:	111ca480 	call	8111ca48 <_Balloc>
8111d44c:	92400417 	ldw	r9,16(r18)
8111d450:	9b000417 	ldw	r12,16(r19)
8111d454:	12c00504 	addi	r11,r2,20
8111d458:	4a51883a 	add	r8,r9,r9
8111d45c:	6319883a 	add	r12,r12,r12
8111d460:	4211883a 	add	r8,r8,r8
8111d464:	6319883a 	add	r12,r12,r12
8111d468:	15000315 	stw	r20,12(r2)
8111d46c:	8211883a 	add	r8,r16,r8
8111d470:	8b19883a 	add	r12,r17,r12
8111d474:	0007883a 	mov	r3,zero
8111d478:	81400017 	ldw	r5,0(r16)
8111d47c:	89c00017 	ldw	r7,0(r17)
8111d480:	59800104 	addi	r6,r11,4
8111d484:	293fffcc 	andi	r4,r5,65535
8111d488:	20c7883a 	add	r3,r4,r3
8111d48c:	393fffcc 	andi	r4,r7,65535
8111d490:	1909c83a 	sub	r4,r3,r4
8111d494:	280ad43a 	srli	r5,r5,16
8111d498:	380ed43a 	srli	r7,r7,16
8111d49c:	2007d43a 	srai	r3,r4,16
8111d4a0:	213fffcc 	andi	r4,r4,65535
8111d4a4:	29cbc83a 	sub	r5,r5,r7
8111d4a8:	28c7883a 	add	r3,r5,r3
8111d4ac:	180a943a 	slli	r5,r3,16
8111d4b0:	8c400104 	addi	r17,r17,4
8111d4b4:	84000104 	addi	r16,r16,4
8111d4b8:	2908b03a 	or	r4,r5,r4
8111d4bc:	59000015 	stw	r4,0(r11)
8111d4c0:	1807d43a 	srai	r3,r3,16
8111d4c4:	3015883a 	mov	r10,r6
8111d4c8:	3017883a 	mov	r11,r6
8111d4cc:	8b3fea36 	bltu	r17,r12,8111d478 <__reset+0xfb0fd478>
8111d4d0:	8200162e 	bgeu	r16,r8,8111d52c <__mdiff+0x184>
8111d4d4:	8017883a 	mov	r11,r16
8111d4d8:	59400017 	ldw	r5,0(r11)
8111d4dc:	31800104 	addi	r6,r6,4
8111d4e0:	5ac00104 	addi	r11,r11,4
8111d4e4:	293fffcc 	andi	r4,r5,65535
8111d4e8:	20c7883a 	add	r3,r4,r3
8111d4ec:	280ed43a 	srli	r7,r5,16
8111d4f0:	180bd43a 	srai	r5,r3,16
8111d4f4:	193fffcc 	andi	r4,r3,65535
8111d4f8:	3947883a 	add	r3,r7,r5
8111d4fc:	180a943a 	slli	r5,r3,16
8111d500:	1807d43a 	srai	r3,r3,16
8111d504:	2908b03a 	or	r4,r5,r4
8111d508:	313fff15 	stw	r4,-4(r6)
8111d50c:	5a3ff236 	bltu	r11,r8,8111d4d8 <__reset+0xfb0fd4d8>
8111d510:	0406303a 	nor	r3,zero,r16
8111d514:	1a07883a 	add	r3,r3,r8
8111d518:	1806d0ba 	srli	r3,r3,2
8111d51c:	18c00044 	addi	r3,r3,1
8111d520:	18c7883a 	add	r3,r3,r3
8111d524:	18c7883a 	add	r3,r3,r3
8111d528:	50d5883a 	add	r10,r10,r3
8111d52c:	50ffff04 	addi	r3,r10,-4
8111d530:	2000041e 	bne	r4,zero,8111d544 <__mdiff+0x19c>
8111d534:	18ffff04 	addi	r3,r3,-4
8111d538:	19000017 	ldw	r4,0(r3)
8111d53c:	4a7fffc4 	addi	r9,r9,-1
8111d540:	203ffc26 	beq	r4,zero,8111d534 <__reset+0xfb0fd534>
8111d544:	12400415 	stw	r9,16(r2)
8111d548:	dfc00517 	ldw	ra,20(sp)
8111d54c:	dd000417 	ldw	r20,16(sp)
8111d550:	dcc00317 	ldw	r19,12(sp)
8111d554:	dc800217 	ldw	r18,8(sp)
8111d558:	dc400117 	ldw	r17,4(sp)
8111d55c:	dc000017 	ldw	r16,0(sp)
8111d560:	dec00604 	addi	sp,sp,24
8111d564:	f800283a 	ret
8111d568:	000b883a 	mov	r5,zero
8111d56c:	111ca480 	call	8111ca48 <_Balloc>
8111d570:	00c00044 	movi	r3,1
8111d574:	10c00415 	stw	r3,16(r2)
8111d578:	10000515 	stw	zero,20(r2)
8111d57c:	003ff206 	br	8111d548 <__reset+0xfb0fd548>
8111d580:	8023883a 	mov	r17,r16
8111d584:	0029883a 	mov	r20,zero
8111d588:	4021883a 	mov	r16,r8
8111d58c:	003fad06 	br	8111d444 <__reset+0xfb0fd444>
8111d590:	9005883a 	mov	r2,r18
8111d594:	94400504 	addi	r17,r18,20
8111d598:	9c000504 	addi	r16,r19,20
8111d59c:	9825883a 	mov	r18,r19
8111d5a0:	05000044 	movi	r20,1
8111d5a4:	1027883a 	mov	r19,r2
8111d5a8:	003fa606 	br	8111d444 <__reset+0xfb0fd444>

8111d5ac <__ulp>:
8111d5ac:	295ffc2c 	andhi	r5,r5,32752
8111d5b0:	00bf3034 	movhi	r2,64704
8111d5b4:	2887883a 	add	r3,r5,r2
8111d5b8:	00c0020e 	bge	zero,r3,8111d5c4 <__ulp+0x18>
8111d5bc:	0005883a 	mov	r2,zero
8111d5c0:	f800283a 	ret
8111d5c4:	00c7c83a 	sub	r3,zero,r3
8111d5c8:	1807d53a 	srai	r3,r3,20
8111d5cc:	008004c4 	movi	r2,19
8111d5d0:	10c00b0e 	bge	r2,r3,8111d600 <__ulp+0x54>
8111d5d4:	18bffb04 	addi	r2,r3,-20
8111d5d8:	01000784 	movi	r4,30
8111d5dc:	0007883a 	mov	r3,zero
8111d5e0:	20800516 	blt	r4,r2,8111d5f8 <__ulp+0x4c>
8111d5e4:	010007c4 	movi	r4,31
8111d5e8:	2089c83a 	sub	r4,r4,r2
8111d5ec:	00800044 	movi	r2,1
8111d5f0:	1104983a 	sll	r2,r2,r4
8111d5f4:	f800283a 	ret
8111d5f8:	00800044 	movi	r2,1
8111d5fc:	f800283a 	ret
8111d600:	01400234 	movhi	r5,8
8111d604:	28c7d83a 	sra	r3,r5,r3
8111d608:	0005883a 	mov	r2,zero
8111d60c:	f800283a 	ret

8111d610 <__b2d>:
8111d610:	defffa04 	addi	sp,sp,-24
8111d614:	de00012e 	bgeu	sp,et,8111d61c <__b2d+0xc>
8111d618:	003b68fa 	trap	3
8111d61c:	dc000015 	stw	r16,0(sp)
8111d620:	24000417 	ldw	r16,16(r4)
8111d624:	dc400115 	stw	r17,4(sp)
8111d628:	24400504 	addi	r17,r4,20
8111d62c:	8421883a 	add	r16,r16,r16
8111d630:	8421883a 	add	r16,r16,r16
8111d634:	8c21883a 	add	r16,r17,r16
8111d638:	dc800215 	stw	r18,8(sp)
8111d63c:	84bfff17 	ldw	r18,-4(r16)
8111d640:	dd000415 	stw	r20,16(sp)
8111d644:	dcc00315 	stw	r19,12(sp)
8111d648:	9009883a 	mov	r4,r18
8111d64c:	2829883a 	mov	r20,r5
8111d650:	dfc00515 	stw	ra,20(sp)
8111d654:	111cd540 	call	8111cd54 <__hi0bits>
8111d658:	00c00804 	movi	r3,32
8111d65c:	1889c83a 	sub	r4,r3,r2
8111d660:	a1000015 	stw	r4,0(r20)
8111d664:	01000284 	movi	r4,10
8111d668:	84ffff04 	addi	r19,r16,-4
8111d66c:	20801216 	blt	r4,r2,8111d6b8 <__b2d+0xa8>
8111d670:	018002c4 	movi	r6,11
8111d674:	308dc83a 	sub	r6,r6,r2
8111d678:	9186d83a 	srl	r3,r18,r6
8111d67c:	18cffc34 	orhi	r3,r3,16368
8111d680:	8cc0212e 	bgeu	r17,r19,8111d708 <__b2d+0xf8>
8111d684:	813ffe17 	ldw	r4,-8(r16)
8111d688:	218cd83a 	srl	r6,r4,r6
8111d68c:	10800544 	addi	r2,r2,21
8111d690:	9084983a 	sll	r2,r18,r2
8111d694:	1184b03a 	or	r2,r2,r6
8111d698:	dfc00517 	ldw	ra,20(sp)
8111d69c:	dd000417 	ldw	r20,16(sp)
8111d6a0:	dcc00317 	ldw	r19,12(sp)
8111d6a4:	dc800217 	ldw	r18,8(sp)
8111d6a8:	dc400117 	ldw	r17,4(sp)
8111d6ac:	dc000017 	ldw	r16,0(sp)
8111d6b0:	dec00604 	addi	sp,sp,24
8111d6b4:	f800283a 	ret
8111d6b8:	8cc00f2e 	bgeu	r17,r19,8111d6f8 <__b2d+0xe8>
8111d6bc:	117ffd44 	addi	r5,r2,-11
8111d6c0:	80bffe17 	ldw	r2,-8(r16)
8111d6c4:	28000e26 	beq	r5,zero,8111d700 <__b2d+0xf0>
8111d6c8:	1949c83a 	sub	r4,r3,r5
8111d6cc:	9164983a 	sll	r18,r18,r5
8111d6d0:	1106d83a 	srl	r3,r2,r4
8111d6d4:	81bffe04 	addi	r6,r16,-8
8111d6d8:	948ffc34 	orhi	r18,r18,16368
8111d6dc:	90c6b03a 	or	r3,r18,r3
8111d6e0:	89800e2e 	bgeu	r17,r6,8111d71c <__b2d+0x10c>
8111d6e4:	81bffd17 	ldw	r6,-12(r16)
8111d6e8:	1144983a 	sll	r2,r2,r5
8111d6ec:	310ad83a 	srl	r5,r6,r4
8111d6f0:	2884b03a 	or	r2,r5,r2
8111d6f4:	003fe806 	br	8111d698 <__reset+0xfb0fd698>
8111d6f8:	10bffd44 	addi	r2,r2,-11
8111d6fc:	1000041e 	bne	r2,zero,8111d710 <__b2d+0x100>
8111d700:	90cffc34 	orhi	r3,r18,16368
8111d704:	003fe406 	br	8111d698 <__reset+0xfb0fd698>
8111d708:	000d883a 	mov	r6,zero
8111d70c:	003fdf06 	br	8111d68c <__reset+0xfb0fd68c>
8111d710:	90a4983a 	sll	r18,r18,r2
8111d714:	0005883a 	mov	r2,zero
8111d718:	003ff906 	br	8111d700 <__reset+0xfb0fd700>
8111d71c:	1144983a 	sll	r2,r2,r5
8111d720:	003fdd06 	br	8111d698 <__reset+0xfb0fd698>

8111d724 <__d2b>:
8111d724:	defff804 	addi	sp,sp,-32
8111d728:	de00012e 	bgeu	sp,et,8111d730 <__d2b+0xc>
8111d72c:	003b68fa 	trap	3
8111d730:	dc000215 	stw	r16,8(sp)
8111d734:	3021883a 	mov	r16,r6
8111d738:	dc400315 	stw	r17,12(sp)
8111d73c:	8022907a 	slli	r17,r16,1
8111d740:	dd000615 	stw	r20,24(sp)
8111d744:	2829883a 	mov	r20,r5
8111d748:	01400044 	movi	r5,1
8111d74c:	dcc00515 	stw	r19,20(sp)
8111d750:	dc800415 	stw	r18,16(sp)
8111d754:	dfc00715 	stw	ra,28(sp)
8111d758:	3825883a 	mov	r18,r7
8111d75c:	8822d57a 	srli	r17,r17,21
8111d760:	111ca480 	call	8111ca48 <_Balloc>
8111d764:	1027883a 	mov	r19,r2
8111d768:	00800434 	movhi	r2,16
8111d76c:	10bfffc4 	addi	r2,r2,-1
8111d770:	808c703a 	and	r6,r16,r2
8111d774:	88000126 	beq	r17,zero,8111d77c <__d2b+0x58>
8111d778:	31800434 	orhi	r6,r6,16
8111d77c:	d9800015 	stw	r6,0(sp)
8111d780:	a0002426 	beq	r20,zero,8111d814 <__d2b+0xf0>
8111d784:	d9000104 	addi	r4,sp,4
8111d788:	dd000115 	stw	r20,4(sp)
8111d78c:	111cdbc0 	call	8111cdbc <__lo0bits>
8111d790:	d8c00017 	ldw	r3,0(sp)
8111d794:	10002f1e 	bne	r2,zero,8111d854 <__d2b+0x130>
8111d798:	d9000117 	ldw	r4,4(sp)
8111d79c:	99000515 	stw	r4,20(r19)
8111d7a0:	1821003a 	cmpeq	r16,r3,zero
8111d7a4:	01000084 	movi	r4,2
8111d7a8:	2421c83a 	sub	r16,r4,r16
8111d7ac:	98c00615 	stw	r3,24(r19)
8111d7b0:	9c000415 	stw	r16,16(r19)
8111d7b4:	88001f1e 	bne	r17,zero,8111d834 <__d2b+0x110>
8111d7b8:	10bef384 	addi	r2,r2,-1074
8111d7bc:	90800015 	stw	r2,0(r18)
8111d7c0:	00900034 	movhi	r2,16384
8111d7c4:	10bfffc4 	addi	r2,r2,-1
8111d7c8:	8085883a 	add	r2,r16,r2
8111d7cc:	1085883a 	add	r2,r2,r2
8111d7d0:	1085883a 	add	r2,r2,r2
8111d7d4:	9885883a 	add	r2,r19,r2
8111d7d8:	11000517 	ldw	r4,20(r2)
8111d7dc:	8020917a 	slli	r16,r16,5
8111d7e0:	111cd540 	call	8111cd54 <__hi0bits>
8111d7e4:	d8c00817 	ldw	r3,32(sp)
8111d7e8:	8085c83a 	sub	r2,r16,r2
8111d7ec:	18800015 	stw	r2,0(r3)
8111d7f0:	9805883a 	mov	r2,r19
8111d7f4:	dfc00717 	ldw	ra,28(sp)
8111d7f8:	dd000617 	ldw	r20,24(sp)
8111d7fc:	dcc00517 	ldw	r19,20(sp)
8111d800:	dc800417 	ldw	r18,16(sp)
8111d804:	dc400317 	ldw	r17,12(sp)
8111d808:	dc000217 	ldw	r16,8(sp)
8111d80c:	dec00804 	addi	sp,sp,32
8111d810:	f800283a 	ret
8111d814:	d809883a 	mov	r4,sp
8111d818:	111cdbc0 	call	8111cdbc <__lo0bits>
8111d81c:	d8c00017 	ldw	r3,0(sp)
8111d820:	04000044 	movi	r16,1
8111d824:	9c000415 	stw	r16,16(r19)
8111d828:	98c00515 	stw	r3,20(r19)
8111d82c:	10800804 	addi	r2,r2,32
8111d830:	883fe126 	beq	r17,zero,8111d7b8 <__reset+0xfb0fd7b8>
8111d834:	00c00d44 	movi	r3,53
8111d838:	8c7ef344 	addi	r17,r17,-1075
8111d83c:	88a3883a 	add	r17,r17,r2
8111d840:	1885c83a 	sub	r2,r3,r2
8111d844:	d8c00817 	ldw	r3,32(sp)
8111d848:	94400015 	stw	r17,0(r18)
8111d84c:	18800015 	stw	r2,0(r3)
8111d850:	003fe706 	br	8111d7f0 <__reset+0xfb0fd7f0>
8111d854:	01000804 	movi	r4,32
8111d858:	2089c83a 	sub	r4,r4,r2
8111d85c:	1908983a 	sll	r4,r3,r4
8111d860:	d9400117 	ldw	r5,4(sp)
8111d864:	1886d83a 	srl	r3,r3,r2
8111d868:	2148b03a 	or	r4,r4,r5
8111d86c:	99000515 	stw	r4,20(r19)
8111d870:	d8c00015 	stw	r3,0(sp)
8111d874:	003fca06 	br	8111d7a0 <__reset+0xfb0fd7a0>

8111d878 <__ratio>:
8111d878:	defff904 	addi	sp,sp,-28
8111d87c:	de00012e 	bgeu	sp,et,8111d884 <__ratio+0xc>
8111d880:	003b68fa 	trap	3
8111d884:	dc400315 	stw	r17,12(sp)
8111d888:	2823883a 	mov	r17,r5
8111d88c:	d9400104 	addi	r5,sp,4
8111d890:	dfc00615 	stw	ra,24(sp)
8111d894:	dcc00515 	stw	r19,20(sp)
8111d898:	dc800415 	stw	r18,16(sp)
8111d89c:	2027883a 	mov	r19,r4
8111d8a0:	dc000215 	stw	r16,8(sp)
8111d8a4:	111d6100 	call	8111d610 <__b2d>
8111d8a8:	d80b883a 	mov	r5,sp
8111d8ac:	8809883a 	mov	r4,r17
8111d8b0:	1025883a 	mov	r18,r2
8111d8b4:	1821883a 	mov	r16,r3
8111d8b8:	111d6100 	call	8111d610 <__b2d>
8111d8bc:	8a000417 	ldw	r8,16(r17)
8111d8c0:	99000417 	ldw	r4,16(r19)
8111d8c4:	d9400117 	ldw	r5,4(sp)
8111d8c8:	2209c83a 	sub	r4,r4,r8
8111d8cc:	2010917a 	slli	r8,r4,5
8111d8d0:	d9000017 	ldw	r4,0(sp)
8111d8d4:	2909c83a 	sub	r4,r5,r4
8111d8d8:	4109883a 	add	r4,r8,r4
8111d8dc:	01000e0e 	bge	zero,r4,8111d918 <__ratio+0xa0>
8111d8e0:	2008953a 	slli	r4,r4,20
8111d8e4:	2421883a 	add	r16,r4,r16
8111d8e8:	100d883a 	mov	r6,r2
8111d8ec:	180f883a 	mov	r7,r3
8111d8f0:	9009883a 	mov	r4,r18
8111d8f4:	800b883a 	mov	r5,r16
8111d8f8:	1125acc0 	call	81125acc <__divdf3>
8111d8fc:	dfc00617 	ldw	ra,24(sp)
8111d900:	dcc00517 	ldw	r19,20(sp)
8111d904:	dc800417 	ldw	r18,16(sp)
8111d908:	dc400317 	ldw	r17,12(sp)
8111d90c:	dc000217 	ldw	r16,8(sp)
8111d910:	dec00704 	addi	sp,sp,28
8111d914:	f800283a 	ret
8111d918:	2008953a 	slli	r4,r4,20
8111d91c:	1907c83a 	sub	r3,r3,r4
8111d920:	003ff106 	br	8111d8e8 <__reset+0xfb0fd8e8>

8111d924 <_mprec_log10>:
8111d924:	defffe04 	addi	sp,sp,-8
8111d928:	de00012e 	bgeu	sp,et,8111d930 <_mprec_log10+0xc>
8111d92c:	003b68fa 	trap	3
8111d930:	008005c4 	movi	r2,23
8111d934:	dc000015 	stw	r16,0(sp)
8111d938:	dfc00115 	stw	ra,4(sp)
8111d93c:	2021883a 	mov	r16,r4
8111d940:	11000d0e 	bge	r2,r4,8111d978 <_mprec_log10+0x54>
8111d944:	0005883a 	mov	r2,zero
8111d948:	00cffc34 	movhi	r3,16368
8111d94c:	843fffc4 	addi	r16,r16,-1
8111d950:	000d883a 	mov	r6,zero
8111d954:	01d00934 	movhi	r7,16420
8111d958:	1009883a 	mov	r4,r2
8111d95c:	180b883a 	mov	r5,r3
8111d960:	1110f940 	call	81110f94 <__muldf3>
8111d964:	803ff91e 	bne	r16,zero,8111d94c <__reset+0xfb0fd94c>
8111d968:	dfc00117 	ldw	ra,4(sp)
8111d96c:	dc000017 	ldw	r16,0(sp)
8111d970:	dec00204 	addi	sp,sp,8
8111d974:	f800283a 	ret
8111d978:	202090fa 	slli	r16,r4,3
8111d97c:	00a04534 	movhi	r2,33044
8111d980:	10ba0a04 	addi	r2,r2,-6104
8111d984:	1421883a 	add	r16,r2,r16
8111d988:	80800017 	ldw	r2,0(r16)
8111d98c:	80c00117 	ldw	r3,4(r16)
8111d990:	dfc00117 	ldw	ra,4(sp)
8111d994:	dc000017 	ldw	r16,0(sp)
8111d998:	dec00204 	addi	sp,sp,8
8111d99c:	f800283a 	ret

8111d9a0 <__copybits>:
8111d9a0:	297fffc4 	addi	r5,r5,-1
8111d9a4:	280fd17a 	srai	r7,r5,5
8111d9a8:	30c00417 	ldw	r3,16(r6)
8111d9ac:	30800504 	addi	r2,r6,20
8111d9b0:	39c00044 	addi	r7,r7,1
8111d9b4:	18c7883a 	add	r3,r3,r3
8111d9b8:	39cf883a 	add	r7,r7,r7
8111d9bc:	18c7883a 	add	r3,r3,r3
8111d9c0:	39cf883a 	add	r7,r7,r7
8111d9c4:	10c7883a 	add	r3,r2,r3
8111d9c8:	21cf883a 	add	r7,r4,r7
8111d9cc:	10c00d2e 	bgeu	r2,r3,8111da04 <__copybits+0x64>
8111d9d0:	200b883a 	mov	r5,r4
8111d9d4:	12000017 	ldw	r8,0(r2)
8111d9d8:	29400104 	addi	r5,r5,4
8111d9dc:	10800104 	addi	r2,r2,4
8111d9e0:	2a3fff15 	stw	r8,-4(r5)
8111d9e4:	10fffb36 	bltu	r2,r3,8111d9d4 <__reset+0xfb0fd9d4>
8111d9e8:	1985c83a 	sub	r2,r3,r6
8111d9ec:	10bffac4 	addi	r2,r2,-21
8111d9f0:	1004d0ba 	srli	r2,r2,2
8111d9f4:	10800044 	addi	r2,r2,1
8111d9f8:	1085883a 	add	r2,r2,r2
8111d9fc:	1085883a 	add	r2,r2,r2
8111da00:	2089883a 	add	r4,r4,r2
8111da04:	21c0032e 	bgeu	r4,r7,8111da14 <__copybits+0x74>
8111da08:	20000015 	stw	zero,0(r4)
8111da0c:	21000104 	addi	r4,r4,4
8111da10:	21fffd36 	bltu	r4,r7,8111da08 <__reset+0xfb0fda08>
8111da14:	f800283a 	ret

8111da18 <__any_on>:
8111da18:	20c00417 	ldw	r3,16(r4)
8111da1c:	2805d17a 	srai	r2,r5,5
8111da20:	21000504 	addi	r4,r4,20
8111da24:	18800d0e 	bge	r3,r2,8111da5c <__any_on+0x44>
8111da28:	18c7883a 	add	r3,r3,r3
8111da2c:	18c7883a 	add	r3,r3,r3
8111da30:	20c7883a 	add	r3,r4,r3
8111da34:	20c0192e 	bgeu	r4,r3,8111da9c <__any_on+0x84>
8111da38:	18bfff17 	ldw	r2,-4(r3)
8111da3c:	18ffff04 	addi	r3,r3,-4
8111da40:	1000041e 	bne	r2,zero,8111da54 <__any_on+0x3c>
8111da44:	20c0142e 	bgeu	r4,r3,8111da98 <__any_on+0x80>
8111da48:	18ffff04 	addi	r3,r3,-4
8111da4c:	19400017 	ldw	r5,0(r3)
8111da50:	283ffc26 	beq	r5,zero,8111da44 <__reset+0xfb0fda44>
8111da54:	00800044 	movi	r2,1
8111da58:	f800283a 	ret
8111da5c:	10c00a0e 	bge	r2,r3,8111da88 <__any_on+0x70>
8111da60:	1085883a 	add	r2,r2,r2
8111da64:	1085883a 	add	r2,r2,r2
8111da68:	294007cc 	andi	r5,r5,31
8111da6c:	2087883a 	add	r3,r4,r2
8111da70:	283ff026 	beq	r5,zero,8111da34 <__reset+0xfb0fda34>
8111da74:	19800017 	ldw	r6,0(r3)
8111da78:	3144d83a 	srl	r2,r6,r5
8111da7c:	114a983a 	sll	r5,r2,r5
8111da80:	317ff41e 	bne	r6,r5,8111da54 <__reset+0xfb0fda54>
8111da84:	003feb06 	br	8111da34 <__reset+0xfb0fda34>
8111da88:	1085883a 	add	r2,r2,r2
8111da8c:	1085883a 	add	r2,r2,r2
8111da90:	2087883a 	add	r3,r4,r2
8111da94:	003fe706 	br	8111da34 <__reset+0xfb0fda34>
8111da98:	f800283a 	ret
8111da9c:	0005883a 	mov	r2,zero
8111daa0:	f800283a 	ret

8111daa4 <_read_r>:
8111daa4:	defffd04 	addi	sp,sp,-12
8111daa8:	de00012e 	bgeu	sp,et,8111dab0 <_read_r+0xc>
8111daac:	003b68fa 	trap	3
8111dab0:	2805883a 	mov	r2,r5
8111dab4:	dc000015 	stw	r16,0(sp)
8111dab8:	04204534 	movhi	r16,33044
8111dabc:	dc400115 	stw	r17,4(sp)
8111dac0:	300b883a 	mov	r5,r6
8111dac4:	84032504 	addi	r16,r16,3220
8111dac8:	2023883a 	mov	r17,r4
8111dacc:	380d883a 	mov	r6,r7
8111dad0:	1009883a 	mov	r4,r2
8111dad4:	dfc00215 	stw	ra,8(sp)
8111dad8:	80000015 	stw	zero,0(r16)
8111dadc:	1127bdc0 	call	81127bdc <read>
8111dae0:	00ffffc4 	movi	r3,-1
8111dae4:	10c00526 	beq	r2,r3,8111dafc <_read_r+0x58>
8111dae8:	dfc00217 	ldw	ra,8(sp)
8111daec:	dc400117 	ldw	r17,4(sp)
8111daf0:	dc000017 	ldw	r16,0(sp)
8111daf4:	dec00304 	addi	sp,sp,12
8111daf8:	f800283a 	ret
8111dafc:	80c00017 	ldw	r3,0(r16)
8111db00:	183ff926 	beq	r3,zero,8111dae8 <__reset+0xfb0fdae8>
8111db04:	88c00015 	stw	r3,0(r17)
8111db08:	003ff706 	br	8111dae8 <__reset+0xfb0fdae8>

8111db0c <_realloc_r>:
8111db0c:	defff604 	addi	sp,sp,-40
8111db10:	de00012e 	bgeu	sp,et,8111db18 <_realloc_r+0xc>
8111db14:	003b68fa 	trap	3
8111db18:	dc800215 	stw	r18,8(sp)
8111db1c:	dfc00915 	stw	ra,36(sp)
8111db20:	df000815 	stw	fp,32(sp)
8111db24:	ddc00715 	stw	r23,28(sp)
8111db28:	dd800615 	stw	r22,24(sp)
8111db2c:	dd400515 	stw	r21,20(sp)
8111db30:	dd000415 	stw	r20,16(sp)
8111db34:	dcc00315 	stw	r19,12(sp)
8111db38:	dc400115 	stw	r17,4(sp)
8111db3c:	dc000015 	stw	r16,0(sp)
8111db40:	3025883a 	mov	r18,r6
8111db44:	2800b726 	beq	r5,zero,8111de24 <_realloc_r+0x318>
8111db48:	282b883a 	mov	r21,r5
8111db4c:	2029883a 	mov	r20,r4
8111db50:	11283b00 	call	811283b0 <__malloc_lock>
8111db54:	a8bfff17 	ldw	r2,-4(r21)
8111db58:	043fff04 	movi	r16,-4
8111db5c:	90c002c4 	addi	r3,r18,11
8111db60:	01000584 	movi	r4,22
8111db64:	acfffe04 	addi	r19,r21,-8
8111db68:	1420703a 	and	r16,r2,r16
8111db6c:	20c0332e 	bgeu	r4,r3,8111dc3c <_realloc_r+0x130>
8111db70:	047ffe04 	movi	r17,-8
8111db74:	1c62703a 	and	r17,r3,r17
8111db78:	8807883a 	mov	r3,r17
8111db7c:	88005816 	blt	r17,zero,8111dce0 <_realloc_r+0x1d4>
8111db80:	8c805736 	bltu	r17,r18,8111dce0 <_realloc_r+0x1d4>
8111db84:	80c0300e 	bge	r16,r3,8111dc48 <_realloc_r+0x13c>
8111db88:	07204534 	movhi	fp,33044
8111db8c:	e73cb004 	addi	fp,fp,-3392
8111db90:	e1c00217 	ldw	r7,8(fp)
8111db94:	9c09883a 	add	r4,r19,r16
8111db98:	22000117 	ldw	r8,4(r4)
8111db9c:	21c06326 	beq	r4,r7,8111dd2c <_realloc_r+0x220>
8111dba0:	017fff84 	movi	r5,-2
8111dba4:	414a703a 	and	r5,r8,r5
8111dba8:	214b883a 	add	r5,r4,r5
8111dbac:	29800117 	ldw	r6,4(r5)
8111dbb0:	3180004c 	andi	r6,r6,1
8111dbb4:	30003f26 	beq	r6,zero,8111dcb4 <_realloc_r+0x1a8>
8111dbb8:	1080004c 	andi	r2,r2,1
8111dbbc:	10008326 	beq	r2,zero,8111ddcc <_realloc_r+0x2c0>
8111dbc0:	900b883a 	mov	r5,r18
8111dbc4:	a009883a 	mov	r4,r20
8111dbc8:	11123200 	call	81112320 <_malloc_r>
8111dbcc:	1025883a 	mov	r18,r2
8111dbd0:	10011e26 	beq	r2,zero,8111e04c <_realloc_r+0x540>
8111dbd4:	a93fff17 	ldw	r4,-4(r21)
8111dbd8:	10fffe04 	addi	r3,r2,-8
8111dbdc:	00bfff84 	movi	r2,-2
8111dbe0:	2084703a 	and	r2,r4,r2
8111dbe4:	9885883a 	add	r2,r19,r2
8111dbe8:	1880ee26 	beq	r3,r2,8111dfa4 <_realloc_r+0x498>
8111dbec:	81bfff04 	addi	r6,r16,-4
8111dbf0:	00800904 	movi	r2,36
8111dbf4:	1180b836 	bltu	r2,r6,8111ded8 <_realloc_r+0x3cc>
8111dbf8:	00c004c4 	movi	r3,19
8111dbfc:	19809636 	bltu	r3,r6,8111de58 <_realloc_r+0x34c>
8111dc00:	9005883a 	mov	r2,r18
8111dc04:	a807883a 	mov	r3,r21
8111dc08:	19000017 	ldw	r4,0(r3)
8111dc0c:	11000015 	stw	r4,0(r2)
8111dc10:	19000117 	ldw	r4,4(r3)
8111dc14:	11000115 	stw	r4,4(r2)
8111dc18:	18c00217 	ldw	r3,8(r3)
8111dc1c:	10c00215 	stw	r3,8(r2)
8111dc20:	a80b883a 	mov	r5,r21
8111dc24:	a009883a 	mov	r4,r20
8111dc28:	111ba780 	call	8111ba78 <_free_r>
8111dc2c:	a009883a 	mov	r4,r20
8111dc30:	11284d80 	call	811284d8 <__malloc_unlock>
8111dc34:	9005883a 	mov	r2,r18
8111dc38:	00001206 	br	8111dc84 <_realloc_r+0x178>
8111dc3c:	00c00404 	movi	r3,16
8111dc40:	1823883a 	mov	r17,r3
8111dc44:	003fce06 	br	8111db80 <__reset+0xfb0fdb80>
8111dc48:	a825883a 	mov	r18,r21
8111dc4c:	8445c83a 	sub	r2,r16,r17
8111dc50:	00c003c4 	movi	r3,15
8111dc54:	18802636 	bltu	r3,r2,8111dcf0 <_realloc_r+0x1e4>
8111dc58:	99800117 	ldw	r6,4(r19)
8111dc5c:	9c07883a 	add	r3,r19,r16
8111dc60:	3180004c 	andi	r6,r6,1
8111dc64:	3420b03a 	or	r16,r6,r16
8111dc68:	9c000115 	stw	r16,4(r19)
8111dc6c:	18800117 	ldw	r2,4(r3)
8111dc70:	10800054 	ori	r2,r2,1
8111dc74:	18800115 	stw	r2,4(r3)
8111dc78:	a009883a 	mov	r4,r20
8111dc7c:	11284d80 	call	811284d8 <__malloc_unlock>
8111dc80:	9005883a 	mov	r2,r18
8111dc84:	dfc00917 	ldw	ra,36(sp)
8111dc88:	df000817 	ldw	fp,32(sp)
8111dc8c:	ddc00717 	ldw	r23,28(sp)
8111dc90:	dd800617 	ldw	r22,24(sp)
8111dc94:	dd400517 	ldw	r21,20(sp)
8111dc98:	dd000417 	ldw	r20,16(sp)
8111dc9c:	dcc00317 	ldw	r19,12(sp)
8111dca0:	dc800217 	ldw	r18,8(sp)
8111dca4:	dc400117 	ldw	r17,4(sp)
8111dca8:	dc000017 	ldw	r16,0(sp)
8111dcac:	dec00a04 	addi	sp,sp,40
8111dcb0:	f800283a 	ret
8111dcb4:	017fff04 	movi	r5,-4
8111dcb8:	414a703a 	and	r5,r8,r5
8111dcbc:	814d883a 	add	r6,r16,r5
8111dcc0:	30c01f16 	blt	r6,r3,8111dd40 <_realloc_r+0x234>
8111dcc4:	20800317 	ldw	r2,12(r4)
8111dcc8:	20c00217 	ldw	r3,8(r4)
8111dccc:	a825883a 	mov	r18,r21
8111dcd0:	3021883a 	mov	r16,r6
8111dcd4:	18800315 	stw	r2,12(r3)
8111dcd8:	10c00215 	stw	r3,8(r2)
8111dcdc:	003fdb06 	br	8111dc4c <__reset+0xfb0fdc4c>
8111dce0:	00800304 	movi	r2,12
8111dce4:	a0800015 	stw	r2,0(r20)
8111dce8:	0005883a 	mov	r2,zero
8111dcec:	003fe506 	br	8111dc84 <__reset+0xfb0fdc84>
8111dcf0:	98c00117 	ldw	r3,4(r19)
8111dcf4:	9c4b883a 	add	r5,r19,r17
8111dcf8:	11000054 	ori	r4,r2,1
8111dcfc:	18c0004c 	andi	r3,r3,1
8111dd00:	1c62b03a 	or	r17,r3,r17
8111dd04:	9c400115 	stw	r17,4(r19)
8111dd08:	29000115 	stw	r4,4(r5)
8111dd0c:	2885883a 	add	r2,r5,r2
8111dd10:	10c00117 	ldw	r3,4(r2)
8111dd14:	29400204 	addi	r5,r5,8
8111dd18:	a009883a 	mov	r4,r20
8111dd1c:	18c00054 	ori	r3,r3,1
8111dd20:	10c00115 	stw	r3,4(r2)
8111dd24:	111ba780 	call	8111ba78 <_free_r>
8111dd28:	003fd306 	br	8111dc78 <__reset+0xfb0fdc78>
8111dd2c:	017fff04 	movi	r5,-4
8111dd30:	414a703a 	and	r5,r8,r5
8111dd34:	89800404 	addi	r6,r17,16
8111dd38:	8151883a 	add	r8,r16,r5
8111dd3c:	4180590e 	bge	r8,r6,8111dea4 <_realloc_r+0x398>
8111dd40:	1080004c 	andi	r2,r2,1
8111dd44:	103f9e1e 	bne	r2,zero,8111dbc0 <__reset+0xfb0fdbc0>
8111dd48:	adbffe17 	ldw	r22,-8(r21)
8111dd4c:	00bfff04 	movi	r2,-4
8111dd50:	9dadc83a 	sub	r22,r19,r22
8111dd54:	b1800117 	ldw	r6,4(r22)
8111dd58:	3084703a 	and	r2,r6,r2
8111dd5c:	20002026 	beq	r4,zero,8111dde0 <_realloc_r+0x2d4>
8111dd60:	80af883a 	add	r23,r16,r2
8111dd64:	b96f883a 	add	r23,r23,r5
8111dd68:	21c05f26 	beq	r4,r7,8111dee8 <_realloc_r+0x3dc>
8111dd6c:	b8c01c16 	blt	r23,r3,8111dde0 <_realloc_r+0x2d4>
8111dd70:	20800317 	ldw	r2,12(r4)
8111dd74:	20c00217 	ldw	r3,8(r4)
8111dd78:	81bfff04 	addi	r6,r16,-4
8111dd7c:	01000904 	movi	r4,36
8111dd80:	18800315 	stw	r2,12(r3)
8111dd84:	10c00215 	stw	r3,8(r2)
8111dd88:	b0c00217 	ldw	r3,8(r22)
8111dd8c:	b0800317 	ldw	r2,12(r22)
8111dd90:	b4800204 	addi	r18,r22,8
8111dd94:	18800315 	stw	r2,12(r3)
8111dd98:	10c00215 	stw	r3,8(r2)
8111dd9c:	21801b36 	bltu	r4,r6,8111de0c <_realloc_r+0x300>
8111dda0:	008004c4 	movi	r2,19
8111dda4:	1180352e 	bgeu	r2,r6,8111de7c <_realloc_r+0x370>
8111dda8:	a8800017 	ldw	r2,0(r21)
8111ddac:	b0800215 	stw	r2,8(r22)
8111ddb0:	a8800117 	ldw	r2,4(r21)
8111ddb4:	b0800315 	stw	r2,12(r22)
8111ddb8:	008006c4 	movi	r2,27
8111ddbc:	11807f36 	bltu	r2,r6,8111dfbc <_realloc_r+0x4b0>
8111ddc0:	b0800404 	addi	r2,r22,16
8111ddc4:	ad400204 	addi	r21,r21,8
8111ddc8:	00002d06 	br	8111de80 <_realloc_r+0x374>
8111ddcc:	adbffe17 	ldw	r22,-8(r21)
8111ddd0:	00bfff04 	movi	r2,-4
8111ddd4:	9dadc83a 	sub	r22,r19,r22
8111ddd8:	b1000117 	ldw	r4,4(r22)
8111dddc:	2084703a 	and	r2,r4,r2
8111dde0:	b03f7726 	beq	r22,zero,8111dbc0 <__reset+0xfb0fdbc0>
8111dde4:	80af883a 	add	r23,r16,r2
8111dde8:	b8ff7516 	blt	r23,r3,8111dbc0 <__reset+0xfb0fdbc0>
8111ddec:	b0800317 	ldw	r2,12(r22)
8111ddf0:	b0c00217 	ldw	r3,8(r22)
8111ddf4:	81bfff04 	addi	r6,r16,-4
8111ddf8:	01000904 	movi	r4,36
8111ddfc:	18800315 	stw	r2,12(r3)
8111de00:	10c00215 	stw	r3,8(r2)
8111de04:	b4800204 	addi	r18,r22,8
8111de08:	21bfe52e 	bgeu	r4,r6,8111dda0 <__reset+0xfb0fdda0>
8111de0c:	a80b883a 	mov	r5,r21
8111de10:	9009883a 	mov	r4,r18
8111de14:	111c8ec0 	call	8111c8ec <memmove>
8111de18:	b821883a 	mov	r16,r23
8111de1c:	b027883a 	mov	r19,r22
8111de20:	003f8a06 	br	8111dc4c <__reset+0xfb0fdc4c>
8111de24:	300b883a 	mov	r5,r6
8111de28:	dfc00917 	ldw	ra,36(sp)
8111de2c:	df000817 	ldw	fp,32(sp)
8111de30:	ddc00717 	ldw	r23,28(sp)
8111de34:	dd800617 	ldw	r22,24(sp)
8111de38:	dd400517 	ldw	r21,20(sp)
8111de3c:	dd000417 	ldw	r20,16(sp)
8111de40:	dcc00317 	ldw	r19,12(sp)
8111de44:	dc800217 	ldw	r18,8(sp)
8111de48:	dc400117 	ldw	r17,4(sp)
8111de4c:	dc000017 	ldw	r16,0(sp)
8111de50:	dec00a04 	addi	sp,sp,40
8111de54:	11123201 	jmpi	81112320 <_malloc_r>
8111de58:	a8c00017 	ldw	r3,0(r21)
8111de5c:	90c00015 	stw	r3,0(r18)
8111de60:	a8c00117 	ldw	r3,4(r21)
8111de64:	90c00115 	stw	r3,4(r18)
8111de68:	00c006c4 	movi	r3,27
8111de6c:	19804536 	bltu	r3,r6,8111df84 <_realloc_r+0x478>
8111de70:	90800204 	addi	r2,r18,8
8111de74:	a8c00204 	addi	r3,r21,8
8111de78:	003f6306 	br	8111dc08 <__reset+0xfb0fdc08>
8111de7c:	9005883a 	mov	r2,r18
8111de80:	a8c00017 	ldw	r3,0(r21)
8111de84:	b821883a 	mov	r16,r23
8111de88:	b027883a 	mov	r19,r22
8111de8c:	10c00015 	stw	r3,0(r2)
8111de90:	a8c00117 	ldw	r3,4(r21)
8111de94:	10c00115 	stw	r3,4(r2)
8111de98:	a8c00217 	ldw	r3,8(r21)
8111de9c:	10c00215 	stw	r3,8(r2)
8111dea0:	003f6a06 	br	8111dc4c <__reset+0xfb0fdc4c>
8111dea4:	9c67883a 	add	r19,r19,r17
8111dea8:	4445c83a 	sub	r2,r8,r17
8111deac:	e4c00215 	stw	r19,8(fp)
8111deb0:	10800054 	ori	r2,r2,1
8111deb4:	98800115 	stw	r2,4(r19)
8111deb8:	a8bfff17 	ldw	r2,-4(r21)
8111debc:	a009883a 	mov	r4,r20
8111dec0:	1080004c 	andi	r2,r2,1
8111dec4:	1462b03a 	or	r17,r2,r17
8111dec8:	ac7fff15 	stw	r17,-4(r21)
8111decc:	11284d80 	call	811284d8 <__malloc_unlock>
8111ded0:	a805883a 	mov	r2,r21
8111ded4:	003f6b06 	br	8111dc84 <__reset+0xfb0fdc84>
8111ded8:	a80b883a 	mov	r5,r21
8111dedc:	9009883a 	mov	r4,r18
8111dee0:	111c8ec0 	call	8111c8ec <memmove>
8111dee4:	003f4e06 	br	8111dc20 <__reset+0xfb0fdc20>
8111dee8:	89000404 	addi	r4,r17,16
8111deec:	b93fbc16 	blt	r23,r4,8111dde0 <__reset+0xfb0fdde0>
8111def0:	b0800317 	ldw	r2,12(r22)
8111def4:	b0c00217 	ldw	r3,8(r22)
8111def8:	81bfff04 	addi	r6,r16,-4
8111defc:	01000904 	movi	r4,36
8111df00:	18800315 	stw	r2,12(r3)
8111df04:	10c00215 	stw	r3,8(r2)
8111df08:	b4800204 	addi	r18,r22,8
8111df0c:	21804336 	bltu	r4,r6,8111e01c <_realloc_r+0x510>
8111df10:	008004c4 	movi	r2,19
8111df14:	11803f2e 	bgeu	r2,r6,8111e014 <_realloc_r+0x508>
8111df18:	a8800017 	ldw	r2,0(r21)
8111df1c:	b0800215 	stw	r2,8(r22)
8111df20:	a8800117 	ldw	r2,4(r21)
8111df24:	b0800315 	stw	r2,12(r22)
8111df28:	008006c4 	movi	r2,27
8111df2c:	11803f36 	bltu	r2,r6,8111e02c <_realloc_r+0x520>
8111df30:	b0800404 	addi	r2,r22,16
8111df34:	ad400204 	addi	r21,r21,8
8111df38:	a8c00017 	ldw	r3,0(r21)
8111df3c:	10c00015 	stw	r3,0(r2)
8111df40:	a8c00117 	ldw	r3,4(r21)
8111df44:	10c00115 	stw	r3,4(r2)
8111df48:	a8c00217 	ldw	r3,8(r21)
8111df4c:	10c00215 	stw	r3,8(r2)
8111df50:	b447883a 	add	r3,r22,r17
8111df54:	bc45c83a 	sub	r2,r23,r17
8111df58:	e0c00215 	stw	r3,8(fp)
8111df5c:	10800054 	ori	r2,r2,1
8111df60:	18800115 	stw	r2,4(r3)
8111df64:	b0800117 	ldw	r2,4(r22)
8111df68:	a009883a 	mov	r4,r20
8111df6c:	1080004c 	andi	r2,r2,1
8111df70:	1462b03a 	or	r17,r2,r17
8111df74:	b4400115 	stw	r17,4(r22)
8111df78:	11284d80 	call	811284d8 <__malloc_unlock>
8111df7c:	9005883a 	mov	r2,r18
8111df80:	003f4006 	br	8111dc84 <__reset+0xfb0fdc84>
8111df84:	a8c00217 	ldw	r3,8(r21)
8111df88:	90c00215 	stw	r3,8(r18)
8111df8c:	a8c00317 	ldw	r3,12(r21)
8111df90:	90c00315 	stw	r3,12(r18)
8111df94:	30801126 	beq	r6,r2,8111dfdc <_realloc_r+0x4d0>
8111df98:	90800404 	addi	r2,r18,16
8111df9c:	a8c00404 	addi	r3,r21,16
8111dfa0:	003f1906 	br	8111dc08 <__reset+0xfb0fdc08>
8111dfa4:	90ffff17 	ldw	r3,-4(r18)
8111dfa8:	00bfff04 	movi	r2,-4
8111dfac:	a825883a 	mov	r18,r21
8111dfb0:	1884703a 	and	r2,r3,r2
8111dfb4:	80a1883a 	add	r16,r16,r2
8111dfb8:	003f2406 	br	8111dc4c <__reset+0xfb0fdc4c>
8111dfbc:	a8800217 	ldw	r2,8(r21)
8111dfc0:	b0800415 	stw	r2,16(r22)
8111dfc4:	a8800317 	ldw	r2,12(r21)
8111dfc8:	b0800515 	stw	r2,20(r22)
8111dfcc:	31000a26 	beq	r6,r4,8111dff8 <_realloc_r+0x4ec>
8111dfd0:	b0800604 	addi	r2,r22,24
8111dfd4:	ad400404 	addi	r21,r21,16
8111dfd8:	003fa906 	br	8111de80 <__reset+0xfb0fde80>
8111dfdc:	a9000417 	ldw	r4,16(r21)
8111dfe0:	90800604 	addi	r2,r18,24
8111dfe4:	a8c00604 	addi	r3,r21,24
8111dfe8:	91000415 	stw	r4,16(r18)
8111dfec:	a9000517 	ldw	r4,20(r21)
8111dff0:	91000515 	stw	r4,20(r18)
8111dff4:	003f0406 	br	8111dc08 <__reset+0xfb0fdc08>
8111dff8:	a8c00417 	ldw	r3,16(r21)
8111dffc:	ad400604 	addi	r21,r21,24
8111e000:	b0800804 	addi	r2,r22,32
8111e004:	b0c00615 	stw	r3,24(r22)
8111e008:	a8ffff17 	ldw	r3,-4(r21)
8111e00c:	b0c00715 	stw	r3,28(r22)
8111e010:	003f9b06 	br	8111de80 <__reset+0xfb0fde80>
8111e014:	9005883a 	mov	r2,r18
8111e018:	003fc706 	br	8111df38 <__reset+0xfb0fdf38>
8111e01c:	a80b883a 	mov	r5,r21
8111e020:	9009883a 	mov	r4,r18
8111e024:	111c8ec0 	call	8111c8ec <memmove>
8111e028:	003fc906 	br	8111df50 <__reset+0xfb0fdf50>
8111e02c:	a8800217 	ldw	r2,8(r21)
8111e030:	b0800415 	stw	r2,16(r22)
8111e034:	a8800317 	ldw	r2,12(r21)
8111e038:	b0800515 	stw	r2,20(r22)
8111e03c:	31000726 	beq	r6,r4,8111e05c <_realloc_r+0x550>
8111e040:	b0800604 	addi	r2,r22,24
8111e044:	ad400404 	addi	r21,r21,16
8111e048:	003fbb06 	br	8111df38 <__reset+0xfb0fdf38>
8111e04c:	a009883a 	mov	r4,r20
8111e050:	11284d80 	call	811284d8 <__malloc_unlock>
8111e054:	0005883a 	mov	r2,zero
8111e058:	003f0a06 	br	8111dc84 <__reset+0xfb0fdc84>
8111e05c:	a8c00417 	ldw	r3,16(r21)
8111e060:	ad400604 	addi	r21,r21,24
8111e064:	b0800804 	addi	r2,r22,32
8111e068:	b0c00615 	stw	r3,24(r22)
8111e06c:	a8ffff17 	ldw	r3,-4(r21)
8111e070:	b0c00715 	stw	r3,28(r22)
8111e074:	003fb006 	br	8111df38 <__reset+0xfb0fdf38>

8111e078 <__fpclassifyd>:
8111e078:	00a00034 	movhi	r2,32768
8111e07c:	10bfffc4 	addi	r2,r2,-1
8111e080:	2884703a 	and	r2,r5,r2
8111e084:	10000726 	beq	r2,zero,8111e0a4 <__fpclassifyd+0x2c>
8111e088:	00fffc34 	movhi	r3,65520
8111e08c:	019ff834 	movhi	r6,32736
8111e090:	28c7883a 	add	r3,r5,r3
8111e094:	31bfffc4 	addi	r6,r6,-1
8111e098:	30c00536 	bltu	r6,r3,8111e0b0 <__fpclassifyd+0x38>
8111e09c:	00800104 	movi	r2,4
8111e0a0:	f800283a 	ret
8111e0a4:	2000021e 	bne	r4,zero,8111e0b0 <__fpclassifyd+0x38>
8111e0a8:	00800084 	movi	r2,2
8111e0ac:	f800283a 	ret
8111e0b0:	00dffc34 	movhi	r3,32752
8111e0b4:	019ff834 	movhi	r6,32736
8111e0b8:	28cb883a 	add	r5,r5,r3
8111e0bc:	31bfffc4 	addi	r6,r6,-1
8111e0c0:	317ff62e 	bgeu	r6,r5,8111e09c <__reset+0xfb0fe09c>
8111e0c4:	01400434 	movhi	r5,16
8111e0c8:	297fffc4 	addi	r5,r5,-1
8111e0cc:	28800236 	bltu	r5,r2,8111e0d8 <__fpclassifyd+0x60>
8111e0d0:	008000c4 	movi	r2,3
8111e0d4:	f800283a 	ret
8111e0d8:	10c00226 	beq	r2,r3,8111e0e4 <__fpclassifyd+0x6c>
8111e0dc:	0005883a 	mov	r2,zero
8111e0e0:	f800283a 	ret
8111e0e4:	2005003a 	cmpeq	r2,r4,zero
8111e0e8:	f800283a 	ret

8111e0ec <__sccl>:
8111e0ec:	2a000003 	ldbu	r8,0(r5)
8111e0f0:	00801784 	movi	r2,94
8111e0f4:	40802a26 	beq	r8,r2,8111e1a0 <__sccl+0xb4>
8111e0f8:	29400044 	addi	r5,r5,1
8111e0fc:	000f883a 	mov	r7,zero
8111e100:	0013883a 	mov	r9,zero
8111e104:	2007883a 	mov	r3,r4
8111e108:	21804004 	addi	r6,r4,256
8111e10c:	19c00005 	stb	r7,0(r3)
8111e110:	18c00044 	addi	r3,r3,1
8111e114:	19bffd1e 	bne	r3,r6,8111e10c <__reset+0xfb0fe10c>
8111e118:	40001126 	beq	r8,zero,8111e160 <__sccl+0x74>
8111e11c:	00800044 	movi	r2,1
8111e120:	124fc83a 	sub	r7,r2,r9
8111e124:	02800b44 	movi	r10,45
8111e128:	02c01744 	movi	r11,93
8111e12c:	2205883a 	add	r2,r4,r8
8111e130:	11c00005 	stb	r7,0(r2)
8111e134:	28800044 	addi	r2,r5,1
8111e138:	28c00003 	ldbu	r3,0(r5)
8111e13c:	1a800a26 	beq	r3,r10,8111e168 <__sccl+0x7c>
8111e140:	1ac00426 	beq	r3,r11,8111e154 <__sccl+0x68>
8111e144:	18000426 	beq	r3,zero,8111e158 <__sccl+0x6c>
8111e148:	1811883a 	mov	r8,r3
8111e14c:	100b883a 	mov	r5,r2
8111e150:	003ff606 	br	8111e12c <__reset+0xfb0fe12c>
8111e154:	f800283a 	ret
8111e158:	2805883a 	mov	r2,r5
8111e15c:	f800283a 	ret
8111e160:	28bfffc4 	addi	r2,r5,-1
8111e164:	f800283a 	ret
8111e168:	12400003 	ldbu	r9,0(r2)
8111e16c:	4ac01126 	beq	r9,r11,8111e1b4 <__sccl+0xc8>
8111e170:	4a001016 	blt	r9,r8,8111e1b4 <__sccl+0xc8>
8111e174:	41800044 	addi	r6,r8,1
8111e178:	29400084 	addi	r5,r5,2
8111e17c:	2187883a 	add	r3,r4,r6
8111e180:	00000106 	br	8111e188 <__sccl+0x9c>
8111e184:	31800044 	addi	r6,r6,1
8111e188:	19c00005 	stb	r7,0(r3)
8111e18c:	3011883a 	mov	r8,r6
8111e190:	18c00044 	addi	r3,r3,1
8111e194:	327ffb16 	blt	r6,r9,8111e184 <__reset+0xfb0fe184>
8111e198:	10800084 	addi	r2,r2,2
8111e19c:	003fe606 	br	8111e138 <__reset+0xfb0fe138>
8111e1a0:	2a000043 	ldbu	r8,1(r5)
8111e1a4:	01c00044 	movi	r7,1
8111e1a8:	29400084 	addi	r5,r5,2
8111e1ac:	02400044 	movi	r9,1
8111e1b0:	003fd406 	br	8111e104 <__reset+0xfb0fe104>
8111e1b4:	5011883a 	mov	r8,r10
8111e1b8:	003fe406 	br	8111e14c <__reset+0xfb0fe14c>

8111e1bc <nanf>:
8111e1bc:	009ff034 	movhi	r2,32704
8111e1c0:	f800283a 	ret

8111e1c4 <strcmp>:
8111e1c4:	2144b03a 	or	r2,r4,r5
8111e1c8:	108000cc 	andi	r2,r2,3
8111e1cc:	1000171e 	bne	r2,zero,8111e22c <strcmp+0x68>
8111e1d0:	20800017 	ldw	r2,0(r4)
8111e1d4:	28c00017 	ldw	r3,0(r5)
8111e1d8:	10c0141e 	bne	r2,r3,8111e22c <strcmp+0x68>
8111e1dc:	027fbff4 	movhi	r9,65279
8111e1e0:	4a7fbfc4 	addi	r9,r9,-257
8111e1e4:	0086303a 	nor	r3,zero,r2
8111e1e8:	02202074 	movhi	r8,32897
8111e1ec:	1245883a 	add	r2,r2,r9
8111e1f0:	42202004 	addi	r8,r8,-32640
8111e1f4:	10c4703a 	and	r2,r2,r3
8111e1f8:	1204703a 	and	r2,r2,r8
8111e1fc:	10000226 	beq	r2,zero,8111e208 <strcmp+0x44>
8111e200:	00002306 	br	8111e290 <strcmp+0xcc>
8111e204:	1000221e 	bne	r2,zero,8111e290 <strcmp+0xcc>
8111e208:	21000104 	addi	r4,r4,4
8111e20c:	20c00017 	ldw	r3,0(r4)
8111e210:	29400104 	addi	r5,r5,4
8111e214:	29800017 	ldw	r6,0(r5)
8111e218:	1a4f883a 	add	r7,r3,r9
8111e21c:	00c4303a 	nor	r2,zero,r3
8111e220:	3884703a 	and	r2,r7,r2
8111e224:	1204703a 	and	r2,r2,r8
8111e228:	19bff626 	beq	r3,r6,8111e204 <__reset+0xfb0fe204>
8111e22c:	20800003 	ldbu	r2,0(r4)
8111e230:	10c03fcc 	andi	r3,r2,255
8111e234:	18c0201c 	xori	r3,r3,128
8111e238:	18ffe004 	addi	r3,r3,-128
8111e23c:	18000c26 	beq	r3,zero,8111e270 <strcmp+0xac>
8111e240:	29800007 	ldb	r6,0(r5)
8111e244:	19800326 	beq	r3,r6,8111e254 <strcmp+0x90>
8111e248:	00001306 	br	8111e298 <strcmp+0xd4>
8111e24c:	29800007 	ldb	r6,0(r5)
8111e250:	11800b1e 	bne	r2,r6,8111e280 <strcmp+0xbc>
8111e254:	21000044 	addi	r4,r4,1
8111e258:	20c00003 	ldbu	r3,0(r4)
8111e25c:	29400044 	addi	r5,r5,1
8111e260:	18803fcc 	andi	r2,r3,255
8111e264:	1080201c 	xori	r2,r2,128
8111e268:	10bfe004 	addi	r2,r2,-128
8111e26c:	103ff71e 	bne	r2,zero,8111e24c <__reset+0xfb0fe24c>
8111e270:	0007883a 	mov	r3,zero
8111e274:	28800003 	ldbu	r2,0(r5)
8111e278:	1885c83a 	sub	r2,r3,r2
8111e27c:	f800283a 	ret
8111e280:	28800003 	ldbu	r2,0(r5)
8111e284:	18c03fcc 	andi	r3,r3,255
8111e288:	1885c83a 	sub	r2,r3,r2
8111e28c:	f800283a 	ret
8111e290:	0005883a 	mov	r2,zero
8111e294:	f800283a 	ret
8111e298:	10c03fcc 	andi	r3,r2,255
8111e29c:	003ff506 	br	8111e274 <__reset+0xfb0fe274>

8111e2a0 <sulp>:
8111e2a0:	defffd04 	addi	sp,sp,-12
8111e2a4:	de00012e 	bgeu	sp,et,8111e2ac <sulp+0xc>
8111e2a8:	003b68fa 	trap	3
8111e2ac:	dc400115 	stw	r17,4(sp)
8111e2b0:	3023883a 	mov	r17,r6
8111e2b4:	dc000015 	stw	r16,0(sp)
8111e2b8:	dfc00215 	stw	ra,8(sp)
8111e2bc:	2821883a 	mov	r16,r5
8111e2c0:	111d5ac0 	call	8111d5ac <__ulp>
8111e2c4:	88000c26 	beq	r17,zero,8111e2f8 <sulp+0x58>
8111e2c8:	841ffc2c 	andhi	r16,r16,32752
8111e2cc:	8020d53a 	srli	r16,r16,20
8111e2d0:	01c01ac4 	movi	r7,107
8111e2d4:	3c21c83a 	sub	r16,r7,r16
8111e2d8:	0400070e 	bge	zero,r16,8111e2f8 <sulp+0x58>
8111e2dc:	8020953a 	slli	r16,r16,20
8111e2e0:	01cffc34 	movhi	r7,16368
8111e2e4:	000d883a 	mov	r6,zero
8111e2e8:	81cf883a 	add	r7,r16,r7
8111e2ec:	1009883a 	mov	r4,r2
8111e2f0:	180b883a 	mov	r5,r3
8111e2f4:	1110f940 	call	81110f94 <__muldf3>
8111e2f8:	dfc00217 	ldw	ra,8(sp)
8111e2fc:	dc400117 	ldw	r17,4(sp)
8111e300:	dc000017 	ldw	r16,0(sp)
8111e304:	dec00304 	addi	sp,sp,12
8111e308:	f800283a 	ret

8111e30c <_strtod_r>:
8111e30c:	deffe204 	addi	sp,sp,-120
8111e310:	de00012e 	bgeu	sp,et,8111e318 <_strtod_r+0xc>
8111e314:	003b68fa 	trap	3
8111e318:	ddc01b15 	stw	r23,108(sp)
8111e31c:	dd001815 	stw	r20,96(sp)
8111e320:	dc801615 	stw	r18,88(sp)
8111e324:	dc401515 	stw	r17,84(sp)
8111e328:	dc001415 	stw	r16,80(sp)
8111e32c:	d9400615 	stw	r5,24(sp)
8111e330:	dfc01d15 	stw	ra,116(sp)
8111e334:	df001c15 	stw	fp,112(sp)
8111e338:	dd801a15 	stw	r22,104(sp)
8111e33c:	dd401915 	stw	r21,100(sp)
8111e340:	dcc01715 	stw	r19,92(sp)
8111e344:	2021883a 	mov	r16,r4
8111e348:	d8000515 	stw	zero,20(sp)
8111e34c:	2809883a 	mov	r4,r5
8111e350:	20800003 	ldbu	r2,0(r4)
8111e354:	01e044b4 	movhi	r7,33042
8111e358:	282f883a 	mov	r23,r5
8111e35c:	10c03fcc 	andi	r3,r2,255
8111e360:	01400b44 	movi	r5,45
8111e364:	39f8e204 	addi	r7,r7,-7288
8111e368:	3029883a 	mov	r20,r6
8111e36c:	0025883a 	mov	r18,zero
8111e370:	0023883a 	mov	r17,zero
8111e374:	28c0ba36 	bltu	r5,r3,8111e660 <_strtod_r+0x354>
8111e378:	180690ba 	slli	r3,r3,2
8111e37c:	19c7883a 	add	r3,r3,r7
8111e380:	18c00017 	ldw	r3,0(r3)
8111e384:	1800683a 	jmp	r3
8111e388:	8111e448 	cmpgei	r4,r16,18321
8111e38c:	8111e660 	cmpeqi	r4,r16,18329
8111e390:	8111e660 	cmpeqi	r4,r16,18329
8111e394:	8111e660 	cmpeqi	r4,r16,18329
8111e398:	8111e660 	cmpeqi	r4,r16,18329
8111e39c:	8111e660 	cmpeqi	r4,r16,18329
8111e3a0:	8111e660 	cmpeqi	r4,r16,18329
8111e3a4:	8111e660 	cmpeqi	r4,r16,18329
8111e3a8:	8111e660 	cmpeqi	r4,r16,18329
8111e3ac:	8111e64c 	andi	r4,r16,18329
8111e3b0:	8111e64c 	andi	r4,r16,18329
8111e3b4:	8111e64c 	andi	r4,r16,18329
8111e3b8:	8111e64c 	andi	r4,r16,18329
8111e3bc:	8111e64c 	andi	r4,r16,18329
8111e3c0:	8111e660 	cmpeqi	r4,r16,18329
8111e3c4:	8111e660 	cmpeqi	r4,r16,18329
8111e3c8:	8111e660 	cmpeqi	r4,r16,18329
8111e3cc:	8111e660 	cmpeqi	r4,r16,18329
8111e3d0:	8111e660 	cmpeqi	r4,r16,18329
8111e3d4:	8111e660 	cmpeqi	r4,r16,18329
8111e3d8:	8111e660 	cmpeqi	r4,r16,18329
8111e3dc:	8111e660 	cmpeqi	r4,r16,18329
8111e3e0:	8111e660 	cmpeqi	r4,r16,18329
8111e3e4:	8111e660 	cmpeqi	r4,r16,18329
8111e3e8:	8111e660 	cmpeqi	r4,r16,18329
8111e3ec:	8111e660 	cmpeqi	r4,r16,18329
8111e3f0:	8111e660 	cmpeqi	r4,r16,18329
8111e3f4:	8111e660 	cmpeqi	r4,r16,18329
8111e3f8:	8111e660 	cmpeqi	r4,r16,18329
8111e3fc:	8111e660 	cmpeqi	r4,r16,18329
8111e400:	8111e660 	cmpeqi	r4,r16,18329
8111e404:	8111e660 	cmpeqi	r4,r16,18329
8111e408:	8111e64c 	andi	r4,r16,18329
8111e40c:	8111e660 	cmpeqi	r4,r16,18329
8111e410:	8111e660 	cmpeqi	r4,r16,18329
8111e414:	8111e660 	cmpeqi	r4,r16,18329
8111e418:	8111e660 	cmpeqi	r4,r16,18329
8111e41c:	8111e660 	cmpeqi	r4,r16,18329
8111e420:	8111e660 	cmpeqi	r4,r16,18329
8111e424:	8111e660 	cmpeqi	r4,r16,18329
8111e428:	8111e660 	cmpeqi	r4,r16,18329
8111e42c:	8111e660 	cmpeqi	r4,r16,18329
8111e430:	8111e660 	cmpeqi	r4,r16,18329
8111e434:	8111e4a0 	cmpeqi	r4,r16,18322
8111e438:	8111e660 	cmpeqi	r4,r16,18329
8111e43c:	8111e640 	call	88111e64 <__reset+0x20f1e64>
8111e440:	00801244 	movi	r2,73
8111e444:	88843526 	beq	r17,r2,8111f51c <_strtod_r+0x1210>
8111e448:	002b883a 	mov	r21,zero
8111e44c:	002d883a 	mov	r22,zero
8111e450:	a0000526 	beq	r20,zero,8111e468 <_strtod_r+0x15c>
8111e454:	d8000715 	stw	zero,28(sp)
8111e458:	a5c00015 	stw	r23,0(r20)
8111e45c:	d9000717 	ldw	r4,28(sp)
8111e460:	20000126 	beq	r4,zero,8111e468 <_strtod_r+0x15c>
8111e464:	b5a0003c 	xorhi	r22,r22,32768
8111e468:	a805883a 	mov	r2,r21
8111e46c:	b007883a 	mov	r3,r22
8111e470:	dfc01d17 	ldw	ra,116(sp)
8111e474:	df001c17 	ldw	fp,112(sp)
8111e478:	ddc01b17 	ldw	r23,108(sp)
8111e47c:	dd801a17 	ldw	r22,104(sp)
8111e480:	dd401917 	ldw	r21,100(sp)
8111e484:	dd001817 	ldw	r20,96(sp)
8111e488:	dcc01717 	ldw	r19,92(sp)
8111e48c:	dc801617 	ldw	r18,88(sp)
8111e490:	dc401517 	ldw	r17,84(sp)
8111e494:	dc001417 	ldw	r16,80(sp)
8111e498:	dec01e04 	addi	sp,sp,120
8111e49c:	f800283a 	ret
8111e4a0:	d8000715 	stw	zero,28(sp)
8111e4a4:	24c00044 	addi	r19,r4,1
8111e4a8:	dcc00615 	stw	r19,24(sp)
8111e4ac:	20800043 	ldbu	r2,1(r4)
8111e4b0:	10c03fcc 	andi	r3,r2,255
8111e4b4:	18c0201c 	xori	r3,r3,128
8111e4b8:	18ffe004 	addi	r3,r3,-128
8111e4bc:	183fe226 	beq	r3,zero,8111e448 <__reset+0xfb0fe448>
8111e4c0:	11403fcc 	andi	r5,r2,255
8111e4c4:	2940201c 	xori	r5,r5,128
8111e4c8:	297fe004 	addi	r5,r5,-128
8111e4cc:	00c00c04 	movi	r3,48
8111e4d0:	28c0e526 	beq	r5,r3,8111e868 <_strtod_r+0x55c>
8111e4d4:	dcc00815 	stw	r19,32(sp)
8111e4d8:	0025883a 	mov	r18,zero
8111e4dc:	10fff404 	addi	r3,r2,-48
8111e4e0:	18c03fcc 	andi	r3,r3,255
8111e4e4:	01000244 	movi	r4,9
8111e4e8:	20c37536 	bltu	r4,r3,8111f2c0 <_strtod_r+0xfb4>
8111e4ec:	dd400817 	ldw	r21,32(sp)
8111e4f0:	0027883a 	mov	r19,zero
8111e4f4:	0039883a 	mov	fp,zero
8111e4f8:	002d883a 	mov	r22,zero
8111e4fc:	01400204 	movi	r5,8
8111e500:	2d805a16 	blt	r5,r22,8111e66c <_strtod_r+0x360>
8111e504:	e70002a4 	muli	fp,fp,10
8111e508:	10c03fcc 	andi	r3,r2,255
8111e50c:	18c0201c 	xori	r3,r3,128
8111e510:	18ffe004 	addi	r3,r3,-128
8111e514:	e0f9883a 	add	fp,fp,r3
8111e518:	e73ff404 	addi	fp,fp,-48
8111e51c:	ad400044 	addi	r21,r21,1
8111e520:	dd400615 	stw	r21,24(sp)
8111e524:	a8800003 	ldbu	r2,0(r21)
8111e528:	b5800044 	addi	r22,r22,1
8111e52c:	10fff404 	addi	r3,r2,-48
8111e530:	18c03fcc 	andi	r3,r3,255
8111e534:	20fff22e 	bgeu	r4,r3,8111e500 <__reset+0xfb0fe500>
8111e538:	14403fcc 	andi	r17,r2,255
8111e53c:	8c40201c 	xori	r17,r17,128
8111e540:	8c7fe004 	addi	r17,r17,-128
8111e544:	8009883a 	mov	r4,r16
8111e548:	111c52c0 	call	8111c52c <_localeconv_r>
8111e54c:	11400017 	ldw	r5,0(r2)
8111e550:	8009883a 	mov	r4,r16
8111e554:	d9401315 	stw	r5,76(sp)
8111e558:	111c52c0 	call	8111c52c <_localeconv_r>
8111e55c:	11000017 	ldw	r4,0(r2)
8111e560:	11134b00 	call	811134b0 <strlen>
8111e564:	d9401317 	ldw	r5,76(sp)
8111e568:	100d883a 	mov	r6,r2
8111e56c:	a809883a 	mov	r4,r21
8111e570:	1123efc0 	call	81123efc <strncmp>
8111e574:	1000ce26 	beq	r2,zero,8111e8b0 <_strtod_r+0x5a4>
8111e578:	b013883a 	mov	r9,r22
8111e57c:	000b883a 	mov	r5,zero
8111e580:	0015883a 	mov	r10,zero
8111e584:	0017883a 	mov	r11,zero
8111e588:	00801944 	movi	r2,101
8111e58c:	88807826 	beq	r17,r2,8111e770 <_strtod_r+0x464>
8111e590:	00801144 	movi	r2,69
8111e594:	88807626 	beq	r17,r2,8111e770 <_strtod_r+0x464>
8111e598:	002b883a 	mov	r21,zero
8111e59c:	48003d1e 	bne	r9,zero,8111e694 <_strtod_r+0x388>
8111e5a0:	2800391e 	bne	r5,zero,8111e688 <_strtod_r+0x37c>
8111e5a4:	9000381e 	bne	r18,zero,8111e688 <_strtod_r+0x37c>
8111e5a8:	583fa71e 	bne	r11,zero,8111e448 <__reset+0xfb0fe448>
8111e5ac:	00801384 	movi	r2,78
8111e5b0:	88800526 	beq	r17,r2,8111e5c8 <_strtod_r+0x2bc>
8111e5b4:	147fa20e 	bge	r2,r17,8111e440 <__reset+0xfb0fe440>
8111e5b8:	00801a44 	movi	r2,105
8111e5bc:	8883d726 	beq	r17,r2,8111f51c <_strtod_r+0x1210>
8111e5c0:	00801b84 	movi	r2,110
8111e5c4:	88bfa01e 	bne	r17,r2,8111e448 <__reset+0xfb0fe448>
8111e5c8:	01604534 	movhi	r5,33044
8111e5cc:	d9000617 	ldw	r4,24(sp)
8111e5d0:	297a3f04 	addi	r5,r5,-5892
8111e5d4:	01c00644 	movi	r7,25
8111e5d8:	00000b06 	br	8111e608 <_strtod_r+0x2fc>
8111e5dc:	21000044 	addi	r4,r4,1
8111e5e0:	20800003 	ldbu	r2,0(r4)
8111e5e4:	10ffefc4 	addi	r3,r2,-65
8111e5e8:	10803fcc 	andi	r2,r2,255
8111e5ec:	1080201c 	xori	r2,r2,128
8111e5f0:	18c03fcc 	andi	r3,r3,255
8111e5f4:	10bfe004 	addi	r2,r2,-128
8111e5f8:	38c00136 	bltu	r7,r3,8111e600 <_strtod_r+0x2f4>
8111e5fc:	10800804 	addi	r2,r2,32
8111e600:	29400044 	addi	r5,r5,1
8111e604:	11bf901e 	bne	r2,r6,8111e448 <__reset+0xfb0fe448>
8111e608:	29800007 	ldb	r6,0(r5)
8111e60c:	303ff31e 	bne	r6,zero,8111e5dc <__reset+0xfb0fe5dc>
8111e610:	20800044 	addi	r2,r4,1
8111e614:	d8800615 	stw	r2,24(sp)
8111e618:	20c00047 	ldb	r3,1(r4)
8111e61c:	00800a04 	movi	r2,40
8111e620:	18849d26 	beq	r3,r2,8111f898 <_strtod_r+0x158c>
8111e624:	047ffe34 	movhi	r17,65528
8111e628:	0025883a 	mov	r18,zero
8111e62c:	902b883a 	mov	r21,r18
8111e630:	882d883a 	mov	r22,r17
8111e634:	a03f8926 	beq	r20,zero,8111e45c <__reset+0xfb0fe45c>
8111e638:	ddc00617 	ldw	r23,24(sp)
8111e63c:	003f8606 	br	8111e458 <__reset+0xfb0fe458>
8111e640:	00800044 	movi	r2,1
8111e644:	d8800715 	stw	r2,28(sp)
8111e648:	003f9606 	br	8111e4a4 <__reset+0xfb0fe4a4>
8111e64c:	21000044 	addi	r4,r4,1
8111e650:	d9000615 	stw	r4,24(sp)
8111e654:	20800003 	ldbu	r2,0(r4)
8111e658:	10c03fcc 	andi	r3,r2,255
8111e65c:	28ff462e 	bgeu	r5,r3,8111e378 <__reset+0xfb0fe378>
8111e660:	2027883a 	mov	r19,r4
8111e664:	d8000715 	stw	zero,28(sp)
8111e668:	003f9506 	br	8111e4c0 <__reset+0xfb0fe4c0>
8111e66c:	9cc002a4 	muli	r19,r19,10
8111e670:	10803fcc 	andi	r2,r2,255
8111e674:	1080201c 	xori	r2,r2,128
8111e678:	10bfe004 	addi	r2,r2,-128
8111e67c:	9885883a 	add	r2,r19,r2
8111e680:	14fff404 	addi	r19,r2,-48
8111e684:	003fa506 	br	8111e51c <__reset+0xfb0fe51c>
8111e688:	002b883a 	mov	r21,zero
8111e68c:	002d883a 	mov	r22,zero
8111e690:	003fe806 	br	8111e634 <__reset+0xfb0fe634>
8111e694:	aaabc83a 	sub	r21,r21,r10
8111e698:	b000011e 	bne	r22,zero,8111e6a0 <_strtod_r+0x394>
8111e69c:	482d883a 	mov	r22,r9
8111e6a0:	00800404 	movi	r2,16
8111e6a4:	482f883a 	mov	r23,r9
8111e6a8:	1240010e 	bge	r2,r9,8111e6b0 <_strtod_r+0x3a4>
8111e6ac:	102f883a 	mov	r23,r2
8111e6b0:	e009883a 	mov	r4,fp
8111e6b4:	da401315 	stw	r9,76(sp)
8111e6b8:	112707c0 	call	8112707c <__floatunsidf>
8111e6bc:	1025883a 	mov	r18,r2
8111e6c0:	00800244 	movi	r2,9
8111e6c4:	1823883a 	mov	r17,r3
8111e6c8:	da401317 	ldw	r9,76(sp)
8111e6cc:	15c0160e 	bge	r2,r23,8111e728 <_strtod_r+0x41c>
8111e6d0:	b8bffdc4 	addi	r2,r23,-9
8111e6d4:	100490fa 	slli	r2,r2,3
8111e6d8:	180b883a 	mov	r5,r3
8111e6dc:	00e04534 	movhi	r3,33044
8111e6e0:	18fa0a04 	addi	r3,r3,-6104
8111e6e4:	1885883a 	add	r2,r3,r2
8111e6e8:	11800017 	ldw	r6,0(r2)
8111e6ec:	11c00117 	ldw	r7,4(r2)
8111e6f0:	9009883a 	mov	r4,r18
8111e6f4:	1110f940 	call	81110f94 <__muldf3>
8111e6f8:	9809883a 	mov	r4,r19
8111e6fc:	1025883a 	mov	r18,r2
8111e700:	1823883a 	mov	r17,r3
8111e704:	112707c0 	call	8112707c <__floatunsidf>
8111e708:	9009883a 	mov	r4,r18
8111e70c:	880b883a 	mov	r5,r17
8111e710:	100d883a 	mov	r6,r2
8111e714:	180f883a 	mov	r7,r3
8111e718:	11252180 	call	81125218 <__adddf3>
8111e71c:	da401317 	ldw	r9,76(sp)
8111e720:	1025883a 	mov	r18,r2
8111e724:	1823883a 	mov	r17,r3
8111e728:	008003c4 	movi	r2,15
8111e72c:	12407b16 	blt	r2,r9,8111e91c <_strtod_r+0x610>
8111e730:	a83fbe26 	beq	r21,zero,8111e62c <__reset+0xfb0fe62c>
8111e734:	0543670e 	bge	zero,r21,8111f4d4 <_strtod_r+0x11c8>
8111e738:	00c00584 	movi	r3,22
8111e73c:	1d42e816 	blt	r3,r21,8111f2e0 <_strtod_r+0xfd4>
8111e740:	a82a90fa 	slli	r21,r21,3
8111e744:	00a04534 	movhi	r2,33044
8111e748:	10ba0a04 	addi	r2,r2,-6104
8111e74c:	1545883a 	add	r2,r2,r21
8111e750:	11000017 	ldw	r4,0(r2)
8111e754:	11400117 	ldw	r5,4(r2)
8111e758:	900d883a 	mov	r6,r18
8111e75c:	880f883a 	mov	r7,r17
8111e760:	1110f940 	call	81110f94 <__muldf3>
8111e764:	102b883a 	mov	r21,r2
8111e768:	182d883a 	mov	r22,r3
8111e76c:	003fb106 	br	8111e634 <__reset+0xfb0fe634>
8111e770:	4801b526 	beq	r9,zero,8111ee48 <_strtod_r+0xb3c>
8111e774:	ddc00617 	ldw	r23,24(sp)
8111e778:	00c00ac4 	movi	r3,43
8111e77c:	b8800044 	addi	r2,r23,1
8111e780:	d8800615 	stw	r2,24(sp)
8111e784:	b8800047 	ldb	r2,1(r23)
8111e788:	10c1e926 	beq	r2,r3,8111ef30 <_strtod_r+0xc24>
8111e78c:	00c00b44 	movi	r3,45
8111e790:	10c1ec26 	beq	r2,r3,8111ef44 <_strtod_r+0xc38>
8111e794:	1023883a 	mov	r17,r2
8111e798:	0019883a 	mov	r12,zero
8111e79c:	88bff404 	addi	r2,r17,-48
8111e7a0:	00c00244 	movi	r3,9
8111e7a4:	1881b736 	bltu	r3,r2,8111ee84 <_strtod_r+0xb78>
8111e7a8:	00800c04 	movi	r2,48
8111e7ac:	8880071e 	bne	r17,r2,8111e7cc <_strtod_r+0x4c0>
8111e7b0:	d8800617 	ldw	r2,24(sp)
8111e7b4:	8807883a 	mov	r3,r17
8111e7b8:	10800044 	addi	r2,r2,1
8111e7bc:	d8800615 	stw	r2,24(sp)
8111e7c0:	14400007 	ldb	r17,0(r2)
8111e7c4:	10800044 	addi	r2,r2,1
8111e7c8:	88fffc26 	beq	r17,r3,8111e7bc <__reset+0xfb0fe7bc>
8111e7cc:	88bff3c4 	addi	r2,r17,-49
8111e7d0:	00c00204 	movi	r3,8
8111e7d4:	18bf7036 	bltu	r3,r2,8111e598 <__reset+0xfb0fe598>
8111e7d8:	db800617 	ldw	r14,24(sp)
8111e7dc:	88bff404 	addi	r2,r17,-48
8111e7e0:	03400244 	movi	r13,9
8111e7e4:	71c00044 	addi	r7,r14,1
8111e7e8:	d9c00615 	stw	r7,24(sp)
8111e7ec:	74400043 	ldbu	r17,1(r14)
8111e7f0:	88fff404 	addi	r3,r17,-48
8111e7f4:	8c403fcc 	andi	r17,r17,255
8111e7f8:	8c40201c 	xori	r17,r17,128
8111e7fc:	18c03fcc 	andi	r3,r3,255
8111e800:	8c7fe004 	addi	r17,r17,-128
8111e804:	68c00e36 	bltu	r13,r3,8111e840 <_strtod_r+0x534>
8111e808:	71000084 	addi	r4,r14,2
8111e80c:	d9000615 	stw	r4,24(sp)
8111e810:	108002a4 	muli	r2,r2,10
8111e814:	21800003 	ldbu	r6,0(r4)
8111e818:	200f883a 	mov	r7,r4
8111e81c:	1463883a 	add	r17,r2,r17
8111e820:	30fff404 	addi	r3,r6,-48
8111e824:	88bff404 	addi	r2,r17,-48
8111e828:	34403fcc 	andi	r17,r6,255
8111e82c:	8c40201c 	xori	r17,r17,128
8111e830:	18c03fcc 	andi	r3,r3,255
8111e834:	8c7fe004 	addi	r17,r17,-128
8111e838:	21000044 	addi	r4,r4,1
8111e83c:	68fff32e 	bgeu	r13,r3,8111e80c <__reset+0xfb0fe80c>
8111e840:	3b8fc83a 	sub	r7,r7,r14
8111e844:	00c00204 	movi	r3,8
8111e848:	19c29716 	blt	r3,r7,8111f2a8 <_strtod_r+0xf9c>
8111e84c:	102b883a 	mov	r21,r2
8111e850:	009387c4 	movi	r2,19999
8111e854:	1540010e 	bge	r2,r21,8111e85c <_strtod_r+0x550>
8111e858:	102b883a 	mov	r21,r2
8111e85c:	603f4f26 	beq	r12,zero,8111e59c <__reset+0xfb0fe59c>
8111e860:	056bc83a 	sub	r21,zero,r21
8111e864:	003f4d06 	br	8111e59c <__reset+0xfb0fe59c>
8111e868:	98800047 	ldb	r2,1(r19)
8111e86c:	00c01604 	movi	r3,88
8111e870:	10c1de26 	beq	r2,r3,8111efec <_strtod_r+0xce0>
8111e874:	00c01e04 	movi	r3,120
8111e878:	10c1dc26 	beq	r2,r3,8111efec <_strtod_r+0xce0>
8111e87c:	98c00044 	addi	r3,r19,1
8111e880:	1827883a 	mov	r19,r3
8111e884:	d8c00615 	stw	r3,24(sp)
8111e888:	18c00044 	addi	r3,r3,1
8111e88c:	18bfffc3 	ldbu	r2,-1(r3)
8111e890:	11003fcc 	andi	r4,r2,255
8111e894:	2100201c 	xori	r4,r4,128
8111e898:	213fe004 	addi	r4,r4,-128
8111e89c:	217ff826 	beq	r4,r5,8111e880 <__reset+0xfb0fe880>
8111e8a0:	203f7926 	beq	r4,zero,8111e688 <__reset+0xfb0fe688>
8111e8a4:	dcc00815 	stw	r19,32(sp)
8111e8a8:	04800044 	movi	r18,1
8111e8ac:	003f0b06 	br	8111e4dc <__reset+0xfb0fe4dc>
8111e8b0:	8009883a 	mov	r4,r16
8111e8b4:	111c52c0 	call	8111c52c <_localeconv_r>
8111e8b8:	11000017 	ldw	r4,0(r2)
8111e8bc:	11134b00 	call	811134b0 <strlen>
8111e8c0:	d8c00617 	ldw	r3,24(sp)
8111e8c4:	1885883a 	add	r2,r3,r2
8111e8c8:	d8800615 	stw	r2,24(sp)
8111e8cc:	14400007 	ldb	r17,0(r2)
8111e8d0:	b001881e 	bne	r22,zero,8111eef4 <_strtod_r+0xbe8>
8111e8d4:	00c00c04 	movi	r3,48
8111e8d8:	88c3391e 	bne	r17,r3,8111f5c0 <_strtod_r+0x12b4>
8111e8dc:	10c00044 	addi	r3,r2,1
8111e8e0:	8809883a 	mov	r4,r17
8111e8e4:	d8c00615 	stw	r3,24(sp)
8111e8e8:	1c400007 	ldb	r17,0(r3)
8111e8ec:	188bc83a 	sub	r5,r3,r2
8111e8f0:	18c00044 	addi	r3,r3,1
8111e8f4:	893ffb26 	beq	r17,r4,8111e8e4 <__reset+0xfb0fe8e4>
8111e8f8:	88bff3c4 	addi	r2,r17,-49
8111e8fc:	00c00204 	movi	r3,8
8111e900:	1882e72e 	bgeu	r3,r2,8111f4a0 <_strtod_r+0x1194>
8111e904:	00801944 	movi	r2,101
8111e908:	88814d26 	beq	r17,r2,8111ee40 <_strtod_r+0xb34>
8111e90c:	0013883a 	mov	r9,zero
8111e910:	0015883a 	mov	r10,zero
8111e914:	02c00044 	movi	r11,1
8111e918:	003f1d06 	br	8111e590 <__reset+0xfb0fe590>
8111e91c:	4defc83a 	sub	r23,r9,r23
8111e920:	bd6f883a 	add	r23,r23,r21
8111e924:	05c21e0e 	bge	zero,r23,8111f1a0 <_strtod_r+0xe94>
8111e928:	b88003cc 	andi	r2,r23,15
8111e92c:	10000d26 	beq	r2,zero,8111e964 <_strtod_r+0x658>
8111e930:	100490fa 	slli	r2,r2,3
8111e934:	00e04534 	movhi	r3,33044
8111e938:	18fa0a04 	addi	r3,r3,-6104
8111e93c:	1885883a 	add	r2,r3,r2
8111e940:	11000017 	ldw	r4,0(r2)
8111e944:	11400117 	ldw	r5,4(r2)
8111e948:	900d883a 	mov	r6,r18
8111e94c:	880f883a 	mov	r7,r17
8111e950:	da401315 	stw	r9,76(sp)
8111e954:	1110f940 	call	81110f94 <__muldf3>
8111e958:	da401317 	ldw	r9,76(sp)
8111e95c:	1025883a 	mov	r18,r2
8111e960:	1823883a 	mov	r17,r3
8111e964:	023ffc04 	movi	r8,-16
8111e968:	ba10703a 	and	r8,r23,r8
8111e96c:	40003c26 	beq	r8,zero,8111ea60 <_strtod_r+0x754>
8111e970:	00804d04 	movi	r2,308
8111e974:	1201cd16 	blt	r2,r8,8111f0ac <_strtod_r+0xda0>
8111e978:	4011d13a 	srai	r8,r8,4
8111e97c:	03000044 	movi	r12,1
8111e980:	62037c0e 	bge	r12,r8,8111f774 <_strtod_r+0x1468>
8111e984:	01204534 	movhi	r4,33044
8111e988:	213a0004 	addi	r4,r4,-6144
8111e98c:	2015883a 	mov	r10,r4
8111e990:	0027883a 	mov	r19,zero
8111e994:	d9000915 	stw	r4,36(sp)
8111e998:	9005883a 	mov	r2,r18
8111e99c:	8807883a 	mov	r3,r17
8111e9a0:	dc000c15 	stw	r16,48(sp)
8111e9a4:	dc800e15 	stw	r18,56(sp)
8111e9a8:	9821883a 	mov	r16,r19
8111e9ac:	0009883a 	mov	r4,zero
8111e9b0:	8827883a 	mov	r19,r17
8111e9b4:	602f883a 	mov	r23,r12
8111e9b8:	da400a15 	stw	r9,40(sp)
8111e9bc:	5025883a 	mov	r18,r10
8111e9c0:	4023883a 	mov	r17,r8
8111e9c4:	8980004c 	andi	r6,r17,1
8111e9c8:	30000626 	beq	r6,zero,8111e9e4 <_strtod_r+0x6d8>
8111e9cc:	91800017 	ldw	r6,0(r18)
8111e9d0:	91c00117 	ldw	r7,4(r18)
8111e9d4:	1009883a 	mov	r4,r2
8111e9d8:	180b883a 	mov	r5,r3
8111e9dc:	1110f940 	call	81110f94 <__muldf3>
8111e9e0:	01000044 	movi	r4,1
8111e9e4:	8823d07a 	srai	r17,r17,1
8111e9e8:	84000044 	addi	r16,r16,1
8111e9ec:	94800204 	addi	r18,r18,8
8111e9f0:	8dfff41e 	bne	r17,r23,8111e9c4 <__reset+0xfb0fe9c4>
8111e9f4:	21003fcc 	andi	r4,r4,255
8111e9f8:	9823883a 	mov	r17,r19
8111e9fc:	da400a17 	ldw	r9,40(sp)
8111ea00:	8027883a 	mov	r19,r16
8111ea04:	dc800e17 	ldw	r18,56(sp)
8111ea08:	dc000c17 	ldw	r16,48(sp)
8111ea0c:	2003b11e 	bne	r4,zero,8111f8d4 <_strtod_r+0x15c8>
8111ea10:	981690fa 	slli	r11,r19,3
8111ea14:	d8800917 	ldw	r2,36(sp)
8111ea18:	01ff2c34 	movhi	r7,64688
8111ea1c:	900d883a 	mov	r6,r18
8111ea20:	12ef883a 	add	r23,r2,r11
8111ea24:	b9000017 	ldw	r4,0(r23)
8111ea28:	b9400117 	ldw	r5,4(r23)
8111ea2c:	89cf883a 	add	r7,r17,r7
8111ea30:	da401315 	stw	r9,76(sp)
8111ea34:	1110f940 	call	81110f94 <__muldf3>
8111ea38:	1025883a 	mov	r18,r2
8111ea3c:	011f2834 	movhi	r4,31904
8111ea40:	189ffc2c 	andhi	r2,r3,32752
8111ea44:	da401317 	ldw	r9,76(sp)
8111ea48:	20819836 	bltu	r4,r2,8111f0ac <_strtod_r+0xda0>
8111ea4c:	011f2434 	movhi	r4,31888
8111ea50:	2083382e 	bgeu	r4,r2,8111f734 <_strtod_r+0x1428>
8111ea54:	045ffc34 	movhi	r17,32752
8111ea58:	8c7fffc4 	addi	r17,r17,-1
8111ea5c:	04bfffc4 	movi	r18,-1
8111ea60:	d8000915 	stw	zero,36(sp)
8111ea64:	d9400817 	ldw	r5,32(sp)
8111ea68:	df000015 	stw	fp,0(sp)
8111ea6c:	480f883a 	mov	r7,r9
8111ea70:	b00d883a 	mov	r6,r22
8111ea74:	8009883a 	mov	r4,r16
8111ea78:	111cc480 	call	8111cc48 <__s2b>
8111ea7c:	d8800815 	stw	r2,32(sp)
8111ea80:	10018a26 	beq	r2,zero,8111f0ac <_strtod_r+0xda0>
8111ea84:	a807d7fa 	srai	r3,r21,31
8111ea88:	0545c83a 	sub	r2,zero,r21
8111ea8c:	dd400a15 	stw	r21,40(sp)
8111ea90:	1886703a 	and	r3,r3,r2
8111ea94:	d8c00c15 	stw	r3,48(sp)
8111ea98:	a8013516 	blt	r21,zero,8111ef70 <_strtod_r+0xc64>
8111ea9c:	d9400817 	ldw	r5,32(sp)
8111eaa0:	0011883a 	mov	r8,zero
8111eaa4:	0027883a 	mov	r19,zero
8111eaa8:	29400304 	addi	r5,r5,12
8111eaac:	d9400f15 	stw	r5,60(sp)
8111eab0:	402b883a 	mov	r21,r8
8111eab4:	dd001215 	stw	r20,72(sp)
8111eab8:	d8800817 	ldw	r2,32(sp)
8111eabc:	8009883a 	mov	r4,r16
8111eac0:	11400117 	ldw	r5,4(r2)
8111eac4:	111ca480 	call	8111ca48 <_Balloc>
8111eac8:	1029883a 	mov	r20,r2
8111eacc:	10012d26 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ead0:	d8c00817 	ldw	r3,32(sp)
8111ead4:	d9400f17 	ldw	r5,60(sp)
8111ead8:	11000304 	addi	r4,r2,12
8111eadc:	19800417 	ldw	r6,16(r3)
8111eae0:	31800084 	addi	r6,r6,2
8111eae4:	318d883a 	add	r6,r6,r6
8111eae8:	318d883a 	add	r6,r6,r6
8111eaec:	1112b340 	call	81112b34 <memcpy>
8111eaf0:	d9000204 	addi	r4,sp,8
8111eaf4:	d9000015 	stw	r4,0(sp)
8111eaf8:	d9c00404 	addi	r7,sp,16
8111eafc:	900b883a 	mov	r5,r18
8111eb00:	880d883a 	mov	r6,r17
8111eb04:	8009883a 	mov	r4,r16
8111eb08:	111d7240 	call	8111d724 <__d2b>
8111eb0c:	d8800515 	stw	r2,20(sp)
8111eb10:	dc801115 	stw	r18,68(sp)
8111eb14:	dc401015 	stw	r17,64(sp)
8111eb18:	10027c26 	beq	r2,zero,8111f50c <_strtod_r+0x1200>
8111eb1c:	01400044 	movi	r5,1
8111eb20:	8009883a 	mov	r4,r16
8111eb24:	111ce6c0 	call	8111ce6c <__i2b>
8111eb28:	1027883a 	mov	r19,r2
8111eb2c:	10011526 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111eb30:	d8800417 	ldw	r2,16(sp)
8111eb34:	1000c816 	blt	r2,zero,8111ee58 <_strtod_r+0xb4c>
8111eb38:	d9400c17 	ldw	r5,48(sp)
8111eb3c:	d9000a17 	ldw	r4,40(sp)
8111eb40:	28ad883a 	add	r22,r5,r2
8111eb44:	d9400917 	ldw	r5,36(sp)
8111eb48:	df000217 	ldw	fp,8(sp)
8111eb4c:	05ff0084 	movi	r23,-1022
8111eb50:	1147c83a 	sub	r3,r2,r5
8111eb54:	1f07883a 	add	r3,r3,fp
8111eb58:	00800d84 	movi	r2,54
8111eb5c:	18ffffc4 	addi	r3,r3,-1
8111eb60:	1739c83a 	sub	fp,r2,fp
8111eb64:	1dc0a50e 	bge	r3,r23,8111edfc <_strtod_r+0xaf0>
8111eb68:	b8efc83a 	sub	r23,r23,r3
8111eb6c:	008007c4 	movi	r2,31
8111eb70:	e5f9c83a 	sub	fp,fp,r23
8111eb74:	15c0bc16 	blt	r2,r23,8111ee68 <_strtod_r+0xb5c>
8111eb78:	00800044 	movi	r2,1
8111eb7c:	15c4983a 	sll	r2,r2,r23
8111eb80:	d8000b15 	stw	zero,44(sp)
8111eb84:	d8800d15 	stw	r2,52(sp)
8111eb88:	2707883a 	add	r3,r4,fp
8111eb8c:	d9000917 	ldw	r4,36(sp)
8111eb90:	b739883a 	add	fp,r22,fp
8111eb94:	20ef883a 	add	r23,r4,r3
8111eb98:	b009883a 	mov	r4,r22
8111eb9c:	e580010e 	bge	fp,r22,8111eba4 <_strtod_r+0x898>
8111eba0:	e009883a 	mov	r4,fp
8111eba4:	b805883a 	mov	r2,r23
8111eba8:	25c0010e 	bge	r4,r23,8111ebb0 <_strtod_r+0x8a4>
8111ebac:	2005883a 	mov	r2,r4
8111ebb0:	0080030e 	bge	zero,r2,8111ebc0 <_strtod_r+0x8b4>
8111ebb4:	e0b9c83a 	sub	fp,fp,r2
8111ebb8:	b8afc83a 	sub	r23,r23,r2
8111ebbc:	b0adc83a 	sub	r22,r22,r2
8111ebc0:	d9400c17 	ldw	r5,48(sp)
8111ebc4:	28001126 	beq	r5,zero,8111ec0c <_strtod_r+0x900>
8111ebc8:	280d883a 	mov	r6,r5
8111ebcc:	8009883a 	mov	r4,r16
8111ebd0:	980b883a 	mov	r5,r19
8111ebd4:	111d0b00 	call	8111d0b0 <__pow5mult>
8111ebd8:	1027883a 	mov	r19,r2
8111ebdc:	1000e926 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ebe0:	d9800517 	ldw	r6,20(sp)
8111ebe4:	100b883a 	mov	r5,r2
8111ebe8:	8009883a 	mov	r4,r16
8111ebec:	111ceb00 	call	8111ceb0 <__multiply>
8111ebf0:	1000e426 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ebf4:	d9400517 	ldw	r5,20(sp)
8111ebf8:	8009883a 	mov	r4,r16
8111ebfc:	d8801315 	stw	r2,76(sp)
8111ec00:	111caf80 	call	8111caf8 <_Bfree>
8111ec04:	d8801317 	ldw	r2,76(sp)
8111ec08:	d8800515 	stw	r2,20(sp)
8111ec0c:	0700060e 	bge	zero,fp,8111ec28 <_strtod_r+0x91c>
8111ec10:	d9400517 	ldw	r5,20(sp)
8111ec14:	e00d883a 	mov	r6,fp
8111ec18:	8009883a 	mov	r4,r16
8111ec1c:	111d1f80 	call	8111d1f8 <__lshift>
8111ec20:	d8800515 	stw	r2,20(sp)
8111ec24:	10023926 	beq	r2,zero,8111f50c <_strtod_r+0x1200>
8111ec28:	d8800a17 	ldw	r2,40(sp)
8111ec2c:	10000626 	beq	r2,zero,8111ec48 <_strtod_r+0x93c>
8111ec30:	d9800a17 	ldw	r6,40(sp)
8111ec34:	a00b883a 	mov	r5,r20
8111ec38:	8009883a 	mov	r4,r16
8111ec3c:	111d0b00 	call	8111d0b0 <__pow5mult>
8111ec40:	1029883a 	mov	r20,r2
8111ec44:	1000cf26 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ec48:	05c0060e 	bge	zero,r23,8111ec64 <_strtod_r+0x958>
8111ec4c:	a00b883a 	mov	r5,r20
8111ec50:	b80d883a 	mov	r6,r23
8111ec54:	8009883a 	mov	r4,r16
8111ec58:	111d1f80 	call	8111d1f8 <__lshift>
8111ec5c:	1029883a 	mov	r20,r2
8111ec60:	1000c826 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ec64:	0580060e 	bge	zero,r22,8111ec80 <_strtod_r+0x974>
8111ec68:	980b883a 	mov	r5,r19
8111ec6c:	b00d883a 	mov	r6,r22
8111ec70:	8009883a 	mov	r4,r16
8111ec74:	111d1f80 	call	8111d1f8 <__lshift>
8111ec78:	1027883a 	mov	r19,r2
8111ec7c:	1000c126 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ec80:	d9400517 	ldw	r5,20(sp)
8111ec84:	a00d883a 	mov	r6,r20
8111ec88:	8009883a 	mov	r4,r16
8111ec8c:	111d3a80 	call	8111d3a8 <__mdiff>
8111ec90:	102b883a 	mov	r21,r2
8111ec94:	1000bb26 	beq	r2,zero,8111ef84 <_strtod_r+0xc78>
8111ec98:	10c00317 	ldw	r3,12(r2)
8111ec9c:	980b883a 	mov	r5,r19
8111eca0:	10000315 	stw	zero,12(r2)
8111eca4:	1009883a 	mov	r4,r2
8111eca8:	d8c00e15 	stw	r3,56(sp)
8111ecac:	111d3480 	call	8111d348 <__mcmp>
8111ecb0:	10027616 	blt	r2,zero,8111f68c <_strtod_r+0x1380>
8111ecb4:	10024426 	beq	r2,zero,8111f5c8 <_strtod_r+0x12bc>
8111ecb8:	980b883a 	mov	r5,r19
8111ecbc:	a809883a 	mov	r4,r21
8111ecc0:	111d8780 	call	8111d878 <__ratio>
8111ecc4:	000d883a 	mov	r6,zero
8111ecc8:	01d00034 	movhi	r7,16384
8111eccc:	1009883a 	mov	r4,r2
8111ecd0:	180b883a 	mov	r5,r3
8111ecd4:	102f883a 	mov	r23,r2
8111ecd8:	182d883a 	mov	r22,r3
8111ecdc:	11265200 	call	81126520 <__ledf2>
8111ece0:	00804a16 	blt	zero,r2,8111ee0c <_strtod_r+0xb00>
8111ece4:	d9400e17 	ldw	r5,56(sp)
8111ece8:	28006b26 	beq	r5,zero,8111ee98 <_strtod_r+0xb8c>
8111ecec:	058ffc34 	movhi	r22,16368
8111ecf0:	d8000b15 	stw	zero,44(sp)
8111ecf4:	d8000d15 	stw	zero,52(sp)
8111ecf8:	b02f883a 	mov	r23,r22
8111ecfc:	8f1ffc2c 	andhi	fp,r17,32752
8111ed00:	009ff834 	movhi	r2,32736
8111ed04:	e080cd26 	beq	fp,r2,8111f03c <_strtod_r+0xd30>
8111ed08:	d9400917 	ldw	r5,36(sp)
8111ed0c:	28001a26 	beq	r5,zero,8111ed78 <_strtod_r+0xa6c>
8111ed10:	0081a834 	movhi	r2,1696
8111ed14:	17001836 	bltu	r2,fp,8111ed78 <_strtod_r+0xa6c>
8111ed18:	d9000d17 	ldw	r4,52(sp)
8111ed1c:	01d07834 	movhi	r7,16864
8111ed20:	39ffffc4 	addi	r7,r7,-1
8111ed24:	01bff034 	movhi	r6,65472
8111ed28:	b80b883a 	mov	r5,r23
8111ed2c:	11265200 	call	81126520 <__ledf2>
8111ed30:	00800e16 	blt	zero,r2,8111ed6c <_strtod_r+0xa60>
8111ed34:	d9000d17 	ldw	r4,52(sp)
8111ed38:	b80b883a 	mov	r5,r23
8111ed3c:	112432c0 	call	8112432c <__fixunsdfsi>
8111ed40:	10018126 	beq	r2,zero,8111f348 <_strtod_r+0x103c>
8111ed44:	1009883a 	mov	r4,r2
8111ed48:	112707c0 	call	8112707c <__floatunsidf>
8111ed4c:	d8800d15 	stw	r2,52(sp)
8111ed50:	182f883a 	mov	r23,r3
8111ed54:	d8800e17 	ldw	r2,56(sp)
8111ed58:	1001791e 	bne	r2,zero,8111f340 <_strtod_r+0x1034>
8111ed5c:	ba20003c 	xorhi	r8,r23,32768
8111ed60:	d8c00d17 	ldw	r3,52(sp)
8111ed64:	402d883a 	mov	r22,r8
8111ed68:	d8c00b15 	stw	r3,44(sp)
8111ed6c:	0081ac34 	movhi	r2,1712
8111ed70:	b091883a 	add	r8,r22,r2
8111ed74:	472dc83a 	sub	r22,r8,fp
8111ed78:	9009883a 	mov	r4,r18
8111ed7c:	880b883a 	mov	r5,r17
8111ed80:	111d5ac0 	call	8111d5ac <__ulp>
8111ed84:	d9000b17 	ldw	r4,44(sp)
8111ed88:	b00b883a 	mov	r5,r22
8111ed8c:	100d883a 	mov	r6,r2
8111ed90:	180f883a 	mov	r7,r3
8111ed94:	1110f940 	call	81110f94 <__muldf3>
8111ed98:	900d883a 	mov	r6,r18
8111ed9c:	880f883a 	mov	r7,r17
8111eda0:	1009883a 	mov	r4,r2
8111eda4:	180b883a 	mov	r5,r3
8111eda8:	11252180 	call	81125218 <__adddf3>
8111edac:	1025883a 	mov	r18,r2
8111edb0:	1823883a 	mov	r17,r3
8111edb4:	182d883a 	mov	r22,r3
8111edb8:	d9000917 	ldw	r4,36(sp)
8111edbc:	2000021e 	bne	r4,zero,8111edc8 <_strtod_r+0xabc>
8111edc0:	b09ffc2c 	andhi	r2,r22,32752
8111edc4:	e080be26 	beq	fp,r2,8111f0c0 <_strtod_r+0xdb4>
8111edc8:	d9400517 	ldw	r5,20(sp)
8111edcc:	8009883a 	mov	r4,r16
8111edd0:	111caf80 	call	8111caf8 <_Bfree>
8111edd4:	a00b883a 	mov	r5,r20
8111edd8:	8009883a 	mov	r4,r16
8111eddc:	111caf80 	call	8111caf8 <_Bfree>
8111ede0:	980b883a 	mov	r5,r19
8111ede4:	8009883a 	mov	r4,r16
8111ede8:	111caf80 	call	8111caf8 <_Bfree>
8111edec:	a80b883a 	mov	r5,r21
8111edf0:	8009883a 	mov	r4,r16
8111edf4:	111caf80 	call	8111caf8 <_Bfree>
8111edf8:	003f2f06 	br	8111eab8 <__reset+0xfb0feab8>
8111edfc:	00c00044 	movi	r3,1
8111ee00:	d8000b15 	stw	zero,44(sp)
8111ee04:	d8c00d15 	stw	r3,52(sp)
8111ee08:	003f5f06 	br	8111eb88 <__reset+0xfb0feb88>
8111ee0c:	b809883a 	mov	r4,r23
8111ee10:	000d883a 	mov	r6,zero
8111ee14:	01cff834 	movhi	r7,16352
8111ee18:	b00b883a 	mov	r5,r22
8111ee1c:	1110f940 	call	81110f94 <__muldf3>
8111ee20:	d9000e17 	ldw	r4,56(sp)
8111ee24:	d8800d15 	stw	r2,52(sp)
8111ee28:	182f883a 	mov	r23,r3
8111ee2c:	2000181e 	bne	r4,zero,8111ee90 <_strtod_r+0xb84>
8111ee30:	1a20003c 	xorhi	r8,r3,32768
8111ee34:	d8800b15 	stw	r2,44(sp)
8111ee38:	402d883a 	mov	r22,r8
8111ee3c:	003faf06 	br	8111ecfc <__reset+0xfb0fecfc>
8111ee40:	0015883a 	mov	r10,zero
8111ee44:	02c00044 	movi	r11,1
8111ee48:	2800011e 	bne	r5,zero,8111ee50 <_strtod_r+0xb44>
8111ee4c:	903d7e26 	beq	r18,zero,8111e448 <__reset+0xfb0fe448>
8111ee50:	0013883a 	mov	r9,zero
8111ee54:	003e4706 	br	8111e774 <__reset+0xfb0fe774>
8111ee58:	d8c00a17 	ldw	r3,40(sp)
8111ee5c:	dd800c17 	ldw	r22,48(sp)
8111ee60:	1889c83a 	sub	r4,r3,r2
8111ee64:	003f3706 	br	8111eb44 <__reset+0xfb0feb44>
8111ee68:	00bef884 	movi	r2,-1054
8111ee6c:	05c00044 	movi	r23,1
8111ee70:	10c5c83a 	sub	r2,r2,r3
8111ee74:	b884983a 	sll	r2,r23,r2
8111ee78:	ddc00d15 	stw	r23,52(sp)
8111ee7c:	d8800b15 	stw	r2,44(sp)
8111ee80:	003f4106 	br	8111eb88 <__reset+0xfb0feb88>
8111ee84:	ddc00615 	stw	r23,24(sp)
8111ee88:	002b883a 	mov	r21,zero
8111ee8c:	003dc306 	br	8111e59c <__reset+0xfb0fe59c>
8111ee90:	1811883a 	mov	r8,r3
8111ee94:	003fe706 	br	8111ee34 <__reset+0xfb0fee34>
8111ee98:	90002e1e 	bne	r18,zero,8111ef54 <_strtod_r+0xc48>
8111ee9c:	00c00434 	movhi	r3,16
8111eea0:	18ffffc4 	addi	r3,r3,-1
8111eea4:	88c4703a 	and	r2,r17,r3
8111eea8:	10002c1e 	bne	r2,zero,8111ef5c <_strtod_r+0xc50>
8111eeac:	000d883a 	mov	r6,zero
8111eeb0:	01cffc34 	movhi	r7,16368
8111eeb4:	b809883a 	mov	r4,r23
8111eeb8:	b00b883a 	mov	r5,r22
8111eebc:	11265200 	call	81126520 <__ledf2>
8111eec0:	10021716 	blt	r2,zero,8111f720 <_strtod_r+0x1414>
8111eec4:	b809883a 	mov	r4,r23
8111eec8:	b00b883a 	mov	r5,r22
8111eecc:	000d883a 	mov	r6,zero
8111eed0:	01cff834 	movhi	r7,16352
8111eed4:	1110f940 	call	81110f94 <__muldf3>
8111eed8:	d8800d15 	stw	r2,52(sp)
8111eedc:	182f883a 	mov	r23,r3
8111eee0:	102d883a 	mov	r22,r2
8111eee4:	1a20003c 	xorhi	r8,r3,32768
8111eee8:	dd800b15 	stw	r22,44(sp)
8111eeec:	402d883a 	mov	r22,r8
8111eef0:	003f8206 	br	8111ecfc <__reset+0xfb0fecfc>
8111eef4:	b013883a 	mov	r9,r22
8111eef8:	000b883a 	mov	r5,zero
8111eefc:	0015883a 	mov	r10,zero
8111ef00:	893ff404 	addi	r4,r17,-48
8111ef04:	00800244 	movi	r2,9
8111ef08:	11001036 	bltu	r2,r4,8111ef4c <_strtod_r+0xc40>
8111ef0c:	28c00044 	addi	r3,r5,1
8111ef10:	2023883a 	mov	r17,r4
8111ef14:	20014d1e 	bne	r4,zero,8111f44c <_strtod_r+0x1140>
8111ef18:	d9800617 	ldw	r6,24(sp)
8111ef1c:	180b883a 	mov	r5,r3
8111ef20:	30800044 	addi	r2,r6,1
8111ef24:	d8800615 	stw	r2,24(sp)
8111ef28:	34400047 	ldb	r17,1(r6)
8111ef2c:	003ff406 	br	8111ef00 <__reset+0xfb0fef00>
8111ef30:	0019883a 	mov	r12,zero
8111ef34:	b8800084 	addi	r2,r23,2
8111ef38:	d8800615 	stw	r2,24(sp)
8111ef3c:	bc400087 	ldb	r17,2(r23)
8111ef40:	003e1606 	br	8111e79c <__reset+0xfb0fe79c>
8111ef44:	03000044 	movi	r12,1
8111ef48:	003ffa06 	br	8111ef34 <__reset+0xfb0fef34>
8111ef4c:	02c00044 	movi	r11,1
8111ef50:	003d8d06 	br	8111e588 <__reset+0xfb0fe588>
8111ef54:	00800044 	movi	r2,1
8111ef58:	9080fe26 	beq	r18,r2,8111f354 <_strtod_r+0x1048>
8111ef5c:	d8000b15 	stw	zero,44(sp)
8111ef60:	05affc34 	movhi	r22,49136
8111ef64:	d8000d15 	stw	zero,52(sp)
8111ef68:	05cffc34 	movhi	r23,16368
8111ef6c:	003f6306 	br	8111ecfc <__reset+0xfb0fecfc>
8111ef70:	d8000a15 	stw	zero,40(sp)
8111ef74:	003ec906 	br	8111ea9c <__reset+0xfb0fea9c>
8111ef78:	d9001117 	ldw	r4,68(sp)
8111ef7c:	00bfffc4 	movi	r2,-1
8111ef80:	2080461e 	bne	r4,r2,8111f09c <_strtod_r+0xd90>
8111ef84:	dd000a15 	stw	r20,40(sp)
8111ef88:	dd001217 	ldw	r20,72(sp)
8111ef8c:	a811883a 	mov	r8,r21
8111ef90:	d8800517 	ldw	r2,20(sp)
8111ef94:	00c00884 	movi	r3,34
8111ef98:	80c00015 	stw	r3,0(r16)
8111ef9c:	002b883a 	mov	r21,zero
8111efa0:	059ffc34 	movhi	r22,32752
8111efa4:	100b883a 	mov	r5,r2
8111efa8:	8009883a 	mov	r4,r16
8111efac:	da001315 	stw	r8,76(sp)
8111efb0:	111caf80 	call	8111caf8 <_Bfree>
8111efb4:	d9400a17 	ldw	r5,40(sp)
8111efb8:	8009883a 	mov	r4,r16
8111efbc:	111caf80 	call	8111caf8 <_Bfree>
8111efc0:	980b883a 	mov	r5,r19
8111efc4:	8009883a 	mov	r4,r16
8111efc8:	111caf80 	call	8111caf8 <_Bfree>
8111efcc:	d9400817 	ldw	r5,32(sp)
8111efd0:	8009883a 	mov	r4,r16
8111efd4:	111caf80 	call	8111caf8 <_Bfree>
8111efd8:	da001317 	ldw	r8,76(sp)
8111efdc:	8009883a 	mov	r4,r16
8111efe0:	400b883a 	mov	r5,r8
8111efe4:	111caf80 	call	8111caf8 <_Bfree>
8111efe8:	003d9206 	br	8111e634 <__reset+0xfb0fe634>
8111efec:	d8c00717 	ldw	r3,28(sp)
8111eff0:	d8800504 	addi	r2,sp,20
8111eff4:	01a04534 	movhi	r6,33044
8111eff8:	31ba4504 	addi	r6,r6,-5868
8111effc:	d8c00115 	stw	r3,4(sp)
8111f000:	d8800015 	stw	r2,0(sp)
8111f004:	d9c00404 	addi	r7,sp,16
8111f008:	d9400604 	addi	r5,sp,24
8111f00c:	8009883a 	mov	r4,r16
8111f010:	11234600 	call	81123460 <__gethex>
8111f014:	154001cc 	andi	r21,r2,7
8111f018:	a83d9b26 	beq	r21,zero,8111e688 <__reset+0xfb0fe688>
8111f01c:	00c00184 	movi	r3,6
8111f020:	a8c0d61e 	bne	r21,r3,8111f37c <_strtod_r+0x1070>
8111f024:	9cc00044 	addi	r19,r19,1
8111f028:	dcc00615 	stw	r19,24(sp)
8111f02c:	002b883a 	mov	r21,zero
8111f030:	002d883a 	mov	r22,zero
8111f034:	d8000715 	stw	zero,28(sp)
8111f038:	003d7e06 	br	8111e634 <__reset+0xfb0fe634>
8111f03c:	00bf2c34 	movhi	r2,64688
8111f040:	88a3883a 	add	r17,r17,r2
8111f044:	9009883a 	mov	r4,r18
8111f048:	880b883a 	mov	r5,r17
8111f04c:	111d5ac0 	call	8111d5ac <__ulp>
8111f050:	d9000b17 	ldw	r4,44(sp)
8111f054:	100d883a 	mov	r6,r2
8111f058:	180f883a 	mov	r7,r3
8111f05c:	b00b883a 	mov	r5,r22
8111f060:	1110f940 	call	81110f94 <__muldf3>
8111f064:	900d883a 	mov	r6,r18
8111f068:	180b883a 	mov	r5,r3
8111f06c:	880f883a 	mov	r7,r17
8111f070:	1009883a 	mov	r4,r2
8111f074:	11252180 	call	81125218 <__adddf3>
8111f078:	015f2834 	movhi	r5,31904
8111f07c:	1025883a 	mov	r18,r2
8111f080:	297fffc4 	addi	r5,r5,-1
8111f084:	189ffc2c 	andhi	r2,r3,32752
8111f088:	2880892e 	bgeu	r5,r2,8111f2b0 <_strtod_r+0xfa4>
8111f08c:	d8801017 	ldw	r2,64(sp)
8111f090:	00dffc34 	movhi	r3,32752
8111f094:	18ffffc4 	addi	r3,r3,-1
8111f098:	10ffb726 	beq	r2,r3,8111ef78 <__reset+0xfb0fef78>
8111f09c:	045ffc34 	movhi	r17,32752
8111f0a0:	8c7fffc4 	addi	r17,r17,-1
8111f0a4:	04bfffc4 	movi	r18,-1
8111f0a8:	003f4706 	br	8111edc8 <__reset+0xfb0fedc8>
8111f0ac:	00800884 	movi	r2,34
8111f0b0:	80800015 	stw	r2,0(r16)
8111f0b4:	002b883a 	mov	r21,zero
8111f0b8:	059ffc34 	movhi	r22,32752
8111f0bc:	003d5d06 	br	8111e634 <__reset+0xfb0fe634>
8111f0c0:	d9000d17 	ldw	r4,52(sp)
8111f0c4:	b80b883a 	mov	r5,r23
8111f0c8:	1126f180 	call	81126f18 <__fixdfsi>
8111f0cc:	1009883a 	mov	r4,r2
8111f0d0:	1126f980 	call	81126f98 <__floatsidf>
8111f0d4:	d9000d17 	ldw	r4,52(sp)
8111f0d8:	b80b883a 	mov	r5,r23
8111f0dc:	100d883a 	mov	r6,r2
8111f0e0:	180f883a 	mov	r7,r3
8111f0e4:	11266140 	call	81126614 <__subdf3>
8111f0e8:	d9400e17 	ldw	r5,56(sp)
8111f0ec:	1039883a 	mov	fp,r2
8111f0f0:	182f883a 	mov	r23,r3
8111f0f4:	2800141e 	bne	r5,zero,8111f148 <_strtod_r+0xe3c>
8111f0f8:	9000131e 	bne	r18,zero,8111f148 <_strtod_r+0xe3c>
8111f0fc:	00800434 	movhi	r2,16
8111f100:	10bfffc4 	addi	r2,r2,-1
8111f104:	b0ac703a 	and	r22,r22,r2
8111f108:	b0000f1e 	bne	r22,zero,8111f148 <_strtod_r+0xe3c>
8111f10c:	01a52834 	movhi	r6,38048
8111f110:	01cff434 	movhi	r7,16336
8111f114:	318d6544 	addi	r6,r6,13717
8111f118:	39ffffc4 	addi	r7,r7,-1
8111f11c:	e009883a 	mov	r4,fp
8111f120:	180b883a 	mov	r5,r3
8111f124:	11265200 	call	81126520 <__ledf2>
8111f128:	103f270e 	bge	r2,zero,8111edc8 <__reset+0xfb0fedc8>
8111f12c:	dd000a15 	stw	r20,40(sp)
8111f130:	a811883a 	mov	r8,r21
8111f134:	dd001217 	ldw	r20,72(sp)
8111f138:	d8800517 	ldw	r2,20(sp)
8111f13c:	002b883a 	mov	r21,zero
8111f140:	882d883a 	mov	r22,r17
8111f144:	003f9706 	br	8111efa4 <__reset+0xfb0fefa4>
8111f148:	01a52834 	movhi	r6,38048
8111f14c:	01cff834 	movhi	r7,16352
8111f150:	318d6544 	addi	r6,r6,13717
8111f154:	39ffffc4 	addi	r7,r7,-1
8111f158:	e009883a 	mov	r4,fp
8111f15c:	b80b883a 	mov	r5,r23
8111f160:	11265200 	call	81126520 <__ledf2>
8111f164:	10000716 	blt	r2,zero,8111f184 <_strtod_r+0xe78>
8111f168:	018d6c34 	movhi	r6,13744
8111f16c:	31b94d44 	addi	r6,r6,-6859
8111f170:	01cff834 	movhi	r7,16352
8111f174:	e009883a 	mov	r4,fp
8111f178:	b80b883a 	mov	r5,r23
8111f17c:	11264440 	call	81126444 <__gedf2>
8111f180:	00bf110e 	bge	zero,r2,8111edc8 <__reset+0xfb0fedc8>
8111f184:	dd000a15 	stw	r20,40(sp)
8111f188:	a811883a 	mov	r8,r21
8111f18c:	dd001217 	ldw	r20,72(sp)
8111f190:	d8800517 	ldw	r2,20(sp)
8111f194:	902b883a 	mov	r21,r18
8111f198:	882d883a 	mov	r22,r17
8111f19c:	003f8106 	br	8111efa4 <__reset+0xfb0fefa4>
8111f1a0:	b83e2f26 	beq	r23,zero,8111ea60 <__reset+0xfb0fea60>
8111f1a4:	05efc83a 	sub	r23,zero,r23
8111f1a8:	b88003cc 	andi	r2,r23,15
8111f1ac:	10000d26 	beq	r2,zero,8111f1e4 <_strtod_r+0xed8>
8111f1b0:	100490fa 	slli	r2,r2,3
8111f1b4:	00e04534 	movhi	r3,33044
8111f1b8:	18fa0a04 	addi	r3,r3,-6104
8111f1bc:	1885883a 	add	r2,r3,r2
8111f1c0:	11800017 	ldw	r6,0(r2)
8111f1c4:	11c00117 	ldw	r7,4(r2)
8111f1c8:	9009883a 	mov	r4,r18
8111f1cc:	880b883a 	mov	r5,r17
8111f1d0:	da401315 	stw	r9,76(sp)
8111f1d4:	1125acc0 	call	81125acc <__divdf3>
8111f1d8:	da401317 	ldw	r9,76(sp)
8111f1dc:	1025883a 	mov	r18,r2
8111f1e0:	1823883a 	mov	r17,r3
8111f1e4:	b82fd13a 	srai	r23,r23,4
8111f1e8:	b83e1d26 	beq	r23,zero,8111ea60 <__reset+0xfb0fea60>
8111f1ec:	008007c4 	movi	r2,31
8111f1f0:	15c02816 	blt	r2,r23,8111f294 <_strtod_r+0xf88>
8111f1f4:	b880040c 	andi	r2,r23,16
8111f1f8:	10019726 	beq	r2,zero,8111f858 <_strtod_r+0x154c>
8111f1fc:	05c1880e 	bge	zero,r23,8111f820 <_strtod_r+0x1514>
8111f200:	00c01a84 	movi	r3,106
8111f204:	d8c00915 	stw	r3,36(sp)
8111f208:	04e04534 	movhi	r19,33044
8111f20c:	9cfa4a04 	addi	r19,r19,-5848
8111f210:	8807883a 	mov	r3,r17
8111f214:	9005883a 	mov	r2,r18
8111f218:	8023883a 	mov	r17,r16
8111f21c:	0009883a 	mov	r4,zero
8111f220:	9821883a 	mov	r16,r19
8111f224:	da400a15 	stw	r9,40(sp)
8111f228:	1827883a 	mov	r19,r3
8111f22c:	b980004c 	andi	r6,r23,1
8111f230:	30000626 	beq	r6,zero,8111f24c <_strtod_r+0xf40>
8111f234:	81800017 	ldw	r6,0(r16)
8111f238:	81c00117 	ldw	r7,4(r16)
8111f23c:	1009883a 	mov	r4,r2
8111f240:	180b883a 	mov	r5,r3
8111f244:	1110f940 	call	81110f94 <__muldf3>
8111f248:	01000044 	movi	r4,1
8111f24c:	b82fd07a 	srai	r23,r23,1
8111f250:	84000204 	addi	r16,r16,8
8111f254:	b83ff51e 	bne	r23,zero,8111f22c <__reset+0xfb0ff22c>
8111f258:	21003fcc 	andi	r4,r4,255
8111f25c:	8821883a 	mov	r16,r17
8111f260:	da400a17 	ldw	r9,40(sp)
8111f264:	9823883a 	mov	r17,r19
8111f268:	2001a51e 	bne	r4,zero,8111f900 <_strtod_r+0x15f4>
8111f26c:	d9000917 	ldw	r4,36(sp)
8111f270:	20016d1e 	bne	r4,zero,8111f828 <_strtod_r+0x151c>
8111f274:	000d883a 	mov	r6,zero
8111f278:	000f883a 	mov	r7,zero
8111f27c:	9009883a 	mov	r4,r18
8111f280:	880b883a 	mov	r5,r17
8111f284:	da401315 	stw	r9,76(sp)
8111f288:	11263bc0 	call	811263bc <__eqdf2>
8111f28c:	da401317 	ldw	r9,76(sp)
8111f290:	103df41e 	bne	r2,zero,8111ea64 <__reset+0xfb0fea64>
8111f294:	00800884 	movi	r2,34
8111f298:	80800015 	stw	r2,0(r16)
8111f29c:	002b883a 	mov	r21,zero
8111f2a0:	002d883a 	mov	r22,zero
8111f2a4:	003ce306 	br	8111e634 <__reset+0xfb0fe634>
8111f2a8:	055387c4 	movi	r21,19999
8111f2ac:	003d6b06 	br	8111e85c <__reset+0xfb0fe85c>
8111f2b0:	0440d434 	movhi	r17,848
8111f2b4:	1c63883a 	add	r17,r3,r17
8111f2b8:	882d883a 	mov	r22,r17
8111f2bc:	003ebe06 	br	8111edb8 <__reset+0xfb0fedb8>
8111f2c0:	14403fcc 	andi	r17,r2,255
8111f2c4:	8c40201c 	xori	r17,r17,128
8111f2c8:	8c7fe004 	addi	r17,r17,-128
8111f2cc:	dd400817 	ldw	r21,32(sp)
8111f2d0:	0027883a 	mov	r19,zero
8111f2d4:	0039883a 	mov	fp,zero
8111f2d8:	002d883a 	mov	r22,zero
8111f2dc:	003c9906 	br	8111e544 <__reset+0xfb0fe544>
8111f2e0:	00c00944 	movi	r3,37
8111f2e4:	1a47c83a 	sub	r3,r3,r9
8111f2e8:	1d7d8c16 	blt	r3,r21,8111e91c <__reset+0xfb0fe91c>
8111f2ec:	1261c83a 	sub	r16,r2,r9
8111f2f0:	800490fa 	slli	r2,r16,3
8111f2f4:	04e04534 	movhi	r19,33044
8111f2f8:	9cfa0a04 	addi	r19,r19,-6104
8111f2fc:	9885883a 	add	r2,r19,r2
8111f300:	11000017 	ldw	r4,0(r2)
8111f304:	11400117 	ldw	r5,4(r2)
8111f308:	900d883a 	mov	r6,r18
8111f30c:	880f883a 	mov	r7,r17
8111f310:	1110f940 	call	81110f94 <__muldf3>
8111f314:	ac0dc83a 	sub	r6,r21,r16
8111f318:	300c90fa 	slli	r6,r6,3
8111f31c:	1009883a 	mov	r4,r2
8111f320:	180b883a 	mov	r5,r3
8111f324:	9985883a 	add	r2,r19,r6
8111f328:	11800017 	ldw	r6,0(r2)
8111f32c:	11c00117 	ldw	r7,4(r2)
8111f330:	1110f940 	call	81110f94 <__muldf3>
8111f334:	102b883a 	mov	r21,r2
8111f338:	182d883a 	mov	r22,r3
8111f33c:	003cbd06 	br	8111e634 <__reset+0xfb0fe634>
8111f340:	b811883a 	mov	r8,r23
8111f344:	003e8606 	br	8111ed60 <__reset+0xfb0fed60>
8111f348:	d8000d15 	stw	zero,52(sp)
8111f34c:	05cffc34 	movhi	r23,16368
8111f350:	003e8006 	br	8111ed54 <__reset+0xfb0fed54>
8111f354:	883f011e 	bne	r17,zero,8111ef5c <__reset+0xfb0fef5c>
8111f358:	dd000a15 	stw	r20,40(sp)
8111f35c:	dd001217 	ldw	r20,72(sp)
8111f360:	a811883a 	mov	r8,r21
8111f364:	00800884 	movi	r2,34
8111f368:	80800015 	stw	r2,0(r16)
8111f36c:	002b883a 	mov	r21,zero
8111f370:	d8800517 	ldw	r2,20(sp)
8111f374:	002d883a 	mov	r22,zero
8111f378:	003f0a06 	br	8111efa4 <__reset+0xfb0fefa4>
8111f37c:	d9800517 	ldw	r6,20(sp)
8111f380:	30000826 	beq	r6,zero,8111f3a4 <_strtod_r+0x1098>
8111f384:	01400d44 	movi	r5,53
8111f388:	d9000204 	addi	r4,sp,8
8111f38c:	d8801315 	stw	r2,76(sp)
8111f390:	111d9a00 	call	8111d9a0 <__copybits>
8111f394:	d9400517 	ldw	r5,20(sp)
8111f398:	8009883a 	mov	r4,r16
8111f39c:	111caf80 	call	8111caf8 <_Bfree>
8111f3a0:	d8801317 	ldw	r2,76(sp)
8111f3a4:	00c00184 	movi	r3,6
8111f3a8:	1d400f36 	bltu	r3,r21,8111f3e8 <_strtod_r+0x10dc>
8111f3ac:	a82a90ba 	slli	r21,r21,2
8111f3b0:	00e044b4 	movhi	r3,33042
8111f3b4:	18fcf104 	addi	r3,r3,-3132
8111f3b8:	a8eb883a 	add	r21,r21,r3
8111f3bc:	a8c00017 	ldw	r3,0(r21)
8111f3c0:	1800683a 	jmp	r3
8111f3c4:	8111f440 	call	88111f44 <__reset+0x20f1f44>
8111f3c8:	8111f418 	cmpnei	r4,r16,18384
8111f3cc:	8111f3fc 	xorhi	r4,r16,18383
8111f3d0:	8111f3e0 	cmpeqi	r4,r16,18383
8111f3d4:	8111f408 	cmpgei	r4,r16,18384
8111f3d8:	8111f418 	cmpnei	r4,r16,18384
8111f3dc:	8111f440 	call	88111f44 <__reset+0x20f1f44>
8111f3e0:	045ffc34 	movhi	r17,32752
8111f3e4:	0025883a 	mov	r18,zero
8111f3e8:	1080020c 	andi	r2,r2,8
8111f3ec:	902b883a 	mov	r21,r18
8111f3f0:	103c8f26 	beq	r2,zero,8111e630 <__reset+0xfb0fe630>
8111f3f4:	8da00034 	orhi	r22,r17,32768
8111f3f8:	003c8e06 	br	8111e634 <__reset+0xfb0fe634>
8111f3fc:	dc800217 	ldw	r18,8(sp)
8111f400:	dc400317 	ldw	r17,12(sp)
8111f404:	003ff806 	br	8111f3e8 <__reset+0xfb0ff3e8>
8111f408:	04600034 	movhi	r17,32768
8111f40c:	8c7fffc4 	addi	r17,r17,-1
8111f410:	04bfffc4 	movi	r18,-1
8111f414:	003ff406 	br	8111f3e8 <__reset+0xfb0ff3e8>
8111f418:	d8c00417 	ldw	r3,16(sp)
8111f41c:	dc400317 	ldw	r17,12(sp)
8111f420:	013ffc34 	movhi	r4,65520
8111f424:	18c10cc4 	addi	r3,r3,1075
8111f428:	1806953a 	slli	r3,r3,20
8111f42c:	213fffc4 	addi	r4,r4,-1
8111f430:	8922703a 	and	r17,r17,r4
8111f434:	dc800217 	ldw	r18,8(sp)
8111f438:	88e2b03a 	or	r17,r17,r3
8111f43c:	003fea06 	br	8111f3e8 <__reset+0xfb0ff3e8>
8111f440:	0023883a 	mov	r17,zero
8111f444:	0025883a 	mov	r18,zero
8111f448:	003fe706 	br	8111f3e8 <__reset+0xfb0ff3e8>
8111f44c:	01800044 	movi	r6,1
8111f450:	50d5883a 	add	r10,r10,r3
8111f454:	2a4b883a 	add	r5,r5,r9
8111f458:	19811a26 	beq	r3,r6,8111f8c4 <_strtod_r+0x15b8>
8111f45c:	01800204 	movi	r6,8
8111f460:	01c00404 	movi	r7,16
8111f464:	4a400044 	addi	r9,r9,1
8111f468:	48bfffc4 	addi	r2,r9,-1
8111f46c:	30801616 	blt	r6,r2,8111f4c8 <_strtod_r+0x11bc>
8111f470:	e70002a4 	muli	fp,fp,10
8111f474:	497ffb1e 	bne	r9,r5,8111f464 <__reset+0xfb0ff464>
8111f478:	d9800617 	ldw	r6,24(sp)
8111f47c:	4a400044 	addi	r9,r9,1
8111f480:	00c00204 	movi	r3,8
8111f484:	19400c0e 	bge	r3,r5,8111f4b8 <_strtod_r+0x11ac>
8111f488:	00800404 	movi	r2,16
8111f48c:	000b883a 	mov	r5,zero
8111f490:	127ea316 	blt	r2,r9,8111ef20 <__reset+0xfb0fef20>
8111f494:	988002a4 	muli	r2,r19,10
8111f498:	20a7883a 	add	r19,r4,r2
8111f49c:	003ea006 	br	8111ef20 <__reset+0xfb0fef20>
8111f4a0:	d8800617 	ldw	r2,24(sp)
8111f4a4:	8c7ff404 	addi	r17,r17,-48
8111f4a8:	2a800044 	addi	r10,r5,1
8111f4ac:	d8800815 	stw	r2,32(sp)
8111f4b0:	100d883a 	mov	r6,r2
8111f4b4:	02400044 	movi	r9,1
8111f4b8:	e08002a4 	muli	r2,fp,10
8111f4bc:	000b883a 	mov	r5,zero
8111f4c0:	88b9883a 	add	fp,r17,r2
8111f4c4:	003e9606 	br	8111ef20 <__reset+0xfb0fef20>
8111f4c8:	3a7fea16 	blt	r7,r9,8111f474 <__reset+0xfb0ff474>
8111f4cc:	9cc002a4 	muli	r19,r19,10
8111f4d0:	003fe806 	br	8111f474 <__reset+0xfb0ff474>
8111f4d4:	00bffa84 	movi	r2,-22
8111f4d8:	a8bd1016 	blt	r21,r2,8111e91c <__reset+0xfb0fe91c>
8111f4dc:	a82a90fa 	slli	r21,r21,3
8111f4e0:	00a04534 	movhi	r2,33044
8111f4e4:	10ba0a04 	addi	r2,r2,-6104
8111f4e8:	1545c83a 	sub	r2,r2,r21
8111f4ec:	11800017 	ldw	r6,0(r2)
8111f4f0:	11c00117 	ldw	r7,4(r2)
8111f4f4:	9009883a 	mov	r4,r18
8111f4f8:	880b883a 	mov	r5,r17
8111f4fc:	1125acc0 	call	81125acc <__divdf3>
8111f500:	102b883a 	mov	r21,r2
8111f504:	182d883a 	mov	r22,r3
8111f508:	003c4a06 	br	8111e634 <__reset+0xfb0fe634>
8111f50c:	dd000a15 	stw	r20,40(sp)
8111f510:	a811883a 	mov	r8,r21
8111f514:	dd001217 	ldw	r20,72(sp)
8111f518:	003e9e06 	br	8111ef94 <__reset+0xfb0fef94>
8111f51c:	01604534 	movhi	r5,33044
8111f520:	d9000617 	ldw	r4,24(sp)
8111f524:	297a3c04 	addi	r5,r5,-5904
8111f528:	01c00644 	movi	r7,25
8111f52c:	00000b06 	br	8111f55c <_strtod_r+0x1250>
8111f530:	21000044 	addi	r4,r4,1
8111f534:	20800003 	ldbu	r2,0(r4)
8111f538:	10ffefc4 	addi	r3,r2,-65
8111f53c:	10803fcc 	andi	r2,r2,255
8111f540:	1080201c 	xori	r2,r2,128
8111f544:	18c03fcc 	andi	r3,r3,255
8111f548:	10bfe004 	addi	r2,r2,-128
8111f54c:	38c00136 	bltu	r7,r3,8111f554 <_strtod_r+0x1248>
8111f550:	10800804 	addi	r2,r2,32
8111f554:	29400044 	addi	r5,r5,1
8111f558:	11bbbb1e 	bne	r2,r6,8111e448 <__reset+0xfb0fe448>
8111f55c:	29800007 	ldb	r6,0(r5)
8111f560:	303ff31e 	bne	r6,zero,8111f530 <__reset+0xfb0ff530>
8111f564:	01a04534 	movhi	r6,33044
8111f568:	d9000615 	stw	r4,24(sp)
8111f56c:	31ba3d04 	addi	r6,r6,-5900
8111f570:	200b883a 	mov	r5,r4
8111f574:	02000644 	movi	r8,25
8111f578:	00000a06 	br	8111f5a4 <_strtod_r+0x1298>
8111f57c:	28800003 	ldbu	r2,0(r5)
8111f580:	10ffefc4 	addi	r3,r2,-65
8111f584:	10803fcc 	andi	r2,r2,255
8111f588:	1080201c 	xori	r2,r2,128
8111f58c:	18c03fcc 	andi	r3,r3,255
8111f590:	10bfe004 	addi	r2,r2,-128
8111f594:	40c00136 	bltu	r8,r3,8111f59c <_strtod_r+0x1290>
8111f598:	10800804 	addi	r2,r2,32
8111f59c:	31800044 	addi	r6,r6,1
8111f5a0:	11c0711e 	bne	r2,r7,8111f768 <_strtod_r+0x145c>
8111f5a4:	31c00007 	ldb	r7,0(r6)
8111f5a8:	29400044 	addi	r5,r5,1
8111f5ac:	383ff31e 	bne	r7,zero,8111f57c <__reset+0xfb0ff57c>
8111f5b0:	d9400615 	stw	r5,24(sp)
8111f5b4:	045ffc34 	movhi	r17,32752
8111f5b8:	0025883a 	mov	r18,zero
8111f5bc:	003c1b06 	br	8111e62c <__reset+0xfb0fe62c>
8111f5c0:	000b883a 	mov	r5,zero
8111f5c4:	003ccc06 	br	8111e8f8 <__reset+0xfb0fe8f8>
8111f5c8:	d9400e17 	ldw	r5,56(sp)
8111f5cc:	dd000a15 	stw	r20,40(sp)
8111f5d0:	00800434 	movhi	r2,16
8111f5d4:	a811883a 	mov	r8,r21
8111f5d8:	dd001217 	ldw	r20,72(sp)
8111f5dc:	dd401117 	ldw	r21,68(sp)
8111f5e0:	dd801017 	ldw	r22,64(sp)
8111f5e4:	10bfffc4 	addi	r2,r2,-1
8111f5e8:	28005626 	beq	r5,zero,8111f744 <_strtod_r+0x1438>
8111f5ec:	8886703a 	and	r3,r17,r2
8111f5f0:	18807826 	beq	r3,r2,8111f7d4 <_strtod_r+0x14c8>
8111f5f4:	d8c00b17 	ldw	r3,44(sp)
8111f5f8:	18005726 	beq	r3,zero,8111f758 <_strtod_r+0x144c>
8111f5fc:	1c44703a 	and	r2,r3,r17
8111f600:	10000f26 	beq	r2,zero,8111f640 <_strtod_r+0x1334>
8111f604:	d9000e17 	ldw	r4,56(sp)
8111f608:	d9800917 	ldw	r6,36(sp)
8111f60c:	20005e26 	beq	r4,zero,8111f788 <_strtod_r+0x147c>
8111f610:	9009883a 	mov	r4,r18
8111f614:	880b883a 	mov	r5,r17
8111f618:	da001315 	stw	r8,76(sp)
8111f61c:	111e2a00 	call	8111e2a0 <sulp>
8111f620:	100d883a 	mov	r6,r2
8111f624:	180f883a 	mov	r7,r3
8111f628:	9009883a 	mov	r4,r18
8111f62c:	880b883a 	mov	r5,r17
8111f630:	11252180 	call	81125218 <__adddf3>
8111f634:	da001317 	ldw	r8,76(sp)
8111f638:	102b883a 	mov	r21,r2
8111f63c:	182d883a 	mov	r22,r3
8111f640:	d8c00917 	ldw	r3,36(sp)
8111f644:	18000f26 	beq	r3,zero,8111f684 <_strtod_r+0x1378>
8111f648:	a809883a 	mov	r4,r21
8111f64c:	b00b883a 	mov	r5,r22
8111f650:	000d883a 	mov	r6,zero
8111f654:	01ce5434 	movhi	r7,14672
8111f658:	da001315 	stw	r8,76(sp)
8111f65c:	1110f940 	call	81110f94 <__muldf3>
8111f660:	102b883a 	mov	r21,r2
8111f664:	182d883a 	mov	r22,r3
8111f668:	da001317 	ldw	r8,76(sp)
8111f66c:	1800051e 	bne	r3,zero,8111f684 <_strtod_r+0x1378>
8111f670:	d8800517 	ldw	r2,20(sp)
8111f674:	a83e4b1e 	bne	r21,zero,8111efa4 <__reset+0xfb0fefa4>
8111f678:	00c00884 	movi	r3,34
8111f67c:	80c00015 	stw	r3,0(r16)
8111f680:	003e4806 	br	8111efa4 <__reset+0xfb0fefa4>
8111f684:	d8800517 	ldw	r2,20(sp)
8111f688:	003e4606 	br	8111efa4 <__reset+0xfb0fefa4>
8111f68c:	d9000e17 	ldw	r4,56(sp)
8111f690:	dd000a15 	stw	r20,40(sp)
8111f694:	a811883a 	mov	r8,r21
8111f698:	dd001217 	ldw	r20,72(sp)
8111f69c:	dd401117 	ldw	r21,68(sp)
8111f6a0:	dd801017 	ldw	r22,64(sp)
8111f6a4:	203fe61e 	bne	r4,zero,8111f640 <__reset+0xfb0ff640>
8111f6a8:	903fe51e 	bne	r18,zero,8111f640 <__reset+0xfb0ff640>
8111f6ac:	00800434 	movhi	r2,16
8111f6b0:	10bfffc4 	addi	r2,r2,-1
8111f6b4:	8884703a 	and	r2,r17,r2
8111f6b8:	103fe11e 	bne	r2,zero,8111f640 <__reset+0xfb0ff640>
8111f6bc:	8ddffc2c 	andhi	r23,r17,32752
8111f6c0:	0081ac34 	movhi	r2,1712
8111f6c4:	15ffde2e 	bgeu	r2,r23,8111f640 <__reset+0xfb0ff640>
8111f6c8:	40800517 	ldw	r2,20(r8)
8111f6cc:	1000031e 	bne	r2,zero,8111f6dc <_strtod_r+0x13d0>
8111f6d0:	40800417 	ldw	r2,16(r8)
8111f6d4:	00c00044 	movi	r3,1
8111f6d8:	18bfd90e 	bge	r3,r2,8111f640 <__reset+0xfb0ff640>
8111f6dc:	400b883a 	mov	r5,r8
8111f6e0:	01800044 	movi	r6,1
8111f6e4:	8009883a 	mov	r4,r16
8111f6e8:	111d1f80 	call	8111d1f8 <__lshift>
8111f6ec:	980b883a 	mov	r5,r19
8111f6f0:	1009883a 	mov	r4,r2
8111f6f4:	d8801315 	stw	r2,76(sp)
8111f6f8:	111d3480 	call	8111d348 <__mcmp>
8111f6fc:	da001317 	ldw	r8,76(sp)
8111f700:	00bfcf0e 	bge	zero,r2,8111f640 <__reset+0xfb0ff640>
8111f704:	d8c00917 	ldw	r3,36(sp)
8111f708:	18005c26 	beq	r3,zero,8111f87c <_strtod_r+0x1570>
8111f70c:	0081ac34 	movhi	r2,1712
8111f710:	15c05a16 	blt	r2,r23,8111f87c <_strtod_r+0x1570>
8111f714:	0080dc34 	movhi	r2,880
8111f718:	15ffcb16 	blt	r2,r23,8111f648 <__reset+0xfb0ff648>
8111f71c:	003f1106 	br	8111f364 <__reset+0xfb0ff364>
8111f720:	002d883a 	mov	r22,zero
8111f724:	022ff834 	movhi	r8,49120
8111f728:	d8000d15 	stw	zero,52(sp)
8111f72c:	05cff834 	movhi	r23,16352
8111f730:	003ded06 	br	8111eee8 <__reset+0xfb0feee8>
8111f734:	0440d434 	movhi	r17,848
8111f738:	1c63883a 	add	r17,r3,r17
8111f73c:	d8000915 	stw	zero,36(sp)
8111f740:	003cc806 	br	8111ea64 <__reset+0xfb0fea64>
8111f744:	8884703a 	and	r2,r17,r2
8111f748:	103faa1e 	bne	r2,zero,8111f5f4 <__reset+0xfb0ff5f4>
8111f74c:	903fa91e 	bne	r18,zero,8111f5f4 <__reset+0xfb0ff5f4>
8111f750:	8ddffc2c 	andhi	r23,r17,32752
8111f754:	003feb06 	br	8111f704 <__reset+0xfb0ff704>
8111f758:	d8c00d17 	ldw	r3,52(sp)
8111f75c:	1cae703a 	and	r23,r3,r18
8111f760:	b83fb726 	beq	r23,zero,8111f640 <__reset+0xfb0ff640>
8111f764:	003fa706 	br	8111f604 <__reset+0xfb0ff604>
8111f768:	21000044 	addi	r4,r4,1
8111f76c:	d9000615 	stw	r4,24(sp)
8111f770:	003f9006 	br	8111f5b4 <__reset+0xfb0ff5b4>
8111f774:	01604534 	movhi	r5,33044
8111f778:	297a0004 	addi	r5,r5,-6144
8111f77c:	d9400915 	stw	r5,36(sp)
8111f780:	0027883a 	mov	r19,zero
8111f784:	003ca206 	br	8111ea10 <__reset+0xfb0fea10>
8111f788:	9009883a 	mov	r4,r18
8111f78c:	880b883a 	mov	r5,r17
8111f790:	da001315 	stw	r8,76(sp)
8111f794:	111e2a00 	call	8111e2a0 <sulp>
8111f798:	100d883a 	mov	r6,r2
8111f79c:	180f883a 	mov	r7,r3
8111f7a0:	9009883a 	mov	r4,r18
8111f7a4:	880b883a 	mov	r5,r17
8111f7a8:	11266140 	call	81126614 <__subdf3>
8111f7ac:	000d883a 	mov	r6,zero
8111f7b0:	000f883a 	mov	r7,zero
8111f7b4:	1009883a 	mov	r4,r2
8111f7b8:	180b883a 	mov	r5,r3
8111f7bc:	102b883a 	mov	r21,r2
8111f7c0:	182d883a 	mov	r22,r3
8111f7c4:	11263bc0 	call	811263bc <__eqdf2>
8111f7c8:	da001317 	ldw	r8,76(sp)
8111f7cc:	103ee526 	beq	r2,zero,8111f364 <__reset+0xfb0ff364>
8111f7d0:	003f9b06 	br	8111f640 <__reset+0xfb0ff640>
8111f7d4:	d8800917 	ldw	r2,36(sp)
8111f7d8:	10002226 	beq	r2,zero,8111f864 <_strtod_r+0x1558>
8111f7dc:	889ffc2c 	andhi	r2,r17,32752
8111f7e0:	00c1a834 	movhi	r3,1696
8111f7e4:	18801f36 	bltu	r3,r2,8111f864 <_strtod_r+0x1558>
8111f7e8:	1004d53a 	srli	r2,r2,20
8111f7ec:	00c01ac4 	movi	r3,107
8111f7f0:	1887c83a 	sub	r3,r3,r2
8111f7f4:	00bfffc4 	movi	r2,-1
8111f7f8:	10c4983a 	sll	r2,r2,r3
8111f7fc:	14bf7d1e 	bne	r2,r18,8111f5f4 <__reset+0xfb0ff5f4>
8111f800:	00dffc34 	movhi	r3,32752
8111f804:	18ffffc4 	addi	r3,r3,-1
8111f808:	88c03526 	beq	r17,r3,8111f8e0 <_strtod_r+0x15d4>
8111f80c:	8c5ffc2c 	andhi	r17,r17,32752
8111f810:	00800434 	movhi	r2,16
8111f814:	002b883a 	mov	r21,zero
8111f818:	88ad883a 	add	r22,r17,r2
8111f81c:	003f8806 	br	8111f640 <__reset+0xfb0ff640>
8111f820:	01401a84 	movi	r5,106
8111f824:	d9400915 	stw	r5,36(sp)
8111f828:	8ddffc2c 	andhi	r23,r17,32752
8111f82c:	b82ed53a 	srli	r23,r23,20
8111f830:	00801ac4 	movi	r2,107
8111f834:	15c5c83a 	sub	r2,r2,r23
8111f838:	00be8e0e 	bge	zero,r2,8111f274 <__reset+0xfb0ff274>
8111f83c:	00c007c4 	movi	r3,31
8111f840:	18800a0e 	bge	r3,r2,8111f86c <_strtod_r+0x1560>
8111f844:	00c00d04 	movi	r3,52
8111f848:	0025883a 	mov	r18,zero
8111f84c:	1880270e 	bge	r3,r2,8111f8ec <_strtod_r+0x15e0>
8111f850:	0440dc34 	movhi	r17,880
8111f854:	003e8706 	br	8111f274 <__reset+0xfb0ff274>
8111f858:	d8000915 	stw	zero,36(sp)
8111f85c:	05fe6a16 	blt	zero,r23,8111f208 <__reset+0xfb0ff208>
8111f860:	003e8406 	br	8111f274 <__reset+0xfb0ff274>
8111f864:	00bfffc4 	movi	r2,-1
8111f868:	003fe406 	br	8111f7fc <__reset+0xfb0ff7fc>
8111f86c:	00ffffc4 	movi	r3,-1
8111f870:	1884983a 	sll	r2,r3,r2
8111f874:	14a4703a 	and	r18,r2,r18
8111f878:	003e7e06 	br	8111f274 <__reset+0xfb0ff274>
8111f87c:	00bffc34 	movhi	r2,65520
8111f880:	b8af883a 	add	r23,r23,r2
8111f884:	057fffc4 	movi	r21,-1
8111f888:	00800434 	movhi	r2,16
8111f88c:	1545883a 	add	r2,r2,r21
8111f890:	b8acb03a 	or	r22,r23,r2
8111f894:	003f6a06 	br	8111f640 <__reset+0xfb0ff640>
8111f898:	01604534 	movhi	r5,33044
8111f89c:	297a4004 	addi	r5,r5,-5888
8111f8a0:	d9800204 	addi	r6,sp,8
8111f8a4:	d9000604 	addi	r4,sp,24
8111f8a8:	1123c980 	call	81123c98 <__hexnan>
8111f8ac:	00c00144 	movi	r3,5
8111f8b0:	10fb5c1e 	bne	r2,r3,8111e624 <__reset+0xfb0fe624>
8111f8b4:	dc400317 	ldw	r17,12(sp)
8111f8b8:	dc800217 	ldw	r18,8(sp)
8111f8bc:	8c5ffc34 	orhi	r17,r17,32752
8111f8c0:	003b5a06 	br	8111e62c <__reset+0xfb0fe62c>
8111f8c4:	480b883a 	mov	r5,r9
8111f8c8:	d9800617 	ldw	r6,24(sp)
8111f8cc:	4a400044 	addi	r9,r9,1
8111f8d0:	003eeb06 	br	8111f480 <__reset+0xfb0ff480>
8111f8d4:	1025883a 	mov	r18,r2
8111f8d8:	1823883a 	mov	r17,r3
8111f8dc:	003c4c06 	br	8111ea10 <__reset+0xfb0fea10>
8111f8e0:	00ffffc4 	movi	r3,-1
8111f8e4:	10ffc91e 	bne	r2,r3,8111f80c <__reset+0xfb0ff80c>
8111f8e8:	003da906 	br	8111ef90 <__reset+0xfb0fef90>
8111f8ec:	10bff804 	addi	r2,r2,-32
8111f8f0:	00ffffc4 	movi	r3,-1
8111f8f4:	1884983a 	sll	r2,r3,r2
8111f8f8:	1462703a 	and	r17,r2,r17
8111f8fc:	003e5d06 	br	8111f274 <__reset+0xfb0ff274>
8111f900:	1025883a 	mov	r18,r2
8111f904:	1823883a 	mov	r17,r3
8111f908:	003e5806 	br	8111f26c <__reset+0xfb0ff26c>

8111f90c <strtod>:
8111f90c:	00a04534 	movhi	r2,33044
8111f910:	1082cb04 	addi	r2,r2,2860
8111f914:	280d883a 	mov	r6,r5
8111f918:	200b883a 	mov	r5,r4
8111f91c:	11000017 	ldw	r4,0(r2)
8111f920:	111e30c1 	jmpi	8111e30c <_strtod_r>

8111f924 <strtof>:
8111f924:	defffb04 	addi	sp,sp,-20
8111f928:	de00012e 	bgeu	sp,et,8111f930 <strtof+0xc>
8111f92c:	003b68fa 	trap	3
8111f930:	dcc00315 	stw	r19,12(sp)
8111f934:	04e04534 	movhi	r19,33044
8111f938:	9cc2cb04 	addi	r19,r19,2860
8111f93c:	280d883a 	mov	r6,r5
8111f940:	200b883a 	mov	r5,r4
8111f944:	99000017 	ldw	r4,0(r19)
8111f948:	dfc00415 	stw	ra,16(sp)
8111f94c:	dc800215 	stw	r18,8(sp)
8111f950:	dc400115 	stw	r17,4(sp)
8111f954:	dc000015 	stw	r16,0(sp)
8111f958:	111e30c0 	call	8111e30c <_strtod_r>
8111f95c:	1009883a 	mov	r4,r2
8111f960:	180b883a 	mov	r5,r3
8111f964:	1025883a 	mov	r18,r2
8111f968:	1823883a 	mov	r17,r3
8111f96c:	11117cc0 	call	811117cc <__truncdfsf2>
8111f970:	000b883a 	mov	r5,zero
8111f974:	1009883a 	mov	r4,r2
8111f978:	1021883a 	mov	r16,r2
8111f97c:	112501c0 	call	8112501c <__eqsf2>
8111f980:	1000111e 	bne	r2,zero,8111f9c8 <strtof+0xa4>
8111f984:	000d883a 	mov	r6,zero
8111f988:	000f883a 	mov	r7,zero
8111f98c:	9009883a 	mov	r4,r18
8111f990:	880b883a 	mov	r5,r17
8111f994:	11263bc0 	call	811263bc <__eqdf2>
8111f998:	10000b26 	beq	r2,zero,8111f9c8 <strtof+0xa4>
8111f99c:	98800017 	ldw	r2,0(r19)
8111f9a0:	00c00884 	movi	r3,34
8111f9a4:	10c00015 	stw	r3,0(r2)
8111f9a8:	8005883a 	mov	r2,r16
8111f9ac:	dfc00417 	ldw	ra,16(sp)
8111f9b0:	dcc00317 	ldw	r19,12(sp)
8111f9b4:	dc800217 	ldw	r18,8(sp)
8111f9b8:	dc400117 	ldw	r17,4(sp)
8111f9bc:	dc000017 	ldw	r16,0(sp)
8111f9c0:	dec00504 	addi	sp,sp,20
8111f9c4:	f800283a 	ret
8111f9c8:	015fe034 	movhi	r5,32640
8111f9cc:	297fffc4 	addi	r5,r5,-1
8111f9d0:	8009883a 	mov	r4,r16
8111f9d4:	11250940 	call	81125094 <__gesf2>
8111f9d8:	0080070e 	bge	zero,r2,8111f9f8 <strtof+0xd4>
8111f9dc:	01dffc34 	movhi	r7,32752
8111f9e0:	39ffffc4 	addi	r7,r7,-1
8111f9e4:	01bfffc4 	movi	r6,-1
8111f9e8:	9009883a 	mov	r4,r18
8111f9ec:	880b883a 	mov	r5,r17
8111f9f0:	11264440 	call	81126444 <__gedf2>
8111f9f4:	00bfe90e 	bge	zero,r2,8111f99c <__reset+0xfb0ff99c>
8111f9f8:	017fe034 	movhi	r5,65408
8111f9fc:	297fffc4 	addi	r5,r5,-1
8111fa00:	8009883a 	mov	r4,r16
8111fa04:	11251500 	call	81125150 <__lesf2>
8111fa08:	103fe70e 	bge	r2,zero,8111f9a8 <__reset+0xfb0ff9a8>
8111fa0c:	01fffc34 	movhi	r7,65520
8111fa10:	39ffffc4 	addi	r7,r7,-1
8111fa14:	01bfffc4 	movi	r6,-1
8111fa18:	9009883a 	mov	r4,r18
8111fa1c:	880b883a 	mov	r5,r17
8111fa20:	11265200 	call	81126520 <__ledf2>
8111fa24:	103fdd0e 	bge	r2,zero,8111f99c <__reset+0xfb0ff99c>
8111fa28:	003fdf06 	br	8111f9a8 <__reset+0xfb0ff9a8>

8111fa2c <_strtoll_r>:
8111fa2c:	00a04534 	movhi	r2,33044
8111fa30:	defff304 	addi	sp,sp,-52
8111fa34:	1082c904 	addi	r2,r2,2852
8111fa38:	de00012e 	bgeu	sp,et,8111fa40 <_strtoll_r+0x14>
8111fa3c:	003b68fa 	trap	3
8111fa40:	dc800515 	stw	r18,20(sp)
8111fa44:	14800017 	ldw	r18,0(r2)
8111fa48:	dd800915 	stw	r22,36(sp)
8111fa4c:	dd400815 	stw	r21,32(sp)
8111fa50:	dcc00615 	stw	r19,24(sp)
8111fa54:	d9000015 	stw	r4,0(sp)
8111fa58:	dfc00c15 	stw	ra,48(sp)
8111fa5c:	df000b15 	stw	fp,44(sp)
8111fa60:	ddc00a15 	stw	r23,40(sp)
8111fa64:	dd000715 	stw	r20,28(sp)
8111fa68:	dc400415 	stw	r17,16(sp)
8111fa6c:	dc000315 	stw	r16,12(sp)
8111fa70:	282d883a 	mov	r22,r5
8111fa74:	302b883a 	mov	r21,r6
8111fa78:	3827883a 	mov	r19,r7
8111fa7c:	2809883a 	mov	r4,r5
8111fa80:	24000003 	ldbu	r16,0(r4)
8111fa84:	24400044 	addi	r17,r4,1
8111fa88:	2007883a 	mov	r3,r4
8111fa8c:	9405883a 	add	r2,r18,r16
8111fa90:	10800043 	ldbu	r2,1(r2)
8111fa94:	8809883a 	mov	r4,r17
8111fa98:	1080020c 	andi	r2,r2,8
8111fa9c:	103ff81e 	bne	r2,zero,8111fa80 <__reset+0xfb0ffa80>
8111faa0:	00800b44 	movi	r2,45
8111faa4:	80807826 	beq	r16,r2,8111fc88 <_strtoll_r+0x25c>
8111faa8:	00800ac4 	movi	r2,43
8111faac:	80807a26 	beq	r16,r2,8111fc98 <_strtoll_r+0x26c>
8111fab0:	0039883a 	mov	fp,zero
8111fab4:	98004e26 	beq	r19,zero,8111fbf0 <_strtoll_r+0x1c4>
8111fab8:	00800404 	movi	r2,16
8111fabc:	98808226 	beq	r19,r2,8111fcc8 <_strtoll_r+0x29c>
8111fac0:	982fd7fa 	srai	r23,r19,31
8111fac4:	9829883a 	mov	r20,r19
8111fac8:	e0004f26 	beq	fp,zero,8111fc08 <_strtoll_r+0x1dc>
8111facc:	0017883a 	mov	r11,zero
8111fad0:	02a00034 	movhi	r10,32768
8111fad4:	5809883a 	mov	r4,r11
8111fad8:	500b883a 	mov	r5,r10
8111fadc:	a00d883a 	mov	r6,r20
8111fae0:	b80f883a 	mov	r7,r23
8111fae4:	da800215 	stw	r10,8(sp)
8111fae8:	dac00115 	stw	r11,4(sp)
8111faec:	11249280 	call	81124928 <__umoddi3>
8111faf0:	dac00117 	ldw	r11,4(sp)
8111faf4:	da800217 	ldw	r10,8(sp)
8111faf8:	a00d883a 	mov	r6,r20
8111fafc:	5809883a 	mov	r4,r11
8111fb00:	500b883a 	mov	r5,r10
8111fb04:	b80f883a 	mov	r7,r23
8111fb08:	d8800115 	stw	r2,4(sp)
8111fb0c:	11243a80 	call	811243a8 <__udivdi3>
8111fb10:	9409883a 	add	r4,r18,r16
8111fb14:	21000043 	ldbu	r4,1(r4)
8111fb18:	1019883a 	mov	r12,r2
8111fb1c:	880b883a 	mov	r5,r17
8111fb20:	2240010c 	andi	r9,r4,4
8111fb24:	0015883a 	mov	r10,zero
8111fb28:	000d883a 	mov	r6,zero
8111fb2c:	000f883a 	mov	r7,zero
8111fb30:	03400044 	movi	r13,1
8111fb34:	02ffffc4 	movi	r11,-1
8111fb38:	da000117 	ldw	r8,4(sp)
8111fb3c:	48000d26 	beq	r9,zero,8111fb74 <_strtoll_r+0x148>
8111fb40:	843ff404 	addi	r16,r16,-48
8111fb44:	84c0110e 	bge	r16,r19,8111fb8c <_strtoll_r+0x160>
8111fb48:	52c00426 	beq	r10,r11,8111fb5c <_strtoll_r+0x130>
8111fb4c:	19c00236 	bltu	r3,r7,8111fb58 <_strtoll_r+0x12c>
8111fb50:	38c0311e 	bne	r7,r3,8111fc18 <_strtoll_r+0x1ec>
8111fb54:	6180302e 	bgeu	r12,r6,8111fc18 <_strtoll_r+0x1ec>
8111fb58:	02bfffc4 	movi	r10,-1
8111fb5c:	2c000003 	ldbu	r16,0(r5)
8111fb60:	29400044 	addi	r5,r5,1
8111fb64:	9409883a 	add	r4,r18,r16
8111fb68:	21000043 	ldbu	r4,1(r4)
8111fb6c:	2240010c 	andi	r9,r4,4
8111fb70:	483ff31e 	bne	r9,zero,8111fb40 <__reset+0xfb0ffb40>
8111fb74:	210000cc 	andi	r4,r4,3
8111fb78:	20000426 	beq	r4,zero,8111fb8c <_strtoll_r+0x160>
8111fb7c:	23403426 	beq	r4,r13,8111fc50 <_strtoll_r+0x224>
8111fb80:	008015c4 	movi	r2,87
8111fb84:	80a1c83a 	sub	r16,r16,r2
8111fb88:	84ffef16 	blt	r16,r19,8111fb48 <__reset+0xfb0ffb48>
8111fb8c:	00bfffc4 	movi	r2,-1
8111fb90:	50803426 	beq	r10,r2,8111fc64 <_strtoll_r+0x238>
8111fb94:	e0000426 	beq	fp,zero,8111fba8 <_strtoll_r+0x17c>
8111fb98:	018dc83a 	sub	r6,zero,r6
8111fb9c:	3004c03a 	cmpne	r2,r6,zero
8111fba0:	01e1c83a 	sub	r16,zero,r7
8111fba4:	808fc83a 	sub	r7,r16,r2
8111fba8:	3005883a 	mov	r2,r6
8111fbac:	3807883a 	mov	r3,r7
8111fbb0:	a8000326 	beq	r21,zero,8111fbc0 <_strtoll_r+0x194>
8111fbb4:	5000321e 	bne	r10,zero,8111fc80 <_strtoll_r+0x254>
8111fbb8:	b00b883a 	mov	r5,r22
8111fbbc:	a9400015 	stw	r5,0(r21)
8111fbc0:	dfc00c17 	ldw	ra,48(sp)
8111fbc4:	df000b17 	ldw	fp,44(sp)
8111fbc8:	ddc00a17 	ldw	r23,40(sp)
8111fbcc:	dd800917 	ldw	r22,36(sp)
8111fbd0:	dd400817 	ldw	r21,32(sp)
8111fbd4:	dd000717 	ldw	r20,28(sp)
8111fbd8:	dcc00617 	ldw	r19,24(sp)
8111fbdc:	dc800517 	ldw	r18,20(sp)
8111fbe0:	dc400417 	ldw	r17,16(sp)
8111fbe4:	dc000317 	ldw	r16,12(sp)
8111fbe8:	dec00d04 	addi	sp,sp,52
8111fbec:	f800283a 	ret
8111fbf0:	00800c04 	movi	r2,48
8111fbf4:	80802c26 	beq	r16,r2,8111fca8 <_strtoll_r+0x27c>
8111fbf8:	05000284 	movi	r20,10
8111fbfc:	002f883a 	mov	r23,zero
8111fc00:	a027883a 	mov	r19,r20
8111fc04:	e03fb11e 	bne	fp,zero,8111facc <__reset+0xfb0ffacc>
8111fc08:	02a00034 	movhi	r10,32768
8111fc0c:	52bfffc4 	addi	r10,r10,-1
8111fc10:	02ffffc4 	movi	r11,-1
8111fc14:	003faf06 	br	8111fad4 <__reset+0xfb0ffad4>
8111fc18:	33000f26 	beq	r6,r12,8111fc58 <_strtoll_r+0x22c>
8111fc1c:	b985383a 	mul	r2,r23,r6
8111fc20:	3d0f383a 	mul	r7,r7,r20
8111fc24:	3508383a 	mulxuu	r4,r6,r20
8111fc28:	350d383a 	mul	r6,r6,r20
8111fc2c:	8013d7fa 	srai	r9,r16,31
8111fc30:	388f883a 	add	r7,r7,r2
8111fc34:	818d883a 	add	r6,r16,r6
8111fc38:	390f883a 	add	r7,r7,r4
8111fc3c:	3421803a 	cmpltu	r16,r6,r16
8111fc40:	49cf883a 	add	r7,r9,r7
8111fc44:	81cf883a 	add	r7,r16,r7
8111fc48:	02800044 	movi	r10,1
8111fc4c:	003fc306 	br	8111fb5c <__reset+0xfb0ffb5c>
8111fc50:	00800dc4 	movi	r2,55
8111fc54:	003fcb06 	br	8111fb84 <__reset+0xfb0ffb84>
8111fc58:	38fff01e 	bne	r7,r3,8111fc1c <__reset+0xfb0ffc1c>
8111fc5c:	443fbe16 	blt	r8,r16,8111fb58 <__reset+0xfb0ffb58>
8111fc60:	003fee06 	br	8111fc1c <__reset+0xfb0ffc1c>
8111fc64:	e0002426 	beq	fp,zero,8111fcf8 <_strtoll_r+0x2cc>
8111fc68:	0005883a 	mov	r2,zero
8111fc6c:	00e00034 	movhi	r3,32768
8111fc70:	d9800017 	ldw	r6,0(sp)
8111fc74:	01000884 	movi	r4,34
8111fc78:	31000015 	stw	r4,0(r6)
8111fc7c:	a83fd026 	beq	r21,zero,8111fbc0 <__reset+0xfb0ffbc0>
8111fc80:	297fffc4 	addi	r5,r5,-1
8111fc84:	003fcd06 	br	8111fbbc <__reset+0xfb0ffbbc>
8111fc88:	1c400084 	addi	r17,r3,2
8111fc8c:	1c000043 	ldbu	r16,1(r3)
8111fc90:	07000044 	movi	fp,1
8111fc94:	003f8706 	br	8111fab4 <__reset+0xfb0ffab4>
8111fc98:	1c400084 	addi	r17,r3,2
8111fc9c:	1c000043 	ldbu	r16,1(r3)
8111fca0:	0039883a 	mov	fp,zero
8111fca4:	003f8306 	br	8111fab4 <__reset+0xfb0ffab4>
8111fca8:	88800003 	ldbu	r2,0(r17)
8111fcac:	00c01604 	movi	r3,88
8111fcb0:	108037cc 	andi	r2,r2,223
8111fcb4:	10c00a26 	beq	r2,r3,8111fce0 <_strtoll_r+0x2b4>
8111fcb8:	05000204 	movi	r20,8
8111fcbc:	002f883a 	mov	r23,zero
8111fcc0:	a027883a 	mov	r19,r20
8111fcc4:	003f8006 	br	8111fac8 <__reset+0xfb0ffac8>
8111fcc8:	00800c04 	movi	r2,48
8111fccc:	80800e1e 	bne	r16,r2,8111fd08 <_strtoll_r+0x2dc>
8111fcd0:	88800003 	ldbu	r2,0(r17)
8111fcd4:	00c01604 	movi	r3,88
8111fcd8:	108037cc 	andi	r2,r2,223
8111fcdc:	10c00a1e 	bne	r2,r3,8111fd08 <_strtoll_r+0x2dc>
8111fce0:	05000404 	movi	r20,16
8111fce4:	8c000043 	ldbu	r16,1(r17)
8111fce8:	002f883a 	mov	r23,zero
8111fcec:	8c400084 	addi	r17,r17,2
8111fcf0:	a027883a 	mov	r19,r20
8111fcf4:	003f7406 	br	8111fac8 <__reset+0xfb0ffac8>
8111fcf8:	00e00034 	movhi	r3,32768
8111fcfc:	18ffffc4 	addi	r3,r3,-1
8111fd00:	5005883a 	mov	r2,r10
8111fd04:	003fda06 	br	8111fc70 <__reset+0xfb0ffc70>
8111fd08:	9829883a 	mov	r20,r19
8111fd0c:	002f883a 	mov	r23,zero
8111fd10:	003f6d06 	br	8111fac8 <__reset+0xfb0ffac8>

8111fd14 <_strtoul_r>:
8111fd14:	00a04534 	movhi	r2,33044
8111fd18:	defff604 	addi	sp,sp,-40
8111fd1c:	1082c904 	addi	r2,r2,2852
8111fd20:	de00012e 	bgeu	sp,et,8111fd28 <_strtoul_r+0x14>
8111fd24:	003b68fa 	trap	3
8111fd28:	dc800315 	stw	r18,12(sp)
8111fd2c:	14800017 	ldw	r18,0(r2)
8111fd30:	dd400615 	stw	r21,24(sp)
8111fd34:	dd000515 	stw	r20,20(sp)
8111fd38:	dcc00415 	stw	r19,16(sp)
8111fd3c:	2029883a 	mov	r20,r4
8111fd40:	dfc00915 	stw	ra,36(sp)
8111fd44:	ddc00815 	stw	r23,32(sp)
8111fd48:	dd800715 	stw	r22,28(sp)
8111fd4c:	dc400215 	stw	r17,8(sp)
8111fd50:	dc000115 	stw	r16,4(sp)
8111fd54:	2827883a 	mov	r19,r5
8111fd58:	382b883a 	mov	r21,r7
8111fd5c:	2809883a 	mov	r4,r5
8111fd60:	24000003 	ldbu	r16,0(r4)
8111fd64:	24400044 	addi	r17,r4,1
8111fd68:	2007883a 	mov	r3,r4
8111fd6c:	9405883a 	add	r2,r18,r16
8111fd70:	10800043 	ldbu	r2,1(r2)
8111fd74:	8809883a 	mov	r4,r17
8111fd78:	1080020c 	andi	r2,r2,8
8111fd7c:	103ff81e 	bne	r2,zero,8111fd60 <__reset+0xfb0ffd60>
8111fd80:	00800b44 	movi	r2,45
8111fd84:	80805326 	beq	r16,r2,8111fed4 <_strtoul_r+0x1c0>
8111fd88:	00800ac4 	movi	r2,43
8111fd8c:	80805526 	beq	r16,r2,8111fee4 <_strtoul_r+0x1d0>
8111fd90:	002f883a 	mov	r23,zero
8111fd94:	a8000f26 	beq	r21,zero,8111fdd4 <_strtoul_r+0xc0>
8111fd98:	00800404 	movi	r2,16
8111fd9c:	a8805f26 	beq	r21,r2,8111ff1c <_strtoul_r+0x208>
8111fda0:	013fffc4 	movi	r4,-1
8111fda4:	a80b883a 	mov	r5,r21
8111fda8:	d9800015 	stw	r6,0(sp)
8111fdac:	1124f600 	call	81124f60 <__udivsi3>
8111fdb0:	a80b883a 	mov	r5,r21
8111fdb4:	013fffc4 	movi	r4,-1
8111fdb8:	102d883a 	mov	r22,r2
8111fdbc:	1124fc40 	call	81124fc4 <__umodsi3>
8111fdc0:	d9800017 	ldw	r6,0(sp)
8111fdc4:	1019883a 	mov	r12,r2
8111fdc8:	a817883a 	mov	r11,r21
8111fdcc:	b00f883a 	mov	r7,r22
8111fdd0:	00000706 	br	8111fdf0 <_strtoul_r+0xdc>
8111fdd4:	00800c04 	movi	r2,48
8111fdd8:	80804626 	beq	r16,r2,8111fef4 <_strtoul_r+0x1e0>
8111fddc:	05400284 	movi	r21,10
8111fde0:	01c666b4 	movhi	r7,6554
8111fde4:	03000144 	movi	r12,5
8111fde8:	39e66644 	addi	r7,r7,-26215
8111fdec:	a817883a 	mov	r11,r21
8111fdf0:	9407883a 	add	r3,r18,r16
8111fdf4:	18c00043 	ldbu	r3,1(r3)
8111fdf8:	8809883a 	mov	r4,r17
8111fdfc:	0011883a 	mov	r8,zero
8111fe00:	1940010c 	andi	r5,r3,4
8111fe04:	0005883a 	mov	r2,zero
8111fe08:	02800044 	movi	r10,1
8111fe0c:	027fffc4 	movi	r9,-1
8111fe10:	28000e26 	beq	r5,zero,8111fe4c <_strtoul_r+0x138>
8111fe14:	843ff404 	addi	r16,r16,-48
8111fe18:	8540120e 	bge	r16,r21,8111fe64 <_strtoul_r+0x150>
8111fe1c:	42400526 	beq	r8,r9,8111fe34 <_strtoul_r+0x120>
8111fe20:	38802236 	bltu	r7,r2,8111feac <_strtoul_r+0x198>
8111fe24:	11c02026 	beq	r2,r7,8111fea8 <_strtoul_r+0x194>
8111fe28:	12c5383a 	mul	r2,r2,r11
8111fe2c:	02000044 	movi	r8,1
8111fe30:	8085883a 	add	r2,r16,r2
8111fe34:	24000003 	ldbu	r16,0(r4)
8111fe38:	21000044 	addi	r4,r4,1
8111fe3c:	9407883a 	add	r3,r18,r16
8111fe40:	18c00043 	ldbu	r3,1(r3)
8111fe44:	1940010c 	andi	r5,r3,4
8111fe48:	283ff21e 	bne	r5,zero,8111fe14 <__reset+0xfb0ffe14>
8111fe4c:	18c000cc 	andi	r3,r3,3
8111fe50:	18000426 	beq	r3,zero,8111fe64 <_strtoul_r+0x150>
8111fe54:	1a801726 	beq	r3,r10,8111feb4 <_strtoul_r+0x1a0>
8111fe58:	00c015c4 	movi	r3,87
8111fe5c:	80e1c83a 	sub	r16,r16,r3
8111fe60:	857fee16 	blt	r16,r21,8111fe1c <__reset+0xfb0ffe1c>
8111fe64:	40001516 	blt	r8,zero,8111febc <_strtoul_r+0x1a8>
8111fe68:	b8000126 	beq	r23,zero,8111fe70 <_strtoul_r+0x15c>
8111fe6c:	0085c83a 	sub	r2,zero,r2
8111fe70:	30000226 	beq	r6,zero,8111fe7c <_strtoul_r+0x168>
8111fe74:	4000151e 	bne	r8,zero,8111fecc <_strtoul_r+0x1b8>
8111fe78:	34c00015 	stw	r19,0(r6)
8111fe7c:	dfc00917 	ldw	ra,36(sp)
8111fe80:	ddc00817 	ldw	r23,32(sp)
8111fe84:	dd800717 	ldw	r22,28(sp)
8111fe88:	dd400617 	ldw	r21,24(sp)
8111fe8c:	dd000517 	ldw	r20,20(sp)
8111fe90:	dcc00417 	ldw	r19,16(sp)
8111fe94:	dc800317 	ldw	r18,12(sp)
8111fe98:	dc400217 	ldw	r17,8(sp)
8111fe9c:	dc000117 	ldw	r16,4(sp)
8111fea0:	dec00a04 	addi	sp,sp,40
8111fea4:	f800283a 	ret
8111fea8:	643fdf0e 	bge	r12,r16,8111fe28 <__reset+0xfb0ffe28>
8111feac:	023fffc4 	movi	r8,-1
8111feb0:	003fe006 	br	8111fe34 <__reset+0xfb0ffe34>
8111feb4:	00c00dc4 	movi	r3,55
8111feb8:	003fe806 	br	8111fe5c <__reset+0xfb0ffe5c>
8111febc:	00800884 	movi	r2,34
8111fec0:	a0800015 	stw	r2,0(r20)
8111fec4:	00bfffc4 	movi	r2,-1
8111fec8:	303fec26 	beq	r6,zero,8111fe7c <__reset+0xfb0ffe7c>
8111fecc:	24ffffc4 	addi	r19,r4,-1
8111fed0:	003fe906 	br	8111fe78 <__reset+0xfb0ffe78>
8111fed4:	1c400084 	addi	r17,r3,2
8111fed8:	1c000043 	ldbu	r16,1(r3)
8111fedc:	05c00044 	movi	r23,1
8111fee0:	003fac06 	br	8111fd94 <__reset+0xfb0ffd94>
8111fee4:	1c400084 	addi	r17,r3,2
8111fee8:	1c000043 	ldbu	r16,1(r3)
8111feec:	002f883a 	mov	r23,zero
8111fef0:	003fa806 	br	8111fd94 <__reset+0xfb0ffd94>
8111fef4:	88800003 	ldbu	r2,0(r17)
8111fef8:	00c01604 	movi	r3,88
8111fefc:	108037cc 	andi	r2,r2,223
8111ff00:	10c00c26 	beq	r2,r3,8111ff34 <_strtoul_r+0x220>
8111ff04:	05400204 	movi	r21,8
8111ff08:	01c80034 	movhi	r7,8192
8111ff0c:	030001c4 	movi	r12,7
8111ff10:	39ffffc4 	addi	r7,r7,-1
8111ff14:	a817883a 	mov	r11,r21
8111ff18:	003fb506 	br	8111fdf0 <__reset+0xfb0ffdf0>
8111ff1c:	00800c04 	movi	r2,48
8111ff20:	80800c1e 	bne	r16,r2,8111ff54 <_strtoul_r+0x240>
8111ff24:	88800003 	ldbu	r2,0(r17)
8111ff28:	00c01604 	movi	r3,88
8111ff2c:	108037cc 	andi	r2,r2,223
8111ff30:	10c0081e 	bne	r2,r3,8111ff54 <_strtoul_r+0x240>
8111ff34:	02c00404 	movi	r11,16
8111ff38:	05840034 	movhi	r22,4096
8111ff3c:	8c000043 	ldbu	r16,1(r17)
8111ff40:	030003c4 	movi	r12,15
8111ff44:	8c400084 	addi	r17,r17,2
8111ff48:	b5bfffc4 	addi	r22,r22,-1
8111ff4c:	582b883a 	mov	r21,r11
8111ff50:	003f9e06 	br	8111fdcc <__reset+0xfb0ffdcc>
8111ff54:	01c40034 	movhi	r7,4096
8111ff58:	030003c4 	movi	r12,15
8111ff5c:	39ffffc4 	addi	r7,r7,-1
8111ff60:	a817883a 	mov	r11,r21
8111ff64:	003fa206 	br	8111fdf0 <__reset+0xfb0ffdf0>

8111ff68 <strtoul>:
8111ff68:	00a04534 	movhi	r2,33044
8111ff6c:	1082cb04 	addi	r2,r2,2860
8111ff70:	300f883a 	mov	r7,r6
8111ff74:	280d883a 	mov	r6,r5
8111ff78:	200b883a 	mov	r5,r4
8111ff7c:	11000017 	ldw	r4,0(r2)
8111ff80:	111fd141 	jmpi	8111fd14 <_strtoul_r>

8111ff84 <_strtoull_r>:
8111ff84:	00a04534 	movhi	r2,33044
8111ff88:	defff404 	addi	sp,sp,-48
8111ff8c:	1082c904 	addi	r2,r2,2852
8111ff90:	de00012e 	bgeu	sp,et,8111ff98 <_strtoull_r+0x14>
8111ff94:	003b68fa 	trap	3
8111ff98:	dc400315 	stw	r17,12(sp)
8111ff9c:	14400017 	ldw	r17,0(r2)
8111ffa0:	dd400715 	stw	r21,28(sp)
8111ffa4:	dd000615 	stw	r20,24(sp)
8111ffa8:	dcc00515 	stw	r19,20(sp)
8111ffac:	dc800415 	stw	r18,16(sp)
8111ffb0:	dfc00b15 	stw	ra,44(sp)
8111ffb4:	df000a15 	stw	fp,40(sp)
8111ffb8:	ddc00915 	stw	r23,36(sp)
8111ffbc:	dd800815 	stw	r22,32(sp)
8111ffc0:	dc000215 	stw	r16,8(sp)
8111ffc4:	2827883a 	mov	r19,r5
8111ffc8:	202b883a 	mov	r21,r4
8111ffcc:	3029883a 	mov	r20,r6
8111ffd0:	3825883a 	mov	r18,r7
8111ffd4:	2807883a 	mov	r3,r5
8111ffd8:	1c000003 	ldbu	r16,0(r3)
8111ffdc:	1f000044 	addi	fp,r3,1
8111ffe0:	1809883a 	mov	r4,r3
8111ffe4:	8c05883a 	add	r2,r17,r16
8111ffe8:	10800043 	ldbu	r2,1(r2)
8111ffec:	e007883a 	mov	r3,fp
8111fff0:	1080020c 	andi	r2,r2,8
8111fff4:	103ff81e 	bne	r2,zero,8111ffd8 <__reset+0xfb0fffd8>
8111fff8:	00800b44 	movi	r2,45
8111fffc:	80806e26 	beq	r16,r2,811201b8 <_strtoull_r+0x234>
81120000:	00800ac4 	movi	r2,43
81120004:	80807026 	beq	r16,r2,811201c8 <_strtoull_r+0x244>
81120008:	002f883a 	mov	r23,zero
8112000c:	90001426 	beq	r18,zero,81120060 <_strtoull_r+0xdc>
81120010:	00800404 	movi	r2,16
81120014:	90807c26 	beq	r18,r2,81120208 <_strtoull_r+0x284>
81120018:	902dd7fa 	srai	r22,r18,31
8112001c:	013fffc4 	movi	r4,-1
81120020:	200b883a 	mov	r5,r4
81120024:	900d883a 	mov	r6,r18
81120028:	b00f883a 	mov	r7,r22
8112002c:	11243a80 	call	811243a8 <__udivdi3>
81120030:	013fffc4 	movi	r4,-1
81120034:	900d883a 	mov	r6,r18
81120038:	b00f883a 	mov	r7,r22
8112003c:	200b883a 	mov	r5,r4
81120040:	d8c00115 	stw	r3,4(sp)
81120044:	d8800015 	stw	r2,0(sp)
81120048:	11249280 	call	81124928 <__umoddi3>
8112004c:	101b883a 	mov	r13,r2
81120050:	9015883a 	mov	r10,r18
81120054:	dac00017 	ldw	r11,0(sp)
81120058:	da000117 	ldw	r8,4(sp)
8112005c:	00000a06 	br	81120088 <_strtoull_r+0x104>
81120060:	00800c04 	movi	r2,48
81120064:	80805c26 	beq	r16,r2,811201d8 <_strtoull_r+0x254>
81120068:	02800284 	movi	r10,10
8112006c:	02e666b4 	movhi	r11,39322
81120070:	020666b4 	movhi	r8,6554
81120074:	03400144 	movi	r13,5
81120078:	5ae66644 	addi	r11,r11,-26215
8112007c:	42266644 	addi	r8,r8,-26215
81120080:	002d883a 	mov	r22,zero
81120084:	5025883a 	mov	r18,r10
81120088:	8c0b883a 	add	r5,r17,r16
8112008c:	29400043 	ldbu	r5,1(r5)
81120090:	e009883a 	mov	r4,fp
81120094:	000f883a 	mov	r7,zero
81120098:	2980010c 	andi	r6,r5,4
8112009c:	0005883a 	mov	r2,zero
811200a0:	0007883a 	mov	r3,zero
811200a4:	03000044 	movi	r12,1
811200a8:	027fffc4 	movi	r9,-1
811200ac:	30000d26 	beq	r6,zero,811200e4 <_strtoull_r+0x160>
811200b0:	843ff404 	addi	r16,r16,-48
811200b4:	8480110e 	bge	r16,r18,811200fc <_strtoull_r+0x178>
811200b8:	3a400426 	beq	r7,r9,811200cc <_strtoull_r+0x148>
811200bc:	40c00236 	bltu	r8,r3,811200c8 <_strtoull_r+0x144>
811200c0:	1a00231e 	bne	r3,r8,81120150 <_strtoull_r+0x1cc>
811200c4:	5880222e 	bgeu	r11,r2,81120150 <_strtoull_r+0x1cc>
811200c8:	01ffffc4 	movi	r7,-1
811200cc:	24000003 	ldbu	r16,0(r4)
811200d0:	21000044 	addi	r4,r4,1
811200d4:	8c0b883a 	add	r5,r17,r16
811200d8:	29400043 	ldbu	r5,1(r5)
811200dc:	2980010c 	andi	r6,r5,4
811200e0:	303ff31e 	bne	r6,zero,811200b0 <__reset+0xfb1000b0>
811200e4:	294000cc 	andi	r5,r5,3
811200e8:	28000426 	beq	r5,zero,811200fc <_strtoull_r+0x178>
811200ec:	2b002626 	beq	r5,r12,81120188 <_strtoull_r+0x204>
811200f0:	014015c4 	movi	r5,87
811200f4:	8161c83a 	sub	r16,r16,r5
811200f8:	84bfef16 	blt	r16,r18,811200b8 <__reset+0xfb1000b8>
811200fc:	38002716 	blt	r7,zero,8112019c <_strtoull_r+0x218>
81120100:	b8000426 	beq	r23,zero,81120114 <_strtoull_r+0x190>
81120104:	0085c83a 	sub	r2,zero,r2
81120108:	100ac03a 	cmpne	r5,r2,zero
8112010c:	00e1c83a 	sub	r16,zero,r3
81120110:	8147c83a 	sub	r3,r16,r5
81120114:	a0000226 	beq	r20,zero,81120120 <_strtoull_r+0x19c>
81120118:	3800251e 	bne	r7,zero,811201b0 <_strtoull_r+0x22c>
8112011c:	a4c00015 	stw	r19,0(r20)
81120120:	dfc00b17 	ldw	ra,44(sp)
81120124:	df000a17 	ldw	fp,40(sp)
81120128:	ddc00917 	ldw	r23,36(sp)
8112012c:	dd800817 	ldw	r22,32(sp)
81120130:	dd400717 	ldw	r21,28(sp)
81120134:	dd000617 	ldw	r20,24(sp)
81120138:	dcc00517 	ldw	r19,20(sp)
8112013c:	dc800417 	ldw	r18,16(sp)
81120140:	dc400317 	ldw	r17,12(sp)
81120144:	dc000217 	ldw	r16,8(sp)
81120148:	dec00c04 	addi	sp,sp,48
8112014c:	f800283a 	ret
81120150:	12c00f26 	beq	r2,r11,81120190 <_strtoull_r+0x20c>
81120154:	b08d383a 	mul	r6,r22,r2
81120158:	1a87383a 	mul	r3,r3,r10
8112015c:	128a383a 	mulxuu	r5,r2,r10
81120160:	1285383a 	mul	r2,r2,r10
81120164:	800fd7fa 	srai	r7,r16,31
81120168:	1987883a 	add	r3,r3,r6
8112016c:	8085883a 	add	r2,r16,r2
81120170:	1947883a 	add	r3,r3,r5
81120174:	38c7883a 	add	r3,r7,r3
81120178:	1421803a 	cmpltu	r16,r2,r16
8112017c:	80c7883a 	add	r3,r16,r3
81120180:	01c00044 	movi	r7,1
81120184:	003fd106 	br	811200cc <__reset+0xfb1000cc>
81120188:	01400dc4 	movi	r5,55
8112018c:	003fd906 	br	811200f4 <__reset+0xfb1000f4>
81120190:	1a3ff01e 	bne	r3,r8,81120154 <__reset+0xfb100154>
81120194:	6c3fcc16 	blt	r13,r16,811200c8 <__reset+0xfb1000c8>
81120198:	003fee06 	br	81120154 <__reset+0xfb100154>
8112019c:	00800884 	movi	r2,34
811201a0:	a8800015 	stw	r2,0(r21)
811201a4:	00bfffc4 	movi	r2,-1
811201a8:	1007883a 	mov	r3,r2
811201ac:	a03fdc26 	beq	r20,zero,81120120 <__reset+0xfb100120>
811201b0:	24ffffc4 	addi	r19,r4,-1
811201b4:	003fd906 	br	8112011c <__reset+0xfb10011c>
811201b8:	27000084 	addi	fp,r4,2
811201bc:	24000043 	ldbu	r16,1(r4)
811201c0:	05c00044 	movi	r23,1
811201c4:	003f9106 	br	8112000c <__reset+0xfb10000c>
811201c8:	27000084 	addi	fp,r4,2
811201cc:	24000043 	ldbu	r16,1(r4)
811201d0:	002f883a 	mov	r23,zero
811201d4:	003f8d06 	br	8112000c <__reset+0xfb10000c>
811201d8:	e0800003 	ldbu	r2,0(fp)
811201dc:	00c01604 	movi	r3,88
811201e0:	108037cc 	andi	r2,r2,223
811201e4:	10c00e26 	beq	r2,r3,81120220 <_strtoull_r+0x29c>
811201e8:	02800204 	movi	r10,8
811201ec:	02ffffc4 	movi	r11,-1
811201f0:	02080034 	movhi	r8,8192
811201f4:	034001c4 	movi	r13,7
811201f8:	42d1883a 	add	r8,r8,r11
811201fc:	002d883a 	mov	r22,zero
81120200:	5025883a 	mov	r18,r10
81120204:	003fa006 	br	81120088 <__reset+0xfb100088>
81120208:	00800c04 	movi	r2,48
8112020c:	80800e1e 	bne	r16,r2,81120248 <_strtoull_r+0x2c4>
81120210:	e0800003 	ldbu	r2,0(fp)
81120214:	00c01604 	movi	r3,88
81120218:	108037cc 	andi	r2,r2,223
8112021c:	10c00a1e 	bne	r2,r3,81120248 <_strtoull_r+0x2c4>
81120220:	02800404 	movi	r10,16
81120224:	02ffffc4 	movi	r11,-1
81120228:	02040034 	movhi	r8,4096
8112022c:	e4000043 	ldbu	r16,1(fp)
81120230:	034003c4 	movi	r13,15
81120234:	e7000084 	addi	fp,fp,2
81120238:	42d1883a 	add	r8,r8,r11
8112023c:	002d883a 	mov	r22,zero
81120240:	5025883a 	mov	r18,r10
81120244:	003f9006 	br	81120088 <__reset+0xfb100088>
81120248:	02ffffc4 	movi	r11,-1
8112024c:	02040034 	movhi	r8,4096
81120250:	034003c4 	movi	r13,15
81120254:	42d1883a 	add	r8,r8,r11
81120258:	9015883a 	mov	r10,r18
8112025c:	002d883a 	mov	r22,zero
81120260:	003f8906 	br	81120088 <__reset+0xfb100088>

81120264 <__ssprint_r>:
81120264:	defff604 	addi	sp,sp,-40
81120268:	de00012e 	bgeu	sp,et,81120270 <__ssprint_r+0xc>
8112026c:	003b68fa 	trap	3
81120270:	30800217 	ldw	r2,8(r6)
81120274:	dc800215 	stw	r18,8(sp)
81120278:	dfc00915 	stw	ra,36(sp)
8112027c:	df000815 	stw	fp,32(sp)
81120280:	ddc00715 	stw	r23,28(sp)
81120284:	dd800615 	stw	r22,24(sp)
81120288:	dd400515 	stw	r21,20(sp)
8112028c:	dd000415 	stw	r20,16(sp)
81120290:	dcc00315 	stw	r19,12(sp)
81120294:	dc400115 	stw	r17,4(sp)
81120298:	dc000015 	stw	r16,0(sp)
8112029c:	3025883a 	mov	r18,r6
811202a0:	10005826 	beq	r2,zero,81120404 <__ssprint_r+0x1a0>
811202a4:	2027883a 	mov	r19,r4
811202a8:	35c00017 	ldw	r23,0(r6)
811202ac:	29000017 	ldw	r4,0(r5)
811202b0:	28800217 	ldw	r2,8(r5)
811202b4:	2823883a 	mov	r17,r5
811202b8:	0039883a 	mov	fp,zero
811202bc:	0021883a 	mov	r16,zero
811202c0:	80003926 	beq	r16,zero,811203a8 <__ssprint_r+0x144>
811202c4:	102b883a 	mov	r21,r2
811202c8:	102d883a 	mov	r22,r2
811202cc:	80803a36 	bltu	r16,r2,811203b8 <__ssprint_r+0x154>
811202d0:	88c0030b 	ldhu	r3,12(r17)
811202d4:	1881200c 	andi	r2,r3,1152
811202d8:	10002626 	beq	r2,zero,81120374 <__ssprint_r+0x110>
811202dc:	88800517 	ldw	r2,20(r17)
811202e0:	89400417 	ldw	r5,16(r17)
811202e4:	81800044 	addi	r6,r16,1
811202e8:	108f883a 	add	r7,r2,r2
811202ec:	3885883a 	add	r2,r7,r2
811202f0:	100ed7fa 	srli	r7,r2,31
811202f4:	216dc83a 	sub	r22,r4,r5
811202f8:	3589883a 	add	r4,r6,r22
811202fc:	3885883a 	add	r2,r7,r2
81120300:	102bd07a 	srai	r21,r2,1
81120304:	a80d883a 	mov	r6,r21
81120308:	a900022e 	bgeu	r21,r4,81120314 <__ssprint_r+0xb0>
8112030c:	202b883a 	mov	r21,r4
81120310:	200d883a 	mov	r6,r4
81120314:	18c1000c 	andi	r3,r3,1024
81120318:	18002a26 	beq	r3,zero,811203c4 <__ssprint_r+0x160>
8112031c:	300b883a 	mov	r5,r6
81120320:	9809883a 	mov	r4,r19
81120324:	11123200 	call	81112320 <_malloc_r>
81120328:	1029883a 	mov	r20,r2
8112032c:	10002c26 	beq	r2,zero,811203e0 <__ssprint_r+0x17c>
81120330:	89400417 	ldw	r5,16(r17)
81120334:	b00d883a 	mov	r6,r22
81120338:	1009883a 	mov	r4,r2
8112033c:	1112b340 	call	81112b34 <memcpy>
81120340:	8880030b 	ldhu	r2,12(r17)
81120344:	00fedfc4 	movi	r3,-1153
81120348:	10c4703a 	and	r2,r2,r3
8112034c:	10802014 	ori	r2,r2,128
81120350:	8880030d 	sth	r2,12(r17)
81120354:	a589883a 	add	r4,r20,r22
81120358:	adadc83a 	sub	r22,r21,r22
8112035c:	8d400515 	stw	r21,20(r17)
81120360:	8d800215 	stw	r22,8(r17)
81120364:	8d000415 	stw	r20,16(r17)
81120368:	89000015 	stw	r4,0(r17)
8112036c:	802b883a 	mov	r21,r16
81120370:	802d883a 	mov	r22,r16
81120374:	b00d883a 	mov	r6,r22
81120378:	e00b883a 	mov	r5,fp
8112037c:	111c8ec0 	call	8111c8ec <memmove>
81120380:	88800217 	ldw	r2,8(r17)
81120384:	89000017 	ldw	r4,0(r17)
81120388:	90c00217 	ldw	r3,8(r18)
8112038c:	1545c83a 	sub	r2,r2,r21
81120390:	2589883a 	add	r4,r4,r22
81120394:	88800215 	stw	r2,8(r17)
81120398:	89000015 	stw	r4,0(r17)
8112039c:	1c21c83a 	sub	r16,r3,r16
811203a0:	94000215 	stw	r16,8(r18)
811203a4:	80001726 	beq	r16,zero,81120404 <__ssprint_r+0x1a0>
811203a8:	bf000017 	ldw	fp,0(r23)
811203ac:	bc000117 	ldw	r16,4(r23)
811203b0:	bdc00204 	addi	r23,r23,8
811203b4:	003fc206 	br	811202c0 <__reset+0xfb1002c0>
811203b8:	802b883a 	mov	r21,r16
811203bc:	802d883a 	mov	r22,r16
811203c0:	003fec06 	br	81120374 <__reset+0xfb100374>
811203c4:	9809883a 	mov	r4,r19
811203c8:	111db0c0 	call	8111db0c <_realloc_r>
811203cc:	1029883a 	mov	r20,r2
811203d0:	103fe01e 	bne	r2,zero,81120354 <__reset+0xfb100354>
811203d4:	89400417 	ldw	r5,16(r17)
811203d8:	9809883a 	mov	r4,r19
811203dc:	111ba780 	call	8111ba78 <_free_r>
811203e0:	88c0030b 	ldhu	r3,12(r17)
811203e4:	00800304 	movi	r2,12
811203e8:	98800015 	stw	r2,0(r19)
811203ec:	18c01014 	ori	r3,r3,64
811203f0:	88c0030d 	sth	r3,12(r17)
811203f4:	00bfffc4 	movi	r2,-1
811203f8:	90000215 	stw	zero,8(r18)
811203fc:	90000115 	stw	zero,4(r18)
81120400:	00000206 	br	8112040c <__ssprint_r+0x1a8>
81120404:	90000115 	stw	zero,4(r18)
81120408:	0005883a 	mov	r2,zero
8112040c:	dfc00917 	ldw	ra,36(sp)
81120410:	df000817 	ldw	fp,32(sp)
81120414:	ddc00717 	ldw	r23,28(sp)
81120418:	dd800617 	ldw	r22,24(sp)
8112041c:	dd400517 	ldw	r21,20(sp)
81120420:	dd000417 	ldw	r20,16(sp)
81120424:	dcc00317 	ldw	r19,12(sp)
81120428:	dc800217 	ldw	r18,8(sp)
8112042c:	dc400117 	ldw	r17,4(sp)
81120430:	dc000017 	ldw	r16,0(sp)
81120434:	dec00a04 	addi	sp,sp,40
81120438:	f800283a 	ret

8112043c <___svfiprintf_internal_r>:
8112043c:	deffc804 	addi	sp,sp,-224
81120440:	de00012e 	bgeu	sp,et,81120448 <___svfiprintf_internal_r+0xc>
81120444:	003b68fa 	trap	3
81120448:	2880030b 	ldhu	r2,12(r5)
8112044c:	dcc03115 	stw	r19,196(sp)
81120450:	dfc03715 	stw	ra,220(sp)
81120454:	df003615 	stw	fp,216(sp)
81120458:	ddc03515 	stw	r23,212(sp)
8112045c:	dd803415 	stw	r22,208(sp)
81120460:	dd403315 	stw	r21,204(sp)
81120464:	dd003215 	stw	r20,200(sp)
81120468:	dc803015 	stw	r18,192(sp)
8112046c:	dc402f15 	stw	r17,188(sp)
81120470:	dc002e15 	stw	r16,184(sp)
81120474:	d9402715 	stw	r5,156(sp)
81120478:	d9002a15 	stw	r4,168(sp)
8112047c:	1080200c 	andi	r2,r2,128
81120480:	d9c02315 	stw	r7,140(sp)
81120484:	3027883a 	mov	r19,r6
81120488:	10000226 	beq	r2,zero,81120494 <___svfiprintf_internal_r+0x58>
8112048c:	28800417 	ldw	r2,16(r5)
81120490:	10041d26 	beq	r2,zero,81121508 <___svfiprintf_internal_r+0x10cc>
81120494:	dac01a04 	addi	r11,sp,104
81120498:	dac01e15 	stw	r11,120(sp)
8112049c:	d8801e17 	ldw	r2,120(sp)
811204a0:	dac019c4 	addi	r11,sp,103
811204a4:	dd402a17 	ldw	r21,168(sp)
811204a8:	ddc02717 	ldw	r23,156(sp)
811204ac:	05a04534 	movhi	r22,33044
811204b0:	05204534 	movhi	r20,33044
811204b4:	dac01f15 	stw	r11,124(sp)
811204b8:	12d7c83a 	sub	r11,r2,r11
811204bc:	b5ba5804 	addi	r22,r22,-5792
811204c0:	a53a5404 	addi	r20,r20,-5808
811204c4:	dec01a15 	stw	sp,104(sp)
811204c8:	d8001c15 	stw	zero,112(sp)
811204cc:	d8001b15 	stw	zero,108(sp)
811204d0:	d811883a 	mov	r8,sp
811204d4:	d8002915 	stw	zero,164(sp)
811204d8:	d8002515 	stw	zero,148(sp)
811204dc:	dac02b15 	stw	r11,172(sp)
811204e0:	98800007 	ldb	r2,0(r19)
811204e4:	1002dd26 	beq	r2,zero,8112105c <___svfiprintf_internal_r+0xc20>
811204e8:	00c00944 	movi	r3,37
811204ec:	9823883a 	mov	r17,r19
811204f0:	10c0021e 	bne	r2,r3,811204fc <___svfiprintf_internal_r+0xc0>
811204f4:	00001406 	br	81120548 <___svfiprintf_internal_r+0x10c>
811204f8:	10c00326 	beq	r2,r3,81120508 <___svfiprintf_internal_r+0xcc>
811204fc:	8c400044 	addi	r17,r17,1
81120500:	88800007 	ldb	r2,0(r17)
81120504:	103ffc1e 	bne	r2,zero,811204f8 <__reset+0xfb1004f8>
81120508:	8ce1c83a 	sub	r16,r17,r19
8112050c:	80000e26 	beq	r16,zero,81120548 <___svfiprintf_internal_r+0x10c>
81120510:	d8c01c17 	ldw	r3,112(sp)
81120514:	d8801b17 	ldw	r2,108(sp)
81120518:	44c00015 	stw	r19,0(r8)
8112051c:	1c07883a 	add	r3,r3,r16
81120520:	10800044 	addi	r2,r2,1
81120524:	d8c01c15 	stw	r3,112(sp)
81120528:	44000115 	stw	r16,4(r8)
8112052c:	d8801b15 	stw	r2,108(sp)
81120530:	00c001c4 	movi	r3,7
81120534:	18831e16 	blt	r3,r2,811211b0 <___svfiprintf_internal_r+0xd74>
81120538:	42000204 	addi	r8,r8,8
8112053c:	dac02517 	ldw	r11,148(sp)
81120540:	5c17883a 	add	r11,r11,r16
81120544:	dac02515 	stw	r11,148(sp)
81120548:	88800007 	ldb	r2,0(r17)
8112054c:	1002c526 	beq	r2,zero,81121064 <___svfiprintf_internal_r+0xc28>
81120550:	88c00047 	ldb	r3,1(r17)
81120554:	8cc00044 	addi	r19,r17,1
81120558:	d8001d85 	stb	zero,118(sp)
8112055c:	0009883a 	mov	r4,zero
81120560:	000f883a 	mov	r7,zero
81120564:	043fffc4 	movi	r16,-1
81120568:	d8002415 	stw	zero,144(sp)
8112056c:	0025883a 	mov	r18,zero
81120570:	01401604 	movi	r5,88
81120574:	01800244 	movi	r6,9
81120578:	02800a84 	movi	r10,42
8112057c:	02401b04 	movi	r9,108
81120580:	9cc00044 	addi	r19,r19,1
81120584:	18bff804 	addi	r2,r3,-32
81120588:	2881dd36 	bltu	r5,r2,81120d00 <___svfiprintf_internal_r+0x8c4>
8112058c:	100490ba 	slli	r2,r2,2
81120590:	02e044b4 	movhi	r11,33042
81120594:	5ac16904 	addi	r11,r11,1444
81120598:	12c5883a 	add	r2,r2,r11
8112059c:	10800017 	ldw	r2,0(r2)
811205a0:	1000683a 	jmp	r2
811205a4:	811207a0 	cmpeqi	r4,r16,18462
811205a8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205ac:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205b0:	81120794 	ori	r4,r16,18462
811205b4:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205b8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205bc:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205c0:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205c4:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205c8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205cc:	81120708 	cmpgei	r4,r16,18460
811205d0:	811208e4 	muli	r4,r16,18467
811205d4:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205d8:	81120734 	orhi	r4,r16,18460
811205dc:	81120d34 	orhi	r4,r16,18484
811205e0:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811205e4:	81120d28 	cmpgeui	r4,r16,18484
811205e8:	81120cc8 	cmpgei	r4,r16,18483
811205ec:	81120cc8 	cmpgei	r4,r16,18483
811205f0:	81120cc8 	cmpgei	r4,r16,18483
811205f4:	81120cc8 	cmpgei	r4,r16,18483
811205f8:	81120cc8 	cmpgei	r4,r16,18483
811205fc:	81120cc8 	cmpgei	r4,r16,18483
81120600:	81120cc8 	cmpgei	r4,r16,18483
81120604:	81120cc8 	cmpgei	r4,r16,18483
81120608:	81120cc8 	cmpgei	r4,r16,18483
8112060c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120610:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120614:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120618:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112061c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120620:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120624:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120628:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112062c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120630:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120634:	81120c64 	muli	r4,r16,18481
81120638:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112063c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120640:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120644:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120648:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112064c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120650:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120654:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120658:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112065c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120660:	81120ddc 	xori	r4,r16,18487
81120664:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120668:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112066c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120670:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120674:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120678:	81120d74 	orhi	r4,r16,18485
8112067c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120680:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120684:	81120aa8 	cmpgeui	r4,r16,18474
81120688:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112068c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120690:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120694:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120698:	81120d00 	call	881120d0 <__reset+0x20f20d0>
8112069c:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206a0:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206a4:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206a8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206ac:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206b0:	81120998 	cmpnei	r4,r16,18470
811206b4:	81120b44 	addi	r4,r16,18477
811206b8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206bc:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206c0:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206c4:	81120b38 	rdprs	r4,r16,18476
811206c8:	81120b44 	addi	r4,r16,18477
811206cc:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206d0:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206d4:	81120b28 	cmpgeui	r4,r16,18476
811206d8:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206dc:	81120aec 	andhi	r4,r16,18475
811206e0:	811208f4 	orhi	r4,r16,18467
811206e4:	81120740 	call	88112074 <__reset+0x20f2074>
811206e8:	81120c58 	cmpnei	r4,r16,18481
811206ec:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206f0:	81120c0c 	andi	r4,r16,18480
811206f4:	81120d00 	call	881120d0 <__reset+0x20f20d0>
811206f8:	81120864 	muli	r4,r16,18465
811206fc:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120700:	81120d00 	call	881120d0 <__reset+0x20f20d0>
81120704:	811207c0 	call	8811207c <__reset+0x20f207c>
81120708:	dac02317 	ldw	r11,140(sp)
8112070c:	5ac00017 	ldw	r11,0(r11)
81120710:	dac02415 	stw	r11,144(sp)
81120714:	dac02317 	ldw	r11,140(sp)
81120718:	58800104 	addi	r2,r11,4
8112071c:	dac02417 	ldw	r11,144(sp)
81120720:	5802e90e 	bge	r11,zero,811212c8 <___svfiprintf_internal_r+0xe8c>
81120724:	dac02417 	ldw	r11,144(sp)
81120728:	d8802315 	stw	r2,140(sp)
8112072c:	02d7c83a 	sub	r11,zero,r11
81120730:	dac02415 	stw	r11,144(sp)
81120734:	94800114 	ori	r18,r18,4
81120738:	98c00007 	ldb	r3,0(r19)
8112073c:	003f9006 	br	81120580 <__reset+0xfb100580>
81120740:	00800c04 	movi	r2,48
81120744:	dac02317 	ldw	r11,140(sp)
81120748:	d8801d05 	stb	r2,116(sp)
8112074c:	00801e04 	movi	r2,120
81120750:	d8801d45 	stb	r2,117(sp)
81120754:	d8001d85 	stb	zero,118(sp)
81120758:	58c00104 	addi	r3,r11,4
8112075c:	5f000017 	ldw	fp,0(r11)
81120760:	0013883a 	mov	r9,zero
81120764:	90800094 	ori	r2,r18,2
81120768:	80032b16 	blt	r16,zero,81121418 <___svfiprintf_internal_r+0xfdc>
8112076c:	00bfdfc4 	movi	r2,-129
81120770:	90a4703a 	and	r18,r18,r2
81120774:	d8c02315 	stw	r3,140(sp)
81120778:	94800094 	ori	r18,r18,2
8112077c:	e002dc26 	beq	fp,zero,811212f0 <___svfiprintf_internal_r+0xeb4>
81120780:	01204534 	movhi	r4,33044
81120784:	2139ca04 	addi	r4,r4,-6360
81120788:	0015883a 	mov	r10,zero
8112078c:	d9002915 	stw	r4,164(sp)
81120790:	00002306 	br	81120820 <___svfiprintf_internal_r+0x3e4>
81120794:	94800054 	ori	r18,r18,1
81120798:	98c00007 	ldb	r3,0(r19)
8112079c:	003f7806 	br	81120580 <__reset+0xfb100580>
811207a0:	38803fcc 	andi	r2,r7,255
811207a4:	1080201c 	xori	r2,r2,128
811207a8:	10bfe004 	addi	r2,r2,-128
811207ac:	1002f31e 	bne	r2,zero,8112137c <___svfiprintf_internal_r+0xf40>
811207b0:	01000044 	movi	r4,1
811207b4:	01c00804 	movi	r7,32
811207b8:	98c00007 	ldb	r3,0(r19)
811207bc:	003f7006 	br	81120580 <__reset+0xfb100580>
811207c0:	21003fcc 	andi	r4,r4,255
811207c4:	2003aa1e 	bne	r4,zero,81121670 <___svfiprintf_internal_r+0x1234>
811207c8:	00a04534 	movhi	r2,33044
811207cc:	10b9ca04 	addi	r2,r2,-6360
811207d0:	d8802915 	stw	r2,164(sp)
811207d4:	9080080c 	andi	r2,r18,32
811207d8:	1000ba26 	beq	r2,zero,81120ac4 <___svfiprintf_internal_r+0x688>
811207dc:	dac02317 	ldw	r11,140(sp)
811207e0:	5f000017 	ldw	fp,0(r11)
811207e4:	5a400117 	ldw	r9,4(r11)
811207e8:	5ac00204 	addi	r11,r11,8
811207ec:	dac02315 	stw	r11,140(sp)
811207f0:	9080004c 	andi	r2,r18,1
811207f4:	10029026 	beq	r2,zero,81121238 <___svfiprintf_internal_r+0xdfc>
811207f8:	e244b03a 	or	r2,fp,r9
811207fc:	1002d41e 	bne	r2,zero,81121350 <___svfiprintf_internal_r+0xf14>
81120800:	d8001d85 	stb	zero,118(sp)
81120804:	80030b16 	blt	r16,zero,81121434 <___svfiprintf_internal_r+0xff8>
81120808:	00bfdfc4 	movi	r2,-129
8112080c:	90a4703a 	and	r18,r18,r2
81120810:	0015883a 	mov	r10,zero
81120814:	80002426 	beq	r16,zero,811208a8 <___svfiprintf_internal_r+0x46c>
81120818:	0039883a 	mov	fp,zero
8112081c:	0013883a 	mov	r9,zero
81120820:	d9002917 	ldw	r4,164(sp)
81120824:	dc401a04 	addi	r17,sp,104
81120828:	e08003cc 	andi	r2,fp,15
8112082c:	4806973a 	slli	r3,r9,28
81120830:	2085883a 	add	r2,r4,r2
81120834:	e038d13a 	srli	fp,fp,4
81120838:	10800003 	ldbu	r2,0(r2)
8112083c:	4812d13a 	srli	r9,r9,4
81120840:	8c7fffc4 	addi	r17,r17,-1
81120844:	1f38b03a 	or	fp,r3,fp
81120848:	88800005 	stb	r2,0(r17)
8112084c:	e244b03a 	or	r2,fp,r9
81120850:	103ff51e 	bne	r2,zero,81120828 <__reset+0xfb100828>
81120854:	dac01e17 	ldw	r11,120(sp)
81120858:	5c57c83a 	sub	r11,r11,r17
8112085c:	dac02115 	stw	r11,132(sp)
81120860:	00001406 	br	811208b4 <___svfiprintf_internal_r+0x478>
81120864:	21003fcc 	andi	r4,r4,255
81120868:	2003741e 	bne	r4,zero,8112163c <___svfiprintf_internal_r+0x1200>
8112086c:	9080080c 	andi	r2,r18,32
81120870:	10014526 	beq	r2,zero,81120d88 <___svfiprintf_internal_r+0x94c>
81120874:	dac02317 	ldw	r11,140(sp)
81120878:	d8001d85 	stb	zero,118(sp)
8112087c:	58c00204 	addi	r3,r11,8
81120880:	5f000017 	ldw	fp,0(r11)
81120884:	5a400117 	ldw	r9,4(r11)
81120888:	8002d916 	blt	r16,zero,811213f0 <___svfiprintf_internal_r+0xfb4>
8112088c:	013fdfc4 	movi	r4,-129
81120890:	e244b03a 	or	r2,fp,r9
81120894:	d8c02315 	stw	r3,140(sp)
81120898:	9124703a 	and	r18,r18,r4
8112089c:	0015883a 	mov	r10,zero
811208a0:	1000b91e 	bne	r2,zero,81120b88 <___svfiprintf_internal_r+0x74c>
811208a4:	8002e61e 	bne	r16,zero,81121440 <___svfiprintf_internal_r+0x1004>
811208a8:	0021883a 	mov	r16,zero
811208ac:	d8002115 	stw	zero,132(sp)
811208b0:	dc401a04 	addi	r17,sp,104
811208b4:	d8c02117 	ldw	r3,132(sp)
811208b8:	dc002015 	stw	r16,128(sp)
811208bc:	80c0010e 	bge	r16,r3,811208c4 <___svfiprintf_internal_r+0x488>
811208c0:	d8c02015 	stw	r3,128(sp)
811208c4:	52803fcc 	andi	r10,r10,255
811208c8:	5280201c 	xori	r10,r10,128
811208cc:	52bfe004 	addi	r10,r10,-128
811208d0:	50003c26 	beq	r10,zero,811209c4 <___svfiprintf_internal_r+0x588>
811208d4:	dac02017 	ldw	r11,128(sp)
811208d8:	5ac00044 	addi	r11,r11,1
811208dc:	dac02015 	stw	r11,128(sp)
811208e0:	00003806 	br	811209c4 <___svfiprintf_internal_r+0x588>
811208e4:	01000044 	movi	r4,1
811208e8:	01c00ac4 	movi	r7,43
811208ec:	98c00007 	ldb	r3,0(r19)
811208f0:	003f2306 	br	81120580 <__reset+0xfb100580>
811208f4:	21003fcc 	andi	r4,r4,255
811208f8:	2003481e 	bne	r4,zero,8112161c <___svfiprintf_internal_r+0x11e0>
811208fc:	9080080c 	andi	r2,r18,32
81120900:	10013b26 	beq	r2,zero,81120df0 <___svfiprintf_internal_r+0x9b4>
81120904:	dac02317 	ldw	r11,140(sp)
81120908:	d8001d85 	stb	zero,118(sp)
8112090c:	58800204 	addi	r2,r11,8
81120910:	5f000017 	ldw	fp,0(r11)
81120914:	5a400117 	ldw	r9,4(r11)
81120918:	8002a816 	blt	r16,zero,811213bc <___svfiprintf_internal_r+0xf80>
8112091c:	013fdfc4 	movi	r4,-129
81120920:	e246b03a 	or	r3,fp,r9
81120924:	d8802315 	stw	r2,140(sp)
81120928:	9124703a 	and	r18,r18,r4
8112092c:	18013c26 	beq	r3,zero,81120e20 <___svfiprintf_internal_r+0x9e4>
81120930:	0015883a 	mov	r10,zero
81120934:	dc401a04 	addi	r17,sp,104
81120938:	e006d0fa 	srli	r3,fp,3
8112093c:	4808977a 	slli	r4,r9,29
81120940:	4812d0fa 	srli	r9,r9,3
81120944:	e70001cc 	andi	fp,fp,7
81120948:	e0800c04 	addi	r2,fp,48
8112094c:	8c7fffc4 	addi	r17,r17,-1
81120950:	20f8b03a 	or	fp,r4,r3
81120954:	88800005 	stb	r2,0(r17)
81120958:	e246b03a 	or	r3,fp,r9
8112095c:	183ff61e 	bne	r3,zero,81120938 <__reset+0xfb100938>
81120960:	90c0004c 	andi	r3,r18,1
81120964:	1800a526 	beq	r3,zero,81120bfc <___svfiprintf_internal_r+0x7c0>
81120968:	10803fcc 	andi	r2,r2,255
8112096c:	1080201c 	xori	r2,r2,128
81120970:	10bfe004 	addi	r2,r2,-128
81120974:	00c00c04 	movi	r3,48
81120978:	10ffb626 	beq	r2,r3,81120854 <__reset+0xfb100854>
8112097c:	88ffffc5 	stb	r3,-1(r17)
81120980:	d8c01e17 	ldw	r3,120(sp)
81120984:	88bfffc4 	addi	r2,r17,-1
81120988:	1023883a 	mov	r17,r2
8112098c:	1887c83a 	sub	r3,r3,r2
81120990:	d8c02115 	stw	r3,132(sp)
81120994:	003fc706 	br	811208b4 <__reset+0xfb1008b4>
81120998:	dac02317 	ldw	r11,140(sp)
8112099c:	00c00044 	movi	r3,1
811209a0:	d8c02015 	stw	r3,128(sp)
811209a4:	58800017 	ldw	r2,0(r11)
811209a8:	5ac00104 	addi	r11,r11,4
811209ac:	d8001d85 	stb	zero,118(sp)
811209b0:	d8801005 	stb	r2,64(sp)
811209b4:	dac02315 	stw	r11,140(sp)
811209b8:	d8c02115 	stw	r3,132(sp)
811209bc:	dc401004 	addi	r17,sp,64
811209c0:	0021883a 	mov	r16,zero
811209c4:	90c0008c 	andi	r3,r18,2
811209c8:	d8c02215 	stw	r3,136(sp)
811209cc:	18000326 	beq	r3,zero,811209dc <___svfiprintf_internal_r+0x5a0>
811209d0:	dac02017 	ldw	r11,128(sp)
811209d4:	5ac00084 	addi	r11,r11,2
811209d8:	dac02015 	stw	r11,128(sp)
811209dc:	90c0210c 	andi	r3,r18,132
811209e0:	d8c02615 	stw	r3,152(sp)
811209e4:	1801131e 	bne	r3,zero,81120e34 <___svfiprintf_internal_r+0x9f8>
811209e8:	dac02417 	ldw	r11,144(sp)
811209ec:	d8c02017 	ldw	r3,128(sp)
811209f0:	58f9c83a 	sub	fp,r11,r3
811209f4:	07010f0e 	bge	zero,fp,81120e34 <___svfiprintf_internal_r+0x9f8>
811209f8:	02400404 	movi	r9,16
811209fc:	d8c01c17 	ldw	r3,112(sp)
81120a00:	d8801b17 	ldw	r2,108(sp)
81120a04:	4f02d60e 	bge	r9,fp,81121560 <___svfiprintf_internal_r+0x1124>
81120a08:	01604534 	movhi	r5,33044
81120a0c:	297a5804 	addi	r5,r5,-5792
81120a10:	d9402815 	stw	r5,160(sp)
81120a14:	028001c4 	movi	r10,7
81120a18:	00000306 	br	81120a28 <___svfiprintf_internal_r+0x5ec>
81120a1c:	e73ffc04 	addi	fp,fp,-16
81120a20:	42000204 	addi	r8,r8,8
81120a24:	4f00150e 	bge	r9,fp,81120a7c <___svfiprintf_internal_r+0x640>
81120a28:	18c00404 	addi	r3,r3,16
81120a2c:	10800044 	addi	r2,r2,1
81120a30:	45800015 	stw	r22,0(r8)
81120a34:	42400115 	stw	r9,4(r8)
81120a38:	d8c01c15 	stw	r3,112(sp)
81120a3c:	d8801b15 	stw	r2,108(sp)
81120a40:	50bff60e 	bge	r10,r2,81120a1c <__reset+0xfb100a1c>
81120a44:	d9801a04 	addi	r6,sp,104
81120a48:	b80b883a 	mov	r5,r23
81120a4c:	a809883a 	mov	r4,r21
81120a50:	da402c15 	stw	r9,176(sp)
81120a54:	da802d15 	stw	r10,180(sp)
81120a58:	11202640 	call	81120264 <__ssprint_r>
81120a5c:	da402c17 	ldw	r9,176(sp)
81120a60:	da802d17 	ldw	r10,180(sp)
81120a64:	1001851e 	bne	r2,zero,8112107c <___svfiprintf_internal_r+0xc40>
81120a68:	e73ffc04 	addi	fp,fp,-16
81120a6c:	d8c01c17 	ldw	r3,112(sp)
81120a70:	d8801b17 	ldw	r2,108(sp)
81120a74:	d811883a 	mov	r8,sp
81120a78:	4f3feb16 	blt	r9,fp,81120a28 <__reset+0xfb100a28>
81120a7c:	dac02817 	ldw	r11,160(sp)
81120a80:	e0c7883a 	add	r3,fp,r3
81120a84:	10800044 	addi	r2,r2,1
81120a88:	42c00015 	stw	r11,0(r8)
81120a8c:	47000115 	stw	fp,4(r8)
81120a90:	d8c01c15 	stw	r3,112(sp)
81120a94:	d8801b15 	stw	r2,108(sp)
81120a98:	010001c4 	movi	r4,7
81120a9c:	2081ee16 	blt	r4,r2,81121258 <___svfiprintf_internal_r+0xe1c>
81120aa0:	42000204 	addi	r8,r8,8
81120aa4:	0000e506 	br	81120e3c <___svfiprintf_internal_r+0xa00>
81120aa8:	21003fcc 	andi	r4,r4,255
81120aac:	2002dd1e 	bne	r4,zero,81121624 <___svfiprintf_internal_r+0x11e8>
81120ab0:	00a04534 	movhi	r2,33044
81120ab4:	10b9c504 	addi	r2,r2,-6380
81120ab8:	d8802915 	stw	r2,164(sp)
81120abc:	9080080c 	andi	r2,r18,32
81120ac0:	103f461e 	bne	r2,zero,811207dc <__reset+0xfb1007dc>
81120ac4:	9080040c 	andi	r2,r18,16
81120ac8:	10022e1e 	bne	r2,zero,81121384 <___svfiprintf_internal_r+0xf48>
81120acc:	9080100c 	andi	r2,r18,64
81120ad0:	dac02317 	ldw	r11,140(sp)
81120ad4:	10027326 	beq	r2,zero,811214a4 <___svfiprintf_internal_r+0x1068>
81120ad8:	5f00000b 	ldhu	fp,0(r11)
81120adc:	5ac00104 	addi	r11,r11,4
81120ae0:	0013883a 	mov	r9,zero
81120ae4:	dac02315 	stw	r11,140(sp)
81120ae8:	003f4106 	br	811207f0 <__reset+0xfb1007f0>
81120aec:	21003fcc 	andi	r4,r4,255
81120af0:	2002e11e 	bne	r4,zero,81121678 <___svfiprintf_internal_r+0x123c>
81120af4:	9080080c 	andi	r2,r18,32
81120af8:	1002011e 	bne	r2,zero,81121300 <___svfiprintf_internal_r+0xec4>
81120afc:	9080040c 	andi	r2,r18,16
81120b00:	10023e1e 	bne	r2,zero,811213fc <___svfiprintf_internal_r+0xfc0>
81120b04:	9480100c 	andi	r18,r18,64
81120b08:	90023c26 	beq	r18,zero,811213fc <___svfiprintf_internal_r+0xfc0>
81120b0c:	dac02317 	ldw	r11,140(sp)
81120b10:	58800017 	ldw	r2,0(r11)
81120b14:	5ac00104 	addi	r11,r11,4
81120b18:	dac02315 	stw	r11,140(sp)
81120b1c:	dac02517 	ldw	r11,148(sp)
81120b20:	12c0000d 	sth	r11,0(r2)
81120b24:	003e6e06 	br	811204e0 <__reset+0xfb1004e0>
81120b28:	98c00007 	ldb	r3,0(r19)
81120b2c:	1a422926 	beq	r3,r9,811213d4 <___svfiprintf_internal_r+0xf98>
81120b30:	94800414 	ori	r18,r18,16
81120b34:	003e9206 	br	81120580 <__reset+0xfb100580>
81120b38:	94801014 	ori	r18,r18,64
81120b3c:	98c00007 	ldb	r3,0(r19)
81120b40:	003e8f06 	br	81120580 <__reset+0xfb100580>
81120b44:	21003fcc 	andi	r4,r4,255
81120b48:	2002c71e 	bne	r4,zero,81121668 <___svfiprintf_internal_r+0x122c>
81120b4c:	9080080c 	andi	r2,r18,32
81120b50:	10004926 	beq	r2,zero,81120c78 <___svfiprintf_internal_r+0x83c>
81120b54:	dac02317 	ldw	r11,140(sp)
81120b58:	58800117 	ldw	r2,4(r11)
81120b5c:	5f000017 	ldw	fp,0(r11)
81120b60:	5ac00204 	addi	r11,r11,8
81120b64:	dac02315 	stw	r11,140(sp)
81120b68:	1013883a 	mov	r9,r2
81120b6c:	10004b16 	blt	r2,zero,81120c9c <___svfiprintf_internal_r+0x860>
81120b70:	da801d83 	ldbu	r10,118(sp)
81120b74:	8001cb16 	blt	r16,zero,811212a4 <___svfiprintf_internal_r+0xe68>
81120b78:	00ffdfc4 	movi	r3,-129
81120b7c:	e244b03a 	or	r2,fp,r9
81120b80:	90e4703a 	and	r18,r18,r3
81120b84:	103f4726 	beq	r2,zero,811208a4 <__reset+0xfb1008a4>
81120b88:	48008c26 	beq	r9,zero,81120dbc <___svfiprintf_internal_r+0x980>
81120b8c:	dc802015 	stw	r18,128(sp)
81120b90:	dc002115 	stw	r16,132(sp)
81120b94:	dc401a04 	addi	r17,sp,104
81120b98:	e021883a 	mov	r16,fp
81120b9c:	da002215 	stw	r8,136(sp)
81120ba0:	5039883a 	mov	fp,r10
81120ba4:	4825883a 	mov	r18,r9
81120ba8:	8009883a 	mov	r4,r16
81120bac:	900b883a 	mov	r5,r18
81120bb0:	01800284 	movi	r6,10
81120bb4:	000f883a 	mov	r7,zero
81120bb8:	11249280 	call	81124928 <__umoddi3>
81120bbc:	10800c04 	addi	r2,r2,48
81120bc0:	8c7fffc4 	addi	r17,r17,-1
81120bc4:	8009883a 	mov	r4,r16
81120bc8:	900b883a 	mov	r5,r18
81120bcc:	88800005 	stb	r2,0(r17)
81120bd0:	01800284 	movi	r6,10
81120bd4:	000f883a 	mov	r7,zero
81120bd8:	11243a80 	call	811243a8 <__udivdi3>
81120bdc:	1021883a 	mov	r16,r2
81120be0:	10c4b03a 	or	r2,r2,r3
81120be4:	1825883a 	mov	r18,r3
81120be8:	103fef1e 	bne	r2,zero,81120ba8 <__reset+0xfb100ba8>
81120bec:	dc802017 	ldw	r18,128(sp)
81120bf0:	dc002117 	ldw	r16,132(sp)
81120bf4:	da002217 	ldw	r8,136(sp)
81120bf8:	e015883a 	mov	r10,fp
81120bfc:	d8c01e17 	ldw	r3,120(sp)
81120c00:	1c47c83a 	sub	r3,r3,r17
81120c04:	d8c02115 	stw	r3,132(sp)
81120c08:	003f2a06 	br	811208b4 <__reset+0xfb1008b4>
81120c0c:	dac02317 	ldw	r11,140(sp)
81120c10:	d8001d85 	stb	zero,118(sp)
81120c14:	5c400017 	ldw	r17,0(r11)
81120c18:	5f000104 	addi	fp,r11,4
81120c1c:	88022f26 	beq	r17,zero,811214dc <___svfiprintf_internal_r+0x10a0>
81120c20:	80022516 	blt	r16,zero,811214b8 <___svfiprintf_internal_r+0x107c>
81120c24:	800d883a 	mov	r6,r16
81120c28:	000b883a 	mov	r5,zero
81120c2c:	8809883a 	mov	r4,r17
81120c30:	da002c15 	stw	r8,176(sp)
81120c34:	111c8080 	call	8111c808 <memchr>
81120c38:	da002c17 	ldw	r8,176(sp)
81120c3c:	10026426 	beq	r2,zero,811215d0 <___svfiprintf_internal_r+0x1194>
81120c40:	1445c83a 	sub	r2,r2,r17
81120c44:	d8802115 	stw	r2,132(sp)
81120c48:	da801d83 	ldbu	r10,118(sp)
81120c4c:	df002315 	stw	fp,140(sp)
81120c50:	0021883a 	mov	r16,zero
81120c54:	003f1706 	br	811208b4 <__reset+0xfb1008b4>
81120c58:	94800814 	ori	r18,r18,32
81120c5c:	98c00007 	ldb	r3,0(r19)
81120c60:	003e4706 	br	81120580 <__reset+0xfb100580>
81120c64:	21003fcc 	andi	r4,r4,255
81120c68:	2002701e 	bne	r4,zero,8112162c <___svfiprintf_internal_r+0x11f0>
81120c6c:	94800414 	ori	r18,r18,16
81120c70:	9080080c 	andi	r2,r18,32
81120c74:	103fb71e 	bne	r2,zero,81120b54 <__reset+0xfb100b54>
81120c78:	9080040c 	andi	r2,r18,16
81120c7c:	1001ab26 	beq	r2,zero,8112132c <___svfiprintf_internal_r+0xef0>
81120c80:	dac02317 	ldw	r11,140(sp)
81120c84:	5f000017 	ldw	fp,0(r11)
81120c88:	5ac00104 	addi	r11,r11,4
81120c8c:	dac02315 	stw	r11,140(sp)
81120c90:	e013d7fa 	srai	r9,fp,31
81120c94:	4805883a 	mov	r2,r9
81120c98:	103fb50e 	bge	r2,zero,81120b70 <__reset+0xfb100b70>
81120c9c:	0739c83a 	sub	fp,zero,fp
81120ca0:	02800b44 	movi	r10,45
81120ca4:	e004c03a 	cmpne	r2,fp,zero
81120ca8:	0253c83a 	sub	r9,zero,r9
81120cac:	da801d85 	stb	r10,118(sp)
81120cb0:	4893c83a 	sub	r9,r9,r2
81120cb4:	80023016 	blt	r16,zero,81121578 <___svfiprintf_internal_r+0x113c>
81120cb8:	00bfdfc4 	movi	r2,-129
81120cbc:	90a4703a 	and	r18,r18,r2
81120cc0:	483fb21e 	bne	r9,zero,81120b8c <__reset+0xfb100b8c>
81120cc4:	00003d06 	br	81120dbc <___svfiprintf_internal_r+0x980>
81120cc8:	9817883a 	mov	r11,r19
81120ccc:	d8002415 	stw	zero,144(sp)
81120cd0:	18bff404 	addi	r2,r3,-48
81120cd4:	0019883a 	mov	r12,zero
81120cd8:	58c00007 	ldb	r3,0(r11)
81120cdc:	630002a4 	muli	r12,r12,10
81120ce0:	9cc00044 	addi	r19,r19,1
81120ce4:	9817883a 	mov	r11,r19
81120ce8:	1319883a 	add	r12,r2,r12
81120cec:	18bff404 	addi	r2,r3,-48
81120cf0:	30bff92e 	bgeu	r6,r2,81120cd8 <__reset+0xfb100cd8>
81120cf4:	db002415 	stw	r12,144(sp)
81120cf8:	18bff804 	addi	r2,r3,-32
81120cfc:	28be232e 	bgeu	r5,r2,8112058c <__reset+0xfb10058c>
81120d00:	21003fcc 	andi	r4,r4,255
81120d04:	20024b1e 	bne	r4,zero,81121634 <___svfiprintf_internal_r+0x11f8>
81120d08:	1800d626 	beq	r3,zero,81121064 <___svfiprintf_internal_r+0xc28>
81120d0c:	02c00044 	movi	r11,1
81120d10:	dac02015 	stw	r11,128(sp)
81120d14:	d8c01005 	stb	r3,64(sp)
81120d18:	d8001d85 	stb	zero,118(sp)
81120d1c:	dac02115 	stw	r11,132(sp)
81120d20:	dc401004 	addi	r17,sp,64
81120d24:	003f2606 	br	811209c0 <__reset+0xfb1009c0>
81120d28:	94802014 	ori	r18,r18,128
81120d2c:	98c00007 	ldb	r3,0(r19)
81120d30:	003e1306 	br	81120580 <__reset+0xfb100580>
81120d34:	98c00007 	ldb	r3,0(r19)
81120d38:	9ac00044 	addi	r11,r19,1
81120d3c:	1a822b26 	beq	r3,r10,811215ec <___svfiprintf_internal_r+0x11b0>
81120d40:	18bff404 	addi	r2,r3,-48
81120d44:	0021883a 	mov	r16,zero
81120d48:	30821e36 	bltu	r6,r2,811215c4 <___svfiprintf_internal_r+0x1188>
81120d4c:	58c00007 	ldb	r3,0(r11)
81120d50:	840002a4 	muli	r16,r16,10
81120d54:	5cc00044 	addi	r19,r11,1
81120d58:	9817883a 	mov	r11,r19
81120d5c:	80a1883a 	add	r16,r16,r2
81120d60:	18bff404 	addi	r2,r3,-48
81120d64:	30bff92e 	bgeu	r6,r2,81120d4c <__reset+0xfb100d4c>
81120d68:	803e060e 	bge	r16,zero,81120584 <__reset+0xfb100584>
81120d6c:	043fffc4 	movi	r16,-1
81120d70:	003e0406 	br	81120584 <__reset+0xfb100584>
81120d74:	21003fcc 	andi	r4,r4,255
81120d78:	2002371e 	bne	r4,zero,81121658 <___svfiprintf_internal_r+0x121c>
81120d7c:	94800414 	ori	r18,r18,16
81120d80:	9080080c 	andi	r2,r18,32
81120d84:	103ebb1e 	bne	r2,zero,81120874 <__reset+0xfb100874>
81120d88:	9080040c 	andi	r2,r18,16
81120d8c:	10013b26 	beq	r2,zero,8112127c <___svfiprintf_internal_r+0xe40>
81120d90:	dac02317 	ldw	r11,140(sp)
81120d94:	d8001d85 	stb	zero,118(sp)
81120d98:	0013883a 	mov	r9,zero
81120d9c:	58800104 	addi	r2,r11,4
81120da0:	5f000017 	ldw	fp,0(r11)
81120da4:	80013d16 	blt	r16,zero,8112129c <___svfiprintf_internal_r+0xe60>
81120da8:	00ffdfc4 	movi	r3,-129
81120dac:	d8802315 	stw	r2,140(sp)
81120db0:	90e4703a 	and	r18,r18,r3
81120db4:	0015883a 	mov	r10,zero
81120db8:	e03eba26 	beq	fp,zero,811208a4 <__reset+0xfb1008a4>
81120dbc:	00800244 	movi	r2,9
81120dc0:	173f7236 	bltu	r2,fp,81120b8c <__reset+0xfb100b8c>
81120dc4:	dac02b17 	ldw	r11,172(sp)
81120dc8:	e7000c04 	addi	fp,fp,48
81120dcc:	df0019c5 	stb	fp,103(sp)
81120dd0:	dac02115 	stw	r11,132(sp)
81120dd4:	dc4019c4 	addi	r17,sp,103
81120dd8:	003eb606 	br	811208b4 <__reset+0xfb1008b4>
81120ddc:	21003fcc 	andi	r4,r4,255
81120de0:	20021f1e 	bne	r4,zero,81121660 <___svfiprintf_internal_r+0x1224>
81120de4:	94800414 	ori	r18,r18,16
81120de8:	9080080c 	andi	r2,r18,32
81120dec:	103ec51e 	bne	r2,zero,81120904 <__reset+0xfb100904>
81120df0:	9080040c 	andi	r2,r18,16
81120df4:	10016926 	beq	r2,zero,8112139c <___svfiprintf_internal_r+0xf60>
81120df8:	dac02317 	ldw	r11,140(sp)
81120dfc:	d8001d85 	stb	zero,118(sp)
81120e00:	0013883a 	mov	r9,zero
81120e04:	58800104 	addi	r2,r11,4
81120e08:	5f000017 	ldw	fp,0(r11)
81120e0c:	80016b16 	blt	r16,zero,811213bc <___svfiprintf_internal_r+0xf80>
81120e10:	00ffdfc4 	movi	r3,-129
81120e14:	d8802315 	stw	r2,140(sp)
81120e18:	90e4703a 	and	r18,r18,r3
81120e1c:	e03ec41e 	bne	fp,zero,81120930 <__reset+0xfb100930>
81120e20:	0015883a 	mov	r10,zero
81120e24:	8001c226 	beq	r16,zero,81121530 <___svfiprintf_internal_r+0x10f4>
81120e28:	0039883a 	mov	fp,zero
81120e2c:	0013883a 	mov	r9,zero
81120e30:	003ec006 	br	81120934 <__reset+0xfb100934>
81120e34:	d8c01c17 	ldw	r3,112(sp)
81120e38:	d8801b17 	ldw	r2,108(sp)
81120e3c:	d9001d87 	ldb	r4,118(sp)
81120e40:	20000b26 	beq	r4,zero,81120e70 <___svfiprintf_internal_r+0xa34>
81120e44:	d9001d84 	addi	r4,sp,118
81120e48:	18c00044 	addi	r3,r3,1
81120e4c:	10800044 	addi	r2,r2,1
81120e50:	41000015 	stw	r4,0(r8)
81120e54:	01000044 	movi	r4,1
81120e58:	41000115 	stw	r4,4(r8)
81120e5c:	d8c01c15 	stw	r3,112(sp)
81120e60:	d8801b15 	stw	r2,108(sp)
81120e64:	010001c4 	movi	r4,7
81120e68:	2080e116 	blt	r4,r2,811211f0 <___svfiprintf_internal_r+0xdb4>
81120e6c:	42000204 	addi	r8,r8,8
81120e70:	dac02217 	ldw	r11,136(sp)
81120e74:	58000b26 	beq	r11,zero,81120ea4 <___svfiprintf_internal_r+0xa68>
81120e78:	d9001d04 	addi	r4,sp,116
81120e7c:	18c00084 	addi	r3,r3,2
81120e80:	10800044 	addi	r2,r2,1
81120e84:	41000015 	stw	r4,0(r8)
81120e88:	01000084 	movi	r4,2
81120e8c:	41000115 	stw	r4,4(r8)
81120e90:	d8c01c15 	stw	r3,112(sp)
81120e94:	d8801b15 	stw	r2,108(sp)
81120e98:	010001c4 	movi	r4,7
81120e9c:	2080dd16 	blt	r4,r2,81121214 <___svfiprintf_internal_r+0xdd8>
81120ea0:	42000204 	addi	r8,r8,8
81120ea4:	dac02617 	ldw	r11,152(sp)
81120ea8:	01002004 	movi	r4,128
81120eac:	59008426 	beq	r11,r4,811210c0 <___svfiprintf_internal_r+0xc84>
81120eb0:	dac02117 	ldw	r11,132(sp)
81120eb4:	82e1c83a 	sub	r16,r16,r11
81120eb8:	0400270e 	bge	zero,r16,81120f58 <___svfiprintf_internal_r+0xb1c>
81120ebc:	01c00404 	movi	r7,16
81120ec0:	3c016a0e 	bge	r7,r16,8112146c <___svfiprintf_internal_r+0x1030>
81120ec4:	01604534 	movhi	r5,33044
81120ec8:	297a5404 	addi	r5,r5,-5808
81120ecc:	d9402215 	stw	r5,136(sp)
81120ed0:	070001c4 	movi	fp,7
81120ed4:	00000306 	br	81120ee4 <___svfiprintf_internal_r+0xaa8>
81120ed8:	843ffc04 	addi	r16,r16,-16
81120edc:	42000204 	addi	r8,r8,8
81120ee0:	3c00130e 	bge	r7,r16,81120f30 <___svfiprintf_internal_r+0xaf4>
81120ee4:	18c00404 	addi	r3,r3,16
81120ee8:	10800044 	addi	r2,r2,1
81120eec:	45000015 	stw	r20,0(r8)
81120ef0:	41c00115 	stw	r7,4(r8)
81120ef4:	d8c01c15 	stw	r3,112(sp)
81120ef8:	d8801b15 	stw	r2,108(sp)
81120efc:	e0bff60e 	bge	fp,r2,81120ed8 <__reset+0xfb100ed8>
81120f00:	d9801a04 	addi	r6,sp,104
81120f04:	b80b883a 	mov	r5,r23
81120f08:	a809883a 	mov	r4,r21
81120f0c:	d9c02c15 	stw	r7,176(sp)
81120f10:	11202640 	call	81120264 <__ssprint_r>
81120f14:	d9c02c17 	ldw	r7,176(sp)
81120f18:	1000581e 	bne	r2,zero,8112107c <___svfiprintf_internal_r+0xc40>
81120f1c:	843ffc04 	addi	r16,r16,-16
81120f20:	d8c01c17 	ldw	r3,112(sp)
81120f24:	d8801b17 	ldw	r2,108(sp)
81120f28:	d811883a 	mov	r8,sp
81120f2c:	3c3fed16 	blt	r7,r16,81120ee4 <__reset+0xfb100ee4>
81120f30:	dac02217 	ldw	r11,136(sp)
81120f34:	1c07883a 	add	r3,r3,r16
81120f38:	10800044 	addi	r2,r2,1
81120f3c:	42c00015 	stw	r11,0(r8)
81120f40:	44000115 	stw	r16,4(r8)
81120f44:	d8c01c15 	stw	r3,112(sp)
81120f48:	d8801b15 	stw	r2,108(sp)
81120f4c:	010001c4 	movi	r4,7
81120f50:	20809e16 	blt	r4,r2,811211cc <___svfiprintf_internal_r+0xd90>
81120f54:	42000204 	addi	r8,r8,8
81120f58:	dac02117 	ldw	r11,132(sp)
81120f5c:	10800044 	addi	r2,r2,1
81120f60:	44400015 	stw	r17,0(r8)
81120f64:	58c7883a 	add	r3,r11,r3
81120f68:	42c00115 	stw	r11,4(r8)
81120f6c:	d8c01c15 	stw	r3,112(sp)
81120f70:	d8801b15 	stw	r2,108(sp)
81120f74:	010001c4 	movi	r4,7
81120f78:	20807f16 	blt	r4,r2,81121178 <___svfiprintf_internal_r+0xd3c>
81120f7c:	42000204 	addi	r8,r8,8
81120f80:	9480010c 	andi	r18,r18,4
81120f84:	90002926 	beq	r18,zero,8112102c <___svfiprintf_internal_r+0xbf0>
81120f88:	dac02417 	ldw	r11,144(sp)
81120f8c:	d8802017 	ldw	r2,128(sp)
81120f90:	58a1c83a 	sub	r16,r11,r2
81120f94:	0400250e 	bge	zero,r16,8112102c <___svfiprintf_internal_r+0xbf0>
81120f98:	04400404 	movi	r17,16
81120f9c:	d8801b17 	ldw	r2,108(sp)
81120fa0:	8c017c0e 	bge	r17,r16,81121594 <___svfiprintf_internal_r+0x1158>
81120fa4:	01604534 	movhi	r5,33044
81120fa8:	297a5804 	addi	r5,r5,-5792
81120fac:	d9402815 	stw	r5,160(sp)
81120fb0:	048001c4 	movi	r18,7
81120fb4:	00000306 	br	81120fc4 <___svfiprintf_internal_r+0xb88>
81120fb8:	843ffc04 	addi	r16,r16,-16
81120fbc:	42000204 	addi	r8,r8,8
81120fc0:	8c00110e 	bge	r17,r16,81121008 <___svfiprintf_internal_r+0xbcc>
81120fc4:	18c00404 	addi	r3,r3,16
81120fc8:	10800044 	addi	r2,r2,1
81120fcc:	45800015 	stw	r22,0(r8)
81120fd0:	44400115 	stw	r17,4(r8)
81120fd4:	d8c01c15 	stw	r3,112(sp)
81120fd8:	d8801b15 	stw	r2,108(sp)
81120fdc:	90bff60e 	bge	r18,r2,81120fb8 <__reset+0xfb100fb8>
81120fe0:	d9801a04 	addi	r6,sp,104
81120fe4:	b80b883a 	mov	r5,r23
81120fe8:	a809883a 	mov	r4,r21
81120fec:	11202640 	call	81120264 <__ssprint_r>
81120ff0:	1000221e 	bne	r2,zero,8112107c <___svfiprintf_internal_r+0xc40>
81120ff4:	843ffc04 	addi	r16,r16,-16
81120ff8:	d8c01c17 	ldw	r3,112(sp)
81120ffc:	d8801b17 	ldw	r2,108(sp)
81121000:	d811883a 	mov	r8,sp
81121004:	8c3fef16 	blt	r17,r16,81120fc4 <__reset+0xfb100fc4>
81121008:	dac02817 	ldw	r11,160(sp)
8112100c:	1c07883a 	add	r3,r3,r16
81121010:	10800044 	addi	r2,r2,1
81121014:	42c00015 	stw	r11,0(r8)
81121018:	44000115 	stw	r16,4(r8)
8112101c:	d8c01c15 	stw	r3,112(sp)
81121020:	d8801b15 	stw	r2,108(sp)
81121024:	010001c4 	movi	r4,7
81121028:	2080aa16 	blt	r4,r2,811212d4 <___svfiprintf_internal_r+0xe98>
8112102c:	d8802417 	ldw	r2,144(sp)
81121030:	dac02017 	ldw	r11,128(sp)
81121034:	12c0010e 	bge	r2,r11,8112103c <___svfiprintf_internal_r+0xc00>
81121038:	5805883a 	mov	r2,r11
8112103c:	dac02517 	ldw	r11,148(sp)
81121040:	5897883a 	add	r11,r11,r2
81121044:	dac02515 	stw	r11,148(sp)
81121048:	1800531e 	bne	r3,zero,81121198 <___svfiprintf_internal_r+0xd5c>
8112104c:	98800007 	ldb	r2,0(r19)
81121050:	d8001b15 	stw	zero,108(sp)
81121054:	d811883a 	mov	r8,sp
81121058:	103d231e 	bne	r2,zero,811204e8 <__reset+0xfb1004e8>
8112105c:	9823883a 	mov	r17,r19
81121060:	003d3906 	br	81120548 <__reset+0xfb100548>
81121064:	d8801c17 	ldw	r2,112(sp)
81121068:	10000426 	beq	r2,zero,8112107c <___svfiprintf_internal_r+0xc40>
8112106c:	d9402717 	ldw	r5,156(sp)
81121070:	d9002a17 	ldw	r4,168(sp)
81121074:	d9801a04 	addi	r6,sp,104
81121078:	11202640 	call	81120264 <__ssprint_r>
8112107c:	dac02717 	ldw	r11,156(sp)
81121080:	d8802517 	ldw	r2,148(sp)
81121084:	58c0030b 	ldhu	r3,12(r11)
81121088:	18c0100c 	andi	r3,r3,64
8112108c:	1801381e 	bne	r3,zero,81121570 <___svfiprintf_internal_r+0x1134>
81121090:	dfc03717 	ldw	ra,220(sp)
81121094:	df003617 	ldw	fp,216(sp)
81121098:	ddc03517 	ldw	r23,212(sp)
8112109c:	dd803417 	ldw	r22,208(sp)
811210a0:	dd403317 	ldw	r21,204(sp)
811210a4:	dd003217 	ldw	r20,200(sp)
811210a8:	dcc03117 	ldw	r19,196(sp)
811210ac:	dc803017 	ldw	r18,192(sp)
811210b0:	dc402f17 	ldw	r17,188(sp)
811210b4:	dc002e17 	ldw	r16,184(sp)
811210b8:	dec03804 	addi	sp,sp,224
811210bc:	f800283a 	ret
811210c0:	dac02417 	ldw	r11,144(sp)
811210c4:	d9002017 	ldw	r4,128(sp)
811210c8:	5939c83a 	sub	fp,r11,r4
811210cc:	073f780e 	bge	zero,fp,81120eb0 <__reset+0xfb100eb0>
811210d0:	02400404 	movi	r9,16
811210d4:	4f01370e 	bge	r9,fp,811215b4 <___svfiprintf_internal_r+0x1178>
811210d8:	02e04534 	movhi	r11,33044
811210dc:	5afa5404 	addi	r11,r11,-5808
811210e0:	dac02215 	stw	r11,136(sp)
811210e4:	028001c4 	movi	r10,7
811210e8:	00000306 	br	811210f8 <___svfiprintf_internal_r+0xcbc>
811210ec:	e73ffc04 	addi	fp,fp,-16
811210f0:	42000204 	addi	r8,r8,8
811210f4:	4f00150e 	bge	r9,fp,8112114c <___svfiprintf_internal_r+0xd10>
811210f8:	18c00404 	addi	r3,r3,16
811210fc:	10800044 	addi	r2,r2,1
81121100:	45000015 	stw	r20,0(r8)
81121104:	42400115 	stw	r9,4(r8)
81121108:	d8c01c15 	stw	r3,112(sp)
8112110c:	d8801b15 	stw	r2,108(sp)
81121110:	50bff60e 	bge	r10,r2,811210ec <__reset+0xfb1010ec>
81121114:	d9801a04 	addi	r6,sp,104
81121118:	b80b883a 	mov	r5,r23
8112111c:	a809883a 	mov	r4,r21
81121120:	da402c15 	stw	r9,176(sp)
81121124:	da802d15 	stw	r10,180(sp)
81121128:	11202640 	call	81120264 <__ssprint_r>
8112112c:	da402c17 	ldw	r9,176(sp)
81121130:	da802d17 	ldw	r10,180(sp)
81121134:	103fd11e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
81121138:	e73ffc04 	addi	fp,fp,-16
8112113c:	d8c01c17 	ldw	r3,112(sp)
81121140:	d8801b17 	ldw	r2,108(sp)
81121144:	d811883a 	mov	r8,sp
81121148:	4f3feb16 	blt	r9,fp,811210f8 <__reset+0xfb1010f8>
8112114c:	dac02217 	ldw	r11,136(sp)
81121150:	1f07883a 	add	r3,r3,fp
81121154:	10800044 	addi	r2,r2,1
81121158:	42c00015 	stw	r11,0(r8)
8112115c:	47000115 	stw	fp,4(r8)
81121160:	d8c01c15 	stw	r3,112(sp)
81121164:	d8801b15 	stw	r2,108(sp)
81121168:	010001c4 	movi	r4,7
8112116c:	2080b616 	blt	r4,r2,81121448 <___svfiprintf_internal_r+0x100c>
81121170:	42000204 	addi	r8,r8,8
81121174:	003f4e06 	br	81120eb0 <__reset+0xfb100eb0>
81121178:	d9801a04 	addi	r6,sp,104
8112117c:	b80b883a 	mov	r5,r23
81121180:	a809883a 	mov	r4,r21
81121184:	11202640 	call	81120264 <__ssprint_r>
81121188:	103fbc1e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
8112118c:	d8c01c17 	ldw	r3,112(sp)
81121190:	d811883a 	mov	r8,sp
81121194:	003f7a06 	br	81120f80 <__reset+0xfb100f80>
81121198:	d9801a04 	addi	r6,sp,104
8112119c:	b80b883a 	mov	r5,r23
811211a0:	a809883a 	mov	r4,r21
811211a4:	11202640 	call	81120264 <__ssprint_r>
811211a8:	103fa826 	beq	r2,zero,8112104c <__reset+0xfb10104c>
811211ac:	003fb306 	br	8112107c <__reset+0xfb10107c>
811211b0:	d9801a04 	addi	r6,sp,104
811211b4:	b80b883a 	mov	r5,r23
811211b8:	a809883a 	mov	r4,r21
811211bc:	11202640 	call	81120264 <__ssprint_r>
811211c0:	103fae1e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
811211c4:	d811883a 	mov	r8,sp
811211c8:	003cdc06 	br	8112053c <__reset+0xfb10053c>
811211cc:	d9801a04 	addi	r6,sp,104
811211d0:	b80b883a 	mov	r5,r23
811211d4:	a809883a 	mov	r4,r21
811211d8:	11202640 	call	81120264 <__ssprint_r>
811211dc:	103fa71e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
811211e0:	d8c01c17 	ldw	r3,112(sp)
811211e4:	d8801b17 	ldw	r2,108(sp)
811211e8:	d811883a 	mov	r8,sp
811211ec:	003f5a06 	br	81120f58 <__reset+0xfb100f58>
811211f0:	d9801a04 	addi	r6,sp,104
811211f4:	b80b883a 	mov	r5,r23
811211f8:	a809883a 	mov	r4,r21
811211fc:	11202640 	call	81120264 <__ssprint_r>
81121200:	103f9e1e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
81121204:	d8c01c17 	ldw	r3,112(sp)
81121208:	d8801b17 	ldw	r2,108(sp)
8112120c:	d811883a 	mov	r8,sp
81121210:	003f1706 	br	81120e70 <__reset+0xfb100e70>
81121214:	d9801a04 	addi	r6,sp,104
81121218:	b80b883a 	mov	r5,r23
8112121c:	a809883a 	mov	r4,r21
81121220:	11202640 	call	81120264 <__ssprint_r>
81121224:	103f951e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
81121228:	d8c01c17 	ldw	r3,112(sp)
8112122c:	d8801b17 	ldw	r2,108(sp)
81121230:	d811883a 	mov	r8,sp
81121234:	003f1b06 	br	81120ea4 <__reset+0xfb100ea4>
81121238:	d8001d85 	stb	zero,118(sp)
8112123c:	80007b16 	blt	r16,zero,8112142c <___svfiprintf_internal_r+0xff0>
81121240:	00ffdfc4 	movi	r3,-129
81121244:	e244b03a 	or	r2,fp,r9
81121248:	90e4703a 	and	r18,r18,r3
8112124c:	103d7026 	beq	r2,zero,81120810 <__reset+0xfb100810>
81121250:	0015883a 	mov	r10,zero
81121254:	003d7206 	br	81120820 <__reset+0xfb100820>
81121258:	d9801a04 	addi	r6,sp,104
8112125c:	b80b883a 	mov	r5,r23
81121260:	a809883a 	mov	r4,r21
81121264:	11202640 	call	81120264 <__ssprint_r>
81121268:	103f841e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
8112126c:	d8c01c17 	ldw	r3,112(sp)
81121270:	d8801b17 	ldw	r2,108(sp)
81121274:	d811883a 	mov	r8,sp
81121278:	003ef006 	br	81120e3c <__reset+0xfb100e3c>
8112127c:	9080100c 	andi	r2,r18,64
81121280:	d8001d85 	stb	zero,118(sp)
81121284:	dac02317 	ldw	r11,140(sp)
81121288:	10008126 	beq	r2,zero,81121490 <___svfiprintf_internal_r+0x1054>
8112128c:	58800104 	addi	r2,r11,4
81121290:	5f00000b 	ldhu	fp,0(r11)
81121294:	0013883a 	mov	r9,zero
81121298:	803ec30e 	bge	r16,zero,81120da8 <__reset+0xfb100da8>
8112129c:	d8802315 	stw	r2,140(sp)
811212a0:	0015883a 	mov	r10,zero
811212a4:	e244b03a 	or	r2,fp,r9
811212a8:	103e371e 	bne	r2,zero,81120b88 <__reset+0xfb100b88>
811212ac:	00800044 	movi	r2,1
811212b0:	10803fcc 	andi	r2,r2,255
811212b4:	00c00044 	movi	r3,1
811212b8:	10c06126 	beq	r2,r3,81121440 <___svfiprintf_internal_r+0x1004>
811212bc:	00c00084 	movi	r3,2
811212c0:	10fd5526 	beq	r2,r3,81120818 <__reset+0xfb100818>
811212c4:	003ed806 	br	81120e28 <__reset+0xfb100e28>
811212c8:	d8802315 	stw	r2,140(sp)
811212cc:	98c00007 	ldb	r3,0(r19)
811212d0:	003cab06 	br	81120580 <__reset+0xfb100580>
811212d4:	d9801a04 	addi	r6,sp,104
811212d8:	b80b883a 	mov	r5,r23
811212dc:	a809883a 	mov	r4,r21
811212e0:	11202640 	call	81120264 <__ssprint_r>
811212e4:	103f651e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
811212e8:	d8c01c17 	ldw	r3,112(sp)
811212ec:	003f4f06 	br	8112102c <__reset+0xfb10102c>
811212f0:	00a04534 	movhi	r2,33044
811212f4:	10b9ca04 	addi	r2,r2,-6360
811212f8:	d8802915 	stw	r2,164(sp)
811212fc:	003d4406 	br	81120810 <__reset+0xfb100810>
81121300:	dac02317 	ldw	r11,140(sp)
81121304:	58800017 	ldw	r2,0(r11)
81121308:	dac02517 	ldw	r11,148(sp)
8112130c:	5807d7fa 	srai	r3,r11,31
81121310:	dac02317 	ldw	r11,140(sp)
81121314:	10c00115 	stw	r3,4(r2)
81121318:	5ac00104 	addi	r11,r11,4
8112131c:	dac02315 	stw	r11,140(sp)
81121320:	dac02517 	ldw	r11,148(sp)
81121324:	12c00015 	stw	r11,0(r2)
81121328:	003c6d06 	br	811204e0 <__reset+0xfb1004e0>
8112132c:	9080100c 	andi	r2,r18,64
81121330:	dac02317 	ldw	r11,140(sp)
81121334:	103e5326 	beq	r2,zero,81120c84 <__reset+0xfb100c84>
81121338:	5f00000f 	ldh	fp,0(r11)
8112133c:	5ac00104 	addi	r11,r11,4
81121340:	dac02315 	stw	r11,140(sp)
81121344:	e013d7fa 	srai	r9,fp,31
81121348:	4805883a 	mov	r2,r9
8112134c:	003e0706 	br	81120b6c <__reset+0xfb100b6c>
81121350:	00800c04 	movi	r2,48
81121354:	d8801d05 	stb	r2,116(sp)
81121358:	d8c01d45 	stb	r3,117(sp)
8112135c:	d8001d85 	stb	zero,118(sp)
81121360:	90800094 	ori	r2,r18,2
81121364:	80008f16 	blt	r16,zero,811215a4 <___svfiprintf_internal_r+0x1168>
81121368:	00bfdfc4 	movi	r2,-129
8112136c:	90a4703a 	and	r18,r18,r2
81121370:	94800094 	ori	r18,r18,2
81121374:	0015883a 	mov	r10,zero
81121378:	003d2906 	br	81120820 <__reset+0xfb100820>
8112137c:	98c00007 	ldb	r3,0(r19)
81121380:	003c7f06 	br	81120580 <__reset+0xfb100580>
81121384:	dac02317 	ldw	r11,140(sp)
81121388:	0013883a 	mov	r9,zero
8112138c:	5f000017 	ldw	fp,0(r11)
81121390:	5ac00104 	addi	r11,r11,4
81121394:	dac02315 	stw	r11,140(sp)
81121398:	003d1506 	br	811207f0 <__reset+0xfb1007f0>
8112139c:	9080100c 	andi	r2,r18,64
811213a0:	d8001d85 	stb	zero,118(sp)
811213a4:	dac02317 	ldw	r11,140(sp)
811213a8:	10003426 	beq	r2,zero,8112147c <___svfiprintf_internal_r+0x1040>
811213ac:	58800104 	addi	r2,r11,4
811213b0:	5f00000b 	ldhu	fp,0(r11)
811213b4:	0013883a 	mov	r9,zero
811213b8:	803e950e 	bge	r16,zero,81120e10 <__reset+0xfb100e10>
811213bc:	e246b03a 	or	r3,fp,r9
811213c0:	d8802315 	stw	r2,140(sp)
811213c4:	183d5a1e 	bne	r3,zero,81120930 <__reset+0xfb100930>
811213c8:	0015883a 	mov	r10,zero
811213cc:	0005883a 	mov	r2,zero
811213d0:	003fb706 	br	811212b0 <__reset+0xfb1012b0>
811213d4:	98c00043 	ldbu	r3,1(r19)
811213d8:	94800814 	ori	r18,r18,32
811213dc:	9cc00044 	addi	r19,r19,1
811213e0:	18c03fcc 	andi	r3,r3,255
811213e4:	18c0201c 	xori	r3,r3,128
811213e8:	18ffe004 	addi	r3,r3,-128
811213ec:	003c6406 	br	81120580 <__reset+0xfb100580>
811213f0:	d8c02315 	stw	r3,140(sp)
811213f4:	0015883a 	mov	r10,zero
811213f8:	003faa06 	br	811212a4 <__reset+0xfb1012a4>
811213fc:	dac02317 	ldw	r11,140(sp)
81121400:	58800017 	ldw	r2,0(r11)
81121404:	5ac00104 	addi	r11,r11,4
81121408:	dac02315 	stw	r11,140(sp)
8112140c:	dac02517 	ldw	r11,148(sp)
81121410:	12c00015 	stw	r11,0(r2)
81121414:	003c3206 	br	811204e0 <__reset+0xfb1004e0>
81121418:	01204534 	movhi	r4,33044
8112141c:	2139ca04 	addi	r4,r4,-6360
81121420:	d9002915 	stw	r4,164(sp)
81121424:	d8c02315 	stw	r3,140(sp)
81121428:	1025883a 	mov	r18,r2
8112142c:	e244b03a 	or	r2,fp,r9
81121430:	103f871e 	bne	r2,zero,81121250 <__reset+0xfb101250>
81121434:	0015883a 	mov	r10,zero
81121438:	00800084 	movi	r2,2
8112143c:	003f9c06 	br	811212b0 <__reset+0xfb1012b0>
81121440:	0039883a 	mov	fp,zero
81121444:	003e5f06 	br	81120dc4 <__reset+0xfb100dc4>
81121448:	d9801a04 	addi	r6,sp,104
8112144c:	b80b883a 	mov	r5,r23
81121450:	a809883a 	mov	r4,r21
81121454:	11202640 	call	81120264 <__ssprint_r>
81121458:	103f081e 	bne	r2,zero,8112107c <__reset+0xfb10107c>
8112145c:	d8c01c17 	ldw	r3,112(sp)
81121460:	d8801b17 	ldw	r2,108(sp)
81121464:	d811883a 	mov	r8,sp
81121468:	003e9106 	br	81120eb0 <__reset+0xfb100eb0>
8112146c:	01204534 	movhi	r4,33044
81121470:	213a5404 	addi	r4,r4,-5808
81121474:	d9002215 	stw	r4,136(sp)
81121478:	003ead06 	br	81120f30 <__reset+0xfb100f30>
8112147c:	58800104 	addi	r2,r11,4
81121480:	5f000017 	ldw	fp,0(r11)
81121484:	0013883a 	mov	r9,zero
81121488:	803e610e 	bge	r16,zero,81120e10 <__reset+0xfb100e10>
8112148c:	003fcb06 	br	811213bc <__reset+0xfb1013bc>
81121490:	58800104 	addi	r2,r11,4
81121494:	5f000017 	ldw	fp,0(r11)
81121498:	0013883a 	mov	r9,zero
8112149c:	803e420e 	bge	r16,zero,81120da8 <__reset+0xfb100da8>
811214a0:	003f7e06 	br	8112129c <__reset+0xfb10129c>
811214a4:	5f000017 	ldw	fp,0(r11)
811214a8:	5ac00104 	addi	r11,r11,4
811214ac:	0013883a 	mov	r9,zero
811214b0:	dac02315 	stw	r11,140(sp)
811214b4:	003cce06 	br	811207f0 <__reset+0xfb1007f0>
811214b8:	8809883a 	mov	r4,r17
811214bc:	da002c15 	stw	r8,176(sp)
811214c0:	11134b00 	call	811134b0 <strlen>
811214c4:	d8802115 	stw	r2,132(sp)
811214c8:	da801d83 	ldbu	r10,118(sp)
811214cc:	df002315 	stw	fp,140(sp)
811214d0:	0021883a 	mov	r16,zero
811214d4:	da002c17 	ldw	r8,176(sp)
811214d8:	003cf606 	br	811208b4 <__reset+0xfb1008b4>
811214dc:	00800184 	movi	r2,6
811214e0:	1400012e 	bgeu	r2,r16,811214e8 <___svfiprintf_internal_r+0x10ac>
811214e4:	1021883a 	mov	r16,r2
811214e8:	dc002115 	stw	r16,132(sp)
811214ec:	8005883a 	mov	r2,r16
811214f0:	80003c16 	blt	r16,zero,811215e4 <___svfiprintf_internal_r+0x11a8>
811214f4:	04604534 	movhi	r17,33044
811214f8:	d8802015 	stw	r2,128(sp)
811214fc:	df002315 	stw	fp,140(sp)
81121500:	8c79cf04 	addi	r17,r17,-6340
81121504:	003d2e06 	br	811209c0 <__reset+0xfb1009c0>
81121508:	04001004 	movi	r16,64
8112150c:	800b883a 	mov	r5,r16
81121510:	11123200 	call	81112320 <_malloc_r>
81121514:	dac02717 	ldw	r11,156(sp)
81121518:	58800015 	stw	r2,0(r11)
8112151c:	58800415 	stw	r2,16(r11)
81121520:	10004826 	beq	r2,zero,81121644 <___svfiprintf_internal_r+0x1208>
81121524:	dac02717 	ldw	r11,156(sp)
81121528:	5c000515 	stw	r16,20(r11)
8112152c:	003bd906 	br	81120494 <__reset+0xfb100494>
81121530:	9080004c 	andi	r2,r18,1
81121534:	0015883a 	mov	r10,zero
81121538:	10000626 	beq	r2,zero,81121554 <___svfiprintf_internal_r+0x1118>
8112153c:	dac02b17 	ldw	r11,172(sp)
81121540:	00800c04 	movi	r2,48
81121544:	d88019c5 	stb	r2,103(sp)
81121548:	dac02115 	stw	r11,132(sp)
8112154c:	dc4019c4 	addi	r17,sp,103
81121550:	003cd806 	br	811208b4 <__reset+0xfb1008b4>
81121554:	d8002115 	stw	zero,132(sp)
81121558:	dc401a04 	addi	r17,sp,104
8112155c:	003cd506 	br	811208b4 <__reset+0xfb1008b4>
81121560:	01204534 	movhi	r4,33044
81121564:	213a5804 	addi	r4,r4,-5792
81121568:	d9002815 	stw	r4,160(sp)
8112156c:	003d4306 	br	81120a7c <__reset+0xfb100a7c>
81121570:	00bfffc4 	movi	r2,-1
81121574:	003ec606 	br	81121090 <__reset+0xfb101090>
81121578:	00800044 	movi	r2,1
8112157c:	10803fcc 	andi	r2,r2,255
81121580:	00c00044 	movi	r3,1
81121584:	10fd8026 	beq	r2,r3,81120b88 <__reset+0xfb100b88>
81121588:	00c00084 	movi	r3,2
8112158c:	10fca426 	beq	r2,r3,81120820 <__reset+0xfb100820>
81121590:	003ce806 	br	81120934 <__reset+0xfb100934>
81121594:	01204534 	movhi	r4,33044
81121598:	213a5804 	addi	r4,r4,-5792
8112159c:	d9002815 	stw	r4,160(sp)
811215a0:	003e9906 	br	81121008 <__reset+0xfb101008>
811215a4:	1025883a 	mov	r18,r2
811215a8:	0015883a 	mov	r10,zero
811215ac:	00800084 	movi	r2,2
811215b0:	003ff206 	br	8112157c <__reset+0xfb10157c>
811215b4:	01604534 	movhi	r5,33044
811215b8:	297a5404 	addi	r5,r5,-5808
811215bc:	d9402215 	stw	r5,136(sp)
811215c0:	003ee206 	br	8112114c <__reset+0xfb10114c>
811215c4:	5827883a 	mov	r19,r11
811215c8:	0021883a 	mov	r16,zero
811215cc:	003bed06 	br	81120584 <__reset+0xfb100584>
811215d0:	dc002115 	stw	r16,132(sp)
811215d4:	da801d83 	ldbu	r10,118(sp)
811215d8:	df002315 	stw	fp,140(sp)
811215dc:	0021883a 	mov	r16,zero
811215e0:	003cb406 	br	811208b4 <__reset+0xfb1008b4>
811215e4:	0005883a 	mov	r2,zero
811215e8:	003fc206 	br	811214f4 <__reset+0xfb1014f4>
811215ec:	d8802317 	ldw	r2,140(sp)
811215f0:	98c00043 	ldbu	r3,1(r19)
811215f4:	5827883a 	mov	r19,r11
811215f8:	14000017 	ldw	r16,0(r2)
811215fc:	10800104 	addi	r2,r2,4
81121600:	d8802315 	stw	r2,140(sp)
81121604:	803f760e 	bge	r16,zero,811213e0 <__reset+0xfb1013e0>
81121608:	18c03fcc 	andi	r3,r3,255
8112160c:	18c0201c 	xori	r3,r3,128
81121610:	043fffc4 	movi	r16,-1
81121614:	18ffe004 	addi	r3,r3,-128
81121618:	003bd906 	br	81120580 <__reset+0xfb100580>
8112161c:	d9c01d85 	stb	r7,118(sp)
81121620:	003cb606 	br	811208fc <__reset+0xfb1008fc>
81121624:	d9c01d85 	stb	r7,118(sp)
81121628:	003d2106 	br	81120ab0 <__reset+0xfb100ab0>
8112162c:	d9c01d85 	stb	r7,118(sp)
81121630:	003d8e06 	br	81120c6c <__reset+0xfb100c6c>
81121634:	d9c01d85 	stb	r7,118(sp)
81121638:	003db306 	br	81120d08 <__reset+0xfb100d08>
8112163c:	d9c01d85 	stb	r7,118(sp)
81121640:	003c8a06 	br	8112086c <__reset+0xfb10086c>
81121644:	dac02a17 	ldw	r11,168(sp)
81121648:	00800304 	movi	r2,12
8112164c:	58800015 	stw	r2,0(r11)
81121650:	00bfffc4 	movi	r2,-1
81121654:	003e8e06 	br	81121090 <__reset+0xfb101090>
81121658:	d9c01d85 	stb	r7,118(sp)
8112165c:	003dc706 	br	81120d7c <__reset+0xfb100d7c>
81121660:	d9c01d85 	stb	r7,118(sp)
81121664:	003ddf06 	br	81120de4 <__reset+0xfb100de4>
81121668:	d9c01d85 	stb	r7,118(sp)
8112166c:	003d3706 	br	81120b4c <__reset+0xfb100b4c>
81121670:	d9c01d85 	stb	r7,118(sp)
81121674:	003c5406 	br	811207c8 <__reset+0xfb1007c8>
81121678:	d9c01d85 	stb	r7,118(sp)
8112167c:	003d1d06 	br	81120af4 <__reset+0xfb100af4>

81121680 <__submore>:
81121680:	defffa04 	addi	sp,sp,-24
81121684:	de00012e 	bgeu	sp,et,8112168c <__submore+0xc>
81121688:	003b68fa 	trap	3
8112168c:	dc000015 	stw	r16,0(sp)
81121690:	2821883a 	mov	r16,r5
81121694:	29400c17 	ldw	r5,48(r5)
81121698:	dfc00515 	stw	ra,20(sp)
8112169c:	dd000415 	stw	r20,16(sp)
811216a0:	dcc00315 	stw	r19,12(sp)
811216a4:	dc800215 	stw	r18,8(sp)
811216a8:	dc400115 	stw	r17,4(sp)
811216ac:	80801004 	addi	r2,r16,64
811216b0:	28801726 	beq	r5,r2,81121710 <__submore+0x90>
811216b4:	84400d17 	ldw	r17,52(r16)
811216b8:	8c67883a 	add	r19,r17,r17
811216bc:	980d883a 	mov	r6,r19
811216c0:	111db0c0 	call	8111db0c <_realloc_r>
811216c4:	1025883a 	mov	r18,r2
811216c8:	10002226 	beq	r2,zero,81121754 <__submore+0xd4>
811216cc:	1469883a 	add	r20,r2,r17
811216d0:	880d883a 	mov	r6,r17
811216d4:	100b883a 	mov	r5,r2
811216d8:	a009883a 	mov	r4,r20
811216dc:	1112b340 	call	81112b34 <memcpy>
811216e0:	0005883a 	mov	r2,zero
811216e4:	85000015 	stw	r20,0(r16)
811216e8:	84800c15 	stw	r18,48(r16)
811216ec:	84c00d15 	stw	r19,52(r16)
811216f0:	dfc00517 	ldw	ra,20(sp)
811216f4:	dd000417 	ldw	r20,16(sp)
811216f8:	dcc00317 	ldw	r19,12(sp)
811216fc:	dc800217 	ldw	r18,8(sp)
81121700:	dc400117 	ldw	r17,4(sp)
81121704:	dc000017 	ldw	r16,0(sp)
81121708:	dec00604 	addi	sp,sp,24
8112170c:	f800283a 	ret
81121710:	04410004 	movi	r17,1024
81121714:	880b883a 	mov	r5,r17
81121718:	11123200 	call	81112320 <_malloc_r>
8112171c:	1007883a 	mov	r3,r2
81121720:	10000c26 	beq	r2,zero,81121754 <__submore+0xd4>
81121724:	80801083 	ldbu	r2,66(r16)
81121728:	80c00c15 	stw	r3,48(r16)
8112172c:	84400d15 	stw	r17,52(r16)
81121730:	1880ffc5 	stb	r2,1023(r3)
81121734:	81401043 	ldbu	r5,65(r16)
81121738:	1900ff44 	addi	r4,r3,1021
8112173c:	0005883a 	mov	r2,zero
81121740:	1940ff85 	stb	r5,1022(r3)
81121744:	81401003 	ldbu	r5,64(r16)
81121748:	1940ff45 	stb	r5,1021(r3)
8112174c:	81000015 	stw	r4,0(r16)
81121750:	003fe706 	br	811216f0 <__reset+0xfb1016f0>
81121754:	00bfffc4 	movi	r2,-1
81121758:	003fe506 	br	811216f0 <__reset+0xfb1016f0>

8112175c <_ungetc_r>:
8112175c:	00bfffc4 	movi	r2,-1
81121760:	28806326 	beq	r5,r2,811218f0 <_ungetc_r+0x194>
81121764:	defffb04 	addi	sp,sp,-20
81121768:	de00012e 	bgeu	sp,et,81121770 <_ungetc_r+0x14>
8112176c:	003b68fa 	trap	3
81121770:	dcc00315 	stw	r19,12(sp)
81121774:	dc400115 	stw	r17,4(sp)
81121778:	dc000015 	stw	r16,0(sp)
8112177c:	dfc00415 	stw	ra,16(sp)
81121780:	dc800215 	stw	r18,8(sp)
81121784:	2023883a 	mov	r17,r4
81121788:	3021883a 	mov	r16,r6
8112178c:	2827883a 	mov	r19,r5
81121790:	20000226 	beq	r4,zero,8112179c <_ungetc_r+0x40>
81121794:	20800e17 	ldw	r2,56(r4)
81121798:	10002e26 	beq	r2,zero,81121854 <_ungetc_r+0xf8>
8112179c:	80c0030b 	ldhu	r3,12(r16)
811217a0:	1888000c 	andi	r2,r3,8192
811217a4:	1000051e 	bne	r2,zero,811217bc <_ungetc_r+0x60>
811217a8:	81001917 	ldw	r4,100(r16)
811217ac:	00b7ffc4 	movi	r2,-8193
811217b0:	18c80014 	ori	r3,r3,8192
811217b4:	2084703a 	and	r2,r4,r2
811217b8:	80801915 	stw	r2,100(r16)
811217bc:	00bff7c4 	movi	r2,-33
811217c0:	1884703a 	and	r2,r3,r2
811217c4:	8080030d 	sth	r2,12(r16)
811217c8:	1900010c 	andi	r4,r3,4
811217cc:	2000061e 	bne	r4,zero,811217e8 <_ungetc_r+0x8c>
811217d0:	1900040c 	andi	r4,r3,16
811217d4:	20001d26 	beq	r4,zero,8112184c <_ungetc_r+0xf0>
811217d8:	18c0020c 	andi	r3,r3,8
811217dc:	1800331e 	bne	r3,zero,811218ac <_ungetc_r+0x150>
811217e0:	10800114 	ori	r2,r2,4
811217e4:	8080030d 	sth	r2,12(r16)
811217e8:	80800c17 	ldw	r2,48(r16)
811217ec:	9c803fcc 	andi	r18,r19,255
811217f0:	10001a26 	beq	r2,zero,8112185c <_ungetc_r+0x100>
811217f4:	80c00117 	ldw	r3,4(r16)
811217f8:	80800d17 	ldw	r2,52(r16)
811217fc:	18800f0e 	bge	r3,r2,8112183c <_ungetc_r+0xe0>
81121800:	80c00017 	ldw	r3,0(r16)
81121804:	9005883a 	mov	r2,r18
81121808:	193fffc4 	addi	r4,r3,-1
8112180c:	81000015 	stw	r4,0(r16)
81121810:	1cffffc5 	stb	r19,-1(r3)
81121814:	80c00117 	ldw	r3,4(r16)
81121818:	18c00044 	addi	r3,r3,1
8112181c:	80c00115 	stw	r3,4(r16)
81121820:	dfc00417 	ldw	ra,16(sp)
81121824:	dcc00317 	ldw	r19,12(sp)
81121828:	dc800217 	ldw	r18,8(sp)
8112182c:	dc400117 	ldw	r17,4(sp)
81121830:	dc000017 	ldw	r16,0(sp)
81121834:	dec00504 	addi	sp,sp,20
81121838:	f800283a 	ret
8112183c:	800b883a 	mov	r5,r16
81121840:	8809883a 	mov	r4,r17
81121844:	11216800 	call	81121680 <__submore>
81121848:	103fed26 	beq	r2,zero,81121800 <__reset+0xfb101800>
8112184c:	00bfffc4 	movi	r2,-1
81121850:	003ff306 	br	81121820 <__reset+0xfb101820>
81121854:	111b5e00 	call	8111b5e0 <__sinit>
81121858:	003fd006 	br	8112179c <__reset+0xfb10179c>
8112185c:	80c00417 	ldw	r3,16(r16)
81121860:	80800017 	ldw	r2,0(r16)
81121864:	18000326 	beq	r3,zero,81121874 <_ungetc_r+0x118>
81121868:	1880022e 	bgeu	r3,r2,81121874 <_ungetc_r+0x118>
8112186c:	10ffffc3 	ldbu	r3,-1(r2)
81121870:	90c01826 	beq	r18,r3,811218d4 <_ungetc_r+0x178>
81121874:	81400117 	ldw	r5,4(r16)
81121878:	80800e15 	stw	r2,56(r16)
8112187c:	008000c4 	movi	r2,3
81121880:	81001004 	addi	r4,r16,64
81121884:	80c01084 	addi	r3,r16,66
81121888:	80800d15 	stw	r2,52(r16)
8112188c:	00800044 	movi	r2,1
81121890:	80800115 	stw	r2,4(r16)
81121894:	81400f15 	stw	r5,60(r16)
81121898:	81000c15 	stw	r4,48(r16)
8112189c:	84c01085 	stb	r19,66(r16)
811218a0:	80c00015 	stw	r3,0(r16)
811218a4:	9005883a 	mov	r2,r18
811218a8:	003fdd06 	br	81121820 <__reset+0xfb101820>
811218ac:	800b883a 	mov	r5,r16
811218b0:	8809883a 	mov	r4,r17
811218b4:	111b1e40 	call	8111b1e4 <_fflush_r>
811218b8:	103fe41e 	bne	r2,zero,8112184c <__reset+0xfb10184c>
811218bc:	8080030b 	ldhu	r2,12(r16)
811218c0:	00fffdc4 	movi	r3,-9
811218c4:	80000215 	stw	zero,8(r16)
811218c8:	1884703a 	and	r2,r3,r2
811218cc:	80000615 	stw	zero,24(r16)
811218d0:	003fc306 	br	811217e0 <__reset+0xfb1017e0>
811218d4:	80c00117 	ldw	r3,4(r16)
811218d8:	10bfffc4 	addi	r2,r2,-1
811218dc:	80800015 	stw	r2,0(r16)
811218e0:	18800044 	addi	r2,r3,1
811218e4:	80800115 	stw	r2,4(r16)
811218e8:	9005883a 	mov	r2,r18
811218ec:	003fcc06 	br	81121820 <__reset+0xfb101820>
811218f0:	00bfffc4 	movi	r2,-1
811218f4:	f800283a 	ret

811218f8 <ungetc>:
811218f8:	00a04534 	movhi	r2,33044
811218fc:	1082cb04 	addi	r2,r2,2860
81121900:	280d883a 	mov	r6,r5
81121904:	200b883a 	mov	r5,r4
81121908:	11000017 	ldw	r4,0(r2)
8112190c:	112175c1 	jmpi	8112175c <_ungetc_r>

81121910 <__sprint_r.part.0>:
81121910:	defff604 	addi	sp,sp,-40
81121914:	de00012e 	bgeu	sp,et,8112191c <__sprint_r.part.0+0xc>
81121918:	003b68fa 	trap	3
8112191c:	28801917 	ldw	r2,100(r5)
81121920:	dd400515 	stw	r21,20(sp)
81121924:	dfc00915 	stw	ra,36(sp)
81121928:	df000815 	stw	fp,32(sp)
8112192c:	ddc00715 	stw	r23,28(sp)
81121930:	dd800615 	stw	r22,24(sp)
81121934:	dd000415 	stw	r20,16(sp)
81121938:	dcc00315 	stw	r19,12(sp)
8112193c:	dc800215 	stw	r18,8(sp)
81121940:	dc400115 	stw	r17,4(sp)
81121944:	dc000015 	stw	r16,0(sp)
81121948:	1088000c 	andi	r2,r2,8192
8112194c:	302b883a 	mov	r21,r6
81121950:	10002e26 	beq	r2,zero,81121a0c <__sprint_r.part.0+0xfc>
81121954:	30800217 	ldw	r2,8(r6)
81121958:	35800017 	ldw	r22,0(r6)
8112195c:	10002926 	beq	r2,zero,81121a04 <__sprint_r.part.0+0xf4>
81121960:	2827883a 	mov	r19,r5
81121964:	2029883a 	mov	r20,r4
81121968:	b5c00104 	addi	r23,r22,4
8112196c:	04bfffc4 	movi	r18,-1
81121970:	bc400017 	ldw	r17,0(r23)
81121974:	b4000017 	ldw	r16,0(r22)
81121978:	0039883a 	mov	fp,zero
8112197c:	8822d0ba 	srli	r17,r17,2
81121980:	8800031e 	bne	r17,zero,81121990 <__sprint_r.part.0+0x80>
81121984:	00001806 	br	811219e8 <__sprint_r.part.0+0xd8>
81121988:	84000104 	addi	r16,r16,4
8112198c:	8f001526 	beq	r17,fp,811219e4 <__sprint_r.part.0+0xd4>
81121990:	81400017 	ldw	r5,0(r16)
81121994:	980d883a 	mov	r6,r19
81121998:	a009883a 	mov	r4,r20
8112199c:	11232b40 	call	811232b4 <_fputwc_r>
811219a0:	e7000044 	addi	fp,fp,1
811219a4:	14bff81e 	bne	r2,r18,81121988 <__reset+0xfb101988>
811219a8:	9005883a 	mov	r2,r18
811219ac:	a8000215 	stw	zero,8(r21)
811219b0:	a8000115 	stw	zero,4(r21)
811219b4:	dfc00917 	ldw	ra,36(sp)
811219b8:	df000817 	ldw	fp,32(sp)
811219bc:	ddc00717 	ldw	r23,28(sp)
811219c0:	dd800617 	ldw	r22,24(sp)
811219c4:	dd400517 	ldw	r21,20(sp)
811219c8:	dd000417 	ldw	r20,16(sp)
811219cc:	dcc00317 	ldw	r19,12(sp)
811219d0:	dc800217 	ldw	r18,8(sp)
811219d4:	dc400117 	ldw	r17,4(sp)
811219d8:	dc000017 	ldw	r16,0(sp)
811219dc:	dec00a04 	addi	sp,sp,40
811219e0:	f800283a 	ret
811219e4:	a8800217 	ldw	r2,8(r21)
811219e8:	8c63883a 	add	r17,r17,r17
811219ec:	8c63883a 	add	r17,r17,r17
811219f0:	1445c83a 	sub	r2,r2,r17
811219f4:	a8800215 	stw	r2,8(r21)
811219f8:	b5800204 	addi	r22,r22,8
811219fc:	bdc00204 	addi	r23,r23,8
81121a00:	103fdb1e 	bne	r2,zero,81121970 <__reset+0xfb101970>
81121a04:	0005883a 	mov	r2,zero
81121a08:	003fe806 	br	811219ac <__reset+0xfb1019ac>
81121a0c:	111bd900 	call	8111bd90 <__sfvwrite_r>
81121a10:	003fe606 	br	811219ac <__reset+0xfb1019ac>

81121a14 <__sprint_r>:
81121a14:	30c00217 	ldw	r3,8(r6)
81121a18:	18000126 	beq	r3,zero,81121a20 <__sprint_r+0xc>
81121a1c:	11219101 	jmpi	81121910 <__sprint_r.part.0>
81121a20:	30000115 	stw	zero,4(r6)
81121a24:	0005883a 	mov	r2,zero
81121a28:	f800283a 	ret

81121a2c <___vfiprintf_internal_r>:
81121a2c:	deffc904 	addi	sp,sp,-220
81121a30:	de00012e 	bgeu	sp,et,81121a38 <___vfiprintf_internal_r+0xc>
81121a34:	003b68fa 	trap	3
81121a38:	df003515 	stw	fp,212(sp)
81121a3c:	dd003115 	stw	r20,196(sp)
81121a40:	dfc03615 	stw	ra,216(sp)
81121a44:	ddc03415 	stw	r23,208(sp)
81121a48:	dd803315 	stw	r22,204(sp)
81121a4c:	dd403215 	stw	r21,200(sp)
81121a50:	dcc03015 	stw	r19,192(sp)
81121a54:	dc802f15 	stw	r18,188(sp)
81121a58:	dc402e15 	stw	r17,184(sp)
81121a5c:	dc002d15 	stw	r16,180(sp)
81121a60:	d9002015 	stw	r4,128(sp)
81121a64:	d9c02215 	stw	r7,136(sp)
81121a68:	2829883a 	mov	r20,r5
81121a6c:	3039883a 	mov	fp,r6
81121a70:	20000226 	beq	r4,zero,81121a7c <___vfiprintf_internal_r+0x50>
81121a74:	20800e17 	ldw	r2,56(r4)
81121a78:	1000cf26 	beq	r2,zero,81121db8 <___vfiprintf_internal_r+0x38c>
81121a7c:	a080030b 	ldhu	r2,12(r20)
81121a80:	10c8000c 	andi	r3,r2,8192
81121a84:	1800061e 	bne	r3,zero,81121aa0 <___vfiprintf_internal_r+0x74>
81121a88:	a1001917 	ldw	r4,100(r20)
81121a8c:	00f7ffc4 	movi	r3,-8193
81121a90:	10880014 	ori	r2,r2,8192
81121a94:	20c6703a 	and	r3,r4,r3
81121a98:	a080030d 	sth	r2,12(r20)
81121a9c:	a0c01915 	stw	r3,100(r20)
81121aa0:	10c0020c 	andi	r3,r2,8
81121aa4:	1800a926 	beq	r3,zero,81121d4c <___vfiprintf_internal_r+0x320>
81121aa8:	a0c00417 	ldw	r3,16(r20)
81121aac:	1800a726 	beq	r3,zero,81121d4c <___vfiprintf_internal_r+0x320>
81121ab0:	1080068c 	andi	r2,r2,26
81121ab4:	00c00284 	movi	r3,10
81121ab8:	10c0ac26 	beq	r2,r3,81121d6c <___vfiprintf_internal_r+0x340>
81121abc:	da801a04 	addi	r10,sp,104
81121ac0:	da801e15 	stw	r10,120(sp)
81121ac4:	d8801e17 	ldw	r2,120(sp)
81121ac8:	da8019c4 	addi	r10,sp,103
81121acc:	05a04534 	movhi	r22,33044
81121ad0:	05e04534 	movhi	r23,33044
81121ad4:	da801f15 	stw	r10,124(sp)
81121ad8:	1295c83a 	sub	r10,r2,r10
81121adc:	b5ba6004 	addi	r22,r22,-5760
81121ae0:	bdfa5c04 	addi	r23,r23,-5776
81121ae4:	dec01a15 	stw	sp,104(sp)
81121ae8:	d8001c15 	stw	zero,112(sp)
81121aec:	d8001b15 	stw	zero,108(sp)
81121af0:	d8002615 	stw	zero,152(sp)
81121af4:	d8002315 	stw	zero,140(sp)
81121af8:	da802715 	stw	r10,156(sp)
81121afc:	d811883a 	mov	r8,sp
81121b00:	dd002115 	stw	r20,132(sp)
81121b04:	e021883a 	mov	r16,fp
81121b08:	80800007 	ldb	r2,0(r16)
81121b0c:	1003ea26 	beq	r2,zero,81122ab8 <___vfiprintf_internal_r+0x108c>
81121b10:	00c00944 	movi	r3,37
81121b14:	8025883a 	mov	r18,r16
81121b18:	10c0021e 	bne	r2,r3,81121b24 <___vfiprintf_internal_r+0xf8>
81121b1c:	00001606 	br	81121b78 <___vfiprintf_internal_r+0x14c>
81121b20:	10c00326 	beq	r2,r3,81121b30 <___vfiprintf_internal_r+0x104>
81121b24:	94800044 	addi	r18,r18,1
81121b28:	90800007 	ldb	r2,0(r18)
81121b2c:	103ffc1e 	bne	r2,zero,81121b20 <__reset+0xfb101b20>
81121b30:	9423c83a 	sub	r17,r18,r16
81121b34:	88001026 	beq	r17,zero,81121b78 <___vfiprintf_internal_r+0x14c>
81121b38:	d8c01c17 	ldw	r3,112(sp)
81121b3c:	d8801b17 	ldw	r2,108(sp)
81121b40:	44000015 	stw	r16,0(r8)
81121b44:	88c7883a 	add	r3,r17,r3
81121b48:	10800044 	addi	r2,r2,1
81121b4c:	44400115 	stw	r17,4(r8)
81121b50:	d8c01c15 	stw	r3,112(sp)
81121b54:	d8801b15 	stw	r2,108(sp)
81121b58:	010001c4 	movi	r4,7
81121b5c:	2080760e 	bge	r4,r2,81121d38 <___vfiprintf_internal_r+0x30c>
81121b60:	1803821e 	bne	r3,zero,8112296c <___vfiprintf_internal_r+0xf40>
81121b64:	da802317 	ldw	r10,140(sp)
81121b68:	d8001b15 	stw	zero,108(sp)
81121b6c:	d811883a 	mov	r8,sp
81121b70:	5455883a 	add	r10,r10,r17
81121b74:	da802315 	stw	r10,140(sp)
81121b78:	90800007 	ldb	r2,0(r18)
81121b7c:	10044626 	beq	r2,zero,81122c98 <___vfiprintf_internal_r+0x126c>
81121b80:	90c00047 	ldb	r3,1(r18)
81121b84:	94000044 	addi	r16,r18,1
81121b88:	d8001d85 	stb	zero,118(sp)
81121b8c:	0009883a 	mov	r4,zero
81121b90:	000f883a 	mov	r7,zero
81121b94:	027fffc4 	movi	r9,-1
81121b98:	0023883a 	mov	r17,zero
81121b9c:	0029883a 	mov	r20,zero
81121ba0:	01401604 	movi	r5,88
81121ba4:	01800244 	movi	r6,9
81121ba8:	03400a84 	movi	r13,42
81121bac:	03001b04 	movi	r12,108
81121bb0:	84000044 	addi	r16,r16,1
81121bb4:	18bff804 	addi	r2,r3,-32
81121bb8:	28827336 	bltu	r5,r2,81122588 <___vfiprintf_internal_r+0xb5c>
81121bbc:	100490ba 	slli	r2,r2,2
81121bc0:	02a044b4 	movhi	r10,33042
81121bc4:	5286f504 	addi	r10,r10,7124
81121bc8:	1285883a 	add	r2,r2,r10
81121bcc:	10800017 	ldw	r2,0(r2)
81121bd0:	1000683a 	jmp	r2
81121bd4:	811222bc 	xorhi	r4,r16,18570
81121bd8:	81122588 	cmpgei	r4,r16,18582
81121bdc:	81122588 	cmpgei	r4,r16,18582
81121be0:	811222dc 	xori	r4,r16,18571
81121be4:	81122588 	cmpgei	r4,r16,18582
81121be8:	81122588 	cmpgei	r4,r16,18582
81121bec:	81122588 	cmpgei	r4,r16,18582
81121bf0:	81122588 	cmpgei	r4,r16,18582
81121bf4:	81122588 	cmpgei	r4,r16,18582
81121bf8:	81122588 	cmpgei	r4,r16,18582
81121bfc:	811224c4 	addi	r4,r16,18579
81121c00:	811224e0 	cmpeqi	r4,r16,18579
81121c04:	81122588 	cmpgei	r4,r16,18582
81121c08:	81121dc8 	cmpgei	r4,r16,18551
81121c0c:	811224f0 	cmpltui	r4,r16,18579
81121c10:	81122588 	cmpgei	r4,r16,18582
81121c14:	811222e8 	cmpgeui	r4,r16,18571
81121c18:	811222f4 	orhi	r4,r16,18571
81121c1c:	811222f4 	orhi	r4,r16,18571
81121c20:	811222f4 	orhi	r4,r16,18571
81121c24:	811222f4 	orhi	r4,r16,18571
81121c28:	811222f4 	orhi	r4,r16,18571
81121c2c:	811222f4 	orhi	r4,r16,18571
81121c30:	811222f4 	orhi	r4,r16,18571
81121c34:	811222f4 	orhi	r4,r16,18571
81121c38:	811222f4 	orhi	r4,r16,18571
81121c3c:	81122588 	cmpgei	r4,r16,18582
81121c40:	81122588 	cmpgei	r4,r16,18582
81121c44:	81122588 	cmpgei	r4,r16,18582
81121c48:	81122588 	cmpgei	r4,r16,18582
81121c4c:	81122588 	cmpgei	r4,r16,18582
81121c50:	81122588 	cmpgei	r4,r16,18582
81121c54:	81122588 	cmpgei	r4,r16,18582
81121c58:	81122588 	cmpgei	r4,r16,18582
81121c5c:	81122588 	cmpgei	r4,r16,18582
81121c60:	81122588 	cmpgei	r4,r16,18582
81121c64:	81122320 	cmpeqi	r4,r16,18572
81121c68:	81122588 	cmpgei	r4,r16,18582
81121c6c:	81122588 	cmpgei	r4,r16,18582
81121c70:	81122588 	cmpgei	r4,r16,18582
81121c74:	81122588 	cmpgei	r4,r16,18582
81121c78:	81122588 	cmpgei	r4,r16,18582
81121c7c:	81122588 	cmpgei	r4,r16,18582
81121c80:	81122588 	cmpgei	r4,r16,18582
81121c84:	81122588 	cmpgei	r4,r16,18582
81121c88:	81122588 	cmpgei	r4,r16,18582
81121c8c:	81122588 	cmpgei	r4,r16,18582
81121c90:	81122358 	cmpnei	r4,r16,18573
81121c94:	81122588 	cmpgei	r4,r16,18582
81121c98:	81122588 	cmpgei	r4,r16,18582
81121c9c:	81122588 	cmpgei	r4,r16,18582
81121ca0:	81122588 	cmpgei	r4,r16,18582
81121ca4:	81122588 	cmpgei	r4,r16,18582
81121ca8:	811223b0 	cmpltui	r4,r16,18574
81121cac:	81122588 	cmpgei	r4,r16,18582
81121cb0:	81122588 	cmpgei	r4,r16,18582
81121cb4:	81122420 	cmpeqi	r4,r16,18576
81121cb8:	81122588 	cmpgei	r4,r16,18582
81121cbc:	81122588 	cmpgei	r4,r16,18582
81121cc0:	81122588 	cmpgei	r4,r16,18582
81121cc4:	81122588 	cmpgei	r4,r16,18582
81121cc8:	81122588 	cmpgei	r4,r16,18582
81121ccc:	81122588 	cmpgei	r4,r16,18582
81121cd0:	81122588 	cmpgei	r4,r16,18582
81121cd4:	81122588 	cmpgei	r4,r16,18582
81121cd8:	81122588 	cmpgei	r4,r16,18582
81121cdc:	81122588 	cmpgei	r4,r16,18582
81121ce0:	811221cc 	andi	r4,r16,18567
81121ce4:	811221f8 	rdprs	r4,r16,18567
81121ce8:	81122588 	cmpgei	r4,r16,18582
81121cec:	81122588 	cmpgei	r4,r16,18582
81121cf0:	81122588 	cmpgei	r4,r16,18582
81121cf4:	81122530 	cmpltui	r4,r16,18580
81121cf8:	811221f8 	rdprs	r4,r16,18567
81121cfc:	81122588 	cmpgei	r4,r16,18582
81121d00:	81122588 	cmpgei	r4,r16,18582
81121d04:	8112208c 	andi	r4,r16,18562
81121d08:	81122588 	cmpgei	r4,r16,18582
81121d0c:	8112209c 	xori	r4,r16,18562
81121d10:	811220d8 	cmpnei	r4,r16,18563
81121d14:	81121dd4 	ori	r4,r16,18551
81121d18:	81122080 	call	88112208 <__reset+0x20f2208>
81121d1c:	81122588 	cmpgei	r4,r16,18582
81121d20:	8112245c 	xori	r4,r16,18577
81121d24:	81122588 	cmpgei	r4,r16,18582
81121d28:	811224b4 	orhi	r4,r16,18578
81121d2c:	81122588 	cmpgei	r4,r16,18582
81121d30:	81122588 	cmpgei	r4,r16,18582
81121d34:	81122178 	rdprs	r4,r16,18565
81121d38:	42000204 	addi	r8,r8,8
81121d3c:	da802317 	ldw	r10,140(sp)
81121d40:	5455883a 	add	r10,r10,r17
81121d44:	da802315 	stw	r10,140(sp)
81121d48:	003f8b06 	br	81121b78 <__reset+0xfb101b78>
81121d4c:	d9002017 	ldw	r4,128(sp)
81121d50:	a00b883a 	mov	r5,r20
81121d54:	11195700 	call	81119570 <__swsetup_r>
81121d58:	1003b11e 	bne	r2,zero,81122c20 <___vfiprintf_internal_r+0x11f4>
81121d5c:	a080030b 	ldhu	r2,12(r20)
81121d60:	00c00284 	movi	r3,10
81121d64:	1080068c 	andi	r2,r2,26
81121d68:	10ff541e 	bne	r2,r3,81121abc <__reset+0xfb101abc>
81121d6c:	a080038f 	ldh	r2,14(r20)
81121d70:	103f5216 	blt	r2,zero,81121abc <__reset+0xfb101abc>
81121d74:	d9c02217 	ldw	r7,136(sp)
81121d78:	d9002017 	ldw	r4,128(sp)
81121d7c:	e00d883a 	mov	r6,fp
81121d80:	a00b883a 	mov	r5,r20
81121d84:	1122eac0 	call	81122eac <__sbprintf>
81121d88:	dfc03617 	ldw	ra,216(sp)
81121d8c:	df003517 	ldw	fp,212(sp)
81121d90:	ddc03417 	ldw	r23,208(sp)
81121d94:	dd803317 	ldw	r22,204(sp)
81121d98:	dd403217 	ldw	r21,200(sp)
81121d9c:	dd003117 	ldw	r20,196(sp)
81121da0:	dcc03017 	ldw	r19,192(sp)
81121da4:	dc802f17 	ldw	r18,188(sp)
81121da8:	dc402e17 	ldw	r17,184(sp)
81121dac:	dc002d17 	ldw	r16,180(sp)
81121db0:	dec03704 	addi	sp,sp,220
81121db4:	f800283a 	ret
81121db8:	111b5e00 	call	8111b5e0 <__sinit>
81121dbc:	003f2f06 	br	81121a7c <__reset+0xfb101a7c>
81121dc0:	0463c83a 	sub	r17,zero,r17
81121dc4:	d8802215 	stw	r2,136(sp)
81121dc8:	a5000114 	ori	r20,r20,4
81121dcc:	80c00007 	ldb	r3,0(r16)
81121dd0:	003f7706 	br	81121bb0 <__reset+0xfb101bb0>
81121dd4:	00800c04 	movi	r2,48
81121dd8:	da802217 	ldw	r10,136(sp)
81121ddc:	d8801d05 	stb	r2,116(sp)
81121de0:	00801e04 	movi	r2,120
81121de4:	d8801d45 	stb	r2,117(sp)
81121de8:	d8001d85 	stb	zero,118(sp)
81121dec:	50c00104 	addi	r3,r10,4
81121df0:	54800017 	ldw	r18,0(r10)
81121df4:	0027883a 	mov	r19,zero
81121df8:	a0800094 	ori	r2,r20,2
81121dfc:	48030b16 	blt	r9,zero,81122a2c <___vfiprintf_internal_r+0x1000>
81121e00:	00bfdfc4 	movi	r2,-129
81121e04:	a096703a 	and	r11,r20,r2
81121e08:	d8c02215 	stw	r3,136(sp)
81121e0c:	5d000094 	ori	r20,r11,2
81121e10:	90032b1e 	bne	r18,zero,81122ac0 <___vfiprintf_internal_r+0x1094>
81121e14:	00a04534 	movhi	r2,33044
81121e18:	10b9ca04 	addi	r2,r2,-6360
81121e1c:	d8802615 	stw	r2,152(sp)
81121e20:	0039883a 	mov	fp,zero
81121e24:	48017b1e 	bne	r9,zero,81122414 <___vfiprintf_internal_r+0x9e8>
81121e28:	0013883a 	mov	r9,zero
81121e2c:	0027883a 	mov	r19,zero
81121e30:	dd401a04 	addi	r21,sp,104
81121e34:	4825883a 	mov	r18,r9
81121e38:	4cc0010e 	bge	r9,r19,81121e40 <___vfiprintf_internal_r+0x414>
81121e3c:	9825883a 	mov	r18,r19
81121e40:	e7003fcc 	andi	fp,fp,255
81121e44:	e700201c 	xori	fp,fp,128
81121e48:	e73fe004 	addi	fp,fp,-128
81121e4c:	e0000126 	beq	fp,zero,81121e54 <___vfiprintf_internal_r+0x428>
81121e50:	94800044 	addi	r18,r18,1
81121e54:	a380008c 	andi	r14,r20,2
81121e58:	70000126 	beq	r14,zero,81121e60 <___vfiprintf_internal_r+0x434>
81121e5c:	94800084 	addi	r18,r18,2
81121e60:	a700210c 	andi	fp,r20,132
81121e64:	e001df1e 	bne	fp,zero,811225e4 <___vfiprintf_internal_r+0xbb8>
81121e68:	8c87c83a 	sub	r3,r17,r18
81121e6c:	00c1dd0e 	bge	zero,r3,811225e4 <___vfiprintf_internal_r+0xbb8>
81121e70:	01c00404 	movi	r7,16
81121e74:	d8801c17 	ldw	r2,112(sp)
81121e78:	38c3ad0e 	bge	r7,r3,81122d30 <___vfiprintf_internal_r+0x1304>
81121e7c:	02a04534 	movhi	r10,33044
81121e80:	52ba6004 	addi	r10,r10,-5760
81121e84:	dc002915 	stw	r16,164(sp)
81121e88:	d9801b17 	ldw	r6,108(sp)
81121e8c:	da802415 	stw	r10,144(sp)
81121e90:	03c001c4 	movi	r15,7
81121e94:	da402515 	stw	r9,148(sp)
81121e98:	db802815 	stw	r14,160(sp)
81121e9c:	1821883a 	mov	r16,r3
81121ea0:	00000506 	br	81121eb8 <___vfiprintf_internal_r+0x48c>
81121ea4:	31400084 	addi	r5,r6,2
81121ea8:	42000204 	addi	r8,r8,8
81121eac:	200d883a 	mov	r6,r4
81121eb0:	843ffc04 	addi	r16,r16,-16
81121eb4:	3c000d0e 	bge	r7,r16,81121eec <___vfiprintf_internal_r+0x4c0>
81121eb8:	10800404 	addi	r2,r2,16
81121ebc:	31000044 	addi	r4,r6,1
81121ec0:	45800015 	stw	r22,0(r8)
81121ec4:	41c00115 	stw	r7,4(r8)
81121ec8:	d8801c15 	stw	r2,112(sp)
81121ecc:	d9001b15 	stw	r4,108(sp)
81121ed0:	793ff40e 	bge	r15,r4,81121ea4 <__reset+0xfb101ea4>
81121ed4:	1001b51e 	bne	r2,zero,811225ac <___vfiprintf_internal_r+0xb80>
81121ed8:	843ffc04 	addi	r16,r16,-16
81121edc:	000d883a 	mov	r6,zero
81121ee0:	01400044 	movi	r5,1
81121ee4:	d811883a 	mov	r8,sp
81121ee8:	3c3ff316 	blt	r7,r16,81121eb8 <__reset+0xfb101eb8>
81121eec:	8007883a 	mov	r3,r16
81121ef0:	da402517 	ldw	r9,148(sp)
81121ef4:	db802817 	ldw	r14,160(sp)
81121ef8:	dc002917 	ldw	r16,164(sp)
81121efc:	da802417 	ldw	r10,144(sp)
81121f00:	1885883a 	add	r2,r3,r2
81121f04:	40c00115 	stw	r3,4(r8)
81121f08:	42800015 	stw	r10,0(r8)
81121f0c:	d8801c15 	stw	r2,112(sp)
81121f10:	d9401b15 	stw	r5,108(sp)
81121f14:	00c001c4 	movi	r3,7
81121f18:	19426016 	blt	r3,r5,8112289c <___vfiprintf_internal_r+0xe70>
81121f1c:	d8c01d87 	ldb	r3,118(sp)
81121f20:	42000204 	addi	r8,r8,8
81121f24:	29000044 	addi	r4,r5,1
81121f28:	1801b31e 	bne	r3,zero,811225f8 <___vfiprintf_internal_r+0xbcc>
81121f2c:	7001c026 	beq	r14,zero,81122630 <___vfiprintf_internal_r+0xc04>
81121f30:	d8c01d04 	addi	r3,sp,116
81121f34:	10800084 	addi	r2,r2,2
81121f38:	40c00015 	stw	r3,0(r8)
81121f3c:	00c00084 	movi	r3,2
81121f40:	40c00115 	stw	r3,4(r8)
81121f44:	d8801c15 	stw	r2,112(sp)
81121f48:	d9001b15 	stw	r4,108(sp)
81121f4c:	00c001c4 	movi	r3,7
81121f50:	1902650e 	bge	r3,r4,811228e8 <___vfiprintf_internal_r+0xebc>
81121f54:	10029a1e 	bne	r2,zero,811229c0 <___vfiprintf_internal_r+0xf94>
81121f58:	00c02004 	movi	r3,128
81121f5c:	01000044 	movi	r4,1
81121f60:	000b883a 	mov	r5,zero
81121f64:	d811883a 	mov	r8,sp
81121f68:	e0c1b31e 	bne	fp,r3,81122638 <___vfiprintf_internal_r+0xc0c>
81121f6c:	8cb9c83a 	sub	fp,r17,r18
81121f70:	0701b10e 	bge	zero,fp,81122638 <___vfiprintf_internal_r+0xc0c>
81121f74:	01c00404 	movi	r7,16
81121f78:	3f03890e 	bge	r7,fp,81122da0 <___vfiprintf_internal_r+0x1374>
81121f7c:	00e04534 	movhi	r3,33044
81121f80:	18fa5c04 	addi	r3,r3,-5776
81121f84:	d8c02415 	stw	r3,144(sp)
81121f88:	8007883a 	mov	r3,r16
81121f8c:	034001c4 	movi	r13,7
81121f90:	e021883a 	mov	r16,fp
81121f94:	da402515 	stw	r9,148(sp)
81121f98:	1839883a 	mov	fp,r3
81121f9c:	00000506 	br	81121fb4 <___vfiprintf_internal_r+0x588>
81121fa0:	29800084 	addi	r6,r5,2
81121fa4:	42000204 	addi	r8,r8,8
81121fa8:	180b883a 	mov	r5,r3
81121fac:	843ffc04 	addi	r16,r16,-16
81121fb0:	3c000d0e 	bge	r7,r16,81121fe8 <___vfiprintf_internal_r+0x5bc>
81121fb4:	10800404 	addi	r2,r2,16
81121fb8:	28c00044 	addi	r3,r5,1
81121fbc:	45c00015 	stw	r23,0(r8)
81121fc0:	41c00115 	stw	r7,4(r8)
81121fc4:	d8801c15 	stw	r2,112(sp)
81121fc8:	d8c01b15 	stw	r3,108(sp)
81121fcc:	68fff40e 	bge	r13,r3,81121fa0 <__reset+0xfb101fa0>
81121fd0:	1002241e 	bne	r2,zero,81122864 <___vfiprintf_internal_r+0xe38>
81121fd4:	843ffc04 	addi	r16,r16,-16
81121fd8:	01800044 	movi	r6,1
81121fdc:	000b883a 	mov	r5,zero
81121fe0:	d811883a 	mov	r8,sp
81121fe4:	3c3ff316 	blt	r7,r16,81121fb4 <__reset+0xfb101fb4>
81121fe8:	da402517 	ldw	r9,148(sp)
81121fec:	e007883a 	mov	r3,fp
81121ff0:	8039883a 	mov	fp,r16
81121ff4:	1821883a 	mov	r16,r3
81121ff8:	d8c02417 	ldw	r3,144(sp)
81121ffc:	1705883a 	add	r2,r2,fp
81122000:	47000115 	stw	fp,4(r8)
81122004:	40c00015 	stw	r3,0(r8)
81122008:	d8801c15 	stw	r2,112(sp)
8112200c:	d9801b15 	stw	r6,108(sp)
81122010:	00c001c4 	movi	r3,7
81122014:	19827616 	blt	r3,r6,811229f0 <___vfiprintf_internal_r+0xfc4>
81122018:	4cf9c83a 	sub	fp,r9,r19
8112201c:	42000204 	addi	r8,r8,8
81122020:	31000044 	addi	r4,r6,1
81122024:	300b883a 	mov	r5,r6
81122028:	07018516 	blt	zero,fp,81122640 <___vfiprintf_internal_r+0xc14>
8112202c:	9885883a 	add	r2,r19,r2
81122030:	45400015 	stw	r21,0(r8)
81122034:	44c00115 	stw	r19,4(r8)
81122038:	d8801c15 	stw	r2,112(sp)
8112203c:	d9001b15 	stw	r4,108(sp)
81122040:	00c001c4 	movi	r3,7
81122044:	1901dd0e 	bge	r3,r4,811227bc <___vfiprintf_internal_r+0xd90>
81122048:	1002401e 	bne	r2,zero,8112294c <___vfiprintf_internal_r+0xf20>
8112204c:	d8001b15 	stw	zero,108(sp)
81122050:	a2c0010c 	andi	r11,r20,4
81122054:	58000226 	beq	r11,zero,81122060 <___vfiprintf_internal_r+0x634>
81122058:	8ca7c83a 	sub	r19,r17,r18
8112205c:	04c2f216 	blt	zero,r19,81122c28 <___vfiprintf_internal_r+0x11fc>
81122060:	8c80010e 	bge	r17,r18,81122068 <___vfiprintf_internal_r+0x63c>
81122064:	9023883a 	mov	r17,r18
81122068:	da802317 	ldw	r10,140(sp)
8112206c:	5455883a 	add	r10,r10,r17
81122070:	da802315 	stw	r10,140(sp)
81122074:	d8001b15 	stw	zero,108(sp)
81122078:	d811883a 	mov	r8,sp
8112207c:	003ea206 	br	81121b08 <__reset+0xfb101b08>
81122080:	a5000814 	ori	r20,r20,32
81122084:	80c00007 	ldb	r3,0(r16)
81122088:	003ec906 	br	81121bb0 <__reset+0xfb101bb0>
8112208c:	80c00007 	ldb	r3,0(r16)
81122090:	1b030926 	beq	r3,r12,81122cb8 <___vfiprintf_internal_r+0x128c>
81122094:	a5000414 	ori	r20,r20,16
81122098:	003ec506 	br	81121bb0 <__reset+0xfb101bb0>
8112209c:	21003fcc 	andi	r4,r4,255
811220a0:	20035e1e 	bne	r4,zero,81122e1c <___vfiprintf_internal_r+0x13f0>
811220a4:	a080080c 	andi	r2,r20,32
811220a8:	1002a526 	beq	r2,zero,81122b40 <___vfiprintf_internal_r+0x1114>
811220ac:	da802217 	ldw	r10,136(sp)
811220b0:	50800017 	ldw	r2,0(r10)
811220b4:	da802317 	ldw	r10,140(sp)
811220b8:	5007d7fa 	srai	r3,r10,31
811220bc:	da802217 	ldw	r10,136(sp)
811220c0:	10c00115 	stw	r3,4(r2)
811220c4:	52800104 	addi	r10,r10,4
811220c8:	da802215 	stw	r10,136(sp)
811220cc:	da802317 	ldw	r10,140(sp)
811220d0:	12800015 	stw	r10,0(r2)
811220d4:	003e8c06 	br	81121b08 <__reset+0xfb101b08>
811220d8:	21003fcc 	andi	r4,r4,255
811220dc:	2003511e 	bne	r4,zero,81122e24 <___vfiprintf_internal_r+0x13f8>
811220e0:	a080080c 	andi	r2,r20,32
811220e4:	1000a126 	beq	r2,zero,8112236c <___vfiprintf_internal_r+0x940>
811220e8:	da802217 	ldw	r10,136(sp)
811220ec:	d8001d85 	stb	zero,118(sp)
811220f0:	50800204 	addi	r2,r10,8
811220f4:	54800017 	ldw	r18,0(r10)
811220f8:	54c00117 	ldw	r19,4(r10)
811220fc:	4802b416 	blt	r9,zero,81122bd0 <___vfiprintf_internal_r+0x11a4>
81122100:	013fdfc4 	movi	r4,-129
81122104:	94c6b03a 	or	r3,r18,r19
81122108:	d8802215 	stw	r2,136(sp)
8112210c:	a128703a 	and	r20,r20,r4
81122110:	1800a226 	beq	r3,zero,8112239c <___vfiprintf_internal_r+0x970>
81122114:	0039883a 	mov	fp,zero
81122118:	dd401a04 	addi	r21,sp,104
8112211c:	9006d0fa 	srli	r3,r18,3
81122120:	9808977a 	slli	r4,r19,29
81122124:	9826d0fa 	srli	r19,r19,3
81122128:	948001cc 	andi	r18,r18,7
8112212c:	90800c04 	addi	r2,r18,48
81122130:	ad7fffc4 	addi	r21,r21,-1
81122134:	20e4b03a 	or	r18,r4,r3
81122138:	a8800005 	stb	r2,0(r21)
8112213c:	94c6b03a 	or	r3,r18,r19
81122140:	183ff61e 	bne	r3,zero,8112211c <__reset+0xfb10211c>
81122144:	a0c0004c 	andi	r3,r20,1
81122148:	18005926 	beq	r3,zero,811222b0 <___vfiprintf_internal_r+0x884>
8112214c:	10803fcc 	andi	r2,r2,255
81122150:	1080201c 	xori	r2,r2,128
81122154:	10bfe004 	addi	r2,r2,-128
81122158:	00c00c04 	movi	r3,48
8112215c:	10c05426 	beq	r2,r3,811222b0 <___vfiprintf_internal_r+0x884>
81122160:	da801e17 	ldw	r10,120(sp)
81122164:	a8bfffc4 	addi	r2,r21,-1
81122168:	a8ffffc5 	stb	r3,-1(r21)
8112216c:	50a7c83a 	sub	r19,r10,r2
81122170:	102b883a 	mov	r21,r2
81122174:	003f2f06 	br	81121e34 <__reset+0xfb101e34>
81122178:	21003fcc 	andi	r4,r4,255
8112217c:	2003421e 	bne	r4,zero,81122e88 <___vfiprintf_internal_r+0x145c>
81122180:	00a04534 	movhi	r2,33044
81122184:	10b9ca04 	addi	r2,r2,-6360
81122188:	d8802615 	stw	r2,152(sp)
8112218c:	a080080c 	andi	r2,r20,32
81122190:	1000aa26 	beq	r2,zero,8112243c <___vfiprintf_internal_r+0xa10>
81122194:	da802217 	ldw	r10,136(sp)
81122198:	54800017 	ldw	r18,0(r10)
8112219c:	54c00117 	ldw	r19,4(r10)
811221a0:	52800204 	addi	r10,r10,8
811221a4:	da802215 	stw	r10,136(sp)
811221a8:	a080004c 	andi	r2,r20,1
811221ac:	1001d226 	beq	r2,zero,811228f8 <___vfiprintf_internal_r+0xecc>
811221b0:	94c4b03a 	or	r2,r18,r19
811221b4:	1002351e 	bne	r2,zero,81122a8c <___vfiprintf_internal_r+0x1060>
811221b8:	d8001d85 	stb	zero,118(sp)
811221bc:	48022216 	blt	r9,zero,81122a48 <___vfiprintf_internal_r+0x101c>
811221c0:	00bfdfc4 	movi	r2,-129
811221c4:	a0a8703a 	and	r20,r20,r2
811221c8:	003f1506 	br	81121e20 <__reset+0xfb101e20>
811221cc:	da802217 	ldw	r10,136(sp)
811221d0:	04800044 	movi	r18,1
811221d4:	d8001d85 	stb	zero,118(sp)
811221d8:	50800017 	ldw	r2,0(r10)
811221dc:	52800104 	addi	r10,r10,4
811221e0:	da802215 	stw	r10,136(sp)
811221e4:	d8801005 	stb	r2,64(sp)
811221e8:	9027883a 	mov	r19,r18
811221ec:	dd401004 	addi	r21,sp,64
811221f0:	0013883a 	mov	r9,zero
811221f4:	003f1706 	br	81121e54 <__reset+0xfb101e54>
811221f8:	21003fcc 	andi	r4,r4,255
811221fc:	2003201e 	bne	r4,zero,81122e80 <___vfiprintf_internal_r+0x1454>
81122200:	a080080c 	andi	r2,r20,32
81122204:	10004b26 	beq	r2,zero,81122334 <___vfiprintf_internal_r+0x908>
81122208:	da802217 	ldw	r10,136(sp)
8112220c:	50800117 	ldw	r2,4(r10)
81122210:	54800017 	ldw	r18,0(r10)
81122214:	52800204 	addi	r10,r10,8
81122218:	da802215 	stw	r10,136(sp)
8112221c:	1027883a 	mov	r19,r2
81122220:	10022c16 	blt	r2,zero,81122ad4 <___vfiprintf_internal_r+0x10a8>
81122224:	df001d83 	ldbu	fp,118(sp)
81122228:	48007216 	blt	r9,zero,811223f4 <___vfiprintf_internal_r+0x9c8>
8112222c:	00ffdfc4 	movi	r3,-129
81122230:	94c4b03a 	or	r2,r18,r19
81122234:	a0e8703a 	and	r20,r20,r3
81122238:	1000cc26 	beq	r2,zero,8112256c <___vfiprintf_internal_r+0xb40>
8112223c:	98021026 	beq	r19,zero,81122a80 <___vfiprintf_internal_r+0x1054>
81122240:	dc402415 	stw	r17,144(sp)
81122244:	dc002515 	stw	r16,148(sp)
81122248:	9823883a 	mov	r17,r19
8112224c:	9021883a 	mov	r16,r18
81122250:	dd401a04 	addi	r21,sp,104
81122254:	4825883a 	mov	r18,r9
81122258:	4027883a 	mov	r19,r8
8112225c:	8009883a 	mov	r4,r16
81122260:	880b883a 	mov	r5,r17
81122264:	01800284 	movi	r6,10
81122268:	000f883a 	mov	r7,zero
8112226c:	11249280 	call	81124928 <__umoddi3>
81122270:	10800c04 	addi	r2,r2,48
81122274:	ad7fffc4 	addi	r21,r21,-1
81122278:	8009883a 	mov	r4,r16
8112227c:	880b883a 	mov	r5,r17
81122280:	a8800005 	stb	r2,0(r21)
81122284:	01800284 	movi	r6,10
81122288:	000f883a 	mov	r7,zero
8112228c:	11243a80 	call	811243a8 <__udivdi3>
81122290:	1021883a 	mov	r16,r2
81122294:	10c4b03a 	or	r2,r2,r3
81122298:	1823883a 	mov	r17,r3
8112229c:	103fef1e 	bne	r2,zero,8112225c <__reset+0xfb10225c>
811222a0:	dc402417 	ldw	r17,144(sp)
811222a4:	dc002517 	ldw	r16,148(sp)
811222a8:	9013883a 	mov	r9,r18
811222ac:	9811883a 	mov	r8,r19
811222b0:	da801e17 	ldw	r10,120(sp)
811222b4:	5567c83a 	sub	r19,r10,r21
811222b8:	003ede06 	br	81121e34 <__reset+0xfb101e34>
811222bc:	38803fcc 	andi	r2,r7,255
811222c0:	1080201c 	xori	r2,r2,128
811222c4:	10bfe004 	addi	r2,r2,-128
811222c8:	1002371e 	bne	r2,zero,81122ba8 <___vfiprintf_internal_r+0x117c>
811222cc:	01000044 	movi	r4,1
811222d0:	01c00804 	movi	r7,32
811222d4:	80c00007 	ldb	r3,0(r16)
811222d8:	003e3506 	br	81121bb0 <__reset+0xfb101bb0>
811222dc:	a5000054 	ori	r20,r20,1
811222e0:	80c00007 	ldb	r3,0(r16)
811222e4:	003e3206 	br	81121bb0 <__reset+0xfb101bb0>
811222e8:	a5002014 	ori	r20,r20,128
811222ec:	80c00007 	ldb	r3,0(r16)
811222f0:	003e2f06 	br	81121bb0 <__reset+0xfb101bb0>
811222f4:	8015883a 	mov	r10,r16
811222f8:	0023883a 	mov	r17,zero
811222fc:	18bff404 	addi	r2,r3,-48
81122300:	50c00007 	ldb	r3,0(r10)
81122304:	8c4002a4 	muli	r17,r17,10
81122308:	84000044 	addi	r16,r16,1
8112230c:	8015883a 	mov	r10,r16
81122310:	1463883a 	add	r17,r2,r17
81122314:	18bff404 	addi	r2,r3,-48
81122318:	30bff92e 	bgeu	r6,r2,81122300 <__reset+0xfb102300>
8112231c:	003e2506 	br	81121bb4 <__reset+0xfb101bb4>
81122320:	21003fcc 	andi	r4,r4,255
81122324:	2002d41e 	bne	r4,zero,81122e78 <___vfiprintf_internal_r+0x144c>
81122328:	a5000414 	ori	r20,r20,16
8112232c:	a080080c 	andi	r2,r20,32
81122330:	103fb51e 	bne	r2,zero,81122208 <__reset+0xfb102208>
81122334:	a080040c 	andi	r2,r20,16
81122338:	1001f826 	beq	r2,zero,81122b1c <___vfiprintf_internal_r+0x10f0>
8112233c:	da802217 	ldw	r10,136(sp)
81122340:	54800017 	ldw	r18,0(r10)
81122344:	52800104 	addi	r10,r10,4
81122348:	da802215 	stw	r10,136(sp)
8112234c:	9027d7fa 	srai	r19,r18,31
81122350:	9805883a 	mov	r2,r19
81122354:	003fb206 	br	81122220 <__reset+0xfb102220>
81122358:	21003fcc 	andi	r4,r4,255
8112235c:	2002c41e 	bne	r4,zero,81122e70 <___vfiprintf_internal_r+0x1444>
81122360:	a5000414 	ori	r20,r20,16
81122364:	a080080c 	andi	r2,r20,32
81122368:	103f5f1e 	bne	r2,zero,811220e8 <__reset+0xfb1020e8>
8112236c:	a080040c 	andi	r2,r20,16
81122370:	10020f26 	beq	r2,zero,81122bb0 <___vfiprintf_internal_r+0x1184>
81122374:	da802217 	ldw	r10,136(sp)
81122378:	d8001d85 	stb	zero,118(sp)
8112237c:	0027883a 	mov	r19,zero
81122380:	50800104 	addi	r2,r10,4
81122384:	54800017 	ldw	r18,0(r10)
81122388:	48021116 	blt	r9,zero,81122bd0 <___vfiprintf_internal_r+0x11a4>
8112238c:	00ffdfc4 	movi	r3,-129
81122390:	d8802215 	stw	r2,136(sp)
81122394:	a0e8703a 	and	r20,r20,r3
81122398:	903f5e1e 	bne	r18,zero,81122114 <__reset+0xfb102114>
8112239c:	0039883a 	mov	fp,zero
811223a0:	4802a626 	beq	r9,zero,81122e3c <___vfiprintf_internal_r+0x1410>
811223a4:	0025883a 	mov	r18,zero
811223a8:	0027883a 	mov	r19,zero
811223ac:	003f5a06 	br	81122118 <__reset+0xfb102118>
811223b0:	21003fcc 	andi	r4,r4,255
811223b4:	20029f1e 	bne	r4,zero,81122e34 <___vfiprintf_internal_r+0x1408>
811223b8:	a5000414 	ori	r20,r20,16
811223bc:	a080080c 	andi	r2,r20,32
811223c0:	10005e1e 	bne	r2,zero,8112253c <___vfiprintf_internal_r+0xb10>
811223c4:	a080040c 	andi	r2,r20,16
811223c8:	1001a21e 	bne	r2,zero,81122a54 <___vfiprintf_internal_r+0x1028>
811223cc:	a080100c 	andi	r2,r20,64
811223d0:	d8001d85 	stb	zero,118(sp)
811223d4:	da802217 	ldw	r10,136(sp)
811223d8:	1002231e 	bne	r2,zero,81122c68 <___vfiprintf_internal_r+0x123c>
811223dc:	50800104 	addi	r2,r10,4
811223e0:	54800017 	ldw	r18,0(r10)
811223e4:	0027883a 	mov	r19,zero
811223e8:	4801a00e 	bge	r9,zero,81122a6c <___vfiprintf_internal_r+0x1040>
811223ec:	d8802215 	stw	r2,136(sp)
811223f0:	0039883a 	mov	fp,zero
811223f4:	94c4b03a 	or	r2,r18,r19
811223f8:	103f901e 	bne	r2,zero,8112223c <__reset+0xfb10223c>
811223fc:	00800044 	movi	r2,1
81122400:	10803fcc 	andi	r2,r2,255
81122404:	00c00044 	movi	r3,1
81122408:	10c05926 	beq	r2,r3,81122570 <___vfiprintf_internal_r+0xb44>
8112240c:	00c00084 	movi	r3,2
81122410:	10ffe41e 	bne	r2,r3,811223a4 <__reset+0xfb1023a4>
81122414:	0025883a 	mov	r18,zero
81122418:	0027883a 	mov	r19,zero
8112241c:	00013d06 	br	81122914 <___vfiprintf_internal_r+0xee8>
81122420:	21003fcc 	andi	r4,r4,255
81122424:	2002811e 	bne	r4,zero,81122e2c <___vfiprintf_internal_r+0x1400>
81122428:	00a04534 	movhi	r2,33044
8112242c:	10b9c504 	addi	r2,r2,-6380
81122430:	d8802615 	stw	r2,152(sp)
81122434:	a080080c 	andi	r2,r20,32
81122438:	103f561e 	bne	r2,zero,81122194 <__reset+0xfb102194>
8112243c:	a080040c 	andi	r2,r20,16
81122440:	1001d126 	beq	r2,zero,81122b88 <___vfiprintf_internal_r+0x115c>
81122444:	da802217 	ldw	r10,136(sp)
81122448:	0027883a 	mov	r19,zero
8112244c:	54800017 	ldw	r18,0(r10)
81122450:	52800104 	addi	r10,r10,4
81122454:	da802215 	stw	r10,136(sp)
81122458:	003f5306 	br	811221a8 <__reset+0xfb1021a8>
8112245c:	da802217 	ldw	r10,136(sp)
81122460:	d8001d85 	stb	zero,118(sp)
81122464:	55400017 	ldw	r21,0(r10)
81122468:	50c00104 	addi	r3,r10,4
8112246c:	a8024226 	beq	r21,zero,81122d78 <___vfiprintf_internal_r+0x134c>
81122470:	48021816 	blt	r9,zero,81122cd4 <___vfiprintf_internal_r+0x12a8>
81122474:	480d883a 	mov	r6,r9
81122478:	000b883a 	mov	r5,zero
8112247c:	a809883a 	mov	r4,r21
81122480:	d8c02a15 	stw	r3,168(sp)
81122484:	da002b15 	stw	r8,172(sp)
81122488:	da402c15 	stw	r9,176(sp)
8112248c:	111c8080 	call	8111c808 <memchr>
81122490:	d8c02a17 	ldw	r3,168(sp)
81122494:	da002b17 	ldw	r8,172(sp)
81122498:	da402c17 	ldw	r9,176(sp)
8112249c:	10024826 	beq	r2,zero,81122dc0 <___vfiprintf_internal_r+0x1394>
811224a0:	1567c83a 	sub	r19,r2,r21
811224a4:	df001d83 	ldbu	fp,118(sp)
811224a8:	d8c02215 	stw	r3,136(sp)
811224ac:	0013883a 	mov	r9,zero
811224b0:	003e6006 	br	81121e34 <__reset+0xfb101e34>
811224b4:	21003fcc 	andi	r4,r4,255
811224b8:	203fc026 	beq	r4,zero,811223bc <__reset+0xfb1023bc>
811224bc:	d9c01d85 	stb	r7,118(sp)
811224c0:	003fbe06 	br	811223bc <__reset+0xfb1023bc>
811224c4:	da802217 	ldw	r10,136(sp)
811224c8:	54400017 	ldw	r17,0(r10)
811224cc:	50800104 	addi	r2,r10,4
811224d0:	883e3b16 	blt	r17,zero,81121dc0 <__reset+0xfb101dc0>
811224d4:	d8802215 	stw	r2,136(sp)
811224d8:	80c00007 	ldb	r3,0(r16)
811224dc:	003db406 	br	81121bb0 <__reset+0xfb101bb0>
811224e0:	01000044 	movi	r4,1
811224e4:	01c00ac4 	movi	r7,43
811224e8:	80c00007 	ldb	r3,0(r16)
811224ec:	003db006 	br	81121bb0 <__reset+0xfb101bb0>
811224f0:	80c00007 	ldb	r3,0(r16)
811224f4:	82800044 	addi	r10,r16,1
811224f8:	1b423c26 	beq	r3,r13,81122dec <___vfiprintf_internal_r+0x13c0>
811224fc:	18bff404 	addi	r2,r3,-48
81122500:	0013883a 	mov	r9,zero
81122504:	30822b36 	bltu	r6,r2,81122db4 <___vfiprintf_internal_r+0x1388>
81122508:	50c00007 	ldb	r3,0(r10)
8112250c:	4a4002a4 	muli	r9,r9,10
81122510:	54000044 	addi	r16,r10,1
81122514:	8015883a 	mov	r10,r16
81122518:	4893883a 	add	r9,r9,r2
8112251c:	18bff404 	addi	r2,r3,-48
81122520:	30bff92e 	bgeu	r6,r2,81122508 <__reset+0xfb102508>
81122524:	483da30e 	bge	r9,zero,81121bb4 <__reset+0xfb101bb4>
81122528:	027fffc4 	movi	r9,-1
8112252c:	003da106 	br	81121bb4 <__reset+0xfb101bb4>
81122530:	a5001014 	ori	r20,r20,64
81122534:	80c00007 	ldb	r3,0(r16)
81122538:	003d9d06 	br	81121bb0 <__reset+0xfb101bb0>
8112253c:	da802217 	ldw	r10,136(sp)
81122540:	d8001d85 	stb	zero,118(sp)
81122544:	50c00204 	addi	r3,r10,8
81122548:	54800017 	ldw	r18,0(r10)
8112254c:	54c00117 	ldw	r19,4(r10)
81122550:	4801ca16 	blt	r9,zero,81122c7c <___vfiprintf_internal_r+0x1250>
81122554:	013fdfc4 	movi	r4,-129
81122558:	94c4b03a 	or	r2,r18,r19
8112255c:	d8c02215 	stw	r3,136(sp)
81122560:	a128703a 	and	r20,r20,r4
81122564:	0039883a 	mov	fp,zero
81122568:	103f341e 	bne	r2,zero,8112223c <__reset+0xfb10223c>
8112256c:	483e2e26 	beq	r9,zero,81121e28 <__reset+0xfb101e28>
81122570:	0025883a 	mov	r18,zero
81122574:	94800c04 	addi	r18,r18,48
81122578:	dc8019c5 	stb	r18,103(sp)
8112257c:	dcc02717 	ldw	r19,156(sp)
81122580:	dd4019c4 	addi	r21,sp,103
81122584:	003e2b06 	br	81121e34 <__reset+0xfb101e34>
81122588:	21003fcc 	andi	r4,r4,255
8112258c:	2002361e 	bne	r4,zero,81122e68 <___vfiprintf_internal_r+0x143c>
81122590:	1801c126 	beq	r3,zero,81122c98 <___vfiprintf_internal_r+0x126c>
81122594:	04800044 	movi	r18,1
81122598:	d8c01005 	stb	r3,64(sp)
8112259c:	d8001d85 	stb	zero,118(sp)
811225a0:	9027883a 	mov	r19,r18
811225a4:	dd401004 	addi	r21,sp,64
811225a8:	003f1106 	br	811221f0 <__reset+0xfb1021f0>
811225ac:	d9402117 	ldw	r5,132(sp)
811225b0:	d9002017 	ldw	r4,128(sp)
811225b4:	d9801a04 	addi	r6,sp,104
811225b8:	d9c02b15 	stw	r7,172(sp)
811225bc:	dbc02a15 	stw	r15,168(sp)
811225c0:	11219100 	call	81121910 <__sprint_r.part.0>
811225c4:	d9c02b17 	ldw	r7,172(sp)
811225c8:	dbc02a17 	ldw	r15,168(sp)
811225cc:	10006d1e 	bne	r2,zero,81122784 <___vfiprintf_internal_r+0xd58>
811225d0:	d9801b17 	ldw	r6,108(sp)
811225d4:	d8801c17 	ldw	r2,112(sp)
811225d8:	d811883a 	mov	r8,sp
811225dc:	31400044 	addi	r5,r6,1
811225e0:	003e3306 	br	81121eb0 <__reset+0xfb101eb0>
811225e4:	d9401b17 	ldw	r5,108(sp)
811225e8:	d8801c17 	ldw	r2,112(sp)
811225ec:	29000044 	addi	r4,r5,1
811225f0:	d8c01d87 	ldb	r3,118(sp)
811225f4:	183e4d26 	beq	r3,zero,81121f2c <__reset+0xfb101f2c>
811225f8:	00c00044 	movi	r3,1
811225fc:	d9401d84 	addi	r5,sp,118
81122600:	10c5883a 	add	r2,r2,r3
81122604:	41400015 	stw	r5,0(r8)
81122608:	40c00115 	stw	r3,4(r8)
8112260c:	d8801c15 	stw	r2,112(sp)
81122610:	d9001b15 	stw	r4,108(sp)
81122614:	014001c4 	movi	r5,7
81122618:	2900a90e 	bge	r5,r4,811228c0 <___vfiprintf_internal_r+0xe94>
8112261c:	1000da1e 	bne	r2,zero,81122988 <___vfiprintf_internal_r+0xf5c>
81122620:	7000ab1e 	bne	r14,zero,811228d0 <___vfiprintf_internal_r+0xea4>
81122624:	000b883a 	mov	r5,zero
81122628:	1809883a 	mov	r4,r3
8112262c:	d811883a 	mov	r8,sp
81122630:	00c02004 	movi	r3,128
81122634:	e0fe4d26 	beq	fp,r3,81121f6c <__reset+0xfb101f6c>
81122638:	4cf9c83a 	sub	fp,r9,r19
8112263c:	073e7b0e 	bge	zero,fp,8112202c <__reset+0xfb10202c>
81122640:	01c00404 	movi	r7,16
81122644:	3f01900e 	bge	r7,fp,81122c88 <___vfiprintf_internal_r+0x125c>
81122648:	00e04534 	movhi	r3,33044
8112264c:	18fa5c04 	addi	r3,r3,-5776
81122650:	d8c02415 	stw	r3,144(sp)
81122654:	034001c4 	movi	r13,7
81122658:	00000506 	br	81122670 <___vfiprintf_internal_r+0xc44>
8112265c:	29000084 	addi	r4,r5,2
81122660:	42000204 	addi	r8,r8,8
81122664:	180b883a 	mov	r5,r3
81122668:	e73ffc04 	addi	fp,fp,-16
8112266c:	3f000d0e 	bge	r7,fp,811226a4 <___vfiprintf_internal_r+0xc78>
81122670:	10800404 	addi	r2,r2,16
81122674:	28c00044 	addi	r3,r5,1
81122678:	45c00015 	stw	r23,0(r8)
8112267c:	41c00115 	stw	r7,4(r8)
81122680:	d8801c15 	stw	r2,112(sp)
81122684:	d8c01b15 	stw	r3,108(sp)
81122688:	68fff40e 	bge	r13,r3,8112265c <__reset+0xfb10265c>
8112268c:	1000101e 	bne	r2,zero,811226d0 <___vfiprintf_internal_r+0xca4>
81122690:	e73ffc04 	addi	fp,fp,-16
81122694:	01000044 	movi	r4,1
81122698:	000b883a 	mov	r5,zero
8112269c:	d811883a 	mov	r8,sp
811226a0:	3f3ff316 	blt	r7,fp,81122670 <__reset+0xfb102670>
811226a4:	da802417 	ldw	r10,144(sp)
811226a8:	1705883a 	add	r2,r2,fp
811226ac:	47000115 	stw	fp,4(r8)
811226b0:	42800015 	stw	r10,0(r8)
811226b4:	d8801c15 	stw	r2,112(sp)
811226b8:	d9001b15 	stw	r4,108(sp)
811226bc:	00c001c4 	movi	r3,7
811226c0:	19003616 	blt	r3,r4,8112279c <___vfiprintf_internal_r+0xd70>
811226c4:	42000204 	addi	r8,r8,8
811226c8:	21000044 	addi	r4,r4,1
811226cc:	003e5706 	br	8112202c <__reset+0xfb10202c>
811226d0:	d9402117 	ldw	r5,132(sp)
811226d4:	d9002017 	ldw	r4,128(sp)
811226d8:	d9801a04 	addi	r6,sp,104
811226dc:	d9c02b15 	stw	r7,172(sp)
811226e0:	db402a15 	stw	r13,168(sp)
811226e4:	11219100 	call	81121910 <__sprint_r.part.0>
811226e8:	d9c02b17 	ldw	r7,172(sp)
811226ec:	db402a17 	ldw	r13,168(sp)
811226f0:	1000241e 	bne	r2,zero,81122784 <___vfiprintf_internal_r+0xd58>
811226f4:	d9401b17 	ldw	r5,108(sp)
811226f8:	d8801c17 	ldw	r2,112(sp)
811226fc:	d811883a 	mov	r8,sp
81122700:	29000044 	addi	r4,r5,1
81122704:	003fd806 	br	81122668 <__reset+0xfb102668>
81122708:	d9401b17 	ldw	r5,108(sp)
8112270c:	00e04534 	movhi	r3,33044
81122710:	18fa6004 	addi	r3,r3,-5760
81122714:	d8c02415 	stw	r3,144(sp)
81122718:	29400044 	addi	r5,r5,1
8112271c:	d8c02417 	ldw	r3,144(sp)
81122720:	14c5883a 	add	r2,r2,r19
81122724:	44c00115 	stw	r19,4(r8)
81122728:	40c00015 	stw	r3,0(r8)
8112272c:	d8801c15 	stw	r2,112(sp)
81122730:	d9401b15 	stw	r5,108(sp)
81122734:	00c001c4 	movi	r3,7
81122738:	1940070e 	bge	r3,r5,81122758 <___vfiprintf_internal_r+0xd2c>
8112273c:	103e4826 	beq	r2,zero,81122060 <__reset+0xfb102060>
81122740:	d9402117 	ldw	r5,132(sp)
81122744:	d9002017 	ldw	r4,128(sp)
81122748:	d9801a04 	addi	r6,sp,104
8112274c:	11219100 	call	81121910 <__sprint_r.part.0>
81122750:	10000c1e 	bne	r2,zero,81122784 <___vfiprintf_internal_r+0xd58>
81122754:	d8801c17 	ldw	r2,112(sp)
81122758:	8c80010e 	bge	r17,r18,81122760 <___vfiprintf_internal_r+0xd34>
8112275c:	9023883a 	mov	r17,r18
81122760:	da802317 	ldw	r10,140(sp)
81122764:	5455883a 	add	r10,r10,r17
81122768:	da802315 	stw	r10,140(sp)
8112276c:	103e4126 	beq	r2,zero,81122074 <__reset+0xfb102074>
81122770:	d9402117 	ldw	r5,132(sp)
81122774:	d9002017 	ldw	r4,128(sp)
81122778:	d9801a04 	addi	r6,sp,104
8112277c:	11219100 	call	81121910 <__sprint_r.part.0>
81122780:	103e3c26 	beq	r2,zero,81122074 <__reset+0xfb102074>
81122784:	dd002117 	ldw	r20,132(sp)
81122788:	a080030b 	ldhu	r2,12(r20)
8112278c:	1080100c 	andi	r2,r2,64
81122790:	1001231e 	bne	r2,zero,81122c20 <___vfiprintf_internal_r+0x11f4>
81122794:	d8802317 	ldw	r2,140(sp)
81122798:	003d7b06 	br	81121d88 <__reset+0xfb101d88>
8112279c:	1000991e 	bne	r2,zero,81122a04 <___vfiprintf_internal_r+0xfd8>
811227a0:	00c00044 	movi	r3,1
811227a4:	9805883a 	mov	r2,r19
811227a8:	dd400015 	stw	r21,0(sp)
811227ac:	dcc00115 	stw	r19,4(sp)
811227b0:	dcc01c15 	stw	r19,112(sp)
811227b4:	d8c01b15 	stw	r3,108(sp)
811227b8:	d811883a 	mov	r8,sp
811227bc:	42000204 	addi	r8,r8,8
811227c0:	a2c0010c 	andi	r11,r20,4
811227c4:	583fe426 	beq	r11,zero,81122758 <__reset+0xfb102758>
811227c8:	8ca7c83a 	sub	r19,r17,r18
811227cc:	04ffe20e 	bge	zero,r19,81122758 <__reset+0xfb102758>
811227d0:	01c00404 	movi	r7,16
811227d4:	3cffcc0e 	bge	r7,r19,81122708 <__reset+0xfb102708>
811227d8:	02a04534 	movhi	r10,33044
811227dc:	52ba6004 	addi	r10,r10,-5760
811227e0:	d9001b17 	ldw	r4,108(sp)
811227e4:	da802415 	stw	r10,144(sp)
811227e8:	382b883a 	mov	r21,r7
811227ec:	050001c4 	movi	r20,7
811227f0:	df002017 	ldw	fp,128(sp)
811227f4:	00000506 	br	8112280c <___vfiprintf_internal_r+0xde0>
811227f8:	21400084 	addi	r5,r4,2
811227fc:	42000204 	addi	r8,r8,8
81122800:	1809883a 	mov	r4,r3
81122804:	9cfffc04 	addi	r19,r19,-16
81122808:	acffc40e 	bge	r21,r19,8112271c <__reset+0xfb10271c>
8112280c:	10800404 	addi	r2,r2,16
81122810:	20c00044 	addi	r3,r4,1
81122814:	45800015 	stw	r22,0(r8)
81122818:	45400115 	stw	r21,4(r8)
8112281c:	d8801c15 	stw	r2,112(sp)
81122820:	d8c01b15 	stw	r3,108(sp)
81122824:	a0fff40e 	bge	r20,r3,811227f8 <__reset+0xfb1027f8>
81122828:	1000041e 	bne	r2,zero,8112283c <___vfiprintf_internal_r+0xe10>
8112282c:	01400044 	movi	r5,1
81122830:	0009883a 	mov	r4,zero
81122834:	d811883a 	mov	r8,sp
81122838:	003ff206 	br	81122804 <__reset+0xfb102804>
8112283c:	d9402117 	ldw	r5,132(sp)
81122840:	d9801a04 	addi	r6,sp,104
81122844:	e009883a 	mov	r4,fp
81122848:	11219100 	call	81121910 <__sprint_r.part.0>
8112284c:	103fcd1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122850:	d9001b17 	ldw	r4,108(sp)
81122854:	d8801c17 	ldw	r2,112(sp)
81122858:	d811883a 	mov	r8,sp
8112285c:	21400044 	addi	r5,r4,1
81122860:	003fe806 	br	81122804 <__reset+0xfb102804>
81122864:	d9402117 	ldw	r5,132(sp)
81122868:	d9002017 	ldw	r4,128(sp)
8112286c:	d9801a04 	addi	r6,sp,104
81122870:	d9c02b15 	stw	r7,172(sp)
81122874:	db402a15 	stw	r13,168(sp)
81122878:	11219100 	call	81121910 <__sprint_r.part.0>
8112287c:	d9c02b17 	ldw	r7,172(sp)
81122880:	db402a17 	ldw	r13,168(sp)
81122884:	103fbf1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122888:	d9401b17 	ldw	r5,108(sp)
8112288c:	d8801c17 	ldw	r2,112(sp)
81122890:	d811883a 	mov	r8,sp
81122894:	29800044 	addi	r6,r5,1
81122898:	003dc406 	br	81121fac <__reset+0xfb101fac>
8112289c:	1000d21e 	bne	r2,zero,81122be8 <___vfiprintf_internal_r+0x11bc>
811228a0:	d8c01d87 	ldb	r3,118(sp)
811228a4:	18009526 	beq	r3,zero,81122afc <___vfiprintf_internal_r+0x10d0>
811228a8:	00800044 	movi	r2,1
811228ac:	d8c01d84 	addi	r3,sp,118
811228b0:	1009883a 	mov	r4,r2
811228b4:	d8c00015 	stw	r3,0(sp)
811228b8:	d8800115 	stw	r2,4(sp)
811228bc:	d811883a 	mov	r8,sp
811228c0:	200b883a 	mov	r5,r4
811228c4:	42000204 	addi	r8,r8,8
811228c8:	21000044 	addi	r4,r4,1
811228cc:	003d9706 	br	81121f2c <__reset+0xfb101f2c>
811228d0:	d9001d04 	addi	r4,sp,116
811228d4:	00800084 	movi	r2,2
811228d8:	d9000015 	stw	r4,0(sp)
811228dc:	d8800115 	stw	r2,4(sp)
811228e0:	1809883a 	mov	r4,r3
811228e4:	d811883a 	mov	r8,sp
811228e8:	200b883a 	mov	r5,r4
811228ec:	42000204 	addi	r8,r8,8
811228f0:	21000044 	addi	r4,r4,1
811228f4:	003f4e06 	br	81122630 <__reset+0xfb102630>
811228f8:	d8001d85 	stb	zero,118(sp)
811228fc:	48005016 	blt	r9,zero,81122a40 <___vfiprintf_internal_r+0x1014>
81122900:	00ffdfc4 	movi	r3,-129
81122904:	94c4b03a 	or	r2,r18,r19
81122908:	a0e8703a 	and	r20,r20,r3
8112290c:	103d4426 	beq	r2,zero,81121e20 <__reset+0xfb101e20>
81122910:	0039883a 	mov	fp,zero
81122914:	d9002617 	ldw	r4,152(sp)
81122918:	dd401a04 	addi	r21,sp,104
8112291c:	908003cc 	andi	r2,r18,15
81122920:	9806973a 	slli	r3,r19,28
81122924:	2085883a 	add	r2,r4,r2
81122928:	9024d13a 	srli	r18,r18,4
8112292c:	10800003 	ldbu	r2,0(r2)
81122930:	9826d13a 	srli	r19,r19,4
81122934:	ad7fffc4 	addi	r21,r21,-1
81122938:	1ca4b03a 	or	r18,r3,r18
8112293c:	a8800005 	stb	r2,0(r21)
81122940:	94c4b03a 	or	r2,r18,r19
81122944:	103ff51e 	bne	r2,zero,8112291c <__reset+0xfb10291c>
81122948:	003e5906 	br	811222b0 <__reset+0xfb1022b0>
8112294c:	d9402117 	ldw	r5,132(sp)
81122950:	d9002017 	ldw	r4,128(sp)
81122954:	d9801a04 	addi	r6,sp,104
81122958:	11219100 	call	81121910 <__sprint_r.part.0>
8112295c:	103f891e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122960:	d8801c17 	ldw	r2,112(sp)
81122964:	d811883a 	mov	r8,sp
81122968:	003f9506 	br	811227c0 <__reset+0xfb1027c0>
8112296c:	d9402117 	ldw	r5,132(sp)
81122970:	d9002017 	ldw	r4,128(sp)
81122974:	d9801a04 	addi	r6,sp,104
81122978:	11219100 	call	81121910 <__sprint_r.part.0>
8112297c:	103f811e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122980:	d811883a 	mov	r8,sp
81122984:	003ced06 	br	81121d3c <__reset+0xfb101d3c>
81122988:	d9402117 	ldw	r5,132(sp)
8112298c:	d9002017 	ldw	r4,128(sp)
81122990:	d9801a04 	addi	r6,sp,104
81122994:	da402c15 	stw	r9,176(sp)
81122998:	db802a15 	stw	r14,168(sp)
8112299c:	11219100 	call	81121910 <__sprint_r.part.0>
811229a0:	da402c17 	ldw	r9,176(sp)
811229a4:	db802a17 	ldw	r14,168(sp)
811229a8:	103f761e 	bne	r2,zero,81122784 <__reset+0xfb102784>
811229ac:	d9401b17 	ldw	r5,108(sp)
811229b0:	d8801c17 	ldw	r2,112(sp)
811229b4:	d811883a 	mov	r8,sp
811229b8:	29000044 	addi	r4,r5,1
811229bc:	003d5b06 	br	81121f2c <__reset+0xfb101f2c>
811229c0:	d9402117 	ldw	r5,132(sp)
811229c4:	d9002017 	ldw	r4,128(sp)
811229c8:	d9801a04 	addi	r6,sp,104
811229cc:	da402c15 	stw	r9,176(sp)
811229d0:	11219100 	call	81121910 <__sprint_r.part.0>
811229d4:	da402c17 	ldw	r9,176(sp)
811229d8:	103f6a1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
811229dc:	d9401b17 	ldw	r5,108(sp)
811229e0:	d8801c17 	ldw	r2,112(sp)
811229e4:	d811883a 	mov	r8,sp
811229e8:	29000044 	addi	r4,r5,1
811229ec:	003f1006 	br	81122630 <__reset+0xfb102630>
811229f0:	1000c31e 	bne	r2,zero,81122d00 <___vfiprintf_internal_r+0x12d4>
811229f4:	01000044 	movi	r4,1
811229f8:	000b883a 	mov	r5,zero
811229fc:	d811883a 	mov	r8,sp
81122a00:	003f0d06 	br	81122638 <__reset+0xfb102638>
81122a04:	d9402117 	ldw	r5,132(sp)
81122a08:	d9002017 	ldw	r4,128(sp)
81122a0c:	d9801a04 	addi	r6,sp,104
81122a10:	11219100 	call	81121910 <__sprint_r.part.0>
81122a14:	103f5b1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122a18:	d9001b17 	ldw	r4,108(sp)
81122a1c:	d8801c17 	ldw	r2,112(sp)
81122a20:	d811883a 	mov	r8,sp
81122a24:	21000044 	addi	r4,r4,1
81122a28:	003d8006 	br	8112202c <__reset+0xfb10202c>
81122a2c:	01204534 	movhi	r4,33044
81122a30:	2139ca04 	addi	r4,r4,-6360
81122a34:	d9002615 	stw	r4,152(sp)
81122a38:	d8c02215 	stw	r3,136(sp)
81122a3c:	1029883a 	mov	r20,r2
81122a40:	94c4b03a 	or	r2,r18,r19
81122a44:	103fb21e 	bne	r2,zero,81122910 <__reset+0xfb102910>
81122a48:	0039883a 	mov	fp,zero
81122a4c:	00800084 	movi	r2,2
81122a50:	003e6b06 	br	81122400 <__reset+0xfb102400>
81122a54:	da802217 	ldw	r10,136(sp)
81122a58:	d8001d85 	stb	zero,118(sp)
81122a5c:	0027883a 	mov	r19,zero
81122a60:	50800104 	addi	r2,r10,4
81122a64:	54800017 	ldw	r18,0(r10)
81122a68:	483e6016 	blt	r9,zero,811223ec <__reset+0xfb1023ec>
81122a6c:	00ffdfc4 	movi	r3,-129
81122a70:	d8802215 	stw	r2,136(sp)
81122a74:	a0e8703a 	and	r20,r20,r3
81122a78:	0039883a 	mov	fp,zero
81122a7c:	903ebb26 	beq	r18,zero,8112256c <__reset+0xfb10256c>
81122a80:	00800244 	movi	r2,9
81122a84:	14bdee36 	bltu	r2,r18,81122240 <__reset+0xfb102240>
81122a88:	003eba06 	br	81122574 <__reset+0xfb102574>
81122a8c:	00800c04 	movi	r2,48
81122a90:	d8c01d45 	stb	r3,117(sp)
81122a94:	d8801d05 	stb	r2,116(sp)
81122a98:	d8001d85 	stb	zero,118(sp)
81122a9c:	a0c00094 	ori	r3,r20,2
81122aa0:	4800a916 	blt	r9,zero,81122d48 <___vfiprintf_internal_r+0x131c>
81122aa4:	00bfdfc4 	movi	r2,-129
81122aa8:	a096703a 	and	r11,r20,r2
81122aac:	5d000094 	ori	r20,r11,2
81122ab0:	0039883a 	mov	fp,zero
81122ab4:	003f9706 	br	81122914 <__reset+0xfb102914>
81122ab8:	8025883a 	mov	r18,r16
81122abc:	003c2e06 	br	81121b78 <__reset+0xfb101b78>
81122ac0:	00a04534 	movhi	r2,33044
81122ac4:	10b9ca04 	addi	r2,r2,-6360
81122ac8:	0039883a 	mov	fp,zero
81122acc:	d8802615 	stw	r2,152(sp)
81122ad0:	003f9006 	br	81122914 <__reset+0xfb102914>
81122ad4:	04a5c83a 	sub	r18,zero,r18
81122ad8:	07000b44 	movi	fp,45
81122adc:	9004c03a 	cmpne	r2,r18,zero
81122ae0:	04e7c83a 	sub	r19,zero,r19
81122ae4:	df001d85 	stb	fp,118(sp)
81122ae8:	98a7c83a 	sub	r19,r19,r2
81122aec:	48009f16 	blt	r9,zero,81122d6c <___vfiprintf_internal_r+0x1340>
81122af0:	00bfdfc4 	movi	r2,-129
81122af4:	a0a8703a 	and	r20,r20,r2
81122af8:	003dd006 	br	8112223c <__reset+0xfb10223c>
81122afc:	70004c26 	beq	r14,zero,81122c30 <___vfiprintf_internal_r+0x1204>
81122b00:	00800084 	movi	r2,2
81122b04:	d8c01d04 	addi	r3,sp,116
81122b08:	d8c00015 	stw	r3,0(sp)
81122b0c:	d8800115 	stw	r2,4(sp)
81122b10:	01000044 	movi	r4,1
81122b14:	d811883a 	mov	r8,sp
81122b18:	003f7306 	br	811228e8 <__reset+0xfb1028e8>
81122b1c:	a080100c 	andi	r2,r20,64
81122b20:	da802217 	ldw	r10,136(sp)
81122b24:	103e0626 	beq	r2,zero,81122340 <__reset+0xfb102340>
81122b28:	5480000f 	ldh	r18,0(r10)
81122b2c:	52800104 	addi	r10,r10,4
81122b30:	da802215 	stw	r10,136(sp)
81122b34:	9027d7fa 	srai	r19,r18,31
81122b38:	9805883a 	mov	r2,r19
81122b3c:	003db806 	br	81122220 <__reset+0xfb102220>
81122b40:	a080040c 	andi	r2,r20,16
81122b44:	1000091e 	bne	r2,zero,81122b6c <___vfiprintf_internal_r+0x1140>
81122b48:	a2c0100c 	andi	r11,r20,64
81122b4c:	58000726 	beq	r11,zero,81122b6c <___vfiprintf_internal_r+0x1140>
81122b50:	da802217 	ldw	r10,136(sp)
81122b54:	50800017 	ldw	r2,0(r10)
81122b58:	52800104 	addi	r10,r10,4
81122b5c:	da802215 	stw	r10,136(sp)
81122b60:	da802317 	ldw	r10,140(sp)
81122b64:	1280000d 	sth	r10,0(r2)
81122b68:	003be706 	br	81121b08 <__reset+0xfb101b08>
81122b6c:	da802217 	ldw	r10,136(sp)
81122b70:	50800017 	ldw	r2,0(r10)
81122b74:	52800104 	addi	r10,r10,4
81122b78:	da802215 	stw	r10,136(sp)
81122b7c:	da802317 	ldw	r10,140(sp)
81122b80:	12800015 	stw	r10,0(r2)
81122b84:	003be006 	br	81121b08 <__reset+0xfb101b08>
81122b88:	a080100c 	andi	r2,r20,64
81122b8c:	da802217 	ldw	r10,136(sp)
81122b90:	10003026 	beq	r2,zero,81122c54 <___vfiprintf_internal_r+0x1228>
81122b94:	5480000b 	ldhu	r18,0(r10)
81122b98:	52800104 	addi	r10,r10,4
81122b9c:	0027883a 	mov	r19,zero
81122ba0:	da802215 	stw	r10,136(sp)
81122ba4:	003d8006 	br	811221a8 <__reset+0xfb1021a8>
81122ba8:	80c00007 	ldb	r3,0(r16)
81122bac:	003c0006 	br	81121bb0 <__reset+0xfb101bb0>
81122bb0:	a080100c 	andi	r2,r20,64
81122bb4:	d8001d85 	stb	zero,118(sp)
81122bb8:	da802217 	ldw	r10,136(sp)
81122bbc:	1000201e 	bne	r2,zero,81122c40 <___vfiprintf_internal_r+0x1214>
81122bc0:	50800104 	addi	r2,r10,4
81122bc4:	54800017 	ldw	r18,0(r10)
81122bc8:	0027883a 	mov	r19,zero
81122bcc:	483def0e 	bge	r9,zero,8112238c <__reset+0xfb10238c>
81122bd0:	94c6b03a 	or	r3,r18,r19
81122bd4:	d8802215 	stw	r2,136(sp)
81122bd8:	183d4e1e 	bne	r3,zero,81122114 <__reset+0xfb102114>
81122bdc:	0039883a 	mov	fp,zero
81122be0:	0005883a 	mov	r2,zero
81122be4:	003e0606 	br	81122400 <__reset+0xfb102400>
81122be8:	d9402117 	ldw	r5,132(sp)
81122bec:	d9002017 	ldw	r4,128(sp)
81122bf0:	d9801a04 	addi	r6,sp,104
81122bf4:	da402c15 	stw	r9,176(sp)
81122bf8:	db802a15 	stw	r14,168(sp)
81122bfc:	11219100 	call	81121910 <__sprint_r.part.0>
81122c00:	da402c17 	ldw	r9,176(sp)
81122c04:	db802a17 	ldw	r14,168(sp)
81122c08:	103ede1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122c0c:	d9401b17 	ldw	r5,108(sp)
81122c10:	d8801c17 	ldw	r2,112(sp)
81122c14:	d811883a 	mov	r8,sp
81122c18:	29000044 	addi	r4,r5,1
81122c1c:	003e7406 	br	811225f0 <__reset+0xfb1025f0>
81122c20:	00bfffc4 	movi	r2,-1
81122c24:	003c5806 	br	81121d88 <__reset+0xfb101d88>
81122c28:	d811883a 	mov	r8,sp
81122c2c:	003ee806 	br	811227d0 <__reset+0xfb1027d0>
81122c30:	000b883a 	mov	r5,zero
81122c34:	01000044 	movi	r4,1
81122c38:	d811883a 	mov	r8,sp
81122c3c:	003e7c06 	br	81122630 <__reset+0xfb102630>
81122c40:	50800104 	addi	r2,r10,4
81122c44:	5480000b 	ldhu	r18,0(r10)
81122c48:	0027883a 	mov	r19,zero
81122c4c:	483dcf0e 	bge	r9,zero,8112238c <__reset+0xfb10238c>
81122c50:	003fdf06 	br	81122bd0 <__reset+0xfb102bd0>
81122c54:	54800017 	ldw	r18,0(r10)
81122c58:	52800104 	addi	r10,r10,4
81122c5c:	0027883a 	mov	r19,zero
81122c60:	da802215 	stw	r10,136(sp)
81122c64:	003d5006 	br	811221a8 <__reset+0xfb1021a8>
81122c68:	50800104 	addi	r2,r10,4
81122c6c:	5480000b 	ldhu	r18,0(r10)
81122c70:	0027883a 	mov	r19,zero
81122c74:	483f7d0e 	bge	r9,zero,81122a6c <__reset+0xfb102a6c>
81122c78:	003ddc06 	br	811223ec <__reset+0xfb1023ec>
81122c7c:	d8c02215 	stw	r3,136(sp)
81122c80:	0039883a 	mov	fp,zero
81122c84:	003ddb06 	br	811223f4 <__reset+0xfb1023f4>
81122c88:	02a04534 	movhi	r10,33044
81122c8c:	52ba5c04 	addi	r10,r10,-5776
81122c90:	da802415 	stw	r10,144(sp)
81122c94:	003e8306 	br	811226a4 <__reset+0xfb1026a4>
81122c98:	d8801c17 	ldw	r2,112(sp)
81122c9c:	dd002117 	ldw	r20,132(sp)
81122ca0:	103eb926 	beq	r2,zero,81122788 <__reset+0xfb102788>
81122ca4:	d9002017 	ldw	r4,128(sp)
81122ca8:	d9801a04 	addi	r6,sp,104
81122cac:	a00b883a 	mov	r5,r20
81122cb0:	11219100 	call	81121910 <__sprint_r.part.0>
81122cb4:	003eb406 	br	81122788 <__reset+0xfb102788>
81122cb8:	80c00043 	ldbu	r3,1(r16)
81122cbc:	a5000814 	ori	r20,r20,32
81122cc0:	84000044 	addi	r16,r16,1
81122cc4:	18c03fcc 	andi	r3,r3,255
81122cc8:	18c0201c 	xori	r3,r3,128
81122ccc:	18ffe004 	addi	r3,r3,-128
81122cd0:	003bb706 	br	81121bb0 <__reset+0xfb101bb0>
81122cd4:	a809883a 	mov	r4,r21
81122cd8:	d8c02a15 	stw	r3,168(sp)
81122cdc:	da002b15 	stw	r8,172(sp)
81122ce0:	11134b00 	call	811134b0 <strlen>
81122ce4:	d8c02a17 	ldw	r3,168(sp)
81122ce8:	1027883a 	mov	r19,r2
81122cec:	df001d83 	ldbu	fp,118(sp)
81122cf0:	d8c02215 	stw	r3,136(sp)
81122cf4:	0013883a 	mov	r9,zero
81122cf8:	da002b17 	ldw	r8,172(sp)
81122cfc:	003c4d06 	br	81121e34 <__reset+0xfb101e34>
81122d00:	d9402117 	ldw	r5,132(sp)
81122d04:	d9002017 	ldw	r4,128(sp)
81122d08:	d9801a04 	addi	r6,sp,104
81122d0c:	da402c15 	stw	r9,176(sp)
81122d10:	11219100 	call	81121910 <__sprint_r.part.0>
81122d14:	da402c17 	ldw	r9,176(sp)
81122d18:	103e9a1e 	bne	r2,zero,81122784 <__reset+0xfb102784>
81122d1c:	d9401b17 	ldw	r5,108(sp)
81122d20:	d8801c17 	ldw	r2,112(sp)
81122d24:	d811883a 	mov	r8,sp
81122d28:	29000044 	addi	r4,r5,1
81122d2c:	003e4206 	br	81122638 <__reset+0xfb102638>
81122d30:	d9401b17 	ldw	r5,108(sp)
81122d34:	01204534 	movhi	r4,33044
81122d38:	213a6004 	addi	r4,r4,-5760
81122d3c:	d9002415 	stw	r4,144(sp)
81122d40:	29400044 	addi	r5,r5,1
81122d44:	003c6d06 	br	81121efc <__reset+0xfb101efc>
81122d48:	0039883a 	mov	fp,zero
81122d4c:	00800084 	movi	r2,2
81122d50:	10803fcc 	andi	r2,r2,255
81122d54:	01000044 	movi	r4,1
81122d58:	11001e26 	beq	r2,r4,81122dd4 <___vfiprintf_internal_r+0x13a8>
81122d5c:	01000084 	movi	r4,2
81122d60:	11001e1e 	bne	r2,r4,81122ddc <___vfiprintf_internal_r+0x13b0>
81122d64:	1829883a 	mov	r20,r3
81122d68:	003eea06 	br	81122914 <__reset+0xfb102914>
81122d6c:	a007883a 	mov	r3,r20
81122d70:	00800044 	movi	r2,1
81122d74:	003ff606 	br	81122d50 <__reset+0xfb102d50>
81122d78:	00800184 	movi	r2,6
81122d7c:	1240012e 	bgeu	r2,r9,81122d84 <___vfiprintf_internal_r+0x1358>
81122d80:	1013883a 	mov	r9,r2
81122d84:	4827883a 	mov	r19,r9
81122d88:	4825883a 	mov	r18,r9
81122d8c:	48001516 	blt	r9,zero,81122de4 <___vfiprintf_internal_r+0x13b8>
81122d90:	05604534 	movhi	r21,33044
81122d94:	d8c02215 	stw	r3,136(sp)
81122d98:	ad79cf04 	addi	r21,r21,-6340
81122d9c:	003d1406 	br	811221f0 <__reset+0xfb1021f0>
81122da0:	02a04534 	movhi	r10,33044
81122da4:	52ba5c04 	addi	r10,r10,-5776
81122da8:	da802415 	stw	r10,144(sp)
81122dac:	200d883a 	mov	r6,r4
81122db0:	003c9106 	br	81121ff8 <__reset+0xfb101ff8>
81122db4:	5021883a 	mov	r16,r10
81122db8:	0013883a 	mov	r9,zero
81122dbc:	003b7d06 	br	81121bb4 <__reset+0xfb101bb4>
81122dc0:	4827883a 	mov	r19,r9
81122dc4:	df001d83 	ldbu	fp,118(sp)
81122dc8:	d8c02215 	stw	r3,136(sp)
81122dcc:	0013883a 	mov	r9,zero
81122dd0:	003c1806 	br	81121e34 <__reset+0xfb101e34>
81122dd4:	1829883a 	mov	r20,r3
81122dd8:	003d1806 	br	8112223c <__reset+0xfb10223c>
81122ddc:	1829883a 	mov	r20,r3
81122de0:	003ccd06 	br	81122118 <__reset+0xfb102118>
81122de4:	0025883a 	mov	r18,zero
81122de8:	003fe906 	br	81122d90 <__reset+0xfb102d90>
81122dec:	d8802217 	ldw	r2,136(sp)
81122df0:	80c00043 	ldbu	r3,1(r16)
81122df4:	5021883a 	mov	r16,r10
81122df8:	12400017 	ldw	r9,0(r2)
81122dfc:	10800104 	addi	r2,r2,4
81122e00:	d8802215 	stw	r2,136(sp)
81122e04:	483faf0e 	bge	r9,zero,81122cc4 <__reset+0xfb102cc4>
81122e08:	18c03fcc 	andi	r3,r3,255
81122e0c:	18c0201c 	xori	r3,r3,128
81122e10:	027fffc4 	movi	r9,-1
81122e14:	18ffe004 	addi	r3,r3,-128
81122e18:	003b6506 	br	81121bb0 <__reset+0xfb101bb0>
81122e1c:	d9c01d85 	stb	r7,118(sp)
81122e20:	003ca006 	br	811220a4 <__reset+0xfb1020a4>
81122e24:	d9c01d85 	stb	r7,118(sp)
81122e28:	003cad06 	br	811220e0 <__reset+0xfb1020e0>
81122e2c:	d9c01d85 	stb	r7,118(sp)
81122e30:	003d7d06 	br	81122428 <__reset+0xfb102428>
81122e34:	d9c01d85 	stb	r7,118(sp)
81122e38:	003d5f06 	br	811223b8 <__reset+0xfb1023b8>
81122e3c:	a080004c 	andi	r2,r20,1
81122e40:	0039883a 	mov	fp,zero
81122e44:	10000526 	beq	r2,zero,81122e5c <___vfiprintf_internal_r+0x1430>
81122e48:	00800c04 	movi	r2,48
81122e4c:	d88019c5 	stb	r2,103(sp)
81122e50:	dcc02717 	ldw	r19,156(sp)
81122e54:	dd4019c4 	addi	r21,sp,103
81122e58:	003bf606 	br	81121e34 <__reset+0xfb101e34>
81122e5c:	0027883a 	mov	r19,zero
81122e60:	dd401a04 	addi	r21,sp,104
81122e64:	003bf306 	br	81121e34 <__reset+0xfb101e34>
81122e68:	d9c01d85 	stb	r7,118(sp)
81122e6c:	003dc806 	br	81122590 <__reset+0xfb102590>
81122e70:	d9c01d85 	stb	r7,118(sp)
81122e74:	003d3a06 	br	81122360 <__reset+0xfb102360>
81122e78:	d9c01d85 	stb	r7,118(sp)
81122e7c:	003d2a06 	br	81122328 <__reset+0xfb102328>
81122e80:	d9c01d85 	stb	r7,118(sp)
81122e84:	003cde06 	br	81122200 <__reset+0xfb102200>
81122e88:	d9c01d85 	stb	r7,118(sp)
81122e8c:	003cbc06 	br	81122180 <__reset+0xfb102180>

81122e90 <__vfiprintf_internal>:
81122e90:	00a04534 	movhi	r2,33044
81122e94:	1082cb04 	addi	r2,r2,2860
81122e98:	300f883a 	mov	r7,r6
81122e9c:	280d883a 	mov	r6,r5
81122ea0:	200b883a 	mov	r5,r4
81122ea4:	11000017 	ldw	r4,0(r2)
81122ea8:	1121a2c1 	jmpi	81121a2c <___vfiprintf_internal_r>

81122eac <__sbprintf>:
81122eac:	defee204 	addi	sp,sp,-1144
81122eb0:	de00012e 	bgeu	sp,et,81122eb8 <__sbprintf+0xc>
81122eb4:	003b68fa 	trap	3
81122eb8:	2880030b 	ldhu	r2,12(r5)
81122ebc:	2ac01917 	ldw	r11,100(r5)
81122ec0:	2a80038b 	ldhu	r10,14(r5)
81122ec4:	2a400717 	ldw	r9,28(r5)
81122ec8:	2a000917 	ldw	r8,36(r5)
81122ecc:	00c10004 	movi	r3,1024
81122ed0:	dc011a15 	stw	r16,1128(sp)
81122ed4:	10bfff4c 	andi	r2,r2,65533
81122ed8:	2821883a 	mov	r16,r5
81122edc:	d8cb883a 	add	r5,sp,r3
81122ee0:	dc811c15 	stw	r18,1136(sp)
81122ee4:	dc411b15 	stw	r17,1132(sp)
81122ee8:	dfc11d15 	stw	ra,1140(sp)
81122eec:	2025883a 	mov	r18,r4
81122ef0:	d881030d 	sth	r2,1036(sp)
81122ef4:	dac11915 	stw	r11,1124(sp)
81122ef8:	da81038d 	sth	r10,1038(sp)
81122efc:	da410715 	stw	r9,1052(sp)
81122f00:	da010915 	stw	r8,1060(sp)
81122f04:	dec10015 	stw	sp,1024(sp)
81122f08:	dec10415 	stw	sp,1040(sp)
81122f0c:	d8c10215 	stw	r3,1032(sp)
81122f10:	d8c10515 	stw	r3,1044(sp)
81122f14:	d8010615 	stw	zero,1048(sp)
81122f18:	1121a2c0 	call	81121a2c <___vfiprintf_internal_r>
81122f1c:	1023883a 	mov	r17,r2
81122f20:	10000416 	blt	r2,zero,81122f34 <__sbprintf+0x88>
81122f24:	d9410004 	addi	r5,sp,1024
81122f28:	9009883a 	mov	r4,r18
81122f2c:	111b1e40 	call	8111b1e4 <_fflush_r>
81122f30:	10000d1e 	bne	r2,zero,81122f68 <__sbprintf+0xbc>
81122f34:	d881030b 	ldhu	r2,1036(sp)
81122f38:	1080100c 	andi	r2,r2,64
81122f3c:	10000326 	beq	r2,zero,81122f4c <__sbprintf+0xa0>
81122f40:	8080030b 	ldhu	r2,12(r16)
81122f44:	10801014 	ori	r2,r2,64
81122f48:	8080030d 	sth	r2,12(r16)
81122f4c:	8805883a 	mov	r2,r17
81122f50:	dfc11d17 	ldw	ra,1140(sp)
81122f54:	dc811c17 	ldw	r18,1136(sp)
81122f58:	dc411b17 	ldw	r17,1132(sp)
81122f5c:	dc011a17 	ldw	r16,1128(sp)
81122f60:	dec11e04 	addi	sp,sp,1144
81122f64:	f800283a 	ret
81122f68:	047fffc4 	movi	r17,-1
81122f6c:	003ff106 	br	81122f34 <__reset+0xfb102f34>

81122f70 <_calloc_r>:
81122f70:	298b383a 	mul	r5,r5,r6
81122f74:	defffe04 	addi	sp,sp,-8
81122f78:	de00012e 	bgeu	sp,et,81122f80 <_calloc_r+0x10>
81122f7c:	003b68fa 	trap	3
81122f80:	dfc00115 	stw	ra,4(sp)
81122f84:	dc000015 	stw	r16,0(sp)
81122f88:	11123200 	call	81112320 <_malloc_r>
81122f8c:	10002926 	beq	r2,zero,81123034 <_calloc_r+0xc4>
81122f90:	11bfff17 	ldw	r6,-4(r2)
81122f94:	1021883a 	mov	r16,r2
81122f98:	00bfff04 	movi	r2,-4
81122f9c:	308c703a 	and	r6,r6,r2
81122fa0:	00c00904 	movi	r3,36
81122fa4:	308d883a 	add	r6,r6,r2
81122fa8:	19801636 	bltu	r3,r6,81123004 <_calloc_r+0x94>
81122fac:	008004c4 	movi	r2,19
81122fb0:	11800b2e 	bgeu	r2,r6,81122fe0 <_calloc_r+0x70>
81122fb4:	80000015 	stw	zero,0(r16)
81122fb8:	80000115 	stw	zero,4(r16)
81122fbc:	008006c4 	movi	r2,27
81122fc0:	11801a2e 	bgeu	r2,r6,8112302c <_calloc_r+0xbc>
81122fc4:	80000215 	stw	zero,8(r16)
81122fc8:	80000315 	stw	zero,12(r16)
81122fcc:	30c0151e 	bne	r6,r3,81123024 <_calloc_r+0xb4>
81122fd0:	80000415 	stw	zero,16(r16)
81122fd4:	80800604 	addi	r2,r16,24
81122fd8:	80000515 	stw	zero,20(r16)
81122fdc:	00000106 	br	81122fe4 <_calloc_r+0x74>
81122fe0:	8005883a 	mov	r2,r16
81122fe4:	10000015 	stw	zero,0(r2)
81122fe8:	10000115 	stw	zero,4(r2)
81122fec:	10000215 	stw	zero,8(r2)
81122ff0:	8005883a 	mov	r2,r16
81122ff4:	dfc00117 	ldw	ra,4(sp)
81122ff8:	dc000017 	ldw	r16,0(sp)
81122ffc:	dec00204 	addi	sp,sp,8
81123000:	f800283a 	ret
81123004:	000b883a 	mov	r5,zero
81123008:	8009883a 	mov	r4,r16
8112300c:	1112c840 	call	81112c84 <memset>
81123010:	8005883a 	mov	r2,r16
81123014:	dfc00117 	ldw	ra,4(sp)
81123018:	dc000017 	ldw	r16,0(sp)
8112301c:	dec00204 	addi	sp,sp,8
81123020:	f800283a 	ret
81123024:	80800404 	addi	r2,r16,16
81123028:	003fee06 	br	81122fe4 <__reset+0xfb102fe4>
8112302c:	80800204 	addi	r2,r16,8
81123030:	003fec06 	br	81122fe4 <__reset+0xfb102fe4>
81123034:	0005883a 	mov	r2,zero
81123038:	003fee06 	br	81122ff4 <__reset+0xfb102ff4>

8112303c <_fclose_r>:
8112303c:	28003b26 	beq	r5,zero,8112312c <_fclose_r+0xf0>
81123040:	defffc04 	addi	sp,sp,-16
81123044:	de00012e 	bgeu	sp,et,8112304c <_fclose_r+0x10>
81123048:	003b68fa 	trap	3
8112304c:	dc400115 	stw	r17,4(sp)
81123050:	dc000015 	stw	r16,0(sp)
81123054:	dfc00315 	stw	ra,12(sp)
81123058:	dc800215 	stw	r18,8(sp)
8112305c:	2023883a 	mov	r17,r4
81123060:	2821883a 	mov	r16,r5
81123064:	20000226 	beq	r4,zero,81123070 <_fclose_r+0x34>
81123068:	20800e17 	ldw	r2,56(r4)
8112306c:	10002726 	beq	r2,zero,8112310c <_fclose_r+0xd0>
81123070:	8080030f 	ldh	r2,12(r16)
81123074:	1000071e 	bne	r2,zero,81123094 <_fclose_r+0x58>
81123078:	0005883a 	mov	r2,zero
8112307c:	dfc00317 	ldw	ra,12(sp)
81123080:	dc800217 	ldw	r18,8(sp)
81123084:	dc400117 	ldw	r17,4(sp)
81123088:	dc000017 	ldw	r16,0(sp)
8112308c:	dec00404 	addi	sp,sp,16
81123090:	f800283a 	ret
81123094:	800b883a 	mov	r5,r16
81123098:	8809883a 	mov	r4,r17
8112309c:	111afc00 	call	8111afc0 <__sflush_r>
811230a0:	1025883a 	mov	r18,r2
811230a4:	80800b17 	ldw	r2,44(r16)
811230a8:	10000426 	beq	r2,zero,811230bc <_fclose_r+0x80>
811230ac:	81400717 	ldw	r5,28(r16)
811230b0:	8809883a 	mov	r4,r17
811230b4:	103ee83a 	callr	r2
811230b8:	10001616 	blt	r2,zero,81123114 <_fclose_r+0xd8>
811230bc:	8080030b 	ldhu	r2,12(r16)
811230c0:	1080200c 	andi	r2,r2,128
811230c4:	1000151e 	bne	r2,zero,8112311c <_fclose_r+0xe0>
811230c8:	81400c17 	ldw	r5,48(r16)
811230cc:	28000526 	beq	r5,zero,811230e4 <_fclose_r+0xa8>
811230d0:	80801004 	addi	r2,r16,64
811230d4:	28800226 	beq	r5,r2,811230e0 <_fclose_r+0xa4>
811230d8:	8809883a 	mov	r4,r17
811230dc:	111ba780 	call	8111ba78 <_free_r>
811230e0:	80000c15 	stw	zero,48(r16)
811230e4:	81401117 	ldw	r5,68(r16)
811230e8:	28000326 	beq	r5,zero,811230f8 <_fclose_r+0xbc>
811230ec:	8809883a 	mov	r4,r17
811230f0:	111ba780 	call	8111ba78 <_free_r>
811230f4:	80001115 	stw	zero,68(r16)
811230f8:	111b5f00 	call	8111b5f0 <__sfp_lock_acquire>
811230fc:	8000030d 	sth	zero,12(r16)
81123100:	111b5f40 	call	8111b5f4 <__sfp_lock_release>
81123104:	9005883a 	mov	r2,r18
81123108:	003fdc06 	br	8112307c <__reset+0xfb10307c>
8112310c:	111b5e00 	call	8111b5e0 <__sinit>
81123110:	003fd706 	br	81123070 <__reset+0xfb103070>
81123114:	04bfffc4 	movi	r18,-1
81123118:	003fe806 	br	811230bc <__reset+0xfb1030bc>
8112311c:	81400417 	ldw	r5,16(r16)
81123120:	8809883a 	mov	r4,r17
81123124:	111ba780 	call	8111ba78 <_free_r>
81123128:	003fe706 	br	811230c8 <__reset+0xfb1030c8>
8112312c:	0005883a 	mov	r2,zero
81123130:	f800283a 	ret

81123134 <fclose>:
81123134:	00a04534 	movhi	r2,33044
81123138:	1082cb04 	addi	r2,r2,2860
8112313c:	200b883a 	mov	r5,r4
81123140:	11000017 	ldw	r4,0(r2)
81123144:	112303c1 	jmpi	8112303c <_fclose_r>

81123148 <__fputwc>:
81123148:	defff804 	addi	sp,sp,-32
8112314c:	de00012e 	bgeu	sp,et,81123154 <__fputwc+0xc>
81123150:	003b68fa 	trap	3
81123154:	dcc00415 	stw	r19,16(sp)
81123158:	dc800315 	stw	r18,12(sp)
8112315c:	dc000115 	stw	r16,4(sp)
81123160:	dfc00715 	stw	ra,28(sp)
81123164:	dd400615 	stw	r21,24(sp)
81123168:	dd000515 	stw	r20,20(sp)
8112316c:	dc400215 	stw	r17,8(sp)
81123170:	2027883a 	mov	r19,r4
81123174:	2825883a 	mov	r18,r5
81123178:	3021883a 	mov	r16,r6
8112317c:	111c5080 	call	8111c508 <__locale_mb_cur_max>
81123180:	00c00044 	movi	r3,1
81123184:	10c03e26 	beq	r2,r3,81123280 <__fputwc+0x138>
81123188:	81c01704 	addi	r7,r16,92
8112318c:	900d883a 	mov	r6,r18
81123190:	d80b883a 	mov	r5,sp
81123194:	9809883a 	mov	r4,r19
81123198:	112412c0 	call	8112412c <_wcrtomb_r>
8112319c:	1029883a 	mov	r20,r2
811231a0:	00bfffc4 	movi	r2,-1
811231a4:	a0802026 	beq	r20,r2,81123228 <__fputwc+0xe0>
811231a8:	d9400003 	ldbu	r5,0(sp)
811231ac:	a0001c26 	beq	r20,zero,81123220 <__fputwc+0xd8>
811231b0:	0023883a 	mov	r17,zero
811231b4:	05400284 	movi	r21,10
811231b8:	00000906 	br	811231e0 <__fputwc+0x98>
811231bc:	80800017 	ldw	r2,0(r16)
811231c0:	11400005 	stb	r5,0(r2)
811231c4:	80c00017 	ldw	r3,0(r16)
811231c8:	18c00044 	addi	r3,r3,1
811231cc:	80c00015 	stw	r3,0(r16)
811231d0:	8c400044 	addi	r17,r17,1
811231d4:	dc45883a 	add	r2,sp,r17
811231d8:	8d00112e 	bgeu	r17,r20,81123220 <__fputwc+0xd8>
811231dc:	11400003 	ldbu	r5,0(r2)
811231e0:	80c00217 	ldw	r3,8(r16)
811231e4:	18ffffc4 	addi	r3,r3,-1
811231e8:	80c00215 	stw	r3,8(r16)
811231ec:	183ff30e 	bge	r3,zero,811231bc <__reset+0xfb1031bc>
811231f0:	80800617 	ldw	r2,24(r16)
811231f4:	18801916 	blt	r3,r2,8112325c <__fputwc+0x114>
811231f8:	80800017 	ldw	r2,0(r16)
811231fc:	11400005 	stb	r5,0(r2)
81123200:	80800017 	ldw	r2,0(r16)
81123204:	10c00003 	ldbu	r3,0(r2)
81123208:	10800044 	addi	r2,r2,1
8112320c:	1d402326 	beq	r3,r21,8112329c <__fputwc+0x154>
81123210:	80800015 	stw	r2,0(r16)
81123214:	8c400044 	addi	r17,r17,1
81123218:	dc45883a 	add	r2,sp,r17
8112321c:	8d3fef36 	bltu	r17,r20,811231dc <__reset+0xfb1031dc>
81123220:	9005883a 	mov	r2,r18
81123224:	00000406 	br	81123238 <__fputwc+0xf0>
81123228:	80c0030b 	ldhu	r3,12(r16)
8112322c:	a005883a 	mov	r2,r20
81123230:	18c01014 	ori	r3,r3,64
81123234:	80c0030d 	sth	r3,12(r16)
81123238:	dfc00717 	ldw	ra,28(sp)
8112323c:	dd400617 	ldw	r21,24(sp)
81123240:	dd000517 	ldw	r20,20(sp)
81123244:	dcc00417 	ldw	r19,16(sp)
81123248:	dc800317 	ldw	r18,12(sp)
8112324c:	dc400217 	ldw	r17,8(sp)
81123250:	dc000117 	ldw	r16,4(sp)
81123254:	dec00804 	addi	sp,sp,32
81123258:	f800283a 	ret
8112325c:	800d883a 	mov	r6,r16
81123260:	29403fcc 	andi	r5,r5,255
81123264:	9809883a 	mov	r4,r19
81123268:	1123fcc0 	call	81123fcc <__swbuf_r>
8112326c:	10bfffe0 	cmpeqi	r2,r2,-1
81123270:	10803fcc 	andi	r2,r2,255
81123274:	103fd626 	beq	r2,zero,811231d0 <__reset+0xfb1031d0>
81123278:	00bfffc4 	movi	r2,-1
8112327c:	003fee06 	br	81123238 <__reset+0xfb103238>
81123280:	90ffffc4 	addi	r3,r18,-1
81123284:	01003f84 	movi	r4,254
81123288:	20ffbf36 	bltu	r4,r3,81123188 <__reset+0xfb103188>
8112328c:	900b883a 	mov	r5,r18
81123290:	dc800005 	stb	r18,0(sp)
81123294:	1029883a 	mov	r20,r2
81123298:	003fc506 	br	811231b0 <__reset+0xfb1031b0>
8112329c:	800d883a 	mov	r6,r16
811232a0:	a80b883a 	mov	r5,r21
811232a4:	9809883a 	mov	r4,r19
811232a8:	1123fcc0 	call	81123fcc <__swbuf_r>
811232ac:	10bfffe0 	cmpeqi	r2,r2,-1
811232b0:	003fef06 	br	81123270 <__reset+0xfb103270>

811232b4 <_fputwc_r>:
811232b4:	3080030b 	ldhu	r2,12(r6)
811232b8:	10c8000c 	andi	r3,r2,8192
811232bc:	1800051e 	bne	r3,zero,811232d4 <_fputwc_r+0x20>
811232c0:	30c01917 	ldw	r3,100(r6)
811232c4:	10880014 	ori	r2,r2,8192
811232c8:	3080030d 	sth	r2,12(r6)
811232cc:	18880014 	ori	r2,r3,8192
811232d0:	30801915 	stw	r2,100(r6)
811232d4:	11231481 	jmpi	81123148 <__fputwc>

811232d8 <fputwc>:
811232d8:	00a04534 	movhi	r2,33044
811232dc:	defffc04 	addi	sp,sp,-16
811232e0:	1082cb04 	addi	r2,r2,2860
811232e4:	de00012e 	bgeu	sp,et,811232ec <fputwc+0x14>
811232e8:	003b68fa 	trap	3
811232ec:	dc000115 	stw	r16,4(sp)
811232f0:	14000017 	ldw	r16,0(r2)
811232f4:	dc400215 	stw	r17,8(sp)
811232f8:	dfc00315 	stw	ra,12(sp)
811232fc:	2023883a 	mov	r17,r4
81123300:	80000226 	beq	r16,zero,8112330c <fputwc+0x34>
81123304:	80800e17 	ldw	r2,56(r16)
81123308:	10001026 	beq	r2,zero,8112334c <fputwc+0x74>
8112330c:	2880030b 	ldhu	r2,12(r5)
81123310:	10c8000c 	andi	r3,r2,8192
81123314:	1800051e 	bne	r3,zero,8112332c <fputwc+0x54>
81123318:	28c01917 	ldw	r3,100(r5)
8112331c:	10880014 	ori	r2,r2,8192
81123320:	2880030d 	sth	r2,12(r5)
81123324:	18880014 	ori	r2,r3,8192
81123328:	28801915 	stw	r2,100(r5)
8112332c:	280d883a 	mov	r6,r5
81123330:	8009883a 	mov	r4,r16
81123334:	880b883a 	mov	r5,r17
81123338:	dfc00317 	ldw	ra,12(sp)
8112333c:	dc400217 	ldw	r17,8(sp)
81123340:	dc000117 	ldw	r16,4(sp)
81123344:	dec00404 	addi	sp,sp,16
81123348:	11231481 	jmpi	81123148 <__fputwc>
8112334c:	8009883a 	mov	r4,r16
81123350:	d9400015 	stw	r5,0(sp)
81123354:	111b5e00 	call	8111b5e0 <__sinit>
81123358:	d9400017 	ldw	r5,0(sp)
8112335c:	003feb06 	br	8112330c <__reset+0xfb10330c>

81123360 <rshift>:
81123360:	2807d17a 	srai	r3,r5,5
81123364:	20800417 	ldw	r2,16(r4)
81123368:	22000504 	addi	r8,r4,20
8112336c:	1880250e 	bge	r3,r2,81123404 <rshift+0xa4>
81123370:	1085883a 	add	r2,r2,r2
81123374:	18c7883a 	add	r3,r3,r3
81123378:	1085883a 	add	r2,r2,r2
8112337c:	18c7883a 	add	r3,r3,r3
81123380:	294007cc 	andi	r5,r5,31
81123384:	4085883a 	add	r2,r8,r2
81123388:	40c7883a 	add	r3,r8,r3
8112338c:	28002026 	beq	r5,zero,81123410 <rshift+0xb0>
81123390:	19800017 	ldw	r6,0(r3)
81123394:	02c00804 	movi	r11,32
81123398:	19c00104 	addi	r7,r3,4
8112339c:	5957c83a 	sub	r11,r11,r5
811233a0:	314cd83a 	srl	r6,r6,r5
811233a4:	38802c2e 	bgeu	r7,r2,81123458 <rshift+0xf8>
811233a8:	4015883a 	mov	r10,r8
811233ac:	3a400017 	ldw	r9,0(r7)
811233b0:	52800104 	addi	r10,r10,4
811233b4:	39c00104 	addi	r7,r7,4
811233b8:	4ad2983a 	sll	r9,r9,r11
811233bc:	498cb03a 	or	r6,r9,r6
811233c0:	51bfff15 	stw	r6,-4(r10)
811233c4:	39bfff17 	ldw	r6,-4(r7)
811233c8:	314cd83a 	srl	r6,r6,r5
811233cc:	38bff736 	bltu	r7,r2,811233ac <__reset+0xfb1033ac>
811233d0:	10c7c83a 	sub	r3,r2,r3
811233d4:	18fffec4 	addi	r3,r3,-5
811233d8:	1806d0ba 	srli	r3,r3,2
811233dc:	18c00044 	addi	r3,r3,1
811233e0:	18c7883a 	add	r3,r3,r3
811233e4:	18c7883a 	add	r3,r3,r3
811233e8:	40c7883a 	add	r3,r8,r3
811233ec:	19800015 	stw	r6,0(r3)
811233f0:	30000126 	beq	r6,zero,811233f8 <rshift+0x98>
811233f4:	18c00104 	addi	r3,r3,4
811233f8:	1a05c83a 	sub	r2,r3,r8
811233fc:	1005d0ba 	srai	r2,r2,2
81123400:	00001206 	br	8112344c <rshift+0xec>
81123404:	20000415 	stw	zero,16(r4)
81123408:	20000515 	stw	zero,20(r4)
8112340c:	f800283a 	ret
81123410:	18bffc2e 	bgeu	r3,r2,81123404 <__reset+0xfb103404>
81123414:	180d883a 	mov	r6,r3
81123418:	400b883a 	mov	r5,r8
8112341c:	31c00017 	ldw	r7,0(r6)
81123420:	29400104 	addi	r5,r5,4
81123424:	31800104 	addi	r6,r6,4
81123428:	29ffff15 	stw	r7,-4(r5)
8112342c:	30bffb36 	bltu	r6,r2,8112341c <__reset+0xfb10341c>
81123430:	00c6303a 	nor	r3,zero,r3
81123434:	1885883a 	add	r2,r3,r2
81123438:	1004d0ba 	srli	r2,r2,2
8112343c:	10800044 	addi	r2,r2,1
81123440:	1085883a 	add	r2,r2,r2
81123444:	1085883a 	add	r2,r2,r2
81123448:	1005d0ba 	srai	r2,r2,2
8112344c:	20800415 	stw	r2,16(r4)
81123450:	103fed26 	beq	r2,zero,81123408 <__reset+0xfb103408>
81123454:	f800283a 	ret
81123458:	4007883a 	mov	r3,r8
8112345c:	003fe306 	br	811233ec <__reset+0xfb1033ec>

81123460 <__gethex>:
81123460:	deffeb04 	addi	sp,sp,-84
81123464:	de00012e 	bgeu	sp,et,8112346c <__gethex+0xc>
81123468:	003b68fa 	trap	3
8112346c:	dfc01415 	stw	ra,80(sp)
81123470:	dd801115 	stw	r22,68(sp)
81123474:	dcc00e15 	stw	r19,56(sp)
81123478:	dc800d15 	stw	r18,52(sp)
8112347c:	2827883a 	mov	r19,r5
81123480:	d9000115 	stw	r4,4(sp)
81123484:	d9800015 	stw	r6,0(sp)
81123488:	d9c00415 	stw	r7,16(sp)
8112348c:	df001315 	stw	fp,76(sp)
81123490:	ddc01215 	stw	r23,72(sp)
81123494:	dd401015 	stw	r21,64(sp)
81123498:	dd000f15 	stw	r20,60(sp)
8112349c:	dc400c15 	stw	r17,48(sp)
811234a0:	dc000b15 	stw	r16,44(sp)
811234a4:	111c52c0 	call	8111c52c <_localeconv_r>
811234a8:	14800017 	ldw	r18,0(r2)
811234ac:	9009883a 	mov	r4,r18
811234b0:	11134b00 	call	811134b0 <strlen>
811234b4:	98c00017 	ldw	r3,0(r19)
811234b8:	102d883a 	mov	r22,r2
811234bc:	9085883a 	add	r2,r18,r2
811234c0:	10bfffc3 	ldbu	r2,-1(r2)
811234c4:	19000083 	ldbu	r4,2(r3)
811234c8:	d8800305 	stb	r2,12(sp)
811234cc:	00800c04 	movi	r2,48
811234d0:	2081521e 	bne	r4,r2,81123a1c <__gethex+0x5bc>
811234d4:	017fff84 	movi	r5,-2
811234d8:	188000c4 	addi	r2,r3,3
811234dc:	28cbc83a 	sub	r5,r5,r3
811234e0:	200d883a 	mov	r6,r4
811234e4:	28a3883a 	add	r17,r5,r2
811234e8:	102b883a 	mov	r21,r2
811234ec:	10800044 	addi	r2,r2,1
811234f0:	113fffc3 	ldbu	r4,-1(r2)
811234f4:	21bffb26 	beq	r4,r6,811234e4 <__reset+0xfb1034e4>
811234f8:	05204534 	movhi	r20,33044
811234fc:	a53a6404 	addi	r20,r20,-5744
81123500:	a109883a 	add	r4,r20,r4
81123504:	20800003 	ldbu	r2,0(r4)
81123508:	10008826 	beq	r2,zero,8112372c <__gethex+0x2cc>
8112350c:	a8800003 	ldbu	r2,0(r21)
81123510:	0015883a 	mov	r10,zero
81123514:	002f883a 	mov	r23,zero
81123518:	a085883a 	add	r2,r20,r2
8112351c:	10800003 	ldbu	r2,0(r2)
81123520:	a821883a 	mov	r16,r21
81123524:	10000526 	beq	r2,zero,8112353c <__gethex+0xdc>
81123528:	84000044 	addi	r16,r16,1
8112352c:	80800003 	ldbu	r2,0(r16)
81123530:	a085883a 	add	r2,r20,r2
81123534:	10800003 	ldbu	r2,0(r2)
81123538:	103ffb1e 	bne	r2,zero,81123528 <__reset+0xfb103528>
8112353c:	b00d883a 	mov	r6,r22
81123540:	900b883a 	mov	r5,r18
81123544:	8009883a 	mov	r4,r16
81123548:	da800a15 	stw	r10,40(sp)
8112354c:	1123efc0 	call	81123efc <strncmp>
81123550:	da800a17 	ldw	r10,40(sp)
81123554:	1000031e 	bne	r2,zero,81123564 <__gethex+0x104>
81123558:	b8015226 	beq	r23,zero,81123aa4 <__gethex+0x644>
8112355c:	80800003 	ldbu	r2,0(r16)
81123560:	00000206 	br	8112356c <__gethex+0x10c>
81123564:	80800003 	ldbu	r2,0(r16)
81123568:	b8011f26 	beq	r23,zero,811239e8 <__gethex+0x588>
8112356c:	85efc83a 	sub	r23,r16,r23
81123570:	bdef883a 	add	r23,r23,r23
81123574:	bdef883a 	add	r23,r23,r23
81123578:	05efc83a 	sub	r23,zero,r23
8112357c:	10803fcc 	andi	r2,r2,255
81123580:	01001404 	movi	r4,80
81123584:	11008626 	beq	r2,r4,811237a0 <__gethex+0x340>
81123588:	01001c04 	movi	r4,112
8112358c:	11008426 	beq	r2,r4,811237a0 <__gethex+0x340>
81123590:	8039883a 	mov	fp,r16
81123594:	9c000015 	stw	r16,0(r19)
81123598:	5000711e 	bne	r10,zero,81123760 <__gethex+0x300>
8112359c:	e545c83a 	sub	r2,fp,r21
811235a0:	10bfffc4 	addi	r2,r2,-1
811235a4:	010001c4 	movi	r4,7
811235a8:	000b883a 	mov	r5,zero
811235ac:	2080030e 	bge	r4,r2,811235bc <__gethex+0x15c>
811235b0:	1005d07a 	srai	r2,r2,1
811235b4:	29400044 	addi	r5,r5,1
811235b8:	20bffd16 	blt	r4,r2,811235b0 <__reset+0xfb1035b0>
811235bc:	d9000117 	ldw	r4,4(sp)
811235c0:	111ca480 	call	8111ca48 <_Balloc>
811235c4:	10c00504 	addi	r3,r2,20
811235c8:	d8c00215 	stw	r3,8(sp)
811235cc:	1021883a 	mov	r16,r2
811235d0:	af01732e 	bgeu	r21,fp,81123ba0 <__gethex+0x740>
811235d4:	dc400303 	ldbu	r17,12(sp)
811235d8:	03400044 	movi	r13,1
811235dc:	1815883a 	mov	r10,r3
811235e0:	0013883a 	mov	r9,zero
811235e4:	0027883a 	mov	r19,zero
811235e8:	6d9bc83a 	sub	r13,r13,r22
811235ec:	02c00804 	movi	r11,32
811235f0:	e0bfffc3 	ldbu	r2,-1(fp)
811235f4:	e3bfffc4 	addi	r14,fp,-1
811235f8:	88803026 	beq	r17,r2,811236bc <__gethex+0x25c>
811235fc:	9ac04526 	beq	r19,r11,81123714 <__gethex+0x2b4>
81123600:	980b883a 	mov	r5,r19
81123604:	9cc00104 	addi	r19,r19,4
81123608:	e13fffc3 	ldbu	r4,-1(fp)
8112360c:	7039883a 	mov	fp,r14
81123610:	a109883a 	add	r4,r20,r4
81123614:	20800003 	ldbu	r2,0(r4)
81123618:	108003cc 	andi	r2,r2,15
8112361c:	1144983a 	sll	r2,r2,r5
81123620:	4892b03a 	or	r9,r9,r2
81123624:	af3ff236 	bltu	r21,fp,811235f0 <__reset+0xfb1035f0>
81123628:	d8c00217 	ldw	r3,8(sp)
8112362c:	50800104 	addi	r2,r10,4
81123630:	52400015 	stw	r9,0(r10)
81123634:	10c5c83a 	sub	r2,r2,r3
81123638:	1005d0ba 	srai	r2,r2,2
8112363c:	4809883a 	mov	r4,r9
81123640:	80800415 	stw	r2,16(r16)
81123644:	1022917a 	slli	r17,r2,5
81123648:	111cd540 	call	8111cd54 <__hi0bits>
8112364c:	d8c00017 	ldw	r3,0(sp)
81123650:	8885c83a 	sub	r2,r17,r2
81123654:	1c800017 	ldw	r18,0(r3)
81123658:	9080c716 	blt	r18,r2,81123978 <__gethex+0x518>
8112365c:	1480e416 	blt	r2,r18,811239f0 <__gethex+0x590>
81123660:	0027883a 	mov	r19,zero
81123664:	d8c00017 	ldw	r3,0(sp)
81123668:	18800217 	ldw	r2,8(r3)
8112366c:	15c08d16 	blt	r2,r23,811238a4 <__gethex+0x444>
81123670:	d8c00017 	ldw	r3,0(sp)
81123674:	18800117 	ldw	r2,4(r3)
81123678:	b880aa0e 	bge	r23,r2,81123924 <__gethex+0x4c4>
8112367c:	15efc83a 	sub	r23,r2,r23
81123680:	bc80ed16 	blt	r23,r18,81123a38 <__gethex+0x5d8>
81123684:	18c00317 	ldw	r3,12(r3)
81123688:	01000084 	movi	r4,2
8112368c:	19014926 	beq	r3,r4,81123bb4 <__gethex+0x754>
81123690:	010000c4 	movi	r4,3
81123694:	19012e26 	beq	r3,r4,81123b50 <__gethex+0x6f0>
81123698:	01000044 	movi	r4,1
8112369c:	19014826 	beq	r3,r4,81123bc0 <__gethex+0x760>
811236a0:	d9000117 	ldw	r4,4(sp)
811236a4:	800b883a 	mov	r5,r16
811236a8:	111caf80 	call	8111caf8 <_Bfree>
811236ac:	d8801517 	ldw	r2,84(sp)
811236b0:	10000015 	stw	zero,0(r2)
811236b4:	00801404 	movi	r2,80
811236b8:	00002b06 	br	81123768 <__gethex+0x308>
811236bc:	735f883a 	add	r15,r14,r13
811236c0:	7d7fce36 	bltu	r15,r21,811235fc <__reset+0xfb1035fc>
811236c4:	7809883a 	mov	r4,r15
811236c8:	b00d883a 	mov	r6,r22
811236cc:	900b883a 	mov	r5,r18
811236d0:	da400515 	stw	r9,20(sp)
811236d4:	da800a15 	stw	r10,40(sp)
811236d8:	dac00915 	stw	r11,36(sp)
811236dc:	db400815 	stw	r13,32(sp)
811236e0:	db800615 	stw	r14,24(sp)
811236e4:	dbc00715 	stw	r15,28(sp)
811236e8:	1123efc0 	call	81123efc <strncmp>
811236ec:	da400517 	ldw	r9,20(sp)
811236f0:	da800a17 	ldw	r10,40(sp)
811236f4:	dac00917 	ldw	r11,36(sp)
811236f8:	db400817 	ldw	r13,32(sp)
811236fc:	db800617 	ldw	r14,24(sp)
81123700:	dbc00717 	ldw	r15,28(sp)
81123704:	103fbd1e 	bne	r2,zero,811235fc <__reset+0xfb1035fc>
81123708:	7839883a 	mov	fp,r15
8112370c:	af3fb836 	bltu	r21,fp,811235f0 <__reset+0xfb1035f0>
81123710:	003fc506 	br	81123628 <__reset+0xfb103628>
81123714:	04c00104 	movi	r19,4
81123718:	52400015 	stw	r9,0(r10)
8112371c:	000b883a 	mov	r5,zero
81123720:	54d5883a 	add	r10,r10,r19
81123724:	0013883a 	mov	r9,zero
81123728:	003fb706 	br	81123608 <__reset+0xfb103608>
8112372c:	b00d883a 	mov	r6,r22
81123730:	900b883a 	mov	r5,r18
81123734:	a809883a 	mov	r4,r21
81123738:	1123efc0 	call	81123efc <strncmp>
8112373c:	10006426 	beq	r2,zero,811238d0 <__gethex+0x470>
81123740:	a8800003 	ldbu	r2,0(r21)
81123744:	a821883a 	mov	r16,r21
81123748:	10803fcc 	andi	r2,r2,255
8112374c:	01001404 	movi	r4,80
81123750:	11001126 	beq	r2,r4,81123798 <__gethex+0x338>
81123754:	01001c04 	movi	r4,112
81123758:	11000f26 	beq	r2,r4,81123798 <__gethex+0x338>
8112375c:	9c000015 	stw	r16,0(r19)
81123760:	8800831e 	bne	r17,zero,81123970 <__gethex+0x510>
81123764:	00800184 	movi	r2,6
81123768:	dfc01417 	ldw	ra,80(sp)
8112376c:	df001317 	ldw	fp,76(sp)
81123770:	ddc01217 	ldw	r23,72(sp)
81123774:	dd801117 	ldw	r22,68(sp)
81123778:	dd401017 	ldw	r21,64(sp)
8112377c:	dd000f17 	ldw	r20,60(sp)
81123780:	dcc00e17 	ldw	r19,56(sp)
81123784:	dc800d17 	ldw	r18,52(sp)
81123788:	dc400c17 	ldw	r17,48(sp)
8112378c:	dc000b17 	ldw	r16,44(sp)
81123790:	dec01504 	addi	sp,sp,84
81123794:	f800283a 	ret
81123798:	002f883a 	mov	r23,zero
8112379c:	02800044 	movi	r10,1
811237a0:	80800043 	ldbu	r2,1(r16)
811237a4:	01400ac4 	movi	r5,43
811237a8:	11003fcc 	andi	r4,r2,255
811237ac:	21406e26 	beq	r4,r5,81123968 <__gethex+0x508>
811237b0:	01400b44 	movi	r5,45
811237b4:	21404226 	beq	r4,r5,811238c0 <__gethex+0x460>
811237b8:	81400044 	addi	r5,r16,1
811237bc:	000d883a 	mov	r6,zero
811237c0:	10803fcc 	andi	r2,r2,255
811237c4:	a085883a 	add	r2,r20,r2
811237c8:	11000003 	ldbu	r4,0(r2)
811237cc:	03000604 	movi	r12,24
811237d0:	20bfffc4 	addi	r2,r4,-1
811237d4:	10803fcc 	andi	r2,r2,255
811237d8:	60bf6d36 	bltu	r12,r2,81123590 <__reset+0xfb103590>
811237dc:	2ac00043 	ldbu	r11,1(r5)
811237e0:	20803fcc 	andi	r2,r4,255
811237e4:	01204534 	movhi	r4,33044
811237e8:	213a6404 	addi	r4,r4,-5744
811237ec:	22c9883a 	add	r4,r4,r11
811237f0:	23400003 	ldbu	r13,0(r4)
811237f4:	10bffc04 	addi	r2,r2,-16
811237f8:	29400044 	addi	r5,r5,1
811237fc:	693fffc4 	addi	r4,r13,-1
81123800:	21003fcc 	andi	r4,r4,255
81123804:	6b403fcc 	andi	r13,r13,255
81123808:	61000b36 	bltu	r12,r4,81123838 <__gethex+0x3d8>
8112380c:	29400044 	addi	r5,r5,1
81123810:	29000003 	ldbu	r4,0(r5)
81123814:	108002a4 	muli	r2,r2,10
81123818:	a109883a 	add	r4,r20,r4
8112381c:	22c00003 	ldbu	r11,0(r4)
81123820:	1345883a 	add	r2,r2,r13
81123824:	10bffc04 	addi	r2,r2,-16
81123828:	593fffc4 	addi	r4,r11,-1
8112382c:	21003fcc 	andi	r4,r4,255
81123830:	5b403fcc 	andi	r13,r11,255
81123834:	613ff52e 	bgeu	r12,r4,8112380c <__reset+0xfb10380c>
81123838:	30000126 	beq	r6,zero,81123840 <__gethex+0x3e0>
8112383c:	0085c83a 	sub	r2,zero,r2
81123840:	8039883a 	mov	fp,r16
81123844:	b8af883a 	add	r23,r23,r2
81123848:	2821883a 	mov	r16,r5
8112384c:	003f5106 	br	81123594 <__reset+0xfb103594>
81123850:	80800217 	ldw	r2,8(r16)
81123854:	e080f00e 	bge	fp,r2,81123c18 <__gethex+0x7b8>
81123858:	e007883a 	mov	r3,fp
8112385c:	18800144 	addi	r2,r3,5
81123860:	1085883a 	add	r2,r2,r2
81123864:	18c00044 	addi	r3,r3,1
81123868:	1085883a 	add	r2,r2,r2
8112386c:	8085883a 	add	r2,r16,r2
81123870:	80c00415 	stw	r3,16(r16)
81123874:	01000044 	movi	r4,1
81123878:	11000015 	stw	r4,0(r2)
8112387c:	00800084 	movi	r2,2
81123880:	8880d826 	beq	r17,r2,81123be4 <__gethex+0x784>
81123884:	e0c0ac0e 	bge	fp,r3,81123b38 <__gethex+0x6d8>
81123888:	01400044 	movi	r5,1
8112388c:	8009883a 	mov	r4,r16
81123890:	11233600 	call	81123360 <rshift>
81123894:	d8c00017 	ldw	r3,0(sp)
81123898:	bdc00044 	addi	r23,r23,1
8112389c:	18800217 	ldw	r2,8(r3)
811238a0:	15c0a70e 	bge	r2,r23,81123b40 <__gethex+0x6e0>
811238a4:	d9000117 	ldw	r4,4(sp)
811238a8:	800b883a 	mov	r5,r16
811238ac:	111caf80 	call	8111caf8 <_Bfree>
811238b0:	d9001517 	ldw	r4,84(sp)
811238b4:	008028c4 	movi	r2,163
811238b8:	20000015 	stw	zero,0(r4)
811238bc:	003faa06 	br	81123768 <__reset+0xfb103768>
811238c0:	01800044 	movi	r6,1
811238c4:	80800083 	ldbu	r2,2(r16)
811238c8:	81400084 	addi	r5,r16,2
811238cc:	003fbc06 	br	811237c0 <__reset+0xfb1037c0>
811238d0:	ada1883a 	add	r16,r21,r22
811238d4:	81000003 	ldbu	r4,0(r16)
811238d8:	21403fcc 	andi	r5,r4,255
811238dc:	a145883a 	add	r2,r20,r5
811238e0:	10800003 	ldbu	r2,0(r2)
811238e4:	11803fcc 	andi	r6,r2,255
811238e8:	30004f26 	beq	r6,zero,81123a28 <__gethex+0x5c8>
811238ec:	00c00c04 	movi	r3,48
811238f0:	802b883a 	mov	r21,r16
811238f4:	28c0061e 	bne	r5,r3,81123910 <__gethex+0x4b0>
811238f8:	2809883a 	mov	r4,r5
811238fc:	ad400044 	addi	r21,r21,1
81123900:	a8800003 	ldbu	r2,0(r21)
81123904:	113ffd26 	beq	r2,r4,811238fc <__reset+0xfb1038fc>
81123908:	a085883a 	add	r2,r20,r2
8112390c:	10800003 	ldbu	r2,0(r2)
81123910:	10803fcc 	andi	r2,r2,255
81123914:	1015003a 	cmpeq	r10,r2,zero
81123918:	802f883a 	mov	r23,r16
8112391c:	04400044 	movi	r17,1
81123920:	003eff06 	br	81123520 <__reset+0xfb103520>
81123924:	04400044 	movi	r17,1
81123928:	98000926 	beq	r19,zero,81123950 <__gethex+0x4f0>
8112392c:	d8c00017 	ldw	r3,0(sp)
81123930:	18800317 	ldw	r2,12(r3)
81123934:	00c00084 	movi	r3,2
81123938:	10c06826 	beq	r2,r3,81123adc <__gethex+0x67c>
8112393c:	00c000c4 	movi	r3,3
81123940:	10c06a26 	beq	r2,r3,81123aec <__gethex+0x68c>
81123944:	00c00044 	movi	r3,1
81123948:	10c08d26 	beq	r2,r3,81123b80 <__gethex+0x720>
8112394c:	8c400414 	ori	r17,r17,16
81123950:	d9001517 	ldw	r4,84(sp)
81123954:	d8c00417 	ldw	r3,16(sp)
81123958:	8805883a 	mov	r2,r17
8112395c:	24000015 	stw	r16,0(r4)
81123960:	1dc00015 	stw	r23,0(r3)
81123964:	003f8006 	br	81123768 <__reset+0xfb103768>
81123968:	000d883a 	mov	r6,zero
8112396c:	003fd506 	br	811238c4 <__reset+0xfb1038c4>
81123970:	0005883a 	mov	r2,zero
81123974:	003f7c06 	br	81123768 <__reset+0xfb103768>
81123978:	14a3c83a 	sub	r17,r2,r18
8112397c:	880b883a 	mov	r5,r17
81123980:	8009883a 	mov	r4,r16
81123984:	111da180 	call	8111da18 <__any_on>
81123988:	10002926 	beq	r2,zero,81123a30 <__gethex+0x5d0>
8112398c:	897fffc4 	addi	r5,r17,-1
81123990:	2807d17a 	srai	r3,r5,5
81123994:	d8800217 	ldw	r2,8(sp)
81123998:	290007cc 	andi	r4,r5,31
8112399c:	18c7883a 	add	r3,r3,r3
811239a0:	18c7883a 	add	r3,r3,r3
811239a4:	04c00044 	movi	r19,1
811239a8:	10c7883a 	add	r3,r2,r3
811239ac:	9908983a 	sll	r4,r19,r4
811239b0:	18c00017 	ldw	r3,0(r3)
811239b4:	20c6703a 	and	r3,r4,r3
811239b8:	18000626 	beq	r3,zero,811239d4 <__gethex+0x574>
811239bc:	99407b0e 	bge	r19,r5,81123bac <__gethex+0x74c>
811239c0:	897fff84 	addi	r5,r17,-2
811239c4:	8009883a 	mov	r4,r16
811239c8:	111da180 	call	8111da18 <__any_on>
811239cc:	10007726 	beq	r2,zero,81123bac <__gethex+0x74c>
811239d0:	04c000c4 	movi	r19,3
811239d4:	880b883a 	mov	r5,r17
811239d8:	8009883a 	mov	r4,r16
811239dc:	11233600 	call	81123360 <rshift>
811239e0:	bc6f883a 	add	r23,r23,r17
811239e4:	003f1f06 	br	81123664 <__reset+0xfb103664>
811239e8:	002f883a 	mov	r23,zero
811239ec:	003ee306 	br	8112357c <__reset+0xfb10357c>
811239f0:	d9000117 	ldw	r4,4(sp)
811239f4:	90a3c83a 	sub	r17,r18,r2
811239f8:	800b883a 	mov	r5,r16
811239fc:	880d883a 	mov	r6,r17
81123a00:	111d1f80 	call	8111d1f8 <__lshift>
81123a04:	10c00504 	addi	r3,r2,20
81123a08:	1021883a 	mov	r16,r2
81123a0c:	bc6fc83a 	sub	r23,r23,r17
81123a10:	d8c00215 	stw	r3,8(sp)
81123a14:	0027883a 	mov	r19,zero
81123a18:	003f1206 	br	81123664 <__reset+0xfb103664>
81123a1c:	1d400084 	addi	r21,r3,2
81123a20:	0023883a 	mov	r17,zero
81123a24:	003eb406 	br	811234f8 <__reset+0xfb1034f8>
81123a28:	2005883a 	mov	r2,r4
81123a2c:	003f4606 	br	81123748 <__reset+0xfb103748>
81123a30:	0027883a 	mov	r19,zero
81123a34:	003fe706 	br	811239d4 <__reset+0xfb1039d4>
81123a38:	bc7fffc4 	addi	r17,r23,-1
81123a3c:	9800421e 	bne	r19,zero,81123b48 <__gethex+0x6e8>
81123a40:	88000426 	beq	r17,zero,81123a54 <__gethex+0x5f4>
81123a44:	880b883a 	mov	r5,r17
81123a48:	8009883a 	mov	r4,r16
81123a4c:	111da180 	call	8111da18 <__any_on>
81123a50:	1027883a 	mov	r19,r2
81123a54:	8805d17a 	srai	r2,r17,5
81123a58:	d8c00217 	ldw	r3,8(sp)
81123a5c:	8c4007cc 	andi	r17,r17,31
81123a60:	1085883a 	add	r2,r2,r2
81123a64:	1085883a 	add	r2,r2,r2
81123a68:	1885883a 	add	r2,r3,r2
81123a6c:	00c00044 	movi	r3,1
81123a70:	1c62983a 	sll	r17,r3,r17
81123a74:	10800017 	ldw	r2,0(r2)
81123a78:	8884703a 	and	r2,r17,r2
81123a7c:	10000126 	beq	r2,zero,81123a84 <__gethex+0x624>
81123a80:	9cc00094 	ori	r19,r19,2
81123a84:	b80b883a 	mov	r5,r23
81123a88:	8009883a 	mov	r4,r16
81123a8c:	11233600 	call	81123360 <rshift>
81123a90:	d8c00017 	ldw	r3,0(sp)
81123a94:	95e5c83a 	sub	r18,r18,r23
81123a98:	04400084 	movi	r17,2
81123a9c:	1dc00117 	ldw	r23,4(r3)
81123aa0:	003fa106 	br	81123928 <__reset+0xfb103928>
81123aa4:	85af883a 	add	r23,r16,r22
81123aa8:	b8800003 	ldbu	r2,0(r23)
81123aac:	b821883a 	mov	r16,r23
81123ab0:	11003fcc 	andi	r4,r2,255
81123ab4:	a109883a 	add	r4,r20,r4
81123ab8:	21000003 	ldbu	r4,0(r4)
81123abc:	203eaa26 	beq	r4,zero,81123568 <__reset+0xfb103568>
81123ac0:	84000044 	addi	r16,r16,1
81123ac4:	80800003 	ldbu	r2,0(r16)
81123ac8:	11003fcc 	andi	r4,r2,255
81123acc:	a109883a 	add	r4,r20,r4
81123ad0:	21000003 	ldbu	r4,0(r4)
81123ad4:	203ffa1e 	bne	r4,zero,81123ac0 <__reset+0xfb103ac0>
81123ad8:	003ea306 	br	81123568 <__reset+0xfb103568>
81123adc:	d9001617 	ldw	r4,88(sp)
81123ae0:	00800044 	movi	r2,1
81123ae4:	1109c83a 	sub	r4,r2,r4
81123ae8:	d9001615 	stw	r4,88(sp)
81123aec:	d8801617 	ldw	r2,88(sp)
81123af0:	103f9626 	beq	r2,zero,8112394c <__reset+0xfb10394c>
81123af4:	87000417 	ldw	fp,16(r16)
81123af8:	d9800217 	ldw	r6,8(sp)
81123afc:	013fffc4 	movi	r4,-1
81123b00:	e727883a 	add	r19,fp,fp
81123b04:	9ce7883a 	add	r19,r19,r19
81123b08:	3005883a 	mov	r2,r6
81123b0c:	34cb883a 	add	r5,r6,r19
81123b10:	00000306 	br	81123b20 <__gethex+0x6c0>
81123b14:	10000015 	stw	zero,0(r2)
81123b18:	10800104 	addi	r2,r2,4
81123b1c:	117f4c2e 	bgeu	r2,r5,81123850 <__reset+0xfb103850>
81123b20:	10c00017 	ldw	r3,0(r2)
81123b24:	193ffb26 	beq	r3,r4,81123b14 <__reset+0xfb103b14>
81123b28:	18c00044 	addi	r3,r3,1
81123b2c:	10c00015 	stw	r3,0(r2)
81123b30:	00800084 	movi	r2,2
81123b34:	88802b26 	beq	r17,r2,81123be4 <__gethex+0x784>
81123b38:	948007cc 	andi	r18,r18,31
81123b3c:	90002f1e 	bne	r18,zero,81123bfc <__gethex+0x79c>
81123b40:	04400844 	movi	r17,33
81123b44:	003f8206 	br	81123950 <__reset+0xfb103950>
81123b48:	04c00044 	movi	r19,1
81123b4c:	003fc106 	br	81123a54 <__reset+0xfb103a54>
81123b50:	d8c01617 	ldw	r3,88(sp)
81123b54:	183ed226 	beq	r3,zero,811236a0 <__reset+0xfb1036a0>
81123b58:	d8c00417 	ldw	r3,16(sp)
81123b5c:	d9001517 	ldw	r4,84(sp)
81123b60:	18800015 	stw	r2,0(r3)
81123b64:	d8c00217 	ldw	r3,8(sp)
81123b68:	00800044 	movi	r2,1
81123b6c:	80800415 	stw	r2,16(r16)
81123b70:	18800015 	stw	r2,0(r3)
81123b74:	24000015 	stw	r16,0(r4)
81123b78:	00801884 	movi	r2,98
81123b7c:	003efa06 	br	81123768 <__reset+0xfb103768>
81123b80:	9880008c 	andi	r2,r19,2
81123b84:	103f7126 	beq	r2,zero,8112394c <__reset+0xfb10394c>
81123b88:	d8c00217 	ldw	r3,8(sp)
81123b8c:	18800017 	ldw	r2,0(r3)
81123b90:	9884b03a 	or	r2,r19,r2
81123b94:	1080004c 	andi	r2,r2,1
81123b98:	103fd61e 	bne	r2,zero,81123af4 <__reset+0xfb103af4>
81123b9c:	003f6b06 	br	8112394c <__reset+0xfb10394c>
81123ba0:	da800217 	ldw	r10,8(sp)
81123ba4:	0013883a 	mov	r9,zero
81123ba8:	003e9f06 	br	81123628 <__reset+0xfb103628>
81123bac:	04c00084 	movi	r19,2
81123bb0:	003f8806 	br	811239d4 <__reset+0xfb1039d4>
81123bb4:	d9001617 	ldw	r4,88(sp)
81123bb8:	203fe726 	beq	r4,zero,81123b58 <__reset+0xfb103b58>
81123bbc:	003eb806 	br	811236a0 <__reset+0xfb1036a0>
81123bc0:	95feb71e 	bne	r18,r23,811236a0 <__reset+0xfb1036a0>
81123bc4:	1cbfe40e 	bge	r3,r18,81123b58 <__reset+0xfb103b58>
81123bc8:	917fffc4 	addi	r5,r18,-1
81123bcc:	8009883a 	mov	r4,r16
81123bd0:	111da180 	call	8111da18 <__any_on>
81123bd4:	103eb226 	beq	r2,zero,811236a0 <__reset+0xfb1036a0>
81123bd8:	d8c00017 	ldw	r3,0(sp)
81123bdc:	18800117 	ldw	r2,4(r3)
81123be0:	003fdd06 	br	81123b58 <__reset+0xfb103b58>
81123be4:	d8c00017 	ldw	r3,0(sp)
81123be8:	18800017 	ldw	r2,0(r3)
81123bec:	10bfffc4 	addi	r2,r2,-1
81123bf0:	90801c26 	beq	r18,r2,81123c64 <__gethex+0x804>
81123bf4:	04400884 	movi	r17,34
81123bf8:	003f5506 	br	81123950 <__reset+0xfb103950>
81123bfc:	34c5883a 	add	r2,r6,r19
81123c00:	113fff17 	ldw	r4,-4(r2)
81123c04:	111cd540 	call	8111cd54 <__hi0bits>
81123c08:	00c00804 	movi	r3,32
81123c0c:	1ca5c83a 	sub	r18,r3,r18
81123c10:	14bfcb0e 	bge	r2,r18,81123b40 <__reset+0xfb103b40>
81123c14:	003f1c06 	br	81123888 <__reset+0xfb103888>
81123c18:	81400117 	ldw	r5,4(r16)
81123c1c:	d9000117 	ldw	r4,4(sp)
81123c20:	29400044 	addi	r5,r5,1
81123c24:	111ca480 	call	8111ca48 <_Balloc>
81123c28:	81800417 	ldw	r6,16(r16)
81123c2c:	81400304 	addi	r5,r16,12
81123c30:	11000304 	addi	r4,r2,12
81123c34:	31800084 	addi	r6,r6,2
81123c38:	318d883a 	add	r6,r6,r6
81123c3c:	318d883a 	add	r6,r6,r6
81123c40:	1029883a 	mov	r20,r2
81123c44:	1112b340 	call	81112b34 <memcpy>
81123c48:	d9000117 	ldw	r4,4(sp)
81123c4c:	800b883a 	mov	r5,r16
81123c50:	a021883a 	mov	r16,r20
81123c54:	111caf80 	call	8111caf8 <_Bfree>
81123c58:	a0c00417 	ldw	r3,16(r20)
81123c5c:	a1800504 	addi	r6,r20,20
81123c60:	003efe06 	br	8112385c <__reset+0xfb10385c>
81123c64:	9005d17a 	srai	r2,r18,5
81123c68:	944007cc 	andi	r17,r18,31
81123c6c:	1085883a 	add	r2,r2,r2
81123c70:	1085883a 	add	r2,r2,r2
81123c74:	3087883a 	add	r3,r6,r2
81123c78:	00800044 	movi	r2,1
81123c7c:	1462983a 	sll	r17,r2,r17
81123c80:	18800017 	ldw	r2,0(r3)
81123c84:	8884703a 	and	r2,r17,r2
81123c88:	1022c03a 	cmpne	r17,r2,zero
81123c8c:	00800884 	movi	r2,34
81123c90:	1463c83a 	sub	r17,r2,r17
81123c94:	003f2e06 	br	81123950 <__reset+0xfb103950>

81123c98 <__hexnan>:
81123c98:	defff904 	addi	sp,sp,-28
81123c9c:	de00012e 	bgeu	sp,et,81123ca4 <__hexnan+0xc>
81123ca0:	003b68fa 	trap	3
81123ca4:	dc800215 	stw	r18,8(sp)
81123ca8:	2c800017 	ldw	r18,0(r5)
81123cac:	dfc00615 	stw	ra,24(sp)
81123cb0:	dd400515 	stw	r21,20(sp)
81123cb4:	901fd17a 	srai	r15,r18,5
81123cb8:	dd000415 	stw	r20,16(sp)
81123cbc:	dcc00315 	stw	r19,12(sp)
81123cc0:	7bdf883a 	add	r15,r15,r15
81123cc4:	7bdf883a 	add	r15,r15,r15
81123cc8:	dc400115 	stw	r17,4(sp)
81123ccc:	dc000015 	stw	r16,0(sp)
81123cd0:	948007cc 	andi	r18,r18,31
81123cd4:	33df883a 	add	r15,r6,r15
81123cd8:	90000126 	beq	r18,zero,81123ce0 <__hexnan+0x48>
81123cdc:	7bc00104 	addi	r15,r15,4
81123ce0:	22000017 	ldw	r8,0(r4)
81123ce4:	7affff04 	addi	r11,r15,-4
81123ce8:	03a04534 	movhi	r14,33044
81123cec:	783fff15 	stw	zero,-4(r15)
81123cf0:	581b883a 	mov	r13,r11
81123cf4:	580b883a 	mov	r5,r11
81123cf8:	000f883a 	mov	r7,zero
81123cfc:	003f883a 	mov	ra,zero
81123d00:	0019883a 	mov	r12,zero
81123d04:	73ba6404 	addi	r14,r14,-5744
81123d08:	04400204 	movi	r17,8
81123d0c:	04000804 	movi	r16,32
81123d10:	04c001c4 	movi	r19,7
81123d14:	42000044 	addi	r8,r8,1
81123d18:	40c00003 	ldbu	r3,0(r8)
81123d1c:	18001d26 	beq	r3,zero,81123d94 <__hexnan+0xfc>
81123d20:	70c5883a 	add	r2,r14,r3
81123d24:	10800003 	ldbu	r2,0(r2)
81123d28:	12403fcc 	andi	r9,r2,255
81123d2c:	4800301e 	bne	r9,zero,81123df0 <__hexnan+0x158>
81123d30:	80c04236 	bltu	r16,r3,81123e3c <__hexnan+0x1a4>
81123d34:	fb3ff70e 	bge	ra,r12,81123d14 <__reset+0xfb103d14>
81123d38:	2b40112e 	bgeu	r5,r13,81123d80 <__hexnan+0xe8>
81123d3c:	99c01016 	blt	r19,r7,81123d80 <__hexnan+0xe8>
81123d40:	89e9c83a 	sub	r20,r17,r7
81123d44:	a529883a 	add	r20,r20,r20
81123d48:	2a800017 	ldw	r10,0(r5)
81123d4c:	a529883a 	add	r20,r20,r20
81123d50:	852bc83a 	sub	r21,r16,r20
81123d54:	28c00104 	addi	r3,r5,4
81123d58:	2805883a 	mov	r2,r5
81123d5c:	19c00017 	ldw	r7,0(r3)
81123d60:	10800104 	addi	r2,r2,4
81123d64:	18c00104 	addi	r3,r3,4
81123d68:	3d52983a 	sll	r9,r7,r21
81123d6c:	4a92b03a 	or	r9,r9,r10
81123d70:	3d14d83a 	srl	r10,r7,r20
81123d74:	127fff15 	stw	r9,-4(r2)
81123d78:	1abfff15 	stw	r10,-4(r3)
81123d7c:	137ff736 	bltu	r2,r13,81123d5c <__reset+0xfb103d5c>
81123d80:	31402836 	bltu	r6,r5,81123e24 <__hexnan+0x18c>
81123d84:	42000044 	addi	r8,r8,1
81123d88:	40c00003 	ldbu	r3,0(r8)
81123d8c:	01c00204 	movi	r7,8
81123d90:	183fe31e 	bne	r3,zero,81123d20 <__reset+0xfb103d20>
81123d94:	60002b26 	beq	r12,zero,81123e44 <__hexnan+0x1ac>
81123d98:	2b40022e 	bgeu	r5,r13,81123da4 <__hexnan+0x10c>
81123d9c:	008001c4 	movi	r2,7
81123da0:	11c0430e 	bge	r2,r7,81123eb0 <__hexnan+0x218>
81123da4:	3140312e 	bgeu	r6,r5,81123e6c <__hexnan+0x1d4>
81123da8:	3007883a 	mov	r3,r6
81123dac:	29000017 	ldw	r4,0(r5)
81123db0:	18800104 	addi	r2,r3,4
81123db4:	29400104 	addi	r5,r5,4
81123db8:	19000015 	stw	r4,0(r3)
81123dbc:	1007883a 	mov	r3,r2
81123dc0:	597ffa2e 	bgeu	r11,r5,81123dac <__reset+0xfb103dac>
81123dc4:	10000015 	stw	zero,0(r2)
81123dc8:	10800104 	addi	r2,r2,4
81123dcc:	58bffd2e 	bgeu	r11,r2,81123dc4 <__reset+0xfb103dc4>
81123dd0:	78bfff17 	ldw	r2,-4(r15)
81123dd4:	1000041e 	bne	r2,zero,81123de8 <__hexnan+0x150>
81123dd8:	32c02d26 	beq	r6,r11,81123e90 <__hexnan+0x1f8>
81123ddc:	5affff04 	addi	r11,r11,-4
81123de0:	58800017 	ldw	r2,0(r11)
81123de4:	103ffc26 	beq	r2,zero,81123dd8 <__reset+0xfb103dd8>
81123de8:	00800144 	movi	r2,5
81123dec:	00001606 	br	81123e48 <__hexnan+0x1b0>
81123df0:	39c00044 	addi	r7,r7,1
81123df4:	63000044 	addi	r12,r12,1
81123df8:	89c0040e 	bge	r17,r7,81123e0c <__hexnan+0x174>
81123dfc:	317fc52e 	bgeu	r6,r5,81123d14 <__reset+0xfb103d14>
81123e00:	283fff15 	stw	zero,-4(r5)
81123e04:	01c00044 	movi	r7,1
81123e08:	297fff04 	addi	r5,r5,-4
81123e0c:	28c00017 	ldw	r3,0(r5)
81123e10:	108003cc 	andi	r2,r2,15
81123e14:	1806913a 	slli	r3,r3,4
81123e18:	1884b03a 	or	r2,r3,r2
81123e1c:	28800015 	stw	r2,0(r5)
81123e20:	003fbc06 	br	81123d14 <__reset+0xfb103d14>
81123e24:	2b7fff04 	addi	r13,r5,-4
81123e28:	283fff15 	stw	zero,-4(r5)
81123e2c:	603f883a 	mov	ra,r12
81123e30:	680b883a 	mov	r5,r13
81123e34:	000f883a 	mov	r7,zero
81123e38:	003fb606 	br	81123d14 <__reset+0xfb103d14>
81123e3c:	00800a44 	movi	r2,41
81123e40:	18801726 	beq	r3,r2,81123ea0 <__hexnan+0x208>
81123e44:	00800104 	movi	r2,4
81123e48:	dfc00617 	ldw	ra,24(sp)
81123e4c:	dd400517 	ldw	r21,20(sp)
81123e50:	dd000417 	ldw	r20,16(sp)
81123e54:	dcc00317 	ldw	r19,12(sp)
81123e58:	dc800217 	ldw	r18,8(sp)
81123e5c:	dc400117 	ldw	r17,4(sp)
81123e60:	dc000017 	ldw	r16,0(sp)
81123e64:	dec00704 	addi	sp,sp,28
81123e68:	f800283a 	ret
81123e6c:	903fd826 	beq	r18,zero,81123dd0 <__reset+0xfb103dd0>
81123e70:	00c00804 	movi	r3,32
81123e74:	1ca5c83a 	sub	r18,r3,r18
81123e78:	00ffffc4 	movi	r3,-1
81123e7c:	78bfff17 	ldw	r2,-4(r15)
81123e80:	1c86d83a 	srl	r3,r3,r18
81123e84:	1884703a 	and	r2,r3,r2
81123e88:	78bfff15 	stw	r2,-4(r15)
81123e8c:	003fd106 	br	81123dd4 <__reset+0xfb103dd4>
81123e90:	00800044 	movi	r2,1
81123e94:	58800015 	stw	r2,0(r11)
81123e98:	00800144 	movi	r2,5
81123e9c:	003fea06 	br	81123e48 <__reset+0xfb103e48>
81123ea0:	42000044 	addi	r8,r8,1
81123ea4:	22000015 	stw	r8,0(r4)
81123ea8:	603fbb1e 	bne	r12,zero,81123d98 <__reset+0xfb103d98>
81123eac:	003fe506 	br	81123e44 <__reset+0xfb103e44>
81123eb0:	02400204 	movi	r9,8
81123eb4:	49d3c83a 	sub	r9,r9,r7
81123eb8:	4a53883a 	add	r9,r9,r9
81123ebc:	2a000017 	ldw	r8,0(r5)
81123ec0:	4a53883a 	add	r9,r9,r9
81123ec4:	02800804 	movi	r10,32
81123ec8:	5255c83a 	sub	r10,r10,r9
81123ecc:	28c00104 	addi	r3,r5,4
81123ed0:	2805883a 	mov	r2,r5
81123ed4:	19c00017 	ldw	r7,0(r3)
81123ed8:	10800104 	addi	r2,r2,4
81123edc:	18c00104 	addi	r3,r3,4
81123ee0:	3a88983a 	sll	r4,r7,r10
81123ee4:	2208b03a 	or	r4,r4,r8
81123ee8:	3a50d83a 	srl	r8,r7,r9
81123eec:	113fff15 	stw	r4,-4(r2)
81123ef0:	1a3fff15 	stw	r8,-4(r3)
81123ef4:	137ff736 	bltu	r2,r13,81123ed4 <__reset+0xfb103ed4>
81123ef8:	003faa06 	br	81123da4 <__reset+0xfb103da4>

81123efc <strncmp>:
81123efc:	30003126 	beq	r6,zero,81123fc4 <strncmp+0xc8>
81123f00:	2144b03a 	or	r2,r4,r5
81123f04:	108000cc 	andi	r2,r2,3
81123f08:	10001e1e 	bne	r2,zero,81123f84 <strncmp+0x88>
81123f0c:	024000c4 	movi	r9,3
81123f10:	49801c2e 	bgeu	r9,r6,81123f84 <strncmp+0x88>
81123f14:	20800017 	ldw	r2,0(r4)
81123f18:	28c00017 	ldw	r3,0(r5)
81123f1c:	10c0191e 	bne	r2,r3,81123f84 <strncmp+0x88>
81123f20:	31bfff04 	addi	r6,r6,-4
81123f24:	30002726 	beq	r6,zero,81123fc4 <strncmp+0xc8>
81123f28:	02ffbff4 	movhi	r11,65279
81123f2c:	5affbfc4 	addi	r11,r11,-257
81123f30:	0086303a 	nor	r3,zero,r2
81123f34:	02a02074 	movhi	r10,32897
81123f38:	12c5883a 	add	r2,r2,r11
81123f3c:	52a02004 	addi	r10,r10,-32640
81123f40:	10c4703a 	and	r2,r2,r3
81123f44:	1284703a 	and	r2,r2,r10
81123f48:	10000b26 	beq	r2,zero,81123f78 <strncmp+0x7c>
81123f4c:	00001d06 	br	81123fc4 <strncmp+0xc8>
81123f50:	20c00017 	ldw	r3,0(r4)
81123f54:	29c00017 	ldw	r7,0(r5)
81123f58:	1ad1883a 	add	r8,r3,r11
81123f5c:	00c4303a 	nor	r2,zero,r3
81123f60:	4084703a 	and	r2,r8,r2
81123f64:	1284703a 	and	r2,r2,r10
81123f68:	19c0061e 	bne	r3,r7,81123f84 <strncmp+0x88>
81123f6c:	31bfff04 	addi	r6,r6,-4
81123f70:	30001426 	beq	r6,zero,81123fc4 <strncmp+0xc8>
81123f74:	1000131e 	bne	r2,zero,81123fc4 <strncmp+0xc8>
81123f78:	21000104 	addi	r4,r4,4
81123f7c:	29400104 	addi	r5,r5,4
81123f80:	49bff336 	bltu	r9,r6,81123f50 <__reset+0xfb103f50>
81123f84:	28800007 	ldb	r2,0(r5)
81123f88:	20c00007 	ldb	r3,0(r4)
81123f8c:	31bfffc4 	addi	r6,r6,-1
81123f90:	10c0081e 	bne	r2,r3,81123fb4 <strncmp+0xb8>
81123f94:	30000b26 	beq	r6,zero,81123fc4 <strncmp+0xc8>
81123f98:	10000a26 	beq	r2,zero,81123fc4 <strncmp+0xc8>
81123f9c:	21000044 	addi	r4,r4,1
81123fa0:	29400044 	addi	r5,r5,1
81123fa4:	20800007 	ldb	r2,0(r4)
81123fa8:	28c00007 	ldb	r3,0(r5)
81123fac:	31bfffc4 	addi	r6,r6,-1
81123fb0:	10fff826 	beq	r2,r3,81123f94 <__reset+0xfb103f94>
81123fb4:	20800003 	ldbu	r2,0(r4)
81123fb8:	28c00003 	ldbu	r3,0(r5)
81123fbc:	10c5c83a 	sub	r2,r2,r3
81123fc0:	f800283a 	ret
81123fc4:	0005883a 	mov	r2,zero
81123fc8:	f800283a 	ret

81123fcc <__swbuf_r>:
81123fcc:	defffb04 	addi	sp,sp,-20
81123fd0:	de00012e 	bgeu	sp,et,81123fd8 <__swbuf_r+0xc>
81123fd4:	003b68fa 	trap	3
81123fd8:	dcc00315 	stw	r19,12(sp)
81123fdc:	dc800215 	stw	r18,8(sp)
81123fe0:	dc000015 	stw	r16,0(sp)
81123fe4:	dfc00415 	stw	ra,16(sp)
81123fe8:	dc400115 	stw	r17,4(sp)
81123fec:	2025883a 	mov	r18,r4
81123ff0:	2827883a 	mov	r19,r5
81123ff4:	3021883a 	mov	r16,r6
81123ff8:	20000226 	beq	r4,zero,81124004 <__swbuf_r+0x38>
81123ffc:	20800e17 	ldw	r2,56(r4)
81124000:	10004226 	beq	r2,zero,8112410c <__swbuf_r+0x140>
81124004:	80800617 	ldw	r2,24(r16)
81124008:	8100030b 	ldhu	r4,12(r16)
8112400c:	80800215 	stw	r2,8(r16)
81124010:	2080020c 	andi	r2,r4,8
81124014:	10003626 	beq	r2,zero,811240f0 <__swbuf_r+0x124>
81124018:	80c00417 	ldw	r3,16(r16)
8112401c:	18003426 	beq	r3,zero,811240f0 <__swbuf_r+0x124>
81124020:	2088000c 	andi	r2,r4,8192
81124024:	9c403fcc 	andi	r17,r19,255
81124028:	10001a26 	beq	r2,zero,81124094 <__swbuf_r+0xc8>
8112402c:	80800017 	ldw	r2,0(r16)
81124030:	81000517 	ldw	r4,20(r16)
81124034:	10c7c83a 	sub	r3,r2,r3
81124038:	1900200e 	bge	r3,r4,811240bc <__swbuf_r+0xf0>
8112403c:	18c00044 	addi	r3,r3,1
81124040:	81000217 	ldw	r4,8(r16)
81124044:	11400044 	addi	r5,r2,1
81124048:	81400015 	stw	r5,0(r16)
8112404c:	213fffc4 	addi	r4,r4,-1
81124050:	81000215 	stw	r4,8(r16)
81124054:	14c00005 	stb	r19,0(r2)
81124058:	80800517 	ldw	r2,20(r16)
8112405c:	10c01e26 	beq	r2,r3,811240d8 <__swbuf_r+0x10c>
81124060:	8080030b 	ldhu	r2,12(r16)
81124064:	1080004c 	andi	r2,r2,1
81124068:	10000226 	beq	r2,zero,81124074 <__swbuf_r+0xa8>
8112406c:	00800284 	movi	r2,10
81124070:	88801926 	beq	r17,r2,811240d8 <__swbuf_r+0x10c>
81124074:	8805883a 	mov	r2,r17
81124078:	dfc00417 	ldw	ra,16(sp)
8112407c:	dcc00317 	ldw	r19,12(sp)
81124080:	dc800217 	ldw	r18,8(sp)
81124084:	dc400117 	ldw	r17,4(sp)
81124088:	dc000017 	ldw	r16,0(sp)
8112408c:	dec00504 	addi	sp,sp,20
81124090:	f800283a 	ret
81124094:	81401917 	ldw	r5,100(r16)
81124098:	00b7ffc4 	movi	r2,-8193
8112409c:	21080014 	ori	r4,r4,8192
811240a0:	2884703a 	and	r2,r5,r2
811240a4:	80801915 	stw	r2,100(r16)
811240a8:	80800017 	ldw	r2,0(r16)
811240ac:	8100030d 	sth	r4,12(r16)
811240b0:	81000517 	ldw	r4,20(r16)
811240b4:	10c7c83a 	sub	r3,r2,r3
811240b8:	193fe016 	blt	r3,r4,8112403c <__reset+0xfb10403c>
811240bc:	800b883a 	mov	r5,r16
811240c0:	9009883a 	mov	r4,r18
811240c4:	111b1e40 	call	8111b1e4 <_fflush_r>
811240c8:	1000071e 	bne	r2,zero,811240e8 <__swbuf_r+0x11c>
811240cc:	80800017 	ldw	r2,0(r16)
811240d0:	00c00044 	movi	r3,1
811240d4:	003fda06 	br	81124040 <__reset+0xfb104040>
811240d8:	800b883a 	mov	r5,r16
811240dc:	9009883a 	mov	r4,r18
811240e0:	111b1e40 	call	8111b1e4 <_fflush_r>
811240e4:	103fe326 	beq	r2,zero,81124074 <__reset+0xfb104074>
811240e8:	00bfffc4 	movi	r2,-1
811240ec:	003fe206 	br	81124078 <__reset+0xfb104078>
811240f0:	800b883a 	mov	r5,r16
811240f4:	9009883a 	mov	r4,r18
811240f8:	11195700 	call	81119570 <__swsetup_r>
811240fc:	103ffa1e 	bne	r2,zero,811240e8 <__reset+0xfb1040e8>
81124100:	8100030b 	ldhu	r4,12(r16)
81124104:	80c00417 	ldw	r3,16(r16)
81124108:	003fc506 	br	81124020 <__reset+0xfb104020>
8112410c:	111b5e00 	call	8111b5e0 <__sinit>
81124110:	003fbc06 	br	81124004 <__reset+0xfb104004>

81124114 <__swbuf>:
81124114:	00a04534 	movhi	r2,33044
81124118:	1082cb04 	addi	r2,r2,2860
8112411c:	280d883a 	mov	r6,r5
81124120:	200b883a 	mov	r5,r4
81124124:	11000017 	ldw	r4,0(r2)
81124128:	1123fcc1 	jmpi	81123fcc <__swbuf_r>

8112412c <_wcrtomb_r>:
8112412c:	defff604 	addi	sp,sp,-40
81124130:	00a04534 	movhi	r2,33044
81124134:	de00012e 	bgeu	sp,et,8112413c <_wcrtomb_r+0x10>
81124138:	003b68fa 	trap	3
8112413c:	1082d004 	addi	r2,r2,2880
81124140:	dc800815 	stw	r18,32(sp)
81124144:	dc400715 	stw	r17,28(sp)
81124148:	dc000615 	stw	r16,24(sp)
8112414c:	dfc00915 	stw	ra,36(sp)
81124150:	2021883a 	mov	r16,r4
81124154:	3823883a 	mov	r17,r7
81124158:	14800017 	ldw	r18,0(r2)
8112415c:	28001426 	beq	r5,zero,811241b0 <_wcrtomb_r+0x84>
81124160:	d9400415 	stw	r5,16(sp)
81124164:	d9800515 	stw	r6,20(sp)
81124168:	111c4fc0 	call	8111c4fc <__locale_charset>
8112416c:	d9800517 	ldw	r6,20(sp)
81124170:	d9400417 	ldw	r5,16(sp)
81124174:	100f883a 	mov	r7,r2
81124178:	dc400015 	stw	r17,0(sp)
8112417c:	8009883a 	mov	r4,r16
81124180:	903ee83a 	callr	r18
81124184:	00ffffc4 	movi	r3,-1
81124188:	10c0031e 	bne	r2,r3,81124198 <_wcrtomb_r+0x6c>
8112418c:	88000015 	stw	zero,0(r17)
81124190:	00c02284 	movi	r3,138
81124194:	80c00015 	stw	r3,0(r16)
81124198:	dfc00917 	ldw	ra,36(sp)
8112419c:	dc800817 	ldw	r18,32(sp)
811241a0:	dc400717 	ldw	r17,28(sp)
811241a4:	dc000617 	ldw	r16,24(sp)
811241a8:	dec00a04 	addi	sp,sp,40
811241ac:	f800283a 	ret
811241b0:	111c4fc0 	call	8111c4fc <__locale_charset>
811241b4:	100f883a 	mov	r7,r2
811241b8:	dc400015 	stw	r17,0(sp)
811241bc:	000d883a 	mov	r6,zero
811241c0:	d9400104 	addi	r5,sp,4
811241c4:	8009883a 	mov	r4,r16
811241c8:	903ee83a 	callr	r18
811241cc:	003fed06 	br	81124184 <__reset+0xfb104184>

811241d0 <wcrtomb>:
811241d0:	defff604 	addi	sp,sp,-40
811241d4:	00a04534 	movhi	r2,33044
811241d8:	de00012e 	bgeu	sp,et,811241e0 <wcrtomb+0x10>
811241dc:	003b68fa 	trap	3
811241e0:	1082cb04 	addi	r2,r2,2860
811241e4:	dc800615 	stw	r18,24(sp)
811241e8:	dc400515 	stw	r17,20(sp)
811241ec:	dfc00915 	stw	ra,36(sp)
811241f0:	dd000815 	stw	r20,32(sp)
811241f4:	dcc00715 	stw	r19,28(sp)
811241f8:	dc000415 	stw	r16,16(sp)
811241fc:	3025883a 	mov	r18,r6
81124200:	14400017 	ldw	r17,0(r2)
81124204:	20001926 	beq	r4,zero,8112426c <wcrtomb+0x9c>
81124208:	00a04534 	movhi	r2,33044
8112420c:	1082d004 	addi	r2,r2,2880
81124210:	15000017 	ldw	r20,0(r2)
81124214:	2021883a 	mov	r16,r4
81124218:	2827883a 	mov	r19,r5
8112421c:	111c4fc0 	call	8111c4fc <__locale_charset>
81124220:	100f883a 	mov	r7,r2
81124224:	dc800015 	stw	r18,0(sp)
81124228:	980d883a 	mov	r6,r19
8112422c:	800b883a 	mov	r5,r16
81124230:	8809883a 	mov	r4,r17
81124234:	a03ee83a 	callr	r20
81124238:	00ffffc4 	movi	r3,-1
8112423c:	10c0031e 	bne	r2,r3,8112424c <wcrtomb+0x7c>
81124240:	90000015 	stw	zero,0(r18)
81124244:	00c02284 	movi	r3,138
81124248:	88c00015 	stw	r3,0(r17)
8112424c:	dfc00917 	ldw	ra,36(sp)
81124250:	dd000817 	ldw	r20,32(sp)
81124254:	dcc00717 	ldw	r19,28(sp)
81124258:	dc800617 	ldw	r18,24(sp)
8112425c:	dc400517 	ldw	r17,20(sp)
81124260:	dc000417 	ldw	r16,16(sp)
81124264:	dec00a04 	addi	sp,sp,40
81124268:	f800283a 	ret
8112426c:	00a04534 	movhi	r2,33044
81124270:	1082d004 	addi	r2,r2,2880
81124274:	14000017 	ldw	r16,0(r2)
81124278:	111c4fc0 	call	8111c4fc <__locale_charset>
8112427c:	100f883a 	mov	r7,r2
81124280:	dc800015 	stw	r18,0(sp)
81124284:	000d883a 	mov	r6,zero
81124288:	d9400104 	addi	r5,sp,4
8112428c:	8809883a 	mov	r4,r17
81124290:	803ee83a 	callr	r16
81124294:	003fe806 	br	81124238 <__reset+0xfb104238>

81124298 <__ascii_wctomb>:
81124298:	28000526 	beq	r5,zero,811242b0 <__ascii_wctomb+0x18>
8112429c:	00803fc4 	movi	r2,255
811242a0:	11800536 	bltu	r2,r6,811242b8 <__ascii_wctomb+0x20>
811242a4:	29800005 	stb	r6,0(r5)
811242a8:	00800044 	movi	r2,1
811242ac:	f800283a 	ret
811242b0:	0005883a 	mov	r2,zero
811242b4:	f800283a 	ret
811242b8:	00802284 	movi	r2,138
811242bc:	20800015 	stw	r2,0(r4)
811242c0:	00bfffc4 	movi	r2,-1
811242c4:	f800283a 	ret

811242c8 <_wctomb_r>:
811242c8:	00a04534 	movhi	r2,33044
811242cc:	defff904 	addi	sp,sp,-28
811242d0:	1082d004 	addi	r2,r2,2880
811242d4:	de00012e 	bgeu	sp,et,811242dc <_wctomb_r+0x14>
811242d8:	003b68fa 	trap	3
811242dc:	dfc00615 	stw	ra,24(sp)
811242e0:	dc400515 	stw	r17,20(sp)
811242e4:	dc000415 	stw	r16,16(sp)
811242e8:	3823883a 	mov	r17,r7
811242ec:	14000017 	ldw	r16,0(r2)
811242f0:	d9000115 	stw	r4,4(sp)
811242f4:	d9400215 	stw	r5,8(sp)
811242f8:	d9800315 	stw	r6,12(sp)
811242fc:	111c4fc0 	call	8111c4fc <__locale_charset>
81124300:	d9800317 	ldw	r6,12(sp)
81124304:	d9400217 	ldw	r5,8(sp)
81124308:	d9000117 	ldw	r4,4(sp)
8112430c:	100f883a 	mov	r7,r2
81124310:	dc400015 	stw	r17,0(sp)
81124314:	803ee83a 	callr	r16
81124318:	dfc00617 	ldw	ra,24(sp)
8112431c:	dc400517 	ldw	r17,20(sp)
81124320:	dc000417 	ldw	r16,16(sp)
81124324:	dec00704 	addi	sp,sp,28
81124328:	f800283a 	ret

8112432c <__fixunsdfsi>:
8112432c:	defffd04 	addi	sp,sp,-12
81124330:	000d883a 	mov	r6,zero
81124334:	01d07834 	movhi	r7,16864
81124338:	de00012e 	bgeu	sp,et,81124340 <__fixunsdfsi+0x14>
8112433c:	003b68fa 	trap	3
81124340:	dc400115 	stw	r17,4(sp)
81124344:	dc000015 	stw	r16,0(sp)
81124348:	dfc00215 	stw	ra,8(sp)
8112434c:	2023883a 	mov	r17,r4
81124350:	2821883a 	mov	r16,r5
81124354:	11264440 	call	81126444 <__gedf2>
81124358:	1000080e 	bge	r2,zero,8112437c <__fixunsdfsi+0x50>
8112435c:	8809883a 	mov	r4,r17
81124360:	800b883a 	mov	r5,r16
81124364:	1126f180 	call	81126f18 <__fixdfsi>
81124368:	dfc00217 	ldw	ra,8(sp)
8112436c:	dc400117 	ldw	r17,4(sp)
81124370:	dc000017 	ldw	r16,0(sp)
81124374:	dec00304 	addi	sp,sp,12
81124378:	f800283a 	ret
8112437c:	000d883a 	mov	r6,zero
81124380:	01d07834 	movhi	r7,16864
81124384:	8809883a 	mov	r4,r17
81124388:	800b883a 	mov	r5,r16
8112438c:	11266140 	call	81126614 <__subdf3>
81124390:	180b883a 	mov	r5,r3
81124394:	1009883a 	mov	r4,r2
81124398:	1126f180 	call	81126f18 <__fixdfsi>
8112439c:	00e00034 	movhi	r3,32768
811243a0:	10c5883a 	add	r2,r2,r3
811243a4:	003ff006 	br	81124368 <__reset+0xfb104368>

811243a8 <__udivdi3>:
811243a8:	defff504 	addi	sp,sp,-44
811243ac:	de00012e 	bgeu	sp,et,811243b4 <__udivdi3+0xc>
811243b0:	003b68fa 	trap	3
811243b4:	dcc00415 	stw	r19,16(sp)
811243b8:	dc000115 	stw	r16,4(sp)
811243bc:	dfc00a15 	stw	ra,40(sp)
811243c0:	df000915 	stw	fp,36(sp)
811243c4:	ddc00815 	stw	r23,32(sp)
811243c8:	dd800715 	stw	r22,28(sp)
811243cc:	dd400615 	stw	r21,24(sp)
811243d0:	dd000515 	stw	r20,20(sp)
811243d4:	dc800315 	stw	r18,12(sp)
811243d8:	dc400215 	stw	r17,8(sp)
811243dc:	2027883a 	mov	r19,r4
811243e0:	2821883a 	mov	r16,r5
811243e4:	3800411e 	bne	r7,zero,811244ec <__udivdi3+0x144>
811243e8:	3023883a 	mov	r17,r6
811243ec:	2025883a 	mov	r18,r4
811243f0:	2980522e 	bgeu	r5,r6,8112453c <__udivdi3+0x194>
811243f4:	00bfffd4 	movui	r2,65535
811243f8:	282d883a 	mov	r22,r5
811243fc:	1180a836 	bltu	r2,r6,811246a0 <__udivdi3+0x2f8>
81124400:	00803fc4 	movi	r2,255
81124404:	1185803a 	cmpltu	r2,r2,r6
81124408:	100490fa 	slli	r2,r2,3
8112440c:	3086d83a 	srl	r3,r6,r2
81124410:	01204534 	movhi	r4,33044
81124414:	2138de04 	addi	r4,r4,-7304
81124418:	20c7883a 	add	r3,r4,r3
8112441c:	18c00003 	ldbu	r3,0(r3)
81124420:	1885883a 	add	r2,r3,r2
81124424:	00c00804 	movi	r3,32
81124428:	1887c83a 	sub	r3,r3,r2
8112442c:	18000526 	beq	r3,zero,81124444 <__udivdi3+0x9c>
81124430:	80e0983a 	sll	r16,r16,r3
81124434:	9884d83a 	srl	r2,r19,r2
81124438:	30e2983a 	sll	r17,r6,r3
8112443c:	98e4983a 	sll	r18,r19,r3
81124440:	142cb03a 	or	r22,r2,r16
81124444:	882ad43a 	srli	r21,r17,16
81124448:	b009883a 	mov	r4,r22
8112444c:	8d3fffcc 	andi	r20,r17,65535
81124450:	a80b883a 	mov	r5,r21
81124454:	1124fc40 	call	81124fc4 <__umodsi3>
81124458:	b009883a 	mov	r4,r22
8112445c:	a80b883a 	mov	r5,r21
81124460:	1027883a 	mov	r19,r2
81124464:	1124f600 	call	81124f60 <__udivsi3>
81124468:	102d883a 	mov	r22,r2
8112446c:	9826943a 	slli	r19,r19,16
81124470:	9004d43a 	srli	r2,r18,16
81124474:	a5a1383a 	mul	r16,r20,r22
81124478:	14c4b03a 	or	r2,r2,r19
8112447c:	1400052e 	bgeu	r2,r16,81124494 <__udivdi3+0xec>
81124480:	1445883a 	add	r2,r2,r17
81124484:	b0ffffc4 	addi	r3,r22,-1
81124488:	14400136 	bltu	r2,r17,81124490 <__udivdi3+0xe8>
8112448c:	14012336 	bltu	r2,r16,8112491c <__udivdi3+0x574>
81124490:	182d883a 	mov	r22,r3
81124494:	1421c83a 	sub	r16,r2,r16
81124498:	a80b883a 	mov	r5,r21
8112449c:	8009883a 	mov	r4,r16
811244a0:	1124fc40 	call	81124fc4 <__umodsi3>
811244a4:	1027883a 	mov	r19,r2
811244a8:	a80b883a 	mov	r5,r21
811244ac:	8009883a 	mov	r4,r16
811244b0:	1124f600 	call	81124f60 <__udivsi3>
811244b4:	9826943a 	slli	r19,r19,16
811244b8:	a0a9383a 	mul	r20,r20,r2
811244bc:	94bfffcc 	andi	r18,r18,65535
811244c0:	94e4b03a 	or	r18,r18,r19
811244c4:	9500052e 	bgeu	r18,r20,811244dc <__udivdi3+0x134>
811244c8:	8ca5883a 	add	r18,r17,r18
811244cc:	10ffffc4 	addi	r3,r2,-1
811244d0:	9440f136 	bltu	r18,r17,81124898 <__udivdi3+0x4f0>
811244d4:	9500f02e 	bgeu	r18,r20,81124898 <__udivdi3+0x4f0>
811244d8:	10bfff84 	addi	r2,r2,-2
811244dc:	b00c943a 	slli	r6,r22,16
811244e0:	0007883a 	mov	r3,zero
811244e4:	3084b03a 	or	r2,r6,r2
811244e8:	00005906 	br	81124650 <__udivdi3+0x2a8>
811244ec:	29c05636 	bltu	r5,r7,81124648 <__udivdi3+0x2a0>
811244f0:	00bfffd4 	movui	r2,65535
811244f4:	11c0622e 	bgeu	r2,r7,81124680 <__udivdi3+0x2d8>
811244f8:	00804034 	movhi	r2,256
811244fc:	10bfffc4 	addi	r2,r2,-1
81124500:	11c0ee36 	bltu	r2,r7,811248bc <__udivdi3+0x514>
81124504:	00800404 	movi	r2,16
81124508:	3886d83a 	srl	r3,r7,r2
8112450c:	01204534 	movhi	r4,33044
81124510:	2138de04 	addi	r4,r4,-7304
81124514:	20c7883a 	add	r3,r4,r3
81124518:	18c00003 	ldbu	r3,0(r3)
8112451c:	05400804 	movi	r21,32
81124520:	1885883a 	add	r2,r3,r2
81124524:	a8abc83a 	sub	r21,r21,r2
81124528:	a800621e 	bne	r21,zero,811246b4 <__udivdi3+0x30c>
8112452c:	3c00e936 	bltu	r7,r16,811248d4 <__udivdi3+0x52c>
81124530:	9985403a 	cmpgeu	r2,r19,r6
81124534:	0007883a 	mov	r3,zero
81124538:	00004506 	br	81124650 <__udivdi3+0x2a8>
8112453c:	3000041e 	bne	r6,zero,81124550 <__udivdi3+0x1a8>
81124540:	000b883a 	mov	r5,zero
81124544:	01000044 	movi	r4,1
81124548:	1124f600 	call	81124f60 <__udivsi3>
8112454c:	1023883a 	mov	r17,r2
81124550:	00bfffd4 	movui	r2,65535
81124554:	14404e2e 	bgeu	r2,r17,81124690 <__udivdi3+0x2e8>
81124558:	00804034 	movhi	r2,256
8112455c:	10bfffc4 	addi	r2,r2,-1
81124560:	1440d836 	bltu	r2,r17,811248c4 <__udivdi3+0x51c>
81124564:	00800404 	movi	r2,16
81124568:	8886d83a 	srl	r3,r17,r2
8112456c:	01204534 	movhi	r4,33044
81124570:	2138de04 	addi	r4,r4,-7304
81124574:	20c7883a 	add	r3,r4,r3
81124578:	18c00003 	ldbu	r3,0(r3)
8112457c:	1885883a 	add	r2,r3,r2
81124580:	00c00804 	movi	r3,32
81124584:	1887c83a 	sub	r3,r3,r2
81124588:	18008f1e 	bne	r3,zero,811247c8 <__udivdi3+0x420>
8112458c:	882ad43a 	srli	r21,r17,16
81124590:	8461c83a 	sub	r16,r16,r17
81124594:	8d3fffcc 	andi	r20,r17,65535
81124598:	00c00044 	movi	r3,1
8112459c:	8009883a 	mov	r4,r16
811245a0:	a80b883a 	mov	r5,r21
811245a4:	d8c00015 	stw	r3,0(sp)
811245a8:	1124fc40 	call	81124fc4 <__umodsi3>
811245ac:	8009883a 	mov	r4,r16
811245b0:	a80b883a 	mov	r5,r21
811245b4:	1027883a 	mov	r19,r2
811245b8:	1124f600 	call	81124f60 <__udivsi3>
811245bc:	9826943a 	slli	r19,r19,16
811245c0:	9008d43a 	srli	r4,r18,16
811245c4:	1521383a 	mul	r16,r2,r20
811245c8:	102d883a 	mov	r22,r2
811245cc:	24c8b03a 	or	r4,r4,r19
811245d0:	d8c00017 	ldw	r3,0(sp)
811245d4:	2400052e 	bgeu	r4,r16,811245ec <__udivdi3+0x244>
811245d8:	2449883a 	add	r4,r4,r17
811245dc:	b0bfffc4 	addi	r2,r22,-1
811245e0:	24400136 	bltu	r4,r17,811245e8 <__udivdi3+0x240>
811245e4:	2400ca36 	bltu	r4,r16,81124910 <__udivdi3+0x568>
811245e8:	102d883a 	mov	r22,r2
811245ec:	2421c83a 	sub	r16,r4,r16
811245f0:	a80b883a 	mov	r5,r21
811245f4:	8009883a 	mov	r4,r16
811245f8:	d8c00015 	stw	r3,0(sp)
811245fc:	1124fc40 	call	81124fc4 <__umodsi3>
81124600:	1027883a 	mov	r19,r2
81124604:	a80b883a 	mov	r5,r21
81124608:	8009883a 	mov	r4,r16
8112460c:	1124f600 	call	81124f60 <__udivsi3>
81124610:	9826943a 	slli	r19,r19,16
81124614:	1529383a 	mul	r20,r2,r20
81124618:	94bfffcc 	andi	r18,r18,65535
8112461c:	94e4b03a 	or	r18,r18,r19
81124620:	d8c00017 	ldw	r3,0(sp)
81124624:	9500052e 	bgeu	r18,r20,8112463c <__udivdi3+0x294>
81124628:	8ca5883a 	add	r18,r17,r18
8112462c:	113fffc4 	addi	r4,r2,-1
81124630:	94409736 	bltu	r18,r17,81124890 <__udivdi3+0x4e8>
81124634:	9500962e 	bgeu	r18,r20,81124890 <__udivdi3+0x4e8>
81124638:	10bfff84 	addi	r2,r2,-2
8112463c:	b00c943a 	slli	r6,r22,16
81124640:	3084b03a 	or	r2,r6,r2
81124644:	00000206 	br	81124650 <__udivdi3+0x2a8>
81124648:	0007883a 	mov	r3,zero
8112464c:	0005883a 	mov	r2,zero
81124650:	dfc00a17 	ldw	ra,40(sp)
81124654:	df000917 	ldw	fp,36(sp)
81124658:	ddc00817 	ldw	r23,32(sp)
8112465c:	dd800717 	ldw	r22,28(sp)
81124660:	dd400617 	ldw	r21,24(sp)
81124664:	dd000517 	ldw	r20,20(sp)
81124668:	dcc00417 	ldw	r19,16(sp)
8112466c:	dc800317 	ldw	r18,12(sp)
81124670:	dc400217 	ldw	r17,8(sp)
81124674:	dc000117 	ldw	r16,4(sp)
81124678:	dec00b04 	addi	sp,sp,44
8112467c:	f800283a 	ret
81124680:	00803fc4 	movi	r2,255
81124684:	11c5803a 	cmpltu	r2,r2,r7
81124688:	100490fa 	slli	r2,r2,3
8112468c:	003f9e06 	br	81124508 <__reset+0xfb104508>
81124690:	00803fc4 	movi	r2,255
81124694:	1445803a 	cmpltu	r2,r2,r17
81124698:	100490fa 	slli	r2,r2,3
8112469c:	003fb206 	br	81124568 <__reset+0xfb104568>
811246a0:	00804034 	movhi	r2,256
811246a4:	10bfffc4 	addi	r2,r2,-1
811246a8:	11808836 	bltu	r2,r6,811248cc <__udivdi3+0x524>
811246ac:	00800404 	movi	r2,16
811246b0:	003f5606 	br	8112440c <__reset+0xfb10440c>
811246b4:	30aed83a 	srl	r23,r6,r2
811246b8:	3d4e983a 	sll	r7,r7,r21
811246bc:	80acd83a 	srl	r22,r16,r2
811246c0:	9884d83a 	srl	r2,r19,r2
811246c4:	3deeb03a 	or	r23,r7,r23
811246c8:	b824d43a 	srli	r18,r23,16
811246cc:	8560983a 	sll	r16,r16,r21
811246d0:	b009883a 	mov	r4,r22
811246d4:	900b883a 	mov	r5,r18
811246d8:	3568983a 	sll	r20,r6,r21
811246dc:	1420b03a 	or	r16,r2,r16
811246e0:	1124fc40 	call	81124fc4 <__umodsi3>
811246e4:	b009883a 	mov	r4,r22
811246e8:	900b883a 	mov	r5,r18
811246ec:	1023883a 	mov	r17,r2
811246f0:	1124f600 	call	81124f60 <__udivsi3>
811246f4:	8808943a 	slli	r4,r17,16
811246f8:	bf3fffcc 	andi	fp,r23,65535
811246fc:	8006d43a 	srli	r3,r16,16
81124700:	e0a3383a 	mul	r17,fp,r2
81124704:	100d883a 	mov	r6,r2
81124708:	1906b03a 	or	r3,r3,r4
8112470c:	1c40042e 	bgeu	r3,r17,81124720 <__udivdi3+0x378>
81124710:	1dc7883a 	add	r3,r3,r23
81124714:	10bfffc4 	addi	r2,r2,-1
81124718:	1dc0752e 	bgeu	r3,r23,811248f0 <__udivdi3+0x548>
8112471c:	100d883a 	mov	r6,r2
81124720:	1c63c83a 	sub	r17,r3,r17
81124724:	900b883a 	mov	r5,r18
81124728:	8809883a 	mov	r4,r17
8112472c:	d9800015 	stw	r6,0(sp)
81124730:	1124fc40 	call	81124fc4 <__umodsi3>
81124734:	102d883a 	mov	r22,r2
81124738:	8809883a 	mov	r4,r17
8112473c:	900b883a 	mov	r5,r18
81124740:	1124f600 	call	81124f60 <__udivsi3>
81124744:	b02c943a 	slli	r22,r22,16
81124748:	e089383a 	mul	r4,fp,r2
8112474c:	843fffcc 	andi	r16,r16,65535
81124750:	85a0b03a 	or	r16,r16,r22
81124754:	d9800017 	ldw	r6,0(sp)
81124758:	8100042e 	bgeu	r16,r4,8112476c <__udivdi3+0x3c4>
8112475c:	85e1883a 	add	r16,r16,r23
81124760:	10ffffc4 	addi	r3,r2,-1
81124764:	85c05e2e 	bgeu	r16,r23,811248e0 <__udivdi3+0x538>
81124768:	1805883a 	mov	r2,r3
8112476c:	300c943a 	slli	r6,r6,16
81124770:	a17fffcc 	andi	r5,r20,65535
81124774:	a028d43a 	srli	r20,r20,16
81124778:	3084b03a 	or	r2,r6,r2
8112477c:	10ffffcc 	andi	r3,r2,65535
81124780:	100cd43a 	srli	r6,r2,16
81124784:	194f383a 	mul	r7,r3,r5
81124788:	1d07383a 	mul	r3,r3,r20
8112478c:	314b383a 	mul	r5,r6,r5
81124790:	3810d43a 	srli	r8,r7,16
81124794:	8121c83a 	sub	r16,r16,r4
81124798:	1947883a 	add	r3,r3,r5
8112479c:	40c7883a 	add	r3,r8,r3
811247a0:	350d383a 	mul	r6,r6,r20
811247a4:	1940022e 	bgeu	r3,r5,811247b0 <__udivdi3+0x408>
811247a8:	01000074 	movhi	r4,1
811247ac:	310d883a 	add	r6,r6,r4
811247b0:	1828d43a 	srli	r20,r3,16
811247b4:	a18d883a 	add	r6,r20,r6
811247b8:	81803e36 	bltu	r16,r6,811248b4 <__udivdi3+0x50c>
811247bc:	81803826 	beq	r16,r6,811248a0 <__udivdi3+0x4f8>
811247c0:	0007883a 	mov	r3,zero
811247c4:	003fa206 	br	81124650 <__reset+0xfb104650>
811247c8:	88e2983a 	sll	r17,r17,r3
811247cc:	80a8d83a 	srl	r20,r16,r2
811247d0:	80e0983a 	sll	r16,r16,r3
811247d4:	882ad43a 	srli	r21,r17,16
811247d8:	9884d83a 	srl	r2,r19,r2
811247dc:	a009883a 	mov	r4,r20
811247e0:	a80b883a 	mov	r5,r21
811247e4:	142eb03a 	or	r23,r2,r16
811247e8:	98e4983a 	sll	r18,r19,r3
811247ec:	1124fc40 	call	81124fc4 <__umodsi3>
811247f0:	a009883a 	mov	r4,r20
811247f4:	a80b883a 	mov	r5,r21
811247f8:	1021883a 	mov	r16,r2
811247fc:	1124f600 	call	81124f60 <__udivsi3>
81124800:	1039883a 	mov	fp,r2
81124804:	8d3fffcc 	andi	r20,r17,65535
81124808:	8020943a 	slli	r16,r16,16
8112480c:	b804d43a 	srli	r2,r23,16
81124810:	a72d383a 	mul	r22,r20,fp
81124814:	1404b03a 	or	r2,r2,r16
81124818:	1580062e 	bgeu	r2,r22,81124834 <__udivdi3+0x48c>
8112481c:	1445883a 	add	r2,r2,r17
81124820:	e0ffffc4 	addi	r3,fp,-1
81124824:	14403836 	bltu	r2,r17,81124908 <__udivdi3+0x560>
81124828:	1580372e 	bgeu	r2,r22,81124908 <__udivdi3+0x560>
8112482c:	e73fff84 	addi	fp,fp,-2
81124830:	1445883a 	add	r2,r2,r17
81124834:	15adc83a 	sub	r22,r2,r22
81124838:	a80b883a 	mov	r5,r21
8112483c:	b009883a 	mov	r4,r22
81124840:	1124fc40 	call	81124fc4 <__umodsi3>
81124844:	1027883a 	mov	r19,r2
81124848:	b009883a 	mov	r4,r22
8112484c:	a80b883a 	mov	r5,r21
81124850:	1124f600 	call	81124f60 <__udivsi3>
81124854:	9826943a 	slli	r19,r19,16
81124858:	a0a1383a 	mul	r16,r20,r2
8112485c:	b93fffcc 	andi	r4,r23,65535
81124860:	24c8b03a 	or	r4,r4,r19
81124864:	2400062e 	bgeu	r4,r16,81124880 <__udivdi3+0x4d8>
81124868:	2449883a 	add	r4,r4,r17
8112486c:	10ffffc4 	addi	r3,r2,-1
81124870:	24402336 	bltu	r4,r17,81124900 <__udivdi3+0x558>
81124874:	2400222e 	bgeu	r4,r16,81124900 <__udivdi3+0x558>
81124878:	10bfff84 	addi	r2,r2,-2
8112487c:	2449883a 	add	r4,r4,r17
81124880:	e038943a 	slli	fp,fp,16
81124884:	2421c83a 	sub	r16,r4,r16
81124888:	e086b03a 	or	r3,fp,r2
8112488c:	003f4306 	br	8112459c <__reset+0xfb10459c>
81124890:	2005883a 	mov	r2,r4
81124894:	003f6906 	br	8112463c <__reset+0xfb10463c>
81124898:	1805883a 	mov	r2,r3
8112489c:	003f0f06 	br	811244dc <__reset+0xfb1044dc>
811248a0:	1806943a 	slli	r3,r3,16
811248a4:	9d66983a 	sll	r19,r19,r21
811248a8:	39ffffcc 	andi	r7,r7,65535
811248ac:	19c7883a 	add	r3,r3,r7
811248b0:	98ffc32e 	bgeu	r19,r3,811247c0 <__reset+0xfb1047c0>
811248b4:	10bfffc4 	addi	r2,r2,-1
811248b8:	003fc106 	br	811247c0 <__reset+0xfb1047c0>
811248bc:	00800604 	movi	r2,24
811248c0:	003f1106 	br	81124508 <__reset+0xfb104508>
811248c4:	00800604 	movi	r2,24
811248c8:	003f2706 	br	81124568 <__reset+0xfb104568>
811248cc:	00800604 	movi	r2,24
811248d0:	003ece06 	br	8112440c <__reset+0xfb10440c>
811248d4:	0007883a 	mov	r3,zero
811248d8:	00800044 	movi	r2,1
811248dc:	003f5c06 	br	81124650 <__reset+0xfb104650>
811248e0:	813fa12e 	bgeu	r16,r4,81124768 <__reset+0xfb104768>
811248e4:	10bfff84 	addi	r2,r2,-2
811248e8:	85e1883a 	add	r16,r16,r23
811248ec:	003f9f06 	br	8112476c <__reset+0xfb10476c>
811248f0:	1c7f8a2e 	bgeu	r3,r17,8112471c <__reset+0xfb10471c>
811248f4:	31bfff84 	addi	r6,r6,-2
811248f8:	1dc7883a 	add	r3,r3,r23
811248fc:	003f8806 	br	81124720 <__reset+0xfb104720>
81124900:	1805883a 	mov	r2,r3
81124904:	003fde06 	br	81124880 <__reset+0xfb104880>
81124908:	1839883a 	mov	fp,r3
8112490c:	003fc906 	br	81124834 <__reset+0xfb104834>
81124910:	b5bfff84 	addi	r22,r22,-2
81124914:	2449883a 	add	r4,r4,r17
81124918:	003f3406 	br	811245ec <__reset+0xfb1045ec>
8112491c:	b5bfff84 	addi	r22,r22,-2
81124920:	1445883a 	add	r2,r2,r17
81124924:	003edb06 	br	81124494 <__reset+0xfb104494>

81124928 <__umoddi3>:
81124928:	defff404 	addi	sp,sp,-48
8112492c:	de00012e 	bgeu	sp,et,81124934 <__umoddi3+0xc>
81124930:	003b68fa 	trap	3
81124934:	df000a15 	stw	fp,40(sp)
81124938:	dc400315 	stw	r17,12(sp)
8112493c:	dc000215 	stw	r16,8(sp)
81124940:	dfc00b15 	stw	ra,44(sp)
81124944:	ddc00915 	stw	r23,36(sp)
81124948:	dd800815 	stw	r22,32(sp)
8112494c:	dd400715 	stw	r21,28(sp)
81124950:	dd000615 	stw	r20,24(sp)
81124954:	dcc00515 	stw	r19,20(sp)
81124958:	dc800415 	stw	r18,16(sp)
8112495c:	2021883a 	mov	r16,r4
81124960:	2823883a 	mov	r17,r5
81124964:	2839883a 	mov	fp,r5
81124968:	38003c1e 	bne	r7,zero,81124a5c <__umoddi3+0x134>
8112496c:	3027883a 	mov	r19,r6
81124970:	2029883a 	mov	r20,r4
81124974:	2980512e 	bgeu	r5,r6,81124abc <__umoddi3+0x194>
81124978:	00bfffd4 	movui	r2,65535
8112497c:	11809a36 	bltu	r2,r6,81124be8 <__umoddi3+0x2c0>
81124980:	01003fc4 	movi	r4,255
81124984:	2189803a 	cmpltu	r4,r4,r6
81124988:	200890fa 	slli	r4,r4,3
8112498c:	3104d83a 	srl	r2,r6,r4
81124990:	00e04534 	movhi	r3,33044
81124994:	18f8de04 	addi	r3,r3,-7304
81124998:	1885883a 	add	r2,r3,r2
8112499c:	10c00003 	ldbu	r3,0(r2)
811249a0:	00800804 	movi	r2,32
811249a4:	1909883a 	add	r4,r3,r4
811249a8:	1125c83a 	sub	r18,r2,r4
811249ac:	90000526 	beq	r18,zero,811249c4 <__umoddi3+0x9c>
811249b0:	8ca2983a 	sll	r17,r17,r18
811249b4:	8108d83a 	srl	r4,r16,r4
811249b8:	34a6983a 	sll	r19,r6,r18
811249bc:	84a8983a 	sll	r20,r16,r18
811249c0:	2478b03a 	or	fp,r4,r17
811249c4:	982ed43a 	srli	r23,r19,16
811249c8:	e009883a 	mov	r4,fp
811249cc:	9dbfffcc 	andi	r22,r19,65535
811249d0:	b80b883a 	mov	r5,r23
811249d4:	1124fc40 	call	81124fc4 <__umodsi3>
811249d8:	e009883a 	mov	r4,fp
811249dc:	b80b883a 	mov	r5,r23
811249e0:	102b883a 	mov	r21,r2
811249e4:	1124f600 	call	81124f60 <__udivsi3>
811249e8:	a806943a 	slli	r3,r21,16
811249ec:	a008d43a 	srli	r4,r20,16
811249f0:	b085383a 	mul	r2,r22,r2
811249f4:	20c8b03a 	or	r4,r4,r3
811249f8:	2080032e 	bgeu	r4,r2,81124a08 <__umoddi3+0xe0>
811249fc:	24c9883a 	add	r4,r4,r19
81124a00:	24c00136 	bltu	r4,r19,81124a08 <__umoddi3+0xe0>
81124a04:	20811036 	bltu	r4,r2,81124e48 <__umoddi3+0x520>
81124a08:	20abc83a 	sub	r21,r4,r2
81124a0c:	b80b883a 	mov	r5,r23
81124a10:	a809883a 	mov	r4,r21
81124a14:	1124fc40 	call	81124fc4 <__umodsi3>
81124a18:	1023883a 	mov	r17,r2
81124a1c:	b80b883a 	mov	r5,r23
81124a20:	a809883a 	mov	r4,r21
81124a24:	1124f600 	call	81124f60 <__udivsi3>
81124a28:	8822943a 	slli	r17,r17,16
81124a2c:	b085383a 	mul	r2,r22,r2
81124a30:	a0ffffcc 	andi	r3,r20,65535
81124a34:	1c46b03a 	or	r3,r3,r17
81124a38:	1880042e 	bgeu	r3,r2,81124a4c <__umoddi3+0x124>
81124a3c:	1cc7883a 	add	r3,r3,r19
81124a40:	1cc00236 	bltu	r3,r19,81124a4c <__umoddi3+0x124>
81124a44:	1880012e 	bgeu	r3,r2,81124a4c <__umoddi3+0x124>
81124a48:	1cc7883a 	add	r3,r3,r19
81124a4c:	1885c83a 	sub	r2,r3,r2
81124a50:	1484d83a 	srl	r2,r2,r18
81124a54:	0007883a 	mov	r3,zero
81124a58:	00004f06 	br	81124b98 <__umoddi3+0x270>
81124a5c:	29c04c36 	bltu	r5,r7,81124b90 <__umoddi3+0x268>
81124a60:	00bfffd4 	movui	r2,65535
81124a64:	11c0582e 	bgeu	r2,r7,81124bc8 <__umoddi3+0x2a0>
81124a68:	00804034 	movhi	r2,256
81124a6c:	10bfffc4 	addi	r2,r2,-1
81124a70:	11c0e736 	bltu	r2,r7,81124e10 <__umoddi3+0x4e8>
81124a74:	01000404 	movi	r4,16
81124a78:	3904d83a 	srl	r2,r7,r4
81124a7c:	00e04534 	movhi	r3,33044
81124a80:	18f8de04 	addi	r3,r3,-7304
81124a84:	1885883a 	add	r2,r3,r2
81124a88:	14c00003 	ldbu	r19,0(r2)
81124a8c:	00c00804 	movi	r3,32
81124a90:	9927883a 	add	r19,r19,r4
81124a94:	1ce9c83a 	sub	r20,r3,r19
81124a98:	a000581e 	bne	r20,zero,81124bfc <__umoddi3+0x2d4>
81124a9c:	3c400136 	bltu	r7,r17,81124aa4 <__umoddi3+0x17c>
81124aa0:	8180eb36 	bltu	r16,r6,81124e50 <__umoddi3+0x528>
81124aa4:	8185c83a 	sub	r2,r16,r6
81124aa8:	89e3c83a 	sub	r17,r17,r7
81124aac:	8089803a 	cmpltu	r4,r16,r2
81124ab0:	8939c83a 	sub	fp,r17,r4
81124ab4:	e007883a 	mov	r3,fp
81124ab8:	00003706 	br	81124b98 <__umoddi3+0x270>
81124abc:	3000041e 	bne	r6,zero,81124ad0 <__umoddi3+0x1a8>
81124ac0:	000b883a 	mov	r5,zero
81124ac4:	01000044 	movi	r4,1
81124ac8:	1124f600 	call	81124f60 <__udivsi3>
81124acc:	1027883a 	mov	r19,r2
81124ad0:	00bfffd4 	movui	r2,65535
81124ad4:	14c0402e 	bgeu	r2,r19,81124bd8 <__umoddi3+0x2b0>
81124ad8:	00804034 	movhi	r2,256
81124adc:	10bfffc4 	addi	r2,r2,-1
81124ae0:	14c0cd36 	bltu	r2,r19,81124e18 <__umoddi3+0x4f0>
81124ae4:	00800404 	movi	r2,16
81124ae8:	9886d83a 	srl	r3,r19,r2
81124aec:	01204534 	movhi	r4,33044
81124af0:	2138de04 	addi	r4,r4,-7304
81124af4:	20c7883a 	add	r3,r4,r3
81124af8:	18c00003 	ldbu	r3,0(r3)
81124afc:	1887883a 	add	r3,r3,r2
81124b00:	00800804 	movi	r2,32
81124b04:	10e5c83a 	sub	r18,r2,r3
81124b08:	9000901e 	bne	r18,zero,81124d4c <__umoddi3+0x424>
81124b0c:	982cd43a 	srli	r22,r19,16
81124b10:	8ce3c83a 	sub	r17,r17,r19
81124b14:	9d7fffcc 	andi	r21,r19,65535
81124b18:	b00b883a 	mov	r5,r22
81124b1c:	8809883a 	mov	r4,r17
81124b20:	1124fc40 	call	81124fc4 <__umodsi3>
81124b24:	8809883a 	mov	r4,r17
81124b28:	b00b883a 	mov	r5,r22
81124b2c:	1021883a 	mov	r16,r2
81124b30:	1124f600 	call	81124f60 <__udivsi3>
81124b34:	8006943a 	slli	r3,r16,16
81124b38:	a008d43a 	srli	r4,r20,16
81124b3c:	1545383a 	mul	r2,r2,r21
81124b40:	20c8b03a 	or	r4,r4,r3
81124b44:	2080042e 	bgeu	r4,r2,81124b58 <__umoddi3+0x230>
81124b48:	24c9883a 	add	r4,r4,r19
81124b4c:	24c00236 	bltu	r4,r19,81124b58 <__umoddi3+0x230>
81124b50:	2080012e 	bgeu	r4,r2,81124b58 <__umoddi3+0x230>
81124b54:	24c9883a 	add	r4,r4,r19
81124b58:	20a1c83a 	sub	r16,r4,r2
81124b5c:	b00b883a 	mov	r5,r22
81124b60:	8009883a 	mov	r4,r16
81124b64:	1124fc40 	call	81124fc4 <__umodsi3>
81124b68:	1023883a 	mov	r17,r2
81124b6c:	b00b883a 	mov	r5,r22
81124b70:	8009883a 	mov	r4,r16
81124b74:	1124f600 	call	81124f60 <__udivsi3>
81124b78:	8822943a 	slli	r17,r17,16
81124b7c:	1545383a 	mul	r2,r2,r21
81124b80:	a53fffcc 	andi	r20,r20,65535
81124b84:	a446b03a 	or	r3,r20,r17
81124b88:	18bfb02e 	bgeu	r3,r2,81124a4c <__reset+0xfb104a4c>
81124b8c:	003fab06 	br	81124a3c <__reset+0xfb104a3c>
81124b90:	2005883a 	mov	r2,r4
81124b94:	2807883a 	mov	r3,r5
81124b98:	dfc00b17 	ldw	ra,44(sp)
81124b9c:	df000a17 	ldw	fp,40(sp)
81124ba0:	ddc00917 	ldw	r23,36(sp)
81124ba4:	dd800817 	ldw	r22,32(sp)
81124ba8:	dd400717 	ldw	r21,28(sp)
81124bac:	dd000617 	ldw	r20,24(sp)
81124bb0:	dcc00517 	ldw	r19,20(sp)
81124bb4:	dc800417 	ldw	r18,16(sp)
81124bb8:	dc400317 	ldw	r17,12(sp)
81124bbc:	dc000217 	ldw	r16,8(sp)
81124bc0:	dec00c04 	addi	sp,sp,48
81124bc4:	f800283a 	ret
81124bc8:	04c03fc4 	movi	r19,255
81124bcc:	99c9803a 	cmpltu	r4,r19,r7
81124bd0:	200890fa 	slli	r4,r4,3
81124bd4:	003fa806 	br	81124a78 <__reset+0xfb104a78>
81124bd8:	00803fc4 	movi	r2,255
81124bdc:	14c5803a 	cmpltu	r2,r2,r19
81124be0:	100490fa 	slli	r2,r2,3
81124be4:	003fc006 	br	81124ae8 <__reset+0xfb104ae8>
81124be8:	00804034 	movhi	r2,256
81124bec:	10bfffc4 	addi	r2,r2,-1
81124bf0:	11808b36 	bltu	r2,r6,81124e20 <__umoddi3+0x4f8>
81124bf4:	01000404 	movi	r4,16
81124bf8:	003f6406 	br	8112498c <__reset+0xfb10498c>
81124bfc:	34c4d83a 	srl	r2,r6,r19
81124c00:	3d0e983a 	sll	r7,r7,r20
81124c04:	8cf8d83a 	srl	fp,r17,r19
81124c08:	8d10983a 	sll	r8,r17,r20
81124c0c:	38aab03a 	or	r21,r7,r2
81124c10:	a82cd43a 	srli	r22,r21,16
81124c14:	84e2d83a 	srl	r17,r16,r19
81124c18:	e009883a 	mov	r4,fp
81124c1c:	b00b883a 	mov	r5,r22
81124c20:	8a22b03a 	or	r17,r17,r8
81124c24:	3524983a 	sll	r18,r6,r20
81124c28:	1124fc40 	call	81124fc4 <__umodsi3>
81124c2c:	e009883a 	mov	r4,fp
81124c30:	b00b883a 	mov	r5,r22
81124c34:	102f883a 	mov	r23,r2
81124c38:	1124f600 	call	81124f60 <__udivsi3>
81124c3c:	100d883a 	mov	r6,r2
81124c40:	b808943a 	slli	r4,r23,16
81124c44:	aa3fffcc 	andi	r8,r21,65535
81124c48:	8804d43a 	srli	r2,r17,16
81124c4c:	41af383a 	mul	r23,r8,r6
81124c50:	8520983a 	sll	r16,r16,r20
81124c54:	1104b03a 	or	r2,r2,r4
81124c58:	15c0042e 	bgeu	r2,r23,81124c6c <__umoddi3+0x344>
81124c5c:	1545883a 	add	r2,r2,r21
81124c60:	30ffffc4 	addi	r3,r6,-1
81124c64:	1540742e 	bgeu	r2,r21,81124e38 <__umoddi3+0x510>
81124c68:	180d883a 	mov	r6,r3
81124c6c:	15efc83a 	sub	r23,r2,r23
81124c70:	b00b883a 	mov	r5,r22
81124c74:	b809883a 	mov	r4,r23
81124c78:	d9800115 	stw	r6,4(sp)
81124c7c:	da000015 	stw	r8,0(sp)
81124c80:	1124fc40 	call	81124fc4 <__umodsi3>
81124c84:	b00b883a 	mov	r5,r22
81124c88:	b809883a 	mov	r4,r23
81124c8c:	1039883a 	mov	fp,r2
81124c90:	1124f600 	call	81124f60 <__udivsi3>
81124c94:	da000017 	ldw	r8,0(sp)
81124c98:	e038943a 	slli	fp,fp,16
81124c9c:	100b883a 	mov	r5,r2
81124ca0:	4089383a 	mul	r4,r8,r2
81124ca4:	8a3fffcc 	andi	r8,r17,65535
81124ca8:	4710b03a 	or	r8,r8,fp
81124cac:	d9800117 	ldw	r6,4(sp)
81124cb0:	4100042e 	bgeu	r8,r4,81124cc4 <__umoddi3+0x39c>
81124cb4:	4551883a 	add	r8,r8,r21
81124cb8:	10bfffc4 	addi	r2,r2,-1
81124cbc:	45405a2e 	bgeu	r8,r21,81124e28 <__umoddi3+0x500>
81124cc0:	100b883a 	mov	r5,r2
81124cc4:	300c943a 	slli	r6,r6,16
81124cc8:	91ffffcc 	andi	r7,r18,65535
81124ccc:	9004d43a 	srli	r2,r18,16
81124cd0:	314cb03a 	or	r6,r6,r5
81124cd4:	317fffcc 	andi	r5,r6,65535
81124cd8:	300cd43a 	srli	r6,r6,16
81124cdc:	29d3383a 	mul	r9,r5,r7
81124ce0:	288b383a 	mul	r5,r5,r2
81124ce4:	31cf383a 	mul	r7,r6,r7
81124ce8:	4806d43a 	srli	r3,r9,16
81124cec:	4111c83a 	sub	r8,r8,r4
81124cf0:	29cb883a 	add	r5,r5,r7
81124cf4:	194b883a 	add	r5,r3,r5
81124cf8:	3085383a 	mul	r2,r6,r2
81124cfc:	29c0022e 	bgeu	r5,r7,81124d08 <__umoddi3+0x3e0>
81124d00:	00c00074 	movhi	r3,1
81124d04:	10c5883a 	add	r2,r2,r3
81124d08:	2808d43a 	srli	r4,r5,16
81124d0c:	280a943a 	slli	r5,r5,16
81124d10:	4a7fffcc 	andi	r9,r9,65535
81124d14:	2085883a 	add	r2,r4,r2
81124d18:	2a4b883a 	add	r5,r5,r9
81124d1c:	40803636 	bltu	r8,r2,81124df8 <__umoddi3+0x4d0>
81124d20:	40804d26 	beq	r8,r2,81124e58 <__umoddi3+0x530>
81124d24:	4089c83a 	sub	r4,r8,r2
81124d28:	280f883a 	mov	r7,r5
81124d2c:	81cfc83a 	sub	r7,r16,r7
81124d30:	81c7803a 	cmpltu	r3,r16,r7
81124d34:	20c7c83a 	sub	r3,r4,r3
81124d38:	1cc4983a 	sll	r2,r3,r19
81124d3c:	3d0ed83a 	srl	r7,r7,r20
81124d40:	1d06d83a 	srl	r3,r3,r20
81124d44:	11c4b03a 	or	r2,r2,r7
81124d48:	003f9306 	br	81124b98 <__reset+0xfb104b98>
81124d4c:	9ca6983a 	sll	r19,r19,r18
81124d50:	88e8d83a 	srl	r20,r17,r3
81124d54:	80c4d83a 	srl	r2,r16,r3
81124d58:	982cd43a 	srli	r22,r19,16
81124d5c:	8ca2983a 	sll	r17,r17,r18
81124d60:	a009883a 	mov	r4,r20
81124d64:	b00b883a 	mov	r5,r22
81124d68:	1478b03a 	or	fp,r2,r17
81124d6c:	1124fc40 	call	81124fc4 <__umodsi3>
81124d70:	a009883a 	mov	r4,r20
81124d74:	b00b883a 	mov	r5,r22
81124d78:	1023883a 	mov	r17,r2
81124d7c:	1124f600 	call	81124f60 <__udivsi3>
81124d80:	9d7fffcc 	andi	r21,r19,65535
81124d84:	880a943a 	slli	r5,r17,16
81124d88:	e008d43a 	srli	r4,fp,16
81124d8c:	a885383a 	mul	r2,r21,r2
81124d90:	84a8983a 	sll	r20,r16,r18
81124d94:	2148b03a 	or	r4,r4,r5
81124d98:	2080042e 	bgeu	r4,r2,81124dac <__umoddi3+0x484>
81124d9c:	24c9883a 	add	r4,r4,r19
81124da0:	24c00236 	bltu	r4,r19,81124dac <__umoddi3+0x484>
81124da4:	2080012e 	bgeu	r4,r2,81124dac <__umoddi3+0x484>
81124da8:	24c9883a 	add	r4,r4,r19
81124dac:	20a3c83a 	sub	r17,r4,r2
81124db0:	b00b883a 	mov	r5,r22
81124db4:	8809883a 	mov	r4,r17
81124db8:	1124fc40 	call	81124fc4 <__umodsi3>
81124dbc:	102f883a 	mov	r23,r2
81124dc0:	8809883a 	mov	r4,r17
81124dc4:	b00b883a 	mov	r5,r22
81124dc8:	1124f600 	call	81124f60 <__udivsi3>
81124dcc:	b82e943a 	slli	r23,r23,16
81124dd0:	a885383a 	mul	r2,r21,r2
81124dd4:	e13fffcc 	andi	r4,fp,65535
81124dd8:	25c8b03a 	or	r4,r4,r23
81124ddc:	2080042e 	bgeu	r4,r2,81124df0 <__umoddi3+0x4c8>
81124de0:	24c9883a 	add	r4,r4,r19
81124de4:	24c00236 	bltu	r4,r19,81124df0 <__umoddi3+0x4c8>
81124de8:	2080012e 	bgeu	r4,r2,81124df0 <__umoddi3+0x4c8>
81124dec:	24c9883a 	add	r4,r4,r19
81124df0:	20a3c83a 	sub	r17,r4,r2
81124df4:	003f4806 	br	81124b18 <__reset+0xfb104b18>
81124df8:	2c8fc83a 	sub	r7,r5,r18
81124dfc:	1545c83a 	sub	r2,r2,r21
81124e00:	29cb803a 	cmpltu	r5,r5,r7
81124e04:	1145c83a 	sub	r2,r2,r5
81124e08:	4089c83a 	sub	r4,r8,r2
81124e0c:	003fc706 	br	81124d2c <__reset+0xfb104d2c>
81124e10:	01000604 	movi	r4,24
81124e14:	003f1806 	br	81124a78 <__reset+0xfb104a78>
81124e18:	00800604 	movi	r2,24
81124e1c:	003f3206 	br	81124ae8 <__reset+0xfb104ae8>
81124e20:	01000604 	movi	r4,24
81124e24:	003ed906 	br	8112498c <__reset+0xfb10498c>
81124e28:	413fa52e 	bgeu	r8,r4,81124cc0 <__reset+0xfb104cc0>
81124e2c:	297fff84 	addi	r5,r5,-2
81124e30:	4551883a 	add	r8,r8,r21
81124e34:	003fa306 	br	81124cc4 <__reset+0xfb104cc4>
81124e38:	15ff8b2e 	bgeu	r2,r23,81124c68 <__reset+0xfb104c68>
81124e3c:	31bfff84 	addi	r6,r6,-2
81124e40:	1545883a 	add	r2,r2,r21
81124e44:	003f8906 	br	81124c6c <__reset+0xfb104c6c>
81124e48:	24c9883a 	add	r4,r4,r19
81124e4c:	003eee06 	br	81124a08 <__reset+0xfb104a08>
81124e50:	8005883a 	mov	r2,r16
81124e54:	003f1706 	br	81124ab4 <__reset+0xfb104ab4>
81124e58:	817fe736 	bltu	r16,r5,81124df8 <__reset+0xfb104df8>
81124e5c:	280f883a 	mov	r7,r5
81124e60:	0009883a 	mov	r4,zero
81124e64:	003fb106 	br	81124d2c <__reset+0xfb104d2c>

81124e68 <__divsi3>:
81124e68:	20001b16 	blt	r4,zero,81124ed8 <__divsi3+0x70>
81124e6c:	000f883a 	mov	r7,zero
81124e70:	28001616 	blt	r5,zero,81124ecc <__divsi3+0x64>
81124e74:	200d883a 	mov	r6,r4
81124e78:	29001a2e 	bgeu	r5,r4,81124ee4 <__divsi3+0x7c>
81124e7c:	00800804 	movi	r2,32
81124e80:	00c00044 	movi	r3,1
81124e84:	00000106 	br	81124e8c <__divsi3+0x24>
81124e88:	10000d26 	beq	r2,zero,81124ec0 <__divsi3+0x58>
81124e8c:	294b883a 	add	r5,r5,r5
81124e90:	10bfffc4 	addi	r2,r2,-1
81124e94:	18c7883a 	add	r3,r3,r3
81124e98:	293ffb36 	bltu	r5,r4,81124e88 <__reset+0xfb104e88>
81124e9c:	0005883a 	mov	r2,zero
81124ea0:	18000726 	beq	r3,zero,81124ec0 <__divsi3+0x58>
81124ea4:	0005883a 	mov	r2,zero
81124ea8:	31400236 	bltu	r6,r5,81124eb4 <__divsi3+0x4c>
81124eac:	314dc83a 	sub	r6,r6,r5
81124eb0:	10c4b03a 	or	r2,r2,r3
81124eb4:	1806d07a 	srli	r3,r3,1
81124eb8:	280ad07a 	srli	r5,r5,1
81124ebc:	183ffa1e 	bne	r3,zero,81124ea8 <__reset+0xfb104ea8>
81124ec0:	38000126 	beq	r7,zero,81124ec8 <__divsi3+0x60>
81124ec4:	0085c83a 	sub	r2,zero,r2
81124ec8:	f800283a 	ret
81124ecc:	014bc83a 	sub	r5,zero,r5
81124ed0:	39c0005c 	xori	r7,r7,1
81124ed4:	003fe706 	br	81124e74 <__reset+0xfb104e74>
81124ed8:	0109c83a 	sub	r4,zero,r4
81124edc:	01c00044 	movi	r7,1
81124ee0:	003fe306 	br	81124e70 <__reset+0xfb104e70>
81124ee4:	00c00044 	movi	r3,1
81124ee8:	003fee06 	br	81124ea4 <__reset+0xfb104ea4>

81124eec <__modsi3>:
81124eec:	20001716 	blt	r4,zero,81124f4c <__modsi3+0x60>
81124ef0:	000f883a 	mov	r7,zero
81124ef4:	2005883a 	mov	r2,r4
81124ef8:	28001216 	blt	r5,zero,81124f44 <__modsi3+0x58>
81124efc:	2900162e 	bgeu	r5,r4,81124f58 <__modsi3+0x6c>
81124f00:	01800804 	movi	r6,32
81124f04:	00c00044 	movi	r3,1
81124f08:	00000106 	br	81124f10 <__modsi3+0x24>
81124f0c:	30000a26 	beq	r6,zero,81124f38 <__modsi3+0x4c>
81124f10:	294b883a 	add	r5,r5,r5
81124f14:	31bfffc4 	addi	r6,r6,-1
81124f18:	18c7883a 	add	r3,r3,r3
81124f1c:	293ffb36 	bltu	r5,r4,81124f0c <__reset+0xfb104f0c>
81124f20:	18000526 	beq	r3,zero,81124f38 <__modsi3+0x4c>
81124f24:	1806d07a 	srli	r3,r3,1
81124f28:	11400136 	bltu	r2,r5,81124f30 <__modsi3+0x44>
81124f2c:	1145c83a 	sub	r2,r2,r5
81124f30:	280ad07a 	srli	r5,r5,1
81124f34:	183ffb1e 	bne	r3,zero,81124f24 <__reset+0xfb104f24>
81124f38:	38000126 	beq	r7,zero,81124f40 <__modsi3+0x54>
81124f3c:	0085c83a 	sub	r2,zero,r2
81124f40:	f800283a 	ret
81124f44:	014bc83a 	sub	r5,zero,r5
81124f48:	003fec06 	br	81124efc <__reset+0xfb104efc>
81124f4c:	0109c83a 	sub	r4,zero,r4
81124f50:	01c00044 	movi	r7,1
81124f54:	003fe706 	br	81124ef4 <__reset+0xfb104ef4>
81124f58:	00c00044 	movi	r3,1
81124f5c:	003ff106 	br	81124f24 <__reset+0xfb104f24>

81124f60 <__udivsi3>:
81124f60:	200d883a 	mov	r6,r4
81124f64:	2900152e 	bgeu	r5,r4,81124fbc <__udivsi3+0x5c>
81124f68:	28001416 	blt	r5,zero,81124fbc <__udivsi3+0x5c>
81124f6c:	00800804 	movi	r2,32
81124f70:	00c00044 	movi	r3,1
81124f74:	00000206 	br	81124f80 <__udivsi3+0x20>
81124f78:	10000e26 	beq	r2,zero,81124fb4 <__udivsi3+0x54>
81124f7c:	28000516 	blt	r5,zero,81124f94 <__udivsi3+0x34>
81124f80:	294b883a 	add	r5,r5,r5
81124f84:	10bfffc4 	addi	r2,r2,-1
81124f88:	18c7883a 	add	r3,r3,r3
81124f8c:	293ffa36 	bltu	r5,r4,81124f78 <__reset+0xfb104f78>
81124f90:	18000826 	beq	r3,zero,81124fb4 <__udivsi3+0x54>
81124f94:	0005883a 	mov	r2,zero
81124f98:	31400236 	bltu	r6,r5,81124fa4 <__udivsi3+0x44>
81124f9c:	314dc83a 	sub	r6,r6,r5
81124fa0:	10c4b03a 	or	r2,r2,r3
81124fa4:	1806d07a 	srli	r3,r3,1
81124fa8:	280ad07a 	srli	r5,r5,1
81124fac:	183ffa1e 	bne	r3,zero,81124f98 <__reset+0xfb104f98>
81124fb0:	f800283a 	ret
81124fb4:	0005883a 	mov	r2,zero
81124fb8:	f800283a 	ret
81124fbc:	00c00044 	movi	r3,1
81124fc0:	003ff406 	br	81124f94 <__reset+0xfb104f94>

81124fc4 <__umodsi3>:
81124fc4:	2005883a 	mov	r2,r4
81124fc8:	2900122e 	bgeu	r5,r4,81125014 <__umodsi3+0x50>
81124fcc:	28001116 	blt	r5,zero,81125014 <__umodsi3+0x50>
81124fd0:	01800804 	movi	r6,32
81124fd4:	00c00044 	movi	r3,1
81124fd8:	00000206 	br	81124fe4 <__umodsi3+0x20>
81124fdc:	30000c26 	beq	r6,zero,81125010 <__umodsi3+0x4c>
81124fe0:	28000516 	blt	r5,zero,81124ff8 <__umodsi3+0x34>
81124fe4:	294b883a 	add	r5,r5,r5
81124fe8:	31bfffc4 	addi	r6,r6,-1
81124fec:	18c7883a 	add	r3,r3,r3
81124ff0:	293ffa36 	bltu	r5,r4,81124fdc <__reset+0xfb104fdc>
81124ff4:	18000626 	beq	r3,zero,81125010 <__umodsi3+0x4c>
81124ff8:	1806d07a 	srli	r3,r3,1
81124ffc:	11400136 	bltu	r2,r5,81125004 <__umodsi3+0x40>
81125000:	1145c83a 	sub	r2,r2,r5
81125004:	280ad07a 	srli	r5,r5,1
81125008:	183ffb1e 	bne	r3,zero,81124ff8 <__reset+0xfb104ff8>
8112500c:	f800283a 	ret
81125010:	f800283a 	ret
81125014:	00c00044 	movi	r3,1
81125018:	003ff706 	br	81124ff8 <__reset+0xfb104ff8>

8112501c <__eqsf2>:
8112501c:	2006d5fa 	srli	r3,r4,23
81125020:	280cd5fa 	srli	r6,r5,23
81125024:	01c02034 	movhi	r7,128
81125028:	39ffffc4 	addi	r7,r7,-1
8112502c:	18c03fcc 	andi	r3,r3,255
81125030:	02003fc4 	movi	r8,255
81125034:	3904703a 	and	r2,r7,r4
81125038:	31803fcc 	andi	r6,r6,255
8112503c:	394e703a 	and	r7,r7,r5
81125040:	2008d7fa 	srli	r4,r4,31
81125044:	280ad7fa 	srli	r5,r5,31
81125048:	1a000d26 	beq	r3,r8,81125080 <__eqsf2+0x64>
8112504c:	02003fc4 	movi	r8,255
81125050:	32000826 	beq	r6,r8,81125074 <__eqsf2+0x58>
81125054:	19800226 	beq	r3,r6,81125060 <__eqsf2+0x44>
81125058:	00800044 	movi	r2,1
8112505c:	f800283a 	ret
81125060:	11fffd1e 	bne	r2,r7,81125058 <__reset+0xfb105058>
81125064:	21400926 	beq	r4,r5,8112508c <__eqsf2+0x70>
81125068:	183ffb1e 	bne	r3,zero,81125058 <__reset+0xfb105058>
8112506c:	1004c03a 	cmpne	r2,r2,zero
81125070:	f800283a 	ret
81125074:	383ff726 	beq	r7,zero,81125054 <__reset+0xfb105054>
81125078:	00800044 	movi	r2,1
8112507c:	f800283a 	ret
81125080:	103ff226 	beq	r2,zero,8112504c <__reset+0xfb10504c>
81125084:	00800044 	movi	r2,1
81125088:	f800283a 	ret
8112508c:	0005883a 	mov	r2,zero
81125090:	f800283a 	ret

81125094 <__gesf2>:
81125094:	2004d5fa 	srli	r2,r4,23
81125098:	2806d5fa 	srli	r3,r5,23
8112509c:	01802034 	movhi	r6,128
811250a0:	31bfffc4 	addi	r6,r6,-1
811250a4:	10803fcc 	andi	r2,r2,255
811250a8:	01c03fc4 	movi	r7,255
811250ac:	3110703a 	and	r8,r6,r4
811250b0:	18c03fcc 	andi	r3,r3,255
811250b4:	314c703a 	and	r6,r6,r5
811250b8:	2008d7fa 	srli	r4,r4,31
811250bc:	280ad7fa 	srli	r5,r5,31
811250c0:	11c01926 	beq	r2,r7,81125128 <__gesf2+0x94>
811250c4:	01c03fc4 	movi	r7,255
811250c8:	19c00f26 	beq	r3,r7,81125108 <__gesf2+0x74>
811250cc:	1000061e 	bne	r2,zero,811250e8 <__gesf2+0x54>
811250d0:	400f003a 	cmpeq	r7,r8,zero
811250d4:	1800071e 	bne	r3,zero,811250f4 <__gesf2+0x60>
811250d8:	3000061e 	bne	r6,zero,811250f4 <__gesf2+0x60>
811250dc:	0005883a 	mov	r2,zero
811250e0:	40000e1e 	bne	r8,zero,8112511c <__gesf2+0x88>
811250e4:	f800283a 	ret
811250e8:	18000a1e 	bne	r3,zero,81125114 <__gesf2+0x80>
811250ec:	30000b26 	beq	r6,zero,8112511c <__gesf2+0x88>
811250f0:	000f883a 	mov	r7,zero
811250f4:	29403fcc 	andi	r5,r5,255
811250f8:	38000726 	beq	r7,zero,81125118 <__gesf2+0x84>
811250fc:	28000826 	beq	r5,zero,81125120 <__gesf2+0x8c>
81125100:	00800044 	movi	r2,1
81125104:	f800283a 	ret
81125108:	303ff026 	beq	r6,zero,811250cc <__reset+0xfb1050cc>
8112510c:	00bfff84 	movi	r2,-2
81125110:	f800283a 	ret
81125114:	29403fcc 	andi	r5,r5,255
81125118:	21400526 	beq	r4,r5,81125130 <__gesf2+0x9c>
8112511c:	203ff826 	beq	r4,zero,81125100 <__reset+0xfb105100>
81125120:	00bfffc4 	movi	r2,-1
81125124:	f800283a 	ret
81125128:	403fe626 	beq	r8,zero,811250c4 <__reset+0xfb1050c4>
8112512c:	003ff706 	br	8112510c <__reset+0xfb10510c>
81125130:	18bffa16 	blt	r3,r2,8112511c <__reset+0xfb10511c>
81125134:	10c00216 	blt	r2,r3,81125140 <__gesf2+0xac>
81125138:	323ff836 	bltu	r6,r8,8112511c <__reset+0xfb10511c>
8112513c:	4180022e 	bgeu	r8,r6,81125148 <__gesf2+0xb4>
81125140:	203fef1e 	bne	r4,zero,81125100 <__reset+0xfb105100>
81125144:	003ff606 	br	81125120 <__reset+0xfb105120>
81125148:	0005883a 	mov	r2,zero
8112514c:	f800283a 	ret

81125150 <__lesf2>:
81125150:	2004d5fa 	srli	r2,r4,23
81125154:	280cd5fa 	srli	r6,r5,23
81125158:	00c02034 	movhi	r3,128
8112515c:	18ffffc4 	addi	r3,r3,-1
81125160:	10803fcc 	andi	r2,r2,255
81125164:	01c03fc4 	movi	r7,255
81125168:	1910703a 	and	r8,r3,r4
8112516c:	31803fcc 	andi	r6,r6,255
81125170:	1946703a 	and	r3,r3,r5
81125174:	2008d7fa 	srli	r4,r4,31
81125178:	280ad7fa 	srli	r5,r5,31
8112517c:	11c01b26 	beq	r2,r7,811251ec <__lesf2+0x9c>
81125180:	01c03fc4 	movi	r7,255
81125184:	31c01126 	beq	r6,r7,811251cc <__lesf2+0x7c>
81125188:	1000071e 	bne	r2,zero,811251a8 <__lesf2+0x58>
8112518c:	400f003a 	cmpeq	r7,r8,zero
81125190:	21003fcc 	andi	r4,r4,255
81125194:	3000081e 	bne	r6,zero,811251b8 <__lesf2+0x68>
81125198:	1800071e 	bne	r3,zero,811251b8 <__lesf2+0x68>
8112519c:	0005883a 	mov	r2,zero
811251a0:	40000f1e 	bne	r8,zero,811251e0 <__lesf2+0x90>
811251a4:	f800283a 	ret
811251a8:	21003fcc 	andi	r4,r4,255
811251ac:	30000a1e 	bne	r6,zero,811251d8 <__lesf2+0x88>
811251b0:	18000b26 	beq	r3,zero,811251e0 <__lesf2+0x90>
811251b4:	000f883a 	mov	r7,zero
811251b8:	29403fcc 	andi	r5,r5,255
811251bc:	38000726 	beq	r7,zero,811251dc <__lesf2+0x8c>
811251c0:	28000826 	beq	r5,zero,811251e4 <__lesf2+0x94>
811251c4:	00800044 	movi	r2,1
811251c8:	f800283a 	ret
811251cc:	183fee26 	beq	r3,zero,81125188 <__reset+0xfb105188>
811251d0:	00800084 	movi	r2,2
811251d4:	f800283a 	ret
811251d8:	29403fcc 	andi	r5,r5,255
811251dc:	21400626 	beq	r4,r5,811251f8 <__lesf2+0xa8>
811251e0:	203ff826 	beq	r4,zero,811251c4 <__reset+0xfb1051c4>
811251e4:	00bfffc4 	movi	r2,-1
811251e8:	f800283a 	ret
811251ec:	403fe426 	beq	r8,zero,81125180 <__reset+0xfb105180>
811251f0:	00800084 	movi	r2,2
811251f4:	f800283a 	ret
811251f8:	30bff916 	blt	r6,r2,811251e0 <__reset+0xfb1051e0>
811251fc:	11800216 	blt	r2,r6,81125208 <__lesf2+0xb8>
81125200:	1a3ff736 	bltu	r3,r8,811251e0 <__reset+0xfb1051e0>
81125204:	40c0022e 	bgeu	r8,r3,81125210 <__lesf2+0xc0>
81125208:	203fee1e 	bne	r4,zero,811251c4 <__reset+0xfb1051c4>
8112520c:	003ff506 	br	811251e4 <__reset+0xfb1051e4>
81125210:	0005883a 	mov	r2,zero
81125214:	f800283a 	ret

81125218 <__adddf3>:
81125218:	02c00434 	movhi	r11,16
8112521c:	5affffc4 	addi	r11,r11,-1
81125220:	2806d7fa 	srli	r3,r5,31
81125224:	2ad4703a 	and	r10,r5,r11
81125228:	3ad2703a 	and	r9,r7,r11
8112522c:	3804d53a 	srli	r2,r7,20
81125230:	3018d77a 	srli	r12,r6,29
81125234:	280ad53a 	srli	r5,r5,20
81125238:	501490fa 	slli	r10,r10,3
8112523c:	2010d77a 	srli	r8,r4,29
81125240:	481290fa 	slli	r9,r9,3
81125244:	380ed7fa 	srli	r7,r7,31
81125248:	defffb04 	addi	sp,sp,-20
8112524c:	de00012e 	bgeu	sp,et,81125254 <__adddf3+0x3c>
81125250:	003b68fa 	trap	3
81125254:	dc800215 	stw	r18,8(sp)
81125258:	dc400115 	stw	r17,4(sp)
8112525c:	dc000015 	stw	r16,0(sp)
81125260:	dfc00415 	stw	ra,16(sp)
81125264:	dcc00315 	stw	r19,12(sp)
81125268:	1c803fcc 	andi	r18,r3,255
8112526c:	2c01ffcc 	andi	r16,r5,2047
81125270:	5210b03a 	or	r8,r10,r8
81125274:	202290fa 	slli	r17,r4,3
81125278:	1081ffcc 	andi	r2,r2,2047
8112527c:	4b12b03a 	or	r9,r9,r12
81125280:	300c90fa 	slli	r6,r6,3
81125284:	91c07526 	beq	r18,r7,8112545c <__adddf3+0x244>
81125288:	8087c83a 	sub	r3,r16,r2
8112528c:	00c0ab0e 	bge	zero,r3,8112553c <__adddf3+0x324>
81125290:	10002a1e 	bne	r2,zero,8112533c <__adddf3+0x124>
81125294:	4984b03a 	or	r2,r9,r6
81125298:	1000961e 	bne	r2,zero,811254f4 <__adddf3+0x2dc>
8112529c:	888001cc 	andi	r2,r17,7
811252a0:	10000726 	beq	r2,zero,811252c0 <__adddf3+0xa8>
811252a4:	888003cc 	andi	r2,r17,15
811252a8:	00c00104 	movi	r3,4
811252ac:	10c00426 	beq	r2,r3,811252c0 <__adddf3+0xa8>
811252b0:	88c7883a 	add	r3,r17,r3
811252b4:	1c63803a 	cmpltu	r17,r3,r17
811252b8:	4451883a 	add	r8,r8,r17
811252bc:	1823883a 	mov	r17,r3
811252c0:	4080202c 	andhi	r2,r8,128
811252c4:	10005926 	beq	r2,zero,8112542c <__adddf3+0x214>
811252c8:	84000044 	addi	r16,r16,1
811252cc:	0081ffc4 	movi	r2,2047
811252d0:	8080ba26 	beq	r16,r2,811255bc <__adddf3+0x3a4>
811252d4:	00bfe034 	movhi	r2,65408
811252d8:	10bfffc4 	addi	r2,r2,-1
811252dc:	4090703a 	and	r8,r8,r2
811252e0:	4004977a 	slli	r2,r8,29
811252e4:	4010927a 	slli	r8,r8,9
811252e8:	8822d0fa 	srli	r17,r17,3
811252ec:	8401ffcc 	andi	r16,r16,2047
811252f0:	4010d33a 	srli	r8,r8,12
811252f4:	9007883a 	mov	r3,r18
811252f8:	1444b03a 	or	r2,r2,r17
811252fc:	8401ffcc 	andi	r16,r16,2047
81125300:	8020953a 	slli	r16,r16,20
81125304:	18c03fcc 	andi	r3,r3,255
81125308:	01000434 	movhi	r4,16
8112530c:	213fffc4 	addi	r4,r4,-1
81125310:	180697fa 	slli	r3,r3,31
81125314:	4110703a 	and	r8,r8,r4
81125318:	4410b03a 	or	r8,r8,r16
8112531c:	40c6b03a 	or	r3,r8,r3
81125320:	dfc00417 	ldw	ra,16(sp)
81125324:	dcc00317 	ldw	r19,12(sp)
81125328:	dc800217 	ldw	r18,8(sp)
8112532c:	dc400117 	ldw	r17,4(sp)
81125330:	dc000017 	ldw	r16,0(sp)
81125334:	dec00504 	addi	sp,sp,20
81125338:	f800283a 	ret
8112533c:	0081ffc4 	movi	r2,2047
81125340:	80bfd626 	beq	r16,r2,8112529c <__reset+0xfb10529c>
81125344:	4a402034 	orhi	r9,r9,128
81125348:	00800e04 	movi	r2,56
8112534c:	10c09f16 	blt	r2,r3,811255cc <__adddf3+0x3b4>
81125350:	008007c4 	movi	r2,31
81125354:	10c0c216 	blt	r2,r3,81125660 <__adddf3+0x448>
81125358:	00800804 	movi	r2,32
8112535c:	10c5c83a 	sub	r2,r2,r3
81125360:	488a983a 	sll	r5,r9,r2
81125364:	30c8d83a 	srl	r4,r6,r3
81125368:	3084983a 	sll	r2,r6,r2
8112536c:	48c6d83a 	srl	r3,r9,r3
81125370:	290cb03a 	or	r6,r5,r4
81125374:	1004c03a 	cmpne	r2,r2,zero
81125378:	308cb03a 	or	r6,r6,r2
8112537c:	898dc83a 	sub	r6,r17,r6
81125380:	89a3803a 	cmpltu	r17,r17,r6
81125384:	40d1c83a 	sub	r8,r8,r3
81125388:	4451c83a 	sub	r8,r8,r17
8112538c:	3023883a 	mov	r17,r6
81125390:	4080202c 	andhi	r2,r8,128
81125394:	10002326 	beq	r2,zero,81125424 <__adddf3+0x20c>
81125398:	04c02034 	movhi	r19,128
8112539c:	9cffffc4 	addi	r19,r19,-1
811253a0:	44e6703a 	and	r19,r8,r19
811253a4:	98007626 	beq	r19,zero,81125580 <__adddf3+0x368>
811253a8:	9809883a 	mov	r4,r19
811253ac:	11119740 	call	81111974 <__clzsi2>
811253b0:	10fffe04 	addi	r3,r2,-8
811253b4:	010007c4 	movi	r4,31
811253b8:	20c07716 	blt	r4,r3,81125598 <__adddf3+0x380>
811253bc:	00800804 	movi	r2,32
811253c0:	10c5c83a 	sub	r2,r2,r3
811253c4:	8884d83a 	srl	r2,r17,r2
811253c8:	98d0983a 	sll	r8,r19,r3
811253cc:	88e2983a 	sll	r17,r17,r3
811253d0:	1204b03a 	or	r2,r2,r8
811253d4:	1c007416 	blt	r3,r16,811255a8 <__adddf3+0x390>
811253d8:	1c21c83a 	sub	r16,r3,r16
811253dc:	82000044 	addi	r8,r16,1
811253e0:	00c007c4 	movi	r3,31
811253e4:	1a009116 	blt	r3,r8,8112562c <__adddf3+0x414>
811253e8:	00c00804 	movi	r3,32
811253ec:	1a07c83a 	sub	r3,r3,r8
811253f0:	8a08d83a 	srl	r4,r17,r8
811253f4:	88e2983a 	sll	r17,r17,r3
811253f8:	10c6983a 	sll	r3,r2,r3
811253fc:	1210d83a 	srl	r8,r2,r8
81125400:	8804c03a 	cmpne	r2,r17,zero
81125404:	1906b03a 	or	r3,r3,r4
81125408:	18a2b03a 	or	r17,r3,r2
8112540c:	0021883a 	mov	r16,zero
81125410:	003fa206 	br	8112529c <__reset+0xfb10529c>
81125414:	1890b03a 	or	r8,r3,r2
81125418:	40017d26 	beq	r8,zero,81125a10 <__adddf3+0x7f8>
8112541c:	1011883a 	mov	r8,r2
81125420:	1823883a 	mov	r17,r3
81125424:	888001cc 	andi	r2,r17,7
81125428:	103f9e1e 	bne	r2,zero,811252a4 <__reset+0xfb1052a4>
8112542c:	4004977a 	slli	r2,r8,29
81125430:	8822d0fa 	srli	r17,r17,3
81125434:	4010d0fa 	srli	r8,r8,3
81125438:	9007883a 	mov	r3,r18
8112543c:	1444b03a 	or	r2,r2,r17
81125440:	0101ffc4 	movi	r4,2047
81125444:	81002426 	beq	r16,r4,811254d8 <__adddf3+0x2c0>
81125448:	8120703a 	and	r16,r16,r4
8112544c:	01000434 	movhi	r4,16
81125450:	213fffc4 	addi	r4,r4,-1
81125454:	4110703a 	and	r8,r8,r4
81125458:	003fa806 	br	811252fc <__reset+0xfb1052fc>
8112545c:	8089c83a 	sub	r4,r16,r2
81125460:	01005e0e 	bge	zero,r4,811255dc <__adddf3+0x3c4>
81125464:	10002b26 	beq	r2,zero,81125514 <__adddf3+0x2fc>
81125468:	0081ffc4 	movi	r2,2047
8112546c:	80bf8b26 	beq	r16,r2,8112529c <__reset+0xfb10529c>
81125470:	4a402034 	orhi	r9,r9,128
81125474:	00800e04 	movi	r2,56
81125478:	1100a40e 	bge	r2,r4,8112570c <__adddf3+0x4f4>
8112547c:	498cb03a 	or	r6,r9,r6
81125480:	300ac03a 	cmpne	r5,r6,zero
81125484:	0013883a 	mov	r9,zero
81125488:	2c4b883a 	add	r5,r5,r17
8112548c:	2c63803a 	cmpltu	r17,r5,r17
81125490:	4a11883a 	add	r8,r9,r8
81125494:	8a11883a 	add	r8,r17,r8
81125498:	2823883a 	mov	r17,r5
8112549c:	4080202c 	andhi	r2,r8,128
811254a0:	103fe026 	beq	r2,zero,81125424 <__reset+0xfb105424>
811254a4:	84000044 	addi	r16,r16,1
811254a8:	0081ffc4 	movi	r2,2047
811254ac:	8080d226 	beq	r16,r2,811257f8 <__adddf3+0x5e0>
811254b0:	00bfe034 	movhi	r2,65408
811254b4:	10bfffc4 	addi	r2,r2,-1
811254b8:	4090703a 	and	r8,r8,r2
811254bc:	880ad07a 	srli	r5,r17,1
811254c0:	400897fa 	slli	r4,r8,31
811254c4:	88c0004c 	andi	r3,r17,1
811254c8:	28e2b03a 	or	r17,r5,r3
811254cc:	4010d07a 	srli	r8,r8,1
811254d0:	2462b03a 	or	r17,r4,r17
811254d4:	003f7106 	br	8112529c <__reset+0xfb10529c>
811254d8:	4088b03a 	or	r4,r8,r2
811254dc:	20014526 	beq	r4,zero,811259f4 <__adddf3+0x7dc>
811254e0:	01000434 	movhi	r4,16
811254e4:	42000234 	orhi	r8,r8,8
811254e8:	213fffc4 	addi	r4,r4,-1
811254ec:	4110703a 	and	r8,r8,r4
811254f0:	003f8206 	br	811252fc <__reset+0xfb1052fc>
811254f4:	18ffffc4 	addi	r3,r3,-1
811254f8:	1800491e 	bne	r3,zero,81125620 <__adddf3+0x408>
811254fc:	898bc83a 	sub	r5,r17,r6
81125500:	8963803a 	cmpltu	r17,r17,r5
81125504:	4251c83a 	sub	r8,r8,r9
81125508:	4451c83a 	sub	r8,r8,r17
8112550c:	2823883a 	mov	r17,r5
81125510:	003f9f06 	br	81125390 <__reset+0xfb105390>
81125514:	4984b03a 	or	r2,r9,r6
81125518:	103f6026 	beq	r2,zero,8112529c <__reset+0xfb10529c>
8112551c:	213fffc4 	addi	r4,r4,-1
81125520:	2000931e 	bne	r4,zero,81125770 <__adddf3+0x558>
81125524:	898d883a 	add	r6,r17,r6
81125528:	3463803a 	cmpltu	r17,r6,r17
8112552c:	4251883a 	add	r8,r8,r9
81125530:	8a11883a 	add	r8,r17,r8
81125534:	3023883a 	mov	r17,r6
81125538:	003fd806 	br	8112549c <__reset+0xfb10549c>
8112553c:	1800541e 	bne	r3,zero,81125690 <__adddf3+0x478>
81125540:	80800044 	addi	r2,r16,1
81125544:	1081ffcc 	andi	r2,r2,2047
81125548:	00c00044 	movi	r3,1
8112554c:	1880a00e 	bge	r3,r2,811257d0 <__adddf3+0x5b8>
81125550:	8989c83a 	sub	r4,r17,r6
81125554:	8905803a 	cmpltu	r2,r17,r4
81125558:	4267c83a 	sub	r19,r8,r9
8112555c:	98a7c83a 	sub	r19,r19,r2
81125560:	9880202c 	andhi	r2,r19,128
81125564:	10006326 	beq	r2,zero,811256f4 <__adddf3+0x4dc>
81125568:	3463c83a 	sub	r17,r6,r17
8112556c:	4a07c83a 	sub	r3,r9,r8
81125570:	344d803a 	cmpltu	r6,r6,r17
81125574:	19a7c83a 	sub	r19,r3,r6
81125578:	3825883a 	mov	r18,r7
8112557c:	983f8a1e 	bne	r19,zero,811253a8 <__reset+0xfb1053a8>
81125580:	8809883a 	mov	r4,r17
81125584:	11119740 	call	81111974 <__clzsi2>
81125588:	10800804 	addi	r2,r2,32
8112558c:	10fffe04 	addi	r3,r2,-8
81125590:	010007c4 	movi	r4,31
81125594:	20ff890e 	bge	r4,r3,811253bc <__reset+0xfb1053bc>
81125598:	10bff604 	addi	r2,r2,-40
8112559c:	8884983a 	sll	r2,r17,r2
811255a0:	0023883a 	mov	r17,zero
811255a4:	1c3f8c0e 	bge	r3,r16,811253d8 <__reset+0xfb1053d8>
811255a8:	023fe034 	movhi	r8,65408
811255ac:	423fffc4 	addi	r8,r8,-1
811255b0:	80e1c83a 	sub	r16,r16,r3
811255b4:	1210703a 	and	r8,r2,r8
811255b8:	003f3806 	br	8112529c <__reset+0xfb10529c>
811255bc:	9007883a 	mov	r3,r18
811255c0:	0011883a 	mov	r8,zero
811255c4:	0005883a 	mov	r2,zero
811255c8:	003f4c06 	br	811252fc <__reset+0xfb1052fc>
811255cc:	498cb03a 	or	r6,r9,r6
811255d0:	300cc03a 	cmpne	r6,r6,zero
811255d4:	0007883a 	mov	r3,zero
811255d8:	003f6806 	br	8112537c <__reset+0xfb10537c>
811255dc:	20009c1e 	bne	r4,zero,81125850 <__adddf3+0x638>
811255e0:	80800044 	addi	r2,r16,1
811255e4:	1141ffcc 	andi	r5,r2,2047
811255e8:	01000044 	movi	r4,1
811255ec:	2140670e 	bge	r4,r5,8112578c <__adddf3+0x574>
811255f0:	0101ffc4 	movi	r4,2047
811255f4:	11007f26 	beq	r2,r4,811257f4 <__adddf3+0x5dc>
811255f8:	898d883a 	add	r6,r17,r6
811255fc:	4247883a 	add	r3,r8,r9
81125600:	3451803a 	cmpltu	r8,r6,r17
81125604:	40d1883a 	add	r8,r8,r3
81125608:	402297fa 	slli	r17,r8,31
8112560c:	300cd07a 	srli	r6,r6,1
81125610:	4010d07a 	srli	r8,r8,1
81125614:	1021883a 	mov	r16,r2
81125618:	89a2b03a 	or	r17,r17,r6
8112561c:	003f1f06 	br	8112529c <__reset+0xfb10529c>
81125620:	0081ffc4 	movi	r2,2047
81125624:	80bf481e 	bne	r16,r2,81125348 <__reset+0xfb105348>
81125628:	003f1c06 	br	8112529c <__reset+0xfb10529c>
8112562c:	843ff844 	addi	r16,r16,-31
81125630:	01000804 	movi	r4,32
81125634:	1406d83a 	srl	r3,r2,r16
81125638:	41005026 	beq	r8,r4,8112577c <__adddf3+0x564>
8112563c:	01001004 	movi	r4,64
81125640:	2211c83a 	sub	r8,r4,r8
81125644:	1204983a 	sll	r2,r2,r8
81125648:	88a2b03a 	or	r17,r17,r2
8112564c:	8822c03a 	cmpne	r17,r17,zero
81125650:	1c62b03a 	or	r17,r3,r17
81125654:	0011883a 	mov	r8,zero
81125658:	0021883a 	mov	r16,zero
8112565c:	003f7106 	br	81125424 <__reset+0xfb105424>
81125660:	193ff804 	addi	r4,r3,-32
81125664:	00800804 	movi	r2,32
81125668:	4908d83a 	srl	r4,r9,r4
8112566c:	18804526 	beq	r3,r2,81125784 <__adddf3+0x56c>
81125670:	00801004 	movi	r2,64
81125674:	10c5c83a 	sub	r2,r2,r3
81125678:	4886983a 	sll	r3,r9,r2
8112567c:	198cb03a 	or	r6,r3,r6
81125680:	300cc03a 	cmpne	r6,r6,zero
81125684:	218cb03a 	or	r6,r4,r6
81125688:	0007883a 	mov	r3,zero
8112568c:	003f3b06 	br	8112537c <__reset+0xfb10537c>
81125690:	80002a26 	beq	r16,zero,8112573c <__adddf3+0x524>
81125694:	0101ffc4 	movi	r4,2047
81125698:	11006826 	beq	r2,r4,8112583c <__adddf3+0x624>
8112569c:	00c7c83a 	sub	r3,zero,r3
811256a0:	42002034 	orhi	r8,r8,128
811256a4:	01000e04 	movi	r4,56
811256a8:	20c07c16 	blt	r4,r3,8112589c <__adddf3+0x684>
811256ac:	010007c4 	movi	r4,31
811256b0:	20c0da16 	blt	r4,r3,81125a1c <__adddf3+0x804>
811256b4:	01000804 	movi	r4,32
811256b8:	20c9c83a 	sub	r4,r4,r3
811256bc:	4114983a 	sll	r10,r8,r4
811256c0:	88cad83a 	srl	r5,r17,r3
811256c4:	8908983a 	sll	r4,r17,r4
811256c8:	40c6d83a 	srl	r3,r8,r3
811256cc:	5162b03a 	or	r17,r10,r5
811256d0:	2008c03a 	cmpne	r4,r4,zero
811256d4:	8922b03a 	or	r17,r17,r4
811256d8:	3463c83a 	sub	r17,r6,r17
811256dc:	48c7c83a 	sub	r3,r9,r3
811256e0:	344d803a 	cmpltu	r6,r6,r17
811256e4:	1991c83a 	sub	r8,r3,r6
811256e8:	1021883a 	mov	r16,r2
811256ec:	3825883a 	mov	r18,r7
811256f0:	003f2706 	br	81125390 <__reset+0xfb105390>
811256f4:	24d0b03a 	or	r8,r4,r19
811256f8:	40001b1e 	bne	r8,zero,81125768 <__adddf3+0x550>
811256fc:	0005883a 	mov	r2,zero
81125700:	0007883a 	mov	r3,zero
81125704:	0021883a 	mov	r16,zero
81125708:	003f4d06 	br	81125440 <__reset+0xfb105440>
8112570c:	008007c4 	movi	r2,31
81125710:	11003c16 	blt	r2,r4,81125804 <__adddf3+0x5ec>
81125714:	00800804 	movi	r2,32
81125718:	1105c83a 	sub	r2,r2,r4
8112571c:	488e983a 	sll	r7,r9,r2
81125720:	310ad83a 	srl	r5,r6,r4
81125724:	3084983a 	sll	r2,r6,r2
81125728:	4912d83a 	srl	r9,r9,r4
8112572c:	394ab03a 	or	r5,r7,r5
81125730:	1004c03a 	cmpne	r2,r2,zero
81125734:	288ab03a 	or	r5,r5,r2
81125738:	003f5306 	br	81125488 <__reset+0xfb105488>
8112573c:	4448b03a 	or	r4,r8,r17
81125740:	20003e26 	beq	r4,zero,8112583c <__adddf3+0x624>
81125744:	00c6303a 	nor	r3,zero,r3
81125748:	18003a1e 	bne	r3,zero,81125834 <__adddf3+0x61c>
8112574c:	3463c83a 	sub	r17,r6,r17
81125750:	4a07c83a 	sub	r3,r9,r8
81125754:	344d803a 	cmpltu	r6,r6,r17
81125758:	1991c83a 	sub	r8,r3,r6
8112575c:	1021883a 	mov	r16,r2
81125760:	3825883a 	mov	r18,r7
81125764:	003f0a06 	br	81125390 <__reset+0xfb105390>
81125768:	2023883a 	mov	r17,r4
8112576c:	003f0d06 	br	811253a4 <__reset+0xfb1053a4>
81125770:	0081ffc4 	movi	r2,2047
81125774:	80bf3f1e 	bne	r16,r2,81125474 <__reset+0xfb105474>
81125778:	003ec806 	br	8112529c <__reset+0xfb10529c>
8112577c:	0005883a 	mov	r2,zero
81125780:	003fb106 	br	81125648 <__reset+0xfb105648>
81125784:	0007883a 	mov	r3,zero
81125788:	003fbc06 	br	8112567c <__reset+0xfb10567c>
8112578c:	4444b03a 	or	r2,r8,r17
81125790:	8000871e 	bne	r16,zero,811259b0 <__adddf3+0x798>
81125794:	1000ba26 	beq	r2,zero,81125a80 <__adddf3+0x868>
81125798:	4984b03a 	or	r2,r9,r6
8112579c:	103ebf26 	beq	r2,zero,8112529c <__reset+0xfb10529c>
811257a0:	8985883a 	add	r2,r17,r6
811257a4:	4247883a 	add	r3,r8,r9
811257a8:	1451803a 	cmpltu	r8,r2,r17
811257ac:	40d1883a 	add	r8,r8,r3
811257b0:	40c0202c 	andhi	r3,r8,128
811257b4:	1023883a 	mov	r17,r2
811257b8:	183f1a26 	beq	r3,zero,81125424 <__reset+0xfb105424>
811257bc:	00bfe034 	movhi	r2,65408
811257c0:	10bfffc4 	addi	r2,r2,-1
811257c4:	2021883a 	mov	r16,r4
811257c8:	4090703a 	and	r8,r8,r2
811257cc:	003eb306 	br	8112529c <__reset+0xfb10529c>
811257d0:	4444b03a 	or	r2,r8,r17
811257d4:	8000291e 	bne	r16,zero,8112587c <__adddf3+0x664>
811257d8:	10004b1e 	bne	r2,zero,81125908 <__adddf3+0x6f0>
811257dc:	4990b03a 	or	r8,r9,r6
811257e0:	40008b26 	beq	r8,zero,81125a10 <__adddf3+0x7f8>
811257e4:	4811883a 	mov	r8,r9
811257e8:	3023883a 	mov	r17,r6
811257ec:	3825883a 	mov	r18,r7
811257f0:	003eaa06 	br	8112529c <__reset+0xfb10529c>
811257f4:	1021883a 	mov	r16,r2
811257f8:	0011883a 	mov	r8,zero
811257fc:	0005883a 	mov	r2,zero
81125800:	003f0f06 	br	81125440 <__reset+0xfb105440>
81125804:	217ff804 	addi	r5,r4,-32
81125808:	00800804 	movi	r2,32
8112580c:	494ad83a 	srl	r5,r9,r5
81125810:	20807d26 	beq	r4,r2,81125a08 <__adddf3+0x7f0>
81125814:	00801004 	movi	r2,64
81125818:	1109c83a 	sub	r4,r2,r4
8112581c:	4912983a 	sll	r9,r9,r4
81125820:	498cb03a 	or	r6,r9,r6
81125824:	300cc03a 	cmpne	r6,r6,zero
81125828:	298ab03a 	or	r5,r5,r6
8112582c:	0013883a 	mov	r9,zero
81125830:	003f1506 	br	81125488 <__reset+0xfb105488>
81125834:	0101ffc4 	movi	r4,2047
81125838:	113f9a1e 	bne	r2,r4,811256a4 <__reset+0xfb1056a4>
8112583c:	4811883a 	mov	r8,r9
81125840:	3023883a 	mov	r17,r6
81125844:	1021883a 	mov	r16,r2
81125848:	3825883a 	mov	r18,r7
8112584c:	003e9306 	br	8112529c <__reset+0xfb10529c>
81125850:	8000161e 	bne	r16,zero,811258ac <__adddf3+0x694>
81125854:	444ab03a 	or	r5,r8,r17
81125858:	28005126 	beq	r5,zero,811259a0 <__adddf3+0x788>
8112585c:	0108303a 	nor	r4,zero,r4
81125860:	20004d1e 	bne	r4,zero,81125998 <__adddf3+0x780>
81125864:	89a3883a 	add	r17,r17,r6
81125868:	4253883a 	add	r9,r8,r9
8112586c:	898d803a 	cmpltu	r6,r17,r6
81125870:	3251883a 	add	r8,r6,r9
81125874:	1021883a 	mov	r16,r2
81125878:	003f0806 	br	8112549c <__reset+0xfb10549c>
8112587c:	1000301e 	bne	r2,zero,81125940 <__adddf3+0x728>
81125880:	4984b03a 	or	r2,r9,r6
81125884:	10007126 	beq	r2,zero,81125a4c <__adddf3+0x834>
81125888:	4811883a 	mov	r8,r9
8112588c:	3023883a 	mov	r17,r6
81125890:	3825883a 	mov	r18,r7
81125894:	0401ffc4 	movi	r16,2047
81125898:	003e8006 	br	8112529c <__reset+0xfb10529c>
8112589c:	4462b03a 	or	r17,r8,r17
811258a0:	8822c03a 	cmpne	r17,r17,zero
811258a4:	0007883a 	mov	r3,zero
811258a8:	003f8b06 	br	811256d8 <__reset+0xfb1056d8>
811258ac:	0141ffc4 	movi	r5,2047
811258b0:	11403b26 	beq	r2,r5,811259a0 <__adddf3+0x788>
811258b4:	0109c83a 	sub	r4,zero,r4
811258b8:	42002034 	orhi	r8,r8,128
811258bc:	01400e04 	movi	r5,56
811258c0:	29006716 	blt	r5,r4,81125a60 <__adddf3+0x848>
811258c4:	014007c4 	movi	r5,31
811258c8:	29007016 	blt	r5,r4,81125a8c <__adddf3+0x874>
811258cc:	01400804 	movi	r5,32
811258d0:	290bc83a 	sub	r5,r5,r4
811258d4:	4154983a 	sll	r10,r8,r5
811258d8:	890ed83a 	srl	r7,r17,r4
811258dc:	894a983a 	sll	r5,r17,r5
811258e0:	4108d83a 	srl	r4,r8,r4
811258e4:	51e2b03a 	or	r17,r10,r7
811258e8:	280ac03a 	cmpne	r5,r5,zero
811258ec:	8962b03a 	or	r17,r17,r5
811258f0:	89a3883a 	add	r17,r17,r6
811258f4:	2253883a 	add	r9,r4,r9
811258f8:	898d803a 	cmpltu	r6,r17,r6
811258fc:	3251883a 	add	r8,r6,r9
81125900:	1021883a 	mov	r16,r2
81125904:	003ee506 	br	8112549c <__reset+0xfb10549c>
81125908:	4984b03a 	or	r2,r9,r6
8112590c:	103e6326 	beq	r2,zero,8112529c <__reset+0xfb10529c>
81125910:	8987c83a 	sub	r3,r17,r6
81125914:	88c9803a 	cmpltu	r4,r17,r3
81125918:	4245c83a 	sub	r2,r8,r9
8112591c:	1105c83a 	sub	r2,r2,r4
81125920:	1100202c 	andhi	r4,r2,128
81125924:	203ebb26 	beq	r4,zero,81125414 <__reset+0xfb105414>
81125928:	3463c83a 	sub	r17,r6,r17
8112592c:	4a07c83a 	sub	r3,r9,r8
81125930:	344d803a 	cmpltu	r6,r6,r17
81125934:	1991c83a 	sub	r8,r3,r6
81125938:	3825883a 	mov	r18,r7
8112593c:	003e5706 	br	8112529c <__reset+0xfb10529c>
81125940:	4984b03a 	or	r2,r9,r6
81125944:	10002e26 	beq	r2,zero,81125a00 <__adddf3+0x7e8>
81125948:	4004d0fa 	srli	r2,r8,3
8112594c:	8822d0fa 	srli	r17,r17,3
81125950:	4010977a 	slli	r8,r8,29
81125954:	10c0022c 	andhi	r3,r2,8
81125958:	4462b03a 	or	r17,r8,r17
8112595c:	18000826 	beq	r3,zero,81125980 <__adddf3+0x768>
81125960:	4808d0fa 	srli	r4,r9,3
81125964:	20c0022c 	andhi	r3,r4,8
81125968:	1800051e 	bne	r3,zero,81125980 <__adddf3+0x768>
8112596c:	300cd0fa 	srli	r6,r6,3
81125970:	4806977a 	slli	r3,r9,29
81125974:	2005883a 	mov	r2,r4
81125978:	3825883a 	mov	r18,r7
8112597c:	19a2b03a 	or	r17,r3,r6
81125980:	8810d77a 	srli	r8,r17,29
81125984:	100490fa 	slli	r2,r2,3
81125988:	882290fa 	slli	r17,r17,3
8112598c:	0401ffc4 	movi	r16,2047
81125990:	4090b03a 	or	r8,r8,r2
81125994:	003e4106 	br	8112529c <__reset+0xfb10529c>
81125998:	0141ffc4 	movi	r5,2047
8112599c:	117fc71e 	bne	r2,r5,811258bc <__reset+0xfb1058bc>
811259a0:	4811883a 	mov	r8,r9
811259a4:	3023883a 	mov	r17,r6
811259a8:	1021883a 	mov	r16,r2
811259ac:	003e3b06 	br	8112529c <__reset+0xfb10529c>
811259b0:	10002f26 	beq	r2,zero,81125a70 <__adddf3+0x858>
811259b4:	4984b03a 	or	r2,r9,r6
811259b8:	10001126 	beq	r2,zero,81125a00 <__adddf3+0x7e8>
811259bc:	4004d0fa 	srli	r2,r8,3
811259c0:	8822d0fa 	srli	r17,r17,3
811259c4:	4010977a 	slli	r8,r8,29
811259c8:	10c0022c 	andhi	r3,r2,8
811259cc:	4462b03a 	or	r17,r8,r17
811259d0:	183feb26 	beq	r3,zero,81125980 <__reset+0xfb105980>
811259d4:	4808d0fa 	srli	r4,r9,3
811259d8:	20c0022c 	andhi	r3,r4,8
811259dc:	183fe81e 	bne	r3,zero,81125980 <__reset+0xfb105980>
811259e0:	300cd0fa 	srli	r6,r6,3
811259e4:	4806977a 	slli	r3,r9,29
811259e8:	2005883a 	mov	r2,r4
811259ec:	19a2b03a 	or	r17,r3,r6
811259f0:	003fe306 	br	81125980 <__reset+0xfb105980>
811259f4:	0011883a 	mov	r8,zero
811259f8:	0005883a 	mov	r2,zero
811259fc:	003e3f06 	br	811252fc <__reset+0xfb1052fc>
81125a00:	0401ffc4 	movi	r16,2047
81125a04:	003e2506 	br	8112529c <__reset+0xfb10529c>
81125a08:	0013883a 	mov	r9,zero
81125a0c:	003f8406 	br	81125820 <__reset+0xfb105820>
81125a10:	0005883a 	mov	r2,zero
81125a14:	0007883a 	mov	r3,zero
81125a18:	003e8906 	br	81125440 <__reset+0xfb105440>
81125a1c:	197ff804 	addi	r5,r3,-32
81125a20:	01000804 	movi	r4,32
81125a24:	414ad83a 	srl	r5,r8,r5
81125a28:	19002426 	beq	r3,r4,81125abc <__adddf3+0x8a4>
81125a2c:	01001004 	movi	r4,64
81125a30:	20c7c83a 	sub	r3,r4,r3
81125a34:	40c6983a 	sll	r3,r8,r3
81125a38:	1c46b03a 	or	r3,r3,r17
81125a3c:	1806c03a 	cmpne	r3,r3,zero
81125a40:	28e2b03a 	or	r17,r5,r3
81125a44:	0007883a 	mov	r3,zero
81125a48:	003f2306 	br	811256d8 <__reset+0xfb1056d8>
81125a4c:	0007883a 	mov	r3,zero
81125a50:	5811883a 	mov	r8,r11
81125a54:	00bfffc4 	movi	r2,-1
81125a58:	0401ffc4 	movi	r16,2047
81125a5c:	003e7806 	br	81125440 <__reset+0xfb105440>
81125a60:	4462b03a 	or	r17,r8,r17
81125a64:	8822c03a 	cmpne	r17,r17,zero
81125a68:	0009883a 	mov	r4,zero
81125a6c:	003fa006 	br	811258f0 <__reset+0xfb1058f0>
81125a70:	4811883a 	mov	r8,r9
81125a74:	3023883a 	mov	r17,r6
81125a78:	0401ffc4 	movi	r16,2047
81125a7c:	003e0706 	br	8112529c <__reset+0xfb10529c>
81125a80:	4811883a 	mov	r8,r9
81125a84:	3023883a 	mov	r17,r6
81125a88:	003e0406 	br	8112529c <__reset+0xfb10529c>
81125a8c:	21fff804 	addi	r7,r4,-32
81125a90:	01400804 	movi	r5,32
81125a94:	41ced83a 	srl	r7,r8,r7
81125a98:	21400a26 	beq	r4,r5,81125ac4 <__adddf3+0x8ac>
81125a9c:	01401004 	movi	r5,64
81125aa0:	2909c83a 	sub	r4,r5,r4
81125aa4:	4108983a 	sll	r4,r8,r4
81125aa8:	2448b03a 	or	r4,r4,r17
81125aac:	2008c03a 	cmpne	r4,r4,zero
81125ab0:	3922b03a 	or	r17,r7,r4
81125ab4:	0009883a 	mov	r4,zero
81125ab8:	003f8d06 	br	811258f0 <__reset+0xfb1058f0>
81125abc:	0007883a 	mov	r3,zero
81125ac0:	003fdd06 	br	81125a38 <__reset+0xfb105a38>
81125ac4:	0009883a 	mov	r4,zero
81125ac8:	003ff706 	br	81125aa8 <__reset+0xfb105aa8>

81125acc <__divdf3>:
81125acc:	defff204 	addi	sp,sp,-56
81125ad0:	de00012e 	bgeu	sp,et,81125ad8 <__divdf3+0xc>
81125ad4:	003b68fa 	trap	3
81125ad8:	dd400915 	stw	r21,36(sp)
81125adc:	282ad53a 	srli	r21,r5,20
81125ae0:	dd000815 	stw	r20,32(sp)
81125ae4:	2828d7fa 	srli	r20,r5,31
81125ae8:	dc000415 	stw	r16,16(sp)
81125aec:	04000434 	movhi	r16,16
81125af0:	df000c15 	stw	fp,48(sp)
81125af4:	843fffc4 	addi	r16,r16,-1
81125af8:	dfc00d15 	stw	ra,52(sp)
81125afc:	ddc00b15 	stw	r23,44(sp)
81125b00:	dd800a15 	stw	r22,40(sp)
81125b04:	dcc00715 	stw	r19,28(sp)
81125b08:	dc800615 	stw	r18,24(sp)
81125b0c:	dc400515 	stw	r17,20(sp)
81125b10:	ad41ffcc 	andi	r21,r21,2047
81125b14:	2c20703a 	and	r16,r5,r16
81125b18:	a7003fcc 	andi	fp,r20,255
81125b1c:	a8006126 	beq	r21,zero,81125ca4 <__divdf3+0x1d8>
81125b20:	0081ffc4 	movi	r2,2047
81125b24:	2025883a 	mov	r18,r4
81125b28:	a8803726 	beq	r21,r2,81125c08 <__divdf3+0x13c>
81125b2c:	80800434 	orhi	r2,r16,16
81125b30:	100490fa 	slli	r2,r2,3
81125b34:	2020d77a 	srli	r16,r4,29
81125b38:	202490fa 	slli	r18,r4,3
81125b3c:	ad7f0044 	addi	r21,r21,-1023
81125b40:	80a0b03a 	or	r16,r16,r2
81125b44:	0027883a 	mov	r19,zero
81125b48:	0013883a 	mov	r9,zero
81125b4c:	3804d53a 	srli	r2,r7,20
81125b50:	382cd7fa 	srli	r22,r7,31
81125b54:	04400434 	movhi	r17,16
81125b58:	8c7fffc4 	addi	r17,r17,-1
81125b5c:	1081ffcc 	andi	r2,r2,2047
81125b60:	3011883a 	mov	r8,r6
81125b64:	3c62703a 	and	r17,r7,r17
81125b68:	b5c03fcc 	andi	r23,r22,255
81125b6c:	10006c26 	beq	r2,zero,81125d20 <__divdf3+0x254>
81125b70:	00c1ffc4 	movi	r3,2047
81125b74:	10c06426 	beq	r2,r3,81125d08 <__divdf3+0x23c>
81125b78:	88c00434 	orhi	r3,r17,16
81125b7c:	180690fa 	slli	r3,r3,3
81125b80:	3022d77a 	srli	r17,r6,29
81125b84:	301090fa 	slli	r8,r6,3
81125b88:	10bf0044 	addi	r2,r2,-1023
81125b8c:	88e2b03a 	or	r17,r17,r3
81125b90:	000f883a 	mov	r7,zero
81125b94:	a58cf03a 	xor	r6,r20,r22
81125b98:	3cc8b03a 	or	r4,r7,r19
81125b9c:	a8abc83a 	sub	r21,r21,r2
81125ba0:	008003c4 	movi	r2,15
81125ba4:	3007883a 	mov	r3,r6
81125ba8:	34c03fcc 	andi	r19,r6,255
81125bac:	11009036 	bltu	r2,r4,81125df0 <__divdf3+0x324>
81125bb0:	200890ba 	slli	r4,r4,2
81125bb4:	00a044b4 	movhi	r2,33042
81125bb8:	1096f204 	addi	r2,r2,23496
81125bbc:	2089883a 	add	r4,r4,r2
81125bc0:	20800017 	ldw	r2,0(r4)
81125bc4:	1000683a 	jmp	r2
81125bc8:	81125df0 	cmpltui	r4,r16,18807
81125bcc:	81125c40 	call	881125c4 <__reset+0x20f25c4>
81125bd0:	81125de0 	cmpeqi	r4,r16,18807
81125bd4:	81125c34 	orhi	r4,r16,18800
81125bd8:	81125de0 	cmpeqi	r4,r16,18807
81125bdc:	81125db4 	orhi	r4,r16,18806
81125be0:	81125de0 	cmpeqi	r4,r16,18807
81125be4:	81125c34 	orhi	r4,r16,18800
81125be8:	81125c40 	call	881125c4 <__reset+0x20f25c4>
81125bec:	81125c40 	call	881125c4 <__reset+0x20f25c4>
81125bf0:	81125db4 	orhi	r4,r16,18806
81125bf4:	81125c34 	orhi	r4,r16,18800
81125bf8:	81125c24 	muli	r4,r16,18800
81125bfc:	81125c24 	muli	r4,r16,18800
81125c00:	81125c24 	muli	r4,r16,18800
81125c04:	811260d4 	ori	r4,r16,18819
81125c08:	2404b03a 	or	r2,r4,r16
81125c0c:	1000661e 	bne	r2,zero,81125da8 <__divdf3+0x2dc>
81125c10:	04c00204 	movi	r19,8
81125c14:	0021883a 	mov	r16,zero
81125c18:	0025883a 	mov	r18,zero
81125c1c:	02400084 	movi	r9,2
81125c20:	003fca06 	br	81125b4c <__reset+0xfb105b4c>
81125c24:	8023883a 	mov	r17,r16
81125c28:	9011883a 	mov	r8,r18
81125c2c:	e02f883a 	mov	r23,fp
81125c30:	480f883a 	mov	r7,r9
81125c34:	00800084 	movi	r2,2
81125c38:	3881311e 	bne	r7,r2,81126100 <__divdf3+0x634>
81125c3c:	b827883a 	mov	r19,r23
81125c40:	98c0004c 	andi	r3,r19,1
81125c44:	0081ffc4 	movi	r2,2047
81125c48:	000b883a 	mov	r5,zero
81125c4c:	0025883a 	mov	r18,zero
81125c50:	1004953a 	slli	r2,r2,20
81125c54:	18c03fcc 	andi	r3,r3,255
81125c58:	04400434 	movhi	r17,16
81125c5c:	8c7fffc4 	addi	r17,r17,-1
81125c60:	180697fa 	slli	r3,r3,31
81125c64:	2c4a703a 	and	r5,r5,r17
81125c68:	288ab03a 	or	r5,r5,r2
81125c6c:	28c6b03a 	or	r3,r5,r3
81125c70:	9005883a 	mov	r2,r18
81125c74:	dfc00d17 	ldw	ra,52(sp)
81125c78:	df000c17 	ldw	fp,48(sp)
81125c7c:	ddc00b17 	ldw	r23,44(sp)
81125c80:	dd800a17 	ldw	r22,40(sp)
81125c84:	dd400917 	ldw	r21,36(sp)
81125c88:	dd000817 	ldw	r20,32(sp)
81125c8c:	dcc00717 	ldw	r19,28(sp)
81125c90:	dc800617 	ldw	r18,24(sp)
81125c94:	dc400517 	ldw	r17,20(sp)
81125c98:	dc000417 	ldw	r16,16(sp)
81125c9c:	dec00e04 	addi	sp,sp,56
81125ca0:	f800283a 	ret
81125ca4:	2404b03a 	or	r2,r4,r16
81125ca8:	2027883a 	mov	r19,r4
81125cac:	10003926 	beq	r2,zero,81125d94 <__divdf3+0x2c8>
81125cb0:	80012e26 	beq	r16,zero,8112616c <__divdf3+0x6a0>
81125cb4:	8009883a 	mov	r4,r16
81125cb8:	d9800315 	stw	r6,12(sp)
81125cbc:	d9c00215 	stw	r7,8(sp)
81125cc0:	11119740 	call	81111974 <__clzsi2>
81125cc4:	d9800317 	ldw	r6,12(sp)
81125cc8:	d9c00217 	ldw	r7,8(sp)
81125ccc:	113ffd44 	addi	r4,r2,-11
81125cd0:	00c00704 	movi	r3,28
81125cd4:	19012116 	blt	r3,r4,8112615c <__divdf3+0x690>
81125cd8:	00c00744 	movi	r3,29
81125cdc:	147ffe04 	addi	r17,r2,-8
81125ce0:	1907c83a 	sub	r3,r3,r4
81125ce4:	8460983a 	sll	r16,r16,r17
81125ce8:	98c6d83a 	srl	r3,r19,r3
81125cec:	9c64983a 	sll	r18,r19,r17
81125cf0:	1c20b03a 	or	r16,r3,r16
81125cf4:	1080fcc4 	addi	r2,r2,1011
81125cf8:	00abc83a 	sub	r21,zero,r2
81125cfc:	0027883a 	mov	r19,zero
81125d00:	0013883a 	mov	r9,zero
81125d04:	003f9106 	br	81125b4c <__reset+0xfb105b4c>
81125d08:	3446b03a 	or	r3,r6,r17
81125d0c:	18001f1e 	bne	r3,zero,81125d8c <__divdf3+0x2c0>
81125d10:	0023883a 	mov	r17,zero
81125d14:	0011883a 	mov	r8,zero
81125d18:	01c00084 	movi	r7,2
81125d1c:	003f9d06 	br	81125b94 <__reset+0xfb105b94>
81125d20:	3446b03a 	or	r3,r6,r17
81125d24:	18001526 	beq	r3,zero,81125d7c <__divdf3+0x2b0>
81125d28:	88011b26 	beq	r17,zero,81126198 <__divdf3+0x6cc>
81125d2c:	8809883a 	mov	r4,r17
81125d30:	d9800315 	stw	r6,12(sp)
81125d34:	da400115 	stw	r9,4(sp)
81125d38:	11119740 	call	81111974 <__clzsi2>
81125d3c:	d9800317 	ldw	r6,12(sp)
81125d40:	da400117 	ldw	r9,4(sp)
81125d44:	113ffd44 	addi	r4,r2,-11
81125d48:	00c00704 	movi	r3,28
81125d4c:	19010e16 	blt	r3,r4,81126188 <__divdf3+0x6bc>
81125d50:	00c00744 	movi	r3,29
81125d54:	123ffe04 	addi	r8,r2,-8
81125d58:	1907c83a 	sub	r3,r3,r4
81125d5c:	8a22983a 	sll	r17,r17,r8
81125d60:	30c6d83a 	srl	r3,r6,r3
81125d64:	3210983a 	sll	r8,r6,r8
81125d68:	1c62b03a 	or	r17,r3,r17
81125d6c:	1080fcc4 	addi	r2,r2,1011
81125d70:	0085c83a 	sub	r2,zero,r2
81125d74:	000f883a 	mov	r7,zero
81125d78:	003f8606 	br	81125b94 <__reset+0xfb105b94>
81125d7c:	0023883a 	mov	r17,zero
81125d80:	0011883a 	mov	r8,zero
81125d84:	01c00044 	movi	r7,1
81125d88:	003f8206 	br	81125b94 <__reset+0xfb105b94>
81125d8c:	01c000c4 	movi	r7,3
81125d90:	003f8006 	br	81125b94 <__reset+0xfb105b94>
81125d94:	04c00104 	movi	r19,4
81125d98:	0021883a 	mov	r16,zero
81125d9c:	0025883a 	mov	r18,zero
81125da0:	02400044 	movi	r9,1
81125da4:	003f6906 	br	81125b4c <__reset+0xfb105b4c>
81125da8:	04c00304 	movi	r19,12
81125dac:	024000c4 	movi	r9,3
81125db0:	003f6606 	br	81125b4c <__reset+0xfb105b4c>
81125db4:	01400434 	movhi	r5,16
81125db8:	0007883a 	mov	r3,zero
81125dbc:	297fffc4 	addi	r5,r5,-1
81125dc0:	04bfffc4 	movi	r18,-1
81125dc4:	0081ffc4 	movi	r2,2047
81125dc8:	003fa106 	br	81125c50 <__reset+0xfb105c50>
81125dcc:	00c00044 	movi	r3,1
81125dd0:	1887c83a 	sub	r3,r3,r2
81125dd4:	01000e04 	movi	r4,56
81125dd8:	20c1210e 	bge	r4,r3,81126260 <__divdf3+0x794>
81125ddc:	98c0004c 	andi	r3,r19,1
81125de0:	0005883a 	mov	r2,zero
81125de4:	000b883a 	mov	r5,zero
81125de8:	0025883a 	mov	r18,zero
81125dec:	003f9806 	br	81125c50 <__reset+0xfb105c50>
81125df0:	8c00fd36 	bltu	r17,r16,811261e8 <__divdf3+0x71c>
81125df4:	8440fb26 	beq	r16,r17,811261e4 <__divdf3+0x718>
81125df8:	8007883a 	mov	r3,r16
81125dfc:	ad7fffc4 	addi	r21,r21,-1
81125e00:	0021883a 	mov	r16,zero
81125e04:	4004d63a 	srli	r2,r8,24
81125e08:	8822923a 	slli	r17,r17,8
81125e0c:	1809883a 	mov	r4,r3
81125e10:	402c923a 	slli	r22,r8,8
81125e14:	88b8b03a 	or	fp,r17,r2
81125e18:	e028d43a 	srli	r20,fp,16
81125e1c:	d8c00015 	stw	r3,0(sp)
81125e20:	e5ffffcc 	andi	r23,fp,65535
81125e24:	a00b883a 	mov	r5,r20
81125e28:	1124f600 	call	81124f60 <__udivsi3>
81125e2c:	d8c00017 	ldw	r3,0(sp)
81125e30:	a00b883a 	mov	r5,r20
81125e34:	d8800315 	stw	r2,12(sp)
81125e38:	1809883a 	mov	r4,r3
81125e3c:	1124fc40 	call	81124fc4 <__umodsi3>
81125e40:	d9800317 	ldw	r6,12(sp)
81125e44:	1006943a 	slli	r3,r2,16
81125e48:	9004d43a 	srli	r2,r18,16
81125e4c:	b9a3383a 	mul	r17,r23,r6
81125e50:	10c4b03a 	or	r2,r2,r3
81125e54:	1440062e 	bgeu	r2,r17,81125e70 <__divdf3+0x3a4>
81125e58:	1705883a 	add	r2,r2,fp
81125e5c:	30ffffc4 	addi	r3,r6,-1
81125e60:	1700ee36 	bltu	r2,fp,8112621c <__divdf3+0x750>
81125e64:	1440ed2e 	bgeu	r2,r17,8112621c <__divdf3+0x750>
81125e68:	31bfff84 	addi	r6,r6,-2
81125e6c:	1705883a 	add	r2,r2,fp
81125e70:	1463c83a 	sub	r17,r2,r17
81125e74:	a00b883a 	mov	r5,r20
81125e78:	8809883a 	mov	r4,r17
81125e7c:	d9800315 	stw	r6,12(sp)
81125e80:	1124f600 	call	81124f60 <__udivsi3>
81125e84:	a00b883a 	mov	r5,r20
81125e88:	8809883a 	mov	r4,r17
81125e8c:	d8800215 	stw	r2,8(sp)
81125e90:	1124fc40 	call	81124fc4 <__umodsi3>
81125e94:	d9c00217 	ldw	r7,8(sp)
81125e98:	1004943a 	slli	r2,r2,16
81125e9c:	94bfffcc 	andi	r18,r18,65535
81125ea0:	b9d1383a 	mul	r8,r23,r7
81125ea4:	90a4b03a 	or	r18,r18,r2
81125ea8:	d9800317 	ldw	r6,12(sp)
81125eac:	9200062e 	bgeu	r18,r8,81125ec8 <__divdf3+0x3fc>
81125eb0:	9725883a 	add	r18,r18,fp
81125eb4:	38bfffc4 	addi	r2,r7,-1
81125eb8:	9700d636 	bltu	r18,fp,81126214 <__divdf3+0x748>
81125ebc:	9200d52e 	bgeu	r18,r8,81126214 <__divdf3+0x748>
81125ec0:	39ffff84 	addi	r7,r7,-2
81125ec4:	9725883a 	add	r18,r18,fp
81125ec8:	3004943a 	slli	r2,r6,16
81125ecc:	b012d43a 	srli	r9,r22,16
81125ed0:	b1bfffcc 	andi	r6,r22,65535
81125ed4:	11e2b03a 	or	r17,r2,r7
81125ed8:	8806d43a 	srli	r3,r17,16
81125edc:	893fffcc 	andi	r4,r17,65535
81125ee0:	218b383a 	mul	r5,r4,r6
81125ee4:	30c5383a 	mul	r2,r6,r3
81125ee8:	2249383a 	mul	r4,r4,r9
81125eec:	280ed43a 	srli	r7,r5,16
81125ef0:	9225c83a 	sub	r18,r18,r8
81125ef4:	2089883a 	add	r4,r4,r2
81125ef8:	3909883a 	add	r4,r7,r4
81125efc:	1a47383a 	mul	r3,r3,r9
81125f00:	2080022e 	bgeu	r4,r2,81125f0c <__divdf3+0x440>
81125f04:	00800074 	movhi	r2,1
81125f08:	1887883a 	add	r3,r3,r2
81125f0c:	2004d43a 	srli	r2,r4,16
81125f10:	2008943a 	slli	r4,r4,16
81125f14:	297fffcc 	andi	r5,r5,65535
81125f18:	10c7883a 	add	r3,r2,r3
81125f1c:	2149883a 	add	r4,r4,r5
81125f20:	90c0a536 	bltu	r18,r3,811261b8 <__divdf3+0x6ec>
81125f24:	90c0bf26 	beq	r18,r3,81126224 <__divdf3+0x758>
81125f28:	90c7c83a 	sub	r3,r18,r3
81125f2c:	810fc83a 	sub	r7,r16,r4
81125f30:	81e5803a 	cmpltu	r18,r16,r7
81125f34:	1ca5c83a 	sub	r18,r3,r18
81125f38:	e480c126 	beq	fp,r18,81126240 <__divdf3+0x774>
81125f3c:	a00b883a 	mov	r5,r20
81125f40:	9009883a 	mov	r4,r18
81125f44:	d9800315 	stw	r6,12(sp)
81125f48:	d9c00215 	stw	r7,8(sp)
81125f4c:	da400115 	stw	r9,4(sp)
81125f50:	1124f600 	call	81124f60 <__udivsi3>
81125f54:	a00b883a 	mov	r5,r20
81125f58:	9009883a 	mov	r4,r18
81125f5c:	d8800015 	stw	r2,0(sp)
81125f60:	1124fc40 	call	81124fc4 <__umodsi3>
81125f64:	d9c00217 	ldw	r7,8(sp)
81125f68:	da000017 	ldw	r8,0(sp)
81125f6c:	1006943a 	slli	r3,r2,16
81125f70:	3804d43a 	srli	r2,r7,16
81125f74:	ba21383a 	mul	r16,r23,r8
81125f78:	d9800317 	ldw	r6,12(sp)
81125f7c:	10c4b03a 	or	r2,r2,r3
81125f80:	da400117 	ldw	r9,4(sp)
81125f84:	1400062e 	bgeu	r2,r16,81125fa0 <__divdf3+0x4d4>
81125f88:	1705883a 	add	r2,r2,fp
81125f8c:	40ffffc4 	addi	r3,r8,-1
81125f90:	1700ad36 	bltu	r2,fp,81126248 <__divdf3+0x77c>
81125f94:	1400ac2e 	bgeu	r2,r16,81126248 <__divdf3+0x77c>
81125f98:	423fff84 	addi	r8,r8,-2
81125f9c:	1705883a 	add	r2,r2,fp
81125fa0:	1421c83a 	sub	r16,r2,r16
81125fa4:	a00b883a 	mov	r5,r20
81125fa8:	8009883a 	mov	r4,r16
81125fac:	d9800315 	stw	r6,12(sp)
81125fb0:	d9c00215 	stw	r7,8(sp)
81125fb4:	da000015 	stw	r8,0(sp)
81125fb8:	da400115 	stw	r9,4(sp)
81125fbc:	1124f600 	call	81124f60 <__udivsi3>
81125fc0:	8009883a 	mov	r4,r16
81125fc4:	a00b883a 	mov	r5,r20
81125fc8:	1025883a 	mov	r18,r2
81125fcc:	1124fc40 	call	81124fc4 <__umodsi3>
81125fd0:	d9c00217 	ldw	r7,8(sp)
81125fd4:	1004943a 	slli	r2,r2,16
81125fd8:	bcaf383a 	mul	r23,r23,r18
81125fdc:	393fffcc 	andi	r4,r7,65535
81125fe0:	2088b03a 	or	r4,r4,r2
81125fe4:	d9800317 	ldw	r6,12(sp)
81125fe8:	da000017 	ldw	r8,0(sp)
81125fec:	da400117 	ldw	r9,4(sp)
81125ff0:	25c0062e 	bgeu	r4,r23,8112600c <__divdf3+0x540>
81125ff4:	2709883a 	add	r4,r4,fp
81125ff8:	90bfffc4 	addi	r2,r18,-1
81125ffc:	27009436 	bltu	r4,fp,81126250 <__divdf3+0x784>
81126000:	25c0932e 	bgeu	r4,r23,81126250 <__divdf3+0x784>
81126004:	94bfff84 	addi	r18,r18,-2
81126008:	2709883a 	add	r4,r4,fp
8112600c:	4004943a 	slli	r2,r8,16
81126010:	25efc83a 	sub	r23,r4,r23
81126014:	1490b03a 	or	r8,r2,r18
81126018:	4008d43a 	srli	r4,r8,16
8112601c:	40ffffcc 	andi	r3,r8,65535
81126020:	30c5383a 	mul	r2,r6,r3
81126024:	1a47383a 	mul	r3,r3,r9
81126028:	310d383a 	mul	r6,r6,r4
8112602c:	100ad43a 	srli	r5,r2,16
81126030:	4913383a 	mul	r9,r9,r4
81126034:	1987883a 	add	r3,r3,r6
81126038:	28c7883a 	add	r3,r5,r3
8112603c:	1980022e 	bgeu	r3,r6,81126048 <__divdf3+0x57c>
81126040:	01000074 	movhi	r4,1
81126044:	4913883a 	add	r9,r9,r4
81126048:	1808d43a 	srli	r4,r3,16
8112604c:	1806943a 	slli	r3,r3,16
81126050:	10bfffcc 	andi	r2,r2,65535
81126054:	2253883a 	add	r9,r4,r9
81126058:	1887883a 	add	r3,r3,r2
8112605c:	ba403836 	bltu	r23,r9,81126140 <__divdf3+0x674>
81126060:	ba403626 	beq	r23,r9,8112613c <__divdf3+0x670>
81126064:	42000054 	ori	r8,r8,1
81126068:	a880ffc4 	addi	r2,r21,1023
8112606c:	00bf570e 	bge	zero,r2,81125dcc <__reset+0xfb105dcc>
81126070:	40c001cc 	andi	r3,r8,7
81126074:	18000726 	beq	r3,zero,81126094 <__divdf3+0x5c8>
81126078:	40c003cc 	andi	r3,r8,15
8112607c:	01000104 	movi	r4,4
81126080:	19000426 	beq	r3,r4,81126094 <__divdf3+0x5c8>
81126084:	4107883a 	add	r3,r8,r4
81126088:	1a11803a 	cmpltu	r8,r3,r8
8112608c:	8a23883a 	add	r17,r17,r8
81126090:	1811883a 	mov	r8,r3
81126094:	88c0402c 	andhi	r3,r17,256
81126098:	18000426 	beq	r3,zero,811260ac <__divdf3+0x5e0>
8112609c:	00ffc034 	movhi	r3,65280
811260a0:	18ffffc4 	addi	r3,r3,-1
811260a4:	a8810004 	addi	r2,r21,1024
811260a8:	88e2703a 	and	r17,r17,r3
811260ac:	00c1ff84 	movi	r3,2046
811260b0:	18bee316 	blt	r3,r2,81125c40 <__reset+0xfb105c40>
811260b4:	8824977a 	slli	r18,r17,29
811260b8:	4010d0fa 	srli	r8,r8,3
811260bc:	8822927a 	slli	r17,r17,9
811260c0:	1081ffcc 	andi	r2,r2,2047
811260c4:	9224b03a 	or	r18,r18,r8
811260c8:	880ad33a 	srli	r5,r17,12
811260cc:	98c0004c 	andi	r3,r19,1
811260d0:	003edf06 	br	81125c50 <__reset+0xfb105c50>
811260d4:	8080022c 	andhi	r2,r16,8
811260d8:	10001226 	beq	r2,zero,81126124 <__divdf3+0x658>
811260dc:	8880022c 	andhi	r2,r17,8
811260e0:	1000101e 	bne	r2,zero,81126124 <__divdf3+0x658>
811260e4:	00800434 	movhi	r2,16
811260e8:	89400234 	orhi	r5,r17,8
811260ec:	10bfffc4 	addi	r2,r2,-1
811260f0:	b007883a 	mov	r3,r22
811260f4:	288a703a 	and	r5,r5,r2
811260f8:	4025883a 	mov	r18,r8
811260fc:	003f3106 	br	81125dc4 <__reset+0xfb105dc4>
81126100:	008000c4 	movi	r2,3
81126104:	3880a626 	beq	r7,r2,811263a0 <__divdf3+0x8d4>
81126108:	00800044 	movi	r2,1
8112610c:	3880521e 	bne	r7,r2,81126258 <__divdf3+0x78c>
81126110:	b807883a 	mov	r3,r23
81126114:	0005883a 	mov	r2,zero
81126118:	000b883a 	mov	r5,zero
8112611c:	0025883a 	mov	r18,zero
81126120:	003ecb06 	br	81125c50 <__reset+0xfb105c50>
81126124:	00800434 	movhi	r2,16
81126128:	81400234 	orhi	r5,r16,8
8112612c:	10bfffc4 	addi	r2,r2,-1
81126130:	a007883a 	mov	r3,r20
81126134:	288a703a 	and	r5,r5,r2
81126138:	003f2206 	br	81125dc4 <__reset+0xfb105dc4>
8112613c:	183fca26 	beq	r3,zero,81126068 <__reset+0xfb106068>
81126140:	e5ef883a 	add	r23,fp,r23
81126144:	40bfffc4 	addi	r2,r8,-1
81126148:	bf00392e 	bgeu	r23,fp,81126230 <__divdf3+0x764>
8112614c:	1011883a 	mov	r8,r2
81126150:	ba7fc41e 	bne	r23,r9,81126064 <__reset+0xfb106064>
81126154:	b0ffc31e 	bne	r22,r3,81126064 <__reset+0xfb106064>
81126158:	003fc306 	br	81126068 <__reset+0xfb106068>
8112615c:	143ff604 	addi	r16,r2,-40
81126160:	9c20983a 	sll	r16,r19,r16
81126164:	0025883a 	mov	r18,zero
81126168:	003ee206 	br	81125cf4 <__reset+0xfb105cf4>
8112616c:	d9800315 	stw	r6,12(sp)
81126170:	d9c00215 	stw	r7,8(sp)
81126174:	11119740 	call	81111974 <__clzsi2>
81126178:	10800804 	addi	r2,r2,32
8112617c:	d9c00217 	ldw	r7,8(sp)
81126180:	d9800317 	ldw	r6,12(sp)
81126184:	003ed106 	br	81125ccc <__reset+0xfb105ccc>
81126188:	147ff604 	addi	r17,r2,-40
8112618c:	3462983a 	sll	r17,r6,r17
81126190:	0011883a 	mov	r8,zero
81126194:	003ef506 	br	81125d6c <__reset+0xfb105d6c>
81126198:	3009883a 	mov	r4,r6
8112619c:	d9800315 	stw	r6,12(sp)
811261a0:	da400115 	stw	r9,4(sp)
811261a4:	11119740 	call	81111974 <__clzsi2>
811261a8:	10800804 	addi	r2,r2,32
811261ac:	da400117 	ldw	r9,4(sp)
811261b0:	d9800317 	ldw	r6,12(sp)
811261b4:	003ee306 	br	81125d44 <__reset+0xfb105d44>
811261b8:	85a1883a 	add	r16,r16,r22
811261bc:	8585803a 	cmpltu	r2,r16,r22
811261c0:	1705883a 	add	r2,r2,fp
811261c4:	14a5883a 	add	r18,r2,r18
811261c8:	88bfffc4 	addi	r2,r17,-1
811261cc:	e4800c2e 	bgeu	fp,r18,81126200 <__divdf3+0x734>
811261d0:	90c03e36 	bltu	r18,r3,811262cc <__divdf3+0x800>
811261d4:	1c806926 	beq	r3,r18,8112637c <__divdf3+0x8b0>
811261d8:	90c7c83a 	sub	r3,r18,r3
811261dc:	1023883a 	mov	r17,r2
811261e0:	003f5206 	br	81125f2c <__reset+0xfb105f2c>
811261e4:	923f0436 	bltu	r18,r8,81125df8 <__reset+0xfb105df8>
811261e8:	800897fa 	slli	r4,r16,31
811261ec:	9004d07a 	srli	r2,r18,1
811261f0:	8006d07a 	srli	r3,r16,1
811261f4:	902097fa 	slli	r16,r18,31
811261f8:	20a4b03a 	or	r18,r4,r2
811261fc:	003f0106 	br	81125e04 <__reset+0xfb105e04>
81126200:	e4bff51e 	bne	fp,r18,811261d8 <__reset+0xfb1061d8>
81126204:	85bff22e 	bgeu	r16,r22,811261d0 <__reset+0xfb1061d0>
81126208:	e0c7c83a 	sub	r3,fp,r3
8112620c:	1023883a 	mov	r17,r2
81126210:	003f4606 	br	81125f2c <__reset+0xfb105f2c>
81126214:	100f883a 	mov	r7,r2
81126218:	003f2b06 	br	81125ec8 <__reset+0xfb105ec8>
8112621c:	180d883a 	mov	r6,r3
81126220:	003f1306 	br	81125e70 <__reset+0xfb105e70>
81126224:	813fe436 	bltu	r16,r4,811261b8 <__reset+0xfb1061b8>
81126228:	0007883a 	mov	r3,zero
8112622c:	003f3f06 	br	81125f2c <__reset+0xfb105f2c>
81126230:	ba402c36 	bltu	r23,r9,811262e4 <__divdf3+0x818>
81126234:	4dc05426 	beq	r9,r23,81126388 <__divdf3+0x8bc>
81126238:	1011883a 	mov	r8,r2
8112623c:	003f8906 	br	81126064 <__reset+0xfb106064>
81126240:	023fffc4 	movi	r8,-1
81126244:	003f8806 	br	81126068 <__reset+0xfb106068>
81126248:	1811883a 	mov	r8,r3
8112624c:	003f5406 	br	81125fa0 <__reset+0xfb105fa0>
81126250:	1025883a 	mov	r18,r2
81126254:	003f6d06 	br	8112600c <__reset+0xfb10600c>
81126258:	b827883a 	mov	r19,r23
8112625c:	003f8206 	br	81126068 <__reset+0xfb106068>
81126260:	010007c4 	movi	r4,31
81126264:	20c02616 	blt	r4,r3,81126300 <__divdf3+0x834>
81126268:	00800804 	movi	r2,32
8112626c:	10c5c83a 	sub	r2,r2,r3
81126270:	888a983a 	sll	r5,r17,r2
81126274:	40c8d83a 	srl	r4,r8,r3
81126278:	4084983a 	sll	r2,r8,r2
8112627c:	88e2d83a 	srl	r17,r17,r3
81126280:	2906b03a 	or	r3,r5,r4
81126284:	1004c03a 	cmpne	r2,r2,zero
81126288:	1886b03a 	or	r3,r3,r2
8112628c:	188001cc 	andi	r2,r3,7
81126290:	10000726 	beq	r2,zero,811262b0 <__divdf3+0x7e4>
81126294:	188003cc 	andi	r2,r3,15
81126298:	01000104 	movi	r4,4
8112629c:	11000426 	beq	r2,r4,811262b0 <__divdf3+0x7e4>
811262a0:	1805883a 	mov	r2,r3
811262a4:	10c00104 	addi	r3,r2,4
811262a8:	1885803a 	cmpltu	r2,r3,r2
811262ac:	88a3883a 	add	r17,r17,r2
811262b0:	8880202c 	andhi	r2,r17,128
811262b4:	10002726 	beq	r2,zero,81126354 <__divdf3+0x888>
811262b8:	98c0004c 	andi	r3,r19,1
811262bc:	00800044 	movi	r2,1
811262c0:	000b883a 	mov	r5,zero
811262c4:	0025883a 	mov	r18,zero
811262c8:	003e6106 	br	81125c50 <__reset+0xfb105c50>
811262cc:	85a1883a 	add	r16,r16,r22
811262d0:	8585803a 	cmpltu	r2,r16,r22
811262d4:	1705883a 	add	r2,r2,fp
811262d8:	14a5883a 	add	r18,r2,r18
811262dc:	8c7fff84 	addi	r17,r17,-2
811262e0:	003f1106 	br	81125f28 <__reset+0xfb105f28>
811262e4:	b589883a 	add	r4,r22,r22
811262e8:	25ad803a 	cmpltu	r22,r4,r22
811262ec:	b739883a 	add	fp,r22,fp
811262f0:	40bfff84 	addi	r2,r8,-2
811262f4:	bf2f883a 	add	r23,r23,fp
811262f8:	202d883a 	mov	r22,r4
811262fc:	003f9306 	br	8112614c <__reset+0xfb10614c>
81126300:	013ff844 	movi	r4,-31
81126304:	2085c83a 	sub	r2,r4,r2
81126308:	8888d83a 	srl	r4,r17,r2
8112630c:	00800804 	movi	r2,32
81126310:	18802126 	beq	r3,r2,81126398 <__divdf3+0x8cc>
81126314:	00801004 	movi	r2,64
81126318:	10c5c83a 	sub	r2,r2,r3
8112631c:	8884983a 	sll	r2,r17,r2
81126320:	1204b03a 	or	r2,r2,r8
81126324:	1004c03a 	cmpne	r2,r2,zero
81126328:	2084b03a 	or	r2,r4,r2
8112632c:	144001cc 	andi	r17,r2,7
81126330:	88000d1e 	bne	r17,zero,81126368 <__divdf3+0x89c>
81126334:	000b883a 	mov	r5,zero
81126338:	1024d0fa 	srli	r18,r2,3
8112633c:	98c0004c 	andi	r3,r19,1
81126340:	0005883a 	mov	r2,zero
81126344:	9464b03a 	or	r18,r18,r17
81126348:	003e4106 	br	81125c50 <__reset+0xfb105c50>
8112634c:	1007883a 	mov	r3,r2
81126350:	0023883a 	mov	r17,zero
81126354:	880a927a 	slli	r5,r17,9
81126358:	1805883a 	mov	r2,r3
8112635c:	8822977a 	slli	r17,r17,29
81126360:	280ad33a 	srli	r5,r5,12
81126364:	003ff406 	br	81126338 <__reset+0xfb106338>
81126368:	10c003cc 	andi	r3,r2,15
8112636c:	01000104 	movi	r4,4
81126370:	193ff626 	beq	r3,r4,8112634c <__reset+0xfb10634c>
81126374:	0023883a 	mov	r17,zero
81126378:	003fca06 	br	811262a4 <__reset+0xfb1062a4>
8112637c:	813fd336 	bltu	r16,r4,811262cc <__reset+0xfb1062cc>
81126380:	1023883a 	mov	r17,r2
81126384:	003fa806 	br	81126228 <__reset+0xfb106228>
81126388:	b0ffd636 	bltu	r22,r3,811262e4 <__reset+0xfb1062e4>
8112638c:	1011883a 	mov	r8,r2
81126390:	b0ff341e 	bne	r22,r3,81126064 <__reset+0xfb106064>
81126394:	003f3406 	br	81126068 <__reset+0xfb106068>
81126398:	0005883a 	mov	r2,zero
8112639c:	003fe006 	br	81126320 <__reset+0xfb106320>
811263a0:	00800434 	movhi	r2,16
811263a4:	89400234 	orhi	r5,r17,8
811263a8:	10bfffc4 	addi	r2,r2,-1
811263ac:	b807883a 	mov	r3,r23
811263b0:	288a703a 	and	r5,r5,r2
811263b4:	4025883a 	mov	r18,r8
811263b8:	003e8206 	br	81125dc4 <__reset+0xfb105dc4>

811263bc <__eqdf2>:
811263bc:	2804d53a 	srli	r2,r5,20
811263c0:	3806d53a 	srli	r3,r7,20
811263c4:	02000434 	movhi	r8,16
811263c8:	423fffc4 	addi	r8,r8,-1
811263cc:	1081ffcc 	andi	r2,r2,2047
811263d0:	0281ffc4 	movi	r10,2047
811263d4:	2a12703a 	and	r9,r5,r8
811263d8:	18c1ffcc 	andi	r3,r3,2047
811263dc:	3a10703a 	and	r8,r7,r8
811263e0:	280ad7fa 	srli	r5,r5,31
811263e4:	380ed7fa 	srli	r7,r7,31
811263e8:	12801026 	beq	r2,r10,8112642c <__eqdf2+0x70>
811263ec:	0281ffc4 	movi	r10,2047
811263f0:	1a800a26 	beq	r3,r10,8112641c <__eqdf2+0x60>
811263f4:	10c00226 	beq	r2,r3,81126400 <__eqdf2+0x44>
811263f8:	00800044 	movi	r2,1
811263fc:	f800283a 	ret
81126400:	4a3ffd1e 	bne	r9,r8,811263f8 <__reset+0xfb1063f8>
81126404:	21bffc1e 	bne	r4,r6,811263f8 <__reset+0xfb1063f8>
81126408:	29c00c26 	beq	r5,r7,8112643c <__eqdf2+0x80>
8112640c:	103ffa1e 	bne	r2,zero,811263f8 <__reset+0xfb1063f8>
81126410:	2244b03a 	or	r2,r4,r9
81126414:	1004c03a 	cmpne	r2,r2,zero
81126418:	f800283a 	ret
8112641c:	3214b03a 	or	r10,r6,r8
81126420:	503ff426 	beq	r10,zero,811263f4 <__reset+0xfb1063f4>
81126424:	00800044 	movi	r2,1
81126428:	f800283a 	ret
8112642c:	2254b03a 	or	r10,r4,r9
81126430:	503fee26 	beq	r10,zero,811263ec <__reset+0xfb1063ec>
81126434:	00800044 	movi	r2,1
81126438:	f800283a 	ret
8112643c:	0005883a 	mov	r2,zero
81126440:	f800283a 	ret

81126444 <__gedf2>:
81126444:	2804d53a 	srli	r2,r5,20
81126448:	3806d53a 	srli	r3,r7,20
8112644c:	02000434 	movhi	r8,16
81126450:	423fffc4 	addi	r8,r8,-1
81126454:	1081ffcc 	andi	r2,r2,2047
81126458:	0241ffc4 	movi	r9,2047
8112645c:	2a14703a 	and	r10,r5,r8
81126460:	18c1ffcc 	andi	r3,r3,2047
81126464:	3a10703a 	and	r8,r7,r8
81126468:	280ad7fa 	srli	r5,r5,31
8112646c:	380ed7fa 	srli	r7,r7,31
81126470:	12401d26 	beq	r2,r9,811264e8 <__gedf2+0xa4>
81126474:	0241ffc4 	movi	r9,2047
81126478:	1a401226 	beq	r3,r9,811264c4 <__gedf2+0x80>
8112647c:	1000081e 	bne	r2,zero,811264a0 <__gedf2+0x5c>
81126480:	2296b03a 	or	r11,r4,r10
81126484:	5813003a 	cmpeq	r9,r11,zero
81126488:	1800091e 	bne	r3,zero,811264b0 <__gedf2+0x6c>
8112648c:	3218b03a 	or	r12,r6,r8
81126490:	6000071e 	bne	r12,zero,811264b0 <__gedf2+0x6c>
81126494:	0005883a 	mov	r2,zero
81126498:	5800101e 	bne	r11,zero,811264dc <__gedf2+0x98>
8112649c:	f800283a 	ret
811264a0:	18000c1e 	bne	r3,zero,811264d4 <__gedf2+0x90>
811264a4:	3212b03a 	or	r9,r6,r8
811264a8:	48000c26 	beq	r9,zero,811264dc <__gedf2+0x98>
811264ac:	0013883a 	mov	r9,zero
811264b0:	39c03fcc 	andi	r7,r7,255
811264b4:	48000826 	beq	r9,zero,811264d8 <__gedf2+0x94>
811264b8:	38000926 	beq	r7,zero,811264e0 <__gedf2+0x9c>
811264bc:	00800044 	movi	r2,1
811264c0:	f800283a 	ret
811264c4:	3212b03a 	or	r9,r6,r8
811264c8:	483fec26 	beq	r9,zero,8112647c <__reset+0xfb10647c>
811264cc:	00bfff84 	movi	r2,-2
811264d0:	f800283a 	ret
811264d4:	39c03fcc 	andi	r7,r7,255
811264d8:	29c00626 	beq	r5,r7,811264f4 <__gedf2+0xb0>
811264dc:	283ff726 	beq	r5,zero,811264bc <__reset+0xfb1064bc>
811264e0:	00bfffc4 	movi	r2,-1
811264e4:	f800283a 	ret
811264e8:	2292b03a 	or	r9,r4,r10
811264ec:	483fe126 	beq	r9,zero,81126474 <__reset+0xfb106474>
811264f0:	003ff606 	br	811264cc <__reset+0xfb1064cc>
811264f4:	18bff916 	blt	r3,r2,811264dc <__reset+0xfb1064dc>
811264f8:	10c00316 	blt	r2,r3,81126508 <__gedf2+0xc4>
811264fc:	42bff736 	bltu	r8,r10,811264dc <__reset+0xfb1064dc>
81126500:	52000326 	beq	r10,r8,81126510 <__gedf2+0xcc>
81126504:	5200042e 	bgeu	r10,r8,81126518 <__gedf2+0xd4>
81126508:	283fec1e 	bne	r5,zero,811264bc <__reset+0xfb1064bc>
8112650c:	003ff406 	br	811264e0 <__reset+0xfb1064e0>
81126510:	313ff236 	bltu	r6,r4,811264dc <__reset+0xfb1064dc>
81126514:	21bffc36 	bltu	r4,r6,81126508 <__reset+0xfb106508>
81126518:	0005883a 	mov	r2,zero
8112651c:	f800283a 	ret

81126520 <__ledf2>:
81126520:	2804d53a 	srli	r2,r5,20
81126524:	3810d53a 	srli	r8,r7,20
81126528:	00c00434 	movhi	r3,16
8112652c:	18ffffc4 	addi	r3,r3,-1
81126530:	1081ffcc 	andi	r2,r2,2047
81126534:	0241ffc4 	movi	r9,2047
81126538:	28d4703a 	and	r10,r5,r3
8112653c:	4201ffcc 	andi	r8,r8,2047
81126540:	38c6703a 	and	r3,r7,r3
81126544:	280ad7fa 	srli	r5,r5,31
81126548:	380ed7fa 	srli	r7,r7,31
8112654c:	12401f26 	beq	r2,r9,811265cc <__ledf2+0xac>
81126550:	0241ffc4 	movi	r9,2047
81126554:	42401426 	beq	r8,r9,811265a8 <__ledf2+0x88>
81126558:	1000091e 	bne	r2,zero,81126580 <__ledf2+0x60>
8112655c:	2296b03a 	or	r11,r4,r10
81126560:	5813003a 	cmpeq	r9,r11,zero
81126564:	29403fcc 	andi	r5,r5,255
81126568:	40000a1e 	bne	r8,zero,81126594 <__ledf2+0x74>
8112656c:	30d8b03a 	or	r12,r6,r3
81126570:	6000081e 	bne	r12,zero,81126594 <__ledf2+0x74>
81126574:	0005883a 	mov	r2,zero
81126578:	5800111e 	bne	r11,zero,811265c0 <__ledf2+0xa0>
8112657c:	f800283a 	ret
81126580:	29403fcc 	andi	r5,r5,255
81126584:	40000c1e 	bne	r8,zero,811265b8 <__ledf2+0x98>
81126588:	30d2b03a 	or	r9,r6,r3
8112658c:	48000c26 	beq	r9,zero,811265c0 <__ledf2+0xa0>
81126590:	0013883a 	mov	r9,zero
81126594:	39c03fcc 	andi	r7,r7,255
81126598:	48000826 	beq	r9,zero,811265bc <__ledf2+0x9c>
8112659c:	38001126 	beq	r7,zero,811265e4 <__ledf2+0xc4>
811265a0:	00800044 	movi	r2,1
811265a4:	f800283a 	ret
811265a8:	30d2b03a 	or	r9,r6,r3
811265ac:	483fea26 	beq	r9,zero,81126558 <__reset+0xfb106558>
811265b0:	00800084 	movi	r2,2
811265b4:	f800283a 	ret
811265b8:	39c03fcc 	andi	r7,r7,255
811265bc:	39400726 	beq	r7,r5,811265dc <__ledf2+0xbc>
811265c0:	2800081e 	bne	r5,zero,811265e4 <__ledf2+0xc4>
811265c4:	00800044 	movi	r2,1
811265c8:	f800283a 	ret
811265cc:	2292b03a 	or	r9,r4,r10
811265d0:	483fdf26 	beq	r9,zero,81126550 <__reset+0xfb106550>
811265d4:	00800084 	movi	r2,2
811265d8:	f800283a 	ret
811265dc:	4080030e 	bge	r8,r2,811265ec <__ledf2+0xcc>
811265e0:	383fef26 	beq	r7,zero,811265a0 <__reset+0xfb1065a0>
811265e4:	00bfffc4 	movi	r2,-1
811265e8:	f800283a 	ret
811265ec:	123feb16 	blt	r2,r8,8112659c <__reset+0xfb10659c>
811265f0:	1abff336 	bltu	r3,r10,811265c0 <__reset+0xfb1065c0>
811265f4:	50c00326 	beq	r10,r3,81126604 <__ledf2+0xe4>
811265f8:	50c0042e 	bgeu	r10,r3,8112660c <__ledf2+0xec>
811265fc:	283fe81e 	bne	r5,zero,811265a0 <__reset+0xfb1065a0>
81126600:	003ff806 	br	811265e4 <__reset+0xfb1065e4>
81126604:	313fee36 	bltu	r6,r4,811265c0 <__reset+0xfb1065c0>
81126608:	21bffc36 	bltu	r4,r6,811265fc <__reset+0xfb1065fc>
8112660c:	0005883a 	mov	r2,zero
81126610:	f800283a 	ret

81126614 <__subdf3>:
81126614:	02000434 	movhi	r8,16
81126618:	423fffc4 	addi	r8,r8,-1
8112661c:	defffb04 	addi	sp,sp,-20
81126620:	2a14703a 	and	r10,r5,r8
81126624:	3812d53a 	srli	r9,r7,20
81126628:	3a10703a 	and	r8,r7,r8
8112662c:	de00012e 	bgeu	sp,et,81126634 <__subdf3+0x20>
81126630:	003b68fa 	trap	3
81126634:	2006d77a 	srli	r3,r4,29
81126638:	3004d77a 	srli	r2,r6,29
8112663c:	dc000015 	stw	r16,0(sp)
81126640:	501490fa 	slli	r10,r10,3
81126644:	2820d53a 	srli	r16,r5,20
81126648:	401090fa 	slli	r8,r8,3
8112664c:	dc800215 	stw	r18,8(sp)
81126650:	dc400115 	stw	r17,4(sp)
81126654:	dfc00415 	stw	ra,16(sp)
81126658:	202290fa 	slli	r17,r4,3
8112665c:	dcc00315 	stw	r19,12(sp)
81126660:	4a41ffcc 	andi	r9,r9,2047
81126664:	0101ffc4 	movi	r4,2047
81126668:	2824d7fa 	srli	r18,r5,31
8112666c:	8401ffcc 	andi	r16,r16,2047
81126670:	50c6b03a 	or	r3,r10,r3
81126674:	380ed7fa 	srli	r7,r7,31
81126678:	408ab03a 	or	r5,r8,r2
8112667c:	300c90fa 	slli	r6,r6,3
81126680:	49009626 	beq	r9,r4,811268dc <__subdf3+0x2c8>
81126684:	39c0005c 	xori	r7,r7,1
81126688:	8245c83a 	sub	r2,r16,r9
8112668c:	3c807426 	beq	r7,r18,81126860 <__subdf3+0x24c>
81126690:	0080af0e 	bge	zero,r2,81126950 <__subdf3+0x33c>
81126694:	48002a1e 	bne	r9,zero,81126740 <__subdf3+0x12c>
81126698:	2988b03a 	or	r4,r5,r6
8112669c:	20009a1e 	bne	r4,zero,81126908 <__subdf3+0x2f4>
811266a0:	888001cc 	andi	r2,r17,7
811266a4:	10000726 	beq	r2,zero,811266c4 <__subdf3+0xb0>
811266a8:	888003cc 	andi	r2,r17,15
811266ac:	01000104 	movi	r4,4
811266b0:	11000426 	beq	r2,r4,811266c4 <__subdf3+0xb0>
811266b4:	890b883a 	add	r5,r17,r4
811266b8:	2c63803a 	cmpltu	r17,r5,r17
811266bc:	1c47883a 	add	r3,r3,r17
811266c0:	2823883a 	mov	r17,r5
811266c4:	1880202c 	andhi	r2,r3,128
811266c8:	10005926 	beq	r2,zero,81126830 <__subdf3+0x21c>
811266cc:	84000044 	addi	r16,r16,1
811266d0:	0081ffc4 	movi	r2,2047
811266d4:	8080be26 	beq	r16,r2,811269d0 <__subdf3+0x3bc>
811266d8:	017fe034 	movhi	r5,65408
811266dc:	297fffc4 	addi	r5,r5,-1
811266e0:	1946703a 	and	r3,r3,r5
811266e4:	1804977a 	slli	r2,r3,29
811266e8:	1806927a 	slli	r3,r3,9
811266ec:	8822d0fa 	srli	r17,r17,3
811266f0:	8401ffcc 	andi	r16,r16,2047
811266f4:	180ad33a 	srli	r5,r3,12
811266f8:	9100004c 	andi	r4,r18,1
811266fc:	1444b03a 	or	r2,r2,r17
81126700:	80c1ffcc 	andi	r3,r16,2047
81126704:	1820953a 	slli	r16,r3,20
81126708:	20c03fcc 	andi	r3,r4,255
8112670c:	180897fa 	slli	r4,r3,31
81126710:	00c00434 	movhi	r3,16
81126714:	18ffffc4 	addi	r3,r3,-1
81126718:	28c6703a 	and	r3,r5,r3
8112671c:	1c06b03a 	or	r3,r3,r16
81126720:	1906b03a 	or	r3,r3,r4
81126724:	dfc00417 	ldw	ra,16(sp)
81126728:	dcc00317 	ldw	r19,12(sp)
8112672c:	dc800217 	ldw	r18,8(sp)
81126730:	dc400117 	ldw	r17,4(sp)
81126734:	dc000017 	ldw	r16,0(sp)
81126738:	dec00504 	addi	sp,sp,20
8112673c:	f800283a 	ret
81126740:	0101ffc4 	movi	r4,2047
81126744:	813fd626 	beq	r16,r4,811266a0 <__reset+0xfb1066a0>
81126748:	29402034 	orhi	r5,r5,128
8112674c:	01000e04 	movi	r4,56
81126750:	2080a316 	blt	r4,r2,811269e0 <__subdf3+0x3cc>
81126754:	010007c4 	movi	r4,31
81126758:	2080c616 	blt	r4,r2,81126a74 <__subdf3+0x460>
8112675c:	01000804 	movi	r4,32
81126760:	2089c83a 	sub	r4,r4,r2
81126764:	2910983a 	sll	r8,r5,r4
81126768:	308ed83a 	srl	r7,r6,r2
8112676c:	3108983a 	sll	r4,r6,r4
81126770:	2884d83a 	srl	r2,r5,r2
81126774:	41ccb03a 	or	r6,r8,r7
81126778:	2008c03a 	cmpne	r4,r4,zero
8112677c:	310cb03a 	or	r6,r6,r4
81126780:	898dc83a 	sub	r6,r17,r6
81126784:	89a3803a 	cmpltu	r17,r17,r6
81126788:	1887c83a 	sub	r3,r3,r2
8112678c:	1c47c83a 	sub	r3,r3,r17
81126790:	3023883a 	mov	r17,r6
81126794:	1880202c 	andhi	r2,r3,128
81126798:	10002326 	beq	r2,zero,81126828 <__subdf3+0x214>
8112679c:	04c02034 	movhi	r19,128
811267a0:	9cffffc4 	addi	r19,r19,-1
811267a4:	1ce6703a 	and	r19,r3,r19
811267a8:	98007a26 	beq	r19,zero,81126994 <__subdf3+0x380>
811267ac:	9809883a 	mov	r4,r19
811267b0:	11119740 	call	81111974 <__clzsi2>
811267b4:	113ffe04 	addi	r4,r2,-8
811267b8:	00c007c4 	movi	r3,31
811267bc:	19007b16 	blt	r3,r4,811269ac <__subdf3+0x398>
811267c0:	00800804 	movi	r2,32
811267c4:	1105c83a 	sub	r2,r2,r4
811267c8:	8884d83a 	srl	r2,r17,r2
811267cc:	9906983a 	sll	r3,r19,r4
811267d0:	8922983a 	sll	r17,r17,r4
811267d4:	10c4b03a 	or	r2,r2,r3
811267d8:	24007816 	blt	r4,r16,811269bc <__subdf3+0x3a8>
811267dc:	2421c83a 	sub	r16,r4,r16
811267e0:	80c00044 	addi	r3,r16,1
811267e4:	010007c4 	movi	r4,31
811267e8:	20c09516 	blt	r4,r3,81126a40 <__subdf3+0x42c>
811267ec:	01400804 	movi	r5,32
811267f0:	28cbc83a 	sub	r5,r5,r3
811267f4:	88c8d83a 	srl	r4,r17,r3
811267f8:	8962983a 	sll	r17,r17,r5
811267fc:	114a983a 	sll	r5,r2,r5
81126800:	10c6d83a 	srl	r3,r2,r3
81126804:	8804c03a 	cmpne	r2,r17,zero
81126808:	290ab03a 	or	r5,r5,r4
8112680c:	28a2b03a 	or	r17,r5,r2
81126810:	0021883a 	mov	r16,zero
81126814:	003fa206 	br	811266a0 <__reset+0xfb1066a0>
81126818:	2090b03a 	or	r8,r4,r2
8112681c:	40018e26 	beq	r8,zero,81126e58 <__subdf3+0x844>
81126820:	1007883a 	mov	r3,r2
81126824:	2023883a 	mov	r17,r4
81126828:	888001cc 	andi	r2,r17,7
8112682c:	103f9e1e 	bne	r2,zero,811266a8 <__reset+0xfb1066a8>
81126830:	1804977a 	slli	r2,r3,29
81126834:	8822d0fa 	srli	r17,r17,3
81126838:	1810d0fa 	srli	r8,r3,3
8112683c:	9100004c 	andi	r4,r18,1
81126840:	1444b03a 	or	r2,r2,r17
81126844:	00c1ffc4 	movi	r3,2047
81126848:	80c02826 	beq	r16,r3,811268ec <__subdf3+0x2d8>
8112684c:	01400434 	movhi	r5,16
81126850:	297fffc4 	addi	r5,r5,-1
81126854:	80e0703a 	and	r16,r16,r3
81126858:	414a703a 	and	r5,r8,r5
8112685c:	003fa806 	br	81126700 <__reset+0xfb106700>
81126860:	0080630e 	bge	zero,r2,811269f0 <__subdf3+0x3dc>
81126864:	48003026 	beq	r9,zero,81126928 <__subdf3+0x314>
81126868:	0101ffc4 	movi	r4,2047
8112686c:	813f8c26 	beq	r16,r4,811266a0 <__reset+0xfb1066a0>
81126870:	29402034 	orhi	r5,r5,128
81126874:	01000e04 	movi	r4,56
81126878:	2080a90e 	bge	r4,r2,81126b20 <__subdf3+0x50c>
8112687c:	298cb03a 	or	r6,r5,r6
81126880:	3012c03a 	cmpne	r9,r6,zero
81126884:	0005883a 	mov	r2,zero
81126888:	4c53883a 	add	r9,r9,r17
8112688c:	4c63803a 	cmpltu	r17,r9,r17
81126890:	10c7883a 	add	r3,r2,r3
81126894:	88c7883a 	add	r3,r17,r3
81126898:	4823883a 	mov	r17,r9
8112689c:	1880202c 	andhi	r2,r3,128
811268a0:	1000d026 	beq	r2,zero,81126be4 <__subdf3+0x5d0>
811268a4:	84000044 	addi	r16,r16,1
811268a8:	0081ffc4 	movi	r2,2047
811268ac:	8080fe26 	beq	r16,r2,81126ca8 <__subdf3+0x694>
811268b0:	00bfe034 	movhi	r2,65408
811268b4:	10bfffc4 	addi	r2,r2,-1
811268b8:	1886703a 	and	r3,r3,r2
811268bc:	880ad07a 	srli	r5,r17,1
811268c0:	180497fa 	slli	r2,r3,31
811268c4:	8900004c 	andi	r4,r17,1
811268c8:	2922b03a 	or	r17,r5,r4
811268cc:	1806d07a 	srli	r3,r3,1
811268d0:	1462b03a 	or	r17,r2,r17
811268d4:	3825883a 	mov	r18,r7
811268d8:	003f7106 	br	811266a0 <__reset+0xfb1066a0>
811268dc:	2984b03a 	or	r2,r5,r6
811268e0:	103f6826 	beq	r2,zero,81126684 <__reset+0xfb106684>
811268e4:	39c03fcc 	andi	r7,r7,255
811268e8:	003f6706 	br	81126688 <__reset+0xfb106688>
811268ec:	4086b03a 	or	r3,r8,r2
811268f0:	18015226 	beq	r3,zero,81126e3c <__subdf3+0x828>
811268f4:	00c00434 	movhi	r3,16
811268f8:	41400234 	orhi	r5,r8,8
811268fc:	18ffffc4 	addi	r3,r3,-1
81126900:	28ca703a 	and	r5,r5,r3
81126904:	003f7e06 	br	81126700 <__reset+0xfb106700>
81126908:	10bfffc4 	addi	r2,r2,-1
8112690c:	1000491e 	bne	r2,zero,81126a34 <__subdf3+0x420>
81126910:	898fc83a 	sub	r7,r17,r6
81126914:	89e3803a 	cmpltu	r17,r17,r7
81126918:	1947c83a 	sub	r3,r3,r5
8112691c:	1c47c83a 	sub	r3,r3,r17
81126920:	3823883a 	mov	r17,r7
81126924:	003f9b06 	br	81126794 <__reset+0xfb106794>
81126928:	2988b03a 	or	r4,r5,r6
8112692c:	203f5c26 	beq	r4,zero,811266a0 <__reset+0xfb1066a0>
81126930:	10bfffc4 	addi	r2,r2,-1
81126934:	1000931e 	bne	r2,zero,81126b84 <__subdf3+0x570>
81126938:	898d883a 	add	r6,r17,r6
8112693c:	3463803a 	cmpltu	r17,r6,r17
81126940:	1947883a 	add	r3,r3,r5
81126944:	88c7883a 	add	r3,r17,r3
81126948:	3023883a 	mov	r17,r6
8112694c:	003fd306 	br	8112689c <__reset+0xfb10689c>
81126950:	1000541e 	bne	r2,zero,81126aa4 <__subdf3+0x490>
81126954:	80800044 	addi	r2,r16,1
81126958:	1081ffcc 	andi	r2,r2,2047
8112695c:	01000044 	movi	r4,1
81126960:	2080a20e 	bge	r4,r2,81126bec <__subdf3+0x5d8>
81126964:	8989c83a 	sub	r4,r17,r6
81126968:	8905803a 	cmpltu	r2,r17,r4
8112696c:	1967c83a 	sub	r19,r3,r5
81126970:	98a7c83a 	sub	r19,r19,r2
81126974:	9880202c 	andhi	r2,r19,128
81126978:	10006326 	beq	r2,zero,81126b08 <__subdf3+0x4f4>
8112697c:	3463c83a 	sub	r17,r6,r17
81126980:	28c7c83a 	sub	r3,r5,r3
81126984:	344d803a 	cmpltu	r6,r6,r17
81126988:	19a7c83a 	sub	r19,r3,r6
8112698c:	3825883a 	mov	r18,r7
81126990:	983f861e 	bne	r19,zero,811267ac <__reset+0xfb1067ac>
81126994:	8809883a 	mov	r4,r17
81126998:	11119740 	call	81111974 <__clzsi2>
8112699c:	10800804 	addi	r2,r2,32
811269a0:	113ffe04 	addi	r4,r2,-8
811269a4:	00c007c4 	movi	r3,31
811269a8:	193f850e 	bge	r3,r4,811267c0 <__reset+0xfb1067c0>
811269ac:	10bff604 	addi	r2,r2,-40
811269b0:	8884983a 	sll	r2,r17,r2
811269b4:	0023883a 	mov	r17,zero
811269b8:	243f880e 	bge	r4,r16,811267dc <__reset+0xfb1067dc>
811269bc:	00ffe034 	movhi	r3,65408
811269c0:	18ffffc4 	addi	r3,r3,-1
811269c4:	8121c83a 	sub	r16,r16,r4
811269c8:	10c6703a 	and	r3,r2,r3
811269cc:	003f3406 	br	811266a0 <__reset+0xfb1066a0>
811269d0:	9100004c 	andi	r4,r18,1
811269d4:	000b883a 	mov	r5,zero
811269d8:	0005883a 	mov	r2,zero
811269dc:	003f4806 	br	81126700 <__reset+0xfb106700>
811269e0:	298cb03a 	or	r6,r5,r6
811269e4:	300cc03a 	cmpne	r6,r6,zero
811269e8:	0005883a 	mov	r2,zero
811269ec:	003f6406 	br	81126780 <__reset+0xfb106780>
811269f0:	10009a1e 	bne	r2,zero,81126c5c <__subdf3+0x648>
811269f4:	82400044 	addi	r9,r16,1
811269f8:	4881ffcc 	andi	r2,r9,2047
811269fc:	02800044 	movi	r10,1
81126a00:	5080670e 	bge	r10,r2,81126ba0 <__subdf3+0x58c>
81126a04:	0081ffc4 	movi	r2,2047
81126a08:	4880af26 	beq	r9,r2,81126cc8 <__subdf3+0x6b4>
81126a0c:	898d883a 	add	r6,r17,r6
81126a10:	1945883a 	add	r2,r3,r5
81126a14:	3447803a 	cmpltu	r3,r6,r17
81126a18:	1887883a 	add	r3,r3,r2
81126a1c:	182297fa 	slli	r17,r3,31
81126a20:	300cd07a 	srli	r6,r6,1
81126a24:	1806d07a 	srli	r3,r3,1
81126a28:	4821883a 	mov	r16,r9
81126a2c:	89a2b03a 	or	r17,r17,r6
81126a30:	003f1b06 	br	811266a0 <__reset+0xfb1066a0>
81126a34:	0101ffc4 	movi	r4,2047
81126a38:	813f441e 	bne	r16,r4,8112674c <__reset+0xfb10674c>
81126a3c:	003f1806 	br	811266a0 <__reset+0xfb1066a0>
81126a40:	843ff844 	addi	r16,r16,-31
81126a44:	01400804 	movi	r5,32
81126a48:	1408d83a 	srl	r4,r2,r16
81126a4c:	19405026 	beq	r3,r5,81126b90 <__subdf3+0x57c>
81126a50:	01401004 	movi	r5,64
81126a54:	28c7c83a 	sub	r3,r5,r3
81126a58:	10c4983a 	sll	r2,r2,r3
81126a5c:	88a2b03a 	or	r17,r17,r2
81126a60:	8822c03a 	cmpne	r17,r17,zero
81126a64:	2462b03a 	or	r17,r4,r17
81126a68:	0007883a 	mov	r3,zero
81126a6c:	0021883a 	mov	r16,zero
81126a70:	003f6d06 	br	81126828 <__reset+0xfb106828>
81126a74:	11fff804 	addi	r7,r2,-32
81126a78:	01000804 	movi	r4,32
81126a7c:	29ced83a 	srl	r7,r5,r7
81126a80:	11004526 	beq	r2,r4,81126b98 <__subdf3+0x584>
81126a84:	01001004 	movi	r4,64
81126a88:	2089c83a 	sub	r4,r4,r2
81126a8c:	2904983a 	sll	r2,r5,r4
81126a90:	118cb03a 	or	r6,r2,r6
81126a94:	300cc03a 	cmpne	r6,r6,zero
81126a98:	398cb03a 	or	r6,r7,r6
81126a9c:	0005883a 	mov	r2,zero
81126aa0:	003f3706 	br	81126780 <__reset+0xfb106780>
81126aa4:	80002a26 	beq	r16,zero,81126b50 <__subdf3+0x53c>
81126aa8:	0101ffc4 	movi	r4,2047
81126aac:	49006626 	beq	r9,r4,81126c48 <__subdf3+0x634>
81126ab0:	0085c83a 	sub	r2,zero,r2
81126ab4:	18c02034 	orhi	r3,r3,128
81126ab8:	01000e04 	movi	r4,56
81126abc:	20807e16 	blt	r4,r2,81126cb8 <__subdf3+0x6a4>
81126ac0:	010007c4 	movi	r4,31
81126ac4:	2080e716 	blt	r4,r2,81126e64 <__subdf3+0x850>
81126ac8:	01000804 	movi	r4,32
81126acc:	2089c83a 	sub	r4,r4,r2
81126ad0:	1914983a 	sll	r10,r3,r4
81126ad4:	8890d83a 	srl	r8,r17,r2
81126ad8:	8908983a 	sll	r4,r17,r4
81126adc:	1884d83a 	srl	r2,r3,r2
81126ae0:	5222b03a 	or	r17,r10,r8
81126ae4:	2006c03a 	cmpne	r3,r4,zero
81126ae8:	88e2b03a 	or	r17,r17,r3
81126aec:	3463c83a 	sub	r17,r6,r17
81126af0:	2885c83a 	sub	r2,r5,r2
81126af4:	344d803a 	cmpltu	r6,r6,r17
81126af8:	1187c83a 	sub	r3,r2,r6
81126afc:	4821883a 	mov	r16,r9
81126b00:	3825883a 	mov	r18,r7
81126b04:	003f2306 	br	81126794 <__reset+0xfb106794>
81126b08:	24d0b03a 	or	r8,r4,r19
81126b0c:	40001b1e 	bne	r8,zero,81126b7c <__subdf3+0x568>
81126b10:	0005883a 	mov	r2,zero
81126b14:	0009883a 	mov	r4,zero
81126b18:	0021883a 	mov	r16,zero
81126b1c:	003f4906 	br	81126844 <__reset+0xfb106844>
81126b20:	010007c4 	movi	r4,31
81126b24:	20803a16 	blt	r4,r2,81126c10 <__subdf3+0x5fc>
81126b28:	01000804 	movi	r4,32
81126b2c:	2089c83a 	sub	r4,r4,r2
81126b30:	2912983a 	sll	r9,r5,r4
81126b34:	3090d83a 	srl	r8,r6,r2
81126b38:	3108983a 	sll	r4,r6,r4
81126b3c:	2884d83a 	srl	r2,r5,r2
81126b40:	4a12b03a 	or	r9,r9,r8
81126b44:	2008c03a 	cmpne	r4,r4,zero
81126b48:	4912b03a 	or	r9,r9,r4
81126b4c:	003f4e06 	br	81126888 <__reset+0xfb106888>
81126b50:	1c48b03a 	or	r4,r3,r17
81126b54:	20003c26 	beq	r4,zero,81126c48 <__subdf3+0x634>
81126b58:	0084303a 	nor	r2,zero,r2
81126b5c:	1000381e 	bne	r2,zero,81126c40 <__subdf3+0x62c>
81126b60:	3463c83a 	sub	r17,r6,r17
81126b64:	28c5c83a 	sub	r2,r5,r3
81126b68:	344d803a 	cmpltu	r6,r6,r17
81126b6c:	1187c83a 	sub	r3,r2,r6
81126b70:	4821883a 	mov	r16,r9
81126b74:	3825883a 	mov	r18,r7
81126b78:	003f0606 	br	81126794 <__reset+0xfb106794>
81126b7c:	2023883a 	mov	r17,r4
81126b80:	003f0906 	br	811267a8 <__reset+0xfb1067a8>
81126b84:	0101ffc4 	movi	r4,2047
81126b88:	813f3a1e 	bne	r16,r4,81126874 <__reset+0xfb106874>
81126b8c:	003ec406 	br	811266a0 <__reset+0xfb1066a0>
81126b90:	0005883a 	mov	r2,zero
81126b94:	003fb106 	br	81126a5c <__reset+0xfb106a5c>
81126b98:	0005883a 	mov	r2,zero
81126b9c:	003fbc06 	br	81126a90 <__reset+0xfb106a90>
81126ba0:	1c44b03a 	or	r2,r3,r17
81126ba4:	80008e1e 	bne	r16,zero,81126de0 <__subdf3+0x7cc>
81126ba8:	1000c826 	beq	r2,zero,81126ecc <__subdf3+0x8b8>
81126bac:	2984b03a 	or	r2,r5,r6
81126bb0:	103ebb26 	beq	r2,zero,811266a0 <__reset+0xfb1066a0>
81126bb4:	8989883a 	add	r4,r17,r6
81126bb8:	1945883a 	add	r2,r3,r5
81126bbc:	2447803a 	cmpltu	r3,r4,r17
81126bc0:	1887883a 	add	r3,r3,r2
81126bc4:	1880202c 	andhi	r2,r3,128
81126bc8:	2023883a 	mov	r17,r4
81126bcc:	103f1626 	beq	r2,zero,81126828 <__reset+0xfb106828>
81126bd0:	00bfe034 	movhi	r2,65408
81126bd4:	10bfffc4 	addi	r2,r2,-1
81126bd8:	5021883a 	mov	r16,r10
81126bdc:	1886703a 	and	r3,r3,r2
81126be0:	003eaf06 	br	811266a0 <__reset+0xfb1066a0>
81126be4:	3825883a 	mov	r18,r7
81126be8:	003f0f06 	br	81126828 <__reset+0xfb106828>
81126bec:	1c44b03a 	or	r2,r3,r17
81126bf0:	8000251e 	bne	r16,zero,81126c88 <__subdf3+0x674>
81126bf4:	1000661e 	bne	r2,zero,81126d90 <__subdf3+0x77c>
81126bf8:	2990b03a 	or	r8,r5,r6
81126bfc:	40009626 	beq	r8,zero,81126e58 <__subdf3+0x844>
81126c00:	2807883a 	mov	r3,r5
81126c04:	3023883a 	mov	r17,r6
81126c08:	3825883a 	mov	r18,r7
81126c0c:	003ea406 	br	811266a0 <__reset+0xfb1066a0>
81126c10:	127ff804 	addi	r9,r2,-32
81126c14:	01000804 	movi	r4,32
81126c18:	2a52d83a 	srl	r9,r5,r9
81126c1c:	11008c26 	beq	r2,r4,81126e50 <__subdf3+0x83c>
81126c20:	01001004 	movi	r4,64
81126c24:	2085c83a 	sub	r2,r4,r2
81126c28:	2884983a 	sll	r2,r5,r2
81126c2c:	118cb03a 	or	r6,r2,r6
81126c30:	300cc03a 	cmpne	r6,r6,zero
81126c34:	4992b03a 	or	r9,r9,r6
81126c38:	0005883a 	mov	r2,zero
81126c3c:	003f1206 	br	81126888 <__reset+0xfb106888>
81126c40:	0101ffc4 	movi	r4,2047
81126c44:	493f9c1e 	bne	r9,r4,81126ab8 <__reset+0xfb106ab8>
81126c48:	2807883a 	mov	r3,r5
81126c4c:	3023883a 	mov	r17,r6
81126c50:	4821883a 	mov	r16,r9
81126c54:	3825883a 	mov	r18,r7
81126c58:	003e9106 	br	811266a0 <__reset+0xfb1066a0>
81126c5c:	80001f1e 	bne	r16,zero,81126cdc <__subdf3+0x6c8>
81126c60:	1c48b03a 	or	r4,r3,r17
81126c64:	20005a26 	beq	r4,zero,81126dd0 <__subdf3+0x7bc>
81126c68:	0084303a 	nor	r2,zero,r2
81126c6c:	1000561e 	bne	r2,zero,81126dc8 <__subdf3+0x7b4>
81126c70:	89a3883a 	add	r17,r17,r6
81126c74:	1945883a 	add	r2,r3,r5
81126c78:	898d803a 	cmpltu	r6,r17,r6
81126c7c:	3087883a 	add	r3,r6,r2
81126c80:	4821883a 	mov	r16,r9
81126c84:	003f0506 	br	8112689c <__reset+0xfb10689c>
81126c88:	10002b1e 	bne	r2,zero,81126d38 <__subdf3+0x724>
81126c8c:	2984b03a 	or	r2,r5,r6
81126c90:	10008026 	beq	r2,zero,81126e94 <__subdf3+0x880>
81126c94:	2807883a 	mov	r3,r5
81126c98:	3023883a 	mov	r17,r6
81126c9c:	3825883a 	mov	r18,r7
81126ca0:	0401ffc4 	movi	r16,2047
81126ca4:	003e7e06 	br	811266a0 <__reset+0xfb1066a0>
81126ca8:	3809883a 	mov	r4,r7
81126cac:	0011883a 	mov	r8,zero
81126cb0:	0005883a 	mov	r2,zero
81126cb4:	003ee306 	br	81126844 <__reset+0xfb106844>
81126cb8:	1c62b03a 	or	r17,r3,r17
81126cbc:	8822c03a 	cmpne	r17,r17,zero
81126cc0:	0005883a 	mov	r2,zero
81126cc4:	003f8906 	br	81126aec <__reset+0xfb106aec>
81126cc8:	3809883a 	mov	r4,r7
81126ccc:	4821883a 	mov	r16,r9
81126cd0:	0011883a 	mov	r8,zero
81126cd4:	0005883a 	mov	r2,zero
81126cd8:	003eda06 	br	81126844 <__reset+0xfb106844>
81126cdc:	0101ffc4 	movi	r4,2047
81126ce0:	49003b26 	beq	r9,r4,81126dd0 <__subdf3+0x7bc>
81126ce4:	0085c83a 	sub	r2,zero,r2
81126ce8:	18c02034 	orhi	r3,r3,128
81126cec:	01000e04 	movi	r4,56
81126cf0:	20806e16 	blt	r4,r2,81126eac <__subdf3+0x898>
81126cf4:	010007c4 	movi	r4,31
81126cf8:	20807716 	blt	r4,r2,81126ed8 <__subdf3+0x8c4>
81126cfc:	01000804 	movi	r4,32
81126d00:	2089c83a 	sub	r4,r4,r2
81126d04:	1914983a 	sll	r10,r3,r4
81126d08:	8890d83a 	srl	r8,r17,r2
81126d0c:	8908983a 	sll	r4,r17,r4
81126d10:	1884d83a 	srl	r2,r3,r2
81126d14:	5222b03a 	or	r17,r10,r8
81126d18:	2006c03a 	cmpne	r3,r4,zero
81126d1c:	88e2b03a 	or	r17,r17,r3
81126d20:	89a3883a 	add	r17,r17,r6
81126d24:	1145883a 	add	r2,r2,r5
81126d28:	898d803a 	cmpltu	r6,r17,r6
81126d2c:	3087883a 	add	r3,r6,r2
81126d30:	4821883a 	mov	r16,r9
81126d34:	003ed906 	br	8112689c <__reset+0xfb10689c>
81126d38:	2984b03a 	or	r2,r5,r6
81126d3c:	10004226 	beq	r2,zero,81126e48 <__subdf3+0x834>
81126d40:	1808d0fa 	srli	r4,r3,3
81126d44:	8822d0fa 	srli	r17,r17,3
81126d48:	1806977a 	slli	r3,r3,29
81126d4c:	2080022c 	andhi	r2,r4,8
81126d50:	1c62b03a 	or	r17,r3,r17
81126d54:	10000826 	beq	r2,zero,81126d78 <__subdf3+0x764>
81126d58:	2812d0fa 	srli	r9,r5,3
81126d5c:	4880022c 	andhi	r2,r9,8
81126d60:	1000051e 	bne	r2,zero,81126d78 <__subdf3+0x764>
81126d64:	300cd0fa 	srli	r6,r6,3
81126d68:	2804977a 	slli	r2,r5,29
81126d6c:	4809883a 	mov	r4,r9
81126d70:	3825883a 	mov	r18,r7
81126d74:	11a2b03a 	or	r17,r2,r6
81126d78:	8806d77a 	srli	r3,r17,29
81126d7c:	200890fa 	slli	r4,r4,3
81126d80:	882290fa 	slli	r17,r17,3
81126d84:	0401ffc4 	movi	r16,2047
81126d88:	1906b03a 	or	r3,r3,r4
81126d8c:	003e4406 	br	811266a0 <__reset+0xfb1066a0>
81126d90:	2984b03a 	or	r2,r5,r6
81126d94:	103e4226 	beq	r2,zero,811266a0 <__reset+0xfb1066a0>
81126d98:	8989c83a 	sub	r4,r17,r6
81126d9c:	8911803a 	cmpltu	r8,r17,r4
81126da0:	1945c83a 	sub	r2,r3,r5
81126da4:	1205c83a 	sub	r2,r2,r8
81126da8:	1200202c 	andhi	r8,r2,128
81126dac:	403e9a26 	beq	r8,zero,81126818 <__reset+0xfb106818>
81126db0:	3463c83a 	sub	r17,r6,r17
81126db4:	28c5c83a 	sub	r2,r5,r3
81126db8:	344d803a 	cmpltu	r6,r6,r17
81126dbc:	1187c83a 	sub	r3,r2,r6
81126dc0:	3825883a 	mov	r18,r7
81126dc4:	003e3606 	br	811266a0 <__reset+0xfb1066a0>
81126dc8:	0101ffc4 	movi	r4,2047
81126dcc:	493fc71e 	bne	r9,r4,81126cec <__reset+0xfb106cec>
81126dd0:	2807883a 	mov	r3,r5
81126dd4:	3023883a 	mov	r17,r6
81126dd8:	4821883a 	mov	r16,r9
81126ddc:	003e3006 	br	811266a0 <__reset+0xfb1066a0>
81126de0:	10003626 	beq	r2,zero,81126ebc <__subdf3+0x8a8>
81126de4:	2984b03a 	or	r2,r5,r6
81126de8:	10001726 	beq	r2,zero,81126e48 <__subdf3+0x834>
81126dec:	1808d0fa 	srli	r4,r3,3
81126df0:	8822d0fa 	srli	r17,r17,3
81126df4:	1806977a 	slli	r3,r3,29
81126df8:	2080022c 	andhi	r2,r4,8
81126dfc:	1c62b03a 	or	r17,r3,r17
81126e00:	10000726 	beq	r2,zero,81126e20 <__subdf3+0x80c>
81126e04:	2812d0fa 	srli	r9,r5,3
81126e08:	4880022c 	andhi	r2,r9,8
81126e0c:	1000041e 	bne	r2,zero,81126e20 <__subdf3+0x80c>
81126e10:	300cd0fa 	srli	r6,r6,3
81126e14:	2804977a 	slli	r2,r5,29
81126e18:	4809883a 	mov	r4,r9
81126e1c:	11a2b03a 	or	r17,r2,r6
81126e20:	8806d77a 	srli	r3,r17,29
81126e24:	200890fa 	slli	r4,r4,3
81126e28:	882290fa 	slli	r17,r17,3
81126e2c:	3825883a 	mov	r18,r7
81126e30:	1906b03a 	or	r3,r3,r4
81126e34:	0401ffc4 	movi	r16,2047
81126e38:	003e1906 	br	811266a0 <__reset+0xfb1066a0>
81126e3c:	000b883a 	mov	r5,zero
81126e40:	0005883a 	mov	r2,zero
81126e44:	003e2e06 	br	81126700 <__reset+0xfb106700>
81126e48:	0401ffc4 	movi	r16,2047
81126e4c:	003e1406 	br	811266a0 <__reset+0xfb1066a0>
81126e50:	0005883a 	mov	r2,zero
81126e54:	003f7506 	br	81126c2c <__reset+0xfb106c2c>
81126e58:	0005883a 	mov	r2,zero
81126e5c:	0009883a 	mov	r4,zero
81126e60:	003e7806 	br	81126844 <__reset+0xfb106844>
81126e64:	123ff804 	addi	r8,r2,-32
81126e68:	01000804 	movi	r4,32
81126e6c:	1a10d83a 	srl	r8,r3,r8
81126e70:	11002526 	beq	r2,r4,81126f08 <__subdf3+0x8f4>
81126e74:	01001004 	movi	r4,64
81126e78:	2085c83a 	sub	r2,r4,r2
81126e7c:	1884983a 	sll	r2,r3,r2
81126e80:	1444b03a 	or	r2,r2,r17
81126e84:	1004c03a 	cmpne	r2,r2,zero
81126e88:	40a2b03a 	or	r17,r8,r2
81126e8c:	0005883a 	mov	r2,zero
81126e90:	003f1606 	br	81126aec <__reset+0xfb106aec>
81126e94:	02000434 	movhi	r8,16
81126e98:	0009883a 	mov	r4,zero
81126e9c:	423fffc4 	addi	r8,r8,-1
81126ea0:	00bfffc4 	movi	r2,-1
81126ea4:	0401ffc4 	movi	r16,2047
81126ea8:	003e6606 	br	81126844 <__reset+0xfb106844>
81126eac:	1c62b03a 	or	r17,r3,r17
81126eb0:	8822c03a 	cmpne	r17,r17,zero
81126eb4:	0005883a 	mov	r2,zero
81126eb8:	003f9906 	br	81126d20 <__reset+0xfb106d20>
81126ebc:	2807883a 	mov	r3,r5
81126ec0:	3023883a 	mov	r17,r6
81126ec4:	0401ffc4 	movi	r16,2047
81126ec8:	003df506 	br	811266a0 <__reset+0xfb1066a0>
81126ecc:	2807883a 	mov	r3,r5
81126ed0:	3023883a 	mov	r17,r6
81126ed4:	003df206 	br	811266a0 <__reset+0xfb1066a0>
81126ed8:	123ff804 	addi	r8,r2,-32
81126edc:	01000804 	movi	r4,32
81126ee0:	1a10d83a 	srl	r8,r3,r8
81126ee4:	11000a26 	beq	r2,r4,81126f10 <__subdf3+0x8fc>
81126ee8:	01001004 	movi	r4,64
81126eec:	2085c83a 	sub	r2,r4,r2
81126ef0:	1884983a 	sll	r2,r3,r2
81126ef4:	1444b03a 	or	r2,r2,r17
81126ef8:	1004c03a 	cmpne	r2,r2,zero
81126efc:	40a2b03a 	or	r17,r8,r2
81126f00:	0005883a 	mov	r2,zero
81126f04:	003f8606 	br	81126d20 <__reset+0xfb106d20>
81126f08:	0005883a 	mov	r2,zero
81126f0c:	003fdc06 	br	81126e80 <__reset+0xfb106e80>
81126f10:	0005883a 	mov	r2,zero
81126f14:	003ff706 	br	81126ef4 <__reset+0xfb106ef4>

81126f18 <__fixdfsi>:
81126f18:	280cd53a 	srli	r6,r5,20
81126f1c:	00c00434 	movhi	r3,16
81126f20:	18ffffc4 	addi	r3,r3,-1
81126f24:	3181ffcc 	andi	r6,r6,2047
81126f28:	01c0ff84 	movi	r7,1022
81126f2c:	28c6703a 	and	r3,r5,r3
81126f30:	280ad7fa 	srli	r5,r5,31
81126f34:	3980120e 	bge	r7,r6,81126f80 <__fixdfsi+0x68>
81126f38:	00810744 	movi	r2,1053
81126f3c:	11800c16 	blt	r2,r6,81126f70 <__fixdfsi+0x58>
81126f40:	00810cc4 	movi	r2,1075
81126f44:	1185c83a 	sub	r2,r2,r6
81126f48:	01c007c4 	movi	r7,31
81126f4c:	18c00434 	orhi	r3,r3,16
81126f50:	38800d16 	blt	r7,r2,81126f88 <__fixdfsi+0x70>
81126f54:	31befb44 	addi	r6,r6,-1043
81126f58:	2084d83a 	srl	r2,r4,r2
81126f5c:	1986983a 	sll	r3,r3,r6
81126f60:	1884b03a 	or	r2,r3,r2
81126f64:	28000726 	beq	r5,zero,81126f84 <__fixdfsi+0x6c>
81126f68:	0085c83a 	sub	r2,zero,r2
81126f6c:	f800283a 	ret
81126f70:	00a00034 	movhi	r2,32768
81126f74:	10bfffc4 	addi	r2,r2,-1
81126f78:	2885883a 	add	r2,r5,r2
81126f7c:	f800283a 	ret
81126f80:	0005883a 	mov	r2,zero
81126f84:	f800283a 	ret
81126f88:	008104c4 	movi	r2,1043
81126f8c:	1185c83a 	sub	r2,r2,r6
81126f90:	1884d83a 	srl	r2,r3,r2
81126f94:	003ff306 	br	81126f64 <__reset+0xfb106f64>

81126f98 <__floatsidf>:
81126f98:	defffd04 	addi	sp,sp,-12
81126f9c:	de00012e 	bgeu	sp,et,81126fa4 <__floatsidf+0xc>
81126fa0:	003b68fa 	trap	3
81126fa4:	dfc00215 	stw	ra,8(sp)
81126fa8:	dc400115 	stw	r17,4(sp)
81126fac:	dc000015 	stw	r16,0(sp)
81126fb0:	20002b26 	beq	r4,zero,81127060 <__floatsidf+0xc8>
81126fb4:	2023883a 	mov	r17,r4
81126fb8:	2020d7fa 	srli	r16,r4,31
81126fbc:	20002d16 	blt	r4,zero,81127074 <__floatsidf+0xdc>
81126fc0:	8809883a 	mov	r4,r17
81126fc4:	11119740 	call	81111974 <__clzsi2>
81126fc8:	01410784 	movi	r5,1054
81126fcc:	288bc83a 	sub	r5,r5,r2
81126fd0:	01010cc4 	movi	r4,1075
81126fd4:	2149c83a 	sub	r4,r4,r5
81126fd8:	00c007c4 	movi	r3,31
81126fdc:	1900160e 	bge	r3,r4,81127038 <__floatsidf+0xa0>
81126fe0:	00c104c4 	movi	r3,1043
81126fe4:	1947c83a 	sub	r3,r3,r5
81126fe8:	88c6983a 	sll	r3,r17,r3
81126fec:	00800434 	movhi	r2,16
81126ff0:	10bfffc4 	addi	r2,r2,-1
81126ff4:	1886703a 	and	r3,r3,r2
81126ff8:	2941ffcc 	andi	r5,r5,2047
81126ffc:	800d883a 	mov	r6,r16
81127000:	0005883a 	mov	r2,zero
81127004:	280a953a 	slli	r5,r5,20
81127008:	31803fcc 	andi	r6,r6,255
8112700c:	01000434 	movhi	r4,16
81127010:	300c97fa 	slli	r6,r6,31
81127014:	213fffc4 	addi	r4,r4,-1
81127018:	1906703a 	and	r3,r3,r4
8112701c:	1946b03a 	or	r3,r3,r5
81127020:	1986b03a 	or	r3,r3,r6
81127024:	dfc00217 	ldw	ra,8(sp)
81127028:	dc400117 	ldw	r17,4(sp)
8112702c:	dc000017 	ldw	r16,0(sp)
81127030:	dec00304 	addi	sp,sp,12
81127034:	f800283a 	ret
81127038:	00c002c4 	movi	r3,11
8112703c:	1887c83a 	sub	r3,r3,r2
81127040:	88c6d83a 	srl	r3,r17,r3
81127044:	8904983a 	sll	r2,r17,r4
81127048:	01000434 	movhi	r4,16
8112704c:	213fffc4 	addi	r4,r4,-1
81127050:	2941ffcc 	andi	r5,r5,2047
81127054:	1906703a 	and	r3,r3,r4
81127058:	800d883a 	mov	r6,r16
8112705c:	003fe906 	br	81127004 <__reset+0xfb107004>
81127060:	000d883a 	mov	r6,zero
81127064:	000b883a 	mov	r5,zero
81127068:	0007883a 	mov	r3,zero
8112706c:	0005883a 	mov	r2,zero
81127070:	003fe406 	br	81127004 <__reset+0xfb107004>
81127074:	0123c83a 	sub	r17,zero,r4
81127078:	003fd106 	br	81126fc0 <__reset+0xfb106fc0>

8112707c <__floatunsidf>:
8112707c:	defffe04 	addi	sp,sp,-8
81127080:	de00012e 	bgeu	sp,et,81127088 <__floatunsidf+0xc>
81127084:	003b68fa 	trap	3
81127088:	dc000015 	stw	r16,0(sp)
8112708c:	dfc00115 	stw	ra,4(sp)
81127090:	2021883a 	mov	r16,r4
81127094:	20002226 	beq	r4,zero,81127120 <__floatunsidf+0xa4>
81127098:	11119740 	call	81111974 <__clzsi2>
8112709c:	01010784 	movi	r4,1054
811270a0:	2089c83a 	sub	r4,r4,r2
811270a4:	01810cc4 	movi	r6,1075
811270a8:	310dc83a 	sub	r6,r6,r4
811270ac:	00c007c4 	movi	r3,31
811270b0:	1980120e 	bge	r3,r6,811270fc <__floatunsidf+0x80>
811270b4:	00c104c4 	movi	r3,1043
811270b8:	1907c83a 	sub	r3,r3,r4
811270bc:	80ca983a 	sll	r5,r16,r3
811270c0:	00800434 	movhi	r2,16
811270c4:	10bfffc4 	addi	r2,r2,-1
811270c8:	2101ffcc 	andi	r4,r4,2047
811270cc:	0021883a 	mov	r16,zero
811270d0:	288a703a 	and	r5,r5,r2
811270d4:	2008953a 	slli	r4,r4,20
811270d8:	00c00434 	movhi	r3,16
811270dc:	18ffffc4 	addi	r3,r3,-1
811270e0:	28c6703a 	and	r3,r5,r3
811270e4:	8005883a 	mov	r2,r16
811270e8:	1906b03a 	or	r3,r3,r4
811270ec:	dfc00117 	ldw	ra,4(sp)
811270f0:	dc000017 	ldw	r16,0(sp)
811270f4:	dec00204 	addi	sp,sp,8
811270f8:	f800283a 	ret
811270fc:	00c002c4 	movi	r3,11
81127100:	188bc83a 	sub	r5,r3,r2
81127104:	814ad83a 	srl	r5,r16,r5
81127108:	00c00434 	movhi	r3,16
8112710c:	18ffffc4 	addi	r3,r3,-1
81127110:	81a0983a 	sll	r16,r16,r6
81127114:	2101ffcc 	andi	r4,r4,2047
81127118:	28ca703a 	and	r5,r5,r3
8112711c:	003fed06 	br	811270d4 <__reset+0xfb1070d4>
81127120:	0009883a 	mov	r4,zero
81127124:	000b883a 	mov	r5,zero
81127128:	003fea06 	br	811270d4 <__reset+0xfb1070d4>

8112712c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8112712c:	defffb04 	addi	sp,sp,-20
81127130:	de00012e 	bgeu	sp,et,81127138 <alt_busy_sleep+0xc>
81127134:	003b68fa 	trap	3
81127138:	df000415 	stw	fp,16(sp)
8112713c:	df000404 	addi	fp,sp,16
81127140:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81127144:	008000c4 	movi	r2,3
81127148:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8112714c:	e0fffd17 	ldw	r3,-12(fp)
81127150:	008003f4 	movhi	r2,15
81127154:	10909004 	addi	r2,r2,16960
81127158:	1887383a 	mul	r3,r3,r2
8112715c:	00817db4 	movhi	r2,1526
81127160:	10b84004 	addi	r2,r2,-7936
81127164:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81127168:	00a00034 	movhi	r2,32768
8112716c:	10bfffc4 	addi	r2,r2,-1
81127170:	10c5203a 	divu	r2,r2,r3
81127174:	e0ffff17 	ldw	r3,-4(fp)
81127178:	1885203a 	divu	r2,r3,r2
8112717c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81127180:	e0bffe17 	ldw	r2,-8(fp)
81127184:	10002526 	beq	r2,zero,8112721c <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81127188:	e03ffc15 	stw	zero,-16(fp)
8112718c:	00001406 	br	811271e0 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81127190:	00a00034 	movhi	r2,32768
81127194:	10bfffc4 	addi	r2,r2,-1
81127198:	10bfffc4 	addi	r2,r2,-1
8112719c:	103ffe1e 	bne	r2,zero,81127198 <__reset+0xfb107198>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811271a0:	e0fffd17 	ldw	r3,-12(fp)
811271a4:	008003f4 	movhi	r2,15
811271a8:	10909004 	addi	r2,r2,16960
811271ac:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
811271b0:	00817db4 	movhi	r2,1526
811271b4:	10b84004 	addi	r2,r2,-7936
811271b8:	10c7203a 	divu	r3,r2,r3
811271bc:	00a00034 	movhi	r2,32768
811271c0:	10bfffc4 	addi	r2,r2,-1
811271c4:	10c5203a 	divu	r2,r2,r3
811271c8:	e0ffff17 	ldw	r3,-4(fp)
811271cc:	1885c83a 	sub	r2,r3,r2
811271d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811271d4:	e0bffc17 	ldw	r2,-16(fp)
811271d8:	10800044 	addi	r2,r2,1
811271dc:	e0bffc15 	stw	r2,-16(fp)
811271e0:	e0fffc17 	ldw	r3,-16(fp)
811271e4:	e0bffe17 	ldw	r2,-8(fp)
811271e8:	18bfe916 	blt	r3,r2,81127190 <__reset+0xfb107190>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811271ec:	e0fffd17 	ldw	r3,-12(fp)
811271f0:	008003f4 	movhi	r2,15
811271f4:	10909004 	addi	r2,r2,16960
811271f8:	1887383a 	mul	r3,r3,r2
811271fc:	00817db4 	movhi	r2,1526
81127200:	10b84004 	addi	r2,r2,-7936
81127204:	10c7203a 	divu	r3,r2,r3
81127208:	e0bfff17 	ldw	r2,-4(fp)
8112720c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81127210:	10bfffc4 	addi	r2,r2,-1
81127214:	103ffe1e 	bne	r2,zero,81127210 <__reset+0xfb107210>
81127218:	00000b06 	br	81127248 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8112721c:	e0fffd17 	ldw	r3,-12(fp)
81127220:	008003f4 	movhi	r2,15
81127224:	10909004 	addi	r2,r2,16960
81127228:	1887383a 	mul	r3,r3,r2
8112722c:	00817db4 	movhi	r2,1526
81127230:	10b84004 	addi	r2,r2,-7936
81127234:	10c7203a 	divu	r3,r2,r3
81127238:	e0bfff17 	ldw	r2,-4(fp)
8112723c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81127240:	10bfffc4 	addi	r2,r2,-1
81127244:	00bffe16 	blt	zero,r2,81127240 <__reset+0xfb107240>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81127248:	0005883a 	mov	r2,zero
}
8112724c:	e037883a 	mov	sp,fp
81127250:	df000017 	ldw	fp,0(sp)
81127254:	dec00104 	addi	sp,sp,4
81127258:	f800283a 	ret

8112725c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112725c:	defffe04 	addi	sp,sp,-8
81127260:	de00012e 	bgeu	sp,et,81127268 <alt_get_errno+0xc>
81127264:	003b68fa 	trap	3
81127268:	dfc00115 	stw	ra,4(sp)
8112726c:	df000015 	stw	fp,0(sp)
81127270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127274:	d0a01017 	ldw	r2,-32704(gp)
81127278:	10000326 	beq	r2,zero,81127288 <alt_get_errno+0x2c>
8112727c:	d0a01017 	ldw	r2,-32704(gp)
81127280:	103ee83a 	callr	r2
81127284:	00000106 	br	8112728c <alt_get_errno+0x30>
81127288:	d0a05f04 	addi	r2,gp,-32388
}
8112728c:	e037883a 	mov	sp,fp
81127290:	dfc00117 	ldw	ra,4(sp)
81127294:	df000017 	ldw	fp,0(sp)
81127298:	dec00204 	addi	sp,sp,8
8112729c:	f800283a 	ret

811272a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811272a0:	defffb04 	addi	sp,sp,-20
811272a4:	de00012e 	bgeu	sp,et,811272ac <close+0xc>
811272a8:	003b68fa 	trap	3
811272ac:	dfc00415 	stw	ra,16(sp)
811272b0:	df000315 	stw	fp,12(sp)
811272b4:	df000304 	addi	fp,sp,12
811272b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811272bc:	e0bfff17 	ldw	r2,-4(fp)
811272c0:	10000616 	blt	r2,zero,811272dc <close+0x3c>
811272c4:	e0bfff17 	ldw	r2,-4(fp)
811272c8:	10c00324 	muli	r3,r2,12
811272cc:	00a04534 	movhi	r2,33044
811272d0:	10bdda04 	addi	r2,r2,-2200
811272d4:	1885883a 	add	r2,r3,r2
811272d8:	00000106 	br	811272e0 <close+0x40>
811272dc:	0005883a 	mov	r2,zero
811272e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811272e4:	e0bffd17 	ldw	r2,-12(fp)
811272e8:	10001926 	beq	r2,zero,81127350 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811272ec:	e0bffd17 	ldw	r2,-12(fp)
811272f0:	10800017 	ldw	r2,0(r2)
811272f4:	10800417 	ldw	r2,16(r2)
811272f8:	10000626 	beq	r2,zero,81127314 <close+0x74>
811272fc:	e0bffd17 	ldw	r2,-12(fp)
81127300:	10800017 	ldw	r2,0(r2)
81127304:	10800417 	ldw	r2,16(r2)
81127308:	e13ffd17 	ldw	r4,-12(fp)
8112730c:	103ee83a 	callr	r2
81127310:	00000106 	br	81127318 <close+0x78>
81127314:	0005883a 	mov	r2,zero
81127318:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8112731c:	e13fff17 	ldw	r4,-4(fp)
81127320:	1127ce00 	call	81127ce0 <alt_release_fd>
    if (rval < 0)
81127324:	e0bffe17 	ldw	r2,-8(fp)
81127328:	1000070e 	bge	r2,zero,81127348 <close+0xa8>
    {
      ALT_ERRNO = -rval;
8112732c:	112725c0 	call	8112725c <alt_get_errno>
81127330:	1007883a 	mov	r3,r2
81127334:	e0bffe17 	ldw	r2,-8(fp)
81127338:	0085c83a 	sub	r2,zero,r2
8112733c:	18800015 	stw	r2,0(r3)
      return -1;
81127340:	00bfffc4 	movi	r2,-1
81127344:	00000706 	br	81127364 <close+0xc4>
    }
    return 0;
81127348:	0005883a 	mov	r2,zero
8112734c:	00000506 	br	81127364 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127350:	112725c0 	call	8112725c <alt_get_errno>
81127354:	1007883a 	mov	r3,r2
81127358:	00801444 	movi	r2,81
8112735c:	18800015 	stw	r2,0(r3)
    return -1;
81127360:	00bfffc4 	movi	r2,-1
  }
}
81127364:	e037883a 	mov	sp,fp
81127368:	dfc00117 	ldw	ra,4(sp)
8112736c:	df000017 	ldw	fp,0(sp)
81127370:	dec00204 	addi	sp,sp,8
81127374:	f800283a 	ret

81127378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81127378:	deffff04 	addi	sp,sp,-4
8112737c:	de00012e 	bgeu	sp,et,81127384 <alt_dcache_flush_all+0xc>
81127380:	003b68fa 	trap	3
81127384:	df000015 	stw	fp,0(sp)
81127388:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8112738c:	0001883a 	nop
81127390:	e037883a 	mov	sp,fp
81127394:	df000017 	ldw	fp,0(sp)
81127398:	dec00104 	addi	sp,sp,4
8112739c:	f800283a 	ret

811273a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811273a0:	defffc04 	addi	sp,sp,-16
811273a4:	de00012e 	bgeu	sp,et,811273ac <alt_dev_null_write+0xc>
811273a8:	003b68fa 	trap	3
811273ac:	df000315 	stw	fp,12(sp)
811273b0:	df000304 	addi	fp,sp,12
811273b4:	e13ffd15 	stw	r4,-12(fp)
811273b8:	e17ffe15 	stw	r5,-8(fp)
811273bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
811273c0:	e0bfff17 	ldw	r2,-4(fp)
}
811273c4:	e037883a 	mov	sp,fp
811273c8:	df000017 	ldw	fp,0(sp)
811273cc:	dec00104 	addi	sp,sp,4
811273d0:	f800283a 	ret

811273d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811273d4:	defffe04 	addi	sp,sp,-8
811273d8:	de00012e 	bgeu	sp,et,811273e0 <alt_get_errno+0xc>
811273dc:	003b68fa 	trap	3
811273e0:	dfc00115 	stw	ra,4(sp)
811273e4:	df000015 	stw	fp,0(sp)
811273e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811273ec:	d0a01017 	ldw	r2,-32704(gp)
811273f0:	10000326 	beq	r2,zero,81127400 <alt_get_errno+0x2c>
811273f4:	d0a01017 	ldw	r2,-32704(gp)
811273f8:	103ee83a 	callr	r2
811273fc:	00000106 	br	81127404 <alt_get_errno+0x30>
81127400:	d0a05f04 	addi	r2,gp,-32388
}
81127404:	e037883a 	mov	sp,fp
81127408:	dfc00117 	ldw	ra,4(sp)
8112740c:	df000017 	ldw	fp,0(sp)
81127410:	dec00204 	addi	sp,sp,8
81127414:	f800283a 	ret

81127418 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81127418:	defffb04 	addi	sp,sp,-20
8112741c:	de00012e 	bgeu	sp,et,81127424 <fstat+0xc>
81127420:	003b68fa 	trap	3
81127424:	dfc00415 	stw	ra,16(sp)
81127428:	df000315 	stw	fp,12(sp)
8112742c:	df000304 	addi	fp,sp,12
81127430:	e13ffe15 	stw	r4,-8(fp)
81127434:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127438:	e0bffe17 	ldw	r2,-8(fp)
8112743c:	10000616 	blt	r2,zero,81127458 <fstat+0x40>
81127440:	e0bffe17 	ldw	r2,-8(fp)
81127444:	10c00324 	muli	r3,r2,12
81127448:	00a04534 	movhi	r2,33044
8112744c:	10bdda04 	addi	r2,r2,-2200
81127450:	1885883a 	add	r2,r3,r2
81127454:	00000106 	br	8112745c <fstat+0x44>
81127458:	0005883a 	mov	r2,zero
8112745c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81127460:	e0bffd17 	ldw	r2,-12(fp)
81127464:	10001026 	beq	r2,zero,811274a8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81127468:	e0bffd17 	ldw	r2,-12(fp)
8112746c:	10800017 	ldw	r2,0(r2)
81127470:	10800817 	ldw	r2,32(r2)
81127474:	10000726 	beq	r2,zero,81127494 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81127478:	e0bffd17 	ldw	r2,-12(fp)
8112747c:	10800017 	ldw	r2,0(r2)
81127480:	10800817 	ldw	r2,32(r2)
81127484:	e17fff17 	ldw	r5,-4(fp)
81127488:	e13ffd17 	ldw	r4,-12(fp)
8112748c:	103ee83a 	callr	r2
81127490:	00000a06 	br	811274bc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81127494:	e0bfff17 	ldw	r2,-4(fp)
81127498:	00c80004 	movi	r3,8192
8112749c:	10c00115 	stw	r3,4(r2)
      return 0;
811274a0:	0005883a 	mov	r2,zero
811274a4:	00000506 	br	811274bc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811274a8:	11273d40 	call	811273d4 <alt_get_errno>
811274ac:	1007883a 	mov	r3,r2
811274b0:	00801444 	movi	r2,81
811274b4:	18800015 	stw	r2,0(r3)
    return -1;
811274b8:	00bfffc4 	movi	r2,-1
  }
}
811274bc:	e037883a 	mov	sp,fp
811274c0:	dfc00117 	ldw	ra,4(sp)
811274c4:	df000017 	ldw	fp,0(sp)
811274c8:	dec00204 	addi	sp,sp,8
811274cc:	f800283a 	ret

811274d0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
811274d0:	defff004 	addi	sp,sp,-64
811274d4:	de00012e 	bgeu	sp,et,811274dc <alt_irq_register+0xc>
811274d8:	003b68fa 	trap	3
811274dc:	df000f15 	stw	fp,60(sp)
811274e0:	df000f04 	addi	fp,sp,60
811274e4:	e13ffd15 	stw	r4,-12(fp)
811274e8:	e17ffe15 	stw	r5,-8(fp)
811274ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
811274f0:	00bffa84 	movi	r2,-22
811274f4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
811274f8:	e0bffd17 	ldw	r2,-12(fp)
811274fc:	10800828 	cmpgeui	r2,r2,32
81127500:	1000501e 	bne	r2,zero,81127644 <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127504:	0005303a 	rdctl	r2,status
81127508:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112750c:	e0fff617 	ldw	r3,-40(fp)
81127510:	00bfff84 	movi	r2,-2
81127514:	1884703a 	and	r2,r3,r2
81127518:	1001703a 	wrctl	status,r2
  
  return context;
8112751c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81127520:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
81127524:	00a04574 	movhi	r2,33045
81127528:	10920904 	addi	r2,r2,18468
8112752c:	e0fffd17 	ldw	r3,-12(fp)
81127530:	180690fa 	slli	r3,r3,3
81127534:	10c5883a 	add	r2,r2,r3
81127538:	e0ffff17 	ldw	r3,-4(fp)
8112753c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81127540:	00a04574 	movhi	r2,33045
81127544:	10920904 	addi	r2,r2,18468
81127548:	e0fffd17 	ldw	r3,-12(fp)
8112754c:	180690fa 	slli	r3,r3,3
81127550:	10c5883a 	add	r2,r2,r3
81127554:	10800104 	addi	r2,r2,4
81127558:	e0fffe17 	ldw	r3,-8(fp)
8112755c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81127560:	e0bfff17 	ldw	r2,-4(fp)
81127564:	10001926 	beq	r2,zero,811275cc <alt_irq_register+0xfc>
81127568:	e0bffd17 	ldw	r2,-12(fp)
8112756c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127570:	0005303a 	rdctl	r2,status
81127574:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127578:	e0fff717 	ldw	r3,-36(fp)
8112757c:	00bfff84 	movi	r2,-2
81127580:	1884703a 	and	r2,r3,r2
81127584:	1001703a 	wrctl	status,r2
  
  return context;
81127588:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8112758c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
81127590:	00c00044 	movi	r3,1
81127594:	e0bff217 	ldw	r2,-56(fp)
81127598:	1884983a 	sll	r2,r3,r2
8112759c:	1007883a 	mov	r3,r2
811275a0:	d0a06717 	ldw	r2,-32356(gp)
811275a4:	1884b03a 	or	r2,r3,r2
811275a8:	d0a06715 	stw	r2,-32356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811275ac:	d0a06717 	ldw	r2,-32356(gp)
811275b0:	100170fa 	wrctl	ienable,r2
811275b4:	e0bff817 	ldw	r2,-32(fp)
811275b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811275bc:	e0bff917 	ldw	r2,-28(fp)
811275c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811275c4:	0005883a 	mov	r2,zero
811275c8:	00001906 	br	81127630 <alt_irq_register+0x160>
811275cc:	e0bffd17 	ldw	r2,-12(fp)
811275d0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811275d4:	0005303a 	rdctl	r2,status
811275d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811275dc:	e0fffa17 	ldw	r3,-24(fp)
811275e0:	00bfff84 	movi	r2,-2
811275e4:	1884703a 	and	r2,r3,r2
811275e8:	1001703a 	wrctl	status,r2
  
  return context;
811275ec:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811275f0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
811275f4:	00c00044 	movi	r3,1
811275f8:	e0bff417 	ldw	r2,-48(fp)
811275fc:	1884983a 	sll	r2,r3,r2
81127600:	0084303a 	nor	r2,zero,r2
81127604:	1007883a 	mov	r3,r2
81127608:	d0a06717 	ldw	r2,-32356(gp)
8112760c:	1884703a 	and	r2,r3,r2
81127610:	d0a06715 	stw	r2,-32356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81127614:	d0a06717 	ldw	r2,-32356(gp)
81127618:	100170fa 	wrctl	ienable,r2
8112761c:	e0bffb17 	ldw	r2,-20(fp)
81127620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127624:	e0bffc17 	ldw	r2,-16(fp)
81127628:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8112762c:	0005883a 	mov	r2,zero
81127630:	e0bff115 	stw	r2,-60(fp)
81127634:	e0bff317 	ldw	r2,-52(fp)
81127638:	e0bff515 	stw	r2,-44(fp)
8112763c:	e0bff517 	ldw	r2,-44(fp)
81127640:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
81127644:	e0bff117 	ldw	r2,-60(fp)
}
81127648:	e037883a 	mov	sp,fp
8112764c:	df000017 	ldw	fp,0(sp)
81127650:	dec00104 	addi	sp,sp,4
81127654:	f800283a 	ret

81127658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127658:	defffe04 	addi	sp,sp,-8
8112765c:	de00012e 	bgeu	sp,et,81127664 <alt_get_errno+0xc>
81127660:	003b68fa 	trap	3
81127664:	dfc00115 	stw	ra,4(sp)
81127668:	df000015 	stw	fp,0(sp)
8112766c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127670:	d0a01017 	ldw	r2,-32704(gp)
81127674:	10000326 	beq	r2,zero,81127684 <alt_get_errno+0x2c>
81127678:	d0a01017 	ldw	r2,-32704(gp)
8112767c:	103ee83a 	callr	r2
81127680:	00000106 	br	81127688 <alt_get_errno+0x30>
81127684:	d0a05f04 	addi	r2,gp,-32388
}
81127688:	e037883a 	mov	sp,fp
8112768c:	dfc00117 	ldw	ra,4(sp)
81127690:	df000017 	ldw	fp,0(sp)
81127694:	dec00204 	addi	sp,sp,8
81127698:	f800283a 	ret

8112769c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8112769c:	deffed04 	addi	sp,sp,-76
811276a0:	de00012e 	bgeu	sp,et,811276a8 <isatty+0xc>
811276a4:	003b68fa 	trap	3
811276a8:	dfc01215 	stw	ra,72(sp)
811276ac:	df001115 	stw	fp,68(sp)
811276b0:	df001104 	addi	fp,sp,68
811276b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811276b8:	e0bfff17 	ldw	r2,-4(fp)
811276bc:	10000616 	blt	r2,zero,811276d8 <isatty+0x3c>
811276c0:	e0bfff17 	ldw	r2,-4(fp)
811276c4:	10c00324 	muli	r3,r2,12
811276c8:	00a04534 	movhi	r2,33044
811276cc:	10bdda04 	addi	r2,r2,-2200
811276d0:	1885883a 	add	r2,r3,r2
811276d4:	00000106 	br	811276dc <isatty+0x40>
811276d8:	0005883a 	mov	r2,zero
811276dc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
811276e0:	e0bfef17 	ldw	r2,-68(fp)
811276e4:	10000e26 	beq	r2,zero,81127720 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
811276e8:	e0bfef17 	ldw	r2,-68(fp)
811276ec:	10800017 	ldw	r2,0(r2)
811276f0:	10800817 	ldw	r2,32(r2)
811276f4:	1000021e 	bne	r2,zero,81127700 <isatty+0x64>
    {
      return 1;
811276f8:	00800044 	movi	r2,1
811276fc:	00000d06 	br	81127734 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81127700:	e0bff004 	addi	r2,fp,-64
81127704:	100b883a 	mov	r5,r2
81127708:	e13fff17 	ldw	r4,-4(fp)
8112770c:	11274180 	call	81127418 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81127710:	e0bff117 	ldw	r2,-60(fp)
81127714:	10880020 	cmpeqi	r2,r2,8192
81127718:	10803fcc 	andi	r2,r2,255
8112771c:	00000506 	br	81127734 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127720:	11276580 	call	81127658 <alt_get_errno>
81127724:	1007883a 	mov	r3,r2
81127728:	00801444 	movi	r2,81
8112772c:	18800015 	stw	r2,0(r3)
    return 0;
81127730:	0005883a 	mov	r2,zero
  }
}
81127734:	e037883a 	mov	sp,fp
81127738:	dfc00117 	ldw	ra,4(sp)
8112773c:	df000017 	ldw	fp,0(sp)
81127740:	dec00204 	addi	sp,sp,8
81127744:	f800283a 	ret

81127748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127748:	defffe04 	addi	sp,sp,-8
8112774c:	de00012e 	bgeu	sp,et,81127754 <alt_get_errno+0xc>
81127750:	003b68fa 	trap	3
81127754:	dfc00115 	stw	ra,4(sp)
81127758:	df000015 	stw	fp,0(sp)
8112775c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127760:	d0a01017 	ldw	r2,-32704(gp)
81127764:	10000326 	beq	r2,zero,81127774 <alt_get_errno+0x2c>
81127768:	d0a01017 	ldw	r2,-32704(gp)
8112776c:	103ee83a 	callr	r2
81127770:	00000106 	br	81127778 <alt_get_errno+0x30>
81127774:	d0a05f04 	addi	r2,gp,-32388
}
81127778:	e037883a 	mov	sp,fp
8112777c:	dfc00117 	ldw	ra,4(sp)
81127780:	df000017 	ldw	fp,0(sp)
81127784:	dec00204 	addi	sp,sp,8
81127788:	f800283a 	ret

8112778c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8112778c:	defff904 	addi	sp,sp,-28
81127790:	de00012e 	bgeu	sp,et,81127798 <lseek+0xc>
81127794:	003b68fa 	trap	3
81127798:	dfc00615 	stw	ra,24(sp)
8112779c:	df000515 	stw	fp,20(sp)
811277a0:	df000504 	addi	fp,sp,20
811277a4:	e13ffd15 	stw	r4,-12(fp)
811277a8:	e17ffe15 	stw	r5,-8(fp)
811277ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811277b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811277b4:	e0bffd17 	ldw	r2,-12(fp)
811277b8:	10000616 	blt	r2,zero,811277d4 <lseek+0x48>
811277bc:	e0bffd17 	ldw	r2,-12(fp)
811277c0:	10c00324 	muli	r3,r2,12
811277c4:	00a04534 	movhi	r2,33044
811277c8:	10bdda04 	addi	r2,r2,-2200
811277cc:	1885883a 	add	r2,r3,r2
811277d0:	00000106 	br	811277d8 <lseek+0x4c>
811277d4:	0005883a 	mov	r2,zero
811277d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
811277dc:	e0bffc17 	ldw	r2,-16(fp)
811277e0:	10001026 	beq	r2,zero,81127824 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
811277e4:	e0bffc17 	ldw	r2,-16(fp)
811277e8:	10800017 	ldw	r2,0(r2)
811277ec:	10800717 	ldw	r2,28(r2)
811277f0:	10000926 	beq	r2,zero,81127818 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
811277f4:	e0bffc17 	ldw	r2,-16(fp)
811277f8:	10800017 	ldw	r2,0(r2)
811277fc:	10800717 	ldw	r2,28(r2)
81127800:	e1bfff17 	ldw	r6,-4(fp)
81127804:	e17ffe17 	ldw	r5,-8(fp)
81127808:	e13ffc17 	ldw	r4,-16(fp)
8112780c:	103ee83a 	callr	r2
81127810:	e0bffb15 	stw	r2,-20(fp)
81127814:	00000506 	br	8112782c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81127818:	00bfde84 	movi	r2,-134
8112781c:	e0bffb15 	stw	r2,-20(fp)
81127820:	00000206 	br	8112782c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
81127824:	00bfebc4 	movi	r2,-81
81127828:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8112782c:	e0bffb17 	ldw	r2,-20(fp)
81127830:	1000070e 	bge	r2,zero,81127850 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
81127834:	11277480 	call	81127748 <alt_get_errno>
81127838:	1007883a 	mov	r3,r2
8112783c:	e0bffb17 	ldw	r2,-20(fp)
81127840:	0085c83a 	sub	r2,zero,r2
81127844:	18800015 	stw	r2,0(r3)
    rc = -1;
81127848:	00bfffc4 	movi	r2,-1
8112784c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81127850:	e0bffb17 	ldw	r2,-20(fp)
}
81127854:	e037883a 	mov	sp,fp
81127858:	dfc00117 	ldw	ra,4(sp)
8112785c:	df000017 	ldw	fp,0(sp)
81127860:	dec00204 	addi	sp,sp,8
81127864:	f800283a 	ret

81127868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81127868:	defff904 	addi	sp,sp,-28
8112786c:	de00012e 	bgeu	sp,et,81127874 <alt_main+0xc>
81127870:	003b68fa 	trap	3
81127874:	dfc00615 	stw	ra,24(sp)
81127878:	df000515 	stw	fp,20(sp)
8112787c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81127880:	0009883a 	mov	r4,zero
81127884:	11323a00 	call	811323a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81127888:	1128e340 	call	81128e34 <OSInit>
8112788c:	01000044 	movi	r4,1
81127890:	112eb500 	call	8112eb50 <OSSemCreate>
81127894:	d0a06e15 	stw	r2,-32328(gp)
81127898:	01000044 	movi	r4,1
8112789c:	112eb500 	call	8112eb50 <OSSemCreate>
811278a0:	d0a07015 	stw	r2,-32320(gp)
811278a4:	d0a06604 	addi	r2,gp,-32360
811278a8:	e0bffc15 	stw	r2,-16(fp)
811278ac:	00800044 	movi	r2,1
811278b0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
811278b4:	e0bffd0b 	ldhu	r2,-12(fp)
811278b8:	1009883a 	mov	r4,r2
811278bc:	112eb500 	call	8112eb50 <OSSemCreate>
811278c0:	1007883a 	mov	r3,r2
811278c4:	e0bffc17 	ldw	r2,-16(fp)
811278c8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
811278cc:	11323e00 	call	811323e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
811278d0:	01a04534 	movhi	r6,33044
811278d4:	31baa704 	addi	r6,r6,-5476
811278d8:	01604534 	movhi	r5,33044
811278dc:	297aac04 	addi	r5,r5,-5456
811278e0:	01204534 	movhi	r4,33044
811278e4:	213aac04 	addi	r4,r4,-5456
811278e8:	113ad0c0 	call	8113ad0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
811278ec:	113a61c0 	call	8113a61c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
811278f0:	01204534 	movhi	r4,33044
811278f4:	2129a104 	addi	r4,r4,-22908
811278f8:	113b4c00 	call	8113b4c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811278fc:	d0a06817 	ldw	r2,-32352(gp)
81127900:	d0e06917 	ldw	r3,-32348(gp)
81127904:	d1206a17 	ldw	r4,-32344(gp)
81127908:	200d883a 	mov	r6,r4
8112790c:	180b883a 	mov	r5,r3
81127910:	1009883a 	mov	r4,r2
81127914:	110b8700 	call	8110b870 <main>
81127918:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
8112791c:	01000044 	movi	r4,1
81127920:	11272a00 	call	811272a0 <close>
  exit (result);
81127924:	e13ffb17 	ldw	r4,-20(fp)
81127928:	113b4d40 	call	8113b4d4 <exit>

8112792c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112792c:	defffe04 	addi	sp,sp,-8
81127930:	de00012e 	bgeu	sp,et,81127938 <alt_get_errno+0xc>
81127934:	003b68fa 	trap	3
81127938:	dfc00115 	stw	ra,4(sp)
8112793c:	df000015 	stw	fp,0(sp)
81127940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127944:	d0a01017 	ldw	r2,-32704(gp)
81127948:	10000326 	beq	r2,zero,81127958 <alt_get_errno+0x2c>
8112794c:	d0a01017 	ldw	r2,-32704(gp)
81127950:	103ee83a 	callr	r2
81127954:	00000106 	br	8112795c <alt_get_errno+0x30>
81127958:	d0a05f04 	addi	r2,gp,-32388
}
8112795c:	e037883a 	mov	sp,fp
81127960:	dfc00117 	ldw	ra,4(sp)
81127964:	df000017 	ldw	fp,0(sp)
81127968:	dec00204 	addi	sp,sp,8
8112796c:	f800283a 	ret

81127970 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81127970:	defffd04 	addi	sp,sp,-12
81127974:	de00012e 	bgeu	sp,et,8112797c <alt_file_locked+0xc>
81127978:	003b68fa 	trap	3
8112797c:	df000215 	stw	fp,8(sp)
81127980:	df000204 	addi	fp,sp,8
81127984:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81127988:	e0bfff17 	ldw	r2,-4(fp)
8112798c:	10800217 	ldw	r2,8(r2)
81127990:	10d00034 	orhi	r3,r2,16384
81127994:	e0bfff17 	ldw	r2,-4(fp)
81127998:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8112799c:	e03ffe15 	stw	zero,-8(fp)
811279a0:	00001d06 	br	81127a18 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811279a4:	00a04534 	movhi	r2,33044
811279a8:	10bdda04 	addi	r2,r2,-2200
811279ac:	e0fffe17 	ldw	r3,-8(fp)
811279b0:	18c00324 	muli	r3,r3,12
811279b4:	10c5883a 	add	r2,r2,r3
811279b8:	10c00017 	ldw	r3,0(r2)
811279bc:	e0bfff17 	ldw	r2,-4(fp)
811279c0:	10800017 	ldw	r2,0(r2)
811279c4:	1880111e 	bne	r3,r2,81127a0c <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811279c8:	00a04534 	movhi	r2,33044
811279cc:	10bdda04 	addi	r2,r2,-2200
811279d0:	e0fffe17 	ldw	r3,-8(fp)
811279d4:	18c00324 	muli	r3,r3,12
811279d8:	10c5883a 	add	r2,r2,r3
811279dc:	10800204 	addi	r2,r2,8
811279e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811279e4:	1000090e 	bge	r2,zero,81127a0c <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
811279e8:	e0bffe17 	ldw	r2,-8(fp)
811279ec:	10c00324 	muli	r3,r2,12
811279f0:	00a04534 	movhi	r2,33044
811279f4:	10bdda04 	addi	r2,r2,-2200
811279f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811279fc:	e0bfff17 	ldw	r2,-4(fp)
81127a00:	18800226 	beq	r3,r2,81127a0c <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81127a04:	00bffcc4 	movi	r2,-13
81127a08:	00000806 	br	81127a2c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81127a0c:	e0bffe17 	ldw	r2,-8(fp)
81127a10:	10800044 	addi	r2,r2,1
81127a14:	e0bffe15 	stw	r2,-8(fp)
81127a18:	d0a00f17 	ldw	r2,-32708(gp)
81127a1c:	1007883a 	mov	r3,r2
81127a20:	e0bffe17 	ldw	r2,-8(fp)
81127a24:	18bfdf2e 	bgeu	r3,r2,811279a4 <__reset+0xfb1079a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81127a28:	0005883a 	mov	r2,zero
}
81127a2c:	e037883a 	mov	sp,fp
81127a30:	df000017 	ldw	fp,0(sp)
81127a34:	dec00104 	addi	sp,sp,4
81127a38:	f800283a 	ret

81127a3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81127a3c:	defff604 	addi	sp,sp,-40
81127a40:	de00012e 	bgeu	sp,et,81127a48 <open+0xc>
81127a44:	003b68fa 	trap	3
81127a48:	dfc00915 	stw	ra,36(sp)
81127a4c:	df000815 	stw	fp,32(sp)
81127a50:	df000804 	addi	fp,sp,32
81127a54:	e13ffd15 	stw	r4,-12(fp)
81127a58:	e17ffe15 	stw	r5,-8(fp)
81127a5c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81127a60:	00bfffc4 	movi	r2,-1
81127a64:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81127a68:	00bffb44 	movi	r2,-19
81127a6c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81127a70:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81127a74:	d1600d04 	addi	r5,gp,-32716
81127a78:	e13ffd17 	ldw	r4,-12(fp)
81127a7c:	113a6ec0 	call	8113a6ec <alt_find_dev>
81127a80:	e0bff815 	stw	r2,-32(fp)
81127a84:	e0bff817 	ldw	r2,-32(fp)
81127a88:	1000051e 	bne	r2,zero,81127aa0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81127a8c:	e13ffd17 	ldw	r4,-12(fp)
81127a90:	113a7840 	call	8113a784 <alt_find_file>
81127a94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81127a98:	00800044 	movi	r2,1
81127a9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81127aa0:	e0bff817 	ldw	r2,-32(fp)
81127aa4:	10002926 	beq	r2,zero,81127b4c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81127aa8:	e13ff817 	ldw	r4,-32(fp)
81127aac:	113a8940 	call	8113a894 <alt_get_fd>
81127ab0:	e0bff915 	stw	r2,-28(fp)
81127ab4:	e0bff917 	ldw	r2,-28(fp)
81127ab8:	1000030e 	bge	r2,zero,81127ac8 <open+0x8c>
    {
      status = index;
81127abc:	e0bff917 	ldw	r2,-28(fp)
81127ac0:	e0bffa15 	stw	r2,-24(fp)
81127ac4:	00002306 	br	81127b54 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81127ac8:	e0bff917 	ldw	r2,-28(fp)
81127acc:	10c00324 	muli	r3,r2,12
81127ad0:	00a04534 	movhi	r2,33044
81127ad4:	10bdda04 	addi	r2,r2,-2200
81127ad8:	1885883a 	add	r2,r3,r2
81127adc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81127ae0:	e0fffe17 	ldw	r3,-8(fp)
81127ae4:	00900034 	movhi	r2,16384
81127ae8:	10bfffc4 	addi	r2,r2,-1
81127aec:	1886703a 	and	r3,r3,r2
81127af0:	e0bffc17 	ldw	r2,-16(fp)
81127af4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81127af8:	e0bffb17 	ldw	r2,-20(fp)
81127afc:	1000051e 	bne	r2,zero,81127b14 <open+0xd8>
81127b00:	e13ffc17 	ldw	r4,-16(fp)
81127b04:	11279700 	call	81127970 <alt_file_locked>
81127b08:	e0bffa15 	stw	r2,-24(fp)
81127b0c:	e0bffa17 	ldw	r2,-24(fp)
81127b10:	10001016 	blt	r2,zero,81127b54 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81127b14:	e0bff817 	ldw	r2,-32(fp)
81127b18:	10800317 	ldw	r2,12(r2)
81127b1c:	10000826 	beq	r2,zero,81127b40 <open+0x104>
81127b20:	e0bff817 	ldw	r2,-32(fp)
81127b24:	10800317 	ldw	r2,12(r2)
81127b28:	e1ffff17 	ldw	r7,-4(fp)
81127b2c:	e1bffe17 	ldw	r6,-8(fp)
81127b30:	e17ffd17 	ldw	r5,-12(fp)
81127b34:	e13ffc17 	ldw	r4,-16(fp)
81127b38:	103ee83a 	callr	r2
81127b3c:	00000106 	br	81127b44 <open+0x108>
81127b40:	0005883a 	mov	r2,zero
81127b44:	e0bffa15 	stw	r2,-24(fp)
81127b48:	00000206 	br	81127b54 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81127b4c:	00bffb44 	movi	r2,-19
81127b50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81127b54:	e0bffa17 	ldw	r2,-24(fp)
81127b58:	1000090e 	bge	r2,zero,81127b80 <open+0x144>
  {
    alt_release_fd (index);  
81127b5c:	e13ff917 	ldw	r4,-28(fp)
81127b60:	1127ce00 	call	81127ce0 <alt_release_fd>
    ALT_ERRNO = -status;
81127b64:	112792c0 	call	8112792c <alt_get_errno>
81127b68:	1007883a 	mov	r3,r2
81127b6c:	e0bffa17 	ldw	r2,-24(fp)
81127b70:	0085c83a 	sub	r2,zero,r2
81127b74:	18800015 	stw	r2,0(r3)
    return -1;
81127b78:	00bfffc4 	movi	r2,-1
81127b7c:	00000106 	br	81127b84 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
81127b80:	e0bff917 	ldw	r2,-28(fp)
}
81127b84:	e037883a 	mov	sp,fp
81127b88:	dfc00117 	ldw	ra,4(sp)
81127b8c:	df000017 	ldw	fp,0(sp)
81127b90:	dec00204 	addi	sp,sp,8
81127b94:	f800283a 	ret

81127b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127b98:	defffe04 	addi	sp,sp,-8
81127b9c:	de00012e 	bgeu	sp,et,81127ba4 <alt_get_errno+0xc>
81127ba0:	003b68fa 	trap	3
81127ba4:	dfc00115 	stw	ra,4(sp)
81127ba8:	df000015 	stw	fp,0(sp)
81127bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127bb0:	d0a01017 	ldw	r2,-32704(gp)
81127bb4:	10000326 	beq	r2,zero,81127bc4 <alt_get_errno+0x2c>
81127bb8:	d0a01017 	ldw	r2,-32704(gp)
81127bbc:	103ee83a 	callr	r2
81127bc0:	00000106 	br	81127bc8 <alt_get_errno+0x30>
81127bc4:	d0a05f04 	addi	r2,gp,-32388
}
81127bc8:	e037883a 	mov	sp,fp
81127bcc:	dfc00117 	ldw	ra,4(sp)
81127bd0:	df000017 	ldw	fp,0(sp)
81127bd4:	dec00204 	addi	sp,sp,8
81127bd8:	f800283a 	ret

81127bdc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81127bdc:	defff904 	addi	sp,sp,-28
81127be0:	de00012e 	bgeu	sp,et,81127be8 <read+0xc>
81127be4:	003b68fa 	trap	3
81127be8:	dfc00615 	stw	ra,24(sp)
81127bec:	df000515 	stw	fp,20(sp)
81127bf0:	df000504 	addi	fp,sp,20
81127bf4:	e13ffd15 	stw	r4,-12(fp)
81127bf8:	e17ffe15 	stw	r5,-8(fp)
81127bfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127c00:	e0bffd17 	ldw	r2,-12(fp)
81127c04:	10000616 	blt	r2,zero,81127c20 <read+0x44>
81127c08:	e0bffd17 	ldw	r2,-12(fp)
81127c0c:	10c00324 	muli	r3,r2,12
81127c10:	00a04534 	movhi	r2,33044
81127c14:	10bdda04 	addi	r2,r2,-2200
81127c18:	1885883a 	add	r2,r3,r2
81127c1c:	00000106 	br	81127c24 <read+0x48>
81127c20:	0005883a 	mov	r2,zero
81127c24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81127c28:	e0bffb17 	ldw	r2,-20(fp)
81127c2c:	10002226 	beq	r2,zero,81127cb8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81127c30:	e0bffb17 	ldw	r2,-20(fp)
81127c34:	10800217 	ldw	r2,8(r2)
81127c38:	108000cc 	andi	r2,r2,3
81127c3c:	10800060 	cmpeqi	r2,r2,1
81127c40:	1000181e 	bne	r2,zero,81127ca4 <read+0xc8>
        (fd->dev->read))
81127c44:	e0bffb17 	ldw	r2,-20(fp)
81127c48:	10800017 	ldw	r2,0(r2)
81127c4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81127c50:	10001426 	beq	r2,zero,81127ca4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81127c54:	e0bffb17 	ldw	r2,-20(fp)
81127c58:	10800017 	ldw	r2,0(r2)
81127c5c:	10800517 	ldw	r2,20(r2)
81127c60:	e0ffff17 	ldw	r3,-4(fp)
81127c64:	180d883a 	mov	r6,r3
81127c68:	e17ffe17 	ldw	r5,-8(fp)
81127c6c:	e13ffb17 	ldw	r4,-20(fp)
81127c70:	103ee83a 	callr	r2
81127c74:	e0bffc15 	stw	r2,-16(fp)
81127c78:	e0bffc17 	ldw	r2,-16(fp)
81127c7c:	1000070e 	bge	r2,zero,81127c9c <read+0xc0>
        {
          ALT_ERRNO = -rval;
81127c80:	1127b980 	call	81127b98 <alt_get_errno>
81127c84:	1007883a 	mov	r3,r2
81127c88:	e0bffc17 	ldw	r2,-16(fp)
81127c8c:	0085c83a 	sub	r2,zero,r2
81127c90:	18800015 	stw	r2,0(r3)
          return -1;
81127c94:	00bfffc4 	movi	r2,-1
81127c98:	00000c06 	br	81127ccc <read+0xf0>
        }
        return rval;
81127c9c:	e0bffc17 	ldw	r2,-16(fp)
81127ca0:	00000a06 	br	81127ccc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81127ca4:	1127b980 	call	81127b98 <alt_get_errno>
81127ca8:	1007883a 	mov	r3,r2
81127cac:	00800344 	movi	r2,13
81127cb0:	18800015 	stw	r2,0(r3)
81127cb4:	00000406 	br	81127cc8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81127cb8:	1127b980 	call	81127b98 <alt_get_errno>
81127cbc:	1007883a 	mov	r3,r2
81127cc0:	00801444 	movi	r2,81
81127cc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
81127cc8:	00bfffc4 	movi	r2,-1
}
81127ccc:	e037883a 	mov	sp,fp
81127cd0:	dfc00117 	ldw	ra,4(sp)
81127cd4:	df000017 	ldw	fp,0(sp)
81127cd8:	dec00204 	addi	sp,sp,8
81127cdc:	f800283a 	ret

81127ce0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81127ce0:	defffe04 	addi	sp,sp,-8
81127ce4:	de00012e 	bgeu	sp,et,81127cec <alt_release_fd+0xc>
81127ce8:	003b68fa 	trap	3
81127cec:	df000115 	stw	fp,4(sp)
81127cf0:	df000104 	addi	fp,sp,4
81127cf4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81127cf8:	e0bfff17 	ldw	r2,-4(fp)
81127cfc:	108000d0 	cmplti	r2,r2,3
81127d00:	10000d1e 	bne	r2,zero,81127d38 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
81127d04:	00a04534 	movhi	r2,33044
81127d08:	10bdda04 	addi	r2,r2,-2200
81127d0c:	e0ffff17 	ldw	r3,-4(fp)
81127d10:	18c00324 	muli	r3,r3,12
81127d14:	10c5883a 	add	r2,r2,r3
81127d18:	10800204 	addi	r2,r2,8
81127d1c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81127d20:	00a04534 	movhi	r2,33044
81127d24:	10bdda04 	addi	r2,r2,-2200
81127d28:	e0ffff17 	ldw	r3,-4(fp)
81127d2c:	18c00324 	muli	r3,r3,12
81127d30:	10c5883a 	add	r2,r2,r3
81127d34:	10000015 	stw	zero,0(r2)
  }
}
81127d38:	0001883a 	nop
81127d3c:	e037883a 	mov	sp,fp
81127d40:	df000017 	ldw	fp,0(sp)
81127d44:	dec00104 	addi	sp,sp,4
81127d48:	f800283a 	ret

81127d4c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81127d4c:	defff604 	addi	sp,sp,-40
81127d50:	de00012e 	bgeu	sp,et,81127d58 <sbrk+0xc>
81127d54:	003b68fa 	trap	3
81127d58:	df000915 	stw	fp,36(sp)
81127d5c:	df000904 	addi	fp,sp,36
81127d60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127d64:	0005303a 	rdctl	r2,status
81127d68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127d6c:	e0fffe17 	ldw	r3,-8(fp)
81127d70:	00bfff84 	movi	r2,-2
81127d74:	1884703a 	and	r2,r3,r2
81127d78:	1001703a 	wrctl	status,r2
  
  return context;
81127d7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81127d80:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81127d84:	d0a01217 	ldw	r2,-32696(gp)
81127d88:	10c000c4 	addi	r3,r2,3
81127d8c:	00bfff04 	movi	r2,-4
81127d90:	1884703a 	and	r2,r3,r2
81127d94:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81127d98:	d0e01217 	ldw	r3,-32696(gp)
81127d9c:	e0bfff17 	ldw	r2,-4(fp)
81127da0:	1887883a 	add	r3,r3,r2
81127da4:	00a04834 	movhi	r2,33056
81127da8:	10a80004 	addi	r2,r2,-24576
81127dac:	10c0062e 	bgeu	r2,r3,81127dc8 <sbrk+0x7c>
81127db0:	e0bff817 	ldw	r2,-32(fp)
81127db4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127db8:	e0bff717 	ldw	r2,-36(fp)
81127dbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81127dc0:	00bfffc4 	movi	r2,-1
81127dc4:	00001c06 	br	81127e38 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
81127dc8:	d0a01217 	ldw	r2,-32696(gp)
81127dcc:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
81127dd0:	d0e01217 	ldw	r3,-32696(gp)
81127dd4:	e0bfff17 	ldw	r2,-4(fp)
81127dd8:	1885883a 	add	r2,r3,r2
81127ddc:	d0a01215 	stw	r2,-32696(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
81127de0:	c005883a 	mov	r2,et
81127de4:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81127de8:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
81127dec:	e0bffa17 	ldw	r2,-24(fp)
81127df0:	18800c1e 	bne	r3,r2,81127e24 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
81127df4:	d805883a 	mov	r2,sp
81127df8:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
81127dfc:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81127e00:	d0e01217 	ldw	r3,-32696(gp)
81127e04:	18800136 	bltu	r3,r2,81127e0c <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81127e08:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
81127e0c:	d0a01217 	ldw	r2,-32696(gp)
81127e10:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
81127e14:	e0bffc17 	ldw	r2,-16(fp)
81127e18:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
81127e1c:	e0bffc17 	ldw	r2,-16(fp)
81127e20:	1031883a 	mov	et,r2
81127e24:	e0bff817 	ldw	r2,-32(fp)
81127e28:	e0bffd15 	stw	r2,-12(fp)
81127e2c:	e0bffd17 	ldw	r2,-12(fp)
81127e30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81127e34:	e0bffa17 	ldw	r2,-24(fp)
} 
81127e38:	e037883a 	mov	sp,fp
81127e3c:	df000017 	ldw	fp,0(sp)
81127e40:	dec00104 	addi	sp,sp,4
81127e44:	f800283a 	ret

81127e48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81127e48:	defffa04 	addi	sp,sp,-24
81127e4c:	de00012e 	bgeu	sp,et,81127e54 <alt_alarm_stop+0xc>
81127e50:	003b68fa 	trap	3
81127e54:	df000515 	stw	fp,20(sp)
81127e58:	df000504 	addi	fp,sp,20
81127e5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127e60:	0005303a 	rdctl	r2,status
81127e64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127e68:	e0fffc17 	ldw	r3,-16(fp)
81127e6c:	00bfff84 	movi	r2,-2
81127e70:	1884703a 	and	r2,r3,r2
81127e74:	1001703a 	wrctl	status,r2
  
  return context;
81127e78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81127e7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81127e80:	e0bfff17 	ldw	r2,-4(fp)
81127e84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81127e88:	e0bffd17 	ldw	r2,-12(fp)
81127e8c:	10800017 	ldw	r2,0(r2)
81127e90:	e0fffd17 	ldw	r3,-12(fp)
81127e94:	18c00117 	ldw	r3,4(r3)
81127e98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81127e9c:	e0bffd17 	ldw	r2,-12(fp)
81127ea0:	10800117 	ldw	r2,4(r2)
81127ea4:	e0fffd17 	ldw	r3,-12(fp)
81127ea8:	18c00017 	ldw	r3,0(r3)
81127eac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81127eb0:	e0bffd17 	ldw	r2,-12(fp)
81127eb4:	e0fffd17 	ldw	r3,-12(fp)
81127eb8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81127ebc:	e0bffd17 	ldw	r2,-12(fp)
81127ec0:	e0fffd17 	ldw	r3,-12(fp)
81127ec4:	10c00015 	stw	r3,0(r2)
81127ec8:	e0bffb17 	ldw	r2,-20(fp)
81127ecc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127ed0:	e0bffe17 	ldw	r2,-8(fp)
81127ed4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81127ed8:	0001883a 	nop
81127edc:	e037883a 	mov	sp,fp
81127ee0:	df000017 	ldw	fp,0(sp)
81127ee4:	dec00104 	addi	sp,sp,4
81127ee8:	f800283a 	ret

81127eec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81127eec:	defffb04 	addi	sp,sp,-20
81127ef0:	de00012e 	bgeu	sp,et,81127ef8 <alt_tick+0xc>
81127ef4:	003b68fa 	trap	3
81127ef8:	dfc00415 	stw	ra,16(sp)
81127efc:	df000315 	stw	fp,12(sp)
81127f00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81127f04:	d0a01317 	ldw	r2,-32692(gp)
81127f08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81127f0c:	d0a06c17 	ldw	r2,-32336(gp)
81127f10:	10800044 	addi	r2,r2,1
81127f14:	d0a06c15 	stw	r2,-32336(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81127f18:	00002e06 	br	81127fd4 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
81127f1c:	e0bffd17 	ldw	r2,-12(fp)
81127f20:	10800017 	ldw	r2,0(r2)
81127f24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81127f28:	e0bffd17 	ldw	r2,-12(fp)
81127f2c:	10800403 	ldbu	r2,16(r2)
81127f30:	10803fcc 	andi	r2,r2,255
81127f34:	10000426 	beq	r2,zero,81127f48 <alt_tick+0x5c>
81127f38:	d0a06c17 	ldw	r2,-32336(gp)
81127f3c:	1000021e 	bne	r2,zero,81127f48 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81127f40:	e0bffd17 	ldw	r2,-12(fp)
81127f44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81127f48:	e0bffd17 	ldw	r2,-12(fp)
81127f4c:	10800217 	ldw	r2,8(r2)
81127f50:	d0e06c17 	ldw	r3,-32336(gp)
81127f54:	18801d36 	bltu	r3,r2,81127fcc <alt_tick+0xe0>
81127f58:	e0bffd17 	ldw	r2,-12(fp)
81127f5c:	10800403 	ldbu	r2,16(r2)
81127f60:	10803fcc 	andi	r2,r2,255
81127f64:	1000191e 	bne	r2,zero,81127fcc <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81127f68:	e0bffd17 	ldw	r2,-12(fp)
81127f6c:	10800317 	ldw	r2,12(r2)
81127f70:	e0fffd17 	ldw	r3,-12(fp)
81127f74:	18c00517 	ldw	r3,20(r3)
81127f78:	1809883a 	mov	r4,r3
81127f7c:	103ee83a 	callr	r2
81127f80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81127f84:	e0bfff17 	ldw	r2,-4(fp)
81127f88:	1000031e 	bne	r2,zero,81127f98 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
81127f8c:	e13ffd17 	ldw	r4,-12(fp)
81127f90:	1127e480 	call	81127e48 <alt_alarm_stop>
81127f94:	00000d06 	br	81127fcc <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
81127f98:	e0bffd17 	ldw	r2,-12(fp)
81127f9c:	10c00217 	ldw	r3,8(r2)
81127fa0:	e0bfff17 	ldw	r2,-4(fp)
81127fa4:	1887883a 	add	r3,r3,r2
81127fa8:	e0bffd17 	ldw	r2,-12(fp)
81127fac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81127fb0:	e0bffd17 	ldw	r2,-12(fp)
81127fb4:	10c00217 	ldw	r3,8(r2)
81127fb8:	d0a06c17 	ldw	r2,-32336(gp)
81127fbc:	1880032e 	bgeu	r3,r2,81127fcc <alt_tick+0xe0>
        {
          alarm->rollover = 1;
81127fc0:	e0bffd17 	ldw	r2,-12(fp)
81127fc4:	00c00044 	movi	r3,1
81127fc8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81127fcc:	e0bffe17 	ldw	r2,-8(fp)
81127fd0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81127fd4:	e0fffd17 	ldw	r3,-12(fp)
81127fd8:	d0a01304 	addi	r2,gp,-32692
81127fdc:	18bfcf1e 	bne	r3,r2,81127f1c <__reset+0xfb107f1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81127fe0:	11292940 	call	81129294 <OSTimeTick>
}
81127fe4:	0001883a 	nop
81127fe8:	e037883a 	mov	sp,fp
81127fec:	dfc00117 	ldw	ra,4(sp)
81127ff0:	df000017 	ldw	fp,0(sp)
81127ff4:	dec00204 	addi	sp,sp,8
81127ff8:	f800283a 	ret

81127ffc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81127ffc:	defffb04 	addi	sp,sp,-20
81128000:	de00012e 	bgeu	sp,et,81128008 <usleep+0xc>
81128004:	003b68fa 	trap	3
81128008:	dfc00415 	stw	ra,16(sp)
8112800c:	df000315 	stw	fp,12(sp)
81128010:	df000304 	addi	fp,sp,12
81128014:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81128018:	d0a07403 	ldbu	r2,-32304(gp)
8112801c:	10803fcc 	andi	r2,r2,255
81128020:	1000031e 	bne	r2,zero,81128030 <usleep+0x34>
  {
    return alt_busy_sleep (us);
81128024:	e13fff17 	ldw	r4,-4(fp)
81128028:	112712c0 	call	8112712c <alt_busy_sleep>
8112802c:	00003d06 	br	81128124 <usleep+0x128>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81128030:	d0a06b17 	ldw	r2,-32340(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81128034:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81128038:	e0ffff17 	ldw	r3,-4(fp)
8112803c:	0090c734 	movhi	r2,17180
81128040:	10b7a0c4 	addi	r2,r2,-8573
81128044:	1888383a 	mulxuu	r4,r3,r2
81128048:	1885383a 	mul	r2,r3,r2
8112804c:	1013883a 	mov	r9,r2
81128050:	2015883a 	mov	r10,r4
81128054:	5006d4ba 	srli	r3,r10,18
81128058:	e0bffe17 	ldw	r2,-8(fp)
8112805c:	1893383a 	mul	r9,r3,r2
81128060:	e0ffff17 	ldw	r3,-4(fp)
81128064:	0090c734 	movhi	r2,17180
81128068:	10b7a0c4 	addi	r2,r2,-8573
8112806c:	1888383a 	mulxuu	r4,r3,r2
81128070:	1885383a 	mul	r2,r3,r2
81128074:	100f883a 	mov	r7,r2
81128078:	2011883a 	mov	r8,r4
8112807c:	4004d4ba 	srli	r2,r8,18
81128080:	010003f4 	movhi	r4,15
81128084:	21109004 	addi	r4,r4,16960
81128088:	1105383a 	mul	r2,r2,r4
8112808c:	1885c83a 	sub	r2,r3,r2
81128090:	e0fffe17 	ldw	r3,-8(fp)
81128094:	10c7383a 	mul	r3,r2,r3
81128098:	0090c734 	movhi	r2,17180
8112809c:	10b7a0c4 	addi	r2,r2,-8573
811280a0:	1888383a 	mulxuu	r4,r3,r2
811280a4:	1885383a 	mul	r2,r3,r2
811280a8:	100b883a 	mov	r5,r2
811280ac:	200d883a 	mov	r6,r4
811280b0:	3004d4ba 	srli	r2,r6,18
811280b4:	4885883a 	add	r2,r9,r2
811280b8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811280bc:	00000706 	br	811280dc <usleep+0xe0>
  {
    OSTimeDly(0xffff);
811280c0:	013fffd4 	movui	r4,65535
811280c4:	1130d040 	call	81130d04 <OSTimeDly>
    ticks -= 0xffff;
811280c8:	e0fffd17 	ldw	r3,-12(fp)
811280cc:	00bffff4 	movhi	r2,65535
811280d0:	10800044 	addi	r2,r2,1
811280d4:	1885883a 	add	r2,r3,r2
811280d8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811280dc:	e0bffd17 	ldw	r2,-12(fp)
811280e0:	00ffffd4 	movui	r3,65535
811280e4:	18bff636 	bltu	r3,r2,811280c0 <__reset+0xfb1080c0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
811280e8:	e0bffd17 	ldw	r2,-12(fp)
811280ec:	10bfffcc 	andi	r2,r2,65535
811280f0:	1009883a 	mov	r4,r2
811280f4:	1130d040 	call	81130d04 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
811280f8:	008003f4 	movhi	r2,15
811280fc:	10909004 	addi	r2,r2,16960
81128100:	e0fffe17 	ldw	r3,-8(fp)
81128104:	10c7203a 	divu	r3,r2,r3
81128108:	e0bfff17 	ldw	r2,-4(fp)
8112810c:	10c9203a 	divu	r4,r2,r3
81128110:	20c7383a 	mul	r3,r4,r3
81128114:	10c5c83a 	sub	r2,r2,r3
81128118:	1009883a 	mov	r4,r2
8112811c:	112712c0 	call	8112712c <alt_busy_sleep>

  return 0;  
81128120:	0005883a 	mov	r2,zero
}
81128124:	e037883a 	mov	sp,fp
81128128:	dfc00117 	ldw	ra,4(sp)
8112812c:	df000017 	ldw	fp,0(sp)
81128130:	dec00204 	addi	sp,sp,8
81128134:	f800283a 	ret

81128138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128138:	defffe04 	addi	sp,sp,-8
8112813c:	de00012e 	bgeu	sp,et,81128144 <alt_get_errno+0xc>
81128140:	003b68fa 	trap	3
81128144:	dfc00115 	stw	ra,4(sp)
81128148:	df000015 	stw	fp,0(sp)
8112814c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128150:	d0a01017 	ldw	r2,-32704(gp)
81128154:	10000326 	beq	r2,zero,81128164 <alt_get_errno+0x2c>
81128158:	d0a01017 	ldw	r2,-32704(gp)
8112815c:	103ee83a 	callr	r2
81128160:	00000106 	br	81128168 <alt_get_errno+0x30>
81128164:	d0a05f04 	addi	r2,gp,-32388
}
81128168:	e037883a 	mov	sp,fp
8112816c:	dfc00117 	ldw	ra,4(sp)
81128170:	df000017 	ldw	fp,0(sp)
81128174:	dec00204 	addi	sp,sp,8
81128178:	f800283a 	ret

8112817c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8112817c:	defff904 	addi	sp,sp,-28
81128180:	de00012e 	bgeu	sp,et,81128188 <write+0xc>
81128184:	003b68fa 	trap	3
81128188:	dfc00615 	stw	ra,24(sp)
8112818c:	df000515 	stw	fp,20(sp)
81128190:	df000504 	addi	fp,sp,20
81128194:	e13ffd15 	stw	r4,-12(fp)
81128198:	e17ffe15 	stw	r5,-8(fp)
8112819c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811281a0:	e0bffd17 	ldw	r2,-12(fp)
811281a4:	10000616 	blt	r2,zero,811281c0 <write+0x44>
811281a8:	e0bffd17 	ldw	r2,-12(fp)
811281ac:	10c00324 	muli	r3,r2,12
811281b0:	00a04534 	movhi	r2,33044
811281b4:	10bdda04 	addi	r2,r2,-2200
811281b8:	1885883a 	add	r2,r3,r2
811281bc:	00000106 	br	811281c4 <write+0x48>
811281c0:	0005883a 	mov	r2,zero
811281c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811281c8:	e0bffb17 	ldw	r2,-20(fp)
811281cc:	10002126 	beq	r2,zero,81128254 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
811281d0:	e0bffb17 	ldw	r2,-20(fp)
811281d4:	10800217 	ldw	r2,8(r2)
811281d8:	108000cc 	andi	r2,r2,3
811281dc:	10001826 	beq	r2,zero,81128240 <write+0xc4>
811281e0:	e0bffb17 	ldw	r2,-20(fp)
811281e4:	10800017 	ldw	r2,0(r2)
811281e8:	10800617 	ldw	r2,24(r2)
811281ec:	10001426 	beq	r2,zero,81128240 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
811281f0:	e0bffb17 	ldw	r2,-20(fp)
811281f4:	10800017 	ldw	r2,0(r2)
811281f8:	10800617 	ldw	r2,24(r2)
811281fc:	e0ffff17 	ldw	r3,-4(fp)
81128200:	180d883a 	mov	r6,r3
81128204:	e17ffe17 	ldw	r5,-8(fp)
81128208:	e13ffb17 	ldw	r4,-20(fp)
8112820c:	103ee83a 	callr	r2
81128210:	e0bffc15 	stw	r2,-16(fp)
81128214:	e0bffc17 	ldw	r2,-16(fp)
81128218:	1000070e 	bge	r2,zero,81128238 <write+0xbc>
      {
        ALT_ERRNO = -rval;
8112821c:	11281380 	call	81128138 <alt_get_errno>
81128220:	1007883a 	mov	r3,r2
81128224:	e0bffc17 	ldw	r2,-16(fp)
81128228:	0085c83a 	sub	r2,zero,r2
8112822c:	18800015 	stw	r2,0(r3)
        return -1;
81128230:	00bfffc4 	movi	r2,-1
81128234:	00000c06 	br	81128268 <write+0xec>
      }
      return rval;
81128238:	e0bffc17 	ldw	r2,-16(fp)
8112823c:	00000a06 	br	81128268 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
81128240:	11281380 	call	81128138 <alt_get_errno>
81128244:	1007883a 	mov	r3,r2
81128248:	00800344 	movi	r2,13
8112824c:	18800015 	stw	r2,0(r3)
81128250:	00000406 	br	81128264 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81128254:	11281380 	call	81128138 <alt_get_errno>
81128258:	1007883a 	mov	r3,r2
8112825c:	00801444 	movi	r2,81
81128260:	18800015 	stw	r2,0(r3)
  }
  return -1;
81128264:	00bfffc4 	movi	r2,-1
}
81128268:	e037883a 	mov	sp,fp
8112826c:	dfc00117 	ldw	ra,4(sp)
81128270:	df000017 	ldw	fp,0(sp)
81128274:	dec00204 	addi	sp,sp,8
81128278:	f800283a 	ret

8112827c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
8112827c:	deffde04 	addi	sp,sp,-136
81128280:	de00012e 	bgeu	sp,et,81128288 <__env_lock+0xc>
81128284:	003b68fa 	trap	3
81128288:	dfc02115 	stw	ra,132(sp)
8112828c:	df002015 	stw	fp,128(sp)
81128290:	df002004 	addi	fp,sp,128
81128294:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81128298:	e0bfe104 	addi	r2,fp,-124
8112829c:	100b883a 	mov	r5,r2
811282a0:	01003fc4 	movi	r4,255
811282a4:	1130b600 	call	81130b60 <OSTaskQuery>
811282a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811282ac:	e0bffe83 	ldbu	r2,-6(fp)
811282b0:	10803fcc 	andi	r2,r2,255
811282b4:	10001e1e 	bne	r2,zero,81128330 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
811282b8:	e0bfed83 	ldbu	r2,-74(fp)
811282bc:	10803fcc 	andi	r2,r2,255
811282c0:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
811282c4:	d0a06e17 	ldw	r2,-32328(gp)
811282c8:	e0fffc04 	addi	r3,fp,-16
811282cc:	180b883a 	mov	r5,r3
811282d0:	1009883a 	mov	r4,r2
811282d4:	112f3180 	call	8112f318 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
811282d8:	e0bffe03 	ldbu	r2,-8(fp)
811282dc:	10803fcc 	andi	r2,r2,255
811282e0:	10000726 	beq	r2,zero,81128300 <__env_lock+0x84>
811282e4:	d0a01517 	ldw	r2,-32684(gp)
811282e8:	e0ffe017 	ldw	r3,-128(fp)
811282ec:	1880041e 	bne	r3,r2,81128300 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
811282f0:	d0a06d17 	ldw	r2,-32332(gp)
811282f4:	10800044 	addi	r2,r2,1
811282f8:	d0a06d15 	stw	r2,-32332(gp)
811282fc:	00000a06 	br	81128328 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81128300:	d0a06e17 	ldw	r2,-32328(gp)
81128304:	e0fffe84 	addi	r3,fp,-6
81128308:	180d883a 	mov	r6,r3
8112830c:	000b883a 	mov	r5,zero
81128310:	1009883a 	mov	r4,r2
81128314:	112ee780 	call	8112ee78 <OSSemPend>
    locks  = 1;
81128318:	00800044 	movi	r2,1
8112831c:	d0a06d15 	stw	r2,-32332(gp)
    lockid = id;
81128320:	e0bfe017 	ldw	r2,-128(fp)
81128324:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81128328:	0001883a 	nop
8112832c:	00000106 	br	81128334 <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81128330:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81128334:	e037883a 	mov	sp,fp
81128338:	dfc00117 	ldw	ra,4(sp)
8112833c:	df000017 	ldw	fp,0(sp)
81128340:	dec00204 	addi	sp,sp,8
81128344:	f800283a 	ret

81128348 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81128348:	defffd04 	addi	sp,sp,-12
8112834c:	de00012e 	bgeu	sp,et,81128354 <__env_unlock+0xc>
81128350:	003b68fa 	trap	3
81128354:	dfc00215 	stw	ra,8(sp)
81128358:	df000115 	stw	fp,4(sp)
8112835c:	df000104 	addi	fp,sp,4
81128360:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81128364:	d0a06d17 	ldw	r2,-32332(gp)
81128368:	10000b26 	beq	r2,zero,81128398 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
8112836c:	d0a06d17 	ldw	r2,-32332(gp)
81128370:	10bfffc4 	addi	r2,r2,-1
81128374:	d0a06d15 	stw	r2,-32332(gp)
81128378:	d0a06d17 	ldw	r2,-32332(gp)
8112837c:	1000071e 	bne	r2,zero,8112839c <__env_unlock+0x54>
  {
    lockid = -1;
81128380:	00bfffc4 	movi	r2,-1
81128384:	d0a01515 	stw	r2,-32684(gp)
    OSSemPost( alt_envsem );
81128388:	d0a06e17 	ldw	r2,-32328(gp)
8112838c:	1009883a 	mov	r4,r2
81128390:	112f2000 	call	8112f200 <OSSemPost>
81128394:	00000106 	br	8112839c <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
81128398:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
8112839c:	e037883a 	mov	sp,fp
811283a0:	dfc00117 	ldw	ra,4(sp)
811283a4:	df000017 	ldw	fp,0(sp)
811283a8:	dec00204 	addi	sp,sp,8
811283ac:	f800283a 	ret

811283b0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811283b0:	deffda04 	addi	sp,sp,-152
811283b4:	de00012e 	bgeu	sp,et,811283bc <__malloc_lock+0xc>
811283b8:	003b68fa 	trap	3
811283bc:	dfc02515 	stw	ra,148(sp)
811283c0:	df002415 	stw	fp,144(sp)
811283c4:	df002404 	addi	fp,sp,144
811283c8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811283cc:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
811283d0:	d0a07403 	ldbu	r2,-32304(gp)
811283d4:	10803fcc 	andi	r2,r2,255
811283d8:	10800060 	cmpeqi	r2,r2,1
811283dc:	10003626 	beq	r2,zero,811284b8 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811283e0:	e0bfe104 	addi	r2,fp,-124
811283e4:	100b883a 	mov	r5,r2
811283e8:	01003fc4 	movi	r4,255
811283ec:	1130b600 	call	81130b60 <OSTaskQuery>
811283f0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811283f4:	e0bffe83 	ldbu	r2,-6(fp)
811283f8:	10803fcc 	andi	r2,r2,255
811283fc:	1000301e 	bne	r2,zero,811284c0 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
81128400:	e0bfed83 	ldbu	r2,-74(fp)
81128404:	10803fcc 	andi	r2,r2,255
81128408:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
8112840c:	d0a07017 	ldw	r2,-32320(gp)
81128410:	e0fffc04 	addi	r3,fp,-16
81128414:	180b883a 	mov	r5,r3
81128418:	1009883a 	mov	r4,r2
8112841c:	112f3180 	call	8112f318 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128420:	0005303a 	rdctl	r2,status
81128424:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128428:	e0ffe017 	ldw	r3,-128(fp)
8112842c:	00bfff84 	movi	r2,-2
81128430:	1884703a 	and	r2,r3,r2
81128434:	1001703a 	wrctl	status,r2
  
  return context;
81128438:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
8112843c:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81128440:	e0bffc0b 	ldhu	r2,-16(fp)
81128444:	10bfffcc 	andi	r2,r2,65535
81128448:	10000b1e 	bne	r2,zero,81128478 <__malloc_lock+0xc8>
8112844c:	d0a01617 	ldw	r2,-32680(gp)
81128450:	e0ffdd17 	ldw	r3,-140(fp)
81128454:	1880081e 	bne	r3,r2,81128478 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
81128458:	d0a06f17 	ldw	r2,-32324(gp)
8112845c:	10800044 	addi	r2,r2,1
81128460:	d0a06f15 	stw	r2,-32324(gp)
81128464:	e0bfdc17 	ldw	r2,-144(fp)
81128468:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112846c:	e0bfde17 	ldw	r2,-136(fp)
81128470:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81128474:	00000e06 	br	811284b0 <__malloc_lock+0x100>
81128478:	e0bfdc17 	ldw	r2,-144(fp)
8112847c:	e0bfdf15 	stw	r2,-132(fp)
81128480:	e0bfdf17 	ldw	r2,-132(fp)
81128484:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
81128488:	d0a07017 	ldw	r2,-32320(gp)
8112848c:	e0fffe84 	addi	r3,fp,-6
81128490:	180d883a 	mov	r6,r3
81128494:	000b883a 	mov	r5,zero
81128498:	1009883a 	mov	r4,r2
8112849c:	112ee780 	call	8112ee78 <OSSemPend>
    locks  = 1;
811284a0:	00800044 	movi	r2,1
811284a4:	d0a06f15 	stw	r2,-32324(gp)
    lockid = id;
811284a8:	e0bfdd17 	ldw	r2,-140(fp)
811284ac:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811284b0:	0001883a 	nop
811284b4:	00000306 	br	811284c4 <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811284b8:	0001883a 	nop
811284bc:	00000106 	br	811284c4 <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811284c0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811284c4:	e037883a 	mov	sp,fp
811284c8:	dfc00117 	ldw	ra,4(sp)
811284cc:	df000017 	ldw	fp,0(sp)
811284d0:	dec00204 	addi	sp,sp,8
811284d4:	f800283a 	ret

811284d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
811284d8:	defff804 	addi	sp,sp,-32
811284dc:	de00012e 	bgeu	sp,et,811284e4 <__malloc_unlock+0xc>
811284e0:	003b68fa 	trap	3
811284e4:	dfc00715 	stw	ra,28(sp)
811284e8:	df000615 	stw	fp,24(sp)
811284ec:	df000604 	addi	fp,sp,24
811284f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811284f4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
811284f8:	d0a07403 	ldbu	r2,-32304(gp)
811284fc:	10803fcc 	andi	r2,r2,255
81128500:	10800060 	cmpeqi	r2,r2,1
81128504:	10002326 	beq	r2,zero,81128594 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128508:	0005303a 	rdctl	r2,status
8112850c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128510:	e0fffe17 	ldw	r3,-8(fp)
81128514:	00bfff84 	movi	r2,-2
81128518:	1884703a 	and	r2,r3,r2
8112851c:	1001703a 	wrctl	status,r2
  
  return context;
81128520:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81128524:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81128528:	d0a06f17 	ldw	r2,-32324(gp)
8112852c:	1000051e 	bne	r2,zero,81128544 <__malloc_unlock+0x6c>
81128530:	e0bffa17 	ldw	r2,-24(fp)
81128534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128538:	e0bffb17 	ldw	r2,-20(fp)
8112853c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81128540:	00001506 	br	81128598 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81128544:	d0a06f17 	ldw	r2,-32324(gp)
81128548:	10bfffc4 	addi	r2,r2,-1
8112854c:	d0a06f15 	stw	r2,-32324(gp)
81128550:	d0a06f17 	ldw	r2,-32324(gp)
81128554:	10000a1e 	bne	r2,zero,81128580 <__malloc_unlock+0xa8>
  {
    lockid = -1;
81128558:	00bfffc4 	movi	r2,-1
8112855c:	d0a01615 	stw	r2,-32680(gp)
81128560:	e0bffa17 	ldw	r2,-24(fp)
81128564:	e0bffc15 	stw	r2,-16(fp)
81128568:	e0bffc17 	ldw	r2,-16(fp)
8112856c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
81128570:	d0a07017 	ldw	r2,-32320(gp)
81128574:	1009883a 	mov	r4,r2
81128578:	112f2000 	call	8112f200 <OSSemPost>
8112857c:	00000606 	br	81128598 <__malloc_unlock+0xc0>
81128580:	e0bffa17 	ldw	r2,-24(fp)
81128584:	e0bffd15 	stw	r2,-12(fp)
81128588:	e0bffd17 	ldw	r2,-12(fp)
8112858c:	1001703a 	wrctl	status,r2
81128590:	00000106 	br	81128598 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
81128594:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81128598:	e037883a 	mov	sp,fp
8112859c:	dfc00117 	ldw	ra,4(sp)
811285a0:	df000017 	ldw	fp,0(sp)
811285a4:	dec00204 	addi	sp,sp,8
811285a8:	f800283a 	ret

811285ac <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811285ac:	defff704 	addi	sp,sp,-36
811285b0:	de00012e 	bgeu	sp,et,811285b8 <OSEventNameGet+0xc>
811285b4:	003b68fa 	trap	3
811285b8:	dfc00815 	stw	ra,32(sp)
811285bc:	df000715 	stw	fp,28(sp)
811285c0:	df000704 	addi	fp,sp,28
811285c4:	e13ffd15 	stw	r4,-12(fp)
811285c8:	e17ffe15 	stw	r5,-8(fp)
811285cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811285d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811285d4:	e0bfff17 	ldw	r2,-4(fp)
811285d8:	1000021e 	bne	r2,zero,811285e4 <OSEventNameGet+0x38>
        return (0);
811285dc:	0005883a 	mov	r2,zero
811285e0:	00003706 	br	811286c0 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
811285e4:	e0bffd17 	ldw	r2,-12(fp)
811285e8:	1000051e 	bne	r2,zero,81128600 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
811285ec:	e0bfff17 	ldw	r2,-4(fp)
811285f0:	00c00104 	movi	r3,4
811285f4:	10c00005 	stb	r3,0(r2)
        return (0);
811285f8:	0005883a 	mov	r2,zero
811285fc:	00003006 	br	811286c0 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128600:	e0bffe17 	ldw	r2,-8(fp)
81128604:	1000051e 	bne	r2,zero,8112861c <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81128608:	e0bfff17 	ldw	r2,-4(fp)
8112860c:	00c00304 	movi	r3,12
81128610:	10c00005 	stb	r3,0(r2)
        return (0);
81128614:	0005883a 	mov	r2,zero
81128618:	00002906 	br	811286c0 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112861c:	d0a08403 	ldbu	r2,-32240(gp)
81128620:	10803fcc 	andi	r2,r2,255
81128624:	10000526 	beq	r2,zero,8112863c <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81128628:	e0bfff17 	ldw	r2,-4(fp)
8112862c:	00c00444 	movi	r3,17
81128630:	10c00005 	stb	r3,0(r2)
        return (0);
81128634:	0005883a 	mov	r2,zero
81128638:	00002106 	br	811286c0 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
8112863c:	e0bffd17 	ldw	r2,-12(fp)
81128640:	10800003 	ldbu	r2,0(r2)
81128644:	10803fcc 	andi	r2,r2,255
81128648:	10bfffc4 	addi	r2,r2,-1
8112864c:	10800128 	cmpgeui	r2,r2,4
81128650:	10000526 	beq	r2,zero,81128668 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81128654:	e0bfff17 	ldw	r2,-4(fp)
81128658:	00c00044 	movi	r3,1
8112865c:	10c00005 	stb	r3,0(r2)
             return (0);
81128660:	0005883a 	mov	r2,zero
81128664:	00001606 	br	811286c0 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81128668:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112866c:	0005303a 	rdctl	r2,status
81128670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128674:	e0fffb17 	ldw	r3,-20(fp)
81128678:	00bfff84 	movi	r2,-2
8112867c:	1884703a 	and	r2,r3,r2
81128680:	1001703a 	wrctl	status,r2
  
  return context;
81128684:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81128688:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
8112868c:	e0bffd17 	ldw	r2,-12(fp)
81128690:	10800444 	addi	r2,r2,17
81128694:	100b883a 	mov	r5,r2
81128698:	e13ffe17 	ldw	r4,-8(fp)
8112869c:	112a11c0 	call	8112a11c <OS_StrCopy>
811286a0:	e0bffa05 	stb	r2,-24(fp)
811286a4:	e0bff917 	ldw	r2,-28(fp)
811286a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811286ac:	e0bffc17 	ldw	r2,-16(fp)
811286b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811286b4:	e0bfff17 	ldw	r2,-4(fp)
811286b8:	10000005 	stb	zero,0(r2)
    return (len);
811286bc:	e0bffa03 	ldbu	r2,-24(fp)
}
811286c0:	e037883a 	mov	sp,fp
811286c4:	dfc00117 	ldw	ra,4(sp)
811286c8:	df000017 	ldw	fp,0(sp)
811286cc:	dec00204 	addi	sp,sp,8
811286d0:	f800283a 	ret

811286d4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811286d4:	defff604 	addi	sp,sp,-40
811286d8:	de00012e 	bgeu	sp,et,811286e0 <OSEventNameSet+0xc>
811286dc:	003b68fa 	trap	3
811286e0:	dfc00915 	stw	ra,36(sp)
811286e4:	df000815 	stw	fp,32(sp)
811286e8:	df000804 	addi	fp,sp,32
811286ec:	e13ffd15 	stw	r4,-12(fp)
811286f0:	e17ffe15 	stw	r5,-8(fp)
811286f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811286f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811286fc:	e0bfff17 	ldw	r2,-4(fp)
81128700:	10004026 	beq	r2,zero,81128804 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81128704:	e0bffd17 	ldw	r2,-12(fp)
81128708:	1000041e 	bne	r2,zero,8112871c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112870c:	e0bfff17 	ldw	r2,-4(fp)
81128710:	00c00104 	movi	r3,4
81128714:	10c00005 	stb	r3,0(r2)
        return;
81128718:	00003b06 	br	81128808 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112871c:	e0bffe17 	ldw	r2,-8(fp)
81128720:	1000041e 	bne	r2,zero,81128734 <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81128724:	e0bfff17 	ldw	r2,-4(fp)
81128728:	00c00304 	movi	r3,12
8112872c:	10c00005 	stb	r3,0(r2)
        return;
81128730:	00003506 	br	81128808 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128734:	d0a08403 	ldbu	r2,-32240(gp)
81128738:	10803fcc 	andi	r2,r2,255
8112873c:	10000426 	beq	r2,zero,81128750 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81128740:	e0bfff17 	ldw	r2,-4(fp)
81128744:	00c00484 	movi	r3,18
81128748:	10c00005 	stb	r3,0(r2)
        return;
8112874c:	00002e06 	br	81128808 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
81128750:	e0bffd17 	ldw	r2,-12(fp)
81128754:	10800003 	ldbu	r2,0(r2)
81128758:	10803fcc 	andi	r2,r2,255
8112875c:	10bfffc4 	addi	r2,r2,-1
81128760:	10800128 	cmpgeui	r2,r2,4
81128764:	10000426 	beq	r2,zero,81128778 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81128768:	e0bfff17 	ldw	r2,-4(fp)
8112876c:	00c00044 	movi	r3,1
81128770:	10c00005 	stb	r3,0(r2)
             return;
81128774:	00002406 	br	81128808 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81128778:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112877c:	0005303a 	rdctl	r2,status
81128780:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128784:	e0fffc17 	ldw	r3,-16(fp)
81128788:	00bfff84 	movi	r2,-2
8112878c:	1884703a 	and	r2,r3,r2
81128790:	1001703a 	wrctl	status,r2
  
  return context;
81128794:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81128798:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
8112879c:	e13ffe17 	ldw	r4,-8(fp)
811287a0:	112a1980 	call	8112a198 <OS_StrLen>
811287a4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
811287a8:	e0bffa03 	ldbu	r2,-24(fp)
811287ac:	10800830 	cmpltui	r2,r2,32
811287b0:	1000081e 	bne	r2,zero,811287d4 <OSEventNameSet+0x100>
811287b4:	e0bff817 	ldw	r2,-32(fp)
811287b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811287bc:	e0bff917 	ldw	r2,-28(fp)
811287c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
811287c4:	e0bfff17 	ldw	r2,-4(fp)
811287c8:	00c002c4 	movi	r3,11
811287cc:	10c00005 	stb	r3,0(r2)
        return;
811287d0:	00000d06 	br	81128808 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
811287d4:	e0bffd17 	ldw	r2,-12(fp)
811287d8:	10800444 	addi	r2,r2,17
811287dc:	e17ffe17 	ldw	r5,-8(fp)
811287e0:	1009883a 	mov	r4,r2
811287e4:	112a11c0 	call	8112a11c <OS_StrCopy>
811287e8:	e0bff817 	ldw	r2,-32(fp)
811287ec:	e0bffb15 	stw	r2,-20(fp)
811287f0:	e0bffb17 	ldw	r2,-20(fp)
811287f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811287f8:	e0bfff17 	ldw	r2,-4(fp)
811287fc:	10000005 	stb	zero,0(r2)
81128800:	00000106 	br	81128808 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81128804:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81128808:	e037883a 	mov	sp,fp
8112880c:	dfc00117 	ldw	ra,4(sp)
81128810:	df000017 	ldw	fp,0(sp)
81128814:	dec00204 	addi	sp,sp,8
81128818:	f800283a 	ret

8112881c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
8112881c:	deffed04 	addi	sp,sp,-76
81128820:	de00012e 	bgeu	sp,et,81128828 <OSEventPendMulti+0xc>
81128824:	003b68fa 	trap	3
81128828:	dfc01215 	stw	ra,72(sp)
8112882c:	df001115 	stw	fp,68(sp)
81128830:	df001104 	addi	fp,sp,68
81128834:	e13ffc15 	stw	r4,-16(fp)
81128838:	e17ffd15 	stw	r5,-12(fp)
8112883c:	e1bffe15 	stw	r6,-8(fp)
81128840:	3805883a 	mov	r2,r7
81128844:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81128848:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
8112884c:	e0800217 	ldw	r2,8(fp)
81128850:	1000021e 	bne	r2,zero,8112885c <OSEventPendMulti+0x40>
        return (0);
81128854:	0005883a 	mov	r2,zero
81128858:	00017106 	br	81128e20 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
8112885c:	e0bffc17 	ldw	r2,-16(fp)
81128860:	1000051e 	bne	r2,zero,81128878 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
81128864:	e0800217 	ldw	r2,8(fp)
81128868:	00c00104 	movi	r3,4
8112886c:	10c00005 	stb	r3,0(r2)
        return (0);
81128870:	0005883a 	mov	r2,zero
81128874:	00016a06 	br	81128e20 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81128878:	e0bffd17 	ldw	r2,-12(fp)
8112887c:	1000051e 	bne	r2,zero,81128894 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
81128880:	e0800217 	ldw	r2,8(fp)
81128884:	00c00104 	movi	r3,4
81128888:	10c00005 	stb	r3,0(r2)
        return (0);
8112888c:	0005883a 	mov	r2,zero
81128890:	00016306 	br	81128e20 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81128894:	e0bffe17 	ldw	r2,-8(fp)
81128898:	1000051e 	bne	r2,zero,811288b0 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
8112889c:	e0800217 	ldw	r2,8(fp)
811288a0:	00c00104 	movi	r3,4
811288a4:	10c00005 	stb	r3,0(r2)
        return (0);
811288a8:	0005883a 	mov	r2,zero
811288ac:	00015c06 	br	81128e20 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
811288b0:	e0bffd17 	ldw	r2,-12(fp)
811288b4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
811288b8:	e0bffc17 	ldw	r2,-16(fp)
811288bc:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
811288c0:	e0bfef17 	ldw	r2,-68(fp)
811288c4:	10800017 	ldw	r2,0(r2)
811288c8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
811288cc:	00001906 	br	81128934 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
811288d0:	e0bff017 	ldw	r2,-64(fp)
811288d4:	10800003 	ldbu	r2,0(r2)
811288d8:	10803fcc 	andi	r2,r2,255
811288dc:	10c000a0 	cmpeqi	r3,r2,2
811288e0:	1800091e 	bne	r3,zero,81128908 <OSEventPendMulti+0xec>
811288e4:	10c000e0 	cmpeqi	r3,r2,3
811288e8:	1800091e 	bne	r3,zero,81128910 <OSEventPendMulti+0xf4>
811288ec:	10800060 	cmpeqi	r2,r2,1
811288f0:	1000091e 	bne	r2,zero,81128918 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
811288f4:	e0800217 	ldw	r2,8(fp)
811288f8:	00c00044 	movi	r3,1
811288fc:	10c00005 	stb	r3,0(r2)
                 return (0);
81128900:	0005883a 	mov	r2,zero
81128904:	00014606 	br	81128e20 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81128908:	0001883a 	nop
8112890c:	00000306 	br	8112891c <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81128910:	0001883a 	nop
81128914:	00000106 	br	8112891c <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81128918:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
8112891c:	e0bfef17 	ldw	r2,-68(fp)
81128920:	10800104 	addi	r2,r2,4
81128924:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81128928:	e0bfef17 	ldw	r2,-68(fp)
8112892c:	10800017 	ldw	r2,0(r2)
81128930:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81128934:	e0bff017 	ldw	r2,-64(fp)
81128938:	103fe51e 	bne	r2,zero,811288d0 <__reset+0xfb1088d0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
8112893c:	d0a08403 	ldbu	r2,-32240(gp)
81128940:	10803fcc 	andi	r2,r2,255
81128944:	10000526 	beq	r2,zero,8112895c <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81128948:	e0800217 	ldw	r2,8(fp)
8112894c:	00c00084 	movi	r3,2
81128950:	10c00005 	stb	r3,0(r2)
        return (0);
81128954:	0005883a 	mov	r2,zero
81128958:	00013106 	br	81128e20 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
8112895c:	d0a07203 	ldbu	r2,-32312(gp)
81128960:	10803fcc 	andi	r2,r2,255
81128964:	10000526 	beq	r2,zero,8112897c <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81128968:	e0800217 	ldw	r2,8(fp)
8112896c:	00c00344 	movi	r3,13
81128970:	10c00005 	stb	r3,0(r2)
        return (0);
81128974:	0005883a 	mov	r2,zero
81128978:	00012906 	br	81128e20 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112897c:	0005303a 	rdctl	r2,status
81128980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128984:	e0fffb17 	ldw	r3,-20(fp)
81128988:	00bfff84 	movi	r2,-2
8112898c:	1884703a 	and	r2,r3,r2
81128990:	1001703a 	wrctl	status,r2
  
  return context;
81128994:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81128998:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
8112899c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
811289a0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
811289a4:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
811289a8:	e0bffc17 	ldw	r2,-16(fp)
811289ac:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
811289b0:	e0bfef17 	ldw	r2,-68(fp)
811289b4:	10800017 	ldw	r2,0(r2)
811289b8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
811289bc:	00008106 	br	81128bc4 <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
811289c0:	e0bff017 	ldw	r2,-64(fp)
811289c4:	10800003 	ldbu	r2,0(r2)
811289c8:	10803fcc 	andi	r2,r2,255
811289cc:	10c000a0 	cmpeqi	r3,r2,2
811289d0:	18003c1e 	bne	r3,zero,81128ac4 <OSEventPendMulti+0x2a8>
811289d4:	10c000e0 	cmpeqi	r3,r2,3
811289d8:	1800031e 	bne	r3,zero,811289e8 <OSEventPendMulti+0x1cc>
811289dc:	10800060 	cmpeqi	r2,r2,1
811289e0:	10001e1e 	bne	r2,zero,81128a5c <OSEventPendMulti+0x240>
811289e4:	00006606 	br	81128b80 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
811289e8:	e0bff017 	ldw	r2,-64(fp)
811289ec:	1080020b 	ldhu	r2,8(r2)
811289f0:	10bfffcc 	andi	r2,r2,65535
811289f4:	10001526 	beq	r2,zero,81128a4c <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
811289f8:	e0bff017 	ldw	r2,-64(fp)
811289fc:	1080020b 	ldhu	r2,8(r2)
81128a00:	10bfffc4 	addi	r2,r2,-1
81128a04:	1007883a 	mov	r3,r2
81128a08:	e0bff017 	ldw	r2,-64(fp)
81128a0c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81128a10:	e0bffd17 	ldw	r2,-12(fp)
81128a14:	10c00104 	addi	r3,r2,4
81128a18:	e0fffd15 	stw	r3,-12(fp)
81128a1c:	e0fff017 	ldw	r3,-64(fp)
81128a20:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81128a24:	00800044 	movi	r2,1
81128a28:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81128a2c:	e0bffe17 	ldw	r2,-8(fp)
81128a30:	10c00104 	addi	r3,r2,4
81128a34:	e0fffe15 	stw	r3,-8(fp)
81128a38:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81128a3c:	e0bff18b 	ldhu	r2,-58(fp)
81128a40:	10800044 	addi	r2,r2,1
81128a44:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81128a48:	00005806 	br	81128bac <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81128a4c:	e0bff203 	ldbu	r2,-56(fp)
81128a50:	10800054 	ori	r2,r2,1
81128a54:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81128a58:	00005406 	br	81128bac <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81128a5c:	e0bff017 	ldw	r2,-64(fp)
81128a60:	10800117 	ldw	r2,4(r2)
81128a64:	10001326 	beq	r2,zero,81128ab4 <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81128a68:	e0bffe17 	ldw	r2,-8(fp)
81128a6c:	10c00104 	addi	r3,r2,4
81128a70:	e0fffe15 	stw	r3,-8(fp)
81128a74:	e0fff017 	ldw	r3,-64(fp)
81128a78:	18c00117 	ldw	r3,4(r3)
81128a7c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81128a80:	e0bff017 	ldw	r2,-64(fp)
81128a84:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81128a88:	e0bffd17 	ldw	r2,-12(fp)
81128a8c:	10c00104 	addi	r3,r2,4
81128a90:	e0fffd15 	stw	r3,-12(fp)
81128a94:	e0fff017 	ldw	r3,-64(fp)
81128a98:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81128a9c:	00800044 	movi	r2,1
81128aa0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81128aa4:	e0bff18b 	ldhu	r2,-58(fp)
81128aa8:	10800044 	addi	r2,r2,1
81128aac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81128ab0:	00003e06 	br	81128bac <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81128ab4:	e0bff203 	ldbu	r2,-56(fp)
81128ab8:	10800094 	ori	r2,r2,2
81128abc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81128ac0:	00003a06 	br	81128bac <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81128ac4:	e0bff017 	ldw	r2,-64(fp)
81128ac8:	10800117 	ldw	r2,4(r2)
81128acc:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81128ad0:	e0bff517 	ldw	r2,-44(fp)
81128ad4:	1080058b 	ldhu	r2,22(r2)
81128ad8:	10bfffcc 	andi	r2,r2,65535
81128adc:	10002426 	beq	r2,zero,81128b70 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81128ae0:	e0bffe17 	ldw	r2,-8(fp)
81128ae4:	10c00104 	addi	r3,r2,4
81128ae8:	e0fffe15 	stw	r3,-8(fp)
81128aec:	e0fff517 	ldw	r3,-44(fp)
81128af0:	18c00417 	ldw	r3,16(r3)
81128af4:	19400104 	addi	r5,r3,4
81128af8:	e13ff517 	ldw	r4,-44(fp)
81128afc:	21400415 	stw	r5,16(r4)
81128b00:	18c00017 	ldw	r3,0(r3)
81128b04:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81128b08:	e0bff517 	ldw	r2,-44(fp)
81128b0c:	10c00417 	ldw	r3,16(r2)
81128b10:	e0bff517 	ldw	r2,-44(fp)
81128b14:	10800217 	ldw	r2,8(r2)
81128b18:	1880041e 	bne	r3,r2,81128b2c <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81128b1c:	e0bff517 	ldw	r2,-44(fp)
81128b20:	10c00117 	ldw	r3,4(r2)
81128b24:	e0bff517 	ldw	r2,-44(fp)
81128b28:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81128b2c:	e0bff517 	ldw	r2,-44(fp)
81128b30:	1080058b 	ldhu	r2,22(r2)
81128b34:	10bfffc4 	addi	r2,r2,-1
81128b38:	1007883a 	mov	r3,r2
81128b3c:	e0bff517 	ldw	r2,-44(fp)
81128b40:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81128b44:	e0bffd17 	ldw	r2,-12(fp)
81128b48:	10c00104 	addi	r3,r2,4
81128b4c:	e0fffd15 	stw	r3,-12(fp)
81128b50:	e0fff017 	ldw	r3,-64(fp)
81128b54:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81128b58:	00800044 	movi	r2,1
81128b5c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81128b60:	e0bff18b 	ldhu	r2,-58(fp)
81128b64:	10800044 	addi	r2,r2,1
81128b68:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81128b6c:	00000f06 	br	81128bac <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81128b70:	e0bff203 	ldbu	r2,-56(fp)
81128b74:	10800114 	ori	r2,r2,4
81128b78:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81128b7c:	00000b06 	br	81128bac <OSEventPendMulti+0x390>
81128b80:	e0bff317 	ldw	r2,-52(fp)
81128b84:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128b88:	e0bff417 	ldw	r2,-48(fp)
81128b8c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81128b90:	e0bffd17 	ldw	r2,-12(fp)
81128b94:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81128b98:	e0800217 	ldw	r2,8(fp)
81128b9c:	00c00044 	movi	r3,1
81128ba0:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81128ba4:	e0bff18b 	ldhu	r2,-58(fp)
81128ba8:	00009d06 	br	81128e20 <OSEventPendMulti+0x604>
        }
        pevents++;
81128bac:	e0bfef17 	ldw	r2,-68(fp)
81128bb0:	10800104 	addi	r2,r2,4
81128bb4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81128bb8:	e0bfef17 	ldw	r2,-68(fp)
81128bbc:	10800017 	ldw	r2,0(r2)
81128bc0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81128bc4:	e0bff017 	ldw	r2,-64(fp)
81128bc8:	103f7d1e 	bne	r2,zero,811289c0 <__reset+0xfb1089c0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81128bcc:	e0bff103 	ldbu	r2,-60(fp)
81128bd0:	10800058 	cmpnei	r2,r2,1
81128bd4:	10000a1e 	bne	r2,zero,81128c00 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81128bd8:	e0bffd17 	ldw	r2,-12(fp)
81128bdc:	10000015 	stw	zero,0(r2)
81128be0:	e0bff317 	ldw	r2,-52(fp)
81128be4:	e0bff615 	stw	r2,-40(fp)
81128be8:	e0bff617 	ldw	r2,-40(fp)
81128bec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81128bf0:	e0800217 	ldw	r2,8(fp)
81128bf4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81128bf8:	e0bff18b 	ldhu	r2,-58(fp)
81128bfc:	00008806 	br	81128e20 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81128c00:	d0a08517 	ldw	r2,-32236(gp)
81128c04:	d0e08517 	ldw	r3,-32236(gp)
81128c08:	19000c03 	ldbu	r4,48(r3)
81128c0c:	e0fff203 	ldbu	r3,-56(fp)
81128c10:	20c6b03a 	or	r3,r4,r3
81128c14:	1809883a 	mov	r4,r3
81128c18:	00ffe004 	movi	r3,-128
81128c1c:	20c6b03a 	or	r3,r4,r3
81128c20:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81128c24:	d0a08517 	ldw	r2,-32236(gp)
81128c28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81128c2c:	d0a08517 	ldw	r2,-32236(gp)
81128c30:	e0ffff0b 	ldhu	r3,-4(fp)
81128c34:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81128c38:	e13ffc17 	ldw	r4,-16(fp)
81128c3c:	11297c40 	call	811297c4 <OS_EventTaskWaitMulti>
81128c40:	e0bff317 	ldw	r2,-52(fp)
81128c44:	e0bff915 	stw	r2,-28(fp)
81128c48:	e0bff917 	ldw	r2,-28(fp)
81128c4c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81128c50:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128c54:	0005303a 	rdctl	r2,status
81128c58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128c5c:	e0fff717 	ldw	r3,-36(fp)
81128c60:	00bfff84 	movi	r2,-2
81128c64:	1884703a 	and	r2,r3,r2
81128c68:	1001703a 	wrctl	status,r2
  
  return context;
81128c6c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81128c70:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81128c74:	d0a08517 	ldw	r2,-32236(gp)
81128c78:	10800c43 	ldbu	r2,49(r2)
81128c7c:	10803fcc 	andi	r2,r2,255
81128c80:	10000226 	beq	r2,zero,81128c8c <OSEventPendMulti+0x470>
81128c84:	108000a0 	cmpeqi	r2,r2,2
81128c88:	10001826 	beq	r2,zero,81128cec <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81128c8c:	d0a08517 	ldw	r2,-32236(gp)
81128c90:	10800717 	ldw	r2,28(r2)
81128c94:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81128c98:	e0bff017 	ldw	r2,-64(fp)
81128c9c:	10000b26 	beq	r2,zero,81128ccc <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81128ca0:	e0bffd17 	ldw	r2,-12(fp)
81128ca4:	10c00104 	addi	r3,r2,4
81128ca8:	e0fffd15 	stw	r3,-12(fp)
81128cac:	e0fff017 	ldw	r3,-64(fp)
81128cb0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81128cb4:	e0bffd17 	ldw	r2,-12(fp)
81128cb8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81128cbc:	e0bff18b 	ldhu	r2,-58(fp)
81128cc0:	10800044 	addi	r2,r2,1
81128cc4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81128cc8:	00000d06 	br	81128d00 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81128ccc:	d0a08517 	ldw	r2,-32236(gp)
81128cd0:	00c00044 	movi	r3,1
81128cd4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81128cd8:	d0a08517 	ldw	r2,-32236(gp)
81128cdc:	e17ffc17 	ldw	r5,-16(fp)
81128ce0:	1009883a 	mov	r4,r2
81128ce4:	11299dc0 	call	811299dc <OS_EventTaskRemoveMulti>
             }
			 break;
81128ce8:	00000506 	br	81128d00 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81128cec:	d0a08517 	ldw	r2,-32236(gp)
81128cf0:	e17ffc17 	ldw	r5,-16(fp)
81128cf4:	1009883a 	mov	r4,r2
81128cf8:	11299dc0 	call	811299dc <OS_EventTaskRemoveMulti>
             break;
81128cfc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81128d00:	d0a08517 	ldw	r2,-32236(gp)
81128d04:	10800c43 	ldbu	r2,49(r2)
81128d08:	10803fcc 	andi	r2,r2,255
81128d0c:	10000326 	beq	r2,zero,81128d1c <OSEventPendMulti+0x500>
81128d10:	108000a0 	cmpeqi	r2,r2,2
81128d14:	1000231e 	bne	r2,zero,81128da4 <OSEventPendMulti+0x588>
81128d18:	00002a06 	br	81128dc4 <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81128d1c:	e0bff017 	ldw	r2,-64(fp)
81128d20:	10800003 	ldbu	r2,0(r2)
81128d24:	10803fcc 	andi	r2,r2,255
81128d28:	0080100e 	bge	zero,r2,81128d6c <OSEventPendMulti+0x550>
81128d2c:	10c000d0 	cmplti	r3,r2,3
81128d30:	1800071e 	bne	r3,zero,81128d50 <OSEventPendMulti+0x534>
81128d34:	108000e0 	cmpeqi	r2,r2,3
81128d38:	10000c26 	beq	r2,zero,81128d6c <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81128d3c:	e0bffe17 	ldw	r2,-8(fp)
81128d40:	10c00104 	addi	r3,r2,4
81128d44:	e0fffe15 	stw	r3,-8(fp)
81128d48:	10000015 	stw	zero,0(r2)
                      break;
81128d4c:	00001206 	br	81128d98 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81128d50:	e0bffe17 	ldw	r2,-8(fp)
81128d54:	10c00104 	addi	r3,r2,4
81128d58:	e0fffe15 	stw	r3,-8(fp)
81128d5c:	d0e08517 	ldw	r3,-32236(gp)
81128d60:	18c00917 	ldw	r3,36(r3)
81128d64:	10c00015 	stw	r3,0(r2)
                      break;
81128d68:	00000b06 	br	81128d98 <OSEventPendMulti+0x57c>
81128d6c:	e0bff317 	ldw	r2,-52(fp)
81128d70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128d74:	e0bff817 	ldw	r2,-32(fp)
81128d78:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81128d7c:	e0bffd17 	ldw	r2,-12(fp)
81128d80:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81128d84:	e0800217 	ldw	r2,8(fp)
81128d88:	00c00044 	movi	r3,1
81128d8c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81128d90:	e0bff18b 	ldhu	r2,-58(fp)
81128d94:	00002206 	br	81128e20 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
81128d98:	e0800217 	ldw	r2,8(fp)
81128d9c:	10000005 	stb	zero,0(r2)
             break;
81128da0:	00001006 	br	81128de4 <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81128da4:	e0bffe17 	ldw	r2,-8(fp)
81128da8:	10c00104 	addi	r3,r2,4
81128dac:	e0fffe15 	stw	r3,-8(fp)
81128db0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
81128db4:	e0800217 	ldw	r2,8(fp)
81128db8:	00c00384 	movi	r3,14
81128dbc:	10c00005 	stb	r3,0(r2)
             break;
81128dc0:	00000806 	br	81128de4 <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
81128dc4:	e0bffe17 	ldw	r2,-8(fp)
81128dc8:	10c00104 	addi	r3,r2,4
81128dcc:	e0fffe15 	stw	r3,-8(fp)
81128dd0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
81128dd4:	e0800217 	ldw	r2,8(fp)
81128dd8:	00c00284 	movi	r3,10
81128ddc:	10c00005 	stb	r3,0(r2)
             break;
81128de0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
81128de4:	d0a08517 	ldw	r2,-32236(gp)
81128de8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81128dec:	d0a08517 	ldw	r2,-32236(gp)
81128df0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
81128df4:	d0a08517 	ldw	r2,-32236(gp)
81128df8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81128dfc:	d0a08517 	ldw	r2,-32236(gp)
81128e00:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
81128e04:	d0a08517 	ldw	r2,-32236(gp)
81128e08:	10000915 	stw	zero,36(r2)
81128e0c:	e0bff317 	ldw	r2,-52(fp)
81128e10:	e0bffa15 	stw	r2,-24(fp)
81128e14:	e0bffa17 	ldw	r2,-24(fp)
81128e18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81128e1c:	e0bff18b 	ldhu	r2,-58(fp)
}
81128e20:	e037883a 	mov	sp,fp
81128e24:	dfc00117 	ldw	ra,4(sp)
81128e28:	df000017 	ldw	fp,0(sp)
81128e2c:	dec00204 	addi	sp,sp,8
81128e30:	f800283a 	ret

81128e34 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81128e34:	defffe04 	addi	sp,sp,-8
81128e38:	de00012e 	bgeu	sp,et,81128e40 <OSInit+0xc>
81128e3c:	003b68fa 	trap	3
81128e40:	dfc00115 	stw	ra,4(sp)
81128e44:	df000015 	stw	fp,0(sp)
81128e48:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81128e4c:	113b3740 	call	8113b374 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81128e50:	1129c3c0 	call	81129c3c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81128e54:	1129c8c0 	call	81129c8c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81128e58:	1129e100 	call	81129e10 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81128e5c:	1129b540 	call	81129b54 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81128e60:	112bdd00 	call	8112bdd0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81128e64:	112c7180 	call	8112c718 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81128e68:	112e9e80 	call	8112e9e8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81128e6c:	1129d000 	call	81129d00 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81128e70:	1129d880 	call	81129d88 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
81128e74:	1131d8c0 	call	81131d8c <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81128e78:	113b3a00 	call	8113b3a0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81128e7c:	112a6ec0 	call	8112a6ec <OSDebugInit>
#endif
}
81128e80:	0001883a 	nop
81128e84:	e037883a 	mov	sp,fp
81128e88:	dfc00117 	ldw	ra,4(sp)
81128e8c:	df000017 	ldw	fp,0(sp)
81128e90:	dec00204 	addi	sp,sp,8
81128e94:	f800283a 	ret

81128e98 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81128e98:	deffff04 	addi	sp,sp,-4
81128e9c:	de00012e 	bgeu	sp,et,81128ea4 <OSIntEnter+0xc>
81128ea0:	003b68fa 	trap	3
81128ea4:	df000015 	stw	fp,0(sp)
81128ea8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81128eac:	d0a07403 	ldbu	r2,-32304(gp)
81128eb0:	10803fcc 	andi	r2,r2,255
81128eb4:	10800058 	cmpnei	r2,r2,1
81128eb8:	1000071e 	bne	r2,zero,81128ed8 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
81128ebc:	d0a08403 	ldbu	r2,-32240(gp)
81128ec0:	10803fcc 	andi	r2,r2,255
81128ec4:	10803fe0 	cmpeqi	r2,r2,255
81128ec8:	1000031e 	bne	r2,zero,81128ed8 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
81128ecc:	d0a08403 	ldbu	r2,-32240(gp)
81128ed0:	10800044 	addi	r2,r2,1
81128ed4:	d0a08405 	stb	r2,-32240(gp)
        }
    }
}
81128ed8:	0001883a 	nop
81128edc:	e037883a 	mov	sp,fp
81128ee0:	df000017 	ldw	fp,0(sp)
81128ee4:	dec00104 	addi	sp,sp,4
81128ee8:	f800283a 	ret

81128eec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
81128eec:	defffb04 	addi	sp,sp,-20
81128ef0:	de00012e 	bgeu	sp,et,81128ef8 <OSIntExit+0xc>
81128ef4:	003b68fa 	trap	3
81128ef8:	dfc00415 	stw	ra,16(sp)
81128efc:	df000315 	stw	fp,12(sp)
81128f00:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128f04:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
81128f08:	d0a07403 	ldbu	r2,-32304(gp)
81128f0c:	10803fcc 	andi	r2,r2,255
81128f10:	10800058 	cmpnei	r2,r2,1
81128f14:	10002f1e 	bne	r2,zero,81128fd4 <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128f18:	0005303a 	rdctl	r2,status
81128f1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128f20:	e0ffff17 	ldw	r3,-4(fp)
81128f24:	00bfff84 	movi	r2,-2
81128f28:	1884703a 	and	r2,r3,r2
81128f2c:	1001703a 	wrctl	status,r2
  
  return context;
81128f30:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81128f34:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81128f38:	d0a08403 	ldbu	r2,-32240(gp)
81128f3c:	10803fcc 	andi	r2,r2,255
81128f40:	10000326 	beq	r2,zero,81128f50 <OSIntExit+0x64>
            OSIntNesting--;
81128f44:	d0a08403 	ldbu	r2,-32240(gp)
81128f48:	10bfffc4 	addi	r2,r2,-1
81128f4c:	d0a08405 	stb	r2,-32240(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81128f50:	d0a08403 	ldbu	r2,-32240(gp)
81128f54:	10803fcc 	andi	r2,r2,255
81128f58:	10001a1e 	bne	r2,zero,81128fc4 <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81128f5c:	d0a07203 	ldbu	r2,-32312(gp)
81128f60:	10803fcc 	andi	r2,r2,255
81128f64:	1000171e 	bne	r2,zero,81128fc4 <OSIntExit+0xd8>
                OS_SchedNew();
81128f68:	112a0a00 	call	8112a0a0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81128f6c:	d0e07683 	ldbu	r3,-32294(gp)
81128f70:	d0a076c3 	ldbu	r2,-32293(gp)
81128f74:	18c03fcc 	andi	r3,r3,255
81128f78:	10803fcc 	andi	r2,r2,255
81128f7c:	18801126 	beq	r3,r2,81128fc4 <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81128f80:	d0a07683 	ldbu	r2,-32294(gp)
81128f84:	10c03fcc 	andi	r3,r2,255
81128f88:	00a04574 	movhi	r2,33045
81128f8c:	10908604 	addi	r2,r2,16920
81128f90:	18c7883a 	add	r3,r3,r3
81128f94:	18c7883a 	add	r3,r3,r3
81128f98:	10c5883a 	add	r2,r2,r3
81128f9c:	10800017 	ldw	r2,0(r2)
81128fa0:	d0a07f15 	stw	r2,-32260(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
81128fa4:	d0a07f17 	ldw	r2,-32260(gp)
81128fa8:	10c00e17 	ldw	r3,56(r2)
81128fac:	18c00044 	addi	r3,r3,1
81128fb0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
81128fb4:	d0a07917 	ldw	r2,-32284(gp)
81128fb8:	10800044 	addi	r2,r2,1
81128fbc:	d0a07915 	stw	r2,-32284(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
81128fc0:	113b0340 	call	8113b034 <OSCtxSw>
81128fc4:	e0bffd17 	ldw	r2,-12(fp)
81128fc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128fcc:	e0bffe17 	ldw	r2,-8(fp)
81128fd0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81128fd4:	0001883a 	nop
81128fd8:	e037883a 	mov	sp,fp
81128fdc:	dfc00117 	ldw	ra,4(sp)
81128fe0:	df000017 	ldw	fp,0(sp)
81128fe4:	dec00204 	addi	sp,sp,8
81128fe8:	f800283a 	ret

81128fec <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
81128fec:	defffc04 	addi	sp,sp,-16
81128ff0:	de00012e 	bgeu	sp,et,81128ff8 <OSSchedLock+0xc>
81128ff4:	003b68fa 	trap	3
81128ff8:	df000315 	stw	fp,12(sp)
81128ffc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129000:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
81129004:	d0a07403 	ldbu	r2,-32304(gp)
81129008:	10803fcc 	andi	r2,r2,255
8112900c:	10800058 	cmpnei	r2,r2,1
81129010:	1000161e 	bne	r2,zero,8112906c <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129014:	0005303a 	rdctl	r2,status
81129018:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112901c:	e0ffff17 	ldw	r3,-4(fp)
81129020:	00bfff84 	movi	r2,-2
81129024:	1884703a 	and	r2,r3,r2
81129028:	1001703a 	wrctl	status,r2
  
  return context;
8112902c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81129030:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
81129034:	d0a08403 	ldbu	r2,-32240(gp)
81129038:	10803fcc 	andi	r2,r2,255
8112903c:	1000071e 	bne	r2,zero,8112905c <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81129040:	d0a07203 	ldbu	r2,-32312(gp)
81129044:	10803fcc 	andi	r2,r2,255
81129048:	10803fe0 	cmpeqi	r2,r2,255
8112904c:	1000031e 	bne	r2,zero,8112905c <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81129050:	d0a07203 	ldbu	r2,-32312(gp)
81129054:	10800044 	addi	r2,r2,1
81129058:	d0a07205 	stb	r2,-32312(gp)
8112905c:	e0bffd17 	ldw	r2,-12(fp)
81129060:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129064:	e0bffe17 	ldw	r2,-8(fp)
81129068:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112906c:	0001883a 	nop
81129070:	e037883a 	mov	sp,fp
81129074:	df000017 	ldw	fp,0(sp)
81129078:	dec00104 	addi	sp,sp,4
8112907c:	f800283a 	ret

81129080 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81129080:	defff804 	addi	sp,sp,-32
81129084:	de00012e 	bgeu	sp,et,8112908c <OSSchedUnlock+0xc>
81129088:	003b68fa 	trap	3
8112908c:	dfc00715 	stw	ra,28(sp)
81129090:	df000615 	stw	fp,24(sp)
81129094:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81129098:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8112909c:	d0a07403 	ldbu	r2,-32304(gp)
811290a0:	10803fcc 	andi	r2,r2,255
811290a4:	10800058 	cmpnei	r2,r2,1
811290a8:	1000281e 	bne	r2,zero,8112914c <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811290ac:	0005303a 	rdctl	r2,status
811290b0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811290b4:	e0ffff17 	ldw	r3,-4(fp)
811290b8:	00bfff84 	movi	r2,-2
811290bc:	1884703a 	and	r2,r3,r2
811290c0:	1001703a 	wrctl	status,r2
  
  return context;
811290c4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811290c8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
811290cc:	d0a07203 	ldbu	r2,-32312(gp)
811290d0:	10803fcc 	andi	r2,r2,255
811290d4:	10001926 	beq	r2,zero,8112913c <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
811290d8:	d0a07203 	ldbu	r2,-32312(gp)
811290dc:	10bfffc4 	addi	r2,r2,-1
811290e0:	d0a07205 	stb	r2,-32312(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
811290e4:	d0a07203 	ldbu	r2,-32312(gp)
811290e8:	10803fcc 	andi	r2,r2,255
811290ec:	10000e1e 	bne	r2,zero,81129128 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
811290f0:	d0a08403 	ldbu	r2,-32240(gp)
811290f4:	10803fcc 	andi	r2,r2,255
811290f8:	1000061e 	bne	r2,zero,81129114 <OSSchedUnlock+0x94>
811290fc:	e0bffa17 	ldw	r2,-24(fp)
81129100:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129104:	e0bffb17 	ldw	r2,-20(fp)
81129108:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
8112910c:	1129fc80 	call	81129fc8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
81129110:	00000e06 	br	8112914c <OSSchedUnlock+0xcc>
81129114:	e0bffa17 	ldw	r2,-24(fp)
81129118:	e0bffc15 	stw	r2,-16(fp)
8112911c:	e0bffc17 	ldw	r2,-16(fp)
81129120:	1001703a 	wrctl	status,r2
81129124:	00000906 	br	8112914c <OSSchedUnlock+0xcc>
81129128:	e0bffa17 	ldw	r2,-24(fp)
8112912c:	e0bffd15 	stw	r2,-12(fp)
81129130:	e0bffd17 	ldw	r2,-12(fp)
81129134:	1001703a 	wrctl	status,r2
81129138:	00000406 	br	8112914c <OSSchedUnlock+0xcc>
8112913c:	e0bffa17 	ldw	r2,-24(fp)
81129140:	e0bffe15 	stw	r2,-8(fp)
81129144:	e0bffe17 	ldw	r2,-8(fp)
81129148:	1001703a 	wrctl	status,r2
8112914c:	0001883a 	nop
81129150:	e037883a 	mov	sp,fp
81129154:	dfc00117 	ldw	ra,4(sp)
81129158:	df000017 	ldw	fp,0(sp)
8112915c:	dec00204 	addi	sp,sp,8
81129160:	f800283a 	ret

81129164 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81129164:	defffe04 	addi	sp,sp,-8
81129168:	de00012e 	bgeu	sp,et,81129170 <OSStart+0xc>
8112916c:	003b68fa 	trap	3
81129170:	dfc00115 	stw	ra,4(sp)
81129174:	df000015 	stw	fp,0(sp)
81129178:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112917c:	d0a07403 	ldbu	r2,-32304(gp)
81129180:	10803fcc 	andi	r2,r2,255
81129184:	10000f1e 	bne	r2,zero,811291c4 <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81129188:	112a0a00 	call	8112a0a0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112918c:	d0a07683 	ldbu	r2,-32294(gp)
81129190:	d0a076c5 	stb	r2,-32293(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81129194:	d0a07683 	ldbu	r2,-32294(gp)
81129198:	10c03fcc 	andi	r3,r2,255
8112919c:	00a04574 	movhi	r2,33045
811291a0:	10908604 	addi	r2,r2,16920
811291a4:	18c7883a 	add	r3,r3,r3
811291a8:	18c7883a 	add	r3,r3,r3
811291ac:	10c5883a 	add	r2,r2,r3
811291b0:	10800017 	ldw	r2,0(r2)
811291b4:	d0a07f15 	stw	r2,-32260(gp)
        OSTCBCur      = OSTCBHighRdy;
811291b8:	d0a07f17 	ldw	r2,-32260(gp)
811291bc:	d0a08515 	stw	r2,-32236(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
811291c0:	113b0d00 	call	8113b0d0 <OSStartHighRdy>
    }
}
811291c4:	0001883a 	nop
811291c8:	e037883a 	mov	sp,fp
811291cc:	dfc00117 	ldw	ra,4(sp)
811291d0:	df000017 	ldw	fp,0(sp)
811291d4:	dec00204 	addi	sp,sp,8
811291d8:	f800283a 	ret

811291dc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
811291dc:	defff904 	addi	sp,sp,-28
811291e0:	de00012e 	bgeu	sp,et,811291e8 <OSStatInit+0xc>
811291e4:	003b68fa 	trap	3
811291e8:	dfc00615 	stw	ra,24(sp)
811291ec:	df000515 	stw	fp,20(sp)
811291f0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811291f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
811291f8:	01000084 	movi	r4,2
811291fc:	1130d040 	call	81130d04 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129200:	0005303a 	rdctl	r2,status
81129204:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129208:	e0fffc17 	ldw	r3,-16(fp)
8112920c:	00bfff84 	movi	r2,-2
81129210:	1884703a 	and	r2,r3,r2
81129214:	1001703a 	wrctl	status,r2
  
  return context;
81129218:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
8112921c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81129220:	d0207515 	stw	zero,-32300(gp)
81129224:	e0bffb17 	ldw	r2,-20(fp)
81129228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112922c:	e0bffd17 	ldw	r2,-12(fp)
81129230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
81129234:	01001904 	movi	r4,100
81129238:	1130d040 	call	81130d04 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112923c:	0005303a 	rdctl	r2,status
81129240:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129244:	e0fffe17 	ldw	r3,-8(fp)
81129248:	00bfff84 	movi	r2,-2
8112924c:	1884703a 	and	r2,r3,r2
81129250:	1001703a 	wrctl	status,r2
  
  return context;
81129254:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81129258:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
8112925c:	d0a07517 	ldw	r2,-32300(gp)
81129260:	d0a07b15 	stw	r2,-32276(gp)
    OSStatRdy    = OS_TRUE;
81129264:	00800044 	movi	r2,1
81129268:	d0a08a05 	stb	r2,-32216(gp)
8112926c:	e0bffb17 	ldw	r2,-20(fp)
81129270:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129274:	e0bfff17 	ldw	r2,-4(fp)
81129278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112927c:	0001883a 	nop
81129280:	e037883a 	mov	sp,fp
81129284:	dfc00117 	ldw	ra,4(sp)
81129288:	df000017 	ldw	fp,0(sp)
8112928c:	dec00204 	addi	sp,sp,8
81129290:	f800283a 	ret

81129294 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
81129294:	defff704 	addi	sp,sp,-36
81129298:	de00012e 	bgeu	sp,et,811292a0 <OSTimeTick+0xc>
8112929c:	003b68fa 	trap	3
811292a0:	dfc00815 	stw	ra,32(sp)
811292a4:	df000715 	stw	fp,28(sp)
811292a8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811292ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
811292b0:	113b3200 	call	8113b320 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811292b4:	0005303a 	rdctl	r2,status
811292b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811292bc:	e0fffd17 	ldw	r3,-12(fp)
811292c0:	00bfff84 	movi	r2,-2
811292c4:	1884703a 	and	r2,r3,r2
811292c8:	1001703a 	wrctl	status,r2
  
  return context;
811292cc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
811292d0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
811292d4:	d0a08717 	ldw	r2,-32228(gp)
811292d8:	10800044 	addi	r2,r2,1
811292dc:	d0a08715 	stw	r2,-32228(gp)
811292e0:	e0bffb17 	ldw	r2,-20(fp)
811292e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811292e8:	e0bfff17 	ldw	r2,-4(fp)
811292ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
811292f0:	d0a07403 	ldbu	r2,-32304(gp)
811292f4:	10803fcc 	andi	r2,r2,255
811292f8:	10800058 	cmpnei	r2,r2,1
811292fc:	10006a1e 	bne	r2,zero,811294a8 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81129300:	d0a07803 	ldbu	r2,-32288(gp)
81129304:	10803fcc 	andi	r2,r2,255
81129308:	10c00060 	cmpeqi	r3,r2,1
8112930c:	1800061e 	bne	r3,zero,81129328 <OSTimeTick+0x94>
81129310:	10c000a0 	cmpeqi	r3,r2,2
81129314:	1800061e 	bne	r3,zero,81129330 <OSTimeTick+0x9c>
81129318:	10000a1e 	bne	r2,zero,81129344 <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
8112931c:	00800044 	movi	r2,1
81129320:	e0bffa05 	stb	r2,-24(fp)
                 break;
81129324:	00000b06 	br	81129354 <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81129328:	e03ffa05 	stb	zero,-24(fp)
                 break;
8112932c:	00000906 	br	81129354 <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81129330:	00800044 	movi	r2,1
81129334:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81129338:	00800044 	movi	r2,1
8112933c:	d0a07805 	stb	r2,-32288(gp)
                 break;
81129340:	00000406 	br	81129354 <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81129344:	00800044 	movi	r2,1
81129348:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112934c:	d0207805 	stb	zero,-32288(gp)
                 break;
81129350:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81129354:	e0bffa03 	ldbu	r2,-24(fp)
81129358:	10005226 	beq	r2,zero,811294a4 <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112935c:	d0a07717 	ldw	r2,-32292(gp)
81129360:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81129364:	00004906 	br	8112948c <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129368:	0005303a 	rdctl	r2,status
8112936c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129370:	e0fffc17 	ldw	r3,-16(fp)
81129374:	00bfff84 	movi	r2,-2
81129378:	1884703a 	and	r2,r3,r2
8112937c:	1001703a 	wrctl	status,r2
  
  return context;
81129380:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81129384:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
81129388:	e0bff917 	ldw	r2,-28(fp)
8112938c:	10800b8b 	ldhu	r2,46(r2)
81129390:	10bfffcc 	andi	r2,r2,65535
81129394:	10003626 	beq	r2,zero,81129470 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
81129398:	e0bff917 	ldw	r2,-28(fp)
8112939c:	10800b8b 	ldhu	r2,46(r2)
811293a0:	10bfffc4 	addi	r2,r2,-1
811293a4:	1007883a 	mov	r3,r2
811293a8:	e0bff917 	ldw	r2,-28(fp)
811293ac:	10c00b8d 	sth	r3,46(r2)
811293b0:	e0bff917 	ldw	r2,-28(fp)
811293b4:	10800b8b 	ldhu	r2,46(r2)
811293b8:	10bfffcc 	andi	r2,r2,65535
811293bc:	10002c1e 	bne	r2,zero,81129470 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
811293c0:	e0bff917 	ldw	r2,-28(fp)
811293c4:	10800c03 	ldbu	r2,48(r2)
811293c8:	10803fcc 	andi	r2,r2,255
811293cc:	10800dcc 	andi	r2,r2,55
811293d0:	10000b26 	beq	r2,zero,81129400 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
811293d4:	e0bff917 	ldw	r2,-28(fp)
811293d8:	10c00c03 	ldbu	r3,48(r2)
811293dc:	00bff204 	movi	r2,-56
811293e0:	1884703a 	and	r2,r3,r2
811293e4:	1007883a 	mov	r3,r2
811293e8:	e0bff917 	ldw	r2,-28(fp)
811293ec:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
811293f0:	e0bff917 	ldw	r2,-28(fp)
811293f4:	00c00044 	movi	r3,1
811293f8:	10c00c45 	stb	r3,49(r2)
811293fc:	00000206 	br	81129408 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81129400:	e0bff917 	ldw	r2,-28(fp)
81129404:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81129408:	e0bff917 	ldw	r2,-28(fp)
8112940c:	10800c03 	ldbu	r2,48(r2)
81129410:	10803fcc 	andi	r2,r2,255
81129414:	1080020c 	andi	r2,r2,8
81129418:	1000151e 	bne	r2,zero,81129470 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
8112941c:	e0bff917 	ldw	r2,-28(fp)
81129420:	10c00d83 	ldbu	r3,54(r2)
81129424:	d0a08103 	ldbu	r2,-32252(gp)
81129428:	1884b03a 	or	r2,r3,r2
8112942c:	d0a08105 	stb	r2,-32252(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81129430:	e0bff917 	ldw	r2,-28(fp)
81129434:	10800d03 	ldbu	r2,52(r2)
81129438:	10c03fcc 	andi	r3,r2,255
8112943c:	e0bff917 	ldw	r2,-28(fp)
81129440:	10800d03 	ldbu	r2,52(r2)
81129444:	11003fcc 	andi	r4,r2,255
81129448:	d0a08144 	addi	r2,gp,-32251
8112944c:	2085883a 	add	r2,r4,r2
81129450:	11000003 	ldbu	r4,0(r2)
81129454:	e0bff917 	ldw	r2,-28(fp)
81129458:	10800d43 	ldbu	r2,53(r2)
8112945c:	2084b03a 	or	r2,r4,r2
81129460:	1009883a 	mov	r4,r2
81129464:	d0a08144 	addi	r2,gp,-32251
81129468:	1885883a 	add	r2,r3,r2
8112946c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81129470:	e0bff917 	ldw	r2,-28(fp)
81129474:	10800517 	ldw	r2,20(r2)
81129478:	e0bff915 	stw	r2,-28(fp)
8112947c:	e0bffb17 	ldw	r2,-20(fp)
81129480:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129484:	e0bffe17 	ldw	r2,-8(fp)
81129488:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112948c:	e0bff917 	ldw	r2,-28(fp)
81129490:	10800c83 	ldbu	r2,50(r2)
81129494:	10803fcc 	andi	r2,r2,255
81129498:	10800a18 	cmpnei	r2,r2,40
8112949c:	103fb21e 	bne	r2,zero,81129368 <__reset+0xfb109368>
811294a0:	00000106 	br	811294a8 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
811294a4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
811294a8:	e037883a 	mov	sp,fp
811294ac:	dfc00117 	ldw	ra,4(sp)
811294b0:	df000017 	ldw	fp,0(sp)
811294b4:	dec00204 	addi	sp,sp,8
811294b8:	f800283a 	ret

811294bc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
811294bc:	deffff04 	addi	sp,sp,-4
811294c0:	de00012e 	bgeu	sp,et,811294c8 <OSVersion+0xc>
811294c4:	003b68fa 	trap	3
811294c8:	df000015 	stw	fp,0(sp)
811294cc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
811294d0:	00804784 	movi	r2,286
}
811294d4:	e037883a 	mov	sp,fp
811294d8:	df000017 	ldw	fp,0(sp)
811294dc:	dec00104 	addi	sp,sp,4
811294e0:	f800283a 	ret

811294e4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
811294e4:	deffff04 	addi	sp,sp,-4
811294e8:	de00012e 	bgeu	sp,et,811294f0 <OS_Dummy+0xc>
811294ec:	003b68fa 	trap	3
811294f0:	df000015 	stw	fp,0(sp)
811294f4:	d839883a 	mov	fp,sp
}
811294f8:	0001883a 	nop
811294fc:	e037883a 	mov	sp,fp
81129500:	df000017 	ldw	fp,0(sp)
81129504:	dec00104 	addi	sp,sp,4
81129508:	f800283a 	ret

8112950c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
8112950c:	defff804 	addi	sp,sp,-32
81129510:	de00012e 	bgeu	sp,et,81129518 <OS_EventTaskRdy+0xc>
81129514:	003b68fa 	trap	3
81129518:	dfc00715 	stw	ra,28(sp)
8112951c:	df000615 	stw	fp,24(sp)
81129520:	df000604 	addi	fp,sp,24
81129524:	e13ffc15 	stw	r4,-16(fp)
81129528:	e17ffd15 	stw	r5,-12(fp)
8112952c:	3007883a 	mov	r3,r6
81129530:	3805883a 	mov	r2,r7
81129534:	e0fffe05 	stb	r3,-8(fp)
81129538:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
8112953c:	e0bffc17 	ldw	r2,-16(fp)
81129540:	10800283 	ldbu	r2,10(r2)
81129544:	10c03fcc 	andi	r3,r2,255
81129548:	00a04534 	movhi	r2,33044
8112954c:	10bab004 	addi	r2,r2,-5440
81129550:	10c5883a 	add	r2,r2,r3
81129554:	10800003 	ldbu	r2,0(r2)
81129558:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
8112955c:	e0bffa03 	ldbu	r2,-24(fp)
81129560:	e0fffc17 	ldw	r3,-16(fp)
81129564:	1885883a 	add	r2,r3,r2
81129568:	108002c4 	addi	r2,r2,11
8112956c:	10800003 	ldbu	r2,0(r2)
81129570:	10c03fcc 	andi	r3,r2,255
81129574:	00a04534 	movhi	r2,33044
81129578:	10bab004 	addi	r2,r2,-5440
8112957c:	10c5883a 	add	r2,r2,r3
81129580:	10800003 	ldbu	r2,0(r2)
81129584:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81129588:	e0bffa03 	ldbu	r2,-24(fp)
8112958c:	100490fa 	slli	r2,r2,3
81129590:	1007883a 	mov	r3,r2
81129594:	e0bffa43 	ldbu	r2,-23(fp)
81129598:	1885883a 	add	r2,r3,r2
8112959c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
811295a0:	e0fffa83 	ldbu	r3,-22(fp)
811295a4:	00a04574 	movhi	r2,33045
811295a8:	10908604 	addi	r2,r2,16920
811295ac:	18c7883a 	add	r3,r3,r3
811295b0:	18c7883a 	add	r3,r3,r3
811295b4:	10c5883a 	add	r2,r2,r3
811295b8:	10800017 	ldw	r2,0(r2)
811295bc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
811295c0:	e0bffb17 	ldw	r2,-20(fp)
811295c4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
811295c8:	e0bffb17 	ldw	r2,-20(fp)
811295cc:	e0fffd17 	ldw	r3,-12(fp)
811295d0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
811295d4:	e0bffb17 	ldw	r2,-20(fp)
811295d8:	10800c03 	ldbu	r2,48(r2)
811295dc:	1007883a 	mov	r3,r2
811295e0:	e0bffe03 	ldbu	r2,-8(fp)
811295e4:	0084303a 	nor	r2,zero,r2
811295e8:	1884703a 	and	r2,r3,r2
811295ec:	1007883a 	mov	r3,r2
811295f0:	e0bffb17 	ldw	r2,-20(fp)
811295f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
811295f8:	e0bffb17 	ldw	r2,-20(fp)
811295fc:	e0ffff03 	ldbu	r3,-4(fp)
81129600:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
81129604:	e0bffb17 	ldw	r2,-20(fp)
81129608:	10800c03 	ldbu	r2,48(r2)
8112960c:	10803fcc 	andi	r2,r2,255
81129610:	1080020c 	andi	r2,r2,8
81129614:	1000111e 	bne	r2,zero,8112965c <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
81129618:	e0bffb17 	ldw	r2,-20(fp)
8112961c:	10c00d83 	ldbu	r3,54(r2)
81129620:	d0a08103 	ldbu	r2,-32252(gp)
81129624:	1884b03a 	or	r2,r3,r2
81129628:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
8112962c:	e0fffa03 	ldbu	r3,-24(fp)
81129630:	e13ffa03 	ldbu	r4,-24(fp)
81129634:	d0a08144 	addi	r2,gp,-32251
81129638:	2085883a 	add	r2,r4,r2
8112963c:	11000003 	ldbu	r4,0(r2)
81129640:	e0bffb17 	ldw	r2,-20(fp)
81129644:	10800d43 	ldbu	r2,53(r2)
81129648:	2084b03a 	or	r2,r4,r2
8112964c:	1009883a 	mov	r4,r2
81129650:	d0a08144 	addi	r2,gp,-32251
81129654:	1885883a 	add	r2,r3,r2
81129658:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
8112965c:	e17ffc17 	ldw	r5,-16(fp)
81129660:	e13ffb17 	ldw	r4,-20(fp)
81129664:	112991c0 	call	8112991c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81129668:	e0bffb17 	ldw	r2,-20(fp)
8112966c:	10800817 	ldw	r2,32(r2)
81129670:	10000826 	beq	r2,zero,81129694 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81129674:	e0bffb17 	ldw	r2,-20(fp)
81129678:	10800817 	ldw	r2,32(r2)
8112967c:	100b883a 	mov	r5,r2
81129680:	e13ffb17 	ldw	r4,-20(fp)
81129684:	11299dc0 	call	811299dc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81129688:	e0bffb17 	ldw	r2,-20(fp)
8112968c:	e0fffc17 	ldw	r3,-16(fp)
81129690:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
81129694:	e0bffa83 	ldbu	r2,-22(fp)
}
81129698:	e037883a 	mov	sp,fp
8112969c:	dfc00117 	ldw	ra,4(sp)
811296a0:	df000017 	ldw	fp,0(sp)
811296a4:	dec00204 	addi	sp,sp,8
811296a8:	f800283a 	ret

811296ac <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
811296ac:	defffd04 	addi	sp,sp,-12
811296b0:	de00012e 	bgeu	sp,et,811296b8 <OS_EventTaskWait+0xc>
811296b4:	003b68fa 	trap	3
811296b8:	df000215 	stw	fp,8(sp)
811296bc:	df000204 	addi	fp,sp,8
811296c0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
811296c4:	d0a08517 	ldw	r2,-32236(gp)
811296c8:	e0ffff17 	ldw	r3,-4(fp)
811296cc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
811296d0:	d0a08517 	ldw	r2,-32236(gp)
811296d4:	10800d03 	ldbu	r2,52(r2)
811296d8:	10803fcc 	andi	r2,r2,255
811296dc:	d0e08517 	ldw	r3,-32236(gp)
811296e0:	18c00d03 	ldbu	r3,52(r3)
811296e4:	18c03fcc 	andi	r3,r3,255
811296e8:	e13fff17 	ldw	r4,-4(fp)
811296ec:	20c7883a 	add	r3,r4,r3
811296f0:	18c002c4 	addi	r3,r3,11
811296f4:	19000003 	ldbu	r4,0(r3)
811296f8:	d0e08517 	ldw	r3,-32236(gp)
811296fc:	18c00d43 	ldbu	r3,53(r3)
81129700:	20c6b03a 	or	r3,r4,r3
81129704:	1809883a 	mov	r4,r3
81129708:	e0ffff17 	ldw	r3,-4(fp)
8112970c:	1885883a 	add	r2,r3,r2
81129710:	108002c4 	addi	r2,r2,11
81129714:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81129718:	e0bfff17 	ldw	r2,-4(fp)
8112971c:	10c00283 	ldbu	r3,10(r2)
81129720:	d0a08517 	ldw	r2,-32236(gp)
81129724:	10800d83 	ldbu	r2,54(r2)
81129728:	1884b03a 	or	r2,r3,r2
8112972c:	1007883a 	mov	r3,r2
81129730:	e0bfff17 	ldw	r2,-4(fp)
81129734:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81129738:	d0a08517 	ldw	r2,-32236(gp)
8112973c:	10800d03 	ldbu	r2,52(r2)
81129740:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81129744:	e0fffe03 	ldbu	r3,-8(fp)
81129748:	e13ffe03 	ldbu	r4,-8(fp)
8112974c:	d0a08144 	addi	r2,gp,-32251
81129750:	2085883a 	add	r2,r4,r2
81129754:	10800003 	ldbu	r2,0(r2)
81129758:	1009883a 	mov	r4,r2
8112975c:	d0a08517 	ldw	r2,-32236(gp)
81129760:	10800d43 	ldbu	r2,53(r2)
81129764:	0084303a 	nor	r2,zero,r2
81129768:	2084703a 	and	r2,r4,r2
8112976c:	1009883a 	mov	r4,r2
81129770:	d0a08144 	addi	r2,gp,-32251
81129774:	1885883a 	add	r2,r3,r2
81129778:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112977c:	e0fffe03 	ldbu	r3,-8(fp)
81129780:	d0a08144 	addi	r2,gp,-32251
81129784:	1885883a 	add	r2,r3,r2
81129788:	10800003 	ldbu	r2,0(r2)
8112978c:	10803fcc 	andi	r2,r2,255
81129790:	1000071e 	bne	r2,zero,811297b0 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81129794:	d0a08517 	ldw	r2,-32236(gp)
81129798:	10800d83 	ldbu	r2,54(r2)
8112979c:	0084303a 	nor	r2,zero,r2
811297a0:	1007883a 	mov	r3,r2
811297a4:	d0a08103 	ldbu	r2,-32252(gp)
811297a8:	1884703a 	and	r2,r3,r2
811297ac:	d0a08105 	stb	r2,-32252(gp)
    }
}
811297b0:	0001883a 	nop
811297b4:	e037883a 	mov	sp,fp
811297b8:	df000017 	ldw	fp,0(sp)
811297bc:	dec00104 	addi	sp,sp,4
811297c0:	f800283a 	ret

811297c4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
811297c4:	defffb04 	addi	sp,sp,-20
811297c8:	de00012e 	bgeu	sp,et,811297d0 <OS_EventTaskWaitMulti+0xc>
811297cc:	003b68fa 	trap	3
811297d0:	df000415 	stw	fp,16(sp)
811297d4:	df000404 	addi	fp,sp,16
811297d8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
811297dc:	d0a08517 	ldw	r2,-32236(gp)
811297e0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
811297e4:	d0a08517 	ldw	r2,-32236(gp)
811297e8:	e0ffff17 	ldw	r3,-4(fp)
811297ec:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
811297f0:	e0bfff17 	ldw	r2,-4(fp)
811297f4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
811297f8:	e0bffc17 	ldw	r2,-16(fp)
811297fc:	10800017 	ldw	r2,0(r2)
81129800:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81129804:	00002006 	br	81129888 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81129808:	d0a08517 	ldw	r2,-32236(gp)
8112980c:	10800d03 	ldbu	r2,52(r2)
81129810:	10803fcc 	andi	r2,r2,255
81129814:	d0e08517 	ldw	r3,-32236(gp)
81129818:	18c00d03 	ldbu	r3,52(r3)
8112981c:	18c03fcc 	andi	r3,r3,255
81129820:	e13ffd17 	ldw	r4,-12(fp)
81129824:	20c7883a 	add	r3,r4,r3
81129828:	18c002c4 	addi	r3,r3,11
8112982c:	19000003 	ldbu	r4,0(r3)
81129830:	d0e08517 	ldw	r3,-32236(gp)
81129834:	18c00d43 	ldbu	r3,53(r3)
81129838:	20c6b03a 	or	r3,r4,r3
8112983c:	1809883a 	mov	r4,r3
81129840:	e0fffd17 	ldw	r3,-12(fp)
81129844:	1885883a 	add	r2,r3,r2
81129848:	108002c4 	addi	r2,r2,11
8112984c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81129850:	e0bffd17 	ldw	r2,-12(fp)
81129854:	10c00283 	ldbu	r3,10(r2)
81129858:	d0a08517 	ldw	r2,-32236(gp)
8112985c:	10800d83 	ldbu	r2,54(r2)
81129860:	1884b03a 	or	r2,r3,r2
81129864:	1007883a 	mov	r3,r2
81129868:	e0bffd17 	ldw	r2,-12(fp)
8112986c:	10c00285 	stb	r3,10(r2)
        pevents++;
81129870:	e0bffc17 	ldw	r2,-16(fp)
81129874:	10800104 	addi	r2,r2,4
81129878:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
8112987c:	e0bffc17 	ldw	r2,-16(fp)
81129880:	10800017 	ldw	r2,0(r2)
81129884:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81129888:	e0bffd17 	ldw	r2,-12(fp)
8112988c:	103fde1e 	bne	r2,zero,81129808 <__reset+0xfb109808>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81129890:	d0a08517 	ldw	r2,-32236(gp)
81129894:	10800d03 	ldbu	r2,52(r2)
81129898:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112989c:	e0fffe03 	ldbu	r3,-8(fp)
811298a0:	e13ffe03 	ldbu	r4,-8(fp)
811298a4:	d0a08144 	addi	r2,gp,-32251
811298a8:	2085883a 	add	r2,r4,r2
811298ac:	10800003 	ldbu	r2,0(r2)
811298b0:	1009883a 	mov	r4,r2
811298b4:	d0a08517 	ldw	r2,-32236(gp)
811298b8:	10800d43 	ldbu	r2,53(r2)
811298bc:	0084303a 	nor	r2,zero,r2
811298c0:	2084703a 	and	r2,r4,r2
811298c4:	1009883a 	mov	r4,r2
811298c8:	d0a08144 	addi	r2,gp,-32251
811298cc:	1885883a 	add	r2,r3,r2
811298d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
811298d4:	e0fffe03 	ldbu	r3,-8(fp)
811298d8:	d0a08144 	addi	r2,gp,-32251
811298dc:	1885883a 	add	r2,r3,r2
811298e0:	10800003 	ldbu	r2,0(r2)
811298e4:	10803fcc 	andi	r2,r2,255
811298e8:	1000071e 	bne	r2,zero,81129908 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
811298ec:	d0a08517 	ldw	r2,-32236(gp)
811298f0:	10800d83 	ldbu	r2,54(r2)
811298f4:	0084303a 	nor	r2,zero,r2
811298f8:	1007883a 	mov	r3,r2
811298fc:	d0a08103 	ldbu	r2,-32252(gp)
81129900:	1884703a 	and	r2,r3,r2
81129904:	d0a08105 	stb	r2,-32252(gp)
    }
}
81129908:	0001883a 	nop
8112990c:	e037883a 	mov	sp,fp
81129910:	df000017 	ldw	fp,0(sp)
81129914:	dec00104 	addi	sp,sp,4
81129918:	f800283a 	ret

8112991c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8112991c:	defffc04 	addi	sp,sp,-16
81129920:	de00012e 	bgeu	sp,et,81129928 <OS_EventTaskRemove+0xc>
81129924:	003b68fa 	trap	3
81129928:	df000315 	stw	fp,12(sp)
8112992c:	df000304 	addi	fp,sp,12
81129930:	e13ffe15 	stw	r4,-8(fp)
81129934:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81129938:	e0bffe17 	ldw	r2,-8(fp)
8112993c:	10800d03 	ldbu	r2,52(r2)
81129940:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
81129944:	e0bffd03 	ldbu	r2,-12(fp)
81129948:	e0fffd03 	ldbu	r3,-12(fp)
8112994c:	e13fff17 	ldw	r4,-4(fp)
81129950:	20c7883a 	add	r3,r4,r3
81129954:	18c002c4 	addi	r3,r3,11
81129958:	18c00003 	ldbu	r3,0(r3)
8112995c:	1809883a 	mov	r4,r3
81129960:	e0fffe17 	ldw	r3,-8(fp)
81129964:	18c00d43 	ldbu	r3,53(r3)
81129968:	00c6303a 	nor	r3,zero,r3
8112996c:	20c6703a 	and	r3,r4,r3
81129970:	1809883a 	mov	r4,r3
81129974:	e0ffff17 	ldw	r3,-4(fp)
81129978:	1885883a 	add	r2,r3,r2
8112997c:	108002c4 	addi	r2,r2,11
81129980:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
81129984:	e0bffd03 	ldbu	r2,-12(fp)
81129988:	e0ffff17 	ldw	r3,-4(fp)
8112998c:	1885883a 	add	r2,r3,r2
81129990:	108002c4 	addi	r2,r2,11
81129994:	10800003 	ldbu	r2,0(r2)
81129998:	10803fcc 	andi	r2,r2,255
8112999c:	10000a1e 	bne	r2,zero,811299c8 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
811299a0:	e0bfff17 	ldw	r2,-4(fp)
811299a4:	10800283 	ldbu	r2,10(r2)
811299a8:	1007883a 	mov	r3,r2
811299ac:	e0bffe17 	ldw	r2,-8(fp)
811299b0:	10800d83 	ldbu	r2,54(r2)
811299b4:	0084303a 	nor	r2,zero,r2
811299b8:	1884703a 	and	r2,r3,r2
811299bc:	1007883a 	mov	r3,r2
811299c0:	e0bfff17 	ldw	r2,-4(fp)
811299c4:	10c00285 	stb	r3,10(r2)
    }
}
811299c8:	0001883a 	nop
811299cc:	e037883a 	mov	sp,fp
811299d0:	df000017 	ldw	fp,0(sp)
811299d4:	dec00104 	addi	sp,sp,4
811299d8:	f800283a 	ret

811299dc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
811299dc:	defffa04 	addi	sp,sp,-24
811299e0:	de00012e 	bgeu	sp,et,811299e8 <OS_EventTaskRemoveMulti+0xc>
811299e4:	003b68fa 	trap	3
811299e8:	df000515 	stw	fp,20(sp)
811299ec:	df000504 	addi	fp,sp,20
811299f0:	e13ffe15 	stw	r4,-8(fp)
811299f4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
811299f8:	e0bffe17 	ldw	r2,-8(fp)
811299fc:	10800d03 	ldbu	r2,52(r2)
81129a00:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81129a04:	e0bffe17 	ldw	r2,-8(fp)
81129a08:	10800d83 	ldbu	r2,54(r2)
81129a0c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81129a10:	e0bffe17 	ldw	r2,-8(fp)
81129a14:	10800d43 	ldbu	r2,53(r2)
81129a18:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
81129a1c:	e0bfff17 	ldw	r2,-4(fp)
81129a20:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
81129a24:	e0bffb17 	ldw	r2,-20(fp)
81129a28:	10800017 	ldw	r2,0(r2)
81129a2c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81129a30:	00002506 	br	81129ac8 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
81129a34:	e0bffd03 	ldbu	r2,-12(fp)
81129a38:	e0fffd03 	ldbu	r3,-12(fp)
81129a3c:	e13ffc17 	ldw	r4,-16(fp)
81129a40:	20c7883a 	add	r3,r4,r3
81129a44:	18c002c4 	addi	r3,r3,11
81129a48:	18c00003 	ldbu	r3,0(r3)
81129a4c:	1809883a 	mov	r4,r3
81129a50:	e0fffd83 	ldbu	r3,-10(fp)
81129a54:	00c6303a 	nor	r3,zero,r3
81129a58:	20c6703a 	and	r3,r4,r3
81129a5c:	1809883a 	mov	r4,r3
81129a60:	e0fffc17 	ldw	r3,-16(fp)
81129a64:	1885883a 	add	r2,r3,r2
81129a68:	108002c4 	addi	r2,r2,11
81129a6c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
81129a70:	e0bffd03 	ldbu	r2,-12(fp)
81129a74:	e0fffc17 	ldw	r3,-16(fp)
81129a78:	1885883a 	add	r2,r3,r2
81129a7c:	108002c4 	addi	r2,r2,11
81129a80:	10800003 	ldbu	r2,0(r2)
81129a84:	10803fcc 	andi	r2,r2,255
81129a88:	1000091e 	bne	r2,zero,81129ab0 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
81129a8c:	e0bffc17 	ldw	r2,-16(fp)
81129a90:	10800283 	ldbu	r2,10(r2)
81129a94:	1007883a 	mov	r3,r2
81129a98:	e0bffd43 	ldbu	r2,-11(fp)
81129a9c:	0084303a 	nor	r2,zero,r2
81129aa0:	1884703a 	and	r2,r3,r2
81129aa4:	1007883a 	mov	r3,r2
81129aa8:	e0bffc17 	ldw	r2,-16(fp)
81129aac:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81129ab0:	e0bffb17 	ldw	r2,-20(fp)
81129ab4:	10800104 	addi	r2,r2,4
81129ab8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81129abc:	e0bffb17 	ldw	r2,-20(fp)
81129ac0:	10800017 	ldw	r2,0(r2)
81129ac4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81129ac8:	e0bffc17 	ldw	r2,-16(fp)
81129acc:	103fd91e 	bne	r2,zero,81129a34 <__reset+0xfb109a34>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81129ad0:	0001883a 	nop
81129ad4:	e037883a 	mov	sp,fp
81129ad8:	df000017 	ldw	fp,0(sp)
81129adc:	dec00104 	addi	sp,sp,4
81129ae0:	f800283a 	ret

81129ae4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81129ae4:	defffc04 	addi	sp,sp,-16
81129ae8:	de00012e 	bgeu	sp,et,81129af0 <OS_EventWaitListInit+0xc>
81129aec:	003b68fa 	trap	3
81129af0:	df000315 	stw	fp,12(sp)
81129af4:	df000304 	addi	fp,sp,12
81129af8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81129afc:	e0bfff17 	ldw	r2,-4(fp)
81129b00:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
81129b04:	e0bfff17 	ldw	r2,-4(fp)
81129b08:	108002c4 	addi	r2,r2,11
81129b0c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129b10:	e03ffe05 	stb	zero,-8(fp)
81129b14:	00000706 	br	81129b34 <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
81129b18:	e0bffd17 	ldw	r2,-12(fp)
81129b1c:	10c00044 	addi	r3,r2,1
81129b20:	e0fffd15 	stw	r3,-12(fp)
81129b24:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129b28:	e0bffe03 	ldbu	r2,-8(fp)
81129b2c:	10800044 	addi	r2,r2,1
81129b30:	e0bffe05 	stb	r2,-8(fp)
81129b34:	e0bffe03 	ldbu	r2,-8(fp)
81129b38:	108001b0 	cmpltui	r2,r2,6
81129b3c:	103ff61e 	bne	r2,zero,81129b18 <__reset+0xfb109b18>
        *ptbl++ = 0;
    }
}
81129b40:	0001883a 	nop
81129b44:	e037883a 	mov	sp,fp
81129b48:	df000017 	ldw	fp,0(sp)
81129b4c:	dec00104 	addi	sp,sp,4
81129b50:	f800283a 	ret

81129b54 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
81129b54:	defffb04 	addi	sp,sp,-20
81129b58:	de00012e 	bgeu	sp,et,81129b60 <OS_InitEventList+0xc>
81129b5c:	003b68fa 	trap	3
81129b60:	dfc00415 	stw	ra,16(sp)
81129b64:	df000315 	stw	fp,12(sp)
81129b68:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
81129b6c:	01430c04 	movi	r5,3120
81129b70:	01204574 	movhi	r4,33045
81129b74:	2109e404 	addi	r4,r4,10128
81129b78:	1129efc0 	call	81129efc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81129b7c:	00a04574 	movhi	r2,33045
81129b80:	1089e404 	addi	r2,r2,10128
81129b84:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81129b88:	00a04574 	movhi	r2,33045
81129b8c:	1089f104 	addi	r2,r2,10180
81129b90:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81129b94:	e03ffd0d 	sth	zero,-12(fp)
81129b98:	00001306 	br	81129be8 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81129b9c:	e0bffe17 	ldw	r2,-8(fp)
81129ba0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81129ba4:	e0bffe17 	ldw	r2,-8(fp)
81129ba8:	e0ffff17 	ldw	r3,-4(fp)
81129bac:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81129bb0:	e0bffe17 	ldw	r2,-8(fp)
81129bb4:	00c00fc4 	movi	r3,63
81129bb8:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81129bbc:	e0bffe17 	ldw	r2,-8(fp)
81129bc0:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
81129bc4:	e0bffe17 	ldw	r2,-8(fp)
81129bc8:	10800d04 	addi	r2,r2,52
81129bcc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81129bd0:	e0bfff17 	ldw	r2,-4(fp)
81129bd4:	10800d04 	addi	r2,r2,52
81129bd8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81129bdc:	e0bffd0b 	ldhu	r2,-12(fp)
81129be0:	10800044 	addi	r2,r2,1
81129be4:	e0bffd0d 	sth	r2,-12(fp)
81129be8:	e0bffd0b 	ldhu	r2,-12(fp)
81129bec:	10800ef0 	cmpltui	r2,r2,59
81129bf0:	103fea1e 	bne	r2,zero,81129b9c <__reset+0xfb109b9c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81129bf4:	e0bffe17 	ldw	r2,-8(fp)
81129bf8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81129bfc:	e0bffe17 	ldw	r2,-8(fp)
81129c00:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81129c04:	e0bffe17 	ldw	r2,-8(fp)
81129c08:	00c00fc4 	movi	r3,63
81129c0c:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81129c10:	e0bffe17 	ldw	r2,-8(fp)
81129c14:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81129c18:	00a04574 	movhi	r2,33045
81129c1c:	1089e404 	addi	r2,r2,10128
81129c20:	d0a08315 	stw	r2,-32244(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81129c24:	0001883a 	nop
81129c28:	e037883a 	mov	sp,fp
81129c2c:	dfc00117 	ldw	ra,4(sp)
81129c30:	df000017 	ldw	fp,0(sp)
81129c34:	dec00204 	addi	sp,sp,8
81129c38:	f800283a 	ret

81129c3c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81129c3c:	deffff04 	addi	sp,sp,-4
81129c40:	de00012e 	bgeu	sp,et,81129c48 <OS_InitMisc+0xc>
81129c44:	003b68fa 	trap	3
81129c48:	df000015 	stw	fp,0(sp)
81129c4c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81129c50:	d0208715 	stw	zero,-32228(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
81129c54:	d0208405 	stb	zero,-32240(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81129c58:	d0207205 	stb	zero,-32312(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81129c5c:	d0207d45 	stb	zero,-32267(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81129c60:	d0207405 	stb	zero,-32304(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
81129c64:	d0207915 	stw	zero,-32284(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81129c68:	d0207515 	stw	zero,-32300(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81129c6c:	d0208b15 	stw	zero,-32212(gp)
    OSIdleCtrMax  = 0L;
81129c70:	d0207b15 	stw	zero,-32276(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81129c74:	d0208a05 	stb	zero,-32216(gp)
#endif
}
81129c78:	0001883a 	nop
81129c7c:	e037883a 	mov	sp,fp
81129c80:	df000017 	ldw	fp,0(sp)
81129c84:	dec00104 	addi	sp,sp,4
81129c88:	f800283a 	ret

81129c8c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81129c8c:	defffd04 	addi	sp,sp,-12
81129c90:	de00012e 	bgeu	sp,et,81129c98 <OS_InitRdyList+0xc>
81129c94:	003b68fa 	trap	3
81129c98:	df000215 	stw	fp,8(sp)
81129c9c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
81129ca0:	d0208105 	stb	zero,-32252(gp)
    prdytbl       = &OSRdyTbl[0];
81129ca4:	d0a08144 	addi	r2,gp,-32251
81129ca8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81129cac:	e03ffe05 	stb	zero,-8(fp)
81129cb0:	00000706 	br	81129cd0 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
81129cb4:	e0bfff17 	ldw	r2,-4(fp)
81129cb8:	10c00044 	addi	r3,r2,1
81129cbc:	e0ffff15 	stw	r3,-4(fp)
81129cc0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81129cc4:	e0bffe03 	ldbu	r2,-8(fp)
81129cc8:	10800044 	addi	r2,r2,1
81129ccc:	e0bffe05 	stb	r2,-8(fp)
81129cd0:	e0bffe03 	ldbu	r2,-8(fp)
81129cd4:	108001b0 	cmpltui	r2,r2,6
81129cd8:	103ff61e 	bne	r2,zero,81129cb4 <__reset+0xfb109cb4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81129cdc:	d02076c5 	stb	zero,-32293(gp)
    OSPrioHighRdy = 0;
81129ce0:	d0207685 	stb	zero,-32294(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81129ce4:	d0207f15 	stw	zero,-32260(gp)
    OSTCBCur      = (OS_TCB *)0;
81129ce8:	d0208515 	stw	zero,-32236(gp)
}
81129cec:	0001883a 	nop
81129cf0:	e037883a 	mov	sp,fp
81129cf4:	df000017 	ldw	fp,0(sp)
81129cf8:	dec00104 	addi	sp,sp,4
81129cfc:	f800283a 	ret

81129d00 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
81129d00:	defff804 	addi	sp,sp,-32
81129d04:	de00012e 	bgeu	sp,et,81129d0c <OS_InitTaskIdle+0xc>
81129d08:	003b68fa 	trap	3
81129d0c:	dfc00715 	stw	ra,28(sp)
81129d10:	df000615 	stw	fp,24(sp)
81129d14:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
81129d18:	008000c4 	movi	r2,3
81129d1c:	d8800415 	stw	r2,16(sp)
81129d20:	d8000315 	stw	zero,12(sp)
81129d24:	00808004 	movi	r2,512
81129d28:	d8800215 	stw	r2,8(sp)
81129d2c:	00a04574 	movhi	r2,33045
81129d30:	1087e404 	addi	r2,r2,8080
81129d34:	d8800115 	stw	r2,4(sp)
81129d38:	00bfffd4 	movui	r2,65535
81129d3c:	d8800015 	stw	r2,0(sp)
81129d40:	01c00a04 	movi	r7,40
81129d44:	01a04574 	movhi	r6,33045
81129d48:	3189e304 	addi	r6,r6,10124
81129d4c:	000b883a 	mov	r5,zero
81129d50:	012044f4 	movhi	r4,33043
81129d54:	21287d04 	addi	r4,r4,-24076
81129d58:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
81129d5c:	e1bfff04 	addi	r6,fp,-4
81129d60:	01604534 	movhi	r5,33044
81129d64:	297af004 	addi	r5,r5,-5184
81129d68:	01000a04 	movi	r4,40
81129d6c:	11304140 	call	81130414 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
81129d70:	0001883a 	nop
81129d74:	e037883a 	mov	sp,fp
81129d78:	dfc00117 	ldw	ra,4(sp)
81129d7c:	df000017 	ldw	fp,0(sp)
81129d80:	dec00204 	addi	sp,sp,8
81129d84:	f800283a 	ret

81129d88 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
81129d88:	defff804 	addi	sp,sp,-32
81129d8c:	de00012e 	bgeu	sp,et,81129d94 <OS_InitTaskStat+0xc>
81129d90:	003b68fa 	trap	3
81129d94:	dfc00715 	stw	ra,28(sp)
81129d98:	df000615 	stw	fp,24(sp)
81129d9c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
81129da0:	008000c4 	movi	r2,3
81129da4:	d8800415 	stw	r2,16(sp)
81129da8:	d8000315 	stw	zero,12(sp)
81129dac:	00808004 	movi	r2,512
81129db0:	d8800215 	stw	r2,8(sp)
81129db4:	00a04574 	movhi	r2,33045
81129db8:	10836c04 	addi	r2,r2,3504
81129dbc:	d8800115 	stw	r2,4(sp)
81129dc0:	00bfff94 	movui	r2,65534
81129dc4:	d8800015 	stw	r2,0(sp)
81129dc8:	01c009c4 	movi	r7,39
81129dcc:	01a04574 	movhi	r6,33045
81129dd0:	31856b04 	addi	r6,r6,5548
81129dd4:	000b883a 	mov	r5,zero
81129dd8:	012044f4 	movhi	r4,33043
81129ddc:	21289604 	addi	r4,r4,-23976
81129de0:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81129de4:	e1bfff04 	addi	r6,fp,-4
81129de8:	01604534 	movhi	r5,33044
81129dec:	297af404 	addi	r5,r5,-5168
81129df0:	010009c4 	movi	r4,39
81129df4:	11304140 	call	81130414 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81129df8:	0001883a 	nop
81129dfc:	e037883a 	mov	sp,fp
81129e00:	dfc00117 	ldw	ra,4(sp)
81129e04:	df000017 	ldw	fp,0(sp)
81129e08:	dec00204 	addi	sp,sp,8
81129e0c:	f800283a 	ret

81129e10 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81129e10:	defffb04 	addi	sp,sp,-20
81129e14:	de00012e 	bgeu	sp,et,81129e1c <OS_InitTCBList+0xc>
81129e18:	003b68fa 	trap	3
81129e1c:	dfc00415 	stw	ra,16(sp)
81129e20:	df000315 	stw	fp,12(sp)
81129e24:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81129e28:	01439604 	movi	r5,3672
81129e2c:	01204574 	movhi	r4,33045
81129e30:	210cf004 	addi	r4,r4,13248
81129e34:	1129efc0 	call	81129efc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81129e38:	01402904 	movi	r5,164
81129e3c:	01204574 	movhi	r4,33045
81129e40:	21108604 	addi	r4,r4,16920
81129e44:	1129efc0 	call	81129efc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81129e48:	00a04574 	movhi	r2,33045
81129e4c:	108cf004 	addi	r2,r2,13248
81129e50:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
81129e54:	00a04574 	movhi	r2,33045
81129e58:	108d0b04 	addi	r2,r2,13356
81129e5c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81129e60:	e03ffd05 	stb	zero,-12(fp)
81129e64:	00001106 	br	81129eac <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
81129e68:	e0bffe17 	ldw	r2,-8(fp)
81129e6c:	e0ffff17 	ldw	r3,-4(fp)
81129e70:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
81129e74:	e0bffe17 	ldw	r2,-8(fp)
81129e78:	00c00fc4 	movi	r3,63
81129e7c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81129e80:	e0bffe17 	ldw	r2,-8(fp)
81129e84:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
81129e88:	e0bffe17 	ldw	r2,-8(fp)
81129e8c:	10801b04 	addi	r2,r2,108
81129e90:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
81129e94:	e0bfff17 	ldw	r2,-4(fp)
81129e98:	10801b04 	addi	r2,r2,108
81129e9c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81129ea0:	e0bffd03 	ldbu	r2,-12(fp)
81129ea4:	10800044 	addi	r2,r2,1
81129ea8:	e0bffd05 	stb	r2,-12(fp)
81129eac:	e0bffd03 	ldbu	r2,-12(fp)
81129eb0:	10800870 	cmpltui	r2,r2,33
81129eb4:	103fec1e 	bne	r2,zero,81129e68 <__reset+0xfb109e68>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
81129eb8:	e0bffe17 	ldw	r2,-8(fp)
81129ebc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81129ec0:	e0bffe17 	ldw	r2,-8(fp)
81129ec4:	00c00fc4 	movi	r3,63
81129ec8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81129ecc:	e0bffe17 	ldw	r2,-8(fp)
81129ed0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
81129ed4:	d0207715 	stw	zero,-32292(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
81129ed8:	00a04574 	movhi	r2,33045
81129edc:	108cf004 	addi	r2,r2,13248
81129ee0:	d0a07c15 	stw	r2,-32272(gp)
}
81129ee4:	0001883a 	nop
81129ee8:	e037883a 	mov	sp,fp
81129eec:	dfc00117 	ldw	ra,4(sp)
81129ef0:	df000017 	ldw	fp,0(sp)
81129ef4:	dec00204 	addi	sp,sp,8
81129ef8:	f800283a 	ret

81129efc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81129efc:	defffd04 	addi	sp,sp,-12
81129f00:	de00012e 	bgeu	sp,et,81129f08 <OS_MemClr+0xc>
81129f04:	003b68fa 	trap	3
81129f08:	df000215 	stw	fp,8(sp)
81129f0c:	df000204 	addi	fp,sp,8
81129f10:	e13ffe15 	stw	r4,-8(fp)
81129f14:	2805883a 	mov	r2,r5
81129f18:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81129f1c:	00000706 	br	81129f3c <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
81129f20:	e0bffe17 	ldw	r2,-8(fp)
81129f24:	10c00044 	addi	r3,r2,1
81129f28:	e0fffe15 	stw	r3,-8(fp)
81129f2c:	10000005 	stb	zero,0(r2)
        size--;
81129f30:	e0bfff0b 	ldhu	r2,-4(fp)
81129f34:	10bfffc4 	addi	r2,r2,-1
81129f38:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81129f3c:	e0bfff0b 	ldhu	r2,-4(fp)
81129f40:	103ff71e 	bne	r2,zero,81129f20 <__reset+0xfb109f20>
        *pdest++ = (INT8U)0;
        size--;
    }
}
81129f44:	0001883a 	nop
81129f48:	e037883a 	mov	sp,fp
81129f4c:	df000017 	ldw	fp,0(sp)
81129f50:	dec00104 	addi	sp,sp,4
81129f54:	f800283a 	ret

81129f58 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81129f58:	defffc04 	addi	sp,sp,-16
81129f5c:	de00012e 	bgeu	sp,et,81129f64 <OS_MemCopy+0xc>
81129f60:	003b68fa 	trap	3
81129f64:	df000315 	stw	fp,12(sp)
81129f68:	df000304 	addi	fp,sp,12
81129f6c:	e13ffd15 	stw	r4,-12(fp)
81129f70:	e17ffe15 	stw	r5,-8(fp)
81129f74:	3005883a 	mov	r2,r6
81129f78:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81129f7c:	00000b06 	br	81129fac <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
81129f80:	e0bffd17 	ldw	r2,-12(fp)
81129f84:	10c00044 	addi	r3,r2,1
81129f88:	e0fffd15 	stw	r3,-12(fp)
81129f8c:	e0fffe17 	ldw	r3,-8(fp)
81129f90:	19000044 	addi	r4,r3,1
81129f94:	e13ffe15 	stw	r4,-8(fp)
81129f98:	18c00003 	ldbu	r3,0(r3)
81129f9c:	10c00005 	stb	r3,0(r2)
        size--;
81129fa0:	e0bfff0b 	ldhu	r2,-4(fp)
81129fa4:	10bfffc4 	addi	r2,r2,-1
81129fa8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
81129fac:	e0bfff0b 	ldhu	r2,-4(fp)
81129fb0:	103ff31e 	bne	r2,zero,81129f80 <__reset+0xfb109f80>
        *pdest++ = *psrc++;
        size--;
    }
}
81129fb4:	0001883a 	nop
81129fb8:	e037883a 	mov	sp,fp
81129fbc:	df000017 	ldw	fp,0(sp)
81129fc0:	dec00104 	addi	sp,sp,4
81129fc4:	f800283a 	ret

81129fc8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
81129fc8:	defffb04 	addi	sp,sp,-20
81129fcc:	de00012e 	bgeu	sp,et,81129fd4 <OS_Sched+0xc>
81129fd0:	003b68fa 	trap	3
81129fd4:	dfc00415 	stw	ra,16(sp)
81129fd8:	df000315 	stw	fp,12(sp)
81129fdc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81129fe0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129fe4:	0005303a 	rdctl	r2,status
81129fe8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129fec:	e0ffff17 	ldw	r3,-4(fp)
81129ff0:	00bfff84 	movi	r2,-2
81129ff4:	1884703a 	and	r2,r3,r2
81129ff8:	1001703a 	wrctl	status,r2
  
  return context;
81129ffc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112a000:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112a004:	d0a08403 	ldbu	r2,-32240(gp)
8112a008:	10803fcc 	andi	r2,r2,255
8112a00c:	10001a1e 	bne	r2,zero,8112a078 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112a010:	d0a07203 	ldbu	r2,-32312(gp)
8112a014:	10803fcc 	andi	r2,r2,255
8112a018:	1000171e 	bne	r2,zero,8112a078 <OS_Sched+0xb0>
            OS_SchedNew();
8112a01c:	112a0a00 	call	8112a0a0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112a020:	d0e07683 	ldbu	r3,-32294(gp)
8112a024:	d0a076c3 	ldbu	r2,-32293(gp)
8112a028:	18c03fcc 	andi	r3,r3,255
8112a02c:	10803fcc 	andi	r2,r2,255
8112a030:	18801126 	beq	r3,r2,8112a078 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112a034:	d0a07683 	ldbu	r2,-32294(gp)
8112a038:	10c03fcc 	andi	r3,r2,255
8112a03c:	00a04574 	movhi	r2,33045
8112a040:	10908604 	addi	r2,r2,16920
8112a044:	18c7883a 	add	r3,r3,r3
8112a048:	18c7883a 	add	r3,r3,r3
8112a04c:	10c5883a 	add	r2,r2,r3
8112a050:	10800017 	ldw	r2,0(r2)
8112a054:	d0a07f15 	stw	r2,-32260(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
8112a058:	d0a07f17 	ldw	r2,-32260(gp)
8112a05c:	10c00e17 	ldw	r3,56(r2)
8112a060:	18c00044 	addi	r3,r3,1
8112a064:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
8112a068:	d0a07917 	ldw	r2,-32284(gp)
8112a06c:	10800044 	addi	r2,r2,1
8112a070:	d0a07915 	stw	r2,-32284(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112a074:	113b0340 	call	8113b034 <OSCtxSw>
8112a078:	e0bffd17 	ldw	r2,-12(fp)
8112a07c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a080:	e0bffe17 	ldw	r2,-8(fp)
8112a084:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
8112a088:	0001883a 	nop
8112a08c:	e037883a 	mov	sp,fp
8112a090:	dfc00117 	ldw	ra,4(sp)
8112a094:	df000017 	ldw	fp,0(sp)
8112a098:	dec00204 	addi	sp,sp,8
8112a09c:	f800283a 	ret

8112a0a0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
8112a0a0:	defffe04 	addi	sp,sp,-8
8112a0a4:	de00012e 	bgeu	sp,et,8112a0ac <OS_SchedNew+0xc>
8112a0a8:	003b68fa 	trap	3
8112a0ac:	df000115 	stw	fp,4(sp)
8112a0b0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
8112a0b4:	d0a08103 	ldbu	r2,-32252(gp)
8112a0b8:	10c03fcc 	andi	r3,r2,255
8112a0bc:	00a04534 	movhi	r2,33044
8112a0c0:	10bab004 	addi	r2,r2,-5440
8112a0c4:	10c5883a 	add	r2,r2,r3
8112a0c8:	10800003 	ldbu	r2,0(r2)
8112a0cc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
8112a0d0:	e0bfff03 	ldbu	r2,-4(fp)
8112a0d4:	100490fa 	slli	r2,r2,3
8112a0d8:	1009883a 	mov	r4,r2
8112a0dc:	e0ffff03 	ldbu	r3,-4(fp)
8112a0e0:	d0a08144 	addi	r2,gp,-32251
8112a0e4:	1885883a 	add	r2,r3,r2
8112a0e8:	10800003 	ldbu	r2,0(r2)
8112a0ec:	10c03fcc 	andi	r3,r2,255
8112a0f0:	00a04534 	movhi	r2,33044
8112a0f4:	10bab004 	addi	r2,r2,-5440
8112a0f8:	10c5883a 	add	r2,r2,r3
8112a0fc:	10800003 	ldbu	r2,0(r2)
8112a100:	2085883a 	add	r2,r4,r2
8112a104:	d0a07685 	stb	r2,-32294(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112a108:	0001883a 	nop
8112a10c:	e037883a 	mov	sp,fp
8112a110:	df000017 	ldw	fp,0(sp)
8112a114:	dec00104 	addi	sp,sp,4
8112a118:	f800283a 	ret

8112a11c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112a11c:	defffc04 	addi	sp,sp,-16
8112a120:	de00012e 	bgeu	sp,et,8112a128 <OS_StrCopy+0xc>
8112a124:	003b68fa 	trap	3
8112a128:	df000315 	stw	fp,12(sp)
8112a12c:	df000304 	addi	fp,sp,12
8112a130:	e13ffe15 	stw	r4,-8(fp)
8112a134:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
8112a138:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8112a13c:	00000b06 	br	8112a16c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
8112a140:	e0bffe17 	ldw	r2,-8(fp)
8112a144:	10c00044 	addi	r3,r2,1
8112a148:	e0fffe15 	stw	r3,-8(fp)
8112a14c:	e0ffff17 	ldw	r3,-4(fp)
8112a150:	19000044 	addi	r4,r3,1
8112a154:	e13fff15 	stw	r4,-4(fp)
8112a158:	18c00003 	ldbu	r3,0(r3)
8112a15c:	10c00005 	stb	r3,0(r2)
        len++;
8112a160:	e0bffd03 	ldbu	r2,-12(fp)
8112a164:	10800044 	addi	r2,r2,1
8112a168:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112a16c:	e0bfff17 	ldw	r2,-4(fp)
8112a170:	10800003 	ldbu	r2,0(r2)
8112a174:	10803fcc 	andi	r2,r2,255
8112a178:	103ff11e 	bne	r2,zero,8112a140 <__reset+0xfb10a140>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8112a17c:	e0bffe17 	ldw	r2,-8(fp)
8112a180:	10000005 	stb	zero,0(r2)
    return (len);
8112a184:	e0bffd03 	ldbu	r2,-12(fp)
}
8112a188:	e037883a 	mov	sp,fp
8112a18c:	df000017 	ldw	fp,0(sp)
8112a190:	dec00104 	addi	sp,sp,4
8112a194:	f800283a 	ret

8112a198 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
8112a198:	defffd04 	addi	sp,sp,-12
8112a19c:	de00012e 	bgeu	sp,et,8112a1a4 <OS_StrLen+0xc>
8112a1a0:	003b68fa 	trap	3
8112a1a4:	df000215 	stw	fp,8(sp)
8112a1a8:	df000204 	addi	fp,sp,8
8112a1ac:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
8112a1b0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
8112a1b4:	00000606 	br	8112a1d0 <OS_StrLen+0x38>
        psrc++;
8112a1b8:	e0bfff17 	ldw	r2,-4(fp)
8112a1bc:	10800044 	addi	r2,r2,1
8112a1c0:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112a1c4:	e0bffe03 	ldbu	r2,-8(fp)
8112a1c8:	10800044 	addi	r2,r2,1
8112a1cc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112a1d0:	e0bfff17 	ldw	r2,-4(fp)
8112a1d4:	10800003 	ldbu	r2,0(r2)
8112a1d8:	10803fcc 	andi	r2,r2,255
8112a1dc:	103ff61e 	bne	r2,zero,8112a1b8 <__reset+0xfb10a1b8>
        psrc++;
        len++;
    }
    return (len);
8112a1e0:	e0bffe03 	ldbu	r2,-8(fp)
}
8112a1e4:	e037883a 	mov	sp,fp
8112a1e8:	df000017 	ldw	fp,0(sp)
8112a1ec:	dec00104 	addi	sp,sp,4
8112a1f0:	f800283a 	ret

8112a1f4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112a1f4:	defffa04 	addi	sp,sp,-24
8112a1f8:	de00012e 	bgeu	sp,et,8112a200 <OS_TaskIdle+0xc>
8112a1fc:	003b68fa 	trap	3
8112a200:	dfc00515 	stw	ra,20(sp)
8112a204:	df000415 	stw	fp,16(sp)
8112a208:	df000404 	addi	fp,sp,16
8112a20c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a210:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a214:	0005303a 	rdctl	r2,status
8112a218:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a21c:	e0fffd17 	ldw	r3,-12(fp)
8112a220:	00bfff84 	movi	r2,-2
8112a224:	1884703a 	and	r2,r3,r2
8112a228:	1001703a 	wrctl	status,r2
  
  return context;
8112a22c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112a230:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112a234:	d0a07517 	ldw	r2,-32300(gp)
8112a238:	10800044 	addi	r2,r2,1
8112a23c:	d0a07515 	stw	r2,-32300(gp)
8112a240:	e0bffc17 	ldw	r2,-16(fp)
8112a244:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a248:	e0bffe17 	ldw	r2,-8(fp)
8112a24c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112a250:	113b3c80 	call	8113b3c8 <OSTaskIdleHook>
    }
8112a254:	003fef06 	br	8112a214 <__reset+0xfb10a214>

8112a258 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112a258:	defff804 	addi	sp,sp,-32
8112a25c:	de00012e 	bgeu	sp,et,8112a264 <OS_TaskStat+0xc>
8112a260:	003b68fa 	trap	3
8112a264:	dfc00715 	stw	ra,28(sp)
8112a268:	df000615 	stw	fp,24(sp)
8112a26c:	dc400515 	stw	r17,20(sp)
8112a270:	dc000415 	stw	r16,16(sp)
8112a274:	df000604 	addi	fp,sp,24
8112a278:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a27c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112a280:	00000206 	br	8112a28c <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112a284:	01003204 	movi	r4,200
8112a288:	1130d040 	call	81130d04 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112a28c:	d0a08a03 	ldbu	r2,-32216(gp)
8112a290:	10803fcc 	andi	r2,r2,255
8112a294:	103ffb26 	beq	r2,zero,8112a284 <__reset+0xfb10a284>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112a298:	d0e07b17 	ldw	r3,-32276(gp)
8112a29c:	00947b34 	movhi	r2,20972
8112a2a0:	10a147c4 	addi	r2,r2,-31457
8112a2a4:	1888383a 	mulxuu	r4,r3,r2
8112a2a8:	1885383a 	mul	r2,r3,r2
8112a2ac:	1021883a 	mov	r16,r2
8112a2b0:	2023883a 	mov	r17,r4
8112a2b4:	8804d17a 	srli	r2,r17,5
8112a2b8:	d0a07b15 	stw	r2,-32276(gp)
    if (OSIdleCtrMax == 0L) {
8112a2bc:	d0a07b17 	ldw	r2,-32276(gp)
8112a2c0:	1000031e 	bne	r2,zero,8112a2d0 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112a2c4:	d0207d05 	stb	zero,-32268(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112a2c8:	01003fc4 	movi	r4,255
8112a2cc:	11309740 	call	81130974 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a2d0:	0005303a 	rdctl	r2,status
8112a2d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a2d8:	e0fffb17 	ldw	r3,-20(fp)
8112a2dc:	00bfff84 	movi	r2,-2
8112a2e0:	1884703a 	and	r2,r3,r2
8112a2e4:	1001703a 	wrctl	status,r2
  
  return context;
8112a2e8:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112a2ec:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112a2f0:	d0a07517 	ldw	r2,-32300(gp)
8112a2f4:	d0a08b15 	stw	r2,-32212(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112a2f8:	d0207515 	stw	zero,-32300(gp)
8112a2fc:	e0bffa17 	ldw	r2,-24(fp)
8112a300:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a304:	e0bffc17 	ldw	r2,-16(fp)
8112a308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112a30c:	d0e08b17 	ldw	r3,-32212(gp)
8112a310:	d0a07b17 	ldw	r2,-32276(gp)
8112a314:	1885203a 	divu	r2,r3,r2
8112a318:	1007883a 	mov	r3,r2
8112a31c:	00801904 	movi	r2,100
8112a320:	10c5c83a 	sub	r2,r2,r3
8112a324:	d0a07d05 	stb	r2,-32268(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112a328:	113b2f80 	call	8113b2f8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112a32c:	112a33c0 	call	8112a33c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112a330:	01001904 	movi	r4,100
8112a334:	1130d040 	call	81130d04 <OSTimeDly>
    }
8112a338:	003fe506 	br	8112a2d0 <__reset+0xfb10a2d0>

8112a33c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112a33c:	defffa04 	addi	sp,sp,-24
8112a340:	de00012e 	bgeu	sp,et,8112a348 <OS_TaskStatStkChk+0xc>
8112a344:	003b68fa 	trap	3
8112a348:	dfc00515 	stw	ra,20(sp)
8112a34c:	df000415 	stw	fp,16(sp)
8112a350:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112a354:	e03ffc05 	stb	zero,-16(fp)
8112a358:	00002406 	br	8112a3ec <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112a35c:	e0bffc03 	ldbu	r2,-16(fp)
8112a360:	e0fffe04 	addi	r3,fp,-8
8112a364:	180b883a 	mov	r5,r3
8112a368:	1009883a 	mov	r4,r2
8112a36c:	11307ac0 	call	811307ac <OSTaskStkChk>
8112a370:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112a374:	e0bffc43 	ldbu	r2,-15(fp)
8112a378:	1000191e 	bne	r2,zero,8112a3e0 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112a37c:	e0fffc03 	ldbu	r3,-16(fp)
8112a380:	00a04574 	movhi	r2,33045
8112a384:	10908604 	addi	r2,r2,16920
8112a388:	18c7883a 	add	r3,r3,r3
8112a38c:	18c7883a 	add	r3,r3,r3
8112a390:	10c5883a 	add	r2,r2,r3
8112a394:	10800017 	ldw	r2,0(r2)
8112a398:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112a39c:	e0bffd17 	ldw	r2,-12(fp)
8112a3a0:	10000f26 	beq	r2,zero,8112a3e0 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112a3a4:	e0bffd17 	ldw	r2,-12(fp)
8112a3a8:	10800060 	cmpeqi	r2,r2,1
8112a3ac:	10000c1e 	bne	r2,zero,8112a3e0 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112a3b0:	e0bffd17 	ldw	r2,-12(fp)
8112a3b4:	10c00217 	ldw	r3,8(r2)
8112a3b8:	e0bffd17 	ldw	r2,-12(fp)
8112a3bc:	10800317 	ldw	r2,12(r2)
8112a3c0:	1085883a 	add	r2,r2,r2
8112a3c4:	1085883a 	add	r2,r2,r2
8112a3c8:	1887883a 	add	r3,r3,r2
8112a3cc:	e0bffd17 	ldw	r2,-12(fp)
8112a3d0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112a3d4:	e0ffff17 	ldw	r3,-4(fp)
8112a3d8:	e0bffd17 	ldw	r2,-12(fp)
8112a3dc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112a3e0:	e0bffc03 	ldbu	r2,-16(fp)
8112a3e4:	10800044 	addi	r2,r2,1
8112a3e8:	e0bffc05 	stb	r2,-16(fp)
8112a3ec:	e0bffc03 	ldbu	r2,-16(fp)
8112a3f0:	10800a70 	cmpltui	r2,r2,41
8112a3f4:	103fd91e 	bne	r2,zero,8112a35c <__reset+0xfb10a35c>
#endif
                }
            }
        }
    }
}
8112a3f8:	0001883a 	nop
8112a3fc:	e037883a 	mov	sp,fp
8112a400:	dfc00117 	ldw	ra,4(sp)
8112a404:	df000017 	ldw	fp,0(sp)
8112a408:	dec00204 	addi	sp,sp,8
8112a40c:	f800283a 	ret

8112a410 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112a410:	defff204 	addi	sp,sp,-56
8112a414:	de00012e 	bgeu	sp,et,8112a41c <OS_TCBInit+0xc>
8112a418:	003b68fa 	trap	3
8112a41c:	dfc00d15 	stw	ra,52(sp)
8112a420:	df000c15 	stw	fp,48(sp)
8112a424:	df000c04 	addi	fp,sp,48
8112a428:	e17ffc15 	stw	r5,-16(fp)
8112a42c:	e1bffd15 	stw	r6,-12(fp)
8112a430:	3807883a 	mov	r3,r7
8112a434:	e0800417 	ldw	r2,16(fp)
8112a438:	e13ffb05 	stb	r4,-20(fp)
8112a43c:	e0fffe0d 	sth	r3,-8(fp)
8112a440:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a444:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a448:	0005303a 	rdctl	r2,status
8112a44c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a450:	e0fffa17 	ldw	r3,-24(fp)
8112a454:	00bfff84 	movi	r2,-2
8112a458:	1884703a 	and	r2,r3,r2
8112a45c:	1001703a 	wrctl	status,r2
  
  return context;
8112a460:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112a464:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112a468:	d0a07c17 	ldw	r2,-32272(gp)
8112a46c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112a470:	e0bff617 	ldw	r2,-40(fp)
8112a474:	10009326 	beq	r2,zero,8112a6c4 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112a478:	e0bff617 	ldw	r2,-40(fp)
8112a47c:	10800517 	ldw	r2,20(r2)
8112a480:	d0a07c15 	stw	r2,-32272(gp)
8112a484:	e0bff417 	ldw	r2,-48(fp)
8112a488:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a48c:	e0bff817 	ldw	r2,-32(fp)
8112a490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112a494:	e0bff617 	ldw	r2,-40(fp)
8112a498:	e0fffc17 	ldw	r3,-16(fp)
8112a49c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112a4a0:	e0bff617 	ldw	r2,-40(fp)
8112a4a4:	e0fffb03 	ldbu	r3,-20(fp)
8112a4a8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112a4ac:	e0bff617 	ldw	r2,-40(fp)
8112a4b0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112a4b4:	e0bff617 	ldw	r2,-40(fp)
8112a4b8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112a4bc:	e0bff617 	ldw	r2,-40(fp)
8112a4c0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112a4c4:	e0bff617 	ldw	r2,-40(fp)
8112a4c8:	e0c00317 	ldw	r3,12(fp)
8112a4cc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112a4d0:	e0bff617 	ldw	r2,-40(fp)
8112a4d4:	e0c00217 	ldw	r3,8(fp)
8112a4d8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112a4dc:	e0bff617 	ldw	r2,-40(fp)
8112a4e0:	e0fffd17 	ldw	r3,-12(fp)
8112a4e4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112a4e8:	e0bff617 	ldw	r2,-40(fp)
8112a4ec:	e0ffff0b 	ldhu	r3,-4(fp)
8112a4f0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112a4f4:	e0bff617 	ldw	r2,-40(fp)
8112a4f8:	e0fffe0b 	ldhu	r3,-8(fp)
8112a4fc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112a500:	e0bff617 	ldw	r2,-40(fp)
8112a504:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112a508:	e0bffb03 	ldbu	r2,-20(fp)
8112a50c:	1004d0fa 	srli	r2,r2,3
8112a510:	1007883a 	mov	r3,r2
8112a514:	e0bff617 	ldw	r2,-40(fp)
8112a518:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112a51c:	e0bffb03 	ldbu	r2,-20(fp)
8112a520:	108001cc 	andi	r2,r2,7
8112a524:	1007883a 	mov	r3,r2
8112a528:	e0bff617 	ldw	r2,-40(fp)
8112a52c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112a530:	e0bff617 	ldw	r2,-40(fp)
8112a534:	10800d03 	ldbu	r2,52(r2)
8112a538:	10803fcc 	andi	r2,r2,255
8112a53c:	00c00044 	movi	r3,1
8112a540:	1884983a 	sll	r2,r3,r2
8112a544:	1007883a 	mov	r3,r2
8112a548:	e0bff617 	ldw	r2,-40(fp)
8112a54c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112a550:	e0bff617 	ldw	r2,-40(fp)
8112a554:	10800cc3 	ldbu	r2,51(r2)
8112a558:	10803fcc 	andi	r2,r2,255
8112a55c:	00c00044 	movi	r3,1
8112a560:	1884983a 	sll	r2,r3,r2
8112a564:	1007883a 	mov	r3,r2
8112a568:	e0bff617 	ldw	r2,-40(fp)
8112a56c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112a570:	e0bff617 	ldw	r2,-40(fp)
8112a574:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112a578:	e0bff617 	ldw	r2,-40(fp)
8112a57c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112a580:	e0bff617 	ldw	r2,-40(fp)
8112a584:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112a588:	e0bff617 	ldw	r2,-40(fp)
8112a58c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112a590:	e0bff617 	ldw	r2,-40(fp)
8112a594:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112a598:	e0bff617 	ldw	r2,-40(fp)
8112a59c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112a5a0:	e0bff617 	ldw	r2,-40(fp)
8112a5a4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112a5a8:	e0bff617 	ldw	r2,-40(fp)
8112a5ac:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112a5b0:	e0bff617 	ldw	r2,-40(fp)
8112a5b4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112a5b8:	e0bff617 	ldw	r2,-40(fp)
8112a5bc:	00c00fc4 	movi	r3,63
8112a5c0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112a5c4:	e0bff617 	ldw	r2,-40(fp)
8112a5c8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112a5cc:	e13ff617 	ldw	r4,-40(fp)
8112a5d0:	113b3f00 	call	8113b3f0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112a5d4:	e13ff617 	ldw	r4,-40(fp)
8112a5d8:	113b2780 	call	8113b278 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a5dc:	0005303a 	rdctl	r2,status
8112a5e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a5e4:	e0fff517 	ldw	r3,-44(fp)
8112a5e8:	00bfff84 	movi	r2,-2
8112a5ec:	1884703a 	and	r2,r3,r2
8112a5f0:	1001703a 	wrctl	status,r2
  
  return context;
8112a5f4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112a5f8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112a5fc:	e0fffb03 	ldbu	r3,-20(fp)
8112a600:	00a04574 	movhi	r2,33045
8112a604:	10908604 	addi	r2,r2,16920
8112a608:	18c7883a 	add	r3,r3,r3
8112a60c:	18c7883a 	add	r3,r3,r3
8112a610:	10c5883a 	add	r2,r2,r3
8112a614:	e0fff617 	ldw	r3,-40(fp)
8112a618:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112a61c:	d0e07717 	ldw	r3,-32292(gp)
8112a620:	e0bff617 	ldw	r2,-40(fp)
8112a624:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112a628:	e0bff617 	ldw	r2,-40(fp)
8112a62c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112a630:	d0a07717 	ldw	r2,-32292(gp)
8112a634:	10000326 	beq	r2,zero,8112a644 <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112a638:	d0a07717 	ldw	r2,-32292(gp)
8112a63c:	e0fff617 	ldw	r3,-40(fp)
8112a640:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112a644:	e0bff617 	ldw	r2,-40(fp)
8112a648:	d0a07715 	stw	r2,-32292(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112a64c:	e0bff617 	ldw	r2,-40(fp)
8112a650:	10c00d83 	ldbu	r3,54(r2)
8112a654:	d0a08103 	ldbu	r2,-32252(gp)
8112a658:	1884b03a 	or	r2,r3,r2
8112a65c:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a660:	e0bff617 	ldw	r2,-40(fp)
8112a664:	10800d03 	ldbu	r2,52(r2)
8112a668:	10c03fcc 	andi	r3,r2,255
8112a66c:	e0bff617 	ldw	r2,-40(fp)
8112a670:	10800d03 	ldbu	r2,52(r2)
8112a674:	11003fcc 	andi	r4,r2,255
8112a678:	d0a08144 	addi	r2,gp,-32251
8112a67c:	2085883a 	add	r2,r4,r2
8112a680:	11000003 	ldbu	r4,0(r2)
8112a684:	e0bff617 	ldw	r2,-40(fp)
8112a688:	10800d43 	ldbu	r2,53(r2)
8112a68c:	2084b03a 	or	r2,r4,r2
8112a690:	1009883a 	mov	r4,r2
8112a694:	d0a08144 	addi	r2,gp,-32251
8112a698:	1885883a 	add	r2,r3,r2
8112a69c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112a6a0:	d0a07d43 	ldbu	r2,-32267(gp)
8112a6a4:	10800044 	addi	r2,r2,1
8112a6a8:	d0a07d45 	stb	r2,-32267(gp)
8112a6ac:	e0bff417 	ldw	r2,-48(fp)
8112a6b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a6b4:	e0bff717 	ldw	r2,-36(fp)
8112a6b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112a6bc:	0005883a 	mov	r2,zero
8112a6c0:	00000506 	br	8112a6d8 <OS_TCBInit+0x2c8>
8112a6c4:	e0bff417 	ldw	r2,-48(fp)
8112a6c8:	e0bff915 	stw	r2,-28(fp)
8112a6cc:	e0bff917 	ldw	r2,-28(fp)
8112a6d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112a6d4:	00801084 	movi	r2,66
}
8112a6d8:	e037883a 	mov	sp,fp
8112a6dc:	dfc00117 	ldw	ra,4(sp)
8112a6e0:	df000017 	ldw	fp,0(sp)
8112a6e4:	dec00204 	addi	sp,sp,8
8112a6e8:	f800283a 	ret

8112a6ec <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112a6ec:	defffe04 	addi	sp,sp,-8
8112a6f0:	de00012e 	bgeu	sp,et,8112a6f8 <OSDebugInit+0xc>
8112a6f4:	003b68fa 	trap	3
8112a6f8:	df000115 	stw	fp,4(sp)
8112a6fc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112a700:	d0a01704 	addi	r2,gp,-32676
8112a704:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112a708:	d0a01804 	addi	r2,gp,-32672
8112a70c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112a710:	d0a01984 	addi	r2,gp,-32666
8112a714:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112a718:	d0a01a04 	addi	r2,gp,-32664
8112a71c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112a720:	d0a01904 	addi	r2,gp,-32668
8112a724:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112a728:	d0a01a84 	addi	r2,gp,-32662
8112a72c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112a730:	d0a01b04 	addi	r2,gp,-32660
8112a734:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112a738:	d0a01b84 	addi	r2,gp,-32658
8112a73c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112a740:	d0a01c04 	addi	r2,gp,-32656
8112a744:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112a748:	d0a01c84 	addi	r2,gp,-32654
8112a74c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112a750:	d0a01d04 	addi	r2,gp,-32652
8112a754:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112a758:	d0a01d84 	addi	r2,gp,-32650
8112a75c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112a760:	d0a01e04 	addi	r2,gp,-32648
8112a764:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112a768:	d0a01e84 	addi	r2,gp,-32646
8112a76c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112a770:	d0a01f04 	addi	r2,gp,-32644
8112a774:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112a778:	d0a01f84 	addi	r2,gp,-32642
8112a77c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112a780:	d0a02004 	addi	r2,gp,-32640
8112a784:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112a788:	d0a02084 	addi	r2,gp,-32638
8112a78c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112a790:	d0a02104 	addi	r2,gp,-32636
8112a794:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112a798:	d0a02184 	addi	r2,gp,-32634
8112a79c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112a7a0:	d0a02204 	addi	r2,gp,-32632
8112a7a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112a7a8:	d0a02284 	addi	r2,gp,-32630
8112a7ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112a7b0:	d0a02304 	addi	r2,gp,-32628
8112a7b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112a7b8:	d0a02384 	addi	r2,gp,-32626
8112a7bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112a7c0:	d0a02404 	addi	r2,gp,-32624
8112a7c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112a7c8:	d0a02484 	addi	r2,gp,-32622
8112a7cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112a7d0:	d0a02504 	addi	r2,gp,-32620
8112a7d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112a7d8:	d0a02584 	addi	r2,gp,-32618
8112a7dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112a7e0:	d0a02604 	addi	r2,gp,-32616
8112a7e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112a7e8:	d0a02684 	addi	r2,gp,-32614
8112a7ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112a7f0:	d0a02704 	addi	r2,gp,-32612
8112a7f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112a7f8:	d0a02784 	addi	r2,gp,-32610
8112a7fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112a800:	d0a02804 	addi	r2,gp,-32608
8112a804:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112a808:	d0a02884 	addi	r2,gp,-32606
8112a80c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112a810:	d0a02904 	addi	r2,gp,-32604
8112a814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112a818:	d0a02984 	addi	r2,gp,-32602
8112a81c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112a820:	d0a02a04 	addi	r2,gp,-32600
8112a824:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112a828:	d0a02a84 	addi	r2,gp,-32598
8112a82c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112a830:	d0a02b04 	addi	r2,gp,-32596
8112a834:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112a838:	d0a02b84 	addi	r2,gp,-32594
8112a83c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112a840:	d0a02c04 	addi	r2,gp,-32592
8112a844:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112a848:	d0a02c84 	addi	r2,gp,-32590
8112a84c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112a850:	d0a02d04 	addi	r2,gp,-32588
8112a854:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112a858:	d0a02d84 	addi	r2,gp,-32586
8112a85c:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112a860:	00a04574 	movhi	r2,33045
8112a864:	10bff804 	addi	r2,r2,-32
8112a868:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112a86c:	00a04574 	movhi	r2,33045
8112a870:	10bf1804 	addi	r2,r2,-928
8112a874:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112a878:	d0a02e84 	addi	r2,gp,-32582
8112a87c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112a880:	d0a02f04 	addi	r2,gp,-32580
8112a884:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112a888:	d0a02f84 	addi	r2,gp,-32578
8112a88c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112a890:	d0a03004 	addi	r2,gp,-32576
8112a894:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112a898:	d0a03084 	addi	r2,gp,-32574
8112a89c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112a8a0:	d0a03104 	addi	r2,gp,-32572
8112a8a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112a8a8:	d0a03184 	addi	r2,gp,-32570
8112a8ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112a8b0:	d0a03204 	addi	r2,gp,-32568
8112a8b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112a8b8:	d0a03284 	addi	r2,gp,-32566
8112a8bc:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112a8c0:	d0a02e04 	addi	r2,gp,-32584
8112a8c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112a8c8:	d0a03304 	addi	r2,gp,-32564
8112a8cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112a8d0:	0001883a 	nop
8112a8d4:	e037883a 	mov	sp,fp
8112a8d8:	df000017 	ldw	fp,0(sp)
8112a8dc:	dec00104 	addi	sp,sp,4
8112a8e0:	f800283a 	ret

8112a8e4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112a8e4:	defff204 	addi	sp,sp,-56
8112a8e8:	de00012e 	bgeu	sp,et,8112a8f0 <OSFlagAccept+0xc>
8112a8ec:	003b68fa 	trap	3
8112a8f0:	df000d15 	stw	fp,52(sp)
8112a8f4:	df000d04 	addi	fp,sp,52
8112a8f8:	e13ffc15 	stw	r4,-16(fp)
8112a8fc:	2807883a 	mov	r3,r5
8112a900:	3005883a 	mov	r2,r6
8112a904:	e1ffff15 	stw	r7,-4(fp)
8112a908:	e0fffd0d 	sth	r3,-12(fp)
8112a90c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112a910:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112a914:	e0bfff17 	ldw	r2,-4(fp)
8112a918:	1000021e 	bne	r2,zero,8112a924 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112a91c:	0005883a 	mov	r2,zero
8112a920:	0000b006 	br	8112abe4 <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112a924:	e0bffc17 	ldw	r2,-16(fp)
8112a928:	1000051e 	bne	r2,zero,8112a940 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112a92c:	e0bfff17 	ldw	r2,-4(fp)
8112a930:	00c01b84 	movi	r3,110
8112a934:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112a938:	0005883a 	mov	r2,zero
8112a93c:	0000a906 	br	8112abe4 <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112a940:	e0bffc17 	ldw	r2,-16(fp)
8112a944:	10800003 	ldbu	r2,0(r2)
8112a948:	10803fcc 	andi	r2,r2,255
8112a94c:	10800160 	cmpeqi	r2,r2,5
8112a950:	1000051e 	bne	r2,zero,8112a968 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112a954:	e0bfff17 	ldw	r2,-4(fp)
8112a958:	00c00044 	movi	r3,1
8112a95c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112a960:	0005883a 	mov	r2,zero
8112a964:	00009f06 	br	8112abe4 <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112a968:	e0fffe03 	ldbu	r3,-8(fp)
8112a96c:	00bfe004 	movi	r2,-128
8112a970:	1884703a 	and	r2,r3,r2
8112a974:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112a978:	e0bff503 	ldbu	r2,-44(fp)
8112a97c:	10000626 	beq	r2,zero,8112a998 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112a980:	e0bffe03 	ldbu	r2,-8(fp)
8112a984:	10801fcc 	andi	r2,r2,127
8112a988:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112a98c:	00800044 	movi	r2,1
8112a990:	e0bff385 	stb	r2,-50(fp)
8112a994:	00000106 	br	8112a99c <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112a998:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112a99c:	e0bfff17 	ldw	r2,-4(fp)
8112a9a0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a9a4:	0005303a 	rdctl	r2,status
8112a9a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a9ac:	e0fffb17 	ldw	r3,-20(fp)
8112a9b0:	00bfff84 	movi	r2,-2
8112a9b4:	1884703a 	and	r2,r3,r2
8112a9b8:	1001703a 	wrctl	status,r2
  
  return context;
8112a9bc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112a9c0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112a9c4:	e0bffe03 	ldbu	r2,-8(fp)
8112a9c8:	10c00060 	cmpeqi	r3,r2,1
8112a9cc:	18005f1e 	bne	r3,zero,8112ab4c <OSFlagAccept+0x268>
8112a9d0:	10c00088 	cmpgei	r3,r2,2
8112a9d4:	1800021e 	bne	r3,zero,8112a9e0 <OSFlagAccept+0xfc>
8112a9d8:	10003f26 	beq	r2,zero,8112aad8 <OSFlagAccept+0x1f4>
8112a9dc:	00007706 	br	8112abbc <OSFlagAccept+0x2d8>
8112a9e0:	10c000a0 	cmpeqi	r3,r2,2
8112a9e4:	1800031e 	bne	r3,zero,8112a9f4 <OSFlagAccept+0x110>
8112a9e8:	108000e0 	cmpeqi	r2,r2,3
8112a9ec:	10001e1e 	bne	r2,zero,8112aa68 <OSFlagAccept+0x184>
8112a9f0:	00007206 	br	8112abbc <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112a9f4:	e0bffc17 	ldw	r2,-16(fp)
8112a9f8:	10c0020b 	ldhu	r3,8(r2)
8112a9fc:	e0bffd0b 	ldhu	r2,-12(fp)
8112aa00:	1884703a 	and	r2,r3,r2
8112aa04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112aa08:	e0fff30b 	ldhu	r3,-52(fp)
8112aa0c:	e0bffd0b 	ldhu	r2,-12(fp)
8112aa10:	18800d1e 	bne	r3,r2,8112aa48 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112aa14:	e0bff383 	ldbu	r2,-50(fp)
8112aa18:	10800058 	cmpnei	r2,r2,1
8112aa1c:	10000d1e 	bne	r2,zero,8112aa54 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112aa20:	e0bffc17 	ldw	r2,-16(fp)
8112aa24:	1080020b 	ldhu	r2,8(r2)
8112aa28:	1007883a 	mov	r3,r2
8112aa2c:	e0bff30b 	ldhu	r2,-52(fp)
8112aa30:	0084303a 	nor	r2,zero,r2
8112aa34:	1884703a 	and	r2,r3,r2
8112aa38:	1007883a 	mov	r3,r2
8112aa3c:	e0bffc17 	ldw	r2,-16(fp)
8112aa40:	10c0020d 	sth	r3,8(r2)
8112aa44:	00000306 	br	8112aa54 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112aa48:	e0bfff17 	ldw	r2,-4(fp)
8112aa4c:	00c01c04 	movi	r3,112
8112aa50:	10c00005 	stb	r3,0(r2)
8112aa54:	e0bff417 	ldw	r2,-48(fp)
8112aa58:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112aa5c:	e0bff617 	ldw	r2,-40(fp)
8112aa60:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112aa64:	00005e06 	br	8112abe0 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112aa68:	e0bffc17 	ldw	r2,-16(fp)
8112aa6c:	10c0020b 	ldhu	r3,8(r2)
8112aa70:	e0bffd0b 	ldhu	r2,-12(fp)
8112aa74:	1884703a 	and	r2,r3,r2
8112aa78:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112aa7c:	e0bff30b 	ldhu	r2,-52(fp)
8112aa80:	10000d26 	beq	r2,zero,8112aab8 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112aa84:	e0bff383 	ldbu	r2,-50(fp)
8112aa88:	10800058 	cmpnei	r2,r2,1
8112aa8c:	10000d1e 	bne	r2,zero,8112aac4 <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112aa90:	e0bffc17 	ldw	r2,-16(fp)
8112aa94:	1080020b 	ldhu	r2,8(r2)
8112aa98:	1007883a 	mov	r3,r2
8112aa9c:	e0bff30b 	ldhu	r2,-52(fp)
8112aaa0:	0084303a 	nor	r2,zero,r2
8112aaa4:	1884703a 	and	r2,r3,r2
8112aaa8:	1007883a 	mov	r3,r2
8112aaac:	e0bffc17 	ldw	r2,-16(fp)
8112aab0:	10c0020d 	sth	r3,8(r2)
8112aab4:	00000306 	br	8112aac4 <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112aab8:	e0bfff17 	ldw	r2,-4(fp)
8112aabc:	00c01c04 	movi	r3,112
8112aac0:	10c00005 	stb	r3,0(r2)
8112aac4:	e0bff417 	ldw	r2,-48(fp)
8112aac8:	e0bff715 	stw	r2,-36(fp)
8112aacc:	e0bff717 	ldw	r2,-36(fp)
8112aad0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112aad4:	00004206 	br	8112abe0 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112aad8:	e0bffc17 	ldw	r2,-16(fp)
8112aadc:	1080020b 	ldhu	r2,8(r2)
8112aae0:	0084303a 	nor	r2,zero,r2
8112aae4:	1007883a 	mov	r3,r2
8112aae8:	e0bffd0b 	ldhu	r2,-12(fp)
8112aaec:	1884703a 	and	r2,r3,r2
8112aaf0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112aaf4:	e0fff30b 	ldhu	r3,-52(fp)
8112aaf8:	e0bffd0b 	ldhu	r2,-12(fp)
8112aafc:	18800b1e 	bne	r3,r2,8112ab2c <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112ab00:	e0bff383 	ldbu	r2,-50(fp)
8112ab04:	10800058 	cmpnei	r2,r2,1
8112ab08:	10000b1e 	bne	r2,zero,8112ab38 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112ab0c:	e0bffc17 	ldw	r2,-16(fp)
8112ab10:	10c0020b 	ldhu	r3,8(r2)
8112ab14:	e0bff30b 	ldhu	r2,-52(fp)
8112ab18:	1884b03a 	or	r2,r3,r2
8112ab1c:	1007883a 	mov	r3,r2
8112ab20:	e0bffc17 	ldw	r2,-16(fp)
8112ab24:	10c0020d 	sth	r3,8(r2)
8112ab28:	00000306 	br	8112ab38 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112ab2c:	e0bfff17 	ldw	r2,-4(fp)
8112ab30:	00c01c04 	movi	r3,112
8112ab34:	10c00005 	stb	r3,0(r2)
8112ab38:	e0bff417 	ldw	r2,-48(fp)
8112ab3c:	e0bff815 	stw	r2,-32(fp)
8112ab40:	e0bff817 	ldw	r2,-32(fp)
8112ab44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112ab48:	00002506 	br	8112abe0 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112ab4c:	e0bffc17 	ldw	r2,-16(fp)
8112ab50:	1080020b 	ldhu	r2,8(r2)
8112ab54:	0084303a 	nor	r2,zero,r2
8112ab58:	1007883a 	mov	r3,r2
8112ab5c:	e0bffd0b 	ldhu	r2,-12(fp)
8112ab60:	1884703a 	and	r2,r3,r2
8112ab64:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112ab68:	e0bff30b 	ldhu	r2,-52(fp)
8112ab6c:	10000b26 	beq	r2,zero,8112ab9c <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112ab70:	e0bff383 	ldbu	r2,-50(fp)
8112ab74:	10800058 	cmpnei	r2,r2,1
8112ab78:	10000b1e 	bne	r2,zero,8112aba8 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112ab7c:	e0bffc17 	ldw	r2,-16(fp)
8112ab80:	10c0020b 	ldhu	r3,8(r2)
8112ab84:	e0bff30b 	ldhu	r2,-52(fp)
8112ab88:	1884b03a 	or	r2,r3,r2
8112ab8c:	1007883a 	mov	r3,r2
8112ab90:	e0bffc17 	ldw	r2,-16(fp)
8112ab94:	10c0020d 	sth	r3,8(r2)
8112ab98:	00000306 	br	8112aba8 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112ab9c:	e0bfff17 	ldw	r2,-4(fp)
8112aba0:	00c01c04 	movi	r3,112
8112aba4:	10c00005 	stb	r3,0(r2)
8112aba8:	e0bff417 	ldw	r2,-48(fp)
8112abac:	e0bff915 	stw	r2,-28(fp)
8112abb0:	e0bff917 	ldw	r2,-28(fp)
8112abb4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112abb8:	00000906 	br	8112abe0 <OSFlagAccept+0x2fc>
8112abbc:	e0bff417 	ldw	r2,-48(fp)
8112abc0:	e0bffa15 	stw	r2,-24(fp)
8112abc4:	e0bffa17 	ldw	r2,-24(fp)
8112abc8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112abcc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112abd0:	e0bfff17 	ldw	r2,-4(fp)
8112abd4:	00c01bc4 	movi	r3,111
8112abd8:	10c00005 	stb	r3,0(r2)
             break;
8112abdc:	0001883a 	nop
    }
    return (flags_rdy);
8112abe0:	e0bff30b 	ldhu	r2,-52(fp)
}
8112abe4:	e037883a 	mov	sp,fp
8112abe8:	df000017 	ldw	fp,0(sp)
8112abec:	dec00104 	addi	sp,sp,4
8112abf0:	f800283a 	ret

8112abf4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112abf4:	defff804 	addi	sp,sp,-32
8112abf8:	de00012e 	bgeu	sp,et,8112ac00 <OSFlagCreate+0xc>
8112abfc:	003b68fa 	trap	3
8112ac00:	df000715 	stw	fp,28(sp)
8112ac04:	df000704 	addi	fp,sp,28
8112ac08:	2005883a 	mov	r2,r4
8112ac0c:	e17fff15 	stw	r5,-4(fp)
8112ac10:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112ac14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112ac18:	e0bfff17 	ldw	r2,-4(fp)
8112ac1c:	1000021e 	bne	r2,zero,8112ac28 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112ac20:	0005883a 	mov	r2,zero
8112ac24:	00003306 	br	8112acf4 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112ac28:	d0a08403 	ldbu	r2,-32240(gp)
8112ac2c:	10803fcc 	andi	r2,r2,255
8112ac30:	10000526 	beq	r2,zero,8112ac48 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112ac34:	e0bfff17 	ldw	r2,-4(fp)
8112ac38:	00c00404 	movi	r3,16
8112ac3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112ac40:	0005883a 	mov	r2,zero
8112ac44:	00002b06 	br	8112acf4 <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ac48:	0005303a 	rdctl	r2,status
8112ac4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ac50:	e0fffd17 	ldw	r3,-12(fp)
8112ac54:	00bfff84 	movi	r2,-2
8112ac58:	1884703a 	and	r2,r3,r2
8112ac5c:	1001703a 	wrctl	status,r2
  
  return context;
8112ac60:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ac64:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112ac68:	d0a08917 	ldw	r2,-32220(gp)
8112ac6c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112ac70:	e0bffb17 	ldw	r2,-20(fp)
8112ac74:	10001726 	beq	r2,zero,8112acd4 <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112ac78:	d0a08917 	ldw	r2,-32220(gp)
8112ac7c:	10800117 	ldw	r2,4(r2)
8112ac80:	d0a08915 	stw	r2,-32220(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112ac84:	e0bffb17 	ldw	r2,-20(fp)
8112ac88:	00c00144 	movi	r3,5
8112ac8c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112ac90:	e0bffb17 	ldw	r2,-20(fp)
8112ac94:	e0fffe0b 	ldhu	r3,-8(fp)
8112ac98:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112ac9c:	e0bffb17 	ldw	r2,-20(fp)
8112aca0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112aca4:	e0bffb17 	ldw	r2,-20(fp)
8112aca8:	00c00fc4 	movi	r3,63
8112acac:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112acb0:	e0bffb17 	ldw	r2,-20(fp)
8112acb4:	100002c5 	stb	zero,11(r2)
8112acb8:	e0bff917 	ldw	r2,-28(fp)
8112acbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112acc0:	e0bffa17 	ldw	r2,-24(fp)
8112acc4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112acc8:	e0bfff17 	ldw	r2,-4(fp)
8112accc:	10000005 	stb	zero,0(r2)
8112acd0:	00000706 	br	8112acf0 <OSFlagCreate+0xfc>
8112acd4:	e0bff917 	ldw	r2,-28(fp)
8112acd8:	e0bffc15 	stw	r2,-16(fp)
8112acdc:	e0bffc17 	ldw	r2,-16(fp)
8112ace0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112ace4:	e0bfff17 	ldw	r2,-4(fp)
8112ace8:	00c01c84 	movi	r3,114
8112acec:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112acf0:	e0bffb17 	ldw	r2,-20(fp)
}
8112acf4:	e037883a 	mov	sp,fp
8112acf8:	df000017 	ldw	fp,0(sp)
8112acfc:	dec00104 	addi	sp,sp,4
8112ad00:	f800283a 	ret

8112ad04 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112ad04:	defff204 	addi	sp,sp,-56
8112ad08:	de00012e 	bgeu	sp,et,8112ad10 <OSFlagDel+0xc>
8112ad0c:	003b68fa 	trap	3
8112ad10:	dfc00d15 	stw	ra,52(sp)
8112ad14:	df000c15 	stw	fp,48(sp)
8112ad18:	df000c04 	addi	fp,sp,48
8112ad1c:	e13ffd15 	stw	r4,-12(fp)
8112ad20:	2805883a 	mov	r2,r5
8112ad24:	e1bfff15 	stw	r6,-4(fp)
8112ad28:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112ad2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ad30:	e0bfff17 	ldw	r2,-4(fp)
8112ad34:	1000021e 	bne	r2,zero,8112ad40 <OSFlagDel+0x3c>
        return (pgrp);
8112ad38:	e0bffd17 	ldw	r2,-12(fp)
8112ad3c:	00008006 	br	8112af40 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112ad40:	e0bffd17 	ldw	r2,-12(fp)
8112ad44:	1000051e 	bne	r2,zero,8112ad5c <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ad48:	e0bfff17 	ldw	r2,-4(fp)
8112ad4c:	00c01b84 	movi	r3,110
8112ad50:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112ad54:	e0bffd17 	ldw	r2,-12(fp)
8112ad58:	00007906 	br	8112af40 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ad5c:	d0a08403 	ldbu	r2,-32240(gp)
8112ad60:	10803fcc 	andi	r2,r2,255
8112ad64:	10000526 	beq	r2,zero,8112ad7c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112ad68:	e0bfff17 	ldw	r2,-4(fp)
8112ad6c:	00c003c4 	movi	r3,15
8112ad70:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112ad74:	e0bffd17 	ldw	r2,-12(fp)
8112ad78:	00007106 	br	8112af40 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112ad7c:	e0bffd17 	ldw	r2,-12(fp)
8112ad80:	10800003 	ldbu	r2,0(r2)
8112ad84:	10803fcc 	andi	r2,r2,255
8112ad88:	10800160 	cmpeqi	r2,r2,5
8112ad8c:	1000051e 	bne	r2,zero,8112ada4 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112ad90:	e0bfff17 	ldw	r2,-4(fp)
8112ad94:	00c00044 	movi	r3,1
8112ad98:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112ad9c:	e0bffd17 	ldw	r2,-12(fp)
8112ada0:	00006706 	br	8112af40 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ada4:	0005303a 	rdctl	r2,status
8112ada8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112adac:	e0fffc17 	ldw	r3,-16(fp)
8112adb0:	00bfff84 	movi	r2,-2
8112adb4:	1884703a 	and	r2,r3,r2
8112adb8:	1001703a 	wrctl	status,r2
  
  return context;
8112adbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112adc0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112adc4:	e0bffd17 	ldw	r2,-12(fp)
8112adc8:	10800117 	ldw	r2,4(r2)
8112adcc:	10000326 	beq	r2,zero,8112addc <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112add0:	00800044 	movi	r2,1
8112add4:	e0bff405 	stb	r2,-48(fp)
8112add8:	00000106 	br	8112ade0 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112addc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112ade0:	e0bffe03 	ldbu	r2,-8(fp)
8112ade4:	10000326 	beq	r2,zero,8112adf4 <OSFlagDel+0xf0>
8112ade8:	10800060 	cmpeqi	r2,r2,1
8112adec:	1000231e 	bne	r2,zero,8112ae7c <OSFlagDel+0x178>
8112adf0:	00004806 	br	8112af14 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112adf4:	e0bff403 	ldbu	r2,-48(fp)
8112adf8:	1000161e 	bne	r2,zero,8112ae54 <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112adfc:	e0bffd17 	ldw	r2,-12(fp)
8112ae00:	00c00fc4 	movi	r3,63
8112ae04:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112ae08:	e0bffd17 	ldw	r2,-12(fp)
8112ae0c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112ae10:	e0bffd17 	ldw	r2,-12(fp)
8112ae14:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112ae18:	d0e08917 	ldw	r3,-32220(gp)
8112ae1c:	e0bffd17 	ldw	r2,-12(fp)
8112ae20:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112ae24:	e0bffd17 	ldw	r2,-12(fp)
8112ae28:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112ae2c:	e0bffd17 	ldw	r2,-12(fp)
8112ae30:	d0a08915 	stw	r2,-32220(gp)
8112ae34:	e0bff717 	ldw	r2,-36(fp)
8112ae38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ae3c:	e0bff817 	ldw	r2,-32(fp)
8112ae40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112ae44:	e0bfff17 	ldw	r2,-4(fp)
8112ae48:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112ae4c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112ae50:	00003a06 	br	8112af3c <OSFlagDel+0x238>
8112ae54:	e0bff717 	ldw	r2,-36(fp)
8112ae58:	e0bff915 	stw	r2,-28(fp)
8112ae5c:	e0bff917 	ldw	r2,-28(fp)
8112ae60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112ae64:	e0bfff17 	ldw	r2,-4(fp)
8112ae68:	00c01244 	movi	r3,73
8112ae6c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112ae70:	e0bffd17 	ldw	r2,-12(fp)
8112ae74:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112ae78:	00003006 	br	8112af3c <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112ae7c:	e0bffd17 	ldw	r2,-12(fp)
8112ae80:	10800117 	ldw	r2,4(r2)
8112ae84:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112ae88:	00000606 	br	8112aea4 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112ae8c:	000b883a 	mov	r5,zero
8112ae90:	e13ff517 	ldw	r4,-44(fp)
8112ae94:	112beb80 	call	8112beb8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112ae98:	e0bff517 	ldw	r2,-44(fp)
8112ae9c:	10800017 	ldw	r2,0(r2)
8112aea0:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112aea4:	e0bff517 	ldw	r2,-44(fp)
8112aea8:	103ff81e 	bne	r2,zero,8112ae8c <__reset+0xfb10ae8c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112aeac:	e0bffd17 	ldw	r2,-12(fp)
8112aeb0:	00c00fc4 	movi	r3,63
8112aeb4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112aeb8:	e0bffd17 	ldw	r2,-12(fp)
8112aebc:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112aec0:	e0bffd17 	ldw	r2,-12(fp)
8112aec4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112aec8:	d0e08917 	ldw	r3,-32220(gp)
8112aecc:	e0bffd17 	ldw	r2,-12(fp)
8112aed0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112aed4:	e0bffd17 	ldw	r2,-12(fp)
8112aed8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112aedc:	e0bffd17 	ldw	r2,-12(fp)
8112aee0:	d0a08915 	stw	r2,-32220(gp)
8112aee4:	e0bff717 	ldw	r2,-36(fp)
8112aee8:	e0bffa15 	stw	r2,-24(fp)
8112aeec:	e0bffa17 	ldw	r2,-24(fp)
8112aef0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112aef4:	e0bff403 	ldbu	r2,-48(fp)
8112aef8:	10800058 	cmpnei	r2,r2,1
8112aefc:	1000011e 	bne	r2,zero,8112af04 <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112af00:	1129fc80 	call	81129fc8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112af04:	e0bfff17 	ldw	r2,-4(fp)
8112af08:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112af0c:	e03ff615 	stw	zero,-40(fp)
             break;
8112af10:	00000a06 	br	8112af3c <OSFlagDel+0x238>
8112af14:	e0bff717 	ldw	r2,-36(fp)
8112af18:	e0bffb15 	stw	r2,-20(fp)
8112af1c:	e0bffb17 	ldw	r2,-20(fp)
8112af20:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112af24:	e0bfff17 	ldw	r2,-4(fp)
8112af28:	00c001c4 	movi	r3,7
8112af2c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112af30:	e0bffd17 	ldw	r2,-12(fp)
8112af34:	e0bff615 	stw	r2,-40(fp)
             break;
8112af38:	0001883a 	nop
    }
    return (pgrp_return);
8112af3c:	e0bff617 	ldw	r2,-40(fp)
}
8112af40:	e037883a 	mov	sp,fp
8112af44:	dfc00117 	ldw	ra,4(sp)
8112af48:	df000017 	ldw	fp,0(sp)
8112af4c:	dec00204 	addi	sp,sp,8
8112af50:	f800283a 	ret

8112af54 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112af54:	defff604 	addi	sp,sp,-40
8112af58:	de00012e 	bgeu	sp,et,8112af60 <OSFlagNameGet+0xc>
8112af5c:	003b68fa 	trap	3
8112af60:	dfc00915 	stw	ra,36(sp)
8112af64:	df000815 	stw	fp,32(sp)
8112af68:	df000804 	addi	fp,sp,32
8112af6c:	e13ffd15 	stw	r4,-12(fp)
8112af70:	e17ffe15 	stw	r5,-8(fp)
8112af74:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112af78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112af7c:	e0bfff17 	ldw	r2,-4(fp)
8112af80:	1000021e 	bne	r2,zero,8112af8c <OSFlagNameGet+0x38>
        return (0);
8112af84:	0005883a 	mov	r2,zero
8112af88:	00003906 	br	8112b070 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112af8c:	e0bffd17 	ldw	r2,-12(fp)
8112af90:	1000051e 	bne	r2,zero,8112afa8 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112af94:	e0bfff17 	ldw	r2,-4(fp)
8112af98:	00c01b84 	movi	r3,110
8112af9c:	10c00005 	stb	r3,0(r2)
        return (0);
8112afa0:	0005883a 	mov	r2,zero
8112afa4:	00003206 	br	8112b070 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112afa8:	e0bffe17 	ldw	r2,-8(fp)
8112afac:	1000051e 	bne	r2,zero,8112afc4 <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112afb0:	e0bfff17 	ldw	r2,-4(fp)
8112afb4:	00c00304 	movi	r3,12
8112afb8:	10c00005 	stb	r3,0(r2)
        return (0);
8112afbc:	0005883a 	mov	r2,zero
8112afc0:	00002b06 	br	8112b070 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112afc4:	d0a08403 	ldbu	r2,-32240(gp)
8112afc8:	10803fcc 	andi	r2,r2,255
8112afcc:	10000526 	beq	r2,zero,8112afe4 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112afd0:	e0bfff17 	ldw	r2,-4(fp)
8112afd4:	00c00444 	movi	r3,17
8112afd8:	10c00005 	stb	r3,0(r2)
        return (0);
8112afdc:	0005883a 	mov	r2,zero
8112afe0:	00002306 	br	8112b070 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112afe4:	0005303a 	rdctl	r2,status
8112afe8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112afec:	e0fffc17 	ldw	r3,-16(fp)
8112aff0:	00bfff84 	movi	r2,-2
8112aff4:	1884703a 	and	r2,r3,r2
8112aff8:	1001703a 	wrctl	status,r2
  
  return context;
8112affc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b000:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112b004:	e0bffd17 	ldw	r2,-12(fp)
8112b008:	10800003 	ldbu	r2,0(r2)
8112b00c:	10803fcc 	andi	r2,r2,255
8112b010:	10800160 	cmpeqi	r2,r2,5
8112b014:	1000091e 	bne	r2,zero,8112b03c <OSFlagNameGet+0xe8>
8112b018:	e0bff817 	ldw	r2,-32(fp)
8112b01c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b020:	e0bff917 	ldw	r2,-28(fp)
8112b024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112b028:	e0bfff17 	ldw	r2,-4(fp)
8112b02c:	00c00044 	movi	r3,1
8112b030:	10c00005 	stb	r3,0(r2)
        return (0);
8112b034:	0005883a 	mov	r2,zero
8112b038:	00000d06 	br	8112b070 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112b03c:	e0bffd17 	ldw	r2,-12(fp)
8112b040:	10800284 	addi	r2,r2,10
8112b044:	100b883a 	mov	r5,r2
8112b048:	e13ffe17 	ldw	r4,-8(fp)
8112b04c:	112a11c0 	call	8112a11c <OS_StrCopy>
8112b050:	e0bffb05 	stb	r2,-20(fp)
8112b054:	e0bff817 	ldw	r2,-32(fp)
8112b058:	e0bffa15 	stw	r2,-24(fp)
8112b05c:	e0bffa17 	ldw	r2,-24(fp)
8112b060:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112b064:	e0bfff17 	ldw	r2,-4(fp)
8112b068:	10000005 	stb	zero,0(r2)
    return (len);
8112b06c:	e0bffb03 	ldbu	r2,-20(fp)
}
8112b070:	e037883a 	mov	sp,fp
8112b074:	dfc00117 	ldw	ra,4(sp)
8112b078:	df000017 	ldw	fp,0(sp)
8112b07c:	dec00204 	addi	sp,sp,8
8112b080:	f800283a 	ret

8112b084 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112b084:	defff504 	addi	sp,sp,-44
8112b088:	de00012e 	bgeu	sp,et,8112b090 <OSFlagNameSet+0xc>
8112b08c:	003b68fa 	trap	3
8112b090:	dfc00a15 	stw	ra,40(sp)
8112b094:	df000915 	stw	fp,36(sp)
8112b098:	df000904 	addi	fp,sp,36
8112b09c:	e13ffd15 	stw	r4,-12(fp)
8112b0a0:	e17ffe15 	stw	r5,-8(fp)
8112b0a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b0a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112b0ac:	e0bfff17 	ldw	r2,-4(fp)
8112b0b0:	10004326 	beq	r2,zero,8112b1c0 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112b0b4:	e0bffd17 	ldw	r2,-12(fp)
8112b0b8:	1000041e 	bne	r2,zero,8112b0cc <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112b0bc:	e0bfff17 	ldw	r2,-4(fp)
8112b0c0:	00c01b84 	movi	r3,110
8112b0c4:	10c00005 	stb	r3,0(r2)
        return;
8112b0c8:	00003e06 	br	8112b1c4 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112b0cc:	e0bffe17 	ldw	r2,-8(fp)
8112b0d0:	1000041e 	bne	r2,zero,8112b0e4 <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112b0d4:	e0bfff17 	ldw	r2,-4(fp)
8112b0d8:	00c00304 	movi	r3,12
8112b0dc:	10c00005 	stb	r3,0(r2)
        return;
8112b0e0:	00003806 	br	8112b1c4 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112b0e4:	d0a08403 	ldbu	r2,-32240(gp)
8112b0e8:	10803fcc 	andi	r2,r2,255
8112b0ec:	10000426 	beq	r2,zero,8112b100 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112b0f0:	e0bfff17 	ldw	r2,-4(fp)
8112b0f4:	00c00484 	movi	r3,18
8112b0f8:	10c00005 	stb	r3,0(r2)
        return;
8112b0fc:	00003106 	br	8112b1c4 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b100:	0005303a 	rdctl	r2,status
8112b104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b108:	e0fffc17 	ldw	r3,-16(fp)
8112b10c:	00bfff84 	movi	r2,-2
8112b110:	1884703a 	and	r2,r3,r2
8112b114:	1001703a 	wrctl	status,r2
  
  return context;
8112b118:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b11c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112b120:	e0bffd17 	ldw	r2,-12(fp)
8112b124:	10800003 	ldbu	r2,0(r2)
8112b128:	10803fcc 	andi	r2,r2,255
8112b12c:	10800160 	cmpeqi	r2,r2,5
8112b130:	1000081e 	bne	r2,zero,8112b154 <OSFlagNameSet+0xd0>
8112b134:	e0bff717 	ldw	r2,-36(fp)
8112b138:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b13c:	e0bff817 	ldw	r2,-32(fp)
8112b140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112b144:	e0bfff17 	ldw	r2,-4(fp)
8112b148:	00c00044 	movi	r3,1
8112b14c:	10c00005 	stb	r3,0(r2)
        return;
8112b150:	00001c06 	br	8112b1c4 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112b154:	e13ffe17 	ldw	r4,-8(fp)
8112b158:	112a1980 	call	8112a198 <OS_StrLen>
8112b15c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112b160:	e0bffa03 	ldbu	r2,-24(fp)
8112b164:	10800830 	cmpltui	r2,r2,32
8112b168:	1000081e 	bne	r2,zero,8112b18c <OSFlagNameSet+0x108>
8112b16c:	e0bff717 	ldw	r2,-36(fp)
8112b170:	e0bff915 	stw	r2,-28(fp)
8112b174:	e0bff917 	ldw	r2,-28(fp)
8112b178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112b17c:	e0bfff17 	ldw	r2,-4(fp)
8112b180:	00c01cc4 	movi	r3,115
8112b184:	10c00005 	stb	r3,0(r2)
        return;
8112b188:	00000e06 	br	8112b1c4 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112b18c:	e0bffd17 	ldw	r2,-12(fp)
8112b190:	10800284 	addi	r2,r2,10
8112b194:	e17ffe17 	ldw	r5,-8(fp)
8112b198:	1009883a 	mov	r4,r2
8112b19c:	112a11c0 	call	8112a11c <OS_StrCopy>
8112b1a0:	e0bff717 	ldw	r2,-36(fp)
8112b1a4:	e0bffb15 	stw	r2,-20(fp)
8112b1a8:	e0bffb17 	ldw	r2,-20(fp)
8112b1ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112b1b0:	e0bfff17 	ldw	r2,-4(fp)
8112b1b4:	10000005 	stb	zero,0(r2)
    return;
8112b1b8:	0001883a 	nop
8112b1bc:	00000106 	br	8112b1c4 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112b1c0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112b1c4:	e037883a 	mov	sp,fp
8112b1c8:	dfc00117 	ldw	ra,4(sp)
8112b1cc:	df000017 	ldw	fp,0(sp)
8112b1d0:	dec00204 	addi	sp,sp,8
8112b1d4:	f800283a 	ret

8112b1d8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112b1d8:	deffe104 	addi	sp,sp,-124
8112b1dc:	de00012e 	bgeu	sp,et,8112b1e4 <OSFlagPend+0xc>
8112b1e0:	003b68fa 	trap	3
8112b1e4:	dfc01e15 	stw	ra,120(sp)
8112b1e8:	df001d15 	stw	fp,116(sp)
8112b1ec:	df001d04 	addi	fp,sp,116
8112b1f0:	e13ffc15 	stw	r4,-16(fp)
8112b1f4:	2809883a 	mov	r4,r5
8112b1f8:	3007883a 	mov	r3,r6
8112b1fc:	3805883a 	mov	r2,r7
8112b200:	e13ffd0d 	sth	r4,-12(fp)
8112b204:	e0fffe05 	stb	r3,-8(fp)
8112b208:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112b20c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112b210:	e0800217 	ldw	r2,8(fp)
8112b214:	1000021e 	bne	r2,zero,8112b220 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112b218:	0005883a 	mov	r2,zero
8112b21c:	00015906 	br	8112b784 <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112b220:	e0bffc17 	ldw	r2,-16(fp)
8112b224:	1000051e 	bne	r2,zero,8112b23c <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112b228:	e0800217 	ldw	r2,8(fp)
8112b22c:	00c01b84 	movi	r3,110
8112b230:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b234:	0005883a 	mov	r2,zero
8112b238:	00015206 	br	8112b784 <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b23c:	d0a08403 	ldbu	r2,-32240(gp)
8112b240:	10803fcc 	andi	r2,r2,255
8112b244:	10000526 	beq	r2,zero,8112b25c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112b248:	e0800217 	ldw	r2,8(fp)
8112b24c:	00c00084 	movi	r3,2
8112b250:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b254:	0005883a 	mov	r2,zero
8112b258:	00014a06 	br	8112b784 <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112b25c:	d0a07203 	ldbu	r2,-32312(gp)
8112b260:	10803fcc 	andi	r2,r2,255
8112b264:	10000526 	beq	r2,zero,8112b27c <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112b268:	e0800217 	ldw	r2,8(fp)
8112b26c:	00c00344 	movi	r3,13
8112b270:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b274:	0005883a 	mov	r2,zero
8112b278:	00014206 	br	8112b784 <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112b27c:	e0bffc17 	ldw	r2,-16(fp)
8112b280:	10800003 	ldbu	r2,0(r2)
8112b284:	10803fcc 	andi	r2,r2,255
8112b288:	10800160 	cmpeqi	r2,r2,5
8112b28c:	1000051e 	bne	r2,zero,8112b2a4 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112b290:	e0800217 	ldw	r2,8(fp)
8112b294:	00c00044 	movi	r3,1
8112b298:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b29c:	0005883a 	mov	r2,zero
8112b2a0:	00013806 	br	8112b784 <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112b2a4:	e0fffe03 	ldbu	r3,-8(fp)
8112b2a8:	00bfe004 	movi	r2,-128
8112b2ac:	1884703a 	and	r2,r3,r2
8112b2b0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112b2b4:	e0bfe603 	ldbu	r2,-104(fp)
8112b2b8:	10000626 	beq	r2,zero,8112b2d4 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112b2bc:	e0bffe03 	ldbu	r2,-8(fp)
8112b2c0:	10801fcc 	andi	r2,r2,127
8112b2c4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112b2c8:	00800044 	movi	r2,1
8112b2cc:	e0bfe405 	stb	r2,-112(fp)
8112b2d0:	00000106 	br	8112b2d8 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112b2d4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b2d8:	0005303a 	rdctl	r2,status
8112b2dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b2e0:	e0fff617 	ldw	r3,-40(fp)
8112b2e4:	00bfff84 	movi	r2,-2
8112b2e8:	1884703a 	and	r2,r3,r2
8112b2ec:	1001703a 	wrctl	status,r2
  
  return context;
8112b2f0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b2f4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112b2f8:	e0bffe03 	ldbu	r2,-8(fp)
8112b2fc:	10c00060 	cmpeqi	r3,r2,1
8112b300:	1800921e 	bne	r3,zero,8112b54c <OSFlagPend+0x374>
8112b304:	10c00088 	cmpgei	r3,r2,2
8112b308:	1800021e 	bne	r3,zero,8112b314 <OSFlagPend+0x13c>
8112b30c:	10006126 	beq	r2,zero,8112b494 <OSFlagPend+0x2bc>
8112b310:	0000bb06 	br	8112b600 <OSFlagPend+0x428>
8112b314:	10c000a0 	cmpeqi	r3,r2,2
8112b318:	1800031e 	bne	r3,zero,8112b328 <OSFlagPend+0x150>
8112b31c:	108000e0 	cmpeqi	r2,r2,3
8112b320:	10002f1e 	bne	r2,zero,8112b3e0 <OSFlagPend+0x208>
8112b324:	0000b606 	br	8112b600 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112b328:	e0bffc17 	ldw	r2,-16(fp)
8112b32c:	10c0020b 	ldhu	r3,8(r2)
8112b330:	e0bffd0b 	ldhu	r2,-12(fp)
8112b334:	1884703a 	and	r2,r3,r2
8112b338:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112b33c:	e0ffe80b 	ldhu	r3,-96(fp)
8112b340:	e0bffd0b 	ldhu	r2,-12(fp)
8112b344:	1880171e 	bne	r3,r2,8112b3a4 <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b348:	e0bfe403 	ldbu	r2,-112(fp)
8112b34c:	10800058 	cmpnei	r2,r2,1
8112b350:	1000091e 	bne	r2,zero,8112b378 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112b354:	e0bffc17 	ldw	r2,-16(fp)
8112b358:	1080020b 	ldhu	r2,8(r2)
8112b35c:	1007883a 	mov	r3,r2
8112b360:	e0bfe80b 	ldhu	r2,-96(fp)
8112b364:	0084303a 	nor	r2,zero,r2
8112b368:	1884703a 	and	r2,r3,r2
8112b36c:	1007883a 	mov	r3,r2
8112b370:	e0bffc17 	ldw	r2,-16(fp)
8112b374:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b378:	d0a08517 	ldw	r2,-32236(gp)
8112b37c:	e0ffe80b 	ldhu	r3,-96(fp)
8112b380:	10c00b0d 	sth	r3,44(r2)
8112b384:	e0bfe517 	ldw	r2,-108(fp)
8112b388:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b38c:	e0bfe717 	ldw	r2,-100(fp)
8112b390:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b394:	e0800217 	ldw	r2,8(fp)
8112b398:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b39c:	e0bfe80b 	ldhu	r2,-96(fp)
8112b3a0:	0000f806 	br	8112b784 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b3a4:	e13ffd0b 	ldhu	r4,-12(fp)
8112b3a8:	e17ffe03 	ldbu	r5,-8(fp)
8112b3ac:	e0bfff0b 	ldhu	r2,-4(fp)
8112b3b0:	e0fff704 	addi	r3,fp,-36
8112b3b4:	d8800015 	stw	r2,0(sp)
8112b3b8:	280f883a 	mov	r7,r5
8112b3bc:	200d883a 	mov	r6,r4
8112b3c0:	180b883a 	mov	r5,r3
8112b3c4:	e13ffc17 	ldw	r4,-16(fp)
8112b3c8:	112bc680 	call	8112bc68 <OS_FlagBlock>
8112b3cc:	e0bfe517 	ldw	r2,-108(fp)
8112b3d0:	e0bfe915 	stw	r2,-92(fp)
8112b3d4:	e0bfe917 	ldw	r2,-92(fp)
8112b3d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b3dc:	00009206 	br	8112b628 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112b3e0:	e0bffc17 	ldw	r2,-16(fp)
8112b3e4:	10c0020b 	ldhu	r3,8(r2)
8112b3e8:	e0bffd0b 	ldhu	r2,-12(fp)
8112b3ec:	1884703a 	and	r2,r3,r2
8112b3f0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112b3f4:	e0bfe80b 	ldhu	r2,-96(fp)
8112b3f8:	10001726 	beq	r2,zero,8112b458 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b3fc:	e0bfe403 	ldbu	r2,-112(fp)
8112b400:	10800058 	cmpnei	r2,r2,1
8112b404:	1000091e 	bne	r2,zero,8112b42c <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112b408:	e0bffc17 	ldw	r2,-16(fp)
8112b40c:	1080020b 	ldhu	r2,8(r2)
8112b410:	1007883a 	mov	r3,r2
8112b414:	e0bfe80b 	ldhu	r2,-96(fp)
8112b418:	0084303a 	nor	r2,zero,r2
8112b41c:	1884703a 	and	r2,r3,r2
8112b420:	1007883a 	mov	r3,r2
8112b424:	e0bffc17 	ldw	r2,-16(fp)
8112b428:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b42c:	d0a08517 	ldw	r2,-32236(gp)
8112b430:	e0ffe80b 	ldhu	r3,-96(fp)
8112b434:	10c00b0d 	sth	r3,44(r2)
8112b438:	e0bfe517 	ldw	r2,-108(fp)
8112b43c:	e0bfea15 	stw	r2,-88(fp)
8112b440:	e0bfea17 	ldw	r2,-88(fp)
8112b444:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b448:	e0800217 	ldw	r2,8(fp)
8112b44c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b450:	e0bfe80b 	ldhu	r2,-96(fp)
8112b454:	0000cb06 	br	8112b784 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b458:	e13ffd0b 	ldhu	r4,-12(fp)
8112b45c:	e17ffe03 	ldbu	r5,-8(fp)
8112b460:	e0bfff0b 	ldhu	r2,-4(fp)
8112b464:	e0fff704 	addi	r3,fp,-36
8112b468:	d8800015 	stw	r2,0(sp)
8112b46c:	280f883a 	mov	r7,r5
8112b470:	200d883a 	mov	r6,r4
8112b474:	180b883a 	mov	r5,r3
8112b478:	e13ffc17 	ldw	r4,-16(fp)
8112b47c:	112bc680 	call	8112bc68 <OS_FlagBlock>
8112b480:	e0bfe517 	ldw	r2,-108(fp)
8112b484:	e0bfeb15 	stw	r2,-84(fp)
8112b488:	e0bfeb17 	ldw	r2,-84(fp)
8112b48c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b490:	00006506 	br	8112b628 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112b494:	e0bffc17 	ldw	r2,-16(fp)
8112b498:	1080020b 	ldhu	r2,8(r2)
8112b49c:	0084303a 	nor	r2,zero,r2
8112b4a0:	1007883a 	mov	r3,r2
8112b4a4:	e0bffd0b 	ldhu	r2,-12(fp)
8112b4a8:	1884703a 	and	r2,r3,r2
8112b4ac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112b4b0:	e0ffe80b 	ldhu	r3,-96(fp)
8112b4b4:	e0bffd0b 	ldhu	r2,-12(fp)
8112b4b8:	1880151e 	bne	r3,r2,8112b510 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b4bc:	e0bfe403 	ldbu	r2,-112(fp)
8112b4c0:	10800058 	cmpnei	r2,r2,1
8112b4c4:	1000071e 	bne	r2,zero,8112b4e4 <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112b4c8:	e0bffc17 	ldw	r2,-16(fp)
8112b4cc:	10c0020b 	ldhu	r3,8(r2)
8112b4d0:	e0bfe80b 	ldhu	r2,-96(fp)
8112b4d4:	1884b03a 	or	r2,r3,r2
8112b4d8:	1007883a 	mov	r3,r2
8112b4dc:	e0bffc17 	ldw	r2,-16(fp)
8112b4e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b4e4:	d0a08517 	ldw	r2,-32236(gp)
8112b4e8:	e0ffe80b 	ldhu	r3,-96(fp)
8112b4ec:	10c00b0d 	sth	r3,44(r2)
8112b4f0:	e0bfe517 	ldw	r2,-108(fp)
8112b4f4:	e0bfec15 	stw	r2,-80(fp)
8112b4f8:	e0bfec17 	ldw	r2,-80(fp)
8112b4fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b500:	e0800217 	ldw	r2,8(fp)
8112b504:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b508:	e0bfe80b 	ldhu	r2,-96(fp)
8112b50c:	00009d06 	br	8112b784 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b510:	e13ffd0b 	ldhu	r4,-12(fp)
8112b514:	e17ffe03 	ldbu	r5,-8(fp)
8112b518:	e0bfff0b 	ldhu	r2,-4(fp)
8112b51c:	e0fff704 	addi	r3,fp,-36
8112b520:	d8800015 	stw	r2,0(sp)
8112b524:	280f883a 	mov	r7,r5
8112b528:	200d883a 	mov	r6,r4
8112b52c:	180b883a 	mov	r5,r3
8112b530:	e13ffc17 	ldw	r4,-16(fp)
8112b534:	112bc680 	call	8112bc68 <OS_FlagBlock>
8112b538:	e0bfe517 	ldw	r2,-108(fp)
8112b53c:	e0bfed15 	stw	r2,-76(fp)
8112b540:	e0bfed17 	ldw	r2,-76(fp)
8112b544:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b548:	00003706 	br	8112b628 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112b54c:	e0bffc17 	ldw	r2,-16(fp)
8112b550:	1080020b 	ldhu	r2,8(r2)
8112b554:	0084303a 	nor	r2,zero,r2
8112b558:	1007883a 	mov	r3,r2
8112b55c:	e0bffd0b 	ldhu	r2,-12(fp)
8112b560:	1884703a 	and	r2,r3,r2
8112b564:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112b568:	e0bfe80b 	ldhu	r2,-96(fp)
8112b56c:	10001526 	beq	r2,zero,8112b5c4 <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b570:	e0bfe403 	ldbu	r2,-112(fp)
8112b574:	10800058 	cmpnei	r2,r2,1
8112b578:	1000071e 	bne	r2,zero,8112b598 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112b57c:	e0bffc17 	ldw	r2,-16(fp)
8112b580:	10c0020b 	ldhu	r3,8(r2)
8112b584:	e0bfe80b 	ldhu	r2,-96(fp)
8112b588:	1884b03a 	or	r2,r3,r2
8112b58c:	1007883a 	mov	r3,r2
8112b590:	e0bffc17 	ldw	r2,-16(fp)
8112b594:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b598:	d0a08517 	ldw	r2,-32236(gp)
8112b59c:	e0ffe80b 	ldhu	r3,-96(fp)
8112b5a0:	10c00b0d 	sth	r3,44(r2)
8112b5a4:	e0bfe517 	ldw	r2,-108(fp)
8112b5a8:	e0bfee15 	stw	r2,-72(fp)
8112b5ac:	e0bfee17 	ldw	r2,-72(fp)
8112b5b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b5b4:	e0800217 	ldw	r2,8(fp)
8112b5b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b5bc:	e0bfe80b 	ldhu	r2,-96(fp)
8112b5c0:	00007006 	br	8112b784 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b5c4:	e13ffd0b 	ldhu	r4,-12(fp)
8112b5c8:	e17ffe03 	ldbu	r5,-8(fp)
8112b5cc:	e0bfff0b 	ldhu	r2,-4(fp)
8112b5d0:	e0fff704 	addi	r3,fp,-36
8112b5d4:	d8800015 	stw	r2,0(sp)
8112b5d8:	280f883a 	mov	r7,r5
8112b5dc:	200d883a 	mov	r6,r4
8112b5e0:	180b883a 	mov	r5,r3
8112b5e4:	e13ffc17 	ldw	r4,-16(fp)
8112b5e8:	112bc680 	call	8112bc68 <OS_FlagBlock>
8112b5ec:	e0bfe517 	ldw	r2,-108(fp)
8112b5f0:	e0bfef15 	stw	r2,-68(fp)
8112b5f4:	e0bfef17 	ldw	r2,-68(fp)
8112b5f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b5fc:	00000a06 	br	8112b628 <OSFlagPend+0x450>
8112b600:	e0bfe517 	ldw	r2,-108(fp)
8112b604:	e0bff015 	stw	r2,-64(fp)
8112b608:	e0bff017 	ldw	r2,-64(fp)
8112b60c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112b610:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112b614:	e0800217 	ldw	r2,8(fp)
8112b618:	00c01bc4 	movi	r3,111
8112b61c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112b620:	e0bfe80b 	ldhu	r2,-96(fp)
8112b624:	00005706 	br	8112b784 <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112b628:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b62c:	0005303a 	rdctl	r2,status
8112b630:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b634:	e0fff117 	ldw	r3,-60(fp)
8112b638:	00bfff84 	movi	r2,-2
8112b63c:	1884703a 	and	r2,r3,r2
8112b640:	1001703a 	wrctl	status,r2
  
  return context;
8112b644:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112b648:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112b64c:	d0a08517 	ldw	r2,-32236(gp)
8112b650:	10800c43 	ldbu	r2,49(r2)
8112b654:	10803fcc 	andi	r2,r2,255
8112b658:	10001c26 	beq	r2,zero,8112b6cc <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112b65c:	d0a08517 	ldw	r2,-32236(gp)
8112b660:	10800c43 	ldbu	r2,49(r2)
8112b664:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b668:	d0a08517 	ldw	r2,-32236(gp)
8112b66c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112b670:	e0bff704 	addi	r2,fp,-36
8112b674:	1009883a 	mov	r4,r2
8112b678:	112bfb40 	call	8112bfb4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112b67c:	d0a08517 	ldw	r2,-32236(gp)
8112b680:	10000c05 	stb	zero,48(r2)
8112b684:	e0bfe517 	ldw	r2,-108(fp)
8112b688:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b68c:	e0bff217 	ldw	r2,-56(fp)
8112b690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112b694:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112b698:	e0bff303 	ldbu	r2,-52(fp)
8112b69c:	108000a0 	cmpeqi	r2,r2,2
8112b6a0:	10000426 	beq	r2,zero,8112b6b4 <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112b6a4:	e0800217 	ldw	r2,8(fp)
8112b6a8:	00c00384 	movi	r3,14
8112b6ac:	10c00005 	stb	r3,0(r2)
                 break;
8112b6b0:	00000406 	br	8112b6c4 <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112b6b4:	e0800217 	ldw	r2,8(fp)
8112b6b8:	00c00284 	movi	r3,10
8112b6bc:	10c00005 	stb	r3,0(r2)
                 break;
8112b6c0:	0001883a 	nop
        }
        return (flags_rdy);
8112b6c4:	e0bfe80b 	ldhu	r2,-96(fp)
8112b6c8:	00002e06 	br	8112b784 <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112b6cc:	d0a08517 	ldw	r2,-32236(gp)
8112b6d0:	10800b0b 	ldhu	r2,44(r2)
8112b6d4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112b6d8:	e0bfe403 	ldbu	r2,-112(fp)
8112b6dc:	10800058 	cmpnei	r2,r2,1
8112b6e0:	1000211e 	bne	r2,zero,8112b768 <OSFlagPend+0x590>
        switch (wait_type) {
8112b6e4:	e0bffe03 	ldbu	r2,-8(fp)
8112b6e8:	10001616 	blt	r2,zero,8112b744 <OSFlagPend+0x56c>
8112b6ec:	10c00090 	cmplti	r3,r2,2
8112b6f0:	18000c1e 	bne	r3,zero,8112b724 <OSFlagPend+0x54c>
8112b6f4:	10800108 	cmpgei	r2,r2,4
8112b6f8:	1000121e 	bne	r2,zero,8112b744 <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112b6fc:	e0bffc17 	ldw	r2,-16(fp)
8112b700:	1080020b 	ldhu	r2,8(r2)
8112b704:	1007883a 	mov	r3,r2
8112b708:	e0bfe80b 	ldhu	r2,-96(fp)
8112b70c:	0084303a 	nor	r2,zero,r2
8112b710:	1884703a 	and	r2,r3,r2
8112b714:	1007883a 	mov	r3,r2
8112b718:	e0bffc17 	ldw	r2,-16(fp)
8112b71c:	10c0020d 	sth	r3,8(r2)
                 break;
8112b720:	00001106 	br	8112b768 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112b724:	e0bffc17 	ldw	r2,-16(fp)
8112b728:	10c0020b 	ldhu	r3,8(r2)
8112b72c:	e0bfe80b 	ldhu	r2,-96(fp)
8112b730:	1884b03a 	or	r2,r3,r2
8112b734:	1007883a 	mov	r3,r2
8112b738:	e0bffc17 	ldw	r2,-16(fp)
8112b73c:	10c0020d 	sth	r3,8(r2)
                 break;
8112b740:	00000906 	br	8112b768 <OSFlagPend+0x590>
8112b744:	e0bfe517 	ldw	r2,-108(fp)
8112b748:	e0bff415 	stw	r2,-48(fp)
8112b74c:	e0bff417 	ldw	r2,-48(fp)
8112b750:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112b754:	e0800217 	ldw	r2,8(fp)
8112b758:	00c01bc4 	movi	r3,111
8112b75c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112b760:	0005883a 	mov	r2,zero
8112b764:	00000706 	br	8112b784 <OSFlagPend+0x5ac>
8112b768:	e0bfe517 	ldw	r2,-108(fp)
8112b76c:	e0bff515 	stw	r2,-44(fp)
8112b770:	e0bff517 	ldw	r2,-44(fp)
8112b774:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112b778:	e0800217 	ldw	r2,8(fp)
8112b77c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112b780:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112b784:	e037883a 	mov	sp,fp
8112b788:	dfc00117 	ldw	ra,4(sp)
8112b78c:	df000017 	ldw	fp,0(sp)
8112b790:	dec00204 	addi	sp,sp,8
8112b794:	f800283a 	ret

8112b798 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112b798:	defffb04 	addi	sp,sp,-20
8112b79c:	de00012e 	bgeu	sp,et,8112b7a4 <OSFlagPendGetFlagsRdy+0xc>
8112b7a0:	003b68fa 	trap	3
8112b7a4:	df000415 	stw	fp,16(sp)
8112b7a8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112b7ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b7b0:	0005303a 	rdctl	r2,status
8112b7b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b7b8:	e0fffe17 	ldw	r3,-8(fp)
8112b7bc:	00bfff84 	movi	r2,-2
8112b7c0:	1884703a 	and	r2,r3,r2
8112b7c4:	1001703a 	wrctl	status,r2
  
  return context;
8112b7c8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112b7cc:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112b7d0:	d0a08517 	ldw	r2,-32236(gp)
8112b7d4:	10800b0b 	ldhu	r2,44(r2)
8112b7d8:	e0bffd0d 	sth	r2,-12(fp)
8112b7dc:	e0bffc17 	ldw	r2,-16(fp)
8112b7e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b7e4:	e0bfff17 	ldw	r2,-4(fp)
8112b7e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112b7ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112b7f0:	e037883a 	mov	sp,fp
8112b7f4:	df000017 	ldw	fp,0(sp)
8112b7f8:	dec00104 	addi	sp,sp,4
8112b7fc:	f800283a 	ret

8112b800 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112b800:	deffef04 	addi	sp,sp,-68
8112b804:	de00012e 	bgeu	sp,et,8112b80c <OSFlagPost+0xc>
8112b808:	003b68fa 	trap	3
8112b80c:	dfc01015 	stw	ra,64(sp)
8112b810:	df000f15 	stw	fp,60(sp)
8112b814:	df000f04 	addi	fp,sp,60
8112b818:	e13ffc15 	stw	r4,-16(fp)
8112b81c:	2807883a 	mov	r3,r5
8112b820:	3005883a 	mov	r2,r6
8112b824:	e1ffff15 	stw	r7,-4(fp)
8112b828:	e0fffd0d 	sth	r3,-12(fp)
8112b82c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112b830:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112b834:	e0bfff17 	ldw	r2,-4(fp)
8112b838:	1000021e 	bne	r2,zero,8112b844 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112b83c:	0005883a 	mov	r2,zero
8112b840:	0000d106 	br	8112bb88 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112b844:	e0bffc17 	ldw	r2,-16(fp)
8112b848:	1000051e 	bne	r2,zero,8112b860 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112b84c:	e0bfff17 	ldw	r2,-4(fp)
8112b850:	00c01b84 	movi	r3,110
8112b854:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b858:	0005883a 	mov	r2,zero
8112b85c:	0000ca06 	br	8112bb88 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112b860:	e0bffc17 	ldw	r2,-16(fp)
8112b864:	10800003 	ldbu	r2,0(r2)
8112b868:	10803fcc 	andi	r2,r2,255
8112b86c:	10800160 	cmpeqi	r2,r2,5
8112b870:	1000051e 	bne	r2,zero,8112b888 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112b874:	e0bfff17 	ldw	r2,-4(fp)
8112b878:	00c00044 	movi	r3,1
8112b87c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b880:	0005883a 	mov	r2,zero
8112b884:	0000c006 	br	8112bb88 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b888:	0005303a 	rdctl	r2,status
8112b88c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b890:	e0fffb17 	ldw	r3,-20(fp)
8112b894:	00bfff84 	movi	r2,-2
8112b898:	1884703a 	and	r2,r3,r2
8112b89c:	1001703a 	wrctl	status,r2
  
  return context;
8112b8a0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b8a4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112b8a8:	e0bffe03 	ldbu	r2,-8(fp)
8112b8ac:	10000326 	beq	r2,zero,8112b8bc <OSFlagPost+0xbc>
8112b8b0:	10800060 	cmpeqi	r2,r2,1
8112b8b4:	10000b1e 	bne	r2,zero,8112b8e4 <OSFlagPost+0xe4>
8112b8b8:	00001206 	br	8112b904 <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112b8bc:	e0bffc17 	ldw	r2,-16(fp)
8112b8c0:	1080020b 	ldhu	r2,8(r2)
8112b8c4:	1007883a 	mov	r3,r2
8112b8c8:	e0bffd0b 	ldhu	r2,-12(fp)
8112b8cc:	0084303a 	nor	r2,zero,r2
8112b8d0:	1884703a 	and	r2,r3,r2
8112b8d4:	1007883a 	mov	r3,r2
8112b8d8:	e0bffc17 	ldw	r2,-16(fp)
8112b8dc:	10c0020d 	sth	r3,8(r2)
             break;
8112b8e0:	00001106 	br	8112b928 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112b8e4:	e0bffc17 	ldw	r2,-16(fp)
8112b8e8:	10c0020b 	ldhu	r3,8(r2)
8112b8ec:	e0bffd0b 	ldhu	r2,-12(fp)
8112b8f0:	1884b03a 	or	r2,r3,r2
8112b8f4:	1007883a 	mov	r3,r2
8112b8f8:	e0bffc17 	ldw	r2,-16(fp)
8112b8fc:	10c0020d 	sth	r3,8(r2)
             break;
8112b900:	00000906 	br	8112b928 <OSFlagPost+0x128>
8112b904:	e0bff317 	ldw	r2,-52(fp)
8112b908:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b90c:	e0bff417 	ldw	r2,-48(fp)
8112b910:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112b914:	e0bfff17 	ldw	r2,-4(fp)
8112b918:	00c01c44 	movi	r3,113
8112b91c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112b920:	0005883a 	mov	r2,zero
8112b924:	00009806 	br	8112bb88 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112b928:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112b92c:	e0bffc17 	ldw	r2,-16(fp)
8112b930:	10800117 	ldw	r2,4(r2)
8112b934:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112b938:	00007706 	br	8112bb18 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112b93c:	e0bff117 	ldw	r2,-60(fp)
8112b940:	10800483 	ldbu	r2,18(r2)
8112b944:	10803fcc 	andi	r2,r2,255
8112b948:	10c00060 	cmpeqi	r3,r2,1
8112b94c:	18004a1e 	bne	r3,zero,8112ba78 <OSFlagPost+0x278>
8112b950:	10c00088 	cmpgei	r3,r2,2
8112b954:	1800021e 	bne	r3,zero,8112b960 <OSFlagPost+0x160>
8112b958:	10002f26 	beq	r2,zero,8112ba18 <OSFlagPost+0x218>
8112b95c:	00005b06 	br	8112bacc <OSFlagPost+0x2cc>
8112b960:	10c000a0 	cmpeqi	r3,r2,2
8112b964:	1800031e 	bne	r3,zero,8112b974 <OSFlagPost+0x174>
8112b968:	108000e0 	cmpeqi	r2,r2,3
8112b96c:	1000171e 	bne	r2,zero,8112b9cc <OSFlagPost+0x1cc>
8112b970:	00005606 	br	8112bacc <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b974:	e0bffc17 	ldw	r2,-16(fp)
8112b978:	10c0020b 	ldhu	r3,8(r2)
8112b97c:	e0bff117 	ldw	r2,-60(fp)
8112b980:	1080040b 	ldhu	r2,16(r2)
8112b984:	1884703a 	and	r2,r3,r2
8112b988:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112b98c:	e0bff117 	ldw	r2,-60(fp)
8112b990:	1080040b 	ldhu	r2,16(r2)
8112b994:	10ffffcc 	andi	r3,r2,65535
8112b998:	e0bff60b 	ldhu	r2,-40(fp)
8112b99c:	1880541e 	bne	r3,r2,8112baf0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b9a0:	e0bff60b 	ldhu	r2,-40(fp)
8112b9a4:	100b883a 	mov	r5,r2
8112b9a8:	e13ff117 	ldw	r4,-60(fp)
8112b9ac:	112beb80 	call	8112beb8 <OS_FlagTaskRdy>
8112b9b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112b9b4:	e0bff683 	ldbu	r2,-38(fp)
8112b9b8:	10800058 	cmpnei	r2,r2,1
8112b9bc:	10004c1e 	bne	r2,zero,8112baf0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112b9c0:	00800044 	movi	r2,1
8112b9c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112b9c8:	00004906 	br	8112baf0 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b9cc:	e0bffc17 	ldw	r2,-16(fp)
8112b9d0:	10c0020b 	ldhu	r3,8(r2)
8112b9d4:	e0bff117 	ldw	r2,-60(fp)
8112b9d8:	1080040b 	ldhu	r2,16(r2)
8112b9dc:	1884703a 	and	r2,r3,r2
8112b9e0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112b9e4:	e0bff60b 	ldhu	r2,-40(fp)
8112b9e8:	10004326 	beq	r2,zero,8112baf8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b9ec:	e0bff60b 	ldhu	r2,-40(fp)
8112b9f0:	100b883a 	mov	r5,r2
8112b9f4:	e13ff117 	ldw	r4,-60(fp)
8112b9f8:	112beb80 	call	8112beb8 <OS_FlagTaskRdy>
8112b9fc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112ba00:	e0bff683 	ldbu	r2,-38(fp)
8112ba04:	10800058 	cmpnei	r2,r2,1
8112ba08:	10003b1e 	bne	r2,zero,8112baf8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112ba0c:	00800044 	movi	r2,1
8112ba10:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112ba14:	00003806 	br	8112baf8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112ba18:	e0bffc17 	ldw	r2,-16(fp)
8112ba1c:	1080020b 	ldhu	r2,8(r2)
8112ba20:	0084303a 	nor	r2,zero,r2
8112ba24:	1007883a 	mov	r3,r2
8112ba28:	e0bff117 	ldw	r2,-60(fp)
8112ba2c:	1080040b 	ldhu	r2,16(r2)
8112ba30:	1884703a 	and	r2,r3,r2
8112ba34:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112ba38:	e0bff117 	ldw	r2,-60(fp)
8112ba3c:	1080040b 	ldhu	r2,16(r2)
8112ba40:	10ffffcc 	andi	r3,r2,65535
8112ba44:	e0bff60b 	ldhu	r2,-40(fp)
8112ba48:	18802d1e 	bne	r3,r2,8112bb00 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112ba4c:	e0bff60b 	ldhu	r2,-40(fp)
8112ba50:	100b883a 	mov	r5,r2
8112ba54:	e13ff117 	ldw	r4,-60(fp)
8112ba58:	112beb80 	call	8112beb8 <OS_FlagTaskRdy>
8112ba5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112ba60:	e0bff683 	ldbu	r2,-38(fp)
8112ba64:	10800058 	cmpnei	r2,r2,1
8112ba68:	1000251e 	bne	r2,zero,8112bb00 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112ba6c:	00800044 	movi	r2,1
8112ba70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112ba74:	00002206 	br	8112bb00 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112ba78:	e0bffc17 	ldw	r2,-16(fp)
8112ba7c:	1080020b 	ldhu	r2,8(r2)
8112ba80:	0084303a 	nor	r2,zero,r2
8112ba84:	1007883a 	mov	r3,r2
8112ba88:	e0bff117 	ldw	r2,-60(fp)
8112ba8c:	1080040b 	ldhu	r2,16(r2)
8112ba90:	1884703a 	and	r2,r3,r2
8112ba94:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112ba98:	e0bff60b 	ldhu	r2,-40(fp)
8112ba9c:	10001a26 	beq	r2,zero,8112bb08 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112baa0:	e0bff60b 	ldhu	r2,-40(fp)
8112baa4:	100b883a 	mov	r5,r2
8112baa8:	e13ff117 	ldw	r4,-60(fp)
8112baac:	112beb80 	call	8112beb8 <OS_FlagTaskRdy>
8112bab0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112bab4:	e0bff683 	ldbu	r2,-38(fp)
8112bab8:	10800058 	cmpnei	r2,r2,1
8112babc:	1000121e 	bne	r2,zero,8112bb08 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112bac0:	00800044 	movi	r2,1
8112bac4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112bac8:	00000f06 	br	8112bb08 <OSFlagPost+0x308>
8112bacc:	e0bff317 	ldw	r2,-52(fp)
8112bad0:	e0bff515 	stw	r2,-44(fp)
8112bad4:	e0bff517 	ldw	r2,-44(fp)
8112bad8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112badc:	e0bfff17 	ldw	r2,-4(fp)
8112bae0:	00c01bc4 	movi	r3,111
8112bae4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112bae8:	0005883a 	mov	r2,zero
8112baec:	00002606 	br	8112bb88 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112baf0:	0001883a 	nop
8112baf4:	00000506 	br	8112bb0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112baf8:	0001883a 	nop
8112bafc:	00000306 	br	8112bb0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112bb00:	0001883a 	nop
8112bb04:	00000106 	br	8112bb0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112bb08:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112bb0c:	e0bff117 	ldw	r2,-60(fp)
8112bb10:	10800017 	ldw	r2,0(r2)
8112bb14:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112bb18:	e0bff117 	ldw	r2,-60(fp)
8112bb1c:	103f871e 	bne	r2,zero,8112b93c <__reset+0xfb10b93c>
8112bb20:	e0bff317 	ldw	r2,-52(fp)
8112bb24:	e0bff715 	stw	r2,-36(fp)
8112bb28:	e0bff717 	ldw	r2,-36(fp)
8112bb2c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112bb30:	e0bff203 	ldbu	r2,-56(fp)
8112bb34:	10800058 	cmpnei	r2,r2,1
8112bb38:	1000011e 	bne	r2,zero,8112bb40 <OSFlagPost+0x340>
        OS_Sched();
8112bb3c:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bb40:	0005303a 	rdctl	r2,status
8112bb44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bb48:	e0fffa17 	ldw	r3,-24(fp)
8112bb4c:	00bfff84 	movi	r2,-2
8112bb50:	1884703a 	and	r2,r3,r2
8112bb54:	1001703a 	wrctl	status,r2
  
  return context;
8112bb58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112bb5c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112bb60:	e0bffc17 	ldw	r2,-16(fp)
8112bb64:	1080020b 	ldhu	r2,8(r2)
8112bb68:	e0bff90d 	sth	r2,-28(fp)
8112bb6c:	e0bff317 	ldw	r2,-52(fp)
8112bb70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb74:	e0bff817 	ldw	r2,-32(fp)
8112bb78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112bb7c:	e0bfff17 	ldw	r2,-4(fp)
8112bb80:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112bb84:	e0bff90b 	ldhu	r2,-28(fp)
}
8112bb88:	e037883a 	mov	sp,fp
8112bb8c:	dfc00117 	ldw	ra,4(sp)
8112bb90:	df000017 	ldw	fp,0(sp)
8112bb94:	dec00204 	addi	sp,sp,8
8112bb98:	f800283a 	ret

8112bb9c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112bb9c:	defff904 	addi	sp,sp,-28
8112bba0:	de00012e 	bgeu	sp,et,8112bba8 <OSFlagQuery+0xc>
8112bba4:	003b68fa 	trap	3
8112bba8:	df000615 	stw	fp,24(sp)
8112bbac:	df000604 	addi	fp,sp,24
8112bbb0:	e13ffe15 	stw	r4,-8(fp)
8112bbb4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112bbb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112bbbc:	e0bfff17 	ldw	r2,-4(fp)
8112bbc0:	1000021e 	bne	r2,zero,8112bbcc <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112bbc4:	0005883a 	mov	r2,zero
8112bbc8:	00002306 	br	8112bc58 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112bbcc:	e0bffe17 	ldw	r2,-8(fp)
8112bbd0:	1000051e 	bne	r2,zero,8112bbe8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112bbd4:	e0bfff17 	ldw	r2,-4(fp)
8112bbd8:	00c01b84 	movi	r3,110
8112bbdc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112bbe0:	0005883a 	mov	r2,zero
8112bbe4:	00001c06 	br	8112bc58 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112bbe8:	e0bffe17 	ldw	r2,-8(fp)
8112bbec:	10800003 	ldbu	r2,0(r2)
8112bbf0:	10803fcc 	andi	r2,r2,255
8112bbf4:	10800160 	cmpeqi	r2,r2,5
8112bbf8:	1000051e 	bne	r2,zero,8112bc10 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112bbfc:	e0bfff17 	ldw	r2,-4(fp)
8112bc00:	00c00044 	movi	r3,1
8112bc04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112bc08:	0005883a 	mov	r2,zero
8112bc0c:	00001206 	br	8112bc58 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bc10:	0005303a 	rdctl	r2,status
8112bc14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bc18:	e0fffc17 	ldw	r3,-16(fp)
8112bc1c:	00bfff84 	movi	r2,-2
8112bc20:	1884703a 	and	r2,r3,r2
8112bc24:	1001703a 	wrctl	status,r2
  
  return context;
8112bc28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112bc2c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112bc30:	e0bffe17 	ldw	r2,-8(fp)
8112bc34:	1080020b 	ldhu	r2,8(r2)
8112bc38:	e0bffb0d 	sth	r2,-20(fp)
8112bc3c:	e0bffa17 	ldw	r2,-24(fp)
8112bc40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bc44:	e0bffd17 	ldw	r2,-12(fp)
8112bc48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112bc4c:	e0bfff17 	ldw	r2,-4(fp)
8112bc50:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112bc54:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112bc58:	e037883a 	mov	sp,fp
8112bc5c:	df000017 	ldw	fp,0(sp)
8112bc60:	dec00104 	addi	sp,sp,4
8112bc64:	f800283a 	ret

8112bc68 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112bc68:	defff804 	addi	sp,sp,-32
8112bc6c:	de00012e 	bgeu	sp,et,8112bc74 <OS_FlagBlock+0xc>
8112bc70:	003b68fa 	trap	3
8112bc74:	df000715 	stw	fp,28(sp)
8112bc78:	df000704 	addi	fp,sp,28
8112bc7c:	e13ffb15 	stw	r4,-20(fp)
8112bc80:	e17ffc15 	stw	r5,-16(fp)
8112bc84:	3009883a 	mov	r4,r6
8112bc88:	3807883a 	mov	r3,r7
8112bc8c:	e0800117 	ldw	r2,4(fp)
8112bc90:	e13ffd0d 	sth	r4,-12(fp)
8112bc94:	e0fffe05 	stb	r3,-8(fp)
8112bc98:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112bc9c:	d0a08517 	ldw	r2,-32236(gp)
8112bca0:	d0e08517 	ldw	r3,-32236(gp)
8112bca4:	18c00c03 	ldbu	r3,48(r3)
8112bca8:	18c00814 	ori	r3,r3,32
8112bcac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112bcb0:	d0a08517 	ldw	r2,-32236(gp)
8112bcb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112bcb8:	d0a08517 	ldw	r2,-32236(gp)
8112bcbc:	e0ffff0b 	ldhu	r3,-4(fp)
8112bcc0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112bcc4:	d0a08517 	ldw	r2,-32236(gp)
8112bcc8:	e0fffc17 	ldw	r3,-16(fp)
8112bccc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112bcd0:	e0bffc17 	ldw	r2,-16(fp)
8112bcd4:	e0fffd0b 	ldhu	r3,-12(fp)
8112bcd8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112bcdc:	e0bffc17 	ldw	r2,-16(fp)
8112bce0:	e0fffe03 	ldbu	r3,-8(fp)
8112bce4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112bce8:	d0e08517 	ldw	r3,-32236(gp)
8112bcec:	e0bffc17 	ldw	r2,-16(fp)
8112bcf0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112bcf4:	e0bffb17 	ldw	r2,-20(fp)
8112bcf8:	10c00117 	ldw	r3,4(r2)
8112bcfc:	e0bffc17 	ldw	r2,-16(fp)
8112bd00:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112bd04:	e0bffc17 	ldw	r2,-16(fp)
8112bd08:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112bd0c:	e0bffc17 	ldw	r2,-16(fp)
8112bd10:	e0fffb17 	ldw	r3,-20(fp)
8112bd14:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112bd18:	e0bffb17 	ldw	r2,-20(fp)
8112bd1c:	10800117 	ldw	r2,4(r2)
8112bd20:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112bd24:	e0bff917 	ldw	r2,-28(fp)
8112bd28:	10000326 	beq	r2,zero,8112bd38 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112bd2c:	e0bff917 	ldw	r2,-28(fp)
8112bd30:	e0fffc17 	ldw	r3,-16(fp)
8112bd34:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112bd38:	e0bffb17 	ldw	r2,-20(fp)
8112bd3c:	e0fffc17 	ldw	r3,-16(fp)
8112bd40:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112bd44:	d0a08517 	ldw	r2,-32236(gp)
8112bd48:	10800d03 	ldbu	r2,52(r2)
8112bd4c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112bd50:	e0fffa03 	ldbu	r3,-24(fp)
8112bd54:	e13ffa03 	ldbu	r4,-24(fp)
8112bd58:	d0a08144 	addi	r2,gp,-32251
8112bd5c:	2085883a 	add	r2,r4,r2
8112bd60:	10800003 	ldbu	r2,0(r2)
8112bd64:	1009883a 	mov	r4,r2
8112bd68:	d0a08517 	ldw	r2,-32236(gp)
8112bd6c:	10800d43 	ldbu	r2,53(r2)
8112bd70:	0084303a 	nor	r2,zero,r2
8112bd74:	2084703a 	and	r2,r4,r2
8112bd78:	1009883a 	mov	r4,r2
8112bd7c:	d0a08144 	addi	r2,gp,-32251
8112bd80:	1885883a 	add	r2,r3,r2
8112bd84:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112bd88:	e0fffa03 	ldbu	r3,-24(fp)
8112bd8c:	d0a08144 	addi	r2,gp,-32251
8112bd90:	1885883a 	add	r2,r3,r2
8112bd94:	10800003 	ldbu	r2,0(r2)
8112bd98:	10803fcc 	andi	r2,r2,255
8112bd9c:	1000071e 	bne	r2,zero,8112bdbc <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112bda0:	d0a08517 	ldw	r2,-32236(gp)
8112bda4:	10800d83 	ldbu	r2,54(r2)
8112bda8:	0084303a 	nor	r2,zero,r2
8112bdac:	1007883a 	mov	r3,r2
8112bdb0:	d0a08103 	ldbu	r2,-32252(gp)
8112bdb4:	1884703a 	and	r2,r3,r2
8112bdb8:	d0a08105 	stb	r2,-32252(gp)
    }
}
8112bdbc:	0001883a 	nop
8112bdc0:	e037883a 	mov	sp,fp
8112bdc4:	df000017 	ldw	fp,0(sp)
8112bdc8:	dec00104 	addi	sp,sp,4
8112bdcc:	f800283a 	ret

8112bdd0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112bdd0:	defffb04 	addi	sp,sp,-20
8112bdd4:	de00012e 	bgeu	sp,et,8112bddc <OS_FlagInit+0xc>
8112bdd8:	003b68fa 	trap	3
8112bddc:	dfc00415 	stw	ra,16(sp)
8112bde0:	df000315 	stw	fp,12(sp)
8112bde4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112bde8:	0140dc04 	movi	r5,880
8112bdec:	01204574 	movhi	r4,33045
8112bdf0:	213f1c04 	addi	r4,r4,-912
8112bdf4:	1129efc0 	call	81129efc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112bdf8:	00a04574 	movhi	r2,33045
8112bdfc:	10bf1c04 	addi	r2,r2,-912
8112be00:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112be04:	00a04574 	movhi	r2,33045
8112be08:	10bf2704 	addi	r2,r2,-868
8112be0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112be10:	e03ffd0d 	sth	zero,-12(fp)
8112be14:	00001306 	br	8112be64 <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112be18:	e0bffe17 	ldw	r2,-8(fp)
8112be1c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112be20:	e0bffe17 	ldw	r2,-8(fp)
8112be24:	e0ffff17 	ldw	r3,-4(fp)
8112be28:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112be2c:	e0bffe17 	ldw	r2,-8(fp)
8112be30:	00c00fc4 	movi	r3,63
8112be34:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112be38:	e0bffe17 	ldw	r2,-8(fp)
8112be3c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112be40:	e0bffe17 	ldw	r2,-8(fp)
8112be44:	10800b04 	addi	r2,r2,44
8112be48:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112be4c:	e0bfff17 	ldw	r2,-4(fp)
8112be50:	10800b04 	addi	r2,r2,44
8112be54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112be58:	e0bffd0b 	ldhu	r2,-12(fp)
8112be5c:	10800044 	addi	r2,r2,1
8112be60:	e0bffd0d 	sth	r2,-12(fp)
8112be64:	e0bffd0b 	ldhu	r2,-12(fp)
8112be68:	108004f0 	cmpltui	r2,r2,19
8112be6c:	103fea1e 	bne	r2,zero,8112be18 <__reset+0xfb10be18>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112be70:	e0bffe17 	ldw	r2,-8(fp)
8112be74:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112be78:	e0bffe17 	ldw	r2,-8(fp)
8112be7c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112be80:	e0bffe17 	ldw	r2,-8(fp)
8112be84:	00c00fc4 	movi	r3,63
8112be88:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112be8c:	e0bffe17 	ldw	r2,-8(fp)
8112be90:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112be94:	00a04574 	movhi	r2,33045
8112be98:	10bf1c04 	addi	r2,r2,-912
8112be9c:	d0a08915 	stw	r2,-32220(gp)
#endif
}
8112bea0:	0001883a 	nop
8112bea4:	e037883a 	mov	sp,fp
8112bea8:	dfc00117 	ldw	ra,4(sp)
8112beac:	df000017 	ldw	fp,0(sp)
8112beb0:	dec00204 	addi	sp,sp,8
8112beb4:	f800283a 	ret

8112beb8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112beb8:	defffa04 	addi	sp,sp,-24
8112bebc:	de00012e 	bgeu	sp,et,8112bec4 <OS_FlagTaskRdy+0xc>
8112bec0:	003b68fa 	trap	3
8112bec4:	dfc00515 	stw	ra,20(sp)
8112bec8:	df000415 	stw	fp,16(sp)
8112becc:	df000404 	addi	fp,sp,16
8112bed0:	e13ffe15 	stw	r4,-8(fp)
8112bed4:	2805883a 	mov	r2,r5
8112bed8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112bedc:	e0bffe17 	ldw	r2,-8(fp)
8112bee0:	10800217 	ldw	r2,8(r2)
8112bee4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112bee8:	e0bffd17 	ldw	r2,-12(fp)
8112beec:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112bef0:	e0bffd17 	ldw	r2,-12(fp)
8112bef4:	e0ffff0b 	ldhu	r3,-4(fp)
8112bef8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112befc:	e0bffd17 	ldw	r2,-12(fp)
8112bf00:	10c00c03 	ldbu	r3,48(r2)
8112bf04:	00bff7c4 	movi	r2,-33
8112bf08:	1884703a 	and	r2,r3,r2
8112bf0c:	1007883a 	mov	r3,r2
8112bf10:	e0bffd17 	ldw	r2,-12(fp)
8112bf14:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112bf18:	e0bffd17 	ldw	r2,-12(fp)
8112bf1c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112bf20:	e0bffd17 	ldw	r2,-12(fp)
8112bf24:	10800c03 	ldbu	r2,48(r2)
8112bf28:	10803fcc 	andi	r2,r2,255
8112bf2c:	1000181e 	bne	r2,zero,8112bf90 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112bf30:	e0bffd17 	ldw	r2,-12(fp)
8112bf34:	10c00d83 	ldbu	r3,54(r2)
8112bf38:	d0a08103 	ldbu	r2,-32252(gp)
8112bf3c:	1884b03a 	or	r2,r3,r2
8112bf40:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112bf44:	e0bffd17 	ldw	r2,-12(fp)
8112bf48:	10800d03 	ldbu	r2,52(r2)
8112bf4c:	10c03fcc 	andi	r3,r2,255
8112bf50:	e0bffd17 	ldw	r2,-12(fp)
8112bf54:	10800d03 	ldbu	r2,52(r2)
8112bf58:	11003fcc 	andi	r4,r2,255
8112bf5c:	d0a08144 	addi	r2,gp,-32251
8112bf60:	2085883a 	add	r2,r4,r2
8112bf64:	11000003 	ldbu	r4,0(r2)
8112bf68:	e0bffd17 	ldw	r2,-12(fp)
8112bf6c:	10800d43 	ldbu	r2,53(r2)
8112bf70:	2084b03a 	or	r2,r4,r2
8112bf74:	1009883a 	mov	r4,r2
8112bf78:	d0a08144 	addi	r2,gp,-32251
8112bf7c:	1885883a 	add	r2,r3,r2
8112bf80:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112bf84:	00800044 	movi	r2,1
8112bf88:	e0bffc05 	stb	r2,-16(fp)
8112bf8c:	00000106 	br	8112bf94 <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112bf90:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112bf94:	e13ffe17 	ldw	r4,-8(fp)
8112bf98:	112bfb40 	call	8112bfb4 <OS_FlagUnlink>
    return (sched);
8112bf9c:	e0bffc03 	ldbu	r2,-16(fp)
}
8112bfa0:	e037883a 	mov	sp,fp
8112bfa4:	dfc00117 	ldw	ra,4(sp)
8112bfa8:	df000017 	ldw	fp,0(sp)
8112bfac:	dec00204 	addi	sp,sp,8
8112bfb0:	f800283a 	ret

8112bfb4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112bfb4:	defffa04 	addi	sp,sp,-24
8112bfb8:	de00012e 	bgeu	sp,et,8112bfc0 <OS_FlagUnlink+0xc>
8112bfbc:	003b68fa 	trap	3
8112bfc0:	df000515 	stw	fp,20(sp)
8112bfc4:	df000504 	addi	fp,sp,20
8112bfc8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112bfcc:	e0bfff17 	ldw	r2,-4(fp)
8112bfd0:	10800117 	ldw	r2,4(r2)
8112bfd4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112bfd8:	e0bfff17 	ldw	r2,-4(fp)
8112bfdc:	10800017 	ldw	r2,0(r2)
8112bfe0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112bfe4:	e0bffb17 	ldw	r2,-20(fp)
8112bfe8:	10000b1e 	bne	r2,zero,8112c018 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112bfec:	e0bfff17 	ldw	r2,-4(fp)
8112bff0:	10800317 	ldw	r2,12(r2)
8112bff4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112bff8:	e0bffd17 	ldw	r2,-12(fp)
8112bffc:	e0fffc17 	ldw	r3,-16(fp)
8112c000:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112c004:	e0bffc17 	ldw	r2,-16(fp)
8112c008:	10000b26 	beq	r2,zero,8112c038 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112c00c:	e0bffc17 	ldw	r2,-16(fp)
8112c010:	10000115 	stw	zero,4(r2)
8112c014:	00000806 	br	8112c038 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112c018:	e0bffb17 	ldw	r2,-20(fp)
8112c01c:	e0fffc17 	ldw	r3,-16(fp)
8112c020:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112c024:	e0bffc17 	ldw	r2,-16(fp)
8112c028:	10000326 	beq	r2,zero,8112c038 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112c02c:	e0bffc17 	ldw	r2,-16(fp)
8112c030:	e0fffb17 	ldw	r3,-20(fp)
8112c034:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112c038:	e0bfff17 	ldw	r2,-4(fp)
8112c03c:	10800217 	ldw	r2,8(r2)
8112c040:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112c044:	e0bffe17 	ldw	r2,-8(fp)
8112c048:	10000a15 	stw	zero,40(r2)
#endif
}
8112c04c:	0001883a 	nop
8112c050:	e037883a 	mov	sp,fp
8112c054:	df000017 	ldw	fp,0(sp)
8112c058:	dec00104 	addi	sp,sp,4
8112c05c:	f800283a 	ret

8112c060 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112c060:	defff404 	addi	sp,sp,-48
8112c064:	de00012e 	bgeu	sp,et,8112c06c <OSMemCreate+0xc>
8112c068:	003b68fa 	trap	3
8112c06c:	df000b15 	stw	fp,44(sp)
8112c070:	df000b04 	addi	fp,sp,44
8112c074:	e13ffc15 	stw	r4,-16(fp)
8112c078:	e17ffd15 	stw	r5,-12(fp)
8112c07c:	e1bffe15 	stw	r6,-8(fp)
8112c080:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c084:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112c088:	e0bfff17 	ldw	r2,-4(fp)
8112c08c:	1000021e 	bne	r2,zero,8112c098 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112c090:	0005883a 	mov	r2,zero
8112c094:	00006506 	br	8112c22c <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112c098:	e0bffc17 	ldw	r2,-16(fp)
8112c09c:	1000051e 	bne	r2,zero,8112c0b4 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112c0a0:	e0bfff17 	ldw	r2,-4(fp)
8112c0a4:	00c01884 	movi	r3,98
8112c0a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112c0ac:	0005883a 	mov	r2,zero
8112c0b0:	00005e06 	br	8112c22c <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112c0b4:	e0bffc17 	ldw	r2,-16(fp)
8112c0b8:	108000cc 	andi	r2,r2,3
8112c0bc:	10000526 	beq	r2,zero,8112c0d4 <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112c0c0:	e0bfff17 	ldw	r2,-4(fp)
8112c0c4:	00c01884 	movi	r3,98
8112c0c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112c0cc:	0005883a 	mov	r2,zero
8112c0d0:	00005606 	br	8112c22c <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112c0d4:	e0bffd17 	ldw	r2,-12(fp)
8112c0d8:	108000a8 	cmpgeui	r2,r2,2
8112c0dc:	1000051e 	bne	r2,zero,8112c0f4 <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112c0e0:	e0bfff17 	ldw	r2,-4(fp)
8112c0e4:	00c016c4 	movi	r3,91
8112c0e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112c0ec:	0005883a 	mov	r2,zero
8112c0f0:	00004e06 	br	8112c22c <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112c0f4:	e0bffe17 	ldw	r2,-8(fp)
8112c0f8:	10800128 	cmpgeui	r2,r2,4
8112c0fc:	1000051e 	bne	r2,zero,8112c114 <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112c100:	e0bfff17 	ldw	r2,-4(fp)
8112c104:	00c01704 	movi	r3,92
8112c108:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112c10c:	0005883a 	mov	r2,zero
8112c110:	00004606 	br	8112c22c <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c114:	0005303a 	rdctl	r2,status
8112c118:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c11c:	e0fffb17 	ldw	r3,-20(fp)
8112c120:	00bfff84 	movi	r2,-2
8112c124:	1884703a 	and	r2,r3,r2
8112c128:	1001703a 	wrctl	status,r2
  
  return context;
8112c12c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c130:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112c134:	d0a07e17 	ldw	r2,-32264(gp)
8112c138:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112c13c:	d0a07e17 	ldw	r2,-32264(gp)
8112c140:	10000326 	beq	r2,zero,8112c150 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112c144:	d0a07e17 	ldw	r2,-32264(gp)
8112c148:	10800117 	ldw	r2,4(r2)
8112c14c:	d0a07e15 	stw	r2,-32264(gp)
8112c150:	e0bff817 	ldw	r2,-32(fp)
8112c154:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c158:	e0bff917 	ldw	r2,-28(fp)
8112c15c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112c160:	e0bffa17 	ldw	r2,-24(fp)
8112c164:	1000051e 	bne	r2,zero,8112c17c <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112c168:	e0bfff17 	ldw	r2,-4(fp)
8112c16c:	00c01684 	movi	r3,90
8112c170:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112c174:	0005883a 	mov	r2,zero
8112c178:	00002c06 	br	8112c22c <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112c17c:	e0bffc17 	ldw	r2,-16(fp)
8112c180:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112c184:	e0fffc17 	ldw	r3,-16(fp)
8112c188:	e0bffe17 	ldw	r2,-8(fp)
8112c18c:	1885883a 	add	r2,r3,r2
8112c190:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112c194:	e03ff715 	stw	zero,-36(fp)
8112c198:	00000c06 	br	8112c1cc <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112c19c:	e0bff617 	ldw	r2,-40(fp)
8112c1a0:	e0fff517 	ldw	r3,-44(fp)
8112c1a4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112c1a8:	e0bff517 	ldw	r2,-44(fp)
8112c1ac:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112c1b0:	e0fff517 	ldw	r3,-44(fp)
8112c1b4:	e0bffe17 	ldw	r2,-8(fp)
8112c1b8:	1885883a 	add	r2,r3,r2
8112c1bc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112c1c0:	e0bff717 	ldw	r2,-36(fp)
8112c1c4:	10800044 	addi	r2,r2,1
8112c1c8:	e0bff715 	stw	r2,-36(fp)
8112c1cc:	e0bffd17 	ldw	r2,-12(fp)
8112c1d0:	10bfffc4 	addi	r2,r2,-1
8112c1d4:	e0fff717 	ldw	r3,-36(fp)
8112c1d8:	18bff036 	bltu	r3,r2,8112c19c <__reset+0xfb10c19c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112c1dc:	e0bff617 	ldw	r2,-40(fp)
8112c1e0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112c1e4:	e0bffa17 	ldw	r2,-24(fp)
8112c1e8:	e0fffc17 	ldw	r3,-16(fp)
8112c1ec:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112c1f0:	e0bffa17 	ldw	r2,-24(fp)
8112c1f4:	e0fffc17 	ldw	r3,-16(fp)
8112c1f8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112c1fc:	e0bffa17 	ldw	r2,-24(fp)
8112c200:	e0fffd17 	ldw	r3,-12(fp)
8112c204:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112c208:	e0bffa17 	ldw	r2,-24(fp)
8112c20c:	e0fffd17 	ldw	r3,-12(fp)
8112c210:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112c214:	e0bffa17 	ldw	r2,-24(fp)
8112c218:	e0fffe17 	ldw	r3,-8(fp)
8112c21c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112c220:	e0bfff17 	ldw	r2,-4(fp)
8112c224:	10000005 	stb	zero,0(r2)
    return (pmem);
8112c228:	e0bffa17 	ldw	r2,-24(fp)
}
8112c22c:	e037883a 	mov	sp,fp
8112c230:	df000017 	ldw	fp,0(sp)
8112c234:	dec00104 	addi	sp,sp,4
8112c238:	f800283a 	ret

8112c23c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112c23c:	defff804 	addi	sp,sp,-32
8112c240:	de00012e 	bgeu	sp,et,8112c248 <OSMemGet+0xc>
8112c244:	003b68fa 	trap	3
8112c248:	df000715 	stw	fp,28(sp)
8112c24c:	df000704 	addi	fp,sp,28
8112c250:	e13ffe15 	stw	r4,-8(fp)
8112c254:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c258:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112c25c:	e0bfff17 	ldw	r2,-4(fp)
8112c260:	1000021e 	bne	r2,zero,8112c26c <OSMemGet+0x30>
        return ((void *)0);
8112c264:	0005883a 	mov	r2,zero
8112c268:	00002e06 	br	8112c324 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112c26c:	e0bffe17 	ldw	r2,-8(fp)
8112c270:	1000051e 	bne	r2,zero,8112c288 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c274:	e0bfff17 	ldw	r2,-4(fp)
8112c278:	00c01804 	movi	r3,96
8112c27c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c280:	0005883a 	mov	r2,zero
8112c284:	00002706 	br	8112c324 <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c288:	0005303a 	rdctl	r2,status
8112c28c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c290:	e0fffd17 	ldw	r3,-12(fp)
8112c294:	00bfff84 	movi	r2,-2
8112c298:	1884703a 	and	r2,r3,r2
8112c29c:	1001703a 	wrctl	status,r2
  
  return context;
8112c2a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c2a4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112c2a8:	e0bffe17 	ldw	r2,-8(fp)
8112c2ac:	10800417 	ldw	r2,16(r2)
8112c2b0:	10001426 	beq	r2,zero,8112c304 <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112c2b4:	e0bffe17 	ldw	r2,-8(fp)
8112c2b8:	10800117 	ldw	r2,4(r2)
8112c2bc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112c2c0:	e0bffb17 	ldw	r2,-20(fp)
8112c2c4:	10c00017 	ldw	r3,0(r2)
8112c2c8:	e0bffe17 	ldw	r2,-8(fp)
8112c2cc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112c2d0:	e0bffe17 	ldw	r2,-8(fp)
8112c2d4:	10800417 	ldw	r2,16(r2)
8112c2d8:	10ffffc4 	addi	r3,r2,-1
8112c2dc:	e0bffe17 	ldw	r2,-8(fp)
8112c2e0:	10c00415 	stw	r3,16(r2)
8112c2e4:	e0bff917 	ldw	r2,-28(fp)
8112c2e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c2ec:	e0bffa17 	ldw	r2,-24(fp)
8112c2f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112c2f4:	e0bfff17 	ldw	r2,-4(fp)
8112c2f8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112c2fc:	e0bffb17 	ldw	r2,-20(fp)
8112c300:	00000806 	br	8112c324 <OSMemGet+0xe8>
8112c304:	e0bff917 	ldw	r2,-28(fp)
8112c308:	e0bffc15 	stw	r2,-16(fp)
8112c30c:	e0bffc17 	ldw	r2,-16(fp)
8112c310:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112c314:	e0bfff17 	ldw	r2,-4(fp)
8112c318:	00c01744 	movi	r3,93
8112c31c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112c320:	0005883a 	mov	r2,zero
}
8112c324:	e037883a 	mov	sp,fp
8112c328:	df000017 	ldw	fp,0(sp)
8112c32c:	dec00104 	addi	sp,sp,4
8112c330:	f800283a 	ret

8112c334 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112c334:	defff704 	addi	sp,sp,-36
8112c338:	de00012e 	bgeu	sp,et,8112c340 <OSMemNameGet+0xc>
8112c33c:	003b68fa 	trap	3
8112c340:	dfc00815 	stw	ra,32(sp)
8112c344:	df000715 	stw	fp,28(sp)
8112c348:	df000704 	addi	fp,sp,28
8112c34c:	e13ffd15 	stw	r4,-12(fp)
8112c350:	e17ffe15 	stw	r5,-8(fp)
8112c354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c358:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c35c:	e0bfff17 	ldw	r2,-4(fp)
8112c360:	1000021e 	bne	r2,zero,8112c36c <OSMemNameGet+0x38>
        return (0);
8112c364:	0005883a 	mov	r2,zero
8112c368:	00002b06 	br	8112c418 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112c36c:	e0bffd17 	ldw	r2,-12(fp)
8112c370:	1000051e 	bne	r2,zero,8112c388 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c374:	e0bfff17 	ldw	r2,-4(fp)
8112c378:	00c01804 	movi	r3,96
8112c37c:	10c00005 	stb	r3,0(r2)
        return (0);
8112c380:	0005883a 	mov	r2,zero
8112c384:	00002406 	br	8112c418 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c388:	e0bffe17 	ldw	r2,-8(fp)
8112c38c:	1000051e 	bne	r2,zero,8112c3a4 <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112c390:	e0bfff17 	ldw	r2,-4(fp)
8112c394:	00c00304 	movi	r3,12
8112c398:	10c00005 	stb	r3,0(r2)
        return (0);
8112c39c:	0005883a 	mov	r2,zero
8112c3a0:	00001d06 	br	8112c418 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c3a4:	d0a08403 	ldbu	r2,-32240(gp)
8112c3a8:	10803fcc 	andi	r2,r2,255
8112c3ac:	10000526 	beq	r2,zero,8112c3c4 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112c3b0:	e0bfff17 	ldw	r2,-4(fp)
8112c3b4:	00c00444 	movi	r3,17
8112c3b8:	10c00005 	stb	r3,0(r2)
        return (0);
8112c3bc:	0005883a 	mov	r2,zero
8112c3c0:	00001506 	br	8112c418 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c3c4:	0005303a 	rdctl	r2,status
8112c3c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c3cc:	e0fffb17 	ldw	r3,-20(fp)
8112c3d0:	00bfff84 	movi	r2,-2
8112c3d4:	1884703a 	and	r2,r3,r2
8112c3d8:	1001703a 	wrctl	status,r2
  
  return context;
8112c3dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112c3e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112c3e4:	e0bffd17 	ldw	r2,-12(fp)
8112c3e8:	10800504 	addi	r2,r2,20
8112c3ec:	100b883a 	mov	r5,r2
8112c3f0:	e13ffe17 	ldw	r4,-8(fp)
8112c3f4:	112a11c0 	call	8112a11c <OS_StrCopy>
8112c3f8:	e0bffa05 	stb	r2,-24(fp)
8112c3fc:	e0bff917 	ldw	r2,-28(fp)
8112c400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c404:	e0bffc17 	ldw	r2,-16(fp)
8112c408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c40c:	e0bfff17 	ldw	r2,-4(fp)
8112c410:	10000005 	stb	zero,0(r2)
    return (len);
8112c414:	e0bffa03 	ldbu	r2,-24(fp)
}
8112c418:	e037883a 	mov	sp,fp
8112c41c:	dfc00117 	ldw	ra,4(sp)
8112c420:	df000017 	ldw	fp,0(sp)
8112c424:	dec00204 	addi	sp,sp,8
8112c428:	f800283a 	ret

8112c42c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112c42c:	defff604 	addi	sp,sp,-40
8112c430:	de00012e 	bgeu	sp,et,8112c438 <OSMemNameSet+0xc>
8112c434:	003b68fa 	trap	3
8112c438:	dfc00915 	stw	ra,36(sp)
8112c43c:	df000815 	stw	fp,32(sp)
8112c440:	df000804 	addi	fp,sp,32
8112c444:	e13ffd15 	stw	r4,-12(fp)
8112c448:	e17ffe15 	stw	r5,-8(fp)
8112c44c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c450:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c454:	e0bfff17 	ldw	r2,-4(fp)
8112c458:	10003526 	beq	r2,zero,8112c530 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112c45c:	e0bffd17 	ldw	r2,-12(fp)
8112c460:	1000041e 	bne	r2,zero,8112c474 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c464:	e0bfff17 	ldw	r2,-4(fp)
8112c468:	00c01804 	movi	r3,96
8112c46c:	10c00005 	stb	r3,0(r2)
        return;
8112c470:	00003006 	br	8112c534 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c474:	e0bffe17 	ldw	r2,-8(fp)
8112c478:	1000041e 	bne	r2,zero,8112c48c <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112c47c:	e0bfff17 	ldw	r2,-4(fp)
8112c480:	00c00304 	movi	r3,12
8112c484:	10c00005 	stb	r3,0(r2)
        return;
8112c488:	00002a06 	br	8112c534 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c48c:	d0a08403 	ldbu	r2,-32240(gp)
8112c490:	10803fcc 	andi	r2,r2,255
8112c494:	10000426 	beq	r2,zero,8112c4a8 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112c498:	e0bfff17 	ldw	r2,-4(fp)
8112c49c:	00c00484 	movi	r3,18
8112c4a0:	10c00005 	stb	r3,0(r2)
        return;
8112c4a4:	00002306 	br	8112c534 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c4a8:	0005303a 	rdctl	r2,status
8112c4ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c4b0:	e0fffc17 	ldw	r3,-16(fp)
8112c4b4:	00bfff84 	movi	r2,-2
8112c4b8:	1884703a 	and	r2,r3,r2
8112c4bc:	1001703a 	wrctl	status,r2
  
  return context;
8112c4c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c4c4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112c4c8:	e13ffe17 	ldw	r4,-8(fp)
8112c4cc:	112a1980 	call	8112a198 <OS_StrLen>
8112c4d0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112c4d4:	e0bffa03 	ldbu	r2,-24(fp)
8112c4d8:	10800830 	cmpltui	r2,r2,32
8112c4dc:	1000081e 	bne	r2,zero,8112c500 <OSMemNameSet+0xd4>
8112c4e0:	e0bff817 	ldw	r2,-32(fp)
8112c4e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c4e8:	e0bff917 	ldw	r2,-28(fp)
8112c4ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112c4f0:	e0bfff17 	ldw	r2,-4(fp)
8112c4f4:	00c018c4 	movi	r3,99
8112c4f8:	10c00005 	stb	r3,0(r2)
        return;
8112c4fc:	00000d06 	br	8112c534 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112c500:	e0bffd17 	ldw	r2,-12(fp)
8112c504:	10800504 	addi	r2,r2,20
8112c508:	e17ffe17 	ldw	r5,-8(fp)
8112c50c:	1009883a 	mov	r4,r2
8112c510:	112a11c0 	call	8112a11c <OS_StrCopy>
8112c514:	e0bff817 	ldw	r2,-32(fp)
8112c518:	e0bffb15 	stw	r2,-20(fp)
8112c51c:	e0bffb17 	ldw	r2,-20(fp)
8112c520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c524:	e0bfff17 	ldw	r2,-4(fp)
8112c528:	10000005 	stb	zero,0(r2)
8112c52c:	00000106 	br	8112c534 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112c530:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112c534:	e037883a 	mov	sp,fp
8112c538:	dfc00117 	ldw	ra,4(sp)
8112c53c:	df000017 	ldw	fp,0(sp)
8112c540:	dec00204 	addi	sp,sp,8
8112c544:	f800283a 	ret

8112c548 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112c548:	defff904 	addi	sp,sp,-28
8112c54c:	de00012e 	bgeu	sp,et,8112c554 <OSMemPut+0xc>
8112c550:	003b68fa 	trap	3
8112c554:	df000615 	stw	fp,24(sp)
8112c558:	df000604 	addi	fp,sp,24
8112c55c:	e13ffe15 	stw	r4,-8(fp)
8112c560:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c564:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112c568:	e0bffe17 	ldw	r2,-8(fp)
8112c56c:	1000021e 	bne	r2,zero,8112c578 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112c570:	00801804 	movi	r2,96
8112c574:	00002806 	br	8112c618 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112c578:	e0bfff17 	ldw	r2,-4(fp)
8112c57c:	1000021e 	bne	r2,zero,8112c588 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112c580:	008017c4 	movi	r2,95
8112c584:	00002406 	br	8112c618 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c588:	0005303a 	rdctl	r2,status
8112c58c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c590:	e0fffd17 	ldw	r3,-12(fp)
8112c594:	00bfff84 	movi	r2,-2
8112c598:	1884703a 	and	r2,r3,r2
8112c59c:	1001703a 	wrctl	status,r2
  
  return context;
8112c5a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c5a4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112c5a8:	e0bffe17 	ldw	r2,-8(fp)
8112c5ac:	10c00417 	ldw	r3,16(r2)
8112c5b0:	e0bffe17 	ldw	r2,-8(fp)
8112c5b4:	10800317 	ldw	r2,12(r2)
8112c5b8:	18800636 	bltu	r3,r2,8112c5d4 <OSMemPut+0x8c>
8112c5bc:	e0bffa17 	ldw	r2,-24(fp)
8112c5c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c5c4:	e0bffb17 	ldw	r2,-20(fp)
8112c5c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112c5cc:	00801784 	movi	r2,94
8112c5d0:	00001106 	br	8112c618 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112c5d4:	e0bffe17 	ldw	r2,-8(fp)
8112c5d8:	10c00117 	ldw	r3,4(r2)
8112c5dc:	e0bfff17 	ldw	r2,-4(fp)
8112c5e0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112c5e4:	e0bffe17 	ldw	r2,-8(fp)
8112c5e8:	e0ffff17 	ldw	r3,-4(fp)
8112c5ec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112c5f0:	e0bffe17 	ldw	r2,-8(fp)
8112c5f4:	10800417 	ldw	r2,16(r2)
8112c5f8:	10c00044 	addi	r3,r2,1
8112c5fc:	e0bffe17 	ldw	r2,-8(fp)
8112c600:	10c00415 	stw	r3,16(r2)
8112c604:	e0bffa17 	ldw	r2,-24(fp)
8112c608:	e0bffc15 	stw	r2,-16(fp)
8112c60c:	e0bffc17 	ldw	r2,-16(fp)
8112c610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112c614:	0005883a 	mov	r2,zero
}
8112c618:	e037883a 	mov	sp,fp
8112c61c:	df000017 	ldw	fp,0(sp)
8112c620:	dec00104 	addi	sp,sp,4
8112c624:	f800283a 	ret

8112c628 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112c628:	defffa04 	addi	sp,sp,-24
8112c62c:	de00012e 	bgeu	sp,et,8112c634 <OSMemQuery+0xc>
8112c630:	003b68fa 	trap	3
8112c634:	df000515 	stw	fp,20(sp)
8112c638:	df000504 	addi	fp,sp,20
8112c63c:	e13ffe15 	stw	r4,-8(fp)
8112c640:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c644:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112c648:	e0bffe17 	ldw	r2,-8(fp)
8112c64c:	1000021e 	bne	r2,zero,8112c658 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112c650:	00801804 	movi	r2,96
8112c654:	00002c06 	br	8112c708 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112c658:	e0bfff17 	ldw	r2,-4(fp)
8112c65c:	1000021e 	bne	r2,zero,8112c668 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112c660:	00801844 	movi	r2,97
8112c664:	00002806 	br	8112c708 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c668:	0005303a 	rdctl	r2,status
8112c66c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c670:	e0fffc17 	ldw	r3,-16(fp)
8112c674:	00bfff84 	movi	r2,-2
8112c678:	1884703a 	and	r2,r3,r2
8112c67c:	1001703a 	wrctl	status,r2
  
  return context;
8112c680:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c684:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112c688:	e0bffe17 	ldw	r2,-8(fp)
8112c68c:	10c00017 	ldw	r3,0(r2)
8112c690:	e0bfff17 	ldw	r2,-4(fp)
8112c694:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112c698:	e0bffe17 	ldw	r2,-8(fp)
8112c69c:	10c00117 	ldw	r3,4(r2)
8112c6a0:	e0bfff17 	ldw	r2,-4(fp)
8112c6a4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112c6a8:	e0bffe17 	ldw	r2,-8(fp)
8112c6ac:	10c00217 	ldw	r3,8(r2)
8112c6b0:	e0bfff17 	ldw	r2,-4(fp)
8112c6b4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112c6b8:	e0bffe17 	ldw	r2,-8(fp)
8112c6bc:	10c00317 	ldw	r3,12(r2)
8112c6c0:	e0bfff17 	ldw	r2,-4(fp)
8112c6c4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112c6c8:	e0bffe17 	ldw	r2,-8(fp)
8112c6cc:	10c00417 	ldw	r3,16(r2)
8112c6d0:	e0bfff17 	ldw	r2,-4(fp)
8112c6d4:	10c00415 	stw	r3,16(r2)
8112c6d8:	e0bffb17 	ldw	r2,-20(fp)
8112c6dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c6e0:	e0bffd17 	ldw	r2,-12(fp)
8112c6e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112c6e8:	e0bfff17 	ldw	r2,-4(fp)
8112c6ec:	10c00317 	ldw	r3,12(r2)
8112c6f0:	e0bfff17 	ldw	r2,-4(fp)
8112c6f4:	10800417 	ldw	r2,16(r2)
8112c6f8:	1887c83a 	sub	r3,r3,r2
8112c6fc:	e0bfff17 	ldw	r2,-4(fp)
8112c700:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112c704:	0005883a 	mov	r2,zero
}
8112c708:	e037883a 	mov	sp,fp
8112c70c:	df000017 	ldw	fp,0(sp)
8112c710:	dec00104 	addi	sp,sp,4
8112c714:	f800283a 	ret

8112c718 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112c718:	defffc04 	addi	sp,sp,-16
8112c71c:	de00012e 	bgeu	sp,et,8112c724 <OS_MemInit+0xc>
8112c720:	003b68fa 	trap	3
8112c724:	dfc00315 	stw	ra,12(sp)
8112c728:	df000215 	stw	fp,8(sp)
8112c72c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112c730:	01430c04 	movi	r5,3120
8112c734:	01204574 	movhi	r4,33045
8112c738:	21006004 	addi	r4,r4,384
8112c73c:	1129efc0 	call	81129efc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112c740:	00a04574 	movhi	r2,33045
8112c744:	10806004 	addi	r2,r2,384
8112c748:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112c74c:	e03fff0d 	sth	zero,-4(fp)
8112c750:	00001306 	br	8112c7a0 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112c754:	e0bfff0b 	ldhu	r2,-4(fp)
8112c758:	10800044 	addi	r2,r2,1
8112c75c:	10c00d24 	muli	r3,r2,52
8112c760:	00a04574 	movhi	r2,33045
8112c764:	10806004 	addi	r2,r2,384
8112c768:	1887883a 	add	r3,r3,r2
8112c76c:	e0bffe17 	ldw	r2,-8(fp)
8112c770:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112c774:	e0bffe17 	ldw	r2,-8(fp)
8112c778:	00c00fc4 	movi	r3,63
8112c77c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112c780:	e0bffe17 	ldw	r2,-8(fp)
8112c784:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112c788:	e0bffe17 	ldw	r2,-8(fp)
8112c78c:	10800d04 	addi	r2,r2,52
8112c790:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112c794:	e0bfff0b 	ldhu	r2,-4(fp)
8112c798:	10800044 	addi	r2,r2,1
8112c79c:	e0bfff0d 	sth	r2,-4(fp)
8112c7a0:	e0bfff0b 	ldhu	r2,-4(fp)
8112c7a4:	10800ef0 	cmpltui	r2,r2,59
8112c7a8:	103fea1e 	bne	r2,zero,8112c754 <__reset+0xfb10c754>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112c7ac:	e0bffe17 	ldw	r2,-8(fp)
8112c7b0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112c7b4:	e0bffe17 	ldw	r2,-8(fp)
8112c7b8:	00c00fc4 	movi	r3,63
8112c7bc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112c7c0:	e0bffe17 	ldw	r2,-8(fp)
8112c7c4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112c7c8:	00a04574 	movhi	r2,33045
8112c7cc:	10806004 	addi	r2,r2,384
8112c7d0:	d0a07e15 	stw	r2,-32264(gp)
#endif
}
8112c7d4:	0001883a 	nop
8112c7d8:	e037883a 	mov	sp,fp
8112c7dc:	dfc00117 	ldw	ra,4(sp)
8112c7e0:	df000017 	ldw	fp,0(sp)
8112c7e4:	dec00204 	addi	sp,sp,8
8112c7e8:	f800283a 	ret

8112c7ec <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112c7ec:	defff704 	addi	sp,sp,-36
8112c7f0:	de00012e 	bgeu	sp,et,8112c7f8 <OSMutexAccept+0xc>
8112c7f4:	003b68fa 	trap	3
8112c7f8:	df000815 	stw	fp,32(sp)
8112c7fc:	df000804 	addi	fp,sp,32
8112c800:	e13ffe15 	stw	r4,-8(fp)
8112c804:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112c808:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112c80c:	e0bfff17 	ldw	r2,-4(fp)
8112c810:	1000021e 	bne	r2,zero,8112c81c <OSMutexAccept+0x30>
        return (OS_FALSE);
8112c814:	0005883a 	mov	r2,zero
8112c818:	00005b06 	br	8112c988 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112c81c:	e0bffe17 	ldw	r2,-8(fp)
8112c820:	1000051e 	bne	r2,zero,8112c838 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112c824:	e0bfff17 	ldw	r2,-4(fp)
8112c828:	00c00104 	movi	r3,4
8112c82c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c830:	0005883a 	mov	r2,zero
8112c834:	00005406 	br	8112c988 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112c838:	e0bffe17 	ldw	r2,-8(fp)
8112c83c:	10800003 	ldbu	r2,0(r2)
8112c840:	10803fcc 	andi	r2,r2,255
8112c844:	10800120 	cmpeqi	r2,r2,4
8112c848:	1000051e 	bne	r2,zero,8112c860 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112c84c:	e0bfff17 	ldw	r2,-4(fp)
8112c850:	00c00044 	movi	r3,1
8112c854:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c858:	0005883a 	mov	r2,zero
8112c85c:	00004a06 	br	8112c988 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112c860:	d0a08403 	ldbu	r2,-32240(gp)
8112c864:	10803fcc 	andi	r2,r2,255
8112c868:	10000526 	beq	r2,zero,8112c880 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112c86c:	e0bfff17 	ldw	r2,-4(fp)
8112c870:	00c00084 	movi	r3,2
8112c874:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c878:	0005883a 	mov	r2,zero
8112c87c:	00004206 	br	8112c988 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c880:	0005303a 	rdctl	r2,status
8112c884:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c888:	e0fffd17 	ldw	r3,-12(fp)
8112c88c:	00bfff84 	movi	r2,-2
8112c890:	1884703a 	and	r2,r3,r2
8112c894:	1001703a 	wrctl	status,r2
  
  return context;
8112c898:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112c89c:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112c8a0:	e0bffe17 	ldw	r2,-8(fp)
8112c8a4:	1080020b 	ldhu	r2,8(r2)
8112c8a8:	10bfffcc 	andi	r2,r2,65535
8112c8ac:	1004d23a 	srli	r2,r2,8
8112c8b0:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112c8b4:	e0bffe17 	ldw	r2,-8(fp)
8112c8b8:	1080020b 	ldhu	r2,8(r2)
8112c8bc:	10bfffcc 	andi	r2,r2,65535
8112c8c0:	10803fcc 	andi	r2,r2,255
8112c8c4:	10803fd8 	cmpnei	r2,r2,255
8112c8c8:	1000281e 	bne	r2,zero,8112c96c <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112c8cc:	e0bffe17 	ldw	r2,-8(fp)
8112c8d0:	10c0020b 	ldhu	r3,8(r2)
8112c8d4:	00bfc004 	movi	r2,-256
8112c8d8:	1884703a 	and	r2,r3,r2
8112c8dc:	1007883a 	mov	r3,r2
8112c8e0:	e0bffe17 	ldw	r2,-8(fp)
8112c8e4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112c8e8:	e0bffe17 	ldw	r2,-8(fp)
8112c8ec:	10c0020b 	ldhu	r3,8(r2)
8112c8f0:	d0a08517 	ldw	r2,-32236(gp)
8112c8f4:	10800c83 	ldbu	r2,50(r2)
8112c8f8:	10803fcc 	andi	r2,r2,255
8112c8fc:	1884b03a 	or	r2,r3,r2
8112c900:	1007883a 	mov	r3,r2
8112c904:	e0bffe17 	ldw	r2,-8(fp)
8112c908:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112c90c:	d0e08517 	ldw	r3,-32236(gp)
8112c910:	e0bffe17 	ldw	r2,-8(fp)
8112c914:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112c918:	d0a08517 	ldw	r2,-32236(gp)
8112c91c:	10800c83 	ldbu	r2,50(r2)
8112c920:	10803fcc 	andi	r2,r2,255
8112c924:	e0fffa03 	ldbu	r3,-24(fp)
8112c928:	18800836 	bltu	r3,r2,8112c94c <OSMutexAccept+0x160>
8112c92c:	e0bff817 	ldw	r2,-32(fp)
8112c930:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c934:	e0bff917 	ldw	r2,-28(fp)
8112c938:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112c93c:	e0bfff17 	ldw	r2,-4(fp)
8112c940:	00c01e04 	movi	r3,120
8112c944:	10c00005 	stb	r3,0(r2)
8112c948:	00000606 	br	8112c964 <OSMutexAccept+0x178>
8112c94c:	e0bff817 	ldw	r2,-32(fp)
8112c950:	e0bffb15 	stw	r2,-20(fp)
8112c954:	e0bffb17 	ldw	r2,-20(fp)
8112c958:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112c95c:	e0bfff17 	ldw	r2,-4(fp)
8112c960:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112c964:	00800044 	movi	r2,1
8112c968:	00000706 	br	8112c988 <OSMutexAccept+0x19c>
8112c96c:	e0bff817 	ldw	r2,-32(fp)
8112c970:	e0bffc15 	stw	r2,-16(fp)
8112c974:	e0bffc17 	ldw	r2,-16(fp)
8112c978:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c97c:	e0bfff17 	ldw	r2,-4(fp)
8112c980:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112c984:	0005883a 	mov	r2,zero
}
8112c988:	e037883a 	mov	sp,fp
8112c98c:	df000017 	ldw	fp,0(sp)
8112c990:	dec00104 	addi	sp,sp,4
8112c994:	f800283a 	ret

8112c998 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112c998:	defff604 	addi	sp,sp,-40
8112c99c:	de00012e 	bgeu	sp,et,8112c9a4 <OSMutexCreate+0xc>
8112c9a0:	003b68fa 	trap	3
8112c9a4:	dfc00915 	stw	ra,36(sp)
8112c9a8:	df000815 	stw	fp,32(sp)
8112c9ac:	df000804 	addi	fp,sp,32
8112c9b0:	2005883a 	mov	r2,r4
8112c9b4:	e17fff15 	stw	r5,-4(fp)
8112c9b8:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112c9bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c9c0:	e0bfff17 	ldw	r2,-4(fp)
8112c9c4:	1000021e 	bne	r2,zero,8112c9d0 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112c9c8:	0005883a 	mov	r2,zero
8112c9cc:	00006106 	br	8112cb54 <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112c9d0:	e0bffe03 	ldbu	r2,-8(fp)
8112c9d4:	10800a30 	cmpltui	r2,r2,40
8112c9d8:	1000051e 	bne	r2,zero,8112c9f0 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112c9dc:	e0bfff17 	ldw	r2,-4(fp)
8112c9e0:	00c00a84 	movi	r3,42
8112c9e4:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112c9e8:	0005883a 	mov	r2,zero
8112c9ec:	00005906 	br	8112cb54 <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112c9f0:	d0a08403 	ldbu	r2,-32240(gp)
8112c9f4:	10803fcc 	andi	r2,r2,255
8112c9f8:	10000526 	beq	r2,zero,8112ca10 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112c9fc:	e0bfff17 	ldw	r2,-4(fp)
8112ca00:	00c00404 	movi	r3,16
8112ca04:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112ca08:	0005883a 	mov	r2,zero
8112ca0c:	00005106 	br	8112cb54 <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ca10:	0005303a 	rdctl	r2,status
8112ca14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ca18:	e0fffd17 	ldw	r3,-12(fp)
8112ca1c:	00bfff84 	movi	r2,-2
8112ca20:	1884703a 	and	r2,r3,r2
8112ca24:	1001703a 	wrctl	status,r2
  
  return context;
8112ca28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ca2c:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112ca30:	e0fffe03 	ldbu	r3,-8(fp)
8112ca34:	00a04574 	movhi	r2,33045
8112ca38:	10908604 	addi	r2,r2,16920
8112ca3c:	18c7883a 	add	r3,r3,r3
8112ca40:	18c7883a 	add	r3,r3,r3
8112ca44:	10c5883a 	add	r2,r2,r3
8112ca48:	10800017 	ldw	r2,0(r2)
8112ca4c:	10000926 	beq	r2,zero,8112ca74 <OSMutexCreate+0xdc>
8112ca50:	e0bff817 	ldw	r2,-32(fp)
8112ca54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ca58:	e0bff917 	ldw	r2,-28(fp)
8112ca5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112ca60:	e0bfff17 	ldw	r2,-4(fp)
8112ca64:	00c00a04 	movi	r3,40
8112ca68:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112ca6c:	0005883a 	mov	r2,zero
8112ca70:	00003806 	br	8112cb54 <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112ca74:	e0fffe03 	ldbu	r3,-8(fp)
8112ca78:	00a04574 	movhi	r2,33045
8112ca7c:	10908604 	addi	r2,r2,16920
8112ca80:	18c7883a 	add	r3,r3,r3
8112ca84:	18c7883a 	add	r3,r3,r3
8112ca88:	10c5883a 	add	r2,r2,r3
8112ca8c:	00c00044 	movi	r3,1
8112ca90:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112ca94:	d0a08317 	ldw	r2,-32244(gp)
8112ca98:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112ca9c:	e0bffb17 	ldw	r2,-20(fp)
8112caa0:	1000101e 	bne	r2,zero,8112cae4 <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112caa4:	e0fffe03 	ldbu	r3,-8(fp)
8112caa8:	00a04574 	movhi	r2,33045
8112caac:	10908604 	addi	r2,r2,16920
8112cab0:	18c7883a 	add	r3,r3,r3
8112cab4:	18c7883a 	add	r3,r3,r3
8112cab8:	10c5883a 	add	r2,r2,r3
8112cabc:	10000015 	stw	zero,0(r2)
8112cac0:	e0bff817 	ldw	r2,-32(fp)
8112cac4:	e0bffa15 	stw	r2,-24(fp)
8112cac8:	e0bffa17 	ldw	r2,-24(fp)
8112cacc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112cad0:	e0bfff17 	ldw	r2,-4(fp)
8112cad4:	00c00104 	movi	r3,4
8112cad8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cadc:	e0bffb17 	ldw	r2,-20(fp)
8112cae0:	00001c06 	br	8112cb54 <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112cae4:	d0a08317 	ldw	r2,-32244(gp)
8112cae8:	10800117 	ldw	r2,4(r2)
8112caec:	d0a08315 	stw	r2,-32244(gp)
8112caf0:	e0bff817 	ldw	r2,-32(fp)
8112caf4:	e0bffc15 	stw	r2,-16(fp)
8112caf8:	e0bffc17 	ldw	r2,-16(fp)
8112cafc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112cb00:	e0bffb17 	ldw	r2,-20(fp)
8112cb04:	00c00104 	movi	r3,4
8112cb08:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112cb0c:	e0bffe03 	ldbu	r2,-8(fp)
8112cb10:	1004923a 	slli	r2,r2,8
8112cb14:	10803fd4 	ori	r2,r2,255
8112cb18:	1007883a 	mov	r3,r2
8112cb1c:	e0bffb17 	ldw	r2,-20(fp)
8112cb20:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112cb24:	e0bffb17 	ldw	r2,-20(fp)
8112cb28:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112cb2c:	e0bffb17 	ldw	r2,-20(fp)
8112cb30:	00c00fc4 	movi	r3,63
8112cb34:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112cb38:	e0bffb17 	ldw	r2,-20(fp)
8112cb3c:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112cb40:	e13ffb17 	ldw	r4,-20(fp)
8112cb44:	1129ae40 	call	81129ae4 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112cb48:	e0bfff17 	ldw	r2,-4(fp)
8112cb4c:	10000005 	stb	zero,0(r2)
    return (pevent);
8112cb50:	e0bffb17 	ldw	r2,-20(fp)
}
8112cb54:	e037883a 	mov	sp,fp
8112cb58:	dfc00117 	ldw	ra,4(sp)
8112cb5c:	df000017 	ldw	fp,0(sp)
8112cb60:	dec00204 	addi	sp,sp,8
8112cb64:	f800283a 	ret

8112cb68 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112cb68:	defff004 	addi	sp,sp,-64
8112cb6c:	de00012e 	bgeu	sp,et,8112cb74 <OSMutexDel+0xc>
8112cb70:	003b68fa 	trap	3
8112cb74:	dfc00f15 	stw	ra,60(sp)
8112cb78:	df000e15 	stw	fp,56(sp)
8112cb7c:	df000e04 	addi	fp,sp,56
8112cb80:	e13ffd15 	stw	r4,-12(fp)
8112cb84:	2805883a 	mov	r2,r5
8112cb88:	e1bfff15 	stw	r6,-4(fp)
8112cb8c:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112cb90:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112cb94:	e0bfff17 	ldw	r2,-4(fp)
8112cb98:	1000021e 	bne	r2,zero,8112cba4 <OSMutexDel+0x3c>
        return (pevent);
8112cb9c:	e0bffd17 	ldw	r2,-12(fp)
8112cba0:	0000ad06 	br	8112ce58 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112cba4:	e0bffd17 	ldw	r2,-12(fp)
8112cba8:	1000051e 	bne	r2,zero,8112cbc0 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112cbac:	e0bfff17 	ldw	r2,-4(fp)
8112cbb0:	00c00104 	movi	r3,4
8112cbb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cbb8:	e0bffd17 	ldw	r2,-12(fp)
8112cbbc:	0000a606 	br	8112ce58 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112cbc0:	e0bffd17 	ldw	r2,-12(fp)
8112cbc4:	10800003 	ldbu	r2,0(r2)
8112cbc8:	10803fcc 	andi	r2,r2,255
8112cbcc:	10800120 	cmpeqi	r2,r2,4
8112cbd0:	1000051e 	bne	r2,zero,8112cbe8 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112cbd4:	e0bfff17 	ldw	r2,-4(fp)
8112cbd8:	00c00044 	movi	r3,1
8112cbdc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cbe0:	e0bffd17 	ldw	r2,-12(fp)
8112cbe4:	00009c06 	br	8112ce58 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112cbe8:	d0a08403 	ldbu	r2,-32240(gp)
8112cbec:	10803fcc 	andi	r2,r2,255
8112cbf0:	10000526 	beq	r2,zero,8112cc08 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112cbf4:	e0bfff17 	ldw	r2,-4(fp)
8112cbf8:	00c003c4 	movi	r3,15
8112cbfc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cc00:	e0bffd17 	ldw	r2,-12(fp)
8112cc04:	00009406 	br	8112ce58 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cc08:	0005303a 	rdctl	r2,status
8112cc0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cc10:	e0fffc17 	ldw	r3,-16(fp)
8112cc14:	00bfff84 	movi	r2,-2
8112cc18:	1884703a 	and	r2,r3,r2
8112cc1c:	1001703a 	wrctl	status,r2
  
  return context;
8112cc20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112cc24:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112cc28:	e0bffd17 	ldw	r2,-12(fp)
8112cc2c:	10800283 	ldbu	r2,10(r2)
8112cc30:	10803fcc 	andi	r2,r2,255
8112cc34:	10000326 	beq	r2,zero,8112cc44 <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112cc38:	00800044 	movi	r2,1
8112cc3c:	e0bff205 	stb	r2,-56(fp)
8112cc40:	00000106 	br	8112cc48 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112cc44:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112cc48:	e0bffe03 	ldbu	r2,-8(fp)
8112cc4c:	10000326 	beq	r2,zero,8112cc5c <OSMutexDel+0xf4>
8112cc50:	10800060 	cmpeqi	r2,r2,1
8112cc54:	10002f1e 	bne	r2,zero,8112cd14 <OSMutexDel+0x1ac>
8112cc58:	00007406 	br	8112ce2c <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112cc5c:	e0bff203 	ldbu	r2,-56(fp)
8112cc60:	1000221e 	bne	r2,zero,8112ccec <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112cc64:	e0bffd17 	ldw	r2,-12(fp)
8112cc68:	00c00fc4 	movi	r3,63
8112cc6c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112cc70:	e0bffd17 	ldw	r2,-12(fp)
8112cc74:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112cc78:	e0bffd17 	ldw	r2,-12(fp)
8112cc7c:	1080020b 	ldhu	r2,8(r2)
8112cc80:	10bfffcc 	andi	r2,r2,65535
8112cc84:	1004d23a 	srli	r2,r2,8
8112cc88:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112cc8c:	e0fff603 	ldbu	r3,-40(fp)
8112cc90:	00a04574 	movhi	r2,33045
8112cc94:	10908604 	addi	r2,r2,16920
8112cc98:	18c7883a 	add	r3,r3,r3
8112cc9c:	18c7883a 	add	r3,r3,r3
8112cca0:	10c5883a 	add	r2,r2,r3
8112cca4:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112cca8:	e0bffd17 	ldw	r2,-12(fp)
8112ccac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112ccb0:	d0e08317 	ldw	r3,-32244(gp)
8112ccb4:	e0bffd17 	ldw	r2,-12(fp)
8112ccb8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112ccbc:	e0bffd17 	ldw	r2,-12(fp)
8112ccc0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112ccc4:	e0bffd17 	ldw	r2,-12(fp)
8112ccc8:	d0a08315 	stw	r2,-32244(gp)
8112cccc:	e0bff417 	ldw	r2,-48(fp)
8112ccd0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ccd4:	e0bff517 	ldw	r2,-44(fp)
8112ccd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112ccdc:	e0bfff17 	ldw	r2,-4(fp)
8112cce0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112cce4:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112cce8:	00005a06 	br	8112ce54 <OSMutexDel+0x2ec>
8112ccec:	e0bff417 	ldw	r2,-48(fp)
8112ccf0:	e0bff715 	stw	r2,-36(fp)
8112ccf4:	e0bff717 	ldw	r2,-36(fp)
8112ccf8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112ccfc:	e0bfff17 	ldw	r2,-4(fp)
8112cd00:	00c01244 	movi	r3,73
8112cd04:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112cd08:	e0bffd17 	ldw	r2,-12(fp)
8112cd0c:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112cd10:	00005006 	br	8112ce54 <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112cd14:	e0bffd17 	ldw	r2,-12(fp)
8112cd18:	1080020b 	ldhu	r2,8(r2)
8112cd1c:	10bfffcc 	andi	r2,r2,65535
8112cd20:	1004d23a 	srli	r2,r2,8
8112cd24:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112cd28:	e0bffd17 	ldw	r2,-12(fp)
8112cd2c:	1080020b 	ldhu	r2,8(r2)
8112cd30:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112cd34:	e0bffd17 	ldw	r2,-12(fp)
8112cd38:	10800117 	ldw	r2,4(r2)
8112cd3c:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112cd40:	e0bffa17 	ldw	r2,-24(fp)
8112cd44:	10000f26 	beq	r2,zero,8112cd84 <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112cd48:	e0bffa17 	ldw	r2,-24(fp)
8112cd4c:	10800c83 	ldbu	r2,50(r2)
8112cd50:	10c03fcc 	andi	r3,r2,255
8112cd54:	e0bff603 	ldbu	r2,-40(fp)
8112cd58:	18800a1e 	bne	r3,r2,8112cd84 <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112cd5c:	e0bff903 	ldbu	r2,-28(fp)
8112cd60:	100b883a 	mov	r5,r2
8112cd64:	e13ffa17 	ldw	r4,-24(fp)
8112cd68:	112d7a40 	call	8112d7a4 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112cd6c:	00000506 	br	8112cd84 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112cd70:	000f883a 	mov	r7,zero
8112cd74:	01800404 	movi	r6,16
8112cd78:	000b883a 	mov	r5,zero
8112cd7c:	e13ffd17 	ldw	r4,-12(fp)
8112cd80:	112950c0 	call	8112950c <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112cd84:	e0bffd17 	ldw	r2,-12(fp)
8112cd88:	10800283 	ldbu	r2,10(r2)
8112cd8c:	10803fcc 	andi	r2,r2,255
8112cd90:	103ff71e 	bne	r2,zero,8112cd70 <__reset+0xfb10cd70>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112cd94:	e0bffd17 	ldw	r2,-12(fp)
8112cd98:	00c00fc4 	movi	r3,63
8112cd9c:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112cda0:	e0bffd17 	ldw	r2,-12(fp)
8112cda4:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112cda8:	e0bffd17 	ldw	r2,-12(fp)
8112cdac:	1080020b 	ldhu	r2,8(r2)
8112cdb0:	10bfffcc 	andi	r2,r2,65535
8112cdb4:	1004d23a 	srli	r2,r2,8
8112cdb8:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112cdbc:	e0fff603 	ldbu	r3,-40(fp)
8112cdc0:	00a04574 	movhi	r2,33045
8112cdc4:	10908604 	addi	r2,r2,16920
8112cdc8:	18c7883a 	add	r3,r3,r3
8112cdcc:	18c7883a 	add	r3,r3,r3
8112cdd0:	10c5883a 	add	r2,r2,r3
8112cdd4:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112cdd8:	e0bffd17 	ldw	r2,-12(fp)
8112cddc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112cde0:	d0e08317 	ldw	r3,-32244(gp)
8112cde4:	e0bffd17 	ldw	r2,-12(fp)
8112cde8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112cdec:	e0bffd17 	ldw	r2,-12(fp)
8112cdf0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112cdf4:	e0bffd17 	ldw	r2,-12(fp)
8112cdf8:	d0a08315 	stw	r2,-32244(gp)
8112cdfc:	e0bff417 	ldw	r2,-48(fp)
8112ce00:	e0bff815 	stw	r2,-32(fp)
8112ce04:	e0bff817 	ldw	r2,-32(fp)
8112ce08:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ce0c:	e0bff203 	ldbu	r2,-56(fp)
8112ce10:	10800058 	cmpnei	r2,r2,1
8112ce14:	1000011e 	bne	r2,zero,8112ce1c <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ce18:	1129fc80 	call	81129fc8 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112ce1c:	e0bfff17 	ldw	r2,-4(fp)
8112ce20:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112ce24:	e03ff315 	stw	zero,-52(fp)
             break;
8112ce28:	00000a06 	br	8112ce54 <OSMutexDel+0x2ec>
8112ce2c:	e0bff417 	ldw	r2,-48(fp)
8112ce30:	e0bffb15 	stw	r2,-20(fp)
8112ce34:	e0bffb17 	ldw	r2,-20(fp)
8112ce38:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112ce3c:	e0bfff17 	ldw	r2,-4(fp)
8112ce40:	00c001c4 	movi	r3,7
8112ce44:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112ce48:	e0bffd17 	ldw	r2,-12(fp)
8112ce4c:	e0bff315 	stw	r2,-52(fp)
             break;
8112ce50:	0001883a 	nop
    }
    return (pevent_return);
8112ce54:	e0bff317 	ldw	r2,-52(fp)
}
8112ce58:	e037883a 	mov	sp,fp
8112ce5c:	dfc00117 	ldw	ra,4(sp)
8112ce60:	df000017 	ldw	fp,0(sp)
8112ce64:	dec00204 	addi	sp,sp,8
8112ce68:	f800283a 	ret

8112ce6c <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ce6c:	deffee04 	addi	sp,sp,-72
8112ce70:	de00012e 	bgeu	sp,et,8112ce78 <OSMutexPend+0xc>
8112ce74:	003b68fa 	trap	3
8112ce78:	dfc01115 	stw	ra,68(sp)
8112ce7c:	df001015 	stw	fp,64(sp)
8112ce80:	df001004 	addi	fp,sp,64
8112ce84:	e13ffd15 	stw	r4,-12(fp)
8112ce88:	2805883a 	mov	r2,r5
8112ce8c:	e1bfff15 	stw	r6,-4(fp)
8112ce90:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ce94:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ce98:	e0bfff17 	ldw	r2,-4(fp)
8112ce9c:	10015626 	beq	r2,zero,8112d3f8 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112cea0:	e0bffd17 	ldw	r2,-12(fp)
8112cea4:	1000041e 	bne	r2,zero,8112ceb8 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112cea8:	e0bfff17 	ldw	r2,-4(fp)
8112ceac:	00c00104 	movi	r3,4
8112ceb0:	10c00005 	stb	r3,0(r2)
        return;
8112ceb4:	00015106 	br	8112d3fc <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112ceb8:	e0bffd17 	ldw	r2,-12(fp)
8112cebc:	10800003 	ldbu	r2,0(r2)
8112cec0:	10803fcc 	andi	r2,r2,255
8112cec4:	10800120 	cmpeqi	r2,r2,4
8112cec8:	1000041e 	bne	r2,zero,8112cedc <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112cecc:	e0bfff17 	ldw	r2,-4(fp)
8112ced0:	00c00044 	movi	r3,1
8112ced4:	10c00005 	stb	r3,0(r2)
        return;
8112ced8:	00014806 	br	8112d3fc <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112cedc:	d0a08403 	ldbu	r2,-32240(gp)
8112cee0:	10803fcc 	andi	r2,r2,255
8112cee4:	10000426 	beq	r2,zero,8112cef8 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112cee8:	e0bfff17 	ldw	r2,-4(fp)
8112ceec:	00c00084 	movi	r3,2
8112cef0:	10c00005 	stb	r3,0(r2)
        return;
8112cef4:	00014106 	br	8112d3fc <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112cef8:	d0a07203 	ldbu	r2,-32312(gp)
8112cefc:	10803fcc 	andi	r2,r2,255
8112cf00:	10000426 	beq	r2,zero,8112cf14 <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112cf04:	e0bfff17 	ldw	r2,-4(fp)
8112cf08:	00c00344 	movi	r3,13
8112cf0c:	10c00005 	stb	r3,0(r2)
        return;
8112cf10:	00013a06 	br	8112d3fc <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cf14:	0005303a 	rdctl	r2,status
8112cf18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cf1c:	e0fffc17 	ldw	r3,-16(fp)
8112cf20:	00bfff84 	movi	r2,-2
8112cf24:	1884703a 	and	r2,r3,r2
8112cf28:	1001703a 	wrctl	status,r2
  
  return context;
8112cf2c:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112cf30:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112cf34:	e0bffd17 	ldw	r2,-12(fp)
8112cf38:	1080020b 	ldhu	r2,8(r2)
8112cf3c:	10bfffcc 	andi	r2,r2,65535
8112cf40:	1004d23a 	srli	r2,r2,8
8112cf44:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112cf48:	e0bffd17 	ldw	r2,-12(fp)
8112cf4c:	1080020b 	ldhu	r2,8(r2)
8112cf50:	10803fcc 	andi	r2,r2,255
8112cf54:	10803fd8 	cmpnei	r2,r2,255
8112cf58:	1000271e 	bne	r2,zero,8112cff8 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112cf5c:	e0bffd17 	ldw	r2,-12(fp)
8112cf60:	10c0020b 	ldhu	r3,8(r2)
8112cf64:	00bfc004 	movi	r2,-256
8112cf68:	1884703a 	and	r2,r3,r2
8112cf6c:	1007883a 	mov	r3,r2
8112cf70:	e0bffd17 	ldw	r2,-12(fp)
8112cf74:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112cf78:	e0bffd17 	ldw	r2,-12(fp)
8112cf7c:	10c0020b 	ldhu	r3,8(r2)
8112cf80:	d0a08517 	ldw	r2,-32236(gp)
8112cf84:	10800c83 	ldbu	r2,50(r2)
8112cf88:	10803fcc 	andi	r2,r2,255
8112cf8c:	1884b03a 	or	r2,r3,r2
8112cf90:	1007883a 	mov	r3,r2
8112cf94:	e0bffd17 	ldw	r2,-12(fp)
8112cf98:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112cf9c:	d0e08517 	ldw	r3,-32236(gp)
8112cfa0:	e0bffd17 	ldw	r2,-12(fp)
8112cfa4:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112cfa8:	d0a08517 	ldw	r2,-32236(gp)
8112cfac:	10800c83 	ldbu	r2,50(r2)
8112cfb0:	10803fcc 	andi	r2,r2,255
8112cfb4:	e0fff303 	ldbu	r3,-52(fp)
8112cfb8:	18800836 	bltu	r3,r2,8112cfdc <OSMutexPend+0x170>
8112cfbc:	e0bff117 	ldw	r2,-60(fp)
8112cfc0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cfc4:	e0bff217 	ldw	r2,-56(fp)
8112cfc8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112cfcc:	e0bfff17 	ldw	r2,-4(fp)
8112cfd0:	00c01e04 	movi	r3,120
8112cfd4:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112cfd8:	00010806 	br	8112d3fc <OSMutexPend+0x590>
8112cfdc:	e0bff117 	ldw	r2,-60(fp)
8112cfe0:	e0bff415 	stw	r2,-48(fp)
8112cfe4:	e0bff417 	ldw	r2,-48(fp)
8112cfe8:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112cfec:	e0bfff17 	ldw	r2,-4(fp)
8112cff0:	10000005 	stb	zero,0(r2)
        }
        return;
8112cff4:	00010106 	br	8112d3fc <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112cff8:	e0bffd17 	ldw	r2,-12(fp)
8112cffc:	1080020b 	ldhu	r2,8(r2)
8112d000:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112d004:	e0bffd17 	ldw	r2,-12(fp)
8112d008:	10800117 	ldw	r2,4(r2)
8112d00c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112d010:	e0bff717 	ldw	r2,-36(fp)
8112d014:	10800c83 	ldbu	r2,50(r2)
8112d018:	10803fcc 	andi	r2,r2,255
8112d01c:	e0fff303 	ldbu	r3,-52(fp)
8112d020:	1880b92e 	bgeu	r3,r2,8112d308 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112d024:	d0a08517 	ldw	r2,-32236(gp)
8112d028:	10800c83 	ldbu	r2,50(r2)
8112d02c:	10c03fcc 	andi	r3,r2,255
8112d030:	e0bff603 	ldbu	r2,-40(fp)
8112d034:	1880b42e 	bgeu	r3,r2,8112d308 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112d038:	e0bff717 	ldw	r2,-36(fp)
8112d03c:	10800d03 	ldbu	r2,52(r2)
8112d040:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112d044:	e0fff803 	ldbu	r3,-32(fp)
8112d048:	d0a08144 	addi	r2,gp,-32251
8112d04c:	1885883a 	add	r2,r3,r2
8112d050:	10c00003 	ldbu	r3,0(r2)
8112d054:	e0bff717 	ldw	r2,-36(fp)
8112d058:	10800d43 	ldbu	r2,53(r2)
8112d05c:	1884703a 	and	r2,r3,r2
8112d060:	10803fcc 	andi	r2,r2,255
8112d064:	10001e26 	beq	r2,zero,8112d0e0 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112d068:	e0fff803 	ldbu	r3,-32(fp)
8112d06c:	e13ff803 	ldbu	r4,-32(fp)
8112d070:	d0a08144 	addi	r2,gp,-32251
8112d074:	2085883a 	add	r2,r4,r2
8112d078:	10800003 	ldbu	r2,0(r2)
8112d07c:	1009883a 	mov	r4,r2
8112d080:	e0bff717 	ldw	r2,-36(fp)
8112d084:	10800d43 	ldbu	r2,53(r2)
8112d088:	0084303a 	nor	r2,zero,r2
8112d08c:	2084703a 	and	r2,r4,r2
8112d090:	1009883a 	mov	r4,r2
8112d094:	d0a08144 	addi	r2,gp,-32251
8112d098:	1885883a 	add	r2,r3,r2
8112d09c:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112d0a0:	e0fff803 	ldbu	r3,-32(fp)
8112d0a4:	d0a08144 	addi	r2,gp,-32251
8112d0a8:	1885883a 	add	r2,r3,r2
8112d0ac:	10800003 	ldbu	r2,0(r2)
8112d0b0:	10803fcc 	andi	r2,r2,255
8112d0b4:	1000071e 	bne	r2,zero,8112d0d4 <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112d0b8:	e0bff717 	ldw	r2,-36(fp)
8112d0bc:	10800d83 	ldbu	r2,54(r2)
8112d0c0:	0084303a 	nor	r2,zero,r2
8112d0c4:	1007883a 	mov	r3,r2
8112d0c8:	d0a08103 	ldbu	r2,-32252(gp)
8112d0cc:	1884703a 	and	r2,r3,r2
8112d0d0:	d0a08105 	stb	r2,-32252(gp)
                }
                rdy = OS_TRUE;
8112d0d4:	00800044 	movi	r2,1
8112d0d8:	e0bff005 	stb	r2,-64(fp)
8112d0dc:	00002a06 	br	8112d188 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112d0e0:	e0bff717 	ldw	r2,-36(fp)
8112d0e4:	10800717 	ldw	r2,28(r2)
8112d0e8:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112d0ec:	e0bff917 	ldw	r2,-28(fp)
8112d0f0:	10002426 	beq	r2,zero,8112d184 <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112d0f4:	e0bff717 	ldw	r2,-36(fp)
8112d0f8:	10800d03 	ldbu	r2,52(r2)
8112d0fc:	10803fcc 	andi	r2,r2,255
8112d100:	e0fff717 	ldw	r3,-36(fp)
8112d104:	18c00d03 	ldbu	r3,52(r3)
8112d108:	18c03fcc 	andi	r3,r3,255
8112d10c:	e13ff917 	ldw	r4,-28(fp)
8112d110:	20c7883a 	add	r3,r4,r3
8112d114:	18c002c4 	addi	r3,r3,11
8112d118:	18c00003 	ldbu	r3,0(r3)
8112d11c:	1809883a 	mov	r4,r3
8112d120:	e0fff717 	ldw	r3,-36(fp)
8112d124:	18c00d43 	ldbu	r3,53(r3)
8112d128:	00c6303a 	nor	r3,zero,r3
8112d12c:	20c6703a 	and	r3,r4,r3
8112d130:	1809883a 	mov	r4,r3
8112d134:	e0fff917 	ldw	r3,-28(fp)
8112d138:	1887883a 	add	r3,r3,r2
8112d13c:	18c002c4 	addi	r3,r3,11
8112d140:	19000005 	stb	r4,0(r3)
8112d144:	e0fff917 	ldw	r3,-28(fp)
8112d148:	1885883a 	add	r2,r3,r2
8112d14c:	108002c4 	addi	r2,r2,11
8112d150:	10800003 	ldbu	r2,0(r2)
8112d154:	10803fcc 	andi	r2,r2,255
8112d158:	10000a1e 	bne	r2,zero,8112d184 <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112d15c:	e0bff917 	ldw	r2,-28(fp)
8112d160:	10800283 	ldbu	r2,10(r2)
8112d164:	1007883a 	mov	r3,r2
8112d168:	e0bff717 	ldw	r2,-36(fp)
8112d16c:	10800d83 	ldbu	r2,54(r2)
8112d170:	0084303a 	nor	r2,zero,r2
8112d174:	1884703a 	and	r2,r3,r2
8112d178:	1007883a 	mov	r3,r2
8112d17c:	e0bff917 	ldw	r2,-28(fp)
8112d180:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112d184:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112d188:	e0bff717 	ldw	r2,-36(fp)
8112d18c:	e0fff303 	ldbu	r3,-52(fp)
8112d190:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112d194:	e0bff717 	ldw	r2,-36(fp)
8112d198:	10800c83 	ldbu	r2,50(r2)
8112d19c:	10803fcc 	andi	r2,r2,255
8112d1a0:	1004d0fa 	srli	r2,r2,3
8112d1a4:	1007883a 	mov	r3,r2
8112d1a8:	e0bff717 	ldw	r2,-36(fp)
8112d1ac:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112d1b0:	e0bff717 	ldw	r2,-36(fp)
8112d1b4:	10800c83 	ldbu	r2,50(r2)
8112d1b8:	108001cc 	andi	r2,r2,7
8112d1bc:	1007883a 	mov	r3,r2
8112d1c0:	e0bff717 	ldw	r2,-36(fp)
8112d1c4:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112d1c8:	e0bff717 	ldw	r2,-36(fp)
8112d1cc:	10800d03 	ldbu	r2,52(r2)
8112d1d0:	10803fcc 	andi	r2,r2,255
8112d1d4:	00c00044 	movi	r3,1
8112d1d8:	1884983a 	sll	r2,r3,r2
8112d1dc:	1007883a 	mov	r3,r2
8112d1e0:	e0bff717 	ldw	r2,-36(fp)
8112d1e4:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112d1e8:	e0bff717 	ldw	r2,-36(fp)
8112d1ec:	10800cc3 	ldbu	r2,51(r2)
8112d1f0:	10803fcc 	andi	r2,r2,255
8112d1f4:	00c00044 	movi	r3,1
8112d1f8:	1884983a 	sll	r2,r3,r2
8112d1fc:	1007883a 	mov	r3,r2
8112d200:	e0bff717 	ldw	r2,-36(fp)
8112d204:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112d208:	e0bff003 	ldbu	r2,-64(fp)
8112d20c:	10800058 	cmpnei	r2,r2,1
8112d210:	1000161e 	bne	r2,zero,8112d26c <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112d214:	e0bff717 	ldw	r2,-36(fp)
8112d218:	10c00d83 	ldbu	r3,54(r2)
8112d21c:	d0a08103 	ldbu	r2,-32252(gp)
8112d220:	1884b03a 	or	r2,r3,r2
8112d224:	d0a08105 	stb	r2,-32252(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d228:	e0bff717 	ldw	r2,-36(fp)
8112d22c:	10800d03 	ldbu	r2,52(r2)
8112d230:	10c03fcc 	andi	r3,r2,255
8112d234:	e0bff717 	ldw	r2,-36(fp)
8112d238:	10800d03 	ldbu	r2,52(r2)
8112d23c:	11003fcc 	andi	r4,r2,255
8112d240:	d0a08144 	addi	r2,gp,-32251
8112d244:	2085883a 	add	r2,r4,r2
8112d248:	11000003 	ldbu	r4,0(r2)
8112d24c:	e0bff717 	ldw	r2,-36(fp)
8112d250:	10800d43 	ldbu	r2,53(r2)
8112d254:	2084b03a 	or	r2,r4,r2
8112d258:	1009883a 	mov	r4,r2
8112d25c:	d0a08144 	addi	r2,gp,-32251
8112d260:	1885883a 	add	r2,r3,r2
8112d264:	11000005 	stb	r4,0(r2)
8112d268:	00001f06 	br	8112d2e8 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112d26c:	e0bff717 	ldw	r2,-36(fp)
8112d270:	10800717 	ldw	r2,28(r2)
8112d274:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112d278:	e0bff917 	ldw	r2,-28(fp)
8112d27c:	10001a26 	beq	r2,zero,8112d2e8 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112d280:	e0bff917 	ldw	r2,-28(fp)
8112d284:	10c00283 	ldbu	r3,10(r2)
8112d288:	e0bff717 	ldw	r2,-36(fp)
8112d28c:	10800d83 	ldbu	r2,54(r2)
8112d290:	1884b03a 	or	r2,r3,r2
8112d294:	1007883a 	mov	r3,r2
8112d298:	e0bff917 	ldw	r2,-28(fp)
8112d29c:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d2a0:	e0bff717 	ldw	r2,-36(fp)
8112d2a4:	10800d03 	ldbu	r2,52(r2)
8112d2a8:	10803fcc 	andi	r2,r2,255
8112d2ac:	e0fff717 	ldw	r3,-36(fp)
8112d2b0:	18c00d03 	ldbu	r3,52(r3)
8112d2b4:	18c03fcc 	andi	r3,r3,255
8112d2b8:	e13ff917 	ldw	r4,-28(fp)
8112d2bc:	20c7883a 	add	r3,r4,r3
8112d2c0:	18c002c4 	addi	r3,r3,11
8112d2c4:	19000003 	ldbu	r4,0(r3)
8112d2c8:	e0fff717 	ldw	r3,-36(fp)
8112d2cc:	18c00d43 	ldbu	r3,53(r3)
8112d2d0:	20c6b03a 	or	r3,r4,r3
8112d2d4:	1809883a 	mov	r4,r3
8112d2d8:	e0fff917 	ldw	r3,-28(fp)
8112d2dc:	1885883a 	add	r2,r3,r2
8112d2e0:	108002c4 	addi	r2,r2,11
8112d2e4:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112d2e8:	e0fff303 	ldbu	r3,-52(fp)
8112d2ec:	00a04574 	movhi	r2,33045
8112d2f0:	10908604 	addi	r2,r2,16920
8112d2f4:	18c7883a 	add	r3,r3,r3
8112d2f8:	18c7883a 	add	r3,r3,r3
8112d2fc:	10c5883a 	add	r2,r2,r3
8112d300:	e0fff717 	ldw	r3,-36(fp)
8112d304:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112d308:	d0a08517 	ldw	r2,-32236(gp)
8112d30c:	d0e08517 	ldw	r3,-32236(gp)
8112d310:	18c00c03 	ldbu	r3,48(r3)
8112d314:	18c00414 	ori	r3,r3,16
8112d318:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112d31c:	d0a08517 	ldw	r2,-32236(gp)
8112d320:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112d324:	d0a08517 	ldw	r2,-32236(gp)
8112d328:	e0fffe0b 	ldhu	r3,-8(fp)
8112d32c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112d330:	e13ffd17 	ldw	r4,-12(fp)
8112d334:	11296ac0 	call	811296ac <OS_EventTaskWait>
8112d338:	e0bff117 	ldw	r2,-60(fp)
8112d33c:	e0bffb15 	stw	r2,-20(fp)
8112d340:	e0bffb17 	ldw	r2,-20(fp)
8112d344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112d348:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d34c:	0005303a 	rdctl	r2,status
8112d350:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d354:	e0fff517 	ldw	r3,-44(fp)
8112d358:	00bfff84 	movi	r2,-2
8112d35c:	1884703a 	and	r2,r3,r2
8112d360:	1001703a 	wrctl	status,r2
  
  return context;
8112d364:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112d368:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112d36c:	d0a08517 	ldw	r2,-32236(gp)
8112d370:	10800c43 	ldbu	r2,49(r2)
8112d374:	10803fcc 	andi	r2,r2,255
8112d378:	10000326 	beq	r2,zero,8112d388 <OSMutexPend+0x51c>
8112d37c:	108000a0 	cmpeqi	r2,r2,2
8112d380:	1000041e 	bne	r2,zero,8112d394 <OSMutexPend+0x528>
8112d384:	00000706 	br	8112d3a4 <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112d388:	e0bfff17 	ldw	r2,-4(fp)
8112d38c:	10000005 	stb	zero,0(r2)
             break;
8112d390:	00000c06 	br	8112d3c4 <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112d394:	e0bfff17 	ldw	r2,-4(fp)
8112d398:	00c00384 	movi	r3,14
8112d39c:	10c00005 	stb	r3,0(r2)
             break;
8112d3a0:	00000806 	br	8112d3c4 <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112d3a4:	d0a08517 	ldw	r2,-32236(gp)
8112d3a8:	e17ffd17 	ldw	r5,-12(fp)
8112d3ac:	1009883a 	mov	r4,r2
8112d3b0:	112991c0 	call	8112991c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112d3b4:	e0bfff17 	ldw	r2,-4(fp)
8112d3b8:	00c00284 	movi	r3,10
8112d3bc:	10c00005 	stb	r3,0(r2)
             break;
8112d3c0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112d3c4:	d0a08517 	ldw	r2,-32236(gp)
8112d3c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112d3cc:	d0a08517 	ldw	r2,-32236(gp)
8112d3d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112d3d4:	d0a08517 	ldw	r2,-32236(gp)
8112d3d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112d3dc:	d0a08517 	ldw	r2,-32236(gp)
8112d3e0:	10000815 	stw	zero,32(r2)
8112d3e4:	e0bff117 	ldw	r2,-60(fp)
8112d3e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d3ec:	e0bffa17 	ldw	r2,-24(fp)
8112d3f0:	1001703a 	wrctl	status,r2
8112d3f4:	00000106 	br	8112d3fc <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112d3f8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112d3fc:	e037883a 	mov	sp,fp
8112d400:	dfc00117 	ldw	ra,4(sp)
8112d404:	df000017 	ldw	fp,0(sp)
8112d408:	dec00204 	addi	sp,sp,8
8112d40c:	f800283a 	ret

8112d410 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112d410:	defff604 	addi	sp,sp,-40
8112d414:	de00012e 	bgeu	sp,et,8112d41c <OSMutexPost+0xc>
8112d418:	003b68fa 	trap	3
8112d41c:	dfc00915 	stw	ra,36(sp)
8112d420:	df000815 	stw	fp,32(sp)
8112d424:	df000804 	addi	fp,sp,32
8112d428:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d42c:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112d430:	d0a08403 	ldbu	r2,-32240(gp)
8112d434:	10803fcc 	andi	r2,r2,255
8112d438:	10000226 	beq	r2,zero,8112d444 <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112d43c:	00800144 	movi	r2,5
8112d440:	00007606 	br	8112d61c <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d444:	e0bfff17 	ldw	r2,-4(fp)
8112d448:	1000021e 	bne	r2,zero,8112d454 <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112d44c:	00800104 	movi	r2,4
8112d450:	00007206 	br	8112d61c <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112d454:	e0bfff17 	ldw	r2,-4(fp)
8112d458:	10800003 	ldbu	r2,0(r2)
8112d45c:	10803fcc 	andi	r2,r2,255
8112d460:	10800120 	cmpeqi	r2,r2,4
8112d464:	1000021e 	bne	r2,zero,8112d470 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112d468:	00800044 	movi	r2,1
8112d46c:	00006b06 	br	8112d61c <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d470:	0005303a 	rdctl	r2,status
8112d474:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d478:	e0fffe17 	ldw	r3,-8(fp)
8112d47c:	00bfff84 	movi	r2,-2
8112d480:	1884703a 	and	r2,r3,r2
8112d484:	1001703a 	wrctl	status,r2
  
  return context;
8112d488:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112d48c:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112d490:	e0bfff17 	ldw	r2,-4(fp)
8112d494:	1080020b 	ldhu	r2,8(r2)
8112d498:	10bfffcc 	andi	r2,r2,65535
8112d49c:	1004d23a 	srli	r2,r2,8
8112d4a0:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112d4a4:	e0bfff17 	ldw	r2,-4(fp)
8112d4a8:	1080020b 	ldhu	r2,8(r2)
8112d4ac:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112d4b0:	e0bfff17 	ldw	r2,-4(fp)
8112d4b4:	10c00117 	ldw	r3,4(r2)
8112d4b8:	d0a08517 	ldw	r2,-32236(gp)
8112d4bc:	18800626 	beq	r3,r2,8112d4d8 <OSMutexPost+0xc8>
8112d4c0:	e0bff817 	ldw	r2,-32(fp)
8112d4c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d4c8:	e0bff917 	ldw	r2,-28(fp)
8112d4cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112d4d0:	00801904 	movi	r2,100
8112d4d4:	00005106 	br	8112d61c <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112d4d8:	d0a08517 	ldw	r2,-32236(gp)
8112d4dc:	10800c83 	ldbu	r2,50(r2)
8112d4e0:	10c03fcc 	andi	r3,r2,255
8112d4e4:	e0bffa03 	ldbu	r2,-24(fp)
8112d4e8:	1880051e 	bne	r3,r2,8112d500 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112d4ec:	d0a08517 	ldw	r2,-32236(gp)
8112d4f0:	e0fffa43 	ldbu	r3,-23(fp)
8112d4f4:	180b883a 	mov	r5,r3
8112d4f8:	1009883a 	mov	r4,r2
8112d4fc:	112d7a40 	call	8112d7a4 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112d500:	e0fffa03 	ldbu	r3,-24(fp)
8112d504:	00a04574 	movhi	r2,33045
8112d508:	10908604 	addi	r2,r2,16920
8112d50c:	18c7883a 	add	r3,r3,r3
8112d510:	18c7883a 	add	r3,r3,r3
8112d514:	10c5883a 	add	r2,r2,r3
8112d518:	00c00044 	movi	r3,1
8112d51c:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112d520:	e0bfff17 	ldw	r2,-4(fp)
8112d524:	10800283 	ldbu	r2,10(r2)
8112d528:	10803fcc 	andi	r2,r2,255
8112d52c:	10002e26 	beq	r2,zero,8112d5e8 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112d530:	000f883a 	mov	r7,zero
8112d534:	01800404 	movi	r6,16
8112d538:	000b883a 	mov	r5,zero
8112d53c:	e13fff17 	ldw	r4,-4(fp)
8112d540:	112950c0 	call	8112950c <OS_EventTaskRdy>
8112d544:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112d548:	e0bfff17 	ldw	r2,-4(fp)
8112d54c:	10c0020b 	ldhu	r3,8(r2)
8112d550:	00bfc004 	movi	r2,-256
8112d554:	1884703a 	and	r2,r3,r2
8112d558:	1007883a 	mov	r3,r2
8112d55c:	e0bfff17 	ldw	r2,-4(fp)
8112d560:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112d564:	e0bfff17 	ldw	r2,-4(fp)
8112d568:	10c0020b 	ldhu	r3,8(r2)
8112d56c:	e0bffa43 	ldbu	r2,-23(fp)
8112d570:	1884b03a 	or	r2,r3,r2
8112d574:	1007883a 	mov	r3,r2
8112d578:	e0bfff17 	ldw	r2,-4(fp)
8112d57c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112d580:	e0fffa43 	ldbu	r3,-23(fp)
8112d584:	00a04574 	movhi	r2,33045
8112d588:	10908604 	addi	r2,r2,16920
8112d58c:	18c7883a 	add	r3,r3,r3
8112d590:	18c7883a 	add	r3,r3,r3
8112d594:	10c5883a 	add	r2,r2,r3
8112d598:	10c00017 	ldw	r3,0(r2)
8112d59c:	e0bfff17 	ldw	r2,-4(fp)
8112d5a0:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112d5a4:	e0bffa43 	ldbu	r2,-23(fp)
8112d5a8:	e0fffa03 	ldbu	r3,-24(fp)
8112d5ac:	18800736 	bltu	r3,r2,8112d5cc <OSMutexPost+0x1bc>
8112d5b0:	e0bff817 	ldw	r2,-32(fp)
8112d5b4:	e0bffb15 	stw	r2,-20(fp)
8112d5b8:	e0bffb17 	ldw	r2,-20(fp)
8112d5bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112d5c0:	1129fc80 	call	81129fc8 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112d5c4:	00801e04 	movi	r2,120
8112d5c8:	00001406 	br	8112d61c <OSMutexPost+0x20c>
8112d5cc:	e0bff817 	ldw	r2,-32(fp)
8112d5d0:	e0bffc15 	stw	r2,-16(fp)
8112d5d4:	e0bffc17 	ldw	r2,-16(fp)
8112d5d8:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112d5dc:	1129fc80 	call	81129fc8 <OS_Sched>
            return (OS_ERR_NONE);
8112d5e0:	0005883a 	mov	r2,zero
8112d5e4:	00000d06 	br	8112d61c <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112d5e8:	e0bfff17 	ldw	r2,-4(fp)
8112d5ec:	1080020b 	ldhu	r2,8(r2)
8112d5f0:	10803fd4 	ori	r2,r2,255
8112d5f4:	1007883a 	mov	r3,r2
8112d5f8:	e0bfff17 	ldw	r2,-4(fp)
8112d5fc:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112d600:	e0bfff17 	ldw	r2,-4(fp)
8112d604:	10000115 	stw	zero,4(r2)
8112d608:	e0bff817 	ldw	r2,-32(fp)
8112d60c:	e0bffd15 	stw	r2,-12(fp)
8112d610:	e0bffd17 	ldw	r2,-12(fp)
8112d614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d618:	0005883a 	mov	r2,zero
}
8112d61c:	e037883a 	mov	sp,fp
8112d620:	dfc00117 	ldw	ra,4(sp)
8112d624:	df000017 	ldw	fp,0(sp)
8112d628:	dec00204 	addi	sp,sp,8
8112d62c:	f800283a 	ret

8112d630 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112d630:	defff704 	addi	sp,sp,-36
8112d634:	de00012e 	bgeu	sp,et,8112d63c <OSMutexQuery+0xc>
8112d638:	003b68fa 	trap	3
8112d63c:	df000815 	stw	fp,32(sp)
8112d640:	df000804 	addi	fp,sp,32
8112d644:	e13ffe15 	stw	r4,-8(fp)
8112d648:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d64c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112d650:	d0a08403 	ldbu	r2,-32240(gp)
8112d654:	10803fcc 	andi	r2,r2,255
8112d658:	10000226 	beq	r2,zero,8112d664 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112d65c:	00800184 	movi	r2,6
8112d660:	00004c06 	br	8112d794 <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112d664:	e0bffe17 	ldw	r2,-8(fp)
8112d668:	1000021e 	bne	r2,zero,8112d674 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112d66c:	00800104 	movi	r2,4
8112d670:	00004806 	br	8112d794 <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112d674:	e0bfff17 	ldw	r2,-4(fp)
8112d678:	1000021e 	bne	r2,zero,8112d684 <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112d67c:	00800244 	movi	r2,9
8112d680:	00004406 	br	8112d794 <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112d684:	e0bffe17 	ldw	r2,-8(fp)
8112d688:	10800003 	ldbu	r2,0(r2)
8112d68c:	10803fcc 	andi	r2,r2,255
8112d690:	10800120 	cmpeqi	r2,r2,4
8112d694:	1000021e 	bne	r2,zero,8112d6a0 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112d698:	00800044 	movi	r2,1
8112d69c:	00003d06 	br	8112d794 <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d6a0:	0005303a 	rdctl	r2,status
8112d6a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d6a8:	e0fffd17 	ldw	r3,-12(fp)
8112d6ac:	00bfff84 	movi	r2,-2
8112d6b0:	1884703a 	and	r2,r3,r2
8112d6b4:	1001703a 	wrctl	status,r2
  
  return context;
8112d6b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d6bc:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112d6c0:	e0bffe17 	ldw	r2,-8(fp)
8112d6c4:	1080020b 	ldhu	r2,8(r2)
8112d6c8:	10bfffcc 	andi	r2,r2,65535
8112d6cc:	1004d23a 	srli	r2,r2,8
8112d6d0:	1007883a 	mov	r3,r2
8112d6d4:	e0bfff17 	ldw	r2,-4(fp)
8112d6d8:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112d6dc:	e0bffe17 	ldw	r2,-8(fp)
8112d6e0:	1080020b 	ldhu	r2,8(r2)
8112d6e4:	1007883a 	mov	r3,r2
8112d6e8:	e0bfff17 	ldw	r2,-4(fp)
8112d6ec:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112d6f0:	e0bfff17 	ldw	r2,-4(fp)
8112d6f4:	10800203 	ldbu	r2,8(r2)
8112d6f8:	10803fcc 	andi	r2,r2,255
8112d6fc:	10803fd8 	cmpnei	r2,r2,255
8112d700:	1000041e 	bne	r2,zero,8112d714 <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112d704:	e0bfff17 	ldw	r2,-4(fp)
8112d708:	00c00044 	movi	r3,1
8112d70c:	10c001c5 	stb	r3,7(r2)
8112d710:	00000206 	br	8112d71c <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112d714:	e0bfff17 	ldw	r2,-4(fp)
8112d718:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112d71c:	e0bffe17 	ldw	r2,-8(fp)
8112d720:	10c00283 	ldbu	r3,10(r2)
8112d724:	e0bfff17 	ldw	r2,-4(fp)
8112d728:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112d72c:	e0bffe17 	ldw	r2,-8(fp)
8112d730:	108002c4 	addi	r2,r2,11
8112d734:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112d738:	e0bfff17 	ldw	r2,-4(fp)
8112d73c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d740:	e03ff805 	stb	zero,-32(fp)
8112d744:	00000b06 	br	8112d774 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112d748:	e0bffa17 	ldw	r2,-24(fp)
8112d74c:	10c00044 	addi	r3,r2,1
8112d750:	e0fffa15 	stw	r3,-24(fp)
8112d754:	e0fff917 	ldw	r3,-28(fp)
8112d758:	19000044 	addi	r4,r3,1
8112d75c:	e13ff915 	stw	r4,-28(fp)
8112d760:	18c00003 	ldbu	r3,0(r3)
8112d764:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d768:	e0bff803 	ldbu	r2,-32(fp)
8112d76c:	10800044 	addi	r2,r2,1
8112d770:	e0bff805 	stb	r2,-32(fp)
8112d774:	e0bff803 	ldbu	r2,-32(fp)
8112d778:	108001b0 	cmpltui	r2,r2,6
8112d77c:	103ff21e 	bne	r2,zero,8112d748 <__reset+0xfb10d748>
8112d780:	e0bffb17 	ldw	r2,-20(fp)
8112d784:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d788:	e0bffc17 	ldw	r2,-16(fp)
8112d78c:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d790:	0005883a 	mov	r2,zero
}
8112d794:	e037883a 	mov	sp,fp
8112d798:	df000017 	ldw	fp,0(sp)
8112d79c:	dec00104 	addi	sp,sp,4
8112d7a0:	f800283a 	ret

8112d7a4 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112d7a4:	defffc04 	addi	sp,sp,-16
8112d7a8:	de00012e 	bgeu	sp,et,8112d7b0 <OSMutex_RdyAtPrio+0xc>
8112d7ac:	003b68fa 	trap	3
8112d7b0:	df000315 	stw	fp,12(sp)
8112d7b4:	df000304 	addi	fp,sp,12
8112d7b8:	e13ffe15 	stw	r4,-8(fp)
8112d7bc:	2805883a 	mov	r2,r5
8112d7c0:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112d7c4:	e0bffe17 	ldw	r2,-8(fp)
8112d7c8:	10800d03 	ldbu	r2,52(r2)
8112d7cc:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112d7d0:	e0fffd03 	ldbu	r3,-12(fp)
8112d7d4:	e13ffd03 	ldbu	r4,-12(fp)
8112d7d8:	d0a08144 	addi	r2,gp,-32251
8112d7dc:	2085883a 	add	r2,r4,r2
8112d7e0:	10800003 	ldbu	r2,0(r2)
8112d7e4:	1009883a 	mov	r4,r2
8112d7e8:	e0bffe17 	ldw	r2,-8(fp)
8112d7ec:	10800d43 	ldbu	r2,53(r2)
8112d7f0:	0084303a 	nor	r2,zero,r2
8112d7f4:	2084703a 	and	r2,r4,r2
8112d7f8:	1009883a 	mov	r4,r2
8112d7fc:	d0a08144 	addi	r2,gp,-32251
8112d800:	1885883a 	add	r2,r3,r2
8112d804:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112d808:	e0fffd03 	ldbu	r3,-12(fp)
8112d80c:	d0a08144 	addi	r2,gp,-32251
8112d810:	1885883a 	add	r2,r3,r2
8112d814:	10800003 	ldbu	r2,0(r2)
8112d818:	10803fcc 	andi	r2,r2,255
8112d81c:	1000071e 	bne	r2,zero,8112d83c <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112d820:	e0bffe17 	ldw	r2,-8(fp)
8112d824:	10800d83 	ldbu	r2,54(r2)
8112d828:	0084303a 	nor	r2,zero,r2
8112d82c:	1007883a 	mov	r3,r2
8112d830:	d0a08103 	ldbu	r2,-32252(gp)
8112d834:	1884703a 	and	r2,r3,r2
8112d838:	d0a08105 	stb	r2,-32252(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112d83c:	e0bffe17 	ldw	r2,-8(fp)
8112d840:	e0ffff03 	ldbu	r3,-4(fp)
8112d844:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112d848:	e0bfff03 	ldbu	r2,-4(fp)
8112d84c:	1004d0fa 	srli	r2,r2,3
8112d850:	108001cc 	andi	r2,r2,7
8112d854:	1007883a 	mov	r3,r2
8112d858:	e0bffe17 	ldw	r2,-8(fp)
8112d85c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112d860:	e0bfff03 	ldbu	r2,-4(fp)
8112d864:	108001cc 	andi	r2,r2,7
8112d868:	1007883a 	mov	r3,r2
8112d86c:	e0bffe17 	ldw	r2,-8(fp)
8112d870:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112d874:	e0bffe17 	ldw	r2,-8(fp)
8112d878:	10800d03 	ldbu	r2,52(r2)
8112d87c:	10803fcc 	andi	r2,r2,255
8112d880:	00c00044 	movi	r3,1
8112d884:	1884983a 	sll	r2,r3,r2
8112d888:	1007883a 	mov	r3,r2
8112d88c:	e0bffe17 	ldw	r2,-8(fp)
8112d890:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112d894:	e0bffe17 	ldw	r2,-8(fp)
8112d898:	10800cc3 	ldbu	r2,51(r2)
8112d89c:	10803fcc 	andi	r2,r2,255
8112d8a0:	00c00044 	movi	r3,1
8112d8a4:	1884983a 	sll	r2,r3,r2
8112d8a8:	1007883a 	mov	r3,r2
8112d8ac:	e0bffe17 	ldw	r2,-8(fp)
8112d8b0:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112d8b4:	e0bffe17 	ldw	r2,-8(fp)
8112d8b8:	10c00d83 	ldbu	r3,54(r2)
8112d8bc:	d0a08103 	ldbu	r2,-32252(gp)
8112d8c0:	1884b03a 	or	r2,r3,r2
8112d8c4:	d0a08105 	stb	r2,-32252(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d8c8:	e0bffe17 	ldw	r2,-8(fp)
8112d8cc:	10800d03 	ldbu	r2,52(r2)
8112d8d0:	10c03fcc 	andi	r3,r2,255
8112d8d4:	e0bffe17 	ldw	r2,-8(fp)
8112d8d8:	10800d03 	ldbu	r2,52(r2)
8112d8dc:	11003fcc 	andi	r4,r2,255
8112d8e0:	d0a08144 	addi	r2,gp,-32251
8112d8e4:	2085883a 	add	r2,r4,r2
8112d8e8:	11000003 	ldbu	r4,0(r2)
8112d8ec:	e0bffe17 	ldw	r2,-8(fp)
8112d8f0:	10800d43 	ldbu	r2,53(r2)
8112d8f4:	2084b03a 	or	r2,r4,r2
8112d8f8:	1009883a 	mov	r4,r2
8112d8fc:	d0a08144 	addi	r2,gp,-32251
8112d900:	1885883a 	add	r2,r3,r2
8112d904:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112d908:	e0ffff03 	ldbu	r3,-4(fp)
8112d90c:	00a04574 	movhi	r2,33045
8112d910:	10908604 	addi	r2,r2,16920
8112d914:	18c7883a 	add	r3,r3,r3
8112d918:	18c7883a 	add	r3,r3,r3
8112d91c:	10c5883a 	add	r2,r2,r3
8112d920:	e0fffe17 	ldw	r3,-8(fp)
8112d924:	10c00015 	stw	r3,0(r2)
}
8112d928:	0001883a 	nop
8112d92c:	e037883a 	mov	sp,fp
8112d930:	df000017 	ldw	fp,0(sp)
8112d934:	dec00104 	addi	sp,sp,4
8112d938:	f800283a 	ret

8112d93c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112d93c:	defff804 	addi	sp,sp,-32
8112d940:	de00012e 	bgeu	sp,et,8112d948 <OSQAccept+0xc>
8112d944:	003b68fa 	trap	3
8112d948:	df000715 	stw	fp,28(sp)
8112d94c:	df000704 	addi	fp,sp,28
8112d950:	e13ffe15 	stw	r4,-8(fp)
8112d954:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d958:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d95c:	e0bfff17 	ldw	r2,-4(fp)
8112d960:	1000021e 	bne	r2,zero,8112d96c <OSQAccept+0x30>
        return ((void *)0);
8112d964:	0005883a 	mov	r2,zero
8112d968:	00004206 	br	8112da74 <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112d96c:	e0bffe17 	ldw	r2,-8(fp)
8112d970:	1000051e 	bne	r2,zero,8112d988 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112d974:	e0bfff17 	ldw	r2,-4(fp)
8112d978:	00c00104 	movi	r3,4
8112d97c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d980:	0005883a 	mov	r2,zero
8112d984:	00003b06 	br	8112da74 <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112d988:	e0bffe17 	ldw	r2,-8(fp)
8112d98c:	10800003 	ldbu	r2,0(r2)
8112d990:	10803fcc 	andi	r2,r2,255
8112d994:	108000a0 	cmpeqi	r2,r2,2
8112d998:	1000051e 	bne	r2,zero,8112d9b0 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112d99c:	e0bfff17 	ldw	r2,-4(fp)
8112d9a0:	00c00044 	movi	r3,1
8112d9a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d9a8:	0005883a 	mov	r2,zero
8112d9ac:	00003106 	br	8112da74 <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d9b0:	0005303a 	rdctl	r2,status
8112d9b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d9b8:	e0fffd17 	ldw	r3,-12(fp)
8112d9bc:	00bfff84 	movi	r2,-2
8112d9c0:	1884703a 	and	r2,r3,r2
8112d9c4:	1001703a 	wrctl	status,r2
  
  return context;
8112d9c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d9cc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112d9d0:	e0bffe17 	ldw	r2,-8(fp)
8112d9d4:	10800117 	ldw	r2,4(r2)
8112d9d8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112d9dc:	e0bffc17 	ldw	r2,-16(fp)
8112d9e0:	1080058b 	ldhu	r2,22(r2)
8112d9e4:	10bfffcc 	andi	r2,r2,65535
8112d9e8:	10001926 	beq	r2,zero,8112da50 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112d9ec:	e0bffc17 	ldw	r2,-16(fp)
8112d9f0:	10800417 	ldw	r2,16(r2)
8112d9f4:	11000104 	addi	r4,r2,4
8112d9f8:	e0fffc17 	ldw	r3,-16(fp)
8112d9fc:	19000415 	stw	r4,16(r3)
8112da00:	10800017 	ldw	r2,0(r2)
8112da04:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112da08:	e0bffc17 	ldw	r2,-16(fp)
8112da0c:	1080058b 	ldhu	r2,22(r2)
8112da10:	10bfffc4 	addi	r2,r2,-1
8112da14:	1007883a 	mov	r3,r2
8112da18:	e0bffc17 	ldw	r2,-16(fp)
8112da1c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112da20:	e0bffc17 	ldw	r2,-16(fp)
8112da24:	10c00417 	ldw	r3,16(r2)
8112da28:	e0bffc17 	ldw	r2,-16(fp)
8112da2c:	10800217 	ldw	r2,8(r2)
8112da30:	1880041e 	bne	r3,r2,8112da44 <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112da34:	e0bffc17 	ldw	r2,-16(fp)
8112da38:	10c00117 	ldw	r3,4(r2)
8112da3c:	e0bffc17 	ldw	r2,-16(fp)
8112da40:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112da44:	e0bfff17 	ldw	r2,-4(fp)
8112da48:	10000005 	stb	zero,0(r2)
8112da4c:	00000406 	br	8112da60 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112da50:	e0bfff17 	ldw	r2,-4(fp)
8112da54:	00c007c4 	movi	r3,31
8112da58:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112da5c:	e03ff915 	stw	zero,-28(fp)
8112da60:	e0bffa17 	ldw	r2,-24(fp)
8112da64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112da68:	e0bffb17 	ldw	r2,-20(fp)
8112da6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112da70:	e0bff917 	ldw	r2,-28(fp)
}
8112da74:	e037883a 	mov	sp,fp
8112da78:	df000017 	ldw	fp,0(sp)
8112da7c:	dec00104 	addi	sp,sp,4
8112da80:	f800283a 	ret

8112da84 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112da84:	defff404 	addi	sp,sp,-48
8112da88:	de00012e 	bgeu	sp,et,8112da90 <OSQCreate+0xc>
8112da8c:	003b68fa 	trap	3
8112da90:	dfc00b15 	stw	ra,44(sp)
8112da94:	df000a15 	stw	fp,40(sp)
8112da98:	df000a04 	addi	fp,sp,40
8112da9c:	e13ffe15 	stw	r4,-8(fp)
8112daa0:	2805883a 	mov	r2,r5
8112daa4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112daa8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112daac:	d0a08403 	ldbu	r2,-32240(gp)
8112dab0:	10803fcc 	andi	r2,r2,255
8112dab4:	10000226 	beq	r2,zero,8112dac0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112dab8:	0005883a 	mov	r2,zero
8112dabc:	00005906 	br	8112dc24 <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dac0:	0005303a 	rdctl	r2,status
8112dac4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dac8:	e0fffd17 	ldw	r3,-12(fp)
8112dacc:	00bfff84 	movi	r2,-2
8112dad0:	1884703a 	and	r2,r3,r2
8112dad4:	1001703a 	wrctl	status,r2
  
  return context;
8112dad8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112dadc:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112dae0:	d0a08317 	ldw	r2,-32244(gp)
8112dae4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112dae8:	d0a08317 	ldw	r2,-32244(gp)
8112daec:	10000326 	beq	r2,zero,8112dafc <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112daf0:	d0a08317 	ldw	r2,-32244(gp)
8112daf4:	10800117 	ldw	r2,4(r2)
8112daf8:	d0a08315 	stw	r2,-32244(gp)
8112dafc:	e0bff717 	ldw	r2,-36(fp)
8112db00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112db04:	e0bff817 	ldw	r2,-32(fp)
8112db08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112db0c:	e0bff617 	ldw	r2,-40(fp)
8112db10:	10004326 	beq	r2,zero,8112dc20 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db14:	0005303a 	rdctl	r2,status
8112db18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112db1c:	e0fff917 	ldw	r3,-28(fp)
8112db20:	00bfff84 	movi	r2,-2
8112db24:	1884703a 	and	r2,r3,r2
8112db28:	1001703a 	wrctl	status,r2
  
  return context;
8112db2c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112db30:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112db34:	d0a08017 	ldw	r2,-32256(gp)
8112db38:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112db3c:	e0bffb17 	ldw	r2,-20(fp)
8112db40:	10002d26 	beq	r2,zero,8112dbf8 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112db44:	d0a08017 	ldw	r2,-32256(gp)
8112db48:	10800017 	ldw	r2,0(r2)
8112db4c:	d0a08015 	stw	r2,-32256(gp)
8112db50:	e0bff717 	ldw	r2,-36(fp)
8112db54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112db58:	e0bffa17 	ldw	r2,-24(fp)
8112db5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112db60:	e0bffb17 	ldw	r2,-20(fp)
8112db64:	e0fffe17 	ldw	r3,-8(fp)
8112db68:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112db6c:	e0bfff0b 	ldhu	r2,-4(fp)
8112db70:	1085883a 	add	r2,r2,r2
8112db74:	1085883a 	add	r2,r2,r2
8112db78:	1007883a 	mov	r3,r2
8112db7c:	e0bffe17 	ldw	r2,-8(fp)
8112db80:	10c7883a 	add	r3,r2,r3
8112db84:	e0bffb17 	ldw	r2,-20(fp)
8112db88:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112db8c:	e0bffb17 	ldw	r2,-20(fp)
8112db90:	e0fffe17 	ldw	r3,-8(fp)
8112db94:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112db98:	e0bffb17 	ldw	r2,-20(fp)
8112db9c:	e0fffe17 	ldw	r3,-8(fp)
8112dba0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112dba4:	e0bffb17 	ldw	r2,-20(fp)
8112dba8:	e0ffff0b 	ldhu	r3,-4(fp)
8112dbac:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112dbb0:	e0bffb17 	ldw	r2,-20(fp)
8112dbb4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112dbb8:	e0bff617 	ldw	r2,-40(fp)
8112dbbc:	00c00084 	movi	r3,2
8112dbc0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112dbc4:	e0bff617 	ldw	r2,-40(fp)
8112dbc8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112dbcc:	e0bff617 	ldw	r2,-40(fp)
8112dbd0:	e0fffb17 	ldw	r3,-20(fp)
8112dbd4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112dbd8:	e0bff617 	ldw	r2,-40(fp)
8112dbdc:	00c00fc4 	movi	r3,63
8112dbe0:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112dbe4:	e0bff617 	ldw	r2,-40(fp)
8112dbe8:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112dbec:	e13ff617 	ldw	r4,-40(fp)
8112dbf0:	1129ae40 	call	81129ae4 <OS_EventWaitListInit>
8112dbf4:	00000a06 	br	8112dc20 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112dbf8:	d0e08317 	ldw	r3,-32244(gp)
8112dbfc:	e0bff617 	ldw	r2,-40(fp)
8112dc00:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112dc04:	e0bff617 	ldw	r2,-40(fp)
8112dc08:	d0a08315 	stw	r2,-32244(gp)
8112dc0c:	e0bff717 	ldw	r2,-36(fp)
8112dc10:	e0bffc15 	stw	r2,-16(fp)
8112dc14:	e0bffc17 	ldw	r2,-16(fp)
8112dc18:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112dc1c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112dc20:	e0bff617 	ldw	r2,-40(fp)
}
8112dc24:	e037883a 	mov	sp,fp
8112dc28:	dfc00117 	ldw	ra,4(sp)
8112dc2c:	df000017 	ldw	fp,0(sp)
8112dc30:	dec00204 	addi	sp,sp,8
8112dc34:	f800283a 	ret

8112dc38 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112dc38:	defff204 	addi	sp,sp,-56
8112dc3c:	de00012e 	bgeu	sp,et,8112dc44 <OSQDel+0xc>
8112dc40:	003b68fa 	trap	3
8112dc44:	dfc00d15 	stw	ra,52(sp)
8112dc48:	df000c15 	stw	fp,48(sp)
8112dc4c:	df000c04 	addi	fp,sp,48
8112dc50:	e13ffd15 	stw	r4,-12(fp)
8112dc54:	2805883a 	mov	r2,r5
8112dc58:	e1bfff15 	stw	r6,-4(fp)
8112dc5c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112dc60:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112dc64:	e0bfff17 	ldw	r2,-4(fp)
8112dc68:	1000021e 	bne	r2,zero,8112dc74 <OSQDel+0x3c>
        return (pevent);
8112dc6c:	e0bffd17 	ldw	r2,-12(fp)
8112dc70:	00008e06 	br	8112deac <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112dc74:	e0bffd17 	ldw	r2,-12(fp)
8112dc78:	1000051e 	bne	r2,zero,8112dc90 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112dc7c:	e0bfff17 	ldw	r2,-4(fp)
8112dc80:	00c00104 	movi	r3,4
8112dc84:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dc88:	e0bffd17 	ldw	r2,-12(fp)
8112dc8c:	00008706 	br	8112deac <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112dc90:	e0bffd17 	ldw	r2,-12(fp)
8112dc94:	10800003 	ldbu	r2,0(r2)
8112dc98:	10803fcc 	andi	r2,r2,255
8112dc9c:	108000a0 	cmpeqi	r2,r2,2
8112dca0:	1000051e 	bne	r2,zero,8112dcb8 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112dca4:	e0bfff17 	ldw	r2,-4(fp)
8112dca8:	00c00044 	movi	r3,1
8112dcac:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dcb0:	e0bffd17 	ldw	r2,-12(fp)
8112dcb4:	00007d06 	br	8112deac <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112dcb8:	d0a08403 	ldbu	r2,-32240(gp)
8112dcbc:	10803fcc 	andi	r2,r2,255
8112dcc0:	10000526 	beq	r2,zero,8112dcd8 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112dcc4:	e0bfff17 	ldw	r2,-4(fp)
8112dcc8:	00c003c4 	movi	r3,15
8112dccc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dcd0:	e0bffd17 	ldw	r2,-12(fp)
8112dcd4:	00007506 	br	8112deac <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dcd8:	0005303a 	rdctl	r2,status
8112dcdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dce0:	e0fffc17 	ldw	r3,-16(fp)
8112dce4:	00bfff84 	movi	r2,-2
8112dce8:	1884703a 	and	r2,r3,r2
8112dcec:	1001703a 	wrctl	status,r2
  
  return context;
8112dcf0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112dcf4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112dcf8:	e0bffd17 	ldw	r2,-12(fp)
8112dcfc:	10800283 	ldbu	r2,10(r2)
8112dd00:	10803fcc 	andi	r2,r2,255
8112dd04:	10000326 	beq	r2,zero,8112dd14 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112dd08:	00800044 	movi	r2,1
8112dd0c:	e0bff405 	stb	r2,-48(fp)
8112dd10:	00000106 	br	8112dd18 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112dd14:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112dd18:	e0bffe03 	ldbu	r2,-8(fp)
8112dd1c:	10000326 	beq	r2,zero,8112dd2c <OSQDel+0xf4>
8112dd20:	10800060 	cmpeqi	r2,r2,1
8112dd24:	1000301e 	bne	r2,zero,8112dde8 <OSQDel+0x1b0>
8112dd28:	00005506 	br	8112de80 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112dd2c:	e0bff403 	ldbu	r2,-48(fp)
8112dd30:	10001e1e 	bne	r2,zero,8112ddac <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112dd34:	e0bffd17 	ldw	r2,-12(fp)
8112dd38:	00c00fc4 	movi	r3,63
8112dd3c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112dd40:	e0bffd17 	ldw	r2,-12(fp)
8112dd44:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112dd48:	e0bffd17 	ldw	r2,-12(fp)
8112dd4c:	10800117 	ldw	r2,4(r2)
8112dd50:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112dd54:	d0e08017 	ldw	r3,-32256(gp)
8112dd58:	e0bff817 	ldw	r2,-32(fp)
8112dd5c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112dd60:	e0bff817 	ldw	r2,-32(fp)
8112dd64:	d0a08015 	stw	r2,-32256(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112dd68:	e0bffd17 	ldw	r2,-12(fp)
8112dd6c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112dd70:	d0e08317 	ldw	r3,-32244(gp)
8112dd74:	e0bffd17 	ldw	r2,-12(fp)
8112dd78:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112dd7c:	e0bffd17 	ldw	r2,-12(fp)
8112dd80:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112dd84:	e0bffd17 	ldw	r2,-12(fp)
8112dd88:	d0a08315 	stw	r2,-32244(gp)
8112dd8c:	e0bff617 	ldw	r2,-40(fp)
8112dd90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dd94:	e0bff717 	ldw	r2,-36(fp)
8112dd98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112dd9c:	e0bfff17 	ldw	r2,-4(fp)
8112dda0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112dda4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112dda8:	00003f06 	br	8112dea8 <OSQDel+0x270>
8112ddac:	e0bff617 	ldw	r2,-40(fp)
8112ddb0:	e0bff915 	stw	r2,-28(fp)
8112ddb4:	e0bff917 	ldw	r2,-28(fp)
8112ddb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112ddbc:	e0bfff17 	ldw	r2,-4(fp)
8112ddc0:	00c01244 	movi	r3,73
8112ddc4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112ddc8:	e0bffd17 	ldw	r2,-12(fp)
8112ddcc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112ddd0:	00003506 	br	8112dea8 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112ddd4:	000f883a 	mov	r7,zero
8112ddd8:	01800104 	movi	r6,4
8112dddc:	000b883a 	mov	r5,zero
8112dde0:	e13ffd17 	ldw	r4,-12(fp)
8112dde4:	112950c0 	call	8112950c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112dde8:	e0bffd17 	ldw	r2,-12(fp)
8112ddec:	10800283 	ldbu	r2,10(r2)
8112ddf0:	10803fcc 	andi	r2,r2,255
8112ddf4:	103ff71e 	bne	r2,zero,8112ddd4 <__reset+0xfb10ddd4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112ddf8:	e0bffd17 	ldw	r2,-12(fp)
8112ddfc:	00c00fc4 	movi	r3,63
8112de00:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112de04:	e0bffd17 	ldw	r2,-12(fp)
8112de08:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112de0c:	e0bffd17 	ldw	r2,-12(fp)
8112de10:	10800117 	ldw	r2,4(r2)
8112de14:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112de18:	d0e08017 	ldw	r3,-32256(gp)
8112de1c:	e0bff817 	ldw	r2,-32(fp)
8112de20:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112de24:	e0bff817 	ldw	r2,-32(fp)
8112de28:	d0a08015 	stw	r2,-32256(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112de2c:	e0bffd17 	ldw	r2,-12(fp)
8112de30:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112de34:	d0e08317 	ldw	r3,-32244(gp)
8112de38:	e0bffd17 	ldw	r2,-12(fp)
8112de3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112de40:	e0bffd17 	ldw	r2,-12(fp)
8112de44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112de48:	e0bffd17 	ldw	r2,-12(fp)
8112de4c:	d0a08315 	stw	r2,-32244(gp)
8112de50:	e0bff617 	ldw	r2,-40(fp)
8112de54:	e0bffa15 	stw	r2,-24(fp)
8112de58:	e0bffa17 	ldw	r2,-24(fp)
8112de5c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112de60:	e0bff403 	ldbu	r2,-48(fp)
8112de64:	10800058 	cmpnei	r2,r2,1
8112de68:	1000011e 	bne	r2,zero,8112de70 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112de6c:	1129fc80 	call	81129fc8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112de70:	e0bfff17 	ldw	r2,-4(fp)
8112de74:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112de78:	e03ff515 	stw	zero,-44(fp)
             break;
8112de7c:	00000a06 	br	8112dea8 <OSQDel+0x270>
8112de80:	e0bff617 	ldw	r2,-40(fp)
8112de84:	e0bffb15 	stw	r2,-20(fp)
8112de88:	e0bffb17 	ldw	r2,-20(fp)
8112de8c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112de90:	e0bfff17 	ldw	r2,-4(fp)
8112de94:	00c001c4 	movi	r3,7
8112de98:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112de9c:	e0bffd17 	ldw	r2,-12(fp)
8112dea0:	e0bff515 	stw	r2,-44(fp)
             break;
8112dea4:	0001883a 	nop
    }
    return (pevent_return);
8112dea8:	e0bff517 	ldw	r2,-44(fp)
}
8112deac:	e037883a 	mov	sp,fp
8112deb0:	dfc00117 	ldw	ra,4(sp)
8112deb4:	df000017 	ldw	fp,0(sp)
8112deb8:	dec00204 	addi	sp,sp,8
8112debc:	f800283a 	ret

8112dec0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112dec0:	defffa04 	addi	sp,sp,-24
8112dec4:	de00012e 	bgeu	sp,et,8112decc <OSQFlush+0xc>
8112dec8:	003b68fa 	trap	3
8112decc:	df000515 	stw	fp,20(sp)
8112ded0:	df000504 	addi	fp,sp,20
8112ded4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ded8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112dedc:	e0bfff17 	ldw	r2,-4(fp)
8112dee0:	1000021e 	bne	r2,zero,8112deec <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112dee4:	00800104 	movi	r2,4
8112dee8:	00002106 	br	8112df70 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112deec:	e0bfff17 	ldw	r2,-4(fp)
8112def0:	10800003 	ldbu	r2,0(r2)
8112def4:	10803fcc 	andi	r2,r2,255
8112def8:	108000a0 	cmpeqi	r2,r2,2
8112defc:	1000021e 	bne	r2,zero,8112df08 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112df00:	00800044 	movi	r2,1
8112df04:	00001a06 	br	8112df70 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112df08:	0005303a 	rdctl	r2,status
8112df0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112df10:	e0fffd17 	ldw	r3,-12(fp)
8112df14:	00bfff84 	movi	r2,-2
8112df18:	1884703a 	and	r2,r3,r2
8112df1c:	1001703a 	wrctl	status,r2
  
  return context;
8112df20:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112df24:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112df28:	e0bfff17 	ldw	r2,-4(fp)
8112df2c:	10800117 	ldw	r2,4(r2)
8112df30:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112df34:	e0bffc17 	ldw	r2,-16(fp)
8112df38:	10c00117 	ldw	r3,4(r2)
8112df3c:	e0bffc17 	ldw	r2,-16(fp)
8112df40:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112df44:	e0bffc17 	ldw	r2,-16(fp)
8112df48:	10c00117 	ldw	r3,4(r2)
8112df4c:	e0bffc17 	ldw	r2,-16(fp)
8112df50:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112df54:	e0bffc17 	ldw	r2,-16(fp)
8112df58:	1000058d 	sth	zero,22(r2)
8112df5c:	e0bffb17 	ldw	r2,-20(fp)
8112df60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112df64:	e0bffe17 	ldw	r2,-8(fp)
8112df68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112df6c:	0005883a 	mov	r2,zero
}
8112df70:	e037883a 	mov	sp,fp
8112df74:	df000017 	ldw	fp,0(sp)
8112df78:	dec00104 	addi	sp,sp,4
8112df7c:	f800283a 	ret

8112df80 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112df80:	defff304 	addi	sp,sp,-52
8112df84:	de00012e 	bgeu	sp,et,8112df8c <OSQPend+0xc>
8112df88:	003b68fa 	trap	3
8112df8c:	dfc00c15 	stw	ra,48(sp)
8112df90:	df000b15 	stw	fp,44(sp)
8112df94:	df000b04 	addi	fp,sp,44
8112df98:	e13ffd15 	stw	r4,-12(fp)
8112df9c:	2805883a 	mov	r2,r5
8112dfa0:	e1bfff15 	stw	r6,-4(fp)
8112dfa4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112dfa8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112dfac:	e0bfff17 	ldw	r2,-4(fp)
8112dfb0:	1000021e 	bne	r2,zero,8112dfbc <OSQPend+0x3c>
        return ((void *)0);
8112dfb4:	0005883a 	mov	r2,zero
8112dfb8:	00009106 	br	8112e200 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112dfbc:	e0bffd17 	ldw	r2,-12(fp)
8112dfc0:	1000051e 	bne	r2,zero,8112dfd8 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112dfc4:	e0bfff17 	ldw	r2,-4(fp)
8112dfc8:	00c00104 	movi	r3,4
8112dfcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112dfd0:	0005883a 	mov	r2,zero
8112dfd4:	00008a06 	br	8112e200 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112dfd8:	e0bffd17 	ldw	r2,-12(fp)
8112dfdc:	10800003 	ldbu	r2,0(r2)
8112dfe0:	10803fcc 	andi	r2,r2,255
8112dfe4:	108000a0 	cmpeqi	r2,r2,2
8112dfe8:	1000051e 	bne	r2,zero,8112e000 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112dfec:	e0bfff17 	ldw	r2,-4(fp)
8112dff0:	00c00044 	movi	r3,1
8112dff4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112dff8:	0005883a 	mov	r2,zero
8112dffc:	00008006 	br	8112e200 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112e000:	d0a08403 	ldbu	r2,-32240(gp)
8112e004:	10803fcc 	andi	r2,r2,255
8112e008:	10000526 	beq	r2,zero,8112e020 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112e00c:	e0bfff17 	ldw	r2,-4(fp)
8112e010:	00c00084 	movi	r3,2
8112e014:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112e018:	0005883a 	mov	r2,zero
8112e01c:	00007806 	br	8112e200 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112e020:	d0a07203 	ldbu	r2,-32312(gp)
8112e024:	10803fcc 	andi	r2,r2,255
8112e028:	10000526 	beq	r2,zero,8112e040 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112e02c:	e0bfff17 	ldw	r2,-4(fp)
8112e030:	00c00344 	movi	r3,13
8112e034:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112e038:	0005883a 	mov	r2,zero
8112e03c:	00007006 	br	8112e200 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e040:	0005303a 	rdctl	r2,status
8112e044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e048:	e0fffc17 	ldw	r3,-16(fp)
8112e04c:	00bfff84 	movi	r2,-2
8112e050:	1884703a 	and	r2,r3,r2
8112e054:	1001703a 	wrctl	status,r2
  
  return context;
8112e058:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e05c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112e060:	e0bffd17 	ldw	r2,-12(fp)
8112e064:	10800117 	ldw	r2,4(r2)
8112e068:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112e06c:	e0bff817 	ldw	r2,-32(fp)
8112e070:	1080058b 	ldhu	r2,22(r2)
8112e074:	10bfffcc 	andi	r2,r2,65535
8112e078:	10001e26 	beq	r2,zero,8112e0f4 <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112e07c:	e0bff817 	ldw	r2,-32(fp)
8112e080:	10800417 	ldw	r2,16(r2)
8112e084:	11000104 	addi	r4,r2,4
8112e088:	e0fff817 	ldw	r3,-32(fp)
8112e08c:	19000415 	stw	r4,16(r3)
8112e090:	10800017 	ldw	r2,0(r2)
8112e094:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112e098:	e0bff817 	ldw	r2,-32(fp)
8112e09c:	1080058b 	ldhu	r2,22(r2)
8112e0a0:	10bfffc4 	addi	r2,r2,-1
8112e0a4:	1007883a 	mov	r3,r2
8112e0a8:	e0bff817 	ldw	r2,-32(fp)
8112e0ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112e0b0:	e0bff817 	ldw	r2,-32(fp)
8112e0b4:	10c00417 	ldw	r3,16(r2)
8112e0b8:	e0bff817 	ldw	r2,-32(fp)
8112e0bc:	10800217 	ldw	r2,8(r2)
8112e0c0:	1880041e 	bne	r3,r2,8112e0d4 <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112e0c4:	e0bff817 	ldw	r2,-32(fp)
8112e0c8:	10c00117 	ldw	r3,4(r2)
8112e0cc:	e0bff817 	ldw	r2,-32(fp)
8112e0d0:	10c00415 	stw	r3,16(r2)
8112e0d4:	e0bff617 	ldw	r2,-40(fp)
8112e0d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e0dc:	e0bff717 	ldw	r2,-36(fp)
8112e0e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112e0e4:	e0bfff17 	ldw	r2,-4(fp)
8112e0e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112e0ec:	e0bff517 	ldw	r2,-44(fp)
8112e0f0:	00004306 	br	8112e200 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112e0f4:	d0a08517 	ldw	r2,-32236(gp)
8112e0f8:	d0e08517 	ldw	r3,-32236(gp)
8112e0fc:	18c00c03 	ldbu	r3,48(r3)
8112e100:	18c00114 	ori	r3,r3,4
8112e104:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112e108:	d0a08517 	ldw	r2,-32236(gp)
8112e10c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112e110:	d0a08517 	ldw	r2,-32236(gp)
8112e114:	e0fffe0b 	ldhu	r3,-8(fp)
8112e118:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112e11c:	e13ffd17 	ldw	r4,-12(fp)
8112e120:	11296ac0 	call	811296ac <OS_EventTaskWait>
8112e124:	e0bff617 	ldw	r2,-40(fp)
8112e128:	e0bffb15 	stw	r2,-20(fp)
8112e12c:	e0bffb17 	ldw	r2,-20(fp)
8112e130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112e134:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e138:	0005303a 	rdctl	r2,status
8112e13c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e140:	e0fff917 	ldw	r3,-28(fp)
8112e144:	00bfff84 	movi	r2,-2
8112e148:	1884703a 	and	r2,r3,r2
8112e14c:	1001703a 	wrctl	status,r2
  
  return context;
8112e150:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112e154:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112e158:	d0a08517 	ldw	r2,-32236(gp)
8112e15c:	10800c43 	ldbu	r2,49(r2)
8112e160:	10803fcc 	andi	r2,r2,255
8112e164:	10000326 	beq	r2,zero,8112e174 <OSQPend+0x1f4>
8112e168:	108000a0 	cmpeqi	r2,r2,2
8112e16c:	1000071e 	bne	r2,zero,8112e18c <OSQPend+0x20c>
8112e170:	00000b06 	br	8112e1a0 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112e174:	d0a08517 	ldw	r2,-32236(gp)
8112e178:	10800917 	ldw	r2,36(r2)
8112e17c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112e180:	e0bfff17 	ldw	r2,-4(fp)
8112e184:	10000005 	stb	zero,0(r2)
             break;
8112e188:	00000e06 	br	8112e1c4 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112e18c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112e190:	e0bfff17 	ldw	r2,-4(fp)
8112e194:	00c00384 	movi	r3,14
8112e198:	10c00005 	stb	r3,0(r2)
             break;
8112e19c:	00000906 	br	8112e1c4 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112e1a0:	d0a08517 	ldw	r2,-32236(gp)
8112e1a4:	e17ffd17 	ldw	r5,-12(fp)
8112e1a8:	1009883a 	mov	r4,r2
8112e1ac:	112991c0 	call	8112991c <OS_EventTaskRemove>
             pmsg = (void *)0;
8112e1b0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112e1b4:	e0bfff17 	ldw	r2,-4(fp)
8112e1b8:	00c00284 	movi	r3,10
8112e1bc:	10c00005 	stb	r3,0(r2)
             break;
8112e1c0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112e1c4:	d0a08517 	ldw	r2,-32236(gp)
8112e1c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112e1cc:	d0a08517 	ldw	r2,-32236(gp)
8112e1d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112e1d4:	d0a08517 	ldw	r2,-32236(gp)
8112e1d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112e1dc:	d0a08517 	ldw	r2,-32236(gp)
8112e1e0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112e1e4:	d0a08517 	ldw	r2,-32236(gp)
8112e1e8:	10000915 	stw	zero,36(r2)
8112e1ec:	e0bff617 	ldw	r2,-40(fp)
8112e1f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e1f4:	e0bffa17 	ldw	r2,-24(fp)
8112e1f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112e1fc:	e0bff517 	ldw	r2,-44(fp)
}
8112e200:	e037883a 	mov	sp,fp
8112e204:	dfc00117 	ldw	ra,4(sp)
8112e208:	df000017 	ldw	fp,0(sp)
8112e20c:	dec00204 	addi	sp,sp,8
8112e210:	f800283a 	ret

8112e214 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112e214:	defff604 	addi	sp,sp,-40
8112e218:	de00012e 	bgeu	sp,et,8112e220 <OSQPendAbort+0xc>
8112e21c:	003b68fa 	trap	3
8112e220:	dfc00915 	stw	ra,36(sp)
8112e224:	df000815 	stw	fp,32(sp)
8112e228:	df000804 	addi	fp,sp,32
8112e22c:	e13ffd15 	stw	r4,-12(fp)
8112e230:	2805883a 	mov	r2,r5
8112e234:	e1bfff15 	stw	r6,-4(fp)
8112e238:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112e23c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112e240:	e0bfff17 	ldw	r2,-4(fp)
8112e244:	1000021e 	bne	r2,zero,8112e250 <OSQPendAbort+0x3c>
        return (0);
8112e248:	0005883a 	mov	r2,zero
8112e24c:	00004906 	br	8112e374 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112e250:	e0bffd17 	ldw	r2,-12(fp)
8112e254:	1000051e 	bne	r2,zero,8112e26c <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112e258:	e0bfff17 	ldw	r2,-4(fp)
8112e25c:	00c00104 	movi	r3,4
8112e260:	10c00005 	stb	r3,0(r2)
        return (0);
8112e264:	0005883a 	mov	r2,zero
8112e268:	00004206 	br	8112e374 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112e26c:	e0bffd17 	ldw	r2,-12(fp)
8112e270:	10800003 	ldbu	r2,0(r2)
8112e274:	10803fcc 	andi	r2,r2,255
8112e278:	108000a0 	cmpeqi	r2,r2,2
8112e27c:	1000051e 	bne	r2,zero,8112e294 <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112e280:	e0bfff17 	ldw	r2,-4(fp)
8112e284:	00c00044 	movi	r3,1
8112e288:	10c00005 	stb	r3,0(r2)
        return (0);
8112e28c:	0005883a 	mov	r2,zero
8112e290:	00003806 	br	8112e374 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e294:	0005303a 	rdctl	r2,status
8112e298:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e29c:	e0fffc17 	ldw	r3,-16(fp)
8112e2a0:	00bfff84 	movi	r2,-2
8112e2a4:	1884703a 	and	r2,r3,r2
8112e2a8:	1001703a 	wrctl	status,r2
  
  return context;
8112e2ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e2b0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112e2b4:	e0bffd17 	ldw	r2,-12(fp)
8112e2b8:	10800283 	ldbu	r2,10(r2)
8112e2bc:	10803fcc 	andi	r2,r2,255
8112e2c0:	10002526 	beq	r2,zero,8112e358 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112e2c4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112e2c8:	e0bffe03 	ldbu	r2,-8(fp)
8112e2cc:	10800060 	cmpeqi	r2,r2,1
8112e2d0:	10000e26 	beq	r2,zero,8112e30c <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112e2d4:	00000806 	br	8112e2f8 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112e2d8:	01c00084 	movi	r7,2
8112e2dc:	01800104 	movi	r6,4
8112e2e0:	000b883a 	mov	r5,zero
8112e2e4:	e13ffd17 	ldw	r4,-12(fp)
8112e2e8:	112950c0 	call	8112950c <OS_EventTaskRdy>
                     nbr_tasks++;
8112e2ec:	e0bff803 	ldbu	r2,-32(fp)
8112e2f0:	10800044 	addi	r2,r2,1
8112e2f4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112e2f8:	e0bffd17 	ldw	r2,-12(fp)
8112e2fc:	10800283 	ldbu	r2,10(r2)
8112e300:	10803fcc 	andi	r2,r2,255
8112e304:	103ff41e 	bne	r2,zero,8112e2d8 <__reset+0xfb10e2d8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112e308:	00000906 	br	8112e330 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112e30c:	01c00084 	movi	r7,2
8112e310:	01800104 	movi	r6,4
8112e314:	000b883a 	mov	r5,zero
8112e318:	e13ffd17 	ldw	r4,-12(fp)
8112e31c:	112950c0 	call	8112950c <OS_EventTaskRdy>
                 nbr_tasks++;
8112e320:	e0bff803 	ldbu	r2,-32(fp)
8112e324:	10800044 	addi	r2,r2,1
8112e328:	e0bff805 	stb	r2,-32(fp)
                 break;
8112e32c:	0001883a 	nop
8112e330:	e0bff917 	ldw	r2,-28(fp)
8112e334:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e338:	e0bffa17 	ldw	r2,-24(fp)
8112e33c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112e340:	1129fc80 	call	81129fc8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112e344:	e0bfff17 	ldw	r2,-4(fp)
8112e348:	00c00384 	movi	r3,14
8112e34c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112e350:	e0bff803 	ldbu	r2,-32(fp)
8112e354:	00000706 	br	8112e374 <OSQPendAbort+0x160>
8112e358:	e0bff917 	ldw	r2,-28(fp)
8112e35c:	e0bffb15 	stw	r2,-20(fp)
8112e360:	e0bffb17 	ldw	r2,-20(fp)
8112e364:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e368:	e0bfff17 	ldw	r2,-4(fp)
8112e36c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112e370:	0005883a 	mov	r2,zero
}
8112e374:	e037883a 	mov	sp,fp
8112e378:	dfc00117 	ldw	ra,4(sp)
8112e37c:	df000017 	ldw	fp,0(sp)
8112e380:	dec00204 	addi	sp,sp,8
8112e384:	f800283a 	ret

8112e388 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112e388:	defff604 	addi	sp,sp,-40
8112e38c:	de00012e 	bgeu	sp,et,8112e394 <OSQPost+0xc>
8112e390:	003b68fa 	trap	3
8112e394:	dfc00915 	stw	ra,36(sp)
8112e398:	df000815 	stw	fp,32(sp)
8112e39c:	df000804 	addi	fp,sp,32
8112e3a0:	e13ffe15 	stw	r4,-8(fp)
8112e3a4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112e3a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112e3ac:	e0bffe17 	ldw	r2,-8(fp)
8112e3b0:	1000021e 	bne	r2,zero,8112e3bc <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112e3b4:	00800104 	movi	r2,4
8112e3b8:	00004a06 	br	8112e4e4 <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112e3bc:	e0bffe17 	ldw	r2,-8(fp)
8112e3c0:	10800003 	ldbu	r2,0(r2)
8112e3c4:	10803fcc 	andi	r2,r2,255
8112e3c8:	108000a0 	cmpeqi	r2,r2,2
8112e3cc:	1000021e 	bne	r2,zero,8112e3d8 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112e3d0:	00800044 	movi	r2,1
8112e3d4:	00004306 	br	8112e4e4 <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e3d8:	0005303a 	rdctl	r2,status
8112e3dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e3e0:	e0fffd17 	ldw	r3,-12(fp)
8112e3e4:	00bfff84 	movi	r2,-2
8112e3e8:	1884703a 	and	r2,r3,r2
8112e3ec:	1001703a 	wrctl	status,r2
  
  return context;
8112e3f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e3f4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112e3f8:	e0bffe17 	ldw	r2,-8(fp)
8112e3fc:	10800283 	ldbu	r2,10(r2)
8112e400:	10803fcc 	andi	r2,r2,255
8112e404:	10000c26 	beq	r2,zero,8112e438 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e408:	000f883a 	mov	r7,zero
8112e40c:	01800104 	movi	r6,4
8112e410:	e17fff17 	ldw	r5,-4(fp)
8112e414:	e13ffe17 	ldw	r4,-8(fp)
8112e418:	112950c0 	call	8112950c <OS_EventTaskRdy>
8112e41c:	e0bff817 	ldw	r2,-32(fp)
8112e420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e424:	e0bff917 	ldw	r2,-28(fp)
8112e428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112e42c:	1129fc80 	call	81129fc8 <OS_Sched>
        return (OS_ERR_NONE);
8112e430:	0005883a 	mov	r2,zero
8112e434:	00002b06 	br	8112e4e4 <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112e438:	e0bffe17 	ldw	r2,-8(fp)
8112e43c:	10800117 	ldw	r2,4(r2)
8112e440:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112e444:	e0bffb17 	ldw	r2,-20(fp)
8112e448:	10c0058b 	ldhu	r3,22(r2)
8112e44c:	e0bffb17 	ldw	r2,-20(fp)
8112e450:	1080050b 	ldhu	r2,20(r2)
8112e454:	18ffffcc 	andi	r3,r3,65535
8112e458:	10bfffcc 	andi	r2,r2,65535
8112e45c:	18800636 	bltu	r3,r2,8112e478 <OSQPost+0xf0>
8112e460:	e0bff817 	ldw	r2,-32(fp)
8112e464:	e0bffa15 	stw	r2,-24(fp)
8112e468:	e0bffa17 	ldw	r2,-24(fp)
8112e46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e470:	00800784 	movi	r2,30
8112e474:	00001b06 	br	8112e4e4 <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112e478:	e0bffb17 	ldw	r2,-20(fp)
8112e47c:	10800317 	ldw	r2,12(r2)
8112e480:	11000104 	addi	r4,r2,4
8112e484:	e0fffb17 	ldw	r3,-20(fp)
8112e488:	19000315 	stw	r4,12(r3)
8112e48c:	e0ffff17 	ldw	r3,-4(fp)
8112e490:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112e494:	e0bffb17 	ldw	r2,-20(fp)
8112e498:	1080058b 	ldhu	r2,22(r2)
8112e49c:	10800044 	addi	r2,r2,1
8112e4a0:	1007883a 	mov	r3,r2
8112e4a4:	e0bffb17 	ldw	r2,-20(fp)
8112e4a8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112e4ac:	e0bffb17 	ldw	r2,-20(fp)
8112e4b0:	10c00317 	ldw	r3,12(r2)
8112e4b4:	e0bffb17 	ldw	r2,-20(fp)
8112e4b8:	10800217 	ldw	r2,8(r2)
8112e4bc:	1880041e 	bne	r3,r2,8112e4d0 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112e4c0:	e0bffb17 	ldw	r2,-20(fp)
8112e4c4:	10c00117 	ldw	r3,4(r2)
8112e4c8:	e0bffb17 	ldw	r2,-20(fp)
8112e4cc:	10c00315 	stw	r3,12(r2)
8112e4d0:	e0bff817 	ldw	r2,-32(fp)
8112e4d4:	e0bffc15 	stw	r2,-16(fp)
8112e4d8:	e0bffc17 	ldw	r2,-16(fp)
8112e4dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e4e0:	0005883a 	mov	r2,zero
}
8112e4e4:	e037883a 	mov	sp,fp
8112e4e8:	dfc00117 	ldw	ra,4(sp)
8112e4ec:	df000017 	ldw	fp,0(sp)
8112e4f0:	dec00204 	addi	sp,sp,8
8112e4f4:	f800283a 	ret

8112e4f8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112e4f8:	defff604 	addi	sp,sp,-40
8112e4fc:	de00012e 	bgeu	sp,et,8112e504 <OSQPostFront+0xc>
8112e500:	003b68fa 	trap	3
8112e504:	dfc00915 	stw	ra,36(sp)
8112e508:	df000815 	stw	fp,32(sp)
8112e50c:	df000804 	addi	fp,sp,32
8112e510:	e13ffe15 	stw	r4,-8(fp)
8112e514:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e518:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e51c:	e0bffe17 	ldw	r2,-8(fp)
8112e520:	1000021e 	bne	r2,zero,8112e52c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112e524:	00800104 	movi	r2,4
8112e528:	00004c06 	br	8112e65c <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112e52c:	e0bffe17 	ldw	r2,-8(fp)
8112e530:	10800003 	ldbu	r2,0(r2)
8112e534:	10803fcc 	andi	r2,r2,255
8112e538:	108000a0 	cmpeqi	r2,r2,2
8112e53c:	1000021e 	bne	r2,zero,8112e548 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112e540:	00800044 	movi	r2,1
8112e544:	00004506 	br	8112e65c <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e548:	0005303a 	rdctl	r2,status
8112e54c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e550:	e0fffd17 	ldw	r3,-12(fp)
8112e554:	00bfff84 	movi	r2,-2
8112e558:	1884703a 	and	r2,r3,r2
8112e55c:	1001703a 	wrctl	status,r2
  
  return context;
8112e560:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e564:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112e568:	e0bffe17 	ldw	r2,-8(fp)
8112e56c:	10800283 	ldbu	r2,10(r2)
8112e570:	10803fcc 	andi	r2,r2,255
8112e574:	10000c26 	beq	r2,zero,8112e5a8 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e578:	000f883a 	mov	r7,zero
8112e57c:	01800104 	movi	r6,4
8112e580:	e17fff17 	ldw	r5,-4(fp)
8112e584:	e13ffe17 	ldw	r4,-8(fp)
8112e588:	112950c0 	call	8112950c <OS_EventTaskRdy>
8112e58c:	e0bff817 	ldw	r2,-32(fp)
8112e590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e594:	e0bff917 	ldw	r2,-28(fp)
8112e598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112e59c:	1129fc80 	call	81129fc8 <OS_Sched>
        return (OS_ERR_NONE);
8112e5a0:	0005883a 	mov	r2,zero
8112e5a4:	00002d06 	br	8112e65c <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112e5a8:	e0bffe17 	ldw	r2,-8(fp)
8112e5ac:	10800117 	ldw	r2,4(r2)
8112e5b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112e5b4:	e0bffb17 	ldw	r2,-20(fp)
8112e5b8:	10c0058b 	ldhu	r3,22(r2)
8112e5bc:	e0bffb17 	ldw	r2,-20(fp)
8112e5c0:	1080050b 	ldhu	r2,20(r2)
8112e5c4:	18ffffcc 	andi	r3,r3,65535
8112e5c8:	10bfffcc 	andi	r2,r2,65535
8112e5cc:	18800636 	bltu	r3,r2,8112e5e8 <OSQPostFront+0xf0>
8112e5d0:	e0bff817 	ldw	r2,-32(fp)
8112e5d4:	e0bffa15 	stw	r2,-24(fp)
8112e5d8:	e0bffa17 	ldw	r2,-24(fp)
8112e5dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e5e0:	00800784 	movi	r2,30
8112e5e4:	00001d06 	br	8112e65c <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112e5e8:	e0bffb17 	ldw	r2,-20(fp)
8112e5ec:	10c00417 	ldw	r3,16(r2)
8112e5f0:	e0bffb17 	ldw	r2,-20(fp)
8112e5f4:	10800117 	ldw	r2,4(r2)
8112e5f8:	1880041e 	bne	r3,r2,8112e60c <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112e5fc:	e0bffb17 	ldw	r2,-20(fp)
8112e600:	10c00217 	ldw	r3,8(r2)
8112e604:	e0bffb17 	ldw	r2,-20(fp)
8112e608:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112e60c:	e0bffb17 	ldw	r2,-20(fp)
8112e610:	10800417 	ldw	r2,16(r2)
8112e614:	10ffff04 	addi	r3,r2,-4
8112e618:	e0bffb17 	ldw	r2,-20(fp)
8112e61c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112e620:	e0bffb17 	ldw	r2,-20(fp)
8112e624:	10800417 	ldw	r2,16(r2)
8112e628:	e0ffff17 	ldw	r3,-4(fp)
8112e62c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112e630:	e0bffb17 	ldw	r2,-20(fp)
8112e634:	1080058b 	ldhu	r2,22(r2)
8112e638:	10800044 	addi	r2,r2,1
8112e63c:	1007883a 	mov	r3,r2
8112e640:	e0bffb17 	ldw	r2,-20(fp)
8112e644:	10c0058d 	sth	r3,22(r2)
8112e648:	e0bff817 	ldw	r2,-32(fp)
8112e64c:	e0bffc15 	stw	r2,-16(fp)
8112e650:	e0bffc17 	ldw	r2,-16(fp)
8112e654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e658:	0005883a 	mov	r2,zero
}
8112e65c:	e037883a 	mov	sp,fp
8112e660:	dfc00117 	ldw	ra,4(sp)
8112e664:	df000017 	ldw	fp,0(sp)
8112e668:	dec00204 	addi	sp,sp,8
8112e66c:	f800283a 	ret

8112e670 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112e670:	defff504 	addi	sp,sp,-44
8112e674:	de00012e 	bgeu	sp,et,8112e67c <OSQPostOpt+0xc>
8112e678:	003b68fa 	trap	3
8112e67c:	dfc00a15 	stw	ra,40(sp)
8112e680:	df000915 	stw	fp,36(sp)
8112e684:	df000904 	addi	fp,sp,36
8112e688:	e13ffd15 	stw	r4,-12(fp)
8112e68c:	e17ffe15 	stw	r5,-8(fp)
8112e690:	3005883a 	mov	r2,r6
8112e694:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e698:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e69c:	e0bffd17 	ldw	r2,-12(fp)
8112e6a0:	1000021e 	bne	r2,zero,8112e6ac <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112e6a4:	00800104 	movi	r2,4
8112e6a8:	00007106 	br	8112e870 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112e6ac:	e0bffd17 	ldw	r2,-12(fp)
8112e6b0:	10800003 	ldbu	r2,0(r2)
8112e6b4:	10803fcc 	andi	r2,r2,255
8112e6b8:	108000a0 	cmpeqi	r2,r2,2
8112e6bc:	1000021e 	bne	r2,zero,8112e6c8 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112e6c0:	00800044 	movi	r2,1
8112e6c4:	00006a06 	br	8112e870 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e6c8:	0005303a 	rdctl	r2,status
8112e6cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e6d0:	e0fffc17 	ldw	r3,-16(fp)
8112e6d4:	00bfff84 	movi	r2,-2
8112e6d8:	1884703a 	and	r2,r3,r2
8112e6dc:	1001703a 	wrctl	status,r2
  
  return context;
8112e6e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e6e4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112e6e8:	e0bffd17 	ldw	r2,-12(fp)
8112e6ec:	10800283 	ldbu	r2,10(r2)
8112e6f0:	10803fcc 	andi	r2,r2,255
8112e6f4:	10001d26 	beq	r2,zero,8112e76c <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112e6f8:	e0bfff03 	ldbu	r2,-4(fp)
8112e6fc:	1080004c 	andi	r2,r2,1
8112e700:	10000b26 	beq	r2,zero,8112e730 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112e704:	00000506 	br	8112e71c <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e708:	000f883a 	mov	r7,zero
8112e70c:	01800104 	movi	r6,4
8112e710:	e17ffe17 	ldw	r5,-8(fp)
8112e714:	e13ffd17 	ldw	r4,-12(fp)
8112e718:	112950c0 	call	8112950c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112e71c:	e0bffd17 	ldw	r2,-12(fp)
8112e720:	10800283 	ldbu	r2,10(r2)
8112e724:	10803fcc 	andi	r2,r2,255
8112e728:	103ff71e 	bne	r2,zero,8112e708 <__reset+0xfb10e708>
8112e72c:	00000506 	br	8112e744 <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e730:	000f883a 	mov	r7,zero
8112e734:	01800104 	movi	r6,4
8112e738:	e17ffe17 	ldw	r5,-8(fp)
8112e73c:	e13ffd17 	ldw	r4,-12(fp)
8112e740:	112950c0 	call	8112950c <OS_EventTaskRdy>
8112e744:	e0bff717 	ldw	r2,-36(fp)
8112e748:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e74c:	e0bff817 	ldw	r2,-32(fp)
8112e750:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112e754:	e0bfff03 	ldbu	r2,-4(fp)
8112e758:	1080010c 	andi	r2,r2,4
8112e75c:	1000011e 	bne	r2,zero,8112e764 <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112e760:	1129fc80 	call	81129fc8 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112e764:	0005883a 	mov	r2,zero
8112e768:	00004106 	br	8112e870 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112e76c:	e0bffd17 	ldw	r2,-12(fp)
8112e770:	10800117 	ldw	r2,4(r2)
8112e774:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112e778:	e0bffa17 	ldw	r2,-24(fp)
8112e77c:	10c0058b 	ldhu	r3,22(r2)
8112e780:	e0bffa17 	ldw	r2,-24(fp)
8112e784:	1080050b 	ldhu	r2,20(r2)
8112e788:	18ffffcc 	andi	r3,r3,65535
8112e78c:	10bfffcc 	andi	r2,r2,65535
8112e790:	18800636 	bltu	r3,r2,8112e7ac <OSQPostOpt+0x13c>
8112e794:	e0bff717 	ldw	r2,-36(fp)
8112e798:	e0bff915 	stw	r2,-28(fp)
8112e79c:	e0bff917 	ldw	r2,-28(fp)
8112e7a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e7a4:	00800784 	movi	r2,30
8112e7a8:	00003106 	br	8112e870 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112e7ac:	e0bfff03 	ldbu	r2,-4(fp)
8112e7b0:	1080008c 	andi	r2,r2,2
8112e7b4:	10001326 	beq	r2,zero,8112e804 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112e7b8:	e0bffa17 	ldw	r2,-24(fp)
8112e7bc:	10c00417 	ldw	r3,16(r2)
8112e7c0:	e0bffa17 	ldw	r2,-24(fp)
8112e7c4:	10800117 	ldw	r2,4(r2)
8112e7c8:	1880041e 	bne	r3,r2,8112e7dc <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112e7cc:	e0bffa17 	ldw	r2,-24(fp)
8112e7d0:	10c00217 	ldw	r3,8(r2)
8112e7d4:	e0bffa17 	ldw	r2,-24(fp)
8112e7d8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112e7dc:	e0bffa17 	ldw	r2,-24(fp)
8112e7e0:	10800417 	ldw	r2,16(r2)
8112e7e4:	10ffff04 	addi	r3,r2,-4
8112e7e8:	e0bffa17 	ldw	r2,-24(fp)
8112e7ec:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112e7f0:	e0bffa17 	ldw	r2,-24(fp)
8112e7f4:	10800417 	ldw	r2,16(r2)
8112e7f8:	e0fffe17 	ldw	r3,-8(fp)
8112e7fc:	10c00015 	stw	r3,0(r2)
8112e800:	00001006 	br	8112e844 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112e804:	e0bffa17 	ldw	r2,-24(fp)
8112e808:	10800317 	ldw	r2,12(r2)
8112e80c:	11000104 	addi	r4,r2,4
8112e810:	e0fffa17 	ldw	r3,-24(fp)
8112e814:	19000315 	stw	r4,12(r3)
8112e818:	e0fffe17 	ldw	r3,-8(fp)
8112e81c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112e820:	e0bffa17 	ldw	r2,-24(fp)
8112e824:	10c00317 	ldw	r3,12(r2)
8112e828:	e0bffa17 	ldw	r2,-24(fp)
8112e82c:	10800217 	ldw	r2,8(r2)
8112e830:	1880041e 	bne	r3,r2,8112e844 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112e834:	e0bffa17 	ldw	r2,-24(fp)
8112e838:	10c00117 	ldw	r3,4(r2)
8112e83c:	e0bffa17 	ldw	r2,-24(fp)
8112e840:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112e844:	e0bffa17 	ldw	r2,-24(fp)
8112e848:	1080058b 	ldhu	r2,22(r2)
8112e84c:	10800044 	addi	r2,r2,1
8112e850:	1007883a 	mov	r3,r2
8112e854:	e0bffa17 	ldw	r2,-24(fp)
8112e858:	10c0058d 	sth	r3,22(r2)
8112e85c:	e0bff717 	ldw	r2,-36(fp)
8112e860:	e0bffb15 	stw	r2,-20(fp)
8112e864:	e0bffb17 	ldw	r2,-20(fp)
8112e868:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e86c:	0005883a 	mov	r2,zero
}
8112e870:	e037883a 	mov	sp,fp
8112e874:	dfc00117 	ldw	ra,4(sp)
8112e878:	df000017 	ldw	fp,0(sp)
8112e87c:	dec00204 	addi	sp,sp,8
8112e880:	f800283a 	ret

8112e884 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112e884:	defff604 	addi	sp,sp,-40
8112e888:	de00012e 	bgeu	sp,et,8112e890 <OSQQuery+0xc>
8112e88c:	003b68fa 	trap	3
8112e890:	df000915 	stw	fp,36(sp)
8112e894:	df000904 	addi	fp,sp,36
8112e898:	e13ffe15 	stw	r4,-8(fp)
8112e89c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112e8a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112e8a4:	e0bffe17 	ldw	r2,-8(fp)
8112e8a8:	1000021e 	bne	r2,zero,8112e8b4 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112e8ac:	00800104 	movi	r2,4
8112e8b0:	00004906 	br	8112e9d8 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112e8b4:	e0bfff17 	ldw	r2,-4(fp)
8112e8b8:	1000021e 	bne	r2,zero,8112e8c4 <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112e8bc:	00800244 	movi	r2,9
8112e8c0:	00004506 	br	8112e9d8 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112e8c4:	e0bffe17 	ldw	r2,-8(fp)
8112e8c8:	10800003 	ldbu	r2,0(r2)
8112e8cc:	10803fcc 	andi	r2,r2,255
8112e8d0:	108000a0 	cmpeqi	r2,r2,2
8112e8d4:	1000021e 	bne	r2,zero,8112e8e0 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112e8d8:	00800044 	movi	r2,1
8112e8dc:	00003e06 	br	8112e9d8 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e8e0:	0005303a 	rdctl	r2,status
8112e8e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e8e8:	e0fffd17 	ldw	r3,-12(fp)
8112e8ec:	00bfff84 	movi	r2,-2
8112e8f0:	1884703a 	and	r2,r3,r2
8112e8f4:	1001703a 	wrctl	status,r2
  
  return context;
8112e8f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e8fc:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112e900:	e0bffe17 	ldw	r2,-8(fp)
8112e904:	10c00283 	ldbu	r3,10(r2)
8112e908:	e0bfff17 	ldw	r2,-4(fp)
8112e90c:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112e910:	e0bffe17 	ldw	r2,-8(fp)
8112e914:	108002c4 	addi	r2,r2,11
8112e918:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112e91c:	e0bfff17 	ldw	r2,-4(fp)
8112e920:	10800204 	addi	r2,r2,8
8112e924:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e928:	e03ff705 	stb	zero,-36(fp)
8112e92c:	00000b06 	br	8112e95c <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112e930:	e0bff917 	ldw	r2,-28(fp)
8112e934:	10c00044 	addi	r3,r2,1
8112e938:	e0fff915 	stw	r3,-28(fp)
8112e93c:	e0fff817 	ldw	r3,-32(fp)
8112e940:	19000044 	addi	r4,r3,1
8112e944:	e13ff815 	stw	r4,-32(fp)
8112e948:	18c00003 	ldbu	r3,0(r3)
8112e94c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e950:	e0bff703 	ldbu	r2,-36(fp)
8112e954:	10800044 	addi	r2,r2,1
8112e958:	e0bff705 	stb	r2,-36(fp)
8112e95c:	e0bff703 	ldbu	r2,-36(fp)
8112e960:	108001b0 	cmpltui	r2,r2,6
8112e964:	103ff21e 	bne	r2,zero,8112e930 <__reset+0xfb10e930>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112e968:	e0bffe17 	ldw	r2,-8(fp)
8112e96c:	10800117 	ldw	r2,4(r2)
8112e970:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112e974:	e0bffc17 	ldw	r2,-16(fp)
8112e978:	1080058b 	ldhu	r2,22(r2)
8112e97c:	10bfffcc 	andi	r2,r2,65535
8112e980:	10000626 	beq	r2,zero,8112e99c <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112e984:	e0bffc17 	ldw	r2,-16(fp)
8112e988:	10800417 	ldw	r2,16(r2)
8112e98c:	10c00017 	ldw	r3,0(r2)
8112e990:	e0bfff17 	ldw	r2,-4(fp)
8112e994:	10c00015 	stw	r3,0(r2)
8112e998:	00000206 	br	8112e9a4 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112e99c:	e0bfff17 	ldw	r2,-4(fp)
8112e9a0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112e9a4:	e0bffc17 	ldw	r2,-16(fp)
8112e9a8:	10c0058b 	ldhu	r3,22(r2)
8112e9ac:	e0bfff17 	ldw	r2,-4(fp)
8112e9b0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112e9b4:	e0bffc17 	ldw	r2,-16(fp)
8112e9b8:	10c0050b 	ldhu	r3,20(r2)
8112e9bc:	e0bfff17 	ldw	r2,-4(fp)
8112e9c0:	10c0018d 	sth	r3,6(r2)
8112e9c4:	e0bffa17 	ldw	r2,-24(fp)
8112e9c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e9cc:	e0bffb17 	ldw	r2,-20(fp)
8112e9d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e9d4:	0005883a 	mov	r2,zero
}
8112e9d8:	e037883a 	mov	sp,fp
8112e9dc:	df000017 	ldw	fp,0(sp)
8112e9e0:	dec00104 	addi	sp,sp,4
8112e9e4:	f800283a 	ret

8112e9e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112e9e8:	defffb04 	addi	sp,sp,-20
8112e9ec:	de00012e 	bgeu	sp,et,8112e9f4 <OS_QInit+0xc>
8112e9f0:	003b68fa 	trap	3
8112e9f4:	dfc00415 	stw	ra,16(sp)
8112e9f8:	df000315 	stw	fp,12(sp)
8112e9fc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112ea00:	01407804 	movi	r5,480
8112ea04:	01204574 	movhi	r4,33045
8112ea08:	21056c04 	addi	r4,r4,5552
8112ea0c:	1129efc0 	call	81129efc <OS_MemClr>
    pq1 = &OSQTbl[0];
8112ea10:	00a04574 	movhi	r2,33045
8112ea14:	10856c04 	addi	r2,r2,5552
8112ea18:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112ea1c:	00a04574 	movhi	r2,33045
8112ea20:	10857204 	addi	r2,r2,5576
8112ea24:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112ea28:	e03ffd0d 	sth	zero,-12(fp)
8112ea2c:	00000c06 	br	8112ea60 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112ea30:	e0bffe17 	ldw	r2,-8(fp)
8112ea34:	e0ffff17 	ldw	r3,-4(fp)
8112ea38:	10c00015 	stw	r3,0(r2)
        pq1++;
8112ea3c:	e0bffe17 	ldw	r2,-8(fp)
8112ea40:	10800604 	addi	r2,r2,24
8112ea44:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112ea48:	e0bfff17 	ldw	r2,-4(fp)
8112ea4c:	10800604 	addi	r2,r2,24
8112ea50:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112ea54:	e0bffd0b 	ldhu	r2,-12(fp)
8112ea58:	10800044 	addi	r2,r2,1
8112ea5c:	e0bffd0d 	sth	r2,-12(fp)
8112ea60:	e0bffd0b 	ldhu	r2,-12(fp)
8112ea64:	108004f0 	cmpltui	r2,r2,19
8112ea68:	103ff11e 	bne	r2,zero,8112ea30 <__reset+0xfb10ea30>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112ea6c:	e0bffe17 	ldw	r2,-8(fp)
8112ea70:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112ea74:	00a04574 	movhi	r2,33045
8112ea78:	10856c04 	addi	r2,r2,5552
8112ea7c:	d0a08015 	stw	r2,-32256(gp)
#endif
}
8112ea80:	0001883a 	nop
8112ea84:	e037883a 	mov	sp,fp
8112ea88:	dfc00117 	ldw	ra,4(sp)
8112ea8c:	df000017 	ldw	fp,0(sp)
8112ea90:	dec00204 	addi	sp,sp,8
8112ea94:	f800283a 	ret

8112ea98 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112ea98:	defffa04 	addi	sp,sp,-24
8112ea9c:	de00012e 	bgeu	sp,et,8112eaa4 <OSSemAccept+0xc>
8112eaa0:	003b68fa 	trap	3
8112eaa4:	df000515 	stw	fp,20(sp)
8112eaa8:	df000504 	addi	fp,sp,20
8112eaac:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112eab0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112eab4:	e0bfff17 	ldw	r2,-4(fp)
8112eab8:	1000021e 	bne	r2,zero,8112eac4 <OSSemAccept+0x2c>
        return (0);
8112eabc:	0005883a 	mov	r2,zero
8112eac0:	00001f06 	br	8112eb40 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112eac4:	e0bfff17 	ldw	r2,-4(fp)
8112eac8:	10800003 	ldbu	r2,0(r2)
8112eacc:	10803fcc 	andi	r2,r2,255
8112ead0:	108000e0 	cmpeqi	r2,r2,3
8112ead4:	1000021e 	bne	r2,zero,8112eae0 <OSSemAccept+0x48>
        return (0);
8112ead8:	0005883a 	mov	r2,zero
8112eadc:	00001806 	br	8112eb40 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eae0:	0005303a 	rdctl	r2,status
8112eae4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eae8:	e0fffe17 	ldw	r3,-8(fp)
8112eaec:	00bfff84 	movi	r2,-2
8112eaf0:	1884703a 	and	r2,r3,r2
8112eaf4:	1001703a 	wrctl	status,r2
  
  return context;
8112eaf8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112eafc:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112eb00:	e0bfff17 	ldw	r2,-4(fp)
8112eb04:	1080020b 	ldhu	r2,8(r2)
8112eb08:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112eb0c:	e0bffd0b 	ldhu	r2,-12(fp)
8112eb10:	10000626 	beq	r2,zero,8112eb2c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112eb14:	e0bfff17 	ldw	r2,-4(fp)
8112eb18:	1080020b 	ldhu	r2,8(r2)
8112eb1c:	10bfffc4 	addi	r2,r2,-1
8112eb20:	1007883a 	mov	r3,r2
8112eb24:	e0bfff17 	ldw	r2,-4(fp)
8112eb28:	10c0020d 	sth	r3,8(r2)
8112eb2c:	e0bffb17 	ldw	r2,-20(fp)
8112eb30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eb34:	e0bffc17 	ldw	r2,-16(fp)
8112eb38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112eb3c:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112eb40:	e037883a 	mov	sp,fp
8112eb44:	df000017 	ldw	fp,0(sp)
8112eb48:	dec00104 	addi	sp,sp,4
8112eb4c:	f800283a 	ret

8112eb50 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112eb50:	defff904 	addi	sp,sp,-28
8112eb54:	de00012e 	bgeu	sp,et,8112eb5c <OSSemCreate+0xc>
8112eb58:	003b68fa 	trap	3
8112eb5c:	dfc00615 	stw	ra,24(sp)
8112eb60:	df000515 	stw	fp,20(sp)
8112eb64:	df000504 	addi	fp,sp,20
8112eb68:	2005883a 	mov	r2,r4
8112eb6c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112eb70:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112eb74:	d0a08403 	ldbu	r2,-32240(gp)
8112eb78:	10803fcc 	andi	r2,r2,255
8112eb7c:	10000226 	beq	r2,zero,8112eb88 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112eb80:	0005883a 	mov	r2,zero
8112eb84:	00002506 	br	8112ec1c <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eb88:	0005303a 	rdctl	r2,status
8112eb8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eb90:	e0fffe17 	ldw	r3,-8(fp)
8112eb94:	00bfff84 	movi	r2,-2
8112eb98:	1884703a 	and	r2,r3,r2
8112eb9c:	1001703a 	wrctl	status,r2
  
  return context;
8112eba0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112eba4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112eba8:	d0a08317 	ldw	r2,-32244(gp)
8112ebac:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112ebb0:	d0a08317 	ldw	r2,-32244(gp)
8112ebb4:	10000326 	beq	r2,zero,8112ebc4 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112ebb8:	d0a08317 	ldw	r2,-32244(gp)
8112ebbc:	10800117 	ldw	r2,4(r2)
8112ebc0:	d0a08315 	stw	r2,-32244(gp)
8112ebc4:	e0bffb17 	ldw	r2,-20(fp)
8112ebc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ebcc:	e0bffc17 	ldw	r2,-16(fp)
8112ebd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112ebd4:	e0bffd17 	ldw	r2,-12(fp)
8112ebd8:	10000f26 	beq	r2,zero,8112ec18 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112ebdc:	e0bffd17 	ldw	r2,-12(fp)
8112ebe0:	00c000c4 	movi	r3,3
8112ebe4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112ebe8:	e0bffd17 	ldw	r2,-12(fp)
8112ebec:	e0ffff0b 	ldhu	r3,-4(fp)
8112ebf0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112ebf4:	e0bffd17 	ldw	r2,-12(fp)
8112ebf8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112ebfc:	e0bffd17 	ldw	r2,-12(fp)
8112ec00:	00c00fc4 	movi	r3,63
8112ec04:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112ec08:	e0bffd17 	ldw	r2,-12(fp)
8112ec0c:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112ec10:	e13ffd17 	ldw	r4,-12(fp)
8112ec14:	1129ae40 	call	81129ae4 <OS_EventWaitListInit>
    }
    return (pevent);
8112ec18:	e0bffd17 	ldw	r2,-12(fp)
}
8112ec1c:	e037883a 	mov	sp,fp
8112ec20:	dfc00117 	ldw	ra,4(sp)
8112ec24:	df000017 	ldw	fp,0(sp)
8112ec28:	dec00204 	addi	sp,sp,8
8112ec2c:	f800283a 	ret

8112ec30 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ec30:	defff304 	addi	sp,sp,-52
8112ec34:	de00012e 	bgeu	sp,et,8112ec3c <OSSemDel+0xc>
8112ec38:	003b68fa 	trap	3
8112ec3c:	dfc00c15 	stw	ra,48(sp)
8112ec40:	df000b15 	stw	fp,44(sp)
8112ec44:	df000b04 	addi	fp,sp,44
8112ec48:	e13ffd15 	stw	r4,-12(fp)
8112ec4c:	2805883a 	mov	r2,r5
8112ec50:	e1bfff15 	stw	r6,-4(fp)
8112ec54:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ec58:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ec5c:	e0bfff17 	ldw	r2,-4(fp)
8112ec60:	1000021e 	bne	r2,zero,8112ec6c <OSSemDel+0x3c>
        return (pevent);
8112ec64:	e0bffd17 	ldw	r2,-12(fp)
8112ec68:	00007e06 	br	8112ee64 <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112ec6c:	e0bffd17 	ldw	r2,-12(fp)
8112ec70:	1000051e 	bne	r2,zero,8112ec88 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ec74:	e0bfff17 	ldw	r2,-4(fp)
8112ec78:	00c00104 	movi	r3,4
8112ec7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ec80:	e0bffd17 	ldw	r2,-12(fp)
8112ec84:	00007706 	br	8112ee64 <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112ec88:	e0bffd17 	ldw	r2,-12(fp)
8112ec8c:	10800003 	ldbu	r2,0(r2)
8112ec90:	10803fcc 	andi	r2,r2,255
8112ec94:	108000e0 	cmpeqi	r2,r2,3
8112ec98:	1000051e 	bne	r2,zero,8112ecb0 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ec9c:	e0bfff17 	ldw	r2,-4(fp)
8112eca0:	00c00044 	movi	r3,1
8112eca4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112eca8:	e0bffd17 	ldw	r2,-12(fp)
8112ecac:	00006d06 	br	8112ee64 <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ecb0:	d0a08403 	ldbu	r2,-32240(gp)
8112ecb4:	10803fcc 	andi	r2,r2,255
8112ecb8:	10000526 	beq	r2,zero,8112ecd0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112ecbc:	e0bfff17 	ldw	r2,-4(fp)
8112ecc0:	00c003c4 	movi	r3,15
8112ecc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ecc8:	e0bffd17 	ldw	r2,-12(fp)
8112eccc:	00006506 	br	8112ee64 <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ecd0:	0005303a 	rdctl	r2,status
8112ecd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ecd8:	e0fffc17 	ldw	r3,-16(fp)
8112ecdc:	00bfff84 	movi	r2,-2
8112ece0:	1884703a 	and	r2,r3,r2
8112ece4:	1001703a 	wrctl	status,r2
  
  return context;
8112ece8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ecec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112ecf0:	e0bffd17 	ldw	r2,-12(fp)
8112ecf4:	10800283 	ldbu	r2,10(r2)
8112ecf8:	10803fcc 	andi	r2,r2,255
8112ecfc:	10000326 	beq	r2,zero,8112ed0c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112ed00:	00800044 	movi	r2,1
8112ed04:	e0bff505 	stb	r2,-44(fp)
8112ed08:	00000106 	br	8112ed10 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112ed0c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112ed10:	e0bffe03 	ldbu	r2,-8(fp)
8112ed14:	10000326 	beq	r2,zero,8112ed24 <OSSemDel+0xf4>
8112ed18:	10800060 	cmpeqi	r2,r2,1
8112ed1c:	1000281e 	bne	r2,zero,8112edc0 <OSSemDel+0x190>
8112ed20:	00004506 	br	8112ee38 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112ed24:	e0bff503 	ldbu	r2,-44(fp)
8112ed28:	1000161e 	bne	r2,zero,8112ed84 <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112ed2c:	e0bffd17 	ldw	r2,-12(fp)
8112ed30:	00c00fc4 	movi	r3,63
8112ed34:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112ed38:	e0bffd17 	ldw	r2,-12(fp)
8112ed3c:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ed40:	e0bffd17 	ldw	r2,-12(fp)
8112ed44:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112ed48:	d0e08317 	ldw	r3,-32244(gp)
8112ed4c:	e0bffd17 	ldw	r2,-12(fp)
8112ed50:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112ed54:	e0bffd17 	ldw	r2,-12(fp)
8112ed58:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112ed5c:	e0bffd17 	ldw	r2,-12(fp)
8112ed60:	d0a08315 	stw	r2,-32244(gp)
8112ed64:	e0bff717 	ldw	r2,-36(fp)
8112ed68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ed6c:	e0bff817 	ldw	r2,-32(fp)
8112ed70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112ed74:	e0bfff17 	ldw	r2,-4(fp)
8112ed78:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112ed7c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112ed80:	00003706 	br	8112ee60 <OSSemDel+0x230>
8112ed84:	e0bff717 	ldw	r2,-36(fp)
8112ed88:	e0bff915 	stw	r2,-28(fp)
8112ed8c:	e0bff917 	ldw	r2,-28(fp)
8112ed90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112ed94:	e0bfff17 	ldw	r2,-4(fp)
8112ed98:	00c01244 	movi	r3,73
8112ed9c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112eda0:	e0bffd17 	ldw	r2,-12(fp)
8112eda4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112eda8:	00002d06 	br	8112ee60 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112edac:	000f883a 	mov	r7,zero
8112edb0:	01800044 	movi	r6,1
8112edb4:	000b883a 	mov	r5,zero
8112edb8:	e13ffd17 	ldw	r4,-12(fp)
8112edbc:	112950c0 	call	8112950c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112edc0:	e0bffd17 	ldw	r2,-12(fp)
8112edc4:	10800283 	ldbu	r2,10(r2)
8112edc8:	10803fcc 	andi	r2,r2,255
8112edcc:	103ff71e 	bne	r2,zero,8112edac <__reset+0xfb10edac>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112edd0:	e0bffd17 	ldw	r2,-12(fp)
8112edd4:	00c00fc4 	movi	r3,63
8112edd8:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112eddc:	e0bffd17 	ldw	r2,-12(fp)
8112ede0:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ede4:	e0bffd17 	ldw	r2,-12(fp)
8112ede8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112edec:	d0e08317 	ldw	r3,-32244(gp)
8112edf0:	e0bffd17 	ldw	r2,-12(fp)
8112edf4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112edf8:	e0bffd17 	ldw	r2,-12(fp)
8112edfc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112ee00:	e0bffd17 	ldw	r2,-12(fp)
8112ee04:	d0a08315 	stw	r2,-32244(gp)
8112ee08:	e0bff717 	ldw	r2,-36(fp)
8112ee0c:	e0bffa15 	stw	r2,-24(fp)
8112ee10:	e0bffa17 	ldw	r2,-24(fp)
8112ee14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ee18:	e0bff503 	ldbu	r2,-44(fp)
8112ee1c:	10800058 	cmpnei	r2,r2,1
8112ee20:	1000011e 	bne	r2,zero,8112ee28 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ee24:	1129fc80 	call	81129fc8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112ee28:	e0bfff17 	ldw	r2,-4(fp)
8112ee2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112ee30:	e03ff615 	stw	zero,-40(fp)
             break;
8112ee34:	00000a06 	br	8112ee60 <OSSemDel+0x230>
8112ee38:	e0bff717 	ldw	r2,-36(fp)
8112ee3c:	e0bffb15 	stw	r2,-20(fp)
8112ee40:	e0bffb17 	ldw	r2,-20(fp)
8112ee44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112ee48:	e0bfff17 	ldw	r2,-4(fp)
8112ee4c:	00c001c4 	movi	r3,7
8112ee50:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112ee54:	e0bffd17 	ldw	r2,-12(fp)
8112ee58:	e0bff615 	stw	r2,-40(fp)
             break;
8112ee5c:	0001883a 	nop
    }
    return (pevent_return);
8112ee60:	e0bff617 	ldw	r2,-40(fp)
}
8112ee64:	e037883a 	mov	sp,fp
8112ee68:	dfc00117 	ldw	ra,4(sp)
8112ee6c:	df000017 	ldw	fp,0(sp)
8112ee70:	dec00204 	addi	sp,sp,8
8112ee74:	f800283a 	ret

8112ee78 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ee78:	defff504 	addi	sp,sp,-44
8112ee7c:	de00012e 	bgeu	sp,et,8112ee84 <OSSemPend+0xc>
8112ee80:	003b68fa 	trap	3
8112ee84:	dfc00a15 	stw	ra,40(sp)
8112ee88:	df000915 	stw	fp,36(sp)
8112ee8c:	df000904 	addi	fp,sp,36
8112ee90:	e13ffd15 	stw	r4,-12(fp)
8112ee94:	2805883a 	mov	r2,r5
8112ee98:	e1bfff15 	stw	r6,-4(fp)
8112ee9c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112eea0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112eea4:	e0bfff17 	ldw	r2,-4(fp)
8112eea8:	10007226 	beq	r2,zero,8112f074 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112eeac:	e0bffd17 	ldw	r2,-12(fp)
8112eeb0:	1000041e 	bne	r2,zero,8112eec4 <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112eeb4:	e0bfff17 	ldw	r2,-4(fp)
8112eeb8:	00c00104 	movi	r3,4
8112eebc:	10c00005 	stb	r3,0(r2)
        return;
8112eec0:	00006d06 	br	8112f078 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112eec4:	e0bffd17 	ldw	r2,-12(fp)
8112eec8:	10800003 	ldbu	r2,0(r2)
8112eecc:	10803fcc 	andi	r2,r2,255
8112eed0:	108000e0 	cmpeqi	r2,r2,3
8112eed4:	1000041e 	bne	r2,zero,8112eee8 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112eed8:	e0bfff17 	ldw	r2,-4(fp)
8112eedc:	00c00044 	movi	r3,1
8112eee0:	10c00005 	stb	r3,0(r2)
        return;
8112eee4:	00006406 	br	8112f078 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112eee8:	d0a08403 	ldbu	r2,-32240(gp)
8112eeec:	10803fcc 	andi	r2,r2,255
8112eef0:	10000426 	beq	r2,zero,8112ef04 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112eef4:	e0bfff17 	ldw	r2,-4(fp)
8112eef8:	00c00084 	movi	r3,2
8112eefc:	10c00005 	stb	r3,0(r2)
        return;
8112ef00:	00005d06 	br	8112f078 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8112ef04:	d0a07203 	ldbu	r2,-32312(gp)
8112ef08:	10803fcc 	andi	r2,r2,255
8112ef0c:	10000426 	beq	r2,zero,8112ef20 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112ef10:	e0bfff17 	ldw	r2,-4(fp)
8112ef14:	00c00344 	movi	r3,13
8112ef18:	10c00005 	stb	r3,0(r2)
        return;
8112ef1c:	00005606 	br	8112f078 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ef20:	0005303a 	rdctl	r2,status
8112ef24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ef28:	e0fffc17 	ldw	r3,-16(fp)
8112ef2c:	00bfff84 	movi	r2,-2
8112ef30:	1884703a 	and	r2,r3,r2
8112ef34:	1001703a 	wrctl	status,r2
  
  return context;
8112ef38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ef3c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112ef40:	e0bffd17 	ldw	r2,-12(fp)
8112ef44:	1080020b 	ldhu	r2,8(r2)
8112ef48:	10bfffcc 	andi	r2,r2,65535
8112ef4c:	10000d26 	beq	r2,zero,8112ef84 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8112ef50:	e0bffd17 	ldw	r2,-12(fp)
8112ef54:	1080020b 	ldhu	r2,8(r2)
8112ef58:	10bfffc4 	addi	r2,r2,-1
8112ef5c:	1007883a 	mov	r3,r2
8112ef60:	e0bffd17 	ldw	r2,-12(fp)
8112ef64:	10c0020d 	sth	r3,8(r2)
8112ef68:	e0bff717 	ldw	r2,-36(fp)
8112ef6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ef70:	e0bff817 	ldw	r2,-32(fp)
8112ef74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112ef78:	e0bfff17 	ldw	r2,-4(fp)
8112ef7c:	10000005 	stb	zero,0(r2)
        return;
8112ef80:	00003d06 	br	8112f078 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8112ef84:	d0a08517 	ldw	r2,-32236(gp)
8112ef88:	d0e08517 	ldw	r3,-32236(gp)
8112ef8c:	18c00c03 	ldbu	r3,48(r3)
8112ef90:	18c00054 	ori	r3,r3,1
8112ef94:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112ef98:	d0a08517 	ldw	r2,-32236(gp)
8112ef9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8112efa0:	d0a08517 	ldw	r2,-32236(gp)
8112efa4:	e0fffe0b 	ldhu	r3,-8(fp)
8112efa8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112efac:	e13ffd17 	ldw	r4,-12(fp)
8112efb0:	11296ac0 	call	811296ac <OS_EventTaskWait>
8112efb4:	e0bff717 	ldw	r2,-36(fp)
8112efb8:	e0bffb15 	stw	r2,-20(fp)
8112efbc:	e0bffb17 	ldw	r2,-20(fp)
8112efc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112efc4:	1129fc80 	call	81129fc8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112efc8:	0005303a 	rdctl	r2,status
8112efcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112efd0:	e0fff917 	ldw	r3,-28(fp)
8112efd4:	00bfff84 	movi	r2,-2
8112efd8:	1884703a 	and	r2,r3,r2
8112efdc:	1001703a 	wrctl	status,r2
  
  return context;
8112efe0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112efe4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112efe8:	d0a08517 	ldw	r2,-32236(gp)
8112efec:	10800c43 	ldbu	r2,49(r2)
8112eff0:	10803fcc 	andi	r2,r2,255
8112eff4:	10000326 	beq	r2,zero,8112f004 <OSSemPend+0x18c>
8112eff8:	108000a0 	cmpeqi	r2,r2,2
8112effc:	1000041e 	bne	r2,zero,8112f010 <OSSemPend+0x198>
8112f000:	00000706 	br	8112f020 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112f004:	e0bfff17 	ldw	r2,-4(fp)
8112f008:	10000005 	stb	zero,0(r2)
             break;
8112f00c:	00000c06 	br	8112f040 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112f010:	e0bfff17 	ldw	r2,-4(fp)
8112f014:	00c00384 	movi	r3,14
8112f018:	10c00005 	stb	r3,0(r2)
             break;
8112f01c:	00000806 	br	8112f040 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112f020:	d0a08517 	ldw	r2,-32236(gp)
8112f024:	e17ffd17 	ldw	r5,-12(fp)
8112f028:	1009883a 	mov	r4,r2
8112f02c:	112991c0 	call	8112991c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112f030:	e0bfff17 	ldw	r2,-4(fp)
8112f034:	00c00284 	movi	r3,10
8112f038:	10c00005 	stb	r3,0(r2)
             break;
8112f03c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112f040:	d0a08517 	ldw	r2,-32236(gp)
8112f044:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112f048:	d0a08517 	ldw	r2,-32236(gp)
8112f04c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112f050:	d0a08517 	ldw	r2,-32236(gp)
8112f054:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112f058:	d0a08517 	ldw	r2,-32236(gp)
8112f05c:	10000815 	stw	zero,32(r2)
8112f060:	e0bff717 	ldw	r2,-36(fp)
8112f064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f068:	e0bffa17 	ldw	r2,-24(fp)
8112f06c:	1001703a 	wrctl	status,r2
8112f070:	00000106 	br	8112f078 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112f074:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112f078:	e037883a 	mov	sp,fp
8112f07c:	dfc00117 	ldw	ra,4(sp)
8112f080:	df000017 	ldw	fp,0(sp)
8112f084:	dec00204 	addi	sp,sp,8
8112f088:	f800283a 	ret

8112f08c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112f08c:	defff604 	addi	sp,sp,-40
8112f090:	de00012e 	bgeu	sp,et,8112f098 <OSSemPendAbort+0xc>
8112f094:	003b68fa 	trap	3
8112f098:	dfc00915 	stw	ra,36(sp)
8112f09c:	df000815 	stw	fp,32(sp)
8112f0a0:	df000804 	addi	fp,sp,32
8112f0a4:	e13ffd15 	stw	r4,-12(fp)
8112f0a8:	2805883a 	mov	r2,r5
8112f0ac:	e1bfff15 	stw	r6,-4(fp)
8112f0b0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f0b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112f0b8:	e0bfff17 	ldw	r2,-4(fp)
8112f0bc:	1000021e 	bne	r2,zero,8112f0c8 <OSSemPendAbort+0x3c>
        return (0);
8112f0c0:	0005883a 	mov	r2,zero
8112f0c4:	00004906 	br	8112f1ec <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f0c8:	e0bffd17 	ldw	r2,-12(fp)
8112f0cc:	1000051e 	bne	r2,zero,8112f0e4 <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f0d0:	e0bfff17 	ldw	r2,-4(fp)
8112f0d4:	00c00104 	movi	r3,4
8112f0d8:	10c00005 	stb	r3,0(r2)
        return (0);
8112f0dc:	0005883a 	mov	r2,zero
8112f0e0:	00004206 	br	8112f1ec <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112f0e4:	e0bffd17 	ldw	r2,-12(fp)
8112f0e8:	10800003 	ldbu	r2,0(r2)
8112f0ec:	10803fcc 	andi	r2,r2,255
8112f0f0:	108000e0 	cmpeqi	r2,r2,3
8112f0f4:	1000051e 	bne	r2,zero,8112f10c <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f0f8:	e0bfff17 	ldw	r2,-4(fp)
8112f0fc:	00c00044 	movi	r3,1
8112f100:	10c00005 	stb	r3,0(r2)
        return (0);
8112f104:	0005883a 	mov	r2,zero
8112f108:	00003806 	br	8112f1ec <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f10c:	0005303a 	rdctl	r2,status
8112f110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f114:	e0fffc17 	ldw	r3,-16(fp)
8112f118:	00bfff84 	movi	r2,-2
8112f11c:	1884703a 	and	r2,r3,r2
8112f120:	1001703a 	wrctl	status,r2
  
  return context;
8112f124:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f128:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8112f12c:	e0bffd17 	ldw	r2,-12(fp)
8112f130:	10800283 	ldbu	r2,10(r2)
8112f134:	10803fcc 	andi	r2,r2,255
8112f138:	10002526 	beq	r2,zero,8112f1d0 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
8112f13c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112f140:	e0bffe03 	ldbu	r2,-8(fp)
8112f144:	10800060 	cmpeqi	r2,r2,1
8112f148:	10000e26 	beq	r2,zero,8112f184 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112f14c:	00000806 	br	8112f170 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112f150:	01c00084 	movi	r7,2
8112f154:	01800044 	movi	r6,1
8112f158:	000b883a 	mov	r5,zero
8112f15c:	e13ffd17 	ldw	r4,-12(fp)
8112f160:	112950c0 	call	8112950c <OS_EventTaskRdy>
                     nbr_tasks++;
8112f164:	e0bff803 	ldbu	r2,-32(fp)
8112f168:	10800044 	addi	r2,r2,1
8112f16c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112f170:	e0bffd17 	ldw	r2,-12(fp)
8112f174:	10800283 	ldbu	r2,10(r2)
8112f178:	10803fcc 	andi	r2,r2,255
8112f17c:	103ff41e 	bne	r2,zero,8112f150 <__reset+0xfb10f150>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112f180:	00000906 	br	8112f1a8 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112f184:	01c00084 	movi	r7,2
8112f188:	01800044 	movi	r6,1
8112f18c:	000b883a 	mov	r5,zero
8112f190:	e13ffd17 	ldw	r4,-12(fp)
8112f194:	112950c0 	call	8112950c <OS_EventTaskRdy>
                 nbr_tasks++;
8112f198:	e0bff803 	ldbu	r2,-32(fp)
8112f19c:	10800044 	addi	r2,r2,1
8112f1a0:	e0bff805 	stb	r2,-32(fp)
                 break;
8112f1a4:	0001883a 	nop
8112f1a8:	e0bff917 	ldw	r2,-28(fp)
8112f1ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f1b0:	e0bffa17 	ldw	r2,-24(fp)
8112f1b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112f1b8:	1129fc80 	call	81129fc8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112f1bc:	e0bfff17 	ldw	r2,-4(fp)
8112f1c0:	00c00384 	movi	r3,14
8112f1c4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112f1c8:	e0bff803 	ldbu	r2,-32(fp)
8112f1cc:	00000706 	br	8112f1ec <OSSemPendAbort+0x160>
8112f1d0:	e0bff917 	ldw	r2,-28(fp)
8112f1d4:	e0bffb15 	stw	r2,-20(fp)
8112f1d8:	e0bffb17 	ldw	r2,-20(fp)
8112f1dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f1e0:	e0bfff17 	ldw	r2,-4(fp)
8112f1e4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112f1e8:	0005883a 	mov	r2,zero
}
8112f1ec:	e037883a 	mov	sp,fp
8112f1f0:	dfc00117 	ldw	ra,4(sp)
8112f1f4:	df000017 	ldw	fp,0(sp)
8112f1f8:	dec00204 	addi	sp,sp,8
8112f1fc:	f800283a 	ret

8112f200 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8112f200:	defff804 	addi	sp,sp,-32
8112f204:	de00012e 	bgeu	sp,et,8112f20c <OSSemPost+0xc>
8112f208:	003b68fa 	trap	3
8112f20c:	dfc00715 	stw	ra,28(sp)
8112f210:	df000615 	stw	fp,24(sp)
8112f214:	df000604 	addi	fp,sp,24
8112f218:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f21c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f220:	e0bfff17 	ldw	r2,-4(fp)
8112f224:	1000021e 	bne	r2,zero,8112f230 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
8112f228:	00800104 	movi	r2,4
8112f22c:	00003506 	br	8112f304 <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112f230:	e0bfff17 	ldw	r2,-4(fp)
8112f234:	10800003 	ldbu	r2,0(r2)
8112f238:	10803fcc 	andi	r2,r2,255
8112f23c:	108000e0 	cmpeqi	r2,r2,3
8112f240:	1000021e 	bne	r2,zero,8112f24c <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
8112f244:	00800044 	movi	r2,1
8112f248:	00002e06 	br	8112f304 <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f24c:	0005303a 	rdctl	r2,status
8112f250:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f254:	e0fffe17 	ldw	r3,-8(fp)
8112f258:	00bfff84 	movi	r2,-2
8112f25c:	1884703a 	and	r2,r3,r2
8112f260:	1001703a 	wrctl	status,r2
  
  return context;
8112f264:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112f268:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112f26c:	e0bfff17 	ldw	r2,-4(fp)
8112f270:	10800283 	ldbu	r2,10(r2)
8112f274:	10803fcc 	andi	r2,r2,255
8112f278:	10000c26 	beq	r2,zero,8112f2ac <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112f27c:	000f883a 	mov	r7,zero
8112f280:	01800044 	movi	r6,1
8112f284:	000b883a 	mov	r5,zero
8112f288:	e13fff17 	ldw	r4,-4(fp)
8112f28c:	112950c0 	call	8112950c <OS_EventTaskRdy>
8112f290:	e0bffa17 	ldw	r2,-24(fp)
8112f294:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f298:	e0bffb17 	ldw	r2,-20(fp)
8112f29c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112f2a0:	1129fc80 	call	81129fc8 <OS_Sched>
        return (OS_ERR_NONE);
8112f2a4:	0005883a 	mov	r2,zero
8112f2a8:	00001606 	br	8112f304 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8112f2ac:	e0bfff17 	ldw	r2,-4(fp)
8112f2b0:	1080020b 	ldhu	r2,8(r2)
8112f2b4:	10ffffcc 	andi	r3,r2,65535
8112f2b8:	00bfffd4 	movui	r2,65535
8112f2bc:	18800c26 	beq	r3,r2,8112f2f0 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112f2c0:	e0bfff17 	ldw	r2,-4(fp)
8112f2c4:	1080020b 	ldhu	r2,8(r2)
8112f2c8:	10800044 	addi	r2,r2,1
8112f2cc:	1007883a 	mov	r3,r2
8112f2d0:	e0bfff17 	ldw	r2,-4(fp)
8112f2d4:	10c0020d 	sth	r3,8(r2)
8112f2d8:	e0bffa17 	ldw	r2,-24(fp)
8112f2dc:	e0bffc15 	stw	r2,-16(fp)
8112f2e0:	e0bffc17 	ldw	r2,-16(fp)
8112f2e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112f2e8:	0005883a 	mov	r2,zero
8112f2ec:	00000506 	br	8112f304 <OSSemPost+0x104>
8112f2f0:	e0bffa17 	ldw	r2,-24(fp)
8112f2f4:	e0bffd15 	stw	r2,-12(fp)
8112f2f8:	e0bffd17 	ldw	r2,-12(fp)
8112f2fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112f300:	00800c84 	movi	r2,50
}
8112f304:	e037883a 	mov	sp,fp
8112f308:	dfc00117 	ldw	ra,4(sp)
8112f30c:	df000017 	ldw	fp,0(sp)
8112f310:	dec00204 	addi	sp,sp,8
8112f314:	f800283a 	ret

8112f318 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8112f318:	defff704 	addi	sp,sp,-36
8112f31c:	de00012e 	bgeu	sp,et,8112f324 <OSSemQuery+0xc>
8112f320:	003b68fa 	trap	3
8112f324:	df000815 	stw	fp,32(sp)
8112f328:	df000804 	addi	fp,sp,32
8112f32c:	e13ffe15 	stw	r4,-8(fp)
8112f330:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f334:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f338:	e0bffe17 	ldw	r2,-8(fp)
8112f33c:	1000021e 	bne	r2,zero,8112f348 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112f340:	00800104 	movi	r2,4
8112f344:	00003606 	br	8112f420 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112f348:	e0bfff17 	ldw	r2,-4(fp)
8112f34c:	1000021e 	bne	r2,zero,8112f358 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112f350:	00800244 	movi	r2,9
8112f354:	00003206 	br	8112f420 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112f358:	e0bffe17 	ldw	r2,-8(fp)
8112f35c:	10800003 	ldbu	r2,0(r2)
8112f360:	10803fcc 	andi	r2,r2,255
8112f364:	108000e0 	cmpeqi	r2,r2,3
8112f368:	1000021e 	bne	r2,zero,8112f374 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112f36c:	00800044 	movi	r2,1
8112f370:	00002b06 	br	8112f420 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f374:	0005303a 	rdctl	r2,status
8112f378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f37c:	e0fffd17 	ldw	r3,-12(fp)
8112f380:	00bfff84 	movi	r2,-2
8112f384:	1884703a 	and	r2,r3,r2
8112f388:	1001703a 	wrctl	status,r2
  
  return context;
8112f38c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f390:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8112f394:	e0bffe17 	ldw	r2,-8(fp)
8112f398:	10c00283 	ldbu	r3,10(r2)
8112f39c:	e0bfff17 	ldw	r2,-4(fp)
8112f3a0:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
8112f3a4:	e0bffe17 	ldw	r2,-8(fp)
8112f3a8:	108002c4 	addi	r2,r2,11
8112f3ac:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8112f3b0:	e0bfff17 	ldw	r2,-4(fp)
8112f3b4:	10800084 	addi	r2,r2,2
8112f3b8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112f3bc:	e03ffa05 	stb	zero,-24(fp)
8112f3c0:	00000b06 	br	8112f3f0 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
8112f3c4:	e0bff917 	ldw	r2,-28(fp)
8112f3c8:	10c00044 	addi	r3,r2,1
8112f3cc:	e0fff915 	stw	r3,-28(fp)
8112f3d0:	e0fff817 	ldw	r3,-32(fp)
8112f3d4:	19000044 	addi	r4,r3,1
8112f3d8:	e13ff815 	stw	r4,-32(fp)
8112f3dc:	18c00003 	ldbu	r3,0(r3)
8112f3e0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112f3e4:	e0bffa03 	ldbu	r2,-24(fp)
8112f3e8:	10800044 	addi	r2,r2,1
8112f3ec:	e0bffa05 	stb	r2,-24(fp)
8112f3f0:	e0bffa03 	ldbu	r2,-24(fp)
8112f3f4:	108001b0 	cmpltui	r2,r2,6
8112f3f8:	103ff21e 	bne	r2,zero,8112f3c4 <__reset+0xfb10f3c4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8112f3fc:	e0bffe17 	ldw	r2,-8(fp)
8112f400:	10c0020b 	ldhu	r3,8(r2)
8112f404:	e0bfff17 	ldw	r2,-4(fp)
8112f408:	10c0000d 	sth	r3,0(r2)
8112f40c:	e0bffb17 	ldw	r2,-20(fp)
8112f410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f414:	e0bffc17 	ldw	r2,-16(fp)
8112f418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f41c:	0005883a 	mov	r2,zero
}
8112f420:	e037883a 	mov	sp,fp
8112f424:	df000017 	ldw	fp,0(sp)
8112f428:	dec00104 	addi	sp,sp,4
8112f42c:	f800283a 	ret

8112f430 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8112f430:	defff904 	addi	sp,sp,-28
8112f434:	de00012e 	bgeu	sp,et,8112f43c <OSSemSet+0xc>
8112f438:	003b68fa 	trap	3
8112f43c:	df000615 	stw	fp,24(sp)
8112f440:	df000604 	addi	fp,sp,24
8112f444:	e13ffd15 	stw	r4,-12(fp)
8112f448:	2805883a 	mov	r2,r5
8112f44c:	e1bfff15 	stw	r6,-4(fp)
8112f450:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f454:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112f458:	e0bfff17 	ldw	r2,-4(fp)
8112f45c:	10003126 	beq	r2,zero,8112f524 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f460:	e0bffd17 	ldw	r2,-12(fp)
8112f464:	1000041e 	bne	r2,zero,8112f478 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112f468:	e0bfff17 	ldw	r2,-4(fp)
8112f46c:	00c00104 	movi	r3,4
8112f470:	10c00005 	stb	r3,0(r2)
        return;
8112f474:	00002c06 	br	8112f528 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112f478:	e0bffd17 	ldw	r2,-12(fp)
8112f47c:	10800003 	ldbu	r2,0(r2)
8112f480:	10803fcc 	andi	r2,r2,255
8112f484:	108000e0 	cmpeqi	r2,r2,3
8112f488:	1000041e 	bne	r2,zero,8112f49c <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112f48c:	e0bfff17 	ldw	r2,-4(fp)
8112f490:	00c00044 	movi	r3,1
8112f494:	10c00005 	stb	r3,0(r2)
        return;
8112f498:	00002306 	br	8112f528 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f49c:	0005303a 	rdctl	r2,status
8112f4a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f4a4:	e0fffc17 	ldw	r3,-16(fp)
8112f4a8:	00bfff84 	movi	r2,-2
8112f4ac:	1884703a 	and	r2,r3,r2
8112f4b0:	1001703a 	wrctl	status,r2
  
  return context;
8112f4b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f4b8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8112f4bc:	e0bfff17 	ldw	r2,-4(fp)
8112f4c0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8112f4c4:	e0bffd17 	ldw	r2,-12(fp)
8112f4c8:	1080020b 	ldhu	r2,8(r2)
8112f4cc:	10bfffcc 	andi	r2,r2,65535
8112f4d0:	10000426 	beq	r2,zero,8112f4e4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8112f4d4:	e0bffd17 	ldw	r2,-12(fp)
8112f4d8:	e0fffe0b 	ldhu	r3,-8(fp)
8112f4dc:	10c0020d 	sth	r3,8(r2)
8112f4e0:	00000b06 	br	8112f510 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8112f4e4:	e0bffd17 	ldw	r2,-12(fp)
8112f4e8:	10800283 	ldbu	r2,10(r2)
8112f4ec:	10803fcc 	andi	r2,r2,255
8112f4f0:	1000041e 	bne	r2,zero,8112f504 <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8112f4f4:	e0bffd17 	ldw	r2,-12(fp)
8112f4f8:	e0fffe0b 	ldhu	r3,-8(fp)
8112f4fc:	10c0020d 	sth	r3,8(r2)
8112f500:	00000306 	br	8112f510 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8112f504:	e0bfff17 	ldw	r2,-4(fp)
8112f508:	00c01244 	movi	r3,73
8112f50c:	10c00005 	stb	r3,0(r2)
8112f510:	e0bffa17 	ldw	r2,-24(fp)
8112f514:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f518:	e0bffb17 	ldw	r2,-20(fp)
8112f51c:	1001703a 	wrctl	status,r2
8112f520:	00000106 	br	8112f528 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112f524:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8112f528:	e037883a 	mov	sp,fp
8112f52c:	df000017 	ldw	fp,0(sp)
8112f530:	dec00104 	addi	sp,sp,4
8112f534:	f800283a 	ret

8112f538 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8112f538:	defff104 	addi	sp,sp,-60
8112f53c:	de00012e 	bgeu	sp,et,8112f544 <OSTaskChangePrio+0xc>
8112f540:	003b68fa 	trap	3
8112f544:	dfc00e15 	stw	ra,56(sp)
8112f548:	df000d15 	stw	fp,52(sp)
8112f54c:	df000d04 	addi	fp,sp,52
8112f550:	2007883a 	mov	r3,r4
8112f554:	2805883a 	mov	r2,r5
8112f558:	e0fffe05 	stb	r3,-8(fp)
8112f55c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8112f560:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112f564:	e0bffe03 	ldbu	r2,-8(fp)
8112f568:	10800a30 	cmpltui	r2,r2,40
8112f56c:	1000051e 	bne	r2,zero,8112f584 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8112f570:	e0bffe03 	ldbu	r2,-8(fp)
8112f574:	10803fe0 	cmpeqi	r2,r2,255
8112f578:	1000021e 	bne	r2,zero,8112f584 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112f57c:	00800a84 	movi	r2,42
8112f580:	00012606 	br	8112fa1c <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112f584:	e0bfff03 	ldbu	r2,-4(fp)
8112f588:	10800a30 	cmpltui	r2,r2,40
8112f58c:	1000021e 	bne	r2,zero,8112f598 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8112f590:	00800a84 	movi	r2,42
8112f594:	00012106 	br	8112fa1c <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f598:	0005303a 	rdctl	r2,status
8112f59c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f5a0:	e0fffd17 	ldw	r3,-12(fp)
8112f5a4:	00bfff84 	movi	r2,-2
8112f5a8:	1884703a 	and	r2,r3,r2
8112f5ac:	1001703a 	wrctl	status,r2
  
  return context;
8112f5b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f5b4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8112f5b8:	e0ffff03 	ldbu	r3,-4(fp)
8112f5bc:	00a04574 	movhi	r2,33045
8112f5c0:	10908604 	addi	r2,r2,16920
8112f5c4:	18c7883a 	add	r3,r3,r3
8112f5c8:	18c7883a 	add	r3,r3,r3
8112f5cc:	10c5883a 	add	r2,r2,r3
8112f5d0:	10800017 	ldw	r2,0(r2)
8112f5d4:	10000626 	beq	r2,zero,8112f5f0 <OSTaskChangePrio+0xb8>
8112f5d8:	e0bff517 	ldw	r2,-44(fp)
8112f5dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f5e0:	e0bff617 	ldw	r2,-40(fp)
8112f5e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112f5e8:	00800a04 	movi	r2,40
8112f5ec:	00010b06 	br	8112fa1c <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8112f5f0:	e0bffe03 	ldbu	r2,-8(fp)
8112f5f4:	10803fd8 	cmpnei	r2,r2,255
8112f5f8:	1000031e 	bne	r2,zero,8112f608 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8112f5fc:	d0a08517 	ldw	r2,-32236(gp)
8112f600:	10800c83 	ldbu	r2,50(r2)
8112f604:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112f608:	e0fffe03 	ldbu	r3,-8(fp)
8112f60c:	00a04574 	movhi	r2,33045
8112f610:	10908604 	addi	r2,r2,16920
8112f614:	18c7883a 	add	r3,r3,r3
8112f618:	18c7883a 	add	r3,r3,r3
8112f61c:	10c5883a 	add	r2,r2,r3
8112f620:	10800017 	ldw	r2,0(r2)
8112f624:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112f628:	e0bff817 	ldw	r2,-32(fp)
8112f62c:	1000061e 	bne	r2,zero,8112f648 <OSTaskChangePrio+0x110>
8112f630:	e0bff517 	ldw	r2,-44(fp)
8112f634:	e0bff715 	stw	r2,-36(fp)
8112f638:	e0bff717 	ldw	r2,-36(fp)
8112f63c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8112f640:	00800a44 	movi	r2,41
8112f644:	0000f506 	br	8112fa1c <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112f648:	e0bff817 	ldw	r2,-32(fp)
8112f64c:	10800058 	cmpnei	r2,r2,1
8112f650:	1000061e 	bne	r2,zero,8112f66c <OSTaskChangePrio+0x134>
8112f654:	e0bff517 	ldw	r2,-44(fp)
8112f658:	e0bff915 	stw	r2,-28(fp)
8112f65c:	e0bff917 	ldw	r2,-28(fp)
8112f660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112f664:	008010c4 	movi	r2,67
8112f668:	0000ec06 	br	8112fa1c <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8112f66c:	e0bfff03 	ldbu	r2,-4(fp)
8112f670:	1004d0fa 	srli	r2,r2,3
8112f674:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8112f678:	e0bfff03 	ldbu	r2,-4(fp)
8112f67c:	108001cc 	andi	r2,r2,7
8112f680:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112f684:	e0bffb03 	ldbu	r2,-20(fp)
8112f688:	00c00044 	movi	r3,1
8112f68c:	1884983a 	sll	r2,r3,r2
8112f690:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112f694:	e0bffb43 	ldbu	r2,-19(fp)
8112f698:	00c00044 	movi	r3,1
8112f69c:	1884983a 	sll	r2,r3,r2
8112f6a0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8112f6a4:	e0fffe03 	ldbu	r3,-8(fp)
8112f6a8:	00a04574 	movhi	r2,33045
8112f6ac:	10908604 	addi	r2,r2,16920
8112f6b0:	18c7883a 	add	r3,r3,r3
8112f6b4:	18c7883a 	add	r3,r3,r3
8112f6b8:	10c5883a 	add	r2,r2,r3
8112f6bc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8112f6c0:	e0ffff03 	ldbu	r3,-4(fp)
8112f6c4:	00a04574 	movhi	r2,33045
8112f6c8:	10908604 	addi	r2,r2,16920
8112f6cc:	18c7883a 	add	r3,r3,r3
8112f6d0:	18c7883a 	add	r3,r3,r3
8112f6d4:	10c5883a 	add	r2,r2,r3
8112f6d8:	e0fff817 	ldw	r3,-32(fp)
8112f6dc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8112f6e0:	e0bff817 	ldw	r2,-32(fp)
8112f6e4:	10800d03 	ldbu	r2,52(r2)
8112f6e8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8112f6ec:	e0bff817 	ldw	r2,-32(fp)
8112f6f0:	10800d83 	ldbu	r2,54(r2)
8112f6f4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112f6f8:	e0bff817 	ldw	r2,-32(fp)
8112f6fc:	10800d43 	ldbu	r2,53(r2)
8112f700:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112f704:	e0fffc03 	ldbu	r3,-16(fp)
8112f708:	d0a08144 	addi	r2,gp,-32251
8112f70c:	1885883a 	add	r2,r3,r2
8112f710:	10c00003 	ldbu	r3,0(r2)
8112f714:	e0bffc83 	ldbu	r2,-14(fp)
8112f718:	1884703a 	and	r2,r3,r2
8112f71c:	10803fcc 	andi	r2,r2,255
8112f720:	10002826 	beq	r2,zero,8112f7c4 <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8112f724:	e0fffc03 	ldbu	r3,-16(fp)
8112f728:	e13ffc03 	ldbu	r4,-16(fp)
8112f72c:	d0a08144 	addi	r2,gp,-32251
8112f730:	2085883a 	add	r2,r4,r2
8112f734:	10800003 	ldbu	r2,0(r2)
8112f738:	1009883a 	mov	r4,r2
8112f73c:	e0bffc83 	ldbu	r2,-14(fp)
8112f740:	0084303a 	nor	r2,zero,r2
8112f744:	2084703a 	and	r2,r4,r2
8112f748:	1009883a 	mov	r4,r2
8112f74c:	d0a08144 	addi	r2,gp,-32251
8112f750:	1885883a 	add	r2,r3,r2
8112f754:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112f758:	e0fffc03 	ldbu	r3,-16(fp)
8112f75c:	d0a08144 	addi	r2,gp,-32251
8112f760:	1885883a 	add	r2,r3,r2
8112f764:	10800003 	ldbu	r2,0(r2)
8112f768:	10803fcc 	andi	r2,r2,255
8112f76c:	1000061e 	bne	r2,zero,8112f788 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8112f770:	e0bffc43 	ldbu	r2,-15(fp)
8112f774:	0084303a 	nor	r2,zero,r2
8112f778:	1007883a 	mov	r3,r2
8112f77c:	d0a08103 	ldbu	r2,-32252(gp)
8112f780:	1884703a 	and	r2,r3,r2
8112f784:	d0a08105 	stb	r2,-32252(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8112f788:	d0e08103 	ldbu	r3,-32252(gp)
8112f78c:	e0bffb83 	ldbu	r2,-18(fp)
8112f790:	1884b03a 	or	r2,r3,r2
8112f794:	d0a08105 	stb	r2,-32252(gp)
         OSRdyTbl[y_new] |= bitx_new;
8112f798:	e0fffb03 	ldbu	r3,-20(fp)
8112f79c:	e13ffb03 	ldbu	r4,-20(fp)
8112f7a0:	d0a08144 	addi	r2,gp,-32251
8112f7a4:	2085883a 	add	r2,r4,r2
8112f7a8:	11000003 	ldbu	r4,0(r2)
8112f7ac:	e0bffbc3 	ldbu	r2,-17(fp)
8112f7b0:	2084b03a 	or	r2,r4,r2
8112f7b4:	1009883a 	mov	r4,r2
8112f7b8:	d0a08144 	addi	r2,gp,-32251
8112f7bc:	1885883a 	add	r2,r3,r2
8112f7c0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8112f7c4:	e0bff817 	ldw	r2,-32(fp)
8112f7c8:	10800717 	ldw	r2,28(r2)
8112f7cc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8112f7d0:	e0bff317 	ldw	r2,-52(fp)
8112f7d4:	10003326 	beq	r2,zero,8112f8a4 <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112f7d8:	e0bffc03 	ldbu	r2,-16(fp)
8112f7dc:	e0fffc03 	ldbu	r3,-16(fp)
8112f7e0:	e13ff317 	ldw	r4,-52(fp)
8112f7e4:	20c7883a 	add	r3,r4,r3
8112f7e8:	18c002c4 	addi	r3,r3,11
8112f7ec:	18c00003 	ldbu	r3,0(r3)
8112f7f0:	1809883a 	mov	r4,r3
8112f7f4:	e0fffc83 	ldbu	r3,-14(fp)
8112f7f8:	00c6303a 	nor	r3,zero,r3
8112f7fc:	20c6703a 	and	r3,r4,r3
8112f800:	1809883a 	mov	r4,r3
8112f804:	e0fff317 	ldw	r3,-52(fp)
8112f808:	1885883a 	add	r2,r3,r2
8112f80c:	108002c4 	addi	r2,r2,11
8112f810:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112f814:	e0bffc03 	ldbu	r2,-16(fp)
8112f818:	e0fff317 	ldw	r3,-52(fp)
8112f81c:	1885883a 	add	r2,r3,r2
8112f820:	108002c4 	addi	r2,r2,11
8112f824:	10800003 	ldbu	r2,0(r2)
8112f828:	10803fcc 	andi	r2,r2,255
8112f82c:	1000091e 	bne	r2,zero,8112f854 <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8112f830:	e0bff317 	ldw	r2,-52(fp)
8112f834:	10800283 	ldbu	r2,10(r2)
8112f838:	1007883a 	mov	r3,r2
8112f83c:	e0bffc43 	ldbu	r2,-15(fp)
8112f840:	0084303a 	nor	r2,zero,r2
8112f844:	1884703a 	and	r2,r3,r2
8112f848:	1007883a 	mov	r3,r2
8112f84c:	e0bff317 	ldw	r2,-52(fp)
8112f850:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112f854:	e0bff317 	ldw	r2,-52(fp)
8112f858:	10c00283 	ldbu	r3,10(r2)
8112f85c:	e0bffb83 	ldbu	r2,-18(fp)
8112f860:	1884b03a 	or	r2,r3,r2
8112f864:	1007883a 	mov	r3,r2
8112f868:	e0bff317 	ldw	r2,-52(fp)
8112f86c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8112f870:	e0bffb03 	ldbu	r2,-20(fp)
8112f874:	e0fffb03 	ldbu	r3,-20(fp)
8112f878:	e13ff317 	ldw	r4,-52(fp)
8112f87c:	20c7883a 	add	r3,r4,r3
8112f880:	18c002c4 	addi	r3,r3,11
8112f884:	19000003 	ldbu	r4,0(r3)
8112f888:	e0fffbc3 	ldbu	r3,-17(fp)
8112f88c:	20c6b03a 	or	r3,r4,r3
8112f890:	1809883a 	mov	r4,r3
8112f894:	e0fff317 	ldw	r3,-52(fp)
8112f898:	1885883a 	add	r2,r3,r2
8112f89c:	108002c4 	addi	r2,r2,11
8112f8a0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8112f8a4:	e0bff817 	ldw	r2,-32(fp)
8112f8a8:	10800817 	ldw	r2,32(r2)
8112f8ac:	10004226 	beq	r2,zero,8112f9b8 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
8112f8b0:	e0bff817 	ldw	r2,-32(fp)
8112f8b4:	10800817 	ldw	r2,32(r2)
8112f8b8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8112f8bc:	e0bff417 	ldw	r2,-48(fp)
8112f8c0:	10800017 	ldw	r2,0(r2)
8112f8c4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8112f8c8:	00003906 	br	8112f9b0 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8112f8cc:	e0bffc03 	ldbu	r2,-16(fp)
8112f8d0:	e0fffc03 	ldbu	r3,-16(fp)
8112f8d4:	e13ff317 	ldw	r4,-52(fp)
8112f8d8:	20c7883a 	add	r3,r4,r3
8112f8dc:	18c002c4 	addi	r3,r3,11
8112f8e0:	18c00003 	ldbu	r3,0(r3)
8112f8e4:	1809883a 	mov	r4,r3
8112f8e8:	e0fffc83 	ldbu	r3,-14(fp)
8112f8ec:	00c6303a 	nor	r3,zero,r3
8112f8f0:	20c6703a 	and	r3,r4,r3
8112f8f4:	1809883a 	mov	r4,r3
8112f8f8:	e0fff317 	ldw	r3,-52(fp)
8112f8fc:	1885883a 	add	r2,r3,r2
8112f900:	108002c4 	addi	r2,r2,11
8112f904:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8112f908:	e0bffc03 	ldbu	r2,-16(fp)
8112f90c:	e0fff317 	ldw	r3,-52(fp)
8112f910:	1885883a 	add	r2,r3,r2
8112f914:	108002c4 	addi	r2,r2,11
8112f918:	10800003 	ldbu	r2,0(r2)
8112f91c:	10803fcc 	andi	r2,r2,255
8112f920:	1000091e 	bne	r2,zero,8112f948 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8112f924:	e0bff317 	ldw	r2,-52(fp)
8112f928:	10800283 	ldbu	r2,10(r2)
8112f92c:	1007883a 	mov	r3,r2
8112f930:	e0bffc43 	ldbu	r2,-15(fp)
8112f934:	0084303a 	nor	r2,zero,r2
8112f938:	1884703a 	and	r2,r3,r2
8112f93c:	1007883a 	mov	r3,r2
8112f940:	e0bff317 	ldw	r2,-52(fp)
8112f944:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8112f948:	e0bff317 	ldw	r2,-52(fp)
8112f94c:	10c00283 	ldbu	r3,10(r2)
8112f950:	e0bffb83 	ldbu	r2,-18(fp)
8112f954:	1884b03a 	or	r2,r3,r2
8112f958:	1007883a 	mov	r3,r2
8112f95c:	e0bff317 	ldw	r2,-52(fp)
8112f960:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112f964:	e0bffb03 	ldbu	r2,-20(fp)
8112f968:	e0fffb03 	ldbu	r3,-20(fp)
8112f96c:	e13ff317 	ldw	r4,-52(fp)
8112f970:	20c7883a 	add	r3,r4,r3
8112f974:	18c002c4 	addi	r3,r3,11
8112f978:	19000003 	ldbu	r4,0(r3)
8112f97c:	e0fffbc3 	ldbu	r3,-17(fp)
8112f980:	20c6b03a 	or	r3,r4,r3
8112f984:	1809883a 	mov	r4,r3
8112f988:	e0fff317 	ldw	r3,-52(fp)
8112f98c:	1885883a 	add	r2,r3,r2
8112f990:	108002c4 	addi	r2,r2,11
8112f994:	11000005 	stb	r4,0(r2)
            pevents++;
8112f998:	e0bff417 	ldw	r2,-48(fp)
8112f99c:	10800104 	addi	r2,r2,4
8112f9a0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8112f9a4:	e0bff417 	ldw	r2,-48(fp)
8112f9a8:	10800017 	ldw	r2,0(r2)
8112f9ac:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8112f9b0:	e0bff317 	ldw	r2,-52(fp)
8112f9b4:	103fc51e 	bne	r2,zero,8112f8cc <__reset+0xfb10f8cc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8112f9b8:	e0bff817 	ldw	r2,-32(fp)
8112f9bc:	e0ffff03 	ldbu	r3,-4(fp)
8112f9c0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8112f9c4:	e0bff817 	ldw	r2,-32(fp)
8112f9c8:	e0fffb03 	ldbu	r3,-20(fp)
8112f9cc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8112f9d0:	e0bff817 	ldw	r2,-32(fp)
8112f9d4:	e0fffb43 	ldbu	r3,-19(fp)
8112f9d8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8112f9dc:	e0bff817 	ldw	r2,-32(fp)
8112f9e0:	e0fffb83 	ldbu	r3,-18(fp)
8112f9e4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8112f9e8:	e0bff817 	ldw	r2,-32(fp)
8112f9ec:	e0fffbc3 	ldbu	r3,-17(fp)
8112f9f0:	10c00d45 	stb	r3,53(r2)
8112f9f4:	e0bff517 	ldw	r2,-44(fp)
8112f9f8:	e0bffa15 	stw	r2,-24(fp)
8112f9fc:	e0bffa17 	ldw	r2,-24(fp)
8112fa00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112fa04:	d0a07403 	ldbu	r2,-32304(gp)
8112fa08:	10803fcc 	andi	r2,r2,255
8112fa0c:	10800058 	cmpnei	r2,r2,1
8112fa10:	1000011e 	bne	r2,zero,8112fa18 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8112fa14:	1129fc80 	call	81129fc8 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112fa18:	0005883a 	mov	r2,zero
}
8112fa1c:	e037883a 	mov	sp,fp
8112fa20:	dfc00117 	ldw	ra,4(sp)
8112fa24:	df000017 	ldw	fp,0(sp)
8112fa28:	dec00204 	addi	sp,sp,8
8112fa2c:	f800283a 	ret

8112fa30 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8112fa30:	deffee04 	addi	sp,sp,-72
8112fa34:	de00012e 	bgeu	sp,et,8112fa3c <OSTaskCreate+0xc>
8112fa38:	003b68fa 	trap	3
8112fa3c:	dfc01115 	stw	ra,68(sp)
8112fa40:	df001015 	stw	fp,64(sp)
8112fa44:	df001004 	addi	fp,sp,64
8112fa48:	e13ffc15 	stw	r4,-16(fp)
8112fa4c:	e17ffd15 	stw	r5,-12(fp)
8112fa50:	e1bffe15 	stw	r6,-8(fp)
8112fa54:	3805883a 	mov	r2,r7
8112fa58:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112fa5c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112fa60:	e0bfff03 	ldbu	r2,-4(fp)
8112fa64:	10800a70 	cmpltui	r2,r2,41
8112fa68:	1000021e 	bne	r2,zero,8112fa74 <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
8112fa6c:	00800a84 	movi	r2,42
8112fa70:	00005706 	br	8112fbd0 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fa74:	0005303a 	rdctl	r2,status
8112fa78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fa7c:	e0fffb17 	ldw	r3,-20(fp)
8112fa80:	00bfff84 	movi	r2,-2
8112fa84:	1884703a 	and	r2,r3,r2
8112fa88:	1001703a 	wrctl	status,r2
  
  return context;
8112fa8c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112fa90:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112fa94:	d0a08403 	ldbu	r2,-32240(gp)
8112fa98:	10803fcc 	andi	r2,r2,255
8112fa9c:	10000626 	beq	r2,zero,8112fab8 <OSTaskCreate+0x88>
8112faa0:	e0bff317 	ldw	r2,-52(fp)
8112faa4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112faa8:	e0bff417 	ldw	r2,-48(fp)
8112faac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112fab0:	00800f04 	movi	r2,60
8112fab4:	00004606 	br	8112fbd0 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112fab8:	e0ffff03 	ldbu	r3,-4(fp)
8112fabc:	00a04574 	movhi	r2,33045
8112fac0:	10908604 	addi	r2,r2,16920
8112fac4:	18c7883a 	add	r3,r3,r3
8112fac8:	18c7883a 	add	r3,r3,r3
8112facc:	10c5883a 	add	r2,r2,r3
8112fad0:	10800017 	ldw	r2,0(r2)
8112fad4:	1000391e 	bne	r2,zero,8112fbbc <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112fad8:	e0ffff03 	ldbu	r3,-4(fp)
8112fadc:	00a04574 	movhi	r2,33045
8112fae0:	10908604 	addi	r2,r2,16920
8112fae4:	18c7883a 	add	r3,r3,r3
8112fae8:	18c7883a 	add	r3,r3,r3
8112faec:	10c5883a 	add	r2,r2,r3
8112faf0:	00c00044 	movi	r3,1
8112faf4:	10c00015 	stw	r3,0(r2)
8112faf8:	e0bff317 	ldw	r2,-52(fp)
8112fafc:	e0bff515 	stw	r2,-44(fp)
8112fb00:	e0bff517 	ldw	r2,-44(fp)
8112fb04:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8112fb08:	000f883a 	mov	r7,zero
8112fb0c:	e1bffe17 	ldw	r6,-8(fp)
8112fb10:	e17ffd17 	ldw	r5,-12(fp)
8112fb14:	e13ffc17 	ldw	r4,-16(fp)
8112fb18:	113b1140 	call	8113b114 <OSTaskStkInit>
8112fb1c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8112fb20:	e0bfff03 	ldbu	r2,-4(fp)
8112fb24:	d8000215 	stw	zero,8(sp)
8112fb28:	d8000115 	stw	zero,4(sp)
8112fb2c:	d8000015 	stw	zero,0(sp)
8112fb30:	000f883a 	mov	r7,zero
8112fb34:	000d883a 	mov	r6,zero
8112fb38:	e17ff717 	ldw	r5,-36(fp)
8112fb3c:	1009883a 	mov	r4,r2
8112fb40:	112a4100 	call	8112a410 <OS_TCBInit>
8112fb44:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8112fb48:	e0bff803 	ldbu	r2,-32(fp)
8112fb4c:	1000061e 	bne	r2,zero,8112fb68 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8112fb50:	d0a07403 	ldbu	r2,-32304(gp)
8112fb54:	10803fcc 	andi	r2,r2,255
8112fb58:	10800058 	cmpnei	r2,r2,1
8112fb5c:	1000151e 	bne	r2,zero,8112fbb4 <OSTaskCreate+0x184>
                OS_Sched();
8112fb60:	1129fc80 	call	81129fc8 <OS_Sched>
8112fb64:	00001306 	br	8112fbb4 <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fb68:	0005303a 	rdctl	r2,status
8112fb6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fb70:	e0fffa17 	ldw	r3,-24(fp)
8112fb74:	00bfff84 	movi	r2,-2
8112fb78:	1884703a 	and	r2,r3,r2
8112fb7c:	1001703a 	wrctl	status,r2
  
  return context;
8112fb80:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112fb84:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8112fb88:	e0ffff03 	ldbu	r3,-4(fp)
8112fb8c:	00a04574 	movhi	r2,33045
8112fb90:	10908604 	addi	r2,r2,16920
8112fb94:	18c7883a 	add	r3,r3,r3
8112fb98:	18c7883a 	add	r3,r3,r3
8112fb9c:	10c5883a 	add	r2,r2,r3
8112fba0:	10000015 	stw	zero,0(r2)
8112fba4:	e0bff317 	ldw	r2,-52(fp)
8112fba8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fbac:	e0bff617 	ldw	r2,-40(fp)
8112fbb0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112fbb4:	e0bff803 	ldbu	r2,-32(fp)
8112fbb8:	00000506 	br	8112fbd0 <OSTaskCreate+0x1a0>
8112fbbc:	e0bff317 	ldw	r2,-52(fp)
8112fbc0:	e0bff915 	stw	r2,-28(fp)
8112fbc4:	e0bff917 	ldw	r2,-28(fp)
8112fbc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112fbcc:	00800a04 	movi	r2,40
}
8112fbd0:	e037883a 	mov	sp,fp
8112fbd4:	dfc00117 	ldw	ra,4(sp)
8112fbd8:	df000017 	ldw	fp,0(sp)
8112fbdc:	dec00204 	addi	sp,sp,8
8112fbe0:	f800283a 	ret

8112fbe4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8112fbe4:	deffec04 	addi	sp,sp,-80
8112fbe8:	de00012e 	bgeu	sp,et,8112fbf0 <OSTaskCreateExt+0xc>
8112fbec:	003b68fa 	trap	3
8112fbf0:	dfc01315 	stw	ra,76(sp)
8112fbf4:	df001215 	stw	fp,72(sp)
8112fbf8:	df001204 	addi	fp,sp,72
8112fbfc:	e13ffa15 	stw	r4,-24(fp)
8112fc00:	e17ffb15 	stw	r5,-20(fp)
8112fc04:	e1bffc15 	stw	r6,-16(fp)
8112fc08:	3809883a 	mov	r4,r7
8112fc0c:	e0c00217 	ldw	r3,8(fp)
8112fc10:	e0800617 	ldw	r2,24(fp)
8112fc14:	e13ffd05 	stb	r4,-12(fp)
8112fc18:	e0fffe0d 	sth	r3,-8(fp)
8112fc1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112fc20:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112fc24:	e0bffd03 	ldbu	r2,-12(fp)
8112fc28:	10800a70 	cmpltui	r2,r2,41
8112fc2c:	1000021e 	bne	r2,zero,8112fc38 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
8112fc30:	00800a84 	movi	r2,42
8112fc34:	00006106 	br	8112fdbc <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fc38:	0005303a 	rdctl	r2,status
8112fc3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fc40:	e0fff917 	ldw	r3,-28(fp)
8112fc44:	00bfff84 	movi	r2,-2
8112fc48:	1884703a 	and	r2,r3,r2
8112fc4c:	1001703a 	wrctl	status,r2
  
  return context;
8112fc50:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112fc54:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112fc58:	d0a08403 	ldbu	r2,-32240(gp)
8112fc5c:	10803fcc 	andi	r2,r2,255
8112fc60:	10000626 	beq	r2,zero,8112fc7c <OSTaskCreateExt+0x98>
8112fc64:	e0bff117 	ldw	r2,-60(fp)
8112fc68:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fc6c:	e0bff217 	ldw	r2,-56(fp)
8112fc70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112fc74:	00800f04 	movi	r2,60
8112fc78:	00005006 	br	8112fdbc <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112fc7c:	e0fffd03 	ldbu	r3,-12(fp)
8112fc80:	00a04574 	movhi	r2,33045
8112fc84:	10908604 	addi	r2,r2,16920
8112fc88:	18c7883a 	add	r3,r3,r3
8112fc8c:	18c7883a 	add	r3,r3,r3
8112fc90:	10c5883a 	add	r2,r2,r3
8112fc94:	10800017 	ldw	r2,0(r2)
8112fc98:	1000431e 	bne	r2,zero,8112fda8 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112fc9c:	e0fffd03 	ldbu	r3,-12(fp)
8112fca0:	00a04574 	movhi	r2,33045
8112fca4:	10908604 	addi	r2,r2,16920
8112fca8:	18c7883a 	add	r3,r3,r3
8112fcac:	18c7883a 	add	r3,r3,r3
8112fcb0:	10c5883a 	add	r2,r2,r3
8112fcb4:	00c00044 	movi	r3,1
8112fcb8:	10c00015 	stw	r3,0(r2)
8112fcbc:	e0bff117 	ldw	r2,-60(fp)
8112fcc0:	e0bff315 	stw	r2,-52(fp)
8112fcc4:	e0bff317 	ldw	r2,-52(fp)
8112fcc8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8112fccc:	e0bfff0b 	ldhu	r2,-4(fp)
8112fcd0:	100d883a 	mov	r6,r2
8112fcd4:	e1400417 	ldw	r5,16(fp)
8112fcd8:	e1000317 	ldw	r4,12(fp)
8112fcdc:	1130c8c0 	call	81130c8c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8112fce0:	e0bfff0b 	ldhu	r2,-4(fp)
8112fce4:	100f883a 	mov	r7,r2
8112fce8:	e1bffc17 	ldw	r6,-16(fp)
8112fcec:	e17ffb17 	ldw	r5,-20(fp)
8112fcf0:	e13ffa17 	ldw	r4,-24(fp)
8112fcf4:	113b1140 	call	8113b114 <OSTaskStkInit>
8112fcf8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8112fcfc:	e0fffd03 	ldbu	r3,-12(fp)
8112fd00:	e13ffe0b 	ldhu	r4,-8(fp)
8112fd04:	e0bfff0b 	ldhu	r2,-4(fp)
8112fd08:	d8800215 	stw	r2,8(sp)
8112fd0c:	e0800517 	ldw	r2,20(fp)
8112fd10:	d8800115 	stw	r2,4(sp)
8112fd14:	e0800417 	ldw	r2,16(fp)
8112fd18:	d8800015 	stw	r2,0(sp)
8112fd1c:	200f883a 	mov	r7,r4
8112fd20:	e1800317 	ldw	r6,12(fp)
8112fd24:	e17ff517 	ldw	r5,-44(fp)
8112fd28:	1809883a 	mov	r4,r3
8112fd2c:	112a4100 	call	8112a410 <OS_TCBInit>
8112fd30:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8112fd34:	e0bff603 	ldbu	r2,-40(fp)
8112fd38:	1000061e 	bne	r2,zero,8112fd54 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8112fd3c:	d0a07403 	ldbu	r2,-32304(gp)
8112fd40:	10803fcc 	andi	r2,r2,255
8112fd44:	10800058 	cmpnei	r2,r2,1
8112fd48:	1000151e 	bne	r2,zero,8112fda0 <OSTaskCreateExt+0x1bc>
                OS_Sched();
8112fd4c:	1129fc80 	call	81129fc8 <OS_Sched>
8112fd50:	00001306 	br	8112fda0 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fd54:	0005303a 	rdctl	r2,status
8112fd58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fd5c:	e0fff817 	ldw	r3,-32(fp)
8112fd60:	00bfff84 	movi	r2,-2
8112fd64:	1884703a 	and	r2,r3,r2
8112fd68:	1001703a 	wrctl	status,r2
  
  return context;
8112fd6c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112fd70:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8112fd74:	e0fffd03 	ldbu	r3,-12(fp)
8112fd78:	00a04574 	movhi	r2,33045
8112fd7c:	10908604 	addi	r2,r2,16920
8112fd80:	18c7883a 	add	r3,r3,r3
8112fd84:	18c7883a 	add	r3,r3,r3
8112fd88:	10c5883a 	add	r2,r2,r3
8112fd8c:	10000015 	stw	zero,0(r2)
8112fd90:	e0bff117 	ldw	r2,-60(fp)
8112fd94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fd98:	e0bff417 	ldw	r2,-48(fp)
8112fd9c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112fda0:	e0bff603 	ldbu	r2,-40(fp)
8112fda4:	00000506 	br	8112fdbc <OSTaskCreateExt+0x1d8>
8112fda8:	e0bff117 	ldw	r2,-60(fp)
8112fdac:	e0bff715 	stw	r2,-36(fp)
8112fdb0:	e0bff717 	ldw	r2,-36(fp)
8112fdb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112fdb8:	00800a04 	movi	r2,40
}
8112fdbc:	e037883a 	mov	sp,fp
8112fdc0:	dfc00117 	ldw	ra,4(sp)
8112fdc4:	df000017 	ldw	fp,0(sp)
8112fdc8:	dec00204 	addi	sp,sp,8
8112fdcc:	f800283a 	ret

8112fdd0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8112fdd0:	defff404 	addi	sp,sp,-48
8112fdd4:	de00012e 	bgeu	sp,et,8112fddc <OSTaskDel+0xc>
8112fdd8:	003b68fa 	trap	3
8112fddc:	dfc00b15 	stw	ra,44(sp)
8112fde0:	df000a15 	stw	fp,40(sp)
8112fde4:	df000a04 	addi	fp,sp,40
8112fde8:	2005883a 	mov	r2,r4
8112fdec:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8112fdf0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8112fdf4:	d0a08403 	ldbu	r2,-32240(gp)
8112fdf8:	10803fcc 	andi	r2,r2,255
8112fdfc:	10000226 	beq	r2,zero,8112fe08 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8112fe00:	00801004 	movi	r2,64
8112fe04:	0000c006 	br	81130108 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8112fe08:	e0bfff03 	ldbu	r2,-4(fp)
8112fe0c:	10800a18 	cmpnei	r2,r2,40
8112fe10:	1000021e 	bne	r2,zero,8112fe1c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
8112fe14:	00800f84 	movi	r2,62
8112fe18:	0000bb06 	br	81130108 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8112fe1c:	e0bfff03 	ldbu	r2,-4(fp)
8112fe20:	10800a30 	cmpltui	r2,r2,40
8112fe24:	1000051e 	bne	r2,zero,8112fe3c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
8112fe28:	e0bfff03 	ldbu	r2,-4(fp)
8112fe2c:	10803fe0 	cmpeqi	r2,r2,255
8112fe30:	1000021e 	bne	r2,zero,8112fe3c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
8112fe34:	00800a84 	movi	r2,42
8112fe38:	0000b306 	br	81130108 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fe3c:	0005303a 	rdctl	r2,status
8112fe40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fe44:	e0fffe17 	ldw	r3,-8(fp)
8112fe48:	00bfff84 	movi	r2,-2
8112fe4c:	1884703a 	and	r2,r3,r2
8112fe50:	1001703a 	wrctl	status,r2
  
  return context;
8112fe54:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112fe58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8112fe5c:	e0bfff03 	ldbu	r2,-4(fp)
8112fe60:	10803fd8 	cmpnei	r2,r2,255
8112fe64:	1000031e 	bne	r2,zero,8112fe74 <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8112fe68:	d0a08517 	ldw	r2,-32236(gp)
8112fe6c:	10800c83 	ldbu	r2,50(r2)
8112fe70:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112fe74:	e0ffff03 	ldbu	r3,-4(fp)
8112fe78:	00a04574 	movhi	r2,33045
8112fe7c:	10908604 	addi	r2,r2,16920
8112fe80:	18c7883a 	add	r3,r3,r3
8112fe84:	18c7883a 	add	r3,r3,r3
8112fe88:	10c5883a 	add	r2,r2,r3
8112fe8c:	10800017 	ldw	r2,0(r2)
8112fe90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8112fe94:	e0bff817 	ldw	r2,-32(fp)
8112fe98:	1000061e 	bne	r2,zero,8112feb4 <OSTaskDel+0xe4>
8112fe9c:	e0bff617 	ldw	r2,-40(fp)
8112fea0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fea4:	e0bff717 	ldw	r2,-36(fp)
8112fea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112feac:	008010c4 	movi	r2,67
8112feb0:	00009506 	br	81130108 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8112feb4:	e0bff817 	ldw	r2,-32(fp)
8112feb8:	10800058 	cmpnei	r2,r2,1
8112febc:	1000061e 	bne	r2,zero,8112fed8 <OSTaskDel+0x108>
8112fec0:	e0bff617 	ldw	r2,-40(fp)
8112fec4:	e0bff915 	stw	r2,-28(fp)
8112fec8:	e0bff917 	ldw	r2,-28(fp)
8112fecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112fed0:	00800f44 	movi	r2,61
8112fed4:	00008c06 	br	81130108 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8112fed8:	e0bff817 	ldw	r2,-32(fp)
8112fedc:	10800d03 	ldbu	r2,52(r2)
8112fee0:	10c03fcc 	andi	r3,r2,255
8112fee4:	e0bff817 	ldw	r2,-32(fp)
8112fee8:	10800d03 	ldbu	r2,52(r2)
8112feec:	11003fcc 	andi	r4,r2,255
8112fef0:	d0a08144 	addi	r2,gp,-32251
8112fef4:	2085883a 	add	r2,r4,r2
8112fef8:	10800003 	ldbu	r2,0(r2)
8112fefc:	1009883a 	mov	r4,r2
8112ff00:	e0bff817 	ldw	r2,-32(fp)
8112ff04:	10800d43 	ldbu	r2,53(r2)
8112ff08:	0084303a 	nor	r2,zero,r2
8112ff0c:	2084703a 	and	r2,r4,r2
8112ff10:	1009883a 	mov	r4,r2
8112ff14:	d0a08144 	addi	r2,gp,-32251
8112ff18:	1885883a 	add	r2,r3,r2
8112ff1c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112ff20:	e0bff817 	ldw	r2,-32(fp)
8112ff24:	10800d03 	ldbu	r2,52(r2)
8112ff28:	10c03fcc 	andi	r3,r2,255
8112ff2c:	d0a08144 	addi	r2,gp,-32251
8112ff30:	1885883a 	add	r2,r3,r2
8112ff34:	10800003 	ldbu	r2,0(r2)
8112ff38:	10803fcc 	andi	r2,r2,255
8112ff3c:	1000071e 	bne	r2,zero,8112ff5c <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112ff40:	e0bff817 	ldw	r2,-32(fp)
8112ff44:	10800d83 	ldbu	r2,54(r2)
8112ff48:	0084303a 	nor	r2,zero,r2
8112ff4c:	1007883a 	mov	r3,r2
8112ff50:	d0a08103 	ldbu	r2,-32252(gp)
8112ff54:	1884703a 	and	r2,r3,r2
8112ff58:	d0a08105 	stb	r2,-32252(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112ff5c:	e0bff817 	ldw	r2,-32(fp)
8112ff60:	10800717 	ldw	r2,28(r2)
8112ff64:	10000526 	beq	r2,zero,8112ff7c <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112ff68:	e0bff817 	ldw	r2,-32(fp)
8112ff6c:	10800717 	ldw	r2,28(r2)
8112ff70:	100b883a 	mov	r5,r2
8112ff74:	e13ff817 	ldw	r4,-32(fp)
8112ff78:	112991c0 	call	8112991c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112ff7c:	e0bff817 	ldw	r2,-32(fp)
8112ff80:	10800817 	ldw	r2,32(r2)
8112ff84:	10000526 	beq	r2,zero,8112ff9c <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112ff88:	e0bff817 	ldw	r2,-32(fp)
8112ff8c:	10800817 	ldw	r2,32(r2)
8112ff90:	100b883a 	mov	r5,r2
8112ff94:	e13ff817 	ldw	r4,-32(fp)
8112ff98:	11299dc0 	call	811299dc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112ff9c:	e0bff817 	ldw	r2,-32(fp)
8112ffa0:	10800a17 	ldw	r2,40(r2)
8112ffa4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112ffa8:	e0bffb17 	ldw	r2,-20(fp)
8112ffac:	10000226 	beq	r2,zero,8112ffb8 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112ffb0:	e13ffb17 	ldw	r4,-20(fp)
8112ffb4:	112bfb40 	call	8112bfb4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112ffb8:	e0bff817 	ldw	r2,-32(fp)
8112ffbc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112ffc0:	e0bff817 	ldw	r2,-32(fp)
8112ffc4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112ffc8:	e0bff817 	ldw	r2,-32(fp)
8112ffcc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112ffd0:	d0a07203 	ldbu	r2,-32312(gp)
8112ffd4:	10803fcc 	andi	r2,r2,255
8112ffd8:	10803fe0 	cmpeqi	r2,r2,255
8112ffdc:	1000031e 	bne	r2,zero,8112ffec <OSTaskDel+0x21c>
        OSLockNesting++;
8112ffe0:	d0a07203 	ldbu	r2,-32312(gp)
8112ffe4:	10800044 	addi	r2,r2,1
8112ffe8:	d0a07205 	stb	r2,-32312(gp)
8112ffec:	e0bff617 	ldw	r2,-40(fp)
8112fff0:	e0bffd15 	stw	r2,-12(fp)
8112fff4:	e0bffd17 	ldw	r2,-12(fp)
8112fff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112fffc:	11294e40 	call	811294e4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130000:	0005303a 	rdctl	r2,status
81130004:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130008:	e0fffa17 	ldw	r3,-24(fp)
8113000c:	00bfff84 	movi	r2,-2
81130010:	1884703a 	and	r2,r3,r2
81130014:	1001703a 	wrctl	status,r2
  
  return context;
81130018:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8113001c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
81130020:	d0a07203 	ldbu	r2,-32312(gp)
81130024:	10803fcc 	andi	r2,r2,255
81130028:	10000326 	beq	r2,zero,81130038 <OSTaskDel+0x268>
        OSLockNesting--;
8113002c:	d0a07203 	ldbu	r2,-32312(gp)
81130030:	10bfffc4 	addi	r2,r2,-1
81130034:	d0a07205 	stb	r2,-32312(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
81130038:	e13ff817 	ldw	r4,-32(fp)
8113003c:	113b2a40 	call	8113b2a4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
81130040:	d0a07d43 	ldbu	r2,-32267(gp)
81130044:	10bfffc4 	addi	r2,r2,-1
81130048:	d0a07d45 	stb	r2,-32267(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8113004c:	e0ffff03 	ldbu	r3,-4(fp)
81130050:	00a04574 	movhi	r2,33045
81130054:	10908604 	addi	r2,r2,16920
81130058:	18c7883a 	add	r3,r3,r3
8113005c:	18c7883a 	add	r3,r3,r3
81130060:	10c5883a 	add	r2,r2,r3
81130064:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
81130068:	e0bff817 	ldw	r2,-32(fp)
8113006c:	10800617 	ldw	r2,24(r2)
81130070:	1000071e 	bne	r2,zero,81130090 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
81130074:	e0bff817 	ldw	r2,-32(fp)
81130078:	10800517 	ldw	r2,20(r2)
8113007c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
81130080:	e0bff817 	ldw	r2,-32(fp)
81130084:	10800517 	ldw	r2,20(r2)
81130088:	d0a07715 	stw	r2,-32292(gp)
8113008c:	00000a06 	br	811300b8 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
81130090:	e0bff817 	ldw	r2,-32(fp)
81130094:	10800617 	ldw	r2,24(r2)
81130098:	e0fff817 	ldw	r3,-32(fp)
8113009c:	18c00517 	ldw	r3,20(r3)
811300a0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
811300a4:	e0bff817 	ldw	r2,-32(fp)
811300a8:	10800517 	ldw	r2,20(r2)
811300ac:	e0fff817 	ldw	r3,-32(fp)
811300b0:	18c00617 	ldw	r3,24(r3)
811300b4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
811300b8:	d0e07c17 	ldw	r3,-32272(gp)
811300bc:	e0bff817 	ldw	r2,-32(fp)
811300c0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
811300c4:	e0bff817 	ldw	r2,-32(fp)
811300c8:	d0a07c15 	stw	r2,-32272(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
811300cc:	e0bff817 	ldw	r2,-32(fp)
811300d0:	00c00fc4 	movi	r3,63
811300d4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
811300d8:	e0bff817 	ldw	r2,-32(fp)
811300dc:	10001345 	stb	zero,77(r2)
811300e0:	e0bff617 	ldw	r2,-40(fp)
811300e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811300e8:	e0bffc17 	ldw	r2,-16(fp)
811300ec:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
811300f0:	d0a07403 	ldbu	r2,-32304(gp)
811300f4:	10803fcc 	andi	r2,r2,255
811300f8:	10800058 	cmpnei	r2,r2,1
811300fc:	1000011e 	bne	r2,zero,81130104 <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
81130100:	1129fc80 	call	81129fc8 <OS_Sched>
    }
    return (OS_ERR_NONE);
81130104:	0005883a 	mov	r2,zero
}
81130108:	e037883a 	mov	sp,fp
8113010c:	dfc00117 	ldw	ra,4(sp)
81130110:	df000017 	ldw	fp,0(sp)
81130114:	dec00204 	addi	sp,sp,8
81130118:	f800283a 	ret

8113011c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8113011c:	defff504 	addi	sp,sp,-44
81130120:	de00012e 	bgeu	sp,et,81130128 <OSTaskDelReq+0xc>
81130124:	003b68fa 	trap	3
81130128:	df000a15 	stw	fp,40(sp)
8113012c:	df000a04 	addi	fp,sp,40
81130130:	2005883a 	mov	r2,r4
81130134:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130138:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8113013c:	e0bfff03 	ldbu	r2,-4(fp)
81130140:	10800a18 	cmpnei	r2,r2,40
81130144:	1000021e 	bne	r2,zero,81130150 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
81130148:	00800f84 	movi	r2,62
8113014c:	00004506 	br	81130264 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
81130150:	e0bfff03 	ldbu	r2,-4(fp)
81130154:	10800a30 	cmpltui	r2,r2,40
81130158:	1000051e 	bne	r2,zero,81130170 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
8113015c:	e0bfff03 	ldbu	r2,-4(fp)
81130160:	10803fe0 	cmpeqi	r2,r2,255
81130164:	1000021e 	bne	r2,zero,81130170 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
81130168:	00800a84 	movi	r2,42
8113016c:	00003d06 	br	81130264 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
81130170:	e0bfff03 	ldbu	r2,-4(fp)
81130174:	10803fd8 	cmpnei	r2,r2,255
81130178:	1000111e 	bne	r2,zero,811301c0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113017c:	0005303a 	rdctl	r2,status
81130180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130184:	e0fff917 	ldw	r3,-28(fp)
81130188:	00bfff84 	movi	r2,-2
8113018c:	1884703a 	and	r2,r3,r2
81130190:	1001703a 	wrctl	status,r2
  
  return context;
81130194:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
81130198:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8113019c:	d0a08517 	ldw	r2,-32236(gp)
811301a0:	10800dc3 	ldbu	r2,55(r2)
811301a4:	e0bff805 	stb	r2,-32(fp)
811301a8:	e0bff617 	ldw	r2,-40(fp)
811301ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811301b0:	e0bffe17 	ldw	r2,-8(fp)
811301b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
811301b8:	e0bff803 	ldbu	r2,-32(fp)
811301bc:	00002906 	br	81130264 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811301c0:	0005303a 	rdctl	r2,status
811301c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811301c8:	e0fff717 	ldw	r3,-36(fp)
811301cc:	00bfff84 	movi	r2,-2
811301d0:	1884703a 	and	r2,r3,r2
811301d4:	1001703a 	wrctl	status,r2
  
  return context;
811301d8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
811301dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
811301e0:	e0ffff03 	ldbu	r3,-4(fp)
811301e4:	00a04574 	movhi	r2,33045
811301e8:	10908604 	addi	r2,r2,16920
811301ec:	18c7883a 	add	r3,r3,r3
811301f0:	18c7883a 	add	r3,r3,r3
811301f4:	10c5883a 	add	r2,r2,r3
811301f8:	10800017 	ldw	r2,0(r2)
811301fc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
81130200:	e0bffb17 	ldw	r2,-20(fp)
81130204:	1000061e 	bne	r2,zero,81130220 <OSTaskDelReq+0x104>
81130208:	e0bff617 	ldw	r2,-40(fp)
8113020c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130210:	e0bffa17 	ldw	r2,-24(fp)
81130214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81130218:	008010c4 	movi	r2,67
8113021c:	00001106 	br	81130264 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
81130220:	e0bffb17 	ldw	r2,-20(fp)
81130224:	10800058 	cmpnei	r2,r2,1
81130228:	1000061e 	bne	r2,zero,81130244 <OSTaskDelReq+0x128>
8113022c:	e0bff617 	ldw	r2,-40(fp)
81130230:	e0bffc15 	stw	r2,-16(fp)
81130234:	e0bffc17 	ldw	r2,-16(fp)
81130238:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8113023c:	00800f44 	movi	r2,61
81130240:	00000806 	br	81130264 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
81130244:	e0bffb17 	ldw	r2,-20(fp)
81130248:	00c00fc4 	movi	r3,63
8113024c:	10c00dc5 	stb	r3,55(r2)
81130250:	e0bff617 	ldw	r2,-40(fp)
81130254:	e0bffd15 	stw	r2,-12(fp)
81130258:	e0bffd17 	ldw	r2,-12(fp)
8113025c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130260:	0005883a 	mov	r2,zero
}
81130264:	e037883a 	mov	sp,fp
81130268:	df000017 	ldw	fp,0(sp)
8113026c:	dec00104 	addi	sp,sp,4
81130270:	f800283a 	ret

81130274 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
81130274:	defff404 	addi	sp,sp,-48
81130278:	de00012e 	bgeu	sp,et,81130280 <OSTaskNameGet+0xc>
8113027c:	003b68fa 	trap	3
81130280:	dfc00b15 	stw	ra,44(sp)
81130284:	df000a15 	stw	fp,40(sp)
81130288:	df000a04 	addi	fp,sp,40
8113028c:	2005883a 	mov	r2,r4
81130290:	e17ffe15 	stw	r5,-8(fp)
81130294:	e1bfff15 	stw	r6,-4(fp)
81130298:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8113029c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
811302a0:	e0bfff17 	ldw	r2,-4(fp)
811302a4:	1000021e 	bne	r2,zero,811302b0 <OSTaskNameGet+0x3c>
        return (0);
811302a8:	0005883a 	mov	r2,zero
811302ac:	00005406 	br	81130400 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
811302b0:	e0bffd03 	ldbu	r2,-12(fp)
811302b4:	10800a70 	cmpltui	r2,r2,41
811302b8:	1000081e 	bne	r2,zero,811302dc <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
811302bc:	e0bffd03 	ldbu	r2,-12(fp)
811302c0:	10803fe0 	cmpeqi	r2,r2,255
811302c4:	1000051e 	bne	r2,zero,811302dc <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
811302c8:	e0bfff17 	ldw	r2,-4(fp)
811302cc:	00c00a84 	movi	r3,42
811302d0:	10c00005 	stb	r3,0(r2)
            return (0);
811302d4:	0005883a 	mov	r2,zero
811302d8:	00004906 	br	81130400 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
811302dc:	e0bffe17 	ldw	r2,-8(fp)
811302e0:	1000051e 	bne	r2,zero,811302f8 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
811302e4:	e0bfff17 	ldw	r2,-4(fp)
811302e8:	00c00304 	movi	r3,12
811302ec:	10c00005 	stb	r3,0(r2)
        return (0);
811302f0:	0005883a 	mov	r2,zero
811302f4:	00004206 	br	81130400 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
811302f8:	d0a08403 	ldbu	r2,-32240(gp)
811302fc:	10803fcc 	andi	r2,r2,255
81130300:	10000526 	beq	r2,zero,81130318 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
81130304:	e0bfff17 	ldw	r2,-4(fp)
81130308:	00c00444 	movi	r3,17
8113030c:	10c00005 	stb	r3,0(r2)
        return (0);
81130310:	0005883a 	mov	r2,zero
81130314:	00003a06 	br	81130400 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130318:	0005303a 	rdctl	r2,status
8113031c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130320:	e0fffc17 	ldw	r3,-16(fp)
81130324:	00bfff84 	movi	r2,-2
81130328:	1884703a 	and	r2,r3,r2
8113032c:	1001703a 	wrctl	status,r2
  
  return context;
81130330:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130334:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81130338:	e0bffd03 	ldbu	r2,-12(fp)
8113033c:	10803fd8 	cmpnei	r2,r2,255
81130340:	1000031e 	bne	r2,zero,81130350 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
81130344:	d0a08517 	ldw	r2,-32236(gp)
81130348:	10800c83 	ldbu	r2,50(r2)
8113034c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130350:	e0fffd03 	ldbu	r3,-12(fp)
81130354:	00a04574 	movhi	r2,33045
81130358:	10908604 	addi	r2,r2,16920
8113035c:	18c7883a 	add	r3,r3,r3
81130360:	18c7883a 	add	r3,r3,r3
81130364:	10c5883a 	add	r2,r2,r3
81130368:	10800017 	ldw	r2,0(r2)
8113036c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
81130370:	e0bff817 	ldw	r2,-32(fp)
81130374:	1000091e 	bne	r2,zero,8113039c <OSTaskNameGet+0x128>
81130378:	e0bff617 	ldw	r2,-40(fp)
8113037c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130380:	e0bff717 	ldw	r2,-36(fp)
81130384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
81130388:	e0bfff17 	ldw	r2,-4(fp)
8113038c:	00c010c4 	movi	r3,67
81130390:	10c00005 	stb	r3,0(r2)
        return (0);
81130394:	0005883a 	mov	r2,zero
81130398:	00001906 	br	81130400 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8113039c:	e0bff817 	ldw	r2,-32(fp)
811303a0:	10800058 	cmpnei	r2,r2,1
811303a4:	1000091e 	bne	r2,zero,811303cc <OSTaskNameGet+0x158>
811303a8:	e0bff617 	ldw	r2,-40(fp)
811303ac:	e0bff915 	stw	r2,-28(fp)
811303b0:	e0bff917 	ldw	r2,-28(fp)
811303b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
811303b8:	e0bfff17 	ldw	r2,-4(fp)
811303bc:	00c010c4 	movi	r3,67
811303c0:	10c00005 	stb	r3,0(r2)
        return (0);
811303c4:	0005883a 	mov	r2,zero
811303c8:	00000d06 	br	81130400 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
811303cc:	e0bff817 	ldw	r2,-32(fp)
811303d0:	10801304 	addi	r2,r2,76
811303d4:	100b883a 	mov	r5,r2
811303d8:	e13ffe17 	ldw	r4,-8(fp)
811303dc:	112a11c0 	call	8112a11c <OS_StrCopy>
811303e0:	e0bffb05 	stb	r2,-20(fp)
811303e4:	e0bff617 	ldw	r2,-40(fp)
811303e8:	e0bffa15 	stw	r2,-24(fp)
811303ec:	e0bffa17 	ldw	r2,-24(fp)
811303f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811303f4:	e0bfff17 	ldw	r2,-4(fp)
811303f8:	10000005 	stb	zero,0(r2)
    return (len);
811303fc:	e0bffb03 	ldbu	r2,-20(fp)
}
81130400:	e037883a 	mov	sp,fp
81130404:	dfc00117 	ldw	ra,4(sp)
81130408:	df000017 	ldw	fp,0(sp)
8113040c:	dec00204 	addi	sp,sp,8
81130410:	f800283a 	ret

81130414 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
81130414:	defff304 	addi	sp,sp,-52
81130418:	de00012e 	bgeu	sp,et,81130420 <OSTaskNameSet+0xc>
8113041c:	003b68fa 	trap	3
81130420:	dfc00c15 	stw	ra,48(sp)
81130424:	df000b15 	stw	fp,44(sp)
81130428:	df000b04 	addi	fp,sp,44
8113042c:	2005883a 	mov	r2,r4
81130430:	e17ffe15 	stw	r5,-8(fp)
81130434:	e1bfff15 	stw	r6,-4(fp)
81130438:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8113043c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81130440:	e0bfff17 	ldw	r2,-4(fp)
81130444:	10005c26 	beq	r2,zero,811305b8 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81130448:	e0bffd03 	ldbu	r2,-12(fp)
8113044c:	10800a70 	cmpltui	r2,r2,41
81130450:	1000071e 	bne	r2,zero,81130470 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
81130454:	e0bffd03 	ldbu	r2,-12(fp)
81130458:	10803fe0 	cmpeqi	r2,r2,255
8113045c:	1000041e 	bne	r2,zero,81130470 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
81130460:	e0bfff17 	ldw	r2,-4(fp)
81130464:	00c00a84 	movi	r3,42
81130468:	10c00005 	stb	r3,0(r2)
            return;
8113046c:	00005306 	br	811305bc <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
81130470:	e0bffe17 	ldw	r2,-8(fp)
81130474:	1000041e 	bne	r2,zero,81130488 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
81130478:	e0bfff17 	ldw	r2,-4(fp)
8113047c:	00c00304 	movi	r3,12
81130480:	10c00005 	stb	r3,0(r2)
        return;
81130484:	00004d06 	br	811305bc <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
81130488:	d0a08403 	ldbu	r2,-32240(gp)
8113048c:	10803fcc 	andi	r2,r2,255
81130490:	10000426 	beq	r2,zero,811304a4 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
81130494:	e0bfff17 	ldw	r2,-4(fp)
81130498:	00c00484 	movi	r3,18
8113049c:	10c00005 	stb	r3,0(r2)
        return;
811304a0:	00004606 	br	811305bc <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811304a4:	0005303a 	rdctl	r2,status
811304a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811304ac:	e0fffc17 	ldw	r3,-16(fp)
811304b0:	00bfff84 	movi	r2,-2
811304b4:	1884703a 	and	r2,r3,r2
811304b8:	1001703a 	wrctl	status,r2
  
  return context;
811304bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811304c0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
811304c4:	e0bffd03 	ldbu	r2,-12(fp)
811304c8:	10803fd8 	cmpnei	r2,r2,255
811304cc:	1000031e 	bne	r2,zero,811304dc <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
811304d0:	d0a08517 	ldw	r2,-32236(gp)
811304d4:	10800c83 	ldbu	r2,50(r2)
811304d8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811304dc:	e0fffd03 	ldbu	r3,-12(fp)
811304e0:	00a04574 	movhi	r2,33045
811304e4:	10908604 	addi	r2,r2,16920
811304e8:	18c7883a 	add	r3,r3,r3
811304ec:	18c7883a 	add	r3,r3,r3
811304f0:	10c5883a 	add	r2,r2,r3
811304f4:	10800017 	ldw	r2,0(r2)
811304f8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
811304fc:	e0bff717 	ldw	r2,-36(fp)
81130500:	1000081e 	bne	r2,zero,81130524 <OSTaskNameSet+0x110>
81130504:	e0bff517 	ldw	r2,-44(fp)
81130508:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113050c:	e0bff617 	ldw	r2,-40(fp)
81130510:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
81130514:	e0bfff17 	ldw	r2,-4(fp)
81130518:	00c010c4 	movi	r3,67
8113051c:	10c00005 	stb	r3,0(r2)
        return;
81130520:	00002606 	br	811305bc <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
81130524:	e0bff717 	ldw	r2,-36(fp)
81130528:	10800058 	cmpnei	r2,r2,1
8113052c:	1000081e 	bne	r2,zero,81130550 <OSTaskNameSet+0x13c>
81130530:	e0bff517 	ldw	r2,-44(fp)
81130534:	e0bff815 	stw	r2,-32(fp)
81130538:	e0bff817 	ldw	r2,-32(fp)
8113053c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
81130540:	e0bfff17 	ldw	r2,-4(fp)
81130544:	00c010c4 	movi	r3,67
81130548:	10c00005 	stb	r3,0(r2)
        return;
8113054c:	00001b06 	br	811305bc <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
81130550:	e13ffe17 	ldw	r4,-8(fp)
81130554:	112a1980 	call	8112a198 <OS_StrLen>
81130558:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8113055c:	e0bffa03 	ldbu	r2,-24(fp)
81130560:	10800830 	cmpltui	r2,r2,32
81130564:	1000081e 	bne	r2,zero,81130588 <OSTaskNameSet+0x174>
81130568:	e0bff517 	ldw	r2,-44(fp)
8113056c:	e0bff915 	stw	r2,-28(fp)
81130570:	e0bff917 	ldw	r2,-28(fp)
81130574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
81130578:	e0bfff17 	ldw	r2,-4(fp)
8113057c:	00c01044 	movi	r3,65
81130580:	10c00005 	stb	r3,0(r2)
        return;
81130584:	00000d06 	br	811305bc <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
81130588:	e0bff717 	ldw	r2,-36(fp)
8113058c:	10801304 	addi	r2,r2,76
81130590:	e17ffe17 	ldw	r5,-8(fp)
81130594:	1009883a 	mov	r4,r2
81130598:	112a11c0 	call	8112a11c <OS_StrCopy>
8113059c:	e0bff517 	ldw	r2,-44(fp)
811305a0:	e0bffb15 	stw	r2,-20(fp)
811305a4:	e0bffb17 	ldw	r2,-20(fp)
811305a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811305ac:	e0bfff17 	ldw	r2,-4(fp)
811305b0:	10000005 	stb	zero,0(r2)
811305b4:	00000106 	br	811305bc <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
811305b8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811305bc:	e037883a 	mov	sp,fp
811305c0:	dfc00117 	ldw	ra,4(sp)
811305c4:	df000017 	ldw	fp,0(sp)
811305c8:	dec00204 	addi	sp,sp,8
811305cc:	f800283a 	ret

811305d0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
811305d0:	defff404 	addi	sp,sp,-48
811305d4:	de00012e 	bgeu	sp,et,811305dc <OSTaskResume+0xc>
811305d8:	003b68fa 	trap	3
811305dc:	dfc00b15 	stw	ra,44(sp)
811305e0:	df000a15 	stw	fp,40(sp)
811305e4:	df000a04 	addi	fp,sp,40
811305e8:	2005883a 	mov	r2,r4
811305ec:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
811305f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
811305f4:	e0bfff03 	ldbu	r2,-4(fp)
811305f8:	10800a30 	cmpltui	r2,r2,40
811305fc:	1000021e 	bne	r2,zero,81130608 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81130600:	00800a84 	movi	r2,42
81130604:	00006406 	br	81130798 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130608:	0005303a 	rdctl	r2,status
8113060c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130610:	e0fffe17 	ldw	r3,-8(fp)
81130614:	00bfff84 	movi	r2,-2
81130618:	1884703a 	and	r2,r3,r2
8113061c:	1001703a 	wrctl	status,r2
  
  return context;
81130620:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130624:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81130628:	e0ffff03 	ldbu	r3,-4(fp)
8113062c:	00a04574 	movhi	r2,33045
81130630:	10908604 	addi	r2,r2,16920
81130634:	18c7883a 	add	r3,r3,r3
81130638:	18c7883a 	add	r3,r3,r3
8113063c:	10c5883a 	add	r2,r2,r3
81130640:	10800017 	ldw	r2,0(r2)
81130644:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81130648:	e0bff817 	ldw	r2,-32(fp)
8113064c:	1000061e 	bne	r2,zero,81130668 <OSTaskResume+0x98>
81130650:	e0bff617 	ldw	r2,-40(fp)
81130654:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130658:	e0bff717 	ldw	r2,-36(fp)
8113065c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
81130660:	00801184 	movi	r2,70
81130664:	00004c06 	br	81130798 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81130668:	e0bff817 	ldw	r2,-32(fp)
8113066c:	10800058 	cmpnei	r2,r2,1
81130670:	1000061e 	bne	r2,zero,8113068c <OSTaskResume+0xbc>
81130674:	e0bff617 	ldw	r2,-40(fp)
81130678:	e0bff915 	stw	r2,-28(fp)
8113067c:	e0bff917 	ldw	r2,-28(fp)
81130680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130684:	008010c4 	movi	r2,67
81130688:	00004306 	br	81130798 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8113068c:	e0bff817 	ldw	r2,-32(fp)
81130690:	10800c03 	ldbu	r2,48(r2)
81130694:	10803fcc 	andi	r2,r2,255
81130698:	1080020c 	andi	r2,r2,8
8113069c:	10003926 	beq	r2,zero,81130784 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
811306a0:	e0bff817 	ldw	r2,-32(fp)
811306a4:	10c00c03 	ldbu	r3,48(r2)
811306a8:	00bffdc4 	movi	r2,-9
811306ac:	1884703a 	and	r2,r3,r2
811306b0:	1007883a 	mov	r3,r2
811306b4:	e0bff817 	ldw	r2,-32(fp)
811306b8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
811306bc:	e0bff817 	ldw	r2,-32(fp)
811306c0:	10800c03 	ldbu	r2,48(r2)
811306c4:	10803fcc 	andi	r2,r2,255
811306c8:	1000281e 	bne	r2,zero,8113076c <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
811306cc:	e0bff817 	ldw	r2,-32(fp)
811306d0:	10800b8b 	ldhu	r2,46(r2)
811306d4:	10bfffcc 	andi	r2,r2,65535
811306d8:	10001f1e 	bne	r2,zero,81130758 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
811306dc:	e0bff817 	ldw	r2,-32(fp)
811306e0:	10c00d83 	ldbu	r3,54(r2)
811306e4:	d0a08103 	ldbu	r2,-32252(gp)
811306e8:	1884b03a 	or	r2,r3,r2
811306ec:	d0a08105 	stb	r2,-32252(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811306f0:	e0bff817 	ldw	r2,-32(fp)
811306f4:	10800d03 	ldbu	r2,52(r2)
811306f8:	10c03fcc 	andi	r3,r2,255
811306fc:	e0bff817 	ldw	r2,-32(fp)
81130700:	10800d03 	ldbu	r2,52(r2)
81130704:	11003fcc 	andi	r4,r2,255
81130708:	d0a08144 	addi	r2,gp,-32251
8113070c:	2085883a 	add	r2,r4,r2
81130710:	11000003 	ldbu	r4,0(r2)
81130714:	e0bff817 	ldw	r2,-32(fp)
81130718:	10800d43 	ldbu	r2,53(r2)
8113071c:	2084b03a 	or	r2,r4,r2
81130720:	1009883a 	mov	r4,r2
81130724:	d0a08144 	addi	r2,gp,-32251
81130728:	1885883a 	add	r2,r3,r2
8113072c:	11000005 	stb	r4,0(r2)
81130730:	e0bff617 	ldw	r2,-40(fp)
81130734:	e0bffa15 	stw	r2,-24(fp)
81130738:	e0bffa17 	ldw	r2,-24(fp)
8113073c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81130740:	d0a07403 	ldbu	r2,-32304(gp)
81130744:	10803fcc 	andi	r2,r2,255
81130748:	10800058 	cmpnei	r2,r2,1
8113074c:	10000b1e 	bne	r2,zero,8113077c <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
81130750:	1129fc80 	call	81129fc8 <OS_Sched>
81130754:	00000906 	br	8113077c <OSTaskResume+0x1ac>
81130758:	e0bff617 	ldw	r2,-40(fp)
8113075c:	e0bffb15 	stw	r2,-20(fp)
81130760:	e0bffb17 	ldw	r2,-20(fp)
81130764:	1001703a 	wrctl	status,r2
81130768:	00000406 	br	8113077c <OSTaskResume+0x1ac>
8113076c:	e0bff617 	ldw	r2,-40(fp)
81130770:	e0bffc15 	stw	r2,-16(fp)
81130774:	e0bffc17 	ldw	r2,-16(fp)
81130778:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8113077c:	0005883a 	mov	r2,zero
81130780:	00000506 	br	81130798 <OSTaskResume+0x1c8>
81130784:	e0bff617 	ldw	r2,-40(fp)
81130788:	e0bffd15 	stw	r2,-12(fp)
8113078c:	e0bffd17 	ldw	r2,-12(fp)
81130790:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
81130794:	00801104 	movi	r2,68
}
81130798:	e037883a 	mov	sp,fp
8113079c:	dfc00117 	ldw	ra,4(sp)
811307a0:	df000017 	ldw	fp,0(sp)
811307a4:	dec00204 	addi	sp,sp,8
811307a8:	f800283a 	ret

811307ac <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
811307ac:	defff304 	addi	sp,sp,-52
811307b0:	de00012e 	bgeu	sp,et,811307b8 <OSTaskStkChk+0xc>
811307b4:	003b68fa 	trap	3
811307b8:	df000c15 	stw	fp,48(sp)
811307bc:	df000c04 	addi	fp,sp,48
811307c0:	2005883a 	mov	r2,r4
811307c4:	e17fff15 	stw	r5,-4(fp)
811307c8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811307cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
811307d0:	e0bffe03 	ldbu	r2,-8(fp)
811307d4:	10800a70 	cmpltui	r2,r2,41
811307d8:	1000051e 	bne	r2,zero,811307f0 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
811307dc:	e0bffe03 	ldbu	r2,-8(fp)
811307e0:	10803fe0 	cmpeqi	r2,r2,255
811307e4:	1000021e 	bne	r2,zero,811307f0 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
811307e8:	00800a84 	movi	r2,42
811307ec:	00005d06 	br	81130964 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
811307f0:	e0bfff17 	ldw	r2,-4(fp)
811307f4:	1000021e 	bne	r2,zero,81130800 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
811307f8:	00800244 	movi	r2,9
811307fc:	00005906 	br	81130964 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
81130800:	e0bfff17 	ldw	r2,-4(fp)
81130804:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81130808:	e0bfff17 	ldw	r2,-4(fp)
8113080c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130810:	0005303a 	rdctl	r2,status
81130814:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130818:	e0fffd17 	ldw	r3,-12(fp)
8113081c:	00bfff84 	movi	r2,-2
81130820:	1884703a 	and	r2,r3,r2
81130824:	1001703a 	wrctl	status,r2
  
  return context;
81130828:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8113082c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
81130830:	e0bffe03 	ldbu	r2,-8(fp)
81130834:	10803fd8 	cmpnei	r2,r2,255
81130838:	1000031e 	bne	r2,zero,81130848 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8113083c:	d0a08517 	ldw	r2,-32236(gp)
81130840:	10800c83 	ldbu	r2,50(r2)
81130844:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130848:	e0fffe03 	ldbu	r3,-8(fp)
8113084c:	00a04574 	movhi	r2,33045
81130850:	10908604 	addi	r2,r2,16920
81130854:	18c7883a 	add	r3,r3,r3
81130858:	18c7883a 	add	r3,r3,r3
8113085c:	10c5883a 	add	r2,r2,r3
81130860:	10800017 	ldw	r2,0(r2)
81130864:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
81130868:	e0bff817 	ldw	r2,-32(fp)
8113086c:	1000061e 	bne	r2,zero,81130888 <OSTaskStkChk+0xdc>
81130870:	e0bff617 	ldw	r2,-40(fp)
81130874:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130878:	e0bff717 	ldw	r2,-36(fp)
8113087c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130880:	008010c4 	movi	r2,67
81130884:	00003706 	br	81130964 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81130888:	e0bff817 	ldw	r2,-32(fp)
8113088c:	10800058 	cmpnei	r2,r2,1
81130890:	1000061e 	bne	r2,zero,811308ac <OSTaskStkChk+0x100>
81130894:	e0bff617 	ldw	r2,-40(fp)
81130898:	e0bff915 	stw	r2,-28(fp)
8113089c:	e0bff917 	ldw	r2,-28(fp)
811308a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811308a4:	008010c4 	movi	r2,67
811308a8:	00002e06 	br	81130964 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
811308ac:	e0bff817 	ldw	r2,-32(fp)
811308b0:	1080040b 	ldhu	r2,16(r2)
811308b4:	10bfffcc 	andi	r2,r2,65535
811308b8:	1080004c 	andi	r2,r2,1
811308bc:	1000061e 	bne	r2,zero,811308d8 <OSTaskStkChk+0x12c>
811308c0:	e0bff617 	ldw	r2,-40(fp)
811308c4:	e0bffa15 	stw	r2,-24(fp)
811308c8:	e0bffa17 	ldw	r2,-24(fp)
811308cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
811308d0:	00801144 	movi	r2,69
811308d4:	00002306 	br	81130964 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
811308d8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
811308dc:	e0bff817 	ldw	r2,-32(fp)
811308e0:	10800317 	ldw	r2,12(r2)
811308e4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
811308e8:	e0bff817 	ldw	r2,-32(fp)
811308ec:	10800217 	ldw	r2,8(r2)
811308f0:	e0bff415 	stw	r2,-48(fp)
811308f4:	e0bff617 	ldw	r2,-40(fp)
811308f8:	e0bffb15 	stw	r2,-20(fp)
811308fc:	e0bffb17 	ldw	r2,-20(fp)
81130900:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81130904:	00000306 	br	81130914 <OSTaskStkChk+0x168>
        nfree++;
81130908:	e0bff517 	ldw	r2,-44(fp)
8113090c:	10800044 	addi	r2,r2,1
81130910:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81130914:	e0bff417 	ldw	r2,-48(fp)
81130918:	10c00104 	addi	r3,r2,4
8113091c:	e0fff415 	stw	r3,-48(fp)
81130920:	10800017 	ldw	r2,0(r2)
81130924:	103ff826 	beq	r2,zero,81130908 <__reset+0xfb110908>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
81130928:	e0bff517 	ldw	r2,-44(fp)
8113092c:	1085883a 	add	r2,r2,r2
81130930:	1085883a 	add	r2,r2,r2
81130934:	1007883a 	mov	r3,r2
81130938:	e0bfff17 	ldw	r2,-4(fp)
8113093c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81130940:	e0fffc17 	ldw	r3,-16(fp)
81130944:	e0bff517 	ldw	r2,-44(fp)
81130948:	1885c83a 	sub	r2,r3,r2
8113094c:	1085883a 	add	r2,r2,r2
81130950:	1085883a 	add	r2,r2,r2
81130954:	1007883a 	mov	r3,r2
81130958:	e0bfff17 	ldw	r2,-4(fp)
8113095c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
81130960:	0005883a 	mov	r2,zero
}
81130964:	e037883a 	mov	sp,fp
81130968:	df000017 	ldw	fp,0(sp)
8113096c:	dec00104 	addi	sp,sp,4
81130970:	f800283a 	ret

81130974 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
81130974:	defff504 	addi	sp,sp,-44
81130978:	de00012e 	bgeu	sp,et,81130980 <OSTaskSuspend+0xc>
8113097c:	003b68fa 	trap	3
81130980:	dfc00a15 	stw	ra,40(sp)
81130984:	df000915 	stw	fp,36(sp)
81130988:	df000904 	addi	fp,sp,36
8113098c:	2005883a 	mov	r2,r4
81130990:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130994:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
81130998:	e0bfff03 	ldbu	r2,-4(fp)
8113099c:	10800a18 	cmpnei	r2,r2,40
811309a0:	1000021e 	bne	r2,zero,811309ac <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
811309a4:	008011c4 	movi	r2,71
811309a8:	00006806 	br	81130b4c <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
811309ac:	e0bfff03 	ldbu	r2,-4(fp)
811309b0:	10800a30 	cmpltui	r2,r2,40
811309b4:	1000051e 	bne	r2,zero,811309cc <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
811309b8:	e0bfff03 	ldbu	r2,-4(fp)
811309bc:	10803fe0 	cmpeqi	r2,r2,255
811309c0:	1000021e 	bne	r2,zero,811309cc <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
811309c4:	00800a84 	movi	r2,42
811309c8:	00006006 	br	81130b4c <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811309cc:	0005303a 	rdctl	r2,status
811309d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811309d4:	e0fffe17 	ldw	r3,-8(fp)
811309d8:	00bfff84 	movi	r2,-2
811309dc:	1884703a 	and	r2,r3,r2
811309e0:	1001703a 	wrctl	status,r2
  
  return context;
811309e4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
811309e8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
811309ec:	e0bfff03 	ldbu	r2,-4(fp)
811309f0:	10803fd8 	cmpnei	r2,r2,255
811309f4:	1000061e 	bne	r2,zero,81130a10 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
811309f8:	d0a08517 	ldw	r2,-32236(gp)
811309fc:	10800c83 	ldbu	r2,50(r2)
81130a00:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
81130a04:	00800044 	movi	r2,1
81130a08:	e0bff705 	stb	r2,-36(fp)
81130a0c:	00000906 	br	81130a34 <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
81130a10:	d0a08517 	ldw	r2,-32236(gp)
81130a14:	10800c83 	ldbu	r2,50(r2)
81130a18:	10c03fcc 	andi	r3,r2,255
81130a1c:	e0bfff03 	ldbu	r2,-4(fp)
81130a20:	1880031e 	bne	r3,r2,81130a30 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
81130a24:	00800044 	movi	r2,1
81130a28:	e0bff705 	stb	r2,-36(fp)
81130a2c:	00000106 	br	81130a34 <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
81130a30:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130a34:	e0ffff03 	ldbu	r3,-4(fp)
81130a38:	00a04574 	movhi	r2,33045
81130a3c:	10908604 	addi	r2,r2,16920
81130a40:	18c7883a 	add	r3,r3,r3
81130a44:	18c7883a 	add	r3,r3,r3
81130a48:	10c5883a 	add	r2,r2,r3
81130a4c:	10800017 	ldw	r2,0(r2)
81130a50:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
81130a54:	e0bffa17 	ldw	r2,-24(fp)
81130a58:	1000061e 	bne	r2,zero,81130a74 <OSTaskSuspend+0x100>
81130a5c:	e0bff817 	ldw	r2,-32(fp)
81130a60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130a64:	e0bff917 	ldw	r2,-28(fp)
81130a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
81130a6c:	00801204 	movi	r2,72
81130a70:	00003606 	br	81130b4c <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
81130a74:	e0bffa17 	ldw	r2,-24(fp)
81130a78:	10800058 	cmpnei	r2,r2,1
81130a7c:	1000061e 	bne	r2,zero,81130a98 <OSTaskSuspend+0x124>
81130a80:	e0bff817 	ldw	r2,-32(fp)
81130a84:	e0bffb15 	stw	r2,-20(fp)
81130a88:	e0bffb17 	ldw	r2,-20(fp)
81130a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130a90:	008010c4 	movi	r2,67
81130a94:	00002d06 	br	81130b4c <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
81130a98:	e0bffa17 	ldw	r2,-24(fp)
81130a9c:	10800d03 	ldbu	r2,52(r2)
81130aa0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
81130aa4:	e0fffd03 	ldbu	r3,-12(fp)
81130aa8:	e13ffd03 	ldbu	r4,-12(fp)
81130aac:	d0a08144 	addi	r2,gp,-32251
81130ab0:	2085883a 	add	r2,r4,r2
81130ab4:	10800003 	ldbu	r2,0(r2)
81130ab8:	1009883a 	mov	r4,r2
81130abc:	e0bffa17 	ldw	r2,-24(fp)
81130ac0:	10800d43 	ldbu	r2,53(r2)
81130ac4:	0084303a 	nor	r2,zero,r2
81130ac8:	2084703a 	and	r2,r4,r2
81130acc:	1009883a 	mov	r4,r2
81130ad0:	d0a08144 	addi	r2,gp,-32251
81130ad4:	1885883a 	add	r2,r3,r2
81130ad8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81130adc:	e0fffd03 	ldbu	r3,-12(fp)
81130ae0:	d0a08144 	addi	r2,gp,-32251
81130ae4:	1885883a 	add	r2,r3,r2
81130ae8:	10800003 	ldbu	r2,0(r2)
81130aec:	10803fcc 	andi	r2,r2,255
81130af0:	1000071e 	bne	r2,zero,81130b10 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
81130af4:	e0bffa17 	ldw	r2,-24(fp)
81130af8:	10800d83 	ldbu	r2,54(r2)
81130afc:	0084303a 	nor	r2,zero,r2
81130b00:	1007883a 	mov	r3,r2
81130b04:	d0a08103 	ldbu	r2,-32252(gp)
81130b08:	1884703a 	and	r2,r3,r2
81130b0c:	d0a08105 	stb	r2,-32252(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
81130b10:	e0bffa17 	ldw	r2,-24(fp)
81130b14:	10800c03 	ldbu	r2,48(r2)
81130b18:	10800214 	ori	r2,r2,8
81130b1c:	1007883a 	mov	r3,r2
81130b20:	e0bffa17 	ldw	r2,-24(fp)
81130b24:	10c00c05 	stb	r3,48(r2)
81130b28:	e0bff817 	ldw	r2,-32(fp)
81130b2c:	e0bffc15 	stw	r2,-16(fp)
81130b30:	e0bffc17 	ldw	r2,-16(fp)
81130b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
81130b38:	e0bff703 	ldbu	r2,-36(fp)
81130b3c:	10800058 	cmpnei	r2,r2,1
81130b40:	1000011e 	bne	r2,zero,81130b48 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
81130b44:	1129fc80 	call	81129fc8 <OS_Sched>
    }
    return (OS_ERR_NONE);
81130b48:	0005883a 	mov	r2,zero
}
81130b4c:	e037883a 	mov	sp,fp
81130b50:	dfc00117 	ldw	ra,4(sp)
81130b54:	df000017 	ldw	fp,0(sp)
81130b58:	dec00204 	addi	sp,sp,8
81130b5c:	f800283a 	ret

81130b60 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
81130b60:	defff604 	addi	sp,sp,-40
81130b64:	de00012e 	bgeu	sp,et,81130b6c <OSTaskQuery+0xc>
81130b68:	003b68fa 	trap	3
81130b6c:	dfc00915 	stw	ra,36(sp)
81130b70:	df000815 	stw	fp,32(sp)
81130b74:	df000804 	addi	fp,sp,32
81130b78:	2005883a 	mov	r2,r4
81130b7c:	e17fff15 	stw	r5,-4(fp)
81130b80:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130b84:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81130b88:	e0bffe03 	ldbu	r2,-8(fp)
81130b8c:	10800a70 	cmpltui	r2,r2,41
81130b90:	1000051e 	bne	r2,zero,81130ba8 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
81130b94:	e0bffe03 	ldbu	r2,-8(fp)
81130b98:	10803fe0 	cmpeqi	r2,r2,255
81130b9c:	1000021e 	bne	r2,zero,81130ba8 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
81130ba0:	00800a84 	movi	r2,42
81130ba4:	00003406 	br	81130c78 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
81130ba8:	e0bfff17 	ldw	r2,-4(fp)
81130bac:	1000021e 	bne	r2,zero,81130bb8 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
81130bb0:	00800244 	movi	r2,9
81130bb4:	00003006 	br	81130c78 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130bb8:	0005303a 	rdctl	r2,status
81130bbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130bc0:	e0fffd17 	ldw	r3,-12(fp)
81130bc4:	00bfff84 	movi	r2,-2
81130bc8:	1884703a 	and	r2,r3,r2
81130bcc:	1001703a 	wrctl	status,r2
  
  return context;
81130bd0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130bd4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81130bd8:	e0bffe03 	ldbu	r2,-8(fp)
81130bdc:	10803fd8 	cmpnei	r2,r2,255
81130be0:	1000031e 	bne	r2,zero,81130bf0 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
81130be4:	d0a08517 	ldw	r2,-32236(gp)
81130be8:	10800c83 	ldbu	r2,50(r2)
81130bec:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130bf0:	e0fffe03 	ldbu	r3,-8(fp)
81130bf4:	00a04574 	movhi	r2,33045
81130bf8:	10908604 	addi	r2,r2,16920
81130bfc:	18c7883a 	add	r3,r3,r3
81130c00:	18c7883a 	add	r3,r3,r3
81130c04:	10c5883a 	add	r2,r2,r3
81130c08:	10800017 	ldw	r2,0(r2)
81130c0c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
81130c10:	e0bffa17 	ldw	r2,-24(fp)
81130c14:	1000061e 	bne	r2,zero,81130c30 <OSTaskQuery+0xd0>
81130c18:	e0bff817 	ldw	r2,-32(fp)
81130c1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130c20:	e0bff917 	ldw	r2,-28(fp)
81130c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
81130c28:	00800a44 	movi	r2,41
81130c2c:	00001206 	br	81130c78 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
81130c30:	e0bffa17 	ldw	r2,-24(fp)
81130c34:	10800058 	cmpnei	r2,r2,1
81130c38:	1000061e 	bne	r2,zero,81130c54 <OSTaskQuery+0xf4>
81130c3c:	e0bff817 	ldw	r2,-32(fp)
81130c40:	e0bffb15 	stw	r2,-20(fp)
81130c44:	e0bffb17 	ldw	r2,-20(fp)
81130c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130c4c:	008010c4 	movi	r2,67
81130c50:	00000906 	br	81130c78 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
81130c54:	01801b04 	movi	r6,108
81130c58:	e17ffa17 	ldw	r5,-24(fp)
81130c5c:	e13fff17 	ldw	r4,-4(fp)
81130c60:	1129f580 	call	81129f58 <OS_MemCopy>
81130c64:	e0bff817 	ldw	r2,-32(fp)
81130c68:	e0bffc15 	stw	r2,-16(fp)
81130c6c:	e0bffc17 	ldw	r2,-16(fp)
81130c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130c74:	0005883a 	mov	r2,zero
}
81130c78:	e037883a 	mov	sp,fp
81130c7c:	dfc00117 	ldw	ra,4(sp)
81130c80:	df000017 	ldw	fp,0(sp)
81130c84:	dec00204 	addi	sp,sp,8
81130c88:	f800283a 	ret

81130c8c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81130c8c:	defffc04 	addi	sp,sp,-16
81130c90:	de00012e 	bgeu	sp,et,81130c98 <OS_TaskStkClr+0xc>
81130c94:	003b68fa 	trap	3
81130c98:	df000315 	stw	fp,12(sp)
81130c9c:	df000304 	addi	fp,sp,12
81130ca0:	e13ffd15 	stw	r4,-12(fp)
81130ca4:	e17ffe15 	stw	r5,-8(fp)
81130ca8:	3005883a 	mov	r2,r6
81130cac:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81130cb0:	e0bfff0b 	ldhu	r2,-4(fp)
81130cb4:	1080004c 	andi	r2,r2,1
81130cb8:	10000d26 	beq	r2,zero,81130cf0 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
81130cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81130cc0:	1080008c 	andi	r2,r2,2
81130cc4:	10000a26 	beq	r2,zero,81130cf0 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81130cc8:	00000706 	br	81130ce8 <OS_TaskStkClr+0x5c>
                size--;
81130ccc:	e0bffe17 	ldw	r2,-8(fp)
81130cd0:	10bfffc4 	addi	r2,r2,-1
81130cd4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81130cd8:	e0bffd17 	ldw	r2,-12(fp)
81130cdc:	10c00104 	addi	r3,r2,4
81130ce0:	e0fffd15 	stw	r3,-12(fp)
81130ce4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81130ce8:	e0bffe17 	ldw	r2,-8(fp)
81130cec:	103ff71e 	bne	r2,zero,81130ccc <__reset+0xfb110ccc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
81130cf0:	0001883a 	nop
81130cf4:	e037883a 	mov	sp,fp
81130cf8:	df000017 	ldw	fp,0(sp)
81130cfc:	dec00104 	addi	sp,sp,4
81130d00:	f800283a 	ret

81130d04 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81130d04:	defff904 	addi	sp,sp,-28
81130d08:	de00012e 	bgeu	sp,et,81130d10 <OSTimeDly+0xc>
81130d0c:	003b68fa 	trap	3
81130d10:	dfc00615 	stw	ra,24(sp)
81130d14:	df000515 	stw	fp,20(sp)
81130d18:	df000504 	addi	fp,sp,20
81130d1c:	2005883a 	mov	r2,r4
81130d20:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130d24:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81130d28:	d0a08403 	ldbu	r2,-32240(gp)
81130d2c:	10803fcc 	andi	r2,r2,255
81130d30:	1000311e 	bne	r2,zero,81130df8 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81130d34:	e0bfff0b 	ldhu	r2,-4(fp)
81130d38:	10003026 	beq	r2,zero,81130dfc <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130d3c:	0005303a 	rdctl	r2,status
81130d40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130d44:	e0fffe17 	ldw	r3,-8(fp)
81130d48:	00bfff84 	movi	r2,-2
81130d4c:	1884703a 	and	r2,r3,r2
81130d50:	1001703a 	wrctl	status,r2
  
  return context;
81130d54:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81130d58:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81130d5c:	d0a08517 	ldw	r2,-32236(gp)
81130d60:	10800d03 	ldbu	r2,52(r2)
81130d64:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81130d68:	e0fffd03 	ldbu	r3,-12(fp)
81130d6c:	e13ffd03 	ldbu	r4,-12(fp)
81130d70:	d0a08144 	addi	r2,gp,-32251
81130d74:	2085883a 	add	r2,r4,r2
81130d78:	10800003 	ldbu	r2,0(r2)
81130d7c:	1009883a 	mov	r4,r2
81130d80:	d0a08517 	ldw	r2,-32236(gp)
81130d84:	10800d43 	ldbu	r2,53(r2)
81130d88:	0084303a 	nor	r2,zero,r2
81130d8c:	2084703a 	and	r2,r4,r2
81130d90:	1009883a 	mov	r4,r2
81130d94:	d0a08144 	addi	r2,gp,-32251
81130d98:	1885883a 	add	r2,r3,r2
81130d9c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81130da0:	e0fffd03 	ldbu	r3,-12(fp)
81130da4:	d0a08144 	addi	r2,gp,-32251
81130da8:	1885883a 	add	r2,r3,r2
81130dac:	10800003 	ldbu	r2,0(r2)
81130db0:	10803fcc 	andi	r2,r2,255
81130db4:	1000071e 	bne	r2,zero,81130dd4 <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81130db8:	d0a08517 	ldw	r2,-32236(gp)
81130dbc:	10800d83 	ldbu	r2,54(r2)
81130dc0:	0084303a 	nor	r2,zero,r2
81130dc4:	1007883a 	mov	r3,r2
81130dc8:	d0a08103 	ldbu	r2,-32252(gp)
81130dcc:	1884703a 	and	r2,r3,r2
81130dd0:	d0a08105 	stb	r2,-32252(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81130dd4:	d0a08517 	ldw	r2,-32236(gp)
81130dd8:	e0ffff0b 	ldhu	r3,-4(fp)
81130ddc:	10c00b8d 	sth	r3,46(r2)
81130de0:	e0bffb17 	ldw	r2,-20(fp)
81130de4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130de8:	e0bffc17 	ldw	r2,-16(fp)
81130dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81130df0:	1129fc80 	call	81129fc8 <OS_Sched>
81130df4:	00000106 	br	81130dfc <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81130df8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81130dfc:	e037883a 	mov	sp,fp
81130e00:	dfc00117 	ldw	ra,4(sp)
81130e04:	df000017 	ldw	fp,0(sp)
81130e08:	dec00204 	addi	sp,sp,8
81130e0c:	f800283a 	ret

81130e10 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
81130e10:	defff804 	addi	sp,sp,-32
81130e14:	de00012e 	bgeu	sp,et,81130e1c <OSTimeDlyHMSM+0xc>
81130e18:	003b68fa 	trap	3
81130e1c:	dfc00715 	stw	ra,28(sp)
81130e20:	df000615 	stw	fp,24(sp)
81130e24:	df000604 	addi	fp,sp,24
81130e28:	2015883a 	mov	r10,r4
81130e2c:	2809883a 	mov	r4,r5
81130e30:	3007883a 	mov	r3,r6
81130e34:	3805883a 	mov	r2,r7
81130e38:	e2bffc05 	stb	r10,-16(fp)
81130e3c:	e13ffd05 	stb	r4,-12(fp)
81130e40:	e0fffe05 	stb	r3,-8(fp)
81130e44:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81130e48:	d0a08403 	ldbu	r2,-32240(gp)
81130e4c:	10803fcc 	andi	r2,r2,255
81130e50:	10000226 	beq	r2,zero,81130e5c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
81130e54:	00801544 	movi	r2,85
81130e58:	00004106 	br	81130f60 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81130e5c:	e0bffc03 	ldbu	r2,-16(fp)
81130e60:	1000081e 	bne	r2,zero,81130e84 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
81130e64:	e0bffd03 	ldbu	r2,-12(fp)
81130e68:	1000061e 	bne	r2,zero,81130e84 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
81130e6c:	e0bffe03 	ldbu	r2,-8(fp)
81130e70:	1000041e 	bne	r2,zero,81130e84 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
81130e74:	e0bfff0b 	ldhu	r2,-4(fp)
81130e78:	1000021e 	bne	r2,zero,81130e84 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
81130e7c:	00801504 	movi	r2,84
81130e80:	00003706 	br	81130f60 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
81130e84:	e0bffd03 	ldbu	r2,-12(fp)
81130e88:	10800f30 	cmpltui	r2,r2,60
81130e8c:	1000021e 	bne	r2,zero,81130e98 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81130e90:	00801444 	movi	r2,81
81130e94:	00003206 	br	81130f60 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
81130e98:	e0bffe03 	ldbu	r2,-8(fp)
81130e9c:	10800f30 	cmpltui	r2,r2,60
81130ea0:	1000021e 	bne	r2,zero,81130eac <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
81130ea4:	00801484 	movi	r2,82
81130ea8:	00002d06 	br	81130f60 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
81130eac:	e0bfff0b 	ldhu	r2,-4(fp)
81130eb0:	1080fa30 	cmpltui	r2,r2,1000
81130eb4:	1000021e 	bne	r2,zero,81130ec0 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
81130eb8:	008014c4 	movi	r2,83
81130ebc:	00002806 	br	81130f60 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81130ec0:	e0bffc03 	ldbu	r2,-16(fp)
81130ec4:	10c38424 	muli	r3,r2,3600
81130ec8:	e0bffd03 	ldbu	r2,-12(fp)
81130ecc:	10800f24 	muli	r2,r2,60
81130ed0:	1887883a 	add	r3,r3,r2
81130ed4:	e0bffe03 	ldbu	r2,-8(fp)
81130ed8:	1885883a 	add	r2,r3,r2
81130edc:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81130ee0:	e0bfff0b 	ldhu	r2,-4(fp)
81130ee4:	10c0fa24 	muli	r3,r2,1000
81130ee8:	008418b4 	movhi	r2,4194
81130eec:	109374c4 	addi	r2,r2,19923
81130ef0:	188a383a 	mulxuu	r5,r3,r2
81130ef4:	1885383a 	mul	r2,r3,r2
81130ef8:	1011883a 	mov	r8,r2
81130efc:	2813883a 	mov	r9,r5
81130f00:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81130f04:	2085883a 	add	r2,r4,r2
81130f08:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81130f0c:	e0bffb17 	ldw	r2,-20(fp)
81130f10:	1004d43a 	srli	r2,r2,16
81130f14:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81130f18:	e0bffb17 	ldw	r2,-20(fp)
81130f1c:	10bfffcc 	andi	r2,r2,65535
81130f20:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81130f24:	e0bffb17 	ldw	r2,-20(fp)
81130f28:	10bfffcc 	andi	r2,r2,65535
81130f2c:	1009883a 	mov	r4,r2
81130f30:	1130d040 	call	81130d04 <OSTimeDly>
    while (loops > 0) {
81130f34:	00000706 	br	81130f54 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
81130f38:	01200014 	movui	r4,32768
81130f3c:	1130d040 	call	81130d04 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
81130f40:	01200014 	movui	r4,32768
81130f44:	1130d040 	call	81130d04 <OSTimeDly>
        loops--;
81130f48:	e0bffa0b 	ldhu	r2,-24(fp)
81130f4c:	10bfffc4 	addi	r2,r2,-1
81130f50:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81130f54:	e0bffa0b 	ldhu	r2,-24(fp)
81130f58:	103ff71e 	bne	r2,zero,81130f38 <__reset+0xfb110f38>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81130f5c:	0005883a 	mov	r2,zero
}
81130f60:	e037883a 	mov	sp,fp
81130f64:	dfc00117 	ldw	ra,4(sp)
81130f68:	df000017 	ldw	fp,0(sp)
81130f6c:	dec00204 	addi	sp,sp,8
81130f70:	f800283a 	ret

81130f74 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81130f74:	defff504 	addi	sp,sp,-44
81130f78:	de00012e 	bgeu	sp,et,81130f80 <OSTimeDlyResume+0xc>
81130f7c:	003b68fa 	trap	3
81130f80:	dfc00a15 	stw	ra,40(sp)
81130f84:	df000915 	stw	fp,36(sp)
81130f88:	df000904 	addi	fp,sp,36
81130f8c:	2005883a 	mov	r2,r4
81130f90:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130f94:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81130f98:	e0bfff03 	ldbu	r2,-4(fp)
81130f9c:	10800a30 	cmpltui	r2,r2,40
81130fa0:	1000021e 	bne	r2,zero,81130fac <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81130fa4:	00800a84 	movi	r2,42
81130fa8:	00006406 	br	8113113c <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130fac:	0005303a 	rdctl	r2,status
81130fb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130fb4:	e0fffe17 	ldw	r3,-8(fp)
81130fb8:	00bfff84 	movi	r2,-2
81130fbc:	1884703a 	and	r2,r3,r2
81130fc0:	1001703a 	wrctl	status,r2
  
  return context;
81130fc4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81130fc8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
81130fcc:	e0ffff03 	ldbu	r3,-4(fp)
81130fd0:	00a04574 	movhi	r2,33045
81130fd4:	10908604 	addi	r2,r2,16920
81130fd8:	18c7883a 	add	r3,r3,r3
81130fdc:	18c7883a 	add	r3,r3,r3
81130fe0:	10c5883a 	add	r2,r2,r3
81130fe4:	10800017 	ldw	r2,0(r2)
81130fe8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
81130fec:	e0bff917 	ldw	r2,-28(fp)
81130ff0:	1000061e 	bne	r2,zero,8113100c <OSTimeDlyResume+0x98>
81130ff4:	e0bff717 	ldw	r2,-36(fp)
81130ff8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130ffc:	e0bff817 	ldw	r2,-32(fp)
81131000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81131004:	008010c4 	movi	r2,67
81131008:	00004c06 	br	8113113c <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8113100c:	e0bff917 	ldw	r2,-28(fp)
81131010:	10800058 	cmpnei	r2,r2,1
81131014:	1000061e 	bne	r2,zero,81131030 <OSTimeDlyResume+0xbc>
81131018:	e0bff717 	ldw	r2,-36(fp)
8113101c:	e0bffa15 	stw	r2,-24(fp)
81131020:	e0bffa17 	ldw	r2,-24(fp)
81131024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81131028:	008010c4 	movi	r2,67
8113102c:	00004306 	br	8113113c <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
81131030:	e0bff917 	ldw	r2,-28(fp)
81131034:	10800b8b 	ldhu	r2,46(r2)
81131038:	10bfffcc 	andi	r2,r2,65535
8113103c:	1000061e 	bne	r2,zero,81131058 <OSTimeDlyResume+0xe4>
81131040:	e0bff717 	ldw	r2,-36(fp)
81131044:	e0bffb15 	stw	r2,-20(fp)
81131048:	e0bffb17 	ldw	r2,-20(fp)
8113104c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
81131050:	00801404 	movi	r2,80
81131054:	00003906 	br	8113113c <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81131058:	e0bff917 	ldw	r2,-28(fp)
8113105c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81131060:	e0bff917 	ldw	r2,-28(fp)
81131064:	10800c03 	ldbu	r2,48(r2)
81131068:	10803fcc 	andi	r2,r2,255
8113106c:	10800dcc 	andi	r2,r2,55
81131070:	10000b26 	beq	r2,zero,811310a0 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81131074:	e0bff917 	ldw	r2,-28(fp)
81131078:	10c00c03 	ldbu	r3,48(r2)
8113107c:	00bff204 	movi	r2,-56
81131080:	1884703a 	and	r2,r3,r2
81131084:	1007883a 	mov	r3,r2
81131088:	e0bff917 	ldw	r2,-28(fp)
8113108c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
81131090:	e0bff917 	ldw	r2,-28(fp)
81131094:	00c00044 	movi	r3,1
81131098:	10c00c45 	stb	r3,49(r2)
8113109c:	00000206 	br	811310a8 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
811310a0:	e0bff917 	ldw	r2,-28(fp)
811310a4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
811310a8:	e0bff917 	ldw	r2,-28(fp)
811310ac:	10800c03 	ldbu	r2,48(r2)
811310b0:	10803fcc 	andi	r2,r2,255
811310b4:	1080020c 	andi	r2,r2,8
811310b8:	10001b1e 	bne	r2,zero,81131128 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
811310bc:	e0bff917 	ldw	r2,-28(fp)
811310c0:	10c00d83 	ldbu	r3,54(r2)
811310c4:	d0a08103 	ldbu	r2,-32252(gp)
811310c8:	1884b03a 	or	r2,r3,r2
811310cc:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811310d0:	e0bff917 	ldw	r2,-28(fp)
811310d4:	10800d03 	ldbu	r2,52(r2)
811310d8:	10c03fcc 	andi	r3,r2,255
811310dc:	e0bff917 	ldw	r2,-28(fp)
811310e0:	10800d03 	ldbu	r2,52(r2)
811310e4:	11003fcc 	andi	r4,r2,255
811310e8:	d0a08144 	addi	r2,gp,-32251
811310ec:	2085883a 	add	r2,r4,r2
811310f0:	11000003 	ldbu	r4,0(r2)
811310f4:	e0bff917 	ldw	r2,-28(fp)
811310f8:	10800d43 	ldbu	r2,53(r2)
811310fc:	2084b03a 	or	r2,r4,r2
81131100:	1009883a 	mov	r4,r2
81131104:	d0a08144 	addi	r2,gp,-32251
81131108:	1885883a 	add	r2,r3,r2
8113110c:	11000005 	stb	r4,0(r2)
81131110:	e0bff717 	ldw	r2,-36(fp)
81131114:	e0bffc15 	stw	r2,-16(fp)
81131118:	e0bffc17 	ldw	r2,-16(fp)
8113111c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
81131120:	1129fc80 	call	81129fc8 <OS_Sched>
81131124:	00000406 	br	81131138 <OSTimeDlyResume+0x1c4>
81131128:	e0bff717 	ldw	r2,-36(fp)
8113112c:	e0bffd15 	stw	r2,-12(fp)
81131130:	e0bffd17 	ldw	r2,-12(fp)
81131134:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81131138:	0005883a 	mov	r2,zero
}
8113113c:	e037883a 	mov	sp,fp
81131140:	dfc00117 	ldw	ra,4(sp)
81131144:	df000017 	ldw	fp,0(sp)
81131148:	dec00204 	addi	sp,sp,8
8113114c:	f800283a 	ret

81131150 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
81131150:	defffb04 	addi	sp,sp,-20
81131154:	de00012e 	bgeu	sp,et,8113115c <OSTimeGet+0xc>
81131158:	003b68fa 	trap	3
8113115c:	df000415 	stw	fp,16(sp)
81131160:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131164:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131168:	0005303a 	rdctl	r2,status
8113116c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131170:	e0fffe17 	ldw	r3,-8(fp)
81131174:	00bfff84 	movi	r2,-2
81131178:	1884703a 	and	r2,r3,r2
8113117c:	1001703a 	wrctl	status,r2
  
  return context;
81131180:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81131184:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81131188:	d0a08717 	ldw	r2,-32228(gp)
8113118c:	e0bffd15 	stw	r2,-12(fp)
81131190:	e0bffc17 	ldw	r2,-16(fp)
81131194:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131198:	e0bfff17 	ldw	r2,-4(fp)
8113119c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
811311a0:	e0bffd17 	ldw	r2,-12(fp)
}
811311a4:	e037883a 	mov	sp,fp
811311a8:	df000017 	ldw	fp,0(sp)
811311ac:	dec00104 	addi	sp,sp,4
811311b0:	f800283a 	ret

811311b4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
811311b4:	defffb04 	addi	sp,sp,-20
811311b8:	de00012e 	bgeu	sp,et,811311c0 <OSTimeSet+0xc>
811311bc:	003b68fa 	trap	3
811311c0:	df000415 	stw	fp,16(sp)
811311c4:	df000404 	addi	fp,sp,16
811311c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811311cc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811311d0:	0005303a 	rdctl	r2,status
811311d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811311d8:	e0fffd17 	ldw	r3,-12(fp)
811311dc:	00bfff84 	movi	r2,-2
811311e0:	1884703a 	and	r2,r3,r2
811311e4:	1001703a 	wrctl	status,r2
  
  return context;
811311e8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
811311ec:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
811311f0:	e0bfff17 	ldw	r2,-4(fp)
811311f4:	d0a08715 	stw	r2,-32228(gp)
811311f8:	e0bffc17 	ldw	r2,-16(fp)
811311fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131200:	e0bffe17 	ldw	r2,-8(fp)
81131204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81131208:	0001883a 	nop
8113120c:	e037883a 	mov	sp,fp
81131210:	df000017 	ldw	fp,0(sp)
81131214:	dec00104 	addi	sp,sp,4
81131218:	f800283a 	ret

8113121c <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
8113121c:	defff804 	addi	sp,sp,-32
81131220:	de00012e 	bgeu	sp,et,81131228 <OSTmrCreate+0xc>
81131224:	003b68fa 	trap	3
81131228:	dfc00715 	stw	ra,28(sp)
8113122c:	df000615 	stw	fp,24(sp)
81131230:	df000604 	addi	fp,sp,24
81131234:	e13ffc15 	stw	r4,-16(fp)
81131238:	e17ffd15 	stw	r5,-12(fp)
8113123c:	3005883a 	mov	r2,r6
81131240:	e1ffff15 	stw	r7,-4(fp)
81131244:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81131248:	e0800417 	ldw	r2,16(fp)
8113124c:	1000021e 	bne	r2,zero,81131258 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
81131250:	0005883a 	mov	r2,zero
81131254:	00005d06 	br	811313cc <OSTmrCreate+0x1b0>
    }
    switch (opt) {
81131258:	e0bffe03 	ldbu	r2,-8(fp)
8113125c:	10c00060 	cmpeqi	r3,r2,1
81131260:	1800091e 	bne	r3,zero,81131288 <OSTmrCreate+0x6c>
81131264:	108000a0 	cmpeqi	r2,r2,2
81131268:	10000e26 	beq	r2,zero,811312a4 <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
8113126c:	e0bffd17 	ldw	r2,-12(fp)
81131270:	1000111e 	bne	r2,zero,811312b8 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
81131274:	e0800417 	ldw	r2,16(fp)
81131278:	00ffe0c4 	movi	r3,-125
8113127c:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81131280:	0005883a 	mov	r2,zero
81131284:	00005106 	br	811313cc <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
81131288:	e0bffc17 	ldw	r2,-16(fp)
8113128c:	10000c1e 	bne	r2,zero,811312c0 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
81131290:	e0800417 	ldw	r2,16(fp)
81131294:	00ffe084 	movi	r3,-126
81131298:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8113129c:	0005883a 	mov	r2,zero
811312a0:	00004a06 	br	811313cc <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
811312a4:	e0800417 	ldw	r2,16(fp)
811312a8:	00ffe104 	movi	r3,-124
811312ac:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
811312b0:	0005883a 	mov	r2,zero
811312b4:	00004506 	br	811313cc <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
811312b8:	0001883a 	nop
811312bc:	00000106 	br	811312c4 <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
811312c0:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
811312c4:	d0a08403 	ldbu	r2,-32240(gp)
811312c8:	10803fcc 	andi	r2,r2,255
811312cc:	10000526 	beq	r2,zero,811312e4 <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
811312d0:	e0800417 	ldw	r2,16(fp)
811312d4:	00ffe2c4 	movi	r3,-117
811312d8:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
811312dc:	0005883a 	mov	r2,zero
811312e0:	00003a06 	br	811313cc <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
811312e4:	11321d40 	call	811321d4 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
811312e8:	1131c740 	call	81131c74 <OSTmr_Alloc>
811312ec:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
811312f0:	e0bffa17 	ldw	r2,-24(fp)
811312f4:	1000061e 	bne	r2,zero,81131310 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
811312f8:	11322180 	call	81132218 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
811312fc:	e0800417 	ldw	r2,16(fp)
81131300:	00ffe184 	movi	r3,-122
81131304:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81131308:	0005883a 	mov	r2,zero
8113130c:	00002f06 	br	811313cc <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
81131310:	e0bffa17 	ldw	r2,-24(fp)
81131314:	00c00044 	movi	r3,1
81131318:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
8113131c:	e0bffa17 	ldw	r2,-24(fp)
81131320:	e0fffc17 	ldw	r3,-16(fp)
81131324:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81131328:	e0bffa17 	ldw	r2,-24(fp)
8113132c:	e0fffd17 	ldw	r3,-12(fp)
81131330:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
81131334:	e0bffa17 	ldw	r2,-24(fp)
81131338:	e0fffe03 	ldbu	r3,-8(fp)
8113133c:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
81131340:	e0bffa17 	ldw	r2,-24(fp)
81131344:	e0ffff17 	ldw	r3,-4(fp)
81131348:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
8113134c:	e0bffa17 	ldw	r2,-24(fp)
81131350:	e0c00217 	ldw	r3,8(fp)
81131354:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
81131358:	e0800317 	ldw	r2,12(fp)
8113135c:	10001726 	beq	r2,zero,811313bc <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
81131360:	e1000317 	ldw	r4,12(fp)
81131364:	112a1980 	call	8112a198 <OS_StrLen>
81131368:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
8113136c:	e0bffb03 	ldbu	r2,-20(fp)
81131370:	10800428 	cmpgeui	r2,r2,16
81131374:	1000061e 	bne	r2,zero,81131390 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
81131378:	e0bffa17 	ldw	r2,-24(fp)
8113137c:	10800804 	addi	r2,r2,32
81131380:	e1400317 	ldw	r5,12(fp)
81131384:	1009883a 	mov	r4,r2
81131388:	112a11c0 	call	8112a11c <OS_StrCopy>
8113138c:	00000b06 	br	811313bc <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
81131390:	e0bffa17 	ldw	r2,-24(fp)
81131394:	00c008c4 	movi	r3,35
81131398:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
8113139c:	e0bffa17 	ldw	r2,-24(fp)
811313a0:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
811313a4:	e0800417 	ldw	r2,16(fp)
811313a8:	00ffe304 	movi	r3,-116
811313ac:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
811313b0:	11322180 	call	81132218 <OSTmr_Unlock>
            return (ptmr);
811313b4:	e0bffa17 	ldw	r2,-24(fp)
811313b8:	00000406 	br	811313cc <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
811313bc:	11322180 	call	81132218 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
811313c0:	e0800417 	ldw	r2,16(fp)
811313c4:	10000005 	stb	zero,0(r2)
    return (ptmr);
811313c8:	e0bffa17 	ldw	r2,-24(fp)
}
811313cc:	e037883a 	mov	sp,fp
811313d0:	dfc00117 	ldw	ra,4(sp)
811313d4:	df000017 	ldw	fp,0(sp)
811313d8:	dec00204 	addi	sp,sp,8
811313dc:	f800283a 	ret

811313e0 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
811313e0:	defffc04 	addi	sp,sp,-16
811313e4:	de00012e 	bgeu	sp,et,811313ec <OSTmrDel+0xc>
811313e8:	003b68fa 	trap	3
811313ec:	dfc00315 	stw	ra,12(sp)
811313f0:	df000215 	stw	fp,8(sp)
811313f4:	df000204 	addi	fp,sp,8
811313f8:	e13ffe15 	stw	r4,-8(fp)
811313fc:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81131400:	e0bfff17 	ldw	r2,-4(fp)
81131404:	1000021e 	bne	r2,zero,81131410 <OSTmrDel+0x30>
        return (OS_FALSE);
81131408:	0005883a 	mov	r2,zero
8113140c:	00003f06 	br	8113150c <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81131410:	e0bffe17 	ldw	r2,-8(fp)
81131414:	1000051e 	bne	r2,zero,8113142c <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131418:	e0bfff17 	ldw	r2,-4(fp)
8113141c:	00ffe284 	movi	r3,-118
81131420:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131424:	0005883a 	mov	r2,zero
81131428:	00003806 	br	8113150c <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8113142c:	e0bffe17 	ldw	r2,-8(fp)
81131430:	10800003 	ldbu	r2,0(r2)
81131434:	10803fcc 	andi	r2,r2,255
81131438:	10801920 	cmpeqi	r2,r2,100
8113143c:	1000051e 	bne	r2,zero,81131454 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131440:	e0bfff17 	ldw	r2,-4(fp)
81131444:	00ffe244 	movi	r3,-119
81131448:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113144c:	0005883a 	mov	r2,zero
81131450:	00002e06 	br	8113150c <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81131454:	d0a08403 	ldbu	r2,-32240(gp)
81131458:	10803fcc 	andi	r2,r2,255
8113145c:	10000526 	beq	r2,zero,81131474 <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
81131460:	e0bfff17 	ldw	r2,-4(fp)
81131464:	00ffe2c4 	movi	r3,-117
81131468:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113146c:	0005883a 	mov	r2,zero
81131470:	00002606 	br	8113150c <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
81131474:	11321d40 	call	811321d4 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81131478:	e0bffe17 	ldw	r2,-8(fp)
8113147c:	10800c43 	ldbu	r2,49(r2)
81131480:	10803fcc 	andi	r2,r2,255
81131484:	10c000c8 	cmpgei	r3,r2,3
81131488:	1800031e 	bne	r3,zero,81131498 <OSTmrDel+0xb8>
8113148c:	00800d16 	blt	zero,r2,811314c4 <OSTmrDel+0xe4>
81131490:	10001326 	beq	r2,zero,811314e0 <OSTmrDel+0x100>
81131494:	00001806 	br	811314f8 <OSTmrDel+0x118>
81131498:	108000e0 	cmpeqi	r2,r2,3
8113149c:	10001626 	beq	r2,zero,811314f8 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
811314a0:	e13ffe17 	ldw	r4,-8(fp)
811314a4:	11320d80 	call	811320d8 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811314a8:	e13ffe17 	ldw	r4,-8(fp)
811314ac:	1131ce80 	call	81131ce8 <OSTmr_Free>
             OSTmr_Unlock();
811314b0:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811314b4:	e0bfff17 	ldw	r2,-4(fp)
811314b8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811314bc:	00800044 	movi	r2,1
811314c0:	00001206 	br	8113150c <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811314c4:	e13ffe17 	ldw	r4,-8(fp)
811314c8:	1131ce80 	call	81131ce8 <OSTmr_Free>
             OSTmr_Unlock();
811314cc:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811314d0:	e0bfff17 	ldw	r2,-4(fp)
811314d4:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811314d8:	00800044 	movi	r2,1
811314dc:	00000b06 	br	8113150c <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
811314e0:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811314e4:	e0bfff17 	ldw	r2,-4(fp)
811314e8:	00ffe1c4 	movi	r3,-121
811314ec:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811314f0:	0005883a 	mov	r2,zero
811314f4:	00000506 	br	8113150c <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
811314f8:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811314fc:	e0bfff17 	ldw	r2,-4(fp)
81131500:	00ffe344 	movi	r3,-115
81131504:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131508:	0005883a 	mov	r2,zero
    }
}
8113150c:	e037883a 	mov	sp,fp
81131510:	dfc00117 	ldw	ra,4(sp)
81131514:	df000017 	ldw	fp,0(sp)
81131518:	dec00204 	addi	sp,sp,8
8113151c:	f800283a 	ret

81131520 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
81131520:	defffa04 	addi	sp,sp,-24
81131524:	de00012e 	bgeu	sp,et,8113152c <OSTmrNameGet+0xc>
81131528:	003b68fa 	trap	3
8113152c:	dfc00515 	stw	ra,20(sp)
81131530:	df000415 	stw	fp,16(sp)
81131534:	df000404 	addi	fp,sp,16
81131538:	e13ffd15 	stw	r4,-12(fp)
8113153c:	e17ffe15 	stw	r5,-8(fp)
81131540:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81131544:	e0bfff17 	ldw	r2,-4(fp)
81131548:	1000021e 	bne	r2,zero,81131554 <OSTmrNameGet+0x34>
        return (0);
8113154c:	0005883a 	mov	r2,zero
81131550:	00003e06 	br	8113164c <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
81131554:	e0bffe17 	ldw	r2,-8(fp)
81131558:	1000051e 	bne	r2,zero,81131570 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
8113155c:	e0bfff17 	ldw	r2,-4(fp)
81131560:	00ffe204 	movi	r3,-120
81131564:	10c00005 	stb	r3,0(r2)
        return (0);
81131568:	0005883a 	mov	r2,zero
8113156c:	00003706 	br	8113164c <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81131570:	e0bffd17 	ldw	r2,-12(fp)
81131574:	1000051e 	bne	r2,zero,8113158c <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
81131578:	e0bfff17 	ldw	r2,-4(fp)
8113157c:	00ffe284 	movi	r3,-118
81131580:	10c00005 	stb	r3,0(r2)
        return (0);
81131584:	0005883a 	mov	r2,zero
81131588:	00003006 	br	8113164c <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8113158c:	e0bffd17 	ldw	r2,-12(fp)
81131590:	10800003 	ldbu	r2,0(r2)
81131594:	10803fcc 	andi	r2,r2,255
81131598:	10801920 	cmpeqi	r2,r2,100
8113159c:	1000051e 	bne	r2,zero,811315b4 <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811315a0:	e0bfff17 	ldw	r2,-4(fp)
811315a4:	00ffe244 	movi	r3,-119
811315a8:	10c00005 	stb	r3,0(r2)
        return (0);
811315ac:	0005883a 	mov	r2,zero
811315b0:	00002606 	br	8113164c <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811315b4:	d0a08403 	ldbu	r2,-32240(gp)
811315b8:	10803fcc 	andi	r2,r2,255
811315bc:	10000526 	beq	r2,zero,811315d4 <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
811315c0:	e0bfff17 	ldw	r2,-4(fp)
811315c4:	00c00444 	movi	r3,17
811315c8:	10c00005 	stb	r3,0(r2)
        return (0);
811315cc:	0005883a 	mov	r2,zero
811315d0:	00001e06 	br	8113164c <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
811315d4:	11321d40 	call	811321d4 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811315d8:	e0bffd17 	ldw	r2,-12(fp)
811315dc:	10800c43 	ldbu	r2,49(r2)
811315e0:	10803fcc 	andi	r2,r2,255
811315e4:	10000e26 	beq	r2,zero,81131620 <OSTmrNameGet+0x100>
811315e8:	10001316 	blt	r2,zero,81131638 <OSTmrNameGet+0x118>
811315ec:	10800108 	cmpgei	r2,r2,4
811315f0:	1000111e 	bne	r2,zero,81131638 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
811315f4:	e0bffd17 	ldw	r2,-12(fp)
811315f8:	10800804 	addi	r2,r2,32
811315fc:	100b883a 	mov	r5,r2
81131600:	e13ffe17 	ldw	r4,-8(fp)
81131604:	112a11c0 	call	8112a11c <OS_StrCopy>
81131608:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
8113160c:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	10000005 	stb	zero,0(r2)
             return (len);
81131618:	e0bffc03 	ldbu	r2,-16(fp)
8113161c:	00000b06 	br	8113164c <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
81131620:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131624:	e0bfff17 	ldw	r2,-4(fp)
81131628:	00ffe1c4 	movi	r3,-121
8113162c:	10c00005 	stb	r3,0(r2)
             return (0);
81131630:	0005883a 	mov	r2,zero
81131634:	00000506 	br	8113164c <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81131638:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8113163c:	e0bfff17 	ldw	r2,-4(fp)
81131640:	00ffe344 	movi	r3,-115
81131644:	10c00005 	stb	r3,0(r2)
             return (0);
81131648:	0005883a 	mov	r2,zero
    }
}
8113164c:	e037883a 	mov	sp,fp
81131650:	dfc00117 	ldw	ra,4(sp)
81131654:	df000017 	ldw	fp,0(sp)
81131658:	dec00204 	addi	sp,sp,8
8113165c:	f800283a 	ret

81131660 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
81131660:	defffb04 	addi	sp,sp,-20
81131664:	de00012e 	bgeu	sp,et,8113166c <OSTmrRemainGet+0xc>
81131668:	003b68fa 	trap	3
8113166c:	dfc00415 	stw	ra,16(sp)
81131670:	df000315 	stw	fp,12(sp)
81131674:	df000304 	addi	fp,sp,12
81131678:	e13ffe15 	stw	r4,-8(fp)
8113167c:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81131680:	e0bfff17 	ldw	r2,-4(fp)
81131684:	1000021e 	bne	r2,zero,81131690 <OSTmrRemainGet+0x30>
        return (0);
81131688:	0005883a 	mov	r2,zero
8113168c:	00005d06 	br	81131804 <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
81131690:	e0bffe17 	ldw	r2,-8(fp)
81131694:	1000051e 	bne	r2,zero,811316ac <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131698:	e0bfff17 	ldw	r2,-4(fp)
8113169c:	00ffe284 	movi	r3,-118
811316a0:	10c00005 	stb	r3,0(r2)
        return (0);
811316a4:	0005883a 	mov	r2,zero
811316a8:	00005606 	br	81131804 <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811316ac:	e0bffe17 	ldw	r2,-8(fp)
811316b0:	10800003 	ldbu	r2,0(r2)
811316b4:	10803fcc 	andi	r2,r2,255
811316b8:	10801920 	cmpeqi	r2,r2,100
811316bc:	1000051e 	bne	r2,zero,811316d4 <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811316c0:	e0bfff17 	ldw	r2,-4(fp)
811316c4:	00ffe244 	movi	r3,-119
811316c8:	10c00005 	stb	r3,0(r2)
        return (0);
811316cc:	0005883a 	mov	r2,zero
811316d0:	00004c06 	br	81131804 <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811316d4:	d0a08403 	ldbu	r2,-32240(gp)
811316d8:	10803fcc 	andi	r2,r2,255
811316dc:	10000526 	beq	r2,zero,811316f4 <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
811316e0:	e0bfff17 	ldw	r2,-4(fp)
811316e4:	00ffe2c4 	movi	r3,-117
811316e8:	10c00005 	stb	r3,0(r2)
        return (0);
811316ec:	0005883a 	mov	r2,zero
811316f0:	00004406 	br	81131804 <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
811316f4:	11321d40 	call	811321d4 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811316f8:	e0bffe17 	ldw	r2,-8(fp)
811316fc:	10800c43 	ldbu	r2,49(r2)
81131700:	10803fcc 	andi	r2,r2,255
81131704:	10c00060 	cmpeqi	r3,r2,1
81131708:	1800121e 	bne	r3,zero,81131754 <OSTmrRemainGet+0xf4>
8113170c:	10c00088 	cmpgei	r3,r2,2
81131710:	1800021e 	bne	r3,zero,8113171c <OSTmrRemainGet+0xbc>
81131714:	10003026 	beq	r2,zero,811317d8 <OSTmrRemainGet+0x178>
81131718:	00003506 	br	811317f0 <OSTmrRemainGet+0x190>
8113171c:	10c000a0 	cmpeqi	r3,r2,2
81131720:	1800281e 	bne	r3,zero,811317c4 <OSTmrRemainGet+0x164>
81131724:	108000e0 	cmpeqi	r2,r2,3
81131728:	10003126 	beq	r2,zero,811317f0 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
8113172c:	e0bffe17 	ldw	r2,-8(fp)
81131730:	10c00517 	ldw	r3,20(r2)
81131734:	d0a08617 	ldw	r2,-32232(gp)
81131738:	1885c83a 	sub	r2,r3,r2
8113173c:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
81131740:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
81131744:	e0bfff17 	ldw	r2,-4(fp)
81131748:	10000005 	stb	zero,0(r2)
             return (remain);
8113174c:	e0bffd17 	ldw	r2,-12(fp)
81131750:	00002c06 	br	81131804 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
81131754:	e0bffe17 	ldw	r2,-8(fp)
81131758:	10800c03 	ldbu	r2,48(r2)
8113175c:	10803fcc 	andi	r2,r2,255
81131760:	108000a0 	cmpeqi	r2,r2,2
81131764:	10000e26 	beq	r2,zero,811317a0 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
81131768:	e0bffe17 	ldw	r2,-8(fp)
8113176c:	10800617 	ldw	r2,24(r2)
81131770:	1000041e 	bne	r2,zero,81131784 <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
81131774:	e0bffe17 	ldw	r2,-8(fp)
81131778:	10800717 	ldw	r2,28(r2)
8113177c:	e0bffd15 	stw	r2,-12(fp)
81131780:	00000306 	br	81131790 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
81131784:	e0bffe17 	ldw	r2,-8(fp)
81131788:	10800617 	ldw	r2,24(r2)
8113178c:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
81131790:	11322180 	call	81132218 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81131794:	e0bfff17 	ldw	r2,-4(fp)
81131798:	10000005 	stb	zero,0(r2)
                      break;
8113179c:	00000706 	br	811317bc <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
811317a0:	e0bffe17 	ldw	r2,-8(fp)
811317a4:	10800617 	ldw	r2,24(r2)
811317a8:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
811317ac:	11322180 	call	81132218 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
811317b0:	e0bfff17 	ldw	r2,-4(fp)
811317b4:	10000005 	stb	zero,0(r2)
                      break;
811317b8:	0001883a 	nop
             }
             return (remain);
811317bc:	e0bffd17 	ldw	r2,-12(fp)
811317c0:	00001006 	br	81131804 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
811317c4:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811317c8:	e0bfff17 	ldw	r2,-4(fp)
811317cc:	10000005 	stb	zero,0(r2)
             return (0);
811317d0:	0005883a 	mov	r2,zero
811317d4:	00000b06 	br	81131804 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
811317d8:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811317dc:	e0bfff17 	ldw	r2,-4(fp)
811317e0:	00ffe1c4 	movi	r3,-121
811317e4:	10c00005 	stb	r3,0(r2)
             return (0);
811317e8:	0005883a 	mov	r2,zero
811317ec:	00000506 	br	81131804 <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
811317f0:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811317f4:	e0bfff17 	ldw	r2,-4(fp)
811317f8:	00ffe344 	movi	r3,-115
811317fc:	10c00005 	stb	r3,0(r2)
             return (0);
81131800:	0005883a 	mov	r2,zero
    }
}
81131804:	e037883a 	mov	sp,fp
81131808:	dfc00117 	ldw	ra,4(sp)
8113180c:	df000017 	ldw	fp,0(sp)
81131810:	dec00204 	addi	sp,sp,8
81131814:	f800283a 	ret

81131818 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
81131818:	defffb04 	addi	sp,sp,-20
8113181c:	de00012e 	bgeu	sp,et,81131824 <OSTmrStateGet+0xc>
81131820:	003b68fa 	trap	3
81131824:	dfc00415 	stw	ra,16(sp)
81131828:	df000315 	stw	fp,12(sp)
8113182c:	df000304 	addi	fp,sp,12
81131830:	e13ffe15 	stw	r4,-8(fp)
81131834:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81131838:	e0bfff17 	ldw	r2,-4(fp)
8113183c:	1000021e 	bne	r2,zero,81131848 <OSTmrStateGet+0x30>
        return (0);
81131840:	0005883a 	mov	r2,zero
81131844:	00002a06 	br	811318f0 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
81131848:	e0bffe17 	ldw	r2,-8(fp)
8113184c:	1000051e 	bne	r2,zero,81131864 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131850:	e0bfff17 	ldw	r2,-4(fp)
81131854:	00ffe284 	movi	r3,-118
81131858:	10c00005 	stb	r3,0(r2)
        return (0);
8113185c:	0005883a 	mov	r2,zero
81131860:	00002306 	br	811318f0 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81131864:	e0bffe17 	ldw	r2,-8(fp)
81131868:	10800003 	ldbu	r2,0(r2)
8113186c:	10803fcc 	andi	r2,r2,255
81131870:	10801920 	cmpeqi	r2,r2,100
81131874:	1000051e 	bne	r2,zero,8113188c <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131878:	e0bfff17 	ldw	r2,-4(fp)
8113187c:	00ffe244 	movi	r3,-119
81131880:	10c00005 	stb	r3,0(r2)
        return (0);
81131884:	0005883a 	mov	r2,zero
81131888:	00001906 	br	811318f0 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8113188c:	d0a08403 	ldbu	r2,-32240(gp)
81131890:	10803fcc 	andi	r2,r2,255
81131894:	10000526 	beq	r2,zero,811318ac <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81131898:	e0bfff17 	ldw	r2,-4(fp)
8113189c:	00ffe2c4 	movi	r3,-117
811318a0:	10c00005 	stb	r3,0(r2)
        return (0);
811318a4:	0005883a 	mov	r2,zero
811318a8:	00001106 	br	811318f0 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
811318ac:	11321d40 	call	811321d4 <OSTmr_Lock>
    state = ptmr->OSTmrState;
811318b0:	e0bffe17 	ldw	r2,-8(fp)
811318b4:	10800c43 	ldbu	r2,49(r2)
811318b8:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
811318bc:	e0bffd03 	ldbu	r2,-12(fp)
811318c0:	1005883a 	mov	r2,r2
811318c4:	10800128 	cmpgeui	r2,r2,4
811318c8:	1000031e 	bne	r2,zero,811318d8 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
811318cc:	e0bfff17 	ldw	r2,-4(fp)
811318d0:	10000005 	stb	zero,0(r2)
             break;
811318d4:	00000406 	br	811318e8 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
811318d8:	e0bfff17 	ldw	r2,-4(fp)
811318dc:	00ffe344 	movi	r3,-115
811318e0:	10c00005 	stb	r3,0(r2)
             break;
811318e4:	0001883a 	nop
    }
    OSTmr_Unlock();
811318e8:	11322180 	call	81132218 <OSTmr_Unlock>
    return (state);
811318ec:	e0bffd03 	ldbu	r2,-12(fp)
}
811318f0:	e037883a 	mov	sp,fp
811318f4:	dfc00117 	ldw	ra,4(sp)
811318f8:	df000017 	ldw	fp,0(sp)
811318fc:	dec00204 	addi	sp,sp,8
81131900:	f800283a 	ret

81131904 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
81131904:	defffc04 	addi	sp,sp,-16
81131908:	de00012e 	bgeu	sp,et,81131910 <OSTmrStart+0xc>
8113190c:	003b68fa 	trap	3
81131910:	dfc00315 	stw	ra,12(sp)
81131914:	df000215 	stw	fp,8(sp)
81131918:	df000204 	addi	fp,sp,8
8113191c:	e13ffe15 	stw	r4,-8(fp)
81131920:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81131924:	e0bfff17 	ldw	r2,-4(fp)
81131928:	1000021e 	bne	r2,zero,81131934 <OSTmrStart+0x30>
        return (OS_FALSE);
8113192c:	0005883a 	mov	r2,zero
81131930:	00004106 	br	81131a38 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
81131934:	e0bffe17 	ldw	r2,-8(fp)
81131938:	1000051e 	bne	r2,zero,81131950 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8113193c:	e0bfff17 	ldw	r2,-4(fp)
81131940:	00ffe284 	movi	r3,-118
81131944:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131948:	0005883a 	mov	r2,zero
8113194c:	00003a06 	br	81131a38 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81131950:	e0bffe17 	ldw	r2,-8(fp)
81131954:	10800003 	ldbu	r2,0(r2)
81131958:	10803fcc 	andi	r2,r2,255
8113195c:	10801920 	cmpeqi	r2,r2,100
81131960:	1000051e 	bne	r2,zero,81131978 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131964:	e0bfff17 	ldw	r2,-4(fp)
81131968:	00ffe244 	movi	r3,-119
8113196c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131970:	0005883a 	mov	r2,zero
81131974:	00003006 	br	81131a38 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81131978:	d0a08403 	ldbu	r2,-32240(gp)
8113197c:	10803fcc 	andi	r2,r2,255
81131980:	10000526 	beq	r2,zero,81131998 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
81131984:	e0bfff17 	ldw	r2,-4(fp)
81131988:	00ffe2c4 	movi	r3,-117
8113198c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131990:	0005883a 	mov	r2,zero
81131994:	00002806 	br	81131a38 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
81131998:	11321d40 	call	811321d4 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8113199c:	e0bffe17 	ldw	r2,-8(fp)
811319a0:	10800c43 	ldbu	r2,49(r2)
811319a4:	10803fcc 	andi	r2,r2,255
811319a8:	10c000c8 	cmpgei	r3,r2,3
811319ac:	1800031e 	bne	r3,zero,811319bc <OSTmrStart+0xb8>
811319b0:	00800e16 	blt	zero,r2,811319ec <OSTmrStart+0xe8>
811319b4:	10001526 	beq	r2,zero,81131a0c <OSTmrStart+0x108>
811319b8:	00001a06 	br	81131a24 <OSTmrStart+0x120>
811319bc:	108000e0 	cmpeqi	r2,r2,3
811319c0:	10001826 	beq	r2,zero,81131a24 <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
811319c4:	e13ffe17 	ldw	r4,-8(fp)
811319c8:	11320d80 	call	811320d8 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
811319cc:	000b883a 	mov	r5,zero
811319d0:	e13ffe17 	ldw	r4,-8(fp)
811319d4:	1131f880 	call	81131f88 <OSTmr_Link>
             OSTmr_Unlock();
811319d8:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811319dc:	e0bfff17 	ldw	r2,-4(fp)
811319e0:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811319e4:	00800044 	movi	r2,1
811319e8:	00001306 	br	81131a38 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
811319ec:	000b883a 	mov	r5,zero
811319f0:	e13ffe17 	ldw	r4,-8(fp)
811319f4:	1131f880 	call	81131f88 <OSTmr_Link>
             OSTmr_Unlock();
811319f8:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811319fc:	e0bfff17 	ldw	r2,-4(fp)
81131a00:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81131a04:	00800044 	movi	r2,1
81131a08:	00000b06 	br	81131a38 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
81131a0c:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131a10:	e0bfff17 	ldw	r2,-4(fp)
81131a14:	00ffe1c4 	movi	r3,-121
81131a18:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131a1c:	0005883a 	mov	r2,zero
81131a20:	00000506 	br	81131a38 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
81131a24:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131a28:	e0bfff17 	ldw	r2,-4(fp)
81131a2c:	00ffe344 	movi	r3,-115
81131a30:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131a34:	0005883a 	mov	r2,zero
    }
}
81131a38:	e037883a 	mov	sp,fp
81131a3c:	dfc00117 	ldw	ra,4(sp)
81131a40:	df000017 	ldw	fp,0(sp)
81131a44:	dec00204 	addi	sp,sp,8
81131a48:	f800283a 	ret

81131a4c <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
81131a4c:	defff904 	addi	sp,sp,-28
81131a50:	de00012e 	bgeu	sp,et,81131a58 <OSTmrStop+0xc>
81131a54:	003b68fa 	trap	3
81131a58:	dfc00615 	stw	ra,24(sp)
81131a5c:	df000515 	stw	fp,20(sp)
81131a60:	df000504 	addi	fp,sp,20
81131a64:	e13ffc15 	stw	r4,-16(fp)
81131a68:	2805883a 	mov	r2,r5
81131a6c:	e1bffe15 	stw	r6,-8(fp)
81131a70:	e1ffff15 	stw	r7,-4(fp)
81131a74:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
81131a78:	e0bfff17 	ldw	r2,-4(fp)
81131a7c:	1000021e 	bne	r2,zero,81131a88 <OSTmrStop+0x3c>
        return (OS_FALSE);
81131a80:	0005883a 	mov	r2,zero
81131a84:	00006606 	br	81131c20 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
81131a88:	e0bffc17 	ldw	r2,-16(fp)
81131a8c:	1000051e 	bne	r2,zero,81131aa4 <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
81131a90:	e0bfff17 	ldw	r2,-4(fp)
81131a94:	00ffe284 	movi	r3,-118
81131a98:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131a9c:	0005883a 	mov	r2,zero
81131aa0:	00005f06 	br	81131c20 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
81131aa4:	e0bffc17 	ldw	r2,-16(fp)
81131aa8:	10800003 	ldbu	r2,0(r2)
81131aac:	10803fcc 	andi	r2,r2,255
81131ab0:	10801920 	cmpeqi	r2,r2,100
81131ab4:	1000051e 	bne	r2,zero,81131acc <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131ab8:	e0bfff17 	ldw	r2,-4(fp)
81131abc:	00ffe244 	movi	r3,-119
81131ac0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131ac4:	0005883a 	mov	r2,zero
81131ac8:	00005506 	br	81131c20 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
81131acc:	d0a08403 	ldbu	r2,-32240(gp)
81131ad0:	10803fcc 	andi	r2,r2,255
81131ad4:	10000526 	beq	r2,zero,81131aec <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
81131ad8:	e0bfff17 	ldw	r2,-4(fp)
81131adc:	00ffe2c4 	movi	r3,-117
81131ae0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131ae4:	0005883a 	mov	r2,zero
81131ae8:	00004d06 	br	81131c20 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
81131aec:	11321d40 	call	811321d4 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81131af0:	e0bffc17 	ldw	r2,-16(fp)
81131af4:	10800c43 	ldbu	r2,49(r2)
81131af8:	10803fcc 	andi	r2,r2,255
81131afc:	10c000c8 	cmpgei	r3,r2,3
81131b00:	1800031e 	bne	r3,zero,81131b10 <OSTmrStop+0xc4>
81131b04:	00803516 	blt	zero,r2,81131bdc <OSTmrStop+0x190>
81131b08:	10003a26 	beq	r2,zero,81131bf4 <OSTmrStop+0x1a8>
81131b0c:	00003f06 	br	81131c0c <OSTmrStop+0x1c0>
81131b10:	108000e0 	cmpeqi	r2,r2,3
81131b14:	10003d26 	beq	r2,zero,81131c0c <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
81131b18:	e13ffc17 	ldw	r4,-16(fp)
81131b1c:	11320d80 	call	811320d8 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
81131b20:	e0bfff17 	ldw	r2,-4(fp)
81131b24:	10000005 	stb	zero,0(r2)
             switch (opt) {
81131b28:	e0bffd03 	ldbu	r2,-12(fp)
81131b2c:	10c000e0 	cmpeqi	r3,r2,3
81131b30:	1800041e 	bne	r3,zero,81131b44 <OSTmrStop+0xf8>
81131b34:	10c00120 	cmpeqi	r3,r2,4
81131b38:	1800121e 	bne	r3,zero,81131b84 <OSTmrStop+0x138>
81131b3c:	10002326 	beq	r2,zero,81131bcc <OSTmrStop+0x180>
81131b40:	00001e06 	br	81131bbc <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81131b44:	e0bffc17 	ldw	r2,-16(fp)
81131b48:	10800117 	ldw	r2,4(r2)
81131b4c:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81131b50:	e0bffb17 	ldw	r2,-20(fp)
81131b54:	10000726 	beq	r2,zero,81131b74 <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
81131b58:	e0bffc17 	ldw	r2,-16(fp)
81131b5c:	10c00217 	ldw	r3,8(r2)
81131b60:	e0bffb17 	ldw	r2,-20(fp)
81131b64:	180b883a 	mov	r5,r3
81131b68:	e13ffc17 	ldw	r4,-16(fp)
81131b6c:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81131b70:	00001706 	br	81131bd0 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81131b74:	e0bfff17 	ldw	r2,-4(fp)
81131b78:	00ffe3c4 	movi	r3,-113
81131b7c:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81131b80:	00001306 	br	81131bd0 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81131b84:	e0bffc17 	ldw	r2,-16(fp)
81131b88:	10800117 	ldw	r2,4(r2)
81131b8c:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81131b90:	e0bffb17 	ldw	r2,-20(fp)
81131b94:	10000526 	beq	r2,zero,81131bac <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
81131b98:	e0bffb17 	ldw	r2,-20(fp)
81131b9c:	e17ffe17 	ldw	r5,-8(fp)
81131ba0:	e13ffc17 	ldw	r4,-16(fp)
81131ba4:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81131ba8:	00000906 	br	81131bd0 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81131bac:	e0bfff17 	ldw	r2,-4(fp)
81131bb0:	00ffe3c4 	movi	r3,-113
81131bb4:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81131bb8:	00000506 	br	81131bd0 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
81131bbc:	e0bfff17 	ldw	r2,-4(fp)
81131bc0:	00ffe104 	movi	r3,-124
81131bc4:	10c00005 	stb	r3,0(r2)
                     break;
81131bc8:	00000106 	br	81131bd0 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
81131bcc:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
81131bd0:	11322180 	call	81132218 <OSTmr_Unlock>
             return (OS_TRUE);
81131bd4:	00800044 	movi	r2,1
81131bd8:	00001106 	br	81131c20 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
81131bdc:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
81131be0:	e0bfff17 	ldw	r2,-4(fp)
81131be4:	00ffe384 	movi	r3,-114
81131be8:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
81131bec:	00800044 	movi	r2,1
81131bf0:	00000b06 	br	81131c20 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
81131bf4:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131bf8:	e0bfff17 	ldw	r2,-4(fp)
81131bfc:	00ffe1c4 	movi	r3,-121
81131c00:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131c04:	0005883a 	mov	r2,zero
81131c08:	00000506 	br	81131c20 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
81131c0c:	11322180 	call	81132218 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131c10:	e0bfff17 	ldw	r2,-4(fp)
81131c14:	00ffe344 	movi	r3,-115
81131c18:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131c1c:	0005883a 	mov	r2,zero
    }
}
81131c20:	e037883a 	mov	sp,fp
81131c24:	dfc00117 	ldw	ra,4(sp)
81131c28:	df000017 	ldw	fp,0(sp)
81131c2c:	dec00204 	addi	sp,sp,8
81131c30:	f800283a 	ret

81131c34 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
81131c34:	defffd04 	addi	sp,sp,-12
81131c38:	de00012e 	bgeu	sp,et,81131c40 <OSTmrSignal+0xc>
81131c3c:	003b68fa 	trap	3
81131c40:	dfc00215 	stw	ra,8(sp)
81131c44:	df000115 	stw	fp,4(sp)
81131c48:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
81131c4c:	d0a07317 	ldw	r2,-32308(gp)
81131c50:	1009883a 	mov	r4,r2
81131c54:	112f2000 	call	8112f200 <OSSemPost>
81131c58:	e0bfff05 	stb	r2,-4(fp)
    return (err);
81131c5c:	e0bfff03 	ldbu	r2,-4(fp)
}
81131c60:	e037883a 	mov	sp,fp
81131c64:	dfc00117 	ldw	ra,4(sp)
81131c68:	df000017 	ldw	fp,0(sp)
81131c6c:	dec00204 	addi	sp,sp,8
81131c70:	f800283a 	ret

81131c74 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
81131c74:	defffe04 	addi	sp,sp,-8
81131c78:	de00012e 	bgeu	sp,et,81131c80 <OSTmr_Alloc+0xc>
81131c7c:	003b68fa 	trap	3
81131c80:	df000115 	stw	fp,4(sp)
81131c84:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81131c88:	d0a07117 	ldw	r2,-32316(gp)
81131c8c:	1000021e 	bne	r2,zero,81131c98 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81131c90:	0005883a 	mov	r2,zero
81131c94:	00001006 	br	81131cd8 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
81131c98:	d0a07117 	ldw	r2,-32316(gp)
81131c9c:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
81131ca0:	e0bfff17 	ldw	r2,-4(fp)
81131ca4:	10800317 	ldw	r2,12(r2)
81131ca8:	d0a07115 	stw	r2,-32316(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
81131cac:	e0bfff17 	ldw	r2,-4(fp)
81131cb0:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
81131cb4:	e0bfff17 	ldw	r2,-4(fp)
81131cb8:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
81131cbc:	d0a0760b 	ldhu	r2,-32296(gp)
81131cc0:	10800044 	addi	r2,r2,1
81131cc4:	d0a0760d 	sth	r2,-32296(gp)
    OSTmrFree--;
81131cc8:	d0a07a0b 	ldhu	r2,-32280(gp)
81131ccc:	10bfffc4 	addi	r2,r2,-1
81131cd0:	d0a07a0d 	sth	r2,-32280(gp)
    return (ptmr);
81131cd4:	e0bfff17 	ldw	r2,-4(fp)
}
81131cd8:	e037883a 	mov	sp,fp
81131cdc:	df000017 	ldw	fp,0(sp)
81131ce0:	dec00104 	addi	sp,sp,4
81131ce4:	f800283a 	ret

81131ce8 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81131ce8:	defffe04 	addi	sp,sp,-8
81131cec:	de00012e 	bgeu	sp,et,81131cf4 <OSTmr_Free+0xc>
81131cf0:	003b68fa 	trap	3
81131cf4:	df000115 	stw	fp,4(sp)
81131cf8:	df000104 	addi	fp,sp,4
81131cfc:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81131d00:	e0bfff17 	ldw	r2,-4(fp)
81131d04:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81131d08:	e0bfff17 	ldw	r2,-4(fp)
81131d0c:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
81131d10:	e0bfff17 	ldw	r2,-4(fp)
81131d14:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81131d18:	e0bfff17 	ldw	r2,-4(fp)
81131d1c:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
81131d20:	e0bfff17 	ldw	r2,-4(fp)
81131d24:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81131d28:	e0bfff17 	ldw	r2,-4(fp)
81131d2c:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
81131d30:	e0bfff17 	ldw	r2,-4(fp)
81131d34:	00c00fc4 	movi	r3,63
81131d38:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81131d3c:	e0bfff17 	ldw	r2,-4(fp)
81131d40:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
81131d44:	e0bfff17 	ldw	r2,-4(fp)
81131d48:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81131d4c:	d0e07117 	ldw	r3,-32316(gp)
81131d50:	e0bfff17 	ldw	r2,-4(fp)
81131d54:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81131d58:	e0bfff17 	ldw	r2,-4(fp)
81131d5c:	d0a07115 	stw	r2,-32316(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
81131d60:	d0a0760b 	ldhu	r2,-32296(gp)
81131d64:	10bfffc4 	addi	r2,r2,-1
81131d68:	d0a0760d 	sth	r2,-32296(gp)
    OSTmrFree++;
81131d6c:	d0a07a0b 	ldhu	r2,-32280(gp)
81131d70:	10800044 	addi	r2,r2,1
81131d74:	d0a07a0d 	sth	r2,-32280(gp)
}
81131d78:	0001883a 	nop
81131d7c:	e037883a 	mov	sp,fp
81131d80:	df000017 	ldw	fp,0(sp)
81131d84:	dec00104 	addi	sp,sp,4
81131d88:	f800283a 	ret

81131d8c <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
81131d8c:	defffa04 	addi	sp,sp,-24
81131d90:	de00012e 	bgeu	sp,et,81131d98 <OSTmr_Init+0xc>
81131d94:	003b68fa 	trap	3
81131d98:	dfc00515 	stw	ra,20(sp)
81131d9c:	df000415 	stw	fp,16(sp)
81131da0:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
81131da4:	01406804 	movi	r5,416
81131da8:	01204574 	movhi	r4,33045
81131dac:	213ff804 	addi	r4,r4,-32
81131db0:	1129efc0 	call	81129efc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
81131db4:	01400404 	movi	r5,16
81131db8:	01204574 	movhi	r4,33045
81131dbc:	213f1804 	addi	r4,r4,-928
81131dc0:	1129efc0 	call	81129efc <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
81131dc4:	00a04574 	movhi	r2,33045
81131dc8:	10bff804 	addi	r2,r2,-32
81131dcc:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
81131dd0:	00a04574 	movhi	r2,33045
81131dd4:	10800504 	addi	r2,r2,20
81131dd8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81131ddc:	e03ffc0d 	sth	zero,-16(fp)
81131de0:	00001606 	br	81131e3c <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81131de4:	e0bffd17 	ldw	r2,-12(fp)
81131de8:	00c01904 	movi	r3,100
81131dec:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81131df0:	e0bffd17 	ldw	r2,-12(fp)
81131df4:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81131df8:	e0bffd17 	ldw	r2,-12(fp)
81131dfc:	e0fffe17 	ldw	r3,-8(fp)
81131e00:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81131e04:	e0bffd17 	ldw	r2,-12(fp)
81131e08:	00c00fc4 	movi	r3,63
81131e0c:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81131e10:	e0bffd17 	ldw	r2,-12(fp)
81131e14:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81131e18:	e0bffd17 	ldw	r2,-12(fp)
81131e1c:	10800d04 	addi	r2,r2,52
81131e20:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
81131e24:	e0bffe17 	ldw	r2,-8(fp)
81131e28:	10800d04 	addi	r2,r2,52
81131e2c:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81131e30:	e0bffc0b 	ldhu	r2,-16(fp)
81131e34:	10800044 	addi	r2,r2,1
81131e38:	e0bffc0d 	sth	r2,-16(fp)
81131e3c:	e0bffc0b 	ldhu	r2,-16(fp)
81131e40:	108001f0 	cmpltui	r2,r2,7
81131e44:	103fe71e 	bne	r2,zero,81131de4 <__reset+0xfb111de4>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81131e48:	e0bffd17 	ldw	r2,-12(fp)
81131e4c:	00c01904 	movi	r3,100
81131e50:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
81131e54:	e0bffd17 	ldw	r2,-12(fp)
81131e58:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81131e5c:	e0bffd17 	ldw	r2,-12(fp)
81131e60:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
81131e64:	e0bffd17 	ldw	r2,-12(fp)
81131e68:	00c00fc4 	movi	r3,63
81131e6c:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81131e70:	e0bffd17 	ldw	r2,-12(fp)
81131e74:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81131e78:	d0208615 	stw	zero,-32232(gp)
    OSTmrUsed           = 0;
81131e7c:	d020760d 	sth	zero,-32296(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81131e80:	00800204 	movi	r2,8
81131e84:	d0a07a0d 	sth	r2,-32280(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
81131e88:	00a04574 	movhi	r2,33045
81131e8c:	10bff804 	addi	r2,r2,-32
81131e90:	d0a07115 	stw	r2,-32316(gp)
    OSTmrSem            = OSSemCreate(1);
81131e94:	01000044 	movi	r4,1
81131e98:	112eb500 	call	8112eb50 <OSSemCreate>
81131e9c:	d0a08815 	stw	r2,-32224(gp)
    OSTmrSemSignal      = OSSemCreate(0);
81131ea0:	0009883a 	mov	r4,zero
81131ea4:	112eb500 	call	8112eb50 <OSSemCreate>
81131ea8:	d0a07315 	stw	r2,-32308(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
81131eac:	d0a08817 	ldw	r2,-32224(gp)
81131eb0:	e0ffff04 	addi	r3,fp,-4
81131eb4:	180d883a 	mov	r6,r3
81131eb8:	01604534 	movhi	r5,33044
81131ebc:	297af804 	addi	r5,r5,-5152
81131ec0:	1009883a 	mov	r4,r2
81131ec4:	11286d40 	call	811286d4 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
81131ec8:	d0a07317 	ldw	r2,-32308(gp)
81131ecc:	e0ffff04 	addi	r3,fp,-4
81131ed0:	180d883a 	mov	r6,r3
81131ed4:	01604534 	movhi	r5,33044
81131ed8:	297afd04 	addi	r5,r5,-5132
81131edc:	1009883a 	mov	r4,r2
81131ee0:	11286d40 	call	811286d4 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81131ee4:	1131f000 	call	81131f00 <OSTmr_InitTask>
}
81131ee8:	0001883a 	nop
81131eec:	e037883a 	mov	sp,fp
81131ef0:	dfc00117 	ldw	ra,4(sp)
81131ef4:	df000017 	ldw	fp,0(sp)
81131ef8:	dec00204 	addi	sp,sp,8
81131efc:	f800283a 	ret

81131f00 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81131f00:	defff804 	addi	sp,sp,-32
81131f04:	de00012e 	bgeu	sp,et,81131f0c <OSTmr_InitTask+0xc>
81131f08:	003b68fa 	trap	3
81131f0c:	dfc00715 	stw	ra,28(sp)
81131f10:	df000615 	stw	fp,24(sp)
81131f14:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81131f18:	008000c4 	movi	r2,3
81131f1c:	d8800415 	stw	r2,16(sp)
81131f20:	d8000315 	stw	zero,12(sp)
81131f24:	00808004 	movi	r2,512
81131f28:	d8800215 	stw	r2,8(sp)
81131f2c:	00a04574 	movhi	r2,33045
81131f30:	1085e404 	addi	r2,r2,6032
81131f34:	d8800115 	stw	r2,4(sp)
81131f38:	00bfff54 	movui	r2,65533
81131f3c:	d8800015 	stw	r2,0(sp)
81131f40:	01c00484 	movi	r7,18
81131f44:	01a04574 	movhi	r6,33045
81131f48:	3187e304 	addi	r6,r6,8076
81131f4c:	000b883a 	mov	r5,zero
81131f50:	012044f4 	movhi	r4,33043
81131f54:	21089504 	addi	r4,r4,8788
81131f58:	112fbe40 	call	8112fbe4 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81131f5c:	e1bfff04 	addi	r6,fp,-4
81131f60:	01604534 	movhi	r5,33044
81131f64:	297b0204 	addi	r5,r5,-5112
81131f68:	01000484 	movi	r4,18
81131f6c:	11304140 	call	81130414 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
81131f70:	0001883a 	nop
81131f74:	e037883a 	mov	sp,fp
81131f78:	dfc00117 	ldw	ra,4(sp)
81131f7c:	df000017 	ldw	fp,0(sp)
81131f80:	dec00204 	addi	sp,sp,8
81131f84:	f800283a 	ret

81131f88 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
81131f88:	defffa04 	addi	sp,sp,-24
81131f8c:	de00012e 	bgeu	sp,et,81131f94 <OSTmr_Link+0xc>
81131f90:	003b68fa 	trap	3
81131f94:	df000515 	stw	fp,20(sp)
81131f98:	df000504 	addi	fp,sp,20
81131f9c:	e13ffe15 	stw	r4,-8(fp)
81131fa0:	2805883a 	mov	r2,r5
81131fa4:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
81131fa8:	e0bffe17 	ldw	r2,-8(fp)
81131fac:	00c000c4 	movi	r3,3
81131fb0:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
81131fb4:	e0bfff03 	ldbu	r2,-4(fp)
81131fb8:	10800058 	cmpnei	r2,r2,1
81131fbc:	1000071e 	bne	r2,zero,81131fdc <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81131fc0:	e0bffe17 	ldw	r2,-8(fp)
81131fc4:	10c00717 	ldw	r3,28(r2)
81131fc8:	d0a08617 	ldw	r2,-32232(gp)
81131fcc:	1887883a 	add	r3,r3,r2
81131fd0:	e0bffe17 	ldw	r2,-8(fp)
81131fd4:	10c00515 	stw	r3,20(r2)
81131fd8:	00001006 	br	8113201c <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
81131fdc:	e0bffe17 	ldw	r2,-8(fp)
81131fe0:	10800617 	ldw	r2,24(r2)
81131fe4:	1000071e 	bne	r2,zero,81132004 <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81131fe8:	e0bffe17 	ldw	r2,-8(fp)
81131fec:	10c00717 	ldw	r3,28(r2)
81131ff0:	d0a08617 	ldw	r2,-32232(gp)
81131ff4:	1887883a 	add	r3,r3,r2
81131ff8:	e0bffe17 	ldw	r2,-8(fp)
81131ffc:	10c00515 	stw	r3,20(r2)
81132000:	00000606 	br	8113201c <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81132004:	e0bffe17 	ldw	r2,-8(fp)
81132008:	10c00617 	ldw	r3,24(r2)
8113200c:	d0a08617 	ldw	r2,-32232(gp)
81132010:	1887883a 	add	r3,r3,r2
81132014:	e0bffe17 	ldw	r2,-8(fp)
81132018:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8113201c:	e0bffe17 	ldw	r2,-8(fp)
81132020:	10800517 	ldw	r2,20(r2)
81132024:	1080004c 	andi	r2,r2,1
81132028:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8113202c:	e0bffb0b 	ldhu	r2,-20(fp)
81132030:	100690fa 	slli	r3,r2,3
81132034:	00a04574 	movhi	r2,33045
81132038:	10bf1804 	addi	r2,r2,-928
8113203c:	1885883a 	add	r2,r3,r2
81132040:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
81132044:	e0bffc17 	ldw	r2,-16(fp)
81132048:	10800017 	ldw	r2,0(r2)
8113204c:	1000091e 	bne	r2,zero,81132074 <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
81132050:	e0bffc17 	ldw	r2,-16(fp)
81132054:	e0fffe17 	ldw	r3,-8(fp)
81132058:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
8113205c:	e0bffe17 	ldw	r2,-8(fp)
81132060:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
81132064:	e0bffc17 	ldw	r2,-16(fp)
81132068:	00c00044 	movi	r3,1
8113206c:	10c0010d 	sth	r3,4(r2)
81132070:	00001206 	br	811320bc <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
81132074:	e0bffc17 	ldw	r2,-16(fp)
81132078:	10800017 	ldw	r2,0(r2)
8113207c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
81132080:	e0bffc17 	ldw	r2,-16(fp)
81132084:	e0fffe17 	ldw	r3,-8(fp)
81132088:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
8113208c:	e0bffe17 	ldw	r2,-8(fp)
81132090:	e0fffd17 	ldw	r3,-12(fp)
81132094:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
81132098:	e0bffd17 	ldw	r2,-12(fp)
8113209c:	e0fffe17 	ldw	r3,-8(fp)
811320a0:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
811320a4:	e0bffc17 	ldw	r2,-16(fp)
811320a8:	1080010b 	ldhu	r2,4(r2)
811320ac:	10800044 	addi	r2,r2,1
811320b0:	1007883a 	mov	r3,r2
811320b4:	e0bffc17 	ldw	r2,-16(fp)
811320b8:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
811320bc:	e0bffe17 	ldw	r2,-8(fp)
811320c0:	10000415 	stw	zero,16(r2)
}
811320c4:	0001883a 	nop
811320c8:	e037883a 	mov	sp,fp
811320cc:	df000017 	ldw	fp,0(sp)
811320d0:	dec00104 	addi	sp,sp,4
811320d4:	f800283a 	ret

811320d8 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
811320d8:	defffa04 	addi	sp,sp,-24
811320dc:	de00012e 	bgeu	sp,et,811320e4 <OSTmr_Unlink+0xc>
811320e0:	003b68fa 	trap	3
811320e4:	df000515 	stw	fp,20(sp)
811320e8:	df000504 	addi	fp,sp,20
811320ec:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
811320f0:	e0bfff17 	ldw	r2,-4(fp)
811320f4:	10800517 	ldw	r2,20(r2)
811320f8:	1080004c 	andi	r2,r2,1
811320fc:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81132100:	e0bffb0b 	ldhu	r2,-20(fp)
81132104:	100690fa 	slli	r3,r2,3
81132108:	00a04574 	movhi	r2,33045
8113210c:	10bf1804 	addi	r2,r2,-928
81132110:	1885883a 	add	r2,r3,r2
81132114:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81132118:	e0bffc17 	ldw	r2,-16(fp)
8113211c:	10c00017 	ldw	r3,0(r2)
81132120:	e0bfff17 	ldw	r2,-4(fp)
81132124:	18800b1e 	bne	r3,r2,81132154 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81132128:	e0bfff17 	ldw	r2,-4(fp)
8113212c:	10800317 	ldw	r2,12(r2)
81132130:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
81132134:	e0bffc17 	ldw	r2,-16(fp)
81132138:	e0fffd17 	ldw	r3,-12(fp)
8113213c:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
81132140:	e0bffd17 	ldw	r2,-12(fp)
81132144:	10001126 	beq	r2,zero,8113218c <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81132148:	e0bffd17 	ldw	r2,-12(fp)
8113214c:	10000415 	stw	zero,16(r2)
81132150:	00000e06 	br	8113218c <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
81132154:	e0bfff17 	ldw	r2,-4(fp)
81132158:	10800417 	ldw	r2,16(r2)
8113215c:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
81132160:	e0bfff17 	ldw	r2,-4(fp)
81132164:	10800317 	ldw	r2,12(r2)
81132168:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
8113216c:	e0bffd17 	ldw	r2,-12(fp)
81132170:	e0fffe17 	ldw	r3,-8(fp)
81132174:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81132178:	e0bffe17 	ldw	r2,-8(fp)
8113217c:	10000326 	beq	r2,zero,8113218c <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
81132180:	e0bffe17 	ldw	r2,-8(fp)
81132184:	e0fffd17 	ldw	r3,-12(fp)
81132188:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
8113218c:	e0bfff17 	ldw	r2,-4(fp)
81132190:	00c00044 	movi	r3,1
81132194:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
81132198:	e0bfff17 	ldw	r2,-4(fp)
8113219c:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
811321a0:	e0bfff17 	ldw	r2,-4(fp)
811321a4:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
811321a8:	e0bffc17 	ldw	r2,-16(fp)
811321ac:	1080010b 	ldhu	r2,4(r2)
811321b0:	10bfffc4 	addi	r2,r2,-1
811321b4:	1007883a 	mov	r3,r2
811321b8:	e0bffc17 	ldw	r2,-16(fp)
811321bc:	10c0010d 	sth	r3,4(r2)
}
811321c0:	0001883a 	nop
811321c4:	e037883a 	mov	sp,fp
811321c8:	df000017 	ldw	fp,0(sp)
811321cc:	dec00104 	addi	sp,sp,4
811321d0:	f800283a 	ret

811321d4 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
811321d4:	defffd04 	addi	sp,sp,-12
811321d8:	de00012e 	bgeu	sp,et,811321e0 <OSTmr_Lock+0xc>
811321dc:	003b68fa 	trap	3
811321e0:	dfc00215 	stw	ra,8(sp)
811321e4:	df000115 	stw	fp,4(sp)
811321e8:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
811321ec:	d0a08817 	ldw	r2,-32224(gp)
811321f0:	e1bfff04 	addi	r6,fp,-4
811321f4:	000b883a 	mov	r5,zero
811321f8:	1009883a 	mov	r4,r2
811321fc:	112ee780 	call	8112ee78 <OSSemPend>
    (void)err;
}
81132200:	0001883a 	nop
81132204:	e037883a 	mov	sp,fp
81132208:	dfc00117 	ldw	ra,4(sp)
8113220c:	df000017 	ldw	fp,0(sp)
81132210:	dec00204 	addi	sp,sp,8
81132214:	f800283a 	ret

81132218 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81132218:	defffe04 	addi	sp,sp,-8
8113221c:	de00012e 	bgeu	sp,et,81132224 <OSTmr_Unlock+0xc>
81132220:	003b68fa 	trap	3
81132224:	dfc00115 	stw	ra,4(sp)
81132228:	df000015 	stw	fp,0(sp)
8113222c:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
81132230:	d0a08817 	ldw	r2,-32224(gp)
81132234:	1009883a 	mov	r4,r2
81132238:	112f2000 	call	8112f200 <OSSemPost>
}
8113223c:	0001883a 	nop
81132240:	e037883a 	mov	sp,fp
81132244:	dfc00117 	ldw	ra,4(sp)
81132248:	df000017 	ldw	fp,0(sp)
8113224c:	dec00204 	addi	sp,sp,8
81132250:	f800283a 	ret

81132254 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
81132254:	defff704 	addi	sp,sp,-36
81132258:	de00012e 	bgeu	sp,et,81132260 <OSTmr_Task+0xc>
8113225c:	003b68fa 	trap	3
81132260:	dfc00815 	stw	ra,32(sp)
81132264:	df000715 	stw	fp,28(sp)
81132268:	df000704 	addi	fp,sp,28
8113226c:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
81132270:	d0a07317 	ldw	r2,-32308(gp)
81132274:	e0fffe04 	addi	r3,fp,-8
81132278:	180d883a 	mov	r6,r3
8113227c:	000b883a 	mov	r5,zero
81132280:	1009883a 	mov	r4,r2
81132284:	112ee780 	call	8112ee78 <OSSemPend>
        OSTmr_Lock();
81132288:	11321d40 	call	811321d4 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
8113228c:	d0a08617 	ldw	r2,-32232(gp)
81132290:	10800044 	addi	r2,r2,1
81132294:	d0a08615 	stw	r2,-32232(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
81132298:	d0a08617 	ldw	r2,-32232(gp)
8113229c:	1080004c 	andi	r2,r2,1
811322a0:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
811322a4:	e0bffa0b 	ldhu	r2,-24(fp)
811322a8:	100690fa 	slli	r3,r2,3
811322ac:	00a04574 	movhi	r2,33045
811322b0:	10bf1804 	addi	r2,r2,-928
811322b4:	1885883a 	add	r2,r3,r2
811322b8:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
811322bc:	e0bffb17 	ldw	r2,-20(fp)
811322c0:	10800017 	ldw	r2,0(r2)
811322c4:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
811322c8:	00002206 	br	81132354 <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
811322cc:	e0bff917 	ldw	r2,-28(fp)
811322d0:	10800317 	ldw	r2,12(r2)
811322d4:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
811322d8:	e0bff917 	ldw	r2,-28(fp)
811322dc:	10c00517 	ldw	r3,20(r2)
811322e0:	d0a08617 	ldw	r2,-32232(gp)
811322e4:	1880191e 	bne	r3,r2,8113234c <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
811322e8:	e0bff917 	ldw	r2,-28(fp)
811322ec:	10800117 	ldw	r2,4(r2)
811322f0:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
811322f4:	e0bffd17 	ldw	r2,-12(fp)
811322f8:	10000626 	beq	r2,zero,81132314 <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
811322fc:	e0bff917 	ldw	r2,-28(fp)
81132300:	10c00217 	ldw	r3,8(r2)
81132304:	e0bffd17 	ldw	r2,-12(fp)
81132308:	180b883a 	mov	r5,r3
8113230c:	e13ff917 	ldw	r4,-28(fp)
81132310:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
81132314:	e13ff917 	ldw	r4,-28(fp)
81132318:	11320d80 	call	811320d8 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
8113231c:	e0bff917 	ldw	r2,-28(fp)
81132320:	10800c03 	ldbu	r2,48(r2)
81132324:	10803fcc 	andi	r2,r2,255
81132328:	10800098 	cmpnei	r2,r2,2
8113232c:	1000041e 	bne	r2,zero,81132340 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
81132330:	01400044 	movi	r5,1
81132334:	e13ff917 	ldw	r4,-28(fp)
81132338:	1131f880 	call	81131f88 <OSTmr_Link>
8113233c:	00000306 	br	8113234c <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
81132340:	e0bff917 	ldw	r2,-28(fp)
81132344:	00c00084 	movi	r3,2
81132348:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
8113234c:	e0bffc17 	ldw	r2,-16(fp)
81132350:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
81132354:	e0bff917 	ldw	r2,-28(fp)
81132358:	103fdc1e 	bne	r2,zero,811322cc <__reset+0xfb1122cc>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
8113235c:	11322180 	call	81132218 <OSTmr_Unlock>
    }
81132360:	003fc306 	br	81132270 <__reset+0xfb112270>

81132364 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81132364:	defffd04 	addi	sp,sp,-12
81132368:	de00012e 	bgeu	sp,et,81132370 <alt_dev_reg+0xc>
8113236c:	003b68fa 	trap	3
81132370:	dfc00215 	stw	ra,8(sp)
81132374:	df000115 	stw	fp,4(sp)
81132378:	df000104 	addi	fp,sp,4
8113237c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81132380:	d1600d04 	addi	r5,gp,-32716
81132384:	e13fff17 	ldw	r4,-4(fp)
81132388:	113a5700 	call	8113a570 <alt_dev_llist_insert>
}
8113238c:	e037883a 	mov	sp,fp
81132390:	dfc00117 	ldw	ra,4(sp)
81132394:	df000017 	ldw	fp,0(sp)
81132398:	dec00204 	addi	sp,sp,8
8113239c:	f800283a 	ret

811323a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811323a0:	defffd04 	addi	sp,sp,-12
811323a4:	de00012e 	bgeu	sp,et,811323ac <alt_irq_init+0xc>
811323a8:	003b68fa 	trap	3
811323ac:	dfc00215 	stw	ra,8(sp)
811323b0:	df000115 	stw	fp,4(sp)
811323b4:	df000104 	addi	fp,sp,4
811323b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
811323bc:	113b0080 	call	8113b008 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
811323c0:	00800044 	movi	r2,1
811323c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
811323c8:	0001883a 	nop
811323cc:	e037883a 	mov	sp,fp
811323d0:	dfc00117 	ldw	ra,4(sp)
811323d4:	df000017 	ldw	fp,0(sp)
811323d8:	dec00204 	addi	sp,sp,8
811323dc:	f800283a 	ret

811323e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
811323e0:	defffe04 	addi	sp,sp,-8
811323e4:	de00012e 	bgeu	sp,et,811323ec <alt_sys_init+0xc>
811323e8:	003b68fa 	trap	3
811323ec:	dfc00115 	stw	ra,4(sp)
811323f0:	df000015 	stw	fp,0(sp)
811323f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
811323f8:	01c0fa04 	movi	r7,1000
811323fc:	01800304 	movi	r6,12
81132400:	000b883a 	mov	r5,zero
81132404:	01200034 	movhi	r4,32768
81132408:	21022004 	addi	r4,r4,2176
8113240c:	11376a40 	call	811376a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81132410:	018002c4 	movi	r6,11
81132414:	000b883a 	mov	r5,zero
81132418:	01204534 	movhi	r4,33044
8113241c:	213e4404 	addi	r4,r4,-1776
81132420:	1136a240 	call	81136a24 <altera_avalon_jtag_uart_init>
81132424:	01204534 	movhi	r4,33044
81132428:	213e3a04 	addi	r4,r4,-1816
8113242c:	11323640 	call	81132364 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81132430:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81132434:	018003c4 	movi	r6,15
81132438:	000b883a 	mov	r5,zero
8113243c:	01204534 	movhi	r4,33044
81132440:	21025f04 	addi	r4,r4,2428
81132444:	11378500 	call	81137850 <altera_avalon_uart_init>
81132448:	01204534 	movhi	r4,33044
8113244c:	21025504 	addi	r4,r4,2388
81132450:	11323640 	call	81132364 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81132454:	00a04534 	movhi	r2,33044
81132458:	10828904 	addi	r2,r2,2596
8113245c:	10c00717 	ldw	r3,28(r2)
81132460:	00a04534 	movhi	r2,33044
81132464:	10828904 	addi	r2,r2,2596
81132468:	10800817 	ldw	r2,32(r2)
8113246c:	100d883a 	mov	r6,r2
81132470:	180b883a 	mov	r5,r3
81132474:	01204534 	movhi	r4,33044
81132478:	21028904 	addi	r4,r4,2596
8113247c:	113a0d80 	call	8113a0d8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81132480:	00a04534 	movhi	r2,33044
81132484:	1082a204 	addi	r2,r2,2696
81132488:	10c00717 	ldw	r3,28(r2)
8113248c:	00a04534 	movhi	r2,33044
81132490:	1082a204 	addi	r2,r2,2696
81132494:	10800817 	ldw	r2,32(r2)
81132498:	100d883a 	mov	r6,r2
8113249c:	180b883a 	mov	r5,r3
811324a0:	01204534 	movhi	r4,33044
811324a4:	2102a204 	addi	r4,r4,2696
811324a8:	113a0d80 	call	8113a0d8 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811324ac:	01204534 	movhi	r4,33044
811324b0:	2102bb04 	addi	r4,r4,2796
811324b4:	11323640 	call	81132364 <alt_dev_reg>
}
811324b8:	0001883a 	nop
811324bc:	e037883a 	mov	sp,fp
811324c0:	dfc00117 	ldw	ra,4(sp)
811324c4:	df000017 	ldw	fp,0(sp)
811324c8:	dec00204 	addi	sp,sp,8
811324cc:	f800283a 	ret

811324d0 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811324d0:	defffa04 	addi	sp,sp,-24
811324d4:	de00012e 	bgeu	sp,et,811324dc <Write_Sector_Data+0xc>
811324d8:	003b68fa 	trap	3
811324dc:	dfc00515 	stw	ra,20(sp)
811324e0:	df000415 	stw	fp,16(sp)
811324e4:	df000404 	addi	fp,sp,16
811324e8:	e13ffe15 	stw	r4,-8(fp)
811324ec:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
811324f0:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
811324f4:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
811324f8:	10001e26 	beq	r2,zero,81132574 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
811324fc:	00803fc4 	movi	r2,255
81132500:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81132504:	d0a09217 	ldw	r2,-32184(gp)
81132508:	e13ffe17 	ldw	r4,-8(fp)
8113250c:	e0ffff17 	ldw	r3,-4(fp)
81132510:	20c7883a 	add	r3,r4,r3
81132514:	1806927a 	slli	r3,r3,9
81132518:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
8113251c:	d0a09117 	ldw	r2,-32188(gp)
81132520:	00c00604 	movi	r3,24
81132524:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81132528:	d0a08e17 	ldw	r2,-32200(gp)
8113252c:	1080002b 	ldhuio	r2,0(r2)
81132530:	10bfffcc 	andi	r2,r2,65535
81132534:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81132538:	e0bffd0b 	ldhu	r2,-12(fp)
8113253c:	10bfffcc 	andi	r2,r2,65535
81132540:	1080010c 	andi	r2,r2,4
81132544:	103ff81e 	bne	r2,zero,81132528 <__reset+0xfb112528>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81132548:	e0bffd0b 	ldhu	r2,-12(fp)
8113254c:	10bfffcc 	andi	r2,r2,65535
81132550:	1080040c 	andi	r2,r2,16
81132554:	1000071e 	bne	r2,zero,81132574 <Write_Sector_Data+0xa4>
        {
            result = true;
81132558:	00800044 	movi	r2,1
8113255c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81132560:	d0209715 	stw	zero,-32164(gp)
            current_sector_index = sector_index+partition_offset;
81132564:	e0fffe17 	ldw	r3,-8(fp)
81132568:	e0bfff17 	ldw	r2,-4(fp)
8113256c:	1885883a 	add	r2,r3,r2
81132570:	d0a09815 	stw	r2,-32160(gp)
        }
    }
    return result;
81132574:	e0bffc17 	ldw	r2,-16(fp)
}
81132578:	e037883a 	mov	sp,fp
8113257c:	dfc00117 	ldw	ra,4(sp)
81132580:	df000017 	ldw	fp,0(sp)
81132584:	dec00204 	addi	sp,sp,8
81132588:	f800283a 	ret

8113258c <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
8113258c:	defffd04 	addi	sp,sp,-12
81132590:	de00012e 	bgeu	sp,et,81132598 <Save_Modified_Sector+0xc>
81132594:	003b68fa 	trap	3
81132598:	dfc00215 	stw	ra,8(sp)
8113259c:	df000115 	stw	fp,4(sp)
811325a0:	df000104 	addi	fp,sp,4
    bool result = true;
811325a4:	00800044 	movi	r2,1
811325a8:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811325ac:	d0a09717 	ldw	r2,-32164(gp)
811325b0:	10000526 	beq	r2,zero,811325c8 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811325b4:	d0a09817 	ldw	r2,-32160(gp)
811325b8:	000b883a 	mov	r5,zero
811325bc:	1009883a 	mov	r4,r2
811325c0:	11324d00 	call	811324d0 <Write_Sector_Data>
811325c4:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811325c8:	e0bfff17 	ldw	r2,-4(fp)
}
811325cc:	e037883a 	mov	sp,fp
811325d0:	dfc00117 	ldw	ra,4(sp)
811325d4:	df000017 	ldw	fp,0(sp)
811325d8:	dec00204 	addi	sp,sp,8
811325dc:	f800283a 	ret

811325e0 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
811325e0:	defffa04 	addi	sp,sp,-24
811325e4:	de00012e 	bgeu	sp,et,811325ec <Read_Sector_Data+0xc>
811325e8:	003b68fa 	trap	3
811325ec:	dfc00515 	stw	ra,20(sp)
811325f0:	df000415 	stw	fp,16(sp)
811325f4:	df000404 	addi	fp,sp,16
811325f8:	e13ffe15 	stw	r4,-8(fp)
811325fc:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81132600:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
81132604:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
81132608:	10002726 	beq	r2,zero,811326a8 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
8113260c:	00803fc4 	movi	r2,255
81132610:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
81132614:	d0a09717 	ldw	r2,-32164(gp)
81132618:	10000726 	beq	r2,zero,81132638 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
8113261c:	d0a09817 	ldw	r2,-32160(gp)
81132620:	000b883a 	mov	r5,zero
81132624:	1009883a 	mov	r4,r2
81132628:	11324d00 	call	811324d0 <Write_Sector_Data>
8113262c:	1000021e 	bne	r2,zero,81132638 <Read_Sector_Data+0x58>
            {
                return false;
81132630:	0005883a 	mov	r2,zero
81132634:	00001d06 	br	811326ac <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81132638:	d0a09217 	ldw	r2,-32184(gp)
8113263c:	e13ffe17 	ldw	r4,-8(fp)
81132640:	e0ffff17 	ldw	r3,-4(fp)
81132644:	20c7883a 	add	r3,r4,r3
81132648:	1806927a 	slli	r3,r3,9
8113264c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81132650:	d0a09117 	ldw	r2,-32188(gp)
81132654:	00c00444 	movi	r3,17
81132658:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8113265c:	d0a08e17 	ldw	r2,-32200(gp)
81132660:	1080002b 	ldhuio	r2,0(r2)
81132664:	10bfffcc 	andi	r2,r2,65535
81132668:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
8113266c:	e0bffd0b 	ldhu	r2,-12(fp)
81132670:	10bfffcc 	andi	r2,r2,65535
81132674:	1080010c 	andi	r2,r2,4
81132678:	103ff81e 	bne	r2,zero,8113265c <__reset+0xfb11265c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
8113267c:	e0bffd0b 	ldhu	r2,-12(fp)
81132680:	10bfffcc 	andi	r2,r2,65535
81132684:	1080040c 	andi	r2,r2,16
81132688:	1000071e 	bne	r2,zero,811326a8 <Read_Sector_Data+0xc8>
		{
			result = true;
8113268c:	00800044 	movi	r2,1
81132690:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81132694:	d0209715 	stw	zero,-32164(gp)
            current_sector_index = sector_index+partition_offset;
81132698:	e0fffe17 	ldw	r3,-8(fp)
8113269c:	e0bfff17 	ldw	r2,-4(fp)
811326a0:	1885883a 	add	r2,r3,r2
811326a4:	d0a09815 	stw	r2,-32160(gp)
		}
	}
	return result;
811326a8:	e0bffc17 	ldw	r2,-16(fp)
}
811326ac:	e037883a 	mov	sp,fp
811326b0:	dfc00117 	ldw	ra,4(sp)
811326b4:	df000017 	ldw	fp,0(sp)
811326b8:	dec00204 	addi	sp,sp,8
811326bc:	f800283a 	ret

811326c0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811326c0:	defffb04 	addi	sp,sp,-20
811326c4:	de00012e 	bgeu	sp,et,811326cc <get_cluster_flag+0xc>
811326c8:	003b68fa 	trap	3
811326cc:	dfc00415 	stw	ra,16(sp)
811326d0:	df000315 	stw	fp,12(sp)
811326d4:	df000304 	addi	fp,sp,12
811326d8:	e13ffe15 	stw	r4,-8(fp)
811326dc:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
811326e0:	e0bffe17 	ldw	r2,-8(fp)
811326e4:	1004d23a 	srli	r2,r2,8
811326e8:	d0e09417 	ldw	r3,-32176(gp)
811326ec:	10c5883a 	add	r2,r2,r3
811326f0:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811326f4:	00a04574 	movhi	r2,33045
811326f8:	1090b404 	addi	r2,r2,17104
811326fc:	10801117 	ldw	r2,68(r2)
81132700:	e0fffd17 	ldw	r3,-12(fp)
81132704:	1885883a 	add	r2,r3,r2
81132708:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
8113270c:	d0a09817 	ldw	r2,-32160(gp)
81132710:	e0fffd17 	ldw	r3,-12(fp)
81132714:	18800726 	beq	r3,r2,81132734 <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81132718:	e0bffd17 	ldw	r2,-12(fp)
8113271c:	000b883a 	mov	r5,zero
81132720:	1009883a 	mov	r4,r2
81132724:	11325e00 	call	811325e0 <Read_Sector_Data>
81132728:	1000021e 	bne	r2,zero,81132734 <get_cluster_flag+0x74>
        {
            return false;
8113272c:	0005883a 	mov	r2,zero
81132730:	00000d06 	br	81132768 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
81132734:	e0bffe17 	ldw	r2,-8(fp)
81132738:	10803fcc 	andi	r2,r2,255
8113273c:	1085883a 	add	r2,r2,r2
81132740:	1007883a 	mov	r3,r2
81132744:	d0a09617 	ldw	r2,-32168(gp)
81132748:	10800a17 	ldw	r2,40(r2)
8113274c:	1885883a 	add	r2,r3,r2
81132750:	1080002b 	ldhuio	r2,0(r2)
81132754:	10bfffcc 	andi	r2,r2,65535
81132758:	1007883a 	mov	r3,r2
8113275c:	e0bfff17 	ldw	r2,-4(fp)
81132760:	10c0000d 	sth	r3,0(r2)
    return true;
81132764:	00800044 	movi	r2,1
}
81132768:	e037883a 	mov	sp,fp
8113276c:	dfc00117 	ldw	ra,4(sp)
81132770:	df000017 	ldw	fp,0(sp)
81132774:	dec00204 	addi	sp,sp,8
81132778:	f800283a 	ret

8113277c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
8113277c:	defffa04 	addi	sp,sp,-24
81132780:	de00012e 	bgeu	sp,et,81132788 <mark_cluster+0xc>
81132784:	003b68fa 	trap	3
81132788:	dfc00515 	stw	ra,20(sp)
8113278c:	df000415 	stw	fp,16(sp)
81132790:	df000404 	addi	fp,sp,16
81132794:	e13ffd15 	stw	r4,-12(fp)
81132798:	2805883a 	mov	r2,r5
8113279c:	e1bfff15 	stw	r6,-4(fp)
811327a0:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
811327a4:	e0bffd17 	ldw	r2,-12(fp)
811327a8:	1004d23a 	srli	r2,r2,8
811327ac:	d0e09417 	ldw	r3,-32176(gp)
811327b0:	10c5883a 	add	r2,r2,r3
811327b4:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
811327b8:	e0bfff17 	ldw	r2,-4(fp)
811327bc:	10000726 	beq	r2,zero,811327dc <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811327c0:	00a04574 	movhi	r2,33045
811327c4:	1090b404 	addi	r2,r2,17104
811327c8:	10801117 	ldw	r2,68(r2)
811327cc:	e0fffc17 	ldw	r3,-16(fp)
811327d0:	1885883a 	add	r2,r3,r2
811327d4:	e0bffc15 	stw	r2,-16(fp)
811327d8:	00000606 	br	811327f4 <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
811327dc:	00a04574 	movhi	r2,33045
811327e0:	1090b404 	addi	r2,r2,17104
811327e4:	10801217 	ldw	r2,72(r2)
811327e8:	e0fffc17 	ldw	r3,-16(fp)
811327ec:	1885883a 	add	r2,r3,r2
811327f0:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
811327f4:	d0a09817 	ldw	r2,-32160(gp)
811327f8:	e0fffc17 	ldw	r3,-16(fp)
811327fc:	18800726 	beq	r3,r2,8113281c <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81132800:	e0bffc17 	ldw	r2,-16(fp)
81132804:	000b883a 	mov	r5,zero
81132808:	1009883a 	mov	r4,r2
8113280c:	11325e00 	call	811325e0 <Read_Sector_Data>
81132810:	1000021e 	bne	r2,zero,8113281c <mark_cluster+0xa0>
        {
            return false;
81132814:	0005883a 	mov	r2,zero
81132818:	00000d06 	br	81132850 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
8113281c:	e0bffd17 	ldw	r2,-12(fp)
81132820:	10803fcc 	andi	r2,r2,255
81132824:	1085883a 	add	r2,r2,r2
81132828:	1007883a 	mov	r3,r2
8113282c:	d0a09617 	ldw	r2,-32168(gp)
81132830:	10800a17 	ldw	r2,40(r2)
81132834:	1885883a 	add	r2,r3,r2
81132838:	1007883a 	mov	r3,r2
8113283c:	e0bffe0f 	ldh	r2,-8(fp)
81132840:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
81132844:	00800044 	movi	r2,1
81132848:	d0a09715 	stw	r2,-32164(gp)
    return true;
8113284c:	00800044 	movi	r2,1
}
81132850:	e037883a 	mov	sp,fp
81132854:	dfc00117 	ldw	ra,4(sp)
81132858:	df000017 	ldw	fp,0(sp)
8113285c:	dec00204 	addi	sp,sp,8
81132860:	f800283a 	ret

81132864 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
81132864:	defff704 	addi	sp,sp,-36
81132868:	de00012e 	bgeu	sp,et,81132870 <Check_for_Master_Boot_Record+0xc>
8113286c:	003b68fa 	trap	3
81132870:	dfc00815 	stw	ra,32(sp)
81132874:	df000715 	stw	fp,28(sp)
81132878:	df000704 	addi	fp,sp,28
	bool result = false;
8113287c:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81132880:	000b883a 	mov	r5,zero
81132884:	0009883a 	mov	r4,zero
81132888:	11325e00 	call	811325e0 <Read_Sector_Data>
8113288c:	10005a26 	beq	r2,zero,811329f8 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81132890:	d0a09617 	ldw	r2,-32168(gp)
81132894:	10800a17 	ldw	r2,40(r2)
81132898:	10807f84 	addi	r2,r2,510
8113289c:	1080002b 	ldhuio	r2,0(r2)
811328a0:	10bfffcc 	andi	r2,r2,65535
811328a4:	10bfffcc 	andi	r2,r2,65535
811328a8:	10a0001c 	xori	r2,r2,32768
811328ac:	10a00004 	addi	r2,r2,-32768
811328b0:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
811328b4:	e0bffb17 	ldw	r2,-20(fp)
811328b8:	10ffffcc 	andi	r3,r2,65535
811328bc:	00aa9554 	movui	r2,43605
811328c0:	18804d1e 	bne	r3,r2,811329f8 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811328c4:	e03ffa15 	stw	zero,-24(fp)
811328c8:	00004806 	br	811329ec <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
811328cc:	e0bffa17 	ldw	r2,-24(fp)
811328d0:	1004913a 	slli	r2,r2,4
811328d4:	10806f84 	addi	r2,r2,446
811328d8:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
811328dc:	d0a09617 	ldw	r2,-32168(gp)
811328e0:	10c00a17 	ldw	r3,40(r2)
811328e4:	e0bffc17 	ldw	r2,-16(fp)
811328e8:	1885883a 	add	r2,r3,r2
811328ec:	10800104 	addi	r2,r2,4
811328f0:	10800023 	ldbuio	r2,0(r2)
811328f4:	10803fcc 	andi	r2,r2,255
811328f8:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
811328fc:	e0bffd07 	ldb	r2,-12(fp)
81132900:	10800060 	cmpeqi	r2,r2,1
81132904:	1000091e 	bne	r2,zero,8113292c <Check_for_Master_Boot_Record+0xc8>
81132908:	e0bffd07 	ldb	r2,-12(fp)
8113290c:	10800120 	cmpeqi	r2,r2,4
81132910:	1000061e 	bne	r2,zero,8113292c <Check_for_Master_Boot_Record+0xc8>
81132914:	e0bffd07 	ldb	r2,-12(fp)
81132918:	108001a0 	cmpeqi	r2,r2,6
8113291c:	1000031e 	bne	r2,zero,8113292c <Check_for_Master_Boot_Record+0xc8>
81132920:	e0bffd07 	ldb	r2,-12(fp)
81132924:	10800398 	cmpnei	r2,r2,14
81132928:	10002d1e 	bne	r2,zero,811329e0 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
8113292c:	d0a09617 	ldw	r2,-32168(gp)
81132930:	10c00a17 	ldw	r3,40(r2)
81132934:	e0bffc17 	ldw	r2,-16(fp)
81132938:	1885883a 	add	r2,r3,r2
8113293c:	10800284 	addi	r2,r2,10
81132940:	1080002b 	ldhuio	r2,0(r2)
81132944:	10bfffcc 	andi	r2,r2,65535
81132948:	1006943a 	slli	r3,r2,16
8113294c:	d0a09617 	ldw	r2,-32168(gp)
81132950:	11000a17 	ldw	r4,40(r2)
81132954:	e0bffc17 	ldw	r2,-16(fp)
81132958:	2085883a 	add	r2,r4,r2
8113295c:	10800204 	addi	r2,r2,8
81132960:	1080002b 	ldhuio	r2,0(r2)
81132964:	10bfffcc 	andi	r2,r2,65535
81132968:	10bfffcc 	andi	r2,r2,65535
8113296c:	1884b03a 	or	r2,r3,r2
81132970:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
81132974:	d0a09617 	ldw	r2,-32168(gp)
81132978:	10c00a17 	ldw	r3,40(r2)
8113297c:	e0bffc17 	ldw	r2,-16(fp)
81132980:	1885883a 	add	r2,r3,r2
81132984:	10800384 	addi	r2,r2,14
81132988:	1080002b 	ldhuio	r2,0(r2)
8113298c:	10bfffcc 	andi	r2,r2,65535
81132990:	1006943a 	slli	r3,r2,16
81132994:	d0a09617 	ldw	r2,-32168(gp)
81132998:	11000a17 	ldw	r4,40(r2)
8113299c:	e0bffc17 	ldw	r2,-16(fp)
811329a0:	2085883a 	add	r2,r4,r2
811329a4:	10800304 	addi	r2,r2,12
811329a8:	1080002b 	ldhuio	r2,0(r2)
811329ac:	10bfffcc 	andi	r2,r2,65535
811329b0:	10bfffcc 	andi	r2,r2,65535
811329b4:	1884b03a 	or	r2,r3,r2
811329b8:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
811329bc:	e0bfff17 	ldw	r2,-4(fp)
811329c0:	0080070e 	bge	zero,r2,811329e0 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
811329c4:	00800044 	movi	r2,1
811329c8:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
811329cc:	e0bfff17 	ldw	r2,-4(fp)
811329d0:	d0a09515 	stw	r2,-32172(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
811329d4:	e0bffe17 	ldw	r2,-8(fp)
811329d8:	d0a09415 	stw	r2,-32176(gp)
						break;
811329dc:	00000606 	br	811329f8 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811329e0:	e0bffa17 	ldw	r2,-24(fp)
811329e4:	10800044 	addi	r2,r2,1
811329e8:	e0bffa15 	stw	r2,-24(fp)
811329ec:	e0bffa17 	ldw	r2,-24(fp)
811329f0:	10800110 	cmplti	r2,r2,4
811329f4:	103fb51e 	bne	r2,zero,811328cc <__reset+0xfb1128cc>
				}
			}
		}
	}

	return result;
811329f8:	e0bff917 	ldw	r2,-28(fp)
}
811329fc:	e037883a 	mov	sp,fp
81132a00:	dfc00117 	ldw	ra,4(sp)
81132a04:	df000017 	ldw	fp,0(sp)
81132a08:	dec00204 	addi	sp,sp,8
81132a0c:	f800283a 	ret

81132a10 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81132a10:	defff804 	addi	sp,sp,-32
81132a14:	de00012e 	bgeu	sp,et,81132a1c <Read_File_Record_At_Offset+0xc>
81132a18:	003b68fa 	trap	3
81132a1c:	dfc00715 	stw	ra,28(sp)
81132a20:	df000615 	stw	fp,24(sp)
81132a24:	df000604 	addi	fp,sp,24
81132a28:	e13ffc15 	stw	r4,-16(fp)
81132a2c:	e17ffd15 	stw	r5,-12(fp)
81132a30:	e1bffe15 	stw	r6,-8(fp)
81132a34:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81132a38:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81132a3c:	e0bffc17 	ldw	r2,-16(fp)
81132a40:	108007cc 	andi	r2,r2,31
81132a44:	10008d1e 	bne	r2,zero,81132c7c <Read_File_Record_At_Offset+0x26c>
81132a48:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
81132a4c:	10008b26 	beq	r2,zero,81132c7c <Read_File_Record_At_Offset+0x26c>
81132a50:	d0a08d17 	ldw	r2,-32204(gp)
81132a54:	10008926 	beq	r2,zero,81132c7c <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81132a58:	e03ffb15 	stw	zero,-20(fp)
81132a5c:	00001106 	br	81132aa4 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81132a60:	e0fffc17 	ldw	r3,-16(fp)
81132a64:	e0bffb17 	ldw	r2,-20(fp)
81132a68:	1885883a 	add	r2,r3,r2
81132a6c:	1007883a 	mov	r3,r2
81132a70:	d0a09617 	ldw	r2,-32168(gp)
81132a74:	10800a17 	ldw	r2,40(r2)
81132a78:	1885883a 	add	r2,r3,r2
81132a7c:	10800023 	ldbuio	r2,0(r2)
81132a80:	10803fcc 	andi	r2,r2,255
81132a84:	1009883a 	mov	r4,r2
81132a88:	e0fffd17 	ldw	r3,-12(fp)
81132a8c:	e0bffb17 	ldw	r2,-20(fp)
81132a90:	1885883a 	add	r2,r3,r2
81132a94:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81132a98:	e0bffb17 	ldw	r2,-20(fp)
81132a9c:	10800044 	addi	r2,r2,1
81132aa0:	e0bffb15 	stw	r2,-20(fp)
81132aa4:	e0bffb17 	ldw	r2,-20(fp)
81132aa8:	10800210 	cmplti	r2,r2,8
81132aac:	103fec1e 	bne	r2,zero,81132a60 <__reset+0xfb112a60>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81132ab0:	e03ffb15 	stw	zero,-20(fp)
81132ab4:	00001306 	br	81132b04 <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81132ab8:	e0fffc17 	ldw	r3,-16(fp)
81132abc:	e0bffb17 	ldw	r2,-20(fp)
81132ac0:	1885883a 	add	r2,r3,r2
81132ac4:	1007883a 	mov	r3,r2
81132ac8:	d0a09617 	ldw	r2,-32168(gp)
81132acc:	10800a17 	ldw	r2,40(r2)
81132ad0:	1885883a 	add	r2,r3,r2
81132ad4:	10800204 	addi	r2,r2,8
81132ad8:	10800023 	ldbuio	r2,0(r2)
81132adc:	10803fcc 	andi	r2,r2,255
81132ae0:	1009883a 	mov	r4,r2
81132ae4:	e0fffd17 	ldw	r3,-12(fp)
81132ae8:	e0bffb17 	ldw	r2,-20(fp)
81132aec:	1885883a 	add	r2,r3,r2
81132af0:	10800204 	addi	r2,r2,8
81132af4:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81132af8:	e0bffb17 	ldw	r2,-20(fp)
81132afc:	10800044 	addi	r2,r2,1
81132b00:	e0bffb15 	stw	r2,-20(fp)
81132b04:	e0bffb17 	ldw	r2,-20(fp)
81132b08:	108000d0 	cmplti	r2,r2,3
81132b0c:	103fea1e 	bne	r2,zero,81132ab8 <__reset+0xfb112ab8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81132b10:	d0a09617 	ldw	r2,-32168(gp)
81132b14:	10c00a17 	ldw	r3,40(r2)
81132b18:	e0bffc17 	ldw	r2,-16(fp)
81132b1c:	1885883a 	add	r2,r3,r2
81132b20:	108002c4 	addi	r2,r2,11
81132b24:	10800023 	ldbuio	r2,0(r2)
81132b28:	10803fcc 	andi	r2,r2,255
81132b2c:	1007883a 	mov	r3,r2
81132b30:	e0bffd17 	ldw	r2,-12(fp)
81132b34:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81132b38:	d0a09617 	ldw	r2,-32168(gp)
81132b3c:	10c00a17 	ldw	r3,40(r2)
81132b40:	e0bffc17 	ldw	r2,-16(fp)
81132b44:	1885883a 	add	r2,r3,r2
81132b48:	10800384 	addi	r2,r2,14
81132b4c:	1080002b 	ldhuio	r2,0(r2)
81132b50:	10bfffcc 	andi	r2,r2,65535
81132b54:	1007883a 	mov	r3,r2
81132b58:	e0bffd17 	ldw	r2,-12(fp)
81132b5c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81132b60:	d0a09617 	ldw	r2,-32168(gp)
81132b64:	10c00a17 	ldw	r3,40(r2)
81132b68:	e0bffc17 	ldw	r2,-16(fp)
81132b6c:	1885883a 	add	r2,r3,r2
81132b70:	10800404 	addi	r2,r2,16
81132b74:	1080002b 	ldhuio	r2,0(r2)
81132b78:	10bfffcc 	andi	r2,r2,65535
81132b7c:	1007883a 	mov	r3,r2
81132b80:	e0bffd17 	ldw	r2,-12(fp)
81132b84:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81132b88:	d0a09617 	ldw	r2,-32168(gp)
81132b8c:	10c00a17 	ldw	r3,40(r2)
81132b90:	e0bffc17 	ldw	r2,-16(fp)
81132b94:	1885883a 	add	r2,r3,r2
81132b98:	10800484 	addi	r2,r2,18
81132b9c:	1080002b 	ldhuio	r2,0(r2)
81132ba0:	10bfffcc 	andi	r2,r2,65535
81132ba4:	1007883a 	mov	r3,r2
81132ba8:	e0bffd17 	ldw	r2,-12(fp)
81132bac:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
81132bb0:	d0a09617 	ldw	r2,-32168(gp)
81132bb4:	10c00a17 	ldw	r3,40(r2)
81132bb8:	e0bffc17 	ldw	r2,-16(fp)
81132bbc:	1885883a 	add	r2,r3,r2
81132bc0:	10800584 	addi	r2,r2,22
81132bc4:	1080002b 	ldhuio	r2,0(r2)
81132bc8:	10bfffcc 	andi	r2,r2,65535
81132bcc:	1007883a 	mov	r3,r2
81132bd0:	e0bffd17 	ldw	r2,-12(fp)
81132bd4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81132bd8:	d0a09617 	ldw	r2,-32168(gp)
81132bdc:	10c00a17 	ldw	r3,40(r2)
81132be0:	e0bffc17 	ldw	r2,-16(fp)
81132be4:	1885883a 	add	r2,r3,r2
81132be8:	10800604 	addi	r2,r2,24
81132bec:	1080002b 	ldhuio	r2,0(r2)
81132bf0:	10bfffcc 	andi	r2,r2,65535
81132bf4:	1007883a 	mov	r3,r2
81132bf8:	e0bffd17 	ldw	r2,-12(fp)
81132bfc:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81132c00:	d0a09617 	ldw	r2,-32168(gp)
81132c04:	10c00a17 	ldw	r3,40(r2)
81132c08:	e0bffc17 	ldw	r2,-16(fp)
81132c0c:	1885883a 	add	r2,r3,r2
81132c10:	10800684 	addi	r2,r2,26
81132c14:	1080002b 	ldhuio	r2,0(r2)
81132c18:	10bfffcc 	andi	r2,r2,65535
81132c1c:	1007883a 	mov	r3,r2
81132c20:	e0bffd17 	ldw	r2,-12(fp)
81132c24:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81132c28:	d0a09617 	ldw	r2,-32168(gp)
81132c2c:	10c00a17 	ldw	r3,40(r2)
81132c30:	e0bffc17 	ldw	r2,-16(fp)
81132c34:	1885883a 	add	r2,r3,r2
81132c38:	10800704 	addi	r2,r2,28
81132c3c:	10800037 	ldwio	r2,0(r2)
81132c40:	1007883a 	mov	r3,r2
81132c44:	e0bffd17 	ldw	r2,-12(fp)
81132c48:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81132c4c:	e0bffd17 	ldw	r2,-12(fp)
81132c50:	e0fffe17 	ldw	r3,-8(fp)
81132c54:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81132c58:	e0bffd17 	ldw	r2,-12(fp)
81132c5c:	e0ffff17 	ldw	r3,-4(fp)
81132c60:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81132c64:	e0bffc17 	ldw	r2,-16(fp)
81132c68:	1007883a 	mov	r3,r2
81132c6c:	e0bffd17 	ldw	r2,-12(fp)
81132c70:	10c00c0d 	sth	r3,48(r2)
		result = true;
81132c74:	00800044 	movi	r2,1
81132c78:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81132c7c:	e0bffa17 	ldw	r2,-24(fp)
}
81132c80:	e037883a 	mov	sp,fp
81132c84:	dfc00117 	ldw	ra,4(sp)
81132c88:	df000017 	ldw	fp,0(sp)
81132c8c:	dec00204 	addi	sp,sp,8
81132c90:	f800283a 	ret

81132c94 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81132c94:	defff904 	addi	sp,sp,-28
81132c98:	de00012e 	bgeu	sp,et,81132ca0 <Write_File_Record_At_Offset+0xc>
81132c9c:	003b68fa 	trap	3
81132ca0:	dfc00615 	stw	ra,24(sp)
81132ca4:	df000515 	stw	fp,20(sp)
81132ca8:	df000504 	addi	fp,sp,20
81132cac:	e13ffe15 	stw	r4,-8(fp)
81132cb0:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81132cb4:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81132cb8:	e0bffe17 	ldw	r2,-8(fp)
81132cbc:	108007cc 	andi	r2,r2,31
81132cc0:	1000931e 	bne	r2,zero,81132f10 <Write_File_Record_At_Offset+0x27c>
81132cc4:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
81132cc8:	10009126 	beq	r2,zero,81132f10 <Write_File_Record_At_Offset+0x27c>
81132ccc:	d0a08d17 	ldw	r2,-32204(gp)
81132cd0:	10008f26 	beq	r2,zero,81132f10 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81132cd4:	e03ffc15 	stw	zero,-16(fp)
81132cd8:	00001f06 	br	81132d58 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
81132cdc:	e0bffc17 	ldw	r2,-16(fp)
81132ce0:	10800044 	addi	r2,r2,1
81132ce4:	e0ffff17 	ldw	r3,-4(fp)
81132ce8:	1885883a 	add	r2,r3,r2
81132cec:	10800003 	ldbu	r2,0(r2)
81132cf0:	10803fcc 	andi	r2,r2,255
81132cf4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81132cf8:	e0bffd0f 	ldh	r2,-12(fp)
81132cfc:	1004923a 	slli	r2,r2,8
81132d00:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81132d04:	e0ffff17 	ldw	r3,-4(fp)
81132d08:	e0bffc17 	ldw	r2,-16(fp)
81132d0c:	1885883a 	add	r2,r3,r2
81132d10:	10800003 	ldbu	r2,0(r2)
81132d14:	10c03fcc 	andi	r3,r2,255
81132d18:	e0bffd0b 	ldhu	r2,-12(fp)
81132d1c:	1884b03a 	or	r2,r3,r2
81132d20:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
81132d24:	e0fffe17 	ldw	r3,-8(fp)
81132d28:	e0bffc17 	ldw	r2,-16(fp)
81132d2c:	1885883a 	add	r2,r3,r2
81132d30:	1007883a 	mov	r3,r2
81132d34:	d0a09617 	ldw	r2,-32168(gp)
81132d38:	10800a17 	ldw	r2,40(r2)
81132d3c:	1885883a 	add	r2,r3,r2
81132d40:	1007883a 	mov	r3,r2
81132d44:	e0bffd0f 	ldh	r2,-12(fp)
81132d48:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81132d4c:	e0bffc17 	ldw	r2,-16(fp)
81132d50:	10800084 	addi	r2,r2,2
81132d54:	e0bffc15 	stw	r2,-16(fp)
81132d58:	e0bffc17 	ldw	r2,-16(fp)
81132d5c:	10800210 	cmplti	r2,r2,8
81132d60:	103fde1e 	bne	r2,zero,81132cdc <__reset+0xfb112cdc>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81132d64:	e03ffc15 	stw	zero,-16(fp)
81132d68:	00001306 	br	81132db8 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81132d6c:	e0fffe17 	ldw	r3,-8(fp)
81132d70:	e0bffc17 	ldw	r2,-16(fp)
81132d74:	1885883a 	add	r2,r3,r2
81132d78:	1007883a 	mov	r3,r2
81132d7c:	d0a09617 	ldw	r2,-32168(gp)
81132d80:	10800a17 	ldw	r2,40(r2)
81132d84:	1885883a 	add	r2,r3,r2
81132d88:	10800204 	addi	r2,r2,8
81132d8c:	1009883a 	mov	r4,r2
81132d90:	e0ffff17 	ldw	r3,-4(fp)
81132d94:	e0bffc17 	ldw	r2,-16(fp)
81132d98:	1885883a 	add	r2,r3,r2
81132d9c:	10800204 	addi	r2,r2,8
81132da0:	10800003 	ldbu	r2,0(r2)
81132da4:	10803fcc 	andi	r2,r2,255
81132da8:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81132dac:	e0bffc17 	ldw	r2,-16(fp)
81132db0:	10800044 	addi	r2,r2,1
81132db4:	e0bffc15 	stw	r2,-16(fp)
81132db8:	e0bffc17 	ldw	r2,-16(fp)
81132dbc:	108000d0 	cmplti	r2,r2,3
81132dc0:	103fea1e 	bne	r2,zero,81132d6c <__reset+0xfb112d6c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
81132dc4:	d0a09617 	ldw	r2,-32168(gp)
81132dc8:	10c00a17 	ldw	r3,40(r2)
81132dcc:	e0bffe17 	ldw	r2,-8(fp)
81132dd0:	1885883a 	add	r2,r3,r2
81132dd4:	108002c4 	addi	r2,r2,11
81132dd8:	1007883a 	mov	r3,r2
81132ddc:	e0bfff17 	ldw	r2,-4(fp)
81132de0:	108002c3 	ldbu	r2,11(r2)
81132de4:	10803fcc 	andi	r2,r2,255
81132de8:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81132dec:	d0a09617 	ldw	r2,-32168(gp)
81132df0:	10c00a17 	ldw	r3,40(r2)
81132df4:	e0bffe17 	ldw	r2,-8(fp)
81132df8:	1885883a 	add	r2,r3,r2
81132dfc:	10800384 	addi	r2,r2,14
81132e00:	1007883a 	mov	r3,r2
81132e04:	e0bfff17 	ldw	r2,-4(fp)
81132e08:	1080030b 	ldhu	r2,12(r2)
81132e0c:	10bfffcc 	andi	r2,r2,65535
81132e10:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
81132e14:	d0a09617 	ldw	r2,-32168(gp)
81132e18:	10c00a17 	ldw	r3,40(r2)
81132e1c:	e0bffe17 	ldw	r2,-8(fp)
81132e20:	1885883a 	add	r2,r3,r2
81132e24:	10800404 	addi	r2,r2,16
81132e28:	1007883a 	mov	r3,r2
81132e2c:	e0bfff17 	ldw	r2,-4(fp)
81132e30:	1080038b 	ldhu	r2,14(r2)
81132e34:	10bfffcc 	andi	r2,r2,65535
81132e38:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81132e3c:	d0a09617 	ldw	r2,-32168(gp)
81132e40:	10c00a17 	ldw	r3,40(r2)
81132e44:	e0bffe17 	ldw	r2,-8(fp)
81132e48:	1885883a 	add	r2,r3,r2
81132e4c:	10800484 	addi	r2,r2,18
81132e50:	1007883a 	mov	r3,r2
81132e54:	e0bfff17 	ldw	r2,-4(fp)
81132e58:	1080040b 	ldhu	r2,16(r2)
81132e5c:	10bfffcc 	andi	r2,r2,65535
81132e60:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81132e64:	d0a09617 	ldw	r2,-32168(gp)
81132e68:	10c00a17 	ldw	r3,40(r2)
81132e6c:	e0bffe17 	ldw	r2,-8(fp)
81132e70:	1885883a 	add	r2,r3,r2
81132e74:	10800584 	addi	r2,r2,22
81132e78:	1007883a 	mov	r3,r2
81132e7c:	e0bfff17 	ldw	r2,-4(fp)
81132e80:	1080048b 	ldhu	r2,18(r2)
81132e84:	10bfffcc 	andi	r2,r2,65535
81132e88:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
81132e8c:	d0a09617 	ldw	r2,-32168(gp)
81132e90:	10c00a17 	ldw	r3,40(r2)
81132e94:	e0bffe17 	ldw	r2,-8(fp)
81132e98:	1885883a 	add	r2,r3,r2
81132e9c:	10800604 	addi	r2,r2,24
81132ea0:	1007883a 	mov	r3,r2
81132ea4:	e0bfff17 	ldw	r2,-4(fp)
81132ea8:	1080050b 	ldhu	r2,20(r2)
81132eac:	10bfffcc 	andi	r2,r2,65535
81132eb0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81132eb4:	d0a09617 	ldw	r2,-32168(gp)
81132eb8:	10c00a17 	ldw	r3,40(r2)
81132ebc:	e0bffe17 	ldw	r2,-8(fp)
81132ec0:	1885883a 	add	r2,r3,r2
81132ec4:	10800684 	addi	r2,r2,26
81132ec8:	1007883a 	mov	r3,r2
81132ecc:	e0bfff17 	ldw	r2,-4(fp)
81132ed0:	1080058b 	ldhu	r2,22(r2)
81132ed4:	10bfffcc 	andi	r2,r2,65535
81132ed8:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81132edc:	d0a09617 	ldw	r2,-32168(gp)
81132ee0:	10c00a17 	ldw	r3,40(r2)
81132ee4:	e0bffe17 	ldw	r2,-8(fp)
81132ee8:	1885883a 	add	r2,r3,r2
81132eec:	10800704 	addi	r2,r2,28
81132ef0:	1007883a 	mov	r3,r2
81132ef4:	e0bfff17 	ldw	r2,-4(fp)
81132ef8:	10800617 	ldw	r2,24(r2)
81132efc:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81132f00:	00800044 	movi	r2,1
81132f04:	d0a09715 	stw	r2,-32164(gp)
        result = true;
81132f08:	00800044 	movi	r2,1
81132f0c:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
81132f10:	e0bffb17 	ldw	r2,-20(fp)
}
81132f14:	e037883a 	mov	sp,fp
81132f18:	dfc00117 	ldw	ra,4(sp)
81132f1c:	df000017 	ldw	fp,0(sp)
81132f20:	dec00204 	addi	sp,sp,8
81132f24:	f800283a 	ret

81132f28 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81132f28:	defff904 	addi	sp,sp,-28
81132f2c:	de00012e 	bgeu	sp,et,81132f34 <Check_for_DOS_FAT+0xc>
81132f30:	003b68fa 	trap	3
81132f34:	dfc00615 	stw	ra,24(sp)
81132f38:	df000515 	stw	fp,20(sp)
81132f3c:	df000504 	addi	fp,sp,20
81132f40:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81132f44:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81132f48:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81132f4c:	e17fff17 	ldw	r5,-4(fp)
81132f50:	0009883a 	mov	r4,zero
81132f54:	11325e00 	call	811325e0 <Read_Sector_Data>
81132f58:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81132f5c:	d0a09617 	ldw	r2,-32168(gp)
81132f60:	10800a17 	ldw	r2,40(r2)
81132f64:	10807f84 	addi	r2,r2,510
81132f68:	1080002b 	ldhuio	r2,0(r2)
81132f6c:	10bfffcc 	andi	r2,r2,65535
81132f70:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81132f74:	e0bffe0f 	ldh	r2,-8(fp)
81132f78:	10ffffcc 	andi	r3,r2,65535
81132f7c:	00aa9554 	movui	r2,43605
81132f80:	1881841e 	bne	r3,r2,81133594 <Check_for_DOS_FAT+0x66c>
81132f84:	e0bffb17 	ldw	r2,-20(fp)
81132f88:	10018226 	beq	r2,zero,81133594 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
81132f8c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
81132f90:	d0a09617 	ldw	r2,-32168(gp)
81132f94:	10800a17 	ldw	r2,40(r2)
81132f98:	10800023 	ldbuio	r2,0(r2)
81132f9c:	10803fcc 	andi	r2,r2,255
81132fa0:	1007883a 	mov	r3,r2
81132fa4:	00a04574 	movhi	r2,33045
81132fa8:	1090b404 	addi	r2,r2,17104
81132fac:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
81132fb0:	d0a09617 	ldw	r2,-32168(gp)
81132fb4:	10800a17 	ldw	r2,40(r2)
81132fb8:	10800044 	addi	r2,r2,1
81132fbc:	10800023 	ldbuio	r2,0(r2)
81132fc0:	10803fcc 	andi	r2,r2,255
81132fc4:	1007883a 	mov	r3,r2
81132fc8:	00a04574 	movhi	r2,33045
81132fcc:	1090b404 	addi	r2,r2,17104
81132fd0:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81132fd4:	d0a09617 	ldw	r2,-32168(gp)
81132fd8:	10800a17 	ldw	r2,40(r2)
81132fdc:	10800084 	addi	r2,r2,2
81132fe0:	10800023 	ldbuio	r2,0(r2)
81132fe4:	10803fcc 	andi	r2,r2,255
81132fe8:	1007883a 	mov	r3,r2
81132fec:	00a04574 	movhi	r2,33045
81132ff0:	1090b404 	addi	r2,r2,17104
81132ff4:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81132ff8:	e03ffc15 	stw	zero,-16(fp)
81132ffc:	00001106 	br	81133044 <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81133000:	d0a09617 	ldw	r2,-32168(gp)
81133004:	10c00a17 	ldw	r3,40(r2)
81133008:	e0bffc17 	ldw	r2,-16(fp)
8113300c:	1885883a 	add	r2,r3,r2
81133010:	108000c4 	addi	r2,r2,3
81133014:	10800023 	ldbuio	r2,0(r2)
81133018:	10803fcc 	andi	r2,r2,255
8113301c:	1009883a 	mov	r4,r2
81133020:	00a04574 	movhi	r2,33045
81133024:	1090b404 	addi	r2,r2,17104
81133028:	e0fffc17 	ldw	r3,-16(fp)
8113302c:	10c5883a 	add	r2,r2,r3
81133030:	108000c4 	addi	r2,r2,3
81133034:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81133038:	e0bffc17 	ldw	r2,-16(fp)
8113303c:	10800044 	addi	r2,r2,1
81133040:	e0bffc15 	stw	r2,-16(fp)
81133044:	e0bffc17 	ldw	r2,-16(fp)
81133048:	10800210 	cmplti	r2,r2,8
8113304c:	103fec1e 	bne	r2,zero,81133000 <__reset+0xfb113000>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
81133050:	d0a09617 	ldw	r2,-32168(gp)
81133054:	10800a17 	ldw	r2,40(r2)
81133058:	10800304 	addi	r2,r2,12
8113305c:	10800023 	ldbuio	r2,0(r2)
81133060:	10803fcc 	andi	r2,r2,255
81133064:	1004923a 	slli	r2,r2,8
81133068:	1007883a 	mov	r3,r2
8113306c:	d0a09617 	ldw	r2,-32168(gp)
81133070:	10800a17 	ldw	r2,40(r2)
81133074:	108002c4 	addi	r2,r2,11
81133078:	10800023 	ldbuio	r2,0(r2)
8113307c:	10803fcc 	andi	r2,r2,255
81133080:	10803fcc 	andi	r2,r2,255
81133084:	1080201c 	xori	r2,r2,128
81133088:	10bfe004 	addi	r2,r2,-128
8113308c:	1884b03a 	or	r2,r3,r2
81133090:	1007883a 	mov	r3,r2
81133094:	00a04574 	movhi	r2,33045
81133098:	1090b404 	addi	r2,r2,17104
8113309c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
811330a0:	d0a09617 	ldw	r2,-32168(gp)
811330a4:	10800a17 	ldw	r2,40(r2)
811330a8:	10800344 	addi	r2,r2,13
811330ac:	10800023 	ldbuio	r2,0(r2)
811330b0:	10803fcc 	andi	r2,r2,255
811330b4:	1007883a 	mov	r3,r2
811330b8:	00a04574 	movhi	r2,33045
811330bc:	1090b404 	addi	r2,r2,17104
811330c0:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
811330c4:	d0a09617 	ldw	r2,-32168(gp)
811330c8:	10800a17 	ldw	r2,40(r2)
811330cc:	10800384 	addi	r2,r2,14
811330d0:	1080002b 	ldhuio	r2,0(r2)
811330d4:	10bfffcc 	andi	r2,r2,65535
811330d8:	1007883a 	mov	r3,r2
811330dc:	00a04574 	movhi	r2,33045
811330e0:	1090b404 	addi	r2,r2,17104
811330e4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
811330e8:	d0a09617 	ldw	r2,-32168(gp)
811330ec:	10800a17 	ldw	r2,40(r2)
811330f0:	10800404 	addi	r2,r2,16
811330f4:	10800023 	ldbuio	r2,0(r2)
811330f8:	10803fcc 	andi	r2,r2,255
811330fc:	1007883a 	mov	r3,r2
81133100:	00a04574 	movhi	r2,33045
81133104:	1090b404 	addi	r2,r2,17104
81133108:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
8113310c:	d0a09617 	ldw	r2,-32168(gp)
81133110:	10800a17 	ldw	r2,40(r2)
81133114:	10800484 	addi	r2,r2,18
81133118:	10800023 	ldbuio	r2,0(r2)
8113311c:	10803fcc 	andi	r2,r2,255
81133120:	1004923a 	slli	r2,r2,8
81133124:	1007883a 	mov	r3,r2
81133128:	d0a09617 	ldw	r2,-32168(gp)
8113312c:	10800a17 	ldw	r2,40(r2)
81133130:	10800444 	addi	r2,r2,17
81133134:	10800023 	ldbuio	r2,0(r2)
81133138:	10803fcc 	andi	r2,r2,255
8113313c:	10803fcc 	andi	r2,r2,255
81133140:	1884b03a 	or	r2,r3,r2
81133144:	1007883a 	mov	r3,r2
81133148:	00a04574 	movhi	r2,33045
8113314c:	1090b404 	addi	r2,r2,17104
81133150:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81133154:	d0a09617 	ldw	r2,-32168(gp)
81133158:	10800a17 	ldw	r2,40(r2)
8113315c:	10800504 	addi	r2,r2,20
81133160:	10800023 	ldbuio	r2,0(r2)
81133164:	10803fcc 	andi	r2,r2,255
81133168:	1004923a 	slli	r2,r2,8
8113316c:	1007883a 	mov	r3,r2
81133170:	d0a09617 	ldw	r2,-32168(gp)
81133174:	10800a17 	ldw	r2,40(r2)
81133178:	108004c4 	addi	r2,r2,19
8113317c:	10800023 	ldbuio	r2,0(r2)
81133180:	10803fcc 	andi	r2,r2,255
81133184:	10803fcc 	andi	r2,r2,255
81133188:	1884b03a 	or	r2,r3,r2
8113318c:	1007883a 	mov	r3,r2
81133190:	00a04574 	movhi	r2,33045
81133194:	1090b404 	addi	r2,r2,17104
81133198:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
8113319c:	d0a09617 	ldw	r2,-32168(gp)
811331a0:	10800a17 	ldw	r2,40(r2)
811331a4:	10800544 	addi	r2,r2,21
811331a8:	10800023 	ldbuio	r2,0(r2)
811331ac:	10803fcc 	andi	r2,r2,255
811331b0:	1007883a 	mov	r3,r2
811331b4:	00a04574 	movhi	r2,33045
811331b8:	1090b404 	addi	r2,r2,17104
811331bc:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
811331c0:	d0a09617 	ldw	r2,-32168(gp)
811331c4:	10800a17 	ldw	r2,40(r2)
811331c8:	10800584 	addi	r2,r2,22
811331cc:	1080002b 	ldhuio	r2,0(r2)
811331d0:	10bfffcc 	andi	r2,r2,65535
811331d4:	1007883a 	mov	r3,r2
811331d8:	00a04574 	movhi	r2,33045
811331dc:	1090b404 	addi	r2,r2,17104
811331e0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
811331e4:	d0a09617 	ldw	r2,-32168(gp)
811331e8:	10800a17 	ldw	r2,40(r2)
811331ec:	10800604 	addi	r2,r2,24
811331f0:	1080002b 	ldhuio	r2,0(r2)
811331f4:	10bfffcc 	andi	r2,r2,65535
811331f8:	1007883a 	mov	r3,r2
811331fc:	00a04574 	movhi	r2,33045
81133200:	1090b404 	addi	r2,r2,17104
81133204:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81133208:	d0a09617 	ldw	r2,-32168(gp)
8113320c:	10800a17 	ldw	r2,40(r2)
81133210:	10800684 	addi	r2,r2,26
81133214:	1080002b 	ldhuio	r2,0(r2)
81133218:	10bfffcc 	andi	r2,r2,65535
8113321c:	1007883a 	mov	r3,r2
81133220:	00a04574 	movhi	r2,33045
81133224:	1090b404 	addi	r2,r2,17104
81133228:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
8113322c:	d0a09617 	ldw	r2,-32168(gp)
81133230:	10800a17 	ldw	r2,40(r2)
81133234:	10800704 	addi	r2,r2,28
81133238:	10800037 	ldwio	r2,0(r2)
8113323c:	1007883a 	mov	r3,r2
81133240:	00a04574 	movhi	r2,33045
81133244:	1090b404 	addi	r2,r2,17104
81133248:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
8113324c:	d0a09617 	ldw	r2,-32168(gp)
81133250:	10800a17 	ldw	r2,40(r2)
81133254:	10800804 	addi	r2,r2,32
81133258:	10800037 	ldwio	r2,0(r2)
8113325c:	1007883a 	mov	r3,r2
81133260:	00a04574 	movhi	r2,33045
81133264:	1090b404 	addi	r2,r2,17104
81133268:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
8113326c:	d0a09617 	ldw	r2,-32168(gp)
81133270:	10800a17 	ldw	r2,40(r2)
81133274:	10800904 	addi	r2,r2,36
81133278:	10800023 	ldbuio	r2,0(r2)
8113327c:	10803fcc 	andi	r2,r2,255
81133280:	1007883a 	mov	r3,r2
81133284:	00a04574 	movhi	r2,33045
81133288:	1090b404 	addi	r2,r2,17104
8113328c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
81133290:	d0a09617 	ldw	r2,-32168(gp)
81133294:	10800a17 	ldw	r2,40(r2)
81133298:	10800944 	addi	r2,r2,37
8113329c:	10800023 	ldbuio	r2,0(r2)
811332a0:	10803fcc 	andi	r2,r2,255
811332a4:	1007883a 	mov	r3,r2
811332a8:	00a04574 	movhi	r2,33045
811332ac:	1090b404 	addi	r2,r2,17104
811332b0:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
811332b4:	d0a09617 	ldw	r2,-32168(gp)
811332b8:	10800a17 	ldw	r2,40(r2)
811332bc:	10800984 	addi	r2,r2,38
811332c0:	10800023 	ldbuio	r2,0(r2)
811332c4:	10803fcc 	andi	r2,r2,255
811332c8:	1007883a 	mov	r3,r2
811332cc:	00a04574 	movhi	r2,33045
811332d0:	1090b404 	addi	r2,r2,17104
811332d4:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
811332d8:	00a04574 	movhi	r2,33045
811332dc:	1090b404 	addi	r2,r2,17104
811332e0:	1080040b 	ldhu	r2,16(r2)
811332e4:	10ffffcc 	andi	r3,r2,65535
811332e8:	00a04574 	movhi	r2,33045
811332ec:	1090b404 	addi	r2,r2,17104
811332f0:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
811332f4:	00a04574 	movhi	r2,33045
811332f8:	1090b404 	addi	r2,r2,17104
811332fc:	10c01117 	ldw	r3,68(r2)
81133300:	00a04574 	movhi	r2,33045
81133304:	1090b404 	addi	r2,r2,17104
81133308:	1080068b 	ldhu	r2,26(r2)
8113330c:	10bfffcc 	andi	r2,r2,65535
81133310:	1887883a 	add	r3,r3,r2
81133314:	00a04574 	movhi	r2,33045
81133318:	1090b404 	addi	r2,r2,17104
8113331c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81133320:	00a04574 	movhi	r2,33045
81133324:	1090b404 	addi	r2,r2,17104
81133328:	10c01217 	ldw	r3,72(r2)
8113332c:	00a04574 	movhi	r2,33045
81133330:	1090b404 	addi	r2,r2,17104
81133334:	1080068b 	ldhu	r2,26(r2)
81133338:	10bfffcc 	andi	r2,r2,65535
8113333c:	1887883a 	add	r3,r3,r2
81133340:	00a04574 	movhi	r2,33045
81133344:	1090b404 	addi	r2,r2,17104
81133348:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
8113334c:	00a04574 	movhi	r2,33045
81133350:	1090b404 	addi	r2,r2,17104
81133354:	10c01317 	ldw	r3,76(r2)
81133358:	00a04574 	movhi	r2,33045
8113335c:	1090b404 	addi	r2,r2,17104
81133360:	1080050b 	ldhu	r2,20(r2)
81133364:	10bfffcc 	andi	r2,r2,65535
81133368:	1008917a 	slli	r4,r2,5
8113336c:	00a04574 	movhi	r2,33045
81133370:	1090b404 	addi	r2,r2,17104
81133374:	1080030b 	ldhu	r2,12(r2)
81133378:	10bfffcc 	andi	r2,r2,65535
8113337c:	2085283a 	div	r2,r4,r2
81133380:	1887883a 	add	r3,r3,r2
81133384:	00a04574 	movhi	r2,33045
81133388:	1090b404 	addi	r2,r2,17104
8113338c:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
81133390:	00a04574 	movhi	r2,33045
81133394:	1090b404 	addi	r2,r2,17104
81133398:	1080058b 	ldhu	r2,22(r2)
8113339c:	10bfffcc 	andi	r2,r2,65535
811333a0:	10000b26 	beq	r2,zero,811333d0 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811333a4:	00a04574 	movhi	r2,33045
811333a8:	1090b404 	addi	r2,r2,17104
811333ac:	1080058b 	ldhu	r2,22(r2)
811333b0:	10ffffcc 	andi	r3,r2,65535
811333b4:	00a04574 	movhi	r2,33045
811333b8:	1090b404 	addi	r2,r2,17104
811333bc:	10800383 	ldbu	r2,14(r2)
811333c0:	10803fcc 	andi	r2,r2,255
811333c4:	1885283a 	div	r2,r3,r2
811333c8:	e0bffd15 	stw	r2,-12(fp)
811333cc:	00000906 	br	811333f4 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
811333d0:	00a04574 	movhi	r2,33045
811333d4:	1090b404 	addi	r2,r2,17104
811333d8:	10c00917 	ldw	r3,36(r2)
811333dc:	00a04574 	movhi	r2,33045
811333e0:	1090b404 	addi	r2,r2,17104
811333e4:	10800383 	ldbu	r2,14(r2)
811333e8:	10803fcc 	andi	r2,r2,255
811333ec:	1885203a 	divu	r2,r3,r2
811333f0:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
811333f4:	e0bffd17 	ldw	r2,-12(fp)
811333f8:	1083fdc8 	cmpgei	r2,r2,4087
811333fc:	1000051e 	bne	r2,zero,81133414 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81133400:	00a04574 	movhi	r2,33045
81133404:	1090b404 	addi	r2,r2,17104
81133408:	00c00304 	movi	r3,12
8113340c:	10c01085 	stb	r3,66(r2)
81133410:	00000c06 	br	81133444 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
81133414:	e0bffd17 	ldw	r2,-12(fp)
81133418:	00fffb54 	movui	r3,65517
8113341c:	18800516 	blt	r3,r2,81133434 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81133420:	00a04574 	movhi	r2,33045
81133424:	1090b404 	addi	r2,r2,17104
81133428:	00c00404 	movi	r3,16
8113342c:	10c01085 	stb	r3,66(r2)
81133430:	00000406 	br	81133444 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
81133434:	00a04574 	movhi	r2,33045
81133438:	1090b404 	addi	r2,r2,17104
8113343c:	00c00804 	movi	r3,32
81133440:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
81133444:	e03ffc15 	stw	zero,-16(fp)
81133448:	00001106 	br	81133490 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
8113344c:	d0a09617 	ldw	r2,-32168(gp)
81133450:	10c00a17 	ldw	r3,40(r2)
81133454:	e0bffc17 	ldw	r2,-16(fp)
81133458:	1885883a 	add	r2,r3,r2
8113345c:	108009c4 	addi	r2,r2,39
81133460:	10800023 	ldbuio	r2,0(r2)
81133464:	10803fcc 	andi	r2,r2,255
81133468:	1009883a 	mov	r4,r2
8113346c:	00a04574 	movhi	r2,33045
81133470:	1090b404 	addi	r2,r2,17104
81133474:	e0fffc17 	ldw	r3,-16(fp)
81133478:	10c5883a 	add	r2,r2,r3
8113347c:	10800ac4 	addi	r2,r2,43
81133480:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
81133484:	e0bffc17 	ldw	r2,-16(fp)
81133488:	10800044 	addi	r2,r2,1
8113348c:	e0bffc15 	stw	r2,-16(fp)
81133490:	e0bffc17 	ldw	r2,-16(fp)
81133494:	10800110 	cmplti	r2,r2,4
81133498:	103fec1e 	bne	r2,zero,8113344c <__reset+0xfb11344c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8113349c:	e03ffc15 	stw	zero,-16(fp)
811334a0:	00001106 	br	811334e8 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811334a4:	d0a09617 	ldw	r2,-32168(gp)
811334a8:	10c00a17 	ldw	r3,40(r2)
811334ac:	e0bffc17 	ldw	r2,-16(fp)
811334b0:	1885883a 	add	r2,r3,r2
811334b4:	10800ac4 	addi	r2,r2,43
811334b8:	10800023 	ldbuio	r2,0(r2)
811334bc:	10803fcc 	andi	r2,r2,255
811334c0:	1009883a 	mov	r4,r2
811334c4:	00a04574 	movhi	r2,33045
811334c8:	1090b404 	addi	r2,r2,17104
811334cc:	e0fffc17 	ldw	r3,-16(fp)
811334d0:	10c5883a 	add	r2,r2,r3
811334d4:	10800bc4 	addi	r2,r2,47
811334d8:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811334dc:	e0bffc17 	ldw	r2,-16(fp)
811334e0:	10800044 	addi	r2,r2,1
811334e4:	e0bffc15 	stw	r2,-16(fp)
811334e8:	e0bffc17 	ldw	r2,-16(fp)
811334ec:	108002d0 	cmplti	r2,r2,11
811334f0:	103fec1e 	bne	r2,zero,811334a4 <__reset+0xfb1134a4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
811334f4:	e03ffc15 	stw	zero,-16(fp)
811334f8:	00001106 	br	81133540 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
811334fc:	d0a09617 	ldw	r2,-32168(gp)
81133500:	10c00a17 	ldw	r3,40(r2)
81133504:	e0bffc17 	ldw	r2,-16(fp)
81133508:	1885883a 	add	r2,r3,r2
8113350c:	10800d84 	addi	r2,r2,54
81133510:	10800023 	ldbuio	r2,0(r2)
81133514:	10803fcc 	andi	r2,r2,255
81133518:	1009883a 	mov	r4,r2
8113351c:	00a04574 	movhi	r2,33045
81133520:	1090b404 	addi	r2,r2,17104
81133524:	e0fffc17 	ldw	r3,-16(fp)
81133528:	10c5883a 	add	r2,r2,r3
8113352c:	10800e84 	addi	r2,r2,58
81133530:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81133534:	e0bffc17 	ldw	r2,-16(fp)
81133538:	10800044 	addi	r2,r2,1
8113353c:	e0bffc15 	stw	r2,-16(fp)
81133540:	e0bffc17 	ldw	r2,-16(fp)
81133544:	10800210 	cmplti	r2,r2,8
81133548:	103fec1e 	bne	r2,zero,811334fc <__reset+0xfb1134fc>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8113354c:	e03ffc15 	stw	zero,-16(fp)
81133550:	00000a06 	br	8113357c <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
81133554:	00a04574 	movhi	r2,33045
81133558:	1090c904 	addi	r2,r2,17188
8113355c:	e0fffc17 	ldw	r3,-16(fp)
81133560:	180691ba 	slli	r3,r3,6
81133564:	10c5883a 	add	r2,r2,r3
81133568:	10800f04 	addi	r2,r2,60
8113356c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81133570:	e0bffc17 	ldw	r2,-16(fp)
81133574:	10800044 	addi	r2,r2,1
81133578:	e0bffc15 	stw	r2,-16(fp)
8113357c:	e0bffc17 	ldw	r2,-16(fp)
81133580:	10800510 	cmplti	r2,r2,20
81133584:	103ff31e 	bne	r2,zero,81133554 <__reset+0xfb113554>
		{
			active_files[counter].in_use = false;
		}
		result = true;
81133588:	00800044 	movi	r2,1
8113358c:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
81133590:	00000106 	br	81133598 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
81133594:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
81133598:	e0bffb17 	ldw	r2,-20(fp)
}
8113359c:	e037883a 	mov	sp,fp
811335a0:	dfc00117 	ldw	ra,4(sp)
811335a4:	df000017 	ldw	fp,0(sp)
811335a8:	dec00204 	addi	sp,sp,8
811335ac:	f800283a 	ret

811335b0 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811335b0:	defffc04 	addi	sp,sp,-16
811335b4:	de00012e 	bgeu	sp,et,811335bc <Look_for_FAT16+0xc>
811335b8:	003b68fa 	trap	3
811335bc:	dfc00315 	stw	ra,12(sp)
811335c0:	df000215 	stw	fp,8(sp)
811335c4:	df000204 	addi	fp,sp,8
	bool result = false;
811335c8:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811335cc:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
811335d0:	10002e26 	beq	r2,zero,8113368c <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
811335d4:	d0a09017 	ldw	r2,-32192(gp)
811335d8:	1080000b 	ldhu	r2,0(r2)
811335dc:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
811335e0:	d0209415 	stw	zero,-32176(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
811335e4:	d0209515 	stw	zero,-32172(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
811335e8:	e0bfff0f 	ldh	r2,-4(fp)
811335ec:	10002716 	blt	r2,zero,8113368c <Look_for_FAT16+0xdc>
811335f0:	e0bfff0b 	ldhu	r2,-4(fp)
811335f4:	10bfffcc 	andi	r2,r2,65535
811335f8:	1083000c 	andi	r2,r2,3072
811335fc:	10830020 	cmpeqi	r2,r2,3072
81133600:	1000221e 	bne	r2,zero,8113368c <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
81133604:	e0bfff0b 	ldhu	r2,-4(fp)
81133608:	10bfffcc 	andi	r2,r2,65535
8113360c:	1083000c 	andi	r2,r2,3072
81133610:	10810018 	cmpnei	r2,r2,1024
81133614:	1000031e 	bne	r2,zero,81133624 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81133618:	0009883a 	mov	r4,zero
8113361c:	1132f280 	call	81132f28 <Check_for_DOS_FAT>
81133620:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
81133624:	e0bfff0b 	ldhu	r2,-4(fp)
81133628:	10bfffcc 	andi	r2,r2,65535
8113362c:	1083000c 	andi	r2,r2,3072
81133630:	1000061e 	bne	r2,zero,8113364c <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
81133634:	11328640 	call	81132864 <Check_for_Master_Boot_Record>
81133638:	10000426 	beq	r2,zero,8113364c <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
8113363c:	d0a09417 	ldw	r2,-32176(gp)
81133640:	1009883a 	mov	r4,r2
81133644:	1132f280 	call	81132f28 <Check_for_DOS_FAT>
81133648:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
8113364c:	e0bffe17 	ldw	r2,-8(fp)
81133650:	10800058 	cmpnei	r2,r2,1
81133654:	10000d1e 	bne	r2,zero,8113368c <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81133658:	00a04574 	movhi	r2,33045
8113365c:	1090b404 	addi	r2,r2,17104
81133660:	10801083 	ldbu	r2,66(r2)
81133664:	10803fcc 	andi	r2,r2,255
81133668:	10800420 	cmpeqi	r2,r2,16
8113366c:	1000021e 	bne	r2,zero,81133678 <Look_for_FAT16+0xc8>
				{
					result = false;
81133670:	e03ffe15 	stw	zero,-8(fp)
81133674:	00000506 	br	8113368c <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81133678:	00a04574 	movhi	r2,33045
8113367c:	1090b404 	addi	r2,r2,17104
81133680:	1080058b 	ldhu	r2,22(r2)
81133684:	10bfffcc 	andi	r2,r2,65535
81133688:	d0a09515 	stw	r2,-32172(gp)
				}
			}
		}
	}
	return result;
8113368c:	e0bffe17 	ldw	r2,-8(fp)
}
81133690:	e037883a 	mov	sp,fp
81133694:	dfc00117 	ldw	ra,4(sp)
81133698:	df000017 	ldw	fp,0(sp)
8113369c:	dec00204 	addi	sp,sp,8
811336a0:	f800283a 	ret

811336a4 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811336a4:	defffb04 	addi	sp,sp,-20
811336a8:	de00012e 	bgeu	sp,et,811336b0 <filename_to_upper_case+0xc>
811336ac:	003b68fa 	trap	3
811336b0:	dfc00415 	stw	ra,16(sp)
811336b4:	df000315 	stw	fp,12(sp)
811336b8:	df000304 	addi	fp,sp,12
811336bc:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
811336c0:	e13fff17 	ldw	r4,-4(fp)
811336c4:	11134b00 	call	811134b0 <strlen>
811336c8:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
811336cc:	e03ffd15 	stw	zero,-12(fp)
811336d0:	00001e06 	br	8113374c <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
811336d4:	e0bffd17 	ldw	r2,-12(fp)
811336d8:	e0ffff17 	ldw	r3,-4(fp)
811336dc:	1885883a 	add	r2,r3,r2
811336e0:	10800003 	ldbu	r2,0(r2)
811336e4:	10803fcc 	andi	r2,r2,255
811336e8:	1080201c 	xori	r2,r2,128
811336ec:	10bfe004 	addi	r2,r2,-128
811336f0:	10801850 	cmplti	r2,r2,97
811336f4:	1000121e 	bne	r2,zero,81133740 <filename_to_upper_case+0x9c>
811336f8:	e0bffd17 	ldw	r2,-12(fp)
811336fc:	e0ffff17 	ldw	r3,-4(fp)
81133700:	1885883a 	add	r2,r3,r2
81133704:	10800003 	ldbu	r2,0(r2)
81133708:	10803fcc 	andi	r2,r2,255
8113370c:	1080201c 	xori	r2,r2,128
81133710:	10bfe004 	addi	r2,r2,-128
81133714:	10801ec8 	cmpgei	r2,r2,123
81133718:	1000091e 	bne	r2,zero,81133740 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
8113371c:	e0bffd17 	ldw	r2,-12(fp)
81133720:	e0ffff17 	ldw	r3,-4(fp)
81133724:	1885883a 	add	r2,r3,r2
81133728:	e0fffd17 	ldw	r3,-12(fp)
8113372c:	e13fff17 	ldw	r4,-4(fp)
81133730:	20c7883a 	add	r3,r4,r3
81133734:	18c00003 	ldbu	r3,0(r3)
81133738:	18fff804 	addi	r3,r3,-32
8113373c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81133740:	e0bffd17 	ldw	r2,-12(fp)
81133744:	10800044 	addi	r2,r2,1
81133748:	e0bffd15 	stw	r2,-12(fp)
8113374c:	e0fffd17 	ldw	r3,-12(fp)
81133750:	e0bffe17 	ldw	r2,-8(fp)
81133754:	18bfdf16 	blt	r3,r2,811336d4 <__reset+0xfb1136d4>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81133758:	0001883a 	nop
8113375c:	e037883a 	mov	sp,fp
81133760:	dfc00117 	ldw	ra,4(sp)
81133764:	df000017 	ldw	fp,0(sp)
81133768:	dec00204 	addi	sp,sp,8
8113376c:	f800283a 	ret

81133770 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81133770:	defff804 	addi	sp,sp,-32
81133774:	de00012e 	bgeu	sp,et,8113377c <check_file_name_for_FAT16_compliance+0xc>
81133778:	003b68fa 	trap	3
8113377c:	dfc00715 	stw	ra,28(sp)
81133780:	df000615 	stw	fp,24(sp)
81133784:	df000604 	addi	fp,sp,24
81133788:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
8113378c:	e13fff17 	ldw	r4,-4(fp)
81133790:	11134b00 	call	811134b0 <strlen>
81133794:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81133798:	00bfffc4 	movi	r2,-1
8113379c:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
811337a0:	00bfffc4 	movi	r2,-1
811337a4:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
811337a8:	00800044 	movi	r2,1
811337ac:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
811337b0:	e03ffa15 	stw	zero,-24(fp)
811337b4:	00006d06 	br	8113396c <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
811337b8:	e0bffa17 	ldw	r2,-24(fp)
811337bc:	e0ffff17 	ldw	r3,-4(fp)
811337c0:	1885883a 	add	r2,r3,r2
811337c4:	10800003 	ldbu	r2,0(r2)
811337c8:	10803fcc 	andi	r2,r2,255
811337cc:	1080201c 	xori	r2,r2,128
811337d0:	10bfe004 	addi	r2,r2,-128
811337d4:	10800820 	cmpeqi	r2,r2,32
811337d8:	10003e1e 	bne	r2,zero,811338d4 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811337dc:	e0bffa17 	ldw	r2,-24(fp)
811337e0:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
811337e4:	e0bffb17 	ldw	r2,-20(fp)
811337e8:	1880121e 	bne	r3,r2,81133834 <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811337ec:	e0bffa17 	ldw	r2,-24(fp)
811337f0:	e0ffff17 	ldw	r3,-4(fp)
811337f4:	1885883a 	add	r2,r3,r2
811337f8:	10800003 	ldbu	r2,0(r2)
811337fc:	10803fcc 	andi	r2,r2,255
81133800:	1080201c 	xori	r2,r2,128
81133804:	10bfe004 	addi	r2,r2,-128
81133808:	10801720 	cmpeqi	r2,r2,92
8113380c:	1000311e 	bne	r2,zero,811338d4 <check_file_name_for_FAT16_compliance+0x164>
81133810:	e0bffa17 	ldw	r2,-24(fp)
81133814:	e0ffff17 	ldw	r3,-4(fp)
81133818:	1885883a 	add	r2,r3,r2
8113381c:	10800003 	ldbu	r2,0(r2)
81133820:	10803fcc 	andi	r2,r2,255
81133824:	1080201c 	xori	r2,r2,128
81133828:	10bfe004 	addi	r2,r2,-128
8113382c:	10800be0 	cmpeqi	r2,r2,47
81133830:	1000281e 	bne	r2,zero,811338d4 <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81133834:	e0fffa17 	ldw	r3,-24(fp)
81133838:	e0bffc17 	ldw	r2,-16(fp)
8113383c:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81133840:	10800258 	cmpnei	r2,r2,9
81133844:	1000091e 	bne	r2,zero,8113386c <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81133848:	e0bffa17 	ldw	r2,-24(fp)
8113384c:	e0ffff17 	ldw	r3,-4(fp)
81133850:	1885883a 	add	r2,r3,r2
81133854:	10800003 	ldbu	r2,0(r2)
81133858:	10803fcc 	andi	r2,r2,255
8113385c:	1080201c 	xori	r2,r2,128
81133860:	10bfe004 	addi	r2,r2,-128
81133864:	10800b98 	cmpnei	r2,r2,46
81133868:	10001a1e 	bne	r2,zero,811338d4 <check_file_name_for_FAT16_compliance+0x164>
8113386c:	e0fffb17 	ldw	r3,-20(fp)
81133870:	e0bffc17 	ldw	r2,-16(fp)
81133874:	18801926 	beq	r3,r2,811338dc <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81133878:	e0fffa17 	ldw	r3,-24(fp)
8113387c:	e0bffc17 	ldw	r2,-16(fp)
81133880:	1885c83a 	sub	r2,r3,r2
81133884:	10800110 	cmplti	r2,r2,4
81133888:	1000141e 	bne	r2,zero,811338dc <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8113388c:	e0bffa17 	ldw	r2,-24(fp)
81133890:	e0ffff17 	ldw	r3,-4(fp)
81133894:	1885883a 	add	r2,r3,r2
81133898:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8113389c:	10803fcc 	andi	r2,r2,255
811338a0:	1080201c 	xori	r2,r2,128
811338a4:	10bfe004 	addi	r2,r2,-128
811338a8:	10801720 	cmpeqi	r2,r2,92
811338ac:	10000b1e 	bne	r2,zero,811338dc <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
811338b0:	e0bffa17 	ldw	r2,-24(fp)
811338b4:	e0ffff17 	ldw	r3,-4(fp)
811338b8:	1885883a 	add	r2,r3,r2
811338bc:	10800003 	ldbu	r2,0(r2)
811338c0:	10803fcc 	andi	r2,r2,255
811338c4:	1080201c 	xori	r2,r2,128
811338c8:	10bfe004 	addi	r2,r2,-128
811338cc:	10800be0 	cmpeqi	r2,r2,47
811338d0:	1000021e 	bne	r2,zero,811338dc <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
811338d4:	e03ffd15 	stw	zero,-12(fp)
            break;
811338d8:	00002706 	br	81133978 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
811338dc:	e0bffa17 	ldw	r2,-24(fp)
811338e0:	e0ffff17 	ldw	r3,-4(fp)
811338e4:	1885883a 	add	r2,r3,r2
811338e8:	10800003 	ldbu	r2,0(r2)
811338ec:	10803fcc 	andi	r2,r2,255
811338f0:	1080201c 	xori	r2,r2,128
811338f4:	10bfe004 	addi	r2,r2,-128
811338f8:	10801720 	cmpeqi	r2,r2,92
811338fc:	1000091e 	bne	r2,zero,81133924 <check_file_name_for_FAT16_compliance+0x1b4>
81133900:	e0bffa17 	ldw	r2,-24(fp)
81133904:	e0ffff17 	ldw	r3,-4(fp)
81133908:	1885883a 	add	r2,r3,r2
8113390c:	10800003 	ldbu	r2,0(r2)
81133910:	10803fcc 	andi	r2,r2,255
81133914:	1080201c 	xori	r2,r2,128
81133918:	10bfe004 	addi	r2,r2,-128
8113391c:	10800bd8 	cmpnei	r2,r2,47
81133920:	1000041e 	bne	r2,zero,81133934 <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
81133924:	e0bffa17 	ldw	r2,-24(fp)
81133928:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
8113392c:	e0bffa17 	ldw	r2,-24(fp)
81133930:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
81133934:	e0bffa17 	ldw	r2,-24(fp)
81133938:	e0ffff17 	ldw	r3,-4(fp)
8113393c:	1885883a 	add	r2,r3,r2
81133940:	10800003 	ldbu	r2,0(r2)
81133944:	10803fcc 	andi	r2,r2,255
81133948:	1080201c 	xori	r2,r2,128
8113394c:	10bfe004 	addi	r2,r2,-128
81133950:	10800b98 	cmpnei	r2,r2,46
81133954:	1000021e 	bne	r2,zero,81133960 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81133958:	e0bffa17 	ldw	r2,-24(fp)
8113395c:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81133960:	e0bffa17 	ldw	r2,-24(fp)
81133964:	10800044 	addi	r2,r2,1
81133968:	e0bffa15 	stw	r2,-24(fp)
8113396c:	e0fffa17 	ldw	r3,-24(fp)
81133970:	e0bffe17 	ldw	r2,-8(fp)
81133974:	18bf9016 	blt	r3,r2,811337b8 <__reset+0xfb1137b8>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81133978:	e0bffe17 	ldw	r2,-8(fp)
8113397c:	10bfffc4 	addi	r2,r2,-1
81133980:	e0ffff17 	ldw	r3,-4(fp)
81133984:	1885883a 	add	r2,r3,r2
81133988:	10800003 	ldbu	r2,0(r2)
8113398c:	10803fcc 	andi	r2,r2,255
81133990:	1080201c 	xori	r2,r2,128
81133994:	10bfe004 	addi	r2,r2,-128
81133998:	10801720 	cmpeqi	r2,r2,92
8113399c:	10000a1e 	bne	r2,zero,811339c8 <check_file_name_for_FAT16_compliance+0x258>
811339a0:	e0bffe17 	ldw	r2,-8(fp)
811339a4:	10bfffc4 	addi	r2,r2,-1
811339a8:	e0ffff17 	ldw	r3,-4(fp)
811339ac:	1885883a 	add	r2,r3,r2
811339b0:	10800003 	ldbu	r2,0(r2)
811339b4:	10803fcc 	andi	r2,r2,255
811339b8:	1080201c 	xori	r2,r2,128
811339bc:	10bfe004 	addi	r2,r2,-128
811339c0:	10800bd8 	cmpnei	r2,r2,47
811339c4:	1000011e 	bne	r2,zero,811339cc <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
811339c8:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
811339cc:	e0bffd17 	ldw	r2,-12(fp)
}
811339d0:	e037883a 	mov	sp,fp
811339d4:	dfc00117 	ldw	ra,4(sp)
811339d8:	df000017 	ldw	fp,0(sp)
811339dc:	dec00204 	addi	sp,sp,8
811339e0:	f800283a 	ret

811339e4 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
811339e4:	defffb04 	addi	sp,sp,-20
811339e8:	de00012e 	bgeu	sp,et,811339f0 <get_dir_divider_location+0xc>
811339ec:	003b68fa 	trap	3
811339f0:	dfc00415 	stw	ra,16(sp)
811339f4:	df000315 	stw	fp,12(sp)
811339f8:	df000304 	addi	fp,sp,12
811339fc:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81133a00:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
81133a04:	e13fff17 	ldw	r4,-4(fp)
81133a08:	11134b00 	call	811134b0 <strlen>
81133a0c:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81133a10:	e03ffd15 	stw	zero,-12(fp)
81133a14:	00001506 	br	81133a6c <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81133a18:	e0bffd17 	ldw	r2,-12(fp)
81133a1c:	e0ffff17 	ldw	r3,-4(fp)
81133a20:	1885883a 	add	r2,r3,r2
81133a24:	10800003 	ldbu	r2,0(r2)
81133a28:	10803fcc 	andi	r2,r2,255
81133a2c:	1080201c 	xori	r2,r2,128
81133a30:	10bfe004 	addi	r2,r2,-128
81133a34:	10801720 	cmpeqi	r2,r2,92
81133a38:	10000f1e 	bne	r2,zero,81133a78 <get_dir_divider_location+0x94>
81133a3c:	e0bffd17 	ldw	r2,-12(fp)
81133a40:	e0ffff17 	ldw	r3,-4(fp)
81133a44:	1885883a 	add	r2,r3,r2
81133a48:	10800003 	ldbu	r2,0(r2)
81133a4c:	10803fcc 	andi	r2,r2,255
81133a50:	1080201c 	xori	r2,r2,128
81133a54:	10bfe004 	addi	r2,r2,-128
81133a58:	10800be0 	cmpeqi	r2,r2,47
81133a5c:	1000061e 	bne	r2,zero,81133a78 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81133a60:	e0bffd17 	ldw	r2,-12(fp)
81133a64:	10800044 	addi	r2,r2,1
81133a68:	e0bffd15 	stw	r2,-12(fp)
81133a6c:	e0fffd17 	ldw	r3,-12(fp)
81133a70:	e0bffe17 	ldw	r2,-8(fp)
81133a74:	18bfe816 	blt	r3,r2,81133a18 <__reset+0xfb113a18>
        {
            break;
        }
    }
    
    if (index == length)
81133a78:	e0fffd17 	ldw	r3,-12(fp)
81133a7c:	e0bffe17 	ldw	r2,-8(fp)
81133a80:	1880021e 	bne	r3,r2,81133a8c <get_dir_divider_location+0xa8>
    {
        index = -1;
81133a84:	00bfffc4 	movi	r2,-1
81133a88:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81133a8c:	e0bffd17 	ldw	r2,-12(fp)
}
81133a90:	e037883a 	mov	sp,fp
81133a94:	dfc00117 	ldw	ra,4(sp)
81133a98:	df000017 	ldw	fp,0(sp)
81133a9c:	dec00204 	addi	sp,sp,8
81133aa0:	f800283a 	ret

81133aa4 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81133aa4:	defffa04 	addi	sp,sp,-24
81133aa8:	de00012e 	bgeu	sp,et,81133ab0 <match_file_record_to_name_ext+0xc>
81133aac:	003b68fa 	trap	3
81133ab0:	df000515 	stw	fp,20(sp)
81133ab4:	df000504 	addi	fp,sp,20
81133ab8:	e13ffd15 	stw	r4,-12(fp)
81133abc:	e17ffe15 	stw	r5,-8(fp)
81133ac0:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
81133ac4:	00800044 	movi	r2,1
81133ac8:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81133acc:	e03ffc15 	stw	zero,-16(fp)
81133ad0:	00004606 	br	81133bec <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
81133ad4:	e0fffd17 	ldw	r3,-12(fp)
81133ad8:	e0bffc17 	ldw	r2,-16(fp)
81133adc:	1885883a 	add	r2,r3,r2
81133ae0:	10800003 	ldbu	r2,0(r2)
81133ae4:	10803fcc 	andi	r2,r2,255
81133ae8:	10801870 	cmpltui	r2,r2,97
81133aec:	1000101e 	bne	r2,zero,81133b30 <match_file_record_to_name_ext+0x8c>
81133af0:	e0fffd17 	ldw	r3,-12(fp)
81133af4:	e0bffc17 	ldw	r2,-16(fp)
81133af8:	1885883a 	add	r2,r3,r2
81133afc:	10800003 	ldbu	r2,0(r2)
81133b00:	10803fcc 	andi	r2,r2,255
81133b04:	10801ee8 	cmpgeui	r2,r2,123
81133b08:	1000091e 	bne	r2,zero,81133b30 <match_file_record_to_name_ext+0x8c>
81133b0c:	e0fffd17 	ldw	r3,-12(fp)
81133b10:	e0bffc17 	ldw	r2,-16(fp)
81133b14:	1885883a 	add	r2,r3,r2
81133b18:	10800003 	ldbu	r2,0(r2)
81133b1c:	10bff804 	addi	r2,r2,-32
81133b20:	10c03fcc 	andi	r3,r2,255
81133b24:	18c0201c 	xori	r3,r3,128
81133b28:	18ffe004 	addi	r3,r3,-128
81133b2c:	00000706 	br	81133b4c <match_file_record_to_name_ext+0xa8>
81133b30:	e0fffd17 	ldw	r3,-12(fp)
81133b34:	e0bffc17 	ldw	r2,-16(fp)
81133b38:	1885883a 	add	r2,r3,r2
81133b3c:	10800003 	ldbu	r2,0(r2)
81133b40:	10c03fcc 	andi	r3,r2,255
81133b44:	18c0201c 	xori	r3,r3,128
81133b48:	18ffe004 	addi	r3,r3,-128
81133b4c:	e0bffc17 	ldw	r2,-16(fp)
81133b50:	e13ffe17 	ldw	r4,-8(fp)
81133b54:	2085883a 	add	r2,r4,r2
81133b58:	10800003 	ldbu	r2,0(r2)
81133b5c:	10803fcc 	andi	r2,r2,255
81133b60:	1080201c 	xori	r2,r2,128
81133b64:	10bfe004 	addi	r2,r2,-128
81133b68:	10801850 	cmplti	r2,r2,97
81133b6c:	1000121e 	bne	r2,zero,81133bb8 <match_file_record_to_name_ext+0x114>
81133b70:	e0bffc17 	ldw	r2,-16(fp)
81133b74:	e13ffe17 	ldw	r4,-8(fp)
81133b78:	2085883a 	add	r2,r4,r2
81133b7c:	10800003 	ldbu	r2,0(r2)
81133b80:	10803fcc 	andi	r2,r2,255
81133b84:	1080201c 	xori	r2,r2,128
81133b88:	10bfe004 	addi	r2,r2,-128
81133b8c:	10801ec8 	cmpgei	r2,r2,123
81133b90:	1000091e 	bne	r2,zero,81133bb8 <match_file_record_to_name_ext+0x114>
81133b94:	e0bffc17 	ldw	r2,-16(fp)
81133b98:	e13ffe17 	ldw	r4,-8(fp)
81133b9c:	2085883a 	add	r2,r4,r2
81133ba0:	10800003 	ldbu	r2,0(r2)
81133ba4:	10bff804 	addi	r2,r2,-32
81133ba8:	10803fcc 	andi	r2,r2,255
81133bac:	1080201c 	xori	r2,r2,128
81133bb0:	10bfe004 	addi	r2,r2,-128
81133bb4:	00000706 	br	81133bd4 <match_file_record_to_name_ext+0x130>
81133bb8:	e0bffc17 	ldw	r2,-16(fp)
81133bbc:	e13ffe17 	ldw	r4,-8(fp)
81133bc0:	2085883a 	add	r2,r4,r2
81133bc4:	10800003 	ldbu	r2,0(r2)
81133bc8:	10803fcc 	andi	r2,r2,255
81133bcc:	1080201c 	xori	r2,r2,128
81133bd0:	10bfe004 	addi	r2,r2,-128
81133bd4:	18800226 	beq	r3,r2,81133be0 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81133bd8:	e03ffb15 	stw	zero,-20(fp)
			break;
81133bdc:	00000606 	br	81133bf8 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81133be0:	e0bffc17 	ldw	r2,-16(fp)
81133be4:	10800044 	addi	r2,r2,1
81133be8:	e0bffc15 	stw	r2,-16(fp)
81133bec:	e0bffc17 	ldw	r2,-16(fp)
81133bf0:	10800210 	cmplti	r2,r2,8
81133bf4:	103fb71e 	bne	r2,zero,81133ad4 <__reset+0xfb113ad4>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81133bf8:	e03ffc15 	stw	zero,-16(fp)
81133bfc:	00004a06 	br	81133d28 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81133c00:	e0fffd17 	ldw	r3,-12(fp)
81133c04:	e0bffc17 	ldw	r2,-16(fp)
81133c08:	1885883a 	add	r2,r3,r2
81133c0c:	10800204 	addi	r2,r2,8
81133c10:	10800003 	ldbu	r2,0(r2)
81133c14:	10803fcc 	andi	r2,r2,255
81133c18:	10801870 	cmpltui	r2,r2,97
81133c1c:	1000121e 	bne	r2,zero,81133c68 <match_file_record_to_name_ext+0x1c4>
81133c20:	e0fffd17 	ldw	r3,-12(fp)
81133c24:	e0bffc17 	ldw	r2,-16(fp)
81133c28:	1885883a 	add	r2,r3,r2
81133c2c:	10800204 	addi	r2,r2,8
81133c30:	10800003 	ldbu	r2,0(r2)
81133c34:	10803fcc 	andi	r2,r2,255
81133c38:	10801ee8 	cmpgeui	r2,r2,123
81133c3c:	10000a1e 	bne	r2,zero,81133c68 <match_file_record_to_name_ext+0x1c4>
81133c40:	e0fffd17 	ldw	r3,-12(fp)
81133c44:	e0bffc17 	ldw	r2,-16(fp)
81133c48:	1885883a 	add	r2,r3,r2
81133c4c:	10800204 	addi	r2,r2,8
81133c50:	10800003 	ldbu	r2,0(r2)
81133c54:	10bff804 	addi	r2,r2,-32
81133c58:	10c03fcc 	andi	r3,r2,255
81133c5c:	18c0201c 	xori	r3,r3,128
81133c60:	18ffe004 	addi	r3,r3,-128
81133c64:	00000806 	br	81133c88 <match_file_record_to_name_ext+0x1e4>
81133c68:	e0fffd17 	ldw	r3,-12(fp)
81133c6c:	e0bffc17 	ldw	r2,-16(fp)
81133c70:	1885883a 	add	r2,r3,r2
81133c74:	10800204 	addi	r2,r2,8
81133c78:	10800003 	ldbu	r2,0(r2)
81133c7c:	10c03fcc 	andi	r3,r2,255
81133c80:	18c0201c 	xori	r3,r3,128
81133c84:	18ffe004 	addi	r3,r3,-128
81133c88:	e0bffc17 	ldw	r2,-16(fp)
81133c8c:	e13fff17 	ldw	r4,-4(fp)
81133c90:	2085883a 	add	r2,r4,r2
81133c94:	10800003 	ldbu	r2,0(r2)
81133c98:	10803fcc 	andi	r2,r2,255
81133c9c:	1080201c 	xori	r2,r2,128
81133ca0:	10bfe004 	addi	r2,r2,-128
81133ca4:	10801850 	cmplti	r2,r2,97
81133ca8:	1000121e 	bne	r2,zero,81133cf4 <match_file_record_to_name_ext+0x250>
81133cac:	e0bffc17 	ldw	r2,-16(fp)
81133cb0:	e13fff17 	ldw	r4,-4(fp)
81133cb4:	2085883a 	add	r2,r4,r2
81133cb8:	10800003 	ldbu	r2,0(r2)
81133cbc:	10803fcc 	andi	r2,r2,255
81133cc0:	1080201c 	xori	r2,r2,128
81133cc4:	10bfe004 	addi	r2,r2,-128
81133cc8:	10801ec8 	cmpgei	r2,r2,123
81133ccc:	1000091e 	bne	r2,zero,81133cf4 <match_file_record_to_name_ext+0x250>
81133cd0:	e0bffc17 	ldw	r2,-16(fp)
81133cd4:	e13fff17 	ldw	r4,-4(fp)
81133cd8:	2085883a 	add	r2,r4,r2
81133cdc:	10800003 	ldbu	r2,0(r2)
81133ce0:	10bff804 	addi	r2,r2,-32
81133ce4:	10803fcc 	andi	r2,r2,255
81133ce8:	1080201c 	xori	r2,r2,128
81133cec:	10bfe004 	addi	r2,r2,-128
81133cf0:	00000706 	br	81133d10 <match_file_record_to_name_ext+0x26c>
81133cf4:	e0bffc17 	ldw	r2,-16(fp)
81133cf8:	e13fff17 	ldw	r4,-4(fp)
81133cfc:	2085883a 	add	r2,r4,r2
81133d00:	10800003 	ldbu	r2,0(r2)
81133d04:	10803fcc 	andi	r2,r2,255
81133d08:	1080201c 	xori	r2,r2,128
81133d0c:	10bfe004 	addi	r2,r2,-128
81133d10:	18800226 	beq	r3,r2,81133d1c <match_file_record_to_name_ext+0x278>
        {
            match = false;
81133d14:	e03ffb15 	stw	zero,-20(fp)
			break;
81133d18:	00000606 	br	81133d34 <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81133d1c:	e0bffc17 	ldw	r2,-16(fp)
81133d20:	10800044 	addi	r2,r2,1
81133d24:	e0bffc15 	stw	r2,-16(fp)
81133d28:	e0bffc17 	ldw	r2,-16(fp)
81133d2c:	108000d0 	cmplti	r2,r2,3
81133d30:	103fb31e 	bne	r2,zero,81133c00 <__reset+0xfb113c00>
        {
            match = false;
			break;
        }
    }
	return match;
81133d34:	e0bffb17 	ldw	r2,-20(fp)
}
81133d38:	e037883a 	mov	sp,fp
81133d3c:	df000017 	ldw	fp,0(sp)
81133d40:	dec00104 	addi	sp,sp,4
81133d44:	f800283a 	ret

81133d48 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81133d48:	deffe704 	addi	sp,sp,-100
81133d4c:	de00012e 	bgeu	sp,et,81133d54 <get_home_directory_cluster_for_file+0xc>
81133d50:	003b68fa 	trap	3
81133d54:	dfc01815 	stw	ra,96(sp)
81133d58:	df001715 	stw	fp,92(sp)
81133d5c:	df001704 	addi	fp,sp,92
81133d60:	e13ffd15 	stw	r4,-12(fp)
81133d64:	e17ffe15 	stw	r5,-8(fp)
81133d68:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81133d6c:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81133d70:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81133d74:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81133d78:	e13ffd17 	ldw	r4,-12(fp)
81133d7c:	11339e40 	call	811339e4 <get_dir_divider_location>
81133d80:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81133d84:	00012f06 	br	81134244 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81133d88:	00800804 	movi	r2,32
81133d8c:	e0bff905 	stb	r2,-28(fp)
81133d90:	00800804 	movi	r2,32
81133d94:	e0bff945 	stb	r2,-27(fp)
81133d98:	00800804 	movi	r2,32
81133d9c:	e0bff985 	stb	r2,-26(fp)
81133da0:	00800804 	movi	r2,32
81133da4:	e0bff9c5 	stb	r2,-25(fp)
81133da8:	00800804 	movi	r2,32
81133dac:	e0bffa05 	stb	r2,-24(fp)
81133db0:	00800804 	movi	r2,32
81133db4:	e0bffa45 	stb	r2,-23(fp)
81133db8:	00800804 	movi	r2,32
81133dbc:	e0bffa85 	stb	r2,-22(fp)
81133dc0:	00800804 	movi	r2,32
81133dc4:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81133dc8:	00800804 	movi	r2,32
81133dcc:	e0bffb05 	stb	r2,-20(fp)
81133dd0:	00800804 	movi	r2,32
81133dd4:	e0bffb45 	stb	r2,-19(fp)
81133dd8:	00800804 	movi	r2,32
81133ddc:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81133de0:	00bfffc4 	movi	r2,-1
81133de4:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81133de8:	e0bfea17 	ldw	r2,-88(fp)
81133dec:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81133df0:	e03fec15 	stw	zero,-80(fp)
81133df4:	00002d06 	br	81133eac <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81133df8:	e0ffec17 	ldw	r3,-80(fp)
81133dfc:	e0bfed17 	ldw	r2,-76(fp)
81133e00:	1885883a 	add	r2,r3,r2
81133e04:	1007883a 	mov	r3,r2
81133e08:	e0bffd17 	ldw	r2,-12(fp)
81133e0c:	10c5883a 	add	r2,r2,r3
81133e10:	10800003 	ldbu	r2,0(r2)
81133e14:	10803fcc 	andi	r2,r2,255
81133e18:	1080201c 	xori	r2,r2,128
81133e1c:	10bfe004 	addi	r2,r2,-128
81133e20:	10800b98 	cmpnei	r2,r2,46
81133e24:	1000031e 	bne	r2,zero,81133e34 <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81133e28:	e0bfec17 	ldw	r2,-80(fp)
81133e2c:	e0bfee15 	stw	r2,-72(fp)
81133e30:	00001b06 	br	81133ea0 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
81133e34:	e0bfee17 	ldw	r2,-72(fp)
81133e38:	10000c0e 	bge	r2,zero,81133e6c <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81133e3c:	e0ffec17 	ldw	r3,-80(fp)
81133e40:	e0bfed17 	ldw	r2,-76(fp)
81133e44:	1885883a 	add	r2,r3,r2
81133e48:	1007883a 	mov	r3,r2
81133e4c:	e0bffd17 	ldw	r2,-12(fp)
81133e50:	10c5883a 	add	r2,r2,r3
81133e54:	10c00003 	ldbu	r3,0(r2)
81133e58:	e13ff904 	addi	r4,fp,-28
81133e5c:	e0bfec17 	ldw	r2,-80(fp)
81133e60:	2085883a 	add	r2,r4,r2
81133e64:	10c00005 	stb	r3,0(r2)
81133e68:	00000d06 	br	81133ea0 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81133e6c:	e0ffec17 	ldw	r3,-80(fp)
81133e70:	e0bfee17 	ldw	r2,-72(fp)
81133e74:	1885c83a 	sub	r2,r3,r2
81133e78:	e13fec17 	ldw	r4,-80(fp)
81133e7c:	e0ffed17 	ldw	r3,-76(fp)
81133e80:	20c7883a 	add	r3,r4,r3
81133e84:	1809883a 	mov	r4,r3
81133e88:	e0fffd17 	ldw	r3,-12(fp)
81133e8c:	1907883a 	add	r3,r3,r4
81133e90:	18c00003 	ldbu	r3,0(r3)
81133e94:	e13ffb04 	addi	r4,fp,-20
81133e98:	2085883a 	add	r2,r4,r2
81133e9c:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81133ea0:	e0bfec17 	ldw	r2,-80(fp)
81133ea4:	10800044 	addi	r2,r2,1
81133ea8:	e0bfec15 	stw	r2,-80(fp)
81133eac:	e0ffec17 	ldw	r3,-80(fp)
81133eb0:	e0bfeb17 	ldw	r2,-84(fp)
81133eb4:	18bfd016 	blt	r3,r2,81133df8 <__reset+0xfb113df8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81133eb8:	e0bfea17 	ldw	r2,-88(fp)
81133ebc:	10005c1e 	bne	r2,zero,81134030 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81133ec0:	00a04574 	movhi	r2,33045
81133ec4:	1090b404 	addi	r2,r2,17104
81133ec8:	1080050b 	ldhu	r2,20(r2)
81133ecc:	10bfffcc 	andi	r2,r2,65535
81133ed0:	1006917a 	slli	r3,r2,5
81133ed4:	00a04574 	movhi	r2,33045
81133ed8:	1090b404 	addi	r2,r2,17104
81133edc:	1080030b 	ldhu	r2,12(r2)
81133ee0:	10bfffcc 	andi	r2,r2,65535
81133ee4:	1885283a 	div	r2,r3,r2
81133ee8:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81133eec:	e03ff015 	stw	zero,-64(fp)
81133ef0:	00003b06 	br	81133fe0 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81133ef4:	00a04574 	movhi	r2,33045
81133ef8:	1090b404 	addi	r2,r2,17104
81133efc:	10c01317 	ldw	r3,76(r2)
81133f00:	e0bff017 	ldw	r2,-64(fp)
81133f04:	1885883a 	add	r2,r3,r2
81133f08:	1007883a 	mov	r3,r2
81133f0c:	d0a09417 	ldw	r2,-32176(gp)
81133f10:	100b883a 	mov	r5,r2
81133f14:	1809883a 	mov	r4,r3
81133f18:	11325e00 	call	811325e0 <Read_Sector_Data>
81133f1c:	10003426 	beq	r2,zero,81133ff0 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81133f20:	e03ff115 	stw	zero,-60(fp)
81133f24:	00002506 	br	81133fbc <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81133f28:	e0bff117 	ldw	r2,-60(fp)
81133f2c:	1004917a 	slli	r2,r2,5
81133f30:	e0fff017 	ldw	r3,-64(fp)
81133f34:	180f883a 	mov	r7,r3
81133f38:	000d883a 	mov	r6,zero
81133f3c:	e17fff17 	ldw	r5,-4(fp)
81133f40:	1009883a 	mov	r4,r2
81133f44:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81133f48:	e0bfff17 	ldw	r2,-4(fp)
81133f4c:	10800003 	ldbu	r2,0(r2)
81133f50:	10803fcc 	andi	r2,r2,255
81133f54:	10803960 	cmpeqi	r2,r2,229
81133f58:	1000151e 	bne	r2,zero,81133fb0 <get_home_directory_cluster_for_file+0x268>
81133f5c:	e0bfff17 	ldw	r2,-4(fp)
81133f60:	10800003 	ldbu	r2,0(r2)
81133f64:	10803fcc 	andi	r2,r2,255
81133f68:	10001126 	beq	r2,zero,81133fb0 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81133f6c:	e0fffb04 	addi	r3,fp,-20
81133f70:	e0bff904 	addi	r2,fp,-28
81133f74:	180d883a 	mov	r6,r3
81133f78:	100b883a 	mov	r5,r2
81133f7c:	e13fff17 	ldw	r4,-4(fp)
81133f80:	1133aa40 	call	81133aa4 <match_file_record_to_name_ext>
81133f84:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81133f88:	e0bff817 	ldw	r2,-32(fp)
81133f8c:	10000826 	beq	r2,zero,81133fb0 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
81133f90:	e0bfff17 	ldw	r2,-4(fp)
81133f94:	1080058b 	ldhu	r2,22(r2)
81133f98:	10bfffcc 	andi	r2,r2,65535
81133f9c:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81133fa0:	e0bfff17 	ldw	r2,-4(fp)
81133fa4:	00c00044 	movi	r3,1
81133fa8:	10c00a15 	stw	r3,40(r2)
                                break;
81133fac:	00000606 	br	81133fc8 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81133fb0:	e0bff117 	ldw	r2,-60(fp)
81133fb4:	10800044 	addi	r2,r2,1
81133fb8:	e0bff115 	stw	r2,-60(fp)
81133fbc:	e0bff117 	ldw	r2,-60(fp)
81133fc0:	10800410 	cmplti	r2,r2,16
81133fc4:	103fd81e 	bne	r2,zero,81133f28 <__reset+0xfb113f28>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81133fc8:	e0ffef17 	ldw	r3,-68(fp)
81133fcc:	e0bfea17 	ldw	r2,-88(fp)
81133fd0:	1880091e 	bne	r3,r2,81133ff8 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81133fd4:	e0bff017 	ldw	r2,-64(fp)
81133fd8:	10800044 	addi	r2,r2,1
81133fdc:	e0bff015 	stw	r2,-64(fp)
81133fe0:	e0fff017 	ldw	r3,-64(fp)
81133fe4:	e0bff717 	ldw	r2,-36(fp)
81133fe8:	18bfc216 	blt	r3,r2,81133ef4 <__reset+0xfb113ef4>
81133fec:	00000306 	br	81133ffc <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
81133ff0:	0001883a 	nop
81133ff4:	00000106 	br	81133ffc <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81133ff8:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81133ffc:	e0ffef17 	ldw	r3,-68(fp)
81134000:	e0bfea17 	ldw	r2,-88(fp)
81134004:	18800826 	beq	r3,r2,81134028 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81134008:	e0bfef17 	ldw	r2,-68(fp)
8113400c:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81134010:	e0ffed17 	ldw	r3,-76(fp)
81134014:	e0bfeb17 	ldw	r2,-84(fp)
81134018:	1885883a 	add	r2,r3,r2
8113401c:	10800044 	addi	r2,r2,1
81134020:	e0bfed15 	stw	r2,-76(fp)
81134024:	00007d06 	br	8113421c <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81134028:	0005883a 	mov	r2,zero
8113402c:	00009106 	br	81134274 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
81134030:	e0bfea17 	ldw	r2,-88(fp)
81134034:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81134038:	e0bff417 	ldw	r2,-48(fp)
8113403c:	10ffff84 	addi	r3,r2,-2
81134040:	00a04574 	movhi	r2,33045
81134044:	1090b404 	addi	r2,r2,17104
81134048:	10800383 	ldbu	r2,14(r2)
8113404c:	10803fcc 	andi	r2,r2,255
81134050:	1885383a 	mul	r2,r3,r2
81134054:	1007883a 	mov	r3,r2
81134058:	00a04574 	movhi	r2,33045
8113405c:	1090b404 	addi	r2,r2,17104
81134060:	10801417 	ldw	r2,80(r2)
81134064:	1885883a 	add	r2,r3,r2
81134068:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113406c:	e03ff215 	stw	zero,-56(fp)
81134070:	00003606 	br	8113414c <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81134074:	e0fff217 	ldw	r3,-56(fp)
81134078:	e0bff517 	ldw	r2,-44(fp)
8113407c:	1885883a 	add	r2,r3,r2
81134080:	d0e09417 	ldw	r3,-32176(gp)
81134084:	180b883a 	mov	r5,r3
81134088:	1009883a 	mov	r4,r2
8113408c:	11325e00 	call	811325e0 <Read_Sector_Data>
81134090:	10003526 	beq	r2,zero,81134168 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81134094:	e03ff315 	stw	zero,-52(fp)
81134098:	00002306 	br	81134128 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8113409c:	e0bff317 	ldw	r2,-52(fp)
811340a0:	1004917a 	slli	r2,r2,5
811340a4:	e0fff417 	ldw	r3,-48(fp)
811340a8:	e13ff217 	ldw	r4,-56(fp)
811340ac:	200f883a 	mov	r7,r4
811340b0:	180d883a 	mov	r6,r3
811340b4:	e17fff17 	ldw	r5,-4(fp)
811340b8:	1009883a 	mov	r4,r2
811340bc:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811340c0:	e0bfff17 	ldw	r2,-4(fp)
811340c4:	10800003 	ldbu	r2,0(r2)
811340c8:	10803fcc 	andi	r2,r2,255
811340cc:	10803960 	cmpeqi	r2,r2,229
811340d0:	1000121e 	bne	r2,zero,8113411c <get_home_directory_cluster_for_file+0x3d4>
811340d4:	e0bfff17 	ldw	r2,-4(fp)
811340d8:	10800003 	ldbu	r2,0(r2)
811340dc:	10803fcc 	andi	r2,r2,255
811340e0:	10000e26 	beq	r2,zero,8113411c <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
811340e4:	e0fffb04 	addi	r3,fp,-20
811340e8:	e0bff904 	addi	r2,fp,-28
811340ec:	180d883a 	mov	r6,r3
811340f0:	100b883a 	mov	r5,r2
811340f4:	e13fff17 	ldw	r4,-4(fp)
811340f8:	1133aa40 	call	81133aa4 <match_file_record_to_name_ext>
811340fc:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81134100:	e0bff617 	ldw	r2,-40(fp)
81134104:	10000526 	beq	r2,zero,8113411c <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81134108:	e0bfff17 	ldw	r2,-4(fp)
8113410c:	1080058b 	ldhu	r2,22(r2)
81134110:	10bfffcc 	andi	r2,r2,65535
81134114:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81134118:	00000606 	br	81134134 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
8113411c:	e0bff317 	ldw	r2,-52(fp)
81134120:	10800044 	addi	r2,r2,1
81134124:	e0bff315 	stw	r2,-52(fp)
81134128:	e0bff317 	ldw	r2,-52(fp)
8113412c:	10800410 	cmplti	r2,r2,16
81134130:	103fda1e 	bne	r2,zero,8113409c <__reset+0xfb11409c>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81134134:	e0ffef17 	ldw	r3,-68(fp)
81134138:	e0bfea17 	ldw	r2,-88(fp)
8113413c:	18800c1e 	bne	r3,r2,81134170 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81134140:	e0bff217 	ldw	r2,-56(fp)
81134144:	10800044 	addi	r2,r2,1
81134148:	e0bff215 	stw	r2,-56(fp)
8113414c:	00a04574 	movhi	r2,33045
81134150:	1090b404 	addi	r2,r2,17104
81134154:	10800383 	ldbu	r2,14(r2)
81134158:	10803fcc 	andi	r2,r2,255
8113415c:	e0fff217 	ldw	r3,-56(fp)
81134160:	18bfc416 	blt	r3,r2,81134074 <__reset+0xfb114074>
81134164:	00000306 	br	81134174 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81134168:	0001883a 	nop
8113416c:	00000106 	br	81134174 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81134170:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81134174:	e0ffef17 	ldw	r3,-68(fp)
81134178:	e0bfea17 	ldw	r2,-88(fp)
8113417c:	1880141e 	bne	r3,r2,811341d0 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81134180:	e0bfef17 	ldw	r2,-68(fp)
81134184:	e0fffc04 	addi	r3,fp,-16
81134188:	180b883a 	mov	r5,r3
8113418c:	1009883a 	mov	r4,r2
81134190:	11326c00 	call	811326c0 <get_cluster_flag>
81134194:	10000c26 	beq	r2,zero,811341c8 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81134198:	e0bffc0b 	ldhu	r2,-16(fp)
8113419c:	10bfffcc 	andi	r2,r2,65535
811341a0:	10fffe0c 	andi	r3,r2,65528
811341a4:	00bffe14 	movui	r2,65528
811341a8:	1880021e 	bne	r3,r2,811341b4 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
811341ac:	0005883a 	mov	r2,zero
811341b0:	00003006 	br	81134274 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
811341b4:	e0bffc0b 	ldhu	r2,-16(fp)
811341b8:	10bfffcc 	andi	r2,r2,65535
811341bc:	10bffe0c 	andi	r2,r2,65528
811341c0:	e0bfef15 	stw	r2,-68(fp)
811341c4:	00000206 	br	811341d0 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
811341c8:	0005883a 	mov	r2,zero
811341cc:	00002906 	br	81134274 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
811341d0:	e0bff417 	ldw	r2,-48(fp)
811341d4:	00fffdd4 	movui	r3,65527
811341d8:	18800316 	blt	r3,r2,811341e8 <get_home_directory_cluster_for_file+0x4a0>
811341dc:	e0ffef17 	ldw	r3,-68(fp)
811341e0:	e0bfea17 	ldw	r2,-88(fp)
811341e4:	18bf9426 	beq	r3,r2,81134038 <__reset+0xfb114038>
            if (new_cluster != home_dir_cluster)
811341e8:	e0ffef17 	ldw	r3,-68(fp)
811341ec:	e0bfea17 	ldw	r2,-88(fp)
811341f0:	18800826 	beq	r3,r2,81134214 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
811341f4:	e0bfef17 	ldw	r2,-68(fp)
811341f8:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
811341fc:	e0ffed17 	ldw	r3,-76(fp)
81134200:	e0bfeb17 	ldw	r2,-84(fp)
81134204:	1885883a 	add	r2,r3,r2
81134208:	10800044 	addi	r2,r2,1
8113420c:	e0bfed15 	stw	r2,-76(fp)
81134210:	00000206 	br	8113421c <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81134214:	0005883a 	mov	r2,zero
81134218:	00001606 	br	81134274 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
8113421c:	e0bfed17 	ldw	r2,-76(fp)
81134220:	e0fffd17 	ldw	r3,-12(fp)
81134224:	1885883a 	add	r2,r3,r2
81134228:	1009883a 	mov	r4,r2
8113422c:	11339e40 	call	811339e4 <get_dir_divider_location>
81134230:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81134234:	e0bfeb17 	ldw	r2,-84(fp)
81134238:	1000020e 	bge	r2,zero,81134244 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
8113423c:	00800044 	movi	r2,1
81134240:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81134244:	e0bfeb17 	ldw	r2,-84(fp)
81134248:	00becf16 	blt	zero,r2,81133d88 <__reset+0xfb113d88>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
8113424c:	e0bffe17 	ldw	r2,-8(fp)
81134250:	e0ffea17 	ldw	r3,-88(fp)
81134254:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81134258:	e0bfea17 	ldw	r2,-88(fp)
8113425c:	1000041e 	bne	r2,zero,81134270 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81134260:	e0bfff17 	ldw	r2,-4(fp)
81134264:	10000a15 	stw	zero,40(r2)
		result = true;
81134268:	00800044 	movi	r2,1
8113426c:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81134270:	e0bfe917 	ldw	r2,-92(fp)
}
81134274:	e037883a 	mov	sp,fp
81134278:	dfc00117 	ldw	ra,4(sp)
8113427c:	df000017 	ldw	fp,0(sp)
81134280:	dec00204 	addi	sp,sp,8
81134284:	f800283a 	ret

81134288 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81134288:	deffe804 	addi	sp,sp,-96
8113428c:	de00012e 	bgeu	sp,et,81134294 <find_file_in_directory+0xc>
81134290:	003b68fa 	trap	3
81134294:	dfc01715 	stw	ra,92(sp)
81134298:	df001615 	stw	fp,88(sp)
8113429c:	df001604 	addi	fp,sp,88
811342a0:	e13ffd15 	stw	r4,-12(fp)
811342a4:	e17ffe15 	stw	r5,-8(fp)
811342a8:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
811342ac:	e13ffe17 	ldw	r4,-8(fp)
811342b0:	11339e40 	call	811339e4 <get_dir_divider_location>
811342b4:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
811342b8:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811342bc:	00800804 	movi	r2,32
811342c0:	e0bff905 	stb	r2,-28(fp)
811342c4:	00800804 	movi	r2,32
811342c8:	e0bff945 	stb	r2,-27(fp)
811342cc:	00800804 	movi	r2,32
811342d0:	e0bff985 	stb	r2,-26(fp)
811342d4:	00800804 	movi	r2,32
811342d8:	e0bff9c5 	stb	r2,-25(fp)
811342dc:	00800804 	movi	r2,32
811342e0:	e0bffa05 	stb	r2,-24(fp)
811342e4:	00800804 	movi	r2,32
811342e8:	e0bffa45 	stb	r2,-23(fp)
811342ec:	00800804 	movi	r2,32
811342f0:	e0bffa85 	stb	r2,-22(fp)
811342f4:	00800804 	movi	r2,32
811342f8:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
811342fc:	00800804 	movi	r2,32
81134300:	e0bffb05 	stb	r2,-20(fp)
81134304:	00800804 	movi	r2,32
81134308:	e0bffb45 	stb	r2,-19(fp)
8113430c:	00800804 	movi	r2,32
81134310:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81134314:	00bfffc4 	movi	r2,-1
81134318:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
8113431c:	e0bffd17 	ldw	r2,-12(fp)
81134320:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81134324:	e13ffe17 	ldw	r4,-8(fp)
81134328:	11134b00 	call	811134b0 <strlen>
8113432c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81134330:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81134334:	00000b06 	br	81134364 <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81134338:	e0ffeb17 	ldw	r3,-84(fp)
8113433c:	e0bfea17 	ldw	r2,-88(fp)
81134340:	1885883a 	add	r2,r3,r2
81134344:	10800044 	addi	r2,r2,1
81134348:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
8113434c:	e0bfeb17 	ldw	r2,-84(fp)
81134350:	e0fffe17 	ldw	r3,-8(fp)
81134354:	1885883a 	add	r2,r3,r2
81134358:	1009883a 	mov	r4,r2
8113435c:	11339e40 	call	811339e4 <get_dir_divider_location>
81134360:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81134364:	e0bfea17 	ldw	r2,-88(fp)
81134368:	00bff316 	blt	zero,r2,81134338 <__reset+0xfb114338>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
8113436c:	e0bfeb17 	ldw	r2,-84(fp)
81134370:	e0bfee15 	stw	r2,-72(fp)
81134374:	00002706 	br	81134414 <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81134378:	e0bfee17 	ldw	r2,-72(fp)
8113437c:	e0fffe17 	ldw	r3,-8(fp)
81134380:	1885883a 	add	r2,r3,r2
81134384:	10800003 	ldbu	r2,0(r2)
81134388:	10803fcc 	andi	r2,r2,255
8113438c:	1080201c 	xori	r2,r2,128
81134390:	10bfe004 	addi	r2,r2,-128
81134394:	10800b98 	cmpnei	r2,r2,46
81134398:	1000031e 	bne	r2,zero,811343a8 <find_file_in_directory+0x120>
        {
            ext_index = index;
8113439c:	e0bfee17 	ldw	r2,-72(fp)
811343a0:	e0bfec15 	stw	r2,-80(fp)
811343a4:	00001806 	br	81134408 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811343a8:	e0bfec17 	ldw	r2,-80(fp)
811343ac:	10000b0e 	bge	r2,zero,811343dc <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811343b0:	e0ffee17 	ldw	r3,-72(fp)
811343b4:	e0bfeb17 	ldw	r2,-84(fp)
811343b8:	1885c83a 	sub	r2,r3,r2
811343bc:	e0ffee17 	ldw	r3,-72(fp)
811343c0:	e13ffe17 	ldw	r4,-8(fp)
811343c4:	20c7883a 	add	r3,r4,r3
811343c8:	18c00003 	ldbu	r3,0(r3)
811343cc:	e13ff904 	addi	r4,fp,-28
811343d0:	2085883a 	add	r2,r4,r2
811343d4:	10c00005 	stb	r3,0(r2)
811343d8:	00000b06 	br	81134408 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
811343dc:	e0ffee17 	ldw	r3,-72(fp)
811343e0:	e0bfec17 	ldw	r2,-80(fp)
811343e4:	1885c83a 	sub	r2,r3,r2
811343e8:	10bfffc4 	addi	r2,r2,-1
811343ec:	e0ffee17 	ldw	r3,-72(fp)
811343f0:	e13ffe17 	ldw	r4,-8(fp)
811343f4:	20c7883a 	add	r3,r4,r3
811343f8:	18c00003 	ldbu	r3,0(r3)
811343fc:	e13ffb04 	addi	r4,fp,-20
81134400:	2085883a 	add	r2,r4,r2
81134404:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81134408:	e0bfee17 	ldw	r2,-72(fp)
8113440c:	10800044 	addi	r2,r2,1
81134410:	e0bfee15 	stw	r2,-72(fp)
81134414:	e0ffee17 	ldw	r3,-72(fp)
81134418:	e0bff417 	ldw	r2,-48(fp)
8113441c:	18bfd616 	blt	r3,r2,81134378 <__reset+0xfb114378>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81134420:	e0bffd17 	ldw	r2,-12(fp)
81134424:	1000461e 	bne	r2,zero,81134540 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81134428:	00a04574 	movhi	r2,33045
8113442c:	1090b404 	addi	r2,r2,17104
81134430:	1080050b 	ldhu	r2,20(r2)
81134434:	10bfffcc 	andi	r2,r2,65535
81134438:	1006917a 	slli	r3,r2,5
8113443c:	00a04574 	movhi	r2,33045
81134440:	1090b404 	addi	r2,r2,17104
81134444:	1080030b 	ldhu	r2,12(r2)
81134448:	10bfffcc 	andi	r2,r2,65535
8113444c:	1885283a 	div	r2,r3,r2
81134450:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134454:	e03ff015 	stw	zero,-64(fp)
81134458:	00003506 	br	81134530 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8113445c:	00a04574 	movhi	r2,33045
81134460:	1090b404 	addi	r2,r2,17104
81134464:	10c01317 	ldw	r3,76(r2)
81134468:	e0bff017 	ldw	r2,-64(fp)
8113446c:	1885883a 	add	r2,r3,r2
81134470:	1007883a 	mov	r3,r2
81134474:	d0a09417 	ldw	r2,-32176(gp)
81134478:	100b883a 	mov	r5,r2
8113447c:	1809883a 	mov	r4,r3
81134480:	11325e00 	call	811325e0 <Read_Sector_Data>
81134484:	10009626 	beq	r2,zero,811346e0 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81134488:	e03ff115 	stw	zero,-60(fp)
8113448c:	00002006 	br	81134510 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81134490:	e0bff117 	ldw	r2,-60(fp)
81134494:	1004917a 	slli	r2,r2,5
81134498:	e0fff017 	ldw	r3,-64(fp)
8113449c:	180f883a 	mov	r7,r3
811344a0:	000d883a 	mov	r6,zero
811344a4:	e17fff17 	ldw	r5,-4(fp)
811344a8:	1009883a 	mov	r4,r2
811344ac:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811344b0:	e0bfff17 	ldw	r2,-4(fp)
811344b4:	10800003 	ldbu	r2,0(r2)
811344b8:	10803fcc 	andi	r2,r2,255
811344bc:	10803960 	cmpeqi	r2,r2,229
811344c0:	1000101e 	bne	r2,zero,81134504 <find_file_in_directory+0x27c>
811344c4:	e0bfff17 	ldw	r2,-4(fp)
811344c8:	10800003 	ldbu	r2,0(r2)
811344cc:	10803fcc 	andi	r2,r2,255
811344d0:	10000c26 	beq	r2,zero,81134504 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
811344d4:	e0fffb04 	addi	r3,fp,-20
811344d8:	e0bff904 	addi	r2,fp,-28
811344dc:	180d883a 	mov	r6,r3
811344e0:	100b883a 	mov	r5,r2
811344e4:	e13fff17 	ldw	r4,-4(fp)
811344e8:	1133aa40 	call	81133aa4 <match_file_record_to_name_ext>
811344ec:	e0bff815 	stw	r2,-32(fp)

                        if (match)
811344f0:	e0bff817 	ldw	r2,-32(fp)
811344f4:	10000326 	beq	r2,zero,81134504 <find_file_in_directory+0x27c>
                        {
                            result = true;
811344f8:	00800044 	movi	r2,1
811344fc:	e0bfef15 	stw	r2,-68(fp)
                            break;
81134500:	00000606 	br	8113451c <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81134504:	e0bff117 	ldw	r2,-60(fp)
81134508:	10800044 	addi	r2,r2,1
8113450c:	e0bff115 	stw	r2,-60(fp)
81134510:	e0bff117 	ldw	r2,-60(fp)
81134514:	10800410 	cmplti	r2,r2,16
81134518:	103fdd1e 	bne	r2,zero,81134490 <__reset+0xfb114490>
            }
            else
            {
                break;
            }
            if (result)
8113451c:	e0bfef17 	ldw	r2,-68(fp)
81134520:	1000711e 	bne	r2,zero,811346e8 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134524:	e0bff017 	ldw	r2,-64(fp)
81134528:	10800044 	addi	r2,r2,1
8113452c:	e0bff015 	stw	r2,-64(fp)
81134530:	e0fff017 	ldw	r3,-64(fp)
81134534:	e0bff717 	ldw	r2,-36(fp)
81134538:	18bfc816 	blt	r3,r2,8113445c <__reset+0xfb11445c>
8113453c:	00006b06 	br	811346ec <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81134540:	e0bfed17 	ldw	r2,-76(fp)
81134544:	10ffff84 	addi	r3,r2,-2
81134548:	00a04574 	movhi	r2,33045
8113454c:	1090b404 	addi	r2,r2,17104
81134550:	10800383 	ldbu	r2,14(r2)
81134554:	10803fcc 	andi	r2,r2,255
81134558:	1885383a 	mul	r2,r3,r2
8113455c:	1007883a 	mov	r3,r2
81134560:	00a04574 	movhi	r2,33045
81134564:	1090b404 	addi	r2,r2,17104
81134568:	10801417 	ldw	r2,80(r2)
8113456c:	1885883a 	add	r2,r3,r2
81134570:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81134574:	e03ff215 	stw	zero,-56(fp)
81134578:	00003306 	br	81134648 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8113457c:	e0fff217 	ldw	r3,-56(fp)
81134580:	e0bff517 	ldw	r2,-44(fp)
81134584:	1885883a 	add	r2,r3,r2
81134588:	d0e09417 	ldw	r3,-32176(gp)
8113458c:	180b883a 	mov	r5,r3
81134590:	1009883a 	mov	r4,r2
81134594:	11325e00 	call	811325e0 <Read_Sector_Data>
81134598:	10003226 	beq	r2,zero,81134664 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8113459c:	e03ff315 	stw	zero,-52(fp)
811345a0:	00002106 	br	81134628 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811345a4:	e0bff317 	ldw	r2,-52(fp)
811345a8:	1004917a 	slli	r2,r2,5
811345ac:	e0ffed17 	ldw	r3,-76(fp)
811345b0:	e13ff217 	ldw	r4,-56(fp)
811345b4:	200f883a 	mov	r7,r4
811345b8:	180d883a 	mov	r6,r3
811345bc:	e17fff17 	ldw	r5,-4(fp)
811345c0:	1009883a 	mov	r4,r2
811345c4:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811345c8:	e0bfff17 	ldw	r2,-4(fp)
811345cc:	10800003 	ldbu	r2,0(r2)
811345d0:	10803fcc 	andi	r2,r2,255
811345d4:	10803960 	cmpeqi	r2,r2,229
811345d8:	1000101e 	bne	r2,zero,8113461c <find_file_in_directory+0x394>
811345dc:	e0bfff17 	ldw	r2,-4(fp)
811345e0:	10800003 	ldbu	r2,0(r2)
811345e4:	10803fcc 	andi	r2,r2,255
811345e8:	10000c26 	beq	r2,zero,8113461c <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
811345ec:	e0fffb04 	addi	r3,fp,-20
811345f0:	e0bff904 	addi	r2,fp,-28
811345f4:	180d883a 	mov	r6,r3
811345f8:	100b883a 	mov	r5,r2
811345fc:	e13fff17 	ldw	r4,-4(fp)
81134600:	1133aa40 	call	81133aa4 <match_file_record_to_name_ext>
81134604:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81134608:	e0bff617 	ldw	r2,-40(fp)
8113460c:	10000326 	beq	r2,zero,8113461c <find_file_in_directory+0x394>
                            {                               
                                result = true;
81134610:	00800044 	movi	r2,1
81134614:	e0bfef15 	stw	r2,-68(fp)
                                break;
81134618:	00000606 	br	81134634 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8113461c:	e0bff317 	ldw	r2,-52(fp)
81134620:	10800044 	addi	r2,r2,1
81134624:	e0bff315 	stw	r2,-52(fp)
81134628:	e0bff317 	ldw	r2,-52(fp)
8113462c:	10800410 	cmplti	r2,r2,16
81134630:	103fdc1e 	bne	r2,zero,811345a4 <__reset+0xfb1145a4>
                }
                else
                {
                    break;
                }
                if (result)
81134634:	e0bfef17 	ldw	r2,-68(fp)
81134638:	10000c1e 	bne	r2,zero,8113466c <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113463c:	e0bff217 	ldw	r2,-56(fp)
81134640:	10800044 	addi	r2,r2,1
81134644:	e0bff215 	stw	r2,-56(fp)
81134648:	00a04574 	movhi	r2,33045
8113464c:	1090b404 	addi	r2,r2,17104
81134650:	10800383 	ldbu	r2,14(r2)
81134654:	10803fcc 	andi	r2,r2,255
81134658:	e0fff217 	ldw	r3,-56(fp)
8113465c:	18bfc716 	blt	r3,r2,8113457c <__reset+0xfb11457c>
81134660:	00000306 	br	81134670 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
81134664:	0001883a 	nop
81134668:	00000106 	br	81134670 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
8113466c:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
81134670:	e0bfef17 	ldw	r2,-68(fp)
81134674:	1000141e 	bne	r2,zero,811346c8 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81134678:	e0bfed17 	ldw	r2,-76(fp)
8113467c:	e0fffc04 	addi	r3,fp,-16
81134680:	180b883a 	mov	r5,r3
81134684:	1009883a 	mov	r4,r2
81134688:	11326c00 	call	811326c0 <get_cluster_flag>
8113468c:	10000c26 	beq	r2,zero,811346c0 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81134690:	e0bffc0b 	ldhu	r2,-16(fp)
81134694:	10bfffcc 	andi	r2,r2,65535
81134698:	10fffe0c 	andi	r3,r2,65528
8113469c:	00bffe14 	movui	r2,65528
811346a0:	1880021e 	bne	r3,r2,811346ac <find_file_in_directory+0x424>
					{
						return false;
811346a4:	0005883a 	mov	r2,zero
811346a8:	00001106 	br	811346f0 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811346ac:	e0bffc0b 	ldhu	r2,-16(fp)
811346b0:	10bfffcc 	andi	r2,r2,65535
811346b4:	10bffe0c 	andi	r2,r2,65528
811346b8:	e0bfed15 	stw	r2,-76(fp)
811346bc:	00000206 	br	811346c8 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
811346c0:	0005883a 	mov	r2,zero
811346c4:	00000a06 	br	811346f0 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
811346c8:	e0bfed17 	ldw	r2,-76(fp)
811346cc:	00fffdd4 	movui	r3,65527
811346d0:	18800616 	blt	r3,r2,811346ec <find_file_in_directory+0x464>
811346d4:	e0bfef17 	ldw	r2,-68(fp)
811346d8:	103f9926 	beq	r2,zero,81134540 <__reset+0xfb114540>
811346dc:	00000306 	br	811346ec <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
811346e0:	0001883a 	nop
811346e4:	00000106 	br	811346ec <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
811346e8:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
811346ec:	e0bfef17 	ldw	r2,-68(fp)
}
811346f0:	e037883a 	mov	sp,fp
811346f4:	dfc00117 	ldw	ra,4(sp)
811346f8:	df000017 	ldw	fp,0(sp)
811346fc:	dec00204 	addi	sp,sp,8
81134700:	f800283a 	ret

81134704 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81134704:	defff504 	addi	sp,sp,-44
81134708:	de00012e 	bgeu	sp,et,81134710 <find_first_empty_cluster+0xc>
8113470c:	003b68fa 	trap	3
81134710:	dfc00a15 	stw	ra,40(sp)
81134714:	df000915 	stw	fp,36(sp)
81134718:	df000904 	addi	fp,sp,36
8113471c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81134720:	00a04574 	movhi	r2,33045
81134724:	1090b404 	addi	r2,r2,17104
81134728:	10801117 	ldw	r2,68(r2)
8113472c:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81134730:	00800084 	movi	r2,2
81134734:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81134738:	00bfffc4 	movi	r2,-1
8113473c:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81134740:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
81134744:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81134748:	00a04574 	movhi	r2,33045
8113474c:	1090b404 	addi	r2,r2,17104
81134750:	10801417 	ldw	r2,80(r2)
81134754:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81134758:	00a04574 	movhi	r2,33045
8113475c:	1090b404 	addi	r2,r2,17104
81134760:	1080058b 	ldhu	r2,22(r2)
81134764:	10bfffcc 	andi	r2,r2,65535
81134768:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
8113476c:	00a04574 	movhi	r2,33045
81134770:	1090b404 	addi	r2,r2,17104
81134774:	10800917 	ldw	r2,36(r2)
81134778:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
8113477c:	e0bffd17 	ldw	r2,-12(fp)
81134780:	e0fffe17 	ldw	r3,-8(fp)
81134784:	18800b2e 	bgeu	r3,r2,811347b4 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81134788:	e0fffd17 	ldw	r3,-12(fp)
8113478c:	e0bffc17 	ldw	r2,-16(fp)
81134790:	1887c83a 	sub	r3,r3,r2
81134794:	00a04574 	movhi	r2,33045
81134798:	1090b404 	addi	r2,r2,17104
8113479c:	10800383 	ldbu	r2,14(r2)
811347a0:	10803fcc 	andi	r2,r2,255
811347a4:	1885203a 	divu	r2,r3,r2
811347a8:	10800044 	addi	r2,r2,1
811347ac:	e0bffb15 	stw	r2,-20(fp)
811347b0:	00002a06 	br	8113485c <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
811347b4:	e0fffe17 	ldw	r3,-8(fp)
811347b8:	e0bffc17 	ldw	r2,-16(fp)
811347bc:	1887c83a 	sub	r3,r3,r2
811347c0:	00a04574 	movhi	r2,33045
811347c4:	1090b404 	addi	r2,r2,17104
811347c8:	10800383 	ldbu	r2,14(r2)
811347cc:	10803fcc 	andi	r2,r2,255
811347d0:	1885203a 	divu	r2,r3,r2
811347d4:	10800044 	addi	r2,r2,1
811347d8:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811347dc:	00001f06 	br	8113485c <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
811347e0:	e0bff717 	ldw	r2,-36(fp)
811347e4:	d0e09417 	ldw	r3,-32176(gp)
811347e8:	180b883a 	mov	r5,r3
811347ec:	1009883a 	mov	r4,r2
811347f0:	11325e00 	call	811325e0 <Read_Sector_Data>
811347f4:	10001426 	beq	r2,zero,81134848 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
811347f8:	e0bff817 	ldw	r2,-32(fp)
811347fc:	10803fcc 	andi	r2,r2,255
81134800:	1085883a 	add	r2,r2,r2
81134804:	1007883a 	mov	r3,r2
81134808:	d0a09617 	ldw	r2,-32168(gp)
8113480c:	10800a17 	ldw	r2,40(r2)
81134810:	1885883a 	add	r2,r3,r2
81134814:	1080002b 	ldhuio	r2,0(r2)
81134818:	10bfffcc 	andi	r2,r2,65535
8113481c:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
81134820:	e0bff90f 	ldh	r2,-28(fp)
81134824:	10000726 	beq	r2,zero,81134844 <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81134828:	e0bff817 	ldw	r2,-32(fp)
8113482c:	10800044 	addi	r2,r2,1
81134830:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
81134834:	e0bff817 	ldw	r2,-32(fp)
81134838:	10803fcc 	andi	r2,r2,255
8113483c:	103fee1e 	bne	r2,zero,811347f8 <__reset+0xfb1147f8>
81134840:	00000106 	br	81134848 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
81134844:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81134848:	e0bff90f 	ldh	r2,-28(fp)
8113484c:	10000926 	beq	r2,zero,81134874 <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81134850:	e0bff717 	ldw	r2,-36(fp)
81134854:	10800044 	addi	r2,r2,1
81134858:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8113485c:	00a04574 	movhi	r2,33045
81134860:	1090b404 	addi	r2,r2,17104
81134864:	10c01217 	ldw	r3,72(r2)
81134868:	e0bff717 	ldw	r2,-36(fp)
8113486c:	18bfdc1e 	bne	r3,r2,811347e0 <__reset+0xfb1147e0>
81134870:	00000106 	br	81134878 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81134874:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81134878:	e0bff90f 	ldh	r2,-28(fp)
8113487c:	1000081e 	bne	r2,zero,811348a0 <find_first_empty_cluster+0x19c>
81134880:	e0bff90f 	ldh	r2,-28(fp)
81134884:	e0fffb17 	ldw	r3,-20(fp)
81134888:	18800536 	bltu	r3,r2,811348a0 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
8113488c:	e0bfff17 	ldw	r2,-4(fp)
81134890:	e0fff817 	ldw	r3,-32(fp)
81134894:	10c00015 	stw	r3,0(r2)
		result = true;
81134898:	00800044 	movi	r2,1
8113489c:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
811348a0:	e0bffa17 	ldw	r2,-24(fp)
}
811348a4:	e037883a 	mov	sp,fp
811348a8:	dfc00117 	ldw	ra,4(sp)
811348ac:	df000017 	ldw	fp,0(sp)
811348b0:	dec00204 	addi	sp,sp,8
811348b4:	f800283a 	ret

811348b8 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
811348b8:	defff604 	addi	sp,sp,-40
811348bc:	de00012e 	bgeu	sp,et,811348c4 <find_first_empty_record_in_a_subdirectory+0xc>
811348c0:	003b68fa 	trap	3
811348c4:	dfc00915 	stw	ra,36(sp)
811348c8:	df000815 	stw	fp,32(sp)
811348cc:	df000804 	addi	fp,sp,32
811348d0:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
811348d4:	00bfffc4 	movi	r2,-1
811348d8:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
811348dc:	e0bfff17 	ldw	r2,-4(fp)
811348e0:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811348e4:	e0bff917 	ldw	r2,-28(fp)
811348e8:	10ffff84 	addi	r3,r2,-2
811348ec:	00a04574 	movhi	r2,33045
811348f0:	1090b404 	addi	r2,r2,17104
811348f4:	10800383 	ldbu	r2,14(r2)
811348f8:	10803fcc 	andi	r2,r2,255
811348fc:	1885383a 	mul	r2,r3,r2
81134900:	1007883a 	mov	r3,r2
81134904:	00a04574 	movhi	r2,33045
81134908:	1090b404 	addi	r2,r2,17104
8113490c:	10801417 	ldw	r2,80(r2)
81134910:	1885883a 	add	r2,r3,r2
81134914:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81134918:	e03ffa15 	stw	zero,-24(fp)
8113491c:	00002c06 	br	811349d0 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81134920:	e0fffa17 	ldw	r3,-24(fp)
81134924:	e0bffc17 	ldw	r2,-16(fp)
81134928:	1885883a 	add	r2,r3,r2
8113492c:	d0e09417 	ldw	r3,-32176(gp)
81134930:	180b883a 	mov	r5,r3
81134934:	1009883a 	mov	r4,r2
81134938:	11325e00 	call	811325e0 <Read_Sector_Data>
8113493c:	10002b26 	beq	r2,zero,811349ec <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81134940:	e03ffb15 	stw	zero,-20(fp)
81134944:	00001c06 	br	811349b8 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81134948:	e0bffb17 	ldw	r2,-20(fp)
8113494c:	1004917a 	slli	r2,r2,5
81134950:	1007883a 	mov	r3,r2
81134954:	d0a09617 	ldw	r2,-32168(gp)
81134958:	10800a17 	ldw	r2,40(r2)
8113495c:	1885883a 	add	r2,r3,r2
81134960:	10800023 	ldbuio	r2,0(r2)
81134964:	10803fcc 	andi	r2,r2,255
81134968:	10803fcc 	andi	r2,r2,255
8113496c:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81134970:	e0bffd0b 	ldhu	r2,-12(fp)
81134974:	10803960 	cmpeqi	r2,r2,229
81134978:	1000021e 	bne	r2,zero,81134984 <find_first_empty_record_in_a_subdirectory+0xcc>
8113497c:	e0bffd0b 	ldhu	r2,-12(fp)
81134980:	10000a1e 	bne	r2,zero,811349ac <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81134984:	e0bffa17 	ldw	r2,-24(fp)
81134988:	1006913a 	slli	r3,r2,4
8113498c:	e0bffb17 	ldw	r2,-20(fp)
81134990:	1885883a 	add	r2,r3,r2
81134994:	1006943a 	slli	r3,r2,16
81134998:	e0bff917 	ldw	r2,-28(fp)
8113499c:	1884b03a 	or	r2,r3,r2
811349a0:	e0bff815 	stw	r2,-32(fp)
                        return result;
811349a4:	e0bff817 	ldw	r2,-32(fp)
811349a8:	00005306 	br	81134af8 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811349ac:	e0bffb17 	ldw	r2,-20(fp)
811349b0:	10800044 	addi	r2,r2,1
811349b4:	e0bffb15 	stw	r2,-20(fp)
811349b8:	e0bffb17 	ldw	r2,-20(fp)
811349bc:	10800410 	cmplti	r2,r2,16
811349c0:	103fe11e 	bne	r2,zero,81134948 <__reset+0xfb114948>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811349c4:	e0bffa17 	ldw	r2,-24(fp)
811349c8:	10800044 	addi	r2,r2,1
811349cc:	e0bffa15 	stw	r2,-24(fp)
811349d0:	00a04574 	movhi	r2,33045
811349d4:	1090b404 	addi	r2,r2,17104
811349d8:	10800383 	ldbu	r2,14(r2)
811349dc:	10803fcc 	andi	r2,r2,255
811349e0:	e0fffa17 	ldw	r3,-24(fp)
811349e4:	18bfce16 	blt	r3,r2,81134920 <__reset+0xfb114920>
811349e8:	00000106 	br	811349f0 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
811349ec:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
811349f0:	e0bff817 	ldw	r2,-32(fp)
811349f4:	1000390e 	bge	r2,zero,81134adc <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
811349f8:	e0bff917 	ldw	r2,-28(fp)
811349fc:	e0fffd84 	addi	r3,fp,-10
81134a00:	180b883a 	mov	r5,r3
81134a04:	1009883a 	mov	r4,r2
81134a08:	11326c00 	call	811326c0 <get_cluster_flag>
81134a0c:	10003126 	beq	r2,zero,81134ad4 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81134a10:	e0bffd8b 	ldhu	r2,-10(fp)
81134a14:	10bfffcc 	andi	r2,r2,65535
81134a18:	10fffe0c 	andi	r3,r2,65528
81134a1c:	00bffe14 	movui	r2,65528
81134a20:	18802e1e 	bne	r3,r2,81134adc <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
81134a24:	e0bffe04 	addi	r2,fp,-8
81134a28:	1009883a 	mov	r4,r2
81134a2c:	11347040 	call	81134704 <find_first_empty_cluster>
81134a30:	10002326 	beq	r2,zero,81134ac0 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81134a34:	e0bff917 	ldw	r2,-28(fp)
81134a38:	e0fffe17 	ldw	r3,-8(fp)
81134a3c:	18ffffcc 	andi	r3,r3,65535
81134a40:	18e0001c 	xori	r3,r3,32768
81134a44:	18e00004 	addi	r3,r3,-32768
81134a48:	01800044 	movi	r6,1
81134a4c:	180b883a 	mov	r5,r3
81134a50:	1009883a 	mov	r4,r2
81134a54:	113277c0 	call	8113277c <mark_cluster>
81134a58:	10001926 	beq	r2,zero,81134ac0 <find_first_empty_record_in_a_subdirectory+0x208>
81134a5c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81134a60:	01800044 	movi	r6,1
81134a64:	017fffc4 	movi	r5,-1
81134a68:	1009883a 	mov	r4,r2
81134a6c:	113277c0 	call	8113277c <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81134a70:	10001326 	beq	r2,zero,81134ac0 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81134a74:	e0bff917 	ldw	r2,-28(fp)
81134a78:	e0fffe17 	ldw	r3,-8(fp)
81134a7c:	18ffffcc 	andi	r3,r3,65535
81134a80:	18e0001c 	xori	r3,r3,32768
81134a84:	18e00004 	addi	r3,r3,-32768
81134a88:	000d883a 	mov	r6,zero
81134a8c:	180b883a 	mov	r5,r3
81134a90:	1009883a 	mov	r4,r2
81134a94:	113277c0 	call	8113277c <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81134a98:	10000926 	beq	r2,zero,81134ac0 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81134a9c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81134aa0:	000d883a 	mov	r6,zero
81134aa4:	017fffc4 	movi	r5,-1
81134aa8:	1009883a 	mov	r4,r2
81134aac:	113277c0 	call	8113277c <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81134ab0:	10000326 	beq	r2,zero,81134ac0 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81134ab4:	113258c0 	call	8113258c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81134ab8:	e0bffe17 	ldw	r2,-8(fp)
81134abc:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81134ac0:	e0bffd8b 	ldhu	r2,-10(fp)
81134ac4:	10bfffcc 	andi	r2,r2,65535
81134ac8:	10bffe0c 	andi	r2,r2,65528
81134acc:	e0bff915 	stw	r2,-28(fp)
81134ad0:	00000206 	br	81134adc <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81134ad4:	00bfffc4 	movi	r2,-1
81134ad8:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81134adc:	e0bff917 	ldw	r2,-28(fp)
81134ae0:	00fffdd4 	movui	r3,65527
81134ae4:	18800316 	blt	r3,r2,81134af4 <find_first_empty_record_in_a_subdirectory+0x23c>
81134ae8:	e0bff817 	ldw	r2,-32(fp)
81134aec:	10bfffe0 	cmpeqi	r2,r2,-1
81134af0:	103f7c1e 	bne	r2,zero,811348e4 <__reset+0xfb1148e4>
    return result; 
81134af4:	e0bff817 	ldw	r2,-32(fp)
}
81134af8:	e037883a 	mov	sp,fp
81134afc:	dfc00117 	ldw	ra,4(sp)
81134b00:	df000017 	ldw	fp,0(sp)
81134b04:	dec00204 	addi	sp,sp,8
81134b08:	f800283a 	ret

81134b0c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81134b0c:	defff904 	addi	sp,sp,-28
81134b10:	de00012e 	bgeu	sp,et,81134b18 <find_first_empty_record_in_root_directory+0xc>
81134b14:	003b68fa 	trap	3
81134b18:	dfc00615 	stw	ra,24(sp)
81134b1c:	df000515 	stw	fp,20(sp)
81134b20:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81134b24:	00a04574 	movhi	r2,33045
81134b28:	1090b404 	addi	r2,r2,17104
81134b2c:	1080050b 	ldhu	r2,20(r2)
81134b30:	10bfffcc 	andi	r2,r2,65535
81134b34:	1006917a 	slli	r3,r2,5
81134b38:	00a04574 	movhi	r2,33045
81134b3c:	1090b404 	addi	r2,r2,17104
81134b40:	1080030b 	ldhu	r2,12(r2)
81134b44:	10bfffcc 	andi	r2,r2,65535
81134b48:	1885283a 	div	r2,r3,r2
81134b4c:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81134b50:	00bfffc4 	movi	r2,-1
81134b54:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134b58:	e03ffb15 	stw	zero,-20(fp)
81134b5c:	00002d06 	br	81134c14 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81134b60:	00a04574 	movhi	r2,33045
81134b64:	1090b404 	addi	r2,r2,17104
81134b68:	10c01317 	ldw	r3,76(r2)
81134b6c:	e0bffb17 	ldw	r2,-20(fp)
81134b70:	1885883a 	add	r2,r3,r2
81134b74:	1007883a 	mov	r3,r2
81134b78:	d0a09417 	ldw	r2,-32176(gp)
81134b7c:	100b883a 	mov	r5,r2
81134b80:	1809883a 	mov	r4,r3
81134b84:	11325e00 	call	811325e0 <Read_Sector_Data>
81134b88:	10002626 	beq	r2,zero,81134c24 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81134b8c:	e03ffc15 	stw	zero,-16(fp)
81134b90:	00001a06 	br	81134bfc <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81134b94:	e0bffc17 	ldw	r2,-16(fp)
81134b98:	1004917a 	slli	r2,r2,5
81134b9c:	1007883a 	mov	r3,r2
81134ba0:	d0a09617 	ldw	r2,-32168(gp)
81134ba4:	10800a17 	ldw	r2,40(r2)
81134ba8:	1885883a 	add	r2,r3,r2
81134bac:	10800023 	ldbuio	r2,0(r2)
81134bb0:	10803fcc 	andi	r2,r2,255
81134bb4:	10803fcc 	andi	r2,r2,255
81134bb8:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81134bbc:	e0bfff0b 	ldhu	r2,-4(fp)
81134bc0:	10803960 	cmpeqi	r2,r2,229
81134bc4:	1000021e 	bne	r2,zero,81134bd0 <find_first_empty_record_in_root_directory+0xc4>
81134bc8:	e0bfff0b 	ldhu	r2,-4(fp)
81134bcc:	1000081e 	bne	r2,zero,81134bf0 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81134bd0:	e0bffb17 	ldw	r2,-20(fp)
81134bd4:	1006913a 	slli	r3,r2,4
81134bd8:	e0bffc17 	ldw	r2,-16(fp)
81134bdc:	1885883a 	add	r2,r3,r2
81134be0:	1004943a 	slli	r2,r2,16
81134be4:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81134be8:	e0bffe17 	ldw	r2,-8(fp)
81134bec:	00000f06 	br	81134c2c <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81134bf0:	e0bffc17 	ldw	r2,-16(fp)
81134bf4:	10800044 	addi	r2,r2,1
81134bf8:	e0bffc15 	stw	r2,-16(fp)
81134bfc:	e0bffc17 	ldw	r2,-16(fp)
81134c00:	10800410 	cmplti	r2,r2,16
81134c04:	103fe31e 	bne	r2,zero,81134b94 <__reset+0xfb114b94>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134c08:	e0bffb17 	ldw	r2,-20(fp)
81134c0c:	10800044 	addi	r2,r2,1
81134c10:	e0bffb15 	stw	r2,-20(fp)
81134c14:	e0fffb17 	ldw	r3,-20(fp)
81134c18:	e0bffd17 	ldw	r2,-12(fp)
81134c1c:	18bfd016 	blt	r3,r2,81134b60 <__reset+0xfb114b60>
81134c20:	00000106 	br	81134c28 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
81134c24:	0001883a 	nop
        }
    }
    return result;
81134c28:	e0bffe17 	ldw	r2,-8(fp)
}
81134c2c:	e037883a 	mov	sp,fp
81134c30:	dfc00117 	ldw	ra,4(sp)
81134c34:	df000017 	ldw	fp,0(sp)
81134c38:	dec00204 	addi	sp,sp,8
81134c3c:	f800283a 	ret

81134c40 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81134c40:	defffa04 	addi	sp,sp,-24
81134c44:	de00012e 	bgeu	sp,et,81134c4c <convert_filename_to_name_extension+0xc>
81134c48:	003b68fa 	trap	3
81134c4c:	df000515 	stw	fp,20(sp)
81134c50:	df000504 	addi	fp,sp,20
81134c54:	e13ffd15 	stw	r4,-12(fp)
81134c58:	e17ffe15 	stw	r5,-8(fp)
81134c5c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81134c60:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
81134c64:	e03ffb15 	stw	zero,-20(fp)
81134c68:	00002506 	br	81134d00 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81134c6c:	e0bffc17 	ldw	r2,-16(fp)
81134c70:	e0fffd17 	ldw	r3,-12(fp)
81134c74:	1885883a 	add	r2,r3,r2
81134c78:	10800003 	ldbu	r2,0(r2)
81134c7c:	10803fcc 	andi	r2,r2,255
81134c80:	1080201c 	xori	r2,r2,128
81134c84:	10bfe004 	addi	r2,r2,-128
81134c88:	10800ba0 	cmpeqi	r2,r2,46
81134c8c:	1000141e 	bne	r2,zero,81134ce0 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81134c90:	e0bffb17 	ldw	r2,-20(fp)
81134c94:	e0fffe17 	ldw	r3,-8(fp)
81134c98:	1885883a 	add	r2,r3,r2
81134c9c:	e0fffc17 	ldw	r3,-16(fp)
81134ca0:	e13ffd17 	ldw	r4,-12(fp)
81134ca4:	20c7883a 	add	r3,r4,r3
81134ca8:	18c00003 	ldbu	r3,0(r3)
81134cac:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81134cb0:	e0bffc17 	ldw	r2,-16(fp)
81134cb4:	e0fffd17 	ldw	r3,-12(fp)
81134cb8:	1885883a 	add	r2,r3,r2
81134cbc:	10800003 	ldbu	r2,0(r2)
81134cc0:	10803fcc 	andi	r2,r2,255
81134cc4:	1080201c 	xori	r2,r2,128
81134cc8:	10bfe004 	addi	r2,r2,-128
81134ccc:	10000926 	beq	r2,zero,81134cf4 <convert_filename_to_name_extension+0xb4>
81134cd0:	e0bffc17 	ldw	r2,-16(fp)
81134cd4:	10800044 	addi	r2,r2,1
81134cd8:	e0bffc15 	stw	r2,-16(fp)
81134cdc:	00000506 	br	81134cf4 <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
81134ce0:	e0bffb17 	ldw	r2,-20(fp)
81134ce4:	e0fffe17 	ldw	r3,-8(fp)
81134ce8:	1885883a 	add	r2,r3,r2
81134cec:	00c00804 	movi	r3,32
81134cf0:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81134cf4:	e0bffb17 	ldw	r2,-20(fp)
81134cf8:	10800044 	addi	r2,r2,1
81134cfc:	e0bffb15 	stw	r2,-20(fp)
81134d00:	e0bffb17 	ldw	r2,-20(fp)
81134d04:	10800210 	cmplti	r2,r2,8
81134d08:	103fd81e 	bne	r2,zero,81134c6c <__reset+0xfb114c6c>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81134d0c:	e0bffc17 	ldw	r2,-16(fp)
81134d10:	e0fffd17 	ldw	r3,-12(fp)
81134d14:	1885883a 	add	r2,r3,r2
81134d18:	10800003 	ldbu	r2,0(r2)
81134d1c:	10803fcc 	andi	r2,r2,255
81134d20:	1080201c 	xori	r2,r2,128
81134d24:	10bfe004 	addi	r2,r2,-128
81134d28:	10800b98 	cmpnei	r2,r2,46
81134d2c:	1000031e 	bne	r2,zero,81134d3c <convert_filename_to_name_extension+0xfc>
81134d30:	e0bffc17 	ldw	r2,-16(fp)
81134d34:	10800044 	addi	r2,r2,1
81134d38:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81134d3c:	e03ffb15 	stw	zero,-20(fp)
81134d40:	00001c06 	br	81134db4 <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
81134d44:	e0bffc17 	ldw	r2,-16(fp)
81134d48:	e0fffd17 	ldw	r3,-12(fp)
81134d4c:	1885883a 	add	r2,r3,r2
81134d50:	10800003 	ldbu	r2,0(r2)
81134d54:	10803fcc 	andi	r2,r2,255
81134d58:	1080201c 	xori	r2,r2,128
81134d5c:	10bfe004 	addi	r2,r2,-128
81134d60:	10000c26 	beq	r2,zero,81134d94 <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
81134d64:	e0bffb17 	ldw	r2,-20(fp)
81134d68:	e0ffff17 	ldw	r3,-4(fp)
81134d6c:	1885883a 	add	r2,r3,r2
81134d70:	e0fffc17 	ldw	r3,-16(fp)
81134d74:	e13ffd17 	ldw	r4,-12(fp)
81134d78:	20c7883a 	add	r3,r4,r3
81134d7c:	18c00003 	ldbu	r3,0(r3)
81134d80:	10c00005 	stb	r3,0(r2)
            local++;
81134d84:	e0bffc17 	ldw	r2,-16(fp)
81134d88:	10800044 	addi	r2,r2,1
81134d8c:	e0bffc15 	stw	r2,-16(fp)
81134d90:	00000506 	br	81134da8 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81134d94:	e0bffb17 	ldw	r2,-20(fp)
81134d98:	e0ffff17 	ldw	r3,-4(fp)
81134d9c:	1885883a 	add	r2,r3,r2
81134da0:	00c00804 	movi	r3,32
81134da4:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81134da8:	e0bffb17 	ldw	r2,-20(fp)
81134dac:	10800044 	addi	r2,r2,1
81134db0:	e0bffb15 	stw	r2,-20(fp)
81134db4:	e0bffb17 	ldw	r2,-20(fp)
81134db8:	108000d0 	cmplti	r2,r2,3
81134dbc:	103fe11e 	bne	r2,zero,81134d44 <__reset+0xfb114d44>
        {
            extension[counter] = ' ';
        }
    }

}
81134dc0:	0001883a 	nop
81134dc4:	e037883a 	mov	sp,fp
81134dc8:	df000017 	ldw	fp,0(sp)
81134dcc:	dec00104 	addi	sp,sp,4
81134dd0:	f800283a 	ret

81134dd4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81134dd4:	defff504 	addi	sp,sp,-44
81134dd8:	de00012e 	bgeu	sp,et,81134de0 <create_file+0xc>
81134ddc:	003b68fa 	trap	3
81134de0:	dfc00a15 	stw	ra,40(sp)
81134de4:	df000915 	stw	fp,36(sp)
81134de8:	df000904 	addi	fp,sp,36
81134dec:	e13ffd15 	stw	r4,-12(fp)
81134df0:	e17ffe15 	stw	r5,-8(fp)
81134df4:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81134df8:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81134dfc:	e0bffc04 	addi	r2,fp,-16
81134e00:	1009883a 	mov	r4,r2
81134e04:	11347040 	call	81134704 <find_first_empty_cluster>
81134e08:	1000a026 	beq	r2,zero,8113508c <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81134e0c:	e0bfff17 	ldw	r2,-4(fp)
81134e10:	10800a17 	ldw	r2,40(r2)
81134e14:	1000031e 	bne	r2,zero,81134e24 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81134e18:	1134b0c0 	call	81134b0c <find_first_empty_record_in_root_directory>
81134e1c:	e0bff815 	stw	r2,-32(fp)
81134e20:	00000606 	br	81134e3c <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81134e24:	e0bfff17 	ldw	r2,-4(fp)
81134e28:	1080058b 	ldhu	r2,22(r2)
81134e2c:	10bfffcc 	andi	r2,r2,65535
81134e30:	1009883a 	mov	r4,r2
81134e34:	11348b80 	call	811348b8 <find_first_empty_record_in_a_subdirectory>
81134e38:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81134e3c:	e0bff817 	ldw	r2,-32(fp)
81134e40:	10009216 	blt	r2,zero,8113508c <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81134e44:	e13ffd17 	ldw	r4,-12(fp)
81134e48:	11339e40 	call	811339e4 <get_dir_divider_location>
81134e4c:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81134e50:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81134e54:	00000b06 	br	81134e84 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81134e58:	e0fffa17 	ldw	r3,-24(fp)
81134e5c:	e0bff917 	ldw	r2,-28(fp)
81134e60:	1885883a 	add	r2,r3,r2
81134e64:	10800044 	addi	r2,r2,1
81134e68:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81134e6c:	e0bffa17 	ldw	r2,-24(fp)
81134e70:	e0fffd17 	ldw	r3,-12(fp)
81134e74:	1885883a 	add	r2,r3,r2
81134e78:	1009883a 	mov	r4,r2
81134e7c:	11339e40 	call	811339e4 <get_dir_divider_location>
81134e80:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81134e84:	e0bff917 	ldw	r2,-28(fp)
81134e88:	00bff316 	blt	zero,r2,81134e58 <__reset+0xfb114e58>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81134e8c:	e0bffa17 	ldw	r2,-24(fp)
81134e90:	e0fffd17 	ldw	r3,-12(fp)
81134e94:	1887883a 	add	r3,r3,r2
81134e98:	e13ffe17 	ldw	r4,-8(fp)
81134e9c:	e0bffe17 	ldw	r2,-8(fp)
81134ea0:	10800204 	addi	r2,r2,8
81134ea4:	100d883a 	mov	r6,r2
81134ea8:	200b883a 	mov	r5,r4
81134eac:	1809883a 	mov	r4,r3
81134eb0:	1134c400 	call	81134c40 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81134eb4:	e0bffe17 	ldw	r2,-8(fp)
81134eb8:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81134ebc:	e0bffe17 	ldw	r2,-8(fp)
81134ec0:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81134ec4:	e0bffe17 	ldw	r2,-8(fp)
81134ec8:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81134ecc:	e0bffe17 	ldw	r2,-8(fp)
81134ed0:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81134ed4:	e0bffe17 	ldw	r2,-8(fp)
81134ed8:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81134edc:	e0bffe17 	ldw	r2,-8(fp)
81134ee0:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81134ee4:	e0bffc17 	ldw	r2,-16(fp)
81134ee8:	1007883a 	mov	r3,r2
81134eec:	e0bffe17 	ldw	r2,-8(fp)
81134ef0:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81134ef4:	e0bffe17 	ldw	r2,-8(fp)
81134ef8:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81134efc:	e0fffc17 	ldw	r3,-16(fp)
81134f00:	e0bffe17 	ldw	r2,-8(fp)
81134f04:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81134f08:	e0bffe17 	ldw	r2,-8(fp)
81134f0c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
81134f10:	e0bffe17 	ldw	r2,-8(fp)
81134f14:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81134f18:	e0bff817 	ldw	r2,-32(fp)
81134f1c:	10ffffcc 	andi	r3,r2,65535
81134f20:	e0bffe17 	ldw	r2,-8(fp)
81134f24:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81134f28:	e0bff817 	ldw	r2,-32(fp)
81134f2c:	1004d43a 	srli	r2,r2,16
81134f30:	1000010e 	bge	r2,zero,81134f38 <create_file+0x164>
81134f34:	108003c4 	addi	r2,r2,15
81134f38:	1005d13a 	srai	r2,r2,4
81134f3c:	1007883a 	mov	r3,r2
81134f40:	e0bffe17 	ldw	r2,-8(fp)
81134f44:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81134f48:	e0bff817 	ldw	r2,-32(fp)
81134f4c:	1004d43a 	srli	r2,r2,16
81134f50:	1007883a 	mov	r3,r2
81134f54:	00a00034 	movhi	r2,32768
81134f58:	108003c4 	addi	r2,r2,15
81134f5c:	1884703a 	and	r2,r3,r2
81134f60:	1000040e 	bge	r2,zero,81134f74 <create_file+0x1a0>
81134f64:	10bfffc4 	addi	r2,r2,-1
81134f68:	00fffc04 	movi	r3,-16
81134f6c:	10c4b03a 	or	r2,r2,r3
81134f70:	10800044 	addi	r2,r2,1
81134f74:	1004917a 	slli	r2,r2,5
81134f78:	1007883a 	mov	r3,r2
81134f7c:	e0bffe17 	ldw	r2,-8(fp)
81134f80:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81134f84:	e0bfff17 	ldw	r2,-4(fp)
81134f88:	1080058b 	ldhu	r2,22(r2)
81134f8c:	10ffffcc 	andi	r3,r2,65535
81134f90:	e0bffe17 	ldw	r2,-8(fp)
81134f94:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81134f98:	e0bffe17 	ldw	r2,-8(fp)
81134f9c:	00c00044 	movi	r3,1
81134fa0:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
81134fa4:	e0bffe17 	ldw	r2,-8(fp)
81134fa8:	00c00044 	movi	r3,1
81134fac:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81134fb0:	e0bffe17 	ldw	r2,-8(fp)
81134fb4:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81134fb8:	1000071e 	bne	r2,zero,81134fd8 <create_file+0x204>
81134fbc:	00a04574 	movhi	r2,33045
81134fc0:	1090b404 	addi	r2,r2,17104
81134fc4:	10c01317 	ldw	r3,76(r2)
81134fc8:	e0bffe17 	ldw	r2,-8(fp)
81134fcc:	10800b17 	ldw	r2,44(r2)
81134fd0:	1885883a 	add	r2,r3,r2
81134fd4:	00000f06 	br	81135014 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81134fd8:	00a04574 	movhi	r2,33045
81134fdc:	1090b404 	addi	r2,r2,17104
81134fe0:	10c01417 	ldw	r3,80(r2)
81134fe4:	e0bffe17 	ldw	r2,-8(fp)
81134fe8:	10800a17 	ldw	r2,40(r2)
81134fec:	113fff84 	addi	r4,r2,-2
81134ff0:	00a04574 	movhi	r2,33045
81134ff4:	1090b404 	addi	r2,r2,17104
81134ff8:	10800383 	ldbu	r2,14(r2)
81134ffc:	10803fcc 	andi	r2,r2,255
81135000:	2085383a 	mul	r2,r4,r2
81135004:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81135008:	e0bffe17 	ldw	r2,-8(fp)
8113500c:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81135010:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81135014:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81135018:	e0bffb17 	ldw	r2,-20(fp)
8113501c:	d0e09417 	ldw	r3,-32176(gp)
81135020:	180b883a 	mov	r5,r3
81135024:	1009883a 	mov	r4,r2
81135028:	11325e00 	call	811325e0 <Read_Sector_Data>
8113502c:	10001726 	beq	r2,zero,8113508c <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
81135030:	e0bffe17 	ldw	r2,-8(fp)
81135034:	10800c0b 	ldhu	r2,48(r2)
81135038:	10bfffcc 	andi	r2,r2,65535
8113503c:	10a0001c 	xori	r2,r2,32768
81135040:	10a00004 	addi	r2,r2,-32768
81135044:	e17ffe17 	ldw	r5,-8(fp)
81135048:	1009883a 	mov	r4,r2
8113504c:	1132c940 	call	81132c94 <Write_File_Record_At_Offset>
81135050:	10000e26 	beq	r2,zero,8113508c <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81135054:	113258c0 	call	8113258c <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81135058:	e0bffc17 	ldw	r2,-16(fp)
8113505c:	01800044 	movi	r6,1
81135060:	017fffc4 	movi	r5,-1
81135064:	1009883a 	mov	r4,r2
81135068:	113277c0 	call	8113277c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
8113506c:	e0bffc17 	ldw	r2,-16(fp)
81135070:	000d883a 	mov	r6,zero
81135074:	017fffc4 	movi	r5,-1
81135078:	1009883a 	mov	r4,r2
8113507c:	113277c0 	call	8113277c <mark_cluster>
81135080:	10000226 	beq	r2,zero,8113508c <create_file+0x2b8>
                    {
                        result = true;
81135084:	00800044 	movi	r2,1
81135088:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
8113508c:	e0bff717 	ldw	r2,-36(fp)
}
81135090:	e037883a 	mov	sp,fp
81135094:	dfc00117 	ldw	ra,4(sp)
81135098:	df000017 	ldw	fp,0(sp)
8113509c:	dec00204 	addi	sp,sp,8
811350a0:	f800283a 	ret

811350a4 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
811350a4:	defffb04 	addi	sp,sp,-20
811350a8:	de00012e 	bgeu	sp,et,811350b0 <copy_file_record_name_to_string+0xc>
811350ac:	003b68fa 	trap	3
811350b0:	df000415 	stw	fp,16(sp)
811350b4:	df000404 	addi	fp,sp,16
811350b8:	e13ffe15 	stw	r4,-8(fp)
811350bc:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
811350c0:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
811350c4:	e03ffc15 	stw	zero,-16(fp)
811350c8:	00001506 	br	81135120 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
811350cc:	e0fffe17 	ldw	r3,-8(fp)
811350d0:	e0bffc17 	ldw	r2,-16(fp)
811350d4:	1885883a 	add	r2,r3,r2
811350d8:	10800003 	ldbu	r2,0(r2)
811350dc:	10803fcc 	andi	r2,r2,255
811350e0:	10800820 	cmpeqi	r2,r2,32
811350e4:	10000b1e 	bne	r2,zero,81135114 <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
811350e8:	e0bffd17 	ldw	r2,-12(fp)
811350ec:	e0ffff17 	ldw	r3,-4(fp)
811350f0:	1885883a 	add	r2,r3,r2
811350f4:	e13ffe17 	ldw	r4,-8(fp)
811350f8:	e0fffc17 	ldw	r3,-16(fp)
811350fc:	20c7883a 	add	r3,r4,r3
81135100:	18c00003 	ldbu	r3,0(r3)
81135104:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81135108:	e0bffd17 	ldw	r2,-12(fp)
8113510c:	10800044 	addi	r2,r2,1
81135110:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81135114:	e0bffc17 	ldw	r2,-16(fp)
81135118:	10800044 	addi	r2,r2,1
8113511c:	e0bffc15 	stw	r2,-16(fp)
81135120:	e0bffc17 	ldw	r2,-16(fp)
81135124:	10800210 	cmplti	r2,r2,8
81135128:	103fe81e 	bne	r2,zero,811350cc <__reset+0xfb1150cc>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
8113512c:	e0bffe17 	ldw	r2,-8(fp)
81135130:	10800203 	ldbu	r2,8(r2)
81135134:	10803fcc 	andi	r2,r2,255
81135138:	10800820 	cmpeqi	r2,r2,32
8113513c:	1000241e 	bne	r2,zero,811351d0 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81135140:	e0bffd17 	ldw	r2,-12(fp)
81135144:	e0ffff17 	ldw	r3,-4(fp)
81135148:	1885883a 	add	r2,r3,r2
8113514c:	00c00b84 	movi	r3,46
81135150:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81135154:	e0bffd17 	ldw	r2,-12(fp)
81135158:	10800044 	addi	r2,r2,1
8113515c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81135160:	e03ffc15 	stw	zero,-16(fp)
81135164:	00001706 	br	811351c4 <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81135168:	e0fffe17 	ldw	r3,-8(fp)
8113516c:	e0bffc17 	ldw	r2,-16(fp)
81135170:	1885883a 	add	r2,r3,r2
81135174:	10800204 	addi	r2,r2,8
81135178:	10800003 	ldbu	r2,0(r2)
8113517c:	10803fcc 	andi	r2,r2,255
81135180:	10800820 	cmpeqi	r2,r2,32
81135184:	10000c1e 	bne	r2,zero,811351b8 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81135188:	e0bffd17 	ldw	r2,-12(fp)
8113518c:	e0ffff17 	ldw	r3,-4(fp)
81135190:	1885883a 	add	r2,r3,r2
81135194:	e13ffe17 	ldw	r4,-8(fp)
81135198:	e0fffc17 	ldw	r3,-16(fp)
8113519c:	20c7883a 	add	r3,r4,r3
811351a0:	18c00204 	addi	r3,r3,8
811351a4:	18c00003 	ldbu	r3,0(r3)
811351a8:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
811351ac:	e0bffd17 	ldw	r2,-12(fp)
811351b0:	10800044 	addi	r2,r2,1
811351b4:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
811351b8:	e0bffc17 	ldw	r2,-16(fp)
811351bc:	10800044 	addi	r2,r2,1
811351c0:	e0bffc15 	stw	r2,-16(fp)
811351c4:	e0bffc17 	ldw	r2,-16(fp)
811351c8:	108000d0 	cmplti	r2,r2,3
811351cc:	103fe61e 	bne	r2,zero,81135168 <__reset+0xfb115168>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
811351d0:	e0bffd17 	ldw	r2,-12(fp)
811351d4:	e0ffff17 	ldw	r3,-4(fp)
811351d8:	1885883a 	add	r2,r3,r2
811351dc:	10000005 	stb	zero,0(r2)
}
811351e0:	0001883a 	nop
811351e4:	e037883a 	mov	sp,fp
811351e8:	df000017 	ldw	fp,0(sp)
811351ec:	dec00104 	addi	sp,sp,4
811351f0:	f800283a 	ret

811351f4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
811351f4:	defffc04 	addi	sp,sp,-16
811351f8:	de00012e 	bgeu	sp,et,81135200 <alt_up_sd_card_open_dev+0xc>
811351fc:	003b68fa 	trap	3
81135200:	dfc00315 	stw	ra,12(sp)
81135204:	df000215 	stw	fp,8(sp)
81135208:	df000204 	addi	fp,sp,8
8113520c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81135210:	d1600d04 	addi	r5,gp,-32716
81135214:	e13fff17 	ldw	r4,-4(fp)
81135218:	113a6ec0 	call	8113a6ec <alt_find_dev>
8113521c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81135220:	e0bffe17 	ldw	r2,-8(fp)
81135224:	10001e26 	beq	r2,zero,811352a0 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81135228:	e0bffe17 	ldw	r2,-8(fp)
8113522c:	10800a17 	ldw	r2,40(r2)
81135230:	10808d04 	addi	r2,r2,564
81135234:	d0a08e15 	stw	r2,-32200(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81135238:	e0bffe17 	ldw	r2,-8(fp)
8113523c:	10800a17 	ldw	r2,40(r2)
81135240:	10808904 	addi	r2,r2,548
81135244:	d0a08f15 	stw	r2,-32196(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81135248:	e0bffe17 	ldw	r2,-8(fp)
8113524c:	10800a17 	ldw	r2,40(r2)
81135250:	10808404 	addi	r2,r2,528
81135254:	d0a09015 	stw	r2,-32192(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81135258:	e0bffe17 	ldw	r2,-8(fp)
8113525c:	10800a17 	ldw	r2,40(r2)
81135260:	10808c04 	addi	r2,r2,560
81135264:	d0a09115 	stw	r2,-32188(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81135268:	e0bffe17 	ldw	r2,-8(fp)
8113526c:	10800a17 	ldw	r2,40(r2)
81135270:	10808b04 	addi	r2,r2,556
81135274:	d0a09215 	stw	r2,-32184(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81135278:	e0bffe17 	ldw	r2,-8(fp)
8113527c:	10800a17 	ldw	r2,40(r2)
81135280:	d0a09315 	stw	r2,-32180(gp)
		device_pointer = dev;
81135284:	e0bffe17 	ldw	r2,-8(fp)
81135288:	d0a09615 	stw	r2,-32168(gp)
		initialized = false;
8113528c:	d0208c15 	stw	zero,-32208(gp)
		is_sd_card_formated_as_FAT16 = false;
81135290:	d0208d15 	stw	zero,-32204(gp)
		search_data.valid = false;
81135294:	00a04574 	movhi	r2,33045
81135298:	1090af04 	addi	r2,r2,17084
8113529c:	10000415 	stw	zero,16(r2)
	}
	return dev;
811352a0:	e0bffe17 	ldw	r2,-8(fp)
}
811352a4:	e037883a 	mov	sp,fp
811352a8:	dfc00117 	ldw	ra,4(sp)
811352ac:	df000017 	ldw	fp,0(sp)
811352b0:	dec00204 	addi	sp,sp,8
811352b4:	f800283a 	ret

811352b8 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
811352b8:	defffd04 	addi	sp,sp,-12
811352bc:	de00012e 	bgeu	sp,et,811352c4 <alt_up_sd_card_is_Present+0xc>
811352c0:	003b68fa 	trap	3
811352c4:	df000215 	stw	fp,8(sp)
811352c8:	df000204 	addi	fp,sp,8
    bool result = false;
811352cc:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
811352d0:	d0a09617 	ldw	r2,-32168(gp)
811352d4:	10000826 	beq	r2,zero,811352f8 <alt_up_sd_card_is_Present+0x40>
811352d8:	d0a08e17 	ldw	r2,-32200(gp)
811352dc:	1080002b 	ldhuio	r2,0(r2)
811352e0:	10bfffcc 	andi	r2,r2,65535
811352e4:	1080008c 	andi	r2,r2,2
811352e8:	10000326 	beq	r2,zero,811352f8 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
811352ec:	00800044 	movi	r2,1
811352f0:	e0bffe15 	stw	r2,-8(fp)
811352f4:	00001e06 	br	81135370 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
811352f8:	d0a08c17 	ldw	r2,-32208(gp)
811352fc:	10800058 	cmpnei	r2,r2,1
81135300:	10001b1e 	bne	r2,zero,81135370 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81135304:	d0208c15 	stw	zero,-32208(gp)
		search_data.valid = false;
81135308:	00a04574 	movhi	r2,33045
8113530c:	1090af04 	addi	r2,r2,17084
81135310:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81135314:	d0208d15 	stw	zero,-32204(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81135318:	e03fff15 	stw	zero,-4(fp)
8113531c:	00001106 	br	81135364 <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81135320:	00a04574 	movhi	r2,33045
81135324:	1090c904 	addi	r2,r2,17188
81135328:	e0ffff17 	ldw	r3,-4(fp)
8113532c:	180691ba 	slli	r3,r3,6
81135330:	10c5883a 	add	r2,r2,r3
81135334:	10800f04 	addi	r2,r2,60
81135338:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
8113533c:	00a04574 	movhi	r2,33045
81135340:	1090c904 	addi	r2,r2,17188
81135344:	e0ffff17 	ldw	r3,-4(fp)
81135348:	180691ba 	slli	r3,r3,6
8113534c:	10c5883a 	add	r2,r2,r3
81135350:	10800e04 	addi	r2,r2,56
81135354:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81135358:	e0bfff17 	ldw	r2,-4(fp)
8113535c:	10800044 	addi	r2,r2,1
81135360:	e0bfff15 	stw	r2,-4(fp)
81135364:	e0bfff17 	ldw	r2,-4(fp)
81135368:	10800510 	cmplti	r2,r2,20
8113536c:	103fec1e 	bne	r2,zero,81135320 <__reset+0xfb115320>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81135370:	e0bffe17 	ldw	r2,-8(fp)
}
81135374:	e037883a 	mov	sp,fp
81135378:	df000017 	ldw	fp,0(sp)
8113537c:	dec00104 	addi	sp,sp,4
81135380:	f800283a 	ret

81135384 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
81135384:	defffd04 	addi	sp,sp,-12
81135388:	de00012e 	bgeu	sp,et,81135390 <alt_up_sd_card_is_FAT16+0xc>
8113538c:	003b68fa 	trap	3
81135390:	dfc00215 	stw	ra,8(sp)
81135394:	df000115 	stw	fp,4(sp)
81135398:	df000104 	addi	fp,sp,4
	bool result = false;
8113539c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
811353a0:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
811353a4:	10000c26 	beq	r2,zero,811353d8 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811353a8:	d0a08c17 	ldw	r2,-32208(gp)
811353ac:	1000071e 	bne	r2,zero,811353cc <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811353b0:	11335b00 	call	811335b0 <Look_for_FAT16>
811353b4:	d0a08d15 	stw	r2,-32204(gp)
			initialized = is_sd_card_formated_as_FAT16;
811353b8:	d0a08d17 	ldw	r2,-32204(gp)
811353bc:	d0a08c15 	stw	r2,-32208(gp)
			search_data.valid = false;
811353c0:	00a04574 	movhi	r2,33045
811353c4:	1090af04 	addi	r2,r2,17084
811353c8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
811353cc:	d0a08d17 	ldw	r2,-32204(gp)
811353d0:	e0bfff15 	stw	r2,-4(fp)
811353d4:	00000206 	br	811353e0 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
811353d8:	d0208c15 	stw	zero,-32208(gp)
		is_sd_card_formated_as_FAT16 = false;
811353dc:	d0208d15 	stw	zero,-32204(gp)
	}

	return result;
811353e0:	e0bfff17 	ldw	r2,-4(fp)
}
811353e4:	e037883a 	mov	sp,fp
811353e8:	dfc00117 	ldw	ra,4(sp)
811353ec:	df000017 	ldw	fp,0(sp)
811353f0:	dec00204 	addi	sp,sp,8
811353f4:	f800283a 	ret

811353f8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
811353f8:	deffea04 	addi	sp,sp,-88
811353fc:	de00012e 	bgeu	sp,et,81135404 <alt_up_sd_card_find_first+0xc>
81135400:	003b68fa 	trap	3
81135404:	dfc01515 	stw	ra,84(sp)
81135408:	df001415 	stw	fp,80(sp)
8113540c:	df001404 	addi	fp,sp,80
81135410:	e13ffe15 	stw	r4,-8(fp)
81135414:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81135418:	00800084 	movi	r2,2
8113541c:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81135420:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
81135424:	10002426 	beq	r2,zero,811354b8 <alt_up_sd_card_find_first+0xc0>
81135428:	d0a08d17 	ldw	r2,-32204(gp)
8113542c:	10002226 	beq	r2,zero,811354b8 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81135430:	e0ffee04 	addi	r3,fp,-72
81135434:	e0bfed04 	addi	r2,fp,-76
81135438:	180d883a 	mov	r6,r3
8113543c:	100b883a 	mov	r5,r2
81135440:	e13ffe17 	ldw	r4,-8(fp)
81135444:	1133d480 	call	81133d48 <get_home_directory_cluster_for_file>
81135448:	10001926 	beq	r2,zero,811354b0 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
8113544c:	e0bfed17 	ldw	r2,-76(fp)
81135450:	1007883a 	mov	r3,r2
81135454:	00a04574 	movhi	r2,33045
81135458:	1090af04 	addi	r2,r2,17084
8113545c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
81135460:	e0bfed17 	ldw	r2,-76(fp)
81135464:	1007883a 	mov	r3,r2
81135468:	00a04574 	movhi	r2,33045
8113546c:	1090af04 	addi	r2,r2,17084
81135470:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
81135474:	00a04574 	movhi	r2,33045
81135478:	1090af04 	addi	r2,r2,17084
8113547c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
81135480:	00a04574 	movhi	r2,33045
81135484:	1090af04 	addi	r2,r2,17084
81135488:	00ffffc4 	movi	r3,-1
8113548c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
81135490:	00a04574 	movhi	r2,33045
81135494:	1090af04 	addi	r2,r2,17084
81135498:	00c00044 	movi	r3,1
8113549c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
811354a0:	e13fff17 	ldw	r4,-4(fp)
811354a4:	11354d00 	call	811354d0 <alt_up_sd_card_find_next>
811354a8:	e0bfec0d 	sth	r2,-80(fp)
811354ac:	00000206 	br	811354b8 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811354b0:	00800044 	movi	r2,1
811354b4:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
811354b8:	e0bfec0b 	ldhu	r2,-80(fp)
}
811354bc:	e037883a 	mov	sp,fp
811354c0:	dfc00117 	ldw	ra,4(sp)
811354c4:	df000017 	ldw	fp,0(sp)
811354c8:	dec00204 	addi	sp,sp,8
811354cc:	f800283a 	ret

811354d0 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
811354d0:	deffe404 	addi	sp,sp,-112
811354d4:	de00012e 	bgeu	sp,et,811354dc <alt_up_sd_card_find_next+0xc>
811354d8:	003b68fa 	trap	3
811354dc:	dfc01b15 	stw	ra,108(sp)
811354e0:	df001a15 	stw	fp,104(sp)
811354e4:	df001a04 	addi	fp,sp,104
811354e8:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
811354ec:	00800084 	movi	r2,2
811354f0:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811354f4:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
811354f8:	1000df26 	beq	r2,zero,81135878 <alt_up_sd_card_find_next+0x3a8>
811354fc:	d0a08d17 	ldw	r2,-32204(gp)
81135500:	1000dd26 	beq	r2,zero,81135878 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81135504:	00a04574 	movhi	r2,33045
81135508:	1090af04 	addi	r2,r2,17084
8113550c:	10800417 	ldw	r2,16(r2)
81135510:	1000d726 	beq	r2,zero,81135870 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
81135514:	00a04574 	movhi	r2,33045
81135518:	1090af04 	addi	r2,r2,17084
8113551c:	10800117 	ldw	r2,4(r2)
81135520:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
81135524:	e0bfe717 	ldw	r2,-100(fp)
81135528:	1000561e 	bne	r2,zero,81135684 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8113552c:	00a04574 	movhi	r2,33045
81135530:	1090b404 	addi	r2,r2,17104
81135534:	1080050b 	ldhu	r2,20(r2)
81135538:	10bfffcc 	andi	r2,r2,65535
8113553c:	1006917a 	slli	r3,r2,5
81135540:	00a04574 	movhi	r2,33045
81135544:	1090b404 	addi	r2,r2,17104
81135548:	1080030b 	ldhu	r2,12(r2)
8113554c:	10bfffcc 	andi	r2,r2,65535
81135550:	1885283a 	div	r2,r3,r2
81135554:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81135558:	00a04574 	movhi	r2,33045
8113555c:	1090af04 	addi	r2,r2,17084
81135560:	10800217 	ldw	r2,8(r2)
81135564:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81135568:	00a04574 	movhi	r2,33045
8113556c:	1090af04 	addi	r2,r2,17084
81135570:	1080030b 	ldhu	r2,12(r2)
81135574:	10bfffcc 	andi	r2,r2,65535
81135578:	10a0001c 	xori	r2,r2,32768
8113557c:	10a00004 	addi	r2,r2,-32768
81135580:	10800044 	addi	r2,r2,1
81135584:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81135588:	00003606 	br	81135664 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8113558c:	00a04574 	movhi	r2,33045
81135590:	1090b404 	addi	r2,r2,17104
81135594:	10c01317 	ldw	r3,76(r2)
81135598:	e0bfe817 	ldw	r2,-96(fp)
8113559c:	1885883a 	add	r2,r3,r2
811355a0:	1007883a 	mov	r3,r2
811355a4:	d0a09417 	ldw	r2,-32176(gp)
811355a8:	100b883a 	mov	r5,r2
811355ac:	1809883a 	mov	r4,r3
811355b0:	11325e00 	call	811325e0 <Read_Sector_Data>
811355b4:	10002f26 	beq	r2,zero,81135674 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811355b8:	00002306 	br	81135648 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
811355bc:	e0bfe917 	ldw	r2,-92(fp)
811355c0:	1004917a 	slli	r2,r2,5
811355c4:	e13fe817 	ldw	r4,-96(fp)
811355c8:	e0ffef04 	addi	r3,fp,-68
811355cc:	200f883a 	mov	r7,r4
811355d0:	000d883a 	mov	r6,zero
811355d4:	180b883a 	mov	r5,r3
811355d8:	1009883a 	mov	r4,r2
811355dc:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
811355e0:	10001626 	beq	r2,zero,8113563c <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
811355e4:	e0bfef03 	ldbu	r2,-68(fp)
811355e8:	10803fcc 	andi	r2,r2,255
811355ec:	10001326 	beq	r2,zero,8113563c <alt_up_sd_card_find_next+0x16c>
811355f0:	e0bfef03 	ldbu	r2,-68(fp)
811355f4:	10803fcc 	andi	r2,r2,255
811355f8:	10803960 	cmpeqi	r2,r2,229
811355fc:	10000f1e 	bne	r2,zero,8113563c <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81135600:	e0bfe917 	ldw	r2,-92(fp)
81135604:	1007883a 	mov	r3,r2
81135608:	00a04574 	movhi	r2,33045
8113560c:	1090af04 	addi	r2,r2,17084
81135610:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
81135614:	e0ffe817 	ldw	r3,-96(fp)
81135618:	00a04574 	movhi	r2,33045
8113561c:	1090af04 	addi	r2,r2,17084
81135620:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
81135624:	e0bfef04 	addi	r2,fp,-68
81135628:	e17fff17 	ldw	r5,-4(fp)
8113562c:	1009883a 	mov	r4,r2
81135630:	11350a40 	call	811350a4 <copy_file_record_name_to_string>
									return 0;
81135634:	0005883a 	mov	r2,zero
81135638:	00009006 	br	8113587c <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
8113563c:	e0bfe917 	ldw	r2,-92(fp)
81135640:	10800044 	addi	r2,r2,1
81135644:	e0bfe915 	stw	r2,-92(fp)
81135648:	e0bfe917 	ldw	r2,-92(fp)
8113564c:	10800410 	cmplti	r2,r2,16
81135650:	103fda1e 	bne	r2,zero,811355bc <__reset+0xfb1155bc>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
81135654:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81135658:	e0bfe817 	ldw	r2,-96(fp)
8113565c:	10800044 	addi	r2,r2,1
81135660:	e0bfe815 	stw	r2,-96(fp)
81135664:	e0ffe817 	ldw	r3,-96(fp)
81135668:	e0bfec17 	ldw	r2,-80(fp)
8113566c:	18bfc716 	blt	r3,r2,8113558c <__reset+0xfb11558c>
81135670:	00000106 	br	81135678 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
81135674:	0001883a 	nop
					}
				}
				result = -1;
81135678:	00bfffc4 	movi	r2,-1
8113567c:	e0bfe60d 	sth	r2,-104(fp)
81135680:	00007d06 	br	81135878 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
81135684:	00a04574 	movhi	r2,33045
81135688:	1090af04 	addi	r2,r2,17084
8113568c:	1080030b 	ldhu	r2,12(r2)
81135690:	10bfffcc 	andi	r2,r2,65535
81135694:	10a0001c 	xori	r2,r2,32768
81135698:	10a00004 	addi	r2,r2,-32768
8113569c:	10800044 	addi	r2,r2,1
811356a0:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811356a4:	e0bfe717 	ldw	r2,-100(fp)
811356a8:	10ffff84 	addi	r3,r2,-2
811356ac:	00a04574 	movhi	r2,33045
811356b0:	1090b404 	addi	r2,r2,17104
811356b4:	10800383 	ldbu	r2,14(r2)
811356b8:	10803fcc 	andi	r2,r2,255
811356bc:	1885383a 	mul	r2,r3,r2
811356c0:	1007883a 	mov	r3,r2
811356c4:	00a04574 	movhi	r2,33045
811356c8:	1090b404 	addi	r2,r2,17104
811356cc:	10801417 	ldw	r2,80(r2)
811356d0:	1885883a 	add	r2,r3,r2
811356d4:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
811356d8:	00a04574 	movhi	r2,33045
811356dc:	1090af04 	addi	r2,r2,17084
811356e0:	10800217 	ldw	r2,8(r2)
811356e4:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811356e8:	00003806 	br	811357cc <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811356ec:	e0ffeb17 	ldw	r3,-84(fp)
811356f0:	e0bfed17 	ldw	r2,-76(fp)
811356f4:	1885883a 	add	r2,r3,r2
811356f8:	d0e09417 	ldw	r3,-32176(gp)
811356fc:	180b883a 	mov	r5,r3
81135700:	1009883a 	mov	r4,r2
81135704:	11325e00 	call	811325e0 <Read_Sector_Data>
81135708:	10003726 	beq	r2,zero,811357e8 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
8113570c:	00002806 	br	811357b0 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81135710:	e0bfea17 	ldw	r2,-88(fp)
81135714:	1004917a 	slli	r2,r2,5
81135718:	e13fe717 	ldw	r4,-100(fp)
8113571c:	e17feb17 	ldw	r5,-84(fp)
81135720:	e0ffef04 	addi	r3,fp,-68
81135724:	280f883a 	mov	r7,r5
81135728:	200d883a 	mov	r6,r4
8113572c:	180b883a 	mov	r5,r3
81135730:	1009883a 	mov	r4,r2
81135734:	1132a100 	call	81132a10 <Read_File_Record_At_Offset>
81135738:	10001a26 	beq	r2,zero,811357a4 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8113573c:	e0bfef03 	ldbu	r2,-68(fp)
81135740:	10803fcc 	andi	r2,r2,255
81135744:	10001726 	beq	r2,zero,811357a4 <alt_up_sd_card_find_next+0x2d4>
81135748:	e0bfef03 	ldbu	r2,-68(fp)
8113574c:	10803fcc 	andi	r2,r2,255
81135750:	10803960 	cmpeqi	r2,r2,229
81135754:	1000131e 	bne	r2,zero,811357a4 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81135758:	e0ffe717 	ldw	r3,-100(fp)
8113575c:	00a04574 	movhi	r2,33045
81135760:	1090af04 	addi	r2,r2,17084
81135764:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81135768:	e0bfea17 	ldw	r2,-88(fp)
8113576c:	1007883a 	mov	r3,r2
81135770:	00a04574 	movhi	r2,33045
81135774:	1090af04 	addi	r2,r2,17084
81135778:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
8113577c:	e0ffeb17 	ldw	r3,-84(fp)
81135780:	00a04574 	movhi	r2,33045
81135784:	1090af04 	addi	r2,r2,17084
81135788:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
8113578c:	e0bfef04 	addi	r2,fp,-68
81135790:	e17fff17 	ldw	r5,-4(fp)
81135794:	1009883a 	mov	r4,r2
81135798:	11350a40 	call	811350a4 <copy_file_record_name_to_string>
										return 0;
8113579c:	0005883a 	mov	r2,zero
811357a0:	00003606 	br	8113587c <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
811357a4:	e0bfea17 	ldw	r2,-88(fp)
811357a8:	10800044 	addi	r2,r2,1
811357ac:	e0bfea15 	stw	r2,-88(fp)
811357b0:	e0bfea17 	ldw	r2,-88(fp)
811357b4:	10800410 	cmplti	r2,r2,16
811357b8:	103fd51e 	bne	r2,zero,81135710 <__reset+0xfb115710>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
811357bc:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811357c0:	e0bfeb17 	ldw	r2,-84(fp)
811357c4:	10800044 	addi	r2,r2,1
811357c8:	e0bfeb15 	stw	r2,-84(fp)
811357cc:	00a04574 	movhi	r2,33045
811357d0:	1090b404 	addi	r2,r2,17104
811357d4:	10800383 	ldbu	r2,14(r2)
811357d8:	10803fcc 	andi	r2,r2,255
811357dc:	e0ffeb17 	ldw	r3,-84(fp)
811357e0:	18bfc216 	blt	r3,r2,811356ec <__reset+0xfb1156ec>
811357e4:	00000106 	br	811357ec <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
811357e8:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
811357ec:	00a04574 	movhi	r2,33045
811357f0:	1090b404 	addi	r2,r2,17104
811357f4:	10800383 	ldbu	r2,14(r2)
811357f8:	10803fcc 	andi	r2,r2,255
811357fc:	e0ffeb17 	ldw	r3,-84(fp)
81135800:	18801716 	blt	r3,r2,81135860 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81135804:	e0bfe717 	ldw	r2,-100(fp)
81135808:	e0ffee04 	addi	r3,fp,-72
8113580c:	180b883a 	mov	r5,r3
81135810:	1009883a 	mov	r4,r2
81135814:	11326c00 	call	811326c0 <get_cluster_flag>
81135818:	10000f26 	beq	r2,zero,81135858 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8113581c:	e0bfee0b 	ldhu	r2,-72(fp)
81135820:	10bfffcc 	andi	r2,r2,65535
81135824:	10fffe0c 	andi	r3,r2,65528
81135828:	00bffe14 	movui	r2,65528
8113582c:	1880051e 	bne	r3,r2,81135844 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
81135830:	00bfffc4 	movi	r2,-1
81135834:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81135838:	00a04574 	movhi	r2,33045
8113583c:	1090af04 	addi	r2,r2,17084
81135840:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
81135844:	e0bfee0b 	ldhu	r2,-72(fp)
81135848:	10bfffcc 	andi	r2,r2,65535
8113584c:	10bffe0c 	andi	r2,r2,65528
81135850:	e0bfe715 	stw	r2,-100(fp)
81135854:	00000206 	br	81135860 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81135858:	00bfffc4 	movi	r2,-1
8113585c:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
81135860:	e0bfe717 	ldw	r2,-100(fp)
81135864:	00fffdd4 	movui	r3,65527
81135868:	18bf8e0e 	bge	r3,r2,811356a4 <__reset+0xfb1156a4>
8113586c:	00000206 	br	81135878 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81135870:	008000c4 	movi	r2,3
81135874:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81135878:	e0bfe60b 	ldhu	r2,-104(fp)
}
8113587c:	e037883a 	mov	sp,fp
81135880:	dfc00117 	ldw	ra,4(sp)
81135884:	df000017 	ldw	fp,0(sp)
81135888:	dec00204 	addi	sp,sp,8
8113588c:	f800283a 	ret

81135890 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81135890:	deffe904 	addi	sp,sp,-92
81135894:	de00012e 	bgeu	sp,et,8113589c <alt_up_sd_card_fopen+0xc>
81135898:	003b68fa 	trap	3
8113589c:	dfc01615 	stw	ra,88(sp)
811358a0:	df001515 	stw	fp,84(sp)
811358a4:	df001504 	addi	fp,sp,84
811358a8:	e13ffe15 	stw	r4,-8(fp)
811358ac:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
811358b0:	00bfffc4 	movi	r2,-1
811358b4:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811358b8:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
811358bc:	1000cf26 	beq	r2,zero,81135bfc <alt_up_sd_card_fopen+0x36c>
811358c0:	d0a08d17 	ldw	r2,-32204(gp)
811358c4:	1000cd26 	beq	r2,zero,81135bfc <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
811358c8:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
811358cc:	e13ffe17 	ldw	r4,-8(fp)
811358d0:	11336a40 	call	811336a4 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
811358d4:	e13ffe17 	ldw	r4,-8(fp)
811358d8:	11337700 	call	81133770 <check_file_name_for_FAT16_compliance>
811358dc:	1000c726 	beq	r2,zero,81135bfc <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
811358e0:	e0ffee04 	addi	r3,fp,-72
811358e4:	e0bfed04 	addi	r2,fp,-76
811358e8:	180d883a 	mov	r6,r3
811358ec:	100b883a 	mov	r5,r2
811358f0:	e13ffe17 	ldw	r4,-8(fp)
811358f4:	1133d480 	call	81133d48 <get_home_directory_cluster_for_file>
811358f8:	1000021e 	bne	r2,zero,81135904 <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
811358fc:	e0bfeb0b 	ldhu	r2,-84(fp)
81135900:	0000bf06 	br	81135c00 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81135904:	e03fec15 	stw	zero,-80(fp)
81135908:	00000e06 	br	81135944 <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
8113590c:	00a04574 	movhi	r2,33045
81135910:	1090c904 	addi	r2,r2,17188
81135914:	e0ffec17 	ldw	r3,-80(fp)
81135918:	180691ba 	slli	r3,r3,6
8113591c:	10c5883a 	add	r2,r2,r3
81135920:	10800f04 	addi	r2,r2,60
81135924:	10800017 	ldw	r2,0(r2)
81135928:	1000031e 	bne	r2,zero,81135938 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
8113592c:	e0bfec17 	ldw	r2,-80(fp)
81135930:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
81135934:	00000606 	br	81135950 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81135938:	e0bfec17 	ldw	r2,-80(fp)
8113593c:	10800044 	addi	r2,r2,1
81135940:	e0bfec15 	stw	r2,-80(fp)
81135944:	e0bfec17 	ldw	r2,-80(fp)
81135948:	10800510 	cmplti	r2,r2,20
8113594c:	103fef1e 	bne	r2,zero,8113590c <__reset+0xfb11590c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81135950:	e0bfeb0f 	ldh	r2,-84(fp)
81135954:	1000a916 	blt	r2,zero,81135bfc <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81135958:	e0bfed17 	ldw	r2,-76(fp)
8113595c:	1009883a 	mov	r4,r2
81135960:	e0bfeb0f 	ldh	r2,-84(fp)
81135964:	100691ba 	slli	r3,r2,6
81135968:	00a04574 	movhi	r2,33045
8113596c:	1090c904 	addi	r2,r2,17188
81135970:	1885883a 	add	r2,r3,r2
81135974:	100d883a 	mov	r6,r2
81135978:	e17ffe17 	ldw	r5,-8(fp)
8113597c:	11342880 	call	81134288 <find_file_in_directory>
81135980:	10007b26 	beq	r2,zero,81135b70 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81135984:	e0bfff17 	ldw	r2,-4(fp)
81135988:	10000226 	beq	r2,zero,81135994 <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
8113598c:	00bfffc4 	movi	r2,-1
81135990:	00009b06 	br	81135c00 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81135994:	e13feb0f 	ldh	r4,-84(fp)
81135998:	e0ffeb0f 	ldh	r3,-84(fp)
8113599c:	00a04574 	movhi	r2,33045
811359a0:	1090c904 	addi	r2,r2,17188
811359a4:	180691ba 	slli	r3,r3,6
811359a8:	10c5883a 	add	r2,r2,r3
811359ac:	10800584 	addi	r2,r2,22
811359b0:	1080000b 	ldhu	r2,0(r2)
811359b4:	10ffffcc 	andi	r3,r2,65535
811359b8:	00a04574 	movhi	r2,33045
811359bc:	1090c904 	addi	r2,r2,17188
811359c0:	200891ba 	slli	r4,r4,6
811359c4:	1105883a 	add	r2,r2,r4
811359c8:	10800704 	addi	r2,r2,28
811359cc:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
811359d0:	e0ffeb0f 	ldh	r3,-84(fp)
811359d4:	00a04574 	movhi	r2,33045
811359d8:	1090c904 	addi	r2,r2,17188
811359dc:	180691ba 	slli	r3,r3,6
811359e0:	10c5883a 	add	r2,r2,r3
811359e4:	10800804 	addi	r2,r2,32
811359e8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
811359ec:	e0ffeb0f 	ldh	r3,-84(fp)
811359f0:	00a04574 	movhi	r2,33045
811359f4:	1090c904 	addi	r2,r2,17188
811359f8:	180691ba 	slli	r3,r3,6
811359fc:	10c5883a 	add	r2,r2,r3
81135a00:	10800904 	addi	r2,r2,36
81135a04:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81135a08:	e0ffeb0f 	ldh	r3,-84(fp)
81135a0c:	00a04574 	movhi	r2,33045
81135a10:	1090c904 	addi	r2,r2,17188
81135a14:	180691ba 	slli	r3,r3,6
81135a18:	10c5883a 	add	r2,r2,r3
81135a1c:	10800f04 	addi	r2,r2,60
81135a20:	00c00044 	movi	r3,1
81135a24:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81135a28:	e0ffeb0f 	ldh	r3,-84(fp)
81135a2c:	00a04574 	movhi	r2,33045
81135a30:	1090c904 	addi	r2,r2,17188
81135a34:	180691ba 	slli	r3,r3,6
81135a38:	10c5883a 	add	r2,r2,r3
81135a3c:	10800e04 	addi	r2,r2,56
81135a40:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81135a44:	e03fec15 	stw	zero,-80(fp)
81135a48:	00004506 	br	81135b60 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81135a4c:	e0ffeb0f 	ldh	r3,-84(fp)
81135a50:	e0bfec17 	ldw	r2,-80(fp)
81135a54:	18803f26 	beq	r3,r2,81135b54 <alt_up_sd_card_fopen+0x2c4>
81135a58:	00a04574 	movhi	r2,33045
81135a5c:	1090c904 	addi	r2,r2,17188
81135a60:	e0ffec17 	ldw	r3,-80(fp)
81135a64:	180691ba 	slli	r3,r3,6
81135a68:	10c5883a 	add	r2,r2,r3
81135a6c:	10800f04 	addi	r2,r2,60
81135a70:	10800017 	ldw	r2,0(r2)
81135a74:	10800058 	cmpnei	r2,r2,1
81135a78:	1000361e 	bne	r2,zero,81135b54 <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81135a7c:	e0ffeb0f 	ldh	r3,-84(fp)
81135a80:	00a04574 	movhi	r2,33045
81135a84:	1090c904 	addi	r2,r2,17188
81135a88:	180691ba 	slli	r3,r3,6
81135a8c:	10c5883a 	add	r2,r2,r3
81135a90:	10800a04 	addi	r2,r2,40
81135a94:	10c00017 	ldw	r3,0(r2)
81135a98:	00a04574 	movhi	r2,33045
81135a9c:	1090c904 	addi	r2,r2,17188
81135aa0:	e13fec17 	ldw	r4,-80(fp)
81135aa4:	200891ba 	slli	r4,r4,6
81135aa8:	1105883a 	add	r2,r2,r4
81135aac:	10800a04 	addi	r2,r2,40
81135ab0:	10800017 	ldw	r2,0(r2)
81135ab4:	1880271e 	bne	r3,r2,81135b54 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81135ab8:	e0ffeb0f 	ldh	r3,-84(fp)
81135abc:	00a04574 	movhi	r2,33045
81135ac0:	1090c904 	addi	r2,r2,17188
81135ac4:	180691ba 	slli	r3,r3,6
81135ac8:	10c5883a 	add	r2,r2,r3
81135acc:	10800b04 	addi	r2,r2,44
81135ad0:	10c00017 	ldw	r3,0(r2)
81135ad4:	00a04574 	movhi	r2,33045
81135ad8:	1090c904 	addi	r2,r2,17188
81135adc:	e13fec17 	ldw	r4,-80(fp)
81135ae0:	200891ba 	slli	r4,r4,6
81135ae4:	1105883a 	add	r2,r2,r4
81135ae8:	10800b04 	addi	r2,r2,44
81135aec:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81135af0:	1880181e 	bne	r3,r2,81135b54 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81135af4:	e0ffeb0f 	ldh	r3,-84(fp)
81135af8:	00a04574 	movhi	r2,33045
81135afc:	1090c904 	addi	r2,r2,17188
81135b00:	180691ba 	slli	r3,r3,6
81135b04:	10c5883a 	add	r2,r2,r3
81135b08:	10800c04 	addi	r2,r2,48
81135b0c:	1100000b 	ldhu	r4,0(r2)
81135b10:	00a04574 	movhi	r2,33045
81135b14:	1090c904 	addi	r2,r2,17188
81135b18:	e0ffec17 	ldw	r3,-80(fp)
81135b1c:	180691ba 	slli	r3,r3,6
81135b20:	10c5883a 	add	r2,r2,r3
81135b24:	10800c04 	addi	r2,r2,48
81135b28:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81135b2c:	20ffffcc 	andi	r3,r4,65535
81135b30:	18e0001c 	xori	r3,r3,32768
81135b34:	18e00004 	addi	r3,r3,-32768
81135b38:	10bfffcc 	andi	r2,r2,65535
81135b3c:	10a0001c 	xori	r2,r2,32768
81135b40:	10a00004 	addi	r2,r2,-32768
81135b44:	1880031e 	bne	r3,r2,81135b54 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81135b48:	00bfff84 	movi	r2,-2
81135b4c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81135b50:	00002a06 	br	81135bfc <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81135b54:	e0bfec17 	ldw	r2,-80(fp)
81135b58:	10800044 	addi	r2,r2,1
81135b5c:	e0bfec15 	stw	r2,-80(fp)
81135b60:	e0bfec17 	ldw	r2,-80(fp)
81135b64:	10800510 	cmplti	r2,r2,20
81135b68:	103fb81e 	bne	r2,zero,81135a4c <__reset+0xfb115a4c>
81135b6c:	00002306 	br	81135bfc <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81135b70:	e0bfff17 	ldw	r2,-4(fp)
81135b74:	10001f26 	beq	r2,zero,81135bf4 <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81135b78:	e0bfeb0f 	ldh	r2,-84(fp)
81135b7c:	100691ba 	slli	r3,r2,6
81135b80:	00a04574 	movhi	r2,33045
81135b84:	1090c904 	addi	r2,r2,17188
81135b88:	1885883a 	add	r2,r3,r2
81135b8c:	e0ffee04 	addi	r3,fp,-72
81135b90:	180d883a 	mov	r6,r3
81135b94:	100b883a 	mov	r5,r2
81135b98:	e13ffe17 	ldw	r4,-8(fp)
81135b9c:	1134dd40 	call	81134dd4 <create_file>
81135ba0:	10001126 	beq	r2,zero,81135be8 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81135ba4:	e0ffeb0f 	ldh	r3,-84(fp)
81135ba8:	00a04574 	movhi	r2,33045
81135bac:	1090c904 	addi	r2,r2,17188
81135bb0:	180691ba 	slli	r3,r3,6
81135bb4:	10c5883a 	add	r2,r2,r3
81135bb8:	10800f04 	addi	r2,r2,60
81135bbc:	00c00044 	movi	r3,1
81135bc0:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81135bc4:	e0ffeb0f 	ldh	r3,-84(fp)
81135bc8:	00a04574 	movhi	r2,33045
81135bcc:	1090c904 	addi	r2,r2,17188
81135bd0:	180691ba 	slli	r3,r3,6
81135bd4:	10c5883a 	add	r2,r2,r3
81135bd8:	10800e04 	addi	r2,r2,56
81135bdc:	00c00044 	movi	r3,1
81135be0:	10c00015 	stw	r3,0(r2)
81135be4:	00000506 	br	81135bfc <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81135be8:	00bfffc4 	movi	r2,-1
81135bec:	e0bfeb0d 	sth	r2,-84(fp)
81135bf0:	00000206 	br	81135bfc <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81135bf4:	00bfffc4 	movi	r2,-1
81135bf8:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81135bfc:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81135c00:	e037883a 	mov	sp,fp
81135c04:	dfc00117 	ldw	ra,4(sp)
81135c08:	df000017 	ldw	fp,0(sp)
81135c0c:	dec00204 	addi	sp,sp,8
81135c10:	f800283a 	ret

81135c14 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81135c14:	defffd04 	addi	sp,sp,-12
81135c18:	de00012e 	bgeu	sp,et,81135c20 <alt_up_sd_card_set_attributes+0xc>
81135c1c:	003b68fa 	trap	3
81135c20:	df000215 	stw	fp,8(sp)
81135c24:	df000204 	addi	fp,sp,8
81135c28:	2007883a 	mov	r3,r4
81135c2c:	2805883a 	mov	r2,r5
81135c30:	e0fffe0d 	sth	r3,-8(fp)
81135c34:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135c38:	e0bffe0f 	ldh	r2,-8(fp)
81135c3c:	10001416 	blt	r2,zero,81135c90 <alt_up_sd_card_set_attributes+0x7c>
81135c40:	e0bffe0f 	ldh	r2,-8(fp)
81135c44:	10800508 	cmpgei	r2,r2,20
81135c48:	1000111e 	bne	r2,zero,81135c90 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81135c4c:	e0fffe0f 	ldh	r3,-8(fp)
81135c50:	00a04574 	movhi	r2,33045
81135c54:	1090c904 	addi	r2,r2,17188
81135c58:	180691ba 	slli	r3,r3,6
81135c5c:	10c5883a 	add	r2,r2,r3
81135c60:	10800f04 	addi	r2,r2,60
81135c64:	10800017 	ldw	r2,0(r2)
81135c68:	10000926 	beq	r2,zero,81135c90 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81135c6c:	e0fffe0f 	ldh	r3,-8(fp)
81135c70:	e0bfff0b 	ldhu	r2,-4(fp)
81135c74:	1009883a 	mov	r4,r2
81135c78:	00a04574 	movhi	r2,33045
81135c7c:	1090c904 	addi	r2,r2,17188
81135c80:	180691ba 	slli	r3,r3,6
81135c84:	10c5883a 	add	r2,r2,r3
81135c88:	108002c4 	addi	r2,r2,11
81135c8c:	11000005 	stb	r4,0(r2)
        }
    }
}
81135c90:	0001883a 	nop
81135c94:	e037883a 	mov	sp,fp
81135c98:	df000017 	ldw	fp,0(sp)
81135c9c:	dec00104 	addi	sp,sp,4
81135ca0:	f800283a 	ret

81135ca4 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81135ca4:	defffd04 	addi	sp,sp,-12
81135ca8:	de00012e 	bgeu	sp,et,81135cb0 <alt_up_sd_card_get_attributes+0xc>
81135cac:	003b68fa 	trap	3
81135cb0:	df000215 	stw	fp,8(sp)
81135cb4:	df000204 	addi	fp,sp,8
81135cb8:	2005883a 	mov	r2,r4
81135cbc:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81135cc0:	00bfffc4 	movi	r2,-1
81135cc4:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135cc8:	e0bfff0f 	ldh	r2,-4(fp)
81135ccc:	10001416 	blt	r2,zero,81135d20 <alt_up_sd_card_get_attributes+0x7c>
81135cd0:	e0bfff0f 	ldh	r2,-4(fp)
81135cd4:	10800508 	cmpgei	r2,r2,20
81135cd8:	1000111e 	bne	r2,zero,81135d20 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81135cdc:	e0ffff0f 	ldh	r3,-4(fp)
81135ce0:	00a04574 	movhi	r2,33045
81135ce4:	1090c904 	addi	r2,r2,17188
81135ce8:	180691ba 	slli	r3,r3,6
81135cec:	10c5883a 	add	r2,r2,r3
81135cf0:	10800f04 	addi	r2,r2,60
81135cf4:	10800017 	ldw	r2,0(r2)
81135cf8:	10000926 	beq	r2,zero,81135d20 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81135cfc:	e0ffff0f 	ldh	r3,-4(fp)
81135d00:	00a04574 	movhi	r2,33045
81135d04:	1090c904 	addi	r2,r2,17188
81135d08:	180691ba 	slli	r3,r3,6
81135d0c:	10c5883a 	add	r2,r2,r3
81135d10:	108002c4 	addi	r2,r2,11
81135d14:	10800003 	ldbu	r2,0(r2)
81135d18:	10803fcc 	andi	r2,r2,255
81135d1c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
81135d20:	e0bffe0b 	ldhu	r2,-8(fp)
}
81135d24:	e037883a 	mov	sp,fp
81135d28:	df000017 	ldw	fp,0(sp)
81135d2c:	dec00104 	addi	sp,sp,4
81135d30:	f800283a 	ret

81135d34 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
81135d34:	defffa04 	addi	sp,sp,-24
81135d38:	de00012e 	bgeu	sp,et,81135d40 <alt_up_sd_card_read+0xc>
81135d3c:	003b68fa 	trap	3
81135d40:	dfc00515 	stw	ra,20(sp)
81135d44:	df000415 	stw	fp,16(sp)
81135d48:	df000404 	addi	fp,sp,16
81135d4c:	2005883a 	mov	r2,r4
81135d50:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
81135d54:	00bfffc4 	movi	r2,-1
81135d58:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135d5c:	e0bfff0f 	ldh	r2,-4(fp)
81135d60:	1000ce16 	blt	r2,zero,8113609c <alt_up_sd_card_read+0x368>
81135d64:	e0bfff0f 	ldh	r2,-4(fp)
81135d68:	10800508 	cmpgei	r2,r2,20
81135d6c:	1000cb1e 	bne	r2,zero,8113609c <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81135d70:	e0ffff0f 	ldh	r3,-4(fp)
81135d74:	00a04574 	movhi	r2,33045
81135d78:	1090c904 	addi	r2,r2,17188
81135d7c:	180691ba 	slli	r3,r3,6
81135d80:	10c5883a 	add	r2,r2,r3
81135d84:	10800f04 	addi	r2,r2,60
81135d88:	10800017 	ldw	r2,0(r2)
81135d8c:	1000c326 	beq	r2,zero,8113609c <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81135d90:	e0ffff0f 	ldh	r3,-4(fp)
81135d94:	00a04574 	movhi	r2,33045
81135d98:	1090c904 	addi	r2,r2,17188
81135d9c:	180691ba 	slli	r3,r3,6
81135da0:	10c5883a 	add	r2,r2,r3
81135da4:	10800904 	addi	r2,r2,36
81135da8:	10c00017 	ldw	r3,0(r2)
81135dac:	e13fff0f 	ldh	r4,-4(fp)
81135db0:	00a04574 	movhi	r2,33045
81135db4:	1090c904 	addi	r2,r2,17188
81135db8:	200891ba 	slli	r4,r4,6
81135dbc:	1105883a 	add	r2,r2,r4
81135dc0:	10800604 	addi	r2,r2,24
81135dc4:	10800017 	ldw	r2,0(r2)
81135dc8:	1880b42e 	bgeu	r3,r2,8113609c <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135dcc:	00a04574 	movhi	r2,33045
81135dd0:	1090b404 	addi	r2,r2,17104
81135dd4:	10c01417 	ldw	r3,80(r2)
81135dd8:	e13fff0f 	ldh	r4,-4(fp)
81135ddc:	00a04574 	movhi	r2,33045
81135de0:	1090c904 	addi	r2,r2,17188
81135de4:	200891ba 	slli	r4,r4,6
81135de8:	1105883a 	add	r2,r2,r4
81135dec:	10800704 	addi	r2,r2,28
81135df0:	10800017 	ldw	r2,0(r2)
81135df4:	113fff84 	addi	r4,r2,-2
81135df8:	00a04574 	movhi	r2,33045
81135dfc:	1090b404 	addi	r2,r2,17104
81135e00:	10800383 	ldbu	r2,14(r2)
81135e04:	10803fcc 	andi	r2,r2,255
81135e08:	2085383a 	mul	r2,r4,r2
81135e0c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81135e10:	e13fff0f 	ldh	r4,-4(fp)
81135e14:	00a04574 	movhi	r2,33045
81135e18:	1090c904 	addi	r2,r2,17188
81135e1c:	200891ba 	slli	r4,r4,6
81135e20:	1105883a 	add	r2,r2,r4
81135e24:	10800804 	addi	r2,r2,32
81135e28:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135e2c:	1885883a 	add	r2,r3,r2
81135e30:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81135e34:	e0ffff0f 	ldh	r3,-4(fp)
81135e38:	00a04574 	movhi	r2,33045
81135e3c:	1090c904 	addi	r2,r2,17188
81135e40:	180691ba 	slli	r3,r3,6
81135e44:	10c5883a 	add	r2,r2,r3
81135e48:	10800904 	addi	r2,r2,36
81135e4c:	10800017 	ldw	r2,0(r2)
81135e50:	10006826 	beq	r2,zero,81135ff4 <alt_up_sd_card_read+0x2c0>
81135e54:	e0ffff0f 	ldh	r3,-4(fp)
81135e58:	00a04574 	movhi	r2,33045
81135e5c:	1090c904 	addi	r2,r2,17188
81135e60:	180691ba 	slli	r3,r3,6
81135e64:	10c5883a 	add	r2,r2,r3
81135e68:	10800904 	addi	r2,r2,36
81135e6c:	10800017 	ldw	r2,0(r2)
81135e70:	10807fcc 	andi	r2,r2,511
81135e74:	10005f1e 	bne	r2,zero,81135ff4 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81135e78:	e0ffff0f 	ldh	r3,-4(fp)
81135e7c:	00a04574 	movhi	r2,33045
81135e80:	1090c904 	addi	r2,r2,17188
81135e84:	180691ba 	slli	r3,r3,6
81135e88:	10c5883a 	add	r2,r2,r3
81135e8c:	10800804 	addi	r2,r2,32
81135e90:	10c00017 	ldw	r3,0(r2)
81135e94:	00a04574 	movhi	r2,33045
81135e98:	1090b404 	addi	r2,r2,17104
81135e9c:	10800383 	ldbu	r2,14(r2)
81135ea0:	10803fcc 	andi	r2,r2,255
81135ea4:	10bfffc4 	addi	r2,r2,-1
81135ea8:	1880401e 	bne	r3,r2,81135fac <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81135eac:	e0ffff0f 	ldh	r3,-4(fp)
81135eb0:	00a04574 	movhi	r2,33045
81135eb4:	1090c904 	addi	r2,r2,17188
81135eb8:	180691ba 	slli	r3,r3,6
81135ebc:	10c5883a 	add	r2,r2,r3
81135ec0:	10800704 	addi	r2,r2,28
81135ec4:	10800017 	ldw	r2,0(r2)
81135ec8:	e0fffe04 	addi	r3,fp,-8
81135ecc:	180b883a 	mov	r5,r3
81135ed0:	1009883a 	mov	r4,r2
81135ed4:	11326c00 	call	811326c0 <get_cluster_flag>
81135ed8:	10003226 	beq	r2,zero,81135fa4 <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81135edc:	e0bffe0b 	ldhu	r2,-8(fp)
81135ee0:	10bfffcc 	andi	r2,r2,65535
81135ee4:	10fffe0c 	andi	r3,r2,65528
81135ee8:	00bffe14 	movui	r2,65528
81135eec:	1880021e 	bne	r3,r2,81135ef8 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81135ef0:	00bfffc4 	movi	r2,-1
81135ef4:	00006a06 	br	811360a0 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81135ef8:	e13fff0f 	ldh	r4,-4(fp)
81135efc:	e0bffe0b 	ldhu	r2,-8(fp)
81135f00:	10ffffcc 	andi	r3,r2,65535
81135f04:	00a04574 	movhi	r2,33045
81135f08:	1090c904 	addi	r2,r2,17188
81135f0c:	200891ba 	slli	r4,r4,6
81135f10:	1105883a 	add	r2,r2,r4
81135f14:	10800704 	addi	r2,r2,28
81135f18:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81135f1c:	e0ffff0f 	ldh	r3,-4(fp)
81135f20:	00a04574 	movhi	r2,33045
81135f24:	1090c904 	addi	r2,r2,17188
81135f28:	180691ba 	slli	r3,r3,6
81135f2c:	10c5883a 	add	r2,r2,r3
81135f30:	10800804 	addi	r2,r2,32
81135f34:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135f38:	00a04574 	movhi	r2,33045
81135f3c:	1090b404 	addi	r2,r2,17104
81135f40:	10c01417 	ldw	r3,80(r2)
81135f44:	e13fff0f 	ldh	r4,-4(fp)
81135f48:	00a04574 	movhi	r2,33045
81135f4c:	1090c904 	addi	r2,r2,17188
81135f50:	200891ba 	slli	r4,r4,6
81135f54:	1105883a 	add	r2,r2,r4
81135f58:	10800704 	addi	r2,r2,28
81135f5c:	10800017 	ldw	r2,0(r2)
81135f60:	113fff84 	addi	r4,r2,-2
81135f64:	00a04574 	movhi	r2,33045
81135f68:	1090b404 	addi	r2,r2,17104
81135f6c:	10800383 	ldbu	r2,14(r2)
81135f70:	10803fcc 	andi	r2,r2,255
81135f74:	2085383a 	mul	r2,r4,r2
81135f78:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81135f7c:	e13fff0f 	ldh	r4,-4(fp)
81135f80:	00a04574 	movhi	r2,33045
81135f84:	1090c904 	addi	r2,r2,17188
81135f88:	200891ba 	slli	r4,r4,6
81135f8c:	1105883a 	add	r2,r2,r4
81135f90:	10800804 	addi	r2,r2,32
81135f94:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135f98:	1885883a 	add	r2,r3,r2
81135f9c:	e0bffd15 	stw	r2,-12(fp)
81135fa0:	00001406 	br	81135ff4 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
81135fa4:	00bfff84 	movi	r2,-2
81135fa8:	00003d06 	br	811360a0 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81135fac:	e13fff0f 	ldh	r4,-4(fp)
81135fb0:	e0ffff0f 	ldh	r3,-4(fp)
81135fb4:	00a04574 	movhi	r2,33045
81135fb8:	1090c904 	addi	r2,r2,17188
81135fbc:	180691ba 	slli	r3,r3,6
81135fc0:	10c5883a 	add	r2,r2,r3
81135fc4:	10800804 	addi	r2,r2,32
81135fc8:	10800017 	ldw	r2,0(r2)
81135fcc:	10c00044 	addi	r3,r2,1
81135fd0:	00a04574 	movhi	r2,33045
81135fd4:	1090c904 	addi	r2,r2,17188
81135fd8:	200891ba 	slli	r4,r4,6
81135fdc:	1105883a 	add	r2,r2,r4
81135fe0:	10800804 	addi	r2,r2,32
81135fe4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81135fe8:	e0bffd17 	ldw	r2,-12(fp)
81135fec:	10800044 	addi	r2,r2,1
81135ff0:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81135ff4:	d0e09417 	ldw	r3,-32176(gp)
81135ff8:	e0bffd17 	ldw	r2,-12(fp)
81135ffc:	1885883a 	add	r2,r3,r2
81136000:	1007883a 	mov	r3,r2
81136004:	d0a09817 	ldw	r2,-32160(gp)
81136008:	18800726 	beq	r3,r2,81136028 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8113600c:	d0a09417 	ldw	r2,-32176(gp)
81136010:	100b883a 	mov	r5,r2
81136014:	e13ffd17 	ldw	r4,-12(fp)
81136018:	11325e00 	call	811325e0 <Read_Sector_Data>
8113601c:	1000021e 	bne	r2,zero,81136028 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
81136020:	00bfff84 	movi	r2,-2
81136024:	00001e06 	br	811360a0 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81136028:	d0e09317 	ldw	r3,-32180(gp)
8113602c:	e13fff0f 	ldh	r4,-4(fp)
81136030:	00a04574 	movhi	r2,33045
81136034:	1090c904 	addi	r2,r2,17188
81136038:	200891ba 	slli	r4,r4,6
8113603c:	1105883a 	add	r2,r2,r4
81136040:	10800904 	addi	r2,r2,36
81136044:	10800017 	ldw	r2,0(r2)
81136048:	10807fcc 	andi	r2,r2,511
8113604c:	1885883a 	add	r2,r3,r2
81136050:	10800023 	ldbuio	r2,0(r2)
81136054:	10803fcc 	andi	r2,r2,255
81136058:	10803fcc 	andi	r2,r2,255
8113605c:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81136060:	e13fff0f 	ldh	r4,-4(fp)
81136064:	e0ffff0f 	ldh	r3,-4(fp)
81136068:	00a04574 	movhi	r2,33045
8113606c:	1090c904 	addi	r2,r2,17188
81136070:	180691ba 	slli	r3,r3,6
81136074:	10c5883a 	add	r2,r2,r3
81136078:	10800904 	addi	r2,r2,36
8113607c:	10800017 	ldw	r2,0(r2)
81136080:	10c00044 	addi	r3,r2,1
81136084:	00a04574 	movhi	r2,33045
81136088:	1090c904 	addi	r2,r2,17188
8113608c:	200891ba 	slli	r4,r4,6
81136090:	1105883a 	add	r2,r2,r4
81136094:	10800904 	addi	r2,r2,36
81136098:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
8113609c:	e0bffc0b 	ldhu	r2,-16(fp)
}
811360a0:	e037883a 	mov	sp,fp
811360a4:	dfc00117 	ldw	ra,4(sp)
811360a8:	df000017 	ldw	fp,0(sp)
811360ac:	dec00204 	addi	sp,sp,8
811360b0:	f800283a 	ret

811360b4 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
811360b4:	defff804 	addi	sp,sp,-32
811360b8:	de00012e 	bgeu	sp,et,811360c0 <alt_up_sd_card_write+0xc>
811360bc:	003b68fa 	trap	3
811360c0:	dfc00715 	stw	ra,28(sp)
811360c4:	df000615 	stw	fp,24(sp)
811360c8:	df000604 	addi	fp,sp,24
811360cc:	2007883a 	mov	r3,r4
811360d0:	2805883a 	mov	r2,r5
811360d4:	e0fffe0d 	sth	r3,-8(fp)
811360d8:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
811360dc:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811360e0:	e0bffe0f 	ldh	r2,-8(fp)
811360e4:	10017716 	blt	r2,zero,811366c4 <alt_up_sd_card_write+0x610>
811360e8:	e0bffe0f 	ldh	r2,-8(fp)
811360ec:	10800508 	cmpgei	r2,r2,20
811360f0:	1001741e 	bne	r2,zero,811366c4 <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
811360f4:	e0fffe0f 	ldh	r3,-8(fp)
811360f8:	00a04574 	movhi	r2,33045
811360fc:	1090c904 	addi	r2,r2,17188
81136100:	180691ba 	slli	r3,r3,6
81136104:	10c5883a 	add	r2,r2,r3
81136108:	10800f04 	addi	r2,r2,60
8113610c:	10800017 	ldw	r2,0(r2)
81136110:	10016c26 	beq	r2,zero,811366c4 <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136114:	00a04574 	movhi	r2,33045
81136118:	1090b404 	addi	r2,r2,17104
8113611c:	10c01417 	ldw	r3,80(r2)
81136120:	e13ffe0f 	ldh	r4,-8(fp)
81136124:	00a04574 	movhi	r2,33045
81136128:	1090c904 	addi	r2,r2,17188
8113612c:	200891ba 	slli	r4,r4,6
81136130:	1105883a 	add	r2,r2,r4
81136134:	10800704 	addi	r2,r2,28
81136138:	10800017 	ldw	r2,0(r2)
8113613c:	113fff84 	addi	r4,r2,-2
81136140:	00a04574 	movhi	r2,33045
81136144:	1090b404 	addi	r2,r2,17104
81136148:	10800383 	ldbu	r2,14(r2)
8113614c:	10803fcc 	andi	r2,r2,255
81136150:	2085383a 	mul	r2,r4,r2
81136154:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81136158:	e13ffe0f 	ldh	r4,-8(fp)
8113615c:	00a04574 	movhi	r2,33045
81136160:	1090c904 	addi	r2,r2,17188
81136164:	200891ba 	slli	r4,r4,6
81136168:	1105883a 	add	r2,r2,r4
8113616c:	10800804 	addi	r2,r2,32
81136170:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136174:	1885883a 	add	r2,r3,r2
81136178:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
8113617c:	e0fffe0f 	ldh	r3,-8(fp)
81136180:	00a04574 	movhi	r2,33045
81136184:	1090c904 	addi	r2,r2,17188
81136188:	180691ba 	slli	r3,r3,6
8113618c:	10c5883a 	add	r2,r2,r3
81136190:	10800904 	addi	r2,r2,36
81136194:	10c00017 	ldw	r3,0(r2)
81136198:	00a04574 	movhi	r2,33045
8113619c:	1090b404 	addi	r2,r2,17104
811361a0:	1080030b 	ldhu	r2,12(r2)
811361a4:	10bfffcc 	andi	r2,r2,65535
811361a8:	1889203a 	divu	r4,r3,r2
811361ac:	2085383a 	mul	r2,r4,r2
811361b0:	1885c83a 	sub	r2,r3,r2
811361b4:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811361b8:	e0fffe0f 	ldh	r3,-8(fp)
811361bc:	00a04574 	movhi	r2,33045
811361c0:	1090c904 	addi	r2,r2,17188
811361c4:	180691ba 	slli	r3,r3,6
811361c8:	10c5883a 	add	r2,r2,r3
811361cc:	10800904 	addi	r2,r2,36
811361d0:	10c00017 	ldw	r3,0(r2)
811361d4:	e13ffe0f 	ldh	r4,-8(fp)
811361d8:	00a04574 	movhi	r2,33045
811361dc:	1090c904 	addi	r2,r2,17188
811361e0:	200891ba 	slli	r4,r4,6
811361e4:	1105883a 	add	r2,r2,r4
811361e8:	10800604 	addi	r2,r2,24
811361ec:	10800017 	ldw	r2,0(r2)
811361f0:	1880672e 	bgeu	r3,r2,81136390 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
811361f4:	e0fffe0f 	ldh	r3,-8(fp)
811361f8:	00a04574 	movhi	r2,33045
811361fc:	1090c904 	addi	r2,r2,17188
81136200:	180691ba 	slli	r3,r3,6
81136204:	10c5883a 	add	r2,r2,r3
81136208:	10800904 	addi	r2,r2,36
8113620c:	10800017 	ldw	r2,0(r2)
81136210:	1000e126 	beq	r2,zero,81136598 <alt_up_sd_card_write+0x4e4>
81136214:	e0bffc0f 	ldh	r2,-16(fp)
81136218:	1000df1e 	bne	r2,zero,81136598 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8113621c:	e0fffe0f 	ldh	r3,-8(fp)
81136220:	00a04574 	movhi	r2,33045
81136224:	1090c904 	addi	r2,r2,17188
81136228:	180691ba 	slli	r3,r3,6
8113622c:	10c5883a 	add	r2,r2,r3
81136230:	10800804 	addi	r2,r2,32
81136234:	10c00017 	ldw	r3,0(r2)
81136238:	00a04574 	movhi	r2,33045
8113623c:	1090b404 	addi	r2,r2,17104
81136240:	10800383 	ldbu	r2,14(r2)
81136244:	10803fcc 	andi	r2,r2,255
81136248:	10bfffc4 	addi	r2,r2,-1
8113624c:	18803d1e 	bne	r3,r2,81136344 <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81136250:	e0fffe0f 	ldh	r3,-8(fp)
81136254:	00a04574 	movhi	r2,33045
81136258:	1090c904 	addi	r2,r2,17188
8113625c:	180691ba 	slli	r3,r3,6
81136260:	10c5883a 	add	r2,r2,r3
81136264:	10800704 	addi	r2,r2,28
81136268:	10800017 	ldw	r2,0(r2)
8113626c:	e0fffc84 	addi	r3,fp,-14
81136270:	180b883a 	mov	r5,r3
81136274:	1009883a 	mov	r4,r2
81136278:	11326c00 	call	811326c0 <get_cluster_flag>
8113627c:	10002f26 	beq	r2,zero,8113633c <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81136280:	e0bffc8b 	ldhu	r2,-14(fp)
81136284:	10bfffcc 	andi	r2,r2,65535
81136288:	10bffe28 	cmpgeui	r2,r2,65528
8113628c:	1000c21e 	bne	r2,zero,81136598 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81136290:	e13ffe0f 	ldh	r4,-8(fp)
81136294:	e0bffc8b 	ldhu	r2,-14(fp)
81136298:	10ffffcc 	andi	r3,r2,65535
8113629c:	00a04574 	movhi	r2,33045
811362a0:	1090c904 	addi	r2,r2,17188
811362a4:	200891ba 	slli	r4,r4,6
811362a8:	1105883a 	add	r2,r2,r4
811362ac:	10800704 	addi	r2,r2,28
811362b0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811362b4:	e0fffe0f 	ldh	r3,-8(fp)
811362b8:	00a04574 	movhi	r2,33045
811362bc:	1090c904 	addi	r2,r2,17188
811362c0:	180691ba 	slli	r3,r3,6
811362c4:	10c5883a 	add	r2,r2,r3
811362c8:	10800804 	addi	r2,r2,32
811362cc:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811362d0:	00a04574 	movhi	r2,33045
811362d4:	1090b404 	addi	r2,r2,17104
811362d8:	10c01417 	ldw	r3,80(r2)
811362dc:	e13ffe0f 	ldh	r4,-8(fp)
811362e0:	00a04574 	movhi	r2,33045
811362e4:	1090c904 	addi	r2,r2,17188
811362e8:	200891ba 	slli	r4,r4,6
811362ec:	1105883a 	add	r2,r2,r4
811362f0:	10800704 	addi	r2,r2,28
811362f4:	10800017 	ldw	r2,0(r2)
811362f8:	113fff84 	addi	r4,r2,-2
811362fc:	00a04574 	movhi	r2,33045
81136300:	1090b404 	addi	r2,r2,17104
81136304:	10800383 	ldbu	r2,14(r2)
81136308:	10803fcc 	andi	r2,r2,255
8113630c:	2085383a 	mul	r2,r4,r2
81136310:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81136314:	e13ffe0f 	ldh	r4,-8(fp)
81136318:	00a04574 	movhi	r2,33045
8113631c:	1090c904 	addi	r2,r2,17188
81136320:	200891ba 	slli	r4,r4,6
81136324:	1105883a 	add	r2,r2,r4
81136328:	10800804 	addi	r2,r2,32
8113632c:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136330:	1885883a 	add	r2,r3,r2
81136334:	e0bffb15 	stw	r2,-20(fp)
81136338:	00009706 	br	81136598 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
8113633c:	0005883a 	mov	r2,zero
81136340:	0000e106 	br	811366c8 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81136344:	e13ffe0f 	ldh	r4,-8(fp)
81136348:	e0fffe0f 	ldh	r3,-8(fp)
8113634c:	00a04574 	movhi	r2,33045
81136350:	1090c904 	addi	r2,r2,17188
81136354:	180691ba 	slli	r3,r3,6
81136358:	10c5883a 	add	r2,r2,r3
8113635c:	10800804 	addi	r2,r2,32
81136360:	10800017 	ldw	r2,0(r2)
81136364:	10c00044 	addi	r3,r2,1
81136368:	00a04574 	movhi	r2,33045
8113636c:	1090c904 	addi	r2,r2,17188
81136370:	200891ba 	slli	r4,r4,6
81136374:	1105883a 	add	r2,r2,r4
81136378:	10800804 	addi	r2,r2,32
8113637c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81136380:	e0bffb17 	ldw	r2,-20(fp)
81136384:	10800044 	addi	r2,r2,1
81136388:	e0bffb15 	stw	r2,-20(fp)
8113638c:	00008206 	br	81136598 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81136390:	e0fffe0f 	ldh	r3,-8(fp)
81136394:	00a04574 	movhi	r2,33045
81136398:	1090c904 	addi	r2,r2,17188
8113639c:	180691ba 	slli	r3,r3,6
811363a0:	10c5883a 	add	r2,r2,r3
811363a4:	10800904 	addi	r2,r2,36
811363a8:	10800017 	ldw	r2,0(r2)
811363ac:	10007a26 	beq	r2,zero,81136598 <alt_up_sd_card_write+0x4e4>
811363b0:	e0bffc0f 	ldh	r2,-16(fp)
811363b4:	1000781e 	bne	r2,zero,81136598 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811363b8:	e0fffe0f 	ldh	r3,-8(fp)
811363bc:	00a04574 	movhi	r2,33045
811363c0:	1090c904 	addi	r2,r2,17188
811363c4:	180691ba 	slli	r3,r3,6
811363c8:	10c5883a 	add	r2,r2,r3
811363cc:	10800804 	addi	r2,r2,32
811363d0:	10c00017 	ldw	r3,0(r2)
811363d4:	00a04574 	movhi	r2,33045
811363d8:	1090b404 	addi	r2,r2,17104
811363dc:	10800383 	ldbu	r2,14(r2)
811363e0:	10803fcc 	andi	r2,r2,255
811363e4:	10bfffc4 	addi	r2,r2,-1
811363e8:	18803e1e 	bne	r3,r2,811364e4 <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
811363ec:	e0bffd04 	addi	r2,fp,-12
811363f0:	1009883a 	mov	r4,r2
811363f4:	11347040 	call	81134704 <find_first_empty_cluster>
811363f8:	10003826 	beq	r2,zero,811364dc <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
811363fc:	e0fffe0f 	ldh	r3,-8(fp)
81136400:	00a04574 	movhi	r2,33045
81136404:	1090c904 	addi	r2,r2,17188
81136408:	180691ba 	slli	r3,r3,6
8113640c:	10c5883a 	add	r2,r2,r3
81136410:	10800704 	addi	r2,r2,28
81136414:	10800017 	ldw	r2,0(r2)
81136418:	e0fffd17 	ldw	r3,-12(fp)
8113641c:	18ffffcc 	andi	r3,r3,65535
81136420:	18e0001c 	xori	r3,r3,32768
81136424:	18e00004 	addi	r3,r3,-32768
81136428:	01800044 	movi	r6,1
8113642c:	180b883a 	mov	r5,r3
81136430:	1009883a 	mov	r4,r2
81136434:	113277c0 	call	8113277c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81136438:	e0bffd17 	ldw	r2,-12(fp)
8113643c:	01800044 	movi	r6,1
81136440:	017fffc4 	movi	r5,-1
81136444:	1009883a 	mov	r4,r2
81136448:	113277c0 	call	8113277c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
8113644c:	e0fffe0f 	ldh	r3,-8(fp)
81136450:	00a04574 	movhi	r2,33045
81136454:	1090c904 	addi	r2,r2,17188
81136458:	180691ba 	slli	r3,r3,6
8113645c:	10c5883a 	add	r2,r2,r3
81136460:	10800704 	addi	r2,r2,28
81136464:	10800017 	ldw	r2,0(r2)
81136468:	e0fffd17 	ldw	r3,-12(fp)
8113646c:	18ffffcc 	andi	r3,r3,65535
81136470:	18e0001c 	xori	r3,r3,32768
81136474:	18e00004 	addi	r3,r3,-32768
81136478:	000d883a 	mov	r6,zero
8113647c:	180b883a 	mov	r5,r3
81136480:	1009883a 	mov	r4,r2
81136484:	113277c0 	call	8113277c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81136488:	e0bffd17 	ldw	r2,-12(fp)
8113648c:	000d883a 	mov	r6,zero
81136490:	017fffc4 	movi	r5,-1
81136494:	1009883a 	mov	r4,r2
81136498:	113277c0 	call	8113277c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
8113649c:	e13ffe0f 	ldh	r4,-8(fp)
811364a0:	e0fffd17 	ldw	r3,-12(fp)
811364a4:	00a04574 	movhi	r2,33045
811364a8:	1090c904 	addi	r2,r2,17188
811364ac:	200891ba 	slli	r4,r4,6
811364b0:	1105883a 	add	r2,r2,r4
811364b4:	10800704 	addi	r2,r2,28
811364b8:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
811364bc:	e0fffe0f 	ldh	r3,-8(fp)
811364c0:	00a04574 	movhi	r2,33045
811364c4:	1090c904 	addi	r2,r2,17188
811364c8:	180691ba 	slli	r3,r3,6
811364cc:	10c5883a 	add	r2,r2,r3
811364d0:	10800804 	addi	r2,r2,32
811364d4:	10000015 	stw	zero,0(r2)
811364d8:	00001506 	br	81136530 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
811364dc:	0005883a 	mov	r2,zero
811364e0:	00007906 	br	811366c8 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
811364e4:	e13ffe0f 	ldh	r4,-8(fp)
811364e8:	e0fffe0f 	ldh	r3,-8(fp)
811364ec:	00a04574 	movhi	r2,33045
811364f0:	1090c904 	addi	r2,r2,17188
811364f4:	180691ba 	slli	r3,r3,6
811364f8:	10c5883a 	add	r2,r2,r3
811364fc:	10800904 	addi	r2,r2,36
81136500:	10c00017 	ldw	r3,0(r2)
81136504:	00a04574 	movhi	r2,33045
81136508:	1090b404 	addi	r2,r2,17104
8113650c:	1080030b 	ldhu	r2,12(r2)
81136510:	10bfffcc 	andi	r2,r2,65535
81136514:	1887203a 	divu	r3,r3,r2
81136518:	00a04574 	movhi	r2,33045
8113651c:	1090c904 	addi	r2,r2,17188
81136520:	200891ba 	slli	r4,r4,6
81136524:	1105883a 	add	r2,r2,r4
81136528:	10800804 	addi	r2,r2,32
8113652c:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136530:	00a04574 	movhi	r2,33045
81136534:	1090b404 	addi	r2,r2,17104
81136538:	10c01417 	ldw	r3,80(r2)
8113653c:	e13ffe0f 	ldh	r4,-8(fp)
81136540:	00a04574 	movhi	r2,33045
81136544:	1090c904 	addi	r2,r2,17188
81136548:	200891ba 	slli	r4,r4,6
8113654c:	1105883a 	add	r2,r2,r4
81136550:	10800704 	addi	r2,r2,28
81136554:	10800017 	ldw	r2,0(r2)
81136558:	113fff84 	addi	r4,r2,-2
8113655c:	00a04574 	movhi	r2,33045
81136560:	1090b404 	addi	r2,r2,17104
81136564:	10800383 	ldbu	r2,14(r2)
81136568:	10803fcc 	andi	r2,r2,255
8113656c:	2085383a 	mul	r2,r4,r2
81136570:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
81136574:	e13ffe0f 	ldh	r4,-8(fp)
81136578:	00a04574 	movhi	r2,33045
8113657c:	1090c904 	addi	r2,r2,17188
81136580:	200891ba 	slli	r4,r4,6
81136584:	1105883a 	add	r2,r2,r4
81136588:	10800804 	addi	r2,r2,32
8113658c:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136590:	1885883a 	add	r2,r3,r2
81136594:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
81136598:	d0e09417 	ldw	r3,-32176(gp)
8113659c:	e0bffb17 	ldw	r2,-20(fp)
811365a0:	1885883a 	add	r2,r3,r2
811365a4:	1007883a 	mov	r3,r2
811365a8:	d0a09817 	ldw	r2,-32160(gp)
811365ac:	18800726 	beq	r3,r2,811365cc <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811365b0:	d0a09417 	ldw	r2,-32176(gp)
811365b4:	100b883a 	mov	r5,r2
811365b8:	e13ffb17 	ldw	r4,-20(fp)
811365bc:	11325e00 	call	811325e0 <Read_Sector_Data>
811365c0:	1000021e 	bne	r2,zero,811365cc <alt_up_sd_card_write+0x518>
                {
					return false;
811365c4:	0005883a 	mov	r2,zero
811365c8:	00003f06 	br	811366c8 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
811365cc:	d0e09317 	ldw	r3,-32180(gp)
811365d0:	e0bffc0f 	ldh	r2,-16(fp)
811365d4:	1885883a 	add	r2,r3,r2
811365d8:	e0ffff07 	ldb	r3,-4(fp)
811365dc:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
811365e0:	e13ffe0f 	ldh	r4,-8(fp)
811365e4:	e0fffe0f 	ldh	r3,-8(fp)
811365e8:	00a04574 	movhi	r2,33045
811365ec:	1090c904 	addi	r2,r2,17188
811365f0:	180691ba 	slli	r3,r3,6
811365f4:	10c5883a 	add	r2,r2,r3
811365f8:	10800904 	addi	r2,r2,36
811365fc:	10800017 	ldw	r2,0(r2)
81136600:	10c00044 	addi	r3,r2,1
81136604:	00a04574 	movhi	r2,33045
81136608:	1090c904 	addi	r2,r2,17188
8113660c:	200891ba 	slli	r4,r4,6
81136610:	1105883a 	add	r2,r2,r4
81136614:	10800904 	addi	r2,r2,36
81136618:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
8113661c:	e0fffe0f 	ldh	r3,-8(fp)
81136620:	00a04574 	movhi	r2,33045
81136624:	1090c904 	addi	r2,r2,17188
81136628:	180691ba 	slli	r3,r3,6
8113662c:	10c5883a 	add	r2,r2,r3
81136630:	10800904 	addi	r2,r2,36
81136634:	10c00017 	ldw	r3,0(r2)
81136638:	e13ffe0f 	ldh	r4,-8(fp)
8113663c:	00a04574 	movhi	r2,33045
81136640:	1090c904 	addi	r2,r2,17188
81136644:	200891ba 	slli	r4,r4,6
81136648:	1105883a 	add	r2,r2,r4
8113664c:	10800604 	addi	r2,r2,24
81136650:	10800017 	ldw	r2,0(r2)
81136654:	18801736 	bltu	r3,r2,811366b4 <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81136658:	e13ffe0f 	ldh	r4,-8(fp)
8113665c:	e0fffe0f 	ldh	r3,-8(fp)
81136660:	00a04574 	movhi	r2,33045
81136664:	1090c904 	addi	r2,r2,17188
81136668:	180691ba 	slli	r3,r3,6
8113666c:	10c5883a 	add	r2,r2,r3
81136670:	10800604 	addi	r2,r2,24
81136674:	10800017 	ldw	r2,0(r2)
81136678:	10c00044 	addi	r3,r2,1
8113667c:	00a04574 	movhi	r2,33045
81136680:	1090c904 	addi	r2,r2,17188
81136684:	200891ba 	slli	r4,r4,6
81136688:	1105883a 	add	r2,r2,r4
8113668c:	10800604 	addi	r2,r2,24
81136690:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
81136694:	e0fffe0f 	ldh	r3,-8(fp)
81136698:	00a04574 	movhi	r2,33045
8113669c:	1090c904 	addi	r2,r2,17188
811366a0:	180691ba 	slli	r3,r3,6
811366a4:	10c5883a 	add	r2,r2,r3
811366a8:	10800e04 	addi	r2,r2,56
811366ac:	00c00044 	movi	r3,1
811366b0:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811366b4:	00800044 	movi	r2,1
811366b8:	d0a09715 	stw	r2,-32164(gp)
			result = true;
811366bc:	00800044 	movi	r2,1
811366c0:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
811366c4:	e0bffa17 	ldw	r2,-24(fp)
}
811366c8:	e037883a 	mov	sp,fp
811366cc:	dfc00117 	ldw	ra,4(sp)
811366d0:	df000017 	ldw	fp,0(sp)
811366d4:	dec00204 	addi	sp,sp,8
811366d8:	f800283a 	ret

811366dc <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
811366dc:	defffb04 	addi	sp,sp,-20
811366e0:	de00012e 	bgeu	sp,et,811366e8 <alt_up_sd_card_fclose+0xc>
811366e4:	003b68fa 	trap	3
811366e8:	dfc00415 	stw	ra,16(sp)
811366ec:	df000315 	stw	fp,12(sp)
811366f0:	df000304 	addi	fp,sp,12
811366f4:	2005883a 	mov	r2,r4
811366f8:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
811366fc:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81136700:	11352b80 	call	811352b8 <alt_up_sd_card_is_Present>
81136704:	10006026 	beq	r2,zero,81136888 <alt_up_sd_card_fclose+0x1ac>
81136708:	d0a08d17 	ldw	r2,-32204(gp)
8113670c:	10005e26 	beq	r2,zero,81136888 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81136710:	e0ffff0f 	ldh	r3,-4(fp)
81136714:	00a04574 	movhi	r2,33045
81136718:	1090c904 	addi	r2,r2,17188
8113671c:	180691ba 	slli	r3,r3,6
81136720:	10c5883a 	add	r2,r2,r3
81136724:	10800f04 	addi	r2,r2,60
81136728:	10800017 	ldw	r2,0(r2)
8113672c:	10005626 	beq	r2,zero,81136888 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81136730:	e0ffff0f 	ldh	r3,-4(fp)
81136734:	00a04574 	movhi	r2,33045
81136738:	1090c904 	addi	r2,r2,17188
8113673c:	180691ba 	slli	r3,r3,6
81136740:	10c5883a 	add	r2,r2,r3
81136744:	10800e04 	addi	r2,r2,56
81136748:	10800017 	ldw	r2,0(r2)
8113674c:	10004526 	beq	r2,zero,81136864 <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81136750:	e0ffff0f 	ldh	r3,-4(fp)
81136754:	00a04574 	movhi	r2,33045
81136758:	1090c904 	addi	r2,r2,17188
8113675c:	180691ba 	slli	r3,r3,6
81136760:	10c5883a 	add	r2,r2,r3
81136764:	10800b04 	addi	r2,r2,44
81136768:	10800017 	ldw	r2,0(r2)
8113676c:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81136770:	e0ffff0f 	ldh	r3,-4(fp)
81136774:	00a04574 	movhi	r2,33045
81136778:	1090c904 	addi	r2,r2,17188
8113677c:	180691ba 	slli	r3,r3,6
81136780:	10c5883a 	add	r2,r2,r3
81136784:	10800a04 	addi	r2,r2,40
81136788:	10800017 	ldw	r2,0(r2)
8113678c:	1000071e 	bne	r2,zero,811367ac <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81136790:	00a04574 	movhi	r2,33045
81136794:	1090b404 	addi	r2,r2,17104
81136798:	10801317 	ldw	r2,76(r2)
8113679c:	e0fffe17 	ldw	r3,-8(fp)
811367a0:	1885883a 	add	r2,r3,r2
811367a4:	e0bffe15 	stw	r2,-8(fp)
811367a8:	00001406 	br	811367fc <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811367ac:	00a04574 	movhi	r2,33045
811367b0:	1090b404 	addi	r2,r2,17104
811367b4:	10c01417 	ldw	r3,80(r2)
811367b8:	e0bffe17 	ldw	r2,-8(fp)
811367bc:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
811367c0:	e13fff0f 	ldh	r4,-4(fp)
811367c4:	00a04574 	movhi	r2,33045
811367c8:	1090c904 	addi	r2,r2,17188
811367cc:	200891ba 	slli	r4,r4,6
811367d0:	1105883a 	add	r2,r2,r4
811367d4:	10800a04 	addi	r2,r2,40
811367d8:	10800017 	ldw	r2,0(r2)
811367dc:	113fff84 	addi	r4,r2,-2
811367e0:	00a04574 	movhi	r2,33045
811367e4:	1090b404 	addi	r2,r2,17104
811367e8:	10800383 	ldbu	r2,14(r2)
811367ec:	10803fcc 	andi	r2,r2,255
811367f0:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811367f4:	1885883a 	add	r2,r3,r2
811367f8:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
811367fc:	e0bffe17 	ldw	r2,-8(fp)
81136800:	d0e09417 	ldw	r3,-32176(gp)
81136804:	180b883a 	mov	r5,r3
81136808:	1009883a 	mov	r4,r2
8113680c:	11325e00 	call	811325e0 <Read_Sector_Data>
81136810:	10001426 	beq	r2,zero,81136864 <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
81136814:	e0ffff0f 	ldh	r3,-4(fp)
81136818:	00a04574 	movhi	r2,33045
8113681c:	1090c904 	addi	r2,r2,17188
81136820:	180691ba 	slli	r3,r3,6
81136824:	10c5883a 	add	r2,r2,r3
81136828:	10800c04 	addi	r2,r2,48
8113682c:	1080000b 	ldhu	r2,0(r2)
81136830:	113fffcc 	andi	r4,r2,65535
81136834:	2120001c 	xori	r4,r4,32768
81136838:	21200004 	addi	r4,r4,-32768
8113683c:	e0bfff0f 	ldh	r2,-4(fp)
81136840:	100691ba 	slli	r3,r2,6
81136844:	00a04574 	movhi	r2,33045
81136848:	1090c904 	addi	r2,r2,17188
8113684c:	1885883a 	add	r2,r3,r2
81136850:	100b883a 	mov	r5,r2
81136854:	1132c940 	call	81132c94 <Write_File_Record_At_Offset>
81136858:	10000226 	beq	r2,zero,81136864 <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
8113685c:	113258c0 	call	8113258c <Save_Modified_Sector>
81136860:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
81136864:	e0ffff0f 	ldh	r3,-4(fp)
81136868:	00a04574 	movhi	r2,33045
8113686c:	1090c904 	addi	r2,r2,17188
81136870:	180691ba 	slli	r3,r3,6
81136874:	10c5883a 	add	r2,r2,r3
81136878:	10800f04 	addi	r2,r2,60
8113687c:	10000015 	stw	zero,0(r2)
			result = true;
81136880:	00800044 	movi	r2,1
81136884:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81136888:	e0bffd17 	ldw	r2,-12(fp)
}
8113688c:	e037883a 	mov	sp,fp
81136890:	dfc00117 	ldw	ra,4(sp)
81136894:	df000017 	ldw	fp,0(sp)
81136898:	dec00204 	addi	sp,sp,8
8113689c:	f800283a 	ret

811368a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811368a0:	defffa04 	addi	sp,sp,-24
811368a4:	de00012e 	bgeu	sp,et,811368ac <altera_avalon_jtag_uart_read_fd+0xc>
811368a8:	003b68fa 	trap	3
811368ac:	dfc00515 	stw	ra,20(sp)
811368b0:	df000415 	stw	fp,16(sp)
811368b4:	df000404 	addi	fp,sp,16
811368b8:	e13ffd15 	stw	r4,-12(fp)
811368bc:	e17ffe15 	stw	r5,-8(fp)
811368c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811368c4:	e0bffd17 	ldw	r2,-12(fp)
811368c8:	10800017 	ldw	r2,0(r2)
811368cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
811368d0:	e0bffc17 	ldw	r2,-16(fp)
811368d4:	10c00a04 	addi	r3,r2,40
811368d8:	e0bffd17 	ldw	r2,-12(fp)
811368dc:	10800217 	ldw	r2,8(r2)
811368e0:	100f883a 	mov	r7,r2
811368e4:	e1bfff17 	ldw	r6,-4(fp)
811368e8:	e17ffe17 	ldw	r5,-8(fp)
811368ec:	1809883a 	mov	r4,r3
811368f0:	11370940 	call	81137094 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
811368f4:	e037883a 	mov	sp,fp
811368f8:	dfc00117 	ldw	ra,4(sp)
811368fc:	df000017 	ldw	fp,0(sp)
81136900:	dec00204 	addi	sp,sp,8
81136904:	f800283a 	ret

81136908 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81136908:	defffa04 	addi	sp,sp,-24
8113690c:	de00012e 	bgeu	sp,et,81136914 <altera_avalon_jtag_uart_write_fd+0xc>
81136910:	003b68fa 	trap	3
81136914:	dfc00515 	stw	ra,20(sp)
81136918:	df000415 	stw	fp,16(sp)
8113691c:	df000404 	addi	fp,sp,16
81136920:	e13ffd15 	stw	r4,-12(fp)
81136924:	e17ffe15 	stw	r5,-8(fp)
81136928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8113692c:	e0bffd17 	ldw	r2,-12(fp)
81136930:	10800017 	ldw	r2,0(r2)
81136934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81136938:	e0bffc17 	ldw	r2,-16(fp)
8113693c:	10c00a04 	addi	r3,r2,40
81136940:	e0bffd17 	ldw	r2,-12(fp)
81136944:	10800217 	ldw	r2,8(r2)
81136948:	100f883a 	mov	r7,r2
8113694c:	e1bfff17 	ldw	r6,-4(fp)
81136950:	e17ffe17 	ldw	r5,-8(fp)
81136954:	1809883a 	mov	r4,r3
81136958:	11373580 	call	81137358 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8113695c:	e037883a 	mov	sp,fp
81136960:	dfc00117 	ldw	ra,4(sp)
81136964:	df000017 	ldw	fp,0(sp)
81136968:	dec00204 	addi	sp,sp,8
8113696c:	f800283a 	ret

81136970 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81136970:	defffc04 	addi	sp,sp,-16
81136974:	de00012e 	bgeu	sp,et,8113697c <altera_avalon_jtag_uart_close_fd+0xc>
81136978:	003b68fa 	trap	3
8113697c:	dfc00315 	stw	ra,12(sp)
81136980:	df000215 	stw	fp,8(sp)
81136984:	df000204 	addi	fp,sp,8
81136988:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8113698c:	e0bfff17 	ldw	r2,-4(fp)
81136990:	10800017 	ldw	r2,0(r2)
81136994:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81136998:	e0bffe17 	ldw	r2,-8(fp)
8113699c:	10c00a04 	addi	r3,r2,40
811369a0:	e0bfff17 	ldw	r2,-4(fp)
811369a4:	10800217 	ldw	r2,8(r2)
811369a8:	100b883a 	mov	r5,r2
811369ac:	1809883a 	mov	r4,r3
811369b0:	1136f2c0 	call	81136f2c <altera_avalon_jtag_uart_close>
}
811369b4:	e037883a 	mov	sp,fp
811369b8:	dfc00117 	ldw	ra,4(sp)
811369bc:	df000017 	ldw	fp,0(sp)
811369c0:	dec00204 	addi	sp,sp,8
811369c4:	f800283a 	ret

811369c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
811369c8:	defffa04 	addi	sp,sp,-24
811369cc:	de00012e 	bgeu	sp,et,811369d4 <altera_avalon_jtag_uart_ioctl_fd+0xc>
811369d0:	003b68fa 	trap	3
811369d4:	dfc00515 	stw	ra,20(sp)
811369d8:	df000415 	stw	fp,16(sp)
811369dc:	df000404 	addi	fp,sp,16
811369e0:	e13ffd15 	stw	r4,-12(fp)
811369e4:	e17ffe15 	stw	r5,-8(fp)
811369e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
811369ec:	e0bffd17 	ldw	r2,-12(fp)
811369f0:	10800017 	ldw	r2,0(r2)
811369f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
811369f8:	e0bffc17 	ldw	r2,-16(fp)
811369fc:	10800a04 	addi	r2,r2,40
81136a00:	e1bfff17 	ldw	r6,-4(fp)
81136a04:	e17ffe17 	ldw	r5,-8(fp)
81136a08:	1009883a 	mov	r4,r2
81136a0c:	1136f9c0 	call	81136f9c <altera_avalon_jtag_uart_ioctl>
}
81136a10:	e037883a 	mov	sp,fp
81136a14:	dfc00117 	ldw	ra,4(sp)
81136a18:	df000017 	ldw	fp,0(sp)
81136a1c:	dec00204 	addi	sp,sp,8
81136a20:	f800283a 	ret

81136a24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81136a24:	defff104 	addi	sp,sp,-60
81136a28:	de00012e 	bgeu	sp,et,81136a30 <altera_avalon_jtag_uart_init+0xc>
81136a2c:	003b68fa 	trap	3
81136a30:	dfc00e15 	stw	ra,56(sp)
81136a34:	df000d15 	stw	fp,52(sp)
81136a38:	df000d04 	addi	fp,sp,52
81136a3c:	e13ff915 	stw	r4,-28(fp)
81136a40:	e17ffa15 	stw	r5,-24(fp)
81136a44:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81136a48:	e0bff917 	ldw	r2,-28(fp)
81136a4c:	10800c04 	addi	r2,r2,48
81136a50:	e0bff415 	stw	r2,-48(fp)
81136a54:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81136a58:	e0bff80b 	ldhu	r2,-32(fp)
81136a5c:	e0fff884 	addi	r3,fp,-30
81136a60:	180b883a 	mov	r5,r3
81136a64:	1009883a 	mov	r4,r2
81136a68:	112abf40 	call	8112abf4 <OSFlagCreate>
81136a6c:	1007883a 	mov	r3,r2
81136a70:	e0bff417 	ldw	r2,-48(fp)
81136a74:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81136a78:	e0bff917 	ldw	r2,-28(fp)
81136a7c:	10800a04 	addi	r2,r2,40
81136a80:	e0bff515 	stw	r2,-44(fp)
81136a84:	00800044 	movi	r2,1
81136a88:	e0bff78d 	sth	r2,-34(fp)
81136a8c:	e0bff78b 	ldhu	r2,-34(fp)
81136a90:	1009883a 	mov	r4,r2
81136a94:	112eb500 	call	8112eb50 <OSSemCreate>
81136a98:	1007883a 	mov	r3,r2
81136a9c:	e0bff517 	ldw	r2,-44(fp)
81136aa0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
81136aa4:	e0bff917 	ldw	r2,-28(fp)
81136aa8:	10800b04 	addi	r2,r2,44
81136aac:	e0bff615 	stw	r2,-40(fp)
81136ab0:	00800044 	movi	r2,1
81136ab4:	e0bff70d 	sth	r2,-36(fp)
81136ab8:	e0bff70b 	ldhu	r2,-36(fp)
81136abc:	1009883a 	mov	r4,r2
81136ac0:	112eb500 	call	8112eb50 <OSSemCreate>
81136ac4:	1007883a 	mov	r3,r2
81136ac8:	e0bff617 	ldw	r2,-40(fp)
81136acc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81136ad0:	e0bff917 	ldw	r2,-28(fp)
81136ad4:	00c00044 	movi	r3,1
81136ad8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81136adc:	e0bff917 	ldw	r2,-28(fp)
81136ae0:	10800017 	ldw	r2,0(r2)
81136ae4:	10800104 	addi	r2,r2,4
81136ae8:	1007883a 	mov	r3,r2
81136aec:	e0bff917 	ldw	r2,-28(fp)
81136af0:	10800817 	ldw	r2,32(r2)
81136af4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81136af8:	e0bffa17 	ldw	r2,-24(fp)
81136afc:	e0fffb17 	ldw	r3,-20(fp)
81136b00:	d8000015 	stw	zero,0(sp)
81136b04:	e1fff917 	ldw	r7,-28(fp)
81136b08:	01a044f4 	movhi	r6,33043
81136b0c:	319add04 	addi	r6,r6,27508
81136b10:	180b883a 	mov	r5,r3
81136b14:	1009883a 	mov	r4,r2
81136b18:	113a9780 	call	8113a978 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81136b1c:	e0bff917 	ldw	r2,-28(fp)
81136b20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81136b24:	e0bff917 	ldw	r2,-28(fp)
81136b28:	10800204 	addi	r2,r2,8
81136b2c:	d0e06b17 	ldw	r3,-32340(gp)
81136b30:	e1fff917 	ldw	r7,-28(fp)
81136b34:	01a044f4 	movhi	r6,33043
81136b38:	319b8804 	addi	r6,r6,28192
81136b3c:	180b883a 	mov	r5,r3
81136b40:	1009883a 	mov	r4,r2
81136b44:	113a3f80 	call	8113a3f8 <alt_alarm_start>
81136b48:	1000040e 	bge	r2,zero,81136b5c <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81136b4c:	e0fff917 	ldw	r3,-28(fp)
81136b50:	00a00034 	movhi	r2,32768
81136b54:	10bfffc4 	addi	r2,r2,-1
81136b58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
81136b5c:	0001883a 	nop
81136b60:	e037883a 	mov	sp,fp
81136b64:	dfc00117 	ldw	ra,4(sp)
81136b68:	df000017 	ldw	fp,0(sp)
81136b6c:	dec00204 	addi	sp,sp,8
81136b70:	f800283a 	ret

81136b74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81136b74:	defff204 	addi	sp,sp,-56
81136b78:	de00012e 	bgeu	sp,et,81136b80 <altera_avalon_jtag_uart_irq+0xc>
81136b7c:	003b68fa 	trap	3
81136b80:	dfc00d15 	stw	ra,52(sp)
81136b84:	df000c15 	stw	fp,48(sp)
81136b88:	df000c04 	addi	fp,sp,48
81136b8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81136b90:	e0bfff17 	ldw	r2,-4(fp)
81136b94:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81136b98:	e0bff617 	ldw	r2,-40(fp)
81136b9c:	10800017 	ldw	r2,0(r2)
81136ba0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81136ba4:	e0bff717 	ldw	r2,-36(fp)
81136ba8:	10800104 	addi	r2,r2,4
81136bac:	10800037 	ldwio	r2,0(r2)
81136bb0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81136bb4:	e0bff817 	ldw	r2,-32(fp)
81136bb8:	1080c00c 	andi	r2,r2,768
81136bbc:	10009126 	beq	r2,zero,81136e04 <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81136bc0:	e0bff817 	ldw	r2,-32(fp)
81136bc4:	1080400c 	andi	r2,r2,256
81136bc8:	10004726 	beq	r2,zero,81136ce8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81136bcc:	00800074 	movhi	r2,1
81136bd0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136bd4:	e0bff617 	ldw	r2,-40(fp)
81136bd8:	10800d17 	ldw	r2,52(r2)
81136bdc:	10800044 	addi	r2,r2,1
81136be0:	1081ffcc 	andi	r2,r2,2047
81136be4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81136be8:	e0bff617 	ldw	r2,-40(fp)
81136bec:	10c00e17 	ldw	r3,56(r2)
81136bf0:	e0bff917 	ldw	r2,-28(fp)
81136bf4:	18802726 	beq	r3,r2,81136c94 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81136bf8:	e0bff717 	ldw	r2,-36(fp)
81136bfc:	10800037 	ldwio	r2,0(r2)
81136c00:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81136c04:	e0bff417 	ldw	r2,-48(fp)
81136c08:	10a0000c 	andi	r2,r2,32768
81136c0c:	10002326 	beq	r2,zero,81136c9c <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81136c10:	e0bff617 	ldw	r2,-40(fp)
81136c14:	10800d17 	ldw	r2,52(r2)
81136c18:	e0fff417 	ldw	r3,-48(fp)
81136c1c:	1809883a 	mov	r4,r3
81136c20:	e0fff617 	ldw	r3,-40(fp)
81136c24:	1885883a 	add	r2,r3,r2
81136c28:	10801104 	addi	r2,r2,68
81136c2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136c30:	e0bff617 	ldw	r2,-40(fp)
81136c34:	10800d17 	ldw	r2,52(r2)
81136c38:	10800044 	addi	r2,r2,1
81136c3c:	10c1ffcc 	andi	r3,r2,2047
81136c40:	e0bff617 	ldw	r2,-40(fp)
81136c44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81136c48:	e0bff617 	ldw	r2,-40(fp)
81136c4c:	10800c17 	ldw	r2,48(r2)
81136c50:	e0bffb15 	stw	r2,-20(fp)
81136c54:	00800044 	movi	r2,1
81136c58:	e0bffc0d 	sth	r2,-16(fp)
81136c5c:	00800044 	movi	r2,1
81136c60:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136c64:	d0a07403 	ldbu	r2,-32304(gp)
81136c68:	10803fcc 	andi	r2,r2,255
81136c6c:	103fd926 	beq	r2,zero,81136bd4 <__reset+0xfb116bd4>
  {
    OSFlagPost (group, flags, opt, &err);
81136c70:	e0bffc0b 	ldhu	r2,-16(fp)
81136c74:	e0fffc83 	ldbu	r3,-14(fp)
81136c78:	e13ffdc4 	addi	r4,fp,-9
81136c7c:	200f883a 	mov	r7,r4
81136c80:	180d883a 	mov	r6,r3
81136c84:	100b883a 	mov	r5,r2
81136c88:	e13ffb17 	ldw	r4,-20(fp)
81136c8c:	112b8000 	call	8112b800 <OSFlagPost>
      }
81136c90:	003fd006 	br	81136bd4 <__reset+0xfb116bd4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81136c94:	0001883a 	nop
81136c98:	00000106 	br	81136ca0 <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81136c9c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81136ca0:	e0bff417 	ldw	r2,-48(fp)
81136ca4:	10bfffec 	andhi	r2,r2,65535
81136ca8:	10000f26 	beq	r2,zero,81136ce8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81136cac:	e0bff617 	ldw	r2,-40(fp)
81136cb0:	10c00817 	ldw	r3,32(r2)
81136cb4:	00bfff84 	movi	r2,-2
81136cb8:	1886703a 	and	r3,r3,r2
81136cbc:	e0bff617 	ldw	r2,-40(fp)
81136cc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81136cc4:	e0bff717 	ldw	r2,-36(fp)
81136cc8:	10800104 	addi	r2,r2,4
81136ccc:	1007883a 	mov	r3,r2
81136cd0:	e0bff617 	ldw	r2,-40(fp)
81136cd4:	10800817 	ldw	r2,32(r2)
81136cd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81136cdc:	e0bff717 	ldw	r2,-36(fp)
81136ce0:	10800104 	addi	r2,r2,4
81136ce4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81136ce8:	e0bff817 	ldw	r2,-32(fp)
81136cec:	1080800c 	andi	r2,r2,512
81136cf0:	103fac26 	beq	r2,zero,81136ba4 <__reset+0xfb116ba4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81136cf4:	e0bff817 	ldw	r2,-32(fp)
81136cf8:	1004d43a 	srli	r2,r2,16
81136cfc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81136d00:	00002606 	br	81136d9c <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81136d04:	e0bff717 	ldw	r2,-36(fp)
81136d08:	e0fff617 	ldw	r3,-40(fp)
81136d0c:	18c01017 	ldw	r3,64(r3)
81136d10:	e13ff617 	ldw	r4,-40(fp)
81136d14:	20c7883a 	add	r3,r4,r3
81136d18:	18c21104 	addi	r3,r3,2116
81136d1c:	18c00003 	ldbu	r3,0(r3)
81136d20:	18c03fcc 	andi	r3,r3,255
81136d24:	18c0201c 	xori	r3,r3,128
81136d28:	18ffe004 	addi	r3,r3,-128
81136d2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136d30:	e0bff617 	ldw	r2,-40(fp)
81136d34:	10801017 	ldw	r2,64(r2)
81136d38:	10800044 	addi	r2,r2,1
81136d3c:	10c1ffcc 	andi	r3,r2,2047
81136d40:	e0bff617 	ldw	r2,-40(fp)
81136d44:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81136d48:	e0bff617 	ldw	r2,-40(fp)
81136d4c:	10800c17 	ldw	r2,48(r2)
81136d50:	e0bffa15 	stw	r2,-24(fp)
81136d54:	00800084 	movi	r2,2
81136d58:	e0bffd0d 	sth	r2,-12(fp)
81136d5c:	00800044 	movi	r2,1
81136d60:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136d64:	d0a07403 	ldbu	r2,-32304(gp)
81136d68:	10803fcc 	andi	r2,r2,255
81136d6c:	10000826 	beq	r2,zero,81136d90 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
81136d70:	e0bffd0b 	ldhu	r2,-12(fp)
81136d74:	e0fffd83 	ldbu	r3,-10(fp)
81136d78:	e13ffe04 	addi	r4,fp,-8
81136d7c:	200f883a 	mov	r7,r4
81136d80:	180d883a 	mov	r6,r3
81136d84:	100b883a 	mov	r5,r2
81136d88:	e13ffa17 	ldw	r4,-24(fp)
81136d8c:	112b8000 	call	8112b800 <OSFlagPost>

        space--;
81136d90:	e0bff517 	ldw	r2,-44(fp)
81136d94:	10bfffc4 	addi	r2,r2,-1
81136d98:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81136d9c:	e0bff517 	ldw	r2,-44(fp)
81136da0:	10000526 	beq	r2,zero,81136db8 <altera_avalon_jtag_uart_irq+0x244>
81136da4:	e0bff617 	ldw	r2,-40(fp)
81136da8:	10c01017 	ldw	r3,64(r2)
81136dac:	e0bff617 	ldw	r2,-40(fp)
81136db0:	10800f17 	ldw	r2,60(r2)
81136db4:	18bfd31e 	bne	r3,r2,81136d04 <__reset+0xfb116d04>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81136db8:	e0bff517 	ldw	r2,-44(fp)
81136dbc:	103f7926 	beq	r2,zero,81136ba4 <__reset+0xfb116ba4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81136dc0:	e0bff617 	ldw	r2,-40(fp)
81136dc4:	10c00817 	ldw	r3,32(r2)
81136dc8:	00bfff44 	movi	r2,-3
81136dcc:	1886703a 	and	r3,r3,r2
81136dd0:	e0bff617 	ldw	r2,-40(fp)
81136dd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81136dd8:	e0bff617 	ldw	r2,-40(fp)
81136ddc:	10800017 	ldw	r2,0(r2)
81136de0:	10800104 	addi	r2,r2,4
81136de4:	1007883a 	mov	r3,r2
81136de8:	e0bff617 	ldw	r2,-40(fp)
81136dec:	10800817 	ldw	r2,32(r2)
81136df0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81136df4:	e0bff717 	ldw	r2,-36(fp)
81136df8:	10800104 	addi	r2,r2,4
81136dfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81136e00:	003f6806 	br	81136ba4 <__reset+0xfb116ba4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81136e04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81136e08:	0001883a 	nop
81136e0c:	e037883a 	mov	sp,fp
81136e10:	dfc00117 	ldw	ra,4(sp)
81136e14:	df000017 	ldw	fp,0(sp)
81136e18:	dec00204 	addi	sp,sp,8
81136e1c:	f800283a 	ret

81136e20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81136e20:	defff904 	addi	sp,sp,-28
81136e24:	de00012e 	bgeu	sp,et,81136e2c <altera_avalon_jtag_uart_timeout+0xc>
81136e28:	003b68fa 	trap	3
81136e2c:	dfc00615 	stw	ra,24(sp)
81136e30:	df000515 	stw	fp,20(sp)
81136e34:	df000504 	addi	fp,sp,20
81136e38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81136e3c:	e0bfff17 	ldw	r2,-4(fp)
81136e40:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81136e44:	e0bffb17 	ldw	r2,-20(fp)
81136e48:	10800017 	ldw	r2,0(r2)
81136e4c:	10800104 	addi	r2,r2,4
81136e50:	10800037 	ldwio	r2,0(r2)
81136e54:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81136e58:	e0bffc17 	ldw	r2,-16(fp)
81136e5c:	1081000c 	andi	r2,r2,1024
81136e60:	10000b26 	beq	r2,zero,81136e90 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81136e64:	e0bffb17 	ldw	r2,-20(fp)
81136e68:	10800017 	ldw	r2,0(r2)
81136e6c:	10800104 	addi	r2,r2,4
81136e70:	1007883a 	mov	r3,r2
81136e74:	e0bffb17 	ldw	r2,-20(fp)
81136e78:	10800817 	ldw	r2,32(r2)
81136e7c:	10810014 	ori	r2,r2,1024
81136e80:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81136e84:	e0bffb17 	ldw	r2,-20(fp)
81136e88:	10000915 	stw	zero,36(r2)
81136e8c:	00002106 	br	81136f14 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81136e90:	e0bffb17 	ldw	r2,-20(fp)
81136e94:	10c00917 	ldw	r3,36(r2)
81136e98:	00a00034 	movhi	r2,32768
81136e9c:	10bfff04 	addi	r2,r2,-4
81136ea0:	10c01c36 	bltu	r2,r3,81136f14 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81136ea4:	e0bffb17 	ldw	r2,-20(fp)
81136ea8:	10800917 	ldw	r2,36(r2)
81136eac:	10c00044 	addi	r3,r2,1
81136eb0:	e0bffb17 	ldw	r2,-20(fp)
81136eb4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81136eb8:	e0bffb17 	ldw	r2,-20(fp)
81136ebc:	10c00917 	ldw	r3,36(r2)
81136ec0:	e0bffb17 	ldw	r2,-20(fp)
81136ec4:	10800117 	ldw	r2,4(r2)
81136ec8:	18801236 	bltu	r3,r2,81136f14 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81136ecc:	e0bffb17 	ldw	r2,-20(fp)
81136ed0:	10800c17 	ldw	r2,48(r2)
81136ed4:	e0bffd15 	stw	r2,-12(fp)
81136ed8:	00800104 	movi	r2,4
81136edc:	e0bffe0d 	sth	r2,-8(fp)
81136ee0:	00800044 	movi	r2,1
81136ee4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136ee8:	d0a07403 	ldbu	r2,-32304(gp)
81136eec:	10803fcc 	andi	r2,r2,255
81136ef0:	10000826 	beq	r2,zero,81136f14 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81136ef4:	e0bffe0b 	ldhu	r2,-8(fp)
81136ef8:	e0fffe83 	ldbu	r3,-6(fp)
81136efc:	e13ffec4 	addi	r4,fp,-5
81136f00:	200f883a 	mov	r7,r4
81136f04:	180d883a 	mov	r6,r3
81136f08:	100b883a 	mov	r5,r2
81136f0c:	e13ffd17 	ldw	r4,-12(fp)
81136f10:	112b8000 	call	8112b800 <OSFlagPost>
81136f14:	d0a06b17 	ldw	r2,-32340(gp)
    }
  }

  return alt_ticks_per_second();
}
81136f18:	e037883a 	mov	sp,fp
81136f1c:	dfc00117 	ldw	ra,4(sp)
81136f20:	df000017 	ldw	fp,0(sp)
81136f24:	dec00204 	addi	sp,sp,8
81136f28:	f800283a 	ret

81136f2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81136f2c:	defffd04 	addi	sp,sp,-12
81136f30:	de00012e 	bgeu	sp,et,81136f38 <altera_avalon_jtag_uart_close+0xc>
81136f34:	003b68fa 	trap	3
81136f38:	df000215 	stw	fp,8(sp)
81136f3c:	df000204 	addi	fp,sp,8
81136f40:	e13ffe15 	stw	r4,-8(fp)
81136f44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81136f48:	00000506 	br	81136f60 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81136f4c:	e0bfff17 	ldw	r2,-4(fp)
81136f50:	1090000c 	andi	r2,r2,16384
81136f54:	10000226 	beq	r2,zero,81136f60 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81136f58:	00bffd44 	movi	r2,-11
81136f5c:	00000b06 	br	81136f8c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81136f60:	e0bffe17 	ldw	r2,-8(fp)
81136f64:	10c01017 	ldw	r3,64(r2)
81136f68:	e0bffe17 	ldw	r2,-8(fp)
81136f6c:	10800f17 	ldw	r2,60(r2)
81136f70:	18800526 	beq	r3,r2,81136f88 <altera_avalon_jtag_uart_close+0x5c>
81136f74:	e0bffe17 	ldw	r2,-8(fp)
81136f78:	10c00917 	ldw	r3,36(r2)
81136f7c:	e0bffe17 	ldw	r2,-8(fp)
81136f80:	10800117 	ldw	r2,4(r2)
81136f84:	18bff136 	bltu	r3,r2,81136f4c <__reset+0xfb116f4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81136f88:	0005883a 	mov	r2,zero
}
81136f8c:	e037883a 	mov	sp,fp
81136f90:	df000017 	ldw	fp,0(sp)
81136f94:	dec00104 	addi	sp,sp,4
81136f98:	f800283a 	ret

81136f9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81136f9c:	defffa04 	addi	sp,sp,-24
81136fa0:	de00012e 	bgeu	sp,et,81136fa8 <altera_avalon_jtag_uart_ioctl+0xc>
81136fa4:	003b68fa 	trap	3
81136fa8:	df000515 	stw	fp,20(sp)
81136fac:	df000504 	addi	fp,sp,20
81136fb0:	e13ffd15 	stw	r4,-12(fp)
81136fb4:	e17ffe15 	stw	r5,-8(fp)
81136fb8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81136fbc:	00bff9c4 	movi	r2,-25
81136fc0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81136fc4:	e0bffe17 	ldw	r2,-8(fp)
81136fc8:	10da8060 	cmpeqi	r3,r2,27137
81136fcc:	1800031e 	bne	r3,zero,81136fdc <altera_avalon_jtag_uart_ioctl+0x40>
81136fd0:	109a80a0 	cmpeqi	r2,r2,27138
81136fd4:	1000181e 	bne	r2,zero,81137038 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81136fd8:	00002906 	br	81137080 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81136fdc:	e0bffd17 	ldw	r2,-12(fp)
81136fe0:	10c00117 	ldw	r3,4(r2)
81136fe4:	00a00034 	movhi	r2,32768
81136fe8:	10bfffc4 	addi	r2,r2,-1
81136fec:	18802126 	beq	r3,r2,81137074 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81136ff0:	e0bfff17 	ldw	r2,-4(fp)
81136ff4:	10800017 	ldw	r2,0(r2)
81136ff8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81136ffc:	e0bffc17 	ldw	r2,-16(fp)
81137000:	10800090 	cmplti	r2,r2,2
81137004:	1000061e 	bne	r2,zero,81137020 <altera_avalon_jtag_uart_ioctl+0x84>
81137008:	e0fffc17 	ldw	r3,-16(fp)
8113700c:	00a00034 	movhi	r2,32768
81137010:	10bfffc4 	addi	r2,r2,-1
81137014:	18800226 	beq	r3,r2,81137020 <altera_avalon_jtag_uart_ioctl+0x84>
81137018:	e0bffc17 	ldw	r2,-16(fp)
8113701c:	00000206 	br	81137028 <altera_avalon_jtag_uart_ioctl+0x8c>
81137020:	00a00034 	movhi	r2,32768
81137024:	10bfff84 	addi	r2,r2,-2
81137028:	e0fffd17 	ldw	r3,-12(fp)
8113702c:	18800115 	stw	r2,4(r3)
      rc = 0;
81137030:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81137034:	00000f06 	br	81137074 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81137038:	e0bffd17 	ldw	r2,-12(fp)
8113703c:	10c00117 	ldw	r3,4(r2)
81137040:	00a00034 	movhi	r2,32768
81137044:	10bfffc4 	addi	r2,r2,-1
81137048:	18800c26 	beq	r3,r2,8113707c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8113704c:	e0bffd17 	ldw	r2,-12(fp)
81137050:	10c00917 	ldw	r3,36(r2)
81137054:	e0bffd17 	ldw	r2,-12(fp)
81137058:	10800117 	ldw	r2,4(r2)
8113705c:	1885803a 	cmpltu	r2,r3,r2
81137060:	10c03fcc 	andi	r3,r2,255
81137064:	e0bfff17 	ldw	r2,-4(fp)
81137068:	10c00015 	stw	r3,0(r2)
      rc = 0;
8113706c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81137070:	00000206 	br	8113707c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81137074:	0001883a 	nop
81137078:	00000106 	br	81137080 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8113707c:	0001883a 	nop

  default:
    break;
  }

  return rc;
81137080:	e0bffb17 	ldw	r2,-20(fp)
}
81137084:	e037883a 	mov	sp,fp
81137088:	df000017 	ldw	fp,0(sp)
8113708c:	dec00104 	addi	sp,sp,4
81137090:	f800283a 	ret

81137094 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81137094:	deffed04 	addi	sp,sp,-76
81137098:	de00012e 	bgeu	sp,et,811370a0 <altera_avalon_jtag_uart_read+0xc>
8113709c:	003b68fa 	trap	3
811370a0:	dfc01215 	stw	ra,72(sp)
811370a4:	df001115 	stw	fp,68(sp)
811370a8:	df001104 	addi	fp,sp,68
811370ac:	e13ffc15 	stw	r4,-16(fp)
811370b0:	e17ffd15 	stw	r5,-12(fp)
811370b4:	e1bffe15 	stw	r6,-8(fp)
811370b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
811370bc:	e0bffd17 	ldw	r2,-12(fp)
811370c0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
811370c4:	e0bffc17 	ldw	r2,-16(fp)
811370c8:	10800a17 	ldw	r2,40(r2)
811370cc:	e0bff815 	stw	r2,-32(fp)
811370d0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811370d4:	e0bff90b 	ldhu	r2,-28(fp)
811370d8:	e0fffb04 	addi	r3,fp,-20
811370dc:	180d883a 	mov	r6,r3
811370e0:	100b883a 	mov	r5,r2
811370e4:	e13ff817 	ldw	r4,-32(fp)
811370e8:	112ee780 	call	8112ee78 <OSSemPend>

  while (space > 0)
811370ec:	00006106 	br	81137274 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
811370f0:	e0bffc17 	ldw	r2,-16(fp)
811370f4:	10800d17 	ldw	r2,52(r2)
811370f8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
811370fc:	e0bffc17 	ldw	r2,-16(fp)
81137100:	10800e17 	ldw	r2,56(r2)
81137104:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81137108:	e0fff317 	ldw	r3,-52(fp)
8113710c:	e0bff417 	ldw	r2,-48(fp)
81137110:	18800536 	bltu	r3,r2,81137128 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81137114:	e0fff317 	ldw	r3,-52(fp)
81137118:	e0bff417 	ldw	r2,-48(fp)
8113711c:	1885c83a 	sub	r2,r3,r2
81137120:	e0bff115 	stw	r2,-60(fp)
81137124:	00000406 	br	81137138 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81137128:	00c20004 	movi	r3,2048
8113712c:	e0bff417 	ldw	r2,-48(fp)
81137130:	1885c83a 	sub	r2,r3,r2
81137134:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81137138:	e0bff117 	ldw	r2,-60(fp)
8113713c:	10001e26 	beq	r2,zero,811371b8 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81137140:	e0fffe17 	ldw	r3,-8(fp)
81137144:	e0bff117 	ldw	r2,-60(fp)
81137148:	1880022e 	bgeu	r3,r2,81137154 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
8113714c:	e0bffe17 	ldw	r2,-8(fp)
81137150:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81137154:	e0bffc17 	ldw	r2,-16(fp)
81137158:	10c01104 	addi	r3,r2,68
8113715c:	e0bff417 	ldw	r2,-48(fp)
81137160:	1885883a 	add	r2,r3,r2
81137164:	e1bff117 	ldw	r6,-60(fp)
81137168:	100b883a 	mov	r5,r2
8113716c:	e13ff017 	ldw	r4,-64(fp)
81137170:	1112b340 	call	81112b34 <memcpy>
      ptr   += n;
81137174:	e0fff017 	ldw	r3,-64(fp)
81137178:	e0bff117 	ldw	r2,-60(fp)
8113717c:	1885883a 	add	r2,r3,r2
81137180:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81137184:	e0fffe17 	ldw	r3,-8(fp)
81137188:	e0bff117 	ldw	r2,-60(fp)
8113718c:	1885c83a 	sub	r2,r3,r2
81137190:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137194:	e0fff417 	ldw	r3,-48(fp)
81137198:	e0bff117 	ldw	r2,-60(fp)
8113719c:	1885883a 	add	r2,r3,r2
811371a0:	10c1ffcc 	andi	r3,r2,2047
811371a4:	e0bffc17 	ldw	r2,-16(fp)
811371a8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
811371ac:	e0bffe17 	ldw	r2,-8(fp)
811371b0:	00bfcf16 	blt	zero,r2,811370f0 <__reset+0xfb1170f0>
811371b4:	00000106 	br	811371bc <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
811371b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
811371bc:	e0fff017 	ldw	r3,-64(fp)
811371c0:	e0bffd17 	ldw	r2,-12(fp)
811371c4:	18802e1e 	bne	r3,r2,81137280 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
811371c8:	e0bfff17 	ldw	r2,-4(fp)
811371cc:	1090000c 	andi	r2,r2,16384
811371d0:	10002d1e 	bne	r2,zero,81137288 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
811371d4:	d0a07403 	ldbu	r2,-32304(gp)
811371d8:	10803fcc 	andi	r2,r2,255
811371dc:	10800058 	cmpnei	r2,r2,1
811371e0:	1000161e 	bne	r2,zero,8113723c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
811371e4:	e0bffc17 	ldw	r2,-16(fp)
811371e8:	10800c17 	ldw	r2,48(r2)
811371ec:	e0bff215 	stw	r2,-56(fp)
811371f0:	00800144 	movi	r2,5
811371f4:	e0bff98d 	sth	r2,-26(fp)
811371f8:	00bfe0c4 	movi	r2,-125
811371fc:	e0bffa05 	stb	r2,-24(fp)
81137200:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81137204:	d0a07403 	ldbu	r2,-32304(gp)
81137208:	10803fcc 	andi	r2,r2,255
8113720c:	10001526 	beq	r2,zero,81137264 <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81137210:	e0fff98b 	ldhu	r3,-26(fp)
81137214:	e13ffa03 	ldbu	r4,-24(fp)
81137218:	e17ffa8b 	ldhu	r5,-22(fp)
8113721c:	e0bffb44 	addi	r2,fp,-19
81137220:	d8800015 	stw	r2,0(sp)
81137224:	280f883a 	mov	r7,r5
81137228:	200d883a 	mov	r6,r4
8113722c:	180b883a 	mov	r5,r3
81137230:	e13ff217 	ldw	r4,-56(fp)
81137234:	112b1d80 	call	8112b1d8 <OSFlagPend>
81137238:	00000a06 	br	81137264 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8113723c:	0001883a 	nop
81137240:	e0bffc17 	ldw	r2,-16(fp)
81137244:	10c00d17 	ldw	r3,52(r2)
81137248:	e0bff317 	ldw	r2,-52(fp)
8113724c:	1880051e 	bne	r3,r2,81137264 <altera_avalon_jtag_uart_read+0x1d0>
81137250:	e0bffc17 	ldw	r2,-16(fp)
81137254:	10c00917 	ldw	r3,36(r2)
81137258:	e0bffc17 	ldw	r2,-16(fp)
8113725c:	10800117 	ldw	r2,4(r2)
81137260:	18bff736 	bltu	r3,r2,81137240 <__reset+0xfb117240>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81137264:	e0bffc17 	ldw	r2,-16(fp)
81137268:	10c00d17 	ldw	r3,52(r2)
8113726c:	e0bff317 	ldw	r2,-52(fp)
81137270:	18800726 	beq	r3,r2,81137290 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81137274:	e0bffe17 	ldw	r2,-8(fp)
81137278:	00bf9d16 	blt	zero,r2,811370f0 <__reset+0xfb1170f0>
8113727c:	00000506 	br	81137294 <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81137280:	0001883a 	nop
81137284:	00000306 	br	81137294 <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81137288:	0001883a 	nop
8113728c:	00000106 	br	81137294 <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81137290:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81137294:	e0bffc17 	ldw	r2,-16(fp)
81137298:	10800a17 	ldw	r2,40(r2)
8113729c:	1009883a 	mov	r4,r2
811372a0:	112f2000 	call	8112f200 <OSSemPost>

  if (ptr != buffer)
811372a4:	e0fff017 	ldw	r3,-64(fp)
811372a8:	e0bffd17 	ldw	r2,-12(fp)
811372ac:	18801826 	beq	r3,r2,81137310 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811372b0:	0005303a 	rdctl	r2,status
811372b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811372b8:	e0fff717 	ldw	r3,-36(fp)
811372bc:	00bfff84 	movi	r2,-2
811372c0:	1884703a 	and	r2,r3,r2
811372c4:	1001703a 	wrctl	status,r2
  
  return context;
811372c8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
811372cc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811372d0:	e0bffc17 	ldw	r2,-16(fp)
811372d4:	10800817 	ldw	r2,32(r2)
811372d8:	10c00054 	ori	r3,r2,1
811372dc:	e0bffc17 	ldw	r2,-16(fp)
811372e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811372e4:	e0bffc17 	ldw	r2,-16(fp)
811372e8:	10800017 	ldw	r2,0(r2)
811372ec:	10800104 	addi	r2,r2,4
811372f0:	1007883a 	mov	r3,r2
811372f4:	e0bffc17 	ldw	r2,-16(fp)
811372f8:	10800817 	ldw	r2,32(r2)
811372fc:	18800035 	stwio	r2,0(r3)
81137300:	e0bff617 	ldw	r2,-40(fp)
81137304:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137308:	e0bff517 	ldw	r2,-44(fp)
8113730c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81137310:	e0fff017 	ldw	r3,-64(fp)
81137314:	e0bffd17 	ldw	r2,-12(fp)
81137318:	18800426 	beq	r3,r2,8113732c <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
8113731c:	e0fff017 	ldw	r3,-64(fp)
81137320:	e0bffd17 	ldw	r2,-12(fp)
81137324:	1885c83a 	sub	r2,r3,r2
81137328:	00000606 	br	81137344 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
8113732c:	e0bfff17 	ldw	r2,-4(fp)
81137330:	1090000c 	andi	r2,r2,16384
81137334:	10000226 	beq	r2,zero,81137340 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81137338:	00bffd44 	movi	r2,-11
8113733c:	00000106 	br	81137344 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81137340:	00bffec4 	movi	r2,-5
}
81137344:	e037883a 	mov	sp,fp
81137348:	dfc00117 	ldw	ra,4(sp)
8113734c:	df000017 	ldw	fp,0(sp)
81137350:	dec00204 	addi	sp,sp,8
81137354:	f800283a 	ret

81137358 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81137358:	deffed04 	addi	sp,sp,-76
8113735c:	de00012e 	bgeu	sp,et,81137364 <altera_avalon_jtag_uart_write+0xc>
81137360:	003b68fa 	trap	3
81137364:	dfc01215 	stw	ra,72(sp)
81137368:	df001115 	stw	fp,68(sp)
8113736c:	df001104 	addi	fp,sp,68
81137370:	e13ffc15 	stw	r4,-16(fp)
81137374:	e17ffd15 	stw	r5,-12(fp)
81137378:	e1bffe15 	stw	r6,-8(fp)
8113737c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81137380:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81137384:	e0bffd17 	ldw	r2,-12(fp)
81137388:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
8113738c:	e0bffc17 	ldw	r2,-16(fp)
81137390:	10800b17 	ldw	r2,44(r2)
81137394:	e0bff815 	stw	r2,-32(fp)
81137398:	e03ff90d 	sth	zero,-28(fp)
8113739c:	e0bff90b 	ldhu	r2,-28(fp)
811373a0:	e0fffb44 	addi	r3,fp,-19
811373a4:	180d883a 	mov	r6,r3
811373a8:	100b883a 	mov	r5,r2
811373ac:	e13ff817 	ldw	r4,-32(fp)
811373b0:	112ee780 	call	8112ee78 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811373b4:	00003706 	br	81137494 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
811373b8:	e0bffc17 	ldw	r2,-16(fp)
811373bc:	10800f17 	ldw	r2,60(r2)
811373c0:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
811373c4:	e0bffc17 	ldw	r2,-16(fp)
811373c8:	10801017 	ldw	r2,64(r2)
811373cc:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
811373d0:	e0fff417 	ldw	r3,-48(fp)
811373d4:	e0bff017 	ldw	r2,-64(fp)
811373d8:	1880062e 	bgeu	r3,r2,811373f4 <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
811373dc:	e0fff017 	ldw	r3,-64(fp)
811373e0:	e0bff417 	ldw	r2,-48(fp)
811373e4:	1885c83a 	sub	r2,r3,r2
811373e8:	10bfffc4 	addi	r2,r2,-1
811373ec:	e0bff115 	stw	r2,-60(fp)
811373f0:	00000b06 	br	81137420 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
811373f4:	e0bff017 	ldw	r2,-64(fp)
811373f8:	10000526 	beq	r2,zero,81137410 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
811373fc:	00c20004 	movi	r3,2048
81137400:	e0bff417 	ldw	r2,-48(fp)
81137404:	1885c83a 	sub	r2,r3,r2
81137408:	e0bff115 	stw	r2,-60(fp)
8113740c:	00000406 	br	81137420 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81137410:	00c1ffc4 	movi	r3,2047
81137414:	e0bff417 	ldw	r2,-48(fp)
81137418:	1885c83a 	sub	r2,r3,r2
8113741c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81137420:	e0bff117 	ldw	r2,-60(fp)
81137424:	10001e26 	beq	r2,zero,811374a0 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
81137428:	e0fffe17 	ldw	r3,-8(fp)
8113742c:	e0bff117 	ldw	r2,-60(fp)
81137430:	1880022e 	bgeu	r3,r2,8113743c <altera_avalon_jtag_uart_write+0xe4>
        n = count;
81137434:	e0bffe17 	ldw	r2,-8(fp)
81137438:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8113743c:	e0bffc17 	ldw	r2,-16(fp)
81137440:	10c21104 	addi	r3,r2,2116
81137444:	e0bff417 	ldw	r2,-48(fp)
81137448:	1885883a 	add	r2,r3,r2
8113744c:	e1bff117 	ldw	r6,-60(fp)
81137450:	e17ffd17 	ldw	r5,-12(fp)
81137454:	1009883a 	mov	r4,r2
81137458:	1112b340 	call	81112b34 <memcpy>
      ptr   += n;
8113745c:	e0fffd17 	ldw	r3,-12(fp)
81137460:	e0bff117 	ldw	r2,-60(fp)
81137464:	1885883a 	add	r2,r3,r2
81137468:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8113746c:	e0fffe17 	ldw	r3,-8(fp)
81137470:	e0bff117 	ldw	r2,-60(fp)
81137474:	1885c83a 	sub	r2,r3,r2
81137478:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8113747c:	e0fff417 	ldw	r3,-48(fp)
81137480:	e0bff117 	ldw	r2,-60(fp)
81137484:	1885883a 	add	r2,r3,r2
81137488:	10c1ffcc 	andi	r3,r2,2047
8113748c:	e0bffc17 	ldw	r2,-16(fp)
81137490:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81137494:	e0bffe17 	ldw	r2,-8(fp)
81137498:	00bfc716 	blt	zero,r2,811373b8 <__reset+0xfb1173b8>
8113749c:	00000106 	br	811374a4 <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
811374a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811374a4:	0005303a 	rdctl	r2,status
811374a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811374ac:	e0fff717 	ldw	r3,-36(fp)
811374b0:	00bfff84 	movi	r2,-2
811374b4:	1884703a 	and	r2,r3,r2
811374b8:	1001703a 	wrctl	status,r2
  
  return context;
811374bc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
811374c0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811374c4:	e0bffc17 	ldw	r2,-16(fp)
811374c8:	10800817 	ldw	r2,32(r2)
811374cc:	10c00094 	ori	r3,r2,2
811374d0:	e0bffc17 	ldw	r2,-16(fp)
811374d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811374d8:	e0bffc17 	ldw	r2,-16(fp)
811374dc:	10800017 	ldw	r2,0(r2)
811374e0:	10800104 	addi	r2,r2,4
811374e4:	1007883a 	mov	r3,r2
811374e8:	e0bffc17 	ldw	r2,-16(fp)
811374ec:	10800817 	ldw	r2,32(r2)
811374f0:	18800035 	stwio	r2,0(r3)
811374f4:	e0bff617 	ldw	r2,-40(fp)
811374f8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811374fc:	e0bff317 	ldw	r2,-52(fp)
81137500:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81137504:	e0bffe17 	ldw	r2,-8(fp)
81137508:	00802a0e 	bge	zero,r2,811375b4 <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
8113750c:	e0bfff17 	ldw	r2,-4(fp)
81137510:	1090000c 	andi	r2,r2,16384
81137514:	10002a1e 	bne	r2,zero,811375c0 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
81137518:	d0a07403 	ldbu	r2,-32304(gp)
8113751c:	10803fcc 	andi	r2,r2,255
81137520:	10800058 	cmpnei	r2,r2,1
81137524:	1000161e 	bne	r2,zero,81137580 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
81137528:	e0bffc17 	ldw	r2,-16(fp)
8113752c:	10800c17 	ldw	r2,48(r2)
81137530:	e0bff515 	stw	r2,-44(fp)
81137534:	00800184 	movi	r2,6
81137538:	e0bff98d 	sth	r2,-26(fp)
8113753c:	00bfe0c4 	movi	r2,-125
81137540:	e0bffa05 	stb	r2,-24(fp)
81137544:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81137548:	d0a07403 	ldbu	r2,-32304(gp)
8113754c:	10803fcc 	andi	r2,r2,255
81137550:	10001526 	beq	r2,zero,811375a8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81137554:	e0fff98b 	ldhu	r3,-26(fp)
81137558:	e13ffa03 	ldbu	r4,-24(fp)
8113755c:	e17ffa8b 	ldhu	r5,-22(fp)
81137560:	e0bffb04 	addi	r2,fp,-20
81137564:	d8800015 	stw	r2,0(sp)
81137568:	280f883a 	mov	r7,r5
8113756c:	200d883a 	mov	r6,r4
81137570:	180b883a 	mov	r5,r3
81137574:	e13ff517 	ldw	r4,-44(fp)
81137578:	112b1d80 	call	8112b1d8 <OSFlagPend>
8113757c:	00000a06 	br	811375a8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81137580:	0001883a 	nop
81137584:	e0bffc17 	ldw	r2,-16(fp)
81137588:	10c01017 	ldw	r3,64(r2)
8113758c:	e0bff017 	ldw	r2,-64(fp)
81137590:	1880051e 	bne	r3,r2,811375a8 <altera_avalon_jtag_uart_write+0x250>
81137594:	e0bffc17 	ldw	r2,-16(fp)
81137598:	10c00917 	ldw	r3,36(r2)
8113759c:	e0bffc17 	ldw	r2,-16(fp)
811375a0:	10800117 	ldw	r2,4(r2)
811375a4:	18bff736 	bltu	r3,r2,81137584 <__reset+0xfb117584>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
811375a8:	e0bffc17 	ldw	r2,-16(fp)
811375ac:	10800917 	ldw	r2,36(r2)
811375b0:	1000051e 	bne	r2,zero,811375c8 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
811375b4:	e0bffe17 	ldw	r2,-8(fp)
811375b8:	00bfb616 	blt	zero,r2,81137494 <__reset+0xfb117494>
811375bc:	00000306 	br	811375cc <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
811375c0:	0001883a 	nop
811375c4:	00000106 	br	811375cc <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
811375c8:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
811375cc:	e0bffc17 	ldw	r2,-16(fp)
811375d0:	10800b17 	ldw	r2,44(r2)
811375d4:	1009883a 	mov	r4,r2
811375d8:	112f2000 	call	8112f200 <OSSemPost>

  if (ptr != start)
811375dc:	e0fffd17 	ldw	r3,-12(fp)
811375e0:	e0bff217 	ldw	r2,-56(fp)
811375e4:	18800426 	beq	r3,r2,811375f8 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
811375e8:	e0fffd17 	ldw	r3,-12(fp)
811375ec:	e0bff217 	ldw	r2,-56(fp)
811375f0:	1885c83a 	sub	r2,r3,r2
811375f4:	00000606 	br	81137610 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
811375f8:	e0bfff17 	ldw	r2,-4(fp)
811375fc:	1090000c 	andi	r2,r2,16384
81137600:	10000226 	beq	r2,zero,8113760c <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
81137604:	00bffd44 	movi	r2,-11
81137608:	00000106 	br	81137610 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8113760c:	00bffec4 	movi	r2,-5
}
81137610:	e037883a 	mov	sp,fp
81137614:	dfc00117 	ldw	ra,4(sp)
81137618:	df000017 	ldw	fp,0(sp)
8113761c:	dec00204 	addi	sp,sp,8
81137620:	f800283a 	ret

81137624 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81137624:	defffa04 	addi	sp,sp,-24
81137628:	de00012e 	bgeu	sp,et,81137630 <alt_avalon_timer_sc_irq+0xc>
8113762c:	003b68fa 	trap	3
81137630:	dfc00515 	stw	ra,20(sp)
81137634:	df000415 	stw	fp,16(sp)
81137638:	df000404 	addi	fp,sp,16
8113763c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81137640:	0007883a 	mov	r3,zero
81137644:	e0bfff17 	ldw	r2,-4(fp)
81137648:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8113764c:	e0bfff17 	ldw	r2,-4(fp)
81137650:	10800104 	addi	r2,r2,4
81137654:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137658:	0005303a 	rdctl	r2,status
8113765c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137660:	e0fffd17 	ldw	r3,-12(fp)
81137664:	00bfff84 	movi	r2,-2
81137668:	1884703a 	and	r2,r3,r2
8113766c:	1001703a 	wrctl	status,r2
  
  return context;
81137670:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81137674:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81137678:	1127eec0 	call	81127eec <alt_tick>
8113767c:	e0bffc17 	ldw	r2,-16(fp)
81137680:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137684:	e0bffe17 	ldw	r2,-8(fp)
81137688:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8113768c:	0001883a 	nop
81137690:	e037883a 	mov	sp,fp
81137694:	dfc00117 	ldw	ra,4(sp)
81137698:	df000017 	ldw	fp,0(sp)
8113769c:	dec00204 	addi	sp,sp,8
811376a0:	f800283a 	ret

811376a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
811376a4:	defff804 	addi	sp,sp,-32
811376a8:	de00012e 	bgeu	sp,et,811376b0 <alt_avalon_timer_sc_init+0xc>
811376ac:	003b68fa 	trap	3
811376b0:	dfc00715 	stw	ra,28(sp)
811376b4:	df000615 	stw	fp,24(sp)
811376b8:	df000604 	addi	fp,sp,24
811376bc:	e13ffc15 	stw	r4,-16(fp)
811376c0:	e17ffd15 	stw	r5,-12(fp)
811376c4:	e1bffe15 	stw	r6,-8(fp)
811376c8:	e1ffff15 	stw	r7,-4(fp)
811376cc:	e0bfff17 	ldw	r2,-4(fp)
811376d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
811376d4:	d0a06b17 	ldw	r2,-32340(gp)
811376d8:	1000021e 	bne	r2,zero,811376e4 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
811376dc:	e0bffb17 	ldw	r2,-20(fp)
811376e0:	d0a06b15 	stw	r2,-32340(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
811376e4:	e0bffc17 	ldw	r2,-16(fp)
811376e8:	10800104 	addi	r2,r2,4
811376ec:	00c001c4 	movi	r3,7
811376f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
811376f4:	d8000015 	stw	zero,0(sp)
811376f8:	e1fffc17 	ldw	r7,-16(fp)
811376fc:	01a044f4 	movhi	r6,33043
81137700:	319d8904 	addi	r6,r6,30244
81137704:	e17ffe17 	ldw	r5,-8(fp)
81137708:	e13ffd17 	ldw	r4,-12(fp)
8113770c:	113a9780 	call	8113a978 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81137710:	0001883a 	nop
81137714:	e037883a 	mov	sp,fp
81137718:	dfc00117 	ldw	ra,4(sp)
8113771c:	df000017 	ldw	fp,0(sp)
81137720:	dec00204 	addi	sp,sp,8
81137724:	f800283a 	ret

81137728 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81137728:	defffa04 	addi	sp,sp,-24
8113772c:	de00012e 	bgeu	sp,et,81137734 <altera_avalon_uart_read_fd+0xc>
81137730:	003b68fa 	trap	3
81137734:	dfc00515 	stw	ra,20(sp)
81137738:	df000415 	stw	fp,16(sp)
8113773c:	df000404 	addi	fp,sp,16
81137740:	e13ffd15 	stw	r4,-12(fp)
81137744:	e17ffe15 	stw	r5,-8(fp)
81137748:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113774c:	e0bffd17 	ldw	r2,-12(fp)
81137750:	10800017 	ldw	r2,0(r2)
81137754:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81137758:	e0bffc17 	ldw	r2,-16(fp)
8113775c:	10c00a04 	addi	r3,r2,40
81137760:	e0bffd17 	ldw	r2,-12(fp)
81137764:	10800217 	ldw	r2,8(r2)
81137768:	100f883a 	mov	r7,r2
8113776c:	e1bfff17 	ldw	r6,-4(fp)
81137770:	e17ffe17 	ldw	r5,-8(fp)
81137774:	1809883a 	mov	r4,r3
81137778:	1137de80 	call	81137de8 <altera_avalon_uart_read>
      fd->fd_flags);
}
8113777c:	e037883a 	mov	sp,fp
81137780:	dfc00117 	ldw	ra,4(sp)
81137784:	df000017 	ldw	fp,0(sp)
81137788:	dec00204 	addi	sp,sp,8
8113778c:	f800283a 	ret

81137790 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81137790:	defffa04 	addi	sp,sp,-24
81137794:	de00012e 	bgeu	sp,et,8113779c <altera_avalon_uart_write_fd+0xc>
81137798:	003b68fa 	trap	3
8113779c:	dfc00515 	stw	ra,20(sp)
811377a0:	df000415 	stw	fp,16(sp)
811377a4:	df000404 	addi	fp,sp,16
811377a8:	e13ffd15 	stw	r4,-12(fp)
811377ac:	e17ffe15 	stw	r5,-8(fp)
811377b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811377b4:	e0bffd17 	ldw	r2,-12(fp)
811377b8:	10800017 	ldw	r2,0(r2)
811377bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
811377c0:	e0bffc17 	ldw	r2,-16(fp)
811377c4:	10c00a04 	addi	r3,r2,40
811377c8:	e0bffd17 	ldw	r2,-12(fp)
811377cc:	10800217 	ldw	r2,8(r2)
811377d0:	100f883a 	mov	r7,r2
811377d4:	e1bfff17 	ldw	r6,-4(fp)
811377d8:	e17ffe17 	ldw	r5,-8(fp)
811377dc:	1809883a 	mov	r4,r3
811377e0:	113809c0 	call	8113809c <altera_avalon_uart_write>
      fd->fd_flags);
}
811377e4:	e037883a 	mov	sp,fp
811377e8:	dfc00117 	ldw	ra,4(sp)
811377ec:	df000017 	ldw	fp,0(sp)
811377f0:	dec00204 	addi	sp,sp,8
811377f4:	f800283a 	ret

811377f8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
811377f8:	defffc04 	addi	sp,sp,-16
811377fc:	de00012e 	bgeu	sp,et,81137804 <altera_avalon_uart_close_fd+0xc>
81137800:	003b68fa 	trap	3
81137804:	dfc00315 	stw	ra,12(sp)
81137808:	df000215 	stw	fp,8(sp)
8113780c:	df000204 	addi	fp,sp,8
81137810:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81137814:	e0bfff17 	ldw	r2,-4(fp)
81137818:	10800017 	ldw	r2,0(r2)
8113781c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81137820:	e0bffe17 	ldw	r2,-8(fp)
81137824:	10c00a04 	addi	r3,r2,40
81137828:	e0bfff17 	ldw	r2,-4(fp)
8113782c:	10800217 	ldw	r2,8(r2)
81137830:	100b883a 	mov	r5,r2
81137834:	1809883a 	mov	r4,r3
81137838:	1137d480 	call	81137d48 <altera_avalon_uart_close>
}
8113783c:	e037883a 	mov	sp,fp
81137840:	dfc00117 	ldw	ra,4(sp)
81137844:	df000017 	ldw	fp,0(sp)
81137848:	dec00204 	addi	sp,sp,8
8113784c:	f800283a 	ret

81137850 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81137850:	defff304 	addi	sp,sp,-52
81137854:	de00012e 	bgeu	sp,et,8113785c <altera_avalon_uart_init+0xc>
81137858:	003b68fa 	trap	3
8113785c:	dfc00c15 	stw	ra,48(sp)
81137860:	df000b15 	stw	fp,44(sp)
81137864:	df000b04 	addi	fp,sp,44
81137868:	e13ffd15 	stw	r4,-12(fp)
8113786c:	e17ffe15 	stw	r5,-8(fp)
81137870:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81137874:	e0bffd17 	ldw	r2,-12(fp)
81137878:	10800017 	ldw	r2,0(r2)
8113787c:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81137880:	e0bffd17 	ldw	r2,-12(fp)
81137884:	10800704 	addi	r2,r2,28
81137888:	e0bffa15 	stw	r2,-24(fp)
8113788c:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81137890:	e0bffb0b 	ldhu	r2,-20(fp)
81137894:	e0fffc84 	addi	r3,fp,-14
81137898:	180b883a 	mov	r5,r3
8113789c:	1009883a 	mov	r4,r2
811378a0:	112abf40 	call	8112abf4 <OSFlagCreate>
811378a4:	1007883a 	mov	r3,r2
811378a8:	e0bffa17 	ldw	r2,-24(fp)
811378ac:	10c00015 	stw	r3,0(r2)
  return err;
811378b0:	e0bffc83 	ldbu	r2,-14(fp)
811378b4:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
811378b8:	1000241e 	bne	r2,zero,8113794c <altera_avalon_uart_init+0xfc>
811378bc:	e0bffd17 	ldw	r2,-12(fp)
811378c0:	10800804 	addi	r2,r2,32
811378c4:	e0bff715 	stw	r2,-36(fp)
811378c8:	00800044 	movi	r2,1
811378cc:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
811378d0:	e0bffb8b 	ldhu	r2,-18(fp)
811378d4:	1009883a 	mov	r4,r2
811378d8:	112eb500 	call	8112eb50 <OSSemCreate>
811378dc:	1007883a 	mov	r3,r2
811378e0:	e0bff717 	ldw	r2,-36(fp)
811378e4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
811378e8:	e0bff717 	ldw	r2,-36(fp)
811378ec:	10800017 	ldw	r2,0(r2)
811378f0:	10000226 	beq	r2,zero,811378fc <altera_avalon_uart_init+0xac>
811378f4:	0005883a 	mov	r2,zero
811378f8:	00000106 	br	81137900 <altera_avalon_uart_init+0xb0>
811378fc:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81137900:	1000121e 	bne	r2,zero,8113794c <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81137904:	e0bffd17 	ldw	r2,-12(fp)
81137908:	10800904 	addi	r2,r2,36
8113790c:	e0bff815 	stw	r2,-32(fp)
81137910:	00800044 	movi	r2,1
81137914:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81137918:	e0bffc0b 	ldhu	r2,-16(fp)
8113791c:	1009883a 	mov	r4,r2
81137920:	112eb500 	call	8112eb50 <OSSemCreate>
81137924:	1007883a 	mov	r3,r2
81137928:	e0bff817 	ldw	r2,-32(fp)
8113792c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81137930:	e0bff817 	ldw	r2,-32(fp)
81137934:	10800017 	ldw	r2,0(r2)
81137938:	10000226 	beq	r2,zero,81137944 <altera_avalon_uart_init+0xf4>
8113793c:	0005883a 	mov	r2,zero
81137940:	00000106 	br	81137948 <altera_avalon_uart_init+0xf8>
81137944:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81137948:	10000226 	beq	r2,zero,81137954 <altera_avalon_uart_init+0x104>
8113794c:	00800044 	movi	r2,1
81137950:	00000106 	br	81137958 <altera_avalon_uart_init+0x108>
81137954:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81137958:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8113795c:	e0bff917 	ldw	r2,-28(fp)
81137960:	10000f1e 	bne	r2,zero,811379a0 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81137964:	e0bffd17 	ldw	r2,-12(fp)
81137968:	00c32004 	movi	r3,3200
8113796c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81137970:	e0bff617 	ldw	r2,-40(fp)
81137974:	10800304 	addi	r2,r2,12
81137978:	e0fffd17 	ldw	r3,-12(fp)
8113797c:	18c00117 	ldw	r3,4(r3)
81137980:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81137984:	d8000015 	stw	zero,0(sp)
81137988:	e1fffd17 	ldw	r7,-12(fp)
8113798c:	01a044f4 	movhi	r6,33043
81137990:	319e6e04 	addi	r6,r6,31160
81137994:	e17fff17 	ldw	r5,-4(fp)
81137998:	e13ffe17 	ldw	r4,-8(fp)
8113799c:	113a9780 	call	8113a978 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
811379a0:	0001883a 	nop
811379a4:	e037883a 	mov	sp,fp
811379a8:	dfc00117 	ldw	ra,4(sp)
811379ac:	df000017 	ldw	fp,0(sp)
811379b0:	dec00204 	addi	sp,sp,8
811379b4:	f800283a 	ret

811379b8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
811379b8:	defffa04 	addi	sp,sp,-24
811379bc:	de00012e 	bgeu	sp,et,811379c4 <altera_avalon_uart_irq+0xc>
811379c0:	003b68fa 	trap	3
811379c4:	dfc00515 	stw	ra,20(sp)
811379c8:	df000415 	stw	fp,16(sp)
811379cc:	df000404 	addi	fp,sp,16
811379d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
811379d4:	e0bfff17 	ldw	r2,-4(fp)
811379d8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
811379dc:	e0bffc17 	ldw	r2,-16(fp)
811379e0:	10800017 	ldw	r2,0(r2)
811379e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
811379e8:	e0bffd17 	ldw	r2,-12(fp)
811379ec:	10800204 	addi	r2,r2,8
811379f0:	10800037 	ldwio	r2,0(r2)
811379f4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
811379f8:	e0bffd17 	ldw	r2,-12(fp)
811379fc:	10800204 	addi	r2,r2,8
81137a00:	0007883a 	mov	r3,zero
81137a04:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81137a08:	e0bffd17 	ldw	r2,-12(fp)
81137a0c:	10800204 	addi	r2,r2,8
81137a10:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81137a14:	e0bffe17 	ldw	r2,-8(fp)
81137a18:	1080200c 	andi	r2,r2,128
81137a1c:	10000326 	beq	r2,zero,81137a2c <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
81137a20:	e17ffe17 	ldw	r5,-8(fp)
81137a24:	e13ffc17 	ldw	r4,-16(fp)
81137a28:	1137a5c0 	call	81137a5c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81137a2c:	e0bffe17 	ldw	r2,-8(fp)
81137a30:	1081100c 	andi	r2,r2,1088
81137a34:	10000326 	beq	r2,zero,81137a44 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81137a38:	e17ffe17 	ldw	r5,-8(fp)
81137a3c:	e13ffc17 	ldw	r4,-16(fp)
81137a40:	1137b9c0 	call	81137b9c <altera_avalon_uart_txirq>
  }
  

}
81137a44:	0001883a 	nop
81137a48:	e037883a 	mov	sp,fp
81137a4c:	dfc00117 	ldw	ra,4(sp)
81137a50:	df000017 	ldw	fp,0(sp)
81137a54:	dec00204 	addi	sp,sp,8
81137a58:	f800283a 	ret

81137a5c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81137a5c:	defff904 	addi	sp,sp,-28
81137a60:	de00012e 	bgeu	sp,et,81137a68 <altera_avalon_uart_rxirq+0xc>
81137a64:	003b68fa 	trap	3
81137a68:	dfc00615 	stw	ra,24(sp)
81137a6c:	df000515 	stw	fp,20(sp)
81137a70:	df000504 	addi	fp,sp,20
81137a74:	e13ffe15 	stw	r4,-8(fp)
81137a78:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81137a7c:	e0bfff17 	ldw	r2,-4(fp)
81137a80:	108000cc 	andi	r2,r2,3
81137a84:	10003f1e 	bne	r2,zero,81137b84 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81137a88:	e0bffe17 	ldw	r2,-8(fp)
81137a8c:	10c00317 	ldw	r3,12(r2)
81137a90:	e0bffe17 	ldw	r2,-8(fp)
81137a94:	10800217 	ldw	r2,8(r2)
81137a98:	1880121e 	bne	r3,r2,81137ae4 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
81137a9c:	e0bffe17 	ldw	r2,-8(fp)
81137aa0:	10800717 	ldw	r2,28(r2)
81137aa4:	e0bffc15 	stw	r2,-16(fp)
81137aa8:	00800044 	movi	r2,1
81137aac:	e0bffd0d 	sth	r2,-12(fp)
81137ab0:	00800044 	movi	r2,1
81137ab4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137ab8:	d0a07403 	ldbu	r2,-32304(gp)
81137abc:	10803fcc 	andi	r2,r2,255
81137ac0:	10000826 	beq	r2,zero,81137ae4 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
81137ac4:	e0bffd0b 	ldhu	r2,-12(fp)
81137ac8:	e0fffd83 	ldbu	r3,-10(fp)
81137acc:	e13ffdc4 	addi	r4,fp,-9
81137ad0:	200f883a 	mov	r7,r4
81137ad4:	180d883a 	mov	r6,r3
81137ad8:	100b883a 	mov	r5,r2
81137adc:	e13ffc17 	ldw	r4,-16(fp)
81137ae0:	112b8000 	call	8112b800 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81137ae4:	e0bffe17 	ldw	r2,-8(fp)
81137ae8:	10800317 	ldw	r2,12(r2)
81137aec:	10800044 	addi	r2,r2,1
81137af0:	10800fcc 	andi	r2,r2,63
81137af4:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81137af8:	e0bffe17 	ldw	r2,-8(fp)
81137afc:	10800317 	ldw	r2,12(r2)
81137b00:	e0fffe17 	ldw	r3,-8(fp)
81137b04:	18c00017 	ldw	r3,0(r3)
81137b08:	18c00037 	ldwio	r3,0(r3)
81137b0c:	1809883a 	mov	r4,r3
81137b10:	e0fffe17 	ldw	r3,-8(fp)
81137b14:	1885883a 	add	r2,r3,r2
81137b18:	10800a04 	addi	r2,r2,40
81137b1c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81137b20:	e0bffe17 	ldw	r2,-8(fp)
81137b24:	e0fffb17 	ldw	r3,-20(fp)
81137b28:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81137b2c:	e0bffe17 	ldw	r2,-8(fp)
81137b30:	10800317 	ldw	r2,12(r2)
81137b34:	10800044 	addi	r2,r2,1
81137b38:	10800fcc 	andi	r2,r2,63
81137b3c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81137b40:	e0bffe17 	ldw	r2,-8(fp)
81137b44:	10c00217 	ldw	r3,8(r2)
81137b48:	e0bffb17 	ldw	r2,-20(fp)
81137b4c:	18800e1e 	bne	r3,r2,81137b88 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137b50:	e0bffe17 	ldw	r2,-8(fp)
81137b54:	10c00117 	ldw	r3,4(r2)
81137b58:	00bfdfc4 	movi	r2,-129
81137b5c:	1886703a 	and	r3,r3,r2
81137b60:	e0bffe17 	ldw	r2,-8(fp)
81137b64:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81137b68:	e0bffe17 	ldw	r2,-8(fp)
81137b6c:	10800017 	ldw	r2,0(r2)
81137b70:	10800304 	addi	r2,r2,12
81137b74:	e0fffe17 	ldw	r3,-8(fp)
81137b78:	18c00117 	ldw	r3,4(r3)
81137b7c:	10c00035 	stwio	r3,0(r2)
81137b80:	00000106 	br	81137b88 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81137b84:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81137b88:	e037883a 	mov	sp,fp
81137b8c:	dfc00117 	ldw	ra,4(sp)
81137b90:	df000017 	ldw	fp,0(sp)
81137b94:	dec00204 	addi	sp,sp,8
81137b98:	f800283a 	ret

81137b9c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81137b9c:	defffa04 	addi	sp,sp,-24
81137ba0:	de00012e 	bgeu	sp,et,81137ba8 <altera_avalon_uart_txirq+0xc>
81137ba4:	003b68fa 	trap	3
81137ba8:	dfc00515 	stw	ra,20(sp)
81137bac:	df000415 	stw	fp,16(sp)
81137bb0:	df000404 	addi	fp,sp,16
81137bb4:	e13ffe15 	stw	r4,-8(fp)
81137bb8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81137bbc:	e0bffe17 	ldw	r2,-8(fp)
81137bc0:	10c00417 	ldw	r3,16(r2)
81137bc4:	e0bffe17 	ldw	r2,-8(fp)
81137bc8:	10800517 	ldw	r2,20(r2)
81137bcc:	18804726 	beq	r3,r2,81137cec <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81137bd0:	e0bffe17 	ldw	r2,-8(fp)
81137bd4:	10800617 	ldw	r2,24(r2)
81137bd8:	1080008c 	andi	r2,r2,2
81137bdc:	10000326 	beq	r2,zero,81137bec <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81137be0:	e0bfff17 	ldw	r2,-4(fp)
81137be4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81137be8:	10003226 	beq	r2,zero,81137cb4 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81137bec:	e0bffe17 	ldw	r2,-8(fp)
81137bf0:	10c00417 	ldw	r3,16(r2)
81137bf4:	e0bffe17 	ldw	r2,-8(fp)
81137bf8:	10800517 	ldw	r2,20(r2)
81137bfc:	10800044 	addi	r2,r2,1
81137c00:	10800fcc 	andi	r2,r2,63
81137c04:	1880121e 	bne	r3,r2,81137c50 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81137c08:	e0bffe17 	ldw	r2,-8(fp)
81137c0c:	10800717 	ldw	r2,28(r2)
81137c10:	e0bffc15 	stw	r2,-16(fp)
81137c14:	00800084 	movi	r2,2
81137c18:	e0bffd0d 	sth	r2,-12(fp)
81137c1c:	00800044 	movi	r2,1
81137c20:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137c24:	d0a07403 	ldbu	r2,-32304(gp)
81137c28:	10803fcc 	andi	r2,r2,255
81137c2c:	10000826 	beq	r2,zero,81137c50 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
81137c30:	e0bffd0b 	ldhu	r2,-12(fp)
81137c34:	e0fffd83 	ldbu	r3,-10(fp)
81137c38:	e13ffdc4 	addi	r4,fp,-9
81137c3c:	200f883a 	mov	r7,r4
81137c40:	180d883a 	mov	r6,r3
81137c44:	100b883a 	mov	r5,r2
81137c48:	e13ffc17 	ldw	r4,-16(fp)
81137c4c:	112b8000 	call	8112b800 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81137c50:	e0bffe17 	ldw	r2,-8(fp)
81137c54:	10800017 	ldw	r2,0(r2)
81137c58:	10800104 	addi	r2,r2,4
81137c5c:	e0fffe17 	ldw	r3,-8(fp)
81137c60:	18c00417 	ldw	r3,16(r3)
81137c64:	e13ffe17 	ldw	r4,-8(fp)
81137c68:	20c7883a 	add	r3,r4,r3
81137c6c:	18c01a04 	addi	r3,r3,104
81137c70:	18c00003 	ldbu	r3,0(r3)
81137c74:	18c03fcc 	andi	r3,r3,255
81137c78:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81137c7c:	e0bffe17 	ldw	r2,-8(fp)
81137c80:	10800417 	ldw	r2,16(r2)
81137c84:	10800044 	addi	r2,r2,1
81137c88:	e0fffe17 	ldw	r3,-8(fp)
81137c8c:	18800415 	stw	r2,16(r3)
81137c90:	10c00fcc 	andi	r3,r2,63
81137c94:	e0bffe17 	ldw	r2,-8(fp)
81137c98:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81137c9c:	e0bffe17 	ldw	r2,-8(fp)
81137ca0:	10800117 	ldw	r2,4(r2)
81137ca4:	10c01014 	ori	r3,r2,64
81137ca8:	e0bffe17 	ldw	r2,-8(fp)
81137cac:	10c00115 	stw	r3,4(r2)
81137cb0:	00000e06 	br	81137cec <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81137cb4:	e0bffe17 	ldw	r2,-8(fp)
81137cb8:	10800017 	ldw	r2,0(r2)
81137cbc:	10800204 	addi	r2,r2,8
81137cc0:	10800037 	ldwio	r2,0(r2)
81137cc4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81137cc8:	e0bfff17 	ldw	r2,-4(fp)
81137ccc:	1082000c 	andi	r2,r2,2048
81137cd0:	1000061e 	bne	r2,zero,81137cec <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81137cd4:	e0bffe17 	ldw	r2,-8(fp)
81137cd8:	10c00117 	ldw	r3,4(r2)
81137cdc:	00bfefc4 	movi	r2,-65
81137ce0:	1886703a 	and	r3,r3,r2
81137ce4:	e0bffe17 	ldw	r2,-8(fp)
81137ce8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81137cec:	e0bffe17 	ldw	r2,-8(fp)
81137cf0:	10c00417 	ldw	r3,16(r2)
81137cf4:	e0bffe17 	ldw	r2,-8(fp)
81137cf8:	10800517 	ldw	r2,20(r2)
81137cfc:	1880061e 	bne	r3,r2,81137d18 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81137d00:	e0bffe17 	ldw	r2,-8(fp)
81137d04:	10c00117 	ldw	r3,4(r2)
81137d08:	00beefc4 	movi	r2,-1089
81137d0c:	1886703a 	and	r3,r3,r2
81137d10:	e0bffe17 	ldw	r2,-8(fp)
81137d14:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137d18:	e0bffe17 	ldw	r2,-8(fp)
81137d1c:	10800017 	ldw	r2,0(r2)
81137d20:	10800304 	addi	r2,r2,12
81137d24:	e0fffe17 	ldw	r3,-8(fp)
81137d28:	18c00117 	ldw	r3,4(r3)
81137d2c:	10c00035 	stwio	r3,0(r2)
}
81137d30:	0001883a 	nop
81137d34:	e037883a 	mov	sp,fp
81137d38:	dfc00117 	ldw	ra,4(sp)
81137d3c:	df000017 	ldw	fp,0(sp)
81137d40:	dec00204 	addi	sp,sp,8
81137d44:	f800283a 	ret

81137d48 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81137d48:	defffd04 	addi	sp,sp,-12
81137d4c:	de00012e 	bgeu	sp,et,81137d54 <altera_avalon_uart_close+0xc>
81137d50:	003b68fa 	trap	3
81137d54:	df000215 	stw	fp,8(sp)
81137d58:	df000204 	addi	fp,sp,8
81137d5c:	e13ffe15 	stw	r4,-8(fp)
81137d60:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81137d64:	00000506 	br	81137d7c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81137d68:	e0bfff17 	ldw	r2,-4(fp)
81137d6c:	1090000c 	andi	r2,r2,16384
81137d70:	10000226 	beq	r2,zero,81137d7c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81137d74:	00bffd44 	movi	r2,-11
81137d78:	00000606 	br	81137d94 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81137d7c:	e0bffe17 	ldw	r2,-8(fp)
81137d80:	10c00417 	ldw	r3,16(r2)
81137d84:	e0bffe17 	ldw	r2,-8(fp)
81137d88:	10800517 	ldw	r2,20(r2)
81137d8c:	18bff61e 	bne	r3,r2,81137d68 <__reset+0xfb117d68>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81137d90:	0005883a 	mov	r2,zero
}
81137d94:	e037883a 	mov	sp,fp
81137d98:	df000017 	ldw	fp,0(sp)
81137d9c:	dec00104 	addi	sp,sp,4
81137da0:	f800283a 	ret

81137da4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81137da4:	defffe04 	addi	sp,sp,-8
81137da8:	de00012e 	bgeu	sp,et,81137db0 <alt_get_errno+0xc>
81137dac:	003b68fa 	trap	3
81137db0:	dfc00115 	stw	ra,4(sp)
81137db4:	df000015 	stw	fp,0(sp)
81137db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81137dbc:	d0a01017 	ldw	r2,-32704(gp)
81137dc0:	10000326 	beq	r2,zero,81137dd0 <alt_get_errno+0x2c>
81137dc4:	d0a01017 	ldw	r2,-32704(gp)
81137dc8:	103ee83a 	callr	r2
81137dcc:	00000106 	br	81137dd4 <alt_get_errno+0x30>
81137dd0:	d0a05f04 	addi	r2,gp,-32388
}
81137dd4:	e037883a 	mov	sp,fp
81137dd8:	dfc00117 	ldw	ra,4(sp)
81137ddc:	df000017 	ldw	fp,0(sp)
81137de0:	dec00204 	addi	sp,sp,8
81137de4:	f800283a 	ret

81137de8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81137de8:	deffec04 	addi	sp,sp,-80
81137dec:	de00012e 	bgeu	sp,et,81137df4 <altera_avalon_uart_read+0xc>
81137df0:	003b68fa 	trap	3
81137df4:	dfc01315 	stw	ra,76(sp)
81137df8:	df001215 	stw	fp,72(sp)
81137dfc:	df001204 	addi	fp,sp,72
81137e00:	e13ffc15 	stw	r4,-16(fp)
81137e04:	e17ffd15 	stw	r5,-12(fp)
81137e08:	e1bffe15 	stw	r6,-8(fp)
81137e0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81137e10:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
81137e14:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81137e18:	e0bfff17 	ldw	r2,-4(fp)
81137e1c:	1090000c 	andi	r2,r2,16384
81137e20:	1005003a 	cmpeq	r2,r2,zero
81137e24:	10803fcc 	andi	r2,r2,255
81137e28:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81137e2c:	e0bffc17 	ldw	r2,-16(fp)
81137e30:	10800817 	ldw	r2,32(r2)
81137e34:	e0bff815 	stw	r2,-32(fp)
81137e38:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81137e3c:	e0bff90b 	ldhu	r2,-28(fp)
81137e40:	e0fffb44 	addi	r3,fp,-19
81137e44:	180d883a 	mov	r6,r3
81137e48:	100b883a 	mov	r5,r2
81137e4c:	e13ff817 	ldw	r4,-32(fp)
81137e50:	112ee780 	call	8112ee78 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81137e54:	00001306 	br	81137ea4 <altera_avalon_uart_read+0xbc>
    {
      count++;
81137e58:	e0bff017 	ldw	r2,-64(fp)
81137e5c:	10800044 	addi	r2,r2,1
81137e60:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81137e64:	e0bffd17 	ldw	r2,-12(fp)
81137e68:	10c00044 	addi	r3,r2,1
81137e6c:	e0fffd15 	stw	r3,-12(fp)
81137e70:	e0fffc17 	ldw	r3,-16(fp)
81137e74:	18c00217 	ldw	r3,8(r3)
81137e78:	e13ffc17 	ldw	r4,-16(fp)
81137e7c:	20c7883a 	add	r3,r4,r3
81137e80:	18c00a04 	addi	r3,r3,40
81137e84:	18c00003 	ldbu	r3,0(r3)
81137e88:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
81137e8c:	e0bffc17 	ldw	r2,-16(fp)
81137e90:	10800217 	ldw	r2,8(r2)
81137e94:	10800044 	addi	r2,r2,1
81137e98:	10c00fcc 	andi	r3,r2,63
81137e9c:	e0bffc17 	ldw	r2,-16(fp)
81137ea0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81137ea4:	e0fff017 	ldw	r3,-64(fp)
81137ea8:	e0bffe17 	ldw	r2,-8(fp)
81137eac:	1880050e 	bge	r3,r2,81137ec4 <altera_avalon_uart_read+0xdc>
81137eb0:	e0bffc17 	ldw	r2,-16(fp)
81137eb4:	10c00217 	ldw	r3,8(r2)
81137eb8:	e0bffc17 	ldw	r2,-16(fp)
81137ebc:	10800317 	ldw	r2,12(r2)
81137ec0:	18bfe51e 	bne	r3,r2,81137e58 <__reset+0xfb117e58>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81137ec4:	e0bff017 	ldw	r2,-64(fp)
81137ec8:	10003a1e 	bne	r2,zero,81137fb4 <altera_avalon_uart_read+0x1cc>
81137ecc:	e0bffc17 	ldw	r2,-16(fp)
81137ed0:	10c00217 	ldw	r3,8(r2)
81137ed4:	e0bffc17 	ldw	r2,-16(fp)
81137ed8:	10800317 	ldw	r2,12(r2)
81137edc:	1880351e 	bne	r3,r2,81137fb4 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
81137ee0:	e0bff117 	ldw	r2,-60(fp)
81137ee4:	1000071e 	bne	r2,zero,81137f04 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81137ee8:	1137da40 	call	81137da4 <alt_get_errno>
81137eec:	1007883a 	mov	r3,r2
81137ef0:	008002c4 	movi	r2,11
81137ef4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81137ef8:	00800044 	movi	r2,1
81137efc:	e0bfef05 	stb	r2,-68(fp)
        break;
81137f00:	00003006 	br	81137fc4 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137f04:	0005303a 	rdctl	r2,status
81137f08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137f0c:	e0fff517 	ldw	r3,-44(fp)
81137f10:	00bfff84 	movi	r2,-2
81137f14:	1884703a 	and	r2,r3,r2
81137f18:	1001703a 	wrctl	status,r2
  
  return context;
81137f1c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81137f20:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137f24:	e0bffc17 	ldw	r2,-16(fp)
81137f28:	10800117 	ldw	r2,4(r2)
81137f2c:	10c02014 	ori	r3,r2,128
81137f30:	e0bffc17 	ldw	r2,-16(fp)
81137f34:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137f38:	e0bffc17 	ldw	r2,-16(fp)
81137f3c:	10800017 	ldw	r2,0(r2)
81137f40:	10800304 	addi	r2,r2,12
81137f44:	e0fffc17 	ldw	r3,-16(fp)
81137f48:	18c00117 	ldw	r3,4(r3)
81137f4c:	10c00035 	stwio	r3,0(r2)
81137f50:	e0bff417 	ldw	r2,-48(fp)
81137f54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137f58:	e0bff617 	ldw	r2,-40(fp)
81137f5c:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81137f60:	e0bffc17 	ldw	r2,-16(fp)
81137f64:	10800717 	ldw	r2,28(r2)
81137f68:	e0bff215 	stw	r2,-56(fp)
81137f6c:	00800044 	movi	r2,1
81137f70:	e0bff98d 	sth	r2,-26(fp)
81137f74:	00bfe0c4 	movi	r2,-125
81137f78:	e0bffa05 	stb	r2,-24(fp)
81137f7c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81137f80:	d0a07403 	ldbu	r2,-32304(gp)
81137f84:	10803fcc 	andi	r2,r2,255
81137f88:	10000a26 	beq	r2,zero,81137fb4 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81137f8c:	e0fff98b 	ldhu	r3,-26(fp)
81137f90:	e13ffa03 	ldbu	r4,-24(fp)
81137f94:	e17ffa8b 	ldhu	r5,-22(fp)
81137f98:	e0bffb04 	addi	r2,fp,-20
81137f9c:	d8800015 	stw	r2,0(sp)
81137fa0:	280f883a 	mov	r7,r5
81137fa4:	200d883a 	mov	r6,r4
81137fa8:	180b883a 	mov	r5,r3
81137fac:	e13ff217 	ldw	r4,-56(fp)
81137fb0:	112b1d80 	call	8112b1d8 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81137fb4:	e0bff017 	ldw	r2,-64(fp)
81137fb8:	1000021e 	bne	r2,zero,81137fc4 <altera_avalon_uart_read+0x1dc>
81137fbc:	e0bffe17 	ldw	r2,-8(fp)
81137fc0:	103fb81e 	bne	r2,zero,81137ea4 <__reset+0xfb117ea4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81137fc4:	e0bffc17 	ldw	r2,-16(fp)
81137fc8:	10800817 	ldw	r2,32(r2)
81137fcc:	1009883a 	mov	r4,r2
81137fd0:	112f2000 	call	8112f200 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137fd4:	0005303a 	rdctl	r2,status
81137fd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137fdc:	e0fff717 	ldw	r3,-36(fp)
81137fe0:	00bfff84 	movi	r2,-2
81137fe4:	1884703a 	and	r2,r3,r2
81137fe8:	1001703a 	wrctl	status,r2
  
  return context;
81137fec:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81137ff0:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137ff4:	e0bffc17 	ldw	r2,-16(fp)
81137ff8:	10800117 	ldw	r2,4(r2)
81137ffc:	10c02014 	ori	r3,r2,128
81138000:	e0bffc17 	ldw	r2,-16(fp)
81138004:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81138008:	e0bffc17 	ldw	r2,-16(fp)
8113800c:	10800017 	ldw	r2,0(r2)
81138010:	10800304 	addi	r2,r2,12
81138014:	e0fffc17 	ldw	r3,-16(fp)
81138018:	18c00117 	ldw	r3,4(r3)
8113801c:	10c00035 	stwio	r3,0(r2)
81138020:	e0bff417 	ldw	r2,-48(fp)
81138024:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138028:	e0bff317 	ldw	r2,-52(fp)
8113802c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81138030:	e0bfef03 	ldbu	r2,-68(fp)
81138034:	10000226 	beq	r2,zero,81138040 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
81138038:	00bffd44 	movi	r2,-11
8113803c:	00000106 	br	81138044 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
81138040:	e0bff017 	ldw	r2,-64(fp)
  }
}
81138044:	e037883a 	mov	sp,fp
81138048:	dfc00117 	ldw	ra,4(sp)
8113804c:	df000017 	ldw	fp,0(sp)
81138050:	dec00204 	addi	sp,sp,8
81138054:	f800283a 	ret

81138058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81138058:	defffe04 	addi	sp,sp,-8
8113805c:	de00012e 	bgeu	sp,et,81138064 <alt_get_errno+0xc>
81138060:	003b68fa 	trap	3
81138064:	dfc00115 	stw	ra,4(sp)
81138068:	df000015 	stw	fp,0(sp)
8113806c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81138070:	d0a01017 	ldw	r2,-32704(gp)
81138074:	10000326 	beq	r2,zero,81138084 <alt_get_errno+0x2c>
81138078:	d0a01017 	ldw	r2,-32704(gp)
8113807c:	103ee83a 	callr	r2
81138080:	00000106 	br	81138088 <alt_get_errno+0x30>
81138084:	d0a05f04 	addi	r2,gp,-32388
}
81138088:	e037883a 	mov	sp,fp
8113808c:	dfc00117 	ldw	ra,4(sp)
81138090:	df000017 	ldw	fp,0(sp)
81138094:	dec00204 	addi	sp,sp,8
81138098:	f800283a 	ret

8113809c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8113809c:	deffec04 	addi	sp,sp,-80
811380a0:	de00012e 	bgeu	sp,et,811380a8 <altera_avalon_uart_write+0xc>
811380a4:	003b68fa 	trap	3
811380a8:	dfc01315 	stw	ra,76(sp)
811380ac:	df001215 	stw	fp,72(sp)
811380b0:	df001204 	addi	fp,sp,72
811380b4:	e13ffc15 	stw	r4,-16(fp)
811380b8:	e17ffd15 	stw	r5,-12(fp)
811380bc:	e1bffe15 	stw	r6,-8(fp)
811380c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
811380c4:	e0bffe17 	ldw	r2,-8(fp)
811380c8:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
811380cc:	e0bfff17 	ldw	r2,-4(fp)
811380d0:	1090000c 	andi	r2,r2,16384
811380d4:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
811380d8:	e0bffc17 	ldw	r2,-16(fp)
811380dc:	10800917 	ldw	r2,36(r2)
811380e0:	e0bff815 	stw	r2,-32(fp)
811380e4:	e03ff90d 	sth	zero,-28(fp)
811380e8:	e0bff90b 	ldhu	r2,-28(fp)
811380ec:	e0fffb44 	addi	r3,fp,-19
811380f0:	180d883a 	mov	r6,r3
811380f4:	100b883a 	mov	r5,r2
811380f8:	e13ff817 	ldw	r4,-32(fp)
811380fc:	112ee780 	call	8112ee78 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81138100:	00005106 	br	81138248 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81138104:	e0bffc17 	ldw	r2,-16(fp)
81138108:	10800517 	ldw	r2,20(r2)
8113810c:	10800044 	addi	r2,r2,1
81138110:	10800fcc 	andi	r2,r2,63
81138114:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81138118:	e0bffc17 	ldw	r2,-16(fp)
8113811c:	10c00417 	ldw	r3,16(r2)
81138120:	e0bff217 	ldw	r2,-56(fp)
81138124:	1880371e 	bne	r3,r2,81138204 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
81138128:	e0bff017 	ldw	r2,-64(fp)
8113812c:	10000526 	beq	r2,zero,81138144 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81138130:	11380580 	call	81138058 <alt_get_errno>
81138134:	1007883a 	mov	r3,r2
81138138:	008002c4 	movi	r2,11
8113813c:	18800015 	stw	r2,0(r3)
        break;
81138140:	00004306 	br	81138250 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138144:	0005303a 	rdctl	r2,status
81138148:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113814c:	e0fff517 	ldw	r3,-44(fp)
81138150:	00bfff84 	movi	r2,-2
81138154:	1884703a 	and	r2,r3,r2
81138158:	1001703a 	wrctl	status,r2
  
  return context;
8113815c:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81138160:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81138164:	e0bffc17 	ldw	r2,-16(fp)
81138168:	10800117 	ldw	r2,4(r2)
8113816c:	10c11014 	ori	r3,r2,1088
81138170:	e0bffc17 	ldw	r2,-16(fp)
81138174:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81138178:	e0bffc17 	ldw	r2,-16(fp)
8113817c:	10800017 	ldw	r2,0(r2)
81138180:	10800304 	addi	r2,r2,12
81138184:	e0fffc17 	ldw	r3,-16(fp)
81138188:	18c00117 	ldw	r3,4(r3)
8113818c:	10c00035 	stwio	r3,0(r2)
81138190:	e0bff417 	ldw	r2,-48(fp)
81138194:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138198:	e0bff117 	ldw	r2,-60(fp)
8113819c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
811381a0:	e0bffc17 	ldw	r2,-16(fp)
811381a4:	10800717 	ldw	r2,28(r2)
811381a8:	e0bff315 	stw	r2,-52(fp)
811381ac:	00800084 	movi	r2,2
811381b0:	e0bff98d 	sth	r2,-26(fp)
811381b4:	00bfe0c4 	movi	r2,-125
811381b8:	e0bffa05 	stb	r2,-24(fp)
811381bc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811381c0:	d0a07403 	ldbu	r2,-32304(gp)
811381c4:	10803fcc 	andi	r2,r2,255
811381c8:	10000a26 	beq	r2,zero,811381f4 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811381cc:	e0fff98b 	ldhu	r3,-26(fp)
811381d0:	e13ffa03 	ldbu	r4,-24(fp)
811381d4:	e17ffa8b 	ldhu	r5,-22(fp)
811381d8:	e0bffb04 	addi	r2,fp,-20
811381dc:	d8800015 	stw	r2,0(sp)
811381e0:	280f883a 	mov	r7,r5
811381e4:	200d883a 	mov	r6,r4
811381e8:	180b883a 	mov	r5,r3
811381ec:	e13ff317 	ldw	r4,-52(fp)
811381f0:	112b1d80 	call	8112b1d8 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
811381f4:	e0bffc17 	ldw	r2,-16(fp)
811381f8:	10c00417 	ldw	r3,16(r2)
811381fc:	e0bff217 	ldw	r2,-56(fp)
81138200:	18bfe726 	beq	r3,r2,811381a0 <__reset+0xfb1181a0>
      }
    }

    count--;
81138204:	e0bfef17 	ldw	r2,-68(fp)
81138208:	10bfffc4 	addi	r2,r2,-1
8113820c:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81138210:	e0bffc17 	ldw	r2,-16(fp)
81138214:	10c00517 	ldw	r3,20(r2)
81138218:	e0bffd17 	ldw	r2,-12(fp)
8113821c:	11000044 	addi	r4,r2,1
81138220:	e13ffd15 	stw	r4,-12(fp)
81138224:	10800003 	ldbu	r2,0(r2)
81138228:	1009883a 	mov	r4,r2
8113822c:	e0bffc17 	ldw	r2,-16(fp)
81138230:	10c5883a 	add	r2,r2,r3
81138234:	10801a04 	addi	r2,r2,104
81138238:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8113823c:	e0bffc17 	ldw	r2,-16(fp)
81138240:	e0fff217 	ldw	r3,-56(fp)
81138244:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81138248:	e0bfef17 	ldw	r2,-68(fp)
8113824c:	103fad1e 	bne	r2,zero,81138104 <__reset+0xfb118104>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81138250:	e0bffc17 	ldw	r2,-16(fp)
81138254:	10800917 	ldw	r2,36(r2)
81138258:	1009883a 	mov	r4,r2
8113825c:	112f2000 	call	8112f200 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138260:	0005303a 	rdctl	r2,status
81138264:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138268:	e0fff717 	ldw	r3,-36(fp)
8113826c:	00bfff84 	movi	r2,-2
81138270:	1884703a 	and	r2,r3,r2
81138274:	1001703a 	wrctl	status,r2
  
  return context;
81138278:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8113827c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81138280:	e0bffc17 	ldw	r2,-16(fp)
81138284:	10800117 	ldw	r2,4(r2)
81138288:	10c11014 	ori	r3,r2,1088
8113828c:	e0bffc17 	ldw	r2,-16(fp)
81138290:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81138294:	e0bffc17 	ldw	r2,-16(fp)
81138298:	10800017 	ldw	r2,0(r2)
8113829c:	10800304 	addi	r2,r2,12
811382a0:	e0fffc17 	ldw	r3,-16(fp)
811382a4:	18c00117 	ldw	r3,4(r3)
811382a8:	10c00035 	stwio	r3,0(r2)
811382ac:	e0bff417 	ldw	r2,-48(fp)
811382b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811382b4:	e0bff617 	ldw	r2,-40(fp)
811382b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
811382bc:	e0fffe17 	ldw	r3,-8(fp)
811382c0:	e0bfef17 	ldw	r2,-68(fp)
811382c4:	1885c83a 	sub	r2,r3,r2
}
811382c8:	e037883a 	mov	sp,fp
811382cc:	dfc00117 	ldw	ra,4(sp)
811382d0:	df000017 	ldw	fp,0(sp)
811382d4:	dec00204 	addi	sp,sp,8
811382d8:	f800283a 	ret

811382dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811382dc:	defffe04 	addi	sp,sp,-8
811382e0:	de00012e 	bgeu	sp,et,811382e8 <alt_get_errno+0xc>
811382e4:	003b68fa 	trap	3
811382e8:	dfc00115 	stw	ra,4(sp)
811382ec:	df000015 	stw	fp,0(sp)
811382f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811382f4:	d0a01017 	ldw	r2,-32704(gp)
811382f8:	10000326 	beq	r2,zero,81138308 <alt_get_errno+0x2c>
811382fc:	d0a01017 	ldw	r2,-32704(gp)
81138300:	103ee83a 	callr	r2
81138304:	00000106 	br	8113830c <alt_get_errno+0x30>
81138308:	d0a05f04 	addi	r2,gp,-32388
}
8113830c:	e037883a 	mov	sp,fp
81138310:	dfc00117 	ldw	ra,4(sp)
81138314:	df000017 	ldw	fp,0(sp)
81138318:	dec00204 	addi	sp,sp,8
8113831c:	f800283a 	ret

81138320 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81138320:	defffc04 	addi	sp,sp,-16
81138324:	de00012e 	bgeu	sp,et,8113832c <alt_msgdma_write_standard_descriptor+0xc>
81138328:	003b68fa 	trap	3
8113832c:	df000315 	stw	fp,12(sp)
81138330:	df000304 	addi	fp,sp,12
81138334:	e13ffd15 	stw	r4,-12(fp)
81138338:	e17ffe15 	stw	r5,-8(fp)
8113833c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81138340:	e0bffd17 	ldw	r2,-12(fp)
81138344:	10800037 	ldwio	r2,0(r2)
81138348:	1080010c 	andi	r2,r2,4
8113834c:	10000226 	beq	r2,zero,81138358 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81138350:	00bff904 	movi	r2,-28
81138354:	00001506 	br	811383ac <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81138358:	e0bfff17 	ldw	r2,-4(fp)
8113835c:	10800017 	ldw	r2,0(r2)
81138360:	1007883a 	mov	r3,r2
81138364:	e0bffe17 	ldw	r2,-8(fp)
81138368:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8113836c:	e0bffe17 	ldw	r2,-8(fp)
81138370:	10800104 	addi	r2,r2,4
81138374:	e0ffff17 	ldw	r3,-4(fp)
81138378:	18c00117 	ldw	r3,4(r3)
8113837c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81138380:	e0bffe17 	ldw	r2,-8(fp)
81138384:	10800204 	addi	r2,r2,8
81138388:	e0ffff17 	ldw	r3,-4(fp)
8113838c:	18c00217 	ldw	r3,8(r3)
81138390:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81138394:	e0bffe17 	ldw	r2,-8(fp)
81138398:	10800304 	addi	r2,r2,12
8113839c:	e0ffff17 	ldw	r3,-4(fp)
811383a0:	18c00317 	ldw	r3,12(r3)
811383a4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
811383a8:	0005883a 	mov	r2,zero
}
811383ac:	e037883a 	mov	sp,fp
811383b0:	df000017 	ldw	fp,0(sp)
811383b4:	dec00104 	addi	sp,sp,4
811383b8:	f800283a 	ret

811383bc <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
811383bc:	defffc04 	addi	sp,sp,-16
811383c0:	de00012e 	bgeu	sp,et,811383c8 <alt_msgdma_write_extended_descriptor+0xc>
811383c4:	003b68fa 	trap	3
811383c8:	df000315 	stw	fp,12(sp)
811383cc:	df000304 	addi	fp,sp,12
811383d0:	e13ffd15 	stw	r4,-12(fp)
811383d4:	e17ffe15 	stw	r5,-8(fp)
811383d8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811383dc:	e0bffd17 	ldw	r2,-12(fp)
811383e0:	10800037 	ldwio	r2,0(r2)
811383e4:	1080010c 	andi	r2,r2,4
811383e8:	10000226 	beq	r2,zero,811383f4 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
811383ec:	00bff904 	movi	r2,-28
811383f0:	00003b06 	br	811384e0 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
811383f4:	e0bfff17 	ldw	r2,-4(fp)
811383f8:	10800017 	ldw	r2,0(r2)
811383fc:	1007883a 	mov	r3,r2
81138400:	e0bffe17 	ldw	r2,-8(fp)
81138404:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81138408:	e0bffe17 	ldw	r2,-8(fp)
8113840c:	10800104 	addi	r2,r2,4
81138410:	e0ffff17 	ldw	r3,-4(fp)
81138414:	18c00117 	ldw	r3,4(r3)
81138418:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8113841c:	e0bffe17 	ldw	r2,-8(fp)
81138420:	10800204 	addi	r2,r2,8
81138424:	e0ffff17 	ldw	r3,-4(fp)
81138428:	18c00217 	ldw	r3,8(r3)
8113842c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81138430:	e0bffe17 	ldw	r2,-8(fp)
81138434:	10800304 	addi	r2,r2,12
81138438:	e0ffff17 	ldw	r3,-4(fp)
8113843c:	18c0030b 	ldhu	r3,12(r3)
81138440:	18ffffcc 	andi	r3,r3,65535
81138444:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81138448:	e0bffe17 	ldw	r2,-8(fp)
8113844c:	10800384 	addi	r2,r2,14
81138450:	e0ffff17 	ldw	r3,-4(fp)
81138454:	18c00383 	ldbu	r3,14(r3)
81138458:	18c03fcc 	andi	r3,r3,255
8113845c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81138460:	e0bffe17 	ldw	r2,-8(fp)
81138464:	108003c4 	addi	r2,r2,15
81138468:	e0ffff17 	ldw	r3,-4(fp)
8113846c:	18c003c3 	ldbu	r3,15(r3)
81138470:	18c03fcc 	andi	r3,r3,255
81138474:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81138478:	e0bffe17 	ldw	r2,-8(fp)
8113847c:	10800404 	addi	r2,r2,16
81138480:	e0ffff17 	ldw	r3,-4(fp)
81138484:	18c0040b 	ldhu	r3,16(r3)
81138488:	18ffffcc 	andi	r3,r3,65535
8113848c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81138490:	e0bffe17 	ldw	r2,-8(fp)
81138494:	10800484 	addi	r2,r2,18
81138498:	e0ffff17 	ldw	r3,-4(fp)
8113849c:	18c0048b 	ldhu	r3,18(r3)
811384a0:	18ffffcc 	andi	r3,r3,65535
811384a4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
811384a8:	e0bffe17 	ldw	r2,-8(fp)
811384ac:	10800504 	addi	r2,r2,20
811384b0:	0007883a 	mov	r3,zero
811384b4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
811384b8:	e0bffe17 	ldw	r2,-8(fp)
811384bc:	10800604 	addi	r2,r2,24
811384c0:	0007883a 	mov	r3,zero
811384c4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
811384c8:	e0bffe17 	ldw	r2,-8(fp)
811384cc:	10800704 	addi	r2,r2,28
811384d0:	e0ffff17 	ldw	r3,-4(fp)
811384d4:	18c00717 	ldw	r3,28(r3)
811384d8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
811384dc:	0005883a 	mov	r2,zero
}
811384e0:	e037883a 	mov	sp,fp
811384e4:	df000017 	ldw	fp,0(sp)
811384e8:	dec00104 	addi	sp,sp,4
811384ec:	f800283a 	ret

811384f0 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
811384f0:	defff804 	addi	sp,sp,-32
811384f4:	de00012e 	bgeu	sp,et,811384fc <alt_msgdma_irq+0xc>
811384f8:	003b68fa 	trap	3
811384fc:	dfc00715 	stw	ra,28(sp)
81138500:	df000615 	stw	fp,24(sp)
81138504:	df000604 	addi	fp,sp,24
81138508:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8113850c:	e0bfff17 	ldw	r2,-4(fp)
81138510:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81138514:	e0bffa17 	ldw	r2,-24(fp)
81138518:	10801783 	ldbu	r2,94(r2)
8113851c:	10803fcc 	andi	r2,r2,255
81138520:	10001126 	beq	r2,zero,81138568 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81138524:	e0bffa17 	ldw	r2,-24(fp)
81138528:	10800617 	ldw	r2,24(r2)
8113852c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81138530:	1007883a 	mov	r3,r2
81138534:	00bffdc4 	movi	r2,-9
81138538:	1884703a 	and	r2,r3,r2
8113853c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81138540:	e0bffa17 	ldw	r2,-24(fp)
81138544:	10800617 	ldw	r2,24(r2)
81138548:	e0fffb17 	ldw	r3,-20(fp)
8113854c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81138550:	e0bffa17 	ldw	r2,-24(fp)
81138554:	10800617 	ldw	r2,24(r2)
81138558:	10800404 	addi	r2,r2,16
8113855c:	00c00044 	movi	r3,1
81138560:	10c00035 	stwio	r3,0(r2)
81138564:	00001106 	br	811385ac <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81138568:	e0bffa17 	ldw	r2,-24(fp)
8113856c:	10800317 	ldw	r2,12(r2)
81138570:	10800104 	addi	r2,r2,4
81138574:	10800037 	ldwio	r2,0(r2)
81138578:	1007883a 	mov	r3,r2
8113857c:	00bffbc4 	movi	r2,-17
81138580:	1884703a 	and	r2,r3,r2
81138584:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81138588:	e0bffa17 	ldw	r2,-24(fp)
8113858c:	10800317 	ldw	r2,12(r2)
81138590:	10800104 	addi	r2,r2,4
81138594:	e0fffb17 	ldw	r3,-20(fp)
81138598:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113859c:	e0bffa17 	ldw	r2,-24(fp)
811385a0:	10800317 	ldw	r2,12(r2)
811385a4:	00c08004 	movi	r3,512
811385a8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
811385ac:	e0bffa17 	ldw	r2,-24(fp)
811385b0:	10800b17 	ldw	r2,44(r2)
811385b4:	10001226 	beq	r2,zero,81138600 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811385b8:	0005303a 	rdctl	r2,status
811385bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811385c0:	e0fffd17 	ldw	r3,-12(fp)
811385c4:	00bfff84 	movi	r2,-2
811385c8:	1884703a 	and	r2,r3,r2
811385cc:	1001703a 	wrctl	status,r2
  
  return context;
811385d0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811385d4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811385d8:	e0bffa17 	ldw	r2,-24(fp)
811385dc:	10800b17 	ldw	r2,44(r2)
811385e0:	e0fffa17 	ldw	r3,-24(fp)
811385e4:	18c00c17 	ldw	r3,48(r3)
811385e8:	1809883a 	mov	r4,r3
811385ec:	103ee83a 	callr	r2
811385f0:	e0bffc17 	ldw	r2,-16(fp)
811385f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811385f8:	e0bffe17 	ldw	r2,-8(fp)
811385fc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81138600:	e0bffa17 	ldw	r2,-24(fp)
81138604:	10801783 	ldbu	r2,94(r2)
81138608:	10803fcc 	andi	r2,r2,255
8113860c:	10000a26 	beq	r2,zero,81138638 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81138610:	e0bffa17 	ldw	r2,-24(fp)
81138614:	10800617 	ldw	r2,24(r2)
81138618:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113861c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81138620:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81138624:	e0bffa17 	ldw	r2,-24(fp)
81138628:	10800617 	ldw	r2,24(r2)
8113862c:	e0fffb17 	ldw	r3,-20(fp)
81138630:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81138634:	00000c06 	br	81138668 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81138638:	e0bffa17 	ldw	r2,-24(fp)
8113863c:	10800317 	ldw	r2,12(r2)
81138640:	10800104 	addi	r2,r2,4
81138644:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81138648:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113864c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81138650:	e0bffa17 	ldw	r2,-24(fp)
81138654:	10800317 	ldw	r2,12(r2)
81138658:	10800104 	addi	r2,r2,4
8113865c:	e0fffb17 	ldw	r3,-20(fp)
81138660:	10c00035 	stwio	r3,0(r2)
    }

    return;
81138664:	0001883a 	nop
}
81138668:	e037883a 	mov	sp,fp
8113866c:	dfc00117 	ldw	ra,4(sp)
81138670:	df000017 	ldw	fp,0(sp)
81138674:	dec00204 	addi	sp,sp,8
81138678:	f800283a 	ret

8113867c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113867c:	defffb04 	addi	sp,sp,-20
81138680:	de00012e 	bgeu	sp,et,81138688 <alt_msgdma_construct_standard_descriptor+0xc>
81138684:	003b68fa 	trap	3
81138688:	df000415 	stw	fp,16(sp)
8113868c:	df000404 	addi	fp,sp,16
81138690:	e13ffc15 	stw	r4,-16(fp)
81138694:	e17ffd15 	stw	r5,-12(fp)
81138698:	e1bffe15 	stw	r6,-8(fp)
8113869c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811386a0:	e0bffc17 	ldw	r2,-16(fp)
811386a4:	10c01217 	ldw	r3,72(r2)
811386a8:	e0800117 	ldw	r2,4(fp)
811386ac:	18800436 	bltu	r3,r2,811386c0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
811386b0:	e0bffc17 	ldw	r2,-16(fp)
811386b4:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811386b8:	10803fcc 	andi	r2,r2,255
811386bc:	10000226 	beq	r2,zero,811386c8 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811386c0:	00bffa84 	movi	r2,-22
811386c4:	00000e06 	br	81138700 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
811386c8:	e0bffd17 	ldw	r2,-12(fp)
811386cc:	e0fffe17 	ldw	r3,-8(fp)
811386d0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811386d4:	e0bffd17 	ldw	r2,-12(fp)
811386d8:	e0ffff17 	ldw	r3,-4(fp)
811386dc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811386e0:	e0bffd17 	ldw	r2,-12(fp)
811386e4:	e0c00117 	ldw	r3,4(fp)
811386e8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811386ec:	e0800217 	ldw	r2,8(fp)
811386f0:	10e00034 	orhi	r3,r2,32768
811386f4:	e0bffd17 	ldw	r2,-12(fp)
811386f8:	10c00315 	stw	r3,12(r2)
    
    return 0;
811386fc:	0005883a 	mov	r2,zero
}
81138700:	e037883a 	mov	sp,fp
81138704:	df000017 	ldw	fp,0(sp)
81138708:	dec00104 	addi	sp,sp,4
8113870c:	f800283a 	ret

81138710 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81138710:	defff604 	addi	sp,sp,-40
81138714:	de00012e 	bgeu	sp,et,8113871c <alt_msgdma_construct_extended_descriptor+0xc>
81138718:	003b68fa 	trap	3
8113871c:	df000915 	stw	fp,36(sp)
81138720:	df000904 	addi	fp,sp,36
81138724:	e13ff715 	stw	r4,-36(fp)
81138728:	e17ff815 	stw	r5,-32(fp)
8113872c:	e1bff915 	stw	r6,-28(fp)
81138730:	e1fffa15 	stw	r7,-24(fp)
81138734:	e1800317 	ldw	r6,12(fp)
81138738:	e1400417 	ldw	r5,16(fp)
8113873c:	e1000517 	ldw	r4,20(fp)
81138740:	e0c00617 	ldw	r3,24(fp)
81138744:	e0800717 	ldw	r2,28(fp)
81138748:	e1bffb0d 	sth	r6,-20(fp)
8113874c:	e17ffc05 	stb	r5,-16(fp)
81138750:	e13ffd05 	stb	r4,-12(fp)
81138754:	e0fffe0d 	sth	r3,-8(fp)
81138758:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8113875c:	e0bff717 	ldw	r2,-36(fp)
81138760:	10c01217 	ldw	r3,72(r2)
81138764:	e0800117 	ldw	r2,4(fp)
81138768:	18801936 	bltu	r3,r2,811387d0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113876c:	e13ff717 	ldw	r4,-36(fp)
81138770:	20801317 	ldw	r2,76(r4)
81138774:	20c01417 	ldw	r3,80(r4)
81138778:	e13ffe0b 	ldhu	r4,-8(fp)
8113877c:	213fffcc 	andi	r4,r4,65535
81138780:	2015883a 	mov	r10,r4
81138784:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81138788:	1ac01136 	bltu	r3,r11,811387d0 <alt_msgdma_construct_extended_descriptor+0xc0>
8113878c:	58c0011e 	bne	r11,r3,81138794 <alt_msgdma_construct_extended_descriptor+0x84>
81138790:	12800f36 	bltu	r2,r10,811387d0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81138794:	e13ff717 	ldw	r4,-36(fp)
81138798:	20801317 	ldw	r2,76(r4)
8113879c:	20c01417 	ldw	r3,80(r4)
811387a0:	e13fff0b 	ldhu	r4,-4(fp)
811387a4:	213fffcc 	andi	r4,r4,65535
811387a8:	2011883a 	mov	r8,r4
811387ac:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
811387b0:	1a400736 	bltu	r3,r9,811387d0 <alt_msgdma_construct_extended_descriptor+0xc0>
811387b4:	48c0011e 	bne	r9,r3,811387bc <alt_msgdma_construct_extended_descriptor+0xac>
811387b8:	12000536 	bltu	r2,r8,811387d0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
811387bc:	e0bff717 	ldw	r2,-36(fp)
811387c0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811387c4:	10803fcc 	andi	r2,r2,255
811387c8:	10800060 	cmpeqi	r2,r2,1
811387cc:	1000021e 	bne	r2,zero,811387d8 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811387d0:	00bffa84 	movi	r2,-22
811387d4:	00002106 	br	8113885c <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
811387d8:	e0bff817 	ldw	r2,-32(fp)
811387dc:	e0fff917 	ldw	r3,-28(fp)
811387e0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811387e4:	e0bff817 	ldw	r2,-32(fp)
811387e8:	e0fffa17 	ldw	r3,-24(fp)
811387ec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811387f0:	e0bff817 	ldw	r2,-32(fp)
811387f4:	e0c00117 	ldw	r3,4(fp)
811387f8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811387fc:	e0bff817 	ldw	r2,-32(fp)
81138800:	e0fffb0b 	ldhu	r3,-20(fp)
81138804:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81138808:	e0bff817 	ldw	r2,-32(fp)
8113880c:	e0fffc03 	ldbu	r3,-16(fp)
81138810:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81138814:	e0bff817 	ldw	r2,-32(fp)
81138818:	e0fffd03 	ldbu	r3,-12(fp)
8113881c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81138820:	e0bff817 	ldw	r2,-32(fp)
81138824:	e0fffe0b 	ldhu	r3,-8(fp)
81138828:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8113882c:	e0bff817 	ldw	r2,-32(fp)
81138830:	e0ffff0b 	ldhu	r3,-4(fp)
81138834:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81138838:	e0bff817 	ldw	r2,-32(fp)
8113883c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81138840:	e0bff817 	ldw	r2,-32(fp)
81138844:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81138848:	e0800217 	ldw	r2,8(fp)
8113884c:	10e00034 	orhi	r3,r2,32768
81138850:	e0bff817 	ldw	r2,-32(fp)
81138854:	10c00715 	stw	r3,28(r2)

  return 0 ;
81138858:	0005883a 	mov	r2,zero

}
8113885c:	e037883a 	mov	sp,fp
81138860:	df000017 	ldw	fp,0(sp)
81138864:	dec00104 	addi	sp,sp,4
81138868:	f800283a 	ret

8113886c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113886c:	deffee04 	addi	sp,sp,-72
81138870:	de00012e 	bgeu	sp,et,81138878 <alt_msgdma_descriptor_async_transfer+0xc>
81138874:	003b68fa 	trap	3
81138878:	dfc01115 	stw	ra,68(sp)
8113887c:	df001015 	stw	fp,64(sp)
81138880:	df001004 	addi	fp,sp,64
81138884:	e13ffd15 	stw	r4,-12(fp)
81138888:	e17ffe15 	stw	r5,-8(fp)
8113888c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81138890:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81138894:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81138898:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113889c:	e0bffd17 	ldw	r2,-12(fp)
811388a0:	10800317 	ldw	r2,12(r2)
811388a4:	10800204 	addi	r2,r2,8
811388a8:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811388ac:	10bfffcc 	andi	r2,r2,65535
811388b0:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811388b4:	e0bffd17 	ldw	r2,-12(fp)
811388b8:	10800317 	ldw	r2,12(r2)
811388bc:	10800204 	addi	r2,r2,8
811388c0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811388c4:	1004d43a 	srli	r2,r2,16
811388c8:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811388cc:	e0bffd17 	ldw	r2,-12(fp)
811388d0:	10800917 	ldw	r2,36(r2)
811388d4:	e0fff417 	ldw	r3,-48(fp)
811388d8:	1880042e 	bgeu	r3,r2,811388ec <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811388dc:	e0bffd17 	ldw	r2,-12(fp)
811388e0:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811388e4:	e0fff317 	ldw	r3,-52(fp)
811388e8:	18800236 	bltu	r3,r2,811388f4 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811388ec:	00bff904 	movi	r2,-28
811388f0:	0000a906 	br	81138b98 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
811388f4:	e0bffd17 	ldw	r2,-12(fp)
811388f8:	10801817 	ldw	r2,96(r2)
811388fc:	e0bff615 	stw	r2,-40(fp)
81138900:	e03ffc0d 	sth	zero,-16(fp)
81138904:	e0bffc0b 	ldhu	r2,-16(fp)
81138908:	e0fffc84 	addi	r3,fp,-14
8113890c:	180d883a 	mov	r6,r3
81138910:	100b883a 	mov	r5,r2
81138914:	e13ff617 	ldw	r4,-40(fp)
81138918:	112ee780 	call	8112ee78 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113891c:	00800804 	movi	r2,32
81138920:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138924:	0005303a 	rdctl	r2,status
81138928:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113892c:	e0fff717 	ldw	r3,-36(fp)
81138930:	00bfff84 	movi	r2,-2
81138934:	1884703a 	and	r2,r3,r2
81138938:	1001703a 	wrctl	status,r2
  
  return context;
8113893c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81138940:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138944:	e0bffd17 	ldw	r2,-12(fp)
81138948:	10800317 	ldw	r2,12(r2)
8113894c:	10800104 	addi	r2,r2,4
81138950:	e0fff117 	ldw	r3,-60(fp)
81138954:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81138958:	e0bffd17 	ldw	r2,-12(fp)
8113895c:	10800317 	ldw	r2,12(r2)
81138960:	e0fffd17 	ldw	r3,-12(fp)
81138964:	18c00317 	ldw	r3,12(r3)
81138968:	18c00037 	ldwio	r3,0(r3)
8113896c:	10c00035 	stwio	r3,0(r2)
81138970:	e0bff217 	ldw	r2,-56(fp)
81138974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138978:	e0bffb17 	ldw	r2,-20(fp)
8113897c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81138980:	e0bffe17 	ldw	r2,-8(fp)
81138984:	10001e26 	beq	r2,zero,81138a00 <alt_msgdma_descriptor_async_transfer+0x194>
81138988:	e0bfff17 	ldw	r2,-4(fp)
8113898c:	10001c1e 	bne	r2,zero,81138a00 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138990:	00001106 	br	811389d8 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81138994:	01000044 	movi	r4,1
81138998:	112712c0 	call	8112712c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113899c:	e0bff00b 	ldhu	r2,-64(fp)
811389a0:	1084e230 	cmpltui	r2,r2,5000
811389a4:	1000091e 	bne	r2,zero,811389cc <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
811389a8:	01204534 	movhi	r4,33044
811389ac:	213b2a04 	addi	r4,r4,-4952
811389b0:	113ad900 	call	8113ad90 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811389b4:	e0bffd17 	ldw	r2,-12(fp)
811389b8:	10801817 	ldw	r2,96(r2)
811389bc:	1009883a 	mov	r4,r2
811389c0:	112f2000 	call	8112f200 <OSSemPost>
				
                return -ETIME;
811389c4:	00bff084 	movi	r2,-62
811389c8:	00007306 	br	81138b98 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
811389cc:	e0bff00b 	ldhu	r2,-64(fp)
811389d0:	10800044 	addi	r2,r2,1
811389d4:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811389d8:	e0bffd17 	ldw	r2,-12(fp)
811389dc:	10c00317 	ldw	r3,12(r2)
811389e0:	e0bffd17 	ldw	r2,-12(fp)
811389e4:	10800417 	ldw	r2,16(r2)
811389e8:	e1bffe17 	ldw	r6,-8(fp)
811389ec:	100b883a 	mov	r5,r2
811389f0:	1809883a 	mov	r4,r3
811389f4:	11383200 	call	81138320 <alt_msgdma_write_standard_descriptor>
811389f8:	103fe61e 	bne	r2,zero,81138994 <__reset+0xfb118994>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811389fc:	00002706 	br	81138a9c <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138a00:	e0bffe17 	ldw	r2,-8(fp)
81138a04:	10001f1e 	bne	r2,zero,81138a84 <alt_msgdma_descriptor_async_transfer+0x218>
81138a08:	e0bfff17 	ldw	r2,-4(fp)
81138a0c:	10001d26 	beq	r2,zero,81138a84 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
81138a10:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138a14:	00001106 	br	81138a5c <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81138a18:	01000044 	movi	r4,1
81138a1c:	112712c0 	call	8112712c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138a20:	e0bff00b 	ldhu	r2,-64(fp)
81138a24:	1084e230 	cmpltui	r2,r2,5000
81138a28:	1000091e 	bne	r2,zero,81138a50 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81138a2c:	01204534 	movhi	r4,33044
81138a30:	213b4004 	addi	r4,r4,-4864
81138a34:	113ad900 	call	8113ad90 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138a38:	e0bffd17 	ldw	r2,-12(fp)
81138a3c:	10801817 	ldw	r2,96(r2)
81138a40:	1009883a 	mov	r4,r2
81138a44:	112f2000 	call	8112f200 <OSSemPost>
				
                return -ETIME;
81138a48:	00bff084 	movi	r2,-62
81138a4c:	00005206 	br	81138b98 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81138a50:	e0bff00b 	ldhu	r2,-64(fp)
81138a54:	10800044 	addi	r2,r2,1
81138a58:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138a5c:	e0bffd17 	ldw	r2,-12(fp)
81138a60:	10c00317 	ldw	r3,12(r2)
81138a64:	e0bffd17 	ldw	r2,-12(fp)
81138a68:	10800417 	ldw	r2,16(r2)
81138a6c:	e1bfff17 	ldw	r6,-4(fp)
81138a70:	100b883a 	mov	r5,r2
81138a74:	1809883a 	mov	r4,r3
81138a78:	11383bc0 	call	811383bc <alt_msgdma_write_extended_descriptor>
81138a7c:	103fe61e 	bne	r2,zero,81138a18 <__reset+0xfb118a18>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138a80:	00000606 	br	81138a9c <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81138a84:	e0bffd17 	ldw	r2,-12(fp)
81138a88:	10801817 	ldw	r2,96(r2)
81138a8c:	1009883a 	mov	r4,r2
81138a90:	112f2000 	call	8112f200 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81138a94:	00bfffc4 	movi	r2,-1
81138a98:	00003f06 	br	81138b98 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81138a9c:	e0bffd17 	ldw	r2,-12(fp)
81138aa0:	10800b17 	ldw	r2,44(r2)
81138aa4:	10001c26 	beq	r2,zero,81138b18 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
81138aa8:	e0bffd17 	ldw	r2,-12(fp)
81138aac:	10c00d17 	ldw	r3,52(r2)
81138ab0:	e0bff117 	ldw	r2,-60(fp)
81138ab4:	1884b03a 	or	r2,r3,r2
81138ab8:	10800514 	ori	r2,r2,20
81138abc:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81138ac0:	e0fff117 	ldw	r3,-60(fp)
81138ac4:	00bff7c4 	movi	r2,-33
81138ac8:	1884703a 	and	r2,r3,r2
81138acc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138ad0:	0005303a 	rdctl	r2,status
81138ad4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138ad8:	e0fff917 	ldw	r3,-28(fp)
81138adc:	00bfff84 	movi	r2,-2
81138ae0:	1884703a 	and	r2,r3,r2
81138ae4:	1001703a 	wrctl	status,r2
  
  return context;
81138ae8:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81138aec:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138af0:	e0bffd17 	ldw	r2,-12(fp)
81138af4:	10800317 	ldw	r2,12(r2)
81138af8:	10800104 	addi	r2,r2,4
81138afc:	e0fff117 	ldw	r3,-60(fp)
81138b00:	10c00035 	stwio	r3,0(r2)
81138b04:	e0bff217 	ldw	r2,-56(fp)
81138b08:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138b0c:	e0bff517 	ldw	r2,-44(fp)
81138b10:	1001703a 	wrctl	status,r2
81138b14:	00001b06 	br	81138b84 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81138b18:	e0bffd17 	ldw	r2,-12(fp)
81138b1c:	10c00d17 	ldw	r3,52(r2)
81138b20:	e0bff117 	ldw	r2,-60(fp)
81138b24:	1884b03a 	or	r2,r3,r2
81138b28:	10800114 	ori	r2,r2,4
81138b2c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81138b30:	e0fff117 	ldw	r3,-60(fp)
81138b34:	00bff3c4 	movi	r2,-49
81138b38:	1884703a 	and	r2,r3,r2
81138b3c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138b40:	0005303a 	rdctl	r2,status
81138b44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138b48:	e0fffa17 	ldw	r3,-24(fp)
81138b4c:	00bfff84 	movi	r2,-2
81138b50:	1884703a 	and	r2,r3,r2
81138b54:	1001703a 	wrctl	status,r2
  
  return context;
81138b58:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81138b5c:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138b60:	e0bffd17 	ldw	r2,-12(fp)
81138b64:	10800317 	ldw	r2,12(r2)
81138b68:	10800104 	addi	r2,r2,4
81138b6c:	e0fff117 	ldw	r3,-60(fp)
81138b70:	10c00035 	stwio	r3,0(r2)
81138b74:	e0bff217 	ldw	r2,-56(fp)
81138b78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138b7c:	e0bff817 	ldw	r2,-32(fp)
81138b80:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81138b84:	e0bffd17 	ldw	r2,-12(fp)
81138b88:	10801817 	ldw	r2,96(r2)
81138b8c:	1009883a 	mov	r4,r2
81138b90:	112f2000 	call	8112f200 <OSSemPost>
    
    return 0;
81138b94:	0005883a 	mov	r2,zero
}
81138b98:	e037883a 	mov	sp,fp
81138b9c:	dfc00117 	ldw	ra,4(sp)
81138ba0:	df000017 	ldw	fp,0(sp)
81138ba4:	dec00204 	addi	sp,sp,8
81138ba8:	f800283a 	ret

81138bac <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81138bac:	deffee04 	addi	sp,sp,-72
81138bb0:	de00012e 	bgeu	sp,et,81138bb8 <alt_msgdma_descriptor_sync_transfer+0xc>
81138bb4:	003b68fa 	trap	3
81138bb8:	dfc01115 	stw	ra,68(sp)
81138bbc:	df001015 	stw	fp,64(sp)
81138bc0:	df001004 	addi	fp,sp,64
81138bc4:	e13ffd15 	stw	r4,-12(fp)
81138bc8:	e17ffe15 	stw	r5,-8(fp)
81138bcc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81138bd0:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81138bd4:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81138bd8:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
81138bdc:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138be0:	e0bffd17 	ldw	r2,-12(fp)
81138be4:	10800317 	ldw	r2,12(r2)
81138be8:	10800204 	addi	r2,r2,8
81138bec:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81138bf0:	10bfffcc 	andi	r2,r2,65535
81138bf4:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138bf8:	e0bffd17 	ldw	r2,-12(fp)
81138bfc:	10800317 	ldw	r2,12(r2)
81138c00:	10800204 	addi	r2,r2,8
81138c04:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81138c08:	1004d43a 	srli	r2,r2,16
81138c0c:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81138c10:	00807804 	movi	r2,480
81138c14:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138c18:	00001906 	br	81138c80 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81138c1c:	01000044 	movi	r4,1
81138c20:	112712c0 	call	8112712c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138c24:	e0bff10b 	ldhu	r2,-60(fp)
81138c28:	1084e230 	cmpltui	r2,r2,5000
81138c2c:	1000051e 	bne	r2,zero,81138c44 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81138c30:	01204534 	movhi	r4,33044
81138c34:	213b5604 	addi	r4,r4,-4776
81138c38:	113ad900 	call	8113ad90 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81138c3c:	00bff084 	movi	r2,-62
81138c40:	0000d706 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81138c44:	e0bff10b 	ldhu	r2,-60(fp)
81138c48:	10800044 	addi	r2,r2,1
81138c4c:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138c50:	e0bffd17 	ldw	r2,-12(fp)
81138c54:	10800317 	ldw	r2,12(r2)
81138c58:	10800204 	addi	r2,r2,8
81138c5c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81138c60:	10bfffcc 	andi	r2,r2,65535
81138c64:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138c68:	e0bffd17 	ldw	r2,-12(fp)
81138c6c:	10800317 	ldw	r2,12(r2)
81138c70:	10800204 	addi	r2,r2,8
81138c74:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81138c78:	1004d43a 	srli	r2,r2,16
81138c7c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138c80:	e0bffd17 	ldw	r2,-12(fp)
81138c84:	10800917 	ldw	r2,36(r2)
81138c88:	e0fff317 	ldw	r3,-52(fp)
81138c8c:	18bfe32e 	bgeu	r3,r2,81138c1c <__reset+0xfb118c1c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81138c90:	e0bffd17 	ldw	r2,-12(fp)
81138c94:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138c98:	e0fff217 	ldw	r3,-56(fp)
81138c9c:	18bfdf2e 	bgeu	r3,r2,81138c1c <__reset+0xfb118c1c>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81138ca0:	e0bffd17 	ldw	r2,-12(fp)
81138ca4:	10801817 	ldw	r2,96(r2)
81138ca8:	e0bff815 	stw	r2,-32(fp)
81138cac:	e03ffc0d 	sth	zero,-16(fp)
81138cb0:	e0bffc0b 	ldhu	r2,-16(fp)
81138cb4:	e0fffc84 	addi	r3,fp,-14
81138cb8:	180d883a 	mov	r6,r3
81138cbc:	100b883a 	mov	r5,r2
81138cc0:	e13ff817 	ldw	r4,-32(fp)
81138cc4:	112ee780 	call	8112ee78 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138cc8:	0005303a 	rdctl	r2,status
81138ccc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138cd0:	e0fffb17 	ldw	r3,-20(fp)
81138cd4:	00bfff84 	movi	r2,-2
81138cd8:	1884703a 	and	r2,r3,r2
81138cdc:	1001703a 	wrctl	status,r2
  
  return context;
81138ce0:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81138ce4:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81138ce8:	e0bffd17 	ldw	r2,-12(fp)
81138cec:	10800317 	ldw	r2,12(r2)
81138cf0:	10800104 	addi	r2,r2,4
81138cf4:	00c00804 	movi	r3,32
81138cf8:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81138cfc:	e0bffd17 	ldw	r2,-12(fp)
81138d00:	10800317 	ldw	r2,12(r2)
81138d04:	e0fffd17 	ldw	r3,-12(fp)
81138d08:	18c00317 	ldw	r3,12(r3)
81138d0c:	18c00037 	ldwio	r3,0(r3)
81138d10:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81138d14:	e0bffe17 	ldw	r2,-8(fp)
81138d18:	10001f26 	beq	r2,zero,81138d98 <alt_msgdma_descriptor_sync_transfer+0x1ec>
81138d1c:	e0bfff17 	ldw	r2,-4(fp)
81138d20:	10001d1e 	bne	r2,zero,81138d98 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
81138d24:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138d28:	00001106 	br	81138d70 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81138d2c:	01000044 	movi	r4,1
81138d30:	112712c0 	call	8112712c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138d34:	e0bff10b 	ldhu	r2,-60(fp)
81138d38:	1084e230 	cmpltui	r2,r2,5000
81138d3c:	1000091e 	bne	r2,zero,81138d64 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
81138d40:	01204534 	movhi	r4,33044
81138d44:	213b6a04 	addi	r4,r4,-4696
81138d48:	113ad900 	call	8113ad90 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138d4c:	e0bffd17 	ldw	r2,-12(fp)
81138d50:	10801817 	ldw	r2,96(r2)
81138d54:	1009883a 	mov	r4,r2
81138d58:	112f2000 	call	8112f200 <OSSemPost>
				
                return -ETIME;
81138d5c:	00bff084 	movi	r2,-62
81138d60:	00008f06 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
81138d64:	e0bff10b 	ldhu	r2,-60(fp)
81138d68:	10800044 	addi	r2,r2,1
81138d6c:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138d70:	e0bffd17 	ldw	r2,-12(fp)
81138d74:	10c00317 	ldw	r3,12(r2)
81138d78:	e0bffd17 	ldw	r2,-12(fp)
81138d7c:	10800417 	ldw	r2,16(r2)
81138d80:	e1bffe17 	ldw	r6,-8(fp)
81138d84:	100b883a 	mov	r5,r2
81138d88:	1809883a 	mov	r4,r3
81138d8c:	11383200 	call	81138320 <alt_msgdma_write_standard_descriptor>
81138d90:	103fe61e 	bne	r2,zero,81138d2c <__reset+0xfb118d2c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81138d94:	00002706 	br	81138e34 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138d98:	e0bffe17 	ldw	r2,-8(fp)
81138d9c:	10001f1e 	bne	r2,zero,81138e1c <alt_msgdma_descriptor_sync_transfer+0x270>
81138da0:	e0bfff17 	ldw	r2,-4(fp)
81138da4:	10001d26 	beq	r2,zero,81138e1c <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
81138da8:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138dac:	00001106 	br	81138df4 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81138db0:	01000044 	movi	r4,1
81138db4:	112712c0 	call	8112712c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138db8:	e0bff10b 	ldhu	r2,-60(fp)
81138dbc:	1084e230 	cmpltui	r2,r2,5000
81138dc0:	1000091e 	bne	r2,zero,81138de8 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
81138dc4:	01204534 	movhi	r4,33044
81138dc8:	213b7b04 	addi	r4,r4,-4628
81138dcc:	113ad900 	call	8113ad90 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138dd0:	e0bffd17 	ldw	r2,-12(fp)
81138dd4:	10801817 	ldw	r2,96(r2)
81138dd8:	1009883a 	mov	r4,r2
81138ddc:	112f2000 	call	8112f200 <OSSemPost>
				
                return -ETIME;
81138de0:	00bff084 	movi	r2,-62
81138de4:	00006e06 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
81138de8:	e0bff10b 	ldhu	r2,-60(fp)
81138dec:	10800044 	addi	r2,r2,1
81138df0:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138df4:	e0bffd17 	ldw	r2,-12(fp)
81138df8:	10c00317 	ldw	r3,12(r2)
81138dfc:	e0bffd17 	ldw	r2,-12(fp)
81138e00:	10800417 	ldw	r2,16(r2)
81138e04:	e1bfff17 	ldw	r6,-4(fp)
81138e08:	100b883a 	mov	r5,r2
81138e0c:	1809883a 	mov	r4,r3
81138e10:	11383bc0 	call	811383bc <alt_msgdma_write_extended_descriptor>
81138e14:	103fe61e 	bne	r2,zero,81138db0 <__reset+0xfb118db0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138e18:	00000606 	br	81138e34 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81138e1c:	e0bffd17 	ldw	r2,-12(fp)
81138e20:	10801817 	ldw	r2,96(r2)
81138e24:	1009883a 	mov	r4,r2
81138e28:	112f2000 	call	8112f200 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81138e2c:	00bfffc4 	movi	r2,-1
81138e30:	00005b06 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81138e34:	e0bffd17 	ldw	r2,-12(fp)
81138e38:	10800317 	ldw	r2,12(r2)
81138e3c:	10800104 	addi	r2,r2,4
81138e40:	e0fffd17 	ldw	r3,-12(fp)
81138e44:	19000d17 	ldw	r4,52(r3)
81138e48:	00fff2c4 	movi	r3,-53
81138e4c:	20c6703a 	and	r3,r4,r3
81138e50:	18c00114 	ori	r3,r3,4
81138e54:	10c00035 	stwio	r3,0(r2)
81138e58:	e0bff517 	ldw	r2,-44(fp)
81138e5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138e60:	e0bff717 	ldw	r2,-36(fp)
81138e64:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81138e68:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81138e6c:	e0bffd17 	ldw	r2,-12(fp)
81138e70:	10800317 	ldw	r2,12(r2)
81138e74:	10800037 	ldwio	r2,0(r2)
81138e78:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81138e7c:	00001506 	br	81138ed4 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
81138e80:	01000044 	movi	r4,1
81138e84:	112712c0 	call	8112712c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138e88:	e0bff10b 	ldhu	r2,-60(fp)
81138e8c:	1084e230 	cmpltui	r2,r2,5000
81138e90:	1000091e 	bne	r2,zero,81138eb8 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81138e94:	01204534 	movhi	r4,33044
81138e98:	213b8c04 	addi	r4,r4,-4560
81138e9c:	113ad900 	call	8113ad90 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
81138ea0:	e0bffd17 	ldw	r2,-12(fp)
81138ea4:	10801817 	ldw	r2,96(r2)
81138ea8:	1009883a 	mov	r4,r2
81138eac:	112f2000 	call	8112f200 <OSSemPost>
			
            return -ETIME;
81138eb0:	00bff084 	movi	r2,-62
81138eb4:	00003a06 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
81138eb8:	e0bff10b 	ldhu	r2,-60(fp)
81138ebc:	10800044 	addi	r2,r2,1
81138ec0:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81138ec4:	e0bffd17 	ldw	r2,-12(fp)
81138ec8:	10800317 	ldw	r2,12(r2)
81138ecc:	10800037 	ldwio	r2,0(r2)
81138ed0:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81138ed4:	e0fff017 	ldw	r3,-64(fp)
81138ed8:	e0bff617 	ldw	r2,-40(fp)
81138edc:	1884703a 	and	r2,r3,r2
81138ee0:	1000031e 	bne	r2,zero,81138ef0 <alt_msgdma_descriptor_sync_transfer+0x344>
81138ee4:	e0bff017 	ldw	r2,-64(fp)
81138ee8:	1080004c 	andi	r2,r2,1
81138eec:	103fe41e 	bne	r2,zero,81138e80 <__reset+0xfb118e80>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81138ef0:	e0fff017 	ldw	r3,-64(fp)
81138ef4:	e0bff617 	ldw	r2,-40(fp)
81138ef8:	1884703a 	and	r2,r3,r2
81138efc:	10000626 	beq	r2,zero,81138f18 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81138f00:	e0bffd17 	ldw	r2,-12(fp)
81138f04:	10801817 	ldw	r2,96(r2)
81138f08:	1009883a 	mov	r4,r2
81138f0c:	112f2000 	call	8112f200 <OSSemPost>
		
        return error;
81138f10:	e0bff617 	ldw	r2,-40(fp)
81138f14:	00002206 	br	81138fa0 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81138f18:	e0bffd17 	ldw	r2,-12(fp)
81138f1c:	10800317 	ldw	r2,12(r2)
81138f20:	10800104 	addi	r2,r2,4
81138f24:	10800037 	ldwio	r2,0(r2)
81138f28:	10800814 	ori	r2,r2,32
81138f2c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138f30:	0005303a 	rdctl	r2,status
81138f34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138f38:	e0fffa17 	ldw	r3,-24(fp)
81138f3c:	00bfff84 	movi	r2,-2
81138f40:	1884703a 	and	r2,r3,r2
81138f44:	1001703a 	wrctl	status,r2
  
  return context;
81138f48:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81138f4c:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138f50:	e0bffd17 	ldw	r2,-12(fp)
81138f54:	10800317 	ldw	r2,12(r2)
81138f58:	10800104 	addi	r2,r2,4
81138f5c:	e0fff417 	ldw	r3,-48(fp)
81138f60:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81138f64:	e0bffd17 	ldw	r2,-12(fp)
81138f68:	10800317 	ldw	r2,12(r2)
81138f6c:	e0fffd17 	ldw	r3,-12(fp)
81138f70:	18c00317 	ldw	r3,12(r3)
81138f74:	18c00037 	ldwio	r3,0(r3)
81138f78:	10c00035 	stwio	r3,0(r2)
81138f7c:	e0bff517 	ldw	r2,-44(fp)
81138f80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138f84:	e0bff917 	ldw	r2,-28(fp)
81138f88:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81138f8c:	e0bffd17 	ldw	r2,-12(fp)
81138f90:	10801817 	ldw	r2,96(r2)
81138f94:	1009883a 	mov	r4,r2
81138f98:	112f2000 	call	8112f200 <OSSemPost>
    
    return 0;
81138f9c:	0005883a 	mov	r2,zero

}
81138fa0:	e037883a 	mov	sp,fp
81138fa4:	dfc00117 	ldw	ra,4(sp)
81138fa8:	df000017 	ldw	fp,0(sp)
81138fac:	dec00204 	addi	sp,sp,8
81138fb0:	f800283a 	ret

81138fb4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81138fb4:	defff804 	addi	sp,sp,-32
81138fb8:	de00012e 	bgeu	sp,et,81138fc0 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
81138fbc:	003b68fa 	trap	3
81138fc0:	dfc00715 	stw	ra,28(sp)
81138fc4:	df000615 	stw	fp,24(sp)
81138fc8:	df000604 	addi	fp,sp,24
81138fcc:	e13ffc15 	stw	r4,-16(fp)
81138fd0:	e17ffd15 	stw	r5,-12(fp)
81138fd4:	e1bffe15 	stw	r6,-8(fp)
81138fd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81138fdc:	e0800217 	ldw	r2,8(fp)
81138fe0:	d8800115 	stw	r2,4(sp)
81138fe4:	e0bfff17 	ldw	r2,-4(fp)
81138fe8:	d8800015 	stw	r2,0(sp)
81138fec:	e1fffe17 	ldw	r7,-8(fp)
81138ff0:	000d883a 	mov	r6,zero
81138ff4:	e17ffd17 	ldw	r5,-12(fp)
81138ff8:	e13ffc17 	ldw	r4,-16(fp)
81138ffc:	113867c0 	call	8113867c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81139000:	e037883a 	mov	sp,fp
81139004:	dfc00117 	ldw	ra,4(sp)
81139008:	df000017 	ldw	fp,0(sp)
8113900c:	dec00204 	addi	sp,sp,8
81139010:	f800283a 	ret

81139014 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81139014:	defff804 	addi	sp,sp,-32
81139018:	de00012e 	bgeu	sp,et,81139020 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
8113901c:	003b68fa 	trap	3
81139020:	dfc00715 	stw	ra,28(sp)
81139024:	df000615 	stw	fp,24(sp)
81139028:	df000604 	addi	fp,sp,24
8113902c:	e13ffc15 	stw	r4,-16(fp)
81139030:	e17ffd15 	stw	r5,-12(fp)
81139034:	e1bffe15 	stw	r6,-8(fp)
81139038:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113903c:	e0800217 	ldw	r2,8(fp)
81139040:	d8800115 	stw	r2,4(sp)
81139044:	e0bfff17 	ldw	r2,-4(fp)
81139048:	d8800015 	stw	r2,0(sp)
8113904c:	000f883a 	mov	r7,zero
81139050:	e1bffe17 	ldw	r6,-8(fp)
81139054:	e17ffd17 	ldw	r5,-12(fp)
81139058:	e13ffc17 	ldw	r4,-16(fp)
8113905c:	113867c0 	call	8113867c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81139060:	e037883a 	mov	sp,fp
81139064:	dfc00117 	ldw	ra,4(sp)
81139068:	df000017 	ldw	fp,0(sp)
8113906c:	dec00204 	addi	sp,sp,8
81139070:	f800283a 	ret

81139074 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81139074:	defff804 	addi	sp,sp,-32
81139078:	de00012e 	bgeu	sp,et,81139080 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113907c:	003b68fa 	trap	3
81139080:	dfc00715 	stw	ra,28(sp)
81139084:	df000615 	stw	fp,24(sp)
81139088:	df000604 	addi	fp,sp,24
8113908c:	e13ffc15 	stw	r4,-16(fp)
81139090:	e17ffd15 	stw	r5,-12(fp)
81139094:	e1bffe15 	stw	r6,-8(fp)
81139098:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113909c:	e0800317 	ldw	r2,12(fp)
811390a0:	d8800115 	stw	r2,4(sp)
811390a4:	e0800217 	ldw	r2,8(fp)
811390a8:	d8800015 	stw	r2,0(sp)
811390ac:	e1ffff17 	ldw	r7,-4(fp)
811390b0:	e1bffe17 	ldw	r6,-8(fp)
811390b4:	e17ffd17 	ldw	r5,-12(fp)
811390b8:	e13ffc17 	ldw	r4,-16(fp)
811390bc:	113867c0 	call	8113867c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811390c0:	e037883a 	mov	sp,fp
811390c4:	dfc00117 	ldw	ra,4(sp)
811390c8:	df000017 	ldw	fp,0(sp)
811390cc:	dec00204 	addi	sp,sp,8
811390d0:	f800283a 	ret

811390d4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
811390d4:	defff004 	addi	sp,sp,-64
811390d8:	de00012e 	bgeu	sp,et,811390e0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
811390dc:	003b68fa 	trap	3
811390e0:	dfc00f15 	stw	ra,60(sp)
811390e4:	df000e15 	stw	fp,56(sp)
811390e8:	df000e04 	addi	fp,sp,56
811390ec:	e13ff915 	stw	r4,-28(fp)
811390f0:	e17ffa15 	stw	r5,-24(fp)
811390f4:	e1bffb15 	stw	r6,-20(fp)
811390f8:	e1fffc15 	stw	r7,-16(fp)
811390fc:	e1000317 	ldw	r4,12(fp)
81139100:	e0c00417 	ldw	r3,16(fp)
81139104:	e0800517 	ldw	r2,20(fp)
81139108:	e13ffd0d 	sth	r4,-12(fp)
8113910c:	e0fffe05 	stb	r3,-8(fp)
81139110:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81139114:	e0bffd0b 	ldhu	r2,-12(fp)
81139118:	e0fffe03 	ldbu	r3,-8(fp)
8113911c:	e13fff0b 	ldhu	r4,-4(fp)
81139120:	d9000615 	stw	r4,24(sp)
81139124:	d8000515 	stw	zero,20(sp)
81139128:	d8c00415 	stw	r3,16(sp)
8113912c:	d8000315 	stw	zero,12(sp)
81139130:	d8800215 	stw	r2,8(sp)
81139134:	e0800217 	ldw	r2,8(fp)
81139138:	d8800115 	stw	r2,4(sp)
8113913c:	e0bffc17 	ldw	r2,-16(fp)
81139140:	d8800015 	stw	r2,0(sp)
81139144:	e1fffb17 	ldw	r7,-20(fp)
81139148:	000d883a 	mov	r6,zero
8113914c:	e17ffa17 	ldw	r5,-24(fp)
81139150:	e13ff917 	ldw	r4,-28(fp)
81139154:	11387100 	call	81138710 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81139158:	e037883a 	mov	sp,fp
8113915c:	dfc00117 	ldw	ra,4(sp)
81139160:	df000017 	ldw	fp,0(sp)
81139164:	dec00204 	addi	sp,sp,8
81139168:	f800283a 	ret

8113916c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113916c:	defff004 	addi	sp,sp,-64
81139170:	de00012e 	bgeu	sp,et,81139178 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
81139174:	003b68fa 	trap	3
81139178:	dfc00f15 	stw	ra,60(sp)
8113917c:	df000e15 	stw	fp,56(sp)
81139180:	df000e04 	addi	fp,sp,56
81139184:	e13ff915 	stw	r4,-28(fp)
81139188:	e17ffa15 	stw	r5,-24(fp)
8113918c:	e1bffb15 	stw	r6,-20(fp)
81139190:	e1fffc15 	stw	r7,-16(fp)
81139194:	e1000317 	ldw	r4,12(fp)
81139198:	e0c00417 	ldw	r3,16(fp)
8113919c:	e0800517 	ldw	r2,20(fp)
811391a0:	e13ffd0d 	sth	r4,-12(fp)
811391a4:	e0fffe05 	stb	r3,-8(fp)
811391a8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
811391ac:	e0bffd0b 	ldhu	r2,-12(fp)
811391b0:	e0fffe03 	ldbu	r3,-8(fp)
811391b4:	e13fff0b 	ldhu	r4,-4(fp)
811391b8:	d8000615 	stw	zero,24(sp)
811391bc:	d9000515 	stw	r4,20(sp)
811391c0:	d8000415 	stw	zero,16(sp)
811391c4:	d8c00315 	stw	r3,12(sp)
811391c8:	d8800215 	stw	r2,8(sp)
811391cc:	e0800217 	ldw	r2,8(fp)
811391d0:	d8800115 	stw	r2,4(sp)
811391d4:	e0bffc17 	ldw	r2,-16(fp)
811391d8:	d8800015 	stw	r2,0(sp)
811391dc:	000f883a 	mov	r7,zero
811391e0:	e1bffb17 	ldw	r6,-20(fp)
811391e4:	e17ffa17 	ldw	r5,-24(fp)
811391e8:	e13ff917 	ldw	r4,-28(fp)
811391ec:	11387100 	call	81138710 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
811391f0:	e037883a 	mov	sp,fp
811391f4:	dfc00117 	ldw	ra,4(sp)
811391f8:	df000017 	ldw	fp,0(sp)
811391fc:	dec00204 	addi	sp,sp,8
81139200:	f800283a 	ret

81139204 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81139204:	deffee04 	addi	sp,sp,-72
81139208:	de00012e 	bgeu	sp,et,81139210 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113920c:	003b68fa 	trap	3
81139210:	dfc01115 	stw	ra,68(sp)
81139214:	df001015 	stw	fp,64(sp)
81139218:	df001004 	addi	fp,sp,64
8113921c:	e13ff715 	stw	r4,-36(fp)
81139220:	e17ff815 	stw	r5,-32(fp)
81139224:	e1bff915 	stw	r6,-28(fp)
81139228:	e1fffa15 	stw	r7,-24(fp)
8113922c:	e1800417 	ldw	r6,16(fp)
81139230:	e1400517 	ldw	r5,20(fp)
81139234:	e1000617 	ldw	r4,24(fp)
81139238:	e0c00717 	ldw	r3,28(fp)
8113923c:	e0800817 	ldw	r2,32(fp)
81139240:	e1bffb0d 	sth	r6,-20(fp)
81139244:	e17ffc05 	stb	r5,-16(fp)
81139248:	e13ffd05 	stb	r4,-12(fp)
8113924c:	e0fffe0d 	sth	r3,-8(fp)
81139250:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81139254:	e0bffb0b 	ldhu	r2,-20(fp)
81139258:	e0fffc03 	ldbu	r3,-16(fp)
8113925c:	e13ffd03 	ldbu	r4,-12(fp)
81139260:	e17ffe0b 	ldhu	r5,-8(fp)
81139264:	e1bfff0b 	ldhu	r6,-4(fp)
81139268:	d9800615 	stw	r6,24(sp)
8113926c:	d9400515 	stw	r5,20(sp)
81139270:	d9000415 	stw	r4,16(sp)
81139274:	d8c00315 	stw	r3,12(sp)
81139278:	d8800215 	stw	r2,8(sp)
8113927c:	e0800317 	ldw	r2,12(fp)
81139280:	d8800115 	stw	r2,4(sp)
81139284:	e0800217 	ldw	r2,8(fp)
81139288:	d8800015 	stw	r2,0(sp)
8113928c:	e1fffa17 	ldw	r7,-24(fp)
81139290:	e1bff917 	ldw	r6,-28(fp)
81139294:	e17ff817 	ldw	r5,-32(fp)
81139298:	e13ff717 	ldw	r4,-36(fp)
8113929c:	11387100 	call	81138710 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
811392a0:	e037883a 	mov	sp,fp
811392a4:	dfc00117 	ldw	ra,4(sp)
811392a8:	df000017 	ldw	fp,0(sp)
811392ac:	dec00204 	addi	sp,sp,8
811392b0:	f800283a 	ret

811392b4 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811392b4:	defffb04 	addi	sp,sp,-20
811392b8:	de00012e 	bgeu	sp,et,811392c0 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
811392bc:	003b68fa 	trap	3
811392c0:	df000415 	stw	fp,16(sp)
811392c4:	df000404 	addi	fp,sp,16
811392c8:	e13ffc15 	stw	r4,-16(fp)
811392cc:	e17ffd15 	stw	r5,-12(fp)
811392d0:	e1bffe15 	stw	r6,-8(fp)
811392d4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811392d8:	e0bffc17 	ldw	r2,-16(fp)
811392dc:	10c01217 	ldw	r3,72(r2)
811392e0:	e0800117 	ldw	r2,4(fp)
811392e4:	18800436 	bltu	r3,r2,811392f8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
811392e8:	e0bffc17 	ldw	r2,-16(fp)
811392ec:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811392f0:	10803fcc 	andi	r2,r2,255
811392f4:	10000226 	beq	r2,zero,81139300 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811392f8:	00bffa84 	movi	r2,-22
811392fc:	00001406 	br	81139350 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
81139300:	e0bffd17 	ldw	r2,-12(fp)
81139304:	e0fffe17 	ldw	r3,-8(fp)
81139308:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113930c:	e0bffd17 	ldw	r2,-12(fp)
81139310:	e0ffff17 	ldw	r3,-4(fp)
81139314:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139318:	e0bffd17 	ldw	r2,-12(fp)
8113931c:	e0c00117 	ldw	r3,4(fp)
81139320:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81139324:	e0fffd17 	ldw	r3,-12(fp)
81139328:	e0bffd17 	ldw	r2,-12(fp)
8113932c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81139330:	e0c00217 	ldw	r3,8(fp)
81139334:	00900034 	movhi	r2,16384
81139338:	10bfffc4 	addi	r2,r2,-1
8113933c:	1884703a 	and	r2,r3,r2
81139340:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81139344:	e0bffd17 	ldw	r2,-12(fp)
81139348:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8113934c:	0005883a 	mov	r2,zero
}
81139350:	e037883a 	mov	sp,fp
81139354:	df000017 	ldw	fp,0(sp)
81139358:	dec00104 	addi	sp,sp,4
8113935c:	f800283a 	ret

81139360 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81139360:	defff404 	addi	sp,sp,-48
81139364:	de00012e 	bgeu	sp,et,8113936c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
81139368:	003b68fa 	trap	3
8113936c:	df000b15 	stw	fp,44(sp)
81139370:	df000b04 	addi	fp,sp,44
81139374:	e13ff715 	stw	r4,-36(fp)
81139378:	e17ff815 	stw	r5,-32(fp)
8113937c:	e1bff915 	stw	r6,-28(fp)
81139380:	e1fffa15 	stw	r7,-24(fp)
81139384:	e1800517 	ldw	r6,20(fp)
81139388:	e1400617 	ldw	r5,24(fp)
8113938c:	e1000717 	ldw	r4,28(fp)
81139390:	e0c00817 	ldw	r3,32(fp)
81139394:	e0800917 	ldw	r2,36(fp)
81139398:	e1bffb0d 	sth	r6,-20(fp)
8113939c:	e17ffc05 	stb	r5,-16(fp)
811393a0:	e13ffd05 	stb	r4,-12(fp)
811393a4:	e0fffe0d 	sth	r3,-8(fp)
811393a8:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811393ac:	e0bff717 	ldw	r2,-36(fp)
811393b0:	10c01217 	ldw	r3,72(r2)
811393b4:	e0800317 	ldw	r2,12(fp)
811393b8:	18801936 	bltu	r3,r2,81139420 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
811393bc:	e13ff717 	ldw	r4,-36(fp)
811393c0:	20801317 	ldw	r2,76(r4)
811393c4:	20c01417 	ldw	r3,80(r4)
811393c8:	e13ffe0b 	ldhu	r4,-8(fp)
811393cc:	213fffcc 	andi	r4,r4,65535
811393d0:	2015883a 	mov	r10,r4
811393d4:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811393d8:	1ac01136 	bltu	r3,r11,81139420 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
811393dc:	58c0011e 	bne	r11,r3,811393e4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
811393e0:	12800f36 	bltu	r2,r10,81139420 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811393e4:	e13ff717 	ldw	r4,-36(fp)
811393e8:	20801317 	ldw	r2,76(r4)
811393ec:	20c01417 	ldw	r3,80(r4)
811393f0:	e13fff0b 	ldhu	r4,-4(fp)
811393f4:	213fffcc 	andi	r4,r4,65535
811393f8:	2011883a 	mov	r8,r4
811393fc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81139400:	1a400736 	bltu	r3,r9,81139420 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81139404:	48c0011e 	bne	r9,r3,8113940c <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81139408:	12000536 	bltu	r2,r8,81139420 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113940c:	e0bff717 	ldw	r2,-36(fp)
81139410:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81139414:	10803fcc 	andi	r2,r2,255
81139418:	10800060 	cmpeqi	r2,r2,1
8113941c:	1000021e 	bne	r2,zero,81139428 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81139420:	00bffa84 	movi	r2,-22
81139424:	00003106 	br	811394ec <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
81139428:	e0bff817 	ldw	r2,-32(fp)
8113942c:	e0fff917 	ldw	r3,-28(fp)
81139430:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81139434:	e0bff817 	ldw	r2,-32(fp)
81139438:	e0fffa17 	ldw	r3,-24(fp)
8113943c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81139440:	e0bff817 	ldw	r2,-32(fp)
81139444:	e0c00117 	ldw	r3,4(fp)
81139448:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8113944c:	e0bff817 	ldw	r2,-32(fp)
81139450:	e0c00217 	ldw	r3,8(fp)
81139454:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139458:	e0bff817 	ldw	r2,-32(fp)
8113945c:	e0c00317 	ldw	r3,12(fp)
81139460:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81139464:	e0bff817 	ldw	r2,-32(fp)
81139468:	e0fffb0b 	ldhu	r3,-20(fp)
8113946c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81139470:	e0bff817 	ldw	r2,-32(fp)
81139474:	e0fffc03 	ldbu	r3,-16(fp)
81139478:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8113947c:	e0bff817 	ldw	r2,-32(fp)
81139480:	e0fffd03 	ldbu	r3,-12(fp)
81139484:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81139488:	e0bff817 	ldw	r2,-32(fp)
8113948c:	e0fffe0b 	ldhu	r3,-8(fp)
81139490:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81139494:	e0bff817 	ldw	r2,-32(fp)
81139498:	e0ffff0b 	ldhu	r3,-4(fp)
8113949c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
811394a0:	e0bff817 	ldw	r2,-32(fp)
811394a4:	1019883a 	mov	r12,r2
811394a8:	001b883a 	mov	r13,zero
811394ac:	e33ff515 	stw	r12,-44(fp)
811394b0:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
811394b4:	e0fff517 	ldw	r3,-44(fp)
811394b8:	e0bff817 	ldw	r2,-32(fp)
811394bc:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
811394c0:	e0fff617 	ldw	r3,-40(fp)
811394c4:	e0bff817 	ldw	r2,-32(fp)
811394c8:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811394cc:	e0c00417 	ldw	r3,16(fp)
811394d0:	00900034 	movhi	r2,16384
811394d4:	10bfffc4 	addi	r2,r2,-1
811394d8:	1884703a 	and	r2,r3,r2
811394dc:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
811394e0:	e0bff817 	ldw	r2,-32(fp)
811394e4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
811394e8:	0005883a 	mov	r2,zero
}
811394ec:	e037883a 	mov	sp,fp
811394f0:	df000017 	ldw	fp,0(sp)
811394f4:	dec00104 	addi	sp,sp,4
811394f8:	f800283a 	ret

811394fc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
811394fc:	defff804 	addi	sp,sp,-32
81139500:	de00012e 	bgeu	sp,et,81139508 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
81139504:	003b68fa 	trap	3
81139508:	dfc00715 	stw	ra,28(sp)
8113950c:	df000615 	stw	fp,24(sp)
81139510:	df000604 	addi	fp,sp,24
81139514:	e13ffc15 	stw	r4,-16(fp)
81139518:	e17ffd15 	stw	r5,-12(fp)
8113951c:	e1bffe15 	stw	r6,-8(fp)
81139520:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81139524:	e0800317 	ldw	r2,12(fp)
81139528:	d8800115 	stw	r2,4(sp)
8113952c:	e0800217 	ldw	r2,8(fp)
81139530:	d8800015 	stw	r2,0(sp)
81139534:	e1ffff17 	ldw	r7,-4(fp)
81139538:	e1bffe17 	ldw	r6,-8(fp)
8113953c:	e17ffd17 	ldw	r5,-12(fp)
81139540:	e13ffc17 	ldw	r4,-16(fp)
81139544:	11392b40 	call	811392b4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81139548:	e037883a 	mov	sp,fp
8113954c:	dfc00117 	ldw	ra,4(sp)
81139550:	df000017 	ldw	fp,0(sp)
81139554:	dec00204 	addi	sp,sp,8
81139558:	f800283a 	ret

8113955c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113955c:	defff804 	addi	sp,sp,-32
81139560:	de00012e 	bgeu	sp,et,81139568 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
81139564:	003b68fa 	trap	3
81139568:	dfc00715 	stw	ra,28(sp)
8113956c:	df000615 	stw	fp,24(sp)
81139570:	df000604 	addi	fp,sp,24
81139574:	e13ffc15 	stw	r4,-16(fp)
81139578:	e17ffd15 	stw	r5,-12(fp)
8113957c:	e1bffe15 	stw	r6,-8(fp)
81139580:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81139584:	e0800217 	ldw	r2,8(fp)
81139588:	d8800115 	stw	r2,4(sp)
8113958c:	e0bfff17 	ldw	r2,-4(fp)
81139590:	d8800015 	stw	r2,0(sp)
81139594:	e1fffe17 	ldw	r7,-8(fp)
81139598:	000d883a 	mov	r6,zero
8113959c:	e17ffd17 	ldw	r5,-12(fp)
811395a0:	e13ffc17 	ldw	r4,-16(fp)
811395a4:	11392b40 	call	811392b4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
811395a8:	e037883a 	mov	sp,fp
811395ac:	dfc00117 	ldw	ra,4(sp)
811395b0:	df000017 	ldw	fp,0(sp)
811395b4:	dec00204 	addi	sp,sp,8
811395b8:	f800283a 	ret

811395bc <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
811395bc:	defff804 	addi	sp,sp,-32
811395c0:	de00012e 	bgeu	sp,et,811395c8 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
811395c4:	003b68fa 	trap	3
811395c8:	dfc00715 	stw	ra,28(sp)
811395cc:	df000615 	stw	fp,24(sp)
811395d0:	df000604 	addi	fp,sp,24
811395d4:	e13ffc15 	stw	r4,-16(fp)
811395d8:	e17ffd15 	stw	r5,-12(fp)
811395dc:	e1bffe15 	stw	r6,-8(fp)
811395e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811395e4:	e0800217 	ldw	r2,8(fp)
811395e8:	d8800115 	stw	r2,4(sp)
811395ec:	e0bfff17 	ldw	r2,-4(fp)
811395f0:	d8800015 	stw	r2,0(sp)
811395f4:	000f883a 	mov	r7,zero
811395f8:	e1bffe17 	ldw	r6,-8(fp)
811395fc:	e17ffd17 	ldw	r5,-12(fp)
81139600:	e13ffc17 	ldw	r4,-16(fp)
81139604:	11392b40 	call	811392b4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81139608:	e037883a 	mov	sp,fp
8113960c:	dfc00117 	ldw	ra,4(sp)
81139610:	df000017 	ldw	fp,0(sp)
81139614:	dec00204 	addi	sp,sp,8
81139618:	f800283a 	ret

8113961c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113961c:	deffee04 	addi	sp,sp,-72
81139620:	de00012e 	bgeu	sp,et,81139628 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
81139624:	003b68fa 	trap	3
81139628:	dfc01115 	stw	ra,68(sp)
8113962c:	df001015 	stw	fp,64(sp)
81139630:	df001004 	addi	fp,sp,64
81139634:	e13ff915 	stw	r4,-28(fp)
81139638:	e17ffa15 	stw	r5,-24(fp)
8113963c:	e1bffb15 	stw	r6,-20(fp)
81139640:	e1fffc15 	stw	r7,-16(fp)
81139644:	e1000417 	ldw	r4,16(fp)
81139648:	e0c00517 	ldw	r3,20(fp)
8113964c:	e0800617 	ldw	r2,24(fp)
81139650:	e13ffd0d 	sth	r4,-12(fp)
81139654:	e0fffe05 	stb	r3,-8(fp)
81139658:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113965c:	e0bffd0b 	ldhu	r2,-12(fp)
81139660:	e0fffe03 	ldbu	r3,-8(fp)
81139664:	e13fff0b 	ldhu	r4,-4(fp)
81139668:	d9000815 	stw	r4,32(sp)
8113966c:	d8000715 	stw	zero,28(sp)
81139670:	d8c00615 	stw	r3,24(sp)
81139674:	d8000515 	stw	zero,20(sp)
81139678:	d8800415 	stw	r2,16(sp)
8113967c:	e0800317 	ldw	r2,12(fp)
81139680:	d8800315 	stw	r2,12(sp)
81139684:	e0800217 	ldw	r2,8(fp)
81139688:	d8800215 	stw	r2,8(sp)
8113968c:	e0bffc17 	ldw	r2,-16(fp)
81139690:	d8800115 	stw	r2,4(sp)
81139694:	e0bffb17 	ldw	r2,-20(fp)
81139698:	d8800015 	stw	r2,0(sp)
8113969c:	000f883a 	mov	r7,zero
811396a0:	000d883a 	mov	r6,zero
811396a4:	e17ffa17 	ldw	r5,-24(fp)
811396a8:	e13ff917 	ldw	r4,-28(fp)
811396ac:	11393600 	call	81139360 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
811396b0:	e037883a 	mov	sp,fp
811396b4:	dfc00117 	ldw	ra,4(sp)
811396b8:	df000017 	ldw	fp,0(sp)
811396bc:	dec00204 	addi	sp,sp,8
811396c0:	f800283a 	ret

811396c4 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
811396c4:	deffee04 	addi	sp,sp,-72
811396c8:	de00012e 	bgeu	sp,et,811396d0 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
811396cc:	003b68fa 	trap	3
811396d0:	dfc01115 	stw	ra,68(sp)
811396d4:	df001015 	stw	fp,64(sp)
811396d8:	df001004 	addi	fp,sp,64
811396dc:	e13ff915 	stw	r4,-28(fp)
811396e0:	e17ffa15 	stw	r5,-24(fp)
811396e4:	e1bffb15 	stw	r6,-20(fp)
811396e8:	e1fffc15 	stw	r7,-16(fp)
811396ec:	e1000417 	ldw	r4,16(fp)
811396f0:	e0c00517 	ldw	r3,20(fp)
811396f4:	e0800617 	ldw	r2,24(fp)
811396f8:	e13ffd0d 	sth	r4,-12(fp)
811396fc:	e0fffe05 	stb	r3,-8(fp)
81139700:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81139704:	e0bffd0b 	ldhu	r2,-12(fp)
81139708:	e0fffe03 	ldbu	r3,-8(fp)
8113970c:	e13fff0b 	ldhu	r4,-4(fp)
81139710:	d8000815 	stw	zero,32(sp)
81139714:	d9000715 	stw	r4,28(sp)
81139718:	d8000615 	stw	zero,24(sp)
8113971c:	d8c00515 	stw	r3,20(sp)
81139720:	d8800415 	stw	r2,16(sp)
81139724:	e0800317 	ldw	r2,12(fp)
81139728:	d8800315 	stw	r2,12(sp)
8113972c:	e0800217 	ldw	r2,8(fp)
81139730:	d8800215 	stw	r2,8(sp)
81139734:	d8000115 	stw	zero,4(sp)
81139738:	d8000015 	stw	zero,0(sp)
8113973c:	e1fffc17 	ldw	r7,-16(fp)
81139740:	e1bffb17 	ldw	r6,-20(fp)
81139744:	e17ffa17 	ldw	r5,-24(fp)
81139748:	e13ff917 	ldw	r4,-28(fp)
8113974c:	11393600 	call	81139360 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81139750:	e037883a 	mov	sp,fp
81139754:	dfc00117 	ldw	ra,4(sp)
81139758:	df000017 	ldw	fp,0(sp)
8113975c:	dec00204 	addi	sp,sp,8
81139760:	f800283a 	ret

81139764 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81139764:	deffec04 	addi	sp,sp,-80
81139768:	de00012e 	bgeu	sp,et,81139770 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113976c:	003b68fa 	trap	3
81139770:	dfc01315 	stw	ra,76(sp)
81139774:	df001215 	stw	fp,72(sp)
81139778:	df001204 	addi	fp,sp,72
8113977c:	e13ff715 	stw	r4,-36(fp)
81139780:	e17ff815 	stw	r5,-32(fp)
81139784:	e1bff915 	stw	r6,-28(fp)
81139788:	e1fffa15 	stw	r7,-24(fp)
8113978c:	e1800617 	ldw	r6,24(fp)
81139790:	e1400717 	ldw	r5,28(fp)
81139794:	e1000817 	ldw	r4,32(fp)
81139798:	e0c00917 	ldw	r3,36(fp)
8113979c:	e0800a17 	ldw	r2,40(fp)
811397a0:	e1bffb0d 	sth	r6,-20(fp)
811397a4:	e17ffc05 	stb	r5,-16(fp)
811397a8:	e13ffd05 	stb	r4,-12(fp)
811397ac:	e0fffe0d 	sth	r3,-8(fp)
811397b0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
811397b4:	e0bffb0b 	ldhu	r2,-20(fp)
811397b8:	e0fffc03 	ldbu	r3,-16(fp)
811397bc:	e13ffd03 	ldbu	r4,-12(fp)
811397c0:	e17ffe0b 	ldhu	r5,-8(fp)
811397c4:	e1bfff0b 	ldhu	r6,-4(fp)
811397c8:	d9800815 	stw	r6,32(sp)
811397cc:	d9400715 	stw	r5,28(sp)
811397d0:	d9000615 	stw	r4,24(sp)
811397d4:	d8c00515 	stw	r3,20(sp)
811397d8:	d8800415 	stw	r2,16(sp)
811397dc:	e0800517 	ldw	r2,20(fp)
811397e0:	d8800315 	stw	r2,12(sp)
811397e4:	e0800417 	ldw	r2,16(fp)
811397e8:	d8800215 	stw	r2,8(sp)
811397ec:	e0800317 	ldw	r2,12(fp)
811397f0:	d8800115 	stw	r2,4(sp)
811397f4:	e0800217 	ldw	r2,8(fp)
811397f8:	d8800015 	stw	r2,0(sp)
811397fc:	e1fffa17 	ldw	r7,-24(fp)
81139800:	e1bff917 	ldw	r6,-28(fp)
81139804:	e17ff817 	ldw	r5,-32(fp)
81139808:	e13ff717 	ldw	r4,-36(fp)
8113980c:	11393600 	call	81139360 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81139810:	e037883a 	mov	sp,fp
81139814:	dfc00117 	ldw	ra,4(sp)
81139818:	df000017 	ldw	fp,0(sp)
8113981c:	dec00204 	addi	sp,sp,8
81139820:	f800283a 	ret

81139824 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81139824:	defffc04 	addi	sp,sp,-16
81139828:	de00012e 	bgeu	sp,et,81139830 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
8113982c:	003b68fa 	trap	3
81139830:	df000315 	stw	fp,12(sp)
81139834:	df000304 	addi	fp,sp,12
81139838:	e13ffe15 	stw	r4,-8(fp)
8113983c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81139840:	e0bfff17 	ldw	r2,-4(fp)
81139844:	1000021e 	bne	r2,zero,81139850 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81139848:	00bffa84 	movi	r2,-22
8113984c:	00002f06 	br	8113990c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81139850:	e0bfff17 	ldw	r2,-4(fp)
81139854:	10c00317 	ldw	r3,12(r2)
81139858:	e0bfff17 	ldw	r2,-4(fp)
8113985c:	18800226 	beq	r3,r2,81139868 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81139860:	00bffa84 	movi	r2,-22
81139864:	00002906 	br	8113990c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
81139868:	e0bffe17 	ldw	r2,-8(fp)
8113986c:	10800017 	ldw	r2,0(r2)
81139870:	1000051e 	bne	r2,zero,81139888 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81139874:	e0bffe17 	ldw	r2,-8(fp)
81139878:	e0ffff17 	ldw	r3,-4(fp)
8113987c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81139880:	0005883a 	mov	r2,zero
81139884:	00002106 	br	8113990c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
81139888:	e0bffe17 	ldw	r2,-8(fp)
8113988c:	10c00017 	ldw	r3,0(r2)
81139890:	e0bfff17 	ldw	r2,-4(fp)
81139894:	1880021e 	bne	r3,r2,811398a0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81139898:	00bffa84 	movi	r2,-22
8113989c:	00001b06 	br	8113990c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811398a0:	e0bffe17 	ldw	r2,-8(fp)
811398a4:	10800017 	ldw	r2,0(r2)
811398a8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
811398ac:	00000906 	br	811398d4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
811398b0:	e0bffd17 	ldw	r2,-12(fp)
811398b4:	10c00317 	ldw	r3,12(r2)
811398b8:	e0bfff17 	ldw	r2,-4(fp)
811398bc:	1880021e 	bne	r3,r2,811398c8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
811398c0:	00bffa84 	movi	r2,-22
811398c4:	00001106 	br	8113990c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
811398c8:	e0bffd17 	ldw	r2,-12(fp)
811398cc:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
811398d0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
811398d4:	e0bffd17 	ldw	r2,-12(fp)
811398d8:	10800317 	ldw	r2,12(r2)
811398dc:	e0fffe17 	ldw	r3,-8(fp)
811398e0:	18c00017 	ldw	r3,0(r3)
811398e4:	10fff21e 	bne	r2,r3,811398b0 <__reset+0xfb1198b0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
811398e8:	e0ffff17 	ldw	r3,-4(fp)
811398ec:	e0bffd17 	ldw	r2,-12(fp)
811398f0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
811398f4:	e0bffe17 	ldw	r2,-8(fp)
811398f8:	10800017 	ldw	r2,0(r2)
811398fc:	1007883a 	mov	r3,r2
81139900:	e0bfff17 	ldw	r2,-4(fp)
81139904:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81139908:	0005883a 	mov	r2,zero
}
8113990c:	e037883a 	mov	sp,fp
81139910:	df000017 	ldw	fp,0(sp)
81139914:	dec00104 	addi	sp,sp,4
81139918:	f800283a 	ret

8113991c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113991c:	defff804 	addi	sp,sp,-32
81139920:	de00012e 	bgeu	sp,et,81139928 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
81139924:	003b68fa 	trap	3
81139928:	df000715 	stw	fp,28(sp)
8113992c:	df000704 	addi	fp,sp,28
81139930:	e13ffe15 	stw	r4,-8(fp)
81139934:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81139938:	e13fff17 	ldw	r4,-4(fp)
8113993c:	2000021e 	bne	r4,zero,81139948 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81139940:	00bffa84 	movi	r2,-22
81139944:	00005906 	br	81139aac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81139948:	e13fff17 	ldw	r4,-4(fp)
8113994c:	2015883a 	mov	r10,r4
81139950:	0017883a 	mov	r11,zero
81139954:	e2bffc15 	stw	r10,-16(fp)
81139958:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113995c:	e13fff17 	ldw	r4,-4(fp)
81139960:	21400317 	ldw	r5,12(r4)
81139964:	e13ffc17 	ldw	r4,-16(fp)
81139968:	29000626 	beq	r5,r4,81139984 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113996c:	e13fff17 	ldw	r4,-4(fp)
81139970:	21400b17 	ldw	r5,44(r4)
81139974:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81139978:	29000226 	beq	r5,r4,81139984 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113997c:	00bffa84 	movi	r2,-22
81139980:	00004a06 	br	81139aac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
81139984:	e13ffe17 	ldw	r4,-8(fp)
81139988:	21000017 	ldw	r4,0(r4)
8113998c:	2000051e 	bne	r4,zero,811399a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81139990:	e0bffe17 	ldw	r2,-8(fp)
81139994:	e0ffff17 	ldw	r3,-4(fp)
81139998:	10c00015 	stw	r3,0(r2)
		return 0;
8113999c:	0005883a 	mov	r2,zero
811399a0:	00004206 	br	81139aac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
811399a4:	e13ffe17 	ldw	r4,-8(fp)
811399a8:	21400017 	ldw	r5,0(r4)
811399ac:	e13fff17 	ldw	r4,-4(fp)
811399b0:	2900021e 	bne	r5,r4,811399bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811399b4:	00bffa84 	movi	r2,-22
811399b8:	00003c06 	br	81139aac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811399bc:	e13ffe17 	ldw	r4,-8(fp)
811399c0:	21000017 	ldw	r4,0(r4)
811399c4:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
811399c8:	e13ffe17 	ldw	r4,-8(fp)
811399cc:	21000017 	ldw	r4,0(r4)
811399d0:	2011883a 	mov	r8,r4
811399d4:	0013883a 	mov	r9,zero
811399d8:	e23ffa15 	stw	r8,-24(fp)
811399dc:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811399e0:	00001806 	br	81139a44 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
811399e4:	e13fff17 	ldw	r4,-4(fp)
811399e8:	200d883a 	mov	r6,r4
811399ec:	000f883a 	mov	r7,zero
811399f0:	e1bffc15 	stw	r6,-16(fp)
811399f4:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
811399f8:	e13ff917 	ldw	r4,-28(fp)
811399fc:	21400317 	ldw	r5,12(r4)
81139a00:	e13ffc17 	ldw	r4,-16(fp)
81139a04:	2900061e 	bne	r5,r4,81139a20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81139a08:	e13ff917 	ldw	r4,-28(fp)
81139a0c:	21400b17 	ldw	r5,44(r4)
81139a10:	e13ffd17 	ldw	r4,-12(fp)
81139a14:	2900021e 	bne	r5,r4,81139a20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81139a18:	00bffa84 	movi	r2,-22
81139a1c:	00002306 	br	81139aac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81139a20:	e13ff917 	ldw	r4,-28(fp)
81139a24:	21000317 	ldw	r4,12(r4)
81139a28:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81139a2c:	e13ff917 	ldw	r4,-28(fp)
81139a30:	21000b17 	ldw	r4,44(r4)
81139a34:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81139a38:	e13ffc17 	ldw	r4,-16(fp)
81139a3c:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81139a40:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81139a44:	e13ff917 	ldw	r4,-28(fp)
81139a48:	21400317 	ldw	r5,12(r4)
81139a4c:	e13ffa17 	ldw	r4,-24(fp)
81139a50:	29000426 	beq	r5,r4,81139a64 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81139a54:	e13ff917 	ldw	r4,-28(fp)
81139a58:	21400b17 	ldw	r5,44(r4)
81139a5c:	e13ffb17 	ldw	r4,-20(fp)
81139a60:	293fe01e 	bne	r5,r4,811399e4 <__reset+0xfb1199e4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81139a64:	e13fff17 	ldw	r4,-4(fp)
81139a68:	2005883a 	mov	r2,r4
81139a6c:	0007883a 	mov	r3,zero
81139a70:	e0bffc15 	stw	r2,-16(fp)
81139a74:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81139a78:	e0fffc17 	ldw	r3,-16(fp)
81139a7c:	e0bff917 	ldw	r2,-28(fp)
81139a80:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81139a84:	e0fffd17 	ldw	r3,-12(fp)
81139a88:	e0bff917 	ldw	r2,-28(fp)
81139a8c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81139a90:	e0fffa17 	ldw	r3,-24(fp)
81139a94:	e0bfff17 	ldw	r2,-4(fp)
81139a98:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81139a9c:	e0fffb17 	ldw	r3,-20(fp)
81139aa0:	e0bfff17 	ldw	r2,-4(fp)
81139aa4:	10c00b15 	stw	r3,44(r2)
	return 0;
81139aa8:	0005883a 	mov	r2,zero
}
81139aac:	e037883a 	mov	sp,fp
81139ab0:	df000017 	ldw	fp,0(sp)
81139ab4:	dec00104 	addi	sp,sp,4
81139ab8:	f800283a 	ret

81139abc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81139abc:	defffc04 	addi	sp,sp,-16
81139ac0:	de00012e 	bgeu	sp,et,81139ac8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
81139ac4:	003b68fa 	trap	3
81139ac8:	df000315 	stw	fp,12(sp)
81139acc:	df000304 	addi	fp,sp,12
81139ad0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81139ad4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81139ad8:	e0bfff17 	ldw	r2,-4(fp)
81139adc:	1000021e 	bne	r2,zero,81139ae8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81139ae0:	00bffa84 	movi	r2,-22
81139ae4:	00001906 	br	81139b4c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81139ae8:	e0bfff17 	ldw	r2,-4(fp)
81139aec:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81139af0:	00000a06 	br	81139b1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81139af4:	e0bffd17 	ldw	r2,-12(fp)
81139af8:	10800717 	ldw	r2,28(r2)
81139afc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139b00:	e0bffe17 	ldw	r2,-8(fp)
81139b04:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81139b08:	e0bffd17 	ldw	r2,-12(fp)
81139b0c:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81139b10:	e0bffd17 	ldw	r2,-12(fp)
81139b14:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81139b18:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81139b1c:	e0bffd17 	ldw	r2,-12(fp)
81139b20:	10c00317 	ldw	r3,12(r2)
81139b24:	e0bfff17 	ldw	r2,-4(fp)
81139b28:	18bff21e 	bne	r3,r2,81139af4 <__reset+0xfb119af4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81139b2c:	e0bffd17 	ldw	r2,-12(fp)
81139b30:	10800717 	ldw	r2,28(r2)
81139b34:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139b38:	e0bffe17 	ldw	r2,-8(fp)
81139b3c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81139b40:	e0bffd17 	ldw	r2,-12(fp)
81139b44:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81139b48:	0005883a 	mov	r2,zero
}
81139b4c:	e037883a 	mov	sp,fp
81139b50:	df000017 	ldw	fp,0(sp)
81139b54:	dec00104 	addi	sp,sp,4
81139b58:	f800283a 	ret

81139b5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81139b5c:	defff804 	addi	sp,sp,-32
81139b60:	de00012e 	bgeu	sp,et,81139b68 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
81139b64:	003b68fa 	trap	3
81139b68:	df000715 	stw	fp,28(sp)
81139b6c:	df000704 	addi	fp,sp,28
81139b70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81139b74:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81139b78:	e13fff17 	ldw	r4,-4(fp)
81139b7c:	2000021e 	bne	r4,zero,81139b88 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81139b80:	00bffa84 	movi	r2,-22
81139b84:	00002806 	br	81139c28 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81139b88:	e13fff17 	ldw	r4,-4(fp)
81139b8c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
81139b90:	e13fff17 	ldw	r4,-4(fp)
81139b94:	2005883a 	mov	r2,r4
81139b98:	0007883a 	mov	r3,zero
81139b9c:	e0bffb15 	stw	r2,-20(fp)
81139ba0:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81139ba4:	00001006 	br	81139be8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81139ba8:	e0bff917 	ldw	r2,-28(fp)
81139bac:	10800f17 	ldw	r2,60(r2)
81139bb0:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139bb4:	e0bffa17 	ldw	r2,-24(fp)
81139bb8:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81139bbc:	e0bff917 	ldw	r2,-28(fp)
81139bc0:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81139bc4:	e0bff917 	ldw	r2,-28(fp)
81139bc8:	10800317 	ldw	r2,12(r2)
81139bcc:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81139bd0:	e0bff917 	ldw	r2,-28(fp)
81139bd4:	10800b17 	ldw	r2,44(r2)
81139bd8:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81139bdc:	e0bffd17 	ldw	r2,-12(fp)
81139be0:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81139be4:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81139be8:	e0bff917 	ldw	r2,-28(fp)
81139bec:	10c00317 	ldw	r3,12(r2)
81139bf0:	e0bffb17 	ldw	r2,-20(fp)
81139bf4:	18800426 	beq	r3,r2,81139c08 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81139bf8:	e0bff917 	ldw	r2,-28(fp)
81139bfc:	10c00b17 	ldw	r3,44(r2)
81139c00:	e0bffc17 	ldw	r2,-16(fp)
81139c04:	18bfe81e 	bne	r3,r2,81139ba8 <__reset+0xfb119ba8>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81139c08:	e0bff917 	ldw	r2,-28(fp)
81139c0c:	10800f17 	ldw	r2,60(r2)
81139c10:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139c14:	e0bffa17 	ldw	r2,-24(fp)
81139c18:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81139c1c:	e0bff917 	ldw	r2,-28(fp)
81139c20:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81139c24:	0005883a 	mov	r2,zero
}
81139c28:	e037883a 	mov	sp,fp
81139c2c:	df000017 	ldw	fp,0(sp)
81139c30:	dec00104 	addi	sp,sp,4
81139c34:	f800283a 	ret

81139c38 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81139c38:	deffeb04 	addi	sp,sp,-84
81139c3c:	de00012e 	bgeu	sp,et,81139c44 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
81139c40:	003b68fa 	trap	3
81139c44:	dfc01415 	stw	ra,80(sp)
81139c48:	df001315 	stw	fp,76(sp)
81139c4c:	df001304 	addi	fp,sp,76
81139c50:	e13ffb15 	stw	r4,-20(fp)
81139c54:	e17ffc15 	stw	r5,-16(fp)
81139c58:	e1bffd15 	stw	r6,-12(fp)
81139c5c:	3807883a 	mov	r3,r7
81139c60:	e0800217 	ldw	r2,8(fp)
81139c64:	e0fffe05 	stb	r3,-8(fp)
81139c68:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81139c6c:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
81139c70:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81139c74:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81139c78:	e0bffc17 	ldw	r2,-16(fp)
81139c7c:	e0bff815 	stw	r2,-32(fp)
81139c80:	e0bffd17 	ldw	r2,-12(fp)
81139c84:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
81139c88:	e0bffb17 	ldw	r2,-20(fp)
81139c8c:	10801817 	ldw	r2,96(r2)
81139c90:	e0bff615 	stw	r2,-40(fp)
81139c94:	e03ff70d 	sth	zero,-36(fp)
81139c98:	e0bff70b 	ldhu	r2,-36(fp)
81139c9c:	e0fffa04 	addi	r3,fp,-24
81139ca0:	180d883a 	mov	r6,r3
81139ca4:	100b883a 	mov	r5,r2
81139ca8:	e13ff617 	ldw	r4,-40(fp)
81139cac:	112ee780 	call	8112ee78 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81139cb0:	e0bffb17 	ldw	r2,-20(fp)
81139cb4:	10800617 	ldw	r2,24(r2)
81139cb8:	10800037 	ldwio	r2,0(r2)
81139cbc:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81139cc0:	e0bfed17 	ldw	r2,-76(fp)
81139cc4:	1080004c 	andi	r2,r2,1
81139cc8:	10000626 	beq	r2,zero,81139ce4 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
81139ccc:	e0bffb17 	ldw	r2,-20(fp)
81139cd0:	10801817 	ldw	r2,96(r2)
81139cd4:	1009883a 	mov	r4,r2
81139cd8:	112f2000 	call	8112f200 <OSSemPost>
		return -EBUSY;
81139cdc:	00bffc04 	movi	r2,-16
81139ce0:	00009606 	br	81139f3c <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81139ce4:	00800804 	movi	r2,32
81139ce8:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139cec:	0005303a 	rdctl	r2,status
81139cf0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139cf4:	e0fff217 	ldw	r3,-56(fp)
81139cf8:	00bfff84 	movi	r2,-2
81139cfc:	1884703a 	and	r2,r3,r2
81139d00:	1001703a 	wrctl	status,r2
  
  return context;
81139d04:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81139d08:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139d0c:	e0bffb17 	ldw	r2,-20(fp)
81139d10:	10800317 	ldw	r2,12(r2)
81139d14:	10800104 	addi	r2,r2,4
81139d18:	e0ffee17 	ldw	r3,-72(fp)
81139d1c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81139d20:	e0bffb17 	ldw	r2,-20(fp)
81139d24:	10800317 	ldw	r2,12(r2)
81139d28:	e0fffb17 	ldw	r3,-20(fp)
81139d2c:	18c00317 	ldw	r3,12(r3)
81139d30:	18c00037 	ldwio	r3,0(r3)
81139d34:	10c00035 	stwio	r3,0(r2)
81139d38:	e0bfef17 	ldw	r2,-68(fp)
81139d3c:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139d40:	e0bff017 	ldw	r2,-64(fp)
81139d44:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81139d48:	e0bffb17 	ldw	r2,-20(fp)
81139d4c:	10800b17 	ldw	r2,44(r2)
81139d50:	10002326 	beq	r2,zero,81139de0 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81139d54:	e0bffb17 	ldw	r2,-20(fp)
81139d58:	10c00d17 	ldw	r3,52(r2)
81139d5c:	e0bfee17 	ldw	r2,-72(fp)
81139d60:	1884b03a 	or	r2,r3,r2
81139d64:	10800514 	ori	r2,r2,20
81139d68:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81139d6c:	e0ffee17 	ldw	r3,-72(fp)
81139d70:	00bff7c4 	movi	r2,-33
81139d74:	1884703a 	and	r2,r3,r2
81139d78:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81139d7c:	e0bfed17 	ldw	r2,-76(fp)
81139d80:	10800214 	ori	r2,r2,8
81139d84:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139d88:	0005303a 	rdctl	r2,status
81139d8c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139d90:	e0fff417 	ldw	r3,-48(fp)
81139d94:	00bfff84 	movi	r2,-2
81139d98:	1884703a 	and	r2,r3,r2
81139d9c:	1001703a 	wrctl	status,r2
  
  return context;
81139da0:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81139da4:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139da8:	e0bffb17 	ldw	r2,-20(fp)
81139dac:	10800317 	ldw	r2,12(r2)
81139db0:	10800104 	addi	r2,r2,4
81139db4:	e0ffee17 	ldw	r3,-72(fp)
81139db8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139dbc:	e0bffb17 	ldw	r2,-20(fp)
81139dc0:	10800617 	ldw	r2,24(r2)
81139dc4:	e0ffed17 	ldw	r3,-76(fp)
81139dc8:	10c00035 	stwio	r3,0(r2)
81139dcc:	e0bfef17 	ldw	r2,-68(fp)
81139dd0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139dd4:	e0bff117 	ldw	r2,-60(fp)
81139dd8:	1001703a 	wrctl	status,r2
81139ddc:	00002306 	br	81139e6c <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81139de0:	e0bffb17 	ldw	r2,-20(fp)
81139de4:	10c00d17 	ldw	r3,52(r2)
81139de8:	e0bfee17 	ldw	r2,-72(fp)
81139dec:	1884b03a 	or	r2,r3,r2
81139df0:	10800114 	ori	r2,r2,4
81139df4:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81139df8:	e0ffee17 	ldw	r3,-72(fp)
81139dfc:	00bff3c4 	movi	r2,-49
81139e00:	1884703a 	and	r2,r3,r2
81139e04:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81139e08:	e0ffed17 	ldw	r3,-76(fp)
81139e0c:	00bffdc4 	movi	r2,-9
81139e10:	1884703a 	and	r2,r3,r2
81139e14:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139e18:	0005303a 	rdctl	r2,status
81139e1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139e20:	e0fff517 	ldw	r3,-44(fp)
81139e24:	00bfff84 	movi	r2,-2
81139e28:	1884703a 	and	r2,r3,r2
81139e2c:	1001703a 	wrctl	status,r2
  
  return context;
81139e30:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81139e34:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139e38:	e0bffb17 	ldw	r2,-20(fp)
81139e3c:	10800317 	ldw	r2,12(r2)
81139e40:	10800104 	addi	r2,r2,4
81139e44:	e0ffee17 	ldw	r3,-72(fp)
81139e48:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139e4c:	e0bffb17 	ldw	r2,-20(fp)
81139e50:	10800617 	ldw	r2,24(r2)
81139e54:	e0ffed17 	ldw	r3,-76(fp)
81139e58:	10c00035 	stwio	r3,0(r2)
81139e5c:	e0bfef17 	ldw	r2,-68(fp)
81139e60:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139e64:	e0bff317 	ldw	r2,-52(fp)
81139e68:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81139e6c:	e0bffb17 	ldw	r2,-20(fp)
81139e70:	10800617 	ldw	r2,24(r2)
81139e74:	10800104 	addi	r2,r2,4
81139e78:	e0fff817 	ldw	r3,-32(fp)
81139e7c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81139e80:	e0bffb17 	ldw	r2,-20(fp)
81139e84:	10800617 	ldw	r2,24(r2)
81139e88:	10800204 	addi	r2,r2,8
81139e8c:	e0fff917 	ldw	r3,-28(fp)
81139e90:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81139e94:	e0bffe03 	ldbu	r2,-8(fp)
81139e98:	10000426 	beq	r2,zero,81139eac <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81139e9c:	e0bfed17 	ldw	r2,-76(fp)
81139ea0:	10800414 	ori	r2,r2,16
81139ea4:	e0bfed15 	stw	r2,-76(fp)
81139ea8:	00000406 	br	81139ebc <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
81139eac:	e0ffed17 	ldw	r3,-76(fp)
81139eb0:	00bffbc4 	movi	r2,-17
81139eb4:	1884703a 	and	r2,r3,r2
81139eb8:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
81139ebc:	e0bfff03 	ldbu	r2,-4(fp)
81139ec0:	10000e26 	beq	r2,zero,81139efc <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81139ec4:	e0bfed17 	ldw	r2,-76(fp)
81139ec8:	10800094 	ori	r2,r2,2
81139ecc:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81139ed0:	e0bffb17 	ldw	r2,-20(fp)
81139ed4:	10800617 	ldw	r2,24(r2)
81139ed8:	10800304 	addi	r2,r2,12
81139edc:	10800037 	ldwio	r2,0(r2)
81139ee0:	10000a1e 	bne	r2,zero,81139f0c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81139ee4:	e0bffb17 	ldw	r2,-20(fp)
81139ee8:	10800617 	ldw	r2,24(r2)
81139eec:	10800304 	addi	r2,r2,12
81139ef0:	00c03fc4 	movi	r3,255
81139ef4:	10c00035 	stwio	r3,0(r2)
81139ef8:	00000406 	br	81139f0c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81139efc:	e0ffed17 	ldw	r3,-76(fp)
81139f00:	00bfff44 	movi	r2,-3
81139f04:	1884703a 	and	r2,r3,r2
81139f08:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81139f0c:	e0bfed17 	ldw	r2,-76(fp)
81139f10:	10800054 	ori	r2,r2,1
81139f14:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139f18:	e0bffb17 	ldw	r2,-20(fp)
81139f1c:	10800617 	ldw	r2,24(r2)
81139f20:	e0ffed17 	ldw	r3,-76(fp)
81139f24:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81139f28:	e0bffb17 	ldw	r2,-20(fp)
81139f2c:	10801817 	ldw	r2,96(r2)
81139f30:	1009883a 	mov	r4,r2
81139f34:	112f2000 	call	8112f200 <OSSemPost>
	 
	 return 0;
81139f38:	0005883a 	mov	r2,zero
}
81139f3c:	e037883a 	mov	sp,fp
81139f40:	dfc00117 	ldw	ra,4(sp)
81139f44:	df000017 	ldw	fp,0(sp)
81139f48:	dec00204 	addi	sp,sp,8
81139f4c:	f800283a 	ret

81139f50 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81139f50:	defff704 	addi	sp,sp,-36
81139f54:	de00012e 	bgeu	sp,et,81139f5c <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
81139f58:	003b68fa 	trap	3
81139f5c:	dfc00815 	stw	ra,32(sp)
81139f60:	df000715 	stw	fp,28(sp)
81139f64:	dc400615 	stw	r17,24(sp)
81139f68:	dc000515 	stw	r16,20(sp)
81139f6c:	df000704 	addi	fp,sp,28
81139f70:	e13ffa15 	stw	r4,-24(fp)
81139f74:	e17ffb15 	stw	r5,-20(fp)
81139f78:	3007883a 	mov	r3,r6
81139f7c:	3805883a 	mov	r2,r7
81139f80:	e0fffc05 	stb	r3,-16(fp)
81139f84:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81139f88:	e13ffb17 	ldw	r4,-20(fp)
81139f8c:	1139abc0 	call	81139abc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81139f90:	10000226 	beq	r2,zero,81139f9c <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
81139f94:	00bffa84 	movi	r2,-22
81139f98:	00000b06 	br	81139fc8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81139f9c:	e0bffb17 	ldw	r2,-20(fp)
81139fa0:	1021883a 	mov	r16,r2
81139fa4:	0023883a 	mov	r17,zero
81139fa8:	e0fffc03 	ldbu	r3,-16(fp)
81139fac:	e0bffd03 	ldbu	r2,-12(fp)
81139fb0:	d8800015 	stw	r2,0(sp)
81139fb4:	180f883a 	mov	r7,r3
81139fb8:	800b883a 	mov	r5,r16
81139fbc:	880d883a 	mov	r6,r17
81139fc0:	e13ffa17 	ldw	r4,-24(fp)
81139fc4:	1139c380 	call	81139c38 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81139fc8:	e6fffe04 	addi	sp,fp,-8
81139fcc:	dfc00317 	ldw	ra,12(sp)
81139fd0:	df000217 	ldw	fp,8(sp)
81139fd4:	dc400117 	ldw	r17,4(sp)
81139fd8:	dc000017 	ldw	r16,0(sp)
81139fdc:	dec00404 	addi	sp,sp,16
81139fe0:	f800283a 	ret

81139fe4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81139fe4:	defff704 	addi	sp,sp,-36
81139fe8:	de00012e 	bgeu	sp,et,81139ff0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
81139fec:	003b68fa 	trap	3
81139ff0:	dfc00815 	stw	ra,32(sp)
81139ff4:	df000715 	stw	fp,28(sp)
81139ff8:	dc400615 	stw	r17,24(sp)
81139ffc:	dc000515 	stw	r16,20(sp)
8113a000:	df000704 	addi	fp,sp,28
8113a004:	e13ffa15 	stw	r4,-24(fp)
8113a008:	e17ffb15 	stw	r5,-20(fp)
8113a00c:	3007883a 	mov	r3,r6
8113a010:	3805883a 	mov	r2,r7
8113a014:	e0fffc05 	stb	r3,-16(fp)
8113a018:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8113a01c:	e13ffb17 	ldw	r4,-20(fp)
8113a020:	1139b5c0 	call	81139b5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113a024:	10000226 	beq	r2,zero,8113a030 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
8113a028:	00bffa84 	movi	r2,-22
8113a02c:	00000b06 	br	8113a05c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113a030:	e0bffb17 	ldw	r2,-20(fp)
8113a034:	1021883a 	mov	r16,r2
8113a038:	0023883a 	mov	r17,zero
8113a03c:	e0fffc03 	ldbu	r3,-16(fp)
8113a040:	e0bffd03 	ldbu	r2,-12(fp)
8113a044:	d8800015 	stw	r2,0(sp)
8113a048:	180f883a 	mov	r7,r3
8113a04c:	800b883a 	mov	r5,r16
8113a050:	880d883a 	mov	r6,r17
8113a054:	e13ffa17 	ldw	r4,-24(fp)
8113a058:	1139c380 	call	81139c38 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113a05c:	e6fffe04 	addi	sp,fp,-8
8113a060:	dfc00317 	ldw	ra,12(sp)
8113a064:	df000217 	ldw	fp,8(sp)
8113a068:	dc400117 	ldw	r17,4(sp)
8113a06c:	dc000017 	ldw	r16,0(sp)
8113a070:	dec00404 	addi	sp,sp,16
8113a074:	f800283a 	ret

8113a078 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113a078:	defffc04 	addi	sp,sp,-16
8113a07c:	de00012e 	bgeu	sp,et,8113a084 <alt_msgdma_open+0xc>
8113a080:	003b68fa 	trap	3
8113a084:	dfc00315 	stw	ra,12(sp)
8113a088:	df000215 	stw	fp,8(sp)
8113a08c:	df000204 	addi	fp,sp,8
8113a090:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8113a094:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8113a098:	d1603404 	addi	r5,gp,-32560
8113a09c:	e13fff17 	ldw	r4,-4(fp)
8113a0a0:	113a6ec0 	call	8113a6ec <alt_find_dev>
8113a0a4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8113a0a8:	e0bffe17 	ldw	r2,-8(fp)
8113a0ac:	1000041e 	bne	r2,zero,8113a0c0 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
8113a0b0:	11382dc0 	call	811382dc <alt_get_errno>
8113a0b4:	1007883a 	mov	r3,r2
8113a0b8:	008004c4 	movi	r2,19
8113a0bc:	18800015 	stw	r2,0(r3)
    }

    return dev;
8113a0c0:	e0bffe17 	ldw	r2,-8(fp)
}
8113a0c4:	e037883a 	mov	sp,fp
8113a0c8:	dfc00117 	ldw	ra,4(sp)
8113a0cc:	df000017 	ldw	fp,0(sp)
8113a0d0:	dec00204 	addi	sp,sp,8
8113a0d4:	f800283a 	ret

8113a0d8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8113a0d8:	defff604 	addi	sp,sp,-40
8113a0dc:	de00012e 	bgeu	sp,et,8113a0e4 <alt_msgdma_init+0xc>
8113a0e0:	003b68fa 	trap	3
8113a0e4:	dfc00915 	stw	ra,36(sp)
8113a0e8:	df000815 	stw	fp,32(sp)
8113a0ec:	df000804 	addi	fp,sp,32
8113a0f0:	e13ffd15 	stw	r4,-12(fp)
8113a0f4:	e17ffe15 	stw	r5,-8(fp)
8113a0f8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8113a0fc:	e0bffd17 	ldw	r2,-12(fp)
8113a100:	10801783 	ldbu	r2,94(r2)
8113a104:	10803fcc 	andi	r2,r2,255
8113a108:	10000b26 	beq	r2,zero,8113a138 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8113a10c:	e0bffd17 	ldw	r2,-12(fp)
8113a110:	10800617 	ldw	r2,24(r2)
8113a114:	00c00104 	movi	r3,4
8113a118:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8113a11c:	0001883a 	nop
8113a120:	e0bffd17 	ldw	r2,-12(fp)
8113a124:	10800617 	ldw	r2,24(r2)
8113a128:	10800037 	ldwio	r2,0(r2)
8113a12c:	1080010c 	andi	r2,r2,4
8113a130:	1005d0ba 	srai	r2,r2,2
8113a134:	103ffa1e 	bne	r2,zero,8113a120 <__reset+0xfb11a120>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113a138:	e0bffd17 	ldw	r2,-12(fp)
8113a13c:	10800317 	ldw	r2,12(r2)
8113a140:	10800104 	addi	r2,r2,4
8113a144:	00c00084 	movi	r3,2
8113a148:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113a14c:	0001883a 	nop
8113a150:	e0bffd17 	ldw	r2,-12(fp)
8113a154:	10800317 	ldw	r2,12(r2)
8113a158:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8113a15c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113a160:	103ffb1e 	bne	r2,zero,8113a150 <__reset+0xfb11a150>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113a164:	e0bffd17 	ldw	r2,-12(fp)
8113a168:	10800317 	ldw	r2,12(r2)
8113a16c:	10800104 	addi	r2,r2,4
8113a170:	10800037 	ldwio	r2,0(r2)
8113a174:	1007883a 	mov	r3,r2
8113a178:	00bffbc4 	movi	r2,-17
8113a17c:	1884703a 	and	r2,r3,r2
8113a180:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113a184:	e0bff917 	ldw	r2,-28(fp)
8113a188:	10800814 	ori	r2,r2,32
8113a18c:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113a190:	e0bffd17 	ldw	r2,-12(fp)
8113a194:	10800317 	ldw	r2,12(r2)
8113a198:	10800104 	addi	r2,r2,4
8113a19c:	e0fff917 	ldw	r3,-28(fp)
8113a1a0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8113a1a4:	e0bffd17 	ldw	r2,-12(fp)
8113a1a8:	10800317 	ldw	r2,12(r2)
8113a1ac:	e0fffd17 	ldw	r3,-12(fp)
8113a1b0:	18c00317 	ldw	r3,12(r3)
8113a1b4:	18c00037 	ldwio	r3,0(r3)
8113a1b8:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113a1bc:	e0bffd17 	ldw	r2,-12(fp)
8113a1c0:	10801783 	ldbu	r2,94(r2)
8113a1c4:	10803fcc 	andi	r2,r2,255
8113a1c8:	10000826 	beq	r2,zero,8113a1ec <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113a1cc:	e0bffd17 	ldw	r2,-12(fp)
8113a1d0:	10800617 	ldw	r2,24(r2)
8113a1d4:	10800404 	addi	r2,r2,16
8113a1d8:	e0fffd17 	ldw	r3,-12(fp)
8113a1dc:	18c00617 	ldw	r3,24(r3)
8113a1e0:	18c00404 	addi	r3,r3,16
8113a1e4:	18c00037 	ldwio	r3,0(r3)
8113a1e8:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113a1ec:	d1603404 	addi	r5,gp,-32560
8113a1f0:	e13ffd17 	ldw	r4,-12(fp)
8113a1f4:	113a5700 	call	8113a570 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113a1f8:	e0bffd17 	ldw	r2,-12(fp)
8113a1fc:	10801804 	addi	r2,r2,96
8113a200:	e0bffb15 	stw	r2,-20(fp)
8113a204:	00800044 	movi	r2,1
8113a208:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a20c:	e0bffc0b 	ldhu	r2,-16(fp)
8113a210:	1009883a 	mov	r4,r2
8113a214:	112eb500 	call	8112eb50 <OSSemCreate>
8113a218:	1007883a 	mov	r3,r2
8113a21c:	e0bffb17 	ldw	r2,-20(fp)
8113a220:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a224:	e0bffb17 	ldw	r2,-20(fp)
8113a228:	10800017 	ldw	r2,0(r2)
8113a22c:	10000226 	beq	r2,zero,8113a238 <alt_msgdma_init+0x160>
8113a230:	0005883a 	mov	r2,zero
8113a234:	00000106 	br	8113a23c <alt_msgdma_init+0x164>
8113a238:	00bfffc4 	movi	r2,-1
8113a23c:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113a240:	e0bffa17 	ldw	r2,-24(fp)
8113a244:	1000081e 	bne	r2,zero,8113a268 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113a248:	d8000015 	stw	zero,0(sp)
8113a24c:	e1fffd17 	ldw	r7,-12(fp)
8113a250:	01a04534 	movhi	r6,33044
8113a254:	31a13c04 	addi	r6,r6,-31504
8113a258:	e17fff17 	ldw	r5,-4(fp)
8113a25c:	e13ffe17 	ldw	r4,-8(fp)
8113a260:	113a9780 	call	8113a978 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113a264:	00000406 	br	8113a278 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113a268:	01204534 	movhi	r4,33044
8113a26c:	213b9e04 	addi	r4,r4,-4488
8113a270:	113ad900 	call	8113ad90 <alt_printf>
    }
    
    return;
8113a274:	0001883a 	nop

}
8113a278:	e037883a 	mov	sp,fp
8113a27c:	dfc00117 	ldw	ra,4(sp)
8113a280:	df000017 	ldw	fp,0(sp)
8113a284:	dec00204 	addi	sp,sp,8
8113a288:	f800283a 	ret

8113a28c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113a28c:	defffb04 	addi	sp,sp,-20
8113a290:	de00012e 	bgeu	sp,et,8113a298 <alt_msgdma_register_callback+0xc>
8113a294:	003b68fa 	trap	3
8113a298:	df000415 	stw	fp,16(sp)
8113a29c:	df000404 	addi	fp,sp,16
8113a2a0:	e13ffc15 	stw	r4,-16(fp)
8113a2a4:	e17ffd15 	stw	r5,-12(fp)
8113a2a8:	e1bffe15 	stw	r6,-8(fp)
8113a2ac:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113a2b0:	e0bffc17 	ldw	r2,-16(fp)
8113a2b4:	e0fffd17 	ldw	r3,-12(fp)
8113a2b8:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113a2bc:	e0bffc17 	ldw	r2,-16(fp)
8113a2c0:	e0ffff17 	ldw	r3,-4(fp)
8113a2c4:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113a2c8:	e0bffc17 	ldw	r2,-16(fp)
8113a2cc:	e0fffe17 	ldw	r3,-8(fp)
8113a2d0:	10c00d15 	stw	r3,52(r2)

    return ;
8113a2d4:	0001883a 	nop
}
8113a2d8:	e037883a 	mov	sp,fp
8113a2dc:	df000017 	ldw	fp,0(sp)
8113a2e0:	dec00104 	addi	sp,sp,4
8113a2e4:	f800283a 	ret

8113a2e8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113a2e8:	defffc04 	addi	sp,sp,-16
8113a2ec:	de00012e 	bgeu	sp,et,8113a2f4 <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113a2f0:	003b68fa 	trap	3
8113a2f4:	dfc00315 	stw	ra,12(sp)
8113a2f8:	df000215 	stw	fp,8(sp)
8113a2fc:	df000204 	addi	fp,sp,8
8113a300:	e13ffe15 	stw	r4,-8(fp)
8113a304:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113a308:	000d883a 	mov	r6,zero
8113a30c:	e17fff17 	ldw	r5,-4(fp)
8113a310:	e13ffe17 	ldw	r4,-8(fp)
8113a314:	113886c0 	call	8113886c <alt_msgdma_descriptor_async_transfer>

}
8113a318:	e037883a 	mov	sp,fp
8113a31c:	dfc00117 	ldw	ra,4(sp)
8113a320:	df000017 	ldw	fp,0(sp)
8113a324:	dec00204 	addi	sp,sp,8
8113a328:	f800283a 	ret

8113a32c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113a32c:	defffc04 	addi	sp,sp,-16
8113a330:	de00012e 	bgeu	sp,et,8113a338 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113a334:	003b68fa 	trap	3
8113a338:	dfc00315 	stw	ra,12(sp)
8113a33c:	df000215 	stw	fp,8(sp)
8113a340:	df000204 	addi	fp,sp,8
8113a344:	e13ffe15 	stw	r4,-8(fp)
8113a348:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113a34c:	e1bfff17 	ldw	r6,-4(fp)
8113a350:	000b883a 	mov	r5,zero
8113a354:	e13ffe17 	ldw	r4,-8(fp)
8113a358:	113886c0 	call	8113886c <alt_msgdma_descriptor_async_transfer>
}
8113a35c:	e037883a 	mov	sp,fp
8113a360:	dfc00117 	ldw	ra,4(sp)
8113a364:	df000017 	ldw	fp,0(sp)
8113a368:	dec00204 	addi	sp,sp,8
8113a36c:	f800283a 	ret

8113a370 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113a370:	defffc04 	addi	sp,sp,-16
8113a374:	de00012e 	bgeu	sp,et,8113a37c <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113a378:	003b68fa 	trap	3
8113a37c:	dfc00315 	stw	ra,12(sp)
8113a380:	df000215 	stw	fp,8(sp)
8113a384:	df000204 	addi	fp,sp,8
8113a388:	e13ffe15 	stw	r4,-8(fp)
8113a38c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113a390:	000d883a 	mov	r6,zero
8113a394:	e17fff17 	ldw	r5,-4(fp)
8113a398:	e13ffe17 	ldw	r4,-8(fp)
8113a39c:	1138bac0 	call	81138bac <alt_msgdma_descriptor_sync_transfer>
}
8113a3a0:	e037883a 	mov	sp,fp
8113a3a4:	dfc00117 	ldw	ra,4(sp)
8113a3a8:	df000017 	ldw	fp,0(sp)
8113a3ac:	dec00204 	addi	sp,sp,8
8113a3b0:	f800283a 	ret

8113a3b4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113a3b4:	defffc04 	addi	sp,sp,-16
8113a3b8:	de00012e 	bgeu	sp,et,8113a3c0 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113a3bc:	003b68fa 	trap	3
8113a3c0:	dfc00315 	stw	ra,12(sp)
8113a3c4:	df000215 	stw	fp,8(sp)
8113a3c8:	df000204 	addi	fp,sp,8
8113a3cc:	e13ffe15 	stw	r4,-8(fp)
8113a3d0:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113a3d4:	e1bfff17 	ldw	r6,-4(fp)
8113a3d8:	000b883a 	mov	r5,zero
8113a3dc:	e13ffe17 	ldw	r4,-8(fp)
8113a3e0:	1138bac0 	call	81138bac <alt_msgdma_descriptor_sync_transfer>
}
8113a3e4:	e037883a 	mov	sp,fp
8113a3e8:	dfc00117 	ldw	ra,4(sp)
8113a3ec:	df000017 	ldw	fp,0(sp)
8113a3f0:	dec00204 	addi	sp,sp,8
8113a3f4:	f800283a 	ret

8113a3f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113a3f8:	defff504 	addi	sp,sp,-44
8113a3fc:	de00012e 	bgeu	sp,et,8113a404 <alt_alarm_start+0xc>
8113a400:	003b68fa 	trap	3
8113a404:	df000a15 	stw	fp,40(sp)
8113a408:	df000a04 	addi	fp,sp,40
8113a40c:	e13ffc15 	stw	r4,-16(fp)
8113a410:	e17ffd15 	stw	r5,-12(fp)
8113a414:	e1bffe15 	stw	r6,-8(fp)
8113a418:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113a41c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113a420:	d0a06b17 	ldw	r2,-32340(gp)
  
  if (alt_ticks_per_second ())
8113a424:	10003c26 	beq	r2,zero,8113a518 <alt_alarm_start+0x120>
  {
    if (alarm)
8113a428:	e0bffc17 	ldw	r2,-16(fp)
8113a42c:	10003826 	beq	r2,zero,8113a510 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113a430:	e0bffc17 	ldw	r2,-16(fp)
8113a434:	e0fffe17 	ldw	r3,-8(fp)
8113a438:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113a43c:	e0bffc17 	ldw	r2,-16(fp)
8113a440:	e0ffff17 	ldw	r3,-4(fp)
8113a444:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a448:	0005303a 	rdctl	r2,status
8113a44c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a450:	e0fff917 	ldw	r3,-28(fp)
8113a454:	00bfff84 	movi	r2,-2
8113a458:	1884703a 	and	r2,r3,r2
8113a45c:	1001703a 	wrctl	status,r2
  
  return context;
8113a460:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113a464:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113a468:	d0a06c17 	ldw	r2,-32336(gp)
      
      current_nticks = alt_nticks();
8113a46c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113a470:	e0fffd17 	ldw	r3,-12(fp)
8113a474:	e0bff617 	ldw	r2,-40(fp)
8113a478:	1885883a 	add	r2,r3,r2
8113a47c:	10c00044 	addi	r3,r2,1
8113a480:	e0bffc17 	ldw	r2,-16(fp)
8113a484:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113a488:	e0bffc17 	ldw	r2,-16(fp)
8113a48c:	10c00217 	ldw	r3,8(r2)
8113a490:	e0bff617 	ldw	r2,-40(fp)
8113a494:	1880042e 	bgeu	r3,r2,8113a4a8 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113a498:	e0bffc17 	ldw	r2,-16(fp)
8113a49c:	00c00044 	movi	r3,1
8113a4a0:	10c00405 	stb	r3,16(r2)
8113a4a4:	00000206 	br	8113a4b0 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113a4a8:	e0bffc17 	ldw	r2,-16(fp)
8113a4ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113a4b0:	e0bffc17 	ldw	r2,-16(fp)
8113a4b4:	d0e01304 	addi	r3,gp,-32692
8113a4b8:	e0fffa15 	stw	r3,-24(fp)
8113a4bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113a4c0:	e0bffb17 	ldw	r2,-20(fp)
8113a4c4:	e0fffa17 	ldw	r3,-24(fp)
8113a4c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113a4cc:	e0bffa17 	ldw	r2,-24(fp)
8113a4d0:	10c00017 	ldw	r3,0(r2)
8113a4d4:	e0bffb17 	ldw	r2,-20(fp)
8113a4d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113a4dc:	e0bffa17 	ldw	r2,-24(fp)
8113a4e0:	10800017 	ldw	r2,0(r2)
8113a4e4:	e0fffb17 	ldw	r3,-20(fp)
8113a4e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113a4ec:	e0bffa17 	ldw	r2,-24(fp)
8113a4f0:	e0fffb17 	ldw	r3,-20(fp)
8113a4f4:	10c00015 	stw	r3,0(r2)
8113a4f8:	e0bff817 	ldw	r2,-32(fp)
8113a4fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a500:	e0bff717 	ldw	r2,-36(fp)
8113a504:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113a508:	0005883a 	mov	r2,zero
8113a50c:	00000306 	br	8113a51c <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113a510:	00bffa84 	movi	r2,-22
8113a514:	00000106 	br	8113a51c <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113a518:	00bfde84 	movi	r2,-134
  }
}
8113a51c:	e037883a 	mov	sp,fp
8113a520:	df000017 	ldw	fp,0(sp)
8113a524:	dec00104 	addi	sp,sp,4
8113a528:	f800283a 	ret

8113a52c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113a52c:	defffe04 	addi	sp,sp,-8
8113a530:	de00012e 	bgeu	sp,et,8113a538 <alt_get_errno+0xc>
8113a534:	003b68fa 	trap	3
8113a538:	dfc00115 	stw	ra,4(sp)
8113a53c:	df000015 	stw	fp,0(sp)
8113a540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113a544:	d0a01017 	ldw	r2,-32704(gp)
8113a548:	10000326 	beq	r2,zero,8113a558 <alt_get_errno+0x2c>
8113a54c:	d0a01017 	ldw	r2,-32704(gp)
8113a550:	103ee83a 	callr	r2
8113a554:	00000106 	br	8113a55c <alt_get_errno+0x30>
8113a558:	d0a05f04 	addi	r2,gp,-32388
}
8113a55c:	e037883a 	mov	sp,fp
8113a560:	dfc00117 	ldw	ra,4(sp)
8113a564:	df000017 	ldw	fp,0(sp)
8113a568:	dec00204 	addi	sp,sp,8
8113a56c:	f800283a 	ret

8113a570 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113a570:	defffa04 	addi	sp,sp,-24
8113a574:	de00012e 	bgeu	sp,et,8113a57c <alt_dev_llist_insert+0xc>
8113a578:	003b68fa 	trap	3
8113a57c:	dfc00515 	stw	ra,20(sp)
8113a580:	df000415 	stw	fp,16(sp)
8113a584:	df000404 	addi	fp,sp,16
8113a588:	e13ffe15 	stw	r4,-8(fp)
8113a58c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113a590:	e0bffe17 	ldw	r2,-8(fp)
8113a594:	10000326 	beq	r2,zero,8113a5a4 <alt_dev_llist_insert+0x34>
8113a598:	e0bffe17 	ldw	r2,-8(fp)
8113a59c:	10800217 	ldw	r2,8(r2)
8113a5a0:	1000061e 	bne	r2,zero,8113a5bc <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113a5a4:	113a52c0 	call	8113a52c <alt_get_errno>
8113a5a8:	1007883a 	mov	r3,r2
8113a5ac:	00800584 	movi	r2,22
8113a5b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113a5b4:	00bffa84 	movi	r2,-22
8113a5b8:	00001306 	br	8113a608 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113a5bc:	e0bffe17 	ldw	r2,-8(fp)
8113a5c0:	e0ffff17 	ldw	r3,-4(fp)
8113a5c4:	e0fffc15 	stw	r3,-16(fp)
8113a5c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113a5cc:	e0bffd17 	ldw	r2,-12(fp)
8113a5d0:	e0fffc17 	ldw	r3,-16(fp)
8113a5d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113a5d8:	e0bffc17 	ldw	r2,-16(fp)
8113a5dc:	10c00017 	ldw	r3,0(r2)
8113a5e0:	e0bffd17 	ldw	r2,-12(fp)
8113a5e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113a5e8:	e0bffc17 	ldw	r2,-16(fp)
8113a5ec:	10800017 	ldw	r2,0(r2)
8113a5f0:	e0fffd17 	ldw	r3,-12(fp)
8113a5f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113a5f8:	e0bffc17 	ldw	r2,-16(fp)
8113a5fc:	e0fffd17 	ldw	r3,-12(fp)
8113a600:	10c00015 	stw	r3,0(r2)

  return 0;  
8113a604:	0005883a 	mov	r2,zero
}
8113a608:	e037883a 	mov	sp,fp
8113a60c:	dfc00117 	ldw	ra,4(sp)
8113a610:	df000017 	ldw	fp,0(sp)
8113a614:	dec00204 	addi	sp,sp,8
8113a618:	f800283a 	ret

8113a61c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113a61c:	defffd04 	addi	sp,sp,-12
8113a620:	de00012e 	bgeu	sp,et,8113a628 <_do_ctors+0xc>
8113a624:	003b68fa 	trap	3
8113a628:	dfc00215 	stw	ra,8(sp)
8113a62c:	df000115 	stw	fp,4(sp)
8113a630:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113a634:	00a04534 	movhi	r2,33044
8113a638:	10ae7a04 	addi	r2,r2,-17944
8113a63c:	e0bfff15 	stw	r2,-4(fp)
8113a640:	00000606 	br	8113a65c <_do_ctors+0x40>
        (*ctor) (); 
8113a644:	e0bfff17 	ldw	r2,-4(fp)
8113a648:	10800017 	ldw	r2,0(r2)
8113a64c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113a650:	e0bfff17 	ldw	r2,-4(fp)
8113a654:	10bfff04 	addi	r2,r2,-4
8113a658:	e0bfff15 	stw	r2,-4(fp)
8113a65c:	e0ffff17 	ldw	r3,-4(fp)
8113a660:	00a04534 	movhi	r2,33044
8113a664:	10ae7b04 	addi	r2,r2,-17940
8113a668:	18bff62e 	bgeu	r3,r2,8113a644 <__reset+0xfb11a644>
        (*ctor) (); 
}
8113a66c:	0001883a 	nop
8113a670:	e037883a 	mov	sp,fp
8113a674:	dfc00117 	ldw	ra,4(sp)
8113a678:	df000017 	ldw	fp,0(sp)
8113a67c:	dec00204 	addi	sp,sp,8
8113a680:	f800283a 	ret

8113a684 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113a684:	defffd04 	addi	sp,sp,-12
8113a688:	de00012e 	bgeu	sp,et,8113a690 <_do_dtors+0xc>
8113a68c:	003b68fa 	trap	3
8113a690:	dfc00215 	stw	ra,8(sp)
8113a694:	df000115 	stw	fp,4(sp)
8113a698:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113a69c:	00a04534 	movhi	r2,33044
8113a6a0:	10ae7a04 	addi	r2,r2,-17944
8113a6a4:	e0bfff15 	stw	r2,-4(fp)
8113a6a8:	00000606 	br	8113a6c4 <_do_dtors+0x40>
        (*dtor) (); 
8113a6ac:	e0bfff17 	ldw	r2,-4(fp)
8113a6b0:	10800017 	ldw	r2,0(r2)
8113a6b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113a6b8:	e0bfff17 	ldw	r2,-4(fp)
8113a6bc:	10bfff04 	addi	r2,r2,-4
8113a6c0:	e0bfff15 	stw	r2,-4(fp)
8113a6c4:	e0ffff17 	ldw	r3,-4(fp)
8113a6c8:	00a04534 	movhi	r2,33044
8113a6cc:	10ae7b04 	addi	r2,r2,-17940
8113a6d0:	18bff62e 	bgeu	r3,r2,8113a6ac <__reset+0xfb11a6ac>
        (*dtor) (); 
}
8113a6d4:	0001883a 	nop
8113a6d8:	e037883a 	mov	sp,fp
8113a6dc:	dfc00117 	ldw	ra,4(sp)
8113a6e0:	df000017 	ldw	fp,0(sp)
8113a6e4:	dec00204 	addi	sp,sp,8
8113a6e8:	f800283a 	ret

8113a6ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113a6ec:	defffa04 	addi	sp,sp,-24
8113a6f0:	de00012e 	bgeu	sp,et,8113a6f8 <alt_find_dev+0xc>
8113a6f4:	003b68fa 	trap	3
8113a6f8:	dfc00515 	stw	ra,20(sp)
8113a6fc:	df000415 	stw	fp,16(sp)
8113a700:	df000404 	addi	fp,sp,16
8113a704:	e13ffe15 	stw	r4,-8(fp)
8113a708:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113a70c:	e0bfff17 	ldw	r2,-4(fp)
8113a710:	10800017 	ldw	r2,0(r2)
8113a714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113a718:	e13ffe17 	ldw	r4,-8(fp)
8113a71c:	11134b00 	call	811134b0 <strlen>
8113a720:	10800044 	addi	r2,r2,1
8113a724:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113a728:	00000d06 	br	8113a760 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113a72c:	e0bffc17 	ldw	r2,-16(fp)
8113a730:	10800217 	ldw	r2,8(r2)
8113a734:	e0fffd17 	ldw	r3,-12(fp)
8113a738:	180d883a 	mov	r6,r3
8113a73c:	e17ffe17 	ldw	r5,-8(fp)
8113a740:	1009883a 	mov	r4,r2
8113a744:	113b5140 	call	8113b514 <memcmp>
8113a748:	1000021e 	bne	r2,zero,8113a754 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113a74c:	e0bffc17 	ldw	r2,-16(fp)
8113a750:	00000706 	br	8113a770 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113a754:	e0bffc17 	ldw	r2,-16(fp)
8113a758:	10800017 	ldw	r2,0(r2)
8113a75c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113a760:	e0fffc17 	ldw	r3,-16(fp)
8113a764:	e0bfff17 	ldw	r2,-4(fp)
8113a768:	18bff01e 	bne	r3,r2,8113a72c <__reset+0xfb11a72c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113a76c:	0005883a 	mov	r2,zero
}
8113a770:	e037883a 	mov	sp,fp
8113a774:	dfc00117 	ldw	ra,4(sp)
8113a778:	df000017 	ldw	fp,0(sp)
8113a77c:	dec00204 	addi	sp,sp,8
8113a780:	f800283a 	ret

8113a784 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113a784:	defffb04 	addi	sp,sp,-20
8113a788:	de00012e 	bgeu	sp,et,8113a790 <alt_find_file+0xc>
8113a78c:	003b68fa 	trap	3
8113a790:	dfc00415 	stw	ra,16(sp)
8113a794:	df000315 	stw	fp,12(sp)
8113a798:	df000304 	addi	fp,sp,12
8113a79c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113a7a0:	d0a00b17 	ldw	r2,-32724(gp)
8113a7a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113a7a8:	00003106 	br	8113a870 <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113a7ac:	e0bffd17 	ldw	r2,-12(fp)
8113a7b0:	10800217 	ldw	r2,8(r2)
8113a7b4:	1009883a 	mov	r4,r2
8113a7b8:	11134b00 	call	811134b0 <strlen>
8113a7bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113a7c0:	e0bffd17 	ldw	r2,-12(fp)
8113a7c4:	10c00217 	ldw	r3,8(r2)
8113a7c8:	e0bffe17 	ldw	r2,-8(fp)
8113a7cc:	10bfffc4 	addi	r2,r2,-1
8113a7d0:	1885883a 	add	r2,r3,r2
8113a7d4:	10800003 	ldbu	r2,0(r2)
8113a7d8:	10803fcc 	andi	r2,r2,255
8113a7dc:	1080201c 	xori	r2,r2,128
8113a7e0:	10bfe004 	addi	r2,r2,-128
8113a7e4:	10800bd8 	cmpnei	r2,r2,47
8113a7e8:	1000031e 	bne	r2,zero,8113a7f8 <alt_find_file+0x74>
    {
      len -= 1;
8113a7ec:	e0bffe17 	ldw	r2,-8(fp)
8113a7f0:	10bfffc4 	addi	r2,r2,-1
8113a7f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113a7f8:	e0bffe17 	ldw	r2,-8(fp)
8113a7fc:	e0ffff17 	ldw	r3,-4(fp)
8113a800:	1885883a 	add	r2,r3,r2
8113a804:	10800003 	ldbu	r2,0(r2)
8113a808:	10803fcc 	andi	r2,r2,255
8113a80c:	1080201c 	xori	r2,r2,128
8113a810:	10bfe004 	addi	r2,r2,-128
8113a814:	10800be0 	cmpeqi	r2,r2,47
8113a818:	1000081e 	bne	r2,zero,8113a83c <alt_find_file+0xb8>
8113a81c:	e0bffe17 	ldw	r2,-8(fp)
8113a820:	e0ffff17 	ldw	r3,-4(fp)
8113a824:	1885883a 	add	r2,r3,r2
8113a828:	10800003 	ldbu	r2,0(r2)
8113a82c:	10803fcc 	andi	r2,r2,255
8113a830:	1080201c 	xori	r2,r2,128
8113a834:	10bfe004 	addi	r2,r2,-128
8113a838:	10000a1e 	bne	r2,zero,8113a864 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113a83c:	e0bffd17 	ldw	r2,-12(fp)
8113a840:	10800217 	ldw	r2,8(r2)
8113a844:	e0fffe17 	ldw	r3,-8(fp)
8113a848:	180d883a 	mov	r6,r3
8113a84c:	e17fff17 	ldw	r5,-4(fp)
8113a850:	1009883a 	mov	r4,r2
8113a854:	113b5140 	call	8113b514 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113a858:	1000021e 	bne	r2,zero,8113a864 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113a85c:	e0bffd17 	ldw	r2,-12(fp)
8113a860:	00000706 	br	8113a880 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113a864:	e0bffd17 	ldw	r2,-12(fp)
8113a868:	10800017 	ldw	r2,0(r2)
8113a86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113a870:	e0fffd17 	ldw	r3,-12(fp)
8113a874:	d0a00b04 	addi	r2,gp,-32724
8113a878:	18bfcc1e 	bne	r3,r2,8113a7ac <__reset+0xfb11a7ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113a87c:	0005883a 	mov	r2,zero
}
8113a880:	e037883a 	mov	sp,fp
8113a884:	dfc00117 	ldw	ra,4(sp)
8113a888:	df000017 	ldw	fp,0(sp)
8113a88c:	dec00204 	addi	sp,sp,8
8113a890:	f800283a 	ret

8113a894 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113a894:	defff904 	addi	sp,sp,-28
8113a898:	de00012e 	bgeu	sp,et,8113a8a0 <alt_get_fd+0xc>
8113a89c:	003b68fa 	trap	3
8113a8a0:	dfc00615 	stw	ra,24(sp)
8113a8a4:	df000515 	stw	fp,20(sp)
8113a8a8:	df000504 	addi	fp,sp,20
8113a8ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113a8b0:	00bffa04 	movi	r2,-24
8113a8b4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113a8b8:	d0a06617 	ldw	r2,-32360(gp)
8113a8bc:	e0bffd15 	stw	r2,-12(fp)
8113a8c0:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113a8c4:	e0bffe0b 	ldhu	r2,-8(fp)
8113a8c8:	e0fffe84 	addi	r3,fp,-6
8113a8cc:	180d883a 	mov	r6,r3
8113a8d0:	100b883a 	mov	r5,r2
8113a8d4:	e13ffd17 	ldw	r4,-12(fp)
8113a8d8:	112ee780 	call	8112ee78 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113a8dc:	e03ffb15 	stw	zero,-20(fp)
8113a8e0:	00001906 	br	8113a948 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113a8e4:	00a04534 	movhi	r2,33044
8113a8e8:	10bdda04 	addi	r2,r2,-2200
8113a8ec:	e0fffb17 	ldw	r3,-20(fp)
8113a8f0:	18c00324 	muli	r3,r3,12
8113a8f4:	10c5883a 	add	r2,r2,r3
8113a8f8:	10800017 	ldw	r2,0(r2)
8113a8fc:	10000f1e 	bne	r2,zero,8113a93c <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113a900:	00a04534 	movhi	r2,33044
8113a904:	10bdda04 	addi	r2,r2,-2200
8113a908:	e0fffb17 	ldw	r3,-20(fp)
8113a90c:	18c00324 	muli	r3,r3,12
8113a910:	10c5883a 	add	r2,r2,r3
8113a914:	e0ffff17 	ldw	r3,-4(fp)
8113a918:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113a91c:	d0e00f17 	ldw	r3,-32708(gp)
8113a920:	e0bffb17 	ldw	r2,-20(fp)
8113a924:	1880020e 	bge	r3,r2,8113a930 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113a928:	e0bffb17 	ldw	r2,-20(fp)
8113a92c:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113a930:	e0bffb17 	ldw	r2,-20(fp)
8113a934:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113a938:	00000606 	br	8113a954 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113a93c:	e0bffb17 	ldw	r2,-20(fp)
8113a940:	10800044 	addi	r2,r2,1
8113a944:	e0bffb15 	stw	r2,-20(fp)
8113a948:	e0bffb17 	ldw	r2,-20(fp)
8113a94c:	10800810 	cmplti	r2,r2,32
8113a950:	103fe41e 	bne	r2,zero,8113a8e4 <__reset+0xfb11a8e4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113a954:	d0a06617 	ldw	r2,-32360(gp)
8113a958:	1009883a 	mov	r4,r2
8113a95c:	112f2000 	call	8112f200 <OSSemPost>

  return rc;
8113a960:	e0bffc17 	ldw	r2,-16(fp)
}
8113a964:	e037883a 	mov	sp,fp
8113a968:	dfc00117 	ldw	ra,4(sp)
8113a96c:	df000017 	ldw	fp,0(sp)
8113a970:	dec00204 	addi	sp,sp,8
8113a974:	f800283a 	ret

8113a978 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113a978:	defff904 	addi	sp,sp,-28
8113a97c:	de00012e 	bgeu	sp,et,8113a984 <alt_ic_isr_register+0xc>
8113a980:	003b68fa 	trap	3
8113a984:	dfc00615 	stw	ra,24(sp)
8113a988:	df000515 	stw	fp,20(sp)
8113a98c:	df000504 	addi	fp,sp,20
8113a990:	e13ffc15 	stw	r4,-16(fp)
8113a994:	e17ffd15 	stw	r5,-12(fp)
8113a998:	e1bffe15 	stw	r6,-8(fp)
8113a99c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113a9a0:	e0800217 	ldw	r2,8(fp)
8113a9a4:	d8800015 	stw	r2,0(sp)
8113a9a8:	e1ffff17 	ldw	r7,-4(fp)
8113a9ac:	e1bffe17 	ldw	r6,-8(fp)
8113a9b0:	e17ffd17 	ldw	r5,-12(fp)
8113a9b4:	e13ffc17 	ldw	r4,-16(fp)
8113a9b8:	113ab480 	call	8113ab48 <alt_iic_isr_register>
}  
8113a9bc:	e037883a 	mov	sp,fp
8113a9c0:	dfc00117 	ldw	ra,4(sp)
8113a9c4:	df000017 	ldw	fp,0(sp)
8113a9c8:	dec00204 	addi	sp,sp,8
8113a9cc:	f800283a 	ret

8113a9d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113a9d0:	defff904 	addi	sp,sp,-28
8113a9d4:	de00012e 	bgeu	sp,et,8113a9dc <alt_ic_irq_enable+0xc>
8113a9d8:	003b68fa 	trap	3
8113a9dc:	df000615 	stw	fp,24(sp)
8113a9e0:	df000604 	addi	fp,sp,24
8113a9e4:	e13ffe15 	stw	r4,-8(fp)
8113a9e8:	e17fff15 	stw	r5,-4(fp)
8113a9ec:	e0bfff17 	ldw	r2,-4(fp)
8113a9f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a9f4:	0005303a 	rdctl	r2,status
8113a9f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a9fc:	e0fffb17 	ldw	r3,-20(fp)
8113aa00:	00bfff84 	movi	r2,-2
8113aa04:	1884703a 	and	r2,r3,r2
8113aa08:	1001703a 	wrctl	status,r2
  
  return context;
8113aa0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113aa10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113aa14:	00c00044 	movi	r3,1
8113aa18:	e0bffa17 	ldw	r2,-24(fp)
8113aa1c:	1884983a 	sll	r2,r3,r2
8113aa20:	1007883a 	mov	r3,r2
8113aa24:	d0a06717 	ldw	r2,-32356(gp)
8113aa28:	1884b03a 	or	r2,r3,r2
8113aa2c:	d0a06715 	stw	r2,-32356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113aa30:	d0a06717 	ldw	r2,-32356(gp)
8113aa34:	100170fa 	wrctl	ienable,r2
8113aa38:	e0bffc17 	ldw	r2,-16(fp)
8113aa3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aa40:	e0bffd17 	ldw	r2,-12(fp)
8113aa44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113aa48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113aa4c:	0001883a 	nop
}
8113aa50:	e037883a 	mov	sp,fp
8113aa54:	df000017 	ldw	fp,0(sp)
8113aa58:	dec00104 	addi	sp,sp,4
8113aa5c:	f800283a 	ret

8113aa60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113aa60:	defff904 	addi	sp,sp,-28
8113aa64:	de00012e 	bgeu	sp,et,8113aa6c <alt_ic_irq_disable+0xc>
8113aa68:	003b68fa 	trap	3
8113aa6c:	df000615 	stw	fp,24(sp)
8113aa70:	df000604 	addi	fp,sp,24
8113aa74:	e13ffe15 	stw	r4,-8(fp)
8113aa78:	e17fff15 	stw	r5,-4(fp)
8113aa7c:	e0bfff17 	ldw	r2,-4(fp)
8113aa80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113aa84:	0005303a 	rdctl	r2,status
8113aa88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113aa8c:	e0fffb17 	ldw	r3,-20(fp)
8113aa90:	00bfff84 	movi	r2,-2
8113aa94:	1884703a 	and	r2,r3,r2
8113aa98:	1001703a 	wrctl	status,r2
  
  return context;
8113aa9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113aaa0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113aaa4:	00c00044 	movi	r3,1
8113aaa8:	e0bffa17 	ldw	r2,-24(fp)
8113aaac:	1884983a 	sll	r2,r3,r2
8113aab0:	0084303a 	nor	r2,zero,r2
8113aab4:	1007883a 	mov	r3,r2
8113aab8:	d0a06717 	ldw	r2,-32356(gp)
8113aabc:	1884703a 	and	r2,r3,r2
8113aac0:	d0a06715 	stw	r2,-32356(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113aac4:	d0a06717 	ldw	r2,-32356(gp)
8113aac8:	100170fa 	wrctl	ienable,r2
8113aacc:	e0bffc17 	ldw	r2,-16(fp)
8113aad0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aad4:	e0bffd17 	ldw	r2,-12(fp)
8113aad8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113aadc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113aae0:	0001883a 	nop
}
8113aae4:	e037883a 	mov	sp,fp
8113aae8:	df000017 	ldw	fp,0(sp)
8113aaec:	dec00104 	addi	sp,sp,4
8113aaf0:	f800283a 	ret

8113aaf4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113aaf4:	defffc04 	addi	sp,sp,-16
8113aaf8:	de00012e 	bgeu	sp,et,8113ab00 <alt_ic_irq_enabled+0xc>
8113aafc:	003b68fa 	trap	3
8113ab00:	df000315 	stw	fp,12(sp)
8113ab04:	df000304 	addi	fp,sp,12
8113ab08:	e13ffe15 	stw	r4,-8(fp)
8113ab0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113ab10:	000530fa 	rdctl	r2,ienable
8113ab14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113ab18:	00c00044 	movi	r3,1
8113ab1c:	e0bfff17 	ldw	r2,-4(fp)
8113ab20:	1884983a 	sll	r2,r3,r2
8113ab24:	1007883a 	mov	r3,r2
8113ab28:	e0bffd17 	ldw	r2,-12(fp)
8113ab2c:	1884703a 	and	r2,r3,r2
8113ab30:	1004c03a 	cmpne	r2,r2,zero
8113ab34:	10803fcc 	andi	r2,r2,255
}
8113ab38:	e037883a 	mov	sp,fp
8113ab3c:	df000017 	ldw	fp,0(sp)
8113ab40:	dec00104 	addi	sp,sp,4
8113ab44:	f800283a 	ret

8113ab48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113ab48:	defff504 	addi	sp,sp,-44
8113ab4c:	de00012e 	bgeu	sp,et,8113ab54 <alt_iic_isr_register+0xc>
8113ab50:	003b68fa 	trap	3
8113ab54:	dfc00a15 	stw	ra,40(sp)
8113ab58:	df000915 	stw	fp,36(sp)
8113ab5c:	df000904 	addi	fp,sp,36
8113ab60:	e13ffc15 	stw	r4,-16(fp)
8113ab64:	e17ffd15 	stw	r5,-12(fp)
8113ab68:	e1bffe15 	stw	r6,-8(fp)
8113ab6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113ab70:	00bffa84 	movi	r2,-22
8113ab74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113ab78:	e0bffd17 	ldw	r2,-12(fp)
8113ab7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113ab80:	e0bff817 	ldw	r2,-32(fp)
8113ab84:	10800808 	cmpgei	r2,r2,32
8113ab88:	1000271e 	bne	r2,zero,8113ac28 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ab8c:	0005303a 	rdctl	r2,status
8113ab90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ab94:	e0fffb17 	ldw	r3,-20(fp)
8113ab98:	00bfff84 	movi	r2,-2
8113ab9c:	1884703a 	and	r2,r3,r2
8113aba0:	1001703a 	wrctl	status,r2
  
  return context;
8113aba4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113aba8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113abac:	00a04574 	movhi	r2,33045
8113abb0:	10920904 	addi	r2,r2,18468
8113abb4:	e0fff817 	ldw	r3,-32(fp)
8113abb8:	180690fa 	slli	r3,r3,3
8113abbc:	10c5883a 	add	r2,r2,r3
8113abc0:	e0fffe17 	ldw	r3,-8(fp)
8113abc4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113abc8:	00a04574 	movhi	r2,33045
8113abcc:	10920904 	addi	r2,r2,18468
8113abd0:	e0fff817 	ldw	r3,-32(fp)
8113abd4:	180690fa 	slli	r3,r3,3
8113abd8:	10c5883a 	add	r2,r2,r3
8113abdc:	10800104 	addi	r2,r2,4
8113abe0:	e0ffff17 	ldw	r3,-4(fp)
8113abe4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113abe8:	e0bffe17 	ldw	r2,-8(fp)
8113abec:	10000526 	beq	r2,zero,8113ac04 <alt_iic_isr_register+0xbc>
8113abf0:	e0bff817 	ldw	r2,-32(fp)
8113abf4:	100b883a 	mov	r5,r2
8113abf8:	e13ffc17 	ldw	r4,-16(fp)
8113abfc:	113a9d00 	call	8113a9d0 <alt_ic_irq_enable>
8113ac00:	00000406 	br	8113ac14 <alt_iic_isr_register+0xcc>
8113ac04:	e0bff817 	ldw	r2,-32(fp)
8113ac08:	100b883a 	mov	r5,r2
8113ac0c:	e13ffc17 	ldw	r4,-16(fp)
8113ac10:	113aa600 	call	8113aa60 <alt_ic_irq_disable>
8113ac14:	e0bff715 	stw	r2,-36(fp)
8113ac18:	e0bffa17 	ldw	r2,-24(fp)
8113ac1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113ac20:	e0bff917 	ldw	r2,-28(fp)
8113ac24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113ac28:	e0bff717 	ldw	r2,-36(fp)
}
8113ac2c:	e037883a 	mov	sp,fp
8113ac30:	dfc00117 	ldw	ra,4(sp)
8113ac34:	df000017 	ldw	fp,0(sp)
8113ac38:	dec00204 	addi	sp,sp,8
8113ac3c:	f800283a 	ret

8113ac40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113ac40:	defff904 	addi	sp,sp,-28
8113ac44:	de00012e 	bgeu	sp,et,8113ac4c <alt_open_fd+0xc>
8113ac48:	003b68fa 	trap	3
8113ac4c:	dfc00615 	stw	ra,24(sp)
8113ac50:	df000515 	stw	fp,20(sp)
8113ac54:	df000504 	addi	fp,sp,20
8113ac58:	e13ffc15 	stw	r4,-16(fp)
8113ac5c:	e17ffd15 	stw	r5,-12(fp)
8113ac60:	e1bffe15 	stw	r6,-8(fp)
8113ac64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113ac68:	e1bfff17 	ldw	r6,-4(fp)
8113ac6c:	e17ffe17 	ldw	r5,-8(fp)
8113ac70:	e13ffd17 	ldw	r4,-12(fp)
8113ac74:	1127a3c0 	call	81127a3c <open>
8113ac78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113ac7c:	e0bffb17 	ldw	r2,-20(fp)
8113ac80:	10001c16 	blt	r2,zero,8113acf4 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113ac84:	00a04534 	movhi	r2,33044
8113ac88:	10bdda04 	addi	r2,r2,-2200
8113ac8c:	e0fffb17 	ldw	r3,-20(fp)
8113ac90:	18c00324 	muli	r3,r3,12
8113ac94:	10c5883a 	add	r2,r2,r3
8113ac98:	10c00017 	ldw	r3,0(r2)
8113ac9c:	e0bffc17 	ldw	r2,-16(fp)
8113aca0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113aca4:	00a04534 	movhi	r2,33044
8113aca8:	10bdda04 	addi	r2,r2,-2200
8113acac:	e0fffb17 	ldw	r3,-20(fp)
8113acb0:	18c00324 	muli	r3,r3,12
8113acb4:	10c5883a 	add	r2,r2,r3
8113acb8:	10800104 	addi	r2,r2,4
8113acbc:	10c00017 	ldw	r3,0(r2)
8113acc0:	e0bffc17 	ldw	r2,-16(fp)
8113acc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113acc8:	00a04534 	movhi	r2,33044
8113accc:	10bdda04 	addi	r2,r2,-2200
8113acd0:	e0fffb17 	ldw	r3,-20(fp)
8113acd4:	18c00324 	muli	r3,r3,12
8113acd8:	10c5883a 	add	r2,r2,r3
8113acdc:	10800204 	addi	r2,r2,8
8113ace0:	10c00017 	ldw	r3,0(r2)
8113ace4:	e0bffc17 	ldw	r2,-16(fp)
8113ace8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113acec:	e13ffb17 	ldw	r4,-20(fp)
8113acf0:	1127ce00 	call	81127ce0 <alt_release_fd>
  }
} 
8113acf4:	0001883a 	nop
8113acf8:	e037883a 	mov	sp,fp
8113acfc:	dfc00117 	ldw	ra,4(sp)
8113ad00:	df000017 	ldw	fp,0(sp)
8113ad04:	dec00204 	addi	sp,sp,8
8113ad08:	f800283a 	ret

8113ad0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113ad0c:	defffb04 	addi	sp,sp,-20
8113ad10:	de00012e 	bgeu	sp,et,8113ad18 <alt_io_redirect+0xc>
8113ad14:	003b68fa 	trap	3
8113ad18:	dfc00415 	stw	ra,16(sp)
8113ad1c:	df000315 	stw	fp,12(sp)
8113ad20:	df000304 	addi	fp,sp,12
8113ad24:	e13ffd15 	stw	r4,-12(fp)
8113ad28:	e17ffe15 	stw	r5,-8(fp)
8113ad2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113ad30:	01c07fc4 	movi	r7,511
8113ad34:	01800044 	movi	r6,1
8113ad38:	e17ffd17 	ldw	r5,-12(fp)
8113ad3c:	01204534 	movhi	r4,33044
8113ad40:	213ddd04 	addi	r4,r4,-2188
8113ad44:	113ac400 	call	8113ac40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113ad48:	01c07fc4 	movi	r7,511
8113ad4c:	000d883a 	mov	r6,zero
8113ad50:	e17ffe17 	ldw	r5,-8(fp)
8113ad54:	01204534 	movhi	r4,33044
8113ad58:	213dda04 	addi	r4,r4,-2200
8113ad5c:	113ac400 	call	8113ac40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113ad60:	01c07fc4 	movi	r7,511
8113ad64:	01800044 	movi	r6,1
8113ad68:	e17fff17 	ldw	r5,-4(fp)
8113ad6c:	01204534 	movhi	r4,33044
8113ad70:	213de004 	addi	r4,r4,-2176
8113ad74:	113ac400 	call	8113ac40 <alt_open_fd>
}  
8113ad78:	0001883a 	nop
8113ad7c:	e037883a 	mov	sp,fp
8113ad80:	dfc00117 	ldw	ra,4(sp)
8113ad84:	df000017 	ldw	fp,0(sp)
8113ad88:	dec00204 	addi	sp,sp,8
8113ad8c:	f800283a 	ret

8113ad90 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113ad90:	defff204 	addi	sp,sp,-56
8113ad94:	de00012e 	bgeu	sp,et,8113ad9c <alt_printf+0xc>
8113ad98:	003b68fa 	trap	3
8113ad9c:	dfc00a15 	stw	ra,40(sp)
8113ada0:	df000915 	stw	fp,36(sp)
8113ada4:	df000904 	addi	fp,sp,36
8113ada8:	e13fff15 	stw	r4,-4(fp)
8113adac:	e1400215 	stw	r5,8(fp)
8113adb0:	e1800315 	stw	r6,12(fp)
8113adb4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113adb8:	e0800204 	addi	r2,fp,8
8113adbc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113adc0:	e0bfff17 	ldw	r2,-4(fp)
8113adc4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113adc8:	00006f06 	br	8113af88 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113adcc:	e0bff807 	ldb	r2,-32(fp)
8113add0:	10800960 	cmpeqi	r2,r2,37
8113add4:	1000041e 	bne	r2,zero,8113ade8 <alt_printf+0x58>
        {
            alt_putchar(c);
8113add8:	e0bff807 	ldb	r2,-32(fp)
8113addc:	1009883a 	mov	r4,r2
8113ade0:	113afc40 	call	8113afc4 <alt_putchar>
8113ade4:	00006806 	br	8113af88 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113ade8:	e0bff717 	ldw	r2,-36(fp)
8113adec:	10c00044 	addi	r3,r2,1
8113adf0:	e0fff715 	stw	r3,-36(fp)
8113adf4:	10800003 	ldbu	r2,0(r2)
8113adf8:	e0bff805 	stb	r2,-32(fp)
8113adfc:	e0bff807 	ldb	r2,-32(fp)
8113ae00:	10006926 	beq	r2,zero,8113afa8 <alt_printf+0x218>
            {
                if (c == '%')
8113ae04:	e0bff807 	ldb	r2,-32(fp)
8113ae08:	10800958 	cmpnei	r2,r2,37
8113ae0c:	1000041e 	bne	r2,zero,8113ae20 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113ae10:	e0bff807 	ldb	r2,-32(fp)
8113ae14:	1009883a 	mov	r4,r2
8113ae18:	113afc40 	call	8113afc4 <alt_putchar>
8113ae1c:	00005a06 	br	8113af88 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113ae20:	e0bff807 	ldb	r2,-32(fp)
8113ae24:	108018d8 	cmpnei	r2,r2,99
8113ae28:	1000081e 	bne	r2,zero,8113ae4c <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113ae2c:	e0bffe17 	ldw	r2,-8(fp)
8113ae30:	10c00104 	addi	r3,r2,4
8113ae34:	e0fffe15 	stw	r3,-8(fp)
8113ae38:	10800017 	ldw	r2,0(r2)
8113ae3c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113ae40:	e13ffd17 	ldw	r4,-12(fp)
8113ae44:	113afc40 	call	8113afc4 <alt_putchar>
8113ae48:	00004f06 	br	8113af88 <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113ae4c:	e0bff807 	ldb	r2,-32(fp)
8113ae50:	10801e18 	cmpnei	r2,r2,120
8113ae54:	1000341e 	bne	r2,zero,8113af28 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113ae58:	e0bffe17 	ldw	r2,-8(fp)
8113ae5c:	10c00104 	addi	r3,r2,4
8113ae60:	e0fffe15 	stw	r3,-8(fp)
8113ae64:	10800017 	ldw	r2,0(r2)
8113ae68:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113ae6c:	e0bffb17 	ldw	r2,-20(fp)
8113ae70:	1000031e 	bne	r2,zero,8113ae80 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113ae74:	01000c04 	movi	r4,48
8113ae78:	113afc40 	call	8113afc4 <alt_putchar>
                        continue;
8113ae7c:	00004206 	br	8113af88 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113ae80:	00800704 	movi	r2,28
8113ae84:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113ae88:	00000306 	br	8113ae98 <alt_printf+0x108>
                        digit_shift -= 4;
8113ae8c:	e0bff917 	ldw	r2,-28(fp)
8113ae90:	10bfff04 	addi	r2,r2,-4
8113ae94:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113ae98:	00c003c4 	movi	r3,15
8113ae9c:	e0bff917 	ldw	r2,-28(fp)
8113aea0:	1884983a 	sll	r2,r3,r2
8113aea4:	1007883a 	mov	r3,r2
8113aea8:	e0bffb17 	ldw	r2,-20(fp)
8113aeac:	1884703a 	and	r2,r3,r2
8113aeb0:	103ff626 	beq	r2,zero,8113ae8c <__reset+0xfb11ae8c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113aeb4:	00001906 	br	8113af1c <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113aeb8:	00c003c4 	movi	r3,15
8113aebc:	e0bff917 	ldw	r2,-28(fp)
8113aec0:	1884983a 	sll	r2,r3,r2
8113aec4:	1007883a 	mov	r3,r2
8113aec8:	e0bffb17 	ldw	r2,-20(fp)
8113aecc:	1886703a 	and	r3,r3,r2
8113aed0:	e0bff917 	ldw	r2,-28(fp)
8113aed4:	1884d83a 	srl	r2,r3,r2
8113aed8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113aedc:	e0bffc17 	ldw	r2,-16(fp)
8113aee0:	108002a8 	cmpgeui	r2,r2,10
8113aee4:	1000041e 	bne	r2,zero,8113aef8 <alt_printf+0x168>
                            c = '0' + digit;
8113aee8:	e0bffc17 	ldw	r2,-16(fp)
8113aeec:	10800c04 	addi	r2,r2,48
8113aef0:	e0bff805 	stb	r2,-32(fp)
8113aef4:	00000306 	br	8113af04 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113aef8:	e0bffc17 	ldw	r2,-16(fp)
8113aefc:	108015c4 	addi	r2,r2,87
8113af00:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113af04:	e0bff807 	ldb	r2,-32(fp)
8113af08:	1009883a 	mov	r4,r2
8113af0c:	113afc40 	call	8113afc4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113af10:	e0bff917 	ldw	r2,-28(fp)
8113af14:	10bfff04 	addi	r2,r2,-4
8113af18:	e0bff915 	stw	r2,-28(fp)
8113af1c:	e0bff917 	ldw	r2,-28(fp)
8113af20:	103fe50e 	bge	r2,zero,8113aeb8 <__reset+0xfb11aeb8>
8113af24:	00001806 	br	8113af88 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113af28:	e0bff807 	ldb	r2,-32(fp)
8113af2c:	10801cd8 	cmpnei	r2,r2,115
8113af30:	1000151e 	bne	r2,zero,8113af88 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113af34:	e0bffe17 	ldw	r2,-8(fp)
8113af38:	10c00104 	addi	r3,r2,4
8113af3c:	e0fffe15 	stw	r3,-8(fp)
8113af40:	10800017 	ldw	r2,0(r2)
8113af44:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113af48:	00000906 	br	8113af70 <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113af4c:	e0bffa17 	ldw	r2,-24(fp)
8113af50:	10c00044 	addi	r3,r2,1
8113af54:	e0fffa15 	stw	r3,-24(fp)
8113af58:	10800003 	ldbu	r2,0(r2)
8113af5c:	10803fcc 	andi	r2,r2,255
8113af60:	1080201c 	xori	r2,r2,128
8113af64:	10bfe004 	addi	r2,r2,-128
8113af68:	1009883a 	mov	r4,r2
8113af6c:	113afc40 	call	8113afc4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113af70:	e0bffa17 	ldw	r2,-24(fp)
8113af74:	10800003 	ldbu	r2,0(r2)
8113af78:	10803fcc 	andi	r2,r2,255
8113af7c:	1080201c 	xori	r2,r2,128
8113af80:	10bfe004 	addi	r2,r2,-128
8113af84:	103ff11e 	bne	r2,zero,8113af4c <__reset+0xfb11af4c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113af88:	e0bff717 	ldw	r2,-36(fp)
8113af8c:	10c00044 	addi	r3,r2,1
8113af90:	e0fff715 	stw	r3,-36(fp)
8113af94:	10800003 	ldbu	r2,0(r2)
8113af98:	e0bff805 	stb	r2,-32(fp)
8113af9c:	e0bff807 	ldb	r2,-32(fp)
8113afa0:	103f8a1e 	bne	r2,zero,8113adcc <__reset+0xfb11adcc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113afa4:	00000106 	br	8113afac <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113afa8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113afac:	0001883a 	nop
8113afb0:	e037883a 	mov	sp,fp
8113afb4:	dfc00117 	ldw	ra,4(sp)
8113afb8:	df000017 	ldw	fp,0(sp)
8113afbc:	dec00504 	addi	sp,sp,20
8113afc0:	f800283a 	ret

8113afc4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113afc4:	defffd04 	addi	sp,sp,-12
8113afc8:	de00012e 	bgeu	sp,et,8113afd0 <alt_putchar+0xc>
8113afcc:	003b68fa 	trap	3
8113afd0:	dfc00215 	stw	ra,8(sp)
8113afd4:	df000115 	stw	fp,4(sp)
8113afd8:	df000104 	addi	fp,sp,4
8113afdc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113afe0:	d0a00517 	ldw	r2,-32748(gp)
8113afe4:	10800217 	ldw	r2,8(r2)
8113afe8:	100b883a 	mov	r5,r2
8113afec:	e13fff17 	ldw	r4,-4(fp)
8113aff0:	113b6380 	call	8113b638 <putc>
#endif
#endif
}
8113aff4:	e037883a 	mov	sp,fp
8113aff8:	dfc00117 	ldw	ra,4(sp)
8113affc:	df000017 	ldw	fp,0(sp)
8113b000:	dec00204 	addi	sp,sp,8
8113b004:	f800283a 	ret

8113b008 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113b008:	deffff04 	addi	sp,sp,-4
8113b00c:	de00012e 	bgeu	sp,et,8113b014 <altera_nios2_gen2_irq_init+0xc>
8113b010:	003b68fa 	trap	3
8113b014:	df000015 	stw	fp,0(sp)
8113b018:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113b01c:	000170fa 	wrctl	ienable,zero
}
8113b020:	0001883a 	nop
8113b024:	e037883a 	mov	sp,fp
8113b028:	df000017 	ldw	fp,0(sp)
8113b02c:	dec00104 	addi	sp,sp,4
8113b030:	f800283a 	ret

8113b034 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113b034:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113b038:	de002436 	bltu	sp,et,8113b0cc <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113b03c:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113b040:	d1208517 	ldw	r4,-32236(gp)

      stw ra,  0(sp)
8113b044:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113b048:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113b04c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113b050:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113b054:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113b058:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113b05c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113b060:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113b064:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113b068:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113b06c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113b070:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113b074:	113b2d00 	call	8113b2d0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113b078:	d1207f17 	ldw	r4,-32260(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113b07c:	d1607687 	ldb	r5,-32294(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113b080:	d1208515 	stw	r4,-32236(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113b084:	d16076c5 	stb	r5,-32293(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113b088:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113b08c:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113b090:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113b094:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113b098:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113b09c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113b0a0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113b0a4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113b0a8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113b0ac:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113b0b0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113b0b4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113b0b8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113b0bc:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113b0c0:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113b0c4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113b0c8:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113b0cc:	003da0fa 	break	3

8113b0d0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113b0d0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113b0d4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113b0d8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113b0dc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113b0e0:	113b2d00 	call	8113b2d0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113b0e4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113b0e8:	d4a07405 	stb	r18,-32304(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113b0ec:	003fe206 	br	8113b078 <__reset+0xfb11b078>

8113b0f0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113b0f0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113b0f4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113b0f8:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113b0fc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113b100:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113b104:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113b108:	dec00204 	addi	sp,sp,8

      callr r2
8113b10c:	103ee83a 	callr	r2

      nop
8113b110:	0001883a 	nop

8113b114 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113b114:	defff704 	addi	sp,sp,-36
8113b118:	de00012e 	bgeu	sp,et,8113b120 <OSTaskStkInit+0xc>
8113b11c:	003b68fa 	trap	3
8113b120:	dfc00815 	stw	ra,32(sp)
8113b124:	df000715 	stw	fp,28(sp)
8113b128:	df000704 	addi	fp,sp,28
8113b12c:	e13ffc15 	stw	r4,-16(fp)
8113b130:	e17ffd15 	stw	r5,-12(fp)
8113b134:	e1bffe15 	stw	r6,-8(fp)
8113b138:	3805883a 	mov	r2,r7
8113b13c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113b140:	e0fffe17 	ldw	r3,-8(fp)
8113b144:	00bfff04 	movi	r2,-4
8113b148:	1884703a 	and	r2,r3,r2
8113b14c:	10bef704 	addi	r2,r2,-1060
8113b150:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113b154:	01810904 	movi	r6,1060
8113b158:	000b883a 	mov	r5,zero
8113b15c:	e13ff917 	ldw	r4,-28(fp)
8113b160:	1112c840 	call	81112c84 <memset>
8113b164:	e0bff917 	ldw	r2,-28(fp)
8113b168:	10c0bb04 	addi	r3,r2,748
8113b16c:	e0bff917 	ldw	r2,-28(fp)
8113b170:	10c00115 	stw	r3,4(r2)
8113b174:	e0bff917 	ldw	r2,-28(fp)
8113b178:	10c0d504 	addi	r3,r2,852
8113b17c:	e0bff917 	ldw	r2,-28(fp)
8113b180:	10c00215 	stw	r3,8(r2)
8113b184:	e0bff917 	ldw	r2,-28(fp)
8113b188:	10c0ef04 	addi	r3,r2,956
8113b18c:	e0bff917 	ldw	r2,-28(fp)
8113b190:	10c00315 	stw	r3,12(r2)
8113b194:	e0fff917 	ldw	r3,-28(fp)
8113b198:	00a04534 	movhi	r2,33044
8113b19c:	10bba604 	addi	r2,r2,-4456
8113b1a0:	18800d15 	stw	r2,52(r3)
8113b1a4:	e0bff917 	ldw	r2,-28(fp)
8113b1a8:	00c00044 	movi	r3,1
8113b1ac:	10c02915 	stw	r3,164(r2)
8113b1b0:	10002a15 	stw	zero,168(r2)
8113b1b4:	e0bff917 	ldw	r2,-28(fp)
8113b1b8:	00ccc384 	movi	r3,13070
8113b1bc:	10c02b0d 	sth	r3,172(r2)
8113b1c0:	e0bff917 	ldw	r2,-28(fp)
8113b1c4:	00eaf344 	movi	r3,-21555
8113b1c8:	10c02b8d 	sth	r3,174(r2)
8113b1cc:	e0bff917 	ldw	r2,-28(fp)
8113b1d0:	00c48d04 	movi	r3,4660
8113b1d4:	10c02c0d 	sth	r3,176(r2)
8113b1d8:	e0bff917 	ldw	r2,-28(fp)
8113b1dc:	00f99b44 	movi	r3,-6547
8113b1e0:	10c02c8d 	sth	r3,178(r2)
8113b1e4:	e0bff917 	ldw	r2,-28(fp)
8113b1e8:	00f7bb04 	movi	r3,-8468
8113b1ec:	10c02d0d 	sth	r3,180(r2)
8113b1f0:	e0bff917 	ldw	r2,-28(fp)
8113b1f4:	00c00144 	movi	r3,5
8113b1f8:	10c02d8d 	sth	r3,182(r2)
8113b1fc:	e0bff917 	ldw	r2,-28(fp)
8113b200:	00c002c4 	movi	r3,11
8113b204:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113b208:	e0bff917 	ldw	r2,-28(fp)
8113b20c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113b210:	e0bffa17 	ldw	r2,-24(fp)
8113b214:	10bff304 	addi	r2,r2,-52
8113b218:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113b21c:	e0bffb17 	ldw	r2,-20(fp)
8113b220:	10800c04 	addi	r2,r2,48
8113b224:	e0fffc17 	ldw	r3,-16(fp)
8113b228:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113b22c:	e0bffb17 	ldw	r2,-20(fp)
8113b230:	10800b04 	addi	r2,r2,44
8113b234:	e0fffd17 	ldw	r3,-12(fp)
8113b238:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113b23c:	e0bffb17 	ldw	r2,-20(fp)
8113b240:	10800a04 	addi	r2,r2,40
8113b244:	e0fff917 	ldw	r3,-28(fp)
8113b248:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113b24c:	00a04534 	movhi	r2,33044
8113b250:	10ac3c04 	addi	r2,r2,-20240
8113b254:	10c00104 	addi	r3,r2,4
8113b258:	e0bffb17 	ldw	r2,-20(fp)
8113b25c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113b260:	e0bffb17 	ldw	r2,-20(fp)
}
8113b264:	e037883a 	mov	sp,fp
8113b268:	dfc00117 	ldw	ra,4(sp)
8113b26c:	df000017 	ldw	fp,0(sp)
8113b270:	dec00204 	addi	sp,sp,8
8113b274:	f800283a 	ret

8113b278 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113b278:	defffe04 	addi	sp,sp,-8
8113b27c:	de00012e 	bgeu	sp,et,8113b284 <OSTaskCreateHook+0xc>
8113b280:	003b68fa 	trap	3
8113b284:	df000115 	stw	fp,4(sp)
8113b288:	df000104 	addi	fp,sp,4
8113b28c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113b290:	0001883a 	nop
8113b294:	e037883a 	mov	sp,fp
8113b298:	df000017 	ldw	fp,0(sp)
8113b29c:	dec00104 	addi	sp,sp,4
8113b2a0:	f800283a 	ret

8113b2a4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113b2a4:	defffe04 	addi	sp,sp,-8
8113b2a8:	de00012e 	bgeu	sp,et,8113b2b0 <OSTaskDelHook+0xc>
8113b2ac:	003b68fa 	trap	3
8113b2b0:	df000115 	stw	fp,4(sp)
8113b2b4:	df000104 	addi	fp,sp,4
8113b2b8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113b2bc:	0001883a 	nop
8113b2c0:	e037883a 	mov	sp,fp
8113b2c4:	df000017 	ldw	fp,0(sp)
8113b2c8:	dec00104 	addi	sp,sp,4
8113b2cc:	f800283a 	ret

8113b2d0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113b2d0:	deffff04 	addi	sp,sp,-4
8113b2d4:	de00012e 	bgeu	sp,et,8113b2dc <OSTaskSwHook+0xc>
8113b2d8:	003b68fa 	trap	3
8113b2dc:	df000015 	stw	fp,0(sp)
8113b2e0:	d839883a 	mov	fp,sp
}
8113b2e4:	0001883a 	nop
8113b2e8:	e037883a 	mov	sp,fp
8113b2ec:	df000017 	ldw	fp,0(sp)
8113b2f0:	dec00104 	addi	sp,sp,4
8113b2f4:	f800283a 	ret

8113b2f8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113b2f8:	deffff04 	addi	sp,sp,-4
8113b2fc:	de00012e 	bgeu	sp,et,8113b304 <OSTaskStatHook+0xc>
8113b300:	003b68fa 	trap	3
8113b304:	df000015 	stw	fp,0(sp)
8113b308:	d839883a 	mov	fp,sp
}
8113b30c:	0001883a 	nop
8113b310:	e037883a 	mov	sp,fp
8113b314:	df000017 	ldw	fp,0(sp)
8113b318:	dec00104 	addi	sp,sp,4
8113b31c:	f800283a 	ret

8113b320 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113b320:	defffe04 	addi	sp,sp,-8
8113b324:	de00012e 	bgeu	sp,et,8113b32c <OSTimeTickHook+0xc>
8113b328:	003b68fa 	trap	3
8113b32c:	dfc00115 	stw	ra,4(sp)
8113b330:	df000015 	stw	fp,0(sp)
8113b334:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113b338:	d0a0990b 	ldhu	r2,-32156(gp)
8113b33c:	10800044 	addi	r2,r2,1
8113b340:	d0a0990d 	sth	r2,-32156(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113b344:	d0a0990b 	ldhu	r2,-32156(gp)
8113b348:	10bfffcc 	andi	r2,r2,65535
8113b34c:	10803230 	cmpltui	r2,r2,200
8113b350:	1000021e 	bne	r2,zero,8113b35c <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113b354:	d020990d 	sth	zero,-32156(gp)
        OSTmrSignal();
8113b358:	1131c340 	call	81131c34 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113b35c:	0001883a 	nop
8113b360:	e037883a 	mov	sp,fp
8113b364:	dfc00117 	ldw	ra,4(sp)
8113b368:	df000017 	ldw	fp,0(sp)
8113b36c:	dec00204 	addi	sp,sp,8
8113b370:	f800283a 	ret

8113b374 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113b374:	deffff04 	addi	sp,sp,-4
8113b378:	de00012e 	bgeu	sp,et,8113b380 <OSInitHookBegin+0xc>
8113b37c:	003b68fa 	trap	3
8113b380:	df000015 	stw	fp,0(sp)
8113b384:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113b388:	d020990d 	sth	zero,-32156(gp)
#endif
}
8113b38c:	0001883a 	nop
8113b390:	e037883a 	mov	sp,fp
8113b394:	df000017 	ldw	fp,0(sp)
8113b398:	dec00104 	addi	sp,sp,4
8113b39c:	f800283a 	ret

8113b3a0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113b3a0:	deffff04 	addi	sp,sp,-4
8113b3a4:	de00012e 	bgeu	sp,et,8113b3ac <OSInitHookEnd+0xc>
8113b3a8:	003b68fa 	trap	3
8113b3ac:	df000015 	stw	fp,0(sp)
8113b3b0:	d839883a 	mov	fp,sp
}
8113b3b4:	0001883a 	nop
8113b3b8:	e037883a 	mov	sp,fp
8113b3bc:	df000017 	ldw	fp,0(sp)
8113b3c0:	dec00104 	addi	sp,sp,4
8113b3c4:	f800283a 	ret

8113b3c8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113b3c8:	deffff04 	addi	sp,sp,-4
8113b3cc:	de00012e 	bgeu	sp,et,8113b3d4 <OSTaskIdleHook+0xc>
8113b3d0:	003b68fa 	trap	3
8113b3d4:	df000015 	stw	fp,0(sp)
8113b3d8:	d839883a 	mov	fp,sp
}
8113b3dc:	0001883a 	nop
8113b3e0:	e037883a 	mov	sp,fp
8113b3e4:	df000017 	ldw	fp,0(sp)
8113b3e8:	dec00104 	addi	sp,sp,4
8113b3ec:	f800283a 	ret

8113b3f0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113b3f0:	defffe04 	addi	sp,sp,-8
8113b3f4:	de00012e 	bgeu	sp,et,8113b3fc <OSTCBInitHook+0xc>
8113b3f8:	003b68fa 	trap	3
8113b3fc:	df000115 	stw	fp,4(sp)
8113b400:	df000104 	addi	fp,sp,4
8113b404:	e13fff15 	stw	r4,-4(fp)
}
8113b408:	0001883a 	nop
8113b40c:	e037883a 	mov	sp,fp
8113b410:	df000017 	ldw	fp,0(sp)
8113b414:	dec00104 	addi	sp,sp,4
8113b418:	f800283a 	ret

8113b41c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113b41c:	defffe04 	addi	sp,sp,-8
8113b420:	de00012e 	bgeu	sp,et,8113b428 <alt_exception_cause_generated_bad_addr+0xc>
8113b424:	003b68fa 	trap	3
8113b428:	df000115 	stw	fp,4(sp)
8113b42c:	df000104 	addi	fp,sp,4
8113b430:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113b434:	e0bfff17 	ldw	r2,-4(fp)
8113b438:	10bffe84 	addi	r2,r2,-6
8113b43c:	10c00428 	cmpgeui	r3,r2,16
8113b440:	18001a1e 	bne	r3,zero,8113b4ac <alt_exception_cause_generated_bad_addr+0x90>
8113b444:	100690ba 	slli	r3,r2,2
8113b448:	00a04534 	movhi	r2,33044
8113b44c:	10ad1704 	addi	r2,r2,-19364
8113b450:	1885883a 	add	r2,r3,r2
8113b454:	10800017 	ldw	r2,0(r2)
8113b458:	1000683a 	jmp	r2
8113b45c:	8113b49c 	xori	r4,r16,20178
8113b460:	8113b49c 	xori	r4,r16,20178
8113b464:	8113b4ac 	andhi	r4,r16,20178
8113b468:	8113b4ac 	andhi	r4,r16,20178
8113b46c:	8113b4ac 	andhi	r4,r16,20178
8113b470:	8113b49c 	xori	r4,r16,20178
8113b474:	8113b4a4 	muli	r4,r16,20178
8113b478:	8113b4ac 	andhi	r4,r16,20178
8113b47c:	8113b49c 	xori	r4,r16,20178
8113b480:	8113b49c 	xori	r4,r16,20178
8113b484:	8113b4ac 	andhi	r4,r16,20178
8113b488:	8113b49c 	xori	r4,r16,20178
8113b48c:	8113b4a4 	muli	r4,r16,20178
8113b490:	8113b4ac 	andhi	r4,r16,20178
8113b494:	8113b4ac 	andhi	r4,r16,20178
8113b498:	8113b49c 	xori	r4,r16,20178
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113b49c:	00800044 	movi	r2,1
8113b4a0:	00000306 	br	8113b4b0 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113b4a4:	0005883a 	mov	r2,zero
8113b4a8:	00000106 	br	8113b4b0 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113b4ac:	0005883a 	mov	r2,zero
  }
}
8113b4b0:	e037883a 	mov	sp,fp
8113b4b4:	df000017 	ldw	fp,0(sp)
8113b4b8:	dec00104 	addi	sp,sp,4
8113b4bc:	f800283a 	ret

8113b4c0 <atexit>:
8113b4c0:	200b883a 	mov	r5,r4
8113b4c4:	000f883a 	mov	r7,zero
8113b4c8:	000d883a 	mov	r6,zero
8113b4cc:	0009883a 	mov	r4,zero
8113b4d0:	113b7081 	jmpi	8113b708 <__register_exitproc>

8113b4d4 <exit>:
8113b4d4:	defffe04 	addi	sp,sp,-8
8113b4d8:	000b883a 	mov	r5,zero
8113b4dc:	de00012e 	bgeu	sp,et,8113b4e4 <exit+0x10>
8113b4e0:	003b68fa 	trap	3
8113b4e4:	dc000015 	stw	r16,0(sp)
8113b4e8:	dfc00115 	stw	ra,4(sp)
8113b4ec:	2021883a 	mov	r16,r4
8113b4f0:	113b8280 	call	8113b828 <__call_exitprocs>
8113b4f4:	00a04534 	movhi	r2,33044
8113b4f8:	1082ca04 	addi	r2,r2,2856
8113b4fc:	11000017 	ldw	r4,0(r2)
8113b500:	20800f17 	ldw	r2,60(r4)
8113b504:	10000126 	beq	r2,zero,8113b50c <exit+0x38>
8113b508:	103ee83a 	callr	r2
8113b50c:	8009883a 	mov	r4,r16
8113b510:	113b9b00 	call	8113b9b0 <_exit>

8113b514 <memcmp>:
8113b514:	01c000c4 	movi	r7,3
8113b518:	3980192e 	bgeu	r7,r6,8113b580 <memcmp+0x6c>
8113b51c:	2144b03a 	or	r2,r4,r5
8113b520:	11c4703a 	and	r2,r2,r7
8113b524:	10000f26 	beq	r2,zero,8113b564 <memcmp+0x50>
8113b528:	20800003 	ldbu	r2,0(r4)
8113b52c:	28c00003 	ldbu	r3,0(r5)
8113b530:	10c0151e 	bne	r2,r3,8113b588 <memcmp+0x74>
8113b534:	31bfff84 	addi	r6,r6,-2
8113b538:	01ffffc4 	movi	r7,-1
8113b53c:	00000406 	br	8113b550 <memcmp+0x3c>
8113b540:	20800003 	ldbu	r2,0(r4)
8113b544:	28c00003 	ldbu	r3,0(r5)
8113b548:	31bfffc4 	addi	r6,r6,-1
8113b54c:	10c00e1e 	bne	r2,r3,8113b588 <memcmp+0x74>
8113b550:	21000044 	addi	r4,r4,1
8113b554:	29400044 	addi	r5,r5,1
8113b558:	31fff91e 	bne	r6,r7,8113b540 <__reset+0xfb11b540>
8113b55c:	0005883a 	mov	r2,zero
8113b560:	f800283a 	ret
8113b564:	20c00017 	ldw	r3,0(r4)
8113b568:	28800017 	ldw	r2,0(r5)
8113b56c:	18bfee1e 	bne	r3,r2,8113b528 <__reset+0xfb11b528>
8113b570:	31bfff04 	addi	r6,r6,-4
8113b574:	21000104 	addi	r4,r4,4
8113b578:	29400104 	addi	r5,r5,4
8113b57c:	39bff936 	bltu	r7,r6,8113b564 <__reset+0xfb11b564>
8113b580:	303fe91e 	bne	r6,zero,8113b528 <__reset+0xfb11b528>
8113b584:	003ff506 	br	8113b55c <__reset+0xfb11b55c>
8113b588:	10c5c83a 	sub	r2,r2,r3
8113b58c:	f800283a 	ret

8113b590 <_putc_r>:
8113b590:	defffc04 	addi	sp,sp,-16
8113b594:	de00012e 	bgeu	sp,et,8113b59c <_putc_r+0xc>
8113b598:	003b68fa 	trap	3
8113b59c:	dc000215 	stw	r16,8(sp)
8113b5a0:	dfc00315 	stw	ra,12(sp)
8113b5a4:	2021883a 	mov	r16,r4
8113b5a8:	20000226 	beq	r4,zero,8113b5b4 <_putc_r+0x24>
8113b5ac:	20800e17 	ldw	r2,56(r4)
8113b5b0:	10001b26 	beq	r2,zero,8113b620 <_putc_r+0x90>
8113b5b4:	30800217 	ldw	r2,8(r6)
8113b5b8:	10bfffc4 	addi	r2,r2,-1
8113b5bc:	30800215 	stw	r2,8(r6)
8113b5c0:	10000a16 	blt	r2,zero,8113b5ec <_putc_r+0x5c>
8113b5c4:	30800017 	ldw	r2,0(r6)
8113b5c8:	11400005 	stb	r5,0(r2)
8113b5cc:	30800017 	ldw	r2,0(r6)
8113b5d0:	10c00044 	addi	r3,r2,1
8113b5d4:	30c00015 	stw	r3,0(r6)
8113b5d8:	10800003 	ldbu	r2,0(r2)
8113b5dc:	dfc00317 	ldw	ra,12(sp)
8113b5e0:	dc000217 	ldw	r16,8(sp)
8113b5e4:	dec00404 	addi	sp,sp,16
8113b5e8:	f800283a 	ret
8113b5ec:	30c00617 	ldw	r3,24(r6)
8113b5f0:	10c00616 	blt	r2,r3,8113b60c <_putc_r+0x7c>
8113b5f4:	30800017 	ldw	r2,0(r6)
8113b5f8:	00c00284 	movi	r3,10
8113b5fc:	11400005 	stb	r5,0(r2)
8113b600:	30800017 	ldw	r2,0(r6)
8113b604:	11400003 	ldbu	r5,0(r2)
8113b608:	28fff11e 	bne	r5,r3,8113b5d0 <__reset+0xfb11b5d0>
8113b60c:	8009883a 	mov	r4,r16
8113b610:	dfc00317 	ldw	ra,12(sp)
8113b614:	dc000217 	ldw	r16,8(sp)
8113b618:	dec00404 	addi	sp,sp,16
8113b61c:	1123fcc1 	jmpi	81123fcc <__swbuf_r>
8113b620:	d9400015 	stw	r5,0(sp)
8113b624:	d9800115 	stw	r6,4(sp)
8113b628:	111b5e00 	call	8111b5e0 <__sinit>
8113b62c:	d9800117 	ldw	r6,4(sp)
8113b630:	d9400017 	ldw	r5,0(sp)
8113b634:	003fdf06 	br	8113b5b4 <__reset+0xfb11b5b4>

8113b638 <putc>:
8113b638:	00a04534 	movhi	r2,33044
8113b63c:	defffc04 	addi	sp,sp,-16
8113b640:	1082cb04 	addi	r2,r2,2860
8113b644:	de00012e 	bgeu	sp,et,8113b64c <putc+0x14>
8113b648:	003b68fa 	trap	3
8113b64c:	dc000115 	stw	r16,4(sp)
8113b650:	14000017 	ldw	r16,0(r2)
8113b654:	dc400215 	stw	r17,8(sp)
8113b658:	dfc00315 	stw	ra,12(sp)
8113b65c:	2023883a 	mov	r17,r4
8113b660:	80000226 	beq	r16,zero,8113b66c <putc+0x34>
8113b664:	80800e17 	ldw	r2,56(r16)
8113b668:	10001a26 	beq	r2,zero,8113b6d4 <putc+0x9c>
8113b66c:	28800217 	ldw	r2,8(r5)
8113b670:	10bfffc4 	addi	r2,r2,-1
8113b674:	28800215 	stw	r2,8(r5)
8113b678:	10000b16 	blt	r2,zero,8113b6a8 <putc+0x70>
8113b67c:	28800017 	ldw	r2,0(r5)
8113b680:	14400005 	stb	r17,0(r2)
8113b684:	28800017 	ldw	r2,0(r5)
8113b688:	10c00044 	addi	r3,r2,1
8113b68c:	28c00015 	stw	r3,0(r5)
8113b690:	10800003 	ldbu	r2,0(r2)
8113b694:	dfc00317 	ldw	ra,12(sp)
8113b698:	dc400217 	ldw	r17,8(sp)
8113b69c:	dc000117 	ldw	r16,4(sp)
8113b6a0:	dec00404 	addi	sp,sp,16
8113b6a4:	f800283a 	ret
8113b6a8:	28c00617 	ldw	r3,24(r5)
8113b6ac:	10c00e16 	blt	r2,r3,8113b6e8 <putc+0xb0>
8113b6b0:	28800017 	ldw	r2,0(r5)
8113b6b4:	01000284 	movi	r4,10
8113b6b8:	14400005 	stb	r17,0(r2)
8113b6bc:	28800017 	ldw	r2,0(r5)
8113b6c0:	10c00003 	ldbu	r3,0(r2)
8113b6c4:	193ff01e 	bne	r3,r4,8113b688 <__reset+0xfb11b688>
8113b6c8:	280d883a 	mov	r6,r5
8113b6cc:	180b883a 	mov	r5,r3
8113b6d0:	00000706 	br	8113b6f0 <putc+0xb8>
8113b6d4:	8009883a 	mov	r4,r16
8113b6d8:	d9400015 	stw	r5,0(sp)
8113b6dc:	111b5e00 	call	8111b5e0 <__sinit>
8113b6e0:	d9400017 	ldw	r5,0(sp)
8113b6e4:	003fe106 	br	8113b66c <__reset+0xfb11b66c>
8113b6e8:	280d883a 	mov	r6,r5
8113b6ec:	880b883a 	mov	r5,r17
8113b6f0:	8009883a 	mov	r4,r16
8113b6f4:	dfc00317 	ldw	ra,12(sp)
8113b6f8:	dc400217 	ldw	r17,8(sp)
8113b6fc:	dc000117 	ldw	r16,4(sp)
8113b700:	dec00404 	addi	sp,sp,16
8113b704:	1123fcc1 	jmpi	81123fcc <__swbuf_r>

8113b708 <__register_exitproc>:
8113b708:	defffa04 	addi	sp,sp,-24
8113b70c:	de00012e 	bgeu	sp,et,8113b714 <__register_exitproc+0xc>
8113b710:	003b68fa 	trap	3
8113b714:	dc000315 	stw	r16,12(sp)
8113b718:	04204534 	movhi	r16,33044
8113b71c:	8402ca04 	addi	r16,r16,2856
8113b720:	80c00017 	ldw	r3,0(r16)
8113b724:	dc400415 	stw	r17,16(sp)
8113b728:	dfc00515 	stw	ra,20(sp)
8113b72c:	18805217 	ldw	r2,328(r3)
8113b730:	2023883a 	mov	r17,r4
8113b734:	10003726 	beq	r2,zero,8113b814 <__register_exitproc+0x10c>
8113b738:	10c00117 	ldw	r3,4(r2)
8113b73c:	010007c4 	movi	r4,31
8113b740:	20c00e16 	blt	r4,r3,8113b77c <__register_exitproc+0x74>
8113b744:	1a000044 	addi	r8,r3,1
8113b748:	8800221e 	bne	r17,zero,8113b7d4 <__register_exitproc+0xcc>
8113b74c:	18c00084 	addi	r3,r3,2
8113b750:	18c7883a 	add	r3,r3,r3
8113b754:	18c7883a 	add	r3,r3,r3
8113b758:	12000115 	stw	r8,4(r2)
8113b75c:	10c7883a 	add	r3,r2,r3
8113b760:	19400015 	stw	r5,0(r3)
8113b764:	0005883a 	mov	r2,zero
8113b768:	dfc00517 	ldw	ra,20(sp)
8113b76c:	dc400417 	ldw	r17,16(sp)
8113b770:	dc000317 	ldw	r16,12(sp)
8113b774:	dec00604 	addi	sp,sp,24
8113b778:	f800283a 	ret
8113b77c:	00800034 	movhi	r2,0
8113b780:	10800004 	addi	r2,r2,0
8113b784:	10002626 	beq	r2,zero,8113b820 <__register_exitproc+0x118>
8113b788:	01006404 	movi	r4,400
8113b78c:	d9400015 	stw	r5,0(sp)
8113b790:	d9800115 	stw	r6,4(sp)
8113b794:	d9c00215 	stw	r7,8(sp)
8113b798:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113b79c:	d9400017 	ldw	r5,0(sp)
8113b7a0:	d9800117 	ldw	r6,4(sp)
8113b7a4:	d9c00217 	ldw	r7,8(sp)
8113b7a8:	10001d26 	beq	r2,zero,8113b820 <__register_exitproc+0x118>
8113b7ac:	81000017 	ldw	r4,0(r16)
8113b7b0:	10000115 	stw	zero,4(r2)
8113b7b4:	02000044 	movi	r8,1
8113b7b8:	22405217 	ldw	r9,328(r4)
8113b7bc:	0007883a 	mov	r3,zero
8113b7c0:	12400015 	stw	r9,0(r2)
8113b7c4:	20805215 	stw	r2,328(r4)
8113b7c8:	10006215 	stw	zero,392(r2)
8113b7cc:	10006315 	stw	zero,396(r2)
8113b7d0:	883fde26 	beq	r17,zero,8113b74c <__reset+0xfb11b74c>
8113b7d4:	18c9883a 	add	r4,r3,r3
8113b7d8:	2109883a 	add	r4,r4,r4
8113b7dc:	1109883a 	add	r4,r2,r4
8113b7e0:	21802215 	stw	r6,136(r4)
8113b7e4:	01800044 	movi	r6,1
8113b7e8:	12406217 	ldw	r9,392(r2)
8113b7ec:	30cc983a 	sll	r6,r6,r3
8113b7f0:	4992b03a 	or	r9,r9,r6
8113b7f4:	12406215 	stw	r9,392(r2)
8113b7f8:	21c04215 	stw	r7,264(r4)
8113b7fc:	01000084 	movi	r4,2
8113b800:	893fd21e 	bne	r17,r4,8113b74c <__reset+0xfb11b74c>
8113b804:	11006317 	ldw	r4,396(r2)
8113b808:	218cb03a 	or	r6,r4,r6
8113b80c:	11806315 	stw	r6,396(r2)
8113b810:	003fce06 	br	8113b74c <__reset+0xfb11b74c>
8113b814:	18805304 	addi	r2,r3,332
8113b818:	18805215 	stw	r2,328(r3)
8113b81c:	003fc606 	br	8113b738 <__reset+0xfb11b738>
8113b820:	00bfffc4 	movi	r2,-1
8113b824:	003fd006 	br	8113b768 <__reset+0xfb11b768>

8113b828 <__call_exitprocs>:
8113b828:	defff504 	addi	sp,sp,-44
8113b82c:	de00012e 	bgeu	sp,et,8113b834 <__call_exitprocs+0xc>
8113b830:	003b68fa 	trap	3
8113b834:	df000915 	stw	fp,36(sp)
8113b838:	dd400615 	stw	r21,24(sp)
8113b83c:	dc800315 	stw	r18,12(sp)
8113b840:	dfc00a15 	stw	ra,40(sp)
8113b844:	ddc00815 	stw	r23,32(sp)
8113b848:	dd800715 	stw	r22,28(sp)
8113b84c:	dd000515 	stw	r20,20(sp)
8113b850:	dcc00415 	stw	r19,16(sp)
8113b854:	dc400215 	stw	r17,8(sp)
8113b858:	dc000115 	stw	r16,4(sp)
8113b85c:	d9000015 	stw	r4,0(sp)
8113b860:	2839883a 	mov	fp,r5
8113b864:	04800044 	movi	r18,1
8113b868:	057fffc4 	movi	r21,-1
8113b86c:	00a04534 	movhi	r2,33044
8113b870:	1082ca04 	addi	r2,r2,2856
8113b874:	12000017 	ldw	r8,0(r2)
8113b878:	45005217 	ldw	r20,328(r8)
8113b87c:	44c05204 	addi	r19,r8,328
8113b880:	a0001c26 	beq	r20,zero,8113b8f4 <__call_exitprocs+0xcc>
8113b884:	a0800117 	ldw	r2,4(r20)
8113b888:	15ffffc4 	addi	r23,r2,-1
8113b88c:	b8000d16 	blt	r23,zero,8113b8c4 <__call_exitprocs+0x9c>
8113b890:	14000044 	addi	r16,r2,1
8113b894:	8421883a 	add	r16,r16,r16
8113b898:	8421883a 	add	r16,r16,r16
8113b89c:	84402004 	addi	r17,r16,128
8113b8a0:	a463883a 	add	r17,r20,r17
8113b8a4:	a421883a 	add	r16,r20,r16
8113b8a8:	e0001e26 	beq	fp,zero,8113b924 <__call_exitprocs+0xfc>
8113b8ac:	80804017 	ldw	r2,256(r16)
8113b8b0:	e0801c26 	beq	fp,r2,8113b924 <__call_exitprocs+0xfc>
8113b8b4:	bdffffc4 	addi	r23,r23,-1
8113b8b8:	843fff04 	addi	r16,r16,-4
8113b8bc:	8c7fff04 	addi	r17,r17,-4
8113b8c0:	bd7ff91e 	bne	r23,r21,8113b8a8 <__reset+0xfb11b8a8>
8113b8c4:	00800034 	movhi	r2,0
8113b8c8:	10800004 	addi	r2,r2,0
8113b8cc:	10000926 	beq	r2,zero,8113b8f4 <__call_exitprocs+0xcc>
8113b8d0:	a0800117 	ldw	r2,4(r20)
8113b8d4:	1000301e 	bne	r2,zero,8113b998 <__call_exitprocs+0x170>
8113b8d8:	a0800017 	ldw	r2,0(r20)
8113b8dc:	10003226 	beq	r2,zero,8113b9a8 <__call_exitprocs+0x180>
8113b8e0:	a009883a 	mov	r4,r20
8113b8e4:	98800015 	stw	r2,0(r19)
8113b8e8:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113b8ec:	9d000017 	ldw	r20,0(r19)
8113b8f0:	a03fe41e 	bne	r20,zero,8113b884 <__reset+0xfb11b884>
8113b8f4:	dfc00a17 	ldw	ra,40(sp)
8113b8f8:	df000917 	ldw	fp,36(sp)
8113b8fc:	ddc00817 	ldw	r23,32(sp)
8113b900:	dd800717 	ldw	r22,28(sp)
8113b904:	dd400617 	ldw	r21,24(sp)
8113b908:	dd000517 	ldw	r20,20(sp)
8113b90c:	dcc00417 	ldw	r19,16(sp)
8113b910:	dc800317 	ldw	r18,12(sp)
8113b914:	dc400217 	ldw	r17,8(sp)
8113b918:	dc000117 	ldw	r16,4(sp)
8113b91c:	dec00b04 	addi	sp,sp,44
8113b920:	f800283a 	ret
8113b924:	a0800117 	ldw	r2,4(r20)
8113b928:	80c00017 	ldw	r3,0(r16)
8113b92c:	10bfffc4 	addi	r2,r2,-1
8113b930:	15c01426 	beq	r2,r23,8113b984 <__call_exitprocs+0x15c>
8113b934:	80000015 	stw	zero,0(r16)
8113b938:	183fde26 	beq	r3,zero,8113b8b4 <__reset+0xfb11b8b4>
8113b93c:	95c8983a 	sll	r4,r18,r23
8113b940:	a0806217 	ldw	r2,392(r20)
8113b944:	a5800117 	ldw	r22,4(r20)
8113b948:	2084703a 	and	r2,r4,r2
8113b94c:	10000b26 	beq	r2,zero,8113b97c <__call_exitprocs+0x154>
8113b950:	a0806317 	ldw	r2,396(r20)
8113b954:	2088703a 	and	r4,r4,r2
8113b958:	20000c1e 	bne	r4,zero,8113b98c <__call_exitprocs+0x164>
8113b95c:	89400017 	ldw	r5,0(r17)
8113b960:	d9000017 	ldw	r4,0(sp)
8113b964:	183ee83a 	callr	r3
8113b968:	a0800117 	ldw	r2,4(r20)
8113b96c:	15bfbf1e 	bne	r2,r22,8113b86c <__reset+0xfb11b86c>
8113b970:	98800017 	ldw	r2,0(r19)
8113b974:	153fcf26 	beq	r2,r20,8113b8b4 <__reset+0xfb11b8b4>
8113b978:	003fbc06 	br	8113b86c <__reset+0xfb11b86c>
8113b97c:	183ee83a 	callr	r3
8113b980:	003ff906 	br	8113b968 <__reset+0xfb11b968>
8113b984:	a5c00115 	stw	r23,4(r20)
8113b988:	003feb06 	br	8113b938 <__reset+0xfb11b938>
8113b98c:	89000017 	ldw	r4,0(r17)
8113b990:	183ee83a 	callr	r3
8113b994:	003ff406 	br	8113b968 <__reset+0xfb11b968>
8113b998:	a0800017 	ldw	r2,0(r20)
8113b99c:	a027883a 	mov	r19,r20
8113b9a0:	1029883a 	mov	r20,r2
8113b9a4:	003fb606 	br	8113b880 <__reset+0xfb11b880>
8113b9a8:	0005883a 	mov	r2,zero
8113b9ac:	003ffb06 	br	8113b99c <__reset+0xfb11b99c>

8113b9b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113b9b0:	defffd04 	addi	sp,sp,-12
8113b9b4:	de00012e 	bgeu	sp,et,8113b9bc <_exit+0xc>
8113b9b8:	003b68fa 	trap	3
8113b9bc:	df000215 	stw	fp,8(sp)
8113b9c0:	df000204 	addi	fp,sp,8
8113b9c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8113b9c8:	d0207405 	stb	zero,-32304(gp)
8113b9cc:	e0bfff17 	ldw	r2,-4(fp)
8113b9d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113b9d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113b9d8:	10000226 	beq	r2,zero,8113b9e4 <_exit+0x34>
    ALT_SIM_FAIL();
8113b9dc:	002af070 	cmpltui	zero,zero,43969
8113b9e0:	00000106 	br	8113b9e8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
8113b9e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8113b9e8:	003fff06 	br	8113b9e8 <__reset+0xfb11b9e8>
