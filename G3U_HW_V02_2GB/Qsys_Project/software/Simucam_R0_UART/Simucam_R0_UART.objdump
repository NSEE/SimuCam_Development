
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0004464c memsz 0x0005789c flags rwx
    LOAD off    0x00046000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00046000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003e0a8  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004574  8113e304  8113e304  0003f304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df4  81142878  81142878  00043878  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013250  8114466c  8114466c  0004566c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  811578bc  811578bc  00046000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00046000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00046000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001d88  00000000  00000000  00046028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000624b4  00000000  00000000  00047db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00015d09  00000000  00000000  000aa264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f119  00000000  00000000  000bff6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00008158  00000000  00000000  000df088  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000af72  00000000  00000000  000e71e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000270fe  00000000  00000000  000f2152  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00119250  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023c8  00000000  00000000  00119290  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0012610d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00126113  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0012611f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00126120  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00126121  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00126125  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00126129  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0012612d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  00126138  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  00126142  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0012614c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0012615d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  0012619c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113e304 l    d  .rodata	00000000 .rodata
81142878 l    d  .rwdata	00000000 .rwdata
8114466c l    d  .bss	00000000 .bss
811578bc l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81144688 l     O .bss	00000004 viCh1HoldContext
8114468c l     O .bss	00000004 viCh2HoldContext
81144690 l     O .bss	00000004 viCh3HoldContext
81144694 l     O .bss	00000004 viCh4HoldContext
81144698 l     O .bss	00000004 viCh5HoldContext
8114469c l     O .bss	00000004 viCh6HoldContext
811446a0 l     O .bss	00000004 viCh7HoldContext
811446a4 l     O .bss	00000004 viCh8HoldContext
81105148 l     F .text	00000054 vFeebWriteReg
8110519c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
8110574c l     F .text	00000050 uliSpwcReadReg
811056f8 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81144594 l     O .rwdata	00000001 ucIoValue
8110594c l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
8110623c l     F .text	0000013c msgdma_write_extended_descriptor
81106378 l     F .text	00000164 msgdma_construct_extended_descriptor
811064dc l     F .text	00000318 msgdma_descriptor_async_transfer
811067f4 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107370 l     F .text	00000054 vRstcWriteReg
811073c4 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
811446ac l     O .bss	00000004 viHoldContext
811086f8 l     F .text	00000058 uliSyncReadReg
8110869c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 data_control_task.c
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
811446b2 l     O .bss	00000004 xRAckLocal.4620
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 nfee_control_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
811446b6 l     O .bss	00000004 xSAckLocal.4605
00000000 l    df *ABS*	00000000 parser_comm_task.c
81144818 l     O .bss	0000004c PreParsedLocal.4689
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81144864 l     O .bss	0000004c xPreParsedReader.4684
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 stack_monitor_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
811406a3 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 data_controller.c
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 fee_controller.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
81141c6d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
81142878 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81114bc8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
81141e3a l     O .rodata	00000010 zeroes.4389
81141e4a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
81141e5a l     O .rodata	00000010 zeroes.4404
81119840 l     F .text	000000c4 __sbprintf
81141e6a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
81141e82 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
8111b528 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111d078 l     F .text	00000008 __fp_unlock
8111d08c l     F .text	000001a4 __sinit.part.1
8111d230 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
811430c4 l     O .rwdata	00000020 lc_ctype_charset
811430a4 l     O .rwdata	00000020 lc_message_charset
811430e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
81141ec0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
811200a0 l     F .text	0000006c sulp
81142008 l     O .rodata	00000014 fpi.2737
8114201c l     O .rodata	00000028 tinytens
81141ff4 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
81142054 l     O .rodata	00000010 blanks.4332
81142044 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81123710 l     F .text	00000104 __sprint_r.part.0
81142074 l     O .rodata	00000010 blanks.4348
81142064 l     O .rodata	00000010 zeroes.4349
81124cac l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81125160 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81128efc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81129040 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81129074 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
811292f8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_log_macro.o
811293f0 l       .text	00000000 tx_next_char
81129418 l       .text	00000000 end_tx
811293f8 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
81129ef4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
8112a1b0 l     F .text	00000044 alt_get_errno
8112a1f4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
8112a41c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
811445dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8112a9bc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
811445e8 l     O .rwdata	00000004 lockid
81144760 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
811445ec l     O .rwdata	00000004 lockid
81144768 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
8112c4cc l     F .text	00000050 OS_InitMisc
8112c51c l     F .text	00000074 OS_InitRdyList
8112c6a0 l     F .text	000000ec OS_InitTCBList
8112c3e4 l     F .text	000000e8 OS_InitEventList
8112c590 l     F .text	00000088 OS_InitTaskIdle
8112c618 l     F .text	00000088 OS_InitTaskStat
8112c930 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112e748 l     F .text	000000fc OS_FlagTaskRdy
8112e4f8 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
81130034 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
81134a64 l     F .text	00000044 OSTmr_Lock
81134504 l     F .text	00000074 OSTmr_Alloc
81134aa8 l     F .text	0000003c OSTmr_Unlock
81134968 l     F .text	000000fc OSTmr_Unlink
81134578 l     F .text	000000a4 OSTmr_Free
81134818 l     F .text	00000150 OSTmr_Link
81134790 l     F .text	00000088 OSTmr_InitTask
81134ae4 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
81134bf4 l     F .text	0000003c alt_dev_reg
81143360 l     O .rwdata	0000106c jtag_uart_0
811443cc l     O .rwdata	000000d0 rs232_uart
8114449c l     O .rwdata	00000064 dma_DDR_M1
81144500 l     O .rwdata	00000064 dma_DDR_M2
81144564 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81139484 l     F .text	000002bc altera_avalon_jtag_uart_irq
81139740 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81139f44 l     F .text	00000084 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8113a2dc l     F .text	000000a4 altera_avalon_uart_irq
8113a380 l     F .text	00000140 altera_avalon_uart_rxirq
8113a4c0 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8113a6c8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8113a97c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8113ac00 l     F .text	00000044 alt_get_errno
8113ac44 l     F .text	0000009c alt_msgdma_write_standard_descriptor
8113ace0 l     F .text	00000134 alt_msgdma_write_extended_descriptor
8113ae14 l     F .text	0000018c alt_msgdma_irq
8113afa0 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
8113b034 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
8113b190 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
8113b4d0 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
8113bbd8 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
8113bc84 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113ce50 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113d564 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
81144810 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81144814 g     O .bss	00000004 alt_instruction_exception_handler
81144dd8 g     O .bss	00000800 vFeeTask0_stk
8110fa94 g     F .text	0000004c vFailDeleteInitialization
811447e4 g     O .bss	00000004 aux_status_register
811455d8 g     O .bss	00001000 vInAckHandlerTask_stk
8113cc0c g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
81114ad4 g     F .text	00000018 putchar
811078fc g     F .text	0000004c vSyncInitIrq
8110c264 g     F .text	00000284 vCheckRetransmission128
8111f724 g     F .text	0000007c _mprec_log10
81107a78 g     F .text	00000040 bSyncSetMbt
81105b30 g     F .text	00000108 I2C_Read
8114463a g     O .rwdata	00000002 OSTaskNameSize
811465d8 g     O .bss	00000260 xBuffer64
8111f818 g     F .text	0000008c __any_on
8111e1ec g     F .text	0000005c _isatty_r
81141ecc g     O .rodata	00000028 __mprec_tinytens
8112a014 g     F .text	0000019c alt_main
81114aec g     F .text	000000c8 _puts_r
811049d4 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81144770 g     O .bss	00000004 OSTmrFreeList
811577bc g     O .bss	00000100 alt_irq
8111e35c g     F .text	00000068 _lseek_r
81111828 g     F .text	00000030 vChangeDefaultAutoResetSync
8112efa8 g     F .text	000000d4 OS_MemInit
8110e610 g     F .text	0000098c vLoadDefaultETHConf
81109cb4 g     F .text	0000014c bCheckInAck64
81133a44 g     F .text	00000068 OSTimeSet
8111d430 g     F .text	000000ac __sflags
81110900 g     F .text	00000068 vCoudlNotCreateNFee2Task
8112805c g     F .text	00000088 .hidden __eqdf2
81102aa8 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
81111714 g     F .text	00000034 vLoadDefaultSyncSource
811350f4 g     F .text	000001ac Check_for_Master_Boot_Record
81152d78 g     O .bss	00000010 OSTmrWheelTbl
8113b998 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81146838 g     O .bss	00000010 xFeeQueueTBL3
8112b0ac g     F .text	00000618 OSEventPendMulti
811446c0 g     O .bss	00000004 xNfeeSchedule
811578bc g       *ABS*	00000000 __alt_heap_start
8113db9c g     F .text	0000002c OSTaskCreateHook
81138f6c g     F .text	000001c4 alt_up_sd_card_fclose
811446c4 g     O .bss	00000004 xSemCountBuffer64
81114910 g     F .text	00000044 printf
811446a9 g     O .bss	00000001 SspdConfigControl
81107e94 g     F .text	00000054 bSyncCtrReset
81144612 g     O .rwdata	00000002 OSMboxEn
81111dfc g     F .text	000000a4 aatoh
8112b728 g     F .text	00000054 OSIntEnter
81125dcc g     F .text	000000a4 _wcrtomb_r
811048e0 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110f9fc g     F .text	0000004c vFailReceiverCreate
81104544 g     F .text	00000040 vFeebCh2HandleIrq
81115054 g     F .text	00000064 __sseek
8111d3e0 g     F .text	00000010 __sinit
81106cb0 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
8111b1a8 g     F .text	00000148 __swbuf_r
8110ca3c g     F .text	0000047c bResourcesInitRTOS
811053bc g     F .text	000000f4 bSpwcGetLinkError
81144622 g     O .rwdata	00000002 OSQEn
8111e278 g     F .text	00000084 _setlocale_r
81144598 g     O .rwdata	00000004 LedsPainelControl
811448d8 g     O .bss	00000100 cDebugBuffer
8111d238 g     F .text	00000070 __sfmoreglue
811236f8 g     F .text	00000018 ungetc
8112ad68 g     F .text	000000d4 __malloc_unlock
81102d98 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113dc1c g     F .text	00000028 OSTaskStatHook
81111784 g     F .text	00000030 vChangeDefaultSyncSource
81144774 g     O .bss	00000001 OSLockNesting
81144778 g     O .bss	00000004 OSTmrSemSignal
81110c28 g     F .text	000000d8 vNFeeStructureInit
811446c8 g     O .bss	00000004 xSemCommInit
8110292c g     F .text	00000080 uliXorshift32
8112010c g     F .text	00001600 _strtod_r
811446cc g     O .bss	00000004 xSemCountSenderACK
81111f38 g     F .text	00000448 .hidden __divsf3
81144808 g     O .bss	00000004 current_sector_modified
81144660 g     O .rwdata	00000002 OSDataSize
8114477c g     O .bss	00000001 OSRunning
81105580 g     F .text	00000178 bSpwcInitCh
81129cdc g     F .text	00000064 alt_log_jtag_uart_isr_proc
81146848 g     O .bss	00001000 senderTask_stk
811446d0 g     O .bss	00000004 fp
81147848 g     O .bss	00000030 xNfeeScheduleTBL
81109b6c g     F .text	00000148 bCheckInAck128
8111e6ec g     F .text	0000015c memmove
8113dc98 g     F .text	0000002c OSInitHookBegin
81108330 g     F .text	00000074 bSyncCtrCh8OutEnable
81144658 g     O .rwdata	00000002 OSTmrSize
8111d3c8 g     F .text	00000018 _cleanup
81111a34 g     F .text	00000040 siCloseFile
8111e848 g     F .text	000000b0 _Balloc
811117b4 g     F .text	00000038 vLoadDefaultAutoResetSync
81137b48 g     F .text	000000cc alt_up_sd_card_is_Present
8113b8d8 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81144674 g     O .bss	00000004 pxDmaM1Dev
81102b40 g     F .text	000000a4 DMA_DISPATCHER_STOP
81134e1c g     F .text	00000054 Save_Modified_Sector
81104b34 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81144780 g     O .bss	00000004 OSIdleCtr
8114473c g     O .bss	00000001 alt_log_write_on_flag
8110579c g     F .text	0000003c bEnableIsoDrivers
811280e4 g     F .text	000000dc .hidden __gtdf2
8113d92c g     F .text	0000002c altera_nios2_gen2_irq_init
8113da14 g       .text	00000000 OSStartTsk
81107bec g     F .text	00000070 bSyncSetNCycles
8112cca0 g     F .text	000002dc OS_TCBInit
8114473f g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
811113f4 g     F .text	00000068 vInitSimucamBasicHW
81147878 g     O .bss	00001000 vTimeoutCheckerTask_stk
81108248 g     F .text	00000074 bSyncCtrCh6OutEnable
81105eac g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
81144800 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81144784 g     O .bss	00000002 OSTmrUsed
811446d4 g     O .bss	00000004 xSemCountBuffer128
81103270 g     F .text	000000f8 TEMP_Read
81148878 g     O .bss	00000800 vDataControlTask_stk
811045c4 g     F .text	00000040 vFeebCh4HandleIrq
8114465e g     O .rwdata	00000002 OSTmrWheelTblSize
811110f0 g     F .text	0000002c cFeeSpwChannelDisable
811445fe g     O .rwdata	00000002 OSEventSize
81144786 g     O .bss	00000001 OSPrioHighRdy
81113aac g     F .text	00000064 _fstat_r
8113dbc8 g     F .text	0000002c OSTaskDelHook
81144718 g     O .bss	00000004 errno
81108624 g     F .text	0000003c uliSyncGetCtr
8111b138 g     F .text	0000001c __svfscanf
81114fc8 g     F .text	00000008 __seofread
8113d9f4 g       .text	00000000 OSStartHighRdy
81108820 g     F .text	00000968 vPrintConsoleNFee
81132474 g     F .text	000001ec OSTaskCreateExt
81152d4c g     O .bss	00000011 alt_log_write_buf
8110fdb8 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8112223c g     F .text	00001244 ___svfiprintf_internal_r
8110b7e0 g     F .text	00000364 bPreParserV2
8112e028 g     F .text	00000068 OSFlagPendGetFlagsRdy
8114463e g     O .rwdata	00000002 OSTaskStatStkSize
8112d174 g     F .text	00000310 OSFlagAccept
81130750 g     F .text	000000c0 OSQFlush
811301cc g     F .text	00000148 OSQAccept
81144750 g     O .bss	00000004 alt_argv
8114c590 g       *ABS*	00000000 _gp
8110f6c4 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
8112a880 g     F .text	0000013c usleep
81138120 g     F .text	00000384 alt_up_sd_card_fopen
811118a0 g     F .text	00000030 bSDcardIsPresent
8110bb44 g     F .text	0000017c vSenderComTask
81137c88 g     F .text	000000d8 alt_up_sd_card_find_first
811322c0 g     F .text	000001b4 OSTaskCreate
8110ff58 g     F .text	00000068 vFailSendNack
811447f4 g     O .bss	00000004 command_argument_register
81131dc8 g     F .text	000004f8 OSTaskChangePrio
81110668 g     F .text	00000088 vCouldNotSendTMPusCommand
8114476c g     O .bss	00000004 alt_heapsem
81106144 g     F .text	00000080 bSetBoardLeds
8112cf7c g     F .text	000001f8 OSDebugInit
81132660 g     F .text	0000034c OSTaskDel
8112f07c g     F .text	000001ac OSMutexAccept
81149078 g     O .bss	000004b8 xSimMeb
811112d8 g     F .text	00000040 vSetTimeCode
8113c480 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
811446d8 g     O .bss	00000004 xSemCountPreParsed
81143144 g     O .rwdata	00000180 alt_fd_list
81104a84 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
811432e0 g     O .rwdata	0000001d alt_log_msg_alt_main
81152d88 g     O .bss	00000580 OSFlagTbl
8110f82c g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8111166c g     F .text	0000003c vLoadDefaultRTValue
81114acc g     F .text	00000008 _putchar_r
8112c1ac g     F .text	000000c0 OS_EventTaskRemove
81149530 g     O .bss	00000800 vFeeTask5_stk
8114473e g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
8113739c g     F .text	00000134 find_first_empty_record_in_root_directory
8113d010 g     F .text	00000098 alt_find_dev
811145f8 g     F .text	00000150 memcpy
81125a98 g     F .text	00000264 __hexnan
81149d30 g     O .bss	00000160 xBuffer32
81144628 g     O .rwdata	00000002 OSRdyTblSize
81153308 g     O .bss	000001a0 OSTmrTbl
8111d080 g     F .text	0000000c _cleanup_r
81128c38 g     F .text	000000e4 .hidden __floatsidf
8110e238 g     F .text	000001a8 vSendPusTM64
811079e8 g     F .text	0000004c ucSyncStatusErrorCode
811111ec g     F .text	00000034 cFeeRMAPLogDisable
8110a5d8 g     F .text	000009ac vParserCommTask
8113d630 g     F .text	00000084 alt_io_redirect
81111180 g     F .text	00000034 cFeeRMAPEchoingDisable
811281c0 g     F .text	000000f4 .hidden __ltdf2
81104d64 g     F .text	000000d4 bFeebSetIrqControl
811104c8 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
811446dc g     O .bss	00000004 xMutexReceivedACK
81103bec g     F .text	000000b0 bSdmaInitM2Dma
8113e304 g       *ABS*	00000000 __DTOR_END__
8113c908 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113cc50 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107f3c g     F .text	00000054 bSyncCtrErrInj
8113cbb0 g     F .text	0000005c alt_msgdma_register_callback
8110ef9c g     F .text	00000330 vShowEthConfig
8111145c g     F .text	00000030 bLogWriteSDCard
8110fb48 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
8110b09c g     F .text	000000a0 bTrySendSemaphoreCommInit
81114bb4 g     F .text	00000014 puts
8113dd40 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
811078bc g     F .text	00000040 vSyncHandleIrq
8112ae3c g     F .text	00000128 OSEventNameGet
81104748 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
8114460c g     O .rwdata	00000002 OSFlagMax
8111e478 g     F .text	000000e0 mbrtowc
81136f94 g     F .text	000001b4 find_first_empty_cluster
811081d4 g     F .text	00000074 bSyncCtrCh5OutEnable
811446b0 g     O .bss	00000001 vucN
8111fe78 g     F .text	00000074 __fpclassifyd
81107948 g     F .text	00000054 bSyncStatusExtnIrq
8111b154 g     F .text	00000054 _vfscanf_r
8112f6fc g     F .text	000005a4 OSMutexPend
8111f678 g     F .text	000000ac __ratio
81137a84 g     F .text	000000c4 alt_up_sd_card_open_dev
811106f0 g     F .text	00000068 vWarnCouldNotgetMutexRetrans128
8112b77c g     F .text	00000100 OSIntExit
81107ab8 g     F .text	00000040 bSyncSetBt
81124c90 g     F .text	0000001c __vfiprintf_internal
81144646 g     O .rwdata	00000002 OSTCBSize
81104704 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81144787 g     O .bss	00000001 OSPrioCur
811399b4 g     F .text	000002c4 altera_avalon_jtag_uart_read
8113c148 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
811148d8 g     F .text	00000038 _printf_r
81126c00 g     F .text	00000064 .hidden __udivsi3
8112933c g     F .text	000000ac isatty
811446a8 g     O .bss	00000001 LedsBoardControl
811446e0 g     O .bss	00000004 xSemCountReceivedACK
8114462c g     O .rwdata	00000002 OSStkWidth
8111e248 g     F .text	00000030 iswspace
81141f1c g     O .rodata	000000c8 __mprec_tens
81144620 g     O .rwdata	00000002 OSPtrSize
81110aa0 g     F .text	00000068 vCoudlNotCreateNFeeControllerTask
8111e2fc g     F .text	0000000c __locale_charset
811080ec g     F .text	00000074 bSyncCtrCh3OutEnable
81126df0 g     F .text	000000c8 .hidden __lesf2
81144600 g     O .rwdata	00000002 OSEventTblSize
81125fcc g     F .text	0000007c .hidden __fixunsdfsi
8113d958 g       .text	00000000 OSCtxSw
81105c38 g     F .text	00000160 I2C_MultipleRead
81129e80 g     F .text	00000074 alt_log_system_clock
81144724 g     O .bss	00000004 __malloc_top_pad
81144788 g     O .bss	00000004 OSTCBList
811344c4 g     F .text	00000040 OSTmrSignal
81144734 g     O .bss	00000004 alt_fd_list_lock
81121d68 g     F .text	0000001c strtoul
811445b0 g     O .rwdata	00000004 __mb_cur_max
8111e32c g     F .text	0000000c _localeconv_r
81121d84 g     F .text	000002e0 _strtoull_r
81107300 g     F .text	00000070 vRstcHoldDeviceReset
8111ec6c g     F .text	00000044 __i2b
8111db90 g     F .text	000004c4 __sfvwrite_r
81136274 g     F .text	000000c0 get_dir_divider_location
811534a8 g     O .bss	00000c30 OSMemTbl
8114478c g     O .bss	00000001 OSTickStepState
81129a90 g     F .text	00000060 alt_log_printf_proc
81149e90 g     O .bss	00001000 vReceiverUartTask_stk
81114dc0 g     F .text	0000005c _sbrk_r
811446e4 g     O .bss	00000004 xSemTimeoutChecker
81135f34 g     F .text	000000cc filename_to_upper_case
81144740 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
81144624 g     O .rwdata	00000002 OSQMax
811384a4 g     F .text	00000090 alt_up_sd_card_set_attributes
8112f3f8 g     F .text	00000304 OSMutexDel
811540d8 g     O .bss	00000800 OSTaskStatStk
811118d0 g     F .text	00000030 bSDcardFAT16Check
8112ebc4 g     F .text	000000f8 OSMemNameGet
8110f518 g     F .text	00000060 vFailCreateMutexSResources
811352a0 g     F .text	00000284 Read_File_Record_At_Offset
81144604 g     O .rwdata	00000002 OSFlagEn
8111f8a4 g     F .text	00000068 _read_r
8114464a g     O .rwdata	00000002 OSTimeTickHookEn
81130c18 g     F .text	00000170 OSQPost
8112e844 g     F .text	000000ac OS_FlagUnlink
81102490 g     F .text	0000049c bDdr2MemoryRandomReadTest
811445cc g     O .rwdata	00000004 alt_max_fd
81110274 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
8112c7e8 g     F .text	00000070 OS_MemCopy
8112c858 g     F .text	000000d8 OS_Sched
81136b18 g     F .text	0000047c find_file_in_directory
81124e3c g     F .text	000000f8 _fclose_r
8112eacc g     F .text	000000f8 OSMemGet
81132ca4 g     F .text	000001bc OSTaskNameSet
8111d048 g     F .text	00000030 fflush
81144720 g     O .bss	00000004 __malloc_max_sbrked_mem
81144790 g     O .bss	00000004 OSCtxSwCtr
8113dc44 g     F .text	00000054 OSTimeTickHook
8114ae90 g     O .bss	00001000 vOutAckHandlerTask_stk
81129170 g     F .text	00000188 alt_irq_register
8114460e g     O .rwdata	00000002 OSFlagNameSize
811130c8 g     F .text	00000118 .hidden __extendsfdf2
8112c26c g     F .text	00000108 OS_EventTaskRemoveMulti
81137c14 g     F .text	00000074 alt_up_sd_card_is_FAT16
811059c8 g     F .text	00000088 I2C_TestAdress
81126eb8 g     F .text	000008b4 .hidden __adddf3
81152d60 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
81126cbc g     F .text	00000078 .hidden __nesf2
8112c054 g     F .text	00000158 OS_EventTaskWaitMulti
8111f410 g     F .text	00000114 __b2d
8113be80 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81144626 g     O .rwdata	00000002 OSQSize
811265c8 g     F .text	00000540 .hidden __umoddi3
81129f38 g     F .text	000000dc lseek
81131708 g     F .text	00000214 OSSemPend
811054b0 g     F .text	000000d0 bSpwcGetLinkStatus
81105014 g     F .text	00000088 bFeebGetWindowing
811445a0 g     O .rwdata	00000004 _global_impure_ptr
81107870 g     F .text	0000004c bSSDisplayUpdate
811365d8 g     F .text	00000540 get_home_directory_cluster_for_file
8111f90c g     F .text	0000056c _realloc_r
81144610 g     O .rwdata	00000002 OSLowestPrio
811578bc g       *ABS*	00000000 __bss_end
8113d46c g     F .text	000000f8 alt_iic_isr_register
8113dd14 g     F .text	0000002c OSTCBInitHook
81144656 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
8112a770 g     F .text	00000110 alt_tick
8110f7c4 g     F .text	00000068 vFailGetMutexSenderTask
81107220 g     F .text	0000006c vRstcSimucamReset
81142084 g     O .rodata	00000100 __hexdig
8113c9fc g     F .text	000001b4 alt_msgdma_init
81126048 g     F .text	00000580 .hidden __udivdi3
8110b4c8 g     F .text	0000017c setPreAckSenderFreePos
811250b4 g     F .text	00000024 _fputwc_r
811445f8 g     O .rwdata	00000002 OSEventEn
81141ef4 g     O .rodata	00000028 __mprec_bigtens
8111ea48 g     F .text	0000010c __s2b
81144652 g     O .rwdata	00000002 OSTmrCfgNameSize
8114be90 g     O .bss	00000010 xFeeQueueTBL4
81107b78 g     F .text	00000074 bSyncSetPolarity
8110c4e8 g     F .text	0000028c vCheckRetransmission64
81128d1c g     F .text	000000b0 .hidden __floatunsidf
81144744 g     O .bss	00000004 alt_system_clock_in_sec
81129c88 g     F .text	00000054 alt_log_jtag_uart_startup_info
8110fd50 g     F .text	00000068 vFailFoundBufferRetransmission
8111f148 g     F .text	00000060 __mcmp
8114480c g     O .bss	00000004 current_sector_index
8113a174 g     F .text	00000168 altera_avalon_uart_init
8113ccd8 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
811040cc g     F .text	00000438 bSdmaDmaM2Transfer
81111318 g     F .text	00000034 vResetTimeCode
811110c4 g     F .text	0000002c cFeeSpwChannelEnable
8111d400 g     F .text	00000018 __fp_lock_all
8113d418 g     F .text	00000054 alt_ic_irq_enabled
81105a50 g     F .text	000000e0 I2C_Write
81144794 g     O .bss	00000002 OSTmrFree
8112e660 g     F .text	000000e8 OS_FlagInit
8112a6cc g     F .text	000000a4 alt_alarm_stop
81115428 g     F .text	0000001c strtol
8114473d g     O .bss	00000001 alt_log_sys_clk_on_flag
81133c70 g     F .text	00000140 OSTmrDel
8113500c g     F .text	000000e8 mark_cluster
81144634 g     O .rwdata	00000002 OSTaskIdleStkSize
81144738 g     O .bss	00000004 alt_irq_active
81131328 g     F .text	000000b8 OSSemAccept
81113644 g     F .text	0000044c _fseeko_r
811151a4 g     F .text	00000044 strnlen
8112edd8 g     F .text	000000e0 OSMemPut
8112e8f0 g     F .text	000001dc OSMemCreate
81144798 g     O .bss	00000004 OSIdleCtrMax
8110e3e0 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
811294d8 g     F .text	000005b8 alt_log_private_printf
8114311c g     O .rwdata	00000028 alt_dev_null
8113ba90 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107b38 g     F .text	00000040 bSyncSetOst
81144648 g     O .rwdata	00000002 OSTicksPerSec
811432c4 g     O .rwdata	00000019 alt_log_msg_bss
811374d0 g     F .text	00000194 convert_filename_to_name_extension
8110bcc0 g     F .text	00000060 vSimMebTask
81105d98 g     F .text	00000094 i2c_start
8113d958 g       .text	00000000 OSIntCtxSw
81108160 g     F .text	00000074 bSyncCtrCh4OutEnable
8113c874 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81129018 g     F .text	00000028 alt_dcache_flush_all
8111eb54 g     F .text	00000068 __hi0bits
811116a8 g     F .text	0000003c vChangeRTValue
811447e0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110c0e0 g     F .text	00000184 vCheck
81110bd8 g     F .text	00000050 vNFeeNotInUse
81128bb8 g     F .text	00000080 .hidden __fixdfsi
8110a280 g     F .text	00000060 vNFeeControlTask
8114bea0 g     O .bss	00001000 vInitialTask_stk
811446e8 g     O .bss	00000002 usiIdCMD
81107e40 g     F .text	00000054 bSyncCtrStart
81137148 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
8112170c g     F .text	00000018 strtod
8114479c g     O .bss	00000004 OSTCBFreeList
8113191c g     F .text	00000174 OSSemPendAbort
8110f964 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
811101dc g     F .text	0000004c vFailCreateTimerRetransmisison
8110fce8 g     F .text	00000068 vFailGetCountSemaphorexBuffer32
8110d3c0 g     F .text	000002f0 bSendUART128v2
81111524 g     F .text	000000a4 vSimucamStructureInit
811445c4 g     O .rwdata	00000008 alt_dev_list
81113574 g     F .text	0000004c _fputc_r
8112aa00 g     F .text	0000010c write
81114954 g     F .text	000000a8 _putc_r
81144804 g     O .bss	00000004 device_pointer
8114464c g     O .rwdata	00000002 OSVersionNbr
81126d34 g     F .text	000000bc .hidden __gtsf2
8110af84 g     F .text	00000118 getPreParsedPacket
811290b8 g     F .text	000000b8 fstat
81111380 g     F .text	00000040 vChangeIdNFEEMaster
81113548 g     F .text	0000002c fprintf
811111b4 g     F .text	00000038 cFeeRMAPLogEnable
81102c88 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104adc g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
81110328 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
81111adc g     F .text	00000058 _reg_write
811113c0 g     F .text	00000034 vChangeDefaultIdNFEEMaster
811281c0 g     F .text	000000f4 .hidden __ledf2
8114cea0 g     O .bss	00001000 vStackMonitor_stk
81110600 g     F .text	00000068 vCouldNotSendLog
81133ef0 g     F .text	000001b8 OSTmrRemainGet
811445f4 g     O .rwdata	00000004 OSEndiannessTest
81107414 g     F .text	00000058 v_spi_start
8111eeb0 g     F .text	00000148 __pow5mult
8112382c g     F .text	00001464 ___vfiprintf_internal_r
81144730 g     O .bss	00000004 __nlocale_changed
81126c64 g     F .text	00000058 .hidden __umodsi3
81107f90 g     F .text	00000074 bSyncCtrSyncOutEnable
81111900 g     F .text	000000f8 bInitializeSDCard
811100f8 g     F .text	0000004c vFailParserCommTaskCreate
81114e60 g     F .text	00000038 _scanf_r
81110190 g     F .text	0000004c vFailOutAckHandlerTaskCreate
81144606 g     O .rwdata	00000002 OSFlagGrpSize
8114dea0 g     O .bss	00000058 xInUseRetrans
8113bee0 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
811340a8 g     F .text	000000ec OSTmrStateGet
811578bc g       *ABS*	00000000 end
81104644 g     F .text	00000040 vFeebCh6HandleIrq
8110fe88 g     F .text	00000068 vNoContentInPreParsedBuffer
81113a90 g     F .text	0000001c fseeko
811107c0 g     F .text	00000070 vFailCreateNFEEQueue
811133f8 g     F .text	0000000c _atoi_r
8113a9c0 g     F .text	00000240 altera_avalon_uart_write
8112941c g     F .text	00000054 alt_log_txchar
81113628 g     F .text	0000001c fseek
8110d330 g     F .text	00000090 vCCDChangeValues
811392b4 g     F .text	000001d0 altera_avalon_jtag_uart_init
8112cae8 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110f5c4 g     F .text	0000004c vFailTestCriticasParts
8113e304 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81102020 g     F .text	00000470 bDdr2MemoryRandomWriteTest
81139fc8 g     F .text	00000084 alt_avalon_timer_sc_init
81104f6c g     F .text	000000a8 bFeebSetWindowing
8113a0b4 g     F .text	00000068 altera_avalon_uart_write_fd
81113388 g     F .text	00000064 .hidden __clzsi2
8113a11c g     F .text	00000058 altera_avalon_uart_close_fd
81139c78 g     F .text	000002cc altera_avalon_jtag_uart_write
8113461c g     F .text	00000174 OSTmr_Init
8114def8 g     O .bss	00000348 xBuffer128
8111d3f0 g     F .text	00000004 __sfp_lock_acquire
81103368 g     F .text	00000048 sense_log_temp
8111e608 g     F .text	000000e4 memchr
8112c78c g     F .text	0000005c OS_MemClr
81117624 g     F .text	00002200 ___vfprintf_internal_r
8113da38 g     F .text	00000164 OSTaskStkInit
81114e98 g     F .text	00000060 _sprintf_r
811446ea g     O .bss	00000001 SemCount32
8111d878 g     F .text	00000318 _free_r
8113d6b4 g     F .text	00000234 alt_printf
8110e1e8 g     F .text	00000050 vTimeoutCheck
81111b8c g     F .text	000001fc _print_codec_status
8111e308 g     F .text	00000010 __locale_mb_cur_max
8112bd9c g     F .text	000001a0 OS_EventTaskRdy
81102be4 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113e0c0 g     F .text	00000188 __call_exitprocs
811447a0 g     O .bss	00000001 OSCPUUsage
811109d0 g     F .text	00000068 vCoudlNotCreateNFee4Task
8114472c g     O .bss	00000004 __mlocale_changed
81107ee8 g     F .text	00000054 bSyncCtrOneShot
811445a8 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	000000ac _start
81108660 g     F .text	0000003c uliSyncReadStatus
81144758 g     O .bss	00000004 _alt_tick_rate
81130810 g     F .text	00000294 OSQPend
8112182c g     F .text	000002e8 _strtoll_r
81133594 g     F .text	0000010c OSTimeDly
8111eff8 g     F .text	00000150 __lshift
8110a2e0 g     F .text	000002f8 vOutAckHandlerTask
8113b938 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8114475c g     O .bss	00000004 _alt_nticks
8112a460 g     F .text	00000104 read
81134c70 g     F .text	000000f0 alt_sys_init
81112784 g     F .text	0000012c .hidden __floatsisf
81122064 g     F .text	000001d8 __ssprint_r
81114870 g     F .text	00000068 _open_r
81111ab4 g     F .text	00000028 bTestSimucamCriticalHW
8110509c g     F .text	000000ac bFeebGetBuffersStatus
8110f2cc g     F .text	000000a4 ucCrc8
8110081c g     F .text	00000cb4 bDdr2EepromDump
8113dfa0 g     F .text	00000120 __register_exitproc
811447a1 g     O .bss	00000001 OSTaskCtr
811293e8 g       .text	00000000 tx_log_str
8110e198 g     F .text	00000050 siPosStr
81125cfc g     F .text	000000d0 strncmp
811336a0 g     F .text	00000164 OSTimeDlyHMSM
8111ecb0 g     F .text	00000200 __multiply
8113984c g     F .text	00000070 altera_avalon_jtag_uart_close
811075e4 g     F .text	00000058 v_spi_end
81111a74 g     F .text	00000040 cGetNextChar
8113deb4 g     F .text	000000ec strncpy
811448b0 g     O .bss	00000028 __malloc_current_mallinfo
811445fa g     O .rwdata	00000002 OSEventMax
81126cbc g     F .text	00000078 .hidden __eqsf2
8111f524 g     F .text	00000154 __d2b
81131a90 g     F .text	00000118 OSSemPost
811047d0 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
811116e4 g     F .text	00000030 vChangeDefaultRTValue
811046c4 g     F .text	00000040 vFeebCh8HandleIrq
811447dc g     O .bss	00000004 initialized
8110e048 g     F .text	00000100 vSendLog
8112b910 g     F .text	000000e4 OSSchedUnlock
8110763c g     F .text	00000164 RTCC_SPI_R_MAC
811445d8 g     O .rwdata	00000004 alt_log_boot_on_flag
81139130 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
81121b14 g     F .text	00000254 _strtoul_r
8114e240 g     O .bss	00000010 xFeeQueueTBL5
8113d1b8 g     F .text	000000e4 alt_get_fd
811447a4 g     O .bss	00000004 OSMemFreeList
8112ba6c g     F .text	000000b8 OSStatInit
811029ac g     F .text	00000064 DMA_OPEN_DEVICE
81157254 g     O .bss	00000014 search_data
811051ec g     F .text	00000100 bSpwcSetLink
81128dcc g     F .text	00000130 alt_busy_sleep
8112e42c g     F .text	000000cc OSFlagQuery
81108004 g     F .text	00000074 bSyncCtrCh1OutEnable
81144630 g     O .rwdata	00000002 OSTaskCreateExtEn
81111d88 g     F .text	00000074 _split_codec_status
8111b4cc g     F .text	0000005c _close_r
8110fef0 g     F .text	00000068 vCouldNotSendEthConfUART
81109f4c g     F .text	00000334 vInitialTask
81129b90 g     F .text	000000f8 alt_log_jtag_uart_print_control_reg
8113be20 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113de38 g     F .text	0000007c memcmp
8112bd74 g     F .text	00000028 OS_Dummy
81139200 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
811578bc g       *ABS*	00000000 __alt_stack_base
81139258 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
81104814 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
81113b10 g     F .text	000000d4 _fwrite_r
8113bf40 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81104924 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
8111b370 g     F .text	0000015c __swsetup_r
811548d8 g     O .bss	00000180 OSQTbl
81152d30 g     O .bss	0000001c xConfEth
8112776c g     F .text	000008f0 .hidden __divdf3
81111748 g     F .text	0000003c vChangeSyncSource
8111d2a8 g     F .text	00000120 __sfp
81157268 g     O .bss	00000054 boot_sector_data
81102af4 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111f7a0 g     F .text	00000078 __copybits
81142c9c g     O .rwdata	00000408 __malloc_av_
8111d3fc g     F .text	00000004 __sinit_lock_release
8114466c g     O .bss	00000004 uliInitialState
81105e2c g     F .text	00000080 i2c_stop
81111ea0 g     F .text	00000064 Verif_Error
81111f04 g     F .text	00000034 toInt
8110f710 g     F .text	0000004c vFailSendPreAckSenderSemaphore
811447a8 g     O .bss	00000004 OSTCBHighRdy
811129a8 g     F .text	00000720 .hidden __muldf3
81114f6c g     F .text	0000005c __sread
8111d710 g     F .text	0000003c fread
811447ac g     O .bss	00000004 OSQFreeList
8113d0a8 g     F .text	00000110 alt_find_file
8113ce94 g     F .text	000000ac alt_dev_llist_insert
8112ac40 g     F .text	00000128 __malloc_lock
81113518 g     F .text	00000030 _fprintf_r
8112a5d0 g     F .text	000000fc sbrk
81111040 g     F .text	0000002c vFeeSpwRMAPLoadDefault
8110fc80 g     F .text	00000068 vFailGetCountSemaphorexBuffer64
81115444 g     F .text	000021e0 ___svfprintf_internal_r
8110e588 g     F .text	00000088 vTMPusTestConnection
8112af64 g     F .text	00000148 OSEventNameSet
8111cfe4 g     F .text	00000064 _fflush_r
81124d70 g     F .text	000000cc _calloc_r
811447b0 g     O .bss	00000001 OSRdyGrp
81107a34 g     F .text	00000044 ucSyncStatusCycleNumber
81134194 g     F .text	00000148 OSTmrStart
81104604 g     F .text	00000040 vFeebCh5HandleIrq
81113500 g     F .text	00000018 fopen
81102a10 g     F .text	0000004c DMA_CONFIG
8114466c g       *ABS*	00000000 __bss_start
81114748 g     F .text	00000128 memset
8110b38c g     F .text	0000013c setPreParsedFreePos
8113c99c g     F .text	00000060 alt_msgdma_open
8110d14c g     F .text	0000017c main
8110f894 g     F .text	00000068 vFailGetMutexReceiverTask
8114e250 g     O .bss	00001000 vNFeeControlTask_stk
81111600 g     F .text	0000003c vChangeEPValue
81144754 g     O .bss	00000004 alt_envp
8114471c g     O .bss	00000004 __malloc_max_total_mem
8113c240 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110f370 g     F .text	0000005c ucCrc8wInit
81110228 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81139198 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102fa8 g     F .text	000002c8 POWER_Read
81105fe4 g     F .text	00000160 i2c_read
8111b2f0 g     F .text	00000018 __swbuf
811423d0 g     O .rodata	00000100 OSUnMapTbl
81126df0 g     F .text	000000c8 .hidden __ltsf2
81138534 g     F .text	00000090 alt_up_sd_card_get_attributes
8111d4dc g     F .text	00000234 _fread_r
8110f75c g     F .text	00000068 vFailGetCountSemaphoreSenderTask
811057d8 g     F .text	0000003c bDisableIsoDrivers
8114462a g     O .rwdata	00000002 OSSemEn
81134d60 g     F .text	000000bc Write_Sector_Data
81138944 g     F .text	00000628 alt_up_sd_card_write
8114f250 g     O .bss	00000018 xFeeQ
8112e090 g     F .text	0000039c OSFlagPost
811150b8 g     F .text	00000008 __sclose
81110530 g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
81124f34 g     F .text	00000014 fclose
8112bf3c g     F .text	00000118 OS_EventTaskWait
811103f8 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
811151e8 g     F .text	00000240 _strtol_r
811131e0 g     F .text	000001a8 .hidden __truncdfsf2
8114f268 g     O .bss	00000010 xFeeQueueTBL2
8112cbcc g     F .text	000000d4 OS_TaskStatStkChk
811329ac g     F .text	00000158 OSTaskDelReq
8111b730 g     F .text	00001690 _dtoa_r
8113c55c g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81113de4 g     F .text	00000814 _malloc_r
81125f38 g     F .text	00000030 __ascii_wctomb
8112f228 g     F .text	000001d0 OSMutexCreate
81110390 g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81109e00 g     F .text	0000014c bCheckInAck32
811445d0 g     O .rwdata	00000004 alt_errno
8113c088 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112b9f4 g     F .text	00000078 OSStart
811052ec g     F .text	000000d0 bSpwcGetLink
81106d38 g     F .text	000004e8 POWER_SPI_RW
81123480 g     F .text	000000dc __submore
81129af0 g     F .text	000000a0 altera_avalon_jtag_uart_report_log
8112abd8 g     F .text	00000068 __env_unlock
81110898 g     F .text	00000068 vCoudlNotCreateNFee1Task
8111e054 g     F .text	000000cc _fwalk
81132e60 g     F .text	000001dc OSTaskResume
8112eeb8 g     F .text	000000f0 OSMemQuery
8114463c g     O .rwdata	00000002 OSTaskStatEn
811578bc g       *ABS*	00000000 __alt_stack_limit
81144684 g     O .bss	00000004 ECommSpwCh
811117ec g     F .text	0000003c vChangeAutoResetSync
8111e5a4 g     F .text	00000064 _mbtowc_r
8110981c g     F .text	00000350 vInAckHandlerTaskV2
81144616 g     O .rwdata	00000002 OSMemMax
81130d88 g     F .text	00000178 OSQPostFront
811149fc g     F .text	000000d0 putc
81126b08 g     F .text	00000084 .hidden __divsi3
811447b1 g     O .bss	00000006 OSRdyTbl
811445f0 g     O .rwdata	00000002 OSDebugEn
81143334 g     O .rwdata	0000002a alt_log_msg_cache
8111d74c g     F .text	0000012c _malloc_trim_r
8113e304 g       *ABS*	00000000 __CTOR_END__
81144710 g     O .bss	00000008 xSdHandle
81112380 g     F .text	00000404 .hidden __mulsf3
81144608 g     O .rwdata	00000002 OSFlagNodeSize
81144670 g     O .bss	00000004 pnt_memory
81111858 g     F .text	00000048 vSyncReset
81107af8 g     F .text	00000040 bSyncSetPer
81100308 g     F .text	00000514 bDdr2EepromTest
811447e8 g     O .bss	00000004 status_register
81144650 g     O .rwdata	00000002 OSTmrCfgMax
8110848c g     F .text	00000074 bSyncIrqFlagClrError
8110ffc0 g     F .text	00000068 vFailSetPreAckSenderBuffer
8111ffc4 g     F .text	000000dc strcmp
811447f0 g     O .bss	00000004 command_register
81130314 g     F .text	000001b4 OSQCreate
81132b04 g     F .text	000001a0 OSTaskNameGet
8114f278 g     O .bss	00000800 vFeeTask4_stk
8114fa78 g     O .bss	00000018 xReceivedACK
81130f00 g     F .text	00000214 OSQPostOpt
8112bb24 g     F .text	00000228 OSTimeTick
81144638 g     O .rwdata	00000002 OSTaskMax
8113e304 g       *ABS*	00000000 __DTOR_LIST__
811313e0 g     F .text	000000e0 OSSemCreate
8114465c g     O .rwdata	00000002 OSTmrWheelSize
81110758 g     F .text	00000068 vFailCreateScheduleQueue
81111b34 g     F .text	00000058 _reg_read
8112fec0 g     F .text	00000174 OSMutexQuery
8112805c g     F .text	00000088 .hidden __nedf2
81144632 g     O .rwdata	00000002 OSTaskDelEn
811115c8 g     F .text	00000038 vLoadDefaultEPValue
8114fa90 g     O .bss	00000800 vFeeTask1_stk
811082bc g     F .text	00000074 bSyncCtrCh7OutEnable
81131ba8 g     F .text	00000118 OSSemQuery
811304c8 g     F .text	00000288 OSQDel
81130aa4 g     F .text	00000174 OSQPendAbort
811446ec g     O .bss	00000004 xMutexPreParsed
81134c30 g     F .text	00000040 alt_irq_init
8112a564 g     F .text	0000006c alt_release_fd
81134f50 g     F .text	000000bc get_cluster_flag
81108500 g     F .text	00000074 bSyncIrqFlagClrBlank
8113cc94 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
81143300 g     O .rwdata	00000031 alt_log_msg_stackpointer
81114ef8 g     F .text	00000074 sprintf
81141a6c g     O .rodata	00000100 .hidden __clz_tab
81135524 g     F .text	00000294 Write_File_Record_At_Offset
81101590 g     F .text	00000580 bDdr2MemoryWriteTest
8110f8fc g     F .text	00000068 vFailGetMutexTxUARTSenderTask
81144728 g     O .bss	00000004 _PathLocale
811085cc g     F .text	00000058 bSyncIrqFlagBlank
81106bf0 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
811342dc g     F .text	000001e8 OSTmrStop
8110e148 g     F .text	00000050 usiGetIdCMD
81121724 g     F .text	00000108 strtof
8113dde4 g     F .text	00000014 atexit
81104584 g     F .text	00000040 vFeebCh3HandleIrq
81126d34 g     F .text	000000bc .hidden __gesf2
811150c0 g     F .text	0000004c strcspn
8111b308 g     F .text	00000068 _write_r
8110728c g     F .text	00000074 vRstcReleaseDeviceReset
81110144 g     F .text	0000004c vFailInAckHandlerTaskCreate
8112b87c g     F .text	00000094 OSSchedLock
81110968 g     F .text	00000068 vCoudlNotCreateNFee3Task
8111e338 g     F .text	00000018 setlocale
8113bfe8 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81154a58 g     O .bss	00000400 OSTmrTaskStk
81114e1c g     F .text	00000044 scanf
8112d484 g     F .text	00000110 OSFlagCreate
811357b8 g     F .text	00000688 Check_for_DOS_FAT
81137664 g     F .text	000002d0 create_file
8111ffbc g     F .text	00000008 nanf
811445a4 g     O .rwdata	00000004 _impure_ptr
811447ec g     O .bss	00000004 CSD_register_w0
8114474c g     O .bss	00000004 alt_argc
8110fc18 g     F .text	00000068 vFailGetCountSemaphorexBuffer128
8111cdc0 g     F .text	00000224 __sflush_r
8111e3c4 g     F .text	000000b4 _mbrtowc_r
8113cfa8 g     F .text	00000068 _do_dtors
8111e324 g     F .text	00000008 __locale_cjk_lang
811033b0 g     F .text	0000078c sense_log
8114467c g     O .bss	00000004 ESdmaBufferSide
81144602 g     O .rwdata	00000002 OSEventMultiEn
81113624 g     F .text	00000004 _fseek_r
81150290 g     O .bss	00001000 vParserCommTask_stk
8110f4a8 g     F .text	00000070 printErrorTask
8111163c g     F .text	00000030 vChangeDefaultEPValue
8110c774 g     F .text	000002c8 vCheckRetransmission32
81133aac g     F .text	000001c4 OSTmrCreate
8110bd20 g     F .text	00000354 vStackMonitor
81114be4 g     F .text	000001dc __srefill_r
81105814 g     F .text	0000003c bEnableLvdsBoard
811446f0 g     O .bss	00000004 xMutexBuffer32
8112d594 g     F .text	00000250 OSFlagDel
811447b8 g     O .bss	00000004 OSEventFreeList
8110588c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111e558 g     F .text	0000004c __ascii_mbtowc
81107dc8 g     F .text	00000078 bSyncCtrExtnIrq
8111f3ac g     F .text	00000064 __ulp
81111220 g     F .text	000000b8 vNFeeControlInit
8112da68 g     F .text	000005c0 OSFlagPend
8114464e g     O .rwdata	00000002 OSTmrEn
8111d418 g     F .text	00000018 __fp_unlock_all
811135c0 g     F .text	00000064 fputc
8110d9a8 g     F .text	000002f8 bSendUART32v2
8110b644 g     F .text	0000019c setPreAckReceiverFreePos
81107d88 g     F .text	00000040 bSyncErrInj
811445bc g     O .rwdata	00000008 alt_fs_list
81151290 g     O .bss	00000800 vSimMebTask_stk
81110b70 g     F .text	00000068 vCoudlNotCreateMebTask
81136000 g     F .text	00000274 check_file_name_for_FAT16_compliance
81151a90 g     O .bss	00000800 vFeeTask3_stk
81133db0 g     F .text	00000140 OSTmrNameGet
811449d8 g     O .bss	00000400 xSZData
8112c9ac g     F .text	0000007c OS_StrCopy
811447f8 g     O .bss	00000004 buffer_memory
8110fe20 g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8111148c g     F .text	00000098 vLogWriteNUC
81144618 g     O .rwdata	00000002 OSMemNameSize
81103b3c g     F .text	000000b0 bSdmaInitM1Dma
81108418 g     F .text	00000074 bSyncIrqEnableBlank
8113dcc4 g     F .text	00000028 OSInitHookEnd
81110d00 g     F .text	00000340 vUpdateMemMapFEE
81110090 g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b8c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
81144644 g     O .rwdata	00000002 OSTCBPrioTblMax
8111e350 g     F .text	0000000c localeconv
81110b08 g     F .text	00000068 vCoudlNotCreateDataControllerTask
811446f4 g     O .bss	00000004 xTimerRetransmission
8110b13c g     F .text	00000250 vReceiverUartTask
81144748 g     O .bss	00000004 alt_log_sys_clk_count
81144640 g     O .rwdata	00000002 OSTaskStatStkChkEn
81129d40 g     F .text	00000140 alt_log_write
81152290 g     O .bss	00000800 vFeeTask2_stk
811446f8 g     O .bss	00000004 xMutexBuffer128
81104504 g     F .text	00000040 vFeebCh1HandleIrq
81104684 g     F .text	00000040 vFeebCh7HandleIrq
8113d29c g     F .text	00000058 alt_ic_isr_register
81144614 g     O .rwdata	00000002 OSMemEn
81144590 g     O .rwdata	00000004 alt_stack_limit_value
81113be4 g     F .text	0000003c fwrite
811447fc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8114461e g     O .rwdata	00000002 OSMutexEn
8114466c g       *ABS*	00000000 _edata
8113a04c g     F .text	00000068 altera_avalon_uart_read_fd
8111134c g     F .text	00000034 vLoadDefaultIdNFEEMaster
811578bc g       *ABS*	00000000 _end
811572bc g     O .bss	00000500 active_files
811447bc g     O .bss	00000001 OSIntNesting
8110f9b0 g     F .text	0000004c vFailInitialization
811014d0 g     F .text	000000c0 bDdr2SwitchMemory
8111111c g     F .text	0000002c cFeeRMAPDump
811446fc g     O .bss	00000004 xSemCountBuffer32
81124f48 g     F .text	0000016c __fputwc
8111106c g     F .text	0000002c vFeeSpwRMAPChangeConfig
8111b0c8 g     F .text	00000070 vfscanf
81137934 g     F .text	00000150 copy_file_record_name_to_string
811398bc g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81133804 g     F .text	000001dc OSTimeDlyResume
81135e40 g     F .text	000000f4 Look_for_FAT16
8112d914 g     F .text	00000154 OSFlagNameSet
81144700 g     O .bss	00000004 xMutexBuffer64
8113303c g     F .text	000001c8 OSTaskStkChk
8113d384 g     F .text	00000094 alt_ic_irq_disable
81103c9c g     F .text	00000430 bSdmaDmaM1Transfer
8114461a g     O .rwdata	00000002 OSMemSize
8110fae0 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81114fd0 g     F .text	00000084 __swrite
811445ac g     O .rwdata	00000004 __malloc_trim_threshold
8111e318 g     F .text	0000000c __locale_msgcharset
81152a90 g     O .bss	00000010 xFeeQueueTBL1
811447c0 g     O .bss	00000004 OSTCBCur
81110460 g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106cf4 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113ddf8 g     F .text	00000040 exit
8112fca0 g     F .text	00000220 OSMutexPost
81108574 g     F .text	00000058 bSyncIrqFlagError
81137d60 g     F .text	000003c0 alt_up_sd_card_find_next
8114461c g     O .rwdata	00000002 OSMemTblSize
8111e120 g     F .text	000000cc _fwalk_reent
8113c3e0 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
811128b0 g     F .text	000000f8 .hidden __floatunsisf
8111f1a8 g     F .text	00000204 __mdiff
81110830 g     F .text	00000068 vCoudlNotCreateNFee0Task
81104be4 g     F .text	00000180 vFeebInitIrq
8110fa48 g     F .text	0000004c vFailSenderCreate
81126b8c g     F .text	00000074 .hidden __modsi3
81110a38 g     F .text	00000068 vCoudlNotCreateNFee5Task
81107cd4 g     F .text	0000003c uliSyncGetPer
81144704 g     O .bss	00000004 xMutexSenderACK
811102c0 g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8114459c g     O .rwdata	00000004 __ctype_ptr__
81110028 g     F .text	00000068 vFailSetPreParsedBuffer
81134e70 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111d3f4 g     F .text	00000004 __sfp_lock_release
81104e38 g     F .text	000000ac bFeebGetIrqControl
81110598 g     F .text	00000068 vCouldNotSendTurnOff
8112b6c4 g     F .text	00000064 OSInit
811061c4 g     F .text	00000078 bSetPainelLeds
8113bb28 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
811447c4 g     O .bss	00000004 OSTmrTime
81101b10 g     F .text	00000510 bDdr2MemoryReadTest
811333f0 g     F .text	0000012c OSTaskQuery
811083a4 g     F .text	00000074 bSyncIrqEnableError
81131278 g     F .text	000000b0 OS_QInit
8111feec g     F .text	000000d0 __sccl
811133ec g     F .text	0000000c atoi
811087b0 g     F .text	00000070 vFeeTask
8112ca28 g     F .text	0000005c OS_StrLen
8110497c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8110f3cc g     F .text	000000dc vDataControllerInit
8112ecbc g     F .text	0000011c OSMemNameSet
81141b6c g     O .rodata	00000101 _ctype_
81107c98 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110fbb0 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81144636 g     O .rwdata	00000002 OSTaskProfileEn
8113b9f8 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
81144708 g     O .bss	00000004 xTxUARTMutex
811447c8 g     O .bss	00000004 OSTime
811445b4 g     O .rwdata	00000004 __mbtowc
8113a66c g     F .text	0000005c altera_avalon_uart_close
811447cc g     O .bss	00000004 OSTmrSem
81154e58 g     O .bss	00000800 OSTaskIdleStk
81113404 g     F .text	000000fc _fopen_r
811446bc g     O .bss	00000004 pdata
8113e248 g     F .text	000000bc _exit
8113cd1c g     F .text	00000134 alt_alarm_start
8112d7e4 g     F .text	00000130 OSFlagNameGet
811339e0 g     F .text	00000064 OSTimeGet
81144680 g     O .bss	00000004 ESdmaChBufferId
811385c4 g     F .text	00000380 alt_up_sd_card_read
81113c20 g     F .text	000001c4 __smakebuf_r
8114470c g     O .bss	00000001 SemCount64
8110d6b0 g     F .text	000002f8 bSendUART64v2
81104a2c g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81144664 g     O .rwdata	00000008 alt_msgdma_list
8111510c g     F .text	00000098 strlen
81107530 g     F .text	000000b4 uc_spi_get_byte
8113dbf4 g     F .text	00000028 OSTaskSwHook
8112a2c0 g     F .text	0000015c open
81155658 g     O .bss	00000d00 OSEventTbl
81111098 g     F .text	0000002c vFeeSpwRMAPChangeDefault
811280e4 g     F .text	000000dc .hidden __gedf2
81152aa0 g     O .bss	00000020 xSenderACK
8113d8e8 g     F .text	00000044 alt_putchar
81156358 g     O .bss	00000e58 OSTCBTbl
81125260 g     F .text	00000838 __gethex
81131cc0 g     F .text	00000108 OSSemSet
8110c074 g     F .text	0000006c vTimeoutCheckerTaskv2
81111148 g     F .text	00000038 cFeeRMAPEchoingEnable
811445b8 g     O .rwdata	00000004 __wctomb
8110ceb8 g     F .text	00000294 vVariablesInitialization
81123814 g     F .text	00000018 __sprint_r
81104ee4 g     F .text	00000088 bFeebGetIrqFlags
81144678 g     O .bss	00000004 pxDmaM2Dev
8110f578 g     F .text	0000004c vFailCreateSemaphoreResources
811445d4 g     O .rwdata	00000004 alt_priority_mask
81105850 g     F .text	0000003c bDisableLvdsBoard
811314c0 g     F .text	00000248 OSSemDel
811447d0 g     O .bss	00000004 OSFlagFreeList
8110746c g     F .text	000000c4 v_spi_send_byte
811077a0 g     F .text	000000d0 bSSDisplayConfig
8113d2f4 g     F .text	00000090 alt_ic_irq_enable
811445fc g     O .rwdata	00000002 OSEventNameSize
81119824 g     F .text	0000001c __vfprintf_internal
811447d4 g     O .bss	00000001 OSStatRdy
81108078 g     F .text	00000074 bSyncCtrCh2OutEnable
811571b0 g     O .bss	000000a4 OSTCBPrioTbl
8113a70c g     F .text	00000270 altera_avalon_uart_read
81125f68 g     F .text	00000064 _wctomb_r
8112ab0c g     F .text	000000cc __env_lock
81144642 g     O .rwdata	00000002 OSTaskSwHookEn
8110478c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
811282b4 g     F .text	00000904 .hidden __subdf3
81152ac0 g     O .bss	00000260 xPreParsed
81107d10 g     F .text	0000003c uliSyncGetOst
8114470d g     O .bss	00000001 SemCount128
81104858 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110dca0 g     F .text	00000290 vSendEthConf
8111ebbc g     F .text	000000b0 __lo0bits
81119904 g     F .text	000017c4 __svfscanf_r
81109188 g     F .text	00000694 vPrintUARTNFee
811445e0 g     O .rwdata	00000008 alt_alarm_list
8112355c g     F .text	0000019c _ungetc_r
8114460a g     O .rwdata	00000002 OSFlagWidth
8113cf40 g     F .text	00000068 _do_ctors
81102a5c g     F .text	0000004c DMA_BUSY
81125e70 g     F .text	000000c8 wcrtomb
8110d2c8 g     F .text	00000068 vCCDLoadDefaultValues
81128f40 g     F .text	000000d8 close
81107d4c g     F .text	0000003c uliSyncGetGeneral
81144764 g     O .bss	00000004 alt_envsem
81129470 g     F .text	00000068 alt_log_repchar
811447d8 g     O .bss	00000004 OSIdleCtrRun
8112bd4c g     F .text	00000028 OSVersion
81144654 g     O .rwdata	00000002 OSTmrCfgWheelSize
8113351c g     F .text	00000078 OS_TaskStkClr
811119f8 g     F .text	0000003c siOpenFile
81108750 g     F .text	00000060 vDataControlTask
8114462e g     O .rwdata	00000002 OSTaskCreateEn
8110df30 g     F .text	00000118 vSendTurnOff
8110f678 g     F .text	0000004c vFailSendPreParsedSemaphore
81136334 g     F .text	000002a4 match_file_record_to_name_ext
8112c374 g     F .text	00000070 OS_EventWaitListInit
811250d8 g     F .text	00000088 fputwc
81152d20 g     O .bss	00000010 xFeeQueueTBL0
8110f610 g     F .text	00000068 vFailSendxSemCommInit
8113dcec g     F .text	00000028 OSTaskIdleHook
8111d3f8 g     F .text	00000004 __sinit_lock_acquire
8111e920 g     F .text	00000128 __multadd
8110489c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110799c g     F .text	0000004c ucSyncStatusState
81133204 g     F .text	000001ec OSTaskSuspend
8111e8f8 g     F .text	00000028 _Bfree
81107c5c g     F .text	0000003c uliSyncGetMbt
8112ca84 g     F .text	00000064 OS_TaskIdle
8114465a g     O .rwdata	00000002 OSTmrTblSize
81131114 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	112b7280 	call	8112b728 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	109def04 	addi	r2,r2,30652
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	109def04 	addi	r2,r2,30652
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	112b77c0 	call	8112b77c <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a117 	ldw	r2,-32124(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a117 	ldw	r2,-32124(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
8110025c:	01204534 	movhi	r4,33044
81100260:	21117604 	addi	r4,r4,17880
81100264:	21400037 	ldwio	r5,0(r4)
81100268:	01400326 	beq	zero,r5,81100278 <_start+0x1c>
8110026c:	01204534 	movhi	r4,33044
81100270:	210ccd04 	addi	r4,r4,13108
81100274:	11293e80 	call	811293e8 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
81100278:	01204534 	movhi	r4,33044
8110027c:	21117604 	addi	r4,r4,17880
81100280:	21400037 	ldwio	r5,0(r4)
81100284:	01400326 	beq	zero,r5,81100294 <_start+0x38>
81100288:	01204534 	movhi	r4,33044
8110028c:	210cc004 	addi	r4,r4,13056
81100290:	11293e80 	call	811293e8 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100294:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100298:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110029c:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
811002a0:	d6b16414 	ori	gp,gp,50576
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
811002a4:	01204534 	movhi	r4,33044
811002a8:	21117604 	addi	r4,r4,17880
811002ac:	21400037 	ldwio	r5,0(r4)
811002b0:	01400326 	beq	zero,r5,811002c0 <_start+0x64>
811002b4:	01204534 	movhi	r4,33044
811002b8:	210cb104 	addi	r4,r4,12996
811002bc:	11293e80 	call	811293e8 <tx_log_str>

    movhi r2, %hi(__bss_start)
811002c0:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
811002c4:	10919b14 	ori	r2,r2,18028

    movhi r3, %hi(__bss_end)
811002c8:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
811002cc:	18de2f14 	ori	r3,r3,30908

    beq r2, r3, 1f
811002d0:	10c00326 	beq	r2,r3,811002e0 <_start+0x84>

0:
    stw zero, (r2)
811002d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
811002d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
811002dc:	10fffd36 	bltu	r2,r3,811002d4 <__reset+0xfb0e02d4>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
811002e0:	d6200017 	ldw	et,-32768(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
811002e4:	01204534 	movhi	r4,33044
811002e8:	21117604 	addi	r4,r4,17880
811002ec:	21400037 	ldwio	r5,0(r4)
811002f0:	01400326 	beq	zero,r5,81100300 <_start+0xa4>
811002f4:	01204534 	movhi	r4,33044
811002f8:	210cb804 	addi	r4,r4,13024
811002fc:	11293e80 	call	811293e8 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
81100300:	112a0140 	call	8112a014 <alt_main>

81100304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100304:	003fff06 	br	81100304 <__reset+0xfb0e0304>

81100308 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100308:	defff604 	addi	sp,sp,-40
8110030c:	de00012e 	bgeu	sp,et,81100314 <bDdr2EepromTest+0xc>
81100310:	003b68fa 	trap	3
81100314:	dfc00915 	stw	ra,36(sp)
81100318:	df000815 	stw	fp,32(sp)
8110031c:	df000804 	addi	fp,sp,32
81100320:	2005883a 	mov	r2,r4
81100324:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100328:	00e04534 	movhi	r3,33044
8110032c:	18d23604 	addi	r3,r3,18648
81100330:	00a04534 	movhi	r2,33044
81100334:	10b8c104 	addi	r2,r2,-7420
81100338:	1009883a 	mov	r4,r2
8110033c:	00800884 	movi	r2,34
81100340:	100d883a 	mov	r6,r2
81100344:	200b883a 	mov	r5,r4
81100348:	1809883a 	mov	r4,r3
8110034c:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81100350:	d0a05017 	ldw	r2,-32448(gp)
81100354:	01604534 	movhi	r5,33044
81100358:	29523604 	addi	r5,r5,18648
8110035c:	1009883a 	mov	r4,r2
81100360:	11135480 	call	81113548 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100364:	00bfe804 	movi	r2,-96
81100368:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
8110036c:	00800044 	movi	r2,1
81100370:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100374:	e0bfff03 	ldbu	r2,-4(fp)
81100378:	10c00060 	cmpeqi	r3,r2,1
8110037c:	1800031e 	bne	r3,zero,8110038c <bDdr2EepromTest+0x84>
81100380:	108000a0 	cmpeqi	r2,r2,2
81100384:	1000081e 	bne	r2,zero,811003a8 <bDdr2EepromTest+0xa0>
81100388:	00000e06 	br	811003c4 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110038c:	00a00034 	movhi	r2,32768
81100390:	10827c04 	addi	r2,r2,2544
81100394:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100398:	00a00034 	movhi	r2,32768
8110039c:	10828004 	addi	r2,r2,2560
811003a0:	e0bffb15 	stw	r2,-20(fp)
		break;
811003a4:	00001906 	br	8110040c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811003a8:	00a00034 	movhi	r2,32768
811003ac:	10825804 	addi	r2,r2,2400
811003b0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811003b4:	00a00034 	movhi	r2,32768
811003b8:	10825c04 	addi	r2,r2,2416
811003bc:	e0bffb15 	stw	r2,-20(fp)
		break;
811003c0:	00001206 	br	8110040c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
811003c4:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811003c8:	00e04534 	movhi	r3,33044
811003cc:	18d23604 	addi	r3,r3,18648
811003d0:	00a04534 	movhi	r2,33044
811003d4:	10b8ca04 	addi	r2,r2,-7384
811003d8:	1009883a 	mov	r4,r2
811003dc:	00800bc4 	movi	r2,47
811003e0:	100d883a 	mov	r6,r2
811003e4:	200b883a 	mov	r5,r4
811003e8:	1809883a 	mov	r4,r3
811003ec:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811003f0:	d0a05017 	ldw	r2,-32448(gp)
811003f4:	01604534 	movhi	r5,33044
811003f8:	29523604 	addi	r5,r5,18648
811003fc:	1009883a 	mov	r4,r2
81100400:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
81100404:	e0bff917 	ldw	r2,-28(fp)
81100408:	0000ff06 	br	81100808 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110040c:	00e04534 	movhi	r3,33044
81100410:	18d23604 	addi	r3,r3,18648
81100414:	00a04534 	movhi	r2,33044
81100418:	10b8d604 	addi	r2,r2,-7336
8110041c:	1009883a 	mov	r4,r2
81100420:	008005c4 	movi	r2,23
81100424:	100d883a 	mov	r6,r2
81100428:	200b883a 	mov	r5,r4
8110042c:	1809883a 	mov	r4,r3
81100430:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81100434:	d0a05017 	ldw	r2,-32448(gp)
81100438:	01604534 	movhi	r5,33044
8110043c:	29523604 	addi	r5,r5,18648
81100440:	1009883a 	mov	r4,r2
81100444:	11135480 	call	81113548 <fprintf>
#endif
	usleep(20 * 1000);
81100448:	01138804 	movi	r4,20000
8110044c:	112a8800 	call	8112a880 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100450:	e03ffc15 	stw	zero,-16(fp)
81100454:	00003306 	br	81100524 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
81100458:	e0bffc17 	ldw	r2,-16(fp)
8110045c:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100460:	e0bffd03 	ldbu	r2,-12(fp)
81100464:	10c03fcc 	andi	r3,r2,255
81100468:	18c0201c 	xori	r3,r3,128
8110046c:	18ffe004 	addi	r3,r3,-128
81100470:	e13ffd43 	ldbu	r4,-11(fp)
81100474:	e0bffe04 	addi	r2,fp,-8
81100478:	d8800015 	stw	r2,0(sp)
8110047c:	200f883a 	mov	r7,r4
81100480:	180d883a 	mov	r6,r3
81100484:	e17ffb17 	ldw	r5,-20(fp)
81100488:	e13ffa17 	ldw	r4,-24(fp)
8110048c:	1105b300 	call	81105b30 <I2C_Read>
81100490:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100494:	e0bff917 	ldw	r2,-28(fp)
81100498:	10001026 	beq	r2,zero,811004dc <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110049c:	e0bffd43 	ldbu	r2,-11(fp)
811004a0:	e0fffe03 	ldbu	r3,-8(fp)
811004a4:	18c03fcc 	andi	r3,r3,255
811004a8:	180f883a 	mov	r7,r3
811004ac:	100d883a 	mov	r6,r2
811004b0:	01604534 	movhi	r5,33044
811004b4:	2978dc04 	addi	r5,r5,-7312
811004b8:	01204534 	movhi	r4,33044
811004bc:	21123604 	addi	r4,r4,18648
811004c0:	1114ef80 	call	81114ef8 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
811004c4:	d0a05017 	ldw	r2,-32448(gp)
811004c8:	01604534 	movhi	r5,33044
811004cc:	29523604 	addi	r5,r5,18648
811004d0:	1009883a 	mov	r4,r2
811004d4:	11135480 	call	81113548 <fprintf>
811004d8:	00000f06 	br	81100518 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
811004dc:	00e04534 	movhi	r3,33044
811004e0:	18d23604 	addi	r3,r3,18648
811004e4:	00a04534 	movhi	r2,33044
811004e8:	10b8e104 	addi	r2,r2,-7292
811004ec:	1009883a 	mov	r4,r2
811004f0:	008005c4 	movi	r2,23
811004f4:	100d883a 	mov	r6,r2
811004f8:	200b883a 	mov	r5,r4
811004fc:	1809883a 	mov	r4,r3
81100500:	11145f80 	call	811145f8 <memcpy>
			debug(fp, cDebugBuffer);
81100504:	d0a05017 	ldw	r2,-32448(gp)
81100508:	01604534 	movhi	r5,33044
8110050c:	29523604 	addi	r5,r5,18648
81100510:	1009883a 	mov	r4,r2
81100514:	11135480 	call	81113548 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100518:	e0bffc17 	ldw	r2,-16(fp)
8110051c:	10800044 	addi	r2,r2,1
81100520:	e0bffc15 	stw	r2,-16(fp)
81100524:	e0bffc17 	ldw	r2,-16(fp)
81100528:	10804008 	cmpgei	r2,r2,256
8110052c:	1000021e 	bne	r2,zero,81100538 <bDdr2EepromTest+0x230>
81100530:	e0bff917 	ldw	r2,-28(fp)
81100534:	103fc81e 	bne	r2,zero,81100458 <__reset+0xfb0e0458>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
81100538:	e0bff917 	ldw	r2,-28(fp)
8110053c:	10001026 	beq	r2,zero,81100580 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
81100540:	00e04534 	movhi	r3,33044
81100544:	18d23604 	addi	r3,r3,18648
81100548:	00a04534 	movhi	r2,33044
8110054c:	10b8e704 	addi	r2,r2,-7268
81100550:	1009883a 	mov	r4,r2
81100554:	00800884 	movi	r2,34
81100558:	100d883a 	mov	r6,r2
8110055c:	200b883a 	mov	r5,r4
81100560:	1809883a 	mov	r4,r3
81100564:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
81100568:	d0a05017 	ldw	r2,-32448(gp)
8110056c:	01604534 	movhi	r5,33044
81100570:	29523604 	addi	r5,r5,18648
81100574:	1009883a 	mov	r4,r2
81100578:	11135480 	call	81113548 <fprintf>
8110057c:	00000f06 	br	811005bc <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100580:	00e04534 	movhi	r3,33044
81100584:	18d23604 	addi	r3,r3,18648
81100588:	00a04534 	movhi	r2,33044
8110058c:	10b8f004 	addi	r2,r2,-7232
81100590:	1009883a 	mov	r4,r2
81100594:	008007c4 	movi	r2,31
81100598:	100d883a 	mov	r6,r2
8110059c:	200b883a 	mov	r5,r4
811005a0:	1809883a 	mov	r4,r3
811005a4:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
811005a8:	d0a05017 	ldw	r2,-32448(gp)
811005ac:	01604534 	movhi	r5,33044
811005b0:	29523604 	addi	r5,r5,18648
811005b4:	1009883a 	mov	r4,r2
811005b8:	11135480 	call	81113548 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
811005bc:	00e04534 	movhi	r3,33044
811005c0:	18d23604 	addi	r3,r3,18648
811005c4:	00a04534 	movhi	r2,33044
811005c8:	10b8f804 	addi	r2,r2,-7200
811005cc:	1009883a 	mov	r4,r2
811005d0:	00800604 	movi	r2,24
811005d4:	100d883a 	mov	r6,r2
811005d8:	200b883a 	mov	r5,r4
811005dc:	1809883a 	mov	r4,r3
811005e0:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
811005e4:	d0a05017 	ldw	r2,-32448(gp)
811005e8:	01604534 	movhi	r5,33044
811005ec:	29523604 	addi	r5,r5,18648
811005f0:	1009883a 	mov	r4,r2
811005f4:	11135480 	call	81113548 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
811005f8:	00800484 	movi	r2,18
811005fc:	e0bffd85 	stb	r2,-10(fp)
81100600:	00bfe004 	movi	r2,-128
81100604:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100608:	01138804 	movi	r4,20000
8110060c:	112a8800 	call	8112a880 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100610:	e0bffd03 	ldbu	r2,-12(fp)
81100614:	10c03fcc 	andi	r3,r2,255
81100618:	18c0201c 	xori	r3,r3,128
8110061c:	18ffe004 	addi	r3,r3,-128
81100620:	e13ffdc3 	ldbu	r4,-9(fp)
81100624:	e0bffd83 	ldbu	r2,-10(fp)
81100628:	d8800015 	stw	r2,0(sp)
8110062c:	200f883a 	mov	r7,r4
81100630:	180d883a 	mov	r6,r3
81100634:	e17ffb17 	ldw	r5,-20(fp)
81100638:	e13ffa17 	ldw	r4,-24(fp)
8110063c:	1105a500 	call	81105a50 <I2C_Write>
81100640:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
81100644:	e0bff917 	ldw	r2,-28(fp)
81100648:	1000101e 	bne	r2,zero,8110068c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
8110064c:	00e04534 	movhi	r3,33044
81100650:	18d23604 	addi	r3,r3,18648
81100654:	00a04534 	movhi	r2,33044
81100658:	10b8fe04 	addi	r2,r2,-7176
8110065c:	1009883a 	mov	r4,r2
81100660:	00800604 	movi	r2,24
81100664:	100d883a 	mov	r6,r2
81100668:	200b883a 	mov	r5,r4
8110066c:	1809883a 	mov	r4,r3
81100670:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
81100674:	d0a05017 	ldw	r2,-32448(gp)
81100678:	01604534 	movhi	r5,33044
8110067c:	29523604 	addi	r5,r5,18648
81100680:	1009883a 	mov	r4,r2
81100684:	11135480 	call	81113548 <fprintf>
81100688:	00003306 	br	81100758 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110068c:	e0bffd03 	ldbu	r2,-12(fp)
81100690:	10c03fcc 	andi	r3,r2,255
81100694:	18c0201c 	xori	r3,r3,128
81100698:	18ffe004 	addi	r3,r3,-128
8110069c:	e13ffdc3 	ldbu	r4,-9(fp)
811006a0:	e0bffe44 	addi	r2,fp,-7
811006a4:	d8800015 	stw	r2,0(sp)
811006a8:	200f883a 	mov	r7,r4
811006ac:	180d883a 	mov	r6,r3
811006b0:	e17ffb17 	ldw	r5,-20(fp)
811006b4:	e13ffa17 	ldw	r4,-24(fp)
811006b8:	1105b300 	call	81105b30 <I2C_Read>
811006bc:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
811006c0:	e0bff917 	ldw	r2,-28(fp)
811006c4:	1000101e 	bne	r2,zero,81100708 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
811006c8:	00e04534 	movhi	r3,33044
811006cc:	18d23604 	addi	r3,r3,18648
811006d0:	00a04534 	movhi	r2,33044
811006d4:	10b90404 	addi	r2,r2,-7152
811006d8:	1009883a 	mov	r4,r2
811006dc:	00800884 	movi	r2,34
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	11145f80 	call	811145f8 <memcpy>
			debug(fp, cDebugBuffer);
811006f0:	d0a05017 	ldw	r2,-32448(gp)
811006f4:	01604534 	movhi	r5,33044
811006f8:	29523604 	addi	r5,r5,18648
811006fc:	1009883a 	mov	r4,r2
81100700:	11135480 	call	81113548 <fprintf>
81100704:	00001406 	br	81100758 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100708:	e0bffe43 	ldbu	r2,-7(fp)
8110070c:	10c03fcc 	andi	r3,r2,255
81100710:	e0bffd83 	ldbu	r2,-10(fp)
81100714:	18801026 	beq	r3,r2,81100758 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
81100718:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110071c:	e0bffe43 	ldbu	r2,-7(fp)
81100720:	10803fcc 	andi	r2,r2,255
81100724:	e0fffd83 	ldbu	r3,-10(fp)
81100728:	180f883a 	mov	r7,r3
8110072c:	100d883a 	mov	r6,r2
81100730:	01604534 	movhi	r5,33044
81100734:	29790d04 	addi	r5,r5,-7116
81100738:	01204534 	movhi	r4,33044
8110073c:	21123604 	addi	r4,r4,18648
81100740:	1114ef80 	call	81114ef8 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
81100744:	d0a05017 	ldw	r2,-32448(gp)
81100748:	01604534 	movhi	r5,33044
8110074c:	29523604 	addi	r5,r5,18648
81100750:	1009883a 	mov	r4,r2
81100754:	11135480 	call	81113548 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
81100758:	e0bff917 	ldw	r2,-28(fp)
8110075c:	10001026 	beq	r2,zero,811007a0 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
81100760:	00e04534 	movhi	r3,33044
81100764:	18d23604 	addi	r3,r3,18648
81100768:	00a04534 	movhi	r2,33044
8110076c:	10b91c04 	addi	r2,r2,-7056
81100770:	1009883a 	mov	r4,r2
81100774:	008008c4 	movi	r2,35
81100778:	100d883a 	mov	r6,r2
8110077c:	200b883a 	mov	r5,r4
81100780:	1809883a 	mov	r4,r3
81100784:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
81100788:	d0a05017 	ldw	r2,-32448(gp)
8110078c:	01604534 	movhi	r5,33044
81100790:	29523604 	addi	r5,r5,18648
81100794:	1009883a 	mov	r4,r2
81100798:	11135480 	call	81113548 <fprintf>
8110079c:	00000f06 	br	811007dc <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
811007a0:	00e04534 	movhi	r3,33044
811007a4:	18d23604 	addi	r3,r3,18648
811007a8:	00a04534 	movhi	r2,33044
811007ac:	10b92504 	addi	r2,r2,-7020
811007b0:	1009883a 	mov	r4,r2
811007b4:	00800804 	movi	r2,32
811007b8:	100d883a 	mov	r6,r2
811007bc:	200b883a 	mov	r5,r4
811007c0:	1809883a 	mov	r4,r3
811007c4:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
811007c8:	d0a05017 	ldw	r2,-32448(gp)
811007cc:	01604534 	movhi	r5,33044
811007d0:	29523604 	addi	r5,r5,18648
811007d4:	1009883a 	mov	r4,r2
811007d8:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811007dc:	00a04534 	movhi	r2,33044
811007e0:	10923604 	addi	r2,r2,18648
811007e4:	00c00284 	movi	r3,10
811007e8:	10c00005 	stb	r3,0(r2)
811007ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811007f0:	d0a05017 	ldw	r2,-32448(gp)
811007f4:	01604534 	movhi	r5,33044
811007f8:	29523604 	addi	r5,r5,18648
811007fc:	1009883a 	mov	r4,r2
81100800:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
81100804:	e0bff917 	ldw	r2,-28(fp)
}
81100808:	e037883a 	mov	sp,fp
8110080c:	dfc00117 	ldw	ra,4(sp)
81100810:	df000017 	ldw	fp,0(sp)
81100814:	dec00204 	addi	sp,sp,8
81100818:	f800283a 	ret

8110081c <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
8110081c:	deffb704 	addi	sp,sp,-292
81100820:	de00012e 	bgeu	sp,et,81100828 <bDdr2EepromDump+0xc>
81100824:	003b68fa 	trap	3
81100828:	dfc04815 	stw	ra,288(sp)
8110082c:	df004715 	stw	fp,284(sp)
81100830:	df004704 	addi	fp,sp,284
81100834:	2005883a 	mov	r2,r4
81100838:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
8110083c:	00e04534 	movhi	r3,33044
81100840:	18d23604 	addi	r3,r3,18648
81100844:	00a04534 	movhi	r2,33044
81100848:	10b92d04 	addi	r2,r2,-6988
8110084c:	1009883a 	mov	r4,r2
81100850:	00800884 	movi	r2,34
81100854:	100d883a 	mov	r6,r2
81100858:	200b883a 	mov	r5,r4
8110085c:	1809883a 	mov	r4,r3
81100860:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81100864:	d0a05017 	ldw	r2,-32448(gp)
81100868:	01604534 	movhi	r5,33044
8110086c:	29523604 	addi	r5,r5,18648
81100870:	1009883a 	mov	r4,r2
81100874:	11135480 	call	81113548 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100878:	00bfe804 	movi	r2,-96
8110087c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100880:	00800044 	movi	r2,1
81100884:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100888:	e0bfff03 	ldbu	r2,-4(fp)
8110088c:	10c00060 	cmpeqi	r3,r2,1
81100890:	1800031e 	bne	r3,zero,811008a0 <bDdr2EepromDump+0x84>
81100894:	108000a0 	cmpeqi	r2,r2,2
81100898:	1000081e 	bne	r2,zero,811008bc <bDdr2EepromDump+0xa0>
8110089c:	00000e06 	br	811008d8 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811008a0:	00a00034 	movhi	r2,32768
811008a4:	10827c04 	addi	r2,r2,2544
811008a8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811008ac:	00a00034 	movhi	r2,32768
811008b0:	10828004 	addi	r2,r2,2560
811008b4:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008b8:	00001906 	br	81100920 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811008bc:	00a00034 	movhi	r2,32768
811008c0:	10825804 	addi	r2,r2,2400
811008c4:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811008c8:	00a00034 	movhi	r2,32768
811008cc:	10825c04 	addi	r2,r2,2416
811008d0:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008d4:	00001206 	br	81100920 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
811008d8:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811008dc:	00e04534 	movhi	r3,33044
811008e0:	18d23604 	addi	r3,r3,18648
811008e4:	00a04534 	movhi	r2,33044
811008e8:	10b93604 	addi	r2,r2,-6952
811008ec:	1009883a 	mov	r4,r2
811008f0:	00800bc4 	movi	r2,47
811008f4:	100d883a 	mov	r6,r2
811008f8:	200b883a 	mov	r5,r4
811008fc:	1809883a 	mov	r4,r3
81100900:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100904:	d0a05017 	ldw	r2,-32448(gp)
81100908:	01604534 	movhi	r5,33044
8110090c:	29523604 	addi	r5,r5,18648
81100910:	1009883a 	mov	r4,r2
81100914:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
81100918:	e0bfbe17 	ldw	r2,-264(fp)
8110091c:	0002e706 	br	811014bc <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100920:	e0bfbd03 	ldbu	r2,-268(fp)
81100924:	10c03fcc 	andi	r3,r2,255
81100928:	18c0201c 	xori	r3,r3,128
8110092c:	18ffe004 	addi	r3,r3,-128
81100930:	e13fbf04 	addi	r4,fp,-260
81100934:	00804004 	movi	r2,256
81100938:	d8800015 	stw	r2,0(sp)
8110093c:	200f883a 	mov	r7,r4
81100940:	180d883a 	mov	r6,r3
81100944:	e17fbb17 	ldw	r5,-276(fp)
81100948:	e13fba17 	ldw	r4,-280(fp)
8110094c:	1105c380 	call	81105c38 <I2C_MultipleRead>
81100950:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
81100954:	e0bfbe17 	ldw	r2,-264(fp)
81100958:	1002be26 	beq	r2,zero,81101454 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
8110095c:	e03fbc15 	stw	zero,-272(fp)
81100960:	0002b606 	br	8110143c <bDdr2EepromDump+0xc20>
			if (iI == 0) {
81100964:	e0bfbc17 	ldw	r2,-272(fp)
81100968:	1000121e 	bne	r2,zero,811009b4 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
8110096c:	e0ffbf04 	addi	r3,fp,-260
81100970:	e0bfbc17 	ldw	r2,-272(fp)
81100974:	1885883a 	add	r2,r3,r2
81100978:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110097c:	10803fcc 	andi	r2,r2,255
81100980:	100f883a 	mov	r7,r2
81100984:	e1bfbc17 	ldw	r6,-272(fp)
81100988:	01604534 	movhi	r5,33044
8110098c:	29794204 	addi	r5,r5,-6904
81100990:	01204534 	movhi	r4,33044
81100994:	21123604 	addi	r4,r4,18648
81100998:	1114ef80 	call	81114ef8 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110099c:	d0a05017 	ldw	r2,-32448(gp)
811009a0:	01604534 	movhi	r5,33044
811009a4:	29523604 	addi	r5,r5,18648
811009a8:	1009883a 	mov	r4,r2
811009ac:	11135480 	call	81113548 <fprintf>
811009b0:	00029f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10800058 	cmpnei	r2,r2,1
811009bc:	1000101e 	bne	r2,zero,81100a00 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009c0:	00e04534 	movhi	r3,33044
811009c4:	18d23604 	addi	r3,r3,18648
811009c8:	00a04534 	movhi	r2,33044
811009cc:	10b94e04 	addi	r2,r2,-6856
811009d0:	1009883a 	mov	r4,r2
811009d4:	00800c04 	movi	r2,48
811009d8:	100d883a 	mov	r6,r2
811009dc:	200b883a 	mov	r5,r4
811009e0:	1809883a 	mov	r4,r3
811009e4:	11145f80 	call	811145f8 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
811009e8:	d0a05017 	ldw	r2,-32448(gp)
811009ec:	01604534 	movhi	r5,33044
811009f0:	29523604 	addi	r5,r5,18648
811009f4:	1009883a 	mov	r4,r2
811009f8:	11135480 	call	81113548 <fprintf>
811009fc:	00028c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800098 	cmpnei	r2,r2,2
81100a08:	1000101e 	bne	r2,zero,81100a4c <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100a0c:	00e04534 	movhi	r3,33044
81100a10:	18d23604 	addi	r3,r3,18648
81100a14:	00a04534 	movhi	r2,33044
81100a18:	10b95a04 	addi	r2,r2,-6808
81100a1c:	1009883a 	mov	r4,r2
81100a20:	008007c4 	movi	r2,31
81100a24:	100d883a 	mov	r6,r2
81100a28:	200b883a 	mov	r5,r4
81100a2c:	1809883a 	mov	r4,r3
81100a30:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100a34:	d0a05017 	ldw	r2,-32448(gp)
81100a38:	01604534 	movhi	r5,33044
81100a3c:	29523604 	addi	r5,r5,18648
81100a40:	1009883a 	mov	r4,r2
81100a44:	11135480 	call	81113548 <fprintf>
81100a48:	00027906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
81100a4c:	e0bfbc17 	ldw	r2,-272(fp)
81100a50:	108000d8 	cmpnei	r2,r2,3
81100a54:	1000101e 	bne	r2,zero,81100a98 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a58:	00e04534 	movhi	r3,33044
81100a5c:	18d23604 	addi	r3,r3,18648
81100a60:	00a04534 	movhi	r2,33044
81100a64:	10b96204 	addi	r2,r2,-6776
81100a68:	1009883a 	mov	r4,r2
81100a6c:	008009c4 	movi	r2,39
81100a70:	100d883a 	mov	r6,r2
81100a74:	200b883a 	mov	r5,r4
81100a78:	1809883a 	mov	r4,r3
81100a7c:	11145f80 	call	811145f8 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a80:	d0a05017 	ldw	r2,-32448(gp)
81100a84:	01604534 	movhi	r5,33044
81100a88:	29523604 	addi	r5,r5,18648
81100a8c:	1009883a 	mov	r4,r2
81100a90:	11135480 	call	81113548 <fprintf>
81100a94:	00026606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a98:	e0bfbc17 	ldw	r2,-272(fp)
81100a9c:	10800118 	cmpnei	r2,r2,4
81100aa0:	1000101e 	bne	r2,zero,81100ae4 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100aa4:	00e04534 	movhi	r3,33044
81100aa8:	18d23604 	addi	r3,r3,18648
81100aac:	00a04534 	movhi	r2,33044
81100ab0:	10b96c04 	addi	r2,r2,-6736
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	00800a84 	movi	r2,42
81100abc:	100d883a 	mov	r6,r2
81100ac0:	200b883a 	mov	r5,r4
81100ac4:	1809883a 	mov	r4,r3
81100ac8:	11145f80 	call	811145f8 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100acc:	d0a05017 	ldw	r2,-32448(gp)
81100ad0:	01604534 	movhi	r5,33044
81100ad4:	29523604 	addi	r5,r5,18648
81100ad8:	1009883a 	mov	r4,r2
81100adc:	11135480 	call	81113548 <fprintf>
81100ae0:	00025306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100ae4:	e0bfbc17 	ldw	r2,-272(fp)
81100ae8:	10800158 	cmpnei	r2,r2,5
81100aec:	1000101e 	bne	r2,zero,81100b30 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100af0:	00e04534 	movhi	r3,33044
81100af4:	18d23604 	addi	r3,r3,18648
81100af8:	00a04534 	movhi	r2,33044
81100afc:	10b97704 	addi	r2,r2,-6692
81100b00:	1009883a 	mov	r4,r2
81100b04:	00800c04 	movi	r2,48
81100b08:	100d883a 	mov	r6,r2
81100b0c:	200b883a 	mov	r5,r4
81100b10:	1809883a 	mov	r4,r3
81100b14:	11145f80 	call	811145f8 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100b18:	d0a05017 	ldw	r2,-32448(gp)
81100b1c:	01604534 	movhi	r5,33044
81100b20:	29523604 	addi	r5,r5,18648
81100b24:	1009883a 	mov	r4,r2
81100b28:	11135480 	call	81113548 <fprintf>
81100b2c:	00024006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100b30:	e0bfbc17 	ldw	r2,-272(fp)
81100b34:	10800198 	cmpnei	r2,r2,6
81100b38:	1000101e 	bne	r2,zero,81100b7c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100b3c:	00e04534 	movhi	r3,33044
81100b40:	18d23604 	addi	r3,r3,18648
81100b44:	00a04534 	movhi	r2,33044
81100b48:	10b98304 	addi	r2,r2,-6644
81100b4c:	1009883a 	mov	r4,r2
81100b50:	00800544 	movi	r2,21
81100b54:	100d883a 	mov	r6,r2
81100b58:	200b883a 	mov	r5,r4
81100b5c:	1809883a 	mov	r4,r3
81100b60:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100b64:	d0a05017 	ldw	r2,-32448(gp)
81100b68:	01604534 	movhi	r5,33044
81100b6c:	29523604 	addi	r5,r5,18648
81100b70:	1009883a 	mov	r4,r2
81100b74:	11135480 	call	81113548 <fprintf>
81100b78:	00022d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b7c:	e0bfbc17 	ldw	r2,-272(fp)
81100b80:	108001d8 	cmpnei	r2,r2,7
81100b84:	1000101e 	bne	r2,zero,81100bc8 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b88:	00e04534 	movhi	r3,33044
81100b8c:	18d23604 	addi	r3,r3,18648
81100b90:	00a04534 	movhi	r2,33044
81100b94:	10b98904 	addi	r2,r2,-6620
81100b98:	1009883a 	mov	r4,r2
81100b9c:	00800804 	movi	r2,32
81100ba0:	100d883a 	mov	r6,r2
81100ba4:	200b883a 	mov	r5,r4
81100ba8:	1809883a 	mov	r4,r3
81100bac:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100bb0:	d0a05017 	ldw	r2,-32448(gp)
81100bb4:	01604534 	movhi	r5,33044
81100bb8:	29523604 	addi	r5,r5,18648
81100bbc:	1009883a 	mov	r4,r2
81100bc0:	11135480 	call	81113548 <fprintf>
81100bc4:	00021a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100bc8:	e0bfbc17 	ldw	r2,-272(fp)
81100bcc:	10800418 	cmpnei	r2,r2,16
81100bd0:	1000101e 	bne	r2,zero,81100c14 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100bd4:	00e04534 	movhi	r3,33044
81100bd8:	18d23604 	addi	r3,r3,18648
81100bdc:	00a04534 	movhi	r2,33044
81100be0:	10b99104 	addi	r2,r2,-6588
81100be4:	1009883a 	mov	r4,r2
81100be8:	00800d04 	movi	r2,52
81100bec:	100d883a 	mov	r6,r2
81100bf0:	200b883a 	mov	r5,r4
81100bf4:	1809883a 	mov	r4,r3
81100bf8:	11145f80 	call	811145f8 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100bfc:	d0a05017 	ldw	r2,-32448(gp)
81100c00:	01604534 	movhi	r5,33044
81100c04:	29523604 	addi	r5,r5,18648
81100c08:	1009883a 	mov	r4,r2
81100c0c:	11135480 	call	81113548 <fprintf>
81100c10:	00020706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100c14:	e0bfbc17 	ldw	r2,-272(fp)
81100c18:	10800358 	cmpnei	r2,r2,13
81100c1c:	1000101e 	bne	r2,zero,81100c60 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100c20:	00e04534 	movhi	r3,33044
81100c24:	18d23604 	addi	r3,r3,18648
81100c28:	00a04534 	movhi	r2,33044
81100c2c:	10b99e04 	addi	r2,r2,-6536
81100c30:	1009883a 	mov	r4,r2
81100c34:	008005c4 	movi	r2,23
81100c38:	100d883a 	mov	r6,r2
81100c3c:	200b883a 	mov	r5,r4
81100c40:	1809883a 	mov	r4,r3
81100c44:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100c48:	d0a05017 	ldw	r2,-32448(gp)
81100c4c:	01604534 	movhi	r5,33044
81100c50:	29523604 	addi	r5,r5,18648
81100c54:	1009883a 	mov	r4,r2
81100c58:	11135480 	call	81113548 <fprintf>
81100c5c:	0001f406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100c60:	e0bfbc17 	ldw	r2,-272(fp)
81100c64:	10800398 	cmpnei	r2,r2,14
81100c68:	1000101e 	bne	r2,zero,81100cac <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100c6c:	00e04534 	movhi	r3,33044
81100c70:	18d23604 	addi	r3,r3,18648
81100c74:	00a04534 	movhi	r2,33044
81100c78:	10b9a404 	addi	r2,r2,-6512
81100c7c:	1009883a 	mov	r4,r2
81100c80:	008004c4 	movi	r2,19
81100c84:	100d883a 	mov	r6,r2
81100c88:	200b883a 	mov	r5,r4
81100c8c:	1809883a 	mov	r4,r3
81100c90:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100c94:	d0a05017 	ldw	r2,-32448(gp)
81100c98:	01604534 	movhi	r5,33044
81100c9c:	29523604 	addi	r5,r5,18648
81100ca0:	1009883a 	mov	r4,r2
81100ca4:	11135480 	call	81113548 <fprintf>
81100ca8:	0001e106 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100cac:	e0bfbc17 	ldw	r2,-272(fp)
81100cb0:	10800458 	cmpnei	r2,r2,17
81100cb4:	1000101e 	bne	r2,zero,81100cf8 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100cb8:	00e04534 	movhi	r3,33044
81100cbc:	18d23604 	addi	r3,r3,18648
81100cc0:	00a04534 	movhi	r2,33044
81100cc4:	10b9a904 	addi	r2,r2,-6492
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	00800684 	movi	r2,26
81100cd0:	100d883a 	mov	r6,r2
81100cd4:	200b883a 	mov	r5,r4
81100cd8:	1809883a 	mov	r4,r3
81100cdc:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100ce0:	d0a05017 	ldw	r2,-32448(gp)
81100ce4:	01604534 	movhi	r5,33044
81100ce8:	29523604 	addi	r5,r5,18648
81100cec:	1009883a 	mov	r4,r2
81100cf0:	11135480 	call	81113548 <fprintf>
81100cf4:	0001ce06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100cf8:	e0bfbc17 	ldw	r2,-272(fp)
81100cfc:	10800498 	cmpnei	r2,r2,18
81100d00:	1000101e 	bne	r2,zero,81100d44 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d04:	00e04534 	movhi	r3,33044
81100d08:	18d23604 	addi	r3,r3,18648
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10b9b004 	addi	r2,r2,-6464
81100d14:	1009883a 	mov	r4,r2
81100d18:	00800d44 	movi	r2,53
81100d1c:	100d883a 	mov	r6,r2
81100d20:	200b883a 	mov	r5,r4
81100d24:	1809883a 	mov	r4,r3
81100d28:	11145f80 	call	811145f8 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100d2c:	d0a05017 	ldw	r2,-32448(gp)
81100d30:	01604534 	movhi	r5,33044
81100d34:	29523604 	addi	r5,r5,18648
81100d38:	1009883a 	mov	r4,r2
81100d3c:	11135480 	call	81113548 <fprintf>
81100d40:	0001bb06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100d44:	e0bfbc17 	ldw	r2,-272(fp)
81100d48:	10800518 	cmpnei	r2,r2,20
81100d4c:	1000101e 	bne	r2,zero,81100d90 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d50:	00e04534 	movhi	r3,33044
81100d54:	18d23604 	addi	r3,r3,18648
81100d58:	00a04534 	movhi	r2,33044
81100d5c:	10b9be04 	addi	r2,r2,-6408
81100d60:	1009883a 	mov	r4,r2
81100d64:	00801204 	movi	r2,72
81100d68:	100d883a 	mov	r6,r2
81100d6c:	200b883a 	mov	r5,r4
81100d70:	1809883a 	mov	r4,r3
81100d74:	11145f80 	call	811145f8 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d78:	d0a05017 	ldw	r2,-32448(gp)
81100d7c:	01604534 	movhi	r5,33044
81100d80:	29523604 	addi	r5,r5,18648
81100d84:	1009883a 	mov	r4,r2
81100d88:	11135480 	call	81113548 <fprintf>
81100d8c:	0001a806 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d90:	e0bfbc17 	ldw	r2,-272(fp)
81100d94:	10800598 	cmpnei	r2,r2,22
81100d98:	1000101e 	bne	r2,zero,81100ddc <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d9c:	00e04534 	movhi	r3,33044
81100da0:	18d23604 	addi	r3,r3,18648
81100da4:	00a04534 	movhi	r2,33044
81100da8:	10b9d004 	addi	r2,r2,-6336
81100dac:	1009883a 	mov	r4,r2
81100db0:	00800784 	movi	r2,30
81100db4:	100d883a 	mov	r6,r2
81100db8:	200b883a 	mov	r5,r4
81100dbc:	1809883a 	mov	r4,r3
81100dc0:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81100dc4:	d0a05017 	ldw	r2,-32448(gp)
81100dc8:	01604534 	movhi	r5,33044
81100dcc:	29523604 	addi	r5,r5,18648
81100dd0:	1009883a 	mov	r4,r2
81100dd4:	11135480 	call	81113548 <fprintf>
81100dd8:	00019506 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100ddc:	e0bfbc17 	ldw	r2,-272(fp)
81100de0:	108006d8 	cmpnei	r2,r2,27
81100de4:	1000101e 	bne	r2,zero,81100e28 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100de8:	00e04534 	movhi	r3,33044
81100dec:	18d23604 	addi	r3,r3,18648
81100df0:	00a04534 	movhi	r2,33044
81100df4:	10b9d804 	addi	r2,r2,-6304
81100df8:	1009883a 	mov	r4,r2
81100dfc:	00800a04 	movi	r2,40
81100e00:	100d883a 	mov	r6,r2
81100e04:	200b883a 	mov	r5,r4
81100e08:	1809883a 	mov	r4,r3
81100e0c:	11145f80 	call	811145f8 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e10:	d0a05017 	ldw	r2,-32448(gp)
81100e14:	01604534 	movhi	r5,33044
81100e18:	29523604 	addi	r5,r5,18648
81100e1c:	1009883a 	mov	r4,r2
81100e20:	11135480 	call	81113548 <fprintf>
81100e24:	00018206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100e28:	e0bfbc17 	ldw	r2,-272(fp)
81100e2c:	10800718 	cmpnei	r2,r2,28
81100e30:	1000101e 	bne	r2,zero,81100e74 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e34:	00e04534 	movhi	r3,33044
81100e38:	18d23604 	addi	r3,r3,18648
81100e3c:	00a04534 	movhi	r2,33044
81100e40:	10b9e204 	addi	r2,r2,-6264
81100e44:	1009883a 	mov	r4,r2
81100e48:	00800cc4 	movi	r2,51
81100e4c:	100d883a 	mov	r6,r2
81100e50:	200b883a 	mov	r5,r4
81100e54:	1809883a 	mov	r4,r3
81100e58:	11145f80 	call	811145f8 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e5c:	d0a05017 	ldw	r2,-32448(gp)
81100e60:	01604534 	movhi	r5,33044
81100e64:	29523604 	addi	r5,r5,18648
81100e68:	1009883a 	mov	r4,r2
81100e6c:	11135480 	call	81113548 <fprintf>
81100e70:	00016f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e74:	e0bfbc17 	ldw	r2,-272(fp)
81100e78:	10800758 	cmpnei	r2,r2,29
81100e7c:	1000101e 	bne	r2,zero,81100ec0 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e80:	00e04534 	movhi	r3,33044
81100e84:	18d23604 	addi	r3,r3,18648
81100e88:	00a04534 	movhi	r2,33044
81100e8c:	10b9ef04 	addi	r2,r2,-6212
81100e90:	1009883a 	mov	r4,r2
81100e94:	008009c4 	movi	r2,39
81100e98:	100d883a 	mov	r6,r2
81100e9c:	200b883a 	mov	r5,r4
81100ea0:	1809883a 	mov	r4,r3
81100ea4:	11145f80 	call	811145f8 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ea8:	d0a05017 	ldw	r2,-32448(gp)
81100eac:	01604534 	movhi	r5,33044
81100eb0:	29523604 	addi	r5,r5,18648
81100eb4:	1009883a 	mov	r4,r2
81100eb8:	11135480 	call	81113548 <fprintf>
81100ebc:	00015c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100ec0:	e0bfbc17 	ldw	r2,-272(fp)
81100ec4:	10800798 	cmpnei	r2,r2,30
81100ec8:	1000101e 	bne	r2,zero,81100f0c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ecc:	00e04534 	movhi	r3,33044
81100ed0:	18d23604 	addi	r3,r3,18648
81100ed4:	00a04534 	movhi	r2,33044
81100ed8:	10b9f904 	addi	r2,r2,-6172
81100edc:	1009883a 	mov	r4,r2
81100ee0:	00800b04 	movi	r2,44
81100ee4:	100d883a 	mov	r6,r2
81100ee8:	200b883a 	mov	r5,r4
81100eec:	1809883a 	mov	r4,r3
81100ef0:	11145f80 	call	811145f8 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100ef4:	d0a05017 	ldw	r2,-32448(gp)
81100ef8:	01604534 	movhi	r5,33044
81100efc:	29523604 	addi	r5,r5,18648
81100f00:	1009883a 	mov	r4,r2
81100f04:	11135480 	call	81113548 <fprintf>
81100f08:	00014906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100f0c:	e0bfbc17 	ldw	r2,-272(fp)
81100f10:	108007d8 	cmpnei	r2,r2,31
81100f14:	1000101e 	bne	r2,zero,81100f58 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f18:	00e04534 	movhi	r3,33044
81100f1c:	18d23604 	addi	r3,r3,18648
81100f20:	00a04534 	movhi	r2,33044
81100f24:	10ba0404 	addi	r2,r2,-6128
81100f28:	1009883a 	mov	r4,r2
81100f2c:	008010c4 	movi	r2,67
81100f30:	100d883a 	mov	r6,r2
81100f34:	200b883a 	mov	r5,r4
81100f38:	1809883a 	mov	r4,r3
81100f3c:	11145f80 	call	811145f8 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100f40:	d0a05017 	ldw	r2,-32448(gp)
81100f44:	01604534 	movhi	r5,33044
81100f48:	29523604 	addi	r5,r5,18648
81100f4c:	1009883a 	mov	r4,r2
81100f50:	11135480 	call	81113548 <fprintf>
81100f54:	00013606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100f58:	e0bfbc17 	ldw	r2,-272(fp)
81100f5c:	10800918 	cmpnei	r2,r2,36
81100f60:	1000101e 	bne	r2,zero,81100fa4 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f64:	00e04534 	movhi	r3,33044
81100f68:	18d23604 	addi	r3,r3,18648
81100f6c:	00a04534 	movhi	r2,33044
81100f70:	10ba1504 	addi	r2,r2,-6060
81100f74:	1009883a 	mov	r4,r2
81100f78:	00800a84 	movi	r2,42
81100f7c:	100d883a 	mov	r6,r2
81100f80:	200b883a 	mov	r5,r4
81100f84:	1809883a 	mov	r4,r3
81100f88:	11145f80 	call	811145f8 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f8c:	d0a05017 	ldw	r2,-32448(gp)
81100f90:	01604534 	movhi	r5,33044
81100f94:	29523604 	addi	r5,r5,18648
81100f98:	1009883a 	mov	r4,r2
81100f9c:	11135480 	call	81113548 <fprintf>
81100fa0:	00012306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100fa4:	e0bfbc17 	ldw	r2,-272(fp)
81100fa8:	10800958 	cmpnei	r2,r2,37
81100fac:	1000101e 	bne	r2,zero,81100ff0 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fb0:	00e04534 	movhi	r3,33044
81100fb4:	18d23604 	addi	r3,r3,18648
81100fb8:	00a04534 	movhi	r2,33044
81100fbc:	10ba2004 	addi	r2,r2,-6016
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	00800cc4 	movi	r2,51
81100fc8:	100d883a 	mov	r6,r2
81100fcc:	200b883a 	mov	r5,r4
81100fd0:	1809883a 	mov	r4,r3
81100fd4:	11145f80 	call	811145f8 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fd8:	d0a05017 	ldw	r2,-32448(gp)
81100fdc:	01604534 	movhi	r5,33044
81100fe0:	29523604 	addi	r5,r5,18648
81100fe4:	1009883a 	mov	r4,r2
81100fe8:	11135480 	call	81113548 <fprintf>
81100fec:	00011006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100ff0:	e0bfbc17 	ldw	r2,-272(fp)
81100ff4:	10800998 	cmpnei	r2,r2,38
81100ff8:	1000101e 	bne	r2,zero,8110103c <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ffc:	00e04534 	movhi	r3,33044
81101000:	18d23604 	addi	r3,r3,18648
81101004:	00a04534 	movhi	r2,33044
81101008:	10ba2d04 	addi	r2,r2,-5964
8110100c:	1009883a 	mov	r4,r2
81101010:	00800dc4 	movi	r2,55
81101014:	100d883a 	mov	r6,r2
81101018:	200b883a 	mov	r5,r4
8110101c:	1809883a 	mov	r4,r3
81101020:	11145f80 	call	811145f8 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81101024:	d0a05017 	ldw	r2,-32448(gp)
81101028:	01604534 	movhi	r5,33044
8110102c:	29523604 	addi	r5,r5,18648
81101030:	1009883a 	mov	r4,r2
81101034:	11135480 	call	81113548 <fprintf>
81101038:	0000fd06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
8110103c:	e0bfbc17 	ldw	r2,-272(fp)
81101040:	10800a58 	cmpnei	r2,r2,41
81101044:	1000101e 	bne	r2,zero,81101088 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101048:	00e04534 	movhi	r3,33044
8110104c:	18d23604 	addi	r3,r3,18648
81101050:	00a04534 	movhi	r2,33044
81101054:	10ba3b04 	addi	r2,r2,-5908
81101058:	1009883a 	mov	r4,r2
8110105c:	00800c84 	movi	r2,50
81101060:	100d883a 	mov	r6,r2
81101064:	200b883a 	mov	r5,r4
81101068:	1809883a 	mov	r4,r3
8110106c:	11145f80 	call	811145f8 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101070:	d0a05017 	ldw	r2,-32448(gp)
81101074:	01604534 	movhi	r5,33044
81101078:	29523604 	addi	r5,r5,18648
8110107c:	1009883a 	mov	r4,r2
81101080:	11135480 	call	81113548 <fprintf>
81101084:	0000ea06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101088:	e0bfbc17 	ldw	r2,-272(fp)
8110108c:	10800a98 	cmpnei	r2,r2,42
81101090:	1000101e 	bne	r2,zero,811010d4 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101094:	00e04534 	movhi	r3,33044
81101098:	18d23604 	addi	r3,r3,18648
8110109c:	00a04534 	movhi	r2,33044
811010a0:	10ba4804 	addi	r2,r2,-5856
811010a4:	1009883a 	mov	r4,r2
811010a8:	00800cc4 	movi	r2,51
811010ac:	100d883a 	mov	r6,r2
811010b0:	200b883a 	mov	r5,r4
811010b4:	1809883a 	mov	r4,r3
811010b8:	11145f80 	call	811145f8 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
811010bc:	d0a05017 	ldw	r2,-32448(gp)
811010c0:	01604534 	movhi	r5,33044
811010c4:	29523604 	addi	r5,r5,18648
811010c8:	1009883a 	mov	r4,r2
811010cc:	11135480 	call	81113548 <fprintf>
811010d0:	0000d706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
811010d4:	e0bfbc17 	ldw	r2,-272(fp)
811010d8:	10800f98 	cmpnei	r2,r2,62
811010dc:	1000101e 	bne	r2,zero,81101120 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
811010e0:	00e04534 	movhi	r3,33044
811010e4:	18d23604 	addi	r3,r3,18648
811010e8:	00a04534 	movhi	r2,33044
811010ec:	10ba5504 	addi	r2,r2,-5804
811010f0:	1009883a 	mov	r4,r2
811010f4:	00800404 	movi	r2,16
811010f8:	100d883a 	mov	r6,r2
811010fc:	200b883a 	mov	r5,r4
81101100:	1809883a 	mov	r4,r3
81101104:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81101108:	d0a05017 	ldw	r2,-32448(gp)
8110110c:	01604534 	movhi	r5,33044
81101110:	29523604 	addi	r5,r5,18648
81101114:	1009883a 	mov	r4,r2
81101118:	11135480 	call	81113548 <fprintf>
8110111c:	0000c406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
81101120:	e0bfbc17 	ldw	r2,-272(fp)
81101124:	10800fd8 	cmpnei	r2,r2,63
81101128:	10001f1e 	bne	r2,zero,811011a8 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
8110112c:	00a04534 	movhi	r2,33044
81101130:	10923604 	addi	r2,r2,18648
81101134:	00c00a04 	movi	r3,40
81101138:	10c00005 	stb	r3,0(r2)
8110113c:	00c010c4 	movi	r3,67
81101140:	10c00045 	stb	r3,1(r2)
81101144:	00c01a04 	movi	r3,104
81101148:	10c00085 	stb	r3,2(r2)
8110114c:	00c01944 	movi	r3,101
81101150:	10c000c5 	stb	r3,3(r2)
81101154:	00c018c4 	movi	r3,99
81101158:	10c00105 	stb	r3,4(r2)
8110115c:	00c01ac4 	movi	r3,107
81101160:	10c00145 	stb	r3,5(r2)
81101164:	00c01cc4 	movi	r3,115
81101168:	10c00185 	stb	r3,6(r2)
8110116c:	00c01d44 	movi	r3,117
81101170:	10c001c5 	stb	r3,7(r2)
81101174:	00c01b44 	movi	r3,109
81101178:	10c00205 	stb	r3,8(r2)
8110117c:	00c00a44 	movi	r3,41
81101180:	10c00245 	stb	r3,9(r2)
81101184:	00c00284 	movi	r3,10
81101188:	10c00285 	stb	r3,10(r2)
8110118c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101190:	d0a05017 	ldw	r2,-32448(gp)
81101194:	01604534 	movhi	r5,33044
81101198:	29523604 	addi	r5,r5,18648
8110119c:	1009883a 	mov	r4,r2
811011a0:	11135480 	call	81113548 <fprintf>
811011a4:	0000a206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
811011a8:	e0bfbc17 	ldw	r2,-272(fp)
811011ac:	10801018 	cmpnei	r2,r2,64
811011b0:	1000101e 	bne	r2,zero,811011f4 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
811011b4:	00e04534 	movhi	r3,33044
811011b8:	18d23604 	addi	r3,r3,18648
811011bc:	00a04534 	movhi	r2,33044
811011c0:	10ba5904 	addi	r2,r2,-5788
811011c4:	1009883a 	mov	r4,r2
811011c8:	00800804 	movi	r2,32
811011cc:	100d883a 	mov	r6,r2
811011d0:	200b883a 	mov	r5,r4
811011d4:	1809883a 	mov	r4,r3
811011d8:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
811011dc:	d0a05017 	ldw	r2,-32448(gp)
811011e0:	01604534 	movhi	r5,33044
811011e4:	29523604 	addi	r5,r5,18648
811011e8:	1009883a 	mov	r4,r2
811011ec:	11135480 	call	81113548 <fprintf>
811011f0:	00008f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
811011f4:	e0bfbc17 	ldw	r2,-272(fp)
811011f8:	10801218 	cmpnei	r2,r2,72
811011fc:	1000101e 	bne	r2,zero,81101240 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101200:	00e04534 	movhi	r3,33044
81101204:	18d23604 	addi	r3,r3,18648
81101208:	00a04534 	movhi	r2,33044
8110120c:	10ba6104 	addi	r2,r2,-5756
81101210:	1009883a 	mov	r4,r2
81101214:	00800dc4 	movi	r2,55
81101218:	100d883a 	mov	r6,r2
8110121c:	200b883a 	mov	r5,r4
81101220:	1809883a 	mov	r4,r3
81101224:	11145f80 	call	811145f8 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
81101228:	d0a05017 	ldw	r2,-32448(gp)
8110122c:	01604534 	movhi	r5,33044
81101230:	29523604 	addi	r5,r5,18648
81101234:	1009883a 	mov	r4,r2
81101238:	11135480 	call	81113548 <fprintf>
8110123c:	00007c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
81101240:	e0bfbc17 	ldw	r2,-272(fp)
81101244:	10801258 	cmpnei	r2,r2,73
81101248:	1000101e 	bne	r2,zero,8110128c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
8110124c:	00e04534 	movhi	r3,33044
81101250:	18d23604 	addi	r3,r3,18648
81101254:	00a04534 	movhi	r2,33044
81101258:	10ba6f04 	addi	r2,r2,-5700
8110125c:	1009883a 	mov	r4,r2
81101260:	00800784 	movi	r2,30
81101264:	100d883a 	mov	r6,r2
81101268:	200b883a 	mov	r5,r4
8110126c:	1809883a 	mov	r4,r3
81101270:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81101274:	d0a05017 	ldw	r2,-32448(gp)
81101278:	01604534 	movhi	r5,33044
8110127c:	29523604 	addi	r5,r5,18648
81101280:	1009883a 	mov	r4,r2
81101284:	11135480 	call	81113548 <fprintf>
81101288:	00006906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110128c:	e0bfbc17 	ldw	r2,-272(fp)
81101290:	108016d8 	cmpnei	r2,r2,91
81101294:	1000101e 	bne	r2,zero,811012d8 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101298:	00e04534 	movhi	r3,33044
8110129c:	18d23604 	addi	r3,r3,18648
811012a0:	00a04534 	movhi	r2,33044
811012a4:	10ba7704 	addi	r2,r2,-5668
811012a8:	1009883a 	mov	r4,r2
811012ac:	00800804 	movi	r2,32
811012b0:	100d883a 	mov	r6,r2
811012b4:	200b883a 	mov	r5,r4
811012b8:	1809883a 	mov	r4,r3
811012bc:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
811012c0:	d0a05017 	ldw	r2,-32448(gp)
811012c4:	01604534 	movhi	r5,33044
811012c8:	29523604 	addi	r5,r5,18648
811012cc:	1009883a 	mov	r4,r2
811012d0:	11135480 	call	81113548 <fprintf>
811012d4:	00005606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
811012d8:	e0bfbc17 	ldw	r2,-272(fp)
811012dc:	10801758 	cmpnei	r2,r2,93
811012e0:	1000101e 	bne	r2,zero,81101324 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012e4:	00e04534 	movhi	r3,33044
811012e8:	18d23604 	addi	r3,r3,18648
811012ec:	00a04534 	movhi	r2,33044
811012f0:	10ba7f04 	addi	r2,r2,-5636
811012f4:	1009883a 	mov	r4,r2
811012f8:	008009c4 	movi	r2,39
811012fc:	100d883a 	mov	r6,r2
81101300:	200b883a 	mov	r5,r4
81101304:	1809883a 	mov	r4,r3
81101308:	11145f80 	call	811145f8 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110130c:	d0a05017 	ldw	r2,-32448(gp)
81101310:	01604534 	movhi	r5,33044
81101314:	29523604 	addi	r5,r5,18648
81101318:	1009883a 	mov	r4,r2
8110131c:	11135480 	call	81113548 <fprintf>
81101320:	00004306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
81101324:	e0bfbc17 	ldw	r2,-272(fp)
81101328:	10801798 	cmpnei	r2,r2,94
8110132c:	1000101e 	bne	r2,zero,81101370 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
81101330:	00e04534 	movhi	r3,33044
81101334:	18d23604 	addi	r3,r3,18648
81101338:	00a04534 	movhi	r2,33044
8110133c:	10ba8904 	addi	r2,r2,-5596
81101340:	1009883a 	mov	r4,r2
81101344:	008006c4 	movi	r2,27
81101348:	100d883a 	mov	r6,r2
8110134c:	200b883a 	mov	r5,r4
81101350:	1809883a 	mov	r4,r3
81101354:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
81101358:	d0a05017 	ldw	r2,-32448(gp)
8110135c:	01604534 	movhi	r5,33044
81101360:	29523604 	addi	r5,r5,18648
81101364:	1009883a 	mov	r4,r2
81101368:	11135480 	call	81113548 <fprintf>
8110136c:	00003006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101370:	e0bfbc17 	ldw	r2,-272(fp)
81101374:	108017d8 	cmpnei	r2,r2,95
81101378:	1000101e 	bne	r2,zero,811013bc <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110137c:	00e04534 	movhi	r3,33044
81101380:	18d23604 	addi	r3,r3,18648
81101384:	00a04534 	movhi	r2,33044
81101388:	10ba9004 	addi	r2,r2,-5568
8110138c:	1009883a 	mov	r4,r2
81101390:	00800a04 	movi	r2,40
81101394:	100d883a 	mov	r6,r2
81101398:	200b883a 	mov	r5,r4
8110139c:	1809883a 	mov	r4,r3
811013a0:	11145f80 	call	811145f8 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
811013a4:	d0a05017 	ldw	r2,-32448(gp)
811013a8:	01604534 	movhi	r5,33044
811013ac:	29523604 	addi	r5,r5,18648
811013b0:	1009883a 	mov	r4,r2
811013b4:	11135480 	call	81113548 <fprintf>
811013b8:	00001d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
811013bc:	e0bfbc17 	ldw	r2,-272(fp)
811013c0:	108018d8 	cmpnei	r2,r2,99
811013c4:	1000101e 	bne	r2,zero,81101408 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
811013c8:	00e04534 	movhi	r3,33044
811013cc:	18d23604 	addi	r3,r3,18648
811013d0:	00a04534 	movhi	r2,33044
811013d4:	10ba9a04 	addi	r2,r2,-5528
811013d8:	1009883a 	mov	r4,r2
811013dc:	00800984 	movi	r2,38
811013e0:	100d883a 	mov	r6,r2
811013e4:	200b883a 	mov	r5,r4
811013e8:	1809883a 	mov	r4,r3
811013ec:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
811013f0:	d0a05017 	ldw	r2,-32448(gp)
811013f4:	01604534 	movhi	r5,33044
811013f8:	29523604 	addi	r5,r5,18648
811013fc:	1009883a 	mov	r4,r2
81101400:	11135480 	call	81113548 <fprintf>
81101404:	00000a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101408:	00a04534 	movhi	r2,33044
8110140c:	10923604 	addi	r2,r2,18648
81101410:	00c00284 	movi	r3,10
81101414:	10c00005 	stb	r3,0(r2)
81101418:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
8110141c:	d0a05017 	ldw	r2,-32448(gp)
81101420:	01604534 	movhi	r5,33044
81101424:	29523604 	addi	r5,r5,18648
81101428:	1009883a 	mov	r4,r2
8110142c:	11135480 	call	81113548 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81101430:	e0bfbc17 	ldw	r2,-272(fp)
81101434:	10800044 	addi	r2,r2,1
81101438:	e0bfbc15 	stw	r2,-272(fp)
8110143c:	e0bfbc17 	ldw	r2,-272(fp)
81101440:	10804008 	cmpgei	r2,r2,256
81101444:	1000121e 	bne	r2,zero,81101490 <bDdr2EepromDump+0xc74>
81101448:	e0bfbe17 	ldw	r2,-264(fp)
8110144c:	103d451e 	bne	r2,zero,81100964 <__reset+0xfb0e0964>
81101450:	00000f06 	br	81101490 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
81101454:	00e04534 	movhi	r3,33044
81101458:	18d23604 	addi	r3,r3,18648
8110145c:	00a04534 	movhi	r2,33044
81101460:	10baa404 	addi	r2,r2,-5488
81101464:	1009883a 	mov	r4,r2
81101468:	008005c4 	movi	r2,23
8110146c:	100d883a 	mov	r6,r2
81101470:	200b883a 	mov	r5,r4
81101474:	1809883a 	mov	r4,r3
81101478:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
8110147c:	d0a05017 	ldw	r2,-32448(gp)
81101480:	01604534 	movhi	r5,33044
81101484:	29523604 	addi	r5,r5,18648
81101488:	1009883a 	mov	r4,r2
8110148c:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101490:	00a04534 	movhi	r2,33044
81101494:	10923604 	addi	r2,r2,18648
81101498:	00c00284 	movi	r3,10
8110149c:	10c00005 	stb	r3,0(r2)
811014a0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811014a4:	d0a05017 	ldw	r2,-32448(gp)
811014a8:	01604534 	movhi	r5,33044
811014ac:	29523604 	addi	r5,r5,18648
811014b0:	1009883a 	mov	r4,r2
811014b4:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
811014b8:	e0bfbe17 	ldw	r2,-264(fp)
}
811014bc:	e037883a 	mov	sp,fp
811014c0:	dfc00117 	ldw	ra,4(sp)
811014c4:	df000017 	ldw	fp,0(sp)
811014c8:	dec00204 	addi	sp,sp,8
811014cc:	f800283a 	ret

811014d0 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
811014d0:	defffb04 	addi	sp,sp,-20
811014d4:	de00012e 	bgeu	sp,et,811014dc <bDdr2SwitchMemory+0xc>
811014d8:	003b68fa 	trap	3
811014dc:	dfc00415 	stw	ra,16(sp)
811014e0:	df000315 	stw	fp,12(sp)
811014e4:	df000304 	addi	fp,sp,12
811014e8:	2005883a 	mov	r2,r4
811014ec:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
811014f0:	00a04834 	movhi	r2,33056
811014f4:	108c2204 	addi	r2,r2,12424
811014f8:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
811014fc:	00800044 	movi	r2,1
81101500:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101504:	e0bfff03 	ldbu	r2,-4(fp)
81101508:	10c00060 	cmpeqi	r3,r2,1
8110150c:	1800031e 	bne	r3,zero,8110151c <bDdr2SwitchMemory+0x4c>
81101510:	108000a0 	cmpeqi	r2,r2,2
81101514:	1000041e 	bne	r2,zero,81101528 <bDdr2SwitchMemory+0x58>
81101518:	00000706 	br	81101538 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
8110151c:	e0bffe17 	ldw	r2,-8(fp)
81101520:	10000015 	stw	zero,0(r2)
		break;
81101524:	00001406 	br	81101578 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101528:	e0bffe17 	ldw	r2,-8(fp)
8110152c:	00e00034 	movhi	r3,32768
81101530:	10c00015 	stw	r3,0(r2)
		break;
81101534:	00001006 	br	81101578 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
81101538:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110153c:	00e04534 	movhi	r3,33044
81101540:	18d23604 	addi	r3,r3,18648
81101544:	00a04534 	movhi	r2,33044
81101548:	10baaa04 	addi	r2,r2,-5464
8110154c:	1009883a 	mov	r4,r2
81101550:	00800f04 	movi	r2,60
81101554:	100d883a 	mov	r6,r2
81101558:	200b883a 	mov	r5,r4
8110155c:	1809883a 	mov	r4,r3
81101560:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
81101564:	d0a05017 	ldw	r2,-32448(gp)
81101568:	01604534 	movhi	r5,33044
8110156c:	29523604 	addi	r5,r5,18648
81101570:	1009883a 	mov	r4,r2
81101574:	11135480 	call	81113548 <fprintf>
		;
#endif
	}

	return bSuccess;
81101578:	e0bffd17 	ldw	r2,-12(fp)
}
8110157c:	e037883a 	mov	sp,fp
81101580:	dfc00117 	ldw	ra,4(sp)
81101584:	df000017 	ldw	fp,0(sp)
81101588:	dec00204 	addi	sp,sp,8
8110158c:	f800283a 	ret

81101590 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101590:	deffe204 	addi	sp,sp,-120
81101594:	de00012e 	bgeu	sp,et,8110159c <bDdr2MemoryWriteTest+0xc>
81101598:	003b68fa 	trap	3
8110159c:	dfc01d15 	stw	ra,116(sp)
811015a0:	df001c15 	stw	fp,112(sp)
811015a4:	dc401b15 	stw	r17,108(sp)
811015a8:	dc001a15 	stw	r16,104(sp)
811015ac:	df001c04 	addi	fp,sp,112
811015b0:	2005883a 	mov	r2,r4
811015b4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
811015b8:	00e04534 	movhi	r3,33044
811015bc:	18d23604 	addi	r3,r3,18648
811015c0:	00a04534 	movhi	r2,33044
811015c4:	10bab904 	addi	r2,r2,-5404
811015c8:	1009883a 	mov	r4,r2
811015cc:	00800a04 	movi	r2,40
811015d0:	100d883a 	mov	r6,r2
811015d4:	200b883a 	mov	r5,r4
811015d8:	1809883a 	mov	r4,r3
811015dc:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
811015e0:	d0a05017 	ldw	r2,-32448(gp)
811015e4:	01604534 	movhi	r5,33044
811015e8:	29523604 	addi	r5,r5,18648
811015ec:	1009883a 	mov	r4,r2
811015f0:	11135480 	call	81113548 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
811015f4:	00800044 	movi	r2,1
811015f8:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
811015fc:	e0bffd03 	ldbu	r2,-12(fp)
81101600:	10c00060 	cmpeqi	r3,r2,1
81101604:	1800031e 	bne	r3,zero,81101614 <bDdr2MemoryWriteTest+0x84>
81101608:	108000a0 	cmpeqi	r2,r2,2
8110160c:	1000081e 	bne	r2,zero,81101630 <bDdr2MemoryWriteTest+0xa0>
81101610:	00000e06 	br	8110164c <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101614:	e0bffd03 	ldbu	r2,-12(fp)
81101618:	1009883a 	mov	r4,r2
8110161c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101620:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101624:	00a00034 	movhi	r2,32768
81101628:	e0bfe615 	stw	r2,-104(fp)
		break;
8110162c:	00001906 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101630:	e0bffd03 	ldbu	r2,-12(fp)
81101634:	1009883a 	mov	r4,r2
81101638:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110163c:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101640:	00a00034 	movhi	r2,32768
81101644:	e0bfe615 	stw	r2,-104(fp)
		break;
81101648:	00001206 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
8110164c:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101650:	00e04534 	movhi	r3,33044
81101654:	18d23604 	addi	r3,r3,18648
81101658:	00a04534 	movhi	r2,33044
8110165c:	10b8ca04 	addi	r2,r2,-7384
81101660:	1009883a 	mov	r4,r2
81101664:	00800bc4 	movi	r2,47
81101668:	100d883a 	mov	r6,r2
8110166c:	200b883a 	mov	r5,r4
81101670:	1809883a 	mov	r4,r3
81101674:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101678:	d0a05017 	ldw	r2,-32448(gp)
8110167c:	01604534 	movhi	r5,33044
81101680:	29523604 	addi	r5,r5,18648
81101684:	1009883a 	mov	r4,r2
81101688:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
8110168c:	e0bfed17 	ldw	r2,-76(fp)
81101690:	00011806 	br	81101af4 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101694:	e0bfe617 	ldw	r2,-104(fp)
81101698:	1004d53a 	srli	r2,r2,20
8110169c:	100d883a 	mov	r6,r2
811016a0:	01604534 	movhi	r5,33044
811016a4:	297ac304 	addi	r5,r5,-5364
811016a8:	01204534 	movhi	r4,33044
811016ac:	21123604 	addi	r4,r4,18648
811016b0:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
811016b4:	d0a05017 	ldw	r2,-32448(gp)
811016b8:	01604534 	movhi	r5,33044
811016bc:	29523604 	addi	r5,r5,18648
811016c0:	1009883a 	mov	r4,r2
811016c4:	11135480 	call	81113548 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
811016c8:	00800104 	movi	r2,4
811016cc:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
811016d0:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
811016d4:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
811016d8:	e03fe715 	stw	zero,-100(fp)
811016dc:	00001506 	br	81101734 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
811016e0:	e0ffe617 	ldw	r3,-104(fp)
811016e4:	00b33374 	movhi	r2,52429
811016e8:	10b33344 	addi	r2,r2,-13107
811016ec:	1888383a 	mulxuu	r4,r3,r2
811016f0:	1885383a 	mul	r2,r3,r2
811016f4:	1021883a 	mov	r16,r2
811016f8:	2023883a 	mov	r17,r4
811016fc:	8804d0fa 	srli	r2,r17,3
81101700:	e0ffe717 	ldw	r3,-100(fp)
81101704:	18c00044 	addi	r3,r3,1
81101708:	10c7383a 	mul	r3,r2,r3
8110170c:	e0bfe717 	ldw	r2,-100(fp)
81101710:	1085883a 	add	r2,r2,r2
81101714:	1085883a 	add	r2,r2,r2
81101718:	e13fe504 	addi	r4,fp,-108
8110171c:	2085883a 	add	r2,r4,r2
81101720:	10800e04 	addi	r2,r2,56
81101724:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101728:	e0bfe717 	ldw	r2,-100(fp)
8110172c:	10800044 	addi	r2,r2,1
81101730:	e0bfe715 	stw	r2,-100(fp)
81101734:	e0bfe717 	ldw	r2,-100(fp)
81101738:	10800290 	cmplti	r2,r2,10
8110173c:	103fe81e 	bne	r2,zero,811016e0 <__reset+0xfb0e16e0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101740:	d0a07317 	ldw	r2,-32308(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101744:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101748:	00804004 	movi	r2,256
8110174c:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81101750:	e03fe715 	stw	zero,-100(fp)
81101754:	00001e06 	br	811017d0 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
81101758:	e0bfe717 	ldw	r2,-100(fp)
8110175c:	1000091e 	bne	r2,zero,81101784 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
81101760:	00a04534 	movhi	r2,33044
81101764:	10927604 	addi	r2,r2,18904
81101768:	e0ffe717 	ldw	r3,-100(fp)
8110176c:	18c7883a 	add	r3,r3,r3
81101770:	18c7883a 	add	r3,r3,r3
81101774:	10c5883a 	add	r2,r2,r3
81101778:	e0fff017 	ldw	r3,-64(fp)
8110177c:	10c00015 	stw	r3,0(r2)
81101780:	00001006 	br	811017c4 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101784:	e0bfe717 	ldw	r2,-100(fp)
81101788:	10ffffc4 	addi	r3,r2,-1
8110178c:	00a04534 	movhi	r2,33044
81101790:	10927604 	addi	r2,r2,18904
81101794:	18c7883a 	add	r3,r3,r3
81101798:	18c7883a 	add	r3,r3,r3
8110179c:	10c5883a 	add	r2,r2,r3
811017a0:	10800017 	ldw	r2,0(r2)
811017a4:	11000364 	muli	r4,r2,13
811017a8:	00a04534 	movhi	r2,33044
811017ac:	10927604 	addi	r2,r2,18904
811017b0:	e0ffe717 	ldw	r3,-100(fp)
811017b4:	18c7883a 	add	r3,r3,r3
811017b8:	18c7883a 	add	r3,r3,r3
811017bc:	10c5883a 	add	r2,r2,r3
811017c0:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
811017c4:	e0bfe717 	ldw	r2,-100(fp)
811017c8:	10800044 	addi	r2,r2,1
811017cc:	e0bfe715 	stw	r2,-100(fp)
811017d0:	e0ffe717 	ldw	r3,-100(fp)
811017d4:	e0bfea17 	ldw	r2,-88(fp)
811017d8:	18bfdf16 	blt	r3,r2,81101758 <__reset+0xfb0e1758>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffffc4 	addi	r3,r2,-1
811017e4:	00a04534 	movhi	r2,33044
811017e8:	10927604 	addi	r2,r2,18904
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c7883a 	add	r3,r2,r3
811017f8:	00aaaaf4 	movhi	r2,43691
811017fc:	10aaaa84 	addi	r2,r2,-21846
81101800:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101804:	e0bfea17 	ldw	r2,-88(fp)
81101808:	10ffff84 	addi	r3,r2,-2
8110180c:	00a04534 	movhi	r2,33044
81101810:	10927604 	addi	r2,r2,18904
81101814:	18c7883a 	add	r3,r3,r3
81101818:	18c7883a 	add	r3,r3,r3
8110181c:	10c7883a 	add	r3,r2,r3
81101820:	00955574 	movhi	r2,21845
81101824:	10955544 	addi	r2,r2,21845
81101828:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
8110182c:	e0bfea17 	ldw	r2,-88(fp)
81101830:	10ffff44 	addi	r3,r2,-3
81101834:	00a04534 	movhi	r2,33044
81101838:	10927604 	addi	r2,r2,18904
8110183c:	18c7883a 	add	r3,r3,r3
81101840:	18c7883a 	add	r3,r3,r3
81101844:	10c5883a 	add	r2,r2,r3
81101848:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
8110184c:	e0bfea17 	ldw	r2,-88(fp)
81101850:	10ffff04 	addi	r3,r2,-4
81101854:	00a04534 	movhi	r2,33044
81101858:	10927604 	addi	r2,r2,18904
8110185c:	18c7883a 	add	r3,r3,r3
81101860:	18c7883a 	add	r3,r3,r3
81101864:	10c5883a 	add	r2,r2,r3
81101868:	00ffffc4 	movi	r3,-1
8110186c:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101870:	00e04534 	movhi	r3,33044
81101874:	18d23604 	addi	r3,r3,18648
81101878:	00a04534 	movhi	r2,33044
8110187c:	10bac904 	addi	r2,r2,-5340
81101880:	1009883a 	mov	r4,r2
81101884:	00800444 	movi	r2,17
81101888:	100d883a 	mov	r6,r2
8110188c:	200b883a 	mov	r5,r4
81101890:	1809883a 	mov	r4,r3
81101894:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81101898:	d0a05017 	ldw	r2,-32448(gp)
8110189c:	01604534 	movhi	r5,33044
811018a0:	29523604 	addi	r5,r5,18648
811018a4:	1009883a 	mov	r4,r2
811018a8:	11135480 	call	81113548 <fprintf>
811018ac:	d0a07317 	ldw	r2,-32308(gp)
#endif
	iTimeStart = alt_nticks();
811018b0:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
811018b4:	e0bfe517 	ldw	r2,-108(fp)
811018b8:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
811018bc:	00810004 	movi	r2,1024
811018c0:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
811018c4:	e0ffe817 	ldw	r3,-96(fp)
811018c8:	e0bfee17 	ldw	r2,-72(fp)
811018cc:	1885283a 	div	r2,r3,r2
811018d0:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
811018d4:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
811018d8:	00003a06 	br	811019c4 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
811018dc:	e0bfeb17 	ldw	r2,-84(fp)
811018e0:	e0ffe617 	ldw	r3,-104(fp)
811018e4:	1885c83a 	sub	r2,r3,r2
811018e8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
811018ec:	e0bfe817 	ldw	r2,-96(fp)
811018f0:	e0fff217 	ldw	r3,-56(fp)
811018f4:	1880060e 	bge	r3,r2,81101910 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
811018f8:	e0bff217 	ldw	r2,-56(fp)
811018fc:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101900:	e0ffe817 	ldw	r3,-96(fp)
81101904:	e0bfee17 	ldw	r2,-72(fp)
81101908:	1885283a 	div	r2,r3,r2
8110190c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101910:	e0bfe817 	ldw	r2,-96(fp)
81101914:	100d883a 	mov	r6,r2
81101918:	01604534 	movhi	r5,33044
8110191c:	29527604 	addi	r5,r5,18904
81101920:	e13fe917 	ldw	r4,-92(fp)
81101924:	11145f80 	call	811145f8 <memcpy>
		pxDes += iNItemNum;
81101928:	e0bfea17 	ldw	r2,-88(fp)
8110192c:	1085883a 	add	r2,r2,r2
81101930:	1085883a 	add	r2,r2,r2
81101934:	1007883a 	mov	r3,r2
81101938:	e0bfe917 	ldw	r2,-92(fp)
8110193c:	10c5883a 	add	r2,r2,r3
81101940:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101944:	e0ffeb17 	ldw	r3,-84(fp)
81101948:	e0bfe817 	ldw	r2,-96(fp)
8110194c:	1885883a 	add	r2,r3,r2
81101950:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101954:	e0bfec17 	ldw	r2,-80(fp)
81101958:	10800288 	cmpgei	r2,r2,10
8110195c:	1000191e 	bne	r2,zero,811019c4 <bDdr2MemoryWriteTest+0x434>
81101960:	e0bfec17 	ldw	r2,-80(fp)
81101964:	1085883a 	add	r2,r2,r2
81101968:	1085883a 	add	r2,r2,r2
8110196c:	e0ffe504 	addi	r3,fp,-108
81101970:	1885883a 	add	r2,r3,r2
81101974:	10800e04 	addi	r2,r2,56
81101978:	10800017 	ldw	r2,0(r2)
8110197c:	e0ffeb17 	ldw	r3,-84(fp)
81101980:	18801036 	bltu	r3,r2,811019c4 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101984:	e0bfec17 	ldw	r2,-80(fp)
81101988:	10800044 	addi	r2,r2,1
8110198c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101990:	e0bfec17 	ldw	r2,-80(fp)
81101994:	108002a4 	muli	r2,r2,10
81101998:	100d883a 	mov	r6,r2
8110199c:	01604534 	movhi	r5,33044
811019a0:	297ace04 	addi	r5,r5,-5320
811019a4:	01204534 	movhi	r4,33044
811019a8:	21123604 	addi	r4,r4,18648
811019ac:	1114ef80 	call	81114ef8 <sprintf>
			debug(fp, cDebugBuffer);
811019b0:	d0a05017 	ldw	r2,-32448(gp)
811019b4:	01604534 	movhi	r5,33044
811019b8:	29523604 	addi	r5,r5,18648
811019bc:	1009883a 	mov	r4,r2
811019c0:	11135480 	call	81113548 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
811019c4:	e0ffeb17 	ldw	r3,-84(fp)
811019c8:	e0bfe617 	ldw	r2,-104(fp)
811019cc:	18bfc336 	bltu	r3,r2,811018dc <__reset+0xfb0e18dc>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
811019d0:	11290180 	call	81129018 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811019d4:	00a04534 	movhi	r2,33044
811019d8:	10923604 	addi	r2,r2,18648
811019dc:	00c00284 	movi	r3,10
811019e0:	10c00005 	stb	r3,0(r2)
811019e4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811019e8:	d0a05017 	ldw	r2,-32448(gp)
811019ec:	01604534 	movhi	r5,33044
811019f0:	29523604 	addi	r5,r5,18648
811019f4:	1009883a 	mov	r4,r2
811019f8:	11135480 	call	81113548 <fprintf>
811019fc:	d0e07317 	ldw	r3,-32308(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101a00:	e0bff117 	ldw	r2,-60(fp)
81101a04:	1885c83a 	sub	r2,r3,r2
81101a08:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101a0c:	e0bfed17 	ldw	r2,-76(fp)
81101a10:	10001e26 	beq	r2,zero,81101a8c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101a14:	e13fef17 	ldw	r4,-68(fp)
81101a18:	11127840 	call	81112784 <__floatsisf>
81101a1c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101a20:	d0a07217 	ldw	r2,-32312(gp)
81101a24:	1009883a 	mov	r4,r2
81101a28:	11128b00 	call	811128b0 <__floatunsisf>
81101a2c:	1007883a 	mov	r3,r2
81101a30:	180b883a 	mov	r5,r3
81101a34:	8009883a 	mov	r4,r16
81101a38:	1111f380 	call	81111f38 <__divsf3>
81101a3c:	1007883a 	mov	r3,r2
81101a40:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101a44:	1009883a 	mov	r4,r2
81101a48:	11130c80 	call	811130c8 <__extendsfdf2>
81101a4c:	1009883a 	mov	r4,r2
81101a50:	180b883a 	mov	r5,r3
81101a54:	d9400015 	stw	r5,0(sp)
81101a58:	200f883a 	mov	r7,r4
81101a5c:	e1bfe617 	ldw	r6,-104(fp)
81101a60:	01604534 	movhi	r5,33044
81101a64:	297ad004 	addi	r5,r5,-5312
81101a68:	01204534 	movhi	r4,33044
81101a6c:	21123604 	addi	r4,r4,18648
81101a70:	1114ef80 	call	81114ef8 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a74:	d0a05017 	ldw	r2,-32448(gp)
81101a78:	01604534 	movhi	r5,33044
81101a7c:	29523604 	addi	r5,r5,18648
81101a80:	1009883a 	mov	r4,r2
81101a84:	11135480 	call	81113548 <fprintf>
81101a88:	00000f06 	br	81101ac8 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a8c:	00e04534 	movhi	r3,33044
81101a90:	18d23604 	addi	r3,r3,18648
81101a94:	00a04534 	movhi	r2,33044
81101a98:	10badc04 	addi	r2,r2,-5264
81101a9c:	1009883a 	mov	r4,r2
81101aa0:	00800584 	movi	r2,22
81101aa4:	100d883a 	mov	r6,r2
81101aa8:	200b883a 	mov	r5,r4
81101aac:	1809883a 	mov	r4,r3
81101ab0:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
81101ab4:	d0a05017 	ldw	r2,-32448(gp)
81101ab8:	01604534 	movhi	r5,33044
81101abc:	29523604 	addi	r5,r5,18648
81101ac0:	1009883a 	mov	r4,r2
81101ac4:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ac8:	00a04534 	movhi	r2,33044
81101acc:	10923604 	addi	r2,r2,18648
81101ad0:	00c00284 	movi	r3,10
81101ad4:	10c00005 	stb	r3,0(r2)
81101ad8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101adc:	d0a05017 	ldw	r2,-32448(gp)
81101ae0:	01604534 	movhi	r5,33044
81101ae4:	29523604 	addi	r5,r5,18648
81101ae8:	1009883a 	mov	r4,r2
81101aec:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
81101af0:	e0bfed17 	ldw	r2,-76(fp)
}
81101af4:	e6fffe04 	addi	sp,fp,-8
81101af8:	dfc00317 	ldw	ra,12(sp)
81101afc:	df000217 	ldw	fp,8(sp)
81101b00:	dc400117 	ldw	r17,4(sp)
81101b04:	dc000017 	ldw	r16,0(sp)
81101b08:	dec00404 	addi	sp,sp,16
81101b0c:	f800283a 	ret

81101b10 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101b10:	deffe204 	addi	sp,sp,-120
81101b14:	de00012e 	bgeu	sp,et,81101b1c <bDdr2MemoryReadTest+0xc>
81101b18:	003b68fa 	trap	3
81101b1c:	dfc01d15 	stw	ra,116(sp)
81101b20:	df001c15 	stw	fp,112(sp)
81101b24:	dc401b15 	stw	r17,108(sp)
81101b28:	dc001a15 	stw	r16,104(sp)
81101b2c:	df001c04 	addi	fp,sp,112
81101b30:	2005883a 	mov	r2,r4
81101b34:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101b38:	00e04534 	movhi	r3,33044
81101b3c:	18d23604 	addi	r3,r3,18648
81101b40:	00a04534 	movhi	r2,33044
81101b44:	10bae204 	addi	r2,r2,-5240
81101b48:	1009883a 	mov	r4,r2
81101b4c:	008009c4 	movi	r2,39
81101b50:	100d883a 	mov	r6,r2
81101b54:	200b883a 	mov	r5,r4
81101b58:	1809883a 	mov	r4,r3
81101b5c:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81101b60:	d0a05017 	ldw	r2,-32448(gp)
81101b64:	01604534 	movhi	r5,33044
81101b68:	29523604 	addi	r5,r5,18648
81101b6c:	1009883a 	mov	r4,r2
81101b70:	11135480 	call	81113548 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b7c:	e0bffd03 	ldbu	r2,-12(fp)
81101b80:	10c00060 	cmpeqi	r3,r2,1
81101b84:	1800031e 	bne	r3,zero,81101b94 <bDdr2MemoryReadTest+0x84>
81101b88:	108000a0 	cmpeqi	r2,r2,2
81101b8c:	1000081e 	bne	r2,zero,81101bb0 <bDdr2MemoryReadTest+0xa0>
81101b90:	00000e06 	br	81101bcc <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b94:	e0bffd03 	ldbu	r2,-12(fp)
81101b98:	1009883a 	mov	r4,r2
81101b9c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101ba0:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101ba4:	00a00034 	movhi	r2,32768
81101ba8:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bac:	00001906 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101bb0:	e0bffd03 	ldbu	r2,-12(fp)
81101bb4:	1009883a 	mov	r4,r2
81101bb8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101bbc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101bc0:	00a00034 	movhi	r2,32768
81101bc4:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bc8:	00001206 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101bcc:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101bd0:	00e04534 	movhi	r3,33044
81101bd4:	18d23604 	addi	r3,r3,18648
81101bd8:	00a04534 	movhi	r2,33044
81101bdc:	10b8ca04 	addi	r2,r2,-7384
81101be0:	1009883a 	mov	r4,r2
81101be4:	00800bc4 	movi	r2,47
81101be8:	100d883a 	mov	r6,r2
81101bec:	200b883a 	mov	r5,r4
81101bf0:	1809883a 	mov	r4,r3
81101bf4:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101bf8:	d0a05017 	ldw	r2,-32448(gp)
81101bfc:	01604534 	movhi	r5,33044
81101c00:	29523604 	addi	r5,r5,18648
81101c04:	1009883a 	mov	r4,r2
81101c08:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
81101c0c:	e0bfe517 	ldw	r2,-108(fp)
81101c10:	0000fc06 	br	81102004 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101c14:	e0bfe717 	ldw	r2,-100(fp)
81101c18:	1004d53a 	srli	r2,r2,20
81101c1c:	100d883a 	mov	r6,r2
81101c20:	01604534 	movhi	r5,33044
81101c24:	297aec04 	addi	r5,r5,-5200
81101c28:	01204534 	movhi	r4,33044
81101c2c:	21123604 	addi	r4,r4,18648
81101c30:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81101c34:	d0a05017 	ldw	r2,-32448(gp)
81101c38:	01604534 	movhi	r5,33044
81101c3c:	29523604 	addi	r5,r5,18648
81101c40:	1009883a 	mov	r4,r2
81101c44:	11135480 	call	81113548 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101c48:	00804004 	movi	r2,256
81101c4c:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101c50:	00800104 	movi	r2,4
81101c54:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101c58:	e0ffec17 	ldw	r3,-80(fp)
81101c5c:	e0bfef17 	ldw	r2,-68(fp)
81101c60:	1885383a 	mul	r2,r3,r2
81101c64:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101c6c:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c70:	e03fe815 	stw	zero,-96(fp)
81101c74:	00001506 	br	81101ccc <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c78:	e0ffe717 	ldw	r3,-100(fp)
81101c7c:	00b33374 	movhi	r2,52429
81101c80:	10b33344 	addi	r2,r2,-13107
81101c84:	1888383a 	mulxuu	r4,r3,r2
81101c88:	1885383a 	mul	r2,r3,r2
81101c8c:	1021883a 	mov	r16,r2
81101c90:	2023883a 	mov	r17,r4
81101c94:	8804d0fa 	srli	r2,r17,3
81101c98:	e0ffe817 	ldw	r3,-96(fp)
81101c9c:	18c00044 	addi	r3,r3,1
81101ca0:	10c7383a 	mul	r3,r2,r3
81101ca4:	e0bfe817 	ldw	r2,-96(fp)
81101ca8:	1085883a 	add	r2,r2,r2
81101cac:	1085883a 	add	r2,r2,r2
81101cb0:	e13fe504 	addi	r4,fp,-108
81101cb4:	2085883a 	add	r2,r4,r2
81101cb8:	10800e04 	addi	r2,r2,56
81101cbc:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101cc0:	e0bfe817 	ldw	r2,-96(fp)
81101cc4:	10800044 	addi	r2,r2,1
81101cc8:	e0bfe815 	stw	r2,-96(fp)
81101ccc:	e0bfe817 	ldw	r2,-96(fp)
81101cd0:	10800290 	cmplti	r2,r2,10
81101cd4:	103fe81e 	bne	r2,zero,81101c78 <__reset+0xfb0e1c78>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101cd8:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101cdc:	00e04534 	movhi	r3,33044
81101ce0:	18d23604 	addi	r3,r3,18648
81101ce4:	00a04534 	movhi	r2,33044
81101ce8:	10baf204 	addi	r2,r2,-5176
81101cec:	1009883a 	mov	r4,r2
81101cf0:	008006c4 	movi	r2,27
81101cf4:	100d883a 	mov	r6,r2
81101cf8:	200b883a 	mov	r5,r4
81101cfc:	1809883a 	mov	r4,r3
81101d00:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81101d04:	d0a05017 	ldw	r2,-32448(gp)
81101d08:	01604534 	movhi	r5,33044
81101d0c:	29523604 	addi	r5,r5,18648
81101d10:	1009883a 	mov	r4,r2
81101d14:	11135480 	call	81113548 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101d18:	d0a07317 	ldw	r2,-32308(gp)
#endif
	iTimeStart = alt_nticks();
81101d1c:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101d20:	e0bfe617 	ldw	r2,-104(fp)
81101d24:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101d28:	00810004 	movi	r2,1024
81101d2c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101d30:	e0ffe917 	ldw	r3,-92(fp)
81101d34:	e0bfef17 	ldw	r2,-68(fp)
81101d38:	1885283a 	div	r2,r3,r2
81101d3c:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101d40:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101d44:	00006206 	br	81101ed0 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101d48:	e0bfed17 	ldw	r2,-76(fp)
81101d4c:	e0ffe717 	ldw	r3,-100(fp)
81101d50:	1885c83a 	sub	r2,r3,r2
81101d54:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101d58:	e0bfe917 	ldw	r2,-92(fp)
81101d5c:	e0fff217 	ldw	r3,-56(fp)
81101d60:	1880060e 	bge	r3,r2,81101d7c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101d64:	e0bff217 	ldw	r2,-56(fp)
81101d68:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101d6c:	e0ffe917 	ldw	r3,-92(fp)
81101d70:	e0bfef17 	ldw	r2,-68(fp)
81101d74:	1885283a 	div	r2,r3,r2
81101d78:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d7c:	00a04534 	movhi	r2,33044
81101d80:	10927604 	addi	r2,r2,18904
81101d84:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d88:	e03fe815 	stw	zero,-96(fp)
81101d8c:	00002b06 	br	81101e3c <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d90:	e0bfeb17 	ldw	r2,-84(fp)
81101d94:	10c00104 	addi	r3,r2,4
81101d98:	e0ffeb15 	stw	r3,-84(fp)
81101d9c:	10c00017 	ldw	r3,0(r2)
81101da0:	e0bfea17 	ldw	r2,-88(fp)
81101da4:	11000104 	addi	r4,r2,4
81101da8:	e13fea15 	stw	r4,-88(fp)
81101dac:	10800017 	ldw	r2,0(r2)
81101db0:	18801f26 	beq	r3,r2,81101e30 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101db4:	e0bfeb17 	ldw	r2,-84(fp)
81101db8:	10bfff04 	addi	r2,r2,-4
81101dbc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101dc0:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101dc4:	00a04534 	movhi	r2,33044
81101dc8:	10927604 	addi	r2,r2,18904
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	18c7883a 	add	r3,r3,r3
81101dd4:	18c7883a 	add	r3,r3,r3
81101dd8:	10c5883a 	add	r2,r2,r3
81101ddc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101de0:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101de4:	e0ffed17 	ldw	r3,-76(fp)
81101de8:	e0bfef17 	ldw	r2,-68(fp)
81101dec:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101df0:	e0bfe817 	ldw	r2,-96(fp)
81101df4:	1885883a 	add	r2,r3,r2
81101df8:	d8800015 	stw	r2,0(sp)
81101dfc:	280f883a 	mov	r7,r5
81101e00:	200d883a 	mov	r6,r4
81101e04:	01604534 	movhi	r5,33044
81101e08:	297af904 	addi	r5,r5,-5148
81101e0c:	01204534 	movhi	r4,33044
81101e10:	21123604 	addi	r4,r4,18648
81101e14:	1114ef80 	call	81114ef8 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101e18:	d0a05017 	ldw	r2,-32448(gp)
81101e1c:	01604534 	movhi	r5,33044
81101e20:	29523604 	addi	r5,r5,18648
81101e24:	1009883a 	mov	r4,r2
81101e28:	11135480 	call	81113548 <fprintf>
#endif
				bSuccess = FALSE;
81101e2c:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101e30:	e0bfe817 	ldw	r2,-96(fp)
81101e34:	10800044 	addi	r2,r2,1
81101e38:	e0bfe815 	stw	r2,-96(fp)
81101e3c:	e0ffe817 	ldw	r3,-96(fp)
81101e40:	e0bfec17 	ldw	r2,-80(fp)
81101e44:	1880020e 	bge	r3,r2,81101e50 <bDdr2MemoryReadTest+0x340>
81101e48:	e0bfe517 	ldw	r2,-108(fp)
81101e4c:	103fd01e 	bne	r2,zero,81101d90 <__reset+0xfb0e1d90>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101e50:	e0ffed17 	ldw	r3,-76(fp)
81101e54:	e0bfe917 	ldw	r2,-92(fp)
81101e58:	1885883a 	add	r2,r3,r2
81101e5c:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101e60:	e0bfee17 	ldw	r2,-72(fp)
81101e64:	10800288 	cmpgei	r2,r2,10
81101e68:	1000191e 	bne	r2,zero,81101ed0 <bDdr2MemoryReadTest+0x3c0>
81101e6c:	e0bfee17 	ldw	r2,-72(fp)
81101e70:	1085883a 	add	r2,r2,r2
81101e74:	1085883a 	add	r2,r2,r2
81101e78:	e0ffe504 	addi	r3,fp,-108
81101e7c:	1885883a 	add	r2,r3,r2
81101e80:	10800e04 	addi	r2,r2,56
81101e84:	10800017 	ldw	r2,0(r2)
81101e88:	e0ffed17 	ldw	r3,-76(fp)
81101e8c:	18801036 	bltu	r3,r2,81101ed0 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e90:	e0bfee17 	ldw	r2,-72(fp)
81101e94:	10800044 	addi	r2,r2,1
81101e98:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e9c:	e0bfee17 	ldw	r2,-72(fp)
81101ea0:	108002a4 	muli	r2,r2,10
81101ea4:	100d883a 	mov	r6,r2
81101ea8:	01604534 	movhi	r5,33044
81101eac:	297ace04 	addi	r5,r5,-5320
81101eb0:	01204534 	movhi	r4,33044
81101eb4:	21123604 	addi	r4,r4,18648
81101eb8:	1114ef80 	call	81114ef8 <sprintf>
			debug(fp, cDebugBuffer);
81101ebc:	d0a05017 	ldw	r2,-32448(gp)
81101ec0:	01604534 	movhi	r5,33044
81101ec4:	29523604 	addi	r5,r5,18648
81101ec8:	1009883a 	mov	r4,r2
81101ecc:	11135480 	call	81113548 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101ed0:	e0bfe517 	ldw	r2,-108(fp)
81101ed4:	10000326 	beq	r2,zero,81101ee4 <bDdr2MemoryReadTest+0x3d4>
81101ed8:	e0ffed17 	ldw	r3,-76(fp)
81101edc:	e0bfe717 	ldw	r2,-100(fp)
81101ee0:	18bf9936 	bltu	r3,r2,81101d48 <__reset+0xfb0e1d48>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ee4:	00a04534 	movhi	r2,33044
81101ee8:	10923604 	addi	r2,r2,18648
81101eec:	00c00284 	movi	r3,10
81101ef0:	10c00005 	stb	r3,0(r2)
81101ef4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101ef8:	d0a05017 	ldw	r2,-32448(gp)
81101efc:	01604534 	movhi	r5,33044
81101f00:	29523604 	addi	r5,r5,18648
81101f04:	1009883a 	mov	r4,r2
81101f08:	11135480 	call	81113548 <fprintf>
81101f0c:	d0e07317 	ldw	r3,-32308(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101f10:	e0bff117 	ldw	r2,-60(fp)
81101f14:	1885c83a 	sub	r2,r3,r2
81101f18:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101f1c:	e0bfe517 	ldw	r2,-108(fp)
81101f20:	10001e26 	beq	r2,zero,81101f9c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101f24:	e13ff017 	ldw	r4,-64(fp)
81101f28:	11127840 	call	81112784 <__floatsisf>
81101f2c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101f30:	d0a07217 	ldw	r2,-32312(gp)
81101f34:	1009883a 	mov	r4,r2
81101f38:	11128b00 	call	811128b0 <__floatunsisf>
81101f3c:	1007883a 	mov	r3,r2
81101f40:	180b883a 	mov	r5,r3
81101f44:	8009883a 	mov	r4,r16
81101f48:	1111f380 	call	81111f38 <__divsf3>
81101f4c:	1007883a 	mov	r3,r2
81101f50:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101f54:	1009883a 	mov	r4,r2
81101f58:	11130c80 	call	811130c8 <__extendsfdf2>
81101f5c:	1009883a 	mov	r4,r2
81101f60:	180b883a 	mov	r5,r3
81101f64:	d9400015 	stw	r5,0(sp)
81101f68:	200f883a 	mov	r7,r4
81101f6c:	e1bfe717 	ldw	r6,-100(fp)
81101f70:	01604534 	movhi	r5,33044
81101f74:	297b0704 	addi	r5,r5,-5092
81101f78:	01204534 	movhi	r4,33044
81101f7c:	21123604 	addi	r4,r4,18648
81101f80:	1114ef80 	call	81114ef8 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f84:	d0a05017 	ldw	r2,-32448(gp)
81101f88:	01604534 	movhi	r5,33044
81101f8c:	29523604 	addi	r5,r5,18648
81101f90:	1009883a 	mov	r4,r2
81101f94:	11135480 	call	81113548 <fprintf>
81101f98:	00000f06 	br	81101fd8 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f9c:	00e04534 	movhi	r3,33044
81101fa0:	18d23604 	addi	r3,r3,18648
81101fa4:	00a04534 	movhi	r2,33044
81101fa8:	10bb1304 	addi	r2,r2,-5044
81101fac:	1009883a 	mov	r4,r2
81101fb0:	00800544 	movi	r2,21
81101fb4:	100d883a 	mov	r6,r2
81101fb8:	200b883a 	mov	r5,r4
81101fbc:	1809883a 	mov	r4,r3
81101fc0:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
81101fc4:	d0a05017 	ldw	r2,-32448(gp)
81101fc8:	01604534 	movhi	r5,33044
81101fcc:	29523604 	addi	r5,r5,18648
81101fd0:	1009883a 	mov	r4,r2
81101fd4:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101fd8:	00a04534 	movhi	r2,33044
81101fdc:	10923604 	addi	r2,r2,18648
81101fe0:	00c00284 	movi	r3,10
81101fe4:	10c00005 	stb	r3,0(r2)
81101fe8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101fec:	d0a05017 	ldw	r2,-32448(gp)
81101ff0:	01604534 	movhi	r5,33044
81101ff4:	29523604 	addi	r5,r5,18648
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
81102000:	e0bfe517 	ldw	r2,-108(fp)
}
81102004:	e6fffe04 	addi	sp,fp,-8
81102008:	dfc00317 	ldw	ra,12(sp)
8110200c:	df000217 	ldw	fp,8(sp)
81102010:	dc400117 	ldw	r17,4(sp)
81102014:	dc000017 	ldw	r16,0(sp)
81102018:	dec00404 	addi	sp,sp,16
8110201c:	f800283a 	ret

81102020 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102020:	deffec04 	addi	sp,sp,-80
81102024:	de00012e 	bgeu	sp,et,8110202c <bDdr2MemoryRandomWriteTest+0xc>
81102028:	003b68fa 	trap	3
8110202c:	dfc01315 	stw	ra,76(sp)
81102030:	df001215 	stw	fp,72(sp)
81102034:	dcc01115 	stw	r19,68(sp)
81102038:	dc801015 	stw	r18,64(sp)
8110203c:	dc400f15 	stw	r17,60(sp)
81102040:	dc000e15 	stw	r16,56(sp)
81102044:	df001204 	addi	fp,sp,72
81102048:	2005883a 	mov	r2,r4
8110204c:	e17ffa15 	stw	r5,-24(fp)
81102050:	e1bffb15 	stw	r6,-20(fp)
81102054:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81102058:	00e04534 	movhi	r3,33044
8110205c:	18d23604 	addi	r3,r3,18648
81102060:	00a04534 	movhi	r2,33044
81102064:	10bb1904 	addi	r2,r2,-5020
81102068:	1009883a 	mov	r4,r2
8110206c:	00800bc4 	movi	r2,47
81102070:	100d883a 	mov	r6,r2
81102074:	200b883a 	mov	r5,r4
81102078:	1809883a 	mov	r4,r3
8110207c:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81102080:	d0a05017 	ldw	r2,-32448(gp)
81102084:	01604534 	movhi	r5,33044
81102088:	29523604 	addi	r5,r5,18648
8110208c:	1009883a 	mov	r4,r2
81102090:	11135480 	call	81113548 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102094:	00800044 	movi	r2,1
81102098:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110209c:	e0bff903 	ldbu	r2,-28(fp)
811020a0:	10c00060 	cmpeqi	r3,r2,1
811020a4:	1800031e 	bne	r3,zero,811020b4 <bDdr2MemoryRandomWriteTest+0x94>
811020a8:	108000a0 	cmpeqi	r2,r2,2
811020ac:	1000081e 	bne	r2,zero,811020d0 <bDdr2MemoryRandomWriteTest+0xb0>
811020b0:	00000e06 	br	811020ec <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020b4:	e0bff903 	ldbu	r2,-28(fp)
811020b8:	1009883a 	mov	r4,r2
811020bc:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020c0:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811020c4:	00a00034 	movhi	r2,32768
811020c8:	e0bff015 	stw	r2,-64(fp)
		break;
811020cc:	00001906 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020d0:	e0bff903 	ldbu	r2,-28(fp)
811020d4:	1009883a 	mov	r4,r2
811020d8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020dc:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811020e0:	00a00034 	movhi	r2,32768
811020e4:	e0bff015 	stw	r2,-64(fp)
		break;
811020e8:	00001206 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
811020ec:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811020f0:	00e04534 	movhi	r3,33044
811020f4:	18d23604 	addi	r3,r3,18648
811020f8:	00a04534 	movhi	r2,33044
811020fc:	10b8ca04 	addi	r2,r2,-7384
81102100:	1009883a 	mov	r4,r2
81102104:	00800bc4 	movi	r2,47
81102108:	100d883a 	mov	r6,r2
8110210c:	200b883a 	mov	r5,r4
81102110:	1809883a 	mov	r4,r3
81102114:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102118:	d0a05017 	ldw	r2,-32448(gp)
8110211c:	01604534 	movhi	r5,33044
81102120:	29523604 	addi	r5,r5,18648
81102124:	1009883a 	mov	r4,r2
81102128:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
8110212c:	e0bff417 	ldw	r2,-48(fp)
81102130:	0000ce06 	br	8110246c <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102134:	e0bff017 	ldw	r2,-64(fp)
81102138:	1004d53a 	srli	r2,r2,20
8110213c:	100d883a 	mov	r6,r2
81102140:	01604534 	movhi	r5,33044
81102144:	297ac304 	addi	r5,r5,-5364
81102148:	01204534 	movhi	r4,33044
8110214c:	21123604 	addi	r4,r4,18648
81102150:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81102154:	d0a05017 	ldw	r2,-32448(gp)
81102158:	01604534 	movhi	r5,33044
8110215c:	29523604 	addi	r5,r5,18648
81102160:	1009883a 	mov	r4,r2
81102164:	11135480 	call	81113548 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102168:	d0a07317 	ldw	r2,-32308(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
8110216c:	d0a03715 	stw	r2,-32548(gp)
	uliCurrentState = uliInitialState;
81102170:	d0a03717 	ldw	r2,-32548(gp)
81102174:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102178:	e0ffef17 	ldw	r3,-68(fp)
8110217c:	e0bff017 	ldw	r2,-64(fp)
81102180:	1885883a 	add	r2,r3,r2
81102184:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102188:	e0fff017 	ldw	r3,-64(fp)
8110218c:	00b33374 	movhi	r2,52429
81102190:	10b33344 	addi	r2,r2,-13107
81102194:	1888383a 	mulxuu	r4,r3,r2
81102198:	1885383a 	mul	r2,r3,r2
8110219c:	1025883a 	mov	r18,r2
811021a0:	2027883a 	mov	r19,r4
811021a4:	9806d13a 	srli	r3,r19,4
811021a8:	e0bfef17 	ldw	r2,-68(fp)
811021ac:	1885883a 	add	r2,r3,r2
811021b0:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811021b4:	00800144 	movi	r2,5
811021b8:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
811021bc:	00e04534 	movhi	r3,33044
811021c0:	18d23604 	addi	r3,r3,18648
811021c4:	00a04534 	movhi	r2,33044
811021c8:	10bb2504 	addi	r2,r2,-4972
811021cc:	1009883a 	mov	r4,r2
811021d0:	00800584 	movi	r2,22
811021d4:	100d883a 	mov	r6,r2
811021d8:	200b883a 	mov	r5,r4
811021dc:	1809883a 	mov	r4,r3
811021e0:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
811021e4:	d0a05017 	ldw	r2,-32448(gp)
811021e8:	01604534 	movhi	r5,33044
811021ec:	29523604 	addi	r5,r5,18648
811021f0:	1009883a 	mov	r4,r2
811021f4:	11135480 	call	81113548 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811021f8:	e0bffa17 	ldw	r2,-24(fp)
811021fc:	10800058 	cmpnei	r2,r2,1
81102200:	10000a1e 	bne	r2,zero,8110222c <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102204:	01604534 	movhi	r5,33044
81102208:	297b2b04 	addi	r5,r5,-4948
8110220c:	01204534 	movhi	r4,33044
81102210:	21123604 	addi	r4,r4,18648
81102214:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, cDebugBuffer);
81102218:	d0a05017 	ldw	r2,-32448(gp)
8110221c:	01604534 	movhi	r5,33044
81102220:	29523604 	addi	r5,r5,18648
81102224:	1009883a 	mov	r4,r2
81102228:	11135480 	call	81113548 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
8110222c:	e03ff615 	stw	zero,-40(fp)
81102230:	d0a07317 	ldw	r2,-32308(gp)

	TimeStart = alt_nticks();
81102234:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102238:	e0bfef17 	ldw	r2,-68(fp)
8110223c:	e0bff115 	stw	r2,-60(fp)
81102240:	00002c06 	br	811022f4 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102244:	e0bff804 	addi	r2,fp,-32
81102248:	1009883a 	mov	r4,r2
8110224c:	110292c0 	call	8110292c <uliXorshift32>
81102250:	1007883a 	mov	r3,r2
81102254:	e0bff117 	ldw	r2,-60(fp)
81102258:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
8110225c:	e0bffa17 	ldw	r2,-24(fp)
81102260:	10800060 	cmpeqi	r2,r2,1
81102264:	1009883a 	mov	r4,r2
81102268:	e0bff117 	ldw	r2,-60(fp)
8110226c:	e0fff217 	ldw	r3,-56(fp)
81102270:	1885803a 	cmpltu	r2,r3,r2
81102274:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102278:	10803fcc 	andi	r2,r2,255
8110227c:	10001a26 	beq	r2,zero,811022e8 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102280:	e0bff303 	ldbu	r2,-52(fp)
81102284:	100d883a 	mov	r6,r2
81102288:	01604534 	movhi	r5,33044
8110228c:	297b2d04 	addi	r5,r5,-4940
81102290:	01204534 	movhi	r4,33044
81102294:	21123604 	addi	r4,r4,18648
81102298:	1114ef80 	call	81114ef8 <sprintf>
			debug(fp, cDebugBuffer);
8110229c:	d0a05017 	ldw	r2,-32448(gp)
811022a0:	01604534 	movhi	r5,33044
811022a4:	29523604 	addi	r5,r5,18648
811022a8:	1009883a 	mov	r4,r2
811022ac:	11135480 	call	81113548 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811022b0:	e0fff017 	ldw	r3,-64(fp)
811022b4:	00b33374 	movhi	r2,52429
811022b8:	10b33344 	addi	r2,r2,-13107
811022bc:	1888383a 	mulxuu	r4,r3,r2
811022c0:	1885383a 	mul	r2,r3,r2
811022c4:	1021883a 	mov	r16,r2
811022c8:	2023883a 	mov	r17,r4
811022cc:	8804d13a 	srli	r2,r17,4
811022d0:	e0fff217 	ldw	r3,-56(fp)
811022d4:	1885883a 	add	r2,r3,r2
811022d8:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
811022dc:	e0bff303 	ldbu	r2,-52(fp)
811022e0:	10800144 	addi	r2,r2,5
811022e4:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
811022e8:	e0bff117 	ldw	r2,-60(fp)
811022ec:	10800104 	addi	r2,r2,4
811022f0:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
811022f4:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
811022f8:	e0bff517 	ldw	r2,-44(fp)
811022fc:	18bfd136 	bltu	r3,r2,81102244 <__reset+0xfb0e2244>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102300:	11290180 	call	81129018 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102304:	e0bffa17 	ldw	r2,-24(fp)
81102308:	10800058 	cmpnei	r2,r2,1
8110230c:	10000a1e 	bne	r2,zero,81102338 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
81102310:	01604534 	movhi	r5,33044
81102314:	297b3004 	addi	r5,r5,-4928
81102318:	01204534 	movhi	r4,33044
8110231c:	21123604 	addi	r4,r4,18648
81102320:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, cDebugBuffer);
81102324:	d0a05017 	ldw	r2,-32448(gp)
81102328:	01604534 	movhi	r5,33044
8110232c:	29523604 	addi	r5,r5,18648
81102330:	1009883a 	mov	r4,r2
81102334:	11135480 	call	81113548 <fprintf>
#endif
	}

	if (bSuccess) {
81102338:	e0bff417 	ldw	r2,-48(fp)
8110233c:	10003126 	beq	r2,zero,81102404 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
81102340:	e0bffb17 	ldw	r2,-20(fp)
81102344:	10800058 	cmpnei	r2,r2,1
81102348:	1000221e 	bne	r2,zero,811023d4 <bDdr2MemoryRandomWriteTest+0x3b4>
8110234c:	d0e07317 	ldw	r3,-32308(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102350:	e0bff717 	ldw	r2,-36(fp)
81102354:	1885c83a 	sub	r2,r3,r2
81102358:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
8110235c:	e13ff617 	ldw	r4,-40(fp)
81102360:	11127840 	call	81112784 <__floatsisf>
81102364:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102368:	d0a07217 	ldw	r2,-32312(gp)
8110236c:	1009883a 	mov	r4,r2
81102370:	11128b00 	call	811128b0 <__floatunsisf>
81102374:	1007883a 	mov	r3,r2
81102378:	180b883a 	mov	r5,r3
8110237c:	8009883a 	mov	r4,r16
81102380:	1111f380 	call	81111f38 <__divsf3>
81102384:	1007883a 	mov	r3,r2
81102388:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110238c:	1009883a 	mov	r4,r2
81102390:	11130c80 	call	811130c8 <__extendsfdf2>
81102394:	1009883a 	mov	r4,r2
81102398:	180b883a 	mov	r5,r3
8110239c:	d9400015 	stw	r5,0(sp)
811023a0:	200f883a 	mov	r7,r4
811023a4:	e1bff017 	ldw	r6,-64(fp)
811023a8:	01604534 	movhi	r5,33044
811023ac:	297b3304 	addi	r5,r5,-4916
811023b0:	01204534 	movhi	r4,33044
811023b4:	21123604 	addi	r4,r4,18648
811023b8:	1114ef80 	call	81114ef8 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811023bc:	d0a05017 	ldw	r2,-32448(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	29523604 	addi	r5,r5,18648
811023c8:	1009883a 	mov	r4,r2
811023cc:	11135480 	call	81113548 <fprintf>
811023d0:	00001b06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
811023d4:	e1bff017 	ldw	r6,-64(fp)
811023d8:	01604534 	movhi	r5,33044
811023dc:	297b3f04 	addi	r5,r5,-4868
811023e0:	01204534 	movhi	r4,33044
811023e4:	21123604 	addi	r4,r4,18648
811023e8:	1114ef80 	call	81114ef8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811023ec:	d0a05017 	ldw	r2,-32448(gp)
811023f0:	01604534 	movhi	r5,33044
811023f4:	29523604 	addi	r5,r5,18648
811023f8:	1009883a 	mov	r4,r2
811023fc:	11135480 	call	81113548 <fprintf>
81102400:	00000f06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102404:	00e04534 	movhi	r3,33044
81102408:	18d23604 	addi	r3,r3,18648
8110240c:	00a04534 	movhi	r2,33044
81102410:	10badc04 	addi	r2,r2,-5264
81102414:	1009883a 	mov	r4,r2
81102418:	00800584 	movi	r2,22
8110241c:	100d883a 	mov	r6,r2
81102420:	200b883a 	mov	r5,r4
81102424:	1809883a 	mov	r4,r3
81102428:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
8110242c:	d0a05017 	ldw	r2,-32448(gp)
81102430:	01604534 	movhi	r5,33044
81102434:	29523604 	addi	r5,r5,18648
81102438:	1009883a 	mov	r4,r2
8110243c:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102440:	00a04534 	movhi	r2,33044
81102444:	10923604 	addi	r2,r2,18648
81102448:	00c00284 	movi	r3,10
8110244c:	10c00005 	stb	r3,0(r2)
81102450:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102454:	d0a05017 	ldw	r2,-32448(gp)
81102458:	01604534 	movhi	r5,33044
8110245c:	29523604 	addi	r5,r5,18648
81102460:	1009883a 	mov	r4,r2
81102464:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
81102468:	e0bff417 	ldw	r2,-48(fp)
}
8110246c:	e6fffc04 	addi	sp,fp,-16
81102470:	dfc00517 	ldw	ra,20(sp)
81102474:	df000417 	ldw	fp,16(sp)
81102478:	dcc00317 	ldw	r19,12(sp)
8110247c:	dc800217 	ldw	r18,8(sp)
81102480:	dc400117 	ldw	r17,4(sp)
81102484:	dc000017 	ldw	r16,0(sp)
81102488:	dec00604 	addi	sp,sp,24
8110248c:	f800283a 	ret

81102490 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102490:	deffec04 	addi	sp,sp,-80
81102494:	de00012e 	bgeu	sp,et,8110249c <bDdr2MemoryRandomReadTest+0xc>
81102498:	003b68fa 	trap	3
8110249c:	dfc01315 	stw	ra,76(sp)
811024a0:	df001215 	stw	fp,72(sp)
811024a4:	dcc01115 	stw	r19,68(sp)
811024a8:	dc801015 	stw	r18,64(sp)
811024ac:	dc400f15 	stw	r17,60(sp)
811024b0:	dc000e15 	stw	r16,56(sp)
811024b4:	df001204 	addi	fp,sp,72
811024b8:	2005883a 	mov	r2,r4
811024bc:	e17ffa15 	stw	r5,-24(fp)
811024c0:	e1bffb15 	stw	r6,-20(fp)
811024c4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
811024c8:	00e04534 	movhi	r3,33044
811024cc:	18d23604 	addi	r3,r3,18648
811024d0:	00a04534 	movhi	r2,33044
811024d4:	10bb4904 	addi	r2,r2,-4828
811024d8:	1009883a 	mov	r4,r2
811024dc:	00800b84 	movi	r2,46
811024e0:	100d883a 	mov	r6,r2
811024e4:	200b883a 	mov	r5,r4
811024e8:	1809883a 	mov	r4,r3
811024ec:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
811024f0:	d0a05017 	ldw	r2,-32448(gp)
811024f4:	01604534 	movhi	r5,33044
811024f8:	29523604 	addi	r5,r5,18648
811024fc:	1009883a 	mov	r4,r2
81102500:	11135480 	call	81113548 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102504:	00800044 	movi	r2,1
81102508:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110250c:	e0bff903 	ldbu	r2,-28(fp)
81102510:	10c00060 	cmpeqi	r3,r2,1
81102514:	1800031e 	bne	r3,zero,81102524 <bDdr2MemoryRandomReadTest+0x94>
81102518:	108000a0 	cmpeqi	r2,r2,2
8110251c:	1000081e 	bne	r2,zero,81102540 <bDdr2MemoryRandomReadTest+0xb0>
81102520:	00000e06 	br	8110255c <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102524:	e0bff903 	ldbu	r2,-28(fp)
81102528:	1009883a 	mov	r4,r2
8110252c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102530:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102534:	00a00034 	movhi	r2,32768
81102538:	e0bff115 	stw	r2,-60(fp)
		break;
8110253c:	00001906 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102540:	e0bff903 	ldbu	r2,-28(fp)
81102544:	1009883a 	mov	r4,r2
81102548:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110254c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102550:	00a00034 	movhi	r2,32768
81102554:	e0bff115 	stw	r2,-60(fp)
		break;
81102558:	00001206 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
8110255c:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102560:	00e04534 	movhi	r3,33044
81102564:	18d23604 	addi	r3,r3,18648
81102568:	00a04534 	movhi	r2,33044
8110256c:	10b8ca04 	addi	r2,r2,-7384
81102570:	1009883a 	mov	r4,r2
81102574:	00800bc4 	movi	r2,47
81102578:	100d883a 	mov	r6,r2
8110257c:	200b883a 	mov	r5,r4
81102580:	1809883a 	mov	r4,r3
81102584:	11145f80 	call	811145f8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102588:	d0a05017 	ldw	r2,-32448(gp)
8110258c:	01604534 	movhi	r5,33044
81102590:	29523604 	addi	r5,r5,18648
81102594:	1009883a 	mov	r4,r2
81102598:	11135480 	call	81113548 <fprintf>
		;
#endif
		return bSuccess;
8110259c:	e0bfef17 	ldw	r2,-68(fp)
811025a0:	0000d906 	br	81102908 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811025a4:	e0bff117 	ldw	r2,-60(fp)
811025a8:	1004d53a 	srli	r2,r2,20
811025ac:	100d883a 	mov	r6,r2
811025b0:	01604534 	movhi	r5,33044
811025b4:	297ac304 	addi	r5,r5,-5364
811025b8:	01204534 	movhi	r4,33044
811025bc:	21123604 	addi	r4,r4,18648
811025c0:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
811025c4:	d0a05017 	ldw	r2,-32448(gp)
811025c8:	01604534 	movhi	r5,33044
811025cc:	29523604 	addi	r5,r5,18648
811025d0:	1009883a 	mov	r4,r2
811025d4:	11135480 	call	81113548 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
811025d8:	d0a03717 	ldw	r2,-32548(gp)
811025dc:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811025e0:	e0fff017 	ldw	r3,-64(fp)
811025e4:	e0bff117 	ldw	r2,-60(fp)
811025e8:	1885883a 	add	r2,r3,r2
811025ec:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811025f0:	e0fff117 	ldw	r3,-60(fp)
811025f4:	00b33374 	movhi	r2,52429
811025f8:	10b33344 	addi	r2,r2,-13107
811025fc:	1888383a 	mulxuu	r4,r3,r2
81102600:	1885383a 	mul	r2,r3,r2
81102604:	1025883a 	mov	r18,r2
81102608:	2027883a 	mov	r19,r4
8110260c:	9806d13a 	srli	r3,r19,4
81102610:	e0bff017 	ldw	r2,-64(fp)
81102614:	1885883a 	add	r2,r3,r2
81102618:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
8110261c:	00800144 	movi	r2,5
81102620:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102624:	00e04534 	movhi	r3,33044
81102628:	18d23604 	addi	r3,r3,18648
8110262c:	00a04534 	movhi	r2,33044
81102630:	10bb5504 	addi	r2,r2,-4780
81102634:	1009883a 	mov	r4,r2
81102638:	00800604 	movi	r2,24
8110263c:	100d883a 	mov	r6,r2
81102640:	200b883a 	mov	r5,r4
81102644:	1809883a 	mov	r4,r3
81102648:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
8110264c:	d0a05017 	ldw	r2,-32448(gp)
81102650:	01604534 	movhi	r5,33044
81102654:	29523604 	addi	r5,r5,18648
81102658:	1009883a 	mov	r4,r2
8110265c:	11135480 	call	81113548 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102660:	e0bffa17 	ldw	r2,-24(fp)
81102664:	10800058 	cmpnei	r2,r2,1
81102668:	10000a1e 	bne	r2,zero,81102694 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
8110266c:	01604534 	movhi	r5,33044
81102670:	297b2b04 	addi	r5,r5,-4948
81102674:	01204534 	movhi	r4,33044
81102678:	21123604 	addi	r4,r4,18648
8110267c:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, cDebugBuffer);
81102680:	d0a05017 	ldw	r2,-32448(gp)
81102684:	01604534 	movhi	r5,33044
81102688:	29523604 	addi	r5,r5,18648
8110268c:	1009883a 	mov	r4,r2
81102690:	11135480 	call	81113548 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102694:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102698:	d0a07317 	ldw	r2,-32308(gp)

	TimeStart = alt_nticks();
8110269c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811026a0:	e0bff017 	ldw	r2,-64(fp)
811026a4:	e0bff215 	stw	r2,-56(fp)
811026a8:	00003a06 	br	81102794 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811026ac:	e0bff804 	addi	r2,fp,-32
811026b0:	1009883a 	mov	r4,r2
811026b4:	110292c0 	call	8110292c <uliXorshift32>
811026b8:	1007883a 	mov	r3,r2
811026bc:	e0bff217 	ldw	r2,-56(fp)
811026c0:	10800017 	ldw	r2,0(r2)
811026c4:	18801026 	beq	r3,r2,81102708 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
811026c8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811026cc:	e0bffa17 	ldw	r2,-24(fp)
811026d0:	10800058 	cmpnei	r2,r2,1
811026d4:	10000c1e 	bne	r2,zero,81102708 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
811026d8:	e0bff217 	ldw	r2,-56(fp)
811026dc:	100d883a 	mov	r6,r2
811026e0:	01604534 	movhi	r5,33044
811026e4:	297b5b04 	addi	r5,r5,-4756
811026e8:	01204534 	movhi	r4,33044
811026ec:	21123604 	addi	r4,r4,18648
811026f0:	1114ef80 	call	81114ef8 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
811026f4:	d0a05017 	ldw	r2,-32448(gp)
811026f8:	01604534 	movhi	r5,33044
811026fc:	29523604 	addi	r5,r5,18648
81102700:	1009883a 	mov	r4,r2
81102704:	11135480 	call	81113548 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102708:	e0bffa17 	ldw	r2,-24(fp)
8110270c:	10800058 	cmpnei	r2,r2,1
81102710:	10001d1e 	bne	r2,zero,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102714:	e0bff217 	ldw	r2,-56(fp)
81102718:	e0fff317 	ldw	r3,-52(fp)
8110271c:	18801a2e 	bgeu	r3,r2,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102720:	e0bff403 	ldbu	r2,-48(fp)
81102724:	100d883a 	mov	r6,r2
81102728:	01604534 	movhi	r5,33044
8110272c:	297b2d04 	addi	r5,r5,-4940
81102730:	01204534 	movhi	r4,33044
81102734:	21123604 	addi	r4,r4,18648
81102738:	1114ef80 	call	81114ef8 <sprintf>
			debug(fp, cDebugBuffer);
8110273c:	d0a05017 	ldw	r2,-32448(gp)
81102740:	01604534 	movhi	r5,33044
81102744:	29523604 	addi	r5,r5,18648
81102748:	1009883a 	mov	r4,r2
8110274c:	11135480 	call	81113548 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102750:	e0fff117 	ldw	r3,-60(fp)
81102754:	00b33374 	movhi	r2,52429
81102758:	10b33344 	addi	r2,r2,-13107
8110275c:	1888383a 	mulxuu	r4,r3,r2
81102760:	1885383a 	mul	r2,r3,r2
81102764:	1021883a 	mov	r16,r2
81102768:	2023883a 	mov	r17,r4
8110276c:	8804d13a 	srli	r2,r17,4
81102770:	e0fff317 	ldw	r3,-52(fp)
81102774:	1885883a 	add	r2,r3,r2
81102778:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110277c:	e0bff403 	ldbu	r2,-48(fp)
81102780:	10800144 	addi	r2,r2,5
81102784:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102788:	e0bff217 	ldw	r2,-56(fp)
8110278c:	10800104 	addi	r2,r2,4
81102790:	e0bff215 	stw	r2,-56(fp)
81102794:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102798:	e0bff517 	ldw	r2,-44(fp)
8110279c:	18bfc336 	bltu	r3,r2,811026ac <__reset+0xfb0e26ac>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811027a0:	e0bffa17 	ldw	r2,-24(fp)
811027a4:	10800058 	cmpnei	r2,r2,1
811027a8:	10000a1e 	bne	r2,zero,811027d4 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811027ac:	01604534 	movhi	r5,33044
811027b0:	297b3004 	addi	r5,r5,-4928
811027b4:	01204534 	movhi	r4,33044
811027b8:	21123604 	addi	r4,r4,18648
811027bc:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, cDebugBuffer);
811027c0:	d0a05017 	ldw	r2,-32448(gp)
811027c4:	01604534 	movhi	r5,33044
811027c8:	29523604 	addi	r5,r5,18648
811027cc:	1009883a 	mov	r4,r2
811027d0:	11135480 	call	81113548 <fprintf>
#endif
	}

	if (bSuccess) {
811027d4:	e0bfef17 	ldw	r2,-68(fp)
811027d8:	10003126 	beq	r2,zero,811028a0 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
811027dc:	e0bffb17 	ldw	r2,-20(fp)
811027e0:	10800058 	cmpnei	r2,r2,1
811027e4:	1000221e 	bne	r2,zero,81102870 <bDdr2MemoryRandomReadTest+0x3e0>
811027e8:	d0e07317 	ldw	r3,-32308(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811027ec:	e0bff717 	ldw	r2,-36(fp)
811027f0:	1885c83a 	sub	r2,r3,r2
811027f4:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811027f8:	e13ff617 	ldw	r4,-40(fp)
811027fc:	11127840 	call	81112784 <__floatsisf>
81102800:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102804:	d0a07217 	ldw	r2,-32312(gp)
81102808:	1009883a 	mov	r4,r2
8110280c:	11128b00 	call	811128b0 <__floatunsisf>
81102810:	1007883a 	mov	r3,r2
81102814:	180b883a 	mov	r5,r3
81102818:	8009883a 	mov	r4,r16
8110281c:	1111f380 	call	81111f38 <__divsf3>
81102820:	1007883a 	mov	r3,r2
81102824:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102828:	1009883a 	mov	r4,r2
8110282c:	11130c80 	call	811130c8 <__extendsfdf2>
81102830:	1009883a 	mov	r4,r2
81102834:	180b883a 	mov	r5,r3
81102838:	d9400015 	stw	r5,0(sp)
8110283c:	200f883a 	mov	r7,r4
81102840:	e1bff117 	ldw	r6,-60(fp)
81102844:	01604534 	movhi	r5,33044
81102848:	297b6304 	addi	r5,r5,-4724
8110284c:	01204534 	movhi	r4,33044
81102850:	21123604 	addi	r4,r4,18648
81102854:	1114ef80 	call	81114ef8 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102858:	d0a05017 	ldw	r2,-32448(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	29523604 	addi	r5,r5,18648
81102864:	1009883a 	mov	r4,r2
81102868:	11135480 	call	81113548 <fprintf>
8110286c:	00001b06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102870:	e1bff117 	ldw	r6,-60(fp)
81102874:	01604534 	movhi	r5,33044
81102878:	297b6f04 	addi	r5,r5,-4676
8110287c:	01204534 	movhi	r4,33044
81102880:	21123604 	addi	r4,r4,18648
81102884:	1114ef80 	call	81114ef8 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102888:	d0a05017 	ldw	r2,-32448(gp)
8110288c:	01604534 	movhi	r5,33044
81102890:	29523604 	addi	r5,r5,18648
81102894:	1009883a 	mov	r4,r2
81102898:	11135480 	call	81113548 <fprintf>
8110289c:	00000f06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811028a0:	00e04534 	movhi	r3,33044
811028a4:	18d23604 	addi	r3,r3,18648
811028a8:	00a04534 	movhi	r2,33044
811028ac:	10bb1304 	addi	r2,r2,-5044
811028b0:	1009883a 	mov	r4,r2
811028b4:	00800544 	movi	r2,21
811028b8:	100d883a 	mov	r6,r2
811028bc:	200b883a 	mov	r5,r4
811028c0:	1809883a 	mov	r4,r3
811028c4:	11145f80 	call	811145f8 <memcpy>
		debug(fp, cDebugBuffer);
811028c8:	d0a05017 	ldw	r2,-32448(gp)
811028cc:	01604534 	movhi	r5,33044
811028d0:	29523604 	addi	r5,r5,18648
811028d4:	1009883a 	mov	r4,r2
811028d8:	11135480 	call	81113548 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811028dc:	00a04534 	movhi	r2,33044
811028e0:	10923604 	addi	r2,r2,18648
811028e4:	00c00284 	movi	r3,10
811028e8:	10c00005 	stb	r3,0(r2)
811028ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811028f0:	d0a05017 	ldw	r2,-32448(gp)
811028f4:	01604534 	movhi	r5,33044
811028f8:	29523604 	addi	r5,r5,18648
811028fc:	1009883a 	mov	r4,r2
81102900:	11135480 	call	81113548 <fprintf>
#endif

	return bSuccess;
81102904:	e0bfef17 	ldw	r2,-68(fp)
}
81102908:	e6fffc04 	addi	sp,fp,-16
8110290c:	dfc00517 	ldw	ra,20(sp)
81102910:	df000417 	ldw	fp,16(sp)
81102914:	dcc00317 	ldw	r19,12(sp)
81102918:	dc800217 	ldw	r18,8(sp)
8110291c:	dc400117 	ldw	r17,4(sp)
81102920:	dc000017 	ldw	r16,0(sp)
81102924:	dec00604 	addi	sp,sp,24
81102928:	f800283a 	ret

8110292c <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
8110292c:	defffd04 	addi	sp,sp,-12
81102930:	de00012e 	bgeu	sp,et,81102938 <uliXorshift32+0xc>
81102934:	003b68fa 	trap	3
81102938:	df000215 	stw	fp,8(sp)
8110293c:	df000204 	addi	fp,sp,8
81102940:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81102944:	e0bfff17 	ldw	r2,-4(fp)
81102948:	10800017 	ldw	r2,0(r2)
8110294c:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102950:	e0bffe17 	ldw	r2,-8(fp)
81102954:	1004937a 	slli	r2,r2,13
81102958:	e0fffe17 	ldw	r3,-8(fp)
8110295c:	1884f03a 	xor	r2,r3,r2
81102960:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81102964:	e0bffe17 	ldw	r2,-8(fp)
81102968:	1004d47a 	srli	r2,r2,17
8110296c:	e0fffe17 	ldw	r3,-8(fp)
81102970:	1884f03a 	xor	r2,r3,r2
81102974:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	1004917a 	slli	r2,r2,5
81102980:	e0fffe17 	ldw	r3,-8(fp)
81102984:	1884f03a 	xor	r2,r3,r2
81102988:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110298c:	e0bfff17 	ldw	r2,-4(fp)
81102990:	e0fffe17 	ldw	r3,-8(fp)
81102994:	10c00015 	stw	r3,0(r2)

	return uliX;
81102998:	e0bffe17 	ldw	r2,-8(fp)
}
8110299c:	e037883a 	mov	sp,fp
811029a0:	df000017 	ldw	fp,0(sp)
811029a4:	dec00104 	addi	sp,sp,4
811029a8:	f800283a 	ret

811029ac <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811029ac:	defffb04 	addi	sp,sp,-20
811029b0:	de00012e 	bgeu	sp,et,811029b8 <DMA_OPEN_DEVICE+0xc>
811029b4:	003b68fa 	trap	3
811029b8:	dfc00415 	stw	ra,16(sp)
811029bc:	df000315 	stw	fp,12(sp)
811029c0:	df000304 	addi	fp,sp,12
811029c4:	e13ffe15 	stw	r4,-8(fp)
811029c8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029cc:	00800044 	movi	r2,1
811029d0:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811029d4:	e13fff17 	ldw	r4,-4(fp)
811029d8:	113c99c0 	call	8113c99c <alt_msgdma_open>
811029dc:	1007883a 	mov	r3,r2
811029e0:	e0bffe17 	ldw	r2,-8(fp)
811029e4:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811029e8:	e0bffe17 	ldw	r2,-8(fp)
811029ec:	10800017 	ldw	r2,0(r2)
811029f0:	1000011e 	bne	r2,zero,811029f8 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
811029f4:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
811029f8:	e0bffd17 	ldw	r2,-12(fp)
}
811029fc:	e037883a 	mov	sp,fp
81102a00:	dfc00117 	ldw	ra,4(sp)
81102a04:	df000017 	ldw	fp,0(sp)
81102a08:	dec00204 	addi	sp,sp,8
81102a0c:	f800283a 	ret

81102a10 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81102a10:	defffc04 	addi	sp,sp,-16
81102a14:	de00012e 	bgeu	sp,et,81102a1c <DMA_CONFIG+0xc>
81102a18:	003b68fa 	trap	3
81102a1c:	df000315 	stw	fp,12(sp)
81102a20:	df000304 	addi	fp,sp,12
81102a24:	e13ffe15 	stw	r4,-8(fp)
81102a28:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102a2c:	00800044 	movi	r2,1
81102a30:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81102a34:	e0bffe17 	ldw	r2,-8(fp)
81102a38:	10800317 	ldw	r2,12(r2)
81102a3c:	10800104 	addi	r2,r2,4
81102a40:	e0ffff17 	ldw	r3,-4(fp)
81102a44:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81102a48:	e0bffd17 	ldw	r2,-12(fp)
}
81102a4c:	e037883a 	mov	sp,fp
81102a50:	df000017 	ldw	fp,0(sp)
81102a54:	dec00104 	addi	sp,sp,4
81102a58:	f800283a 	ret

81102a5c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81102a5c:	defffd04 	addi	sp,sp,-12
81102a60:	de00012e 	bgeu	sp,et,81102a68 <DMA_BUSY+0xc>
81102a64:	003b68fa 	trap	3
81102a68:	df000215 	stw	fp,8(sp)
81102a6c:	df000204 	addi	fp,sp,8
81102a70:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a74:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a78:	e0bfff17 	ldw	r2,-4(fp)
81102a7c:	10800317 	ldw	r2,12(r2)
81102a80:	10800037 	ldwio	r2,0(r2)
81102a84:	1080004c 	andi	r2,r2,1
81102a88:	10000226 	beq	r2,zero,81102a94 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a8c:	00800044 	movi	r2,1
81102a90:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a94:	e0bffe17 	ldw	r2,-8(fp)
}
81102a98:	e037883a 	mov	sp,fp
81102a9c:	df000017 	ldw	fp,0(sp)
81102aa0:	dec00104 	addi	sp,sp,4
81102aa4:	f800283a 	ret

81102aa8 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102aa8:	defffd04 	addi	sp,sp,-12
81102aac:	de00012e 	bgeu	sp,et,81102ab4 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102ab0:	003b68fa 	trap	3
81102ab4:	df000215 	stw	fp,8(sp)
81102ab8:	df000204 	addi	fp,sp,8
81102abc:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102ac0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102ac4:	e0bfff17 	ldw	r2,-4(fp)
81102ac8:	10800317 	ldw	r2,12(r2)
81102acc:	10800037 	ldwio	r2,0(r2)
81102ad0:	1080010c 	andi	r2,r2,4
81102ad4:	10000226 	beq	r2,zero,81102ae0 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102ad8:	00800044 	movi	r2,1
81102adc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102ae0:	e0bffe17 	ldw	r2,-8(fp)
}
81102ae4:	e037883a 	mov	sp,fp
81102ae8:	df000017 	ldw	fp,0(sp)
81102aec:	dec00104 	addi	sp,sp,4
81102af0:	f800283a 	ret

81102af4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102af4:	defffd04 	addi	sp,sp,-12
81102af8:	de00012e 	bgeu	sp,et,81102b00 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102afc:	003b68fa 	trap	3
81102b00:	df000215 	stw	fp,8(sp)
81102b04:	df000204 	addi	fp,sp,8
81102b08:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102b0c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102b10:	e0bfff17 	ldw	r2,-4(fp)
81102b14:	10800317 	ldw	r2,12(r2)
81102b18:	10800037 	ldwio	r2,0(r2)
81102b1c:	1080008c 	andi	r2,r2,2
81102b20:	10000226 	beq	r2,zero,81102b2c <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102b24:	00800044 	movi	r2,1
81102b28:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102b2c:	e0bffe17 	ldw	r2,-8(fp)
}
81102b30:	e037883a 	mov	sp,fp
81102b34:	df000017 	ldw	fp,0(sp)
81102b38:	dec00104 	addi	sp,sp,4
81102b3c:	f800283a 	ret

81102b40 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b40:	defffa04 	addi	sp,sp,-24
81102b44:	de00012e 	bgeu	sp,et,81102b4c <DMA_DISPATCHER_STOP+0xc>
81102b48:	003b68fa 	trap	3
81102b4c:	dfc00515 	stw	ra,20(sp)
81102b50:	df000415 	stw	fp,16(sp)
81102b54:	df000404 	addi	fp,sp,16
81102b58:	e13ffd15 	stw	r4,-12(fp)
81102b5c:	e17ffe15 	stw	r5,-8(fp)
81102b60:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b64:	00800044 	movi	r2,1
81102b68:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102b6c:	e0bffd17 	ldw	r2,-12(fp)
81102b70:	10800317 	ldw	r2,12(r2)
81102b74:	10800104 	addi	r2,r2,4
81102b78:	00c00044 	movi	r3,1
81102b7c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b80:	e0bffe17 	ldw	r2,-8(fp)
81102b84:	10800058 	cmpnei	r2,r2,1
81102b88:	10000e1e 	bne	r2,zero,81102bc4 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b8c:	00000706 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b90:	e0bfff17 	ldw	r2,-4(fp)
81102b94:	1000031e 	bne	r2,zero,81102ba4 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b98:	01000044 	movi	r4,1
81102b9c:	112a8800 	call	8112a880 <usleep>
81102ba0:	00000206 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102ba4:	e13fff17 	ldw	r4,-4(fp)
81102ba8:	112a8800 	call	8112a880 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102bac:	e0bffd17 	ldw	r2,-12(fp)
81102bb0:	10800317 	ldw	r2,12(r2)
81102bb4:	10800037 	ldwio	r2,0(r2)
81102bb8:	1080080c 	andi	r2,r2,32
81102bbc:	103ff41e 	bne	r2,zero,81102b90 <__reset+0xfb0e2b90>
81102bc0:	00000206 	br	81102bcc <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bc4:	e0bffc17 	ldw	r2,-16(fp)
81102bc8:	00000106 	br	81102bd0 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102bcc:	e0bffc17 	ldw	r2,-16(fp)
}
81102bd0:	e037883a 	mov	sp,fp
81102bd4:	dfc00117 	ldw	ra,4(sp)
81102bd8:	df000017 	ldw	fp,0(sp)
81102bdc:	dec00204 	addi	sp,sp,8
81102be0:	f800283a 	ret

81102be4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102be4:	defffa04 	addi	sp,sp,-24
81102be8:	de00012e 	bgeu	sp,et,81102bf0 <DMA_DISPATCHER_RESET+0xc>
81102bec:	003b68fa 	trap	3
81102bf0:	dfc00515 	stw	ra,20(sp)
81102bf4:	df000415 	stw	fp,16(sp)
81102bf8:	df000404 	addi	fp,sp,16
81102bfc:	e13ffd15 	stw	r4,-12(fp)
81102c00:	e17ffe15 	stw	r5,-8(fp)
81102c04:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102c08:	00800044 	movi	r2,1
81102c0c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102c10:	e0bffd17 	ldw	r2,-12(fp)
81102c14:	10800317 	ldw	r2,12(r2)
81102c18:	10800104 	addi	r2,r2,4
81102c1c:	00c00084 	movi	r3,2
81102c20:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102c24:	e0bffe17 	ldw	r2,-8(fp)
81102c28:	10800058 	cmpnei	r2,r2,1
81102c2c:	10000e1e 	bne	r2,zero,81102c68 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c30:	00000706 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102c34:	e0bfff17 	ldw	r2,-4(fp)
81102c38:	1000031e 	bne	r2,zero,81102c48 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102c3c:	01000044 	movi	r4,1
81102c40:	112a8800 	call	8112a880 <usleep>
81102c44:	00000206 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102c48:	e13fff17 	ldw	r4,-4(fp)
81102c4c:	112a8800 	call	8112a880 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c50:	e0bffd17 	ldw	r2,-12(fp)
81102c54:	10800317 	ldw	r2,12(r2)
81102c58:	10800037 	ldwio	r2,0(r2)
81102c5c:	1080100c 	andi	r2,r2,64
81102c60:	103ff41e 	bne	r2,zero,81102c34 <__reset+0xfb0e2c34>
81102c64:	00000206 	br	81102c70 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102c68:	e0bffc17 	ldw	r2,-16(fp)
81102c6c:	00000106 	br	81102c74 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c70:	e0bffc17 	ldw	r2,-16(fp)
}
81102c74:	e037883a 	mov	sp,fp
81102c78:	dfc00117 	ldw	ra,4(sp)
81102c7c:	df000017 	ldw	fp,0(sp)
81102c80:	dec00204 	addi	sp,sp,8
81102c84:	f800283a 	ret

81102c88 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c88:	defff604 	addi	sp,sp,-40
81102c8c:	de00012e 	bgeu	sp,et,81102c94 <DMA_SINGLE_TRANSFER+0xc>
81102c90:	003b68fa 	trap	3
81102c94:	dfc00915 	stw	ra,36(sp)
81102c98:	df000815 	stw	fp,32(sp)
81102c9c:	dc000715 	stw	r16,28(sp)
81102ca0:	df000804 	addi	fp,sp,32
81102ca4:	e13ffb15 	stw	r4,-20(fp)
81102ca8:	e17ffc15 	stw	r5,-16(fp)
81102cac:	e1bffd15 	stw	r6,-12(fp)
81102cb0:	e1fffe15 	stw	r7,-8(fp)
81102cb4:	defff804 	addi	sp,sp,-32
81102cb8:	d8800204 	addi	r2,sp,8
81102cbc:	108003c4 	addi	r2,r2,15
81102cc0:	1004d13a 	srli	r2,r2,4
81102cc4:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102cc8:	00800044 	movi	r2,1
81102ccc:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102cd0:	e0fffc17 	ldw	r3,-16(fp)
81102cd4:	e13ffd17 	ldw	r4,-12(fp)
81102cd8:	e0800217 	ldw	r2,8(fp)
81102cdc:	d8800115 	stw	r2,4(sp)
81102ce0:	e0bffe17 	ldw	r2,-8(fp)
81102ce4:	d8800015 	stw	r2,0(sp)
81102ce8:	200f883a 	mov	r7,r4
81102cec:	180d883a 	mov	r6,r3
81102cf0:	800b883a 	mov	r5,r16
81102cf4:	e13ffb17 	ldw	r4,-20(fp)
81102cf8:	113b9980 	call	8113b998 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102cfc:	10000326 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102d00:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102d04:	e0bffa17 	ldw	r2,-24(fp)
81102d08:	00001d06 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102d0c:	800b883a 	mov	r5,r16
81102d10:	e13ffb17 	ldw	r4,-20(fp)
81102d14:	113cc0c0 	call	8113cc0c <alt_msgdma_standard_descriptor_async_transfer>
81102d18:	10000326 	beq	r2,zero,81102d28 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102d1c:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102d20:	e0bffa17 	ldw	r2,-24(fp)
81102d24:	00001606 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102d28:	e0bffa17 	ldw	r2,-24(fp)
81102d2c:	10800060 	cmpeqi	r2,r2,1
81102d30:	1007883a 	mov	r3,r2
81102d34:	e0800317 	ldw	r2,12(fp)
81102d38:	10800060 	cmpeqi	r2,r2,1
81102d3c:	1884703a 	and	r2,r3,r2
81102d40:	10803fcc 	andi	r2,r2,255
81102d44:	10000d26 	beq	r2,zero,81102d7c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d48:	00000706 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102d4c:	e0800417 	ldw	r2,16(fp)
81102d50:	1000031e 	bne	r2,zero,81102d60 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102d54:	0100fa04 	movi	r4,1000
81102d58:	112a8800 	call	8112a880 <usleep>
81102d5c:	00000206 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102d60:	e1000417 	ldw	r4,16(fp)
81102d64:	112a8800 	call	8112a880 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d68:	e0bffb17 	ldw	r2,-20(fp)
81102d6c:	10800317 	ldw	r2,12(r2)
81102d70:	10800037 	ldwio	r2,0(r2)
81102d74:	1080004c 	andi	r2,r2,1
81102d78:	103ff41e 	bne	r2,zero,81102d4c <__reset+0xfb0e2d4c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d7c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d80:	e6ffff04 	addi	sp,fp,-4
81102d84:	dfc00217 	ldw	ra,8(sp)
81102d88:	df000117 	ldw	fp,4(sp)
81102d8c:	dc000017 	ldw	r16,0(sp)
81102d90:	dec00304 	addi	sp,sp,12
81102d94:	f800283a 	ret

81102d98 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d98:	defff504 	addi	sp,sp,-44
81102d9c:	de00012e 	bgeu	sp,et,81102da4 <DMA_MULTIPLE_TRANSFER+0xc>
81102da0:	003b68fa 	trap	3
81102da4:	dfc00a15 	stw	ra,40(sp)
81102da8:	df000915 	stw	fp,36(sp)
81102dac:	dc000815 	stw	r16,32(sp)
81102db0:	df000904 	addi	fp,sp,36
81102db4:	e13ffb15 	stw	r4,-20(fp)
81102db8:	e17ffc15 	stw	r5,-16(fp)
81102dbc:	e1bffd15 	stw	r6,-12(fp)
81102dc0:	3805883a 	mov	r2,r7
81102dc4:	e0bffe05 	stb	r2,-8(fp)
81102dc8:	defff804 	addi	sp,sp,-32
81102dcc:	d8800204 	addi	r2,sp,8
81102dd0:	108003c4 	addi	r2,r2,15
81102dd4:	1004d13a 	srli	r2,r2,4
81102dd8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102ddc:	00800044 	movi	r2,1
81102de0:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102de4:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102de8:	00002506 	br	81102e80 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102dec:	e0bffa03 	ldbu	r2,-24(fp)
81102df0:	1085883a 	add	r2,r2,r2
81102df4:	1085883a 	add	r2,r2,r2
81102df8:	1007883a 	mov	r3,r2
81102dfc:	e0bffc17 	ldw	r2,-16(fp)
81102e00:	10c5883a 	add	r2,r2,r3
81102e04:	10800017 	ldw	r2,0(r2)
81102e08:	1009883a 	mov	r4,r2
81102e0c:	e0bffa03 	ldbu	r2,-24(fp)
81102e10:	1085883a 	add	r2,r2,r2
81102e14:	1085883a 	add	r2,r2,r2
81102e18:	1007883a 	mov	r3,r2
81102e1c:	e0bffd17 	ldw	r2,-12(fp)
81102e20:	10c5883a 	add	r2,r2,r3
81102e24:	10800017 	ldw	r2,0(r2)
81102e28:	1007883a 	mov	r3,r2
81102e2c:	e0800317 	ldw	r2,12(fp)
81102e30:	10804034 	orhi	r2,r2,256
81102e34:	d8800115 	stw	r2,4(sp)
81102e38:	e0800217 	ldw	r2,8(fp)
81102e3c:	d8800015 	stw	r2,0(sp)
81102e40:	180f883a 	mov	r7,r3
81102e44:	200d883a 	mov	r6,r4
81102e48:	800b883a 	mov	r5,r16
81102e4c:	e13ffb17 	ldw	r4,-20(fp)
81102e50:	113b9980 	call	8113b998 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102e54:	10000226 	beq	r2,zero,81102e60 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102e58:	e03ff915 	stw	zero,-28(fp)
81102e5c:	00000506 	br	81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102e60:	800b883a 	mov	r5,r16
81102e64:	e13ffb17 	ldw	r4,-20(fp)
81102e68:	113cc0c0 	call	8113cc0c <alt_msgdma_standard_descriptor_async_transfer>
81102e6c:	10000126 	beq	r2,zero,81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e70:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e74:	e0bffa03 	ldbu	r2,-24(fp)
81102e78:	10800044 	addi	r2,r2,1
81102e7c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e80:	e0bff917 	ldw	r2,-28(fp)
81102e84:	10800060 	cmpeqi	r2,r2,1
81102e88:	1009883a 	mov	r4,r2
81102e8c:	e0fffa03 	ldbu	r3,-24(fp)
81102e90:	e0bffe03 	ldbu	r2,-8(fp)
81102e94:	10bfffc4 	addi	r2,r2,-1
81102e98:	1884803a 	cmplt	r2,r3,r2
81102e9c:	2084703a 	and	r2,r4,r2
81102ea0:	10803fcc 	andi	r2,r2,255
81102ea4:	103fd11e 	bne	r2,zero,81102dec <__reset+0xfb0e2dec>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102ea8:	e0bff917 	ldw	r2,-28(fp)
81102eac:	10800058 	cmpnei	r2,r2,1
81102eb0:	1000211e 	bne	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102eb4:	e0bffa03 	ldbu	r2,-24(fp)
81102eb8:	1085883a 	add	r2,r2,r2
81102ebc:	1085883a 	add	r2,r2,r2
81102ec0:	1007883a 	mov	r3,r2
81102ec4:	e0bffc17 	ldw	r2,-16(fp)
81102ec8:	10c5883a 	add	r2,r2,r3
81102ecc:	10800017 	ldw	r2,0(r2)
81102ed0:	1009883a 	mov	r4,r2
81102ed4:	e0bffa03 	ldbu	r2,-24(fp)
81102ed8:	1085883a 	add	r2,r2,r2
81102edc:	1085883a 	add	r2,r2,r2
81102ee0:	1007883a 	mov	r3,r2
81102ee4:	e0bffd17 	ldw	r2,-12(fp)
81102ee8:	10c5883a 	add	r2,r2,r3
81102eec:	10800017 	ldw	r2,0(r2)
81102ef0:	1007883a 	mov	r3,r2
81102ef4:	e0800317 	ldw	r2,12(fp)
81102ef8:	d8800115 	stw	r2,4(sp)
81102efc:	e0800217 	ldw	r2,8(fp)
81102f00:	d8800015 	stw	r2,0(sp)
81102f04:	180f883a 	mov	r7,r3
81102f08:	200d883a 	mov	r6,r4
81102f0c:	800b883a 	mov	r5,r16
81102f10:	e13ffb17 	ldw	r4,-20(fp)
81102f14:	113b9980 	call	8113b998 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102f18:	10000226 	beq	r2,zero,81102f24 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102f1c:	e03ff915 	stw	zero,-28(fp)
81102f20:	00000506 	br	81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102f24:	800b883a 	mov	r5,r16
81102f28:	e13ffb17 	ldw	r4,-20(fp)
81102f2c:	113cc0c0 	call	8113cc0c <alt_msgdma_standard_descriptor_async_transfer>
81102f30:	10000126 	beq	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102f34:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102f38:	e0bff917 	ldw	r2,-28(fp)
81102f3c:	10800060 	cmpeqi	r2,r2,1
81102f40:	1007883a 	mov	r3,r2
81102f44:	e0800417 	ldw	r2,16(fp)
81102f48:	10800060 	cmpeqi	r2,r2,1
81102f4c:	1884703a 	and	r2,r3,r2
81102f50:	10803fcc 	andi	r2,r2,255
81102f54:	10000d26 	beq	r2,zero,81102f8c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f58:	00000706 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102f5c:	e0800517 	ldw	r2,20(fp)
81102f60:	1000031e 	bne	r2,zero,81102f70 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102f64:	0100fa04 	movi	r4,1000
81102f68:	112a8800 	call	8112a880 <usleep>
81102f6c:	00000206 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f70:	e1000517 	ldw	r4,20(fp)
81102f74:	112a8800 	call	8112a880 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f78:	e0bffb17 	ldw	r2,-20(fp)
81102f7c:	10800317 	ldw	r2,12(r2)
81102f80:	10800037 	ldwio	r2,0(r2)
81102f84:	1080004c 	andi	r2,r2,1
81102f88:	103ff41e 	bne	r2,zero,81102f5c <__reset+0xfb0e2f5c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f8c:	e0bff917 	ldw	r2,-28(fp)
}
81102f90:	e6ffff04 	addi	sp,fp,-4
81102f94:	dfc00217 	ldw	ra,8(sp)
81102f98:	df000117 	ldw	fp,4(sp)
81102f9c:	dc000017 	ldw	r16,0(sp)
81102fa0:	dec00304 	addi	sp,sp,12
81102fa4:	f800283a 	ret

81102fa8 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102fa8:	deffef04 	addi	sp,sp,-68
81102fac:	de00012e 	bgeu	sp,et,81102fb4 <POWER_Read+0xc>
81102fb0:	003b68fa 	trap	3
81102fb4:	dfc01015 	stw	ra,64(sp)
81102fb8:	df000f15 	stw	fp,60(sp)
81102fbc:	df000f04 	addi	fp,sp,60
81102fc0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102fc4:	00800044 	movi	r2,1
81102fc8:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102fcc:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102fd0:	00800204 	movi	r2,8
81102fd4:	e0bffc15 	stw	r2,-16(fp)
81102fd8:	00800104 	movi	r2,4
81102fdc:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102fe0:	00800044 	movi	r2,1
81102fe4:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102fe8:	00800044 	movi	r2,1
81102fec:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102ff0:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102ff4:	e03ff515 	stw	zero,-44(fp)
81102ff8:	00009206 	br	81103244 <POWER_Read+0x29c>
		NextChannel = 0;
81102ffc:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81103000:	e0bff517 	ldw	r2,-44(fp)
81103004:	10c03fcc 	andi	r3,r2,255
81103008:	e13ffa03 	ldbu	r4,-24(fp)
8110300c:	e0bfff17 	ldw	r2,-4(fp)
81103010:	d8800115 	stw	r2,4(sp)
81103014:	e0bff917 	ldw	r2,-28(fp)
81103018:	d8800015 	stw	r2,0(sp)
8110301c:	e1fff817 	ldw	r7,-32(fp)
81103020:	e1bff717 	ldw	r6,-36(fp)
81103024:	200b883a 	mov	r5,r4
81103028:	1809883a 	mov	r4,r3
8110302c:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103030:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103034:	e03ff415 	stw	zero,-48(fp)
81103038:	00007406 	br	8110320c <POWER_Read+0x264>
			NextChannel = i + 1;
8110303c:	e0bff417 	ldw	r2,-48(fp)
81103040:	10800044 	addi	r2,r2,1
81103044:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81103048:	e0bff517 	ldw	r2,-44(fp)
8110304c:	10c03fcc 	andi	r3,r2,255
81103050:	e13ffa03 	ldbu	r4,-24(fp)
81103054:	e0bffe04 	addi	r2,fp,-8
81103058:	d8800115 	stw	r2,4(sp)
8110305c:	e0bff917 	ldw	r2,-28(fp)
81103060:	d8800015 	stw	r2,0(sp)
81103064:	e1fff817 	ldw	r7,-32(fp)
81103068:	e1bff717 	ldw	r6,-36(fp)
8110306c:	200b883a 	mov	r5,r4
81103070:	1809883a 	mov	r4,r3
81103074:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103078:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110307c:	e0bff317 	ldw	r2,-52(fp)
81103080:	10005026 	beq	r2,zero,811031c4 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103084:	e0bffe17 	ldw	r2,-8(fp)
81103088:	1004d7ba 	srli	r2,r2,30
8110308c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103090:	e0bffe17 	ldw	r2,-8(fp)
81103094:	1004d07a 	srli	r2,r2,1
81103098:	108001cc 	andi	r2,r2,7
8110309c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811030a0:	e0bffe17 	ldw	r2,-8(fp)
811030a4:	1004d13a 	srli	r2,r2,4
811030a8:	1080004c 	andi	r2,r2,1
811030ac:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811030b0:	e0bffe17 	ldw	r2,-8(fp)
811030b4:	1004d17a 	srli	r2,r2,5
811030b8:	1080004c 	andi	r2,r2,1
811030bc:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811030c0:	e0bffe17 	ldw	r2,-8(fp)
811030c4:	1080004c 	andi	r2,r2,1
811030c8:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811030cc:	e0bffa43 	ldbu	r2,-23(fp)
811030d0:	10000d26 	beq	r2,zero,81103108 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
811030d4:	e1bff417 	ldw	r6,-48(fp)
811030d8:	01604534 	movhi	r5,33044
811030dc:	297b7904 	addi	r5,r5,-4636
811030e0:	01204534 	movhi	r4,33044
811030e4:	21123604 	addi	r4,r4,18648
811030e8:	1114ef80 	call	81114ef8 <sprintf>
					debug(fp, cDebugBuffer);
811030ec:	d0a05017 	ldw	r2,-32448(gp)
811030f0:	01604534 	movhi	r5,33044
811030f4:	29523604 	addi	r5,r5,18648
811030f8:	1009883a 	mov	r4,r2
811030fc:	11135480 	call	81113548 <fprintf>
#endif
					bSuccess = FALSE;
81103100:	e03ff315 	stw	zero,-52(fp)
81103104:	00002206 	br	81103190 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103108:	e0fffa83 	ldbu	r3,-22(fp)
8110310c:	e0bff417 	ldw	r2,-48(fp)
81103110:	18801026 	beq	r3,r2,81103154 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81103114:	e0bffa83 	ldbu	r2,-22(fp)
81103118:	d8800015 	stw	r2,0(sp)
8110311c:	e1fff417 	ldw	r7,-48(fp)
81103120:	e1bff417 	ldw	r6,-48(fp)
81103124:	01604534 	movhi	r5,33044
81103128:	297b7f04 	addi	r5,r5,-4612
8110312c:	01204534 	movhi	r4,33044
81103130:	21123604 	addi	r4,r4,18648
81103134:	1114ef80 	call	81114ef8 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81103138:	d0a05017 	ldw	r2,-32448(gp)
8110313c:	01604534 	movhi	r5,33044
81103140:	29523604 	addi	r5,r5,18648
81103144:	1009883a 	mov	r4,r2
81103148:	11135480 	call	81113548 <fprintf>
#endif
					bSuccess = FALSE;
8110314c:	e03ff315 	stw	zero,-52(fp)
81103150:	00000f06 	br	81103190 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
81103154:	e0fffac3 	ldbu	r3,-21(fp)
81103158:	e0bff817 	ldw	r2,-32(fp)
8110315c:	18800c26 	beq	r3,r2,81103190 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81103160:	e1bff417 	ldw	r6,-48(fp)
81103164:	01604534 	movhi	r5,33044
81103168:	297b8b04 	addi	r5,r5,-4564
8110316c:	01204534 	movhi	r4,33044
81103170:	21123604 	addi	r4,r4,18648
81103174:	1114ef80 	call	81114ef8 <sprintf>
					debug(fp, cDebugBuffer);
81103178:	d0a05017 	ldw	r2,-32448(gp)
8110317c:	01604534 	movhi	r5,33044
81103180:	29523604 	addi	r5,r5,18648
81103184:	1009883a 	mov	r4,r2
81103188:	11135480 	call	81113548 <fprintf>
#endif
					bSuccess = FALSE;
8110318c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103190:	e0bff317 	ldw	r2,-52(fp)
81103194:	10001a26 	beq	r2,zero,81103200 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103198:	e0bff617 	ldw	r2,-40(fp)
8110319c:	10c00044 	addi	r3,r2,1
811031a0:	e0fff615 	stw	r3,-40(fp)
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	1085883a 	add	r2,r2,r2
811031ac:	1007883a 	mov	r3,r2
811031b0:	e0bfff17 	ldw	r2,-4(fp)
811031b4:	10c5883a 	add	r2,r2,r3
811031b8:	e0fffe17 	ldw	r3,-8(fp)
811031bc:	10c00015 	stw	r3,0(r2)
811031c0:	00000f06 	br	81103200 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
811031c4:	00e04534 	movhi	r3,33044
811031c8:	18d23604 	addi	r3,r3,18648
811031cc:	00a04534 	movhi	r2,33044
811031d0:	10bb9104 	addi	r2,r2,-4540
811031d4:	1009883a 	mov	r4,r2
811031d8:	00800444 	movi	r2,17
811031dc:	100d883a 	mov	r6,r2
811031e0:	200b883a 	mov	r5,r4
811031e4:	1809883a 	mov	r4,r3
811031e8:	11145f80 	call	811145f8 <memcpy>
				debug(fp, cDebugBuffer);
811031ec:	d0a05017 	ldw	r2,-32448(gp)
811031f0:	01604534 	movhi	r5,33044
811031f4:	29523604 	addi	r5,r5,18648
811031f8:	1009883a 	mov	r4,r2
811031fc:	11135480 	call	81113548 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103200:	e0bff417 	ldw	r2,-48(fp)
81103204:	10800044 	addi	r2,r2,1
81103208:	e0bff415 	stw	r2,-48(fp)
8110320c:	e0bff517 	ldw	r2,-44(fp)
81103210:	1085883a 	add	r2,r2,r2
81103214:	1085883a 	add	r2,r2,r2
81103218:	e0fff304 	addi	r3,fp,-52
8110321c:	1885883a 	add	r2,r3,r2
81103220:	10800904 	addi	r2,r2,36
81103224:	10800017 	ldw	r2,0(r2)
81103228:	e0fff417 	ldw	r3,-48(fp)
8110322c:	1880020e 	bge	r3,r2,81103238 <POWER_Read+0x290>
81103230:	e0bff317 	ldw	r2,-52(fp)
81103234:	103f811e 	bne	r2,zero,8110303c <__reset+0xfb0e303c>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81103238:	e0bff517 	ldw	r2,-44(fp)
8110323c:	10800044 	addi	r2,r2,1
81103240:	e0bff515 	stw	r2,-44(fp)
81103244:	e0bff517 	ldw	r2,-44(fp)
81103248:	10800088 	cmpgei	r2,r2,2
8110324c:	1000021e 	bne	r2,zero,81103258 <POWER_Read+0x2b0>
81103250:	e0bff317 	ldw	r2,-52(fp)
81103254:	103f691e 	bne	r2,zero,81102ffc <__reset+0xfb0e2ffc>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81103258:	e0bff317 	ldw	r2,-52(fp)
}
8110325c:	e037883a 	mov	sp,fp
81103260:	dfc00117 	ldw	ra,4(sp)
81103264:	df000017 	ldw	fp,0(sp)
81103268:	dec00204 	addi	sp,sp,8
8110326c:	f800283a 	ret

81103270 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103270:	defff904 	addi	sp,sp,-28
81103274:	de00012e 	bgeu	sp,et,8110327c <TEMP_Read+0xc>
81103278:	003b68fa 	trap	3
8110327c:	dfc00615 	stw	ra,24(sp)
81103280:	df000515 	stw	fp,20(sp)
81103284:	df000504 	addi	fp,sp,20
81103288:	e13ffe15 	stw	r4,-8(fp)
8110328c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103290:	00800c04 	movi	r2,48
81103294:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103298:	e0bffd83 	ldbu	r2,-10(fp)
8110329c:	10c03fcc 	andi	r3,r2,255
811032a0:	18c0201c 	xori	r3,r3,128
811032a4:	18ffe004 	addi	r3,r3,-128
811032a8:	e0bffdc4 	addi	r2,fp,-9
811032ac:	d8800015 	stw	r2,0(sp)
811032b0:	000f883a 	mov	r7,zero
811032b4:	180d883a 	mov	r6,r3
811032b8:	01600034 	movhi	r5,32768
811032bc:	29426004 	addi	r5,r5,2432
811032c0:	01200034 	movhi	r4,32768
811032c4:	21026404 	addi	r4,r4,2448
811032c8:	1105b300 	call	81105b30 <I2C_Read>
811032cc:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
811032d0:	e0bffc17 	ldw	r2,-16(fp)
811032d4:	10000226 	beq	r2,zero,811032e0 <TEMP_Read+0x70>
		BoardTemp = Data;
811032d8:	e0bffdc3 	ldbu	r2,-9(fp)
811032dc:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
811032e0:	e0bffc17 	ldw	r2,-16(fp)
811032e4:	10001226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
811032e8:	e0bffd83 	ldbu	r2,-10(fp)
811032ec:	10c03fcc 	andi	r3,r2,255
811032f0:	18c0201c 	xori	r3,r3,128
811032f4:	18ffe004 	addi	r3,r3,-128
811032f8:	e0bffdc4 	addi	r2,fp,-9
811032fc:	d8800015 	stw	r2,0(sp)
81103300:	01c00044 	movi	r7,1
81103304:	180d883a 	mov	r6,r3
81103308:	01600034 	movhi	r5,32768
8110330c:	29426004 	addi	r5,r5,2432
81103310:	01200034 	movhi	r4,32768
81103314:	21026404 	addi	r4,r4,2448
81103318:	1105b300 	call	81105b30 <I2C_Read>
8110331c:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81103320:	e0bffc17 	ldw	r2,-16(fp)
81103324:	10000226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
			FpgaTemp = Data;
81103328:	e0bffdc3 	ldbu	r2,-9(fp)
8110332c:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81103330:	e0bffc17 	ldw	r2,-16(fp)
81103334:	10000626 	beq	r2,zero,81103350 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
81103338:	e0bffe17 	ldw	r2,-8(fp)
8110333c:	e0fffd03 	ldbu	r3,-12(fp)
81103340:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81103344:	e0bfff17 	ldw	r2,-4(fp)
81103348:	e0fffd43 	ldbu	r3,-11(fp)
8110334c:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81103350:	e0bffc17 	ldw	r2,-16(fp)
}
81103354:	e037883a 	mov	sp,fp
81103358:	dfc00117 	ldw	ra,4(sp)
8110335c:	df000017 	ldw	fp,0(sp)
81103360:	dec00204 	addi	sp,sp,8
81103364:	f800283a 	ret

81103368 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81103368:	defffb04 	addi	sp,sp,-20
8110336c:	de00012e 	bgeu	sp,et,81103374 <sense_log_temp+0xc>
81103370:	003b68fa 	trap	3
81103374:	dfc00415 	stw	ra,16(sp)
81103378:	df000315 	stw	fp,12(sp)
8110337c:	df000304 	addi	fp,sp,12
81103380:	e13ffe15 	stw	r4,-8(fp)
81103384:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103388:	e17fff17 	ldw	r5,-4(fp)
8110338c:	e13ffe17 	ldw	r4,-8(fp)
81103390:	11032700 	call	81103270 <TEMP_Read>
81103394:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103398:	e0bffd17 	ldw	r2,-12(fp)
}
8110339c:	e037883a 	mov	sp,fp
811033a0:	dfc00117 	ldw	ra,4(sp)
811033a4:	df000017 	ldw	fp,0(sp)
811033a8:	dec00204 	addi	sp,sp,8
811033ac:	f800283a 	ret

811033b0 <sense_log>:

void sense_log(void) {
811033b0:	deff0404 	addi	sp,sp,-1008
811033b4:	de00012e 	bgeu	sp,et,811033bc <sense_log+0xc>
811033b8:	003b68fa 	trap	3
811033bc:	dfc0fb15 	stw	ra,1004(sp)
811033c0:	df00fa15 	stw	fp,1000(sp)
811033c4:	dd40f915 	stw	r21,996(sp)
811033c8:	dd00f815 	stw	r20,992(sp)
811033cc:	dcc0f715 	stw	r19,988(sp)
811033d0:	dc80f615 	stw	r18,984(sp)
811033d4:	dc40f515 	stw	r17,980(sp)
811033d8:	dc00f415 	stw	r16,976(sp)
811033dc:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
811033e0:	00902834 	movhi	r2,16544
811033e4:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
811033e8:	008ed174 	movhi	r2,15173
811033ec:	10a6e984 	addi	r2,r2,-25690
811033f0:	e0bf2215 	stw	r2,-888(fp)
811033f4:	008ea0f4 	movhi	r2,14979
811033f8:	10849bc4 	addi	r2,r2,4719
811033fc:	e0bf2315 	stw	r2,-884(fp)
81103400:	008ed174 	movhi	r2,15173
81103404:	10a6e984 	addi	r2,r2,-25690
81103408:	e0bf2415 	stw	r2,-880(fp)
8110340c:	008ed174 	movhi	r2,15173
81103410:	10a6e984 	addi	r2,r2,-25690
81103414:	e0bf2515 	stw	r2,-876(fp)
81103418:	008ed174 	movhi	r2,15173
8110341c:	10a6e984 	addi	r2,r2,-25690
81103420:	e0bf2615 	stw	r2,-872(fp)
81103424:	008ed174 	movhi	r2,15173
81103428:	10a6e984 	addi	r2,r2,-25690
8110342c:	e0bf2715 	stw	r2,-868(fp)
81103430:	008ed174 	movhi	r2,15173
81103434:	10a6e984 	addi	r2,r2,-25690
81103438:	e0bf2815 	stw	r2,-864(fp)
8110343c:	008ed174 	movhi	r2,15173
81103440:	10a6e984 	addi	r2,r2,-25690
81103444:	e0bf2915 	stw	r2,-860(fp)
81103448:	008ed174 	movhi	r2,15173
8110344c:	10a6e984 	addi	r2,r2,-25690
81103450:	e0bf2a15 	stw	r2,-856(fp)
81103454:	008ed174 	movhi	r2,15173
81103458:	10a6e984 	addi	r2,r2,-25690
8110345c:	e0bf2b15 	stw	r2,-852(fp)
81103460:	008ed174 	movhi	r2,15173
81103464:	10a6e984 	addi	r2,r2,-25690
81103468:	e0bf2c15 	stw	r2,-848(fp)
8110346c:	008ed174 	movhi	r2,15173
81103470:	10a6e984 	addi	r2,r2,-25690
81103474:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103478:	008fd9b4 	movhi	r2,16230
8110347c:	10999984 	addi	r2,r2,26214
81103480:	e0bf2e15 	stw	r2,-840(fp)
81103484:	008fd9b4 	movhi	r2,16230
81103488:	10999984 	addi	r2,r2,26214
8110348c:	e0bf2f15 	stw	r2,-836(fp)
81103490:	00901034 	movhi	r2,16448
81103494:	e0bf3015 	stw	r2,-832(fp)
81103498:	008fd9b4 	movhi	r2,16230
8110349c:	10999984 	addi	r2,r2,26214
811034a0:	e0bf3115 	stw	r2,-828(fp)
811034a4:	008ff9b4 	movhi	r2,16358
811034a8:	10999984 	addi	r2,r2,26214
811034ac:	e0bf3215 	stw	r2,-824(fp)
811034b0:	00900834 	movhi	r2,16416
811034b4:	e0bf3315 	stw	r2,-820(fp)
811034b8:	008ff9b4 	movhi	r2,16358
811034bc:	10999984 	addi	r2,r2,26214
811034c0:	e0bf3415 	stw	r2,-816(fp)
811034c4:	00900834 	movhi	r2,16416
811034c8:	e0bf3515 	stw	r2,-812(fp)
811034cc:	008fe374 	movhi	r2,16269
811034d0:	10b33344 	addi	r2,r2,-13107
811034d4:	e0bf3615 	stw	r2,-808(fp)
811034d8:	008fecf4 	movhi	r2,16307
811034dc:	108cccc4 	addi	r2,r2,13107
811034e0:	e0bf3715 	stw	r2,-804(fp)
811034e4:	009014f4 	movhi	r2,16467
811034e8:	108cccc4 	addi	r2,r2,13107
811034ec:	e0bf3815 	stw	r2,-800(fp)
811034f0:	00900834 	movhi	r2,16416
811034f4:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
811034f8:	00a04534 	movhi	r2,33044
811034fc:	10bbc804 	addi	r2,r2,-4320
81103500:	e0ff3a04 	addi	r3,fp,-792
81103504:	1009883a 	mov	r4,r2
81103508:	0080c004 	movi	r2,768
8110350c:	100d883a 	mov	r6,r2
81103510:	200b883a 	mov	r5,r4
81103514:	1809883a 	mov	r4,r3
81103518:	11145f80 	call	811145f8 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
8110351c:	e0bf1604 	addi	r2,fp,-936
81103520:	1009883a 	mov	r4,r2
81103524:	1102fa80 	call	81102fa8 <POWER_Read>
81103528:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
8110352c:	e0bf0f17 	ldw	r2,-964(fp)
81103530:	10016026 	beq	r2,zero,81103ab4 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103534:	e03f0c15 	stw	zero,-976(fp)
81103538:	00014c06 	br	81103a6c <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
8110353c:	e0bf0c17 	ldw	r2,-976(fp)
81103540:	1085883a 	add	r2,r2,r2
81103544:	1085883a 	add	r2,r2,r2
81103548:	e0ff0c04 	addi	r3,fp,-976
8110354c:	1885883a 	add	r2,r3,r2
81103550:	10800a04 	addi	r2,r2,40
81103554:	10800017 	ldw	r2,0(r2)
81103558:	1004d77a 	srli	r2,r2,29
8110355c:	1080004c 	andi	r2,r2,1
81103560:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81103564:	e0bf0c17 	ldw	r2,-976(fp)
81103568:	1085883a 	add	r2,r2,r2
8110356c:	1085883a 	add	r2,r2,r2
81103570:	e0ff0c04 	addi	r3,fp,-976
81103574:	1885883a 	add	r2,r3,r2
81103578:	10800a04 	addi	r2,r2,40
8110357c:	10800017 	ldw	r2,0(r2)
81103580:	1004d73a 	srli	r2,r2,28
81103584:	1080004c 	andi	r2,r2,1
81103588:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110358c:	e0bf0c17 	ldw	r2,-976(fp)
81103590:	1085883a 	add	r2,r2,r2
81103594:	1085883a 	add	r2,r2,r2
81103598:	e0ff0c04 	addi	r3,fp,-976
8110359c:	1885883a 	add	r2,r3,r2
811035a0:	10800a04 	addi	r2,r2,40
811035a4:	10800017 	ldw	r2,0(r2)
811035a8:	1006d1ba 	srli	r3,r2,6
811035ac:	00801034 	movhi	r2,64
811035b0:	10bfffc4 	addi	r2,r2,-1
811035b4:	1884703a 	and	r2,r3,r2
811035b8:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
811035bc:	e0bf1117 	ldw	r2,-956(fp)
811035c0:	1000091e 	bne	r2,zero,811035e8 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
811035c4:	e13f1217 	ldw	r4,-952(fp)
811035c8:	11128b00 	call	811128b0 <__floatunsisf>
811035cc:	1007883a 	mov	r3,r2
811035d0:	0152a034 	movhi	r5,19072
811035d4:	1809883a 	mov	r4,r3
811035d8:	1111f380 	call	81111f38 <__divsf3>
811035dc:	1007883a 	mov	r3,r2
811035e0:	e0ff0d15 	stw	r3,-972(fp)
811035e4:	00000106 	br	811035ec <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811035e8:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
811035ec:	e0bf1017 	ldw	r2,-960(fp)
811035f0:	10002626 	beq	r2,zero,8110368c <sense_log+0x2dc>
811035f4:	e0bf1117 	ldw	r2,-956(fp)
811035f8:	10002426 	beq	r2,zero,8110368c <sense_log+0x2dc>
				fVol = fRef * 0.5;
811035fc:	014fc034 	movhi	r5,16128
81103600:	e13f0e17 	ldw	r4,-968(fp)
81103604:	11123800 	call	81112380 <__mulsf3>
81103608:	1007883a 	mov	r3,r2
8110360c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103610:	e0ff3a04 	addi	r3,fp,-792
81103614:	e0bf0c17 	ldw	r2,-976(fp)
81103618:	100491ba 	slli	r2,r2,6
8110361c:	18a1883a 	add	r16,r3,r2
81103620:	e0bf0c17 	ldw	r2,-976(fp)
81103624:	1085883a 	add	r2,r2,r2
81103628:	1085883a 	add	r2,r2,r2
8110362c:	e0ff0c04 	addi	r3,fp,-976
81103630:	1885883a 	add	r2,r3,r2
81103634:	10800a04 	addi	r2,r2,40
81103638:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
8110363c:	1023883a 	mov	r17,r2
81103640:	e13f1317 	ldw	r4,-948(fp)
81103644:	11130c80 	call	811130c8 <__extendsfdf2>
81103648:	1009883a 	mov	r4,r2
8110364c:	180b883a 	mov	r5,r3
81103650:	d9000015 	stw	r4,0(sp)
81103654:	d9400115 	stw	r5,4(sp)
81103658:	880f883a 	mov	r7,r17
8110365c:	800d883a 	mov	r6,r16
81103660:	01604534 	movhi	r5,33044
81103664:	297b9604 	addi	r5,r5,-4520
81103668:	01204534 	movhi	r4,33044
8110366c:	21123604 	addi	r4,r4,18648
81103670:	1114ef80 	call	81114ef8 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103674:	d0a05017 	ldw	r2,-32448(gp)
81103678:	01604534 	movhi	r5,33044
8110367c:	29523604 	addi	r5,r5,18648
81103680:	1009883a 	mov	r4,r2
81103684:	11135480 	call	81113548 <fprintf>
81103688:	0000f506 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110368c:	e0bf1017 	ldw	r2,-960(fp)
81103690:	10006426 	beq	r2,zero,81103824 <sense_log+0x474>
81103694:	e0bf1117 	ldw	r2,-956(fp)
81103698:	1000621e 	bne	r2,zero,81103824 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110369c:	e13f0e17 	ldw	r4,-968(fp)
811036a0:	11130c80 	call	811130c8 <__extendsfdf2>
811036a4:	1011883a 	mov	r8,r2
811036a8:	1813883a 	mov	r9,r3
811036ac:	000d883a 	mov	r6,zero
811036b0:	01cff834 	movhi	r7,16352
811036b4:	4009883a 	mov	r4,r8
811036b8:	480b883a 	mov	r5,r9
811036bc:	11129a80 	call	811129a8 <__muldf3>
811036c0:	1009883a 	mov	r4,r2
811036c4:	180b883a 	mov	r5,r3
811036c8:	2021883a 	mov	r16,r4
811036cc:	2823883a 	mov	r17,r5
811036d0:	e13f0d17 	ldw	r4,-972(fp)
811036d4:	11130c80 	call	811130c8 <__extendsfdf2>
811036d8:	1009883a 	mov	r4,r2
811036dc:	180b883a 	mov	r5,r3
811036e0:	200d883a 	mov	r6,r4
811036e4:	280f883a 	mov	r7,r5
811036e8:	8009883a 	mov	r4,r16
811036ec:	880b883a 	mov	r5,r17
811036f0:	11129a80 	call	811129a8 <__muldf3>
811036f4:	1009883a 	mov	r4,r2
811036f8:	180b883a 	mov	r5,r3
811036fc:	2005883a 	mov	r2,r4
81103700:	2807883a 	mov	r3,r5
81103704:	1009883a 	mov	r4,r2
81103708:	180b883a 	mov	r5,r3
8110370c:	11131e00 	call	811131e0 <__truncdfsf2>
81103710:	1007883a 	mov	r3,r2
81103714:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10801604 	addi	r2,r2,88
81103730:	10c00017 	ldw	r3,0(r2)
81103734:	180b883a 	mov	r5,r3
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	1111f380 	call	81111f38 <__divsf3>
81103740:	1007883a 	mov	r3,r2
81103744:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103748:	e0bf0c17 	ldw	r2,-976(fp)
8110374c:	1085883a 	add	r2,r2,r2
81103750:	1085883a 	add	r2,r2,r2
81103754:	e0ff0c04 	addi	r3,fp,-976
81103758:	1885883a 	add	r2,r3,r2
8110375c:	10802204 	addi	r2,r2,136
81103760:	10c00017 	ldw	r3,0(r2)
81103764:	e17f1417 	ldw	r5,-944(fp)
81103768:	1809883a 	mov	r4,r3
8110376c:	11123800 	call	81112380 <__mulsf3>
81103770:	1007883a 	mov	r3,r2
81103774:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103778:	e0ff3a04 	addi	r3,fp,-792
8110377c:	e0bf0c17 	ldw	r2,-976(fp)
81103780:	100491ba 	slli	r2,r2,6
81103784:	18a9883a 	add	r20,r3,r2
81103788:	e0bf0c17 	ldw	r2,-976(fp)
8110378c:	1085883a 	add	r2,r2,r2
81103790:	1085883a 	add	r2,r2,r2
81103794:	e0ff0c04 	addi	r3,fp,-976
81103798:	1885883a 	add	r2,r3,r2
8110379c:	10800a04 	addi	r2,r2,40
811037a0:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811037a4:	102b883a 	mov	r21,r2
811037a8:	e13f0d17 	ldw	r4,-972(fp)
811037ac:	11130c80 	call	811130c8 <__extendsfdf2>
811037b0:	1021883a 	mov	r16,r2
811037b4:	1823883a 	mov	r17,r3
811037b8:	e13f1417 	ldw	r4,-944(fp)
811037bc:	11130c80 	call	811130c8 <__extendsfdf2>
811037c0:	1025883a 	mov	r18,r2
811037c4:	1827883a 	mov	r19,r3
811037c8:	e13f1517 	ldw	r4,-940(fp)
811037cc:	11130c80 	call	811130c8 <__extendsfdf2>
811037d0:	1009883a 	mov	r4,r2
811037d4:	180b883a 	mov	r5,r3
811037d8:	d9000415 	stw	r4,16(sp)
811037dc:	d9400515 	stw	r5,20(sp)
811037e0:	dc800215 	stw	r18,8(sp)
811037e4:	dcc00315 	stw	r19,12(sp)
811037e8:	dc000015 	stw	r16,0(sp)
811037ec:	dc400115 	stw	r17,4(sp)
811037f0:	a80f883a 	mov	r7,r21
811037f4:	a00d883a 	mov	r6,r20
811037f8:	01604534 	movhi	r5,33044
811037fc:	297b9f04 	addi	r5,r5,-4484
81103800:	01204534 	movhi	r4,33044
81103804:	21123604 	addi	r4,r4,18648
81103808:	1114ef80 	call	81114ef8 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110380c:	d0a05017 	ldw	r2,-32448(gp)
81103810:	01604534 	movhi	r5,33044
81103814:	29523604 	addi	r5,r5,18648
81103818:	1009883a 	mov	r4,r2
8110381c:	11135480 	call	81113548 <fprintf>
81103820:	00008f06 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
81103824:	e0bf1017 	ldw	r2,-960(fp)
81103828:	1000641e 	bne	r2,zero,811039bc <sense_log+0x60c>
8110382c:	e0bf1117 	ldw	r2,-956(fp)
81103830:	10006226 	beq	r2,zero,811039bc <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
81103834:	e13f0e17 	ldw	r4,-968(fp)
81103838:	11130c80 	call	811130c8 <__extendsfdf2>
8110383c:	1011883a 	mov	r8,r2
81103840:	1813883a 	mov	r9,r3
81103844:	000d883a 	mov	r6,zero
81103848:	01cff834 	movhi	r7,16352
8110384c:	4009883a 	mov	r4,r8
81103850:	480b883a 	mov	r5,r9
81103854:	11129a80 	call	811129a8 <__muldf3>
81103858:	1009883a 	mov	r4,r2
8110385c:	180b883a 	mov	r5,r3
81103860:	2021883a 	mov	r16,r4
81103864:	2823883a 	mov	r17,r5
81103868:	e13f0d17 	ldw	r4,-972(fp)
8110386c:	11130c80 	call	811130c8 <__extendsfdf2>
81103870:	1009883a 	mov	r4,r2
81103874:	180b883a 	mov	r5,r3
81103878:	200d883a 	mov	r6,r4
8110387c:	280f883a 	mov	r7,r5
81103880:	8009883a 	mov	r4,r16
81103884:	880b883a 	mov	r5,r17
81103888:	11129a80 	call	811129a8 <__muldf3>
8110388c:	1009883a 	mov	r4,r2
81103890:	180b883a 	mov	r5,r3
81103894:	2005883a 	mov	r2,r4
81103898:	2807883a 	mov	r3,r5
8110389c:	1009883a 	mov	r4,r2
811038a0:	180b883a 	mov	r5,r3
811038a4:	11131e00 	call	811131e0 <__truncdfsf2>
811038a8:	1007883a 	mov	r3,r2
811038ac:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10801604 	addi	r2,r2,88
811038c8:	10c00017 	ldw	r3,0(r2)
811038cc:	180b883a 	mov	r5,r3
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	1111f380 	call	81111f38 <__divsf3>
811038d8:	1007883a 	mov	r3,r2
811038dc:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811038e0:	e0bf0c17 	ldw	r2,-976(fp)
811038e4:	1085883a 	add	r2,r2,r2
811038e8:	1085883a 	add	r2,r2,r2
811038ec:	e0ff0c04 	addi	r3,fp,-976
811038f0:	1885883a 	add	r2,r3,r2
811038f4:	10802204 	addi	r2,r2,136
811038f8:	10c00017 	ldw	r3,0(r2)
811038fc:	e17f1417 	ldw	r5,-944(fp)
81103900:	1809883a 	mov	r4,r3
81103904:	11123800 	call	81112380 <__mulsf3>
81103908:	1007883a 	mov	r3,r2
8110390c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103910:	e0ff3a04 	addi	r3,fp,-792
81103914:	e0bf0c17 	ldw	r2,-976(fp)
81103918:	100491ba 	slli	r2,r2,6
8110391c:	18a9883a 	add	r20,r3,r2
81103920:	e0bf0c17 	ldw	r2,-976(fp)
81103924:	1085883a 	add	r2,r2,r2
81103928:	1085883a 	add	r2,r2,r2
8110392c:	e0ff0c04 	addi	r3,fp,-976
81103930:	1885883a 	add	r2,r3,r2
81103934:	10800a04 	addi	r2,r2,40
81103938:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110393c:	102b883a 	mov	r21,r2
81103940:	e13f0d17 	ldw	r4,-972(fp)
81103944:	11130c80 	call	811130c8 <__extendsfdf2>
81103948:	1021883a 	mov	r16,r2
8110394c:	1823883a 	mov	r17,r3
81103950:	e13f1417 	ldw	r4,-944(fp)
81103954:	11130c80 	call	811130c8 <__extendsfdf2>
81103958:	1025883a 	mov	r18,r2
8110395c:	1827883a 	mov	r19,r3
81103960:	e13f1517 	ldw	r4,-940(fp)
81103964:	11130c80 	call	811130c8 <__extendsfdf2>
81103968:	1009883a 	mov	r4,r2
8110396c:	180b883a 	mov	r5,r3
81103970:	d9000415 	stw	r4,16(sp)
81103974:	d9400515 	stw	r5,20(sp)
81103978:	dc800215 	stw	r18,8(sp)
8110397c:	dcc00315 	stw	r19,12(sp)
81103980:	dc000015 	stw	r16,0(sp)
81103984:	dc400115 	stw	r17,4(sp)
81103988:	a80f883a 	mov	r7,r21
8110398c:	a00d883a 	mov	r6,r20
81103990:	01604534 	movhi	r5,33044
81103994:	297baf04 	addi	r5,r5,-4420
81103998:	01204534 	movhi	r4,33044
8110399c:	21123604 	addi	r4,r4,18648
811039a0:	1114ef80 	call	81114ef8 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811039a4:	d0a05017 	ldw	r2,-32448(gp)
811039a8:	01604534 	movhi	r5,33044
811039ac:	29523604 	addi	r5,r5,18648
811039b0:	1009883a 	mov	r4,r2
811039b4:	11135480 	call	81113548 <fprintf>
811039b8:	00002906 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
811039bc:	e0bf1017 	ldw	r2,-960(fp)
811039c0:	1000271e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
811039c4:	e0bf1117 	ldw	r2,-956(fp)
811039c8:	1000251e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
811039cc:	e0bf0e17 	ldw	r2,-968(fp)
811039d0:	10a0003c 	xorhi	r2,r2,32768
811039d4:	014fc034 	movhi	r5,16128
811039d8:	1009883a 	mov	r4,r2
811039dc:	11123800 	call	81112380 <__mulsf3>
811039e0:	1007883a 	mov	r3,r2
811039e4:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811039e8:	e0ff3a04 	addi	r3,fp,-792
811039ec:	e0bf0c17 	ldw	r2,-976(fp)
811039f0:	100491ba 	slli	r2,r2,6
811039f4:	18a1883a 	add	r16,r3,r2
811039f8:	e0bf0c17 	ldw	r2,-976(fp)
811039fc:	1085883a 	add	r2,r2,r2
81103a00:	1085883a 	add	r2,r2,r2
81103a04:	e0ff0c04 	addi	r3,fp,-976
81103a08:	1885883a 	add	r2,r3,r2
81103a0c:	10800a04 	addi	r2,r2,40
81103a10:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
81103a14:	1023883a 	mov	r17,r2
81103a18:	e13f1317 	ldw	r4,-948(fp)
81103a1c:	11130c80 	call	811130c8 <__extendsfdf2>
81103a20:	1009883a 	mov	r4,r2
81103a24:	180b883a 	mov	r5,r3
81103a28:	d9000015 	stw	r4,0(sp)
81103a2c:	d9400115 	stw	r5,4(sp)
81103a30:	880f883a 	mov	r7,r17
81103a34:	800d883a 	mov	r6,r16
81103a38:	01604534 	movhi	r5,33044
81103a3c:	297bbf04 	addi	r5,r5,-4356
81103a40:	01204534 	movhi	r4,33044
81103a44:	21123604 	addi	r4,r4,18648
81103a48:	1114ef80 	call	81114ef8 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103a4c:	d0a05017 	ldw	r2,-32448(gp)
81103a50:	01604534 	movhi	r5,33044
81103a54:	29523604 	addi	r5,r5,18648
81103a58:	1009883a 	mov	r4,r2
81103a5c:	11135480 	call	81113548 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103a60:	e0bf0c17 	ldw	r2,-976(fp)
81103a64:	10800044 	addi	r2,r2,1
81103a68:	e0bf0c15 	stw	r2,-976(fp)
81103a6c:	e0bf0c17 	ldw	r2,-976(fp)
81103a70:	10800308 	cmpgei	r2,r2,12
81103a74:	1000021e 	bne	r2,zero,81103a80 <sense_log+0x6d0>
81103a78:	e0bf0f17 	ldw	r2,-964(fp)
81103a7c:	103eaf1e 	bne	r2,zero,8110353c <__reset+0xfb0e353c>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a80:	00a04534 	movhi	r2,33044
81103a84:	10923604 	addi	r2,r2,18648
81103a88:	00c00344 	movi	r3,13
81103a8c:	10c00005 	stb	r3,0(r2)
81103a90:	00c00284 	movi	r3,10
81103a94:	10c00045 	stb	r3,1(r2)
81103a98:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a9c:	d0a05017 	ldw	r2,-32448(gp)
81103aa0:	01604534 	movhi	r5,33044
81103aa4:	29523604 	addi	r5,r5,18648
81103aa8:	1009883a 	mov	r4,r2
81103aac:	11135480 	call	81113548 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103ab0:	00001606 	br	81103b0c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103ab4:	00a04534 	movhi	r2,33044
81103ab8:	10923604 	addi	r2,r2,18648
81103abc:	00c01144 	movi	r3,69
81103ac0:	10c00005 	stb	r3,0(r2)
81103ac4:	00c01c84 	movi	r3,114
81103ac8:	10c00045 	stb	r3,1(r2)
81103acc:	00c01c84 	movi	r3,114
81103ad0:	10c00085 	stb	r3,2(r2)
81103ad4:	00c01bc4 	movi	r3,111
81103ad8:	10c000c5 	stb	r3,3(r2)
81103adc:	00c01c84 	movi	r3,114
81103ae0:	10c00105 	stb	r3,4(r2)
81103ae4:	00c00344 	movi	r3,13
81103ae8:	10c00145 	stb	r3,5(r2)
81103aec:	00c00284 	movi	r3,10
81103af0:	10c00185 	stb	r3,6(r2)
81103af4:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103af8:	d0a05017 	ldw	r2,-32448(gp)
81103afc:	01604534 	movhi	r5,33044
81103b00:	29523604 	addi	r5,r5,18648
81103b04:	1009883a 	mov	r4,r2
81103b08:	11135480 	call	81113548 <fprintf>
#endif
	}
}
81103b0c:	0001883a 	nop
81103b10:	e6fffa04 	addi	sp,fp,-24
81103b14:	dfc00717 	ldw	ra,28(sp)
81103b18:	df000617 	ldw	fp,24(sp)
81103b1c:	dd400517 	ldw	r21,20(sp)
81103b20:	dd000417 	ldw	r20,16(sp)
81103b24:	dcc00317 	ldw	r19,12(sp)
81103b28:	dc800217 	ldw	r18,8(sp)
81103b2c:	dc400117 	ldw	r17,4(sp)
81103b30:	dc000017 	ldw	r16,0(sp)
81103b34:	dec00804 	addi	sp,sp,32
81103b38:	f800283a 	ret

81103b3c <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103b3c:	defffc04 	addi	sp,sp,-16
81103b40:	de00012e 	bgeu	sp,et,81103b48 <bSdmaInitM1Dma+0xc>
81103b44:	003b68fa 	trap	3
81103b48:	dfc00315 	stw	ra,12(sp)
81103b4c:	df000215 	stw	fp,8(sp)
81103b50:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b54:	00800044 	movi	r2,1
81103b58:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b5c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103b60:	01204534 	movhi	r4,33044
81103b64:	213c8804 	addi	r4,r4,-3552
81103b68:	113c99c0 	call	8113c99c <alt_msgdma_open>
81103b6c:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b70:	d0a03917 	ldw	r2,-32540(gp)
81103b74:	1000021e 	bne	r2,zero,81103b80 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b78:	e03ffe15 	stw	zero,-8(fp)
81103b7c:	00001506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b80:	d0a03917 	ldw	r2,-32540(gp)
81103b84:	10800317 	ldw	r2,12(r2)
81103b88:	10800104 	addi	r2,r2,4
81103b8c:	00c00084 	movi	r3,2
81103b90:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b94:	00000a06 	br	81103bc0 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b98:	01000044 	movi	r4,1
81103b9c:	112a8800 	call	8112a880 <usleep>
			usiCounter++;
81103ba0:	e0bfff0b 	ldhu	r2,-4(fp)
81103ba4:	10800044 	addi	r2,r2,1
81103ba8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bac:	e0bfff0b 	ldhu	r2,-4(fp)
81103bb0:	1084e230 	cmpltui	r2,r2,5000
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bbc:	00000506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103bcc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bd0:	103ff11e 	bne	r2,zero,81103b98 <__reset+0xfb0e3b98>
				break;
			}
		}
	}

	return bStatus;
81103bd4:	e0bffe17 	ldw	r2,-8(fp)
}
81103bd8:	e037883a 	mov	sp,fp
81103bdc:	dfc00117 	ldw	ra,4(sp)
81103be0:	df000017 	ldw	fp,0(sp)
81103be4:	dec00204 	addi	sp,sp,8
81103be8:	f800283a 	ret

81103bec <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103bec:	defffc04 	addi	sp,sp,-16
81103bf0:	de00012e 	bgeu	sp,et,81103bf8 <bSdmaInitM2Dma+0xc>
81103bf4:	003b68fa 	trap	3
81103bf8:	dfc00315 	stw	ra,12(sp)
81103bfc:	df000215 	stw	fp,8(sp)
81103c00:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103c04:	00800044 	movi	r2,1
81103c08:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103c0c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103c10:	01204534 	movhi	r4,33044
81103c14:	213c8d04 	addi	r4,r4,-3532
81103c18:	113c99c0 	call	8113c99c <alt_msgdma_open>
81103c1c:	d0a03a15 	stw	r2,-32536(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103c20:	d0a03a17 	ldw	r2,-32536(gp)
81103c24:	1000021e 	bne	r2,zero,81103c30 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103c28:	e03ffe15 	stw	zero,-8(fp)
81103c2c:	00001506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103c30:	d0a03a17 	ldw	r2,-32536(gp)
81103c34:	10800317 	ldw	r2,12(r2)
81103c38:	10800104 	addi	r2,r2,4
81103c3c:	00c00084 	movi	r3,2
81103c40:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c44:	00000a06 	br	81103c70 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103c48:	01000044 	movi	r4,1
81103c4c:	112a8800 	call	8112a880 <usleep>
			usiCounter++;
81103c50:	e0bfff0b 	ldhu	r2,-4(fp)
81103c54:	10800044 	addi	r2,r2,1
81103c58:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103c5c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c60:	1084e230 	cmpltui	r2,r2,5000
81103c64:	1000021e 	bne	r2,zero,81103c70 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103c68:	e03ffe15 	stw	zero,-8(fp)
				break;
81103c6c:	00000506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c70:	d0a03a17 	ldw	r2,-32536(gp)
81103c74:	10800317 	ldw	r2,12(r2)
81103c78:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c7c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c80:	103ff11e 	bne	r2,zero,81103c48 <__reset+0xfb0e3c48>
				break;
			}
		}
	}

	return bStatus;
81103c84:	e0bffe17 	ldw	r2,-8(fp)
}
81103c88:	e037883a 	mov	sp,fp
81103c8c:	dfc00117 	ldw	ra,4(sp)
81103c90:	df000017 	ldw	fp,0(sp)
81103c94:	dec00204 	addi	sp,sp,8
81103c98:	f800283a 	ret

81103c9c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c9c:	deffe904 	addi	sp,sp,-92
81103ca0:	de00012e 	bgeu	sp,et,81103ca8 <bSdmaDmaM1Transfer+0xc>
81103ca4:	003b68fa 	trap	3
81103ca8:	dfc01615 	stw	ra,88(sp)
81103cac:	df001515 	stw	fp,84(sp)
81103cb0:	dc001415 	stw	r16,80(sp)
81103cb4:	df001504 	addi	fp,sp,84
81103cb8:	e13ffb15 	stw	r4,-20(fp)
81103cbc:	2809883a 	mov	r4,r5
81103cc0:	3007883a 	mov	r3,r6
81103cc4:	3805883a 	mov	r2,r7
81103cc8:	e13ffc0d 	sth	r4,-16(fp)
81103ccc:	e0fffd05 	stb	r3,-12(fp)
81103cd0:	e0bffe05 	stb	r2,-8(fp)
81103cd4:	defff004 	addi	sp,sp,-64
81103cd8:	d8800904 	addi	r2,sp,36
81103cdc:	108007c4 	addi	r2,r2,31
81103ce0:	1004d17a 	srli	r2,r2,5
81103ce4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103ce8:	00800044 	movi	r2,1
81103cec:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103cf0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103cf4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103cf8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103cfc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103d00:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103d04:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103d08:	e0bffe03 	ldbu	r2,-8(fp)
81103d0c:	10c00268 	cmpgeui	r3,r2,9
81103d10:	1800a51e 	bne	r3,zero,81103fa8 <bSdmaDmaM1Transfer+0x30c>
81103d14:	100690ba 	slli	r3,r2,2
81103d18:	00a04434 	movhi	r2,33040
81103d1c:	108f4b04 	addi	r2,r2,15660
81103d20:	1885883a 	add	r2,r3,r2
81103d24:	10800017 	ldw	r2,0(r2)
81103d28:	1000683a 	jmp	r2
81103d2c:	81103fa8 	cmpgeui	r4,r16,16638
81103d30:	81103d50 	cmplti	r4,r16,16629
81103d34:	81103d94 	ori	r4,r16,16630
81103d38:	81103de0 	cmpeqi	r4,r16,16631
81103d3c:	81103e2c 	andhi	r4,r16,16632
81103d40:	81103e78 	rdprs	r4,r16,16633
81103d44:	81103ec4 	addi	r4,r16,16635
81103d48:	81103f10 	cmplti	r4,r16,16636
81103d4c:	81103f5c 	xori	r4,r16,16637
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103d50:	e0bffd03 	ldbu	r2,-12(fp)
81103d54:	10000326 	beq	r2,zero,81103d64 <bSdmaDmaM1Transfer+0xc8>
81103d58:	10800060 	cmpeqi	r2,r2,1
81103d5c:	1000051e 	bne	r2,zero,81103d74 <bSdmaDmaM1Transfer+0xd8>
81103d60:	00000906 	br	81103d88 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103d64:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103d68:	00800044 	movi	r2,1
81103d6c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d70:	00000706 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d74:	00800074 	movhi	r2,1
81103d78:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d7c:	00800044 	movi	r2,1
81103d80:	e0bff715 	stw	r2,-36(fp)
			break;
81103d84:	00000206 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d88:	e03ff415 	stw	zero,-48(fp)
			break;
81103d8c:	0001883a 	nop
		}
		break;
81103d90:	00008706 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d94:	e0bffd03 	ldbu	r2,-12(fp)
81103d98:	10000326 	beq	r2,zero,81103da8 <bSdmaDmaM1Transfer+0x10c>
81103d9c:	10800060 	cmpeqi	r2,r2,1
81103da0:	1000061e 	bne	r2,zero,81103dbc <bSdmaDmaM1Transfer+0x120>
81103da4:	00000b06 	br	81103dd4 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103da8:	00880004 	movi	r2,8192
81103dac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103db0:	00800044 	movi	r2,1
81103db4:	e0bff715 	stw	r2,-36(fp)
			break;
81103db8:	00000806 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103dbc:	00800074 	movhi	r2,1
81103dc0:	10880004 	addi	r2,r2,8192
81103dc4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103dc8:	00800044 	movi	r2,1
81103dcc:	e0bff715 	stw	r2,-36(fp)
			break;
81103dd0:	00000206 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103dd4:	e03ff415 	stw	zero,-48(fp)
			break;
81103dd8:	0001883a 	nop
		}
		break;
81103ddc:	00007406 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103de0:	e0bffd03 	ldbu	r2,-12(fp)
81103de4:	10000326 	beq	r2,zero,81103df4 <bSdmaDmaM1Transfer+0x158>
81103de8:	10800060 	cmpeqi	r2,r2,1
81103dec:	1000061e 	bne	r2,zero,81103e08 <bSdmaDmaM1Transfer+0x16c>
81103df0:	00000b06 	br	81103e20 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103df4:	00900004 	movi	r2,16384
81103df8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103dfc:	00800044 	movi	r2,1
81103e00:	e0bff715 	stw	r2,-36(fp)
			break;
81103e04:	00000806 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103e08:	00800074 	movhi	r2,1
81103e0c:	10900004 	addi	r2,r2,16384
81103e10:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103e14:	00800044 	movi	r2,1
81103e18:	e0bff715 	stw	r2,-36(fp)
			break;
81103e1c:	00000206 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103e20:	e03ff415 	stw	zero,-48(fp)
			break;
81103e24:	0001883a 	nop
		}
		break;
81103e28:	00006106 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103e2c:	e0bffd03 	ldbu	r2,-12(fp)
81103e30:	10000326 	beq	r2,zero,81103e40 <bSdmaDmaM1Transfer+0x1a4>
81103e34:	10800060 	cmpeqi	r2,r2,1
81103e38:	1000061e 	bne	r2,zero,81103e54 <bSdmaDmaM1Transfer+0x1b8>
81103e3c:	00000b06 	br	81103e6c <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103e40:	00980004 	movi	r2,24576
81103e44:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103e48:	00800044 	movi	r2,1
81103e4c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e50:	00000806 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103e54:	00800074 	movhi	r2,1
81103e58:	10980004 	addi	r2,r2,24576
81103e5c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103e60:	00800044 	movi	r2,1
81103e64:	e0bff715 	stw	r2,-36(fp)
			break;
81103e68:	00000206 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103e6c:	e03ff415 	stw	zero,-48(fp)
			break;
81103e70:	0001883a 	nop
		}
		break;
81103e74:	00004e06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e78:	e0bffd03 	ldbu	r2,-12(fp)
81103e7c:	10000326 	beq	r2,zero,81103e8c <bSdmaDmaM1Transfer+0x1f0>
81103e80:	10800060 	cmpeqi	r2,r2,1
81103e84:	1000061e 	bne	r2,zero,81103ea0 <bSdmaDmaM1Transfer+0x204>
81103e88:	00000b06 	br	81103eb8 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e8c:	00a00014 	movui	r2,32768
81103e90:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e94:	00800044 	movi	r2,1
81103e98:	e0bff715 	stw	r2,-36(fp)
			break;
81103e9c:	00000806 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103ea0:	008000b4 	movhi	r2,2
81103ea4:	10a00004 	addi	r2,r2,-32768
81103ea8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103eac:	00800044 	movi	r2,1
81103eb0:	e0bff715 	stw	r2,-36(fp)
			break;
81103eb4:	00000206 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103eb8:	e03ff415 	stw	zero,-48(fp)
			break;
81103ebc:	0001883a 	nop
		}
		break;
81103ec0:	00003b06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103ec4:	e0bffd03 	ldbu	r2,-12(fp)
81103ec8:	10000326 	beq	r2,zero,81103ed8 <bSdmaDmaM1Transfer+0x23c>
81103ecc:	10800060 	cmpeqi	r2,r2,1
81103ed0:	1000061e 	bne	r2,zero,81103eec <bSdmaDmaM1Transfer+0x250>
81103ed4:	00000b06 	br	81103f04 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103ed8:	00a80014 	movui	r2,40960
81103edc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103ee0:	00800044 	movi	r2,1
81103ee4:	e0bff715 	stw	r2,-36(fp)
			break;
81103ee8:	00000806 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103eec:	008000b4 	movhi	r2,2
81103ef0:	10a80004 	addi	r2,r2,-24576
81103ef4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103ef8:	00800044 	movi	r2,1
81103efc:	e0bff715 	stw	r2,-36(fp)
			break;
81103f00:	00000206 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103f04:	e03ff415 	stw	zero,-48(fp)
			break;
81103f08:	0001883a 	nop
		}
		break;
81103f0c:	00002806 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103f10:	e0bffd03 	ldbu	r2,-12(fp)
81103f14:	10000326 	beq	r2,zero,81103f24 <bSdmaDmaM1Transfer+0x288>
81103f18:	10800060 	cmpeqi	r2,r2,1
81103f1c:	1000061e 	bne	r2,zero,81103f38 <bSdmaDmaM1Transfer+0x29c>
81103f20:	00000b06 	br	81103f50 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103f24:	00b00014 	movui	r2,49152
81103f28:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103f2c:	00800044 	movi	r2,1
81103f30:	e0bff715 	stw	r2,-36(fp)
			break;
81103f34:	00000806 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103f38:	008000b4 	movhi	r2,2
81103f3c:	10b00004 	addi	r2,r2,-16384
81103f40:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103f44:	00800044 	movi	r2,1
81103f48:	e0bff715 	stw	r2,-36(fp)
			break;
81103f4c:	00000206 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103f50:	e03ff415 	stw	zero,-48(fp)
			break;
81103f54:	0001883a 	nop
		}
		break;
81103f58:	00001506 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103f5c:	e0bffd03 	ldbu	r2,-12(fp)
81103f60:	10000326 	beq	r2,zero,81103f70 <bSdmaDmaM1Transfer+0x2d4>
81103f64:	10800060 	cmpeqi	r2,r2,1
81103f68:	1000061e 	bne	r2,zero,81103f84 <bSdmaDmaM1Transfer+0x2e8>
81103f6c:	00000b06 	br	81103f9c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f70:	00b80014 	movui	r2,57344
81103f74:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f78:	00800044 	movi	r2,1
81103f7c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f80:	00000806 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f84:	008000b4 	movhi	r2,2
81103f88:	10b80004 	addi	r2,r2,-8192
81103f8c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f90:	00800044 	movi	r2,1
81103f94:	e0bff715 	stw	r2,-36(fp)
			break;
81103f98:	00000206 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f9c:	e03ff415 	stw	zero,-48(fp)
			break;
81103fa0:	0001883a 	nop
		}
		break;
81103fa4:	00000206 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103fa8:	e03ff415 	stw	zero,-48(fp)
		break;
81103fac:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103fb0:	e0bffb17 	ldw	r2,-20(fp)
81103fb4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103fb8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103fbc:	e0bff417 	ldw	r2,-48(fp)
81103fc0:	10003b26 	beq	r2,zero,811040b0 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103fc4:	d0a03917 	ldw	r2,-32540(gp)
81103fc8:	1000021e 	bne	r2,zero,81103fd4 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103fcc:	e03ff415 	stw	zero,-48(fp)
81103fd0:	00003706 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103fd4:	e03ff50d 	sth	zero,-44(fp)
81103fd8:	00003206 	br	811040a4 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103fdc:	01000044 	movi	r4,1
81103fe0:	1128dcc0 	call	81128dcc <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103fe4:	d0a03917 	ldw	r2,-32540(gp)
81103fe8:	10800317 	ldw	r2,12(r2)
81103fec:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103ff0:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103ff4:	103ff91e 	bne	r2,zero,81103fdc <__reset+0xfb0e3fdc>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103ff8:	d2203917 	ldw	r8,-32540(gp)
81103ffc:	e17ff817 	ldw	r5,-32(fp)
81104000:	e1bff617 	ldw	r6,-40(fp)
81104004:	e0bff917 	ldw	r2,-28(fp)
81104008:	e0fff717 	ldw	r3,-36(fp)
8110400c:	01000044 	movi	r4,1
81104010:	d9000815 	stw	r4,32(sp)
81104014:	01000044 	movi	r4,1
81104018:	d9000715 	stw	r4,28(sp)
8110401c:	01000044 	movi	r4,1
81104020:	d9000615 	stw	r4,24(sp)
81104024:	01000044 	movi	r4,1
81104028:	d9000515 	stw	r4,20(sp)
8110402c:	01000044 	movi	r4,1
81104030:	d9000415 	stw	r4,16(sp)
81104034:	d8c00315 	stw	r3,12(sp)
81104038:	d8800215 	stw	r2,8(sp)
8110403c:	e0bffa17 	ldw	r2,-24(fp)
81104040:	d8800115 	stw	r2,4(sp)
81104044:	00802204 	movi	r2,136
81104048:	d8800015 	stw	r2,0(sp)
8110404c:	300f883a 	mov	r7,r6
81104050:	280d883a 	mov	r6,r5
81104054:	800b883a 	mov	r5,r16
81104058:	4009883a 	mov	r4,r8
8110405c:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104060:	10000226 	beq	r2,zero,8110406c <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81104064:	e03ff415 	stw	zero,-48(fp)
					break;
81104068:	00001106 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
8110406c:	d0a03917 	ldw	r2,-32540(gp)
81104070:	800b883a 	mov	r5,r16
81104074:	1009883a 	mov	r4,r2
81104078:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
8110407c:	10000226 	beq	r2,zero,81104088 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104080:	e03ff415 	stw	zero,-48(fp)
						break;
81104084:	00000a06 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104088:	e0bff817 	ldw	r2,-32(fp)
8110408c:	10802204 	addi	r2,r2,136
81104090:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104094:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104098:	e0bff50b 	ldhu	r2,-44(fp)
8110409c:	10800044 	addi	r2,r2,1
811040a0:	e0bff50d 	sth	r2,-44(fp)
811040a4:	e0fff50b 	ldhu	r3,-44(fp)
811040a8:	e0bffc0b 	ldhu	r2,-16(fp)
811040ac:	18bfcd36 	bltu	r3,r2,81103fe4 <__reset+0xfb0e3fe4>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811040b0:	e0bff417 	ldw	r2,-48(fp)
}
811040b4:	e6ffff04 	addi	sp,fp,-4
811040b8:	dfc00217 	ldw	ra,8(sp)
811040bc:	df000117 	ldw	fp,4(sp)
811040c0:	dc000017 	ldw	r16,0(sp)
811040c4:	dec00304 	addi	sp,sp,12
811040c8:	f800283a 	ret

811040cc <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811040cc:	deffe904 	addi	sp,sp,-92
811040d0:	de00012e 	bgeu	sp,et,811040d8 <bSdmaDmaM2Transfer+0xc>
811040d4:	003b68fa 	trap	3
811040d8:	dfc01615 	stw	ra,88(sp)
811040dc:	df001515 	stw	fp,84(sp)
811040e0:	dc001415 	stw	r16,80(sp)
811040e4:	df001504 	addi	fp,sp,84
811040e8:	e13ffb15 	stw	r4,-20(fp)
811040ec:	2809883a 	mov	r4,r5
811040f0:	3007883a 	mov	r3,r6
811040f4:	3805883a 	mov	r2,r7
811040f8:	e13ffc0d 	sth	r4,-16(fp)
811040fc:	e0fffd05 	stb	r3,-12(fp)
81104100:	e0bffe05 	stb	r2,-8(fp)
81104104:	defff004 	addi	sp,sp,-64
81104108:	d8800904 	addi	r2,sp,36
8110410c:	108007c4 	addi	r2,r2,31
81104110:	1004d17a 	srli	r2,r2,5
81104114:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81104118:	00800044 	movi	r2,1
8110411c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81104120:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81104124:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81104128:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
8110412c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81104130:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81104134:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81104138:	e0bffe03 	ldbu	r2,-8(fp)
8110413c:	10c00268 	cmpgeui	r3,r2,9
81104140:	1800a51e 	bne	r3,zero,811043d8 <bSdmaDmaM2Transfer+0x30c>
81104144:	100690ba 	slli	r3,r2,2
81104148:	00a04434 	movhi	r2,33040
8110414c:	10905704 	addi	r2,r2,16732
81104150:	1885883a 	add	r2,r3,r2
81104154:	10800017 	ldw	r2,0(r2)
81104158:	1000683a 	jmp	r2
8110415c:	811043d8 	cmpnei	r4,r16,16655
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	811041c4 	addi	r4,r16,16647
81104168:	81104210 	cmplti	r4,r16,16648
8110416c:	8110425c 	xori	r4,r16,16649
81104170:	811042a8 	cmpgeui	r4,r16,16650
81104174:	811042f4 	orhi	r4,r16,16651
81104178:	81104340 	call	88110434 <__reset+0x20f0434>
8110417c:	8110438c 	andi	r4,r16,16654
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104180:	e0bffd03 	ldbu	r2,-12(fp)
81104184:	10000326 	beq	r2,zero,81104194 <bSdmaDmaM2Transfer+0xc8>
81104188:	10800060 	cmpeqi	r2,r2,1
8110418c:	1000051e 	bne	r2,zero,811041a4 <bSdmaDmaM2Transfer+0xd8>
81104190:	00000906 	br	811041b8 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104194:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104198:	00800044 	movi	r2,1
8110419c:	e0bff715 	stw	r2,-36(fp)
			break;
811041a0:	00000706 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
811041a4:	00800074 	movhi	r2,1
811041a8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
811041ac:	00800044 	movi	r2,1
811041b0:	e0bff715 	stw	r2,-36(fp)
			break;
811041b4:	00000206 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
811041b8:	e03ff415 	stw	zero,-48(fp)
			break;
811041bc:	0001883a 	nop
		}
		break;
811041c0:	00008706 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
811041c4:	e0bffd03 	ldbu	r2,-12(fp)
811041c8:	10000326 	beq	r2,zero,811041d8 <bSdmaDmaM2Transfer+0x10c>
811041cc:	10800060 	cmpeqi	r2,r2,1
811041d0:	1000061e 	bne	r2,zero,811041ec <bSdmaDmaM2Transfer+0x120>
811041d4:	00000b06 	br	81104204 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
811041d8:	00880004 	movi	r2,8192
811041dc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811041e0:	00800044 	movi	r2,1
811041e4:	e0bff715 	stw	r2,-36(fp)
			break;
811041e8:	00000806 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811041ec:	00800074 	movhi	r2,1
811041f0:	10880004 	addi	r2,r2,8192
811041f4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811041f8:	00800044 	movi	r2,1
811041fc:	e0bff715 	stw	r2,-36(fp)
			break;
81104200:	00000206 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104204:	e03ff415 	stw	zero,-48(fp)
			break;
81104208:	0001883a 	nop
		}
		break;
8110420c:	00007406 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81104210:	e0bffd03 	ldbu	r2,-12(fp)
81104214:	10000326 	beq	r2,zero,81104224 <bSdmaDmaM2Transfer+0x158>
81104218:	10800060 	cmpeqi	r2,r2,1
8110421c:	1000061e 	bne	r2,zero,81104238 <bSdmaDmaM2Transfer+0x16c>
81104220:	00000b06 	br	81104250 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81104224:	00900004 	movi	r2,16384
81104228:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
8110422c:	00800044 	movi	r2,1
81104230:	e0bff715 	stw	r2,-36(fp)
			break;
81104234:	00000806 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81104238:	00800074 	movhi	r2,1
8110423c:	10900004 	addi	r2,r2,16384
81104240:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81104244:	00800044 	movi	r2,1
81104248:	e0bff715 	stw	r2,-36(fp)
			break;
8110424c:	00000206 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
81104250:	e03ff415 	stw	zero,-48(fp)
			break;
81104254:	0001883a 	nop
		}
		break;
81104258:	00006106 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
8110425c:	e0bffd03 	ldbu	r2,-12(fp)
81104260:	10000326 	beq	r2,zero,81104270 <bSdmaDmaM2Transfer+0x1a4>
81104264:	10800060 	cmpeqi	r2,r2,1
81104268:	1000061e 	bne	r2,zero,81104284 <bSdmaDmaM2Transfer+0x1b8>
8110426c:	00000b06 	br	8110429c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104270:	00980004 	movi	r2,24576
81104274:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104278:	00800044 	movi	r2,1
8110427c:	e0bff715 	stw	r2,-36(fp)
			break;
81104280:	00000806 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104284:	00800074 	movhi	r2,1
81104288:	10980004 	addi	r2,r2,24576
8110428c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104290:	00800044 	movi	r2,1
81104294:	e0bff715 	stw	r2,-36(fp)
			break;
81104298:	00000206 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110429c:	e03ff415 	stw	zero,-48(fp)
			break;
811042a0:	0001883a 	nop
		}
		break;
811042a4:	00004e06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
811042a8:	e0bffd03 	ldbu	r2,-12(fp)
811042ac:	10000326 	beq	r2,zero,811042bc <bSdmaDmaM2Transfer+0x1f0>
811042b0:	10800060 	cmpeqi	r2,r2,1
811042b4:	1000061e 	bne	r2,zero,811042d0 <bSdmaDmaM2Transfer+0x204>
811042b8:	00000b06 	br	811042e8 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
811042bc:	00a00014 	movui	r2,32768
811042c0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
811042c4:	00800044 	movi	r2,1
811042c8:	e0bff715 	stw	r2,-36(fp)
			break;
811042cc:	00000806 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811042d0:	008000b4 	movhi	r2,2
811042d4:	10a00004 	addi	r2,r2,-32768
811042d8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811042dc:	00800044 	movi	r2,1
811042e0:	e0bff715 	stw	r2,-36(fp)
			break;
811042e4:	00000206 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
811042e8:	e03ff415 	stw	zero,-48(fp)
			break;
811042ec:	0001883a 	nop
		}
		break;
811042f0:	00003b06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811042f4:	e0bffd03 	ldbu	r2,-12(fp)
811042f8:	10000326 	beq	r2,zero,81104308 <bSdmaDmaM2Transfer+0x23c>
811042fc:	10800060 	cmpeqi	r2,r2,1
81104300:	1000061e 	bne	r2,zero,8110431c <bSdmaDmaM2Transfer+0x250>
81104304:	00000b06 	br	81104334 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104308:	00a80014 	movui	r2,40960
8110430c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81104310:	00800044 	movi	r2,1
81104314:	e0bff715 	stw	r2,-36(fp)
			break;
81104318:	00000806 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
8110431c:	008000b4 	movhi	r2,2
81104320:	10a80004 	addi	r2,r2,-24576
81104324:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81104328:	00800044 	movi	r2,1
8110432c:	e0bff715 	stw	r2,-36(fp)
			break;
81104330:	00000206 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
81104334:	e03ff415 	stw	zero,-48(fp)
			break;
81104338:	0001883a 	nop
		}
		break;
8110433c:	00002806 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81104340:	e0bffd03 	ldbu	r2,-12(fp)
81104344:	10000326 	beq	r2,zero,81104354 <bSdmaDmaM2Transfer+0x288>
81104348:	10800060 	cmpeqi	r2,r2,1
8110434c:	1000061e 	bne	r2,zero,81104368 <bSdmaDmaM2Transfer+0x29c>
81104350:	00000b06 	br	81104380 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81104354:	00b00014 	movui	r2,49152
81104358:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110435c:	00800044 	movi	r2,1
81104360:	e0bff715 	stw	r2,-36(fp)
			break;
81104364:	00000806 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81104368:	008000b4 	movhi	r2,2
8110436c:	10b00004 	addi	r2,r2,-16384
81104370:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104374:	00800044 	movi	r2,1
81104378:	e0bff715 	stw	r2,-36(fp)
			break;
8110437c:	00000206 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104380:	e03ff415 	stw	zero,-48(fp)
			break;
81104384:	0001883a 	nop
		}
		break;
81104388:	00001506 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110438c:	e0bffd03 	ldbu	r2,-12(fp)
81104390:	10000326 	beq	r2,zero,811043a0 <bSdmaDmaM2Transfer+0x2d4>
81104394:	10800060 	cmpeqi	r2,r2,1
81104398:	1000061e 	bne	r2,zero,811043b4 <bSdmaDmaM2Transfer+0x2e8>
8110439c:	00000b06 	br	811043cc <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
811043a0:	00b80014 	movui	r2,57344
811043a4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
811043a8:	00800044 	movi	r2,1
811043ac:	e0bff715 	stw	r2,-36(fp)
			break;
811043b0:	00000806 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
811043b4:	008000b4 	movhi	r2,2
811043b8:	10b80004 	addi	r2,r2,-8192
811043bc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
811043c0:	00800044 	movi	r2,1
811043c4:	e0bff715 	stw	r2,-36(fp)
			break;
811043c8:	00000206 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
811043cc:	e03ff415 	stw	zero,-48(fp)
			break;
811043d0:	0001883a 	nop
		}
		break;
811043d4:	00000206 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
811043d8:	e03ff415 	stw	zero,-48(fp)
		break;
811043dc:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
811043e0:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
811043e4:	00a00034 	movhi	r2,32768
811043e8:	1885883a 	add	r2,r3,r2
811043ec:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811043f0:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
811043f4:	e0bff417 	ldw	r2,-48(fp)
811043f8:	10003b26 	beq	r2,zero,811044e8 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
811043fc:	d0a03a17 	ldw	r2,-32536(gp)
81104400:	1000021e 	bne	r2,zero,8110440c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104404:	e03ff415 	stw	zero,-48(fp)
81104408:	00003706 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110440c:	e03ff50d 	sth	zero,-44(fp)
81104410:	00003206 	br	811044dc <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81104414:	01000044 	movi	r4,1
81104418:	1128dcc0 	call	81128dcc <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110441c:	d0a03a17 	ldw	r2,-32536(gp)
81104420:	10800317 	ldw	r2,12(r2)
81104424:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81104428:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
8110442c:	103ff91e 	bne	r2,zero,81104414 <__reset+0xfb0e4414>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81104430:	d2203a17 	ldw	r8,-32536(gp)
81104434:	e17ff817 	ldw	r5,-32(fp)
81104438:	e1bff617 	ldw	r6,-40(fp)
8110443c:	e0bff917 	ldw	r2,-28(fp)
81104440:	e0fff717 	ldw	r3,-36(fp)
81104444:	01000044 	movi	r4,1
81104448:	d9000815 	stw	r4,32(sp)
8110444c:	01000044 	movi	r4,1
81104450:	d9000715 	stw	r4,28(sp)
81104454:	01000044 	movi	r4,1
81104458:	d9000615 	stw	r4,24(sp)
8110445c:	01000044 	movi	r4,1
81104460:	d9000515 	stw	r4,20(sp)
81104464:	01000044 	movi	r4,1
81104468:	d9000415 	stw	r4,16(sp)
8110446c:	d8c00315 	stw	r3,12(sp)
81104470:	d8800215 	stw	r2,8(sp)
81104474:	e0bffa17 	ldw	r2,-24(fp)
81104478:	d8800115 	stw	r2,4(sp)
8110447c:	00802204 	movi	r2,136
81104480:	d8800015 	stw	r2,0(sp)
81104484:	300f883a 	mov	r7,r6
81104488:	280d883a 	mov	r6,r5
8110448c:	800b883a 	mov	r5,r16
81104490:	4009883a 	mov	r4,r8
81104494:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104498:	10000226 	beq	r2,zero,811044a4 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110449c:	e03ff415 	stw	zero,-48(fp)
					break;
811044a0:	00001106 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
811044a4:	d0a03a17 	ldw	r2,-32536(gp)
811044a8:	800b883a 	mov	r5,r16
811044ac:	1009883a 	mov	r4,r2
811044b0:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
811044b4:	10000226 	beq	r2,zero,811044c0 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
811044b8:	e03ff415 	stw	zero,-48(fp)
						break;
811044bc:	00000a06 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
811044c0:	e0bff817 	ldw	r2,-32(fp)
811044c4:	10802204 	addi	r2,r2,136
811044c8:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811044cc:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811044d0:	e0bff50b 	ldhu	r2,-44(fp)
811044d4:	10800044 	addi	r2,r2,1
811044d8:	e0bff50d 	sth	r2,-44(fp)
811044dc:	e0fff50b 	ldhu	r3,-44(fp)
811044e0:	e0bffc0b 	ldhu	r2,-16(fp)
811044e4:	18bfcd36 	bltu	r3,r2,8110441c <__reset+0xfb0e441c>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811044e8:	e0bff417 	ldw	r2,-48(fp)
}
811044ec:	e6ffff04 	addi	sp,fp,-4
811044f0:	dfc00217 	ldw	ra,8(sp)
811044f4:	df000117 	ldw	fp,4(sp)
811044f8:	dc000017 	ldw	r16,0(sp)
811044fc:	dec00304 	addi	sp,sp,12
81104500:	f800283a 	ret

81104504 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104504:	defffc04 	addi	sp,sp,-16
81104508:	de00012e 	bgeu	sp,et,81104510 <vFeebCh1HandleIrq+0xc>
8110450c:	003b68fa 	trap	3
81104510:	dfc00315 	stw	ra,12(sp)
81104514:	df000215 	stw	fp,8(sp)
81104518:	df000204 	addi	fp,sp,8
8110451c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104520:	e0bfff17 	ldw	r2,-4(fp)
81104524:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
81104528:	11047040 	call	81104704 <vFeebCh1IrqFlagClrBufferEmpty>
}
8110452c:	0001883a 	nop
81104530:	e037883a 	mov	sp,fp
81104534:	dfc00117 	ldw	ra,4(sp)
81104538:	df000017 	ldw	fp,0(sp)
8110453c:	dec00204 	addi	sp,sp,8
81104540:	f800283a 	ret

81104544 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81104544:	defffc04 	addi	sp,sp,-16
81104548:	de00012e 	bgeu	sp,et,81104550 <vFeebCh2HandleIrq+0xc>
8110454c:	003b68fa 	trap	3
81104550:	dfc00315 	stw	ra,12(sp)
81104554:	df000215 	stw	fp,8(sp)
81104558:	df000204 	addi	fp,sp,8
8110455c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104560:	e0bfff17 	ldw	r2,-4(fp)
81104564:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
81104568:	11047480 	call	81104748 <vFeebCh2IrqFlagClrBufferEmpty>
}
8110456c:	0001883a 	nop
81104570:	e037883a 	mov	sp,fp
81104574:	dfc00117 	ldw	ra,4(sp)
81104578:	df000017 	ldw	fp,0(sp)
8110457c:	dec00204 	addi	sp,sp,8
81104580:	f800283a 	ret

81104584 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104584:	defffc04 	addi	sp,sp,-16
81104588:	de00012e 	bgeu	sp,et,81104590 <vFeebCh3HandleIrq+0xc>
8110458c:	003b68fa 	trap	3
81104590:	dfc00315 	stw	ra,12(sp)
81104594:	df000215 	stw	fp,8(sp)
81104598:	df000204 	addi	fp,sp,8
8110459c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045a0:	e0bfff17 	ldw	r2,-4(fp)
811045a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
811045a8:	110478c0 	call	8110478c <vFeebCh3IrqFlagClrBufferEmpty>
}
811045ac:	0001883a 	nop
811045b0:	e037883a 	mov	sp,fp
811045b4:	dfc00117 	ldw	ra,4(sp)
811045b8:	df000017 	ldw	fp,0(sp)
811045bc:	dec00204 	addi	sp,sp,8
811045c0:	f800283a 	ret

811045c4 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
811045c4:	defffc04 	addi	sp,sp,-16
811045c8:	de00012e 	bgeu	sp,et,811045d0 <vFeebCh4HandleIrq+0xc>
811045cc:	003b68fa 	trap	3
811045d0:	dfc00315 	stw	ra,12(sp)
811045d4:	df000215 	stw	fp,8(sp)
811045d8:	df000204 	addi	fp,sp,8
811045dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045e0:	e0bfff17 	ldw	r2,-4(fp)
811045e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
811045e8:	11047d00 	call	811047d0 <vFeebCh4IrqFlagClrBufferEmpty>
}
811045ec:	0001883a 	nop
811045f0:	e037883a 	mov	sp,fp
811045f4:	dfc00117 	ldw	ra,4(sp)
811045f8:	df000017 	ldw	fp,0(sp)
811045fc:	dec00204 	addi	sp,sp,8
81104600:	f800283a 	ret

81104604 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104604:	defffc04 	addi	sp,sp,-16
81104608:	de00012e 	bgeu	sp,et,81104610 <vFeebCh5HandleIrq+0xc>
8110460c:	003b68fa 	trap	3
81104610:	dfc00315 	stw	ra,12(sp)
81104614:	df000215 	stw	fp,8(sp)
81104618:	df000204 	addi	fp,sp,8
8110461c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104620:	e0bfff17 	ldw	r2,-4(fp)
81104624:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
81104628:	11048140 	call	81104814 <vFeebCh5IrqFlagClrBufferEmpty>
}
8110462c:	0001883a 	nop
81104630:	e037883a 	mov	sp,fp
81104634:	dfc00117 	ldw	ra,4(sp)
81104638:	df000017 	ldw	fp,0(sp)
8110463c:	dec00204 	addi	sp,sp,8
81104640:	f800283a 	ret

81104644 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
81104644:	defffc04 	addi	sp,sp,-16
81104648:	de00012e 	bgeu	sp,et,81104650 <vFeebCh6HandleIrq+0xc>
8110464c:	003b68fa 	trap	3
81104650:	dfc00315 	stw	ra,12(sp)
81104654:	df000215 	stw	fp,8(sp)
81104658:	df000204 	addi	fp,sp,8
8110465c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104660:	e0bfff17 	ldw	r2,-4(fp)
81104664:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
81104668:	11048580 	call	81104858 <vFeebCh6IrqFlagClrBufferEmpty>
}
8110466c:	0001883a 	nop
81104670:	e037883a 	mov	sp,fp
81104674:	dfc00117 	ldw	ra,4(sp)
81104678:	df000017 	ldw	fp,0(sp)
8110467c:	dec00204 	addi	sp,sp,8
81104680:	f800283a 	ret

81104684 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104684:	defffc04 	addi	sp,sp,-16
81104688:	de00012e 	bgeu	sp,et,81104690 <vFeebCh7HandleIrq+0xc>
8110468c:	003b68fa 	trap	3
81104690:	dfc00315 	stw	ra,12(sp)
81104694:	df000215 	stw	fp,8(sp)
81104698:	df000204 	addi	fp,sp,8
8110469c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046a0:	e0bfff17 	ldw	r2,-4(fp)
811046a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
811046a8:	110489c0 	call	8110489c <vFeebCh7IrqFlagClrBufferEmpty>
}
811046ac:	0001883a 	nop
811046b0:	e037883a 	mov	sp,fp
811046b4:	dfc00117 	ldw	ra,4(sp)
811046b8:	df000017 	ldw	fp,0(sp)
811046bc:	dec00204 	addi	sp,sp,8
811046c0:	f800283a 	ret

811046c4 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
811046c4:	defffc04 	addi	sp,sp,-16
811046c8:	de00012e 	bgeu	sp,et,811046d0 <vFeebCh8HandleIrq+0xc>
811046cc:	003b68fa 	trap	3
811046d0:	dfc00315 	stw	ra,12(sp)
811046d4:	df000215 	stw	fp,8(sp)
811046d8:	df000204 	addi	fp,sp,8
811046dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046e0:	e0bfff17 	ldw	r2,-4(fp)
811046e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
811046e8:	11048e00 	call	811048e0 <vFeebCh8IrqFlagClrBufferEmpty>
}
811046ec:	0001883a 	nop
811046f0:	e037883a 	mov	sp,fp
811046f4:	dfc00117 	ldw	ra,4(sp)
811046f8:	df000017 	ldw	fp,0(sp)
811046fc:	dec00204 	addi	sp,sp,8
81104700:	f800283a 	ret

81104704 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104704:	defffe04 	addi	sp,sp,-8
81104708:	de00012e 	bgeu	sp,et,81104710 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110470c:	003b68fa 	trap	3
81104710:	dfc00115 	stw	ra,4(sp)
81104714:	df000015 	stw	fp,0(sp)
81104718:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110471c:	01800044 	movi	r6,1
81104720:	01400144 	movi	r5,5
81104724:	01204834 	movhi	r4,33056
81104728:	210b0004 	addi	r4,r4,11264
8110472c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104730:	0001883a 	nop
81104734:	e037883a 	mov	sp,fp
81104738:	dfc00117 	ldw	ra,4(sp)
8110473c:	df000017 	ldw	fp,0(sp)
81104740:	dec00204 	addi	sp,sp,8
81104744:	f800283a 	ret

81104748 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81104748:	defffe04 	addi	sp,sp,-8
8110474c:	de00012e 	bgeu	sp,et,81104754 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
81104750:	003b68fa 	trap	3
81104754:	dfc00115 	stw	ra,4(sp)
81104758:	df000015 	stw	fp,0(sp)
8110475c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104760:	01800044 	movi	r6,1
81104764:	01400144 	movi	r5,5
81104768:	01204834 	movhi	r4,33056
8110476c:	210a0004 	addi	r4,r4,10240
81104770:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104774:	0001883a 	nop
81104778:	e037883a 	mov	sp,fp
8110477c:	dfc00117 	ldw	ra,4(sp)
81104780:	df000017 	ldw	fp,0(sp)
81104784:	dec00204 	addi	sp,sp,8
81104788:	f800283a 	ret

8110478c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110478c:	defffe04 	addi	sp,sp,-8
81104790:	de00012e 	bgeu	sp,et,81104798 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104794:	003b68fa 	trap	3
81104798:	dfc00115 	stw	ra,4(sp)
8110479c:	df000015 	stw	fp,0(sp)
811047a0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811047a4:	01800044 	movi	r6,1
811047a8:	01400144 	movi	r5,5
811047ac:	01204834 	movhi	r4,33056
811047b0:	21090004 	addi	r4,r4,9216
811047b4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047b8:	0001883a 	nop
811047bc:	e037883a 	mov	sp,fp
811047c0:	dfc00117 	ldw	ra,4(sp)
811047c4:	df000017 	ldw	fp,0(sp)
811047c8:	dec00204 	addi	sp,sp,8
811047cc:	f800283a 	ret

811047d0 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
811047d0:	defffe04 	addi	sp,sp,-8
811047d4:	de00012e 	bgeu	sp,et,811047dc <vFeebCh4IrqFlagClrBufferEmpty+0xc>
811047d8:	003b68fa 	trap	3
811047dc:	dfc00115 	stw	ra,4(sp)
811047e0:	df000015 	stw	fp,0(sp)
811047e4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811047e8:	01800044 	movi	r6,1
811047ec:	01400144 	movi	r5,5
811047f0:	01204834 	movhi	r4,33056
811047f4:	21080004 	addi	r4,r4,8192
811047f8:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047fc:	0001883a 	nop
81104800:	e037883a 	mov	sp,fp
81104804:	dfc00117 	ldw	ra,4(sp)
81104808:	df000017 	ldw	fp,0(sp)
8110480c:	dec00204 	addi	sp,sp,8
81104810:	f800283a 	ret

81104814 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
81104814:	defffe04 	addi	sp,sp,-8
81104818:	de00012e 	bgeu	sp,et,81104820 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
8110481c:	003b68fa 	trap	3
81104820:	dfc00115 	stw	ra,4(sp)
81104824:	df000015 	stw	fp,0(sp)
81104828:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
8110482c:	01800044 	movi	r6,1
81104830:	01400144 	movi	r5,5
81104834:	01204834 	movhi	r4,33056
81104838:	21070004 	addi	r4,r4,7168
8110483c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104840:	0001883a 	nop
81104844:	e037883a 	mov	sp,fp
81104848:	dfc00117 	ldw	ra,4(sp)
8110484c:	df000017 	ldw	fp,0(sp)
81104850:	dec00204 	addi	sp,sp,8
81104854:	f800283a 	ret

81104858 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
81104858:	defffe04 	addi	sp,sp,-8
8110485c:	de00012e 	bgeu	sp,et,81104864 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
81104860:	003b68fa 	trap	3
81104864:	dfc00115 	stw	ra,4(sp)
81104868:	df000015 	stw	fp,0(sp)
8110486c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104870:	01800044 	movi	r6,1
81104874:	01400144 	movi	r5,5
81104878:	01204834 	movhi	r4,33056
8110487c:	21060004 	addi	r4,r4,6144
81104880:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104884:	0001883a 	nop
81104888:	e037883a 	mov	sp,fp
8110488c:	dfc00117 	ldw	ra,4(sp)
81104890:	df000017 	ldw	fp,0(sp)
81104894:	dec00204 	addi	sp,sp,8
81104898:	f800283a 	ret

8110489c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110489c:	defffe04 	addi	sp,sp,-8
811048a0:	de00012e 	bgeu	sp,et,811048a8 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
811048a4:	003b68fa 	trap	3
811048a8:	dfc00115 	stw	ra,4(sp)
811048ac:	df000015 	stw	fp,0(sp)
811048b0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811048b4:	01800044 	movi	r6,1
811048b8:	01400144 	movi	r5,5
811048bc:	01204834 	movhi	r4,33056
811048c0:	21050004 	addi	r4,r4,5120
811048c4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811048c8:	0001883a 	nop
811048cc:	e037883a 	mov	sp,fp
811048d0:	dfc00117 	ldw	ra,4(sp)
811048d4:	df000017 	ldw	fp,0(sp)
811048d8:	dec00204 	addi	sp,sp,8
811048dc:	f800283a 	ret

811048e0 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
811048e0:	defffe04 	addi	sp,sp,-8
811048e4:	de00012e 	bgeu	sp,et,811048ec <vFeebCh8IrqFlagClrBufferEmpty+0xc>
811048e8:	003b68fa 	trap	3
811048ec:	dfc00115 	stw	ra,4(sp)
811048f0:	df000015 	stw	fp,0(sp)
811048f4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811048f8:	01800044 	movi	r6,1
811048fc:	01400144 	movi	r5,5
81104900:	01204834 	movhi	r4,33056
81104904:	21040004 	addi	r4,r4,4096
81104908:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110490c:	0001883a 	nop
81104910:	e037883a 	mov	sp,fp
81104914:	dfc00117 	ldw	ra,4(sp)
81104918:	df000017 	ldw	fp,0(sp)
8110491c:	dec00204 	addi	sp,sp,8
81104920:	f800283a 	ret

81104924 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
81104924:	defffd04 	addi	sp,sp,-12
81104928:	de00012e 	bgeu	sp,et,81104930 <bFeebCh1IrqFlagBufferEmpty+0xc>
8110492c:	003b68fa 	trap	3
81104930:	dfc00215 	stw	ra,8(sp)
81104934:	df000115 	stw	fp,4(sp)
81104938:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110493c:	01400144 	movi	r5,5
81104940:	01204834 	movhi	r4,33056
81104944:	210b0004 	addi	r4,r4,11264
81104948:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110494c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104950:	10000326 	beq	r2,zero,81104960 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104954:	00800044 	movi	r2,1
81104958:	e0bfff15 	stw	r2,-4(fp)
8110495c:	00000106 	br	81104964 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104960:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104964:	e0bfff17 	ldw	r2,-4(fp)
}
81104968:	e037883a 	mov	sp,fp
8110496c:	dfc00117 	ldw	ra,4(sp)
81104970:	df000017 	ldw	fp,0(sp)
81104974:	dec00204 	addi	sp,sp,8
81104978:	f800283a 	ret

8110497c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110497c:	defffd04 	addi	sp,sp,-12
81104980:	de00012e 	bgeu	sp,et,81104988 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104984:	003b68fa 	trap	3
81104988:	dfc00215 	stw	ra,8(sp)
8110498c:	df000115 	stw	fp,4(sp)
81104990:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104994:	01400144 	movi	r5,5
81104998:	01204834 	movhi	r4,33056
8110499c:	210a0004 	addi	r4,r4,10240
811049a0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049a4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811049a8:	10000326 	beq	r2,zero,811049b8 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bfff15 	stw	r2,-4(fp)
811049b4:	00000106 	br	811049bc <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049b8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049bc:	e0bfff17 	ldw	r2,-4(fp)
}
811049c0:	e037883a 	mov	sp,fp
811049c4:	dfc00117 	ldw	ra,4(sp)
811049c8:	df000017 	ldw	fp,0(sp)
811049cc:	dec00204 	addi	sp,sp,8
811049d0:	f800283a 	ret

811049d4 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
811049d4:	defffd04 	addi	sp,sp,-12
811049d8:	de00012e 	bgeu	sp,et,811049e0 <bFeebCh3IrqFlagBufferEmpty+0xc>
811049dc:	003b68fa 	trap	3
811049e0:	dfc00215 	stw	ra,8(sp)
811049e4:	df000115 	stw	fp,4(sp)
811049e8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811049ec:	01400144 	movi	r5,5
811049f0:	01204834 	movhi	r4,33056
811049f4:	21090004 	addi	r4,r4,9216
811049f8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049fc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104a00:	10000326 	beq	r2,zero,81104a10 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a04:	00800044 	movi	r2,1
81104a08:	e0bfff15 	stw	r2,-4(fp)
81104a0c:	00000106 	br	81104a14 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a10:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a14:	e0bfff17 	ldw	r2,-4(fp)
}
81104a18:	e037883a 	mov	sp,fp
81104a1c:	dfc00117 	ldw	ra,4(sp)
81104a20:	df000017 	ldw	fp,0(sp)
81104a24:	dec00204 	addi	sp,sp,8
81104a28:	f800283a 	ret

81104a2c <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
81104a2c:	defffd04 	addi	sp,sp,-12
81104a30:	de00012e 	bgeu	sp,et,81104a38 <bFeebCh4IrqFlagBufferEmpty+0xc>
81104a34:	003b68fa 	trap	3
81104a38:	dfc00215 	stw	ra,8(sp)
81104a3c:	df000115 	stw	fp,4(sp)
81104a40:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a44:	01400144 	movi	r5,5
81104a48:	01204834 	movhi	r4,33056
81104a4c:	21080004 	addi	r4,r4,8192
81104a50:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a54:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a58:	10000326 	beq	r2,zero,81104a68 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a5c:	00800044 	movi	r2,1
81104a60:	e0bfff15 	stw	r2,-4(fp)
81104a64:	00000106 	br	81104a6c <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a68:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a6c:	e0bfff17 	ldw	r2,-4(fp)
}
81104a70:	e037883a 	mov	sp,fp
81104a74:	dfc00117 	ldw	ra,4(sp)
81104a78:	df000017 	ldw	fp,0(sp)
81104a7c:	dec00204 	addi	sp,sp,8
81104a80:	f800283a 	ret

81104a84 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a84:	defffd04 	addi	sp,sp,-12
81104a88:	de00012e 	bgeu	sp,et,81104a90 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a8c:	003b68fa 	trap	3
81104a90:	dfc00215 	stw	ra,8(sp)
81104a94:	df000115 	stw	fp,4(sp)
81104a98:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a9c:	01400144 	movi	r5,5
81104aa0:	01204834 	movhi	r4,33056
81104aa4:	21070004 	addi	r4,r4,7168
81104aa8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aac:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104ab0:	10000326 	beq	r2,zero,81104ac0 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104ab4:	00800044 	movi	r2,1
81104ab8:	e0bfff15 	stw	r2,-4(fp)
81104abc:	00000106 	br	81104ac4 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104ac0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104ac4:	e0bfff17 	ldw	r2,-4(fp)
}
81104ac8:	e037883a 	mov	sp,fp
81104acc:	dfc00117 	ldw	ra,4(sp)
81104ad0:	df000017 	ldw	fp,0(sp)
81104ad4:	dec00204 	addi	sp,sp,8
81104ad8:	f800283a 	ret

81104adc <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104adc:	defffd04 	addi	sp,sp,-12
81104ae0:	de00012e 	bgeu	sp,et,81104ae8 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104ae4:	003b68fa 	trap	3
81104ae8:	dfc00215 	stw	ra,8(sp)
81104aec:	df000115 	stw	fp,4(sp)
81104af0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104af4:	01400144 	movi	r5,5
81104af8:	01204834 	movhi	r4,33056
81104afc:	21060004 	addi	r4,r4,6144
81104b00:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b04:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104b08:	10000326 	beq	r2,zero,81104b18 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bfff15 	stw	r2,-4(fp)
81104b14:	00000106 	br	81104b1c <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b18:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b1c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b20:	e037883a 	mov	sp,fp
81104b24:	dfc00117 	ldw	ra,4(sp)
81104b28:	df000017 	ldw	fp,0(sp)
81104b2c:	dec00204 	addi	sp,sp,8
81104b30:	f800283a 	ret

81104b34 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104b34:	defffd04 	addi	sp,sp,-12
81104b38:	de00012e 	bgeu	sp,et,81104b40 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104b3c:	003b68fa 	trap	3
81104b40:	dfc00215 	stw	ra,8(sp)
81104b44:	df000115 	stw	fp,4(sp)
81104b48:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b4c:	01400144 	movi	r5,5
81104b50:	01204834 	movhi	r4,33056
81104b54:	21050004 	addi	r4,r4,5120
81104b58:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b5c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b60:	10000326 	beq	r2,zero,81104b70 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b64:	00800044 	movi	r2,1
81104b68:	e0bfff15 	stw	r2,-4(fp)
81104b6c:	00000106 	br	81104b74 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b70:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b74:	e0bfff17 	ldw	r2,-4(fp)
}
81104b78:	e037883a 	mov	sp,fp
81104b7c:	dfc00117 	ldw	ra,4(sp)
81104b80:	df000017 	ldw	fp,0(sp)
81104b84:	dec00204 	addi	sp,sp,8
81104b88:	f800283a 	ret

81104b8c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b8c:	defffd04 	addi	sp,sp,-12
81104b90:	de00012e 	bgeu	sp,et,81104b98 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b94:	003b68fa 	trap	3
81104b98:	dfc00215 	stw	ra,8(sp)
81104b9c:	df000115 	stw	fp,4(sp)
81104ba0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ba4:	01400144 	movi	r5,5
81104ba8:	01204834 	movhi	r4,33056
81104bac:	21040004 	addi	r4,r4,4096
81104bb0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104bb4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104bb8:	10000326 	beq	r2,zero,81104bc8 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104bbc:	00800044 	movi	r2,1
81104bc0:	e0bfff15 	stw	r2,-4(fp)
81104bc4:	00000106 	br	81104bcc <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104bc8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104bcc:	e0bfff17 	ldw	r2,-4(fp)
}
81104bd0:	e037883a 	mov	sp,fp
81104bd4:	dfc00117 	ldw	ra,4(sp)
81104bd8:	df000017 	ldw	fp,0(sp)
81104bdc:	dec00204 	addi	sp,sp,8
81104be0:	f800283a 	ret

81104be4 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104be4:	defffc04 	addi	sp,sp,-16
81104be8:	de00012e 	bgeu	sp,et,81104bf0 <vFeebInitIrq+0xc>
81104bec:	003b68fa 	trap	3
81104bf0:	dfc00315 	stw	ra,12(sp)
81104bf4:	df000215 	stw	fp,8(sp)
81104bf8:	df000204 	addi	fp,sp,8
81104bfc:	2005883a 	mov	r2,r4
81104c00:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104c04:	e0bfff03 	ldbu	r2,-4(fp)
81104c08:	10c00268 	cmpgeui	r3,r2,9
81104c0c:	18004f1e 	bne	r3,zero,81104d4c <vFeebInitIrq+0x168>
81104c10:	100690ba 	slli	r3,r2,2
81104c14:	00a04434 	movhi	r2,33040
81104c18:	10930a04 	addi	r2,r2,19496
81104c1c:	1885883a 	add	r2,r3,r2
81104c20:	10800017 	ldw	r2,0(r2)
81104c24:	1000683a 	jmp	r2
81104c28:	81104d4c 	andi	r4,r16,16693
81104c2c:	81104c4c 	andi	r4,r16,16689
81104c30:	81104c6c 	andhi	r4,r16,16689
81104c34:	81104c8c 	andi	r4,r16,16690
81104c38:	81104cac 	andhi	r4,r16,16690
81104c3c:	81104ccc 	andi	r4,r16,16691
81104c40:	81104cec 	andhi	r4,r16,16691
81104c44:	81104d0c 	andi	r4,r16,16692
81104c48:	81104d2c 	andhi	r4,r16,16692
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104c4c:	d0a03e04 	addi	r2,gp,-32520
81104c50:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104c54:	01a04434 	movhi	r6,33040
81104c58:	31914104 	addi	r6,r6,17668
81104c5c:	e17ffe17 	ldw	r5,-8(fp)
81104c60:	01000084 	movi	r4,2
81104c64:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104c68:	00003806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104c6c:	d0a03f04 	addi	r2,gp,-32516
81104c70:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c74:	01a04434 	movhi	r6,33040
81104c78:	31915104 	addi	r6,r6,17732
81104c7c:	e17ffe17 	ldw	r5,-8(fp)
81104c80:	010000c4 	movi	r4,3
81104c84:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c88:	00003006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c8c:	d0a04004 	addi	r2,gp,-32512
81104c90:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c94:	01a04434 	movhi	r6,33040
81104c98:	31916104 	addi	r6,r6,17796
81104c9c:	e17ffe17 	ldw	r5,-8(fp)
81104ca0:	01000104 	movi	r4,4
81104ca4:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104ca8:	00002806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104cac:	d0a04104 	addi	r2,gp,-32508
81104cb0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104cb4:	01a04434 	movhi	r6,33040
81104cb8:	31917104 	addi	r6,r6,17860
81104cbc:	e17ffe17 	ldw	r5,-8(fp)
81104cc0:	01000204 	movi	r4,8
81104cc4:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104cc8:	00002006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104ccc:	d0a04204 	addi	r2,gp,-32504
81104cd0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104cd4:	01a04434 	movhi	r6,33040
81104cd8:	31918104 	addi	r6,r6,17924
81104cdc:	e17ffe17 	ldw	r5,-8(fp)
81104ce0:	010001c4 	movi	r4,7
81104ce4:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104ce8:	00001806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104cec:	d0a04304 	addi	r2,gp,-32500
81104cf0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104cf4:	01a04434 	movhi	r6,33040
81104cf8:	31919104 	addi	r6,r6,17988
81104cfc:	e17ffe17 	ldw	r5,-8(fp)
81104d00:	01000184 	movi	r4,6
81104d04:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104d08:	00001006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104d0c:	d0a04404 	addi	r2,gp,-32496
81104d10:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104d14:	01a04434 	movhi	r6,33040
81104d18:	3191a104 	addi	r6,r6,18052
81104d1c:	e17ffe17 	ldw	r5,-8(fp)
81104d20:	01000144 	movi	r4,5
81104d24:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104d28:	00000806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104d2c:	d0a04504 	addi	r2,gp,-32492
81104d30:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104d34:	01a04434 	movhi	r6,33040
81104d38:	3191b104 	addi	r6,r6,18116
81104d3c:	e17ffe17 	ldw	r5,-8(fp)
81104d40:	01000244 	movi	r4,9
81104d44:	11291700 	call	81129170 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104d48:	0001883a 	nop
	}
}
81104d4c:	0001883a 	nop
81104d50:	e037883a 	mov	sp,fp
81104d54:	dfc00117 	ldw	ra,4(sp)
81104d58:	df000017 	ldw	fp,0(sp)
81104d5c:	dec00204 	addi	sp,sp,8
81104d60:	f800283a 	ret

81104d64 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104d64:	defffb04 	addi	sp,sp,-20
81104d68:	de00012e 	bgeu	sp,et,81104d70 <bFeebSetIrqControl+0xc>
81104d6c:	003b68fa 	trap	3
81104d70:	dfc00415 	stw	ra,16(sp)
81104d74:	df000315 	stw	fp,12(sp)
81104d78:	df000304 	addi	fp,sp,12
81104d7c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d80:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d84:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d88:	e0bfff17 	ldw	r2,-4(fp)
81104d8c:	10002426 	beq	r2,zero,81104e20 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	01400104 	movi	r5,4
81104d9c:	1009883a 	mov	r4,r2
81104da0:	110519c0 	call	8110519c <uliFeebReadReg>
81104da4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104da8:	e0bfff17 	ldw	r2,-4(fp)
81104dac:	10800217 	ldw	r2,8(r2)
81104db0:	10000426 	beq	r2,zero,81104dc4 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104db4:	e0bffe17 	ldw	r2,-8(fp)
81104db8:	10804014 	ori	r2,r2,256
81104dbc:	e0bffe15 	stw	r2,-8(fp)
81104dc0:	00000406 	br	81104dd4 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104dc4:	e0fffe17 	ldw	r3,-8(fp)
81104dc8:	00bfbfc4 	movi	r2,-257
81104dcc:	1884703a 	and	r2,r3,r2
81104dd0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104dd4:	e0bfff17 	ldw	r2,-4(fp)
81104dd8:	10800317 	ldw	r2,12(r2)
81104ddc:	10000426 	beq	r2,zero,81104df0 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104de0:	e0bffe17 	ldw	r2,-8(fp)
81104de4:	10800054 	ori	r2,r2,1
81104de8:	e0bffe15 	stw	r2,-8(fp)
81104dec:	00000406 	br	81104e00 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104df0:	e0fffe17 	ldw	r3,-8(fp)
81104df4:	00bfff84 	movi	r2,-2
81104df8:	1884703a 	and	r2,r3,r2
81104dfc:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104e00:	e0bfff17 	ldw	r2,-4(fp)
81104e04:	10800017 	ldw	r2,0(r2)
81104e08:	e1bffe17 	ldw	r6,-8(fp)
81104e0c:	01400104 	movi	r5,4
81104e10:	1009883a 	mov	r4,r2
81104e14:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104e18:	00800044 	movi	r2,1
81104e1c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e20:	e0bffd17 	ldw	r2,-12(fp)
}
81104e24:	e037883a 	mov	sp,fp
81104e28:	dfc00117 	ldw	ra,4(sp)
81104e2c:	df000017 	ldw	fp,0(sp)
81104e30:	dec00204 	addi	sp,sp,8
81104e34:	f800283a 	ret

81104e38 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104e38:	defffb04 	addi	sp,sp,-20
81104e3c:	de00012e 	bgeu	sp,et,81104e44 <bFeebGetIrqControl+0xc>
81104e40:	003b68fa 	trap	3
81104e44:	dfc00415 	stw	ra,16(sp)
81104e48:	df000315 	stw	fp,12(sp)
81104e4c:	df000304 	addi	fp,sp,12
81104e50:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e54:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e58:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e5c:	e0bfff17 	ldw	r2,-4(fp)
81104e60:	10001a26 	beq	r2,zero,81104ecc <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104e64:	e0bfff17 	ldw	r2,-4(fp)
81104e68:	10800017 	ldw	r2,0(r2)
81104e6c:	01400104 	movi	r5,4
81104e70:	1009883a 	mov	r4,r2
81104e74:	110519c0 	call	8110519c <uliFeebReadReg>
81104e78:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e7c:	e0bffe17 	ldw	r2,-8(fp)
81104e80:	1080400c 	andi	r2,r2,256
81104e84:	10000426 	beq	r2,zero,81104e98 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e88:	e0bfff17 	ldw	r2,-4(fp)
81104e8c:	00c00044 	movi	r3,1
81104e90:	10c00215 	stw	r3,8(r2)
81104e94:	00000206 	br	81104ea0 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104ea0:	e0bffe17 	ldw	r2,-8(fp)
81104ea4:	1080004c 	andi	r2,r2,1
81104ea8:	10000426 	beq	r2,zero,81104ebc <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104eac:	e0bfff17 	ldw	r2,-4(fp)
81104eb0:	00c00044 	movi	r3,1
81104eb4:	10c00315 	stw	r3,12(r2)
81104eb8:	00000206 	br	81104ec4 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104ebc:	e0bfff17 	ldw	r2,-4(fp)
81104ec0:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104ec4:	00800044 	movi	r2,1
81104ec8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ecc:	e0bffd17 	ldw	r2,-12(fp)
}
81104ed0:	e037883a 	mov	sp,fp
81104ed4:	dfc00117 	ldw	ra,4(sp)
81104ed8:	df000017 	ldw	fp,0(sp)
81104edc:	dec00204 	addi	sp,sp,8
81104ee0:	f800283a 	ret

81104ee4 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104ee4:	defffb04 	addi	sp,sp,-20
81104ee8:	de00012e 	bgeu	sp,et,81104ef0 <bFeebGetIrqFlags+0xc>
81104eec:	003b68fa 	trap	3
81104ef0:	dfc00415 	stw	ra,16(sp)
81104ef4:	df000315 	stw	fp,12(sp)
81104ef8:	df000304 	addi	fp,sp,12
81104efc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f04:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f08:	e0bfff17 	ldw	r2,-4(fp)
81104f0c:	10001126 	beq	r2,zero,81104f54 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f10:	e0bfff17 	ldw	r2,-4(fp)
81104f14:	10800017 	ldw	r2,0(r2)
81104f18:	01400144 	movi	r5,5
81104f1c:	1009883a 	mov	r4,r2
81104f20:	110519c0 	call	8110519c <uliFeebReadReg>
81104f24:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104f28:	e0bffe17 	ldw	r2,-8(fp)
81104f2c:	1080004c 	andi	r2,r2,1
81104f30:	10000426 	beq	r2,zero,81104f44 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104f34:	e0bfff17 	ldw	r2,-4(fp)
81104f38:	00c00044 	movi	r3,1
81104f3c:	10c00415 	stw	r3,16(r2)
81104f40:	00000206 	br	81104f4c <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104f44:	e0bfff17 	ldw	r2,-4(fp)
81104f48:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104f4c:	00800044 	movi	r2,1
81104f50:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f54:	e0bffd17 	ldw	r2,-12(fp)
}
81104f58:	e037883a 	mov	sp,fp
81104f5c:	dfc00117 	ldw	ra,4(sp)
81104f60:	df000017 	ldw	fp,0(sp)
81104f64:	dec00204 	addi	sp,sp,8
81104f68:	f800283a 	ret

81104f6c <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104f6c:	defffb04 	addi	sp,sp,-20
81104f70:	de00012e 	bgeu	sp,et,81104f78 <bFeebSetWindowing+0xc>
81104f74:	003b68fa 	trap	3
81104f78:	dfc00415 	stw	ra,16(sp)
81104f7c:	df000315 	stw	fp,12(sp)
81104f80:	df000304 	addi	fp,sp,12
81104f84:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f88:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f8c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f90:	e0bfff17 	ldw	r2,-4(fp)
81104f94:	10001926 	beq	r2,zero,81104ffc <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f98:	e0bfff17 	ldw	r2,-4(fp)
81104f9c:	10800017 	ldw	r2,0(r2)
81104fa0:	000b883a 	mov	r5,zero
81104fa4:	1009883a 	mov	r4,r2
81104fa8:	110519c0 	call	8110519c <uliFeebReadReg>
81104fac:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	10800117 	ldw	r2,4(r2)
81104fb8:	10000426 	beq	r2,zero,81104fcc <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104fbc:	e0bffe17 	ldw	r2,-8(fp)
81104fc0:	10804014 	ori	r2,r2,256
81104fc4:	e0bffe15 	stw	r2,-8(fp)
81104fc8:	00000406 	br	81104fdc <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104fcc:	e0fffe17 	ldw	r3,-8(fp)
81104fd0:	00bfbfc4 	movi	r2,-257
81104fd4:	1884703a 	and	r2,r3,r2
81104fd8:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104fdc:	e0bfff17 	ldw	r2,-4(fp)
81104fe0:	10800017 	ldw	r2,0(r2)
81104fe4:	e1bffe17 	ldw	r6,-8(fp)
81104fe8:	000b883a 	mov	r5,zero
81104fec:	1009883a 	mov	r4,r2
81104ff0:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104ff4:	00800044 	movi	r2,1
81104ff8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ffc:	e0bffd17 	ldw	r2,-12(fp)
}
81105000:	e037883a 	mov	sp,fp
81105004:	dfc00117 	ldw	ra,4(sp)
81105008:	df000017 	ldw	fp,0(sp)
8110500c:	dec00204 	addi	sp,sp,8
81105010:	f800283a 	ret

81105014 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81105014:	defffb04 	addi	sp,sp,-20
81105018:	de00012e 	bgeu	sp,et,81105020 <bFeebGetWindowing+0xc>
8110501c:	003b68fa 	trap	3
81105020:	dfc00415 	stw	ra,16(sp)
81105024:	df000315 	stw	fp,12(sp)
81105028:	df000304 	addi	fp,sp,12
8110502c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105030:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105034:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105038:	e0bfff17 	ldw	r2,-4(fp)
8110503c:	10001126 	beq	r2,zero,81105084 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105040:	e0bfff17 	ldw	r2,-4(fp)
81105044:	10800017 	ldw	r2,0(r2)
81105048:	000b883a 	mov	r5,zero
8110504c:	1009883a 	mov	r4,r2
81105050:	110519c0 	call	8110519c <uliFeebReadReg>
81105054:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81105058:	e0bffe17 	ldw	r2,-8(fp)
8110505c:	1080400c 	andi	r2,r2,256
81105060:	10000426 	beq	r2,zero,81105074 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81105064:	e0bfff17 	ldw	r2,-4(fp)
81105068:	00c00044 	movi	r3,1
8110506c:	10c00115 	stw	r3,4(r2)
81105070:	00000206 	br	8110507c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105074:	e0bfff17 	ldw	r2,-4(fp)
81105078:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110507c:	00800044 	movi	r2,1
81105080:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105084:	e0bffd17 	ldw	r2,-12(fp)
}
81105088:	e037883a 	mov	sp,fp
8110508c:	dfc00117 	ldw	ra,4(sp)
81105090:	df000017 	ldw	fp,0(sp)
81105094:	dec00204 	addi	sp,sp,8
81105098:	f800283a 	ret

8110509c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110509c:	defffb04 	addi	sp,sp,-20
811050a0:	de00012e 	bgeu	sp,et,811050a8 <bFeebGetBuffersStatus+0xc>
811050a4:	003b68fa 	trap	3
811050a8:	dfc00415 	stw	ra,16(sp)
811050ac:	df000315 	stw	fp,12(sp)
811050b0:	df000304 	addi	fp,sp,12
811050b4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811050b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811050bc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811050c0:	e0bfff17 	ldw	r2,-4(fp)
811050c4:	10001a26 	beq	r2,zero,81105130 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811050c8:	e0bfff17 	ldw	r2,-4(fp)
811050cc:	10800017 	ldw	r2,0(r2)
811050d0:	01400184 	movi	r5,6
811050d4:	1009883a 	mov	r4,r2
811050d8:	110519c0 	call	8110519c <uliFeebReadReg>
811050dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
811050e0:	e0bffe17 	ldw	r2,-8(fp)
811050e4:	1080400c 	andi	r2,r2,256
811050e8:	10000426 	beq	r2,zero,811050fc <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
811050ec:	e0bfff17 	ldw	r2,-4(fp)
811050f0:	00c00044 	movi	r3,1
811050f4:	10c00515 	stw	r3,20(r2)
811050f8:	00000206 	br	81105104 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
811050fc:	e0bfff17 	ldw	r2,-4(fp)
81105100:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105104:	e0bffe17 	ldw	r2,-8(fp)
81105108:	1080004c 	andi	r2,r2,1
8110510c:	10000426 	beq	r2,zero,81105120 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81105110:	e0bfff17 	ldw	r2,-4(fp)
81105114:	00c00044 	movi	r3,1
81105118:	10c00615 	stw	r3,24(r2)
8110511c:	00000206 	br	81105128 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81105120:	e0bfff17 	ldw	r2,-4(fp)
81105124:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
81105128:	00800044 	movi	r2,1
8110512c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105130:	e0bffd17 	ldw	r2,-12(fp)
}
81105134:	e037883a 	mov	sp,fp
81105138:	dfc00117 	ldw	ra,4(sp)
8110513c:	df000017 	ldw	fp,0(sp)
81105140:	dec00204 	addi	sp,sp,8
81105144:	f800283a 	ret

81105148 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105148:	defffc04 	addi	sp,sp,-16
8110514c:	de00012e 	bgeu	sp,et,81105154 <vFeebWriteReg+0xc>
81105150:	003b68fa 	trap	3
81105154:	df000315 	stw	fp,12(sp)
81105158:	df000304 	addi	fp,sp,12
8110515c:	e13ffd15 	stw	r4,-12(fp)
81105160:	e17ffe15 	stw	r5,-8(fp)
81105164:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105168:	e0bffe17 	ldw	r2,-8(fp)
8110516c:	1085883a 	add	r2,r2,r2
81105170:	1085883a 	add	r2,r2,r2
81105174:	1007883a 	mov	r3,r2
81105178:	e0bffd17 	ldw	r2,-12(fp)
8110517c:	10c5883a 	add	r2,r2,r3
81105180:	e0ffff17 	ldw	r3,-4(fp)
81105184:	10c00015 	stw	r3,0(r2)
}
81105188:	0001883a 	nop
8110518c:	e037883a 	mov	sp,fp
81105190:	df000017 	ldw	fp,0(sp)
81105194:	dec00104 	addi	sp,sp,4
81105198:	f800283a 	ret

8110519c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110519c:	defffc04 	addi	sp,sp,-16
811051a0:	de00012e 	bgeu	sp,et,811051a8 <uliFeebReadReg+0xc>
811051a4:	003b68fa 	trap	3
811051a8:	df000315 	stw	fp,12(sp)
811051ac:	df000304 	addi	fp,sp,12
811051b0:	e13ffe15 	stw	r4,-8(fp)
811051b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811051b8:	e0bfff17 	ldw	r2,-4(fp)
811051bc:	1085883a 	add	r2,r2,r2
811051c0:	1085883a 	add	r2,r2,r2
811051c4:	1007883a 	mov	r3,r2
811051c8:	e0bffe17 	ldw	r2,-8(fp)
811051cc:	10c5883a 	add	r2,r2,r3
811051d0:	10800017 	ldw	r2,0(r2)
811051d4:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811051d8:	e0bffd17 	ldw	r2,-12(fp)
}
811051dc:	e037883a 	mov	sp,fp
811051e0:	df000017 	ldw	fp,0(sp)
811051e4:	dec00104 	addi	sp,sp,4
811051e8:	f800283a 	ret

811051ec <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
811051ec:	defffb04 	addi	sp,sp,-20
811051f0:	de00012e 	bgeu	sp,et,811051f8 <bSpwcSetLink+0xc>
811051f4:	003b68fa 	trap	3
811051f8:	dfc00415 	stw	ra,16(sp)
811051fc:	df000315 	stw	fp,12(sp)
81105200:	df000304 	addi	fp,sp,12
81105204:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105208:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110520c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105210:	e0bfff17 	ldw	r2,-4(fp)
81105214:	10002f26 	beq	r2,zero,811052d4 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800017 	ldw	r2,0(r2)
81105220:	000b883a 	mov	r5,zero
81105224:	1009883a 	mov	r4,r2
81105228:	110574c0 	call	8110574c <uliSpwcReadReg>
8110522c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81105230:	e0bfff17 	ldw	r2,-4(fp)
81105234:	10800117 	ldw	r2,4(r2)
81105238:	10000426 	beq	r2,zero,8110524c <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
8110523c:	e0bffe17 	ldw	r2,-8(fp)
81105240:	10800114 	ori	r2,r2,4
81105244:	e0bffe15 	stw	r2,-8(fp)
81105248:	00000406 	br	8110525c <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
8110524c:	e0fffe17 	ldw	r3,-8(fp)
81105250:	00bffec4 	movi	r2,-5
81105254:	1884703a 	and	r2,r3,r2
81105258:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
8110525c:	e0bfff17 	ldw	r2,-4(fp)
81105260:	10800217 	ldw	r2,8(r2)
81105264:	10000426 	beq	r2,zero,81105278 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
81105268:	e0bffe17 	ldw	r2,-8(fp)
8110526c:	10800094 	ori	r2,r2,2
81105270:	e0bffe15 	stw	r2,-8(fp)
81105274:	00000406 	br	81105288 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105278:	e0fffe17 	ldw	r3,-8(fp)
8110527c:	00bfff44 	movi	r2,-3
81105280:	1884703a 	and	r2,r3,r2
81105284:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105288:	e0bfff17 	ldw	r2,-4(fp)
8110528c:	10800317 	ldw	r2,12(r2)
81105290:	10000426 	beq	r2,zero,811052a4 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105294:	e0bffe17 	ldw	r2,-8(fp)
81105298:	10800054 	ori	r2,r2,1
8110529c:	e0bffe15 	stw	r2,-8(fp)
811052a0:	00000406 	br	811052b4 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
811052a4:	e0fffe17 	ldw	r3,-8(fp)
811052a8:	00bfff84 	movi	r2,-2
811052ac:	1884703a 	and	r2,r3,r2
811052b0:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
811052b4:	e0bfff17 	ldw	r2,-4(fp)
811052b8:	10800017 	ldw	r2,0(r2)
811052bc:	e1bffe17 	ldw	r6,-8(fp)
811052c0:	000b883a 	mov	r5,zero
811052c4:	1009883a 	mov	r4,r2
811052c8:	11056f80 	call	811056f8 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
811052cc:	00800044 	movi	r2,1
811052d0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811052d4:	e0bffd17 	ldw	r2,-12(fp)
}
811052d8:	e037883a 	mov	sp,fp
811052dc:	dfc00117 	ldw	ra,4(sp)
811052e0:	df000017 	ldw	fp,0(sp)
811052e4:	dec00204 	addi	sp,sp,8
811052e8:	f800283a 	ret

811052ec <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
811052ec:	defffb04 	addi	sp,sp,-20
811052f0:	de00012e 	bgeu	sp,et,811052f8 <bSpwcGetLink+0xc>
811052f4:	003b68fa 	trap	3
811052f8:	dfc00415 	stw	ra,16(sp)
811052fc:	df000315 	stw	fp,12(sp)
81105300:	df000304 	addi	fp,sp,12
81105304:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105308:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110530c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105310:	e0bfff17 	ldw	r2,-4(fp)
81105314:	10002326 	beq	r2,zero,811053a4 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105318:	e0bfff17 	ldw	r2,-4(fp)
8110531c:	10800017 	ldw	r2,0(r2)
81105320:	000b883a 	mov	r5,zero
81105324:	1009883a 	mov	r4,r2
81105328:	110574c0 	call	8110574c <uliSpwcReadReg>
8110532c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
81105330:	e0bffe17 	ldw	r2,-8(fp)
81105334:	1080010c 	andi	r2,r2,4
81105338:	10000426 	beq	r2,zero,8110534c <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
8110533c:	e0bfff17 	ldw	r2,-4(fp)
81105340:	00c00044 	movi	r3,1
81105344:	10c00115 	stw	r3,4(r2)
81105348:	00000206 	br	81105354 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
8110534c:	e0bfff17 	ldw	r2,-4(fp)
81105350:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
81105354:	e0bffe17 	ldw	r2,-8(fp)
81105358:	1080008c 	andi	r2,r2,2
8110535c:	10000426 	beq	r2,zero,81105370 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
81105360:	e0bfff17 	ldw	r2,-4(fp)
81105364:	00c00044 	movi	r3,1
81105368:	10c00215 	stw	r3,8(r2)
8110536c:	00000206 	br	81105378 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105378:	e0bffe17 	ldw	r2,-8(fp)
8110537c:	1080004c 	andi	r2,r2,1
81105380:	10000426 	beq	r2,zero,81105394 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105384:	e0bfff17 	ldw	r2,-4(fp)
81105388:	00c00044 	movi	r3,1
8110538c:	10c00315 	stw	r3,12(r2)
81105390:	00000206 	br	8110539c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105394:	e0bfff17 	ldw	r2,-4(fp)
81105398:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110539c:	00800044 	movi	r2,1
811053a0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811053a4:	e0bffd17 	ldw	r2,-12(fp)
}
811053a8:	e037883a 	mov	sp,fp
811053ac:	dfc00117 	ldw	ra,4(sp)
811053b0:	df000017 	ldw	fp,0(sp)
811053b4:	dec00204 	addi	sp,sp,8
811053b8:	f800283a 	ret

811053bc <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
811053bc:	defffb04 	addi	sp,sp,-20
811053c0:	de00012e 	bgeu	sp,et,811053c8 <bSpwcGetLinkError+0xc>
811053c4:	003b68fa 	trap	3
811053c8:	dfc00415 	stw	ra,16(sp)
811053cc:	df000315 	stw	fp,12(sp)
811053d0:	df000304 	addi	fp,sp,12
811053d4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811053d8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811053dc:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811053e0:	e0bfff17 	ldw	r2,-4(fp)
811053e4:	10002c26 	beq	r2,zero,81105498 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811053e8:	e0bfff17 	ldw	r2,-4(fp)
811053ec:	10800017 	ldw	r2,0(r2)
811053f0:	01400044 	movi	r5,1
811053f4:	1009883a 	mov	r4,r2
811053f8:	110574c0 	call	8110574c <uliSpwcReadReg>
811053fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105400:	e0bffe17 	ldw	r2,-8(fp)
81105404:	1082000c 	andi	r2,r2,2048
81105408:	10000426 	beq	r2,zero,8110541c <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110540c:	e0bfff17 	ldw	r2,-4(fp)
81105410:	00c00044 	movi	r3,1
81105414:	10c00415 	stw	r3,16(r2)
81105418:	00000206 	br	81105424 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
8110541c:	e0bfff17 	ldw	r2,-4(fp)
81105420:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
81105424:	e0bffe17 	ldw	r2,-8(fp)
81105428:	1081000c 	andi	r2,r2,1024
8110542c:	10000426 	beq	r2,zero,81105440 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
81105430:	e0bfff17 	ldw	r2,-4(fp)
81105434:	00c00044 	movi	r3,1
81105438:	10c00515 	stw	r3,20(r2)
8110543c:	00000206 	br	81105448 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81105440:	e0bfff17 	ldw	r2,-4(fp)
81105444:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
81105448:	e0bffe17 	ldw	r2,-8(fp)
8110544c:	1080800c 	andi	r2,r2,512
81105450:	10000426 	beq	r2,zero,81105464 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81105454:	e0bfff17 	ldw	r2,-4(fp)
81105458:	00c00044 	movi	r3,1
8110545c:	10c00615 	stw	r3,24(r2)
81105460:	00000206 	br	8110546c <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
8110546c:	e0bffe17 	ldw	r2,-8(fp)
81105470:	1080400c 	andi	r2,r2,256
81105474:	10000426 	beq	r2,zero,81105488 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105478:	e0bfff17 	ldw	r2,-4(fp)
8110547c:	00c00044 	movi	r3,1
81105480:	10c00715 	stw	r3,28(r2)
81105484:	00000206 	br	81105490 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105488:	e0bfff17 	ldw	r2,-4(fp)
8110548c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105490:	00800044 	movi	r2,1
81105494:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105498:	e0bffd17 	ldw	r2,-12(fp)
}
8110549c:	e037883a 	mov	sp,fp
811054a0:	dfc00117 	ldw	ra,4(sp)
811054a4:	df000017 	ldw	fp,0(sp)
811054a8:	dec00204 	addi	sp,sp,8
811054ac:	f800283a 	ret

811054b0 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
811054b0:	defffb04 	addi	sp,sp,-20
811054b4:	de00012e 	bgeu	sp,et,811054bc <bSpwcGetLinkStatus+0xc>
811054b8:	003b68fa 	trap	3
811054bc:	dfc00415 	stw	ra,16(sp)
811054c0:	df000315 	stw	fp,12(sp)
811054c4:	df000304 	addi	fp,sp,12
811054c8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811054cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811054d0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811054d4:	e0bfff17 	ldw	r2,-4(fp)
811054d8:	10002326 	beq	r2,zero,81105568 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811054dc:	e0bfff17 	ldw	r2,-4(fp)
811054e0:	10800017 	ldw	r2,0(r2)
811054e4:	01400044 	movi	r5,1
811054e8:	1009883a 	mov	r4,r2
811054ec:	110574c0 	call	8110574c <uliSpwcReadReg>
811054f0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
811054f4:	e0bffe17 	ldw	r2,-8(fp)
811054f8:	1080010c 	andi	r2,r2,4
811054fc:	10000426 	beq	r2,zero,81105510 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105500:	e0bfff17 	ldw	r2,-4(fp)
81105504:	00c00044 	movi	r3,1
81105508:	10c00815 	stw	r3,32(r2)
8110550c:	00000206 	br	81105518 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81105510:	e0bfff17 	ldw	r2,-4(fp)
81105514:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
81105518:	e0bffe17 	ldw	r2,-8(fp)
8110551c:	1080008c 	andi	r2,r2,2
81105520:	10000426 	beq	r2,zero,81105534 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
81105524:	e0bfff17 	ldw	r2,-4(fp)
81105528:	00c00044 	movi	r3,1
8110552c:	10c00915 	stw	r3,36(r2)
81105530:	00000206 	br	8110553c <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
81105534:	e0bfff17 	ldw	r2,-4(fp)
81105538:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
8110553c:	e0bffe17 	ldw	r2,-8(fp)
81105540:	1080004c 	andi	r2,r2,1
81105544:	10000426 	beq	r2,zero,81105558 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81105548:	e0bfff17 	ldw	r2,-4(fp)
8110554c:	00c00044 	movi	r3,1
81105550:	10c00a15 	stw	r3,40(r2)
81105554:	00000206 	br	81105560 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81105558:	e0bfff17 	ldw	r2,-4(fp)
8110555c:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
81105560:	00800044 	movi	r2,1
81105564:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105568:	e0bffd17 	ldw	r2,-12(fp)
}
8110556c:	e037883a 	mov	sp,fp
81105570:	dfc00117 	ldw	ra,4(sp)
81105574:	df000017 	ldw	fp,0(sp)
81105578:	dec00204 	addi	sp,sp,8
8110557c:	f800283a 	ret

81105580 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105580:	defffb04 	addi	sp,sp,-20
81105584:	de00012e 	bgeu	sp,et,8110558c <bSpwcInitCh+0xc>
81105588:	003b68fa 	trap	3
8110558c:	dfc00415 	stw	ra,16(sp)
81105590:	df000315 	stw	fp,12(sp)
81105594:	df000304 	addi	fp,sp,12
81105598:	e13ffe15 	stw	r4,-8(fp)
8110559c:	2805883a 	mov	r2,r5
811055a0:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811055a4:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
811055a8:	e0bffe17 	ldw	r2,-8(fp)
811055ac:	10004c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
		bStatus = TRUE;
811055b0:	00800044 	movi	r2,1
811055b4:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
811055b8:	e0bfff03 	ldbu	r2,-4(fp)
811055bc:	10c00268 	cmpgeui	r3,r2,9
811055c0:	1800371e 	bne	r3,zero,811056a0 <bSpwcInitCh+0x120>
811055c4:	100690ba 	slli	r3,r2,2
811055c8:	00a04434 	movhi	r2,33040
811055cc:	10957704 	addi	r2,r2,21980
811055d0:	1885883a 	add	r2,r3,r2
811055d4:	10800017 	ldw	r2,0(r2)
811055d8:	1000683a 	jmp	r2
811055dc:	811056a0 	cmpeqi	r4,r16,16730
811055e0:	81105600 	call	88110560 <__reset+0x20f0560>
811055e4:	81105614 	ori	r4,r16,16728
811055e8:	81105628 	cmpgeui	r4,r16,16728
811055ec:	8110563c 	xorhi	r4,r16,16728
811055f0:	81105650 	cmplti	r4,r16,16729
811055f4:	81105664 	muli	r4,r16,16729
811055f8:	81105678 	rdprs	r4,r16,16729
811055fc:	8110568c 	andi	r4,r16,16730
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105600:	e0fffe17 	ldw	r3,-8(fp)
81105604:	00a04834 	movhi	r2,33056
81105608:	108b0004 	addi	r2,r2,11264
8110560c:	18800015 	stw	r2,0(r3)
			break;
81105610:	00002506 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81105614:	e0fffe17 	ldw	r3,-8(fp)
81105618:	00a04834 	movhi	r2,33056
8110561c:	108a0004 	addi	r2,r2,10240
81105620:	18800015 	stw	r2,0(r3)
			break;
81105624:	00002006 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81105628:	e0fffe17 	ldw	r3,-8(fp)
8110562c:	00a04834 	movhi	r2,33056
81105630:	10890004 	addi	r2,r2,9216
81105634:	18800015 	stw	r2,0(r3)
			break;
81105638:	00001b06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
8110563c:	e0fffe17 	ldw	r3,-8(fp)
81105640:	00a04834 	movhi	r2,33056
81105644:	10880004 	addi	r2,r2,8192
81105648:	18800015 	stw	r2,0(r3)
			break;
8110564c:	00001606 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81105650:	e0fffe17 	ldw	r3,-8(fp)
81105654:	00a04834 	movhi	r2,33056
81105658:	10870004 	addi	r2,r2,7168
8110565c:	18800015 	stw	r2,0(r3)
			break;
81105660:	00001106 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81105664:	e0fffe17 	ldw	r3,-8(fp)
81105668:	00a04834 	movhi	r2,33056
8110566c:	10860004 	addi	r2,r2,6144
81105670:	18800015 	stw	r2,0(r3)
			break;
81105674:	00000c06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105678:	e0fffe17 	ldw	r3,-8(fp)
8110567c:	00a04834 	movhi	r2,33056
81105680:	10850004 	addi	r2,r2,5120
81105684:	18800015 	stw	r2,0(r3)
			break;
81105688:	00000706 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110568c:	e0fffe17 	ldw	r3,-8(fp)
81105690:	00a04834 	movhi	r2,33056
81105694:	10840004 	addi	r2,r2,4096
81105698:	18800015 	stw	r2,0(r3)
			break;
8110569c:	00000206 	br	811056a8 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
811056a0:	e03ffd15 	stw	zero,-12(fp)
			break;
811056a4:	0001883a 	nop
		}

		if (bStatus) {
811056a8:	e0bffd17 	ldw	r2,-12(fp)
811056ac:	10000c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
811056b0:	e13ffe17 	ldw	r4,-8(fp)
811056b4:	11052ec0 	call	811052ec <bSpwcGetLink>
811056b8:	1000011e 	bne	r2,zero,811056c0 <bSpwcInitCh+0x140>
				bStatus = FALSE;
811056bc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
811056c0:	e13ffe17 	ldw	r4,-8(fp)
811056c4:	11053bc0 	call	811053bc <bSpwcGetLinkError>
811056c8:	1000011e 	bne	r2,zero,811056d0 <bSpwcInitCh+0x150>
				bStatus = FALSE;
811056cc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
811056d0:	e13ffe17 	ldw	r4,-8(fp)
811056d4:	11054b00 	call	811054b0 <bSpwcGetLinkStatus>
811056d8:	1000011e 	bne	r2,zero,811056e0 <bSpwcInitCh+0x160>
				bStatus = FALSE;
811056dc:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
811056e0:	e0bffd17 	ldw	r2,-12(fp)
}
811056e4:	e037883a 	mov	sp,fp
811056e8:	dfc00117 	ldw	ra,4(sp)
811056ec:	df000017 	ldw	fp,0(sp)
811056f0:	dec00204 	addi	sp,sp,8
811056f4:	f800283a 	ret

811056f8 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811056f8:	defffc04 	addi	sp,sp,-16
811056fc:	de00012e 	bgeu	sp,et,81105704 <vSpwcWriteReg+0xc>
81105700:	003b68fa 	trap	3
81105704:	df000315 	stw	fp,12(sp)
81105708:	df000304 	addi	fp,sp,12
8110570c:	e13ffd15 	stw	r4,-12(fp)
81105710:	e17ffe15 	stw	r5,-8(fp)
81105714:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105718:	e0bffe17 	ldw	r2,-8(fp)
8110571c:	1085883a 	add	r2,r2,r2
81105720:	1085883a 	add	r2,r2,r2
81105724:	1007883a 	mov	r3,r2
81105728:	e0bffd17 	ldw	r2,-12(fp)
8110572c:	10c5883a 	add	r2,r2,r3
81105730:	e0ffff17 	ldw	r3,-4(fp)
81105734:	10c00015 	stw	r3,0(r2)
}
81105738:	0001883a 	nop
8110573c:	e037883a 	mov	sp,fp
81105740:	df000017 	ldw	fp,0(sp)
81105744:	dec00104 	addi	sp,sp,4
81105748:	f800283a 	ret

8110574c <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110574c:	defffc04 	addi	sp,sp,-16
81105750:	de00012e 	bgeu	sp,et,81105758 <uliSpwcReadReg+0xc>
81105754:	003b68fa 	trap	3
81105758:	df000315 	stw	fp,12(sp)
8110575c:	df000304 	addi	fp,sp,12
81105760:	e13ffe15 	stw	r4,-8(fp)
81105764:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105768:	e0bfff17 	ldw	r2,-4(fp)
8110576c:	1085883a 	add	r2,r2,r2
81105770:	1085883a 	add	r2,r2,r2
81105774:	1007883a 	mov	r3,r2
81105778:	e0bffe17 	ldw	r2,-8(fp)
8110577c:	10c5883a 	add	r2,r2,r3
81105780:	10800017 	ldw	r2,0(r2)
81105784:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105788:	e0bffd17 	ldw	r2,-12(fp)
}
8110578c:	e037883a 	mov	sp,fp
81105790:	df000017 	ldw	fp,0(sp)
81105794:	dec00104 	addi	sp,sp,4
81105798:	f800283a 	ret

8110579c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110579c:	defffe04 	addi	sp,sp,-8
811057a0:	de00012e 	bgeu	sp,et,811057a8 <bEnableIsoDrivers+0xc>
811057a4:	003b68fa 	trap	3
811057a8:	dfc00115 	stw	ra,4(sp)
811057ac:	df000015 	stw	fp,0(sp)
811057b0:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
811057b4:	01400204 	movi	r5,8
811057b8:	01000044 	movi	r4,1
811057bc:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057c0:	00800044 	movi	r2,1
}
811057c4:	e037883a 	mov	sp,fp
811057c8:	dfc00117 	ldw	ra,4(sp)
811057cc:	df000017 	ldw	fp,0(sp)
811057d0:	dec00204 	addi	sp,sp,8
811057d4:	f800283a 	ret

811057d8 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
811057d8:	defffe04 	addi	sp,sp,-8
811057dc:	de00012e 	bgeu	sp,et,811057e4 <bDisableIsoDrivers+0xc>
811057e0:	003b68fa 	trap	3
811057e4:	dfc00115 	stw	ra,4(sp)
811057e8:	df000015 	stw	fp,0(sp)
811057ec:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
811057f0:	01400204 	movi	r5,8
811057f4:	0009883a 	mov	r4,zero
811057f8:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057fc:	00800044 	movi	r2,1
}
81105800:	e037883a 	mov	sp,fp
81105804:	dfc00117 	ldw	ra,4(sp)
81105808:	df000017 	ldw	fp,0(sp)
8110580c:	dec00204 	addi	sp,sp,8
81105810:	f800283a 	ret

81105814 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81105814:	defffe04 	addi	sp,sp,-8
81105818:	de00012e 	bgeu	sp,et,81105820 <bEnableLvdsBoard+0xc>
8110581c:	003b68fa 	trap	3
81105820:	dfc00115 	stw	ra,4(sp)
81105824:	df000015 	stw	fp,0(sp)
81105828:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
8110582c:	01400104 	movi	r5,4
81105830:	01000044 	movi	r4,1
81105834:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105838:	00800044 	movi	r2,1
}
8110583c:	e037883a 	mov	sp,fp
81105840:	dfc00117 	ldw	ra,4(sp)
81105844:	df000017 	ldw	fp,0(sp)
81105848:	dec00204 	addi	sp,sp,8
8110584c:	f800283a 	ret

81105850 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
81105850:	defffe04 	addi	sp,sp,-8
81105854:	de00012e 	bgeu	sp,et,8110585c <bDisableLvdsBoard+0xc>
81105858:	003b68fa 	trap	3
8110585c:	dfc00115 	stw	ra,4(sp)
81105860:	df000015 	stw	fp,0(sp)
81105864:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
81105868:	01400104 	movi	r5,4
8110586c:	0009883a 	mov	r4,zero
81105870:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105874:	00800044 	movi	r2,1
}
81105878:	e037883a 	mov	sp,fp
8110587c:	dfc00117 	ldw	ra,4(sp)
81105880:	df000017 	ldw	fp,0(sp)
81105884:	dec00204 	addi	sp,sp,8
81105888:	f800283a 	ret

8110588c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110588c:	defffd04 	addi	sp,sp,-12
81105890:	de00012e 	bgeu	sp,et,81105898 <bSetPreEmphasys+0xc>
81105894:	003b68fa 	trap	3
81105898:	dfc00215 	stw	ra,8(sp)
8110589c:	df000115 	stw	fp,4(sp)
811058a0:	df000104 	addi	fp,sp,4
811058a4:	2005883a 	mov	r2,r4
811058a8:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
811058ac:	e0bfff03 	ldbu	r2,-4(fp)
811058b0:	10c00060 	cmpeqi	r3,r2,1
811058b4:	18000d1e 	bne	r3,zero,811058ec <bSetPreEmphasys+0x60>
811058b8:	10c00088 	cmpgei	r3,r2,2
811058bc:	1800021e 	bne	r3,zero,811058c8 <bSetPreEmphasys+0x3c>
811058c0:	10000626 	beq	r2,zero,811058dc <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058c4:	00001b06 	br	81105934 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
811058c8:	10c000a0 	cmpeqi	r3,r2,2
811058cc:	18000e1e 	bne	r3,zero,81105908 <bSetPreEmphasys+0x7c>
811058d0:	108000e0 	cmpeqi	r2,r2,3
811058d4:	1000131e 	bne	r2,zero,81105924 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058d8:	00001606 	br	81105934 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058dc:	014000c4 	movi	r5,3
811058e0:	0009883a 	mov	r4,zero
811058e4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
811058e8:	00001206 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
811058ec:	01400084 	movi	r5,2
811058f0:	0009883a 	mov	r4,zero
811058f4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
811058f8:	01400044 	movi	r5,1
811058fc:	01000044 	movi	r4,1
81105900:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105904:	00000b06 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105908:	01400044 	movi	r5,1
8110590c:	0009883a 	mov	r4,zero
81105910:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
81105914:	01400084 	movi	r5,2
81105918:	01000044 	movi	r4,1
8110591c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105920:	00000406 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81105924:	014000c4 	movi	r5,3
81105928:	01000044 	movi	r4,1
8110592c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105930:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
81105934:	00800044 	movi	r2,1
}
81105938:	e037883a 	mov	sp,fp
8110593c:	dfc00117 	ldw	ra,4(sp)
81105940:	df000017 	ldw	fp,0(sp)
81105944:	dec00204 	addi	sp,sp,8
81105948:	f800283a 	ret

8110594c <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
8110594c:	defffd04 	addi	sp,sp,-12
81105950:	de00012e 	bgeu	sp,et,81105958 <bCtrlIoLvdsDrive+0xc>
81105954:	003b68fa 	trap	3
81105958:	df000215 	stw	fp,8(sp)
8110595c:	df000204 	addi	fp,sp,8
81105960:	e13ffe15 	stw	r4,-8(fp)
81105964:	2805883a 	mov	r2,r5
81105968:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
8110596c:	e0bffe17 	ldw	r2,-8(fp)
81105970:	1000071e 	bne	r2,zero,81105990 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105974:	e0bfff03 	ldbu	r2,-4(fp)
81105978:	0084303a 	nor	r2,zero,r2
8110597c:	1007883a 	mov	r3,r2
81105980:	d0a00103 	ldbu	r2,-32764(gp)
81105984:	1884703a 	and	r2,r3,r2
81105988:	d0a00105 	stb	r2,-32764(gp)
8110598c:	00000406 	br	811059a0 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105990:	d0e00103 	ldbu	r3,-32764(gp)
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	1884b03a 	or	r2,r3,r2
8110599c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
811059a0:	d0a00103 	ldbu	r2,-32764(gp)
811059a4:	10c03fcc 	andi	r3,r2,255
811059a8:	00a00034 	movhi	r2,32768
811059ac:	10822804 	addi	r2,r2,2208
811059b0:	10c00035 	stwio	r3,0(r2)
  return TRUE;
811059b4:	00800044 	movi	r2,1
}
811059b8:	e037883a 	mov	sp,fp
811059bc:	df000017 	ldw	fp,0(sp)
811059c0:	dec00104 	addi	sp,sp,4
811059c4:	f800283a 	ret

811059c8 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811059c8:	defffa04 	addi	sp,sp,-24
811059cc:	de00012e 	bgeu	sp,et,811059d4 <I2C_TestAdress+0xc>
811059d0:	003b68fa 	trap	3
811059d4:	dfc00515 	stw	ra,20(sp)
811059d8:	df000415 	stw	fp,16(sp)
811059dc:	df000404 	addi	fp,sp,16
811059e0:	e13ffd15 	stw	r4,-12(fp)
811059e4:	e17ffe15 	stw	r5,-8(fp)
811059e8:	3005883a 	mov	r2,r6
811059ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811059f0:	00800044 	movi	r2,1
811059f4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811059f8:	e17ffe17 	ldw	r5,-8(fp)
811059fc:	e13ffd17 	ldw	r4,-12(fp)
81105a00:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a04:	e0bfff03 	ldbu	r2,-4(fp)
81105a08:	10803fcc 	andi	r2,r2,255
81105a0c:	100d883a 	mov	r6,r2
81105a10:	e17ffe17 	ldw	r5,-8(fp)
81105a14:	e13ffd17 	ldw	r4,-12(fp)
81105a18:	1105eac0 	call	81105eac <i2c_write>
81105a1c:	1000011e 	bne	r2,zero,81105a24 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105a20:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a24:	e17ffe17 	ldw	r5,-8(fp)
81105a28:	e13ffd17 	ldw	r4,-12(fp)
81105a2c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105a30:	0106d604 	movi	r4,7000
81105a34:	112a8800 	call	8112a880 <usleep>
    
    return bSuccess;
81105a38:	e0bffc17 	ldw	r2,-16(fp)

}
81105a3c:	e037883a 	mov	sp,fp
81105a40:	dfc00117 	ldw	ra,4(sp)
81105a44:	df000017 	ldw	fp,0(sp)
81105a48:	dec00204 	addi	sp,sp,8
81105a4c:	f800283a 	ret

81105a50 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105a50:	defff804 	addi	sp,sp,-32
81105a54:	de00012e 	bgeu	sp,et,81105a5c <I2C_Write+0xc>
81105a58:	003b68fa 	trap	3
81105a5c:	dfc00715 	stw	ra,28(sp)
81105a60:	df000615 	stw	fp,24(sp)
81105a64:	df000604 	addi	fp,sp,24
81105a68:	e13ffb15 	stw	r4,-20(fp)
81105a6c:	e17ffc15 	stw	r5,-16(fp)
81105a70:	3009883a 	mov	r4,r6
81105a74:	3807883a 	mov	r3,r7
81105a78:	e0800217 	ldw	r2,8(fp)
81105a7c:	e13ffd05 	stb	r4,-12(fp)
81105a80:	e0fffe05 	stb	r3,-8(fp)
81105a84:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a88:	00800044 	movi	r2,1
81105a8c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a90:	e17ffc17 	ldw	r5,-16(fp)
81105a94:	e13ffb17 	ldw	r4,-20(fp)
81105a98:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a9c:	e0bffd03 	ldbu	r2,-12(fp)
81105aa0:	10803fcc 	andi	r2,r2,255
81105aa4:	100d883a 	mov	r6,r2
81105aa8:	e17ffc17 	ldw	r5,-16(fp)
81105aac:	e13ffb17 	ldw	r4,-20(fp)
81105ab0:	1105eac0 	call	81105eac <i2c_write>
81105ab4:	1000011e 	bne	r2,zero,81105abc <I2C_Write+0x6c>
        bSuccess = FALSE;
81105ab8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105abc:	e0bffa17 	ldw	r2,-24(fp)
81105ac0:	10000726 	beq	r2,zero,81105ae0 <I2C_Write+0x90>
81105ac4:	e0bffe03 	ldbu	r2,-8(fp)
81105ac8:	100d883a 	mov	r6,r2
81105acc:	e17ffc17 	ldw	r5,-16(fp)
81105ad0:	e13ffb17 	ldw	r4,-20(fp)
81105ad4:	1105eac0 	call	81105eac <i2c_write>
81105ad8:	1000011e 	bne	r2,zero,81105ae0 <I2C_Write+0x90>
        bSuccess = FALSE;
81105adc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105ae0:	e0bffa17 	ldw	r2,-24(fp)
81105ae4:	10000726 	beq	r2,zero,81105b04 <I2C_Write+0xb4>
81105ae8:	e0bfff03 	ldbu	r2,-4(fp)
81105aec:	100d883a 	mov	r6,r2
81105af0:	e17ffc17 	ldw	r5,-16(fp)
81105af4:	e13ffb17 	ldw	r4,-20(fp)
81105af8:	1105eac0 	call	81105eac <i2c_write>
81105afc:	1000011e 	bne	r2,zero,81105b04 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105b00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105b04:	e17ffc17 	ldw	r5,-16(fp)
81105b08:	e13ffb17 	ldw	r4,-20(fp)
81105b0c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105b10:	0106d604 	movi	r4,7000
81105b14:	112a8800 	call	8112a880 <usleep>
    
    return bSuccess;
81105b18:	e0bffa17 	ldw	r2,-24(fp)

}
81105b1c:	e037883a 	mov	sp,fp
81105b20:	dfc00117 	ldw	ra,4(sp)
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00204 	addi	sp,sp,8
81105b2c:	f800283a 	ret

81105b30 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105b30:	defff904 	addi	sp,sp,-28
81105b34:	de00012e 	bgeu	sp,et,81105b3c <I2C_Read+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00615 	stw	ra,24(sp)
81105b40:	df000515 	stw	fp,20(sp)
81105b44:	df000504 	addi	fp,sp,20
81105b48:	e13ffc15 	stw	r4,-16(fp)
81105b4c:	e17ffd15 	stw	r5,-12(fp)
81105b50:	3007883a 	mov	r3,r6
81105b54:	3805883a 	mov	r2,r7
81105b58:	e0fffe05 	stb	r3,-8(fp)
81105b5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105b60:	00800044 	movi	r2,1
81105b64:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105b68:	e17ffd17 	ldw	r5,-12(fp)
81105b6c:	e13ffc17 	ldw	r4,-16(fp)
81105b70:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b74:	e0bffe03 	ldbu	r2,-8(fp)
81105b78:	10803fcc 	andi	r2,r2,255
81105b7c:	100d883a 	mov	r6,r2
81105b80:	e17ffd17 	ldw	r5,-12(fp)
81105b84:	e13ffc17 	ldw	r4,-16(fp)
81105b88:	1105eac0 	call	81105eac <i2c_write>
81105b8c:	1000011e 	bne	r2,zero,81105b94 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b90:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b94:	e0bffb17 	ldw	r2,-20(fp)
81105b98:	10000726 	beq	r2,zero,81105bb8 <I2C_Read+0x88>
81105b9c:	e0bfff03 	ldbu	r2,-4(fp)
81105ba0:	100d883a 	mov	r6,r2
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105eac0 	call	81105eac <i2c_write>
81105bb0:	1000011e 	bne	r2,zero,81105bb8 <I2C_Read+0x88>
        bSuccess = FALSE;
81105bb4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105bb8:	e17ffd17 	ldw	r5,-12(fp)
81105bbc:	e13ffc17 	ldw	r4,-16(fp)
81105bc0:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105bc4:	e0bffe03 	ldbu	r2,-8(fp)
81105bc8:	10800054 	ori	r2,r2,1
81105bcc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105bd0:	e0bffb17 	ldw	r2,-20(fp)
81105bd4:	10000826 	beq	r2,zero,81105bf8 <I2C_Read+0xc8>
81105bd8:	e0bffe03 	ldbu	r2,-8(fp)
81105bdc:	10803fcc 	andi	r2,r2,255
81105be0:	100d883a 	mov	r6,r2
81105be4:	e17ffd17 	ldw	r5,-12(fp)
81105be8:	e13ffc17 	ldw	r4,-16(fp)
81105bec:	1105eac0 	call	81105eac <i2c_write>
81105bf0:	1000011e 	bne	r2,zero,81105bf8 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105bf4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105bf8:	e0bffb17 	ldw	r2,-20(fp)
81105bfc:	10000526 	beq	r2,zero,81105c14 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105c00:	000f883a 	mov	r7,zero
81105c04:	e1800217 	ldw	r6,8(fp)
81105c08:	e17ffd17 	ldw	r5,-12(fp)
81105c0c:	e13ffc17 	ldw	r4,-16(fp)
81105c10:	1105fe40 	call	81105fe4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105c14:	e17ffd17 	ldw	r5,-12(fp)
81105c18:	e13ffc17 	ldw	r4,-16(fp)
81105c1c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;
81105c20:	e0bffb17 	ldw	r2,-20(fp)
}
81105c24:	e037883a 	mov	sp,fp
81105c28:	dfc00117 	ldw	ra,4(sp)
81105c2c:	df000017 	ldw	fp,0(sp)
81105c30:	dec00204 	addi	sp,sp,8
81105c34:	f800283a 	ret

81105c38 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105c38:	defff604 	addi	sp,sp,-40
81105c3c:	de00012e 	bgeu	sp,et,81105c44 <I2C_MultipleRead+0xc>
81105c40:	003b68fa 	trap	3
81105c44:	dfc00915 	stw	ra,36(sp)
81105c48:	df000815 	stw	fp,32(sp)
81105c4c:	df000804 	addi	fp,sp,32
81105c50:	e13ffb15 	stw	r4,-20(fp)
81105c54:	e17ffc15 	stw	r5,-16(fp)
81105c58:	3007883a 	mov	r3,r6
81105c5c:	e1fffe15 	stw	r7,-8(fp)
81105c60:	e0800217 	ldw	r2,8(fp)
81105c64:	e0fffd05 	stb	r3,-12(fp)
81105c68:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105c6c:	00800044 	movi	r2,1
81105c70:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c74:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c78:	e17ffc17 	ldw	r5,-16(fp)
81105c7c:	e13ffb17 	ldw	r4,-20(fp)
81105c80:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c84:	e0bffd03 	ldbu	r2,-12(fp)
81105c88:	10803fcc 	andi	r2,r2,255
81105c8c:	100d883a 	mov	r6,r2
81105c90:	e17ffc17 	ldw	r5,-16(fp)
81105c94:	e13ffb17 	ldw	r4,-20(fp)
81105c98:	1105eac0 	call	81105eac <i2c_write>
81105c9c:	1000011e 	bne	r2,zero,81105ca4 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105ca0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105ca4:	e0bff917 	ldw	r2,-28(fp)
81105ca8:	10000726 	beq	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
81105cac:	e0bffa03 	ldbu	r2,-24(fp)
81105cb0:	100d883a 	mov	r6,r2
81105cb4:	e17ffc17 	ldw	r5,-16(fp)
81105cb8:	e13ffb17 	ldw	r4,-20(fp)
81105cbc:	1105eac0 	call	81105eac <i2c_write>
81105cc0:	1000011e 	bne	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105cc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105cc8:	e0bff917 	ldw	r2,-28(fp)
81105ccc:	10000326 	beq	r2,zero,81105cdc <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105cd0:	e17ffc17 	ldw	r5,-16(fp)
81105cd4:	e13ffb17 	ldw	r4,-20(fp)
81105cd8:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105cdc:	e0bffd03 	ldbu	r2,-12(fp)
81105ce0:	10800054 	ori	r2,r2,1
81105ce4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105ce8:	e0bff917 	ldw	r2,-28(fp)
81105cec:	10000826 	beq	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
81105cf0:	e0bffd03 	ldbu	r2,-12(fp)
81105cf4:	10803fcc 	andi	r2,r2,255
81105cf8:	100d883a 	mov	r6,r2
81105cfc:	e17ffc17 	ldw	r5,-16(fp)
81105d00:	e13ffb17 	ldw	r4,-20(fp)
81105d04:	1105eac0 	call	81105eac <i2c_write>
81105d08:	1000011e 	bne	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105d0c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105d10:	e0bff917 	ldw	r2,-28(fp)
81105d14:	10001726 	beq	r2,zero,81105d74 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105d18:	e03ff815 	stw	zero,-32(fp)
81105d1c:	00001006 	br	81105d60 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105d20:	e0bff817 	ldw	r2,-32(fp)
81105d24:	e0fffe17 	ldw	r3,-8(fp)
81105d28:	1889883a 	add	r4,r3,r2
81105d2c:	e0bfff0b 	ldhu	r2,-4(fp)
81105d30:	10ffffc4 	addi	r3,r2,-1
81105d34:	e0bff817 	ldw	r2,-32(fp)
81105d38:	1884c03a 	cmpne	r2,r3,r2
81105d3c:	10803fcc 	andi	r2,r2,255
81105d40:	100f883a 	mov	r7,r2
81105d44:	200d883a 	mov	r6,r4
81105d48:	e17ffc17 	ldw	r5,-16(fp)
81105d4c:	e13ffb17 	ldw	r4,-20(fp)
81105d50:	1105fe40 	call	81105fe4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105d54:	e0bff817 	ldw	r2,-32(fp)
81105d58:	10800044 	addi	r2,r2,1
81105d5c:	e0bff815 	stw	r2,-32(fp)
81105d60:	e0bfff0b 	ldhu	r2,-4(fp)
81105d64:	e0fff817 	ldw	r3,-32(fp)
81105d68:	1880020e 	bge	r3,r2,81105d74 <I2C_MultipleRead+0x13c>
81105d6c:	e0bff917 	ldw	r2,-28(fp)
81105d70:	103feb1e 	bne	r2,zero,81105d20 <__reset+0xfb0e5d20>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d74:	e17ffc17 	ldw	r5,-16(fp)
81105d78:	e13ffb17 	ldw	r4,-20(fp)
81105d7c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;    
81105d80:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d84:	e037883a 	mov	sp,fp
81105d88:	dfc00117 	ldw	ra,4(sp)
81105d8c:	df000017 	ldw	fp,0(sp)
81105d90:	dec00204 	addi	sp,sp,8
81105d94:	f800283a 	ret

81105d98 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d98:	defffc04 	addi	sp,sp,-16
81105d9c:	de00012e 	bgeu	sp,et,81105da4 <i2c_start+0xc>
81105da0:	003b68fa 	trap	3
81105da4:	dfc00315 	stw	ra,12(sp)
81105da8:	df000215 	stw	fp,8(sp)
81105dac:	df000204 	addi	fp,sp,8
81105db0:	e13ffe15 	stw	r4,-8(fp)
81105db4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105db8:	e0bfff17 	ldw	r2,-4(fp)
81105dbc:	10800104 	addi	r2,r2,4
81105dc0:	1007883a 	mov	r3,r2
81105dc4:	00800044 	movi	r2,1
81105dc8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105dcc:	e0bfff17 	ldw	r2,-4(fp)
81105dd0:	00c00044 	movi	r3,1
81105dd4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105dd8:	e0bffe17 	ldw	r2,-8(fp)
81105ddc:	00c00044 	movi	r3,1
81105de0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105de4:	01000044 	movi	r4,1
81105de8:	112a8800 	call	8112a880 <usleep>
     
    SDA_LOW(data_base); // data low
81105dec:	e0bfff17 	ldw	r2,-4(fp)
81105df0:	0007883a 	mov	r3,zero
81105df4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105df8:	01000044 	movi	r4,1
81105dfc:	112a8800 	call	8112a880 <usleep>
    SCL_LOW(clk_base); // clock low
81105e00:	e0bffe17 	ldw	r2,-8(fp)
81105e04:	0007883a 	mov	r3,zero
81105e08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105e0c:	01000044 	movi	r4,1
81105e10:	112a8800 	call	8112a880 <usleep>
}
81105e14:	0001883a 	nop
81105e18:	e037883a 	mov	sp,fp
81105e1c:	dfc00117 	ldw	ra,4(sp)
81105e20:	df000017 	ldw	fp,0(sp)
81105e24:	dec00204 	addi	sp,sp,8
81105e28:	f800283a 	ret

81105e2c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105e2c:	defffc04 	addi	sp,sp,-16
81105e30:	de00012e 	bgeu	sp,et,81105e38 <i2c_stop+0xc>
81105e34:	003b68fa 	trap	3
81105e38:	dfc00315 	stw	ra,12(sp)
81105e3c:	df000215 	stw	fp,8(sp)
81105e40:	df000204 	addi	fp,sp,8
81105e44:	e13ffe15 	stw	r4,-8(fp)
81105e48:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105e4c:	e0bfff17 	ldw	r2,-4(fp)
81105e50:	10800104 	addi	r2,r2,4
81105e54:	1007883a 	mov	r3,r2
81105e58:	00800044 	movi	r2,1
81105e5c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105e60:	e0bfff17 	ldw	r2,-4(fp)
81105e64:	0007883a 	mov	r3,zero
81105e68:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	00c00044 	movi	r3,1
81105e74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e78:	01000044 	movi	r4,1
81105e7c:	112a8800 	call	8112a880 <usleep>
    SDA_HIGH(data_base); // data high
81105e80:	e0bfff17 	ldw	r2,-4(fp)
81105e84:	00c00044 	movi	r3,1
81105e88:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e8c:	01000044 	movi	r4,1
81105e90:	112a8800 	call	8112a880 <usleep>
    

    
}
81105e94:	0001883a 	nop
81105e98:	e037883a 	mov	sp,fp
81105e9c:	dfc00117 	ldw	ra,4(sp)
81105ea0:	df000017 	ldw	fp,0(sp)
81105ea4:	dec00204 	addi	sp,sp,8
81105ea8:	f800283a 	ret

81105eac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105eac:	defff804 	addi	sp,sp,-32
81105eb0:	de00012e 	bgeu	sp,et,81105eb8 <i2c_write+0xc>
81105eb4:	003b68fa 	trap	3
81105eb8:	dfc00715 	stw	ra,28(sp)
81105ebc:	df000615 	stw	fp,24(sp)
81105ec0:	df000604 	addi	fp,sp,24
81105ec4:	e13ffd15 	stw	r4,-12(fp)
81105ec8:	e17ffe15 	stw	r5,-8(fp)
81105ecc:	3005883a 	mov	r2,r6
81105ed0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105ed4:	00bfe004 	movi	r2,-128
81105ed8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105edc:	e0bffe17 	ldw	r2,-8(fp)
81105ee0:	10800104 	addi	r2,r2,4
81105ee4:	1007883a 	mov	r3,r2
81105ee8:	00800044 	movi	r2,1
81105eec:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105ef0:	e03ffb15 	stw	zero,-20(fp)
81105ef4:	00001f06 	br	81105f74 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105ef8:	e0bffd17 	ldw	r2,-12(fp)
81105efc:	0007883a 	mov	r3,zero
81105f00:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105f04:	e0ffff03 	ldbu	r3,-4(fp)
81105f08:	e0bffa03 	ldbu	r2,-24(fp)
81105f0c:	1884703a 	and	r2,r3,r2
81105f10:	10803fcc 	andi	r2,r2,255
81105f14:	10000426 	beq	r2,zero,81105f28 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105f18:	e0bffe17 	ldw	r2,-8(fp)
81105f1c:	00c00044 	movi	r3,1
81105f20:	10c00035 	stwio	r3,0(r2)
81105f24:	00000306 	br	81105f34 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105f28:	e0bffe17 	ldw	r2,-8(fp)
81105f2c:	0007883a 	mov	r3,zero
81105f30:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105f34:	e0bffa03 	ldbu	r2,-24(fp)
81105f38:	1004d07a 	srli	r2,r2,1
81105f3c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105f40:	e0bffd17 	ldw	r2,-12(fp)
81105f44:	00c00044 	movi	r3,1
81105f48:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f4c:	01000044 	movi	r4,1
81105f50:	112a8800 	call	8112a880 <usleep>
        SCL_LOW(clk_base);
81105f54:	e0bffd17 	ldw	r2,-12(fp)
81105f58:	0007883a 	mov	r3,zero
81105f5c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f60:	01000044 	movi	r4,1
81105f64:	112a8800 	call	8112a880 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105f68:	e0bffb17 	ldw	r2,-20(fp)
81105f6c:	10800044 	addi	r2,r2,1
81105f70:	e0bffb15 	stw	r2,-20(fp)
81105f74:	e0bffb17 	ldw	r2,-20(fp)
81105f78:	10800210 	cmplti	r2,r2,8
81105f7c:	103fde1e 	bne	r2,zero,81105ef8 <__reset+0xfb0e5ef8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f80:	e0bffe17 	ldw	r2,-8(fp)
81105f84:	10800104 	addi	r2,r2,4
81105f88:	0007883a 	mov	r3,zero
81105f8c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f90:	e0bffd17 	ldw	r2,-12(fp)
81105f94:	00c00044 	movi	r3,1
81105f98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f9c:	01000044 	movi	r4,1
81105fa0:	112a8800 	call	8112a880 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105fa4:	e0bffe17 	ldw	r2,-8(fp)
81105fa8:	10800037 	ldwio	r2,0(r2)
81105fac:	1005003a 	cmpeq	r2,r2,zero
81105fb0:	10803fcc 	andi	r2,r2,255
81105fb4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105fb8:	e0bffd17 	ldw	r2,-12(fp)
81105fbc:	0007883a 	mov	r3,zero
81105fc0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fc4:	01000044 	movi	r4,1
81105fc8:	112a8800 	call	8112a880 <usleep>
    return bAck;
81105fcc:	e0bffc17 	ldw	r2,-16(fp)
}    
81105fd0:	e037883a 	mov	sp,fp
81105fd4:	dfc00117 	ldw	ra,4(sp)
81105fd8:	df000017 	ldw	fp,0(sp)
81105fdc:	dec00204 	addi	sp,sp,8
81105fe0:	f800283a 	ret

81105fe4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105fe4:	defff804 	addi	sp,sp,-32
81105fe8:	de00012e 	bgeu	sp,et,81105ff0 <i2c_read+0xc>
81105fec:	003b68fa 	trap	3
81105ff0:	dfc00715 	stw	ra,28(sp)
81105ff4:	df000615 	stw	fp,24(sp)
81105ff8:	df000604 	addi	fp,sp,24
81105ffc:	e13ffc15 	stw	r4,-16(fp)
81106000:	e17ffd15 	stw	r5,-12(fp)
81106004:	e1bffe15 	stw	r6,-8(fp)
81106008:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8110600c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81106010:	e0bffd17 	ldw	r2,-12(fp)
81106014:	10800104 	addi	r2,r2,4
81106018:	0007883a 	mov	r3,zero
8110601c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81106020:	e0bffc17 	ldw	r2,-16(fp)
81106024:	0007883a 	mov	r3,zero
81106028:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8110602c:	01000044 	movi	r4,1
81106030:	112a8800 	call	8112a880 <usleep>

    for(i=0;i<8;i++){
81106034:	e03ffb15 	stw	zero,-20(fp)
81106038:	00001606 	br	81106094 <i2c_read+0xb0>
        Data <<= 1;
8110603c:	e0bffa03 	ldbu	r2,-24(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81106048:	e0bffc17 	ldw	r2,-16(fp)
8110604c:	00c00044 	movi	r3,1
81106050:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106054:	01000044 	movi	r4,1
81106058:	112a8800 	call	8112a880 <usleep>
        if (SDA_READ(data_base))  // read data   
8110605c:	e0bffd17 	ldw	r2,-12(fp)
81106060:	10800037 	ldwio	r2,0(r2)
81106064:	10000326 	beq	r2,zero,81106074 <i2c_read+0x90>
            Data |= 0x01;
81106068:	e0bffa03 	ldbu	r2,-24(fp)
8110606c:	10800054 	ori	r2,r2,1
81106070:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	0007883a 	mov	r3,zero
8110607c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106080:	01000044 	movi	r4,1
81106084:	112a8800 	call	8112a880 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106088:	e0bffb17 	ldw	r2,-20(fp)
8110608c:	10800044 	addi	r2,r2,1
81106090:	e0bffb15 	stw	r2,-20(fp)
81106094:	e0bffb17 	ldw	r2,-20(fp)
81106098:	10800210 	cmplti	r2,r2,8
8110609c:	103fe71e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811060a0:	e0bffc17 	ldw	r2,-16(fp)
811060a4:	0007883a 	mov	r3,zero
811060a8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811060ac:	e0bffd17 	ldw	r2,-12(fp)
811060b0:	10800104 	addi	r2,r2,4
811060b4:	1007883a 	mov	r3,r2
811060b8:	00800044 	movi	r2,1
811060bc:	18800035 	stwio	r2,0(r3)
    if (bAck)
811060c0:	e0bfff17 	ldw	r2,-4(fp)
811060c4:	10000426 	beq	r2,zero,811060d8 <i2c_read+0xf4>
        SDA_LOW(data_base);
811060c8:	e0bffd17 	ldw	r2,-12(fp)
811060cc:	0007883a 	mov	r3,zero
811060d0:	10c00035 	stwio	r3,0(r2)
811060d4:	00000306 	br	811060e4 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
811060d8:	e0bffd17 	ldw	r2,-12(fp)
811060dc:	00c00044 	movi	r3,1
811060e0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811060e4:	e0bffc17 	ldw	r2,-16(fp)
811060e8:	00c00044 	movi	r3,1
811060ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811060f0:	01000044 	movi	r4,1
811060f4:	112a8800 	call	8112a880 <usleep>
    SCL_LOW(clk_base); // clock low
811060f8:	e0bffc17 	ldw	r2,-16(fp)
811060fc:	0007883a 	mov	r3,zero
81106100:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106104:	01000044 	movi	r4,1
81106108:	112a8800 	call	8112a880 <usleep>
    SDA_LOW(data_base);  // data low
8110610c:	e0bffd17 	ldw	r2,-12(fp)
81106110:	0007883a 	mov	r3,zero
81106114:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81106118:	01000044 	movi	r4,1
8110611c:	112a8800 	call	8112a880 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81106120:	e0bffe17 	ldw	r2,-8(fp)
81106124:	e0fffa03 	ldbu	r3,-24(fp)
81106128:	10c00005 	stb	r3,0(r2)
}
8110612c:	0001883a 	nop
81106130:	e037883a 	mov	sp,fp
81106134:	dfc00117 	ldw	ra,4(sp)
81106138:	df000017 	ldw	fp,0(sp)
8110613c:	dec00204 	addi	sp,sp,8
81106140:	f800283a 	ret

81106144 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81106144:	defffd04 	addi	sp,sp,-12
81106148:	de00012e 	bgeu	sp,et,81106150 <bSetBoardLeds+0xc>
8110614c:	003b68fa 	trap	3
81106150:	df000215 	stw	fp,8(sp)
81106154:	df000204 	addi	fp,sp,8
81106158:	e13ffe15 	stw	r4,-8(fp)
8110615c:	2805883a 	mov	r2,r5
81106160:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81106164:	e0bffe17 	ldw	r2,-8(fp)
81106168:	10800058 	cmpnei	r2,r2,1
8110616c:	1000071e 	bne	r2,zero,8110618c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106170:	e0bfff03 	ldbu	r2,-4(fp)
81106174:	0084303a 	nor	r2,zero,r2
81106178:	1007883a 	mov	r3,r2
8110617c:	d0a04603 	ldbu	r2,-32488(gp)
81106180:	1884703a 	and	r2,r3,r2
81106184:	d0a04605 	stb	r2,-32488(gp)
81106188:	00000406 	br	8110619c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110618c:	d0e04603 	ldbu	r3,-32488(gp)
81106190:	e0bfff03 	ldbu	r2,-4(fp)
81106194:	1884b03a 	or	r2,r3,r2
81106198:	d0a04605 	stb	r2,-32488(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110619c:	d0a04603 	ldbu	r2,-32488(gp)
811061a0:	10c03fcc 	andi	r3,r2,255
811061a4:	00a00034 	movhi	r2,32768
811061a8:	10827404 	addi	r2,r2,2512
811061ac:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b0:	00800044 	movi	r2,1
}
811061b4:	e037883a 	mov	sp,fp
811061b8:	df000017 	ldw	fp,0(sp)
811061bc:	dec00104 	addi	sp,sp,4
811061c0:	f800283a 	ret

811061c4 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811061c4:	defffd04 	addi	sp,sp,-12
811061c8:	de00012e 	bgeu	sp,et,811061d0 <bSetPainelLeds+0xc>
811061cc:	003b68fa 	trap	3
811061d0:	df000215 	stw	fp,8(sp)
811061d4:	df000204 	addi	fp,sp,8
811061d8:	e13ffe15 	stw	r4,-8(fp)
811061dc:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
811061e0:	e0bffe17 	ldw	r2,-8(fp)
811061e4:	10800058 	cmpnei	r2,r2,1
811061e8:	1000051e 	bne	r2,zero,81106200 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
811061ec:	d0e00217 	ldw	r3,-32760(gp)
811061f0:	e0bfff17 	ldw	r2,-4(fp)
811061f4:	1884b03a 	or	r2,r3,r2
811061f8:	d0a00215 	stw	r2,-32760(gp)
811061fc:	00000506 	br	81106214 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106200:	e0bfff17 	ldw	r2,-4(fp)
81106204:	0086303a 	nor	r3,zero,r2
81106208:	d0a00217 	ldw	r2,-32760(gp)
8110620c:	1884703a 	and	r2,r3,r2
81106210:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81106214:	d0a00217 	ldw	r2,-32760(gp)
81106218:	1007883a 	mov	r3,r2
8110621c:	00a00034 	movhi	r2,32768
81106220:	10824004 	addi	r2,r2,2304
81106224:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106228:	00800044 	movi	r2,1
}
8110622c:	e037883a 	mov	sp,fp
81106230:	df000017 	ldw	fp,0(sp)
81106234:	dec00104 	addi	sp,sp,4
81106238:	f800283a 	ret

8110623c <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
8110623c:	defffc04 	addi	sp,sp,-16
81106240:	de00012e 	bgeu	sp,et,81106248 <msgdma_write_extended_descriptor+0xc>
81106244:	003b68fa 	trap	3
81106248:	df000315 	stw	fp,12(sp)
8110624c:	df000304 	addi	fp,sp,12
81106250:	e13ffd15 	stw	r4,-12(fp)
81106254:	e17ffe15 	stw	r5,-8(fp)
81106258:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110625c:	e0bffd17 	ldw	r2,-12(fp)
81106260:	10800037 	ldwio	r2,0(r2)
81106264:	1080010c 	andi	r2,r2,4
81106268:	10000226 	beq	r2,zero,81106274 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110626c:	00bff904 	movi	r2,-28
81106270:	00003d06 	br	81106368 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106274:	e0bfff17 	ldw	r2,-4(fp)
81106278:	10800017 	ldw	r2,0(r2)
8110627c:	1007883a 	mov	r3,r2
81106280:	e0bffe17 	ldw	r2,-8(fp)
81106284:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800104 	addi	r2,r2,4
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c00117 	ldw	r3,4(r3)
81106298:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110629c:	e0bffe17 	ldw	r2,-8(fp)
811062a0:	10800204 	addi	r2,r2,8
811062a4:	e0ffff17 	ldw	r3,-4(fp)
811062a8:	18c00217 	ldw	r3,8(r3)
811062ac:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
811062b0:	e0bffe17 	ldw	r2,-8(fp)
811062b4:	10800304 	addi	r2,r2,12
811062b8:	e0ffff17 	ldw	r3,-4(fp)
811062bc:	18c0030b 	ldhu	r3,12(r3)
811062c0:	18ffffcc 	andi	r3,r3,65535
811062c4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
811062c8:	e0bffe17 	ldw	r2,-8(fp)
811062cc:	10800384 	addi	r2,r2,14
811062d0:	e0ffff17 	ldw	r3,-4(fp)
811062d4:	18c00383 	ldbu	r3,14(r3)
811062d8:	18c03fcc 	andi	r3,r3,255
811062dc:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	108003c4 	addi	r2,r2,15
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c003c3 	ldbu	r3,15(r3)
811062f0:	18c03fcc 	andi	r3,r3,255
811062f4:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
811062f8:	e0bffe17 	ldw	r2,-8(fp)
811062fc:	10800404 	addi	r2,r2,16
81106300:	e0ffff17 	ldw	r3,-4(fp)
81106304:	18c0040b 	ldhu	r3,16(r3)
81106308:	18ffffcc 	andi	r3,r3,65535
8110630c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81106310:	e0bffe17 	ldw	r2,-8(fp)
81106314:	10800484 	addi	r2,r2,18
81106318:	e0ffff17 	ldw	r3,-4(fp)
8110631c:	18c0048b 	ldhu	r3,18(r3)
81106320:	18ffffcc 	andi	r3,r3,65535
81106324:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
81106328:	e0bffe17 	ldw	r2,-8(fp)
8110632c:	10800504 	addi	r2,r2,20
81106330:	e0ffff17 	ldw	r3,-4(fp)
81106334:	18c00517 	ldw	r3,20(r3)
81106338:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
8110633c:	e0bffe17 	ldw	r2,-8(fp)
81106340:	10800604 	addi	r2,r2,24
81106344:	e0ffff17 	ldw	r3,-4(fp)
81106348:	18c00617 	ldw	r3,24(r3)
8110634c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81106350:	e0bffe17 	ldw	r2,-8(fp)
81106354:	10800704 	addi	r2,r2,28
81106358:	e0ffff17 	ldw	r3,-4(fp)
8110635c:	18c00717 	ldw	r3,28(r3)
81106360:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81106364:	0005883a 	mov	r2,zero
}
81106368:	e037883a 	mov	sp,fp
8110636c:	df000017 	ldw	fp,0(sp)
81106370:	dec00104 	addi	sp,sp,4
81106374:	f800283a 	ret

81106378 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106378:	defff604 	addi	sp,sp,-40
8110637c:	de00012e 	bgeu	sp,et,81106384 <msgdma_construct_extended_descriptor+0xc>
81106380:	003b68fa 	trap	3
81106384:	df000915 	stw	fp,36(sp)
81106388:	df000904 	addi	fp,sp,36
8110638c:	e13ff715 	stw	r4,-36(fp)
81106390:	e17ff815 	stw	r5,-32(fp)
81106394:	e1bff915 	stw	r6,-28(fp)
81106398:	e1fffa15 	stw	r7,-24(fp)
8110639c:	e1800517 	ldw	r6,20(fp)
811063a0:	e1400617 	ldw	r5,24(fp)
811063a4:	e1000717 	ldw	r4,28(fp)
811063a8:	e0c00817 	ldw	r3,32(fp)
811063ac:	e0800917 	ldw	r2,36(fp)
811063b0:	e1bffb0d 	sth	r6,-20(fp)
811063b4:	e17ffc05 	stb	r5,-16(fp)
811063b8:	e13ffd05 	stb	r4,-12(fp)
811063bc:	e0fffe0d 	sth	r3,-8(fp)
811063c0:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
811063c4:	e0bff717 	ldw	r2,-36(fp)
811063c8:	10c01217 	ldw	r3,72(r2)
811063cc:	e0800117 	ldw	r2,4(fp)
811063d0:	18801936 	bltu	r3,r2,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063d4:	e13ff717 	ldw	r4,-36(fp)
811063d8:	20801317 	ldw	r2,76(r4)
811063dc:	20c01417 	ldw	r3,80(r4)
811063e0:	e13ffe0b 	ldhu	r4,-8(fp)
811063e4:	213fffcc 	andi	r4,r4,65535
811063e8:	2015883a 	mov	r10,r4
811063ec:	0017883a 	mov	r11,zero
811063f0:	1ac01136 	bltu	r3,r11,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063f4:	58c0011e 	bne	r11,r3,811063fc <msgdma_construct_extended_descriptor+0x84>
811063f8:	12800f36 	bltu	r2,r10,81106438 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
811063fc:	e13ff717 	ldw	r4,-36(fp)
81106400:	20801317 	ldw	r2,76(r4)
81106404:	20c01417 	ldw	r3,80(r4)
81106408:	e13fff0b 	ldhu	r4,-4(fp)
8110640c:	213fffcc 	andi	r4,r4,65535
81106410:	2011883a 	mov	r8,r4
81106414:	0013883a 	mov	r9,zero
81106418:	1a400736 	bltu	r3,r9,81106438 <msgdma_construct_extended_descriptor+0xc0>
8110641c:	48c0011e 	bne	r9,r3,81106424 <msgdma_construct_extended_descriptor+0xac>
81106420:	12000536 	bltu	r2,r8,81106438 <msgdma_construct_extended_descriptor+0xc0>
81106424:	e0bff717 	ldw	r2,-36(fp)
81106428:	10801703 	ldbu	r2,92(r2)
8110642c:	10803fcc 	andi	r2,r2,255
81106430:	10800060 	cmpeqi	r2,r2,1
81106434:	1000021e 	bne	r2,zero,81106440 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
81106438:	00bffa84 	movi	r2,-22
8110643c:	00002306 	br	811064cc <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
81106440:	e0bff817 	ldw	r2,-32(fp)
81106444:	e0fff917 	ldw	r3,-28(fp)
81106448:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
8110644c:	e0bff817 	ldw	r2,-32(fp)
81106450:	e0fffa17 	ldw	r3,-24(fp)
81106454:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81106458:	e0bff817 	ldw	r2,-32(fp)
8110645c:	e0c00117 	ldw	r3,4(fp)
81106460:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81106464:	e0bff817 	ldw	r2,-32(fp)
81106468:	e0fffb0b 	ldhu	r3,-20(fp)
8110646c:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106470:	e0bff817 	ldw	r2,-32(fp)
81106474:	e0fffc03 	ldbu	r3,-16(fp)
81106478:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110647c:	e0bff817 	ldw	r2,-32(fp)
81106480:	e0fffd03 	ldbu	r3,-12(fp)
81106484:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106488:	e0bff817 	ldw	r2,-32(fp)
8110648c:	e0fffe0b 	ldhu	r3,-8(fp)
81106490:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106494:	e0bff817 	ldw	r2,-32(fp)
81106498:	e0ffff0b 	ldhu	r3,-4(fp)
8110649c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
811064a0:	e0bff817 	ldw	r2,-32(fp)
811064a4:	e0c00317 	ldw	r3,12(fp)
811064a8:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
811064ac:	e0bff817 	ldw	r2,-32(fp)
811064b0:	e0c00417 	ldw	r3,16(fp)
811064b4:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811064b8:	e0800217 	ldw	r2,8(fp)
811064bc:	10e00034 	orhi	r3,r2,32768
811064c0:	e0bff817 	ldw	r2,-32(fp)
811064c4:	10c00715 	stw	r3,28(r2)

	return 0;
811064c8:	0005883a 	mov	r2,zero

}
811064cc:	e037883a 	mov	sp,fp
811064d0:	df000017 	ldw	fp,0(sp)
811064d4:	dec00104 	addi	sp,sp,4
811064d8:	f800283a 	ret

811064dc <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811064dc:	deffee04 	addi	sp,sp,-72
811064e0:	de00012e 	bgeu	sp,et,811064e8 <msgdma_descriptor_async_transfer+0xc>
811064e4:	003b68fa 	trap	3
811064e8:	dfc01115 	stw	ra,68(sp)
811064ec:	df001015 	stw	fp,64(sp)
811064f0:	df001004 	addi	fp,sp,64
811064f4:	e13ffd15 	stw	r4,-12(fp)
811064f8:	e17ffe15 	stw	r5,-8(fp)
811064fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106500:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106504:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106508:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110650c:	e0bffd17 	ldw	r2,-12(fp)
81106510:	10800317 	ldw	r2,12(r2)
81106514:	10800204 	addi	r2,r2,8
81106518:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110651c:	10bfffcc 	andi	r2,r2,65535
81106520:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106524:	e0bffd17 	ldw	r2,-12(fp)
81106528:	10800317 	ldw	r2,12(r2)
8110652c:	10800204 	addi	r2,r2,8
81106530:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106534:	1004d43a 	srli	r2,r2,16
81106538:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110653c:	e0bffd17 	ldw	r2,-12(fp)
81106540:	10800917 	ldw	r2,36(r2)
81106544:	e0fff417 	ldw	r3,-48(fp)
81106548:	1880042e 	bgeu	r3,r2,8110655c <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110654c:	e0bffd17 	ldw	r2,-12(fp)
81106550:	10800917 	ldw	r2,36(r2)
81106554:	e0fff317 	ldw	r3,-52(fp)
81106558:	18800236 	bltu	r3,r2,81106564 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110655c:	00bff904 	movi	r2,-28
81106560:	00009f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106564:	e0bffd17 	ldw	r2,-12(fp)
81106568:	10801817 	ldw	r2,96(r2)
8110656c:	e0bff615 	stw	r2,-40(fp)
81106570:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106574:	e0bffc0b 	ldhu	r2,-16(fp)
81106578:	e0fffc84 	addi	r3,fp,-14
8110657c:	180d883a 	mov	r6,r3
81106580:	100b883a 	mov	r5,r2
81106584:	e13ff617 	ldw	r4,-40(fp)
81106588:	11317080 	call	81131708 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110658c:	00800804 	movi	r2,32
81106590:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106594:	0005303a 	rdctl	r2,status
81106598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110659c:	e0fff717 	ldw	r3,-36(fp)
811065a0:	00bfff84 	movi	r2,-2
811065a4:	1884703a 	and	r2,r3,r2
811065a8:	1001703a 	wrctl	status,r2
  
  return context;
811065ac:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811065b0:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811065b4:	e0bffd17 	ldw	r2,-12(fp)
811065b8:	10800317 	ldw	r2,12(r2)
811065bc:	10800104 	addi	r2,r2,4
811065c0:	e0fff117 	ldw	r3,-60(fp)
811065c4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811065c8:	e0bffd17 	ldw	r2,-12(fp)
811065cc:	10800317 	ldw	r2,12(r2)
811065d0:	e0fffd17 	ldw	r3,-12(fp)
811065d4:	18c00317 	ldw	r3,12(r3)
811065d8:	18c00037 	ldwio	r3,0(r3)
811065dc:	10c00035 	stwio	r3,0(r2)
811065e0:	e0bff217 	ldw	r2,-56(fp)
811065e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811065e8:	e0bffb17 	ldw	r2,-20(fp)
811065ec:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
811065f0:	e0bffe17 	ldw	r2,-8(fp)
811065f4:	10001026 	beq	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
811065f8:	e0bfff17 	ldw	r2,-4(fp)
811065fc:	10000e1e 	bne	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106600:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106604:	d0a05017 	ldw	r2,-32448(gp)
81106608:	100f883a 	mov	r7,r2
8110660c:	01800784 	movi	r6,30
81106610:	01400044 	movi	r5,1
81106614:	01204534 	movhi	r4,33044
81106618:	213c9204 	addi	r4,r4,-3512
8110661c:	1113be40 	call	81113be4 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106620:	e0bffd17 	ldw	r2,-12(fp)
81106624:	10801817 	ldw	r2,96(r2)
81106628:	1009883a 	mov	r4,r2
8110662c:	1131a900 	call	81131a90 <OSSemPost>

		return -ETIME;
81106630:	00bff084 	movi	r2,-62
81106634:	00006a06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106638:	e0bffe17 	ldw	r2,-8(fp)
8110663c:	1000231e 	bne	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
81106640:	e0bfff17 	ldw	r2,-4(fp)
81106644:	10002126 	beq	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
81106648:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110664c:	00001506 	br	811066a4 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81106650:	01000044 	movi	r4,1
81106654:	1128dcc0 	call	81128dcc <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106658:	e0bff00b 	ldhu	r2,-64(fp)
8110665c:	1084e230 	cmpltui	r2,r2,5000
81106660:	10000d1e 	bne	r2,zero,81106698 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
81106664:	d0a05017 	ldw	r2,-32448(gp)
81106668:	100f883a 	mov	r7,r2
8110666c:	01801544 	movi	r6,85
81106670:	01400044 	movi	r5,1
81106674:	01204534 	movhi	r4,33044
81106678:	213c9a04 	addi	r4,r4,-3480
8110667c:	1113be40 	call	81113be4 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10801817 	ldw	r2,96(r2)
81106688:	1009883a 	mov	r4,r2
8110668c:	1131a900 	call	81131a90 <OSSemPost>

				return -ETIME;
81106690:	00bff084 	movi	r2,-62
81106694:	00005206 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106698:	e0bff00b 	ldhu	r2,-64(fp)
8110669c:	10800044 	addi	r2,r2,1
811066a0:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811066a4:	e0bffd17 	ldw	r2,-12(fp)
811066a8:	10c00317 	ldw	r3,12(r2)
811066ac:	e0bffd17 	ldw	r2,-12(fp)
811066b0:	10800417 	ldw	r2,16(r2)
811066b4:	e1bfff17 	ldw	r6,-4(fp)
811066b8:	100b883a 	mov	r5,r2
811066bc:	1809883a 	mov	r4,r3
811066c0:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811066c4:	103fe21e 	bne	r2,zero,81106650 <__reset+0xfb0e6650>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811066c8:	00000606 	br	811066e4 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811066cc:	e0bffd17 	ldw	r2,-12(fp)
811066d0:	10801817 	ldw	r2,96(r2)
811066d4:	1009883a 	mov	r4,r2
811066d8:	1131a900 	call	81131a90 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811066dc:	00bfffc4 	movi	r2,-1
811066e0:	00003f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
811066e4:	e0bffd17 	ldw	r2,-12(fp)
811066e8:	10800b17 	ldw	r2,44(r2)
811066ec:	10001c26 	beq	r2,zero,81106760 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800514 	ori	r2,r2,20
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff7c4 	movi	r2,-33
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fff917 	ldw	r3,-28(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff517 	ldw	r2,-44(fp)
81106758:	1001703a 	wrctl	status,r2
8110675c:	00001b06 	br	811067cc <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81106760:	e0bffd17 	ldw	r2,-12(fp)
81106764:	10c00d17 	ldw	r3,52(r2)
81106768:	e0bff117 	ldw	r2,-60(fp)
8110676c:	1884b03a 	or	r2,r3,r2
81106770:	10800114 	ori	r2,r2,4
81106774:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106778:	e0fff117 	ldw	r3,-60(fp)
8110677c:	00bff3c4 	movi	r2,-49
81106780:	1884703a 	and	r2,r3,r2
81106784:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106788:	0005303a 	rdctl	r2,status
8110678c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106790:	e0fffa17 	ldw	r3,-24(fp)
81106794:	00bfff84 	movi	r2,-2
81106798:	1884703a 	and	r2,r3,r2
8110679c:	1001703a 	wrctl	status,r2
  
  return context;
811067a0:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811067a4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811067a8:	e0bffd17 	ldw	r2,-12(fp)
811067ac:	10800317 	ldw	r2,12(r2)
811067b0:	10800104 	addi	r2,r2,4
811067b4:	e0fff117 	ldw	r3,-60(fp)
811067b8:	10c00035 	stwio	r3,0(r2)
811067bc:	e0bff217 	ldw	r2,-56(fp)
811067c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811067c4:	e0bff817 	ldw	r2,-32(fp)
811067c8:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
811067cc:	e0bffd17 	ldw	r2,-12(fp)
811067d0:	10801817 	ldw	r2,96(r2)
811067d4:	1009883a 	mov	r4,r2
811067d8:	1131a900 	call	81131a90 <OSSemPost>

	return 0;
811067dc:	0005883a 	mov	r2,zero
}
811067e0:	e037883a 	mov	sp,fp
811067e4:	dfc00117 	ldw	ra,4(sp)
811067e8:	df000017 	ldw	fp,0(sp)
811067ec:	dec00204 	addi	sp,sp,8
811067f0:	f800283a 	ret

811067f4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811067f4:	deffee04 	addi	sp,sp,-72
811067f8:	de00012e 	bgeu	sp,et,81106800 <msgdma_descriptor_sync_transfer+0xc>
811067fc:	003b68fa 	trap	3
81106800:	dfc01115 	stw	ra,68(sp)
81106804:	df001015 	stw	fp,64(sp)
81106808:	df001004 	addi	fp,sp,64
8110680c:	e13ffd15 	stw	r4,-12(fp)
81106810:	e17ffe15 	stw	r5,-8(fp)
81106814:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106818:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
8110681c:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
81106820:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
81106824:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106828:	e0bffd17 	ldw	r2,-12(fp)
8110682c:	10800317 	ldw	r2,12(r2)
81106830:	10800204 	addi	r2,r2,8
81106834:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81106838:	10bfffcc 	andi	r2,r2,65535
8110683c:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106840:	e0bffd17 	ldw	r2,-12(fp)
81106844:	10800317 	ldw	r2,12(r2)
81106848:	10800204 	addi	r2,r2,8
8110684c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106850:	1004d43a 	srli	r2,r2,16
81106854:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81106858:	00807804 	movi	r2,480
8110685c:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106860:	00001d06 	br	811068d8 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81106864:	01000044 	movi	r4,1
81106868:	1128dcc0 	call	81128dcc <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110686c:	e0bff10b 	ldhu	r2,-60(fp)
81106870:	1084e230 	cmpltui	r2,r2,5000
81106874:	1000091e 	bne	r2,zero,8110689c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106878:	d0a05017 	ldw	r2,-32448(gp)
8110687c:	100f883a 	mov	r7,r2
81106880:	01801304 	movi	r6,76
81106884:	01400044 	movi	r5,1
81106888:	01204534 	movhi	r4,33044
8110688c:	213cb004 	addi	r4,r4,-3392
81106890:	1113be40 	call	81113be4 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106894:	00bff084 	movi	r2,-62
81106898:	0000d006 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110689c:	e0bff10b 	ldhu	r2,-60(fp)
811068a0:	10800044 	addi	r2,r2,1
811068a4:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068a8:	e0bffd17 	ldw	r2,-12(fp)
811068ac:	10800317 	ldw	r2,12(r2)
811068b0:	10800204 	addi	r2,r2,8
811068b4:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
811068b8:	10bfffcc 	andi	r2,r2,65535
811068bc:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068c0:	e0bffd17 	ldw	r2,-12(fp)
811068c4:	10800317 	ldw	r2,12(r2)
811068c8:	10800204 	addi	r2,r2,8
811068cc:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
811068d0:	1004d43a 	srli	r2,r2,16
811068d4:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811068d8:	e0bffd17 	ldw	r2,-12(fp)
811068dc:	10800917 	ldw	r2,36(r2)
811068e0:	e0fff317 	ldw	r3,-52(fp)
811068e4:	18bfdf2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811068e8:	e0bffd17 	ldw	r2,-12(fp)
811068ec:	10800917 	ldw	r2,36(r2)
811068f0:	e0fff217 	ldw	r3,-56(fp)
811068f4:	18bfdb2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811068f8:	e0bffd17 	ldw	r2,-12(fp)
811068fc:	10801817 	ldw	r2,96(r2)
81106900:	e0bff815 	stw	r2,-32(fp)
81106904:	e03ffc0d 	sth	zero,-16(fp)
81106908:	e0bffc0b 	ldhu	r2,-16(fp)
8110690c:	e0fffc84 	addi	r3,fp,-14
81106910:	180d883a 	mov	r6,r3
81106914:	100b883a 	mov	r5,r2
81106918:	e13ff817 	ldw	r4,-32(fp)
8110691c:	11317080 	call	81131708 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106920:	0005303a 	rdctl	r2,status
81106924:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106928:	e0fffb17 	ldw	r3,-20(fp)
8110692c:	00bfff84 	movi	r2,-2
81106930:	1884703a 	and	r2,r3,r2
81106934:	1001703a 	wrctl	status,r2
  
  return context;
81106938:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110693c:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106940:	e0bffd17 	ldw	r2,-12(fp)
81106944:	10800317 	ldw	r2,12(r2)
81106948:	10800104 	addi	r2,r2,4
8110694c:	00c00804 	movi	r3,32
81106950:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106954:	e0bffd17 	ldw	r2,-12(fp)
81106958:	10800317 	ldw	r2,12(r2)
8110695c:	e0fffd17 	ldw	r3,-12(fp)
81106960:	18c00317 	ldw	r3,12(r3)
81106964:	18c00037 	ldwio	r3,0(r3)
81106968:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
8110696c:	e0bffe17 	ldw	r2,-8(fp)
81106970:	10001026 	beq	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
81106974:	e0bfff17 	ldw	r2,-4(fp)
81106978:	10000e1e 	bne	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110697c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106980:	d0a05017 	ldw	r2,-32448(gp)
81106984:	100f883a 	mov	r7,r2
81106988:	01800784 	movi	r6,30
8110698c:	01400044 	movi	r5,1
81106990:	01204534 	movhi	r4,33044
81106994:	213c9204 	addi	r4,r4,-3512
81106998:	1113be40 	call	81113be4 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110699c:	e0bffd17 	ldw	r2,-12(fp)
811069a0:	10801817 	ldw	r2,96(r2)
811069a4:	1009883a 	mov	r4,r2
811069a8:	1131a900 	call	81131a90 <OSSemPost>

		return -ETIME;
811069ac:	00bff084 	movi	r2,-62
811069b0:	00008a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069b4:	e0bffe17 	ldw	r2,-8(fp)
811069b8:	1000231e 	bne	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
811069bc:	e0bfff17 	ldw	r2,-4(fp)
811069c0:	10002126 	beq	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
811069c4:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069c8:	00001506 	br	81106a20 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811069cc:	01000044 	movi	r4,1
811069d0:	1128dcc0 	call	81128dcc <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811069d4:	e0bff10b 	ldhu	r2,-60(fp)
811069d8:	1084e230 	cmpltui	r2,r2,5000
811069dc:	10000d1e 	bne	r2,zero,81106a14 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
811069e0:	d0a05017 	ldw	r2,-32448(gp)
811069e4:	100f883a 	mov	r7,r2
811069e8:	01801004 	movi	r6,64
811069ec:	01400044 	movi	r5,1
811069f0:	01204534 	movhi	r4,33044
811069f4:	213cc404 	addi	r4,r4,-3312
811069f8:	1113be40 	call	81113be4 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
811069fc:	e0bffd17 	ldw	r2,-12(fp)
81106a00:	10801817 	ldw	r2,96(r2)
81106a04:	1009883a 	mov	r4,r2
81106a08:	1131a900 	call	81131a90 <OSSemPost>

				return -ETIME;
81106a0c:	00bff084 	movi	r2,-62
81106a10:	00007206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
81106a14:	e0bff10b 	ldhu	r2,-60(fp)
81106a18:	10800044 	addi	r2,r2,1
81106a1c:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106a20:	e0bffd17 	ldw	r2,-12(fp)
81106a24:	10c00317 	ldw	r3,12(r2)
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800417 	ldw	r2,16(r2)
81106a30:	e1bfff17 	ldw	r6,-4(fp)
81106a34:	100b883a 	mov	r5,r2
81106a38:	1809883a 	mov	r4,r3
81106a3c:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106a40:	103fe21e 	bne	r2,zero,811069cc <__reset+0xfb0e69cc>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106a44:	00000606 	br	81106a60 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106a48:	e0bffd17 	ldw	r2,-12(fp)
81106a4c:	10801817 	ldw	r2,96(r2)
81106a50:	1009883a 	mov	r4,r2
81106a54:	1131a900 	call	81131a90 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81106a58:	00bfffc4 	movi	r2,-1
81106a5c:	00005f06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106a60:	e0bffd17 	ldw	r2,-12(fp)
81106a64:	10800317 	ldw	r2,12(r2)
81106a68:	10800104 	addi	r2,r2,4
81106a6c:	e0fffd17 	ldw	r3,-12(fp)
81106a70:	19000d17 	ldw	r4,52(r3)
81106a74:	00fff2c4 	movi	r3,-53
81106a78:	20c6703a 	and	r3,r4,r3
81106a7c:	18c00114 	ori	r3,r3,4
81106a80:	10c00035 	stwio	r3,0(r2)
81106a84:	e0bff517 	ldw	r2,-44(fp)
81106a88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a8c:	e0bff717 	ldw	r2,-36(fp)
81106a90:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a94:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a98:	e0bffd17 	ldw	r2,-12(fp)
81106a9c:	10800317 	ldw	r2,12(r2)
81106aa0:	10800037 	ldwio	r2,0(r2)
81106aa4:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa8:	00001906 	br	81106b10 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106aac:	01000044 	movi	r4,1
81106ab0:	1128dcc0 	call	81128dcc <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106ab4:	e0bff10b 	ldhu	r2,-60(fp)
81106ab8:	1084e230 	cmpltui	r2,r2,5000
81106abc:	10000d1e 	bne	r2,zero,81106af4 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106ac0:	d0a05017 	ldw	r2,-32448(gp)
81106ac4:	100f883a 	mov	r7,r2
81106ac8:	01801184 	movi	r6,70
81106acc:	01400044 	movi	r5,1
81106ad0:	01204534 	movhi	r4,33044
81106ad4:	213cd504 	addi	r4,r4,-3244
81106ad8:	1113be40 	call	81113be4 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106adc:	e0bffd17 	ldw	r2,-12(fp)
81106ae0:	10801817 	ldw	r2,96(r2)
81106ae4:	1009883a 	mov	r4,r2
81106ae8:	1131a900 	call	81131a90 <OSSemPost>

			return -ETIME;
81106aec:	00bff084 	movi	r2,-62
81106af0:	00003a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106af4:	e0bff10b 	ldhu	r2,-60(fp)
81106af8:	10800044 	addi	r2,r2,1
81106afc:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106b00:	e0bffd17 	ldw	r2,-12(fp)
81106b04:	10800317 	ldw	r2,12(r2)
81106b08:	10800037 	ldwio	r2,0(r2)
81106b0c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106b10:	e0fff017 	ldw	r3,-64(fp)
81106b14:	e0bff617 	ldw	r2,-40(fp)
81106b18:	1884703a 	and	r2,r3,r2
81106b1c:	1000031e 	bne	r2,zero,81106b2c <msgdma_descriptor_sync_transfer+0x338>
81106b20:	e0bff017 	ldw	r2,-64(fp)
81106b24:	1080004c 	andi	r2,r2,1
81106b28:	103fe01e 	bne	r2,zero,81106aac <__reset+0xfb0e6aac>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106b2c:	e0fff017 	ldw	r3,-64(fp)
81106b30:	e0bff617 	ldw	r2,-40(fp)
81106b34:	1884703a 	and	r2,r3,r2
81106b38:	10000626 	beq	r2,zero,81106b54 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106b3c:	e0bffd17 	ldw	r2,-12(fp)
81106b40:	10801817 	ldw	r2,96(r2)
81106b44:	1009883a 	mov	r4,r2
81106b48:	1131a900 	call	81131a90 <OSSemPost>

		return error;
81106b4c:	e0bff617 	ldw	r2,-40(fp)
81106b50:	00002206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106b54:	e0bffd17 	ldw	r2,-12(fp)
81106b58:	10800317 	ldw	r2,12(r2)
81106b5c:	10800104 	addi	r2,r2,4
81106b60:	10800037 	ldwio	r2,0(r2)
81106b64:	10800814 	ori	r2,r2,32
81106b68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106b6c:	0005303a 	rdctl	r2,status
81106b70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b74:	e0fffa17 	ldw	r3,-24(fp)
81106b78:	00bfff84 	movi	r2,-2
81106b7c:	1884703a 	and	r2,r3,r2
81106b80:	1001703a 	wrctl	status,r2
  
  return context;
81106b84:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b88:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b8c:	e0bffd17 	ldw	r2,-12(fp)
81106b90:	10800317 	ldw	r2,12(r2)
81106b94:	10800104 	addi	r2,r2,4
81106b98:	e0fff417 	ldw	r3,-48(fp)
81106b9c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106ba0:	e0bffd17 	ldw	r2,-12(fp)
81106ba4:	10800317 	ldw	r2,12(r2)
81106ba8:	e0fffd17 	ldw	r3,-12(fp)
81106bac:	18c00317 	ldw	r3,12(r3)
81106bb0:	18c00037 	ldwio	r3,0(r3)
81106bb4:	10c00035 	stwio	r3,0(r2)
81106bb8:	e0bff517 	ldw	r2,-44(fp)
81106bbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106bc0:	e0bff917 	ldw	r2,-28(fp)
81106bc4:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106bc8:	e0bffd17 	ldw	r2,-12(fp)
81106bcc:	10801817 	ldw	r2,96(r2)
81106bd0:	1009883a 	mov	r4,r2
81106bd4:	1131a900 	call	81131a90 <OSSemPost>

	return 0;
81106bd8:	0005883a 	mov	r2,zero

}
81106bdc:	e037883a 	mov	sp,fp
81106be0:	dfc00117 	ldw	ra,4(sp)
81106be4:	df000017 	ldw	fp,0(sp)
81106be8:	dec00204 	addi	sp,sp,8
81106bec:	f800283a 	ret

81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106bf0:	deffec04 	addi	sp,sp,-80
81106bf4:	de00012e 	bgeu	sp,et,81106bfc <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106bf8:	003b68fa 	trap	3
81106bfc:	dfc01315 	stw	ra,76(sp)
81106c00:	df001215 	stw	fp,72(sp)
81106c04:	df001204 	addi	fp,sp,72
81106c08:	e13ff715 	stw	r4,-36(fp)
81106c0c:	e17ff815 	stw	r5,-32(fp)
81106c10:	e1bff915 	stw	r6,-28(fp)
81106c14:	e1fffa15 	stw	r7,-24(fp)
81106c18:	e1800617 	ldw	r6,24(fp)
81106c1c:	e1400717 	ldw	r5,28(fp)
81106c20:	e1000817 	ldw	r4,32(fp)
81106c24:	e0c00917 	ldw	r3,36(fp)
81106c28:	e0800a17 	ldw	r2,40(fp)
81106c2c:	e1bffb0d 	sth	r6,-20(fp)
81106c30:	e17ffc05 	stb	r5,-16(fp)
81106c34:	e13ffd05 	stb	r4,-12(fp)
81106c38:	e0fffe0d 	sth	r3,-8(fp)
81106c3c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106c40:	e0bffb0b 	ldhu	r2,-20(fp)
81106c44:	e0fffc03 	ldbu	r3,-16(fp)
81106c48:	e13ffd03 	ldbu	r4,-12(fp)
81106c4c:	e17ffe0b 	ldhu	r5,-8(fp)
81106c50:	e1bfff0b 	ldhu	r6,-4(fp)
81106c54:	d9800815 	stw	r6,32(sp)
81106c58:	d9400715 	stw	r5,28(sp)
81106c5c:	d9000615 	stw	r4,24(sp)
81106c60:	d8c00515 	stw	r3,20(sp)
81106c64:	d8800415 	stw	r2,16(sp)
81106c68:	e0800517 	ldw	r2,20(fp)
81106c6c:	d8800315 	stw	r2,12(sp)
81106c70:	e0800417 	ldw	r2,16(fp)
81106c74:	d8800215 	stw	r2,8(sp)
81106c78:	e0800317 	ldw	r2,12(fp)
81106c7c:	d8800115 	stw	r2,4(sp)
81106c80:	e0800217 	ldw	r2,8(fp)
81106c84:	d8800015 	stw	r2,0(sp)
81106c88:	e1fffa17 	ldw	r7,-24(fp)
81106c8c:	e1bff917 	ldw	r6,-28(fp)
81106c90:	e17ff817 	ldw	r5,-32(fp)
81106c94:	e13ff717 	ldw	r4,-36(fp)
81106c98:	11063780 	call	81106378 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c9c:	e037883a 	mov	sp,fp
81106ca0:	dfc00117 	ldw	ra,4(sp)
81106ca4:	df000017 	ldw	fp,0(sp)
81106ca8:	dec00204 	addi	sp,sp,8
81106cac:	f800283a 	ret

81106cb0 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cb0:	defffc04 	addi	sp,sp,-16
81106cb4:	de00012e 	bgeu	sp,et,81106cbc <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106cb8:	003b68fa 	trap	3
81106cbc:	dfc00315 	stw	ra,12(sp)
81106cc0:	df000215 	stw	fp,8(sp)
81106cc4:	df000204 	addi	fp,sp,8
81106cc8:	e13ffe15 	stw	r4,-8(fp)
81106ccc:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106cd0:	e1bfff17 	ldw	r6,-4(fp)
81106cd4:	000b883a 	mov	r5,zero
81106cd8:	e13ffe17 	ldw	r4,-8(fp)
81106cdc:	11064dc0 	call	811064dc <msgdma_descriptor_async_transfer>
}
81106ce0:	e037883a 	mov	sp,fp
81106ce4:	dfc00117 	ldw	ra,4(sp)
81106ce8:	df000017 	ldw	fp,0(sp)
81106cec:	dec00204 	addi	sp,sp,8
81106cf0:	f800283a 	ret

81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cf4:	defffc04 	addi	sp,sp,-16
81106cf8:	de00012e 	bgeu	sp,et,81106d00 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106cfc:	003b68fa 	trap	3
81106d00:	dfc00315 	stw	ra,12(sp)
81106d04:	df000215 	stw	fp,8(sp)
81106d08:	df000204 	addi	fp,sp,8
81106d0c:	e13ffe15 	stw	r4,-8(fp)
81106d10:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106d14:	e1bfff17 	ldw	r6,-4(fp)
81106d18:	000b883a 	mov	r5,zero
81106d1c:	e13ffe17 	ldw	r4,-8(fp)
81106d20:	11067f40 	call	811067f4 <msgdma_descriptor_sync_transfer>
}
81106d24:	e037883a 	mov	sp,fp
81106d28:	dfc00117 	ldw	ra,4(sp)
81106d2c:	df000017 	ldw	fp,0(sp)
81106d30:	dec00204 	addi	sp,sp,8
81106d34:	f800283a 	ret

81106d38 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106d38:	defff204 	addi	sp,sp,-56
81106d3c:	de00012e 	bgeu	sp,et,81106d44 <POWER_SPI_RW+0xc>
81106d40:	003b68fa 	trap	3
81106d44:	dfc00d15 	stw	ra,52(sp)
81106d48:	df000c15 	stw	fp,48(sp)
81106d4c:	df000c04 	addi	fp,sp,48
81106d50:	2007883a 	mov	r3,r4
81106d54:	2805883a 	mov	r2,r5
81106d58:	e1bffe15 	stw	r6,-8(fp)
81106d5c:	e1ffff15 	stw	r7,-4(fp)
81106d60:	e0fffc05 	stb	r3,-16(fp)
81106d64:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106d68:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106d6c:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d70:	008003f4 	movhi	r2,15
81106d74:	10909004 	addi	r2,r2,16960
81106d78:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d7c:	00bfe004 	movi	r2,-128
81106d80:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d84:	e0bffe17 	ldw	r2,-8(fp)
81106d88:	10000226 	beq	r2,zero,81106d94 <POWER_SPI_RW+0x5c>
81106d8c:	00800804 	movi	r2,32
81106d90:	00000106 	br	81106d98 <POWER_SPI_RW+0x60>
81106d94:	0005883a 	mov	r2,zero
81106d98:	e0fff403 	ldbu	r3,-48(fp)
81106d9c:	10c4b03a 	or	r2,r2,r3
81106da0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106da4:	e0800217 	ldw	r2,8(fp)
81106da8:	10000226 	beq	r2,zero,81106db4 <POWER_SPI_RW+0x7c>
81106dac:	00800404 	movi	r2,16
81106db0:	00000106 	br	81106db8 <POWER_SPI_RW+0x80>
81106db4:	0005883a 	mov	r2,zero
81106db8:	e0fff403 	ldbu	r3,-48(fp)
81106dbc:	10c4b03a 	or	r2,r2,r3
81106dc0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106dc4:	e0bfff17 	ldw	r2,-4(fp)
81106dc8:	10000226 	beq	r2,zero,81106dd4 <POWER_SPI_RW+0x9c>
81106dcc:	00800204 	movi	r2,8
81106dd0:	00000106 	br	81106dd8 <POWER_SPI_RW+0xa0>
81106dd4:	0005883a 	mov	r2,zero
81106dd8:	e0fff403 	ldbu	r3,-48(fp)
81106ddc:	10c4b03a 	or	r2,r2,r3
81106de0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106de4:	e0bffd03 	ldbu	r2,-12(fp)
81106de8:	108001cc 	andi	r2,r2,7
81106dec:	1007883a 	mov	r3,r2
81106df0:	e0bff403 	ldbu	r2,-48(fp)
81106df4:	1884b03a 	or	r2,r3,r2
81106df8:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106dfc:	0007883a 	mov	r3,zero
81106e00:	00a00034 	movhi	r2,32768
81106e04:	10824404 	addi	r2,r2,2320
81106e08:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106e0c:	0007883a 	mov	r3,zero
81106e10:	00a00034 	movhi	r2,32768
81106e14:	10824c04 	addi	r2,r2,2352
81106e18:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106e1c:	e0bffc03 	ldbu	r2,-16(fp)
81106e20:	1000021e 	bne	r2,zero,81106e2c <POWER_SPI_RW+0xf4>
81106e24:	00c00084 	movi	r3,2
81106e28:	00000106 	br	81106e30 <POWER_SPI_RW+0xf8>
81106e2c:	00c00044 	movi	r3,1
81106e30:	00a00034 	movhi	r2,32768
81106e34:	10824804 	addi	r2,r2,2336
81106e38:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106e3c:	010003c4 	movi	r4,15
81106e40:	112a8800 	call	8112a880 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e44:	00000306 	br	81106e54 <POWER_SPI_RW+0x11c>
		nWait++;
81106e48:	e0bff817 	ldw	r2,-32(fp)
81106e4c:	10800044 	addi	r2,r2,1
81106e50:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e54:	00a00034 	movhi	r2,32768
81106e58:	10825404 	addi	r2,r2,2384
81106e5c:	10800037 	ldwio	r2,0(r2)
81106e60:	1080004c 	andi	r2,r2,1
81106e64:	10000326 	beq	r2,zero,81106e74 <POWER_SPI_RW+0x13c>
81106e68:	e0fff817 	ldw	r3,-32(fp)
81106e6c:	e0bffa17 	ldw	r2,-24(fp)
81106e70:	18bff516 	blt	r3,r2,81106e48 <__reset+0xfb0e6e48>
		nWait++;
	}

	if (SPI_SDO) {
81106e74:	00a00034 	movhi	r2,32768
81106e78:	10825404 	addi	r2,r2,2384
81106e7c:	10800037 	ldwio	r2,0(r2)
81106e80:	1080004c 	andi	r2,r2,1
81106e84:	10000626 	beq	r2,zero,81106ea0 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e88:	00c000c4 	movi	r3,3
81106e8c:	00a00034 	movhi	r2,32768
81106e90:	10824804 	addi	r2,r2,2336
81106e94:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e98:	0005883a 	mov	r2,zero
81106e9c:	0000db06 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ea0:	e03ff715 	stw	zero,-36(fp)
81106ea4:	00002406 	br	81106f38 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106ea8:	e0bff403 	ldbu	r2,-48(fp)
81106eac:	10803fcc 	andi	r2,r2,255
81106eb0:	1004d1fa 	srli	r2,r2,7
81106eb4:	10c03fcc 	andi	r3,r2,255
81106eb8:	00a00034 	movhi	r2,32768
81106ebc:	10825004 	addi	r2,r2,2368
81106ec0:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ec4:	e0bff403 	ldbu	r2,-48(fp)
81106ec8:	1085883a 	add	r2,r2,r2
81106ecc:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106ed0:	e0bff517 	ldw	r2,-44(fp)
81106ed4:	1085883a 	add	r2,r2,r2
81106ed8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106edc:	00a00034 	movhi	r2,32768
81106ee0:	10825404 	addi	r2,r2,2384
81106ee4:	10800037 	ldwio	r2,0(r2)
81106ee8:	1080004c 	andi	r2,r2,1
81106eec:	1007883a 	mov	r3,r2
81106ef0:	e0bff517 	ldw	r2,-44(fp)
81106ef4:	10c4b03a 	or	r2,r2,r3
81106ef8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106efc:	00c00044 	movi	r3,1
81106f00:	00a00034 	movhi	r2,32768
81106f04:	10824c04 	addi	r2,r2,2352
81106f08:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f0c:	010003c4 	movi	r4,15
81106f10:	112a8800 	call	8112a880 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f14:	0007883a 	mov	r3,zero
81106f18:	00a00034 	movhi	r2,32768
81106f1c:	10824c04 	addi	r2,r2,2352
81106f20:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f24:	010003c4 	movi	r4,15
81106f28:	112a8800 	call	8112a880 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106f2c:	e0bff717 	ldw	r2,-36(fp)
81106f30:	10800044 	addi	r2,r2,1
81106f34:	e0bff715 	stw	r2,-36(fp)
81106f38:	e0bff717 	ldw	r2,-36(fp)
81106f3c:	10800090 	cmplti	r2,r2,2
81106f40:	103fd91e 	bne	r2,zero,81106ea8 <__reset+0xfb0e6ea8>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f44:	e03ff715 	stw	zero,-36(fp)
81106f48:	00002406 	br	81106fdc <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106f4c:	e0bff403 	ldbu	r2,-48(fp)
81106f50:	10803fcc 	andi	r2,r2,255
81106f54:	1004d1fa 	srli	r2,r2,7
81106f58:	10c03fcc 	andi	r3,r2,255
81106f5c:	00a00034 	movhi	r2,32768
81106f60:	10825004 	addi	r2,r2,2368
81106f64:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106f68:	e0bff403 	ldbu	r2,-48(fp)
81106f6c:	1085883a 	add	r2,r2,r2
81106f70:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f74:	e0bff517 	ldw	r2,-44(fp)
81106f78:	1085883a 	add	r2,r2,r2
81106f7c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f80:	00a00034 	movhi	r2,32768
81106f84:	10825404 	addi	r2,r2,2384
81106f88:	10800037 	ldwio	r2,0(r2)
81106f8c:	1080004c 	andi	r2,r2,1
81106f90:	1007883a 	mov	r3,r2
81106f94:	e0bff517 	ldw	r2,-44(fp)
81106f98:	10c4b03a 	or	r2,r2,r3
81106f9c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fa0:	00c00044 	movi	r3,1
81106fa4:	00a00034 	movhi	r2,32768
81106fa8:	10824c04 	addi	r2,r2,2352
81106fac:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fb0:	010003c4 	movi	r4,15
81106fb4:	112a8800 	call	8112a880 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fb8:	0007883a 	mov	r3,zero
81106fbc:	00a00034 	movhi	r2,32768
81106fc0:	10824c04 	addi	r2,r2,2352
81106fc4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fc8:	010003c4 	movi	r4,15
81106fcc:	112a8800 	call	8112a880 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106fd0:	e0bff717 	ldw	r2,-36(fp)
81106fd4:	10800044 	addi	r2,r2,1
81106fd8:	e0bff715 	stw	r2,-36(fp)
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800210 	cmplti	r2,r2,8
81106fe4:	103fd91e 	bne	r2,zero,81106f4c <__reset+0xfb0e6f4c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fe8:	e03ff715 	stw	zero,-36(fp)
81106fec:	00001a06 	br	81107058 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106ff0:	e0bff517 	ldw	r2,-44(fp)
81106ff4:	1085883a 	add	r2,r2,r2
81106ff8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106ffc:	00a00034 	movhi	r2,32768
81107000:	10825404 	addi	r2,r2,2384
81107004:	10800037 	ldwio	r2,0(r2)
81107008:	1080004c 	andi	r2,r2,1
8110700c:	1007883a 	mov	r3,r2
81107010:	e0bff517 	ldw	r2,-44(fp)
81107014:	10c4b03a 	or	r2,r2,r3
81107018:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110701c:	00c00044 	movi	r3,1
81107020:	00a00034 	movhi	r2,32768
81107024:	10824c04 	addi	r2,r2,2352
81107028:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110702c:	010003c4 	movi	r4,15
81107030:	112a8800 	call	8112a880 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107034:	0007883a 	mov	r3,zero
81107038:	00a00034 	movhi	r2,32768
8110703c:	10824c04 	addi	r2,r2,2352
81107040:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107044:	010003c4 	movi	r4,15
81107048:	112a8800 	call	8112a880 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110704c:	e0bff717 	ldw	r2,-36(fp)
81107050:	10800044 	addi	r2,r2,1
81107054:	e0bff715 	stw	r2,-36(fp)
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800210 	cmplti	r2,r2,8
81107060:	103fe31e 	bne	r2,zero,81106ff0 <__reset+0xfb0e6ff0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107064:	e03ff715 	stw	zero,-36(fp)
81107068:	00001a06 	br	811070d4 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8110706c:	e0bff517 	ldw	r2,-44(fp)
81107070:	1085883a 	add	r2,r2,r2
81107074:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107078:	00a00034 	movhi	r2,32768
8110707c:	10825404 	addi	r2,r2,2384
81107080:	10800037 	ldwio	r2,0(r2)
81107084:	1080004c 	andi	r2,r2,1
81107088:	1007883a 	mov	r3,r2
8110708c:	e0bff517 	ldw	r2,-44(fp)
81107090:	10c4b03a 	or	r2,r2,r3
81107094:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107098:	00c00044 	movi	r3,1
8110709c:	00a00034 	movhi	r2,32768
811070a0:	10824c04 	addi	r2,r2,2352
811070a4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070a8:	010003c4 	movi	r4,15
811070ac:	112a8800 	call	8112a880 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070b0:	0007883a 	mov	r3,zero
811070b4:	00a00034 	movhi	r2,32768
811070b8:	10824c04 	addi	r2,r2,2352
811070bc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070c0:	010003c4 	movi	r4,15
811070c4:	112a8800 	call	8112a880 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
811070c8:	e0bff717 	ldw	r2,-36(fp)
811070cc:	10800044 	addi	r2,r2,1
811070d0:	e0bff715 	stw	r2,-36(fp)
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800210 	cmplti	r2,r2,8
811070dc:	103fe31e 	bne	r2,zero,8110706c <__reset+0xfb0e706c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070e0:	e03ff715 	stw	zero,-36(fp)
811070e4:	00001a06 	br	81107150 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811070e8:	e0bff517 	ldw	r2,-44(fp)
811070ec:	1085883a 	add	r2,r2,r2
811070f0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811070f4:	00a00034 	movhi	r2,32768
811070f8:	10825404 	addi	r2,r2,2384
811070fc:	10800037 	ldwio	r2,0(r2)
81107100:	1080004c 	andi	r2,r2,1
81107104:	1007883a 	mov	r3,r2
81107108:	e0bff517 	ldw	r2,-44(fp)
8110710c:	10c4b03a 	or	r2,r2,r3
81107110:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107114:	00c00044 	movi	r3,1
81107118:	00a00034 	movhi	r2,32768
8110711c:	10824c04 	addi	r2,r2,2352
81107120:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107124:	010003c4 	movi	r4,15
81107128:	112a8800 	call	8112a880 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110712c:	0007883a 	mov	r3,zero
81107130:	00a00034 	movhi	r2,32768
81107134:	10824c04 	addi	r2,r2,2352
81107138:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110713c:	010003c4 	movi	r4,15
81107140:	112a8800 	call	8112a880 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107144:	e0bff717 	ldw	r2,-36(fp)
81107148:	10800044 	addi	r2,r2,1
8110714c:	e0bff715 	stw	r2,-36(fp)
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800190 	cmplti	r2,r2,6
81107158:	103fe31e 	bne	r2,zero,811070e8 <__reset+0xfb0e70e8>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8110715c:	00c00044 	movi	r3,1
81107160:	00a00034 	movhi	r2,32768
81107164:	10824c04 	addi	r2,r2,2352
81107168:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110716c:	010003c4 	movi	r4,15
81107170:	112a8800 	call	8112a880 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107174:	00c000c4 	movi	r3,3
81107178:	00a00034 	movhi	r2,32768
8110717c:	10824804 	addi	r2,r2,2336
81107180:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107184:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107188:	00800044 	movi	r2,1
8110718c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107190:	e03ff715 	stw	zero,-36(fp)
81107194:	00000d06 	br	811071cc <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107198:	e0fff517 	ldw	r3,-44(fp)
8110719c:	e0bff617 	ldw	r2,-40(fp)
811071a0:	1884703a 	and	r2,r3,r2
811071a4:	1000031e 	bne	r2,zero,811071b4 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
811071a8:	e0bff917 	ldw	r2,-28(fp)
811071ac:	10800044 	addi	r2,r2,1
811071b0:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
811071b4:	e0bff617 	ldw	r2,-40(fp)
811071b8:	1085883a 	add	r2,r2,r2
811071bc:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
811071c0:	e0bff717 	ldw	r2,-36(fp)
811071c4:	10800044 	addi	r2,r2,1
811071c8:	e0bff715 	stw	r2,-36(fp)
811071cc:	e0bff717 	ldw	r2,-36(fp)
811071d0:	10800810 	cmplti	r2,r2,32
811071d4:	103ff01e 	bne	r2,zero,81107198 <__reset+0xfb0e7198>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
811071d8:	e0bff917 	ldw	r2,-28(fp)
811071dc:	1080004c 	andi	r2,r2,1
811071e0:	1005003a 	cmpeq	r2,r2,zero
811071e4:	10803fcc 	andi	r2,r2,255
811071e8:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
811071ec:	e0bffb17 	ldw	r2,-20(fp)
811071f0:	1000021e 	bne	r2,zero,811071fc <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
811071f4:	0005883a 	mov	r2,zero
811071f8:	00000406 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
811071fc:	e0800317 	ldw	r2,12(fp)
81107200:	e0fff517 	ldw	r3,-44(fp)
81107204:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107208:	e0bffb17 	ldw	r2,-20(fp)
}
8110720c:	e037883a 	mov	sp,fp
81107210:	dfc00117 	ldw	ra,4(sp)
81107214:	df000017 	ldw	fp,0(sp)
81107218:	dec00204 	addi	sp,sp,8
8110721c:	f800283a 	ret

81107220 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
81107220:	defffc04 	addi	sp,sp,-16
81107224:	de00012e 	bgeu	sp,et,8110722c <vRstcSimucamReset+0xc>
81107228:	003b68fa 	trap	3
8110722c:	dfc00315 	stw	ra,12(sp)
81107230:	df000215 	stw	fp,8(sp)
81107234:	df000204 	addi	fp,sp,8
81107238:	2005883a 	mov	r2,r4
8110723c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
81107240:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
81107244:	e0bfff0b 	ldhu	r2,-4(fp)
81107248:	e0fffe17 	ldw	r3,-8(fp)
8110724c:	1884b03a 	or	r2,r3,r2
81107250:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
81107254:	e0bffe17 	ldw	r2,-8(fp)
81107258:	10800074 	orhi	r2,r2,1
8110725c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107260:	e1bffe17 	ldw	r6,-8(fp)
81107264:	000b883a 	mov	r5,zero
81107268:	01200034 	movhi	r4,32768
8110726c:	21020004 	addi	r4,r4,2048
81107270:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107274:	0001883a 	nop
81107278:	e037883a 	mov	sp,fp
8110727c:	dfc00117 	ldw	ra,4(sp)
81107280:	df000017 	ldw	fp,0(sp)
81107284:	dec00204 	addi	sp,sp,8
81107288:	f800283a 	ret

8110728c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110728c:	defffc04 	addi	sp,sp,-16
81107290:	de00012e 	bgeu	sp,et,81107298 <vRstcReleaseDeviceReset+0xc>
81107294:	003b68fa 	trap	3
81107298:	dfc00315 	stw	ra,12(sp)
8110729c:	df000215 	stw	fp,8(sp)
811072a0:	df000204 	addi	fp,sp,8
811072a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072a8:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072ac:	01400044 	movi	r5,1
811072b0:	01200034 	movhi	r4,32768
811072b4:	21020004 	addi	r4,r4,2048
811072b8:	11073c40 	call	811073c4 <uliRstReadReg>
811072bc:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
811072c0:	e0bfff17 	ldw	r2,-4(fp)
811072c4:	0084303a 	nor	r2,zero,r2
811072c8:	e0fffe17 	ldw	r3,-8(fp)
811072cc:	1884703a 	and	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcHoldDeviceReset+0xc>
81107308:	003b68fa 	trap	3
8110730c:	dfc00315 	stw	ra,12(sp)
81107310:	df000215 	stw	fp,8(sp)
81107314:	df000204 	addi	fp,sp,8
81107318:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110731c:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107320:	01400044 	movi	r5,1
81107324:	01200034 	movhi	r4,32768
81107328:	21020004 	addi	r4,r4,2048
8110732c:	11073c40 	call	811073c4 <uliRstReadReg>
81107330:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
81107334:	e0fffe17 	ldw	r3,-8(fp)
81107338:	e0bfff17 	ldw	r2,-4(fp)
8110733c:	1884b03a 	or	r2,r3,r2
81107340:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107344:	e1bffe17 	ldw	r6,-8(fp)
81107348:	01400044 	movi	r5,1
8110734c:	01200034 	movhi	r4,32768
81107350:	21020004 	addi	r4,r4,2048
81107354:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107358:	0001883a 	nop
8110735c:	e037883a 	mov	sp,fp
81107360:	dfc00117 	ldw	ra,4(sp)
81107364:	df000017 	ldw	fp,0(sp)
81107368:	dec00204 	addi	sp,sp,8
8110736c:	f800283a 	ret

81107370 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107370:	defffc04 	addi	sp,sp,-16
81107374:	de00012e 	bgeu	sp,et,8110737c <vRstcWriteReg+0xc>
81107378:	003b68fa 	trap	3
8110737c:	df000315 	stw	fp,12(sp)
81107380:	df000304 	addi	fp,sp,12
81107384:	e13ffd15 	stw	r4,-12(fp)
81107388:	e17ffe15 	stw	r5,-8(fp)
8110738c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107390:	e0bffe17 	ldw	r2,-8(fp)
81107394:	1085883a 	add	r2,r2,r2
81107398:	1085883a 	add	r2,r2,r2
8110739c:	1007883a 	mov	r3,r2
811073a0:	e0bffd17 	ldw	r2,-12(fp)
811073a4:	10c5883a 	add	r2,r2,r3
811073a8:	e0ffff17 	ldw	r3,-4(fp)
811073ac:	10c00015 	stw	r3,0(r2)
}
811073b0:	0001883a 	nop
811073b4:	e037883a 	mov	sp,fp
811073b8:	df000017 	ldw	fp,0(sp)
811073bc:	dec00104 	addi	sp,sp,4
811073c0:	f800283a 	ret

811073c4 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811073c4:	defffc04 	addi	sp,sp,-16
811073c8:	de00012e 	bgeu	sp,et,811073d0 <uliRstReadReg+0xc>
811073cc:	003b68fa 	trap	3
811073d0:	df000315 	stw	fp,12(sp)
811073d4:	df000304 	addi	fp,sp,12
811073d8:	e13ffe15 	stw	r4,-8(fp)
811073dc:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811073e0:	e0bfff17 	ldw	r2,-4(fp)
811073e4:	1085883a 	add	r2,r2,r2
811073e8:	1085883a 	add	r2,r2,r2
811073ec:	1007883a 	mov	r3,r2
811073f0:	e0bffe17 	ldw	r2,-8(fp)
811073f4:	10c5883a 	add	r2,r2,r3
811073f8:	10800017 	ldw	r2,0(r2)
811073fc:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107400:	e0bffd17 	ldw	r2,-12(fp)
}
81107404:	e037883a 	mov	sp,fp
81107408:	df000017 	ldw	fp,0(sp)
8110740c:	dec00104 	addi	sp,sp,4
81107410:	f800283a 	ret

81107414 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
81107414:	defffe04 	addi	sp,sp,-8
81107418:	de00012e 	bgeu	sp,et,81107420 <v_spi_start+0xc>
8110741c:	003b68fa 	trap	3
81107420:	dfc00115 	stw	ra,4(sp)
81107424:	df000015 	stw	fp,0(sp)
81107428:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
8110742c:	0007883a 	mov	r3,zero
81107430:	00a00034 	movhi	r2,32768
81107434:	10823004 	addi	r2,r2,2240
81107438:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
8110743c:	0007883a 	mov	r3,zero
81107440:	00a00034 	movhi	r2,32768
81107444:	10822c04 	addi	r2,r2,2224
81107448:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110744c:	01002584 	movi	r4,150
81107450:	112a8800 	call	8112a880 <usleep>
}
81107454:	0001883a 	nop
81107458:	e037883a 	mov	sp,fp
8110745c:	dfc00117 	ldw	ra,4(sp)
81107460:	df000017 	ldw	fp,0(sp)
81107464:	dec00204 	addi	sp,sp,8
81107468:	f800283a 	ret

8110746c <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
8110746c:	defffc04 	addi	sp,sp,-16
81107470:	de00012e 	bgeu	sp,et,81107478 <v_spi_send_byte+0xc>
81107474:	003b68fa 	trap	3
81107478:	dfc00315 	stw	ra,12(sp)
8110747c:	df000215 	stw	fp,8(sp)
81107480:	df000204 	addi	fp,sp,8
81107484:	2005883a 	mov	r2,r4
81107488:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110748c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107490:	00bfe004 	movi	r2,-128
81107494:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107498:	e03ffe05 	stb	zero,-8(fp)
8110749c:	00001b06 	br	8110750c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811074a0:	e0ffff03 	ldbu	r3,-4(fp)
811074a4:	e0bffe43 	ldbu	r2,-7(fp)
811074a8:	1884703a 	and	r2,r3,r2
811074ac:	10803fcc 	andi	r2,r2,255
811074b0:	1004c03a 	cmpne	r2,r2,zero
811074b4:	10c03fcc 	andi	r3,r2,255
811074b8:	00a00034 	movhi	r2,32768
811074bc:	10823404 	addi	r2,r2,2256
811074c0:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
811074c4:	e0bffe43 	ldbu	r2,-7(fp)
811074c8:	1004d07a 	srli	r2,r2,1
811074cc:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
811074d0:	00c00044 	movi	r3,1
811074d4:	00a00034 	movhi	r2,32768
811074d8:	10823004 	addi	r2,r2,2240
811074dc:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074e0:	01002584 	movi	r4,150
811074e4:	112a8800 	call	8112a880 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811074e8:	0007883a 	mov	r3,zero
811074ec:	00a00034 	movhi	r2,32768
811074f0:	10823004 	addi	r2,r2,2240
811074f4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074f8:	01002584 	movi	r4,150
811074fc:	112a8800 	call	8112a880 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107500:	e0bffe03 	ldbu	r2,-8(fp)
81107504:	10800044 	addi	r2,r2,1
81107508:	e0bffe05 	stb	r2,-8(fp)
8110750c:	e0bffe03 	ldbu	r2,-8(fp)
81107510:	10800230 	cmpltui	r2,r2,8
81107514:	103fe21e 	bne	r2,zero,811074a0 <__reset+0xfb0e74a0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81107518:	0001883a 	nop
8110751c:	e037883a 	mov	sp,fp
81107520:	dfc00117 	ldw	ra,4(sp)
81107524:	df000017 	ldw	fp,0(sp)
81107528:	dec00204 	addi	sp,sp,8
8110752c:	f800283a 	ret

81107530 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81107530:	defffd04 	addi	sp,sp,-12
81107534:	de00012e 	bgeu	sp,et,8110753c <uc_spi_get_byte+0xc>
81107538:	003b68fa 	trap	3
8110753c:	dfc00215 	stw	ra,8(sp)
81107540:	df000115 	stw	fp,4(sp)
81107544:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81107548:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
8110754c:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81107550:	e03fff05 	stb	zero,-4(fp)
81107554:	00001a06 	br	811075c0 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
81107558:	e0bfff43 	ldbu	r2,-3(fp)
8110755c:	1085883a 	add	r2,r2,r2
81107560:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81107564:	00a00034 	movhi	r2,32768
81107568:	10823804 	addi	r2,r2,2272
8110756c:	10800037 	ldwio	r2,0(r2)
81107570:	1080004c 	andi	r2,r2,1
81107574:	1007883a 	mov	r3,r2
81107578:	e0bfff43 	ldbu	r2,-3(fp)
8110757c:	1884b03a 	or	r2,r3,r2
81107580:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107584:	00c00044 	movi	r3,1
81107588:	00a00034 	movhi	r2,32768
8110758c:	10823004 	addi	r2,r2,2240
81107590:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107594:	01002584 	movi	r4,150
81107598:	112a8800 	call	8112a880 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110759c:	0007883a 	mov	r3,zero
811075a0:	00a00034 	movhi	r2,32768
811075a4:	10823004 	addi	r2,r2,2240
811075a8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811075ac:	01002584 	movi	r4,150
811075b0:	112a8800 	call	8112a880 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
811075b4:	e0bfff03 	ldbu	r2,-4(fp)
811075b8:	10800044 	addi	r2,r2,1
811075bc:	e0bfff05 	stb	r2,-4(fp)
811075c0:	e0bfff03 	ldbu	r2,-4(fp)
811075c4:	10800230 	cmpltui	r2,r2,8
811075c8:	103fe31e 	bne	r2,zero,81107558 <__reset+0xfb0e7558>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
811075cc:	e0bfff43 	ldbu	r2,-3(fp)
}
811075d0:	e037883a 	mov	sp,fp
811075d4:	dfc00117 	ldw	ra,4(sp)
811075d8:	df000017 	ldw	fp,0(sp)
811075dc:	dec00204 	addi	sp,sp,8
811075e0:	f800283a 	ret

811075e4 <v_spi_end>:

void v_spi_end(void){
811075e4:	defffe04 	addi	sp,sp,-8
811075e8:	de00012e 	bgeu	sp,et,811075f0 <v_spi_end+0xc>
811075ec:	003b68fa 	trap	3
811075f0:	dfc00115 	stw	ra,4(sp)
811075f4:	df000015 	stw	fp,0(sp)
811075f8:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
811075fc:	0007883a 	mov	r3,zero
81107600:	00a00034 	movhi	r2,32768
81107604:	10823004 	addi	r2,r2,2240
81107608:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110760c:	01002584 	movi	r4,150
81107610:	112a8800 	call	8112a880 <usleep>
    SPI_CS_N(1);
81107614:	00c00044 	movi	r3,1
81107618:	00a00034 	movhi	r2,32768
8110761c:	10822c04 	addi	r2,r2,2224
81107620:	10c00035 	stwio	r3,0(r2)
}
81107624:	0001883a 	nop
81107628:	e037883a 	mov	sp,fp
8110762c:	dfc00117 	ldw	ra,4(sp)
81107630:	df000017 	ldw	fp,0(sp)
81107634:	dec00204 	addi	sp,sp,8
81107638:	f800283a 	ret

8110763c <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
8110763c:	defff604 	addi	sp,sp,-40
81107640:	de00012e 	bgeu	sp,et,81107648 <RTCC_SPI_R_MAC+0xc>
81107644:	003b68fa 	trap	3
81107648:	dfc00915 	stw	ra,36(sp)
8110764c:	df000815 	stw	fp,32(sp)
81107650:	df000804 	addi	fp,sp,32
81107654:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107658:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
8110765c:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
81107660:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
81107664:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
81107668:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
8110766c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107670:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107674:	00800084 	movi	r2,2
81107678:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110767c:	00800cc4 	movi	r2,51
81107680:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107684:	11074140 	call	81107414 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107688:	e0bffec3 	ldbu	r2,-5(fp)
8110768c:	1009883a 	mov	r4,r2
81107690:	110746c0 	call	8110746c <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107694:	e0bffe83 	ldbu	r2,-6(fp)
81107698:	1009883a 	mov	r4,r2
8110769c:	110746c0 	call	8110746c <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
811076a0:	11075300 	call	81107530 <uc_spi_get_byte>
811076a4:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
811076a8:	11075300 	call	81107530 <uc_spi_get_byte>
811076ac:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
811076b0:	11075300 	call	81107530 <uc_spi_get_byte>
811076b4:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
811076b8:	11075300 	call	81107530 <uc_spi_get_byte>
811076bc:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
811076c0:	11075300 	call	81107530 <uc_spi_get_byte>
811076c4:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
811076c8:	11075300 	call	81107530 <uc_spi_get_byte>
811076cc:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
811076d0:	11075e40 	call	811075e4 <v_spi_end>

    bSuccess = TRUE;
811076d4:	00800044 	movi	r2,1
811076d8:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
811076dc:	e0bfff17 	ldw	r2,-4(fp)
811076e0:	e0fffd03 	ldbu	r3,-12(fp)
811076e4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
811076e8:	e0bfff17 	ldw	r2,-4(fp)
811076ec:	10800044 	addi	r2,r2,1
811076f0:	e0fffd43 	ldbu	r3,-11(fp)
811076f4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
811076f8:	e0bfff17 	ldw	r2,-4(fp)
811076fc:	10800084 	addi	r2,r2,2
81107700:	e0fffd83 	ldbu	r3,-10(fp)
81107704:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107708:	e0bfff17 	ldw	r2,-4(fp)
8110770c:	108000c4 	addi	r2,r2,3
81107710:	e0fffdc3 	ldbu	r3,-9(fp)
81107714:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81107718:	e0bfff17 	ldw	r2,-4(fp)
8110771c:	10800104 	addi	r2,r2,4
81107720:	e0fffe03 	ldbu	r3,-8(fp)
81107724:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81107728:	e0bfff17 	ldw	r2,-4(fp)
8110772c:	10800144 	addi	r2,r2,5
81107730:	e0fffe43 	ldbu	r3,-7(fp)
81107734:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81107738:	e1bffd03 	ldbu	r6,-12(fp)
8110773c:	e1fffd43 	ldbu	r7,-11(fp)
81107740:	e0bffd83 	ldbu	r2,-10(fp)
81107744:	e0fffdc3 	ldbu	r3,-9(fp)
81107748:	e13ffe03 	ldbu	r4,-8(fp)
8110774c:	e17ffe43 	ldbu	r5,-7(fp)
81107750:	d9400315 	stw	r5,12(sp)
81107754:	d9000215 	stw	r4,8(sp)
81107758:	d8c00115 	stw	r3,4(sp)
8110775c:	d8800015 	stw	r2,0(sp)
81107760:	01604534 	movhi	r5,33044
81107764:	297ce704 	addi	r5,r5,-3172
81107768:	01204534 	movhi	r4,33044
8110776c:	21123604 	addi	r4,r4,18648
81107770:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81107774:	d0a05017 	ldw	r2,-32448(gp)
81107778:	01604534 	movhi	r5,33044
8110777c:	29523604 	addi	r5,r5,18648
81107780:	1009883a 	mov	r4,r2
81107784:	11135480 	call	81113548 <fprintf>
#endif

    return bSuccess;
81107788:	e0bffc17 	ldw	r2,-16(fp)
}
8110778c:	e037883a 	mov	sp,fp
81107790:	dfc00117 	ldw	ra,4(sp)
81107794:	df000017 	ldw	fp,0(sp)
81107798:	dec00204 	addi	sp,sp,8
8110779c:	f800283a 	ret

811077a0 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
811077a0:	defffd04 	addi	sp,sp,-12
811077a4:	de00012e 	bgeu	sp,et,811077ac <bSSDisplayConfig+0xc>
811077a8:	003b68fa 	trap	3
811077ac:	df000215 	stw	fp,8(sp)
811077b0:	df000204 	addi	fp,sp,8
811077b4:	2005883a 	mov	r2,r4
811077b8:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
811077bc:	e0bfff03 	ldbu	r2,-4(fp)
811077c0:	10c00168 	cmpgeui	r3,r2,5
811077c4:	18001c1e 	bne	r3,zero,81107838 <bSSDisplayConfig+0x98>
811077c8:	100690ba 	slli	r3,r2,2
811077cc:	00a04434 	movhi	r2,33040
811077d0:	109df804 	addi	r2,r2,30688
811077d4:	1885883a 	add	r2,r3,r2
811077d8:	10800017 	ldw	r2,0(r2)
811077dc:	1000683a 	jmp	r2
811077e0:	811077f4 	orhi	r4,r16,16863
811077e4:	81107800 	call	88110780 <__reset+0x20f0780>
811077e8:	8110780c 	andi	r4,r16,16864
811077ec:	81107820 	cmpeqi	r4,r16,16864
811077f0:	81107830 	cmpltui	r4,r16,16864
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
811077f4:	00800cc4 	movi	r2,51
811077f8:	d0a04645 	stb	r2,-32487(gp)
	    break;
811077fc:	00001006 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107800:	00801544 	movi	r2,85
81107804:	d0a04645 	stb	r2,-32487(gp)
	    break;
81107808:	00000d06 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110780c:	d0e04643 	ldbu	r3,-32487(gp)
81107810:	00bff744 	movi	r2,-35
81107814:	1884703a 	and	r2,r3,r2
81107818:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110781c:	00000806 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81107820:	d0a04643 	ldbu	r2,-32487(gp)
81107824:	10800894 	ori	r2,r2,34
81107828:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110782c:	00000406 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81107830:	d0204645 	stb	zero,-32487(gp)
	    break;
81107834:	00000206 	br	81107840 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
81107838:	0005883a 	mov	r2,zero
8110783c:	00000806 	br	81107860 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81107840:	00a00034 	movhi	r2,32768
81107844:	10828404 	addi	r2,r2,2576
81107848:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110784c:	d0a04643 	ldbu	r2,-32487(gp)
81107850:	10c03fcc 	andi	r3,r2,255
81107854:	e0bffe17 	ldw	r2,-8(fp)
81107858:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110785c:	00800044 	movi	r2,1
}
81107860:	e037883a 	mov	sp,fp
81107864:	df000017 	ldw	fp,0(sp)
81107868:	dec00104 	addi	sp,sp,4
8110786c:	f800283a 	ret

81107870 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107870:	defffd04 	addi	sp,sp,-12
81107874:	de00012e 	bgeu	sp,et,8110787c <bSSDisplayUpdate+0xc>
81107878:	003b68fa 	trap	3
8110787c:	df000215 	stw	fp,8(sp)
81107880:	df000204 	addi	fp,sp,8
81107884:	2005883a 	mov	r2,r4
81107888:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110788c:	00a00034 	movhi	r2,32768
81107890:	10828404 	addi	r2,r2,2576
81107894:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107898:	e0bffe17 	ldw	r2,-8(fp)
8110789c:	10800104 	addi	r2,r2,4
811078a0:	e0ffff03 	ldbu	r3,-4(fp)
811078a4:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811078a8:	00800044 	movi	r2,1
}
811078ac:	e037883a 	mov	sp,fp
811078b0:	df000017 	ldw	fp,0(sp)
811078b4:	dec00104 	addi	sp,sp,4
811078b8:	f800283a 	ret

811078bc <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
811078bc:	defffd04 	addi	sp,sp,-12
811078c0:	de00012e 	bgeu	sp,et,811078c8 <vSyncHandleIrq+0xc>
811078c4:	003b68fa 	trap	3
811078c8:	df000215 	stw	fp,8(sp)
811078cc:	df000204 	addi	fp,sp,8
811078d0:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811078d4:	e0bfff17 	ldw	r2,-4(fp)
811078d8:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
811078dc:	d0a04803 	ldbu	r2,-32480(gp)
811078e0:	10800044 	addi	r2,r2,1
811078e4:	d0a04805 	stb	r2,-32480(gp)
}
811078e8:	0001883a 	nop
811078ec:	e037883a 	mov	sp,fp
811078f0:	df000017 	ldw	fp,0(sp)
811078f4:	dec00104 	addi	sp,sp,4
811078f8:	f800283a 	ret

811078fc <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
811078fc:	defffd04 	addi	sp,sp,-12
81107900:	de00012e 	bgeu	sp,et,81107908 <vSyncInitIrq+0xc>
81107904:	003b68fa 	trap	3
81107908:	dfc00215 	stw	ra,8(sp)
8110790c:	df000115 	stw	fp,4(sp)
81107910:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
81107914:	d0a04704 	addi	r2,gp,-32484
81107918:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
8110791c:	01a04434 	movhi	r6,33040
81107920:	319e2f04 	addi	r6,r6,30908
81107924:	e17fff17 	ldw	r5,-4(fp)
81107928:	01000284 	movi	r4,10
8110792c:	11291700 	call	81129170 <alt_irq_register>
}
81107930:	0001883a 	nop
81107934:	e037883a 	mov	sp,fp
81107938:	dfc00117 	ldw	ra,4(sp)
8110793c:	df000017 	ldw	fp,0(sp)
81107940:	dec00204 	addi	sp,sp,8
81107944:	f800283a 	ret

81107948 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
81107948:	defffc04 	addi	sp,sp,-16
8110794c:	de00012e 	bgeu	sp,et,81107954 <bSyncStatusExtnIrq+0xc>
81107950:	003b68fa 	trap	3
81107954:	dfc00315 	stw	ra,12(sp)
81107958:	df000215 	stw	fp,8(sp)
8110795c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107960:	0009883a 	mov	r4,zero
81107964:	11086f80 	call	811086f8 <uliSyncReadReg>
81107968:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
8110796c:	e0bfff17 	ldw	r2,-4(fp)
81107970:	1000030e 	bge	r2,zero,81107980 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107974:	00800044 	movi	r2,1
81107978:	e0bffe15 	stw	r2,-8(fp)
8110797c:	00000106 	br	81107984 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107980:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107984:	e0bffe17 	ldw	r2,-8(fp)
}
81107988:	e037883a 	mov	sp,fp
8110798c:	dfc00117 	ldw	ra,4(sp)
81107990:	df000017 	ldw	fp,0(sp)
81107994:	dec00204 	addi	sp,sp,8
81107998:	f800283a 	ret

8110799c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110799c:	defffc04 	addi	sp,sp,-16
811079a0:	de00012e 	bgeu	sp,et,811079a8 <ucSyncStatusState+0xc>
811079a4:	003b68fa 	trap	3
811079a8:	dfc00315 	stw	ra,12(sp)
811079ac:	df000215 	stw	fp,8(sp)
811079b0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079b4:	0009883a 	mov	r4,zero
811079b8:	11086f80 	call	811086f8 <uliSyncReadReg>
811079bc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
811079c0:	e0bffe17 	ldw	r2,-8(fp)
811079c4:	10803fec 	andhi	r2,r2,255
811079c8:	1004d43a 	srli	r2,r2,16
811079cc:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079d0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079d4:	e037883a 	mov	sp,fp
811079d8:	dfc00117 	ldw	ra,4(sp)
811079dc:	df000017 	ldw	fp,0(sp)
811079e0:	dec00204 	addi	sp,sp,8
811079e4:	f800283a 	ret

811079e8 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
811079e8:	defffc04 	addi	sp,sp,-16
811079ec:	de00012e 	bgeu	sp,et,811079f4 <ucSyncStatusErrorCode+0xc>
811079f0:	003b68fa 	trap	3
811079f4:	dfc00315 	stw	ra,12(sp)
811079f8:	df000215 	stw	fp,8(sp)
811079fc:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a00:	0009883a 	mov	r4,zero
81107a04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a08:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
81107a0c:	e0bffe17 	ldw	r2,-8(fp)
81107a10:	10bfc00c 	andi	r2,r2,65280
81107a14:	1004d23a 	srli	r2,r2,8
81107a18:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a1c:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a20:	e037883a 	mov	sp,fp
81107a24:	dfc00117 	ldw	ra,4(sp)
81107a28:	df000017 	ldw	fp,0(sp)
81107a2c:	dec00204 	addi	sp,sp,8
81107a30:	f800283a 	ret

81107a34 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
81107a34:	defffc04 	addi	sp,sp,-16
81107a38:	de00012e 	bgeu	sp,et,81107a40 <ucSyncStatusCycleNumber+0xc>
81107a3c:	003b68fa 	trap	3
81107a40:	dfc00315 	stw	ra,12(sp)
81107a44:	df000215 	stw	fp,8(sp)
81107a48:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a4c:	0009883a 	mov	r4,zero
81107a50:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a54:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
81107a58:	e0bffe17 	ldw	r2,-8(fp)
81107a5c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a60:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a64:	e037883a 	mov	sp,fp
81107a68:	dfc00117 	ldw	ra,4(sp)
81107a6c:	df000017 	ldw	fp,0(sp)
81107a70:	dec00204 	addi	sp,sp,8
81107a74:	f800283a 	ret

81107a78 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a78:	defffd04 	addi	sp,sp,-12
81107a7c:	de00012e 	bgeu	sp,et,81107a84 <bSyncSetMbt+0xc>
81107a80:	003b68fa 	trap	3
81107a84:	dfc00215 	stw	ra,8(sp)
81107a88:	df000115 	stw	fp,4(sp)
81107a8c:	df000104 	addi	fp,sp,4
81107a90:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a94:	e17fff17 	ldw	r5,-4(fp)
81107a98:	01000104 	movi	r4,4
81107a9c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107aa0:	00800044 	movi	r2,1
}
81107aa4:	e037883a 	mov	sp,fp
81107aa8:	dfc00117 	ldw	ra,4(sp)
81107aac:	df000017 	ldw	fp,0(sp)
81107ab0:	dec00204 	addi	sp,sp,8
81107ab4:	f800283a 	ret

81107ab8 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107ab8:	defffd04 	addi	sp,sp,-12
81107abc:	de00012e 	bgeu	sp,et,81107ac4 <bSyncSetBt+0xc>
81107ac0:	003b68fa 	trap	3
81107ac4:	dfc00215 	stw	ra,8(sp)
81107ac8:	df000115 	stw	fp,4(sp)
81107acc:	df000104 	addi	fp,sp,4
81107ad0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107ad4:	e17fff17 	ldw	r5,-4(fp)
81107ad8:	01000144 	movi	r4,5
81107adc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ae0:	00800044 	movi	r2,1
}
81107ae4:	e037883a 	mov	sp,fp
81107ae8:	dfc00117 	ldw	ra,4(sp)
81107aec:	df000017 	ldw	fp,0(sp)
81107af0:	dec00204 	addi	sp,sp,8
81107af4:	f800283a 	ret

81107af8 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107af8:	defffd04 	addi	sp,sp,-12
81107afc:	de00012e 	bgeu	sp,et,81107b04 <bSyncSetPer+0xc>
81107b00:	003b68fa 	trap	3
81107b04:	dfc00215 	stw	ra,8(sp)
81107b08:	df000115 	stw	fp,4(sp)
81107b0c:	df000104 	addi	fp,sp,4
81107b10:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107b14:	e17fff17 	ldw	r5,-4(fp)
81107b18:	01000184 	movi	r4,6
81107b1c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b20:	00800044 	movi	r2,1
}
81107b24:	e037883a 	mov	sp,fp
81107b28:	dfc00117 	ldw	ra,4(sp)
81107b2c:	df000017 	ldw	fp,0(sp)
81107b30:	dec00204 	addi	sp,sp,8
81107b34:	f800283a 	ret

81107b38 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107b38:	defffd04 	addi	sp,sp,-12
81107b3c:	de00012e 	bgeu	sp,et,81107b44 <bSyncSetOst+0xc>
81107b40:	003b68fa 	trap	3
81107b44:	dfc00215 	stw	ra,8(sp)
81107b48:	df000115 	stw	fp,4(sp)
81107b4c:	df000104 	addi	fp,sp,4
81107b50:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107b54:	e17fff17 	ldw	r5,-4(fp)
81107b58:	010001c4 	movi	r4,7
81107b5c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b60:	00800044 	movi	r2,1
}
81107b64:	e037883a 	mov	sp,fp
81107b68:	dfc00117 	ldw	ra,4(sp)
81107b6c:	df000017 	ldw	fp,0(sp)
81107b70:	dec00204 	addi	sp,sp,8
81107b74:	f800283a 	ret

81107b78 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b78:	defffc04 	addi	sp,sp,-16
81107b7c:	de00012e 	bgeu	sp,et,81107b84 <bSyncSetPolarity+0xc>
81107b80:	003b68fa 	trap	3
81107b84:	dfc00315 	stw	ra,12(sp)
81107b88:	df000215 	stw	fp,8(sp)
81107b8c:	df000204 	addi	fp,sp,8
81107b90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b94:	01000204 	movi	r4,8
81107b98:	11086f80 	call	811086f8 <uliSyncReadReg>
81107b9c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107ba0:	e0bfff17 	ldw	r2,-4(fp)
81107ba4:	1000051e 	bne	r2,zero,81107bbc <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfbfc4 	movi	r2,-257
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
81107bb8:	00000306 	br	81107bc8 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107bbc:	e0bffe17 	ldw	r2,-8(fp)
81107bc0:	10804014 	ori	r2,r2,256
81107bc4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107bec:	defffc04 	addi	sp,sp,-16
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <bSyncSetNCycles+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00315 	stw	ra,12(sp)
81107bfc:	df000215 	stw	fp,8(sp)
81107c00:	df000204 	addi	fp,sp,8
81107c04:	2005883a 	mov	r2,r4
81107c08:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107c0c:	01000204 	movi	r4,8
81107c10:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c14:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107c18:	e0fffe17 	ldw	r3,-8(fp)
81107c1c:	00bfc004 	movi	r2,-256
81107c20:	1884703a 	and	r2,r3,r2
81107c24:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107c28:	e0bfff03 	ldbu	r2,-4(fp)
81107c2c:	e0fffe17 	ldw	r3,-8(fp)
81107c30:	1884b03a 	or	r2,r3,r2
81107c34:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107c38:	e17ffe17 	ldw	r5,-8(fp)
81107c3c:	01000204 	movi	r4,8
81107c40:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107c44:	00800044 	movi	r2,1
}
81107c48:	e037883a 	mov	sp,fp
81107c4c:	dfc00117 	ldw	ra,4(sp)
81107c50:	df000017 	ldw	fp,0(sp)
81107c54:	dec00204 	addi	sp,sp,8
81107c58:	f800283a 	ret

81107c5c <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107c5c:	defffd04 	addi	sp,sp,-12
81107c60:	de00012e 	bgeu	sp,et,81107c68 <uliSyncGetMbt+0xc>
81107c64:	003b68fa 	trap	3
81107c68:	dfc00215 	stw	ra,8(sp)
81107c6c:	df000115 	stw	fp,4(sp)
81107c70:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c74:	01000104 	movi	r4,4
81107c78:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c7c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c80:	e0bfff17 	ldw	r2,-4(fp)
}
81107c84:	e037883a 	mov	sp,fp
81107c88:	dfc00117 	ldw	ra,4(sp)
81107c8c:	df000017 	ldw	fp,0(sp)
81107c90:	dec00204 	addi	sp,sp,8
81107c94:	f800283a 	ret

81107c98 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c98:	defffd04 	addi	sp,sp,-12
81107c9c:	de00012e 	bgeu	sp,et,81107ca4 <uliSyncGetBt+0xc>
81107ca0:	003b68fa 	trap	3
81107ca4:	dfc00215 	stw	ra,8(sp)
81107ca8:	df000115 	stw	fp,4(sp)
81107cac:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107cb0:	01000144 	movi	r4,5
81107cb4:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cb8:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cbc:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc0:	e037883a 	mov	sp,fp
81107cc4:	dfc00117 	ldw	ra,4(sp)
81107cc8:	df000017 	ldw	fp,0(sp)
81107ccc:	dec00204 	addi	sp,sp,8
81107cd0:	f800283a 	ret

81107cd4 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107cd4:	defffd04 	addi	sp,sp,-12
81107cd8:	de00012e 	bgeu	sp,et,81107ce0 <uliSyncGetPer+0xc>
81107cdc:	003b68fa 	trap	3
81107ce0:	dfc00215 	stw	ra,8(sp)
81107ce4:	df000115 	stw	fp,4(sp)
81107ce8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107cec:	01000184 	movi	r4,6
81107cf0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cf4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cf8:	e0bfff17 	ldw	r2,-4(fp)
}
81107cfc:	e037883a 	mov	sp,fp
81107d00:	dfc00117 	ldw	ra,4(sp)
81107d04:	df000017 	ldw	fp,0(sp)
81107d08:	dec00204 	addi	sp,sp,8
81107d0c:	f800283a 	ret

81107d10 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107d10:	defffd04 	addi	sp,sp,-12
81107d14:	de00012e 	bgeu	sp,et,81107d1c <uliSyncGetOst+0xc>
81107d18:	003b68fa 	trap	3
81107d1c:	dfc00215 	stw	ra,8(sp)
81107d20:	df000115 	stw	fp,4(sp)
81107d24:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107d28:	010001c4 	movi	r4,7
81107d2c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d30:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d34:	e0bfff17 	ldw	r2,-4(fp)
}
81107d38:	e037883a 	mov	sp,fp
81107d3c:	dfc00117 	ldw	ra,4(sp)
81107d40:	df000017 	ldw	fp,0(sp)
81107d44:	dec00204 	addi	sp,sp,8
81107d48:	f800283a 	ret

81107d4c <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107d4c:	defffd04 	addi	sp,sp,-12
81107d50:	de00012e 	bgeu	sp,et,81107d58 <uliSyncGetGeneral+0xc>
81107d54:	003b68fa 	trap	3
81107d58:	dfc00215 	stw	ra,8(sp)
81107d5c:	df000115 	stw	fp,4(sp)
81107d60:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107d64:	01000204 	movi	r4,8
81107d68:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d6c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d70:	e0bfff17 	ldw	r2,-4(fp)
}
81107d74:	e037883a 	mov	sp,fp
81107d78:	dfc00117 	ldw	ra,4(sp)
81107d7c:	df000017 	ldw	fp,0(sp)
81107d80:	dec00204 	addi	sp,sp,8
81107d84:	f800283a 	ret

81107d88 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d88:	defffd04 	addi	sp,sp,-12
81107d8c:	de00012e 	bgeu	sp,et,81107d94 <bSyncErrInj+0xc>
81107d90:	003b68fa 	trap	3
81107d94:	dfc00215 	stw	ra,8(sp)
81107d98:	df000115 	stw	fp,4(sp)
81107d9c:	df000104 	addi	fp,sp,4
81107da0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107da4:	e17fff17 	ldw	r5,-4(fp)
81107da8:	01000244 	movi	r4,9
81107dac:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107db0:	00800044 	movi	r2,1
}
81107db4:	e037883a 	mov	sp,fp
81107db8:	dfc00117 	ldw	ra,4(sp)
81107dbc:	df000017 	ldw	fp,0(sp)
81107dc0:	dec00204 	addi	sp,sp,8
81107dc4:	f800283a 	ret

81107dc8 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107dc8:	defffc04 	addi	sp,sp,-16
81107dcc:	de00012e 	bgeu	sp,et,81107dd4 <bSyncCtrExtnIrq+0xc>
81107dd0:	003b68fa 	trap	3
81107dd4:	dfc00315 	stw	ra,12(sp)
81107dd8:	df000215 	stw	fp,8(sp)
81107ddc:	df000204 	addi	fp,sp,8
81107de0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de4:	01000284 	movi	r4,10
81107de8:	11086f80 	call	811086f8 <uliSyncReadReg>
81107dec:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107df0:	e0bfff17 	ldw	r2,-4(fp)
81107df4:	1000061e 	bne	r2,zero,81107e10 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107df8:	e0fffe17 	ldw	r3,-8(fp)
81107dfc:	00a00034 	movhi	r2,32768
81107e00:	10bfffc4 	addi	r2,r2,-1
81107e04:	1884703a 	and	r2,r3,r2
81107e08:	e0bffe15 	stw	r2,-8(fp)
81107e0c:	00000306 	br	81107e1c <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107e10:	e0bffe17 	ldw	r2,-8(fp)
81107e14:	10a00034 	orhi	r2,r2,32768
81107e18:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e1c:	e17ffe17 	ldw	r5,-8(fp)
81107e20:	01000284 	movi	r4,10
81107e24:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e28:	00800044 	movi	r2,1
}
81107e2c:	e037883a 	mov	sp,fp
81107e30:	dfc00117 	ldw	ra,4(sp)
81107e34:	df000017 	ldw	fp,0(sp)
81107e38:	dec00204 	addi	sp,sp,8
81107e3c:	f800283a 	ret

81107e40 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107e40:	defffd04 	addi	sp,sp,-12
81107e44:	de00012e 	bgeu	sp,et,81107e4c <bSyncCtrStart+0xc>
81107e48:	003b68fa 	trap	3
81107e4c:	dfc00215 	stw	ra,8(sp)
81107e50:	df000115 	stw	fp,4(sp)
81107e54:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e58:	01000284 	movi	r4,10
81107e5c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107e60:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107e64:	e0bfff17 	ldw	r2,-4(fp)
81107e68:	10800234 	orhi	r2,r2,8
81107e6c:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e70:	e17fff17 	ldw	r5,-4(fp)
81107e74:	01000284 	movi	r4,10
81107e78:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e7c:	00800044 	movi	r2,1
}
81107e80:	e037883a 	mov	sp,fp
81107e84:	dfc00117 	ldw	ra,4(sp)
81107e88:	df000017 	ldw	fp,0(sp)
81107e8c:	dec00204 	addi	sp,sp,8
81107e90:	f800283a 	ret

81107e94 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e94:	defffd04 	addi	sp,sp,-12
81107e98:	de00012e 	bgeu	sp,et,81107ea0 <bSyncCtrReset+0xc>
81107e9c:	003b68fa 	trap	3
81107ea0:	dfc00215 	stw	ra,8(sp)
81107ea4:	df000115 	stw	fp,4(sp)
81107ea8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107eac:	01000284 	movi	r4,10
81107eb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107eb4:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107eb8:	e0bfff17 	ldw	r2,-4(fp)
81107ebc:	10800134 	orhi	r2,r2,4
81107ec0:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ec4:	e17fff17 	ldw	r5,-4(fp)
81107ec8:	01000284 	movi	r4,10
81107ecc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ed0:	00800044 	movi	r2,1
}
81107ed4:	e037883a 	mov	sp,fp
81107ed8:	dfc00117 	ldw	ra,4(sp)
81107edc:	df000017 	ldw	fp,0(sp)
81107ee0:	dec00204 	addi	sp,sp,8
81107ee4:	f800283a 	ret

81107ee8 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107ee8:	defffd04 	addi	sp,sp,-12
81107eec:	de00012e 	bgeu	sp,et,81107ef4 <bSyncCtrOneShot+0xc>
81107ef0:	003b68fa 	trap	3
81107ef4:	dfc00215 	stw	ra,8(sp)
81107ef8:	df000115 	stw	fp,4(sp)
81107efc:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f00:	01000284 	movi	r4,10
81107f04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f08:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107f0c:	e0bfff17 	ldw	r2,-4(fp)
81107f10:	108000b4 	orhi	r2,r2,2
81107f14:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f18:	e17fff17 	ldw	r5,-4(fp)
81107f1c:	01000284 	movi	r4,10
81107f20:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f24:	00800044 	movi	r2,1
}
81107f28:	e037883a 	mov	sp,fp
81107f2c:	dfc00117 	ldw	ra,4(sp)
81107f30:	df000017 	ldw	fp,0(sp)
81107f34:	dec00204 	addi	sp,sp,8
81107f38:	f800283a 	ret

81107f3c <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107f3c:	defffd04 	addi	sp,sp,-12
81107f40:	de00012e 	bgeu	sp,et,81107f48 <bSyncCtrErrInj+0xc>
81107f44:	003b68fa 	trap	3
81107f48:	dfc00215 	stw	ra,8(sp)
81107f4c:	df000115 	stw	fp,4(sp)
81107f50:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f54:	01000284 	movi	r4,10
81107f58:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f5c:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107f60:	e0bfff17 	ldw	r2,-4(fp)
81107f64:	10800074 	orhi	r2,r2,1
81107f68:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f6c:	e17fff17 	ldw	r5,-4(fp)
81107f70:	01000284 	movi	r4,10
81107f74:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f78:	00800044 	movi	r2,1
}
81107f7c:	e037883a 	mov	sp,fp
81107f80:	dfc00117 	ldw	ra,4(sp)
81107f84:	df000017 	ldw	fp,0(sp)
81107f88:	dec00204 	addi	sp,sp,8
81107f8c:	f800283a 	ret

81107f90 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f90:	defffc04 	addi	sp,sp,-16
81107f94:	de00012e 	bgeu	sp,et,81107f9c <bSyncCtrSyncOutEnable+0xc>
81107f98:	003b68fa 	trap	3
81107f9c:	dfc00315 	stw	ra,12(sp)
81107fa0:	df000215 	stw	fp,8(sp)
81107fa4:	df000204 	addi	fp,sp,8
81107fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fac:	01000284 	movi	r4,10
81107fb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107fb4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fb8:	e0bfff17 	ldw	r2,-4(fp)
81107fbc:	1000051e 	bne	r2,zero,81107fd4 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107fc0:	e0fffe17 	ldw	r3,-8(fp)
81107fc4:	00bfbfc4 	movi	r2,-257
81107fc8:	1884703a 	and	r2,r3,r2
81107fcc:	e0bffe15 	stw	r2,-8(fp)
81107fd0:	00000306 	br	81107fe0 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107fd4:	e0bffe17 	ldw	r2,-8(fp)
81107fd8:	10804014 	ori	r2,r2,256
81107fdc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe0:	e17ffe17 	ldw	r5,-8(fp)
81107fe4:	01000284 	movi	r4,10
81107fe8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107fec:	00800044 	movi	r2,1
}
81107ff0:	e037883a 	mov	sp,fp
81107ff4:	dfc00117 	ldw	ra,4(sp)
81107ff8:	df000017 	ldw	fp,0(sp)
81107ffc:	dec00204 	addi	sp,sp,8
81108000:	f800283a 	ret

81108004 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81108004:	defffc04 	addi	sp,sp,-16
81108008:	de00012e 	bgeu	sp,et,81108010 <bSyncCtrCh1OutEnable+0xc>
8110800c:	003b68fa 	trap	3
81108010:	dfc00315 	stw	ra,12(sp)
81108014:	df000215 	stw	fp,8(sp)
81108018:	df000204 	addi	fp,sp,8
8110801c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108020:	01000284 	movi	r4,10
81108024:	11086f80 	call	811086f8 <uliSyncReadReg>
81108028:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110802c:	e0bfff17 	ldw	r2,-4(fp)
81108030:	1000051e 	bne	r2,zero,81108048 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81108034:	e0fffe17 	ldw	r3,-8(fp)
81108038:	00bfff84 	movi	r2,-2
8110803c:	1884703a 	and	r2,r3,r2
81108040:	e0bffe15 	stw	r2,-8(fp)
81108044:	00000306 	br	81108054 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81108048:	e0bffe17 	ldw	r2,-8(fp)
8110804c:	10800054 	ori	r2,r2,1
81108050:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108054:	e17ffe17 	ldw	r5,-8(fp)
81108058:	01000284 	movi	r4,10
8110805c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108060:	00800044 	movi	r2,1
}
81108064:	e037883a 	mov	sp,fp
81108068:	dfc00117 	ldw	ra,4(sp)
8110806c:	df000017 	ldw	fp,0(sp)
81108070:	dec00204 	addi	sp,sp,8
81108074:	f800283a 	ret

81108078 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108078:	defffc04 	addi	sp,sp,-16
8110807c:	de00012e 	bgeu	sp,et,81108084 <bSyncCtrCh2OutEnable+0xc>
81108080:	003b68fa 	trap	3
81108084:	dfc00315 	stw	ra,12(sp)
81108088:	df000215 	stw	fp,8(sp)
8110808c:	df000204 	addi	fp,sp,8
81108090:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108094:	01000284 	movi	r4,10
81108098:	11086f80 	call	811086f8 <uliSyncReadReg>
8110809c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a0:	e0bfff17 	ldw	r2,-4(fp)
811080a4:	1000051e 	bne	r2,zero,811080bc <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
811080a8:	e0fffe17 	ldw	r3,-8(fp)
811080ac:	00bfff44 	movi	r2,-3
811080b0:	1884703a 	and	r2,r3,r2
811080b4:	e0bffe15 	stw	r2,-8(fp)
811080b8:	00000306 	br	811080c8 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
811080bc:	e0bffe17 	ldw	r2,-8(fp)
811080c0:	10800094 	ori	r2,r2,2
811080c4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080c8:	e17ffe17 	ldw	r5,-8(fp)
811080cc:	01000284 	movi	r4,10
811080d0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811080d4:	00800044 	movi	r2,1
}
811080d8:	e037883a 	mov	sp,fp
811080dc:	dfc00117 	ldw	ra,4(sp)
811080e0:	df000017 	ldw	fp,0(sp)
811080e4:	dec00204 	addi	sp,sp,8
811080e8:	f800283a 	ret

811080ec <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
811080ec:	defffc04 	addi	sp,sp,-16
811080f0:	de00012e 	bgeu	sp,et,811080f8 <bSyncCtrCh3OutEnable+0xc>
811080f4:	003b68fa 	trap	3
811080f8:	dfc00315 	stw	ra,12(sp)
811080fc:	df000215 	stw	fp,8(sp)
81108100:	df000204 	addi	fp,sp,8
81108104:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108108:	01000284 	movi	r4,10
8110810c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108110:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108114:	e0bfff17 	ldw	r2,-4(fp)
81108118:	1000051e 	bne	r2,zero,81108130 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
8110811c:	e0fffe17 	ldw	r3,-8(fp)
81108120:	00bffec4 	movi	r2,-5
81108124:	1884703a 	and	r2,r3,r2
81108128:	e0bffe15 	stw	r2,-8(fp)
8110812c:	00000306 	br	8110813c <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
81108130:	e0bffe17 	ldw	r2,-8(fp)
81108134:	10800114 	ori	r2,r2,4
81108138:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110813c:	e17ffe17 	ldw	r5,-8(fp)
81108140:	01000284 	movi	r4,10
81108144:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108148:	00800044 	movi	r2,1
}
8110814c:	e037883a 	mov	sp,fp
81108150:	dfc00117 	ldw	ra,4(sp)
81108154:	df000017 	ldw	fp,0(sp)
81108158:	dec00204 	addi	sp,sp,8
8110815c:	f800283a 	ret

81108160 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
81108160:	defffc04 	addi	sp,sp,-16
81108164:	de00012e 	bgeu	sp,et,8110816c <bSyncCtrCh4OutEnable+0xc>
81108168:	003b68fa 	trap	3
8110816c:	dfc00315 	stw	ra,12(sp)
81108170:	df000215 	stw	fp,8(sp)
81108174:	df000204 	addi	fp,sp,8
81108178:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110817c:	01000284 	movi	r4,10
81108180:	11086f80 	call	811086f8 <uliSyncReadReg>
81108184:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108188:	e0bfff17 	ldw	r2,-4(fp)
8110818c:	1000051e 	bne	r2,zero,811081a4 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108190:	e0fffe17 	ldw	r3,-8(fp)
81108194:	00bffdc4 	movi	r2,-9
81108198:	1884703a 	and	r2,r3,r2
8110819c:	e0bffe15 	stw	r2,-8(fp)
811081a0:	00000306 	br	811081b0 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
811081a4:	e0bffe17 	ldw	r2,-8(fp)
811081a8:	10800214 	ori	r2,r2,8
811081ac:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b0:	e17ffe17 	ldw	r5,-8(fp)
811081b4:	01000284 	movi	r4,10
811081b8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811081bc:	00800044 	movi	r2,1
}
811081c0:	e037883a 	mov	sp,fp
811081c4:	dfc00117 	ldw	ra,4(sp)
811081c8:	df000017 	ldw	fp,0(sp)
811081cc:	dec00204 	addi	sp,sp,8
811081d0:	f800283a 	ret

811081d4 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
811081d4:	defffc04 	addi	sp,sp,-16
811081d8:	de00012e 	bgeu	sp,et,811081e0 <bSyncCtrCh5OutEnable+0xc>
811081dc:	003b68fa 	trap	3
811081e0:	dfc00315 	stw	ra,12(sp)
811081e4:	df000215 	stw	fp,8(sp)
811081e8:	df000204 	addi	fp,sp,8
811081ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f0:	01000284 	movi	r4,10
811081f4:	11086f80 	call	811086f8 <uliSyncReadReg>
811081f8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811081fc:	e0bfff17 	ldw	r2,-4(fp)
81108200:	1000051e 	bne	r2,zero,81108218 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108204:	e0fffe17 	ldw	r3,-8(fp)
81108208:	00bffbc4 	movi	r2,-17
8110820c:	1884703a 	and	r2,r3,r2
81108210:	e0bffe15 	stw	r2,-8(fp)
81108214:	00000306 	br	81108224 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
81108218:	e0bffe17 	ldw	r2,-8(fp)
8110821c:	10800414 	ori	r2,r2,16
81108220:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108224:	e17ffe17 	ldw	r5,-8(fp)
81108228:	01000284 	movi	r4,10
8110822c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108230:	00800044 	movi	r2,1
}
81108234:	e037883a 	mov	sp,fp
81108238:	dfc00117 	ldw	ra,4(sp)
8110823c:	df000017 	ldw	fp,0(sp)
81108240:	dec00204 	addi	sp,sp,8
81108244:	f800283a 	ret

81108248 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
81108248:	defffc04 	addi	sp,sp,-16
8110824c:	de00012e 	bgeu	sp,et,81108254 <bSyncCtrCh6OutEnable+0xc>
81108250:	003b68fa 	trap	3
81108254:	dfc00315 	stw	ra,12(sp)
81108258:	df000215 	stw	fp,8(sp)
8110825c:	df000204 	addi	fp,sp,8
81108260:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108264:	01000284 	movi	r4,10
81108268:	11086f80 	call	811086f8 <uliSyncReadReg>
8110826c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108270:	e0bfff17 	ldw	r2,-4(fp)
81108274:	1000051e 	bne	r2,zero,8110828c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108278:	e0fffe17 	ldw	r3,-8(fp)
8110827c:	00bff7c4 	movi	r2,-33
81108280:	1884703a 	and	r2,r3,r2
81108284:	e0bffe15 	stw	r2,-8(fp)
81108288:	00000306 	br	81108298 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110828c:	e0bffe17 	ldw	r2,-8(fp)
81108290:	10800814 	ori	r2,r2,32
81108294:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108298:	e17ffe17 	ldw	r5,-8(fp)
8110829c:	01000284 	movi	r4,10
811082a0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811082a4:	00800044 	movi	r2,1
}
811082a8:	e037883a 	mov	sp,fp
811082ac:	dfc00117 	ldw	ra,4(sp)
811082b0:	df000017 	ldw	fp,0(sp)
811082b4:	dec00204 	addi	sp,sp,8
811082b8:	f800283a 	ret

811082bc <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
811082bc:	defffc04 	addi	sp,sp,-16
811082c0:	de00012e 	bgeu	sp,et,811082c8 <bSyncCtrCh7OutEnable+0xc>
811082c4:	003b68fa 	trap	3
811082c8:	dfc00315 	stw	ra,12(sp)
811082cc:	df000215 	stw	fp,8(sp)
811082d0:	df000204 	addi	fp,sp,8
811082d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082d8:	01000284 	movi	r4,10
811082dc:	11086f80 	call	811086f8 <uliSyncReadReg>
811082e0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e4:	e0bfff17 	ldw	r2,-4(fp)
811082e8:	1000051e 	bne	r2,zero,81108300 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
811082ec:	e0fffe17 	ldw	r3,-8(fp)
811082f0:	00bfefc4 	movi	r2,-65
811082f4:	1884703a 	and	r2,r3,r2
811082f8:	e0bffe15 	stw	r2,-8(fp)
811082fc:	00000306 	br	8110830c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108300:	e0bffe17 	ldw	r2,-8(fp)
81108304:	10801014 	ori	r2,r2,64
81108308:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110830c:	e17ffe17 	ldw	r5,-8(fp)
81108310:	01000284 	movi	r4,10
81108314:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108318:	00800044 	movi	r2,1
}
8110831c:	e037883a 	mov	sp,fp
81108320:	dfc00117 	ldw	ra,4(sp)
81108324:	df000017 	ldw	fp,0(sp)
81108328:	dec00204 	addi	sp,sp,8
8110832c:	f800283a 	ret

81108330 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
81108330:	defffc04 	addi	sp,sp,-16
81108334:	de00012e 	bgeu	sp,et,8110833c <bSyncCtrCh8OutEnable+0xc>
81108338:	003b68fa 	trap	3
8110833c:	dfc00315 	stw	ra,12(sp)
81108340:	df000215 	stw	fp,8(sp)
81108344:	df000204 	addi	fp,sp,8
81108348:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110834c:	01000284 	movi	r4,10
81108350:	11086f80 	call	811086f8 <uliSyncReadReg>
81108354:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108358:	e0bfff17 	ldw	r2,-4(fp)
8110835c:	1000051e 	bne	r2,zero,81108374 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
81108360:	e0fffe17 	ldw	r3,-8(fp)
81108364:	00bfdfc4 	movi	r2,-129
81108368:	1884703a 	and	r2,r3,r2
8110836c:	e0bffe15 	stw	r2,-8(fp)
81108370:	00000306 	br	81108380 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108374:	e0bffe17 	ldw	r2,-8(fp)
81108378:	10802014 	ori	r2,r2,128
8110837c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108380:	e17ffe17 	ldw	r5,-8(fp)
81108384:	01000284 	movi	r4,10
81108388:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110838c:	00800044 	movi	r2,1
}
81108390:	e037883a 	mov	sp,fp
81108394:	dfc00117 	ldw	ra,4(sp)
81108398:	df000017 	ldw	fp,0(sp)
8110839c:	dec00204 	addi	sp,sp,8
811083a0:	f800283a 	ret

811083a4 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
811083a4:	defffc04 	addi	sp,sp,-16
811083a8:	de00012e 	bgeu	sp,et,811083b0 <bSyncIrqEnableError+0xc>
811083ac:	003b68fa 	trap	3
811083b0:	dfc00315 	stw	ra,12(sp)
811083b4:	df000215 	stw	fp,8(sp)
811083b8:	df000204 	addi	fp,sp,8
811083bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c0:	01000044 	movi	r4,1
811083c4:	11086f80 	call	811086f8 <uliSyncReadReg>
811083c8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083cc:	e0bfff17 	ldw	r2,-4(fp)
811083d0:	1000051e 	bne	r2,zero,811083e8 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
811083d4:	e0fffe17 	ldw	r3,-8(fp)
811083d8:	00bfff44 	movi	r2,-3
811083dc:	1884703a 	and	r2,r3,r2
811083e0:	e0bffe15 	stw	r2,-8(fp)
811083e4:	00000306 	br	811083f4 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
811083e8:	e0bffe17 	ldw	r2,-8(fp)
811083ec:	10800094 	ori	r2,r2,2
811083f0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f4:	e17ffe17 	ldw	r5,-8(fp)
811083f8:	01000044 	movi	r4,1
811083fc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108400:	00800044 	movi	r2,1
}
81108404:	e037883a 	mov	sp,fp
81108408:	dfc00117 	ldw	ra,4(sp)
8110840c:	df000017 	ldw	fp,0(sp)
81108410:	dec00204 	addi	sp,sp,8
81108414:	f800283a 	ret

81108418 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
81108418:	defffc04 	addi	sp,sp,-16
8110841c:	de00012e 	bgeu	sp,et,81108424 <bSyncIrqEnableBlank+0xc>
81108420:	003b68fa 	trap	3
81108424:	dfc00315 	stw	ra,12(sp)
81108428:	df000215 	stw	fp,8(sp)
8110842c:	df000204 	addi	fp,sp,8
81108430:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108434:	01000044 	movi	r4,1
81108438:	11086f80 	call	811086f8 <uliSyncReadReg>
8110843c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108440:	e0bfff17 	ldw	r2,-4(fp)
81108444:	1000051e 	bne	r2,zero,8110845c <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
81108448:	e0fffe17 	ldw	r3,-8(fp)
8110844c:	00bfff84 	movi	r2,-2
81108450:	1884703a 	and	r2,r3,r2
81108454:	e0bffe15 	stw	r2,-8(fp)
81108458:	00000306 	br	81108468 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
8110845c:	e0bffe17 	ldw	r2,-8(fp)
81108460:	10800054 	ori	r2,r2,1
81108464:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108468:	e17ffe17 	ldw	r5,-8(fp)
8110846c:	01000044 	movi	r4,1
81108470:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108474:	00800044 	movi	r2,1
}
81108478:	e037883a 	mov	sp,fp
8110847c:	dfc00117 	ldw	ra,4(sp)
81108480:	df000017 	ldw	fp,0(sp)
81108484:	dec00204 	addi	sp,sp,8
81108488:	f800283a 	ret

8110848c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110848c:	defffc04 	addi	sp,sp,-16
81108490:	de00012e 	bgeu	sp,et,81108498 <bSyncIrqFlagClrError+0xc>
81108494:	003b68fa 	trap	3
81108498:	dfc00315 	stw	ra,12(sp)
8110849c:	df000215 	stw	fp,8(sp)
811084a0:	df000204 	addi	fp,sp,8
811084a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084a8:	01000084 	movi	r4,2
811084ac:	11086f80 	call	811086f8 <uliSyncReadReg>
811084b0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b4:	e0bfff17 	ldw	r2,-4(fp)
811084b8:	1000051e 	bne	r2,zero,811084d0 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084bc:	e0fffe17 	ldw	r3,-8(fp)
811084c0:	00bfff44 	movi	r2,-3
811084c4:	1884703a 	and	r2,r3,r2
811084c8:	e0bffe15 	stw	r2,-8(fp)
811084cc:	00000306 	br	811084dc <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084d0:	e0bffe17 	ldw	r2,-8(fp)
811084d4:	10800094 	ori	r2,r2,2
811084d8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084dc:	e17ffe17 	ldw	r5,-8(fp)
811084e0:	01000084 	movi	r4,2
811084e4:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811084e8:	00800044 	movi	r2,1
}
811084ec:	e037883a 	mov	sp,fp
811084f0:	dfc00117 	ldw	ra,4(sp)
811084f4:	df000017 	ldw	fp,0(sp)
811084f8:	dec00204 	addi	sp,sp,8
811084fc:	f800283a 	ret

81108500 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108500:	defffc04 	addi	sp,sp,-16
81108504:	de00012e 	bgeu	sp,et,8110850c <bSyncIrqFlagClrBlank+0xc>
81108508:	003b68fa 	trap	3
8110850c:	dfc00315 	stw	ra,12(sp)
81108510:	df000215 	stw	fp,8(sp)
81108514:	df000204 	addi	fp,sp,8
81108518:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110851c:	01000084 	movi	r4,2
81108520:	11086f80 	call	811086f8 <uliSyncReadReg>
81108524:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1000051e 	bne	r2,zero,81108544 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108530:	e0fffe17 	ldw	r3,-8(fp)
81108534:	00bfff84 	movi	r2,-2
81108538:	1884703a 	and	r2,r3,r2
8110853c:	e0bffe15 	stw	r2,-8(fp)
81108540:	00000306 	br	81108550 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108544:	e0bffe17 	ldw	r2,-8(fp)
81108548:	10800054 	ori	r2,r2,1
8110854c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
81108550:	e17ffe17 	ldw	r5,-8(fp)
81108554:	01000084 	movi	r4,2
81108558:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110855c:	00800044 	movi	r2,1
}
81108560:	e037883a 	mov	sp,fp
81108564:	dfc00117 	ldw	ra,4(sp)
81108568:	df000017 	ldw	fp,0(sp)
8110856c:	dec00204 	addi	sp,sp,8
81108570:	f800283a 	ret

81108574 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108574:	defffc04 	addi	sp,sp,-16
81108578:	de00012e 	bgeu	sp,et,81108580 <bSyncIrqFlagError+0xc>
8110857c:	003b68fa 	trap	3
81108580:	dfc00315 	stw	ra,12(sp)
81108584:	df000215 	stw	fp,8(sp)
81108588:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110858c:	010000c4 	movi	r4,3
81108590:	11086f80 	call	811086f8 <uliSyncReadReg>
81108594:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108598:	e0bfff17 	ldw	r2,-4(fp)
8110859c:	1080008c 	andi	r2,r2,2
811085a0:	10000326 	beq	r2,zero,811085b0 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
811085a4:	00800044 	movi	r2,1
811085a8:	e0bffe15 	stw	r2,-8(fp)
811085ac:	00000106 	br	811085b4 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
811085b0:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
811085b4:	e0bffe17 	ldw	r2,-8(fp)
}
811085b8:	e037883a 	mov	sp,fp
811085bc:	dfc00117 	ldw	ra,4(sp)
811085c0:	df000017 	ldw	fp,0(sp)
811085c4:	dec00204 	addi	sp,sp,8
811085c8:	f800283a 	ret

811085cc <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
811085cc:	defffc04 	addi	sp,sp,-16
811085d0:	de00012e 	bgeu	sp,et,811085d8 <bSyncIrqFlagBlank+0xc>
811085d4:	003b68fa 	trap	3
811085d8:	dfc00315 	stw	ra,12(sp)
811085dc:	df000215 	stw	fp,8(sp)
811085e0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
811085e4:	010000c4 	movi	r4,3
811085e8:	11086f80 	call	811086f8 <uliSyncReadReg>
811085ec:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
811085f0:	e0bfff17 	ldw	r2,-4(fp)
811085f4:	1080004c 	andi	r2,r2,1
811085f8:	10000326 	beq	r2,zero,81108608 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
811085fc:	00800044 	movi	r2,1
81108600:	e0bffe15 	stw	r2,-8(fp)
81108604:	00000106 	br	8110860c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108608:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110860c:	e0bffe17 	ldw	r2,-8(fp)
}
81108610:	e037883a 	mov	sp,fp
81108614:	dfc00117 	ldw	ra,4(sp)
81108618:	df000017 	ldw	fp,0(sp)
8110861c:	dec00204 	addi	sp,sp,8
81108620:	f800283a 	ret

81108624 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
81108624:	defffd04 	addi	sp,sp,-12
81108628:	de00012e 	bgeu	sp,et,81108630 <uliSyncGetCtr+0xc>
8110862c:	003b68fa 	trap	3
81108630:	dfc00215 	stw	ra,8(sp)
81108634:	df000115 	stw	fp,4(sp)
81108638:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110863c:	01000284 	movi	r4,10
81108640:	11086f80 	call	811086f8 <uliSyncReadReg>
81108644:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81108648:	e0bfff17 	ldw	r2,-4(fp)
}
8110864c:	e037883a 	mov	sp,fp
81108650:	dfc00117 	ldw	ra,4(sp)
81108654:	df000017 	ldw	fp,0(sp)
81108658:	dec00204 	addi	sp,sp,8
8110865c:	f800283a 	ret

81108660 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
81108660:	defffd04 	addi	sp,sp,-12
81108664:	de00012e 	bgeu	sp,et,8110866c <uliSyncReadStatus+0xc>
81108668:	003b68fa 	trap	3
8110866c:	dfc00215 	stw	ra,8(sp)
81108670:	df000115 	stw	fp,4(sp)
81108674:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108678:	0009883a 	mov	r4,zero
8110867c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108680:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108684:	e0bfff17 	ldw	r2,-4(fp)
}
81108688:	e037883a 	mov	sp,fp
8110868c:	dfc00117 	ldw	ra,4(sp)
81108690:	df000017 	ldw	fp,0(sp)
81108694:	dec00204 	addi	sp,sp,8
81108698:	f800283a 	ret

8110869c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110869c:	defffc04 	addi	sp,sp,-16
811086a0:	de00012e 	bgeu	sp,et,811086a8 <bSyncWriteReg+0xc>
811086a4:	003b68fa 	trap	3
811086a8:	df000315 	stw	fp,12(sp)
811086ac:	df000304 	addi	fp,sp,12
811086b0:	e13ffe15 	stw	r4,-8(fp)
811086b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086b8:	00a00034 	movhi	r2,32768
811086bc:	10810004 	addi	r2,r2,1024
811086c0:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
811086c4:	e0bffe17 	ldw	r2,-8(fp)
811086c8:	1085883a 	add	r2,r2,r2
811086cc:	1085883a 	add	r2,r2,r2
811086d0:	1007883a 	mov	r3,r2
811086d4:	e0bffd17 	ldw	r2,-12(fp)
811086d8:	10c5883a 	add	r2,r2,r3
811086dc:	e0ffff17 	ldw	r3,-4(fp)
811086e0:	10c00015 	stw	r3,0(r2)
	return TRUE;
811086e4:	00800044 	movi	r2,1
}
811086e8:	e037883a 	mov	sp,fp
811086ec:	df000017 	ldw	fp,0(sp)
811086f0:	dec00104 	addi	sp,sp,4
811086f4:	f800283a 	ret

811086f8 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
811086f8:	defffc04 	addi	sp,sp,-16
811086fc:	de00012e 	bgeu	sp,et,81108704 <uliSyncReadReg+0xc>
81108700:	003b68fa 	trap	3
81108704:	df000315 	stw	fp,12(sp)
81108708:	df000304 	addi	fp,sp,12
8110870c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108710:	00a00034 	movhi	r2,32768
81108714:	10810004 	addi	r2,r2,1024
81108718:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
8110871c:	e0bfff17 	ldw	r2,-4(fp)
81108720:	1085883a 	add	r2,r2,r2
81108724:	1085883a 	add	r2,r2,r2
81108728:	1007883a 	mov	r3,r2
8110872c:	e0bffd17 	ldw	r2,-12(fp)
81108730:	10c5883a 	add	r2,r2,r3
81108734:	10800017 	ldw	r2,0(r2)
81108738:	e0bffe15 	stw	r2,-8(fp)
	return value;
8110873c:	e0bffe17 	ldw	r2,-8(fp)
}
81108740:	e037883a 	mov	sp,fp
81108744:	df000017 	ldw	fp,0(sp)
81108748:	dec00104 	addi	sp,sp,4
8110874c:	f800283a 	ret

81108750 <vDataControlTask>:


#include "data_control_task.h"


void vDataControlTask(void *task_data) {
81108750:	defffb04 	addi	sp,sp,-20
81108754:	de00012e 	bgeu	sp,et,8110875c <vDataControlTask+0xc>
81108758:	003b68fa 	trap	3
8110875c:	dfc00415 	stw	ra,16(sp)
81108760:	df000315 	stw	fp,12(sp)
81108764:	df000304 	addi	fp,sp,12
81108768:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110876c:	e03ffd15 	stw	zero,-12(fp)
	TNData_Control *pxDataC;
	INT8U error_code;


	pxDataC = (TNData_Control *) task_data;
81108770:	e0bfff17 	ldw	r2,-4(fp)
81108774:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"Data Controller Task. (Task on)\n");
81108778:	d0a05017 	ldw	r2,-32448(gp)
8110877c:	100f883a 	mov	r7,r2
81108780:	01800804 	movi	r6,32
81108784:	01400044 	movi	r5,1
81108788:	01204534 	movhi	r4,33044
8110878c:	213cf604 	addi	r4,r4,-3112
81108790:	1113be40 	call	81113be4 <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
81108794:	0001883a 	nop
	}

}
81108798:	0001883a 	nop
8110879c:	e037883a 	mov	sp,fp
811087a0:	dfc00117 	ldw	ra,4(sp)
811087a4:	df000017 	ldw	fp,0(sp)
811087a8:	dec00204 	addi	sp,sp,8
811087ac:	f800283a 	ret

811087b0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811087b0:	defffb04 	addi	sp,sp,-20
811087b4:	de00012e 	bgeu	sp,et,811087bc <vFeeTask+0xc>
811087b8:	003b68fa 	trap	3
811087bc:	dfc00415 	stw	ra,16(sp)
811087c0:	df000315 	stw	fp,12(sp)
811087c4:	df000304 	addi	fp,sp,12
811087c8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
811087cc:	e03ffd15 	stw	zero,-12(fp)
	TNFee *pxNFee;
	INT8U error_code;

	pxNFee = ( TNFee * ) task_data;
811087d0:	e0bfff17 	ldw	r2,-4(fp)
811087d4:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
		fprintf(fp,"NFEE %hhu Task. (Task on)\n", pxNFee->ucId);
811087d8:	d0e05017 	ldw	r3,-32448(gp)
811087dc:	e0bffe17 	ldw	r2,-8(fp)
811087e0:	10800003 	ldbu	r2,0(r2)
811087e4:	10803fcc 	andi	r2,r2,255
811087e8:	100d883a 	mov	r6,r2
811087ec:	01604534 	movhi	r5,33044
811087f0:	297cff04 	addi	r5,r5,-3076
811087f4:	1809883a 	mov	r4,r3
811087f8:	11135480 	call	81113548 <fprintf>
	#endif

	#ifdef DEBUG_ON
		vPrintUARTNFee( pxNFee );
811087fc:	e13ffe17 	ldw	r4,-8(fp)
81108800:	11091880 	call	81109188 <vPrintUARTNFee>
	#endif


	for(;;){
		break; /*todo:Tirar depois do debug*/
81108804:	0001883a 	nop

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
81108808:	0001883a 	nop
8110880c:	e037883a 	mov	sp,fp
81108810:	dfc00117 	ldw	ra,4(sp)
81108814:	df000017 	ldw	fp,0(sp)
81108818:	dec00204 	addi	sp,sp,8
8110881c:	f800283a 	ret

81108820 <vPrintConsoleNFee>:

#ifdef DEBUG_ON
	void vPrintConsoleNFee( TNFee *pxNFeeI ) {
81108820:	defffa04 	addi	sp,sp,-24
81108824:	de00012e 	bgeu	sp,et,8110882c <vPrintConsoleNFee+0xc>
81108828:	003b68fa 	trap	3
8110882c:	dfc00515 	stw	ra,20(sp)
81108830:	df000415 	stw	fp,16(sp)
81108834:	df000404 	addi	fp,sp,16
81108838:	e13fff15 	stw	r4,-4(fp)
		TNFee *pxNFee;

		pxNFee = pxNFeeI;
8110883c:	e0bfff17 	ldw	r2,-4(fp)
81108840:	e0bffe15 	stw	r2,-8(fp)

		fprintf(fp,"=================================NFEE %hhu=====================================\n", pxNFee->ucId);
81108844:	d0e05017 	ldw	r3,-32448(gp)
81108848:	e0bffe17 	ldw	r2,-8(fp)
8110884c:	10800003 	ldbu	r2,0(r2)
81108850:	10803fcc 	andi	r2,r2,255
81108854:	100d883a 	mov	r6,r2
81108858:	01604534 	movhi	r5,33044
8110885c:	297d0604 	addi	r5,r5,-3048
81108860:	1809883a 	mov	r4,r3
81108864:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108868:	d0a05017 	ldw	r2,-32448(gp)
8110886c:	100b883a 	mov	r5,r2
81108870:	01000284 	movi	r4,10
81108874:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"NFEE %hhu CCD infos: \n", pxNFee->ucId);
81108878:	d0e05017 	ldw	r3,-32448(gp)
8110887c:	e0bffe17 	ldw	r2,-8(fp)
81108880:	10800003 	ldbu	r2,0(r2)
81108884:	10803fcc 	andi	r2,r2,255
81108888:	100d883a 	mov	r6,r2
8110888c:	01604534 	movhi	r5,33044
81108890:	297d1b04 	addi	r5,r5,-2964
81108894:	1809883a 	mov	r4,r3
81108898:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    PreScan = %hu \n", pxNFee->xCcdInfo.usiSPrescanN);
8110889c:	d0e05017 	ldw	r3,-32448(gp)
811088a0:	e0bffe17 	ldw	r2,-8(fp)
811088a4:	1080290b 	ldhu	r2,164(r2)
811088a8:	10bfffcc 	andi	r2,r2,65535
811088ac:	100d883a 	mov	r6,r2
811088b0:	01604534 	movhi	r5,33044
811088b4:	297d2104 	addi	r5,r5,-2940
811088b8:	1809883a 	mov	r4,r3
811088bc:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    OverScan = %hu \n", pxNFee->xCcdInfo.usiSOverscanN);
811088c0:	d0e05017 	ldw	r3,-32448(gp)
811088c4:	e0bffe17 	ldw	r2,-8(fp)
811088c8:	1080298b 	ldhu	r2,166(r2)
811088cc:	10bfffcc 	andi	r2,r2,65535
811088d0:	100d883a 	mov	r6,r2
811088d4:	01604534 	movhi	r5,33044
811088d8:	297d2604 	addi	r5,r5,-2920
811088dc:	1809883a 	mov	r4,r3
811088e0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    OLN = %hu \n", pxNFee->xCcdInfo.usiOLN);
811088e4:	d0e05017 	ldw	r3,-32448(gp)
811088e8:	e0bffe17 	ldw	r2,-8(fp)
811088ec:	10802a0b 	ldhu	r2,168(r2)
811088f0:	10bfffcc 	andi	r2,r2,65535
811088f4:	100d883a 	mov	r6,r2
811088f8:	01604534 	movhi	r5,33044
811088fc:	297d2c04 	addi	r5,r5,-2896
81108900:	1809883a 	mov	r4,r3
81108904:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Half Width = %hu \n", pxNFee->xCcdInfo.usiHalfWidth);
81108908:	d0e05017 	ldw	r3,-32448(gp)
8110890c:	e0bffe17 	ldw	r2,-8(fp)
81108910:	10802a8b 	ldhu	r2,170(r2)
81108914:	10bfffcc 	andi	r2,r2,65535
81108918:	100d883a 	mov	r6,r2
8110891c:	01604534 	movhi	r5,33044
81108920:	297d3004 	addi	r5,r5,-2880
81108924:	1809883a 	mov	r4,r3
81108928:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Height = %hu \n", pxNFee->xCcdInfo.usiHeight);
8110892c:	d0e05017 	ldw	r3,-32448(gp)
81108930:	e0bffe17 	ldw	r2,-8(fp)
81108934:	10802b0b 	ldhu	r2,172(r2)
81108938:	10bfffcc 	andi	r2,r2,65535
8110893c:	100d883a 	mov	r6,r2
81108940:	01604534 	movhi	r5,33044
81108944:	297d3604 	addi	r5,r5,-2856
81108948:	1809883a 	mov	r4,r3
8110894c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108950:	d0a05017 	ldw	r2,-32448(gp)
81108954:	100b883a 	mov	r5,r2
81108958:	01000284 	movi	r4,10
8110895c:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"NFEE %hhu Control: \n", pxNFee->ucId);
81108960:	d0e05017 	ldw	r3,-32448(gp)
81108964:	e0bffe17 	ldw	r2,-8(fp)
81108968:	10800003 	ldbu	r2,0(r2)
8110896c:	10803fcc 	andi	r2,r2,255
81108970:	100d883a 	mov	r6,r2
81108974:	01604534 	movhi	r5,33044
81108978:	297d3b04 	addi	r5,r5,-2836
8110897c:	1809883a 	mov	r4,r3
81108980:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    NFEE State 	= %hu \n", pxNFee->xControl.eMode);
81108984:	d0e05017 	ldw	r3,-32448(gp)
81108988:	e0bffe17 	ldw	r2,-8(fp)
8110898c:	10802717 	ldw	r2,156(r2)
81108990:	100d883a 	mov	r6,r2
81108994:	01604534 	movhi	r5,33044
81108998:	297d4104 	addi	r5,r5,-2812
8110899c:	1809883a 	mov	r4,r3
811089a0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    NFEE Enable? = %hu \n", pxNFee->xControl.bEnabled);
811089a4:	d0e05017 	ldw	r3,-32448(gp)
811089a8:	e0bffe17 	ldw	r2,-8(fp)
811089ac:	10802117 	ldw	r2,132(r2)
811089b0:	100d883a 	mov	r6,r2
811089b4:	01604534 	movhi	r5,33044
811089b8:	297d4704 	addi	r5,r5,-2788
811089bc:	1809883a 	mov	r4,r3
811089c0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Using DMA?   = %hu \n", pxNFee->xControl.bUsingDMA);
811089c4:	d0e05017 	ldw	r3,-32448(gp)
811089c8:	e0bffe17 	ldw	r2,-8(fp)
811089cc:	10802217 	ldw	r2,136(r2)
811089d0:	100d883a 	mov	r6,r2
811089d4:	01604534 	movhi	r5,33044
811089d8:	297d4e04 	addi	r5,r5,-2760
811089dc:	1809883a 	mov	r4,r3
811089e0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Logging?     = %hu \n", pxNFee->xControl.bLogging);
811089e4:	d0e05017 	ldw	r3,-32448(gp)
811089e8:	e0bffe17 	ldw	r2,-8(fp)
811089ec:	10802317 	ldw	r2,140(r2)
811089f0:	100d883a 	mov	r6,r2
811089f4:	01604534 	movhi	r5,33044
811089f8:	297d5504 	addi	r5,r5,-2732
811089fc:	1809883a 	mov	r4,r3
81108a00:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Echoing?     = %hu \n", pxNFee->xControl.bEchoing);
81108a04:	d0e05017 	ldw	r3,-32448(gp)
81108a08:	e0bffe17 	ldw	r2,-8(fp)
81108a0c:	10802417 	ldw	r2,144(r2)
81108a10:	100d883a 	mov	r6,r2
81108a14:	01604534 	movhi	r5,33044
81108a18:	297d5c04 	addi	r5,r5,-2704
81108a1c:	1809883a 	mov	r4,r3
81108a20:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Channel Enable? = %hu \n", pxNFee->xControl.bChannelEnable);
81108a24:	d0e05017 	ldw	r3,-32448(gp)
81108a28:	e0bffe17 	ldw	r2,-8(fp)
81108a2c:	10802517 	ldw	r2,148(r2)
81108a30:	100d883a 	mov	r6,r2
81108a34:	01604534 	movhi	r5,33044
81108a38:	297d6304 	addi	r5,r5,-2676
81108a3c:	1809883a 	mov	r4,r3
81108a40:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Readout order = [ %hhu , %hhu , %hhu , %hhu ] \n", pxNFee->xControl.ucROutOrder[0], pxNFee->xControl.ucROutOrder[1], pxNFee->xControl.ucROutOrder[2], pxNFee->xControl.ucROutOrder[3]);
81108a44:	d1205017 	ldw	r4,-32448(gp)
81108a48:	e0bffe17 	ldw	r2,-8(fp)
81108a4c:	10802603 	ldbu	r2,152(r2)
81108a50:	11403fcc 	andi	r5,r2,255
81108a54:	e0bffe17 	ldw	r2,-8(fp)
81108a58:	10802643 	ldbu	r2,153(r2)
81108a5c:	11803fcc 	andi	r6,r2,255
81108a60:	e0bffe17 	ldw	r2,-8(fp)
81108a64:	10802683 	ldbu	r2,154(r2)
81108a68:	10803fcc 	andi	r2,r2,255
81108a6c:	e0fffe17 	ldw	r3,-8(fp)
81108a70:	18c026c3 	ldbu	r3,155(r3)
81108a74:	18c03fcc 	andi	r3,r3,255
81108a78:	d8c00115 	stw	r3,4(sp)
81108a7c:	d8800015 	stw	r2,0(sp)
81108a80:	300f883a 	mov	r7,r6
81108a84:	280d883a 	mov	r6,r5
81108a88:	01604534 	movhi	r5,33044
81108a8c:	297d6a04 	addi	r5,r5,-2648
81108a90:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    CCD Side = = %hu \n", pxNFee->xControl.eSide);
81108a94:	d0e05017 	ldw	r3,-32448(gp)
81108a98:	e0bffe17 	ldw	r2,-8(fp)
81108a9c:	10802817 	ldw	r2,160(r2)
81108aa0:	100d883a 	mov	r6,r2
81108aa4:	01604534 	movhi	r5,33044
81108aa8:	297d7704 	addi	r5,r5,-2596
81108aac:	1809883a 	mov	r4,r3
81108ab0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n\n");
81108ab4:	d0a05017 	ldw	r2,-32448(gp)
81108ab8:	100f883a 	mov	r7,r2
81108abc:	01800084 	movi	r6,2
81108ac0:	01400044 	movi	r5,1
81108ac4:	01204534 	movhi	r4,33044
81108ac8:	213d7d04 	addi	r4,r4,-2572
81108acc:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"NFEE %hhu MEMORY MAP: \n", pxNFee->ucId);
81108ad0:	d0e05017 	ldw	r3,-32448(gp)
81108ad4:	e0bffe17 	ldw	r2,-8(fp)
81108ad8:	10800003 	ldbu	r2,0(r2)
81108adc:	10803fcc 	andi	r2,r2,255
81108ae0:	100d883a 	mov	r6,r2
81108ae4:	01604534 	movhi	r5,33044
81108ae8:	297d7e04 	addi	r5,r5,-2568
81108aec:	1809883a 	mov	r4,r3
81108af0:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    General Info: \n");
81108af4:	d0a05017 	ldw	r2,-32448(gp)
81108af8:	100f883a 	mov	r7,r2
81108afc:	018004c4 	movi	r6,19
81108b00:	01400044 	movi	r5,1
81108b04:	01204534 	movhi	r4,33044
81108b08:	213d8404 	addi	r4,r4,-2544
81108b0c:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"        Offset root 	= %lu \n", pxNFee->xMemMap.ulOffsetRoot);
81108b10:	d0e05017 	ldw	r3,-32448(gp)
81108b14:	e0bffe17 	ldw	r2,-8(fp)
81108b18:	10800117 	ldw	r2,4(r2)
81108b1c:	100d883a 	mov	r6,r2
81108b20:	01604534 	movhi	r5,33044
81108b24:	297d8904 	addi	r5,r5,-2524
81108b28:	1809883a 	mov	r4,r3
81108b2c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Total Bytes 	= %lu \n", pxNFee->xMemMap.ulTotalBytes);
81108b30:	d0e05017 	ldw	r3,-32448(gp)
81108b34:	e0bffe17 	ldw	r2,-8(fp)
81108b38:	10800217 	ldw	r2,8(r2)
81108b3c:	100d883a 	mov	r6,r2
81108b40:	01604534 	movhi	r5,33044
81108b44:	297d9104 	addi	r5,r5,-2492
81108b48:	1809883a 	mov	r4,r3
81108b4c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        LUT ADDR 	= %lu \n", pxNFee->xMemMap.ulLUTAddr);
81108b50:	d0e05017 	ldw	r3,-32448(gp)
81108b54:	e0bffe17 	ldw	r2,-8(fp)
81108b58:	10800317 	ldw	r2,12(r2)
81108b5c:	100d883a 	mov	r6,r2
81108b60:	01604534 	movhi	r5,33044
81108b64:	297d9904 	addi	r5,r5,-2460
81108b68:	1809883a 	mov	r4,r3
81108b6c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"    Common to all CCDs: \n");
81108b70:	d0a05017 	ldw	r2,-32448(gp)
81108b74:	100f883a 	mov	r7,r2
81108b78:	01800644 	movi	r6,25
81108b7c:	01400044 	movi	r5,1
81108b80:	01204534 	movhi	r4,33044
81108b84:	213da004 	addi	r4,r4,-2432
81108b88:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"        Total Bytes 	= %hu \n", pxNFee->xMemMap.xCommon.usiTotalBytes);
81108b8c:	d0e05017 	ldw	r3,-32448(gp)
81108b90:	e0bffe17 	ldw	r2,-8(fp)
81108b94:	10800517 	ldw	r2,20(r2)
81108b98:	100d883a 	mov	r6,r2
81108b9c:	01604534 	movhi	r5,33044
81108ba0:	297da704 	addi	r5,r5,-2404
81108ba4:	1809883a 	mov	r4,r3
81108ba8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Total of Blocks = %hu \n", pxNFee->xMemMap.xCommon.usiNTotalBlocks);
81108bac:	d0e05017 	ldw	r3,-32448(gp)
81108bb0:	e0bffe17 	ldw	r2,-8(fp)
81108bb4:	10800417 	ldw	r2,16(r2)
81108bb8:	100d883a 	mov	r6,r2
81108bbc:	01604534 	movhi	r5,33044
81108bc0:	297daf04 	addi	r5,r5,-2372
81108bc4:	1809883a 	mov	r4,r3
81108bc8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Padding Bytes 	= %hhu\n", pxNFee->xMemMap.xCommon.ucPaddingBytes);
81108bcc:	d0e05017 	ldw	r3,-32448(gp)
81108bd0:	e0bffe17 	ldw	r2,-8(fp)
81108bd4:	10800603 	ldbu	r2,24(r2)
81108bd8:	10803fcc 	andi	r2,r2,255
81108bdc:	100d883a 	mov	r6,r2
81108be0:	01604534 	movhi	r5,33044
81108be4:	297db704 	addi	r5,r5,-2340
81108be8:	1809883a 	mov	r4,r3
81108bec:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Padding MASK 	= %llu\n", pxNFee->xMemMap.xCommon.ucPaddingMask.ullWord);
81108bf0:	d2205017 	ldw	r8,-32448(gp)
81108bf4:	e13ffe17 	ldw	r4,-8(fp)
81108bf8:	20800717 	ldw	r2,28(r4)
81108bfc:	20c00817 	ldw	r3,32(r4)
81108c00:	100d883a 	mov	r6,r2
81108c04:	180f883a 	mov	r7,r3
81108c08:	01604534 	movhi	r5,33044
81108c0c:	297dbf04 	addi	r5,r5,-2308
81108c10:	4009883a 	mov	r4,r8
81108c14:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108c18:	d0a05017 	ldw	r2,-32448(gp)
81108c1c:	100b883a 	mov	r5,r2
81108c20:	01000284 	movi	r4,10
81108c24:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 0 , pxNFee->ucId);
81108c28:	d0e05017 	ldw	r3,-32448(gp)
81108c2c:	e0bffe17 	ldw	r2,-8(fp)
81108c30:	10800003 	ldbu	r2,0(r2)
81108c34:	10803fcc 	andi	r2,r2,255
81108c38:	100f883a 	mov	r7,r2
81108c3c:	000d883a 	mov	r6,zero
81108c40:	01604534 	movhi	r5,33044
81108c44:	297dc704 	addi	r5,r5,-2276
81108c48:	1809883a 	mov	r4,r3
81108c4c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Left side \n");
81108c50:	d0a05017 	ldw	r2,-32448(gp)
81108c54:	100f883a 	mov	r7,r2
81108c58:	018004c4 	movi	r6,19
81108c5c:	01400044 	movi	r5,1
81108c60:	01204534 	movhi	r4,33044
81108c64:	213dd104 	addi	r4,r4,-2236
81108c68:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulOffsetAddr);
81108c6c:	d0e05017 	ldw	r3,-32448(gp)
81108c70:	e0bffe17 	ldw	r2,-8(fp)
81108c74:	10800917 	ldw	r2,36(r2)
81108c78:	100d883a 	mov	r6,r2
81108c7c:	01604534 	movhi	r5,33044
81108c80:	297dd604 	addi	r5,r5,-2216
81108c84:	1809883a 	mov	r4,r3
81108c88:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulBlockI);
81108c8c:	d0e05017 	ldw	r3,-32448(gp)
81108c90:	e0bffe17 	ldw	r2,-8(fp)
81108c94:	10800a17 	ldw	r2,40(r2)
81108c98:	100d883a 	mov	r6,r2
81108c9c:	01604534 	movhi	r5,33044
81108ca0:	297ddf04 	addi	r5,r5,-2180
81108ca4:	1809883a 	mov	r4,r3
81108ca8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulAddrI);
81108cac:	d0e05017 	ldw	r3,-32448(gp)
81108cb0:	e0bffe17 	ldw	r2,-8(fp)
81108cb4:	10800b17 	ldw	r2,44(r2)
81108cb8:	100d883a 	mov	r6,r2
81108cbc:	01604534 	movhi	r5,33044
81108cc0:	297dea04 	addi	r5,r5,-2136
81108cc4:	1809883a 	mov	r4,r3
81108cc8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Right side \n");
81108ccc:	d0a05017 	ldw	r2,-32448(gp)
81108cd0:	100f883a 	mov	r7,r2
81108cd4:	01800504 	movi	r6,20
81108cd8:	01400044 	movi	r5,1
81108cdc:	01204534 	movhi	r4,33044
81108ce0:	213df604 	addi	r4,r4,-2088
81108ce4:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulOffsetAddr);
81108ce8:	d0e05017 	ldw	r3,-32448(gp)
81108cec:	e0bffe17 	ldw	r2,-8(fp)
81108cf0:	10800c17 	ldw	r2,48(r2)
81108cf4:	100d883a 	mov	r6,r2
81108cf8:	01604534 	movhi	r5,33044
81108cfc:	297dd604 	addi	r5,r5,-2216
81108d00:	1809883a 	mov	r4,r3
81108d04:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulBlockI);
81108d08:	d0e05017 	ldw	r3,-32448(gp)
81108d0c:	e0bffe17 	ldw	r2,-8(fp)
81108d10:	10800d17 	ldw	r2,52(r2)
81108d14:	100d883a 	mov	r6,r2
81108d18:	01604534 	movhi	r5,33044
81108d1c:	297ddf04 	addi	r5,r5,-2180
81108d20:	1809883a 	mov	r4,r3
81108d24:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulAddrI);
81108d28:	d0e05017 	ldw	r3,-32448(gp)
81108d2c:	e0bffe17 	ldw	r2,-8(fp)
81108d30:	10800e17 	ldw	r2,56(r2)
81108d34:	100d883a 	mov	r6,r2
81108d38:	01604534 	movhi	r5,33044
81108d3c:	297dea04 	addi	r5,r5,-2136
81108d40:	1809883a 	mov	r4,r3
81108d44:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108d48:	d0a05017 	ldw	r2,-32448(gp)
81108d4c:	100b883a 	mov	r5,r2
81108d50:	01000284 	movi	r4,10
81108d54:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 1 , pxNFee->ucId);
81108d58:	d0e05017 	ldw	r3,-32448(gp)
81108d5c:	e0bffe17 	ldw	r2,-8(fp)
81108d60:	10800003 	ldbu	r2,0(r2)
81108d64:	10803fcc 	andi	r2,r2,255
81108d68:	100f883a 	mov	r7,r2
81108d6c:	01800044 	movi	r6,1
81108d70:	01604534 	movhi	r5,33044
81108d74:	297dc704 	addi	r5,r5,-2276
81108d78:	1809883a 	mov	r4,r3
81108d7c:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Left side \n");
81108d80:	d0a05017 	ldw	r2,-32448(gp)
81108d84:	100f883a 	mov	r7,r2
81108d88:	018004c4 	movi	r6,19
81108d8c:	01400044 	movi	r5,1
81108d90:	01204534 	movhi	r4,33044
81108d94:	213dd104 	addi	r4,r4,-2236
81108d98:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulOffsetAddr);
81108d9c:	d0e05017 	ldw	r3,-32448(gp)
81108da0:	e0bffe17 	ldw	r2,-8(fp)
81108da4:	10800f17 	ldw	r2,60(r2)
81108da8:	100d883a 	mov	r6,r2
81108dac:	01604534 	movhi	r5,33044
81108db0:	297dd604 	addi	r5,r5,-2216
81108db4:	1809883a 	mov	r4,r3
81108db8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulBlockI);
81108dbc:	d0e05017 	ldw	r3,-32448(gp)
81108dc0:	e0bffe17 	ldw	r2,-8(fp)
81108dc4:	10801017 	ldw	r2,64(r2)
81108dc8:	100d883a 	mov	r6,r2
81108dcc:	01604534 	movhi	r5,33044
81108dd0:	297ddf04 	addi	r5,r5,-2180
81108dd4:	1809883a 	mov	r4,r3
81108dd8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulAddrI);
81108ddc:	d0e05017 	ldw	r3,-32448(gp)
81108de0:	e0bffe17 	ldw	r2,-8(fp)
81108de4:	10801117 	ldw	r2,68(r2)
81108de8:	100d883a 	mov	r6,r2
81108dec:	01604534 	movhi	r5,33044
81108df0:	297dea04 	addi	r5,r5,-2136
81108df4:	1809883a 	mov	r4,r3
81108df8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Right side \n");
81108dfc:	d0a05017 	ldw	r2,-32448(gp)
81108e00:	100f883a 	mov	r7,r2
81108e04:	01800504 	movi	r6,20
81108e08:	01400044 	movi	r5,1
81108e0c:	01204534 	movhi	r4,33044
81108e10:	213df604 	addi	r4,r4,-2088
81108e14:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulOffsetAddr);
81108e18:	d0e05017 	ldw	r3,-32448(gp)
81108e1c:	e0bffe17 	ldw	r2,-8(fp)
81108e20:	10801217 	ldw	r2,72(r2)
81108e24:	100d883a 	mov	r6,r2
81108e28:	01604534 	movhi	r5,33044
81108e2c:	297dd604 	addi	r5,r5,-2216
81108e30:	1809883a 	mov	r4,r3
81108e34:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulBlockI);
81108e38:	d0e05017 	ldw	r3,-32448(gp)
81108e3c:	e0bffe17 	ldw	r2,-8(fp)
81108e40:	10801317 	ldw	r2,76(r2)
81108e44:	100d883a 	mov	r6,r2
81108e48:	01604534 	movhi	r5,33044
81108e4c:	297ddf04 	addi	r5,r5,-2180
81108e50:	1809883a 	mov	r4,r3
81108e54:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulAddrI);
81108e58:	d0e05017 	ldw	r3,-32448(gp)
81108e5c:	e0bffe17 	ldw	r2,-8(fp)
81108e60:	10801417 	ldw	r2,80(r2)
81108e64:	100d883a 	mov	r6,r2
81108e68:	01604534 	movhi	r5,33044
81108e6c:	297dea04 	addi	r5,r5,-2136
81108e70:	1809883a 	mov	r4,r3
81108e74:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108e78:	d0a05017 	ldw	r2,-32448(gp)
81108e7c:	100b883a 	mov	r5,r2
81108e80:	01000284 	movi	r4,10
81108e84:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 2 , pxNFee->ucId);
81108e88:	d0e05017 	ldw	r3,-32448(gp)
81108e8c:	e0bffe17 	ldw	r2,-8(fp)
81108e90:	10800003 	ldbu	r2,0(r2)
81108e94:	10803fcc 	andi	r2,r2,255
81108e98:	100f883a 	mov	r7,r2
81108e9c:	01800084 	movi	r6,2
81108ea0:	01604534 	movhi	r5,33044
81108ea4:	297dc704 	addi	r5,r5,-2276
81108ea8:	1809883a 	mov	r4,r3
81108eac:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Left side \n");
81108eb0:	d0a05017 	ldw	r2,-32448(gp)
81108eb4:	100f883a 	mov	r7,r2
81108eb8:	018004c4 	movi	r6,19
81108ebc:	01400044 	movi	r5,1
81108ec0:	01204534 	movhi	r4,33044
81108ec4:	213dd104 	addi	r4,r4,-2236
81108ec8:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulOffsetAddr);
81108ecc:	d0e05017 	ldw	r3,-32448(gp)
81108ed0:	e0bffe17 	ldw	r2,-8(fp)
81108ed4:	10801517 	ldw	r2,84(r2)
81108ed8:	100d883a 	mov	r6,r2
81108edc:	01604534 	movhi	r5,33044
81108ee0:	297dd604 	addi	r5,r5,-2216
81108ee4:	1809883a 	mov	r4,r3
81108ee8:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulBlockI);
81108eec:	d0e05017 	ldw	r3,-32448(gp)
81108ef0:	e0bffe17 	ldw	r2,-8(fp)
81108ef4:	10801617 	ldw	r2,88(r2)
81108ef8:	100d883a 	mov	r6,r2
81108efc:	01604534 	movhi	r5,33044
81108f00:	297ddf04 	addi	r5,r5,-2180
81108f04:	1809883a 	mov	r4,r3
81108f08:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulAddrI);
81108f0c:	d0e05017 	ldw	r3,-32448(gp)
81108f10:	e0bffe17 	ldw	r2,-8(fp)
81108f14:	10801717 	ldw	r2,92(r2)
81108f18:	100d883a 	mov	r6,r2
81108f1c:	01604534 	movhi	r5,33044
81108f20:	297dea04 	addi	r5,r5,-2136
81108f24:	1809883a 	mov	r4,r3
81108f28:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Right side \n");
81108f2c:	d0a05017 	ldw	r2,-32448(gp)
81108f30:	100f883a 	mov	r7,r2
81108f34:	01800504 	movi	r6,20
81108f38:	01400044 	movi	r5,1
81108f3c:	01204534 	movhi	r4,33044
81108f40:	213df604 	addi	r4,r4,-2088
81108f44:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulOffsetAddr);
81108f48:	d0e05017 	ldw	r3,-32448(gp)
81108f4c:	e0bffe17 	ldw	r2,-8(fp)
81108f50:	10801817 	ldw	r2,96(r2)
81108f54:	100d883a 	mov	r6,r2
81108f58:	01604534 	movhi	r5,33044
81108f5c:	297dd604 	addi	r5,r5,-2216
81108f60:	1809883a 	mov	r4,r3
81108f64:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulBlockI);
81108f68:	d0e05017 	ldw	r3,-32448(gp)
81108f6c:	e0bffe17 	ldw	r2,-8(fp)
81108f70:	10801917 	ldw	r2,100(r2)
81108f74:	100d883a 	mov	r6,r2
81108f78:	01604534 	movhi	r5,33044
81108f7c:	297ddf04 	addi	r5,r5,-2180
81108f80:	1809883a 	mov	r4,r3
81108f84:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulAddrI);
81108f88:	d0e05017 	ldw	r3,-32448(gp)
81108f8c:	e0bffe17 	ldw	r2,-8(fp)
81108f90:	10801a17 	ldw	r2,104(r2)
81108f94:	100d883a 	mov	r6,r2
81108f98:	01604534 	movhi	r5,33044
81108f9c:	297dea04 	addi	r5,r5,-2136
81108fa0:	1809883a 	mov	r4,r3
81108fa4:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
81108fa8:	d0a05017 	ldw	r2,-32448(gp)
81108fac:	100b883a 	mov	r5,r2
81108fb0:	01000284 	movi	r4,10
81108fb4:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 3 , pxNFee->ucId);
81108fb8:	d0e05017 	ldw	r3,-32448(gp)
81108fbc:	e0bffe17 	ldw	r2,-8(fp)
81108fc0:	10800003 	ldbu	r2,0(r2)
81108fc4:	10803fcc 	andi	r2,r2,255
81108fc8:	100f883a 	mov	r7,r2
81108fcc:	018000c4 	movi	r6,3
81108fd0:	01604534 	movhi	r5,33044
81108fd4:	297dc704 	addi	r5,r5,-2276
81108fd8:	1809883a 	mov	r4,r3
81108fdc:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Left side \n");
81108fe0:	d0a05017 	ldw	r2,-32448(gp)
81108fe4:	100f883a 	mov	r7,r2
81108fe8:	018004c4 	movi	r6,19
81108fec:	01400044 	movi	r5,1
81108ff0:	01204534 	movhi	r4,33044
81108ff4:	213dd104 	addi	r4,r4,-2236
81108ff8:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulOffsetAddr);
81108ffc:	d0e05017 	ldw	r3,-32448(gp)
81109000:	e0bffe17 	ldw	r2,-8(fp)
81109004:	10801b17 	ldw	r2,108(r2)
81109008:	100d883a 	mov	r6,r2
8110900c:	01604534 	movhi	r5,33044
81109010:	297dd604 	addi	r5,r5,-2216
81109014:	1809883a 	mov	r4,r3
81109018:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulBlockI);
8110901c:	d0e05017 	ldw	r3,-32448(gp)
81109020:	e0bffe17 	ldw	r2,-8(fp)
81109024:	10801c17 	ldw	r2,112(r2)
81109028:	100d883a 	mov	r6,r2
8110902c:	01604534 	movhi	r5,33044
81109030:	297ddf04 	addi	r5,r5,-2180
81109034:	1809883a 	mov	r4,r3
81109038:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulAddrI);
8110903c:	d0e05017 	ldw	r3,-32448(gp)
81109040:	e0bffe17 	ldw	r2,-8(fp)
81109044:	10801d17 	ldw	r2,116(r2)
81109048:	100d883a 	mov	r6,r2
8110904c:	01604534 	movhi	r5,33044
81109050:	297dea04 	addi	r5,r5,-2136
81109054:	1809883a 	mov	r4,r3
81109058:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"        Right side \n");
8110905c:	d0a05017 	ldw	r2,-32448(gp)
81109060:	100f883a 	mov	r7,r2
81109064:	01800504 	movi	r6,20
81109068:	01400044 	movi	r5,1
8110906c:	01204534 	movhi	r4,33044
81109070:	213df604 	addi	r4,r4,-2088
81109074:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulOffsetAddr);
81109078:	d0e05017 	ldw	r3,-32448(gp)
8110907c:	e0bffe17 	ldw	r2,-8(fp)
81109080:	10801e17 	ldw	r2,120(r2)
81109084:	100d883a 	mov	r6,r2
81109088:	01604534 	movhi	r5,33044
8110908c:	297dd604 	addi	r5,r5,-2216
81109090:	1809883a 	mov	r4,r3
81109094:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulBlockI);
81109098:	d0e05017 	ldw	r3,-32448(gp)
8110909c:	e0bffe17 	ldw	r2,-8(fp)
811090a0:	10801f17 	ldw	r2,124(r2)
811090a4:	100d883a 	mov	r6,r2
811090a8:	01604534 	movhi	r5,33044
811090ac:	297ddf04 	addi	r5,r5,-2180
811090b0:	1809883a 	mov	r4,r3
811090b4:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulAddrI);
811090b8:	d0e05017 	ldw	r3,-32448(gp)
811090bc:	e0bffe17 	ldw	r2,-8(fp)
811090c0:	10802017 	ldw	r2,128(r2)
811090c4:	100d883a 	mov	r6,r2
811090c8:	01604534 	movhi	r5,33044
811090cc:	297dea04 	addi	r5,r5,-2136
811090d0:	1809883a 	mov	r4,r3
811090d4:	11135480 	call	81113548 <fprintf>
		fprintf(fp,"\n");
811090d8:	d0a05017 	ldw	r2,-32448(gp)
811090dc:	100b883a 	mov	r5,r2
811090e0:	01000284 	movi	r4,10
811090e4:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"==============================================================================\n");
811090e8:	d0a05017 	ldw	r2,-32448(gp)
811090ec:	100f883a 	mov	r7,r2
811090f0:	018013c4 	movi	r6,79
811090f4:	01400044 	movi	r5,1
811090f8:	01204534 	movhi	r4,33044
811090fc:	213dfc04 	addi	r4,r4,-2064
81109100:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"==============================================================================\n");
81109104:	d0a05017 	ldw	r2,-32448(gp)
81109108:	100f883a 	mov	r7,r2
8110910c:	018013c4 	movi	r6,79
81109110:	01400044 	movi	r5,1
81109114:	01204534 	movhi	r4,33044
81109118:	213dfc04 	addi	r4,r4,-2064
8110911c:	1113be40 	call	81113be4 <fwrite>
		fprintf(fp,"\n");
81109120:	d0a05017 	ldw	r2,-32448(gp)
81109124:	100b883a 	mov	r5,r2
81109128:	01000284 	movi	r4,10
8110912c:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"\n");
81109130:	d0a05017 	ldw	r2,-32448(gp)
81109134:	100b883a 	mov	r5,r2
81109138:	01000284 	movi	r4,10
8110913c:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"\n");
81109140:	d0a05017 	ldw	r2,-32448(gp)
81109144:	100b883a 	mov	r5,r2
81109148:	01000284 	movi	r4,10
8110914c:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"\n");
81109150:	d0a05017 	ldw	r2,-32448(gp)
81109154:	100b883a 	mov	r5,r2
81109158:	01000284 	movi	r4,10
8110915c:	11135c00 	call	811135c0 <fputc>
		fprintf(fp,"\n");
81109160:	d0a05017 	ldw	r2,-32448(gp)
81109164:	100b883a 	mov	r5,r2
81109168:	01000284 	movi	r4,10
8110916c:	11135c00 	call	811135c0 <fputc>
	}
81109170:	0001883a 	nop
81109174:	e037883a 	mov	sp,fp
81109178:	dfc00117 	ldw	ra,4(sp)
8110917c:	df000017 	ldw	fp,0(sp)
81109180:	dec00204 	addi	sp,sp,8
81109184:	f800283a 	ret

81109188 <vPrintUARTNFee>:
#endif


#ifdef DEBUG_ON
	void vPrintUARTNFee( TNFee *pxNFeeI ) {
81109188:	defffb04 	addi	sp,sp,-20
8110918c:	de00012e 	bgeu	sp,et,81109194 <vPrintUARTNFee+0xc>
81109190:	003b68fa 	trap	3
81109194:	dfc00415 	stw	ra,16(sp)
81109198:	df000315 	stw	fp,12(sp)
8110919c:	df000304 	addi	fp,sp,12
811091a0:	e13fff15 	stw	r4,-4(fp)
		TNFee *pxNFee;

		pxNFee = pxNFeeI;
811091a4:	e0bfff17 	ldw	r2,-4(fp)
811091a8:	e0bffe15 	stw	r2,-8(fp)

		printf("=================================NFEE %hhu=====================================\n", pxNFee->ucId);
811091ac:	e0bffe17 	ldw	r2,-8(fp)
811091b0:	10800003 	ldbu	r2,0(r2)
811091b4:	10803fcc 	andi	r2,r2,255
811091b8:	100b883a 	mov	r5,r2
811091bc:	01204534 	movhi	r4,33044
811091c0:	213d0604 	addi	r4,r4,-3048
811091c4:	11149100 	call	81114910 <printf>
		printf("\n");
811091c8:	01000284 	movi	r4,10
811091cc:	1114ad40 	call	81114ad4 <putchar>
		printf("NFEE %hhu CCD infos: \n", pxNFee->ucId);
811091d0:	e0bffe17 	ldw	r2,-8(fp)
811091d4:	10800003 	ldbu	r2,0(r2)
811091d8:	10803fcc 	andi	r2,r2,255
811091dc:	100b883a 	mov	r5,r2
811091e0:	01204534 	movhi	r4,33044
811091e4:	213d1b04 	addi	r4,r4,-2964
811091e8:	11149100 	call	81114910 <printf>
		printf("    PreScan = %hu \n", pxNFee->xCcdInfo.usiSPrescanN);
811091ec:	e0bffe17 	ldw	r2,-8(fp)
811091f0:	1080290b 	ldhu	r2,164(r2)
811091f4:	10bfffcc 	andi	r2,r2,65535
811091f8:	100b883a 	mov	r5,r2
811091fc:	01204534 	movhi	r4,33044
81109200:	213d2104 	addi	r4,r4,-2940
81109204:	11149100 	call	81114910 <printf>
		printf("    OverScan = %hu \n", pxNFee->xCcdInfo.usiSOverscanN);
81109208:	e0bffe17 	ldw	r2,-8(fp)
8110920c:	1080298b 	ldhu	r2,166(r2)
81109210:	10bfffcc 	andi	r2,r2,65535
81109214:	100b883a 	mov	r5,r2
81109218:	01204534 	movhi	r4,33044
8110921c:	213d2604 	addi	r4,r4,-2920
81109220:	11149100 	call	81114910 <printf>
		printf("    OLN = %hu \n", pxNFee->xCcdInfo.usiOLN);
81109224:	e0bffe17 	ldw	r2,-8(fp)
81109228:	10802a0b 	ldhu	r2,168(r2)
8110922c:	10bfffcc 	andi	r2,r2,65535
81109230:	100b883a 	mov	r5,r2
81109234:	01204534 	movhi	r4,33044
81109238:	213d2c04 	addi	r4,r4,-2896
8110923c:	11149100 	call	81114910 <printf>
		printf("    Half Width = %hu \n", pxNFee->xCcdInfo.usiHalfWidth);
81109240:	e0bffe17 	ldw	r2,-8(fp)
81109244:	10802a8b 	ldhu	r2,170(r2)
81109248:	10bfffcc 	andi	r2,r2,65535
8110924c:	100b883a 	mov	r5,r2
81109250:	01204534 	movhi	r4,33044
81109254:	213d3004 	addi	r4,r4,-2880
81109258:	11149100 	call	81114910 <printf>
		printf("    Height = %hu \n", pxNFee->xCcdInfo.usiHeight);
8110925c:	e0bffe17 	ldw	r2,-8(fp)
81109260:	10802b0b 	ldhu	r2,172(r2)
81109264:	10bfffcc 	andi	r2,r2,65535
81109268:	100b883a 	mov	r5,r2
8110926c:	01204534 	movhi	r4,33044
81109270:	213d3604 	addi	r4,r4,-2856
81109274:	11149100 	call	81114910 <printf>
		printf("\n");
81109278:	01000284 	movi	r4,10
8110927c:	1114ad40 	call	81114ad4 <putchar>
		printf("NFEE %hhu Control: \n", pxNFee->ucId);
81109280:	e0bffe17 	ldw	r2,-8(fp)
81109284:	10800003 	ldbu	r2,0(r2)
81109288:	10803fcc 	andi	r2,r2,255
8110928c:	100b883a 	mov	r5,r2
81109290:	01204534 	movhi	r4,33044
81109294:	213d3b04 	addi	r4,r4,-2836
81109298:	11149100 	call	81114910 <printf>
		printf("    NFEE State 	= %hu \n", pxNFee->xControl.eMode);
8110929c:	e0bffe17 	ldw	r2,-8(fp)
811092a0:	10802717 	ldw	r2,156(r2)
811092a4:	100b883a 	mov	r5,r2
811092a8:	01204534 	movhi	r4,33044
811092ac:	213d4104 	addi	r4,r4,-2812
811092b0:	11149100 	call	81114910 <printf>
		printf("    NFEE Enable? = %hu \n", pxNFee->xControl.bEnabled);
811092b4:	e0bffe17 	ldw	r2,-8(fp)
811092b8:	10802117 	ldw	r2,132(r2)
811092bc:	100b883a 	mov	r5,r2
811092c0:	01204534 	movhi	r4,33044
811092c4:	213d4704 	addi	r4,r4,-2788
811092c8:	11149100 	call	81114910 <printf>
		printf("    Using DMA?   = %hu \n", pxNFee->xControl.bUsingDMA);
811092cc:	e0bffe17 	ldw	r2,-8(fp)
811092d0:	10802217 	ldw	r2,136(r2)
811092d4:	100b883a 	mov	r5,r2
811092d8:	01204534 	movhi	r4,33044
811092dc:	213d4e04 	addi	r4,r4,-2760
811092e0:	11149100 	call	81114910 <printf>
		printf("    Logging?     = %hu \n", pxNFee->xControl.bLogging);
811092e4:	e0bffe17 	ldw	r2,-8(fp)
811092e8:	10802317 	ldw	r2,140(r2)
811092ec:	100b883a 	mov	r5,r2
811092f0:	01204534 	movhi	r4,33044
811092f4:	213d5504 	addi	r4,r4,-2732
811092f8:	11149100 	call	81114910 <printf>
		printf("    Echoing?     = %hu \n", pxNFee->xControl.bEchoing);
811092fc:	e0bffe17 	ldw	r2,-8(fp)
81109300:	10802417 	ldw	r2,144(r2)
81109304:	100b883a 	mov	r5,r2
81109308:	01204534 	movhi	r4,33044
8110930c:	213d5c04 	addi	r4,r4,-2704
81109310:	11149100 	call	81114910 <printf>
		printf("    Channel Enable? = %hu \n", pxNFee->xControl.bChannelEnable);
81109314:	e0bffe17 	ldw	r2,-8(fp)
81109318:	10802517 	ldw	r2,148(r2)
8110931c:	100b883a 	mov	r5,r2
81109320:	01204534 	movhi	r4,33044
81109324:	213d6304 	addi	r4,r4,-2676
81109328:	11149100 	call	81114910 <printf>
		printf("    Readout order = [ %hhu , %hhu , %hhu , %hhu ] \n", pxNFee->xControl.ucROutOrder[0], pxNFee->xControl.ucROutOrder[1], pxNFee->xControl.ucROutOrder[2], pxNFee->xControl.ucROutOrder[3]);
8110932c:	e0bffe17 	ldw	r2,-8(fp)
81109330:	10802603 	ldbu	r2,152(r2)
81109334:	10c03fcc 	andi	r3,r2,255
81109338:	e0bffe17 	ldw	r2,-8(fp)
8110933c:	10802643 	ldbu	r2,153(r2)
81109340:	11003fcc 	andi	r4,r2,255
81109344:	e0bffe17 	ldw	r2,-8(fp)
81109348:	10802683 	ldbu	r2,154(r2)
8110934c:	11403fcc 	andi	r5,r2,255
81109350:	e0bffe17 	ldw	r2,-8(fp)
81109354:	108026c3 	ldbu	r2,155(r2)
81109358:	10803fcc 	andi	r2,r2,255
8110935c:	d8800015 	stw	r2,0(sp)
81109360:	280f883a 	mov	r7,r5
81109364:	200d883a 	mov	r6,r4
81109368:	180b883a 	mov	r5,r3
8110936c:	01204534 	movhi	r4,33044
81109370:	213d6a04 	addi	r4,r4,-2648
81109374:	11149100 	call	81114910 <printf>
		printf("    CCD Side = = %hu \n", pxNFee->xControl.eSide);
81109378:	e0bffe17 	ldw	r2,-8(fp)
8110937c:	10802817 	ldw	r2,160(r2)
81109380:	100b883a 	mov	r5,r2
81109384:	01204534 	movhi	r4,33044
81109388:	213d7704 	addi	r4,r4,-2596
8110938c:	11149100 	call	81114910 <printf>
		printf("\n\n");
81109390:	01204534 	movhi	r4,33044
81109394:	213e1004 	addi	r4,r4,-1984
81109398:	1114bb40 	call	81114bb4 <puts>
		printf("NFEE %hhu MEMORY MAP: \n", pxNFee->ucId);
8110939c:	e0bffe17 	ldw	r2,-8(fp)
811093a0:	10800003 	ldbu	r2,0(r2)
811093a4:	10803fcc 	andi	r2,r2,255
811093a8:	100b883a 	mov	r5,r2
811093ac:	01204534 	movhi	r4,33044
811093b0:	213d7e04 	addi	r4,r4,-2568
811093b4:	11149100 	call	81114910 <printf>
		printf("    General Info: \n");
811093b8:	01204534 	movhi	r4,33044
811093bc:	213e1104 	addi	r4,r4,-1980
811093c0:	1114bb40 	call	81114bb4 <puts>
		printf("        Offset root 	= %lu \n", pxNFee->xMemMap.ulOffsetRoot);
811093c4:	e0bffe17 	ldw	r2,-8(fp)
811093c8:	10800117 	ldw	r2,4(r2)
811093cc:	100b883a 	mov	r5,r2
811093d0:	01204534 	movhi	r4,33044
811093d4:	213d8904 	addi	r4,r4,-2524
811093d8:	11149100 	call	81114910 <printf>
		printf("        Total Bytes 	= %lu \n", pxNFee->xMemMap.ulTotalBytes);
811093dc:	e0bffe17 	ldw	r2,-8(fp)
811093e0:	10800217 	ldw	r2,8(r2)
811093e4:	100b883a 	mov	r5,r2
811093e8:	01204534 	movhi	r4,33044
811093ec:	213d9104 	addi	r4,r4,-2492
811093f0:	11149100 	call	81114910 <printf>
		printf("        LUT ADDR 	= %lu \n", pxNFee->xMemMap.ulLUTAddr);
811093f4:	e0bffe17 	ldw	r2,-8(fp)
811093f8:	10800317 	ldw	r2,12(r2)
811093fc:	100b883a 	mov	r5,r2
81109400:	01204534 	movhi	r4,33044
81109404:	213d9904 	addi	r4,r4,-2460
81109408:	11149100 	call	81114910 <printf>
		printf("    Common to all CCDs: \n");
8110940c:	01204534 	movhi	r4,33044
81109410:	213e1604 	addi	r4,r4,-1960
81109414:	1114bb40 	call	81114bb4 <puts>
		printf("        Total Bytes 	= %hu \n", pxNFee->xMemMap.xCommon.usiTotalBytes);
81109418:	e0bffe17 	ldw	r2,-8(fp)
8110941c:	10800517 	ldw	r2,20(r2)
81109420:	100b883a 	mov	r5,r2
81109424:	01204534 	movhi	r4,33044
81109428:	213da704 	addi	r4,r4,-2404
8110942c:	11149100 	call	81114910 <printf>
		printf("        Total of Blocks = %hu \n", pxNFee->xMemMap.xCommon.usiNTotalBlocks);
81109430:	e0bffe17 	ldw	r2,-8(fp)
81109434:	10800417 	ldw	r2,16(r2)
81109438:	100b883a 	mov	r5,r2
8110943c:	01204534 	movhi	r4,33044
81109440:	213daf04 	addi	r4,r4,-2372
81109444:	11149100 	call	81114910 <printf>
		printf("        Padding Bytes 	= %hhu\n", pxNFee->xMemMap.xCommon.ucPaddingBytes);
81109448:	e0bffe17 	ldw	r2,-8(fp)
8110944c:	10800603 	ldbu	r2,24(r2)
81109450:	10803fcc 	andi	r2,r2,255
81109454:	100b883a 	mov	r5,r2
81109458:	01204534 	movhi	r4,33044
8110945c:	213db704 	addi	r4,r4,-2340
81109460:	11149100 	call	81114910 <printf>
		printf("        Padding MASK 	= %llu\n", pxNFee->xMemMap.xCommon.ucPaddingMask.ullWord);
81109464:	e13ffe17 	ldw	r4,-8(fp)
81109468:	20800717 	ldw	r2,28(r4)
8110946c:	20c00817 	ldw	r3,32(r4)
81109470:	100b883a 	mov	r5,r2
81109474:	180d883a 	mov	r6,r3
81109478:	01204534 	movhi	r4,33044
8110947c:	213dbf04 	addi	r4,r4,-2308
81109480:	11149100 	call	81114910 <printf>
		printf("\n");
81109484:	01000284 	movi	r4,10
81109488:	1114ad40 	call	81114ad4 <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 0 , pxNFee->ucId);
8110948c:	e0bffe17 	ldw	r2,-8(fp)
81109490:	10800003 	ldbu	r2,0(r2)
81109494:	10803fcc 	andi	r2,r2,255
81109498:	100d883a 	mov	r6,r2
8110949c:	000b883a 	mov	r5,zero
811094a0:	01204534 	movhi	r4,33044
811094a4:	213dc704 	addi	r4,r4,-2276
811094a8:	11149100 	call	81114910 <printf>
		printf("        Left side \n");
811094ac:	01204534 	movhi	r4,33044
811094b0:	213e1d04 	addi	r4,r4,-1932
811094b4:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulOffsetAddr);
811094b8:	e0bffe17 	ldw	r2,-8(fp)
811094bc:	10800917 	ldw	r2,36(r2)
811094c0:	100b883a 	mov	r5,r2
811094c4:	01204534 	movhi	r4,33044
811094c8:	213dd604 	addi	r4,r4,-2216
811094cc:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulBlockI);
811094d0:	e0bffe17 	ldw	r2,-8(fp)
811094d4:	10800a17 	ldw	r2,40(r2)
811094d8:	100b883a 	mov	r5,r2
811094dc:	01204534 	movhi	r4,33044
811094e0:	213ddf04 	addi	r4,r4,-2180
811094e4:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulAddrI);
811094e8:	e0bffe17 	ldw	r2,-8(fp)
811094ec:	10800b17 	ldw	r2,44(r2)
811094f0:	100b883a 	mov	r5,r2
811094f4:	01204534 	movhi	r4,33044
811094f8:	213dea04 	addi	r4,r4,-2136
811094fc:	11149100 	call	81114910 <printf>
		printf("        Right side \n");
81109500:	01204534 	movhi	r4,33044
81109504:	213e2204 	addi	r4,r4,-1912
81109508:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulOffsetAddr);
8110950c:	e0bffe17 	ldw	r2,-8(fp)
81109510:	10800c17 	ldw	r2,48(r2)
81109514:	100b883a 	mov	r5,r2
81109518:	01204534 	movhi	r4,33044
8110951c:	213dd604 	addi	r4,r4,-2216
81109520:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulBlockI);
81109524:	e0bffe17 	ldw	r2,-8(fp)
81109528:	10800d17 	ldw	r2,52(r2)
8110952c:	100b883a 	mov	r5,r2
81109530:	01204534 	movhi	r4,33044
81109534:	213ddf04 	addi	r4,r4,-2180
81109538:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulAddrI);
8110953c:	e0bffe17 	ldw	r2,-8(fp)
81109540:	10800e17 	ldw	r2,56(r2)
81109544:	100b883a 	mov	r5,r2
81109548:	01204534 	movhi	r4,33044
8110954c:	213dea04 	addi	r4,r4,-2136
81109550:	11149100 	call	81114910 <printf>
		printf("\n");
81109554:	01000284 	movi	r4,10
81109558:	1114ad40 	call	81114ad4 <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 1 , pxNFee->ucId);
8110955c:	e0bffe17 	ldw	r2,-8(fp)
81109560:	10800003 	ldbu	r2,0(r2)
81109564:	10803fcc 	andi	r2,r2,255
81109568:	100d883a 	mov	r6,r2
8110956c:	01400044 	movi	r5,1
81109570:	01204534 	movhi	r4,33044
81109574:	213dc704 	addi	r4,r4,-2276
81109578:	11149100 	call	81114910 <printf>
		printf("        Left side \n");
8110957c:	01204534 	movhi	r4,33044
81109580:	213e1d04 	addi	r4,r4,-1932
81109584:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulOffsetAddr);
81109588:	e0bffe17 	ldw	r2,-8(fp)
8110958c:	10800f17 	ldw	r2,60(r2)
81109590:	100b883a 	mov	r5,r2
81109594:	01204534 	movhi	r4,33044
81109598:	213dd604 	addi	r4,r4,-2216
8110959c:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulBlockI);
811095a0:	e0bffe17 	ldw	r2,-8(fp)
811095a4:	10801017 	ldw	r2,64(r2)
811095a8:	100b883a 	mov	r5,r2
811095ac:	01204534 	movhi	r4,33044
811095b0:	213ddf04 	addi	r4,r4,-2180
811095b4:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulAddrI);
811095b8:	e0bffe17 	ldw	r2,-8(fp)
811095bc:	10801117 	ldw	r2,68(r2)
811095c0:	100b883a 	mov	r5,r2
811095c4:	01204534 	movhi	r4,33044
811095c8:	213dea04 	addi	r4,r4,-2136
811095cc:	11149100 	call	81114910 <printf>
		printf("        Right side \n");
811095d0:	01204534 	movhi	r4,33044
811095d4:	213e2204 	addi	r4,r4,-1912
811095d8:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulOffsetAddr);
811095dc:	e0bffe17 	ldw	r2,-8(fp)
811095e0:	10801217 	ldw	r2,72(r2)
811095e4:	100b883a 	mov	r5,r2
811095e8:	01204534 	movhi	r4,33044
811095ec:	213dd604 	addi	r4,r4,-2216
811095f0:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulBlockI);
811095f4:	e0bffe17 	ldw	r2,-8(fp)
811095f8:	10801317 	ldw	r2,76(r2)
811095fc:	100b883a 	mov	r5,r2
81109600:	01204534 	movhi	r4,33044
81109604:	213ddf04 	addi	r4,r4,-2180
81109608:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulAddrI);
8110960c:	e0bffe17 	ldw	r2,-8(fp)
81109610:	10801417 	ldw	r2,80(r2)
81109614:	100b883a 	mov	r5,r2
81109618:	01204534 	movhi	r4,33044
8110961c:	213dea04 	addi	r4,r4,-2136
81109620:	11149100 	call	81114910 <printf>
		printf("\n");
81109624:	01000284 	movi	r4,10
81109628:	1114ad40 	call	81114ad4 <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 2 , pxNFee->ucId);
8110962c:	e0bffe17 	ldw	r2,-8(fp)
81109630:	10800003 	ldbu	r2,0(r2)
81109634:	10803fcc 	andi	r2,r2,255
81109638:	100d883a 	mov	r6,r2
8110963c:	01400084 	movi	r5,2
81109640:	01204534 	movhi	r4,33044
81109644:	213dc704 	addi	r4,r4,-2276
81109648:	11149100 	call	81114910 <printf>
		printf("        Left side \n");
8110964c:	01204534 	movhi	r4,33044
81109650:	213e1d04 	addi	r4,r4,-1932
81109654:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulOffsetAddr);
81109658:	e0bffe17 	ldw	r2,-8(fp)
8110965c:	10801517 	ldw	r2,84(r2)
81109660:	100b883a 	mov	r5,r2
81109664:	01204534 	movhi	r4,33044
81109668:	213dd604 	addi	r4,r4,-2216
8110966c:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulBlockI);
81109670:	e0bffe17 	ldw	r2,-8(fp)
81109674:	10801617 	ldw	r2,88(r2)
81109678:	100b883a 	mov	r5,r2
8110967c:	01204534 	movhi	r4,33044
81109680:	213ddf04 	addi	r4,r4,-2180
81109684:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulAddrI);
81109688:	e0bffe17 	ldw	r2,-8(fp)
8110968c:	10801717 	ldw	r2,92(r2)
81109690:	100b883a 	mov	r5,r2
81109694:	01204534 	movhi	r4,33044
81109698:	213dea04 	addi	r4,r4,-2136
8110969c:	11149100 	call	81114910 <printf>
		printf("        Right side \n");
811096a0:	01204534 	movhi	r4,33044
811096a4:	213e2204 	addi	r4,r4,-1912
811096a8:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulOffsetAddr);
811096ac:	e0bffe17 	ldw	r2,-8(fp)
811096b0:	10801817 	ldw	r2,96(r2)
811096b4:	100b883a 	mov	r5,r2
811096b8:	01204534 	movhi	r4,33044
811096bc:	213dd604 	addi	r4,r4,-2216
811096c0:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulBlockI);
811096c4:	e0bffe17 	ldw	r2,-8(fp)
811096c8:	10801917 	ldw	r2,100(r2)
811096cc:	100b883a 	mov	r5,r2
811096d0:	01204534 	movhi	r4,33044
811096d4:	213ddf04 	addi	r4,r4,-2180
811096d8:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulAddrI);
811096dc:	e0bffe17 	ldw	r2,-8(fp)
811096e0:	10801a17 	ldw	r2,104(r2)
811096e4:	100b883a 	mov	r5,r2
811096e8:	01204534 	movhi	r4,33044
811096ec:	213dea04 	addi	r4,r4,-2136
811096f0:	11149100 	call	81114910 <printf>
		printf("\n");
811096f4:	01000284 	movi	r4,10
811096f8:	1114ad40 	call	81114ad4 <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 3 , pxNFee->ucId);
811096fc:	e0bffe17 	ldw	r2,-8(fp)
81109700:	10800003 	ldbu	r2,0(r2)
81109704:	10803fcc 	andi	r2,r2,255
81109708:	100d883a 	mov	r6,r2
8110970c:	014000c4 	movi	r5,3
81109710:	01204534 	movhi	r4,33044
81109714:	213dc704 	addi	r4,r4,-2276
81109718:	11149100 	call	81114910 <printf>
		printf("        Left side \n");
8110971c:	01204534 	movhi	r4,33044
81109720:	213e1d04 	addi	r4,r4,-1932
81109724:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulOffsetAddr);
81109728:	e0bffe17 	ldw	r2,-8(fp)
8110972c:	10801b17 	ldw	r2,108(r2)
81109730:	100b883a 	mov	r5,r2
81109734:	01204534 	movhi	r4,33044
81109738:	213dd604 	addi	r4,r4,-2216
8110973c:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulBlockI);
81109740:	e0bffe17 	ldw	r2,-8(fp)
81109744:	10801c17 	ldw	r2,112(r2)
81109748:	100b883a 	mov	r5,r2
8110974c:	01204534 	movhi	r4,33044
81109750:	213ddf04 	addi	r4,r4,-2180
81109754:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulAddrI);
81109758:	e0bffe17 	ldw	r2,-8(fp)
8110975c:	10801d17 	ldw	r2,116(r2)
81109760:	100b883a 	mov	r5,r2
81109764:	01204534 	movhi	r4,33044
81109768:	213dea04 	addi	r4,r4,-2136
8110976c:	11149100 	call	81114910 <printf>
		printf("        Right side \n");
81109770:	01204534 	movhi	r4,33044
81109774:	213e2204 	addi	r4,r4,-1912
81109778:	1114bb40 	call	81114bb4 <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulOffsetAddr);
8110977c:	e0bffe17 	ldw	r2,-8(fp)
81109780:	10801e17 	ldw	r2,120(r2)
81109784:	100b883a 	mov	r5,r2
81109788:	01204534 	movhi	r4,33044
8110978c:	213dd604 	addi	r4,r4,-2216
81109790:	11149100 	call	81114910 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulBlockI);
81109794:	e0bffe17 	ldw	r2,-8(fp)
81109798:	10801f17 	ldw	r2,124(r2)
8110979c:	100b883a 	mov	r5,r2
811097a0:	01204534 	movhi	r4,33044
811097a4:	213ddf04 	addi	r4,r4,-2180
811097a8:	11149100 	call	81114910 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulAddrI);
811097ac:	e0bffe17 	ldw	r2,-8(fp)
811097b0:	10802017 	ldw	r2,128(r2)
811097b4:	100b883a 	mov	r5,r2
811097b8:	01204534 	movhi	r4,33044
811097bc:	213dea04 	addi	r4,r4,-2136
811097c0:	11149100 	call	81114910 <printf>
		printf("\n");
811097c4:	01000284 	movi	r4,10
811097c8:	1114ad40 	call	81114ad4 <putchar>
		printf("==============================================================================\n");
811097cc:	01204534 	movhi	r4,33044
811097d0:	213e2704 	addi	r4,r4,-1892
811097d4:	1114bb40 	call	81114bb4 <puts>
		printf("==============================================================================\n");
811097d8:	01204534 	movhi	r4,33044
811097dc:	213e2704 	addi	r4,r4,-1892
811097e0:	1114bb40 	call	81114bb4 <puts>
		printf("\n");
811097e4:	01000284 	movi	r4,10
811097e8:	1114ad40 	call	81114ad4 <putchar>
		printf("\n");
811097ec:	01000284 	movi	r4,10
811097f0:	1114ad40 	call	81114ad4 <putchar>
		printf("\n");
811097f4:	01000284 	movi	r4,10
811097f8:	1114ad40 	call	81114ad4 <putchar>
		printf("\n");
811097fc:	01000284 	movi	r4,10
81109800:	1114ad40 	call	81114ad4 <putchar>
	}
81109804:	0001883a 	nop
81109808:	e037883a 	mov	sp,fp
8110980c:	dfc00117 	ldw	ra,4(sp)
81109810:	df000017 	ldw	fp,0(sp)
81109814:	dec00204 	addi	sp,sp,8
81109818:	f800283a 	ret

8110981c <vInAckHandlerTaskV2>:


#include "in_ack_handler_task.h"


void vInAckHandlerTaskV2(void *task_data) {
8110981c:	defff604 	addi	sp,sp,-40
81109820:	de00012e 	bgeu	sp,et,81109828 <vInAckHandlerTaskV2+0xc>
81109824:	003b68fa 	trap	3
81109828:	dfc00915 	stw	ra,36(sp)
8110982c:	df000815 	stw	fp,32(sp)
81109830:	df000804 	addi	fp,sp,32
81109834:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
81109838:	e03ff815 	stw	zero,-32(fp)
    bool bFinished32 = FALSE;
8110983c:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished64 = FALSE;
81109840:	e03ffc15 	stw	zero,-16(fp)
    bool bFinished128 = FALSE;
81109844:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucHashVerification = 0;
81109848:	e03ffa85 	stb	zero,-22(fp)
    unsigned char ucCountRetries = 0;
8110984c:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0;
81109850:	e03ffa45 	stb	zero,-23(fp)

    #ifdef DEBUG_ON
        debug(fp,"In Ack Handler Task. (Task on)\n");
81109854:	d0a05017 	ldw	r2,-32448(gp)
81109858:	100f883a 	mov	r7,r2
8110985c:	018007c4 	movi	r6,31
81109860:	01400044 	movi	r5,1
81109864:	01204534 	movhi	r4,33044
81109868:	213e3b04 	addi	r4,r4,-1812
8110986c:	1113be40 	call	81113be4 <fwrite>
    #endif

	eReceiverAckState = sRAConfiguring;
81109870:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eReceiverAckState) {
81109874:	e0bff917 	ldw	r2,-28(fp)
81109878:	10c00060 	cmpeqi	r3,r2,1
8110987c:	1800071e 	bne	r3,zero,8110989c <vInAckHandlerTaskV2+0x80>
81109880:	0080032e 	bgeu	zero,r2,81109890 <vInAckHandlerTaskV2+0x74>
81109884:	108000a0 	cmpeqi	r2,r2,2
81109888:	10004a1e 	bne	r2,zero,811099b4 <vInAckHandlerTaskV2+0x198>
8110988c:	0000ac06 	br	81109b40 <vInAckHandlerTaskV2+0x324>
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81109890:	00800044 	movi	r2,1
81109894:	e0bff915 	stw	r2,-28(fp)
				break;
81109898:	0000b306 	br	81109b68 <vInAckHandlerTaskV2+0x34c>
            case sRAGettingACK:
                eReceiverAckState = sRAGettingACK;
8110989c:	00800044 	movi	r2,1
811098a0:	e0bff915 	stw	r2,-28(fp)
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
811098a4:	d0a05417 	ldw	r2,-32432(gp)
811098a8:	e0fffe04 	addi	r3,fp,-8
811098ac:	180d883a 	mov	r6,r3
811098b0:	000b883a 	mov	r5,zero
811098b4:	1009883a 	mov	r4,r2
811098b8:	11317080 	call	81131708 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811098bc:	e0bffe03 	ldbu	r2,-8(fp)
811098c0:	10803fcc 	andi	r2,r2,255
811098c4:	1000391e 	bne	r2,zero,811099ac <vInAckHandlerTaskV2+0x190>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811098c8:	d0a05317 	ldw	r2,-32436(gp)
811098cc:	e0fffe04 	addi	r3,fp,-8
811098d0:	180d883a 	mov	r6,r3
811098d4:	000b883a 	mov	r5,zero
811098d8:	1009883a 	mov	r4,r2
811098dc:	112f6fc0 	call	8112f6fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811098e0:	e0bffe03 	ldbu	r2,-8(fp)
811098e4:	10803fcc 	andi	r2,r2,255
811098e8:	10002b1e 	bne	r2,zero,81109998 <vInAckHandlerTaskV2+0x17c>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811098ec:	e03ffa45 	stb	zero,-23(fp)
811098f0:	00002206 	br	8110997c <vInAckHandlerTaskV2+0x160>
                        {
                            if ( xReceivedACK[i].cType != 0 ) {
811098f4:	e0fffa43 	ldbu	r3,-23(fp)
811098f8:	00a04574 	movhi	r2,33045
811098fc:	10be9e04 	addi	r2,r2,-1416
81109900:	18c7883a 	add	r3,r3,r3
81109904:	18c7883a 	add	r3,r3,r3
81109908:	10c5883a 	add	r2,r2,r3
8110990c:	10800003 	ldbu	r2,0(r2)
81109910:	10803fcc 	andi	r2,r2,255
81109914:	1080201c 	xori	r2,r2,128
81109918:	10bfe004 	addi	r2,r2,-128
8110991c:	10001426 	beq	r2,zero,81109970 <vInAckHandlerTaskV2+0x154>

                                /*  Nack don't get here */
                                xRAckLocal = xReceivedACK[i];
81109920:	e0fffa43 	ldbu	r3,-23(fp)
81109924:	00a04574 	movhi	r2,33045
81109928:	10be9e04 	addi	r2,r2,-1416
8110992c:	18c7883a 	add	r3,r3,r3
81109930:	18c7883a 	add	r3,r3,r3
81109934:	10c5883a 	add	r2,r2,r3
81109938:	10c0000b 	ldhu	r3,0(r2)
8110993c:	d0e0488d 	sth	r3,-32478(gp)
81109940:	1080008b 	ldhu	r2,2(r2)
81109944:	d0a0490d 	sth	r2,-32476(gp)
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81109948:	e0fffa43 	ldbu	r3,-23(fp)
8110994c:	00a04574 	movhi	r2,33045
81109950:	10be9e04 	addi	r2,r2,-1416
81109954:	18c7883a 	add	r3,r3,r3
81109958:	18c7883a 	add	r3,r3,r3
8110995c:	10c5883a 	add	r2,r2,r3
81109960:	10000005 	stb	zero,0(r2)
                                eReceiverAckState = sRACleanningBuffer;
81109964:	00800084 	movi	r2,2
81109968:	e0bff915 	stw	r2,-28(fp)
                                break;                                
8110996c:	00000606 	br	81109988 <vInAckHandlerTaskV2+0x16c>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
81109970:	e0bffa43 	ldbu	r2,-23(fp)
81109974:	10800044 	addi	r2,r2,1
81109978:	e0bffa45 	stb	r2,-23(fp)
8110997c:	e0bffa43 	ldbu	r2,-23(fp)
81109980:	108001b0 	cmpltui	r2,r2,6
81109984:	103fdb1e 	bne	r2,zero,811098f4 <__reset+0xfb0e98f4>
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                eReceiverAckState = sRACleanningBuffer;
                                break;                                
                            }
                        }
                        OSMutexPost(xMutexReceivedACK);
81109988:	d0a05317 	ldw	r2,-32436(gp)
8110998c:	1009883a 	mov	r4,r2
81109990:	112fca00 	call	8112fca0 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81109994:	00007406 	br	81109b68 <vInAckHandlerTaskV2+0x34c>
                        OSMutexPost(xMutexReceivedACK);

                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                    	OSSemPost(xSemCountReceivedACK);
81109998:	d0a05417 	ldw	r2,-32432(gp)
8110999c:	1009883a 	mov	r4,r2
811099a0:	1131a900 	call	81131a90 <OSSemPost>
                    	vFailGetMutexReceiverTask();
811099a4:	110f8940 	call	8110f894 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811099a8:	00006f06 	br	81109b68 <vInAckHandlerTaskV2+0x34c>
                    	vFailGetMutexReceiverTask();
                    }
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811099ac:	110f82c0 	call	8110f82c <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811099b0:	00006d06 	br	81109b68 <vInAckHandlerTaskV2+0x34c>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */
                
                ucHashVerification = 0;
811099b4:	e03ffa85 	stb	zero,-22(fp)
                ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
811099b8:	d0a05683 	ldbu	r2,-32422(gp)
811099bc:	10803fcc 	andi	r2,r2,255
811099c0:	10800218 	cmpnei	r2,r2,8
811099c4:	1000021e 	bne	r2,zero,811099d0 <vInAckHandlerTaskV2+0x1b4>
811099c8:	00c00104 	movi	r3,4
811099cc:	00000106 	br	811099d4 <vInAckHandlerTaskV2+0x1b8>
811099d0:	0007883a 	mov	r3,zero
811099d4:	d0a05f03 	ldbu	r2,-32388(gp)
811099d8:	10803fcc 	andi	r2,r2,255
811099dc:	10800218 	cmpnei	r2,r2,8
811099e0:	1000021e 	bne	r2,zero,811099ec <vInAckHandlerTaskV2+0x1d0>
811099e4:	00800084 	movi	r2,2
811099e8:	00000106 	br	811099f0 <vInAckHandlerTaskV2+0x1d4>
811099ec:	0005883a 	mov	r2,zero
811099f0:	1884b03a 	or	r2,r3,r2
811099f4:	1007883a 	mov	r3,r2
811099f8:	d0a05f43 	ldbu	r2,-32387(gp)
811099fc:	10803fcc 	andi	r2,r2,255
81109a00:	108001a0 	cmpeqi	r2,r2,6
81109a04:	1884b03a 	or	r2,r3,r2
81109a08:	1007883a 	mov	r3,r2
81109a0c:	e0bffa83 	ldbu	r2,-22(fp)
81109a10:	1884b03a 	or	r2,r3,r2
81109a14:	e0bffa85 	stb	r2,-22(fp)

                bFound = FALSE;
81109a18:	e03ff815 	stw	zero,-32(fp)
                bFinished32=FALSE;
81109a1c:	e03ffb15 	stw	zero,-20(fp)
                bFinished64=FALSE;
81109a20:	e03ffc15 	stw	zero,-16(fp)
                bFinished128=FALSE;
81109a24:	e03ffd15 	stw	zero,-12(fp)
                ucCountRetries = 0;
81109a28:	e03ffa05 	stb	zero,-24(fp)
                do
                {
                    ucCountRetries++;
81109a2c:	e0bffa03 	ldbu	r2,-24(fp)
81109a30:	10800044 	addi	r2,r2,1
81109a34:	e0bffa05 	stb	r2,-24(fp)

                    /* There are any spot used in the xBuffer128? */
                    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
81109a38:	e0bffa83 	ldbu	r2,-22(fp)
81109a3c:	1080004c 	andi	r2,r2,1
81109a40:	10803fcc 	andi	r2,r2,255
81109a44:	1000061e 	bne	r2,zero,81109a60 <vInAckHandlerTaskV2+0x244>
                        bFound = bCheckInAck128( &xRAckLocal, &bFinished128  );
81109a48:	e0bffd04 	addi	r2,fp,-12
81109a4c:	100b883a 	mov	r5,r2
81109a50:	d1204884 	addi	r4,gp,-32478
81109a54:	1109b6c0 	call	81109b6c <bCheckInAck128>
81109a58:	e0bff815 	stw	r2,-32(fp)
81109a5c:	00000206 	br	81109a68 <vInAckHandlerTaskV2+0x24c>
                    else
                        bFinished128 = TRUE;
81109a60:	00800044 	movi	r2,1
81109a64:	e0bffd15 	stw	r2,-12(fp)

                    /* There are any spot used in the xBuffer64? */
                    if ( (0b00000010 != (0b00000010 & ucHashVerification )) && (bFound ==FALSE ) )
81109a68:	e0bffa83 	ldbu	r2,-22(fp)
81109a6c:	1080008c 	andi	r2,r2,2
81109a70:	10803fcc 	andi	r2,r2,255
81109a74:	1000081e 	bne	r2,zero,81109a98 <vInAckHandlerTaskV2+0x27c>
81109a78:	e0bff817 	ldw	r2,-32(fp)
81109a7c:	1000061e 	bne	r2,zero,81109a98 <vInAckHandlerTaskV2+0x27c>
                        bFound = bCheckInAck64( &xRAckLocal, &bFinished64 );
81109a80:	e0bffc04 	addi	r2,fp,-16
81109a84:	100b883a 	mov	r5,r2
81109a88:	d1204884 	addi	r4,gp,-32478
81109a8c:	1109cb40 	call	81109cb4 <bCheckInAck64>
81109a90:	e0bff815 	stw	r2,-32(fp)
81109a94:	00000206 	br	81109aa0 <vInAckHandlerTaskV2+0x284>
                    else
                        bFinished64 = TRUE;
81109a98:	00800044 	movi	r2,1
81109a9c:	e0bffc15 	stw	r2,-16(fp)

                    /* There are any spot used in the xBuffer32? */
                    if ( (0b00000100 != (0b00000100 & ucHashVerification ) ) && (bFound ==FALSE ) )
81109aa0:	e0bffa83 	ldbu	r2,-22(fp)
81109aa4:	1080010c 	andi	r2,r2,4
81109aa8:	10803fcc 	andi	r2,r2,255
81109aac:	1000081e 	bne	r2,zero,81109ad0 <vInAckHandlerTaskV2+0x2b4>
81109ab0:	e0bff817 	ldw	r2,-32(fp)
81109ab4:	1000061e 	bne	r2,zero,81109ad0 <vInAckHandlerTaskV2+0x2b4>
                        bFound = bCheckInAck32( &xRAckLocal, &bFinished32  );
81109ab8:	e0bffb04 	addi	r2,fp,-20
81109abc:	100b883a 	mov	r5,r2
81109ac0:	d1204884 	addi	r4,gp,-32478
81109ac4:	1109e000 	call	81109e00 <bCheckInAck32>
81109ac8:	e0bff815 	stw	r2,-32(fp)
81109acc:	00000206 	br	81109ad8 <vInAckHandlerTaskV2+0x2bc>
                    else
                        bFinished32 = TRUE;
81109ad0:	00800044 	movi	r2,1
81109ad4:	e0bffb15 	stw	r2,-20(fp)

                } while ( ((ucCountRetries++ < MAX_RETRIES_ACK_IN) && (bFound == FALSE) && ((bFinished32 == FALSE) | (bFinished64 == FALSE) | (bFinished128 == FALSE))) );
81109ad8:	e0bffa03 	ldbu	r2,-24(fp)
81109adc:	10c00044 	addi	r3,r2,1
81109ae0:	e0fffa05 	stb	r3,-24(fp)
81109ae4:	10803fcc 	andi	r2,r2,255
81109ae8:	10800ca8 	cmpgeui	r2,r2,50
81109aec:	10000e1e 	bne	r2,zero,81109b28 <vInAckHandlerTaskV2+0x30c>
81109af0:	e0bff817 	ldw	r2,-32(fp)
81109af4:	10000c1e 	bne	r2,zero,81109b28 <vInAckHandlerTaskV2+0x30c>
81109af8:	e0bffb17 	ldw	r2,-20(fp)
81109afc:	1005003a 	cmpeq	r2,r2,zero
81109b00:	1007883a 	mov	r3,r2
81109b04:	e0bffc17 	ldw	r2,-16(fp)
81109b08:	1005003a 	cmpeq	r2,r2,zero
81109b0c:	1884b03a 	or	r2,r3,r2
81109b10:	10c03fcc 	andi	r3,r2,255
81109b14:	e0bffd17 	ldw	r2,-12(fp)
81109b18:	1005003a 	cmpeq	r2,r2,zero
81109b1c:	10803fcc 	andi	r2,r2,255
81109b20:	1884b03a 	or	r2,r3,r2
81109b24:	103fc11e 	bne	r2,zero,81109a2c <__reset+0xfb0e9a2c>
                
                if (bFound == FALSE) {
81109b28:	e0bff817 	ldw	r2,-32(fp)
81109b2c:	1000011e 	bne	r2,zero,81109b34 <vInAckHandlerTaskV2+0x318>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81109b30:	110fd500 	call	8110fd50 <vFailFoundBufferRetransmission>
                }

                eReceiverAckState = sRAGettingACK;
81109b34:	00800044 	movi	r2,1
81109b38:	e0bff915 	stw	r2,-28(fp)
				break;
81109b3c:	00000a06 	br	81109b68 <vInAckHandlerTaskV2+0x34c>
			default:
                #ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vInAckHandlerTaskV2)\n");
81109b40:	d0a05017 	ldw	r2,-32448(gp)
81109b44:	100f883a 	mov	r7,r2
81109b48:	01801144 	movi	r6,69
81109b4c:	01400044 	movi	r5,1
81109b50:	01204534 	movhi	r4,33044
81109b54:	213e4304 	addi	r4,r4,-1780
81109b58:	1113be40 	call	81113be4 <fwrite>
	            #endif
                eReceiverAckState = sRAGettingACK;
81109b5c:	00800044 	movi	r2,1
81109b60:	e0bff915 	stw	r2,-28(fp)
				break;
81109b64:	0001883a 	nop
		}
	}
81109b68:	003f4206 	br	81109874 <__reset+0xfb0e9874>

81109b6c <bCheckInAck128>:
}


bool bCheckInAck128( txReceivedACK *xRecAckL , bool *bFinished ) {
81109b6c:	defffa04 	addi	sp,sp,-24
81109b70:	de00012e 	bgeu	sp,et,81109b78 <bCheckInAck128+0xc>
81109b74:	003b68fa 	trap	3
81109b78:	dfc00515 	stw	ra,20(sp)
81109b7c:	df000415 	stw	fp,16(sp)
81109b80:	df000404 	addi	fp,sp,16
81109b84:	e13ffe15 	stw	r4,-8(fp)
81109b88:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109b8c:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109b90:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109b94:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109b98:	e0bfff17 	ldw	r2,-4(fp)
81109b9c:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer128, 5, &error_code); /* Mas wait 1 tick = 1 ms */
81109ba0:	d0a05a17 	ldw	r2,-32408(gp)
81109ba4:	e0fffd44 	addi	r3,fp,-11
81109ba8:	180d883a 	mov	r6,r3
81109bac:	01400144 	movi	r5,5
81109bb0:	1009883a 	mov	r4,r2
81109bb4:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109bb8:	e0bffd43 	ldbu	r2,-11(fp)
81109bbc:	10803fcc 	andi	r2,r2,255
81109bc0:	10000226 	beq	r2,zero,81109bcc <bCheckInAck128+0x60>
        return bFound;
81109bc4:	e0bffc17 	ldw	r2,-16(fp)
81109bc8:	00003506 	br	81109ca0 <bCheckInAck128+0x134>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81109bcc:	e03ffd05 	stb	zero,-12(fp)
81109bd0:	00002706 	br	81109c70 <bCheckInAck128+0x104>
    {
        if ( xBuffer128[ucIL].usiId == xRecAckL->usiId ) {
81109bd4:	e0fffd03 	ldbu	r3,-12(fp)
81109bd8:	00a04574 	movhi	r2,33045
81109bdc:	10b7be04 	addi	r2,r2,-8456
81109be0:	18c02324 	muli	r3,r3,140
81109be4:	10c5883a 	add	r2,r2,r3
81109be8:	10802104 	addi	r2,r2,132
81109bec:	10c0000b 	ldhu	r3,0(r2)
81109bf0:	e0bffe17 	ldw	r2,-8(fp)
81109bf4:	1080008b 	ldhu	r2,2(r2)
81109bf8:	18ffffcc 	andi	r3,r3,65535
81109bfc:	10bfffcc 	andi	r2,r2,65535
81109c00:	1880181e 	bne	r3,r2,81109c64 <bCheckInAck128+0xf8>
            bFound = TRUE;
81109c04:	00800044 	movi	r2,1
81109c08:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b128[ucIL] = FALSE;
81109c0c:	e0fffd03 	ldbu	r3,-12(fp)
81109c10:	00a04574 	movhi	r2,33045
81109c14:	10b7a804 	addi	r2,r2,-8544
81109c18:	18c7883a 	add	r3,r3,r3
81109c1c:	18c7883a 	add	r3,r3,r3
81109c20:	10c5883a 	add	r2,r2,r3
81109c24:	10000015 	stw	zero,0(r2)
            SemCount128++;
81109c28:	d0a05f43 	ldbu	r2,-32387(gp)
81109c2c:	10800044 	addi	r2,r2,1
81109c30:	d0a05f45 	stb	r2,-32387(gp)
            error_code = OSSemPost(xSemCountBuffer128);
81109c34:	d0a05117 	ldw	r2,-32444(gp)
81109c38:	1009883a 	mov	r4,r2
81109c3c:	1131a900 	call	81131a90 <OSSemPost>
81109c40:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109c44:	e0bffd43 	ldbu	r2,-11(fp)
81109c48:	10803fcc 	andi	r2,r2,255
81109c4c:	10000c26 	beq	r2,zero,81109c80 <bCheckInAck128+0x114>
                SemCount128--;
81109c50:	d0a05f43 	ldbu	r2,-32387(gp)
81109c54:	10bfffc4 	addi	r2,r2,-1
81109c58:	d0a05f45 	stb	r2,-32387(gp)
                vFailSetCountSemaphorexBuffer128();
81109c5c:	110fbb00 	call	8110fbb0 <vFailSetCountSemaphorexBuffer128>
            }
            break;
81109c60:	00000706 	br	81109c80 <bCheckInAck128+0x114>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81109c64:	e0bffd03 	ldbu	r2,-12(fp)
81109c68:	10800044 	addi	r2,r2,1
81109c6c:	e0bffd05 	stb	r2,-12(fp)
81109c70:	e0bffd03 	ldbu	r2,-12(fp)
81109c74:	108001b0 	cmpltui	r2,r2,6
81109c78:	103fd61e 	bne	r2,zero,81109bd4 <__reset+0xfb0e9bd4>
81109c7c:	00000106 	br	81109c84 <bCheckInAck128+0x118>
            error_code = OSSemPost(xSemCountBuffer128);
            if ( error_code != OS_ERR_NONE ) {
                SemCount128--;
                vFailSetCountSemaphorexBuffer128();
            }
            break;
81109c80:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81109c84:	d0a05a17 	ldw	r2,-32408(gp)
81109c88:	1009883a 	mov	r4,r2
81109c8c:	112fca00 	call	8112fca0 <OSMutexPost>
    (*bFinished) = TRUE;
81109c90:	e0bfff17 	ldw	r2,-4(fp)
81109c94:	00c00044 	movi	r3,1
81109c98:	10c00015 	stw	r3,0(r2)

    return bFound;
81109c9c:	e0bffc17 	ldw	r2,-16(fp)
}
81109ca0:	e037883a 	mov	sp,fp
81109ca4:	dfc00117 	ldw	ra,4(sp)
81109ca8:	df000017 	ldw	fp,0(sp)
81109cac:	dec00204 	addi	sp,sp,8
81109cb0:	f800283a 	ret

81109cb4 <bCheckInAck64>:


bool bCheckInAck64( txReceivedACK *xRecAckL , bool *bFinished ) {
81109cb4:	defffa04 	addi	sp,sp,-24
81109cb8:	de00012e 	bgeu	sp,et,81109cc0 <bCheckInAck64+0xc>
81109cbc:	003b68fa 	trap	3
81109cc0:	dfc00515 	stw	ra,20(sp)
81109cc4:	df000415 	stw	fp,16(sp)
81109cc8:	df000404 	addi	fp,sp,16
81109ccc:	e13ffe15 	stw	r4,-8(fp)
81109cd0:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109cd4:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109cd8:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109cdc:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109ce0:	e0bfff17 	ldw	r2,-4(fp)
81109ce4:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer64, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81109ce8:	d0a05c17 	ldw	r2,-32400(gp)
81109cec:	e0fffd44 	addi	r3,fp,-11
81109cf0:	180d883a 	mov	r6,r3
81109cf4:	01400044 	movi	r5,1
81109cf8:	1009883a 	mov	r4,r2
81109cfc:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109d00:	e0bffd43 	ldbu	r2,-11(fp)
81109d04:	10803fcc 	andi	r2,r2,255
81109d08:	10000226 	beq	r2,zero,81109d14 <bCheckInAck64+0x60>
        return bFound;
81109d0c:	e0bffc17 	ldw	r2,-16(fp)
81109d10:	00003606 	br	81109dec <bCheckInAck64+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81109d14:	e03ffd05 	stb	zero,-12(fp)
81109d18:	00002806 	br	81109dbc <bCheckInAck64+0x108>
    {
        if ( xBuffer64[ucIL].usiId == xRecAckL->usiId ) {
81109d1c:	e0fffd03 	ldbu	r3,-12(fp)
81109d20:	00a04534 	movhi	r2,33044
81109d24:	10997604 	addi	r2,r2,26072
81109d28:	18c01324 	muli	r3,r3,76
81109d2c:	10c5883a 	add	r2,r2,r3
81109d30:	10801104 	addi	r2,r2,68
81109d34:	10c0000b 	ldhu	r3,0(r2)
81109d38:	e0bffe17 	ldw	r2,-8(fp)
81109d3c:	1080008b 	ldhu	r2,2(r2)
81109d40:	18ffffcc 	andi	r3,r3,65535
81109d44:	10bfffcc 	andi	r2,r2,65535
81109d48:	1880191e 	bne	r3,r2,81109db0 <bCheckInAck64+0xfc>
            bFound = TRUE;
81109d4c:	00800044 	movi	r2,1
81109d50:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b64[ucIL] = FALSE;
81109d54:	e0fffd03 	ldbu	r3,-12(fp)
81109d58:	00a04574 	movhi	r2,33045
81109d5c:	10b7a804 	addi	r2,r2,-8544
81109d60:	18c00184 	addi	r3,r3,6
81109d64:	18c7883a 	add	r3,r3,r3
81109d68:	18c7883a 	add	r3,r3,r3
81109d6c:	10c5883a 	add	r2,r2,r3
81109d70:	10000015 	stw	zero,0(r2)
            SemCount64++;
81109d74:	d0a05f03 	ldbu	r2,-32388(gp)
81109d78:	10800044 	addi	r2,r2,1
81109d7c:	d0a05f05 	stb	r2,-32388(gp)
            error_code = OSSemPost(xSemCountBuffer64);
81109d80:	d0a04d17 	ldw	r2,-32460(gp)
81109d84:	1009883a 	mov	r4,r2
81109d88:	1131a900 	call	81131a90 <OSSemPost>
81109d8c:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109d90:	e0bffd43 	ldbu	r2,-11(fp)
81109d94:	10803fcc 	andi	r2,r2,255
81109d98:	10000c26 	beq	r2,zero,81109dcc <bCheckInAck64+0x118>
                SemCount64--;
81109d9c:	d0a05f03 	ldbu	r2,-32388(gp)
81109da0:	10bfffc4 	addi	r2,r2,-1
81109da4:	d0a05f05 	stb	r2,-32388(gp)
                vFailSetCountSemaphorexBuffer64();
81109da8:	110fb480 	call	8110fb48 <vFailSetCountSemaphorexBuffer64>
            }
            break;
81109dac:	00000706 	br	81109dcc <bCheckInAck64+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81109db0:	e0bffd03 	ldbu	r2,-12(fp)
81109db4:	10800044 	addi	r2,r2,1
81109db8:	e0bffd05 	stb	r2,-12(fp)
81109dbc:	e0bffd03 	ldbu	r2,-12(fp)
81109dc0:	10800230 	cmpltui	r2,r2,8
81109dc4:	103fd51e 	bne	r2,zero,81109d1c <__reset+0xfb0e9d1c>
81109dc8:	00000106 	br	81109dd0 <bCheckInAck64+0x11c>
            error_code = OSSemPost(xSemCountBuffer64);
            if ( error_code != OS_ERR_NONE ) {
                SemCount64--;
                vFailSetCountSemaphorexBuffer64();
            }
            break;
81109dcc:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
81109dd0:	d0a05c17 	ldw	r2,-32400(gp)
81109dd4:	1009883a 	mov	r4,r2
81109dd8:	112fca00 	call	8112fca0 <OSMutexPost>
    (*bFinished) = TRUE;
81109ddc:	e0bfff17 	ldw	r2,-4(fp)
81109de0:	00c00044 	movi	r3,1
81109de4:	10c00015 	stw	r3,0(r2)

    return bFound;
81109de8:	e0bffc17 	ldw	r2,-16(fp)
}
81109dec:	e037883a 	mov	sp,fp
81109df0:	dfc00117 	ldw	ra,4(sp)
81109df4:	df000017 	ldw	fp,0(sp)
81109df8:	dec00204 	addi	sp,sp,8
81109dfc:	f800283a 	ret

81109e00 <bCheckInAck32>:



bool bCheckInAck32( txReceivedACK *xRecAckL , bool *bFinished ) {
81109e00:	defffa04 	addi	sp,sp,-24
81109e04:	de00012e 	bgeu	sp,et,81109e0c <bCheckInAck32+0xc>
81109e08:	003b68fa 	trap	3
81109e0c:	dfc00515 	stw	ra,20(sp)
81109e10:	df000415 	stw	fp,16(sp)
81109e14:	df000404 	addi	fp,sp,16
81109e18:	e13ffe15 	stw	r4,-8(fp)
81109e1c:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109e20:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109e24:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109e28:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109e2c:	e0bfff17 	ldw	r2,-4(fp)
81109e30:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer32, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81109e34:	d0a05817 	ldw	r2,-32416(gp)
81109e38:	e0fffd44 	addi	r3,fp,-11
81109e3c:	180d883a 	mov	r6,r3
81109e40:	01400044 	movi	r5,1
81109e44:	1009883a 	mov	r4,r2
81109e48:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109e4c:	e0bffd43 	ldbu	r2,-11(fp)
81109e50:	10803fcc 	andi	r2,r2,255
81109e54:	10000226 	beq	r2,zero,81109e60 <bCheckInAck32+0x60>
        return bFound;
81109e58:	e0bffc17 	ldw	r2,-16(fp)
81109e5c:	00003606 	br	81109f38 <bCheckInAck32+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81109e60:	e03ffd05 	stb	zero,-12(fp)
81109e64:	00002806 	br	81109f08 <bCheckInAck32+0x108>
    {
        if ( xBuffer32[ucIL].usiId == xRecAckL->usiId ) {
81109e68:	e0fffd03 	ldbu	r3,-12(fp)
81109e6c:	00a04574 	movhi	r2,33045
81109e70:	10a74c04 	addi	r2,r2,-25296
81109e74:	18c00b24 	muli	r3,r3,44
81109e78:	10c5883a 	add	r2,r2,r3
81109e7c:	10800904 	addi	r2,r2,36
81109e80:	10c0000b 	ldhu	r3,0(r2)
81109e84:	e0bffe17 	ldw	r2,-8(fp)
81109e88:	1080008b 	ldhu	r2,2(r2)
81109e8c:	18ffffcc 	andi	r3,r3,65535
81109e90:	10bfffcc 	andi	r2,r2,65535
81109e94:	1880191e 	bne	r3,r2,81109efc <bCheckInAck32+0xfc>
            bFound = TRUE;
81109e98:	00800044 	movi	r2,1
81109e9c:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b32[ucIL] = FALSE;
81109ea0:	e0fffd03 	ldbu	r3,-12(fp)
81109ea4:	00a04574 	movhi	r2,33045
81109ea8:	10b7a804 	addi	r2,r2,-8544
81109eac:	18c00384 	addi	r3,r3,14
81109eb0:	18c7883a 	add	r3,r3,r3
81109eb4:	18c7883a 	add	r3,r3,r3
81109eb8:	10c5883a 	add	r2,r2,r3
81109ebc:	10000015 	stw	zero,0(r2)
            SemCount32++;
81109ec0:	d0a05683 	ldbu	r2,-32422(gp)
81109ec4:	10800044 	addi	r2,r2,1
81109ec8:	d0a05685 	stb	r2,-32422(gp)
            error_code = OSSemPost(xSemCountBuffer32);
81109ecc:	d0a05b17 	ldw	r2,-32404(gp)
81109ed0:	1009883a 	mov	r4,r2
81109ed4:	1131a900 	call	81131a90 <OSSemPost>
81109ed8:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109edc:	e0bffd43 	ldbu	r2,-11(fp)
81109ee0:	10803fcc 	andi	r2,r2,255
81109ee4:	10000c26 	beq	r2,zero,81109f18 <bCheckInAck32+0x118>
                SemCount32--;
81109ee8:	d0a05683 	ldbu	r2,-32422(gp)
81109eec:	10bfffc4 	addi	r2,r2,-1
81109ef0:	d0a05685 	stb	r2,-32422(gp)
                vFailSetCountSemaphorexBuffer32();
81109ef4:	110fae00 	call	8110fae0 <vFailSetCountSemaphorexBuffer32>
            }
            break;
81109ef8:	00000706 	br	81109f18 <bCheckInAck32+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81109efc:	e0bffd03 	ldbu	r2,-12(fp)
81109f00:	10800044 	addi	r2,r2,1
81109f04:	e0bffd05 	stb	r2,-12(fp)
81109f08:	e0bffd03 	ldbu	r2,-12(fp)
81109f0c:	10800230 	cmpltui	r2,r2,8
81109f10:	103fd51e 	bne	r2,zero,81109e68 <__reset+0xfb0e9e68>
81109f14:	00000106 	br	81109f1c <bCheckInAck32+0x11c>
            error_code = OSSemPost(xSemCountBuffer32);
            if ( error_code != OS_ERR_NONE ) {
                SemCount32--;
                vFailSetCountSemaphorexBuffer32();
            }
            break;
81109f18:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32*/
81109f1c:	d0a05817 	ldw	r2,-32416(gp)
81109f20:	1009883a 	mov	r4,r2
81109f24:	112fca00 	call	8112fca0 <OSMutexPost>
    (*bFinished) = TRUE;
81109f28:	e0bfff17 	ldw	r2,-4(fp)
81109f2c:	00c00044 	movi	r3,1
81109f30:	10c00015 	stw	r3,0(r2)

    return bFound;
81109f34:	e0bffc17 	ldw	r2,-16(fp)
}
81109f38:	e037883a 	mov	sp,fp
81109f3c:	dfc00117 	ldw	ra,4(sp)
81109f40:	df000017 	ldw	fp,0(sp)
81109f44:	dec00204 	addi	sp,sp,8
81109f48:	f800283a 	ret

81109f4c <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81109f4c:	defff704 	addi	sp,sp,-36
81109f50:	de00012e 	bgeu	sp,et,81109f58 <vInitialTask+0xc>
81109f54:	003b68fa 	trap	3
81109f58:	dfc00815 	stw	ra,32(sp)
81109f5c:	df000715 	stw	fp,28(sp)
81109f60:	df000704 	addi	fp,sp,28
81109f64:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81109f68:	e03ffe05 	stb	zero,-8(fp)

	#if ( STACK_MONITOR == 1)
		OSStatInit();
	#endif

	OSTimeDlyHMSM(0, 0, 5, 0); /* todo: for debug, only debug*/
81109f6c:	000f883a 	mov	r7,zero
81109f70:	01800144 	movi	r6,5
81109f74:	000b883a 	mov	r5,zero
81109f78:	0009883a 	mov	r4,zero
81109f7c:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask0_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
81109f80:	d8000415 	stw	zero,16(sp)
81109f84:	d8000315 	stw	zero,12(sp)
81109f88:	00808004 	movi	r2,512
81109f8c:	d8800215 	stw	r2,8(sp)
81109f90:	00a04534 	movhi	r2,33044
81109f94:	10937604 	addi	r2,r2,19928
81109f98:	d8800115 	stw	r2,4(sp)
81109f9c:	00800244 	movi	r2,9
81109fa0:	d8800015 	stw	r2,0(sp)
81109fa4:	01c00244 	movi	r7,9
81109fa8:	01a04534 	movhi	r6,33044
81109fac:	31957504 	addi	r6,r6,21972
81109fb0:	01604574 	movhi	r5,33045
81109fb4:	29643c04 	addi	r5,r5,-28432
81109fb8:	01204474 	movhi	r4,33041
81109fbc:	2121ec04 	addi	r4,r4,-30800
81109fc0:	11324740 	call	81132474 <OSTaskCreateExt>
81109fc4:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81109fc8:	e0bffe03 	ldbu	r2,-8(fp)
81109fcc:	10803fcc 	andi	r2,r2,255
81109fd0:	10000526 	beq	r2,zero,81109fe8 <vInitialTask+0x9c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109fd4:	e0bffe03 	ldbu	r2,-8(fp)
81109fd8:	10803fcc 	andi	r2,r2,255
81109fdc:	1009883a 	mov	r4,r2
81109fe0:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee0Task();
81109fe4:	11108300 	call	81110830 <vCoudlNotCreateNFee0Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
81109fe8:	01c07d04 	movi	r7,500
81109fec:	000d883a 	mov	r6,zero
81109ff0:	000b883a 	mov	r5,zero
81109ff4:	0009883a 	mov	r4,zero
81109ff8:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask1_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
81109ffc:	d8000415 	stw	zero,16(sp)
8110a000:	d8000315 	stw	zero,12(sp)
8110a004:	00808004 	movi	r2,512
8110a008:	d8800215 	stw	r2,8(sp)
8110a00c:	00a04574 	movhi	r2,33045
8110a010:	10bea404 	addi	r2,r2,-1392
8110a014:	d8800115 	stw	r2,4(sp)
8110a018:	00800284 	movi	r2,10
8110a01c:	d8800015 	stw	r2,0(sp)
8110a020:	01c00284 	movi	r7,10
8110a024:	01a04574 	movhi	r6,33045
8110a028:	3180a304 	addi	r6,r6,652
8110a02c:	01604574 	movhi	r5,33045
8110a030:	29646804 	addi	r5,r5,-28256
8110a034:	01204474 	movhi	r4,33041
8110a038:	2121ec04 	addi	r4,r4,-30800
8110a03c:	11324740 	call	81132474 <OSTaskCreateExt>
8110a040:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a044:	e0bffe03 	ldbu	r2,-8(fp)
8110a048:	10803fcc 	andi	r2,r2,255
8110a04c:	10000526 	beq	r2,zero,8110a064 <vInitialTask+0x118>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a050:	e0bffe03 	ldbu	r2,-8(fp)
8110a054:	10803fcc 	andi	r2,r2,255
8110a058:	1009883a 	mov	r4,r2
8110a05c:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee1Task();
8110a060:	11108980 	call	81110898 <vCoudlNotCreateNFee1Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a064:	01c07d04 	movi	r7,500
8110a068:	000d883a 	mov	r6,zero
8110a06c:	000b883a 	mov	r5,zero
8110a070:	0009883a 	mov	r4,zero
8110a074:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask2_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a078:	d8000415 	stw	zero,16(sp)
8110a07c:	d8000315 	stw	zero,12(sp)
8110a080:	00808004 	movi	r2,512
8110a084:	d8800215 	stw	r2,8(sp)
8110a088:	00a04574 	movhi	r2,33045
8110a08c:	1088a404 	addi	r2,r2,8848
8110a090:	d8800115 	stw	r2,4(sp)
8110a094:	008002c4 	movi	r2,11
8110a098:	d8800015 	stw	r2,0(sp)
8110a09c:	01c002c4 	movi	r7,11
8110a0a0:	01a04574 	movhi	r6,33045
8110a0a4:	318aa304 	addi	r6,r6,10892
8110a0a8:	01604574 	movhi	r5,33045
8110a0ac:	29649404 	addi	r5,r5,-28080
8110a0b0:	01204474 	movhi	r4,33041
8110a0b4:	2121ec04 	addi	r4,r4,-30800
8110a0b8:	11324740 	call	81132474 <OSTaskCreateExt>
8110a0bc:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a0c0:	e0bffe03 	ldbu	r2,-8(fp)
8110a0c4:	10803fcc 	andi	r2,r2,255
8110a0c8:	10000526 	beq	r2,zero,8110a0e0 <vInitialTask+0x194>
		//* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a0cc:	e0bffe03 	ldbu	r2,-8(fp)
8110a0d0:	10803fcc 	andi	r2,r2,255
8110a0d4:	1009883a 	mov	r4,r2
8110a0d8:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee2Task();
8110a0dc:	11109000 	call	81110900 <vCoudlNotCreateNFee2Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a0e0:	01c07d04 	movi	r7,500
8110a0e4:	000d883a 	mov	r6,zero
8110a0e8:	000b883a 	mov	r5,zero
8110a0ec:	0009883a 	mov	r4,zero
8110a0f0:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask3_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a0f4:	d8000415 	stw	zero,16(sp)
8110a0f8:	d8000315 	stw	zero,12(sp)
8110a0fc:	00808004 	movi	r2,512
8110a100:	d8800215 	stw	r2,8(sp)
8110a104:	00a04574 	movhi	r2,33045
8110a108:	1086a404 	addi	r2,r2,6800
8110a10c:	d8800115 	stw	r2,4(sp)
8110a110:	00800304 	movi	r2,12
8110a114:	d8800015 	stw	r2,0(sp)
8110a118:	01c00304 	movi	r7,12
8110a11c:	01a04574 	movhi	r6,33045
8110a120:	3188a304 	addi	r6,r6,8844
8110a124:	01604574 	movhi	r5,33045
8110a128:	2964c004 	addi	r5,r5,-27904
8110a12c:	01204474 	movhi	r4,33041
8110a130:	2121ec04 	addi	r4,r4,-30800
8110a134:	11324740 	call	81132474 <OSTaskCreateExt>
8110a138:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a13c:	e0bffe03 	ldbu	r2,-8(fp)
8110a140:	10803fcc 	andi	r2,r2,255
8110a144:	10000526 	beq	r2,zero,8110a15c <vInitialTask+0x210>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a148:	e0bffe03 	ldbu	r2,-8(fp)
8110a14c:	10803fcc 	andi	r2,r2,255
8110a150:	1009883a 	mov	r4,r2
8110a154:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee3Task();
8110a158:	11109680 	call	81110968 <vCoudlNotCreateNFee3Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a15c:	01c07d04 	movi	r7,500
8110a160:	000d883a 	mov	r6,zero
8110a164:	000b883a 	mov	r5,zero
8110a168:	0009883a 	mov	r4,zero
8110a16c:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask4_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a170:	d8000415 	stw	zero,16(sp)
8110a174:	d8000315 	stw	zero,12(sp)
8110a178:	00808004 	movi	r2,512
8110a17c:	d8800215 	stw	r2,8(sp)
8110a180:	00a04574 	movhi	r2,33045
8110a184:	10bc9e04 	addi	r2,r2,-3464
8110a188:	d8800115 	stw	r2,4(sp)
8110a18c:	00800344 	movi	r2,13
8110a190:	d8800015 	stw	r2,0(sp)
8110a194:	01c00344 	movi	r7,13
8110a198:	01a04574 	movhi	r6,33045
8110a19c:	31be9d04 	addi	r6,r6,-1420
8110a1a0:	01604574 	movhi	r5,33045
8110a1a4:	2964ec04 	addi	r5,r5,-27728
8110a1a8:	01204474 	movhi	r4,33041
8110a1ac:	2121ec04 	addi	r4,r4,-30800
8110a1b0:	11324740 	call	81132474 <OSTaskCreateExt>
8110a1b4:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a1b8:	e0bffe03 	ldbu	r2,-8(fp)
8110a1bc:	10803fcc 	andi	r2,r2,255
8110a1c0:	10000526 	beq	r2,zero,8110a1d8 <vInitialTask+0x28c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a1c4:	e0bffe03 	ldbu	r2,-8(fp)
8110a1c8:	10803fcc 	andi	r2,r2,255
8110a1cc:	1009883a 	mov	r4,r2
8110a1d0:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee4Task();
8110a1d4:	11109d00 	call	811109d0 <vCoudlNotCreateNFee4Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a1d8:	01c07d04 	movi	r7,500
8110a1dc:	000d883a 	mov	r6,zero
8110a1e0:	000b883a 	mov	r5,zero
8110a1e4:	0009883a 	mov	r4,zero
8110a1e8:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
									vFeeTask5_stk,
									FEES_STACK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a1ec:	d8000415 	stw	zero,16(sp)
8110a1f0:	d8000315 	stw	zero,12(sp)
8110a1f4:	00808004 	movi	r2,512
8110a1f8:	d8800215 	stw	r2,8(sp)
8110a1fc:	00a04574 	movhi	r2,33045
8110a200:	10a54c04 	addi	r2,r2,-27344
8110a204:	d8800115 	stw	r2,4(sp)
8110a208:	00800384 	movi	r2,14
8110a20c:	d8800015 	stw	r2,0(sp)
8110a210:	01c00384 	movi	r7,14
8110a214:	01a04574 	movhi	r6,33045
8110a218:	31a74b04 	addi	r6,r6,-25300
8110a21c:	01604574 	movhi	r5,33045
8110a220:	29651804 	addi	r5,r5,-27552
8110a224:	01204474 	movhi	r4,33041
8110a228:	2121ec04 	addi	r4,r4,-30800
8110a22c:	11324740 	call	81132474 <OSTaskCreateExt>
8110a230:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a234:	e0bffe03 	ldbu	r2,-8(fp)
8110a238:	10803fcc 	andi	r2,r2,255
8110a23c:	10000526 	beq	r2,zero,8110a254 <vInitialTask+0x308>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a240:	e0bffe03 	ldbu	r2,-8(fp)
8110a244:	10803fcc 	andi	r2,r2,255
8110a248:	1009883a 	mov	r4,r2
8110a24c:	110f4a80 	call	8110f4a8 <printErrorTask>
		#endif
			vCoudlNotCreateNFee5Task();
8110a250:	1110a380 	call	81110a38 <vCoudlNotCreateNFee5Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a254:	01c07d04 	movi	r7,500
8110a258:	000d883a 	mov	r6,zero
8110a25c:	000b883a 	mov	r5,zero
8110a260:	0009883a 	mov	r4,zero
8110a264:	11336a00 	call	811336a0 <OSTimeDlyHMSM>

	for(;;) { OSTimeDlyHMSM(0, 0, 50, 0);} /* todo: for debug, only debug*/
8110a268:	000f883a 	mov	r7,zero
8110a26c:	01800c84 	movi	r6,50
8110a270:	000b883a 	mov	r5,zero
8110a274:	0009883a 	mov	r4,zero
8110a278:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
8110a27c:	003ffa06 	br	8110a268 <__reset+0xfb0ea268>

8110a280 <vNFeeControlTask>:


#include "nfee_control_task.h"


void vNFeeControlTask(void *task_data) {
8110a280:	defffb04 	addi	sp,sp,-20
8110a284:	de00012e 	bgeu	sp,et,8110a28c <vNFeeControlTask+0xc>
8110a288:	003b68fa 	trap	3
8110a28c:	dfc00415 	stw	ra,16(sp)
8110a290:	df000315 	stw	fp,12(sp)
8110a294:	df000304 	addi	fp,sp,12
8110a298:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110a29c:	e03ffd15 	stw	zero,-12(fp)
	TNFee_Control * pxFeeC;
	INT8U error_code;

	pxFeeC = (TNFee_Control *) task_data;
8110a2a0:	e0bfff17 	ldw	r2,-4(fp)
8110a2a4:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"NFee Controller Task. (Task on)\n");
8110a2a8:	d0a05017 	ldw	r2,-32448(gp)
8110a2ac:	100f883a 	mov	r7,r2
8110a2b0:	01800804 	movi	r6,32
8110a2b4:	01400044 	movi	r5,1
8110a2b8:	01204534 	movhi	r4,33044
8110a2bc:	213e5504 	addi	r4,r4,-1708
8110a2c0:	1113be40 	call	81113be4 <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
8110a2c4:	0001883a 	nop
	}

}
8110a2c8:	0001883a 	nop
8110a2cc:	e037883a 	mov	sp,fp
8110a2d0:	dfc00117 	ldw	ra,4(sp)
8110a2d4:	df000017 	ldw	fp,0(sp)
8110a2d8:	dec00204 	addi	sp,sp,8
8110a2dc:	f800283a 	ret

8110a2e0 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
8110a2e0:	defff704 	addi	sp,sp,-36
8110a2e4:	de00012e 	bgeu	sp,et,8110a2ec <vOutAckHandlerTask+0xc>
8110a2e8:	003b68fa 	trap	3
8110a2ec:	dfc00815 	stw	ra,32(sp)
8110a2f0:	df000715 	stw	fp,28(sp)
8110a2f4:	df000704 	addi	fp,sp,28
8110a2f8:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
8110a2fc:	e03ffac5 	stb	zero,-21(fp)
8110a300:	e03ffb05 	stb	zero,-20(fp)
8110a304:	e03ffb45 	stb	zero,-19(fp)
8110a308:	e03ffb85 	stb	zero,-18(fp)
8110a30c:	e03ffbc5 	stb	zero,-17(fp)
8110a310:	e03ffc05 	stb	zero,-16(fp)
8110a314:	e03ffc45 	stb	zero,-15(fp)
8110a318:	e03ffc85 	stb	zero,-14(fp)
8110a31c:	e03ffcc5 	stb	zero,-13(fp)
8110a320:	e03ffd05 	stb	zero,-12(fp)
8110a324:	e03ffd45 	stb	zero,-11(fp)
8110a328:	e03ffd85 	stb	zero,-10(fp)
8110a32c:	e03ffdc5 	stb	zero,-9(fp)
8110a330:	e03ffe05 	stb	zero,-8(fp)
8110a334:	e03ffe45 	stb	zero,-7(fp)
8110a338:	e03ffe85 	stb	zero,-6(fp)
    unsigned char crc = 0;
8110a33c:	e03ffa45 	stb	zero,-23(fp)

	#ifdef DEBUG_ON
		debug(fp,"Out Ack Handler Task. (Task on)\n");
8110a340:	d0a05017 	ldw	r2,-32448(gp)
8110a344:	100f883a 	mov	r7,r2
8110a348:	01800804 	movi	r6,32
8110a34c:	01400044 	movi	r5,1
8110a350:	01204534 	movhi	r4,33044
8110a354:	213e5e04 	addi	r4,r4,-1672
8110a358:	1113be40 	call	81113be4 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
8110a35c:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
8110a360:	e0bff917 	ldw	r2,-28(fp)
8110a364:	10c00060 	cmpeqi	r3,r2,1
8110a368:	1800071e 	bne	r3,zero,8110a388 <vOutAckHandlerTask+0xa8>
8110a36c:	0080032e 	bgeu	zero,r2,8110a37c <vOutAckHandlerTask+0x9c>
8110a370:	108000a0 	cmpeqi	r2,r2,2
8110a374:	1000471e 	bne	r2,zero,8110a494 <vOutAckHandlerTask+0x1b4>
8110a378:	00008c06 	br	8110a5ac <vOutAckHandlerTask+0x2cc>
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
8110a37c:	00800044 	movi	r2,1
8110a380:	e0bff915 	stw	r2,-28(fp)
				break;
8110a384:	00009306 	br	8110a5d4 <vOutAckHandlerTask+0x2f4>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                eSenderAckState = sSAGettingACK;
8110a388:	00800044 	movi	r2,1
8110a38c:	e0bff915 	stw	r2,-28(fp)
                OSSemPend(xSemCountSenderACK, 0, &error_code);
8110a390:	d0a04f17 	ldw	r2,-32452(gp)
8110a394:	e0fffa84 	addi	r3,fp,-22
8110a398:	180d883a 	mov	r6,r3
8110a39c:	000b883a 	mov	r5,zero
8110a3a0:	1009883a 	mov	r4,r2
8110a3a4:	11317080 	call	81131708 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110a3a8:	e0bffa83 	ldbu	r2,-22(fp)
8110a3ac:	10803fcc 	andi	r2,r2,255
8110a3b0:	1000361e 	bne	r2,zero,8110a48c <vOutAckHandlerTask+0x1ac>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
8110a3b4:	d0a05d17 	ldw	r2,-32396(gp)
8110a3b8:	e0fffa84 	addi	r3,fp,-22
8110a3bc:	180d883a 	mov	r6,r3
8110a3c0:	000b883a 	mov	r5,zero
8110a3c4:	1009883a 	mov	r4,r2
8110a3c8:	112f6fc0 	call	8112f6fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a3cc:	e0bffa83 	ldbu	r2,-22(fp)
8110a3d0:	10803fcc 	andi	r2,r2,255
8110a3d4:	10002b1e 	bne	r2,zero,8110a484 <vOutAckHandlerTask+0x1a4>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a3d8:	e03ffa05 	stb	zero,-24(fp)
8110a3dc:	00002206 	br	8110a468 <vOutAckHandlerTask+0x188>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
8110a3e0:	e0fffa03 	ldbu	r3,-24(fp)
8110a3e4:	00a04574 	movhi	r2,33045
8110a3e8:	108aa804 	addi	r2,r2,10912
8110a3ec:	18c7883a 	add	r3,r3,r3
8110a3f0:	18c7883a 	add	r3,r3,r3
8110a3f4:	10c5883a 	add	r2,r2,r3
8110a3f8:	10800003 	ldbu	r2,0(r2)
8110a3fc:	10803fcc 	andi	r2,r2,255
8110a400:	1080201c 	xori	r2,r2,128
8110a404:	10bfe004 	addi	r2,r2,-128
8110a408:	10001426 	beq	r2,zero,8110a45c <vOutAckHandlerTask+0x17c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
8110a40c:	e0fffa03 	ldbu	r3,-24(fp)
8110a410:	00a04574 	movhi	r2,33045
8110a414:	108aa804 	addi	r2,r2,10912
8110a418:	18c7883a 	add	r3,r3,r3
8110a41c:	18c7883a 	add	r3,r3,r3
8110a420:	10c5883a 	add	r2,r2,r3
8110a424:	10c0000b 	ldhu	r3,0(r2)
8110a428:	d0e0498d 	sth	r3,-32474(gp)
8110a42c:	1080008b 	ldhu	r2,2(r2)
8110a430:	d0a04a0d 	sth	r2,-32472(gp)
                                eSenderAckState = sSASending;
8110a434:	00800084 	movi	r2,2
8110a438:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
8110a43c:	e0fffa03 	ldbu	r3,-24(fp)
8110a440:	00a04574 	movhi	r2,33045
8110a444:	108aa804 	addi	r2,r2,10912
8110a448:	18c7883a 	add	r3,r3,r3
8110a44c:	18c7883a 	add	r3,r3,r3
8110a450:	10c5883a 	add	r2,r2,r3
8110a454:	10000005 	stb	zero,0(r2)
                                break;
8110a458:	00000606 	br	8110a474 <vOutAckHandlerTask+0x194>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a45c:	e0bffa03 	ldbu	r2,-24(fp)
8110a460:	10800044 	addi	r2,r2,1
8110a464:	e0bffa05 	stb	r2,-24(fp)
8110a468:	e0bffa03 	ldbu	r2,-24(fp)
8110a46c:	10800230 	cmpltui	r2,r2,8
8110a470:	103fdb1e 	bne	r2,zero,8110a3e0 <__reset+0xfb0ea3e0>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
8110a474:	d0a05d17 	ldw	r2,-32396(gp)
8110a478:	1009883a 	mov	r4,r2
8110a47c:	112fca00 	call	8112fca0 <OSMutexPost>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
8110a480:	00005406 	br	8110a5d4 <vOutAckHandlerTask+0x2f4>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
8110a484:	110f7c40 	call	8110f7c4 <vFailGetMutexSenderTask>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
8110a488:	00005206 	br	8110a5d4 <vOutAckHandlerTask+0x2f4>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
8110a48c:	110f75c0 	call	8110f75c <vFailGetCountSemaphoreSenderTask>
                }

                break;
8110a490:	00005006 	br	8110a5d4 <vOutAckHandlerTask+0x2f4>
			case sSASending:
                
                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
8110a494:	d0a04983 	ldbu	r2,-32474(gp)
8110a498:	10803fcc 	andi	r2,r2,255
8110a49c:	1080201c 	xori	r2,r2,128
8110a4a0:	10bfe004 	addi	r2,r2,-128
8110a4a4:	108008e0 	cmpeqi	r2,r2,35
8110a4a8:	1000201e 	bne	r2,zero,8110a52c <vOutAckHandlerTask+0x24c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
8110a4ac:	d0a049c3 	ldbu	r2,-32473(gp)
8110a4b0:	10c03fcc 	andi	r3,r2,255
8110a4b4:	18c0201c 	xori	r3,r3,128
8110a4b8:	18ffe004 	addi	r3,r3,-128
8110a4bc:	d0a04a0b 	ldhu	r2,-32472(gp)
8110a4c0:	113fffcc 	andi	r4,r2,65535
8110a4c4:	e0bffac4 	addi	r2,fp,-21
8110a4c8:	200f883a 	mov	r7,r4
8110a4cc:	180d883a 	mov	r6,r3
8110a4d0:	01604534 	movhi	r5,33044
8110a4d4:	297e6704 	addi	r5,r5,-1636
8110a4d8:	1009883a 	mov	r4,r2
8110a4dc:	1114ef80 	call	81114ef8 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
8110a4e0:	e0bffac4 	addi	r2,fp,-21
8110a4e4:	1009883a 	mov	r4,r2
8110a4e8:	111510c0 	call	8111510c <strlen>
8110a4ec:	1007883a 	mov	r3,r2
8110a4f0:	e0bffac4 	addi	r2,fp,-21
8110a4f4:	180b883a 	mov	r5,r3
8110a4f8:	1009883a 	mov	r4,r2
8110a4fc:	110f3700 	call	8110f370 <ucCrc8wInit>
8110a500:	e0bffa45 	stb	r2,-23(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
8110a504:	e13ffa43 	ldbu	r4,-23(fp)
8110a508:	e0fffac4 	addi	r3,fp,-21
8110a50c:	e0bffac4 	addi	r2,fp,-21
8110a510:	200f883a 	mov	r7,r4
8110a514:	180d883a 	mov	r6,r3
8110a518:	01604534 	movhi	r5,33044
8110a51c:	297e6904 	addi	r5,r5,-1628
8110a520:	1009883a 	mov	r4,r2
8110a524:	1114ef80 	call	81114ef8 <sprintf>
8110a528:	00000c06 	br	8110a55c <vOutAckHandlerTask+0x27c>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
8110a52c:	e0bffac4 	addi	r2,fp,-21
8110a530:	00c008c4 	movi	r3,35
8110a534:	10c00005 	stb	r3,0(r2)
8110a538:	00c01f04 	movi	r3,124
8110a53c:	10c00045 	stb	r3,1(r2)
8110a540:	00c00d44 	movi	r3,53
8110a544:	10c00085 	stb	r3,2(r2)
8110a548:	00c00d04 	movi	r3,52
8110a54c:	10c000c5 	stb	r3,3(r2)
8110a550:	00c00ec4 	movi	r3,59
8110a554:	10c00105 	stb	r3,4(r2)
8110a558:	10000145 	stb	zero,5(r2)
                }


                OSMutexPend(xTxUARTMutex, 100, &error_code); /* Wait max 100 ticks = 100 ms */
8110a55c:	d0a05e17 	ldw	r2,-32392(gp)
8110a560:	e0fffa84 	addi	r3,fp,-22
8110a564:	180d883a 	mov	r6,r3
8110a568:	01401904 	movi	r5,100
8110a56c:	1009883a 	mov	r4,r2
8110a570:	112f6fc0 	call	8112f6fc <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110a574:	e0bffa83 	ldbu	r2,-22(fp)
8110a578:	10803fcc 	andi	r2,r2,255
8110a57c:	1000071e 	bne	r2,zero,8110a59c <vOutAckHandlerTask+0x2bc>
                    puts(cBufferAck);
8110a580:	e0bffac4 	addi	r2,fp,-21
8110a584:	1009883a 	mov	r4,r2
8110a588:	1114bb40 	call	81114bb4 <puts>
                    OSMutexPost(xTxUARTMutex);
8110a58c:	d0a05e17 	ldw	r2,-32392(gp)
8110a590:	1009883a 	mov	r4,r2
8110a594:	112fca00 	call	8112fca0 <OSMutexPost>
8110a598:	00000106 	br	8110a5a0 <vOutAckHandlerTask+0x2c0>
                } else
                    vFailGetMutexTxUARTSenderTask(); /* Could not use the uart tx buffer to send the ack*/
8110a59c:	110f8fc0 	call	8110f8fc <vFailGetMutexTxUARTSenderTask>

                eSenderAckState = sSAGettingACK;
8110a5a0:	00800044 	movi	r2,1
8110a5a4:	e0bff915 	stw	r2,-28(fp)
                
				break;
8110a5a8:	00000a06 	br	8110a5d4 <vOutAckHandlerTask+0x2f4>
			default:
            	#ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vOutAckHandlerTask)\n");
8110a5ac:	d0a05017 	ldw	r2,-32448(gp)
8110a5b0:	100f883a 	mov	r7,r2
8110a5b4:	01801104 	movi	r6,68
8110a5b8:	01400044 	movi	r5,1
8110a5bc:	01204534 	movhi	r4,33044
8110a5c0:	213e6c04 	addi	r4,r4,-1616
8110a5c4:	1113be40 	call	81113be4 <fwrite>
	            #endif
                eSenderAckState = sSAGettingACK;
8110a5c8:	00800044 	movi	r2,1
8110a5cc:	e0bff915 	stw	r2,-28(fp)
				break;
8110a5d0:	0001883a 	nop
		}
	}
8110a5d4:	003f6206 	br	8110a360 <__reset+0xfb0ea360>

8110a5d8 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
8110a5d8:	deffc104 	addi	sp,sp,-252
8110a5dc:	de00012e 	bgeu	sp,et,8110a5e4 <vParserCommTask+0xc>
8110a5e0:	003b68fa 	trap	3
8110a5e4:	dfc03e15 	stw	ra,248(sp)
8110a5e8:	df003d15 	stw	fp,244(sp)
8110a5ec:	df003d04 	addi	fp,sp,244
8110a5f0:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
8110a5f4:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

    #ifdef DEBUG_ON
        debug(fp,"Parser Comm Task. (Task on)\n");
8110a5f8:	d0a05017 	ldw	r2,-32448(gp)
8110a5fc:	100f883a 	mov	r7,r2
8110a600:	01800704 	movi	r6,28
8110a604:	01400044 	movi	r5,1
8110a608:	01204534 	movhi	r4,33044
8110a60c:	213e7e04 	addi	r4,r4,-1544
8110a610:	1113be40 	call	81113be4 <fwrite>
    #endif

	eParserMode = sConfiguring;
8110a614:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
8110a618:	e0bfc817 	ldw	r2,-224(fp)
8110a61c:	10800168 	cmpgeui	r2,r2,5
8110a620:	1002541e 	bne	r2,zero,8110af74 <vParserCommTask+0x99c>
8110a624:	e0bfc817 	ldw	r2,-224(fp)
8110a628:	100690ba 	slli	r3,r2,2
8110a62c:	00a04474 	movhi	r2,33041
8110a630:	10a99004 	addi	r2,r2,-22976
8110a634:	1885883a 	add	r2,r3,r2
8110a638:	10800017 	ldw	r2,0(r2)
8110a63c:	1000683a 	jmp	r2
8110a640:	8110a654 	ori	r4,r16,17049
8110a644:	8110a660 	cmpeqi	r4,r16,17049
8110a648:	8110a6f4 	orhi	r4,r16,17051
8110a64c:	8110a84c 	andi	r4,r16,17057
8110a650:	8110a894 	ori	r4,r16,17058
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingMessage;
8110a654:	00800044 	movi	r2,1
8110a658:	e0bfc815 	stw	r2,-224(fp)
				break;
8110a65c:	00024806 	br	8110af80 <vParserCommTask+0x9a8>
			case sWaitingMessage:

				bSuccess = FALSE;
8110a660:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
8110a664:	00800044 	movi	r2,1
8110a668:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
8110a66c:	d0a05217 	ldw	r2,-32440(gp)
8110a670:	e0ffca84 	addi	r3,fp,-214
8110a674:	180d883a 	mov	r6,r3
8110a678:	000b883a 	mov	r5,zero
8110a67c:	1009883a 	mov	r4,r2
8110a680:	11317080 	call	81131708 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
8110a684:	e0bfca83 	ldbu	r2,-214(fp)
8110a688:	10803fcc 	andi	r2,r2,255
8110a68c:	1000171e 	bne	r2,zero,8110a6ec <vParserCommTask+0x114>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
8110a690:	01204534 	movhi	r4,33044
8110a694:	21120604 	addi	r4,r4,18456
8110a698:	110af840 	call	8110af84 <getPreParsedPacket>
8110a69c:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
8110a6a0:	e0bfc917 	ldw	r2,-220(fp)
8110a6a4:	10800058 	cmpnei	r2,r2,1
8110a6a8:	10000e1e 	bne	r2,zero,8110a6e4 <vParserCommTask+0x10c>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
8110a6ac:	00a04534 	movhi	r2,33044
8110a6b0:	10920604 	addi	r2,r2,18456
8110a6b4:	10800103 	ldbu	r2,4(r2)
8110a6b8:	10803fcc 	andi	r2,r2,255
8110a6bc:	1080201c 	xori	r2,r2,128
8110a6c0:	10bfe004 	addi	r2,r2,-128
8110a6c4:	10800858 	cmpnei	r2,r2,33
8110a6c8:	1000031e 	bne	r2,zero,8110a6d8 <vParserCommTask+0x100>
							eParserMode = sReplyParsing;
8110a6cc:	008000c4 	movi	r2,3
8110a6d0:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110a6d4:	00022a06 	br	8110af80 <vParserCommTask+0x9a8>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110a6d8:	00800084 	movi	r2,2
8110a6dc:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110a6e0:	00022706 	br	8110af80 <vParserCommTask+0x9a8>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
8110a6e4:	110fe880 	call	8110fe88 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110a6e8:	00022506 	br	8110af80 <vParserCommTask+0x9a8>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110a6ec:	110fdb80 	call	8110fdb8 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
8110a6f0:	00022306 	br	8110af80 <vParserCommTask+0x9a8>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
8110a6f4:	00a04534 	movhi	r2,33044
8110a6f8:	10920604 	addi	r2,r2,18456
8110a6fc:	10800143 	ldbu	r2,5(r2)
8110a700:	10803fcc 	andi	r2,r2,255
8110a704:	1080201c 	xori	r2,r2,128
8110a708:	10bfe004 	addi	r2,r2,-128
8110a70c:	10c01120 	cmpeqi	r3,r2,68
8110a710:	1800081e 	bne	r3,zero,8110a734 <vParserCommTask+0x15c>
8110a714:	10c01420 	cmpeqi	r3,r2,80
8110a718:	18000a1e 	bne	r3,zero,8110a744 <vParserCommTask+0x16c>
8110a71c:	108010e0 	cmpeqi	r2,r2,67
8110a720:	10004626 	beq	r2,zero,8110a83c <vParserCommTask+0x264>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
8110a724:	110dca00 	call	8110dca0 <vSendEthConf>
						eParserMode = sWaitingMessage;
8110a728:	00800044 	movi	r2,1
8110a72c:	e0bfc815 	stw	r2,-224(fp)
						break;
8110a730:	00004506 	br	8110a848 <vParserCommTask+0x270>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
8110a734:	110df300 	call	8110df30 <vSendTurnOff>
						eParserMode = sWaitingMessage;
8110a738:	00800044 	movi	r2,1
8110a73c:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110a740:	00004106 	br	8110a848 <vParserCommTask+0x270>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
8110a744:	d0a05017 	ldw	r2,-32448(gp)
8110a748:	100f883a 	mov	r7,r2
8110a74c:	01800384 	movi	r6,14
8110a750:	01400044 	movi	r5,1
8110a754:	01204534 	movhi	r4,33044
8110a758:	213e8604 	addi	r4,r4,-1512
8110a75c:	1113be40 	call	81113be4 <fwrite>
							memset(cPUSDebug,0,128);
8110a760:	e0bfdf04 	addi	r2,fp,-132
8110a764:	01802004 	movi	r6,128
8110a768:	000b883a 	mov	r5,zero
8110a76c:	1009883a 	mov	r4,r2
8110a770:	11147480 	call	81114748 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
8110a774:	00a04534 	movhi	r2,33044
8110a778:	10920604 	addi	r2,r2,18456
8110a77c:	1080028b 	ldhu	r2,10(r2)
8110a780:	117fffcc 	andi	r5,r2,65535
8110a784:	00a04534 	movhi	r2,33044
8110a788:	10920604 	addi	r2,r2,18456
8110a78c:	1080030b 	ldhu	r2,12(r2)
8110a790:	11bfffcc 	andi	r6,r2,65535
8110a794:	00a04534 	movhi	r2,33044
8110a798:	10920604 	addi	r2,r2,18456
8110a79c:	1080038b 	ldhu	r2,14(r2)
8110a7a0:	10ffffcc 	andi	r3,r2,65535
8110a7a4:	00a04534 	movhi	r2,33044
8110a7a8:	10920604 	addi	r2,r2,18456
8110a7ac:	1080040b 	ldhu	r2,16(r2)
8110a7b0:	113fffcc 	andi	r4,r2,65535
8110a7b4:	00a04534 	movhi	r2,33044
8110a7b8:	10920604 	addi	r2,r2,18456
8110a7bc:	1080048b 	ldhu	r2,18(r2)
8110a7c0:	10bfffcc 	andi	r2,r2,65535
8110a7c4:	e23fdf04 	addi	r8,fp,-132
8110a7c8:	d8800215 	stw	r2,8(sp)
8110a7cc:	d9000115 	stw	r4,4(sp)
8110a7d0:	d8c00015 	stw	r3,0(sp)
8110a7d4:	300f883a 	mov	r7,r6
8110a7d8:	280d883a 	mov	r6,r5
8110a7dc:	01604534 	movhi	r5,33044
8110a7e0:	297e8a04 	addi	r5,r5,-1496
8110a7e4:	4009883a 	mov	r4,r8
8110a7e8:	1114ef80 	call	81114ef8 <sprintf>
							debug(fp, cPUSDebug );
8110a7ec:	d0a05017 	ldw	r2,-32448(gp)
8110a7f0:	e0ffdf04 	addi	r3,fp,-132
8110a7f4:	180b883a 	mov	r5,r3
8110a7f8:	1009883a 	mov	r4,r2
8110a7fc:	11135480 	call	81113548 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
8110a800:	00a04534 	movhi	r2,33044
8110a804:	10920604 	addi	r2,r2,18456
8110a808:	1080038b 	ldhu	r2,14(r2)
8110a80c:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
8110a810:	00a04534 	movhi	r2,33044
8110a814:	10920604 	addi	r2,r2,18456
8110a818:	1080040b 	ldhu	r2,16(r2)
8110a81c:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
8110a820:	00a04534 	movhi	r2,33044
8110a824:	10920604 	addi	r2,r2,18456
8110a828:	1080048b 	ldhu	r2,18(r2)
8110a82c:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
8110a830:	00800104 	movi	r2,4
8110a834:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110a838:	00000306 	br	8110a848 <vParserCommTask+0x270>
					default:
						eParserMode = sWaitingMessage;
8110a83c:	00800044 	movi	r2,1
8110a840:	e0bfc815 	stw	r2,-224(fp)
						break;
8110a844:	0001883a 	nop
				}
				break;
8110a848:	0001cd06 	br	8110af80 <vParserCommTask+0x9a8>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
8110a84c:	00800044 	movi	r2,1
8110a850:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
8110a854:	e0bfc60b 	ldhu	r2,-232(fp)
8110a858:	10c01220 	cmpeqi	r3,r2,72
8110a85c:	1800091e 	bne	r3,zero,8110a884 <vParserCommTask+0x2ac>
8110a860:	10c014e0 	cmpeqi	r3,r2,83
8110a864:	1800091e 	bne	r3,zero,8110a88c <vParserCommTask+0x2b4>
8110a868:	10801120 	cmpeqi	r2,r2,68
8110a86c:	10000226 	beq	r2,zero,8110a878 <vParserCommTask+0x2a0>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
8110a870:	110df300 	call	8110df30 <vSendTurnOff>
						
						
                        break;
8110a874:	00000606 	br	8110a890 <vParserCommTask+0x2b8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
8110a878:	00800044 	movi	r2,1
8110a87c:	e0bfc815 	stw	r2,-224(fp)
                        break;
8110a880:	00000306 	br	8110a890 <vParserCommTask+0x2b8>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
8110a884:	0001883a 	nop
8110a888:	0001bd06 	br	8110af80 <vParserCommTask+0x9a8>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
8110a88c:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
8110a890:	0001bb06 	br	8110af80 <vParserCommTask+0x9a8>
			case sPusHandling:
				eParserMode = sWaitingMessage;
8110a894:	00800044 	movi	r2,1
8110a898:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
8110a89c:	e0bfc60b 	ldhu	r2,-232(fp)
8110a8a0:	10c03ea0 	cmpeqi	r3,r2,250
8110a8a4:	1800311e 	bne	r3,zero,8110a96c <vParserCommTask+0x394>
8110a8a8:	10c03ec8 	cmpgei	r3,r2,251
8110a8ac:	1800031e 	bne	r3,zero,8110a8bc <vParserCommTask+0x2e4>
8110a8b0:	10800460 	cmpeqi	r2,r2,17
8110a8b4:	1000061e 	bne	r2,zero,8110a8d0 <vParserCommTask+0x2f8>
8110a8b8:	0001aa06 	br	8110af64 <vParserCommTask+0x98c>
8110a8bc:	10c03ee0 	cmpeqi	r3,r2,251
8110a8c0:	1800621e 	bne	r3,zero,8110aa4c <vParserCommTask+0x474>
8110a8c4:	10803f20 	cmpeqi	r2,r2,252
8110a8c8:	1000ba1e 	bne	r2,zero,8110abb4 <vParserCommTask+0x5dc>
8110a8cc:	0001a506 	br	8110af64 <vParserCommTask+0x98c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
8110a8d0:	e0bfc68b 	ldhu	r2,-230(fp)
8110a8d4:	10800060 	cmpeqi	r2,r2,1
8110a8d8:	10000b26 	beq	r2,zero,8110a908 <vParserCommTask+0x330>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
8110a8dc:	d0a05017 	ldw	r2,-32448(gp)
8110a8e0:	100f883a 	mov	r7,r2
8110a8e4:	01800604 	movi	r6,24
8110a8e8:	01400044 	movi	r5,1
8110a8ec:	01204534 	movhi	r4,33044
8110a8f0:	213e9d04 	addi	r4,r4,-1420
8110a8f4:	1113be40 	call	81113be4 <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
8110a8f8:	e0bfc70b 	ldhu	r2,-228(fp)
8110a8fc:	1009883a 	mov	r4,r2
8110a900:	110e5880 	call	8110e588 <vTMPusTestConnection>

								break;
8110a904:	00001806 	br	8110a968 <vParserCommTask+0x390>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110a908:	e0bfdf04 	addi	r2,fp,-132
8110a90c:	01802004 	movi	r6,128
8110a910:	000b883a 	mov	r5,zero
8110a914:	1009883a 	mov	r4,r2
8110a918:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110a91c:	e13fc60b 	ldhu	r4,-232(fp)
8110a920:	e17fc68b 	ldhu	r5,-230(fp)
8110a924:	e0bfc70b 	ldhu	r2,-228(fp)
8110a928:	e0ffdf04 	addi	r3,fp,-132
8110a92c:	d8800015 	stw	r2,0(sp)
8110a930:	280f883a 	mov	r7,r5
8110a934:	200d883a 	mov	r6,r4
8110a938:	01604534 	movhi	r5,33044
8110a93c:	297ea404 	addi	r5,r5,-1392
8110a940:	1809883a 	mov	r4,r3
8110a944:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110a948:	d0a05017 	ldw	r2,-32448(gp)
8110a94c:	e0ffdf04 	addi	r3,fp,-132
8110a950:	180b883a 	mov	r5,r3
8110a954:	1009883a 	mov	r4,r2
8110a958:	11135480 	call	81113548 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
8110a95c:	00800044 	movi	r2,1
8110a960:	e0bfc815 	stw	r2,-224(fp)
								break;
8110a964:	0001883a 	nop
						}
                        break;
8110a968:	00018106 	br	8110af70 <vParserCommTask+0x998>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
8110a96c:	e0bfc68b 	ldhu	r2,-230(fp)
8110a970:	10c00f20 	cmpeqi	r3,r2,60
8110a974:	18000c1e 	bne	r3,zero,8110a9a8 <vParserCommTask+0x3d0>
8110a978:	10c00f60 	cmpeqi	r3,r2,61
8110a97c:	1800121e 	bne	r3,zero,8110a9c8 <vParserCommTask+0x3f0>
8110a980:	10800ee0 	cmpeqi	r2,r2,59
8110a984:	10001826 	beq	r2,zero,8110a9e8 <vParserCommTask+0x410>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
8110a988:	d0a05017 	ldw	r2,-32448(gp)
8110a98c:	100f883a 	mov	r7,r2
8110a990:	01800384 	movi	r6,14
8110a994:	01400044 	movi	r5,1
8110a998:	01204534 	movhi	r4,33044
8110a99c:	213eb404 	addi	r4,r4,-1328
8110a9a0:	1113be40 	call	81113be4 <fwrite>
								#endif

								
								break;
8110a9a4:	00002806 	br	8110aa48 <vParserCommTask+0x470>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
8110a9a8:	d0a05017 	ldw	r2,-32448(gp)
8110a9ac:	100f883a 	mov	r7,r2
8110a9b0:	018003c4 	movi	r6,15
8110a9b4:	01400044 	movi	r5,1
8110a9b8:	01204534 	movhi	r4,33044
8110a9bc:	213eb804 	addi	r4,r4,-1312
8110a9c0:	1113be40 	call	81113be4 <fwrite>
								#endif


								break;
8110a9c4:	00002006 	br	8110aa48 <vParserCommTask+0x470>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
8110a9c8:	d0a05017 	ldw	r2,-32448(gp)
8110a9cc:	100f883a 	mov	r7,r2
8110a9d0:	01800304 	movi	r6,12
8110a9d4:	01400044 	movi	r5,1
8110a9d8:	01204534 	movhi	r4,33044
8110a9dc:	213ebc04 	addi	r4,r4,-1296
8110a9e0:	1113be40 	call	81113be4 <fwrite>
								#endif


								break;
8110a9e4:	00001806 	br	8110aa48 <vParserCommTask+0x470>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110a9e8:	e0bfdf04 	addi	r2,fp,-132
8110a9ec:	01802004 	movi	r6,128
8110a9f0:	000b883a 	mov	r5,zero
8110a9f4:	1009883a 	mov	r4,r2
8110a9f8:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110a9fc:	e13fc60b 	ldhu	r4,-232(fp)
8110aa00:	e17fc68b 	ldhu	r5,-230(fp)
8110aa04:	e0bfc70b 	ldhu	r2,-228(fp)
8110aa08:	e0ffdf04 	addi	r3,fp,-132
8110aa0c:	d8800015 	stw	r2,0(sp)
8110aa10:	280f883a 	mov	r7,r5
8110aa14:	200d883a 	mov	r6,r4
8110aa18:	01604534 	movhi	r5,33044
8110aa1c:	297ea404 	addi	r5,r5,-1392
8110aa20:	1809883a 	mov	r4,r3
8110aa24:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110aa28:	d0a05017 	ldw	r2,-32448(gp)
8110aa2c:	e0ffdf04 	addi	r3,fp,-132
8110aa30:	180b883a 	mov	r5,r3
8110aa34:	1009883a 	mov	r4,r2
8110aa38:	11135480 	call	81113548 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110aa3c:	00800044 	movi	r2,1
8110aa40:	e0bfc815 	stw	r2,-224(fp)
								break;
8110aa44:	0001883a 	nop
						}
                        break;
8110aa48:	00014906 	br	8110af70 <vParserCommTask+0x998>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
8110aa4c:	00a04534 	movhi	r2,33044
8110aa50:	10920604 	addi	r2,r2,18456
8110aa54:	1080050b 	ldhu	r2,20(r2)
8110aa58:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
8110aa5c:	e0bfc68b 	ldhu	r2,-230(fp)
8110aa60:	10c000a0 	cmpeqi	r3,r2,2
8110aa64:	1800161e 	bne	r3,zero,8110aac0 <vParserCommTask+0x4e8>
8110aa68:	10c00160 	cmpeqi	r3,r2,5
8110aa6c:	1800261e 	bne	r3,zero,8110ab08 <vParserCommTask+0x530>
8110aa70:	10800060 	cmpeqi	r2,r2,1
8110aa74:	10003626 	beq	r2,zero,8110ab50 <vParserCommTask+0x578>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110aa78:	e0bfdf04 	addi	r2,fp,-132
8110aa7c:	01802004 	movi	r6,128
8110aa80:	000b883a 	mov	r5,zero
8110aa84:	1009883a 	mov	r4,r2
8110aa88:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110aa8c:	e0ffca0b 	ldhu	r3,-216(fp)
8110aa90:	e0bfdf04 	addi	r2,fp,-132
8110aa94:	180d883a 	mov	r6,r3
8110aa98:	01604534 	movhi	r5,33044
8110aa9c:	297ec004 	addi	r5,r5,-1280
8110aaa0:	1009883a 	mov	r4,r2
8110aaa4:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110aaa8:	d0a05017 	ldw	r2,-32448(gp)
8110aaac:	e0ffdf04 	addi	r3,fp,-132
8110aab0:	180b883a 	mov	r5,r3
8110aab4:	1009883a 	mov	r4,r2
8110aab8:	11135480 	call	81113548 <fprintf>
								#endif							


								break;
8110aabc:	00003c06 	br	8110abb0 <vParserCommTask+0x5d8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110aac0:	e0bfdf04 	addi	r2,fp,-132
8110aac4:	01802004 	movi	r6,128
8110aac8:	000b883a 	mov	r5,zero
8110aacc:	1009883a 	mov	r4,r2
8110aad0:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110aad4:	e0ffca0b 	ldhu	r3,-216(fp)
8110aad8:	e0bfdf04 	addi	r2,fp,-132
8110aadc:	180d883a 	mov	r6,r3
8110aae0:	01604534 	movhi	r5,33044
8110aae4:	297ecc04 	addi	r5,r5,-1232
8110aae8:	1009883a 	mov	r4,r2
8110aaec:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110aaf0:	d0a05017 	ldw	r2,-32448(gp)
8110aaf4:	e0ffdf04 	addi	r3,fp,-132
8110aaf8:	180b883a 	mov	r5,r3
8110aafc:	1009883a 	mov	r4,r2
8110ab00:	11135480 	call	81113548 <fprintf>
								#endif


								break;
8110ab04:	00002a06 	br	8110abb0 <vParserCommTask+0x5d8>
							case 5: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ab08:	e0bfdf04 	addi	r2,fp,-132
8110ab0c:	01802004 	movi	r6,128
8110ab10:	000b883a 	mov	r5,zero
8110ab14:	1009883a 	mov	r4,r2
8110ab18:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_TEST_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110ab1c:	e0ffca0b 	ldhu	r3,-216(fp)
8110ab20:	e0bfdf04 	addi	r2,fp,-132
8110ab24:	180d883a 	mov	r6,r3
8110ab28:	01604534 	movhi	r5,33044
8110ab2c:	297ed804 	addi	r5,r5,-1184
8110ab30:	1009883a 	mov	r4,r2
8110ab34:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ab38:	d0a05017 	ldw	r2,-32448(gp)
8110ab3c:	e0ffdf04 	addi	r3,fp,-132
8110ab40:	180b883a 	mov	r5,r3
8110ab44:	1009883a 	mov	r4,r2
8110ab48:	11135480 	call	81113548 <fprintf>
								#endif


								break;
8110ab4c:	00001806 	br	8110abb0 <vParserCommTask+0x5d8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ab50:	e0bfdf04 	addi	r2,fp,-132
8110ab54:	01802004 	movi	r6,128
8110ab58:	000b883a 	mov	r5,zero
8110ab5c:	1009883a 	mov	r4,r2
8110ab60:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110ab64:	e13fc60b 	ldhu	r4,-232(fp)
8110ab68:	e17fc68b 	ldhu	r5,-230(fp)
8110ab6c:	e0bfc70b 	ldhu	r2,-228(fp)
8110ab70:	e0ffdf04 	addi	r3,fp,-132
8110ab74:	d8800015 	stw	r2,0(sp)
8110ab78:	280f883a 	mov	r7,r5
8110ab7c:	200d883a 	mov	r6,r4
8110ab80:	01604534 	movhi	r5,33044
8110ab84:	297ea404 	addi	r5,r5,-1392
8110ab88:	1809883a 	mov	r4,r3
8110ab8c:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ab90:	d0a05017 	ldw	r2,-32448(gp)
8110ab94:	e0ffdf04 	addi	r3,fp,-132
8110ab98:	180b883a 	mov	r5,r3
8110ab9c:	1009883a 	mov	r4,r2
8110aba0:	11135480 	call	81113548 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110aba4:	00800044 	movi	r2,1
8110aba8:	e0bfc815 	stw	r2,-224(fp)
								break;
8110abac:	0001883a 	nop
						}
                        break;
8110abb0:	0000ef06 	br	8110af70 <vParserCommTask+0x998>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
8110abb4:	00a04534 	movhi	r2,33044
8110abb8:	10920604 	addi	r2,r2,18456
8110abbc:	1080050b 	ldhu	r2,20(r2)
8110abc0:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
8110abc4:	e0bfc68b 	ldhu	r2,-230(fp)
8110abc8:	10c000e0 	cmpeqi	r3,r2,3
8110abcc:	18000a1e 	bne	r3,zero,8110abf8 <vParserCommTask+0x620>
8110abd0:	10c00108 	cmpgei	r3,r2,4
8110abd4:	1800031e 	bne	r3,zero,8110abe4 <vParserCommTask+0x60c>
8110abd8:	108000a0 	cmpeqi	r2,r2,2
8110abdc:	10003c1e 	bne	r2,zero,8110acd0 <vParserCommTask+0x6f8>
8110abe0:	0000c706 	br	8110af00 <vParserCommTask+0x928>
8110abe4:	10c00120 	cmpeqi	r3,r2,4
8110abe8:	1800151e 	bne	r3,zero,8110ac40 <vParserCommTask+0x668>
8110abec:	10800160 	cmpeqi	r2,r2,5
8110abf0:	1000251e 	bne	r2,zero,8110ac88 <vParserCommTask+0x6b0>
8110abf4:	0000c206 	br	8110af00 <vParserCommTask+0x928>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110abf8:	e0bfdf04 	addi	r2,fp,-132
8110abfc:	01802004 	movi	r6,128
8110ac00:	000b883a 	mov	r5,zero
8110ac04:	1009883a 	mov	r4,r2
8110ac08:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110ac0c:	e0ffca0b 	ldhu	r3,-216(fp)
8110ac10:	e0bfdf04 	addi	r2,fp,-132
8110ac14:	180d883a 	mov	r6,r3
8110ac18:	01604534 	movhi	r5,33044
8110ac1c:	297ee704 	addi	r5,r5,-1124
8110ac20:	1009883a 	mov	r4,r2
8110ac24:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ac28:	d0a05017 	ldw	r2,-32448(gp)
8110ac2c:	e0ffdf04 	addi	r3,fp,-132
8110ac30:	180b883a 	mov	r5,r3
8110ac34:	1009883a 	mov	r4,r2
8110ac38:	11135480 	call	81113548 <fprintf>
								#endif


								break;
8110ac3c:	0000c806 	br	8110af60 <vParserCommTask+0x988>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ac40:	e0bfdf04 	addi	r2,fp,-132
8110ac44:	01802004 	movi	r6,128
8110ac48:	000b883a 	mov	r5,zero
8110ac4c:	1009883a 	mov	r4,r2
8110ac50:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110ac54:	e0ffca0b 	ldhu	r3,-216(fp)
8110ac58:	e0bfdf04 	addi	r2,fp,-132
8110ac5c:	180d883a 	mov	r6,r3
8110ac60:	01604534 	movhi	r5,33044
8110ac64:	297ef404 	addi	r5,r5,-1072
8110ac68:	1009883a 	mov	r4,r2
8110ac6c:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ac70:	d0a05017 	ldw	r2,-32448(gp)
8110ac74:	e0ffdf04 	addi	r3,fp,-132
8110ac78:	180b883a 	mov	r5,r3
8110ac7c:	1009883a 	mov	r4,r2
8110ac80:	11135480 	call	81113548 <fprintf>
								#endif


								break;
8110ac84:	0000b606 	br	8110af60 <vParserCommTask+0x988>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ac88:	e0bfdf04 	addi	r2,fp,-132
8110ac8c:	01802004 	movi	r6,128
8110ac90:	000b883a 	mov	r5,zero
8110ac94:	1009883a 	mov	r4,r2
8110ac98:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110ac9c:	e0ffca0b 	ldhu	r3,-216(fp)
8110aca0:	e0bfdf04 	addi	r2,fp,-132
8110aca4:	180d883a 	mov	r6,r3
8110aca8:	01604534 	movhi	r5,33044
8110acac:	297f0104 	addi	r5,r5,-1020
8110acb0:	1009883a 	mov	r4,r2
8110acb4:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110acb8:	d0a05017 	ldw	r2,-32448(gp)
8110acbc:	e0ffdf04 	addi	r3,fp,-132
8110acc0:	180b883a 	mov	r5,r3
8110acc4:	1009883a 	mov	r4,r2
8110acc8:	11135480 	call	81113548 <fprintf>
								#endif


								break;
8110accc:	0000a406 	br	8110af60 <vParserCommTask+0x988>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110acd0:	e0bfdf04 	addi	r2,fp,-132
8110acd4:	01802004 	movi	r6,128
8110acd8:	000b883a 	mov	r5,zero
8110acdc:	1009883a 	mov	r4,r2
8110ace0:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
8110ace4:	e0bfdf04 	addi	r2,fp,-132
8110ace8:	00d4d7f4 	movhi	r3,21343
8110acec:	18d0d504 	addi	r3,r3,17236
8110acf0:	10c00015 	stw	r3,0(r2)
8110acf4:	00d7d374 	movhi	r3,24397
8110acf8:	18d050c4 	addi	r3,r3,16707
8110acfc:	10c00115 	stw	r3,4(r2)
8110ad00:	00d7d5f4 	movhi	r3,24407
8110ad04:	18d414c4 	addi	r3,r3,20563
8110ad08:	10c00215 	stw	r3,8(r2)
8110ad0c:	00d41074 	movhi	r3,20545
8110ad10:	18d35484 	addi	r3,r3,19794
8110ad14:	10c00315 	stw	r3,12(r2)
8110ad18:	00d393f4 	movhi	r3,20047
8110ad1c:	18d0d7c4 	addi	r3,r3,17247
8110ad20:	10c00415 	stw	r3,16(r2)
8110ad24:	00d7d1f4 	movhi	r3,24391
8110ad28:	18d25184 	addi	r3,r3,18758
8110ad2c:	10c00515 	stw	r3,20(r2)
8110ad30:	00d05134 	movhi	r3,16708
8110ad34:	18d41544 	addi	r3,r3,20565
8110ad38:	10c00615 	stw	r3,24(r2)
8110ad3c:	00cf8b74 	movhi	r3,15917
8110ad40:	18d15504 	addi	r3,r3,17748
8110ad44:	10c00715 	stw	r3,28(r2)
8110ad48:	00c00284 	movi	r3,10
8110ad4c:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
8110ad50:	d0a05017 	ldw	r2,-32448(gp)
8110ad54:	e0ffdf04 	addi	r3,fp,-132
8110ad58:	180b883a 	mov	r5,r3
8110ad5c:	1009883a 	mov	r4,r2
8110ad60:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110ad64:	e0ffca0b 	ldhu	r3,-216(fp)
8110ad68:	e0bfdf04 	addi	r2,fp,-132
8110ad6c:	180d883a 	mov	r6,r3
8110ad70:	01604534 	movhi	r5,33044
8110ad74:	297f0d04 	addi	r5,r5,-972
8110ad78:	1009883a 	mov	r4,r2
8110ad7c:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ad80:	d0a05017 	ldw	r2,-32448(gp)
8110ad84:	e0ffdf04 	addi	r3,fp,-132
8110ad88:	180b883a 	mov	r5,r3
8110ad8c:	1009883a 	mov	r4,r2
8110ad90:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
8110ad94:	00a04534 	movhi	r2,33044
8110ad98:	10920604 	addi	r2,r2,18456
8110ad9c:	1080058b 	ldhu	r2,22(r2)
8110ada0:	10ffffcc 	andi	r3,r2,65535
8110ada4:	e0bfdf04 	addi	r2,fp,-132
8110ada8:	180d883a 	mov	r6,r3
8110adac:	01604534 	movhi	r5,33044
8110adb0:	297f1404 	addi	r5,r5,-944
8110adb4:	1009883a 	mov	r4,r2
8110adb8:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110adbc:	d0a05017 	ldw	r2,-32448(gp)
8110adc0:	e0ffdf04 	addi	r3,fp,-132
8110adc4:	180b883a 	mov	r5,r3
8110adc8:	1009883a 	mov	r4,r2
8110adcc:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
8110add0:	00a04534 	movhi	r2,33044
8110add4:	10920604 	addi	r2,r2,18456
8110add8:	1080060b 	ldhu	r2,24(r2)
8110addc:	10ffffcc 	andi	r3,r2,65535
8110ade0:	e0bfdf04 	addi	r2,fp,-132
8110ade4:	180d883a 	mov	r6,r3
8110ade8:	01604534 	movhi	r5,33044
8110adec:	297f1804 	addi	r5,r5,-928
8110adf0:	1009883a 	mov	r4,r2
8110adf4:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110adf8:	d0a05017 	ldw	r2,-32448(gp)
8110adfc:	e0ffdf04 	addi	r3,fp,-132
8110ae00:	180b883a 	mov	r5,r3
8110ae04:	1009883a 	mov	r4,r2
8110ae08:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
8110ae0c:	00a04534 	movhi	r2,33044
8110ae10:	10920604 	addi	r2,r2,18456
8110ae14:	1080068b 	ldhu	r2,26(r2)
8110ae18:	10ffffcc 	andi	r3,r2,65535
8110ae1c:	e0bfdf04 	addi	r2,fp,-132
8110ae20:	180d883a 	mov	r6,r3
8110ae24:	01604534 	movhi	r5,33044
8110ae28:	297f1d04 	addi	r5,r5,-908
8110ae2c:	1009883a 	mov	r4,r2
8110ae30:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ae34:	d0a05017 	ldw	r2,-32448(gp)
8110ae38:	e0ffdf04 	addi	r3,fp,-132
8110ae3c:	180b883a 	mov	r5,r3
8110ae40:	1009883a 	mov	r4,r2
8110ae44:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
8110ae48:	00a04534 	movhi	r2,33044
8110ae4c:	10920604 	addi	r2,r2,18456
8110ae50:	1080070b 	ldhu	r2,28(r2)
8110ae54:	10ffffcc 	andi	r3,r2,65535
8110ae58:	e0bfdf04 	addi	r2,fp,-132
8110ae5c:	180d883a 	mov	r6,r3
8110ae60:	01604534 	movhi	r5,33044
8110ae64:	297f2404 	addi	r5,r5,-880
8110ae68:	1009883a 	mov	r4,r2
8110ae6c:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110ae70:	d0a05017 	ldw	r2,-32448(gp)
8110ae74:	e0ffdf04 	addi	r3,fp,-132
8110ae78:	180b883a 	mov	r5,r3
8110ae7c:	1009883a 	mov	r4,r2
8110ae80:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
8110ae84:	00a04534 	movhi	r2,33044
8110ae88:	10920604 	addi	r2,r2,18456
8110ae8c:	1080078b 	ldhu	r2,30(r2)
8110ae90:	10ffffcc 	andi	r3,r2,65535
8110ae94:	e0bfdf04 	addi	r2,fp,-132
8110ae98:	180d883a 	mov	r6,r3
8110ae9c:	01604534 	movhi	r5,33044
8110aea0:	297f2b04 	addi	r5,r5,-852
8110aea4:	1009883a 	mov	r4,r2
8110aea8:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110aeac:	d0a05017 	ldw	r2,-32448(gp)
8110aeb0:	e0ffdf04 	addi	r3,fp,-132
8110aeb4:	180b883a 	mov	r5,r3
8110aeb8:	1009883a 	mov	r4,r2
8110aebc:	11135480 	call	81113548 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
8110aec0:	00a04534 	movhi	r2,33044
8110aec4:	10920604 	addi	r2,r2,18456
8110aec8:	1080080b 	ldhu	r2,32(r2)
8110aecc:	10ffffcc 	andi	r3,r2,65535
8110aed0:	e0bfdf04 	addi	r2,fp,-132
8110aed4:	180d883a 	mov	r6,r3
8110aed8:	01604534 	movhi	r5,33044
8110aedc:	297f3104 	addi	r5,r5,-828
8110aee0:	1009883a 	mov	r4,r2
8110aee4:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110aee8:	d0a05017 	ldw	r2,-32448(gp)
8110aeec:	e0ffdf04 	addi	r3,fp,-132
8110aef0:	180b883a 	mov	r5,r3
8110aef4:	1009883a 	mov	r4,r2
8110aef8:	11135480 	call	81113548 <fprintf>
								#endif



								break;
8110aefc:	00001806 	br	8110af60 <vParserCommTask+0x988>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110af00:	e0bfdf04 	addi	r2,fp,-132
8110af04:	01802004 	movi	r6,128
8110af08:	000b883a 	mov	r5,zero
8110af0c:	1009883a 	mov	r4,r2
8110af10:	11147480 	call	81114748 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110af14:	e13fc60b 	ldhu	r4,-232(fp)
8110af18:	e17fc68b 	ldhu	r5,-230(fp)
8110af1c:	e0bfc70b 	ldhu	r2,-228(fp)
8110af20:	e0ffdf04 	addi	r3,fp,-132
8110af24:	d8800015 	stw	r2,0(sp)
8110af28:	280f883a 	mov	r7,r5
8110af2c:	200d883a 	mov	r6,r4
8110af30:	01604534 	movhi	r5,33044
8110af34:	297ea404 	addi	r5,r5,-1392
8110af38:	1809883a 	mov	r4,r3
8110af3c:	1114ef80 	call	81114ef8 <sprintf>
									debug(fp, cPUSDebug );
8110af40:	d0a05017 	ldw	r2,-32448(gp)
8110af44:	e0ffdf04 	addi	r3,fp,-132
8110af48:	180b883a 	mov	r5,r3
8110af4c:	1009883a 	mov	r4,r2
8110af50:	11135480 	call	81113548 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110af54:	00800044 	movi	r2,1
8110af58:	e0bfc815 	stw	r2,-224(fp)
								break;
8110af5c:	0001883a 	nop
						}
                        break;
8110af60:	00000306 	br	8110af70 <vParserCommTask+0x998>
                    default:
						eParserMode = sWaitingMessage;
8110af64:	00800044 	movi	r2,1
8110af68:	e0bfc815 	stw	r2,-224(fp)
                        break;
8110af6c:	0001883a 	nop
                }
				break;				
8110af70:	00000306 	br	8110af80 <vParserCommTask+0x9a8>
			default:
				eParserMode = sWaitingMessage;
8110af74:	00800044 	movi	r2,1
8110af78:	e0bfc815 	stw	r2,-224(fp)
				break;
8110af7c:	0001883a 	nop
		}
	}
8110af80:	003da506 	br	8110a618 <__reset+0xfb0ea618>

8110af84 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
8110af84:	defffb04 	addi	sp,sp,-20
8110af88:	de00012e 	bgeu	sp,et,8110af90 <getPreParsedPacket+0xc>
8110af8c:	003b68fa 	trap	3
8110af90:	dfc00415 	stw	ra,16(sp)
8110af94:	df000315 	stw	fp,12(sp)
8110af98:	df000304 	addi	fp,sp,12
8110af9c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110afa0:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
8110afa4:	d0a05717 	ldw	r2,-32420(gp)
8110afa8:	e0fffe44 	addi	r3,fp,-7
8110afac:	180d883a 	mov	r6,r3
8110afb0:	000b883a 	mov	r5,zero
8110afb4:	1009883a 	mov	r4,r2
8110afb8:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
8110afbc:	e0bffe43 	ldbu	r2,-7(fp)
8110afc0:	10803fcc 	andi	r2,r2,255
8110afc4:	10002e1e 	bne	r2,zero,8110b080 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
8110afc8:	e03ffe05 	stb	zero,-8(fp)
8110afcc:	00002506 	br	8110b064 <getPreParsedPacket+0xe0>
		{

            if ( xPreParsed[i].cType != 0 ) {
8110afd0:	e0fffe03 	ldbu	r3,-8(fp)
8110afd4:	00a04574 	movhi	r2,33045
8110afd8:	108ab004 	addi	r2,r2,10944
8110afdc:	18c01324 	muli	r3,r3,76
8110afe0:	10c5883a 	add	r2,r2,r3
8110afe4:	10800104 	addi	r2,r2,4
8110afe8:	10800003 	ldbu	r2,0(r2)
8110afec:	10803fcc 	andi	r2,r2,255
8110aff0:	1080201c 	xori	r2,r2,128
8110aff4:	10bfe004 	addi	r2,r2,-128
8110aff8:	10001726 	beq	r2,zero,8110b058 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
8110affc:	e0fffe03 	ldbu	r3,-8(fp)
8110b000:	e13fff17 	ldw	r4,-4(fp)
8110b004:	00a04574 	movhi	r2,33045
8110b008:	108ab004 	addi	r2,r2,10944
8110b00c:	18c01324 	muli	r3,r3,76
8110b010:	10c5883a 	add	r2,r2,r3
8110b014:	2007883a 	mov	r3,r4
8110b018:	1009883a 	mov	r4,r2
8110b01c:	00801304 	movi	r2,76
8110b020:	100d883a 	mov	r6,r2
8110b024:	200b883a 	mov	r5,r4
8110b028:	1809883a 	mov	r4,r3
8110b02c:	11145f80 	call	811145f8 <memcpy>
                bSuccess = TRUE;
8110b030:	00800044 	movi	r2,1
8110b034:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
8110b038:	e0fffe03 	ldbu	r3,-8(fp)
8110b03c:	00a04574 	movhi	r2,33045
8110b040:	108ab004 	addi	r2,r2,10944
8110b044:	18c01324 	muli	r3,r3,76
8110b048:	10c5883a 	add	r2,r2,r3
8110b04c:	10800104 	addi	r2,r2,4
8110b050:	10000005 	stb	zero,0(r2)
                break;
8110b054:	00000606 	br	8110b070 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
8110b058:	e0bffe03 	ldbu	r2,-8(fp)
8110b05c:	10800044 	addi	r2,r2,1
8110b060:	e0bffe05 	stb	r2,-8(fp)
8110b064:	e0bffe03 	ldbu	r2,-8(fp)
8110b068:	10800230 	cmpltui	r2,r2,8
8110b06c:	103fd81e 	bne	r2,zero,8110afd0 <__reset+0xfb0eafd0>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110b070:	d0a05717 	ldw	r2,-32420(gp)
8110b074:	1009883a 	mov	r4,r2
8110b078:	112fca00 	call	8112fca0 <OSMutexPost>
8110b07c:	00000106 	br	8110b084 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110b080:	110fe200 	call	8110fe20 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
8110b084:	e0bffd17 	ldw	r2,-12(fp)
}
8110b088:	e037883a 	mov	sp,fp
8110b08c:	dfc00117 	ldw	ra,4(sp)
8110b090:	df000017 	ldw	fp,0(sp)
8110b094:	dec00204 	addi	sp,sp,8
8110b098:	f800283a 	ret

8110b09c <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
8110b09c:	defffc04 	addi	sp,sp,-16
8110b0a0:	de00012e 	bgeu	sp,et,8110b0a8 <bTrySendSemaphoreCommInit+0xc>
8110b0a4:	003b68fa 	trap	3
8110b0a8:	dfc00315 	stw	ra,12(sp)
8110b0ac:	df000215 	stw	fp,8(sp)
8110b0b0:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
8110b0b4:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
8110b0b8:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
8110b0bc:	d0a05017 	ldw	r2,-32448(gp)
8110b0c0:	100f883a 	mov	r7,r2
8110b0c4:	01800e84 	movi	r6,58
8110b0c8:	01400044 	movi	r5,1
8110b0cc:	01204534 	movhi	r4,33044
8110b0d0:	213f3704 	addi	r4,r4,-804
8110b0d4:	1113be40 	call	81113be4 <fwrite>
	#endif

	ucCountRetries = 0;
8110b0d8:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
8110b0dc:	e0bfff03 	ldbu	r2,-4(fp)
8110b0e0:	10800044 	addi	r2,r2,1
8110b0e4:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
8110b0e8:	01000c84 	movi	r4,50
8110b0ec:	11335940 	call	81133594 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
8110b0f0:	d0a04e17 	ldw	r2,-32456(gp)
8110b0f4:	1009883a 	mov	r4,r2
8110b0f8:	1131a900 	call	81131a90 <OSSemPost>
8110b0fc:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110b100:	e0bfff43 	ldbu	r2,-3(fp)
8110b104:	10000326 	beq	r2,zero,8110b114 <bTrySendSemaphoreCommInit+0x78>
8110b108:	e0bfff03 	ldbu	r2,-4(fp)
8110b10c:	108002f0 	cmpltui	r2,r2,11
8110b110:	103ff21e 	bne	r2,zero,8110b0dc <__reset+0xfb0eb0dc>

	if ( error_code == OS_ERR_NONE ) {
8110b114:	e0bfff43 	ldbu	r2,-3(fp)
8110b118:	1000021e 	bne	r2,zero,8110b124 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
8110b11c:	00800044 	movi	r2,1
8110b120:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
8110b124:	e0bffe17 	ldw	r2,-8(fp)
}
8110b128:	e037883a 	mov	sp,fp
8110b12c:	dfc00117 	ldw	ra,4(sp)
8110b130:	df000017 	ldw	fp,0(sp)
8110b134:	dec00204 	addi	sp,sp,8
8110b138:	f800283a 	ret

8110b13c <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
8110b13c:	deffab04 	addi	sp,sp,-340
8110b140:	de00012e 	bgeu	sp,et,8110b148 <vReceiverUartTask+0xc>
8110b144:	003b68fa 	trap	3
8110b148:	dfc05415 	stw	ra,336(sp)
8110b14c:	df005315 	stw	fp,332(sp)
8110b150:	df005304 	addi	fp,sp,332
8110b154:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b158:	e03fae15 	stw	zero,-328(fp)
    char cReceive[SIZE_RCV_BUFFER+64];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"Receiver UART Task. (Task on)\n");
8110b15c:	d0a05017 	ldw	r2,-32448(gp)
8110b160:	100f883a 	mov	r7,r2
8110b164:	01800784 	movi	r6,30
8110b168:	01400044 	movi	r5,1
8110b16c:	01204534 	movhi	r4,33044
8110b170:	213f4604 	addi	r4,r4,-744
8110b174:	1113be40 	call	81113be4 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
8110b178:	e03fad15 	stw	zero,-332(fp)

    for(;;) {

        switch (eReaderRXMode)
8110b17c:	e0bfad17 	ldw	r2,-332(fp)
8110b180:	10c00060 	cmpeqi	r3,r2,1
8110b184:	1800091e 	bne	r3,zero,8110b1ac <vReceiverUartTask+0x70>
8110b188:	0080052e 	bgeu	zero,r2,8110b1a0 <vReceiverUartTask+0x64>
8110b18c:	10c000a0 	cmpeqi	r3,r2,2
8110b190:	18005d1e 	bne	r3,zero,8110b308 <vReceiverUartTask+0x1cc>
8110b194:	108000e0 	cmpeqi	r2,r2,3
8110b198:	10006e1e 	bne	r2,zero,8110b354 <vReceiverUartTask+0x218>
8110b19c:	00007706 	br	8110b37c <vReceiverUartTask+0x240>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110b1a0:	00800044 	movi	r2,1
8110b1a4:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b1a8:	00007706 	br	8110b388 <vReceiverUartTask+0x24c>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
8110b1ac:	e0bfaf04 	addi	r2,fp,-324
8110b1b0:	01802004 	movi	r6,128
8110b1b4:	000b883a 	mov	r5,zero
8110b1b8:	1009883a 	mov	r4,r2
8110b1bc:	11147480 	call	81114748 <memset>
                scanf("%s", cReceive);
8110b1c0:	e0bfcf04 	addi	r2,fp,-196
8110b1c4:	100b883a 	mov	r5,r2
8110b1c8:	01204534 	movhi	r4,33044
8110b1cc:	213f4e04 	addi	r4,r4,-712
8110b1d0:	1114e1c0 	call	81114e1c <scanf>
                memcpy(cReceiveBuffer, cReceive, (SIZE_RCV_BUFFER -1) ); /* Make that there's a zero terminator */
8110b1d4:	e0ffcf04 	addi	r3,fp,-196
8110b1d8:	e0bfaf04 	addi	r2,fp,-324
8110b1dc:	01801fc4 	movi	r6,127
8110b1e0:	180b883a 	mov	r5,r3
8110b1e4:	1009883a 	mov	r4,r2
8110b1e8:	11145f80 	call	811145f8 <memcpy>
                bSuccess = bPreParserV2( cReceiveBuffer , &xPreParsedReader );
8110b1ec:	e0bfaf04 	addi	r2,fp,-324
8110b1f0:	01604534 	movhi	r5,33044
8110b1f4:	29521904 	addi	r5,r5,18532
8110b1f8:	1009883a 	mov	r4,r2
8110b1fc:	110b7e00 	call	8110b7e0 <bPreParserV2>
8110b200:	e0bfae15 	stw	r2,-328(fp)

                if ( bSuccess == TRUE ) {
8110b204:	e0bfae17 	ldw	r2,-328(fp)
8110b208:	10800058 	cmpnei	r2,r2,1
8110b20c:	1000281e 	bne	r2,zero,8110b2b0 <vReceiverUartTask+0x174>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
8110b210:	00a04534 	movhi	r2,33044
8110b214:	10921904 	addi	r2,r2,18532
8110b218:	10800103 	ldbu	r2,4(r2)
8110b21c:	10803fcc 	andi	r2,r2,255
8110b220:	1080201c 	xori	r2,r2,128
8110b224:	10bfe004 	addi	r2,r2,-128
8110b228:	10800fe0 	cmpeqi	r2,r2,63
8110b22c:	1000081e 	bne	r2,zero,8110b250 <vReceiverUartTask+0x114>
8110b230:	00a04534 	movhi	r2,33044
8110b234:	10921904 	addi	r2,r2,18532
8110b238:	10800103 	ldbu	r2,4(r2)
8110b23c:	10803fcc 	andi	r2,r2,255
8110b240:	1080201c 	xori	r2,r2,128
8110b244:	10bfe004 	addi	r2,r2,-128
8110b248:	10800858 	cmpnei	r2,r2,33
8110b24c:	1000031e 	bne	r2,zero,8110b25c <vReceiverUartTask+0x120>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
8110b250:	00800084 	movi	r2,2
8110b254:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b258:	00004b06 	br	8110b388 <vReceiverUartTask+0x24c>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        /* If is a Nack, do nothing. The packet will be retransmited by the timeout checker. */
                        if ( xPreParsedReader.cType == NACK_CHAR ) {
8110b25c:	00a04534 	movhi	r2,33044
8110b260:	10921904 	addi	r2,r2,18532
8110b264:	10800103 	ldbu	r2,4(r2)
8110b268:	10803fcc 	andi	r2,r2,255
8110b26c:	1080201c 	xori	r2,r2,128
8110b270:	10bfe004 	addi	r2,r2,-128
8110b274:	108008d8 	cmpnei	r2,r2,35
8110b278:	10000a1e 	bne	r2,zero,8110b2a4 <vReceiverUartTask+0x168>
                            eReaderRXMode = sGetRxUart;
8110b27c:	00800044 	movi	r2,1
8110b280:	e0bfad15 	stw	r2,-332(fp)
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
8110b284:	d0a05017 	ldw	r2,-32448(gp)
8110b288:	100f883a 	mov	r7,r2
8110b28c:	018006c4 	movi	r6,27
8110b290:	01400044 	movi	r5,1
8110b294:	01204534 	movhi	r4,33044
8110b298:	213f4f04 	addi	r4,r4,-708
8110b29c:	1113be40 	call	81113be4 <fwrite>
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b2a0:	00003906 	br	8110b388 <vReceiverUartTask+0x24c>
                            eReaderRXMode = sGetRxUart;
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
                            #endif
                        } else
                            eReaderRXMode = sSendToACKReceiver;
8110b2a4:	008000c4 	movi	r2,3
8110b2a8:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b2ac:	00003606 	br	8110b388 <vReceiverUartTask+0x24c>

                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110b2b0:	00a04534 	movhi	r2,33044
8110b2b4:	10921904 	addi	r2,r2,18532
8110b2b8:	00c008c4 	movi	r3,35
8110b2bc:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = '.';
8110b2c0:	00a04534 	movhi	r2,33044
8110b2c4:	10921904 	addi	r2,r2,18532
8110b2c8:	00c00b84 	movi	r3,46
8110b2cc:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110b2d0:	00a04534 	movhi	r2,33044
8110b2d4:	10921904 	addi	r2,r2,18532
8110b2d8:	00c00044 	movi	r3,1
8110b2dc:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110b2e0:	01204534 	movhi	r4,33044
8110b2e4:	21121904 	addi	r4,r4,18532
8110b2e8:	110b4c80 	call	8110b4c8 <setPreAckSenderFreePos>
8110b2ec:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110b2f0:	e0bfae17 	ldw	r2,-328(fp)
8110b2f4:	1000011e 	bne	r2,zero,8110b2fc <vReceiverUartTask+0x1c0>
                        vFailSendNack();
8110b2f8:	110ff580 	call	8110ff58 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
8110b2fc:	00800044 	movi	r2,1
8110b300:	e0bfad15 	stw	r2,-332(fp)
                }

                break;
8110b304:	00002006 	br	8110b388 <vReceiverUartTask+0x24c>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110b308:	01204534 	movhi	r4,33044
8110b30c:	21121904 	addi	r4,r4,18532
8110b310:	110b4c80 	call	8110b4c8 <setPreAckSenderFreePos>
8110b314:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == TRUE ) {
8110b318:	e0bfae17 	ldw	r2,-328(fp)
8110b31c:	10800058 	cmpnei	r2,r2,1
8110b320:	1000081e 	bne	r2,zero,8110b344 <vReceiverUartTask+0x208>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
8110b324:	01204534 	movhi	r4,33044
8110b328:	21121904 	addi	r4,r4,18532
8110b32c:	110b38c0 	call	8110b38c <setPreParsedFreePos>
8110b330:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110b334:	e0bfae17 	ldw	r2,-328(fp)
8110b338:	1000031e 	bne	r2,zero,8110b348 <vReceiverUartTask+0x20c>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110b33c:	11100280 	call	81110028 <vFailSetPreParsedBuffer>
8110b340:	00000106 	br	8110b348 <vReceiverUartTask+0x20c>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110b344:	110ffc00 	call	8110ffc0 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110b348:	00800044 	movi	r2,1
8110b34c:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b350:	00000d06 	br	8110b388 <vReceiverUartTask+0x24c>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110b354:	01204534 	movhi	r4,33044
8110b358:	21121904 	addi	r4,r4,18532
8110b35c:	110b6440 	call	8110b644 <setPreAckReceiverFreePos>
8110b360:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == FALSE ) {
8110b364:	e0bfae17 	ldw	r2,-328(fp)
8110b368:	1000011e 	bne	r2,zero,8110b370 <vReceiverUartTask+0x234>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110b36c:	11100900 	call	81110090 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110b370:	00800044 	movi	r2,1
8110b374:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b378:	00000306 	br	8110b388 <vReceiverUartTask+0x24c>
            default:
                eReaderRXMode = sGetRxUart;
8110b37c:	00800044 	movi	r2,1
8110b380:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b384:	0001883a 	nop
        }

    }
8110b388:	003f7c06 	br	8110b17c <__reset+0xfb0eb17c>

8110b38c <setPreParsedFreePos>:
}


/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110b38c:	defffb04 	addi	sp,sp,-20
8110b390:	de00012e 	bgeu	sp,et,8110b398 <setPreParsedFreePos+0xc>
8110b394:	003b68fa 	trap	3
8110b398:	dfc00415 	stw	ra,16(sp)
8110b39c:	df000315 	stw	fp,12(sp)
8110b3a0:	df000304 	addi	fp,sp,12
8110b3a4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b3a8:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110b3ac:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110b3b0:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110b3b4:	d0a05717 	ldw	r2,-32420(gp)
8110b3b8:	e0fffe44 	addi	r3,fp,-7
8110b3bc:	180d883a 	mov	r6,r3
8110b3c0:	01400284 	movi	r5,10
8110b3c4:	1009883a 	mov	r4,r2
8110b3c8:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110b3cc:	e0bffe43 	ldbu	r2,-7(fp)
8110b3d0:	10803fcc 	andi	r2,r2,255
8110b3d4:	1000361e 	bne	r2,zero,8110b4b0 <setPreParsedFreePos+0x124>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110b3d8:	e03ffe05 	stb	zero,-8(fp)
8110b3dc:	00002e06 	br	8110b498 <setPreParsedFreePos+0x10c>
        {
            if ( xPreParsed[i].cType == 0 ) {
8110b3e0:	e0fffe03 	ldbu	r3,-8(fp)
8110b3e4:	00a04574 	movhi	r2,33045
8110b3e8:	108ab004 	addi	r2,r2,10944
8110b3ec:	18c01324 	muli	r3,r3,76
8110b3f0:	10c5883a 	add	r2,r2,r3
8110b3f4:	10800104 	addi	r2,r2,4
8110b3f8:	10800003 	ldbu	r2,0(r2)
8110b3fc:	10803fcc 	andi	r2,r2,255
8110b400:	1080201c 	xori	r2,r2,128
8110b404:	10bfe004 	addi	r2,r2,-128
8110b408:	1000201e 	bne	r2,zero,8110b48c <setPreParsedFreePos+0x100>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xPreParsed[i] = (*xPrePReader);
8110b40c:	e0fffe03 	ldbu	r3,-8(fp)
8110b410:	00a04574 	movhi	r2,33045
8110b414:	108ab004 	addi	r2,r2,10944
8110b418:	18c01324 	muli	r3,r3,76
8110b41c:	10c7883a 	add	r3,r2,r3
8110b420:	e0bfff17 	ldw	r2,-4(fp)
8110b424:	1009883a 	mov	r4,r2
8110b428:	00801304 	movi	r2,76
8110b42c:	100d883a 	mov	r6,r2
8110b430:	200b883a 	mov	r5,r4
8110b434:	1809883a 	mov	r4,r3
8110b438:	11145f80 	call	811145f8 <memcpy>
                error_code = OSSemPost(xSemCountPreParsed);
8110b43c:	d0a05217 	ldw	r2,-32440(gp)
8110b440:	1009883a 	mov	r4,r2
8110b444:	1131a900 	call	81131a90 <OSSemPost>
8110b448:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110b44c:	e0bffe43 	ldbu	r2,-7(fp)
8110b450:	10803fcc 	andi	r2,r2,255
8110b454:	1000031e 	bne	r2,zero,8110b464 <setPreParsedFreePos+0xd8>
                    bSuccess = TRUE;
8110b458:	00800044 	movi	r2,1
8110b45c:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreParsedSemaphore();
                    xPreParsed[i].cType = 0;
                    bSuccess = FALSE;
                }
                break;
8110b460:	00001006 	br	8110b4a4 <setPreParsedFreePos+0x118>
                xPreParsed[i] = (*xPrePReader);
                error_code = OSSemPost(xSemCountPreParsed);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreParsedSemaphore();
8110b464:	110f6780 	call	8110f678 <vFailSendPreParsedSemaphore>
                    xPreParsed[i].cType = 0;
8110b468:	e0fffe03 	ldbu	r3,-8(fp)
8110b46c:	00a04574 	movhi	r2,33045
8110b470:	108ab004 	addi	r2,r2,10944
8110b474:	18c01324 	muli	r3,r3,76
8110b478:	10c5883a 	add	r2,r2,r3
8110b47c:	10800104 	addi	r2,r2,4
8110b480:	10000005 	stb	zero,0(r2)
                    bSuccess = FALSE;
8110b484:	e03ffd15 	stw	zero,-12(fp)
                }
                break;
8110b488:	00000606 	br	8110b4a4 <setPreParsedFreePos+0x118>
    bSuccess = FALSE;
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110b48c:	e0bffe03 	ldbu	r2,-8(fp)
8110b490:	10800044 	addi	r2,r2,1
8110b494:	e0bffe05 	stb	r2,-8(fp)
8110b498:	e0bffe03 	ldbu	r2,-8(fp)
8110b49c:	10800230 	cmpltui	r2,r2,8
8110b4a0:	103fcf1e 	bne	r2,zero,8110b3e0 <__reset+0xfb0eb3e0>
                    bSuccess = FALSE;
                }
                break;
            }
        }
        OSMutexPost(xMutexPreParsed);
8110b4a4:	d0a05717 	ldw	r2,-32420(gp)
8110b4a8:	1009883a 	mov	r4,r2
8110b4ac:	112fca00 	call	8112fca0 <OSMutexPost>
    }
    return bSuccess;
8110b4b0:	e0bffd17 	ldw	r2,-12(fp)
}
8110b4b4:	e037883a 	mov	sp,fp
8110b4b8:	dfc00117 	ldw	ra,4(sp)
8110b4bc:	df000017 	ldw	fp,0(sp)
8110b4c0:	dec00204 	addi	sp,sp,8
8110b4c4:	f800283a 	ret

8110b4c8 <setPreAckSenderFreePos>:



/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110b4c8:	defffb04 	addi	sp,sp,-20
8110b4cc:	de00012e 	bgeu	sp,et,8110b4d4 <setPreAckSenderFreePos+0xc>
8110b4d0:	003b68fa 	trap	3
8110b4d4:	dfc00415 	stw	ra,16(sp)
8110b4d8:	df000315 	stw	fp,12(sp)
8110b4dc:	df000304 	addi	fp,sp,12
8110b4e0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b4e4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110b4e8:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110b4ec:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110b4f0:	d0a05d17 	ldw	r2,-32396(gp)
8110b4f4:	e0fffe44 	addi	r3,fp,-7
8110b4f8:	180d883a 	mov	r6,r3
8110b4fc:	01400284 	movi	r5,10
8110b500:	1009883a 	mov	r4,r2
8110b504:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110b508:	e0bffe43 	ldbu	r2,-7(fp)
8110b50c:	10803fcc 	andi	r2,r2,255
8110b510:	1000461e 	bne	r2,zero,8110b62c <setPreAckSenderFreePos+0x164>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110b514:	e03ffe05 	stb	zero,-8(fp)
8110b518:	00003e06 	br	8110b614 <setPreAckSenderFreePos+0x14c>
        {
            if ( xSenderACK[i].cType == 0 ) {
8110b51c:	e0fffe03 	ldbu	r3,-8(fp)
8110b520:	00a04574 	movhi	r2,33045
8110b524:	108aa804 	addi	r2,r2,10912
8110b528:	18c7883a 	add	r3,r3,r3
8110b52c:	18c7883a 	add	r3,r3,r3
8110b530:	10c5883a 	add	r2,r2,r3
8110b534:	10800003 	ldbu	r2,0(r2)
8110b538:	10803fcc 	andi	r2,r2,255
8110b53c:	1080201c 	xori	r2,r2,128
8110b540:	10bfe004 	addi	r2,r2,-128
8110b544:	1000301e 	bne	r2,zero,8110b608 <setPreAckSenderFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xSenderACK[i].cType = xPrePReader->cType;
8110b548:	e0fffe03 	ldbu	r3,-8(fp)
8110b54c:	e0bfff17 	ldw	r2,-4(fp)
8110b550:	11000103 	ldbu	r4,4(r2)
8110b554:	00a04574 	movhi	r2,33045
8110b558:	108aa804 	addi	r2,r2,10912
8110b55c:	18c7883a 	add	r3,r3,r3
8110b560:	18c7883a 	add	r3,r3,r3
8110b564:	10c5883a 	add	r2,r2,r3
8110b568:	11000005 	stb	r4,0(r2)
                xSenderACK[i].cCommand = xPrePReader->cCommand;
8110b56c:	e0fffe03 	ldbu	r3,-8(fp)
8110b570:	e0bfff17 	ldw	r2,-4(fp)
8110b574:	11000143 	ldbu	r4,5(r2)
8110b578:	00a04574 	movhi	r2,33045
8110b57c:	108aa804 	addi	r2,r2,10912
8110b580:	18c7883a 	add	r3,r3,r3
8110b584:	18c7883a 	add	r3,r3,r3
8110b588:	10c5883a 	add	r2,r2,r3
8110b58c:	10800044 	addi	r2,r2,1
8110b590:	11000005 	stb	r4,0(r2)
                xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110b594:	e0fffe03 	ldbu	r3,-8(fp)
8110b598:	e0bfff17 	ldw	r2,-4(fp)
8110b59c:	1100020b 	ldhu	r4,8(r2)
8110b5a0:	00a04574 	movhi	r2,33045
8110b5a4:	108aa804 	addi	r2,r2,10912
8110b5a8:	18c7883a 	add	r3,r3,r3
8110b5ac:	18c7883a 	add	r3,r3,r3
8110b5b0:	10c5883a 	add	r2,r2,r3
8110b5b4:	10800084 	addi	r2,r2,2
8110b5b8:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountSenderACK);
8110b5bc:	d0a04f17 	ldw	r2,-32452(gp)
8110b5c0:	1009883a 	mov	r4,r2
8110b5c4:	1131a900 	call	81131a90 <OSSemPost>
8110b5c8:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code != OS_ERR_NONE ) {
8110b5cc:	e0bffe43 	ldbu	r2,-7(fp)
8110b5d0:	10803fcc 	andi	r2,r2,255
8110b5d4:	10000926 	beq	r2,zero,8110b5fc <setPreAckSenderFreePos+0x134>
                    vFailSendPreAckSenderSemaphore();
8110b5d8:	110f7100 	call	8110f710 <vFailSendPreAckSenderSemaphore>
                    xSenderACK[i].cType = 0;
8110b5dc:	e0fffe03 	ldbu	r3,-8(fp)
8110b5e0:	00a04574 	movhi	r2,33045
8110b5e4:	108aa804 	addi	r2,r2,10912
8110b5e8:	18c7883a 	add	r3,r3,r3
8110b5ec:	18c7883a 	add	r3,r3,r3
8110b5f0:	10c5883a 	add	r2,r2,r3
8110b5f4:	10000005 	stb	zero,0(r2)
                } else
                    bSuccess = TRUE;
                break;
8110b5f8:	00000906 	br	8110b620 <setPreAckSenderFreePos+0x158>
                error_code = OSSemPost(xSemCountSenderACK);
                if ( error_code != OS_ERR_NONE ) {
                    vFailSendPreAckSenderSemaphore();
                    xSenderACK[i].cType = 0;
                } else
                    bSuccess = TRUE;
8110b5fc:	00800044 	movi	r2,1
8110b600:	e0bffd15 	stw	r2,-12(fp)
                break;
8110b604:	00000606 	br	8110b620 <setPreAckSenderFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110b608:	e0bffe03 	ldbu	r2,-8(fp)
8110b60c:	10800044 	addi	r2,r2,1
8110b610:	e0bffe05 	stb	r2,-8(fp)
8110b614:	e0bffe03 	ldbu	r2,-8(fp)
8110b618:	10800230 	cmpltui	r2,r2,8
8110b61c:	103fbf1e 	bne	r2,zero,8110b51c <__reset+0xfb0eb51c>
                } else
                    bSuccess = TRUE;
                break;
            }
        }
        OSMutexPost(xMutexSenderACK);
8110b620:	d0a05d17 	ldw	r2,-32396(gp)
8110b624:	1009883a 	mov	r4,r2
8110b628:	112fca00 	call	8112fca0 <OSMutexPost>
    }

    return bSuccess;
8110b62c:	e0bffd17 	ldw	r2,-12(fp)
}
8110b630:	e037883a 	mov	sp,fp
8110b634:	dfc00117 	ldw	ra,4(sp)
8110b638:	df000017 	ldw	fp,0(sp)
8110b63c:	dec00204 	addi	sp,sp,8
8110b640:	f800283a 	ret

8110b644 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110b644:	defffb04 	addi	sp,sp,-20
8110b648:	de00012e 	bgeu	sp,et,8110b650 <setPreAckReceiverFreePos+0xc>
8110b64c:	003b68fa 	trap	3
8110b650:	dfc00415 	stw	ra,16(sp)
8110b654:	df000315 	stw	fp,12(sp)
8110b658:	df000304 	addi	fp,sp,12
8110b65c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b660:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110b664:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110b668:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
8110b66c:	d0a05317 	ldw	r2,-32436(gp)
8110b670:	e0fffe44 	addi	r3,fp,-7
8110b674:	180d883a 	mov	r6,r3
8110b678:	01400504 	movi	r5,20
8110b67c:	1009883a 	mov	r4,r2
8110b680:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110b684:	e0bffe43 	ldbu	r2,-7(fp)
8110b688:	10803fcc 	andi	r2,r2,255
8110b68c:	1000471e 	bne	r2,zero,8110b7ac <setPreAckReceiverFreePos+0x168>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110b690:	e03ffe05 	stb	zero,-8(fp)
8110b694:	00003e06 	br	8110b790 <setPreAckReceiverFreePos+0x14c>
        {
            if ( xReceivedACK[i].cType == 0 ) {
8110b698:	e0fffe03 	ldbu	r3,-8(fp)
8110b69c:	00a04574 	movhi	r2,33045
8110b6a0:	10be9e04 	addi	r2,r2,-1416
8110b6a4:	18c7883a 	add	r3,r3,r3
8110b6a8:	18c7883a 	add	r3,r3,r3
8110b6ac:	10c5883a 	add	r2,r2,r3
8110b6b0:	10800003 	ldbu	r2,0(r2)
8110b6b4:	10803fcc 	andi	r2,r2,255
8110b6b8:	1080201c 	xori	r2,r2,128
8110b6bc:	10bfe004 	addi	r2,r2,-128
8110b6c0:	1000301e 	bne	r2,zero,8110b784 <setPreAckReceiverFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xReceivedACK[i].cType = xPrePReader->cType;
8110b6c4:	e0fffe03 	ldbu	r3,-8(fp)
8110b6c8:	e0bfff17 	ldw	r2,-4(fp)
8110b6cc:	11000103 	ldbu	r4,4(r2)
8110b6d0:	00a04574 	movhi	r2,33045
8110b6d4:	10be9e04 	addi	r2,r2,-1416
8110b6d8:	18c7883a 	add	r3,r3,r3
8110b6dc:	18c7883a 	add	r3,r3,r3
8110b6e0:	10c5883a 	add	r2,r2,r3
8110b6e4:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110b6e8:	e0fffe03 	ldbu	r3,-8(fp)
8110b6ec:	e0bfff17 	ldw	r2,-4(fp)
8110b6f0:	11000143 	ldbu	r4,5(r2)
8110b6f4:	00a04574 	movhi	r2,33045
8110b6f8:	10be9e04 	addi	r2,r2,-1416
8110b6fc:	18c7883a 	add	r3,r3,r3
8110b700:	18c7883a 	add	r3,r3,r3
8110b704:	10c5883a 	add	r2,r2,r3
8110b708:	10800044 	addi	r2,r2,1
8110b70c:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110b710:	e0fffe03 	ldbu	r3,-8(fp)
8110b714:	e0bfff17 	ldw	r2,-4(fp)
8110b718:	1100020b 	ldhu	r4,8(r2)
8110b71c:	00a04574 	movhi	r2,33045
8110b720:	10be9e04 	addi	r2,r2,-1416
8110b724:	18c7883a 	add	r3,r3,r3
8110b728:	18c7883a 	add	r3,r3,r3
8110b72c:	10c5883a 	add	r2,r2,r3
8110b730:	10800084 	addi	r2,r2,2
8110b734:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountReceivedACK);
8110b738:	d0a05417 	ldw	r2,-32432(gp)
8110b73c:	1009883a 	mov	r4,r2
8110b740:	1131a900 	call	81131a90 <OSSemPost>
8110b744:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110b748:	e0bffe43 	ldbu	r2,-7(fp)
8110b74c:	10803fcc 	andi	r2,r2,255
8110b750:	1000031e 	bne	r2,zero,8110b760 <setPreAckReceiverFreePos+0x11c>
                    bSuccess = TRUE;
8110b754:	00800044 	movi	r2,1
8110b758:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreAckReceiverSemaphore();
                    xReceivedACK[i].cType = 0;
                }
                break;
8110b75c:	00000f06 	br	8110b79c <setPreAckReceiverFreePos+0x158>

                error_code = OSSemPost(xSemCountReceivedACK);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreAckReceiverSemaphore();
8110b760:	110f6c40 	call	8110f6c4 <vFailSendPreAckReceiverSemaphore>
                    xReceivedACK[i].cType = 0;
8110b764:	e0fffe03 	ldbu	r3,-8(fp)
8110b768:	00a04574 	movhi	r2,33045
8110b76c:	10be9e04 	addi	r2,r2,-1416
8110b770:	18c7883a 	add	r3,r3,r3
8110b774:	18c7883a 	add	r3,r3,r3
8110b778:	10c5883a 	add	r2,r2,r3
8110b77c:	10000005 	stb	zero,0(r2)
                }
                break;
8110b780:	00000606 	br	8110b79c <setPreAckReceiverFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110b784:	e0bffe03 	ldbu	r2,-8(fp)
8110b788:	10800044 	addi	r2,r2,1
8110b78c:	e0bffe05 	stb	r2,-8(fp)
8110b790:	e0bffe03 	ldbu	r2,-8(fp)
8110b794:	108001b0 	cmpltui	r2,r2,6
8110b798:	103fbf1e 	bne	r2,zero,8110b698 <__reset+0xfb0eb698>
                    xReceivedACK[i].cType = 0;
                }
                break;
            }
        }
        OSMutexPost(xMutexReceivedACK);
8110b79c:	d0a05317 	ldw	r2,-32436(gp)
8110b7a0:	1009883a 	mov	r4,r2
8110b7a4:	112fca00 	call	8112fca0 <OSMutexPost>
8110b7a8:	00000706 	br	8110b7c8 <setPreAckReceiverFreePos+0x184>
    } else {
        /* Could not  */
        #ifdef DEBUG_ON
            debug(fp,"Could not put the ack packet receiveid in the queue. (setPreAckReceiverFreePos)\n");
8110b7ac:	d0a05017 	ldw	r2,-32448(gp)
8110b7b0:	100f883a 	mov	r7,r2
8110b7b4:	01801404 	movi	r6,80
8110b7b8:	01400044 	movi	r5,1
8110b7bc:	01204534 	movhi	r4,33044
8110b7c0:	213f5604 	addi	r4,r4,-680
8110b7c4:	1113be40 	call	81113be4 <fwrite>
        #endif
    }

    return bSuccess;
8110b7c8:	e0bffd17 	ldw	r2,-12(fp)
}
8110b7cc:	e037883a 	mov	sp,fp
8110b7d0:	dfc00117 	ldw	ra,4(sp)
8110b7d4:	df000017 	ldw	fp,0(sp)
8110b7d8:	dec00204 	addi	sp,sp,8
8110b7dc:	f800283a 	ret

8110b7e0 <bPreParserV2>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParserV2( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110b7e0:	defff404 	addi	sp,sp,-48
8110b7e4:	de00012e 	bgeu	sp,et,8110b7ec <bPreParserV2+0xc>
8110b7e8:	003b68fa 	trap	3
8110b7ec:	dfc00b15 	stw	ra,44(sp)
8110b7f0:	df000a15 	stw	fp,40(sp)
8110b7f4:	dc000915 	stw	r16,36(sp)
8110b7f8:	df000a04 	addi	fp,sp,40
8110b7fc:	e13ffd15 	stw	r4,-12(fp)
8110b800:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110b804:	e03ff615 	stw	zero,-40(fp)
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */


    bSuccess = FALSE;
8110b808:	e03ff615 	stw	zero,-40(fp)

    siStrLen = strnlen(buffer, SIZE_RCV_BUFFER);
8110b80c:	01402004 	movi	r5,128
8110b810:	e13ffd17 	ldw	r4,-12(fp)
8110b814:	11151a40 	call	811151a4 <strnlen>
8110b818:	e0bff90d 	sth	r2,-28(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110b81c:	01400ec4 	movi	r5,59
8110b820:	e13ffd17 	ldw	r4,-12(fp)
8110b824:	110e1980 	call	8110e198 <siPosStr>
8110b828:	e0bff98d 	sth	r2,-26(fp)

    /* Check the protocol terminator char ';' */
    if ( (siTeminador != (siStrLen-1)) )
8110b82c:	e0fff98f 	ldh	r3,-26(fp)
8110b830:	e0bff90f 	ldh	r2,-28(fp)
8110b834:	10bfffc4 	addi	r2,r2,-1
8110b838:	18800226 	beq	r3,r2,8110b844 <bPreParserV2+0x64>
        return bSuccess;
8110b83c:	e0bff617 	ldw	r2,-40(fp)
8110b840:	0000ba06 	br	8110bb2c <bPreParserV2+0x34c>

    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110b844:	01401f04 	movi	r5,124
8110b848:	e13ffd17 	ldw	r4,-12(fp)
8110b84c:	110e1980 	call	8110e198 <siPosStr>
8110b850:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there's an CRC char */
    if ( siCRC > siTeminador )
8110b854:	e0bffa0f 	ldh	r2,-24(fp)
8110b858:	e0fff98f 	ldh	r3,-26(fp)
8110b85c:	1880020e 	bge	r3,r2,8110b868 <bPreParserV2+0x88>
        return bSuccess;
8110b860:	e0bff617 	ldw	r2,-40(fp)
8110b864:	0000b106 	br	8110bb2c <bPreParserV2+0x34c>

    siIni = strcspn( buffer , ALL_INI_CHAR ); /* Verify if there's any one of the initial characters */
8110b868:	01604534 	movhi	r5,33044
8110b86c:	297f6b04 	addi	r5,r5,-596
8110b870:	e13ffd17 	ldw	r4,-12(fp)
8110b874:	11150c00 	call	811150c0 <strcspn>
8110b878:	e0bffa8d 	sth	r2,-22(fp)

    /* Check if there's any initial char protocol and if is before the crc char */
    if ( siIni > siCRC)
8110b87c:	e0bffa8f 	ldh	r2,-22(fp)
8110b880:	e0fffa0f 	ldh	r3,-24(fp)
8110b884:	1880020e 	bge	r3,r2,8110b890 <bPreParserV2+0xb0>
        return bSuccess;
8110b888:	e0bff617 	ldw	r2,-40(fp)
8110b88c:	0000a706 	br	8110bb2c <bPreParserV2+0x34c>

    
    /*" ---> At this point we validate the existence and position of all characters in for the protocol in the message "*/


    xPerParcedBuffer->cType = buffer[siIni];
8110b890:	e0bffa8f 	ldh	r2,-22(fp)
8110b894:	e0fffd17 	ldw	r3,-12(fp)
8110b898:	1885883a 	add	r2,r3,r2
8110b89c:	10c00003 	ldbu	r3,0(r2)
8110b8a0:	e0bffe17 	ldw	r2,-8(fp)
8110b8a4:	10c00105 	stb	r3,4(r2)
    if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110b8a8:	e0bffe17 	ldw	r2,-8(fp)
8110b8ac:	10800103 	ldbu	r2,4(r2)
8110b8b0:	10803fcc 	andi	r2,r2,255
8110b8b4:	1080201c 	xori	r2,r2,128
8110b8b8:	10bfe004 	addi	r2,r2,-128
8110b8bc:	108008d8 	cmpnei	r2,r2,35
8110b8c0:	1000041e 	bne	r2,zero,8110b8d4 <bPreParserV2+0xf4>
        bSuccess = TRUE;
8110b8c4:	00800044 	movi	r2,1
8110b8c8:	e0bff615 	stw	r2,-40(fp)
        return bSuccess;
8110b8cc:	e0bff617 	ldw	r2,-40(fp)
8110b8d0:	00009606 	br	8110bb2c <bPreParserV2+0x34c>


    /*" ---> At this point the packet is a Resquest, Reply or ACK packet"*/


    xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit( &buffer[siIni] , (siCRC - siIni) );
8110b8d4:	e0bffa8f 	ldh	r2,-22(fp)
8110b8d8:	e0fffd17 	ldw	r3,-12(fp)
8110b8dc:	1889883a 	add	r4,r3,r2
8110b8e0:	e0fffa0f 	ldh	r3,-24(fp)
8110b8e4:	e0bffa8f 	ldh	r2,-22(fp)
8110b8e8:	1885c83a 	sub	r2,r3,r2
8110b8ec:	100b883a 	mov	r5,r2
8110b8f0:	110f3700 	call	8110f370 <ucCrc8wInit>
8110b8f4:	1007883a 	mov	r3,r2
8110b8f8:	e0bffe17 	ldw	r2,-8(fp)
8110b8fc:	10c01205 	stb	r3,72(r2)

    xPerParcedBuffer->cCommand = buffer[siIni+1];
8110b900:	e0bffa8f 	ldh	r2,-22(fp)
8110b904:	10800044 	addi	r2,r2,1
8110b908:	e0fffd17 	ldw	r3,-12(fp)
8110b90c:	1885883a 	add	r2,r3,r2
8110b910:	10c00003 	ldbu	r3,0(r2)
8110b914:	e0bffe17 	ldw	r2,-8(fp)
8110b918:	10c00145 	stb	r3,5(r2)
    xPerParcedBuffer->ucNofBytes = 0;
8110b91c:	e0bffe17 	ldw	r2,-8(fp)
8110b920:	10000185 	stb	zero,6(r2)

    memset( xPerParcedBuffer->usiValues , 0x00 , sizeof(xPerParcedBuffer->usiValues) );
8110b924:	e0bffe17 	ldw	r2,-8(fp)
8110b928:	10800204 	addi	r2,r2,8
8110b92c:	01801004 	movi	r6,64
8110b930:	000b883a 	mov	r5,zero
8110b934:	1009883a 	mov	r4,r2
8110b938:	11147480 	call	81114748 <memset>

    i = siIni + 3; /* "?C:i..." */
8110b93c:	e0bffa8b 	ldhu	r2,-22(fp)
8110b940:	108000c4 	addi	r2,r2,3
8110b944:	e0bff705 	stb	r2,-36(fp)
    do {
        p_inteiro = inteiro;
8110b948:	e0bffb44 	addi	r2,fp,-19
8110b94c:	e0bff815 	stw	r2,-32(fp)
        memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110b950:	e0bffb44 	addi	r2,fp,-19
8110b954:	01800184 	movi	r6,6
8110b958:	000b883a 	mov	r5,zero
8110b95c:	1009883a 	mov	r4,r2
8110b960:	11147480 	call	81114748 <memset>
        do {
            c = buffer[i];
8110b964:	e0bff703 	ldbu	r2,-36(fp)
8110b968:	e0fffd17 	ldw	r3,-12(fp)
8110b96c:	1885883a 	add	r2,r3,r2
8110b970:	10800003 	ldbu	r2,0(r2)
8110b974:	e0bffb05 	stb	r2,-20(fp)
            if ( isdigit( c ) ) {
8110b978:	d0e00317 	ldw	r3,-32756(gp)
8110b97c:	e0bffb07 	ldb	r2,-20(fp)
8110b980:	10800044 	addi	r2,r2,1
8110b984:	1885883a 	add	r2,r3,r2
8110b988:	10800003 	ldbu	r2,0(r2)
8110b98c:	10803fcc 	andi	r2,r2,255
8110b990:	1080010c 	andi	r2,r2,4
8110b994:	10000626 	beq	r2,zero,8110b9b0 <bPreParserV2+0x1d0>
                (*p_inteiro) = c;
8110b998:	e0bff817 	ldw	r2,-32(fp)
8110b99c:	e0fffb03 	ldbu	r3,-20(fp)
8110b9a0:	10c00005 	stb	r3,0(r2)
                p_inteiro++;
8110b9a4:	e0bff817 	ldw	r2,-32(fp)
8110b9a8:	10800044 	addi	r2,r2,1
8110b9ac:	e0bff815 	stw	r2,-32(fp)
            }
            i++;
8110b9b0:	e0bff703 	ldbu	r2,-36(fp)
8110b9b4:	10800044 	addi	r2,r2,1
8110b9b8:	e0bff705 	stb	r2,-36(fp)
        } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110b9bc:	e0bff90f 	ldh	r2,-28(fp)
8110b9c0:	e0fff703 	ldbu	r3,-36(fp)
8110b9c4:	1880090e 	bge	r3,r2,8110b9ec <bPreParserV2+0x20c>
8110b9c8:	e0bffb07 	ldb	r2,-20(fp)
8110b9cc:	10800ea0 	cmpeqi	r2,r2,58
8110b9d0:	1000061e 	bne	r2,zero,8110b9ec <bPreParserV2+0x20c>
8110b9d4:	e0bffb07 	ldb	r2,-20(fp)
8110b9d8:	10800ee0 	cmpeqi	r2,r2,59
8110b9dc:	1000031e 	bne	r2,zero,8110b9ec <bPreParserV2+0x20c>
8110b9e0:	e0bffb07 	ldb	r2,-20(fp)
8110b9e4:	10801f18 	cmpnei	r2,r2,124
8110b9e8:	103fde1e 	bne	r2,zero,8110b964 <__reset+0xfb0eb964>
        (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110b9ec:	e0bff817 	ldw	r2,-32(fp)
8110b9f0:	00c00284 	movi	r3,10
8110b9f4:	10c00005 	stb	r3,0(r2)

        if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110b9f8:	e0bffb07 	ldb	r2,-20(fp)
8110b9fc:	10800ea0 	cmpeqi	r2,r2,58
8110ba00:	1000031e 	bne	r2,zero,8110ba10 <bPreParserV2+0x230>
8110ba04:	e0bffb07 	ldb	r2,-20(fp)
8110ba08:	10801f18 	cmpnei	r2,r2,124
8110ba0c:	10001a1e 	bne	r2,zero,8110ba78 <bPreParserV2+0x298>
            xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110ba10:	e0bffe17 	ldw	r2,-8(fp)
8110ba14:	10800183 	ldbu	r2,6(r2)
8110ba18:	10803fcc 	andi	r2,r2,255
8110ba1c:	10800828 	cmpgeui	r2,r2,32
8110ba20:	1000041e 	bne	r2,zero,8110ba34 <bPreParserV2+0x254>
8110ba24:	e0bffe17 	ldw	r2,-8(fp)
8110ba28:	10800183 	ldbu	r2,6(r2)
8110ba2c:	14003fcc 	andi	r16,r2,255
8110ba30:	00000106 	br	8110ba38 <bPreParserV2+0x258>
8110ba34:	04000804 	movi	r16,32
8110ba38:	e0bffb44 	addi	r2,fp,-19
8110ba3c:	1009883a 	mov	r4,r2
8110ba40:	11133ec0 	call	811133ec <atoi>
8110ba44:	1009883a 	mov	r4,r2
8110ba48:	e0fffe17 	ldw	r3,-8(fp)
8110ba4c:	80800104 	addi	r2,r16,4
8110ba50:	1085883a 	add	r2,r2,r2
8110ba54:	1885883a 	add	r2,r3,r2
8110ba58:	1100000d 	sth	r4,0(r2)
            xPerParcedBuffer->ucNofBytes++;
8110ba5c:	e0bffe17 	ldw	r2,-8(fp)
8110ba60:	10800183 	ldbu	r2,6(r2)
8110ba64:	10800044 	addi	r2,r2,1
8110ba68:	1007883a 	mov	r3,r2
8110ba6c:	e0bffe17 	ldw	r2,-8(fp)
8110ba70:	10c00185 	stb	r3,6(r2)
8110ba74:	00000906 	br	8110ba9c <bPreParserV2+0x2bc>
        }
        else if ( c == FINAL_CHAR )
8110ba78:	e0bffb07 	ldb	r2,-20(fp)
8110ba7c:	10800ed8 	cmpnei	r2,r2,59
8110ba80:	1000061e 	bne	r2,zero,8110ba9c <bPreParserV2+0x2bc>
        {
            xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110ba84:	e0bffb44 	addi	r2,fp,-19
8110ba88:	1009883a 	mov	r4,r2
8110ba8c:	11133ec0 	call	811133ec <atoi>
8110ba90:	1007883a 	mov	r3,r2
8110ba94:	e0bffe17 	ldw	r2,-8(fp)
8110ba98:	10c01245 	stb	r3,73(r2)
        }

    } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110ba9c:	e0bffb07 	ldb	r2,-20(fp)
8110baa0:	10800ee0 	cmpeqi	r2,r2,59
8110baa4:	1000031e 	bne	r2,zero,8110bab4 <bPreParserV2+0x2d4>
8110baa8:	e0bff90f 	ldh	r2,-28(fp)
8110baac:	e0fff703 	ldbu	r3,-36(fp)
8110bab0:	18bfa516 	blt	r3,r2,8110b948 <__reset+0xfb0eb948>


    if ( c == FINAL_CHAR )
8110bab4:	e0bffb07 	ldb	r2,-20(fp)
8110bab8:	10800ed8 	cmpnei	r2,r2,59
8110babc:	1000191e 	bne	r2,zero,8110bb24 <bPreParserV2+0x344>
        if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110bac0:	e0bffe17 	ldw	r2,-8(fp)
8110bac4:	10c01243 	ldbu	r3,73(r2)
8110bac8:	e0bffe17 	ldw	r2,-8(fp)
8110bacc:	10801203 	ldbu	r2,72(r2)
8110bad0:	18c03fcc 	andi	r3,r3,255
8110bad4:	10803fcc 	andi	r2,r2,255
8110bad8:	1880031e 	bne	r3,r2,8110bae8 <bPreParserV2+0x308>
            bSuccess = TRUE;
8110badc:	00800044 	movi	r2,1
8110bae0:	e0bff615 	stw	r2,-40(fp)
8110bae4:	00001006 	br	8110bb28 <bPreParserV2+0x348>
        } else {
            /* Wrong CRC */
            #ifdef DEBUG_ON
                fprintf(fp,"Wrong CRC. Expected = %hhu, received = %hhu\n", xPerParcedBuffer->ucCalculatedCRC8, xPerParcedBuffer->ucMessageCRC8 );
8110bae8:	d0e05017 	ldw	r3,-32448(gp)
8110baec:	e0bffe17 	ldw	r2,-8(fp)
8110baf0:	10801203 	ldbu	r2,72(r2)
8110baf4:	11003fcc 	andi	r4,r2,255
8110baf8:	e0bffe17 	ldw	r2,-8(fp)
8110bafc:	10801243 	ldbu	r2,73(r2)
8110bb00:	10803fcc 	andi	r2,r2,255
8110bb04:	100f883a 	mov	r7,r2
8110bb08:	200d883a 	mov	r6,r4
8110bb0c:	01604534 	movhi	r5,33044
8110bb10:	297f6d04 	addi	r5,r5,-588
8110bb14:	1809883a 	mov	r4,r3
8110bb18:	11135480 	call	81113548 <fprintf>
            #endif
            bSuccess = FALSE;
8110bb1c:	e03ff615 	stw	zero,-40(fp)
8110bb20:	00000106 	br	8110bb28 <bPreParserV2+0x348>
        }
    else
        bSuccess = FALSE; /* Index overflow in the buffer */
8110bb24:	e03ff615 	stw	zero,-40(fp)


    return bSuccess;
8110bb28:	e0bff617 	ldw	r2,-40(fp)
}
8110bb2c:	e6ffff04 	addi	sp,fp,-4
8110bb30:	dfc00217 	ldw	ra,8(sp)
8110bb34:	df000117 	ldw	fp,4(sp)
8110bb38:	dc000017 	ldw	r16,0(sp)
8110bb3c:	dec00304 	addi	sp,sp,12
8110bb40:	f800283a 	ret

8110bb44 <vSenderComTask>:


OS_STK_DATA *pdata;

void vSenderComTask(void *task_data)
{
8110bb44:	defff804 	addi	sp,sp,-32
8110bb48:	de00012e 	bgeu	sp,et,8110bb50 <vSenderComTask+0xc>
8110bb4c:	003b68fa 	trap	3
8110bb50:	dfc00715 	stw	ra,28(sp)
8110bb54:	df000615 	stw	fp,24(sp)
8110bb58:	df000604 	addi	fp,sp,24
8110bb5c:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    OS_STK_DATA data;
    bool bSuccess;
    int desligarEm = 0;
8110bb60:	e03ffb15 	stw	zero,-20(fp)

    eSenderMode = sConfiguringSender;
8110bb64:	e03ffa15 	stw	zero,-24(fp)

    #ifdef DEBUG_ON
        debug(fp,"Sender Comm Task. (Task on)\n");
8110bb68:	d0a05017 	ldw	r2,-32448(gp)
8110bb6c:	100f883a 	mov	r7,r2
8110bb70:	01800704 	movi	r6,28
8110bb74:	01400044 	movi	r5,1
8110bb78:	01204534 	movhi	r4,33044
8110bb7c:	213f7904 	addi	r4,r4,-540
8110bb80:	1113be40 	call	81113be4 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110bb84:	e0bffa17 	ldw	r2,-24(fp)
8110bb88:	10c00060 	cmpeqi	r3,r2,1
8110bb8c:	1800091e 	bne	r3,zero,8110bbb4 <vSenderComTask+0x70>
8110bb90:	0080052e 	bgeu	zero,r2,8110bba8 <vSenderComTask+0x64>
8110bb94:	10c000a0 	cmpeqi	r3,r2,2
8110bb98:	1800471e 	bne	r3,zero,8110bcb8 <vSenderComTask+0x174>
8110bb9c:	10800160 	cmpeqi	r2,r2,5
8110bba0:	10002c1e 	bne	r2,zero,8110bc54 <vSenderComTask+0x110>
8110bba4:	00003a06 	br	8110bc90 <vSenderComTask+0x14c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110bba8:	00800044 	movi	r2,1
8110bbac:	e0bffa15 	stw	r2,-24(fp)
                break;
8110bbb0:	00004206 	br	8110bcbc <vSenderComTask+0x178>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110bbb4:	d0a05017 	ldw	r2,-32448(gp)
8110bbb8:	100f883a 	mov	r7,r2
8110bbbc:	01800784 	movi	r6,30
8110bbc0:	01400044 	movi	r5,1
8110bbc4:	01204534 	movhi	r4,33044
8110bbc8:	213f8104 	addi	r4,r4,-508
8110bbcc:	1113be40 	call	81113be4 <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendUART32v2(START_STATUS_SEQUENCE, 1);
8110bbd0:	01400044 	movi	r5,1
8110bbd4:	01204534 	movhi	r4,33044
8110bbd8:	213f8904 	addi	r4,r4,-476
8110bbdc:	110d9a80 	call	8110d9a8 <bSendUART32v2>
8110bbe0:	e0bffc15 	stw	r2,-16(fp)
                if ( bSuccess == TRUE ) {
8110bbe4:	e0bffc17 	ldw	r2,-16(fp)
8110bbe8:	10800058 	cmpnei	r2,r2,1
8110bbec:	10000a1e 	bne	r2,zero,8110bc18 <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110bbf0:	00800144 	movi	r2,5
8110bbf4:	e0bffa15 	stw	r2,-24(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110bbf8:	d0a05017 	ldw	r2,-32448(gp)
8110bbfc:	100f883a 	mov	r7,r2
8110bc00:	01800d44 	movi	r6,53
8110bc04:	01400044 	movi	r5,1
8110bc08:	01204534 	movhi	r4,33044
8110bc0c:	213f8c04 	addi	r4,r4,-464
8110bc10:	1113be40 	call	81113be4 <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110bc14:	00002906 	br	8110bcbc <vSenderComTask+0x178>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110bc18:	d0a05017 	ldw	r2,-32448(gp)
8110bc1c:	100f883a 	mov	r7,r2
8110bc20:	01800784 	movi	r6,30
8110bc24:	01400044 	movi	r5,1
8110bc28:	01204534 	movhi	r4,33044
8110bc2c:	213f9a04 	addi	r4,r4,-408
8110bc30:	1113be40 	call	81113be4 <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110bc34:	00800044 	movi	r2,1
8110bc38:	e0bffa15 	stw	r2,-24(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110bc3c:	000f883a 	mov	r7,zero
8110bc40:	01800144 	movi	r6,5
8110bc44:	000b883a 	mov	r5,zero
8110bc48:	0009883a 	mov	r4,zero
8110bc4c:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
                }
                break;
8110bc50:	00001a06 	br	8110bcbc <vSenderComTask+0x178>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110bc54:	00800144 	movi	r2,5
8110bc58:	e0bffa15 	stw	r2,-24(fp)

                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110bc5c:	d0a05017 	ldw	r2,-32448(gp)
8110bc60:	100f883a 	mov	r7,r2
8110bc64:	01800344 	movi	r6,13
8110bc68:	01400044 	movi	r5,1
8110bc6c:	01204534 	movhi	r4,33044
8110bc70:	213fa204 	addi	r4,r4,-376
8110bc74:	1113be40 	call	81113be4 <fwrite>
                #endif

				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110bc78:	000f883a 	mov	r7,zero
8110bc7c:	01800284 	movi	r6,10
8110bc80:	000b883a 	mov	r5,zero
8110bc84:	0009883a 	mov	r4,zero
8110bc88:	11336a00 	call	811336a0 <OSTimeDlyHMSM>

                break;
8110bc8c:	00000b06 	br	8110bcbc <vSenderComTask+0x178>
            default:
                #ifdef DEBUG_ON
                    debug(fp,"Sender default\n");
8110bc90:	d0a05017 	ldw	r2,-32448(gp)
8110bc94:	100f883a 	mov	r7,r2
8110bc98:	018003c4 	movi	r6,15
8110bc9c:	01400044 	movi	r5,1
8110bca0:	01204534 	movhi	r4,33044
8110bca4:	213fa604 	addi	r4,r4,-360
8110bca8:	1113be40 	call	81113be4 <fwrite>
                #endif
                eSenderMode = sDummySender;
8110bcac:	00800144 	movi	r2,5
8110bcb0:	e0bffa15 	stw	r2,-24(fp)
                break;
8110bcb4:	00000106 	br	8110bcbc <vSenderComTask+0x178>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110bcb8:	0001883a 	nop
                #endif
                eSenderMode = sDummySender;
                break;
        }

    }
8110bcbc:	003fb106 	br	8110bb84 <__reset+0xfb0ebb84>

8110bcc0 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110bcc0:	defffb04 	addi	sp,sp,-20
8110bcc4:	de00012e 	bgeu	sp,et,8110bccc <vSimMebTask+0xc>
8110bcc8:	003b68fa 	trap	3
8110bccc:	dfc00415 	stw	ra,16(sp)
8110bcd0:	df000315 	stw	fp,12(sp)
8110bcd4:	df000304 	addi	fp,sp,12
8110bcd8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110bcdc:	e03ffd15 	stw	zero,-12(fp)
	TSimucam_MEB * pxMebC;
	INT8U error_code;

	pxMebC = (TSimucam_MEB *) task_data;
8110bce0:	e0bfff17 	ldw	r2,-4(fp)
8110bce4:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"Sim Meb Controller Task. (Task on)\n");
8110bce8:	d0a05017 	ldw	r2,-32448(gp)
8110bcec:	100f883a 	mov	r7,r2
8110bcf0:	018008c4 	movi	r6,35
8110bcf4:	01400044 	movi	r5,1
8110bcf8:	01204534 	movhi	r4,33044
8110bcfc:	213faa04 	addi	r4,r4,-344
8110bd00:	1113be40 	call	81113be4 <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
8110bd04:	0001883a 	nop
	}

}
8110bd08:	0001883a 	nop
8110bd0c:	e037883a 	mov	sp,fp
8110bd10:	dfc00117 	ldw	ra,4(sp)
8110bd14:	df000017 	ldw	fp,0(sp)
8110bd18:	dec00204 	addi	sp,sp,8
8110bd1c:	f800283a 	ret

8110bd20 <vStackMonitor>:
    }
}

#else
#ifdef DEBUG_ON
void vStackMonitor(void *task_data) {
8110bd20:	defff804 	addi	sp,sp,-32
8110bd24:	de00012e 	bgeu	sp,et,8110bd2c <vStackMonitor+0xc>
8110bd28:	003b68fa 	trap	3
8110bd2c:	dfc00715 	stw	ra,28(sp)
8110bd30:	df000615 	stw	fp,24(sp)
8110bd34:	df000604 	addi	fp,sp,24
8110bd38:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110bd3c:	e03ffc05 	stb	zero,-16(fp)
	OS_STK_DATA data;


        debug(fp,"vStackMonitor, enter task.\n");
8110bd40:	d0a05017 	ldw	r2,-32448(gp)
8110bd44:	100f883a 	mov	r7,r2
8110bd48:	018006c4 	movi	r6,27
8110bd4c:	01400044 	movi	r5,1
8110bd50:	01204534 	movhi	r4,33044
8110bd54:	213fb304 	addi	r4,r4,-308
8110bd58:	1113be40 	call	81113be4 <fwrite>


    for (;;) {

    	fprintf(fp, "=========== STACK MONITOR =================\n" );
8110bd5c:	d0a05017 	ldw	r2,-32448(gp)
8110bd60:	100f883a 	mov	r7,r2
8110bd64:	01800b04 	movi	r6,44
8110bd68:	01400044 	movi	r5,1
8110bd6c:	01204534 	movhi	r4,33044
8110bd70:	213fba04 	addi	r4,r4,-280
8110bd74:	1113be40 	call	81113be4 <fwrite>
    	fprintf(fp, " Task           Total               Free             In use  \n" );
8110bd78:	d0a05017 	ldw	r2,-32448(gp)
8110bd7c:	100f883a 	mov	r7,r2
8110bd80:	01800f84 	movi	r6,62
8110bd84:	01400044 	movi	r5,1
8110bd88:	01204534 	movhi	r4,33044
8110bd8c:	213fc604 	addi	r4,r4,-232
8110bd90:	1113be40 	call	81113be4 <fwrite>

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
8110bd94:	e0bffd04 	addi	r2,fp,-12
8110bd98:	100b883a 	mov	r5,r2
8110bd9c:	01000804 	movi	r4,32
8110bda0:	113303c0 	call	8113303c <OSTaskStkChk>
8110bda4:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE ) {
8110bda8:	e0bffc03 	ldbu	r2,-16(fp)
8110bdac:	10000f1e 	bne	r2,zero,8110bdec <vStackMonitor+0xcc>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bdb0:	d1205017 	ldw	r4,-32448(gp)
    				"RECEIVER_TASK",
    				data.OSFree + data.OSUsed,
8110bdb4:	e0fffd17 	ldw	r3,-12(fp)
8110bdb8:	e0bffe17 	ldw	r2,-8(fp)
    	fprintf(fp, " Task           Total               Free             In use  \n" );

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bdbc:	188b883a 	add	r5,r3,r2
8110bdc0:	e0bffd17 	ldw	r2,-12(fp)
8110bdc4:	e0fffe17 	ldw	r3,-8(fp)
8110bdc8:	d8c00115 	stw	r3,4(sp)
8110bdcc:	d8800015 	stw	r2,0(sp)
8110bdd0:	280f883a 	mov	r7,r5
8110bdd4:	01a04534 	movhi	r6,33044
8110bdd8:	31bfd604 	addi	r6,r6,-168
8110bddc:	01604534 	movhi	r5,33044
8110bde0:	297fda04 	addi	r5,r5,-152
8110bde4:	11135480 	call	81113548 <fprintf>
8110bde8:	00000706 	br	8110be08 <vStackMonitor+0xe8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get RECEIVER_TASK stack \n" );
8110bdec:	d0a05017 	ldw	r2,-32448(gp)
8110bdf0:	100f883a 	mov	r7,r2
8110bdf4:	01800904 	movi	r6,36
8110bdf8:	01400044 	movi	r5,1
8110bdfc:	01204534 	movhi	r4,33044
8110be00:	213fe904 	addi	r4,r4,-92
8110be04:	1113be40 	call	81113be4 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
8110be08:	e0bffd04 	addi	r2,fp,-12
8110be0c:	100b883a 	mov	r5,r2
8110be10:	01000784 	movi	r4,30
8110be14:	113303c0 	call	8113303c <OSTaskStkChk>
8110be18:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110be1c:	e0bffc03 	ldbu	r2,-16(fp)
8110be20:	10000f1e 	bne	r2,zero,8110be60 <vStackMonitor+0x140>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110be24:	d1205017 	ldw	r4,-32448(gp)
    				"TIMEOUT_CHECKER",
    				data.OSFree + data.OSUsed,
8110be28:	e0fffd17 	ldw	r3,-12(fp)
8110be2c:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110be30:	188b883a 	add	r5,r3,r2
8110be34:	e0bffd17 	ldw	r2,-12(fp)
8110be38:	e0fffe17 	ldw	r3,-8(fp)
8110be3c:	d8c00115 	stw	r3,4(sp)
8110be40:	d8800015 	stw	r2,0(sp)
8110be44:	280f883a 	mov	r7,r5
8110be48:	01a04534 	movhi	r6,33044
8110be4c:	31bff304 	addi	r6,r6,-52
8110be50:	01604534 	movhi	r5,33044
8110be54:	297fda04 	addi	r5,r5,-152
8110be58:	11135480 	call	81113548 <fprintf>
8110be5c:	00000706 	br	8110be7c <vStackMonitor+0x15c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get TIMEOUT_CHECKER stack \n" );
8110be60:	d0a05017 	ldw	r2,-32448(gp)
8110be64:	100f883a 	mov	r7,r2
8110be68:	01800984 	movi	r6,38
8110be6c:	01400044 	movi	r5,1
8110be70:	01204534 	movhi	r4,33044
8110be74:	213ff704 	addi	r4,r4,-36
8110be78:	1113be40 	call	81113be4 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
8110be7c:	e0bffd04 	addi	r2,fp,-12
8110be80:	100b883a 	mov	r5,r2
8110be84:	01000704 	movi	r4,28
8110be88:	113303c0 	call	8113303c <OSTaskStkChk>
8110be8c:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110be90:	e0bffc03 	ldbu	r2,-16(fp)
8110be94:	10000f1e 	bne	r2,zero,8110bed4 <vStackMonitor+0x1b4>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110be98:	d1205017 	ldw	r4,-32448(gp)
    				"PARSER_TASK",
    				data.OSFree + data.OSUsed,
8110be9c:	e0fffd17 	ldw	r3,-12(fp)
8110bea0:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bea4:	188b883a 	add	r5,r3,r2
8110bea8:	e0bffd17 	ldw	r2,-12(fp)
8110beac:	e0fffe17 	ldw	r3,-8(fp)
8110beb0:	d8c00115 	stw	r3,4(sp)
8110beb4:	d8800015 	stw	r2,0(sp)
8110beb8:	280f883a 	mov	r7,r5
8110bebc:	01a04534 	movhi	r6,33044
8110bec0:	31800104 	addi	r6,r6,4
8110bec4:	01604534 	movhi	r5,33044
8110bec8:	297fda04 	addi	r5,r5,-152
8110becc:	11135480 	call	81113548 <fprintf>
8110bed0:	00000706 	br	8110bef0 <vStackMonitor+0x1d0>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get PARSER_TASK stack \n" );
8110bed4:	d0a05017 	ldw	r2,-32448(gp)
8110bed8:	100f883a 	mov	r7,r2
8110bedc:	01800884 	movi	r6,34
8110bee0:	01400044 	movi	r5,1
8110bee4:	01204534 	movhi	r4,33044
8110bee8:	21000404 	addi	r4,r4,16
8110beec:	1113be40 	call	81113be4 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
8110bef0:	e0bffd04 	addi	r2,fp,-12
8110bef4:	100b883a 	mov	r5,r2
8110bef8:	010006c4 	movi	r4,27
8110befc:	113303c0 	call	8113303c <OSTaskStkChk>
8110bf00:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110bf04:	e0bffc03 	ldbu	r2,-16(fp)
8110bf08:	10000f1e 	bne	r2,zero,8110bf48 <vStackMonitor+0x228>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bf0c:	d1205017 	ldw	r4,-32448(gp)
    				"OUT_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110bf10:	e0fffd17 	ldw	r3,-12(fp)
8110bf14:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bf18:	188b883a 	add	r5,r3,r2
8110bf1c:	e0bffd17 	ldw	r2,-12(fp)
8110bf20:	e0fffe17 	ldw	r3,-8(fp)
8110bf24:	d8c00115 	stw	r3,4(sp)
8110bf28:	d8800015 	stw	r2,0(sp)
8110bf2c:	280f883a 	mov	r7,r5
8110bf30:	01a04534 	movhi	r6,33044
8110bf34:	31800d04 	addi	r6,r6,52
8110bf38:	01604534 	movhi	r5,33044
8110bf3c:	297fda04 	addi	r5,r5,-152
8110bf40:	11135480 	call	81113548 <fprintf>
8110bf44:	00000706 	br	8110bf64 <vStackMonitor+0x244>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get OUT_ACK_TASK stack \n" );
8110bf48:	d0a05017 	ldw	r2,-32448(gp)
8110bf4c:	100f883a 	mov	r7,r2
8110bf50:	018008c4 	movi	r6,35
8110bf54:	01400044 	movi	r5,1
8110bf58:	01204534 	movhi	r4,33044
8110bf5c:	21001104 	addi	r4,r4,68
8110bf60:	1113be40 	call	81113be4 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
8110bf64:	e0bffd04 	addi	r2,fp,-12
8110bf68:	100b883a 	mov	r5,r2
8110bf6c:	01000684 	movi	r4,26
8110bf70:	113303c0 	call	8113303c <OSTaskStkChk>
8110bf74:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110bf78:	e0bffc03 	ldbu	r2,-16(fp)
8110bf7c:	10000f1e 	bne	r2,zero,8110bfbc <vStackMonitor+0x29c>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bf80:	d1205017 	ldw	r4,-32448(gp)
    				"SENDER_TASK",
    				data.OSFree + data.OSUsed,
8110bf84:	e0fffd17 	ldw	r3,-12(fp)
8110bf88:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bf8c:	188b883a 	add	r5,r3,r2
8110bf90:	e0bffd17 	ldw	r2,-12(fp)
8110bf94:	e0fffe17 	ldw	r3,-8(fp)
8110bf98:	d8c00115 	stw	r3,4(sp)
8110bf9c:	d8800015 	stw	r2,0(sp)
8110bfa0:	280f883a 	mov	r7,r5
8110bfa4:	01a04534 	movhi	r6,33044
8110bfa8:	31801a04 	addi	r6,r6,104
8110bfac:	01604534 	movhi	r5,33044
8110bfb0:	297fda04 	addi	r5,r5,-152
8110bfb4:	11135480 	call	81113548 <fprintf>
8110bfb8:	00000706 	br	8110bfd8 <vStackMonitor+0x2b8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get SENDER_TASK stack \n" );
8110bfbc:	d0a05017 	ldw	r2,-32448(gp)
8110bfc0:	100f883a 	mov	r7,r2
8110bfc4:	01800884 	movi	r6,34
8110bfc8:	01400044 	movi	r5,1
8110bfcc:	01204534 	movhi	r4,33044
8110bfd0:	21001d04 	addi	r4,r4,116
8110bfd4:	1113be40 	call	81113be4 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
8110bfd8:	e0bffd04 	addi	r2,fp,-12
8110bfdc:	100b883a 	mov	r5,r2
8110bfe0:	01000644 	movi	r4,25
8110bfe4:	113303c0 	call	8113303c <OSTaskStkChk>
8110bfe8:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110bfec:	e0bffc03 	ldbu	r2,-16(fp)
8110bff0:	10000f1e 	bne	r2,zero,8110c030 <vStackMonitor+0x310>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110bff4:	d1205017 	ldw	r4,-32448(gp)
    				"IN_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110bff8:	e0fffd17 	ldw	r3,-12(fp)
8110bffc:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c000:	188b883a 	add	r5,r3,r2
8110c004:	e0bffd17 	ldw	r2,-12(fp)
8110c008:	e0fffe17 	ldw	r3,-8(fp)
8110c00c:	d8c00115 	stw	r3,4(sp)
8110c010:	d8800015 	stw	r2,0(sp)
8110c014:	280f883a 	mov	r7,r5
8110c018:	01a04534 	movhi	r6,33044
8110c01c:	31802604 	addi	r6,r6,152
8110c020:	01604534 	movhi	r5,33044
8110c024:	297fda04 	addi	r5,r5,-152
8110c028:	11135480 	call	81113548 <fprintf>
8110c02c:	00000706 	br	8110c04c <vStackMonitor+0x32c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get IN_ACK_TASK stack \n" );
8110c030:	d0a05017 	ldw	r2,-32448(gp)
8110c034:	100f883a 	mov	r7,r2
8110c038:	01800884 	movi	r6,34
8110c03c:	01400044 	movi	r5,1
8110c040:	01204534 	movhi	r4,33044
8110c044:	21002904 	addi	r4,r4,164
8110c048:	1113be40 	call	81113be4 <fwrite>
    	}

    	fprintf(fp, "\n" );
8110c04c:	d0a05017 	ldw	r2,-32448(gp)
8110c050:	100b883a 	mov	r5,r2
8110c054:	01000284 	movi	r4,10
8110c058:	11135c00 	call	811135c0 <fputc>

    	OSTimeDlyHMSM(0, 0, 10, 0);
8110c05c:	000f883a 	mov	r7,zero
8110c060:	01800284 	movi	r6,10
8110c064:	000b883a 	mov	r5,zero
8110c068:	0009883a 	mov	r4,zero
8110c06c:	11336a00 	call	811336a0 <OSTimeDlyHMSM>
    }
8110c070:	003f3a06 	br	8110bd5c <__reset+0xfb0ebd5c>

8110c074 <vTimeoutCheckerTaskv2>:

#include "timeout_checker_ack_task.h"



void vTimeoutCheckerTaskv2(void *task_data) {
8110c074:	defffc04 	addi	sp,sp,-16
8110c078:	de00012e 	bgeu	sp,et,8110c080 <vTimeoutCheckerTaskv2+0xc>
8110c07c:	003b68fa 	trap	3
8110c080:	dfc00315 	stw	ra,12(sp)
8110c084:	df000215 	stw	fp,8(sp)
8110c088:	df000204 	addi	fp,sp,8
8110c08c:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110c090:	e03ffe05 	stb	zero,-8(fp)

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110c094:	d0a05017 	ldw	r2,-32448(gp)
8110c098:	100f883a 	mov	r7,r2
8110c09c:	01800844 	movi	r6,33
8110c0a0:	01400044 	movi	r5,1
8110c0a4:	01204534 	movhi	r4,33044
8110c0a8:	21003204 	addi	r4,r4,200
8110c0ac:	1113be40 	call	81113be4 <fwrite>
    #endif   

    for (;;) {
        OSSemPend(xSemTimeoutChecker, 0, &ucErrorCode);
8110c0b0:	d0a05517 	ldw	r2,-32428(gp)
8110c0b4:	e1bffe04 	addi	r6,fp,-8
8110c0b8:	000b883a 	mov	r5,zero
8110c0bc:	1009883a 	mov	r4,r2
8110c0c0:	11317080 	call	81131708 <OSSemPend>
        if ( ucErrorCode == OS_NO_ERR ) {
8110c0c4:	e0bffe03 	ldbu	r2,-8(fp)
8110c0c8:	10803fcc 	andi	r2,r2,255
8110c0cc:	1000021e 	bne	r2,zero,8110c0d8 <vTimeoutCheckerTaskv2+0x64>
            /* Just check the restransmission buffer */
            vCheck();
8110c0d0:	110c0e00 	call	8110c0e0 <vCheck>
8110c0d4:	003ff606 	br	8110c0b0 <__reset+0xfb0ec0b0>
        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110c0d8:	11102c00 	call	811102c0 <vFailGetBlockingSemTimeoutTask>
        }
    }
8110c0dc:	003ff406 	br	8110c0b0 <__reset+0xfb0ec0b0>

8110c0e0 <vCheck>:
}


void vCheck( void ) {
8110c0e0:	defffd04 	addi	sp,sp,-12
8110c0e4:	de00012e 	bgeu	sp,et,8110c0ec <vCheck+0xc>
8110c0e8:	003b68fa 	trap	3
8110c0ec:	dfc00215 	stw	ra,8(sp)
8110c0f0:	df000115 	stw	fp,4(sp)
8110c0f4:	df000104 	addi	fp,sp,4
	INT8U ucErrorCode = 0;
8110c0f8:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucHashVerification = 0;
8110c0fc:	e03fff05 	stb	zero,-4(fp)

    ucHashVerification = 0;
8110c100:	e03fff05 	stb	zero,-4(fp)
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110c104:	d0a05683 	ldbu	r2,-32422(gp)
8110c108:	10803fcc 	andi	r2,r2,255
8110c10c:	10800218 	cmpnei	r2,r2,8
8110c110:	1000021e 	bne	r2,zero,8110c11c <vCheck+0x3c>
8110c114:	00c00104 	movi	r3,4
8110c118:	00000106 	br	8110c120 <vCheck+0x40>
8110c11c:	0007883a 	mov	r3,zero
8110c120:	d0a05f03 	ldbu	r2,-32388(gp)
8110c124:	10803fcc 	andi	r2,r2,255
8110c128:	10800218 	cmpnei	r2,r2,8
8110c12c:	1000021e 	bne	r2,zero,8110c138 <vCheck+0x58>
8110c130:	00800084 	movi	r2,2
8110c134:	00000106 	br	8110c13c <vCheck+0x5c>
8110c138:	0005883a 	mov	r2,zero
8110c13c:	1884b03a 	or	r2,r3,r2
8110c140:	1007883a 	mov	r3,r2
8110c144:	d0a05f43 	ldbu	r2,-32387(gp)
8110c148:	10803fcc 	andi	r2,r2,255
8110c14c:	108001a0 	cmpeqi	r2,r2,6
8110c150:	1884b03a 	or	r2,r3,r2
8110c154:	1007883a 	mov	r3,r2
8110c158:	e0bfff03 	ldbu	r2,-4(fp)
8110c15c:	1884b03a 	or	r2,r3,r2
8110c160:	e0bfff05 	stb	r2,-4(fp)

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
8110c164:	e0bfff03 	ldbu	r2,-4(fp)
8110c168:	108001d8 	cmpnei	r2,r2,7
8110c16c:	10003726 	beq	r2,zero,8110c24c <vCheck+0x16c>
        return;

    /* Try to get the Mutex of the UART */
	OSMutexPend(xTxUARTMutex, 0, &ucErrorCode); /* Blocking */
8110c170:	d0a05e17 	ldw	r2,-32392(gp)
8110c174:	e0ffff44 	addi	r3,fp,-3
8110c178:	180d883a 	mov	r6,r3
8110c17c:	000b883a 	mov	r5,zero
8110c180:	1009883a 	mov	r4,r2
8110c184:	112f6fc0 	call	8112f6fc <OSMutexPend>
    if ( ucErrorCode != OS_NO_ERR ) {
8110c188:	e0bfff43 	ldbu	r2,-3(fp)
8110c18c:	10803fcc 	andi	r2,r2,255
8110c190:	10000826 	beq	r2,zero,8110c1b4 <vCheck+0xd4>
        /* Should never get here, is a blocking operation */
		#ifdef DEBUG_ON
			debug(fp,"Should never get here. Trying to get xTxUARTMutex. (vCheck)\n");
8110c194:	d0a05017 	ldw	r2,-32448(gp)
8110c198:	100f883a 	mov	r7,r2
8110c19c:	01800f04 	movi	r6,60
8110c1a0:	01400044 	movi	r5,1
8110c1a4:	01204534 	movhi	r4,33044
8110c1a8:	21003b04 	addi	r4,r4,236
8110c1ac:	1113be40 	call	81113be4 <fwrite>
		#endif
        return;
8110c1b0:	00002706 	br	8110c250 <vCheck+0x170>

    /* ---> At this point we have the Mutex of TX UART, let's try to get the mutex of all retransmission buffer. */


    /* There are any spot used in the xBuffer128? */
    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110c1b4:	e0bfff03 	ldbu	r2,-4(fp)
8110c1b8:	1080004c 	andi	r2,r2,1
8110c1bc:	10803fcc 	andi	r2,r2,255
8110c1c0:	1000021e 	bne	r2,zero,8110c1cc <vCheck+0xec>
        vCheckRetransmission128();
8110c1c4:	110c2640 	call	8110c264 <vCheckRetransmission128>
8110c1c8:	00000506 	br	8110c1e0 <vCheck+0x100>
    else
    	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128)); /* For consistency with SemCount128 */
8110c1cc:	01800604 	movi	r6,24
8110c1d0:	000b883a 	mov	r5,zero
8110c1d4:	01204574 	movhi	r4,33045
8110c1d8:	2137a804 	addi	r4,r4,-8544
8110c1dc:	11147480 	call	81114748 <memset>


        /* There are any spot used in the xBuffer64? */
    if ( 0b00000010 != (0b00000010 & ucHashVerification ) )
8110c1e0:	e0bfff03 	ldbu	r2,-4(fp)
8110c1e4:	1080008c 	andi	r2,r2,2
8110c1e8:	10803fcc 	andi	r2,r2,255
8110c1ec:	1000021e 	bne	r2,zero,8110c1f8 <vCheck+0x118>
        vCheckRetransmission64();
8110c1f0:	110c4e80 	call	8110c4e8 <vCheckRetransmission64>
8110c1f4:	00000506 	br	8110c20c <vCheck+0x12c>
    else
        memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64)); /* For consistency with SemCount64 */
8110c1f8:	01800804 	movi	r6,32
8110c1fc:	000b883a 	mov	r5,zero
8110c200:	01204574 	movhi	r4,33045
8110c204:	2137ae04 	addi	r4,r4,-8520
8110c208:	11147480 	call	81114748 <memset>

    /* There are any spot used in the xBuffer32? */
    if ( 0b00000100 != (0b00000100 & ucHashVerification ) )
8110c20c:	e0bfff03 	ldbu	r2,-4(fp)
8110c210:	1080010c 	andi	r2,r2,4
8110c214:	10803fcc 	andi	r2,r2,255
8110c218:	1000021e 	bne	r2,zero,8110c224 <vCheck+0x144>
        vCheckRetransmission32();
8110c21c:	110c7740 	call	8110c774 <vCheckRetransmission32>
8110c220:	00000506 	br	8110c238 <vCheck+0x158>
    else
    	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32)); /* For consistency with SemCount32 */
8110c224:	01800804 	movi	r6,32
8110c228:	000b883a 	mov	r5,zero
8110c22c:	01204574 	movhi	r4,33045
8110c230:	2137b604 	addi	r4,r4,-8488
8110c234:	11147480 	call	81114748 <memset>


    OSMutexPost(xTxUARTMutex);
8110c238:	d0a05e17 	ldw	r2,-32392(gp)
8110c23c:	1009883a 	mov	r4,r2
8110c240:	112fca00 	call	8112fca0 <OSMutexPost>

    return;
8110c244:	0001883a 	nop
8110c248:	00000106 	br	8110c250 <vCheck+0x170>
    ucHashVerification = 0;
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
        return;
8110c24c:	0001883a 	nop


    OSMutexPost(xTxUARTMutex);

    return;
}
8110c250:	e037883a 	mov	sp,fp
8110c254:	dfc00117 	ldw	ra,4(sp)
8110c258:	df000017 	ldw	fp,0(sp)
8110c25c:	dec00204 	addi	sp,sp,8
8110c260:	f800283a 	ret

8110c264 <vCheckRetransmission128>:

inline void vCheckRetransmission128( void ) {
8110c264:	defffd04 	addi	sp,sp,-12
8110c268:	de00012e 	bgeu	sp,et,8110c270 <vCheckRetransmission128+0xc>
8110c26c:	003b68fa 	trap	3
8110c270:	dfc00215 	stw	ra,8(sp)
8110c274:	df000115 	stw	fp,4(sp)
8110c278:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110c27c:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110c280:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110c284:	d0a05a17 	ldw	r2,-32408(gp)
8110c288:	e0ffff44 	addi	r3,fp,-3
8110c28c:	180b883a 	mov	r5,r3
8110c290:	1009883a 	mov	r4,r2
8110c294:	112f07c0 	call	8112f07c <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110c298:	e0bfff43 	ldbu	r2,-3(fp)
8110c29c:	10803fcc 	andi	r2,r2,255
8110c2a0:	10008b1e 	bne	r2,zero,8110c4d0 <vCheckRetransmission128+0x26c>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110c2a4:	e03fff05 	stb	zero,-4(fp)
8110c2a8:	00008106 	br	8110c4b0 <vCheckRetransmission128+0x24c>
        /* Check if in use */
        if ( xInUseRetrans.b128[ucIL] == TRUE ) {
8110c2ac:	e0ffff03 	ldbu	r3,-4(fp)
8110c2b0:	00a04574 	movhi	r2,33045
8110c2b4:	10b7a804 	addi	r2,r2,-8544
8110c2b8:	18c7883a 	add	r3,r3,r3
8110c2bc:	18c7883a 	add	r3,r3,r3
8110c2c0:	10c5883a 	add	r2,r2,r3
8110c2c4:	10800017 	ldw	r2,0(r2)
8110c2c8:	10800058 	cmpnei	r2,r2,1
8110c2cc:	1000751e 	bne	r2,zero,8110c4a4 <vCheckRetransmission128+0x240>

            if ( xBuffer128[ucIL].bSent == TRUE )
8110c2d0:	e0ffff03 	ldbu	r3,-4(fp)
8110c2d4:	00a04574 	movhi	r2,33045
8110c2d8:	10b7be04 	addi	r2,r2,-8456
8110c2dc:	18c02324 	muli	r3,r3,140
8110c2e0:	10c5883a 	add	r2,r2,r3
8110c2e4:	10802004 	addi	r2,r2,128
8110c2e8:	10800017 	ldw	r2,0(r2)
8110c2ec:	10800058 	cmpnei	r2,r2,1
8110c2f0:	1000211e 	bne	r2,zero,8110c378 <vCheckRetransmission128+0x114>
                if ( ++xBuffer128[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110c2f4:	e0ffff03 	ldbu	r3,-4(fp)
8110c2f8:	00a04574 	movhi	r2,33045
8110c2fc:	10b7be04 	addi	r2,r2,-8456
8110c300:	19002324 	muli	r4,r3,140
8110c304:	1105883a 	add	r2,r2,r4
8110c308:	10802184 	addi	r2,r2,134
8110c30c:	1080000b 	ldhu	r2,0(r2)
8110c310:	10800044 	addi	r2,r2,1
8110c314:	100b883a 	mov	r5,r2
8110c318:	00a04574 	movhi	r2,33045
8110c31c:	10b7be04 	addi	r2,r2,-8456
8110c320:	19002324 	muli	r4,r3,140
8110c324:	1105883a 	add	r2,r2,r4
8110c328:	10802184 	addi	r2,r2,134
8110c32c:	1140000d 	sth	r5,0(r2)
8110c330:	00a04574 	movhi	r2,33045
8110c334:	10b7be04 	addi	r2,r2,-8456
8110c338:	18c02324 	muli	r3,r3,140
8110c33c:	10c5883a 	add	r2,r2,r3
8110c340:	10802184 	addi	r2,r2,134
8110c344:	1080000b 	ldhu	r2,0(r2)
8110c348:	10bfffcc 	andi	r2,r2,65535
8110c34c:	10a0001c 	xori	r2,r2,32768
8110c350:	10a00004 	addi	r2,r2,-32768
8110c354:	10800090 	cmplti	r2,r2,2
8110c358:	1000071e 	bne	r2,zero,8110c378 <vCheckRetransmission128+0x114>
                    xBuffer128[ucIL].bSent = FALSE;
8110c35c:	e0ffff03 	ldbu	r3,-4(fp)
8110c360:	00a04574 	movhi	r2,33045
8110c364:	10b7be04 	addi	r2,r2,-8456
8110c368:	18c02324 	muli	r3,r3,140
8110c36c:	10c5883a 	add	r2,r2,r3
8110c370:	10802004 	addi	r2,r2,128
8110c374:	10000015 	stw	zero,0(r2)

            if ( xBuffer128[ucIL].bSent == FALSE ) {
8110c378:	e0ffff03 	ldbu	r3,-4(fp)
8110c37c:	00a04574 	movhi	r2,33045
8110c380:	10b7be04 	addi	r2,r2,-8456
8110c384:	18c02324 	muli	r3,r3,140
8110c388:	10c5883a 	add	r2,r2,r3
8110c38c:	10802004 	addi	r2,r2,128
8110c390:	10800017 	ldw	r2,0(r2)
8110c394:	1000431e 	bne	r2,zero,8110c4a4 <vCheckRetransmission128+0x240>
                puts(xBuffer128[ucIL].buffer);
8110c398:	e0bfff03 	ldbu	r2,-4(fp)
8110c39c:	10c02324 	muli	r3,r2,140
8110c3a0:	00a04574 	movhi	r2,33045
8110c3a4:	10b7be04 	addi	r2,r2,-8456
8110c3a8:	1885883a 	add	r2,r3,r2
8110c3ac:	1009883a 	mov	r4,r2
8110c3b0:	1114bb40 	call	81114bb4 <puts>
                xBuffer128[ucIL].bSent = TRUE;
8110c3b4:	e0ffff03 	ldbu	r3,-4(fp)
8110c3b8:	00a04574 	movhi	r2,33045
8110c3bc:	10b7be04 	addi	r2,r2,-8456
8110c3c0:	18c02324 	muli	r3,r3,140
8110c3c4:	10c5883a 	add	r2,r2,r3
8110c3c8:	10802004 	addi	r2,r2,128
8110c3cc:	00c00044 	movi	r3,1
8110c3d0:	10c00015 	stw	r3,0(r2)
                xBuffer128[ucIL].usiTimeOut = 0;
8110c3d4:	e0ffff03 	ldbu	r3,-4(fp)
8110c3d8:	00a04574 	movhi	r2,33045
8110c3dc:	10b7be04 	addi	r2,r2,-8456
8110c3e0:	18c02324 	muli	r3,r3,140
8110c3e4:	10c5883a 	add	r2,r2,r3
8110c3e8:	10802184 	addi	r2,r2,134
8110c3ec:	1000000d 	sth	zero,0(r2)

                /* Check if already tried all the times */
                if ( ++xBuffer128[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110c3f0:	e0ffff03 	ldbu	r3,-4(fp)
8110c3f4:	00a04574 	movhi	r2,33045
8110c3f8:	10b7be04 	addi	r2,r2,-8456
8110c3fc:	19002324 	muli	r4,r3,140
8110c400:	1105883a 	add	r2,r2,r4
8110c404:	10802204 	addi	r2,r2,136
8110c408:	10800003 	ldbu	r2,0(r2)
8110c40c:	10800044 	addi	r2,r2,1
8110c410:	100b883a 	mov	r5,r2
8110c414:	00a04574 	movhi	r2,33045
8110c418:	10b7be04 	addi	r2,r2,-8456
8110c41c:	19002324 	muli	r4,r3,140
8110c420:	1105883a 	add	r2,r2,r4
8110c424:	10802204 	addi	r2,r2,136
8110c428:	11400005 	stb	r5,0(r2)
8110c42c:	00a04574 	movhi	r2,33045
8110c430:	10b7be04 	addi	r2,r2,-8456
8110c434:	18c02324 	muli	r3,r3,140
8110c438:	10c5883a 	add	r2,r2,r3
8110c43c:	10802204 	addi	r2,r2,136
8110c440:	10800003 	ldbu	r2,0(r2)
8110c444:	10803fcc 	andi	r2,r2,255
8110c448:	108000b0 	cmpltui	r2,r2,2
8110c44c:	1000151e 	bne	r2,zero,8110c4a4 <vCheckRetransmission128+0x240>
                    /* Now it is a Free place */
                    xInUseRetrans.b128[ucIL] = FALSE;
8110c450:	e0ffff03 	ldbu	r3,-4(fp)
8110c454:	00a04574 	movhi	r2,33045
8110c458:	10b7a804 	addi	r2,r2,-8544
8110c45c:	18c7883a 	add	r3,r3,r3
8110c460:	18c7883a 	add	r3,r3,r3
8110c464:	10c5883a 	add	r2,r2,r3
8110c468:	10000015 	stw	zero,0(r2)
                    SemCount128++;
8110c46c:	d0a05f43 	ldbu	r2,-32387(gp)
8110c470:	10800044 	addi	r2,r2,1
8110c474:	d0a05f45 	stb	r2,-32387(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer128);
8110c478:	d0a05117 	ldw	r2,-32444(gp)
8110c47c:	1009883a 	mov	r4,r2
8110c480:	1131a900 	call	81131a90 <OSSemPost>
8110c484:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110c488:	e0bfff43 	ldbu	r2,-3(fp)
8110c48c:	10803fcc 	andi	r2,r2,255
8110c490:	10000426 	beq	r2,zero,8110c4a4 <vCheckRetransmission128+0x240>
                        SemCount128--;
8110c494:	d0a05f43 	ldbu	r2,-32387(gp)
8110c498:	10bfffc4 	addi	r2,r2,-1
8110c49c:	d0a05f45 	stb	r2,-32387(gp)
                        vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c4a0:	110fbb00 	call	8110fbb0 <vFailSetCountSemaphorexBuffer128>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110c4a4:	e0bfff03 	ldbu	r2,-4(fp)
8110c4a8:	10800044 	addi	r2,r2,1
8110c4ac:	e0bfff05 	stb	r2,-4(fp)
8110c4b0:	e0bfff03 	ldbu	r2,-4(fp)
8110c4b4:	108001b0 	cmpltui	r2,r2,6
8110c4b8:	103f7c1e 	bne	r2,zero,8110c2ac <__reset+0xfb0ec2ac>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer128);
8110c4bc:	d0a05a17 	ldw	r2,-32408(gp)
8110c4c0:	1009883a 	mov	r4,r2
8110c4c4:	112fca00 	call	8112fca0 <OSMutexPost>

    return;
8110c4c8:	0001883a 	nop
8110c4cc:	00000106 	br	8110c4d4 <vCheckRetransmission128+0x270>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110c4d0:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer128);

    return;
}
8110c4d4:	e037883a 	mov	sp,fp
8110c4d8:	dfc00117 	ldw	ra,4(sp)
8110c4dc:	df000017 	ldw	fp,0(sp)
8110c4e0:	dec00204 	addi	sp,sp,8
8110c4e4:	f800283a 	ret

8110c4e8 <vCheckRetransmission64>:

inline void vCheckRetransmission64( void ) {
8110c4e8:	defffd04 	addi	sp,sp,-12
8110c4ec:	de00012e 	bgeu	sp,et,8110c4f4 <vCheckRetransmission64+0xc>
8110c4f0:	003b68fa 	trap	3
8110c4f4:	dfc00215 	stw	ra,8(sp)
8110c4f8:	df000115 	stw	fp,4(sp)
8110c4fc:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110c500:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110c504:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110c508:	d0a05c17 	ldw	r2,-32400(gp)
8110c50c:	e0ffff44 	addi	r3,fp,-3
8110c510:	180b883a 	mov	r5,r3
8110c514:	1009883a 	mov	r4,r2
8110c518:	112f07c0 	call	8112f07c <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110c51c:	e0bfff43 	ldbu	r2,-3(fp)
8110c520:	10803fcc 	andi	r2,r2,255
8110c524:	10008d1e 	bne	r2,zero,8110c75c <vCheckRetransmission64+0x274>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110c528:	e03fff05 	stb	zero,-4(fp)
8110c52c:	00008306 	br	8110c73c <vCheckRetransmission64+0x254>
        /* Check if in use */
        if ( xInUseRetrans.b64[ucIL] == TRUE ) {
8110c530:	e0ffff03 	ldbu	r3,-4(fp)
8110c534:	00a04574 	movhi	r2,33045
8110c538:	10b7a804 	addi	r2,r2,-8544
8110c53c:	18c00184 	addi	r3,r3,6
8110c540:	18c7883a 	add	r3,r3,r3
8110c544:	18c7883a 	add	r3,r3,r3
8110c548:	10c5883a 	add	r2,r2,r3
8110c54c:	10800017 	ldw	r2,0(r2)
8110c550:	10800058 	cmpnei	r2,r2,1
8110c554:	1000761e 	bne	r2,zero,8110c730 <vCheckRetransmission64+0x248>

            if ( xBuffer64[ucIL].bSent == TRUE )
8110c558:	e0ffff03 	ldbu	r3,-4(fp)
8110c55c:	00a04534 	movhi	r2,33044
8110c560:	10997604 	addi	r2,r2,26072
8110c564:	18c01324 	muli	r3,r3,76
8110c568:	10c5883a 	add	r2,r2,r3
8110c56c:	10801004 	addi	r2,r2,64
8110c570:	10800017 	ldw	r2,0(r2)
8110c574:	10800058 	cmpnei	r2,r2,1
8110c578:	1000211e 	bne	r2,zero,8110c600 <vCheckRetransmission64+0x118>
                if ( ++xBuffer64[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110c57c:	e0ffff03 	ldbu	r3,-4(fp)
8110c580:	00a04534 	movhi	r2,33044
8110c584:	10997604 	addi	r2,r2,26072
8110c588:	19001324 	muli	r4,r3,76
8110c58c:	1105883a 	add	r2,r2,r4
8110c590:	10801184 	addi	r2,r2,70
8110c594:	1080000b 	ldhu	r2,0(r2)
8110c598:	10800044 	addi	r2,r2,1
8110c59c:	100b883a 	mov	r5,r2
8110c5a0:	00a04534 	movhi	r2,33044
8110c5a4:	10997604 	addi	r2,r2,26072
8110c5a8:	19001324 	muli	r4,r3,76
8110c5ac:	1105883a 	add	r2,r2,r4
8110c5b0:	10801184 	addi	r2,r2,70
8110c5b4:	1140000d 	sth	r5,0(r2)
8110c5b8:	00a04534 	movhi	r2,33044
8110c5bc:	10997604 	addi	r2,r2,26072
8110c5c0:	18c01324 	muli	r3,r3,76
8110c5c4:	10c5883a 	add	r2,r2,r3
8110c5c8:	10801184 	addi	r2,r2,70
8110c5cc:	1080000b 	ldhu	r2,0(r2)
8110c5d0:	10bfffcc 	andi	r2,r2,65535
8110c5d4:	10a0001c 	xori	r2,r2,32768
8110c5d8:	10a00004 	addi	r2,r2,-32768
8110c5dc:	10800090 	cmplti	r2,r2,2
8110c5e0:	1000071e 	bne	r2,zero,8110c600 <vCheckRetransmission64+0x118>
                    xBuffer64[ucIL].bSent = FALSE;
8110c5e4:	e0ffff03 	ldbu	r3,-4(fp)
8110c5e8:	00a04534 	movhi	r2,33044
8110c5ec:	10997604 	addi	r2,r2,26072
8110c5f0:	18c01324 	muli	r3,r3,76
8110c5f4:	10c5883a 	add	r2,r2,r3
8110c5f8:	10801004 	addi	r2,r2,64
8110c5fc:	10000015 	stw	zero,0(r2)

            if ( xBuffer64[ucIL].bSent == FALSE ) {
8110c600:	e0ffff03 	ldbu	r3,-4(fp)
8110c604:	00a04534 	movhi	r2,33044
8110c608:	10997604 	addi	r2,r2,26072
8110c60c:	18c01324 	muli	r3,r3,76
8110c610:	10c5883a 	add	r2,r2,r3
8110c614:	10801004 	addi	r2,r2,64
8110c618:	10800017 	ldw	r2,0(r2)
8110c61c:	1000441e 	bne	r2,zero,8110c730 <vCheckRetransmission64+0x248>
                puts(xBuffer64[ucIL].buffer);
8110c620:	e0bfff03 	ldbu	r2,-4(fp)
8110c624:	10c01324 	muli	r3,r2,76
8110c628:	00a04534 	movhi	r2,33044
8110c62c:	10997604 	addi	r2,r2,26072
8110c630:	1885883a 	add	r2,r3,r2
8110c634:	1009883a 	mov	r4,r2
8110c638:	1114bb40 	call	81114bb4 <puts>
                xBuffer64[ucIL].bSent = TRUE;
8110c63c:	e0ffff03 	ldbu	r3,-4(fp)
8110c640:	00a04534 	movhi	r2,33044
8110c644:	10997604 	addi	r2,r2,26072
8110c648:	18c01324 	muli	r3,r3,76
8110c64c:	10c5883a 	add	r2,r2,r3
8110c650:	10801004 	addi	r2,r2,64
8110c654:	00c00044 	movi	r3,1
8110c658:	10c00015 	stw	r3,0(r2)
                xBuffer64[ucIL].usiTimeOut = 0;
8110c65c:	e0ffff03 	ldbu	r3,-4(fp)
8110c660:	00a04534 	movhi	r2,33044
8110c664:	10997604 	addi	r2,r2,26072
8110c668:	18c01324 	muli	r3,r3,76
8110c66c:	10c5883a 	add	r2,r2,r3
8110c670:	10801184 	addi	r2,r2,70
8110c674:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */
                if ( ++xBuffer64[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110c678:	e0ffff03 	ldbu	r3,-4(fp)
8110c67c:	00a04534 	movhi	r2,33044
8110c680:	10997604 	addi	r2,r2,26072
8110c684:	19001324 	muli	r4,r3,76
8110c688:	1105883a 	add	r2,r2,r4
8110c68c:	10801204 	addi	r2,r2,72
8110c690:	10800003 	ldbu	r2,0(r2)
8110c694:	10800044 	addi	r2,r2,1
8110c698:	100b883a 	mov	r5,r2
8110c69c:	00a04534 	movhi	r2,33044
8110c6a0:	10997604 	addi	r2,r2,26072
8110c6a4:	19001324 	muli	r4,r3,76
8110c6a8:	1105883a 	add	r2,r2,r4
8110c6ac:	10801204 	addi	r2,r2,72
8110c6b0:	11400005 	stb	r5,0(r2)
8110c6b4:	00a04534 	movhi	r2,33044
8110c6b8:	10997604 	addi	r2,r2,26072
8110c6bc:	18c01324 	muli	r3,r3,76
8110c6c0:	10c5883a 	add	r2,r2,r3
8110c6c4:	10801204 	addi	r2,r2,72
8110c6c8:	10800003 	ldbu	r2,0(r2)
8110c6cc:	10803fcc 	andi	r2,r2,255
8110c6d0:	108000b0 	cmpltui	r2,r2,2
8110c6d4:	1000161e 	bne	r2,zero,8110c730 <vCheckRetransmission64+0x248>
                    /* Now it is a Free place */
                    xInUseRetrans.b64[ucIL] = FALSE;
8110c6d8:	e0ffff03 	ldbu	r3,-4(fp)
8110c6dc:	00a04574 	movhi	r2,33045
8110c6e0:	10b7a804 	addi	r2,r2,-8544
8110c6e4:	18c00184 	addi	r3,r3,6
8110c6e8:	18c7883a 	add	r3,r3,r3
8110c6ec:	18c7883a 	add	r3,r3,r3
8110c6f0:	10c5883a 	add	r2,r2,r3
8110c6f4:	10000015 	stw	zero,0(r2)
                    SemCount64++;
8110c6f8:	d0a05f03 	ldbu	r2,-32388(gp)
8110c6fc:	10800044 	addi	r2,r2,1
8110c700:	d0a05f05 	stb	r2,-32388(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer64);
8110c704:	d0a04d17 	ldw	r2,-32460(gp)
8110c708:	1009883a 	mov	r4,r2
8110c70c:	1131a900 	call	81131a90 <OSSemPost>
8110c710:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110c714:	e0bfff43 	ldbu	r2,-3(fp)
8110c718:	10803fcc 	andi	r2,r2,255
8110c71c:	10000426 	beq	r2,zero,8110c730 <vCheckRetransmission64+0x248>
                        SemCount64--;
8110c720:	d0a05f03 	ldbu	r2,-32388(gp)
8110c724:	10bfffc4 	addi	r2,r2,-1
8110c728:	d0a05f05 	stb	r2,-32388(gp)
                        vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c72c:	110fb480 	call	8110fb48 <vFailSetCountSemaphorexBuffer64>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110c730:	e0bfff03 	ldbu	r2,-4(fp)
8110c734:	10800044 	addi	r2,r2,1
8110c738:	e0bfff05 	stb	r2,-4(fp)
8110c73c:	e0bfff03 	ldbu	r2,-4(fp)
8110c740:	10800230 	cmpltui	r2,r2,8
8110c744:	103f7a1e 	bne	r2,zero,8110c530 <__reset+0xfb0ec530>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer64);
8110c748:	d0a05c17 	ldw	r2,-32400(gp)
8110c74c:	1009883a 	mov	r4,r2
8110c750:	112fca00 	call	8112fca0 <OSMutexPost>

    return;
8110c754:	0001883a 	nop
8110c758:	00000106 	br	8110c760 <vCheckRetransmission64+0x278>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110c75c:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer64);

    return;
}
8110c760:	e037883a 	mov	sp,fp
8110c764:	dfc00117 	ldw	ra,4(sp)
8110c768:	df000017 	ldw	fp,0(sp)
8110c76c:	dec00204 	addi	sp,sp,8
8110c770:	f800283a 	ret

8110c774 <vCheckRetransmission32>:


inline void vCheckRetransmission32( void ) {
8110c774:	defffd04 	addi	sp,sp,-12
8110c778:	de00012e 	bgeu	sp,et,8110c780 <vCheckRetransmission32+0xc>
8110c77c:	003b68fa 	trap	3
8110c780:	dfc00215 	stw	ra,8(sp)
8110c784:	df000115 	stw	fp,4(sp)
8110c788:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110c78c:	e03fff85 	stb	zero,-2(fp)
    unsigned char ucIL = 0;
8110c790:	e03fff05 	stb	zero,-4(fp)
    unsigned char ucMax = 0;
8110c794:	e03fff45 	stb	zero,-3(fp)

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110c798:	d0a05817 	ldw	r2,-32416(gp)
8110c79c:	e0ffff84 	addi	r3,fp,-2
8110c7a0:	180b883a 	mov	r5,r3
8110c7a4:	1009883a 	mov	r4,r2
8110c7a8:	112f07c0 	call	8112f07c <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110c7ac:	e0bfff83 	ldbu	r2,-2(fp)
8110c7b0:	10803fcc 	andi	r2,r2,255
8110c7b4:	10009b1e 	bne	r2,zero,8110ca24 <vCheckRetransmission32+0x2b0>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110c7b8:	e03fff05 	stb	zero,-4(fp)
8110c7bc:	00009106 	br	8110ca04 <vCheckRetransmission32+0x290>
        /* Check if in use */
        if ( xInUseRetrans.b32[ucIL] == TRUE ) {
8110c7c0:	e0ffff03 	ldbu	r3,-4(fp)
8110c7c4:	00a04574 	movhi	r2,33045
8110c7c8:	10b7a804 	addi	r2,r2,-8544
8110c7cc:	18c00384 	addi	r3,r3,14
8110c7d0:	18c7883a 	add	r3,r3,r3
8110c7d4:	18c7883a 	add	r3,r3,r3
8110c7d8:	10c5883a 	add	r2,r2,r3
8110c7dc:	10800017 	ldw	r2,0(r2)
8110c7e0:	10800058 	cmpnei	r2,r2,1
8110c7e4:	1000841e 	bne	r2,zero,8110c9f8 <vCheckRetransmission32+0x284>

            if ( xBuffer32[ucIL].bSent == TRUE )
8110c7e8:	e0ffff03 	ldbu	r3,-4(fp)
8110c7ec:	00a04574 	movhi	r2,33045
8110c7f0:	10a74c04 	addi	r2,r2,-25296
8110c7f4:	18c00b24 	muli	r3,r3,44
8110c7f8:	10c5883a 	add	r2,r2,r3
8110c7fc:	10800804 	addi	r2,r2,32
8110c800:	10800017 	ldw	r2,0(r2)
8110c804:	10800058 	cmpnei	r2,r2,1
8110c808:	1000211e 	bne	r2,zero,8110c890 <vCheckRetransmission32+0x11c>
                if ( ++xBuffer32[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110c80c:	e0ffff03 	ldbu	r3,-4(fp)
8110c810:	00a04574 	movhi	r2,33045
8110c814:	10a74c04 	addi	r2,r2,-25296
8110c818:	19000b24 	muli	r4,r3,44
8110c81c:	1105883a 	add	r2,r2,r4
8110c820:	10800984 	addi	r2,r2,38
8110c824:	1080000b 	ldhu	r2,0(r2)
8110c828:	10800044 	addi	r2,r2,1
8110c82c:	100b883a 	mov	r5,r2
8110c830:	00a04574 	movhi	r2,33045
8110c834:	10a74c04 	addi	r2,r2,-25296
8110c838:	19000b24 	muli	r4,r3,44
8110c83c:	1105883a 	add	r2,r2,r4
8110c840:	10800984 	addi	r2,r2,38
8110c844:	1140000d 	sth	r5,0(r2)
8110c848:	00a04574 	movhi	r2,33045
8110c84c:	10a74c04 	addi	r2,r2,-25296
8110c850:	18c00b24 	muli	r3,r3,44
8110c854:	10c5883a 	add	r2,r2,r3
8110c858:	10800984 	addi	r2,r2,38
8110c85c:	1080000b 	ldhu	r2,0(r2)
8110c860:	10bfffcc 	andi	r2,r2,65535
8110c864:	10a0001c 	xori	r2,r2,32768
8110c868:	10a00004 	addi	r2,r2,-32768
8110c86c:	10800090 	cmplti	r2,r2,2
8110c870:	1000071e 	bne	r2,zero,8110c890 <vCheckRetransmission32+0x11c>
                    xBuffer32[ucIL].bSent = FALSE;
8110c874:	e0ffff03 	ldbu	r3,-4(fp)
8110c878:	00a04574 	movhi	r2,33045
8110c87c:	10a74c04 	addi	r2,r2,-25296
8110c880:	18c00b24 	muli	r3,r3,44
8110c884:	10c5883a 	add	r2,r2,r3
8110c888:	10800804 	addi	r2,r2,32
8110c88c:	10000015 	stw	zero,0(r2)

            if ( xBuffer32[ucIL].bSent == FALSE ) {
8110c890:	e0ffff03 	ldbu	r3,-4(fp)
8110c894:	00a04574 	movhi	r2,33045
8110c898:	10a74c04 	addi	r2,r2,-25296
8110c89c:	18c00b24 	muli	r3,r3,44
8110c8a0:	10c5883a 	add	r2,r2,r3
8110c8a4:	10800804 	addi	r2,r2,32
8110c8a8:	10800017 	ldw	r2,0(r2)
8110c8ac:	1000521e 	bne	r2,zero,8110c9f8 <vCheckRetransmission32+0x284>
                puts(xBuffer32[ucIL].buffer);
8110c8b0:	e0bfff03 	ldbu	r2,-4(fp)
8110c8b4:	10c00b24 	muli	r3,r2,44
8110c8b8:	00a04574 	movhi	r2,33045
8110c8bc:	10a74c04 	addi	r2,r2,-25296
8110c8c0:	1885883a 	add	r2,r3,r2
8110c8c4:	1009883a 	mov	r4,r2
8110c8c8:	1114bb40 	call	81114bb4 <puts>
                xBuffer32[ucIL].bSent = TRUE;
8110c8cc:	e0ffff03 	ldbu	r3,-4(fp)
8110c8d0:	00a04574 	movhi	r2,33045
8110c8d4:	10a74c04 	addi	r2,r2,-25296
8110c8d8:	18c00b24 	muli	r3,r3,44
8110c8dc:	10c5883a 	add	r2,r2,r3
8110c8e0:	10800804 	addi	r2,r2,32
8110c8e4:	00c00044 	movi	r3,1
8110c8e8:	10c00015 	stw	r3,0(r2)
                xBuffer32[ucIL].usiTimeOut = 0;
8110c8ec:	e0ffff03 	ldbu	r3,-4(fp)
8110c8f0:	00a04574 	movhi	r2,33045
8110c8f4:	10a74c04 	addi	r2,r2,-25296
8110c8f8:	18c00b24 	muli	r3,r3,44
8110c8fc:	10c5883a 	add	r2,r2,r3
8110c900:	10800984 	addi	r2,r2,38
8110c904:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */

                ucMax = ( xBuffer32[ucIL].usiId == 1 ) ? N_RETRIES_INI_INF : N_RETRIES_COMM;
8110c908:	e0ffff03 	ldbu	r3,-4(fp)
8110c90c:	00a04574 	movhi	r2,33045
8110c910:	10a74c04 	addi	r2,r2,-25296
8110c914:	18c00b24 	muli	r3,r3,44
8110c918:	10c5883a 	add	r2,r2,r3
8110c91c:	10800904 	addi	r2,r2,36
8110c920:	1080000b 	ldhu	r2,0(r2)
8110c924:	10bfffcc 	andi	r2,r2,65535
8110c928:	10800058 	cmpnei	r2,r2,1
8110c92c:	1000021e 	bne	r2,zero,8110c938 <vCheckRetransmission32+0x1c4>
8110c930:	00bffe84 	movi	r2,-6
8110c934:	00000106 	br	8110c93c <vCheckRetransmission32+0x1c8>
8110c938:	00800044 	movi	r2,1
8110c93c:	e0bfff45 	stb	r2,-3(fp)

                if ( ++xBuffer32[ucIL].ucNofRetries > ucMax ) {
8110c940:	e0ffff03 	ldbu	r3,-4(fp)
8110c944:	00a04574 	movhi	r2,33045
8110c948:	10a74c04 	addi	r2,r2,-25296
8110c94c:	19000b24 	muli	r4,r3,44
8110c950:	1105883a 	add	r2,r2,r4
8110c954:	10800a04 	addi	r2,r2,40
8110c958:	10800003 	ldbu	r2,0(r2)
8110c95c:	10800044 	addi	r2,r2,1
8110c960:	100b883a 	mov	r5,r2
8110c964:	00a04574 	movhi	r2,33045
8110c968:	10a74c04 	addi	r2,r2,-25296
8110c96c:	19000b24 	muli	r4,r3,44
8110c970:	1105883a 	add	r2,r2,r4
8110c974:	10800a04 	addi	r2,r2,40
8110c978:	11400005 	stb	r5,0(r2)
8110c97c:	00a04574 	movhi	r2,33045
8110c980:	10a74c04 	addi	r2,r2,-25296
8110c984:	18c00b24 	muli	r3,r3,44
8110c988:	10c5883a 	add	r2,r2,r3
8110c98c:	10800a04 	addi	r2,r2,40
8110c990:	10800003 	ldbu	r2,0(r2)
8110c994:	10803fcc 	andi	r2,r2,255
8110c998:	e0ffff43 	ldbu	r3,-3(fp)
8110c99c:	1880162e 	bgeu	r3,r2,8110c9f8 <vCheckRetransmission32+0x284>
                    /* Now it is a Free place */
                    xInUseRetrans.b32[ucIL] = FALSE;
8110c9a0:	e0ffff03 	ldbu	r3,-4(fp)
8110c9a4:	00a04574 	movhi	r2,33045
8110c9a8:	10b7a804 	addi	r2,r2,-8544
8110c9ac:	18c00384 	addi	r3,r3,14
8110c9b0:	18c7883a 	add	r3,r3,r3
8110c9b4:	18c7883a 	add	r3,r3,r3
8110c9b8:	10c5883a 	add	r2,r2,r3
8110c9bc:	10000015 	stw	zero,0(r2)
                    SemCount32++;
8110c9c0:	d0a05683 	ldbu	r2,-32422(gp)
8110c9c4:	10800044 	addi	r2,r2,1
8110c9c8:	d0a05685 	stb	r2,-32422(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer32);
8110c9cc:	d0a05b17 	ldw	r2,-32404(gp)
8110c9d0:	1009883a 	mov	r4,r2
8110c9d4:	1131a900 	call	81131a90 <OSSemPost>
8110c9d8:	e0bfff85 	stb	r2,-2(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110c9dc:	e0bfff83 	ldbu	r2,-2(fp)
8110c9e0:	10803fcc 	andi	r2,r2,255
8110c9e4:	10000426 	beq	r2,zero,8110c9f8 <vCheckRetransmission32+0x284>
                        SemCount32--;
8110c9e8:	d0a05683 	ldbu	r2,-32422(gp)
8110c9ec:	10bfffc4 	addi	r2,r2,-1
8110c9f0:	d0a05685 	stb	r2,-32422(gp)
                        vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110c9f4:	110fae00 	call	8110fae0 <vFailSetCountSemaphorexBuffer32>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110c9f8:	e0bfff03 	ldbu	r2,-4(fp)
8110c9fc:	10800044 	addi	r2,r2,1
8110ca00:	e0bfff05 	stb	r2,-4(fp)
8110ca04:	e0bfff03 	ldbu	r2,-4(fp)
8110ca08:	10800230 	cmpltui	r2,r2,8
8110ca0c:	103f6c1e 	bne	r2,zero,8110c7c0 <__reset+0xfb0ec7c0>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer32);
8110ca10:	d0a05817 	ldw	r2,-32416(gp)
8110ca14:	1009883a 	mov	r4,r2
8110ca18:	112fca00 	call	8112fca0 <OSMutexPost>

    return;
8110ca1c:	0001883a 	nop
8110ca20:	00000106 	br	8110ca28 <vCheckRetransmission32+0x2b4>
    unsigned char ucMax = 0;

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110ca24:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer32);

    return;
}
8110ca28:	e037883a 	mov	sp,fp
8110ca2c:	dfc00117 	ldw	ra,4(sp)
8110ca30:	df000017 	ldw	fp,0(sp)
8110ca34:	dec00204 	addi	sp,sp,8
8110ca38:	f800283a 	ret

8110ca3c <bResourcesInitRTOS>:
 * Control of all Simucam application
 */
TSimucam_MEB xSimMeb; /* Struct */

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void ) {
8110ca3c:	defff904 	addi	sp,sp,-28
8110ca40:	de00012e 	bgeu	sp,et,8110ca48 <bResourcesInitRTOS+0xc>
8110ca44:	003b68fa 	trap	3
8110ca48:	dfc00615 	stw	ra,24(sp)
8110ca4c:	df000515 	stw	fp,20(sp)
8110ca50:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110ca54:	00800044 	movi	r2,1
8110ca58:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110ca5c:	0009883a 	mov	r4,zero
8110ca60:	11313e00 	call	811313e0 <OSSemCreate>
8110ca64:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCommInit) {
8110ca68:	d0a04e17 	ldw	r2,-32456(gp)
8110ca6c:	1000021e 	bne	r2,zero,8110ca78 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110ca70:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ca74:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110ca78:	e0bfff04 	addi	r2,fp,-4
8110ca7c:	100b883a 	mov	r5,r2
8110ca80:	010003c4 	movi	r4,15
8110ca84:	112f2280 	call	8112f228 <OSMutexCreate>
8110ca88:	d0a05e15 	stw	r2,-32392(gp)
	if ( err != OS_ERR_NONE ) {
8110ca8c:	e0bfff03 	ldbu	r2,-4(fp)
8110ca90:	10803fcc 	andi	r2,r2,255
8110ca94:	10000526 	beq	r2,zero,8110caac <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110ca98:	e0bfff03 	ldbu	r2,-4(fp)
8110ca9c:	10803fcc 	andi	r2,r2,255
8110caa0:	1009883a 	mov	r4,r2
8110caa4:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110caa8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110caac:	e0bfff04 	addi	r2,fp,-4
8110cab0:	100b883a 	mov	r5,r2
8110cab4:	01000484 	movi	r4,18
8110cab8:	112f2280 	call	8112f228 <OSMutexCreate>
8110cabc:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110cac0:	e0bfff03 	ldbu	r2,-4(fp)
8110cac4:	10803fcc 	andi	r2,r2,255
8110cac8:	10000526 	beq	r2,zero,8110cae0 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110cacc:	e0bfff03 	ldbu	r2,-4(fp)
8110cad0:	10803fcc 	andi	r2,r2,255
8110cad4:	1009883a 	mov	r4,r2
8110cad8:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cadc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110cae0:	e0bfff04 	addi	r2,fp,-4
8110cae4:	100b883a 	mov	r5,r2
8110cae8:	010004c4 	movi	r4,19
8110caec:	112f2280 	call	8112f228 <OSMutexCreate>
8110caf0:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
8110caf4:	e0bfff03 	ldbu	r2,-4(fp)
8110caf8:	10803fcc 	andi	r2,r2,255
8110cafc:	10000526 	beq	r2,zero,8110cb14 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110cb00:	e0bfff03 	ldbu	r2,-4(fp)
8110cb04:	10803fcc 	andi	r2,r2,255
8110cb08:	1009883a 	mov	r4,r2
8110cb0c:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cb10:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110cb14:	e0bfff04 	addi	r2,fp,-4
8110cb18:	100b883a 	mov	r5,r2
8110cb1c:	01000504 	movi	r4,20
8110cb20:	112f2280 	call	8112f228 <OSMutexCreate>
8110cb24:	d0a05815 	stw	r2,-32416(gp)
	if ( err != OS_ERR_NONE ) {
8110cb28:	e0bfff03 	ldbu	r2,-4(fp)
8110cb2c:	10803fcc 	andi	r2,r2,255
8110cb30:	10000526 	beq	r2,zero,8110cb48 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110cb34:	e0bfff03 	ldbu	r2,-4(fp)
8110cb38:	10803fcc 	andi	r2,r2,255
8110cb3c:	1009883a 	mov	r4,r2
8110cb40:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cb44:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	SemCount128 = N_128;
8110cb48:	00800184 	movi	r2,6
8110cb4c:	d0a05f45 	stb	r2,-32387(gp)
	xSemCountBuffer128 = OSSemCreate(N_128);
8110cb50:	01000184 	movi	r4,6
8110cb54:	11313e00 	call	811313e0 <OSSemCreate>
8110cb58:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountBuffer128) {
8110cb5c:	d0a05117 	ldw	r2,-32444(gp)
8110cb60:	1000031e 	bne	r2,zero,8110cb70 <bResourcesInitRTOS+0x134>
		SemCount128 = 0;
8110cb64:	d0205f45 	stb	zero,-32387(gp)
		vFailCreateSemaphoreResources();
8110cb68:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cb6c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	SemCount64 = N_64;
8110cb70:	00800204 	movi	r2,8
8110cb74:	d0a05f05 	stb	r2,-32388(gp)
	xSemCountBuffer64 = OSSemCreate(N_64);
8110cb78:	01000204 	movi	r4,8
8110cb7c:	11313e00 	call	811313e0 <OSSemCreate>
8110cb80:	d0a04d15 	stw	r2,-32460(gp)
	if (!xSemCountBuffer64) {
8110cb84:	d0a04d17 	ldw	r2,-32460(gp)
8110cb88:	1000031e 	bne	r2,zero,8110cb98 <bResourcesInitRTOS+0x15c>
		SemCount64 = 0;
8110cb8c:	d0205f05 	stb	zero,-32388(gp)
		vFailCreateSemaphoreResources();
8110cb90:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cb94:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	SemCount32 = N_32;
8110cb98:	00800204 	movi	r2,8
8110cb9c:	d0a05685 	stb	r2,-32422(gp)
	xSemCountBuffer32 = OSSemCreate(N_32);
8110cba0:	01000204 	movi	r4,8
8110cba4:	11313e00 	call	811313e0 <OSSemCreate>
8110cba8:	d0a05b15 	stw	r2,-32404(gp)
	if (!xSemCountBuffer32) {
8110cbac:	d0a05b17 	ldw	r2,-32404(gp)
8110cbb0:	1000031e 	bne	r2,zero,8110cbc0 <bResourcesInitRTOS+0x184>
		SemCount32 = 0;
8110cbb4:	d0205685 	stb	zero,-32422(gp)
		vFailCreateSemaphoreResources();
8110cbb8:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cbbc:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110cbc0:	e0bfff04 	addi	r2,fp,-4
8110cbc4:	100b883a 	mov	r5,r2
8110cbc8:	01000444 	movi	r4,17
8110cbcc:	112f2280 	call	8112f228 <OSMutexCreate>
8110cbd0:	d0a05315 	stw	r2,-32436(gp)
	if ( err != OS_ERR_NONE ) {
8110cbd4:	e0bfff03 	ldbu	r2,-4(fp)
8110cbd8:	10803fcc 	andi	r2,r2,255
8110cbdc:	10000526 	beq	r2,zero,8110cbf4 <bResourcesInitRTOS+0x1b8>
		vFailCreateMutexSResources(err);
8110cbe0:	e0bfff03 	ldbu	r2,-4(fp)
8110cbe4:	10803fcc 	andi	r2,r2,255
8110cbe8:	1009883a 	mov	r4,r2
8110cbec:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cbf0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110cbf4:	e0bfff04 	addi	r2,fp,-4
8110cbf8:	100b883a 	mov	r5,r2
8110cbfc:	01000544 	movi	r4,21
8110cc00:	112f2280 	call	8112f228 <OSMutexCreate>
8110cc04:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110cc08:	e0bfff03 	ldbu	r2,-4(fp)
8110cc0c:	10803fcc 	andi	r2,r2,255
8110cc10:	10000526 	beq	r2,zero,8110cc28 <bResourcesInitRTOS+0x1ec>
		vFailCreateMutexSResources(err);
8110cc14:	e0bfff03 	ldbu	r2,-4(fp)
8110cc18:	10803fcc 	andi	r2,r2,255
8110cc1c:	1009883a 	mov	r4,r2
8110cc20:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cc24:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110cc28:	0009883a 	mov	r4,zero
8110cc2c:	11313e00 	call	811313e0 <OSSemCreate>
8110cc30:	d0a05415 	stw	r2,-32432(gp)
	if (!xSemCountReceivedACK) {
8110cc34:	d0a05417 	ldw	r2,-32432(gp)
8110cc38:	1000021e 	bne	r2,zero,8110cc44 <bResourcesInitRTOS+0x208>
		vFailCreateSemaphoreResources();
8110cc3c:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cc40:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110cc44:	0009883a 	mov	r4,zero
8110cc48:	11313e00 	call	811313e0 <OSSemCreate>
8110cc4c:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemCountPreParsed) {
8110cc50:	d0a05217 	ldw	r2,-32440(gp)
8110cc54:	1000021e 	bne	r2,zero,8110cc60 <bResourcesInitRTOS+0x224>
		vFailCreateSemaphoreResources();
8110cc58:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cc5c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110cc60:	0009883a 	mov	r4,zero
8110cc64:	11313e00 	call	811313e0 <OSSemCreate>
8110cc68:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountSenderACK) {
8110cc6c:	d0a04f17 	ldw	r2,-32452(gp)
8110cc70:	1000021e 	bne	r2,zero,8110cc7c <bResourcesInitRTOS+0x240>
		vFailCreateSemaphoreResources();
8110cc74:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cc78:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110cc7c:	e0bfff04 	addi	r2,fp,-4
8110cc80:	100b883a 	mov	r5,r2
8110cc84:	01000404 	movi	r4,16
8110cc88:	112f2280 	call	8112f228 <OSMutexCreate>
8110cc8c:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110cc90:	e0bfff03 	ldbu	r2,-4(fp)
8110cc94:	10803fcc 	andi	r2,r2,255
8110cc98:	10000526 	beq	r2,zero,8110ccb0 <bResourcesInitRTOS+0x274>
		vFailCreateMutexSResources(err);
8110cc9c:	e0bfff03 	ldbu	r2,-4(fp)
8110cca0:	10803fcc 	andi	r2,r2,255
8110cca4:	1009883a 	mov	r4,r2
8110cca8:	110f5180 	call	8110f518 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ccac:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110ccb0:	0009883a 	mov	r4,zero
8110ccb4:	11313e00 	call	811313e0 <OSSemCreate>
8110ccb8:	d0a05515 	stw	r2,-32428(gp)
	if (!xSemTimeoutChecker) {
8110ccbc:	d0a05517 	ldw	r2,-32428(gp)
8110ccc0:	1000021e 	bne	r2,zero,8110cccc <bResourcesInitRTOS+0x290>
		vFailCreateSemaphoreResources();
8110ccc4:	110f5780 	call	8110f578 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ccc8:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110cccc:	e0bfff04 	addi	r2,fp,-4
8110ccd0:	d8800215 	stw	r2,8(sp)
8110ccd4:	00a04534 	movhi	r2,33044
8110ccd8:	10804b04 	addi	r2,r2,300
8110ccdc:	d8800115 	stw	r2,4(sp)
8110cce0:	d8000015 	stw	zero,0(sp)
8110cce4:	01e04474 	movhi	r7,33041
8110cce8:	39f87a04 	addi	r7,r7,-7704
8110ccec:	01800084 	movi	r6,2
8110ccf0:	01400104 	movi	r5,4
8110ccf4:	01000284 	movi	r4,10
8110ccf8:	1133aac0 	call	81133aac <OSTmrCreate>
8110ccfc:	d0a05915 	stw	r2,-32412(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110cd00:	e0bfff03 	ldbu	r2,-4(fp)
8110cd04:	10803fcc 	andi	r2,r2,255
8110cd08:	10000226 	beq	r2,zero,8110cd14 <bResourcesInitRTOS+0x2d8>
		vFailCreateTimerRetransmisison();
8110cd0c:	11101dc0 	call	811101dc <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110cd10:	e03ffe15 	stw	zero,-8(fp)
	}

	xNfeeSchedule = OSQCreate(&xNfeeScheduleTBL[0], N_OF_MSG_QUEUE);
8110cd14:	01400304 	movi	r5,12
8110cd18:	01204534 	movhi	r4,33044
8110cd1c:	211e1204 	addi	r4,r4,30792
8110cd20:	11303140 	call	81130314 <OSQCreate>
8110cd24:	d0a04c15 	stw	r2,-32464(gp)
	if ( xNfeeSchedule == NULL ) {
8110cd28:	d0a04c17 	ldw	r2,-32464(gp)
8110cd2c:	1000021e 	bne	r2,zero,8110cd38 <bResourcesInitRTOS+0x2fc>
		vFailCreateScheduleQueue();
8110cd30:	11107580 	call	81110758 <vFailCreateScheduleQueue>
		bSuccess = FALSE;		
8110cd34:	e03ffe15 	stw	zero,-8(fp)
	}


	xFeeQ[0] = OSQCreate(&xFeeQueueTBL0[0], N_MSG_FEE);
8110cd38:	01400104 	movi	r5,4
8110cd3c:	01204574 	movhi	r4,33045
8110cd40:	210b4804 	addi	r4,r4,11552
8110cd44:	11303140 	call	81130314 <OSQCreate>
8110cd48:	1007883a 	mov	r3,r2
8110cd4c:	00a04574 	movhi	r2,33045
8110cd50:	10bc9404 	addi	r2,r2,-3504
8110cd54:	10c00015 	stw	r3,0(r2)
	if ( xFeeQ[0] == NULL ) {
8110cd58:	00a04574 	movhi	r2,33045
8110cd5c:	10bc9404 	addi	r2,r2,-3504
8110cd60:	10800017 	ldw	r2,0(r2)
8110cd64:	1000031e 	bne	r2,zero,8110cd74 <bResourcesInitRTOS+0x338>
		vFailCreateNFEEQueue( 0 );
8110cd68:	0009883a 	mov	r4,zero
8110cd6c:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110cd70:	e03ffe15 	stw	zero,-8(fp)
	}
	xFeeQ[1] = OSQCreate(&xFeeQueueTBL1[0], N_MSG_FEE);
8110cd74:	01400104 	movi	r5,4
8110cd78:	01204574 	movhi	r4,33045
8110cd7c:	210aa404 	addi	r4,r4,10896
8110cd80:	11303140 	call	81130314 <OSQCreate>
8110cd84:	1007883a 	mov	r3,r2
8110cd88:	00a04574 	movhi	r2,33045
8110cd8c:	10bc9404 	addi	r2,r2,-3504
8110cd90:	10c00115 	stw	r3,4(r2)
	if ( xFeeQ[1] == NULL ) {
8110cd94:	00a04574 	movhi	r2,33045
8110cd98:	10bc9404 	addi	r2,r2,-3504
8110cd9c:	10800117 	ldw	r2,4(r2)
8110cda0:	1000031e 	bne	r2,zero,8110cdb0 <bResourcesInitRTOS+0x374>
		vFailCreateNFEEQueue( 1 );
8110cda4:	01000044 	movi	r4,1
8110cda8:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110cdac:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[2] = OSQCreate(&xFeeQueueTBL2[0], N_MSG_FEE);
8110cdb0:	01400104 	movi	r5,4
8110cdb4:	01204574 	movhi	r4,33045
8110cdb8:	213c9a04 	addi	r4,r4,-3480
8110cdbc:	11303140 	call	81130314 <OSQCreate>
8110cdc0:	1007883a 	mov	r3,r2
8110cdc4:	00a04574 	movhi	r2,33045
8110cdc8:	10bc9404 	addi	r2,r2,-3504
8110cdcc:	10c00215 	stw	r3,8(r2)
	if ( xFeeQ[2] == NULL ) {
8110cdd0:	00a04574 	movhi	r2,33045
8110cdd4:	10bc9404 	addi	r2,r2,-3504
8110cdd8:	10800217 	ldw	r2,8(r2)
8110cddc:	1000031e 	bne	r2,zero,8110cdec <bResourcesInitRTOS+0x3b0>
		vFailCreateNFEEQueue( 2 );
8110cde0:	01000084 	movi	r4,2
8110cde4:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110cde8:	e03ffe15 	stw	zero,-8(fp)
	}
	
	xFeeQ[3] = OSQCreate(&xFeeQueueTBL3[0], N_MSG_FEE);
8110cdec:	01400104 	movi	r5,4
8110cdf0:	01204534 	movhi	r4,33044
8110cdf4:	211a0e04 	addi	r4,r4,26680
8110cdf8:	11303140 	call	81130314 <OSQCreate>
8110cdfc:	1007883a 	mov	r3,r2
8110ce00:	00a04574 	movhi	r2,33045
8110ce04:	10bc9404 	addi	r2,r2,-3504
8110ce08:	10c00315 	stw	r3,12(r2)
	if ( xFeeQ[0] == NULL ) {
8110ce0c:	00a04574 	movhi	r2,33045
8110ce10:	10bc9404 	addi	r2,r2,-3504
8110ce14:	10800017 	ldw	r2,0(r2)
8110ce18:	1000031e 	bne	r2,zero,8110ce28 <bResourcesInitRTOS+0x3ec>
		vFailCreateNFEEQueue( 3 );
8110ce1c:	010000c4 	movi	r4,3
8110ce20:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110ce24:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[4] = OSQCreate(&xFeeQueueTBL4[0], N_MSG_FEE);
8110ce28:	01400104 	movi	r5,4
8110ce2c:	01204574 	movhi	r4,33045
8110ce30:	212fa404 	addi	r4,r4,-16752
8110ce34:	11303140 	call	81130314 <OSQCreate>
8110ce38:	1007883a 	mov	r3,r2
8110ce3c:	00a04574 	movhi	r2,33045
8110ce40:	10bc9404 	addi	r2,r2,-3504
8110ce44:	10c00415 	stw	r3,16(r2)
	if ( xFeeQ[4] == NULL ) {
8110ce48:	00a04574 	movhi	r2,33045
8110ce4c:	10bc9404 	addi	r2,r2,-3504
8110ce50:	10800417 	ldw	r2,16(r2)
8110ce54:	1000031e 	bne	r2,zero,8110ce64 <bResourcesInitRTOS+0x428>
		vFailCreateNFEEQueue( 4 );
8110ce58:	01000104 	movi	r4,4
8110ce5c:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110ce60:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[5] = OSQCreate(&xFeeQueueTBL5[0], N_MSG_FEE);
8110ce64:	01400104 	movi	r5,4
8110ce68:	01204574 	movhi	r4,33045
8110ce6c:	21389004 	addi	r4,r4,-7616
8110ce70:	11303140 	call	81130314 <OSQCreate>
8110ce74:	1007883a 	mov	r3,r2
8110ce78:	00a04574 	movhi	r2,33045
8110ce7c:	10bc9404 	addi	r2,r2,-3504
8110ce80:	10c00515 	stw	r3,20(r2)
	if ( xFeeQ[5] == NULL ) {
8110ce84:	00a04574 	movhi	r2,33045
8110ce88:	10bc9404 	addi	r2,r2,-3504
8110ce8c:	10800517 	ldw	r2,20(r2)
8110ce90:	1000031e 	bne	r2,zero,8110cea0 <bResourcesInitRTOS+0x464>
		vFailCreateNFEEQueue( 5 );
8110ce94:	01000144 	movi	r4,5
8110ce98:	11107c00 	call	811107c0 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110ce9c:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110cea0:	e0bffe17 	ldw	r2,-8(fp)
}
8110cea4:	e037883a 	mov	sp,fp
8110cea8:	dfc00117 	ldw	ra,4(sp)
8110ceac:	df000017 	ldw	fp,0(sp)
8110ceb0:	dec00204 	addi	sp,sp,8
8110ceb4:	f800283a 	ret

8110ceb8 <vVariablesInitialization>:

/* Global variables already initialized with zero. But better safe than I'm sorry. */
void vVariablesInitialization ( void ) {
8110ceb8:	defffd04 	addi	sp,sp,-12
8110cebc:	de00012e 	bgeu	sp,et,8110cec4 <vVariablesInitialization+0xc>
8110cec0:	003b68fa 	trap	3
8110cec4:	dfc00215 	stw	ra,8(sp)
8110cec8:	df000115 	stw	fp,4(sp)
8110cecc:	df000104 	addi	fp,sp,4
	unsigned char ucIL = 0;
8110ced0:	e03fff05 	stb	zero,-4(fp)

	usiIdCMD = 2;
8110ced4:	00800084 	movi	r2,2
8110ced8:	d0a0560d 	sth	r2,-32424(gp)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
8110cedc:	01800604 	movi	r6,24
8110cee0:	000b883a 	mov	r5,zero
8110cee4:	01204574 	movhi	r4,33045
8110cee8:	2137a804 	addi	r4,r4,-8544
8110ceec:	11147480 	call	81114748 <memset>
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
8110cef0:	01800804 	movi	r6,32
8110cef4:	000b883a 	mov	r5,zero
8110cef8:	01204574 	movhi	r4,33045
8110cefc:	2137ae04 	addi	r4,r4,-8520
8110cf00:	11147480 	call	81114748 <memset>
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
8110cf04:	01800804 	movi	r6,32
8110cf08:	000b883a 	mov	r5,zero
8110cf0c:	01204574 	movhi	r4,33045
8110cf10:	2137b604 	addi	r4,r4,-8488
8110cf14:	11147480 	call	81114748 <memset>
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110cf18:	e03fff05 	stb	zero,-4(fp)
8110cf1c:	00002806 	br	8110cfc0 <vVariablesInitialization+0x108>
	{
		memset( xBuffer128[ucIL].buffer, 0, 128);
8110cf20:	e0bfff03 	ldbu	r2,-4(fp)
8110cf24:	10c02324 	muli	r3,r2,140
8110cf28:	00a04574 	movhi	r2,33045
8110cf2c:	10b7be04 	addi	r2,r2,-8456
8110cf30:	1885883a 	add	r2,r3,r2
8110cf34:	01802004 	movi	r6,128
8110cf38:	000b883a 	mov	r5,zero
8110cf3c:	1009883a 	mov	r4,r2
8110cf40:	11147480 	call	81114748 <memset>
		xBuffer128[ucIL].bSent = FALSE;
8110cf44:	e0ffff03 	ldbu	r3,-4(fp)
8110cf48:	00a04574 	movhi	r2,33045
8110cf4c:	10b7be04 	addi	r2,r2,-8456
8110cf50:	18c02324 	muli	r3,r3,140
8110cf54:	10c5883a 	add	r2,r2,r3
8110cf58:	10802004 	addi	r2,r2,128
8110cf5c:	10000015 	stw	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
8110cf60:	e0ffff03 	ldbu	r3,-4(fp)
8110cf64:	00a04574 	movhi	r2,33045
8110cf68:	10b7be04 	addi	r2,r2,-8456
8110cf6c:	18c02324 	muli	r3,r3,140
8110cf70:	10c5883a 	add	r2,r2,r3
8110cf74:	10802104 	addi	r2,r2,132
8110cf78:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].usiTimeOut = 0;
8110cf7c:	e0ffff03 	ldbu	r3,-4(fp)
8110cf80:	00a04574 	movhi	r2,33045
8110cf84:	10b7be04 	addi	r2,r2,-8456
8110cf88:	18c02324 	muli	r3,r3,140
8110cf8c:	10c5883a 	add	r2,r2,r3
8110cf90:	10802184 	addi	r2,r2,134
8110cf94:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].ucNofRetries = 0;
8110cf98:	e0ffff03 	ldbu	r3,-4(fp)
8110cf9c:	00a04574 	movhi	r2,33045
8110cfa0:	10b7be04 	addi	r2,r2,-8456
8110cfa4:	18c02324 	muli	r3,r3,140
8110cfa8:	10c5883a 	add	r2,r2,r3
8110cfac:	10802204 	addi	r2,r2,136
8110cfb0:	10000005 	stb	zero,0(r2)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110cfb4:	e0bfff03 	ldbu	r2,-4(fp)
8110cfb8:	10800044 	addi	r2,r2,1
8110cfbc:	e0bfff05 	stb	r2,-4(fp)
8110cfc0:	e0bfff03 	ldbu	r2,-4(fp)
8110cfc4:	108001b0 	cmpltui	r2,r2,6
8110cfc8:	103fd51e 	bne	r2,zero,8110cf20 <__reset+0xfb0ecf20>
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110cfcc:	e03fff05 	stb	zero,-4(fp)
8110cfd0:	00002806 	br	8110d074 <vVariablesInitialization+0x1bc>
	{
		memset( xBuffer64[ucIL].buffer, 0, 64);
8110cfd4:	e0bfff03 	ldbu	r2,-4(fp)
8110cfd8:	10c01324 	muli	r3,r2,76
8110cfdc:	00a04534 	movhi	r2,33044
8110cfe0:	10997604 	addi	r2,r2,26072
8110cfe4:	1885883a 	add	r2,r3,r2
8110cfe8:	01801004 	movi	r6,64
8110cfec:	000b883a 	mov	r5,zero
8110cff0:	1009883a 	mov	r4,r2
8110cff4:	11147480 	call	81114748 <memset>
		xBuffer64[ucIL].bSent = FALSE;
8110cff8:	e0ffff03 	ldbu	r3,-4(fp)
8110cffc:	00a04534 	movhi	r2,33044
8110d000:	10997604 	addi	r2,r2,26072
8110d004:	18c01324 	muli	r3,r3,76
8110d008:	10c5883a 	add	r2,r2,r3
8110d00c:	10801004 	addi	r2,r2,64
8110d010:	10000015 	stw	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
8110d014:	e0ffff03 	ldbu	r3,-4(fp)
8110d018:	00a04534 	movhi	r2,33044
8110d01c:	10997604 	addi	r2,r2,26072
8110d020:	18c01324 	muli	r3,r3,76
8110d024:	10c5883a 	add	r2,r2,r3
8110d028:	10801104 	addi	r2,r2,68
8110d02c:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].usiTimeOut = 0;
8110d030:	e0ffff03 	ldbu	r3,-4(fp)
8110d034:	00a04534 	movhi	r2,33044
8110d038:	10997604 	addi	r2,r2,26072
8110d03c:	18c01324 	muli	r3,r3,76
8110d040:	10c5883a 	add	r2,r2,r3
8110d044:	10801184 	addi	r2,r2,70
8110d048:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].ucNofRetries = 0;
8110d04c:	e0ffff03 	ldbu	r3,-4(fp)
8110d050:	00a04534 	movhi	r2,33044
8110d054:	10997604 	addi	r2,r2,26072
8110d058:	18c01324 	muli	r3,r3,76
8110d05c:	10c5883a 	add	r2,r2,r3
8110d060:	10801204 	addi	r2,r2,72
8110d064:	10000005 	stb	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110d068:	e0bfff03 	ldbu	r2,-4(fp)
8110d06c:	10800044 	addi	r2,r2,1
8110d070:	e0bfff05 	stb	r2,-4(fp)
8110d074:	e0bfff03 	ldbu	r2,-4(fp)
8110d078:	10800230 	cmpltui	r2,r2,8
8110d07c:	103fd51e 	bne	r2,zero,8110cfd4 <__reset+0xfb0ecfd4>
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110d080:	e03fff05 	stb	zero,-4(fp)
8110d084:	00002806 	br	8110d128 <vVariablesInitialization+0x270>
	{
		memset( xBuffer32[ucIL].buffer, 0, 32);
8110d088:	e0bfff03 	ldbu	r2,-4(fp)
8110d08c:	10c00b24 	muli	r3,r2,44
8110d090:	00a04574 	movhi	r2,33045
8110d094:	10a74c04 	addi	r2,r2,-25296
8110d098:	1885883a 	add	r2,r3,r2
8110d09c:	01800804 	movi	r6,32
8110d0a0:	000b883a 	mov	r5,zero
8110d0a4:	1009883a 	mov	r4,r2
8110d0a8:	11147480 	call	81114748 <memset>
		xBuffer32[ucIL].bSent = FALSE;
8110d0ac:	e0ffff03 	ldbu	r3,-4(fp)
8110d0b0:	00a04574 	movhi	r2,33045
8110d0b4:	10a74c04 	addi	r2,r2,-25296
8110d0b8:	18c00b24 	muli	r3,r3,44
8110d0bc:	10c5883a 	add	r2,r2,r3
8110d0c0:	10800804 	addi	r2,r2,32
8110d0c4:	10000015 	stw	zero,0(r2)
		xBuffer32[ucIL].usiId = 0;
8110d0c8:	e0ffff03 	ldbu	r3,-4(fp)
8110d0cc:	00a04574 	movhi	r2,33045
8110d0d0:	10a74c04 	addi	r2,r2,-25296
8110d0d4:	18c00b24 	muli	r3,r3,44
8110d0d8:	10c5883a 	add	r2,r2,r3
8110d0dc:	10800904 	addi	r2,r2,36
8110d0e0:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].usiTimeOut = 0;
8110d0e4:	e0ffff03 	ldbu	r3,-4(fp)
8110d0e8:	00a04574 	movhi	r2,33045
8110d0ec:	10a74c04 	addi	r2,r2,-25296
8110d0f0:	18c00b24 	muli	r3,r3,44
8110d0f4:	10c5883a 	add	r2,r2,r3
8110d0f8:	10800984 	addi	r2,r2,38
8110d0fc:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].ucNofRetries = 0;
8110d100:	e0ffff03 	ldbu	r3,-4(fp)
8110d104:	00a04574 	movhi	r2,33045
8110d108:	10a74c04 	addi	r2,r2,-25296
8110d10c:	18c00b24 	muli	r3,r3,44
8110d110:	10c5883a 	add	r2,r2,r3
8110d114:	10800a04 	addi	r2,r2,40
8110d118:	10000005 	stb	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110d11c:	e0bfff03 	ldbu	r2,-4(fp)
8110d120:	10800044 	addi	r2,r2,1
8110d124:	e0bfff05 	stb	r2,-4(fp)
8110d128:	e0bfff03 	ldbu	r2,-4(fp)
8110d12c:	10800230 	cmpltui	r2,r2,8
8110d130:	103fd51e 	bne	r2,zero,8110d088 <__reset+0xfb0ed088>
*/




}
8110d134:	0001883a 	nop
8110d138:	e037883a 	mov	sp,fp
8110d13c:	dfc00117 	ldw	ra,4(sp)
8110d140:	df000017 	ldw	fp,0(sp)
8110d144:	dec00204 	addi	sp,sp,8
8110d148:	f800283a 	ret

8110d14c <main>:



/* Entry point */
int main(void)
{
8110d14c:	defff704 	addi	sp,sp,-36
8110d150:	de00012e 	bgeu	sp,et,8110d158 <main+0xc>
8110d154:	003b68fa 	trap	3
8110d158:	dfc00815 	stw	ra,32(sp)
8110d15c:	df000715 	stw	fp,28(sp)
8110d160:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110d164:	e03ffe15 	stw	zero,-8(fp)
	
	OSInit();
8110d168:	112b6c40 	call	8112b6c4 <OSInit>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110d16c:	01604534 	movhi	r5,33044
8110d170:	29404f04 	addi	r5,r5,316
8110d174:	01204534 	movhi	r4,33044
8110d178:	21005004 	addi	r4,r4,320
8110d17c:	11135000 	call	81113500 <fopen>
8110d180:	d0a05015 	stw	r2,-32448(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110d184:	d0a05017 	ldw	r2,-32448(gp)
8110d188:	100f883a 	mov	r7,r2
8110d18c:	01800484 	movi	r6,18
8110d190:	01400044 	movi	r5,1
8110d194:	01204534 	movhi	r4,33044
8110d198:	21005504 	addi	r4,r4,340
8110d19c:	1113be40 	call	81113be4 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110d1a0:	11113f40 	call	811113f4 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110d1a4:	1111ab40 	call	81111ab4 <bTestSimucamCriticalHW>
8110d1a8:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d1ac:	e0bffe17 	ldw	r2,-8(fp)
8110d1b0:	1000031e 	bne	r2,zero,8110d1c0 <main+0x74>
		vFailTestCriticasParts();
8110d1b4:	110f5c40 	call	8110f5c4 <vFailTestCriticasParts>
		return -1;
8110d1b8:	00bfffc4 	movi	r2,-1
8110d1bc:	00003d06 	br	8110d2b4 <main+0x168>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110d1c0:	11119000 	call	81111900 <bInitializeSDCard>
8110d1c4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d1c8:	e0bffe17 	ldw	r2,-8(fp)
8110d1cc:	1000031e 	bne	r2,zero,8110d1dc <main+0x90>
		vFailTestCriticasParts();
8110d1d0:	110f5c40 	call	8110f5c4 <vFailTestCriticasParts>
		return -1;
8110d1d4:	00bfffc4 	movi	r2,-1
8110d1d8:	00003606 	br	8110d2b4 <main+0x168>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110d1dc:	110e6100 	call	8110e610 <vLoadDefaultETHConf>
8110d1e0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d1e4:	e0bffe17 	ldw	r2,-8(fp)
8110d1e8:	1000091e 	bne	r2,zero,8110d210 <main+0xc4>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110d1ec:	d0a05017 	ldw	r2,-32448(gp)
8110d1f0:	100f883a 	mov	r7,r2
8110d1f4:	01801644 	movi	r6,89
8110d1f8:	01400044 	movi	r5,1
8110d1fc:	01204534 	movhi	r4,33044
8110d200:	21005a04 	addi	r4,r4,360
8110d204:	1113be40 	call	81113be4 <fwrite>
		#endif
		return -1;
8110d208:	00bfffc4 	movi	r2,-1
8110d20c:	00002906 	br	8110d2b4 <main+0x168>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110d210:	110ef9c0 	call	8110ef9c <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110d214:	110ca3c0 	call	8110ca3c <bResourcesInitRTOS>
8110d218:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d21c:	e0bffe17 	ldw	r2,-8(fp)
8110d220:	1000091e 	bne	r2,zero,8110d248 <main+0xfc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110d224:	d0a05017 	ldw	r2,-32448(gp)
8110d228:	100f883a 	mov	r7,r2
8110d22c:	01800ac4 	movi	r6,43
8110d230:	01400044 	movi	r5,1
8110d234:	01204534 	movhi	r4,33044
8110d238:	21007104 	addi	r4,r4,452
8110d23c:	1113be40 	call	81113be4 <fwrite>
		return -1;
8110d240:	00bfffc4 	movi	r2,-1
8110d244:	00001b06 	br	8110d2b4 <main+0x168>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMeb );
8110d248:	01204574 	movhi	r4,33045
8110d24c:	21241e04 	addi	r4,r4,-28552
8110d250:	11115240 	call	81111524 <vSimucamStructureInit>

	vVariablesInitialization();
8110d254:	110ceb80 	call	8110ceb8 <vVariablesInitialization>
									vInitialTask_stk,
									INITIALIZATION_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vInitialTask,
8110d258:	d8000415 	stw	zero,16(sp)
8110d25c:	d8000315 	stw	zero,12(sp)
8110d260:	00810004 	movi	r2,1024
8110d264:	d8800215 	stw	r2,8(sp)
8110d268:	00a04574 	movhi	r2,33045
8110d26c:	10afa804 	addi	r2,r2,-16736
8110d270:	d8800115 	stw	r2,4(sp)
8110d274:	00800044 	movi	r2,1
8110d278:	d8800015 	stw	r2,0(sp)
8110d27c:	01c00044 	movi	r7,1
8110d280:	01a04574 	movhi	r6,33045
8110d284:	31b3a704 	addi	r6,r6,-12644
8110d288:	000b883a 	mov	r5,zero
8110d28c:	01204474 	movhi	r4,33041
8110d290:	2127d304 	addi	r4,r4,-24756
8110d294:	11324740 	call	81132474 <OSTaskCreateExt>
8110d298:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110d29c:	e0bfff03 	ldbu	r2,-4(fp)
8110d2a0:	1000021e 	bne	r2,zero,8110d2ac <main+0x160>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110d2a4:	112b9f40 	call	8112b9f4 <OSStart>
8110d2a8:	00000106 	br	8110d2b0 <main+0x164>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110d2ac:	110f9b00 	call	8110f9b0 <vFailInitialization>
	}
  
	return 0;
8110d2b0:	0005883a 	mov	r2,zero
}
8110d2b4:	e037883a 	mov	sp,fp
8110d2b8:	dfc00117 	ldw	ra,4(sp)
8110d2bc:	df000017 	ldw	fp,0(sp)
8110d2c0:	dec00204 	addi	sp,sp,8
8110d2c4:	f800283a 	ret

8110d2c8 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110d2c8:	defffe04 	addi	sp,sp,-8
8110d2cc:	de00012e 	bgeu	sp,et,8110d2d4 <vCCDLoadDefaultValues+0xc>
8110d2d0:	003b68fa 	trap	3
8110d2d4:	df000115 	stw	fp,4(sp)
8110d2d8:	df000104 	addi	fp,sp,4
8110d2dc:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110d2e0:	e0bfff17 	ldw	r2,-4(fp)
8110d2e4:	00c46784 	movi	r3,4510
8110d2e8:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110d2ec:	e0bfff17 	ldw	r2,-4(fp)
8110d2f0:	00c00784 	movi	r3,30
8110d2f4:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110d2f8:	e0bfff17 	ldw	r2,-4(fp)
8110d2fc:	00c233c4 	movi	r3,2255
8110d300:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110d304:	e0bfff17 	ldw	r2,-4(fp)
8110d308:	00c003c4 	movi	r3,15
8110d30c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110d310:	e0bfff17 	ldw	r2,-4(fp)
8110d314:	00c00644 	movi	r3,25
8110d318:	10c0000d 	sth	r3,0(r2)
}
8110d31c:	0001883a 	nop
8110d320:	e037883a 	mov	sp,fp
8110d324:	df000017 	ldw	fp,0(sp)
8110d328:	dec00104 	addi	sp,sp,4
8110d32c:	f800283a 	ret

8110d330 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110d330:	defff904 	addi	sp,sp,-28
8110d334:	de00012e 	bgeu	sp,et,8110d33c <vCCDChangeValues+0xc>
8110d338:	003b68fa 	trap	3
8110d33c:	df000615 	stw	fp,24(sp)
8110d340:	df000604 	addi	fp,sp,24
8110d344:	e13ffa15 	stw	r4,-24(fp)
8110d348:	2811883a 	mov	r8,r5
8110d34c:	300b883a 	mov	r5,r6
8110d350:	3809883a 	mov	r4,r7
8110d354:	e0c00117 	ldw	r3,4(fp)
8110d358:	e0800217 	ldw	r2,8(fp)
8110d35c:	e23ffb0d 	sth	r8,-20(fp)
8110d360:	e17ffc0d 	sth	r5,-16(fp)
8110d364:	e13ffd0d 	sth	r4,-12(fp)
8110d368:	e0fffe0d 	sth	r3,-8(fp)
8110d36c:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110d370:	e0bffa17 	ldw	r2,-24(fp)
8110d374:	e0fffb0b 	ldhu	r3,-20(fp)
8110d378:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110d37c:	e0bffa17 	ldw	r2,-24(fp)
8110d380:	e0fffc0b 	ldhu	r3,-16(fp)
8110d384:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110d388:	e0bffa17 	ldw	r2,-24(fp)
8110d38c:	e0fffd0b 	ldhu	r3,-12(fp)
8110d390:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110d394:	e0bffa17 	ldw	r2,-24(fp)
8110d398:	e0fffe0b 	ldhu	r3,-8(fp)
8110d39c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110d3a0:	e0bffa17 	ldw	r2,-24(fp)
8110d3a4:	e0ffff0b 	ldhu	r3,-4(fp)
8110d3a8:	10c0000d 	sth	r3,0(r2)
}
8110d3ac:	0001883a 	nop
8110d3b0:	e037883a 	mov	sp,fp
8110d3b4:	df000017 	ldw	fp,0(sp)
8110d3b8:	dec00104 	addi	sp,sp,4
8110d3bc:	f800283a 	ret

8110d3c0 <bSendUART128v2>:
#include "communication_utils.h"


/* Make sure that there is only 127 characters to send */
/* Always, ALWAYS send only an char[128] that you first did a memset(cBuffer,0,128), before put some string on it. */
bool bSendUART128v2 ( char *cBuffer, short int siIdMessage ) {
8110d3c0:	defff904 	addi	sp,sp,-28
8110d3c4:	de00012e 	bgeu	sp,et,8110d3cc <bSendUART128v2+0xc>
8110d3c8:	003b68fa 	trap	3
8110d3cc:	dfc00615 	stw	ra,24(sp)
8110d3d0:	df000515 	stw	fp,20(sp)
8110d3d4:	df000504 	addi	fp,sp,20
8110d3d8:	e13ffe15 	stw	r4,-8(fp)
8110d3dc:	2805883a 	mov	r2,r5
8110d3e0:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;;
8110d3e4:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110d3e8:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110d3ec:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110d3f0:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110d3f4:	d0a05117 	ldw	r2,-32444(gp)
8110d3f8:	e0fffd04 	addi	r3,fp,-12
8110d3fc:	180d883a 	mov	r6,r3
8110d400:	01400504 	movi	r5,20
8110d404:	1009883a 	mov	r4,r2
8110d408:	11317080 	call	81131708 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110d40c:	e0bffd03 	ldbu	r2,-12(fp)
8110d410:	10803fcc 	andi	r2,r2,255
8110d414:	10000326 	beq	r2,zero,8110d424 <bSendUART128v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110d418:	110fc180 	call	8110fc18 <vFailGetCountSemaphorexBuffer128>
		return bSuccessL;
8110d41c:	e0bffc17 	ldw	r2,-16(fp)
8110d420:	00009e06 	br	8110d69c <bSendUART128v2+0x2dc>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer128 */
	OSMutexPend(xMutexBuffer128, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110d424:	d0a05a17 	ldw	r2,-32408(gp)
8110d428:	e0fffd04 	addi	r3,fp,-12
8110d42c:	180d883a 	mov	r6,r3
8110d430:	01400104 	movi	r5,4
8110d434:	1009883a 	mov	r4,r2
8110d438:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110d43c:	e0bffd03 	ldbu	r2,-12(fp)
8110d440:	10803fcc 	andi	r2,r2,255
8110d444:	10001126 	beq	r2,zero,8110d48c <bSendUART128v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer128 that protect xBuffer128. (bSendUART128v2)\n");
8110d448:	d0a05017 	ldw	r2,-32448(gp)
8110d44c:	100f883a 	mov	r7,r2
8110d450:	01801484 	movi	r6,82
8110d454:	01400044 	movi	r5,1
8110d458:	01204534 	movhi	r4,33044
8110d45c:	21007c04 	addi	r4,r4,496
8110d460:	1113be40 	call	81113be4 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110d464:	d0a05117 	ldw	r2,-32444(gp)
8110d468:	1009883a 	mov	r4,r2
8110d46c:	1131a900 	call	81131a90 <OSSemPost>
8110d470:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110d474:	e0bffd03 	ldbu	r2,-12(fp)
8110d478:	10803fcc 	andi	r2,r2,255
8110d47c:	10000126 	beq	r2,zero,8110d484 <bSendUART128v2+0xc4>
			vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110d480:	110fbb00 	call	8110fbb0 <vFailSetCountSemaphorexBuffer128>
		}

		return bSuccessL;
8110d484:	e0bffc17 	ldw	r2,-16(fp)
8110d488:	00008406 	br	8110d69c <bSendUART128v2+0x2dc>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110d48c:	e03ffb05 	stb	zero,-20(fp)
8110d490:	00004306 	br	8110d5a0 <bSendUART128v2+0x1e0>
	{
		if ( xInUseRetrans.b128[ucIL] == FALSE ) {
8110d494:	e0fffb03 	ldbu	r3,-20(fp)
8110d498:	00a04574 	movhi	r2,33045
8110d49c:	10b7a804 	addi	r2,r2,-8544
8110d4a0:	18c7883a 	add	r3,r3,r3
8110d4a4:	18c7883a 	add	r3,r3,r3
8110d4a8:	10c5883a 	add	r2,r2,r3
8110d4ac:	10800017 	ldw	r2,0(r2)
8110d4b0:	1000381e 	bne	r2,zero,8110d594 <bSendUART128v2+0x1d4>
			/* Clear the buffer */
			memset(xBuffer128[ucIL].buffer, 0, 128);
8110d4b4:	e0bffb03 	ldbu	r2,-20(fp)
8110d4b8:	10c02324 	muli	r3,r2,140
8110d4bc:	00a04574 	movhi	r2,33045
8110d4c0:	10b7be04 	addi	r2,r2,-8456
8110d4c4:	1885883a 	add	r2,r3,r2
8110d4c8:	01802004 	movi	r6,128
8110d4cc:	000b883a 	mov	r5,zero
8110d4d0:	1009883a 	mov	r4,r2
8110d4d4:	11147480 	call	81114748 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer128[ucIL].buffer, cBuffer, 127);
8110d4d8:	e0bffb03 	ldbu	r2,-20(fp)
8110d4dc:	10c02324 	muli	r3,r2,140
8110d4e0:	00a04574 	movhi	r2,33045
8110d4e4:	10b7be04 	addi	r2,r2,-8456
8110d4e8:	1885883a 	add	r2,r3,r2
8110d4ec:	01801fc4 	movi	r6,127
8110d4f0:	e17ffe17 	ldw	r5,-8(fp)
8110d4f4:	1009883a 	mov	r4,r2
8110d4f8:	11145f80 	call	811145f8 <memcpy>
			xBuffer128[ucIL].usiId = siIdMessage;
8110d4fc:	e13ffb03 	ldbu	r4,-20(fp)
8110d500:	e0ffff0b 	ldhu	r3,-4(fp)
8110d504:	00a04574 	movhi	r2,33045
8110d508:	10b7be04 	addi	r2,r2,-8456
8110d50c:	21002324 	muli	r4,r4,140
8110d510:	1105883a 	add	r2,r2,r4
8110d514:	10802104 	addi	r2,r2,132
8110d518:	10c0000d 	sth	r3,0(r2)
			xBuffer128[ucIL].ucNofRetries = 0;
8110d51c:	e0fffb03 	ldbu	r3,-20(fp)
8110d520:	00a04574 	movhi	r2,33045
8110d524:	10b7be04 	addi	r2,r2,-8456
8110d528:	18c02324 	muli	r3,r3,140
8110d52c:	10c5883a 	add	r2,r2,r3
8110d530:	10802204 	addi	r2,r2,136
8110d534:	10000005 	stb	zero,0(r2)
			xBuffer128[ucIL].usiTimeOut = 0;
8110d538:	e0fffb03 	ldbu	r3,-20(fp)
8110d53c:	00a04574 	movhi	r2,33045
8110d540:	10b7be04 	addi	r2,r2,-8456
8110d544:	18c02324 	muli	r3,r3,140
8110d548:	10c5883a 	add	r2,r2,r3
8110d54c:	10802184 	addi	r2,r2,134
8110d550:	1000000d 	sth	zero,0(r2)
			xBuffer128[ucIL].bSent = FALSE;
8110d554:	e0fffb03 	ldbu	r3,-20(fp)
8110d558:	00a04574 	movhi	r2,33045
8110d55c:	10b7be04 	addi	r2,r2,-8456
8110d560:	18c02324 	muli	r3,r3,140
8110d564:	10c5883a 	add	r2,r2,r3
8110d568:	10802004 	addi	r2,r2,128
8110d56c:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b128[ucIL] = TRUE;
8110d570:	e0fffb03 	ldbu	r3,-20(fp)
8110d574:	00a04574 	movhi	r2,33045
8110d578:	10b7a804 	addi	r2,r2,-8544
8110d57c:	18c7883a 	add	r3,r3,r3
8110d580:	18c7883a 	add	r3,r3,r3
8110d584:	10c5883a 	add	r2,r2,r3
8110d588:	00c00044 	movi	r3,1
8110d58c:	10c00015 	stw	r3,0(r2)
			break;
8110d590:	00000606 	br	8110d5ac <bSendUART128v2+0x1ec>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110d594:	e0bffb03 	ldbu	r2,-20(fp)
8110d598:	10800044 	addi	r2,r2,1
8110d59c:	e0bffb05 	stb	r2,-20(fp)
8110d5a0:	e0bffb03 	ldbu	r2,-20(fp)
8110d5a4:	108001b0 	cmpltui	r2,r2,6
8110d5a8:	103fba1e 	bne	r2,zero,8110d494 <__reset+0xfb0ed494>
			xInUseRetrans.b128[ucIL] = TRUE;
			break;
		}
	}

	if ( ucIL >= N_128 ) {
8110d5ac:	e0bffb03 	ldbu	r2,-20(fp)
8110d5b0:	108001b0 	cmpltui	r2,r2,6
8110d5b4:	1000091e 	bne	r2,zero,8110d5dc <bSendUART128v2+0x21c>
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110d5b8:	d0a05117 	ldw	r2,-32444(gp)
8110d5bc:	1009883a 	mov	r4,r2
8110d5c0:	1131a900 	call	81131a90 <OSSemPost>
8110d5c4:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer128);
8110d5c8:	d0a05a17 	ldw	r2,-32408(gp)
8110d5cc:	1009883a 	mov	r4,r2
8110d5d0:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110d5d4:	e0bffc17 	ldw	r2,-16(fp)
8110d5d8:	00003006 	br	8110d69c <bSendUART128v2+0x2dc>
	}

	bSuccessL = TRUE;
8110d5dc:	00800044 	movi	r2,1
8110d5e0:	e0bffc15 	stw	r2,-16(fp)
	SemCount128--; /* Sure that you get the semaphore */
8110d5e4:	d0a05f43 	ldbu	r2,-32387(gp)
8110d5e8:	10bfffc4 	addi	r2,r2,-1
8110d5ec:	d0a05f45 	stb	r2,-32387(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110d5f0:	d0a05e17 	ldw	r2,-32392(gp)
8110d5f4:	e0fffd04 	addi	r3,fp,-12
8110d5f8:	180d883a 	mov	r6,r3
8110d5fc:	01400084 	movi	r5,2
8110d600:	1009883a 	mov	r4,r2
8110d604:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110d608:	e0bffd03 	ldbu	r2,-12(fp)
8110d60c:	10803fcc 	andi	r2,r2,255
8110d610:	10000c26 	beq	r2,zero,8110d644 <bSendUART128v2+0x284>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART128v2)\n");
8110d614:	d0a05017 	ldw	r2,-32448(gp)
8110d618:	100f883a 	mov	r7,r2
8110d61c:	01801c04 	movi	r6,112
8110d620:	01400044 	movi	r5,1
8110d624:	01204534 	movhi	r4,33044
8110d628:	21009104 	addi	r4,r4,580
8110d62c:	1113be40 	call	81113be4 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer128 */
		OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110d630:	d0a05a17 	ldw	r2,-32408(gp)
8110d634:	1009883a 	mov	r4,r2
8110d638:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110d63c:	e0bffc17 	ldw	r2,-16(fp)
8110d640:	00001606 	br	8110d69c <bSendUART128v2+0x2dc>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer128[ucIL].buffer);
8110d644:	e0bffb03 	ldbu	r2,-20(fp)
8110d648:	10c02324 	muli	r3,r2,140
8110d64c:	00a04574 	movhi	r2,33045
8110d650:	10b7be04 	addi	r2,r2,-8456
8110d654:	1885883a 	add	r2,r3,r2
8110d658:	1009883a 	mov	r4,r2
8110d65c:	1114bb40 	call	81114bb4 <puts>
	xBuffer128[ucIL].bSent = TRUE;
8110d660:	e0fffb03 	ldbu	r3,-20(fp)
8110d664:	00a04574 	movhi	r2,33045
8110d668:	10b7be04 	addi	r2,r2,-8456
8110d66c:	18c02324 	muli	r3,r3,140
8110d670:	10c5883a 	add	r2,r2,r3
8110d674:	10802004 	addi	r2,r2,128
8110d678:	00c00044 	movi	r3,1
8110d67c:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */

	OSMutexPost(xTxUARTMutex);
8110d680:	d0a05e17 	ldw	r2,-32392(gp)
8110d684:	1009883a 	mov	r4,r2
8110d688:	112fca00 	call	8112fca0 <OSMutexPost>
	OSMutexPost(xMutexBuffer128);
8110d68c:	d0a05a17 	ldw	r2,-32408(gp)
8110d690:	1009883a 	mov	r4,r2
8110d694:	112fca00 	call	8112fca0 <OSMutexPost>

	return bSuccessL;
8110d698:	e0bffc17 	ldw	r2,-16(fp)
}
8110d69c:	e037883a 	mov	sp,fp
8110d6a0:	dfc00117 	ldw	ra,4(sp)
8110d6a4:	df000017 	ldw	fp,0(sp)
8110d6a8:	dec00204 	addi	sp,sp,8
8110d6ac:	f800283a 	ret

8110d6b0 <bSendUART64v2>:



/* Make sure that there is only 63 characters to send */
/* Always, ALWAYS send only an char[64] that you first did a memset(cBuffer,0,64), before put some string on it. */
bool bSendUART64v2 ( char *cBuffer, short int siIdMessage ) {
8110d6b0:	defff904 	addi	sp,sp,-28
8110d6b4:	de00012e 	bgeu	sp,et,8110d6bc <bSendUART64v2+0xc>
8110d6b8:	003b68fa 	trap	3
8110d6bc:	dfc00615 	stw	ra,24(sp)
8110d6c0:	df000515 	stw	fp,20(sp)
8110d6c4:	df000504 	addi	fp,sp,20
8110d6c8:	e13ffe15 	stw	r4,-8(fp)
8110d6cc:	2805883a 	mov	r2,r5
8110d6d0:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110d6d4:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110d6d8:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110d6dc:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110d6e0:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110d6e4:	d0a04d17 	ldw	r2,-32460(gp)
8110d6e8:	e0fffd04 	addi	r3,fp,-12
8110d6ec:	180d883a 	mov	r6,r3
8110d6f0:	01400504 	movi	r5,20
8110d6f4:	1009883a 	mov	r4,r2
8110d6f8:	11317080 	call	81131708 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110d6fc:	e0bffd03 	ldbu	r2,-12(fp)
8110d700:	10803fcc 	andi	r2,r2,255
8110d704:	10000326 	beq	r2,zero,8110d714 <bSendUART64v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110d708:	110fc800 	call	8110fc80 <vFailGetCountSemaphorexBuffer64>
		return bSuccessL;
8110d70c:	e0bffc17 	ldw	r2,-16(fp)
8110d710:	0000a006 	br	8110d994 <bSendUART64v2+0x2e4>
	/* ---> At this point we know that there is some space in the buffer */

	
	
	/* Need to get the Mutex that protects xBuffer64 */
	OSMutexPend(xMutexBuffer64, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110d714:	d0a05c17 	ldw	r2,-32400(gp)
8110d718:	e0fffd04 	addi	r3,fp,-12
8110d71c:	180d883a 	mov	r6,r3
8110d720:	01400104 	movi	r5,4
8110d724:	1009883a 	mov	r4,r2
8110d728:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110d72c:	e0bffd03 	ldbu	r2,-12(fp)
8110d730:	10803fcc 	andi	r2,r2,255
8110d734:	10001126 	beq	r2,zero,8110d77c <bSendUART64v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer64 that protect xBuffer64. (bSendUART64v2)\n");
8110d738:	d0a05017 	ldw	r2,-32448(gp)
8110d73c:	100f883a 	mov	r7,r2
8110d740:	018013c4 	movi	r6,79
8110d744:	01400044 	movi	r5,1
8110d748:	01204534 	movhi	r4,33044
8110d74c:	2100ae04 	addi	r4,r4,696
8110d750:	1113be40 	call	81113be4 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110d754:	d0a04d17 	ldw	r2,-32460(gp)
8110d758:	1009883a 	mov	r4,r2
8110d75c:	1131a900 	call	81131a90 <OSSemPost>
8110d760:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110d764:	e0bffd03 	ldbu	r2,-12(fp)
8110d768:	10803fcc 	andi	r2,r2,255
8110d76c:	10000126 	beq	r2,zero,8110d774 <bSendUART64v2+0xc4>
			vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110d770:	110fb480 	call	8110fb48 <vFailSetCountSemaphorexBuffer64>
		}

		return bSuccessL;
8110d774:	e0bffc17 	ldw	r2,-16(fp)
8110d778:	00008606 	br	8110d994 <bSendUART64v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110d77c:	e03ffb05 	stb	zero,-20(fp)
8110d780:	00004506 	br	8110d898 <bSendUART64v2+0x1e8>
	{
		if ( xInUseRetrans.b64[ucIL] == FALSE ) {
8110d784:	e0fffb03 	ldbu	r3,-20(fp)
8110d788:	00a04574 	movhi	r2,33045
8110d78c:	10b7a804 	addi	r2,r2,-8544
8110d790:	18c00184 	addi	r3,r3,6
8110d794:	18c7883a 	add	r3,r3,r3
8110d798:	18c7883a 	add	r3,r3,r3
8110d79c:	10c5883a 	add	r2,r2,r3
8110d7a0:	10800017 	ldw	r2,0(r2)
8110d7a4:	1000391e 	bne	r2,zero,8110d88c <bSendUART64v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer64[ucIL].buffer, 0, 64);
8110d7a8:	e0bffb03 	ldbu	r2,-20(fp)
8110d7ac:	10c01324 	muli	r3,r2,76
8110d7b0:	00a04534 	movhi	r2,33044
8110d7b4:	10997604 	addi	r2,r2,26072
8110d7b8:	1885883a 	add	r2,r3,r2
8110d7bc:	01801004 	movi	r6,64
8110d7c0:	000b883a 	mov	r5,zero
8110d7c4:	1009883a 	mov	r4,r2
8110d7c8:	11147480 	call	81114748 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer64[ucIL].buffer, cBuffer, 63);
8110d7cc:	e0bffb03 	ldbu	r2,-20(fp)
8110d7d0:	10c01324 	muli	r3,r2,76
8110d7d4:	00a04534 	movhi	r2,33044
8110d7d8:	10997604 	addi	r2,r2,26072
8110d7dc:	1885883a 	add	r2,r3,r2
8110d7e0:	01800fc4 	movi	r6,63
8110d7e4:	e17ffe17 	ldw	r5,-8(fp)
8110d7e8:	1009883a 	mov	r4,r2
8110d7ec:	11145f80 	call	811145f8 <memcpy>
			xBuffer64[ucIL].usiId = siIdMessage;
8110d7f0:	e13ffb03 	ldbu	r4,-20(fp)
8110d7f4:	e0ffff0b 	ldhu	r3,-4(fp)
8110d7f8:	00a04534 	movhi	r2,33044
8110d7fc:	10997604 	addi	r2,r2,26072
8110d800:	21001324 	muli	r4,r4,76
8110d804:	1105883a 	add	r2,r2,r4
8110d808:	10801104 	addi	r2,r2,68
8110d80c:	10c0000d 	sth	r3,0(r2)
			xBuffer64[ucIL].ucNofRetries = 0;
8110d810:	e0fffb03 	ldbu	r3,-20(fp)
8110d814:	00a04534 	movhi	r2,33044
8110d818:	10997604 	addi	r2,r2,26072
8110d81c:	18c01324 	muli	r3,r3,76
8110d820:	10c5883a 	add	r2,r2,r3
8110d824:	10801204 	addi	r2,r2,72
8110d828:	10000005 	stb	zero,0(r2)
			xBuffer64[ucIL].usiTimeOut = 0;
8110d82c:	e0fffb03 	ldbu	r3,-20(fp)
8110d830:	00a04534 	movhi	r2,33044
8110d834:	10997604 	addi	r2,r2,26072
8110d838:	18c01324 	muli	r3,r3,76
8110d83c:	10c5883a 	add	r2,r2,r3
8110d840:	10801184 	addi	r2,r2,70
8110d844:	1000000d 	sth	zero,0(r2)
			xBuffer64[ucIL].bSent = FALSE;
8110d848:	e0fffb03 	ldbu	r3,-20(fp)
8110d84c:	00a04534 	movhi	r2,33044
8110d850:	10997604 	addi	r2,r2,26072
8110d854:	18c01324 	muli	r3,r3,76
8110d858:	10c5883a 	add	r2,r2,r3
8110d85c:	10801004 	addi	r2,r2,64
8110d860:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b64[ucIL] = TRUE;
8110d864:	e0fffb03 	ldbu	r3,-20(fp)
8110d868:	00a04574 	movhi	r2,33045
8110d86c:	10b7a804 	addi	r2,r2,-8544
8110d870:	18c00184 	addi	r3,r3,6
8110d874:	18c7883a 	add	r3,r3,r3
8110d878:	18c7883a 	add	r3,r3,r3
8110d87c:	10c5883a 	add	r2,r2,r3
8110d880:	00c00044 	movi	r3,1
8110d884:	10c00015 	stw	r3,0(r2)
			break;
8110d888:	00000606 	br	8110d8a4 <bSendUART64v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110d88c:	e0bffb03 	ldbu	r2,-20(fp)
8110d890:	10800044 	addi	r2,r2,1
8110d894:	e0bffb05 	stb	r2,-20(fp)
8110d898:	e0bffb03 	ldbu	r2,-20(fp)
8110d89c:	10800230 	cmpltui	r2,r2,8
8110d8a0:	103fb81e 	bne	r2,zero,8110d784 <__reset+0xfb0ed784>
			break;
		}
	}


	if ( ucIL >= N_64 ) {
8110d8a4:	e0bffb03 	ldbu	r2,-20(fp)
8110d8a8:	10800230 	cmpltui	r2,r2,8
8110d8ac:	1000091e 	bne	r2,zero,8110d8d4 <bSendUART64v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110d8b0:	d0a04d17 	ldw	r2,-32460(gp)
8110d8b4:	1009883a 	mov	r4,r2
8110d8b8:	1131a900 	call	81131a90 <OSSemPost>
8110d8bc:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer64);
8110d8c0:	d0a05c17 	ldw	r2,-32400(gp)
8110d8c4:	1009883a 	mov	r4,r2
8110d8c8:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110d8cc:	e0bffc17 	ldw	r2,-16(fp)
8110d8d0:	00003006 	br	8110d994 <bSendUART64v2+0x2e4>
	}

	bSuccessL = TRUE;
8110d8d4:	00800044 	movi	r2,1
8110d8d8:	e0bffc15 	stw	r2,-16(fp)
	SemCount64--; /* Sure that you get the semaphore */
8110d8dc:	d0a05f03 	ldbu	r2,-32388(gp)
8110d8e0:	10bfffc4 	addi	r2,r2,-1
8110d8e4:	d0a05f05 	stb	r2,-32388(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110d8e8:	d0a05e17 	ldw	r2,-32392(gp)
8110d8ec:	e0fffd04 	addi	r3,fp,-12
8110d8f0:	180d883a 	mov	r6,r3
8110d8f4:	01400084 	movi	r5,2
8110d8f8:	1009883a 	mov	r4,r2
8110d8fc:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110d900:	e0bffd03 	ldbu	r2,-12(fp)
8110d904:	10803fcc 	andi	r2,r2,255
8110d908:	10000c26 	beq	r2,zero,8110d93c <bSendUART64v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART64v2)\n");
8110d90c:	d0a05017 	ldw	r2,-32448(gp)
8110d910:	100f883a 	mov	r7,r2
8110d914:	01801bc4 	movi	r6,111
8110d918:	01400044 	movi	r5,1
8110d91c:	01204534 	movhi	r4,33044
8110d920:	2100c204 	addi	r4,r4,776
8110d924:	1113be40 	call	81113be4 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64 */
8110d928:	d0a05c17 	ldw	r2,-32400(gp)
8110d92c:	1009883a 	mov	r4,r2
8110d930:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110d934:	e0bffc17 	ldw	r2,-16(fp)
8110d938:	00001606 	br	8110d994 <bSendUART64v2+0x2e4>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer64[ucIL].buffer);
8110d93c:	e0bffb03 	ldbu	r2,-20(fp)
8110d940:	10c01324 	muli	r3,r2,76
8110d944:	00a04534 	movhi	r2,33044
8110d948:	10997604 	addi	r2,r2,26072
8110d94c:	1885883a 	add	r2,r3,r2
8110d950:	1009883a 	mov	r4,r2
8110d954:	1114bb40 	call	81114bb4 <puts>
	xBuffer64[ucIL].bSent = TRUE;
8110d958:	e0fffb03 	ldbu	r3,-20(fp)
8110d95c:	00a04534 	movhi	r2,33044
8110d960:	10997604 	addi	r2,r2,26072
8110d964:	18c01324 	muli	r3,r3,76
8110d968:	10c5883a 	add	r2,r2,r3
8110d96c:	10801004 	addi	r2,r2,64
8110d970:	00c00044 	movi	r3,1
8110d974:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */
	OSMutexPost(xTxUARTMutex);
8110d978:	d0a05e17 	ldw	r2,-32392(gp)
8110d97c:	1009883a 	mov	r4,r2
8110d980:	112fca00 	call	8112fca0 <OSMutexPost>
	OSMutexPost(xMutexBuffer64);
8110d984:	d0a05c17 	ldw	r2,-32400(gp)
8110d988:	1009883a 	mov	r4,r2
8110d98c:	112fca00 	call	8112fca0 <OSMutexPost>

	return bSuccessL;
8110d990:	e0bffc17 	ldw	r2,-16(fp)
}
8110d994:	e037883a 	mov	sp,fp
8110d998:	dfc00117 	ldw	ra,4(sp)
8110d99c:	df000017 	ldw	fp,0(sp)
8110d9a0:	dec00204 	addi	sp,sp,8
8110d9a4:	f800283a 	ret

8110d9a8 <bSendUART32v2>:



/* Make sure that there is only 31 characters to send */
/* Always, ALWAYS send only an char[32] that you first did a memset(cBuffer,0,32), before put some string on it. */
bool bSendUART32v2 ( char *cBuffer, short int siIdMessage ) {
8110d9a8:	defff904 	addi	sp,sp,-28
8110d9ac:	de00012e 	bgeu	sp,et,8110d9b4 <bSendUART32v2+0xc>
8110d9b0:	003b68fa 	trap	3
8110d9b4:	dfc00615 	stw	ra,24(sp)
8110d9b8:	df000515 	stw	fp,20(sp)
8110d9bc:	df000504 	addi	fp,sp,20
8110d9c0:	e13ffe15 	stw	r4,-8(fp)
8110d9c4:	2805883a 	mov	r2,r5
8110d9c8:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110d9cc:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110d9d0:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110d9d4:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110d9d8:	e03ffc15 	stw	zero,-16(fp)
	
	OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110d9dc:	d0a05b17 	ldw	r2,-32404(gp)
8110d9e0:	e0fffd04 	addi	r3,fp,-12
8110d9e4:	180d883a 	mov	r6,r3
8110d9e8:	01400504 	movi	r5,20
8110d9ec:	1009883a 	mov	r4,r2
8110d9f0:	11317080 	call	81131708 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110d9f4:	e0bffd03 	ldbu	r2,-12(fp)
8110d9f8:	10803fcc 	andi	r2,r2,255
8110d9fc:	10000326 	beq	r2,zero,8110da0c <bSendUART32v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110da00:	110fce80 	call	8110fce8 <vFailGetCountSemaphorexBuffer32>
		return bSuccessL;
8110da04:	e0bffc17 	ldw	r2,-16(fp)
8110da08:	0000a006 	br	8110dc8c <bSendUART32v2+0x2e4>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer32 */
	OSMutexPend(xMutexBuffer32, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110da0c:	d0a05817 	ldw	r2,-32416(gp)
8110da10:	e0fffd04 	addi	r3,fp,-12
8110da14:	180d883a 	mov	r6,r3
8110da18:	01400104 	movi	r5,4
8110da1c:	1009883a 	mov	r4,r2
8110da20:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110da24:	e0bffd03 	ldbu	r2,-12(fp)
8110da28:	10803fcc 	andi	r2,r2,255
8110da2c:	10001126 	beq	r2,zero,8110da74 <bSendUART32v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer32 that protect xBuffer32. (bSendUART32v2)\n");
8110da30:	d0a05017 	ldw	r2,-32448(gp)
8110da34:	100f883a 	mov	r7,r2
8110da38:	018013c4 	movi	r6,79
8110da3c:	01400044 	movi	r5,1
8110da40:	01204534 	movhi	r4,33044
8110da44:	2100de04 	addi	r4,r4,888
8110da48:	1113be40 	call	81113be4 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110da4c:	d0a05b17 	ldw	r2,-32404(gp)
8110da50:	1009883a 	mov	r4,r2
8110da54:	1131a900 	call	81131a90 <OSSemPost>
8110da58:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110da5c:	e0bffd03 	ldbu	r2,-12(fp)
8110da60:	10803fcc 	andi	r2,r2,255
8110da64:	10000126 	beq	r2,zero,8110da6c <bSendUART32v2+0xc4>
			vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110da68:	110fae00 	call	8110fae0 <vFailSetCountSemaphorexBuffer32>
		}

		return bSuccessL;
8110da6c:	e0bffc17 	ldw	r2,-16(fp)
8110da70:	00008606 	br	8110dc8c <bSendUART32v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110da74:	e03ffb05 	stb	zero,-20(fp)
8110da78:	00004506 	br	8110db90 <bSendUART32v2+0x1e8>
	{
		if ( xInUseRetrans.b32[ucIL] == FALSE ) {
8110da7c:	e0fffb03 	ldbu	r3,-20(fp)
8110da80:	00a04574 	movhi	r2,33045
8110da84:	10b7a804 	addi	r2,r2,-8544
8110da88:	18c00384 	addi	r3,r3,14
8110da8c:	18c7883a 	add	r3,r3,r3
8110da90:	18c7883a 	add	r3,r3,r3
8110da94:	10c5883a 	add	r2,r2,r3
8110da98:	10800017 	ldw	r2,0(r2)
8110da9c:	1000391e 	bne	r2,zero,8110db84 <bSendUART32v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer32[ucIL].buffer, 0, 32);
8110daa0:	e0bffb03 	ldbu	r2,-20(fp)
8110daa4:	10c00b24 	muli	r3,r2,44
8110daa8:	00a04574 	movhi	r2,33045
8110daac:	10a74c04 	addi	r2,r2,-25296
8110dab0:	1885883a 	add	r2,r3,r2
8110dab4:	01800804 	movi	r6,32
8110dab8:	000b883a 	mov	r5,zero
8110dabc:	1009883a 	mov	r4,r2
8110dac0:	11147480 	call	81114748 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer32[ucIL].buffer, cBuffer, 31);
8110dac4:	e0bffb03 	ldbu	r2,-20(fp)
8110dac8:	10c00b24 	muli	r3,r2,44
8110dacc:	00a04574 	movhi	r2,33045
8110dad0:	10a74c04 	addi	r2,r2,-25296
8110dad4:	1885883a 	add	r2,r3,r2
8110dad8:	018007c4 	movi	r6,31
8110dadc:	e17ffe17 	ldw	r5,-8(fp)
8110dae0:	1009883a 	mov	r4,r2
8110dae4:	11145f80 	call	811145f8 <memcpy>
			xBuffer32[ucIL].usiId = siIdMessage;
8110dae8:	e13ffb03 	ldbu	r4,-20(fp)
8110daec:	e0ffff0b 	ldhu	r3,-4(fp)
8110daf0:	00a04574 	movhi	r2,33045
8110daf4:	10a74c04 	addi	r2,r2,-25296
8110daf8:	21000b24 	muli	r4,r4,44
8110dafc:	1105883a 	add	r2,r2,r4
8110db00:	10800904 	addi	r2,r2,36
8110db04:	10c0000d 	sth	r3,0(r2)
			xBuffer32[ucIL].ucNofRetries = 0;
8110db08:	e0fffb03 	ldbu	r3,-20(fp)
8110db0c:	00a04574 	movhi	r2,33045
8110db10:	10a74c04 	addi	r2,r2,-25296
8110db14:	18c00b24 	muli	r3,r3,44
8110db18:	10c5883a 	add	r2,r2,r3
8110db1c:	10800a04 	addi	r2,r2,40
8110db20:	10000005 	stb	zero,0(r2)
			xBuffer32[ucIL].usiTimeOut = 0;
8110db24:	e0fffb03 	ldbu	r3,-20(fp)
8110db28:	00a04574 	movhi	r2,33045
8110db2c:	10a74c04 	addi	r2,r2,-25296
8110db30:	18c00b24 	muli	r3,r3,44
8110db34:	10c5883a 	add	r2,r2,r3
8110db38:	10800984 	addi	r2,r2,38
8110db3c:	1000000d 	sth	zero,0(r2)
			xBuffer32[ucIL].bSent = FALSE;
8110db40:	e0fffb03 	ldbu	r3,-20(fp)
8110db44:	00a04574 	movhi	r2,33045
8110db48:	10a74c04 	addi	r2,r2,-25296
8110db4c:	18c00b24 	muli	r3,r3,44
8110db50:	10c5883a 	add	r2,r2,r3
8110db54:	10800804 	addi	r2,r2,32
8110db58:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b32[ucIL] = TRUE;
8110db5c:	e0fffb03 	ldbu	r3,-20(fp)
8110db60:	00a04574 	movhi	r2,33045
8110db64:	10b7a804 	addi	r2,r2,-8544
8110db68:	18c00384 	addi	r3,r3,14
8110db6c:	18c7883a 	add	r3,r3,r3
8110db70:	18c7883a 	add	r3,r3,r3
8110db74:	10c5883a 	add	r2,r2,r3
8110db78:	00c00044 	movi	r3,1
8110db7c:	10c00015 	stw	r3,0(r2)
			break;
8110db80:	00000606 	br	8110db9c <bSendUART32v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110db84:	e0bffb03 	ldbu	r2,-20(fp)
8110db88:	10800044 	addi	r2,r2,1
8110db8c:	e0bffb05 	stb	r2,-20(fp)
8110db90:	e0bffb03 	ldbu	r2,-20(fp)
8110db94:	10800230 	cmpltui	r2,r2,8
8110db98:	103fb81e 	bne	r2,zero,8110da7c <__reset+0xfb0eda7c>
			xInUseRetrans.b32[ucIL] = TRUE;
			break;
		}
	}	

	if ( ucIL >= N_32 ) {
8110db9c:	e0bffb03 	ldbu	r2,-20(fp)
8110dba0:	10800230 	cmpltui	r2,r2,8
8110dba4:	1000091e 	bne	r2,zero,8110dbcc <bSendUART32v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110dba8:	d0a05b17 	ldw	r2,-32404(gp)
8110dbac:	1009883a 	mov	r4,r2
8110dbb0:	1131a900 	call	81131a90 <OSSemPost>
8110dbb4:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer32);
8110dbb8:	d0a05817 	ldw	r2,-32416(gp)
8110dbbc:	1009883a 	mov	r4,r2
8110dbc0:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110dbc4:	e0bffc17 	ldw	r2,-16(fp)
8110dbc8:	00003006 	br	8110dc8c <bSendUART32v2+0x2e4>
	}
	
	bSuccessL = TRUE;
8110dbcc:	00800044 	movi	r2,1
8110dbd0:	e0bffc15 	stw	r2,-16(fp)
	SemCount32--; /* Sure that you get the semaphore */
8110dbd4:	d0a05683 	ldbu	r2,-32422(gp)
8110dbd8:	10bfffc4 	addi	r2,r2,-1
8110dbdc:	d0a05685 	stb	r2,-32422(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110dbe0:	d0a05e17 	ldw	r2,-32392(gp)
8110dbe4:	e0fffd04 	addi	r3,fp,-12
8110dbe8:	180d883a 	mov	r6,r3
8110dbec:	01400084 	movi	r5,2
8110dbf0:	1009883a 	mov	r4,r2
8110dbf4:	112f6fc0 	call	8112f6fc <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110dbf8:	e0bffd03 	ldbu	r2,-12(fp)
8110dbfc:	10803fcc 	andi	r2,r2,255
8110dc00:	10000c26 	beq	r2,zero,8110dc34 <bSendUART32v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART32v2)\n");
8110dc04:	d0a05017 	ldw	r2,-32448(gp)
8110dc08:	100f883a 	mov	r7,r2
8110dc0c:	01801bc4 	movi	r6,111
8110dc10:	01400044 	movi	r5,1
8110dc14:	01204534 	movhi	r4,33044
8110dc18:	2100f204 	addi	r4,r4,968
8110dc1c:	1113be40 	call	81113be4 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32 */
8110dc20:	d0a05817 	ldw	r2,-32416(gp)
8110dc24:	1009883a 	mov	r4,r2
8110dc28:	112fca00 	call	8112fca0 <OSMutexPost>
		return bSuccessL;
8110dc2c:	e0bffc17 	ldw	r2,-16(fp)
8110dc30:	00001606 	br	8110dc8c <bSendUART32v2+0x2e4>
	}


	/* ---> At this point we have all resources to send the message */

	puts(xBuffer32[ucIL].buffer);
8110dc34:	e0bffb03 	ldbu	r2,-20(fp)
8110dc38:	10c00b24 	muli	r3,r2,44
8110dc3c:	00a04574 	movhi	r2,33045
8110dc40:	10a74c04 	addi	r2,r2,-25296
8110dc44:	1885883a 	add	r2,r3,r2
8110dc48:	1009883a 	mov	r4,r2
8110dc4c:	1114bb40 	call	81114bb4 <puts>
	xBuffer32[ucIL].bSent = TRUE;
8110dc50:	e0fffb03 	ldbu	r3,-20(fp)
8110dc54:	00a04574 	movhi	r2,33045
8110dc58:	10a74c04 	addi	r2,r2,-25296
8110dc5c:	18c00b24 	muli	r3,r3,44
8110dc60:	10c5883a 	add	r2,r2,r3
8110dc64:	10800804 	addi	r2,r2,32
8110dc68:	00c00044 	movi	r3,1
8110dc6c:	10c00015 	stw	r3,0(r2)

	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */


	OSMutexPost(xTxUARTMutex);
8110dc70:	d0a05e17 	ldw	r2,-32392(gp)
8110dc74:	1009883a 	mov	r4,r2
8110dc78:	112fca00 	call	8112fca0 <OSMutexPost>
	OSMutexPost(xMutexBuffer32);
8110dc7c:	d0a05817 	ldw	r2,-32416(gp)
8110dc80:	1009883a 	mov	r4,r2
8110dc84:	112fca00 	call	8112fca0 <OSMutexPost>

	return bSuccessL;
8110dc88:	e0bffc17 	ldw	r2,-16(fp)
}
8110dc8c:	e037883a 	mov	sp,fp
8110dc90:	dfc00117 	ldw	ra,4(sp)
8110dc94:	df000017 	ldw	fp,0(sp)
8110dc98:	dec00204 	addi	sp,sp,8
8110dc9c:	f800283a 	ret

8110dca0 <vSendEthConf>:


void vSendEthConf ( void ) {
8110dca0:	deffc304 	addi	sp,sp,-244
8110dca4:	de00012e 	bgeu	sp,et,8110dcac <vSendEthConf+0xc>
8110dca8:	003b68fa 	trap	3
8110dcac:	dfc03c15 	stw	ra,240(sp)
8110dcb0:	df003b15 	stw	fp,236(sp)
8110dcb4:	dd403a15 	stw	r21,232(sp)
8110dcb8:	dd003915 	stw	r20,228(sp)
8110dcbc:	dcc03815 	stw	r19,224(sp)
8110dcc0:	dc803715 	stw	r18,220(sp)
8110dcc4:	dc403615 	stw	r17,216(sp)
8110dcc8:	dc003515 	stw	r16,212(sp)
8110dccc:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110dcd0:	e03fd98d 	sth	zero,-154(fp)
8110dcd4:	e03fda0d 	sth	zero,-152(fp)
8110dcd8:	e0bfda84 	addi	r2,fp,-150
8110dcdc:	00c01f04 	movi	r3,124
8110dce0:	180d883a 	mov	r6,r3
8110dce4:	000b883a 	mov	r5,zero
8110dce8:	1009883a 	mov	r4,r2
8110dcec:	11147480 	call	81114748 <memset>
    unsigned char crc = 0;
8110dcf0:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110dcf4:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110dcf8:	110e1480 	call	8110e148 <usiGetIdCMD>
8110dcfc:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd00:	e57fd90b 	ldhu	r21,-156(fp)
8110dd04:	00a04574 	movhi	r2,33045
8110dd08:	108b4c04 	addi	r2,r2,11568
8110dd0c:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110dd10:	00a04574 	movhi	r2,33045
8110dd14:	108b4c04 	addi	r2,r2,11568
8110dd18:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd1c:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110dd20:	00a04574 	movhi	r2,33045
8110dd24:	108b4c04 	addi	r2,r2,11568
8110dd28:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd2c:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110dd30:	00a04574 	movhi	r2,33045
8110dd34:	108b4c04 	addi	r2,r2,11568
8110dd38:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd3c:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110dd40:	00a04574 	movhi	r2,33045
8110dd44:	108b4c04 	addi	r2,r2,11568
8110dd48:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd4c:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110dd50:	00a04574 	movhi	r2,33045
8110dd54:	108b4c04 	addi	r2,r2,11568
8110dd58:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd5c:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110dd60:	00a04574 	movhi	r2,33045
8110dd64:	108b4c04 	addi	r2,r2,11568
8110dd68:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd6c:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110dd70:	00a04574 	movhi	r2,33045
8110dd74:	108b4c04 	addi	r2,r2,11568
8110dd78:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd7c:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110dd80:	00a04574 	movhi	r2,33045
8110dd84:	108b4c04 	addi	r2,r2,11568
8110dd88:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd8c:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110dd90:	00a04574 	movhi	r2,33045
8110dd94:	108b4c04 	addi	r2,r2,11568
8110dd98:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dd9c:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110dda0:	00a04574 	movhi	r2,33045
8110dda4:	108b4c04 	addi	r2,r2,11568
8110dda8:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ddac:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ddb0:	00a04574 	movhi	r2,33045
8110ddb4:	108b4c04 	addi	r2,r2,11568
8110ddb8:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ddbc:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110ddc0:	00a04574 	movhi	r2,33045
8110ddc4:	108b4c04 	addi	r2,r2,11568
8110ddc8:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ddcc:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110ddd0:	00a04574 	movhi	r2,33045
8110ddd4:	108b4c04 	addi	r2,r2,11568
8110ddd8:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110dddc:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110dde0:	00a04574 	movhi	r2,33045
8110dde4:	108b4c04 	addi	r2,r2,11568
8110dde8:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ddec:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110ddf0:	00a04574 	movhi	r2,33045
8110ddf4:	108b4c04 	addi	r2,r2,11568
8110ddf8:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ddfc:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110de00:	00a04574 	movhi	r2,33045
8110de04:	108b4c04 	addi	r2,r2,11568
8110de08:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110de0c:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110de10:	00a04574 	movhi	r2,33045
8110de14:	108b4c04 	addi	r2,r2,11568
8110de18:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110de1c:	10bfffcc 	andi	r2,r2,65535
8110de20:	e53fd984 	addi	r20,fp,-154
8110de24:	d8801115 	stw	r2,68(sp)
8110de28:	dcc01015 	stw	r19,64(sp)
8110de2c:	dc800f15 	stw	r18,60(sp)
8110de30:	dc400e15 	stw	r17,56(sp)
8110de34:	dc000d15 	stw	r16,52(sp)
8110de38:	dbc00c15 	stw	r15,48(sp)
8110de3c:	db800b15 	stw	r14,44(sp)
8110de40:	db400a15 	stw	r13,40(sp)
8110de44:	db000915 	stw	r12,36(sp)
8110de48:	dac00815 	stw	r11,32(sp)
8110de4c:	da800715 	stw	r10,28(sp)
8110de50:	da400615 	stw	r9,24(sp)
8110de54:	da000515 	stw	r8,20(sp)
8110de58:	d9c00415 	stw	r7,16(sp)
8110de5c:	d9800315 	stw	r6,12(sp)
8110de60:	d9400215 	stw	r5,8(sp)
8110de64:	d9000115 	stw	r4,4(sp)
8110de68:	d8c00015 	stw	r3,0(sp)
8110de6c:	a80f883a 	mov	r7,r21
8110de70:	018010c4 	movi	r6,67
8110de74:	01604534 	movhi	r5,33044
8110de78:	29410e04 	addi	r5,r5,1080
8110de7c:	a009883a 	mov	r4,r20
8110de80:	1114ef80 	call	81114ef8 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110de84:	e0bfd984 	addi	r2,fp,-154
8110de88:	1009883a 	mov	r4,r2
8110de8c:	111510c0 	call	8111510c <strlen>
8110de90:	1007883a 	mov	r3,r2
8110de94:	e0bfd984 	addi	r2,fp,-154
8110de98:	180b883a 	mov	r5,r3
8110de9c:	1009883a 	mov	r4,r2
8110dea0:	110f3700 	call	8110f370 <ucCrc8wInit>
8110dea4:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110dea8:	e13fd703 	ldbu	r4,-164(fp)
8110deac:	e0ffd984 	addi	r3,fp,-154
8110deb0:	e0bfd984 	addi	r2,fp,-154
8110deb4:	200f883a 	mov	r7,r4
8110deb8:	180d883a 	mov	r6,r3
8110debc:	01604534 	movhi	r5,33044
8110dec0:	29412604 	addi	r5,r5,1176
8110dec4:	1009883a 	mov	r4,r2
8110dec8:	1114ef80 	call	81114ef8 <sprintf>

	bSuccees = bSendUART128v2(cBufferETH, usiIdCMDLocal);
8110decc:	e0bfd90b 	ldhu	r2,-156(fp)
8110ded0:	10ffffcc 	andi	r3,r2,65535
8110ded4:	18e0001c 	xori	r3,r3,32768
8110ded8:	18e00004 	addi	r3,r3,-32768
8110dedc:	e0bfd984 	addi	r2,fp,-154
8110dee0:	180b883a 	mov	r5,r3
8110dee4:	1009883a 	mov	r4,r2
8110dee8:	110d3c00 	call	8110d3c0 <bSendUART128v2>
8110deec:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110def0:	e0bfd817 	ldw	r2,-160(fp)
8110def4:	10800060 	cmpeqi	r2,r2,1
8110def8:	1000011e 	bne	r2,zero,8110df00 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110defc:	110fef00 	call	8110fef0 <vCouldNotSendEthConfUART>
	}
}
8110df00:	0001883a 	nop
8110df04:	e6fffa04 	addi	sp,fp,-24
8110df08:	dfc00717 	ldw	ra,28(sp)
8110df0c:	df000617 	ldw	fp,24(sp)
8110df10:	dd400517 	ldw	r21,20(sp)
8110df14:	dd000417 	ldw	r20,16(sp)
8110df18:	dcc00317 	ldw	r19,12(sp)
8110df1c:	dc800217 	ldw	r18,8(sp)
8110df20:	dc400117 	ldw	r17,4(sp)
8110df24:	dc000017 	ldw	r16,0(sp)
8110df28:	dec00804 	addi	sp,sp,32
8110df2c:	f800283a 	ret

8110df30 <vSendTurnOff>:


void vSendTurnOff ( void ) {
8110df30:	defff304 	addi	sp,sp,-52
8110df34:	de00012e 	bgeu	sp,et,8110df3c <vSendTurnOff+0xc>
8110df38:	003b68fa 	trap	3
8110df3c:	dfc00c15 	stw	ra,48(sp)
8110df40:	df000b15 	stw	fp,44(sp)
8110df44:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110df48:	e03ff78d 	sth	zero,-34(fp)
8110df4c:	e03ff80d 	sth	zero,-32(fp)
8110df50:	e03ff88d 	sth	zero,-30(fp)
8110df54:	e03ff90d 	sth	zero,-28(fp)
8110df58:	e03ff98d 	sth	zero,-26(fp)
8110df5c:	e03ffa0d 	sth	zero,-24(fp)
8110df60:	e03ffa8d 	sth	zero,-22(fp)
8110df64:	e03ffb0d 	sth	zero,-20(fp)
8110df68:	e03ffb8d 	sth	zero,-18(fp)
8110df6c:	e03ffc0d 	sth	zero,-16(fp)
8110df70:	e03ffc8d 	sth	zero,-14(fp)
8110df74:	e03ffd0d 	sth	zero,-12(fp)
8110df78:	e03ffd8d 	sth	zero,-10(fp)
8110df7c:	e03ffe0d 	sth	zero,-8(fp)
8110df80:	e03ffe8d 	sth	zero,-6(fp)
8110df84:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110df88:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110df8c:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110df90:	110e1480 	call	8110e148 <usiGetIdCMD>
8110df94:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110df98:	e0fff70b 	ldhu	r3,-36(fp)
8110df9c:	e0bff784 	addi	r2,fp,-34
8110dfa0:	180d883a 	mov	r6,r3
8110dfa4:	01604534 	movhi	r5,33044
8110dfa8:	29412904 	addi	r5,r5,1188
8110dfac:	1009883a 	mov	r4,r2
8110dfb0:	1114ef80 	call	81114ef8 <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110dfb4:	e0bff784 	addi	r2,fp,-34
8110dfb8:	1009883a 	mov	r4,r2
8110dfbc:	111510c0 	call	8111510c <strlen>
8110dfc0:	1007883a 	mov	r3,r2
8110dfc4:	e0bff784 	addi	r2,fp,-34
8110dfc8:	180b883a 	mov	r5,r3
8110dfcc:	1009883a 	mov	r4,r2
8110dfd0:	110f3700 	call	8110f370 <ucCrc8wInit>
8110dfd4:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110dfd8:	e13ff503 	ldbu	r4,-44(fp)
8110dfdc:	e0fff784 	addi	r3,fp,-34
8110dfe0:	e0bff784 	addi	r2,fp,-34
8110dfe4:	200f883a 	mov	r7,r4
8110dfe8:	180d883a 	mov	r6,r3
8110dfec:	01604534 	movhi	r5,33044
8110dff0:	29412604 	addi	r5,r5,1176
8110dff4:	1009883a 	mov	r4,r2
8110dff8:	1114ef80 	call	81114ef8 <sprintf>

	bSuccees = bSendUART32v2(cBufferTurnOff, usiIdCMDLocal);
8110dffc:	e0bff70b 	ldhu	r2,-36(fp)
8110e000:	10ffffcc 	andi	r3,r2,65535
8110e004:	18e0001c 	xori	r3,r3,32768
8110e008:	18e00004 	addi	r3,r3,-32768
8110e00c:	e0bff784 	addi	r2,fp,-34
8110e010:	180b883a 	mov	r5,r3
8110e014:	1009883a 	mov	r4,r2
8110e018:	110d9a80 	call	8110d9a8 <bSendUART32v2>
8110e01c:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110e020:	e0bff617 	ldw	r2,-40(fp)
8110e024:	10800060 	cmpeqi	r2,r2,1
8110e028:	1000011e 	bne	r2,zero,8110e030 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110e02c:	11105980 	call	81110598 <vCouldNotSendTurnOff>
	}
}
8110e030:	0001883a 	nop
8110e034:	e037883a 	mov	sp,fp
8110e038:	dfc00117 	ldw	ra,4(sp)
8110e03c:	df000017 	ldw	fp,0(sp)
8110e040:	dec00204 	addi	sp,sp,8
8110e044:	f800283a 	ret

8110e048 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110e048:	deffda04 	addi	sp,sp,-152
8110e04c:	de00012e 	bgeu	sp,et,8110e054 <vSendLog+0xc>
8110e050:	003b68fa 	trap	3
8110e054:	dfc02515 	stw	ra,148(sp)
8110e058:	df002415 	stw	fp,144(sp)
8110e05c:	df002404 	addi	fp,sp,144
8110e060:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110e064:	e03fde8d 	sth	zero,-134(fp)
8110e068:	e03fdf0d 	sth	zero,-132(fp)
8110e06c:	e0bfdf84 	addi	r2,fp,-130
8110e070:	00c01f04 	movi	r3,124
8110e074:	180d883a 	mov	r6,r3
8110e078:	000b883a 	mov	r5,zero
8110e07c:	1009883a 	mov	r4,r2
8110e080:	11147480 	call	81114748 <memset>
    unsigned char crc = 0;
8110e084:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e088:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e08c:	110e1480 	call	8110e148 <usiGetIdCMD>
8110e090:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110e094:	e0ffde0b 	ldhu	r3,-136(fp)
8110e098:	e0bfde84 	addi	r2,fp,-134
8110e09c:	e1ffff17 	ldw	r7,-4(fp)
8110e0a0:	180d883a 	mov	r6,r3
8110e0a4:	01604534 	movhi	r5,33044
8110e0a8:	29412b04 	addi	r5,r5,1196
8110e0ac:	1009883a 	mov	r4,r2
8110e0b0:	1114ef80 	call	81114ef8 <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110e0b4:	e0bfde84 	addi	r2,fp,-134
8110e0b8:	1009883a 	mov	r4,r2
8110e0bc:	111510c0 	call	8111510c <strlen>
8110e0c0:	1007883a 	mov	r3,r2
8110e0c4:	e0bfde84 	addi	r2,fp,-134
8110e0c8:	180b883a 	mov	r5,r3
8110e0cc:	1009883a 	mov	r4,r2
8110e0d0:	110f3700 	call	8110f370 <ucCrc8wInit>
8110e0d4:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110e0d8:	e13fdc03 	ldbu	r4,-144(fp)
8110e0dc:	e0ffde84 	addi	r3,fp,-134
8110e0e0:	e0bfde84 	addi	r2,fp,-134
8110e0e4:	200f883a 	mov	r7,r4
8110e0e8:	180d883a 	mov	r6,r3
8110e0ec:	01604534 	movhi	r5,33044
8110e0f0:	29412604 	addi	r5,r5,1176
8110e0f4:	1009883a 	mov	r4,r2
8110e0f8:	1114ef80 	call	81114ef8 <sprintf>

	bSuccees = bSendUART128v2(cBufferLog, usiIdCMDLocal);
8110e0fc:	e0bfde0b 	ldhu	r2,-136(fp)
8110e100:	10ffffcc 	andi	r3,r2,65535
8110e104:	18e0001c 	xori	r3,r3,32768
8110e108:	18e00004 	addi	r3,r3,-32768
8110e10c:	e0bfde84 	addi	r2,fp,-134
8110e110:	180b883a 	mov	r5,r3
8110e114:	1009883a 	mov	r4,r2
8110e118:	110d3c00 	call	8110d3c0 <bSendUART128v2>
8110e11c:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110e120:	e0bfdd17 	ldw	r2,-140(fp)
8110e124:	10800060 	cmpeqi	r2,r2,1
8110e128:	1000011e 	bne	r2,zero,8110e130 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110e12c:	11106000 	call	81110600 <vCouldNotSendLog>
	}
}
8110e130:	0001883a 	nop
8110e134:	e037883a 	mov	sp,fp
8110e138:	dfc00117 	ldw	ra,4(sp)
8110e13c:	df000017 	ldw	fp,0(sp)
8110e140:	dec00204 	addi	sp,sp,8
8110e144:	f800283a 	ret

8110e148 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110e148:	deffff04 	addi	sp,sp,-4
8110e14c:	de00012e 	bgeu	sp,et,8110e154 <usiGetIdCMD+0xc>
8110e150:	003b68fa 	trap	3
8110e154:	df000015 	stw	fp,0(sp)
8110e158:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110e15c:	d0a0560b 	ldhu	r2,-32424(gp)
8110e160:	10ffffcc 	andi	r3,r2,65535
8110e164:	00bfffd4 	movui	r2,65535
8110e168:	1880031e 	bne	r3,r2,8110e178 <usiGetIdCMD+0x30>
        usiIdCMD = 2;
8110e16c:	00800084 	movi	r2,2
8110e170:	d0a0560d 	sth	r2,-32424(gp)
8110e174:	00000306 	br	8110e184 <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110e178:	d0a0560b 	ldhu	r2,-32424(gp)
8110e17c:	10800044 	addi	r2,r2,1
8110e180:	d0a0560d 	sth	r2,-32424(gp)

    return usiIdCMD;
8110e184:	d0a0560b 	ldhu	r2,-32424(gp)
}
8110e188:	e037883a 	mov	sp,fp
8110e18c:	df000017 	ldw	fp,0(sp)
8110e190:	dec00104 	addi	sp,sp,4
8110e194:	f800283a 	ret

8110e198 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110e198:	defffb04 	addi	sp,sp,-20
8110e19c:	de00012e 	bgeu	sp,et,8110e1a4 <siPosStr+0xc>
8110e1a0:	003b68fa 	trap	3
8110e1a4:	dfc00415 	stw	ra,16(sp)
8110e1a8:	df000315 	stw	fp,12(sp)
8110e1ac:	df000304 	addi	fp,sp,12
8110e1b0:	e13ffe15 	stw	r4,-8(fp)
8110e1b4:	2805883a 	mov	r2,r5
8110e1b8:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110e1bc:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110e1c0:	e0bfff03 	ldbu	r2,-4(fp)
8110e1c4:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110e1c8:	e17ffd04 	addi	r5,fp,-12
8110e1cc:	e13ffe17 	ldw	r4,-8(fp)
8110e1d0:	11150c00 	call	811150c0 <strcspn>
}
8110e1d4:	e037883a 	mov	sp,fp
8110e1d8:	dfc00117 	ldw	ra,4(sp)
8110e1dc:	df000017 	ldw	fp,0(sp)
8110e1e0:	dec00204 	addi	sp,sp,8
8110e1e4:	f800283a 	ret

8110e1e8 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110e1e8:	defffc04 	addi	sp,sp,-16
8110e1ec:	de00012e 	bgeu	sp,et,8110e1f4 <vTimeoutCheck+0xc>
8110e1f0:	003b68fa 	trap	3
8110e1f4:	dfc00315 	stw	ra,12(sp)
8110e1f8:	df000215 	stw	fp,8(sp)
8110e1fc:	df000204 	addi	fp,sp,8
8110e200:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110e204:	d0a05517 	ldw	r2,-32428(gp)
8110e208:	1009883a 	mov	r4,r2
8110e20c:	1131a900 	call	81131a90 <OSSemPost>
8110e210:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110e214:	e0bffe03 	ldbu	r2,-8(fp)
8110e218:	10000126 	beq	r2,zero,8110e220 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110e21c:	11103280 	call	81110328 <vFailPostBlockingSemTimeoutTask>
	}
}
8110e220:	0001883a 	nop
8110e224:	e037883a 	mov	sp,fp
8110e228:	dfc00117 	ldw	ra,4(sp)
8110e22c:	df000017 	ldw	fp,0(sp)
8110e230:	dec00204 	addi	sp,sp,8
8110e234:	f800283a 	ret

8110e238 <vSendPusTM64>:


/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110e238:	deffe304 	addi	sp,sp,-116
8110e23c:	de00012e 	bgeu	sp,et,8110e244 <vSendPusTM64+0xc>
8110e240:	003b68fa 	trap	3
8110e244:	dfc01815 	stw	ra,96(sp)
8110e248:	df001715 	stw	fp,92(sp)
8110e24c:	df001704 	addi	fp,sp,92
8110e250:	e1000215 	stw	r4,8(fp)
8110e254:	e1400315 	stw	r5,12(fp)
8110e258:	e1800415 	stw	r6,16(fp)
8110e25c:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110e260:	e03fef8d 	sth	zero,-66(fp)
8110e264:	e03ff00d 	sth	zero,-64(fp)
8110e268:	e0bff084 	addi	r2,fp,-62
8110e26c:	00c00f04 	movi	r3,60
8110e270:	180d883a 	mov	r6,r3
8110e274:	000b883a 	mov	r5,zero
8110e278:	1009883a 	mov	r4,r2
8110e27c:	11147480 	call	81114748 <memset>
    unsigned char crc = 0;
8110e280:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110e284:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e288:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e28c:	110e1480 	call	8110e148 <usiGetIdCMD>
8110e290:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110e294:	e1bfef0b 	ldhu	r6,-68(fp)
8110e298:	e080030b 	ldhu	r2,12(fp)
8110e29c:	11ffffcc 	andi	r7,r2,65535
8110e2a0:	e080038b 	ldhu	r2,14(fp)
8110e2a4:	10bfffcc 	andi	r2,r2,65535
8110e2a8:	e0c0040b 	ldhu	r3,16(fp)
8110e2ac:	18ffffcc 	andi	r3,r3,65535
8110e2b0:	e100048b 	ldhu	r4,18(fp)
8110e2b4:	213fffcc 	andi	r4,r4,65535
8110e2b8:	e140050b 	ldhu	r5,20(fp)
8110e2bc:	297fffcc 	andi	r5,r5,65535
8110e2c0:	e23fef84 	addi	r8,fp,-66
8110e2c4:	d9400315 	stw	r5,12(sp)
8110e2c8:	d9000215 	stw	r4,8(sp)
8110e2cc:	d8c00115 	stw	r3,4(sp)
8110e2d0:	d8800015 	stw	r2,0(sp)
8110e2d4:	01604534 	movhi	r5,33044
8110e2d8:	29412e04 	addi	r5,r5,1208
8110e2dc:	4009883a 	mov	r4,r8
8110e2e0:	1114ef80 	call	81114ef8 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e2e4:	e03fed05 	stb	zero,-76(fp)
8110e2e8:	00001206 	br	8110e334 <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110e2ec:	e0bfed03 	ldbu	r2,-76(fp)
8110e2f0:	10800204 	addi	r2,r2,8
8110e2f4:	1085883a 	add	r2,r2,r2
8110e2f8:	e0c00204 	addi	r3,fp,8
8110e2fc:	1885883a 	add	r2,r3,r2
8110e300:	1080000b 	ldhu	r2,0(r2)
8110e304:	113fffcc 	andi	r4,r2,65535
8110e308:	e0ffef84 	addi	r3,fp,-66
8110e30c:	e0bfef84 	addi	r2,fp,-66
8110e310:	200f883a 	mov	r7,r4
8110e314:	180d883a 	mov	r6,r3
8110e318:	01604534 	movhi	r5,33044
8110e31c:	29413504 	addi	r5,r5,1236
8110e320:	1009883a 	mov	r4,r2
8110e324:	1114ef80 	call	81114ef8 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e328:	e0bfed03 	ldbu	r2,-76(fp)
8110e32c:	10800044 	addi	r2,r2,1
8110e330:	e0bfed05 	stb	r2,-76(fp)
8110e334:	e0800583 	ldbu	r2,22(fp)
8110e338:	10803fcc 	andi	r2,r2,255
8110e33c:	e0ffed03 	ldbu	r3,-76(fp)
8110e340:	18bfea36 	bltu	r3,r2,8110e2ec <__reset+0xfb0ee2ec>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110e344:	e0bfef84 	addi	r2,fp,-66
8110e348:	1009883a 	mov	r4,r2
8110e34c:	111510c0 	call	8111510c <strlen>
8110e350:	1007883a 	mov	r3,r2
8110e354:	e0bfef84 	addi	r2,fp,-66
8110e358:	180b883a 	mov	r5,r3
8110e35c:	1009883a 	mov	r4,r2
8110e360:	110f3700 	call	8110f370 <ucCrc8wInit>
8110e364:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110e368:	e13fed43 	ldbu	r4,-75(fp)
8110e36c:	e0ffef84 	addi	r3,fp,-66
8110e370:	e0bfef84 	addi	r2,fp,-66
8110e374:	200f883a 	mov	r7,r4
8110e378:	180d883a 	mov	r6,r3
8110e37c:	01604534 	movhi	r5,33044
8110e380:	29412604 	addi	r5,r5,1176
8110e384:	1009883a 	mov	r4,r2
8110e388:	1114ef80 	call	81114ef8 <sprintf>

	bSuccees = bSendUART64v2(cBufferPus, usiIdCMDLocal);
8110e38c:	e0bfef0b 	ldhu	r2,-68(fp)
8110e390:	10ffffcc 	andi	r3,r2,65535
8110e394:	18e0001c 	xori	r3,r3,32768
8110e398:	18e00004 	addi	r3,r3,-32768
8110e39c:	e0bfef84 	addi	r2,fp,-66
8110e3a0:	180b883a 	mov	r5,r3
8110e3a4:	1009883a 	mov	r4,r2
8110e3a8:	110d6b00 	call	8110d6b0 <bSendUART64v2>
8110e3ac:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110e3b0:	e0bfee17 	ldw	r2,-72(fp)
8110e3b4:	10800060 	cmpeqi	r2,r2,1
8110e3b8:	1000031e 	bne	r2,zero,8110e3c8 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110e3bc:	e0bfef84 	addi	r2,fp,-66
8110e3c0:	1009883a 	mov	r4,r2
8110e3c4:	11106680 	call	81110668 <vCouldNotSendTMPusCommand>
	}
}
8110e3c8:	0001883a 	nop
8110e3cc:	e037883a 	mov	sp,fp
8110e3d0:	dfc00117 	ldw	ra,4(sp)
8110e3d4:	df000017 	ldw	fp,0(sp)
8110e3d8:	dec00604 	addi	sp,sp,24
8110e3dc:	f800283a 	ret

8110e3e0 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110e3e0:	deffd304 	addi	sp,sp,-180
8110e3e4:	de00012e 	bgeu	sp,et,8110e3ec <vSendPusTM128+0xc>
8110e3e8:	003b68fa 	trap	3
8110e3ec:	dfc02815 	stw	ra,160(sp)
8110e3f0:	df002715 	stw	fp,156(sp)
8110e3f4:	df002704 	addi	fp,sp,156
8110e3f8:	e1000215 	stw	r4,8(fp)
8110e3fc:	e1400315 	stw	r5,12(fp)
8110e400:	e1800415 	stw	r6,16(fp)
8110e404:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110e408:	e03fdf8d 	sth	zero,-130(fp)
8110e40c:	e03fe00d 	sth	zero,-128(fp)
8110e410:	e0bfe084 	addi	r2,fp,-126
8110e414:	00c01f04 	movi	r3,124
8110e418:	180d883a 	mov	r6,r3
8110e41c:	000b883a 	mov	r5,zero
8110e420:	1009883a 	mov	r4,r2
8110e424:	11147480 	call	81114748 <memset>
    unsigned char crc = 0;
8110e428:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110e42c:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e430:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e434:	110e1480 	call	8110e148 <usiGetIdCMD>
8110e438:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110e43c:	e1bfdf0b 	ldhu	r6,-132(fp)
8110e440:	e080030b 	ldhu	r2,12(fp)
8110e444:	11ffffcc 	andi	r7,r2,65535
8110e448:	e080038b 	ldhu	r2,14(fp)
8110e44c:	10bfffcc 	andi	r2,r2,65535
8110e450:	e0c0040b 	ldhu	r3,16(fp)
8110e454:	18ffffcc 	andi	r3,r3,65535
8110e458:	e100048b 	ldhu	r4,18(fp)
8110e45c:	213fffcc 	andi	r4,r4,65535
8110e460:	e140050b 	ldhu	r5,20(fp)
8110e464:	297fffcc 	andi	r5,r5,65535
8110e468:	e23fdf84 	addi	r8,fp,-130
8110e46c:	d9400315 	stw	r5,12(sp)
8110e470:	d9000215 	stw	r4,8(sp)
8110e474:	d8c00115 	stw	r3,4(sp)
8110e478:	d8800015 	stw	r2,0(sp)
8110e47c:	01604534 	movhi	r5,33044
8110e480:	29412e04 	addi	r5,r5,1208
8110e484:	4009883a 	mov	r4,r8
8110e488:	1114ef80 	call	81114ef8 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e48c:	e03fdd05 	stb	zero,-140(fp)
8110e490:	00001206 	br	8110e4dc <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110e494:	e0bfdd03 	ldbu	r2,-140(fp)
8110e498:	10800204 	addi	r2,r2,8
8110e49c:	1085883a 	add	r2,r2,r2
8110e4a0:	e0c00204 	addi	r3,fp,8
8110e4a4:	1885883a 	add	r2,r3,r2
8110e4a8:	1080000b 	ldhu	r2,0(r2)
8110e4ac:	113fffcc 	andi	r4,r2,65535
8110e4b0:	e0ffdf84 	addi	r3,fp,-130
8110e4b4:	e0bfdf84 	addi	r2,fp,-130
8110e4b8:	200f883a 	mov	r7,r4
8110e4bc:	180d883a 	mov	r6,r3
8110e4c0:	01604534 	movhi	r5,33044
8110e4c4:	29413504 	addi	r5,r5,1236
8110e4c8:	1009883a 	mov	r4,r2
8110e4cc:	1114ef80 	call	81114ef8 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e4d0:	e0bfdd03 	ldbu	r2,-140(fp)
8110e4d4:	10800044 	addi	r2,r2,1
8110e4d8:	e0bfdd05 	stb	r2,-140(fp)
8110e4dc:	e0800583 	ldbu	r2,22(fp)
8110e4e0:	10803fcc 	andi	r2,r2,255
8110e4e4:	e0ffdd03 	ldbu	r3,-140(fp)
8110e4e8:	18bfea36 	bltu	r3,r2,8110e494 <__reset+0xfb0ee494>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110e4ec:	e0bfdf84 	addi	r2,fp,-130
8110e4f0:	1009883a 	mov	r4,r2
8110e4f4:	111510c0 	call	8111510c <strlen>
8110e4f8:	1007883a 	mov	r3,r2
8110e4fc:	e0bfdf84 	addi	r2,fp,-130
8110e500:	180b883a 	mov	r5,r3
8110e504:	1009883a 	mov	r4,r2
8110e508:	110f3700 	call	8110f370 <ucCrc8wInit>
8110e50c:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110e510:	e13fdd43 	ldbu	r4,-139(fp)
8110e514:	e0ffdf84 	addi	r3,fp,-130
8110e518:	e0bfdf84 	addi	r2,fp,-130
8110e51c:	200f883a 	mov	r7,r4
8110e520:	180d883a 	mov	r6,r3
8110e524:	01604534 	movhi	r5,33044
8110e528:	29412604 	addi	r5,r5,1176
8110e52c:	1009883a 	mov	r4,r2
8110e530:	1114ef80 	call	81114ef8 <sprintf>

	bSuccees = bSendUART128v2(cBufferPus, usiIdCMDLocal);
8110e534:	e0bfdf0b 	ldhu	r2,-132(fp)
8110e538:	10ffffcc 	andi	r3,r2,65535
8110e53c:	18e0001c 	xori	r3,r3,32768
8110e540:	18e00004 	addi	r3,r3,-32768
8110e544:	e0bfdf84 	addi	r2,fp,-130
8110e548:	180b883a 	mov	r5,r3
8110e54c:	1009883a 	mov	r4,r2
8110e550:	110d3c00 	call	8110d3c0 <bSendUART128v2>
8110e554:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110e558:	e0bfde17 	ldw	r2,-136(fp)
8110e55c:	10800060 	cmpeqi	r2,r2,1
8110e560:	1000031e 	bne	r2,zero,8110e570 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110e564:	e0bfdf84 	addi	r2,fp,-130
8110e568:	1009883a 	mov	r4,r2
8110e56c:	11106680 	call	81110668 <vCouldNotSendTMPusCommand>
	}
}
8110e570:	0001883a 	nop
8110e574:	e037883a 	mov	sp,fp
8110e578:	dfc00117 	ldw	ra,4(sp)
8110e57c:	df000017 	ldw	fp,0(sp)
8110e580:	dec00604 	addi	sp,sp,24
8110e584:	f800283a 	ret

8110e588 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				112			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110e588:	deffd904 	addi	sp,sp,-156
8110e58c:	de00012e 	bgeu	sp,et,8110e594 <vTMPusTestConnection+0xc>
8110e590:	003b68fa 	trap	3
8110e594:	dfc02615 	stw	ra,152(sp)
8110e598:	df002515 	stw	fp,148(sp)
8110e59c:	df002504 	addi	fp,sp,148
8110e5a0:	2005883a 	mov	r2,r4
8110e5a4:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110e5a8:	e0bfff0b 	ldhu	r2,-4(fp)
8110e5ac:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 112;
8110e5b0:	00801c04 	movi	r2,112
8110e5b4:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110e5b8:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110e5bc:	00800444 	movi	r2,17
8110e5c0:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110e5c4:	00800084 	movi	r2,2
8110e5c8:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110e5cc:	d809883a 	mov	r4,sp
8110e5d0:	e0bfef04 	addi	r2,fp,-68
8110e5d4:	00c01004 	movi	r3,64
8110e5d8:	180d883a 	mov	r6,r3
8110e5dc:	100b883a 	mov	r5,r2
8110e5e0:	11145f80 	call	811145f8 <memcpy>
8110e5e4:	e13feb17 	ldw	r4,-84(fp)
8110e5e8:	e17fec17 	ldw	r5,-80(fp)
8110e5ec:	e1bfed17 	ldw	r6,-76(fp)
8110e5f0:	e1ffee17 	ldw	r7,-72(fp)
8110e5f4:	110e2380 	call	8110e238 <vSendPusTM64>
}
8110e5f8:	0001883a 	nop
8110e5fc:	e037883a 	mov	sp,fp
8110e600:	dfc00117 	ldw	ra,4(sp)
8110e604:	df000017 	ldw	fp,0(sp)
8110e608:	dec00204 	addi	sp,sp,8
8110e60c:	f800283a 	ret

8110e610 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110e610:	defff504 	addi	sp,sp,-44
8110e614:	de00012e 	bgeu	sp,et,8110e61c <vLoadDefaultETHConf+0xc>
8110e618:	003b68fa 	trap	3
8110e61c:	dfc00a15 	stw	ra,40(sp)
8110e620:	df000915 	stw	fp,36(sp)
8110e624:	dc000815 	stw	r16,32(sp)
8110e628:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110e62c:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110e630:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110e634:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110e638:	d0a06017 	ldw	r2,-32384(gp)
8110e63c:	10800058 	cmpnei	r2,r2,1
8110e640:	1001f61e 	bne	r2,zero,8110ee1c <vLoadDefaultETHConf+0x80c>
8110e644:	11118a00 	call	811118a0 <bSDcardIsPresent>
8110e648:	1001f426 	beq	r2,zero,8110ee1c <vLoadDefaultETHConf+0x80c>
8110e64c:	11118d00 	call	811118d0 <bSDcardFAT16Check>
8110e650:	1001f226 	beq	r2,zero,8110ee1c <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110e654:	01204534 	movhi	r4,33044
8110e658:	21013704 	addi	r4,r4,1244
8110e65c:	11119f80 	call	811119f8 <siOpenFile>
8110e660:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110e664:	e0bffc0f 	ldh	r2,-16(fp)
8110e668:	1001e816 	blt	r2,zero,8110ee0c <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110e66c:	e0bffd04 	addi	r2,fp,-12
8110e670:	01800204 	movi	r6,8
8110e674:	01400284 	movi	r5,10
8110e678:	1009883a 	mov	r4,r2
8110e67c:	11147480 	call	81114748 <memset>
			p_inteiro = inteiro;
8110e680:	e0bffd04 	addi	r2,fp,-12
8110e684:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110e688:	e0bffc0f 	ldh	r2,-16(fp)
8110e68c:	1009883a 	mov	r4,r2
8110e690:	1111a740 	call	81111a74 <cGetNextChar>
8110e694:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110e698:	e0bff947 	ldb	r2,-27(fp)
8110e69c:	10800084 	addi	r2,r2,2
8110e6a0:	10c015a8 	cmpgeui	r3,r2,86
8110e6a4:	1801cf1e 	bne	r3,zero,8110ede4 <vLoadDefaultETHConf+0x7d4>
8110e6a8:	100690ba 	slli	r3,r2,2
8110e6ac:	00a04474 	movhi	r2,33041
8110e6b0:	10b9b004 	addi	r2,r2,-6464
8110e6b4:	1885883a 	add	r2,r3,r2
8110e6b8:	10800017 	ldw	r2,0(r2)
8110e6bc:	1000683a 	jmp	r2
8110e6c0:	8110e858 	cmpnei	r4,r16,17313
8110e6c4:	8110e84c 	andi	r4,r16,17313
8110e6c8:	8110ede4 	muli	r4,r16,17335
8110e6cc:	8110ede4 	muli	r4,r16,17335
8110e6d0:	8110ede4 	muli	r4,r16,17335
8110e6d4:	8110ede4 	muli	r4,r16,17335
8110e6d8:	8110ede4 	muli	r4,r16,17335
8110e6dc:	8110ede4 	muli	r4,r16,17335
8110e6e0:	8110ede4 	muli	r4,r16,17335
8110e6e4:	8110ede4 	muli	r4,r16,17335
8110e6e8:	8110ede4 	muli	r4,r16,17335
8110e6ec:	8110ede4 	muli	r4,r16,17335
8110e6f0:	8110edfc 	xorhi	r4,r16,17335
8110e6f4:	8110ede4 	muli	r4,r16,17335
8110e6f8:	8110ede4 	muli	r4,r16,17335
8110e6fc:	8110edfc 	xorhi	r4,r16,17335
8110e700:	8110ede4 	muli	r4,r16,17335
8110e704:	8110ede4 	muli	r4,r16,17335
8110e708:	8110ede4 	muli	r4,r16,17335
8110e70c:	8110ede4 	muli	r4,r16,17335
8110e710:	8110ede4 	muli	r4,r16,17335
8110e714:	8110ede4 	muli	r4,r16,17335
8110e718:	8110ede4 	muli	r4,r16,17335
8110e71c:	8110ede4 	muli	r4,r16,17335
8110e720:	8110ede4 	muli	r4,r16,17335
8110e724:	8110ede4 	muli	r4,r16,17335
8110e728:	8110ede4 	muli	r4,r16,17335
8110e72c:	8110ede4 	muli	r4,r16,17335
8110e730:	8110ede4 	muli	r4,r16,17335
8110e734:	8110ede4 	muli	r4,r16,17335
8110e738:	8110ede4 	muli	r4,r16,17335
8110e73c:	8110ede4 	muli	r4,r16,17335
8110e740:	8110ede4 	muli	r4,r16,17335
8110e744:	8110ede4 	muli	r4,r16,17335
8110e748:	8110edfc 	xorhi	r4,r16,17335
8110e74c:	8110ede4 	muli	r4,r16,17335
8110e750:	8110ede4 	muli	r4,r16,17335
8110e754:	8110ede4 	muli	r4,r16,17335
8110e758:	8110ede4 	muli	r4,r16,17335
8110e75c:	8110ede4 	muli	r4,r16,17335
8110e760:	8110ede4 	muli	r4,r16,17335
8110e764:	8110e818 	cmpnei	r4,r16,17312
8110e768:	8110ede4 	muli	r4,r16,17335
8110e76c:	8110ede4 	muli	r4,r16,17335
8110e770:	8110ede4 	muli	r4,r16,17335
8110e774:	8110ede4 	muli	r4,r16,17335
8110e778:	8110ede4 	muli	r4,r16,17335
8110e77c:	8110ede4 	muli	r4,r16,17335
8110e780:	8110ede4 	muli	r4,r16,17335
8110e784:	8110ede4 	muli	r4,r16,17335
8110e788:	8110ede4 	muli	r4,r16,17335
8110e78c:	8110ede4 	muli	r4,r16,17335
8110e790:	8110ede4 	muli	r4,r16,17335
8110e794:	8110ede4 	muli	r4,r16,17335
8110e798:	8110ede4 	muli	r4,r16,17335
8110e79c:	8110ede4 	muli	r4,r16,17335
8110e7a0:	8110ede4 	muli	r4,r16,17335
8110e7a4:	8110ede4 	muli	r4,r16,17335
8110e7a8:	8110ede4 	muli	r4,r16,17335
8110e7ac:	8110ede4 	muli	r4,r16,17335
8110e7b0:	8110ede4 	muli	r4,r16,17335
8110e7b4:	8110ede4 	muli	r4,r16,17335
8110e7b8:	8110edac 	andhi	r4,r16,17334
8110e7bc:	8110ede4 	muli	r4,r16,17335
8110e7c0:	8110ede4 	muli	r4,r16,17335
8110e7c4:	8110ede4 	muli	r4,r16,17335
8110e7c8:	8110ede4 	muli	r4,r16,17335
8110e7cc:	8110ede4 	muli	r4,r16,17335
8110e7d0:	8110ede4 	muli	r4,r16,17335
8110e7d4:	8110ede4 	muli	r4,r16,17335
8110e7d8:	8110ebac 	andhi	r4,r16,17326
8110e7dc:	8110ede4 	muli	r4,r16,17335
8110e7e0:	8110ede4 	muli	r4,r16,17335
8110e7e4:	8110ea0c 	andi	r4,r16,17320
8110e7e8:	8110ed04 	addi	r4,r16,17332
8110e7ec:	8110e940 	call	88110e94 <__reset+0x20f0e94>
8110e7f0:	8110ede4 	muli	r4,r16,17335
8110e7f4:	8110ede4 	muli	r4,r16,17335
8110e7f8:	8110ede4 	muli	r4,r16,17335
8110e7fc:	8110e870 	cmpltui	r4,r16,17313
8110e800:	8110ede4 	muli	r4,r16,17335
8110e804:	8110ede4 	muli	r4,r16,17335
8110e808:	8110ec7c 	xorhi	r4,r16,17329
8110e80c:	8110ede4 	muli	r4,r16,17335
8110e810:	8110ede4 	muli	r4,r16,17335
8110e814:	8110eadc 	xori	r4,r16,17323
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110e818:	e0bffc0f 	ldh	r2,-16(fp)
8110e81c:	1009883a 	mov	r4,r2
8110e820:	1111a740 	call	81111a74 <cGetNextChar>
8110e824:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110e828:	00000406 	br	8110e83c <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110e82c:	e0bffc0f 	ldh	r2,-16(fp)
8110e830:	1009883a 	mov	r4,r2
8110e834:	1111a740 	call	81111a74 <cGetNextChar>
8110e838:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110e83c:	e0bff947 	ldb	r2,-27(fp)
8110e840:	108009d8 	cmpnei	r2,r2,39
8110e844:	103ff91e 	bne	r2,zero,8110e82c <__reset+0xfb0ee82c>
							c = cGetNextChar(siFile);
						}
						break;
8110e848:	00016d06 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110e84c:	00800044 	movi	r2,1
8110e850:	e0bff815 	stw	r2,-32(fp)
						break;
8110e854:	00016a06 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110e858:	01204534 	movhi	r4,33044
8110e85c:	21013904 	addi	r4,r4,1252
8110e860:	11149100 	call	81114910 <printf>
						bEOF = TRUE;
8110e864:	00800044 	movi	r2,1
8110e868:	e0bff815 	stw	r2,-32(fp)
						break;
8110e86c:	00016406 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110e870:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110e874:	e0bffc0f 	ldh	r2,-16(fp)
8110e878:	1009883a 	mov	r4,r2
8110e87c:	1111a740 	call	81111a74 <cGetNextChar>
8110e880:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110e884:	d0e00317 	ldw	r3,-32756(gp)
8110e888:	e0bff947 	ldb	r2,-27(fp)
8110e88c:	10800044 	addi	r2,r2,1
8110e890:	1885883a 	add	r2,r3,r2
8110e894:	10800003 	ldbu	r2,0(r2)
8110e898:	10803fcc 	andi	r2,r2,255
8110e89c:	1080010c 	andi	r2,r2,4
8110e8a0:	10000626 	beq	r2,zero,8110e8bc <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110e8a4:	e0bffa17 	ldw	r2,-24(fp)
8110e8a8:	e0fff943 	ldbu	r3,-27(fp)
8110e8ac:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110e8b0:	e0bffa17 	ldw	r2,-24(fp)
8110e8b4:	10800044 	addi	r2,r2,1
8110e8b8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110e8bc:	e0bff947 	ldb	r2,-27(fp)
8110e8c0:	10800ea0 	cmpeqi	r2,r2,58
8110e8c4:	1000031e 	bne	r2,zero,8110e8d4 <vLoadDefaultETHConf+0x2c4>
8110e8c8:	e0bff947 	ldb	r2,-27(fp)
8110e8cc:	10800ed8 	cmpnei	r2,r2,59
8110e8d0:	103fe81e 	bne	r2,zero,8110e874 <__reset+0xfb0ee874>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110e8d4:	e0bffa17 	ldw	r2,-24(fp)
8110e8d8:	00c00284 	movi	r3,10
8110e8dc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110e8e0:	e0bff903 	ldbu	r2,-28(fp)
8110e8e4:	10800168 	cmpgeui	r2,r2,5
8110e8e8:	1000021e 	bne	r2,zero,8110e8f4 <vLoadDefaultETHConf+0x2e4>
8110e8ec:	e43ff903 	ldbu	r16,-28(fp)
8110e8f0:	00000106 	br	8110e8f8 <vLoadDefaultETHConf+0x2e8>
8110e8f4:	04000144 	movi	r16,5
8110e8f8:	e0bffd04 	addi	r2,fp,-12
8110e8fc:	1009883a 	mov	r4,r2
8110e900:	11133ec0 	call	811133ec <atoi>
8110e904:	1007883a 	mov	r3,r2
8110e908:	00a04574 	movhi	r2,33045
8110e90c:	108b4c04 	addi	r2,r2,11568
8110e910:	1405883a 	add	r2,r2,r16
8110e914:	10800404 	addi	r2,r2,16
8110e918:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110e91c:	e0bffd04 	addi	r2,fp,-12
8110e920:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110e924:	e0bff903 	ldbu	r2,-28(fp)
8110e928:	10800044 	addi	r2,r2,1
8110e92c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110e930:	e0bff947 	ldb	r2,-27(fp)
8110e934:	10800ed8 	cmpnei	r2,r2,59
8110e938:	103fce1e 	bne	r2,zero,8110e874 <__reset+0xfb0ee874>

						break;
8110e93c:	00013006 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110e940:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110e944:	e0bffc0f 	ldh	r2,-16(fp)
8110e948:	1009883a 	mov	r4,r2
8110e94c:	1111a740 	call	81111a74 <cGetNextChar>
8110e950:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110e954:	d0e00317 	ldw	r3,-32756(gp)
8110e958:	e0bff947 	ldb	r2,-27(fp)
8110e95c:	10800044 	addi	r2,r2,1
8110e960:	1885883a 	add	r2,r3,r2
8110e964:	10800003 	ldbu	r2,0(r2)
8110e968:	10803fcc 	andi	r2,r2,255
8110e96c:	1080010c 	andi	r2,r2,4
8110e970:	10000626 	beq	r2,zero,8110e98c <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110e974:	e0bffa17 	ldw	r2,-24(fp)
8110e978:	e0fff943 	ldbu	r3,-27(fp)
8110e97c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110e980:	e0bffa17 	ldw	r2,-24(fp)
8110e984:	10800044 	addi	r2,r2,1
8110e988:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110e98c:	e0bff947 	ldb	r2,-27(fp)
8110e990:	10800ba0 	cmpeqi	r2,r2,46
8110e994:	1000031e 	bne	r2,zero,8110e9a4 <vLoadDefaultETHConf+0x394>
8110e998:	e0bff947 	ldb	r2,-27(fp)
8110e99c:	10800ed8 	cmpnei	r2,r2,59
8110e9a0:	103fe81e 	bne	r2,zero,8110e944 <__reset+0xfb0ee944>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110e9a4:	e0bffa17 	ldw	r2,-24(fp)
8110e9a8:	00c00284 	movi	r3,10
8110e9ac:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110e9b0:	e0bff903 	ldbu	r2,-28(fp)
8110e9b4:	108000e8 	cmpgeui	r2,r2,3
8110e9b8:	1000021e 	bne	r2,zero,8110e9c4 <vLoadDefaultETHConf+0x3b4>
8110e9bc:	e43ff903 	ldbu	r16,-28(fp)
8110e9c0:	00000106 	br	8110e9c8 <vLoadDefaultETHConf+0x3b8>
8110e9c4:	040000c4 	movi	r16,3
8110e9c8:	e0bffd04 	addi	r2,fp,-12
8110e9cc:	1009883a 	mov	r4,r2
8110e9d0:	11133ec0 	call	811133ec <atoi>
8110e9d4:	1007883a 	mov	r3,r2
8110e9d8:	00a04574 	movhi	r2,33045
8110e9dc:	108b4c04 	addi	r2,r2,11568
8110e9e0:	1405883a 	add	r2,r2,r16
8110e9e4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110e9e8:	e0bffd04 	addi	r2,fp,-12
8110e9ec:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110e9f0:	e0bff903 	ldbu	r2,-28(fp)
8110e9f4:	10800044 	addi	r2,r2,1
8110e9f8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110e9fc:	e0bff947 	ldb	r2,-27(fp)
8110ea00:	10800ed8 	cmpnei	r2,r2,59
8110ea04:	103fcf1e 	bne	r2,zero,8110e944 <__reset+0xfb0ee944>

						break;
8110ea08:	0000fd06 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110ea0c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ea10:	e0bffc0f 	ldh	r2,-16(fp)
8110ea14:	1009883a 	mov	r4,r2
8110ea18:	1111a740 	call	81111a74 <cGetNextChar>
8110ea1c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ea20:	d0e00317 	ldw	r3,-32756(gp)
8110ea24:	e0bff947 	ldb	r2,-27(fp)
8110ea28:	10800044 	addi	r2,r2,1
8110ea2c:	1885883a 	add	r2,r3,r2
8110ea30:	10800003 	ldbu	r2,0(r2)
8110ea34:	10803fcc 	andi	r2,r2,255
8110ea38:	1080010c 	andi	r2,r2,4
8110ea3c:	10000626 	beq	r2,zero,8110ea58 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110ea40:	e0bffa17 	ldw	r2,-24(fp)
8110ea44:	e0fff943 	ldbu	r3,-27(fp)
8110ea48:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ea4c:	e0bffa17 	ldw	r2,-24(fp)
8110ea50:	10800044 	addi	r2,r2,1
8110ea54:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110ea58:	e0bff947 	ldb	r2,-27(fp)
8110ea5c:	10800ba0 	cmpeqi	r2,r2,46
8110ea60:	1000031e 	bne	r2,zero,8110ea70 <vLoadDefaultETHConf+0x460>
8110ea64:	e0bff947 	ldb	r2,-27(fp)
8110ea68:	10800ed8 	cmpnei	r2,r2,59
8110ea6c:	103fe81e 	bne	r2,zero,8110ea10 <__reset+0xfb0eea10>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ea70:	e0bffa17 	ldw	r2,-24(fp)
8110ea74:	00c00284 	movi	r3,10
8110ea78:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110ea7c:	e0bff903 	ldbu	r2,-28(fp)
8110ea80:	108000e8 	cmpgeui	r2,r2,3
8110ea84:	1000021e 	bne	r2,zero,8110ea90 <vLoadDefaultETHConf+0x480>
8110ea88:	e43ff903 	ldbu	r16,-28(fp)
8110ea8c:	00000106 	br	8110ea94 <vLoadDefaultETHConf+0x484>
8110ea90:	040000c4 	movi	r16,3
8110ea94:	e0bffd04 	addi	r2,fp,-12
8110ea98:	1009883a 	mov	r4,r2
8110ea9c:	11133ec0 	call	811133ec <atoi>
8110eaa0:	1007883a 	mov	r3,r2
8110eaa4:	00a04574 	movhi	r2,33045
8110eaa8:	108b4c04 	addi	r2,r2,11568
8110eaac:	1405883a 	add	r2,r2,r16
8110eab0:	10800104 	addi	r2,r2,4
8110eab4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110eab8:	e0bffd04 	addi	r2,fp,-12
8110eabc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110eac0:	e0bff903 	ldbu	r2,-28(fp)
8110eac4:	10800044 	addi	r2,r2,1
8110eac8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110eacc:	e0bff947 	ldb	r2,-27(fp)
8110ead0:	10800ed8 	cmpnei	r2,r2,59
8110ead4:	103fce1e 	bne	r2,zero,8110ea10 <__reset+0xfb0eea10>

						break;
8110ead8:	0000c906 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110eadc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110eae0:	e0bffc0f 	ldh	r2,-16(fp)
8110eae4:	1009883a 	mov	r4,r2
8110eae8:	1111a740 	call	81111a74 <cGetNextChar>
8110eaec:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110eaf0:	d0e00317 	ldw	r3,-32756(gp)
8110eaf4:	e0bff947 	ldb	r2,-27(fp)
8110eaf8:	10800044 	addi	r2,r2,1
8110eafc:	1885883a 	add	r2,r3,r2
8110eb00:	10800003 	ldbu	r2,0(r2)
8110eb04:	10803fcc 	andi	r2,r2,255
8110eb08:	1080010c 	andi	r2,r2,4
8110eb0c:	10000626 	beq	r2,zero,8110eb28 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110eb10:	e0bffa17 	ldw	r2,-24(fp)
8110eb14:	e0fff943 	ldbu	r3,-27(fp)
8110eb18:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110eb1c:	e0bffa17 	ldw	r2,-24(fp)
8110eb20:	10800044 	addi	r2,r2,1
8110eb24:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110eb28:	e0bff947 	ldb	r2,-27(fp)
8110eb2c:	10800ba0 	cmpeqi	r2,r2,46
8110eb30:	1000031e 	bne	r2,zero,8110eb40 <vLoadDefaultETHConf+0x530>
8110eb34:	e0bff947 	ldb	r2,-27(fp)
8110eb38:	10800ed8 	cmpnei	r2,r2,59
8110eb3c:	103fe81e 	bne	r2,zero,8110eae0 <__reset+0xfb0eeae0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110eb40:	e0bffa17 	ldw	r2,-24(fp)
8110eb44:	00c00284 	movi	r3,10
8110eb48:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110eb4c:	e0bff903 	ldbu	r2,-28(fp)
8110eb50:	108000e8 	cmpgeui	r2,r2,3
8110eb54:	1000021e 	bne	r2,zero,8110eb60 <vLoadDefaultETHConf+0x550>
8110eb58:	e43ff903 	ldbu	r16,-28(fp)
8110eb5c:	00000106 	br	8110eb64 <vLoadDefaultETHConf+0x554>
8110eb60:	040000c4 	movi	r16,3
8110eb64:	e0bffd04 	addi	r2,fp,-12
8110eb68:	1009883a 	mov	r4,r2
8110eb6c:	11133ec0 	call	811133ec <atoi>
8110eb70:	1007883a 	mov	r3,r2
8110eb74:	00a04574 	movhi	r2,33045
8110eb78:	108b4c04 	addi	r2,r2,11568
8110eb7c:	1405883a 	add	r2,r2,r16
8110eb80:	10800204 	addi	r2,r2,8
8110eb84:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110eb88:	e0bffd04 	addi	r2,fp,-12
8110eb8c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110eb90:	e0bff903 	ldbu	r2,-28(fp)
8110eb94:	10800044 	addi	r2,r2,1
8110eb98:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110eb9c:	e0bff947 	ldb	r2,-27(fp)
8110eba0:	10800ed8 	cmpnei	r2,r2,59
8110eba4:	103fce1e 	bne	r2,zero,8110eae0 <__reset+0xfb0eeae0>

						break;
8110eba8:	00009506 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110ebac:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ebb0:	e0bffc0f 	ldh	r2,-16(fp)
8110ebb4:	1009883a 	mov	r4,r2
8110ebb8:	1111a740 	call	81111a74 <cGetNextChar>
8110ebbc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ebc0:	d0e00317 	ldw	r3,-32756(gp)
8110ebc4:	e0bff947 	ldb	r2,-27(fp)
8110ebc8:	10800044 	addi	r2,r2,1
8110ebcc:	1885883a 	add	r2,r3,r2
8110ebd0:	10800003 	ldbu	r2,0(r2)
8110ebd4:	10803fcc 	andi	r2,r2,255
8110ebd8:	1080010c 	andi	r2,r2,4
8110ebdc:	10000626 	beq	r2,zero,8110ebf8 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110ebe0:	e0bffa17 	ldw	r2,-24(fp)
8110ebe4:	e0fff943 	ldbu	r3,-27(fp)
8110ebe8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ebec:	e0bffa17 	ldw	r2,-24(fp)
8110ebf0:	10800044 	addi	r2,r2,1
8110ebf4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110ebf8:	e0bff947 	ldb	r2,-27(fp)
8110ebfc:	10800ba0 	cmpeqi	r2,r2,46
8110ec00:	1000031e 	bne	r2,zero,8110ec10 <vLoadDefaultETHConf+0x600>
8110ec04:	e0bff947 	ldb	r2,-27(fp)
8110ec08:	10800ed8 	cmpnei	r2,r2,59
8110ec0c:	103fe81e 	bne	r2,zero,8110ebb0 <__reset+0xfb0eebb0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ec10:	e0bffa17 	ldw	r2,-24(fp)
8110ec14:	00c00284 	movi	r3,10
8110ec18:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110ec1c:	e0bff903 	ldbu	r2,-28(fp)
8110ec20:	108000e8 	cmpgeui	r2,r2,3
8110ec24:	1000021e 	bne	r2,zero,8110ec30 <vLoadDefaultETHConf+0x620>
8110ec28:	e43ff903 	ldbu	r16,-28(fp)
8110ec2c:	00000106 	br	8110ec34 <vLoadDefaultETHConf+0x624>
8110ec30:	040000c4 	movi	r16,3
8110ec34:	e0bffd04 	addi	r2,fp,-12
8110ec38:	1009883a 	mov	r4,r2
8110ec3c:	11133ec0 	call	811133ec <atoi>
8110ec40:	1007883a 	mov	r3,r2
8110ec44:	00a04574 	movhi	r2,33045
8110ec48:	108b4c04 	addi	r2,r2,11568
8110ec4c:	1405883a 	add	r2,r2,r16
8110ec50:	10800304 	addi	r2,r2,12
8110ec54:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110ec58:	e0bffd04 	addi	r2,fp,-12
8110ec5c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ec60:	e0bff903 	ldbu	r2,-28(fp)
8110ec64:	10800044 	addi	r2,r2,1
8110ec68:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110ec6c:	e0bff947 	ldb	r2,-27(fp)
8110ec70:	10800ed8 	cmpnei	r2,r2,59
8110ec74:	103fce1e 	bne	r2,zero,8110ebb0 <__reset+0xfb0eebb0>

						break;						
8110ec78:	00006106 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110ec7c:	e0bffc0f 	ldh	r2,-16(fp)
8110ec80:	1009883a 	mov	r4,r2
8110ec84:	1111a740 	call	81111a74 <cGetNextChar>
8110ec88:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110ec8c:	d0e00317 	ldw	r3,-32756(gp)
8110ec90:	e0bff947 	ldb	r2,-27(fp)
8110ec94:	10800044 	addi	r2,r2,1
8110ec98:	1885883a 	add	r2,r3,r2
8110ec9c:	10800003 	ldbu	r2,0(r2)
8110eca0:	10803fcc 	andi	r2,r2,255
8110eca4:	1080010c 	andi	r2,r2,4
8110eca8:	10000626 	beq	r2,zero,8110ecc4 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110ecac:	e0bffa17 	ldw	r2,-24(fp)
8110ecb0:	e0fff943 	ldbu	r3,-27(fp)
8110ecb4:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110ecb8:	e0bffa17 	ldw	r2,-24(fp)
8110ecbc:	10800044 	addi	r2,r2,1
8110ecc0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110ecc4:	e0bff947 	ldb	r2,-27(fp)
8110ecc8:	10800ed8 	cmpnei	r2,r2,59
8110eccc:	103feb1e 	bne	r2,zero,8110ec7c <__reset+0xfb0eec7c>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ecd0:	e0bffa17 	ldw	r2,-24(fp)
8110ecd4:	00c00284 	movi	r3,10
8110ecd8:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110ecdc:	e0bffd04 	addi	r2,fp,-12
8110ece0:	1009883a 	mov	r4,r2
8110ece4:	11133ec0 	call	811133ec <atoi>
8110ece8:	1007883a 	mov	r3,r2
8110ecec:	00a04574 	movhi	r2,33045
8110ecf0:	108b4c04 	addi	r2,r2,11568
8110ecf4:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110ecf8:	e0bffd04 	addi	r2,fp,-12
8110ecfc:	e0bffa15 	stw	r2,-24(fp)

						break;
8110ed00:	00003f06 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110ed04:	e0bffc0f 	ldh	r2,-16(fp)
8110ed08:	1009883a 	mov	r4,r2
8110ed0c:	1111a740 	call	81111a74 <cGetNextChar>
8110ed10:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110ed14:	d0e00317 	ldw	r3,-32756(gp)
8110ed18:	e0bff947 	ldb	r2,-27(fp)
8110ed1c:	10800044 	addi	r2,r2,1
8110ed20:	1885883a 	add	r2,r3,r2
8110ed24:	10800003 	ldbu	r2,0(r2)
8110ed28:	10803fcc 	andi	r2,r2,255
8110ed2c:	1080010c 	andi	r2,r2,4
8110ed30:	10000626 	beq	r2,zero,8110ed4c <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110ed34:	e0bffa17 	ldw	r2,-24(fp)
8110ed38:	e0fff943 	ldbu	r3,-27(fp)
8110ed3c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110ed40:	e0bffa17 	ldw	r2,-24(fp)
8110ed44:	10800044 	addi	r2,r2,1
8110ed48:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110ed4c:	e0bff947 	ldb	r2,-27(fp)
8110ed50:	10800ed8 	cmpnei	r2,r2,59
8110ed54:	103feb1e 	bne	r2,zero,8110ed04 <__reset+0xfb0eed04>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ed58:	e0bffa17 	ldw	r2,-24(fp)
8110ed5c:	00c00284 	movi	r3,10
8110ed60:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110ed64:	e0bffd04 	addi	r2,fp,-12
8110ed68:	1009883a 	mov	r4,r2
8110ed6c:	11133ec0 	call	811133ec <atoi>
8110ed70:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110ed74:	e0bffc8f 	ldh	r2,-14(fp)
8110ed78:	10800058 	cmpnei	r2,r2,1
8110ed7c:	1000051e 	bne	r2,zero,8110ed94 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110ed80:	00a04574 	movhi	r2,33045
8110ed84:	108b4c04 	addi	r2,r2,11568
8110ed88:	00c00044 	movi	r3,1
8110ed8c:	10c00615 	stw	r3,24(r2)
8110ed90:	00000306 	br	8110eda0 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110ed94:	00a04574 	movhi	r2,33045
8110ed98:	108b4c04 	addi	r2,r2,11568
8110ed9c:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110eda0:	e0bffd04 	addi	r2,fp,-12
8110eda4:	e0bffa15 	stw	r2,-24(fp)

						break;
8110eda8:	00001506 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110edac:	e0bffc0f 	ldh	r2,-16(fp)
8110edb0:	1009883a 	mov	r4,r2
8110edb4:	1111a340 	call	81111a34 <siCloseFile>
8110edb8:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110edbc:	e0bffb17 	ldw	r2,-20(fp)
8110edc0:	1000031e 	bne	r2,zero,8110edd0 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110edc4:	01204534 	movhi	r4,33044
8110edc8:	21013e04 	addi	r4,r4,1272
8110edcc:	1114bb40 	call	81114bb4 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110edd0:	00800044 	movi	r2,1
8110edd4:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110edd8:	00800044 	movi	r2,1
8110eddc:	e0bff715 	stw	r2,-36(fp)
						break;
8110ede0:	00000706 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110ede4:	e0bff947 	ldb	r2,-27(fp)
8110ede8:	100b883a 	mov	r5,r2
8110edec:	01204534 	movhi	r4,33044
8110edf0:	21014604 	addi	r4,r4,1304
8110edf4:	11149100 	call	81114910 <printf>
						break;
8110edf8:	00000106 	br	8110ee00 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110edfc:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110ee00:	e0bff817 	ldw	r2,-32(fp)
8110ee04:	103e2026 	beq	r2,zero,8110e688 <__reset+0xfb0ee688>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110ee08:	00000706 	br	8110ee28 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110ee0c:	01204534 	movhi	r4,33044
8110ee10:	21015304 	addi	r4,r4,1356
8110ee14:	1114bb40 	call	81114bb4 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110ee18:	00000306 	br	8110ee28 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110ee1c:	01204534 	movhi	r4,33044
8110ee20:	21015c04 	addi	r4,r4,1392
8110ee24:	1114bb40 	call	81114bb4 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110ee28:	e0bff717 	ldw	r2,-36(fp)
8110ee2c:	1000541e 	bne	r2,zero,8110ef80 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110ee30:	01204534 	movhi	r4,33044
8110ee34:	21015f04 	addi	r4,r4,1404
8110ee38:	1114bb40 	call	81114bb4 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110ee3c:	01604534 	movhi	r5,33044
8110ee40:	29413704 	addi	r5,r5,1244
8110ee44:	01204534 	movhi	r4,33044
8110ee48:	21017304 	addi	r4,r4,1484
8110ee4c:	11149100 	call	81114910 <printf>


		xConfEth.siPortPUS = 17000;
8110ee50:	00a04574 	movhi	r2,33045
8110ee54:	108b4c04 	addi	r2,r2,11568
8110ee58:	00d09a04 	movi	r3,17000
8110ee5c:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110ee60:	00a04574 	movhi	r2,33045
8110ee64:	108b4c04 	addi	r2,r2,11568
8110ee68:	00fff004 	movi	r3,-64
8110ee6c:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110ee70:	00a04574 	movhi	r2,33045
8110ee74:	108b4c04 	addi	r2,r2,11568
8110ee78:	00ffea04 	movi	r3,-88
8110ee7c:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110ee80:	00a04574 	movhi	r2,33045
8110ee84:	108b4c04 	addi	r2,r2,11568
8110ee88:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110ee8c:	00a04574 	movhi	r2,33045
8110ee90:	108b4c04 	addi	r2,r2,11568
8110ee94:	00c00144 	movi	r3,5
8110ee98:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110ee9c:	00a04574 	movhi	r2,33045
8110eea0:	108b4c04 	addi	r2,r2,11568
8110eea4:	00fff004 	movi	r3,-64
8110eea8:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110eeac:	00a04574 	movhi	r2,33045
8110eeb0:	108b4c04 	addi	r2,r2,11568
8110eeb4:	00ffea04 	movi	r3,-88
8110eeb8:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110eebc:	00a04574 	movhi	r2,33045
8110eec0:	108b4c04 	addi	r2,r2,11568
8110eec4:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110eec8:	00a04574 	movhi	r2,33045
8110eecc:	108b4c04 	addi	r2,r2,11568
8110eed0:	00c00044 	movi	r3,1
8110eed4:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110eed8:	00a04574 	movhi	r2,33045
8110eedc:	108b4c04 	addi	r2,r2,11568
8110eee0:	00ffffc4 	movi	r3,-1
8110eee4:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110eee8:	00a04574 	movhi	r2,33045
8110eeec:	108b4c04 	addi	r2,r2,11568
8110eef0:	00ffffc4 	movi	r3,-1
8110eef4:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110eef8:	00a04574 	movhi	r2,33045
8110eefc:	108b4c04 	addi	r2,r2,11568
8110ef00:	00ffffc4 	movi	r3,-1
8110ef04:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110ef08:	00a04574 	movhi	r2,33045
8110ef0c:	108b4c04 	addi	r2,r2,11568
8110ef10:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110ef14:	00a04574 	movhi	r2,33045
8110ef18:	108b4c04 	addi	r2,r2,11568
8110ef1c:	00ffff04 	movi	r3,-4
8110ef20:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110ef24:	00a04574 	movhi	r2,33045
8110ef28:	108b4c04 	addi	r2,r2,11568
8110ef2c:	00fffdc4 	movi	r3,-9
8110ef30:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110ef34:	00a04574 	movhi	r2,33045
8110ef38:	108b4c04 	addi	r2,r2,11568
8110ef3c:	00c018c4 	movi	r3,99
8110ef40:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110ef44:	00a04574 	movhi	r2,33045
8110ef48:	108b4c04 	addi	r2,r2,11568
8110ef4c:	00c01344 	movi	r3,77
8110ef50:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110ef54:	00a04574 	movhi	r2,33045
8110ef58:	108b4c04 	addi	r2,r2,11568
8110ef5c:	00c007c4 	movi	r3,31
8110ef60:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110ef64:	00a04574 	movhi	r2,33045
8110ef68:	108b4c04 	addi	r2,r2,11568
8110ef6c:	00c01084 	movi	r3,66
8110ef70:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110ef74:	00a04574 	movhi	r2,33045
8110ef78:	108b4c04 	addi	r2,r2,11568
8110ef7c:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110ef80:	e0bff717 	ldw	r2,-36(fp)
}
8110ef84:	e6ffff04 	addi	sp,fp,-4
8110ef88:	dfc00217 	ldw	ra,8(sp)
8110ef8c:	df000117 	ldw	fp,4(sp)
8110ef90:	dc000017 	ldw	r16,0(sp)
8110ef94:	dec00304 	addi	sp,sp,12
8110ef98:	f800283a 	ret

8110ef9c <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110ef9c:	defff004 	addi	sp,sp,-64
8110efa0:	de00012e 	bgeu	sp,et,8110efa8 <vShowEthConfig+0xc>
8110efa4:	003b68fa 	trap	3
8110efa8:	dfc00f15 	stw	ra,60(sp)
8110efac:	df000e15 	stw	fp,56(sp)
8110efb0:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110efb4:	d0a05017 	ldw	r2,-32448(gp)
8110efb8:	100f883a 	mov	r7,r2
8110efbc:	018007c4 	movi	r6,31
8110efc0:	01400044 	movi	r5,1
8110efc4:	01204534 	movhi	r4,33044
8110efc8:	21017904 	addi	r4,r4,1508
8110efcc:	1113be40 	call	81113be4 <fwrite>

		memset(buffer,0,40);
8110efd0:	01800a04 	movi	r6,40
8110efd4:	000b883a 	mov	r5,zero
8110efd8:	e13ff604 	addi	r4,fp,-40
8110efdc:	11147480 	call	81114748 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110efe0:	00a04574 	movhi	r2,33045
8110efe4:	108b4c04 	addi	r2,r2,11568
8110efe8:	10800403 	ldbu	r2,16(r2)
8110efec:	11803fcc 	andi	r6,r2,255
8110eff0:	00a04574 	movhi	r2,33045
8110eff4:	108b4c04 	addi	r2,r2,11568
8110eff8:	10800443 	ldbu	r2,17(r2)
8110effc:	11c03fcc 	andi	r7,r2,255
8110f000:	00a04574 	movhi	r2,33045
8110f004:	108b4c04 	addi	r2,r2,11568
8110f008:	10800483 	ldbu	r2,18(r2)
8110f00c:	10c03fcc 	andi	r3,r2,255
8110f010:	00a04574 	movhi	r2,33045
8110f014:	108b4c04 	addi	r2,r2,11568
8110f018:	108004c3 	ldbu	r2,19(r2)
8110f01c:	11003fcc 	andi	r4,r2,255
8110f020:	00a04574 	movhi	r2,33045
8110f024:	108b4c04 	addi	r2,r2,11568
8110f028:	10800503 	ldbu	r2,20(r2)
8110f02c:	11403fcc 	andi	r5,r2,255
8110f030:	00a04574 	movhi	r2,33045
8110f034:	108b4c04 	addi	r2,r2,11568
8110f038:	10800543 	ldbu	r2,21(r2)
8110f03c:	10803fcc 	andi	r2,r2,255
8110f040:	d8800315 	stw	r2,12(sp)
8110f044:	d9400215 	stw	r5,8(sp)
8110f048:	d9000115 	stw	r4,4(sp)
8110f04c:	d8c00015 	stw	r3,0(sp)
8110f050:	01604534 	movhi	r5,33044
8110f054:	29418104 	addi	r5,r5,1540
8110f058:	e13ff604 	addi	r4,fp,-40
8110f05c:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f060:	d0a05017 	ldw	r2,-32448(gp)
8110f064:	e17ff604 	addi	r5,fp,-40
8110f068:	1009883a 	mov	r4,r2
8110f06c:	11135480 	call	81113548 <fprintf>

		memset(buffer,0,40);
8110f070:	01800a04 	movi	r6,40
8110f074:	000b883a 	mov	r5,zero
8110f078:	e13ff604 	addi	r4,fp,-40
8110f07c:	11147480 	call	81114748 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110f080:	00a04574 	movhi	r2,33045
8110f084:	108b4c04 	addi	r2,r2,11568
8110f088:	10800003 	ldbu	r2,0(r2)
8110f08c:	11003fcc 	andi	r4,r2,255
8110f090:	00a04574 	movhi	r2,33045
8110f094:	108b4c04 	addi	r2,r2,11568
8110f098:	10800043 	ldbu	r2,1(r2)
8110f09c:	11403fcc 	andi	r5,r2,255
8110f0a0:	00a04574 	movhi	r2,33045
8110f0a4:	108b4c04 	addi	r2,r2,11568
8110f0a8:	10800083 	ldbu	r2,2(r2)
8110f0ac:	10c03fcc 	andi	r3,r2,255
8110f0b0:	00a04574 	movhi	r2,33045
8110f0b4:	108b4c04 	addi	r2,r2,11568
8110f0b8:	108000c3 	ldbu	r2,3(r2)
8110f0bc:	10803fcc 	andi	r2,r2,255
8110f0c0:	d8800115 	stw	r2,4(sp)
8110f0c4:	d8c00015 	stw	r3,0(sp)
8110f0c8:	280f883a 	mov	r7,r5
8110f0cc:	200d883a 	mov	r6,r4
8110f0d0:	01604534 	movhi	r5,33044
8110f0d4:	29418a04 	addi	r5,r5,1576
8110f0d8:	e13ff604 	addi	r4,fp,-40
8110f0dc:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f0e0:	d0a05017 	ldw	r2,-32448(gp)
8110f0e4:	e17ff604 	addi	r5,fp,-40
8110f0e8:	1009883a 	mov	r4,r2
8110f0ec:	11135480 	call	81113548 <fprintf>

		memset(buffer,0,40);
8110f0f0:	01800a04 	movi	r6,40
8110f0f4:	000b883a 	mov	r5,zero
8110f0f8:	e13ff604 	addi	r4,fp,-40
8110f0fc:	11147480 	call	81114748 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110f100:	00a04574 	movhi	r2,33045
8110f104:	108b4c04 	addi	r2,r2,11568
8110f108:	10800103 	ldbu	r2,4(r2)
8110f10c:	11003fcc 	andi	r4,r2,255
8110f110:	00a04574 	movhi	r2,33045
8110f114:	108b4c04 	addi	r2,r2,11568
8110f118:	10800143 	ldbu	r2,5(r2)
8110f11c:	11403fcc 	andi	r5,r2,255
8110f120:	00a04574 	movhi	r2,33045
8110f124:	108b4c04 	addi	r2,r2,11568
8110f128:	10800183 	ldbu	r2,6(r2)
8110f12c:	10c03fcc 	andi	r3,r2,255
8110f130:	00a04574 	movhi	r2,33045
8110f134:	108b4c04 	addi	r2,r2,11568
8110f138:	108001c3 	ldbu	r2,7(r2)
8110f13c:	10803fcc 	andi	r2,r2,255
8110f140:	d8800115 	stw	r2,4(sp)
8110f144:	d8c00015 	stw	r3,0(sp)
8110f148:	280f883a 	mov	r7,r5
8110f14c:	200d883a 	mov	r6,r4
8110f150:	01604534 	movhi	r5,33044
8110f154:	29419004 	addi	r5,r5,1600
8110f158:	e13ff604 	addi	r4,fp,-40
8110f15c:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f160:	d0a05017 	ldw	r2,-32448(gp)
8110f164:	e17ff604 	addi	r5,fp,-40
8110f168:	1009883a 	mov	r4,r2
8110f16c:	11135480 	call	81113548 <fprintf>

		memset(buffer,0,40);
8110f170:	01800a04 	movi	r6,40
8110f174:	000b883a 	mov	r5,zero
8110f178:	e13ff604 	addi	r4,fp,-40
8110f17c:	11147480 	call	81114748 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110f180:	00a04574 	movhi	r2,33045
8110f184:	108b4c04 	addi	r2,r2,11568
8110f188:	10800203 	ldbu	r2,8(r2)
8110f18c:	11003fcc 	andi	r4,r2,255
8110f190:	00a04574 	movhi	r2,33045
8110f194:	108b4c04 	addi	r2,r2,11568
8110f198:	10800243 	ldbu	r2,9(r2)
8110f19c:	11403fcc 	andi	r5,r2,255
8110f1a0:	00a04574 	movhi	r2,33045
8110f1a4:	108b4c04 	addi	r2,r2,11568
8110f1a8:	10800283 	ldbu	r2,10(r2)
8110f1ac:	10c03fcc 	andi	r3,r2,255
8110f1b0:	00a04574 	movhi	r2,33045
8110f1b4:	108b4c04 	addi	r2,r2,11568
8110f1b8:	108002c3 	ldbu	r2,11(r2)
8110f1bc:	10803fcc 	andi	r2,r2,255
8110f1c0:	d8800115 	stw	r2,4(sp)
8110f1c4:	d8c00015 	stw	r3,0(sp)
8110f1c8:	280f883a 	mov	r7,r5
8110f1cc:	200d883a 	mov	r6,r4
8110f1d0:	01604534 	movhi	r5,33044
8110f1d4:	29419704 	addi	r5,r5,1628
8110f1d8:	e13ff604 	addi	r4,fp,-40
8110f1dc:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f1e0:	d0a05017 	ldw	r2,-32448(gp)
8110f1e4:	e17ff604 	addi	r5,fp,-40
8110f1e8:	1009883a 	mov	r4,r2
8110f1ec:	11135480 	call	81113548 <fprintf>

		memset(buffer,0,40);
8110f1f0:	01800a04 	movi	r6,40
8110f1f4:	000b883a 	mov	r5,zero
8110f1f8:	e13ff604 	addi	r4,fp,-40
8110f1fc:	11147480 	call	81114748 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110f200:	00a04574 	movhi	r2,33045
8110f204:	108b4c04 	addi	r2,r2,11568
8110f208:	10800303 	ldbu	r2,12(r2)
8110f20c:	11003fcc 	andi	r4,r2,255
8110f210:	00a04574 	movhi	r2,33045
8110f214:	108b4c04 	addi	r2,r2,11568
8110f218:	10800343 	ldbu	r2,13(r2)
8110f21c:	11403fcc 	andi	r5,r2,255
8110f220:	00a04574 	movhi	r2,33045
8110f224:	108b4c04 	addi	r2,r2,11568
8110f228:	10800383 	ldbu	r2,14(r2)
8110f22c:	10c03fcc 	andi	r3,r2,255
8110f230:	00a04574 	movhi	r2,33045
8110f234:	108b4c04 	addi	r2,r2,11568
8110f238:	108003c3 	ldbu	r2,15(r2)
8110f23c:	10803fcc 	andi	r2,r2,255
8110f240:	d8800115 	stw	r2,4(sp)
8110f244:	d8c00015 	stw	r3,0(sp)
8110f248:	280f883a 	mov	r7,r5
8110f24c:	200d883a 	mov	r6,r4
8110f250:	01604534 	movhi	r5,33044
8110f254:	29419e04 	addi	r5,r5,1656
8110f258:	e13ff604 	addi	r4,fp,-40
8110f25c:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f260:	d0a05017 	ldw	r2,-32448(gp)
8110f264:	e17ff604 	addi	r5,fp,-40
8110f268:	1009883a 	mov	r4,r2
8110f26c:	11135480 	call	81113548 <fprintf>

		memset(buffer,0,40);
8110f270:	01800a04 	movi	r6,40
8110f274:	000b883a 	mov	r5,zero
8110f278:	e13ff604 	addi	r4,fp,-40
8110f27c:	11147480 	call	81114748 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110f280:	00a04574 	movhi	r2,33045
8110f284:	108b4c04 	addi	r2,r2,11568
8110f288:	1080058b 	ldhu	r2,22(r2)
8110f28c:	10bfffcc 	andi	r2,r2,65535
8110f290:	100d883a 	mov	r6,r2
8110f294:	01604534 	movhi	r5,33044
8110f298:	2941a504 	addi	r5,r5,1684
8110f29c:	e13ff604 	addi	r4,fp,-40
8110f2a0:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer );
8110f2a4:	d0a05017 	ldw	r2,-32448(gp)
8110f2a8:	e17ff604 	addi	r5,fp,-40
8110f2ac:	1009883a 	mov	r4,r2
8110f2b0:	11135480 	call	81113548 <fprintf>

	}
8110f2b4:	0001883a 	nop
8110f2b8:	e037883a 	mov	sp,fp
8110f2bc:	dfc00117 	ldw	ra,4(sp)
8110f2c0:	df000017 	ldw	fp,0(sp)
8110f2c4:	dec00204 	addi	sp,sp,8
8110f2c8:	f800283a 	ret

8110f2cc <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110f2cc:	defffb04 	addi	sp,sp,-20
8110f2d0:	de00012e 	bgeu	sp,et,8110f2d8 <ucCrc8+0xc>
8110f2d4:	003b68fa 	trap	3
8110f2d8:	df000415 	stw	fp,16(sp)
8110f2dc:	df000404 	addi	fp,sp,16
8110f2e0:	e13ffd15 	stw	r4,-12(fp)
8110f2e4:	e17ffe15 	stw	r5,-8(fp)
8110f2e8:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110f2ec:	e0bffe17 	ldw	r2,-8(fp)
8110f2f0:	1000021e 	bne	r2,zero,8110f2fc <ucCrc8+0x30>
        return 0;
8110f2f4:	0005883a 	mov	r2,zero
8110f2f8:	00001906 	br	8110f360 <ucCrc8+0x94>
    crc &= 0xff;
8110f2fc:	e0bffd17 	ldw	r2,-12(fp)
8110f300:	10803fcc 	andi	r2,r2,255
8110f304:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110f308:	e0fffe17 	ldw	r3,-8(fp)
8110f30c:	e0bfff17 	ldw	r2,-4(fp)
8110f310:	1885883a 	add	r2,r3,r2
8110f314:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110f318:	00000d06 	br	8110f350 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110f31c:	e0bffe17 	ldw	r2,-8(fp)
8110f320:	10c00044 	addi	r3,r2,1
8110f324:	e0fffe15 	stw	r3,-8(fp)
8110f328:	10800003 	ldbu	r2,0(r2)
8110f32c:	10c03fcc 	andi	r3,r2,255
8110f330:	e0bffd17 	ldw	r2,-12(fp)
8110f334:	1886f03a 	xor	r3,r3,r2
8110f338:	00a04534 	movhi	r2,33044
8110f33c:	1081a8c4 	addi	r2,r2,1699
8110f340:	10c5883a 	add	r2,r2,r3
8110f344:	10800003 	ldbu	r2,0(r2)
8110f348:	10803fcc 	andi	r2,r2,255
8110f34c:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110f350:	e0fffe17 	ldw	r3,-8(fp)
8110f354:	e0bffc17 	ldw	r2,-16(fp)
8110f358:	18bff036 	bltu	r3,r2,8110f31c <__reset+0xfb0ef31c>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110f35c:	e0bffd17 	ldw	r2,-12(fp)
}
8110f360:	e037883a 	mov	sp,fp
8110f364:	df000017 	ldw	fp,0(sp)
8110f368:	dec00104 	addi	sp,sp,4
8110f36c:	f800283a 	ret

8110f370 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110f370:	defffb04 	addi	sp,sp,-20
8110f374:	de00012e 	bgeu	sp,et,8110f37c <ucCrc8wInit+0xc>
8110f378:	003b68fa 	trap	3
8110f37c:	dfc00415 	stw	ra,16(sp)
8110f380:	df000315 	stw	fp,12(sp)
8110f384:	df000304 	addi	fp,sp,12
8110f388:	e13ffe15 	stw	r4,-8(fp)
8110f38c:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;

	crc = ucCrc8(0, NULL, 0);
8110f390:	000d883a 	mov	r6,zero
8110f394:	000b883a 	mov	r5,zero
8110f398:	0009883a 	mov	r4,zero
8110f39c:	110f2cc0 	call	8110f2cc <ucCrc8>
8110f3a0:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110f3a4:	e0bffd03 	ldbu	r2,-12(fp)
8110f3a8:	e1bfff17 	ldw	r6,-4(fp)
8110f3ac:	e17ffe17 	ldw	r5,-8(fp)
8110f3b0:	1009883a 	mov	r4,r2
8110f3b4:	110f2cc0 	call	8110f2cc <ucCrc8>
}
8110f3b8:	e037883a 	mov	sp,fp
8110f3bc:	dfc00117 	ldw	ra,4(sp)
8110f3c0:	df000017 	ldw	fp,0(sp)
8110f3c4:	dec00204 	addi	sp,sp,8
8110f3c8:	f800283a 	ret

8110f3cc <vDataControllerInit>:


#include "data_controller.h"


void vDataControllerInit( TNData_Control *xDataControlL, TNFee_Control *xNfeeCOntrolL ) {
8110f3cc:	defffc04 	addi	sp,sp,-16
8110f3d0:	de00012e 	bgeu	sp,et,8110f3d8 <vDataControllerInit+0xc>
8110f3d4:	003b68fa 	trap	3
8110f3d8:	df000315 	stw	fp,12(sp)
8110f3dc:	df000304 	addi	fp,sp,12
8110f3e0:	e13ffe15 	stw	r4,-8(fp)
8110f3e4:	e17fff15 	stw	r5,-4(fp)
	unsigned char ucIL;

	for ( ucIL = 0 ; ucIL < N_OF_NFEE; ucIL++ ) {
8110f3e8:	e03ffd05 	stb	zero,-12(fp)
8110f3ec:	00001c06 	br	8110f460 <vDataControllerInit+0x94>
		xDataControlL->xReadOnlyFeeControl.xNfee[ucIL] = &xNfeeCOntrolL->xNfee[ucIL];
8110f3f0:	e0bffd03 	ldbu	r2,-12(fp)
8110f3f4:	e0fffd03 	ldbu	r3,-12(fp)
8110f3f8:	18c02c24 	muli	r3,r3,176
8110f3fc:	e13fff17 	ldw	r4,-4(fp)
8110f400:	20c7883a 	add	r3,r4,r3
8110f404:	e13ffe17 	ldw	r4,-8(fp)
8110f408:	10800244 	addi	r2,r2,9
8110f40c:	1085883a 	add	r2,r2,r2
8110f410:	1085883a 	add	r2,r2,r2
8110f414:	2085883a 	add	r2,r4,r2
8110f418:	10c00015 	stw	r3,0(r2)
		xDataControlL->xReadOnlyFeeControl.pbEnabledNFEEs[ucIL] = xNfeeCOntrolL->pbEnabledNFEEs[ucIL];
8110f41c:	e17ffd03 	ldbu	r5,-12(fp)
8110f420:	e0bffd03 	ldbu	r2,-12(fp)
8110f424:	e0ffff17 	ldw	r3,-4(fp)
8110f428:	10804204 	addi	r2,r2,264
8110f42c:	1085883a 	add	r2,r2,r2
8110f430:	1085883a 	add	r2,r2,r2
8110f434:	1885883a 	add	r2,r3,r2
8110f438:	10c00017 	ldw	r3,0(r2)
8110f43c:	e13ffe17 	ldw	r4,-8(fp)
8110f440:	288003c4 	addi	r2,r5,15
8110f444:	1085883a 	add	r2,r2,r2
8110f448:	1085883a 	add	r2,r2,r2
8110f44c:	2085883a 	add	r2,r4,r2
8110f450:	10c00015 	stw	r3,0(r2)


void vDataControllerInit( TNData_Control *xDataControlL, TNFee_Control *xNfeeCOntrolL ) {
	unsigned char ucIL;

	for ( ucIL = 0 ; ucIL < N_OF_NFEE; ucIL++ ) {
8110f454:	e0bffd03 	ldbu	r2,-12(fp)
8110f458:	10800044 	addi	r2,r2,1
8110f45c:	e0bffd05 	stb	r2,-12(fp)
8110f460:	e0bffd03 	ldbu	r2,-12(fp)
8110f464:	108001b0 	cmpltui	r2,r2,6
8110f468:	103fe11e 	bne	r2,zero,8110f3f0 <__reset+0xfb0ef3f0>
		xDataControlL->xReadOnlyFeeControl.xNfee[ucIL] = &xNfeeCOntrolL->xNfee[ucIL];
		xDataControlL->xReadOnlyFeeControl.pbEnabledNFEEs[ucIL] = xNfeeCOntrolL->pbEnabledNFEEs[ucIL];
	}
	
	xDataControlL->xReadOnlyFeeControl.ucTimeCode = &xNfeeCOntrolL->ucTimeCode;
8110f46c:	e0bfff17 	ldw	r2,-4(fp)
8110f470:	10c10e04 	addi	r3,r2,1080
8110f474:	e0bffe17 	ldw	r2,-8(fp)
8110f478:	10c01515 	stw	r3,84(r2)
	xDataControlL->bUpdateComplete = FALSE;
8110f47c:	e0bffe17 	ldw	r2,-8(fp)
8110f480:	10001615 	stw	zero,88(r2)


	/* The only inverse attribution */
	/* This variable indicates when the DataControl finishs to use the RAM, then FeeControl can start fill the buffer to the next MasterSync */
	xNfeeCOntrolL->pbUpdateCReadOnly = &xDataControlL->bUpdateComplete;
8110f484:	e0bffe17 	ldw	r2,-8(fp)
8110f488:	10c01604 	addi	r3,r2,88
8110f48c:	e0bfff17 	ldw	r2,-4(fp)
8110f490:	10c10f15 	stw	r3,1084(r2)
}
8110f494:	0001883a 	nop
8110f498:	e037883a 	mov	sp,fp
8110f49c:	df000017 	ldw	fp,0(sp)
8110f4a0:	dec00104 	addi	sp,sp,4
8110f4a4:	f800283a 	ret

8110f4a8 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110f4a8:	defff904 	addi	sp,sp,-28
8110f4ac:	de00012e 	bgeu	sp,et,8110f4b4 <printErrorTask+0xc>
8110f4b0:	003b68fa 	trap	3
8110f4b4:	dfc00615 	stw	ra,24(sp)
8110f4b8:	df000515 	stw	fp,20(sp)
8110f4bc:	df000504 	addi	fp,sp,20
8110f4c0:	2005883a 	mov	r2,r4
8110f4c4:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110f4c8:	e03ffb15 	stw	zero,-20(fp)
8110f4cc:	e03ffc15 	stw	zero,-16(fp)
8110f4d0:	e03ffd15 	stw	zero,-12(fp)
8110f4d4:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110f4d8:	e0bfff03 	ldbu	r2,-4(fp)
8110f4dc:	100d883a 	mov	r6,r2
8110f4e0:	01604534 	movhi	r5,33044
8110f4e4:	2941e904 	addi	r5,r5,1956
8110f4e8:	e13ffb04 	addi	r4,fp,-20
8110f4ec:	1114ef80 	call	81114ef8 <sprintf>
		debug(fp, buffer);
8110f4f0:	d0a05017 	ldw	r2,-32448(gp)
8110f4f4:	e17ffb04 	addi	r5,fp,-20
8110f4f8:	1009883a 	mov	r4,r2
8110f4fc:	11135480 	call	81113548 <fprintf>
	}
8110f500:	0001883a 	nop
8110f504:	e037883a 	mov	sp,fp
8110f508:	dfc00117 	ldw	ra,4(sp)
8110f50c:	df000017 	ldw	fp,0(sp)
8110f510:	dec00204 	addi	sp,sp,8
8110f514:	f800283a 	ret

8110f518 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110f518:	defffd04 	addi	sp,sp,-12
8110f51c:	de00012e 	bgeu	sp,et,8110f524 <vFailCreateMutexSResources+0xc>
8110f520:	003b68fa 	trap	3
8110f524:	dfc00215 	stw	ra,8(sp)
8110f528:	df000115 	stw	fp,4(sp)
8110f52c:	df000104 	addi	fp,sp,4
8110f530:	2005883a 	mov	r2,r4
8110f534:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110f538:	d0a05017 	ldw	r2,-32448(gp)
8110f53c:	100f883a 	mov	r7,r2
8110f540:	018008c4 	movi	r6,35
8110f544:	01400044 	movi	r5,1
8110f548:	01204534 	movhi	r4,33044
8110f54c:	2101ec04 	addi	r4,r4,1968
8110f550:	1113be40 	call	81113be4 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110f554:	e0bfff03 	ldbu	r2,-4(fp)
8110f558:	1009883a 	mov	r4,r2
8110f55c:	110f4a80 	call	8110f4a8 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f560:	0001883a 	nop
8110f564:	e037883a 	mov	sp,fp
8110f568:	dfc00117 	ldw	ra,4(sp)
8110f56c:	df000017 	ldw	fp,0(sp)
8110f570:	dec00204 	addi	sp,sp,8
8110f574:	f800283a 	ret

8110f578 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110f578:	defffe04 	addi	sp,sp,-8
8110f57c:	de00012e 	bgeu	sp,et,8110f584 <vFailCreateSemaphoreResources+0xc>
8110f580:	003b68fa 	trap	3
8110f584:	dfc00115 	stw	ra,4(sp)
8110f588:	df000015 	stw	fp,0(sp)
8110f58c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110f590:	d0a05017 	ldw	r2,-32448(gp)
8110f594:	100f883a 	mov	r7,r2
8110f598:	01800984 	movi	r6,38
8110f59c:	01400044 	movi	r5,1
8110f5a0:	01204534 	movhi	r4,33044
8110f5a4:	2101f504 	addi	r4,r4,2004
8110f5a8:	1113be40 	call	81113be4 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f5ac:	0001883a 	nop
8110f5b0:	e037883a 	mov	sp,fp
8110f5b4:	dfc00117 	ldw	ra,4(sp)
8110f5b8:	df000017 	ldw	fp,0(sp)
8110f5bc:	dec00204 	addi	sp,sp,8
8110f5c0:	f800283a 	ret

8110f5c4 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110f5c4:	defffe04 	addi	sp,sp,-8
8110f5c8:	de00012e 	bgeu	sp,et,8110f5d0 <vFailTestCriticasParts+0xc>
8110f5cc:	003b68fa 	trap	3
8110f5d0:	dfc00115 	stw	ra,4(sp)
8110f5d4:	df000015 	stw	fp,0(sp)
8110f5d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110f5dc:	d0a05017 	ldw	r2,-32448(gp)
8110f5e0:	100f883a 	mov	r7,r2
8110f5e4:	018007c4 	movi	r6,31
8110f5e8:	01400044 	movi	r5,1
8110f5ec:	01204534 	movhi	r4,33044
8110f5f0:	2101ff04 	addi	r4,r4,2044
8110f5f4:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f5f8:	0001883a 	nop
8110f5fc:	e037883a 	mov	sp,fp
8110f600:	dfc00117 	ldw	ra,4(sp)
8110f604:	df000017 	ldw	fp,0(sp)
8110f608:	dec00204 	addi	sp,sp,8
8110f60c:	f800283a 	ret

8110f610 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110f610:	defffe04 	addi	sp,sp,-8
8110f614:	de00012e 	bgeu	sp,et,8110f61c <vFailSendxSemCommInit+0xc>
8110f618:	003b68fa 	trap	3
8110f61c:	dfc00115 	stw	ra,4(sp)
8110f620:	df000015 	stw	fp,0(sp)
8110f624:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110f628:	d0a05017 	ldw	r2,-32448(gp)
8110f62c:	100f883a 	mov	r7,r2
8110f630:	01800744 	movi	r6,29
8110f634:	01400044 	movi	r5,1
8110f638:	01204534 	movhi	r4,33044
8110f63c:	21020704 	addi	r4,r4,2076
8110f640:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110f644:	d0a05017 	ldw	r2,-32448(gp)
8110f648:	100f883a 	mov	r7,r2
8110f64c:	01800a44 	movi	r6,41
8110f650:	01400044 	movi	r5,1
8110f654:	01204534 	movhi	r4,33044
8110f658:	21020f04 	addi	r4,r4,2108
8110f65c:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f660:	0001883a 	nop
8110f664:	e037883a 	mov	sp,fp
8110f668:	dfc00117 	ldw	ra,4(sp)
8110f66c:	df000017 	ldw	fp,0(sp)
8110f670:	dec00204 	addi	sp,sp,8
8110f674:	f800283a 	ret

8110f678 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110f678:	defffe04 	addi	sp,sp,-8
8110f67c:	de00012e 	bgeu	sp,et,8110f684 <vFailSendPreParsedSemaphore+0xc>
8110f680:	003b68fa 	trap	3
8110f684:	dfc00115 	stw	ra,4(sp)
8110f688:	df000015 	stw	fp,0(sp)
8110f68c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110f690:	d0a05017 	ldw	r2,-32448(gp)
8110f694:	100f883a 	mov	r7,r2
8110f698:	01800904 	movi	r6,36
8110f69c:	01400044 	movi	r5,1
8110f6a0:	01204534 	movhi	r4,33044
8110f6a4:	21021a04 	addi	r4,r4,2152
8110f6a8:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f6ac:	0001883a 	nop
8110f6b0:	e037883a 	mov	sp,fp
8110f6b4:	dfc00117 	ldw	ra,4(sp)
8110f6b8:	df000017 	ldw	fp,0(sp)
8110f6bc:	dec00204 	addi	sp,sp,8
8110f6c0:	f800283a 	ret

8110f6c4 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110f6c4:	defffe04 	addi	sp,sp,-8
8110f6c8:	de00012e 	bgeu	sp,et,8110f6d0 <vFailSendPreAckReceiverSemaphore+0xc>
8110f6cc:	003b68fa 	trap	3
8110f6d0:	dfc00115 	stw	ra,4(sp)
8110f6d4:	df000015 	stw	fp,0(sp)
8110f6d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110f6dc:	d0a05017 	ldw	r2,-32448(gp)
8110f6e0:	100f883a 	mov	r7,r2
8110f6e4:	01800a44 	movi	r6,41
8110f6e8:	01400044 	movi	r5,1
8110f6ec:	01204534 	movhi	r4,33044
8110f6f0:	21022404 	addi	r4,r4,2192
8110f6f4:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f6f8:	0001883a 	nop
8110f6fc:	e037883a 	mov	sp,fp
8110f700:	dfc00117 	ldw	ra,4(sp)
8110f704:	df000017 	ldw	fp,0(sp)
8110f708:	dec00204 	addi	sp,sp,8
8110f70c:	f800283a 	ret

8110f710 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110f710:	defffe04 	addi	sp,sp,-8
8110f714:	de00012e 	bgeu	sp,et,8110f71c <vFailSendPreAckSenderSemaphore+0xc>
8110f718:	003b68fa 	trap	3
8110f71c:	dfc00115 	stw	ra,4(sp)
8110f720:	df000015 	stw	fp,0(sp)
8110f724:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110f728:	d0a05017 	ldw	r2,-32448(gp)
8110f72c:	100f883a 	mov	r7,r2
8110f730:	018009c4 	movi	r6,39
8110f734:	01400044 	movi	r5,1
8110f738:	01204534 	movhi	r4,33044
8110f73c:	21022f04 	addi	r4,r4,2236
8110f740:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f744:	0001883a 	nop
8110f748:	e037883a 	mov	sp,fp
8110f74c:	dfc00117 	ldw	ra,4(sp)
8110f750:	df000017 	ldw	fp,0(sp)
8110f754:	dec00204 	addi	sp,sp,8
8110f758:	f800283a 	ret

8110f75c <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110f75c:	defffe04 	addi	sp,sp,-8
8110f760:	de00012e 	bgeu	sp,et,8110f768 <vFailGetCountSemaphoreSenderTask+0xc>
8110f764:	003b68fa 	trap	3
8110f768:	dfc00115 	stw	ra,4(sp)
8110f76c:	df000015 	stw	fp,0(sp)
8110f770:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110f774:	d0a05017 	ldw	r2,-32448(gp)
8110f778:	100f883a 	mov	r7,r2
8110f77c:	01800a44 	movi	r6,41
8110f780:	01400044 	movi	r5,1
8110f784:	01204534 	movhi	r4,33044
8110f788:	21023904 	addi	r4,r4,2276
8110f78c:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110f790:	d0a05017 	ldw	r2,-32448(gp)
8110f794:	100f883a 	mov	r7,r2
8110f798:	01801104 	movi	r6,68
8110f79c:	01400044 	movi	r5,1
8110f7a0:	01204534 	movhi	r4,33044
8110f7a4:	21024404 	addi	r4,r4,2320
8110f7a8:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f7ac:	0001883a 	nop
8110f7b0:	e037883a 	mov	sp,fp
8110f7b4:	dfc00117 	ldw	ra,4(sp)
8110f7b8:	df000017 	ldw	fp,0(sp)
8110f7bc:	dec00204 	addi	sp,sp,8
8110f7c0:	f800283a 	ret

8110f7c4 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110f7c4:	defffe04 	addi	sp,sp,-8
8110f7c8:	de00012e 	bgeu	sp,et,8110f7d0 <vFailGetMutexSenderTask+0xc>
8110f7cc:	003b68fa 	trap	3
8110f7d0:	dfc00115 	stw	ra,4(sp)
8110f7d4:	df000015 	stw	fp,0(sp)
8110f7d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110f7dc:	d0a05017 	ldw	r2,-32448(gp)
8110f7e0:	100f883a 	mov	r7,r2
8110f7e4:	01800804 	movi	r6,32
8110f7e8:	01400044 	movi	r5,1
8110f7ec:	01204534 	movhi	r4,33044
8110f7f0:	21025604 	addi	r4,r4,2392
8110f7f4:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110f7f8:	d0a05017 	ldw	r2,-32448(gp)
8110f7fc:	100f883a 	mov	r7,r2
8110f800:	01801084 	movi	r6,66
8110f804:	01400044 	movi	r5,1
8110f808:	01204534 	movhi	r4,33044
8110f80c:	21025f04 	addi	r4,r4,2428
8110f810:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f814:	0001883a 	nop
8110f818:	e037883a 	mov	sp,fp
8110f81c:	dfc00117 	ldw	ra,4(sp)
8110f820:	df000017 	ldw	fp,0(sp)
8110f824:	dec00204 	addi	sp,sp,8
8110f828:	f800283a 	ret

8110f82c <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110f82c:	defffe04 	addi	sp,sp,-8
8110f830:	de00012e 	bgeu	sp,et,8110f838 <vFailGetCountSemaphoreReceiverTask+0xc>
8110f834:	003b68fa 	trap	3
8110f838:	dfc00115 	stw	ra,4(sp)
8110f83c:	df000015 	stw	fp,0(sp)
8110f840:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110f844:	d0a05017 	ldw	r2,-32448(gp)
8110f848:	100f883a 	mov	r7,r2
8110f84c:	01800ac4 	movi	r6,43
8110f850:	01400044 	movi	r5,1
8110f854:	01204534 	movhi	r4,33044
8110f858:	21027004 	addi	r4,r4,2496
8110f85c:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110f860:	d0a05017 	ldw	r2,-32448(gp)
8110f864:	100f883a 	mov	r7,r2
8110f868:	01801184 	movi	r6,70
8110f86c:	01400044 	movi	r5,1
8110f870:	01204534 	movhi	r4,33044
8110f874:	21027b04 	addi	r4,r4,2540
8110f878:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f87c:	0001883a 	nop
8110f880:	e037883a 	mov	sp,fp
8110f884:	dfc00117 	ldw	ra,4(sp)
8110f888:	df000017 	ldw	fp,0(sp)
8110f88c:	dec00204 	addi	sp,sp,8
8110f890:	f800283a 	ret

8110f894 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110f894:	defffe04 	addi	sp,sp,-8
8110f898:	de00012e 	bgeu	sp,et,8110f8a0 <vFailGetMutexReceiverTask+0xc>
8110f89c:	003b68fa 	trap	3
8110f8a0:	dfc00115 	stw	ra,4(sp)
8110f8a4:	df000015 	stw	fp,0(sp)
8110f8a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110f8ac:	d0a05017 	ldw	r2,-32448(gp)
8110f8b0:	100f883a 	mov	r7,r2
8110f8b4:	01800884 	movi	r6,34
8110f8b8:	01400044 	movi	r5,1
8110f8bc:	01204534 	movhi	r4,33044
8110f8c0:	21028d04 	addi	r4,r4,2612
8110f8c4:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110f8c8:	d0a05017 	ldw	r2,-32448(gp)
8110f8cc:	100f883a 	mov	r7,r2
8110f8d0:	01801104 	movi	r6,68
8110f8d4:	01400044 	movi	r5,1
8110f8d8:	01204534 	movhi	r4,33044
8110f8dc:	21029604 	addi	r4,r4,2648
8110f8e0:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f8e4:	0001883a 	nop
8110f8e8:	e037883a 	mov	sp,fp
8110f8ec:	dfc00117 	ldw	ra,4(sp)
8110f8f0:	df000017 	ldw	fp,0(sp)
8110f8f4:	dec00204 	addi	sp,sp,8
8110f8f8:	f800283a 	ret

8110f8fc <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110f8fc:	defffe04 	addi	sp,sp,-8
8110f900:	de00012e 	bgeu	sp,et,8110f908 <vFailGetMutexTxUARTSenderTask+0xc>
8110f904:	003b68fa 	trap	3
8110f908:	dfc00115 	stw	ra,4(sp)
8110f90c:	df000015 	stw	fp,0(sp)
8110f910:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110f914:	d0a05017 	ldw	r2,-32448(gp)
8110f918:	100f883a 	mov	r7,r2
8110f91c:	01800984 	movi	r6,38
8110f920:	01400044 	movi	r5,1
8110f924:	01204534 	movhi	r4,33044
8110f928:	2102a804 	addi	r4,r4,2720
8110f92c:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110f930:	d0a05017 	ldw	r2,-32448(gp)
8110f934:	100f883a 	mov	r7,r2
8110f938:	01801044 	movi	r6,65
8110f93c:	01400044 	movi	r5,1
8110f940:	01204534 	movhi	r4,33044
8110f944:	2102b204 	addi	r4,r4,2760
8110f948:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f94c:	0001883a 	nop
8110f950:	e037883a 	mov	sp,fp
8110f954:	dfc00117 	ldw	ra,4(sp)
8110f958:	df000017 	ldw	fp,0(sp)
8110f95c:	dec00204 	addi	sp,sp,8
8110f960:	f800283a 	ret

8110f964 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110f964:	defffe04 	addi	sp,sp,-8
8110f968:	de00012e 	bgeu	sp,et,8110f970 <vFailGetMacRTC+0xc>
8110f96c:	003b68fa 	trap	3
8110f970:	dfc00115 	stw	ra,4(sp)
8110f974:	df000015 	stw	fp,0(sp)
8110f978:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110f97c:	d0a05017 	ldw	r2,-32448(gp)
8110f980:	100f883a 	mov	r7,r2
8110f984:	018003c4 	movi	r6,15
8110f988:	01400044 	movi	r5,1
8110f98c:	01204534 	movhi	r4,33044
8110f990:	2102c304 	addi	r4,r4,2828
8110f994:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f998:	0001883a 	nop
8110f99c:	e037883a 	mov	sp,fp
8110f9a0:	dfc00117 	ldw	ra,4(sp)
8110f9a4:	df000017 	ldw	fp,0(sp)
8110f9a8:	dec00204 	addi	sp,sp,8
8110f9ac:	f800283a 	ret

8110f9b0 <vFailInitialization>:


void vFailInitialization( void )
{
8110f9b0:	defffe04 	addi	sp,sp,-8
8110f9b4:	de00012e 	bgeu	sp,et,8110f9bc <vFailInitialization+0xc>
8110f9b8:	003b68fa 	trap	3
8110f9bc:	dfc00115 	stw	ra,4(sp)
8110f9c0:	df000015 	stw	fp,0(sp)
8110f9c4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110f9c8:	d0a05017 	ldw	r2,-32448(gp)
8110f9cc:	100f883a 	mov	r7,r2
8110f9d0:	01800504 	movi	r6,20
8110f9d4:	01400044 	movi	r5,1
8110f9d8:	01204534 	movhi	r4,33044
8110f9dc:	2102c704 	addi	r4,r4,2844
8110f9e0:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f9e4:	0001883a 	nop
8110f9e8:	e037883a 	mov	sp,fp
8110f9ec:	dfc00117 	ldw	ra,4(sp)
8110f9f0:	df000017 	ldw	fp,0(sp)
8110f9f4:	dec00204 	addi	sp,sp,8
8110f9f8:	f800283a 	ret

8110f9fc <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110f9fc:	defffe04 	addi	sp,sp,-8
8110fa00:	de00012e 	bgeu	sp,et,8110fa08 <vFailReceiverCreate+0xc>
8110fa04:	003b68fa 	trap	3
8110fa08:	dfc00115 	stw	ra,4(sp)
8110fa0c:	df000015 	stw	fp,0(sp)
8110fa10:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110fa14:	d0a05017 	ldw	r2,-32448(gp)
8110fa18:	100f883a 	mov	r7,r2
8110fa1c:	01800484 	movi	r6,18
8110fa20:	01400044 	movi	r5,1
8110fa24:	01204534 	movhi	r4,33044
8110fa28:	2102cd04 	addi	r4,r4,2868
8110fa2c:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fa30:	0001883a 	nop
8110fa34:	e037883a 	mov	sp,fp
8110fa38:	dfc00117 	ldw	ra,4(sp)
8110fa3c:	df000017 	ldw	fp,0(sp)
8110fa40:	dec00204 	addi	sp,sp,8
8110fa44:	f800283a 	ret

8110fa48 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110fa48:	defffe04 	addi	sp,sp,-8
8110fa4c:	de00012e 	bgeu	sp,et,8110fa54 <vFailSenderCreate+0xc>
8110fa50:	003b68fa 	trap	3
8110fa54:	dfc00115 	stw	ra,4(sp)
8110fa58:	df000015 	stw	fp,0(sp)
8110fa5c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110fa60:	d0a05017 	ldw	r2,-32448(gp)
8110fa64:	100f883a 	mov	r7,r2
8110fa68:	01800484 	movi	r6,18
8110fa6c:	01400044 	movi	r5,1
8110fa70:	01204534 	movhi	r4,33044
8110fa74:	2102d204 	addi	r4,r4,2888
8110fa78:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fa7c:	0001883a 	nop
8110fa80:	e037883a 	mov	sp,fp
8110fa84:	dfc00117 	ldw	ra,4(sp)
8110fa88:	df000017 	ldw	fp,0(sp)
8110fa8c:	dec00204 	addi	sp,sp,8
8110fa90:	f800283a 	ret

8110fa94 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110fa94:	defffe04 	addi	sp,sp,-8
8110fa98:	de00012e 	bgeu	sp,et,8110faa0 <vFailDeleteInitialization+0xc>
8110fa9c:	003b68fa 	trap	3
8110faa0:	dfc00115 	stw	ra,4(sp)
8110faa4:	df000015 	stw	fp,0(sp)
8110faa8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110faac:	d0a05017 	ldw	r2,-32448(gp)
8110fab0:	100f883a 	mov	r7,r2
8110fab4:	01800684 	movi	r6,26
8110fab8:	01400044 	movi	r5,1
8110fabc:	01204534 	movhi	r4,33044
8110fac0:	2102d704 	addi	r4,r4,2908
8110fac4:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fac8:	0001883a 	nop
8110facc:	e037883a 	mov	sp,fp
8110fad0:	dfc00117 	ldw	ra,4(sp)
8110fad4:	df000017 	ldw	fp,0(sp)
8110fad8:	dec00204 	addi	sp,sp,8
8110fadc:	f800283a 	ret

8110fae0 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110fae0:	defffe04 	addi	sp,sp,-8
8110fae4:	de00012e 	bgeu	sp,et,8110faec <vFailSetCountSemaphorexBuffer32+0xc>
8110fae8:	003b68fa 	trap	3
8110faec:	dfc00115 	stw	ra,4(sp)
8110faf0:	df000015 	stw	fp,0(sp)
8110faf4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110faf8:	d0a05017 	ldw	r2,-32448(gp)
8110fafc:	100f883a 	mov	r7,r2
8110fb00:	01800a04 	movi	r6,40
8110fb04:	01400044 	movi	r5,1
8110fb08:	01204534 	movhi	r4,33044
8110fb0c:	2102de04 	addi	r4,r4,2936
8110fb10:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110fb14:	d0a05017 	ldw	r2,-32448(gp)
8110fb18:	100f883a 	mov	r7,r2
8110fb1c:	018008c4 	movi	r6,35
8110fb20:	01400044 	movi	r5,1
8110fb24:	01204534 	movhi	r4,33044
8110fb28:	2102e904 	addi	r4,r4,2980
8110fb2c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fb30:	0001883a 	nop
8110fb34:	e037883a 	mov	sp,fp
8110fb38:	dfc00117 	ldw	ra,4(sp)
8110fb3c:	df000017 	ldw	fp,0(sp)
8110fb40:	dec00204 	addi	sp,sp,8
8110fb44:	f800283a 	ret

8110fb48 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110fb48:	defffe04 	addi	sp,sp,-8
8110fb4c:	de00012e 	bgeu	sp,et,8110fb54 <vFailSetCountSemaphorexBuffer64+0xc>
8110fb50:	003b68fa 	trap	3
8110fb54:	dfc00115 	stw	ra,4(sp)
8110fb58:	df000015 	stw	fp,0(sp)
8110fb5c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110fb60:	d0a05017 	ldw	r2,-32448(gp)
8110fb64:	100f883a 	mov	r7,r2
8110fb68:	01800a04 	movi	r6,40
8110fb6c:	01400044 	movi	r5,1
8110fb70:	01204534 	movhi	r4,33044
8110fb74:	2102f204 	addi	r4,r4,3016
8110fb78:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110fb7c:	d0a05017 	ldw	r2,-32448(gp)
8110fb80:	100f883a 	mov	r7,r2
8110fb84:	018008c4 	movi	r6,35
8110fb88:	01400044 	movi	r5,1
8110fb8c:	01204534 	movhi	r4,33044
8110fb90:	2102e904 	addi	r4,r4,2980
8110fb94:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fb98:	0001883a 	nop
8110fb9c:	e037883a 	mov	sp,fp
8110fba0:	dfc00117 	ldw	ra,4(sp)
8110fba4:	df000017 	ldw	fp,0(sp)
8110fba8:	dec00204 	addi	sp,sp,8
8110fbac:	f800283a 	ret

8110fbb0 <vFailSetCountSemaphorexBuffer128>:

/*CRITICAL*/
void vFailSetCountSemaphorexBuffer128( void )
{
8110fbb0:	defffe04 	addi	sp,sp,-8
8110fbb4:	de00012e 	bgeu	sp,et,8110fbbc <vFailSetCountSemaphorexBuffer128+0xc>
8110fbb8:	003b68fa 	trap	3
8110fbbc:	dfc00115 	stw	ra,4(sp)
8110fbc0:	df000015 	stw	fp,0(sp)
8110fbc4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110fbc8:	d0a05017 	ldw	r2,-32448(gp)
8110fbcc:	100f883a 	mov	r7,r2
8110fbd0:	01800a44 	movi	r6,41
8110fbd4:	01400044 	movi	r5,1
8110fbd8:	01204534 	movhi	r4,33044
8110fbdc:	2102fd04 	addi	r4,r4,3060
8110fbe0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110fbe4:	d0a05017 	ldw	r2,-32448(gp)
8110fbe8:	100f883a 	mov	r7,r2
8110fbec:	018008c4 	movi	r6,35
8110fbf0:	01400044 	movi	r5,1
8110fbf4:	01204534 	movhi	r4,33044
8110fbf8:	2102e904 	addi	r4,r4,2980
8110fbfc:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fc00:	0001883a 	nop
8110fc04:	e037883a 	mov	sp,fp
8110fc08:	dfc00117 	ldw	ra,4(sp)
8110fc0c:	df000017 	ldw	fp,0(sp)
8110fc10:	dec00204 	addi	sp,sp,8
8110fc14:	f800283a 	ret

8110fc18 <vFailGetCountSemaphorexBuffer128>:

void vFailGetCountSemaphorexBuffer128( void )
{
8110fc18:	defffe04 	addi	sp,sp,-8
8110fc1c:	de00012e 	bgeu	sp,et,8110fc24 <vFailGetCountSemaphorexBuffer128+0xc>
8110fc20:	003b68fa 	trap	3
8110fc24:	dfc00115 	stw	ra,4(sp)
8110fc28:	df000015 	stw	fp,0(sp)
8110fc2c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer128. (exit)\n");
8110fc30:	d0a05017 	ldw	r2,-32448(gp)
8110fc34:	100f883a 	mov	r7,r2
8110fc38:	01800a44 	movi	r6,41
8110fc3c:	01400044 	movi	r5,1
8110fc40:	01204534 	movhi	r4,33044
8110fc44:	21030804 	addi	r4,r4,3104
8110fc48:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110fc4c:	d0a05017 	ldw	r2,-32448(gp)
8110fc50:	100f883a 	mov	r7,r2
8110fc54:	01800884 	movi	r6,34
8110fc58:	01400044 	movi	r5,1
8110fc5c:	01204534 	movhi	r4,33044
8110fc60:	21031304 	addi	r4,r4,3148
8110fc64:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fc68:	0001883a 	nop
8110fc6c:	e037883a 	mov	sp,fp
8110fc70:	dfc00117 	ldw	ra,4(sp)
8110fc74:	df000017 	ldw	fp,0(sp)
8110fc78:	dec00204 	addi	sp,sp,8
8110fc7c:	f800283a 	ret

8110fc80 <vFailGetCountSemaphorexBuffer64>:

void vFailGetCountSemaphorexBuffer64( void )
{
8110fc80:	defffe04 	addi	sp,sp,-8
8110fc84:	de00012e 	bgeu	sp,et,8110fc8c <vFailGetCountSemaphorexBuffer64+0xc>
8110fc88:	003b68fa 	trap	3
8110fc8c:	dfc00115 	stw	ra,4(sp)
8110fc90:	df000015 	stw	fp,0(sp)
8110fc94:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer64. (exit)\n");
8110fc98:	d0a05017 	ldw	r2,-32448(gp)
8110fc9c:	100f883a 	mov	r7,r2
8110fca0:	01800a04 	movi	r6,40
8110fca4:	01400044 	movi	r5,1
8110fca8:	01204534 	movhi	r4,33044
8110fcac:	21031c04 	addi	r4,r4,3184
8110fcb0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110fcb4:	d0a05017 	ldw	r2,-32448(gp)
8110fcb8:	100f883a 	mov	r7,r2
8110fcbc:	01800884 	movi	r6,34
8110fcc0:	01400044 	movi	r5,1
8110fcc4:	01204534 	movhi	r4,33044
8110fcc8:	21031304 	addi	r4,r4,3148
8110fccc:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fcd0:	0001883a 	nop
8110fcd4:	e037883a 	mov	sp,fp
8110fcd8:	dfc00117 	ldw	ra,4(sp)
8110fcdc:	df000017 	ldw	fp,0(sp)
8110fce0:	dec00204 	addi	sp,sp,8
8110fce4:	f800283a 	ret

8110fce8 <vFailGetCountSemaphorexBuffer32>:

void vFailGetCountSemaphorexBuffer32( void )
{
8110fce8:	defffe04 	addi	sp,sp,-8
8110fcec:	de00012e 	bgeu	sp,et,8110fcf4 <vFailGetCountSemaphorexBuffer32+0xc>
8110fcf0:	003b68fa 	trap	3
8110fcf4:	dfc00115 	stw	ra,4(sp)
8110fcf8:	df000015 	stw	fp,0(sp)
8110fcfc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer32. (exit)\n");
8110fd00:	d0a05017 	ldw	r2,-32448(gp)
8110fd04:	100f883a 	mov	r7,r2
8110fd08:	01800a04 	movi	r6,40
8110fd0c:	01400044 	movi	r5,1
8110fd10:	01204534 	movhi	r4,33044
8110fd14:	21032704 	addi	r4,r4,3228
8110fd18:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110fd1c:	d0a05017 	ldw	r2,-32448(gp)
8110fd20:	100f883a 	mov	r7,r2
8110fd24:	01800884 	movi	r6,34
8110fd28:	01400044 	movi	r5,1
8110fd2c:	01204534 	movhi	r4,33044
8110fd30:	21031304 	addi	r4,r4,3148
8110fd34:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fd38:	0001883a 	nop
8110fd3c:	e037883a 	mov	sp,fp
8110fd40:	dfc00117 	ldw	ra,4(sp)
8110fd44:	df000017 	ldw	fp,0(sp)
8110fd48:	dec00204 	addi	sp,sp,8
8110fd4c:	f800283a 	ret

8110fd50 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110fd50:	defffe04 	addi	sp,sp,-8
8110fd54:	de00012e 	bgeu	sp,et,8110fd5c <vFailFoundBufferRetransmission+0xc>
8110fd58:	003b68fa 	trap	3
8110fd5c:	dfc00115 	stw	ra,4(sp)
8110fd60:	df000015 	stw	fp,0(sp)
8110fd64:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"Warning: Incomming Ack id doesn't exists.\n");
8110fd68:	d0a05017 	ldw	r2,-32448(gp)
8110fd6c:	100f883a 	mov	r7,r2
8110fd70:	01800a84 	movi	r6,42
8110fd74:	01400044 	movi	r5,1
8110fd78:	01204534 	movhi	r4,33044
8110fd7c:	21033204 	addi	r4,r4,3272
8110fd80:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(In Ack Handler)\n");
8110fd84:	d0a05017 	ldw	r2,-32448(gp)
8110fd88:	100f883a 	mov	r7,r2
8110fd8c:	01801204 	movi	r6,72
8110fd90:	01400044 	movi	r5,1
8110fd94:	01204534 	movhi	r4,33044
8110fd98:	21033d04 	addi	r4,r4,3316
8110fd9c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fda0:	0001883a 	nop
8110fda4:	e037883a 	mov	sp,fp
8110fda8:	dfc00117 	ldw	ra,4(sp)
8110fdac:	df000017 	ldw	fp,0(sp)
8110fdb0:	dec00204 	addi	sp,sp,8
8110fdb4:	f800283a 	ret

8110fdb8 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110fdb8:	defffe04 	addi	sp,sp,-8
8110fdbc:	de00012e 	bgeu	sp,et,8110fdc4 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110fdc0:	003b68fa 	trap	3
8110fdc4:	dfc00115 	stw	ra,4(sp)
8110fdc8:	df000015 	stw	fp,0(sp)
8110fdcc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110fdd0:	d0a05017 	ldw	r2,-32448(gp)
8110fdd4:	100f883a 	mov	r7,r2
8110fdd8:	01800b84 	movi	r6,46
8110fddc:	01400044 	movi	r5,1
8110fde0:	01204534 	movhi	r4,33044
8110fde4:	21035004 	addi	r4,r4,3392
8110fde8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110fdec:	d0a05017 	ldw	r2,-32448(gp)
8110fdf0:	100f883a 	mov	r7,r2
8110fdf4:	018010c4 	movi	r6,67
8110fdf8:	01400044 	movi	r5,1
8110fdfc:	01204534 	movhi	r4,33044
8110fe00:	21035c04 	addi	r4,r4,3440
8110fe04:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fe08:	0001883a 	nop
8110fe0c:	e037883a 	mov	sp,fp
8110fe10:	dfc00117 	ldw	ra,4(sp)
8110fe14:	df000017 	ldw	fp,0(sp)
8110fe18:	dec00204 	addi	sp,sp,8
8110fe1c:	f800283a 	ret

8110fe20 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110fe20:	defffe04 	addi	sp,sp,-8
8110fe24:	de00012e 	bgeu	sp,et,8110fe2c <vFailGetxMutexPreParsedParserRxTask+0xc>
8110fe28:	003b68fa 	trap	3
8110fe2c:	dfc00115 	stw	ra,4(sp)
8110fe30:	df000015 	stw	fp,0(sp)
8110fe34:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110fe38:	d0a05017 	ldw	r2,-32448(gp)
8110fe3c:	100f883a 	mov	r7,r2
8110fe40:	01800b04 	movi	r6,44
8110fe44:	01400044 	movi	r5,1
8110fe48:	01204534 	movhi	r4,33044
8110fe4c:	21036d04 	addi	r4,r4,3508
8110fe50:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110fe54:	d0a05017 	ldw	r2,-32448(gp)
8110fe58:	100f883a 	mov	r7,r2
8110fe5c:	01800fc4 	movi	r6,63
8110fe60:	01400044 	movi	r5,1
8110fe64:	01204534 	movhi	r4,33044
8110fe68:	21037904 	addi	r4,r4,3556
8110fe6c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fe70:	0001883a 	nop
8110fe74:	e037883a 	mov	sp,fp
8110fe78:	dfc00117 	ldw	ra,4(sp)
8110fe7c:	df000017 	ldw	fp,0(sp)
8110fe80:	dec00204 	addi	sp,sp,8
8110fe84:	f800283a 	ret

8110fe88 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110fe88:	defffe04 	addi	sp,sp,-8
8110fe8c:	de00012e 	bgeu	sp,et,8110fe94 <vNoContentInPreParsedBuffer+0xc>
8110fe90:	003b68fa 	trap	3
8110fe94:	dfc00115 	stw	ra,4(sp)
8110fe98:	df000015 	stw	fp,0(sp)
8110fe9c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110fea0:	d0a05017 	ldw	r2,-32448(gp)
8110fea4:	100f883a 	mov	r7,r2
8110fea8:	01800904 	movi	r6,36
8110feac:	01400044 	movi	r5,1
8110feb0:	01204534 	movhi	r4,33044
8110feb4:	21038904 	addi	r4,r4,3620
8110feb8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110febc:	d0a05017 	ldw	r2,-32448(gp)
8110fec0:	100f883a 	mov	r7,r2
8110fec4:	01801684 	movi	r6,90
8110fec8:	01400044 	movi	r5,1
8110fecc:	01204534 	movhi	r4,33044
8110fed0:	21039304 	addi	r4,r4,3660
8110fed4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fed8:	0001883a 	nop
8110fedc:	e037883a 	mov	sp,fp
8110fee0:	dfc00117 	ldw	ra,4(sp)
8110fee4:	df000017 	ldw	fp,0(sp)
8110fee8:	dec00204 	addi	sp,sp,8
8110feec:	f800283a 	ret

8110fef0 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110fef0:	defffe04 	addi	sp,sp,-8
8110fef4:	de00012e 	bgeu	sp,et,8110fefc <vCouldNotSendEthConfUART+0xc>
8110fef8:	003b68fa 	trap	3
8110fefc:	dfc00115 	stw	ra,4(sp)
8110ff00:	df000015 	stw	fp,0(sp)
8110ff04:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110ff08:	d0a05017 	ldw	r2,-32448(gp)
8110ff0c:	100f883a 	mov	r7,r2
8110ff10:	01800844 	movi	r6,33
8110ff14:	01400044 	movi	r5,1
8110ff18:	01204534 	movhi	r4,33044
8110ff1c:	2103aa04 	addi	r4,r4,3752
8110ff20:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110ff24:	d0a05017 	ldw	r2,-32448(gp)
8110ff28:	100f883a 	mov	r7,r2
8110ff2c:	01801784 	movi	r6,94
8110ff30:	01400044 	movi	r5,1
8110ff34:	01204534 	movhi	r4,33044
8110ff38:	2103b304 	addi	r4,r4,3788
8110ff3c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ff40:	0001883a 	nop
8110ff44:	e037883a 	mov	sp,fp
8110ff48:	dfc00117 	ldw	ra,4(sp)
8110ff4c:	df000017 	ldw	fp,0(sp)
8110ff50:	dec00204 	addi	sp,sp,8
8110ff54:	f800283a 	ret

8110ff58 <vFailSendNack>:

void vFailSendNack( void )
{
8110ff58:	defffe04 	addi	sp,sp,-8
8110ff5c:	de00012e 	bgeu	sp,et,8110ff64 <vFailSendNack+0xc>
8110ff60:	003b68fa 	trap	3
8110ff64:	dfc00115 	stw	ra,4(sp)
8110ff68:	df000015 	stw	fp,0(sp)
8110ff6c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110ff70:	d0a05017 	ldw	r2,-32448(gp)
8110ff74:	100f883a 	mov	r7,r2
8110ff78:	01800584 	movi	r6,22
8110ff7c:	01400044 	movi	r5,1
8110ff80:	01204534 	movhi	r4,33044
8110ff84:	2103cb04 	addi	r4,r4,3884
8110ff88:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110ff8c:	d0a05017 	ldw	r2,-32448(gp)
8110ff90:	100f883a 	mov	r7,r2
8110ff94:	01800a84 	movi	r6,42
8110ff98:	01400044 	movi	r5,1
8110ff9c:	01204534 	movhi	r4,33044
8110ffa0:	2103d104 	addi	r4,r4,3908
8110ffa4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ffa8:	0001883a 	nop
8110ffac:	e037883a 	mov	sp,fp
8110ffb0:	dfc00117 	ldw	ra,4(sp)
8110ffb4:	df000017 	ldw	fp,0(sp)
8110ffb8:	dec00204 	addi	sp,sp,8
8110ffbc:	f800283a 	ret

8110ffc0 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110ffc0:	defffe04 	addi	sp,sp,-8
8110ffc4:	de00012e 	bgeu	sp,et,8110ffcc <vFailSetPreAckSenderBuffer+0xc>
8110ffc8:	003b68fa 	trap	3
8110ffcc:	dfc00115 	stw	ra,4(sp)
8110ffd0:	df000015 	stw	fp,0(sp)
8110ffd4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110ffd8:	d0a05017 	ldw	r2,-32448(gp)
8110ffdc:	100f883a 	mov	r7,r2
8110ffe0:	018008c4 	movi	r6,35
8110ffe4:	01400044 	movi	r5,1
8110ffe8:	01204534 	movhi	r4,33044
8110ffec:	2103dc04 	addi	r4,r4,3952
8110fff0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110fff4:	d0a05017 	ldw	r2,-32448(gp)
8110fff8:	100f883a 	mov	r7,r2
8110fffc:	01801584 	movi	r6,86
81110000:	01400044 	movi	r5,1
81110004:	01204534 	movhi	r4,33044
81110008:	2103e504 	addi	r4,r4,3988
8111000c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110010:	0001883a 	nop
81110014:	e037883a 	mov	sp,fp
81110018:	dfc00117 	ldw	ra,4(sp)
8111001c:	df000017 	ldw	fp,0(sp)
81110020:	dec00204 	addi	sp,sp,8
81110024:	f800283a 	ret

81110028 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
81110028:	defffe04 	addi	sp,sp,-8
8111002c:	de00012e 	bgeu	sp,et,81110034 <vFailSetPreParsedBuffer+0xc>
81110030:	003b68fa 	trap	3
81110034:	dfc00115 	stw	ra,4(sp)
81110038:	df000015 	stw	fp,0(sp)
8111003c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
81110040:	d0a05017 	ldw	r2,-32448(gp)
81110044:	100f883a 	mov	r7,r2
81110048:	01800804 	movi	r6,32
8111004c:	01400044 	movi	r5,1
81110050:	01204534 	movhi	r4,33044
81110054:	2103fb04 	addi	r4,r4,4076
81110058:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8111005c:	d0a05017 	ldw	r2,-32448(gp)
81110060:	100f883a 	mov	r7,r2
81110064:	018013c4 	movi	r6,79
81110068:	01400044 	movi	r5,1
8111006c:	01204534 	movhi	r4,33044
81110070:	21040404 	addi	r4,r4,4112
81110074:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110078:	0001883a 	nop
8111007c:	e037883a 	mov	sp,fp
81110080:	dfc00117 	ldw	ra,4(sp)
81110084:	df000017 	ldw	fp,0(sp)
81110088:	dec00204 	addi	sp,sp,8
8111008c:	f800283a 	ret

81110090 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
81110090:	defffe04 	addi	sp,sp,-8
81110094:	de00012e 	bgeu	sp,et,8111009c <vFailSetPreAckReceiverBuffer+0xc>
81110098:	003b68fa 	trap	3
8111009c:	dfc00115 	stw	ra,4(sp)
811100a0:	df000015 	stw	fp,0(sp)
811100a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
811100a8:	d0a05017 	ldw	r2,-32448(gp)
811100ac:	100f883a 	mov	r7,r2
811100b0:	01800944 	movi	r6,37
811100b4:	01400044 	movi	r5,1
811100b8:	01204534 	movhi	r4,33044
811100bc:	21041804 	addi	r4,r4,4192
811100c0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
811100c4:	d0a05017 	ldw	r2,-32448(gp)
811100c8:	100f883a 	mov	r7,r2
811100cc:	018015c4 	movi	r6,87
811100d0:	01400044 	movi	r5,1
811100d4:	01204534 	movhi	r4,33044
811100d8:	21042204 	addi	r4,r4,4232
811100dc:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811100e0:	0001883a 	nop
811100e4:	e037883a 	mov	sp,fp
811100e8:	dfc00117 	ldw	ra,4(sp)
811100ec:	df000017 	ldw	fp,0(sp)
811100f0:	dec00204 	addi	sp,sp,8
811100f4:	f800283a 	ret

811100f8 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
811100f8:	defffe04 	addi	sp,sp,-8
811100fc:	de00012e 	bgeu	sp,et,81110104 <vFailParserCommTaskCreate+0xc>
81110100:	003b68fa 	trap	3
81110104:	dfc00115 	stw	ra,4(sp)
81110108:	df000015 	stw	fp,0(sp)
8111010c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
81110110:	d0a05017 	ldw	r2,-32448(gp)
81110114:	100f883a 	mov	r7,r2
81110118:	01800684 	movi	r6,26
8111011c:	01400044 	movi	r5,1
81110120:	01204534 	movhi	r4,33044
81110124:	21043804 	addi	r4,r4,4320
81110128:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8111012c:	0001883a 	nop
81110130:	e037883a 	mov	sp,fp
81110134:	dfc00117 	ldw	ra,4(sp)
81110138:	df000017 	ldw	fp,0(sp)
8111013c:	dec00204 	addi	sp,sp,8
81110140:	f800283a 	ret

81110144 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
81110144:	defffe04 	addi	sp,sp,-8
81110148:	de00012e 	bgeu	sp,et,81110150 <vFailInAckHandlerTaskCreate+0xc>
8111014c:	003b68fa 	trap	3
81110150:	dfc00115 	stw	ra,4(sp)
81110154:	df000015 	stw	fp,0(sp)
81110158:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8111015c:	d0a05017 	ldw	r2,-32448(gp)
81110160:	100f883a 	mov	r7,r2
81110164:	01800704 	movi	r6,28
81110168:	01400044 	movi	r5,1
8111016c:	01204534 	movhi	r4,33044
81110170:	21043f04 	addi	r4,r4,4348
81110174:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
81110178:	0001883a 	nop
8111017c:	e037883a 	mov	sp,fp
81110180:	dfc00117 	ldw	ra,4(sp)
81110184:	df000017 	ldw	fp,0(sp)
81110188:	dec00204 	addi	sp,sp,8
8111018c:	f800283a 	ret

81110190 <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
81110190:	defffe04 	addi	sp,sp,-8
81110194:	de00012e 	bgeu	sp,et,8111019c <vFailOutAckHandlerTaskCreate+0xc>
81110198:	003b68fa 	trap	3
8111019c:	dfc00115 	stw	ra,4(sp)
811101a0:	df000015 	stw	fp,0(sp)
811101a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
811101a8:	d0a05017 	ldw	r2,-32448(gp)
811101ac:	100f883a 	mov	r7,r2
811101b0:	01800704 	movi	r6,28
811101b4:	01400044 	movi	r5,1
811101b8:	01204534 	movhi	r4,33044
811101bc:	21043f04 	addi	r4,r4,4348
811101c0:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
811101c4:	0001883a 	nop
811101c8:	e037883a 	mov	sp,fp
811101cc:	dfc00117 	ldw	ra,4(sp)
811101d0:	df000017 	ldw	fp,0(sp)
811101d4:	dec00204 	addi	sp,sp,8
811101d8:	f800283a 	ret

811101dc <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
811101dc:	defffe04 	addi	sp,sp,-8
811101e0:	de00012e 	bgeu	sp,et,811101e8 <vFailCreateTimerRetransmisison+0xc>
811101e4:	003b68fa 	trap	3
811101e8:	dfc00115 	stw	ra,4(sp)
811101ec:	df000015 	stw	fp,0(sp)
811101f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
811101f4:	d0a05017 	ldw	r2,-32448(gp)
811101f8:	100f883a 	mov	r7,r2
811101fc:	018007c4 	movi	r6,31
81110200:	01400044 	movi	r5,1
81110204:	01204534 	movhi	r4,33044
81110208:	21044704 	addi	r4,r4,4380
8111020c:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
81110210:	0001883a 	nop
81110214:	e037883a 	mov	sp,fp
81110218:	dfc00117 	ldw	ra,4(sp)
8111021c:	df000017 	ldw	fp,0(sp)
81110220:	dec00204 	addi	sp,sp,8
81110224:	f800283a 	ret

81110228 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
81110228:	defffe04 	addi	sp,sp,-8
8111022c:	de00012e 	bgeu	sp,et,81110234 <vCouldNotCheckBufferTimeOutFunction+0xc>
81110230:	003b68fa 	trap	3
81110234:	dfc00115 	stw	ra,4(sp)
81110238:	df000015 	stw	fp,0(sp)
8111023c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
81110240:	d0a05017 	ldw	r2,-32448(gp)
81110244:	100f883a 	mov	r7,r2
81110248:	01800904 	movi	r6,36
8111024c:	01400044 	movi	r5,1
81110250:	01204534 	movhi	r4,33044
81110254:	21044f04 	addi	r4,r4,4412
81110258:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8111025c:	0001883a 	nop
81110260:	e037883a 	mov	sp,fp
81110264:	dfc00117 	ldw	ra,4(sp)
81110268:	df000017 	ldw	fp,0(sp)
8111026c:	dec00204 	addi	sp,sp,8
81110270:	f800283a 	ret

81110274 <vFailTimeoutCheckerTaskCreate>:

/* Critico */
void vFailTimeoutCheckerTaskCreate( void )
{
81110274:	defffe04 	addi	sp,sp,-8
81110278:	de00012e 	bgeu	sp,et,81110280 <vFailTimeoutCheckerTaskCreate+0xc>
8111027c:	003b68fa 	trap	3
81110280:	dfc00115 	stw	ra,4(sp)
81110284:	df000015 	stw	fp,0(sp)
81110288:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate (Critico)\n");
8111028c:	d0a05017 	ldw	r2,-32448(gp)
81110290:	100f883a 	mov	r7,r2
81110294:	01800a04 	movi	r6,40
81110298:	01400044 	movi	r5,1
8111029c:	01204534 	movhi	r4,33044
811102a0:	21045904 	addi	r4,r4,4452
811102a4:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
811102a8:	0001883a 	nop
811102ac:	e037883a 	mov	sp,fp
811102b0:	dfc00117 	ldw	ra,4(sp)
811102b4:	df000017 	ldw	fp,0(sp)
811102b8:	dec00204 	addi	sp,sp,8
811102bc:	f800283a 	ret

811102c0 <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
811102c0:	defffe04 	addi	sp,sp,-8
811102c4:	de00012e 	bgeu	sp,et,811102cc <vFailGetBlockingSemTimeoutTask+0xc>
811102c8:	003b68fa 	trap	3
811102cc:	dfc00115 	stw	ra,4(sp)
811102d0:	df000015 	stw	fp,0(sp)
811102d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
811102d8:	d0a05017 	ldw	r2,-32448(gp)
811102dc:	100f883a 	mov	r7,r2
811102e0:	018009c4 	movi	r6,39
811102e4:	01400044 	movi	r5,1
811102e8:	01204534 	movhi	r4,33044
811102ec:	21046404 	addi	r4,r4,4496
811102f0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
811102f4:	d0a05017 	ldw	r2,-32448(gp)
811102f8:	100f883a 	mov	r7,r2
811102fc:	01800cc4 	movi	r6,51
81110300:	01400044 	movi	r5,1
81110304:	01204534 	movhi	r4,33044
81110308:	21046e04 	addi	r4,r4,4536
8111030c:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110310:	0001883a 	nop
81110314:	e037883a 	mov	sp,fp
81110318:	dfc00117 	ldw	ra,4(sp)
8111031c:	df000017 	ldw	fp,0(sp)
81110320:	dec00204 	addi	sp,sp,8
81110324:	f800283a 	ret

81110328 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
81110328:	defffe04 	addi	sp,sp,-8
8111032c:	de00012e 	bgeu	sp,et,81110334 <vFailPostBlockingSemTimeoutTask+0xc>
81110330:	003b68fa 	trap	3
81110334:	dfc00115 	stw	ra,4(sp)
81110338:	df000015 	stw	fp,0(sp)
8111033c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
81110340:	d0a05017 	ldw	r2,-32448(gp)
81110344:	100f883a 	mov	r7,r2
81110348:	01800a04 	movi	r6,40
8111034c:	01400044 	movi	r5,1
81110350:	01204534 	movhi	r4,33044
81110354:	21047b04 	addi	r4,r4,4588
81110358:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8111035c:	d0a05017 	ldw	r2,-32448(gp)
81110360:	100f883a 	mov	r7,r2
81110364:	01800c84 	movi	r6,50
81110368:	01400044 	movi	r5,1
8111036c:	01204534 	movhi	r4,33044
81110370:	21048604 	addi	r4,r4,4632
81110374:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110378:	0001883a 	nop
8111037c:	e037883a 	mov	sp,fp
81110380:	dfc00117 	ldw	ra,4(sp)
81110384:	df000017 	ldw	fp,0(sp)
81110388:	dec00204 	addi	sp,sp,8
8111038c:	f800283a 	ret

81110390 <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
81110390:	defffe04 	addi	sp,sp,-8
81110394:	de00012e 	bgeu	sp,et,8111039c <vFailCouldNotRetransmitTimeoutTask+0xc>
81110398:	003b68fa 	trap	3
8111039c:	dfc00115 	stw	ra,4(sp)
811103a0:	df000015 	stw	fp,0(sp)
811103a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
811103a8:	d0a05017 	ldw	r2,-32448(gp)
811103ac:	100f883a 	mov	r7,r2
811103b0:	01800ac4 	movi	r6,43
811103b4:	01400044 	movi	r5,1
811103b8:	01204534 	movhi	r4,33044
811103bc:	21049304 	addi	r4,r4,4684
811103c0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
811103c4:	d0a05017 	ldw	r2,-32448(gp)
811103c8:	100f883a 	mov	r7,r2
811103cc:	01801644 	movi	r6,89
811103d0:	01400044 	movi	r5,1
811103d4:	01204534 	movhi	r4,33044
811103d8:	21049e04 	addi	r4,r4,4728
811103dc:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811103e0:	0001883a 	nop
811103e4:	e037883a 	mov	sp,fp
811103e8:	dfc00117 	ldw	ra,4(sp)
811103ec:	df000017 	ldw	fp,0(sp)
811103f0:	dec00204 	addi	sp,sp,8
811103f4:	f800283a 	ret

811103f8 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
811103f8:	defffe04 	addi	sp,sp,-8
811103fc:	de00012e 	bgeu	sp,et,81110404 <vCouldNotRetransmitB32TimeoutTask+0xc>
81110400:	003b68fa 	trap	3
81110404:	dfc00115 	stw	ra,4(sp)
81110408:	df000015 	stw	fp,0(sp)
8111040c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
81110410:	d0a05017 	ldw	r2,-32448(gp)
81110414:	100f883a 	mov	r7,r2
81110418:	01800a84 	movi	r6,42
8111041c:	01400044 	movi	r5,1
81110420:	01204534 	movhi	r4,33044
81110424:	2104b504 	addi	r4,r4,4820
81110428:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8111042c:	d0a05017 	ldw	r2,-32448(gp)
81110430:	100f883a 	mov	r7,r2
81110434:	01801444 	movi	r6,81
81110438:	01400044 	movi	r5,1
8111043c:	01204534 	movhi	r4,33044
81110440:	2104c004 	addi	r4,r4,4864
81110444:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110448:	0001883a 	nop
8111044c:	e037883a 	mov	sp,fp
81110450:	dfc00117 	ldw	ra,4(sp)
81110454:	df000017 	ldw	fp,0(sp)
81110458:	dec00204 	addi	sp,sp,8
8111045c:	f800283a 	ret

81110460 <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
81110460:	defffe04 	addi	sp,sp,-8
81110464:	de00012e 	bgeu	sp,et,8111046c <vCouldNotRetransmitB64TimeoutTask+0xc>
81110468:	003b68fa 	trap	3
8111046c:	dfc00115 	stw	ra,4(sp)
81110470:	df000015 	stw	fp,0(sp)
81110474:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
81110478:	d0a05017 	ldw	r2,-32448(gp)
8111047c:	100f883a 	mov	r7,r2
81110480:	01800a84 	movi	r6,42
81110484:	01400044 	movi	r5,1
81110488:	01204534 	movhi	r4,33044
8111048c:	2104d504 	addi	r4,r4,4948
81110490:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
81110494:	d0a05017 	ldw	r2,-32448(gp)
81110498:	100f883a 	mov	r7,r2
8111049c:	01801444 	movi	r6,81
811104a0:	01400044 	movi	r5,1
811104a4:	01204534 	movhi	r4,33044
811104a8:	2104e004 	addi	r4,r4,4992
811104ac:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811104b0:	0001883a 	nop
811104b4:	e037883a 	mov	sp,fp
811104b8:	dfc00117 	ldw	ra,4(sp)
811104bc:	df000017 	ldw	fp,0(sp)
811104c0:	dec00204 	addi	sp,sp,8
811104c4:	f800283a 	ret

811104c8 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
811104c8:	defffe04 	addi	sp,sp,-8
811104cc:	de00012e 	bgeu	sp,et,811104d4 <vCouldNotRetransmitB128TimeoutTask+0xc>
811104d0:	003b68fa 	trap	3
811104d4:	dfc00115 	stw	ra,4(sp)
811104d8:	df000015 	stw	fp,0(sp)
811104dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
811104e0:	d0a05017 	ldw	r2,-32448(gp)
811104e4:	100f883a 	mov	r7,r2
811104e8:	01800ac4 	movi	r6,43
811104ec:	01400044 	movi	r5,1
811104f0:	01204534 	movhi	r4,33044
811104f4:	2104f504 	addi	r4,r4,5076
811104f8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
811104fc:	d0a05017 	ldw	r2,-32448(gp)
81110500:	100f883a 	mov	r7,r2
81110504:	01801484 	movi	r6,82
81110508:	01400044 	movi	r5,1
8111050c:	01204534 	movhi	r4,33044
81110510:	21050004 	addi	r4,r4,5120
81110514:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110518:	0001883a 	nop
8111051c:	e037883a 	mov	sp,fp
81110520:	dfc00117 	ldw	ra,4(sp)
81110524:	df000017 	ldw	fp,0(sp)
81110528:	dec00204 	addi	sp,sp,8
8111052c:	f800283a 	ret

81110530 <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
81110530:	defffe04 	addi	sp,sp,-8
81110534:	de00012e 	bgeu	sp,et,8111053c <vFailStartTimerRetransmission+0xc>
81110538:	003b68fa 	trap	3
8111053c:	dfc00115 	stw	ra,4(sp)
81110540:	df000015 	stw	fp,0(sp)
81110544:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
81110548:	d0a05017 	ldw	r2,-32448(gp)
8111054c:	100f883a 	mov	r7,r2
81110550:	01800984 	movi	r6,38
81110554:	01400044 	movi	r5,1
81110558:	01204534 	movhi	r4,33044
8111055c:	21051504 	addi	r4,r4,5204
81110560:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
81110564:	d0a05017 	ldw	r2,-32448(gp)
81110568:	100f883a 	mov	r7,r2
8111056c:	01800d44 	movi	r6,53
81110570:	01400044 	movi	r5,1
81110574:	01204534 	movhi	r4,33044
81110578:	21051f04 	addi	r4,r4,5244
8111057c:	1113be40 	call	81113be4 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110580:	0001883a 	nop
81110584:	e037883a 	mov	sp,fp
81110588:	dfc00117 	ldw	ra,4(sp)
8111058c:	df000017 	ldw	fp,0(sp)
81110590:	dec00204 	addi	sp,sp,8
81110594:	f800283a 	ret

81110598 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
81110598:	defffe04 	addi	sp,sp,-8
8111059c:	de00012e 	bgeu	sp,et,811105a4 <vCouldNotSendTurnOff+0xc>
811105a0:	003b68fa 	trap	3
811105a4:	dfc00115 	stw	ra,4(sp)
811105a8:	df000015 	stw	fp,0(sp)
811105ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
811105b0:	d0a05017 	ldw	r2,-32448(gp)
811105b4:	100f883a 	mov	r7,r2
811105b8:	01800744 	movi	r6,29
811105bc:	01400044 	movi	r5,1
811105c0:	01204534 	movhi	r4,33044
811105c4:	21052d04 	addi	r4,r4,5300
811105c8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
811105cc:	d0a05017 	ldw	r2,-32448(gp)
811105d0:	100f883a 	mov	r7,r2
811105d4:	01800984 	movi	r6,38
811105d8:	01400044 	movi	r5,1
811105dc:	01204534 	movhi	r4,33044
811105e0:	21053504 	addi	r4,r4,5332
811105e4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811105e8:	0001883a 	nop
811105ec:	e037883a 	mov	sp,fp
811105f0:	dfc00117 	ldw	ra,4(sp)
811105f4:	df000017 	ldw	fp,0(sp)
811105f8:	dec00204 	addi	sp,sp,8
811105fc:	f800283a 	ret

81110600 <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
81110600:	defffe04 	addi	sp,sp,-8
81110604:	de00012e 	bgeu	sp,et,8111060c <vCouldNotSendLog+0xc>
81110608:	003b68fa 	trap	3
8111060c:	dfc00115 	stw	ra,4(sp)
81110610:	df000015 	stw	fp,0(sp)
81110614:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
81110618:	d0a05017 	ldw	r2,-32448(gp)
8111061c:	100f883a 	mov	r7,r2
81110620:	01800644 	movi	r6,25
81110624:	01400044 	movi	r5,1
81110628:	01204534 	movhi	r4,33044
8111062c:	21053f04 	addi	r4,r4,5372
81110630:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
81110634:	d0a05017 	ldw	r2,-32448(gp)
81110638:	100f883a 	mov	r7,r2
8111063c:	018008c4 	movi	r6,35
81110640:	01400044 	movi	r5,1
81110644:	01204534 	movhi	r4,33044
81110648:	21054604 	addi	r4,r4,5400
8111064c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110650:	0001883a 	nop
81110654:	e037883a 	mov	sp,fp
81110658:	dfc00117 	ldw	ra,4(sp)
8111065c:	df000017 	ldw	fp,0(sp)
81110660:	dec00204 	addi	sp,sp,8
81110664:	f800283a 	ret

81110668 <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
81110668:	defffd04 	addi	sp,sp,-12
8111066c:	de00012e 	bgeu	sp,et,81110674 <vCouldNotSendTMPusCommand+0xc>
81110670:	003b68fa 	trap	3
81110674:	dfc00215 	stw	ra,8(sp)
81110678:	df000115 	stw	fp,4(sp)
8111067c:	df000104 	addi	fp,sp,4
81110680:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
81110684:	d0a05017 	ldw	r2,-32448(gp)
81110688:	100f883a 	mov	r7,r2
8111068c:	01800884 	movi	r6,34
81110690:	01400044 	movi	r5,1
81110694:	01204534 	movhi	r4,33044
81110698:	21054f04 	addi	r4,r4,5436
8111069c:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
811106a0:	d0a05017 	ldw	r2,-32448(gp)
811106a4:	100f883a 	mov	r7,r2
811106a8:	01800ac4 	movi	r6,43
811106ac:	01400044 	movi	r5,1
811106b0:	01204534 	movhi	r4,33044
811106b4:	21055804 	addi	r4,r4,5472
811106b8:	1113be40 	call	81113be4 <fwrite>
		debug(fp,"cData");
811106bc:	d0a05017 	ldw	r2,-32448(gp)
811106c0:	100f883a 	mov	r7,r2
811106c4:	01800144 	movi	r6,5
811106c8:	01400044 	movi	r5,1
811106cc:	01204534 	movhi	r4,33044
811106d0:	21056304 	addi	r4,r4,5516
811106d4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811106d8:	0001883a 	nop
811106dc:	e037883a 	mov	sp,fp
811106e0:	dfc00117 	ldw	ra,4(sp)
811106e4:	df000017 	ldw	fp,0(sp)
811106e8:	dec00204 	addi	sp,sp,8
811106ec:	f800283a 	ret

811106f0 <vWarnCouldNotgetMutexRetrans128>:

/* Not send message is bad but the Simucam will continue to work. */
void vWarnCouldNotgetMutexRetrans128( void )
{
811106f0:	defffe04 	addi	sp,sp,-8
811106f4:	de00012e 	bgeu	sp,et,811106fc <vWarnCouldNotgetMutexRetrans128+0xc>
811106f8:	003b68fa 	trap	3
811106fc:	dfc00115 	stw	ra,4(sp)
81110700:	df000015 	stw	fp,0(sp)
81110704:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vWarnCouldNotgetMutexRetrans128. (exit)\n");
81110708:	d0a05017 	ldw	r2,-32448(gp)
8111070c:	100f883a 	mov	r7,r2
81110710:	01800a04 	movi	r6,40
81110714:	01400044 	movi	r5,1
81110718:	01204534 	movhi	r4,33044
8111071c:	21056504 	addi	r4,r4,5524
81110720:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Warning: Could not get the mutex for the retransmission. The message will be lost.\n");
81110724:	d0a05017 	ldw	r2,-32448(gp)
81110728:	100f883a 	mov	r7,r2
8111072c:	018014c4 	movi	r6,83
81110730:	01400044 	movi	r5,1
81110734:	01204534 	movhi	r4,33044
81110738:	21057004 	addi	r4,r4,5568
8111073c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110740:	0001883a 	nop
81110744:	e037883a 	mov	sp,fp
81110748:	dfc00117 	ldw	ra,4(sp)
8111074c:	df000017 	ldw	fp,0(sp)
81110750:	dec00204 	addi	sp,sp,8
81110754:	f800283a 	ret

81110758 <vFailCreateScheduleQueue>:


/* CRITICAL. */
void vFailCreateScheduleQueue( void )
{
81110758:	defffe04 	addi	sp,sp,-8
8111075c:	de00012e 	bgeu	sp,et,81110764 <vFailCreateScheduleQueue+0xc>
81110760:	003b68fa 	trap	3
81110764:	dfc00115 	stw	ra,4(sp)
81110768:	df000015 	stw	fp,0(sp)
8111076c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateScheduleQueue. (exit)\n");
81110770:	d0a05017 	ldw	r2,-32448(gp)
81110774:	100f883a 	mov	r7,r2
81110778:	01800844 	movi	r6,33
8111077c:	01400044 	movi	r5,1
81110780:	01204534 	movhi	r4,33044
81110784:	21058504 	addi	r4,r4,5652
81110788:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"CRITICAL: Could not create the Queue to shcedule the access to the DMA.\n");
8111078c:	d0a05017 	ldw	r2,-32448(gp)
81110790:	100f883a 	mov	r7,r2
81110794:	01801204 	movi	r6,72
81110798:	01400044 	movi	r5,1
8111079c:	01204534 	movhi	r4,33044
811107a0:	21058e04 	addi	r4,r4,5688
811107a4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811107a8:	0001883a 	nop
811107ac:	e037883a 	mov	sp,fp
811107b0:	dfc00117 	ldw	ra,4(sp)
811107b4:	df000017 	ldw	fp,0(sp)
811107b8:	dec00204 	addi	sp,sp,8
811107bc:	f800283a 	ret

811107c0 <vFailCreateNFEEQueue>:

/* CRITICAL. */
void vFailCreateNFEEQueue( unsigned char ucID )
{
811107c0:	defffd04 	addi	sp,sp,-12
811107c4:	de00012e 	bgeu	sp,et,811107cc <vFailCreateNFEEQueue+0xc>
811107c8:	003b68fa 	trap	3
811107cc:	dfc00215 	stw	ra,8(sp)
811107d0:	df000115 	stw	fp,4(sp)
811107d4:	df000104 	addi	fp,sp,4
811107d8:	2005883a 	mov	r2,r4
811107dc:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateNFEEQueue. (exit)\n");
811107e0:	d0a05017 	ldw	r2,-32448(gp)
811107e4:	100f883a 	mov	r7,r2
811107e8:	01800744 	movi	r6,29
811107ec:	01400044 	movi	r5,1
811107f0:	01204534 	movhi	r4,33044
811107f4:	2105a104 	addi	r4,r4,5764
811107f8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		printf(fp,"CRITICAL: Could not create the Queue to the NSEE %hhu.\n",ucID);
811107fc:	d0a05017 	ldw	r2,-32448(gp)
81110800:	e0ffff03 	ldbu	r3,-4(fp)
81110804:	180d883a 	mov	r6,r3
81110808:	01604534 	movhi	r5,33044
8111080c:	2945a904 	addi	r5,r5,5796
81110810:	1009883a 	mov	r4,r2
81110814:	11149100 	call	81114910 <printf>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110818:	0001883a 	nop
8111081c:	e037883a 	mov	sp,fp
81110820:	dfc00117 	ldw	ra,4(sp)
81110824:	df000017 	ldw	fp,0(sp)
81110828:	dec00204 	addi	sp,sp,8
8111082c:	f800283a 	ret

81110830 <vCoudlNotCreateNFee0Task>:

void vCoudlNotCreateNFee0Task( void )
{
81110830:	defffe04 	addi	sp,sp,-8
81110834:	de00012e 	bgeu	sp,et,8111083c <vCoudlNotCreateNFee0Task+0xc>
81110838:	003b68fa 	trap	3
8111083c:	dfc00115 	stw	ra,4(sp)
81110840:	df000015 	stw	fp,0(sp)
81110844:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee0Task. (exit)\n");
81110848:	d0a05017 	ldw	r2,-32448(gp)
8111084c:	100f883a 	mov	r7,r2
81110850:	01800844 	movi	r6,33
81110854:	01400044 	movi	r5,1
81110858:	01204534 	movhi	r4,33044
8111085c:	2105b704 	addi	r4,r4,5852
81110860:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 0 Task.\n");
81110864:	d0a05017 	ldw	r2,-32448(gp)
81110868:	100f883a 	mov	r7,r2
8111086c:	01800784 	movi	r6,30
81110870:	01400044 	movi	r5,1
81110874:	01204534 	movhi	r4,33044
81110878:	2105c004 	addi	r4,r4,5888
8111087c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110880:	0001883a 	nop
81110884:	e037883a 	mov	sp,fp
81110888:	dfc00117 	ldw	ra,4(sp)
8111088c:	df000017 	ldw	fp,0(sp)
81110890:	dec00204 	addi	sp,sp,8
81110894:	f800283a 	ret

81110898 <vCoudlNotCreateNFee1Task>:


void vCoudlNotCreateNFee1Task( void )
{
81110898:	defffe04 	addi	sp,sp,-8
8111089c:	de00012e 	bgeu	sp,et,811108a4 <vCoudlNotCreateNFee1Task+0xc>
811108a0:	003b68fa 	trap	3
811108a4:	dfc00115 	stw	ra,4(sp)
811108a8:	df000015 	stw	fp,0(sp)
811108ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee1Task. (exit)\n");
811108b0:	d0a05017 	ldw	r2,-32448(gp)
811108b4:	100f883a 	mov	r7,r2
811108b8:	01800844 	movi	r6,33
811108bc:	01400044 	movi	r5,1
811108c0:	01204534 	movhi	r4,33044
811108c4:	2105c804 	addi	r4,r4,5920
811108c8:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 1 Task.\n");
811108cc:	d0a05017 	ldw	r2,-32448(gp)
811108d0:	100f883a 	mov	r7,r2
811108d4:	01800784 	movi	r6,30
811108d8:	01400044 	movi	r5,1
811108dc:	01204534 	movhi	r4,33044
811108e0:	2105d104 	addi	r4,r4,5956
811108e4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811108e8:	0001883a 	nop
811108ec:	e037883a 	mov	sp,fp
811108f0:	dfc00117 	ldw	ra,4(sp)
811108f4:	df000017 	ldw	fp,0(sp)
811108f8:	dec00204 	addi	sp,sp,8
811108fc:	f800283a 	ret

81110900 <vCoudlNotCreateNFee2Task>:

void vCoudlNotCreateNFee2Task( void )
{
81110900:	defffe04 	addi	sp,sp,-8
81110904:	de00012e 	bgeu	sp,et,8111090c <vCoudlNotCreateNFee2Task+0xc>
81110908:	003b68fa 	trap	3
8111090c:	dfc00115 	stw	ra,4(sp)
81110910:	df000015 	stw	fp,0(sp)
81110914:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee2Task. (exit)\n");
81110918:	d0a05017 	ldw	r2,-32448(gp)
8111091c:	100f883a 	mov	r7,r2
81110920:	01800844 	movi	r6,33
81110924:	01400044 	movi	r5,1
81110928:	01204534 	movhi	r4,33044
8111092c:	2105d904 	addi	r4,r4,5988
81110930:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 2 Task.\n");
81110934:	d0a05017 	ldw	r2,-32448(gp)
81110938:	100f883a 	mov	r7,r2
8111093c:	01800784 	movi	r6,30
81110940:	01400044 	movi	r5,1
81110944:	01204534 	movhi	r4,33044
81110948:	2105e204 	addi	r4,r4,6024
8111094c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110950:	0001883a 	nop
81110954:	e037883a 	mov	sp,fp
81110958:	dfc00117 	ldw	ra,4(sp)
8111095c:	df000017 	ldw	fp,0(sp)
81110960:	dec00204 	addi	sp,sp,8
81110964:	f800283a 	ret

81110968 <vCoudlNotCreateNFee3Task>:

void vCoudlNotCreateNFee3Task( void )
{
81110968:	defffe04 	addi	sp,sp,-8
8111096c:	de00012e 	bgeu	sp,et,81110974 <vCoudlNotCreateNFee3Task+0xc>
81110970:	003b68fa 	trap	3
81110974:	dfc00115 	stw	ra,4(sp)
81110978:	df000015 	stw	fp,0(sp)
8111097c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee3Task. (exit)\n");
81110980:	d0a05017 	ldw	r2,-32448(gp)
81110984:	100f883a 	mov	r7,r2
81110988:	01800844 	movi	r6,33
8111098c:	01400044 	movi	r5,1
81110990:	01204534 	movhi	r4,33044
81110994:	2105ea04 	addi	r4,r4,6056
81110998:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 3 Task.\n");
8111099c:	d0a05017 	ldw	r2,-32448(gp)
811109a0:	100f883a 	mov	r7,r2
811109a4:	01800784 	movi	r6,30
811109a8:	01400044 	movi	r5,1
811109ac:	01204534 	movhi	r4,33044
811109b0:	2105f304 	addi	r4,r4,6092
811109b4:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811109b8:	0001883a 	nop
811109bc:	e037883a 	mov	sp,fp
811109c0:	dfc00117 	ldw	ra,4(sp)
811109c4:	df000017 	ldw	fp,0(sp)
811109c8:	dec00204 	addi	sp,sp,8
811109cc:	f800283a 	ret

811109d0 <vCoudlNotCreateNFee4Task>:

void vCoudlNotCreateNFee4Task( void )
{
811109d0:	defffe04 	addi	sp,sp,-8
811109d4:	de00012e 	bgeu	sp,et,811109dc <vCoudlNotCreateNFee4Task+0xc>
811109d8:	003b68fa 	trap	3
811109dc:	dfc00115 	stw	ra,4(sp)
811109e0:	df000015 	stw	fp,0(sp)
811109e4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee4Task. (exit)\n");
811109e8:	d0a05017 	ldw	r2,-32448(gp)
811109ec:	100f883a 	mov	r7,r2
811109f0:	01800844 	movi	r6,33
811109f4:	01400044 	movi	r5,1
811109f8:	01204534 	movhi	r4,33044
811109fc:	2105fb04 	addi	r4,r4,6124
81110a00:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 4 Task.\n");
81110a04:	d0a05017 	ldw	r2,-32448(gp)
81110a08:	100f883a 	mov	r7,r2
81110a0c:	01800784 	movi	r6,30
81110a10:	01400044 	movi	r5,1
81110a14:	01204534 	movhi	r4,33044
81110a18:	21060404 	addi	r4,r4,6160
81110a1c:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110a20:	0001883a 	nop
81110a24:	e037883a 	mov	sp,fp
81110a28:	dfc00117 	ldw	ra,4(sp)
81110a2c:	df000017 	ldw	fp,0(sp)
81110a30:	dec00204 	addi	sp,sp,8
81110a34:	f800283a 	ret

81110a38 <vCoudlNotCreateNFee5Task>:

void vCoudlNotCreateNFee5Task( void )
{
81110a38:	defffe04 	addi	sp,sp,-8
81110a3c:	de00012e 	bgeu	sp,et,81110a44 <vCoudlNotCreateNFee5Task+0xc>
81110a40:	003b68fa 	trap	3
81110a44:	dfc00115 	stw	ra,4(sp)
81110a48:	df000015 	stw	fp,0(sp)
81110a4c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee5Task. (exit)\n");
81110a50:	d0a05017 	ldw	r2,-32448(gp)
81110a54:	100f883a 	mov	r7,r2
81110a58:	01800844 	movi	r6,33
81110a5c:	01400044 	movi	r5,1
81110a60:	01204534 	movhi	r4,33044
81110a64:	21060c04 	addi	r4,r4,6192
81110a68:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 5 Task.\n");
81110a6c:	d0a05017 	ldw	r2,-32448(gp)
81110a70:	100f883a 	mov	r7,r2
81110a74:	01800784 	movi	r6,30
81110a78:	01400044 	movi	r5,1
81110a7c:	01204534 	movhi	r4,33044
81110a80:	21061504 	addi	r4,r4,6228
81110a84:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110a88:	0001883a 	nop
81110a8c:	e037883a 	mov	sp,fp
81110a90:	dfc00117 	ldw	ra,4(sp)
81110a94:	df000017 	ldw	fp,0(sp)
81110a98:	dec00204 	addi	sp,sp,8
81110a9c:	f800283a 	ret

81110aa0 <vCoudlNotCreateNFeeControllerTask>:


void vCoudlNotCreateNFeeControllerTask( void )
{
81110aa0:	defffe04 	addi	sp,sp,-8
81110aa4:	de00012e 	bgeu	sp,et,81110aac <vCoudlNotCreateNFeeControllerTask+0xc>
81110aa8:	003b68fa 	trap	3
81110aac:	dfc00115 	stw	ra,4(sp)
81110ab0:	df000015 	stw	fp,0(sp)
81110ab4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFeeControllerTask. (exit)\n");
81110ab8:	d0a05017 	ldw	r2,-32448(gp)
81110abc:	100f883a 	mov	r7,r2
81110ac0:	01800a84 	movi	r6,42
81110ac4:	01400044 	movi	r5,1
81110ac8:	01204534 	movhi	r4,33044
81110acc:	21061d04 	addi	r4,r4,6260
81110ad0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE Controller Task.\n");
81110ad4:	d0a05017 	ldw	r2,-32448(gp)
81110ad8:	100f883a 	mov	r7,r2
81110adc:	018009c4 	movi	r6,39
81110ae0:	01400044 	movi	r5,1
81110ae4:	01204534 	movhi	r4,33044
81110ae8:	21062804 	addi	r4,r4,6304
81110aec:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110af0:	0001883a 	nop
81110af4:	e037883a 	mov	sp,fp
81110af8:	dfc00117 	ldw	ra,4(sp)
81110afc:	df000017 	ldw	fp,0(sp)
81110b00:	dec00204 	addi	sp,sp,8
81110b04:	f800283a 	ret

81110b08 <vCoudlNotCreateDataControllerTask>:


void vCoudlNotCreateDataControllerTask( void )
{
81110b08:	defffe04 	addi	sp,sp,-8
81110b0c:	de00012e 	bgeu	sp,et,81110b14 <vCoudlNotCreateDataControllerTask+0xc>
81110b10:	003b68fa 	trap	3
81110b14:	dfc00115 	stw	ra,4(sp)
81110b18:	df000015 	stw	fp,0(sp)
81110b1c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateDataControllerTask. (exit)\n");
81110b20:	d0a05017 	ldw	r2,-32448(gp)
81110b24:	100f883a 	mov	r7,r2
81110b28:	01800a84 	movi	r6,42
81110b2c:	01400044 	movi	r5,1
81110b30:	01204534 	movhi	r4,33044
81110b34:	21063204 	addi	r4,r4,6344
81110b38:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create Data Controller Task.\n");
81110b3c:	d0a05017 	ldw	r2,-32448(gp)
81110b40:	100f883a 	mov	r7,r2
81110b44:	018009c4 	movi	r6,39
81110b48:	01400044 	movi	r5,1
81110b4c:	01204534 	movhi	r4,33044
81110b50:	21063d04 	addi	r4,r4,6388
81110b54:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110b58:	0001883a 	nop
81110b5c:	e037883a 	mov	sp,fp
81110b60:	dfc00117 	ldw	ra,4(sp)
81110b64:	df000017 	ldw	fp,0(sp)
81110b68:	dec00204 	addi	sp,sp,8
81110b6c:	f800283a 	ret

81110b70 <vCoudlNotCreateMebTask>:


void vCoudlNotCreateMebTask( void )
{
81110b70:	defffe04 	addi	sp,sp,-8
81110b74:	de00012e 	bgeu	sp,et,81110b7c <vCoudlNotCreateMebTask+0xc>
81110b78:	003b68fa 	trap	3
81110b7c:	dfc00115 	stw	ra,4(sp)
81110b80:	df000015 	stw	fp,0(sp)
81110b84:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateMebTask. (exit)\n");
81110b88:	d0a05017 	ldw	r2,-32448(gp)
81110b8c:	100f883a 	mov	r7,r2
81110b90:	018007c4 	movi	r6,31
81110b94:	01400044 	movi	r5,1
81110b98:	01204534 	movhi	r4,33044
81110b9c:	21064704 	addi	r4,r4,6428
81110ba0:	1113be40 	call	81113be4 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create Meb Task.\n");
81110ba4:	d0a05017 	ldw	r2,-32448(gp)
81110ba8:	100f883a 	mov	r7,r2
81110bac:	018006c4 	movi	r6,27
81110bb0:	01400044 	movi	r5,1
81110bb4:	01204534 	movhi	r4,33044
81110bb8:	21064f04 	addi	r4,r4,6460
81110bbc:	1113be40 	call	81113be4 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110bc0:	0001883a 	nop
81110bc4:	e037883a 	mov	sp,fp
81110bc8:	dfc00117 	ldw	ra,4(sp)
81110bcc:	df000017 	ldw	fp,0(sp)
81110bd0:	dec00204 	addi	sp,sp,8
81110bd4:	f800283a 	ret

81110bd8 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
81110bd8:	defffd04 	addi	sp,sp,-12
81110bdc:	de00012e 	bgeu	sp,et,81110be4 <vNFeeNotInUse+0xc>
81110be0:	003b68fa 	trap	3
81110be4:	df000215 	stw	fp,8(sp)
81110be8:	df000204 	addi	fp,sp,8
81110bec:	e13ffe15 	stw	r4,-8(fp)
81110bf0:	2805883a 	mov	r2,r5
81110bf4:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
81110bf8:	e0bffe17 	ldw	r2,-8(fp)
81110bfc:	e0ffff03 	ldbu	r3,-4(fp)
81110c00:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
81110c04:	e0bffe17 	ldw	r2,-8(fp)
81110c08:	10002115 	stw	zero,132(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
81110c0c:	e0bffe17 	ldw	r2,-8(fp)
81110c10:	10002215 	stw	zero,136(r2)
}
81110c14:	0001883a 	nop
81110c18:	e037883a 	mov	sp,fp
81110c1c:	df000017 	ldw	fp,0(sp)
81110c20:	dec00104 	addi	sp,sp,4
81110c24:	f800283a 	ret

81110c28 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
81110c28:	defffb04 	addi	sp,sp,-20
81110c2c:	de00012e 	bgeu	sp,et,81110c34 <vNFeeStructureInit+0xc>
81110c30:	003b68fa 	trap	3
81110c34:	dfc00415 	stw	ra,16(sp)
81110c38:	df000315 	stw	fp,12(sp)
81110c3c:	df000304 	addi	fp,sp,12
81110c40:	e13ffe15 	stw	r4,-8(fp)
81110c44:	2805883a 	mov	r2,r5
81110c48:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
81110c4c:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
81110c50:	e0bffe17 	ldw	r2,-8(fp)
81110c54:	e0ffff03 	ldbu	r3,-4(fp)
81110c58:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
81110c5c:	e0bffe17 	ldw	r2,-8(fp)
81110c60:	10802904 	addi	r2,r2,164
81110c64:	1009883a 	mov	r4,r2
81110c68:	110d2c80 	call	8110d2c8 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
81110c6c:	e13ffe17 	ldw	r4,-8(fp)
81110c70:	1110d000 	call	81110d00 <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
81110c74:	e0bffe17 	ldw	r2,-8(fp)
81110c78:	00c00044 	movi	r3,1
81110c7c:	10c02115 	stw	r3,132(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
81110c80:	e0bffe17 	ldw	r2,-8(fp)
81110c84:	10002215 	stw	zero,136(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
81110c88:	e0bffe17 	ldw	r2,-8(fp)
81110c8c:	10002715 	stw	zero,156(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
81110c90:	e03ffd05 	stb	zero,-12(fp)
81110c94:	00000906 	br	81110cbc <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
81110c98:	e0bffd03 	ldbu	r2,-12(fp)
81110c9c:	e0fffe17 	ldw	r3,-8(fp)
81110ca0:	1885883a 	add	r2,r3,r2
81110ca4:	10802604 	addi	r2,r2,152
81110ca8:	e0fffd03 	ldbu	r3,-12(fp)
81110cac:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
81110cb0:	e0bffd03 	ldbu	r2,-12(fp)
81110cb4:	10800044 	addi	r2,r2,1
81110cb8:	e0bffd05 	stb	r2,-12(fp)
81110cbc:	e0bffd03 	ldbu	r2,-12(fp)
81110cc0:	10800130 	cmpltui	r2,r2,4
81110cc4:	103ff41e 	bne	r2,zero,81110c98 <__reset+0xfb0f0c98>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
81110cc8:	e0bffe17 	ldw	r2,-8(fp)
81110ccc:	10002815 	stw	zero,160(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
81110cd0:	e0bffe17 	ldw	r2,-8(fp)
81110cd4:	10002415 	stw	zero,144(r2)
    pxNfeeL->xControl.bLogging = FALSE;
81110cd8:	e0bffe17 	ldw	r2,-8(fp)
81110cdc:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
81110ce0:	e0bffe17 	ldw	r2,-8(fp)
81110ce4:	10002515 	stw	zero,148(r2)

}
81110ce8:	0001883a 	nop
81110cec:	e037883a 	mov	sp,fp
81110cf0:	dfc00117 	ldw	ra,4(sp)
81110cf4:	df000017 	ldw	fp,0(sp)
81110cf8:	dec00204 	addi	sp,sp,8
81110cfc:	f800283a 	ret

81110d00 <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
81110d00:	defff404 	addi	sp,sp,-48
81110d04:	de00012e 	bgeu	sp,et,81110d0c <vUpdateMemMapFEE+0xc>
81110d08:	003b68fa 	trap	3
81110d0c:	df000b15 	stw	fp,44(sp)
81110d10:	df000b04 	addi	fp,sp,44
81110d14:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
81110d18:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
81110d1c:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
81110d20:	e03ff615 	stw	zero,-40(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
81110d24:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
81110d28:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
81110d2c:	e03ff715 	stw	zero,-36(fp)
    unsigned char ucPixelsInLastBlockL = 0;
81110d30:	e03ff805 	stb	zero,-32(fp)
    unsigned char ucShiftsL = 0;
81110d34:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
81110d38:	e03ff845 	stb	zero,-31(fp)
    unsigned long ulLastOffset = 0;
81110d3c:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulStepHalfCCD = 0;
81110d40:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
81110d44:	e17fff17 	ldw	r5,-4(fp)
81110d48:	01035a34 	movhi	r4,3432
81110d4c:	21348c04 	addi	r4,r4,-11728
81110d50:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
81110d54:	e13fff17 	ldw	r4,-4(fp)
81110d58:	21000003 	ldbu	r4,0(r4)
81110d5c:	21403fcc 	andi	r5,r4,255
81110d60:	01035a34 	movhi	r4,3432
81110d64:	21348c04 	addi	r4,r4,-11728
81110d68:	2909383a 	mul	r4,r5,r4
81110d6c:	200b883a 	mov	r5,r4
81110d70:	e13fff17 	ldw	r4,-4(fp)
81110d74:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
81110d78:	e13fff17 	ldw	r4,-4(fp)
81110d7c:	21400117 	ldw	r5,4(r4)
81110d80:	01033234 	movhi	r4,3272
81110d84:	21348c04 	addi	r4,r4,-11728
81110d88:	290b883a 	add	r5,r5,r4
81110d8c:	e13fff17 	ldw	r4,-4(fp)
81110d90:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
81110d94:	e13fff17 	ldw	r4,-4(fp)
81110d98:	21002b0b 	ldhu	r4,172(r4)
81110d9c:	217fffcc 	andi	r5,r4,65535
81110da0:	e13fff17 	ldw	r4,-4(fp)
81110da4:	21002a0b 	ldhu	r4,168(r4)
81110da8:	213fffcc 	andi	r4,r4,65535
81110dac:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
81110db0:	e13fff17 	ldw	r4,-4(fp)
81110db4:	21002a8b 	ldhu	r4,170(r4)
81110db8:	21bfffcc 	andi	r6,r4,65535
81110dbc:	e13fff17 	ldw	r4,-4(fp)
81110dc0:	2100298b 	ldhu	r4,166(r4)
81110dc4:	213fffcc 	andi	r4,r4,65535
81110dc8:	310d883a 	add	r6,r6,r4
81110dcc:	e13fff17 	ldw	r4,-4(fp)
81110dd0:	2100290b 	ldhu	r4,164(r4)
81110dd4:	213fffcc 	andi	r4,r4,65535
81110dd8:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
81110ddc:	2909383a 	mul	r4,r5,r4
81110de0:	e13ffa15 	stw	r4,-24(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
81110de4:	e13ffa17 	ldw	r4,-24(fp)
81110de8:	2109883a 	add	r4,r4,r4
81110dec:	200b883a 	mov	r5,r4
81110df0:	e13fff17 	ldw	r4,-4(fp)
81110df4:	21400515 	stw	r5,20(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
81110df8:	e13fff17 	ldw	r4,-4(fp)
81110dfc:	21000517 	ldw	r4,20(r4)
81110e00:	2008d0fa 	srli	r4,r4,3
81110e04:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
81110e08:	e13fff17 	ldw	r4,-4(fp)
81110e0c:	21000517 	ldw	r4,20(r4)
81110e10:	210001cc 	andi	r4,r4,7
81110e14:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
81110e18:	e13ffb17 	ldw	r4,-20(fp)
81110e1c:	20001226 	beq	r4,zero,81110e68 <vUpdateMemMapFEE+0x168>
        ulMemLinesL = ulMemLinesL + 1;
81110e20:	e13ff517 	ldw	r4,-44(fp)
81110e24:	21000044 	addi	r4,r4,1
81110e28:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
81110e2c:	e13fff17 	ldw	r4,-4(fp)
81110e30:	21400517 	ldw	r5,20(r4)
81110e34:	e13ffb17 	ldw	r4,-20(fp)
81110e38:	2909c83a 	sub	r4,r5,r4
81110e3c:	21400204 	addi	r5,r4,8
81110e40:	e13fff17 	ldw	r4,-4(fp)
81110e44:	21400515 	stw	r5,20(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
81110e48:	e13ffb17 	ldw	r4,-20(fp)
81110e4c:	200b883a 	mov	r5,r4
81110e50:	01000204 	movi	r4,8
81110e54:	2149c83a 	sub	r4,r4,r5
81110e58:	200b883a 	mov	r5,r4
81110e5c:	e13fff17 	ldw	r4,-4(fp)
81110e60:	21400605 	stb	r5,24(r4)
81110e64:	00000206 	br	81110e70 <vUpdateMemMapFEE+0x170>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
81110e68:	e13fff17 	ldw	r4,-4(fp)
81110e6c:	20000605 	stb	zero,24(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
81110e70:	e13ff517 	ldw	r4,-44(fp)
81110e74:	2008d13a 	srli	r4,r4,4
81110e78:	e13ff715 	stw	r4,-36(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
81110e7c:	e13ff517 	ldw	r4,-44(fp)
81110e80:	210003cc 	andi	r4,r4,15
81110e84:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
81110e88:	e13ffc17 	ldw	r4,-16(fp)
81110e8c:	20000b26 	beq	r4,zero,81110ebc <vUpdateMemMapFEE+0x1bc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
81110e90:	e13ff717 	ldw	r4,-36(fp)
81110e94:	21000044 	addi	r4,r4,1
81110e98:	e13ff715 	stw	r4,-36(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
81110e9c:	e17ff517 	ldw	r5,-44(fp)
81110ea0:	e13ffc17 	ldw	r4,-16(fp)
81110ea4:	290bc83a 	sub	r5,r5,r4
81110ea8:	e13ff717 	ldw	r4,-36(fp)
81110eac:	2909883a 	add	r4,r5,r4
81110eb0:	21000404 	addi	r4,r4,16
81110eb4:	e13ff615 	stw	r4,-40(fp)
81110eb8:	00000406 	br	81110ecc <vUpdateMemMapFEE+0x1cc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
81110ebc:	e17ff517 	ldw	r5,-44(fp)
81110ec0:	e13ff717 	ldw	r4,-36(fp)
81110ec4:	2909883a 	add	r4,r5,r4
81110ec8:	e13ff615 	stw	r4,-40(fp)
    }

    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalMemLinesL * BYTES_PER_MEM_LINE;
81110ecc:	e13ff617 	ldw	r4,-40(fp)
81110ed0:	200a90fa 	slli	r5,r4,3
81110ed4:	e13fff17 	ldw	r4,-4(fp)
81110ed8:	21400515 	stw	r5,20(r4)

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
81110edc:	e13ffb17 	ldw	r4,-20(fp)
81110ee0:	20000926 	beq	r4,zero,81110f08 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
81110ee4:	e13ffc17 	ldw	r4,-16(fp)
81110ee8:	2109883a 	add	r4,r4,r4
81110eec:	2109883a 	add	r4,r4,r4
81110ef0:	200b883a 	mov	r5,r4
81110ef4:	e13ffb17 	ldw	r4,-20(fp)
81110ef8:	2008d07a 	srli	r4,r4,1
81110efc:	2909883a 	add	r4,r5,r4
81110f00:	e13ff805 	stb	r4,-32(fp)
81110f04:	00000406 	br	81110f18 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
81110f08:	e13ffc17 	ldw	r4,-16(fp)
81110f0c:	2109883a 	add	r4,r4,r4
81110f10:	2109883a 	add	r4,r4,r4
81110f14:	e13ff805 	stb	r4,-32(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
81110f18:	e13ff803 	ldbu	r4,-32(fp)
81110f1c:	01401004 	movi	r5,64
81110f20:	2909c83a 	sub	r4,r5,r4
81110f24:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
81110f28:	e13ffd03 	ldbu	r4,-12(fp)
81110f2c:	217ff804 	addi	r5,r4,-32
81110f30:	28000416 	blt	r5,zero,81110f44 <vUpdateMemMapFEE+0x244>
81110f34:	013fffc4 	movi	r4,-1
81110f38:	2144d83a 	srl	r2,r4,r5
81110f3c:	0007883a 	mov	r3,zero
81110f40:	00000a06 	br	81110f6c <vUpdateMemMapFEE+0x26c>
81110f44:	017fffc4 	movi	r5,-1
81110f48:	280c907a 	slli	r6,r5,1
81110f4c:	014007c4 	movi	r5,31
81110f50:	290bc83a 	sub	r5,r5,r4
81110f54:	314a983a 	sll	r5,r6,r5
81110f58:	01bfffc4 	movi	r6,-1
81110f5c:	3104d83a 	srl	r2,r6,r4
81110f60:	2884b03a 	or	r2,r5,r2
81110f64:	017fffc4 	movi	r5,-1
81110f68:	2906d83a 	srl	r3,r5,r4
81110f6c:	e13fff17 	ldw	r4,-4(fp)
81110f70:	20800715 	stw	r2,28(r4)
81110f74:	20c00815 	stw	r3,32(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
81110f78:	e0bfff17 	ldw	r2,-4(fp)
81110f7c:	e0fff717 	ldw	r3,-36(fp)
81110f80:	10c00415 	stw	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
81110f84:	e0bfff17 	ldw	r2,-4(fp)
81110f88:	10c00117 	ldw	r3,4(r2)
81110f8c:	008004b4 	movhi	r2,18
81110f90:	10a40004 	addi	r2,r2,-28672
81110f94:	1885883a 	add	r2,r3,r2
81110f98:	e0bff915 	stw	r2,-28(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
81110f9c:	e0bfff17 	ldw	r2,-4(fp)
81110fa0:	10c00517 	ldw	r3,20(r2)
81110fa4:	008000b4 	movhi	r2,2
81110fa8:	10a40004 	addi	r2,r2,-28672
81110fac:	1885883a 	add	r2,r3,r2
81110fb0:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
81110fb4:	e03ff845 	stb	zero,-31(fp)
81110fb8:	00001906 	br	81111020 <vUpdateMemMapFEE+0x320>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
81110fbc:	e0bff843 	ldbu	r2,-31(fp)
81110fc0:	e0ffff17 	ldw	r3,-4(fp)
81110fc4:	10800624 	muli	r2,r2,24
81110fc8:	1885883a 	add	r2,r3,r2
81110fcc:	10800904 	addi	r2,r2,36
81110fd0:	e0fff917 	ldw	r3,-28(fp)
81110fd4:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
81110fd8:	e0fff917 	ldw	r3,-28(fp)
81110fdc:	e0bffe17 	ldw	r2,-8(fp)
81110fe0:	1885883a 	add	r2,r3,r2
81110fe4:	e0bff915 	stw	r2,-28(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
81110fe8:	e0bff843 	ldbu	r2,-31(fp)
81110fec:	e0ffff17 	ldw	r3,-4(fp)
81110ff0:	10800624 	muli	r2,r2,24
81110ff4:	1885883a 	add	r2,r3,r2
81110ff8:	10800c04 	addi	r2,r2,48
81110ffc:	e0fff917 	ldw	r3,-28(fp)
81111000:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
81111004:	e0fff917 	ldw	r3,-28(fp)
81111008:	e0bffe17 	ldw	r2,-8(fp)
8111100c:	1885883a 	add	r2,r3,r2
81111010:	e0bff915 	stw	r2,-28(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
81111014:	e0bff843 	ldbu	r2,-31(fp)
81111018:	10800044 	addi	r2,r2,1
8111101c:	e0bff845 	stb	r2,-31(fp)
81111020:	e0bff843 	ldbu	r2,-31(fp)
81111024:	10800130 	cmpltui	r2,r2,4
81111028:	103fe41e 	bne	r2,zero,81110fbc <__reset+0xfb0f0fbc>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8111102c:	0001883a 	nop
81111030:	e037883a 	mov	sp,fp
81111034:	df000017 	ldw	fp,0(sp)
81111038:	dec00104 	addi	sp,sp,4
8111103c:	f800283a 	ret

81111040 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
81111040:	defffe04 	addi	sp,sp,-8
81111044:	de00012e 	bgeu	sp,et,8111104c <vFeeSpwRMAPLoadDefault+0xc>
81111048:	003b68fa 	trap	3
8111104c:	df000115 	stw	fp,4(sp)
81111050:	df000104 	addi	fp,sp,4
81111054:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
81111058:	0001883a 	nop
8111105c:	e037883a 	mov	sp,fp
81111060:	df000017 	ldw	fp,0(sp)
81111064:	dec00104 	addi	sp,sp,4
81111068:	f800283a 	ret

8111106c <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8111106c:	defffe04 	addi	sp,sp,-8
81111070:	de00012e 	bgeu	sp,et,81111078 <vFeeSpwRMAPChangeConfig+0xc>
81111074:	003b68fa 	trap	3
81111078:	df000115 	stw	fp,4(sp)
8111107c:	df000104 	addi	fp,sp,4
81111080:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
81111084:	0001883a 	nop
81111088:	e037883a 	mov	sp,fp
8111108c:	df000017 	ldw	fp,0(sp)
81111090:	dec00104 	addi	sp,sp,4
81111094:	f800283a 	ret

81111098 <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
81111098:	defffe04 	addi	sp,sp,-8
8111109c:	de00012e 	bgeu	sp,et,811110a4 <vFeeSpwRMAPChangeDefault+0xc>
811110a0:	003b68fa 	trap	3
811110a4:	df000115 	stw	fp,4(sp)
811110a8:	df000104 	addi	fp,sp,4
811110ac:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
811110b0:	0001883a 	nop
811110b4:	e037883a 	mov	sp,fp
811110b8:	df000017 	ldw	fp,0(sp)
811110bc:	dec00104 	addi	sp,sp,4
811110c0:	f800283a 	ret

811110c4 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
811110c4:	defffe04 	addi	sp,sp,-8
811110c8:	de00012e 	bgeu	sp,et,811110d0 <cFeeSpwChannelEnable+0xc>
811110cc:	003b68fa 	trap	3
811110d0:	df000115 	stw	fp,4(sp)
811110d4:	df000104 	addi	fp,sp,4
811110d8:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
811110dc:	0001883a 	nop
811110e0:	e037883a 	mov	sp,fp
811110e4:	df000017 	ldw	fp,0(sp)
811110e8:	dec00104 	addi	sp,sp,4
811110ec:	f800283a 	ret

811110f0 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
811110f0:	defffe04 	addi	sp,sp,-8
811110f4:	de00012e 	bgeu	sp,et,811110fc <cFeeSpwChannelDisable+0xc>
811110f8:	003b68fa 	trap	3
811110fc:	df000115 	stw	fp,4(sp)
81111100:	df000104 	addi	fp,sp,4
81111104:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
81111108:	0001883a 	nop
8111110c:	e037883a 	mov	sp,fp
81111110:	df000017 	ldw	fp,0(sp)
81111114:	dec00104 	addi	sp,sp,4
81111118:	f800283a 	ret

8111111c <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8111111c:	defffe04 	addi	sp,sp,-8
81111120:	de00012e 	bgeu	sp,et,81111128 <cFeeRMAPDump+0xc>
81111124:	003b68fa 	trap	3
81111128:	df000115 	stw	fp,4(sp)
8111112c:	df000104 	addi	fp,sp,4
81111130:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
81111134:	0001883a 	nop
81111138:	e037883a 	mov	sp,fp
8111113c:	df000017 	ldw	fp,0(sp)
81111140:	dec00104 	addi	sp,sp,4
81111144:	f800283a 	ret

81111148 <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
81111148:	defffe04 	addi	sp,sp,-8
8111114c:	de00012e 	bgeu	sp,et,81111154 <cFeeRMAPEchoingEnable+0xc>
81111150:	003b68fa 	trap	3
81111154:	df000115 	stw	fp,4(sp)
81111158:	df000104 	addi	fp,sp,4
8111115c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
81111160:	e0bfff17 	ldw	r2,-4(fp)
81111164:	00c00044 	movi	r3,1
81111168:	10c02415 	stw	r3,144(r2)
}
8111116c:	0001883a 	nop
81111170:	e037883a 	mov	sp,fp
81111174:	df000017 	ldw	fp,0(sp)
81111178:	dec00104 	addi	sp,sp,4
8111117c:	f800283a 	ret

81111180 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
81111180:	defffe04 	addi	sp,sp,-8
81111184:	de00012e 	bgeu	sp,et,8111118c <cFeeRMAPEchoingDisable+0xc>
81111188:	003b68fa 	trap	3
8111118c:	df000115 	stw	fp,4(sp)
81111190:	df000104 	addi	fp,sp,4
81111194:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
81111198:	e0bfff17 	ldw	r2,-4(fp)
8111119c:	10002415 	stw	zero,144(r2)
}
811111a0:	0001883a 	nop
811111a4:	e037883a 	mov	sp,fp
811111a8:	df000017 	ldw	fp,0(sp)
811111ac:	dec00104 	addi	sp,sp,4
811111b0:	f800283a 	ret

811111b4 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
811111b4:	defffe04 	addi	sp,sp,-8
811111b8:	de00012e 	bgeu	sp,et,811111c0 <cFeeRMAPLogEnable+0xc>
811111bc:	003b68fa 	trap	3
811111c0:	df000115 	stw	fp,4(sp)
811111c4:	df000104 	addi	fp,sp,4
811111c8:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
811111cc:	e0bfff17 	ldw	r2,-4(fp)
811111d0:	00c00044 	movi	r3,1
811111d4:	10c02315 	stw	r3,140(r2)
}
811111d8:	0001883a 	nop
811111dc:	e037883a 	mov	sp,fp
811111e0:	df000017 	ldw	fp,0(sp)
811111e4:	dec00104 	addi	sp,sp,4
811111e8:	f800283a 	ret

811111ec <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
811111ec:	defffe04 	addi	sp,sp,-8
811111f0:	de00012e 	bgeu	sp,et,811111f8 <cFeeRMAPLogDisable+0xc>
811111f4:	003b68fa 	trap	3
811111f8:	df000115 	stw	fp,4(sp)
811111fc:	df000104 	addi	fp,sp,4
81111200:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
81111204:	e0bfff17 	ldw	r2,-4(fp)
81111208:	10002315 	stw	zero,140(r2)
}
8111120c:	0001883a 	nop
81111210:	e037883a 	mov	sp,fp
81111214:	df000017 	ldw	fp,0(sp)
81111218:	dec00104 	addi	sp,sp,4
8111121c:	f800283a 	ret

81111220 <vNFeeControlInit>:
 */


#include "fee_controller.h"

void vNFeeControlInit( TNFee_Control *xFeeControlL ) {
81111220:	defffc04 	addi	sp,sp,-16
81111224:	de00012e 	bgeu	sp,et,8111122c <vNFeeControlInit+0xc>
81111228:	003b68fa 	trap	3
8111122c:	dfc00315 	stw	ra,12(sp)
81111230:	df000215 	stw	fp,8(sp)
81111234:	df000204 	addi	fp,sp,8
81111238:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8111123c:	e03ffe05 	stb	zero,-8(fp)
    
    /* Reset TimeCode */
    vResetTimeCode( xFeeControlL );
81111240:	e13fff17 	ldw	r4,-4(fp)
81111244:	11113180 	call	81111318 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xFeeControlL );
81111248:	e13fff17 	ldw	r4,-4(fp)
8111124c:	111134c0 	call	8111134c <vLoadDefaultIdNFEEMaster>

    /* Calculate the */
    for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
81111250:	e03ffe05 	stb	zero,-8(fp)
81111254:	00001706 	br	811112b4 <vNFeeControlInit+0x94>
        vNFeeStructureInit( &xFeeControlL->xNfee[ ucIL ], ucIL);
81111258:	e0bffe03 	ldbu	r2,-8(fp)
8111125c:	10802c24 	muli	r2,r2,176
81111260:	e0ffff17 	ldw	r3,-4(fp)
81111264:	1885883a 	add	r2,r3,r2
81111268:	e0fffe03 	ldbu	r3,-8(fp)
8111126c:	180b883a 	mov	r5,r3
81111270:	1009883a 	mov	r4,r2
81111274:	1110c280 	call	81110c28 <vNFeeStructureInit>
        xFeeControlL->pbEnabledNFEEs[ ucIL ] = &xFeeControlL->xNfee[ ucIL ].xControl.bEnabled;
81111278:	e0bffe03 	ldbu	r2,-8(fp)
8111127c:	e0fffe03 	ldbu	r3,-8(fp)
81111280:	18c02c24 	muli	r3,r3,176
81111284:	18c02104 	addi	r3,r3,132
81111288:	e13fff17 	ldw	r4,-4(fp)
8111128c:	20c7883a 	add	r3,r4,r3
81111290:	e13fff17 	ldw	r4,-4(fp)
81111294:	10804204 	addi	r2,r2,264
81111298:	1085883a 	add	r2,r2,r2
8111129c:	1085883a 	add	r2,r2,r2
811112a0:	2085883a 	add	r2,r4,r2
811112a4:	10c00015 	stw	r3,0(r2)
    vResetTimeCode( xFeeControlL );
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xFeeControlL );

    /* Calculate the */
    for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
811112a8:	e0bffe03 	ldbu	r2,-8(fp)
811112ac:	10800044 	addi	r2,r2,1
811112b0:	e0bffe05 	stb	r2,-8(fp)
811112b4:	e0bffe03 	ldbu	r2,-8(fp)
811112b8:	108001b0 	cmpltui	r2,r2,6
811112bc:	103fe61e 	bne	r2,zero,81111258 <__reset+0xfb0f1258>
        vNFeeStructureInit( &xFeeControlL->xNfee[ ucIL ], ucIL);
        xFeeControlL->pbEnabledNFEEs[ ucIL ] = &xFeeControlL->xNfee[ ucIL ].xControl.bEnabled;
    }

}
811112c0:	0001883a 	nop
811112c4:	e037883a 	mov	sp,fp
811112c8:	dfc00117 	ldw	ra,4(sp)
811112cc:	df000017 	ldw	fp,0(sp)
811112d0:	dec00204 	addi	sp,sp,8
811112d4:	f800283a 	ret

811112d8 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TNFee_Control *xFeeControlL, unsigned char ucTime ) {
811112d8:	defffd04 	addi	sp,sp,-12
811112dc:	de00012e 	bgeu	sp,et,811112e4 <vSetTimeCode+0xc>
811112e0:	003b68fa 	trap	3
811112e4:	df000215 	stw	fp,8(sp)
811112e8:	df000204 	addi	fp,sp,8
811112ec:	e13ffe15 	stw	r4,-8(fp)
811112f0:	2805883a 	mov	r2,r5
811112f4:	e0bfff05 	stb	r2,-4(fp)
    xFeeControlL->ucTimeCode = ucTime;
811112f8:	e0bffe17 	ldw	r2,-8(fp)
811112fc:	e0ffff03 	ldbu	r3,-4(fp)
81111300:	10c10e05 	stb	r3,1080(r2)
}
81111304:	0001883a 	nop
81111308:	e037883a 	mov	sp,fp
8111130c:	df000017 	ldw	fp,0(sp)
81111310:	dec00104 	addi	sp,sp,4
81111314:	f800283a 	ret

81111318 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TNFee_Control *xFeeControlL ) {
81111318:	defffe04 	addi	sp,sp,-8
8111131c:	de00012e 	bgeu	sp,et,81111324 <vResetTimeCode+0xc>
81111320:	003b68fa 	trap	3
81111324:	df000115 	stw	fp,4(sp)
81111328:	df000104 	addi	fp,sp,4
8111132c:	e13fff15 	stw	r4,-4(fp)
    xFeeControlL->ucTimeCode = 0;
81111330:	e0bfff17 	ldw	r2,-4(fp)
81111334:	10010e05 	stb	zero,1080(r2)
}
81111338:	0001883a 	nop
8111133c:	e037883a 	mov	sp,fp
81111340:	df000017 	ldw	fp,0(sp)
81111344:	dec00104 	addi	sp,sp,4
81111348:	f800283a 	ret

8111134c <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TNFee_Control *xFeeControlL ) {
8111134c:	defffe04 	addi	sp,sp,-8
81111350:	de00012e 	bgeu	sp,et,81111358 <vLoadDefaultIdNFEEMaster+0xc>
81111354:	003b68fa 	trap	3
81111358:	df000115 	stw	fp,4(sp)
8111135c:	df000104 	addi	fp,sp,4
81111360:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xFeeControlL->ucIdNFEEMaster = 0;
81111364:	e0bfff17 	ldw	r2,-4(fp)
81111368:	10010e45 	stb	zero,1081(r2)
}
8111136c:	0001883a 	nop
81111370:	e037883a 	mov	sp,fp
81111374:	df000017 	ldw	fp,0(sp)
81111378:	dec00104 	addi	sp,sp,4
8111137c:	f800283a 	ret

81111380 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TNFee_Control *xFeeControlL, unsigned char ucIdMaster ) {
81111380:	defffd04 	addi	sp,sp,-12
81111384:	de00012e 	bgeu	sp,et,8111138c <vChangeIdNFEEMaster+0xc>
81111388:	003b68fa 	trap	3
8111138c:	df000215 	stw	fp,8(sp)
81111390:	df000204 	addi	fp,sp,8
81111394:	e13ffe15 	stw	r4,-8(fp)
81111398:	2805883a 	mov	r2,r5
8111139c:	e0bfff05 	stb	r2,-4(fp)
    xFeeControlL->ucIdNFEEMaster = ucIdMaster;
811113a0:	e0bffe17 	ldw	r2,-8(fp)
811113a4:	e0ffff03 	ldbu	r3,-4(fp)
811113a8:	10c10e45 	stb	r3,1081(r2)
}
811113ac:	0001883a 	nop
811113b0:	e037883a 	mov	sp,fp
811113b4:	df000017 	ldw	fp,0(sp)
811113b8:	dec00104 	addi	sp,sp,4
811113bc:	f800283a 	ret

811113c0 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TNFee_Control *xFeeControlL, unsigned char ucIdMaster ) {
811113c0:	defffd04 	addi	sp,sp,-12
811113c4:	de00012e 	bgeu	sp,et,811113cc <vChangeDefaultIdNFEEMaster+0xc>
811113c8:	003b68fa 	trap	3
811113cc:	df000215 	stw	fp,8(sp)
811113d0:	df000204 	addi	fp,sp,8
811113d4:	e13ffe15 	stw	r4,-8(fp)
811113d8:	2805883a 	mov	r2,r5
811113dc:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
811113e0:	0001883a 	nop
811113e4:	e037883a 	mov	sp,fp
811113e8:	df000017 	ldw	fp,0(sp)
811113ec:	dec00104 	addi	sp,sp,4
811113f0:	f800283a 	ret

811113f4 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
811113f4:	defffe04 	addi	sp,sp,-8
811113f8:	de00012e 	bgeu	sp,et,81111400 <vInitSimucamBasicHW+0xc>
811113fc:	003b68fa 	trap	3
81111400:	dfc00115 	stw	ra,4(sp)
81111404:	df000015 	stw	fp,0(sp)
81111408:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8111140c:	01403fc4 	movi	r5,255
81111410:	0009883a 	mov	r4,zero
81111414:	11061440 	call	81106144 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
81111418:	01400834 	movhi	r5,32
8111141c:	297fffc4 	addi	r5,r5,-1
81111420:	0009883a 	mov	r4,zero
81111424:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
81111428:	01400074 	movhi	r5,1
8111142c:	01000044 	movi	r4,1
81111430:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
81111434:	0009883a 	mov	r4,zero
81111438:	11077a00 	call	811077a0 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8111143c:	0009883a 	mov	r4,zero
81111440:	11078700 	call	81107870 <bSSDisplayUpdate>

}
81111444:	0001883a 	nop
81111448:	e037883a 	mov	sp,fp
8111144c:	dfc00117 	ldw	ra,4(sp)
81111450:	df000017 	ldw	fp,0(sp)
81111454:	dec00204 	addi	sp,sp,8
81111458:	f800283a 	ret

8111145c <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8111145c:	defffd04 	addi	sp,sp,-12
81111460:	de00012e 	bgeu	sp,et,81111468 <bLogWriteSDCard+0xc>
81111464:	003b68fa 	trap	3
81111468:	df000215 	stw	fp,8(sp)
8111146c:	df000204 	addi	fp,sp,8
81111470:	e13ffe15 	stw	r4,-8(fp)
81111474:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
81111478:	00800044 	movi	r2,1
}
8111147c:	e037883a 	mov	sp,fp
81111480:	df000017 	ldw	fp,0(sp)
81111484:	dec00104 	addi	sp,sp,4
81111488:	f800283a 	ret

8111148c <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8111148c:	deffe004 	addi	sp,sp,-128
81111490:	de00012e 	bgeu	sp,et,81111498 <vLogWriteNUC+0xc>
81111494:	003b68fa 	trap	3
81111498:	dfc01f15 	stw	ra,124(sp)
8111149c:	df001e15 	stw	fp,120(sp)
811114a0:	df001e04 	addi	fp,sp,120
811114a4:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
811114a8:	e03fe215 	stw	zero,-120(fp)
811114ac:	e0bfe304 	addi	r2,fp,-116
811114b0:	00c01b84 	movi	r3,110
811114b4:	180d883a 	mov	r6,r3
811114b8:	000b883a 	mov	r5,zero
811114bc:	1009883a 	mov	r4,r2
811114c0:	11147480 	call	81114748 <memset>
	memset(cTemp,0,114);
811114c4:	01801c84 	movi	r6,114
811114c8:	000b883a 	mov	r5,zero
811114cc:	e13fe204 	addi	r4,fp,-120
811114d0:	11147480 	call	81114748 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
811114d4:	e13fff17 	ldw	r4,-4(fp)
811114d8:	111510c0 	call	8111510c <strlen>
811114dc:	10801c68 	cmpgeui	r2,r2,113
811114e0:	1000031e 	bne	r2,zero,811114f0 <vLogWriteNUC+0x64>
811114e4:	e13fff17 	ldw	r4,-4(fp)
811114e8:	111510c0 	call	8111510c <strlen>
811114ec:	00000106 	br	811114f4 <vLogWriteNUC+0x68>
811114f0:	00801c44 	movi	r2,113
811114f4:	100d883a 	mov	r6,r2
811114f8:	e17fff17 	ldw	r5,-4(fp)
811114fc:	e13fe204 	addi	r4,fp,-120
81111500:	11145f80 	call	811145f8 <memcpy>
	vSendLog ( cDataIn );
81111504:	e13fff17 	ldw	r4,-4(fp)
81111508:	110e0480 	call	8110e048 <vSendLog>
}
8111150c:	0001883a 	nop
81111510:	e037883a 	mov	sp,fp
81111514:	dfc00117 	ldw	ra,4(sp)
81111518:	df000017 	ldw	fp,0(sp)
8111151c:	dec00204 	addi	sp,sp,8
81111520:	f800283a 	ret

81111524 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
81111524:	defffd04 	addi	sp,sp,-12
81111528:	de00012e 	bgeu	sp,et,81111530 <vSimucamStructureInit+0xc>
8111152c:	003b68fa 	trap	3
81111530:	dfc00215 	stw	ra,8(sp)
81111534:	df000115 	stw	fp,4(sp)
81111538:	df000104 	addi	fp,sp,4
8111153c:	e13fff15 	stw	r4,-4(fp)
    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
81111540:	e0bfff17 	ldw	r2,-4(fp)
81111544:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
81111548:	e0bfff17 	ldw	r2,-4(fp)
8111154c:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
81111550:	e13fff17 	ldw	r4,-4(fp)
81111554:	11115c80 	call	811115c8 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
81111558:	e13fff17 	ldw	r4,-4(fp)
8111155c:	111166c0 	call	8111166c <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
81111560:	e13fff17 	ldw	r4,-4(fp)
81111564:	11117140 	call	81111714 <vLoadDefaultSyncSource>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
81111568:	e13fff17 	ldw	r4,-4(fp)
8111156c:	11117b40 	call	811117b4 <vLoadDefaultAutoResetSync>


    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
81111570:	e0bfff17 	ldw	r2,-4(fp)
81111574:	10800017 	ldw	r2,0(r2)
81111578:	10000b1e 	bne	r2,zero,811115a8 <vSimucamStructureInit+0x84>
        /* Are Normal Fee instances */
    	vNFeeControlInit( &xMeb->xFeeControl );
8111157c:	e0bfff17 	ldw	r2,-4(fp)
81111580:	10801e04 	addi	r2,r2,120
81111584:	1009883a 	mov	r4,r2
81111588:	11112200 	call	81111220 <vNFeeControlInit>
        vDataControllerInit( &xMeb->xDataControl, &xMeb->xFeeControl );
8111158c:	e0bfff17 	ldw	r2,-4(fp)
81111590:	10c00704 	addi	r3,r2,28
81111594:	e0bfff17 	ldw	r2,-4(fp)
81111598:	10801e04 	addi	r2,r2,120
8111159c:	100b883a 	mov	r5,r2
811115a0:	1809883a 	mov	r4,r3
811115a4:	110f3cc0 	call	8110f3cc <vDataControllerInit>
        /* todo: Not in use yet */
    }


    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
811115a8:	e0bfff17 	ldw	r2,-4(fp)
811115ac:	10000205 	stb	zero,8(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
811115b0:	0001883a 	nop
811115b4:	e037883a 	mov	sp,fp
811115b8:	dfc00117 	ldw	ra,4(sp)
811115bc:	df000017 	ldw	fp,0(sp)
811115c0:	dec00204 	addi	sp,sp,8
811115c4:	f800283a 	ret

811115c8 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
811115c8:	defffe04 	addi	sp,sp,-8
811115cc:	de00012e 	bgeu	sp,et,811115d4 <vLoadDefaultEPValue+0xc>
811115d0:	003b68fa 	trap	3
811115d4:	df000115 	stw	fp,4(sp)
811115d8:	df000104 	addi	fp,sp,4
811115dc:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
811115e0:	e0bfff17 	ldw	r2,-4(fp)
811115e4:	00d07234 	movhi	r3,16840
811115e8:	10c00315 	stw	r3,12(r2)
}
811115ec:	0001883a 	nop
811115f0:	e037883a 	mov	sp,fp
811115f4:	df000017 	ldw	fp,0(sp)
811115f8:	dec00104 	addi	sp,sp,4
811115fc:	f800283a 	ret

81111600 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
81111600:	defffd04 	addi	sp,sp,-12
81111604:	de00012e 	bgeu	sp,et,8111160c <vChangeEPValue+0xc>
81111608:	003b68fa 	trap	3
8111160c:	df000215 	stw	fp,8(sp)
81111610:	df000204 	addi	fp,sp,8
81111614:	e13ffe15 	stw	r4,-8(fp)
81111618:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8111161c:	e0bffe17 	ldw	r2,-8(fp)
81111620:	e0ffff17 	ldw	r3,-4(fp)
81111624:	10c00315 	stw	r3,12(r2)
}
81111628:	0001883a 	nop
8111162c:	e037883a 	mov	sp,fp
81111630:	df000017 	ldw	fp,0(sp)
81111634:	dec00104 	addi	sp,sp,4
81111638:	f800283a 	ret

8111163c <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8111163c:	defffd04 	addi	sp,sp,-12
81111640:	de00012e 	bgeu	sp,et,81111648 <vChangeDefaultEPValue+0xc>
81111644:	003b68fa 	trap	3
81111648:	df000215 	stw	fp,8(sp)
8111164c:	df000204 	addi	fp,sp,8
81111650:	e13ffe15 	stw	r4,-8(fp)
81111654:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
81111658:	0001883a 	nop
8111165c:	e037883a 	mov	sp,fp
81111660:	df000017 	ldw	fp,0(sp)
81111664:	dec00104 	addi	sp,sp,4
81111668:	f800283a 	ret

8111166c <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8111166c:	defffe04 	addi	sp,sp,-8
81111670:	de00012e 	bgeu	sp,et,81111678 <vLoadDefaultRTValue+0xc>
81111674:	003b68fa 	trap	3
81111678:	df000115 	stw	fp,4(sp)
8111167c:	df000104 	addi	fp,sp,4
81111680:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
81111684:	e0ffff17 	ldw	r3,-4(fp)
81111688:	00901eb4 	movhi	r2,16506
8111168c:	10a66684 	addi	r2,r2,-26214
81111690:	18800415 	stw	r2,16(r3)
}
81111694:	0001883a 	nop
81111698:	e037883a 	mov	sp,fp
8111169c:	df000017 	ldw	fp,0(sp)
811116a0:	dec00104 	addi	sp,sp,4
811116a4:	f800283a 	ret

811116a8 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
811116a8:	defffd04 	addi	sp,sp,-12
811116ac:	de00012e 	bgeu	sp,et,811116b4 <vChangeRTValue+0xc>
811116b0:	003b68fa 	trap	3
811116b4:	df000215 	stw	fp,8(sp)
811116b8:	df000204 	addi	fp,sp,8
811116bc:	e13ffe15 	stw	r4,-8(fp)
811116c0:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
811116c4:	e0bffe17 	ldw	r2,-8(fp)
811116c8:	e0ffff17 	ldw	r3,-4(fp)
811116cc:	10c00415 	stw	r3,16(r2)
}
811116d0:	0001883a 	nop
811116d4:	e037883a 	mov	sp,fp
811116d8:	df000017 	ldw	fp,0(sp)
811116dc:	dec00104 	addi	sp,sp,4
811116e0:	f800283a 	ret

811116e4 <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
811116e4:	defffd04 	addi	sp,sp,-12
811116e8:	de00012e 	bgeu	sp,et,811116f0 <vChangeDefaultRTValue+0xc>
811116ec:	003b68fa 	trap	3
811116f0:	df000215 	stw	fp,8(sp)
811116f4:	df000204 	addi	fp,sp,8
811116f8:	e13ffe15 	stw	r4,-8(fp)
811116fc:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
81111700:	0001883a 	nop
81111704:	e037883a 	mov	sp,fp
81111708:	df000017 	ldw	fp,0(sp)
8111170c:	dec00104 	addi	sp,sp,4
81111710:	f800283a 	ret

81111714 <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
81111714:	defffe04 	addi	sp,sp,-8
81111718:	de00012e 	bgeu	sp,et,81111720 <vLoadDefaultSyncSource+0xc>
8111171c:	003b68fa 	trap	3
81111720:	df000115 	stw	fp,4(sp)
81111724:	df000104 	addi	fp,sp,4
81111728:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8111172c:	e0bfff17 	ldw	r2,-4(fp)
81111730:	10000515 	stw	zero,20(r2)
}
81111734:	0001883a 	nop
81111738:	e037883a 	mov	sp,fp
8111173c:	df000017 	ldw	fp,0(sp)
81111740:	dec00104 	addi	sp,sp,4
81111744:	f800283a 	ret

81111748 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
81111748:	defffd04 	addi	sp,sp,-12
8111174c:	de00012e 	bgeu	sp,et,81111754 <vChangeSyncSource+0xc>
81111750:	003b68fa 	trap	3
81111754:	df000215 	stw	fp,8(sp)
81111758:	df000204 	addi	fp,sp,8
8111175c:	e13ffe15 	stw	r4,-8(fp)
81111760:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
81111764:	e0bffe17 	ldw	r2,-8(fp)
81111768:	e0ffff17 	ldw	r3,-4(fp)
8111176c:	10c00515 	stw	r3,20(r2)
}
81111770:	0001883a 	nop
81111774:	e037883a 	mov	sp,fp
81111778:	df000017 	ldw	fp,0(sp)
8111177c:	dec00104 	addi	sp,sp,4
81111780:	f800283a 	ret

81111784 <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
81111784:	defffd04 	addi	sp,sp,-12
81111788:	de00012e 	bgeu	sp,et,81111790 <vChangeDefaultSyncSource+0xc>
8111178c:	003b68fa 	trap	3
81111790:	df000215 	stw	fp,8(sp)
81111794:	df000204 	addi	fp,sp,8
81111798:	e13ffe15 	stw	r4,-8(fp)
8111179c:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
811117a0:	0001883a 	nop
811117a4:	e037883a 	mov	sp,fp
811117a8:	df000017 	ldw	fp,0(sp)
811117ac:	dec00104 	addi	sp,sp,4
811117b0:	f800283a 	ret

811117b4 <vLoadDefaultAutoResetSync>:


/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
811117b4:	defffe04 	addi	sp,sp,-8
811117b8:	de00012e 	bgeu	sp,et,811117c0 <vLoadDefaultAutoResetSync+0xc>
811117bc:	003b68fa 	trap	3
811117c0:	df000115 	stw	fp,4(sp)
811117c4:	df000104 	addi	fp,sp,4
811117c8:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
811117cc:	e0bfff17 	ldw	r2,-4(fp)
811117d0:	00c00044 	movi	r3,1
811117d4:	10c00615 	stw	r3,24(r2)
}
811117d8:	0001883a 	nop
811117dc:	e037883a 	mov	sp,fp
811117e0:	df000017 	ldw	fp,0(sp)
811117e4:	dec00104 	addi	sp,sp,4
811117e8:	f800283a 	ret

811117ec <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
811117ec:	defffd04 	addi	sp,sp,-12
811117f0:	de00012e 	bgeu	sp,et,811117f8 <vChangeAutoResetSync+0xc>
811117f4:	003b68fa 	trap	3
811117f8:	df000215 	stw	fp,8(sp)
811117fc:	df000204 	addi	fp,sp,8
81111800:	e13ffe15 	stw	r4,-8(fp)
81111804:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
81111808:	e0bffe17 	ldw	r2,-8(fp)
8111180c:	e0ffff17 	ldw	r3,-4(fp)
81111810:	10c00615 	stw	r3,24(r2)
}
81111814:	0001883a 	nop
81111818:	e037883a 	mov	sp,fp
8111181c:	df000017 	ldw	fp,0(sp)
81111820:	dec00104 	addi	sp,sp,4
81111824:	f800283a 	ret

81111828 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81111828:	defffd04 	addi	sp,sp,-12
8111182c:	de00012e 	bgeu	sp,et,81111834 <vChangeDefaultAutoResetSync+0xc>
81111830:	003b68fa 	trap	3
81111834:	df000215 	stw	fp,8(sp)
81111838:	df000204 	addi	fp,sp,8
8111183c:	e13ffe15 	stw	r4,-8(fp)
81111840:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
81111844:	0001883a 	nop
81111848:	e037883a 	mov	sp,fp
8111184c:	df000017 	ldw	fp,0(sp)
81111850:	dec00104 	addi	sp,sp,4
81111854:	f800283a 	ret

81111858 <vSyncReset>:


/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
81111858:	defffc04 	addi	sp,sp,-16
8111185c:	de00012e 	bgeu	sp,et,81111864 <vSyncReset+0xc>
81111860:	003b68fa 	trap	3
81111864:	dfc00315 	stw	ra,12(sp)
81111868:	df000215 	stw	fp,8(sp)
8111186c:	df000204 	addi	fp,sp,8
81111870:	e13ffe15 	stw	r4,-8(fp)
81111874:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(&xMeb->xFeeControl);
81111878:	e0bffe17 	ldw	r2,-8(fp)
8111187c:	10801e04 	addi	r2,r2,120
81111880:	1009883a 	mov	r4,r2
81111884:	11113180 	call	81111318 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
81111888:	0001883a 	nop
8111188c:	e037883a 	mov	sp,fp
81111890:	dfc00117 	ldw	ra,4(sp)
81111894:	df000017 	ldw	fp,0(sp)
81111898:	dec00204 	addi	sp,sp,8
8111189c:	f800283a 	ret

811118a0 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
811118a0:	defffe04 	addi	sp,sp,-8
811118a4:	de00012e 	bgeu	sp,et,811118ac <bSDcardIsPresent+0xc>
811118a8:	003b68fa 	trap	3
811118ac:	dfc00115 	stw	ra,4(sp)
811118b0:	df000015 	stw	fp,0(sp)
811118b4:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
811118b8:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
}
811118bc:	e037883a 	mov	sp,fp
811118c0:	dfc00117 	ldw	ra,4(sp)
811118c4:	df000017 	ldw	fp,0(sp)
811118c8:	dec00204 	addi	sp,sp,8
811118cc:	f800283a 	ret

811118d0 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
811118d0:	defffe04 	addi	sp,sp,-8
811118d4:	de00012e 	bgeu	sp,et,811118dc <bSDcardFAT16Check+0xc>
811118d8:	003b68fa 	trap	3
811118dc:	dfc00115 	stw	ra,4(sp)
811118e0:	df000015 	stw	fp,0(sp)
811118e4:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
811118e8:	1137c140 	call	81137c14 <alt_up_sd_card_is_FAT16>
}
811118ec:	e037883a 	mov	sp,fp
811118f0:	dfc00117 	ldw	ra,4(sp)
811118f4:	df000017 	ldw	fp,0(sp)
811118f8:	dec00204 	addi	sp,sp,8
811118fc:	f800283a 	ret

81111900 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
81111900:	defffd04 	addi	sp,sp,-12
81111904:	de00012e 	bgeu	sp,et,8111190c <bInitializeSDCard+0xc>
81111908:	003b68fa 	trap	3
8111190c:	dfc00215 	stw	ra,8(sp)
81111910:	df000115 	stw	fp,4(sp)
81111914:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
81111918:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8111191c:	d0206115 	stw	zero,-32380(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
81111920:	01204534 	movhi	r4,33044
81111924:	21065604 	addi	r4,r4,6488
81111928:	1137a840 	call	81137a84 <alt_up_sd_card_open_dev>
8111192c:	d0a06115 	stw	r2,-32380(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
81111930:	d0a06117 	ldw	r2,-32380(gp)
81111934:	10002226 	beq	r2,zero,811119c0 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
81111938:	11118a00 	call	811118a0 <bSDcardIsPresent>
8111193c:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
81111940:	e0bfff17 	ldw	r2,-4(fp)
81111944:	10001626 	beq	r2,zero,811119a0 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
81111948:	11118d00 	call	811118d0 <bSDcardFAT16Check>
8111194c:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
81111950:	e0bfff17 	ldw	r2,-4(fp)
81111954:	10000a26 	beq	r2,zero,81111980 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
81111958:	00800044 	movi	r2,1
8111195c:	d0a06015 	stw	r2,-32384(gp)
				debug(fp, "SD is up.\r\n");
81111960:	d0a05017 	ldw	r2,-32448(gp)
81111964:	100f883a 	mov	r7,r2
81111968:	018002c4 	movi	r6,11
8111196c:	01400044 	movi	r5,1
81111970:	01204534 	movhi	r4,33044
81111974:	21066104 	addi	r4,r4,6532
81111978:	1113be40 	call	81113be4 <fwrite>
8111197c:	00001806 	br	811119e0 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
81111980:	d0a05017 	ldw	r2,-32448(gp)
81111984:	100f883a 	mov	r7,r2
81111988:	01800984 	movi	r6,38
8111198c:	01400044 	movi	r5,1
81111990:	01204534 	movhi	r4,33044
81111994:	21066404 	addi	r4,r4,6544
81111998:	1113be40 	call	81113be4 <fwrite>
8111199c:	00001006 	br	811119e0 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
811119a0:	d0a05017 	ldw	r2,-32448(gp)
811119a4:	100f883a 	mov	r7,r2
811119a8:	01800744 	movi	r6,29
811119ac:	01400044 	movi	r5,1
811119b0:	01204534 	movhi	r4,33044
811119b4:	21066e04 	addi	r4,r4,6584
811119b8:	1113be40 	call	81113be4 <fwrite>
811119bc:	00000806 	br	811119e0 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
811119c0:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
811119c4:	d0a05017 	ldw	r2,-32448(gp)
811119c8:	100f883a 	mov	r7,r2
811119cc:	018008c4 	movi	r6,35
811119d0:	01400044 	movi	r5,1
811119d4:	01204534 	movhi	r4,33044
811119d8:	21067604 	addi	r4,r4,6616
811119dc:	1113be40 	call	81113be4 <fwrite>
	}

	return bSucess;
811119e0:	e0bfff17 	ldw	r2,-4(fp)
}
811119e4:	e037883a 	mov	sp,fp
811119e8:	dfc00117 	ldw	ra,4(sp)
811119ec:	df000017 	ldw	fp,0(sp)
811119f0:	dec00204 	addi	sp,sp,8
811119f4:	f800283a 	ret

811119f8 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
811119f8:	defffd04 	addi	sp,sp,-12
811119fc:	de00012e 	bgeu	sp,et,81111a04 <siOpenFile+0xc>
81111a00:	003b68fa 	trap	3
81111a04:	dfc00215 	stw	ra,8(sp)
81111a08:	df000115 	stw	fp,4(sp)
81111a0c:	df000104 	addi	fp,sp,4
81111a10:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
81111a14:	000b883a 	mov	r5,zero
81111a18:	e13fff17 	ldw	r4,-4(fp)
81111a1c:	11381200 	call	81138120 <alt_up_sd_card_fopen>
}
81111a20:	e037883a 	mov	sp,fp
81111a24:	dfc00117 	ldw	ra,4(sp)
81111a28:	df000017 	ldw	fp,0(sp)
81111a2c:	dec00204 	addi	sp,sp,8
81111a30:	f800283a 	ret

81111a34 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
81111a34:	defffd04 	addi	sp,sp,-12
81111a38:	de00012e 	bgeu	sp,et,81111a40 <siCloseFile+0xc>
81111a3c:	003b68fa 	trap	3
81111a40:	dfc00215 	stw	ra,8(sp)
81111a44:	df000115 	stw	fp,4(sp)
81111a48:	df000104 	addi	fp,sp,4
81111a4c:	2005883a 	mov	r2,r4
81111a50:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
81111a54:	e0bfff0f 	ldh	r2,-4(fp)
81111a58:	1009883a 	mov	r4,r2
81111a5c:	1138f6c0 	call	81138f6c <alt_up_sd_card_fclose>
}
81111a60:	e037883a 	mov	sp,fp
81111a64:	dfc00117 	ldw	ra,4(sp)
81111a68:	df000017 	ldw	fp,0(sp)
81111a6c:	dec00204 	addi	sp,sp,8
81111a70:	f800283a 	ret

81111a74 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81111a74:	defffd04 	addi	sp,sp,-12
81111a78:	de00012e 	bgeu	sp,et,81111a80 <cGetNextChar+0xc>
81111a7c:	003b68fa 	trap	3
81111a80:	dfc00215 	stw	ra,8(sp)
81111a84:	df000115 	stw	fp,4(sp)
81111a88:	df000104 	addi	fp,sp,4
81111a8c:	2005883a 	mov	r2,r4
81111a90:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81111a94:	e0bfff0f 	ldh	r2,-4(fp)
81111a98:	1009883a 	mov	r4,r2
81111a9c:	11385c40 	call	811385c4 <alt_up_sd_card_read>
}
81111aa0:	e037883a 	mov	sp,fp
81111aa4:	dfc00117 	ldw	ra,4(sp)
81111aa8:	df000017 	ldw	fp,0(sp)
81111aac:	dec00204 	addi	sp,sp,8
81111ab0:	f800283a 	ret

81111ab4 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
81111ab4:	deffff04 	addi	sp,sp,-4
81111ab8:	de00012e 	bgeu	sp,et,81111ac0 <bTestSimucamCriticalHW+0xc>
81111abc:	003b68fa 	trap	3
81111ac0:	df000015 	stw	fp,0(sp)
81111ac4:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
81111ac8:	00800044 	movi	r2,1
}
81111acc:	e037883a 	mov	sp,fp
81111ad0:	df000017 	ldw	fp,0(sp)
81111ad4:	dec00104 	addi	sp,sp,4
81111ad8:	f800283a 	ret

81111adc <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
81111adc:	defffc04 	addi	sp,sp,-16
81111ae0:	de00012e 	bgeu	sp,et,81111ae8 <_reg_write+0xc>
81111ae4:	003b68fa 	trap	3
81111ae8:	df000315 	stw	fp,12(sp)
81111aec:	df000304 	addi	fp,sp,12
81111af0:	e13ffd15 	stw	r4,-12(fp)
81111af4:	e17ffe15 	stw	r5,-8(fp)
81111af8:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
81111afc:	e0bffe17 	ldw	r2,-8(fp)
81111b00:	1085883a 	add	r2,r2,r2
81111b04:	1085883a 	add	r2,r2,r2
81111b08:	1007883a 	mov	r3,r2
81111b0c:	e0bffd17 	ldw	r2,-12(fp)
81111b10:	1885883a 	add	r2,r3,r2
81111b14:	1007883a 	mov	r3,r2
81111b18:	e0bfff17 	ldw	r2,-4(fp)
81111b1c:	18800035 	stwio	r2,0(r3)
	return 1;
81111b20:	00800044 	movi	r2,1

}
81111b24:	e037883a 	mov	sp,fp
81111b28:	df000017 	ldw	fp,0(sp)
81111b2c:	dec00104 	addi	sp,sp,4
81111b30:	f800283a 	ret

81111b34 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
81111b34:	defffc04 	addi	sp,sp,-16
81111b38:	de00012e 	bgeu	sp,et,81111b40 <_reg_read+0xc>
81111b3c:	003b68fa 	trap	3
81111b40:	df000315 	stw	fp,12(sp)
81111b44:	df000304 	addi	fp,sp,12
81111b48:	e13ffd15 	stw	r4,-12(fp)
81111b4c:	e17ffe15 	stw	r5,-8(fp)
81111b50:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81111b54:	e0bffe17 	ldw	r2,-8(fp)
81111b58:	1085883a 	add	r2,r2,r2
81111b5c:	1085883a 	add	r2,r2,r2
81111b60:	1007883a 	mov	r3,r2
81111b64:	e0bffd17 	ldw	r2,-12(fp)
81111b68:	1885883a 	add	r2,r3,r2
81111b6c:	10c00037 	ldwio	r3,0(r2)
81111b70:	e0bfff17 	ldw	r2,-4(fp)
81111b74:	10c00015 	stw	r3,0(r2)
	return 1;
81111b78:	00800044 	movi	r2,1

}
81111b7c:	e037883a 	mov	sp,fp
81111b80:	df000017 	ldw	fp,0(sp)
81111b84:	dec00104 	addi	sp,sp,4
81111b88:	f800283a 	ret

81111b8c <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81111b8c:	defffa04 	addi	sp,sp,-24
81111b90:	de00012e 	bgeu	sp,et,81111b98 <_print_codec_status+0xc>
81111b94:	003b68fa 	trap	3
81111b98:	dfc00515 	stw	ra,20(sp)
81111b9c:	df000415 	stw	fp,16(sp)
81111ba0:	df000404 	addi	fp,sp,16
81111ba4:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81111ba8:	e0bfff17 	ldw	r2,-4(fp)
81111bac:	1005d1ba 	srai	r2,r2,6
81111bb0:	1080004c 	andi	r2,r2,1
81111bb4:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81111bb8:	e0bfff17 	ldw	r2,-4(fp)
81111bbc:	1005d17a 	srai	r2,r2,5
81111bc0:	1080004c 	andi	r2,r2,1
81111bc4:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
81111bc8:	e0bfff17 	ldw	r2,-4(fp)
81111bcc:	1005d13a 	srai	r2,r2,4
81111bd0:	1080004c 	andi	r2,r2,1
81111bd4:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
81111bd8:	00e04534 	movhi	r3,33044
81111bdc:	18d23604 	addi	r3,r3,18648
81111be0:	00a04534 	movhi	r2,33044
81111be4:	10867f04 	addi	r2,r2,6652
81111be8:	1009883a 	mov	r4,r2
81111bec:	008005c4 	movi	r2,23
81111bf0:	100d883a 	mov	r6,r2
81111bf4:	200b883a 	mov	r5,r4
81111bf8:	1809883a 	mov	r4,r3
81111bfc:	11145f80 	call	811145f8 <memcpy>
	debug(fp, cDebugBuffer);
81111c00:	d0a05017 	ldw	r2,-32448(gp)
81111c04:	01604534 	movhi	r5,33044
81111c08:	29523604 	addi	r5,r5,18648
81111c0c:	1009883a 	mov	r4,r2
81111c10:	11135480 	call	81113548 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
81111c14:	e0bffc17 	ldw	r2,-16(fp)
81111c18:	10800058 	cmpnei	r2,r2,1
81111c1c:	1000031e 	bne	r2,zero,81111c2c <_print_codec_status+0xa0>
81111c20:	00a04534 	movhi	r2,33044
81111c24:	10868504 	addi	r2,r2,6676
81111c28:	00000206 	br	81111c34 <_print_codec_status+0xa8>
81111c2c:	00a04534 	movhi	r2,33044
81111c30:	10868604 	addi	r2,r2,6680
81111c34:	100d883a 	mov	r6,r2
81111c38:	01604534 	movhi	r5,33044
81111c3c:	29468704 	addi	r5,r5,6684
81111c40:	01204534 	movhi	r4,33044
81111c44:	21123604 	addi	r4,r4,18648
81111c48:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81111c4c:	d0a05017 	ldw	r2,-32448(gp)
81111c50:	01604534 	movhi	r5,33044
81111c54:	29523604 	addi	r5,r5,18648
81111c58:	1009883a 	mov	r4,r2
81111c5c:	11135480 	call	81113548 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
81111c60:	e0bffd17 	ldw	r2,-12(fp)
81111c64:	10800058 	cmpnei	r2,r2,1
81111c68:	1000031e 	bne	r2,zero,81111c78 <_print_codec_status+0xec>
81111c6c:	00a04534 	movhi	r2,33044
81111c70:	10868504 	addi	r2,r2,6676
81111c74:	00000206 	br	81111c80 <_print_codec_status+0xf4>
81111c78:	00a04534 	movhi	r2,33044
81111c7c:	10868604 	addi	r2,r2,6680
81111c80:	100d883a 	mov	r6,r2
81111c84:	01604534 	movhi	r5,33044
81111c88:	29468d04 	addi	r5,r5,6708
81111c8c:	01204534 	movhi	r4,33044
81111c90:	21123604 	addi	r4,r4,18648
81111c94:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81111c98:	d0a05017 	ldw	r2,-32448(gp)
81111c9c:	01604534 	movhi	r5,33044
81111ca0:	29523604 	addi	r5,r5,18648
81111ca4:	1009883a 	mov	r4,r2
81111ca8:	11135480 	call	81113548 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
81111cac:	e0bffe17 	ldw	r2,-8(fp)
81111cb0:	10800058 	cmpnei	r2,r2,1
81111cb4:	1000031e 	bne	r2,zero,81111cc4 <_print_codec_status+0x138>
81111cb8:	00a04534 	movhi	r2,33044
81111cbc:	10868504 	addi	r2,r2,6676
81111cc0:	00000206 	br	81111ccc <_print_codec_status+0x140>
81111cc4:	00a04534 	movhi	r2,33044
81111cc8:	10868604 	addi	r2,r2,6680
81111ccc:	100d883a 	mov	r6,r2
81111cd0:	01604534 	movhi	r5,33044
81111cd4:	29469304 	addi	r5,r5,6732
81111cd8:	01204534 	movhi	r4,33044
81111cdc:	21123604 	addi	r4,r4,18648
81111ce0:	1114ef80 	call	81114ef8 <sprintf>
	debug(fp, cDebugBuffer);
81111ce4:	d0a05017 	ldw	r2,-32448(gp)
81111ce8:	01604534 	movhi	r5,33044
81111cec:	29523604 	addi	r5,r5,18648
81111cf0:	1009883a 	mov	r4,r2
81111cf4:	11135480 	call	81113548 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
81111cf8:	00a04534 	movhi	r2,33044
81111cfc:	10923604 	addi	r2,r2,18648
81111d00:	00c00b44 	movi	r3,45
81111d04:	10c00005 	stb	r3,0(r2)
81111d08:	00c00b44 	movi	r3,45
81111d0c:	10c00045 	stb	r3,1(r2)
81111d10:	00c00b44 	movi	r3,45
81111d14:	10c00085 	stb	r3,2(r2)
81111d18:	00c00b44 	movi	r3,45
81111d1c:	10c000c5 	stb	r3,3(r2)
81111d20:	00c00b44 	movi	r3,45
81111d24:	10c00105 	stb	r3,4(r2)
81111d28:	00c00b44 	movi	r3,45
81111d2c:	10c00145 	stb	r3,5(r2)
81111d30:	00c00b44 	movi	r3,45
81111d34:	10c00185 	stb	r3,6(r2)
81111d38:	00c00b44 	movi	r3,45
81111d3c:	10c001c5 	stb	r3,7(r2)
81111d40:	00c00804 	movi	r3,32
81111d44:	10c00205 	stb	r3,8(r2)
81111d48:	00c00804 	movi	r3,32
81111d4c:	10c00245 	stb	r3,9(r2)
81111d50:	00c00284 	movi	r3,10
81111d54:	10c00285 	stb	r3,10(r2)
81111d58:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
81111d5c:	d0a05017 	ldw	r2,-32448(gp)
81111d60:	01604534 	movhi	r5,33044
81111d64:	29523604 	addi	r5,r5,18648
81111d68:	1009883a 	mov	r4,r2
81111d6c:	11135480 	call	81113548 <fprintf>
#endif
}
81111d70:	0001883a 	nop
81111d74:	e037883a 	mov	sp,fp
81111d78:	dfc00117 	ldw	ra,4(sp)
81111d7c:	df000017 	ldw	fp,0(sp)
81111d80:	dec00204 	addi	sp,sp,8
81111d84:	f800283a 	ret

81111d88 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81111d88:	defffb04 	addi	sp,sp,-20
81111d8c:	de00012e 	bgeu	sp,et,81111d94 <_split_codec_status+0xc>
81111d90:	003b68fa 	trap	3
81111d94:	df000415 	stw	fp,16(sp)
81111d98:	df000404 	addi	fp,sp,16
81111d9c:	e13ffc15 	stw	r4,-16(fp)
81111da0:	e17ffd15 	stw	r5,-12(fp)
81111da4:	e1bffe15 	stw	r6,-8(fp)
81111da8:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81111dac:	e0bffc17 	ldw	r2,-16(fp)
81111db0:	1005d1ba 	srai	r2,r2,6
81111db4:	10c0004c 	andi	r3,r2,1
81111db8:	e0bffd17 	ldw	r2,-12(fp)
81111dbc:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
81111dc0:	e0bffc17 	ldw	r2,-16(fp)
81111dc4:	1005d17a 	srai	r2,r2,5
81111dc8:	10c0004c 	andi	r3,r2,1
81111dcc:	e0bffe17 	ldw	r2,-8(fp)
81111dd0:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
81111dd4:	e0bffc17 	ldw	r2,-16(fp)
81111dd8:	1005d13a 	srai	r2,r2,4
81111ddc:	10c0004c 	andi	r3,r2,1
81111de0:	e0bfff17 	ldw	r2,-4(fp)
81111de4:	10c00015 	stw	r3,0(r2)
}
81111de8:	0001883a 	nop
81111dec:	e037883a 	mov	sp,fp
81111df0:	df000017 	ldw	fp,0(sp)
81111df4:	dec00104 	addi	sp,sp,4
81111df8:	f800283a 	ret

81111dfc <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
81111dfc:	defffc04 	addi	sp,sp,-16
81111e00:	de00012e 	bgeu	sp,et,81111e08 <aatoh+0xc>
81111e04:	003b68fa 	trap	3
81111e08:	df000315 	stw	fp,12(sp)
81111e0c:	df000304 	addi	fp,sp,12
81111e10:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
81111e14:	e0bfff17 	ldw	r2,-4(fp)
81111e18:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81111e1c:	e0bffd17 	ldw	r2,-12(fp)
81111e20:	10c00003 	ldbu	r3,0(r2)
81111e24:	e0bffd17 	ldw	r2,-12(fp)
81111e28:	10800003 	ldbu	r2,0(r2)
81111e2c:	10803fcc 	andi	r2,r2,255
81111e30:	10800eb0 	cmpltui	r2,r2,58
81111e34:	1000021e 	bne	r2,zero,81111e40 <aatoh+0x44>
81111e38:	00800dc4 	movi	r2,55
81111e3c:	00000106 	br	81111e44 <aatoh+0x48>
81111e40:	00800c04 	movi	r2,48
81111e44:	1885c83a 	sub	r2,r3,r2
81111e48:	1004913a 	slli	r2,r2,4
81111e4c:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
81111e50:	e0bffd17 	ldw	r2,-12(fp)
81111e54:	10800044 	addi	r2,r2,1
81111e58:	10c00003 	ldbu	r3,0(r2)
81111e5c:	e0bffd17 	ldw	r2,-12(fp)
81111e60:	10800044 	addi	r2,r2,1
81111e64:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81111e68:	10803fcc 	andi	r2,r2,255
81111e6c:	10800eb0 	cmpltui	r2,r2,58
81111e70:	1000021e 	bne	r2,zero,81111e7c <aatoh+0x80>
81111e74:	00800dc4 	movi	r2,55
81111e78:	00000106 	br	81111e80 <aatoh+0x84>
81111e7c:	00800c04 	movi	r2,48
81111e80:	1885c83a 	sub	r2,r3,r2
81111e84:	2085883a 	add	r2,r4,r2
81111e88:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81111e8c:	e0bffe03 	ldbu	r2,-8(fp)
}
81111e90:	e037883a 	mov	sp,fp
81111e94:	df000017 	ldw	fp,0(sp)
81111e98:	dec00104 	addi	sp,sp,4
81111e9c:	f800283a 	ret

81111ea0 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
81111ea0:	defffd04 	addi	sp,sp,-12
81111ea4:	de00012e 	bgeu	sp,et,81111eac <Verif_Error+0xc>
81111ea8:	003b68fa 	trap	3
81111eac:	dfc00215 	stw	ra,8(sp)
81111eb0:	df000115 	stw	fp,4(sp)
81111eb4:	df000104 	addi	fp,sp,4
81111eb8:	2005883a 	mov	r2,r4
81111ebc:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
81111ec0:	e0bfff03 	ldbu	r2,-4(fp)
81111ec4:	1000091e 	bne	r2,zero,81111eec <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
81111ec8:	d0a05017 	ldw	r2,-32448(gp)
81111ecc:	100f883a 	mov	r7,r2
81111ed0:	018001c4 	movi	r6,7
81111ed4:	01400044 	movi	r5,1
81111ed8:	01204534 	movhi	r4,33044
81111edc:	21069904 	addi	r4,r4,6756
81111ee0:	1113be40 	call	81113be4 <fwrite>
#endif
		return 0;
81111ee4:	0005883a 	mov	r2,zero
81111ee8:	00000106 	br	81111ef0 <Verif_Error+0x50>
	} else
		return 1;
81111eec:	00800044 	movi	r2,1
}
81111ef0:	e037883a 	mov	sp,fp
81111ef4:	dfc00117 	ldw	ra,4(sp)
81111ef8:	df000017 	ldw	fp,0(sp)
81111efc:	dec00204 	addi	sp,sp,8
81111f00:	f800283a 	ret

81111f04 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
81111f04:	defffe04 	addi	sp,sp,-8
81111f08:	de00012e 	bgeu	sp,et,81111f10 <toInt+0xc>
81111f0c:	003b68fa 	trap	3
81111f10:	df000115 	stw	fp,4(sp)
81111f14:	df000104 	addi	fp,sp,4
81111f18:	2005883a 	mov	r2,r4
81111f1c:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
81111f20:	e0bfff03 	ldbu	r2,-4(fp)
81111f24:	10bff404 	addi	r2,r2,-48
}
81111f28:	e037883a 	mov	sp,fp
81111f2c:	df000017 	ldw	fp,0(sp)
81111f30:	dec00104 	addi	sp,sp,4
81111f34:	f800283a 	ret

81111f38 <__divsf3>:
81111f38:	defff504 	addi	sp,sp,-44
81111f3c:	200cd5fa 	srli	r6,r4,23
81111f40:	de00012e 	bgeu	sp,et,81111f48 <__divsf3+0x10>
81111f44:	003b68fa 	trap	3
81111f48:	dcc00415 	stw	r19,16(sp)
81111f4c:	2026d7fa 	srli	r19,r4,31
81111f50:	00c02034 	movhi	r3,128
81111f54:	dd800715 	stw	r22,28(sp)
81111f58:	dd000515 	stw	r20,20(sp)
81111f5c:	dc800315 	stw	r18,12(sp)
81111f60:	18ffffc4 	addi	r3,r3,-1
81111f64:	dfc00a15 	stw	ra,40(sp)
81111f68:	df000915 	stw	fp,36(sp)
81111f6c:	ddc00815 	stw	r23,32(sp)
81111f70:	dd400615 	stw	r21,24(sp)
81111f74:	dc400215 	stw	r17,8(sp)
81111f78:	dc000115 	stw	r16,4(sp)
81111f7c:	35003fcc 	andi	r20,r6,255
81111f80:	1924703a 	and	r18,r3,r4
81111f84:	9d803fcc 	andi	r22,r19,255
81111f88:	a0005226 	beq	r20,zero,811120d4 <__divsf3+0x19c>
81111f8c:	00803fc4 	movi	r2,255
81111f90:	a0802e26 	beq	r20,r2,8111204c <__divsf3+0x114>
81111f94:	91002034 	orhi	r4,r18,128
81111f98:	202490fa 	slli	r18,r4,3
81111f9c:	a53fe044 	addi	r20,r20,-127
81111fa0:	0021883a 	mov	r16,zero
81111fa4:	002f883a 	mov	r23,zero
81111fa8:	280cd5fa 	srli	r6,r5,23
81111fac:	282ad7fa 	srli	r21,r5,31
81111fb0:	00c02034 	movhi	r3,128
81111fb4:	18ffffc4 	addi	r3,r3,-1
81111fb8:	31803fcc 	andi	r6,r6,255
81111fbc:	1962703a 	and	r17,r3,r5
81111fc0:	af003fcc 	andi	fp,r21,255
81111fc4:	30004a26 	beq	r6,zero,811120f0 <__divsf3+0x1b8>
81111fc8:	00803fc4 	movi	r2,255
81111fcc:	30804526 	beq	r6,r2,811120e4 <__divsf3+0x1ac>
81111fd0:	89402034 	orhi	r5,r17,128
81111fd4:	282290fa 	slli	r17,r5,3
81111fd8:	31bfe044 	addi	r6,r6,-127
81111fdc:	000b883a 	mov	r5,zero
81111fe0:	2c20b03a 	or	r16,r5,r16
81111fe4:	802090ba 	slli	r16,r16,2
81111fe8:	00a04474 	movhi	r2,33041
81111fec:	10880304 	addi	r2,r2,8204
81111ff0:	80a1883a 	add	r16,r16,r2
81111ff4:	81000017 	ldw	r4,0(r16)
81111ff8:	9d46f03a 	xor	r3,r19,r21
81111ffc:	180f883a 	mov	r7,r3
81112000:	18803fcc 	andi	r2,r3,255
81112004:	a18dc83a 	sub	r6,r20,r6
81112008:	2000683a 	jmp	r4
8111200c:	811121f0 	cmpltui	r4,r16,17543
81112010:	81112074 	orhi	r4,r16,17537
81112014:	811121e4 	muli	r4,r16,17543
81112018:	81112060 	cmpeqi	r4,r16,17537
8111201c:	811121e4 	muli	r4,r16,17543
81112020:	811121bc 	xorhi	r4,r16,17542
81112024:	811121e4 	muli	r4,r16,17543
81112028:	81112060 	cmpeqi	r4,r16,17537
8111202c:	81112074 	orhi	r4,r16,17537
81112030:	81112074 	orhi	r4,r16,17537
81112034:	811121bc 	xorhi	r4,r16,17542
81112038:	81112060 	cmpeqi	r4,r16,17537
8111203c:	811122d0 	cmplti	r4,r16,17547
81112040:	811122d0 	cmplti	r4,r16,17547
81112044:	811122d0 	cmplti	r4,r16,17547
81112048:	81112284 	addi	r4,r16,17546
8111204c:	9000581e 	bne	r18,zero,811121b0 <__divsf3+0x278>
81112050:	04000204 	movi	r16,8
81112054:	05c00084 	movi	r23,2
81112058:	003fd306 	br	81111fa8 <__reset+0xfb0f1fa8>
8111205c:	0023883a 	mov	r17,zero
81112060:	e02d883a 	mov	r22,fp
81112064:	282f883a 	mov	r23,r5
81112068:	00800084 	movi	r2,2
8111206c:	b8808f1e 	bne	r23,r2,811122ac <__divsf3+0x374>
81112070:	b005883a 	mov	r2,r22
81112074:	11c0004c 	andi	r7,r2,1
81112078:	013fffc4 	movi	r4,-1
8111207c:	000d883a 	mov	r6,zero
81112080:	21003fcc 	andi	r4,r4,255
81112084:	200895fa 	slli	r4,r4,23
81112088:	38803fcc 	andi	r2,r7,255
8111208c:	00c02034 	movhi	r3,128
81112090:	100497fa 	slli	r2,r2,31
81112094:	18ffffc4 	addi	r3,r3,-1
81112098:	30c6703a 	and	r3,r6,r3
8111209c:	1906b03a 	or	r3,r3,r4
811120a0:	1884b03a 	or	r2,r3,r2
811120a4:	dfc00a17 	ldw	ra,40(sp)
811120a8:	df000917 	ldw	fp,36(sp)
811120ac:	ddc00817 	ldw	r23,32(sp)
811120b0:	dd800717 	ldw	r22,28(sp)
811120b4:	dd400617 	ldw	r21,24(sp)
811120b8:	dd000517 	ldw	r20,20(sp)
811120bc:	dcc00417 	ldw	r19,16(sp)
811120c0:	dc800317 	ldw	r18,12(sp)
811120c4:	dc400217 	ldw	r17,8(sp)
811120c8:	dc000117 	ldw	r16,4(sp)
811120cc:	dec00b04 	addi	sp,sp,44
811120d0:	f800283a 	ret
811120d4:	90002b1e 	bne	r18,zero,81112184 <__divsf3+0x24c>
811120d8:	04000104 	movi	r16,4
811120dc:	05c00044 	movi	r23,1
811120e0:	003fb106 	br	81111fa8 <__reset+0xfb0f1fa8>
811120e4:	8800251e 	bne	r17,zero,8111217c <__divsf3+0x244>
811120e8:	01400084 	movi	r5,2
811120ec:	00000206 	br	811120f8 <__divsf3+0x1c0>
811120f0:	88001a1e 	bne	r17,zero,8111215c <__divsf3+0x224>
811120f4:	01400044 	movi	r5,1
811120f8:	8160b03a 	or	r16,r16,r5
811120fc:	802090ba 	slli	r16,r16,2
81112100:	00e04474 	movhi	r3,33041
81112104:	18c84704 	addi	r3,r3,8476
81112108:	80e1883a 	add	r16,r16,r3
8111210c:	80c00017 	ldw	r3,0(r16)
81112110:	9d44f03a 	xor	r2,r19,r21
81112114:	a18dc83a 	sub	r6,r20,r6
81112118:	1800683a 	jmp	r3
8111211c:	81112074 	orhi	r4,r16,17537
81112120:	81112074 	orhi	r4,r16,17537
81112124:	811122c0 	call	8811122c <__reset+0x20f122c>
81112128:	8111205c 	xori	r4,r16,17537
8111212c:	811122c0 	call	8811122c <__reset+0x20f122c>
81112130:	811121bc 	xorhi	r4,r16,17542
81112134:	811122c0 	call	8811122c <__reset+0x20f122c>
81112138:	8111205c 	xori	r4,r16,17537
8111213c:	81112074 	orhi	r4,r16,17537
81112140:	81112074 	orhi	r4,r16,17537
81112144:	811121bc 	xorhi	r4,r16,17542
81112148:	8111205c 	xori	r4,r16,17537
8111214c:	811122d0 	cmplti	r4,r16,17547
81112150:	811122d0 	cmplti	r4,r16,17547
81112154:	811122d0 	cmplti	r4,r16,17547
81112158:	811122e8 	cmpgeui	r4,r16,17547
8111215c:	8809883a 	mov	r4,r17
81112160:	11133880 	call	81113388 <__clzsi2>
81112164:	10fffec4 	addi	r3,r2,-5
81112168:	10801d84 	addi	r2,r2,118
8111216c:	88e2983a 	sll	r17,r17,r3
81112170:	008dc83a 	sub	r6,zero,r2
81112174:	000b883a 	mov	r5,zero
81112178:	003f9906 	br	81111fe0 <__reset+0xfb0f1fe0>
8111217c:	014000c4 	movi	r5,3
81112180:	003f9706 	br	81111fe0 <__reset+0xfb0f1fe0>
81112184:	9009883a 	mov	r4,r18
81112188:	d9400015 	stw	r5,0(sp)
8111218c:	11133880 	call	81113388 <__clzsi2>
81112190:	10fffec4 	addi	r3,r2,-5
81112194:	11801d84 	addi	r6,r2,118
81112198:	90e4983a 	sll	r18,r18,r3
8111219c:	01a9c83a 	sub	r20,zero,r6
811121a0:	0021883a 	mov	r16,zero
811121a4:	002f883a 	mov	r23,zero
811121a8:	d9400017 	ldw	r5,0(sp)
811121ac:	003f7e06 	br	81111fa8 <__reset+0xfb0f1fa8>
811121b0:	04000304 	movi	r16,12
811121b4:	05c000c4 	movi	r23,3
811121b8:	003f7b06 	br	81111fa8 <__reset+0xfb0f1fa8>
811121bc:	01802034 	movhi	r6,128
811121c0:	000f883a 	mov	r7,zero
811121c4:	31bfffc4 	addi	r6,r6,-1
811121c8:	013fffc4 	movi	r4,-1
811121cc:	003fac06 	br	81112080 <__reset+0xfb0f2080>
811121d0:	01400044 	movi	r5,1
811121d4:	2909c83a 	sub	r4,r5,r4
811121d8:	00c006c4 	movi	r3,27
811121dc:	19004b0e 	bge	r3,r4,8111230c <__divsf3+0x3d4>
811121e0:	114e703a 	and	r7,r2,r5
811121e4:	0009883a 	mov	r4,zero
811121e8:	000d883a 	mov	r6,zero
811121ec:	003fa406 	br	81112080 <__reset+0xfb0f2080>
811121f0:	9006917a 	slli	r3,r18,5
811121f4:	8822917a 	slli	r17,r17,5
811121f8:	1c40372e 	bgeu	r3,r17,811122d8 <__divsf3+0x3a0>
811121fc:	31bfffc4 	addi	r6,r6,-1
81112200:	010006c4 	movi	r4,27
81112204:	000b883a 	mov	r5,zero
81112208:	180f883a 	mov	r7,r3
8111220c:	294b883a 	add	r5,r5,r5
81112210:	18c7883a 	add	r3,r3,r3
81112214:	38000116 	blt	r7,zero,8111221c <__divsf3+0x2e4>
81112218:	1c400236 	bltu	r3,r17,81112224 <__divsf3+0x2ec>
8111221c:	1c47c83a 	sub	r3,r3,r17
81112220:	29400054 	ori	r5,r5,1
81112224:	213fffc4 	addi	r4,r4,-1
81112228:	203ff71e 	bne	r4,zero,81112208 <__reset+0xfb0f2208>
8111222c:	1806c03a 	cmpne	r3,r3,zero
81112230:	1962b03a 	or	r17,r3,r5
81112234:	31001fc4 	addi	r4,r6,127
81112238:	013fe50e 	bge	zero,r4,811121d0 <__reset+0xfb0f21d0>
8111223c:	88c001cc 	andi	r3,r17,7
81112240:	18000426 	beq	r3,zero,81112254 <__divsf3+0x31c>
81112244:	88c003cc 	andi	r3,r17,15
81112248:	01400104 	movi	r5,4
8111224c:	19400126 	beq	r3,r5,81112254 <__divsf3+0x31c>
81112250:	8963883a 	add	r17,r17,r5
81112254:	88c2002c 	andhi	r3,r17,2048
81112258:	18000426 	beq	r3,zero,8111226c <__divsf3+0x334>
8111225c:	00fe0034 	movhi	r3,63488
81112260:	18ffffc4 	addi	r3,r3,-1
81112264:	31002004 	addi	r4,r6,128
81112268:	88e2703a 	and	r17,r17,r3
8111226c:	00c03f84 	movi	r3,254
81112270:	193f8016 	blt	r3,r4,81112074 <__reset+0xfb0f2074>
81112274:	880c91ba 	slli	r6,r17,6
81112278:	11c0004c 	andi	r7,r2,1
8111227c:	300cd27a 	srli	r6,r6,9
81112280:	003f7f06 	br	81112080 <__reset+0xfb0f2080>
81112284:	9080102c 	andhi	r2,r18,64
81112288:	10000226 	beq	r2,zero,81112294 <__divsf3+0x35c>
8111228c:	8880102c 	andhi	r2,r17,64
81112290:	10001826 	beq	r2,zero,811122f4 <__divsf3+0x3bc>
81112294:	00802034 	movhi	r2,128
81112298:	91801034 	orhi	r6,r18,64
8111229c:	10bfffc4 	addi	r2,r2,-1
811122a0:	980f883a 	mov	r7,r19
811122a4:	308c703a 	and	r6,r6,r2
811122a8:	003fc706 	br	811121c8 <__reset+0xfb0f21c8>
811122ac:	008000c4 	movi	r2,3
811122b0:	b8802d26 	beq	r23,r2,81112368 <__divsf3+0x430>
811122b4:	00c00044 	movi	r3,1
811122b8:	b005883a 	mov	r2,r22
811122bc:	b8ffdd1e 	bne	r23,r3,81112234 <__reset+0xfb0f2234>
811122c0:	11c0004c 	andi	r7,r2,1
811122c4:	0009883a 	mov	r4,zero
811122c8:	000d883a 	mov	r6,zero
811122cc:	003f6c06 	br	81112080 <__reset+0xfb0f2080>
811122d0:	9023883a 	mov	r17,r18
811122d4:	003f6406 	br	81112068 <__reset+0xfb0f2068>
811122d8:	1c47c83a 	sub	r3,r3,r17
811122dc:	01000684 	movi	r4,26
811122e0:	01400044 	movi	r5,1
811122e4:	003fc806 	br	81112208 <__reset+0xfb0f2208>
811122e8:	9080102c 	andhi	r2,r18,64
811122ec:	103fe926 	beq	r2,zero,81112294 <__reset+0xfb0f2294>
811122f0:	0023883a 	mov	r17,zero
811122f4:	00802034 	movhi	r2,128
811122f8:	89801034 	orhi	r6,r17,64
811122fc:	10bfffc4 	addi	r2,r2,-1
81112300:	a80f883a 	mov	r7,r21
81112304:	308c703a 	and	r6,r6,r2
81112308:	003faf06 	br	811121c8 <__reset+0xfb0f21c8>
8111230c:	01c00804 	movi	r7,32
81112310:	390fc83a 	sub	r7,r7,r4
81112314:	89ce983a 	sll	r7,r17,r7
81112318:	890ad83a 	srl	r5,r17,r4
8111231c:	380ec03a 	cmpne	r7,r7,zero
81112320:	29cab03a 	or	r5,r5,r7
81112324:	28c001cc 	andi	r3,r5,7
81112328:	18000426 	beq	r3,zero,8111233c <__divsf3+0x404>
8111232c:	28c003cc 	andi	r3,r5,15
81112330:	01000104 	movi	r4,4
81112334:	19000126 	beq	r3,r4,8111233c <__divsf3+0x404>
81112338:	290b883a 	add	r5,r5,r4
8111233c:	28c1002c 	andhi	r3,r5,1024
81112340:	18000426 	beq	r3,zero,81112354 <__divsf3+0x41c>
81112344:	11c0004c 	andi	r7,r2,1
81112348:	01000044 	movi	r4,1
8111234c:	000d883a 	mov	r6,zero
81112350:	003f4b06 	br	81112080 <__reset+0xfb0f2080>
81112354:	280a91ba 	slli	r5,r5,6
81112358:	11c0004c 	andi	r7,r2,1
8111235c:	0009883a 	mov	r4,zero
81112360:	280cd27a 	srli	r6,r5,9
81112364:	003f4606 	br	81112080 <__reset+0xfb0f2080>
81112368:	00802034 	movhi	r2,128
8111236c:	89801034 	orhi	r6,r17,64
81112370:	10bfffc4 	addi	r2,r2,-1
81112374:	b00f883a 	mov	r7,r22
81112378:	308c703a 	and	r6,r6,r2
8111237c:	003f9206 	br	811121c8 <__reset+0xfb0f21c8>

81112380 <__mulsf3>:
81112380:	defff504 	addi	sp,sp,-44
81112384:	de00012e 	bgeu	sp,et,8111238c <__mulsf3+0xc>
81112388:	003b68fa 	trap	3
8111238c:	dc000115 	stw	r16,4(sp)
81112390:	2020d5fa 	srli	r16,r4,23
81112394:	dd400615 	stw	r21,24(sp)
81112398:	202ad7fa 	srli	r21,r4,31
8111239c:	dc800315 	stw	r18,12(sp)
811123a0:	04802034 	movhi	r18,128
811123a4:	df000915 	stw	fp,36(sp)
811123a8:	dd000515 	stw	r20,20(sp)
811123ac:	94bfffc4 	addi	r18,r18,-1
811123b0:	dfc00a15 	stw	ra,40(sp)
811123b4:	ddc00815 	stw	r23,32(sp)
811123b8:	dd800715 	stw	r22,28(sp)
811123bc:	dcc00415 	stw	r19,16(sp)
811123c0:	dc400215 	stw	r17,8(sp)
811123c4:	84003fcc 	andi	r16,r16,255
811123c8:	9124703a 	and	r18,r18,r4
811123cc:	a829883a 	mov	r20,r21
811123d0:	af003fcc 	andi	fp,r21,255
811123d4:	80005426 	beq	r16,zero,81112528 <__mulsf3+0x1a8>
811123d8:	00803fc4 	movi	r2,255
811123dc:	80802f26 	beq	r16,r2,8111249c <__mulsf3+0x11c>
811123e0:	91002034 	orhi	r4,r18,128
811123e4:	202490fa 	slli	r18,r4,3
811123e8:	843fe044 	addi	r16,r16,-127
811123ec:	0023883a 	mov	r17,zero
811123f0:	002f883a 	mov	r23,zero
811123f4:	2804d5fa 	srli	r2,r5,23
811123f8:	282cd7fa 	srli	r22,r5,31
811123fc:	01002034 	movhi	r4,128
81112400:	213fffc4 	addi	r4,r4,-1
81112404:	10803fcc 	andi	r2,r2,255
81112408:	2166703a 	and	r19,r4,r5
8111240c:	b1803fcc 	andi	r6,r22,255
81112410:	10004c26 	beq	r2,zero,81112544 <__mulsf3+0x1c4>
81112414:	00c03fc4 	movi	r3,255
81112418:	10c04726 	beq	r2,r3,81112538 <__mulsf3+0x1b8>
8111241c:	99002034 	orhi	r4,r19,128
81112420:	202690fa 	slli	r19,r4,3
81112424:	10bfe044 	addi	r2,r2,-127
81112428:	0007883a 	mov	r3,zero
8111242c:	80a1883a 	add	r16,r16,r2
81112430:	010003c4 	movi	r4,15
81112434:	1c44b03a 	or	r2,r3,r17
81112438:	b56af03a 	xor	r21,r22,r21
8111243c:	81c00044 	addi	r7,r16,1
81112440:	20806b36 	bltu	r4,r2,811125f0 <__mulsf3+0x270>
81112444:	100490ba 	slli	r2,r2,2
81112448:	01204474 	movhi	r4,33041
8111244c:	21091704 	addi	r4,r4,9308
81112450:	1105883a 	add	r2,r2,r4
81112454:	10800017 	ldw	r2,0(r2)
81112458:	1000683a 	jmp	r2
8111245c:	811125f0 	cmpltui	r4,r16,17559
81112460:	811124b0 	cmpltui	r4,r16,17554
81112464:	811124b0 	cmpltui	r4,r16,17554
81112468:	811124ac 	andhi	r4,r16,17554
8111246c:	811125d4 	ori	r4,r16,17559
81112470:	811125d4 	ori	r4,r16,17559
81112474:	811125c0 	call	8811125c <__reset+0x20f125c>
81112478:	811124ac 	andhi	r4,r16,17554
8111247c:	811125d4 	ori	r4,r16,17559
81112480:	811125c0 	call	8811125c <__reset+0x20f125c>
81112484:	811125d4 	ori	r4,r16,17559
81112488:	811124ac 	andhi	r4,r16,17554
8111248c:	811125e0 	cmpeqi	r4,r16,17559
81112490:	811125e0 	cmpeqi	r4,r16,17559
81112494:	811125e0 	cmpeqi	r4,r16,17559
81112498:	811126bc 	xorhi	r4,r16,17562
8111249c:	90003b1e 	bne	r18,zero,8111258c <__mulsf3+0x20c>
811124a0:	04400204 	movi	r17,8
811124a4:	05c00084 	movi	r23,2
811124a8:	003fd206 	br	811123f4 <__reset+0xfb0f23f4>
811124ac:	302b883a 	mov	r21,r6
811124b0:	00800084 	movi	r2,2
811124b4:	18802626 	beq	r3,r2,81112550 <__mulsf3+0x1d0>
811124b8:	008000c4 	movi	r2,3
811124bc:	1880ab26 	beq	r3,r2,8111276c <__mulsf3+0x3ec>
811124c0:	00800044 	movi	r2,1
811124c4:	1880a21e 	bne	r3,r2,81112750 <__mulsf3+0x3d0>
811124c8:	a829883a 	mov	r20,r21
811124cc:	0007883a 	mov	r3,zero
811124d0:	0009883a 	mov	r4,zero
811124d4:	18803fcc 	andi	r2,r3,255
811124d8:	100695fa 	slli	r3,r2,23
811124dc:	a0803fcc 	andi	r2,r20,255
811124e0:	100a97fa 	slli	r5,r2,31
811124e4:	00802034 	movhi	r2,128
811124e8:	10bfffc4 	addi	r2,r2,-1
811124ec:	2084703a 	and	r2,r4,r2
811124f0:	10c4b03a 	or	r2,r2,r3
811124f4:	1144b03a 	or	r2,r2,r5
811124f8:	dfc00a17 	ldw	ra,40(sp)
811124fc:	df000917 	ldw	fp,36(sp)
81112500:	ddc00817 	ldw	r23,32(sp)
81112504:	dd800717 	ldw	r22,28(sp)
81112508:	dd400617 	ldw	r21,24(sp)
8111250c:	dd000517 	ldw	r20,20(sp)
81112510:	dcc00417 	ldw	r19,16(sp)
81112514:	dc800317 	ldw	r18,12(sp)
81112518:	dc400217 	ldw	r17,8(sp)
8111251c:	dc000117 	ldw	r16,4(sp)
81112520:	dec00b04 	addi	sp,sp,44
81112524:	f800283a 	ret
81112528:	90000d1e 	bne	r18,zero,81112560 <__mulsf3+0x1e0>
8111252c:	04400104 	movi	r17,4
81112530:	05c00044 	movi	r23,1
81112534:	003faf06 	br	811123f4 <__reset+0xfb0f23f4>
81112538:	9806c03a 	cmpne	r3,r19,zero
8111253c:	18c00084 	addi	r3,r3,2
81112540:	003fba06 	br	8111242c <__reset+0xfb0f242c>
81112544:	9800141e 	bne	r19,zero,81112598 <__mulsf3+0x218>
81112548:	00c00044 	movi	r3,1
8111254c:	003fb706 	br	8111242c <__reset+0xfb0f242c>
81112550:	a829883a 	mov	r20,r21
81112554:	00ffffc4 	movi	r3,-1
81112558:	0009883a 	mov	r4,zero
8111255c:	003fdd06 	br	811124d4 <__reset+0xfb0f24d4>
81112560:	9009883a 	mov	r4,r18
81112564:	d9400015 	stw	r5,0(sp)
81112568:	11133880 	call	81113388 <__clzsi2>
8111256c:	10fffec4 	addi	r3,r2,-5
81112570:	10801d84 	addi	r2,r2,118
81112574:	90e4983a 	sll	r18,r18,r3
81112578:	00a1c83a 	sub	r16,zero,r2
8111257c:	0023883a 	mov	r17,zero
81112580:	002f883a 	mov	r23,zero
81112584:	d9400017 	ldw	r5,0(sp)
81112588:	003f9a06 	br	811123f4 <__reset+0xfb0f23f4>
8111258c:	04400304 	movi	r17,12
81112590:	05c000c4 	movi	r23,3
81112594:	003f9706 	br	811123f4 <__reset+0xfb0f23f4>
81112598:	9809883a 	mov	r4,r19
8111259c:	d9800015 	stw	r6,0(sp)
811125a0:	11133880 	call	81113388 <__clzsi2>
811125a4:	10fffec4 	addi	r3,r2,-5
811125a8:	10801d84 	addi	r2,r2,118
811125ac:	98e6983a 	sll	r19,r19,r3
811125b0:	0085c83a 	sub	r2,zero,r2
811125b4:	0007883a 	mov	r3,zero
811125b8:	d9800017 	ldw	r6,0(sp)
811125bc:	003f9b06 	br	8111242c <__reset+0xfb0f242c>
811125c0:	01002034 	movhi	r4,128
811125c4:	0029883a 	mov	r20,zero
811125c8:	213fffc4 	addi	r4,r4,-1
811125cc:	00ffffc4 	movi	r3,-1
811125d0:	003fc006 	br	811124d4 <__reset+0xfb0f24d4>
811125d4:	9027883a 	mov	r19,r18
811125d8:	b807883a 	mov	r3,r23
811125dc:	003fb406 	br	811124b0 <__reset+0xfb0f24b0>
811125e0:	9027883a 	mov	r19,r18
811125e4:	e02b883a 	mov	r21,fp
811125e8:	b807883a 	mov	r3,r23
811125ec:	003fb006 	br	811124b0 <__reset+0xfb0f24b0>
811125f0:	9004d43a 	srli	r2,r18,16
811125f4:	9810d43a 	srli	r8,r19,16
811125f8:	94bfffcc 	andi	r18,r18,65535
811125fc:	993fffcc 	andi	r4,r19,65535
81112600:	910d383a 	mul	r6,r18,r4
81112604:	20a7383a 	mul	r19,r4,r2
81112608:	9225383a 	mul	r18,r18,r8
8111260c:	3006d43a 	srli	r3,r6,16
81112610:	1211383a 	mul	r8,r2,r8
81112614:	94e5883a 	add	r18,r18,r19
81112618:	1c87883a 	add	r3,r3,r18
8111261c:	1cc0022e 	bgeu	r3,r19,81112628 <__mulsf3+0x2a8>
81112620:	00800074 	movhi	r2,1
81112624:	4091883a 	add	r8,r8,r2
81112628:	1804943a 	slli	r2,r3,16
8111262c:	31bfffcc 	andi	r6,r6,65535
81112630:	1806d43a 	srli	r3,r3,16
81112634:	1185883a 	add	r2,r2,r6
81112638:	102691ba 	slli	r19,r2,6
8111263c:	1a07883a 	add	r3,r3,r8
81112640:	1004d6ba 	srli	r2,r2,26
81112644:	180891ba 	slli	r4,r3,6
81112648:	9826c03a 	cmpne	r19,r19,zero
8111264c:	9884b03a 	or	r2,r19,r2
81112650:	1126b03a 	or	r19,r2,r4
81112654:	9882002c 	andhi	r2,r19,2048
81112658:	10000426 	beq	r2,zero,8111266c <__mulsf3+0x2ec>
8111265c:	9804d07a 	srli	r2,r19,1
81112660:	9900004c 	andi	r4,r19,1
81112664:	3821883a 	mov	r16,r7
81112668:	1126b03a 	or	r19,r2,r4
8111266c:	80c01fc4 	addi	r3,r16,127
81112670:	00c0210e 	bge	zero,r3,811126f8 <__mulsf3+0x378>
81112674:	988001cc 	andi	r2,r19,7
81112678:	10000426 	beq	r2,zero,8111268c <__mulsf3+0x30c>
8111267c:	988003cc 	andi	r2,r19,15
81112680:	01000104 	movi	r4,4
81112684:	11000126 	beq	r2,r4,8111268c <__mulsf3+0x30c>
81112688:	9927883a 	add	r19,r19,r4
8111268c:	9882002c 	andhi	r2,r19,2048
81112690:	10000426 	beq	r2,zero,811126a4 <__mulsf3+0x324>
81112694:	00be0034 	movhi	r2,63488
81112698:	10bfffc4 	addi	r2,r2,-1
8111269c:	80c02004 	addi	r3,r16,128
811126a0:	98a6703a 	and	r19,r19,r2
811126a4:	00803f84 	movi	r2,254
811126a8:	10ffa916 	blt	r2,r3,81112550 <__reset+0xfb0f2550>
811126ac:	980891ba 	slli	r4,r19,6
811126b0:	a829883a 	mov	r20,r21
811126b4:	2008d27a 	srli	r4,r4,9
811126b8:	003f8606 	br	811124d4 <__reset+0xfb0f24d4>
811126bc:	9080102c 	andhi	r2,r18,64
811126c0:	10000826 	beq	r2,zero,811126e4 <__mulsf3+0x364>
811126c4:	9880102c 	andhi	r2,r19,64
811126c8:	1000061e 	bne	r2,zero,811126e4 <__mulsf3+0x364>
811126cc:	00802034 	movhi	r2,128
811126d0:	99001034 	orhi	r4,r19,64
811126d4:	10bfffc4 	addi	r2,r2,-1
811126d8:	b029883a 	mov	r20,r22
811126dc:	2088703a 	and	r4,r4,r2
811126e0:	003fba06 	br	811125cc <__reset+0xfb0f25cc>
811126e4:	00802034 	movhi	r2,128
811126e8:	91001034 	orhi	r4,r18,64
811126ec:	10bfffc4 	addi	r2,r2,-1
811126f0:	2088703a 	and	r4,r4,r2
811126f4:	003fb506 	br	811125cc <__reset+0xfb0f25cc>
811126f8:	00800044 	movi	r2,1
811126fc:	10c7c83a 	sub	r3,r2,r3
81112700:	008006c4 	movi	r2,27
81112704:	10ff7016 	blt	r2,r3,811124c8 <__reset+0xfb0f24c8>
81112708:	00800804 	movi	r2,32
8111270c:	10c5c83a 	sub	r2,r2,r3
81112710:	9884983a 	sll	r2,r19,r2
81112714:	98c6d83a 	srl	r3,r19,r3
81112718:	1004c03a 	cmpne	r2,r2,zero
8111271c:	1884b03a 	or	r2,r3,r2
81112720:	10c001cc 	andi	r3,r2,7
81112724:	18000426 	beq	r3,zero,81112738 <__mulsf3+0x3b8>
81112728:	10c003cc 	andi	r3,r2,15
8111272c:	01000104 	movi	r4,4
81112730:	19000126 	beq	r3,r4,81112738 <__mulsf3+0x3b8>
81112734:	1105883a 	add	r2,r2,r4
81112738:	10c1002c 	andhi	r3,r2,1024
8111273c:	18000626 	beq	r3,zero,81112758 <__mulsf3+0x3d8>
81112740:	a829883a 	mov	r20,r21
81112744:	00c00044 	movi	r3,1
81112748:	0009883a 	mov	r4,zero
8111274c:	003f6106 	br	811124d4 <__reset+0xfb0f24d4>
81112750:	3821883a 	mov	r16,r7
81112754:	003fc506 	br	8111266c <__reset+0xfb0f266c>
81112758:	100491ba 	slli	r2,r2,6
8111275c:	a829883a 	mov	r20,r21
81112760:	0007883a 	mov	r3,zero
81112764:	1008d27a 	srli	r4,r2,9
81112768:	003f5a06 	br	811124d4 <__reset+0xfb0f24d4>
8111276c:	00802034 	movhi	r2,128
81112770:	99001034 	orhi	r4,r19,64
81112774:	10bfffc4 	addi	r2,r2,-1
81112778:	a829883a 	mov	r20,r21
8111277c:	2088703a 	and	r4,r4,r2
81112780:	003f9206 	br	811125cc <__reset+0xfb0f25cc>

81112784 <__floatsisf>:
81112784:	defffd04 	addi	sp,sp,-12
81112788:	de00012e 	bgeu	sp,et,81112790 <__floatsisf+0xc>
8111278c:	003b68fa 	trap	3
81112790:	dfc00215 	stw	ra,8(sp)
81112794:	dc400115 	stw	r17,4(sp)
81112798:	dc000015 	stw	r16,0(sp)
8111279c:	20003526 	beq	r4,zero,81112874 <__floatsisf+0xf0>
811127a0:	2021883a 	mov	r16,r4
811127a4:	2022d7fa 	srli	r17,r4,31
811127a8:	20003616 	blt	r4,zero,81112884 <__floatsisf+0x100>
811127ac:	8009883a 	mov	r4,r16
811127b0:	11133880 	call	81113388 <__clzsi2>
811127b4:	00c02784 	movi	r3,158
811127b8:	1887c83a 	sub	r3,r3,r2
811127bc:	01002584 	movi	r4,150
811127c0:	20c01416 	blt	r4,r3,81112814 <__floatsisf+0x90>
811127c4:	20c9c83a 	sub	r4,r4,r3
811127c8:	8120983a 	sll	r16,r16,r4
811127cc:	00802034 	movhi	r2,128
811127d0:	10bfffc4 	addi	r2,r2,-1
811127d4:	8809883a 	mov	r4,r17
811127d8:	80a0703a 	and	r16,r16,r2
811127dc:	18803fcc 	andi	r2,r3,255
811127e0:	100695fa 	slli	r3,r2,23
811127e4:	20803fcc 	andi	r2,r4,255
811127e8:	100897fa 	slli	r4,r2,31
811127ec:	00802034 	movhi	r2,128
811127f0:	10bfffc4 	addi	r2,r2,-1
811127f4:	8084703a 	and	r2,r16,r2
811127f8:	10c4b03a 	or	r2,r2,r3
811127fc:	1104b03a 	or	r2,r2,r4
81112800:	dfc00217 	ldw	ra,8(sp)
81112804:	dc400117 	ldw	r17,4(sp)
81112808:	dc000017 	ldw	r16,0(sp)
8111280c:	dec00304 	addi	sp,sp,12
81112810:	f800283a 	ret
81112814:	01002644 	movi	r4,153
81112818:	20c01c16 	blt	r4,r3,8111288c <__floatsisf+0x108>
8111281c:	20c9c83a 	sub	r4,r4,r3
81112820:	8120983a 	sll	r16,r16,r4
81112824:	013f0034 	movhi	r4,64512
81112828:	213fffc4 	addi	r4,r4,-1
8111282c:	814001cc 	andi	r5,r16,7
81112830:	8108703a 	and	r4,r16,r4
81112834:	28000426 	beq	r5,zero,81112848 <__floatsisf+0xc4>
81112838:	840003cc 	andi	r16,r16,15
8111283c:	01400104 	movi	r5,4
81112840:	81400126 	beq	r16,r5,81112848 <__floatsisf+0xc4>
81112844:	2149883a 	add	r4,r4,r5
81112848:	2141002c 	andhi	r5,r4,1024
8111284c:	28000526 	beq	r5,zero,81112864 <__floatsisf+0xe0>
81112850:	00c027c4 	movi	r3,159
81112854:	1887c83a 	sub	r3,r3,r2
81112858:	00bf0034 	movhi	r2,64512
8111285c:	10bfffc4 	addi	r2,r2,-1
81112860:	2088703a 	and	r4,r4,r2
81112864:	202091ba 	slli	r16,r4,6
81112868:	8809883a 	mov	r4,r17
8111286c:	8020d27a 	srli	r16,r16,9
81112870:	003fda06 	br	811127dc <__reset+0xfb0f27dc>
81112874:	0009883a 	mov	r4,zero
81112878:	0007883a 	mov	r3,zero
8111287c:	0021883a 	mov	r16,zero
81112880:	003fd606 	br	811127dc <__reset+0xfb0f27dc>
81112884:	0121c83a 	sub	r16,zero,r4
81112888:	003fc806 	br	811127ac <__reset+0xfb0f27ac>
8111288c:	01002e44 	movi	r4,185
81112890:	20c9c83a 	sub	r4,r4,r3
81112894:	01400144 	movi	r5,5
81112898:	8108983a 	sll	r4,r16,r4
8111289c:	288bc83a 	sub	r5,r5,r2
811128a0:	8160d83a 	srl	r16,r16,r5
811128a4:	2008c03a 	cmpne	r4,r4,zero
811128a8:	8120b03a 	or	r16,r16,r4
811128ac:	003fdd06 	br	81112824 <__reset+0xfb0f2824>

811128b0 <__floatunsisf>:
811128b0:	defffe04 	addi	sp,sp,-8
811128b4:	de00012e 	bgeu	sp,et,811128bc <__floatunsisf+0xc>
811128b8:	003b68fa 	trap	3
811128bc:	dfc00115 	stw	ra,4(sp)
811128c0:	dc000015 	stw	r16,0(sp)
811128c4:	20002c26 	beq	r4,zero,81112978 <__floatunsisf+0xc8>
811128c8:	2021883a 	mov	r16,r4
811128cc:	11133880 	call	81113388 <__clzsi2>
811128d0:	00c02784 	movi	r3,158
811128d4:	1887c83a 	sub	r3,r3,r2
811128d8:	01002584 	movi	r4,150
811128dc:	20c00f16 	blt	r4,r3,8111291c <__floatunsisf+0x6c>
811128e0:	20c9c83a 	sub	r4,r4,r3
811128e4:	8108983a 	sll	r4,r16,r4
811128e8:	00802034 	movhi	r2,128
811128ec:	10bfffc4 	addi	r2,r2,-1
811128f0:	2088703a 	and	r4,r4,r2
811128f4:	18803fcc 	andi	r2,r3,255
811128f8:	100695fa 	slli	r3,r2,23
811128fc:	00802034 	movhi	r2,128
81112900:	10bfffc4 	addi	r2,r2,-1
81112904:	2084703a 	and	r2,r4,r2
81112908:	10c4b03a 	or	r2,r2,r3
8111290c:	dfc00117 	ldw	ra,4(sp)
81112910:	dc000017 	ldw	r16,0(sp)
81112914:	dec00204 	addi	sp,sp,8
81112918:	f800283a 	ret
8111291c:	01002644 	movi	r4,153
81112920:	20c01816 	blt	r4,r3,81112984 <__floatunsisf+0xd4>
81112924:	20c9c83a 	sub	r4,r4,r3
81112928:	8108983a 	sll	r4,r16,r4
8111292c:	017f0034 	movhi	r5,64512
81112930:	297fffc4 	addi	r5,r5,-1
81112934:	218001cc 	andi	r6,r4,7
81112938:	214a703a 	and	r5,r4,r5
8111293c:	30000426 	beq	r6,zero,81112950 <__floatunsisf+0xa0>
81112940:	210003cc 	andi	r4,r4,15
81112944:	01800104 	movi	r6,4
81112948:	21800126 	beq	r4,r6,81112950 <__floatunsisf+0xa0>
8111294c:	298b883a 	add	r5,r5,r6
81112950:	2901002c 	andhi	r4,r5,1024
81112954:	20000526 	beq	r4,zero,8111296c <__floatunsisf+0xbc>
81112958:	00c027c4 	movi	r3,159
8111295c:	1887c83a 	sub	r3,r3,r2
81112960:	00bf0034 	movhi	r2,64512
81112964:	10bfffc4 	addi	r2,r2,-1
81112968:	288a703a 	and	r5,r5,r2
8111296c:	280891ba 	slli	r4,r5,6
81112970:	2008d27a 	srli	r4,r4,9
81112974:	003fdf06 	br	811128f4 <__reset+0xfb0f28f4>
81112978:	0007883a 	mov	r3,zero
8111297c:	0009883a 	mov	r4,zero
81112980:	003fdc06 	br	811128f4 <__reset+0xfb0f28f4>
81112984:	01402e44 	movi	r5,185
81112988:	28cbc83a 	sub	r5,r5,r3
8111298c:	01000144 	movi	r4,5
81112990:	2089c83a 	sub	r4,r4,r2
81112994:	814a983a 	sll	r5,r16,r5
81112998:	8108d83a 	srl	r4,r16,r4
8111299c:	2820c03a 	cmpne	r16,r5,zero
811129a0:	2408b03a 	or	r4,r4,r16
811129a4:	003fe106 	br	8111292c <__reset+0xfb0f292c>

811129a8 <__muldf3>:
811129a8:	defff304 	addi	sp,sp,-52
811129ac:	2804d53a 	srli	r2,r5,20
811129b0:	de00012e 	bgeu	sp,et,811129b8 <__muldf3+0x10>
811129b4:	003b68fa 	trap	3
811129b8:	dd800915 	stw	r22,36(sp)
811129bc:	282cd7fa 	srli	r22,r5,31
811129c0:	dc000315 	stw	r16,12(sp)
811129c4:	04000434 	movhi	r16,16
811129c8:	dd400815 	stw	r21,32(sp)
811129cc:	dc800515 	stw	r18,20(sp)
811129d0:	843fffc4 	addi	r16,r16,-1
811129d4:	dfc00c15 	stw	ra,48(sp)
811129d8:	df000b15 	stw	fp,44(sp)
811129dc:	ddc00a15 	stw	r23,40(sp)
811129e0:	dd000715 	stw	r20,28(sp)
811129e4:	dcc00615 	stw	r19,24(sp)
811129e8:	dc400415 	stw	r17,16(sp)
811129ec:	1481ffcc 	andi	r18,r2,2047
811129f0:	2c20703a 	and	r16,r5,r16
811129f4:	b02b883a 	mov	r21,r22
811129f8:	b2403fcc 	andi	r9,r22,255
811129fc:	90006026 	beq	r18,zero,81112b80 <__muldf3+0x1d8>
81112a00:	0081ffc4 	movi	r2,2047
81112a04:	2029883a 	mov	r20,r4
81112a08:	90803626 	beq	r18,r2,81112ae4 <__muldf3+0x13c>
81112a0c:	80800434 	orhi	r2,r16,16
81112a10:	100490fa 	slli	r2,r2,3
81112a14:	2020d77a 	srli	r16,r4,29
81112a18:	202890fa 	slli	r20,r4,3
81112a1c:	94bf0044 	addi	r18,r18,-1023
81112a20:	80a0b03a 	or	r16,r16,r2
81112a24:	0027883a 	mov	r19,zero
81112a28:	0039883a 	mov	fp,zero
81112a2c:	3804d53a 	srli	r2,r7,20
81112a30:	382ed7fa 	srli	r23,r7,31
81112a34:	04400434 	movhi	r17,16
81112a38:	8c7fffc4 	addi	r17,r17,-1
81112a3c:	1081ffcc 	andi	r2,r2,2047
81112a40:	3011883a 	mov	r8,r6
81112a44:	3c62703a 	and	r17,r7,r17
81112a48:	ba803fcc 	andi	r10,r23,255
81112a4c:	10006d26 	beq	r2,zero,81112c04 <__muldf3+0x25c>
81112a50:	00c1ffc4 	movi	r3,2047
81112a54:	10c06526 	beq	r2,r3,81112bec <__muldf3+0x244>
81112a58:	88c00434 	orhi	r3,r17,16
81112a5c:	180690fa 	slli	r3,r3,3
81112a60:	3022d77a 	srli	r17,r6,29
81112a64:	301090fa 	slli	r8,r6,3
81112a68:	10bf0044 	addi	r2,r2,-1023
81112a6c:	88e2b03a 	or	r17,r17,r3
81112a70:	000b883a 	mov	r5,zero
81112a74:	9085883a 	add	r2,r18,r2
81112a78:	2cc8b03a 	or	r4,r5,r19
81112a7c:	00c003c4 	movi	r3,15
81112a80:	bdacf03a 	xor	r22,r23,r22
81112a84:	12c00044 	addi	r11,r2,1
81112a88:	19009936 	bltu	r3,r4,81112cf0 <__muldf3+0x348>
81112a8c:	200890ba 	slli	r4,r4,2
81112a90:	00e04474 	movhi	r3,33041
81112a94:	18caa904 	addi	r3,r3,10916
81112a98:	20c9883a 	add	r4,r4,r3
81112a9c:	20c00017 	ldw	r3,0(r4)
81112aa0:	1800683a 	jmp	r3
81112aa4:	81112cf0 	cmpltui	r4,r16,17587
81112aa8:	81112b04 	addi	r4,r16,17580
81112aac:	81112b04 	addi	r4,r16,17580
81112ab0:	81112b00 	call	881112b0 <__reset+0x20f12b0>
81112ab4:	81112ccc 	andi	r4,r16,17587
81112ab8:	81112ccc 	andi	r4,r16,17587
81112abc:	81112cb4 	orhi	r4,r16,17586
81112ac0:	81112b00 	call	881112b0 <__reset+0x20f12b0>
81112ac4:	81112ccc 	andi	r4,r16,17587
81112ac8:	81112cb4 	orhi	r4,r16,17586
81112acc:	81112ccc 	andi	r4,r16,17587
81112ad0:	81112b00 	call	881112b0 <__reset+0x20f12b0>
81112ad4:	81112cdc 	xori	r4,r16,17587
81112ad8:	81112cdc 	xori	r4,r16,17587
81112adc:	81112cdc 	xori	r4,r16,17587
81112ae0:	81112ef8 	rdprs	r4,r16,17595
81112ae4:	2404b03a 	or	r2,r4,r16
81112ae8:	10006f1e 	bne	r2,zero,81112ca8 <__muldf3+0x300>
81112aec:	04c00204 	movi	r19,8
81112af0:	0021883a 	mov	r16,zero
81112af4:	0029883a 	mov	r20,zero
81112af8:	07000084 	movi	fp,2
81112afc:	003fcb06 	br	81112a2c <__reset+0xfb0f2a2c>
81112b00:	502d883a 	mov	r22,r10
81112b04:	00800084 	movi	r2,2
81112b08:	28805726 	beq	r5,r2,81112c68 <__muldf3+0x2c0>
81112b0c:	008000c4 	movi	r2,3
81112b10:	28816626 	beq	r5,r2,811130ac <__muldf3+0x704>
81112b14:	00800044 	movi	r2,1
81112b18:	2881411e 	bne	r5,r2,81113020 <__muldf3+0x678>
81112b1c:	b02b883a 	mov	r21,r22
81112b20:	0005883a 	mov	r2,zero
81112b24:	000b883a 	mov	r5,zero
81112b28:	0029883a 	mov	r20,zero
81112b2c:	1004953a 	slli	r2,r2,20
81112b30:	a8c03fcc 	andi	r3,r21,255
81112b34:	04400434 	movhi	r17,16
81112b38:	8c7fffc4 	addi	r17,r17,-1
81112b3c:	180697fa 	slli	r3,r3,31
81112b40:	2c4a703a 	and	r5,r5,r17
81112b44:	288ab03a 	or	r5,r5,r2
81112b48:	28c6b03a 	or	r3,r5,r3
81112b4c:	a005883a 	mov	r2,r20
81112b50:	dfc00c17 	ldw	ra,48(sp)
81112b54:	df000b17 	ldw	fp,44(sp)
81112b58:	ddc00a17 	ldw	r23,40(sp)
81112b5c:	dd800917 	ldw	r22,36(sp)
81112b60:	dd400817 	ldw	r21,32(sp)
81112b64:	dd000717 	ldw	r20,28(sp)
81112b68:	dcc00617 	ldw	r19,24(sp)
81112b6c:	dc800517 	ldw	r18,20(sp)
81112b70:	dc400417 	ldw	r17,16(sp)
81112b74:	dc000317 	ldw	r16,12(sp)
81112b78:	dec00d04 	addi	sp,sp,52
81112b7c:	f800283a 	ret
81112b80:	2404b03a 	or	r2,r4,r16
81112b84:	2027883a 	mov	r19,r4
81112b88:	10004226 	beq	r2,zero,81112c94 <__muldf3+0x2ec>
81112b8c:	8000fc26 	beq	r16,zero,81112f80 <__muldf3+0x5d8>
81112b90:	8009883a 	mov	r4,r16
81112b94:	d9800215 	stw	r6,8(sp)
81112b98:	d9c00015 	stw	r7,0(sp)
81112b9c:	da400115 	stw	r9,4(sp)
81112ba0:	11133880 	call	81113388 <__clzsi2>
81112ba4:	d9800217 	ldw	r6,8(sp)
81112ba8:	d9c00017 	ldw	r7,0(sp)
81112bac:	da400117 	ldw	r9,4(sp)
81112bb0:	113ffd44 	addi	r4,r2,-11
81112bb4:	00c00704 	movi	r3,28
81112bb8:	1900ed16 	blt	r3,r4,81112f70 <__muldf3+0x5c8>
81112bbc:	00c00744 	movi	r3,29
81112bc0:	147ffe04 	addi	r17,r2,-8
81112bc4:	1907c83a 	sub	r3,r3,r4
81112bc8:	8460983a 	sll	r16,r16,r17
81112bcc:	98c6d83a 	srl	r3,r19,r3
81112bd0:	9c68983a 	sll	r20,r19,r17
81112bd4:	1c20b03a 	or	r16,r3,r16
81112bd8:	1080fcc4 	addi	r2,r2,1011
81112bdc:	00a5c83a 	sub	r18,zero,r2
81112be0:	0027883a 	mov	r19,zero
81112be4:	0039883a 	mov	fp,zero
81112be8:	003f9006 	br	81112a2c <__reset+0xfb0f2a2c>
81112bec:	3446b03a 	or	r3,r6,r17
81112bf0:	1800261e 	bne	r3,zero,81112c8c <__muldf3+0x2e4>
81112bf4:	0023883a 	mov	r17,zero
81112bf8:	0011883a 	mov	r8,zero
81112bfc:	01400084 	movi	r5,2
81112c00:	003f9c06 	br	81112a74 <__reset+0xfb0f2a74>
81112c04:	3446b03a 	or	r3,r6,r17
81112c08:	18001c26 	beq	r3,zero,81112c7c <__muldf3+0x2d4>
81112c0c:	8800ce26 	beq	r17,zero,81112f48 <__muldf3+0x5a0>
81112c10:	8809883a 	mov	r4,r17
81112c14:	d9800215 	stw	r6,8(sp)
81112c18:	da400115 	stw	r9,4(sp)
81112c1c:	da800015 	stw	r10,0(sp)
81112c20:	11133880 	call	81113388 <__clzsi2>
81112c24:	d9800217 	ldw	r6,8(sp)
81112c28:	da400117 	ldw	r9,4(sp)
81112c2c:	da800017 	ldw	r10,0(sp)
81112c30:	113ffd44 	addi	r4,r2,-11
81112c34:	00c00704 	movi	r3,28
81112c38:	1900bf16 	blt	r3,r4,81112f38 <__muldf3+0x590>
81112c3c:	00c00744 	movi	r3,29
81112c40:	123ffe04 	addi	r8,r2,-8
81112c44:	1907c83a 	sub	r3,r3,r4
81112c48:	8a22983a 	sll	r17,r17,r8
81112c4c:	30c6d83a 	srl	r3,r6,r3
81112c50:	3210983a 	sll	r8,r6,r8
81112c54:	1c62b03a 	or	r17,r3,r17
81112c58:	1080fcc4 	addi	r2,r2,1011
81112c5c:	0085c83a 	sub	r2,zero,r2
81112c60:	000b883a 	mov	r5,zero
81112c64:	003f8306 	br	81112a74 <__reset+0xfb0f2a74>
81112c68:	b02b883a 	mov	r21,r22
81112c6c:	0081ffc4 	movi	r2,2047
81112c70:	000b883a 	mov	r5,zero
81112c74:	0029883a 	mov	r20,zero
81112c78:	003fac06 	br	81112b2c <__reset+0xfb0f2b2c>
81112c7c:	0023883a 	mov	r17,zero
81112c80:	0011883a 	mov	r8,zero
81112c84:	01400044 	movi	r5,1
81112c88:	003f7a06 	br	81112a74 <__reset+0xfb0f2a74>
81112c8c:	014000c4 	movi	r5,3
81112c90:	003f7806 	br	81112a74 <__reset+0xfb0f2a74>
81112c94:	04c00104 	movi	r19,4
81112c98:	0021883a 	mov	r16,zero
81112c9c:	0029883a 	mov	r20,zero
81112ca0:	07000044 	movi	fp,1
81112ca4:	003f6106 	br	81112a2c <__reset+0xfb0f2a2c>
81112ca8:	04c00304 	movi	r19,12
81112cac:	070000c4 	movi	fp,3
81112cb0:	003f5e06 	br	81112a2c <__reset+0xfb0f2a2c>
81112cb4:	01400434 	movhi	r5,16
81112cb8:	002b883a 	mov	r21,zero
81112cbc:	297fffc4 	addi	r5,r5,-1
81112cc0:	053fffc4 	movi	r20,-1
81112cc4:	0081ffc4 	movi	r2,2047
81112cc8:	003f9806 	br	81112b2c <__reset+0xfb0f2b2c>
81112ccc:	8023883a 	mov	r17,r16
81112cd0:	a011883a 	mov	r8,r20
81112cd4:	e00b883a 	mov	r5,fp
81112cd8:	003f8a06 	br	81112b04 <__reset+0xfb0f2b04>
81112cdc:	8023883a 	mov	r17,r16
81112ce0:	a011883a 	mov	r8,r20
81112ce4:	482d883a 	mov	r22,r9
81112ce8:	e00b883a 	mov	r5,fp
81112cec:	003f8506 	br	81112b04 <__reset+0xfb0f2b04>
81112cf0:	a00ad43a 	srli	r5,r20,16
81112cf4:	401ad43a 	srli	r13,r8,16
81112cf8:	a53fffcc 	andi	r20,r20,65535
81112cfc:	423fffcc 	andi	r8,r8,65535
81112d00:	4519383a 	mul	r12,r8,r20
81112d04:	4147383a 	mul	r3,r8,r5
81112d08:	6d09383a 	mul	r4,r13,r20
81112d0c:	600cd43a 	srli	r6,r12,16
81112d10:	2b5d383a 	mul	r14,r5,r13
81112d14:	20c9883a 	add	r4,r4,r3
81112d18:	310d883a 	add	r6,r6,r4
81112d1c:	30c0022e 	bgeu	r6,r3,81112d28 <__muldf3+0x380>
81112d20:	00c00074 	movhi	r3,1
81112d24:	70dd883a 	add	r14,r14,r3
81112d28:	8826d43a 	srli	r19,r17,16
81112d2c:	8bffffcc 	andi	r15,r17,65535
81112d30:	7d23383a 	mul	r17,r15,r20
81112d34:	7949383a 	mul	r4,r15,r5
81112d38:	9d29383a 	mul	r20,r19,r20
81112d3c:	8814d43a 	srli	r10,r17,16
81112d40:	3012943a 	slli	r9,r6,16
81112d44:	a129883a 	add	r20,r20,r4
81112d48:	633fffcc 	andi	r12,r12,65535
81112d4c:	5515883a 	add	r10,r10,r20
81112d50:	3006d43a 	srli	r3,r6,16
81112d54:	4b13883a 	add	r9,r9,r12
81112d58:	2ccb383a 	mul	r5,r5,r19
81112d5c:	5100022e 	bgeu	r10,r4,81112d68 <__muldf3+0x3c0>
81112d60:	01000074 	movhi	r4,1
81112d64:	290b883a 	add	r5,r5,r4
81112d68:	802ad43a 	srli	r21,r16,16
81112d6c:	843fffcc 	andi	r16,r16,65535
81112d70:	440d383a 	mul	r6,r8,r16
81112d74:	4565383a 	mul	r18,r8,r21
81112d78:	8349383a 	mul	r4,r16,r13
81112d7c:	500e943a 	slli	r7,r10,16
81112d80:	3010d43a 	srli	r8,r6,16
81112d84:	5028d43a 	srli	r20,r10,16
81112d88:	2489883a 	add	r4,r4,r18
81112d8c:	8abfffcc 	andi	r10,r17,65535
81112d90:	3a95883a 	add	r10,r7,r10
81112d94:	4119883a 	add	r12,r8,r4
81112d98:	a169883a 	add	r20,r20,r5
81112d9c:	1a87883a 	add	r3,r3,r10
81112da0:	6d5b383a 	mul	r13,r13,r21
81112da4:	6480022e 	bgeu	r12,r18,81112db0 <__muldf3+0x408>
81112da8:	01000074 	movhi	r4,1
81112dac:	691b883a 	add	r13,r13,r4
81112db0:	7c25383a 	mul	r18,r15,r16
81112db4:	7d4b383a 	mul	r5,r15,r21
81112db8:	84cf383a 	mul	r7,r16,r19
81112dbc:	901ed43a 	srli	r15,r18,16
81112dc0:	6008d43a 	srli	r4,r12,16
81112dc4:	6010943a 	slli	r8,r12,16
81112dc8:	394f883a 	add	r7,r7,r5
81112dcc:	333fffcc 	andi	r12,r6,65535
81112dd0:	79df883a 	add	r15,r15,r7
81112dd4:	235b883a 	add	r13,r4,r13
81112dd8:	9d63383a 	mul	r17,r19,r21
81112ddc:	4309883a 	add	r4,r8,r12
81112de0:	7940022e 	bgeu	r15,r5,81112dec <__muldf3+0x444>
81112de4:	01400074 	movhi	r5,1
81112de8:	8963883a 	add	r17,r17,r5
81112dec:	780a943a 	slli	r5,r15,16
81112df0:	91bfffcc 	andi	r6,r18,65535
81112df4:	70c7883a 	add	r3,r14,r3
81112df8:	298d883a 	add	r6,r5,r6
81112dfc:	1a8f803a 	cmpltu	r7,r3,r10
81112e00:	350b883a 	add	r5,r6,r20
81112e04:	20c7883a 	add	r3,r4,r3
81112e08:	3955883a 	add	r10,r7,r5
81112e0c:	1909803a 	cmpltu	r4,r3,r4
81112e10:	6a91883a 	add	r8,r13,r10
81112e14:	780cd43a 	srli	r6,r15,16
81112e18:	2219883a 	add	r12,r4,r8
81112e1c:	2d0b803a 	cmpltu	r5,r5,r20
81112e20:	51cf803a 	cmpltu	r7,r10,r7
81112e24:	29ceb03a 	or	r7,r5,r7
81112e28:	4351803a 	cmpltu	r8,r8,r13
81112e2c:	610b803a 	cmpltu	r5,r12,r4
81112e30:	4148b03a 	or	r4,r8,r5
81112e34:	398f883a 	add	r7,r7,r6
81112e38:	3909883a 	add	r4,r7,r4
81112e3c:	1810927a 	slli	r8,r3,9
81112e40:	2449883a 	add	r4,r4,r17
81112e44:	2008927a 	slli	r4,r4,9
81112e48:	6022d5fa 	srli	r17,r12,23
81112e4c:	1806d5fa 	srli	r3,r3,23
81112e50:	4252b03a 	or	r9,r8,r9
81112e54:	600a927a 	slli	r5,r12,9
81112e58:	4810c03a 	cmpne	r8,r9,zero
81112e5c:	2462b03a 	or	r17,r4,r17
81112e60:	40c6b03a 	or	r3,r8,r3
81112e64:	8900402c 	andhi	r4,r17,256
81112e68:	1950b03a 	or	r8,r3,r5
81112e6c:	20000726 	beq	r4,zero,81112e8c <__muldf3+0x4e4>
81112e70:	4006d07a 	srli	r3,r8,1
81112e74:	880497fa 	slli	r2,r17,31
81112e78:	4200004c 	andi	r8,r8,1
81112e7c:	8822d07a 	srli	r17,r17,1
81112e80:	1a10b03a 	or	r8,r3,r8
81112e84:	1210b03a 	or	r8,r2,r8
81112e88:	5805883a 	mov	r2,r11
81112e8c:	1140ffc4 	addi	r5,r2,1023
81112e90:	0140440e 	bge	zero,r5,81112fa4 <__muldf3+0x5fc>
81112e94:	40c001cc 	andi	r3,r8,7
81112e98:	18000726 	beq	r3,zero,81112eb8 <__muldf3+0x510>
81112e9c:	40c003cc 	andi	r3,r8,15
81112ea0:	01000104 	movi	r4,4
81112ea4:	19000426 	beq	r3,r4,81112eb8 <__muldf3+0x510>
81112ea8:	4107883a 	add	r3,r8,r4
81112eac:	1a11803a 	cmpltu	r8,r3,r8
81112eb0:	8a23883a 	add	r17,r17,r8
81112eb4:	1811883a 	mov	r8,r3
81112eb8:	88c0402c 	andhi	r3,r17,256
81112ebc:	18000426 	beq	r3,zero,81112ed0 <__muldf3+0x528>
81112ec0:	11410004 	addi	r5,r2,1024
81112ec4:	00bfc034 	movhi	r2,65280
81112ec8:	10bfffc4 	addi	r2,r2,-1
81112ecc:	88a2703a 	and	r17,r17,r2
81112ed0:	0081ff84 	movi	r2,2046
81112ed4:	117f6416 	blt	r2,r5,81112c68 <__reset+0xfb0f2c68>
81112ed8:	8828977a 	slli	r20,r17,29
81112edc:	4010d0fa 	srli	r8,r8,3
81112ee0:	8822927a 	slli	r17,r17,9
81112ee4:	2881ffcc 	andi	r2,r5,2047
81112ee8:	a228b03a 	or	r20,r20,r8
81112eec:	880ad33a 	srli	r5,r17,12
81112ef0:	b02b883a 	mov	r21,r22
81112ef4:	003f0d06 	br	81112b2c <__reset+0xfb0f2b2c>
81112ef8:	8080022c 	andhi	r2,r16,8
81112efc:	10000926 	beq	r2,zero,81112f24 <__muldf3+0x57c>
81112f00:	8880022c 	andhi	r2,r17,8
81112f04:	1000071e 	bne	r2,zero,81112f24 <__muldf3+0x57c>
81112f08:	00800434 	movhi	r2,16
81112f0c:	89400234 	orhi	r5,r17,8
81112f10:	10bfffc4 	addi	r2,r2,-1
81112f14:	b82b883a 	mov	r21,r23
81112f18:	288a703a 	and	r5,r5,r2
81112f1c:	4029883a 	mov	r20,r8
81112f20:	003f6806 	br	81112cc4 <__reset+0xfb0f2cc4>
81112f24:	00800434 	movhi	r2,16
81112f28:	81400234 	orhi	r5,r16,8
81112f2c:	10bfffc4 	addi	r2,r2,-1
81112f30:	288a703a 	and	r5,r5,r2
81112f34:	003f6306 	br	81112cc4 <__reset+0xfb0f2cc4>
81112f38:	147ff604 	addi	r17,r2,-40
81112f3c:	3462983a 	sll	r17,r6,r17
81112f40:	0011883a 	mov	r8,zero
81112f44:	003f4406 	br	81112c58 <__reset+0xfb0f2c58>
81112f48:	3009883a 	mov	r4,r6
81112f4c:	d9800215 	stw	r6,8(sp)
81112f50:	da400115 	stw	r9,4(sp)
81112f54:	da800015 	stw	r10,0(sp)
81112f58:	11133880 	call	81113388 <__clzsi2>
81112f5c:	10800804 	addi	r2,r2,32
81112f60:	da800017 	ldw	r10,0(sp)
81112f64:	da400117 	ldw	r9,4(sp)
81112f68:	d9800217 	ldw	r6,8(sp)
81112f6c:	003f3006 	br	81112c30 <__reset+0xfb0f2c30>
81112f70:	143ff604 	addi	r16,r2,-40
81112f74:	9c20983a 	sll	r16,r19,r16
81112f78:	0029883a 	mov	r20,zero
81112f7c:	003f1606 	br	81112bd8 <__reset+0xfb0f2bd8>
81112f80:	d9800215 	stw	r6,8(sp)
81112f84:	d9c00015 	stw	r7,0(sp)
81112f88:	da400115 	stw	r9,4(sp)
81112f8c:	11133880 	call	81113388 <__clzsi2>
81112f90:	10800804 	addi	r2,r2,32
81112f94:	da400117 	ldw	r9,4(sp)
81112f98:	d9c00017 	ldw	r7,0(sp)
81112f9c:	d9800217 	ldw	r6,8(sp)
81112fa0:	003f0306 	br	81112bb0 <__reset+0xfb0f2bb0>
81112fa4:	00c00044 	movi	r3,1
81112fa8:	1947c83a 	sub	r3,r3,r5
81112fac:	00800e04 	movi	r2,56
81112fb0:	10feda16 	blt	r2,r3,81112b1c <__reset+0xfb0f2b1c>
81112fb4:	008007c4 	movi	r2,31
81112fb8:	10c01b16 	blt	r2,r3,81113028 <__muldf3+0x680>
81112fbc:	00800804 	movi	r2,32
81112fc0:	10c5c83a 	sub	r2,r2,r3
81112fc4:	888a983a 	sll	r5,r17,r2
81112fc8:	40c8d83a 	srl	r4,r8,r3
81112fcc:	4084983a 	sll	r2,r8,r2
81112fd0:	88e2d83a 	srl	r17,r17,r3
81112fd4:	2906b03a 	or	r3,r5,r4
81112fd8:	1004c03a 	cmpne	r2,r2,zero
81112fdc:	1886b03a 	or	r3,r3,r2
81112fe0:	188001cc 	andi	r2,r3,7
81112fe4:	10000726 	beq	r2,zero,81113004 <__muldf3+0x65c>
81112fe8:	188003cc 	andi	r2,r3,15
81112fec:	01000104 	movi	r4,4
81112ff0:	11000426 	beq	r2,r4,81113004 <__muldf3+0x65c>
81112ff4:	1805883a 	mov	r2,r3
81112ff8:	10c00104 	addi	r3,r2,4
81112ffc:	1885803a 	cmpltu	r2,r3,r2
81113000:	88a3883a 	add	r17,r17,r2
81113004:	8880202c 	andhi	r2,r17,128
81113008:	10001c26 	beq	r2,zero,8111307c <__muldf3+0x6d4>
8111300c:	b02b883a 	mov	r21,r22
81113010:	00800044 	movi	r2,1
81113014:	000b883a 	mov	r5,zero
81113018:	0029883a 	mov	r20,zero
8111301c:	003ec306 	br	81112b2c <__reset+0xfb0f2b2c>
81113020:	5805883a 	mov	r2,r11
81113024:	003f9906 	br	81112e8c <__reset+0xfb0f2e8c>
81113028:	00bff844 	movi	r2,-31
8111302c:	1145c83a 	sub	r2,r2,r5
81113030:	8888d83a 	srl	r4,r17,r2
81113034:	00800804 	movi	r2,32
81113038:	18801a26 	beq	r3,r2,811130a4 <__muldf3+0x6fc>
8111303c:	00801004 	movi	r2,64
81113040:	10c5c83a 	sub	r2,r2,r3
81113044:	8884983a 	sll	r2,r17,r2
81113048:	1204b03a 	or	r2,r2,r8
8111304c:	1004c03a 	cmpne	r2,r2,zero
81113050:	2084b03a 	or	r2,r4,r2
81113054:	144001cc 	andi	r17,r2,7
81113058:	88000d1e 	bne	r17,zero,81113090 <__muldf3+0x6e8>
8111305c:	000b883a 	mov	r5,zero
81113060:	1028d0fa 	srli	r20,r2,3
81113064:	b02b883a 	mov	r21,r22
81113068:	0005883a 	mov	r2,zero
8111306c:	a468b03a 	or	r20,r20,r17
81113070:	003eae06 	br	81112b2c <__reset+0xfb0f2b2c>
81113074:	1007883a 	mov	r3,r2
81113078:	0023883a 	mov	r17,zero
8111307c:	880a927a 	slli	r5,r17,9
81113080:	1805883a 	mov	r2,r3
81113084:	8822977a 	slli	r17,r17,29
81113088:	280ad33a 	srli	r5,r5,12
8111308c:	003ff406 	br	81113060 <__reset+0xfb0f3060>
81113090:	10c003cc 	andi	r3,r2,15
81113094:	01000104 	movi	r4,4
81113098:	193ff626 	beq	r3,r4,81113074 <__reset+0xfb0f3074>
8111309c:	0023883a 	mov	r17,zero
811130a0:	003fd506 	br	81112ff8 <__reset+0xfb0f2ff8>
811130a4:	0005883a 	mov	r2,zero
811130a8:	003fe706 	br	81113048 <__reset+0xfb0f3048>
811130ac:	00800434 	movhi	r2,16
811130b0:	89400234 	orhi	r5,r17,8
811130b4:	10bfffc4 	addi	r2,r2,-1
811130b8:	b02b883a 	mov	r21,r22
811130bc:	288a703a 	and	r5,r5,r2
811130c0:	4029883a 	mov	r20,r8
811130c4:	003eff06 	br	81112cc4 <__reset+0xfb0f2cc4>

811130c8 <__extendsfdf2>:
811130c8:	200ad5fa 	srli	r5,r4,23
811130cc:	defffd04 	addi	sp,sp,-12
811130d0:	de00012e 	bgeu	sp,et,811130d8 <__extendsfdf2+0x10>
811130d4:	003b68fa 	trap	3
811130d8:	29403fcc 	andi	r5,r5,255
811130dc:	dc400115 	stw	r17,4(sp)
811130e0:	29800044 	addi	r6,r5,1
811130e4:	04402034 	movhi	r17,128
811130e8:	dc000015 	stw	r16,0(sp)
811130ec:	8c7fffc4 	addi	r17,r17,-1
811130f0:	dfc00215 	stw	ra,8(sp)
811130f4:	31803fcc 	andi	r6,r6,255
811130f8:	00800044 	movi	r2,1
811130fc:	8922703a 	and	r17,r17,r4
81113100:	2020d7fa 	srli	r16,r4,31
81113104:	1180110e 	bge	r2,r6,8111314c <__extendsfdf2+0x84>
81113108:	880cd0fa 	srli	r6,r17,3
8111310c:	8822977a 	slli	r17,r17,29
81113110:	2940e004 	addi	r5,r5,896
81113114:	2941ffcc 	andi	r5,r5,2047
81113118:	2804953a 	slli	r2,r5,20
8111311c:	01400434 	movhi	r5,16
81113120:	800697fa 	slli	r3,r16,31
81113124:	297fffc4 	addi	r5,r5,-1
81113128:	314a703a 	and	r5,r6,r5
8111312c:	288ab03a 	or	r5,r5,r2
81113130:	28c6b03a 	or	r3,r5,r3
81113134:	8805883a 	mov	r2,r17
81113138:	dfc00217 	ldw	ra,8(sp)
8111313c:	dc400117 	ldw	r17,4(sp)
81113140:	dc000017 	ldw	r16,0(sp)
81113144:	dec00304 	addi	sp,sp,12
81113148:	f800283a 	ret
8111314c:	2800111e 	bne	r5,zero,81113194 <__extendsfdf2+0xcc>
81113150:	88001c26 	beq	r17,zero,811131c4 <__extendsfdf2+0xfc>
81113154:	8809883a 	mov	r4,r17
81113158:	11133880 	call	81113388 <__clzsi2>
8111315c:	00c00284 	movi	r3,10
81113160:	18801b16 	blt	r3,r2,811131d0 <__extendsfdf2+0x108>
81113164:	018002c4 	movi	r6,11
81113168:	308dc83a 	sub	r6,r6,r2
8111316c:	11000544 	addi	r4,r2,21
81113170:	8986d83a 	srl	r3,r17,r6
81113174:	8922983a 	sll	r17,r17,r4
81113178:	0180e244 	movi	r6,905
8111317c:	01400434 	movhi	r5,16
81113180:	3085c83a 	sub	r2,r6,r2
81113184:	297fffc4 	addi	r5,r5,-1
81113188:	194c703a 	and	r6,r3,r5
8111318c:	1141ffcc 	andi	r5,r2,2047
81113190:	003fe006 	br	81113114 <__reset+0xfb0f3114>
81113194:	88000826 	beq	r17,zero,811131b8 <__extendsfdf2+0xf0>
81113198:	880cd0fa 	srli	r6,r17,3
8111319c:	00800434 	movhi	r2,16
811131a0:	10bfffc4 	addi	r2,r2,-1
811131a4:	31800234 	orhi	r6,r6,8
811131a8:	8822977a 	slli	r17,r17,29
811131ac:	308c703a 	and	r6,r6,r2
811131b0:	0141ffc4 	movi	r5,2047
811131b4:	003fd706 	br	81113114 <__reset+0xfb0f3114>
811131b8:	0141ffc4 	movi	r5,2047
811131bc:	000d883a 	mov	r6,zero
811131c0:	003fd406 	br	81113114 <__reset+0xfb0f3114>
811131c4:	000b883a 	mov	r5,zero
811131c8:	000d883a 	mov	r6,zero
811131cc:	003fd106 	br	81113114 <__reset+0xfb0f3114>
811131d0:	11bffd44 	addi	r6,r2,-11
811131d4:	8986983a 	sll	r3,r17,r6
811131d8:	0023883a 	mov	r17,zero
811131dc:	003fe606 	br	81113178 <__reset+0xfb0f3178>

811131e0 <__truncdfsf2>:
811131e0:	2810d53a 	srli	r8,r5,20
811131e4:	01c00434 	movhi	r7,16
811131e8:	39ffffc4 	addi	r7,r7,-1
811131ec:	29ce703a 	and	r7,r5,r7
811131f0:	4201ffcc 	andi	r8,r8,2047
811131f4:	380e90fa 	slli	r7,r7,3
811131f8:	200cd77a 	srli	r6,r4,29
811131fc:	42400044 	addi	r9,r8,1
81113200:	4a41ffcc 	andi	r9,r9,2047
81113204:	00c00044 	movi	r3,1
81113208:	280ad7fa 	srli	r5,r5,31
8111320c:	31ceb03a 	or	r7,r6,r7
81113210:	200490fa 	slli	r2,r4,3
81113214:	1a40230e 	bge	r3,r9,811132a4 <__truncdfsf2+0xc4>
81113218:	40ff2004 	addi	r3,r8,-896
8111321c:	01803f84 	movi	r6,254
81113220:	30c01516 	blt	r6,r3,81113278 <__truncdfsf2+0x98>
81113224:	00c0380e 	bge	zero,r3,81113308 <__truncdfsf2+0x128>
81113228:	200c91ba 	slli	r6,r4,6
8111322c:	380e90fa 	slli	r7,r7,3
81113230:	1004d77a 	srli	r2,r2,29
81113234:	300cc03a 	cmpne	r6,r6,zero
81113238:	31ccb03a 	or	r6,r6,r7
8111323c:	308cb03a 	or	r6,r6,r2
81113240:	308001cc 	andi	r2,r6,7
81113244:	10000426 	beq	r2,zero,81113258 <__truncdfsf2+0x78>
81113248:	308003cc 	andi	r2,r6,15
8111324c:	01000104 	movi	r4,4
81113250:	11000126 	beq	r2,r4,81113258 <__truncdfsf2+0x78>
81113254:	31800104 	addi	r6,r6,4
81113258:	3081002c 	andhi	r2,r6,1024
8111325c:	10001626 	beq	r2,zero,811132b8 <__truncdfsf2+0xd8>
81113260:	18c00044 	addi	r3,r3,1
81113264:	00803fc4 	movi	r2,255
81113268:	18800326 	beq	r3,r2,81113278 <__truncdfsf2+0x98>
8111326c:	300c91ba 	slli	r6,r6,6
81113270:	300cd27a 	srli	r6,r6,9
81113274:	00000206 	br	81113280 <__truncdfsf2+0xa0>
81113278:	00ffffc4 	movi	r3,-1
8111327c:	000d883a 	mov	r6,zero
81113280:	18c03fcc 	andi	r3,r3,255
81113284:	180895fa 	slli	r4,r3,23
81113288:	00c02034 	movhi	r3,128
8111328c:	280a97fa 	slli	r5,r5,31
81113290:	18ffffc4 	addi	r3,r3,-1
81113294:	30c6703a 	and	r3,r6,r3
81113298:	1906b03a 	or	r3,r3,r4
8111329c:	1944b03a 	or	r2,r3,r5
811132a0:	f800283a 	ret
811132a4:	40000b1e 	bne	r8,zero,811132d4 <__truncdfsf2+0xf4>
811132a8:	388cb03a 	or	r6,r7,r2
811132ac:	0007883a 	mov	r3,zero
811132b0:	30000426 	beq	r6,zero,811132c4 <__truncdfsf2+0xe4>
811132b4:	01800144 	movi	r6,5
811132b8:	00803fc4 	movi	r2,255
811132bc:	300cd0fa 	srli	r6,r6,3
811132c0:	18800a26 	beq	r3,r2,811132ec <__truncdfsf2+0x10c>
811132c4:	00802034 	movhi	r2,128
811132c8:	10bfffc4 	addi	r2,r2,-1
811132cc:	308c703a 	and	r6,r6,r2
811132d0:	003feb06 	br	81113280 <__reset+0xfb0f3280>
811132d4:	3888b03a 	or	r4,r7,r2
811132d8:	203fe726 	beq	r4,zero,81113278 <__reset+0xfb0f3278>
811132dc:	380c90fa 	slli	r6,r7,3
811132e0:	00c03fc4 	movi	r3,255
811132e4:	31808034 	orhi	r6,r6,512
811132e8:	003fd506 	br	81113240 <__reset+0xfb0f3240>
811132ec:	303fe226 	beq	r6,zero,81113278 <__reset+0xfb0f3278>
811132f0:	00802034 	movhi	r2,128
811132f4:	31801034 	orhi	r6,r6,64
811132f8:	10bfffc4 	addi	r2,r2,-1
811132fc:	00ffffc4 	movi	r3,-1
81113300:	308c703a 	and	r6,r6,r2
81113304:	003fde06 	br	81113280 <__reset+0xfb0f3280>
81113308:	013ffa44 	movi	r4,-23
8111330c:	19000e16 	blt	r3,r4,81113348 <__truncdfsf2+0x168>
81113310:	01000784 	movi	r4,30
81113314:	20c9c83a 	sub	r4,r4,r3
81113318:	018007c4 	movi	r6,31
8111331c:	39c02034 	orhi	r7,r7,128
81113320:	31000b16 	blt	r6,r4,81113350 <__truncdfsf2+0x170>
81113324:	423f2084 	addi	r8,r8,-894
81113328:	120c983a 	sll	r6,r2,r8
8111332c:	3a0e983a 	sll	r7,r7,r8
81113330:	1104d83a 	srl	r2,r2,r4
81113334:	300cc03a 	cmpne	r6,r6,zero
81113338:	31ceb03a 	or	r7,r6,r7
8111333c:	388cb03a 	or	r6,r7,r2
81113340:	0007883a 	mov	r3,zero
81113344:	003fbe06 	br	81113240 <__reset+0xfb0f3240>
81113348:	0007883a 	mov	r3,zero
8111334c:	003fd906 	br	811132b4 <__reset+0xfb0f32b4>
81113350:	01bfff84 	movi	r6,-2
81113354:	30cdc83a 	sub	r6,r6,r3
81113358:	00c00804 	movi	r3,32
8111335c:	398cd83a 	srl	r6,r7,r6
81113360:	20c00726 	beq	r4,r3,81113380 <__truncdfsf2+0x1a0>
81113364:	423f2884 	addi	r8,r8,-862
81113368:	3a0e983a 	sll	r7,r7,r8
8111336c:	3884b03a 	or	r2,r7,r2
81113370:	1004c03a 	cmpne	r2,r2,zero
81113374:	118cb03a 	or	r6,r2,r6
81113378:	0007883a 	mov	r3,zero
8111337c:	003fb006 	br	81113240 <__reset+0xfb0f3240>
81113380:	000f883a 	mov	r7,zero
81113384:	003ff906 	br	8111336c <__reset+0xfb0f336c>

81113388 <__clzsi2>:
81113388:	00bfffd4 	movui	r2,65535
8111338c:	11000536 	bltu	r2,r4,811133a4 <__clzsi2+0x1c>
81113390:	00803fc4 	movi	r2,255
81113394:	11000f36 	bltu	r2,r4,811133d4 <__clzsi2+0x4c>
81113398:	00800804 	movi	r2,32
8111339c:	0007883a 	mov	r3,zero
811133a0:	00000506 	br	811133b8 <__clzsi2+0x30>
811133a4:	00804034 	movhi	r2,256
811133a8:	10bfffc4 	addi	r2,r2,-1
811133ac:	11000c2e 	bgeu	r2,r4,811133e0 <__clzsi2+0x58>
811133b0:	00800204 	movi	r2,8
811133b4:	00c00604 	movi	r3,24
811133b8:	20c8d83a 	srl	r4,r4,r3
811133bc:	00e04534 	movhi	r3,33044
811133c0:	18c69b04 	addi	r3,r3,6764
811133c4:	1909883a 	add	r4,r3,r4
811133c8:	20c00003 	ldbu	r3,0(r4)
811133cc:	10c5c83a 	sub	r2,r2,r3
811133d0:	f800283a 	ret
811133d4:	00800604 	movi	r2,24
811133d8:	00c00204 	movi	r3,8
811133dc:	003ff606 	br	811133b8 <__reset+0xfb0f33b8>
811133e0:	00800404 	movi	r2,16
811133e4:	1007883a 	mov	r3,r2
811133e8:	003ff306 	br	811133b8 <__reset+0xfb0f33b8>

811133ec <atoi>:
811133ec:	01800284 	movi	r6,10
811133f0:	000b883a 	mov	r5,zero
811133f4:	11154281 	jmpi	81115428 <strtol>

811133f8 <_atoi_r>:
811133f8:	01c00284 	movi	r7,10
811133fc:	000d883a 	mov	r6,zero
81113400:	11151e81 	jmpi	811151e8 <_strtol_r>

81113404 <_fopen_r>:
81113404:	defffa04 	addi	sp,sp,-24
81113408:	3005883a 	mov	r2,r6
8111340c:	de00012e 	bgeu	sp,et,81113414 <_fopen_r+0x10>
81113410:	003b68fa 	trap	3
81113414:	d80d883a 	mov	r6,sp
81113418:	dcc00415 	stw	r19,16(sp)
8111341c:	2827883a 	mov	r19,r5
81113420:	100b883a 	mov	r5,r2
81113424:	dc800315 	stw	r18,12(sp)
81113428:	dfc00515 	stw	ra,20(sp)
8111342c:	dc400215 	stw	r17,8(sp)
81113430:	dc000115 	stw	r16,4(sp)
81113434:	2025883a 	mov	r18,r4
81113438:	111d4300 	call	8111d430 <__sflags>
8111343c:	10002726 	beq	r2,zero,811134dc <_fopen_r+0xd8>
81113440:	9009883a 	mov	r4,r18
81113444:	1023883a 	mov	r17,r2
81113448:	111d2a80 	call	8111d2a8 <__sfp>
8111344c:	1021883a 	mov	r16,r2
81113450:	10002226 	beq	r2,zero,811134dc <_fopen_r+0xd8>
81113454:	d9800017 	ldw	r6,0(sp)
81113458:	01c06d84 	movi	r7,438
8111345c:	980b883a 	mov	r5,r19
81113460:	9009883a 	mov	r4,r18
81113464:	11148700 	call	81114870 <_open_r>
81113468:	10001916 	blt	r2,zero,811134d0 <_fopen_r+0xcc>
8111346c:	8080038d 	sth	r2,14(r16)
81113470:	00a04474 	movhi	r2,33041
81113474:	1093db04 	addi	r2,r2,20332
81113478:	80800815 	stw	r2,32(r16)
8111347c:	00a04474 	movhi	r2,33041
81113480:	1093f404 	addi	r2,r2,20432
81113484:	80800915 	stw	r2,36(r16)
81113488:	00a04474 	movhi	r2,33041
8111348c:	10941504 	addi	r2,r2,20564
81113490:	80800a15 	stw	r2,40(r16)
81113494:	00a04474 	movhi	r2,33041
81113498:	10942e04 	addi	r2,r2,20664
8111349c:	8440030d 	sth	r17,12(r16)
811134a0:	84000715 	stw	r16,28(r16)
811134a4:	80800b15 	stw	r2,44(r16)
811134a8:	8c40400c 	andi	r17,r17,256
811134ac:	88000d1e 	bne	r17,zero,811134e4 <_fopen_r+0xe0>
811134b0:	8005883a 	mov	r2,r16
811134b4:	dfc00517 	ldw	ra,20(sp)
811134b8:	dcc00417 	ldw	r19,16(sp)
811134bc:	dc800317 	ldw	r18,12(sp)
811134c0:	dc400217 	ldw	r17,8(sp)
811134c4:	dc000117 	ldw	r16,4(sp)
811134c8:	dec00604 	addi	sp,sp,24
811134cc:	f800283a 	ret
811134d0:	111d3f00 	call	8111d3f0 <__sfp_lock_acquire>
811134d4:	8000030d 	sth	zero,12(r16)
811134d8:	111d3f40 	call	8111d3f4 <__sfp_lock_release>
811134dc:	0005883a 	mov	r2,zero
811134e0:	003ff406 	br	811134b4 <__reset+0xfb0f34b4>
811134e4:	01c00084 	movi	r7,2
811134e8:	000d883a 	mov	r6,zero
811134ec:	800b883a 	mov	r5,r16
811134f0:	9009883a 	mov	r4,r18
811134f4:	11136240 	call	81113624 <_fseek_r>
811134f8:	8005883a 	mov	r2,r16
811134fc:	003fed06 	br	811134b4 <__reset+0xfb0f34b4>

81113500 <fopen>:
81113500:	00a04534 	movhi	r2,33044
81113504:	10916904 	addi	r2,r2,17828
81113508:	280d883a 	mov	r6,r5
8111350c:	200b883a 	mov	r5,r4
81113510:	11000017 	ldw	r4,0(r2)
81113514:	11134041 	jmpi	81113404 <_fopen_r>

81113518 <_fprintf_r>:
81113518:	defffe04 	addi	sp,sp,-8
8111351c:	2809883a 	mov	r4,r5
81113520:	300b883a 	mov	r5,r6
81113524:	de00012e 	bgeu	sp,et,8111352c <_fprintf_r+0x14>
81113528:	003b68fa 	trap	3
8111352c:	dfc00015 	stw	ra,0(sp)
81113530:	d9c00115 	stw	r7,4(sp)
81113534:	d9800104 	addi	r6,sp,4
81113538:	11198240 	call	81119824 <__vfprintf_internal>
8111353c:	dfc00017 	ldw	ra,0(sp)
81113540:	dec00204 	addi	sp,sp,8
81113544:	f800283a 	ret

81113548 <fprintf>:
81113548:	defffd04 	addi	sp,sp,-12
8111354c:	de00012e 	bgeu	sp,et,81113554 <fprintf+0xc>
81113550:	003b68fa 	trap	3
81113554:	dfc00015 	stw	ra,0(sp)
81113558:	d9800115 	stw	r6,4(sp)
8111355c:	d9c00215 	stw	r7,8(sp)
81113560:	d9800104 	addi	r6,sp,4
81113564:	11198240 	call	81119824 <__vfprintf_internal>
81113568:	dfc00017 	ldw	ra,0(sp)
8111356c:	dec00304 	addi	sp,sp,12
81113570:	f800283a 	ret

81113574 <_fputc_r>:
81113574:	defffc04 	addi	sp,sp,-16
81113578:	de00012e 	bgeu	sp,et,81113580 <_fputc_r+0xc>
8111357c:	003b68fa 	trap	3
81113580:	dc000215 	stw	r16,8(sp)
81113584:	dfc00315 	stw	ra,12(sp)
81113588:	2021883a 	mov	r16,r4
8111358c:	20000726 	beq	r4,zero,811135ac <_fputc_r+0x38>
81113590:	20800e17 	ldw	r2,56(r4)
81113594:	1000051e 	bne	r2,zero,811135ac <_fputc_r+0x38>
81113598:	d9400015 	stw	r5,0(sp)
8111359c:	d9800115 	stw	r6,4(sp)
811135a0:	111d3e00 	call	8111d3e0 <__sinit>
811135a4:	d9800117 	ldw	r6,4(sp)
811135a8:	d9400017 	ldw	r5,0(sp)
811135ac:	8009883a 	mov	r4,r16
811135b0:	dfc00317 	ldw	ra,12(sp)
811135b4:	dc000217 	ldw	r16,8(sp)
811135b8:	dec00404 	addi	sp,sp,16
811135bc:	11149541 	jmpi	81114954 <_putc_r>

811135c0 <fputc>:
811135c0:	00a04534 	movhi	r2,33044
811135c4:	defffc04 	addi	sp,sp,-16
811135c8:	10916904 	addi	r2,r2,17828
811135cc:	de00012e 	bgeu	sp,et,811135d4 <fputc+0x14>
811135d0:	003b68fa 	trap	3
811135d4:	dc000115 	stw	r16,4(sp)
811135d8:	14000017 	ldw	r16,0(r2)
811135dc:	dc400215 	stw	r17,8(sp)
811135e0:	dfc00315 	stw	ra,12(sp)
811135e4:	2023883a 	mov	r17,r4
811135e8:	80000626 	beq	r16,zero,81113604 <fputc+0x44>
811135ec:	80800e17 	ldw	r2,56(r16)
811135f0:	1000041e 	bne	r2,zero,81113604 <fputc+0x44>
811135f4:	8009883a 	mov	r4,r16
811135f8:	d9400015 	stw	r5,0(sp)
811135fc:	111d3e00 	call	8111d3e0 <__sinit>
81113600:	d9400017 	ldw	r5,0(sp)
81113604:	280d883a 	mov	r6,r5
81113608:	8009883a 	mov	r4,r16
8111360c:	880b883a 	mov	r5,r17
81113610:	dfc00317 	ldw	ra,12(sp)
81113614:	dc400217 	ldw	r17,8(sp)
81113618:	dc000117 	ldw	r16,4(sp)
8111361c:	dec00404 	addi	sp,sp,16
81113620:	11149541 	jmpi	81114954 <_putc_r>

81113624 <_fseek_r>:
81113624:	11136441 	jmpi	81113644 <_fseeko_r>

81113628 <fseek>:
81113628:	00a04534 	movhi	r2,33044
8111362c:	10916904 	addi	r2,r2,17828
81113630:	300f883a 	mov	r7,r6
81113634:	280d883a 	mov	r6,r5
81113638:	200b883a 	mov	r5,r4
8111363c:	11000017 	ldw	r4,0(r2)
81113640:	11136441 	jmpi	81113644 <_fseeko_r>

81113644 <_fseeko_r>:
81113644:	deffe804 	addi	sp,sp,-96
81113648:	de00012e 	bgeu	sp,et,81113650 <_fseeko_r+0xc>
8111364c:	003b68fa 	trap	3
81113650:	dd401415 	stw	r21,80(sp)
81113654:	dc801115 	stw	r18,68(sp)
81113658:	dc401015 	stw	r17,64(sp)
8111365c:	dc000f15 	stw	r16,60(sp)
81113660:	dfc01715 	stw	ra,92(sp)
81113664:	ddc01615 	stw	r23,88(sp)
81113668:	dd801515 	stw	r22,84(sp)
8111366c:	dd001315 	stw	r20,76(sp)
81113670:	dcc01215 	stw	r19,72(sp)
81113674:	2023883a 	mov	r17,r4
81113678:	2821883a 	mov	r16,r5
8111367c:	302b883a 	mov	r21,r6
81113680:	3825883a 	mov	r18,r7
81113684:	20000226 	beq	r4,zero,81113690 <_fseeko_r+0x4c>
81113688:	20800e17 	ldw	r2,56(r4)
8111368c:	10005a26 	beq	r2,zero,811137f8 <_fseeko_r+0x1b4>
81113690:	8080030b 	ldhu	r2,12(r16)
81113694:	00c04204 	movi	r3,264
81113698:	1080420c 	andi	r2,r2,264
8111369c:	10c05b26 	beq	r2,r3,8111380c <_fseeko_r+0x1c8>
811136a0:	85000a17 	ldw	r20,40(r16)
811136a4:	a000f626 	beq	r20,zero,81113a80 <_fseeko_r+0x43c>
811136a8:	00800044 	movi	r2,1
811136ac:	90803e26 	beq	r18,r2,811137a8 <_fseeko_r+0x164>
811136b0:	00800084 	movi	r2,2
811136b4:	90801026 	beq	r18,r2,811136f8 <_fseeko_r+0xb4>
811136b8:	90000f26 	beq	r18,zero,811136f8 <_fseeko_r+0xb4>
811136bc:	00800584 	movi	r2,22
811136c0:	88800015 	stw	r2,0(r17)
811136c4:	04ffffc4 	movi	r19,-1
811136c8:	9805883a 	mov	r2,r19
811136cc:	dfc01717 	ldw	ra,92(sp)
811136d0:	ddc01617 	ldw	r23,88(sp)
811136d4:	dd801517 	ldw	r22,84(sp)
811136d8:	dd401417 	ldw	r21,80(sp)
811136dc:	dd001317 	ldw	r20,76(sp)
811136e0:	dcc01217 	ldw	r19,72(sp)
811136e4:	dc801117 	ldw	r18,68(sp)
811136e8:	dc401017 	ldw	r17,64(sp)
811136ec:	dc000f17 	ldw	r16,60(sp)
811136f0:	dec01804 	addi	sp,sp,96
811136f4:	f800283a 	ret
811136f8:	80800417 	ldw	r2,16(r16)
811136fc:	002f883a 	mov	r23,zero
81113700:	0027883a 	mov	r19,zero
81113704:	1000cb26 	beq	r2,zero,81113a34 <_fseeko_r+0x3f0>
81113708:	8080030b 	ldhu	r2,12(r16)
8111370c:	10c2068c 	andi	r3,r2,2074
81113710:	1800071e 	bne	r3,zero,81113730 <_fseeko_r+0xec>
81113714:	10c1000c 	andi	r3,r2,1024
81113718:	1800451e 	bne	r3,zero,81113830 <_fseeko_r+0x1ec>
8111371c:	00e04474 	movhi	r3,33041
81113720:	18d41504 	addi	r3,r3,20564
81113724:	a0c0b726 	beq	r20,r3,81113a04 <_fseeko_r+0x3c0>
81113728:	10820014 	ori	r2,r2,2048
8111372c:	8080030d 	sth	r2,12(r16)
81113730:	800b883a 	mov	r5,r16
81113734:	8809883a 	mov	r4,r17
81113738:	111cfe40 	call	8111cfe4 <_fflush_r>
8111373c:	1027883a 	mov	r19,r2
81113740:	103fe01e 	bne	r2,zero,811136c4 <__reset+0xfb0f36c4>
81113744:	81400717 	ldw	r5,28(r16)
81113748:	900f883a 	mov	r7,r18
8111374c:	a80d883a 	mov	r6,r21
81113750:	8809883a 	mov	r4,r17
81113754:	a03ee83a 	callr	r20
81113758:	00ffffc4 	movi	r3,-1
8111375c:	10ffd926 	beq	r2,r3,811136c4 <__reset+0xfb0f36c4>
81113760:	81400c17 	ldw	r5,48(r16)
81113764:	28000526 	beq	r5,zero,8111377c <_fseeko_r+0x138>
81113768:	80801004 	addi	r2,r16,64
8111376c:	28800226 	beq	r5,r2,81113778 <_fseeko_r+0x134>
81113770:	8809883a 	mov	r4,r17
81113774:	111d8780 	call	8111d878 <_free_r>
81113778:	80000c15 	stw	zero,48(r16)
8111377c:	8080030b 	ldhu	r2,12(r16)
81113780:	80c00417 	ldw	r3,16(r16)
81113784:	80000115 	stw	zero,4(r16)
81113788:	10bdf7cc 	andi	r2,r2,63455
8111378c:	80c00015 	stw	r3,0(r16)
81113790:	8080030d 	sth	r2,12(r16)
81113794:	01800204 	movi	r6,8
81113798:	000b883a 	mov	r5,zero
8111379c:	81001704 	addi	r4,r16,92
811137a0:	11147480 	call	81114748 <memset>
811137a4:	003fc806 	br	811136c8 <__reset+0xfb0f36c8>
811137a8:	800b883a 	mov	r5,r16
811137ac:	8809883a 	mov	r4,r17
811137b0:	111cfe40 	call	8111cfe4 <_fflush_r>
811137b4:	8080030b 	ldhu	r2,12(r16)
811137b8:	10c4000c 	andi	r3,r2,4096
811137bc:	18008726 	beq	r3,zero,811139dc <_fseeko_r+0x398>
811137c0:	84c01417 	ldw	r19,80(r16)
811137c4:	10c0010c 	andi	r3,r2,4
811137c8:	1800431e 	bne	r3,zero,811138d8 <_fseeko_r+0x294>
811137cc:	1080020c 	andi	r2,r2,8
811137d0:	10008026 	beq	r2,zero,811139d4 <_fseeko_r+0x390>
811137d4:	80c00017 	ldw	r3,0(r16)
811137d8:	80800417 	ldw	r2,16(r16)
811137dc:	18000226 	beq	r3,zero,811137e8 <_fseeko_r+0x1a4>
811137e0:	1887c83a 	sub	r3,r3,r2
811137e4:	98e7883a 	add	r19,r19,r3
811137e8:	aceb883a 	add	r21,r21,r19
811137ec:	05c00044 	movi	r23,1
811137f0:	0025883a 	mov	r18,zero
811137f4:	003fc306 	br	81113704 <__reset+0xfb0f3704>
811137f8:	111d3e00 	call	8111d3e0 <__sinit>
811137fc:	8080030b 	ldhu	r2,12(r16)
81113800:	00c04204 	movi	r3,264
81113804:	1080420c 	andi	r2,r2,264
81113808:	10ffa51e 	bne	r2,r3,811136a0 <__reset+0xfb0f36a0>
8111380c:	800b883a 	mov	r5,r16
81113810:	8809883a 	mov	r4,r17
81113814:	111cfe40 	call	8111cfe4 <_fflush_r>
81113818:	003fa106 	br	811136a0 <__reset+0xfb0f36a0>
8111381c:	8080030b 	ldhu	r2,12(r16)
81113820:	00c10004 	movi	r3,1024
81113824:	80c01315 	stw	r3,76(r16)
81113828:	10c4b03a 	or	r2,r2,r3
8111382c:	8080030d 	sth	r2,12(r16)
81113830:	9000311e 	bne	r18,zero,811138f8 <_fseeko_r+0x2b4>
81113834:	a82d883a 	mov	r22,r21
81113838:	b800371e 	bne	r23,zero,81113918 <_fseeko_r+0x2d4>
8111383c:	8080030b 	ldhu	r2,12(r16)
81113840:	1084000c 	andi	r2,r2,4096
81113844:	10007f26 	beq	r2,zero,81113a44 <_fseeko_r+0x400>
81113848:	80801417 	ldw	r2,80(r16)
8111384c:	81800117 	ldw	r6,4(r16)
81113850:	81400c17 	ldw	r5,48(r16)
81113854:	11a7c83a 	sub	r19,r2,r6
81113858:	28008226 	beq	r5,zero,81113a64 <_fseeko_r+0x420>
8111385c:	81c00f17 	ldw	r7,60(r16)
81113860:	99e7c83a 	sub	r19,r19,r7
81113864:	81000e17 	ldw	r4,56(r16)
81113868:	80800417 	ldw	r2,16(r16)
8111386c:	99a7883a 	add	r19,r19,r6
81113870:	2087c83a 	sub	r3,r4,r2
81113874:	98e7c83a 	sub	r19,r19,r3
81113878:	38c7883a 	add	r3,r7,r3
8111387c:	b4c02b16 	blt	r22,r19,8111392c <_fseeko_r+0x2e8>
81113880:	98c9883a 	add	r4,r19,r3
81113884:	b100292e 	bgeu	r22,r4,8111392c <_fseeko_r+0x2e8>
81113888:	b4e7c83a 	sub	r19,r22,r19
8111388c:	14c5883a 	add	r2,r2,r19
81113890:	1ce7c83a 	sub	r19,r3,r19
81113894:	80800015 	stw	r2,0(r16)
81113898:	84c00115 	stw	r19,4(r16)
8111389c:	28000526 	beq	r5,zero,811138b4 <_fseeko_r+0x270>
811138a0:	80801004 	addi	r2,r16,64
811138a4:	28800226 	beq	r5,r2,811138b0 <_fseeko_r+0x26c>
811138a8:	8809883a 	mov	r4,r17
811138ac:	111d8780 	call	8111d878 <_free_r>
811138b0:	80000c15 	stw	zero,48(r16)
811138b4:	8080030b 	ldhu	r2,12(r16)
811138b8:	01800204 	movi	r6,8
811138bc:	000b883a 	mov	r5,zero
811138c0:	10bff7cc 	andi	r2,r2,65503
811138c4:	8080030d 	sth	r2,12(r16)
811138c8:	81001704 	addi	r4,r16,92
811138cc:	11147480 	call	81114748 <memset>
811138d0:	0027883a 	mov	r19,zero
811138d4:	003f7c06 	br	811136c8 <__reset+0xfb0f36c8>
811138d8:	80c00117 	ldw	r3,4(r16)
811138dc:	80800c17 	ldw	r2,48(r16)
811138e0:	98e7c83a 	sub	r19,r19,r3
811138e4:	10003b26 	beq	r2,zero,811139d4 <_fseeko_r+0x390>
811138e8:	80c00f17 	ldw	r3,60(r16)
811138ec:	80800417 	ldw	r2,16(r16)
811138f0:	98e7c83a 	sub	r19,r19,r3
811138f4:	003fbc06 	br	811137e8 <__reset+0xfb0f37e8>
811138f8:	8140038f 	ldh	r5,14(r16)
811138fc:	d80d883a 	mov	r6,sp
81113900:	8809883a 	mov	r4,r17
81113904:	1113aac0 	call	81113aac <_fstat_r>
81113908:	103f891e 	bne	r2,zero,81113730 <__reset+0xfb0f3730>
8111390c:	dd800417 	ldw	r22,16(sp)
81113910:	adad883a 	add	r22,r21,r22
81113914:	b83fc926 	beq	r23,zero,8111383c <__reset+0xfb0f383c>
81113918:	81400c17 	ldw	r5,48(r16)
8111391c:	81800117 	ldw	r6,4(r16)
81113920:	28005026 	beq	r5,zero,81113a64 <_fseeko_r+0x420>
81113924:	81c00f17 	ldw	r7,60(r16)
81113928:	003fce06 	br	81113864 <__reset+0xfb0f3864>
8111392c:	84c01317 	ldw	r19,76(r16)
81113930:	81400717 	ldw	r5,28(r16)
81113934:	000f883a 	mov	r7,zero
81113938:	04e7c83a 	sub	r19,zero,r19
8111393c:	9da6703a 	and	r19,r19,r22
81113940:	980d883a 	mov	r6,r19
81113944:	8809883a 	mov	r4,r17
81113948:	a03ee83a 	callr	r20
8111394c:	00ffffc4 	movi	r3,-1
81113950:	10ff7726 	beq	r2,r3,81113730 <__reset+0xfb0f3730>
81113954:	80800417 	ldw	r2,16(r16)
81113958:	81400c17 	ldw	r5,48(r16)
8111395c:	80000115 	stw	zero,4(r16)
81113960:	80800015 	stw	r2,0(r16)
81113964:	28000526 	beq	r5,zero,8111397c <_fseeko_r+0x338>
81113968:	80801004 	addi	r2,r16,64
8111396c:	28800226 	beq	r5,r2,81113978 <_fseeko_r+0x334>
81113970:	8809883a 	mov	r4,r17
81113974:	111d8780 	call	8111d878 <_free_r>
81113978:	80000c15 	stw	zero,48(r16)
8111397c:	8080030b 	ldhu	r2,12(r16)
81113980:	b4e7c83a 	sub	r19,r22,r19
81113984:	10bff7cc 	andi	r2,r2,65503
81113988:	8080030d 	sth	r2,12(r16)
8111398c:	98000b26 	beq	r19,zero,811139bc <_fseeko_r+0x378>
81113990:	800b883a 	mov	r5,r16
81113994:	8809883a 	mov	r4,r17
81113998:	1114be40 	call	81114be4 <__srefill_r>
8111399c:	103f641e 	bne	r2,zero,81113730 <__reset+0xfb0f3730>
811139a0:	80800117 	ldw	r2,4(r16)
811139a4:	14ff6236 	bltu	r2,r19,81113730 <__reset+0xfb0f3730>
811139a8:	80c00017 	ldw	r3,0(r16)
811139ac:	14c5c83a 	sub	r2,r2,r19
811139b0:	80800115 	stw	r2,4(r16)
811139b4:	1ce7883a 	add	r19,r3,r19
811139b8:	84c00015 	stw	r19,0(r16)
811139bc:	01800204 	movi	r6,8
811139c0:	000b883a 	mov	r5,zero
811139c4:	81001704 	addi	r4,r16,92
811139c8:	11147480 	call	81114748 <memset>
811139cc:	0027883a 	mov	r19,zero
811139d0:	003f3d06 	br	811136c8 <__reset+0xfb0f36c8>
811139d4:	80800417 	ldw	r2,16(r16)
811139d8:	003f8306 	br	811137e8 <__reset+0xfb0f37e8>
811139dc:	81400717 	ldw	r5,28(r16)
811139e0:	900f883a 	mov	r7,r18
811139e4:	000d883a 	mov	r6,zero
811139e8:	8809883a 	mov	r4,r17
811139ec:	a03ee83a 	callr	r20
811139f0:	1027883a 	mov	r19,r2
811139f4:	00bfffc4 	movi	r2,-1
811139f8:	98bf3226 	beq	r19,r2,811136c4 <__reset+0xfb0f36c4>
811139fc:	8080030b 	ldhu	r2,12(r16)
81113a00:	003f7006 	br	811137c4 <__reset+0xfb0f37c4>
81113a04:	8140038f 	ldh	r5,14(r16)
81113a08:	283f4716 	blt	r5,zero,81113728 <__reset+0xfb0f3728>
81113a0c:	d80d883a 	mov	r6,sp
81113a10:	8809883a 	mov	r4,r17
81113a14:	1113aac0 	call	81113aac <_fstat_r>
81113a18:	1000041e 	bne	r2,zero,81113a2c <_fseeko_r+0x3e8>
81113a1c:	d8800117 	ldw	r2,4(sp)
81113a20:	00e00014 	movui	r3,32768
81113a24:	10bc000c 	andi	r2,r2,61440
81113a28:	10ff7c26 	beq	r2,r3,8111381c <__reset+0xfb0f381c>
81113a2c:	8080030b 	ldhu	r2,12(r16)
81113a30:	003f3d06 	br	81113728 <__reset+0xfb0f3728>
81113a34:	800b883a 	mov	r5,r16
81113a38:	8809883a 	mov	r4,r17
81113a3c:	1113c200 	call	81113c20 <__smakebuf_r>
81113a40:	003f3106 	br	81113708 <__reset+0xfb0f3708>
81113a44:	81400717 	ldw	r5,28(r16)
81113a48:	01c00044 	movi	r7,1
81113a4c:	000d883a 	mov	r6,zero
81113a50:	8809883a 	mov	r4,r17
81113a54:	a03ee83a 	callr	r20
81113a58:	00ffffc4 	movi	r3,-1
81113a5c:	10ff7b1e 	bne	r2,r3,8111384c <__reset+0xfb0f384c>
81113a60:	003f3306 	br	81113730 <__reset+0xfb0f3730>
81113a64:	80c00017 	ldw	r3,0(r16)
81113a68:	80800417 	ldw	r2,16(r16)
81113a6c:	000b883a 	mov	r5,zero
81113a70:	1887c83a 	sub	r3,r3,r2
81113a74:	98e7c83a 	sub	r19,r19,r3
81113a78:	30c7883a 	add	r3,r6,r3
81113a7c:	003f7f06 	br	8111387c <__reset+0xfb0f387c>
81113a80:	00800744 	movi	r2,29
81113a84:	88800015 	stw	r2,0(r17)
81113a88:	04ffffc4 	movi	r19,-1
81113a8c:	003f0e06 	br	811136c8 <__reset+0xfb0f36c8>

81113a90 <fseeko>:
81113a90:	00a04534 	movhi	r2,33044
81113a94:	10916904 	addi	r2,r2,17828
81113a98:	300f883a 	mov	r7,r6
81113a9c:	280d883a 	mov	r6,r5
81113aa0:	200b883a 	mov	r5,r4
81113aa4:	11000017 	ldw	r4,0(r2)
81113aa8:	11136441 	jmpi	81113644 <_fseeko_r>

81113aac <_fstat_r>:
81113aac:	defffd04 	addi	sp,sp,-12
81113ab0:	de00012e 	bgeu	sp,et,81113ab8 <_fstat_r+0xc>
81113ab4:	003b68fa 	trap	3
81113ab8:	2805883a 	mov	r2,r5
81113abc:	dc000015 	stw	r16,0(sp)
81113ac0:	04204534 	movhi	r16,33044
81113ac4:	dc400115 	stw	r17,4(sp)
81113ac8:	8411c604 	addi	r16,r16,18200
81113acc:	2023883a 	mov	r17,r4
81113ad0:	300b883a 	mov	r5,r6
81113ad4:	1009883a 	mov	r4,r2
81113ad8:	dfc00215 	stw	ra,8(sp)
81113adc:	80000015 	stw	zero,0(r16)
81113ae0:	11290b80 	call	811290b8 <fstat>
81113ae4:	00ffffc4 	movi	r3,-1
81113ae8:	10c00526 	beq	r2,r3,81113b00 <_fstat_r+0x54>
81113aec:	dfc00217 	ldw	ra,8(sp)
81113af0:	dc400117 	ldw	r17,4(sp)
81113af4:	dc000017 	ldw	r16,0(sp)
81113af8:	dec00304 	addi	sp,sp,12
81113afc:	f800283a 	ret
81113b00:	80c00017 	ldw	r3,0(r16)
81113b04:	183ff926 	beq	r3,zero,81113aec <__reset+0xfb0f3aec>
81113b08:	88c00015 	stw	r3,0(r17)
81113b0c:	003ff706 	br	81113aec <__reset+0xfb0f3aec>

81113b10 <_fwrite_r>:
81113b10:	defff504 	addi	sp,sp,-44
81113b14:	de00012e 	bgeu	sp,et,81113b1c <_fwrite_r+0xc>
81113b18:	003b68fa 	trap	3
81113b1c:	dc800815 	stw	r18,32(sp)
81113b20:	39a5383a 	mul	r18,r7,r6
81113b24:	d8800304 	addi	r2,sp,12
81113b28:	d8800015 	stw	r2,0(sp)
81113b2c:	00800044 	movi	r2,1
81113b30:	dcc00915 	stw	r19,36(sp)
81113b34:	dc400715 	stw	r17,28(sp)
81113b38:	dc000615 	stw	r16,24(sp)
81113b3c:	d9400315 	stw	r5,12(sp)
81113b40:	dfc00a15 	stw	ra,40(sp)
81113b44:	dc800415 	stw	r18,16(sp)
81113b48:	dc800215 	stw	r18,8(sp)
81113b4c:	d8800115 	stw	r2,4(sp)
81113b50:	3027883a 	mov	r19,r6
81113b54:	3821883a 	mov	r16,r7
81113b58:	2023883a 	mov	r17,r4
81113b5c:	d9400b17 	ldw	r5,44(sp)
81113b60:	20000226 	beq	r4,zero,81113b6c <_fwrite_r+0x5c>
81113b64:	20800e17 	ldw	r2,56(r4)
81113b68:	10001a26 	beq	r2,zero,81113bd4 <_fwrite_r+0xc4>
81113b6c:	2880030b 	ldhu	r2,12(r5)
81113b70:	10c8000c 	andi	r3,r2,8192
81113b74:	1800061e 	bne	r3,zero,81113b90 <_fwrite_r+0x80>
81113b78:	29001917 	ldw	r4,100(r5)
81113b7c:	00f7ffc4 	movi	r3,-8193
81113b80:	10880014 	ori	r2,r2,8192
81113b84:	20c6703a 	and	r3,r4,r3
81113b88:	2880030d 	sth	r2,12(r5)
81113b8c:	28c01915 	stw	r3,100(r5)
81113b90:	d80d883a 	mov	r6,sp
81113b94:	8809883a 	mov	r4,r17
81113b98:	111db900 	call	8111db90 <__sfvwrite_r>
81113b9c:	10000b26 	beq	r2,zero,81113bcc <_fwrite_r+0xbc>
81113ba0:	d9000217 	ldw	r4,8(sp)
81113ba4:	980b883a 	mov	r5,r19
81113ba8:	9109c83a 	sub	r4,r18,r4
81113bac:	1126c000 	call	81126c00 <__udivsi3>
81113bb0:	dfc00a17 	ldw	ra,40(sp)
81113bb4:	dcc00917 	ldw	r19,36(sp)
81113bb8:	dc800817 	ldw	r18,32(sp)
81113bbc:	dc400717 	ldw	r17,28(sp)
81113bc0:	dc000617 	ldw	r16,24(sp)
81113bc4:	dec00b04 	addi	sp,sp,44
81113bc8:	f800283a 	ret
81113bcc:	8005883a 	mov	r2,r16
81113bd0:	003ff706 	br	81113bb0 <__reset+0xfb0f3bb0>
81113bd4:	d9400515 	stw	r5,20(sp)
81113bd8:	111d3e00 	call	8111d3e0 <__sinit>
81113bdc:	d9400517 	ldw	r5,20(sp)
81113be0:	003fe206 	br	81113b6c <__reset+0xfb0f3b6c>

81113be4 <fwrite>:
81113be4:	defffe04 	addi	sp,sp,-8
81113be8:	00a04534 	movhi	r2,33044
81113bec:	de00012e 	bgeu	sp,et,81113bf4 <fwrite+0x10>
81113bf0:	003b68fa 	trap	3
81113bf4:	10916904 	addi	r2,r2,17828
81113bf8:	d9c00015 	stw	r7,0(sp)
81113bfc:	300f883a 	mov	r7,r6
81113c00:	280d883a 	mov	r6,r5
81113c04:	200b883a 	mov	r5,r4
81113c08:	11000017 	ldw	r4,0(r2)
81113c0c:	dfc00115 	stw	ra,4(sp)
81113c10:	1113b100 	call	81113b10 <_fwrite_r>
81113c14:	dfc00117 	ldw	ra,4(sp)
81113c18:	dec00204 	addi	sp,sp,8
81113c1c:	f800283a 	ret

81113c20 <__smakebuf_r>:
81113c20:	2880030b 	ldhu	r2,12(r5)
81113c24:	10c0008c 	andi	r3,r2,2
81113c28:	1800431e 	bne	r3,zero,81113d38 <__smakebuf_r+0x118>
81113c2c:	deffec04 	addi	sp,sp,-80
81113c30:	de00012e 	bgeu	sp,et,81113c38 <__smakebuf_r+0x18>
81113c34:	003b68fa 	trap	3
81113c38:	dc000f15 	stw	r16,60(sp)
81113c3c:	2821883a 	mov	r16,r5
81113c40:	2940038f 	ldh	r5,14(r5)
81113c44:	dc401015 	stw	r17,64(sp)
81113c48:	dfc01315 	stw	ra,76(sp)
81113c4c:	dcc01215 	stw	r19,72(sp)
81113c50:	dc801115 	stw	r18,68(sp)
81113c54:	2023883a 	mov	r17,r4
81113c58:	28001c16 	blt	r5,zero,81113ccc <__smakebuf_r+0xac>
81113c5c:	d80d883a 	mov	r6,sp
81113c60:	1113aac0 	call	81113aac <_fstat_r>
81113c64:	10001816 	blt	r2,zero,81113cc8 <__smakebuf_r+0xa8>
81113c68:	d8800117 	ldw	r2,4(sp)
81113c6c:	00e00014 	movui	r3,32768
81113c70:	10bc000c 	andi	r2,r2,61440
81113c74:	14c80020 	cmpeqi	r19,r2,8192
81113c78:	10c03726 	beq	r2,r3,81113d58 <__smakebuf_r+0x138>
81113c7c:	80c0030b 	ldhu	r3,12(r16)
81113c80:	18c20014 	ori	r3,r3,2048
81113c84:	80c0030d 	sth	r3,12(r16)
81113c88:	00c80004 	movi	r3,8192
81113c8c:	10c0521e 	bne	r2,r3,81113dd8 <__smakebuf_r+0x1b8>
81113c90:	8140038f 	ldh	r5,14(r16)
81113c94:	8809883a 	mov	r4,r17
81113c98:	111e1ec0 	call	8111e1ec <_isatty_r>
81113c9c:	10004c26 	beq	r2,zero,81113dd0 <__smakebuf_r+0x1b0>
81113ca0:	8080030b 	ldhu	r2,12(r16)
81113ca4:	80c010c4 	addi	r3,r16,67
81113ca8:	80c00015 	stw	r3,0(r16)
81113cac:	10800054 	ori	r2,r2,1
81113cb0:	8080030d 	sth	r2,12(r16)
81113cb4:	00800044 	movi	r2,1
81113cb8:	80c00415 	stw	r3,16(r16)
81113cbc:	80800515 	stw	r2,20(r16)
81113cc0:	04810004 	movi	r18,1024
81113cc4:	00000706 	br	81113ce4 <__smakebuf_r+0xc4>
81113cc8:	8080030b 	ldhu	r2,12(r16)
81113ccc:	10c0200c 	andi	r3,r2,128
81113cd0:	18001f1e 	bne	r3,zero,81113d50 <__smakebuf_r+0x130>
81113cd4:	04810004 	movi	r18,1024
81113cd8:	10820014 	ori	r2,r2,2048
81113cdc:	8080030d 	sth	r2,12(r16)
81113ce0:	0027883a 	mov	r19,zero
81113ce4:	900b883a 	mov	r5,r18
81113ce8:	8809883a 	mov	r4,r17
81113cec:	1113de40 	call	81113de4 <_malloc_r>
81113cf0:	10002c26 	beq	r2,zero,81113da4 <__smakebuf_r+0x184>
81113cf4:	80c0030b 	ldhu	r3,12(r16)
81113cf8:	012044b4 	movhi	r4,33042
81113cfc:	21342004 	addi	r4,r4,-12160
81113d00:	89000f15 	stw	r4,60(r17)
81113d04:	18c02014 	ori	r3,r3,128
81113d08:	80c0030d 	sth	r3,12(r16)
81113d0c:	80800015 	stw	r2,0(r16)
81113d10:	80800415 	stw	r2,16(r16)
81113d14:	84800515 	stw	r18,20(r16)
81113d18:	98001a1e 	bne	r19,zero,81113d84 <__smakebuf_r+0x164>
81113d1c:	dfc01317 	ldw	ra,76(sp)
81113d20:	dcc01217 	ldw	r19,72(sp)
81113d24:	dc801117 	ldw	r18,68(sp)
81113d28:	dc401017 	ldw	r17,64(sp)
81113d2c:	dc000f17 	ldw	r16,60(sp)
81113d30:	dec01404 	addi	sp,sp,80
81113d34:	f800283a 	ret
81113d38:	288010c4 	addi	r2,r5,67
81113d3c:	28800015 	stw	r2,0(r5)
81113d40:	28800415 	stw	r2,16(r5)
81113d44:	00800044 	movi	r2,1
81113d48:	28800515 	stw	r2,20(r5)
81113d4c:	f800283a 	ret
81113d50:	04801004 	movi	r18,64
81113d54:	003fe006 	br	81113cd8 <__reset+0xfb0f3cd8>
81113d58:	81000a17 	ldw	r4,40(r16)
81113d5c:	00e04474 	movhi	r3,33041
81113d60:	18d41504 	addi	r3,r3,20564
81113d64:	20ffc51e 	bne	r4,r3,81113c7c <__reset+0xfb0f3c7c>
81113d68:	8080030b 	ldhu	r2,12(r16)
81113d6c:	04810004 	movi	r18,1024
81113d70:	84801315 	stw	r18,76(r16)
81113d74:	1484b03a 	or	r2,r2,r18
81113d78:	8080030d 	sth	r2,12(r16)
81113d7c:	0027883a 	mov	r19,zero
81113d80:	003fd806 	br	81113ce4 <__reset+0xfb0f3ce4>
81113d84:	8140038f 	ldh	r5,14(r16)
81113d88:	8809883a 	mov	r4,r17
81113d8c:	111e1ec0 	call	8111e1ec <_isatty_r>
81113d90:	103fe226 	beq	r2,zero,81113d1c <__reset+0xfb0f3d1c>
81113d94:	8080030b 	ldhu	r2,12(r16)
81113d98:	10800054 	ori	r2,r2,1
81113d9c:	8080030d 	sth	r2,12(r16)
81113da0:	003fde06 	br	81113d1c <__reset+0xfb0f3d1c>
81113da4:	8080030b 	ldhu	r2,12(r16)
81113da8:	10c0800c 	andi	r3,r2,512
81113dac:	183fdb1e 	bne	r3,zero,81113d1c <__reset+0xfb0f3d1c>
81113db0:	10800094 	ori	r2,r2,2
81113db4:	80c010c4 	addi	r3,r16,67
81113db8:	8080030d 	sth	r2,12(r16)
81113dbc:	00800044 	movi	r2,1
81113dc0:	80c00015 	stw	r3,0(r16)
81113dc4:	80c00415 	stw	r3,16(r16)
81113dc8:	80800515 	stw	r2,20(r16)
81113dcc:	003fd306 	br	81113d1c <__reset+0xfb0f3d1c>
81113dd0:	04810004 	movi	r18,1024
81113dd4:	003fc306 	br	81113ce4 <__reset+0xfb0f3ce4>
81113dd8:	0027883a 	mov	r19,zero
81113ddc:	04810004 	movi	r18,1024
81113de0:	003fc006 	br	81113ce4 <__reset+0xfb0f3ce4>

81113de4 <_malloc_r>:
81113de4:	defff504 	addi	sp,sp,-44
81113de8:	de00012e 	bgeu	sp,et,81113df0 <_malloc_r+0xc>
81113dec:	003b68fa 	trap	3
81113df0:	288002c4 	addi	r2,r5,11
81113df4:	dc800315 	stw	r18,12(sp)
81113df8:	dfc00a15 	stw	ra,40(sp)
81113dfc:	df000915 	stw	fp,36(sp)
81113e00:	ddc00815 	stw	r23,32(sp)
81113e04:	dd800715 	stw	r22,28(sp)
81113e08:	dd400615 	stw	r21,24(sp)
81113e0c:	dd000515 	stw	r20,20(sp)
81113e10:	dcc00415 	stw	r19,16(sp)
81113e14:	dc400215 	stw	r17,8(sp)
81113e18:	dc000115 	stw	r16,4(sp)
81113e1c:	00c00584 	movi	r3,22
81113e20:	2025883a 	mov	r18,r4
81113e24:	18807f2e 	bgeu	r3,r2,81114024 <_malloc_r+0x240>
81113e28:	047ffe04 	movi	r17,-8
81113e2c:	1462703a 	and	r17,r2,r17
81113e30:	8800a316 	blt	r17,zero,811140c0 <_malloc_r+0x2dc>
81113e34:	8940a236 	bltu	r17,r5,811140c0 <_malloc_r+0x2dc>
81113e38:	112ac400 	call	8112ac40 <__malloc_lock>
81113e3c:	00807dc4 	movi	r2,503
81113e40:	1441e92e 	bgeu	r2,r17,811145e8 <_malloc_r+0x804>
81113e44:	8804d27a 	srli	r2,r17,9
81113e48:	1000a126 	beq	r2,zero,811140d0 <_malloc_r+0x2ec>
81113e4c:	00c00104 	movi	r3,4
81113e50:	18811e36 	bltu	r3,r2,811142cc <_malloc_r+0x4e8>
81113e54:	8804d1ba 	srli	r2,r17,6
81113e58:	12000e44 	addi	r8,r2,57
81113e5c:	11c00e04 	addi	r7,r2,56
81113e60:	4209883a 	add	r4,r8,r8
81113e64:	04e04534 	movhi	r19,33044
81113e68:	2109883a 	add	r4,r4,r4
81113e6c:	9ccb2704 	addi	r19,r19,11420
81113e70:	2109883a 	add	r4,r4,r4
81113e74:	9909883a 	add	r4,r19,r4
81113e78:	24000117 	ldw	r16,4(r4)
81113e7c:	213ffe04 	addi	r4,r4,-8
81113e80:	24009726 	beq	r4,r16,811140e0 <_malloc_r+0x2fc>
81113e84:	80800117 	ldw	r2,4(r16)
81113e88:	01bfff04 	movi	r6,-4
81113e8c:	014003c4 	movi	r5,15
81113e90:	1184703a 	and	r2,r2,r6
81113e94:	1447c83a 	sub	r3,r2,r17
81113e98:	28c00716 	blt	r5,r3,81113eb8 <_malloc_r+0xd4>
81113e9c:	1800920e 	bge	r3,zero,811140e8 <_malloc_r+0x304>
81113ea0:	84000317 	ldw	r16,12(r16)
81113ea4:	24008e26 	beq	r4,r16,811140e0 <_malloc_r+0x2fc>
81113ea8:	80800117 	ldw	r2,4(r16)
81113eac:	1184703a 	and	r2,r2,r6
81113eb0:	1447c83a 	sub	r3,r2,r17
81113eb4:	28fff90e 	bge	r5,r3,81113e9c <__reset+0xfb0f3e9c>
81113eb8:	3809883a 	mov	r4,r7
81113ebc:	01a04534 	movhi	r6,33044
81113ec0:	9c000417 	ldw	r16,16(r19)
81113ec4:	318b2704 	addi	r6,r6,11420
81113ec8:	32000204 	addi	r8,r6,8
81113ecc:	82013426 	beq	r16,r8,811143a0 <_malloc_r+0x5bc>
81113ed0:	80c00117 	ldw	r3,4(r16)
81113ed4:	00bfff04 	movi	r2,-4
81113ed8:	188e703a 	and	r7,r3,r2
81113edc:	3c45c83a 	sub	r2,r7,r17
81113ee0:	00c003c4 	movi	r3,15
81113ee4:	18811f16 	blt	r3,r2,81114364 <_malloc_r+0x580>
81113ee8:	32000515 	stw	r8,20(r6)
81113eec:	32000415 	stw	r8,16(r6)
81113ef0:	10007f0e 	bge	r2,zero,811140f0 <_malloc_r+0x30c>
81113ef4:	00807fc4 	movi	r2,511
81113ef8:	11c0fd36 	bltu	r2,r7,811142f0 <_malloc_r+0x50c>
81113efc:	3806d0fa 	srli	r3,r7,3
81113f00:	01c00044 	movi	r7,1
81113f04:	30800117 	ldw	r2,4(r6)
81113f08:	19400044 	addi	r5,r3,1
81113f0c:	294b883a 	add	r5,r5,r5
81113f10:	1807d0ba 	srai	r3,r3,2
81113f14:	294b883a 	add	r5,r5,r5
81113f18:	294b883a 	add	r5,r5,r5
81113f1c:	298b883a 	add	r5,r5,r6
81113f20:	38c6983a 	sll	r3,r7,r3
81113f24:	29c00017 	ldw	r7,0(r5)
81113f28:	2a7ffe04 	addi	r9,r5,-8
81113f2c:	1886b03a 	or	r3,r3,r2
81113f30:	82400315 	stw	r9,12(r16)
81113f34:	81c00215 	stw	r7,8(r16)
81113f38:	30c00115 	stw	r3,4(r6)
81113f3c:	2c000015 	stw	r16,0(r5)
81113f40:	3c000315 	stw	r16,12(r7)
81113f44:	2005d0ba 	srai	r2,r4,2
81113f48:	01400044 	movi	r5,1
81113f4c:	288a983a 	sll	r5,r5,r2
81113f50:	19406f36 	bltu	r3,r5,81114110 <_malloc_r+0x32c>
81113f54:	28c4703a 	and	r2,r5,r3
81113f58:	10000a1e 	bne	r2,zero,81113f84 <_malloc_r+0x1a0>
81113f5c:	00bfff04 	movi	r2,-4
81113f60:	294b883a 	add	r5,r5,r5
81113f64:	2088703a 	and	r4,r4,r2
81113f68:	28c4703a 	and	r2,r5,r3
81113f6c:	21000104 	addi	r4,r4,4
81113f70:	1000041e 	bne	r2,zero,81113f84 <_malloc_r+0x1a0>
81113f74:	294b883a 	add	r5,r5,r5
81113f78:	28c4703a 	and	r2,r5,r3
81113f7c:	21000104 	addi	r4,r4,4
81113f80:	103ffc26 	beq	r2,zero,81113f74 <__reset+0xfb0f3f74>
81113f84:	02bfff04 	movi	r10,-4
81113f88:	024003c4 	movi	r9,15
81113f8c:	21800044 	addi	r6,r4,1
81113f90:	318d883a 	add	r6,r6,r6
81113f94:	318d883a 	add	r6,r6,r6
81113f98:	318d883a 	add	r6,r6,r6
81113f9c:	998d883a 	add	r6,r19,r6
81113fa0:	333ffe04 	addi	r12,r6,-8
81113fa4:	2017883a 	mov	r11,r4
81113fa8:	31800104 	addi	r6,r6,4
81113fac:	34000017 	ldw	r16,0(r6)
81113fb0:	31fffd04 	addi	r7,r6,-12
81113fb4:	81c0041e 	bne	r16,r7,81113fc8 <_malloc_r+0x1e4>
81113fb8:	0000fb06 	br	811143a8 <_malloc_r+0x5c4>
81113fbc:	1801030e 	bge	r3,zero,811143cc <_malloc_r+0x5e8>
81113fc0:	84000317 	ldw	r16,12(r16)
81113fc4:	81c0f826 	beq	r16,r7,811143a8 <_malloc_r+0x5c4>
81113fc8:	80800117 	ldw	r2,4(r16)
81113fcc:	1284703a 	and	r2,r2,r10
81113fd0:	1447c83a 	sub	r3,r2,r17
81113fd4:	48fff90e 	bge	r9,r3,81113fbc <__reset+0xfb0f3fbc>
81113fd8:	80800317 	ldw	r2,12(r16)
81113fdc:	81000217 	ldw	r4,8(r16)
81113fe0:	89400054 	ori	r5,r17,1
81113fe4:	81400115 	stw	r5,4(r16)
81113fe8:	20800315 	stw	r2,12(r4)
81113fec:	11000215 	stw	r4,8(r2)
81113ff0:	8463883a 	add	r17,r16,r17
81113ff4:	9c400515 	stw	r17,20(r19)
81113ff8:	9c400415 	stw	r17,16(r19)
81113ffc:	18800054 	ori	r2,r3,1
81114000:	88800115 	stw	r2,4(r17)
81114004:	8a000315 	stw	r8,12(r17)
81114008:	8a000215 	stw	r8,8(r17)
8111400c:	88e3883a 	add	r17,r17,r3
81114010:	88c00015 	stw	r3,0(r17)
81114014:	9009883a 	mov	r4,r18
81114018:	112ad680 	call	8112ad68 <__malloc_unlock>
8111401c:	80800204 	addi	r2,r16,8
81114020:	00001b06 	br	81114090 <_malloc_r+0x2ac>
81114024:	04400404 	movi	r17,16
81114028:	89402536 	bltu	r17,r5,811140c0 <_malloc_r+0x2dc>
8111402c:	112ac400 	call	8112ac40 <__malloc_lock>
81114030:	00800184 	movi	r2,6
81114034:	01000084 	movi	r4,2
81114038:	04e04534 	movhi	r19,33044
8111403c:	1085883a 	add	r2,r2,r2
81114040:	9ccb2704 	addi	r19,r19,11420
81114044:	1085883a 	add	r2,r2,r2
81114048:	9885883a 	add	r2,r19,r2
8111404c:	14000117 	ldw	r16,4(r2)
81114050:	10fffe04 	addi	r3,r2,-8
81114054:	80c0d926 	beq	r16,r3,811143bc <_malloc_r+0x5d8>
81114058:	80c00117 	ldw	r3,4(r16)
8111405c:	81000317 	ldw	r4,12(r16)
81114060:	00bfff04 	movi	r2,-4
81114064:	1884703a 	and	r2,r3,r2
81114068:	81400217 	ldw	r5,8(r16)
8111406c:	8085883a 	add	r2,r16,r2
81114070:	10c00117 	ldw	r3,4(r2)
81114074:	29000315 	stw	r4,12(r5)
81114078:	21400215 	stw	r5,8(r4)
8111407c:	18c00054 	ori	r3,r3,1
81114080:	10c00115 	stw	r3,4(r2)
81114084:	9009883a 	mov	r4,r18
81114088:	112ad680 	call	8112ad68 <__malloc_unlock>
8111408c:	80800204 	addi	r2,r16,8
81114090:	dfc00a17 	ldw	ra,40(sp)
81114094:	df000917 	ldw	fp,36(sp)
81114098:	ddc00817 	ldw	r23,32(sp)
8111409c:	dd800717 	ldw	r22,28(sp)
811140a0:	dd400617 	ldw	r21,24(sp)
811140a4:	dd000517 	ldw	r20,20(sp)
811140a8:	dcc00417 	ldw	r19,16(sp)
811140ac:	dc800317 	ldw	r18,12(sp)
811140b0:	dc400217 	ldw	r17,8(sp)
811140b4:	dc000117 	ldw	r16,4(sp)
811140b8:	dec00b04 	addi	sp,sp,44
811140bc:	f800283a 	ret
811140c0:	00800304 	movi	r2,12
811140c4:	90800015 	stw	r2,0(r18)
811140c8:	0005883a 	mov	r2,zero
811140cc:	003ff006 	br	81114090 <__reset+0xfb0f4090>
811140d0:	01002004 	movi	r4,128
811140d4:	02001004 	movi	r8,64
811140d8:	01c00fc4 	movi	r7,63
811140dc:	003f6106 	br	81113e64 <__reset+0xfb0f3e64>
811140e0:	4009883a 	mov	r4,r8
811140e4:	003f7506 	br	81113ebc <__reset+0xfb0f3ebc>
811140e8:	81000317 	ldw	r4,12(r16)
811140ec:	003fde06 	br	81114068 <__reset+0xfb0f4068>
811140f0:	81c5883a 	add	r2,r16,r7
811140f4:	11400117 	ldw	r5,4(r2)
811140f8:	9009883a 	mov	r4,r18
811140fc:	29400054 	ori	r5,r5,1
81114100:	11400115 	stw	r5,4(r2)
81114104:	112ad680 	call	8112ad68 <__malloc_unlock>
81114108:	80800204 	addi	r2,r16,8
8111410c:	003fe006 	br	81114090 <__reset+0xfb0f4090>
81114110:	9c000217 	ldw	r16,8(r19)
81114114:	00bfff04 	movi	r2,-4
81114118:	85800117 	ldw	r22,4(r16)
8111411c:	b0ac703a 	and	r22,r22,r2
81114120:	b4400336 	bltu	r22,r17,81114130 <_malloc_r+0x34c>
81114124:	b445c83a 	sub	r2,r22,r17
81114128:	00c003c4 	movi	r3,15
8111412c:	18805d16 	blt	r3,r2,811142a4 <_malloc_r+0x4c0>
81114130:	05e04534 	movhi	r23,33044
81114134:	00a04534 	movhi	r2,33044
81114138:	1091c904 	addi	r2,r2,18212
8111413c:	bdd16a04 	addi	r23,r23,17832
81114140:	15400017 	ldw	r21,0(r2)
81114144:	b8c00017 	ldw	r3,0(r23)
81114148:	00bfffc4 	movi	r2,-1
8111414c:	858d883a 	add	r6,r16,r22
81114150:	8d6b883a 	add	r21,r17,r21
81114154:	1880ea26 	beq	r3,r2,81114500 <_malloc_r+0x71c>
81114158:	ad4403c4 	addi	r21,r21,4111
8111415c:	00bc0004 	movi	r2,-4096
81114160:	a8aa703a 	and	r21,r21,r2
81114164:	a80b883a 	mov	r5,r21
81114168:	9009883a 	mov	r4,r18
8111416c:	d9800015 	stw	r6,0(sp)
81114170:	1114dc00 	call	81114dc0 <_sbrk_r>
81114174:	1029883a 	mov	r20,r2
81114178:	00bfffc4 	movi	r2,-1
8111417c:	d9800017 	ldw	r6,0(sp)
81114180:	a080e826 	beq	r20,r2,81114524 <_malloc_r+0x740>
81114184:	a180a636 	bltu	r20,r6,81114420 <_malloc_r+0x63c>
81114188:	07204534 	movhi	fp,33044
8111418c:	e7122c04 	addi	fp,fp,18608
81114190:	e0800017 	ldw	r2,0(fp)
81114194:	a887883a 	add	r3,r21,r2
81114198:	e0c00015 	stw	r3,0(fp)
8111419c:	3500e626 	beq	r6,r20,81114538 <_malloc_r+0x754>
811141a0:	b9000017 	ldw	r4,0(r23)
811141a4:	00bfffc4 	movi	r2,-1
811141a8:	2080ee26 	beq	r4,r2,81114564 <_malloc_r+0x780>
811141ac:	a185c83a 	sub	r2,r20,r6
811141b0:	10c5883a 	add	r2,r2,r3
811141b4:	e0800015 	stw	r2,0(fp)
811141b8:	a0c001cc 	andi	r3,r20,7
811141bc:	1800bc26 	beq	r3,zero,811144b0 <_malloc_r+0x6cc>
811141c0:	a0e9c83a 	sub	r20,r20,r3
811141c4:	00840204 	movi	r2,4104
811141c8:	a5000204 	addi	r20,r20,8
811141cc:	10c7c83a 	sub	r3,r2,r3
811141d0:	a545883a 	add	r2,r20,r21
811141d4:	1083ffcc 	andi	r2,r2,4095
811141d8:	18abc83a 	sub	r21,r3,r2
811141dc:	a80b883a 	mov	r5,r21
811141e0:	9009883a 	mov	r4,r18
811141e4:	1114dc00 	call	81114dc0 <_sbrk_r>
811141e8:	00ffffc4 	movi	r3,-1
811141ec:	10c0e126 	beq	r2,r3,81114574 <_malloc_r+0x790>
811141f0:	1505c83a 	sub	r2,r2,r20
811141f4:	1545883a 	add	r2,r2,r21
811141f8:	10800054 	ori	r2,r2,1
811141fc:	e0c00017 	ldw	r3,0(fp)
81114200:	9d000215 	stw	r20,8(r19)
81114204:	a0800115 	stw	r2,4(r20)
81114208:	a8c7883a 	add	r3,r21,r3
8111420c:	e0c00015 	stw	r3,0(fp)
81114210:	84c00e26 	beq	r16,r19,8111424c <_malloc_r+0x468>
81114214:	018003c4 	movi	r6,15
81114218:	3580a72e 	bgeu	r6,r22,811144b8 <_malloc_r+0x6d4>
8111421c:	81400117 	ldw	r5,4(r16)
81114220:	013ffe04 	movi	r4,-8
81114224:	b0bffd04 	addi	r2,r22,-12
81114228:	1104703a 	and	r2,r2,r4
8111422c:	2900004c 	andi	r4,r5,1
81114230:	2088b03a 	or	r4,r4,r2
81114234:	81000115 	stw	r4,4(r16)
81114238:	01400144 	movi	r5,5
8111423c:	8089883a 	add	r4,r16,r2
81114240:	21400115 	stw	r5,4(r4)
81114244:	21400215 	stw	r5,8(r4)
81114248:	3080cd36 	bltu	r6,r2,81114580 <_malloc_r+0x79c>
8111424c:	00a04534 	movhi	r2,33044
81114250:	1091c804 	addi	r2,r2,18208
81114254:	11000017 	ldw	r4,0(r2)
81114258:	20c0012e 	bgeu	r4,r3,81114260 <_malloc_r+0x47c>
8111425c:	10c00015 	stw	r3,0(r2)
81114260:	00a04534 	movhi	r2,33044
81114264:	1091c704 	addi	r2,r2,18204
81114268:	11000017 	ldw	r4,0(r2)
8111426c:	9c000217 	ldw	r16,8(r19)
81114270:	20c0012e 	bgeu	r4,r3,81114278 <_malloc_r+0x494>
81114274:	10c00015 	stw	r3,0(r2)
81114278:	80c00117 	ldw	r3,4(r16)
8111427c:	00bfff04 	movi	r2,-4
81114280:	1886703a 	and	r3,r3,r2
81114284:	1c45c83a 	sub	r2,r3,r17
81114288:	1c400236 	bltu	r3,r17,81114294 <_malloc_r+0x4b0>
8111428c:	00c003c4 	movi	r3,15
81114290:	18800416 	blt	r3,r2,811142a4 <_malloc_r+0x4c0>
81114294:	9009883a 	mov	r4,r18
81114298:	112ad680 	call	8112ad68 <__malloc_unlock>
8111429c:	0005883a 	mov	r2,zero
811142a0:	003f7b06 	br	81114090 <__reset+0xfb0f4090>
811142a4:	88c00054 	ori	r3,r17,1
811142a8:	80c00115 	stw	r3,4(r16)
811142ac:	8463883a 	add	r17,r16,r17
811142b0:	10800054 	ori	r2,r2,1
811142b4:	9c400215 	stw	r17,8(r19)
811142b8:	88800115 	stw	r2,4(r17)
811142bc:	9009883a 	mov	r4,r18
811142c0:	112ad680 	call	8112ad68 <__malloc_unlock>
811142c4:	80800204 	addi	r2,r16,8
811142c8:	003f7106 	br	81114090 <__reset+0xfb0f4090>
811142cc:	00c00504 	movi	r3,20
811142d0:	18804a2e 	bgeu	r3,r2,811143fc <_malloc_r+0x618>
811142d4:	00c01504 	movi	r3,84
811142d8:	18806e36 	bltu	r3,r2,81114494 <_malloc_r+0x6b0>
811142dc:	8804d33a 	srli	r2,r17,12
811142e0:	12001bc4 	addi	r8,r2,111
811142e4:	11c01b84 	addi	r7,r2,110
811142e8:	4209883a 	add	r4,r8,r8
811142ec:	003edd06 	br	81113e64 <__reset+0xfb0f3e64>
811142f0:	3804d27a 	srli	r2,r7,9
811142f4:	00c00104 	movi	r3,4
811142f8:	1880442e 	bgeu	r3,r2,8111440c <_malloc_r+0x628>
811142fc:	00c00504 	movi	r3,20
81114300:	18808136 	bltu	r3,r2,81114508 <_malloc_r+0x724>
81114304:	11401704 	addi	r5,r2,92
81114308:	10c016c4 	addi	r3,r2,91
8111430c:	294b883a 	add	r5,r5,r5
81114310:	294b883a 	add	r5,r5,r5
81114314:	294b883a 	add	r5,r5,r5
81114318:	994b883a 	add	r5,r19,r5
8111431c:	28800017 	ldw	r2,0(r5)
81114320:	01a04534 	movhi	r6,33044
81114324:	297ffe04 	addi	r5,r5,-8
81114328:	318b2704 	addi	r6,r6,11420
8111432c:	28806526 	beq	r5,r2,811144c4 <_malloc_r+0x6e0>
81114330:	01bfff04 	movi	r6,-4
81114334:	10c00117 	ldw	r3,4(r2)
81114338:	1986703a 	and	r3,r3,r6
8111433c:	38c0022e 	bgeu	r7,r3,81114348 <_malloc_r+0x564>
81114340:	10800217 	ldw	r2,8(r2)
81114344:	28bffb1e 	bne	r5,r2,81114334 <__reset+0xfb0f4334>
81114348:	11400317 	ldw	r5,12(r2)
8111434c:	98c00117 	ldw	r3,4(r19)
81114350:	81400315 	stw	r5,12(r16)
81114354:	80800215 	stw	r2,8(r16)
81114358:	2c000215 	stw	r16,8(r5)
8111435c:	14000315 	stw	r16,12(r2)
81114360:	003ef806 	br	81113f44 <__reset+0xfb0f3f44>
81114364:	88c00054 	ori	r3,r17,1
81114368:	80c00115 	stw	r3,4(r16)
8111436c:	8463883a 	add	r17,r16,r17
81114370:	34400515 	stw	r17,20(r6)
81114374:	34400415 	stw	r17,16(r6)
81114378:	10c00054 	ori	r3,r2,1
8111437c:	8a000315 	stw	r8,12(r17)
81114380:	8a000215 	stw	r8,8(r17)
81114384:	88c00115 	stw	r3,4(r17)
81114388:	88a3883a 	add	r17,r17,r2
8111438c:	88800015 	stw	r2,0(r17)
81114390:	9009883a 	mov	r4,r18
81114394:	112ad680 	call	8112ad68 <__malloc_unlock>
81114398:	80800204 	addi	r2,r16,8
8111439c:	003f3c06 	br	81114090 <__reset+0xfb0f4090>
811143a0:	30c00117 	ldw	r3,4(r6)
811143a4:	003ee706 	br	81113f44 <__reset+0xfb0f3f44>
811143a8:	5ac00044 	addi	r11,r11,1
811143ac:	588000cc 	andi	r2,r11,3
811143b0:	31800204 	addi	r6,r6,8
811143b4:	103efd1e 	bne	r2,zero,81113fac <__reset+0xfb0f3fac>
811143b8:	00002406 	br	8111444c <_malloc_r+0x668>
811143bc:	14000317 	ldw	r16,12(r2)
811143c0:	143f251e 	bne	r2,r16,81114058 <__reset+0xfb0f4058>
811143c4:	21000084 	addi	r4,r4,2
811143c8:	003ebc06 	br	81113ebc <__reset+0xfb0f3ebc>
811143cc:	8085883a 	add	r2,r16,r2
811143d0:	10c00117 	ldw	r3,4(r2)
811143d4:	81000317 	ldw	r4,12(r16)
811143d8:	81400217 	ldw	r5,8(r16)
811143dc:	18c00054 	ori	r3,r3,1
811143e0:	10c00115 	stw	r3,4(r2)
811143e4:	29000315 	stw	r4,12(r5)
811143e8:	21400215 	stw	r5,8(r4)
811143ec:	9009883a 	mov	r4,r18
811143f0:	112ad680 	call	8112ad68 <__malloc_unlock>
811143f4:	80800204 	addi	r2,r16,8
811143f8:	003f2506 	br	81114090 <__reset+0xfb0f4090>
811143fc:	12001704 	addi	r8,r2,92
81114400:	11c016c4 	addi	r7,r2,91
81114404:	4209883a 	add	r4,r8,r8
81114408:	003e9606 	br	81113e64 <__reset+0xfb0f3e64>
8111440c:	3804d1ba 	srli	r2,r7,6
81114410:	11400e44 	addi	r5,r2,57
81114414:	10c00e04 	addi	r3,r2,56
81114418:	294b883a 	add	r5,r5,r5
8111441c:	003fbc06 	br	81114310 <__reset+0xfb0f4310>
81114420:	84ff5926 	beq	r16,r19,81114188 <__reset+0xfb0f4188>
81114424:	00a04534 	movhi	r2,33044
81114428:	108b2704 	addi	r2,r2,11420
8111442c:	14000217 	ldw	r16,8(r2)
81114430:	00bfff04 	movi	r2,-4
81114434:	80c00117 	ldw	r3,4(r16)
81114438:	1886703a 	and	r3,r3,r2
8111443c:	003f9106 	br	81114284 <__reset+0xfb0f4284>
81114440:	60800217 	ldw	r2,8(r12)
81114444:	213fffc4 	addi	r4,r4,-1
81114448:	1300651e 	bne	r2,r12,811145e0 <_malloc_r+0x7fc>
8111444c:	208000cc 	andi	r2,r4,3
81114450:	633ffe04 	addi	r12,r12,-8
81114454:	103ffa1e 	bne	r2,zero,81114440 <__reset+0xfb0f4440>
81114458:	98800117 	ldw	r2,4(r19)
8111445c:	0146303a 	nor	r3,zero,r5
81114460:	1884703a 	and	r2,r3,r2
81114464:	98800115 	stw	r2,4(r19)
81114468:	294b883a 	add	r5,r5,r5
8111446c:	117f2836 	bltu	r2,r5,81114110 <__reset+0xfb0f4110>
81114470:	283f2726 	beq	r5,zero,81114110 <__reset+0xfb0f4110>
81114474:	2886703a 	and	r3,r5,r2
81114478:	5809883a 	mov	r4,r11
8111447c:	183ec31e 	bne	r3,zero,81113f8c <__reset+0xfb0f3f8c>
81114480:	294b883a 	add	r5,r5,r5
81114484:	2886703a 	and	r3,r5,r2
81114488:	21000104 	addi	r4,r4,4
8111448c:	183ffc26 	beq	r3,zero,81114480 <__reset+0xfb0f4480>
81114490:	003ebe06 	br	81113f8c <__reset+0xfb0f3f8c>
81114494:	00c05504 	movi	r3,340
81114498:	18801236 	bltu	r3,r2,811144e4 <_malloc_r+0x700>
8111449c:	8804d3fa 	srli	r2,r17,15
811144a0:	12001e04 	addi	r8,r2,120
811144a4:	11c01dc4 	addi	r7,r2,119
811144a8:	4209883a 	add	r4,r8,r8
811144ac:	003e6d06 	br	81113e64 <__reset+0xfb0f3e64>
811144b0:	00c40004 	movi	r3,4096
811144b4:	003f4606 	br	811141d0 <__reset+0xfb0f41d0>
811144b8:	00800044 	movi	r2,1
811144bc:	a0800115 	stw	r2,4(r20)
811144c0:	003f7406 	br	81114294 <__reset+0xfb0f4294>
811144c4:	1805d0ba 	srai	r2,r3,2
811144c8:	01c00044 	movi	r7,1
811144cc:	30c00117 	ldw	r3,4(r6)
811144d0:	388e983a 	sll	r7,r7,r2
811144d4:	2805883a 	mov	r2,r5
811144d8:	38c6b03a 	or	r3,r7,r3
811144dc:	30c00115 	stw	r3,4(r6)
811144e0:	003f9b06 	br	81114350 <__reset+0xfb0f4350>
811144e4:	00c15504 	movi	r3,1364
811144e8:	18801a36 	bltu	r3,r2,81114554 <_malloc_r+0x770>
811144ec:	8804d4ba 	srli	r2,r17,18
811144f0:	12001f44 	addi	r8,r2,125
811144f4:	11c01f04 	addi	r7,r2,124
811144f8:	4209883a 	add	r4,r8,r8
811144fc:	003e5906 	br	81113e64 <__reset+0xfb0f3e64>
81114500:	ad400404 	addi	r21,r21,16
81114504:	003f1706 	br	81114164 <__reset+0xfb0f4164>
81114508:	00c01504 	movi	r3,84
8111450c:	18802336 	bltu	r3,r2,8111459c <_malloc_r+0x7b8>
81114510:	3804d33a 	srli	r2,r7,12
81114514:	11401bc4 	addi	r5,r2,111
81114518:	10c01b84 	addi	r3,r2,110
8111451c:	294b883a 	add	r5,r5,r5
81114520:	003f7b06 	br	81114310 <__reset+0xfb0f4310>
81114524:	9c000217 	ldw	r16,8(r19)
81114528:	00bfff04 	movi	r2,-4
8111452c:	80c00117 	ldw	r3,4(r16)
81114530:	1886703a 	and	r3,r3,r2
81114534:	003f5306 	br	81114284 <__reset+0xfb0f4284>
81114538:	3083ffcc 	andi	r2,r6,4095
8111453c:	103f181e 	bne	r2,zero,811141a0 <__reset+0xfb0f41a0>
81114540:	99000217 	ldw	r4,8(r19)
81114544:	b545883a 	add	r2,r22,r21
81114548:	10800054 	ori	r2,r2,1
8111454c:	20800115 	stw	r2,4(r4)
81114550:	003f3e06 	br	8111424c <__reset+0xfb0f424c>
81114554:	01003f84 	movi	r4,254
81114558:	02001fc4 	movi	r8,127
8111455c:	01c01f84 	movi	r7,126
81114560:	003e4006 	br	81113e64 <__reset+0xfb0f3e64>
81114564:	00a04534 	movhi	r2,33044
81114568:	10916a04 	addi	r2,r2,17832
8111456c:	15000015 	stw	r20,0(r2)
81114570:	003f1106 	br	811141b8 <__reset+0xfb0f41b8>
81114574:	00800044 	movi	r2,1
81114578:	002b883a 	mov	r21,zero
8111457c:	003f1f06 	br	811141fc <__reset+0xfb0f41fc>
81114580:	81400204 	addi	r5,r16,8
81114584:	9009883a 	mov	r4,r18
81114588:	111d8780 	call	8111d878 <_free_r>
8111458c:	00a04534 	movhi	r2,33044
81114590:	10922c04 	addi	r2,r2,18608
81114594:	10c00017 	ldw	r3,0(r2)
81114598:	003f2c06 	br	8111424c <__reset+0xfb0f424c>
8111459c:	00c05504 	movi	r3,340
811145a0:	18800536 	bltu	r3,r2,811145b8 <_malloc_r+0x7d4>
811145a4:	3804d3fa 	srli	r2,r7,15
811145a8:	11401e04 	addi	r5,r2,120
811145ac:	10c01dc4 	addi	r3,r2,119
811145b0:	294b883a 	add	r5,r5,r5
811145b4:	003f5606 	br	81114310 <__reset+0xfb0f4310>
811145b8:	00c15504 	movi	r3,1364
811145bc:	18800536 	bltu	r3,r2,811145d4 <_malloc_r+0x7f0>
811145c0:	3804d4ba 	srli	r2,r7,18
811145c4:	11401f44 	addi	r5,r2,125
811145c8:	10c01f04 	addi	r3,r2,124
811145cc:	294b883a 	add	r5,r5,r5
811145d0:	003f4f06 	br	81114310 <__reset+0xfb0f4310>
811145d4:	01403f84 	movi	r5,254
811145d8:	00c01f84 	movi	r3,126
811145dc:	003f4c06 	br	81114310 <__reset+0xfb0f4310>
811145e0:	98800117 	ldw	r2,4(r19)
811145e4:	003fa006 	br	81114468 <__reset+0xfb0f4468>
811145e8:	8808d0fa 	srli	r4,r17,3
811145ec:	20800044 	addi	r2,r4,1
811145f0:	1085883a 	add	r2,r2,r2
811145f4:	003e9006 	br	81114038 <__reset+0xfb0f4038>

811145f8 <memcpy>:
811145f8:	defffd04 	addi	sp,sp,-12
811145fc:	de00012e 	bgeu	sp,et,81114604 <memcpy+0xc>
81114600:	003b68fa 	trap	3
81114604:	00c003c4 	movi	r3,15
81114608:	dfc00215 	stw	ra,8(sp)
8111460c:	dc400115 	stw	r17,4(sp)
81114610:	dc000015 	stw	r16,0(sp)
81114614:	2005883a 	mov	r2,r4
81114618:	1980452e 	bgeu	r3,r6,81114730 <memcpy+0x138>
8111461c:	2906b03a 	or	r3,r5,r4
81114620:	18c000cc 	andi	r3,r3,3
81114624:	1800441e 	bne	r3,zero,81114738 <memcpy+0x140>
81114628:	347ffc04 	addi	r17,r6,-16
8111462c:	8822d13a 	srli	r17,r17,4
81114630:	28c00104 	addi	r3,r5,4
81114634:	23400104 	addi	r13,r4,4
81114638:	8820913a 	slli	r16,r17,4
8111463c:	2b000204 	addi	r12,r5,8
81114640:	22c00204 	addi	r11,r4,8
81114644:	84000504 	addi	r16,r16,20
81114648:	2a800304 	addi	r10,r5,12
8111464c:	22400304 	addi	r9,r4,12
81114650:	2c21883a 	add	r16,r5,r16
81114654:	2811883a 	mov	r8,r5
81114658:	200f883a 	mov	r7,r4
8111465c:	41000017 	ldw	r4,0(r8)
81114660:	1fc00017 	ldw	ra,0(r3)
81114664:	63c00017 	ldw	r15,0(r12)
81114668:	39000015 	stw	r4,0(r7)
8111466c:	53800017 	ldw	r14,0(r10)
81114670:	6fc00015 	stw	ra,0(r13)
81114674:	5bc00015 	stw	r15,0(r11)
81114678:	4b800015 	stw	r14,0(r9)
8111467c:	18c00404 	addi	r3,r3,16
81114680:	39c00404 	addi	r7,r7,16
81114684:	42000404 	addi	r8,r8,16
81114688:	6b400404 	addi	r13,r13,16
8111468c:	63000404 	addi	r12,r12,16
81114690:	5ac00404 	addi	r11,r11,16
81114694:	52800404 	addi	r10,r10,16
81114698:	4a400404 	addi	r9,r9,16
8111469c:	1c3fef1e 	bne	r3,r16,8111465c <__reset+0xfb0f465c>
811146a0:	89c00044 	addi	r7,r17,1
811146a4:	380e913a 	slli	r7,r7,4
811146a8:	310003cc 	andi	r4,r6,15
811146ac:	02c000c4 	movi	r11,3
811146b0:	11c7883a 	add	r3,r2,r7
811146b4:	29cb883a 	add	r5,r5,r7
811146b8:	5900212e 	bgeu	r11,r4,81114740 <memcpy+0x148>
811146bc:	1813883a 	mov	r9,r3
811146c0:	2811883a 	mov	r8,r5
811146c4:	200f883a 	mov	r7,r4
811146c8:	42800017 	ldw	r10,0(r8)
811146cc:	4a400104 	addi	r9,r9,4
811146d0:	39ffff04 	addi	r7,r7,-4
811146d4:	4abfff15 	stw	r10,-4(r9)
811146d8:	42000104 	addi	r8,r8,4
811146dc:	59fffa36 	bltu	r11,r7,811146c8 <__reset+0xfb0f46c8>
811146e0:	213fff04 	addi	r4,r4,-4
811146e4:	2008d0ba 	srli	r4,r4,2
811146e8:	318000cc 	andi	r6,r6,3
811146ec:	21000044 	addi	r4,r4,1
811146f0:	2109883a 	add	r4,r4,r4
811146f4:	2109883a 	add	r4,r4,r4
811146f8:	1907883a 	add	r3,r3,r4
811146fc:	290b883a 	add	r5,r5,r4
81114700:	30000626 	beq	r6,zero,8111471c <memcpy+0x124>
81114704:	198d883a 	add	r6,r3,r6
81114708:	29c00003 	ldbu	r7,0(r5)
8111470c:	18c00044 	addi	r3,r3,1
81114710:	29400044 	addi	r5,r5,1
81114714:	19ffffc5 	stb	r7,-1(r3)
81114718:	19bffb1e 	bne	r3,r6,81114708 <__reset+0xfb0f4708>
8111471c:	dfc00217 	ldw	ra,8(sp)
81114720:	dc400117 	ldw	r17,4(sp)
81114724:	dc000017 	ldw	r16,0(sp)
81114728:	dec00304 	addi	sp,sp,12
8111472c:	f800283a 	ret
81114730:	2007883a 	mov	r3,r4
81114734:	003ff206 	br	81114700 <__reset+0xfb0f4700>
81114738:	2007883a 	mov	r3,r4
8111473c:	003ff106 	br	81114704 <__reset+0xfb0f4704>
81114740:	200d883a 	mov	r6,r4
81114744:	003fee06 	br	81114700 <__reset+0xfb0f4700>

81114748 <memset>:
81114748:	20c000cc 	andi	r3,r4,3
8111474c:	2005883a 	mov	r2,r4
81114750:	18004426 	beq	r3,zero,81114864 <memset+0x11c>
81114754:	31ffffc4 	addi	r7,r6,-1
81114758:	30004026 	beq	r6,zero,8111485c <memset+0x114>
8111475c:	2813883a 	mov	r9,r5
81114760:	200d883a 	mov	r6,r4
81114764:	2007883a 	mov	r3,r4
81114768:	00000406 	br	8111477c <memset+0x34>
8111476c:	3a3fffc4 	addi	r8,r7,-1
81114770:	31800044 	addi	r6,r6,1
81114774:	38003926 	beq	r7,zero,8111485c <memset+0x114>
81114778:	400f883a 	mov	r7,r8
8111477c:	18c00044 	addi	r3,r3,1
81114780:	32400005 	stb	r9,0(r6)
81114784:	1a0000cc 	andi	r8,r3,3
81114788:	403ff81e 	bne	r8,zero,8111476c <__reset+0xfb0f476c>
8111478c:	010000c4 	movi	r4,3
81114790:	21c02d2e 	bgeu	r4,r7,81114848 <memset+0x100>
81114794:	29003fcc 	andi	r4,r5,255
81114798:	200c923a 	slli	r6,r4,8
8111479c:	3108b03a 	or	r4,r6,r4
811147a0:	200c943a 	slli	r6,r4,16
811147a4:	218cb03a 	or	r6,r4,r6
811147a8:	010003c4 	movi	r4,15
811147ac:	21c0182e 	bgeu	r4,r7,81114810 <memset+0xc8>
811147b0:	3b3ffc04 	addi	r12,r7,-16
811147b4:	6018d13a 	srli	r12,r12,4
811147b8:	1a000104 	addi	r8,r3,4
811147bc:	1ac00204 	addi	r11,r3,8
811147c0:	6008913a 	slli	r4,r12,4
811147c4:	1a800304 	addi	r10,r3,12
811147c8:	1813883a 	mov	r9,r3
811147cc:	21000504 	addi	r4,r4,20
811147d0:	1909883a 	add	r4,r3,r4
811147d4:	49800015 	stw	r6,0(r9)
811147d8:	41800015 	stw	r6,0(r8)
811147dc:	59800015 	stw	r6,0(r11)
811147e0:	51800015 	stw	r6,0(r10)
811147e4:	42000404 	addi	r8,r8,16
811147e8:	4a400404 	addi	r9,r9,16
811147ec:	5ac00404 	addi	r11,r11,16
811147f0:	52800404 	addi	r10,r10,16
811147f4:	413ff71e 	bne	r8,r4,811147d4 <__reset+0xfb0f47d4>
811147f8:	63000044 	addi	r12,r12,1
811147fc:	6018913a 	slli	r12,r12,4
81114800:	39c003cc 	andi	r7,r7,15
81114804:	010000c4 	movi	r4,3
81114808:	1b07883a 	add	r3,r3,r12
8111480c:	21c00e2e 	bgeu	r4,r7,81114848 <memset+0x100>
81114810:	1813883a 	mov	r9,r3
81114814:	3811883a 	mov	r8,r7
81114818:	010000c4 	movi	r4,3
8111481c:	49800015 	stw	r6,0(r9)
81114820:	423fff04 	addi	r8,r8,-4
81114824:	4a400104 	addi	r9,r9,4
81114828:	223ffc36 	bltu	r4,r8,8111481c <__reset+0xfb0f481c>
8111482c:	393fff04 	addi	r4,r7,-4
81114830:	2008d0ba 	srli	r4,r4,2
81114834:	39c000cc 	andi	r7,r7,3
81114838:	21000044 	addi	r4,r4,1
8111483c:	2109883a 	add	r4,r4,r4
81114840:	2109883a 	add	r4,r4,r4
81114844:	1907883a 	add	r3,r3,r4
81114848:	38000526 	beq	r7,zero,81114860 <memset+0x118>
8111484c:	19cf883a 	add	r7,r3,r7
81114850:	19400005 	stb	r5,0(r3)
81114854:	18c00044 	addi	r3,r3,1
81114858:	38fffd1e 	bne	r7,r3,81114850 <__reset+0xfb0f4850>
8111485c:	f800283a 	ret
81114860:	f800283a 	ret
81114864:	2007883a 	mov	r3,r4
81114868:	300f883a 	mov	r7,r6
8111486c:	003fc706 	br	8111478c <__reset+0xfb0f478c>

81114870 <_open_r>:
81114870:	defffd04 	addi	sp,sp,-12
81114874:	de00012e 	bgeu	sp,et,8111487c <_open_r+0xc>
81114878:	003b68fa 	trap	3
8111487c:	2805883a 	mov	r2,r5
81114880:	dc000015 	stw	r16,0(sp)
81114884:	04204534 	movhi	r16,33044
81114888:	dc400115 	stw	r17,4(sp)
8111488c:	300b883a 	mov	r5,r6
81114890:	8411c604 	addi	r16,r16,18200
81114894:	2023883a 	mov	r17,r4
81114898:	380d883a 	mov	r6,r7
8111489c:	1009883a 	mov	r4,r2
811148a0:	dfc00215 	stw	ra,8(sp)
811148a4:	80000015 	stw	zero,0(r16)
811148a8:	112a2c00 	call	8112a2c0 <open>
811148ac:	00ffffc4 	movi	r3,-1
811148b0:	10c00526 	beq	r2,r3,811148c8 <_open_r+0x58>
811148b4:	dfc00217 	ldw	ra,8(sp)
811148b8:	dc400117 	ldw	r17,4(sp)
811148bc:	dc000017 	ldw	r16,0(sp)
811148c0:	dec00304 	addi	sp,sp,12
811148c4:	f800283a 	ret
811148c8:	80c00017 	ldw	r3,0(r16)
811148cc:	183ff926 	beq	r3,zero,811148b4 <__reset+0xfb0f48b4>
811148d0:	88c00015 	stw	r3,0(r17)
811148d4:	003ff706 	br	811148b4 <__reset+0xfb0f48b4>

811148d8 <_printf_r>:
811148d8:	defffd04 	addi	sp,sp,-12
811148dc:	2805883a 	mov	r2,r5
811148e0:	de00012e 	bgeu	sp,et,811148e8 <_printf_r+0x10>
811148e4:	003b68fa 	trap	3
811148e8:	dfc00015 	stw	ra,0(sp)
811148ec:	d9800115 	stw	r6,4(sp)
811148f0:	d9c00215 	stw	r7,8(sp)
811148f4:	21400217 	ldw	r5,8(r4)
811148f8:	d9c00104 	addi	r7,sp,4
811148fc:	100d883a 	mov	r6,r2
81114900:	11176240 	call	81117624 <___vfprintf_internal_r>
81114904:	dfc00017 	ldw	ra,0(sp)
81114908:	dec00304 	addi	sp,sp,12
8111490c:	f800283a 	ret

81114910 <printf>:
81114910:	defffc04 	addi	sp,sp,-16
81114914:	de00012e 	bgeu	sp,et,8111491c <printf+0xc>
81114918:	003b68fa 	trap	3
8111491c:	dfc00015 	stw	ra,0(sp)
81114920:	d9400115 	stw	r5,4(sp)
81114924:	d9800215 	stw	r6,8(sp)
81114928:	d9c00315 	stw	r7,12(sp)
8111492c:	00a04534 	movhi	r2,33044
81114930:	10916904 	addi	r2,r2,17828
81114934:	10800017 	ldw	r2,0(r2)
81114938:	200b883a 	mov	r5,r4
8111493c:	d9800104 	addi	r6,sp,4
81114940:	11000217 	ldw	r4,8(r2)
81114944:	11198240 	call	81119824 <__vfprintf_internal>
81114948:	dfc00017 	ldw	ra,0(sp)
8111494c:	dec00404 	addi	sp,sp,16
81114950:	f800283a 	ret

81114954 <_putc_r>:
81114954:	defffc04 	addi	sp,sp,-16
81114958:	de00012e 	bgeu	sp,et,81114960 <_putc_r+0xc>
8111495c:	003b68fa 	trap	3
81114960:	dc000215 	stw	r16,8(sp)
81114964:	dfc00315 	stw	ra,12(sp)
81114968:	2021883a 	mov	r16,r4
8111496c:	20000226 	beq	r4,zero,81114978 <_putc_r+0x24>
81114970:	20800e17 	ldw	r2,56(r4)
81114974:	10001b26 	beq	r2,zero,811149e4 <_putc_r+0x90>
81114978:	30800217 	ldw	r2,8(r6)
8111497c:	10bfffc4 	addi	r2,r2,-1
81114980:	30800215 	stw	r2,8(r6)
81114984:	10000a16 	blt	r2,zero,811149b0 <_putc_r+0x5c>
81114988:	30800017 	ldw	r2,0(r6)
8111498c:	11400005 	stb	r5,0(r2)
81114990:	30800017 	ldw	r2,0(r6)
81114994:	10c00044 	addi	r3,r2,1
81114998:	30c00015 	stw	r3,0(r6)
8111499c:	10800003 	ldbu	r2,0(r2)
811149a0:	dfc00317 	ldw	ra,12(sp)
811149a4:	dc000217 	ldw	r16,8(sp)
811149a8:	dec00404 	addi	sp,sp,16
811149ac:	f800283a 	ret
811149b0:	30c00617 	ldw	r3,24(r6)
811149b4:	10c00616 	blt	r2,r3,811149d0 <_putc_r+0x7c>
811149b8:	30800017 	ldw	r2,0(r6)
811149bc:	00c00284 	movi	r3,10
811149c0:	11400005 	stb	r5,0(r2)
811149c4:	30800017 	ldw	r2,0(r6)
811149c8:	11400003 	ldbu	r5,0(r2)
811149cc:	28fff11e 	bne	r5,r3,81114994 <__reset+0xfb0f4994>
811149d0:	8009883a 	mov	r4,r16
811149d4:	dfc00317 	ldw	ra,12(sp)
811149d8:	dc000217 	ldw	r16,8(sp)
811149dc:	dec00404 	addi	sp,sp,16
811149e0:	111b1a81 	jmpi	8111b1a8 <__swbuf_r>
811149e4:	d9400015 	stw	r5,0(sp)
811149e8:	d9800115 	stw	r6,4(sp)
811149ec:	111d3e00 	call	8111d3e0 <__sinit>
811149f0:	d9800117 	ldw	r6,4(sp)
811149f4:	d9400017 	ldw	r5,0(sp)
811149f8:	003fdf06 	br	81114978 <__reset+0xfb0f4978>

811149fc <putc>:
811149fc:	00a04534 	movhi	r2,33044
81114a00:	defffc04 	addi	sp,sp,-16
81114a04:	10916904 	addi	r2,r2,17828
81114a08:	de00012e 	bgeu	sp,et,81114a10 <putc+0x14>
81114a0c:	003b68fa 	trap	3
81114a10:	dc000115 	stw	r16,4(sp)
81114a14:	14000017 	ldw	r16,0(r2)
81114a18:	dc400215 	stw	r17,8(sp)
81114a1c:	dfc00315 	stw	ra,12(sp)
81114a20:	2023883a 	mov	r17,r4
81114a24:	80000226 	beq	r16,zero,81114a30 <putc+0x34>
81114a28:	80800e17 	ldw	r2,56(r16)
81114a2c:	10001a26 	beq	r2,zero,81114a98 <putc+0x9c>
81114a30:	28800217 	ldw	r2,8(r5)
81114a34:	10bfffc4 	addi	r2,r2,-1
81114a38:	28800215 	stw	r2,8(r5)
81114a3c:	10000b16 	blt	r2,zero,81114a6c <putc+0x70>
81114a40:	28800017 	ldw	r2,0(r5)
81114a44:	14400005 	stb	r17,0(r2)
81114a48:	28800017 	ldw	r2,0(r5)
81114a4c:	10c00044 	addi	r3,r2,1
81114a50:	28c00015 	stw	r3,0(r5)
81114a54:	10800003 	ldbu	r2,0(r2)
81114a58:	dfc00317 	ldw	ra,12(sp)
81114a5c:	dc400217 	ldw	r17,8(sp)
81114a60:	dc000117 	ldw	r16,4(sp)
81114a64:	dec00404 	addi	sp,sp,16
81114a68:	f800283a 	ret
81114a6c:	28c00617 	ldw	r3,24(r5)
81114a70:	10c00e16 	blt	r2,r3,81114aac <putc+0xb0>
81114a74:	28800017 	ldw	r2,0(r5)
81114a78:	01000284 	movi	r4,10
81114a7c:	14400005 	stb	r17,0(r2)
81114a80:	28800017 	ldw	r2,0(r5)
81114a84:	10c00003 	ldbu	r3,0(r2)
81114a88:	193ff01e 	bne	r3,r4,81114a4c <__reset+0xfb0f4a4c>
81114a8c:	280d883a 	mov	r6,r5
81114a90:	180b883a 	mov	r5,r3
81114a94:	00000706 	br	81114ab4 <putc+0xb8>
81114a98:	8009883a 	mov	r4,r16
81114a9c:	d9400015 	stw	r5,0(sp)
81114aa0:	111d3e00 	call	8111d3e0 <__sinit>
81114aa4:	d9400017 	ldw	r5,0(sp)
81114aa8:	003fe106 	br	81114a30 <__reset+0xfb0f4a30>
81114aac:	280d883a 	mov	r6,r5
81114ab0:	880b883a 	mov	r5,r17
81114ab4:	8009883a 	mov	r4,r16
81114ab8:	dfc00317 	ldw	ra,12(sp)
81114abc:	dc400217 	ldw	r17,8(sp)
81114ac0:	dc000117 	ldw	r16,4(sp)
81114ac4:	dec00404 	addi	sp,sp,16
81114ac8:	111b1a81 	jmpi	8111b1a8 <__swbuf_r>

81114acc <_putchar_r>:
81114acc:	21800217 	ldw	r6,8(r4)
81114ad0:	11149541 	jmpi	81114954 <_putc_r>

81114ad4 <putchar>:
81114ad4:	00a04534 	movhi	r2,33044
81114ad8:	10916904 	addi	r2,r2,17828
81114adc:	200b883a 	mov	r5,r4
81114ae0:	11000017 	ldw	r4,0(r2)
81114ae4:	21800217 	ldw	r6,8(r4)
81114ae8:	11149541 	jmpi	81114954 <_putc_r>

81114aec <_puts_r>:
81114aec:	defff604 	addi	sp,sp,-40
81114af0:	de00012e 	bgeu	sp,et,81114af8 <_puts_r+0xc>
81114af4:	003b68fa 	trap	3
81114af8:	dc000715 	stw	r16,28(sp)
81114afc:	2021883a 	mov	r16,r4
81114b00:	2809883a 	mov	r4,r5
81114b04:	dc400815 	stw	r17,32(sp)
81114b08:	dfc00915 	stw	ra,36(sp)
81114b0c:	2823883a 	mov	r17,r5
81114b10:	111510c0 	call	8111510c <strlen>
81114b14:	10c00044 	addi	r3,r2,1
81114b18:	d8800115 	stw	r2,4(sp)
81114b1c:	00a04534 	movhi	r2,33044
81114b20:	10877d04 	addi	r2,r2,7668
81114b24:	d8800215 	stw	r2,8(sp)
81114b28:	00800044 	movi	r2,1
81114b2c:	d8800315 	stw	r2,12(sp)
81114b30:	00800084 	movi	r2,2
81114b34:	dc400015 	stw	r17,0(sp)
81114b38:	d8c00615 	stw	r3,24(sp)
81114b3c:	dec00415 	stw	sp,16(sp)
81114b40:	d8800515 	stw	r2,20(sp)
81114b44:	80000226 	beq	r16,zero,81114b50 <_puts_r+0x64>
81114b48:	80800e17 	ldw	r2,56(r16)
81114b4c:	10001426 	beq	r2,zero,81114ba0 <_puts_r+0xb4>
81114b50:	81400217 	ldw	r5,8(r16)
81114b54:	2880030b 	ldhu	r2,12(r5)
81114b58:	10c8000c 	andi	r3,r2,8192
81114b5c:	1800061e 	bne	r3,zero,81114b78 <_puts_r+0x8c>
81114b60:	29001917 	ldw	r4,100(r5)
81114b64:	00f7ffc4 	movi	r3,-8193
81114b68:	10880014 	ori	r2,r2,8192
81114b6c:	20c6703a 	and	r3,r4,r3
81114b70:	2880030d 	sth	r2,12(r5)
81114b74:	28c01915 	stw	r3,100(r5)
81114b78:	d9800404 	addi	r6,sp,16
81114b7c:	8009883a 	mov	r4,r16
81114b80:	111db900 	call	8111db90 <__sfvwrite_r>
81114b84:	1000091e 	bne	r2,zero,81114bac <_puts_r+0xc0>
81114b88:	00800284 	movi	r2,10
81114b8c:	dfc00917 	ldw	ra,36(sp)
81114b90:	dc400817 	ldw	r17,32(sp)
81114b94:	dc000717 	ldw	r16,28(sp)
81114b98:	dec00a04 	addi	sp,sp,40
81114b9c:	f800283a 	ret
81114ba0:	8009883a 	mov	r4,r16
81114ba4:	111d3e00 	call	8111d3e0 <__sinit>
81114ba8:	003fe906 	br	81114b50 <__reset+0xfb0f4b50>
81114bac:	00bfffc4 	movi	r2,-1
81114bb0:	003ff606 	br	81114b8c <__reset+0xfb0f4b8c>

81114bb4 <puts>:
81114bb4:	00a04534 	movhi	r2,33044
81114bb8:	10916904 	addi	r2,r2,17828
81114bbc:	200b883a 	mov	r5,r4
81114bc0:	11000017 	ldw	r4,0(r2)
81114bc4:	1114aec1 	jmpi	81114aec <_puts_r>

81114bc8 <lflush>:
81114bc8:	2080030b 	ldhu	r2,12(r4)
81114bcc:	00c00244 	movi	r3,9
81114bd0:	1080024c 	andi	r2,r2,9
81114bd4:	10c00226 	beq	r2,r3,81114be0 <lflush+0x18>
81114bd8:	0005883a 	mov	r2,zero
81114bdc:	f800283a 	ret
81114be0:	111d0481 	jmpi	8111d048 <fflush>

81114be4 <__srefill_r>:
81114be4:	defffc04 	addi	sp,sp,-16
81114be8:	de00012e 	bgeu	sp,et,81114bf0 <__srefill_r+0xc>
81114bec:	003b68fa 	trap	3
81114bf0:	dc400115 	stw	r17,4(sp)
81114bf4:	dc000015 	stw	r16,0(sp)
81114bf8:	dfc00315 	stw	ra,12(sp)
81114bfc:	dc800215 	stw	r18,8(sp)
81114c00:	2023883a 	mov	r17,r4
81114c04:	2821883a 	mov	r16,r5
81114c08:	20000226 	beq	r4,zero,81114c14 <__srefill_r+0x30>
81114c0c:	20800e17 	ldw	r2,56(r4)
81114c10:	10003c26 	beq	r2,zero,81114d04 <__srefill_r+0x120>
81114c14:	80c0030b 	ldhu	r3,12(r16)
81114c18:	1908000c 	andi	r4,r3,8192
81114c1c:	1805883a 	mov	r2,r3
81114c20:	2000071e 	bne	r4,zero,81114c40 <__srefill_r+0x5c>
81114c24:	81001917 	ldw	r4,100(r16)
81114c28:	18880014 	ori	r2,r3,8192
81114c2c:	00f7ffc4 	movi	r3,-8193
81114c30:	20c8703a 	and	r4,r4,r3
81114c34:	8080030d 	sth	r2,12(r16)
81114c38:	1007883a 	mov	r3,r2
81114c3c:	81001915 	stw	r4,100(r16)
81114c40:	80000115 	stw	zero,4(r16)
81114c44:	1100080c 	andi	r4,r2,32
81114c48:	2000571e 	bne	r4,zero,81114da8 <__srefill_r+0x1c4>
81114c4c:	1100010c 	andi	r4,r2,4
81114c50:	20001f26 	beq	r4,zero,81114cd0 <__srefill_r+0xec>
81114c54:	81400c17 	ldw	r5,48(r16)
81114c58:	28000826 	beq	r5,zero,81114c7c <__srefill_r+0x98>
81114c5c:	80801004 	addi	r2,r16,64
81114c60:	28800226 	beq	r5,r2,81114c6c <__srefill_r+0x88>
81114c64:	8809883a 	mov	r4,r17
81114c68:	111d8780 	call	8111d878 <_free_r>
81114c6c:	80800f17 	ldw	r2,60(r16)
81114c70:	80000c15 	stw	zero,48(r16)
81114c74:	80800115 	stw	r2,4(r16)
81114c78:	1000391e 	bne	r2,zero,81114d60 <__srefill_r+0x17c>
81114c7c:	80800417 	ldw	r2,16(r16)
81114c80:	10004b26 	beq	r2,zero,81114db0 <__srefill_r+0x1cc>
81114c84:	8480030b 	ldhu	r18,12(r16)
81114c88:	908000cc 	andi	r2,r18,3
81114c8c:	10001f1e 	bne	r2,zero,81114d0c <__srefill_r+0x128>
81114c90:	81800417 	ldw	r6,16(r16)
81114c94:	80800817 	ldw	r2,32(r16)
81114c98:	81c00517 	ldw	r7,20(r16)
81114c9c:	81400717 	ldw	r5,28(r16)
81114ca0:	81800015 	stw	r6,0(r16)
81114ca4:	8809883a 	mov	r4,r17
81114ca8:	103ee83a 	callr	r2
81114cac:	80800115 	stw	r2,4(r16)
81114cb0:	00800e0e 	bge	zero,r2,81114cec <__srefill_r+0x108>
81114cb4:	0005883a 	mov	r2,zero
81114cb8:	dfc00317 	ldw	ra,12(sp)
81114cbc:	dc800217 	ldw	r18,8(sp)
81114cc0:	dc400117 	ldw	r17,4(sp)
81114cc4:	dc000017 	ldw	r16,0(sp)
81114cc8:	dec00404 	addi	sp,sp,16
81114ccc:	f800283a 	ret
81114cd0:	1100040c 	andi	r4,r2,16
81114cd4:	20003026 	beq	r4,zero,81114d98 <__srefill_r+0x1b4>
81114cd8:	1080020c 	andi	r2,r2,8
81114cdc:	1000241e 	bne	r2,zero,81114d70 <__srefill_r+0x18c>
81114ce0:	18c00114 	ori	r3,r3,4
81114ce4:	80c0030d 	sth	r3,12(r16)
81114ce8:	003fe406 	br	81114c7c <__reset+0xfb0f4c7c>
81114cec:	80c0030b 	ldhu	r3,12(r16)
81114cf0:	1000161e 	bne	r2,zero,81114d4c <__srefill_r+0x168>
81114cf4:	18c00814 	ori	r3,r3,32
81114cf8:	00bfffc4 	movi	r2,-1
81114cfc:	80c0030d 	sth	r3,12(r16)
81114d00:	003fed06 	br	81114cb8 <__reset+0xfb0f4cb8>
81114d04:	111d3e00 	call	8111d3e0 <__sinit>
81114d08:	003fc206 	br	81114c14 <__reset+0xfb0f4c14>
81114d0c:	00a04534 	movhi	r2,33044
81114d10:	10916804 	addi	r2,r2,17824
81114d14:	11000017 	ldw	r4,0(r2)
81114d18:	01604474 	movhi	r5,33041
81114d1c:	00800044 	movi	r2,1
81114d20:	2952f204 	addi	r5,r5,19400
81114d24:	8080030d 	sth	r2,12(r16)
81114d28:	111e0540 	call	8111e054 <_fwalk>
81114d2c:	00800244 	movi	r2,9
81114d30:	8480030d 	sth	r18,12(r16)
81114d34:	9480024c 	andi	r18,r18,9
81114d38:	90bfd51e 	bne	r18,r2,81114c90 <__reset+0xfb0f4c90>
81114d3c:	800b883a 	mov	r5,r16
81114d40:	8809883a 	mov	r4,r17
81114d44:	111cdc00 	call	8111cdc0 <__sflush_r>
81114d48:	003fd106 	br	81114c90 <__reset+0xfb0f4c90>
81114d4c:	18c01014 	ori	r3,r3,64
81114d50:	80000115 	stw	zero,4(r16)
81114d54:	00bfffc4 	movi	r2,-1
81114d58:	80c0030d 	sth	r3,12(r16)
81114d5c:	003fd606 	br	81114cb8 <__reset+0xfb0f4cb8>
81114d60:	80c00e17 	ldw	r3,56(r16)
81114d64:	0005883a 	mov	r2,zero
81114d68:	80c00015 	stw	r3,0(r16)
81114d6c:	003fd206 	br	81114cb8 <__reset+0xfb0f4cb8>
81114d70:	800b883a 	mov	r5,r16
81114d74:	8809883a 	mov	r4,r17
81114d78:	111cfe40 	call	8111cfe4 <_fflush_r>
81114d7c:	10000a1e 	bne	r2,zero,81114da8 <__srefill_r+0x1c4>
81114d80:	8080030b 	ldhu	r2,12(r16)
81114d84:	00fffdc4 	movi	r3,-9
81114d88:	80000215 	stw	zero,8(r16)
81114d8c:	1886703a 	and	r3,r3,r2
81114d90:	80000615 	stw	zero,24(r16)
81114d94:	003fd206 	br	81114ce0 <__reset+0xfb0f4ce0>
81114d98:	00800244 	movi	r2,9
81114d9c:	88800015 	stw	r2,0(r17)
81114da0:	18c01014 	ori	r3,r3,64
81114da4:	80c0030d 	sth	r3,12(r16)
81114da8:	00bfffc4 	movi	r2,-1
81114dac:	003fc206 	br	81114cb8 <__reset+0xfb0f4cb8>
81114db0:	800b883a 	mov	r5,r16
81114db4:	8809883a 	mov	r4,r17
81114db8:	1113c200 	call	81113c20 <__smakebuf_r>
81114dbc:	003fb106 	br	81114c84 <__reset+0xfb0f4c84>

81114dc0 <_sbrk_r>:
81114dc0:	defffd04 	addi	sp,sp,-12
81114dc4:	de00012e 	bgeu	sp,et,81114dcc <_sbrk_r+0xc>
81114dc8:	003b68fa 	trap	3
81114dcc:	dc000015 	stw	r16,0(sp)
81114dd0:	04204534 	movhi	r16,33044
81114dd4:	dc400115 	stw	r17,4(sp)
81114dd8:	8411c604 	addi	r16,r16,18200
81114ddc:	2023883a 	mov	r17,r4
81114de0:	2809883a 	mov	r4,r5
81114de4:	dfc00215 	stw	ra,8(sp)
81114de8:	80000015 	stw	zero,0(r16)
81114dec:	112a5d00 	call	8112a5d0 <sbrk>
81114df0:	00ffffc4 	movi	r3,-1
81114df4:	10c00526 	beq	r2,r3,81114e0c <_sbrk_r+0x4c>
81114df8:	dfc00217 	ldw	ra,8(sp)
81114dfc:	dc400117 	ldw	r17,4(sp)
81114e00:	dc000017 	ldw	r16,0(sp)
81114e04:	dec00304 	addi	sp,sp,12
81114e08:	f800283a 	ret
81114e0c:	80c00017 	ldw	r3,0(r16)
81114e10:	183ff926 	beq	r3,zero,81114df8 <__reset+0xfb0f4df8>
81114e14:	88c00015 	stw	r3,0(r17)
81114e18:	003ff706 	br	81114df8 <__reset+0xfb0f4df8>

81114e1c <scanf>:
81114e1c:	defffc04 	addi	sp,sp,-16
81114e20:	de00012e 	bgeu	sp,et,81114e28 <scanf+0xc>
81114e24:	003b68fa 	trap	3
81114e28:	dfc00015 	stw	ra,0(sp)
81114e2c:	d9400115 	stw	r5,4(sp)
81114e30:	d9800215 	stw	r6,8(sp)
81114e34:	d9c00315 	stw	r7,12(sp)
81114e38:	00a04534 	movhi	r2,33044
81114e3c:	10916904 	addi	r2,r2,17828
81114e40:	200d883a 	mov	r6,r4
81114e44:	11000017 	ldw	r4,0(r2)
81114e48:	d9c00104 	addi	r7,sp,4
81114e4c:	21400117 	ldw	r5,4(r4)
81114e50:	111b1540 	call	8111b154 <_vfscanf_r>
81114e54:	dfc00017 	ldw	ra,0(sp)
81114e58:	dec00404 	addi	sp,sp,16
81114e5c:	f800283a 	ret

81114e60 <_scanf_r>:
81114e60:	defffd04 	addi	sp,sp,-12
81114e64:	2805883a 	mov	r2,r5
81114e68:	de00012e 	bgeu	sp,et,81114e70 <_scanf_r+0x10>
81114e6c:	003b68fa 	trap	3
81114e70:	dfc00015 	stw	ra,0(sp)
81114e74:	d9800115 	stw	r6,4(sp)
81114e78:	d9c00215 	stw	r7,8(sp)
81114e7c:	21400117 	ldw	r5,4(r4)
81114e80:	d9c00104 	addi	r7,sp,4
81114e84:	100d883a 	mov	r6,r2
81114e88:	111b1540 	call	8111b154 <_vfscanf_r>
81114e8c:	dfc00017 	ldw	ra,0(sp)
81114e90:	dec00304 	addi	sp,sp,12
81114e94:	f800283a 	ret

81114e98 <_sprintf_r>:
81114e98:	deffe404 	addi	sp,sp,-112
81114e9c:	2807883a 	mov	r3,r5
81114ea0:	de00012e 	bgeu	sp,et,81114ea8 <_sprintf_r+0x10>
81114ea4:	003b68fa 	trap	3
81114ea8:	dfc01a15 	stw	ra,104(sp)
81114eac:	d9c01b15 	stw	r7,108(sp)
81114eb0:	00a00034 	movhi	r2,32768
81114eb4:	10bfffc4 	addi	r2,r2,-1
81114eb8:	02008204 	movi	r8,520
81114ebc:	d8800215 	stw	r2,8(sp)
81114ec0:	d8800515 	stw	r2,20(sp)
81114ec4:	d9c01b04 	addi	r7,sp,108
81114ec8:	d80b883a 	mov	r5,sp
81114ecc:	00bfffc4 	movi	r2,-1
81114ed0:	d8c00015 	stw	r3,0(sp)
81114ed4:	d8c00415 	stw	r3,16(sp)
81114ed8:	da00030d 	sth	r8,12(sp)
81114edc:	d880038d 	sth	r2,14(sp)
81114ee0:	11154440 	call	81115444 <___svfprintf_internal_r>
81114ee4:	d8c00017 	ldw	r3,0(sp)
81114ee8:	18000005 	stb	zero,0(r3)
81114eec:	dfc01a17 	ldw	ra,104(sp)
81114ef0:	dec01c04 	addi	sp,sp,112
81114ef4:	f800283a 	ret

81114ef8 <sprintf>:
81114ef8:	deffe304 	addi	sp,sp,-116
81114efc:	2007883a 	mov	r3,r4
81114f00:	de00012e 	bgeu	sp,et,81114f08 <sprintf+0x10>
81114f04:	003b68fa 	trap	3
81114f08:	dfc01a15 	stw	ra,104(sp)
81114f0c:	d9801b15 	stw	r6,108(sp)
81114f10:	d9c01c15 	stw	r7,112(sp)
81114f14:	01204534 	movhi	r4,33044
81114f18:	21116904 	addi	r4,r4,17828
81114f1c:	21000017 	ldw	r4,0(r4)
81114f20:	00a00034 	movhi	r2,32768
81114f24:	10bfffc4 	addi	r2,r2,-1
81114f28:	280d883a 	mov	r6,r5
81114f2c:	02008204 	movi	r8,520
81114f30:	d8800215 	stw	r2,8(sp)
81114f34:	d8800515 	stw	r2,20(sp)
81114f38:	d9c01b04 	addi	r7,sp,108
81114f3c:	d80b883a 	mov	r5,sp
81114f40:	00bfffc4 	movi	r2,-1
81114f44:	d8c00015 	stw	r3,0(sp)
81114f48:	d8c00415 	stw	r3,16(sp)
81114f4c:	da00030d 	sth	r8,12(sp)
81114f50:	d880038d 	sth	r2,14(sp)
81114f54:	11154440 	call	81115444 <___svfprintf_internal_r>
81114f58:	d8c00017 	ldw	r3,0(sp)
81114f5c:	18000005 	stb	zero,0(r3)
81114f60:	dfc01a17 	ldw	ra,104(sp)
81114f64:	dec01d04 	addi	sp,sp,116
81114f68:	f800283a 	ret

81114f6c <__sread>:
81114f6c:	defffe04 	addi	sp,sp,-8
81114f70:	de00012e 	bgeu	sp,et,81114f78 <__sread+0xc>
81114f74:	003b68fa 	trap	3
81114f78:	dc000015 	stw	r16,0(sp)
81114f7c:	2821883a 	mov	r16,r5
81114f80:	2940038f 	ldh	r5,14(r5)
81114f84:	dfc00115 	stw	ra,4(sp)
81114f88:	111f8a40 	call	8111f8a4 <_read_r>
81114f8c:	10000716 	blt	r2,zero,81114fac <__sread+0x40>
81114f90:	80c01417 	ldw	r3,80(r16)
81114f94:	1887883a 	add	r3,r3,r2
81114f98:	80c01415 	stw	r3,80(r16)
81114f9c:	dfc00117 	ldw	ra,4(sp)
81114fa0:	dc000017 	ldw	r16,0(sp)
81114fa4:	dec00204 	addi	sp,sp,8
81114fa8:	f800283a 	ret
81114fac:	80c0030b 	ldhu	r3,12(r16)
81114fb0:	18fbffcc 	andi	r3,r3,61439
81114fb4:	80c0030d 	sth	r3,12(r16)
81114fb8:	dfc00117 	ldw	ra,4(sp)
81114fbc:	dc000017 	ldw	r16,0(sp)
81114fc0:	dec00204 	addi	sp,sp,8
81114fc4:	f800283a 	ret

81114fc8 <__seofread>:
81114fc8:	0005883a 	mov	r2,zero
81114fcc:	f800283a 	ret

81114fd0 <__swrite>:
81114fd0:	defffb04 	addi	sp,sp,-20
81114fd4:	de00012e 	bgeu	sp,et,81114fdc <__swrite+0xc>
81114fd8:	003b68fa 	trap	3
81114fdc:	2880030b 	ldhu	r2,12(r5)
81114fe0:	dcc00315 	stw	r19,12(sp)
81114fe4:	dc800215 	stw	r18,8(sp)
81114fe8:	dc400115 	stw	r17,4(sp)
81114fec:	dc000015 	stw	r16,0(sp)
81114ff0:	dfc00415 	stw	ra,16(sp)
81114ff4:	10c0400c 	andi	r3,r2,256
81114ff8:	2821883a 	mov	r16,r5
81114ffc:	2023883a 	mov	r17,r4
81115000:	3025883a 	mov	r18,r6
81115004:	3827883a 	mov	r19,r7
81115008:	18000526 	beq	r3,zero,81115020 <__swrite+0x50>
8111500c:	2940038f 	ldh	r5,14(r5)
81115010:	01c00084 	movi	r7,2
81115014:	000d883a 	mov	r6,zero
81115018:	111e35c0 	call	8111e35c <_lseek_r>
8111501c:	8080030b 	ldhu	r2,12(r16)
81115020:	8140038f 	ldh	r5,14(r16)
81115024:	10bbffcc 	andi	r2,r2,61439
81115028:	980f883a 	mov	r7,r19
8111502c:	900d883a 	mov	r6,r18
81115030:	8809883a 	mov	r4,r17
81115034:	8080030d 	sth	r2,12(r16)
81115038:	dfc00417 	ldw	ra,16(sp)
8111503c:	dcc00317 	ldw	r19,12(sp)
81115040:	dc800217 	ldw	r18,8(sp)
81115044:	dc400117 	ldw	r17,4(sp)
81115048:	dc000017 	ldw	r16,0(sp)
8111504c:	dec00504 	addi	sp,sp,20
81115050:	111b3081 	jmpi	8111b308 <_write_r>

81115054 <__sseek>:
81115054:	defffe04 	addi	sp,sp,-8
81115058:	de00012e 	bgeu	sp,et,81115060 <__sseek+0xc>
8111505c:	003b68fa 	trap	3
81115060:	dc000015 	stw	r16,0(sp)
81115064:	2821883a 	mov	r16,r5
81115068:	2940038f 	ldh	r5,14(r5)
8111506c:	dfc00115 	stw	ra,4(sp)
81115070:	111e35c0 	call	8111e35c <_lseek_r>
81115074:	00ffffc4 	movi	r3,-1
81115078:	10c00826 	beq	r2,r3,8111509c <__sseek+0x48>
8111507c:	80c0030b 	ldhu	r3,12(r16)
81115080:	80801415 	stw	r2,80(r16)
81115084:	18c40014 	ori	r3,r3,4096
81115088:	80c0030d 	sth	r3,12(r16)
8111508c:	dfc00117 	ldw	ra,4(sp)
81115090:	dc000017 	ldw	r16,0(sp)
81115094:	dec00204 	addi	sp,sp,8
81115098:	f800283a 	ret
8111509c:	80c0030b 	ldhu	r3,12(r16)
811150a0:	18fbffcc 	andi	r3,r3,61439
811150a4:	80c0030d 	sth	r3,12(r16)
811150a8:	dfc00117 	ldw	ra,4(sp)
811150ac:	dc000017 	ldw	r16,0(sp)
811150b0:	dec00204 	addi	sp,sp,8
811150b4:	f800283a 	ret

811150b8 <__sclose>:
811150b8:	2940038f 	ldh	r5,14(r5)
811150bc:	111b4cc1 	jmpi	8111b4cc <_close_r>

811150c0 <strcspn>:
811150c0:	21c00007 	ldb	r7,0(r4)
811150c4:	38000f26 	beq	r7,zero,81115104 <strcspn+0x44>
811150c8:	2a000007 	ldb	r8,0(r5)
811150cc:	2005883a 	mov	r2,r4
811150d0:	40000726 	beq	r8,zero,811150f0 <strcspn+0x30>
811150d4:	3a000926 	beq	r7,r8,811150fc <strcspn+0x3c>
811150d8:	2807883a 	mov	r3,r5
811150dc:	00000106 	br	811150e4 <strcspn+0x24>
811150e0:	31c00626 	beq	r6,r7,811150fc <strcspn+0x3c>
811150e4:	18c00044 	addi	r3,r3,1
811150e8:	19800007 	ldb	r6,0(r3)
811150ec:	303ffc1e 	bne	r6,zero,811150e0 <__reset+0xfb0f50e0>
811150f0:	10800044 	addi	r2,r2,1
811150f4:	11c00007 	ldb	r7,0(r2)
811150f8:	383ff51e 	bne	r7,zero,811150d0 <__reset+0xfb0f50d0>
811150fc:	1105c83a 	sub	r2,r2,r4
81115100:	f800283a 	ret
81115104:	0005883a 	mov	r2,zero
81115108:	f800283a 	ret

8111510c <strlen>:
8111510c:	208000cc 	andi	r2,r4,3
81115110:	10002026 	beq	r2,zero,81115194 <strlen+0x88>
81115114:	20800007 	ldb	r2,0(r4)
81115118:	10002026 	beq	r2,zero,8111519c <strlen+0x90>
8111511c:	2005883a 	mov	r2,r4
81115120:	00000206 	br	8111512c <strlen+0x20>
81115124:	10c00007 	ldb	r3,0(r2)
81115128:	18001826 	beq	r3,zero,8111518c <strlen+0x80>
8111512c:	10800044 	addi	r2,r2,1
81115130:	10c000cc 	andi	r3,r2,3
81115134:	183ffb1e 	bne	r3,zero,81115124 <__reset+0xfb0f5124>
81115138:	10c00017 	ldw	r3,0(r2)
8111513c:	01ffbff4 	movhi	r7,65279
81115140:	39ffbfc4 	addi	r7,r7,-257
81115144:	00ca303a 	nor	r5,zero,r3
81115148:	01a02074 	movhi	r6,32897
8111514c:	19c7883a 	add	r3,r3,r7
81115150:	31a02004 	addi	r6,r6,-32640
81115154:	1946703a 	and	r3,r3,r5
81115158:	1986703a 	and	r3,r3,r6
8111515c:	1800091e 	bne	r3,zero,81115184 <strlen+0x78>
81115160:	10800104 	addi	r2,r2,4
81115164:	10c00017 	ldw	r3,0(r2)
81115168:	19cb883a 	add	r5,r3,r7
8111516c:	00c6303a 	nor	r3,zero,r3
81115170:	28c6703a 	and	r3,r5,r3
81115174:	1986703a 	and	r3,r3,r6
81115178:	183ff926 	beq	r3,zero,81115160 <__reset+0xfb0f5160>
8111517c:	00000106 	br	81115184 <strlen+0x78>
81115180:	10800044 	addi	r2,r2,1
81115184:	10c00007 	ldb	r3,0(r2)
81115188:	183ffd1e 	bne	r3,zero,81115180 <__reset+0xfb0f5180>
8111518c:	1105c83a 	sub	r2,r2,r4
81115190:	f800283a 	ret
81115194:	2005883a 	mov	r2,r4
81115198:	003fe706 	br	81115138 <__reset+0xfb0f5138>
8111519c:	0005883a 	mov	r2,zero
811151a0:	f800283a 	ret

811151a4 <strnlen>:
811151a4:	28000e26 	beq	r5,zero,811151e0 <strnlen+0x3c>
811151a8:	20800007 	ldb	r2,0(r4)
811151ac:	10000c26 	beq	r2,zero,811151e0 <strnlen+0x3c>
811151b0:	20c00044 	addi	r3,r4,1
811151b4:	214b883a 	add	r5,r4,r5
811151b8:	28c00526 	beq	r5,r3,811151d0 <strnlen+0x2c>
811151bc:	19800007 	ldb	r6,0(r3)
811151c0:	19c00044 	addi	r7,r3,1
811151c4:	30000426 	beq	r6,zero,811151d8 <strnlen+0x34>
811151c8:	3807883a 	mov	r3,r7
811151cc:	28fffb1e 	bne	r5,r3,811151bc <__reset+0xfb0f51bc>
811151d0:	2905c83a 	sub	r2,r5,r4
811151d4:	f800283a 	ret
811151d8:	1905c83a 	sub	r2,r3,r4
811151dc:	f800283a 	ret
811151e0:	0005883a 	mov	r2,zero
811151e4:	f800283a 	ret

811151e8 <_strtol_r>:
811151e8:	00a04534 	movhi	r2,33044
811151ec:	defff404 	addi	sp,sp,-48
811151f0:	10916704 	addi	r2,r2,17820
811151f4:	de00012e 	bgeu	sp,et,811151fc <_strtol_r+0x14>
811151f8:	003b68fa 	trap	3
811151fc:	dd400715 	stw	r21,28(sp)
81115200:	15400017 	ldw	r21,0(r2)
81115204:	dd800815 	stw	r22,32(sp)
81115208:	dd000615 	stw	r20,24(sp)
8111520c:	dcc00515 	stw	r19,20(sp)
81115210:	d9000015 	stw	r4,0(sp)
81115214:	dfc00b15 	stw	ra,44(sp)
81115218:	df000a15 	stw	fp,40(sp)
8111521c:	ddc00915 	stw	r23,36(sp)
81115220:	dc800415 	stw	r18,16(sp)
81115224:	dc400315 	stw	r17,12(sp)
81115228:	dc000215 	stw	r16,8(sp)
8111522c:	2829883a 	mov	r20,r5
81115230:	3027883a 	mov	r19,r6
81115234:	382d883a 	mov	r22,r7
81115238:	2809883a 	mov	r4,r5
8111523c:	24000003 	ldbu	r16,0(r4)
81115240:	24400044 	addi	r17,r4,1
81115244:	2007883a 	mov	r3,r4
81115248:	ac05883a 	add	r2,r21,r16
8111524c:	10800043 	ldbu	r2,1(r2)
81115250:	8809883a 	mov	r4,r17
81115254:	1080020c 	andi	r2,r2,8
81115258:	103ff81e 	bne	r2,zero,8111523c <__reset+0xfb0f523c>
8111525c:	00800b44 	movi	r2,45
81115260:	80805826 	beq	r16,r2,811153c4 <_strtol_r+0x1dc>
81115264:	00800ac4 	movi	r2,43
81115268:	80805a26 	beq	r16,r2,811153d4 <_strtol_r+0x1ec>
8111526c:	0039883a 	mov	fp,zero
81115270:	b0004426 	beq	r22,zero,81115384 <_strtol_r+0x19c>
81115274:	00800404 	movi	r2,16
81115278:	b0806026 	beq	r22,r2,811153fc <_strtol_r+0x214>
8111527c:	b02f883a 	mov	r23,r22
81115280:	00a00034 	movhi	r2,32768
81115284:	e025003a 	cmpeq	r18,fp,zero
81115288:	14a5c83a 	sub	r18,r2,r18
8111528c:	b80b883a 	mov	r5,r23
81115290:	9009883a 	mov	r4,r18
81115294:	1126c640 	call	81126c64 <__umodsi3>
81115298:	b80b883a 	mov	r5,r23
8111529c:	9009883a 	mov	r4,r18
811152a0:	d8800115 	stw	r2,4(sp)
811152a4:	1126c000 	call	81126c00 <__udivsi3>
811152a8:	ac07883a 	add	r3,r21,r16
811152ac:	18c00043 	ldbu	r3,1(r3)
811152b0:	880b883a 	mov	r5,r17
811152b4:	000d883a 	mov	r6,zero
811152b8:	1a00010c 	andi	r8,r3,4
811152bc:	0009883a 	mov	r4,zero
811152c0:	02800044 	movi	r10,1
811152c4:	027fffc4 	movi	r9,-1
811152c8:	d9c00117 	ldw	r7,4(sp)
811152cc:	40000e26 	beq	r8,zero,81115308 <_strtol_r+0x120>
811152d0:	843ff404 	addi	r16,r16,-48
811152d4:	8580120e 	bge	r16,r22,81115320 <_strtol_r+0x138>
811152d8:	32400526 	beq	r6,r9,811152f0 <_strtol_r+0x108>
811152dc:	11002536 	bltu	r2,r4,81115374 <_strtol_r+0x18c>
811152e0:	20802326 	beq	r4,r2,81115370 <_strtol_r+0x188>
811152e4:	25c9383a 	mul	r4,r4,r23
811152e8:	01800044 	movi	r6,1
811152ec:	8109883a 	add	r4,r16,r4
811152f0:	2c000003 	ldbu	r16,0(r5)
811152f4:	29400044 	addi	r5,r5,1
811152f8:	ac07883a 	add	r3,r21,r16
811152fc:	18c00043 	ldbu	r3,1(r3)
81115300:	1a00010c 	andi	r8,r3,4
81115304:	403ff21e 	bne	r8,zero,811152d0 <__reset+0xfb0f52d0>
81115308:	18c000cc 	andi	r3,r3,3
8111530c:	18000426 	beq	r3,zero,81115320 <_strtol_r+0x138>
81115310:	1a801a26 	beq	r3,r10,8111537c <_strtol_r+0x194>
81115314:	00c015c4 	movi	r3,87
81115318:	80e1c83a 	sub	r16,r16,r3
8111531c:	85bfee16 	blt	r16,r22,811152d8 <__reset+0xfb0f52d8>
81115320:	00bfffc4 	movi	r2,-1
81115324:	30801e26 	beq	r6,r2,811153a0 <_strtol_r+0x1b8>
81115328:	e0001b1e 	bne	fp,zero,81115398 <_strtol_r+0x1b0>
8111532c:	2005883a 	mov	r2,r4
81115330:	98000326 	beq	r19,zero,81115340 <_strtol_r+0x158>
81115334:	3000211e 	bne	r6,zero,811153bc <_strtol_r+0x1d4>
81115338:	a00b883a 	mov	r5,r20
8111533c:	99400015 	stw	r5,0(r19)
81115340:	dfc00b17 	ldw	ra,44(sp)
81115344:	df000a17 	ldw	fp,40(sp)
81115348:	ddc00917 	ldw	r23,36(sp)
8111534c:	dd800817 	ldw	r22,32(sp)
81115350:	dd400717 	ldw	r21,28(sp)
81115354:	dd000617 	ldw	r20,24(sp)
81115358:	dcc00517 	ldw	r19,20(sp)
8111535c:	dc800417 	ldw	r18,16(sp)
81115360:	dc400317 	ldw	r17,12(sp)
81115364:	dc000217 	ldw	r16,8(sp)
81115368:	dec00c04 	addi	sp,sp,48
8111536c:	f800283a 	ret
81115370:	3c3fdc0e 	bge	r7,r16,811152e4 <__reset+0xfb0f52e4>
81115374:	01bfffc4 	movi	r6,-1
81115378:	003fdd06 	br	811152f0 <__reset+0xfb0f52f0>
8111537c:	00c00dc4 	movi	r3,55
81115380:	003fe506 	br	81115318 <__reset+0xfb0f5318>
81115384:	00800c04 	movi	r2,48
81115388:	80801626 	beq	r16,r2,811153e4 <_strtol_r+0x1fc>
8111538c:	05800284 	movi	r22,10
81115390:	b02f883a 	mov	r23,r22
81115394:	003fba06 	br	81115280 <__reset+0xfb0f5280>
81115398:	0109c83a 	sub	r4,zero,r4
8111539c:	003fe306 	br	8111532c <__reset+0xfb0f532c>
811153a0:	d9000017 	ldw	r4,0(sp)
811153a4:	00c00884 	movi	r3,34
811153a8:	e005003a 	cmpeq	r2,fp,zero
811153ac:	20c00015 	stw	r3,0(r4)
811153b0:	00e00034 	movhi	r3,32768
811153b4:	1885c83a 	sub	r2,r3,r2
811153b8:	983fe126 	beq	r19,zero,81115340 <__reset+0xfb0f5340>
811153bc:	297fffc4 	addi	r5,r5,-1
811153c0:	003fde06 	br	8111533c <__reset+0xfb0f533c>
811153c4:	1c400084 	addi	r17,r3,2
811153c8:	1c000043 	ldbu	r16,1(r3)
811153cc:	07000044 	movi	fp,1
811153d0:	003fa706 	br	81115270 <__reset+0xfb0f5270>
811153d4:	1c400084 	addi	r17,r3,2
811153d8:	1c000043 	ldbu	r16,1(r3)
811153dc:	0039883a 	mov	fp,zero
811153e0:	003fa306 	br	81115270 <__reset+0xfb0f5270>
811153e4:	88800003 	ldbu	r2,0(r17)
811153e8:	00c01604 	movi	r3,88
811153ec:	108037cc 	andi	r2,r2,223
811153f0:	10c00826 	beq	r2,r3,81115414 <_strtol_r+0x22c>
811153f4:	05800204 	movi	r22,8
811153f8:	003fa006 	br	8111527c <__reset+0xfb0f527c>
811153fc:	00800c04 	movi	r2,48
81115400:	80bf9e1e 	bne	r16,r2,8111527c <__reset+0xfb0f527c>
81115404:	88800003 	ldbu	r2,0(r17)
81115408:	00c01604 	movi	r3,88
8111540c:	108037cc 	andi	r2,r2,223
81115410:	10ff9a1e 	bne	r2,r3,8111527c <__reset+0xfb0f527c>
81115414:	05c00404 	movi	r23,16
81115418:	8c000043 	ldbu	r16,1(r17)
8111541c:	b82d883a 	mov	r22,r23
81115420:	8c400084 	addi	r17,r17,2
81115424:	003f9606 	br	81115280 <__reset+0xfb0f5280>

81115428 <strtol>:
81115428:	00a04534 	movhi	r2,33044
8111542c:	10916904 	addi	r2,r2,17828
81115430:	300f883a 	mov	r7,r6
81115434:	280d883a 	mov	r6,r5
81115438:	200b883a 	mov	r5,r4
8111543c:	11000017 	ldw	r4,0(r2)
81115440:	11151e81 	jmpi	811151e8 <_strtol_r>

81115444 <___svfprintf_internal_r>:
81115444:	deffb704 	addi	sp,sp,-292
81115448:	de00012e 	bgeu	sp,et,81115450 <___svfprintf_internal_r+0xc>
8111544c:	003b68fa 	trap	3
81115450:	dfc04815 	stw	ra,288(sp)
81115454:	ddc04615 	stw	r23,280(sp)
81115458:	d9402c15 	stw	r5,176(sp)
8111545c:	d9003915 	stw	r4,228(sp)
81115460:	302f883a 	mov	r23,r6
81115464:	d9c02d15 	stw	r7,180(sp)
81115468:	df004715 	stw	fp,284(sp)
8111546c:	dd804515 	stw	r22,276(sp)
81115470:	dd404415 	stw	r21,272(sp)
81115474:	dd004315 	stw	r20,268(sp)
81115478:	dcc04215 	stw	r19,264(sp)
8111547c:	dc804115 	stw	r18,260(sp)
81115480:	dc404015 	stw	r17,256(sp)
81115484:	dc003f15 	stw	r16,252(sp)
81115488:	111e32c0 	call	8111e32c <_localeconv_r>
8111548c:	10800017 	ldw	r2,0(r2)
81115490:	1009883a 	mov	r4,r2
81115494:	d8803415 	stw	r2,208(sp)
81115498:	111510c0 	call	8111510c <strlen>
8111549c:	d8c02c17 	ldw	r3,176(sp)
811154a0:	d8803815 	stw	r2,224(sp)
811154a4:	1880030b 	ldhu	r2,12(r3)
811154a8:	1080200c 	andi	r2,r2,128
811154ac:	10000226 	beq	r2,zero,811154b8 <___svfprintf_internal_r+0x74>
811154b0:	18800417 	ldw	r2,16(r3)
811154b4:	10067f26 	beq	r2,zero,81116eb4 <___svfprintf_internal_r+0x1a70>
811154b8:	dcc03917 	ldw	r19,228(sp)
811154bc:	d8c00404 	addi	r3,sp,16
811154c0:	05604534 	movhi	r21,33044
811154c4:	d9001e04 	addi	r4,sp,120
811154c8:	ad478e84 	addi	r21,r21,7738
811154cc:	d8c01e15 	stw	r3,120(sp)
811154d0:	d8002015 	stw	zero,128(sp)
811154d4:	d8001f15 	stw	zero,124(sp)
811154d8:	d8003315 	stw	zero,204(sp)
811154dc:	d8003615 	stw	zero,216(sp)
811154e0:	d8003715 	stw	zero,220(sp)
811154e4:	1811883a 	mov	r8,r3
811154e8:	d8003a15 	stw	zero,232(sp)
811154ec:	d8003b15 	stw	zero,236(sp)
811154f0:	d8002f15 	stw	zero,188(sp)
811154f4:	d9002815 	stw	r4,160(sp)
811154f8:	b8800007 	ldb	r2,0(r23)
811154fc:	10026726 	beq	r2,zero,81115e9c <___svfprintf_internal_r+0xa58>
81115500:	00c00944 	movi	r3,37
81115504:	b821883a 	mov	r16,r23
81115508:	10c0021e 	bne	r2,r3,81115514 <___svfprintf_internal_r+0xd0>
8111550c:	00001406 	br	81115560 <___svfprintf_internal_r+0x11c>
81115510:	10c00326 	beq	r2,r3,81115520 <___svfprintf_internal_r+0xdc>
81115514:	84000044 	addi	r16,r16,1
81115518:	80800007 	ldb	r2,0(r16)
8111551c:	103ffc1e 	bne	r2,zero,81115510 <__reset+0xfb0f5510>
81115520:	85e3c83a 	sub	r17,r16,r23
81115524:	88000e26 	beq	r17,zero,81115560 <___svfprintf_internal_r+0x11c>
81115528:	d8c02017 	ldw	r3,128(sp)
8111552c:	d8801f17 	ldw	r2,124(sp)
81115530:	45c00015 	stw	r23,0(r8)
81115534:	1c47883a 	add	r3,r3,r17
81115538:	10800044 	addi	r2,r2,1
8111553c:	d8c02015 	stw	r3,128(sp)
81115540:	44400115 	stw	r17,4(r8)
81115544:	d8801f15 	stw	r2,124(sp)
81115548:	00c001c4 	movi	r3,7
8111554c:	18809716 	blt	r3,r2,811157ac <___svfprintf_internal_r+0x368>
81115550:	42000204 	addi	r8,r8,8
81115554:	d9402f17 	ldw	r5,188(sp)
81115558:	2c4b883a 	add	r5,r5,r17
8111555c:	d9402f15 	stw	r5,188(sp)
81115560:	80800007 	ldb	r2,0(r16)
81115564:	10009826 	beq	r2,zero,811157c8 <___svfprintf_internal_r+0x384>
81115568:	84400047 	ldb	r17,1(r16)
8111556c:	00bfffc4 	movi	r2,-1
81115570:	85c00044 	addi	r23,r16,1
81115574:	d8002785 	stb	zero,158(sp)
81115578:	0007883a 	mov	r3,zero
8111557c:	000f883a 	mov	r7,zero
81115580:	d8802915 	stw	r2,164(sp)
81115584:	d8003115 	stw	zero,196(sp)
81115588:	0025883a 	mov	r18,zero
8111558c:	01401604 	movi	r5,88
81115590:	01800244 	movi	r6,9
81115594:	02800a84 	movi	r10,42
81115598:	02401b04 	movi	r9,108
8111559c:	bdc00044 	addi	r23,r23,1
811155a0:	88bff804 	addi	r2,r17,-32
811155a4:	2882f036 	bltu	r5,r2,81116168 <___svfprintf_internal_r+0xd24>
811155a8:	100490ba 	slli	r2,r2,2
811155ac:	01204474 	movhi	r4,33041
811155b0:	21157004 	addi	r4,r4,21952
811155b4:	1105883a 	add	r2,r2,r4
811155b8:	10800017 	ldw	r2,0(r2)
811155bc:	1000683a 	jmp	r2
811155c0:	811160d0 	cmplti	r4,r16,17795
811155c4:	81116168 	cmpgeui	r4,r16,17797
811155c8:	81116168 	cmpgeui	r4,r16,17797
811155cc:	811160c4 	addi	r4,r16,17795
811155d0:	81116168 	cmpgeui	r4,r16,17797
811155d4:	81116168 	cmpgeui	r4,r16,17797
811155d8:	81116168 	cmpgeui	r4,r16,17797
811155dc:	81116168 	cmpgeui	r4,r16,17797
811155e0:	81116168 	cmpgeui	r4,r16,17797
811155e4:	81116168 	cmpgeui	r4,r16,17797
811155e8:	81115824 	muli	r4,r16,17760
811155ec:	81116000 	call	88111600 <__reset+0x20f1600>
811155f0:	81116168 	cmpgeui	r4,r16,17797
811155f4:	81115734 	orhi	r4,r16,17756
811155f8:	8111584c 	andi	r4,r16,17761
811155fc:	81116168 	cmpgeui	r4,r16,17797
81115600:	811158c0 	call	8811158c <__reset+0x20f158c>
81115604:	8111588c 	andi	r4,r16,17762
81115608:	8111588c 	andi	r4,r16,17762
8111560c:	8111588c 	andi	r4,r16,17762
81115610:	8111588c 	andi	r4,r16,17762
81115614:	8111588c 	andi	r4,r16,17762
81115618:	8111588c 	andi	r4,r16,17762
8111561c:	8111588c 	andi	r4,r16,17762
81115620:	8111588c 	andi	r4,r16,17762
81115624:	8111588c 	andi	r4,r16,17762
81115628:	81116168 	cmpgeui	r4,r16,17797
8111562c:	81116168 	cmpgeui	r4,r16,17797
81115630:	81116168 	cmpgeui	r4,r16,17797
81115634:	81116168 	cmpgeui	r4,r16,17797
81115638:	81116168 	cmpgeui	r4,r16,17797
8111563c:	81116168 	cmpgeui	r4,r16,17797
81115640:	81116168 	cmpgeui	r4,r16,17797
81115644:	81116168 	cmpgeui	r4,r16,17797
81115648:	81116168 	cmpgeui	r4,r16,17797
8111564c:	81116168 	cmpgeui	r4,r16,17797
81115650:	81115978 	rdprs	r4,r16,17765
81115654:	811158cc 	andi	r4,r16,17763
81115658:	81116168 	cmpgeui	r4,r16,17797
8111565c:	811158cc 	andi	r4,r16,17763
81115660:	81116168 	cmpgeui	r4,r16,17797
81115664:	81116168 	cmpgeui	r4,r16,17797
81115668:	81116168 	cmpgeui	r4,r16,17797
8111566c:	81116168 	cmpgeui	r4,r16,17797
81115670:	8111596c 	andhi	r4,r16,17765
81115674:	81116168 	cmpgeui	r4,r16,17797
81115678:	81116168 	cmpgeui	r4,r16,17797
8111567c:	81115a34 	orhi	r4,r16,17768
81115680:	81116168 	cmpgeui	r4,r16,17797
81115684:	81116168 	cmpgeui	r4,r16,17797
81115688:	81116168 	cmpgeui	r4,r16,17797
8111568c:	81116168 	cmpgeui	r4,r16,17797
81115690:	81116168 	cmpgeui	r4,r16,17797
81115694:	81115ea4 	muli	r4,r16,17786
81115698:	81116168 	cmpgeui	r4,r16,17797
8111569c:	81116168 	cmpgeui	r4,r16,17797
811156a0:	81115f04 	addi	r4,r16,17788
811156a4:	81116168 	cmpgeui	r4,r16,17797
811156a8:	81116168 	cmpgeui	r4,r16,17797
811156ac:	81116168 	cmpgeui	r4,r16,17797
811156b0:	81116168 	cmpgeui	r4,r16,17797
811156b4:	81116168 	cmpgeui	r4,r16,17797
811156b8:	81116168 	cmpgeui	r4,r16,17797
811156bc:	81116168 	cmpgeui	r4,r16,17797
811156c0:	81116168 	cmpgeui	r4,r16,17797
811156c4:	81116168 	cmpgeui	r4,r16,17797
811156c8:	81116168 	cmpgeui	r4,r16,17797
811156cc:	81115fb4 	orhi	r4,r16,17790
811156d0:	811160f0 	cmpltui	r4,r16,17795
811156d4:	811158cc 	andi	r4,r16,17763
811156d8:	811158cc 	andi	r4,r16,17763
811156dc:	811158cc 	andi	r4,r16,17763
811156e0:	81116144 	addi	r4,r16,17797
811156e4:	811160f0 	cmpltui	r4,r16,17795
811156e8:	81116168 	cmpgeui	r4,r16,17797
811156ec:	81116168 	cmpgeui	r4,r16,17797
811156f0:	81116100 	call	88111610 <__reset+0x20f1610>
811156f4:	81116168 	cmpgeui	r4,r16,17797
811156f8:	81116110 	cmplti	r4,r16,17796
811156fc:	81115ff0 	cmpltui	r4,r16,17791
81115700:	81115740 	call	88111574 <__reset+0x20f1574>
81115704:	81116010 	cmplti	r4,r16,17792
81115708:	81116168 	cmpgeui	r4,r16,17797
8111570c:	8111601c 	xori	r4,r16,17792
81115710:	81116168 	cmpgeui	r4,r16,17797
81115714:	81116078 	rdprs	r4,r16,17793
81115718:	81116168 	cmpgeui	r4,r16,17797
8111571c:	81116168 	cmpgeui	r4,r16,17797
81115720:	81116088 	cmpgei	r4,r16,17794
81115724:	d9003117 	ldw	r4,196(sp)
81115728:	d8802d15 	stw	r2,180(sp)
8111572c:	0109c83a 	sub	r4,zero,r4
81115730:	d9003115 	stw	r4,196(sp)
81115734:	94800114 	ori	r18,r18,4
81115738:	bc400007 	ldb	r17,0(r23)
8111573c:	003f9706 	br	8111559c <__reset+0xfb0f559c>
81115740:	00800c04 	movi	r2,48
81115744:	d9002d17 	ldw	r4,180(sp)
81115748:	d9402917 	ldw	r5,164(sp)
8111574c:	d8802705 	stb	r2,156(sp)
81115750:	00801e04 	movi	r2,120
81115754:	d8802745 	stb	r2,157(sp)
81115758:	d8002785 	stb	zero,158(sp)
8111575c:	20c00104 	addi	r3,r4,4
81115760:	25000017 	ldw	r20,0(r4)
81115764:	002d883a 	mov	r22,zero
81115768:	90800094 	ori	r2,r18,2
8111576c:	28028616 	blt	r5,zero,81116188 <___svfprintf_internal_r+0xd44>
81115770:	00bfdfc4 	movi	r2,-129
81115774:	90a4703a 	and	r18,r18,r2
81115778:	d8c02d15 	stw	r3,180(sp)
8111577c:	94800094 	ori	r18,r18,2
81115780:	a002731e 	bne	r20,zero,81116150 <___svfprintf_internal_r+0xd0c>
81115784:	00a04534 	movhi	r2,33044
81115788:	10878704 	addi	r2,r2,7708
8111578c:	d8803a15 	stw	r2,232(sp)
81115790:	04401e04 	movi	r17,120
81115794:	d8c02917 	ldw	r3,164(sp)
81115798:	0039883a 	mov	fp,zero
8111579c:	1801d526 	beq	r3,zero,81115ef4 <___svfprintf_internal_r+0xab0>
811157a0:	0029883a 	mov	r20,zero
811157a4:	002d883a 	mov	r22,zero
811157a8:	0001f106 	br	81115f70 <___svfprintf_internal_r+0xb2c>
811157ac:	d9402c17 	ldw	r5,176(sp)
811157b0:	d9801e04 	addi	r6,sp,120
811157b4:	9809883a 	mov	r4,r19
811157b8:	11220640 	call	81122064 <__ssprint_r>
811157bc:	1000081e 	bne	r2,zero,811157e0 <___svfprintf_internal_r+0x39c>
811157c0:	da000404 	addi	r8,sp,16
811157c4:	003f6306 	br	81115554 <__reset+0xfb0f5554>
811157c8:	d8802017 	ldw	r2,128(sp)
811157cc:	10000426 	beq	r2,zero,811157e0 <___svfprintf_internal_r+0x39c>
811157d0:	d9402c17 	ldw	r5,176(sp)
811157d4:	d9003917 	ldw	r4,228(sp)
811157d8:	d9801e04 	addi	r6,sp,120
811157dc:	11220640 	call	81122064 <__ssprint_r>
811157e0:	d8802c17 	ldw	r2,176(sp)
811157e4:	10c0030b 	ldhu	r3,12(r2)
811157e8:	d8802f17 	ldw	r2,188(sp)
811157ec:	18c0100c 	andi	r3,r3,64
811157f0:	1805f51e 	bne	r3,zero,81116fc8 <___svfprintf_internal_r+0x1b84>
811157f4:	dfc04817 	ldw	ra,288(sp)
811157f8:	df004717 	ldw	fp,284(sp)
811157fc:	ddc04617 	ldw	r23,280(sp)
81115800:	dd804517 	ldw	r22,276(sp)
81115804:	dd404417 	ldw	r21,272(sp)
81115808:	dd004317 	ldw	r20,268(sp)
8111580c:	dcc04217 	ldw	r19,264(sp)
81115810:	dc804117 	ldw	r18,260(sp)
81115814:	dc404017 	ldw	r17,256(sp)
81115818:	dc003f17 	ldw	r16,252(sp)
8111581c:	dec04904 	addi	sp,sp,292
81115820:	f800283a 	ret
81115824:	d8802d17 	ldw	r2,180(sp)
81115828:	d9002d17 	ldw	r4,180(sp)
8111582c:	10800017 	ldw	r2,0(r2)
81115830:	d8803115 	stw	r2,196(sp)
81115834:	20800104 	addi	r2,r4,4
81115838:	d9003117 	ldw	r4,196(sp)
8111583c:	203fb916 	blt	r4,zero,81115724 <__reset+0xfb0f5724>
81115840:	d8802d15 	stw	r2,180(sp)
81115844:	bc400007 	ldb	r17,0(r23)
81115848:	003f5406 	br	8111559c <__reset+0xfb0f559c>
8111584c:	bc400007 	ldb	r17,0(r23)
81115850:	bac00044 	addi	r11,r23,1
81115854:	8a873926 	beq	r17,r10,8111753c <___svfprintf_internal_r+0x20f8>
81115858:	88bff404 	addi	r2,r17,-48
8111585c:	0009883a 	mov	r4,zero
81115860:	30868836 	bltu	r6,r2,81117284 <___svfprintf_internal_r+0x1e40>
81115864:	5c400007 	ldb	r17,0(r11)
81115868:	210002a4 	muli	r4,r4,10
8111586c:	5dc00044 	addi	r23,r11,1
81115870:	b817883a 	mov	r11,r23
81115874:	2089883a 	add	r4,r4,r2
81115878:	88bff404 	addi	r2,r17,-48
8111587c:	30bff92e 	bgeu	r6,r2,81115864 <__reset+0xfb0f5864>
81115880:	2005d716 	blt	r4,zero,81116fe0 <___svfprintf_internal_r+0x1b9c>
81115884:	d9002915 	stw	r4,164(sp)
81115888:	003f4506 	br	811155a0 <__reset+0xfb0f55a0>
8111588c:	b809883a 	mov	r4,r23
81115890:	d8003115 	stw	zero,196(sp)
81115894:	88bff404 	addi	r2,r17,-48
81115898:	0017883a 	mov	r11,zero
8111589c:	24400007 	ldb	r17,0(r4)
811158a0:	5ac002a4 	muli	r11,r11,10
811158a4:	bdc00044 	addi	r23,r23,1
811158a8:	b809883a 	mov	r4,r23
811158ac:	12d7883a 	add	r11,r2,r11
811158b0:	88bff404 	addi	r2,r17,-48
811158b4:	30bff92e 	bgeu	r6,r2,8111589c <__reset+0xfb0f589c>
811158b8:	dac03115 	stw	r11,196(sp)
811158bc:	003f3806 	br	811155a0 <__reset+0xfb0f55a0>
811158c0:	94802014 	ori	r18,r18,128
811158c4:	bc400007 	ldb	r17,0(r23)
811158c8:	003f3406 	br	8111559c <__reset+0xfb0f559c>
811158cc:	18c03fcc 	andi	r3,r3,255
811158d0:	1807471e 	bne	r3,zero,811175f0 <___svfprintf_internal_r+0x21ac>
811158d4:	9080020c 	andi	r2,r18,8
811158d8:	10047d26 	beq	r2,zero,81116ad0 <___svfprintf_internal_r+0x168c>
811158dc:	d8c02d17 	ldw	r3,180(sp)
811158e0:	d9002d17 	ldw	r4,180(sp)
811158e4:	d9402d17 	ldw	r5,180(sp)
811158e8:	18c00017 	ldw	r3,0(r3)
811158ec:	21000117 	ldw	r4,4(r4)
811158f0:	29400204 	addi	r5,r5,8
811158f4:	d8c03615 	stw	r3,216(sp)
811158f8:	d9003715 	stw	r4,220(sp)
811158fc:	d9402d15 	stw	r5,180(sp)
81115900:	d9003617 	ldw	r4,216(sp)
81115904:	d9403717 	ldw	r5,220(sp)
81115908:	da003e15 	stw	r8,248(sp)
8111590c:	04000044 	movi	r16,1
81115910:	111fe780 	call	8111fe78 <__fpclassifyd>
81115914:	da003e17 	ldw	r8,248(sp)
81115918:	14044b1e 	bne	r2,r16,81116a48 <___svfprintf_internal_r+0x1604>
8111591c:	d9003617 	ldw	r4,216(sp)
81115920:	d9403717 	ldw	r5,220(sp)
81115924:	000d883a 	mov	r6,zero
81115928:	000f883a 	mov	r7,zero
8111592c:	11281c00 	call	811281c0 <__ledf2>
81115930:	da003e17 	ldw	r8,248(sp)
81115934:	1005f316 	blt	r2,zero,81117104 <___svfprintf_internal_r+0x1cc0>
81115938:	df002783 	ldbu	fp,158(sp)
8111593c:	008011c4 	movi	r2,71
81115940:	1445590e 	bge	r2,r17,81116ea8 <___svfprintf_internal_r+0x1a64>
81115944:	04204534 	movhi	r16,33044
81115948:	84077f04 	addi	r16,r16,7676
8111594c:	00c000c4 	movi	r3,3
81115950:	00bfdfc4 	movi	r2,-129
81115954:	d8c02a15 	stw	r3,168(sp)
81115958:	90a4703a 	and	r18,r18,r2
8111595c:	d8c02e15 	stw	r3,184(sp)
81115960:	d8002915 	stw	zero,164(sp)
81115964:	d8003215 	stw	zero,200(sp)
81115968:	00006606 	br	81115b04 <___svfprintf_internal_r+0x6c0>
8111596c:	94800214 	ori	r18,r18,8
81115970:	bc400007 	ldb	r17,0(r23)
81115974:	003f0906 	br	8111559c <__reset+0xfb0f559c>
81115978:	18c03fcc 	andi	r3,r3,255
8111597c:	1807181e 	bne	r3,zero,811175e0 <___svfprintf_internal_r+0x219c>
81115980:	94800414 	ori	r18,r18,16
81115984:	9080080c 	andi	r2,r18,32
81115988:	10039626 	beq	r2,zero,811167e4 <___svfprintf_internal_r+0x13a0>
8111598c:	d9402d17 	ldw	r5,180(sp)
81115990:	28800117 	ldw	r2,4(r5)
81115994:	2d000017 	ldw	r20,0(r5)
81115998:	29400204 	addi	r5,r5,8
8111599c:	d9402d15 	stw	r5,180(sp)
811159a0:	102d883a 	mov	r22,r2
811159a4:	10039816 	blt	r2,zero,81116808 <___svfprintf_internal_r+0x13c4>
811159a8:	d9402917 	ldw	r5,164(sp)
811159ac:	df002783 	ldbu	fp,158(sp)
811159b0:	2803ab16 	blt	r5,zero,81116860 <___svfprintf_internal_r+0x141c>
811159b4:	00ffdfc4 	movi	r3,-129
811159b8:	a584b03a 	or	r2,r20,r22
811159bc:	90e4703a 	and	r18,r18,r3
811159c0:	10014a26 	beq	r2,zero,81115eec <___svfprintf_internal_r+0xaa8>
811159c4:	b0034b26 	beq	r22,zero,811166f4 <___svfprintf_internal_r+0x12b0>
811159c8:	dc402a15 	stw	r17,168(sp)
811159cc:	dc001e04 	addi	r16,sp,120
811159d0:	b023883a 	mov	r17,r22
811159d4:	402d883a 	mov	r22,r8
811159d8:	a009883a 	mov	r4,r20
811159dc:	880b883a 	mov	r5,r17
811159e0:	01800284 	movi	r6,10
811159e4:	000f883a 	mov	r7,zero
811159e8:	11265c80 	call	811265c8 <__umoddi3>
811159ec:	10800c04 	addi	r2,r2,48
811159f0:	843fffc4 	addi	r16,r16,-1
811159f4:	a009883a 	mov	r4,r20
811159f8:	880b883a 	mov	r5,r17
811159fc:	80800005 	stb	r2,0(r16)
81115a00:	01800284 	movi	r6,10
81115a04:	000f883a 	mov	r7,zero
81115a08:	11260480 	call	81126048 <__udivdi3>
81115a0c:	1029883a 	mov	r20,r2
81115a10:	10c4b03a 	or	r2,r2,r3
81115a14:	1823883a 	mov	r17,r3
81115a18:	103fef1e 	bne	r2,zero,811159d8 <__reset+0xfb0f59d8>
81115a1c:	d8c02817 	ldw	r3,160(sp)
81115a20:	dc402a17 	ldw	r17,168(sp)
81115a24:	b011883a 	mov	r8,r22
81115a28:	1c07c83a 	sub	r3,r3,r16
81115a2c:	d8c02e15 	stw	r3,184(sp)
81115a30:	00002e06 	br	81115aec <___svfprintf_internal_r+0x6a8>
81115a34:	18c03fcc 	andi	r3,r3,255
81115a38:	1806e71e 	bne	r3,zero,811175d8 <___svfprintf_internal_r+0x2194>
81115a3c:	94800414 	ori	r18,r18,16
81115a40:	9080080c 	andi	r2,r18,32
81115a44:	1002d426 	beq	r2,zero,81116598 <___svfprintf_internal_r+0x1154>
81115a48:	d9402d17 	ldw	r5,180(sp)
81115a4c:	d8c02917 	ldw	r3,164(sp)
81115a50:	d8002785 	stb	zero,158(sp)
81115a54:	28800204 	addi	r2,r5,8
81115a58:	2d000017 	ldw	r20,0(r5)
81115a5c:	2d800117 	ldw	r22,4(r5)
81115a60:	18041516 	blt	r3,zero,81116ab8 <___svfprintf_internal_r+0x1674>
81115a64:	013fdfc4 	movi	r4,-129
81115a68:	a586b03a 	or	r3,r20,r22
81115a6c:	d8802d15 	stw	r2,180(sp)
81115a70:	9124703a 	and	r18,r18,r4
81115a74:	1802d51e 	bne	r3,zero,811165cc <___svfprintf_internal_r+0x1188>
81115a78:	d9402917 	ldw	r5,164(sp)
81115a7c:	0039883a 	mov	fp,zero
81115a80:	2806be26 	beq	r5,zero,8111757c <___svfprintf_internal_r+0x2138>
81115a84:	0029883a 	mov	r20,zero
81115a88:	002d883a 	mov	r22,zero
81115a8c:	dc001e04 	addi	r16,sp,120
81115a90:	a006d0fa 	srli	r3,r20,3
81115a94:	b008977a 	slli	r4,r22,29
81115a98:	b02cd0fa 	srli	r22,r22,3
81115a9c:	a50001cc 	andi	r20,r20,7
81115aa0:	a0800c04 	addi	r2,r20,48
81115aa4:	843fffc4 	addi	r16,r16,-1
81115aa8:	20e8b03a 	or	r20,r4,r3
81115aac:	80800005 	stb	r2,0(r16)
81115ab0:	a586b03a 	or	r3,r20,r22
81115ab4:	183ff61e 	bne	r3,zero,81115a90 <__reset+0xfb0f5a90>
81115ab8:	90c0004c 	andi	r3,r18,1
81115abc:	18013926 	beq	r3,zero,81115fa4 <___svfprintf_internal_r+0xb60>
81115ac0:	10803fcc 	andi	r2,r2,255
81115ac4:	1080201c 	xori	r2,r2,128
81115ac8:	10bfe004 	addi	r2,r2,-128
81115acc:	00c00c04 	movi	r3,48
81115ad0:	10c13426 	beq	r2,r3,81115fa4 <___svfprintf_internal_r+0xb60>
81115ad4:	80ffffc5 	stb	r3,-1(r16)
81115ad8:	d8c02817 	ldw	r3,160(sp)
81115adc:	80bfffc4 	addi	r2,r16,-1
81115ae0:	1021883a 	mov	r16,r2
81115ae4:	1887c83a 	sub	r3,r3,r2
81115ae8:	d8c02e15 	stw	r3,184(sp)
81115aec:	d8802e17 	ldw	r2,184(sp)
81115af0:	d9002917 	ldw	r4,164(sp)
81115af4:	1100010e 	bge	r2,r4,81115afc <___svfprintf_internal_r+0x6b8>
81115af8:	2005883a 	mov	r2,r4
81115afc:	d8802a15 	stw	r2,168(sp)
81115b00:	d8003215 	stw	zero,200(sp)
81115b04:	e7003fcc 	andi	fp,fp,255
81115b08:	e700201c 	xori	fp,fp,128
81115b0c:	e73fe004 	addi	fp,fp,-128
81115b10:	e0000326 	beq	fp,zero,81115b20 <___svfprintf_internal_r+0x6dc>
81115b14:	d8c02a17 	ldw	r3,168(sp)
81115b18:	18c00044 	addi	r3,r3,1
81115b1c:	d8c02a15 	stw	r3,168(sp)
81115b20:	90c0008c 	andi	r3,r18,2
81115b24:	d8c02b15 	stw	r3,172(sp)
81115b28:	18000326 	beq	r3,zero,81115b38 <___svfprintf_internal_r+0x6f4>
81115b2c:	d8c02a17 	ldw	r3,168(sp)
81115b30:	18c00084 	addi	r3,r3,2
81115b34:	d8c02a15 	stw	r3,168(sp)
81115b38:	90c0210c 	andi	r3,r18,132
81115b3c:	d8c03015 	stw	r3,192(sp)
81115b40:	1801a11e 	bne	r3,zero,811161c8 <___svfprintf_internal_r+0xd84>
81115b44:	d9003117 	ldw	r4,196(sp)
81115b48:	d8c02a17 	ldw	r3,168(sp)
81115b4c:	20e9c83a 	sub	r20,r4,r3
81115b50:	05019d0e 	bge	zero,r20,811161c8 <___svfprintf_internal_r+0xd84>
81115b54:	02400404 	movi	r9,16
81115b58:	d8c02017 	ldw	r3,128(sp)
81115b5c:	d8801f17 	ldw	r2,124(sp)
81115b60:	4d051b0e 	bge	r9,r20,81116fd0 <___svfprintf_internal_r+0x1b8c>
81115b64:	01604534 	movhi	r5,33044
81115b68:	29479284 	addi	r5,r5,7754
81115b6c:	dc403c15 	stw	r17,240(sp)
81115b70:	d9403515 	stw	r5,212(sp)
81115b74:	a023883a 	mov	r17,r20
81115b78:	482d883a 	mov	r22,r9
81115b7c:	9029883a 	mov	r20,r18
81115b80:	070001c4 	movi	fp,7
81115b84:	8025883a 	mov	r18,r16
81115b88:	dc002c17 	ldw	r16,176(sp)
81115b8c:	00000306 	br	81115b9c <___svfprintf_internal_r+0x758>
81115b90:	8c7ffc04 	addi	r17,r17,-16
81115b94:	42000204 	addi	r8,r8,8
81115b98:	b440130e 	bge	r22,r17,81115be8 <___svfprintf_internal_r+0x7a4>
81115b9c:	01204534 	movhi	r4,33044
81115ba0:	18c00404 	addi	r3,r3,16
81115ba4:	10800044 	addi	r2,r2,1
81115ba8:	21079284 	addi	r4,r4,7754
81115bac:	41000015 	stw	r4,0(r8)
81115bb0:	45800115 	stw	r22,4(r8)
81115bb4:	d8c02015 	stw	r3,128(sp)
81115bb8:	d8801f15 	stw	r2,124(sp)
81115bbc:	e0bff40e 	bge	fp,r2,81115b90 <__reset+0xfb0f5b90>
81115bc0:	d9801e04 	addi	r6,sp,120
81115bc4:	800b883a 	mov	r5,r16
81115bc8:	9809883a 	mov	r4,r19
81115bcc:	11220640 	call	81122064 <__ssprint_r>
81115bd0:	103f031e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81115bd4:	8c7ffc04 	addi	r17,r17,-16
81115bd8:	d8c02017 	ldw	r3,128(sp)
81115bdc:	d8801f17 	ldw	r2,124(sp)
81115be0:	da000404 	addi	r8,sp,16
81115be4:	b47fed16 	blt	r22,r17,81115b9c <__reset+0xfb0f5b9c>
81115be8:	9021883a 	mov	r16,r18
81115bec:	a025883a 	mov	r18,r20
81115bf0:	8829883a 	mov	r20,r17
81115bf4:	dc403c17 	ldw	r17,240(sp)
81115bf8:	d9403517 	ldw	r5,212(sp)
81115bfc:	a0c7883a 	add	r3,r20,r3
81115c00:	10800044 	addi	r2,r2,1
81115c04:	41400015 	stw	r5,0(r8)
81115c08:	45000115 	stw	r20,4(r8)
81115c0c:	d8c02015 	stw	r3,128(sp)
81115c10:	d8801f15 	stw	r2,124(sp)
81115c14:	010001c4 	movi	r4,7
81115c18:	20829f16 	blt	r4,r2,81116698 <___svfprintf_internal_r+0x1254>
81115c1c:	df002787 	ldb	fp,158(sp)
81115c20:	42000204 	addi	r8,r8,8
81115c24:	e0000c26 	beq	fp,zero,81115c58 <___svfprintf_internal_r+0x814>
81115c28:	d8801f17 	ldw	r2,124(sp)
81115c2c:	d9002784 	addi	r4,sp,158
81115c30:	18c00044 	addi	r3,r3,1
81115c34:	10800044 	addi	r2,r2,1
81115c38:	41000015 	stw	r4,0(r8)
81115c3c:	01000044 	movi	r4,1
81115c40:	41000115 	stw	r4,4(r8)
81115c44:	d8c02015 	stw	r3,128(sp)
81115c48:	d8801f15 	stw	r2,124(sp)
81115c4c:	010001c4 	movi	r4,7
81115c50:	20823816 	blt	r4,r2,81116534 <___svfprintf_internal_r+0x10f0>
81115c54:	42000204 	addi	r8,r8,8
81115c58:	d8802b17 	ldw	r2,172(sp)
81115c5c:	10000c26 	beq	r2,zero,81115c90 <___svfprintf_internal_r+0x84c>
81115c60:	d8801f17 	ldw	r2,124(sp)
81115c64:	d9002704 	addi	r4,sp,156
81115c68:	18c00084 	addi	r3,r3,2
81115c6c:	10800044 	addi	r2,r2,1
81115c70:	41000015 	stw	r4,0(r8)
81115c74:	01000084 	movi	r4,2
81115c78:	41000115 	stw	r4,4(r8)
81115c7c:	d8c02015 	stw	r3,128(sp)
81115c80:	d8801f15 	stw	r2,124(sp)
81115c84:	010001c4 	movi	r4,7
81115c88:	20823216 	blt	r4,r2,81116554 <___svfprintf_internal_r+0x1110>
81115c8c:	42000204 	addi	r8,r8,8
81115c90:	d9003017 	ldw	r4,192(sp)
81115c94:	00802004 	movi	r2,128
81115c98:	20819726 	beq	r4,r2,811162f8 <___svfprintf_internal_r+0xeb4>
81115c9c:	d9402917 	ldw	r5,164(sp)
81115ca0:	d8802e17 	ldw	r2,184(sp)
81115ca4:	28adc83a 	sub	r22,r5,r2
81115ca8:	05802f0e 	bge	zero,r22,81115d68 <___svfprintf_internal_r+0x924>
81115cac:	07000404 	movi	fp,16
81115cb0:	d8801f17 	ldw	r2,124(sp)
81115cb4:	e583c00e 	bge	fp,r22,81116bb8 <___svfprintf_internal_r+0x1774>
81115cb8:	01604534 	movhi	r5,33044
81115cbc:	29478e84 	addi	r5,r5,7738
81115cc0:	dc402915 	stw	r17,164(sp)
81115cc4:	d9402b15 	stw	r5,172(sp)
81115cc8:	b023883a 	mov	r17,r22
81115ccc:	050001c4 	movi	r20,7
81115cd0:	902d883a 	mov	r22,r18
81115cd4:	8025883a 	mov	r18,r16
81115cd8:	dc002c17 	ldw	r16,176(sp)
81115cdc:	00000306 	br	81115cec <___svfprintf_internal_r+0x8a8>
81115ce0:	8c7ffc04 	addi	r17,r17,-16
81115ce4:	42000204 	addi	r8,r8,8
81115ce8:	e440110e 	bge	fp,r17,81115d30 <___svfprintf_internal_r+0x8ec>
81115cec:	18c00404 	addi	r3,r3,16
81115cf0:	10800044 	addi	r2,r2,1
81115cf4:	45400015 	stw	r21,0(r8)
81115cf8:	47000115 	stw	fp,4(r8)
81115cfc:	d8c02015 	stw	r3,128(sp)
81115d00:	d8801f15 	stw	r2,124(sp)
81115d04:	a0bff60e 	bge	r20,r2,81115ce0 <__reset+0xfb0f5ce0>
81115d08:	d9801e04 	addi	r6,sp,120
81115d0c:	800b883a 	mov	r5,r16
81115d10:	9809883a 	mov	r4,r19
81115d14:	11220640 	call	81122064 <__ssprint_r>
81115d18:	103eb11e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81115d1c:	8c7ffc04 	addi	r17,r17,-16
81115d20:	d8c02017 	ldw	r3,128(sp)
81115d24:	d8801f17 	ldw	r2,124(sp)
81115d28:	da000404 	addi	r8,sp,16
81115d2c:	e47fef16 	blt	fp,r17,81115cec <__reset+0xfb0f5cec>
81115d30:	9021883a 	mov	r16,r18
81115d34:	b025883a 	mov	r18,r22
81115d38:	882d883a 	mov	r22,r17
81115d3c:	dc402917 	ldw	r17,164(sp)
81115d40:	d9002b17 	ldw	r4,172(sp)
81115d44:	1d87883a 	add	r3,r3,r22
81115d48:	10800044 	addi	r2,r2,1
81115d4c:	41000015 	stw	r4,0(r8)
81115d50:	45800115 	stw	r22,4(r8)
81115d54:	d8c02015 	stw	r3,128(sp)
81115d58:	d8801f15 	stw	r2,124(sp)
81115d5c:	010001c4 	movi	r4,7
81115d60:	2081ec16 	blt	r4,r2,81116514 <___svfprintf_internal_r+0x10d0>
81115d64:	42000204 	addi	r8,r8,8
81115d68:	9080400c 	andi	r2,r18,256
81115d6c:	1001181e 	bne	r2,zero,811161d0 <___svfprintf_internal_r+0xd8c>
81115d70:	d9402e17 	ldw	r5,184(sp)
81115d74:	d8801f17 	ldw	r2,124(sp)
81115d78:	44000015 	stw	r16,0(r8)
81115d7c:	1947883a 	add	r3,r3,r5
81115d80:	10800044 	addi	r2,r2,1
81115d84:	41400115 	stw	r5,4(r8)
81115d88:	d8c02015 	stw	r3,128(sp)
81115d8c:	d8801f15 	stw	r2,124(sp)
81115d90:	010001c4 	movi	r4,7
81115d94:	2081d116 	blt	r4,r2,811164dc <___svfprintf_internal_r+0x1098>
81115d98:	42000204 	addi	r8,r8,8
81115d9c:	9480010c 	andi	r18,r18,4
81115da0:	90003226 	beq	r18,zero,81115e6c <___svfprintf_internal_r+0xa28>
81115da4:	d9403117 	ldw	r5,196(sp)
81115da8:	d8802a17 	ldw	r2,168(sp)
81115dac:	28a1c83a 	sub	r16,r5,r2
81115db0:	04002e0e 	bge	zero,r16,81115e6c <___svfprintf_internal_r+0xa28>
81115db4:	04400404 	movi	r17,16
81115db8:	d8801f17 	ldw	r2,124(sp)
81115dbc:	8c04b90e 	bge	r17,r16,811170a4 <___svfprintf_internal_r+0x1c60>
81115dc0:	01604534 	movhi	r5,33044
81115dc4:	29479284 	addi	r5,r5,7754
81115dc8:	d9403515 	stw	r5,212(sp)
81115dcc:	048001c4 	movi	r18,7
81115dd0:	dd002c17 	ldw	r20,176(sp)
81115dd4:	00000306 	br	81115de4 <___svfprintf_internal_r+0x9a0>
81115dd8:	843ffc04 	addi	r16,r16,-16
81115ddc:	42000204 	addi	r8,r8,8
81115de0:	8c00130e 	bge	r17,r16,81115e30 <___svfprintf_internal_r+0x9ec>
81115de4:	01204534 	movhi	r4,33044
81115de8:	18c00404 	addi	r3,r3,16
81115dec:	10800044 	addi	r2,r2,1
81115df0:	21079284 	addi	r4,r4,7754
81115df4:	41000015 	stw	r4,0(r8)
81115df8:	44400115 	stw	r17,4(r8)
81115dfc:	d8c02015 	stw	r3,128(sp)
81115e00:	d8801f15 	stw	r2,124(sp)
81115e04:	90bff40e 	bge	r18,r2,81115dd8 <__reset+0xfb0f5dd8>
81115e08:	d9801e04 	addi	r6,sp,120
81115e0c:	a00b883a 	mov	r5,r20
81115e10:	9809883a 	mov	r4,r19
81115e14:	11220640 	call	81122064 <__ssprint_r>
81115e18:	103e711e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81115e1c:	843ffc04 	addi	r16,r16,-16
81115e20:	d8c02017 	ldw	r3,128(sp)
81115e24:	d8801f17 	ldw	r2,124(sp)
81115e28:	da000404 	addi	r8,sp,16
81115e2c:	8c3fed16 	blt	r17,r16,81115de4 <__reset+0xfb0f5de4>
81115e30:	d9403517 	ldw	r5,212(sp)
81115e34:	1c07883a 	add	r3,r3,r16
81115e38:	10800044 	addi	r2,r2,1
81115e3c:	41400015 	stw	r5,0(r8)
81115e40:	44000115 	stw	r16,4(r8)
81115e44:	d8c02015 	stw	r3,128(sp)
81115e48:	d8801f15 	stw	r2,124(sp)
81115e4c:	010001c4 	movi	r4,7
81115e50:	2080060e 	bge	r4,r2,81115e6c <___svfprintf_internal_r+0xa28>
81115e54:	d9402c17 	ldw	r5,176(sp)
81115e58:	d9801e04 	addi	r6,sp,120
81115e5c:	9809883a 	mov	r4,r19
81115e60:	11220640 	call	81122064 <__ssprint_r>
81115e64:	103e5e1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81115e68:	d8c02017 	ldw	r3,128(sp)
81115e6c:	d8803117 	ldw	r2,196(sp)
81115e70:	d9002a17 	ldw	r4,168(sp)
81115e74:	1100010e 	bge	r2,r4,81115e7c <___svfprintf_internal_r+0xa38>
81115e78:	2005883a 	mov	r2,r4
81115e7c:	d9402f17 	ldw	r5,188(sp)
81115e80:	288b883a 	add	r5,r5,r2
81115e84:	d9402f15 	stw	r5,188(sp)
81115e88:	18019c1e 	bne	r3,zero,811164fc <___svfprintf_internal_r+0x10b8>
81115e8c:	b8800007 	ldb	r2,0(r23)
81115e90:	d8001f15 	stw	zero,124(sp)
81115e94:	da000404 	addi	r8,sp,16
81115e98:	103d991e 	bne	r2,zero,81115500 <__reset+0xfb0f5500>
81115e9c:	b821883a 	mov	r16,r23
81115ea0:	003daf06 	br	81115560 <__reset+0xfb0f5560>
81115ea4:	18c03fcc 	andi	r3,r3,255
81115ea8:	1805c71e 	bne	r3,zero,811175c8 <___svfprintf_internal_r+0x2184>
81115eac:	94800414 	ori	r18,r18,16
81115eb0:	9080080c 	andi	r2,r18,32
81115eb4:	10020126 	beq	r2,zero,811166bc <___svfprintf_internal_r+0x1278>
81115eb8:	d8802d17 	ldw	r2,180(sp)
81115ebc:	d9002917 	ldw	r4,164(sp)
81115ec0:	d8002785 	stb	zero,158(sp)
81115ec4:	10c00204 	addi	r3,r2,8
81115ec8:	15000017 	ldw	r20,0(r2)
81115ecc:	15800117 	ldw	r22,4(r2)
81115ed0:	20038e16 	blt	r4,zero,81116d0c <___svfprintf_internal_r+0x18c8>
81115ed4:	013fdfc4 	movi	r4,-129
81115ed8:	a584b03a 	or	r2,r20,r22
81115edc:	d8c02d15 	stw	r3,180(sp)
81115ee0:	9124703a 	and	r18,r18,r4
81115ee4:	0039883a 	mov	fp,zero
81115ee8:	103eb61e 	bne	r2,zero,811159c4 <__reset+0xfb0f59c4>
81115eec:	d8802917 	ldw	r2,164(sp)
81115ef0:	1002c81e 	bne	r2,zero,81116a14 <___svfprintf_internal_r+0x15d0>
81115ef4:	d8002915 	stw	zero,164(sp)
81115ef8:	d8002e15 	stw	zero,184(sp)
81115efc:	dc001e04 	addi	r16,sp,120
81115f00:	003efa06 	br	81115aec <__reset+0xfb0f5aec>
81115f04:	18c03fcc 	andi	r3,r3,255
81115f08:	1805ad1e 	bne	r3,zero,811175c0 <___svfprintf_internal_r+0x217c>
81115f0c:	01604534 	movhi	r5,33044
81115f10:	29478204 	addi	r5,r5,7688
81115f14:	d9403a15 	stw	r5,232(sp)
81115f18:	9080080c 	andi	r2,r18,32
81115f1c:	10006126 	beq	r2,zero,811160a4 <___svfprintf_internal_r+0xc60>
81115f20:	d8802d17 	ldw	r2,180(sp)
81115f24:	15000017 	ldw	r20,0(r2)
81115f28:	15800117 	ldw	r22,4(r2)
81115f2c:	10800204 	addi	r2,r2,8
81115f30:	d8802d15 	stw	r2,180(sp)
81115f34:	9080004c 	andi	r2,r18,1
81115f38:	10018e26 	beq	r2,zero,81116574 <___svfprintf_internal_r+0x1130>
81115f3c:	a584b03a 	or	r2,r20,r22
81115f40:	10030926 	beq	r2,zero,81116b68 <___svfprintf_internal_r+0x1724>
81115f44:	d8c02917 	ldw	r3,164(sp)
81115f48:	00800c04 	movi	r2,48
81115f4c:	d8802705 	stb	r2,156(sp)
81115f50:	dc402745 	stb	r17,157(sp)
81115f54:	d8002785 	stb	zero,158(sp)
81115f58:	90800094 	ori	r2,r18,2
81115f5c:	18048716 	blt	r3,zero,8111717c <___svfprintf_internal_r+0x1d38>
81115f60:	00bfdfc4 	movi	r2,-129
81115f64:	90a4703a 	and	r18,r18,r2
81115f68:	94800094 	ori	r18,r18,2
81115f6c:	0039883a 	mov	fp,zero
81115f70:	d9003a17 	ldw	r4,232(sp)
81115f74:	dc001e04 	addi	r16,sp,120
81115f78:	a08003cc 	andi	r2,r20,15
81115f7c:	b006973a 	slli	r3,r22,28
81115f80:	2085883a 	add	r2,r4,r2
81115f84:	a028d13a 	srli	r20,r20,4
81115f88:	10800003 	ldbu	r2,0(r2)
81115f8c:	b02cd13a 	srli	r22,r22,4
81115f90:	843fffc4 	addi	r16,r16,-1
81115f94:	1d28b03a 	or	r20,r3,r20
81115f98:	80800005 	stb	r2,0(r16)
81115f9c:	a584b03a 	or	r2,r20,r22
81115fa0:	103ff51e 	bne	r2,zero,81115f78 <__reset+0xfb0f5f78>
81115fa4:	d8c02817 	ldw	r3,160(sp)
81115fa8:	1c07c83a 	sub	r3,r3,r16
81115fac:	d8c02e15 	stw	r3,184(sp)
81115fb0:	003ece06 	br	81115aec <__reset+0xfb0f5aec>
81115fb4:	d8c02d17 	ldw	r3,180(sp)
81115fb8:	d9002d17 	ldw	r4,180(sp)
81115fbc:	d8002785 	stb	zero,158(sp)
81115fc0:	18800017 	ldw	r2,0(r3)
81115fc4:	21000104 	addi	r4,r4,4
81115fc8:	00c00044 	movi	r3,1
81115fcc:	d8c02a15 	stw	r3,168(sp)
81115fd0:	d8801405 	stb	r2,80(sp)
81115fd4:	d9002d15 	stw	r4,180(sp)
81115fd8:	d8c02e15 	stw	r3,184(sp)
81115fdc:	d8002915 	stw	zero,164(sp)
81115fe0:	d8003215 	stw	zero,200(sp)
81115fe4:	dc001404 	addi	r16,sp,80
81115fe8:	0039883a 	mov	fp,zero
81115fec:	003ecc06 	br	81115b20 <__reset+0xfb0f5b20>
81115ff0:	18c03fcc 	andi	r3,r3,255
81115ff4:	183e9226 	beq	r3,zero,81115a40 <__reset+0xfb0f5a40>
81115ff8:	d9c02785 	stb	r7,158(sp)
81115ffc:	003e9006 	br	81115a40 <__reset+0xfb0f5a40>
81116000:	00c00044 	movi	r3,1
81116004:	01c00ac4 	movi	r7,43
81116008:	bc400007 	ldb	r17,0(r23)
8111600c:	003d6306 	br	8111559c <__reset+0xfb0f559c>
81116010:	94800814 	ori	r18,r18,32
81116014:	bc400007 	ldb	r17,0(r23)
81116018:	003d6006 	br	8111559c <__reset+0xfb0f559c>
8111601c:	d8c02d17 	ldw	r3,180(sp)
81116020:	d8002785 	stb	zero,158(sp)
81116024:	1c000017 	ldw	r16,0(r3)
81116028:	1d000104 	addi	r20,r3,4
8111602c:	80040f26 	beq	r16,zero,8111706c <___svfprintf_internal_r+0x1c28>
81116030:	d9002917 	ldw	r4,164(sp)
81116034:	2003dc16 	blt	r4,zero,81116fa8 <___svfprintf_internal_r+0x1b64>
81116038:	200d883a 	mov	r6,r4
8111603c:	000b883a 	mov	r5,zero
81116040:	8009883a 	mov	r4,r16
81116044:	da003e15 	stw	r8,248(sp)
81116048:	111e6080 	call	8111e608 <memchr>
8111604c:	da003e17 	ldw	r8,248(sp)
81116050:	10045826 	beq	r2,zero,811171b4 <___svfprintf_internal_r+0x1d70>
81116054:	1405c83a 	sub	r2,r2,r16
81116058:	d8802e15 	stw	r2,184(sp)
8111605c:	1003d816 	blt	r2,zero,81116fc0 <___svfprintf_internal_r+0x1b7c>
81116060:	df002783 	ldbu	fp,158(sp)
81116064:	d8802a15 	stw	r2,168(sp)
81116068:	dd002d15 	stw	r20,180(sp)
8111606c:	d8002915 	stw	zero,164(sp)
81116070:	d8003215 	stw	zero,200(sp)
81116074:	003ea306 	br	81115b04 <__reset+0xfb0f5b04>
81116078:	18c03fcc 	andi	r3,r3,255
8111607c:	183f8c26 	beq	r3,zero,81115eb0 <__reset+0xfb0f5eb0>
81116080:	d9c02785 	stb	r7,158(sp)
81116084:	003f8a06 	br	81115eb0 <__reset+0xfb0f5eb0>
81116088:	18c03fcc 	andi	r3,r3,255
8111608c:	1805631e 	bne	r3,zero,8111761c <___svfprintf_internal_r+0x21d8>
81116090:	01604534 	movhi	r5,33044
81116094:	29478704 	addi	r5,r5,7708
81116098:	d9403a15 	stw	r5,232(sp)
8111609c:	9080080c 	andi	r2,r18,32
811160a0:	103f9f1e 	bne	r2,zero,81115f20 <__reset+0xfb0f5f20>
811160a4:	9080040c 	andi	r2,r18,16
811160a8:	10029c26 	beq	r2,zero,81116b1c <___svfprintf_internal_r+0x16d8>
811160ac:	d8c02d17 	ldw	r3,180(sp)
811160b0:	002d883a 	mov	r22,zero
811160b4:	1d000017 	ldw	r20,0(r3)
811160b8:	18c00104 	addi	r3,r3,4
811160bc:	d8c02d15 	stw	r3,180(sp)
811160c0:	003f9c06 	br	81115f34 <__reset+0xfb0f5f34>
811160c4:	94800054 	ori	r18,r18,1
811160c8:	bc400007 	ldb	r17,0(r23)
811160cc:	003d3306 	br	8111559c <__reset+0xfb0f559c>
811160d0:	38803fcc 	andi	r2,r7,255
811160d4:	1080201c 	xori	r2,r2,128
811160d8:	10bfe004 	addi	r2,r2,-128
811160dc:	1002971e 	bne	r2,zero,81116b3c <___svfprintf_internal_r+0x16f8>
811160e0:	00c00044 	movi	r3,1
811160e4:	01c00804 	movi	r7,32
811160e8:	bc400007 	ldb	r17,0(r23)
811160ec:	003d2b06 	br	8111559c <__reset+0xfb0f559c>
811160f0:	18c03fcc 	andi	r3,r3,255
811160f4:	183e2326 	beq	r3,zero,81115984 <__reset+0xfb0f5984>
811160f8:	d9c02785 	stb	r7,158(sp)
811160fc:	003e2106 	br	81115984 <__reset+0xfb0f5984>
81116100:	bc400007 	ldb	r17,0(r23)
81116104:	8a430426 	beq	r17,r9,81116d18 <___svfprintf_internal_r+0x18d4>
81116108:	94800414 	ori	r18,r18,16
8111610c:	003d2306 	br	8111559c <__reset+0xfb0f559c>
81116110:	18c03fcc 	andi	r3,r3,255
81116114:	18053f1e 	bne	r3,zero,81117614 <___svfprintf_internal_r+0x21d0>
81116118:	9080080c 	andi	r2,r18,32
8111611c:	10028926 	beq	r2,zero,81116b44 <___svfprintf_internal_r+0x1700>
81116120:	d9402d17 	ldw	r5,180(sp)
81116124:	d9002f17 	ldw	r4,188(sp)
81116128:	28800017 	ldw	r2,0(r5)
8111612c:	2007d7fa 	srai	r3,r4,31
81116130:	29400104 	addi	r5,r5,4
81116134:	d9402d15 	stw	r5,180(sp)
81116138:	11000015 	stw	r4,0(r2)
8111613c:	10c00115 	stw	r3,4(r2)
81116140:	003ced06 	br	811154f8 <__reset+0xfb0f54f8>
81116144:	94801014 	ori	r18,r18,64
81116148:	bc400007 	ldb	r17,0(r23)
8111614c:	003d1306 	br	8111559c <__reset+0xfb0f559c>
81116150:	01204534 	movhi	r4,33044
81116154:	21078704 	addi	r4,r4,7708
81116158:	0039883a 	mov	fp,zero
8111615c:	d9003a15 	stw	r4,232(sp)
81116160:	04401e04 	movi	r17,120
81116164:	003f8206 	br	81115f70 <__reset+0xfb0f5f70>
81116168:	18c03fcc 	andi	r3,r3,255
8111616c:	1805221e 	bne	r3,zero,811175f8 <___svfprintf_internal_r+0x21b4>
81116170:	883d9526 	beq	r17,zero,811157c8 <__reset+0xfb0f57c8>
81116174:	00c00044 	movi	r3,1
81116178:	d8c02a15 	stw	r3,168(sp)
8111617c:	dc401405 	stb	r17,80(sp)
81116180:	d8002785 	stb	zero,158(sp)
81116184:	003f9406 	br	81115fd8 <__reset+0xfb0f5fd8>
81116188:	01204534 	movhi	r4,33044
8111618c:	21078704 	addi	r4,r4,7708
81116190:	d9003a15 	stw	r4,232(sp)
81116194:	d8c02d15 	stw	r3,180(sp)
81116198:	1025883a 	mov	r18,r2
8111619c:	04401e04 	movi	r17,120
811161a0:	a584b03a 	or	r2,r20,r22
811161a4:	1000fa1e 	bne	r2,zero,81116590 <___svfprintf_internal_r+0x114c>
811161a8:	0039883a 	mov	fp,zero
811161ac:	00800084 	movi	r2,2
811161b0:	10803fcc 	andi	r2,r2,255
811161b4:	00c00044 	movi	r3,1
811161b8:	10c21626 	beq	r2,r3,81116a14 <___svfprintf_internal_r+0x15d0>
811161bc:	00c00084 	movi	r3,2
811161c0:	10fe301e 	bne	r2,r3,81115a84 <__reset+0xfb0f5a84>
811161c4:	003d7606 	br	811157a0 <__reset+0xfb0f57a0>
811161c8:	d8c02017 	ldw	r3,128(sp)
811161cc:	003e9506 	br	81115c24 <__reset+0xfb0f5c24>
811161d0:	00801944 	movi	r2,101
811161d4:	14407c0e 	bge	r2,r17,811163c8 <___svfprintf_internal_r+0xf84>
811161d8:	d9003617 	ldw	r4,216(sp)
811161dc:	d9403717 	ldw	r5,220(sp)
811161e0:	000d883a 	mov	r6,zero
811161e4:	000f883a 	mov	r7,zero
811161e8:	d8c03d15 	stw	r3,244(sp)
811161ec:	da003e15 	stw	r8,248(sp)
811161f0:	112805c0 	call	8112805c <__eqdf2>
811161f4:	d8c03d17 	ldw	r3,244(sp)
811161f8:	da003e17 	ldw	r8,248(sp)
811161fc:	1000f51e 	bne	r2,zero,811165d4 <___svfprintf_internal_r+0x1190>
81116200:	d8801f17 	ldw	r2,124(sp)
81116204:	01204534 	movhi	r4,33044
81116208:	21078e04 	addi	r4,r4,7736
8111620c:	18c00044 	addi	r3,r3,1
81116210:	10800044 	addi	r2,r2,1
81116214:	41000015 	stw	r4,0(r8)
81116218:	01000044 	movi	r4,1
8111621c:	41000115 	stw	r4,4(r8)
81116220:	d8c02015 	stw	r3,128(sp)
81116224:	d8801f15 	stw	r2,124(sp)
81116228:	010001c4 	movi	r4,7
8111622c:	20826616 	blt	r4,r2,81116bc8 <___svfprintf_internal_r+0x1784>
81116230:	42000204 	addi	r8,r8,8
81116234:	d8802617 	ldw	r2,152(sp)
81116238:	d9403317 	ldw	r5,204(sp)
8111623c:	11400216 	blt	r2,r5,81116248 <___svfprintf_internal_r+0xe04>
81116240:	9080004c 	andi	r2,r18,1
81116244:	103ed526 	beq	r2,zero,81115d9c <__reset+0xfb0f5d9c>
81116248:	d8803817 	ldw	r2,224(sp)
8111624c:	d9003417 	ldw	r4,208(sp)
81116250:	d9403817 	ldw	r5,224(sp)
81116254:	1887883a 	add	r3,r3,r2
81116258:	d8801f17 	ldw	r2,124(sp)
8111625c:	41000015 	stw	r4,0(r8)
81116260:	41400115 	stw	r5,4(r8)
81116264:	10800044 	addi	r2,r2,1
81116268:	d8c02015 	stw	r3,128(sp)
8111626c:	d8801f15 	stw	r2,124(sp)
81116270:	010001c4 	movi	r4,7
81116274:	2082af16 	blt	r4,r2,81116d34 <___svfprintf_internal_r+0x18f0>
81116278:	42000204 	addi	r8,r8,8
8111627c:	d8803317 	ldw	r2,204(sp)
81116280:	143fffc4 	addi	r16,r2,-1
81116284:	043ec50e 	bge	zero,r16,81115d9c <__reset+0xfb0f5d9c>
81116288:	04400404 	movi	r17,16
8111628c:	d8801f17 	ldw	r2,124(sp)
81116290:	8c00860e 	bge	r17,r16,811164ac <___svfprintf_internal_r+0x1068>
81116294:	01604534 	movhi	r5,33044
81116298:	29478e84 	addi	r5,r5,7738
8111629c:	d9402b15 	stw	r5,172(sp)
811162a0:	058001c4 	movi	r22,7
811162a4:	dd002c17 	ldw	r20,176(sp)
811162a8:	00000306 	br	811162b8 <___svfprintf_internal_r+0xe74>
811162ac:	42000204 	addi	r8,r8,8
811162b0:	843ffc04 	addi	r16,r16,-16
811162b4:	8c00800e 	bge	r17,r16,811164b8 <___svfprintf_internal_r+0x1074>
811162b8:	18c00404 	addi	r3,r3,16
811162bc:	10800044 	addi	r2,r2,1
811162c0:	45400015 	stw	r21,0(r8)
811162c4:	44400115 	stw	r17,4(r8)
811162c8:	d8c02015 	stw	r3,128(sp)
811162cc:	d8801f15 	stw	r2,124(sp)
811162d0:	b0bff60e 	bge	r22,r2,811162ac <__reset+0xfb0f62ac>
811162d4:	d9801e04 	addi	r6,sp,120
811162d8:	a00b883a 	mov	r5,r20
811162dc:	9809883a 	mov	r4,r19
811162e0:	11220640 	call	81122064 <__ssprint_r>
811162e4:	103d3e1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811162e8:	d8c02017 	ldw	r3,128(sp)
811162ec:	d8801f17 	ldw	r2,124(sp)
811162f0:	da000404 	addi	r8,sp,16
811162f4:	003fee06 	br	811162b0 <__reset+0xfb0f62b0>
811162f8:	d9403117 	ldw	r5,196(sp)
811162fc:	d8802a17 	ldw	r2,168(sp)
81116300:	28adc83a 	sub	r22,r5,r2
81116304:	05be650e 	bge	zero,r22,81115c9c <__reset+0xfb0f5c9c>
81116308:	07000404 	movi	fp,16
8111630c:	d8801f17 	ldw	r2,124(sp)
81116310:	e583a20e 	bge	fp,r22,8111719c <___svfprintf_internal_r+0x1d58>
81116314:	01604534 	movhi	r5,33044
81116318:	29478e84 	addi	r5,r5,7738
8111631c:	dc403015 	stw	r17,192(sp)
81116320:	d9402b15 	stw	r5,172(sp)
81116324:	b023883a 	mov	r17,r22
81116328:	050001c4 	movi	r20,7
8111632c:	902d883a 	mov	r22,r18
81116330:	8025883a 	mov	r18,r16
81116334:	dc002c17 	ldw	r16,176(sp)
81116338:	00000306 	br	81116348 <___svfprintf_internal_r+0xf04>
8111633c:	8c7ffc04 	addi	r17,r17,-16
81116340:	42000204 	addi	r8,r8,8
81116344:	e440110e 	bge	fp,r17,8111638c <___svfprintf_internal_r+0xf48>
81116348:	18c00404 	addi	r3,r3,16
8111634c:	10800044 	addi	r2,r2,1
81116350:	45400015 	stw	r21,0(r8)
81116354:	47000115 	stw	fp,4(r8)
81116358:	d8c02015 	stw	r3,128(sp)
8111635c:	d8801f15 	stw	r2,124(sp)
81116360:	a0bff60e 	bge	r20,r2,8111633c <__reset+0xfb0f633c>
81116364:	d9801e04 	addi	r6,sp,120
81116368:	800b883a 	mov	r5,r16
8111636c:	9809883a 	mov	r4,r19
81116370:	11220640 	call	81122064 <__ssprint_r>
81116374:	103d1a1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116378:	8c7ffc04 	addi	r17,r17,-16
8111637c:	d8c02017 	ldw	r3,128(sp)
81116380:	d8801f17 	ldw	r2,124(sp)
81116384:	da000404 	addi	r8,sp,16
81116388:	e47fef16 	blt	fp,r17,81116348 <__reset+0xfb0f6348>
8111638c:	9021883a 	mov	r16,r18
81116390:	b025883a 	mov	r18,r22
81116394:	882d883a 	mov	r22,r17
81116398:	dc403017 	ldw	r17,192(sp)
8111639c:	d9002b17 	ldw	r4,172(sp)
811163a0:	1d87883a 	add	r3,r3,r22
811163a4:	10800044 	addi	r2,r2,1
811163a8:	41000015 	stw	r4,0(r8)
811163ac:	45800115 	stw	r22,4(r8)
811163b0:	d8c02015 	stw	r3,128(sp)
811163b4:	d8801f15 	stw	r2,124(sp)
811163b8:	010001c4 	movi	r4,7
811163bc:	20819a16 	blt	r4,r2,81116a28 <___svfprintf_internal_r+0x15e4>
811163c0:	42000204 	addi	r8,r8,8
811163c4:	003e3506 	br	81115c9c <__reset+0xfb0f5c9c>
811163c8:	d9403317 	ldw	r5,204(sp)
811163cc:	00800044 	movi	r2,1
811163d0:	18c00044 	addi	r3,r3,1
811163d4:	1141710e 	bge	r2,r5,8111699c <___svfprintf_internal_r+0x1558>
811163d8:	dc401f17 	ldw	r17,124(sp)
811163dc:	00800044 	movi	r2,1
811163e0:	40800115 	stw	r2,4(r8)
811163e4:	8c400044 	addi	r17,r17,1
811163e8:	44000015 	stw	r16,0(r8)
811163ec:	d8c02015 	stw	r3,128(sp)
811163f0:	dc401f15 	stw	r17,124(sp)
811163f4:	008001c4 	movi	r2,7
811163f8:	14417416 	blt	r2,r17,811169cc <___svfprintf_internal_r+0x1588>
811163fc:	42000204 	addi	r8,r8,8
81116400:	d8803817 	ldw	r2,224(sp)
81116404:	d9003417 	ldw	r4,208(sp)
81116408:	8c400044 	addi	r17,r17,1
8111640c:	10c7883a 	add	r3,r2,r3
81116410:	40800115 	stw	r2,4(r8)
81116414:	41000015 	stw	r4,0(r8)
81116418:	d8c02015 	stw	r3,128(sp)
8111641c:	dc401f15 	stw	r17,124(sp)
81116420:	008001c4 	movi	r2,7
81116424:	14417216 	blt	r2,r17,811169f0 <___svfprintf_internal_r+0x15ac>
81116428:	45800204 	addi	r22,r8,8
8111642c:	d9003617 	ldw	r4,216(sp)
81116430:	d9403717 	ldw	r5,220(sp)
81116434:	000d883a 	mov	r6,zero
81116438:	000f883a 	mov	r7,zero
8111643c:	d8c03d15 	stw	r3,244(sp)
81116440:	112805c0 	call	8112805c <__eqdf2>
81116444:	d8c03d17 	ldw	r3,244(sp)
81116448:	1000b326 	beq	r2,zero,81116718 <___svfprintf_internal_r+0x12d4>
8111644c:	d9403317 	ldw	r5,204(sp)
81116450:	84000044 	addi	r16,r16,1
81116454:	8c400044 	addi	r17,r17,1
81116458:	28bfffc4 	addi	r2,r5,-1
8111645c:	1887883a 	add	r3,r3,r2
81116460:	b0800115 	stw	r2,4(r22)
81116464:	b4000015 	stw	r16,0(r22)
81116468:	d8c02015 	stw	r3,128(sp)
8111646c:	dc401f15 	stw	r17,124(sp)
81116470:	008001c4 	movi	r2,7
81116474:	1440d216 	blt	r2,r17,811167c0 <___svfprintf_internal_r+0x137c>
81116478:	b5800204 	addi	r22,r22,8
8111647c:	d9003b17 	ldw	r4,236(sp)
81116480:	df0022c4 	addi	fp,sp,139
81116484:	8c400044 	addi	r17,r17,1
81116488:	20c7883a 	add	r3,r4,r3
8111648c:	b7000015 	stw	fp,0(r22)
81116490:	b1000115 	stw	r4,4(r22)
81116494:	d8c02015 	stw	r3,128(sp)
81116498:	dc401f15 	stw	r17,124(sp)
8111649c:	008001c4 	movi	r2,7
811164a0:	14400e16 	blt	r2,r17,811164dc <___svfprintf_internal_r+0x1098>
811164a4:	b2000204 	addi	r8,r22,8
811164a8:	003e3c06 	br	81115d9c <__reset+0xfb0f5d9c>
811164ac:	01204534 	movhi	r4,33044
811164b0:	21078e84 	addi	r4,r4,7738
811164b4:	d9002b15 	stw	r4,172(sp)
811164b8:	d9002b17 	ldw	r4,172(sp)
811164bc:	1c07883a 	add	r3,r3,r16
811164c0:	44000115 	stw	r16,4(r8)
811164c4:	41000015 	stw	r4,0(r8)
811164c8:	10800044 	addi	r2,r2,1
811164cc:	d8c02015 	stw	r3,128(sp)
811164d0:	d8801f15 	stw	r2,124(sp)
811164d4:	010001c4 	movi	r4,7
811164d8:	20be2f0e 	bge	r4,r2,81115d98 <__reset+0xfb0f5d98>
811164dc:	d9402c17 	ldw	r5,176(sp)
811164e0:	d9801e04 	addi	r6,sp,120
811164e4:	9809883a 	mov	r4,r19
811164e8:	11220640 	call	81122064 <__ssprint_r>
811164ec:	103cbc1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811164f0:	d8c02017 	ldw	r3,128(sp)
811164f4:	da000404 	addi	r8,sp,16
811164f8:	003e2806 	br	81115d9c <__reset+0xfb0f5d9c>
811164fc:	d9402c17 	ldw	r5,176(sp)
81116500:	d9801e04 	addi	r6,sp,120
81116504:	9809883a 	mov	r4,r19
81116508:	11220640 	call	81122064 <__ssprint_r>
8111650c:	103e5f26 	beq	r2,zero,81115e8c <__reset+0xfb0f5e8c>
81116510:	003cb306 	br	811157e0 <__reset+0xfb0f57e0>
81116514:	d9402c17 	ldw	r5,176(sp)
81116518:	d9801e04 	addi	r6,sp,120
8111651c:	9809883a 	mov	r4,r19
81116520:	11220640 	call	81122064 <__ssprint_r>
81116524:	103cae1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116528:	d8c02017 	ldw	r3,128(sp)
8111652c:	da000404 	addi	r8,sp,16
81116530:	003e0d06 	br	81115d68 <__reset+0xfb0f5d68>
81116534:	d9402c17 	ldw	r5,176(sp)
81116538:	d9801e04 	addi	r6,sp,120
8111653c:	9809883a 	mov	r4,r19
81116540:	11220640 	call	81122064 <__ssprint_r>
81116544:	103ca61e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116548:	d8c02017 	ldw	r3,128(sp)
8111654c:	da000404 	addi	r8,sp,16
81116550:	003dc106 	br	81115c58 <__reset+0xfb0f5c58>
81116554:	d9402c17 	ldw	r5,176(sp)
81116558:	d9801e04 	addi	r6,sp,120
8111655c:	9809883a 	mov	r4,r19
81116560:	11220640 	call	81122064 <__ssprint_r>
81116564:	103c9e1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116568:	d8c02017 	ldw	r3,128(sp)
8111656c:	da000404 	addi	r8,sp,16
81116570:	003dc706 	br	81115c90 <__reset+0xfb0f5c90>
81116574:	d8802917 	ldw	r2,164(sp)
81116578:	d8002785 	stb	zero,158(sp)
8111657c:	103f0816 	blt	r2,zero,811161a0 <__reset+0xfb0f61a0>
81116580:	00ffdfc4 	movi	r3,-129
81116584:	a584b03a 	or	r2,r20,r22
81116588:	90e4703a 	and	r18,r18,r3
8111658c:	103c8126 	beq	r2,zero,81115794 <__reset+0xfb0f5794>
81116590:	0039883a 	mov	fp,zero
81116594:	003e7606 	br	81115f70 <__reset+0xfb0f5f70>
81116598:	9080040c 	andi	r2,r18,16
8111659c:	10013d26 	beq	r2,zero,81116a94 <___svfprintf_internal_r+0x1650>
811165a0:	d9002d17 	ldw	r4,180(sp)
811165a4:	d9402917 	ldw	r5,164(sp)
811165a8:	d8002785 	stb	zero,158(sp)
811165ac:	20800104 	addi	r2,r4,4
811165b0:	25000017 	ldw	r20,0(r4)
811165b4:	002d883a 	mov	r22,zero
811165b8:	28013f16 	blt	r5,zero,81116ab8 <___svfprintf_internal_r+0x1674>
811165bc:	00ffdfc4 	movi	r3,-129
811165c0:	d8802d15 	stw	r2,180(sp)
811165c4:	90e4703a 	and	r18,r18,r3
811165c8:	a03d2b26 	beq	r20,zero,81115a78 <__reset+0xfb0f5a78>
811165cc:	0039883a 	mov	fp,zero
811165d0:	003d2e06 	br	81115a8c <__reset+0xfb0f5a8c>
811165d4:	dc402617 	ldw	r17,152(sp)
811165d8:	0441830e 	bge	zero,r17,81116be8 <___svfprintf_internal_r+0x17a4>
811165dc:	dc403217 	ldw	r17,200(sp)
811165e0:	d8803317 	ldw	r2,204(sp)
811165e4:	1440010e 	bge	r2,r17,811165ec <___svfprintf_internal_r+0x11a8>
811165e8:	1023883a 	mov	r17,r2
811165ec:	04400a0e 	bge	zero,r17,81116618 <___svfprintf_internal_r+0x11d4>
811165f0:	d8801f17 	ldw	r2,124(sp)
811165f4:	1c47883a 	add	r3,r3,r17
811165f8:	44000015 	stw	r16,0(r8)
811165fc:	10800044 	addi	r2,r2,1
81116600:	44400115 	stw	r17,4(r8)
81116604:	d8c02015 	stw	r3,128(sp)
81116608:	d8801f15 	stw	r2,124(sp)
8111660c:	010001c4 	movi	r4,7
81116610:	20827516 	blt	r4,r2,81116fe8 <___svfprintf_internal_r+0x1ba4>
81116614:	42000204 	addi	r8,r8,8
81116618:	88027b16 	blt	r17,zero,81117008 <___svfprintf_internal_r+0x1bc4>
8111661c:	d9003217 	ldw	r4,200(sp)
81116620:	2463c83a 	sub	r17,r4,r17
81116624:	0440990e 	bge	zero,r17,8111688c <___svfprintf_internal_r+0x1448>
81116628:	05800404 	movi	r22,16
8111662c:	d8801f17 	ldw	r2,124(sp)
81116630:	b441530e 	bge	r22,r17,81116b80 <___svfprintf_internal_r+0x173c>
81116634:	01204534 	movhi	r4,33044
81116638:	21078e84 	addi	r4,r4,7738
8111663c:	d9002b15 	stw	r4,172(sp)
81116640:	070001c4 	movi	fp,7
81116644:	dd002c17 	ldw	r20,176(sp)
81116648:	00000306 	br	81116658 <___svfprintf_internal_r+0x1214>
8111664c:	42000204 	addi	r8,r8,8
81116650:	8c7ffc04 	addi	r17,r17,-16
81116654:	b4414d0e 	bge	r22,r17,81116b8c <___svfprintf_internal_r+0x1748>
81116658:	18c00404 	addi	r3,r3,16
8111665c:	10800044 	addi	r2,r2,1
81116660:	45400015 	stw	r21,0(r8)
81116664:	45800115 	stw	r22,4(r8)
81116668:	d8c02015 	stw	r3,128(sp)
8111666c:	d8801f15 	stw	r2,124(sp)
81116670:	e0bff60e 	bge	fp,r2,8111664c <__reset+0xfb0f664c>
81116674:	d9801e04 	addi	r6,sp,120
81116678:	a00b883a 	mov	r5,r20
8111667c:	9809883a 	mov	r4,r19
81116680:	11220640 	call	81122064 <__ssprint_r>
81116684:	103c561e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116688:	d8c02017 	ldw	r3,128(sp)
8111668c:	d8801f17 	ldw	r2,124(sp)
81116690:	da000404 	addi	r8,sp,16
81116694:	003fee06 	br	81116650 <__reset+0xfb0f6650>
81116698:	d9402c17 	ldw	r5,176(sp)
8111669c:	d9801e04 	addi	r6,sp,120
811166a0:	9809883a 	mov	r4,r19
811166a4:	11220640 	call	81122064 <__ssprint_r>
811166a8:	103c4d1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811166ac:	d8c02017 	ldw	r3,128(sp)
811166b0:	df002787 	ldb	fp,158(sp)
811166b4:	da000404 	addi	r8,sp,16
811166b8:	003d5a06 	br	81115c24 <__reset+0xfb0f5c24>
811166bc:	9080040c 	andi	r2,r18,16
811166c0:	10005c26 	beq	r2,zero,81116834 <___svfprintf_internal_r+0x13f0>
811166c4:	d9402d17 	ldw	r5,180(sp)
811166c8:	d8c02917 	ldw	r3,164(sp)
811166cc:	d8002785 	stb	zero,158(sp)
811166d0:	28800104 	addi	r2,r5,4
811166d4:	2d000017 	ldw	r20,0(r5)
811166d8:	002d883a 	mov	r22,zero
811166dc:	18005e16 	blt	r3,zero,81116858 <___svfprintf_internal_r+0x1414>
811166e0:	00ffdfc4 	movi	r3,-129
811166e4:	d8802d15 	stw	r2,180(sp)
811166e8:	90e4703a 	and	r18,r18,r3
811166ec:	0039883a 	mov	fp,zero
811166f0:	a03dfe26 	beq	r20,zero,81115eec <__reset+0xfb0f5eec>
811166f4:	00800244 	movi	r2,9
811166f8:	153cb336 	bltu	r2,r20,811159c8 <__reset+0xfb0f59c8>
811166fc:	a5000c04 	addi	r20,r20,48
81116700:	dc001dc4 	addi	r16,sp,119
81116704:	dd001dc5 	stb	r20,119(sp)
81116708:	d8c02817 	ldw	r3,160(sp)
8111670c:	1c07c83a 	sub	r3,r3,r16
81116710:	d8c02e15 	stw	r3,184(sp)
81116714:	003cf506 	br	81115aec <__reset+0xfb0f5aec>
81116718:	d8803317 	ldw	r2,204(sp)
8111671c:	143fffc4 	addi	r16,r2,-1
81116720:	043f560e 	bge	zero,r16,8111647c <__reset+0xfb0f647c>
81116724:	07000404 	movi	fp,16
81116728:	e403530e 	bge	fp,r16,81117478 <___svfprintf_internal_r+0x2034>
8111672c:	01604534 	movhi	r5,33044
81116730:	29478e84 	addi	r5,r5,7738
81116734:	d9402b15 	stw	r5,172(sp)
81116738:	01c001c4 	movi	r7,7
8111673c:	dd002c17 	ldw	r20,176(sp)
81116740:	00000306 	br	81116750 <___svfprintf_internal_r+0x130c>
81116744:	843ffc04 	addi	r16,r16,-16
81116748:	b5800204 	addi	r22,r22,8
8111674c:	e400130e 	bge	fp,r16,8111679c <___svfprintf_internal_r+0x1358>
81116750:	18c00404 	addi	r3,r3,16
81116754:	8c400044 	addi	r17,r17,1
81116758:	b5400015 	stw	r21,0(r22)
8111675c:	b7000115 	stw	fp,4(r22)
81116760:	d8c02015 	stw	r3,128(sp)
81116764:	dc401f15 	stw	r17,124(sp)
81116768:	3c7ff60e 	bge	r7,r17,81116744 <__reset+0xfb0f6744>
8111676c:	d9801e04 	addi	r6,sp,120
81116770:	a00b883a 	mov	r5,r20
81116774:	9809883a 	mov	r4,r19
81116778:	d9c03d15 	stw	r7,244(sp)
8111677c:	11220640 	call	81122064 <__ssprint_r>
81116780:	d9c03d17 	ldw	r7,244(sp)
81116784:	103c161e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116788:	843ffc04 	addi	r16,r16,-16
8111678c:	d8c02017 	ldw	r3,128(sp)
81116790:	dc401f17 	ldw	r17,124(sp)
81116794:	dd800404 	addi	r22,sp,16
81116798:	e43fed16 	blt	fp,r16,81116750 <__reset+0xfb0f6750>
8111679c:	d8802b17 	ldw	r2,172(sp)
811167a0:	1c07883a 	add	r3,r3,r16
811167a4:	8c400044 	addi	r17,r17,1
811167a8:	b0800015 	stw	r2,0(r22)
811167ac:	b4000115 	stw	r16,4(r22)
811167b0:	d8c02015 	stw	r3,128(sp)
811167b4:	dc401f15 	stw	r17,124(sp)
811167b8:	008001c4 	movi	r2,7
811167bc:	147f2e0e 	bge	r2,r17,81116478 <__reset+0xfb0f6478>
811167c0:	d9402c17 	ldw	r5,176(sp)
811167c4:	d9801e04 	addi	r6,sp,120
811167c8:	9809883a 	mov	r4,r19
811167cc:	11220640 	call	81122064 <__ssprint_r>
811167d0:	103c031e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811167d4:	d8c02017 	ldw	r3,128(sp)
811167d8:	dc401f17 	ldw	r17,124(sp)
811167dc:	dd800404 	addi	r22,sp,16
811167e0:	003f2606 	br	8111647c <__reset+0xfb0f647c>
811167e4:	9080040c 	andi	r2,r18,16
811167e8:	1000c326 	beq	r2,zero,81116af8 <___svfprintf_internal_r+0x16b4>
811167ec:	d8802d17 	ldw	r2,180(sp)
811167f0:	15000017 	ldw	r20,0(r2)
811167f4:	10800104 	addi	r2,r2,4
811167f8:	d8802d15 	stw	r2,180(sp)
811167fc:	a02dd7fa 	srai	r22,r20,31
81116800:	b005883a 	mov	r2,r22
81116804:	103c680e 	bge	r2,zero,811159a8 <__reset+0xfb0f59a8>
81116808:	0529c83a 	sub	r20,zero,r20
8111680c:	a004c03a 	cmpne	r2,r20,zero
81116810:	05adc83a 	sub	r22,zero,r22
81116814:	b0adc83a 	sub	r22,r22,r2
81116818:	d8802917 	ldw	r2,164(sp)
8111681c:	07000b44 	movi	fp,45
81116820:	df002785 	stb	fp,158(sp)
81116824:	10022e16 	blt	r2,zero,811170e0 <___svfprintf_internal_r+0x1c9c>
81116828:	00bfdfc4 	movi	r2,-129
8111682c:	90a4703a 	and	r18,r18,r2
81116830:	003c6406 	br	811159c4 <__reset+0xfb0f59c4>
81116834:	9080100c 	andi	r2,r18,64
81116838:	d8002785 	stb	zero,158(sp)
8111683c:	10012526 	beq	r2,zero,81116cd4 <___svfprintf_internal_r+0x1890>
81116840:	d9002d17 	ldw	r4,180(sp)
81116844:	d9402917 	ldw	r5,164(sp)
81116848:	002d883a 	mov	r22,zero
8111684c:	20800104 	addi	r2,r4,4
81116850:	2500000b 	ldhu	r20,0(r4)
81116854:	283fa20e 	bge	r5,zero,811166e0 <__reset+0xfb0f66e0>
81116858:	d8802d15 	stw	r2,180(sp)
8111685c:	0039883a 	mov	fp,zero
81116860:	a584b03a 	or	r2,r20,r22
81116864:	103c571e 	bne	r2,zero,811159c4 <__reset+0xfb0f59c4>
81116868:	00800044 	movi	r2,1
8111686c:	003e5006 	br	811161b0 <__reset+0xfb0f61b0>
81116870:	d9402c17 	ldw	r5,176(sp)
81116874:	d9801e04 	addi	r6,sp,120
81116878:	9809883a 	mov	r4,r19
8111687c:	11220640 	call	81122064 <__ssprint_r>
81116880:	103bd71e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116884:	d8c02017 	ldw	r3,128(sp)
81116888:	da000404 	addi	r8,sp,16
8111688c:	d9003217 	ldw	r4,200(sp)
81116890:	d8802617 	ldw	r2,152(sp)
81116894:	d9403317 	ldw	r5,204(sp)
81116898:	8123883a 	add	r17,r16,r4
8111689c:	11400216 	blt	r2,r5,811168a8 <___svfprintf_internal_r+0x1464>
811168a0:	9100004c 	andi	r4,r18,1
811168a4:	20000d26 	beq	r4,zero,811168dc <___svfprintf_internal_r+0x1498>
811168a8:	d9003817 	ldw	r4,224(sp)
811168ac:	d9403417 	ldw	r5,208(sp)
811168b0:	1907883a 	add	r3,r3,r4
811168b4:	d9001f17 	ldw	r4,124(sp)
811168b8:	41400015 	stw	r5,0(r8)
811168bc:	d9403817 	ldw	r5,224(sp)
811168c0:	21000044 	addi	r4,r4,1
811168c4:	d8c02015 	stw	r3,128(sp)
811168c8:	41400115 	stw	r5,4(r8)
811168cc:	d9001f15 	stw	r4,124(sp)
811168d0:	014001c4 	movi	r5,7
811168d4:	2901dc16 	blt	r5,r4,81117048 <___svfprintf_internal_r+0x1c04>
811168d8:	42000204 	addi	r8,r8,8
811168dc:	d9003317 	ldw	r4,204(sp)
811168e0:	8121883a 	add	r16,r16,r4
811168e4:	2085c83a 	sub	r2,r4,r2
811168e8:	8461c83a 	sub	r16,r16,r17
811168ec:	1400010e 	bge	r2,r16,811168f4 <___svfprintf_internal_r+0x14b0>
811168f0:	1021883a 	mov	r16,r2
811168f4:	04000a0e 	bge	zero,r16,81116920 <___svfprintf_internal_r+0x14dc>
811168f8:	d9001f17 	ldw	r4,124(sp)
811168fc:	1c07883a 	add	r3,r3,r16
81116900:	44400015 	stw	r17,0(r8)
81116904:	21000044 	addi	r4,r4,1
81116908:	44000115 	stw	r16,4(r8)
8111690c:	d8c02015 	stw	r3,128(sp)
81116910:	d9001f15 	stw	r4,124(sp)
81116914:	014001c4 	movi	r5,7
81116918:	2901e616 	blt	r5,r4,811170b4 <___svfprintf_internal_r+0x1c70>
8111691c:	42000204 	addi	r8,r8,8
81116920:	8001f616 	blt	r16,zero,811170fc <___svfprintf_internal_r+0x1cb8>
81116924:	1421c83a 	sub	r16,r2,r16
81116928:	043d1c0e 	bge	zero,r16,81115d9c <__reset+0xfb0f5d9c>
8111692c:	04400404 	movi	r17,16
81116930:	d8801f17 	ldw	r2,124(sp)
81116934:	8c3edd0e 	bge	r17,r16,811164ac <__reset+0xfb0f64ac>
81116938:	01604534 	movhi	r5,33044
8111693c:	29478e84 	addi	r5,r5,7738
81116940:	d9402b15 	stw	r5,172(sp)
81116944:	058001c4 	movi	r22,7
81116948:	dd002c17 	ldw	r20,176(sp)
8111694c:	00000306 	br	8111695c <___svfprintf_internal_r+0x1518>
81116950:	42000204 	addi	r8,r8,8
81116954:	843ffc04 	addi	r16,r16,-16
81116958:	8c3ed70e 	bge	r17,r16,811164b8 <__reset+0xfb0f64b8>
8111695c:	18c00404 	addi	r3,r3,16
81116960:	10800044 	addi	r2,r2,1
81116964:	45400015 	stw	r21,0(r8)
81116968:	44400115 	stw	r17,4(r8)
8111696c:	d8c02015 	stw	r3,128(sp)
81116970:	d8801f15 	stw	r2,124(sp)
81116974:	b0bff60e 	bge	r22,r2,81116950 <__reset+0xfb0f6950>
81116978:	d9801e04 	addi	r6,sp,120
8111697c:	a00b883a 	mov	r5,r20
81116980:	9809883a 	mov	r4,r19
81116984:	11220640 	call	81122064 <__ssprint_r>
81116988:	103b951e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
8111698c:	d8c02017 	ldw	r3,128(sp)
81116990:	d8801f17 	ldw	r2,124(sp)
81116994:	da000404 	addi	r8,sp,16
81116998:	003fee06 	br	81116954 <__reset+0xfb0f6954>
8111699c:	9088703a 	and	r4,r18,r2
811169a0:	203e8d1e 	bne	r4,zero,811163d8 <__reset+0xfb0f63d8>
811169a4:	dc401f17 	ldw	r17,124(sp)
811169a8:	40800115 	stw	r2,4(r8)
811169ac:	44000015 	stw	r16,0(r8)
811169b0:	8c400044 	addi	r17,r17,1
811169b4:	d8c02015 	stw	r3,128(sp)
811169b8:	dc401f15 	stw	r17,124(sp)
811169bc:	008001c4 	movi	r2,7
811169c0:	147f7f16 	blt	r2,r17,811167c0 <__reset+0xfb0f67c0>
811169c4:	45800204 	addi	r22,r8,8
811169c8:	003eac06 	br	8111647c <__reset+0xfb0f647c>
811169cc:	d9402c17 	ldw	r5,176(sp)
811169d0:	d9801e04 	addi	r6,sp,120
811169d4:	9809883a 	mov	r4,r19
811169d8:	11220640 	call	81122064 <__ssprint_r>
811169dc:	103b801e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811169e0:	d8c02017 	ldw	r3,128(sp)
811169e4:	dc401f17 	ldw	r17,124(sp)
811169e8:	da000404 	addi	r8,sp,16
811169ec:	003e8406 	br	81116400 <__reset+0xfb0f6400>
811169f0:	d9402c17 	ldw	r5,176(sp)
811169f4:	d9801e04 	addi	r6,sp,120
811169f8:	9809883a 	mov	r4,r19
811169fc:	11220640 	call	81122064 <__ssprint_r>
81116a00:	103b771e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116a04:	d8c02017 	ldw	r3,128(sp)
81116a08:	dc401f17 	ldw	r17,124(sp)
81116a0c:	dd800404 	addi	r22,sp,16
81116a10:	003e8606 	br	8111642c <__reset+0xfb0f642c>
81116a14:	0029883a 	mov	r20,zero
81116a18:	a5000c04 	addi	r20,r20,48
81116a1c:	dc001dc4 	addi	r16,sp,119
81116a20:	dd001dc5 	stb	r20,119(sp)
81116a24:	003f3806 	br	81116708 <__reset+0xfb0f6708>
81116a28:	d9402c17 	ldw	r5,176(sp)
81116a2c:	d9801e04 	addi	r6,sp,120
81116a30:	9809883a 	mov	r4,r19
81116a34:	11220640 	call	81122064 <__ssprint_r>
81116a38:	103b691e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116a3c:	d8c02017 	ldw	r3,128(sp)
81116a40:	da000404 	addi	r8,sp,16
81116a44:	003c9506 	br	81115c9c <__reset+0xfb0f5c9c>
81116a48:	d9003617 	ldw	r4,216(sp)
81116a4c:	d9403717 	ldw	r5,220(sp)
81116a50:	da003e15 	stw	r8,248(sp)
81116a54:	111fe780 	call	8111fe78 <__fpclassifyd>
81116a58:	da003e17 	ldw	r8,248(sp)
81116a5c:	1000bd1e 	bne	r2,zero,81116d54 <___svfprintf_internal_r+0x1910>
81116a60:	008011c4 	movi	r2,71
81116a64:	14411e0e 	bge	r2,r17,81116ee0 <___svfprintf_internal_r+0x1a9c>
81116a68:	04204534 	movhi	r16,33044
81116a6c:	84078104 	addi	r16,r16,7684
81116a70:	00c000c4 	movi	r3,3
81116a74:	00bfdfc4 	movi	r2,-129
81116a78:	d8c02a15 	stw	r3,168(sp)
81116a7c:	90a4703a 	and	r18,r18,r2
81116a80:	df002783 	ldbu	fp,158(sp)
81116a84:	d8c02e15 	stw	r3,184(sp)
81116a88:	d8002915 	stw	zero,164(sp)
81116a8c:	d8003215 	stw	zero,200(sp)
81116a90:	003c1c06 	br	81115b04 <__reset+0xfb0f5b04>
81116a94:	9080100c 	andi	r2,r18,64
81116a98:	d8002785 	stb	zero,158(sp)
81116a9c:	10009426 	beq	r2,zero,81116cf0 <___svfprintf_internal_r+0x18ac>
81116aa0:	d8c02d17 	ldw	r3,180(sp)
81116aa4:	d9002917 	ldw	r4,164(sp)
81116aa8:	002d883a 	mov	r22,zero
81116aac:	18800104 	addi	r2,r3,4
81116ab0:	1d00000b 	ldhu	r20,0(r3)
81116ab4:	203ec10e 	bge	r4,zero,811165bc <__reset+0xfb0f65bc>
81116ab8:	a586b03a 	or	r3,r20,r22
81116abc:	d8802d15 	stw	r2,180(sp)
81116ac0:	183ec21e 	bne	r3,zero,811165cc <__reset+0xfb0f65cc>
81116ac4:	0039883a 	mov	fp,zero
81116ac8:	0005883a 	mov	r2,zero
81116acc:	003db806 	br	811161b0 <__reset+0xfb0f61b0>
81116ad0:	d8802d17 	ldw	r2,180(sp)
81116ad4:	d8c02d17 	ldw	r3,180(sp)
81116ad8:	d9002d17 	ldw	r4,180(sp)
81116adc:	10800017 	ldw	r2,0(r2)
81116ae0:	18c00117 	ldw	r3,4(r3)
81116ae4:	21000204 	addi	r4,r4,8
81116ae8:	d8803615 	stw	r2,216(sp)
81116aec:	d8c03715 	stw	r3,220(sp)
81116af0:	d9002d15 	stw	r4,180(sp)
81116af4:	003b8206 	br	81115900 <__reset+0xfb0f5900>
81116af8:	9080100c 	andi	r2,r18,64
81116afc:	10010726 	beq	r2,zero,81116f1c <___svfprintf_internal_r+0x1ad8>
81116b00:	d8c02d17 	ldw	r3,180(sp)
81116b04:	1d00000f 	ldh	r20,0(r3)
81116b08:	18c00104 	addi	r3,r3,4
81116b0c:	d8c02d15 	stw	r3,180(sp)
81116b10:	a02dd7fa 	srai	r22,r20,31
81116b14:	b005883a 	mov	r2,r22
81116b18:	003ba206 	br	811159a4 <__reset+0xfb0f59a4>
81116b1c:	9080100c 	andi	r2,r18,64
81116b20:	10010526 	beq	r2,zero,81116f38 <___svfprintf_internal_r+0x1af4>
81116b24:	d9002d17 	ldw	r4,180(sp)
81116b28:	002d883a 	mov	r22,zero
81116b2c:	2500000b 	ldhu	r20,0(r4)
81116b30:	21000104 	addi	r4,r4,4
81116b34:	d9002d15 	stw	r4,180(sp)
81116b38:	003cfe06 	br	81115f34 <__reset+0xfb0f5f34>
81116b3c:	bc400007 	ldb	r17,0(r23)
81116b40:	003a9606 	br	8111559c <__reset+0xfb0f559c>
81116b44:	9080040c 	andi	r2,r18,16
81116b48:	10010126 	beq	r2,zero,81116f50 <___svfprintf_internal_r+0x1b0c>
81116b4c:	d9402d17 	ldw	r5,180(sp)
81116b50:	d8c02f17 	ldw	r3,188(sp)
81116b54:	28800017 	ldw	r2,0(r5)
81116b58:	29400104 	addi	r5,r5,4
81116b5c:	d9402d15 	stw	r5,180(sp)
81116b60:	10c00015 	stw	r3,0(r2)
81116b64:	003a6406 	br	811154f8 <__reset+0xfb0f54f8>
81116b68:	d9002917 	ldw	r4,164(sp)
81116b6c:	d8002785 	stb	zero,158(sp)
81116b70:	203d8d16 	blt	r4,zero,811161a8 <__reset+0xfb0f61a8>
81116b74:	00bfdfc4 	movi	r2,-129
81116b78:	90a4703a 	and	r18,r18,r2
81116b7c:	003b0506 	br	81115794 <__reset+0xfb0f5794>
81116b80:	01604534 	movhi	r5,33044
81116b84:	29478e84 	addi	r5,r5,7738
81116b88:	d9402b15 	stw	r5,172(sp)
81116b8c:	d9402b17 	ldw	r5,172(sp)
81116b90:	1c47883a 	add	r3,r3,r17
81116b94:	10800044 	addi	r2,r2,1
81116b98:	41400015 	stw	r5,0(r8)
81116b9c:	44400115 	stw	r17,4(r8)
81116ba0:	d8c02015 	stw	r3,128(sp)
81116ba4:	d8801f15 	stw	r2,124(sp)
81116ba8:	010001c4 	movi	r4,7
81116bac:	20bf3016 	blt	r4,r2,81116870 <__reset+0xfb0f6870>
81116bb0:	42000204 	addi	r8,r8,8
81116bb4:	003f3506 	br	8111688c <__reset+0xfb0f688c>
81116bb8:	01204534 	movhi	r4,33044
81116bbc:	21078e84 	addi	r4,r4,7738
81116bc0:	d9002b15 	stw	r4,172(sp)
81116bc4:	003c5e06 	br	81115d40 <__reset+0xfb0f5d40>
81116bc8:	d9402c17 	ldw	r5,176(sp)
81116bcc:	d9801e04 	addi	r6,sp,120
81116bd0:	9809883a 	mov	r4,r19
81116bd4:	11220640 	call	81122064 <__ssprint_r>
81116bd8:	103b011e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116bdc:	d8c02017 	ldw	r3,128(sp)
81116be0:	da000404 	addi	r8,sp,16
81116be4:	003d9306 	br	81116234 <__reset+0xfb0f6234>
81116be8:	d8801f17 	ldw	r2,124(sp)
81116bec:	01604534 	movhi	r5,33044
81116bf0:	01000044 	movi	r4,1
81116bf4:	18c00044 	addi	r3,r3,1
81116bf8:	10800044 	addi	r2,r2,1
81116bfc:	29478e04 	addi	r5,r5,7736
81116c00:	41000115 	stw	r4,4(r8)
81116c04:	41400015 	stw	r5,0(r8)
81116c08:	d8c02015 	stw	r3,128(sp)
81116c0c:	d8801f15 	stw	r2,124(sp)
81116c10:	010001c4 	movi	r4,7
81116c14:	2080b516 	blt	r4,r2,81116eec <___svfprintf_internal_r+0x1aa8>
81116c18:	42000204 	addi	r8,r8,8
81116c1c:	8800041e 	bne	r17,zero,81116c30 <___svfprintf_internal_r+0x17ec>
81116c20:	d8803317 	ldw	r2,204(sp)
81116c24:	1000021e 	bne	r2,zero,81116c30 <___svfprintf_internal_r+0x17ec>
81116c28:	9080004c 	andi	r2,r18,1
81116c2c:	103c5b26 	beq	r2,zero,81115d9c <__reset+0xfb0f5d9c>
81116c30:	d9003817 	ldw	r4,224(sp)
81116c34:	d8801f17 	ldw	r2,124(sp)
81116c38:	d9403417 	ldw	r5,208(sp)
81116c3c:	20c7883a 	add	r3,r4,r3
81116c40:	10800044 	addi	r2,r2,1
81116c44:	41000115 	stw	r4,4(r8)
81116c48:	41400015 	stw	r5,0(r8)
81116c4c:	d8c02015 	stw	r3,128(sp)
81116c50:	d8801f15 	stw	r2,124(sp)
81116c54:	010001c4 	movi	r4,7
81116c58:	20818016 	blt	r4,r2,8111725c <___svfprintf_internal_r+0x1e18>
81116c5c:	42000204 	addi	r8,r8,8
81116c60:	0463c83a 	sub	r17,zero,r17
81116c64:	0440cb0e 	bge	zero,r17,81116f94 <___svfprintf_internal_r+0x1b50>
81116c68:	05800404 	movi	r22,16
81116c6c:	b440e80e 	bge	r22,r17,81117010 <___svfprintf_internal_r+0x1bcc>
81116c70:	01604534 	movhi	r5,33044
81116c74:	29478e84 	addi	r5,r5,7738
81116c78:	d9402b15 	stw	r5,172(sp)
81116c7c:	070001c4 	movi	fp,7
81116c80:	dd002c17 	ldw	r20,176(sp)
81116c84:	00000306 	br	81116c94 <___svfprintf_internal_r+0x1850>
81116c88:	42000204 	addi	r8,r8,8
81116c8c:	8c7ffc04 	addi	r17,r17,-16
81116c90:	b440e20e 	bge	r22,r17,8111701c <___svfprintf_internal_r+0x1bd8>
81116c94:	18c00404 	addi	r3,r3,16
81116c98:	10800044 	addi	r2,r2,1
81116c9c:	45400015 	stw	r21,0(r8)
81116ca0:	45800115 	stw	r22,4(r8)
81116ca4:	d8c02015 	stw	r3,128(sp)
81116ca8:	d8801f15 	stw	r2,124(sp)
81116cac:	e0bff60e 	bge	fp,r2,81116c88 <__reset+0xfb0f6c88>
81116cb0:	d9801e04 	addi	r6,sp,120
81116cb4:	a00b883a 	mov	r5,r20
81116cb8:	9809883a 	mov	r4,r19
81116cbc:	11220640 	call	81122064 <__ssprint_r>
81116cc0:	103ac71e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116cc4:	d8c02017 	ldw	r3,128(sp)
81116cc8:	d8801f17 	ldw	r2,124(sp)
81116ccc:	da000404 	addi	r8,sp,16
81116cd0:	003fee06 	br	81116c8c <__reset+0xfb0f6c8c>
81116cd4:	d8c02d17 	ldw	r3,180(sp)
81116cd8:	d9002917 	ldw	r4,164(sp)
81116cdc:	002d883a 	mov	r22,zero
81116ce0:	18800104 	addi	r2,r3,4
81116ce4:	1d000017 	ldw	r20,0(r3)
81116ce8:	203e7d0e 	bge	r4,zero,811166e0 <__reset+0xfb0f66e0>
81116cec:	003eda06 	br	81116858 <__reset+0xfb0f6858>
81116cf0:	d9402d17 	ldw	r5,180(sp)
81116cf4:	d8c02917 	ldw	r3,164(sp)
81116cf8:	002d883a 	mov	r22,zero
81116cfc:	28800104 	addi	r2,r5,4
81116d00:	2d000017 	ldw	r20,0(r5)
81116d04:	183e2d0e 	bge	r3,zero,811165bc <__reset+0xfb0f65bc>
81116d08:	003f6b06 	br	81116ab8 <__reset+0xfb0f6ab8>
81116d0c:	d8c02d15 	stw	r3,180(sp)
81116d10:	0039883a 	mov	fp,zero
81116d14:	003ed206 	br	81116860 <__reset+0xfb0f6860>
81116d18:	bc400043 	ldbu	r17,1(r23)
81116d1c:	94800814 	ori	r18,r18,32
81116d20:	bdc00044 	addi	r23,r23,1
81116d24:	8c403fcc 	andi	r17,r17,255
81116d28:	8c40201c 	xori	r17,r17,128
81116d2c:	8c7fe004 	addi	r17,r17,-128
81116d30:	003a1a06 	br	8111559c <__reset+0xfb0f559c>
81116d34:	d9402c17 	ldw	r5,176(sp)
81116d38:	d9801e04 	addi	r6,sp,120
81116d3c:	9809883a 	mov	r4,r19
81116d40:	11220640 	call	81122064 <__ssprint_r>
81116d44:	103aa61e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116d48:	d8c02017 	ldw	r3,128(sp)
81116d4c:	da000404 	addi	r8,sp,16
81116d50:	003d4a06 	br	8111627c <__reset+0xfb0f627c>
81116d54:	d9002917 	ldw	r4,164(sp)
81116d58:	05bff7c4 	movi	r22,-33
81116d5c:	00bfffc4 	movi	r2,-1
81116d60:	8dac703a 	and	r22,r17,r22
81116d64:	20806a26 	beq	r4,r2,81116f10 <___svfprintf_internal_r+0x1acc>
81116d68:	008011c4 	movi	r2,71
81116d6c:	b0813726 	beq	r22,r2,8111724c <___svfprintf_internal_r+0x1e08>
81116d70:	d9003717 	ldw	r4,220(sp)
81116d74:	90c04014 	ori	r3,r18,256
81116d78:	d8c02b15 	stw	r3,172(sp)
81116d7c:	20015d16 	blt	r4,zero,811172f4 <___svfprintf_internal_r+0x1eb0>
81116d80:	dd003717 	ldw	r20,220(sp)
81116d84:	d8002a05 	stb	zero,168(sp)
81116d88:	00801984 	movi	r2,102
81116d8c:	88814026 	beq	r17,r2,81117290 <___svfprintf_internal_r+0x1e4c>
81116d90:	00801184 	movi	r2,70
81116d94:	88817126 	beq	r17,r2,8111735c <___svfprintf_internal_r+0x1f18>
81116d98:	00801144 	movi	r2,69
81116d9c:	b0816226 	beq	r22,r2,81117328 <___svfprintf_internal_r+0x1ee4>
81116da0:	d8c02917 	ldw	r3,164(sp)
81116da4:	d8802104 	addi	r2,sp,132
81116da8:	d8800315 	stw	r2,12(sp)
81116dac:	d9403617 	ldw	r5,216(sp)
81116db0:	d8802504 	addi	r2,sp,148
81116db4:	d8800215 	stw	r2,8(sp)
81116db8:	d8802604 	addi	r2,sp,152
81116dbc:	d8c00015 	stw	r3,0(sp)
81116dc0:	d8800115 	stw	r2,4(sp)
81116dc4:	01c00084 	movi	r7,2
81116dc8:	a00d883a 	mov	r6,r20
81116dcc:	9809883a 	mov	r4,r19
81116dd0:	d8c03d15 	stw	r3,244(sp)
81116dd4:	da003e15 	stw	r8,248(sp)
81116dd8:	111b7300 	call	8111b730 <_dtoa_r>
81116ddc:	1021883a 	mov	r16,r2
81116de0:	008019c4 	movi	r2,103
81116de4:	d8c03d17 	ldw	r3,244(sp)
81116de8:	da003e17 	ldw	r8,248(sp)
81116dec:	8880e726 	beq	r17,r2,8111718c <___svfprintf_internal_r+0x1d48>
81116df0:	008011c4 	movi	r2,71
81116df4:	8880d426 	beq	r17,r2,81117148 <___svfprintf_internal_r+0x1d04>
81116df8:	80f9883a 	add	fp,r16,r3
81116dfc:	d9003617 	ldw	r4,216(sp)
81116e00:	000d883a 	mov	r6,zero
81116e04:	000f883a 	mov	r7,zero
81116e08:	a00b883a 	mov	r5,r20
81116e0c:	da003e15 	stw	r8,248(sp)
81116e10:	112805c0 	call	8112805c <__eqdf2>
81116e14:	da003e17 	ldw	r8,248(sp)
81116e18:	1000e426 	beq	r2,zero,811171ac <___svfprintf_internal_r+0x1d68>
81116e1c:	d8802117 	ldw	r2,132(sp)
81116e20:	1700062e 	bgeu	r2,fp,81116e3c <___svfprintf_internal_r+0x19f8>
81116e24:	01000c04 	movi	r4,48
81116e28:	10c00044 	addi	r3,r2,1
81116e2c:	d8c02115 	stw	r3,132(sp)
81116e30:	11000005 	stb	r4,0(r2)
81116e34:	d8802117 	ldw	r2,132(sp)
81116e38:	173ffb36 	bltu	r2,fp,81116e28 <__reset+0xfb0f6e28>
81116e3c:	1405c83a 	sub	r2,r2,r16
81116e40:	d8803315 	stw	r2,204(sp)
81116e44:	008011c4 	movi	r2,71
81116e48:	b080c526 	beq	r22,r2,81117160 <___svfprintf_internal_r+0x1d1c>
81116e4c:	00801944 	movi	r2,101
81116e50:	1441d90e 	bge	r2,r17,811175b8 <___svfprintf_internal_r+0x2174>
81116e54:	d8c02617 	ldw	r3,152(sp)
81116e58:	00801984 	movi	r2,102
81116e5c:	d8c03215 	stw	r3,200(sp)
81116e60:	88813426 	beq	r17,r2,81117334 <___svfprintf_internal_r+0x1ef0>
81116e64:	d8c03217 	ldw	r3,200(sp)
81116e68:	d9003317 	ldw	r4,204(sp)
81116e6c:	19012516 	blt	r3,r4,81117304 <___svfprintf_internal_r+0x1ec0>
81116e70:	9480004c 	andi	r18,r18,1
81116e74:	9001841e 	bne	r18,zero,81117488 <___svfprintf_internal_r+0x2044>
81116e78:	1805883a 	mov	r2,r3
81116e7c:	1801cc16 	blt	r3,zero,811175b0 <___svfprintf_internal_r+0x216c>
81116e80:	d8c03217 	ldw	r3,200(sp)
81116e84:	044019c4 	movi	r17,103
81116e88:	d8c02e15 	stw	r3,184(sp)
81116e8c:	df002a07 	ldb	fp,168(sp)
81116e90:	e000a61e 	bne	fp,zero,8111712c <___svfprintf_internal_r+0x1ce8>
81116e94:	df002783 	ldbu	fp,158(sp)
81116e98:	d8802a15 	stw	r2,168(sp)
81116e9c:	dc802b17 	ldw	r18,172(sp)
81116ea0:	d8002915 	stw	zero,164(sp)
81116ea4:	003b1706 	br	81115b04 <__reset+0xfb0f5b04>
81116ea8:	04204534 	movhi	r16,33044
81116eac:	84077e04 	addi	r16,r16,7672
81116eb0:	003aa606 	br	8111594c <__reset+0xfb0f594c>
81116eb4:	d9003917 	ldw	r4,228(sp)
81116eb8:	04001004 	movi	r16,64
81116ebc:	800b883a 	mov	r5,r16
81116ec0:	1113de40 	call	81113de4 <_malloc_r>
81116ec4:	d9002c17 	ldw	r4,176(sp)
81116ec8:	20800015 	stw	r2,0(r4)
81116ecc:	20800415 	stw	r2,16(r4)
81116ed0:	1001cb26 	beq	r2,zero,81117600 <___svfprintf_internal_r+0x21bc>
81116ed4:	d8802c17 	ldw	r2,176(sp)
81116ed8:	14000515 	stw	r16,20(r2)
81116edc:	00397606 	br	811154b8 <__reset+0xfb0f54b8>
81116ee0:	04204534 	movhi	r16,33044
81116ee4:	84078004 	addi	r16,r16,7680
81116ee8:	003ee106 	br	81116a70 <__reset+0xfb0f6a70>
81116eec:	d9402c17 	ldw	r5,176(sp)
81116ef0:	d9801e04 	addi	r6,sp,120
81116ef4:	9809883a 	mov	r4,r19
81116ef8:	11220640 	call	81122064 <__ssprint_r>
81116efc:	103a381e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116f00:	dc402617 	ldw	r17,152(sp)
81116f04:	d8c02017 	ldw	r3,128(sp)
81116f08:	da000404 	addi	r8,sp,16
81116f0c:	003f4306 	br	81116c1c <__reset+0xfb0f6c1c>
81116f10:	01400184 	movi	r5,6
81116f14:	d9402915 	stw	r5,164(sp)
81116f18:	003f9506 	br	81116d70 <__reset+0xfb0f6d70>
81116f1c:	d9002d17 	ldw	r4,180(sp)
81116f20:	25000017 	ldw	r20,0(r4)
81116f24:	21000104 	addi	r4,r4,4
81116f28:	d9002d15 	stw	r4,180(sp)
81116f2c:	a02dd7fa 	srai	r22,r20,31
81116f30:	b005883a 	mov	r2,r22
81116f34:	003a9b06 	br	811159a4 <__reset+0xfb0f59a4>
81116f38:	d9402d17 	ldw	r5,180(sp)
81116f3c:	002d883a 	mov	r22,zero
81116f40:	2d000017 	ldw	r20,0(r5)
81116f44:	29400104 	addi	r5,r5,4
81116f48:	d9402d15 	stw	r5,180(sp)
81116f4c:	003bf906 	br	81115f34 <__reset+0xfb0f5f34>
81116f50:	9480100c 	andi	r18,r18,64
81116f54:	90006e26 	beq	r18,zero,81117110 <___svfprintf_internal_r+0x1ccc>
81116f58:	d9002d17 	ldw	r4,180(sp)
81116f5c:	d9402f17 	ldw	r5,188(sp)
81116f60:	20800017 	ldw	r2,0(r4)
81116f64:	21000104 	addi	r4,r4,4
81116f68:	d9002d15 	stw	r4,180(sp)
81116f6c:	1140000d 	sth	r5,0(r2)
81116f70:	00396106 	br	811154f8 <__reset+0xfb0f54f8>
81116f74:	d9402c17 	ldw	r5,176(sp)
81116f78:	d9801e04 	addi	r6,sp,120
81116f7c:	9809883a 	mov	r4,r19
81116f80:	11220640 	call	81122064 <__ssprint_r>
81116f84:	103a161e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116f88:	d8c02017 	ldw	r3,128(sp)
81116f8c:	d8801f17 	ldw	r2,124(sp)
81116f90:	da000404 	addi	r8,sp,16
81116f94:	d9403317 	ldw	r5,204(sp)
81116f98:	10800044 	addi	r2,r2,1
81116f9c:	44000015 	stw	r16,0(r8)
81116fa0:	28c7883a 	add	r3,r5,r3
81116fa4:	003b7706 	br	81115d84 <__reset+0xfb0f5d84>
81116fa8:	8009883a 	mov	r4,r16
81116fac:	da003e15 	stw	r8,248(sp)
81116fb0:	111510c0 	call	8111510c <strlen>
81116fb4:	d8802e15 	stw	r2,184(sp)
81116fb8:	da003e17 	ldw	r8,248(sp)
81116fbc:	103c280e 	bge	r2,zero,81116060 <__reset+0xfb0f6060>
81116fc0:	0005883a 	mov	r2,zero
81116fc4:	003c2606 	br	81116060 <__reset+0xfb0f6060>
81116fc8:	00bfffc4 	movi	r2,-1
81116fcc:	003a0906 	br	811157f4 <__reset+0xfb0f57f4>
81116fd0:	01204534 	movhi	r4,33044
81116fd4:	21079284 	addi	r4,r4,7754
81116fd8:	d9003515 	stw	r4,212(sp)
81116fdc:	003b0606 	br	81115bf8 <__reset+0xfb0f5bf8>
81116fe0:	013fffc4 	movi	r4,-1
81116fe4:	003a2706 	br	81115884 <__reset+0xfb0f5884>
81116fe8:	d9402c17 	ldw	r5,176(sp)
81116fec:	d9801e04 	addi	r6,sp,120
81116ff0:	9809883a 	mov	r4,r19
81116ff4:	11220640 	call	81122064 <__ssprint_r>
81116ff8:	1039f91e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81116ffc:	d8c02017 	ldw	r3,128(sp)
81117000:	da000404 	addi	r8,sp,16
81117004:	003d8406 	br	81116618 <__reset+0xfb0f6618>
81117008:	0023883a 	mov	r17,zero
8111700c:	003d8306 	br	8111661c <__reset+0xfb0f661c>
81117010:	01204534 	movhi	r4,33044
81117014:	21078e84 	addi	r4,r4,7738
81117018:	d9002b15 	stw	r4,172(sp)
8111701c:	d9002b17 	ldw	r4,172(sp)
81117020:	1c47883a 	add	r3,r3,r17
81117024:	10800044 	addi	r2,r2,1
81117028:	41000015 	stw	r4,0(r8)
8111702c:	44400115 	stw	r17,4(r8)
81117030:	d8c02015 	stw	r3,128(sp)
81117034:	d8801f15 	stw	r2,124(sp)
81117038:	010001c4 	movi	r4,7
8111703c:	20bfcd16 	blt	r4,r2,81116f74 <__reset+0xfb0f6f74>
81117040:	42000204 	addi	r8,r8,8
81117044:	003fd306 	br	81116f94 <__reset+0xfb0f6f94>
81117048:	d9402c17 	ldw	r5,176(sp)
8111704c:	d9801e04 	addi	r6,sp,120
81117050:	9809883a 	mov	r4,r19
81117054:	11220640 	call	81122064 <__ssprint_r>
81117058:	1039e11e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
8111705c:	d8802617 	ldw	r2,152(sp)
81117060:	d8c02017 	ldw	r3,128(sp)
81117064:	da000404 	addi	r8,sp,16
81117068:	003e1c06 	br	811168dc <__reset+0xfb0f68dc>
8111706c:	d8802917 	ldw	r2,164(sp)
81117070:	00c00184 	movi	r3,6
81117074:	1880012e 	bgeu	r3,r2,8111707c <___svfprintf_internal_r+0x1c38>
81117078:	1805883a 	mov	r2,r3
8111707c:	d8802e15 	stw	r2,184(sp)
81117080:	1000f316 	blt	r2,zero,81117450 <___svfprintf_internal_r+0x200c>
81117084:	04204534 	movhi	r16,33044
81117088:	d8802a15 	stw	r2,168(sp)
8111708c:	dd002d15 	stw	r20,180(sp)
81117090:	d8002915 	stw	zero,164(sp)
81117094:	d8003215 	stw	zero,200(sp)
81117098:	84078c04 	addi	r16,r16,7728
8111709c:	0039883a 	mov	fp,zero
811170a0:	003a9f06 	br	81115b20 <__reset+0xfb0f5b20>
811170a4:	01204534 	movhi	r4,33044
811170a8:	21079284 	addi	r4,r4,7754
811170ac:	d9003515 	stw	r4,212(sp)
811170b0:	003b5f06 	br	81115e30 <__reset+0xfb0f5e30>
811170b4:	d9402c17 	ldw	r5,176(sp)
811170b8:	d9801e04 	addi	r6,sp,120
811170bc:	9809883a 	mov	r4,r19
811170c0:	11220640 	call	81122064 <__ssprint_r>
811170c4:	1039c61e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
811170c8:	d8802617 	ldw	r2,152(sp)
811170cc:	d9403317 	ldw	r5,204(sp)
811170d0:	d8c02017 	ldw	r3,128(sp)
811170d4:	da000404 	addi	r8,sp,16
811170d8:	2885c83a 	sub	r2,r5,r2
811170dc:	003e1006 	br	81116920 <__reset+0xfb0f6920>
811170e0:	00800044 	movi	r2,1
811170e4:	10803fcc 	andi	r2,r2,255
811170e8:	00c00044 	movi	r3,1
811170ec:	10fa3526 	beq	r2,r3,811159c4 <__reset+0xfb0f59c4>
811170f0:	00c00084 	movi	r3,2
811170f4:	10fb9e26 	beq	r2,r3,81115f70 <__reset+0xfb0f5f70>
811170f8:	003a6406 	br	81115a8c <__reset+0xfb0f5a8c>
811170fc:	0021883a 	mov	r16,zero
81117100:	003e0806 	br	81116924 <__reset+0xfb0f6924>
81117104:	07000b44 	movi	fp,45
81117108:	df002785 	stb	fp,158(sp)
8111710c:	003a0b06 	br	8111593c <__reset+0xfb0f593c>
81117110:	d8c02d17 	ldw	r3,180(sp)
81117114:	d9002f17 	ldw	r4,188(sp)
81117118:	18800017 	ldw	r2,0(r3)
8111711c:	18c00104 	addi	r3,r3,4
81117120:	d8c02d15 	stw	r3,180(sp)
81117124:	11000015 	stw	r4,0(r2)
81117128:	0038f306 	br	811154f8 <__reset+0xfb0f54f8>
8111712c:	00c00b44 	movi	r3,45
81117130:	d8c02785 	stb	r3,158(sp)
81117134:	d8802a15 	stw	r2,168(sp)
81117138:	dc802b17 	ldw	r18,172(sp)
8111713c:	d8002915 	stw	zero,164(sp)
81117140:	07000b44 	movi	fp,45
81117144:	003a7306 	br	81115b14 <__reset+0xfb0f5b14>
81117148:	9080004c 	andi	r2,r18,1
8111714c:	1000941e 	bne	r2,zero,811173a0 <___svfprintf_internal_r+0x1f5c>
81117150:	d8802117 	ldw	r2,132(sp)
81117154:	1405c83a 	sub	r2,r2,r16
81117158:	d8803315 	stw	r2,204(sp)
8111715c:	b441161e 	bne	r22,r17,811175b8 <___svfprintf_internal_r+0x2174>
81117160:	dd802617 	ldw	r22,152(sp)
81117164:	00bfff44 	movi	r2,-3
81117168:	b0801a16 	blt	r22,r2,811171d4 <___svfprintf_internal_r+0x1d90>
8111716c:	d9402917 	ldw	r5,164(sp)
81117170:	2d801816 	blt	r5,r22,811171d4 <___svfprintf_internal_r+0x1d90>
81117174:	dd803215 	stw	r22,200(sp)
81117178:	003f3a06 	br	81116e64 <__reset+0xfb0f6e64>
8111717c:	1025883a 	mov	r18,r2
81117180:	0039883a 	mov	fp,zero
81117184:	00800084 	movi	r2,2
81117188:	003fd606 	br	811170e4 <__reset+0xfb0f70e4>
8111718c:	9080004c 	andi	r2,r18,1
81117190:	103f191e 	bne	r2,zero,81116df8 <__reset+0xfb0f6df8>
81117194:	d8802117 	ldw	r2,132(sp)
81117198:	003f2806 	br	81116e3c <__reset+0xfb0f6e3c>
8111719c:	01204534 	movhi	r4,33044
811171a0:	21078e84 	addi	r4,r4,7738
811171a4:	d9002b15 	stw	r4,172(sp)
811171a8:	003c7c06 	br	8111639c <__reset+0xfb0f639c>
811171ac:	e005883a 	mov	r2,fp
811171b0:	003f2206 	br	81116e3c <__reset+0xfb0f6e3c>
811171b4:	d9402917 	ldw	r5,164(sp)
811171b8:	df002783 	ldbu	fp,158(sp)
811171bc:	dd002d15 	stw	r20,180(sp)
811171c0:	d9402a15 	stw	r5,168(sp)
811171c4:	d9402e15 	stw	r5,184(sp)
811171c8:	d8002915 	stw	zero,164(sp)
811171cc:	d8003215 	stw	zero,200(sp)
811171d0:	003a4c06 	br	81115b04 <__reset+0xfb0f5b04>
811171d4:	8c7fff84 	addi	r17,r17,-2
811171d8:	b5bfffc4 	addi	r22,r22,-1
811171dc:	dd802615 	stw	r22,152(sp)
811171e0:	dc4022c5 	stb	r17,139(sp)
811171e4:	b000c316 	blt	r22,zero,811174f4 <___svfprintf_internal_r+0x20b0>
811171e8:	00800ac4 	movi	r2,43
811171ec:	d8802305 	stb	r2,140(sp)
811171f0:	00800244 	movi	r2,9
811171f4:	15806e16 	blt	r2,r22,811173b0 <___svfprintf_internal_r+0x1f6c>
811171f8:	00800c04 	movi	r2,48
811171fc:	b5800c04 	addi	r22,r22,48
81117200:	d8802345 	stb	r2,141(sp)
81117204:	dd802385 	stb	r22,142(sp)
81117208:	d88023c4 	addi	r2,sp,143
8111720c:	df0022c4 	addi	fp,sp,139
81117210:	d8c03317 	ldw	r3,204(sp)
81117214:	1739c83a 	sub	fp,r2,fp
81117218:	d9003317 	ldw	r4,204(sp)
8111721c:	e0c7883a 	add	r3,fp,r3
81117220:	df003b15 	stw	fp,236(sp)
81117224:	d8c02e15 	stw	r3,184(sp)
81117228:	00800044 	movi	r2,1
8111722c:	1100b70e 	bge	r2,r4,8111750c <___svfprintf_internal_r+0x20c8>
81117230:	d8c02e17 	ldw	r3,184(sp)
81117234:	18c00044 	addi	r3,r3,1
81117238:	d8c02e15 	stw	r3,184(sp)
8111723c:	1805883a 	mov	r2,r3
81117240:	1800b016 	blt	r3,zero,81117504 <___svfprintf_internal_r+0x20c0>
81117244:	d8003215 	stw	zero,200(sp)
81117248:	003f1006 	br	81116e8c <__reset+0xfb0f6e8c>
8111724c:	d8802917 	ldw	r2,164(sp)
81117250:	103ec71e 	bne	r2,zero,81116d70 <__reset+0xfb0f6d70>
81117254:	dc002915 	stw	r16,164(sp)
81117258:	003ec506 	br	81116d70 <__reset+0xfb0f6d70>
8111725c:	d9402c17 	ldw	r5,176(sp)
81117260:	d9801e04 	addi	r6,sp,120
81117264:	9809883a 	mov	r4,r19
81117268:	11220640 	call	81122064 <__ssprint_r>
8111726c:	10395c1e 	bne	r2,zero,811157e0 <__reset+0xfb0f57e0>
81117270:	dc402617 	ldw	r17,152(sp)
81117274:	d8c02017 	ldw	r3,128(sp)
81117278:	d8801f17 	ldw	r2,124(sp)
8111727c:	da000404 	addi	r8,sp,16
81117280:	003e7706 	br	81116c60 <__reset+0xfb0f6c60>
81117284:	582f883a 	mov	r23,r11
81117288:	d8002915 	stw	zero,164(sp)
8111728c:	0038c406 	br	811155a0 <__reset+0xfb0f55a0>
81117290:	d8c02917 	ldw	r3,164(sp)
81117294:	d8802104 	addi	r2,sp,132
81117298:	d8800315 	stw	r2,12(sp)
8111729c:	d9403617 	ldw	r5,216(sp)
811172a0:	d8802504 	addi	r2,sp,148
811172a4:	d8800215 	stw	r2,8(sp)
811172a8:	d8802604 	addi	r2,sp,152
811172ac:	d8c00015 	stw	r3,0(sp)
811172b0:	9809883a 	mov	r4,r19
811172b4:	d8800115 	stw	r2,4(sp)
811172b8:	01c000c4 	movi	r7,3
811172bc:	a00d883a 	mov	r6,r20
811172c0:	da003e15 	stw	r8,248(sp)
811172c4:	111b7300 	call	8111b730 <_dtoa_r>
811172c8:	d9002917 	ldw	r4,164(sp)
811172cc:	da003e17 	ldw	r8,248(sp)
811172d0:	1021883a 	mov	r16,r2
811172d4:	1139883a 	add	fp,r2,r4
811172d8:	2007883a 	mov	r3,r4
811172dc:	81000007 	ldb	r4,0(r16)
811172e0:	00800c04 	movi	r2,48
811172e4:	20806f26 	beq	r4,r2,811174a4 <___svfprintf_internal_r+0x2060>
811172e8:	d8c02617 	ldw	r3,152(sp)
811172ec:	e0f9883a 	add	fp,fp,r3
811172f0:	003ec206 	br	81116dfc <__reset+0xfb0f6dfc>
811172f4:	00c00b44 	movi	r3,45
811172f8:	2520003c 	xorhi	r20,r4,32768
811172fc:	d8c02a05 	stb	r3,168(sp)
81117300:	003ea106 	br	81116d88 <__reset+0xfb0f6d88>
81117304:	d8c03217 	ldw	r3,200(sp)
81117308:	00c0890e 	bge	zero,r3,81117530 <___svfprintf_internal_r+0x20ec>
8111730c:	00800044 	movi	r2,1
81117310:	d9003317 	ldw	r4,204(sp)
81117314:	1105883a 	add	r2,r2,r4
81117318:	d8802e15 	stw	r2,184(sp)
8111731c:	10005f16 	blt	r2,zero,8111749c <___svfprintf_internal_r+0x2058>
81117320:	044019c4 	movi	r17,103
81117324:	003ed906 	br	81116e8c <__reset+0xfb0f6e8c>
81117328:	d9002917 	ldw	r4,164(sp)
8111732c:	20c00044 	addi	r3,r4,1
81117330:	003e9c06 	br	81116da4 <__reset+0xfb0f6da4>
81117334:	d9002917 	ldw	r4,164(sp)
81117338:	00c0680e 	bge	zero,r3,811174dc <___svfprintf_internal_r+0x2098>
8111733c:	2000461e 	bne	r4,zero,81117458 <___svfprintf_internal_r+0x2014>
81117340:	9480004c 	andi	r18,r18,1
81117344:	9000441e 	bne	r18,zero,81117458 <___svfprintf_internal_r+0x2014>
81117348:	1805883a 	mov	r2,r3
8111734c:	1800a016 	blt	r3,zero,811175d0 <___svfprintf_internal_r+0x218c>
81117350:	d8c03217 	ldw	r3,200(sp)
81117354:	d8c02e15 	stw	r3,184(sp)
81117358:	003ecc06 	br	81116e8c <__reset+0xfb0f6e8c>
8111735c:	d9402917 	ldw	r5,164(sp)
81117360:	d8802104 	addi	r2,sp,132
81117364:	d8800315 	stw	r2,12(sp)
81117368:	d9400015 	stw	r5,0(sp)
8111736c:	d8802504 	addi	r2,sp,148
81117370:	d9403617 	ldw	r5,216(sp)
81117374:	d8800215 	stw	r2,8(sp)
81117378:	d8802604 	addi	r2,sp,152
8111737c:	d8800115 	stw	r2,4(sp)
81117380:	01c000c4 	movi	r7,3
81117384:	a00d883a 	mov	r6,r20
81117388:	9809883a 	mov	r4,r19
8111738c:	da003e15 	stw	r8,248(sp)
81117390:	111b7300 	call	8111b730 <_dtoa_r>
81117394:	d8c02917 	ldw	r3,164(sp)
81117398:	da003e17 	ldw	r8,248(sp)
8111739c:	1021883a 	mov	r16,r2
811173a0:	00801184 	movi	r2,70
811173a4:	80f9883a 	add	fp,r16,r3
811173a8:	88bfcc26 	beq	r17,r2,811172dc <__reset+0xfb0f72dc>
811173ac:	003e9306 	br	81116dfc <__reset+0xfb0f6dfc>
811173b0:	df0022c4 	addi	fp,sp,139
811173b4:	dc002915 	stw	r16,164(sp)
811173b8:	9829883a 	mov	r20,r19
811173bc:	e021883a 	mov	r16,fp
811173c0:	4027883a 	mov	r19,r8
811173c4:	b009883a 	mov	r4,r22
811173c8:	01400284 	movi	r5,10
811173cc:	1126b8c0 	call	81126b8c <__modsi3>
811173d0:	10800c04 	addi	r2,r2,48
811173d4:	843fffc4 	addi	r16,r16,-1
811173d8:	b009883a 	mov	r4,r22
811173dc:	01400284 	movi	r5,10
811173e0:	80800005 	stb	r2,0(r16)
811173e4:	1126b080 	call	81126b08 <__divsi3>
811173e8:	102d883a 	mov	r22,r2
811173ec:	00800244 	movi	r2,9
811173f0:	15bff416 	blt	r2,r22,811173c4 <__reset+0xfb0f73c4>
811173f4:	9811883a 	mov	r8,r19
811173f8:	b0800c04 	addi	r2,r22,48
811173fc:	a027883a 	mov	r19,r20
81117400:	8029883a 	mov	r20,r16
81117404:	a17fffc4 	addi	r5,r20,-1
81117408:	a0bfffc5 	stb	r2,-1(r20)
8111740c:	dc002917 	ldw	r16,164(sp)
81117410:	2f00752e 	bgeu	r5,fp,811175e8 <___svfprintf_internal_r+0x21a4>
81117414:	d9c02384 	addi	r7,sp,142
81117418:	3d0fc83a 	sub	r7,r7,r20
8111741c:	d9002344 	addi	r4,sp,141
81117420:	e1cf883a 	add	r7,fp,r7
81117424:	00000106 	br	8111742c <___svfprintf_internal_r+0x1fe8>
81117428:	28800003 	ldbu	r2,0(r5)
8111742c:	20800005 	stb	r2,0(r4)
81117430:	21000044 	addi	r4,r4,1
81117434:	29400044 	addi	r5,r5,1
81117438:	21fffb1e 	bne	r4,r7,81117428 <__reset+0xfb0f7428>
8111743c:	d8802304 	addi	r2,sp,140
81117440:	1505c83a 	sub	r2,r2,r20
81117444:	d8c02344 	addi	r3,sp,141
81117448:	1885883a 	add	r2,r3,r2
8111744c:	003f7006 	br	81117210 <__reset+0xfb0f7210>
81117450:	0005883a 	mov	r2,zero
81117454:	003f0b06 	br	81117084 <__reset+0xfb0f7084>
81117458:	d9002917 	ldw	r4,164(sp)
8111745c:	d8c03217 	ldw	r3,200(sp)
81117460:	20800044 	addi	r2,r4,1
81117464:	1885883a 	add	r2,r3,r2
81117468:	d8802e15 	stw	r2,184(sp)
8111746c:	103e870e 	bge	r2,zero,81116e8c <__reset+0xfb0f6e8c>
81117470:	0005883a 	mov	r2,zero
81117474:	003e8506 	br	81116e8c <__reset+0xfb0f6e8c>
81117478:	01204534 	movhi	r4,33044
8111747c:	21078e84 	addi	r4,r4,7738
81117480:	d9002b15 	stw	r4,172(sp)
81117484:	003cc506 	br	8111679c <__reset+0xfb0f679c>
81117488:	d8c03217 	ldw	r3,200(sp)
8111748c:	18c00044 	addi	r3,r3,1
81117490:	d8c02e15 	stw	r3,184(sp)
81117494:	1805883a 	mov	r2,r3
81117498:	183fa10e 	bge	r3,zero,81117320 <__reset+0xfb0f7320>
8111749c:	0005883a 	mov	r2,zero
811174a0:	003f9f06 	br	81117320 <__reset+0xfb0f7320>
811174a4:	d9003617 	ldw	r4,216(sp)
811174a8:	000d883a 	mov	r6,zero
811174ac:	000f883a 	mov	r7,zero
811174b0:	a00b883a 	mov	r5,r20
811174b4:	d8c03d15 	stw	r3,244(sp)
811174b8:	da003e15 	stw	r8,248(sp)
811174bc:	112805c0 	call	8112805c <__eqdf2>
811174c0:	d8c03d17 	ldw	r3,244(sp)
811174c4:	da003e17 	ldw	r8,248(sp)
811174c8:	103f8726 	beq	r2,zero,811172e8 <__reset+0xfb0f72e8>
811174cc:	00800044 	movi	r2,1
811174d0:	10c7c83a 	sub	r3,r2,r3
811174d4:	d8c02615 	stw	r3,152(sp)
811174d8:	003f8406 	br	811172ec <__reset+0xfb0f72ec>
811174dc:	20000e1e 	bne	r4,zero,81117518 <___svfprintf_internal_r+0x20d4>
811174e0:	9480004c 	andi	r18,r18,1
811174e4:	90000c1e 	bne	r18,zero,81117518 <___svfprintf_internal_r+0x20d4>
811174e8:	00800044 	movi	r2,1
811174ec:	d8802e15 	stw	r2,184(sp)
811174f0:	003e6606 	br	81116e8c <__reset+0xfb0f6e8c>
811174f4:	00800b44 	movi	r2,45
811174f8:	05adc83a 	sub	r22,zero,r22
811174fc:	d8802305 	stb	r2,140(sp)
81117500:	003f3b06 	br	811171f0 <__reset+0xfb0f71f0>
81117504:	0005883a 	mov	r2,zero
81117508:	003f4e06 	br	81117244 <__reset+0xfb0f7244>
8111750c:	90a4703a 	and	r18,r18,r2
81117510:	903f4a26 	beq	r18,zero,8111723c <__reset+0xfb0f723c>
81117514:	003f4606 	br	81117230 <__reset+0xfb0f7230>
81117518:	d8c02917 	ldw	r3,164(sp)
8111751c:	18c00084 	addi	r3,r3,2
81117520:	d8c02e15 	stw	r3,184(sp)
81117524:	1805883a 	mov	r2,r3
81117528:	183e580e 	bge	r3,zero,81116e8c <__reset+0xfb0f6e8c>
8111752c:	003fd006 	br	81117470 <__reset+0xfb0f7470>
81117530:	00800084 	movi	r2,2
81117534:	10c5c83a 	sub	r2,r2,r3
81117538:	003f7506 	br	81117310 <__reset+0xfb0f7310>
8111753c:	d8802d17 	ldw	r2,180(sp)
81117540:	d9002d17 	ldw	r4,180(sp)
81117544:	bc400043 	ldbu	r17,1(r23)
81117548:	10800017 	ldw	r2,0(r2)
8111754c:	582f883a 	mov	r23,r11
81117550:	d8802915 	stw	r2,164(sp)
81117554:	20800104 	addi	r2,r4,4
81117558:	d9002917 	ldw	r4,164(sp)
8111755c:	d8802d15 	stw	r2,180(sp)
81117560:	203df00e 	bge	r4,zero,81116d24 <__reset+0xfb0f6d24>
81117564:	8c403fcc 	andi	r17,r17,255
81117568:	00bfffc4 	movi	r2,-1
8111756c:	8c40201c 	xori	r17,r17,128
81117570:	d8802915 	stw	r2,164(sp)
81117574:	8c7fe004 	addi	r17,r17,-128
81117578:	00380806 	br	8111559c <__reset+0xfb0f559c>
8111757c:	9080004c 	andi	r2,r18,1
81117580:	0039883a 	mov	fp,zero
81117584:	10000726 	beq	r2,zero,811175a4 <___svfprintf_internal_r+0x2160>
81117588:	d8c02817 	ldw	r3,160(sp)
8111758c:	dc001dc4 	addi	r16,sp,119
81117590:	00800c04 	movi	r2,48
81117594:	1c07c83a 	sub	r3,r3,r16
81117598:	d8801dc5 	stb	r2,119(sp)
8111759c:	d8c02e15 	stw	r3,184(sp)
811175a0:	00395206 	br	81115aec <__reset+0xfb0f5aec>
811175a4:	d8002e15 	stw	zero,184(sp)
811175a8:	dc001e04 	addi	r16,sp,120
811175ac:	00394f06 	br	81115aec <__reset+0xfb0f5aec>
811175b0:	0005883a 	mov	r2,zero
811175b4:	003e3206 	br	81116e80 <__reset+0xfb0f6e80>
811175b8:	dd802617 	ldw	r22,152(sp)
811175bc:	003f0606 	br	811171d8 <__reset+0xfb0f71d8>
811175c0:	d9c02785 	stb	r7,158(sp)
811175c4:	003a5106 	br	81115f0c <__reset+0xfb0f5f0c>
811175c8:	d9c02785 	stb	r7,158(sp)
811175cc:	003a3706 	br	81115eac <__reset+0xfb0f5eac>
811175d0:	0005883a 	mov	r2,zero
811175d4:	003f5e06 	br	81117350 <__reset+0xfb0f7350>
811175d8:	d9c02785 	stb	r7,158(sp)
811175dc:	00391706 	br	81115a3c <__reset+0xfb0f5a3c>
811175e0:	d9c02785 	stb	r7,158(sp)
811175e4:	0038e606 	br	81115980 <__reset+0xfb0f5980>
811175e8:	d8802344 	addi	r2,sp,141
811175ec:	003f0806 	br	81117210 <__reset+0xfb0f7210>
811175f0:	d9c02785 	stb	r7,158(sp)
811175f4:	0038b706 	br	811158d4 <__reset+0xfb0f58d4>
811175f8:	d9c02785 	stb	r7,158(sp)
811175fc:	003adc06 	br	81116170 <__reset+0xfb0f6170>
81117600:	d9403917 	ldw	r5,228(sp)
81117604:	00800304 	movi	r2,12
81117608:	28800015 	stw	r2,0(r5)
8111760c:	00bfffc4 	movi	r2,-1
81117610:	00387806 	br	811157f4 <__reset+0xfb0f57f4>
81117614:	d9c02785 	stb	r7,158(sp)
81117618:	003abf06 	br	81116118 <__reset+0xfb0f6118>
8111761c:	d9c02785 	stb	r7,158(sp)
81117620:	003a9b06 	br	81116090 <__reset+0xfb0f6090>

81117624 <___vfprintf_internal_r>:
81117624:	deffb804 	addi	sp,sp,-288
81117628:	de00012e 	bgeu	sp,et,81117630 <___vfprintf_internal_r+0xc>
8111762c:	003b68fa 	trap	3
81117630:	dfc04715 	stw	ra,284(sp)
81117634:	ddc04515 	stw	r23,276(sp)
81117638:	dd404315 	stw	r21,268(sp)
8111763c:	d9002c15 	stw	r4,176(sp)
81117640:	282f883a 	mov	r23,r5
81117644:	302b883a 	mov	r21,r6
81117648:	d9c02d15 	stw	r7,180(sp)
8111764c:	df004615 	stw	fp,280(sp)
81117650:	dd804415 	stw	r22,272(sp)
81117654:	dd004215 	stw	r20,264(sp)
81117658:	dcc04115 	stw	r19,260(sp)
8111765c:	dc804015 	stw	r18,256(sp)
81117660:	dc403f15 	stw	r17,252(sp)
81117664:	dc003e15 	stw	r16,248(sp)
81117668:	111e32c0 	call	8111e32c <_localeconv_r>
8111766c:	10800017 	ldw	r2,0(r2)
81117670:	1009883a 	mov	r4,r2
81117674:	d8803415 	stw	r2,208(sp)
81117678:	111510c0 	call	8111510c <strlen>
8111767c:	d8803715 	stw	r2,220(sp)
81117680:	d8802c17 	ldw	r2,176(sp)
81117684:	10000226 	beq	r2,zero,81117690 <___vfprintf_internal_r+0x6c>
81117688:	10800e17 	ldw	r2,56(r2)
8111768c:	1000f926 	beq	r2,zero,81117a74 <___vfprintf_internal_r+0x450>
81117690:	b880030b 	ldhu	r2,12(r23)
81117694:	10c8000c 	andi	r3,r2,8192
81117698:	1800061e 	bne	r3,zero,811176b4 <___vfprintf_internal_r+0x90>
8111769c:	b9001917 	ldw	r4,100(r23)
811176a0:	00f7ffc4 	movi	r3,-8193
811176a4:	10880014 	ori	r2,r2,8192
811176a8:	20c6703a 	and	r3,r4,r3
811176ac:	b880030d 	sth	r2,12(r23)
811176b0:	b8c01915 	stw	r3,100(r23)
811176b4:	10c0020c 	andi	r3,r2,8
811176b8:	1800c126 	beq	r3,zero,811179c0 <___vfprintf_internal_r+0x39c>
811176bc:	b8c00417 	ldw	r3,16(r23)
811176c0:	1800bf26 	beq	r3,zero,811179c0 <___vfprintf_internal_r+0x39c>
811176c4:	1080068c 	andi	r2,r2,26
811176c8:	00c00284 	movi	r3,10
811176cc:	10c0c426 	beq	r2,r3,811179e0 <___vfprintf_internal_r+0x3bc>
811176d0:	d8c00404 	addi	r3,sp,16
811176d4:	05204534 	movhi	r20,33044
811176d8:	d9001e04 	addi	r4,sp,120
811176dc:	a5079684 	addi	r20,r20,7770
811176e0:	d8c01e15 	stw	r3,120(sp)
811176e4:	d8002015 	stw	zero,128(sp)
811176e8:	d8001f15 	stw	zero,124(sp)
811176ec:	d8003315 	stw	zero,204(sp)
811176f0:	d8003615 	stw	zero,216(sp)
811176f4:	d8003815 	stw	zero,224(sp)
811176f8:	1811883a 	mov	r8,r3
811176fc:	d8003915 	stw	zero,228(sp)
81117700:	d8003a15 	stw	zero,232(sp)
81117704:	d8002f15 	stw	zero,188(sp)
81117708:	d9002815 	stw	r4,160(sp)
8111770c:	a8800007 	ldb	r2,0(r21)
81117710:	10027b26 	beq	r2,zero,81118100 <___vfprintf_internal_r+0xadc>
81117714:	00c00944 	movi	r3,37
81117718:	a821883a 	mov	r16,r21
8111771c:	10c0021e 	bne	r2,r3,81117728 <___vfprintf_internal_r+0x104>
81117720:	00001406 	br	81117774 <___vfprintf_internal_r+0x150>
81117724:	10c00326 	beq	r2,r3,81117734 <___vfprintf_internal_r+0x110>
81117728:	84000044 	addi	r16,r16,1
8111772c:	80800007 	ldb	r2,0(r16)
81117730:	103ffc1e 	bne	r2,zero,81117724 <__reset+0xfb0f7724>
81117734:	8563c83a 	sub	r17,r16,r21
81117738:	88000e26 	beq	r17,zero,81117774 <___vfprintf_internal_r+0x150>
8111773c:	d8c02017 	ldw	r3,128(sp)
81117740:	d8801f17 	ldw	r2,124(sp)
81117744:	45400015 	stw	r21,0(r8)
81117748:	1c47883a 	add	r3,r3,r17
8111774c:	10800044 	addi	r2,r2,1
81117750:	d8c02015 	stw	r3,128(sp)
81117754:	44400115 	stw	r17,4(r8)
81117758:	d8801f15 	stw	r2,124(sp)
8111775c:	00c001c4 	movi	r3,7
81117760:	1880a716 	blt	r3,r2,81117a00 <___vfprintf_internal_r+0x3dc>
81117764:	42000204 	addi	r8,r8,8
81117768:	d9402f17 	ldw	r5,188(sp)
8111776c:	2c4b883a 	add	r5,r5,r17
81117770:	d9402f15 	stw	r5,188(sp)
81117774:	80800007 	ldb	r2,0(r16)
81117778:	1000a826 	beq	r2,zero,81117a1c <___vfprintf_internal_r+0x3f8>
8111777c:	84400047 	ldb	r17,1(r16)
81117780:	00bfffc4 	movi	r2,-1
81117784:	85400044 	addi	r21,r16,1
81117788:	d8002785 	stb	zero,158(sp)
8111778c:	0007883a 	mov	r3,zero
81117790:	000f883a 	mov	r7,zero
81117794:	d8802915 	stw	r2,164(sp)
81117798:	d8003115 	stw	zero,196(sp)
8111779c:	0025883a 	mov	r18,zero
811177a0:	01401604 	movi	r5,88
811177a4:	01800244 	movi	r6,9
811177a8:	02800a84 	movi	r10,42
811177ac:	02401b04 	movi	r9,108
811177b0:	ad400044 	addi	r21,r21,1
811177b4:	88bff804 	addi	r2,r17,-32
811177b8:	28830436 	bltu	r5,r2,811183cc <___vfprintf_internal_r+0xda8>
811177bc:	100490ba 	slli	r2,r2,2
811177c0:	01204474 	movhi	r4,33041
811177c4:	211df504 	addi	r4,r4,30676
811177c8:	1105883a 	add	r2,r2,r4
811177cc:	10800017 	ldw	r2,0(r2)
811177d0:	1000683a 	jmp	r2
811177d4:	811182ec 	andhi	r4,r16,17931
811177d8:	811183cc 	andi	r4,r16,17935
811177dc:	811183cc 	andi	r4,r16,17935
811177e0:	8111830c 	andi	r4,r16,17932
811177e4:	811183cc 	andi	r4,r16,17935
811177e8:	811183cc 	andi	r4,r16,17935
811177ec:	811183cc 	andi	r4,r16,17935
811177f0:	811183cc 	andi	r4,r16,17935
811177f4:	811183cc 	andi	r4,r16,17935
811177f8:	811183cc 	andi	r4,r16,17935
811177fc:	81117a80 	call	881117a8 <__reset+0x20f17a8>
81117800:	81118228 	cmpgeui	r4,r16,17928
81117804:	811183cc 	andi	r4,r16,17935
81117808:	81117948 	cmpgei	r4,r16,17893
8111780c:	81117aa8 	cmpgeui	r4,r16,17898
81117810:	811183cc 	andi	r4,r16,17935
81117814:	81117ae8 	cmpgeui	r4,r16,17899
81117818:	81117af4 	orhi	r4,r16,17899
8111781c:	81117af4 	orhi	r4,r16,17899
81117820:	81117af4 	orhi	r4,r16,17899
81117824:	81117af4 	orhi	r4,r16,17899
81117828:	81117af4 	orhi	r4,r16,17899
8111782c:	81117af4 	orhi	r4,r16,17899
81117830:	81117af4 	orhi	r4,r16,17899
81117834:	81117af4 	orhi	r4,r16,17899
81117838:	81117af4 	orhi	r4,r16,17899
8111783c:	811183cc 	andi	r4,r16,17935
81117840:	811183cc 	andi	r4,r16,17935
81117844:	811183cc 	andi	r4,r16,17935
81117848:	811183cc 	andi	r4,r16,17935
8111784c:	811183cc 	andi	r4,r16,17935
81117850:	811183cc 	andi	r4,r16,17935
81117854:	811183cc 	andi	r4,r16,17935
81117858:	811183cc 	andi	r4,r16,17935
8111785c:	811183cc 	andi	r4,r16,17935
81117860:	811183cc 	andi	r4,r16,17935
81117864:	81117b28 	cmpgeui	r4,r16,17900
81117868:	81117be4 	muli	r4,r16,17903
8111786c:	811183cc 	andi	r4,r16,17935
81117870:	81117be4 	muli	r4,r16,17903
81117874:	811183cc 	andi	r4,r16,17935
81117878:	811183cc 	andi	r4,r16,17935
8111787c:	811183cc 	andi	r4,r16,17935
81117880:	811183cc 	andi	r4,r16,17935
81117884:	81117c84 	addi	r4,r16,17906
81117888:	811183cc 	andi	r4,r16,17935
8111788c:	811183cc 	andi	r4,r16,17935
81117890:	81117c90 	cmplti	r4,r16,17906
81117894:	811183cc 	andi	r4,r16,17935
81117898:	811183cc 	andi	r4,r16,17935
8111789c:	811183cc 	andi	r4,r16,17935
811178a0:	811183cc 	andi	r4,r16,17935
811178a4:	811183cc 	andi	r4,r16,17935
811178a8:	81118108 	cmpgei	r4,r16,17924
811178ac:	811183cc 	andi	r4,r16,17935
811178b0:	811183cc 	andi	r4,r16,17935
811178b4:	81118168 	cmpgeui	r4,r16,17925
811178b8:	811183cc 	andi	r4,r16,17935
811178bc:	811183cc 	andi	r4,r16,17935
811178c0:	811183cc 	andi	r4,r16,17935
811178c4:	811183cc 	andi	r4,r16,17935
811178c8:	811183cc 	andi	r4,r16,17935
811178cc:	811183cc 	andi	r4,r16,17935
811178d0:	811183cc 	andi	r4,r16,17935
811178d4:	811183cc 	andi	r4,r16,17935
811178d8:	811183cc 	andi	r4,r16,17935
811178dc:	811183cc 	andi	r4,r16,17935
811178e0:	81118378 	rdprs	r4,r16,17933
811178e4:	81118318 	cmpnei	r4,r16,17932
811178e8:	81117be4 	muli	r4,r16,17903
811178ec:	81117be4 	muli	r4,r16,17903
811178f0:	81117be4 	muli	r4,r16,17903
811178f4:	81118328 	cmpgeui	r4,r16,17932
811178f8:	81118318 	cmpnei	r4,r16,17932
811178fc:	811183cc 	andi	r4,r16,17935
81117900:	811183cc 	andi	r4,r16,17935
81117904:	81118334 	orhi	r4,r16,17932
81117908:	811183cc 	andi	r4,r16,17935
8111790c:	81118344 	addi	r4,r16,17933
81117910:	81118218 	cmpnei	r4,r16,17928
81117914:	81117954 	ori	r4,r16,17893
81117918:	81118238 	rdprs	r4,r16,17928
8111791c:	811183cc 	andi	r4,r16,17935
81117920:	81118244 	addi	r4,r16,17929
81117924:	811183cc 	andi	r4,r16,17935
81117928:	811182a0 	cmpeqi	r4,r16,17930
8111792c:	811183cc 	andi	r4,r16,17935
81117930:	811183cc 	andi	r4,r16,17935
81117934:	811182b0 	cmpltui	r4,r16,17930
81117938:	d9003117 	ldw	r4,196(sp)
8111793c:	d8802d15 	stw	r2,180(sp)
81117940:	0109c83a 	sub	r4,zero,r4
81117944:	d9003115 	stw	r4,196(sp)
81117948:	94800114 	ori	r18,r18,4
8111794c:	ac400007 	ldb	r17,0(r21)
81117950:	003f9706 	br	811177b0 <__reset+0xfb0f77b0>
81117954:	00800c04 	movi	r2,48
81117958:	d9002d17 	ldw	r4,180(sp)
8111795c:	d9402917 	ldw	r5,164(sp)
81117960:	d8802705 	stb	r2,156(sp)
81117964:	00801e04 	movi	r2,120
81117968:	d8802745 	stb	r2,157(sp)
8111796c:	d8002785 	stb	zero,158(sp)
81117970:	20c00104 	addi	r3,r4,4
81117974:	24c00017 	ldw	r19,0(r4)
81117978:	002d883a 	mov	r22,zero
8111797c:	90800094 	ori	r2,r18,2
81117980:	28029a16 	blt	r5,zero,811183ec <___vfprintf_internal_r+0xdc8>
81117984:	00bfdfc4 	movi	r2,-129
81117988:	90a4703a 	and	r18,r18,r2
8111798c:	d8c02d15 	stw	r3,180(sp)
81117990:	94800094 	ori	r18,r18,2
81117994:	9802871e 	bne	r19,zero,811183b4 <___vfprintf_internal_r+0xd90>
81117998:	00a04534 	movhi	r2,33044
8111799c:	10878704 	addi	r2,r2,7708
811179a0:	d8803915 	stw	r2,228(sp)
811179a4:	04401e04 	movi	r17,120
811179a8:	d8802917 	ldw	r2,164(sp)
811179ac:	0039883a 	mov	fp,zero
811179b0:	1001e926 	beq	r2,zero,81118158 <___vfprintf_internal_r+0xb34>
811179b4:	0027883a 	mov	r19,zero
811179b8:	002d883a 	mov	r22,zero
811179bc:	00020506 	br	811181d4 <___vfprintf_internal_r+0xbb0>
811179c0:	d9002c17 	ldw	r4,176(sp)
811179c4:	b80b883a 	mov	r5,r23
811179c8:	111b3700 	call	8111b370 <__swsetup_r>
811179cc:	1005ac1e 	bne	r2,zero,81119080 <___vfprintf_internal_r+0x1a5c>
811179d0:	b880030b 	ldhu	r2,12(r23)
811179d4:	00c00284 	movi	r3,10
811179d8:	1080068c 	andi	r2,r2,26
811179dc:	10ff3c1e 	bne	r2,r3,811176d0 <__reset+0xfb0f76d0>
811179e0:	b880038f 	ldh	r2,14(r23)
811179e4:	103f3a16 	blt	r2,zero,811176d0 <__reset+0xfb0f76d0>
811179e8:	d9c02d17 	ldw	r7,180(sp)
811179ec:	d9002c17 	ldw	r4,176(sp)
811179f0:	a80d883a 	mov	r6,r21
811179f4:	b80b883a 	mov	r5,r23
811179f8:	11198400 	call	81119840 <__sbprintf>
811179fc:	00001106 	br	81117a44 <___vfprintf_internal_r+0x420>
81117a00:	d9002c17 	ldw	r4,176(sp)
81117a04:	d9801e04 	addi	r6,sp,120
81117a08:	b80b883a 	mov	r5,r23
81117a0c:	11238140 	call	81123814 <__sprint_r>
81117a10:	1000081e 	bne	r2,zero,81117a34 <___vfprintf_internal_r+0x410>
81117a14:	da000404 	addi	r8,sp,16
81117a18:	003f5306 	br	81117768 <__reset+0xfb0f7768>
81117a1c:	d8802017 	ldw	r2,128(sp)
81117a20:	10000426 	beq	r2,zero,81117a34 <___vfprintf_internal_r+0x410>
81117a24:	d9002c17 	ldw	r4,176(sp)
81117a28:	d9801e04 	addi	r6,sp,120
81117a2c:	b80b883a 	mov	r5,r23
81117a30:	11238140 	call	81123814 <__sprint_r>
81117a34:	b880030b 	ldhu	r2,12(r23)
81117a38:	1080100c 	andi	r2,r2,64
81117a3c:	1005901e 	bne	r2,zero,81119080 <___vfprintf_internal_r+0x1a5c>
81117a40:	d8802f17 	ldw	r2,188(sp)
81117a44:	dfc04717 	ldw	ra,284(sp)
81117a48:	df004617 	ldw	fp,280(sp)
81117a4c:	ddc04517 	ldw	r23,276(sp)
81117a50:	dd804417 	ldw	r22,272(sp)
81117a54:	dd404317 	ldw	r21,268(sp)
81117a58:	dd004217 	ldw	r20,264(sp)
81117a5c:	dcc04117 	ldw	r19,260(sp)
81117a60:	dc804017 	ldw	r18,256(sp)
81117a64:	dc403f17 	ldw	r17,252(sp)
81117a68:	dc003e17 	ldw	r16,248(sp)
81117a6c:	dec04804 	addi	sp,sp,288
81117a70:	f800283a 	ret
81117a74:	d9002c17 	ldw	r4,176(sp)
81117a78:	111d3e00 	call	8111d3e0 <__sinit>
81117a7c:	003f0406 	br	81117690 <__reset+0xfb0f7690>
81117a80:	d8802d17 	ldw	r2,180(sp)
81117a84:	d9002d17 	ldw	r4,180(sp)
81117a88:	10800017 	ldw	r2,0(r2)
81117a8c:	d8803115 	stw	r2,196(sp)
81117a90:	20800104 	addi	r2,r4,4
81117a94:	d9003117 	ldw	r4,196(sp)
81117a98:	203fa716 	blt	r4,zero,81117938 <__reset+0xfb0f7938>
81117a9c:	d8802d15 	stw	r2,180(sp)
81117aa0:	ac400007 	ldb	r17,0(r21)
81117aa4:	003f4206 	br	811177b0 <__reset+0xfb0f77b0>
81117aa8:	ac400007 	ldb	r17,0(r21)
81117aac:	aac00044 	addi	r11,r21,1
81117ab0:	8a872826 	beq	r17,r10,81119754 <___vfprintf_internal_r+0x2130>
81117ab4:	88bff404 	addi	r2,r17,-48
81117ab8:	0009883a 	mov	r4,zero
81117abc:	30867d36 	bltu	r6,r2,811194b4 <___vfprintf_internal_r+0x1e90>
81117ac0:	5c400007 	ldb	r17,0(r11)
81117ac4:	210002a4 	muli	r4,r4,10
81117ac8:	5d400044 	addi	r21,r11,1
81117acc:	a817883a 	mov	r11,r21
81117ad0:	2089883a 	add	r4,r4,r2
81117ad4:	88bff404 	addi	r2,r17,-48
81117ad8:	30bff92e 	bgeu	r6,r2,81117ac0 <__reset+0xfb0f7ac0>
81117adc:	2005c916 	blt	r4,zero,81119204 <___vfprintf_internal_r+0x1be0>
81117ae0:	d9002915 	stw	r4,164(sp)
81117ae4:	003f3306 	br	811177b4 <__reset+0xfb0f77b4>
81117ae8:	94802014 	ori	r18,r18,128
81117aec:	ac400007 	ldb	r17,0(r21)
81117af0:	003f2f06 	br	811177b0 <__reset+0xfb0f77b0>
81117af4:	a809883a 	mov	r4,r21
81117af8:	d8003115 	stw	zero,196(sp)
81117afc:	88bff404 	addi	r2,r17,-48
81117b00:	0017883a 	mov	r11,zero
81117b04:	24400007 	ldb	r17,0(r4)
81117b08:	5ac002a4 	muli	r11,r11,10
81117b0c:	ad400044 	addi	r21,r21,1
81117b10:	a809883a 	mov	r4,r21
81117b14:	12d7883a 	add	r11,r2,r11
81117b18:	88bff404 	addi	r2,r17,-48
81117b1c:	30bff92e 	bgeu	r6,r2,81117b04 <__reset+0xfb0f7b04>
81117b20:	dac03115 	stw	r11,196(sp)
81117b24:	003f2306 	br	811177b4 <__reset+0xfb0f77b4>
81117b28:	18c03fcc 	andi	r3,r3,255
81117b2c:	18072b1e 	bne	r3,zero,811197dc <___vfprintf_internal_r+0x21b8>
81117b30:	94800414 	ori	r18,r18,16
81117b34:	9080080c 	andi	r2,r18,32
81117b38:	10037b26 	beq	r2,zero,81118928 <___vfprintf_internal_r+0x1304>
81117b3c:	d9402d17 	ldw	r5,180(sp)
81117b40:	28800117 	ldw	r2,4(r5)
81117b44:	2cc00017 	ldw	r19,0(r5)
81117b48:	29400204 	addi	r5,r5,8
81117b4c:	d9402d15 	stw	r5,180(sp)
81117b50:	102d883a 	mov	r22,r2
81117b54:	10044b16 	blt	r2,zero,81118c84 <___vfprintf_internal_r+0x1660>
81117b58:	d9402917 	ldw	r5,164(sp)
81117b5c:	df002783 	ldbu	fp,158(sp)
81117b60:	2803bc16 	blt	r5,zero,81118a54 <___vfprintf_internal_r+0x1430>
81117b64:	00ffdfc4 	movi	r3,-129
81117b68:	9d84b03a 	or	r2,r19,r22
81117b6c:	90e4703a 	and	r18,r18,r3
81117b70:	10017726 	beq	r2,zero,81118150 <___vfprintf_internal_r+0xb2c>
81117b74:	b0038326 	beq	r22,zero,81118984 <___vfprintf_internal_r+0x1360>
81117b78:	dc402a15 	stw	r17,168(sp)
81117b7c:	dc001e04 	addi	r16,sp,120
81117b80:	b023883a 	mov	r17,r22
81117b84:	402d883a 	mov	r22,r8
81117b88:	9809883a 	mov	r4,r19
81117b8c:	880b883a 	mov	r5,r17
81117b90:	01800284 	movi	r6,10
81117b94:	000f883a 	mov	r7,zero
81117b98:	11265c80 	call	811265c8 <__umoddi3>
81117b9c:	10800c04 	addi	r2,r2,48
81117ba0:	843fffc4 	addi	r16,r16,-1
81117ba4:	9809883a 	mov	r4,r19
81117ba8:	880b883a 	mov	r5,r17
81117bac:	80800005 	stb	r2,0(r16)
81117bb0:	01800284 	movi	r6,10
81117bb4:	000f883a 	mov	r7,zero
81117bb8:	11260480 	call	81126048 <__udivdi3>
81117bbc:	1027883a 	mov	r19,r2
81117bc0:	10c4b03a 	or	r2,r2,r3
81117bc4:	1823883a 	mov	r17,r3
81117bc8:	103fef1e 	bne	r2,zero,81117b88 <__reset+0xfb0f7b88>
81117bcc:	d8c02817 	ldw	r3,160(sp)
81117bd0:	dc402a17 	ldw	r17,168(sp)
81117bd4:	b011883a 	mov	r8,r22
81117bd8:	1c07c83a 	sub	r3,r3,r16
81117bdc:	d8c02e15 	stw	r3,184(sp)
81117be0:	00005906 	br	81117d48 <___vfprintf_internal_r+0x724>
81117be4:	18c03fcc 	andi	r3,r3,255
81117be8:	1806fa1e 	bne	r3,zero,811197d4 <___vfprintf_internal_r+0x21b0>
81117bec:	9080020c 	andi	r2,r18,8
81117bf0:	10048a26 	beq	r2,zero,81118e1c <___vfprintf_internal_r+0x17f8>
81117bf4:	d8c02d17 	ldw	r3,180(sp)
81117bf8:	d9002d17 	ldw	r4,180(sp)
81117bfc:	d9402d17 	ldw	r5,180(sp)
81117c00:	18c00017 	ldw	r3,0(r3)
81117c04:	21000117 	ldw	r4,4(r4)
81117c08:	29400204 	addi	r5,r5,8
81117c0c:	d8c03615 	stw	r3,216(sp)
81117c10:	d9003815 	stw	r4,224(sp)
81117c14:	d9402d15 	stw	r5,180(sp)
81117c18:	d9003617 	ldw	r4,216(sp)
81117c1c:	d9403817 	ldw	r5,224(sp)
81117c20:	da003d15 	stw	r8,244(sp)
81117c24:	04000044 	movi	r16,1
81117c28:	111fe780 	call	8111fe78 <__fpclassifyd>
81117c2c:	da003d17 	ldw	r8,244(sp)
81117c30:	14041f1e 	bne	r2,r16,81118cb0 <___vfprintf_internal_r+0x168c>
81117c34:	d9003617 	ldw	r4,216(sp)
81117c38:	d9403817 	ldw	r5,224(sp)
81117c3c:	000d883a 	mov	r6,zero
81117c40:	000f883a 	mov	r7,zero
81117c44:	11281c00 	call	811281c0 <__ledf2>
81117c48:	da003d17 	ldw	r8,244(sp)
81117c4c:	1005be16 	blt	r2,zero,81119348 <___vfprintf_internal_r+0x1d24>
81117c50:	df002783 	ldbu	fp,158(sp)
81117c54:	008011c4 	movi	r2,71
81117c58:	1445330e 	bge	r2,r17,81119128 <___vfprintf_internal_r+0x1b04>
81117c5c:	04204534 	movhi	r16,33044
81117c60:	84077f04 	addi	r16,r16,7676
81117c64:	00c000c4 	movi	r3,3
81117c68:	00bfdfc4 	movi	r2,-129
81117c6c:	d8c02a15 	stw	r3,168(sp)
81117c70:	90a4703a 	and	r18,r18,r2
81117c74:	d8c02e15 	stw	r3,184(sp)
81117c78:	d8002915 	stw	zero,164(sp)
81117c7c:	d8003215 	stw	zero,200(sp)
81117c80:	00003706 	br	81117d60 <___vfprintf_internal_r+0x73c>
81117c84:	94800214 	ori	r18,r18,8
81117c88:	ac400007 	ldb	r17,0(r21)
81117c8c:	003ec806 	br	811177b0 <__reset+0xfb0f77b0>
81117c90:	18c03fcc 	andi	r3,r3,255
81117c94:	1806db1e 	bne	r3,zero,81119804 <___vfprintf_internal_r+0x21e0>
81117c98:	94800414 	ori	r18,r18,16
81117c9c:	9080080c 	andi	r2,r18,32
81117ca0:	1002d826 	beq	r2,zero,81118804 <___vfprintf_internal_r+0x11e0>
81117ca4:	d9402d17 	ldw	r5,180(sp)
81117ca8:	d8c02917 	ldw	r3,164(sp)
81117cac:	d8002785 	stb	zero,158(sp)
81117cb0:	28800204 	addi	r2,r5,8
81117cb4:	2cc00017 	ldw	r19,0(r5)
81117cb8:	2d800117 	ldw	r22,4(r5)
81117cbc:	18048f16 	blt	r3,zero,81118efc <___vfprintf_internal_r+0x18d8>
81117cc0:	013fdfc4 	movi	r4,-129
81117cc4:	9d86b03a 	or	r3,r19,r22
81117cc8:	d8802d15 	stw	r2,180(sp)
81117ccc:	9124703a 	and	r18,r18,r4
81117cd0:	1802d91e 	bne	r3,zero,81118838 <___vfprintf_internal_r+0x1214>
81117cd4:	d8c02917 	ldw	r3,164(sp)
81117cd8:	0039883a 	mov	fp,zero
81117cdc:	1805c326 	beq	r3,zero,811193ec <___vfprintf_internal_r+0x1dc8>
81117ce0:	0027883a 	mov	r19,zero
81117ce4:	002d883a 	mov	r22,zero
81117ce8:	dc001e04 	addi	r16,sp,120
81117cec:	9806d0fa 	srli	r3,r19,3
81117cf0:	b008977a 	slli	r4,r22,29
81117cf4:	b02cd0fa 	srli	r22,r22,3
81117cf8:	9cc001cc 	andi	r19,r19,7
81117cfc:	98800c04 	addi	r2,r19,48
81117d00:	843fffc4 	addi	r16,r16,-1
81117d04:	20e6b03a 	or	r19,r4,r3
81117d08:	80800005 	stb	r2,0(r16)
81117d0c:	9d86b03a 	or	r3,r19,r22
81117d10:	183ff61e 	bne	r3,zero,81117cec <__reset+0xfb0f7cec>
81117d14:	90c0004c 	andi	r3,r18,1
81117d18:	18013b26 	beq	r3,zero,81118208 <___vfprintf_internal_r+0xbe4>
81117d1c:	10803fcc 	andi	r2,r2,255
81117d20:	1080201c 	xori	r2,r2,128
81117d24:	10bfe004 	addi	r2,r2,-128
81117d28:	00c00c04 	movi	r3,48
81117d2c:	10c13626 	beq	r2,r3,81118208 <___vfprintf_internal_r+0xbe4>
81117d30:	80ffffc5 	stb	r3,-1(r16)
81117d34:	d8c02817 	ldw	r3,160(sp)
81117d38:	80bfffc4 	addi	r2,r16,-1
81117d3c:	1021883a 	mov	r16,r2
81117d40:	1887c83a 	sub	r3,r3,r2
81117d44:	d8c02e15 	stw	r3,184(sp)
81117d48:	d8802e17 	ldw	r2,184(sp)
81117d4c:	d9002917 	ldw	r4,164(sp)
81117d50:	1100010e 	bge	r2,r4,81117d58 <___vfprintf_internal_r+0x734>
81117d54:	2005883a 	mov	r2,r4
81117d58:	d8802a15 	stw	r2,168(sp)
81117d5c:	d8003215 	stw	zero,200(sp)
81117d60:	e7003fcc 	andi	fp,fp,255
81117d64:	e700201c 	xori	fp,fp,128
81117d68:	e73fe004 	addi	fp,fp,-128
81117d6c:	e0000326 	beq	fp,zero,81117d7c <___vfprintf_internal_r+0x758>
81117d70:	d8c02a17 	ldw	r3,168(sp)
81117d74:	18c00044 	addi	r3,r3,1
81117d78:	d8c02a15 	stw	r3,168(sp)
81117d7c:	90c0008c 	andi	r3,r18,2
81117d80:	d8c02b15 	stw	r3,172(sp)
81117d84:	18000326 	beq	r3,zero,81117d94 <___vfprintf_internal_r+0x770>
81117d88:	d8c02a17 	ldw	r3,168(sp)
81117d8c:	18c00084 	addi	r3,r3,2
81117d90:	d8c02a15 	stw	r3,168(sp)
81117d94:	90c0210c 	andi	r3,r18,132
81117d98:	d8c03015 	stw	r3,192(sp)
81117d9c:	1801a31e 	bne	r3,zero,8111842c <___vfprintf_internal_r+0xe08>
81117da0:	d9003117 	ldw	r4,196(sp)
81117da4:	d8c02a17 	ldw	r3,168(sp)
81117da8:	20e7c83a 	sub	r19,r4,r3
81117dac:	04c19f0e 	bge	zero,r19,8111842c <___vfprintf_internal_r+0xe08>
81117db0:	02400404 	movi	r9,16
81117db4:	d8c02017 	ldw	r3,128(sp)
81117db8:	d8801f17 	ldw	r2,124(sp)
81117dbc:	4cc50d0e 	bge	r9,r19,811191f4 <___vfprintf_internal_r+0x1bd0>
81117dc0:	01604534 	movhi	r5,33044
81117dc4:	29479a84 	addi	r5,r5,7786
81117dc8:	dc403b15 	stw	r17,236(sp)
81117dcc:	d9403515 	stw	r5,212(sp)
81117dd0:	9823883a 	mov	r17,r19
81117dd4:	482d883a 	mov	r22,r9
81117dd8:	9027883a 	mov	r19,r18
81117ddc:	070001c4 	movi	fp,7
81117de0:	8025883a 	mov	r18,r16
81117de4:	dc002c17 	ldw	r16,176(sp)
81117de8:	00000306 	br	81117df8 <___vfprintf_internal_r+0x7d4>
81117dec:	8c7ffc04 	addi	r17,r17,-16
81117df0:	42000204 	addi	r8,r8,8
81117df4:	b440130e 	bge	r22,r17,81117e44 <___vfprintf_internal_r+0x820>
81117df8:	01204534 	movhi	r4,33044
81117dfc:	18c00404 	addi	r3,r3,16
81117e00:	10800044 	addi	r2,r2,1
81117e04:	21079a84 	addi	r4,r4,7786
81117e08:	41000015 	stw	r4,0(r8)
81117e0c:	45800115 	stw	r22,4(r8)
81117e10:	d8c02015 	stw	r3,128(sp)
81117e14:	d8801f15 	stw	r2,124(sp)
81117e18:	e0bff40e 	bge	fp,r2,81117dec <__reset+0xfb0f7dec>
81117e1c:	d9801e04 	addi	r6,sp,120
81117e20:	b80b883a 	mov	r5,r23
81117e24:	8009883a 	mov	r4,r16
81117e28:	11238140 	call	81123814 <__sprint_r>
81117e2c:	103f011e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81117e30:	8c7ffc04 	addi	r17,r17,-16
81117e34:	d8c02017 	ldw	r3,128(sp)
81117e38:	d8801f17 	ldw	r2,124(sp)
81117e3c:	da000404 	addi	r8,sp,16
81117e40:	b47fed16 	blt	r22,r17,81117df8 <__reset+0xfb0f7df8>
81117e44:	9021883a 	mov	r16,r18
81117e48:	9825883a 	mov	r18,r19
81117e4c:	8827883a 	mov	r19,r17
81117e50:	dc403b17 	ldw	r17,236(sp)
81117e54:	d9403517 	ldw	r5,212(sp)
81117e58:	98c7883a 	add	r3,r19,r3
81117e5c:	10800044 	addi	r2,r2,1
81117e60:	41400015 	stw	r5,0(r8)
81117e64:	44c00115 	stw	r19,4(r8)
81117e68:	d8c02015 	stw	r3,128(sp)
81117e6c:	d8801f15 	stw	r2,124(sp)
81117e70:	010001c4 	movi	r4,7
81117e74:	2082a316 	blt	r4,r2,81118904 <___vfprintf_internal_r+0x12e0>
81117e78:	df002787 	ldb	fp,158(sp)
81117e7c:	42000204 	addi	r8,r8,8
81117e80:	e0000c26 	beq	fp,zero,81117eb4 <___vfprintf_internal_r+0x890>
81117e84:	d8801f17 	ldw	r2,124(sp)
81117e88:	d9002784 	addi	r4,sp,158
81117e8c:	18c00044 	addi	r3,r3,1
81117e90:	10800044 	addi	r2,r2,1
81117e94:	41000015 	stw	r4,0(r8)
81117e98:	01000044 	movi	r4,1
81117e9c:	41000115 	stw	r4,4(r8)
81117ea0:	d8c02015 	stw	r3,128(sp)
81117ea4:	d8801f15 	stw	r2,124(sp)
81117ea8:	010001c4 	movi	r4,7
81117eac:	20823c16 	blt	r4,r2,811187a0 <___vfprintf_internal_r+0x117c>
81117eb0:	42000204 	addi	r8,r8,8
81117eb4:	d8802b17 	ldw	r2,172(sp)
81117eb8:	10000c26 	beq	r2,zero,81117eec <___vfprintf_internal_r+0x8c8>
81117ebc:	d8801f17 	ldw	r2,124(sp)
81117ec0:	d9002704 	addi	r4,sp,156
81117ec4:	18c00084 	addi	r3,r3,2
81117ec8:	10800044 	addi	r2,r2,1
81117ecc:	41000015 	stw	r4,0(r8)
81117ed0:	01000084 	movi	r4,2
81117ed4:	41000115 	stw	r4,4(r8)
81117ed8:	d8c02015 	stw	r3,128(sp)
81117edc:	d8801f15 	stw	r2,124(sp)
81117ee0:	010001c4 	movi	r4,7
81117ee4:	20823616 	blt	r4,r2,811187c0 <___vfprintf_internal_r+0x119c>
81117ee8:	42000204 	addi	r8,r8,8
81117eec:	d9003017 	ldw	r4,192(sp)
81117ef0:	00802004 	movi	r2,128
81117ef4:	20819926 	beq	r4,r2,8111855c <___vfprintf_internal_r+0xf38>
81117ef8:	d9402917 	ldw	r5,164(sp)
81117efc:	d8802e17 	ldw	r2,184(sp)
81117f00:	28adc83a 	sub	r22,r5,r2
81117f04:	0580310e 	bge	zero,r22,81117fcc <___vfprintf_internal_r+0x9a8>
81117f08:	07000404 	movi	fp,16
81117f0c:	d8801f17 	ldw	r2,124(sp)
81117f10:	e584140e 	bge	fp,r22,81118f64 <___vfprintf_internal_r+0x1940>
81117f14:	01604534 	movhi	r5,33044
81117f18:	29479684 	addi	r5,r5,7770
81117f1c:	dc402915 	stw	r17,164(sp)
81117f20:	d9402b15 	stw	r5,172(sp)
81117f24:	b023883a 	mov	r17,r22
81117f28:	04c001c4 	movi	r19,7
81117f2c:	a82d883a 	mov	r22,r21
81117f30:	902b883a 	mov	r21,r18
81117f34:	8025883a 	mov	r18,r16
81117f38:	dc002c17 	ldw	r16,176(sp)
81117f3c:	00000306 	br	81117f4c <___vfprintf_internal_r+0x928>
81117f40:	8c7ffc04 	addi	r17,r17,-16
81117f44:	42000204 	addi	r8,r8,8
81117f48:	e440110e 	bge	fp,r17,81117f90 <___vfprintf_internal_r+0x96c>
81117f4c:	18c00404 	addi	r3,r3,16
81117f50:	10800044 	addi	r2,r2,1
81117f54:	45000015 	stw	r20,0(r8)
81117f58:	47000115 	stw	fp,4(r8)
81117f5c:	d8c02015 	stw	r3,128(sp)
81117f60:	d8801f15 	stw	r2,124(sp)
81117f64:	98bff60e 	bge	r19,r2,81117f40 <__reset+0xfb0f7f40>
81117f68:	d9801e04 	addi	r6,sp,120
81117f6c:	b80b883a 	mov	r5,r23
81117f70:	8009883a 	mov	r4,r16
81117f74:	11238140 	call	81123814 <__sprint_r>
81117f78:	103eae1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81117f7c:	8c7ffc04 	addi	r17,r17,-16
81117f80:	d8c02017 	ldw	r3,128(sp)
81117f84:	d8801f17 	ldw	r2,124(sp)
81117f88:	da000404 	addi	r8,sp,16
81117f8c:	e47fef16 	blt	fp,r17,81117f4c <__reset+0xfb0f7f4c>
81117f90:	9021883a 	mov	r16,r18
81117f94:	a825883a 	mov	r18,r21
81117f98:	b02b883a 	mov	r21,r22
81117f9c:	882d883a 	mov	r22,r17
81117fa0:	dc402917 	ldw	r17,164(sp)
81117fa4:	d9002b17 	ldw	r4,172(sp)
81117fa8:	1d87883a 	add	r3,r3,r22
81117fac:	10800044 	addi	r2,r2,1
81117fb0:	41000015 	stw	r4,0(r8)
81117fb4:	45800115 	stw	r22,4(r8)
81117fb8:	d8c02015 	stw	r3,128(sp)
81117fbc:	d8801f15 	stw	r2,124(sp)
81117fc0:	010001c4 	movi	r4,7
81117fc4:	2081ee16 	blt	r4,r2,81118780 <___vfprintf_internal_r+0x115c>
81117fc8:	42000204 	addi	r8,r8,8
81117fcc:	9080400c 	andi	r2,r18,256
81117fd0:	1001181e 	bne	r2,zero,81118434 <___vfprintf_internal_r+0xe10>
81117fd4:	d9402e17 	ldw	r5,184(sp)
81117fd8:	d8801f17 	ldw	r2,124(sp)
81117fdc:	44000015 	stw	r16,0(r8)
81117fe0:	1947883a 	add	r3,r3,r5
81117fe4:	10800044 	addi	r2,r2,1
81117fe8:	41400115 	stw	r5,4(r8)
81117fec:	d8c02015 	stw	r3,128(sp)
81117ff0:	d8801f15 	stw	r2,124(sp)
81117ff4:	010001c4 	movi	r4,7
81117ff8:	2081d316 	blt	r4,r2,81118748 <___vfprintf_internal_r+0x1124>
81117ffc:	42000204 	addi	r8,r8,8
81118000:	9480010c 	andi	r18,r18,4
81118004:	90003226 	beq	r18,zero,811180d0 <___vfprintf_internal_r+0xaac>
81118008:	d9403117 	ldw	r5,196(sp)
8111800c:	d8802a17 	ldw	r2,168(sp)
81118010:	28a1c83a 	sub	r16,r5,r2
81118014:	04002e0e 	bge	zero,r16,811180d0 <___vfprintf_internal_r+0xaac>
81118018:	04400404 	movi	r17,16
8111801c:	d8801f17 	ldw	r2,124(sp)
81118020:	8c04a20e 	bge	r17,r16,811192ac <___vfprintf_internal_r+0x1c88>
81118024:	01604534 	movhi	r5,33044
81118028:	29479a84 	addi	r5,r5,7786
8111802c:	d9403515 	stw	r5,212(sp)
81118030:	048001c4 	movi	r18,7
81118034:	dcc02c17 	ldw	r19,176(sp)
81118038:	00000306 	br	81118048 <___vfprintf_internal_r+0xa24>
8111803c:	843ffc04 	addi	r16,r16,-16
81118040:	42000204 	addi	r8,r8,8
81118044:	8c00130e 	bge	r17,r16,81118094 <___vfprintf_internal_r+0xa70>
81118048:	01204534 	movhi	r4,33044
8111804c:	18c00404 	addi	r3,r3,16
81118050:	10800044 	addi	r2,r2,1
81118054:	21079a84 	addi	r4,r4,7786
81118058:	41000015 	stw	r4,0(r8)
8111805c:	44400115 	stw	r17,4(r8)
81118060:	d8c02015 	stw	r3,128(sp)
81118064:	d8801f15 	stw	r2,124(sp)
81118068:	90bff40e 	bge	r18,r2,8111803c <__reset+0xfb0f803c>
8111806c:	d9801e04 	addi	r6,sp,120
81118070:	b80b883a 	mov	r5,r23
81118074:	9809883a 	mov	r4,r19
81118078:	11238140 	call	81123814 <__sprint_r>
8111807c:	103e6d1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118080:	843ffc04 	addi	r16,r16,-16
81118084:	d8c02017 	ldw	r3,128(sp)
81118088:	d8801f17 	ldw	r2,124(sp)
8111808c:	da000404 	addi	r8,sp,16
81118090:	8c3fed16 	blt	r17,r16,81118048 <__reset+0xfb0f8048>
81118094:	d9403517 	ldw	r5,212(sp)
81118098:	1c07883a 	add	r3,r3,r16
8111809c:	10800044 	addi	r2,r2,1
811180a0:	41400015 	stw	r5,0(r8)
811180a4:	44000115 	stw	r16,4(r8)
811180a8:	d8c02015 	stw	r3,128(sp)
811180ac:	d8801f15 	stw	r2,124(sp)
811180b0:	010001c4 	movi	r4,7
811180b4:	2080060e 	bge	r4,r2,811180d0 <___vfprintf_internal_r+0xaac>
811180b8:	d9002c17 	ldw	r4,176(sp)
811180bc:	d9801e04 	addi	r6,sp,120
811180c0:	b80b883a 	mov	r5,r23
811180c4:	11238140 	call	81123814 <__sprint_r>
811180c8:	103e5a1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811180cc:	d8c02017 	ldw	r3,128(sp)
811180d0:	d8803117 	ldw	r2,196(sp)
811180d4:	d9002a17 	ldw	r4,168(sp)
811180d8:	1100010e 	bge	r2,r4,811180e0 <___vfprintf_internal_r+0xabc>
811180dc:	2005883a 	mov	r2,r4
811180e0:	d9402f17 	ldw	r5,188(sp)
811180e4:	288b883a 	add	r5,r5,r2
811180e8:	d9402f15 	stw	r5,188(sp)
811180ec:	18019e1e 	bne	r3,zero,81118768 <___vfprintf_internal_r+0x1144>
811180f0:	a8800007 	ldb	r2,0(r21)
811180f4:	d8001f15 	stw	zero,124(sp)
811180f8:	da000404 	addi	r8,sp,16
811180fc:	103d851e 	bne	r2,zero,81117714 <__reset+0xfb0f7714>
81118100:	a821883a 	mov	r16,r21
81118104:	003d9b06 	br	81117774 <__reset+0xfb0f7774>
81118108:	18c03fcc 	andi	r3,r3,255
8111810c:	1805c11e 	bne	r3,zero,81119814 <___vfprintf_internal_r+0x21f0>
81118110:	94800414 	ori	r18,r18,16
81118114:	9080080c 	andi	r2,r18,32
81118118:	10020c26 	beq	r2,zero,8111894c <___vfprintf_internal_r+0x1328>
8111811c:	d8802d17 	ldw	r2,180(sp)
81118120:	d9002917 	ldw	r4,164(sp)
81118124:	d8002785 	stb	zero,158(sp)
81118128:	10c00204 	addi	r3,r2,8
8111812c:	14c00017 	ldw	r19,0(r2)
81118130:	15800117 	ldw	r22,4(r2)
81118134:	20040f16 	blt	r4,zero,81119174 <___vfprintf_internal_r+0x1b50>
81118138:	013fdfc4 	movi	r4,-129
8111813c:	9d84b03a 	or	r2,r19,r22
81118140:	d8c02d15 	stw	r3,180(sp)
81118144:	9124703a 	and	r18,r18,r4
81118148:	0039883a 	mov	fp,zero
8111814c:	103e891e 	bne	r2,zero,81117b74 <__reset+0xfb0f7b74>
81118150:	d9002917 	ldw	r4,164(sp)
81118154:	2002c11e 	bne	r4,zero,81118c5c <___vfprintf_internal_r+0x1638>
81118158:	d8002915 	stw	zero,164(sp)
8111815c:	d8002e15 	stw	zero,184(sp)
81118160:	dc001e04 	addi	r16,sp,120
81118164:	003ef806 	br	81117d48 <__reset+0xfb0f7d48>
81118168:	18c03fcc 	andi	r3,r3,255
8111816c:	18059d1e 	bne	r3,zero,811197e4 <___vfprintf_internal_r+0x21c0>
81118170:	01604534 	movhi	r5,33044
81118174:	29478204 	addi	r5,r5,7688
81118178:	d9403915 	stw	r5,228(sp)
8111817c:	9080080c 	andi	r2,r18,32
81118180:	10005226 	beq	r2,zero,811182cc <___vfprintf_internal_r+0xca8>
81118184:	d8802d17 	ldw	r2,180(sp)
81118188:	14c00017 	ldw	r19,0(r2)
8111818c:	15800117 	ldw	r22,4(r2)
81118190:	10800204 	addi	r2,r2,8
81118194:	d8802d15 	stw	r2,180(sp)
81118198:	9080004c 	andi	r2,r18,1
8111819c:	10019026 	beq	r2,zero,811187e0 <___vfprintf_internal_r+0x11bc>
811181a0:	9d84b03a 	or	r2,r19,r22
811181a4:	10036926 	beq	r2,zero,81118f4c <___vfprintf_internal_r+0x1928>
811181a8:	d8c02917 	ldw	r3,164(sp)
811181ac:	00800c04 	movi	r2,48
811181b0:	d8802705 	stb	r2,156(sp)
811181b4:	dc402745 	stb	r17,157(sp)
811181b8:	d8002785 	stb	zero,158(sp)
811181bc:	90800094 	ori	r2,r18,2
811181c0:	18045d16 	blt	r3,zero,81119338 <___vfprintf_internal_r+0x1d14>
811181c4:	00bfdfc4 	movi	r2,-129
811181c8:	90a4703a 	and	r18,r18,r2
811181cc:	94800094 	ori	r18,r18,2
811181d0:	0039883a 	mov	fp,zero
811181d4:	d9003917 	ldw	r4,228(sp)
811181d8:	dc001e04 	addi	r16,sp,120
811181dc:	988003cc 	andi	r2,r19,15
811181e0:	b006973a 	slli	r3,r22,28
811181e4:	2085883a 	add	r2,r4,r2
811181e8:	9826d13a 	srli	r19,r19,4
811181ec:	10800003 	ldbu	r2,0(r2)
811181f0:	b02cd13a 	srli	r22,r22,4
811181f4:	843fffc4 	addi	r16,r16,-1
811181f8:	1ce6b03a 	or	r19,r3,r19
811181fc:	80800005 	stb	r2,0(r16)
81118200:	9d84b03a 	or	r2,r19,r22
81118204:	103ff51e 	bne	r2,zero,811181dc <__reset+0xfb0f81dc>
81118208:	d8c02817 	ldw	r3,160(sp)
8111820c:	1c07c83a 	sub	r3,r3,r16
81118210:	d8c02e15 	stw	r3,184(sp)
81118214:	003ecc06 	br	81117d48 <__reset+0xfb0f7d48>
81118218:	18c03fcc 	andi	r3,r3,255
8111821c:	183e9f26 	beq	r3,zero,81117c9c <__reset+0xfb0f7c9c>
81118220:	d9c02785 	stb	r7,158(sp)
81118224:	003e9d06 	br	81117c9c <__reset+0xfb0f7c9c>
81118228:	00c00044 	movi	r3,1
8111822c:	01c00ac4 	movi	r7,43
81118230:	ac400007 	ldb	r17,0(r21)
81118234:	003d5e06 	br	811177b0 <__reset+0xfb0f77b0>
81118238:	94800814 	ori	r18,r18,32
8111823c:	ac400007 	ldb	r17,0(r21)
81118240:	003d5b06 	br	811177b0 <__reset+0xfb0f77b0>
81118244:	d8c02d17 	ldw	r3,180(sp)
81118248:	d8002785 	stb	zero,158(sp)
8111824c:	1c000017 	ldw	r16,0(r3)
81118250:	1cc00104 	addi	r19,r3,4
81118254:	80041926 	beq	r16,zero,811192bc <___vfprintf_internal_r+0x1c98>
81118258:	d9002917 	ldw	r4,164(sp)
8111825c:	2003d016 	blt	r4,zero,811191a0 <___vfprintf_internal_r+0x1b7c>
81118260:	200d883a 	mov	r6,r4
81118264:	000b883a 	mov	r5,zero
81118268:	8009883a 	mov	r4,r16
8111826c:	da003d15 	stw	r8,244(sp)
81118270:	111e6080 	call	8111e608 <memchr>
81118274:	da003d17 	ldw	r8,244(sp)
81118278:	10045426 	beq	r2,zero,811193cc <___vfprintf_internal_r+0x1da8>
8111827c:	1405c83a 	sub	r2,r2,r16
81118280:	d8802e15 	stw	r2,184(sp)
81118284:	1003cc16 	blt	r2,zero,811191b8 <___vfprintf_internal_r+0x1b94>
81118288:	df002783 	ldbu	fp,158(sp)
8111828c:	d8802a15 	stw	r2,168(sp)
81118290:	dcc02d15 	stw	r19,180(sp)
81118294:	d8002915 	stw	zero,164(sp)
81118298:	d8003215 	stw	zero,200(sp)
8111829c:	003eb006 	br	81117d60 <__reset+0xfb0f7d60>
811182a0:	18c03fcc 	andi	r3,r3,255
811182a4:	183f9b26 	beq	r3,zero,81118114 <__reset+0xfb0f8114>
811182a8:	d9c02785 	stb	r7,158(sp)
811182ac:	003f9906 	br	81118114 <__reset+0xfb0f8114>
811182b0:	18c03fcc 	andi	r3,r3,255
811182b4:	1805551e 	bne	r3,zero,8111980c <___vfprintf_internal_r+0x21e8>
811182b8:	01604534 	movhi	r5,33044
811182bc:	29478704 	addi	r5,r5,7708
811182c0:	d9403915 	stw	r5,228(sp)
811182c4:	9080080c 	andi	r2,r18,32
811182c8:	103fae1e 	bne	r2,zero,81118184 <__reset+0xfb0f8184>
811182cc:	9080040c 	andi	r2,r18,16
811182d0:	1002de26 	beq	r2,zero,81118e4c <___vfprintf_internal_r+0x1828>
811182d4:	d8c02d17 	ldw	r3,180(sp)
811182d8:	002d883a 	mov	r22,zero
811182dc:	1cc00017 	ldw	r19,0(r3)
811182e0:	18c00104 	addi	r3,r3,4
811182e4:	d8c02d15 	stw	r3,180(sp)
811182e8:	003fab06 	br	81118198 <__reset+0xfb0f8198>
811182ec:	38803fcc 	andi	r2,r7,255
811182f0:	1080201c 	xori	r2,r2,128
811182f4:	10bfe004 	addi	r2,r2,-128
811182f8:	1002d21e 	bne	r2,zero,81118e44 <___vfprintf_internal_r+0x1820>
811182fc:	00c00044 	movi	r3,1
81118300:	01c00804 	movi	r7,32
81118304:	ac400007 	ldb	r17,0(r21)
81118308:	003d2906 	br	811177b0 <__reset+0xfb0f77b0>
8111830c:	94800054 	ori	r18,r18,1
81118310:	ac400007 	ldb	r17,0(r21)
81118314:	003d2606 	br	811177b0 <__reset+0xfb0f77b0>
81118318:	18c03fcc 	andi	r3,r3,255
8111831c:	183e0526 	beq	r3,zero,81117b34 <__reset+0xfb0f7b34>
81118320:	d9c02785 	stb	r7,158(sp)
81118324:	003e0306 	br	81117b34 <__reset+0xfb0f7b34>
81118328:	94801014 	ori	r18,r18,64
8111832c:	ac400007 	ldb	r17,0(r21)
81118330:	003d1f06 	br	811177b0 <__reset+0xfb0f77b0>
81118334:	ac400007 	ldb	r17,0(r21)
81118338:	8a438726 	beq	r17,r9,81119158 <___vfprintf_internal_r+0x1b34>
8111833c:	94800414 	ori	r18,r18,16
81118340:	003d1b06 	br	811177b0 <__reset+0xfb0f77b0>
81118344:	18c03fcc 	andi	r3,r3,255
81118348:	1805341e 	bne	r3,zero,8111981c <___vfprintf_internal_r+0x21f8>
8111834c:	9080080c 	andi	r2,r18,32
81118350:	1002cd26 	beq	r2,zero,81118e88 <___vfprintf_internal_r+0x1864>
81118354:	d9402d17 	ldw	r5,180(sp)
81118358:	d9002f17 	ldw	r4,188(sp)
8111835c:	28800017 	ldw	r2,0(r5)
81118360:	2007d7fa 	srai	r3,r4,31
81118364:	29400104 	addi	r5,r5,4
81118368:	d9402d15 	stw	r5,180(sp)
8111836c:	11000015 	stw	r4,0(r2)
81118370:	10c00115 	stw	r3,4(r2)
81118374:	003ce506 	br	8111770c <__reset+0xfb0f770c>
81118378:	d8c02d17 	ldw	r3,180(sp)
8111837c:	d9002d17 	ldw	r4,180(sp)
81118380:	d8002785 	stb	zero,158(sp)
81118384:	18800017 	ldw	r2,0(r3)
81118388:	21000104 	addi	r4,r4,4
8111838c:	00c00044 	movi	r3,1
81118390:	d8c02a15 	stw	r3,168(sp)
81118394:	d8801405 	stb	r2,80(sp)
81118398:	d9002d15 	stw	r4,180(sp)
8111839c:	d8c02e15 	stw	r3,184(sp)
811183a0:	d8002915 	stw	zero,164(sp)
811183a4:	d8003215 	stw	zero,200(sp)
811183a8:	dc001404 	addi	r16,sp,80
811183ac:	0039883a 	mov	fp,zero
811183b0:	003e7206 	br	81117d7c <__reset+0xfb0f7d7c>
811183b4:	01204534 	movhi	r4,33044
811183b8:	21078704 	addi	r4,r4,7708
811183bc:	0039883a 	mov	fp,zero
811183c0:	d9003915 	stw	r4,228(sp)
811183c4:	04401e04 	movi	r17,120
811183c8:	003f8206 	br	811181d4 <__reset+0xfb0f81d4>
811183cc:	18c03fcc 	andi	r3,r3,255
811183d0:	1805061e 	bne	r3,zero,811197ec <___vfprintf_internal_r+0x21c8>
811183d4:	883d9126 	beq	r17,zero,81117a1c <__reset+0xfb0f7a1c>
811183d8:	00c00044 	movi	r3,1
811183dc:	d8c02a15 	stw	r3,168(sp)
811183e0:	dc401405 	stb	r17,80(sp)
811183e4:	d8002785 	stb	zero,158(sp)
811183e8:	003fec06 	br	8111839c <__reset+0xfb0f839c>
811183ec:	01604534 	movhi	r5,33044
811183f0:	29478704 	addi	r5,r5,7708
811183f4:	d9403915 	stw	r5,228(sp)
811183f8:	d8c02d15 	stw	r3,180(sp)
811183fc:	1025883a 	mov	r18,r2
81118400:	04401e04 	movi	r17,120
81118404:	9d84b03a 	or	r2,r19,r22
81118408:	1000fc1e 	bne	r2,zero,811187fc <___vfprintf_internal_r+0x11d8>
8111840c:	0039883a 	mov	fp,zero
81118410:	00800084 	movi	r2,2
81118414:	10803fcc 	andi	r2,r2,255
81118418:	00c00044 	movi	r3,1
8111841c:	10c20f26 	beq	r2,r3,81118c5c <___vfprintf_internal_r+0x1638>
81118420:	00c00084 	movi	r3,2
81118424:	10fd6326 	beq	r2,r3,811179b4 <__reset+0xfb0f79b4>
81118428:	003e2d06 	br	81117ce0 <__reset+0xfb0f7ce0>
8111842c:	d8c02017 	ldw	r3,128(sp)
81118430:	003e9306 	br	81117e80 <__reset+0xfb0f7e80>
81118434:	00801944 	movi	r2,101
81118438:	14407e0e 	bge	r2,r17,81118634 <___vfprintf_internal_r+0x1010>
8111843c:	d9003617 	ldw	r4,216(sp)
81118440:	d9403817 	ldw	r5,224(sp)
81118444:	000d883a 	mov	r6,zero
81118448:	000f883a 	mov	r7,zero
8111844c:	d8c03c15 	stw	r3,240(sp)
81118450:	da003d15 	stw	r8,244(sp)
81118454:	112805c0 	call	8112805c <__eqdf2>
81118458:	d8c03c17 	ldw	r3,240(sp)
8111845c:	da003d17 	ldw	r8,244(sp)
81118460:	1000f71e 	bne	r2,zero,81118840 <___vfprintf_internal_r+0x121c>
81118464:	d8801f17 	ldw	r2,124(sp)
81118468:	01204534 	movhi	r4,33044
8111846c:	21078e04 	addi	r4,r4,7736
81118470:	18c00044 	addi	r3,r3,1
81118474:	10800044 	addi	r2,r2,1
81118478:	41000015 	stw	r4,0(r8)
8111847c:	01000044 	movi	r4,1
81118480:	41000115 	stw	r4,4(r8)
81118484:	d8c02015 	stw	r3,128(sp)
81118488:	d8801f15 	stw	r2,124(sp)
8111848c:	010001c4 	movi	r4,7
81118490:	2082b816 	blt	r4,r2,81118f74 <___vfprintf_internal_r+0x1950>
81118494:	42000204 	addi	r8,r8,8
81118498:	d8802617 	ldw	r2,152(sp)
8111849c:	d9403317 	ldw	r5,204(sp)
811184a0:	11400216 	blt	r2,r5,811184ac <___vfprintf_internal_r+0xe88>
811184a4:	9080004c 	andi	r2,r18,1
811184a8:	103ed526 	beq	r2,zero,81118000 <__reset+0xfb0f8000>
811184ac:	d8803717 	ldw	r2,220(sp)
811184b0:	d9003417 	ldw	r4,208(sp)
811184b4:	d9403717 	ldw	r5,220(sp)
811184b8:	1887883a 	add	r3,r3,r2
811184bc:	d8801f17 	ldw	r2,124(sp)
811184c0:	41000015 	stw	r4,0(r8)
811184c4:	41400115 	stw	r5,4(r8)
811184c8:	10800044 	addi	r2,r2,1
811184cc:	d8c02015 	stw	r3,128(sp)
811184d0:	d8801f15 	stw	r2,124(sp)
811184d4:	010001c4 	movi	r4,7
811184d8:	20832916 	blt	r4,r2,81119180 <___vfprintf_internal_r+0x1b5c>
811184dc:	42000204 	addi	r8,r8,8
811184e0:	d8803317 	ldw	r2,204(sp)
811184e4:	143fffc4 	addi	r16,r2,-1
811184e8:	043ec50e 	bge	zero,r16,81118000 <__reset+0xfb0f8000>
811184ec:	04400404 	movi	r17,16
811184f0:	d8801f17 	ldw	r2,124(sp)
811184f4:	8c00880e 	bge	r17,r16,81118718 <___vfprintf_internal_r+0x10f4>
811184f8:	01604534 	movhi	r5,33044
811184fc:	29479684 	addi	r5,r5,7770
81118500:	d9402b15 	stw	r5,172(sp)
81118504:	058001c4 	movi	r22,7
81118508:	dcc02c17 	ldw	r19,176(sp)
8111850c:	00000306 	br	8111851c <___vfprintf_internal_r+0xef8>
81118510:	42000204 	addi	r8,r8,8
81118514:	843ffc04 	addi	r16,r16,-16
81118518:	8c00820e 	bge	r17,r16,81118724 <___vfprintf_internal_r+0x1100>
8111851c:	18c00404 	addi	r3,r3,16
81118520:	10800044 	addi	r2,r2,1
81118524:	45000015 	stw	r20,0(r8)
81118528:	44400115 	stw	r17,4(r8)
8111852c:	d8c02015 	stw	r3,128(sp)
81118530:	d8801f15 	stw	r2,124(sp)
81118534:	b0bff60e 	bge	r22,r2,81118510 <__reset+0xfb0f8510>
81118538:	d9801e04 	addi	r6,sp,120
8111853c:	b80b883a 	mov	r5,r23
81118540:	9809883a 	mov	r4,r19
81118544:	11238140 	call	81123814 <__sprint_r>
81118548:	103d3a1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
8111854c:	d8c02017 	ldw	r3,128(sp)
81118550:	d8801f17 	ldw	r2,124(sp)
81118554:	da000404 	addi	r8,sp,16
81118558:	003fee06 	br	81118514 <__reset+0xfb0f8514>
8111855c:	d9403117 	ldw	r5,196(sp)
81118560:	d8802a17 	ldw	r2,168(sp)
81118564:	28adc83a 	sub	r22,r5,r2
81118568:	05be630e 	bge	zero,r22,81117ef8 <__reset+0xfb0f7ef8>
8111856c:	07000404 	movi	fp,16
81118570:	d8801f17 	ldw	r2,124(sp)
81118574:	e5838f0e 	bge	fp,r22,811193b4 <___vfprintf_internal_r+0x1d90>
81118578:	01604534 	movhi	r5,33044
8111857c:	29479684 	addi	r5,r5,7770
81118580:	dc403015 	stw	r17,192(sp)
81118584:	d9402b15 	stw	r5,172(sp)
81118588:	b023883a 	mov	r17,r22
8111858c:	04c001c4 	movi	r19,7
81118590:	a82d883a 	mov	r22,r21
81118594:	902b883a 	mov	r21,r18
81118598:	8025883a 	mov	r18,r16
8111859c:	dc002c17 	ldw	r16,176(sp)
811185a0:	00000306 	br	811185b0 <___vfprintf_internal_r+0xf8c>
811185a4:	8c7ffc04 	addi	r17,r17,-16
811185a8:	42000204 	addi	r8,r8,8
811185ac:	e440110e 	bge	fp,r17,811185f4 <___vfprintf_internal_r+0xfd0>
811185b0:	18c00404 	addi	r3,r3,16
811185b4:	10800044 	addi	r2,r2,1
811185b8:	45000015 	stw	r20,0(r8)
811185bc:	47000115 	stw	fp,4(r8)
811185c0:	d8c02015 	stw	r3,128(sp)
811185c4:	d8801f15 	stw	r2,124(sp)
811185c8:	98bff60e 	bge	r19,r2,811185a4 <__reset+0xfb0f85a4>
811185cc:	d9801e04 	addi	r6,sp,120
811185d0:	b80b883a 	mov	r5,r23
811185d4:	8009883a 	mov	r4,r16
811185d8:	11238140 	call	81123814 <__sprint_r>
811185dc:	103d151e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811185e0:	8c7ffc04 	addi	r17,r17,-16
811185e4:	d8c02017 	ldw	r3,128(sp)
811185e8:	d8801f17 	ldw	r2,124(sp)
811185ec:	da000404 	addi	r8,sp,16
811185f0:	e47fef16 	blt	fp,r17,811185b0 <__reset+0xfb0f85b0>
811185f4:	9021883a 	mov	r16,r18
811185f8:	a825883a 	mov	r18,r21
811185fc:	b02b883a 	mov	r21,r22
81118600:	882d883a 	mov	r22,r17
81118604:	dc403017 	ldw	r17,192(sp)
81118608:	d9002b17 	ldw	r4,172(sp)
8111860c:	1d87883a 	add	r3,r3,r22
81118610:	10800044 	addi	r2,r2,1
81118614:	41000015 	stw	r4,0(r8)
81118618:	45800115 	stw	r22,4(r8)
8111861c:	d8c02015 	stw	r3,128(sp)
81118620:	d8801f15 	stw	r2,124(sp)
81118624:	010001c4 	movi	r4,7
81118628:	20818e16 	blt	r4,r2,81118c64 <___vfprintf_internal_r+0x1640>
8111862c:	42000204 	addi	r8,r8,8
81118630:	003e3106 	br	81117ef8 <__reset+0xfb0f7ef8>
81118634:	d9403317 	ldw	r5,204(sp)
81118638:	00800044 	movi	r2,1
8111863c:	18c00044 	addi	r3,r3,1
81118640:	1141530e 	bge	r2,r5,81118b90 <___vfprintf_internal_r+0x156c>
81118644:	dc401f17 	ldw	r17,124(sp)
81118648:	00800044 	movi	r2,1
8111864c:	40800115 	stw	r2,4(r8)
81118650:	8c400044 	addi	r17,r17,1
81118654:	44000015 	stw	r16,0(r8)
81118658:	d8c02015 	stw	r3,128(sp)
8111865c:	dc401f15 	stw	r17,124(sp)
81118660:	008001c4 	movi	r2,7
81118664:	14416b16 	blt	r2,r17,81118c14 <___vfprintf_internal_r+0x15f0>
81118668:	42000204 	addi	r8,r8,8
8111866c:	d8803717 	ldw	r2,220(sp)
81118670:	d9003417 	ldw	r4,208(sp)
81118674:	8c400044 	addi	r17,r17,1
81118678:	10c7883a 	add	r3,r2,r3
8111867c:	40800115 	stw	r2,4(r8)
81118680:	41000015 	stw	r4,0(r8)
81118684:	d8c02015 	stw	r3,128(sp)
81118688:	dc401f15 	stw	r17,124(sp)
8111868c:	008001c4 	movi	r2,7
81118690:	14416916 	blt	r2,r17,81118c38 <___vfprintf_internal_r+0x1614>
81118694:	45800204 	addi	r22,r8,8
81118698:	d9003617 	ldw	r4,216(sp)
8111869c:	d9403817 	ldw	r5,224(sp)
811186a0:	000d883a 	mov	r6,zero
811186a4:	000f883a 	mov	r7,zero
811186a8:	d8c03c15 	stw	r3,240(sp)
811186ac:	112805c0 	call	8112805c <__eqdf2>
811186b0:	d8c03c17 	ldw	r3,240(sp)
811186b4:	1000bc26 	beq	r2,zero,811189a8 <___vfprintf_internal_r+0x1384>
811186b8:	d9403317 	ldw	r5,204(sp)
811186bc:	84000044 	addi	r16,r16,1
811186c0:	8c400044 	addi	r17,r17,1
811186c4:	28bfffc4 	addi	r2,r5,-1
811186c8:	1887883a 	add	r3,r3,r2
811186cc:	b0800115 	stw	r2,4(r22)
811186d0:	b4000015 	stw	r16,0(r22)
811186d4:	d8c02015 	stw	r3,128(sp)
811186d8:	dc401f15 	stw	r17,124(sp)
811186dc:	008001c4 	movi	r2,7
811186e0:	14414316 	blt	r2,r17,81118bf0 <___vfprintf_internal_r+0x15cc>
811186e4:	b5800204 	addi	r22,r22,8
811186e8:	d9003a17 	ldw	r4,232(sp)
811186ec:	df0022c4 	addi	fp,sp,139
811186f0:	8c400044 	addi	r17,r17,1
811186f4:	20c7883a 	add	r3,r4,r3
811186f8:	b7000015 	stw	fp,0(r22)
811186fc:	b1000115 	stw	r4,4(r22)
81118700:	d8c02015 	stw	r3,128(sp)
81118704:	dc401f15 	stw	r17,124(sp)
81118708:	008001c4 	movi	r2,7
8111870c:	14400e16 	blt	r2,r17,81118748 <___vfprintf_internal_r+0x1124>
81118710:	b2000204 	addi	r8,r22,8
81118714:	003e3a06 	br	81118000 <__reset+0xfb0f8000>
81118718:	01204534 	movhi	r4,33044
8111871c:	21079684 	addi	r4,r4,7770
81118720:	d9002b15 	stw	r4,172(sp)
81118724:	d9002b17 	ldw	r4,172(sp)
81118728:	1c07883a 	add	r3,r3,r16
8111872c:	44000115 	stw	r16,4(r8)
81118730:	41000015 	stw	r4,0(r8)
81118734:	10800044 	addi	r2,r2,1
81118738:	d8c02015 	stw	r3,128(sp)
8111873c:	d8801f15 	stw	r2,124(sp)
81118740:	010001c4 	movi	r4,7
81118744:	20be2d0e 	bge	r4,r2,81117ffc <__reset+0xfb0f7ffc>
81118748:	d9002c17 	ldw	r4,176(sp)
8111874c:	d9801e04 	addi	r6,sp,120
81118750:	b80b883a 	mov	r5,r23
81118754:	11238140 	call	81123814 <__sprint_r>
81118758:	103cb61e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
8111875c:	d8c02017 	ldw	r3,128(sp)
81118760:	da000404 	addi	r8,sp,16
81118764:	003e2606 	br	81118000 <__reset+0xfb0f8000>
81118768:	d9002c17 	ldw	r4,176(sp)
8111876c:	d9801e04 	addi	r6,sp,120
81118770:	b80b883a 	mov	r5,r23
81118774:	11238140 	call	81123814 <__sprint_r>
81118778:	103e5d26 	beq	r2,zero,811180f0 <__reset+0xfb0f80f0>
8111877c:	003cad06 	br	81117a34 <__reset+0xfb0f7a34>
81118780:	d9002c17 	ldw	r4,176(sp)
81118784:	d9801e04 	addi	r6,sp,120
81118788:	b80b883a 	mov	r5,r23
8111878c:	11238140 	call	81123814 <__sprint_r>
81118790:	103ca81e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118794:	d8c02017 	ldw	r3,128(sp)
81118798:	da000404 	addi	r8,sp,16
8111879c:	003e0b06 	br	81117fcc <__reset+0xfb0f7fcc>
811187a0:	d9002c17 	ldw	r4,176(sp)
811187a4:	d9801e04 	addi	r6,sp,120
811187a8:	b80b883a 	mov	r5,r23
811187ac:	11238140 	call	81123814 <__sprint_r>
811187b0:	103ca01e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811187b4:	d8c02017 	ldw	r3,128(sp)
811187b8:	da000404 	addi	r8,sp,16
811187bc:	003dbd06 	br	81117eb4 <__reset+0xfb0f7eb4>
811187c0:	d9002c17 	ldw	r4,176(sp)
811187c4:	d9801e04 	addi	r6,sp,120
811187c8:	b80b883a 	mov	r5,r23
811187cc:	11238140 	call	81123814 <__sprint_r>
811187d0:	103c981e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811187d4:	d8c02017 	ldw	r3,128(sp)
811187d8:	da000404 	addi	r8,sp,16
811187dc:	003dc306 	br	81117eec <__reset+0xfb0f7eec>
811187e0:	d8802917 	ldw	r2,164(sp)
811187e4:	d8002785 	stb	zero,158(sp)
811187e8:	103f0616 	blt	r2,zero,81118404 <__reset+0xfb0f8404>
811187ec:	00ffdfc4 	movi	r3,-129
811187f0:	9d84b03a 	or	r2,r19,r22
811187f4:	90e4703a 	and	r18,r18,r3
811187f8:	103c6b26 	beq	r2,zero,811179a8 <__reset+0xfb0f79a8>
811187fc:	0039883a 	mov	fp,zero
81118800:	003e7406 	br	811181d4 <__reset+0xfb0f81d4>
81118804:	9080040c 	andi	r2,r18,16
81118808:	1001b326 	beq	r2,zero,81118ed8 <___vfprintf_internal_r+0x18b4>
8111880c:	d9002d17 	ldw	r4,180(sp)
81118810:	d9402917 	ldw	r5,164(sp)
81118814:	d8002785 	stb	zero,158(sp)
81118818:	20800104 	addi	r2,r4,4
8111881c:	24c00017 	ldw	r19,0(r4)
81118820:	002d883a 	mov	r22,zero
81118824:	2801b516 	blt	r5,zero,81118efc <___vfprintf_internal_r+0x18d8>
81118828:	00ffdfc4 	movi	r3,-129
8111882c:	d8802d15 	stw	r2,180(sp)
81118830:	90e4703a 	and	r18,r18,r3
81118834:	983d2726 	beq	r19,zero,81117cd4 <__reset+0xfb0f7cd4>
81118838:	0039883a 	mov	fp,zero
8111883c:	003d2a06 	br	81117ce8 <__reset+0xfb0f7ce8>
81118840:	dc402617 	ldw	r17,152(sp)
81118844:	0441d30e 	bge	zero,r17,81118f94 <___vfprintf_internal_r+0x1970>
81118848:	dc403217 	ldw	r17,200(sp)
8111884c:	d8803317 	ldw	r2,204(sp)
81118850:	1440010e 	bge	r2,r17,81118858 <___vfprintf_internal_r+0x1234>
81118854:	1023883a 	mov	r17,r2
81118858:	04400a0e 	bge	zero,r17,81118884 <___vfprintf_internal_r+0x1260>
8111885c:	d8801f17 	ldw	r2,124(sp)
81118860:	1c47883a 	add	r3,r3,r17
81118864:	44000015 	stw	r16,0(r8)
81118868:	10800044 	addi	r2,r2,1
8111886c:	44400115 	stw	r17,4(r8)
81118870:	d8c02015 	stw	r3,128(sp)
81118874:	d8801f15 	stw	r2,124(sp)
81118878:	010001c4 	movi	r4,7
8111887c:	20826516 	blt	r4,r2,81119214 <___vfprintf_internal_r+0x1bf0>
81118880:	42000204 	addi	r8,r8,8
81118884:	88026116 	blt	r17,zero,8111920c <___vfprintf_internal_r+0x1be8>
81118888:	d9003217 	ldw	r4,200(sp)
8111888c:	2463c83a 	sub	r17,r4,r17
81118890:	04407b0e 	bge	zero,r17,81118a80 <___vfprintf_internal_r+0x145c>
81118894:	05800404 	movi	r22,16
81118898:	d8801f17 	ldw	r2,124(sp)
8111889c:	b4419d0e 	bge	r22,r17,81118f14 <___vfprintf_internal_r+0x18f0>
811188a0:	01204534 	movhi	r4,33044
811188a4:	21079684 	addi	r4,r4,7770
811188a8:	d9002b15 	stw	r4,172(sp)
811188ac:	070001c4 	movi	fp,7
811188b0:	dcc02c17 	ldw	r19,176(sp)
811188b4:	00000306 	br	811188c4 <___vfprintf_internal_r+0x12a0>
811188b8:	42000204 	addi	r8,r8,8
811188bc:	8c7ffc04 	addi	r17,r17,-16
811188c0:	b441970e 	bge	r22,r17,81118f20 <___vfprintf_internal_r+0x18fc>
811188c4:	18c00404 	addi	r3,r3,16
811188c8:	10800044 	addi	r2,r2,1
811188cc:	45000015 	stw	r20,0(r8)
811188d0:	45800115 	stw	r22,4(r8)
811188d4:	d8c02015 	stw	r3,128(sp)
811188d8:	d8801f15 	stw	r2,124(sp)
811188dc:	e0bff60e 	bge	fp,r2,811188b8 <__reset+0xfb0f88b8>
811188e0:	d9801e04 	addi	r6,sp,120
811188e4:	b80b883a 	mov	r5,r23
811188e8:	9809883a 	mov	r4,r19
811188ec:	11238140 	call	81123814 <__sprint_r>
811188f0:	103c501e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811188f4:	d8c02017 	ldw	r3,128(sp)
811188f8:	d8801f17 	ldw	r2,124(sp)
811188fc:	da000404 	addi	r8,sp,16
81118900:	003fee06 	br	811188bc <__reset+0xfb0f88bc>
81118904:	d9002c17 	ldw	r4,176(sp)
81118908:	d9801e04 	addi	r6,sp,120
8111890c:	b80b883a 	mov	r5,r23
81118910:	11238140 	call	81123814 <__sprint_r>
81118914:	103c471e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118918:	d8c02017 	ldw	r3,128(sp)
8111891c:	df002787 	ldb	fp,158(sp)
81118920:	da000404 	addi	r8,sp,16
81118924:	003d5606 	br	81117e80 <__reset+0xfb0f7e80>
81118928:	9080040c 	andi	r2,r18,16
8111892c:	10016126 	beq	r2,zero,81118eb4 <___vfprintf_internal_r+0x1890>
81118930:	d8802d17 	ldw	r2,180(sp)
81118934:	14c00017 	ldw	r19,0(r2)
81118938:	10800104 	addi	r2,r2,4
8111893c:	d8802d15 	stw	r2,180(sp)
81118940:	982dd7fa 	srai	r22,r19,31
81118944:	b005883a 	mov	r2,r22
81118948:	003c8206 	br	81117b54 <__reset+0xfb0f7b54>
8111894c:	9080040c 	andi	r2,r18,16
81118950:	10003526 	beq	r2,zero,81118a28 <___vfprintf_internal_r+0x1404>
81118954:	d9402d17 	ldw	r5,180(sp)
81118958:	d8c02917 	ldw	r3,164(sp)
8111895c:	d8002785 	stb	zero,158(sp)
81118960:	28800104 	addi	r2,r5,4
81118964:	2cc00017 	ldw	r19,0(r5)
81118968:	002d883a 	mov	r22,zero
8111896c:	18003716 	blt	r3,zero,81118a4c <___vfprintf_internal_r+0x1428>
81118970:	00ffdfc4 	movi	r3,-129
81118974:	d8802d15 	stw	r2,180(sp)
81118978:	90e4703a 	and	r18,r18,r3
8111897c:	0039883a 	mov	fp,zero
81118980:	983df326 	beq	r19,zero,81118150 <__reset+0xfb0f8150>
81118984:	00800244 	movi	r2,9
81118988:	14fc7b36 	bltu	r2,r19,81117b78 <__reset+0xfb0f7b78>
8111898c:	d8c02817 	ldw	r3,160(sp)
81118990:	dc001dc4 	addi	r16,sp,119
81118994:	9cc00c04 	addi	r19,r19,48
81118998:	1c07c83a 	sub	r3,r3,r16
8111899c:	dcc01dc5 	stb	r19,119(sp)
811189a0:	d8c02e15 	stw	r3,184(sp)
811189a4:	003ce806 	br	81117d48 <__reset+0xfb0f7d48>
811189a8:	d8803317 	ldw	r2,204(sp)
811189ac:	143fffc4 	addi	r16,r2,-1
811189b0:	043f4d0e 	bge	zero,r16,811186e8 <__reset+0xfb0f86e8>
811189b4:	07000404 	movi	fp,16
811189b8:	e400810e 	bge	fp,r16,81118bc0 <___vfprintf_internal_r+0x159c>
811189bc:	01604534 	movhi	r5,33044
811189c0:	29479684 	addi	r5,r5,7770
811189c4:	d9402b15 	stw	r5,172(sp)
811189c8:	01c001c4 	movi	r7,7
811189cc:	dcc02c17 	ldw	r19,176(sp)
811189d0:	00000306 	br	811189e0 <___vfprintf_internal_r+0x13bc>
811189d4:	b5800204 	addi	r22,r22,8
811189d8:	843ffc04 	addi	r16,r16,-16
811189dc:	e4007b0e 	bge	fp,r16,81118bcc <___vfprintf_internal_r+0x15a8>
811189e0:	18c00404 	addi	r3,r3,16
811189e4:	8c400044 	addi	r17,r17,1
811189e8:	b5000015 	stw	r20,0(r22)
811189ec:	b7000115 	stw	fp,4(r22)
811189f0:	d8c02015 	stw	r3,128(sp)
811189f4:	dc401f15 	stw	r17,124(sp)
811189f8:	3c7ff60e 	bge	r7,r17,811189d4 <__reset+0xfb0f89d4>
811189fc:	d9801e04 	addi	r6,sp,120
81118a00:	b80b883a 	mov	r5,r23
81118a04:	9809883a 	mov	r4,r19
81118a08:	d9c03c15 	stw	r7,240(sp)
81118a0c:	11238140 	call	81123814 <__sprint_r>
81118a10:	d9c03c17 	ldw	r7,240(sp)
81118a14:	103c071e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118a18:	d8c02017 	ldw	r3,128(sp)
81118a1c:	dc401f17 	ldw	r17,124(sp)
81118a20:	dd800404 	addi	r22,sp,16
81118a24:	003fec06 	br	811189d8 <__reset+0xfb0f89d8>
81118a28:	9080100c 	andi	r2,r18,64
81118a2c:	d8002785 	stb	zero,158(sp)
81118a30:	10010e26 	beq	r2,zero,81118e6c <___vfprintf_internal_r+0x1848>
81118a34:	d9002d17 	ldw	r4,180(sp)
81118a38:	d9402917 	ldw	r5,164(sp)
81118a3c:	002d883a 	mov	r22,zero
81118a40:	20800104 	addi	r2,r4,4
81118a44:	24c0000b 	ldhu	r19,0(r4)
81118a48:	283fc90e 	bge	r5,zero,81118970 <__reset+0xfb0f8970>
81118a4c:	d8802d15 	stw	r2,180(sp)
81118a50:	0039883a 	mov	fp,zero
81118a54:	9d84b03a 	or	r2,r19,r22
81118a58:	103c461e 	bne	r2,zero,81117b74 <__reset+0xfb0f7b74>
81118a5c:	00800044 	movi	r2,1
81118a60:	003e6c06 	br	81118414 <__reset+0xfb0f8414>
81118a64:	d9002c17 	ldw	r4,176(sp)
81118a68:	d9801e04 	addi	r6,sp,120
81118a6c:	b80b883a 	mov	r5,r23
81118a70:	11238140 	call	81123814 <__sprint_r>
81118a74:	103bef1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118a78:	d8c02017 	ldw	r3,128(sp)
81118a7c:	da000404 	addi	r8,sp,16
81118a80:	d9003217 	ldw	r4,200(sp)
81118a84:	d8802617 	ldw	r2,152(sp)
81118a88:	d9403317 	ldw	r5,204(sp)
81118a8c:	8123883a 	add	r17,r16,r4
81118a90:	11400216 	blt	r2,r5,81118a9c <___vfprintf_internal_r+0x1478>
81118a94:	9100004c 	andi	r4,r18,1
81118a98:	20000d26 	beq	r4,zero,81118ad0 <___vfprintf_internal_r+0x14ac>
81118a9c:	d9003717 	ldw	r4,220(sp)
81118aa0:	d9403417 	ldw	r5,208(sp)
81118aa4:	1907883a 	add	r3,r3,r4
81118aa8:	d9001f17 	ldw	r4,124(sp)
81118aac:	41400015 	stw	r5,0(r8)
81118ab0:	d9403717 	ldw	r5,220(sp)
81118ab4:	21000044 	addi	r4,r4,1
81118ab8:	d8c02015 	stw	r3,128(sp)
81118abc:	41400115 	stw	r5,4(r8)
81118ac0:	d9001f15 	stw	r4,124(sp)
81118ac4:	014001c4 	movi	r5,7
81118ac8:	2901e816 	blt	r5,r4,8111926c <___vfprintf_internal_r+0x1c48>
81118acc:	42000204 	addi	r8,r8,8
81118ad0:	d9003317 	ldw	r4,204(sp)
81118ad4:	8121883a 	add	r16,r16,r4
81118ad8:	2085c83a 	sub	r2,r4,r2
81118adc:	8461c83a 	sub	r16,r16,r17
81118ae0:	1400010e 	bge	r2,r16,81118ae8 <___vfprintf_internal_r+0x14c4>
81118ae4:	1021883a 	mov	r16,r2
81118ae8:	04000a0e 	bge	zero,r16,81118b14 <___vfprintf_internal_r+0x14f0>
81118aec:	d9001f17 	ldw	r4,124(sp)
81118af0:	1c07883a 	add	r3,r3,r16
81118af4:	44400015 	stw	r17,0(r8)
81118af8:	21000044 	addi	r4,r4,1
81118afc:	44000115 	stw	r16,4(r8)
81118b00:	d8c02015 	stw	r3,128(sp)
81118b04:	d9001f15 	stw	r4,124(sp)
81118b08:	014001c4 	movi	r5,7
81118b0c:	2901fb16 	blt	r5,r4,811192fc <___vfprintf_internal_r+0x1cd8>
81118b10:	42000204 	addi	r8,r8,8
81118b14:	8001f716 	blt	r16,zero,811192f4 <___vfprintf_internal_r+0x1cd0>
81118b18:	1421c83a 	sub	r16,r2,r16
81118b1c:	043d380e 	bge	zero,r16,81118000 <__reset+0xfb0f8000>
81118b20:	04400404 	movi	r17,16
81118b24:	d8801f17 	ldw	r2,124(sp)
81118b28:	8c3efb0e 	bge	r17,r16,81118718 <__reset+0xfb0f8718>
81118b2c:	01604534 	movhi	r5,33044
81118b30:	29479684 	addi	r5,r5,7770
81118b34:	d9402b15 	stw	r5,172(sp)
81118b38:	058001c4 	movi	r22,7
81118b3c:	dcc02c17 	ldw	r19,176(sp)
81118b40:	00000306 	br	81118b50 <___vfprintf_internal_r+0x152c>
81118b44:	42000204 	addi	r8,r8,8
81118b48:	843ffc04 	addi	r16,r16,-16
81118b4c:	8c3ef50e 	bge	r17,r16,81118724 <__reset+0xfb0f8724>
81118b50:	18c00404 	addi	r3,r3,16
81118b54:	10800044 	addi	r2,r2,1
81118b58:	45000015 	stw	r20,0(r8)
81118b5c:	44400115 	stw	r17,4(r8)
81118b60:	d8c02015 	stw	r3,128(sp)
81118b64:	d8801f15 	stw	r2,124(sp)
81118b68:	b0bff60e 	bge	r22,r2,81118b44 <__reset+0xfb0f8b44>
81118b6c:	d9801e04 	addi	r6,sp,120
81118b70:	b80b883a 	mov	r5,r23
81118b74:	9809883a 	mov	r4,r19
81118b78:	11238140 	call	81123814 <__sprint_r>
81118b7c:	103bad1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118b80:	d8c02017 	ldw	r3,128(sp)
81118b84:	d8801f17 	ldw	r2,124(sp)
81118b88:	da000404 	addi	r8,sp,16
81118b8c:	003fee06 	br	81118b48 <__reset+0xfb0f8b48>
81118b90:	9088703a 	and	r4,r18,r2
81118b94:	203eab1e 	bne	r4,zero,81118644 <__reset+0xfb0f8644>
81118b98:	dc401f17 	ldw	r17,124(sp)
81118b9c:	40800115 	stw	r2,4(r8)
81118ba0:	44000015 	stw	r16,0(r8)
81118ba4:	8c400044 	addi	r17,r17,1
81118ba8:	d8c02015 	stw	r3,128(sp)
81118bac:	dc401f15 	stw	r17,124(sp)
81118bb0:	008001c4 	movi	r2,7
81118bb4:	14400e16 	blt	r2,r17,81118bf0 <___vfprintf_internal_r+0x15cc>
81118bb8:	45800204 	addi	r22,r8,8
81118bbc:	003eca06 	br	811186e8 <__reset+0xfb0f86e8>
81118bc0:	01204534 	movhi	r4,33044
81118bc4:	21079684 	addi	r4,r4,7770
81118bc8:	d9002b15 	stw	r4,172(sp)
81118bcc:	d8802b17 	ldw	r2,172(sp)
81118bd0:	1c07883a 	add	r3,r3,r16
81118bd4:	8c400044 	addi	r17,r17,1
81118bd8:	b0800015 	stw	r2,0(r22)
81118bdc:	b4000115 	stw	r16,4(r22)
81118be0:	d8c02015 	stw	r3,128(sp)
81118be4:	dc401f15 	stw	r17,124(sp)
81118be8:	008001c4 	movi	r2,7
81118bec:	147ebd0e 	bge	r2,r17,811186e4 <__reset+0xfb0f86e4>
81118bf0:	d9002c17 	ldw	r4,176(sp)
81118bf4:	d9801e04 	addi	r6,sp,120
81118bf8:	b80b883a 	mov	r5,r23
81118bfc:	11238140 	call	81123814 <__sprint_r>
81118c00:	103b8c1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118c04:	d8c02017 	ldw	r3,128(sp)
81118c08:	dc401f17 	ldw	r17,124(sp)
81118c0c:	dd800404 	addi	r22,sp,16
81118c10:	003eb506 	br	811186e8 <__reset+0xfb0f86e8>
81118c14:	d9002c17 	ldw	r4,176(sp)
81118c18:	d9801e04 	addi	r6,sp,120
81118c1c:	b80b883a 	mov	r5,r23
81118c20:	11238140 	call	81123814 <__sprint_r>
81118c24:	103b831e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118c28:	d8c02017 	ldw	r3,128(sp)
81118c2c:	dc401f17 	ldw	r17,124(sp)
81118c30:	da000404 	addi	r8,sp,16
81118c34:	003e8d06 	br	8111866c <__reset+0xfb0f866c>
81118c38:	d9002c17 	ldw	r4,176(sp)
81118c3c:	d9801e04 	addi	r6,sp,120
81118c40:	b80b883a 	mov	r5,r23
81118c44:	11238140 	call	81123814 <__sprint_r>
81118c48:	103b7a1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118c4c:	d8c02017 	ldw	r3,128(sp)
81118c50:	dc401f17 	ldw	r17,124(sp)
81118c54:	dd800404 	addi	r22,sp,16
81118c58:	003e8f06 	br	81118698 <__reset+0xfb0f8698>
81118c5c:	0027883a 	mov	r19,zero
81118c60:	003f4a06 	br	8111898c <__reset+0xfb0f898c>
81118c64:	d9002c17 	ldw	r4,176(sp)
81118c68:	d9801e04 	addi	r6,sp,120
81118c6c:	b80b883a 	mov	r5,r23
81118c70:	11238140 	call	81123814 <__sprint_r>
81118c74:	103b6f1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118c78:	d8c02017 	ldw	r3,128(sp)
81118c7c:	da000404 	addi	r8,sp,16
81118c80:	003c9d06 	br	81117ef8 <__reset+0xfb0f7ef8>
81118c84:	04e7c83a 	sub	r19,zero,r19
81118c88:	9804c03a 	cmpne	r2,r19,zero
81118c8c:	05adc83a 	sub	r22,zero,r22
81118c90:	b0adc83a 	sub	r22,r22,r2
81118c94:	d8802917 	ldw	r2,164(sp)
81118c98:	07000b44 	movi	fp,45
81118c9c:	df002785 	stb	fp,158(sp)
81118ca0:	10017b16 	blt	r2,zero,81119290 <___vfprintf_internal_r+0x1c6c>
81118ca4:	00bfdfc4 	movi	r2,-129
81118ca8:	90a4703a 	and	r18,r18,r2
81118cac:	003bb106 	br	81117b74 <__reset+0xfb0f7b74>
81118cb0:	d9003617 	ldw	r4,216(sp)
81118cb4:	d9403817 	ldw	r5,224(sp)
81118cb8:	da003d15 	stw	r8,244(sp)
81118cbc:	111fe780 	call	8111fe78 <__fpclassifyd>
81118cc0:	da003d17 	ldw	r8,244(sp)
81118cc4:	1000f026 	beq	r2,zero,81119088 <___vfprintf_internal_r+0x1a64>
81118cc8:	d9002917 	ldw	r4,164(sp)
81118ccc:	05bff7c4 	movi	r22,-33
81118cd0:	00bfffc4 	movi	r2,-1
81118cd4:	8dac703a 	and	r22,r17,r22
81118cd8:	20820026 	beq	r4,r2,811194dc <___vfprintf_internal_r+0x1eb8>
81118cdc:	008011c4 	movi	r2,71
81118ce0:	b081f726 	beq	r22,r2,811194c0 <___vfprintf_internal_r+0x1e9c>
81118ce4:	d9003817 	ldw	r4,224(sp)
81118ce8:	90c04014 	ori	r3,r18,256
81118cec:	d8c02b15 	stw	r3,172(sp)
81118cf0:	20021516 	blt	r4,zero,81119548 <___vfprintf_internal_r+0x1f24>
81118cf4:	dcc03817 	ldw	r19,224(sp)
81118cf8:	d8002a05 	stb	zero,168(sp)
81118cfc:	00801984 	movi	r2,102
81118d00:	8881f926 	beq	r17,r2,811194e8 <___vfprintf_internal_r+0x1ec4>
81118d04:	00801184 	movi	r2,70
81118d08:	88821c26 	beq	r17,r2,8111957c <___vfprintf_internal_r+0x1f58>
81118d0c:	00801144 	movi	r2,69
81118d10:	b081ef26 	beq	r22,r2,811194d0 <___vfprintf_internal_r+0x1eac>
81118d14:	d8c02917 	ldw	r3,164(sp)
81118d18:	d8802104 	addi	r2,sp,132
81118d1c:	d8800315 	stw	r2,12(sp)
81118d20:	d9403617 	ldw	r5,216(sp)
81118d24:	d8802504 	addi	r2,sp,148
81118d28:	d9002c17 	ldw	r4,176(sp)
81118d2c:	d8800215 	stw	r2,8(sp)
81118d30:	d8802604 	addi	r2,sp,152
81118d34:	d8c00015 	stw	r3,0(sp)
81118d38:	d8800115 	stw	r2,4(sp)
81118d3c:	01c00084 	movi	r7,2
81118d40:	980d883a 	mov	r6,r19
81118d44:	d8c03c15 	stw	r3,240(sp)
81118d48:	da003d15 	stw	r8,244(sp)
81118d4c:	111b7300 	call	8111b730 <_dtoa_r>
81118d50:	1021883a 	mov	r16,r2
81118d54:	008019c4 	movi	r2,103
81118d58:	d8c03c17 	ldw	r3,240(sp)
81118d5c:	da003d17 	ldw	r8,244(sp)
81118d60:	88817126 	beq	r17,r2,81119328 <___vfprintf_internal_r+0x1d04>
81118d64:	008011c4 	movi	r2,71
81118d68:	88829226 	beq	r17,r2,811197b4 <___vfprintf_internal_r+0x2190>
81118d6c:	80f9883a 	add	fp,r16,r3
81118d70:	d9003617 	ldw	r4,216(sp)
81118d74:	000d883a 	mov	r6,zero
81118d78:	000f883a 	mov	r7,zero
81118d7c:	980b883a 	mov	r5,r19
81118d80:	da003d15 	stw	r8,244(sp)
81118d84:	112805c0 	call	8112805c <__eqdf2>
81118d88:	da003d17 	ldw	r8,244(sp)
81118d8c:	10018d26 	beq	r2,zero,811193c4 <___vfprintf_internal_r+0x1da0>
81118d90:	d8802117 	ldw	r2,132(sp)
81118d94:	1700062e 	bgeu	r2,fp,81118db0 <___vfprintf_internal_r+0x178c>
81118d98:	01000c04 	movi	r4,48
81118d9c:	10c00044 	addi	r3,r2,1
81118da0:	d8c02115 	stw	r3,132(sp)
81118da4:	11000005 	stb	r4,0(r2)
81118da8:	d8802117 	ldw	r2,132(sp)
81118dac:	173ffb36 	bltu	r2,fp,81118d9c <__reset+0xfb0f8d9c>
81118db0:	1405c83a 	sub	r2,r2,r16
81118db4:	d8803315 	stw	r2,204(sp)
81118db8:	008011c4 	movi	r2,71
81118dbc:	b0817626 	beq	r22,r2,81119398 <___vfprintf_internal_r+0x1d74>
81118dc0:	00801944 	movi	r2,101
81118dc4:	1442810e 	bge	r2,r17,811197cc <___vfprintf_internal_r+0x21a8>
81118dc8:	d8c02617 	ldw	r3,152(sp)
81118dcc:	00801984 	movi	r2,102
81118dd0:	d8c03215 	stw	r3,200(sp)
81118dd4:	8881fe26 	beq	r17,r2,811195d0 <___vfprintf_internal_r+0x1fac>
81118dd8:	d8c03217 	ldw	r3,200(sp)
81118ddc:	d9003317 	ldw	r4,204(sp)
81118de0:	1901dd16 	blt	r3,r4,81119558 <___vfprintf_internal_r+0x1f34>
81118de4:	9480004c 	andi	r18,r18,1
81118de8:	90022b1e 	bne	r18,zero,81119698 <___vfprintf_internal_r+0x2074>
81118dec:	1805883a 	mov	r2,r3
81118df0:	18028016 	blt	r3,zero,811197f4 <___vfprintf_internal_r+0x21d0>
81118df4:	d8c03217 	ldw	r3,200(sp)
81118df8:	044019c4 	movi	r17,103
81118dfc:	d8c02e15 	stw	r3,184(sp)
81118e00:	df002a07 	ldb	fp,168(sp)
81118e04:	e001531e 	bne	fp,zero,81119354 <___vfprintf_internal_r+0x1d30>
81118e08:	df002783 	ldbu	fp,158(sp)
81118e0c:	d8802a15 	stw	r2,168(sp)
81118e10:	dc802b17 	ldw	r18,172(sp)
81118e14:	d8002915 	stw	zero,164(sp)
81118e18:	003bd106 	br	81117d60 <__reset+0xfb0f7d60>
81118e1c:	d8802d17 	ldw	r2,180(sp)
81118e20:	d8c02d17 	ldw	r3,180(sp)
81118e24:	d9002d17 	ldw	r4,180(sp)
81118e28:	10800017 	ldw	r2,0(r2)
81118e2c:	18c00117 	ldw	r3,4(r3)
81118e30:	21000204 	addi	r4,r4,8
81118e34:	d8803615 	stw	r2,216(sp)
81118e38:	d8c03815 	stw	r3,224(sp)
81118e3c:	d9002d15 	stw	r4,180(sp)
81118e40:	003b7506 	br	81117c18 <__reset+0xfb0f7c18>
81118e44:	ac400007 	ldb	r17,0(r21)
81118e48:	003a5906 	br	811177b0 <__reset+0xfb0f77b0>
81118e4c:	9080100c 	andi	r2,r18,64
81118e50:	1000a826 	beq	r2,zero,811190f4 <___vfprintf_internal_r+0x1ad0>
81118e54:	d9002d17 	ldw	r4,180(sp)
81118e58:	002d883a 	mov	r22,zero
81118e5c:	24c0000b 	ldhu	r19,0(r4)
81118e60:	21000104 	addi	r4,r4,4
81118e64:	d9002d15 	stw	r4,180(sp)
81118e68:	003ccb06 	br	81118198 <__reset+0xfb0f8198>
81118e6c:	d8c02d17 	ldw	r3,180(sp)
81118e70:	d9002917 	ldw	r4,164(sp)
81118e74:	002d883a 	mov	r22,zero
81118e78:	18800104 	addi	r2,r3,4
81118e7c:	1cc00017 	ldw	r19,0(r3)
81118e80:	203ebb0e 	bge	r4,zero,81118970 <__reset+0xfb0f8970>
81118e84:	003ef106 	br	81118a4c <__reset+0xfb0f8a4c>
81118e88:	9080040c 	andi	r2,r18,16
81118e8c:	1000921e 	bne	r2,zero,811190d8 <___vfprintf_internal_r+0x1ab4>
81118e90:	9480100c 	andi	r18,r18,64
81118e94:	90013926 	beq	r18,zero,8111937c <___vfprintf_internal_r+0x1d58>
81118e98:	d9002d17 	ldw	r4,180(sp)
81118e9c:	d9402f17 	ldw	r5,188(sp)
81118ea0:	20800017 	ldw	r2,0(r4)
81118ea4:	21000104 	addi	r4,r4,4
81118ea8:	d9002d15 	stw	r4,180(sp)
81118eac:	1140000d 	sth	r5,0(r2)
81118eb0:	003a1606 	br	8111770c <__reset+0xfb0f770c>
81118eb4:	9080100c 	andi	r2,r18,64
81118eb8:	10008026 	beq	r2,zero,811190bc <___vfprintf_internal_r+0x1a98>
81118ebc:	d8c02d17 	ldw	r3,180(sp)
81118ec0:	1cc0000f 	ldh	r19,0(r3)
81118ec4:	18c00104 	addi	r3,r3,4
81118ec8:	d8c02d15 	stw	r3,180(sp)
81118ecc:	982dd7fa 	srai	r22,r19,31
81118ed0:	b005883a 	mov	r2,r22
81118ed4:	003b1f06 	br	81117b54 <__reset+0xfb0f7b54>
81118ed8:	9080100c 	andi	r2,r18,64
81118edc:	d8002785 	stb	zero,158(sp)
81118ee0:	10008a1e 	bne	r2,zero,8111910c <___vfprintf_internal_r+0x1ae8>
81118ee4:	d9402d17 	ldw	r5,180(sp)
81118ee8:	d8c02917 	ldw	r3,164(sp)
81118eec:	002d883a 	mov	r22,zero
81118ef0:	28800104 	addi	r2,r5,4
81118ef4:	2cc00017 	ldw	r19,0(r5)
81118ef8:	183e4b0e 	bge	r3,zero,81118828 <__reset+0xfb0f8828>
81118efc:	9d86b03a 	or	r3,r19,r22
81118f00:	d8802d15 	stw	r2,180(sp)
81118f04:	183e4c1e 	bne	r3,zero,81118838 <__reset+0xfb0f8838>
81118f08:	0039883a 	mov	fp,zero
81118f0c:	0005883a 	mov	r2,zero
81118f10:	003d4006 	br	81118414 <__reset+0xfb0f8414>
81118f14:	01604534 	movhi	r5,33044
81118f18:	29479684 	addi	r5,r5,7770
81118f1c:	d9402b15 	stw	r5,172(sp)
81118f20:	d9402b17 	ldw	r5,172(sp)
81118f24:	1c47883a 	add	r3,r3,r17
81118f28:	10800044 	addi	r2,r2,1
81118f2c:	41400015 	stw	r5,0(r8)
81118f30:	44400115 	stw	r17,4(r8)
81118f34:	d8c02015 	stw	r3,128(sp)
81118f38:	d8801f15 	stw	r2,124(sp)
81118f3c:	010001c4 	movi	r4,7
81118f40:	20bec816 	blt	r4,r2,81118a64 <__reset+0xfb0f8a64>
81118f44:	42000204 	addi	r8,r8,8
81118f48:	003ecd06 	br	81118a80 <__reset+0xfb0f8a80>
81118f4c:	d9002917 	ldw	r4,164(sp)
81118f50:	d8002785 	stb	zero,158(sp)
81118f54:	203d2d16 	blt	r4,zero,8111840c <__reset+0xfb0f840c>
81118f58:	00bfdfc4 	movi	r2,-129
81118f5c:	90a4703a 	and	r18,r18,r2
81118f60:	003a9106 	br	811179a8 <__reset+0xfb0f79a8>
81118f64:	01204534 	movhi	r4,33044
81118f68:	21079684 	addi	r4,r4,7770
81118f6c:	d9002b15 	stw	r4,172(sp)
81118f70:	003c0c06 	br	81117fa4 <__reset+0xfb0f7fa4>
81118f74:	d9002c17 	ldw	r4,176(sp)
81118f78:	d9801e04 	addi	r6,sp,120
81118f7c:	b80b883a 	mov	r5,r23
81118f80:	11238140 	call	81123814 <__sprint_r>
81118f84:	103aab1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81118f88:	d8c02017 	ldw	r3,128(sp)
81118f8c:	da000404 	addi	r8,sp,16
81118f90:	003d4106 	br	81118498 <__reset+0xfb0f8498>
81118f94:	d8801f17 	ldw	r2,124(sp)
81118f98:	01604534 	movhi	r5,33044
81118f9c:	01000044 	movi	r4,1
81118fa0:	18c00044 	addi	r3,r3,1
81118fa4:	10800044 	addi	r2,r2,1
81118fa8:	29478e04 	addi	r5,r5,7736
81118fac:	41000115 	stw	r4,4(r8)
81118fb0:	41400015 	stw	r5,0(r8)
81118fb4:	d8c02015 	stw	r3,128(sp)
81118fb8:	d8801f15 	stw	r2,124(sp)
81118fbc:	010001c4 	movi	r4,7
81118fc0:	20805c16 	blt	r4,r2,81119134 <___vfprintf_internal_r+0x1b10>
81118fc4:	42000204 	addi	r8,r8,8
81118fc8:	8800041e 	bne	r17,zero,81118fdc <___vfprintf_internal_r+0x19b8>
81118fcc:	d8803317 	ldw	r2,204(sp)
81118fd0:	1000021e 	bne	r2,zero,81118fdc <___vfprintf_internal_r+0x19b8>
81118fd4:	9080004c 	andi	r2,r18,1
81118fd8:	103c0926 	beq	r2,zero,81118000 <__reset+0xfb0f8000>
81118fdc:	d9003717 	ldw	r4,220(sp)
81118fe0:	d8801f17 	ldw	r2,124(sp)
81118fe4:	d9403417 	ldw	r5,208(sp)
81118fe8:	20c7883a 	add	r3,r4,r3
81118fec:	10800044 	addi	r2,r2,1
81118ff0:	41000115 	stw	r4,4(r8)
81118ff4:	41400015 	stw	r5,0(r8)
81118ff8:	d8c02015 	stw	r3,128(sp)
81118ffc:	d8801f15 	stw	r2,124(sp)
81119000:	010001c4 	movi	r4,7
81119004:	20812116 	blt	r4,r2,8111948c <___vfprintf_internal_r+0x1e68>
81119008:	42000204 	addi	r8,r8,8
8111900c:	0463c83a 	sub	r17,zero,r17
81119010:	0440730e 	bge	zero,r17,811191e0 <___vfprintf_internal_r+0x1bbc>
81119014:	05800404 	movi	r22,16
81119018:	b440860e 	bge	r22,r17,81119234 <___vfprintf_internal_r+0x1c10>
8111901c:	01604534 	movhi	r5,33044
81119020:	29479684 	addi	r5,r5,7770
81119024:	d9402b15 	stw	r5,172(sp)
81119028:	070001c4 	movi	fp,7
8111902c:	dcc02c17 	ldw	r19,176(sp)
81119030:	00000306 	br	81119040 <___vfprintf_internal_r+0x1a1c>
81119034:	42000204 	addi	r8,r8,8
81119038:	8c7ffc04 	addi	r17,r17,-16
8111903c:	b440800e 	bge	r22,r17,81119240 <___vfprintf_internal_r+0x1c1c>
81119040:	18c00404 	addi	r3,r3,16
81119044:	10800044 	addi	r2,r2,1
81119048:	45000015 	stw	r20,0(r8)
8111904c:	45800115 	stw	r22,4(r8)
81119050:	d8c02015 	stw	r3,128(sp)
81119054:	d8801f15 	stw	r2,124(sp)
81119058:	e0bff60e 	bge	fp,r2,81119034 <__reset+0xfb0f9034>
8111905c:	d9801e04 	addi	r6,sp,120
81119060:	b80b883a 	mov	r5,r23
81119064:	9809883a 	mov	r4,r19
81119068:	11238140 	call	81123814 <__sprint_r>
8111906c:	103a711e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119070:	d8c02017 	ldw	r3,128(sp)
81119074:	d8801f17 	ldw	r2,124(sp)
81119078:	da000404 	addi	r8,sp,16
8111907c:	003fee06 	br	81119038 <__reset+0xfb0f9038>
81119080:	00bfffc4 	movi	r2,-1
81119084:	003a6f06 	br	81117a44 <__reset+0xfb0f7a44>
81119088:	008011c4 	movi	r2,71
8111908c:	1440b816 	blt	r2,r17,81119370 <___vfprintf_internal_r+0x1d4c>
81119090:	04204534 	movhi	r16,33044
81119094:	84078004 	addi	r16,r16,7680
81119098:	00c000c4 	movi	r3,3
8111909c:	00bfdfc4 	movi	r2,-129
811190a0:	d8c02a15 	stw	r3,168(sp)
811190a4:	90a4703a 	and	r18,r18,r2
811190a8:	df002783 	ldbu	fp,158(sp)
811190ac:	d8c02e15 	stw	r3,184(sp)
811190b0:	d8002915 	stw	zero,164(sp)
811190b4:	d8003215 	stw	zero,200(sp)
811190b8:	003b2906 	br	81117d60 <__reset+0xfb0f7d60>
811190bc:	d9002d17 	ldw	r4,180(sp)
811190c0:	24c00017 	ldw	r19,0(r4)
811190c4:	21000104 	addi	r4,r4,4
811190c8:	d9002d15 	stw	r4,180(sp)
811190cc:	982dd7fa 	srai	r22,r19,31
811190d0:	b005883a 	mov	r2,r22
811190d4:	003a9f06 	br	81117b54 <__reset+0xfb0f7b54>
811190d8:	d9402d17 	ldw	r5,180(sp)
811190dc:	d8c02f17 	ldw	r3,188(sp)
811190e0:	28800017 	ldw	r2,0(r5)
811190e4:	29400104 	addi	r5,r5,4
811190e8:	d9402d15 	stw	r5,180(sp)
811190ec:	10c00015 	stw	r3,0(r2)
811190f0:	00398606 	br	8111770c <__reset+0xfb0f770c>
811190f4:	d9402d17 	ldw	r5,180(sp)
811190f8:	002d883a 	mov	r22,zero
811190fc:	2cc00017 	ldw	r19,0(r5)
81119100:	29400104 	addi	r5,r5,4
81119104:	d9402d15 	stw	r5,180(sp)
81119108:	003c2306 	br	81118198 <__reset+0xfb0f8198>
8111910c:	d8c02d17 	ldw	r3,180(sp)
81119110:	d9002917 	ldw	r4,164(sp)
81119114:	002d883a 	mov	r22,zero
81119118:	18800104 	addi	r2,r3,4
8111911c:	1cc0000b 	ldhu	r19,0(r3)
81119120:	203dc10e 	bge	r4,zero,81118828 <__reset+0xfb0f8828>
81119124:	003f7506 	br	81118efc <__reset+0xfb0f8efc>
81119128:	04204534 	movhi	r16,33044
8111912c:	84077e04 	addi	r16,r16,7672
81119130:	003acc06 	br	81117c64 <__reset+0xfb0f7c64>
81119134:	d9002c17 	ldw	r4,176(sp)
81119138:	d9801e04 	addi	r6,sp,120
8111913c:	b80b883a 	mov	r5,r23
81119140:	11238140 	call	81123814 <__sprint_r>
81119144:	103a3b1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119148:	dc402617 	ldw	r17,152(sp)
8111914c:	d8c02017 	ldw	r3,128(sp)
81119150:	da000404 	addi	r8,sp,16
81119154:	003f9c06 	br	81118fc8 <__reset+0xfb0f8fc8>
81119158:	ac400043 	ldbu	r17,1(r21)
8111915c:	94800814 	ori	r18,r18,32
81119160:	ad400044 	addi	r21,r21,1
81119164:	8c403fcc 	andi	r17,r17,255
81119168:	8c40201c 	xori	r17,r17,128
8111916c:	8c7fe004 	addi	r17,r17,-128
81119170:	00398f06 	br	811177b0 <__reset+0xfb0f77b0>
81119174:	d8c02d15 	stw	r3,180(sp)
81119178:	0039883a 	mov	fp,zero
8111917c:	003e3506 	br	81118a54 <__reset+0xfb0f8a54>
81119180:	d9002c17 	ldw	r4,176(sp)
81119184:	d9801e04 	addi	r6,sp,120
81119188:	b80b883a 	mov	r5,r23
8111918c:	11238140 	call	81123814 <__sprint_r>
81119190:	103a281e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119194:	d8c02017 	ldw	r3,128(sp)
81119198:	da000404 	addi	r8,sp,16
8111919c:	003cd006 	br	811184e0 <__reset+0xfb0f84e0>
811191a0:	8009883a 	mov	r4,r16
811191a4:	da003d15 	stw	r8,244(sp)
811191a8:	111510c0 	call	8111510c <strlen>
811191ac:	d8802e15 	stw	r2,184(sp)
811191b0:	da003d17 	ldw	r8,244(sp)
811191b4:	103c340e 	bge	r2,zero,81118288 <__reset+0xfb0f8288>
811191b8:	0005883a 	mov	r2,zero
811191bc:	003c3206 	br	81118288 <__reset+0xfb0f8288>
811191c0:	d9002c17 	ldw	r4,176(sp)
811191c4:	d9801e04 	addi	r6,sp,120
811191c8:	b80b883a 	mov	r5,r23
811191cc:	11238140 	call	81123814 <__sprint_r>
811191d0:	103a181e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811191d4:	d8c02017 	ldw	r3,128(sp)
811191d8:	d8801f17 	ldw	r2,124(sp)
811191dc:	da000404 	addi	r8,sp,16
811191e0:	d9403317 	ldw	r5,204(sp)
811191e4:	10800044 	addi	r2,r2,1
811191e8:	44000015 	stw	r16,0(r8)
811191ec:	28c7883a 	add	r3,r5,r3
811191f0:	003b7d06 	br	81117fe8 <__reset+0xfb0f7fe8>
811191f4:	01204534 	movhi	r4,33044
811191f8:	21079a84 	addi	r4,r4,7786
811191fc:	d9003515 	stw	r4,212(sp)
81119200:	003b1406 	br	81117e54 <__reset+0xfb0f7e54>
81119204:	013fffc4 	movi	r4,-1
81119208:	003a3506 	br	81117ae0 <__reset+0xfb0f7ae0>
8111920c:	0023883a 	mov	r17,zero
81119210:	003d9d06 	br	81118888 <__reset+0xfb0f8888>
81119214:	d9002c17 	ldw	r4,176(sp)
81119218:	d9801e04 	addi	r6,sp,120
8111921c:	b80b883a 	mov	r5,r23
81119220:	11238140 	call	81123814 <__sprint_r>
81119224:	103a031e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119228:	d8c02017 	ldw	r3,128(sp)
8111922c:	da000404 	addi	r8,sp,16
81119230:	003d9406 	br	81118884 <__reset+0xfb0f8884>
81119234:	01204534 	movhi	r4,33044
81119238:	21079684 	addi	r4,r4,7770
8111923c:	d9002b15 	stw	r4,172(sp)
81119240:	d9002b17 	ldw	r4,172(sp)
81119244:	1c47883a 	add	r3,r3,r17
81119248:	10800044 	addi	r2,r2,1
8111924c:	41000015 	stw	r4,0(r8)
81119250:	44400115 	stw	r17,4(r8)
81119254:	d8c02015 	stw	r3,128(sp)
81119258:	d8801f15 	stw	r2,124(sp)
8111925c:	010001c4 	movi	r4,7
81119260:	20bfd716 	blt	r4,r2,811191c0 <__reset+0xfb0f91c0>
81119264:	42000204 	addi	r8,r8,8
81119268:	003fdd06 	br	811191e0 <__reset+0xfb0f91e0>
8111926c:	d9002c17 	ldw	r4,176(sp)
81119270:	d9801e04 	addi	r6,sp,120
81119274:	b80b883a 	mov	r5,r23
81119278:	11238140 	call	81123814 <__sprint_r>
8111927c:	1039ed1e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119280:	d8802617 	ldw	r2,152(sp)
81119284:	d8c02017 	ldw	r3,128(sp)
81119288:	da000404 	addi	r8,sp,16
8111928c:	003e1006 	br	81118ad0 <__reset+0xfb0f8ad0>
81119290:	00800044 	movi	r2,1
81119294:	10803fcc 	andi	r2,r2,255
81119298:	00c00044 	movi	r3,1
8111929c:	10fa3526 	beq	r2,r3,81117b74 <__reset+0xfb0f7b74>
811192a0:	00c00084 	movi	r3,2
811192a4:	10fbcb26 	beq	r2,r3,811181d4 <__reset+0xfb0f81d4>
811192a8:	003a8f06 	br	81117ce8 <__reset+0xfb0f7ce8>
811192ac:	01204534 	movhi	r4,33044
811192b0:	21079a84 	addi	r4,r4,7786
811192b4:	d9003515 	stw	r4,212(sp)
811192b8:	003b7606 	br	81118094 <__reset+0xfb0f8094>
811192bc:	d8802917 	ldw	r2,164(sp)
811192c0:	00c00184 	movi	r3,6
811192c4:	1880012e 	bgeu	r3,r2,811192cc <___vfprintf_internal_r+0x1ca8>
811192c8:	1805883a 	mov	r2,r3
811192cc:	d8802e15 	stw	r2,184(sp)
811192d0:	1000ef16 	blt	r2,zero,81119690 <___vfprintf_internal_r+0x206c>
811192d4:	04204534 	movhi	r16,33044
811192d8:	d8802a15 	stw	r2,168(sp)
811192dc:	dcc02d15 	stw	r19,180(sp)
811192e0:	d8002915 	stw	zero,164(sp)
811192e4:	d8003215 	stw	zero,200(sp)
811192e8:	84078c04 	addi	r16,r16,7728
811192ec:	0039883a 	mov	fp,zero
811192f0:	003aa206 	br	81117d7c <__reset+0xfb0f7d7c>
811192f4:	0021883a 	mov	r16,zero
811192f8:	003e0706 	br	81118b18 <__reset+0xfb0f8b18>
811192fc:	d9002c17 	ldw	r4,176(sp)
81119300:	d9801e04 	addi	r6,sp,120
81119304:	b80b883a 	mov	r5,r23
81119308:	11238140 	call	81123814 <__sprint_r>
8111930c:	1039c91e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
81119310:	d8802617 	ldw	r2,152(sp)
81119314:	d9403317 	ldw	r5,204(sp)
81119318:	d8c02017 	ldw	r3,128(sp)
8111931c:	da000404 	addi	r8,sp,16
81119320:	2885c83a 	sub	r2,r5,r2
81119324:	003dfb06 	br	81118b14 <__reset+0xfb0f8b14>
81119328:	9080004c 	andi	r2,r18,1
8111932c:	103e8f1e 	bne	r2,zero,81118d6c <__reset+0xfb0f8d6c>
81119330:	d8802117 	ldw	r2,132(sp)
81119334:	003e9e06 	br	81118db0 <__reset+0xfb0f8db0>
81119338:	1025883a 	mov	r18,r2
8111933c:	0039883a 	mov	fp,zero
81119340:	00800084 	movi	r2,2
81119344:	003fd306 	br	81119294 <__reset+0xfb0f9294>
81119348:	07000b44 	movi	fp,45
8111934c:	df002785 	stb	fp,158(sp)
81119350:	003a4006 	br	81117c54 <__reset+0xfb0f7c54>
81119354:	00c00b44 	movi	r3,45
81119358:	d8c02785 	stb	r3,158(sp)
8111935c:	d8802a15 	stw	r2,168(sp)
81119360:	dc802b17 	ldw	r18,172(sp)
81119364:	d8002915 	stw	zero,164(sp)
81119368:	07000b44 	movi	fp,45
8111936c:	003a8006 	br	81117d70 <__reset+0xfb0f7d70>
81119370:	04204534 	movhi	r16,33044
81119374:	84078104 	addi	r16,r16,7684
81119378:	003f4706 	br	81119098 <__reset+0xfb0f9098>
8111937c:	d8c02d17 	ldw	r3,180(sp)
81119380:	d9002f17 	ldw	r4,188(sp)
81119384:	18800017 	ldw	r2,0(r3)
81119388:	18c00104 	addi	r3,r3,4
8111938c:	d8c02d15 	stw	r3,180(sp)
81119390:	11000015 	stw	r4,0(r2)
81119394:	0038dd06 	br	8111770c <__reset+0xfb0f770c>
81119398:	dd802617 	ldw	r22,152(sp)
8111939c:	00bfff44 	movi	r2,-3
811193a0:	b0801c16 	blt	r22,r2,81119414 <___vfprintf_internal_r+0x1df0>
811193a4:	d9402917 	ldw	r5,164(sp)
811193a8:	2d801a16 	blt	r5,r22,81119414 <___vfprintf_internal_r+0x1df0>
811193ac:	dd803215 	stw	r22,200(sp)
811193b0:	003e8906 	br	81118dd8 <__reset+0xfb0f8dd8>
811193b4:	01204534 	movhi	r4,33044
811193b8:	21079684 	addi	r4,r4,7770
811193bc:	d9002b15 	stw	r4,172(sp)
811193c0:	003c9106 	br	81118608 <__reset+0xfb0f8608>
811193c4:	e005883a 	mov	r2,fp
811193c8:	003e7906 	br	81118db0 <__reset+0xfb0f8db0>
811193cc:	d9402917 	ldw	r5,164(sp)
811193d0:	df002783 	ldbu	fp,158(sp)
811193d4:	dcc02d15 	stw	r19,180(sp)
811193d8:	d9402a15 	stw	r5,168(sp)
811193dc:	d9402e15 	stw	r5,184(sp)
811193e0:	d8002915 	stw	zero,164(sp)
811193e4:	d8003215 	stw	zero,200(sp)
811193e8:	003a5d06 	br	81117d60 <__reset+0xfb0f7d60>
811193ec:	9080004c 	andi	r2,r18,1
811193f0:	0039883a 	mov	fp,zero
811193f4:	10000426 	beq	r2,zero,81119408 <___vfprintf_internal_r+0x1de4>
811193f8:	00800c04 	movi	r2,48
811193fc:	dc001dc4 	addi	r16,sp,119
81119400:	d8801dc5 	stb	r2,119(sp)
81119404:	003b8006 	br	81118208 <__reset+0xfb0f8208>
81119408:	d8002e15 	stw	zero,184(sp)
8111940c:	dc001e04 	addi	r16,sp,120
81119410:	003a4d06 	br	81117d48 <__reset+0xfb0f7d48>
81119414:	8c7fff84 	addi	r17,r17,-2
81119418:	b5bfffc4 	addi	r22,r22,-1
8111941c:	dd802615 	stw	r22,152(sp)
81119420:	dc4022c5 	stb	r17,139(sp)
81119424:	b000bf16 	blt	r22,zero,81119724 <___vfprintf_internal_r+0x2100>
81119428:	00800ac4 	movi	r2,43
8111942c:	d8802305 	stb	r2,140(sp)
81119430:	00800244 	movi	r2,9
81119434:	15807016 	blt	r2,r22,811195f8 <___vfprintf_internal_r+0x1fd4>
81119438:	00800c04 	movi	r2,48
8111943c:	b5800c04 	addi	r22,r22,48
81119440:	d8802345 	stb	r2,141(sp)
81119444:	dd802385 	stb	r22,142(sp)
81119448:	d88023c4 	addi	r2,sp,143
8111944c:	df0022c4 	addi	fp,sp,139
81119450:	d8c03317 	ldw	r3,204(sp)
81119454:	1739c83a 	sub	fp,r2,fp
81119458:	d9003317 	ldw	r4,204(sp)
8111945c:	e0c7883a 	add	r3,fp,r3
81119460:	df003a15 	stw	fp,232(sp)
81119464:	d8c02e15 	stw	r3,184(sp)
81119468:	00800044 	movi	r2,1
8111946c:	1100b30e 	bge	r2,r4,8111973c <___vfprintf_internal_r+0x2118>
81119470:	d8c02e17 	ldw	r3,184(sp)
81119474:	18c00044 	addi	r3,r3,1
81119478:	d8c02e15 	stw	r3,184(sp)
8111947c:	1805883a 	mov	r2,r3
81119480:	1800ac16 	blt	r3,zero,81119734 <___vfprintf_internal_r+0x2110>
81119484:	d8003215 	stw	zero,200(sp)
81119488:	003e5d06 	br	81118e00 <__reset+0xfb0f8e00>
8111948c:	d9002c17 	ldw	r4,176(sp)
81119490:	d9801e04 	addi	r6,sp,120
81119494:	b80b883a 	mov	r5,r23
81119498:	11238140 	call	81123814 <__sprint_r>
8111949c:	1039651e 	bne	r2,zero,81117a34 <__reset+0xfb0f7a34>
811194a0:	dc402617 	ldw	r17,152(sp)
811194a4:	d8c02017 	ldw	r3,128(sp)
811194a8:	d8801f17 	ldw	r2,124(sp)
811194ac:	da000404 	addi	r8,sp,16
811194b0:	003ed606 	br	8111900c <__reset+0xfb0f900c>
811194b4:	582b883a 	mov	r21,r11
811194b8:	d8002915 	stw	zero,164(sp)
811194bc:	0038bd06 	br	811177b4 <__reset+0xfb0f77b4>
811194c0:	d8802917 	ldw	r2,164(sp)
811194c4:	103e071e 	bne	r2,zero,81118ce4 <__reset+0xfb0f8ce4>
811194c8:	dc002915 	stw	r16,164(sp)
811194cc:	003e0506 	br	81118ce4 <__reset+0xfb0f8ce4>
811194d0:	d9002917 	ldw	r4,164(sp)
811194d4:	20c00044 	addi	r3,r4,1
811194d8:	003e0f06 	br	81118d18 <__reset+0xfb0f8d18>
811194dc:	01400184 	movi	r5,6
811194e0:	d9402915 	stw	r5,164(sp)
811194e4:	003dff06 	br	81118ce4 <__reset+0xfb0f8ce4>
811194e8:	d8802104 	addi	r2,sp,132
811194ec:	d8800315 	stw	r2,12(sp)
811194f0:	d8802504 	addi	r2,sp,148
811194f4:	d8800215 	stw	r2,8(sp)
811194f8:	d8802604 	addi	r2,sp,152
811194fc:	d8800115 	stw	r2,4(sp)
81119500:	d8802917 	ldw	r2,164(sp)
81119504:	d9403617 	ldw	r5,216(sp)
81119508:	d9002c17 	ldw	r4,176(sp)
8111950c:	d8800015 	stw	r2,0(sp)
81119510:	01c000c4 	movi	r7,3
81119514:	980d883a 	mov	r6,r19
81119518:	da003d15 	stw	r8,244(sp)
8111951c:	111b7300 	call	8111b730 <_dtoa_r>
81119520:	d8c02917 	ldw	r3,164(sp)
81119524:	da003d17 	ldw	r8,244(sp)
81119528:	1021883a 	mov	r16,r2
8111952c:	10f9883a 	add	fp,r2,r3
81119530:	81000007 	ldb	r4,0(r16)
81119534:	00800c04 	movi	r2,48
81119538:	20805e26 	beq	r4,r2,811196b4 <___vfprintf_internal_r+0x2090>
8111953c:	d8c02617 	ldw	r3,152(sp)
81119540:	e0f9883a 	add	fp,fp,r3
81119544:	003e0a06 	br	81118d70 <__reset+0xfb0f8d70>
81119548:	00c00b44 	movi	r3,45
8111954c:	24e0003c 	xorhi	r19,r4,32768
81119550:	d8c02a05 	stb	r3,168(sp)
81119554:	003de906 	br	81118cfc <__reset+0xfb0f8cfc>
81119558:	d8c03217 	ldw	r3,200(sp)
8111955c:	00c07a0e 	bge	zero,r3,81119748 <___vfprintf_internal_r+0x2124>
81119560:	00800044 	movi	r2,1
81119564:	d9003317 	ldw	r4,204(sp)
81119568:	1105883a 	add	r2,r2,r4
8111956c:	d8802e15 	stw	r2,184(sp)
81119570:	10004e16 	blt	r2,zero,811196ac <___vfprintf_internal_r+0x2088>
81119574:	044019c4 	movi	r17,103
81119578:	003e2106 	br	81118e00 <__reset+0xfb0f8e00>
8111957c:	d9002917 	ldw	r4,164(sp)
81119580:	d8802104 	addi	r2,sp,132
81119584:	d8800315 	stw	r2,12(sp)
81119588:	d9000015 	stw	r4,0(sp)
8111958c:	d8802504 	addi	r2,sp,148
81119590:	d9403617 	ldw	r5,216(sp)
81119594:	d9002c17 	ldw	r4,176(sp)
81119598:	d8800215 	stw	r2,8(sp)
8111959c:	d8802604 	addi	r2,sp,152
811195a0:	d8800115 	stw	r2,4(sp)
811195a4:	01c000c4 	movi	r7,3
811195a8:	980d883a 	mov	r6,r19
811195ac:	da003d15 	stw	r8,244(sp)
811195b0:	111b7300 	call	8111b730 <_dtoa_r>
811195b4:	d8c02917 	ldw	r3,164(sp)
811195b8:	da003d17 	ldw	r8,244(sp)
811195bc:	1021883a 	mov	r16,r2
811195c0:	00801184 	movi	r2,70
811195c4:	80f9883a 	add	fp,r16,r3
811195c8:	88bfd926 	beq	r17,r2,81119530 <__reset+0xfb0f9530>
811195cc:	003de806 	br	81118d70 <__reset+0xfb0f8d70>
811195d0:	d9002917 	ldw	r4,164(sp)
811195d4:	00c04d0e 	bge	zero,r3,8111970c <___vfprintf_internal_r+0x20e8>
811195d8:	2000441e 	bne	r4,zero,811196ec <___vfprintf_internal_r+0x20c8>
811195dc:	9480004c 	andi	r18,r18,1
811195e0:	9000421e 	bne	r18,zero,811196ec <___vfprintf_internal_r+0x20c8>
811195e4:	1805883a 	mov	r2,r3
811195e8:	18007016 	blt	r3,zero,811197ac <___vfprintf_internal_r+0x2188>
811195ec:	d8c03217 	ldw	r3,200(sp)
811195f0:	d8c02e15 	stw	r3,184(sp)
811195f4:	003e0206 	br	81118e00 <__reset+0xfb0f8e00>
811195f8:	df0022c4 	addi	fp,sp,139
811195fc:	dc002915 	stw	r16,164(sp)
81119600:	4027883a 	mov	r19,r8
81119604:	e021883a 	mov	r16,fp
81119608:	b009883a 	mov	r4,r22
8111960c:	01400284 	movi	r5,10
81119610:	1126b8c0 	call	81126b8c <__modsi3>
81119614:	10800c04 	addi	r2,r2,48
81119618:	843fffc4 	addi	r16,r16,-1
8111961c:	b009883a 	mov	r4,r22
81119620:	01400284 	movi	r5,10
81119624:	80800005 	stb	r2,0(r16)
81119628:	1126b080 	call	81126b08 <__divsi3>
8111962c:	102d883a 	mov	r22,r2
81119630:	00800244 	movi	r2,9
81119634:	15bff416 	blt	r2,r22,81119608 <__reset+0xfb0f9608>
81119638:	9811883a 	mov	r8,r19
8111963c:	b0800c04 	addi	r2,r22,48
81119640:	8027883a 	mov	r19,r16
81119644:	997fffc4 	addi	r5,r19,-1
81119648:	98bfffc5 	stb	r2,-1(r19)
8111964c:	dc002917 	ldw	r16,164(sp)
81119650:	2f006a2e 	bgeu	r5,fp,811197fc <___vfprintf_internal_r+0x21d8>
81119654:	d9c02384 	addi	r7,sp,142
81119658:	3ccfc83a 	sub	r7,r7,r19
8111965c:	d9002344 	addi	r4,sp,141
81119660:	e1cf883a 	add	r7,fp,r7
81119664:	00000106 	br	8111966c <___vfprintf_internal_r+0x2048>
81119668:	28800003 	ldbu	r2,0(r5)
8111966c:	20800005 	stb	r2,0(r4)
81119670:	21000044 	addi	r4,r4,1
81119674:	29400044 	addi	r5,r5,1
81119678:	393ffb1e 	bne	r7,r4,81119668 <__reset+0xfb0f9668>
8111967c:	d8802304 	addi	r2,sp,140
81119680:	14c5c83a 	sub	r2,r2,r19
81119684:	d8c02344 	addi	r3,sp,141
81119688:	1885883a 	add	r2,r3,r2
8111968c:	003f7006 	br	81119450 <__reset+0xfb0f9450>
81119690:	0005883a 	mov	r2,zero
81119694:	003f0f06 	br	811192d4 <__reset+0xfb0f92d4>
81119698:	d8c03217 	ldw	r3,200(sp)
8111969c:	18c00044 	addi	r3,r3,1
811196a0:	d8c02e15 	stw	r3,184(sp)
811196a4:	1805883a 	mov	r2,r3
811196a8:	183fb20e 	bge	r3,zero,81119574 <__reset+0xfb0f9574>
811196ac:	0005883a 	mov	r2,zero
811196b0:	003fb006 	br	81119574 <__reset+0xfb0f9574>
811196b4:	d9003617 	ldw	r4,216(sp)
811196b8:	000d883a 	mov	r6,zero
811196bc:	000f883a 	mov	r7,zero
811196c0:	980b883a 	mov	r5,r19
811196c4:	d8c03c15 	stw	r3,240(sp)
811196c8:	da003d15 	stw	r8,244(sp)
811196cc:	112805c0 	call	8112805c <__eqdf2>
811196d0:	d8c03c17 	ldw	r3,240(sp)
811196d4:	da003d17 	ldw	r8,244(sp)
811196d8:	103f9826 	beq	r2,zero,8111953c <__reset+0xfb0f953c>
811196dc:	00800044 	movi	r2,1
811196e0:	10c7c83a 	sub	r3,r2,r3
811196e4:	d8c02615 	stw	r3,152(sp)
811196e8:	003f9506 	br	81119540 <__reset+0xfb0f9540>
811196ec:	d9002917 	ldw	r4,164(sp)
811196f0:	d8c03217 	ldw	r3,200(sp)
811196f4:	20800044 	addi	r2,r4,1
811196f8:	1885883a 	add	r2,r3,r2
811196fc:	d8802e15 	stw	r2,184(sp)
81119700:	103dbf0e 	bge	r2,zero,81118e00 <__reset+0xfb0f8e00>
81119704:	0005883a 	mov	r2,zero
81119708:	003dbd06 	br	81118e00 <__reset+0xfb0f8e00>
8111970c:	2000211e 	bne	r4,zero,81119794 <___vfprintf_internal_r+0x2170>
81119710:	9480004c 	andi	r18,r18,1
81119714:	90001f1e 	bne	r18,zero,81119794 <___vfprintf_internal_r+0x2170>
81119718:	00800044 	movi	r2,1
8111971c:	d8802e15 	stw	r2,184(sp)
81119720:	003db706 	br	81118e00 <__reset+0xfb0f8e00>
81119724:	00800b44 	movi	r2,45
81119728:	05adc83a 	sub	r22,zero,r22
8111972c:	d8802305 	stb	r2,140(sp)
81119730:	003f3f06 	br	81119430 <__reset+0xfb0f9430>
81119734:	0005883a 	mov	r2,zero
81119738:	003f5206 	br	81119484 <__reset+0xfb0f9484>
8111973c:	90a4703a 	and	r18,r18,r2
81119740:	903f4e26 	beq	r18,zero,8111947c <__reset+0xfb0f947c>
81119744:	003f4a06 	br	81119470 <__reset+0xfb0f9470>
81119748:	00800084 	movi	r2,2
8111974c:	10c5c83a 	sub	r2,r2,r3
81119750:	003f8406 	br	81119564 <__reset+0xfb0f9564>
81119754:	d8802d17 	ldw	r2,180(sp)
81119758:	d9002d17 	ldw	r4,180(sp)
8111975c:	ac400043 	ldbu	r17,1(r21)
81119760:	10800017 	ldw	r2,0(r2)
81119764:	582b883a 	mov	r21,r11
81119768:	d8802915 	stw	r2,164(sp)
8111976c:	20800104 	addi	r2,r4,4
81119770:	d9002917 	ldw	r4,164(sp)
81119774:	d8802d15 	stw	r2,180(sp)
81119778:	203e7a0e 	bge	r4,zero,81119164 <__reset+0xfb0f9164>
8111977c:	8c403fcc 	andi	r17,r17,255
81119780:	00bfffc4 	movi	r2,-1
81119784:	8c40201c 	xori	r17,r17,128
81119788:	d8802915 	stw	r2,164(sp)
8111978c:	8c7fe004 	addi	r17,r17,-128
81119790:	00380706 	br	811177b0 <__reset+0xfb0f77b0>
81119794:	d8c02917 	ldw	r3,164(sp)
81119798:	18c00084 	addi	r3,r3,2
8111979c:	d8c02e15 	stw	r3,184(sp)
811197a0:	1805883a 	mov	r2,r3
811197a4:	183d960e 	bge	r3,zero,81118e00 <__reset+0xfb0f8e00>
811197a8:	003fd606 	br	81119704 <__reset+0xfb0f9704>
811197ac:	0005883a 	mov	r2,zero
811197b0:	003f8e06 	br	811195ec <__reset+0xfb0f95ec>
811197b4:	9080004c 	andi	r2,r18,1
811197b8:	103f811e 	bne	r2,zero,811195c0 <__reset+0xfb0f95c0>
811197bc:	d8802117 	ldw	r2,132(sp)
811197c0:	1405c83a 	sub	r2,r2,r16
811197c4:	d8803315 	stw	r2,204(sp)
811197c8:	b47ef326 	beq	r22,r17,81119398 <__reset+0xfb0f9398>
811197cc:	dd802617 	ldw	r22,152(sp)
811197d0:	003f1106 	br	81119418 <__reset+0xfb0f9418>
811197d4:	d9c02785 	stb	r7,158(sp)
811197d8:	00390406 	br	81117bec <__reset+0xfb0f7bec>
811197dc:	d9c02785 	stb	r7,158(sp)
811197e0:	0038d306 	br	81117b30 <__reset+0xfb0f7b30>
811197e4:	d9c02785 	stb	r7,158(sp)
811197e8:	003a6106 	br	81118170 <__reset+0xfb0f8170>
811197ec:	d9c02785 	stb	r7,158(sp)
811197f0:	003af806 	br	811183d4 <__reset+0xfb0f83d4>
811197f4:	0005883a 	mov	r2,zero
811197f8:	003d7e06 	br	81118df4 <__reset+0xfb0f8df4>
811197fc:	d8802344 	addi	r2,sp,141
81119800:	003f1306 	br	81119450 <__reset+0xfb0f9450>
81119804:	d9c02785 	stb	r7,158(sp)
81119808:	00392306 	br	81117c98 <__reset+0xfb0f7c98>
8111980c:	d9c02785 	stb	r7,158(sp)
81119810:	003aa906 	br	811182b8 <__reset+0xfb0f82b8>
81119814:	d9c02785 	stb	r7,158(sp)
81119818:	003a3d06 	br	81118110 <__reset+0xfb0f8110>
8111981c:	d9c02785 	stb	r7,158(sp)
81119820:	003aca06 	br	8111834c <__reset+0xfb0f834c>

81119824 <__vfprintf_internal>:
81119824:	00a04534 	movhi	r2,33044
81119828:	10916904 	addi	r2,r2,17828
8111982c:	300f883a 	mov	r7,r6
81119830:	280d883a 	mov	r6,r5
81119834:	200b883a 	mov	r5,r4
81119838:	11000017 	ldw	r4,0(r2)
8111983c:	11176241 	jmpi	81117624 <___vfprintf_internal_r>

81119840 <__sbprintf>:
81119840:	defee204 	addi	sp,sp,-1144
81119844:	de00012e 	bgeu	sp,et,8111984c <__sbprintf+0xc>
81119848:	003b68fa 	trap	3
8111984c:	2880030b 	ldhu	r2,12(r5)
81119850:	2ac01917 	ldw	r11,100(r5)
81119854:	2a80038b 	ldhu	r10,14(r5)
81119858:	2a400717 	ldw	r9,28(r5)
8111985c:	2a000917 	ldw	r8,36(r5)
81119860:	00c10004 	movi	r3,1024
81119864:	dc011a15 	stw	r16,1128(sp)
81119868:	10bfff4c 	andi	r2,r2,65533
8111986c:	2821883a 	mov	r16,r5
81119870:	d8cb883a 	add	r5,sp,r3
81119874:	dc811c15 	stw	r18,1136(sp)
81119878:	dc411b15 	stw	r17,1132(sp)
8111987c:	dfc11d15 	stw	ra,1140(sp)
81119880:	2025883a 	mov	r18,r4
81119884:	d881030d 	sth	r2,1036(sp)
81119888:	dac11915 	stw	r11,1124(sp)
8111988c:	da81038d 	sth	r10,1038(sp)
81119890:	da410715 	stw	r9,1052(sp)
81119894:	da010915 	stw	r8,1060(sp)
81119898:	dec10015 	stw	sp,1024(sp)
8111989c:	dec10415 	stw	sp,1040(sp)
811198a0:	d8c10215 	stw	r3,1032(sp)
811198a4:	d8c10515 	stw	r3,1044(sp)
811198a8:	d8010615 	stw	zero,1048(sp)
811198ac:	11176240 	call	81117624 <___vfprintf_internal_r>
811198b0:	1023883a 	mov	r17,r2
811198b4:	10000416 	blt	r2,zero,811198c8 <__sbprintf+0x88>
811198b8:	d9410004 	addi	r5,sp,1024
811198bc:	9009883a 	mov	r4,r18
811198c0:	111cfe40 	call	8111cfe4 <_fflush_r>
811198c4:	10000d1e 	bne	r2,zero,811198fc <__sbprintf+0xbc>
811198c8:	d881030b 	ldhu	r2,1036(sp)
811198cc:	1080100c 	andi	r2,r2,64
811198d0:	10000326 	beq	r2,zero,811198e0 <__sbprintf+0xa0>
811198d4:	8080030b 	ldhu	r2,12(r16)
811198d8:	10801014 	ori	r2,r2,64
811198dc:	8080030d 	sth	r2,12(r16)
811198e0:	8805883a 	mov	r2,r17
811198e4:	dfc11d17 	ldw	ra,1140(sp)
811198e8:	dc811c17 	ldw	r18,1136(sp)
811198ec:	dc411b17 	ldw	r17,1132(sp)
811198f0:	dc011a17 	ldw	r16,1128(sp)
811198f4:	dec11e04 	addi	sp,sp,1144
811198f8:	f800283a 	ret
811198fc:	047fffc4 	movi	r17,-1
81119900:	003ff106 	br	811198c8 <__reset+0xfb0f98c8>

81119904 <__svfscanf_r>:
81119904:	deff4b04 	addi	sp,sp,-724
81119908:	de00012e 	bgeu	sp,et,81119910 <__svfscanf_r+0xc>
8111990c:	003b68fa 	trap	3
81119910:	2880030b 	ldhu	r2,12(r5)
81119914:	df00b315 	stw	fp,716(sp)
81119918:	dd80b115 	stw	r22,708(sp)
8111991c:	dfc0b415 	stw	ra,720(sp)
81119920:	ddc0b215 	stw	r23,712(sp)
81119924:	dd40b015 	stw	r21,704(sp)
81119928:	dd00af15 	stw	r20,700(sp)
8111992c:	dcc0ae15 	stw	r19,696(sp)
81119930:	dc80ad15 	stw	r18,692(sp)
81119934:	dc40ac15 	stw	r17,688(sp)
81119938:	dc00ab15 	stw	r16,684(sp)
8111993c:	10c8000c 	andi	r3,r2,8192
81119940:	d9c09c15 	stw	r7,624(sp)
81119944:	2839883a 	mov	fp,r5
81119948:	202d883a 	mov	r22,r4
8111994c:	1800061e 	bne	r3,zero,81119968 <__svfscanf_r+0x64>
81119950:	29001917 	ldw	r4,100(r5)
81119954:	00f7ffc4 	movi	r3,-8193
81119958:	10880014 	ori	r2,r2,8192
8111995c:	20c6703a 	and	r3,r4,r3
81119960:	2880030d 	sth	r2,12(r5)
81119964:	28c01915 	stw	r3,100(r5)
81119968:	30800003 	ldbu	r2,0(r6)
8111996c:	0021883a 	mov	r16,zero
81119970:	05e04534 	movhi	r23,33044
81119974:	d800a115 	stw	zero,644(sp)
81119978:	d8009e15 	stw	zero,632(sp)
8111997c:	d800a015 	stw	zero,640(sp)
81119980:	d8809b15 	stw	r2,620(sp)
81119984:	bdd16704 	addi	r23,r23,17820
81119988:	8025883a 	mov	r18,r16
8111998c:	35000044 	addi	r20,r6,1
81119990:	10001e26 	beq	r2,zero,81119a0c <__svfscanf_r+0x108>
81119994:	b9c00017 	ldw	r7,0(r23)
81119998:	3887883a 	add	r3,r7,r2
8111999c:	18c00043 	ldbu	r3,1(r3)
811199a0:	18c0020c 	andi	r3,r3,8
811199a4:	18001b26 	beq	r3,zero,81119a14 <__svfscanf_r+0x110>
811199a8:	e0800117 	ldw	r2,4(fp)
811199ac:	00800e0e 	bge	zero,r2,811199e8 <__svfscanf_r+0xe4>
811199b0:	e0c00017 	ldw	r3,0(fp)
811199b4:	b9000017 	ldw	r4,0(r23)
811199b8:	18800003 	ldbu	r2,0(r3)
811199bc:	2085883a 	add	r2,r4,r2
811199c0:	10800043 	ldbu	r2,1(r2)
811199c4:	1080020c 	andi	r2,r2,8
811199c8:	10000b26 	beq	r2,zero,811199f8 <__svfscanf_r+0xf4>
811199cc:	e0800117 	ldw	r2,4(fp)
811199d0:	18c00044 	addi	r3,r3,1
811199d4:	e0c00015 	stw	r3,0(fp)
811199d8:	10bfffc4 	addi	r2,r2,-1
811199dc:	e0800115 	stw	r2,4(fp)
811199e0:	94800044 	addi	r18,r18,1
811199e4:	00bff216 	blt	zero,r2,811199b0 <__reset+0xfb0f99b0>
811199e8:	e00b883a 	mov	r5,fp
811199ec:	b009883a 	mov	r4,r22
811199f0:	1114be40 	call	81114be4 <__srefill_r>
811199f4:	103fee26 	beq	r2,zero,811199b0 <__reset+0xfb0f99b0>
811199f8:	a00d883a 	mov	r6,r20
811199fc:	30800003 	ldbu	r2,0(r6)
81119a00:	35000044 	addi	r20,r6,1
81119a04:	d8809b15 	stw	r2,620(sp)
81119a08:	103fe21e 	bne	r2,zero,81119994 <__reset+0xfb0f9994>
81119a0c:	d880a017 	ldw	r2,640(sp)
81119a10:	00009906 	br	81119c78 <__svfscanf_r+0x374>
81119a14:	00c00944 	movi	r3,37
81119a18:	10c0881e 	bne	r2,r3,81119c3c <__svfscanf_r+0x338>
81119a1c:	30c00043 	ldbu	r3,1(r6)
81119a20:	0023883a 	mov	r17,zero
81119a24:	0027883a 	mov	r19,zero
81119a28:	01001e04 	movi	r4,120
81119a2c:	01401b04 	movi	r5,108
81119a30:	a1800044 	addi	r6,r20,1
81119a34:	20c0a236 	bltu	r4,r3,81119cc0 <__svfscanf_r+0x3bc>
81119a38:	180490ba 	slli	r2,r3,2
81119a3c:	022044b4 	movhi	r8,33042
81119a40:	42269404 	addi	r8,r8,-26032
81119a44:	1205883a 	add	r2,r2,r8
81119a48:	10800017 	ldw	r2,0(r2)
81119a4c:	1000683a 	jmp	r2
81119a50:	81119c74 	orhi	r4,r16,18033
81119a54:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a58:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a5c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a60:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a64:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a68:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a6c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a70:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a74:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a78:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a7c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a80:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a84:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a88:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a8c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a90:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a94:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a98:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119a9c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119aa0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119aa4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119aa8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119aac:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ab0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ab4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ab8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119abc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ac0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ac4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ac8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119acc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ad0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ad4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ad8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119adc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ae0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ae4:	81119c34 	orhi	r4,r16,18032
81119ae8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119aec:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119af0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119af4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119af8:	81119ca8 	cmpgeui	r4,r16,18034
81119afc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b00:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b04:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b08:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b0c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b10:	81119ddc 	xori	r4,r16,18039
81119b14:	81119ddc 	xori	r4,r16,18039
81119b18:	81119ddc 	xori	r4,r16,18039
81119b1c:	81119ddc 	xori	r4,r16,18039
81119b20:	81119ddc 	xori	r4,r16,18039
81119b24:	81119ddc 	xori	r4,r16,18039
81119b28:	81119ddc 	xori	r4,r16,18039
81119b2c:	81119ddc 	xori	r4,r16,18039
81119b30:	81119ddc 	xori	r4,r16,18039
81119b34:	81119ddc 	xori	r4,r16,18039
81119b38:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b3c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b40:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b44:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b48:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b4c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b50:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b54:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b58:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b5c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b60:	81119db0 	cmpltui	r4,r16,18038
81119b64:	81119e60 	cmpeqi	r4,r16,18041
81119b68:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b6c:	81119e60 	cmpeqi	r4,r16,18041
81119b70:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b74:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b78:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b7c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b80:	81119e4c 	andi	r4,r16,18041
81119b84:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b88:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b8c:	81119e20 	cmpeqi	r4,r16,18040
81119b90:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b94:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b98:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119b9c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ba0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ba4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119ba8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bac:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bb0:	81119df8 	rdprs	r4,r16,18039
81119bb4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bb8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bbc:	81119f94 	ori	r4,r16,18046
81119bc0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bc4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bc8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bcc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bd0:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bd4:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bd8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bdc:	81119f18 	cmpnei	r4,r16,18044
81119be0:	81119ef0 	cmpltui	r4,r16,18043
81119be4:	81119e60 	cmpeqi	r4,r16,18041
81119be8:	81119e60 	cmpeqi	r4,r16,18041
81119bec:	81119e60 	cmpeqi	r4,r16,18041
81119bf0:	81119edc 	xori	r4,r16,18043
81119bf4:	8111a020 	cmpeqi	r4,r16,18048
81119bf8:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119bfc:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c00:	81119ec8 	cmpgei	r4,r16,18043
81119c04:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c08:	81119e98 	cmpnei	r4,r16,18042
81119c0c:	81119e74 	orhi	r4,r16,18041
81119c10:	81119d84 	addi	r4,r16,18038
81119c14:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c18:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c1c:	81119d70 	cmpltui	r4,r16,18037
81119c20:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c24:	81119cf8 	rdprs	r4,r16,18035
81119c28:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c2c:	81119cc0 	call	881119cc <__reset+0x20f19cc>
81119c30:	81119df8 	rdprs	r4,r16,18039
81119c34:	d9809d15 	stw	r6,628(sp)
81119c38:	3029883a 	mov	r20,r6
81119c3c:	e0800117 	ldw	r2,4(fp)
81119c40:	0081aa0e 	bge	zero,r2,8111a2ec <__svfscanf_r+0x9e8>
81119c44:	e0800017 	ldw	r2,0(fp)
81119c48:	a0ffffc3 	ldbu	r3,-1(r20)
81119c4c:	11000003 	ldbu	r4,0(r2)
81119c50:	20ff6e1e 	bne	r4,r3,81119a0c <__reset+0xfb0f9a0c>
81119c54:	e0c00117 	ldw	r3,4(fp)
81119c58:	10800044 	addi	r2,r2,1
81119c5c:	e0800015 	stw	r2,0(fp)
81119c60:	18bfffc4 	addi	r2,r3,-1
81119c64:	e0800115 	stw	r2,4(fp)
81119c68:	94800044 	addi	r18,r18,1
81119c6c:	a00d883a 	mov	r6,r20
81119c70:	003f6206 	br	811199fc <__reset+0xfb0f99fc>
81119c74:	00bfffc4 	movi	r2,-1
81119c78:	dfc0b417 	ldw	ra,720(sp)
81119c7c:	df00b317 	ldw	fp,716(sp)
81119c80:	ddc0b217 	ldw	r23,712(sp)
81119c84:	dd80b117 	ldw	r22,708(sp)
81119c88:	dd40b017 	ldw	r21,704(sp)
81119c8c:	dd00af17 	ldw	r20,700(sp)
81119c90:	dcc0ae17 	ldw	r19,696(sp)
81119c94:	dc80ad17 	ldw	r18,692(sp)
81119c98:	dc40ac17 	ldw	r17,688(sp)
81119c9c:	dc00ab17 	ldw	r16,684(sp)
81119ca0:	dec0b504 	addi	sp,sp,724
81119ca4:	f800283a 	ret
81119ca8:	a0800043 	ldbu	r2,1(r20)
81119cac:	3029883a 	mov	r20,r6
81119cb0:	8c400414 	ori	r17,r17,16
81119cb4:	10c03fcc 	andi	r3,r2,255
81119cb8:	a1800044 	addi	r6,r20,1
81119cbc:	20ff5e2e 	bgeu	r4,r3,81119a38 <__reset+0xfb0f9a38>
81119cc0:	38c7883a 	add	r3,r7,r3
81119cc4:	18800043 	ldbu	r2,1(r3)
81119cc8:	d9809d15 	stw	r6,628(sp)
81119ccc:	00c00044 	movi	r3,1
81119cd0:	108000cc 	andi	r2,r2,3
81119cd4:	10c18f26 	beq	r2,r3,8111a314 <__svfscanf_r+0xa10>
81119cd8:	e0800117 	ldw	r2,4(fp)
81119cdc:	00808716 	blt	zero,r2,81119efc <__svfscanf_r+0x5f8>
81119ce0:	e00b883a 	mov	r5,fp
81119ce4:	b009883a 	mov	r4,r22
81119ce8:	1114be40 	call	81114be4 <__srefill_r>
81119cec:	1001431e 	bne	r2,zero,8111a1fc <__svfscanf_r+0x8f8>
81119cf0:	b9c00017 	ldw	r7,0(r23)
81119cf4:	00008106 	br	81119efc <__svfscanf_r+0x5f8>
81119cf8:	e0800117 	ldw	r2,4(fp)
81119cfc:	d9809d15 	stw	r6,628(sp)
81119d00:	0081a30e 	bge	zero,r2,8111a390 <__svfscanf_r+0xa8c>
81119d04:	00a044b4 	movhi	r2,33042
81119d08:	1086c504 	addi	r2,r2,6932
81119d0c:	02000284 	movi	r8,10
81119d10:	d880a115 	stw	r2,644(sp)
81119d14:	da009e15 	stw	r8,632(sp)
81119d18:	050000c4 	movi	r20,3
81119d1c:	e0c00017 	ldw	r3,0(fp)
81119d20:	00000206 	br	81119d2c <__svfscanf_r+0x428>
81119d24:	18c00044 	addi	r3,r3,1
81119d28:	e0c00015 	stw	r3,0(fp)
81119d2c:	19000003 	ldbu	r4,0(r3)
81119d30:	20803fcc 	andi	r2,r4,255
81119d34:	3885883a 	add	r2,r7,r2
81119d38:	10800043 	ldbu	r2,1(r2)
81119d3c:	1140020c 	andi	r5,r2,8
81119d40:	2801ab26 	beq	r5,zero,8111a3f0 <__svfscanf_r+0xaec>
81119d44:	e0800117 	ldw	r2,4(fp)
81119d48:	94800044 	addi	r18,r18,1
81119d4c:	10bfffc4 	addi	r2,r2,-1
81119d50:	e0800115 	stw	r2,4(fp)
81119d54:	00bff316 	blt	zero,r2,81119d24 <__reset+0xfb0f9d24>
81119d58:	e00b883a 	mov	r5,fp
81119d5c:	b009883a 	mov	r4,r22
81119d60:	1114be40 	call	81114be4 <__srefill_r>
81119d64:	1001251e 	bne	r2,zero,8111a1fc <__svfscanf_r+0x8f8>
81119d68:	b9c00017 	ldw	r7,0(r23)
81119d6c:	003feb06 	br	81119d1c <__reset+0xfb0f9d1c>
81119d70:	e0800117 	ldw	r2,4(fp)
81119d74:	d9809d15 	stw	r6,628(sp)
81119d78:	00818b0e 	bge	zero,r2,8111a3a8 <__svfscanf_r+0xaa4>
81119d7c:	05000084 	movi	r20,2
81119d80:	003fe606 	br	81119d1c <__reset+0xfb0f9d1c>
81119d84:	e0800117 	ldw	r2,4(fp)
81119d88:	d9809d15 	stw	r6,628(sp)
81119d8c:	8c408814 	ori	r17,r17,544
81119d90:	00801d0e 	bge	zero,r2,81119e08 <__svfscanf_r+0x504>
81119d94:	00a044b4 	movhi	r2,33042
81119d98:	1086c504 	addi	r2,r2,6932
81119d9c:	02000404 	movi	r8,16
81119da0:	d880a115 	stw	r2,644(sp)
81119da4:	da009e15 	stw	r8,632(sp)
81119da8:	050000c4 	movi	r20,3
81119dac:	003fdb06 	br	81119d1c <__reset+0xfb0f9d1c>
81119db0:	e0800117 	ldw	r2,4(fp)
81119db4:	d9809d15 	stw	r6,628(sp)
81119db8:	8c400054 	ori	r17,r17,1
81119dbc:	00bfc80e 	bge	zero,r2,81119ce0 <__reset+0xfb0f9ce0>
81119dc0:	00e04474 	movhi	r3,33041
81119dc4:	18d47a04 	addi	r3,r3,20968
81119dc8:	02000284 	movi	r8,10
81119dcc:	d8c0a115 	stw	r3,644(sp)
81119dd0:	da009e15 	stw	r8,632(sp)
81119dd4:	050000c4 	movi	r20,3
81119dd8:	003fd006 	br	81119d1c <__reset+0xfb0f9d1c>
81119ddc:	9cc002a4 	muli	r19,r19,10
81119de0:	a0800043 	ldbu	r2,1(r20)
81119de4:	3029883a 	mov	r20,r6
81119de8:	98e7883a 	add	r19,r19,r3
81119dec:	9cfff404 	addi	r19,r19,-48
81119df0:	10c03fcc 	andi	r3,r2,255
81119df4:	003f0e06 	br	81119a30 <__reset+0xfb0f9a30>
81119df8:	e0800117 	ldw	r2,4(fp)
81119dfc:	d9809d15 	stw	r6,628(sp)
81119e00:	8c408014 	ori	r17,r17,512
81119e04:	00bfe316 	blt	zero,r2,81119d94 <__reset+0xfb0f9d94>
81119e08:	e00b883a 	mov	r5,fp
81119e0c:	b009883a 	mov	r4,r22
81119e10:	1114be40 	call	81114be4 <__srefill_r>
81119e14:	1000f91e 	bne	r2,zero,8111a1fc <__svfscanf_r+0x8f8>
81119e18:	b9c00017 	ldw	r7,0(r23)
81119e1c:	003fdd06 	br	81119d94 <__reset+0xfb0f9d94>
81119e20:	e0800117 	ldw	r2,4(fp)
81119e24:	d9809d15 	stw	r6,628(sp)
81119e28:	8c400054 	ori	r17,r17,1
81119e2c:	0080140e 	bge	zero,r2,81119e80 <__svfscanf_r+0x57c>
81119e30:	00a044b4 	movhi	r2,33042
81119e34:	1086c504 	addi	r2,r2,6932
81119e38:	02000204 	movi	r8,8
81119e3c:	d880a115 	stw	r2,644(sp)
81119e40:	da009e15 	stw	r8,632(sp)
81119e44:	050000c4 	movi	r20,3
81119e48:	003fb406 	br	81119d1c <__reset+0xfb0f9d1c>
81119e4c:	a0800043 	ldbu	r2,1(r20)
81119e50:	8c400094 	ori	r17,r17,2
81119e54:	3029883a 	mov	r20,r6
81119e58:	10c03fcc 	andi	r3,r2,255
81119e5c:	003ef406 	br	81119a30 <__reset+0xfb0f9a30>
81119e60:	e0800117 	ldw	r2,4(fp)
81119e64:	d9809d15 	stw	r6,628(sp)
81119e68:	0081420e 	bge	zero,r2,8111a374 <__svfscanf_r+0xa70>
81119e6c:	05000104 	movi	r20,4
81119e70:	003faa06 	br	81119d1c <__reset+0xfb0f9d1c>
81119e74:	e0800117 	ldw	r2,4(fp)
81119e78:	d9809d15 	stw	r6,628(sp)
81119e7c:	00bfec16 	blt	zero,r2,81119e30 <__reset+0xfb0f9e30>
81119e80:	e00b883a 	mov	r5,fp
81119e84:	b009883a 	mov	r4,r22
81119e88:	1114be40 	call	81114be4 <__srefill_r>
81119e8c:	1000db1e 	bne	r2,zero,8111a1fc <__svfscanf_r+0x8f8>
81119e90:	b9c00017 	ldw	r7,0(r23)
81119e94:	003fe606 	br	81119e30 <__reset+0xfb0f9e30>
81119e98:	d9809d15 	stw	r6,628(sp)
81119e9c:	8880040c 	andi	r2,r17,16
81119ea0:	10009c1e 	bne	r2,zero,8111a114 <__svfscanf_r+0x810>
81119ea4:	8880010c 	andi	r2,r17,4
81119ea8:	10011e26 	beq	r2,zero,8111a324 <__svfscanf_r+0xa20>
81119eac:	da009c17 	ldw	r8,624(sp)
81119eb0:	3029883a 	mov	r20,r6
81119eb4:	40800017 	ldw	r2,0(r8)
81119eb8:	42000104 	addi	r8,r8,4
81119ebc:	da009c15 	stw	r8,624(sp)
81119ec0:	1480000d 	sth	r18,0(r2)
81119ec4:	003ecc06 	br	811199f8 <__reset+0xfb0f99f8>
81119ec8:	a0c00043 	ldbu	r3,1(r20)
81119ecc:	19410c26 	beq	r3,r5,8111a300 <__svfscanf_r+0x9fc>
81119ed0:	8c400054 	ori	r17,r17,1
81119ed4:	3029883a 	mov	r20,r6
81119ed8:	003ed506 	br	81119a30 <__reset+0xfb0f9a30>
81119edc:	a0800043 	ldbu	r2,1(r20)
81119ee0:	8c400114 	ori	r17,r17,4
81119ee4:	3029883a 	mov	r20,r6
81119ee8:	10c03fcc 	andi	r3,r2,255
81119eec:	003ed006 	br	81119a30 <__reset+0xfb0f9a30>
81119ef0:	e0800117 	ldw	r2,4(fp)
81119ef4:	d9809d15 	stw	r6,628(sp)
81119ef8:	00bf790e 	bge	zero,r2,81119ce0 <__reset+0xfb0f9ce0>
81119efc:	00a04474 	movhi	r2,33041
81119f00:	10947a04 	addi	r2,r2,20968
81119f04:	02000284 	movi	r8,10
81119f08:	d880a115 	stw	r2,644(sp)
81119f0c:	da009e15 	stw	r8,632(sp)
81119f10:	050000c4 	movi	r20,3
81119f14:	003f8106 	br	81119d1c <__reset+0xfb0f9d1c>
81119f18:	e0800117 	ldw	r2,4(fp)
81119f1c:	d9809d15 	stw	r6,628(sp)
81119f20:	0080c40e 	bge	zero,r2,8111a234 <__svfscanf_r+0x930>
81119f24:	9800011e 	bne	r19,zero,81119f2c <__svfscanf_r+0x628>
81119f28:	04c00044 	movi	r19,1
81119f2c:	8880004c 	andi	r2,r17,1
81119f30:	1000441e 	bne	r2,zero,8111a044 <__svfscanf_r+0x740>
81119f34:	8c40040c 	andi	r17,r17,16
81119f38:	8800da26 	beq	r17,zero,8111a2a4 <__svfscanf_r+0x9a0>
81119f3c:	0021883a 	mov	r16,zero
81119f40:	00000806 	br	81119f64 <__svfscanf_r+0x660>
81119f44:	1887883a 	add	r3,r3,r2
81119f48:	e00b883a 	mov	r5,fp
81119f4c:	b009883a 	mov	r4,r22
81119f50:	e0c00015 	stw	r3,0(fp)
81119f54:	80a1883a 	add	r16,r16,r2
81119f58:	98a7c83a 	sub	r19,r19,r2
81119f5c:	1114be40 	call	81114be4 <__srefill_r>
81119f60:	1000ca1e 	bne	r2,zero,8111a28c <__svfscanf_r+0x988>
81119f64:	e0800117 	ldw	r2,4(fp)
81119f68:	e0c00017 	ldw	r3,0(fp)
81119f6c:	14fff516 	blt	r2,r19,81119f44 <__reset+0xfb0f9f44>
81119f70:	14c5c83a 	sub	r2,r2,r19
81119f74:	1cd5883a 	add	r10,r3,r19
81119f78:	84e1883a 	add	r16,r16,r19
81119f7c:	e0800115 	stw	r2,4(fp)
81119f80:	e2800015 	stw	r10,0(fp)
81119f84:	dd009d17 	ldw	r20,628(sp)
81119f88:	9425883a 	add	r18,r18,r16
81119f8c:	a00d883a 	mov	r6,r20
81119f90:	003e9a06 	br	811199fc <__reset+0xfb0f99fc>
81119f94:	300b883a 	mov	r5,r6
81119f98:	d9005884 	addi	r4,sp,354
81119f9c:	d9809d15 	stw	r6,628(sp)
81119fa0:	111feec0 	call	8111feec <__sccl>
81119fa4:	1029883a 	mov	r20,r2
81119fa8:	e0800117 	ldw	r2,4(fp)
81119fac:	0081050e 	bge	zero,r2,8111a3c4 <__svfscanf_r+0xac0>
81119fb0:	e1000017 	ldw	r4,0(fp)
81119fb4:	20800003 	ldbu	r2,0(r4)
81119fb8:	98005926 	beq	r19,zero,8111a120 <__svfscanf_r+0x81c>
81119fbc:	8c40040c 	andi	r17,r17,16
81119fc0:	88005a26 	beq	r17,zero,8111a12c <__svfscanf_r+0x828>
81119fc4:	9823883a 	mov	r17,r19
81119fc8:	0021883a 	mov	r16,zero
81119fcc:	00000106 	br	81119fd4 <__svfscanf_r+0x6d0>
81119fd0:	20800003 	ldbu	r2,0(r4)
81119fd4:	10803fcc 	andi	r2,r2,255
81119fd8:	d8c05884 	addi	r3,sp,354
81119fdc:	1885883a 	add	r2,r3,r2
81119fe0:	10800007 	ldb	r2,0(r2)
81119fe4:	1000ad26 	beq	r2,zero,8111a29c <__svfscanf_r+0x998>
81119fe8:	e0800117 	ldw	r2,4(fp)
81119fec:	21000044 	addi	r4,r4,1
81119ff0:	84000044 	addi	r16,r16,1
81119ff4:	10bfffc4 	addi	r2,r2,-1
81119ff8:	e0800115 	stw	r2,4(fp)
81119ffc:	e1000015 	stw	r4,0(fp)
8111a000:	84c0a026 	beq	r16,r19,8111a284 <__svfscanf_r+0x980>
8111a004:	00bff216 	blt	zero,r2,81119fd0 <__reset+0xfb0f9fd0>
8111a008:	e00b883a 	mov	r5,fp
8111a00c:	b009883a 	mov	r4,r22
8111a010:	1114be40 	call	81114be4 <__srefill_r>
8111a014:	10009a1e 	bne	r2,zero,8111a280 <__svfscanf_r+0x97c>
8111a018:	e1000017 	ldw	r4,0(fp)
8111a01c:	003fec06 	br	81119fd0 <__reset+0xfb0f9fd0>
8111a020:	e0800117 	ldw	r2,4(fp)
8111a024:	d9809d15 	stw	r6,628(sp)
8111a028:	0080eb0e 	bge	zero,r2,8111a3d8 <__svfscanf_r+0xad4>
8111a02c:	00a04474 	movhi	r2,33041
8111a030:	10947a04 	addi	r2,r2,20968
8111a034:	d880a115 	stw	r2,644(sp)
8111a038:	d8009e15 	stw	zero,632(sp)
8111a03c:	050000c4 	movi	r20,3
8111a040:	003f3606 	br	81119d1c <__reset+0xfb0f9d1c>
8111a044:	dd409904 	addi	r21,sp,612
8111a048:	8c40040c 	andi	r17,r17,16
8111a04c:	01800204 	movi	r6,8
8111a050:	000b883a 	mov	r5,zero
8111a054:	a809883a 	mov	r4,r21
8111a058:	dc409f15 	stw	r17,636(sp)
8111a05c:	11147480 	call	81114748 <memset>
8111a060:	dc409f17 	ldw	r17,636(sp)
8111a064:	88006e26 	beq	r17,zero,8111a220 <__svfscanf_r+0x91c>
8111a068:	0029883a 	mov	r20,zero
8111a06c:	0023883a 	mov	r17,zero
8111a070:	111e3080 	call	8111e308 <__locale_mb_cur_max>
8111a074:	14406126 	beq	r2,r17,8111a1fc <__svfscanf_r+0x8f8>
8111a078:	e0800017 	ldw	r2,0(fp)
8111a07c:	e0c00117 	ldw	r3,4(fp)
8111a080:	d9000104 	addi	r4,sp,4
8111a084:	12000003 	ldbu	r8,0(r2)
8111a088:	18ffffc4 	addi	r3,r3,-1
8111a08c:	10800044 	addi	r2,r2,1
8111a090:	e0c00115 	stw	r3,4(fp)
8111a094:	e0800015 	stw	r2,0(fp)
8111a098:	8c000044 	addi	r16,r17,1
8111a09c:	dd400015 	stw	r21,0(sp)
8111a0a0:	2463883a 	add	r17,r4,r17
8111a0a4:	200d883a 	mov	r6,r4
8111a0a8:	a00b883a 	mov	r5,r20
8111a0ac:	800f883a 	mov	r7,r16
8111a0b0:	b009883a 	mov	r4,r22
8111a0b4:	8a000005 	stb	r8,0(r17)
8111a0b8:	111e3c40 	call	8111e3c4 <_mbrtowc_r>
8111a0bc:	017fffc4 	movi	r5,-1
8111a0c0:	11404e26 	beq	r2,r5,8111a1fc <__svfscanf_r+0x8f8>
8111a0c4:	1000601e 	bne	r2,zero,8111a248 <__svfscanf_r+0x944>
8111a0c8:	da009f17 	ldw	r8,636(sp)
8111a0cc:	4000641e 	bne	r8,zero,8111a260 <__svfscanf_r+0x95c>
8111a0d0:	a0000015 	stw	zero,0(r20)
8111a0d4:	9425883a 	add	r18,r18,r16
8111a0d8:	9967883a 	add	r19,r19,r5
8111a0dc:	a5000104 	addi	r20,r20,4
8111a0e0:	e0800117 	ldw	r2,4(fp)
8111a0e4:	0023883a 	mov	r17,zero
8111a0e8:	00804b16 	blt	zero,r2,8111a218 <__svfscanf_r+0x914>
8111a0ec:	e00b883a 	mov	r5,fp
8111a0f0:	b009883a 	mov	r4,r22
8111a0f4:	1114be40 	call	81114be4 <__srefill_r>
8111a0f8:	10004726 	beq	r2,zero,8111a218 <__svfscanf_r+0x914>
8111a0fc:	88003f1e 	bne	r17,zero,8111a1fc <__svfscanf_r+0x8f8>
8111a100:	d8c09f17 	ldw	r3,636(sp)
8111a104:	1800031e 	bne	r3,zero,8111a114 <__svfscanf_r+0x810>
8111a108:	da00a017 	ldw	r8,640(sp)
8111a10c:	42000044 	addi	r8,r8,1
8111a110:	da00a015 	stw	r8,640(sp)
8111a114:	dd009d17 	ldw	r20,628(sp)
8111a118:	a00d883a 	mov	r6,r20
8111a11c:	003e3706 	br	811199fc <__reset+0xfb0f99fc>
8111a120:	8c40040c 	andi	r17,r17,16
8111a124:	04ffffc4 	movi	r19,-1
8111a128:	883fa61e 	bne	r17,zero,81119fc4 <__reset+0xfb0f9fc4>
8111a12c:	da009c17 	ldw	r8,624(sp)
8111a130:	9abfffc4 	addi	r10,r19,-1
8111a134:	44000017 	ldw	r16,0(r8)
8111a138:	44400104 	addi	r17,r8,4
8111a13c:	8007883a 	mov	r3,r16
8111a140:	82ab883a 	add	r21,r16,r10
8111a144:	00000306 	br	8111a154 <__svfscanf_r+0x850>
8111a148:	e1000017 	ldw	r4,0(fp)
8111a14c:	9807883a 	mov	r3,r19
8111a150:	20800003 	ldbu	r2,0(r4)
8111a154:	10803fcc 	andi	r2,r2,255
8111a158:	d9405884 	addi	r5,sp,354
8111a15c:	2885883a 	add	r2,r5,r2
8111a160:	10800007 	ldb	r2,0(r2)
8111a164:	10004b26 	beq	r2,zero,8111a294 <__svfscanf_r+0x990>
8111a168:	e0800117 	ldw	r2,4(fp)
8111a16c:	21400044 	addi	r5,r4,1
8111a170:	e1400015 	stw	r5,0(fp)
8111a174:	10bfffc4 	addi	r2,r2,-1
8111a178:	e0800115 	stw	r2,4(fp)
8111a17c:	20800003 	ldbu	r2,0(r4)
8111a180:	1cc00044 	addi	r19,r3,1
8111a184:	18800005 	stb	r2,0(r3)
8111a188:	1d400726 	beq	r3,r21,8111a1a8 <__svfscanf_r+0x8a4>
8111a18c:	e0800117 	ldw	r2,4(fp)
8111a190:	00bfed16 	blt	zero,r2,8111a148 <__reset+0xfb0fa148>
8111a194:	e00b883a 	mov	r5,fp
8111a198:	b009883a 	mov	r4,r22
8111a19c:	1114be40 	call	81114be4 <__srefill_r>
8111a1a0:	103fe926 	beq	r2,zero,8111a148 <__reset+0xfb0fa148>
8111a1a4:	84c01526 	beq	r16,r19,8111a1fc <__svfscanf_r+0x8f8>
8111a1a8:	9c21c83a 	sub	r16,r19,r16
8111a1ac:	803e1726 	beq	r16,zero,81119a0c <__reset+0xfb0f9a0c>
8111a1b0:	da00a017 	ldw	r8,640(sp)
8111a1b4:	98000005 	stb	zero,0(r19)
8111a1b8:	dc409c15 	stw	r17,624(sp)
8111a1bc:	42000044 	addi	r8,r8,1
8111a1c0:	da00a015 	stw	r8,640(sp)
8111a1c4:	9425883a 	add	r18,r18,r16
8111a1c8:	a00d883a 	mov	r6,r20
8111a1cc:	003e0b06 	br	811199fc <__reset+0xfb0f99fc>
8111a1d0:	017fff84 	movi	r5,-2
8111a1d4:	11439b1e 	bne	r2,r5,8111b044 <__svfscanf_r+0x1740>
8111a1d8:	8821883a 	mov	r16,r17
8111a1dc:	e0800117 	ldw	r2,4(fp)
8111a1e0:	0082e516 	blt	zero,r2,8111ad78 <__svfscanf_r+0x1474>
8111a1e4:	e00b883a 	mov	r5,fp
8111a1e8:	b009883a 	mov	r4,r22
8111a1ec:	1114be40 	call	81114be4 <__srefill_r>
8111a1f0:	1002e126 	beq	r2,zero,8111ad78 <__svfscanf_r+0x1474>
8111a1f4:	dc409f17 	ldw	r17,636(sp)
8111a1f8:	8002e826 	beq	r16,zero,8111ad9c <__svfscanf_r+0x1498>
8111a1fc:	da00a017 	ldw	r8,640(sp)
8111a200:	403e9c26 	beq	r8,zero,81119c74 <__reset+0xfb0f9c74>
8111a204:	e080030b 	ldhu	r2,12(fp)
8111a208:	1080100c 	andi	r2,r2,64
8111a20c:	103e991e 	bne	r2,zero,81119c74 <__reset+0xfb0f9c74>
8111a210:	4005883a 	mov	r2,r8
8111a214:	003e9806 	br	81119c78 <__reset+0xfb0f9c78>
8111a218:	983f951e 	bne	r19,zero,8111a070 <__reset+0xfb0fa070>
8111a21c:	003fb806 	br	8111a100 <__reset+0xfb0fa100>
8111a220:	da009c17 	ldw	r8,624(sp)
8111a224:	45000017 	ldw	r20,0(r8)
8111a228:	42000104 	addi	r8,r8,4
8111a22c:	da009c15 	stw	r8,624(sp)
8111a230:	003f8e06 	br	8111a06c <__reset+0xfb0fa06c>
8111a234:	e00b883a 	mov	r5,fp
8111a238:	b009883a 	mov	r4,r22
8111a23c:	1114be40 	call	81114be4 <__srefill_r>
8111a240:	103f3826 	beq	r2,zero,81119f24 <__reset+0xfb0f9f24>
8111a244:	003fed06 	br	8111a1fc <__reset+0xfb0fa1fc>
8111a248:	00ffff84 	movi	r3,-2
8111a24c:	10c0071e 	bne	r2,r3,8111a26c <__svfscanf_r+0x968>
8111a250:	e0800117 	ldw	r2,4(fp)
8111a254:	8023883a 	mov	r17,r16
8111a258:	00bf8516 	blt	zero,r2,8111a070 <__reset+0xfb0fa070>
8111a25c:	003fa306 	br	8111a0ec <__reset+0xfb0fa0ec>
8111a260:	9425883a 	add	r18,r18,r16
8111a264:	9cffffc4 	addi	r19,r19,-1
8111a268:	003f9d06 	br	8111a0e0 <__reset+0xfb0fa0e0>
8111a26c:	da009f17 	ldw	r8,636(sp)
8111a270:	9425883a 	add	r18,r18,r16
8111a274:	9cffffc4 	addi	r19,r19,-1
8111a278:	403f9826 	beq	r8,zero,8111a0dc <__reset+0xfb0fa0dc>
8111a27c:	003f9806 	br	8111a0e0 <__reset+0xfb0fa0e0>
8111a280:	8023883a 	mov	r17,r16
8111a284:	8821883a 	mov	r16,r17
8111a288:	003fce06 	br	8111a1c4 <__reset+0xfb0fa1c4>
8111a28c:	803f3d1e 	bne	r16,zero,81119f84 <__reset+0xfb0f9f84>
8111a290:	003fda06 	br	8111a1fc <__reset+0xfb0fa1fc>
8111a294:	1827883a 	mov	r19,r3
8111a298:	003fc306 	br	8111a1a8 <__reset+0xfb0fa1a8>
8111a29c:	803fc91e 	bne	r16,zero,8111a1c4 <__reset+0xfb0fa1c4>
8111a2a0:	003dda06 	br	81119a0c <__reset+0xfb0f9a0c>
8111a2a4:	da009c17 	ldw	r8,624(sp)
8111a2a8:	df000015 	stw	fp,0(sp)
8111a2ac:	980f883a 	mov	r7,r19
8111a2b0:	41400017 	ldw	r5,0(r8)
8111a2b4:	01800044 	movi	r6,1
8111a2b8:	b009883a 	mov	r4,r22
8111a2bc:	111d4dc0 	call	8111d4dc <_fread_r>
8111a2c0:	da009c17 	ldw	r8,624(sp)
8111a2c4:	40c00104 	addi	r3,r8,4
8111a2c8:	103fcc26 	beq	r2,zero,8111a1fc <__reset+0xfb0fa1fc>
8111a2cc:	da00a017 	ldw	r8,640(sp)
8111a2d0:	dd009d17 	ldw	r20,628(sp)
8111a2d4:	90a5883a 	add	r18,r18,r2
8111a2d8:	42000044 	addi	r8,r8,1
8111a2dc:	da00a015 	stw	r8,640(sp)
8111a2e0:	d8c09c15 	stw	r3,624(sp)
8111a2e4:	a00d883a 	mov	r6,r20
8111a2e8:	003dc406 	br	811199fc <__reset+0xfb0f99fc>
8111a2ec:	e00b883a 	mov	r5,fp
8111a2f0:	b009883a 	mov	r4,r22
8111a2f4:	1114be40 	call	81114be4 <__srefill_r>
8111a2f8:	103e5226 	beq	r2,zero,81119c44 <__reset+0xfb0f9c44>
8111a2fc:	003fbf06 	br	8111a1fc <__reset+0xfb0fa1fc>
8111a300:	a0800083 	ldbu	r2,2(r20)
8111a304:	8c400094 	ori	r17,r17,2
8111a308:	a5000084 	addi	r20,r20,2
8111a30c:	10c03fcc 	andi	r3,r2,255
8111a310:	003dc706 	br	81119a30 <__reset+0xfb0f9a30>
8111a314:	e0800117 	ldw	r2,4(fp)
8111a318:	88e2b03a 	or	r17,r17,r3
8111a31c:	00bef716 	blt	zero,r2,81119efc <__reset+0xfb0f9efc>
8111a320:	003e6f06 	br	81119ce0 <__reset+0xfb0f9ce0>
8111a324:	8880004c 	andi	r2,r17,1
8111a328:	10000b1e 	bne	r2,zero,8111a358 <__svfscanf_r+0xa54>
8111a32c:	8c40008c 	andi	r17,r17,2
8111a330:	88000926 	beq	r17,zero,8111a358 <__svfscanf_r+0xa54>
8111a334:	da009c17 	ldw	r8,624(sp)
8111a338:	9007d7fa 	srai	r3,r18,31
8111a33c:	dd009d17 	ldw	r20,628(sp)
8111a340:	40800017 	ldw	r2,0(r8)
8111a344:	42000104 	addi	r8,r8,4
8111a348:	da009c15 	stw	r8,624(sp)
8111a34c:	14800015 	stw	r18,0(r2)
8111a350:	10c00115 	stw	r3,4(r2)
8111a354:	003da806 	br	811199f8 <__reset+0xfb0f99f8>
8111a358:	da009c17 	ldw	r8,624(sp)
8111a35c:	dd009d17 	ldw	r20,628(sp)
8111a360:	40800017 	ldw	r2,0(r8)
8111a364:	42000104 	addi	r8,r8,4
8111a368:	da009c15 	stw	r8,624(sp)
8111a36c:	14800015 	stw	r18,0(r2)
8111a370:	003da106 	br	811199f8 <__reset+0xfb0f99f8>
8111a374:	e00b883a 	mov	r5,fp
8111a378:	b009883a 	mov	r4,r22
8111a37c:	1114be40 	call	81114be4 <__srefill_r>
8111a380:	103f9e1e 	bne	r2,zero,8111a1fc <__reset+0xfb0fa1fc>
8111a384:	b9c00017 	ldw	r7,0(r23)
8111a388:	05000104 	movi	r20,4
8111a38c:	003e6306 	br	81119d1c <__reset+0xfb0f9d1c>
8111a390:	e00b883a 	mov	r5,fp
8111a394:	b009883a 	mov	r4,r22
8111a398:	1114be40 	call	81114be4 <__srefill_r>
8111a39c:	103f971e 	bne	r2,zero,8111a1fc <__reset+0xfb0fa1fc>
8111a3a0:	b9c00017 	ldw	r7,0(r23)
8111a3a4:	003e5706 	br	81119d04 <__reset+0xfb0f9d04>
8111a3a8:	e00b883a 	mov	r5,fp
8111a3ac:	b009883a 	mov	r4,r22
8111a3b0:	1114be40 	call	81114be4 <__srefill_r>
8111a3b4:	103f911e 	bne	r2,zero,8111a1fc <__reset+0xfb0fa1fc>
8111a3b8:	b9c00017 	ldw	r7,0(r23)
8111a3bc:	05000084 	movi	r20,2
8111a3c0:	003e5606 	br	81119d1c <__reset+0xfb0f9d1c>
8111a3c4:	e00b883a 	mov	r5,fp
8111a3c8:	b009883a 	mov	r4,r22
8111a3cc:	1114be40 	call	81114be4 <__srefill_r>
8111a3d0:	103ef726 	beq	r2,zero,81119fb0 <__reset+0xfb0f9fb0>
8111a3d4:	003f8906 	br	8111a1fc <__reset+0xfb0fa1fc>
8111a3d8:	e00b883a 	mov	r5,fp
8111a3dc:	b009883a 	mov	r4,r22
8111a3e0:	1114be40 	call	81114be4 <__srefill_r>
8111a3e4:	103f851e 	bne	r2,zero,8111a1fc <__reset+0xfb0fa1fc>
8111a3e8:	b9c00017 	ldw	r7,0(r23)
8111a3ec:	003f0f06 	br	8111a02c <__reset+0xfb0fa02c>
8111a3f0:	014000c4 	movi	r5,3
8111a3f4:	a1414a26 	beq	r20,r5,8111a920 <__svfscanf_r+0x101c>
8111a3f8:	01000104 	movi	r4,4
8111a3fc:	a101f11e 	bne	r20,r4,8111abc4 <__svfscanf_r+0x12c0>
8111a400:	b009883a 	mov	r4,r22
8111a404:	111e32c0 	call	8111e32c <_localeconv_r>
8111a408:	10800017 	ldw	r2,0(r2)
8111a40c:	98ffffc4 	addi	r3,r19,-1
8111a410:	d880a315 	stw	r2,652(sp)
8111a414:	00805704 	movi	r2,348
8111a418:	10c21e2e 	bgeu	r2,r3,8111ac94 <__svfscanf_r+0x1390>
8111a41c:	9cffa8c4 	addi	r19,r19,-349
8111a420:	dcc0a215 	stw	r19,648(sp)
8111a424:	04c05744 	movi	r19,349
8111a428:	8d01e014 	ori	r20,r17,1920
8111a42c:	0023883a 	mov	r17,zero
8111a430:	dc000104 	addi	r16,sp,4
8111a434:	8805883a 	mov	r2,r17
8111a438:	0019883a 	mov	r12,zero
8111a43c:	8023883a 	mov	r17,r16
8111a440:	b007883a 	mov	r3,r22
8111a444:	9821883a 	mov	r16,r19
8111a448:	002b883a 	mov	r21,zero
8111a44c:	d800a515 	stw	zero,660(sp)
8111a450:	d800a415 	stw	zero,656(sp)
8111a454:	d8009f15 	stw	zero,636(sp)
8111a458:	01c01384 	movi	r7,78
8111a45c:	602d883a 	mov	r22,r12
8111a460:	1027883a 	mov	r19,r2
8111a464:	e1000017 	ldw	r4,0(fp)
8111a468:	21400003 	ldbu	r5,0(r4)
8111a46c:	28bff544 	addi	r2,r5,-43
8111a470:	10803fcc 	andi	r2,r2,255
8111a474:	38810e36 	bltu	r7,r2,8111a8b0 <__svfscanf_r+0xfac>
8111a478:	100490ba 	slli	r2,r2,2
8111a47c:	01a044b4 	movhi	r6,33042
8111a480:	31a92404 	addi	r6,r6,-23408
8111a484:	1185883a 	add	r2,r2,r6
8111a488:	10800017 	ldw	r2,0(r2)
8111a48c:	1000683a 	jmp	r2
8111a490:	8111a788 	cmpgei	r4,r16,18078
8111a494:	8111a8b0 	cmpltui	r4,r16,18082
8111a498:	8111a788 	cmpgei	r4,r16,18078
8111a49c:	8111a8b0 	cmpltui	r4,r16,18082
8111a4a0:	8111a8b0 	cmpltui	r4,r16,18082
8111a4a4:	8111a75c 	xori	r4,r16,18077
8111a4a8:	8111a5cc 	andi	r4,r16,18071
8111a4ac:	8111a5cc 	andi	r4,r16,18071
8111a4b0:	8111a5cc 	andi	r4,r16,18071
8111a4b4:	8111a5cc 	andi	r4,r16,18071
8111a4b8:	8111a5cc 	andi	r4,r16,18071
8111a4bc:	8111a5cc 	andi	r4,r16,18071
8111a4c0:	8111a5cc 	andi	r4,r16,18071
8111a4c4:	8111a5cc 	andi	r4,r16,18071
8111a4c8:	8111a5cc 	andi	r4,r16,18071
8111a4cc:	8111a8b0 	cmpltui	r4,r16,18082
8111a4d0:	8111a8b0 	cmpltui	r4,r16,18082
8111a4d4:	8111a8b0 	cmpltui	r4,r16,18082
8111a4d8:	8111a8b0 	cmpltui	r4,r16,18082
8111a4dc:	8111a8b0 	cmpltui	r4,r16,18082
8111a4e0:	8111a8b0 	cmpltui	r4,r16,18082
8111a4e4:	8111a8b0 	cmpltui	r4,r16,18082
8111a4e8:	8111a8a0 	cmpeqi	r4,r16,18082
8111a4ec:	8111a8b0 	cmpltui	r4,r16,18082
8111a4f0:	8111a8b0 	cmpltui	r4,r16,18082
8111a4f4:	8111a8b0 	cmpltui	r4,r16,18082
8111a4f8:	8111a85c 	xori	r4,r16,18081
8111a4fc:	8111a840 	call	88111a84 <__reset+0x20f1a84>
8111a500:	8111a8b0 	cmpltui	r4,r16,18082
8111a504:	8111a8b0 	cmpltui	r4,r16,18082
8111a508:	8111a80c 	andi	r4,r16,18080
8111a50c:	8111a8b0 	cmpltui	r4,r16,18082
8111a510:	8111a8b0 	cmpltui	r4,r16,18082
8111a514:	8111a8b0 	cmpltui	r4,r16,18082
8111a518:	8111a8b0 	cmpltui	r4,r16,18082
8111a51c:	8111a7d4 	ori	r4,r16,18079
8111a520:	8111a8b0 	cmpltui	r4,r16,18082
8111a524:	8111a8b0 	cmpltui	r4,r16,18082
8111a528:	8111a8b0 	cmpltui	r4,r16,18082
8111a52c:	8111a8b0 	cmpltui	r4,r16,18082
8111a530:	8111a8b0 	cmpltui	r4,r16,18082
8111a534:	8111a7b8 	rdprs	r4,r16,18078
8111a538:	8111a8b0 	cmpltui	r4,r16,18082
8111a53c:	8111a8b0 	cmpltui	r4,r16,18082
8111a540:	8111a8b0 	cmpltui	r4,r16,18082
8111a544:	8111a8b0 	cmpltui	r4,r16,18082
8111a548:	8111a79c 	xori	r4,r16,18078
8111a54c:	8111a8b0 	cmpltui	r4,r16,18082
8111a550:	8111a8b0 	cmpltui	r4,r16,18082
8111a554:	8111a8b0 	cmpltui	r4,r16,18082
8111a558:	8111a8b0 	cmpltui	r4,r16,18082
8111a55c:	8111a8b0 	cmpltui	r4,r16,18082
8111a560:	8111a8b0 	cmpltui	r4,r16,18082
8111a564:	8111a8b0 	cmpltui	r4,r16,18082
8111a568:	8111a8a0 	cmpeqi	r4,r16,18082
8111a56c:	8111a8b0 	cmpltui	r4,r16,18082
8111a570:	8111a8b0 	cmpltui	r4,r16,18082
8111a574:	8111a8b0 	cmpltui	r4,r16,18082
8111a578:	8111a85c 	xori	r4,r16,18081
8111a57c:	8111a840 	call	88111a84 <__reset+0x20f1a84>
8111a580:	8111a8b0 	cmpltui	r4,r16,18082
8111a584:	8111a8b0 	cmpltui	r4,r16,18082
8111a588:	8111a80c 	andi	r4,r16,18080
8111a58c:	8111a8b0 	cmpltui	r4,r16,18082
8111a590:	8111a8b0 	cmpltui	r4,r16,18082
8111a594:	8111a8b0 	cmpltui	r4,r16,18082
8111a598:	8111a8b0 	cmpltui	r4,r16,18082
8111a59c:	8111a7d4 	ori	r4,r16,18079
8111a5a0:	8111a8b0 	cmpltui	r4,r16,18082
8111a5a4:	8111a8b0 	cmpltui	r4,r16,18082
8111a5a8:	8111a8b0 	cmpltui	r4,r16,18082
8111a5ac:	8111a8b0 	cmpltui	r4,r16,18082
8111a5b0:	8111a8b0 	cmpltui	r4,r16,18082
8111a5b4:	8111a7b8 	rdprs	r4,r16,18078
8111a5b8:	8111a8b0 	cmpltui	r4,r16,18082
8111a5bc:	8111a8b0 	cmpltui	r4,r16,18082
8111a5c0:	8111a8b0 	cmpltui	r4,r16,18082
8111a5c4:	8111a8b0 	cmpltui	r4,r16,18082
8111a5c8:	8111a79c 	xori	r4,r16,18078
8111a5cc:	a8803fcc 	andi	r2,r21,255
8111a5d0:	1080201c 	xori	r2,r2,128
8111a5d4:	10bfe004 	addi	r2,r2,-128
8111a5d8:	b085883a 	add	r2,r22,r2
8111a5dc:	10000d1e 	bne	r2,zero,8111a614 <__svfscanf_r+0xd10>
8111a5e0:	00bf9fc4 	movi	r2,-385
8111a5e4:	a0a8703a 	and	r20,r20,r2
8111a5e8:	89400005 	stb	r5,0(r17)
8111a5ec:	8c400044 	addi	r17,r17,1
8111a5f0:	e0800117 	ldw	r2,4(fp)
8111a5f4:	843fffc4 	addi	r16,r16,-1
8111a5f8:	94800044 	addi	r18,r18,1
8111a5fc:	10bfffc4 	addi	r2,r2,-1
8111a600:	e0800115 	stw	r2,4(fp)
8111a604:	0080b40e 	bge	zero,r2,8111a8d8 <__svfscanf_r+0xfd4>
8111a608:	21000044 	addi	r4,r4,1
8111a60c:	e1000015 	stw	r4,0(fp)
8111a610:	803f941e 	bne	r16,zero,8111a464 <__reset+0xfb0fa464>
8111a614:	8821883a 	mov	r16,r17
8111a618:	b019883a 	mov	r12,r22
8111a61c:	9823883a 	mov	r17,r19
8111a620:	182d883a 	mov	r22,r3
8111a624:	9801961e 	bne	r19,zero,8111ac80 <__svfscanf_r+0x137c>
8111a628:	633fffc4 	addi	r12,r12,-1
8111a62c:	00800044 	movi	r2,1
8111a630:	1302882e 	bgeu	r2,r12,8111b054 <__svfscanf_r+0x1750>
8111a634:	a8803fcc 	andi	r2,r21,255
8111a638:	1080201c 	xori	r2,r2,128
8111a63c:	10bfe004 	addi	r2,r2,-128
8111a640:	113fffc4 	addi	r4,r2,-1
8111a644:	01400184 	movi	r5,6
8111a648:	29001136 	bltu	r5,r4,8111a690 <__svfscanf_r+0xd8c>
8111a64c:	01000084 	movi	r4,2
8111a650:	2082900e 	bge	r4,r2,8111b094 <__svfscanf_r+0x1790>
8111a654:	00c000c4 	movi	r3,3
8111a658:	10c00d26 	beq	r2,r3,8111a690 <__svfscanf_r+0xd8c>
8111a65c:	9425c83a 	sub	r18,r18,r16
8111a660:	1827883a 	mov	r19,r3
8111a664:	843fffc4 	addi	r16,r16,-1
8111a668:	81400007 	ldb	r5,0(r16)
8111a66c:	e00d883a 	mov	r6,fp
8111a670:	b009883a 	mov	r4,r22
8111a674:	112355c0 	call	8112355c <_ungetc_r>
8111a678:	a8bfffc4 	addi	r2,r21,-1
8111a67c:	10c03fcc 	andi	r3,r2,255
8111a680:	8493883a 	add	r9,r16,r18
8111a684:	102b883a 	mov	r21,r2
8111a688:	98fff636 	bltu	r19,r3,8111a664 <__reset+0xfb0fa664>
8111a68c:	4825883a 	mov	r18,r9
8111a690:	a080400c 	andi	r2,r20,256
8111a694:	10001426 	beq	r2,zero,8111a6e8 <__svfscanf_r+0xde4>
8111a698:	a081000c 	andi	r2,r20,1024
8111a69c:	1002571e 	bne	r2,zero,8111affc <__svfscanf_r+0x16f8>
8111a6a0:	817fffc7 	ldb	r5,-1(r16)
8111a6a4:	00801944 	movi	r2,101
8111a6a8:	84ffffc4 	addi	r19,r16,-1
8111a6ac:	957fffc4 	addi	r21,r18,-1
8111a6b0:	28800826 	beq	r5,r2,8111a6d4 <__svfscanf_r+0xdd0>
8111a6b4:	00801144 	movi	r2,69
8111a6b8:	28800626 	beq	r5,r2,8111a6d4 <__svfscanf_r+0xdd0>
8111a6bc:	e00d883a 	mov	r6,fp
8111a6c0:	b009883a 	mov	r4,r22
8111a6c4:	112355c0 	call	8112355c <_ungetc_r>
8111a6c8:	817fff87 	ldb	r5,-2(r16)
8111a6cc:	84ffff84 	addi	r19,r16,-2
8111a6d0:	957fff84 	addi	r21,r18,-2
8111a6d4:	e00d883a 	mov	r6,fp
8111a6d8:	b009883a 	mov	r4,r22
8111a6dc:	112355c0 	call	8112355c <_ungetc_r>
8111a6e0:	a825883a 	mov	r18,r21
8111a6e4:	9821883a 	mov	r16,r19
8111a6e8:	a080040c 	andi	r2,r20,16
8111a6ec:	103e891e 	bne	r2,zero,8111a114 <__reset+0xfb0fa114>
8111a6f0:	80000005 	stb	zero,0(r16)
8111a6f4:	a081800c 	andi	r2,r20,1536
8111a6f8:	01010004 	movi	r4,1024
8111a6fc:	1101dd26 	beq	r2,r4,8111ae74 <__svfscanf_r+0x1570>
8111a700:	da00a417 	ldw	r8,656(sp)
8111a704:	4001e71e 	bne	r8,zero,8111aea4 <__svfscanf_r+0x15a0>
8111a708:	000d883a 	mov	r6,zero
8111a70c:	d9400104 	addi	r5,sp,4
8111a710:	b009883a 	mov	r4,r22
8111a714:	112010c0 	call	8112010c <_strtod_r>
8111a718:	1021883a 	mov	r16,r2
8111a71c:	a080004c 	andi	r2,r20,1
8111a720:	1000021e 	bne	r2,zero,8111a72c <__svfscanf_r+0xe28>
8111a724:	a2c0008c 	andi	r11,r20,2
8111a728:	5801e826 	beq	r11,zero,8111aecc <__svfscanf_r+0x15c8>
8111a72c:	da009c17 	ldw	r8,624(sp)
8111a730:	40800017 	ldw	r2,0(r8)
8111a734:	42000104 	addi	r8,r8,4
8111a738:	da009c15 	stw	r8,624(sp)
8111a73c:	14000015 	stw	r16,0(r2)
8111a740:	10c00115 	stw	r3,4(r2)
8111a744:	da00a017 	ldw	r8,640(sp)
8111a748:	dd009d17 	ldw	r20,628(sp)
8111a74c:	42000044 	addi	r8,r8,1
8111a750:	da00a015 	stw	r8,640(sp)
8111a754:	a00d883a 	mov	r6,r20
8111a758:	003ca806 	br	811199fc <__reset+0xfb0f99fc>
8111a75c:	a080400c 	andi	r2,r20,256
8111a760:	103f9a26 	beq	r2,zero,8111a5cc <__reset+0xfb0fa5cc>
8111a764:	da00a217 	ldw	r8,648(sp)
8111a768:	00bfdfc4 	movi	r2,-129
8111a76c:	a0a8703a 	and	r20,r20,r2
8111a770:	9cc00044 	addi	r19,r19,1
8111a774:	403f9e26 	beq	r8,zero,8111a5f0 <__reset+0xfb0fa5f0>
8111a778:	423fffc4 	addi	r8,r8,-1
8111a77c:	da00a215 	stw	r8,648(sp)
8111a780:	84000044 	addi	r16,r16,1
8111a784:	003f9a06 	br	8111a5f0 <__reset+0xfb0fa5f0>
8111a788:	a080200c 	andi	r2,r20,128
8111a78c:	103fa126 	beq	r2,zero,8111a614 <__reset+0xfb0fa614>
8111a790:	00bfdfc4 	movi	r2,-129
8111a794:	a0a8703a 	and	r20,r20,r2
8111a798:	003f9306 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a79c:	a8803fcc 	andi	r2,r21,255
8111a7a0:	1080201c 	xori	r2,r2,128
8111a7a4:	10bfe004 	addi	r2,r2,-128
8111a7a8:	020001c4 	movi	r8,7
8111a7ac:	123f991e 	bne	r2,r8,8111a614 <__reset+0xfb0fa614>
8111a7b0:	05400204 	movi	r21,8
8111a7b4:	003f8c06 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a7b8:	a8803fcc 	andi	r2,r21,255
8111a7bc:	1080201c 	xori	r2,r2,128
8111a7c0:	10bfe004 	addi	r2,r2,-128
8111a7c4:	01800184 	movi	r6,6
8111a7c8:	11bf921e 	bne	r2,r6,8111a614 <__reset+0xfb0fa614>
8111a7cc:	054001c4 	movi	r21,7
8111a7d0:	003f8506 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a7d4:	b000491e 	bne	r22,zero,8111a8fc <__svfscanf_r+0xff8>
8111a7d8:	9800031e 	bne	r19,zero,8111a7e8 <__svfscanf_r+0xee4>
8111a7dc:	a081c00c 	andi	r2,r20,1792
8111a7e0:	0181c004 	movi	r6,1792
8111a7e4:	11819f26 	beq	r2,r6,8111ae64 <__svfscanf_r+0x1560>
8111a7e8:	a8803fcc 	andi	r2,r21,255
8111a7ec:	1080201c 	xori	r2,r2,128
8111a7f0:	10bfe004 	addi	r2,r2,-128
8111a7f4:	01800044 	movi	r6,1
8111a7f8:	11800226 	beq	r2,r6,8111a804 <__svfscanf_r+0xf00>
8111a7fc:	01800104 	movi	r6,4
8111a800:	11bf841e 	bne	r2,r6,8111a614 <__reset+0xfb0fa614>
8111a804:	ad400044 	addi	r21,r21,1
8111a808:	003f7706 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a80c:	a8803fcc 	andi	r2,r21,255
8111a810:	1080201c 	xori	r2,r2,128
8111a814:	10bfe004 	addi	r2,r2,-128
8111a818:	10003c1e 	bne	r2,zero,8111a90c <__svfscanf_r+0x1008>
8111a81c:	9801141e 	bne	r19,zero,8111ac70 <__svfscanf_r+0x136c>
8111a820:	a081c00c 	andi	r2,r20,1792
8111a824:	0181c004 	movi	r6,1792
8111a828:	11818226 	beq	r2,r6,8111ae34 <__svfscanf_r+0x1530>
8111a82c:	8821883a 	mov	r16,r17
8111a830:	b019883a 	mov	r12,r22
8111a834:	9823883a 	mov	r17,r19
8111a838:	182d883a 	mov	r22,r3
8111a83c:	003f7a06 	br	8111a628 <__reset+0xfb0fa628>
8111a840:	a8803fcc 	andi	r2,r21,255
8111a844:	1080201c 	xori	r2,r2,128
8111a848:	10bfe004 	addi	r2,r2,-128
8111a84c:	01800084 	movi	r6,2
8111a850:	11bf701e 	bne	r2,r6,8111a614 <__reset+0xfb0fa614>
8111a854:	054000c4 	movi	r21,3
8111a858:	003f6306 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a85c:	a081400c 	andi	r2,r20,1280
8111a860:	01810004 	movi	r6,1024
8111a864:	11800326 	beq	r2,r6,8111a874 <__svfscanf_r+0xf70>
8111a868:	a184703a 	and	r2,r20,r6
8111a86c:	103f6926 	beq	r2,zero,8111a614 <__reset+0xfb0fa614>
8111a870:	983fee26 	beq	r19,zero,8111a82c <__reset+0xfb0fa82c>
8111a874:	a080800c 	andi	r2,r20,512
8111a878:	1000041e 	bne	r2,zero,8111a88c <__svfscanf_r+0xf88>
8111a87c:	da009f17 	ldw	r8,636(sp)
8111a880:	dc40a515 	stw	r17,660(sp)
8111a884:	9a27c83a 	sub	r19,r19,r8
8111a888:	dcc0a415 	stw	r19,656(sp)
8111a88c:	00be1fc4 	movi	r2,-1921
8111a890:	a0a8703a 	and	r20,r20,r2
8111a894:	a5006014 	ori	r20,r20,384
8111a898:	0027883a 	mov	r19,zero
8111a89c:	003f5206 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a8a0:	00800044 	movi	r2,1
8111a8a4:	b0bf5b1e 	bne	r22,r2,8111a614 <__reset+0xfb0fa614>
8111a8a8:	05800084 	movi	r22,2
8111a8ac:	003f4e06 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a8b0:	d980a317 	ldw	r6,652(sp)
8111a8b4:	30800003 	ldbu	r2,0(r6)
8111a8b8:	29803fcc 	andi	r6,r5,255
8111a8bc:	30bf551e 	bne	r6,r2,8111a614 <__reset+0xfb0fa614>
8111a8c0:	a080800c 	andi	r2,r20,512
8111a8c4:	103f5326 	beq	r2,zero,8111a614 <__reset+0xfb0fa614>
8111a8c8:	023f5fc4 	movi	r8,-641
8111a8cc:	a228703a 	and	r20,r20,r8
8111a8d0:	dcc09f15 	stw	r19,636(sp)
8111a8d4:	003f4406 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a8d8:	1809883a 	mov	r4,r3
8111a8dc:	e00b883a 	mov	r5,fp
8111a8e0:	d8c0a615 	stw	r3,664(sp)
8111a8e4:	d9c0aa15 	stw	r7,680(sp)
8111a8e8:	1114be40 	call	81114be4 <__srefill_r>
8111a8ec:	d8c0a617 	ldw	r3,664(sp)
8111a8f0:	d9c0aa17 	ldw	r7,680(sp)
8111a8f4:	103f4626 	beq	r2,zero,8111a610 <__reset+0xfb0fa610>
8111a8f8:	003f4606 	br	8111a614 <__reset+0xfb0fa614>
8111a8fc:	00800084 	movi	r2,2
8111a900:	b0bfb91e 	bne	r22,r2,8111a7e8 <__reset+0xfb0fa7e8>
8111a904:	058000c4 	movi	r22,3
8111a908:	003f3706 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111a90c:	018000c4 	movi	r6,3
8111a910:	11bfbc26 	beq	r2,r6,8111a804 <__reset+0xfb0fa804>
8111a914:	01800144 	movi	r6,5
8111a918:	11bfba26 	beq	r2,r6,8111a804 <__reset+0xfb0fa804>
8111a91c:	003f3d06 	br	8111a614 <__reset+0xfb0fa614>
8111a920:	98bfffc4 	addi	r2,r19,-1
8111a924:	01405704 	movi	r5,348
8111a928:	2880d82e 	bgeu	r5,r2,8111ac8c <__svfscanf_r+0x1388>
8111a92c:	99ffa8c4 	addi	r7,r19,-349
8111a930:	04c05744 	movi	r19,349
8111a934:	8c436014 	ori	r17,r17,3456
8111a938:	9013883a 	mov	r9,r18
8111a93c:	8825883a 	mov	r18,r17
8111a940:	dc409e17 	ldw	r17,632(sp)
8111a944:	0029883a 	mov	r20,zero
8111a948:	dc000104 	addi	r16,sp,4
8111a94c:	05401344 	movi	r21,77
8111a950:	02c08004 	movi	r11,512
8111a954:	01bf7fc4 	movi	r6,-513
8111a958:	023fdfc4 	movi	r8,-129
8111a95c:	20bff544 	addi	r2,r4,-43
8111a960:	10803fcc 	andi	r2,r2,255
8111a964:	a8807236 	bltu	r21,r2,8111ab30 <__svfscanf_r+0x122c>
8111a968:	100490ba 	slli	r2,r2,2
8111a96c:	016044b4 	movhi	r5,33042
8111a970:	296a6004 	addi	r5,r5,-22144
8111a974:	1145883a 	add	r2,r2,r5
8111a978:	10800017 	ldw	r2,0(r2)
8111a97c:	1000683a 	jmp	r2
8111a980:	8111abb4 	orhi	r4,r16,18094
8111a984:	8111ab30 	cmpltui	r4,r16,18092
8111a988:	8111abb4 	orhi	r4,r16,18094
8111a98c:	8111ab30 	cmpltui	r4,r16,18092
8111a990:	8111ab30 	cmpltui	r4,r16,18092
8111a994:	8111ab8c 	andi	r4,r16,18094
8111a998:	8111ab6c 	andhi	r4,r16,18093
8111a99c:	8111ab6c 	andhi	r4,r16,18093
8111a9a0:	8111ab6c 	andhi	r4,r16,18093
8111a9a4:	8111ab6c 	andhi	r4,r16,18093
8111a9a8:	8111ab6c 	andhi	r4,r16,18093
8111a9ac:	8111ab6c 	andhi	r4,r16,18093
8111a9b0:	8111ab6c 	andhi	r4,r16,18093
8111a9b4:	8111ab14 	ori	r4,r16,18092
8111a9b8:	8111ab14 	ori	r4,r16,18092
8111a9bc:	8111ab30 	cmpltui	r4,r16,18092
8111a9c0:	8111ab30 	cmpltui	r4,r16,18092
8111a9c4:	8111ab30 	cmpltui	r4,r16,18092
8111a9c8:	8111ab30 	cmpltui	r4,r16,18092
8111a9cc:	8111ab30 	cmpltui	r4,r16,18092
8111a9d0:	8111ab30 	cmpltui	r4,r16,18092
8111a9d4:	8111ab30 	cmpltui	r4,r16,18092
8111a9d8:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9dc:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9e0:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9e4:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9e8:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9ec:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111a9f0:	8111ab30 	cmpltui	r4,r16,18092
8111a9f4:	8111ab30 	cmpltui	r4,r16,18092
8111a9f8:	8111ab30 	cmpltui	r4,r16,18092
8111a9fc:	8111ab30 	cmpltui	r4,r16,18092
8111aa00:	8111ab30 	cmpltui	r4,r16,18092
8111aa04:	8111ab30 	cmpltui	r4,r16,18092
8111aa08:	8111ab30 	cmpltui	r4,r16,18092
8111aa0c:	8111ab30 	cmpltui	r4,r16,18092
8111aa10:	8111ab30 	cmpltui	r4,r16,18092
8111aa14:	8111ab30 	cmpltui	r4,r16,18092
8111aa18:	8111ab30 	cmpltui	r4,r16,18092
8111aa1c:	8111ab30 	cmpltui	r4,r16,18092
8111aa20:	8111ab30 	cmpltui	r4,r16,18092
8111aa24:	8111ab30 	cmpltui	r4,r16,18092
8111aa28:	8111ab30 	cmpltui	r4,r16,18092
8111aa2c:	8111ab30 	cmpltui	r4,r16,18092
8111aa30:	8111ab30 	cmpltui	r4,r16,18092
8111aa34:	8111aab8 	rdprs	r4,r16,18090
8111aa38:	8111ab30 	cmpltui	r4,r16,18092
8111aa3c:	8111ab30 	cmpltui	r4,r16,18092
8111aa40:	8111ab30 	cmpltui	r4,r16,18092
8111aa44:	8111ab30 	cmpltui	r4,r16,18092
8111aa48:	8111ab30 	cmpltui	r4,r16,18092
8111aa4c:	8111ab30 	cmpltui	r4,r16,18092
8111aa50:	8111ab30 	cmpltui	r4,r16,18092
8111aa54:	8111ab30 	cmpltui	r4,r16,18092
8111aa58:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa5c:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa60:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa64:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa68:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa6c:	8111ab00 	call	88111ab0 <__reset+0x20f1ab0>
8111aa70:	8111ab30 	cmpltui	r4,r16,18092
8111aa74:	8111ab30 	cmpltui	r4,r16,18092
8111aa78:	8111ab30 	cmpltui	r4,r16,18092
8111aa7c:	8111ab30 	cmpltui	r4,r16,18092
8111aa80:	8111ab30 	cmpltui	r4,r16,18092
8111aa84:	8111ab30 	cmpltui	r4,r16,18092
8111aa88:	8111ab30 	cmpltui	r4,r16,18092
8111aa8c:	8111ab30 	cmpltui	r4,r16,18092
8111aa90:	8111ab30 	cmpltui	r4,r16,18092
8111aa94:	8111ab30 	cmpltui	r4,r16,18092
8111aa98:	8111ab30 	cmpltui	r4,r16,18092
8111aa9c:	8111ab30 	cmpltui	r4,r16,18092
8111aaa0:	8111ab30 	cmpltui	r4,r16,18092
8111aaa4:	8111ab30 	cmpltui	r4,r16,18092
8111aaa8:	8111ab30 	cmpltui	r4,r16,18092
8111aaac:	8111ab30 	cmpltui	r4,r16,18092
8111aab0:	8111ab30 	cmpltui	r4,r16,18092
8111aab4:	8111aab8 	rdprs	r4,r16,18090
8111aab8:	9081800c 	andi	r2,r18,1536
8111aabc:	12c01c1e 	bne	r2,r11,8111ab30 <__svfscanf_r+0x122c>
8111aac0:	91a4703a 	and	r18,r18,r6
8111aac4:	94814014 	ori	r18,r18,1280
8111aac8:	04400404 	movi	r17,16
8111aacc:	81000005 	stb	r4,0(r16)
8111aad0:	84000044 	addi	r16,r16,1
8111aad4:	e0800117 	ldw	r2,4(fp)
8111aad8:	10bfffc4 	addi	r2,r2,-1
8111aadc:	e0800115 	stw	r2,4(fp)
8111aae0:	0080540e 	bge	zero,r2,8111ac34 <__svfscanf_r+0x1330>
8111aae4:	18c00044 	addi	r3,r3,1
8111aae8:	e0c00015 	stw	r3,0(fp)
8111aaec:	9cffffc4 	addi	r19,r19,-1
8111aaf0:	98000f26 	beq	r19,zero,8111ab30 <__svfscanf_r+0x122c>
8111aaf4:	e0c00017 	ldw	r3,0(fp)
8111aaf8:	19000003 	ldbu	r4,0(r3)
8111aafc:	003f9706 	br	8111a95c <__reset+0xfb0fa95c>
8111ab00:	00800284 	movi	r2,10
8111ab04:	14400a0e 	bge	r2,r17,8111ab30 <__svfscanf_r+0x122c>
8111ab08:	00bd1fc4 	movi	r2,-2945
8111ab0c:	90a4703a 	and	r18,r18,r2
8111ab10:	003fee06 	br	8111aacc <__reset+0xfb0faacc>
8111ab14:	01604534 	movhi	r5,33044
8111ab18:	8c63883a 	add	r17,r17,r17
8111ab1c:	2947a084 	addi	r5,r5,7810
8111ab20:	2c45883a 	add	r2,r5,r17
8111ab24:	1440000f 	ldh	r17,0(r2)
8111ab28:	00800204 	movi	r2,8
8111ab2c:	147ff616 	blt	r2,r17,8111ab08 <__reset+0xfb0fab08>
8111ab30:	dc409e15 	stw	r17,632(sp)
8111ab34:	9023883a 	mov	r17,r18
8111ab38:	8880400c 	andi	r2,r17,256
8111ab3c:	4825883a 	mov	r18,r9
8111ab40:	10000426 	beq	r2,zero,8111ab54 <__svfscanf_r+0x1250>
8111ab44:	d9800104 	addi	r6,sp,4
8111ab48:	3400be36 	bltu	r6,r16,8111ae44 <__svfscanf_r+0x1540>
8111ab4c:	da000104 	addi	r8,sp,4
8111ab50:	443bae26 	beq	r8,r16,81119a0c <__reset+0xfb0f9a0c>
8111ab54:	8880040c 	andi	r2,r17,16
8111ab58:	10009326 	beq	r2,zero,8111ada8 <__svfscanf_r+0x14a4>
8111ab5c:	d8800104 	addi	r2,sp,4
8111ab60:	80a1c83a 	sub	r16,r16,r2
8111ab64:	8521883a 	add	r16,r16,r20
8111ab68:	003d0606 	br	81119f84 <__reset+0xfb0f9f84>
8111ab6c:	01604534 	movhi	r5,33044
8111ab70:	8c63883a 	add	r17,r17,r17
8111ab74:	2947a084 	addi	r5,r5,7810
8111ab78:	2c45883a 	add	r2,r5,r17
8111ab7c:	1440000f 	ldh	r17,0(r2)
8111ab80:	00bd1fc4 	movi	r2,-2945
8111ab84:	90a4703a 	and	r18,r18,r2
8111ab88:	003fd006 	br	8111aacc <__reset+0xfb0faacc>
8111ab8c:	9082000c 	andi	r2,r18,2048
8111ab90:	103fce26 	beq	r2,zero,8111aacc <__reset+0xfb0faacc>
8111ab94:	8800021e 	bne	r17,zero,8111aba0 <__svfscanf_r+0x129c>
8111ab98:	94808014 	ori	r18,r18,512
8111ab9c:	04400204 	movi	r17,8
8111aba0:	9081000c 	andi	r2,r18,1024
8111aba4:	10009426 	beq	r2,zero,8111adf8 <__svfscanf_r+0x14f4>
8111aba8:	00be9fc4 	movi	r2,-1409
8111abac:	90a4703a 	and	r18,r18,r2
8111abb0:	003fc606 	br	8111aacc <__reset+0xfb0faacc>
8111abb4:	9080200c 	andi	r2,r18,128
8111abb8:	103fdd26 	beq	r2,zero,8111ab30 <__reset+0xfb0fab30>
8111abbc:	9224703a 	and	r18,r18,r8
8111abc0:	003fc206 	br	8111aacc <__reset+0xfb0faacc>
8111abc4:	9800011e 	bne	r19,zero,8111abcc <__svfscanf_r+0x12c8>
8111abc8:	04ffffc4 	movi	r19,-1
8111abcc:	8900004c 	andi	r4,r17,1
8111abd0:	20005b1e 	bne	r4,zero,8111ad40 <__svfscanf_r+0x143c>
8111abd4:	8c40040c 	andi	r17,r17,16
8111abd8:	88003026 	beq	r17,zero,8111ac9c <__svfscanf_r+0x1398>
8111abdc:	0021883a 	mov	r16,zero
8111abe0:	00000306 	br	8111abf0 <__svfscanf_r+0x12ec>
8111abe4:	18800003 	ldbu	r2,0(r3)
8111abe8:	3885883a 	add	r2,r7,r2
8111abec:	10800043 	ldbu	r2,1(r2)
8111abf0:	1080020c 	andi	r2,r2,8
8111abf4:	103ce31e 	bne	r2,zero,81119f84 <__reset+0xfb0f9f84>
8111abf8:	e0800117 	ldw	r2,4(fp)
8111abfc:	18c00044 	addi	r3,r3,1
8111ac00:	84000044 	addi	r16,r16,1
8111ac04:	10bfffc4 	addi	r2,r2,-1
8111ac08:	e0800115 	stw	r2,4(fp)
8111ac0c:	e0c00015 	stw	r3,0(fp)
8111ac10:	84fcdc26 	beq	r16,r19,81119f84 <__reset+0xfb0f9f84>
8111ac14:	00bff316 	blt	zero,r2,8111abe4 <__reset+0xfb0fabe4>
8111ac18:	e00b883a 	mov	r5,fp
8111ac1c:	b009883a 	mov	r4,r22
8111ac20:	1114be40 	call	81114be4 <__srefill_r>
8111ac24:	103cd71e 	bne	r2,zero,81119f84 <__reset+0xfb0f9f84>
8111ac28:	b9c00017 	ldw	r7,0(r23)
8111ac2c:	e0c00017 	ldw	r3,0(fp)
8111ac30:	003fec06 	br	8111abe4 <__reset+0xfb0fabe4>
8111ac34:	e00b883a 	mov	r5,fp
8111ac38:	b009883a 	mov	r4,r22
8111ac3c:	d980a715 	stw	r6,668(sp)
8111ac40:	d9c0aa15 	stw	r7,680(sp)
8111ac44:	da00a815 	stw	r8,672(sp)
8111ac48:	da40a915 	stw	r9,676(sp)
8111ac4c:	dac0a615 	stw	r11,664(sp)
8111ac50:	1114be40 	call	81114be4 <__srefill_r>
8111ac54:	d980a717 	ldw	r6,668(sp)
8111ac58:	d9c0aa17 	ldw	r7,680(sp)
8111ac5c:	da00a817 	ldw	r8,672(sp)
8111ac60:	da40a917 	ldw	r9,676(sp)
8111ac64:	dac0a617 	ldw	r11,664(sp)
8111ac68:	103fa026 	beq	r2,zero,8111aaec <__reset+0xfb0faaec>
8111ac6c:	003fb006 	br	8111ab30 <__reset+0xfb0fab30>
8111ac70:	8821883a 	mov	r16,r17
8111ac74:	b019883a 	mov	r12,r22
8111ac78:	9823883a 	mov	r17,r19
8111ac7c:	182d883a 	mov	r22,r3
8111ac80:	00bfbfc4 	movi	r2,-257
8111ac84:	a0a8703a 	and	r20,r20,r2
8111ac88:	003e6706 	br	8111a628 <__reset+0xfb0fa628>
8111ac8c:	000f883a 	mov	r7,zero
8111ac90:	003f2806 	br	8111a934 <__reset+0xfb0fa934>
8111ac94:	d800a215 	stw	zero,648(sp)
8111ac98:	003de306 	br	8111a428 <__reset+0xfb0fa428>
8111ac9c:	da009c17 	ldw	r8,624(sp)
8111aca0:	9abfffc4 	addi	r10,r19,-1
8111aca4:	44400017 	ldw	r17,0(r8)
8111aca8:	44000104 	addi	r16,r8,4
8111acac:	880b883a 	mov	r5,r17
8111acb0:	8aa9883a 	add	r20,r17,r10
8111acb4:	00000606 	br	8111acd0 <__svfscanf_r+0x13cc>
8111acb8:	e0c00017 	ldw	r3,0(fp)
8111acbc:	b9000017 	ldw	r4,0(r23)
8111acc0:	a80b883a 	mov	r5,r21
8111acc4:	18800003 	ldbu	r2,0(r3)
8111acc8:	2085883a 	add	r2,r4,r2
8111accc:	10800043 	ldbu	r2,1(r2)
8111acd0:	1080020c 	andi	r2,r2,8
8111acd4:	1000551e 	bne	r2,zero,8111ae2c <__svfscanf_r+0x1528>
8111acd8:	e0800117 	ldw	r2,4(fp)
8111acdc:	19000044 	addi	r4,r3,1
8111ace0:	e1000015 	stw	r4,0(fp)
8111ace4:	10bfffc4 	addi	r2,r2,-1
8111ace8:	e0800115 	stw	r2,4(fp)
8111acec:	18800003 	ldbu	r2,0(r3)
8111acf0:	2d400044 	addi	r21,r5,1
8111acf4:	a827883a 	mov	r19,r21
8111acf8:	28800005 	stb	r2,0(r5)
8111acfc:	2d000626 	beq	r5,r20,8111ad18 <__svfscanf_r+0x1414>
8111ad00:	e0800117 	ldw	r2,4(fp)
8111ad04:	00bfec16 	blt	zero,r2,8111acb8 <__reset+0xfb0facb8>
8111ad08:	e00b883a 	mov	r5,fp
8111ad0c:	b009883a 	mov	r4,r22
8111ad10:	1114be40 	call	81114be4 <__srefill_r>
8111ad14:	103fe826 	beq	r2,zero,8111acb8 <__reset+0xfb0facb8>
8111ad18:	da00a017 	ldw	r8,640(sp)
8111ad1c:	dd009d17 	ldw	r20,628(sp)
8111ad20:	9c63c83a 	sub	r17,r19,r17
8111ad24:	42000044 	addi	r8,r8,1
8111ad28:	98000005 	stb	zero,0(r19)
8111ad2c:	9465883a 	add	r18,r18,r17
8111ad30:	da00a015 	stw	r8,640(sp)
8111ad34:	dc009c15 	stw	r16,624(sp)
8111ad38:	a00d883a 	mov	r6,r20
8111ad3c:	003b2f06 	br	811199fc <__reset+0xfb0f99fc>
8111ad40:	dd409904 	addi	r21,sp,612
8111ad44:	8c40040c 	andi	r17,r17,16
8111ad48:	01800204 	movi	r6,8
8111ad4c:	000b883a 	mov	r5,zero
8111ad50:	a809883a 	mov	r4,r21
8111ad54:	11147480 	call	81114748 <memset>
8111ad58:	8800401e 	bne	r17,zero,8111ae5c <__svfscanf_r+0x1558>
8111ad5c:	da009c17 	ldw	r8,624(sp)
8111ad60:	45000017 	ldw	r20,0(r8)
8111ad64:	42000104 	addi	r8,r8,4
8111ad68:	da009c15 	stw	r8,624(sp)
8111ad6c:	000d883a 	mov	r6,zero
8111ad70:	3021883a 	mov	r16,r6
8111ad74:	dc409f15 	stw	r17,636(sp)
8111ad78:	e0800017 	ldw	r2,0(fp)
8111ad7c:	b8c00017 	ldw	r3,0(r23)
8111ad80:	10800003 	ldbu	r2,0(r2)
8111ad84:	1885883a 	add	r2,r3,r2
8111ad88:	10800043 	ldbu	r2,1(r2)
8111ad8c:	1080020c 	andi	r2,r2,8
8111ad90:	1000011e 	bne	r2,zero,8111ad98 <__svfscanf_r+0x1494>
8111ad94:	9800701e 	bne	r19,zero,8111af58 <__svfscanf_r+0x1654>
8111ad98:	dc409f17 	ldw	r17,636(sp)
8111ad9c:	883cdd1e 	bne	r17,zero,8111a114 <__reset+0xfb0fa114>
8111ada0:	a0000015 	stw	zero,0(r20)
8111ada4:	003cd806 	br	8111a108 <__reset+0xfb0fa108>
8111ada8:	d9c09e17 	ldw	r7,632(sp)
8111adac:	da00a117 	ldw	r8,644(sp)
8111adb0:	000d883a 	mov	r6,zero
8111adb4:	d9400104 	addi	r5,sp,4
8111adb8:	b009883a 	mov	r4,r22
8111adbc:	80000005 	stb	zero,0(r16)
8111adc0:	403ee83a 	callr	r8
8111adc4:	88c0080c 	andi	r3,r17,32
8111adc8:	1800121e 	bne	r3,zero,8111ae14 <__svfscanf_r+0x1510>
8111adcc:	88c0010c 	andi	r3,r17,4
8111add0:	18004d26 	beq	r3,zero,8111af08 <__svfscanf_r+0x1604>
8111add4:	da009c17 	ldw	r8,624(sp)
8111add8:	40c00017 	ldw	r3,0(r8)
8111addc:	42000104 	addi	r8,r8,4
8111ade0:	da009c15 	stw	r8,624(sp)
8111ade4:	1880000d 	sth	r2,0(r3)
8111ade8:	da00a017 	ldw	r8,640(sp)
8111adec:	42000044 	addi	r8,r8,1
8111adf0:	da00a015 	stw	r8,640(sp)
8111adf4:	003f5906 	br	8111ab5c <__reset+0xfb0fab5c>
8111adf8:	00bf1fc4 	movi	r2,-897
8111adfc:	90a4703a 	and	r18,r18,r2
8111ae00:	38000226 	beq	r7,zero,8111ae0c <__svfscanf_r+0x1508>
8111ae04:	39ffffc4 	addi	r7,r7,-1
8111ae08:	9cc00044 	addi	r19,r19,1
8111ae0c:	a5000044 	addi	r20,r20,1
8111ae10:	003f3006 	br	8111aad4 <__reset+0xfb0faad4>
8111ae14:	da009c17 	ldw	r8,624(sp)
8111ae18:	40c00017 	ldw	r3,0(r8)
8111ae1c:	42000104 	addi	r8,r8,4
8111ae20:	da009c15 	stw	r8,624(sp)
8111ae24:	18800015 	stw	r2,0(r3)
8111ae28:	003fef06 	br	8111ade8 <__reset+0xfb0fade8>
8111ae2c:	2827883a 	mov	r19,r5
8111ae30:	003fb906 	br	8111ad18 <__reset+0xfb0fad18>
8111ae34:	01be1fc4 	movi	r6,-1921
8111ae38:	a1a8703a 	and	r20,r20,r6
8111ae3c:	05400044 	movi	r21,1
8111ae40:	003de906 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111ae44:	817fffc7 	ldb	r5,-1(r16)
8111ae48:	e00d883a 	mov	r6,fp
8111ae4c:	b009883a 	mov	r4,r22
8111ae50:	843fffc4 	addi	r16,r16,-1
8111ae54:	112355c0 	call	8112355c <_ungetc_r>
8111ae58:	003f3c06 	br	8111ab4c <__reset+0xfb0fab4c>
8111ae5c:	dd009b04 	addi	r20,sp,620
8111ae60:	003fc206 	br	8111ad6c <__reset+0xfb0fad6c>
8111ae64:	00be1fc4 	movi	r2,-1921
8111ae68:	a0a8703a 	and	r20,r20,r2
8111ae6c:	05800044 	movi	r22,1
8111ae70:	003ddd06 	br	8111a5e8 <__reset+0xfb0fa5e8>
8111ae74:	d8c09f17 	ldw	r3,636(sp)
8111ae78:	88e3c83a 	sub	r17,r17,r3
8111ae7c:	044dc83a 	sub	r6,zero,r17
8111ae80:	883e2126 	beq	r17,zero,8111a708 <__reset+0xfb0fa708>
8111ae84:	d88055c4 	addi	r2,sp,343
8111ae88:	80800136 	bltu	r16,r2,8111ae90 <__svfscanf_r+0x158c>
8111ae8c:	dc005584 	addi	r16,sp,342
8111ae90:	01604534 	movhi	r5,33044
8111ae94:	29479f04 	addi	r5,r5,7804
8111ae98:	8009883a 	mov	r4,r16
8111ae9c:	1114ef80 	call	81114ef8 <sprintf>
8111aea0:	003e1906 	br	8111a708 <__reset+0xfb0fa708>
8111aea4:	d8c0a517 	ldw	r3,660(sp)
8111aea8:	000d883a 	mov	r6,zero
8111aeac:	01c00284 	movi	r7,10
8111aeb0:	19400044 	addi	r5,r3,1
8111aeb4:	b009883a 	mov	r4,r22
8111aeb8:	11151e80 	call	811151e8 <_strtol_r>
8111aebc:	da00a417 	ldw	r8,656(sp)
8111aec0:	dc00a517 	ldw	r16,660(sp)
8111aec4:	120dc83a 	sub	r6,r2,r8
8111aec8:	003fee06 	br	8111ae84 <__reset+0xfb0fae84>
8111aecc:	da009c17 	ldw	r8,624(sp)
8111aed0:	180b883a 	mov	r5,r3
8111aed4:	8009883a 	mov	r4,r16
8111aed8:	45000017 	ldw	r20,0(r8)
8111aedc:	44400104 	addi	r17,r8,4
8111aee0:	d8c0a615 	stw	r3,664(sp)
8111aee4:	111fe780 	call	8111fe78 <__fpclassifyd>
8111aee8:	d8c0a617 	ldw	r3,664(sp)
8111aeec:	10006426 	beq	r2,zero,8111b080 <__svfscanf_r+0x177c>
8111aef0:	8009883a 	mov	r4,r16
8111aef4:	180b883a 	mov	r5,r3
8111aef8:	11131e00 	call	811131e0 <__truncdfsf2>
8111aefc:	a0800015 	stw	r2,0(r20)
8111af00:	dc409c15 	stw	r17,624(sp)
8111af04:	003e0f06 	br	8111a744 <__reset+0xfb0fa744>
8111af08:	88c0004c 	andi	r3,r17,1
8111af0c:	183fc11e 	bne	r3,zero,8111ae14 <__reset+0xfb0fae14>
8111af10:	8c40008c 	andi	r17,r17,2
8111af14:	883fbf26 	beq	r17,zero,8111ae14 <__reset+0xfb0fae14>
8111af18:	da00a117 	ldw	r8,644(sp)
8111af1c:	00a044b4 	movhi	r2,33042
8111af20:	1086c504 	addi	r2,r2,6932
8111af24:	d9c09e17 	ldw	r7,632(sp)
8111af28:	000d883a 	mov	r6,zero
8111af2c:	d9400104 	addi	r5,sp,4
8111af30:	b009883a 	mov	r4,r22
8111af34:	40806226 	beq	r8,r2,8111b0c0 <__svfscanf_r+0x17bc>
8111af38:	112182c0 	call	8112182c <_strtoll_r>
8111af3c:	da009c17 	ldw	r8,624(sp)
8111af40:	41000017 	ldw	r4,0(r8)
8111af44:	42000104 	addi	r8,r8,4
8111af48:	da009c15 	stw	r8,624(sp)
8111af4c:	20800015 	stw	r2,0(r4)
8111af50:	20c00115 	stw	r3,4(r4)
8111af54:	003fa406 	br	8111ade8 <__reset+0xfb0fade8>
8111af58:	111e3080 	call	8111e308 <__locale_mb_cur_max>
8111af5c:	80bca726 	beq	r16,r2,8111a1fc <__reset+0xfb0fa1fc>
8111af60:	e0800017 	ldw	r2,0(fp)
8111af64:	e1000117 	ldw	r4,4(fp)
8111af68:	d8c00104 	addi	r3,sp,4
8111af6c:	12000003 	ldbu	r8,0(r2)
8111af70:	213fffc4 	addi	r4,r4,-1
8111af74:	10800044 	addi	r2,r2,1
8111af78:	e1000115 	stw	r4,4(fp)
8111af7c:	e0800015 	stw	r2,0(fp)
8111af80:	84400044 	addi	r17,r16,1
8111af84:	dd400015 	stw	r21,0(sp)
8111af88:	1c21883a 	add	r16,r3,r16
8111af8c:	b009883a 	mov	r4,r22
8111af90:	880f883a 	mov	r7,r17
8111af94:	180d883a 	mov	r6,r3
8111af98:	a00b883a 	mov	r5,r20
8111af9c:	82000005 	stb	r8,0(r16)
8111afa0:	111e3c40 	call	8111e3c4 <_mbrtowc_r>
8111afa4:	013fffc4 	movi	r4,-1
8111afa8:	113c9426 	beq	r2,r4,8111a1fc <__reset+0xfb0fa1fc>
8111afac:	103c881e 	bne	r2,zero,8111a1d0 <__reset+0xfb0fa1d0>
8111afb0:	a0000015 	stw	zero,0(r20)
8111afb4:	0009883a 	mov	r4,zero
8111afb8:	111e2480 	call	8111e248 <iswspace>
8111afbc:	10001a26 	beq	r2,zero,8111b028 <__svfscanf_r+0x1724>
8111afc0:	8821883a 	mov	r16,r17
8111afc4:	dc409f17 	ldw	r17,636(sp)
8111afc8:	803f7426 	beq	r16,zero,8111ad9c <__reset+0xfb0fad9c>
8111afcc:	843fffc4 	addi	r16,r16,-1
8111afd0:	d9800104 	addi	r6,sp,4
8111afd4:	342b883a 	add	r21,r6,r16
8111afd8:	00000106 	br	8111afe0 <__svfscanf_r+0x16dc>
8111afdc:	843fffc4 	addi	r16,r16,-1
8111afe0:	a9400003 	ldbu	r5,0(r21)
8111afe4:	e00d883a 	mov	r6,fp
8111afe8:	b009883a 	mov	r4,r22
8111afec:	112355c0 	call	8112355c <_ungetc_r>
8111aff0:	ad7fffc4 	addi	r21,r21,-1
8111aff4:	803ff91e 	bne	r16,zero,8111afdc <__reset+0xfb0fafdc>
8111aff8:	003f6806 	br	8111ad9c <__reset+0xfb0fad9c>
8111affc:	d9800104 	addi	r6,sp,4
8111b000:	802b883a 	mov	r21,r16
8111b004:	343a812e 	bgeu	r6,r16,81119a0c <__reset+0xfb0f9a0c>
8111b008:	ad7fffc4 	addi	r21,r21,-1
8111b00c:	a9400007 	ldb	r5,0(r21)
8111b010:	e00d883a 	mov	r6,fp
8111b014:	b009883a 	mov	r4,r22
8111b018:	112355c0 	call	8112355c <_ungetc_r>
8111b01c:	da000104 	addi	r8,sp,4
8111b020:	457ff91e 	bne	r8,r21,8111b008 <__reset+0xfb0fb008>
8111b024:	003a7906 	br	81119a0c <__reset+0xfb0f9a0c>
8111b028:	da009f17 	ldw	r8,636(sp)
8111b02c:	9465883a 	add	r18,r18,r17
8111b030:	9cffffc4 	addi	r19,r19,-1
8111b034:	4000051e 	bne	r8,zero,8111b04c <__svfscanf_r+0x1748>
8111b038:	a5000104 	addi	r20,r20,4
8111b03c:	0021883a 	mov	r16,zero
8111b040:	003c6606 	br	8111a1dc <__reset+0xfb0fa1dc>
8111b044:	a1000017 	ldw	r4,0(r20)
8111b048:	003fdb06 	br	8111afb8 <__reset+0xfb0fafb8>
8111b04c:	0021883a 	mov	r16,zero
8111b050:	003c6206 	br	8111a1dc <__reset+0xfb0fa1dc>
8111b054:	d8800104 	addi	r2,sp,4
8111b058:	802b883a 	mov	r21,r16
8111b05c:	143a6b2e 	bgeu	r2,r16,81119a0c <__reset+0xfb0f9a0c>
8111b060:	ad7fffc4 	addi	r21,r21,-1
8111b064:	a9400007 	ldb	r5,0(r21)
8111b068:	e00d883a 	mov	r6,fp
8111b06c:	b009883a 	mov	r4,r22
8111b070:	112355c0 	call	8112355c <_ungetc_r>
8111b074:	d8c00104 	addi	r3,sp,4
8111b078:	1d7ff91e 	bne	r3,r21,8111b060 <__reset+0xfb0fb060>
8111b07c:	003a6306 	br	81119a0c <__reset+0xfb0f9a0c>
8111b080:	0009883a 	mov	r4,zero
8111b084:	111ffbc0 	call	8111ffbc <nanf>
8111b088:	a0800015 	stw	r2,0(r20)
8111b08c:	dc409c15 	stw	r17,624(sp)
8111b090:	003dac06 	br	8111a744 <__reset+0xfb0fa744>
8111b094:	d9000104 	addi	r4,sp,4
8111b098:	802b883a 	mov	r21,r16
8111b09c:	243a5b2e 	bgeu	r4,r16,81119a0c <__reset+0xfb0f9a0c>
8111b0a0:	ad7fffc4 	addi	r21,r21,-1
8111b0a4:	a9400007 	ldb	r5,0(r21)
8111b0a8:	e00d883a 	mov	r6,fp
8111b0ac:	b009883a 	mov	r4,r22
8111b0b0:	112355c0 	call	8112355c <_ungetc_r>
8111b0b4:	d9400104 	addi	r5,sp,4
8111b0b8:	2d7ff91e 	bne	r5,r21,8111b0a0 <__reset+0xfb0fb0a0>
8111b0bc:	003a5306 	br	81119a0c <__reset+0xfb0f9a0c>
8111b0c0:	1121d840 	call	81121d84 <_strtoull_r>
8111b0c4:	003f9d06 	br	8111af3c <__reset+0xfb0faf3c>

8111b0c8 <vfscanf>:
8111b0c8:	00a04534 	movhi	r2,33044
8111b0cc:	defffb04 	addi	sp,sp,-20
8111b0d0:	10916904 	addi	r2,r2,17828
8111b0d4:	de00012e 	bgeu	sp,et,8111b0dc <vfscanf+0x14>
8111b0d8:	003b68fa 	trap	3
8111b0dc:	dc000215 	stw	r16,8(sp)
8111b0e0:	14000017 	ldw	r16,0(r2)
8111b0e4:	dc400315 	stw	r17,12(sp)
8111b0e8:	dfc00415 	stw	ra,16(sp)
8111b0ec:	2023883a 	mov	r17,r4
8111b0f0:	80000826 	beq	r16,zero,8111b114 <vfscanf+0x4c>
8111b0f4:	80800e17 	ldw	r2,56(r16)
8111b0f8:	1000061e 	bne	r2,zero,8111b114 <vfscanf+0x4c>
8111b0fc:	8009883a 	mov	r4,r16
8111b100:	d9400015 	stw	r5,0(sp)
8111b104:	d9800115 	stw	r6,4(sp)
8111b108:	111d3e00 	call	8111d3e0 <__sinit>
8111b10c:	d9800117 	ldw	r6,4(sp)
8111b110:	d9400017 	ldw	r5,0(sp)
8111b114:	300f883a 	mov	r7,r6
8111b118:	8009883a 	mov	r4,r16
8111b11c:	280d883a 	mov	r6,r5
8111b120:	880b883a 	mov	r5,r17
8111b124:	dfc00417 	ldw	ra,16(sp)
8111b128:	dc400317 	ldw	r17,12(sp)
8111b12c:	dc000217 	ldw	r16,8(sp)
8111b130:	dec00504 	addi	sp,sp,20
8111b134:	11199041 	jmpi	81119904 <__svfscanf_r>

8111b138 <__svfscanf>:
8111b138:	00a04534 	movhi	r2,33044
8111b13c:	10916904 	addi	r2,r2,17828
8111b140:	300f883a 	mov	r7,r6
8111b144:	280d883a 	mov	r6,r5
8111b148:	200b883a 	mov	r5,r4
8111b14c:	11000017 	ldw	r4,0(r2)
8111b150:	11199041 	jmpi	81119904 <__svfscanf_r>

8111b154 <_vfscanf_r>:
8111b154:	defffb04 	addi	sp,sp,-20
8111b158:	de00012e 	bgeu	sp,et,8111b160 <_vfscanf_r+0xc>
8111b15c:	003b68fa 	trap	3
8111b160:	dc000315 	stw	r16,12(sp)
8111b164:	dfc00415 	stw	ra,16(sp)
8111b168:	2021883a 	mov	r16,r4
8111b16c:	20000926 	beq	r4,zero,8111b194 <_vfscanf_r+0x40>
8111b170:	20800e17 	ldw	r2,56(r4)
8111b174:	1000071e 	bne	r2,zero,8111b194 <_vfscanf_r+0x40>
8111b178:	d9400015 	stw	r5,0(sp)
8111b17c:	d9800115 	stw	r6,4(sp)
8111b180:	d9c00215 	stw	r7,8(sp)
8111b184:	111d3e00 	call	8111d3e0 <__sinit>
8111b188:	d9c00217 	ldw	r7,8(sp)
8111b18c:	d9800117 	ldw	r6,4(sp)
8111b190:	d9400017 	ldw	r5,0(sp)
8111b194:	8009883a 	mov	r4,r16
8111b198:	dfc00417 	ldw	ra,16(sp)
8111b19c:	dc000317 	ldw	r16,12(sp)
8111b1a0:	dec00504 	addi	sp,sp,20
8111b1a4:	11199041 	jmpi	81119904 <__svfscanf_r>

8111b1a8 <__swbuf_r>:
8111b1a8:	defffb04 	addi	sp,sp,-20
8111b1ac:	de00012e 	bgeu	sp,et,8111b1b4 <__swbuf_r+0xc>
8111b1b0:	003b68fa 	trap	3
8111b1b4:	dcc00315 	stw	r19,12(sp)
8111b1b8:	dc800215 	stw	r18,8(sp)
8111b1bc:	dc000015 	stw	r16,0(sp)
8111b1c0:	dfc00415 	stw	ra,16(sp)
8111b1c4:	dc400115 	stw	r17,4(sp)
8111b1c8:	2025883a 	mov	r18,r4
8111b1cc:	2827883a 	mov	r19,r5
8111b1d0:	3021883a 	mov	r16,r6
8111b1d4:	20000226 	beq	r4,zero,8111b1e0 <__swbuf_r+0x38>
8111b1d8:	20800e17 	ldw	r2,56(r4)
8111b1dc:	10004226 	beq	r2,zero,8111b2e8 <__swbuf_r+0x140>
8111b1e0:	80800617 	ldw	r2,24(r16)
8111b1e4:	8100030b 	ldhu	r4,12(r16)
8111b1e8:	80800215 	stw	r2,8(r16)
8111b1ec:	2080020c 	andi	r2,r4,8
8111b1f0:	10003626 	beq	r2,zero,8111b2cc <__swbuf_r+0x124>
8111b1f4:	80c00417 	ldw	r3,16(r16)
8111b1f8:	18003426 	beq	r3,zero,8111b2cc <__swbuf_r+0x124>
8111b1fc:	2088000c 	andi	r2,r4,8192
8111b200:	9c403fcc 	andi	r17,r19,255
8111b204:	10001a26 	beq	r2,zero,8111b270 <__swbuf_r+0xc8>
8111b208:	80800017 	ldw	r2,0(r16)
8111b20c:	81000517 	ldw	r4,20(r16)
8111b210:	10c7c83a 	sub	r3,r2,r3
8111b214:	1900200e 	bge	r3,r4,8111b298 <__swbuf_r+0xf0>
8111b218:	18c00044 	addi	r3,r3,1
8111b21c:	81000217 	ldw	r4,8(r16)
8111b220:	11400044 	addi	r5,r2,1
8111b224:	81400015 	stw	r5,0(r16)
8111b228:	213fffc4 	addi	r4,r4,-1
8111b22c:	81000215 	stw	r4,8(r16)
8111b230:	14c00005 	stb	r19,0(r2)
8111b234:	80800517 	ldw	r2,20(r16)
8111b238:	10c01e26 	beq	r2,r3,8111b2b4 <__swbuf_r+0x10c>
8111b23c:	8080030b 	ldhu	r2,12(r16)
8111b240:	1080004c 	andi	r2,r2,1
8111b244:	10000226 	beq	r2,zero,8111b250 <__swbuf_r+0xa8>
8111b248:	00800284 	movi	r2,10
8111b24c:	88801926 	beq	r17,r2,8111b2b4 <__swbuf_r+0x10c>
8111b250:	8805883a 	mov	r2,r17
8111b254:	dfc00417 	ldw	ra,16(sp)
8111b258:	dcc00317 	ldw	r19,12(sp)
8111b25c:	dc800217 	ldw	r18,8(sp)
8111b260:	dc400117 	ldw	r17,4(sp)
8111b264:	dc000017 	ldw	r16,0(sp)
8111b268:	dec00504 	addi	sp,sp,20
8111b26c:	f800283a 	ret
8111b270:	81401917 	ldw	r5,100(r16)
8111b274:	00b7ffc4 	movi	r2,-8193
8111b278:	21080014 	ori	r4,r4,8192
8111b27c:	2884703a 	and	r2,r5,r2
8111b280:	80801915 	stw	r2,100(r16)
8111b284:	80800017 	ldw	r2,0(r16)
8111b288:	8100030d 	sth	r4,12(r16)
8111b28c:	81000517 	ldw	r4,20(r16)
8111b290:	10c7c83a 	sub	r3,r2,r3
8111b294:	193fe016 	blt	r3,r4,8111b218 <__reset+0xfb0fb218>
8111b298:	800b883a 	mov	r5,r16
8111b29c:	9009883a 	mov	r4,r18
8111b2a0:	111cfe40 	call	8111cfe4 <_fflush_r>
8111b2a4:	1000071e 	bne	r2,zero,8111b2c4 <__swbuf_r+0x11c>
8111b2a8:	80800017 	ldw	r2,0(r16)
8111b2ac:	00c00044 	movi	r3,1
8111b2b0:	003fda06 	br	8111b21c <__reset+0xfb0fb21c>
8111b2b4:	800b883a 	mov	r5,r16
8111b2b8:	9009883a 	mov	r4,r18
8111b2bc:	111cfe40 	call	8111cfe4 <_fflush_r>
8111b2c0:	103fe326 	beq	r2,zero,8111b250 <__reset+0xfb0fb250>
8111b2c4:	00bfffc4 	movi	r2,-1
8111b2c8:	003fe206 	br	8111b254 <__reset+0xfb0fb254>
8111b2cc:	800b883a 	mov	r5,r16
8111b2d0:	9009883a 	mov	r4,r18
8111b2d4:	111b3700 	call	8111b370 <__swsetup_r>
8111b2d8:	103ffa1e 	bne	r2,zero,8111b2c4 <__reset+0xfb0fb2c4>
8111b2dc:	8100030b 	ldhu	r4,12(r16)
8111b2e0:	80c00417 	ldw	r3,16(r16)
8111b2e4:	003fc506 	br	8111b1fc <__reset+0xfb0fb1fc>
8111b2e8:	111d3e00 	call	8111d3e0 <__sinit>
8111b2ec:	003fbc06 	br	8111b1e0 <__reset+0xfb0fb1e0>

8111b2f0 <__swbuf>:
8111b2f0:	00a04534 	movhi	r2,33044
8111b2f4:	10916904 	addi	r2,r2,17828
8111b2f8:	280d883a 	mov	r6,r5
8111b2fc:	200b883a 	mov	r5,r4
8111b300:	11000017 	ldw	r4,0(r2)
8111b304:	111b1a81 	jmpi	8111b1a8 <__swbuf_r>

8111b308 <_write_r>:
8111b308:	defffd04 	addi	sp,sp,-12
8111b30c:	de00012e 	bgeu	sp,et,8111b314 <_write_r+0xc>
8111b310:	003b68fa 	trap	3
8111b314:	2805883a 	mov	r2,r5
8111b318:	dc000015 	stw	r16,0(sp)
8111b31c:	04204534 	movhi	r16,33044
8111b320:	dc400115 	stw	r17,4(sp)
8111b324:	300b883a 	mov	r5,r6
8111b328:	8411c604 	addi	r16,r16,18200
8111b32c:	2023883a 	mov	r17,r4
8111b330:	380d883a 	mov	r6,r7
8111b334:	1009883a 	mov	r4,r2
8111b338:	dfc00215 	stw	ra,8(sp)
8111b33c:	80000015 	stw	zero,0(r16)
8111b340:	112aa000 	call	8112aa00 <write>
8111b344:	00ffffc4 	movi	r3,-1
8111b348:	10c00526 	beq	r2,r3,8111b360 <_write_r+0x58>
8111b34c:	dfc00217 	ldw	ra,8(sp)
8111b350:	dc400117 	ldw	r17,4(sp)
8111b354:	dc000017 	ldw	r16,0(sp)
8111b358:	dec00304 	addi	sp,sp,12
8111b35c:	f800283a 	ret
8111b360:	80c00017 	ldw	r3,0(r16)
8111b364:	183ff926 	beq	r3,zero,8111b34c <__reset+0xfb0fb34c>
8111b368:	88c00015 	stw	r3,0(r17)
8111b36c:	003ff706 	br	8111b34c <__reset+0xfb0fb34c>

8111b370 <__swsetup_r>:
8111b370:	00a04534 	movhi	r2,33044
8111b374:	defffd04 	addi	sp,sp,-12
8111b378:	10916904 	addi	r2,r2,17828
8111b37c:	de00012e 	bgeu	sp,et,8111b384 <__swsetup_r+0x14>
8111b380:	003b68fa 	trap	3
8111b384:	dc400115 	stw	r17,4(sp)
8111b388:	2023883a 	mov	r17,r4
8111b38c:	11000017 	ldw	r4,0(r2)
8111b390:	dc000015 	stw	r16,0(sp)
8111b394:	dfc00215 	stw	ra,8(sp)
8111b398:	2821883a 	mov	r16,r5
8111b39c:	20000226 	beq	r4,zero,8111b3a8 <__swsetup_r+0x38>
8111b3a0:	20800e17 	ldw	r2,56(r4)
8111b3a4:	10003126 	beq	r2,zero,8111b46c <__swsetup_r+0xfc>
8111b3a8:	8080030b 	ldhu	r2,12(r16)
8111b3ac:	10c0020c 	andi	r3,r2,8
8111b3b0:	1009883a 	mov	r4,r2
8111b3b4:	18000f26 	beq	r3,zero,8111b3f4 <__swsetup_r+0x84>
8111b3b8:	80c00417 	ldw	r3,16(r16)
8111b3bc:	18001526 	beq	r3,zero,8111b414 <__swsetup_r+0xa4>
8111b3c0:	1100004c 	andi	r4,r2,1
8111b3c4:	20001c1e 	bne	r4,zero,8111b438 <__swsetup_r+0xc8>
8111b3c8:	1080008c 	andi	r2,r2,2
8111b3cc:	1000291e 	bne	r2,zero,8111b474 <__swsetup_r+0x104>
8111b3d0:	80800517 	ldw	r2,20(r16)
8111b3d4:	80800215 	stw	r2,8(r16)
8111b3d8:	18001c26 	beq	r3,zero,8111b44c <__swsetup_r+0xdc>
8111b3dc:	0005883a 	mov	r2,zero
8111b3e0:	dfc00217 	ldw	ra,8(sp)
8111b3e4:	dc400117 	ldw	r17,4(sp)
8111b3e8:	dc000017 	ldw	r16,0(sp)
8111b3ec:	dec00304 	addi	sp,sp,12
8111b3f0:	f800283a 	ret
8111b3f4:	2080040c 	andi	r2,r4,16
8111b3f8:	10002e26 	beq	r2,zero,8111b4b4 <__swsetup_r+0x144>
8111b3fc:	2080010c 	andi	r2,r4,4
8111b400:	10001e1e 	bne	r2,zero,8111b47c <__swsetup_r+0x10c>
8111b404:	80c00417 	ldw	r3,16(r16)
8111b408:	20800214 	ori	r2,r4,8
8111b40c:	8080030d 	sth	r2,12(r16)
8111b410:	183feb1e 	bne	r3,zero,8111b3c0 <__reset+0xfb0fb3c0>
8111b414:	1100a00c 	andi	r4,r2,640
8111b418:	01408004 	movi	r5,512
8111b41c:	217fe826 	beq	r4,r5,8111b3c0 <__reset+0xfb0fb3c0>
8111b420:	800b883a 	mov	r5,r16
8111b424:	8809883a 	mov	r4,r17
8111b428:	1113c200 	call	81113c20 <__smakebuf_r>
8111b42c:	8080030b 	ldhu	r2,12(r16)
8111b430:	80c00417 	ldw	r3,16(r16)
8111b434:	003fe206 	br	8111b3c0 <__reset+0xfb0fb3c0>
8111b438:	80800517 	ldw	r2,20(r16)
8111b43c:	80000215 	stw	zero,8(r16)
8111b440:	0085c83a 	sub	r2,zero,r2
8111b444:	80800615 	stw	r2,24(r16)
8111b448:	183fe41e 	bne	r3,zero,8111b3dc <__reset+0xfb0fb3dc>
8111b44c:	80c0030b 	ldhu	r3,12(r16)
8111b450:	0005883a 	mov	r2,zero
8111b454:	1900200c 	andi	r4,r3,128
8111b458:	203fe126 	beq	r4,zero,8111b3e0 <__reset+0xfb0fb3e0>
8111b45c:	18c01014 	ori	r3,r3,64
8111b460:	80c0030d 	sth	r3,12(r16)
8111b464:	00bfffc4 	movi	r2,-1
8111b468:	003fdd06 	br	8111b3e0 <__reset+0xfb0fb3e0>
8111b46c:	111d3e00 	call	8111d3e0 <__sinit>
8111b470:	003fcd06 	br	8111b3a8 <__reset+0xfb0fb3a8>
8111b474:	0005883a 	mov	r2,zero
8111b478:	003fd606 	br	8111b3d4 <__reset+0xfb0fb3d4>
8111b47c:	81400c17 	ldw	r5,48(r16)
8111b480:	28000626 	beq	r5,zero,8111b49c <__swsetup_r+0x12c>
8111b484:	80801004 	addi	r2,r16,64
8111b488:	28800326 	beq	r5,r2,8111b498 <__swsetup_r+0x128>
8111b48c:	8809883a 	mov	r4,r17
8111b490:	111d8780 	call	8111d878 <_free_r>
8111b494:	8100030b 	ldhu	r4,12(r16)
8111b498:	80000c15 	stw	zero,48(r16)
8111b49c:	80c00417 	ldw	r3,16(r16)
8111b4a0:	00bff6c4 	movi	r2,-37
8111b4a4:	1108703a 	and	r4,r2,r4
8111b4a8:	80000115 	stw	zero,4(r16)
8111b4ac:	80c00015 	stw	r3,0(r16)
8111b4b0:	003fd506 	br	8111b408 <__reset+0xfb0fb408>
8111b4b4:	00800244 	movi	r2,9
8111b4b8:	88800015 	stw	r2,0(r17)
8111b4bc:	20801014 	ori	r2,r4,64
8111b4c0:	8080030d 	sth	r2,12(r16)
8111b4c4:	00bfffc4 	movi	r2,-1
8111b4c8:	003fc506 	br	8111b3e0 <__reset+0xfb0fb3e0>

8111b4cc <_close_r>:
8111b4cc:	defffd04 	addi	sp,sp,-12
8111b4d0:	de00012e 	bgeu	sp,et,8111b4d8 <_close_r+0xc>
8111b4d4:	003b68fa 	trap	3
8111b4d8:	dc000015 	stw	r16,0(sp)
8111b4dc:	04204534 	movhi	r16,33044
8111b4e0:	dc400115 	stw	r17,4(sp)
8111b4e4:	8411c604 	addi	r16,r16,18200
8111b4e8:	2023883a 	mov	r17,r4
8111b4ec:	2809883a 	mov	r4,r5
8111b4f0:	dfc00215 	stw	ra,8(sp)
8111b4f4:	80000015 	stw	zero,0(r16)
8111b4f8:	1128f400 	call	81128f40 <close>
8111b4fc:	00ffffc4 	movi	r3,-1
8111b500:	10c00526 	beq	r2,r3,8111b518 <_close_r+0x4c>
8111b504:	dfc00217 	ldw	ra,8(sp)
8111b508:	dc400117 	ldw	r17,4(sp)
8111b50c:	dc000017 	ldw	r16,0(sp)
8111b510:	dec00304 	addi	sp,sp,12
8111b514:	f800283a 	ret
8111b518:	80c00017 	ldw	r3,0(r16)
8111b51c:	183ff926 	beq	r3,zero,8111b504 <__reset+0xfb0fb504>
8111b520:	88c00015 	stw	r3,0(r17)
8111b524:	003ff706 	br	8111b504 <__reset+0xfb0fb504>

8111b528 <quorem>:
8111b528:	defff704 	addi	sp,sp,-36
8111b52c:	de00012e 	bgeu	sp,et,8111b534 <quorem+0xc>
8111b530:	003b68fa 	trap	3
8111b534:	dc800215 	stw	r18,8(sp)
8111b538:	20800417 	ldw	r2,16(r4)
8111b53c:	2c800417 	ldw	r18,16(r5)
8111b540:	dfc00815 	stw	ra,32(sp)
8111b544:	ddc00715 	stw	r23,28(sp)
8111b548:	dd800615 	stw	r22,24(sp)
8111b54c:	dd400515 	stw	r21,20(sp)
8111b550:	dd000415 	stw	r20,16(sp)
8111b554:	dcc00315 	stw	r19,12(sp)
8111b558:	dc400115 	stw	r17,4(sp)
8111b55c:	dc000015 	stw	r16,0(sp)
8111b560:	14807116 	blt	r2,r18,8111b728 <quorem+0x200>
8111b564:	94bfffc4 	addi	r18,r18,-1
8111b568:	94ad883a 	add	r22,r18,r18
8111b56c:	b5ad883a 	add	r22,r22,r22
8111b570:	2c400504 	addi	r17,r5,20
8111b574:	8da9883a 	add	r20,r17,r22
8111b578:	25400504 	addi	r21,r4,20
8111b57c:	282f883a 	mov	r23,r5
8111b580:	adad883a 	add	r22,r21,r22
8111b584:	a1400017 	ldw	r5,0(r20)
8111b588:	2021883a 	mov	r16,r4
8111b58c:	b1000017 	ldw	r4,0(r22)
8111b590:	29400044 	addi	r5,r5,1
8111b594:	1126c000 	call	81126c00 <__udivsi3>
8111b598:	1027883a 	mov	r19,r2
8111b59c:	10002c26 	beq	r2,zero,8111b650 <quorem+0x128>
8111b5a0:	a813883a 	mov	r9,r21
8111b5a4:	880b883a 	mov	r5,r17
8111b5a8:	0009883a 	mov	r4,zero
8111b5ac:	000d883a 	mov	r6,zero
8111b5b0:	2a000017 	ldw	r8,0(r5)
8111b5b4:	49c00017 	ldw	r7,0(r9)
8111b5b8:	29400104 	addi	r5,r5,4
8111b5bc:	40bfffcc 	andi	r2,r8,65535
8111b5c0:	14c5383a 	mul	r2,r2,r19
8111b5c4:	4010d43a 	srli	r8,r8,16
8111b5c8:	38ffffcc 	andi	r3,r7,65535
8111b5cc:	1105883a 	add	r2,r2,r4
8111b5d0:	1008d43a 	srli	r4,r2,16
8111b5d4:	44d1383a 	mul	r8,r8,r19
8111b5d8:	198d883a 	add	r6,r3,r6
8111b5dc:	10ffffcc 	andi	r3,r2,65535
8111b5e0:	30c7c83a 	sub	r3,r6,r3
8111b5e4:	380ed43a 	srli	r7,r7,16
8111b5e8:	4105883a 	add	r2,r8,r4
8111b5ec:	180dd43a 	srai	r6,r3,16
8111b5f0:	113fffcc 	andi	r4,r2,65535
8111b5f4:	390fc83a 	sub	r7,r7,r4
8111b5f8:	398d883a 	add	r6,r7,r6
8111b5fc:	300e943a 	slli	r7,r6,16
8111b600:	18ffffcc 	andi	r3,r3,65535
8111b604:	1008d43a 	srli	r4,r2,16
8111b608:	38ceb03a 	or	r7,r7,r3
8111b60c:	49c00015 	stw	r7,0(r9)
8111b610:	300dd43a 	srai	r6,r6,16
8111b614:	4a400104 	addi	r9,r9,4
8111b618:	a17fe52e 	bgeu	r20,r5,8111b5b0 <__reset+0xfb0fb5b0>
8111b61c:	b0800017 	ldw	r2,0(r22)
8111b620:	10000b1e 	bne	r2,zero,8111b650 <quorem+0x128>
8111b624:	b0bfff04 	addi	r2,r22,-4
8111b628:	a880082e 	bgeu	r21,r2,8111b64c <quorem+0x124>
8111b62c:	b0ffff17 	ldw	r3,-4(r22)
8111b630:	18000326 	beq	r3,zero,8111b640 <quorem+0x118>
8111b634:	00000506 	br	8111b64c <quorem+0x124>
8111b638:	10c00017 	ldw	r3,0(r2)
8111b63c:	1800031e 	bne	r3,zero,8111b64c <quorem+0x124>
8111b640:	10bfff04 	addi	r2,r2,-4
8111b644:	94bfffc4 	addi	r18,r18,-1
8111b648:	a8bffb36 	bltu	r21,r2,8111b638 <__reset+0xfb0fb638>
8111b64c:	84800415 	stw	r18,16(r16)
8111b650:	b80b883a 	mov	r5,r23
8111b654:	8009883a 	mov	r4,r16
8111b658:	111f1480 	call	8111f148 <__mcmp>
8111b65c:	10002616 	blt	r2,zero,8111b6f8 <quorem+0x1d0>
8111b660:	9cc00044 	addi	r19,r19,1
8111b664:	a805883a 	mov	r2,r21
8111b668:	000b883a 	mov	r5,zero
8111b66c:	11000017 	ldw	r4,0(r2)
8111b670:	89800017 	ldw	r6,0(r17)
8111b674:	10800104 	addi	r2,r2,4
8111b678:	20ffffcc 	andi	r3,r4,65535
8111b67c:	194b883a 	add	r5,r3,r5
8111b680:	30ffffcc 	andi	r3,r6,65535
8111b684:	28c7c83a 	sub	r3,r5,r3
8111b688:	300cd43a 	srli	r6,r6,16
8111b68c:	2008d43a 	srli	r4,r4,16
8111b690:	180bd43a 	srai	r5,r3,16
8111b694:	18ffffcc 	andi	r3,r3,65535
8111b698:	2189c83a 	sub	r4,r4,r6
8111b69c:	2149883a 	add	r4,r4,r5
8111b6a0:	200c943a 	slli	r6,r4,16
8111b6a4:	8c400104 	addi	r17,r17,4
8111b6a8:	200bd43a 	srai	r5,r4,16
8111b6ac:	30c6b03a 	or	r3,r6,r3
8111b6b0:	10ffff15 	stw	r3,-4(r2)
8111b6b4:	a47fed2e 	bgeu	r20,r17,8111b66c <__reset+0xfb0fb66c>
8111b6b8:	9485883a 	add	r2,r18,r18
8111b6bc:	1085883a 	add	r2,r2,r2
8111b6c0:	a887883a 	add	r3,r21,r2
8111b6c4:	18800017 	ldw	r2,0(r3)
8111b6c8:	10000b1e 	bne	r2,zero,8111b6f8 <quorem+0x1d0>
8111b6cc:	18bfff04 	addi	r2,r3,-4
8111b6d0:	a880082e 	bgeu	r21,r2,8111b6f4 <quorem+0x1cc>
8111b6d4:	18ffff17 	ldw	r3,-4(r3)
8111b6d8:	18000326 	beq	r3,zero,8111b6e8 <quorem+0x1c0>
8111b6dc:	00000506 	br	8111b6f4 <quorem+0x1cc>
8111b6e0:	10c00017 	ldw	r3,0(r2)
8111b6e4:	1800031e 	bne	r3,zero,8111b6f4 <quorem+0x1cc>
8111b6e8:	10bfff04 	addi	r2,r2,-4
8111b6ec:	94bfffc4 	addi	r18,r18,-1
8111b6f0:	a8bffb36 	bltu	r21,r2,8111b6e0 <__reset+0xfb0fb6e0>
8111b6f4:	84800415 	stw	r18,16(r16)
8111b6f8:	9805883a 	mov	r2,r19
8111b6fc:	dfc00817 	ldw	ra,32(sp)
8111b700:	ddc00717 	ldw	r23,28(sp)
8111b704:	dd800617 	ldw	r22,24(sp)
8111b708:	dd400517 	ldw	r21,20(sp)
8111b70c:	dd000417 	ldw	r20,16(sp)
8111b710:	dcc00317 	ldw	r19,12(sp)
8111b714:	dc800217 	ldw	r18,8(sp)
8111b718:	dc400117 	ldw	r17,4(sp)
8111b71c:	dc000017 	ldw	r16,0(sp)
8111b720:	dec00904 	addi	sp,sp,36
8111b724:	f800283a 	ret
8111b728:	0005883a 	mov	r2,zero
8111b72c:	003ff306 	br	8111b6fc <__reset+0xfb0fb6fc>

8111b730 <_dtoa_r>:
8111b730:	deffde04 	addi	sp,sp,-136
8111b734:	de00012e 	bgeu	sp,et,8111b73c <_dtoa_r+0xc>
8111b738:	003b68fa 	trap	3
8111b73c:	20801017 	ldw	r2,64(r4)
8111b740:	df002015 	stw	fp,128(sp)
8111b744:	dcc01b15 	stw	r19,108(sp)
8111b748:	dc801a15 	stw	r18,104(sp)
8111b74c:	dc401915 	stw	r17,100(sp)
8111b750:	dc001815 	stw	r16,96(sp)
8111b754:	dfc02115 	stw	ra,132(sp)
8111b758:	ddc01f15 	stw	r23,124(sp)
8111b75c:	dd801e15 	stw	r22,120(sp)
8111b760:	dd401d15 	stw	r21,116(sp)
8111b764:	dd001c15 	stw	r20,112(sp)
8111b768:	d9c00315 	stw	r7,12(sp)
8111b76c:	2039883a 	mov	fp,r4
8111b770:	3023883a 	mov	r17,r6
8111b774:	2825883a 	mov	r18,r5
8111b778:	dc002417 	ldw	r16,144(sp)
8111b77c:	3027883a 	mov	r19,r6
8111b780:	10000826 	beq	r2,zero,8111b7a4 <_dtoa_r+0x74>
8111b784:	21801117 	ldw	r6,68(r4)
8111b788:	00c00044 	movi	r3,1
8111b78c:	100b883a 	mov	r5,r2
8111b790:	1986983a 	sll	r3,r3,r6
8111b794:	11800115 	stw	r6,4(r2)
8111b798:	10c00215 	stw	r3,8(r2)
8111b79c:	111e8f80 	call	8111e8f8 <_Bfree>
8111b7a0:	e0001015 	stw	zero,64(fp)
8111b7a4:	88002e16 	blt	r17,zero,8111b860 <_dtoa_r+0x130>
8111b7a8:	80000015 	stw	zero,0(r16)
8111b7ac:	889ffc2c 	andhi	r2,r17,32752
8111b7b0:	00dffc34 	movhi	r3,32752
8111b7b4:	10c01c26 	beq	r2,r3,8111b828 <_dtoa_r+0xf8>
8111b7b8:	000d883a 	mov	r6,zero
8111b7bc:	000f883a 	mov	r7,zero
8111b7c0:	9009883a 	mov	r4,r18
8111b7c4:	980b883a 	mov	r5,r19
8111b7c8:	112805c0 	call	8112805c <__eqdf2>
8111b7cc:	10002b1e 	bne	r2,zero,8111b87c <_dtoa_r+0x14c>
8111b7d0:	d9c02317 	ldw	r7,140(sp)
8111b7d4:	00800044 	movi	r2,1
8111b7d8:	38800015 	stw	r2,0(r7)
8111b7dc:	d8802517 	ldw	r2,148(sp)
8111b7e0:	10019e26 	beq	r2,zero,8111be5c <_dtoa_r+0x72c>
8111b7e4:	d8c02517 	ldw	r3,148(sp)
8111b7e8:	00a04534 	movhi	r2,33044
8111b7ec:	10878e44 	addi	r2,r2,7737
8111b7f0:	18800015 	stw	r2,0(r3)
8111b7f4:	10bfffc4 	addi	r2,r2,-1
8111b7f8:	dfc02117 	ldw	ra,132(sp)
8111b7fc:	df002017 	ldw	fp,128(sp)
8111b800:	ddc01f17 	ldw	r23,124(sp)
8111b804:	dd801e17 	ldw	r22,120(sp)
8111b808:	dd401d17 	ldw	r21,116(sp)
8111b80c:	dd001c17 	ldw	r20,112(sp)
8111b810:	dcc01b17 	ldw	r19,108(sp)
8111b814:	dc801a17 	ldw	r18,104(sp)
8111b818:	dc401917 	ldw	r17,100(sp)
8111b81c:	dc001817 	ldw	r16,96(sp)
8111b820:	dec02204 	addi	sp,sp,136
8111b824:	f800283a 	ret
8111b828:	d8c02317 	ldw	r3,140(sp)
8111b82c:	0089c3c4 	movi	r2,9999
8111b830:	18800015 	stw	r2,0(r3)
8111b834:	90017726 	beq	r18,zero,8111be14 <_dtoa_r+0x6e4>
8111b838:	00a04534 	movhi	r2,33044
8111b83c:	1087ac04 	addi	r2,r2,7856
8111b840:	d9002517 	ldw	r4,148(sp)
8111b844:	203fec26 	beq	r4,zero,8111b7f8 <__reset+0xfb0fb7f8>
8111b848:	10c000c7 	ldb	r3,3(r2)
8111b84c:	1801781e 	bne	r3,zero,8111be30 <_dtoa_r+0x700>
8111b850:	10c000c4 	addi	r3,r2,3
8111b854:	d9802517 	ldw	r6,148(sp)
8111b858:	30c00015 	stw	r3,0(r6)
8111b85c:	003fe606 	br	8111b7f8 <__reset+0xfb0fb7f8>
8111b860:	04e00034 	movhi	r19,32768
8111b864:	9cffffc4 	addi	r19,r19,-1
8111b868:	00800044 	movi	r2,1
8111b86c:	8ce6703a 	and	r19,r17,r19
8111b870:	80800015 	stw	r2,0(r16)
8111b874:	9823883a 	mov	r17,r19
8111b878:	003fcc06 	br	8111b7ac <__reset+0xfb0fb7ac>
8111b87c:	d8800204 	addi	r2,sp,8
8111b880:	d8800015 	stw	r2,0(sp)
8111b884:	d9c00104 	addi	r7,sp,4
8111b888:	900b883a 	mov	r5,r18
8111b88c:	980d883a 	mov	r6,r19
8111b890:	e009883a 	mov	r4,fp
8111b894:	8820d53a 	srli	r16,r17,20
8111b898:	111f5240 	call	8111f524 <__d2b>
8111b89c:	d8800915 	stw	r2,36(sp)
8111b8a0:	8001651e 	bne	r16,zero,8111be38 <_dtoa_r+0x708>
8111b8a4:	dd800217 	ldw	r22,8(sp)
8111b8a8:	dc000117 	ldw	r16,4(sp)
8111b8ac:	00800804 	movi	r2,32
8111b8b0:	b421883a 	add	r16,r22,r16
8111b8b4:	80c10c84 	addi	r3,r16,1074
8111b8b8:	10c2d10e 	bge	r2,r3,8111c400 <_dtoa_r+0xcd0>
8111b8bc:	00801004 	movi	r2,64
8111b8c0:	81010484 	addi	r4,r16,1042
8111b8c4:	10c7c83a 	sub	r3,r2,r3
8111b8c8:	9108d83a 	srl	r4,r18,r4
8111b8cc:	88e2983a 	sll	r17,r17,r3
8111b8d0:	2448b03a 	or	r4,r4,r17
8111b8d4:	1128d1c0 	call	81128d1c <__floatunsidf>
8111b8d8:	017f8434 	movhi	r5,65040
8111b8dc:	01800044 	movi	r6,1
8111b8e0:	1009883a 	mov	r4,r2
8111b8e4:	194b883a 	add	r5,r3,r5
8111b8e8:	843fffc4 	addi	r16,r16,-1
8111b8ec:	d9801115 	stw	r6,68(sp)
8111b8f0:	000d883a 	mov	r6,zero
8111b8f4:	01cffe34 	movhi	r7,16376
8111b8f8:	11282b40 	call	811282b4 <__subdf3>
8111b8fc:	0198dbf4 	movhi	r6,25455
8111b900:	01cff4f4 	movhi	r7,16339
8111b904:	3190d844 	addi	r6,r6,17249
8111b908:	39e1e9c4 	addi	r7,r7,-30809
8111b90c:	1009883a 	mov	r4,r2
8111b910:	180b883a 	mov	r5,r3
8111b914:	11129a80 	call	811129a8 <__muldf3>
8111b918:	01a2d874 	movhi	r6,35681
8111b91c:	01cff1f4 	movhi	r7,16327
8111b920:	31b22cc4 	addi	r6,r6,-14157
8111b924:	39e28a04 	addi	r7,r7,-30168
8111b928:	180b883a 	mov	r5,r3
8111b92c:	1009883a 	mov	r4,r2
8111b930:	1126eb80 	call	81126eb8 <__adddf3>
8111b934:	8009883a 	mov	r4,r16
8111b938:	1029883a 	mov	r20,r2
8111b93c:	1823883a 	mov	r17,r3
8111b940:	1128c380 	call	81128c38 <__floatsidf>
8111b944:	019427f4 	movhi	r6,20639
8111b948:	01cff4f4 	movhi	r7,16339
8111b94c:	319e7ec4 	addi	r6,r6,31227
8111b950:	39d104c4 	addi	r7,r7,17427
8111b954:	1009883a 	mov	r4,r2
8111b958:	180b883a 	mov	r5,r3
8111b95c:	11129a80 	call	811129a8 <__muldf3>
8111b960:	100d883a 	mov	r6,r2
8111b964:	180f883a 	mov	r7,r3
8111b968:	a009883a 	mov	r4,r20
8111b96c:	880b883a 	mov	r5,r17
8111b970:	1126eb80 	call	81126eb8 <__adddf3>
8111b974:	1009883a 	mov	r4,r2
8111b978:	180b883a 	mov	r5,r3
8111b97c:	1029883a 	mov	r20,r2
8111b980:	1823883a 	mov	r17,r3
8111b984:	1128bb80 	call	81128bb8 <__fixdfsi>
8111b988:	000d883a 	mov	r6,zero
8111b98c:	000f883a 	mov	r7,zero
8111b990:	a009883a 	mov	r4,r20
8111b994:	880b883a 	mov	r5,r17
8111b998:	d8800515 	stw	r2,20(sp)
8111b99c:	11281c00 	call	811281c0 <__ledf2>
8111b9a0:	10028716 	blt	r2,zero,8111c3c0 <_dtoa_r+0xc90>
8111b9a4:	d8c00517 	ldw	r3,20(sp)
8111b9a8:	00800584 	movi	r2,22
8111b9ac:	10c27536 	bltu	r2,r3,8111c384 <_dtoa_r+0xc54>
8111b9b0:	180490fa 	slli	r2,r3,3
8111b9b4:	00e04534 	movhi	r3,33044
8111b9b8:	18c7c704 	addi	r3,r3,7964
8111b9bc:	1885883a 	add	r2,r3,r2
8111b9c0:	11000017 	ldw	r4,0(r2)
8111b9c4:	11400117 	ldw	r5,4(r2)
8111b9c8:	900d883a 	mov	r6,r18
8111b9cc:	980f883a 	mov	r7,r19
8111b9d0:	11280e40 	call	811280e4 <__gedf2>
8111b9d4:	00828d0e 	bge	zero,r2,8111c40c <_dtoa_r+0xcdc>
8111b9d8:	d9000517 	ldw	r4,20(sp)
8111b9dc:	d8000e15 	stw	zero,56(sp)
8111b9e0:	213fffc4 	addi	r4,r4,-1
8111b9e4:	d9000515 	stw	r4,20(sp)
8111b9e8:	b42dc83a 	sub	r22,r22,r16
8111b9ec:	b5bfffc4 	addi	r22,r22,-1
8111b9f0:	b0026f16 	blt	r22,zero,8111c3b0 <_dtoa_r+0xc80>
8111b9f4:	d8000815 	stw	zero,32(sp)
8111b9f8:	d9c00517 	ldw	r7,20(sp)
8111b9fc:	38026416 	blt	r7,zero,8111c390 <_dtoa_r+0xc60>
8111ba00:	b1ed883a 	add	r22,r22,r7
8111ba04:	d9c00d15 	stw	r7,52(sp)
8111ba08:	d8000a15 	stw	zero,40(sp)
8111ba0c:	d9800317 	ldw	r6,12(sp)
8111ba10:	00800244 	movi	r2,9
8111ba14:	11811436 	bltu	r2,r6,8111be68 <_dtoa_r+0x738>
8111ba18:	00800144 	movi	r2,5
8111ba1c:	1184e10e 	bge	r2,r6,8111cda4 <_dtoa_r+0x1674>
8111ba20:	31bfff04 	addi	r6,r6,-4
8111ba24:	d9800315 	stw	r6,12(sp)
8111ba28:	0023883a 	mov	r17,zero
8111ba2c:	d9800317 	ldw	r6,12(sp)
8111ba30:	008000c4 	movi	r2,3
8111ba34:	30836726 	beq	r6,r2,8111c7d4 <_dtoa_r+0x10a4>
8111ba38:	1183410e 	bge	r2,r6,8111c740 <_dtoa_r+0x1010>
8111ba3c:	d9c00317 	ldw	r7,12(sp)
8111ba40:	00800104 	movi	r2,4
8111ba44:	38827c26 	beq	r7,r2,8111c438 <_dtoa_r+0xd08>
8111ba48:	00800144 	movi	r2,5
8111ba4c:	3884c41e 	bne	r7,r2,8111cd60 <_dtoa_r+0x1630>
8111ba50:	00800044 	movi	r2,1
8111ba54:	d8800b15 	stw	r2,44(sp)
8111ba58:	d8c00517 	ldw	r3,20(sp)
8111ba5c:	d9002217 	ldw	r4,136(sp)
8111ba60:	1907883a 	add	r3,r3,r4
8111ba64:	19800044 	addi	r6,r3,1
8111ba68:	d8c00c15 	stw	r3,48(sp)
8111ba6c:	d9800615 	stw	r6,24(sp)
8111ba70:	0183a40e 	bge	zero,r6,8111c904 <_dtoa_r+0x11d4>
8111ba74:	d9800617 	ldw	r6,24(sp)
8111ba78:	3021883a 	mov	r16,r6
8111ba7c:	e0001115 	stw	zero,68(fp)
8111ba80:	008005c4 	movi	r2,23
8111ba84:	1184c92e 	bgeu	r2,r6,8111cdac <_dtoa_r+0x167c>
8111ba88:	00c00044 	movi	r3,1
8111ba8c:	00800104 	movi	r2,4
8111ba90:	1085883a 	add	r2,r2,r2
8111ba94:	11000504 	addi	r4,r2,20
8111ba98:	180b883a 	mov	r5,r3
8111ba9c:	18c00044 	addi	r3,r3,1
8111baa0:	313ffb2e 	bgeu	r6,r4,8111ba90 <__reset+0xfb0fba90>
8111baa4:	e1401115 	stw	r5,68(fp)
8111baa8:	e009883a 	mov	r4,fp
8111baac:	111e8480 	call	8111e848 <_Balloc>
8111bab0:	d8800715 	stw	r2,28(sp)
8111bab4:	e0801015 	stw	r2,64(fp)
8111bab8:	00800384 	movi	r2,14
8111babc:	1400f736 	bltu	r2,r16,8111be9c <_dtoa_r+0x76c>
8111bac0:	8800f626 	beq	r17,zero,8111be9c <_dtoa_r+0x76c>
8111bac4:	d9c00517 	ldw	r7,20(sp)
8111bac8:	01c39a0e 	bge	zero,r7,8111c934 <_dtoa_r+0x1204>
8111bacc:	388003cc 	andi	r2,r7,15
8111bad0:	100490fa 	slli	r2,r2,3
8111bad4:	382bd13a 	srai	r21,r7,4
8111bad8:	00e04534 	movhi	r3,33044
8111badc:	18c7c704 	addi	r3,r3,7964
8111bae0:	1885883a 	add	r2,r3,r2
8111bae4:	a8c0040c 	andi	r3,r21,16
8111bae8:	12400017 	ldw	r9,0(r2)
8111baec:	12000117 	ldw	r8,4(r2)
8111baf0:	18037926 	beq	r3,zero,8111c8d8 <_dtoa_r+0x11a8>
8111baf4:	00a04534 	movhi	r2,33044
8111baf8:	1087bd04 	addi	r2,r2,7924
8111bafc:	11800817 	ldw	r6,32(r2)
8111bb00:	11c00917 	ldw	r7,36(r2)
8111bb04:	9009883a 	mov	r4,r18
8111bb08:	980b883a 	mov	r5,r19
8111bb0c:	da001715 	stw	r8,92(sp)
8111bb10:	da401615 	stw	r9,88(sp)
8111bb14:	112776c0 	call	8112776c <__divdf3>
8111bb18:	da001717 	ldw	r8,92(sp)
8111bb1c:	da401617 	ldw	r9,88(sp)
8111bb20:	ad4003cc 	andi	r21,r21,15
8111bb24:	040000c4 	movi	r16,3
8111bb28:	1023883a 	mov	r17,r2
8111bb2c:	1829883a 	mov	r20,r3
8111bb30:	a8001126 	beq	r21,zero,8111bb78 <_dtoa_r+0x448>
8111bb34:	05e04534 	movhi	r23,33044
8111bb38:	bdc7bd04 	addi	r23,r23,7924
8111bb3c:	4805883a 	mov	r2,r9
8111bb40:	4007883a 	mov	r3,r8
8111bb44:	a980004c 	andi	r6,r21,1
8111bb48:	1009883a 	mov	r4,r2
8111bb4c:	a82bd07a 	srai	r21,r21,1
8111bb50:	180b883a 	mov	r5,r3
8111bb54:	30000426 	beq	r6,zero,8111bb68 <_dtoa_r+0x438>
8111bb58:	b9800017 	ldw	r6,0(r23)
8111bb5c:	b9c00117 	ldw	r7,4(r23)
8111bb60:	84000044 	addi	r16,r16,1
8111bb64:	11129a80 	call	811129a8 <__muldf3>
8111bb68:	bdc00204 	addi	r23,r23,8
8111bb6c:	a83ff51e 	bne	r21,zero,8111bb44 <__reset+0xfb0fbb44>
8111bb70:	1013883a 	mov	r9,r2
8111bb74:	1811883a 	mov	r8,r3
8111bb78:	480d883a 	mov	r6,r9
8111bb7c:	400f883a 	mov	r7,r8
8111bb80:	8809883a 	mov	r4,r17
8111bb84:	a00b883a 	mov	r5,r20
8111bb88:	112776c0 	call	8112776c <__divdf3>
8111bb8c:	d8800f15 	stw	r2,60(sp)
8111bb90:	d8c01015 	stw	r3,64(sp)
8111bb94:	d8c00e17 	ldw	r3,56(sp)
8111bb98:	18000626 	beq	r3,zero,8111bbb4 <_dtoa_r+0x484>
8111bb9c:	d9000f17 	ldw	r4,60(sp)
8111bba0:	d9401017 	ldw	r5,64(sp)
8111bba4:	000d883a 	mov	r6,zero
8111bba8:	01cffc34 	movhi	r7,16368
8111bbac:	11281c00 	call	811281c0 <__ledf2>
8111bbb0:	10040b16 	blt	r2,zero,8111cbe0 <_dtoa_r+0x14b0>
8111bbb4:	8009883a 	mov	r4,r16
8111bbb8:	1128c380 	call	81128c38 <__floatsidf>
8111bbbc:	d9800f17 	ldw	r6,60(sp)
8111bbc0:	d9c01017 	ldw	r7,64(sp)
8111bbc4:	1009883a 	mov	r4,r2
8111bbc8:	180b883a 	mov	r5,r3
8111bbcc:	11129a80 	call	811129a8 <__muldf3>
8111bbd0:	000d883a 	mov	r6,zero
8111bbd4:	01d00734 	movhi	r7,16412
8111bbd8:	1009883a 	mov	r4,r2
8111bbdc:	180b883a 	mov	r5,r3
8111bbe0:	1126eb80 	call	81126eb8 <__adddf3>
8111bbe4:	1021883a 	mov	r16,r2
8111bbe8:	d8800617 	ldw	r2,24(sp)
8111bbec:	047f3034 	movhi	r17,64704
8111bbf0:	1c63883a 	add	r17,r3,r17
8111bbf4:	10031826 	beq	r2,zero,8111c858 <_dtoa_r+0x1128>
8111bbf8:	d8c00517 	ldw	r3,20(sp)
8111bbfc:	db000617 	ldw	r12,24(sp)
8111bc00:	d8c01315 	stw	r3,76(sp)
8111bc04:	d9000b17 	ldw	r4,44(sp)
8111bc08:	20038f26 	beq	r4,zero,8111ca48 <_dtoa_r+0x1318>
8111bc0c:	60bfffc4 	addi	r2,r12,-1
8111bc10:	100490fa 	slli	r2,r2,3
8111bc14:	00e04534 	movhi	r3,33044
8111bc18:	18c7c704 	addi	r3,r3,7964
8111bc1c:	1885883a 	add	r2,r3,r2
8111bc20:	11800017 	ldw	r6,0(r2)
8111bc24:	11c00117 	ldw	r7,4(r2)
8111bc28:	d8800717 	ldw	r2,28(sp)
8111bc2c:	0009883a 	mov	r4,zero
8111bc30:	014ff834 	movhi	r5,16352
8111bc34:	db001615 	stw	r12,88(sp)
8111bc38:	15c00044 	addi	r23,r2,1
8111bc3c:	112776c0 	call	8112776c <__divdf3>
8111bc40:	800d883a 	mov	r6,r16
8111bc44:	880f883a 	mov	r7,r17
8111bc48:	1009883a 	mov	r4,r2
8111bc4c:	180b883a 	mov	r5,r3
8111bc50:	11282b40 	call	811282b4 <__subdf3>
8111bc54:	d9401017 	ldw	r5,64(sp)
8111bc58:	d9000f17 	ldw	r4,60(sp)
8111bc5c:	102b883a 	mov	r21,r2
8111bc60:	d8c01215 	stw	r3,72(sp)
8111bc64:	1128bb80 	call	81128bb8 <__fixdfsi>
8111bc68:	1009883a 	mov	r4,r2
8111bc6c:	1029883a 	mov	r20,r2
8111bc70:	1128c380 	call	81128c38 <__floatsidf>
8111bc74:	d9000f17 	ldw	r4,60(sp)
8111bc78:	d9401017 	ldw	r5,64(sp)
8111bc7c:	100d883a 	mov	r6,r2
8111bc80:	180f883a 	mov	r7,r3
8111bc84:	11282b40 	call	811282b4 <__subdf3>
8111bc88:	1823883a 	mov	r17,r3
8111bc8c:	d8c00717 	ldw	r3,28(sp)
8111bc90:	d9401217 	ldw	r5,72(sp)
8111bc94:	a2000c04 	addi	r8,r20,48
8111bc98:	1021883a 	mov	r16,r2
8111bc9c:	1a000005 	stb	r8,0(r3)
8111bca0:	800d883a 	mov	r6,r16
8111bca4:	880f883a 	mov	r7,r17
8111bca8:	a809883a 	mov	r4,r21
8111bcac:	4029883a 	mov	r20,r8
8111bcb0:	11280e40 	call	811280e4 <__gedf2>
8111bcb4:	00841d16 	blt	zero,r2,8111cd2c <_dtoa_r+0x15fc>
8111bcb8:	800d883a 	mov	r6,r16
8111bcbc:	880f883a 	mov	r7,r17
8111bcc0:	0009883a 	mov	r4,zero
8111bcc4:	014ffc34 	movhi	r5,16368
8111bcc8:	11282b40 	call	811282b4 <__subdf3>
8111bccc:	d9401217 	ldw	r5,72(sp)
8111bcd0:	100d883a 	mov	r6,r2
8111bcd4:	180f883a 	mov	r7,r3
8111bcd8:	a809883a 	mov	r4,r21
8111bcdc:	11280e40 	call	811280e4 <__gedf2>
8111bce0:	db001617 	ldw	r12,88(sp)
8111bce4:	00840e16 	blt	zero,r2,8111cd20 <_dtoa_r+0x15f0>
8111bce8:	00800044 	movi	r2,1
8111bcec:	13006b0e 	bge	r2,r12,8111be9c <_dtoa_r+0x76c>
8111bcf0:	d9000717 	ldw	r4,28(sp)
8111bcf4:	dd800f15 	stw	r22,60(sp)
8111bcf8:	dcc01015 	stw	r19,64(sp)
8111bcfc:	2319883a 	add	r12,r4,r12
8111bd00:	dcc01217 	ldw	r19,72(sp)
8111bd04:	602d883a 	mov	r22,r12
8111bd08:	dc801215 	stw	r18,72(sp)
8111bd0c:	b825883a 	mov	r18,r23
8111bd10:	00000906 	br	8111bd38 <_dtoa_r+0x608>
8111bd14:	11282b40 	call	811282b4 <__subdf3>
8111bd18:	a80d883a 	mov	r6,r21
8111bd1c:	980f883a 	mov	r7,r19
8111bd20:	1009883a 	mov	r4,r2
8111bd24:	180b883a 	mov	r5,r3
8111bd28:	11281c00 	call	811281c0 <__ledf2>
8111bd2c:	1003e816 	blt	r2,zero,8111ccd0 <_dtoa_r+0x15a0>
8111bd30:	b825883a 	mov	r18,r23
8111bd34:	bd83e926 	beq	r23,r22,8111ccdc <_dtoa_r+0x15ac>
8111bd38:	a809883a 	mov	r4,r21
8111bd3c:	980b883a 	mov	r5,r19
8111bd40:	000d883a 	mov	r6,zero
8111bd44:	01d00934 	movhi	r7,16420
8111bd48:	11129a80 	call	811129a8 <__muldf3>
8111bd4c:	000d883a 	mov	r6,zero
8111bd50:	01d00934 	movhi	r7,16420
8111bd54:	8009883a 	mov	r4,r16
8111bd58:	880b883a 	mov	r5,r17
8111bd5c:	102b883a 	mov	r21,r2
8111bd60:	1827883a 	mov	r19,r3
8111bd64:	11129a80 	call	811129a8 <__muldf3>
8111bd68:	180b883a 	mov	r5,r3
8111bd6c:	1009883a 	mov	r4,r2
8111bd70:	1821883a 	mov	r16,r3
8111bd74:	1023883a 	mov	r17,r2
8111bd78:	1128bb80 	call	81128bb8 <__fixdfsi>
8111bd7c:	1009883a 	mov	r4,r2
8111bd80:	1029883a 	mov	r20,r2
8111bd84:	1128c380 	call	81128c38 <__floatsidf>
8111bd88:	8809883a 	mov	r4,r17
8111bd8c:	800b883a 	mov	r5,r16
8111bd90:	100d883a 	mov	r6,r2
8111bd94:	180f883a 	mov	r7,r3
8111bd98:	11282b40 	call	811282b4 <__subdf3>
8111bd9c:	a5000c04 	addi	r20,r20,48
8111bda0:	a80d883a 	mov	r6,r21
8111bda4:	980f883a 	mov	r7,r19
8111bda8:	1009883a 	mov	r4,r2
8111bdac:	180b883a 	mov	r5,r3
8111bdb0:	95000005 	stb	r20,0(r18)
8111bdb4:	1021883a 	mov	r16,r2
8111bdb8:	1823883a 	mov	r17,r3
8111bdbc:	11281c00 	call	811281c0 <__ledf2>
8111bdc0:	bdc00044 	addi	r23,r23,1
8111bdc4:	800d883a 	mov	r6,r16
8111bdc8:	880f883a 	mov	r7,r17
8111bdcc:	0009883a 	mov	r4,zero
8111bdd0:	014ffc34 	movhi	r5,16368
8111bdd4:	103fcf0e 	bge	r2,zero,8111bd14 <__reset+0xfb0fbd14>
8111bdd8:	d8c01317 	ldw	r3,76(sp)
8111bddc:	d8c00515 	stw	r3,20(sp)
8111bde0:	d9400917 	ldw	r5,36(sp)
8111bde4:	e009883a 	mov	r4,fp
8111bde8:	111e8f80 	call	8111e8f8 <_Bfree>
8111bdec:	d9000517 	ldw	r4,20(sp)
8111bdf0:	d9802317 	ldw	r6,140(sp)
8111bdf4:	d9c02517 	ldw	r7,148(sp)
8111bdf8:	b8000005 	stb	zero,0(r23)
8111bdfc:	20800044 	addi	r2,r4,1
8111be00:	30800015 	stw	r2,0(r6)
8111be04:	3802aa26 	beq	r7,zero,8111c8b0 <_dtoa_r+0x1180>
8111be08:	3dc00015 	stw	r23,0(r7)
8111be0c:	d8800717 	ldw	r2,28(sp)
8111be10:	003e7906 	br	8111b7f8 <__reset+0xfb0fb7f8>
8111be14:	00800434 	movhi	r2,16
8111be18:	10bfffc4 	addi	r2,r2,-1
8111be1c:	88a2703a 	and	r17,r17,r2
8111be20:	883e851e 	bne	r17,zero,8111b838 <__reset+0xfb0fb838>
8111be24:	00a04534 	movhi	r2,33044
8111be28:	1087a904 	addi	r2,r2,7844
8111be2c:	003e8406 	br	8111b840 <__reset+0xfb0fb840>
8111be30:	10c00204 	addi	r3,r2,8
8111be34:	003e8706 	br	8111b854 <__reset+0xfb0fb854>
8111be38:	01400434 	movhi	r5,16
8111be3c:	297fffc4 	addi	r5,r5,-1
8111be40:	994a703a 	and	r5,r19,r5
8111be44:	9009883a 	mov	r4,r18
8111be48:	843f0044 	addi	r16,r16,-1023
8111be4c:	294ffc34 	orhi	r5,r5,16368
8111be50:	dd800217 	ldw	r22,8(sp)
8111be54:	d8001115 	stw	zero,68(sp)
8111be58:	003ea506 	br	8111b8f0 <__reset+0xfb0fb8f0>
8111be5c:	00a04534 	movhi	r2,33044
8111be60:	10878e04 	addi	r2,r2,7736
8111be64:	003e6406 	br	8111b7f8 <__reset+0xfb0fb7f8>
8111be68:	e0001115 	stw	zero,68(fp)
8111be6c:	000b883a 	mov	r5,zero
8111be70:	e009883a 	mov	r4,fp
8111be74:	111e8480 	call	8111e848 <_Balloc>
8111be78:	01bfffc4 	movi	r6,-1
8111be7c:	01c00044 	movi	r7,1
8111be80:	d8800715 	stw	r2,28(sp)
8111be84:	d9800c15 	stw	r6,48(sp)
8111be88:	e0801015 	stw	r2,64(fp)
8111be8c:	d8000315 	stw	zero,12(sp)
8111be90:	d9c00b15 	stw	r7,44(sp)
8111be94:	d9800615 	stw	r6,24(sp)
8111be98:	d8002215 	stw	zero,136(sp)
8111be9c:	d8800117 	ldw	r2,4(sp)
8111bea0:	10008916 	blt	r2,zero,8111c0c8 <_dtoa_r+0x998>
8111bea4:	d9000517 	ldw	r4,20(sp)
8111bea8:	00c00384 	movi	r3,14
8111beac:	19008616 	blt	r3,r4,8111c0c8 <_dtoa_r+0x998>
8111beb0:	200490fa 	slli	r2,r4,3
8111beb4:	00e04534 	movhi	r3,33044
8111beb8:	d9802217 	ldw	r6,136(sp)
8111bebc:	18c7c704 	addi	r3,r3,7964
8111bec0:	1885883a 	add	r2,r3,r2
8111bec4:	14000017 	ldw	r16,0(r2)
8111bec8:	14400117 	ldw	r17,4(r2)
8111becc:	30016316 	blt	r6,zero,8111c45c <_dtoa_r+0xd2c>
8111bed0:	800d883a 	mov	r6,r16
8111bed4:	880f883a 	mov	r7,r17
8111bed8:	9009883a 	mov	r4,r18
8111bedc:	980b883a 	mov	r5,r19
8111bee0:	112776c0 	call	8112776c <__divdf3>
8111bee4:	180b883a 	mov	r5,r3
8111bee8:	1009883a 	mov	r4,r2
8111beec:	1128bb80 	call	81128bb8 <__fixdfsi>
8111bef0:	1009883a 	mov	r4,r2
8111bef4:	102b883a 	mov	r21,r2
8111bef8:	1128c380 	call	81128c38 <__floatsidf>
8111befc:	800d883a 	mov	r6,r16
8111bf00:	880f883a 	mov	r7,r17
8111bf04:	1009883a 	mov	r4,r2
8111bf08:	180b883a 	mov	r5,r3
8111bf0c:	11129a80 	call	811129a8 <__muldf3>
8111bf10:	100d883a 	mov	r6,r2
8111bf14:	180f883a 	mov	r7,r3
8111bf18:	9009883a 	mov	r4,r18
8111bf1c:	980b883a 	mov	r5,r19
8111bf20:	11282b40 	call	811282b4 <__subdf3>
8111bf24:	d9c00717 	ldw	r7,28(sp)
8111bf28:	1009883a 	mov	r4,r2
8111bf2c:	a8800c04 	addi	r2,r21,48
8111bf30:	38800005 	stb	r2,0(r7)
8111bf34:	3dc00044 	addi	r23,r7,1
8111bf38:	d9c00617 	ldw	r7,24(sp)
8111bf3c:	01800044 	movi	r6,1
8111bf40:	180b883a 	mov	r5,r3
8111bf44:	2005883a 	mov	r2,r4
8111bf48:	39803826 	beq	r7,r6,8111c02c <_dtoa_r+0x8fc>
8111bf4c:	000d883a 	mov	r6,zero
8111bf50:	01d00934 	movhi	r7,16420
8111bf54:	11129a80 	call	811129a8 <__muldf3>
8111bf58:	000d883a 	mov	r6,zero
8111bf5c:	000f883a 	mov	r7,zero
8111bf60:	1009883a 	mov	r4,r2
8111bf64:	180b883a 	mov	r5,r3
8111bf68:	1025883a 	mov	r18,r2
8111bf6c:	1827883a 	mov	r19,r3
8111bf70:	112805c0 	call	8112805c <__eqdf2>
8111bf74:	103f9a26 	beq	r2,zero,8111bde0 <__reset+0xfb0fbde0>
8111bf78:	d9c00617 	ldw	r7,24(sp)
8111bf7c:	d8c00717 	ldw	r3,28(sp)
8111bf80:	b829883a 	mov	r20,r23
8111bf84:	38bfffc4 	addi	r2,r7,-1
8111bf88:	18ad883a 	add	r22,r3,r2
8111bf8c:	00000a06 	br	8111bfb8 <_dtoa_r+0x888>
8111bf90:	11129a80 	call	811129a8 <__muldf3>
8111bf94:	000d883a 	mov	r6,zero
8111bf98:	000f883a 	mov	r7,zero
8111bf9c:	1009883a 	mov	r4,r2
8111bfa0:	180b883a 	mov	r5,r3
8111bfa4:	1025883a 	mov	r18,r2
8111bfa8:	1827883a 	mov	r19,r3
8111bfac:	b829883a 	mov	r20,r23
8111bfb0:	112805c0 	call	8112805c <__eqdf2>
8111bfb4:	103f8a26 	beq	r2,zero,8111bde0 <__reset+0xfb0fbde0>
8111bfb8:	800d883a 	mov	r6,r16
8111bfbc:	880f883a 	mov	r7,r17
8111bfc0:	9009883a 	mov	r4,r18
8111bfc4:	980b883a 	mov	r5,r19
8111bfc8:	112776c0 	call	8112776c <__divdf3>
8111bfcc:	180b883a 	mov	r5,r3
8111bfd0:	1009883a 	mov	r4,r2
8111bfd4:	1128bb80 	call	81128bb8 <__fixdfsi>
8111bfd8:	1009883a 	mov	r4,r2
8111bfdc:	102b883a 	mov	r21,r2
8111bfe0:	1128c380 	call	81128c38 <__floatsidf>
8111bfe4:	800d883a 	mov	r6,r16
8111bfe8:	880f883a 	mov	r7,r17
8111bfec:	1009883a 	mov	r4,r2
8111bff0:	180b883a 	mov	r5,r3
8111bff4:	11129a80 	call	811129a8 <__muldf3>
8111bff8:	100d883a 	mov	r6,r2
8111bffc:	180f883a 	mov	r7,r3
8111c000:	9009883a 	mov	r4,r18
8111c004:	980b883a 	mov	r5,r19
8111c008:	11282b40 	call	811282b4 <__subdf3>
8111c00c:	aa000c04 	addi	r8,r21,48
8111c010:	a2000005 	stb	r8,0(r20)
8111c014:	000d883a 	mov	r6,zero
8111c018:	01d00934 	movhi	r7,16420
8111c01c:	1009883a 	mov	r4,r2
8111c020:	180b883a 	mov	r5,r3
8111c024:	a5c00044 	addi	r23,r20,1
8111c028:	b53fd91e 	bne	r22,r20,8111bf90 <__reset+0xfb0fbf90>
8111c02c:	100d883a 	mov	r6,r2
8111c030:	180f883a 	mov	r7,r3
8111c034:	1009883a 	mov	r4,r2
8111c038:	180b883a 	mov	r5,r3
8111c03c:	1126eb80 	call	81126eb8 <__adddf3>
8111c040:	100d883a 	mov	r6,r2
8111c044:	180f883a 	mov	r7,r3
8111c048:	8009883a 	mov	r4,r16
8111c04c:	880b883a 	mov	r5,r17
8111c050:	1027883a 	mov	r19,r2
8111c054:	1825883a 	mov	r18,r3
8111c058:	11281c00 	call	811281c0 <__ledf2>
8111c05c:	10000816 	blt	r2,zero,8111c080 <_dtoa_r+0x950>
8111c060:	980d883a 	mov	r6,r19
8111c064:	900f883a 	mov	r7,r18
8111c068:	8009883a 	mov	r4,r16
8111c06c:	880b883a 	mov	r5,r17
8111c070:	112805c0 	call	8112805c <__eqdf2>
8111c074:	103f5a1e 	bne	r2,zero,8111bde0 <__reset+0xfb0fbde0>
8111c078:	ad40004c 	andi	r21,r21,1
8111c07c:	a83f5826 	beq	r21,zero,8111bde0 <__reset+0xfb0fbde0>
8111c080:	bd3fffc3 	ldbu	r20,-1(r23)
8111c084:	b8bfffc4 	addi	r2,r23,-1
8111c088:	1007883a 	mov	r3,r2
8111c08c:	01400e44 	movi	r5,57
8111c090:	d9800717 	ldw	r6,28(sp)
8111c094:	00000506 	br	8111c0ac <_dtoa_r+0x97c>
8111c098:	18ffffc4 	addi	r3,r3,-1
8111c09c:	11824726 	beq	r2,r6,8111c9bc <_dtoa_r+0x128c>
8111c0a0:	1d000003 	ldbu	r20,0(r3)
8111c0a4:	102f883a 	mov	r23,r2
8111c0a8:	10bfffc4 	addi	r2,r2,-1
8111c0ac:	a1003fcc 	andi	r4,r20,255
8111c0b0:	2100201c 	xori	r4,r4,128
8111c0b4:	213fe004 	addi	r4,r4,-128
8111c0b8:	217ff726 	beq	r4,r5,8111c098 <__reset+0xfb0fc098>
8111c0bc:	a2000044 	addi	r8,r20,1
8111c0c0:	12000005 	stb	r8,0(r2)
8111c0c4:	003f4606 	br	8111bde0 <__reset+0xfb0fbde0>
8111c0c8:	d9000b17 	ldw	r4,44(sp)
8111c0cc:	2000c826 	beq	r4,zero,8111c3f0 <_dtoa_r+0xcc0>
8111c0d0:	d9800317 	ldw	r6,12(sp)
8111c0d4:	00c00044 	movi	r3,1
8111c0d8:	1980f90e 	bge	r3,r6,8111c4c0 <_dtoa_r+0xd90>
8111c0dc:	d8800617 	ldw	r2,24(sp)
8111c0e0:	d8c00a17 	ldw	r3,40(sp)
8111c0e4:	157fffc4 	addi	r21,r2,-1
8111c0e8:	1d41f316 	blt	r3,r21,8111c8b8 <_dtoa_r+0x1188>
8111c0ec:	1d6bc83a 	sub	r21,r3,r21
8111c0f0:	d9c00617 	ldw	r7,24(sp)
8111c0f4:	3802aa16 	blt	r7,zero,8111cba0 <_dtoa_r+0x1470>
8111c0f8:	dd000817 	ldw	r20,32(sp)
8111c0fc:	d8800617 	ldw	r2,24(sp)
8111c100:	d8c00817 	ldw	r3,32(sp)
8111c104:	01400044 	movi	r5,1
8111c108:	e009883a 	mov	r4,fp
8111c10c:	1887883a 	add	r3,r3,r2
8111c110:	d8c00815 	stw	r3,32(sp)
8111c114:	b0ad883a 	add	r22,r22,r2
8111c118:	111ec6c0 	call	8111ec6c <__i2b>
8111c11c:	1023883a 	mov	r17,r2
8111c120:	a0000826 	beq	r20,zero,8111c144 <_dtoa_r+0xa14>
8111c124:	0580070e 	bge	zero,r22,8111c144 <_dtoa_r+0xa14>
8111c128:	a005883a 	mov	r2,r20
8111c12c:	b500b916 	blt	r22,r20,8111c414 <_dtoa_r+0xce4>
8111c130:	d9000817 	ldw	r4,32(sp)
8111c134:	a0a9c83a 	sub	r20,r20,r2
8111c138:	b0adc83a 	sub	r22,r22,r2
8111c13c:	2089c83a 	sub	r4,r4,r2
8111c140:	d9000815 	stw	r4,32(sp)
8111c144:	d9800a17 	ldw	r6,40(sp)
8111c148:	0181810e 	bge	zero,r6,8111c750 <_dtoa_r+0x1020>
8111c14c:	d9c00b17 	ldw	r7,44(sp)
8111c150:	3800b326 	beq	r7,zero,8111c420 <_dtoa_r+0xcf0>
8111c154:	a800b226 	beq	r21,zero,8111c420 <_dtoa_r+0xcf0>
8111c158:	880b883a 	mov	r5,r17
8111c15c:	a80d883a 	mov	r6,r21
8111c160:	e009883a 	mov	r4,fp
8111c164:	111eeb00 	call	8111eeb0 <__pow5mult>
8111c168:	d9800917 	ldw	r6,36(sp)
8111c16c:	100b883a 	mov	r5,r2
8111c170:	e009883a 	mov	r4,fp
8111c174:	1023883a 	mov	r17,r2
8111c178:	111ecb00 	call	8111ecb0 <__multiply>
8111c17c:	1021883a 	mov	r16,r2
8111c180:	d8800a17 	ldw	r2,40(sp)
8111c184:	d9400917 	ldw	r5,36(sp)
8111c188:	e009883a 	mov	r4,fp
8111c18c:	1545c83a 	sub	r2,r2,r21
8111c190:	d8800a15 	stw	r2,40(sp)
8111c194:	111e8f80 	call	8111e8f8 <_Bfree>
8111c198:	d8c00a17 	ldw	r3,40(sp)
8111c19c:	18009f1e 	bne	r3,zero,8111c41c <_dtoa_r+0xcec>
8111c1a0:	05c00044 	movi	r23,1
8111c1a4:	e009883a 	mov	r4,fp
8111c1a8:	b80b883a 	mov	r5,r23
8111c1ac:	111ec6c0 	call	8111ec6c <__i2b>
8111c1b0:	d9000d17 	ldw	r4,52(sp)
8111c1b4:	102b883a 	mov	r21,r2
8111c1b8:	2000ce26 	beq	r4,zero,8111c4f4 <_dtoa_r+0xdc4>
8111c1bc:	200d883a 	mov	r6,r4
8111c1c0:	100b883a 	mov	r5,r2
8111c1c4:	e009883a 	mov	r4,fp
8111c1c8:	111eeb00 	call	8111eeb0 <__pow5mult>
8111c1cc:	d9800317 	ldw	r6,12(sp)
8111c1d0:	102b883a 	mov	r21,r2
8111c1d4:	b981810e 	bge	r23,r6,8111c7dc <_dtoa_r+0x10ac>
8111c1d8:	0027883a 	mov	r19,zero
8111c1dc:	a8800417 	ldw	r2,16(r21)
8111c1e0:	05c00804 	movi	r23,32
8111c1e4:	10800104 	addi	r2,r2,4
8111c1e8:	1085883a 	add	r2,r2,r2
8111c1ec:	1085883a 	add	r2,r2,r2
8111c1f0:	a885883a 	add	r2,r21,r2
8111c1f4:	11000017 	ldw	r4,0(r2)
8111c1f8:	111eb540 	call	8111eb54 <__hi0bits>
8111c1fc:	b885c83a 	sub	r2,r23,r2
8111c200:	1585883a 	add	r2,r2,r22
8111c204:	108007cc 	andi	r2,r2,31
8111c208:	1000b326 	beq	r2,zero,8111c4d8 <_dtoa_r+0xda8>
8111c20c:	00c00804 	movi	r3,32
8111c210:	1887c83a 	sub	r3,r3,r2
8111c214:	01000104 	movi	r4,4
8111c218:	20c2cd0e 	bge	r4,r3,8111cd50 <_dtoa_r+0x1620>
8111c21c:	00c00704 	movi	r3,28
8111c220:	1885c83a 	sub	r2,r3,r2
8111c224:	d8c00817 	ldw	r3,32(sp)
8111c228:	a0a9883a 	add	r20,r20,r2
8111c22c:	b0ad883a 	add	r22,r22,r2
8111c230:	1887883a 	add	r3,r3,r2
8111c234:	d8c00815 	stw	r3,32(sp)
8111c238:	d9800817 	ldw	r6,32(sp)
8111c23c:	0180040e 	bge	zero,r6,8111c250 <_dtoa_r+0xb20>
8111c240:	800b883a 	mov	r5,r16
8111c244:	e009883a 	mov	r4,fp
8111c248:	111eff80 	call	8111eff8 <__lshift>
8111c24c:	1021883a 	mov	r16,r2
8111c250:	0580050e 	bge	zero,r22,8111c268 <_dtoa_r+0xb38>
8111c254:	a80b883a 	mov	r5,r21
8111c258:	b00d883a 	mov	r6,r22
8111c25c:	e009883a 	mov	r4,fp
8111c260:	111eff80 	call	8111eff8 <__lshift>
8111c264:	102b883a 	mov	r21,r2
8111c268:	d9c00e17 	ldw	r7,56(sp)
8111c26c:	3801211e 	bne	r7,zero,8111c6f4 <_dtoa_r+0xfc4>
8111c270:	d9800617 	ldw	r6,24(sp)
8111c274:	0181380e 	bge	zero,r6,8111c758 <_dtoa_r+0x1028>
8111c278:	d8c00b17 	ldw	r3,44(sp)
8111c27c:	1800ab1e 	bne	r3,zero,8111c52c <_dtoa_r+0xdfc>
8111c280:	dc800717 	ldw	r18,28(sp)
8111c284:	dcc00617 	ldw	r19,24(sp)
8111c288:	9029883a 	mov	r20,r18
8111c28c:	00000206 	br	8111c298 <_dtoa_r+0xb68>
8111c290:	111e9200 	call	8111e920 <__multadd>
8111c294:	1021883a 	mov	r16,r2
8111c298:	a80b883a 	mov	r5,r21
8111c29c:	8009883a 	mov	r4,r16
8111c2a0:	111b5280 	call	8111b528 <quorem>
8111c2a4:	10800c04 	addi	r2,r2,48
8111c2a8:	90800005 	stb	r2,0(r18)
8111c2ac:	94800044 	addi	r18,r18,1
8111c2b0:	9507c83a 	sub	r3,r18,r20
8111c2b4:	000f883a 	mov	r7,zero
8111c2b8:	01800284 	movi	r6,10
8111c2bc:	800b883a 	mov	r5,r16
8111c2c0:	e009883a 	mov	r4,fp
8111c2c4:	1cfff216 	blt	r3,r19,8111c290 <__reset+0xfb0fc290>
8111c2c8:	1011883a 	mov	r8,r2
8111c2cc:	d8800617 	ldw	r2,24(sp)
8111c2d0:	0082370e 	bge	zero,r2,8111cbb0 <_dtoa_r+0x1480>
8111c2d4:	d9000717 	ldw	r4,28(sp)
8111c2d8:	0025883a 	mov	r18,zero
8111c2dc:	20af883a 	add	r23,r4,r2
8111c2e0:	01800044 	movi	r6,1
8111c2e4:	800b883a 	mov	r5,r16
8111c2e8:	e009883a 	mov	r4,fp
8111c2ec:	da001715 	stw	r8,92(sp)
8111c2f0:	111eff80 	call	8111eff8 <__lshift>
8111c2f4:	a80b883a 	mov	r5,r21
8111c2f8:	1009883a 	mov	r4,r2
8111c2fc:	d8800915 	stw	r2,36(sp)
8111c300:	111f1480 	call	8111f148 <__mcmp>
8111c304:	da001717 	ldw	r8,92(sp)
8111c308:	0081800e 	bge	zero,r2,8111c90c <_dtoa_r+0x11dc>
8111c30c:	b93fffc3 	ldbu	r4,-1(r23)
8111c310:	b8bfffc4 	addi	r2,r23,-1
8111c314:	1007883a 	mov	r3,r2
8111c318:	01800e44 	movi	r6,57
8111c31c:	d9c00717 	ldw	r7,28(sp)
8111c320:	00000506 	br	8111c338 <_dtoa_r+0xc08>
8111c324:	18ffffc4 	addi	r3,r3,-1
8111c328:	11c12326 	beq	r2,r7,8111c7b8 <_dtoa_r+0x1088>
8111c32c:	19000003 	ldbu	r4,0(r3)
8111c330:	102f883a 	mov	r23,r2
8111c334:	10bfffc4 	addi	r2,r2,-1
8111c338:	21403fcc 	andi	r5,r4,255
8111c33c:	2940201c 	xori	r5,r5,128
8111c340:	297fe004 	addi	r5,r5,-128
8111c344:	29bff726 	beq	r5,r6,8111c324 <__reset+0xfb0fc324>
8111c348:	21000044 	addi	r4,r4,1
8111c34c:	11000005 	stb	r4,0(r2)
8111c350:	a80b883a 	mov	r5,r21
8111c354:	e009883a 	mov	r4,fp
8111c358:	111e8f80 	call	8111e8f8 <_Bfree>
8111c35c:	883ea026 	beq	r17,zero,8111bde0 <__reset+0xfb0fbde0>
8111c360:	90000426 	beq	r18,zero,8111c374 <_dtoa_r+0xc44>
8111c364:	94400326 	beq	r18,r17,8111c374 <_dtoa_r+0xc44>
8111c368:	900b883a 	mov	r5,r18
8111c36c:	e009883a 	mov	r4,fp
8111c370:	111e8f80 	call	8111e8f8 <_Bfree>
8111c374:	880b883a 	mov	r5,r17
8111c378:	e009883a 	mov	r4,fp
8111c37c:	111e8f80 	call	8111e8f8 <_Bfree>
8111c380:	003e9706 	br	8111bde0 <__reset+0xfb0fbde0>
8111c384:	01800044 	movi	r6,1
8111c388:	d9800e15 	stw	r6,56(sp)
8111c38c:	003d9606 	br	8111b9e8 <__reset+0xfb0fb9e8>
8111c390:	d8800817 	ldw	r2,32(sp)
8111c394:	d8c00517 	ldw	r3,20(sp)
8111c398:	d8000d15 	stw	zero,52(sp)
8111c39c:	10c5c83a 	sub	r2,r2,r3
8111c3a0:	00c9c83a 	sub	r4,zero,r3
8111c3a4:	d8800815 	stw	r2,32(sp)
8111c3a8:	d9000a15 	stw	r4,40(sp)
8111c3ac:	003d9706 	br	8111ba0c <__reset+0xfb0fba0c>
8111c3b0:	05adc83a 	sub	r22,zero,r22
8111c3b4:	dd800815 	stw	r22,32(sp)
8111c3b8:	002d883a 	mov	r22,zero
8111c3bc:	003d8e06 	br	8111b9f8 <__reset+0xfb0fb9f8>
8111c3c0:	d9000517 	ldw	r4,20(sp)
8111c3c4:	1128c380 	call	81128c38 <__floatsidf>
8111c3c8:	100d883a 	mov	r6,r2
8111c3cc:	180f883a 	mov	r7,r3
8111c3d0:	a009883a 	mov	r4,r20
8111c3d4:	880b883a 	mov	r5,r17
8111c3d8:	112805c0 	call	8112805c <__eqdf2>
8111c3dc:	103d7126 	beq	r2,zero,8111b9a4 <__reset+0xfb0fb9a4>
8111c3e0:	d9c00517 	ldw	r7,20(sp)
8111c3e4:	39ffffc4 	addi	r7,r7,-1
8111c3e8:	d9c00515 	stw	r7,20(sp)
8111c3ec:	003d6d06 	br	8111b9a4 <__reset+0xfb0fb9a4>
8111c3f0:	dd400a17 	ldw	r21,40(sp)
8111c3f4:	dd000817 	ldw	r20,32(sp)
8111c3f8:	0023883a 	mov	r17,zero
8111c3fc:	003f4806 	br	8111c120 <__reset+0xfb0fc120>
8111c400:	10e3c83a 	sub	r17,r2,r3
8111c404:	9448983a 	sll	r4,r18,r17
8111c408:	003d3206 	br	8111b8d4 <__reset+0xfb0fb8d4>
8111c40c:	d8000e15 	stw	zero,56(sp)
8111c410:	003d7506 	br	8111b9e8 <__reset+0xfb0fb9e8>
8111c414:	b005883a 	mov	r2,r22
8111c418:	003f4506 	br	8111c130 <__reset+0xfb0fc130>
8111c41c:	dc000915 	stw	r16,36(sp)
8111c420:	d9800a17 	ldw	r6,40(sp)
8111c424:	d9400917 	ldw	r5,36(sp)
8111c428:	e009883a 	mov	r4,fp
8111c42c:	111eeb00 	call	8111eeb0 <__pow5mult>
8111c430:	1021883a 	mov	r16,r2
8111c434:	003f5a06 	br	8111c1a0 <__reset+0xfb0fc1a0>
8111c438:	01c00044 	movi	r7,1
8111c43c:	d9c00b15 	stw	r7,44(sp)
8111c440:	d8802217 	ldw	r2,136(sp)
8111c444:	0081280e 	bge	zero,r2,8111c8e8 <_dtoa_r+0x11b8>
8111c448:	100d883a 	mov	r6,r2
8111c44c:	1021883a 	mov	r16,r2
8111c450:	d8800c15 	stw	r2,48(sp)
8111c454:	d8800615 	stw	r2,24(sp)
8111c458:	003d8806 	br	8111ba7c <__reset+0xfb0fba7c>
8111c45c:	d8800617 	ldw	r2,24(sp)
8111c460:	00be9b16 	blt	zero,r2,8111bed0 <__reset+0xfb0fbed0>
8111c464:	10010f1e 	bne	r2,zero,8111c8a4 <_dtoa_r+0x1174>
8111c468:	880b883a 	mov	r5,r17
8111c46c:	000d883a 	mov	r6,zero
8111c470:	01d00534 	movhi	r7,16404
8111c474:	8009883a 	mov	r4,r16
8111c478:	11129a80 	call	811129a8 <__muldf3>
8111c47c:	900d883a 	mov	r6,r18
8111c480:	980f883a 	mov	r7,r19
8111c484:	1009883a 	mov	r4,r2
8111c488:	180b883a 	mov	r5,r3
8111c48c:	11280e40 	call	811280e4 <__gedf2>
8111c490:	002b883a 	mov	r21,zero
8111c494:	0023883a 	mov	r17,zero
8111c498:	1000bf16 	blt	r2,zero,8111c798 <_dtoa_r+0x1068>
8111c49c:	d9802217 	ldw	r6,136(sp)
8111c4a0:	ddc00717 	ldw	r23,28(sp)
8111c4a4:	018c303a 	nor	r6,zero,r6
8111c4a8:	d9800515 	stw	r6,20(sp)
8111c4ac:	a80b883a 	mov	r5,r21
8111c4b0:	e009883a 	mov	r4,fp
8111c4b4:	111e8f80 	call	8111e8f8 <_Bfree>
8111c4b8:	883e4926 	beq	r17,zero,8111bde0 <__reset+0xfb0fbde0>
8111c4bc:	003fad06 	br	8111c374 <__reset+0xfb0fc374>
8111c4c0:	d9c01117 	ldw	r7,68(sp)
8111c4c4:	3801bc26 	beq	r7,zero,8111cbb8 <_dtoa_r+0x1488>
8111c4c8:	10810cc4 	addi	r2,r2,1075
8111c4cc:	dd400a17 	ldw	r21,40(sp)
8111c4d0:	dd000817 	ldw	r20,32(sp)
8111c4d4:	003f0a06 	br	8111c100 <__reset+0xfb0fc100>
8111c4d8:	00800704 	movi	r2,28
8111c4dc:	d9000817 	ldw	r4,32(sp)
8111c4e0:	a0a9883a 	add	r20,r20,r2
8111c4e4:	b0ad883a 	add	r22,r22,r2
8111c4e8:	2089883a 	add	r4,r4,r2
8111c4ec:	d9000815 	stw	r4,32(sp)
8111c4f0:	003f5106 	br	8111c238 <__reset+0xfb0fc238>
8111c4f4:	d8c00317 	ldw	r3,12(sp)
8111c4f8:	b8c1fc0e 	bge	r23,r3,8111ccec <_dtoa_r+0x15bc>
8111c4fc:	0027883a 	mov	r19,zero
8111c500:	b805883a 	mov	r2,r23
8111c504:	003f3e06 	br	8111c200 <__reset+0xfb0fc200>
8111c508:	880b883a 	mov	r5,r17
8111c50c:	e009883a 	mov	r4,fp
8111c510:	000f883a 	mov	r7,zero
8111c514:	01800284 	movi	r6,10
8111c518:	111e9200 	call	8111e920 <__multadd>
8111c51c:	d9000c17 	ldw	r4,48(sp)
8111c520:	1023883a 	mov	r17,r2
8111c524:	0102040e 	bge	zero,r4,8111cd38 <_dtoa_r+0x1608>
8111c528:	d9000615 	stw	r4,24(sp)
8111c52c:	0500050e 	bge	zero,r20,8111c544 <_dtoa_r+0xe14>
8111c530:	880b883a 	mov	r5,r17
8111c534:	a00d883a 	mov	r6,r20
8111c538:	e009883a 	mov	r4,fp
8111c53c:	111eff80 	call	8111eff8 <__lshift>
8111c540:	1023883a 	mov	r17,r2
8111c544:	9801241e 	bne	r19,zero,8111c9d8 <_dtoa_r+0x12a8>
8111c548:	8829883a 	mov	r20,r17
8111c54c:	d9000617 	ldw	r4,24(sp)
8111c550:	dcc00717 	ldw	r19,28(sp)
8111c554:	9480004c 	andi	r18,r18,1
8111c558:	20bfffc4 	addi	r2,r4,-1
8111c55c:	9885883a 	add	r2,r19,r2
8111c560:	d8800415 	stw	r2,16(sp)
8111c564:	dc800615 	stw	r18,24(sp)
8111c568:	a80b883a 	mov	r5,r21
8111c56c:	8009883a 	mov	r4,r16
8111c570:	111b5280 	call	8111b528 <quorem>
8111c574:	880b883a 	mov	r5,r17
8111c578:	8009883a 	mov	r4,r16
8111c57c:	102f883a 	mov	r23,r2
8111c580:	111f1480 	call	8111f148 <__mcmp>
8111c584:	a80b883a 	mov	r5,r21
8111c588:	a00d883a 	mov	r6,r20
8111c58c:	e009883a 	mov	r4,fp
8111c590:	102d883a 	mov	r22,r2
8111c594:	111f1a80 	call	8111f1a8 <__mdiff>
8111c598:	1007883a 	mov	r3,r2
8111c59c:	10800317 	ldw	r2,12(r2)
8111c5a0:	bc800c04 	addi	r18,r23,48
8111c5a4:	180b883a 	mov	r5,r3
8111c5a8:	10004e1e 	bne	r2,zero,8111c6e4 <_dtoa_r+0xfb4>
8111c5ac:	8009883a 	mov	r4,r16
8111c5b0:	d8c01615 	stw	r3,88(sp)
8111c5b4:	111f1480 	call	8111f148 <__mcmp>
8111c5b8:	d8c01617 	ldw	r3,88(sp)
8111c5bc:	e009883a 	mov	r4,fp
8111c5c0:	d8801615 	stw	r2,88(sp)
8111c5c4:	180b883a 	mov	r5,r3
8111c5c8:	111e8f80 	call	8111e8f8 <_Bfree>
8111c5cc:	d8801617 	ldw	r2,88(sp)
8111c5d0:	1000041e 	bne	r2,zero,8111c5e4 <_dtoa_r+0xeb4>
8111c5d4:	d9800317 	ldw	r6,12(sp)
8111c5d8:	3000021e 	bne	r6,zero,8111c5e4 <_dtoa_r+0xeb4>
8111c5dc:	d8c00617 	ldw	r3,24(sp)
8111c5e0:	18003726 	beq	r3,zero,8111c6c0 <_dtoa_r+0xf90>
8111c5e4:	b0002016 	blt	r22,zero,8111c668 <_dtoa_r+0xf38>
8111c5e8:	b000041e 	bne	r22,zero,8111c5fc <_dtoa_r+0xecc>
8111c5ec:	d9000317 	ldw	r4,12(sp)
8111c5f0:	2000021e 	bne	r4,zero,8111c5fc <_dtoa_r+0xecc>
8111c5f4:	d8c00617 	ldw	r3,24(sp)
8111c5f8:	18001b26 	beq	r3,zero,8111c668 <_dtoa_r+0xf38>
8111c5fc:	00810716 	blt	zero,r2,8111ca1c <_dtoa_r+0x12ec>
8111c600:	d8c00417 	ldw	r3,16(sp)
8111c604:	9d800044 	addi	r22,r19,1
8111c608:	9c800005 	stb	r18,0(r19)
8111c60c:	b02f883a 	mov	r23,r22
8111c610:	98c10626 	beq	r19,r3,8111ca2c <_dtoa_r+0x12fc>
8111c614:	800b883a 	mov	r5,r16
8111c618:	000f883a 	mov	r7,zero
8111c61c:	01800284 	movi	r6,10
8111c620:	e009883a 	mov	r4,fp
8111c624:	111e9200 	call	8111e920 <__multadd>
8111c628:	1021883a 	mov	r16,r2
8111c62c:	000f883a 	mov	r7,zero
8111c630:	01800284 	movi	r6,10
8111c634:	880b883a 	mov	r5,r17
8111c638:	e009883a 	mov	r4,fp
8111c63c:	8d002526 	beq	r17,r20,8111c6d4 <_dtoa_r+0xfa4>
8111c640:	111e9200 	call	8111e920 <__multadd>
8111c644:	a00b883a 	mov	r5,r20
8111c648:	000f883a 	mov	r7,zero
8111c64c:	01800284 	movi	r6,10
8111c650:	e009883a 	mov	r4,fp
8111c654:	1023883a 	mov	r17,r2
8111c658:	111e9200 	call	8111e920 <__multadd>
8111c65c:	1029883a 	mov	r20,r2
8111c660:	b027883a 	mov	r19,r22
8111c664:	003fc006 	br	8111c568 <__reset+0xfb0fc568>
8111c668:	9011883a 	mov	r8,r18
8111c66c:	00800e0e 	bge	zero,r2,8111c6a8 <_dtoa_r+0xf78>
8111c670:	800b883a 	mov	r5,r16
8111c674:	01800044 	movi	r6,1
8111c678:	e009883a 	mov	r4,fp
8111c67c:	da001715 	stw	r8,92(sp)
8111c680:	111eff80 	call	8111eff8 <__lshift>
8111c684:	a80b883a 	mov	r5,r21
8111c688:	1009883a 	mov	r4,r2
8111c68c:	1021883a 	mov	r16,r2
8111c690:	111f1480 	call	8111f148 <__mcmp>
8111c694:	da001717 	ldw	r8,92(sp)
8111c698:	0081960e 	bge	zero,r2,8111ccf4 <_dtoa_r+0x15c4>
8111c69c:	00800e44 	movi	r2,57
8111c6a0:	40817026 	beq	r8,r2,8111cc64 <_dtoa_r+0x1534>
8111c6a4:	ba000c44 	addi	r8,r23,49
8111c6a8:	8825883a 	mov	r18,r17
8111c6ac:	9dc00044 	addi	r23,r19,1
8111c6b0:	9a000005 	stb	r8,0(r19)
8111c6b4:	a023883a 	mov	r17,r20
8111c6b8:	dc000915 	stw	r16,36(sp)
8111c6bc:	003f2406 	br	8111c350 <__reset+0xfb0fc350>
8111c6c0:	00800e44 	movi	r2,57
8111c6c4:	9011883a 	mov	r8,r18
8111c6c8:	90816626 	beq	r18,r2,8111cc64 <_dtoa_r+0x1534>
8111c6cc:	05bff516 	blt	zero,r22,8111c6a4 <__reset+0xfb0fc6a4>
8111c6d0:	003ff506 	br	8111c6a8 <__reset+0xfb0fc6a8>
8111c6d4:	111e9200 	call	8111e920 <__multadd>
8111c6d8:	1023883a 	mov	r17,r2
8111c6dc:	1029883a 	mov	r20,r2
8111c6e0:	003fdf06 	br	8111c660 <__reset+0xfb0fc660>
8111c6e4:	e009883a 	mov	r4,fp
8111c6e8:	111e8f80 	call	8111e8f8 <_Bfree>
8111c6ec:	00800044 	movi	r2,1
8111c6f0:	003fbc06 	br	8111c5e4 <__reset+0xfb0fc5e4>
8111c6f4:	a80b883a 	mov	r5,r21
8111c6f8:	8009883a 	mov	r4,r16
8111c6fc:	111f1480 	call	8111f148 <__mcmp>
8111c700:	103edb0e 	bge	r2,zero,8111c270 <__reset+0xfb0fc270>
8111c704:	800b883a 	mov	r5,r16
8111c708:	000f883a 	mov	r7,zero
8111c70c:	01800284 	movi	r6,10
8111c710:	e009883a 	mov	r4,fp
8111c714:	111e9200 	call	8111e920 <__multadd>
8111c718:	1021883a 	mov	r16,r2
8111c71c:	d8800517 	ldw	r2,20(sp)
8111c720:	d8c00b17 	ldw	r3,44(sp)
8111c724:	10bfffc4 	addi	r2,r2,-1
8111c728:	d8800515 	stw	r2,20(sp)
8111c72c:	183f761e 	bne	r3,zero,8111c508 <__reset+0xfb0fc508>
8111c730:	d9000c17 	ldw	r4,48(sp)
8111c734:	0101730e 	bge	zero,r4,8111cd04 <_dtoa_r+0x15d4>
8111c738:	d9000615 	stw	r4,24(sp)
8111c73c:	003ed006 	br	8111c280 <__reset+0xfb0fc280>
8111c740:	00800084 	movi	r2,2
8111c744:	3081861e 	bne	r6,r2,8111cd60 <_dtoa_r+0x1630>
8111c748:	d8000b15 	stw	zero,44(sp)
8111c74c:	003f3c06 	br	8111c440 <__reset+0xfb0fc440>
8111c750:	dc000917 	ldw	r16,36(sp)
8111c754:	003e9206 	br	8111c1a0 <__reset+0xfb0fc1a0>
8111c758:	d9c00317 	ldw	r7,12(sp)
8111c75c:	00800084 	movi	r2,2
8111c760:	11fec50e 	bge	r2,r7,8111c278 <__reset+0xfb0fc278>
8111c764:	d9000617 	ldw	r4,24(sp)
8111c768:	20013c1e 	bne	r4,zero,8111cc5c <_dtoa_r+0x152c>
8111c76c:	a80b883a 	mov	r5,r21
8111c770:	000f883a 	mov	r7,zero
8111c774:	01800144 	movi	r6,5
8111c778:	e009883a 	mov	r4,fp
8111c77c:	111e9200 	call	8111e920 <__multadd>
8111c780:	100b883a 	mov	r5,r2
8111c784:	8009883a 	mov	r4,r16
8111c788:	102b883a 	mov	r21,r2
8111c78c:	111f1480 	call	8111f148 <__mcmp>
8111c790:	dc000915 	stw	r16,36(sp)
8111c794:	00bf410e 	bge	zero,r2,8111c49c <__reset+0xfb0fc49c>
8111c798:	d9c00717 	ldw	r7,28(sp)
8111c79c:	00800c44 	movi	r2,49
8111c7a0:	38800005 	stb	r2,0(r7)
8111c7a4:	d8800517 	ldw	r2,20(sp)
8111c7a8:	3dc00044 	addi	r23,r7,1
8111c7ac:	10800044 	addi	r2,r2,1
8111c7b0:	d8800515 	stw	r2,20(sp)
8111c7b4:	003f3d06 	br	8111c4ac <__reset+0xfb0fc4ac>
8111c7b8:	d9800517 	ldw	r6,20(sp)
8111c7bc:	d9c00717 	ldw	r7,28(sp)
8111c7c0:	00800c44 	movi	r2,49
8111c7c4:	31800044 	addi	r6,r6,1
8111c7c8:	d9800515 	stw	r6,20(sp)
8111c7cc:	38800005 	stb	r2,0(r7)
8111c7d0:	003edf06 	br	8111c350 <__reset+0xfb0fc350>
8111c7d4:	d8000b15 	stw	zero,44(sp)
8111c7d8:	003c9f06 	br	8111ba58 <__reset+0xfb0fba58>
8111c7dc:	903e7e1e 	bne	r18,zero,8111c1d8 <__reset+0xfb0fc1d8>
8111c7e0:	00800434 	movhi	r2,16
8111c7e4:	10bfffc4 	addi	r2,r2,-1
8111c7e8:	9884703a 	and	r2,r19,r2
8111c7ec:	1000ea1e 	bne	r2,zero,8111cb98 <_dtoa_r+0x1468>
8111c7f0:	9cdffc2c 	andhi	r19,r19,32752
8111c7f4:	9800e826 	beq	r19,zero,8111cb98 <_dtoa_r+0x1468>
8111c7f8:	d9c00817 	ldw	r7,32(sp)
8111c7fc:	b5800044 	addi	r22,r22,1
8111c800:	04c00044 	movi	r19,1
8111c804:	39c00044 	addi	r7,r7,1
8111c808:	d9c00815 	stw	r7,32(sp)
8111c80c:	d8800d17 	ldw	r2,52(sp)
8111c810:	103e721e 	bne	r2,zero,8111c1dc <__reset+0xfb0fc1dc>
8111c814:	00800044 	movi	r2,1
8111c818:	003e7906 	br	8111c200 <__reset+0xfb0fc200>
8111c81c:	8009883a 	mov	r4,r16
8111c820:	1128c380 	call	81128c38 <__floatsidf>
8111c824:	d9800f17 	ldw	r6,60(sp)
8111c828:	d9c01017 	ldw	r7,64(sp)
8111c82c:	1009883a 	mov	r4,r2
8111c830:	180b883a 	mov	r5,r3
8111c834:	11129a80 	call	811129a8 <__muldf3>
8111c838:	000d883a 	mov	r6,zero
8111c83c:	01d00734 	movhi	r7,16412
8111c840:	1009883a 	mov	r4,r2
8111c844:	180b883a 	mov	r5,r3
8111c848:	1126eb80 	call	81126eb8 <__adddf3>
8111c84c:	047f3034 	movhi	r17,64704
8111c850:	1021883a 	mov	r16,r2
8111c854:	1c63883a 	add	r17,r3,r17
8111c858:	d9000f17 	ldw	r4,60(sp)
8111c85c:	d9401017 	ldw	r5,64(sp)
8111c860:	000d883a 	mov	r6,zero
8111c864:	01d00534 	movhi	r7,16404
8111c868:	11282b40 	call	811282b4 <__subdf3>
8111c86c:	800d883a 	mov	r6,r16
8111c870:	880f883a 	mov	r7,r17
8111c874:	1009883a 	mov	r4,r2
8111c878:	180b883a 	mov	r5,r3
8111c87c:	102b883a 	mov	r21,r2
8111c880:	1829883a 	mov	r20,r3
8111c884:	11280e40 	call	811280e4 <__gedf2>
8111c888:	00806c16 	blt	zero,r2,8111ca3c <_dtoa_r+0x130c>
8111c88c:	89e0003c 	xorhi	r7,r17,32768
8111c890:	800d883a 	mov	r6,r16
8111c894:	a809883a 	mov	r4,r21
8111c898:	a00b883a 	mov	r5,r20
8111c89c:	11281c00 	call	811281c0 <__ledf2>
8111c8a0:	103d7e0e 	bge	r2,zero,8111be9c <__reset+0xfb0fbe9c>
8111c8a4:	002b883a 	mov	r21,zero
8111c8a8:	0023883a 	mov	r17,zero
8111c8ac:	003efb06 	br	8111c49c <__reset+0xfb0fc49c>
8111c8b0:	d8800717 	ldw	r2,28(sp)
8111c8b4:	003bd006 	br	8111b7f8 <__reset+0xfb0fb7f8>
8111c8b8:	d9000a17 	ldw	r4,40(sp)
8111c8bc:	d9800d17 	ldw	r6,52(sp)
8111c8c0:	dd400a15 	stw	r21,40(sp)
8111c8c4:	a905c83a 	sub	r2,r21,r4
8111c8c8:	308d883a 	add	r6,r6,r2
8111c8cc:	d9800d15 	stw	r6,52(sp)
8111c8d0:	002b883a 	mov	r21,zero
8111c8d4:	003e0606 	br	8111c0f0 <__reset+0xfb0fc0f0>
8111c8d8:	9023883a 	mov	r17,r18
8111c8dc:	9829883a 	mov	r20,r19
8111c8e0:	04000084 	movi	r16,2
8111c8e4:	003c9206 	br	8111bb30 <__reset+0xfb0fbb30>
8111c8e8:	04000044 	movi	r16,1
8111c8ec:	dc000c15 	stw	r16,48(sp)
8111c8f0:	dc000615 	stw	r16,24(sp)
8111c8f4:	dc002215 	stw	r16,136(sp)
8111c8f8:	e0001115 	stw	zero,68(fp)
8111c8fc:	000b883a 	mov	r5,zero
8111c900:	003c6906 	br	8111baa8 <__reset+0xfb0fbaa8>
8111c904:	3021883a 	mov	r16,r6
8111c908:	003ffb06 	br	8111c8f8 <__reset+0xfb0fc8f8>
8111c90c:	1000021e 	bne	r2,zero,8111c918 <_dtoa_r+0x11e8>
8111c910:	4200004c 	andi	r8,r8,1
8111c914:	403e7d1e 	bne	r8,zero,8111c30c <__reset+0xfb0fc30c>
8111c918:	01000c04 	movi	r4,48
8111c91c:	00000106 	br	8111c924 <_dtoa_r+0x11f4>
8111c920:	102f883a 	mov	r23,r2
8111c924:	b8bfffc4 	addi	r2,r23,-1
8111c928:	10c00007 	ldb	r3,0(r2)
8111c92c:	193ffc26 	beq	r3,r4,8111c920 <__reset+0xfb0fc920>
8111c930:	003e8706 	br	8111c350 <__reset+0xfb0fc350>
8111c934:	d8800517 	ldw	r2,20(sp)
8111c938:	00a3c83a 	sub	r17,zero,r2
8111c93c:	8800a426 	beq	r17,zero,8111cbd0 <_dtoa_r+0x14a0>
8111c940:	888003cc 	andi	r2,r17,15
8111c944:	100490fa 	slli	r2,r2,3
8111c948:	00e04534 	movhi	r3,33044
8111c94c:	18c7c704 	addi	r3,r3,7964
8111c950:	1885883a 	add	r2,r3,r2
8111c954:	11800017 	ldw	r6,0(r2)
8111c958:	11c00117 	ldw	r7,4(r2)
8111c95c:	9009883a 	mov	r4,r18
8111c960:	980b883a 	mov	r5,r19
8111c964:	8823d13a 	srai	r17,r17,4
8111c968:	11129a80 	call	811129a8 <__muldf3>
8111c96c:	d8800f15 	stw	r2,60(sp)
8111c970:	d8c01015 	stw	r3,64(sp)
8111c974:	8800e826 	beq	r17,zero,8111cd18 <_dtoa_r+0x15e8>
8111c978:	05204534 	movhi	r20,33044
8111c97c:	a507bd04 	addi	r20,r20,7924
8111c980:	04000084 	movi	r16,2
8111c984:	8980004c 	andi	r6,r17,1
8111c988:	1009883a 	mov	r4,r2
8111c98c:	8823d07a 	srai	r17,r17,1
8111c990:	180b883a 	mov	r5,r3
8111c994:	30000426 	beq	r6,zero,8111c9a8 <_dtoa_r+0x1278>
8111c998:	a1800017 	ldw	r6,0(r20)
8111c99c:	a1c00117 	ldw	r7,4(r20)
8111c9a0:	84000044 	addi	r16,r16,1
8111c9a4:	11129a80 	call	811129a8 <__muldf3>
8111c9a8:	a5000204 	addi	r20,r20,8
8111c9ac:	883ff51e 	bne	r17,zero,8111c984 <__reset+0xfb0fc984>
8111c9b0:	d8800f15 	stw	r2,60(sp)
8111c9b4:	d8c01015 	stw	r3,64(sp)
8111c9b8:	003c7606 	br	8111bb94 <__reset+0xfb0fbb94>
8111c9bc:	00c00c04 	movi	r3,48
8111c9c0:	10c00005 	stb	r3,0(r2)
8111c9c4:	d8c00517 	ldw	r3,20(sp)
8111c9c8:	bd3fffc3 	ldbu	r20,-1(r23)
8111c9cc:	18c00044 	addi	r3,r3,1
8111c9d0:	d8c00515 	stw	r3,20(sp)
8111c9d4:	003db906 	br	8111c0bc <__reset+0xfb0fc0bc>
8111c9d8:	89400117 	ldw	r5,4(r17)
8111c9dc:	e009883a 	mov	r4,fp
8111c9e0:	111e8480 	call	8111e848 <_Balloc>
8111c9e4:	89800417 	ldw	r6,16(r17)
8111c9e8:	89400304 	addi	r5,r17,12
8111c9ec:	11000304 	addi	r4,r2,12
8111c9f0:	31800084 	addi	r6,r6,2
8111c9f4:	318d883a 	add	r6,r6,r6
8111c9f8:	318d883a 	add	r6,r6,r6
8111c9fc:	1027883a 	mov	r19,r2
8111ca00:	11145f80 	call	811145f8 <memcpy>
8111ca04:	01800044 	movi	r6,1
8111ca08:	980b883a 	mov	r5,r19
8111ca0c:	e009883a 	mov	r4,fp
8111ca10:	111eff80 	call	8111eff8 <__lshift>
8111ca14:	1029883a 	mov	r20,r2
8111ca18:	003ecc06 	br	8111c54c <__reset+0xfb0fc54c>
8111ca1c:	00800e44 	movi	r2,57
8111ca20:	90809026 	beq	r18,r2,8111cc64 <_dtoa_r+0x1534>
8111ca24:	92000044 	addi	r8,r18,1
8111ca28:	003f1f06 	br	8111c6a8 <__reset+0xfb0fc6a8>
8111ca2c:	9011883a 	mov	r8,r18
8111ca30:	8825883a 	mov	r18,r17
8111ca34:	a023883a 	mov	r17,r20
8111ca38:	003e2906 	br	8111c2e0 <__reset+0xfb0fc2e0>
8111ca3c:	002b883a 	mov	r21,zero
8111ca40:	0023883a 	mov	r17,zero
8111ca44:	003f5406 	br	8111c798 <__reset+0xfb0fc798>
8111ca48:	61bfffc4 	addi	r6,r12,-1
8111ca4c:	300490fa 	slli	r2,r6,3
8111ca50:	00e04534 	movhi	r3,33044
8111ca54:	18c7c704 	addi	r3,r3,7964
8111ca58:	1885883a 	add	r2,r3,r2
8111ca5c:	11000017 	ldw	r4,0(r2)
8111ca60:	11400117 	ldw	r5,4(r2)
8111ca64:	d8800717 	ldw	r2,28(sp)
8111ca68:	880f883a 	mov	r7,r17
8111ca6c:	d9801215 	stw	r6,72(sp)
8111ca70:	800d883a 	mov	r6,r16
8111ca74:	db001615 	stw	r12,88(sp)
8111ca78:	15c00044 	addi	r23,r2,1
8111ca7c:	11129a80 	call	811129a8 <__muldf3>
8111ca80:	d9401017 	ldw	r5,64(sp)
8111ca84:	d9000f17 	ldw	r4,60(sp)
8111ca88:	d8c01515 	stw	r3,84(sp)
8111ca8c:	d8801415 	stw	r2,80(sp)
8111ca90:	1128bb80 	call	81128bb8 <__fixdfsi>
8111ca94:	1009883a 	mov	r4,r2
8111ca98:	1021883a 	mov	r16,r2
8111ca9c:	1128c380 	call	81128c38 <__floatsidf>
8111caa0:	d9000f17 	ldw	r4,60(sp)
8111caa4:	d9401017 	ldw	r5,64(sp)
8111caa8:	100d883a 	mov	r6,r2
8111caac:	180f883a 	mov	r7,r3
8111cab0:	11282b40 	call	811282b4 <__subdf3>
8111cab4:	1829883a 	mov	r20,r3
8111cab8:	d8c00717 	ldw	r3,28(sp)
8111cabc:	84000c04 	addi	r16,r16,48
8111cac0:	1023883a 	mov	r17,r2
8111cac4:	1c000005 	stb	r16,0(r3)
8111cac8:	db001617 	ldw	r12,88(sp)
8111cacc:	00800044 	movi	r2,1
8111cad0:	60802226 	beq	r12,r2,8111cb5c <_dtoa_r+0x142c>
8111cad4:	d9c00717 	ldw	r7,28(sp)
8111cad8:	8805883a 	mov	r2,r17
8111cadc:	b82b883a 	mov	r21,r23
8111cae0:	3b19883a 	add	r12,r7,r12
8111cae4:	6023883a 	mov	r17,r12
8111cae8:	a007883a 	mov	r3,r20
8111caec:	dc800f15 	stw	r18,60(sp)
8111caf0:	000d883a 	mov	r6,zero
8111caf4:	01d00934 	movhi	r7,16420
8111caf8:	1009883a 	mov	r4,r2
8111cafc:	180b883a 	mov	r5,r3
8111cb00:	11129a80 	call	811129a8 <__muldf3>
8111cb04:	180b883a 	mov	r5,r3
8111cb08:	1009883a 	mov	r4,r2
8111cb0c:	1829883a 	mov	r20,r3
8111cb10:	1025883a 	mov	r18,r2
8111cb14:	1128bb80 	call	81128bb8 <__fixdfsi>
8111cb18:	1009883a 	mov	r4,r2
8111cb1c:	1021883a 	mov	r16,r2
8111cb20:	1128c380 	call	81128c38 <__floatsidf>
8111cb24:	100d883a 	mov	r6,r2
8111cb28:	180f883a 	mov	r7,r3
8111cb2c:	9009883a 	mov	r4,r18
8111cb30:	a00b883a 	mov	r5,r20
8111cb34:	84000c04 	addi	r16,r16,48
8111cb38:	11282b40 	call	811282b4 <__subdf3>
8111cb3c:	ad400044 	addi	r21,r21,1
8111cb40:	ac3fffc5 	stb	r16,-1(r21)
8111cb44:	ac7fea1e 	bne	r21,r17,8111caf0 <__reset+0xfb0fcaf0>
8111cb48:	1023883a 	mov	r17,r2
8111cb4c:	d8801217 	ldw	r2,72(sp)
8111cb50:	dc800f17 	ldw	r18,60(sp)
8111cb54:	1829883a 	mov	r20,r3
8111cb58:	b8af883a 	add	r23,r23,r2
8111cb5c:	d9001417 	ldw	r4,80(sp)
8111cb60:	d9401517 	ldw	r5,84(sp)
8111cb64:	000d883a 	mov	r6,zero
8111cb68:	01cff834 	movhi	r7,16352
8111cb6c:	1126eb80 	call	81126eb8 <__adddf3>
8111cb70:	880d883a 	mov	r6,r17
8111cb74:	a00f883a 	mov	r7,r20
8111cb78:	1009883a 	mov	r4,r2
8111cb7c:	180b883a 	mov	r5,r3
8111cb80:	11281c00 	call	811281c0 <__ledf2>
8111cb84:	10003e0e 	bge	r2,zero,8111cc80 <_dtoa_r+0x1550>
8111cb88:	d9001317 	ldw	r4,76(sp)
8111cb8c:	bd3fffc3 	ldbu	r20,-1(r23)
8111cb90:	d9000515 	stw	r4,20(sp)
8111cb94:	003d3b06 	br	8111c084 <__reset+0xfb0fc084>
8111cb98:	0027883a 	mov	r19,zero
8111cb9c:	003f1b06 	br	8111c80c <__reset+0xfb0fc80c>
8111cba0:	d8800817 	ldw	r2,32(sp)
8111cba4:	11e9c83a 	sub	r20,r2,r7
8111cba8:	0005883a 	mov	r2,zero
8111cbac:	003d5406 	br	8111c100 <__reset+0xfb0fc100>
8111cbb0:	00800044 	movi	r2,1
8111cbb4:	003dc706 	br	8111c2d4 <__reset+0xfb0fc2d4>
8111cbb8:	d8c00217 	ldw	r3,8(sp)
8111cbbc:	00800d84 	movi	r2,54
8111cbc0:	dd400a17 	ldw	r21,40(sp)
8111cbc4:	10c5c83a 	sub	r2,r2,r3
8111cbc8:	dd000817 	ldw	r20,32(sp)
8111cbcc:	003d4c06 	br	8111c100 <__reset+0xfb0fc100>
8111cbd0:	dc800f15 	stw	r18,60(sp)
8111cbd4:	dcc01015 	stw	r19,64(sp)
8111cbd8:	04000084 	movi	r16,2
8111cbdc:	003bed06 	br	8111bb94 <__reset+0xfb0fbb94>
8111cbe0:	d9000617 	ldw	r4,24(sp)
8111cbe4:	203f0d26 	beq	r4,zero,8111c81c <__reset+0xfb0fc81c>
8111cbe8:	d9800c17 	ldw	r6,48(sp)
8111cbec:	01bcab0e 	bge	zero,r6,8111be9c <__reset+0xfb0fbe9c>
8111cbf0:	d9401017 	ldw	r5,64(sp)
8111cbf4:	d9000f17 	ldw	r4,60(sp)
8111cbf8:	000d883a 	mov	r6,zero
8111cbfc:	01d00934 	movhi	r7,16420
8111cc00:	11129a80 	call	811129a8 <__muldf3>
8111cc04:	81000044 	addi	r4,r16,1
8111cc08:	d8800f15 	stw	r2,60(sp)
8111cc0c:	d8c01015 	stw	r3,64(sp)
8111cc10:	1128c380 	call	81128c38 <__floatsidf>
8111cc14:	d9800f17 	ldw	r6,60(sp)
8111cc18:	d9c01017 	ldw	r7,64(sp)
8111cc1c:	1009883a 	mov	r4,r2
8111cc20:	180b883a 	mov	r5,r3
8111cc24:	11129a80 	call	811129a8 <__muldf3>
8111cc28:	01d00734 	movhi	r7,16412
8111cc2c:	000d883a 	mov	r6,zero
8111cc30:	1009883a 	mov	r4,r2
8111cc34:	180b883a 	mov	r5,r3
8111cc38:	1126eb80 	call	81126eb8 <__adddf3>
8111cc3c:	d9c00517 	ldw	r7,20(sp)
8111cc40:	047f3034 	movhi	r17,64704
8111cc44:	1021883a 	mov	r16,r2
8111cc48:	39ffffc4 	addi	r7,r7,-1
8111cc4c:	d9c01315 	stw	r7,76(sp)
8111cc50:	1c63883a 	add	r17,r3,r17
8111cc54:	db000c17 	ldw	r12,48(sp)
8111cc58:	003bea06 	br	8111bc04 <__reset+0xfb0fbc04>
8111cc5c:	dc000915 	stw	r16,36(sp)
8111cc60:	003e0e06 	br	8111c49c <__reset+0xfb0fc49c>
8111cc64:	01000e44 	movi	r4,57
8111cc68:	8825883a 	mov	r18,r17
8111cc6c:	9dc00044 	addi	r23,r19,1
8111cc70:	99000005 	stb	r4,0(r19)
8111cc74:	a023883a 	mov	r17,r20
8111cc78:	dc000915 	stw	r16,36(sp)
8111cc7c:	003da406 	br	8111c310 <__reset+0xfb0fc310>
8111cc80:	d9801417 	ldw	r6,80(sp)
8111cc84:	d9c01517 	ldw	r7,84(sp)
8111cc88:	0009883a 	mov	r4,zero
8111cc8c:	014ff834 	movhi	r5,16352
8111cc90:	11282b40 	call	811282b4 <__subdf3>
8111cc94:	880d883a 	mov	r6,r17
8111cc98:	a00f883a 	mov	r7,r20
8111cc9c:	1009883a 	mov	r4,r2
8111cca0:	180b883a 	mov	r5,r3
8111cca4:	11280e40 	call	811280e4 <__gedf2>
8111cca8:	00bc7c0e 	bge	zero,r2,8111be9c <__reset+0xfb0fbe9c>
8111ccac:	01000c04 	movi	r4,48
8111ccb0:	00000106 	br	8111ccb8 <_dtoa_r+0x1588>
8111ccb4:	102f883a 	mov	r23,r2
8111ccb8:	b8bfffc4 	addi	r2,r23,-1
8111ccbc:	10c00007 	ldb	r3,0(r2)
8111ccc0:	193ffc26 	beq	r3,r4,8111ccb4 <__reset+0xfb0fccb4>
8111ccc4:	d9801317 	ldw	r6,76(sp)
8111ccc8:	d9800515 	stw	r6,20(sp)
8111cccc:	003c4406 	br	8111bde0 <__reset+0xfb0fbde0>
8111ccd0:	d9801317 	ldw	r6,76(sp)
8111ccd4:	d9800515 	stw	r6,20(sp)
8111ccd8:	003cea06 	br	8111c084 <__reset+0xfb0fc084>
8111ccdc:	dd800f17 	ldw	r22,60(sp)
8111cce0:	dcc01017 	ldw	r19,64(sp)
8111cce4:	dc801217 	ldw	r18,72(sp)
8111cce8:	003c6c06 	br	8111be9c <__reset+0xfb0fbe9c>
8111ccec:	903e031e 	bne	r18,zero,8111c4fc <__reset+0xfb0fc4fc>
8111ccf0:	003ebb06 	br	8111c7e0 <__reset+0xfb0fc7e0>
8111ccf4:	103e6c1e 	bne	r2,zero,8111c6a8 <__reset+0xfb0fc6a8>
8111ccf8:	4080004c 	andi	r2,r8,1
8111ccfc:	103e6a26 	beq	r2,zero,8111c6a8 <__reset+0xfb0fc6a8>
8111cd00:	003e6606 	br	8111c69c <__reset+0xfb0fc69c>
8111cd04:	d8c00317 	ldw	r3,12(sp)
8111cd08:	00800084 	movi	r2,2
8111cd0c:	10c02916 	blt	r2,r3,8111cdb4 <_dtoa_r+0x1684>
8111cd10:	d9000c17 	ldw	r4,48(sp)
8111cd14:	003e8806 	br	8111c738 <__reset+0xfb0fc738>
8111cd18:	04000084 	movi	r16,2
8111cd1c:	003b9d06 	br	8111bb94 <__reset+0xfb0fbb94>
8111cd20:	d9001317 	ldw	r4,76(sp)
8111cd24:	d9000515 	stw	r4,20(sp)
8111cd28:	003cd606 	br	8111c084 <__reset+0xfb0fc084>
8111cd2c:	d8801317 	ldw	r2,76(sp)
8111cd30:	d8800515 	stw	r2,20(sp)
8111cd34:	003c2a06 	br	8111bde0 <__reset+0xfb0fbde0>
8111cd38:	d9800317 	ldw	r6,12(sp)
8111cd3c:	00800084 	movi	r2,2
8111cd40:	11801516 	blt	r2,r6,8111cd98 <_dtoa_r+0x1668>
8111cd44:	d9c00c17 	ldw	r7,48(sp)
8111cd48:	d9c00615 	stw	r7,24(sp)
8111cd4c:	003df706 	br	8111c52c <__reset+0xfb0fc52c>
8111cd50:	193d3926 	beq	r3,r4,8111c238 <__reset+0xfb0fc238>
8111cd54:	00c00f04 	movi	r3,60
8111cd58:	1885c83a 	sub	r2,r3,r2
8111cd5c:	003ddf06 	br	8111c4dc <__reset+0xfb0fc4dc>
8111cd60:	e009883a 	mov	r4,fp
8111cd64:	e0001115 	stw	zero,68(fp)
8111cd68:	000b883a 	mov	r5,zero
8111cd6c:	111e8480 	call	8111e848 <_Balloc>
8111cd70:	d8800715 	stw	r2,28(sp)
8111cd74:	d8c00717 	ldw	r3,28(sp)
8111cd78:	00bfffc4 	movi	r2,-1
8111cd7c:	01000044 	movi	r4,1
8111cd80:	d8800c15 	stw	r2,48(sp)
8111cd84:	e0c01015 	stw	r3,64(fp)
8111cd88:	d9000b15 	stw	r4,44(sp)
8111cd8c:	d8800615 	stw	r2,24(sp)
8111cd90:	d8002215 	stw	zero,136(sp)
8111cd94:	003c4106 	br	8111be9c <__reset+0xfb0fbe9c>
8111cd98:	d8c00c17 	ldw	r3,48(sp)
8111cd9c:	d8c00615 	stw	r3,24(sp)
8111cda0:	003e7006 	br	8111c764 <__reset+0xfb0fc764>
8111cda4:	04400044 	movi	r17,1
8111cda8:	003b2006 	br	8111ba2c <__reset+0xfb0fba2c>
8111cdac:	000b883a 	mov	r5,zero
8111cdb0:	003b3d06 	br	8111baa8 <__reset+0xfb0fbaa8>
8111cdb4:	d8800c17 	ldw	r2,48(sp)
8111cdb8:	d8800615 	stw	r2,24(sp)
8111cdbc:	003e6906 	br	8111c764 <__reset+0xfb0fc764>

8111cdc0 <__sflush_r>:
8111cdc0:	defffb04 	addi	sp,sp,-20
8111cdc4:	de00012e 	bgeu	sp,et,8111cdcc <__sflush_r+0xc>
8111cdc8:	003b68fa 	trap	3
8111cdcc:	2880030b 	ldhu	r2,12(r5)
8111cdd0:	dcc00315 	stw	r19,12(sp)
8111cdd4:	dc400115 	stw	r17,4(sp)
8111cdd8:	dfc00415 	stw	ra,16(sp)
8111cddc:	dc800215 	stw	r18,8(sp)
8111cde0:	dc000015 	stw	r16,0(sp)
8111cde4:	10c0020c 	andi	r3,r2,8
8111cde8:	2823883a 	mov	r17,r5
8111cdec:	2027883a 	mov	r19,r4
8111cdf0:	1800311e 	bne	r3,zero,8111ceb8 <__sflush_r+0xf8>
8111cdf4:	28c00117 	ldw	r3,4(r5)
8111cdf8:	10820014 	ori	r2,r2,2048
8111cdfc:	2880030d 	sth	r2,12(r5)
8111ce00:	00c04b0e 	bge	zero,r3,8111cf30 <__sflush_r+0x170>
8111ce04:	8a000a17 	ldw	r8,40(r17)
8111ce08:	40002326 	beq	r8,zero,8111ce98 <__sflush_r+0xd8>
8111ce0c:	9c000017 	ldw	r16,0(r19)
8111ce10:	10c4000c 	andi	r3,r2,4096
8111ce14:	98000015 	stw	zero,0(r19)
8111ce18:	18004826 	beq	r3,zero,8111cf3c <__sflush_r+0x17c>
8111ce1c:	89801417 	ldw	r6,80(r17)
8111ce20:	10c0010c 	andi	r3,r2,4
8111ce24:	18000626 	beq	r3,zero,8111ce40 <__sflush_r+0x80>
8111ce28:	88c00117 	ldw	r3,4(r17)
8111ce2c:	88800c17 	ldw	r2,48(r17)
8111ce30:	30cdc83a 	sub	r6,r6,r3
8111ce34:	10000226 	beq	r2,zero,8111ce40 <__sflush_r+0x80>
8111ce38:	88800f17 	ldw	r2,60(r17)
8111ce3c:	308dc83a 	sub	r6,r6,r2
8111ce40:	89400717 	ldw	r5,28(r17)
8111ce44:	000f883a 	mov	r7,zero
8111ce48:	9809883a 	mov	r4,r19
8111ce4c:	403ee83a 	callr	r8
8111ce50:	00ffffc4 	movi	r3,-1
8111ce54:	10c04426 	beq	r2,r3,8111cf68 <__sflush_r+0x1a8>
8111ce58:	88c0030b 	ldhu	r3,12(r17)
8111ce5c:	89000417 	ldw	r4,16(r17)
8111ce60:	88000115 	stw	zero,4(r17)
8111ce64:	197dffcc 	andi	r5,r3,63487
8111ce68:	8940030d 	sth	r5,12(r17)
8111ce6c:	89000015 	stw	r4,0(r17)
8111ce70:	18c4000c 	andi	r3,r3,4096
8111ce74:	18002c1e 	bne	r3,zero,8111cf28 <__sflush_r+0x168>
8111ce78:	89400c17 	ldw	r5,48(r17)
8111ce7c:	9c000015 	stw	r16,0(r19)
8111ce80:	28000526 	beq	r5,zero,8111ce98 <__sflush_r+0xd8>
8111ce84:	88801004 	addi	r2,r17,64
8111ce88:	28800226 	beq	r5,r2,8111ce94 <__sflush_r+0xd4>
8111ce8c:	9809883a 	mov	r4,r19
8111ce90:	111d8780 	call	8111d878 <_free_r>
8111ce94:	88000c15 	stw	zero,48(r17)
8111ce98:	0005883a 	mov	r2,zero
8111ce9c:	dfc00417 	ldw	ra,16(sp)
8111cea0:	dcc00317 	ldw	r19,12(sp)
8111cea4:	dc800217 	ldw	r18,8(sp)
8111cea8:	dc400117 	ldw	r17,4(sp)
8111ceac:	dc000017 	ldw	r16,0(sp)
8111ceb0:	dec00504 	addi	sp,sp,20
8111ceb4:	f800283a 	ret
8111ceb8:	2c800417 	ldw	r18,16(r5)
8111cebc:	903ff626 	beq	r18,zero,8111ce98 <__reset+0xfb0fce98>
8111cec0:	2c000017 	ldw	r16,0(r5)
8111cec4:	108000cc 	andi	r2,r2,3
8111cec8:	2c800015 	stw	r18,0(r5)
8111cecc:	84a1c83a 	sub	r16,r16,r18
8111ced0:	1000131e 	bne	r2,zero,8111cf20 <__sflush_r+0x160>
8111ced4:	28800517 	ldw	r2,20(r5)
8111ced8:	88800215 	stw	r2,8(r17)
8111cedc:	04000316 	blt	zero,r16,8111ceec <__sflush_r+0x12c>
8111cee0:	003fed06 	br	8111ce98 <__reset+0xfb0fce98>
8111cee4:	90a5883a 	add	r18,r18,r2
8111cee8:	043feb0e 	bge	zero,r16,8111ce98 <__reset+0xfb0fce98>
8111ceec:	88800917 	ldw	r2,36(r17)
8111cef0:	89400717 	ldw	r5,28(r17)
8111cef4:	800f883a 	mov	r7,r16
8111cef8:	900d883a 	mov	r6,r18
8111cefc:	9809883a 	mov	r4,r19
8111cf00:	103ee83a 	callr	r2
8111cf04:	80a1c83a 	sub	r16,r16,r2
8111cf08:	00bff616 	blt	zero,r2,8111cee4 <__reset+0xfb0fcee4>
8111cf0c:	88c0030b 	ldhu	r3,12(r17)
8111cf10:	00bfffc4 	movi	r2,-1
8111cf14:	18c01014 	ori	r3,r3,64
8111cf18:	88c0030d 	sth	r3,12(r17)
8111cf1c:	003fdf06 	br	8111ce9c <__reset+0xfb0fce9c>
8111cf20:	0005883a 	mov	r2,zero
8111cf24:	003fec06 	br	8111ced8 <__reset+0xfb0fced8>
8111cf28:	88801415 	stw	r2,80(r17)
8111cf2c:	003fd206 	br	8111ce78 <__reset+0xfb0fce78>
8111cf30:	28c00f17 	ldw	r3,60(r5)
8111cf34:	00ffb316 	blt	zero,r3,8111ce04 <__reset+0xfb0fce04>
8111cf38:	003fd706 	br	8111ce98 <__reset+0xfb0fce98>
8111cf3c:	89400717 	ldw	r5,28(r17)
8111cf40:	000d883a 	mov	r6,zero
8111cf44:	01c00044 	movi	r7,1
8111cf48:	9809883a 	mov	r4,r19
8111cf4c:	403ee83a 	callr	r8
8111cf50:	100d883a 	mov	r6,r2
8111cf54:	00bfffc4 	movi	r2,-1
8111cf58:	30801426 	beq	r6,r2,8111cfac <__sflush_r+0x1ec>
8111cf5c:	8880030b 	ldhu	r2,12(r17)
8111cf60:	8a000a17 	ldw	r8,40(r17)
8111cf64:	003fae06 	br	8111ce20 <__reset+0xfb0fce20>
8111cf68:	98c00017 	ldw	r3,0(r19)
8111cf6c:	183fba26 	beq	r3,zero,8111ce58 <__reset+0xfb0fce58>
8111cf70:	01000744 	movi	r4,29
8111cf74:	19000626 	beq	r3,r4,8111cf90 <__sflush_r+0x1d0>
8111cf78:	01000584 	movi	r4,22
8111cf7c:	19000426 	beq	r3,r4,8111cf90 <__sflush_r+0x1d0>
8111cf80:	88c0030b 	ldhu	r3,12(r17)
8111cf84:	18c01014 	ori	r3,r3,64
8111cf88:	88c0030d 	sth	r3,12(r17)
8111cf8c:	003fc306 	br	8111ce9c <__reset+0xfb0fce9c>
8111cf90:	8880030b 	ldhu	r2,12(r17)
8111cf94:	88c00417 	ldw	r3,16(r17)
8111cf98:	88000115 	stw	zero,4(r17)
8111cf9c:	10bdffcc 	andi	r2,r2,63487
8111cfa0:	8880030d 	sth	r2,12(r17)
8111cfa4:	88c00015 	stw	r3,0(r17)
8111cfa8:	003fb306 	br	8111ce78 <__reset+0xfb0fce78>
8111cfac:	98800017 	ldw	r2,0(r19)
8111cfb0:	103fea26 	beq	r2,zero,8111cf5c <__reset+0xfb0fcf5c>
8111cfb4:	00c00744 	movi	r3,29
8111cfb8:	10c00226 	beq	r2,r3,8111cfc4 <__sflush_r+0x204>
8111cfbc:	00c00584 	movi	r3,22
8111cfc0:	10c0031e 	bne	r2,r3,8111cfd0 <__sflush_r+0x210>
8111cfc4:	9c000015 	stw	r16,0(r19)
8111cfc8:	0005883a 	mov	r2,zero
8111cfcc:	003fb306 	br	8111ce9c <__reset+0xfb0fce9c>
8111cfd0:	88c0030b 	ldhu	r3,12(r17)
8111cfd4:	3005883a 	mov	r2,r6
8111cfd8:	18c01014 	ori	r3,r3,64
8111cfdc:	88c0030d 	sth	r3,12(r17)
8111cfe0:	003fae06 	br	8111ce9c <__reset+0xfb0fce9c>

8111cfe4 <_fflush_r>:
8111cfe4:	defffd04 	addi	sp,sp,-12
8111cfe8:	de00012e 	bgeu	sp,et,8111cff0 <_fflush_r+0xc>
8111cfec:	003b68fa 	trap	3
8111cff0:	dc000115 	stw	r16,4(sp)
8111cff4:	dfc00215 	stw	ra,8(sp)
8111cff8:	2021883a 	mov	r16,r4
8111cffc:	20000226 	beq	r4,zero,8111d008 <_fflush_r+0x24>
8111d000:	20800e17 	ldw	r2,56(r4)
8111d004:	10000c26 	beq	r2,zero,8111d038 <_fflush_r+0x54>
8111d008:	2880030f 	ldh	r2,12(r5)
8111d00c:	1000051e 	bne	r2,zero,8111d024 <_fflush_r+0x40>
8111d010:	0005883a 	mov	r2,zero
8111d014:	dfc00217 	ldw	ra,8(sp)
8111d018:	dc000117 	ldw	r16,4(sp)
8111d01c:	dec00304 	addi	sp,sp,12
8111d020:	f800283a 	ret
8111d024:	8009883a 	mov	r4,r16
8111d028:	dfc00217 	ldw	ra,8(sp)
8111d02c:	dc000117 	ldw	r16,4(sp)
8111d030:	dec00304 	addi	sp,sp,12
8111d034:	111cdc01 	jmpi	8111cdc0 <__sflush_r>
8111d038:	d9400015 	stw	r5,0(sp)
8111d03c:	111d3e00 	call	8111d3e0 <__sinit>
8111d040:	d9400017 	ldw	r5,0(sp)
8111d044:	003ff006 	br	8111d008 <__reset+0xfb0fd008>

8111d048 <fflush>:
8111d048:	20000526 	beq	r4,zero,8111d060 <fflush+0x18>
8111d04c:	00a04534 	movhi	r2,33044
8111d050:	10916904 	addi	r2,r2,17828
8111d054:	200b883a 	mov	r5,r4
8111d058:	11000017 	ldw	r4,0(r2)
8111d05c:	111cfe41 	jmpi	8111cfe4 <_fflush_r>
8111d060:	00a04534 	movhi	r2,33044
8111d064:	10916804 	addi	r2,r2,17824
8111d068:	11000017 	ldw	r4,0(r2)
8111d06c:	016044b4 	movhi	r5,33042
8111d070:	2973f904 	addi	r5,r5,-12316
8111d074:	111e1201 	jmpi	8111e120 <_fwalk_reent>

8111d078 <__fp_unlock>:
8111d078:	0005883a 	mov	r2,zero
8111d07c:	f800283a 	ret

8111d080 <_cleanup_r>:
8111d080:	016044b4 	movhi	r5,33042
8111d084:	29538f04 	addi	r5,r5,20028
8111d088:	111e1201 	jmpi	8111e120 <_fwalk_reent>

8111d08c <__sinit.part.1>:
8111d08c:	defff704 	addi	sp,sp,-36
8111d090:	00e044b4 	movhi	r3,33042
8111d094:	de00012e 	bgeu	sp,et,8111d09c <__sinit.part.1+0x10>
8111d098:	003b68fa 	trap	3
8111d09c:	18f42004 	addi	r3,r3,-12160
8111d0a0:	dfc00815 	stw	ra,32(sp)
8111d0a4:	ddc00715 	stw	r23,28(sp)
8111d0a8:	dd800615 	stw	r22,24(sp)
8111d0ac:	dd400515 	stw	r21,20(sp)
8111d0b0:	dd000415 	stw	r20,16(sp)
8111d0b4:	dcc00315 	stw	r19,12(sp)
8111d0b8:	dc800215 	stw	r18,8(sp)
8111d0bc:	dc400115 	stw	r17,4(sp)
8111d0c0:	dc000015 	stw	r16,0(sp)
8111d0c4:	24000117 	ldw	r16,4(r4)
8111d0c8:	20c00f15 	stw	r3,60(r4)
8111d0cc:	2080bb04 	addi	r2,r4,748
8111d0d0:	00c000c4 	movi	r3,3
8111d0d4:	20c0b915 	stw	r3,740(r4)
8111d0d8:	2080ba15 	stw	r2,744(r4)
8111d0dc:	2000b815 	stw	zero,736(r4)
8111d0e0:	05c00204 	movi	r23,8
8111d0e4:	00800104 	movi	r2,4
8111d0e8:	2025883a 	mov	r18,r4
8111d0ec:	b80d883a 	mov	r6,r23
8111d0f0:	81001704 	addi	r4,r16,92
8111d0f4:	000b883a 	mov	r5,zero
8111d0f8:	80000015 	stw	zero,0(r16)
8111d0fc:	80000115 	stw	zero,4(r16)
8111d100:	80000215 	stw	zero,8(r16)
8111d104:	8080030d 	sth	r2,12(r16)
8111d108:	80001915 	stw	zero,100(r16)
8111d10c:	8000038d 	sth	zero,14(r16)
8111d110:	80000415 	stw	zero,16(r16)
8111d114:	80000515 	stw	zero,20(r16)
8111d118:	80000615 	stw	zero,24(r16)
8111d11c:	11147480 	call	81114748 <memset>
8111d120:	05a04474 	movhi	r22,33041
8111d124:	94400217 	ldw	r17,8(r18)
8111d128:	05604474 	movhi	r21,33041
8111d12c:	05204474 	movhi	r20,33041
8111d130:	04e04474 	movhi	r19,33041
8111d134:	b593db04 	addi	r22,r22,20332
8111d138:	ad53f404 	addi	r21,r21,20432
8111d13c:	a5141504 	addi	r20,r20,20564
8111d140:	9cd42e04 	addi	r19,r19,20664
8111d144:	85800815 	stw	r22,32(r16)
8111d148:	85400915 	stw	r21,36(r16)
8111d14c:	85000a15 	stw	r20,40(r16)
8111d150:	84c00b15 	stw	r19,44(r16)
8111d154:	84000715 	stw	r16,28(r16)
8111d158:	00800284 	movi	r2,10
8111d15c:	8880030d 	sth	r2,12(r17)
8111d160:	00800044 	movi	r2,1
8111d164:	b80d883a 	mov	r6,r23
8111d168:	89001704 	addi	r4,r17,92
8111d16c:	000b883a 	mov	r5,zero
8111d170:	88000015 	stw	zero,0(r17)
8111d174:	88000115 	stw	zero,4(r17)
8111d178:	88000215 	stw	zero,8(r17)
8111d17c:	88001915 	stw	zero,100(r17)
8111d180:	8880038d 	sth	r2,14(r17)
8111d184:	88000415 	stw	zero,16(r17)
8111d188:	88000515 	stw	zero,20(r17)
8111d18c:	88000615 	stw	zero,24(r17)
8111d190:	11147480 	call	81114748 <memset>
8111d194:	94000317 	ldw	r16,12(r18)
8111d198:	00800484 	movi	r2,18
8111d19c:	8c400715 	stw	r17,28(r17)
8111d1a0:	8d800815 	stw	r22,32(r17)
8111d1a4:	8d400915 	stw	r21,36(r17)
8111d1a8:	8d000a15 	stw	r20,40(r17)
8111d1ac:	8cc00b15 	stw	r19,44(r17)
8111d1b0:	8080030d 	sth	r2,12(r16)
8111d1b4:	00800084 	movi	r2,2
8111d1b8:	80000015 	stw	zero,0(r16)
8111d1bc:	80000115 	stw	zero,4(r16)
8111d1c0:	80000215 	stw	zero,8(r16)
8111d1c4:	80001915 	stw	zero,100(r16)
8111d1c8:	8080038d 	sth	r2,14(r16)
8111d1cc:	80000415 	stw	zero,16(r16)
8111d1d0:	80000515 	stw	zero,20(r16)
8111d1d4:	80000615 	stw	zero,24(r16)
8111d1d8:	b80d883a 	mov	r6,r23
8111d1dc:	000b883a 	mov	r5,zero
8111d1e0:	81001704 	addi	r4,r16,92
8111d1e4:	11147480 	call	81114748 <memset>
8111d1e8:	00800044 	movi	r2,1
8111d1ec:	84000715 	stw	r16,28(r16)
8111d1f0:	85800815 	stw	r22,32(r16)
8111d1f4:	85400915 	stw	r21,36(r16)
8111d1f8:	85000a15 	stw	r20,40(r16)
8111d1fc:	84c00b15 	stw	r19,44(r16)
8111d200:	90800e15 	stw	r2,56(r18)
8111d204:	dfc00817 	ldw	ra,32(sp)
8111d208:	ddc00717 	ldw	r23,28(sp)
8111d20c:	dd800617 	ldw	r22,24(sp)
8111d210:	dd400517 	ldw	r21,20(sp)
8111d214:	dd000417 	ldw	r20,16(sp)
8111d218:	dcc00317 	ldw	r19,12(sp)
8111d21c:	dc800217 	ldw	r18,8(sp)
8111d220:	dc400117 	ldw	r17,4(sp)
8111d224:	dc000017 	ldw	r16,0(sp)
8111d228:	dec00904 	addi	sp,sp,36
8111d22c:	f800283a 	ret

8111d230 <__fp_lock>:
8111d230:	0005883a 	mov	r2,zero
8111d234:	f800283a 	ret

8111d238 <__sfmoreglue>:
8111d238:	defffc04 	addi	sp,sp,-16
8111d23c:	de00012e 	bgeu	sp,et,8111d244 <__sfmoreglue+0xc>
8111d240:	003b68fa 	trap	3
8111d244:	dc400115 	stw	r17,4(sp)
8111d248:	2c7fffc4 	addi	r17,r5,-1
8111d24c:	8c401a24 	muli	r17,r17,104
8111d250:	dc800215 	stw	r18,8(sp)
8111d254:	2825883a 	mov	r18,r5
8111d258:	89401d04 	addi	r5,r17,116
8111d25c:	dc000015 	stw	r16,0(sp)
8111d260:	dfc00315 	stw	ra,12(sp)
8111d264:	1113de40 	call	81113de4 <_malloc_r>
8111d268:	1021883a 	mov	r16,r2
8111d26c:	10000726 	beq	r2,zero,8111d28c <__sfmoreglue+0x54>
8111d270:	11000304 	addi	r4,r2,12
8111d274:	10000015 	stw	zero,0(r2)
8111d278:	14800115 	stw	r18,4(r2)
8111d27c:	11000215 	stw	r4,8(r2)
8111d280:	89801a04 	addi	r6,r17,104
8111d284:	000b883a 	mov	r5,zero
8111d288:	11147480 	call	81114748 <memset>
8111d28c:	8005883a 	mov	r2,r16
8111d290:	dfc00317 	ldw	ra,12(sp)
8111d294:	dc800217 	ldw	r18,8(sp)
8111d298:	dc400117 	ldw	r17,4(sp)
8111d29c:	dc000017 	ldw	r16,0(sp)
8111d2a0:	dec00404 	addi	sp,sp,16
8111d2a4:	f800283a 	ret

8111d2a8 <__sfp>:
8111d2a8:	defffb04 	addi	sp,sp,-20
8111d2ac:	de00012e 	bgeu	sp,et,8111d2b4 <__sfp+0xc>
8111d2b0:	003b68fa 	trap	3
8111d2b4:	dc000015 	stw	r16,0(sp)
8111d2b8:	04204534 	movhi	r16,33044
8111d2bc:	84116804 	addi	r16,r16,17824
8111d2c0:	dcc00315 	stw	r19,12(sp)
8111d2c4:	2027883a 	mov	r19,r4
8111d2c8:	81000017 	ldw	r4,0(r16)
8111d2cc:	dfc00415 	stw	ra,16(sp)
8111d2d0:	dc800215 	stw	r18,8(sp)
8111d2d4:	20800e17 	ldw	r2,56(r4)
8111d2d8:	dc400115 	stw	r17,4(sp)
8111d2dc:	1000021e 	bne	r2,zero,8111d2e8 <__sfp+0x40>
8111d2e0:	111d08c0 	call	8111d08c <__sinit.part.1>
8111d2e4:	81000017 	ldw	r4,0(r16)
8111d2e8:	2480b804 	addi	r18,r4,736
8111d2ec:	047fffc4 	movi	r17,-1
8111d2f0:	91000117 	ldw	r4,4(r18)
8111d2f4:	94000217 	ldw	r16,8(r18)
8111d2f8:	213fffc4 	addi	r4,r4,-1
8111d2fc:	20000a16 	blt	r4,zero,8111d328 <__sfp+0x80>
8111d300:	8080030f 	ldh	r2,12(r16)
8111d304:	10000c26 	beq	r2,zero,8111d338 <__sfp+0x90>
8111d308:	80c01d04 	addi	r3,r16,116
8111d30c:	00000206 	br	8111d318 <__sfp+0x70>
8111d310:	18bfe60f 	ldh	r2,-104(r3)
8111d314:	10000826 	beq	r2,zero,8111d338 <__sfp+0x90>
8111d318:	213fffc4 	addi	r4,r4,-1
8111d31c:	1c3ffd04 	addi	r16,r3,-12
8111d320:	18c01a04 	addi	r3,r3,104
8111d324:	247ffa1e 	bne	r4,r17,8111d310 <__reset+0xfb0fd310>
8111d328:	90800017 	ldw	r2,0(r18)
8111d32c:	10001d26 	beq	r2,zero,8111d3a4 <__sfp+0xfc>
8111d330:	1025883a 	mov	r18,r2
8111d334:	003fee06 	br	8111d2f0 <__reset+0xfb0fd2f0>
8111d338:	00bfffc4 	movi	r2,-1
8111d33c:	8080038d 	sth	r2,14(r16)
8111d340:	00800044 	movi	r2,1
8111d344:	8080030d 	sth	r2,12(r16)
8111d348:	80001915 	stw	zero,100(r16)
8111d34c:	80000015 	stw	zero,0(r16)
8111d350:	80000215 	stw	zero,8(r16)
8111d354:	80000115 	stw	zero,4(r16)
8111d358:	80000415 	stw	zero,16(r16)
8111d35c:	80000515 	stw	zero,20(r16)
8111d360:	80000615 	stw	zero,24(r16)
8111d364:	01800204 	movi	r6,8
8111d368:	000b883a 	mov	r5,zero
8111d36c:	81001704 	addi	r4,r16,92
8111d370:	11147480 	call	81114748 <memset>
8111d374:	8005883a 	mov	r2,r16
8111d378:	80000c15 	stw	zero,48(r16)
8111d37c:	80000d15 	stw	zero,52(r16)
8111d380:	80001115 	stw	zero,68(r16)
8111d384:	80001215 	stw	zero,72(r16)
8111d388:	dfc00417 	ldw	ra,16(sp)
8111d38c:	dcc00317 	ldw	r19,12(sp)
8111d390:	dc800217 	ldw	r18,8(sp)
8111d394:	dc400117 	ldw	r17,4(sp)
8111d398:	dc000017 	ldw	r16,0(sp)
8111d39c:	dec00504 	addi	sp,sp,20
8111d3a0:	f800283a 	ret
8111d3a4:	01400104 	movi	r5,4
8111d3a8:	9809883a 	mov	r4,r19
8111d3ac:	111d2380 	call	8111d238 <__sfmoreglue>
8111d3b0:	90800015 	stw	r2,0(r18)
8111d3b4:	103fde1e 	bne	r2,zero,8111d330 <__reset+0xfb0fd330>
8111d3b8:	00800304 	movi	r2,12
8111d3bc:	98800015 	stw	r2,0(r19)
8111d3c0:	0005883a 	mov	r2,zero
8111d3c4:	003ff006 	br	8111d388 <__reset+0xfb0fd388>

8111d3c8 <_cleanup>:
8111d3c8:	00a04534 	movhi	r2,33044
8111d3cc:	10916804 	addi	r2,r2,17824
8111d3d0:	11000017 	ldw	r4,0(r2)
8111d3d4:	016044b4 	movhi	r5,33042
8111d3d8:	29538f04 	addi	r5,r5,20028
8111d3dc:	111e1201 	jmpi	8111e120 <_fwalk_reent>

8111d3e0 <__sinit>:
8111d3e0:	20800e17 	ldw	r2,56(r4)
8111d3e4:	10000126 	beq	r2,zero,8111d3ec <__sinit+0xc>
8111d3e8:	f800283a 	ret
8111d3ec:	111d08c1 	jmpi	8111d08c <__sinit.part.1>

8111d3f0 <__sfp_lock_acquire>:
8111d3f0:	f800283a 	ret

8111d3f4 <__sfp_lock_release>:
8111d3f4:	f800283a 	ret

8111d3f8 <__sinit_lock_acquire>:
8111d3f8:	f800283a 	ret

8111d3fc <__sinit_lock_release>:
8111d3fc:	f800283a 	ret

8111d400 <__fp_lock_all>:
8111d400:	00a04534 	movhi	r2,33044
8111d404:	10916904 	addi	r2,r2,17828
8111d408:	11000017 	ldw	r4,0(r2)
8111d40c:	016044b4 	movhi	r5,33042
8111d410:	29748c04 	addi	r5,r5,-11728
8111d414:	111e0541 	jmpi	8111e054 <_fwalk>

8111d418 <__fp_unlock_all>:
8111d418:	00a04534 	movhi	r2,33044
8111d41c:	10916904 	addi	r2,r2,17828
8111d420:	11000017 	ldw	r4,0(r2)
8111d424:	016044b4 	movhi	r5,33042
8111d428:	29741e04 	addi	r5,r5,-12168
8111d42c:	111e0541 	jmpi	8111e054 <_fwalk>

8111d430 <__sflags>:
8111d430:	28800007 	ldb	r2,0(r5)
8111d434:	00c01c84 	movi	r3,114
8111d438:	10c02426 	beq	r2,r3,8111d4cc <__sflags+0x9c>
8111d43c:	00c01dc4 	movi	r3,119
8111d440:	10c01e26 	beq	r2,r3,8111d4bc <__sflags+0x8c>
8111d444:	00c01844 	movi	r3,97
8111d448:	10c00426 	beq	r2,r3,8111d45c <__sflags+0x2c>
8111d44c:	00800584 	movi	r2,22
8111d450:	20800015 	stw	r2,0(r4)
8111d454:	0005883a 	mov	r2,zero
8111d458:	f800283a 	ret
8111d45c:	02c08204 	movi	r11,520
8111d460:	01000044 	movi	r4,1
8111d464:	00804204 	movi	r2,264
8111d468:	01c00ac4 	movi	r7,43
8111d46c:	02bff8c4 	movi	r10,-29
8111d470:	027fff04 	movi	r9,-4
8111d474:	02001e04 	movi	r8,120
8111d478:	29400044 	addi	r5,r5,1
8111d47c:	28c00007 	ldb	r3,0(r5)
8111d480:	18000626 	beq	r3,zero,8111d49c <__sflags+0x6c>
8111d484:	19c00826 	beq	r3,r7,8111d4a8 <__sflags+0x78>
8111d488:	1a3ffb1e 	bne	r3,r8,8111d478 <__reset+0xfb0fd478>
8111d48c:	29400044 	addi	r5,r5,1
8111d490:	28c00007 	ldb	r3,0(r5)
8111d494:	21020014 	ori	r4,r4,2048
8111d498:	183ffa1e 	bne	r3,zero,8111d484 <__reset+0xfb0fd484>
8111d49c:	22c8b03a 	or	r4,r4,r11
8111d4a0:	31000015 	stw	r4,0(r6)
8111d4a4:	f800283a 	ret
8111d4a8:	1284703a 	and	r2,r2,r10
8111d4ac:	2248703a 	and	r4,r4,r9
8111d4b0:	10800414 	ori	r2,r2,16
8111d4b4:	21000094 	ori	r4,r4,2
8111d4b8:	003fef06 	br	8111d478 <__reset+0xfb0fd478>
8111d4bc:	02c18004 	movi	r11,1536
8111d4c0:	01000044 	movi	r4,1
8111d4c4:	00800204 	movi	r2,8
8111d4c8:	003fe706 	br	8111d468 <__reset+0xfb0fd468>
8111d4cc:	0017883a 	mov	r11,zero
8111d4d0:	0009883a 	mov	r4,zero
8111d4d4:	00800104 	movi	r2,4
8111d4d8:	003fe306 	br	8111d468 <__reset+0xfb0fd468>

8111d4dc <_fread_r>:
8111d4dc:	defff404 	addi	sp,sp,-48
8111d4e0:	de00012e 	bgeu	sp,et,8111d4e8 <_fread_r+0xc>
8111d4e4:	003b68fa 	trap	3
8111d4e8:	dd800815 	stw	r22,32(sp)
8111d4ec:	39ad383a 	mul	r22,r7,r6
8111d4f0:	dc000215 	stw	r16,8(sp)
8111d4f4:	dfc00b15 	stw	ra,44(sp)
8111d4f8:	df000a15 	stw	fp,40(sp)
8111d4fc:	ddc00915 	stw	r23,36(sp)
8111d500:	dd400715 	stw	r21,28(sp)
8111d504:	dd000615 	stw	r20,24(sp)
8111d508:	dcc00515 	stw	r19,20(sp)
8111d50c:	dc800415 	stw	r18,16(sp)
8111d510:	dc400315 	stw	r17,12(sp)
8111d514:	dc000c17 	ldw	r16,48(sp)
8111d518:	b0003b26 	beq	r22,zero,8111d608 <_fread_r+0x12c>
8111d51c:	302f883a 	mov	r23,r6
8111d520:	382b883a 	mov	r21,r7
8111d524:	2029883a 	mov	r20,r4
8111d528:	2827883a 	mov	r19,r5
8111d52c:	20000226 	beq	r4,zero,8111d538 <_fread_r+0x5c>
8111d530:	20800e17 	ldw	r2,56(r4)
8111d534:	10006e26 	beq	r2,zero,8111d6f0 <_fread_r+0x214>
8111d538:	8080030b 	ldhu	r2,12(r16)
8111d53c:	10c8000c 	andi	r3,r2,8192
8111d540:	1800061e 	bne	r3,zero,8111d55c <_fread_r+0x80>
8111d544:	81001917 	ldw	r4,100(r16)
8111d548:	00f7ffc4 	movi	r3,-8193
8111d54c:	10880014 	ori	r2,r2,8192
8111d550:	20c6703a 	and	r3,r4,r3
8111d554:	8080030d 	sth	r2,12(r16)
8111d558:	80c01915 	stw	r3,100(r16)
8111d55c:	84400117 	ldw	r17,4(r16)
8111d560:	88005f16 	blt	r17,zero,8111d6e0 <_fread_r+0x204>
8111d564:	8809883a 	mov	r4,r17
8111d568:	1080008c 	andi	r2,r2,2
8111d56c:	1000281e 	bne	r2,zero,8111d610 <_fread_r+0x134>
8111d570:	b025883a 	mov	r18,r22
8111d574:	00000b06 	br	8111d5a4 <_fread_r+0xc8>
8111d578:	11145f80 	call	811145f8 <memcpy>
8111d57c:	80800017 	ldw	r2,0(r16)
8111d580:	9c67883a 	add	r19,r19,r17
8111d584:	9465c83a 	sub	r18,r18,r17
8111d588:	1463883a 	add	r17,r2,r17
8111d58c:	800b883a 	mov	r5,r16
8111d590:	a009883a 	mov	r4,r20
8111d594:	84400015 	stw	r17,0(r16)
8111d598:	1114be40 	call	81114be4 <__srefill_r>
8111d59c:	10004c1e 	bne	r2,zero,8111d6d0 <_fread_r+0x1f4>
8111d5a0:	84400117 	ldw	r17,4(r16)
8111d5a4:	880d883a 	mov	r6,r17
8111d5a8:	9809883a 	mov	r4,r19
8111d5ac:	81400017 	ldw	r5,0(r16)
8111d5b0:	8cbff136 	bltu	r17,r18,8111d578 <__reset+0xfb0fd578>
8111d5b4:	900d883a 	mov	r6,r18
8111d5b8:	11145f80 	call	811145f8 <memcpy>
8111d5bc:	80c00117 	ldw	r3,4(r16)
8111d5c0:	81000017 	ldw	r4,0(r16)
8111d5c4:	a805883a 	mov	r2,r21
8111d5c8:	1c87c83a 	sub	r3,r3,r18
8111d5cc:	24a5883a 	add	r18,r4,r18
8111d5d0:	80c00115 	stw	r3,4(r16)
8111d5d4:	84800015 	stw	r18,0(r16)
8111d5d8:	dfc00b17 	ldw	ra,44(sp)
8111d5dc:	df000a17 	ldw	fp,40(sp)
8111d5e0:	ddc00917 	ldw	r23,36(sp)
8111d5e4:	dd800817 	ldw	r22,32(sp)
8111d5e8:	dd400717 	ldw	r21,28(sp)
8111d5ec:	dd000617 	ldw	r20,24(sp)
8111d5f0:	dcc00517 	ldw	r19,20(sp)
8111d5f4:	dc800417 	ldw	r18,16(sp)
8111d5f8:	dc400317 	ldw	r17,12(sp)
8111d5fc:	dc000217 	ldw	r16,8(sp)
8111d600:	dec00c04 	addi	sp,sp,48
8111d604:	f800283a 	ret
8111d608:	0005883a 	mov	r2,zero
8111d60c:	003ff206 	br	8111d5d8 <__reset+0xfb0fd5d8>
8111d610:	b007883a 	mov	r3,r22
8111d614:	2580012e 	bgeu	r4,r22,8111d61c <_fread_r+0x140>
8111d618:	2007883a 	mov	r3,r4
8111d61c:	81400017 	ldw	r5,0(r16)
8111d620:	180d883a 	mov	r6,r3
8111d624:	9809883a 	mov	r4,r19
8111d628:	d8c00115 	stw	r3,4(sp)
8111d62c:	11145f80 	call	811145f8 <memcpy>
8111d630:	d8c00117 	ldw	r3,4(sp)
8111d634:	84400017 	ldw	r17,0(r16)
8111d638:	80800117 	ldw	r2,4(r16)
8111d63c:	81400c17 	ldw	r5,48(r16)
8111d640:	88e3883a 	add	r17,r17,r3
8111d644:	10c5c83a 	sub	r2,r2,r3
8111d648:	84400015 	stw	r17,0(r16)
8111d64c:	80800115 	stw	r2,4(r16)
8111d650:	b0e5c83a 	sub	r18,r22,r3
8111d654:	28002b26 	beq	r5,zero,8111d704 <_fread_r+0x228>
8111d658:	90002b26 	beq	r18,zero,8111d708 <_fread_r+0x22c>
8111d65c:	80801004 	addi	r2,r16,64
8111d660:	28800526 	beq	r5,r2,8111d678 <_fread_r+0x19c>
8111d664:	a009883a 	mov	r4,r20
8111d668:	d8c00115 	stw	r3,4(sp)
8111d66c:	111d8780 	call	8111d878 <_free_r>
8111d670:	d8c00117 	ldw	r3,4(sp)
8111d674:	84400017 	ldw	r17,0(r16)
8111d678:	80000c15 	stw	zero,48(r16)
8111d67c:	80800517 	ldw	r2,20(r16)
8111d680:	87000417 	ldw	fp,16(r16)
8111d684:	98e7883a 	add	r19,r19,r3
8111d688:	d8800015 	stw	r2,0(sp)
8111d68c:	00000106 	br	8111d694 <_fread_r+0x1b8>
8111d690:	90001d26 	beq	r18,zero,8111d708 <_fread_r+0x22c>
8111d694:	84c00415 	stw	r19,16(r16)
8111d698:	84800515 	stw	r18,20(r16)
8111d69c:	84c00015 	stw	r19,0(r16)
8111d6a0:	a009883a 	mov	r4,r20
8111d6a4:	800b883a 	mov	r5,r16
8111d6a8:	1114be40 	call	81114be4 <__srefill_r>
8111d6ac:	d9000017 	ldw	r4,0(sp)
8111d6b0:	80c00117 	ldw	r3,4(r16)
8111d6b4:	87000415 	stw	fp,16(r16)
8111d6b8:	81000515 	stw	r4,20(r16)
8111d6bc:	84400015 	stw	r17,0(r16)
8111d6c0:	80000115 	stw	zero,4(r16)
8111d6c4:	90e5c83a 	sub	r18,r18,r3
8111d6c8:	98e7883a 	add	r19,r19,r3
8111d6cc:	103ff026 	beq	r2,zero,8111d690 <__reset+0xfb0fd690>
8111d6d0:	b80b883a 	mov	r5,r23
8111d6d4:	b489c83a 	sub	r4,r22,r18
8111d6d8:	1126c000 	call	81126c00 <__udivsi3>
8111d6dc:	003fbe06 	br	8111d5d8 <__reset+0xfb0fd5d8>
8111d6e0:	80000115 	stw	zero,4(r16)
8111d6e4:	0009883a 	mov	r4,zero
8111d6e8:	0023883a 	mov	r17,zero
8111d6ec:	003f9e06 	br	8111d568 <__reset+0xfb0fd568>
8111d6f0:	111d3e00 	call	8111d3e0 <__sinit>
8111d6f4:	8080030b 	ldhu	r2,12(r16)
8111d6f8:	10c8000c 	andi	r3,r2,8192
8111d6fc:	183f971e 	bne	r3,zero,8111d55c <__reset+0xfb0fd55c>
8111d700:	003f9006 	br	8111d544 <__reset+0xfb0fd544>
8111d704:	903fdd1e 	bne	r18,zero,8111d67c <__reset+0xfb0fd67c>
8111d708:	a805883a 	mov	r2,r21
8111d70c:	003fb206 	br	8111d5d8 <__reset+0xfb0fd5d8>

8111d710 <fread>:
8111d710:	defffe04 	addi	sp,sp,-8
8111d714:	00a04534 	movhi	r2,33044
8111d718:	de00012e 	bgeu	sp,et,8111d720 <fread+0x10>
8111d71c:	003b68fa 	trap	3
8111d720:	10916904 	addi	r2,r2,17828
8111d724:	d9c00015 	stw	r7,0(sp)
8111d728:	300f883a 	mov	r7,r6
8111d72c:	280d883a 	mov	r6,r5
8111d730:	200b883a 	mov	r5,r4
8111d734:	11000017 	ldw	r4,0(r2)
8111d738:	dfc00115 	stw	ra,4(sp)
8111d73c:	111d4dc0 	call	8111d4dc <_fread_r>
8111d740:	dfc00117 	ldw	ra,4(sp)
8111d744:	dec00204 	addi	sp,sp,8
8111d748:	f800283a 	ret

8111d74c <_malloc_trim_r>:
8111d74c:	defffb04 	addi	sp,sp,-20
8111d750:	de00012e 	bgeu	sp,et,8111d758 <_malloc_trim_r+0xc>
8111d754:	003b68fa 	trap	3
8111d758:	dcc00315 	stw	r19,12(sp)
8111d75c:	04e04534 	movhi	r19,33044
8111d760:	dc800215 	stw	r18,8(sp)
8111d764:	dc400115 	stw	r17,4(sp)
8111d768:	dc000015 	stw	r16,0(sp)
8111d76c:	dfc00415 	stw	ra,16(sp)
8111d770:	2821883a 	mov	r16,r5
8111d774:	9ccb2704 	addi	r19,r19,11420
8111d778:	2025883a 	mov	r18,r4
8111d77c:	112ac400 	call	8112ac40 <__malloc_lock>
8111d780:	98800217 	ldw	r2,8(r19)
8111d784:	14400117 	ldw	r17,4(r2)
8111d788:	00bfff04 	movi	r2,-4
8111d78c:	88a2703a 	and	r17,r17,r2
8111d790:	8c21c83a 	sub	r16,r17,r16
8111d794:	8403fbc4 	addi	r16,r16,4079
8111d798:	8020d33a 	srli	r16,r16,12
8111d79c:	0083ffc4 	movi	r2,4095
8111d7a0:	843fffc4 	addi	r16,r16,-1
8111d7a4:	8020933a 	slli	r16,r16,12
8111d7a8:	1400060e 	bge	r2,r16,8111d7c4 <_malloc_trim_r+0x78>
8111d7ac:	000b883a 	mov	r5,zero
8111d7b0:	9009883a 	mov	r4,r18
8111d7b4:	1114dc00 	call	81114dc0 <_sbrk_r>
8111d7b8:	98c00217 	ldw	r3,8(r19)
8111d7bc:	1c47883a 	add	r3,r3,r17
8111d7c0:	10c00a26 	beq	r2,r3,8111d7ec <_malloc_trim_r+0xa0>
8111d7c4:	9009883a 	mov	r4,r18
8111d7c8:	112ad680 	call	8112ad68 <__malloc_unlock>
8111d7cc:	0005883a 	mov	r2,zero
8111d7d0:	dfc00417 	ldw	ra,16(sp)
8111d7d4:	dcc00317 	ldw	r19,12(sp)
8111d7d8:	dc800217 	ldw	r18,8(sp)
8111d7dc:	dc400117 	ldw	r17,4(sp)
8111d7e0:	dc000017 	ldw	r16,0(sp)
8111d7e4:	dec00504 	addi	sp,sp,20
8111d7e8:	f800283a 	ret
8111d7ec:	040bc83a 	sub	r5,zero,r16
8111d7f0:	9009883a 	mov	r4,r18
8111d7f4:	1114dc00 	call	81114dc0 <_sbrk_r>
8111d7f8:	00ffffc4 	movi	r3,-1
8111d7fc:	10c00d26 	beq	r2,r3,8111d834 <_malloc_trim_r+0xe8>
8111d800:	00e04534 	movhi	r3,33044
8111d804:	18d22c04 	addi	r3,r3,18608
8111d808:	18800017 	ldw	r2,0(r3)
8111d80c:	99000217 	ldw	r4,8(r19)
8111d810:	8c23c83a 	sub	r17,r17,r16
8111d814:	8c400054 	ori	r17,r17,1
8111d818:	1421c83a 	sub	r16,r2,r16
8111d81c:	24400115 	stw	r17,4(r4)
8111d820:	9009883a 	mov	r4,r18
8111d824:	1c000015 	stw	r16,0(r3)
8111d828:	112ad680 	call	8112ad68 <__malloc_unlock>
8111d82c:	00800044 	movi	r2,1
8111d830:	003fe706 	br	8111d7d0 <__reset+0xfb0fd7d0>
8111d834:	000b883a 	mov	r5,zero
8111d838:	9009883a 	mov	r4,r18
8111d83c:	1114dc00 	call	81114dc0 <_sbrk_r>
8111d840:	99000217 	ldw	r4,8(r19)
8111d844:	014003c4 	movi	r5,15
8111d848:	1107c83a 	sub	r3,r2,r4
8111d84c:	28ffdd0e 	bge	r5,r3,8111d7c4 <__reset+0xfb0fd7c4>
8111d850:	01604534 	movhi	r5,33044
8111d854:	29516a04 	addi	r5,r5,17832
8111d858:	29400017 	ldw	r5,0(r5)
8111d85c:	18c00054 	ori	r3,r3,1
8111d860:	20c00115 	stw	r3,4(r4)
8111d864:	00e04534 	movhi	r3,33044
8111d868:	1145c83a 	sub	r2,r2,r5
8111d86c:	18d22c04 	addi	r3,r3,18608
8111d870:	18800015 	stw	r2,0(r3)
8111d874:	003fd306 	br	8111d7c4 <__reset+0xfb0fd7c4>

8111d878 <_free_r>:
8111d878:	28004326 	beq	r5,zero,8111d988 <_free_r+0x110>
8111d87c:	defffd04 	addi	sp,sp,-12
8111d880:	de00012e 	bgeu	sp,et,8111d888 <_free_r+0x10>
8111d884:	003b68fa 	trap	3
8111d888:	dc400115 	stw	r17,4(sp)
8111d88c:	dc000015 	stw	r16,0(sp)
8111d890:	2023883a 	mov	r17,r4
8111d894:	2821883a 	mov	r16,r5
8111d898:	dfc00215 	stw	ra,8(sp)
8111d89c:	112ac400 	call	8112ac40 <__malloc_lock>
8111d8a0:	81ffff17 	ldw	r7,-4(r16)
8111d8a4:	00bfff84 	movi	r2,-2
8111d8a8:	01204534 	movhi	r4,33044
8111d8ac:	81bffe04 	addi	r6,r16,-8
8111d8b0:	3884703a 	and	r2,r7,r2
8111d8b4:	210b2704 	addi	r4,r4,11420
8111d8b8:	308b883a 	add	r5,r6,r2
8111d8bc:	2a400117 	ldw	r9,4(r5)
8111d8c0:	22000217 	ldw	r8,8(r4)
8111d8c4:	00ffff04 	movi	r3,-4
8111d8c8:	48c6703a 	and	r3,r9,r3
8111d8cc:	2a005726 	beq	r5,r8,8111da2c <_free_r+0x1b4>
8111d8d0:	28c00115 	stw	r3,4(r5)
8111d8d4:	39c0004c 	andi	r7,r7,1
8111d8d8:	3800091e 	bne	r7,zero,8111d900 <_free_r+0x88>
8111d8dc:	823ffe17 	ldw	r8,-8(r16)
8111d8e0:	22400204 	addi	r9,r4,8
8111d8e4:	320dc83a 	sub	r6,r6,r8
8111d8e8:	31c00217 	ldw	r7,8(r6)
8111d8ec:	1205883a 	add	r2,r2,r8
8111d8f0:	3a406526 	beq	r7,r9,8111da88 <_free_r+0x210>
8111d8f4:	32000317 	ldw	r8,12(r6)
8111d8f8:	3a000315 	stw	r8,12(r7)
8111d8fc:	41c00215 	stw	r7,8(r8)
8111d900:	28cf883a 	add	r7,r5,r3
8111d904:	39c00117 	ldw	r7,4(r7)
8111d908:	39c0004c 	andi	r7,r7,1
8111d90c:	38003a26 	beq	r7,zero,8111d9f8 <_free_r+0x180>
8111d910:	10c00054 	ori	r3,r2,1
8111d914:	30c00115 	stw	r3,4(r6)
8111d918:	3087883a 	add	r3,r6,r2
8111d91c:	18800015 	stw	r2,0(r3)
8111d920:	00c07fc4 	movi	r3,511
8111d924:	18801936 	bltu	r3,r2,8111d98c <_free_r+0x114>
8111d928:	1004d0fa 	srli	r2,r2,3
8111d92c:	01c00044 	movi	r7,1
8111d930:	21400117 	ldw	r5,4(r4)
8111d934:	10c00044 	addi	r3,r2,1
8111d938:	18c7883a 	add	r3,r3,r3
8111d93c:	1005d0ba 	srai	r2,r2,2
8111d940:	18c7883a 	add	r3,r3,r3
8111d944:	18c7883a 	add	r3,r3,r3
8111d948:	1907883a 	add	r3,r3,r4
8111d94c:	3884983a 	sll	r2,r7,r2
8111d950:	19c00017 	ldw	r7,0(r3)
8111d954:	1a3ffe04 	addi	r8,r3,-8
8111d958:	1144b03a 	or	r2,r2,r5
8111d95c:	32000315 	stw	r8,12(r6)
8111d960:	31c00215 	stw	r7,8(r6)
8111d964:	20800115 	stw	r2,4(r4)
8111d968:	19800015 	stw	r6,0(r3)
8111d96c:	39800315 	stw	r6,12(r7)
8111d970:	8809883a 	mov	r4,r17
8111d974:	dfc00217 	ldw	ra,8(sp)
8111d978:	dc400117 	ldw	r17,4(sp)
8111d97c:	dc000017 	ldw	r16,0(sp)
8111d980:	dec00304 	addi	sp,sp,12
8111d984:	112ad681 	jmpi	8112ad68 <__malloc_unlock>
8111d988:	f800283a 	ret
8111d98c:	100ad27a 	srli	r5,r2,9
8111d990:	00c00104 	movi	r3,4
8111d994:	19404a36 	bltu	r3,r5,8111dac0 <_free_r+0x248>
8111d998:	100ad1ba 	srli	r5,r2,6
8111d99c:	28c00e44 	addi	r3,r5,57
8111d9a0:	18c7883a 	add	r3,r3,r3
8111d9a4:	29400e04 	addi	r5,r5,56
8111d9a8:	18c7883a 	add	r3,r3,r3
8111d9ac:	18c7883a 	add	r3,r3,r3
8111d9b0:	1909883a 	add	r4,r3,r4
8111d9b4:	20c00017 	ldw	r3,0(r4)
8111d9b8:	01e04534 	movhi	r7,33044
8111d9bc:	213ffe04 	addi	r4,r4,-8
8111d9c0:	39cb2704 	addi	r7,r7,11420
8111d9c4:	20c04426 	beq	r4,r3,8111dad8 <_free_r+0x260>
8111d9c8:	01ffff04 	movi	r7,-4
8111d9cc:	19400117 	ldw	r5,4(r3)
8111d9d0:	29ca703a 	and	r5,r5,r7
8111d9d4:	1140022e 	bgeu	r2,r5,8111d9e0 <_free_r+0x168>
8111d9d8:	18c00217 	ldw	r3,8(r3)
8111d9dc:	20fffb1e 	bne	r4,r3,8111d9cc <__reset+0xfb0fd9cc>
8111d9e0:	19000317 	ldw	r4,12(r3)
8111d9e4:	31000315 	stw	r4,12(r6)
8111d9e8:	30c00215 	stw	r3,8(r6)
8111d9ec:	21800215 	stw	r6,8(r4)
8111d9f0:	19800315 	stw	r6,12(r3)
8111d9f4:	003fde06 	br	8111d970 <__reset+0xfb0fd970>
8111d9f8:	29c00217 	ldw	r7,8(r5)
8111d9fc:	10c5883a 	add	r2,r2,r3
8111da00:	00e04534 	movhi	r3,33044
8111da04:	18cb2904 	addi	r3,r3,11428
8111da08:	38c03b26 	beq	r7,r3,8111daf8 <_free_r+0x280>
8111da0c:	2a000317 	ldw	r8,12(r5)
8111da10:	11400054 	ori	r5,r2,1
8111da14:	3087883a 	add	r3,r6,r2
8111da18:	3a000315 	stw	r8,12(r7)
8111da1c:	41c00215 	stw	r7,8(r8)
8111da20:	31400115 	stw	r5,4(r6)
8111da24:	18800015 	stw	r2,0(r3)
8111da28:	003fbd06 	br	8111d920 <__reset+0xfb0fd920>
8111da2c:	39c0004c 	andi	r7,r7,1
8111da30:	10c5883a 	add	r2,r2,r3
8111da34:	3800071e 	bne	r7,zero,8111da54 <_free_r+0x1dc>
8111da38:	81fffe17 	ldw	r7,-8(r16)
8111da3c:	31cdc83a 	sub	r6,r6,r7
8111da40:	30c00317 	ldw	r3,12(r6)
8111da44:	31400217 	ldw	r5,8(r6)
8111da48:	11c5883a 	add	r2,r2,r7
8111da4c:	28c00315 	stw	r3,12(r5)
8111da50:	19400215 	stw	r5,8(r3)
8111da54:	10c00054 	ori	r3,r2,1
8111da58:	30c00115 	stw	r3,4(r6)
8111da5c:	00e04534 	movhi	r3,33044
8111da60:	18d16b04 	addi	r3,r3,17836
8111da64:	18c00017 	ldw	r3,0(r3)
8111da68:	21800215 	stw	r6,8(r4)
8111da6c:	10ffc036 	bltu	r2,r3,8111d970 <__reset+0xfb0fd970>
8111da70:	00a04534 	movhi	r2,33044
8111da74:	1091c904 	addi	r2,r2,18212
8111da78:	11400017 	ldw	r5,0(r2)
8111da7c:	8809883a 	mov	r4,r17
8111da80:	111d74c0 	call	8111d74c <_malloc_trim_r>
8111da84:	003fba06 	br	8111d970 <__reset+0xfb0fd970>
8111da88:	28c9883a 	add	r4,r5,r3
8111da8c:	21000117 	ldw	r4,4(r4)
8111da90:	2100004c 	andi	r4,r4,1
8111da94:	2000391e 	bne	r4,zero,8111db7c <_free_r+0x304>
8111da98:	29c00217 	ldw	r7,8(r5)
8111da9c:	29000317 	ldw	r4,12(r5)
8111daa0:	1885883a 	add	r2,r3,r2
8111daa4:	10c00054 	ori	r3,r2,1
8111daa8:	39000315 	stw	r4,12(r7)
8111daac:	21c00215 	stw	r7,8(r4)
8111dab0:	30c00115 	stw	r3,4(r6)
8111dab4:	308d883a 	add	r6,r6,r2
8111dab8:	30800015 	stw	r2,0(r6)
8111dabc:	003fac06 	br	8111d970 <__reset+0xfb0fd970>
8111dac0:	00c00504 	movi	r3,20
8111dac4:	19401536 	bltu	r3,r5,8111db1c <_free_r+0x2a4>
8111dac8:	28c01704 	addi	r3,r5,92
8111dacc:	18c7883a 	add	r3,r3,r3
8111dad0:	294016c4 	addi	r5,r5,91
8111dad4:	003fb406 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111dad8:	280bd0ba 	srai	r5,r5,2
8111dadc:	00c00044 	movi	r3,1
8111dae0:	38800117 	ldw	r2,4(r7)
8111dae4:	194a983a 	sll	r5,r3,r5
8111dae8:	2007883a 	mov	r3,r4
8111daec:	2884b03a 	or	r2,r5,r2
8111daf0:	38800115 	stw	r2,4(r7)
8111daf4:	003fbb06 	br	8111d9e4 <__reset+0xfb0fd9e4>
8111daf8:	21800515 	stw	r6,20(r4)
8111dafc:	21800415 	stw	r6,16(r4)
8111db00:	10c00054 	ori	r3,r2,1
8111db04:	31c00315 	stw	r7,12(r6)
8111db08:	31c00215 	stw	r7,8(r6)
8111db0c:	30c00115 	stw	r3,4(r6)
8111db10:	308d883a 	add	r6,r6,r2
8111db14:	30800015 	stw	r2,0(r6)
8111db18:	003f9506 	br	8111d970 <__reset+0xfb0fd970>
8111db1c:	00c01504 	movi	r3,84
8111db20:	19400536 	bltu	r3,r5,8111db38 <_free_r+0x2c0>
8111db24:	100ad33a 	srli	r5,r2,12
8111db28:	28c01bc4 	addi	r3,r5,111
8111db2c:	18c7883a 	add	r3,r3,r3
8111db30:	29401b84 	addi	r5,r5,110
8111db34:	003f9c06 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111db38:	00c05504 	movi	r3,340
8111db3c:	19400536 	bltu	r3,r5,8111db54 <_free_r+0x2dc>
8111db40:	100ad3fa 	srli	r5,r2,15
8111db44:	28c01e04 	addi	r3,r5,120
8111db48:	18c7883a 	add	r3,r3,r3
8111db4c:	29401dc4 	addi	r5,r5,119
8111db50:	003f9506 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111db54:	00c15504 	movi	r3,1364
8111db58:	19400536 	bltu	r3,r5,8111db70 <_free_r+0x2f8>
8111db5c:	100ad4ba 	srli	r5,r2,18
8111db60:	28c01f44 	addi	r3,r5,125
8111db64:	18c7883a 	add	r3,r3,r3
8111db68:	29401f04 	addi	r5,r5,124
8111db6c:	003f8e06 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111db70:	00c03f84 	movi	r3,254
8111db74:	01401f84 	movi	r5,126
8111db78:	003f8b06 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111db7c:	10c00054 	ori	r3,r2,1
8111db80:	30c00115 	stw	r3,4(r6)
8111db84:	308d883a 	add	r6,r6,r2
8111db88:	30800015 	stw	r2,0(r6)
8111db8c:	003f7806 	br	8111d970 <__reset+0xfb0fd970>

8111db90 <__sfvwrite_r>:
8111db90:	30800217 	ldw	r2,8(r6)
8111db94:	10006926 	beq	r2,zero,8111dd3c <__sfvwrite_r+0x1ac>
8111db98:	defff404 	addi	sp,sp,-48
8111db9c:	de00012e 	bgeu	sp,et,8111dba4 <__sfvwrite_r+0x14>
8111dba0:	003b68fa 	trap	3
8111dba4:	28c0030b 	ldhu	r3,12(r5)
8111dba8:	dd400715 	stw	r21,28(sp)
8111dbac:	dd000615 	stw	r20,24(sp)
8111dbb0:	dc000215 	stw	r16,8(sp)
8111dbb4:	dfc00b15 	stw	ra,44(sp)
8111dbb8:	df000a15 	stw	fp,40(sp)
8111dbbc:	ddc00915 	stw	r23,36(sp)
8111dbc0:	dd800815 	stw	r22,32(sp)
8111dbc4:	dcc00515 	stw	r19,20(sp)
8111dbc8:	dc800415 	stw	r18,16(sp)
8111dbcc:	dc400315 	stw	r17,12(sp)
8111dbd0:	1880020c 	andi	r2,r3,8
8111dbd4:	2821883a 	mov	r16,r5
8111dbd8:	202b883a 	mov	r21,r4
8111dbdc:	3029883a 	mov	r20,r6
8111dbe0:	10002726 	beq	r2,zero,8111dc80 <__sfvwrite_r+0xf0>
8111dbe4:	28800417 	ldw	r2,16(r5)
8111dbe8:	10002526 	beq	r2,zero,8111dc80 <__sfvwrite_r+0xf0>
8111dbec:	1880008c 	andi	r2,r3,2
8111dbf0:	a4400017 	ldw	r17,0(r20)
8111dbf4:	10002a26 	beq	r2,zero,8111dca0 <__sfvwrite_r+0x110>
8111dbf8:	05a00034 	movhi	r22,32768
8111dbfc:	0027883a 	mov	r19,zero
8111dc00:	0025883a 	mov	r18,zero
8111dc04:	b5bf0004 	addi	r22,r22,-1024
8111dc08:	980d883a 	mov	r6,r19
8111dc0c:	a809883a 	mov	r4,r21
8111dc10:	90004626 	beq	r18,zero,8111dd2c <__sfvwrite_r+0x19c>
8111dc14:	900f883a 	mov	r7,r18
8111dc18:	b480022e 	bgeu	r22,r18,8111dc24 <__sfvwrite_r+0x94>
8111dc1c:	01e00034 	movhi	r7,32768
8111dc20:	39ff0004 	addi	r7,r7,-1024
8111dc24:	80800917 	ldw	r2,36(r16)
8111dc28:	81400717 	ldw	r5,28(r16)
8111dc2c:	103ee83a 	callr	r2
8111dc30:	0080570e 	bge	zero,r2,8111dd90 <__sfvwrite_r+0x200>
8111dc34:	a0c00217 	ldw	r3,8(r20)
8111dc38:	98a7883a 	add	r19,r19,r2
8111dc3c:	90a5c83a 	sub	r18,r18,r2
8111dc40:	1885c83a 	sub	r2,r3,r2
8111dc44:	a0800215 	stw	r2,8(r20)
8111dc48:	103fef1e 	bne	r2,zero,8111dc08 <__reset+0xfb0fdc08>
8111dc4c:	0005883a 	mov	r2,zero
8111dc50:	dfc00b17 	ldw	ra,44(sp)
8111dc54:	df000a17 	ldw	fp,40(sp)
8111dc58:	ddc00917 	ldw	r23,36(sp)
8111dc5c:	dd800817 	ldw	r22,32(sp)
8111dc60:	dd400717 	ldw	r21,28(sp)
8111dc64:	dd000617 	ldw	r20,24(sp)
8111dc68:	dcc00517 	ldw	r19,20(sp)
8111dc6c:	dc800417 	ldw	r18,16(sp)
8111dc70:	dc400317 	ldw	r17,12(sp)
8111dc74:	dc000217 	ldw	r16,8(sp)
8111dc78:	dec00c04 	addi	sp,sp,48
8111dc7c:	f800283a 	ret
8111dc80:	800b883a 	mov	r5,r16
8111dc84:	a809883a 	mov	r4,r21
8111dc88:	111b3700 	call	8111b370 <__swsetup_r>
8111dc8c:	1000eb1e 	bne	r2,zero,8111e03c <__sfvwrite_r+0x4ac>
8111dc90:	80c0030b 	ldhu	r3,12(r16)
8111dc94:	a4400017 	ldw	r17,0(r20)
8111dc98:	1880008c 	andi	r2,r3,2
8111dc9c:	103fd61e 	bne	r2,zero,8111dbf8 <__reset+0xfb0fdbf8>
8111dca0:	1880004c 	andi	r2,r3,1
8111dca4:	10003f1e 	bne	r2,zero,8111dda4 <__sfvwrite_r+0x214>
8111dca8:	0039883a 	mov	fp,zero
8111dcac:	0025883a 	mov	r18,zero
8111dcb0:	90001a26 	beq	r18,zero,8111dd1c <__sfvwrite_r+0x18c>
8111dcb4:	1880800c 	andi	r2,r3,512
8111dcb8:	84c00217 	ldw	r19,8(r16)
8111dcbc:	10002126 	beq	r2,zero,8111dd44 <__sfvwrite_r+0x1b4>
8111dcc0:	982f883a 	mov	r23,r19
8111dcc4:	94c09336 	bltu	r18,r19,8111df14 <__sfvwrite_r+0x384>
8111dcc8:	1881200c 	andi	r2,r3,1152
8111dccc:	10009e1e 	bne	r2,zero,8111df48 <__sfvwrite_r+0x3b8>
8111dcd0:	81000017 	ldw	r4,0(r16)
8111dcd4:	b80d883a 	mov	r6,r23
8111dcd8:	e00b883a 	mov	r5,fp
8111dcdc:	111e6ec0 	call	8111e6ec <memmove>
8111dce0:	80c00217 	ldw	r3,8(r16)
8111dce4:	81000017 	ldw	r4,0(r16)
8111dce8:	9005883a 	mov	r2,r18
8111dcec:	1ce7c83a 	sub	r19,r3,r19
8111dcf0:	25cf883a 	add	r7,r4,r23
8111dcf4:	84c00215 	stw	r19,8(r16)
8111dcf8:	81c00015 	stw	r7,0(r16)
8111dcfc:	a0c00217 	ldw	r3,8(r20)
8111dd00:	e0b9883a 	add	fp,fp,r2
8111dd04:	90a5c83a 	sub	r18,r18,r2
8111dd08:	18a7c83a 	sub	r19,r3,r2
8111dd0c:	a4c00215 	stw	r19,8(r20)
8111dd10:	983fce26 	beq	r19,zero,8111dc4c <__reset+0xfb0fdc4c>
8111dd14:	80c0030b 	ldhu	r3,12(r16)
8111dd18:	903fe61e 	bne	r18,zero,8111dcb4 <__reset+0xfb0fdcb4>
8111dd1c:	8f000017 	ldw	fp,0(r17)
8111dd20:	8c800117 	ldw	r18,4(r17)
8111dd24:	8c400204 	addi	r17,r17,8
8111dd28:	003fe106 	br	8111dcb0 <__reset+0xfb0fdcb0>
8111dd2c:	8cc00017 	ldw	r19,0(r17)
8111dd30:	8c800117 	ldw	r18,4(r17)
8111dd34:	8c400204 	addi	r17,r17,8
8111dd38:	003fb306 	br	8111dc08 <__reset+0xfb0fdc08>
8111dd3c:	0005883a 	mov	r2,zero
8111dd40:	f800283a 	ret
8111dd44:	81000017 	ldw	r4,0(r16)
8111dd48:	80800417 	ldw	r2,16(r16)
8111dd4c:	11005736 	bltu	r2,r4,8111deac <__sfvwrite_r+0x31c>
8111dd50:	85c00517 	ldw	r23,20(r16)
8111dd54:	95c05536 	bltu	r18,r23,8111deac <__sfvwrite_r+0x31c>
8111dd58:	00a00034 	movhi	r2,32768
8111dd5c:	10bfffc4 	addi	r2,r2,-1
8111dd60:	9009883a 	mov	r4,r18
8111dd64:	1480012e 	bgeu	r2,r18,8111dd6c <__sfvwrite_r+0x1dc>
8111dd68:	1009883a 	mov	r4,r2
8111dd6c:	b80b883a 	mov	r5,r23
8111dd70:	1126b080 	call	81126b08 <__divsi3>
8111dd74:	15cf383a 	mul	r7,r2,r23
8111dd78:	81400717 	ldw	r5,28(r16)
8111dd7c:	80800917 	ldw	r2,36(r16)
8111dd80:	e00d883a 	mov	r6,fp
8111dd84:	a809883a 	mov	r4,r21
8111dd88:	103ee83a 	callr	r2
8111dd8c:	00bfdb16 	blt	zero,r2,8111dcfc <__reset+0xfb0fdcfc>
8111dd90:	8080030b 	ldhu	r2,12(r16)
8111dd94:	10801014 	ori	r2,r2,64
8111dd98:	8080030d 	sth	r2,12(r16)
8111dd9c:	00bfffc4 	movi	r2,-1
8111dda0:	003fab06 	br	8111dc50 <__reset+0xfb0fdc50>
8111dda4:	0027883a 	mov	r19,zero
8111dda8:	0011883a 	mov	r8,zero
8111ddac:	0039883a 	mov	fp,zero
8111ddb0:	0025883a 	mov	r18,zero
8111ddb4:	90001f26 	beq	r18,zero,8111de34 <__sfvwrite_r+0x2a4>
8111ddb8:	40005a26 	beq	r8,zero,8111df24 <__sfvwrite_r+0x394>
8111ddbc:	982d883a 	mov	r22,r19
8111ddc0:	94c0012e 	bgeu	r18,r19,8111ddc8 <__sfvwrite_r+0x238>
8111ddc4:	902d883a 	mov	r22,r18
8111ddc8:	81000017 	ldw	r4,0(r16)
8111ddcc:	80800417 	ldw	r2,16(r16)
8111ddd0:	b02f883a 	mov	r23,r22
8111ddd4:	81c00517 	ldw	r7,20(r16)
8111ddd8:	1100032e 	bgeu	r2,r4,8111dde8 <__sfvwrite_r+0x258>
8111dddc:	80c00217 	ldw	r3,8(r16)
8111dde0:	38c7883a 	add	r3,r7,r3
8111dde4:	1d801816 	blt	r3,r22,8111de48 <__sfvwrite_r+0x2b8>
8111dde8:	b1c03e16 	blt	r22,r7,8111dee4 <__sfvwrite_r+0x354>
8111ddec:	80800917 	ldw	r2,36(r16)
8111ddf0:	81400717 	ldw	r5,28(r16)
8111ddf4:	e00d883a 	mov	r6,fp
8111ddf8:	da000115 	stw	r8,4(sp)
8111ddfc:	a809883a 	mov	r4,r21
8111de00:	103ee83a 	callr	r2
8111de04:	102f883a 	mov	r23,r2
8111de08:	da000117 	ldw	r8,4(sp)
8111de0c:	00bfe00e 	bge	zero,r2,8111dd90 <__reset+0xfb0fdd90>
8111de10:	9de7c83a 	sub	r19,r19,r23
8111de14:	98001f26 	beq	r19,zero,8111de94 <__sfvwrite_r+0x304>
8111de18:	a0800217 	ldw	r2,8(r20)
8111de1c:	e5f9883a 	add	fp,fp,r23
8111de20:	95e5c83a 	sub	r18,r18,r23
8111de24:	15efc83a 	sub	r23,r2,r23
8111de28:	a5c00215 	stw	r23,8(r20)
8111de2c:	b83f8726 	beq	r23,zero,8111dc4c <__reset+0xfb0fdc4c>
8111de30:	903fe11e 	bne	r18,zero,8111ddb8 <__reset+0xfb0fddb8>
8111de34:	8f000017 	ldw	fp,0(r17)
8111de38:	8c800117 	ldw	r18,4(r17)
8111de3c:	0011883a 	mov	r8,zero
8111de40:	8c400204 	addi	r17,r17,8
8111de44:	003fdb06 	br	8111ddb4 <__reset+0xfb0fddb4>
8111de48:	180d883a 	mov	r6,r3
8111de4c:	e00b883a 	mov	r5,fp
8111de50:	da000115 	stw	r8,4(sp)
8111de54:	d8c00015 	stw	r3,0(sp)
8111de58:	111e6ec0 	call	8111e6ec <memmove>
8111de5c:	d8c00017 	ldw	r3,0(sp)
8111de60:	80800017 	ldw	r2,0(r16)
8111de64:	800b883a 	mov	r5,r16
8111de68:	a809883a 	mov	r4,r21
8111de6c:	10c5883a 	add	r2,r2,r3
8111de70:	80800015 	stw	r2,0(r16)
8111de74:	d8c00015 	stw	r3,0(sp)
8111de78:	111cfe40 	call	8111cfe4 <_fflush_r>
8111de7c:	d8c00017 	ldw	r3,0(sp)
8111de80:	da000117 	ldw	r8,4(sp)
8111de84:	103fc21e 	bne	r2,zero,8111dd90 <__reset+0xfb0fdd90>
8111de88:	182f883a 	mov	r23,r3
8111de8c:	9de7c83a 	sub	r19,r19,r23
8111de90:	983fe11e 	bne	r19,zero,8111de18 <__reset+0xfb0fde18>
8111de94:	800b883a 	mov	r5,r16
8111de98:	a809883a 	mov	r4,r21
8111de9c:	111cfe40 	call	8111cfe4 <_fflush_r>
8111dea0:	103fbb1e 	bne	r2,zero,8111dd90 <__reset+0xfb0fdd90>
8111dea4:	0011883a 	mov	r8,zero
8111dea8:	003fdb06 	br	8111de18 <__reset+0xfb0fde18>
8111deac:	94c0012e 	bgeu	r18,r19,8111deb4 <__sfvwrite_r+0x324>
8111deb0:	9027883a 	mov	r19,r18
8111deb4:	980d883a 	mov	r6,r19
8111deb8:	e00b883a 	mov	r5,fp
8111debc:	111e6ec0 	call	8111e6ec <memmove>
8111dec0:	80800217 	ldw	r2,8(r16)
8111dec4:	80c00017 	ldw	r3,0(r16)
8111dec8:	14c5c83a 	sub	r2,r2,r19
8111decc:	1cc7883a 	add	r3,r3,r19
8111ded0:	80800215 	stw	r2,8(r16)
8111ded4:	80c00015 	stw	r3,0(r16)
8111ded8:	10004326 	beq	r2,zero,8111dfe8 <__sfvwrite_r+0x458>
8111dedc:	9805883a 	mov	r2,r19
8111dee0:	003f8606 	br	8111dcfc <__reset+0xfb0fdcfc>
8111dee4:	b00d883a 	mov	r6,r22
8111dee8:	e00b883a 	mov	r5,fp
8111deec:	da000115 	stw	r8,4(sp)
8111def0:	111e6ec0 	call	8111e6ec <memmove>
8111def4:	80800217 	ldw	r2,8(r16)
8111def8:	80c00017 	ldw	r3,0(r16)
8111defc:	da000117 	ldw	r8,4(sp)
8111df00:	1585c83a 	sub	r2,r2,r22
8111df04:	1dad883a 	add	r22,r3,r22
8111df08:	80800215 	stw	r2,8(r16)
8111df0c:	85800015 	stw	r22,0(r16)
8111df10:	003fbf06 	br	8111de10 <__reset+0xfb0fde10>
8111df14:	81000017 	ldw	r4,0(r16)
8111df18:	9027883a 	mov	r19,r18
8111df1c:	902f883a 	mov	r23,r18
8111df20:	003f6c06 	br	8111dcd4 <__reset+0xfb0fdcd4>
8111df24:	900d883a 	mov	r6,r18
8111df28:	01400284 	movi	r5,10
8111df2c:	e009883a 	mov	r4,fp
8111df30:	111e6080 	call	8111e608 <memchr>
8111df34:	10003e26 	beq	r2,zero,8111e030 <__sfvwrite_r+0x4a0>
8111df38:	10800044 	addi	r2,r2,1
8111df3c:	1727c83a 	sub	r19,r2,fp
8111df40:	02000044 	movi	r8,1
8111df44:	003f9d06 	br	8111ddbc <__reset+0xfb0fddbc>
8111df48:	80800517 	ldw	r2,20(r16)
8111df4c:	81400417 	ldw	r5,16(r16)
8111df50:	81c00017 	ldw	r7,0(r16)
8111df54:	10a7883a 	add	r19,r2,r2
8111df58:	9885883a 	add	r2,r19,r2
8111df5c:	1026d7fa 	srli	r19,r2,31
8111df60:	396dc83a 	sub	r22,r7,r5
8111df64:	b1000044 	addi	r4,r22,1
8111df68:	9885883a 	add	r2,r19,r2
8111df6c:	1027d07a 	srai	r19,r2,1
8111df70:	2485883a 	add	r2,r4,r18
8111df74:	980d883a 	mov	r6,r19
8111df78:	9880022e 	bgeu	r19,r2,8111df84 <__sfvwrite_r+0x3f4>
8111df7c:	1027883a 	mov	r19,r2
8111df80:	100d883a 	mov	r6,r2
8111df84:	18c1000c 	andi	r3,r3,1024
8111df88:	18001c26 	beq	r3,zero,8111dffc <__sfvwrite_r+0x46c>
8111df8c:	300b883a 	mov	r5,r6
8111df90:	a809883a 	mov	r4,r21
8111df94:	1113de40 	call	81113de4 <_malloc_r>
8111df98:	102f883a 	mov	r23,r2
8111df9c:	10002926 	beq	r2,zero,8111e044 <__sfvwrite_r+0x4b4>
8111dfa0:	81400417 	ldw	r5,16(r16)
8111dfa4:	b00d883a 	mov	r6,r22
8111dfa8:	1009883a 	mov	r4,r2
8111dfac:	11145f80 	call	811145f8 <memcpy>
8111dfb0:	8080030b 	ldhu	r2,12(r16)
8111dfb4:	00fedfc4 	movi	r3,-1153
8111dfb8:	10c4703a 	and	r2,r2,r3
8111dfbc:	10802014 	ori	r2,r2,128
8111dfc0:	8080030d 	sth	r2,12(r16)
8111dfc4:	bd89883a 	add	r4,r23,r22
8111dfc8:	9d8fc83a 	sub	r7,r19,r22
8111dfcc:	85c00415 	stw	r23,16(r16)
8111dfd0:	84c00515 	stw	r19,20(r16)
8111dfd4:	81000015 	stw	r4,0(r16)
8111dfd8:	9027883a 	mov	r19,r18
8111dfdc:	81c00215 	stw	r7,8(r16)
8111dfe0:	902f883a 	mov	r23,r18
8111dfe4:	003f3b06 	br	8111dcd4 <__reset+0xfb0fdcd4>
8111dfe8:	800b883a 	mov	r5,r16
8111dfec:	a809883a 	mov	r4,r21
8111dff0:	111cfe40 	call	8111cfe4 <_fflush_r>
8111dff4:	103fb926 	beq	r2,zero,8111dedc <__reset+0xfb0fdedc>
8111dff8:	003f6506 	br	8111dd90 <__reset+0xfb0fdd90>
8111dffc:	a809883a 	mov	r4,r21
8111e000:	111f90c0 	call	8111f90c <_realloc_r>
8111e004:	102f883a 	mov	r23,r2
8111e008:	103fee1e 	bne	r2,zero,8111dfc4 <__reset+0xfb0fdfc4>
8111e00c:	81400417 	ldw	r5,16(r16)
8111e010:	a809883a 	mov	r4,r21
8111e014:	111d8780 	call	8111d878 <_free_r>
8111e018:	8080030b 	ldhu	r2,12(r16)
8111e01c:	00ffdfc4 	movi	r3,-129
8111e020:	1884703a 	and	r2,r3,r2
8111e024:	00c00304 	movi	r3,12
8111e028:	a8c00015 	stw	r3,0(r21)
8111e02c:	003f5906 	br	8111dd94 <__reset+0xfb0fdd94>
8111e030:	94c00044 	addi	r19,r18,1
8111e034:	02000044 	movi	r8,1
8111e038:	003f6006 	br	8111ddbc <__reset+0xfb0fddbc>
8111e03c:	00bfffc4 	movi	r2,-1
8111e040:	003f0306 	br	8111dc50 <__reset+0xfb0fdc50>
8111e044:	00800304 	movi	r2,12
8111e048:	a8800015 	stw	r2,0(r21)
8111e04c:	8080030b 	ldhu	r2,12(r16)
8111e050:	003f5006 	br	8111dd94 <__reset+0xfb0fdd94>

8111e054 <_fwalk>:
8111e054:	defff704 	addi	sp,sp,-36
8111e058:	de00012e 	bgeu	sp,et,8111e060 <_fwalk+0xc>
8111e05c:	003b68fa 	trap	3
8111e060:	dd000415 	stw	r20,16(sp)
8111e064:	dfc00815 	stw	ra,32(sp)
8111e068:	ddc00715 	stw	r23,28(sp)
8111e06c:	dd800615 	stw	r22,24(sp)
8111e070:	dd400515 	stw	r21,20(sp)
8111e074:	dcc00315 	stw	r19,12(sp)
8111e078:	dc800215 	stw	r18,8(sp)
8111e07c:	dc400115 	stw	r17,4(sp)
8111e080:	dc000015 	stw	r16,0(sp)
8111e084:	2500b804 	addi	r20,r4,736
8111e088:	a0002326 	beq	r20,zero,8111e118 <_fwalk+0xc4>
8111e08c:	282b883a 	mov	r21,r5
8111e090:	002f883a 	mov	r23,zero
8111e094:	05800044 	movi	r22,1
8111e098:	04ffffc4 	movi	r19,-1
8111e09c:	a4400117 	ldw	r17,4(r20)
8111e0a0:	a4800217 	ldw	r18,8(r20)
8111e0a4:	8c7fffc4 	addi	r17,r17,-1
8111e0a8:	88000d16 	blt	r17,zero,8111e0e0 <_fwalk+0x8c>
8111e0ac:	94000304 	addi	r16,r18,12
8111e0b0:	94800384 	addi	r18,r18,14
8111e0b4:	8080000b 	ldhu	r2,0(r16)
8111e0b8:	8c7fffc4 	addi	r17,r17,-1
8111e0bc:	813ffd04 	addi	r4,r16,-12
8111e0c0:	b080042e 	bgeu	r22,r2,8111e0d4 <_fwalk+0x80>
8111e0c4:	9080000f 	ldh	r2,0(r18)
8111e0c8:	14c00226 	beq	r2,r19,8111e0d4 <_fwalk+0x80>
8111e0cc:	a83ee83a 	callr	r21
8111e0d0:	b8aeb03a 	or	r23,r23,r2
8111e0d4:	84001a04 	addi	r16,r16,104
8111e0d8:	94801a04 	addi	r18,r18,104
8111e0dc:	8cfff51e 	bne	r17,r19,8111e0b4 <__reset+0xfb0fe0b4>
8111e0e0:	a5000017 	ldw	r20,0(r20)
8111e0e4:	a03fed1e 	bne	r20,zero,8111e09c <__reset+0xfb0fe09c>
8111e0e8:	b805883a 	mov	r2,r23
8111e0ec:	dfc00817 	ldw	ra,32(sp)
8111e0f0:	ddc00717 	ldw	r23,28(sp)
8111e0f4:	dd800617 	ldw	r22,24(sp)
8111e0f8:	dd400517 	ldw	r21,20(sp)
8111e0fc:	dd000417 	ldw	r20,16(sp)
8111e100:	dcc00317 	ldw	r19,12(sp)
8111e104:	dc800217 	ldw	r18,8(sp)
8111e108:	dc400117 	ldw	r17,4(sp)
8111e10c:	dc000017 	ldw	r16,0(sp)
8111e110:	dec00904 	addi	sp,sp,36
8111e114:	f800283a 	ret
8111e118:	002f883a 	mov	r23,zero
8111e11c:	003ff206 	br	8111e0e8 <__reset+0xfb0fe0e8>

8111e120 <_fwalk_reent>:
8111e120:	defff704 	addi	sp,sp,-36
8111e124:	de00012e 	bgeu	sp,et,8111e12c <_fwalk_reent+0xc>
8111e128:	003b68fa 	trap	3
8111e12c:	dd000415 	stw	r20,16(sp)
8111e130:	dfc00815 	stw	ra,32(sp)
8111e134:	ddc00715 	stw	r23,28(sp)
8111e138:	dd800615 	stw	r22,24(sp)
8111e13c:	dd400515 	stw	r21,20(sp)
8111e140:	dcc00315 	stw	r19,12(sp)
8111e144:	dc800215 	stw	r18,8(sp)
8111e148:	dc400115 	stw	r17,4(sp)
8111e14c:	dc000015 	stw	r16,0(sp)
8111e150:	2500b804 	addi	r20,r4,736
8111e154:	a0002326 	beq	r20,zero,8111e1e4 <_fwalk_reent+0xc4>
8111e158:	282b883a 	mov	r21,r5
8111e15c:	2027883a 	mov	r19,r4
8111e160:	002f883a 	mov	r23,zero
8111e164:	05800044 	movi	r22,1
8111e168:	04bfffc4 	movi	r18,-1
8111e16c:	a4400117 	ldw	r17,4(r20)
8111e170:	a4000217 	ldw	r16,8(r20)
8111e174:	8c7fffc4 	addi	r17,r17,-1
8111e178:	88000c16 	blt	r17,zero,8111e1ac <_fwalk_reent+0x8c>
8111e17c:	84000304 	addi	r16,r16,12
8111e180:	8080000b 	ldhu	r2,0(r16)
8111e184:	8c7fffc4 	addi	r17,r17,-1
8111e188:	817ffd04 	addi	r5,r16,-12
8111e18c:	b080052e 	bgeu	r22,r2,8111e1a4 <_fwalk_reent+0x84>
8111e190:	8080008f 	ldh	r2,2(r16)
8111e194:	9809883a 	mov	r4,r19
8111e198:	14800226 	beq	r2,r18,8111e1a4 <_fwalk_reent+0x84>
8111e19c:	a83ee83a 	callr	r21
8111e1a0:	b8aeb03a 	or	r23,r23,r2
8111e1a4:	84001a04 	addi	r16,r16,104
8111e1a8:	8cbff51e 	bne	r17,r18,8111e180 <__reset+0xfb0fe180>
8111e1ac:	a5000017 	ldw	r20,0(r20)
8111e1b0:	a03fee1e 	bne	r20,zero,8111e16c <__reset+0xfb0fe16c>
8111e1b4:	b805883a 	mov	r2,r23
8111e1b8:	dfc00817 	ldw	ra,32(sp)
8111e1bc:	ddc00717 	ldw	r23,28(sp)
8111e1c0:	dd800617 	ldw	r22,24(sp)
8111e1c4:	dd400517 	ldw	r21,20(sp)
8111e1c8:	dd000417 	ldw	r20,16(sp)
8111e1cc:	dcc00317 	ldw	r19,12(sp)
8111e1d0:	dc800217 	ldw	r18,8(sp)
8111e1d4:	dc400117 	ldw	r17,4(sp)
8111e1d8:	dc000017 	ldw	r16,0(sp)
8111e1dc:	dec00904 	addi	sp,sp,36
8111e1e0:	f800283a 	ret
8111e1e4:	002f883a 	mov	r23,zero
8111e1e8:	003ff206 	br	8111e1b4 <__reset+0xfb0fe1b4>

8111e1ec <_isatty_r>:
8111e1ec:	defffd04 	addi	sp,sp,-12
8111e1f0:	de00012e 	bgeu	sp,et,8111e1f8 <_isatty_r+0xc>
8111e1f4:	003b68fa 	trap	3
8111e1f8:	dc000015 	stw	r16,0(sp)
8111e1fc:	04204534 	movhi	r16,33044
8111e200:	dc400115 	stw	r17,4(sp)
8111e204:	8411c604 	addi	r16,r16,18200
8111e208:	2023883a 	mov	r17,r4
8111e20c:	2809883a 	mov	r4,r5
8111e210:	dfc00215 	stw	ra,8(sp)
8111e214:	80000015 	stw	zero,0(r16)
8111e218:	112933c0 	call	8112933c <isatty>
8111e21c:	00ffffc4 	movi	r3,-1
8111e220:	10c00526 	beq	r2,r3,8111e238 <_isatty_r+0x4c>
8111e224:	dfc00217 	ldw	ra,8(sp)
8111e228:	dc400117 	ldw	r17,4(sp)
8111e22c:	dc000017 	ldw	r16,0(sp)
8111e230:	dec00304 	addi	sp,sp,12
8111e234:	f800283a 	ret
8111e238:	80c00017 	ldw	r3,0(r16)
8111e23c:	183ff926 	beq	r3,zero,8111e224 <__reset+0xfb0fe224>
8111e240:	88c00015 	stw	r3,0(r17)
8111e244:	003ff706 	br	8111e224 <__reset+0xfb0fe224>

8111e248 <iswspace>:
8111e248:	00803fc4 	movi	r2,255
8111e24c:	11000836 	bltu	r2,r4,8111e270 <iswspace+0x28>
8111e250:	00a04534 	movhi	r2,33044
8111e254:	10916704 	addi	r2,r2,17820
8111e258:	10800017 	ldw	r2,0(r2)
8111e25c:	1109883a 	add	r4,r2,r4
8111e260:	20800043 	ldbu	r2,1(r4)
8111e264:	1080020c 	andi	r2,r2,8
8111e268:	10803fcc 	andi	r2,r2,255
8111e26c:	f800283a 	ret
8111e270:	0005883a 	mov	r2,zero
8111e274:	f800283a 	ret

8111e278 <_setlocale_r>:
8111e278:	30001d26 	beq	r6,zero,8111e2f0 <_setlocale_r+0x78>
8111e27c:	01604534 	movhi	r5,33044
8111e280:	defffe04 	addi	sp,sp,-8
8111e284:	2947ad04 	addi	r5,r5,7860
8111e288:	3009883a 	mov	r4,r6
8111e28c:	de00012e 	bgeu	sp,et,8111e294 <_setlocale_r+0x1c>
8111e290:	003b68fa 	trap	3
8111e294:	dc000015 	stw	r16,0(sp)
8111e298:	dfc00115 	stw	ra,4(sp)
8111e29c:	3021883a 	mov	r16,r6
8111e2a0:	111ffc40 	call	8111ffc4 <strcmp>
8111e2a4:	1000061e 	bne	r2,zero,8111e2c0 <_setlocale_r+0x48>
8111e2a8:	00a04534 	movhi	r2,33044
8111e2ac:	10877c04 	addi	r2,r2,7664
8111e2b0:	dfc00117 	ldw	ra,4(sp)
8111e2b4:	dc000017 	ldw	r16,0(sp)
8111e2b8:	dec00204 	addi	sp,sp,8
8111e2bc:	f800283a 	ret
8111e2c0:	01604534 	movhi	r5,33044
8111e2c4:	29477c04 	addi	r5,r5,7664
8111e2c8:	8009883a 	mov	r4,r16
8111e2cc:	111ffc40 	call	8111ffc4 <strcmp>
8111e2d0:	103ff526 	beq	r2,zero,8111e2a8 <__reset+0xfb0fe2a8>
8111e2d4:	01604534 	movhi	r5,33044
8111e2d8:	29478604 	addi	r5,r5,7704
8111e2dc:	8009883a 	mov	r4,r16
8111e2e0:	111ffc40 	call	8111ffc4 <strcmp>
8111e2e4:	103ff026 	beq	r2,zero,8111e2a8 <__reset+0xfb0fe2a8>
8111e2e8:	0005883a 	mov	r2,zero
8111e2ec:	003ff006 	br	8111e2b0 <__reset+0xfb0fe2b0>
8111e2f0:	00a04534 	movhi	r2,33044
8111e2f4:	10877c04 	addi	r2,r2,7664
8111e2f8:	f800283a 	ret

8111e2fc <__locale_charset>:
8111e2fc:	00a04534 	movhi	r2,33044
8111e300:	108c3104 	addi	r2,r2,12484
8111e304:	f800283a 	ret

8111e308 <__locale_mb_cur_max>:
8111e308:	00a04534 	movhi	r2,33044
8111e30c:	10916c04 	addi	r2,r2,17840
8111e310:	10800017 	ldw	r2,0(r2)
8111e314:	f800283a 	ret

8111e318 <__locale_msgcharset>:
8111e318:	00a04534 	movhi	r2,33044
8111e31c:	108c2904 	addi	r2,r2,12452
8111e320:	f800283a 	ret

8111e324 <__locale_cjk_lang>:
8111e324:	0005883a 	mov	r2,zero
8111e328:	f800283a 	ret

8111e32c <_localeconv_r>:
8111e32c:	00a04534 	movhi	r2,33044
8111e330:	108c3904 	addi	r2,r2,12516
8111e334:	f800283a 	ret

8111e338 <setlocale>:
8111e338:	00a04534 	movhi	r2,33044
8111e33c:	10916904 	addi	r2,r2,17828
8111e340:	280d883a 	mov	r6,r5
8111e344:	200b883a 	mov	r5,r4
8111e348:	11000017 	ldw	r4,0(r2)
8111e34c:	111e2781 	jmpi	8111e278 <_setlocale_r>

8111e350 <localeconv>:
8111e350:	00a04534 	movhi	r2,33044
8111e354:	108c3904 	addi	r2,r2,12516
8111e358:	f800283a 	ret

8111e35c <_lseek_r>:
8111e35c:	defffd04 	addi	sp,sp,-12
8111e360:	de00012e 	bgeu	sp,et,8111e368 <_lseek_r+0xc>
8111e364:	003b68fa 	trap	3
8111e368:	2805883a 	mov	r2,r5
8111e36c:	dc000015 	stw	r16,0(sp)
8111e370:	04204534 	movhi	r16,33044
8111e374:	dc400115 	stw	r17,4(sp)
8111e378:	300b883a 	mov	r5,r6
8111e37c:	8411c604 	addi	r16,r16,18200
8111e380:	2023883a 	mov	r17,r4
8111e384:	380d883a 	mov	r6,r7
8111e388:	1009883a 	mov	r4,r2
8111e38c:	dfc00215 	stw	ra,8(sp)
8111e390:	80000015 	stw	zero,0(r16)
8111e394:	1129f380 	call	81129f38 <lseek>
8111e398:	00ffffc4 	movi	r3,-1
8111e39c:	10c00526 	beq	r2,r3,8111e3b4 <_lseek_r+0x58>
8111e3a0:	dfc00217 	ldw	ra,8(sp)
8111e3a4:	dc400117 	ldw	r17,4(sp)
8111e3a8:	dc000017 	ldw	r16,0(sp)
8111e3ac:	dec00304 	addi	sp,sp,12
8111e3b0:	f800283a 	ret
8111e3b4:	80c00017 	ldw	r3,0(r16)
8111e3b8:	183ff926 	beq	r3,zero,8111e3a0 <__reset+0xfb0fe3a0>
8111e3bc:	88c00015 	stw	r3,0(r17)
8111e3c0:	003ff706 	br	8111e3a0 <__reset+0xfb0fe3a0>

8111e3c4 <_mbrtowc_r>:
8111e3c4:	defff704 	addi	sp,sp,-36
8111e3c8:	00a04534 	movhi	r2,33044
8111e3cc:	de00012e 	bgeu	sp,et,8111e3d4 <_mbrtowc_r+0x10>
8111e3d0:	003b68fa 	trap	3
8111e3d4:	10916d04 	addi	r2,r2,17844
8111e3d8:	dc800715 	stw	r18,28(sp)
8111e3dc:	dc400615 	stw	r17,24(sp)
8111e3e0:	dc000515 	stw	r16,20(sp)
8111e3e4:	dfc00815 	stw	ra,32(sp)
8111e3e8:	2021883a 	mov	r16,r4
8111e3ec:	dc400917 	ldw	r17,36(sp)
8111e3f0:	14800017 	ldw	r18,0(r2)
8111e3f4:	30001626 	beq	r6,zero,8111e450 <_mbrtowc_r+0x8c>
8111e3f8:	d9400215 	stw	r5,8(sp)
8111e3fc:	d9800315 	stw	r6,12(sp)
8111e400:	d9c00415 	stw	r7,16(sp)
8111e404:	111e2fc0 	call	8111e2fc <__locale_charset>
8111e408:	d9c00417 	ldw	r7,16(sp)
8111e40c:	d9800317 	ldw	r6,12(sp)
8111e410:	d9400217 	ldw	r5,8(sp)
8111e414:	d8800015 	stw	r2,0(sp)
8111e418:	dc400115 	stw	r17,4(sp)
8111e41c:	8009883a 	mov	r4,r16
8111e420:	903ee83a 	callr	r18
8111e424:	00ffffc4 	movi	r3,-1
8111e428:	10c0031e 	bne	r2,r3,8111e438 <_mbrtowc_r+0x74>
8111e42c:	88000015 	stw	zero,0(r17)
8111e430:	00c02284 	movi	r3,138
8111e434:	80c00015 	stw	r3,0(r16)
8111e438:	dfc00817 	ldw	ra,32(sp)
8111e43c:	dc800717 	ldw	r18,28(sp)
8111e440:	dc400617 	ldw	r17,24(sp)
8111e444:	dc000517 	ldw	r16,20(sp)
8111e448:	dec00904 	addi	sp,sp,36
8111e44c:	f800283a 	ret
8111e450:	111e2fc0 	call	8111e2fc <__locale_charset>
8111e454:	01a04534 	movhi	r6,33044
8111e458:	31878604 	addi	r6,r6,7704
8111e45c:	dc400115 	stw	r17,4(sp)
8111e460:	d8800015 	stw	r2,0(sp)
8111e464:	01c00044 	movi	r7,1
8111e468:	000b883a 	mov	r5,zero
8111e46c:	8009883a 	mov	r4,r16
8111e470:	903ee83a 	callr	r18
8111e474:	003feb06 	br	8111e424 <__reset+0xfb0fe424>

8111e478 <mbrtowc>:
8111e478:	defff704 	addi	sp,sp,-36
8111e47c:	00a04534 	movhi	r2,33044
8111e480:	de00012e 	bgeu	sp,et,8111e488 <mbrtowc+0x10>
8111e484:	003b68fa 	trap	3
8111e488:	10916904 	addi	r2,r2,17828
8111e48c:	dc800415 	stw	r18,16(sp)
8111e490:	dc400315 	stw	r17,12(sp)
8111e494:	dfc00815 	stw	ra,32(sp)
8111e498:	dd400715 	stw	r21,28(sp)
8111e49c:	dd000615 	stw	r20,24(sp)
8111e4a0:	dcc00515 	stw	r19,20(sp)
8111e4a4:	dc000215 	stw	r16,8(sp)
8111e4a8:	3825883a 	mov	r18,r7
8111e4ac:	14400017 	ldw	r17,0(r2)
8111e4b0:	28001c26 	beq	r5,zero,8111e524 <mbrtowc+0xac>
8111e4b4:	00a04534 	movhi	r2,33044
8111e4b8:	10916d04 	addi	r2,r2,17844
8111e4bc:	15400017 	ldw	r21,0(r2)
8111e4c0:	2821883a 	mov	r16,r5
8111e4c4:	2027883a 	mov	r19,r4
8111e4c8:	3029883a 	mov	r20,r6
8111e4cc:	111e2fc0 	call	8111e2fc <__locale_charset>
8111e4d0:	d8800015 	stw	r2,0(sp)
8111e4d4:	dc800115 	stw	r18,4(sp)
8111e4d8:	a00f883a 	mov	r7,r20
8111e4dc:	800d883a 	mov	r6,r16
8111e4e0:	980b883a 	mov	r5,r19
8111e4e4:	8809883a 	mov	r4,r17
8111e4e8:	a83ee83a 	callr	r21
8111e4ec:	00ffffc4 	movi	r3,-1
8111e4f0:	10c0031e 	bne	r2,r3,8111e500 <mbrtowc+0x88>
8111e4f4:	90000015 	stw	zero,0(r18)
8111e4f8:	00c02284 	movi	r3,138
8111e4fc:	88c00015 	stw	r3,0(r17)
8111e500:	dfc00817 	ldw	ra,32(sp)
8111e504:	dd400717 	ldw	r21,28(sp)
8111e508:	dd000617 	ldw	r20,24(sp)
8111e50c:	dcc00517 	ldw	r19,20(sp)
8111e510:	dc800417 	ldw	r18,16(sp)
8111e514:	dc400317 	ldw	r17,12(sp)
8111e518:	dc000217 	ldw	r16,8(sp)
8111e51c:	dec00904 	addi	sp,sp,36
8111e520:	f800283a 	ret
8111e524:	00a04534 	movhi	r2,33044
8111e528:	10916d04 	addi	r2,r2,17844
8111e52c:	14000017 	ldw	r16,0(r2)
8111e530:	111e2fc0 	call	8111e2fc <__locale_charset>
8111e534:	01a04534 	movhi	r6,33044
8111e538:	31878604 	addi	r6,r6,7704
8111e53c:	dc800115 	stw	r18,4(sp)
8111e540:	d8800015 	stw	r2,0(sp)
8111e544:	01c00044 	movi	r7,1
8111e548:	000b883a 	mov	r5,zero
8111e54c:	8809883a 	mov	r4,r17
8111e550:	803ee83a 	callr	r16
8111e554:	003fe506 	br	8111e4ec <__reset+0xfb0fe4ec>

8111e558 <__ascii_mbtowc>:
8111e558:	deffff04 	addi	sp,sp,-4
8111e55c:	de00012e 	bgeu	sp,et,8111e564 <__ascii_mbtowc+0xc>
8111e560:	003b68fa 	trap	3
8111e564:	28000826 	beq	r5,zero,8111e588 <__ascii_mbtowc+0x30>
8111e568:	30000926 	beq	r6,zero,8111e590 <__ascii_mbtowc+0x38>
8111e56c:	38000b26 	beq	r7,zero,8111e59c <__ascii_mbtowc+0x44>
8111e570:	30800003 	ldbu	r2,0(r6)
8111e574:	28800015 	stw	r2,0(r5)
8111e578:	30800003 	ldbu	r2,0(r6)
8111e57c:	1004c03a 	cmpne	r2,r2,zero
8111e580:	dec00104 	addi	sp,sp,4
8111e584:	f800283a 	ret
8111e588:	d80b883a 	mov	r5,sp
8111e58c:	303ff71e 	bne	r6,zero,8111e56c <__reset+0xfb0fe56c>
8111e590:	0005883a 	mov	r2,zero
8111e594:	dec00104 	addi	sp,sp,4
8111e598:	f800283a 	ret
8111e59c:	00bfff84 	movi	r2,-2
8111e5a0:	003ff706 	br	8111e580 <__reset+0xfb0fe580>

8111e5a4 <_mbtowc_r>:
8111e5a4:	00a04534 	movhi	r2,33044
8111e5a8:	defff804 	addi	sp,sp,-32
8111e5ac:	10916d04 	addi	r2,r2,17844
8111e5b0:	de00012e 	bgeu	sp,et,8111e5b8 <_mbtowc_r+0x14>
8111e5b4:	003b68fa 	trap	3
8111e5b8:	dfc00715 	stw	ra,28(sp)
8111e5bc:	dc000615 	stw	r16,24(sp)
8111e5c0:	14000017 	ldw	r16,0(r2)
8111e5c4:	d9000215 	stw	r4,8(sp)
8111e5c8:	d9400315 	stw	r5,12(sp)
8111e5cc:	d9800415 	stw	r6,16(sp)
8111e5d0:	d9c00515 	stw	r7,20(sp)
8111e5d4:	111e2fc0 	call	8111e2fc <__locale_charset>
8111e5d8:	d8800015 	stw	r2,0(sp)
8111e5dc:	d8800817 	ldw	r2,32(sp)
8111e5e0:	d9c00517 	ldw	r7,20(sp)
8111e5e4:	d9800417 	ldw	r6,16(sp)
8111e5e8:	d9400317 	ldw	r5,12(sp)
8111e5ec:	d9000217 	ldw	r4,8(sp)
8111e5f0:	d8800115 	stw	r2,4(sp)
8111e5f4:	803ee83a 	callr	r16
8111e5f8:	dfc00717 	ldw	ra,28(sp)
8111e5fc:	dc000617 	ldw	r16,24(sp)
8111e600:	dec00804 	addi	sp,sp,32
8111e604:	f800283a 	ret

8111e608 <memchr>:
8111e608:	208000cc 	andi	r2,r4,3
8111e60c:	280f883a 	mov	r7,r5
8111e610:	10003426 	beq	r2,zero,8111e6e4 <memchr+0xdc>
8111e614:	30bfffc4 	addi	r2,r6,-1
8111e618:	30001a26 	beq	r6,zero,8111e684 <memchr+0x7c>
8111e61c:	20c00003 	ldbu	r3,0(r4)
8111e620:	29803fcc 	andi	r6,r5,255
8111e624:	30c0051e 	bne	r6,r3,8111e63c <memchr+0x34>
8111e628:	00001806 	br	8111e68c <memchr+0x84>
8111e62c:	10001526 	beq	r2,zero,8111e684 <memchr+0x7c>
8111e630:	20c00003 	ldbu	r3,0(r4)
8111e634:	10bfffc4 	addi	r2,r2,-1
8111e638:	30c01426 	beq	r6,r3,8111e68c <memchr+0x84>
8111e63c:	21000044 	addi	r4,r4,1
8111e640:	20c000cc 	andi	r3,r4,3
8111e644:	183ff91e 	bne	r3,zero,8111e62c <__reset+0xfb0fe62c>
8111e648:	020000c4 	movi	r8,3
8111e64c:	40801136 	bltu	r8,r2,8111e694 <memchr+0x8c>
8111e650:	10000c26 	beq	r2,zero,8111e684 <memchr+0x7c>
8111e654:	20c00003 	ldbu	r3,0(r4)
8111e658:	29403fcc 	andi	r5,r5,255
8111e65c:	28c00b26 	beq	r5,r3,8111e68c <memchr+0x84>
8111e660:	20c00044 	addi	r3,r4,1
8111e664:	39803fcc 	andi	r6,r7,255
8111e668:	2089883a 	add	r4,r4,r2
8111e66c:	00000306 	br	8111e67c <memchr+0x74>
8111e670:	18c00044 	addi	r3,r3,1
8111e674:	197fffc3 	ldbu	r5,-1(r3)
8111e678:	31400526 	beq	r6,r5,8111e690 <memchr+0x88>
8111e67c:	1805883a 	mov	r2,r3
8111e680:	20fffb1e 	bne	r4,r3,8111e670 <__reset+0xfb0fe670>
8111e684:	0005883a 	mov	r2,zero
8111e688:	f800283a 	ret
8111e68c:	2005883a 	mov	r2,r4
8111e690:	f800283a 	ret
8111e694:	28c03fcc 	andi	r3,r5,255
8111e698:	1812923a 	slli	r9,r3,8
8111e69c:	02ffbff4 	movhi	r11,65279
8111e6a0:	02a02074 	movhi	r10,32897
8111e6a4:	48d2b03a 	or	r9,r9,r3
8111e6a8:	4806943a 	slli	r3,r9,16
8111e6ac:	5affbfc4 	addi	r11,r11,-257
8111e6b0:	52a02004 	addi	r10,r10,-32640
8111e6b4:	48d2b03a 	or	r9,r9,r3
8111e6b8:	20c00017 	ldw	r3,0(r4)
8111e6bc:	48c6f03a 	xor	r3,r9,r3
8111e6c0:	1acd883a 	add	r6,r3,r11
8111e6c4:	00c6303a 	nor	r3,zero,r3
8111e6c8:	30c6703a 	and	r3,r6,r3
8111e6cc:	1a86703a 	and	r3,r3,r10
8111e6d0:	183fe01e 	bne	r3,zero,8111e654 <__reset+0xfb0fe654>
8111e6d4:	10bfff04 	addi	r2,r2,-4
8111e6d8:	21000104 	addi	r4,r4,4
8111e6dc:	40bff636 	bltu	r8,r2,8111e6b8 <__reset+0xfb0fe6b8>
8111e6e0:	003fdb06 	br	8111e650 <__reset+0xfb0fe650>
8111e6e4:	3005883a 	mov	r2,r6
8111e6e8:	003fd706 	br	8111e648 <__reset+0xfb0fe648>

8111e6ec <memmove>:
8111e6ec:	2005883a 	mov	r2,r4
8111e6f0:	29000b2e 	bgeu	r5,r4,8111e720 <memmove+0x34>
8111e6f4:	298f883a 	add	r7,r5,r6
8111e6f8:	21c0092e 	bgeu	r4,r7,8111e720 <memmove+0x34>
8111e6fc:	2187883a 	add	r3,r4,r6
8111e700:	198bc83a 	sub	r5,r3,r6
8111e704:	30004826 	beq	r6,zero,8111e828 <memmove+0x13c>
8111e708:	39ffffc4 	addi	r7,r7,-1
8111e70c:	39000003 	ldbu	r4,0(r7)
8111e710:	18ffffc4 	addi	r3,r3,-1
8111e714:	19000005 	stb	r4,0(r3)
8111e718:	28fffb1e 	bne	r5,r3,8111e708 <__reset+0xfb0fe708>
8111e71c:	f800283a 	ret
8111e720:	00c003c4 	movi	r3,15
8111e724:	1980412e 	bgeu	r3,r6,8111e82c <memmove+0x140>
8111e728:	2886b03a 	or	r3,r5,r2
8111e72c:	18c000cc 	andi	r3,r3,3
8111e730:	1800401e 	bne	r3,zero,8111e834 <memmove+0x148>
8111e734:	33fffc04 	addi	r15,r6,-16
8111e738:	781ed13a 	srli	r15,r15,4
8111e73c:	28c00104 	addi	r3,r5,4
8111e740:	13400104 	addi	r13,r2,4
8111e744:	781c913a 	slli	r14,r15,4
8111e748:	2b000204 	addi	r12,r5,8
8111e74c:	12c00204 	addi	r11,r2,8
8111e750:	73800504 	addi	r14,r14,20
8111e754:	2a800304 	addi	r10,r5,12
8111e758:	12400304 	addi	r9,r2,12
8111e75c:	2b9d883a 	add	r14,r5,r14
8111e760:	2811883a 	mov	r8,r5
8111e764:	100f883a 	mov	r7,r2
8111e768:	41000017 	ldw	r4,0(r8)
8111e76c:	39c00404 	addi	r7,r7,16
8111e770:	18c00404 	addi	r3,r3,16
8111e774:	393ffc15 	stw	r4,-16(r7)
8111e778:	193ffc17 	ldw	r4,-16(r3)
8111e77c:	6b400404 	addi	r13,r13,16
8111e780:	5ac00404 	addi	r11,r11,16
8111e784:	693ffc15 	stw	r4,-16(r13)
8111e788:	61000017 	ldw	r4,0(r12)
8111e78c:	4a400404 	addi	r9,r9,16
8111e790:	42000404 	addi	r8,r8,16
8111e794:	593ffc15 	stw	r4,-16(r11)
8111e798:	51000017 	ldw	r4,0(r10)
8111e79c:	63000404 	addi	r12,r12,16
8111e7a0:	52800404 	addi	r10,r10,16
8111e7a4:	493ffc15 	stw	r4,-16(r9)
8111e7a8:	1bbfef1e 	bne	r3,r14,8111e768 <__reset+0xfb0fe768>
8111e7ac:	79000044 	addi	r4,r15,1
8111e7b0:	2008913a 	slli	r4,r4,4
8111e7b4:	328003cc 	andi	r10,r6,15
8111e7b8:	02c000c4 	movi	r11,3
8111e7bc:	1107883a 	add	r3,r2,r4
8111e7c0:	290b883a 	add	r5,r5,r4
8111e7c4:	5a801e2e 	bgeu	r11,r10,8111e840 <memmove+0x154>
8111e7c8:	1813883a 	mov	r9,r3
8111e7cc:	2811883a 	mov	r8,r5
8111e7d0:	500f883a 	mov	r7,r10
8111e7d4:	41000017 	ldw	r4,0(r8)
8111e7d8:	4a400104 	addi	r9,r9,4
8111e7dc:	39ffff04 	addi	r7,r7,-4
8111e7e0:	493fff15 	stw	r4,-4(r9)
8111e7e4:	42000104 	addi	r8,r8,4
8111e7e8:	59fffa36 	bltu	r11,r7,8111e7d4 <__reset+0xfb0fe7d4>
8111e7ec:	513fff04 	addi	r4,r10,-4
8111e7f0:	2008d0ba 	srli	r4,r4,2
8111e7f4:	318000cc 	andi	r6,r6,3
8111e7f8:	21000044 	addi	r4,r4,1
8111e7fc:	2109883a 	add	r4,r4,r4
8111e800:	2109883a 	add	r4,r4,r4
8111e804:	1907883a 	add	r3,r3,r4
8111e808:	290b883a 	add	r5,r5,r4
8111e80c:	30000b26 	beq	r6,zero,8111e83c <memmove+0x150>
8111e810:	198d883a 	add	r6,r3,r6
8111e814:	29c00003 	ldbu	r7,0(r5)
8111e818:	18c00044 	addi	r3,r3,1
8111e81c:	29400044 	addi	r5,r5,1
8111e820:	19ffffc5 	stb	r7,-1(r3)
8111e824:	19bffb1e 	bne	r3,r6,8111e814 <__reset+0xfb0fe814>
8111e828:	f800283a 	ret
8111e82c:	1007883a 	mov	r3,r2
8111e830:	003ff606 	br	8111e80c <__reset+0xfb0fe80c>
8111e834:	1007883a 	mov	r3,r2
8111e838:	003ff506 	br	8111e810 <__reset+0xfb0fe810>
8111e83c:	f800283a 	ret
8111e840:	500d883a 	mov	r6,r10
8111e844:	003ff106 	br	8111e80c <__reset+0xfb0fe80c>

8111e848 <_Balloc>:
8111e848:	defffc04 	addi	sp,sp,-16
8111e84c:	de00012e 	bgeu	sp,et,8111e854 <_Balloc+0xc>
8111e850:	003b68fa 	trap	3
8111e854:	20801317 	ldw	r2,76(r4)
8111e858:	dc400115 	stw	r17,4(sp)
8111e85c:	dc000015 	stw	r16,0(sp)
8111e860:	dfc00315 	stw	ra,12(sp)
8111e864:	dc800215 	stw	r18,8(sp)
8111e868:	2023883a 	mov	r17,r4
8111e86c:	2821883a 	mov	r16,r5
8111e870:	10000f26 	beq	r2,zero,8111e8b0 <_Balloc+0x68>
8111e874:	8407883a 	add	r3,r16,r16
8111e878:	18c7883a 	add	r3,r3,r3
8111e87c:	10c7883a 	add	r3,r2,r3
8111e880:	18800017 	ldw	r2,0(r3)
8111e884:	10001126 	beq	r2,zero,8111e8cc <_Balloc+0x84>
8111e888:	11000017 	ldw	r4,0(r2)
8111e88c:	19000015 	stw	r4,0(r3)
8111e890:	10000415 	stw	zero,16(r2)
8111e894:	10000315 	stw	zero,12(r2)
8111e898:	dfc00317 	ldw	ra,12(sp)
8111e89c:	dc800217 	ldw	r18,8(sp)
8111e8a0:	dc400117 	ldw	r17,4(sp)
8111e8a4:	dc000017 	ldw	r16,0(sp)
8111e8a8:	dec00404 	addi	sp,sp,16
8111e8ac:	f800283a 	ret
8111e8b0:	01800844 	movi	r6,33
8111e8b4:	01400104 	movi	r5,4
8111e8b8:	1124d700 	call	81124d70 <_calloc_r>
8111e8bc:	88801315 	stw	r2,76(r17)
8111e8c0:	103fec1e 	bne	r2,zero,8111e874 <__reset+0xfb0fe874>
8111e8c4:	0005883a 	mov	r2,zero
8111e8c8:	003ff306 	br	8111e898 <__reset+0xfb0fe898>
8111e8cc:	01400044 	movi	r5,1
8111e8d0:	2c24983a 	sll	r18,r5,r16
8111e8d4:	8809883a 	mov	r4,r17
8111e8d8:	91800144 	addi	r6,r18,5
8111e8dc:	318d883a 	add	r6,r6,r6
8111e8e0:	318d883a 	add	r6,r6,r6
8111e8e4:	1124d700 	call	81124d70 <_calloc_r>
8111e8e8:	103ff626 	beq	r2,zero,8111e8c4 <__reset+0xfb0fe8c4>
8111e8ec:	14000115 	stw	r16,4(r2)
8111e8f0:	14800215 	stw	r18,8(r2)
8111e8f4:	003fe606 	br	8111e890 <__reset+0xfb0fe890>

8111e8f8 <_Bfree>:
8111e8f8:	28000826 	beq	r5,zero,8111e91c <_Bfree+0x24>
8111e8fc:	28c00117 	ldw	r3,4(r5)
8111e900:	20801317 	ldw	r2,76(r4)
8111e904:	18c7883a 	add	r3,r3,r3
8111e908:	18c7883a 	add	r3,r3,r3
8111e90c:	10c5883a 	add	r2,r2,r3
8111e910:	10c00017 	ldw	r3,0(r2)
8111e914:	28c00015 	stw	r3,0(r5)
8111e918:	11400015 	stw	r5,0(r2)
8111e91c:	f800283a 	ret

8111e920 <__multadd>:
8111e920:	defffa04 	addi	sp,sp,-24
8111e924:	de00012e 	bgeu	sp,et,8111e92c <__multadd+0xc>
8111e928:	003b68fa 	trap	3
8111e92c:	0011883a 	mov	r8,zero
8111e930:	dc800315 	stw	r18,12(sp)
8111e934:	dc400215 	stw	r17,8(sp)
8111e938:	dc000115 	stw	r16,4(sp)
8111e93c:	2823883a 	mov	r17,r5
8111e940:	2c000417 	ldw	r16,16(r5)
8111e944:	dfc00515 	stw	ra,20(sp)
8111e948:	dcc00415 	stw	r19,16(sp)
8111e94c:	2025883a 	mov	r18,r4
8111e950:	29400504 	addi	r5,r5,20
8111e954:	28c00017 	ldw	r3,0(r5)
8111e958:	29400104 	addi	r5,r5,4
8111e95c:	42000044 	addi	r8,r8,1
8111e960:	18bfffcc 	andi	r2,r3,65535
8111e964:	1185383a 	mul	r2,r2,r6
8111e968:	1806d43a 	srli	r3,r3,16
8111e96c:	11cf883a 	add	r7,r2,r7
8111e970:	3808d43a 	srli	r4,r7,16
8111e974:	1987383a 	mul	r3,r3,r6
8111e978:	38bfffcc 	andi	r2,r7,65535
8111e97c:	1907883a 	add	r3,r3,r4
8111e980:	1808943a 	slli	r4,r3,16
8111e984:	180ed43a 	srli	r7,r3,16
8111e988:	2085883a 	add	r2,r4,r2
8111e98c:	28bfff15 	stw	r2,-4(r5)
8111e990:	443ff016 	blt	r8,r16,8111e954 <__reset+0xfb0fe954>
8111e994:	38000926 	beq	r7,zero,8111e9bc <__multadd+0x9c>
8111e998:	88800217 	ldw	r2,8(r17)
8111e99c:	80800f0e 	bge	r16,r2,8111e9dc <__multadd+0xbc>
8111e9a0:	80800144 	addi	r2,r16,5
8111e9a4:	1085883a 	add	r2,r2,r2
8111e9a8:	1085883a 	add	r2,r2,r2
8111e9ac:	8885883a 	add	r2,r17,r2
8111e9b0:	11c00015 	stw	r7,0(r2)
8111e9b4:	84000044 	addi	r16,r16,1
8111e9b8:	8c000415 	stw	r16,16(r17)
8111e9bc:	8805883a 	mov	r2,r17
8111e9c0:	dfc00517 	ldw	ra,20(sp)
8111e9c4:	dcc00417 	ldw	r19,16(sp)
8111e9c8:	dc800317 	ldw	r18,12(sp)
8111e9cc:	dc400217 	ldw	r17,8(sp)
8111e9d0:	dc000117 	ldw	r16,4(sp)
8111e9d4:	dec00604 	addi	sp,sp,24
8111e9d8:	f800283a 	ret
8111e9dc:	89400117 	ldw	r5,4(r17)
8111e9e0:	9009883a 	mov	r4,r18
8111e9e4:	d9c00015 	stw	r7,0(sp)
8111e9e8:	29400044 	addi	r5,r5,1
8111e9ec:	111e8480 	call	8111e848 <_Balloc>
8111e9f0:	89800417 	ldw	r6,16(r17)
8111e9f4:	89400304 	addi	r5,r17,12
8111e9f8:	11000304 	addi	r4,r2,12
8111e9fc:	31800084 	addi	r6,r6,2
8111ea00:	318d883a 	add	r6,r6,r6
8111ea04:	318d883a 	add	r6,r6,r6
8111ea08:	1027883a 	mov	r19,r2
8111ea0c:	11145f80 	call	811145f8 <memcpy>
8111ea10:	d9c00017 	ldw	r7,0(sp)
8111ea14:	88000a26 	beq	r17,zero,8111ea40 <__multadd+0x120>
8111ea18:	88c00117 	ldw	r3,4(r17)
8111ea1c:	90801317 	ldw	r2,76(r18)
8111ea20:	18c7883a 	add	r3,r3,r3
8111ea24:	18c7883a 	add	r3,r3,r3
8111ea28:	10c5883a 	add	r2,r2,r3
8111ea2c:	10c00017 	ldw	r3,0(r2)
8111ea30:	88c00015 	stw	r3,0(r17)
8111ea34:	14400015 	stw	r17,0(r2)
8111ea38:	9823883a 	mov	r17,r19
8111ea3c:	003fd806 	br	8111e9a0 <__reset+0xfb0fe9a0>
8111ea40:	9823883a 	mov	r17,r19
8111ea44:	003fd606 	br	8111e9a0 <__reset+0xfb0fe9a0>

8111ea48 <__s2b>:
8111ea48:	defff904 	addi	sp,sp,-28
8111ea4c:	de00012e 	bgeu	sp,et,8111ea54 <__s2b+0xc>
8111ea50:	003b68fa 	trap	3
8111ea54:	dc400115 	stw	r17,4(sp)
8111ea58:	dc000015 	stw	r16,0(sp)
8111ea5c:	2023883a 	mov	r17,r4
8111ea60:	2821883a 	mov	r16,r5
8111ea64:	39000204 	addi	r4,r7,8
8111ea68:	01400244 	movi	r5,9
8111ea6c:	dcc00315 	stw	r19,12(sp)
8111ea70:	dc800215 	stw	r18,8(sp)
8111ea74:	dfc00615 	stw	ra,24(sp)
8111ea78:	dd400515 	stw	r21,20(sp)
8111ea7c:	dd000415 	stw	r20,16(sp)
8111ea80:	3825883a 	mov	r18,r7
8111ea84:	3027883a 	mov	r19,r6
8111ea88:	1126b080 	call	81126b08 <__divsi3>
8111ea8c:	00c00044 	movi	r3,1
8111ea90:	000b883a 	mov	r5,zero
8111ea94:	1880030e 	bge	r3,r2,8111eaa4 <__s2b+0x5c>
8111ea98:	18c7883a 	add	r3,r3,r3
8111ea9c:	29400044 	addi	r5,r5,1
8111eaa0:	18bffd16 	blt	r3,r2,8111ea98 <__reset+0xfb0fea98>
8111eaa4:	8809883a 	mov	r4,r17
8111eaa8:	111e8480 	call	8111e848 <_Balloc>
8111eaac:	d8c00717 	ldw	r3,28(sp)
8111eab0:	10c00515 	stw	r3,20(r2)
8111eab4:	00c00044 	movi	r3,1
8111eab8:	10c00415 	stw	r3,16(r2)
8111eabc:	00c00244 	movi	r3,9
8111eac0:	1cc0210e 	bge	r3,r19,8111eb48 <__s2b+0x100>
8111eac4:	80eb883a 	add	r21,r16,r3
8111eac8:	a829883a 	mov	r20,r21
8111eacc:	84e1883a 	add	r16,r16,r19
8111ead0:	a1c00007 	ldb	r7,0(r20)
8111ead4:	01800284 	movi	r6,10
8111ead8:	a5000044 	addi	r20,r20,1
8111eadc:	100b883a 	mov	r5,r2
8111eae0:	39fff404 	addi	r7,r7,-48
8111eae4:	8809883a 	mov	r4,r17
8111eae8:	111e9200 	call	8111e920 <__multadd>
8111eaec:	a43ff81e 	bne	r20,r16,8111ead0 <__reset+0xfb0fead0>
8111eaf0:	ace1883a 	add	r16,r21,r19
8111eaf4:	843ffe04 	addi	r16,r16,-8
8111eaf8:	9c800a0e 	bge	r19,r18,8111eb24 <__s2b+0xdc>
8111eafc:	94e5c83a 	sub	r18,r18,r19
8111eb00:	84a5883a 	add	r18,r16,r18
8111eb04:	81c00007 	ldb	r7,0(r16)
8111eb08:	01800284 	movi	r6,10
8111eb0c:	84000044 	addi	r16,r16,1
8111eb10:	100b883a 	mov	r5,r2
8111eb14:	39fff404 	addi	r7,r7,-48
8111eb18:	8809883a 	mov	r4,r17
8111eb1c:	111e9200 	call	8111e920 <__multadd>
8111eb20:	84bff81e 	bne	r16,r18,8111eb04 <__reset+0xfb0feb04>
8111eb24:	dfc00617 	ldw	ra,24(sp)
8111eb28:	dd400517 	ldw	r21,20(sp)
8111eb2c:	dd000417 	ldw	r20,16(sp)
8111eb30:	dcc00317 	ldw	r19,12(sp)
8111eb34:	dc800217 	ldw	r18,8(sp)
8111eb38:	dc400117 	ldw	r17,4(sp)
8111eb3c:	dc000017 	ldw	r16,0(sp)
8111eb40:	dec00704 	addi	sp,sp,28
8111eb44:	f800283a 	ret
8111eb48:	84000284 	addi	r16,r16,10
8111eb4c:	1827883a 	mov	r19,r3
8111eb50:	003fe906 	br	8111eaf8 <__reset+0xfb0feaf8>

8111eb54 <__hi0bits>:
8111eb54:	20bfffec 	andhi	r2,r4,65535
8111eb58:	1000141e 	bne	r2,zero,8111ebac <__hi0bits+0x58>
8111eb5c:	2008943a 	slli	r4,r4,16
8111eb60:	00800404 	movi	r2,16
8111eb64:	20ffc02c 	andhi	r3,r4,65280
8111eb68:	1800021e 	bne	r3,zero,8111eb74 <__hi0bits+0x20>
8111eb6c:	2008923a 	slli	r4,r4,8
8111eb70:	10800204 	addi	r2,r2,8
8111eb74:	20fc002c 	andhi	r3,r4,61440
8111eb78:	1800021e 	bne	r3,zero,8111eb84 <__hi0bits+0x30>
8111eb7c:	2008913a 	slli	r4,r4,4
8111eb80:	10800104 	addi	r2,r2,4
8111eb84:	20f0002c 	andhi	r3,r4,49152
8111eb88:	1800031e 	bne	r3,zero,8111eb98 <__hi0bits+0x44>
8111eb8c:	2109883a 	add	r4,r4,r4
8111eb90:	10800084 	addi	r2,r2,2
8111eb94:	2109883a 	add	r4,r4,r4
8111eb98:	20000316 	blt	r4,zero,8111eba8 <__hi0bits+0x54>
8111eb9c:	2110002c 	andhi	r4,r4,16384
8111eba0:	2000041e 	bne	r4,zero,8111ebb4 <__hi0bits+0x60>
8111eba4:	00800804 	movi	r2,32
8111eba8:	f800283a 	ret
8111ebac:	0005883a 	mov	r2,zero
8111ebb0:	003fec06 	br	8111eb64 <__reset+0xfb0feb64>
8111ebb4:	10800044 	addi	r2,r2,1
8111ebb8:	f800283a 	ret

8111ebbc <__lo0bits>:
8111ebbc:	20c00017 	ldw	r3,0(r4)
8111ebc0:	188001cc 	andi	r2,r3,7
8111ebc4:	10000826 	beq	r2,zero,8111ebe8 <__lo0bits+0x2c>
8111ebc8:	1880004c 	andi	r2,r3,1
8111ebcc:	1000211e 	bne	r2,zero,8111ec54 <__lo0bits+0x98>
8111ebd0:	1880008c 	andi	r2,r3,2
8111ebd4:	1000211e 	bne	r2,zero,8111ec5c <__lo0bits+0xa0>
8111ebd8:	1806d0ba 	srli	r3,r3,2
8111ebdc:	00800084 	movi	r2,2
8111ebe0:	20c00015 	stw	r3,0(r4)
8111ebe4:	f800283a 	ret
8111ebe8:	18bfffcc 	andi	r2,r3,65535
8111ebec:	10001326 	beq	r2,zero,8111ec3c <__lo0bits+0x80>
8111ebf0:	0005883a 	mov	r2,zero
8111ebf4:	19403fcc 	andi	r5,r3,255
8111ebf8:	2800021e 	bne	r5,zero,8111ec04 <__lo0bits+0x48>
8111ebfc:	1806d23a 	srli	r3,r3,8
8111ec00:	10800204 	addi	r2,r2,8
8111ec04:	194003cc 	andi	r5,r3,15
8111ec08:	2800021e 	bne	r5,zero,8111ec14 <__lo0bits+0x58>
8111ec0c:	1806d13a 	srli	r3,r3,4
8111ec10:	10800104 	addi	r2,r2,4
8111ec14:	194000cc 	andi	r5,r3,3
8111ec18:	2800021e 	bne	r5,zero,8111ec24 <__lo0bits+0x68>
8111ec1c:	1806d0ba 	srli	r3,r3,2
8111ec20:	10800084 	addi	r2,r2,2
8111ec24:	1940004c 	andi	r5,r3,1
8111ec28:	2800081e 	bne	r5,zero,8111ec4c <__lo0bits+0x90>
8111ec2c:	1806d07a 	srli	r3,r3,1
8111ec30:	1800051e 	bne	r3,zero,8111ec48 <__lo0bits+0x8c>
8111ec34:	00800804 	movi	r2,32
8111ec38:	f800283a 	ret
8111ec3c:	1806d43a 	srli	r3,r3,16
8111ec40:	00800404 	movi	r2,16
8111ec44:	003feb06 	br	8111ebf4 <__reset+0xfb0febf4>
8111ec48:	10800044 	addi	r2,r2,1
8111ec4c:	20c00015 	stw	r3,0(r4)
8111ec50:	f800283a 	ret
8111ec54:	0005883a 	mov	r2,zero
8111ec58:	f800283a 	ret
8111ec5c:	1806d07a 	srli	r3,r3,1
8111ec60:	00800044 	movi	r2,1
8111ec64:	20c00015 	stw	r3,0(r4)
8111ec68:	f800283a 	ret

8111ec6c <__i2b>:
8111ec6c:	defffd04 	addi	sp,sp,-12
8111ec70:	de00012e 	bgeu	sp,et,8111ec78 <__i2b+0xc>
8111ec74:	003b68fa 	trap	3
8111ec78:	dc000015 	stw	r16,0(sp)
8111ec7c:	04000044 	movi	r16,1
8111ec80:	dc400115 	stw	r17,4(sp)
8111ec84:	2823883a 	mov	r17,r5
8111ec88:	800b883a 	mov	r5,r16
8111ec8c:	dfc00215 	stw	ra,8(sp)
8111ec90:	111e8480 	call	8111e848 <_Balloc>
8111ec94:	14400515 	stw	r17,20(r2)
8111ec98:	14000415 	stw	r16,16(r2)
8111ec9c:	dfc00217 	ldw	ra,8(sp)
8111eca0:	dc400117 	ldw	r17,4(sp)
8111eca4:	dc000017 	ldw	r16,0(sp)
8111eca8:	dec00304 	addi	sp,sp,12
8111ecac:	f800283a 	ret

8111ecb0 <__multiply>:
8111ecb0:	defffa04 	addi	sp,sp,-24
8111ecb4:	de00012e 	bgeu	sp,et,8111ecbc <__multiply+0xc>
8111ecb8:	003b68fa 	trap	3
8111ecbc:	dcc00315 	stw	r19,12(sp)
8111ecc0:	dc800215 	stw	r18,8(sp)
8111ecc4:	34c00417 	ldw	r19,16(r6)
8111ecc8:	2c800417 	ldw	r18,16(r5)
8111eccc:	dd000415 	stw	r20,16(sp)
8111ecd0:	dc400115 	stw	r17,4(sp)
8111ecd4:	dfc00515 	stw	ra,20(sp)
8111ecd8:	dc000015 	stw	r16,0(sp)
8111ecdc:	2829883a 	mov	r20,r5
8111ece0:	3023883a 	mov	r17,r6
8111ece4:	94c0050e 	bge	r18,r19,8111ecfc <__multiply+0x4c>
8111ece8:	9007883a 	mov	r3,r18
8111ecec:	3029883a 	mov	r20,r6
8111ecf0:	9825883a 	mov	r18,r19
8111ecf4:	2823883a 	mov	r17,r5
8111ecf8:	1827883a 	mov	r19,r3
8111ecfc:	a0800217 	ldw	r2,8(r20)
8111ed00:	94e1883a 	add	r16,r18,r19
8111ed04:	a1400117 	ldw	r5,4(r20)
8111ed08:	1400010e 	bge	r2,r16,8111ed10 <__multiply+0x60>
8111ed0c:	29400044 	addi	r5,r5,1
8111ed10:	111e8480 	call	8111e848 <_Balloc>
8111ed14:	8415883a 	add	r10,r16,r16
8111ed18:	12c00504 	addi	r11,r2,20
8111ed1c:	5295883a 	add	r10,r10,r10
8111ed20:	5a95883a 	add	r10,r11,r10
8111ed24:	5807883a 	mov	r3,r11
8111ed28:	5a80032e 	bgeu	r11,r10,8111ed38 <__multiply+0x88>
8111ed2c:	18000015 	stw	zero,0(r3)
8111ed30:	18c00104 	addi	r3,r3,4
8111ed34:	1abffd36 	bltu	r3,r10,8111ed2c <__reset+0xfb0fed2c>
8111ed38:	9ce7883a 	add	r19,r19,r19
8111ed3c:	94a5883a 	add	r18,r18,r18
8111ed40:	89800504 	addi	r6,r17,20
8111ed44:	9ce7883a 	add	r19,r19,r19
8111ed48:	a3400504 	addi	r13,r20,20
8111ed4c:	94a5883a 	add	r18,r18,r18
8111ed50:	34d9883a 	add	r12,r6,r19
8111ed54:	6c93883a 	add	r9,r13,r18
8111ed58:	3300422e 	bgeu	r6,r12,8111ee64 <__multiply+0x1b4>
8111ed5c:	37c00017 	ldw	ra,0(r6)
8111ed60:	fbffffcc 	andi	r15,ra,65535
8111ed64:	78001b26 	beq	r15,zero,8111edd4 <__multiply+0x124>
8111ed68:	5811883a 	mov	r8,r11
8111ed6c:	681d883a 	mov	r14,r13
8111ed70:	000f883a 	mov	r7,zero
8111ed74:	71000017 	ldw	r4,0(r14)
8111ed78:	40c00017 	ldw	r3,0(r8)
8111ed7c:	73800104 	addi	r14,r14,4
8111ed80:	217fffcc 	andi	r5,r4,65535
8111ed84:	2bcb383a 	mul	r5,r5,r15
8111ed88:	2008d43a 	srli	r4,r4,16
8111ed8c:	1c7fffcc 	andi	r17,r3,65535
8111ed90:	2c4b883a 	add	r5,r5,r17
8111ed94:	29cb883a 	add	r5,r5,r7
8111ed98:	23c9383a 	mul	r4,r4,r15
8111ed9c:	1806d43a 	srli	r3,r3,16
8111eda0:	280ed43a 	srli	r7,r5,16
8111eda4:	297fffcc 	andi	r5,r5,65535
8111eda8:	20c7883a 	add	r3,r4,r3
8111edac:	19c7883a 	add	r3,r3,r7
8111edb0:	1808943a 	slli	r4,r3,16
8111edb4:	4023883a 	mov	r17,r8
8111edb8:	180ed43a 	srli	r7,r3,16
8111edbc:	214ab03a 	or	r5,r4,r5
8111edc0:	41400015 	stw	r5,0(r8)
8111edc4:	42000104 	addi	r8,r8,4
8111edc8:	727fea36 	bltu	r14,r9,8111ed74 <__reset+0xfb0fed74>
8111edcc:	89c00115 	stw	r7,4(r17)
8111edd0:	37c00017 	ldw	ra,0(r6)
8111edd4:	f83ed43a 	srli	ra,ra,16
8111edd8:	f8001f26 	beq	ra,zero,8111ee58 <__multiply+0x1a8>
8111eddc:	58c00017 	ldw	r3,0(r11)
8111ede0:	681d883a 	mov	r14,r13
8111ede4:	581f883a 	mov	r15,r11
8111ede8:	1811883a 	mov	r8,r3
8111edec:	5825883a 	mov	r18,r11
8111edf0:	000f883a 	mov	r7,zero
8111edf4:	00000106 	br	8111edfc <__multiply+0x14c>
8111edf8:	8825883a 	mov	r18,r17
8111edfc:	7140000b 	ldhu	r5,0(r14)
8111ee00:	4010d43a 	srli	r8,r8,16
8111ee04:	193fffcc 	andi	r4,r3,65535
8111ee08:	2fcb383a 	mul	r5,r5,ra
8111ee0c:	7bc00104 	addi	r15,r15,4
8111ee10:	73800104 	addi	r14,r14,4
8111ee14:	2a0b883a 	add	r5,r5,r8
8111ee18:	29cb883a 	add	r5,r5,r7
8111ee1c:	2806943a 	slli	r3,r5,16
8111ee20:	94400104 	addi	r17,r18,4
8111ee24:	280ad43a 	srli	r5,r5,16
8111ee28:	1908b03a 	or	r4,r3,r4
8111ee2c:	793fff15 	stw	r4,-4(r15)
8111ee30:	70ffff17 	ldw	r3,-4(r14)
8111ee34:	8a000017 	ldw	r8,0(r17)
8111ee38:	1806d43a 	srli	r3,r3,16
8111ee3c:	413fffcc 	andi	r4,r8,65535
8111ee40:	1fc7383a 	mul	r3,r3,ra
8111ee44:	1907883a 	add	r3,r3,r4
8111ee48:	1947883a 	add	r3,r3,r5
8111ee4c:	180ed43a 	srli	r7,r3,16
8111ee50:	727fe936 	bltu	r14,r9,8111edf8 <__reset+0xfb0fedf8>
8111ee54:	90c00115 	stw	r3,4(r18)
8111ee58:	31800104 	addi	r6,r6,4
8111ee5c:	5ac00104 	addi	r11,r11,4
8111ee60:	333fbe36 	bltu	r6,r12,8111ed5c <__reset+0xfb0fed5c>
8111ee64:	0400090e 	bge	zero,r16,8111ee8c <__multiply+0x1dc>
8111ee68:	50ffff17 	ldw	r3,-4(r10)
8111ee6c:	52bfff04 	addi	r10,r10,-4
8111ee70:	18000326 	beq	r3,zero,8111ee80 <__multiply+0x1d0>
8111ee74:	00000506 	br	8111ee8c <__multiply+0x1dc>
8111ee78:	50c00017 	ldw	r3,0(r10)
8111ee7c:	1800031e 	bne	r3,zero,8111ee8c <__multiply+0x1dc>
8111ee80:	843fffc4 	addi	r16,r16,-1
8111ee84:	52bfff04 	addi	r10,r10,-4
8111ee88:	803ffb1e 	bne	r16,zero,8111ee78 <__reset+0xfb0fee78>
8111ee8c:	14000415 	stw	r16,16(r2)
8111ee90:	dfc00517 	ldw	ra,20(sp)
8111ee94:	dd000417 	ldw	r20,16(sp)
8111ee98:	dcc00317 	ldw	r19,12(sp)
8111ee9c:	dc800217 	ldw	r18,8(sp)
8111eea0:	dc400117 	ldw	r17,4(sp)
8111eea4:	dc000017 	ldw	r16,0(sp)
8111eea8:	dec00604 	addi	sp,sp,24
8111eeac:	f800283a 	ret

8111eeb0 <__pow5mult>:
8111eeb0:	defffa04 	addi	sp,sp,-24
8111eeb4:	de00012e 	bgeu	sp,et,8111eebc <__pow5mult+0xc>
8111eeb8:	003b68fa 	trap	3
8111eebc:	308000cc 	andi	r2,r6,3
8111eec0:	dcc00315 	stw	r19,12(sp)
8111eec4:	dc000015 	stw	r16,0(sp)
8111eec8:	dfc00515 	stw	ra,20(sp)
8111eecc:	dd000415 	stw	r20,16(sp)
8111eed0:	dc800215 	stw	r18,8(sp)
8111eed4:	dc400115 	stw	r17,4(sp)
8111eed8:	3021883a 	mov	r16,r6
8111eedc:	2027883a 	mov	r19,r4
8111eee0:	10002f1e 	bne	r2,zero,8111efa0 <__pow5mult+0xf0>
8111eee4:	2825883a 	mov	r18,r5
8111eee8:	8021d0ba 	srai	r16,r16,2
8111eeec:	80001a26 	beq	r16,zero,8111ef58 <__pow5mult+0xa8>
8111eef0:	9c401217 	ldw	r17,72(r19)
8111eef4:	8800061e 	bne	r17,zero,8111ef10 <__pow5mult+0x60>
8111eef8:	00003406 	br	8111efcc <__pow5mult+0x11c>
8111eefc:	8021d07a 	srai	r16,r16,1
8111ef00:	80001526 	beq	r16,zero,8111ef58 <__pow5mult+0xa8>
8111ef04:	88800017 	ldw	r2,0(r17)
8111ef08:	10001c26 	beq	r2,zero,8111ef7c <__pow5mult+0xcc>
8111ef0c:	1023883a 	mov	r17,r2
8111ef10:	8080004c 	andi	r2,r16,1
8111ef14:	103ff926 	beq	r2,zero,8111eefc <__reset+0xfb0feefc>
8111ef18:	880d883a 	mov	r6,r17
8111ef1c:	900b883a 	mov	r5,r18
8111ef20:	9809883a 	mov	r4,r19
8111ef24:	111ecb00 	call	8111ecb0 <__multiply>
8111ef28:	90001b26 	beq	r18,zero,8111ef98 <__pow5mult+0xe8>
8111ef2c:	91000117 	ldw	r4,4(r18)
8111ef30:	98c01317 	ldw	r3,76(r19)
8111ef34:	8021d07a 	srai	r16,r16,1
8111ef38:	2109883a 	add	r4,r4,r4
8111ef3c:	2109883a 	add	r4,r4,r4
8111ef40:	1907883a 	add	r3,r3,r4
8111ef44:	19000017 	ldw	r4,0(r3)
8111ef48:	91000015 	stw	r4,0(r18)
8111ef4c:	1c800015 	stw	r18,0(r3)
8111ef50:	1025883a 	mov	r18,r2
8111ef54:	803feb1e 	bne	r16,zero,8111ef04 <__reset+0xfb0fef04>
8111ef58:	9005883a 	mov	r2,r18
8111ef5c:	dfc00517 	ldw	ra,20(sp)
8111ef60:	dd000417 	ldw	r20,16(sp)
8111ef64:	dcc00317 	ldw	r19,12(sp)
8111ef68:	dc800217 	ldw	r18,8(sp)
8111ef6c:	dc400117 	ldw	r17,4(sp)
8111ef70:	dc000017 	ldw	r16,0(sp)
8111ef74:	dec00604 	addi	sp,sp,24
8111ef78:	f800283a 	ret
8111ef7c:	880d883a 	mov	r6,r17
8111ef80:	880b883a 	mov	r5,r17
8111ef84:	9809883a 	mov	r4,r19
8111ef88:	111ecb00 	call	8111ecb0 <__multiply>
8111ef8c:	88800015 	stw	r2,0(r17)
8111ef90:	10000015 	stw	zero,0(r2)
8111ef94:	003fdd06 	br	8111ef0c <__reset+0xfb0fef0c>
8111ef98:	1025883a 	mov	r18,r2
8111ef9c:	003fd706 	br	8111eefc <__reset+0xfb0feefc>
8111efa0:	10bfffc4 	addi	r2,r2,-1
8111efa4:	1085883a 	add	r2,r2,r2
8111efa8:	00e04534 	movhi	r3,33044
8111efac:	18c7b004 	addi	r3,r3,7872
8111efb0:	1085883a 	add	r2,r2,r2
8111efb4:	1885883a 	add	r2,r3,r2
8111efb8:	11800017 	ldw	r6,0(r2)
8111efbc:	000f883a 	mov	r7,zero
8111efc0:	111e9200 	call	8111e920 <__multadd>
8111efc4:	1025883a 	mov	r18,r2
8111efc8:	003fc706 	br	8111eee8 <__reset+0xfb0feee8>
8111efcc:	05000044 	movi	r20,1
8111efd0:	a00b883a 	mov	r5,r20
8111efd4:	9809883a 	mov	r4,r19
8111efd8:	111e8480 	call	8111e848 <_Balloc>
8111efdc:	1023883a 	mov	r17,r2
8111efe0:	00809c44 	movi	r2,625
8111efe4:	88800515 	stw	r2,20(r17)
8111efe8:	8d000415 	stw	r20,16(r17)
8111efec:	9c401215 	stw	r17,72(r19)
8111eff0:	88000015 	stw	zero,0(r17)
8111eff4:	003fc606 	br	8111ef10 <__reset+0xfb0fef10>

8111eff8 <__lshift>:
8111eff8:	defff904 	addi	sp,sp,-28
8111effc:	de00012e 	bgeu	sp,et,8111f004 <__lshift+0xc>
8111f000:	003b68fa 	trap	3
8111f004:	dd400515 	stw	r21,20(sp)
8111f008:	dcc00315 	stw	r19,12(sp)
8111f00c:	302bd17a 	srai	r21,r6,5
8111f010:	2cc00417 	ldw	r19,16(r5)
8111f014:	28800217 	ldw	r2,8(r5)
8111f018:	dd000415 	stw	r20,16(sp)
8111f01c:	ace7883a 	add	r19,r21,r19
8111f020:	dc800215 	stw	r18,8(sp)
8111f024:	dc400115 	stw	r17,4(sp)
8111f028:	dc000015 	stw	r16,0(sp)
8111f02c:	dfc00615 	stw	ra,24(sp)
8111f030:	9c000044 	addi	r16,r19,1
8111f034:	2823883a 	mov	r17,r5
8111f038:	3029883a 	mov	r20,r6
8111f03c:	2025883a 	mov	r18,r4
8111f040:	29400117 	ldw	r5,4(r5)
8111f044:	1400030e 	bge	r2,r16,8111f054 <__lshift+0x5c>
8111f048:	1085883a 	add	r2,r2,r2
8111f04c:	29400044 	addi	r5,r5,1
8111f050:	143ffd16 	blt	r2,r16,8111f048 <__reset+0xfb0ff048>
8111f054:	9009883a 	mov	r4,r18
8111f058:	111e8480 	call	8111e848 <_Balloc>
8111f05c:	10c00504 	addi	r3,r2,20
8111f060:	0540070e 	bge	zero,r21,8111f080 <__lshift+0x88>
8111f064:	ad6b883a 	add	r21,r21,r21
8111f068:	ad6b883a 	add	r21,r21,r21
8111f06c:	1809883a 	mov	r4,r3
8111f070:	1d47883a 	add	r3,r3,r21
8111f074:	20000015 	stw	zero,0(r4)
8111f078:	21000104 	addi	r4,r4,4
8111f07c:	193ffd1e 	bne	r3,r4,8111f074 <__reset+0xfb0ff074>
8111f080:	8a000417 	ldw	r8,16(r17)
8111f084:	89000504 	addi	r4,r17,20
8111f088:	a18007cc 	andi	r6,r20,31
8111f08c:	4211883a 	add	r8,r8,r8
8111f090:	4211883a 	add	r8,r8,r8
8111f094:	2211883a 	add	r8,r4,r8
8111f098:	30002326 	beq	r6,zero,8111f128 <__lshift+0x130>
8111f09c:	02400804 	movi	r9,32
8111f0a0:	4993c83a 	sub	r9,r9,r6
8111f0a4:	000b883a 	mov	r5,zero
8111f0a8:	21c00017 	ldw	r7,0(r4)
8111f0ac:	1815883a 	mov	r10,r3
8111f0b0:	18c00104 	addi	r3,r3,4
8111f0b4:	398e983a 	sll	r7,r7,r6
8111f0b8:	21000104 	addi	r4,r4,4
8111f0bc:	394ab03a 	or	r5,r7,r5
8111f0c0:	197fff15 	stw	r5,-4(r3)
8111f0c4:	217fff17 	ldw	r5,-4(r4)
8111f0c8:	2a4ad83a 	srl	r5,r5,r9
8111f0cc:	223ff636 	bltu	r4,r8,8111f0a8 <__reset+0xfb0ff0a8>
8111f0d0:	51400115 	stw	r5,4(r10)
8111f0d4:	28001a1e 	bne	r5,zero,8111f140 <__lshift+0x148>
8111f0d8:	843fffc4 	addi	r16,r16,-1
8111f0dc:	14000415 	stw	r16,16(r2)
8111f0e0:	88000826 	beq	r17,zero,8111f104 <__lshift+0x10c>
8111f0e4:	89000117 	ldw	r4,4(r17)
8111f0e8:	90c01317 	ldw	r3,76(r18)
8111f0ec:	2109883a 	add	r4,r4,r4
8111f0f0:	2109883a 	add	r4,r4,r4
8111f0f4:	1907883a 	add	r3,r3,r4
8111f0f8:	19000017 	ldw	r4,0(r3)
8111f0fc:	89000015 	stw	r4,0(r17)
8111f100:	1c400015 	stw	r17,0(r3)
8111f104:	dfc00617 	ldw	ra,24(sp)
8111f108:	dd400517 	ldw	r21,20(sp)
8111f10c:	dd000417 	ldw	r20,16(sp)
8111f110:	dcc00317 	ldw	r19,12(sp)
8111f114:	dc800217 	ldw	r18,8(sp)
8111f118:	dc400117 	ldw	r17,4(sp)
8111f11c:	dc000017 	ldw	r16,0(sp)
8111f120:	dec00704 	addi	sp,sp,28
8111f124:	f800283a 	ret
8111f128:	21400017 	ldw	r5,0(r4)
8111f12c:	18c00104 	addi	r3,r3,4
8111f130:	21000104 	addi	r4,r4,4
8111f134:	197fff15 	stw	r5,-4(r3)
8111f138:	223ffb36 	bltu	r4,r8,8111f128 <__reset+0xfb0ff128>
8111f13c:	003fe606 	br	8111f0d8 <__reset+0xfb0ff0d8>
8111f140:	9c000084 	addi	r16,r19,2
8111f144:	003fe406 	br	8111f0d8 <__reset+0xfb0ff0d8>

8111f148 <__mcmp>:
8111f148:	20800417 	ldw	r2,16(r4)
8111f14c:	28c00417 	ldw	r3,16(r5)
8111f150:	10c5c83a 	sub	r2,r2,r3
8111f154:	1000111e 	bne	r2,zero,8111f19c <__mcmp+0x54>
8111f158:	18c7883a 	add	r3,r3,r3
8111f15c:	18c7883a 	add	r3,r3,r3
8111f160:	21000504 	addi	r4,r4,20
8111f164:	29400504 	addi	r5,r5,20
8111f168:	20c5883a 	add	r2,r4,r3
8111f16c:	28cb883a 	add	r5,r5,r3
8111f170:	00000106 	br	8111f178 <__mcmp+0x30>
8111f174:	20800a2e 	bgeu	r4,r2,8111f1a0 <__mcmp+0x58>
8111f178:	10bfff04 	addi	r2,r2,-4
8111f17c:	297fff04 	addi	r5,r5,-4
8111f180:	11800017 	ldw	r6,0(r2)
8111f184:	28c00017 	ldw	r3,0(r5)
8111f188:	30fffa26 	beq	r6,r3,8111f174 <__reset+0xfb0ff174>
8111f18c:	30c00236 	bltu	r6,r3,8111f198 <__mcmp+0x50>
8111f190:	00800044 	movi	r2,1
8111f194:	f800283a 	ret
8111f198:	00bfffc4 	movi	r2,-1
8111f19c:	f800283a 	ret
8111f1a0:	0005883a 	mov	r2,zero
8111f1a4:	f800283a 	ret

8111f1a8 <__mdiff>:
8111f1a8:	defffa04 	addi	sp,sp,-24
8111f1ac:	de00012e 	bgeu	sp,et,8111f1b4 <__mdiff+0xc>
8111f1b0:	003b68fa 	trap	3
8111f1b4:	28c00417 	ldw	r3,16(r5)
8111f1b8:	30800417 	ldw	r2,16(r6)
8111f1bc:	dcc00315 	stw	r19,12(sp)
8111f1c0:	dc800215 	stw	r18,8(sp)
8111f1c4:	dfc00515 	stw	ra,20(sp)
8111f1c8:	dd000415 	stw	r20,16(sp)
8111f1cc:	dc400115 	stw	r17,4(sp)
8111f1d0:	dc000015 	stw	r16,0(sp)
8111f1d4:	1887c83a 	sub	r3,r3,r2
8111f1d8:	2825883a 	mov	r18,r5
8111f1dc:	3027883a 	mov	r19,r6
8111f1e0:	1800141e 	bne	r3,zero,8111f234 <__mdiff+0x8c>
8111f1e4:	1085883a 	add	r2,r2,r2
8111f1e8:	1085883a 	add	r2,r2,r2
8111f1ec:	2a000504 	addi	r8,r5,20
8111f1f0:	34000504 	addi	r16,r6,20
8111f1f4:	4087883a 	add	r3,r8,r2
8111f1f8:	8085883a 	add	r2,r16,r2
8111f1fc:	00000106 	br	8111f204 <__mdiff+0x5c>
8111f200:	40c0592e 	bgeu	r8,r3,8111f368 <__mdiff+0x1c0>
8111f204:	18ffff04 	addi	r3,r3,-4
8111f208:	10bfff04 	addi	r2,r2,-4
8111f20c:	19c00017 	ldw	r7,0(r3)
8111f210:	11400017 	ldw	r5,0(r2)
8111f214:	397ffa26 	beq	r7,r5,8111f200 <__reset+0xfb0ff200>
8111f218:	3940592e 	bgeu	r7,r5,8111f380 <__mdiff+0x1d8>
8111f21c:	9005883a 	mov	r2,r18
8111f220:	4023883a 	mov	r17,r8
8111f224:	9825883a 	mov	r18,r19
8111f228:	05000044 	movi	r20,1
8111f22c:	1027883a 	mov	r19,r2
8111f230:	00000406 	br	8111f244 <__mdiff+0x9c>
8111f234:	18005616 	blt	r3,zero,8111f390 <__mdiff+0x1e8>
8111f238:	34400504 	addi	r17,r6,20
8111f23c:	2c000504 	addi	r16,r5,20
8111f240:	0029883a 	mov	r20,zero
8111f244:	91400117 	ldw	r5,4(r18)
8111f248:	111e8480 	call	8111e848 <_Balloc>
8111f24c:	92400417 	ldw	r9,16(r18)
8111f250:	9b000417 	ldw	r12,16(r19)
8111f254:	12c00504 	addi	r11,r2,20
8111f258:	4a51883a 	add	r8,r9,r9
8111f25c:	6319883a 	add	r12,r12,r12
8111f260:	4211883a 	add	r8,r8,r8
8111f264:	6319883a 	add	r12,r12,r12
8111f268:	15000315 	stw	r20,12(r2)
8111f26c:	8211883a 	add	r8,r16,r8
8111f270:	8b19883a 	add	r12,r17,r12
8111f274:	0007883a 	mov	r3,zero
8111f278:	81400017 	ldw	r5,0(r16)
8111f27c:	89c00017 	ldw	r7,0(r17)
8111f280:	59800104 	addi	r6,r11,4
8111f284:	293fffcc 	andi	r4,r5,65535
8111f288:	20c7883a 	add	r3,r4,r3
8111f28c:	393fffcc 	andi	r4,r7,65535
8111f290:	1909c83a 	sub	r4,r3,r4
8111f294:	280ad43a 	srli	r5,r5,16
8111f298:	380ed43a 	srli	r7,r7,16
8111f29c:	2007d43a 	srai	r3,r4,16
8111f2a0:	213fffcc 	andi	r4,r4,65535
8111f2a4:	29cbc83a 	sub	r5,r5,r7
8111f2a8:	28c7883a 	add	r3,r5,r3
8111f2ac:	180a943a 	slli	r5,r3,16
8111f2b0:	8c400104 	addi	r17,r17,4
8111f2b4:	84000104 	addi	r16,r16,4
8111f2b8:	2908b03a 	or	r4,r5,r4
8111f2bc:	59000015 	stw	r4,0(r11)
8111f2c0:	1807d43a 	srai	r3,r3,16
8111f2c4:	3015883a 	mov	r10,r6
8111f2c8:	3017883a 	mov	r11,r6
8111f2cc:	8b3fea36 	bltu	r17,r12,8111f278 <__reset+0xfb0ff278>
8111f2d0:	8200162e 	bgeu	r16,r8,8111f32c <__mdiff+0x184>
8111f2d4:	8017883a 	mov	r11,r16
8111f2d8:	59400017 	ldw	r5,0(r11)
8111f2dc:	31800104 	addi	r6,r6,4
8111f2e0:	5ac00104 	addi	r11,r11,4
8111f2e4:	293fffcc 	andi	r4,r5,65535
8111f2e8:	20c7883a 	add	r3,r4,r3
8111f2ec:	280ed43a 	srli	r7,r5,16
8111f2f0:	180bd43a 	srai	r5,r3,16
8111f2f4:	193fffcc 	andi	r4,r3,65535
8111f2f8:	3947883a 	add	r3,r7,r5
8111f2fc:	180a943a 	slli	r5,r3,16
8111f300:	1807d43a 	srai	r3,r3,16
8111f304:	2908b03a 	or	r4,r5,r4
8111f308:	313fff15 	stw	r4,-4(r6)
8111f30c:	5a3ff236 	bltu	r11,r8,8111f2d8 <__reset+0xfb0ff2d8>
8111f310:	0406303a 	nor	r3,zero,r16
8111f314:	1a07883a 	add	r3,r3,r8
8111f318:	1806d0ba 	srli	r3,r3,2
8111f31c:	18c00044 	addi	r3,r3,1
8111f320:	18c7883a 	add	r3,r3,r3
8111f324:	18c7883a 	add	r3,r3,r3
8111f328:	50d5883a 	add	r10,r10,r3
8111f32c:	50ffff04 	addi	r3,r10,-4
8111f330:	2000041e 	bne	r4,zero,8111f344 <__mdiff+0x19c>
8111f334:	18ffff04 	addi	r3,r3,-4
8111f338:	19000017 	ldw	r4,0(r3)
8111f33c:	4a7fffc4 	addi	r9,r9,-1
8111f340:	203ffc26 	beq	r4,zero,8111f334 <__reset+0xfb0ff334>
8111f344:	12400415 	stw	r9,16(r2)
8111f348:	dfc00517 	ldw	ra,20(sp)
8111f34c:	dd000417 	ldw	r20,16(sp)
8111f350:	dcc00317 	ldw	r19,12(sp)
8111f354:	dc800217 	ldw	r18,8(sp)
8111f358:	dc400117 	ldw	r17,4(sp)
8111f35c:	dc000017 	ldw	r16,0(sp)
8111f360:	dec00604 	addi	sp,sp,24
8111f364:	f800283a 	ret
8111f368:	000b883a 	mov	r5,zero
8111f36c:	111e8480 	call	8111e848 <_Balloc>
8111f370:	00c00044 	movi	r3,1
8111f374:	10c00415 	stw	r3,16(r2)
8111f378:	10000515 	stw	zero,20(r2)
8111f37c:	003ff206 	br	8111f348 <__reset+0xfb0ff348>
8111f380:	8023883a 	mov	r17,r16
8111f384:	0029883a 	mov	r20,zero
8111f388:	4021883a 	mov	r16,r8
8111f38c:	003fad06 	br	8111f244 <__reset+0xfb0ff244>
8111f390:	9005883a 	mov	r2,r18
8111f394:	94400504 	addi	r17,r18,20
8111f398:	9c000504 	addi	r16,r19,20
8111f39c:	9825883a 	mov	r18,r19
8111f3a0:	05000044 	movi	r20,1
8111f3a4:	1027883a 	mov	r19,r2
8111f3a8:	003fa606 	br	8111f244 <__reset+0xfb0ff244>

8111f3ac <__ulp>:
8111f3ac:	295ffc2c 	andhi	r5,r5,32752
8111f3b0:	00bf3034 	movhi	r2,64704
8111f3b4:	2887883a 	add	r3,r5,r2
8111f3b8:	00c0020e 	bge	zero,r3,8111f3c4 <__ulp+0x18>
8111f3bc:	0005883a 	mov	r2,zero
8111f3c0:	f800283a 	ret
8111f3c4:	00c7c83a 	sub	r3,zero,r3
8111f3c8:	1807d53a 	srai	r3,r3,20
8111f3cc:	008004c4 	movi	r2,19
8111f3d0:	10c00b0e 	bge	r2,r3,8111f400 <__ulp+0x54>
8111f3d4:	18bffb04 	addi	r2,r3,-20
8111f3d8:	01000784 	movi	r4,30
8111f3dc:	0007883a 	mov	r3,zero
8111f3e0:	20800516 	blt	r4,r2,8111f3f8 <__ulp+0x4c>
8111f3e4:	010007c4 	movi	r4,31
8111f3e8:	2089c83a 	sub	r4,r4,r2
8111f3ec:	00800044 	movi	r2,1
8111f3f0:	1104983a 	sll	r2,r2,r4
8111f3f4:	f800283a 	ret
8111f3f8:	00800044 	movi	r2,1
8111f3fc:	f800283a 	ret
8111f400:	01400234 	movhi	r5,8
8111f404:	28c7d83a 	sra	r3,r5,r3
8111f408:	0005883a 	mov	r2,zero
8111f40c:	f800283a 	ret

8111f410 <__b2d>:
8111f410:	defffa04 	addi	sp,sp,-24
8111f414:	de00012e 	bgeu	sp,et,8111f41c <__b2d+0xc>
8111f418:	003b68fa 	trap	3
8111f41c:	dc000015 	stw	r16,0(sp)
8111f420:	24000417 	ldw	r16,16(r4)
8111f424:	dc400115 	stw	r17,4(sp)
8111f428:	24400504 	addi	r17,r4,20
8111f42c:	8421883a 	add	r16,r16,r16
8111f430:	8421883a 	add	r16,r16,r16
8111f434:	8c21883a 	add	r16,r17,r16
8111f438:	dc800215 	stw	r18,8(sp)
8111f43c:	84bfff17 	ldw	r18,-4(r16)
8111f440:	dd000415 	stw	r20,16(sp)
8111f444:	dcc00315 	stw	r19,12(sp)
8111f448:	9009883a 	mov	r4,r18
8111f44c:	2829883a 	mov	r20,r5
8111f450:	dfc00515 	stw	ra,20(sp)
8111f454:	111eb540 	call	8111eb54 <__hi0bits>
8111f458:	00c00804 	movi	r3,32
8111f45c:	1889c83a 	sub	r4,r3,r2
8111f460:	a1000015 	stw	r4,0(r20)
8111f464:	01000284 	movi	r4,10
8111f468:	84ffff04 	addi	r19,r16,-4
8111f46c:	20801216 	blt	r4,r2,8111f4b8 <__b2d+0xa8>
8111f470:	018002c4 	movi	r6,11
8111f474:	308dc83a 	sub	r6,r6,r2
8111f478:	9186d83a 	srl	r3,r18,r6
8111f47c:	18cffc34 	orhi	r3,r3,16368
8111f480:	8cc0212e 	bgeu	r17,r19,8111f508 <__b2d+0xf8>
8111f484:	813ffe17 	ldw	r4,-8(r16)
8111f488:	218cd83a 	srl	r6,r4,r6
8111f48c:	10800544 	addi	r2,r2,21
8111f490:	9084983a 	sll	r2,r18,r2
8111f494:	1184b03a 	or	r2,r2,r6
8111f498:	dfc00517 	ldw	ra,20(sp)
8111f49c:	dd000417 	ldw	r20,16(sp)
8111f4a0:	dcc00317 	ldw	r19,12(sp)
8111f4a4:	dc800217 	ldw	r18,8(sp)
8111f4a8:	dc400117 	ldw	r17,4(sp)
8111f4ac:	dc000017 	ldw	r16,0(sp)
8111f4b0:	dec00604 	addi	sp,sp,24
8111f4b4:	f800283a 	ret
8111f4b8:	8cc00f2e 	bgeu	r17,r19,8111f4f8 <__b2d+0xe8>
8111f4bc:	117ffd44 	addi	r5,r2,-11
8111f4c0:	80bffe17 	ldw	r2,-8(r16)
8111f4c4:	28000e26 	beq	r5,zero,8111f500 <__b2d+0xf0>
8111f4c8:	1949c83a 	sub	r4,r3,r5
8111f4cc:	9164983a 	sll	r18,r18,r5
8111f4d0:	1106d83a 	srl	r3,r2,r4
8111f4d4:	81bffe04 	addi	r6,r16,-8
8111f4d8:	948ffc34 	orhi	r18,r18,16368
8111f4dc:	90c6b03a 	or	r3,r18,r3
8111f4e0:	89800e2e 	bgeu	r17,r6,8111f51c <__b2d+0x10c>
8111f4e4:	81bffd17 	ldw	r6,-12(r16)
8111f4e8:	1144983a 	sll	r2,r2,r5
8111f4ec:	310ad83a 	srl	r5,r6,r4
8111f4f0:	2884b03a 	or	r2,r5,r2
8111f4f4:	003fe806 	br	8111f498 <__reset+0xfb0ff498>
8111f4f8:	10bffd44 	addi	r2,r2,-11
8111f4fc:	1000041e 	bne	r2,zero,8111f510 <__b2d+0x100>
8111f500:	90cffc34 	orhi	r3,r18,16368
8111f504:	003fe406 	br	8111f498 <__reset+0xfb0ff498>
8111f508:	000d883a 	mov	r6,zero
8111f50c:	003fdf06 	br	8111f48c <__reset+0xfb0ff48c>
8111f510:	90a4983a 	sll	r18,r18,r2
8111f514:	0005883a 	mov	r2,zero
8111f518:	003ff906 	br	8111f500 <__reset+0xfb0ff500>
8111f51c:	1144983a 	sll	r2,r2,r5
8111f520:	003fdd06 	br	8111f498 <__reset+0xfb0ff498>

8111f524 <__d2b>:
8111f524:	defff804 	addi	sp,sp,-32
8111f528:	de00012e 	bgeu	sp,et,8111f530 <__d2b+0xc>
8111f52c:	003b68fa 	trap	3
8111f530:	dc000215 	stw	r16,8(sp)
8111f534:	3021883a 	mov	r16,r6
8111f538:	dc400315 	stw	r17,12(sp)
8111f53c:	8022907a 	slli	r17,r16,1
8111f540:	dd000615 	stw	r20,24(sp)
8111f544:	2829883a 	mov	r20,r5
8111f548:	01400044 	movi	r5,1
8111f54c:	dcc00515 	stw	r19,20(sp)
8111f550:	dc800415 	stw	r18,16(sp)
8111f554:	dfc00715 	stw	ra,28(sp)
8111f558:	3825883a 	mov	r18,r7
8111f55c:	8822d57a 	srli	r17,r17,21
8111f560:	111e8480 	call	8111e848 <_Balloc>
8111f564:	1027883a 	mov	r19,r2
8111f568:	00800434 	movhi	r2,16
8111f56c:	10bfffc4 	addi	r2,r2,-1
8111f570:	808c703a 	and	r6,r16,r2
8111f574:	88000126 	beq	r17,zero,8111f57c <__d2b+0x58>
8111f578:	31800434 	orhi	r6,r6,16
8111f57c:	d9800015 	stw	r6,0(sp)
8111f580:	a0002426 	beq	r20,zero,8111f614 <__d2b+0xf0>
8111f584:	d9000104 	addi	r4,sp,4
8111f588:	dd000115 	stw	r20,4(sp)
8111f58c:	111ebbc0 	call	8111ebbc <__lo0bits>
8111f590:	d8c00017 	ldw	r3,0(sp)
8111f594:	10002f1e 	bne	r2,zero,8111f654 <__d2b+0x130>
8111f598:	d9000117 	ldw	r4,4(sp)
8111f59c:	99000515 	stw	r4,20(r19)
8111f5a0:	1821003a 	cmpeq	r16,r3,zero
8111f5a4:	01000084 	movi	r4,2
8111f5a8:	2421c83a 	sub	r16,r4,r16
8111f5ac:	98c00615 	stw	r3,24(r19)
8111f5b0:	9c000415 	stw	r16,16(r19)
8111f5b4:	88001f1e 	bne	r17,zero,8111f634 <__d2b+0x110>
8111f5b8:	10bef384 	addi	r2,r2,-1074
8111f5bc:	90800015 	stw	r2,0(r18)
8111f5c0:	00900034 	movhi	r2,16384
8111f5c4:	10bfffc4 	addi	r2,r2,-1
8111f5c8:	8085883a 	add	r2,r16,r2
8111f5cc:	1085883a 	add	r2,r2,r2
8111f5d0:	1085883a 	add	r2,r2,r2
8111f5d4:	9885883a 	add	r2,r19,r2
8111f5d8:	11000517 	ldw	r4,20(r2)
8111f5dc:	8020917a 	slli	r16,r16,5
8111f5e0:	111eb540 	call	8111eb54 <__hi0bits>
8111f5e4:	d8c00817 	ldw	r3,32(sp)
8111f5e8:	8085c83a 	sub	r2,r16,r2
8111f5ec:	18800015 	stw	r2,0(r3)
8111f5f0:	9805883a 	mov	r2,r19
8111f5f4:	dfc00717 	ldw	ra,28(sp)
8111f5f8:	dd000617 	ldw	r20,24(sp)
8111f5fc:	dcc00517 	ldw	r19,20(sp)
8111f600:	dc800417 	ldw	r18,16(sp)
8111f604:	dc400317 	ldw	r17,12(sp)
8111f608:	dc000217 	ldw	r16,8(sp)
8111f60c:	dec00804 	addi	sp,sp,32
8111f610:	f800283a 	ret
8111f614:	d809883a 	mov	r4,sp
8111f618:	111ebbc0 	call	8111ebbc <__lo0bits>
8111f61c:	d8c00017 	ldw	r3,0(sp)
8111f620:	04000044 	movi	r16,1
8111f624:	9c000415 	stw	r16,16(r19)
8111f628:	98c00515 	stw	r3,20(r19)
8111f62c:	10800804 	addi	r2,r2,32
8111f630:	883fe126 	beq	r17,zero,8111f5b8 <__reset+0xfb0ff5b8>
8111f634:	00c00d44 	movi	r3,53
8111f638:	8c7ef344 	addi	r17,r17,-1075
8111f63c:	88a3883a 	add	r17,r17,r2
8111f640:	1885c83a 	sub	r2,r3,r2
8111f644:	d8c00817 	ldw	r3,32(sp)
8111f648:	94400015 	stw	r17,0(r18)
8111f64c:	18800015 	stw	r2,0(r3)
8111f650:	003fe706 	br	8111f5f0 <__reset+0xfb0ff5f0>
8111f654:	01000804 	movi	r4,32
8111f658:	2089c83a 	sub	r4,r4,r2
8111f65c:	1908983a 	sll	r4,r3,r4
8111f660:	d9400117 	ldw	r5,4(sp)
8111f664:	1886d83a 	srl	r3,r3,r2
8111f668:	2148b03a 	or	r4,r4,r5
8111f66c:	99000515 	stw	r4,20(r19)
8111f670:	d8c00015 	stw	r3,0(sp)
8111f674:	003fca06 	br	8111f5a0 <__reset+0xfb0ff5a0>

8111f678 <__ratio>:
8111f678:	defff904 	addi	sp,sp,-28
8111f67c:	de00012e 	bgeu	sp,et,8111f684 <__ratio+0xc>
8111f680:	003b68fa 	trap	3
8111f684:	dc400315 	stw	r17,12(sp)
8111f688:	2823883a 	mov	r17,r5
8111f68c:	d9400104 	addi	r5,sp,4
8111f690:	dfc00615 	stw	ra,24(sp)
8111f694:	dcc00515 	stw	r19,20(sp)
8111f698:	dc800415 	stw	r18,16(sp)
8111f69c:	2027883a 	mov	r19,r4
8111f6a0:	dc000215 	stw	r16,8(sp)
8111f6a4:	111f4100 	call	8111f410 <__b2d>
8111f6a8:	d80b883a 	mov	r5,sp
8111f6ac:	8809883a 	mov	r4,r17
8111f6b0:	1025883a 	mov	r18,r2
8111f6b4:	1821883a 	mov	r16,r3
8111f6b8:	111f4100 	call	8111f410 <__b2d>
8111f6bc:	8a000417 	ldw	r8,16(r17)
8111f6c0:	99000417 	ldw	r4,16(r19)
8111f6c4:	d9400117 	ldw	r5,4(sp)
8111f6c8:	2209c83a 	sub	r4,r4,r8
8111f6cc:	2010917a 	slli	r8,r4,5
8111f6d0:	d9000017 	ldw	r4,0(sp)
8111f6d4:	2909c83a 	sub	r4,r5,r4
8111f6d8:	4109883a 	add	r4,r8,r4
8111f6dc:	01000e0e 	bge	zero,r4,8111f718 <__ratio+0xa0>
8111f6e0:	2008953a 	slli	r4,r4,20
8111f6e4:	2421883a 	add	r16,r4,r16
8111f6e8:	100d883a 	mov	r6,r2
8111f6ec:	180f883a 	mov	r7,r3
8111f6f0:	9009883a 	mov	r4,r18
8111f6f4:	800b883a 	mov	r5,r16
8111f6f8:	112776c0 	call	8112776c <__divdf3>
8111f6fc:	dfc00617 	ldw	ra,24(sp)
8111f700:	dcc00517 	ldw	r19,20(sp)
8111f704:	dc800417 	ldw	r18,16(sp)
8111f708:	dc400317 	ldw	r17,12(sp)
8111f70c:	dc000217 	ldw	r16,8(sp)
8111f710:	dec00704 	addi	sp,sp,28
8111f714:	f800283a 	ret
8111f718:	2008953a 	slli	r4,r4,20
8111f71c:	1907c83a 	sub	r3,r3,r4
8111f720:	003ff106 	br	8111f6e8 <__reset+0xfb0ff6e8>

8111f724 <_mprec_log10>:
8111f724:	defffe04 	addi	sp,sp,-8
8111f728:	de00012e 	bgeu	sp,et,8111f730 <_mprec_log10+0xc>
8111f72c:	003b68fa 	trap	3
8111f730:	008005c4 	movi	r2,23
8111f734:	dc000015 	stw	r16,0(sp)
8111f738:	dfc00115 	stw	ra,4(sp)
8111f73c:	2021883a 	mov	r16,r4
8111f740:	11000d0e 	bge	r2,r4,8111f778 <_mprec_log10+0x54>
8111f744:	0005883a 	mov	r2,zero
8111f748:	00cffc34 	movhi	r3,16368
8111f74c:	843fffc4 	addi	r16,r16,-1
8111f750:	000d883a 	mov	r6,zero
8111f754:	01d00934 	movhi	r7,16420
8111f758:	1009883a 	mov	r4,r2
8111f75c:	180b883a 	mov	r5,r3
8111f760:	11129a80 	call	811129a8 <__muldf3>
8111f764:	803ff91e 	bne	r16,zero,8111f74c <__reset+0xfb0ff74c>
8111f768:	dfc00117 	ldw	ra,4(sp)
8111f76c:	dc000017 	ldw	r16,0(sp)
8111f770:	dec00204 	addi	sp,sp,8
8111f774:	f800283a 	ret
8111f778:	202090fa 	slli	r16,r4,3
8111f77c:	00a04534 	movhi	r2,33044
8111f780:	1087c704 	addi	r2,r2,7964
8111f784:	1421883a 	add	r16,r2,r16
8111f788:	80800017 	ldw	r2,0(r16)
8111f78c:	80c00117 	ldw	r3,4(r16)
8111f790:	dfc00117 	ldw	ra,4(sp)
8111f794:	dc000017 	ldw	r16,0(sp)
8111f798:	dec00204 	addi	sp,sp,8
8111f79c:	f800283a 	ret

8111f7a0 <__copybits>:
8111f7a0:	297fffc4 	addi	r5,r5,-1
8111f7a4:	280fd17a 	srai	r7,r5,5
8111f7a8:	30c00417 	ldw	r3,16(r6)
8111f7ac:	30800504 	addi	r2,r6,20
8111f7b0:	39c00044 	addi	r7,r7,1
8111f7b4:	18c7883a 	add	r3,r3,r3
8111f7b8:	39cf883a 	add	r7,r7,r7
8111f7bc:	18c7883a 	add	r3,r3,r3
8111f7c0:	39cf883a 	add	r7,r7,r7
8111f7c4:	10c7883a 	add	r3,r2,r3
8111f7c8:	21cf883a 	add	r7,r4,r7
8111f7cc:	10c00d2e 	bgeu	r2,r3,8111f804 <__copybits+0x64>
8111f7d0:	200b883a 	mov	r5,r4
8111f7d4:	12000017 	ldw	r8,0(r2)
8111f7d8:	29400104 	addi	r5,r5,4
8111f7dc:	10800104 	addi	r2,r2,4
8111f7e0:	2a3fff15 	stw	r8,-4(r5)
8111f7e4:	10fffb36 	bltu	r2,r3,8111f7d4 <__reset+0xfb0ff7d4>
8111f7e8:	1985c83a 	sub	r2,r3,r6
8111f7ec:	10bffac4 	addi	r2,r2,-21
8111f7f0:	1004d0ba 	srli	r2,r2,2
8111f7f4:	10800044 	addi	r2,r2,1
8111f7f8:	1085883a 	add	r2,r2,r2
8111f7fc:	1085883a 	add	r2,r2,r2
8111f800:	2089883a 	add	r4,r4,r2
8111f804:	21c0032e 	bgeu	r4,r7,8111f814 <__copybits+0x74>
8111f808:	20000015 	stw	zero,0(r4)
8111f80c:	21000104 	addi	r4,r4,4
8111f810:	21fffd36 	bltu	r4,r7,8111f808 <__reset+0xfb0ff808>
8111f814:	f800283a 	ret

8111f818 <__any_on>:
8111f818:	20c00417 	ldw	r3,16(r4)
8111f81c:	2805d17a 	srai	r2,r5,5
8111f820:	21000504 	addi	r4,r4,20
8111f824:	18800d0e 	bge	r3,r2,8111f85c <__any_on+0x44>
8111f828:	18c7883a 	add	r3,r3,r3
8111f82c:	18c7883a 	add	r3,r3,r3
8111f830:	20c7883a 	add	r3,r4,r3
8111f834:	20c0192e 	bgeu	r4,r3,8111f89c <__any_on+0x84>
8111f838:	18bfff17 	ldw	r2,-4(r3)
8111f83c:	18ffff04 	addi	r3,r3,-4
8111f840:	1000041e 	bne	r2,zero,8111f854 <__any_on+0x3c>
8111f844:	20c0142e 	bgeu	r4,r3,8111f898 <__any_on+0x80>
8111f848:	18ffff04 	addi	r3,r3,-4
8111f84c:	19400017 	ldw	r5,0(r3)
8111f850:	283ffc26 	beq	r5,zero,8111f844 <__reset+0xfb0ff844>
8111f854:	00800044 	movi	r2,1
8111f858:	f800283a 	ret
8111f85c:	10c00a0e 	bge	r2,r3,8111f888 <__any_on+0x70>
8111f860:	1085883a 	add	r2,r2,r2
8111f864:	1085883a 	add	r2,r2,r2
8111f868:	294007cc 	andi	r5,r5,31
8111f86c:	2087883a 	add	r3,r4,r2
8111f870:	283ff026 	beq	r5,zero,8111f834 <__reset+0xfb0ff834>
8111f874:	19800017 	ldw	r6,0(r3)
8111f878:	3144d83a 	srl	r2,r6,r5
8111f87c:	114a983a 	sll	r5,r2,r5
8111f880:	317ff41e 	bne	r6,r5,8111f854 <__reset+0xfb0ff854>
8111f884:	003feb06 	br	8111f834 <__reset+0xfb0ff834>
8111f888:	1085883a 	add	r2,r2,r2
8111f88c:	1085883a 	add	r2,r2,r2
8111f890:	2087883a 	add	r3,r4,r2
8111f894:	003fe706 	br	8111f834 <__reset+0xfb0ff834>
8111f898:	f800283a 	ret
8111f89c:	0005883a 	mov	r2,zero
8111f8a0:	f800283a 	ret

8111f8a4 <_read_r>:
8111f8a4:	defffd04 	addi	sp,sp,-12
8111f8a8:	de00012e 	bgeu	sp,et,8111f8b0 <_read_r+0xc>
8111f8ac:	003b68fa 	trap	3
8111f8b0:	2805883a 	mov	r2,r5
8111f8b4:	dc000015 	stw	r16,0(sp)
8111f8b8:	04204534 	movhi	r16,33044
8111f8bc:	dc400115 	stw	r17,4(sp)
8111f8c0:	300b883a 	mov	r5,r6
8111f8c4:	8411c604 	addi	r16,r16,18200
8111f8c8:	2023883a 	mov	r17,r4
8111f8cc:	380d883a 	mov	r6,r7
8111f8d0:	1009883a 	mov	r4,r2
8111f8d4:	dfc00215 	stw	ra,8(sp)
8111f8d8:	80000015 	stw	zero,0(r16)
8111f8dc:	112a4600 	call	8112a460 <read>
8111f8e0:	00ffffc4 	movi	r3,-1
8111f8e4:	10c00526 	beq	r2,r3,8111f8fc <_read_r+0x58>
8111f8e8:	dfc00217 	ldw	ra,8(sp)
8111f8ec:	dc400117 	ldw	r17,4(sp)
8111f8f0:	dc000017 	ldw	r16,0(sp)
8111f8f4:	dec00304 	addi	sp,sp,12
8111f8f8:	f800283a 	ret
8111f8fc:	80c00017 	ldw	r3,0(r16)
8111f900:	183ff926 	beq	r3,zero,8111f8e8 <__reset+0xfb0ff8e8>
8111f904:	88c00015 	stw	r3,0(r17)
8111f908:	003ff706 	br	8111f8e8 <__reset+0xfb0ff8e8>

8111f90c <_realloc_r>:
8111f90c:	defff604 	addi	sp,sp,-40
8111f910:	de00012e 	bgeu	sp,et,8111f918 <_realloc_r+0xc>
8111f914:	003b68fa 	trap	3
8111f918:	dc800215 	stw	r18,8(sp)
8111f91c:	dfc00915 	stw	ra,36(sp)
8111f920:	df000815 	stw	fp,32(sp)
8111f924:	ddc00715 	stw	r23,28(sp)
8111f928:	dd800615 	stw	r22,24(sp)
8111f92c:	dd400515 	stw	r21,20(sp)
8111f930:	dd000415 	stw	r20,16(sp)
8111f934:	dcc00315 	stw	r19,12(sp)
8111f938:	dc400115 	stw	r17,4(sp)
8111f93c:	dc000015 	stw	r16,0(sp)
8111f940:	3025883a 	mov	r18,r6
8111f944:	2800b726 	beq	r5,zero,8111fc24 <_realloc_r+0x318>
8111f948:	282b883a 	mov	r21,r5
8111f94c:	2029883a 	mov	r20,r4
8111f950:	112ac400 	call	8112ac40 <__malloc_lock>
8111f954:	a8bfff17 	ldw	r2,-4(r21)
8111f958:	043fff04 	movi	r16,-4
8111f95c:	90c002c4 	addi	r3,r18,11
8111f960:	01000584 	movi	r4,22
8111f964:	acfffe04 	addi	r19,r21,-8
8111f968:	1420703a 	and	r16,r2,r16
8111f96c:	20c0332e 	bgeu	r4,r3,8111fa3c <_realloc_r+0x130>
8111f970:	047ffe04 	movi	r17,-8
8111f974:	1c62703a 	and	r17,r3,r17
8111f978:	8807883a 	mov	r3,r17
8111f97c:	88005816 	blt	r17,zero,8111fae0 <_realloc_r+0x1d4>
8111f980:	8c805736 	bltu	r17,r18,8111fae0 <_realloc_r+0x1d4>
8111f984:	80c0300e 	bge	r16,r3,8111fa48 <_realloc_r+0x13c>
8111f988:	07204534 	movhi	fp,33044
8111f98c:	e70b2704 	addi	fp,fp,11420
8111f990:	e1c00217 	ldw	r7,8(fp)
8111f994:	9c09883a 	add	r4,r19,r16
8111f998:	22000117 	ldw	r8,4(r4)
8111f99c:	21c06326 	beq	r4,r7,8111fb2c <_realloc_r+0x220>
8111f9a0:	017fff84 	movi	r5,-2
8111f9a4:	414a703a 	and	r5,r8,r5
8111f9a8:	214b883a 	add	r5,r4,r5
8111f9ac:	29800117 	ldw	r6,4(r5)
8111f9b0:	3180004c 	andi	r6,r6,1
8111f9b4:	30003f26 	beq	r6,zero,8111fab4 <_realloc_r+0x1a8>
8111f9b8:	1080004c 	andi	r2,r2,1
8111f9bc:	10008326 	beq	r2,zero,8111fbcc <_realloc_r+0x2c0>
8111f9c0:	900b883a 	mov	r5,r18
8111f9c4:	a009883a 	mov	r4,r20
8111f9c8:	1113de40 	call	81113de4 <_malloc_r>
8111f9cc:	1025883a 	mov	r18,r2
8111f9d0:	10011e26 	beq	r2,zero,8111fe4c <_realloc_r+0x540>
8111f9d4:	a93fff17 	ldw	r4,-4(r21)
8111f9d8:	10fffe04 	addi	r3,r2,-8
8111f9dc:	00bfff84 	movi	r2,-2
8111f9e0:	2084703a 	and	r2,r4,r2
8111f9e4:	9885883a 	add	r2,r19,r2
8111f9e8:	1880ee26 	beq	r3,r2,8111fda4 <_realloc_r+0x498>
8111f9ec:	81bfff04 	addi	r6,r16,-4
8111f9f0:	00800904 	movi	r2,36
8111f9f4:	1180b836 	bltu	r2,r6,8111fcd8 <_realloc_r+0x3cc>
8111f9f8:	00c004c4 	movi	r3,19
8111f9fc:	19809636 	bltu	r3,r6,8111fc58 <_realloc_r+0x34c>
8111fa00:	9005883a 	mov	r2,r18
8111fa04:	a807883a 	mov	r3,r21
8111fa08:	19000017 	ldw	r4,0(r3)
8111fa0c:	11000015 	stw	r4,0(r2)
8111fa10:	19000117 	ldw	r4,4(r3)
8111fa14:	11000115 	stw	r4,4(r2)
8111fa18:	18c00217 	ldw	r3,8(r3)
8111fa1c:	10c00215 	stw	r3,8(r2)
8111fa20:	a80b883a 	mov	r5,r21
8111fa24:	a009883a 	mov	r4,r20
8111fa28:	111d8780 	call	8111d878 <_free_r>
8111fa2c:	a009883a 	mov	r4,r20
8111fa30:	112ad680 	call	8112ad68 <__malloc_unlock>
8111fa34:	9005883a 	mov	r2,r18
8111fa38:	00001206 	br	8111fa84 <_realloc_r+0x178>
8111fa3c:	00c00404 	movi	r3,16
8111fa40:	1823883a 	mov	r17,r3
8111fa44:	003fce06 	br	8111f980 <__reset+0xfb0ff980>
8111fa48:	a825883a 	mov	r18,r21
8111fa4c:	8445c83a 	sub	r2,r16,r17
8111fa50:	00c003c4 	movi	r3,15
8111fa54:	18802636 	bltu	r3,r2,8111faf0 <_realloc_r+0x1e4>
8111fa58:	99800117 	ldw	r6,4(r19)
8111fa5c:	9c07883a 	add	r3,r19,r16
8111fa60:	3180004c 	andi	r6,r6,1
8111fa64:	3420b03a 	or	r16,r6,r16
8111fa68:	9c000115 	stw	r16,4(r19)
8111fa6c:	18800117 	ldw	r2,4(r3)
8111fa70:	10800054 	ori	r2,r2,1
8111fa74:	18800115 	stw	r2,4(r3)
8111fa78:	a009883a 	mov	r4,r20
8111fa7c:	112ad680 	call	8112ad68 <__malloc_unlock>
8111fa80:	9005883a 	mov	r2,r18
8111fa84:	dfc00917 	ldw	ra,36(sp)
8111fa88:	df000817 	ldw	fp,32(sp)
8111fa8c:	ddc00717 	ldw	r23,28(sp)
8111fa90:	dd800617 	ldw	r22,24(sp)
8111fa94:	dd400517 	ldw	r21,20(sp)
8111fa98:	dd000417 	ldw	r20,16(sp)
8111fa9c:	dcc00317 	ldw	r19,12(sp)
8111faa0:	dc800217 	ldw	r18,8(sp)
8111faa4:	dc400117 	ldw	r17,4(sp)
8111faa8:	dc000017 	ldw	r16,0(sp)
8111faac:	dec00a04 	addi	sp,sp,40
8111fab0:	f800283a 	ret
8111fab4:	017fff04 	movi	r5,-4
8111fab8:	414a703a 	and	r5,r8,r5
8111fabc:	814d883a 	add	r6,r16,r5
8111fac0:	30c01f16 	blt	r6,r3,8111fb40 <_realloc_r+0x234>
8111fac4:	20800317 	ldw	r2,12(r4)
8111fac8:	20c00217 	ldw	r3,8(r4)
8111facc:	a825883a 	mov	r18,r21
8111fad0:	3021883a 	mov	r16,r6
8111fad4:	18800315 	stw	r2,12(r3)
8111fad8:	10c00215 	stw	r3,8(r2)
8111fadc:	003fdb06 	br	8111fa4c <__reset+0xfb0ffa4c>
8111fae0:	00800304 	movi	r2,12
8111fae4:	a0800015 	stw	r2,0(r20)
8111fae8:	0005883a 	mov	r2,zero
8111faec:	003fe506 	br	8111fa84 <__reset+0xfb0ffa84>
8111faf0:	98c00117 	ldw	r3,4(r19)
8111faf4:	9c4b883a 	add	r5,r19,r17
8111faf8:	11000054 	ori	r4,r2,1
8111fafc:	18c0004c 	andi	r3,r3,1
8111fb00:	1c62b03a 	or	r17,r3,r17
8111fb04:	9c400115 	stw	r17,4(r19)
8111fb08:	29000115 	stw	r4,4(r5)
8111fb0c:	2885883a 	add	r2,r5,r2
8111fb10:	10c00117 	ldw	r3,4(r2)
8111fb14:	29400204 	addi	r5,r5,8
8111fb18:	a009883a 	mov	r4,r20
8111fb1c:	18c00054 	ori	r3,r3,1
8111fb20:	10c00115 	stw	r3,4(r2)
8111fb24:	111d8780 	call	8111d878 <_free_r>
8111fb28:	003fd306 	br	8111fa78 <__reset+0xfb0ffa78>
8111fb2c:	017fff04 	movi	r5,-4
8111fb30:	414a703a 	and	r5,r8,r5
8111fb34:	89800404 	addi	r6,r17,16
8111fb38:	8151883a 	add	r8,r16,r5
8111fb3c:	4180590e 	bge	r8,r6,8111fca4 <_realloc_r+0x398>
8111fb40:	1080004c 	andi	r2,r2,1
8111fb44:	103f9e1e 	bne	r2,zero,8111f9c0 <__reset+0xfb0ff9c0>
8111fb48:	adbffe17 	ldw	r22,-8(r21)
8111fb4c:	00bfff04 	movi	r2,-4
8111fb50:	9dadc83a 	sub	r22,r19,r22
8111fb54:	b1800117 	ldw	r6,4(r22)
8111fb58:	3084703a 	and	r2,r6,r2
8111fb5c:	20002026 	beq	r4,zero,8111fbe0 <_realloc_r+0x2d4>
8111fb60:	80af883a 	add	r23,r16,r2
8111fb64:	b96f883a 	add	r23,r23,r5
8111fb68:	21c05f26 	beq	r4,r7,8111fce8 <_realloc_r+0x3dc>
8111fb6c:	b8c01c16 	blt	r23,r3,8111fbe0 <_realloc_r+0x2d4>
8111fb70:	20800317 	ldw	r2,12(r4)
8111fb74:	20c00217 	ldw	r3,8(r4)
8111fb78:	81bfff04 	addi	r6,r16,-4
8111fb7c:	01000904 	movi	r4,36
8111fb80:	18800315 	stw	r2,12(r3)
8111fb84:	10c00215 	stw	r3,8(r2)
8111fb88:	b0c00217 	ldw	r3,8(r22)
8111fb8c:	b0800317 	ldw	r2,12(r22)
8111fb90:	b4800204 	addi	r18,r22,8
8111fb94:	18800315 	stw	r2,12(r3)
8111fb98:	10c00215 	stw	r3,8(r2)
8111fb9c:	21801b36 	bltu	r4,r6,8111fc0c <_realloc_r+0x300>
8111fba0:	008004c4 	movi	r2,19
8111fba4:	1180352e 	bgeu	r2,r6,8111fc7c <_realloc_r+0x370>
8111fba8:	a8800017 	ldw	r2,0(r21)
8111fbac:	b0800215 	stw	r2,8(r22)
8111fbb0:	a8800117 	ldw	r2,4(r21)
8111fbb4:	b0800315 	stw	r2,12(r22)
8111fbb8:	008006c4 	movi	r2,27
8111fbbc:	11807f36 	bltu	r2,r6,8111fdbc <_realloc_r+0x4b0>
8111fbc0:	b0800404 	addi	r2,r22,16
8111fbc4:	ad400204 	addi	r21,r21,8
8111fbc8:	00002d06 	br	8111fc80 <_realloc_r+0x374>
8111fbcc:	adbffe17 	ldw	r22,-8(r21)
8111fbd0:	00bfff04 	movi	r2,-4
8111fbd4:	9dadc83a 	sub	r22,r19,r22
8111fbd8:	b1000117 	ldw	r4,4(r22)
8111fbdc:	2084703a 	and	r2,r4,r2
8111fbe0:	b03f7726 	beq	r22,zero,8111f9c0 <__reset+0xfb0ff9c0>
8111fbe4:	80af883a 	add	r23,r16,r2
8111fbe8:	b8ff7516 	blt	r23,r3,8111f9c0 <__reset+0xfb0ff9c0>
8111fbec:	b0800317 	ldw	r2,12(r22)
8111fbf0:	b0c00217 	ldw	r3,8(r22)
8111fbf4:	81bfff04 	addi	r6,r16,-4
8111fbf8:	01000904 	movi	r4,36
8111fbfc:	18800315 	stw	r2,12(r3)
8111fc00:	10c00215 	stw	r3,8(r2)
8111fc04:	b4800204 	addi	r18,r22,8
8111fc08:	21bfe52e 	bgeu	r4,r6,8111fba0 <__reset+0xfb0ffba0>
8111fc0c:	a80b883a 	mov	r5,r21
8111fc10:	9009883a 	mov	r4,r18
8111fc14:	111e6ec0 	call	8111e6ec <memmove>
8111fc18:	b821883a 	mov	r16,r23
8111fc1c:	b027883a 	mov	r19,r22
8111fc20:	003f8a06 	br	8111fa4c <__reset+0xfb0ffa4c>
8111fc24:	300b883a 	mov	r5,r6
8111fc28:	dfc00917 	ldw	ra,36(sp)
8111fc2c:	df000817 	ldw	fp,32(sp)
8111fc30:	ddc00717 	ldw	r23,28(sp)
8111fc34:	dd800617 	ldw	r22,24(sp)
8111fc38:	dd400517 	ldw	r21,20(sp)
8111fc3c:	dd000417 	ldw	r20,16(sp)
8111fc40:	dcc00317 	ldw	r19,12(sp)
8111fc44:	dc800217 	ldw	r18,8(sp)
8111fc48:	dc400117 	ldw	r17,4(sp)
8111fc4c:	dc000017 	ldw	r16,0(sp)
8111fc50:	dec00a04 	addi	sp,sp,40
8111fc54:	1113de41 	jmpi	81113de4 <_malloc_r>
8111fc58:	a8c00017 	ldw	r3,0(r21)
8111fc5c:	90c00015 	stw	r3,0(r18)
8111fc60:	a8c00117 	ldw	r3,4(r21)
8111fc64:	90c00115 	stw	r3,4(r18)
8111fc68:	00c006c4 	movi	r3,27
8111fc6c:	19804536 	bltu	r3,r6,8111fd84 <_realloc_r+0x478>
8111fc70:	90800204 	addi	r2,r18,8
8111fc74:	a8c00204 	addi	r3,r21,8
8111fc78:	003f6306 	br	8111fa08 <__reset+0xfb0ffa08>
8111fc7c:	9005883a 	mov	r2,r18
8111fc80:	a8c00017 	ldw	r3,0(r21)
8111fc84:	b821883a 	mov	r16,r23
8111fc88:	b027883a 	mov	r19,r22
8111fc8c:	10c00015 	stw	r3,0(r2)
8111fc90:	a8c00117 	ldw	r3,4(r21)
8111fc94:	10c00115 	stw	r3,4(r2)
8111fc98:	a8c00217 	ldw	r3,8(r21)
8111fc9c:	10c00215 	stw	r3,8(r2)
8111fca0:	003f6a06 	br	8111fa4c <__reset+0xfb0ffa4c>
8111fca4:	9c67883a 	add	r19,r19,r17
8111fca8:	4445c83a 	sub	r2,r8,r17
8111fcac:	e4c00215 	stw	r19,8(fp)
8111fcb0:	10800054 	ori	r2,r2,1
8111fcb4:	98800115 	stw	r2,4(r19)
8111fcb8:	a8bfff17 	ldw	r2,-4(r21)
8111fcbc:	a009883a 	mov	r4,r20
8111fcc0:	1080004c 	andi	r2,r2,1
8111fcc4:	1462b03a 	or	r17,r2,r17
8111fcc8:	ac7fff15 	stw	r17,-4(r21)
8111fccc:	112ad680 	call	8112ad68 <__malloc_unlock>
8111fcd0:	a805883a 	mov	r2,r21
8111fcd4:	003f6b06 	br	8111fa84 <__reset+0xfb0ffa84>
8111fcd8:	a80b883a 	mov	r5,r21
8111fcdc:	9009883a 	mov	r4,r18
8111fce0:	111e6ec0 	call	8111e6ec <memmove>
8111fce4:	003f4e06 	br	8111fa20 <__reset+0xfb0ffa20>
8111fce8:	89000404 	addi	r4,r17,16
8111fcec:	b93fbc16 	blt	r23,r4,8111fbe0 <__reset+0xfb0ffbe0>
8111fcf0:	b0800317 	ldw	r2,12(r22)
8111fcf4:	b0c00217 	ldw	r3,8(r22)
8111fcf8:	81bfff04 	addi	r6,r16,-4
8111fcfc:	01000904 	movi	r4,36
8111fd00:	18800315 	stw	r2,12(r3)
8111fd04:	10c00215 	stw	r3,8(r2)
8111fd08:	b4800204 	addi	r18,r22,8
8111fd0c:	21804336 	bltu	r4,r6,8111fe1c <_realloc_r+0x510>
8111fd10:	008004c4 	movi	r2,19
8111fd14:	11803f2e 	bgeu	r2,r6,8111fe14 <_realloc_r+0x508>
8111fd18:	a8800017 	ldw	r2,0(r21)
8111fd1c:	b0800215 	stw	r2,8(r22)
8111fd20:	a8800117 	ldw	r2,4(r21)
8111fd24:	b0800315 	stw	r2,12(r22)
8111fd28:	008006c4 	movi	r2,27
8111fd2c:	11803f36 	bltu	r2,r6,8111fe2c <_realloc_r+0x520>
8111fd30:	b0800404 	addi	r2,r22,16
8111fd34:	ad400204 	addi	r21,r21,8
8111fd38:	a8c00017 	ldw	r3,0(r21)
8111fd3c:	10c00015 	stw	r3,0(r2)
8111fd40:	a8c00117 	ldw	r3,4(r21)
8111fd44:	10c00115 	stw	r3,4(r2)
8111fd48:	a8c00217 	ldw	r3,8(r21)
8111fd4c:	10c00215 	stw	r3,8(r2)
8111fd50:	b447883a 	add	r3,r22,r17
8111fd54:	bc45c83a 	sub	r2,r23,r17
8111fd58:	e0c00215 	stw	r3,8(fp)
8111fd5c:	10800054 	ori	r2,r2,1
8111fd60:	18800115 	stw	r2,4(r3)
8111fd64:	b0800117 	ldw	r2,4(r22)
8111fd68:	a009883a 	mov	r4,r20
8111fd6c:	1080004c 	andi	r2,r2,1
8111fd70:	1462b03a 	or	r17,r2,r17
8111fd74:	b4400115 	stw	r17,4(r22)
8111fd78:	112ad680 	call	8112ad68 <__malloc_unlock>
8111fd7c:	9005883a 	mov	r2,r18
8111fd80:	003f4006 	br	8111fa84 <__reset+0xfb0ffa84>
8111fd84:	a8c00217 	ldw	r3,8(r21)
8111fd88:	90c00215 	stw	r3,8(r18)
8111fd8c:	a8c00317 	ldw	r3,12(r21)
8111fd90:	90c00315 	stw	r3,12(r18)
8111fd94:	30801126 	beq	r6,r2,8111fddc <_realloc_r+0x4d0>
8111fd98:	90800404 	addi	r2,r18,16
8111fd9c:	a8c00404 	addi	r3,r21,16
8111fda0:	003f1906 	br	8111fa08 <__reset+0xfb0ffa08>
8111fda4:	90ffff17 	ldw	r3,-4(r18)
8111fda8:	00bfff04 	movi	r2,-4
8111fdac:	a825883a 	mov	r18,r21
8111fdb0:	1884703a 	and	r2,r3,r2
8111fdb4:	80a1883a 	add	r16,r16,r2
8111fdb8:	003f2406 	br	8111fa4c <__reset+0xfb0ffa4c>
8111fdbc:	a8800217 	ldw	r2,8(r21)
8111fdc0:	b0800415 	stw	r2,16(r22)
8111fdc4:	a8800317 	ldw	r2,12(r21)
8111fdc8:	b0800515 	stw	r2,20(r22)
8111fdcc:	31000a26 	beq	r6,r4,8111fdf8 <_realloc_r+0x4ec>
8111fdd0:	b0800604 	addi	r2,r22,24
8111fdd4:	ad400404 	addi	r21,r21,16
8111fdd8:	003fa906 	br	8111fc80 <__reset+0xfb0ffc80>
8111fddc:	a9000417 	ldw	r4,16(r21)
8111fde0:	90800604 	addi	r2,r18,24
8111fde4:	a8c00604 	addi	r3,r21,24
8111fde8:	91000415 	stw	r4,16(r18)
8111fdec:	a9000517 	ldw	r4,20(r21)
8111fdf0:	91000515 	stw	r4,20(r18)
8111fdf4:	003f0406 	br	8111fa08 <__reset+0xfb0ffa08>
8111fdf8:	a8c00417 	ldw	r3,16(r21)
8111fdfc:	ad400604 	addi	r21,r21,24
8111fe00:	b0800804 	addi	r2,r22,32
8111fe04:	b0c00615 	stw	r3,24(r22)
8111fe08:	a8ffff17 	ldw	r3,-4(r21)
8111fe0c:	b0c00715 	stw	r3,28(r22)
8111fe10:	003f9b06 	br	8111fc80 <__reset+0xfb0ffc80>
8111fe14:	9005883a 	mov	r2,r18
8111fe18:	003fc706 	br	8111fd38 <__reset+0xfb0ffd38>
8111fe1c:	a80b883a 	mov	r5,r21
8111fe20:	9009883a 	mov	r4,r18
8111fe24:	111e6ec0 	call	8111e6ec <memmove>
8111fe28:	003fc906 	br	8111fd50 <__reset+0xfb0ffd50>
8111fe2c:	a8800217 	ldw	r2,8(r21)
8111fe30:	b0800415 	stw	r2,16(r22)
8111fe34:	a8800317 	ldw	r2,12(r21)
8111fe38:	b0800515 	stw	r2,20(r22)
8111fe3c:	31000726 	beq	r6,r4,8111fe5c <_realloc_r+0x550>
8111fe40:	b0800604 	addi	r2,r22,24
8111fe44:	ad400404 	addi	r21,r21,16
8111fe48:	003fbb06 	br	8111fd38 <__reset+0xfb0ffd38>
8111fe4c:	a009883a 	mov	r4,r20
8111fe50:	112ad680 	call	8112ad68 <__malloc_unlock>
8111fe54:	0005883a 	mov	r2,zero
8111fe58:	003f0a06 	br	8111fa84 <__reset+0xfb0ffa84>
8111fe5c:	a8c00417 	ldw	r3,16(r21)
8111fe60:	ad400604 	addi	r21,r21,24
8111fe64:	b0800804 	addi	r2,r22,32
8111fe68:	b0c00615 	stw	r3,24(r22)
8111fe6c:	a8ffff17 	ldw	r3,-4(r21)
8111fe70:	b0c00715 	stw	r3,28(r22)
8111fe74:	003fb006 	br	8111fd38 <__reset+0xfb0ffd38>

8111fe78 <__fpclassifyd>:
8111fe78:	00a00034 	movhi	r2,32768
8111fe7c:	10bfffc4 	addi	r2,r2,-1
8111fe80:	2884703a 	and	r2,r5,r2
8111fe84:	10000726 	beq	r2,zero,8111fea4 <__fpclassifyd+0x2c>
8111fe88:	00fffc34 	movhi	r3,65520
8111fe8c:	019ff834 	movhi	r6,32736
8111fe90:	28c7883a 	add	r3,r5,r3
8111fe94:	31bfffc4 	addi	r6,r6,-1
8111fe98:	30c00536 	bltu	r6,r3,8111feb0 <__fpclassifyd+0x38>
8111fe9c:	00800104 	movi	r2,4
8111fea0:	f800283a 	ret
8111fea4:	2000021e 	bne	r4,zero,8111feb0 <__fpclassifyd+0x38>
8111fea8:	00800084 	movi	r2,2
8111feac:	f800283a 	ret
8111feb0:	00dffc34 	movhi	r3,32752
8111feb4:	019ff834 	movhi	r6,32736
8111feb8:	28cb883a 	add	r5,r5,r3
8111febc:	31bfffc4 	addi	r6,r6,-1
8111fec0:	317ff62e 	bgeu	r6,r5,8111fe9c <__reset+0xfb0ffe9c>
8111fec4:	01400434 	movhi	r5,16
8111fec8:	297fffc4 	addi	r5,r5,-1
8111fecc:	28800236 	bltu	r5,r2,8111fed8 <__fpclassifyd+0x60>
8111fed0:	008000c4 	movi	r2,3
8111fed4:	f800283a 	ret
8111fed8:	10c00226 	beq	r2,r3,8111fee4 <__fpclassifyd+0x6c>
8111fedc:	0005883a 	mov	r2,zero
8111fee0:	f800283a 	ret
8111fee4:	2005003a 	cmpeq	r2,r4,zero
8111fee8:	f800283a 	ret

8111feec <__sccl>:
8111feec:	2a000003 	ldbu	r8,0(r5)
8111fef0:	00801784 	movi	r2,94
8111fef4:	40802a26 	beq	r8,r2,8111ffa0 <__sccl+0xb4>
8111fef8:	29400044 	addi	r5,r5,1
8111fefc:	000f883a 	mov	r7,zero
8111ff00:	0013883a 	mov	r9,zero
8111ff04:	2007883a 	mov	r3,r4
8111ff08:	21804004 	addi	r6,r4,256
8111ff0c:	19c00005 	stb	r7,0(r3)
8111ff10:	18c00044 	addi	r3,r3,1
8111ff14:	19bffd1e 	bne	r3,r6,8111ff0c <__reset+0xfb0fff0c>
8111ff18:	40001126 	beq	r8,zero,8111ff60 <__sccl+0x74>
8111ff1c:	00800044 	movi	r2,1
8111ff20:	124fc83a 	sub	r7,r2,r9
8111ff24:	02800b44 	movi	r10,45
8111ff28:	02c01744 	movi	r11,93
8111ff2c:	2205883a 	add	r2,r4,r8
8111ff30:	11c00005 	stb	r7,0(r2)
8111ff34:	28800044 	addi	r2,r5,1
8111ff38:	28c00003 	ldbu	r3,0(r5)
8111ff3c:	1a800a26 	beq	r3,r10,8111ff68 <__sccl+0x7c>
8111ff40:	1ac00426 	beq	r3,r11,8111ff54 <__sccl+0x68>
8111ff44:	18000426 	beq	r3,zero,8111ff58 <__sccl+0x6c>
8111ff48:	1811883a 	mov	r8,r3
8111ff4c:	100b883a 	mov	r5,r2
8111ff50:	003ff606 	br	8111ff2c <__reset+0xfb0fff2c>
8111ff54:	f800283a 	ret
8111ff58:	2805883a 	mov	r2,r5
8111ff5c:	f800283a 	ret
8111ff60:	28bfffc4 	addi	r2,r5,-1
8111ff64:	f800283a 	ret
8111ff68:	12400003 	ldbu	r9,0(r2)
8111ff6c:	4ac01126 	beq	r9,r11,8111ffb4 <__sccl+0xc8>
8111ff70:	4a001016 	blt	r9,r8,8111ffb4 <__sccl+0xc8>
8111ff74:	41800044 	addi	r6,r8,1
8111ff78:	29400084 	addi	r5,r5,2
8111ff7c:	2187883a 	add	r3,r4,r6
8111ff80:	00000106 	br	8111ff88 <__sccl+0x9c>
8111ff84:	31800044 	addi	r6,r6,1
8111ff88:	19c00005 	stb	r7,0(r3)
8111ff8c:	3011883a 	mov	r8,r6
8111ff90:	18c00044 	addi	r3,r3,1
8111ff94:	327ffb16 	blt	r6,r9,8111ff84 <__reset+0xfb0fff84>
8111ff98:	10800084 	addi	r2,r2,2
8111ff9c:	003fe606 	br	8111ff38 <__reset+0xfb0fff38>
8111ffa0:	2a000043 	ldbu	r8,1(r5)
8111ffa4:	01c00044 	movi	r7,1
8111ffa8:	29400084 	addi	r5,r5,2
8111ffac:	02400044 	movi	r9,1
8111ffb0:	003fd406 	br	8111ff04 <__reset+0xfb0fff04>
8111ffb4:	5011883a 	mov	r8,r10
8111ffb8:	003fe406 	br	8111ff4c <__reset+0xfb0fff4c>

8111ffbc <nanf>:
8111ffbc:	009ff034 	movhi	r2,32704
8111ffc0:	f800283a 	ret

8111ffc4 <strcmp>:
8111ffc4:	2144b03a 	or	r2,r4,r5
8111ffc8:	108000cc 	andi	r2,r2,3
8111ffcc:	1000171e 	bne	r2,zero,8112002c <strcmp+0x68>
8111ffd0:	20800017 	ldw	r2,0(r4)
8111ffd4:	28c00017 	ldw	r3,0(r5)
8111ffd8:	10c0141e 	bne	r2,r3,8112002c <strcmp+0x68>
8111ffdc:	027fbff4 	movhi	r9,65279
8111ffe0:	4a7fbfc4 	addi	r9,r9,-257
8111ffe4:	0086303a 	nor	r3,zero,r2
8111ffe8:	02202074 	movhi	r8,32897
8111ffec:	1245883a 	add	r2,r2,r9
8111fff0:	42202004 	addi	r8,r8,-32640
8111fff4:	10c4703a 	and	r2,r2,r3
8111fff8:	1204703a 	and	r2,r2,r8
8111fffc:	10000226 	beq	r2,zero,81120008 <strcmp+0x44>
81120000:	00002306 	br	81120090 <strcmp+0xcc>
81120004:	1000221e 	bne	r2,zero,81120090 <strcmp+0xcc>
81120008:	21000104 	addi	r4,r4,4
8112000c:	20c00017 	ldw	r3,0(r4)
81120010:	29400104 	addi	r5,r5,4
81120014:	29800017 	ldw	r6,0(r5)
81120018:	1a4f883a 	add	r7,r3,r9
8112001c:	00c4303a 	nor	r2,zero,r3
81120020:	3884703a 	and	r2,r7,r2
81120024:	1204703a 	and	r2,r2,r8
81120028:	19bff626 	beq	r3,r6,81120004 <__reset+0xfb100004>
8112002c:	20800003 	ldbu	r2,0(r4)
81120030:	10c03fcc 	andi	r3,r2,255
81120034:	18c0201c 	xori	r3,r3,128
81120038:	18ffe004 	addi	r3,r3,-128
8112003c:	18000c26 	beq	r3,zero,81120070 <strcmp+0xac>
81120040:	29800007 	ldb	r6,0(r5)
81120044:	19800326 	beq	r3,r6,81120054 <strcmp+0x90>
81120048:	00001306 	br	81120098 <strcmp+0xd4>
8112004c:	29800007 	ldb	r6,0(r5)
81120050:	11800b1e 	bne	r2,r6,81120080 <strcmp+0xbc>
81120054:	21000044 	addi	r4,r4,1
81120058:	20c00003 	ldbu	r3,0(r4)
8112005c:	29400044 	addi	r5,r5,1
81120060:	18803fcc 	andi	r2,r3,255
81120064:	1080201c 	xori	r2,r2,128
81120068:	10bfe004 	addi	r2,r2,-128
8112006c:	103ff71e 	bne	r2,zero,8112004c <__reset+0xfb10004c>
81120070:	0007883a 	mov	r3,zero
81120074:	28800003 	ldbu	r2,0(r5)
81120078:	1885c83a 	sub	r2,r3,r2
8112007c:	f800283a 	ret
81120080:	28800003 	ldbu	r2,0(r5)
81120084:	18c03fcc 	andi	r3,r3,255
81120088:	1885c83a 	sub	r2,r3,r2
8112008c:	f800283a 	ret
81120090:	0005883a 	mov	r2,zero
81120094:	f800283a 	ret
81120098:	10c03fcc 	andi	r3,r2,255
8112009c:	003ff506 	br	81120074 <__reset+0xfb100074>

811200a0 <sulp>:
811200a0:	defffd04 	addi	sp,sp,-12
811200a4:	de00012e 	bgeu	sp,et,811200ac <sulp+0xc>
811200a8:	003b68fa 	trap	3
811200ac:	dc400115 	stw	r17,4(sp)
811200b0:	3023883a 	mov	r17,r6
811200b4:	dc000015 	stw	r16,0(sp)
811200b8:	dfc00215 	stw	ra,8(sp)
811200bc:	2821883a 	mov	r16,r5
811200c0:	111f3ac0 	call	8111f3ac <__ulp>
811200c4:	88000c26 	beq	r17,zero,811200f8 <sulp+0x58>
811200c8:	841ffc2c 	andhi	r16,r16,32752
811200cc:	8020d53a 	srli	r16,r16,20
811200d0:	01c01ac4 	movi	r7,107
811200d4:	3c21c83a 	sub	r16,r7,r16
811200d8:	0400070e 	bge	zero,r16,811200f8 <sulp+0x58>
811200dc:	8020953a 	slli	r16,r16,20
811200e0:	01cffc34 	movhi	r7,16368
811200e4:	000d883a 	mov	r6,zero
811200e8:	81cf883a 	add	r7,r16,r7
811200ec:	1009883a 	mov	r4,r2
811200f0:	180b883a 	mov	r5,r3
811200f4:	11129a80 	call	811129a8 <__muldf3>
811200f8:	dfc00217 	ldw	ra,8(sp)
811200fc:	dc400117 	ldw	r17,4(sp)
81120100:	dc000017 	ldw	r16,0(sp)
81120104:	dec00304 	addi	sp,sp,12
81120108:	f800283a 	ret

8112010c <_strtod_r>:
8112010c:	deffe204 	addi	sp,sp,-120
81120110:	de00012e 	bgeu	sp,et,81120118 <_strtod_r+0xc>
81120114:	003b68fa 	trap	3
81120118:	ddc01b15 	stw	r23,108(sp)
8112011c:	dd001815 	stw	r20,96(sp)
81120120:	dc801615 	stw	r18,88(sp)
81120124:	dc401515 	stw	r17,84(sp)
81120128:	dc001415 	stw	r16,80(sp)
8112012c:	d9400615 	stw	r5,24(sp)
81120130:	dfc01d15 	stw	ra,116(sp)
81120134:	df001c15 	stw	fp,112(sp)
81120138:	dd801a15 	stw	r22,104(sp)
8112013c:	dd401915 	stw	r21,100(sp)
81120140:	dcc01715 	stw	r19,92(sp)
81120144:	2021883a 	mov	r16,r4
81120148:	d8000515 	stw	zero,20(sp)
8112014c:	2809883a 	mov	r4,r5
81120150:	20800003 	ldbu	r2,0(r4)
81120154:	01e044b4 	movhi	r7,33042
81120158:	282f883a 	mov	r23,r5
8112015c:	10c03fcc 	andi	r3,r2,255
81120160:	01400b44 	movi	r5,45
81120164:	39c06204 	addi	r7,r7,392
81120168:	3029883a 	mov	r20,r6
8112016c:	0025883a 	mov	r18,zero
81120170:	0023883a 	mov	r17,zero
81120174:	28c0ba36 	bltu	r5,r3,81120460 <_strtod_r+0x354>
81120178:	180690ba 	slli	r3,r3,2
8112017c:	19c7883a 	add	r3,r3,r7
81120180:	18c00017 	ldw	r3,0(r3)
81120184:	1800683a 	jmp	r3
81120188:	81120248 	cmpgei	r4,r16,18441
8112018c:	81120460 	cmpeqi	r4,r16,18449
81120190:	81120460 	cmpeqi	r4,r16,18449
81120194:	81120460 	cmpeqi	r4,r16,18449
81120198:	81120460 	cmpeqi	r4,r16,18449
8112019c:	81120460 	cmpeqi	r4,r16,18449
811201a0:	81120460 	cmpeqi	r4,r16,18449
811201a4:	81120460 	cmpeqi	r4,r16,18449
811201a8:	81120460 	cmpeqi	r4,r16,18449
811201ac:	8112044c 	andi	r4,r16,18449
811201b0:	8112044c 	andi	r4,r16,18449
811201b4:	8112044c 	andi	r4,r16,18449
811201b8:	8112044c 	andi	r4,r16,18449
811201bc:	8112044c 	andi	r4,r16,18449
811201c0:	81120460 	cmpeqi	r4,r16,18449
811201c4:	81120460 	cmpeqi	r4,r16,18449
811201c8:	81120460 	cmpeqi	r4,r16,18449
811201cc:	81120460 	cmpeqi	r4,r16,18449
811201d0:	81120460 	cmpeqi	r4,r16,18449
811201d4:	81120460 	cmpeqi	r4,r16,18449
811201d8:	81120460 	cmpeqi	r4,r16,18449
811201dc:	81120460 	cmpeqi	r4,r16,18449
811201e0:	81120460 	cmpeqi	r4,r16,18449
811201e4:	81120460 	cmpeqi	r4,r16,18449
811201e8:	81120460 	cmpeqi	r4,r16,18449
811201ec:	81120460 	cmpeqi	r4,r16,18449
811201f0:	81120460 	cmpeqi	r4,r16,18449
811201f4:	81120460 	cmpeqi	r4,r16,18449
811201f8:	81120460 	cmpeqi	r4,r16,18449
811201fc:	81120460 	cmpeqi	r4,r16,18449
81120200:	81120460 	cmpeqi	r4,r16,18449
81120204:	81120460 	cmpeqi	r4,r16,18449
81120208:	8112044c 	andi	r4,r16,18449
8112020c:	81120460 	cmpeqi	r4,r16,18449
81120210:	81120460 	cmpeqi	r4,r16,18449
81120214:	81120460 	cmpeqi	r4,r16,18449
81120218:	81120460 	cmpeqi	r4,r16,18449
8112021c:	81120460 	cmpeqi	r4,r16,18449
81120220:	81120460 	cmpeqi	r4,r16,18449
81120224:	81120460 	cmpeqi	r4,r16,18449
81120228:	81120460 	cmpeqi	r4,r16,18449
8112022c:	81120460 	cmpeqi	r4,r16,18449
81120230:	81120460 	cmpeqi	r4,r16,18449
81120234:	811202a0 	cmpeqi	r4,r16,18442
81120238:	81120460 	cmpeqi	r4,r16,18449
8112023c:	81120440 	call	88112044 <__reset+0x20f2044>
81120240:	00801244 	movi	r2,73
81120244:	88843526 	beq	r17,r2,8112131c <_strtod_r+0x1210>
81120248:	002b883a 	mov	r21,zero
8112024c:	002d883a 	mov	r22,zero
81120250:	a0000526 	beq	r20,zero,81120268 <_strtod_r+0x15c>
81120254:	d8000715 	stw	zero,28(sp)
81120258:	a5c00015 	stw	r23,0(r20)
8112025c:	d9000717 	ldw	r4,28(sp)
81120260:	20000126 	beq	r4,zero,81120268 <_strtod_r+0x15c>
81120264:	b5a0003c 	xorhi	r22,r22,32768
81120268:	a805883a 	mov	r2,r21
8112026c:	b007883a 	mov	r3,r22
81120270:	dfc01d17 	ldw	ra,116(sp)
81120274:	df001c17 	ldw	fp,112(sp)
81120278:	ddc01b17 	ldw	r23,108(sp)
8112027c:	dd801a17 	ldw	r22,104(sp)
81120280:	dd401917 	ldw	r21,100(sp)
81120284:	dd001817 	ldw	r20,96(sp)
81120288:	dcc01717 	ldw	r19,92(sp)
8112028c:	dc801617 	ldw	r18,88(sp)
81120290:	dc401517 	ldw	r17,84(sp)
81120294:	dc001417 	ldw	r16,80(sp)
81120298:	dec01e04 	addi	sp,sp,120
8112029c:	f800283a 	ret
811202a0:	d8000715 	stw	zero,28(sp)
811202a4:	24c00044 	addi	r19,r4,1
811202a8:	dcc00615 	stw	r19,24(sp)
811202ac:	20800043 	ldbu	r2,1(r4)
811202b0:	10c03fcc 	andi	r3,r2,255
811202b4:	18c0201c 	xori	r3,r3,128
811202b8:	18ffe004 	addi	r3,r3,-128
811202bc:	183fe226 	beq	r3,zero,81120248 <__reset+0xfb100248>
811202c0:	11403fcc 	andi	r5,r2,255
811202c4:	2940201c 	xori	r5,r5,128
811202c8:	297fe004 	addi	r5,r5,-128
811202cc:	00c00c04 	movi	r3,48
811202d0:	28c0e526 	beq	r5,r3,81120668 <_strtod_r+0x55c>
811202d4:	dcc00815 	stw	r19,32(sp)
811202d8:	0025883a 	mov	r18,zero
811202dc:	10fff404 	addi	r3,r2,-48
811202e0:	18c03fcc 	andi	r3,r3,255
811202e4:	01000244 	movi	r4,9
811202e8:	20c37536 	bltu	r4,r3,811210c0 <_strtod_r+0xfb4>
811202ec:	dd400817 	ldw	r21,32(sp)
811202f0:	0027883a 	mov	r19,zero
811202f4:	0039883a 	mov	fp,zero
811202f8:	002d883a 	mov	r22,zero
811202fc:	01400204 	movi	r5,8
81120300:	2d805a16 	blt	r5,r22,8112046c <_strtod_r+0x360>
81120304:	e70002a4 	muli	fp,fp,10
81120308:	10c03fcc 	andi	r3,r2,255
8112030c:	18c0201c 	xori	r3,r3,128
81120310:	18ffe004 	addi	r3,r3,-128
81120314:	e0f9883a 	add	fp,fp,r3
81120318:	e73ff404 	addi	fp,fp,-48
8112031c:	ad400044 	addi	r21,r21,1
81120320:	dd400615 	stw	r21,24(sp)
81120324:	a8800003 	ldbu	r2,0(r21)
81120328:	b5800044 	addi	r22,r22,1
8112032c:	10fff404 	addi	r3,r2,-48
81120330:	18c03fcc 	andi	r3,r3,255
81120334:	20fff22e 	bgeu	r4,r3,81120300 <__reset+0xfb100300>
81120338:	14403fcc 	andi	r17,r2,255
8112033c:	8c40201c 	xori	r17,r17,128
81120340:	8c7fe004 	addi	r17,r17,-128
81120344:	8009883a 	mov	r4,r16
81120348:	111e32c0 	call	8111e32c <_localeconv_r>
8112034c:	11400017 	ldw	r5,0(r2)
81120350:	8009883a 	mov	r4,r16
81120354:	d9401315 	stw	r5,76(sp)
81120358:	111e32c0 	call	8111e32c <_localeconv_r>
8112035c:	11000017 	ldw	r4,0(r2)
81120360:	111510c0 	call	8111510c <strlen>
81120364:	d9401317 	ldw	r5,76(sp)
81120368:	100d883a 	mov	r6,r2
8112036c:	a809883a 	mov	r4,r21
81120370:	1125cfc0 	call	81125cfc <strncmp>
81120374:	1000ce26 	beq	r2,zero,811206b0 <_strtod_r+0x5a4>
81120378:	b013883a 	mov	r9,r22
8112037c:	000b883a 	mov	r5,zero
81120380:	0015883a 	mov	r10,zero
81120384:	0017883a 	mov	r11,zero
81120388:	00801944 	movi	r2,101
8112038c:	88807826 	beq	r17,r2,81120570 <_strtod_r+0x464>
81120390:	00801144 	movi	r2,69
81120394:	88807626 	beq	r17,r2,81120570 <_strtod_r+0x464>
81120398:	002b883a 	mov	r21,zero
8112039c:	48003d1e 	bne	r9,zero,81120494 <_strtod_r+0x388>
811203a0:	2800391e 	bne	r5,zero,81120488 <_strtod_r+0x37c>
811203a4:	9000381e 	bne	r18,zero,81120488 <_strtod_r+0x37c>
811203a8:	583fa71e 	bne	r11,zero,81120248 <__reset+0xfb100248>
811203ac:	00801384 	movi	r2,78
811203b0:	88800526 	beq	r17,r2,811203c8 <_strtod_r+0x2bc>
811203b4:	147fa20e 	bge	r2,r17,81120240 <__reset+0xfb100240>
811203b8:	00801a44 	movi	r2,105
811203bc:	8883d726 	beq	r17,r2,8112131c <_strtod_r+0x1210>
811203c0:	00801b84 	movi	r2,110
811203c4:	88bfa01e 	bne	r17,r2,81120248 <__reset+0xfb100248>
811203c8:	01604534 	movhi	r5,33044
811203cc:	d9000617 	ldw	r4,24(sp)
811203d0:	2947fc04 	addi	r5,r5,8176
811203d4:	01c00644 	movi	r7,25
811203d8:	00000b06 	br	81120408 <_strtod_r+0x2fc>
811203dc:	21000044 	addi	r4,r4,1
811203e0:	20800003 	ldbu	r2,0(r4)
811203e4:	10ffefc4 	addi	r3,r2,-65
811203e8:	10803fcc 	andi	r2,r2,255
811203ec:	1080201c 	xori	r2,r2,128
811203f0:	18c03fcc 	andi	r3,r3,255
811203f4:	10bfe004 	addi	r2,r2,-128
811203f8:	38c00136 	bltu	r7,r3,81120400 <_strtod_r+0x2f4>
811203fc:	10800804 	addi	r2,r2,32
81120400:	29400044 	addi	r5,r5,1
81120404:	11bf901e 	bne	r2,r6,81120248 <__reset+0xfb100248>
81120408:	29800007 	ldb	r6,0(r5)
8112040c:	303ff31e 	bne	r6,zero,811203dc <__reset+0xfb1003dc>
81120410:	20800044 	addi	r2,r4,1
81120414:	d8800615 	stw	r2,24(sp)
81120418:	20c00047 	ldb	r3,1(r4)
8112041c:	00800a04 	movi	r2,40
81120420:	18849d26 	beq	r3,r2,81121698 <_strtod_r+0x158c>
81120424:	047ffe34 	movhi	r17,65528
81120428:	0025883a 	mov	r18,zero
8112042c:	902b883a 	mov	r21,r18
81120430:	882d883a 	mov	r22,r17
81120434:	a03f8926 	beq	r20,zero,8112025c <__reset+0xfb10025c>
81120438:	ddc00617 	ldw	r23,24(sp)
8112043c:	003f8606 	br	81120258 <__reset+0xfb100258>
81120440:	00800044 	movi	r2,1
81120444:	d8800715 	stw	r2,28(sp)
81120448:	003f9606 	br	811202a4 <__reset+0xfb1002a4>
8112044c:	21000044 	addi	r4,r4,1
81120450:	d9000615 	stw	r4,24(sp)
81120454:	20800003 	ldbu	r2,0(r4)
81120458:	10c03fcc 	andi	r3,r2,255
8112045c:	28ff462e 	bgeu	r5,r3,81120178 <__reset+0xfb100178>
81120460:	2027883a 	mov	r19,r4
81120464:	d8000715 	stw	zero,28(sp)
81120468:	003f9506 	br	811202c0 <__reset+0xfb1002c0>
8112046c:	9cc002a4 	muli	r19,r19,10
81120470:	10803fcc 	andi	r2,r2,255
81120474:	1080201c 	xori	r2,r2,128
81120478:	10bfe004 	addi	r2,r2,-128
8112047c:	9885883a 	add	r2,r19,r2
81120480:	14fff404 	addi	r19,r2,-48
81120484:	003fa506 	br	8112031c <__reset+0xfb10031c>
81120488:	002b883a 	mov	r21,zero
8112048c:	002d883a 	mov	r22,zero
81120490:	003fe806 	br	81120434 <__reset+0xfb100434>
81120494:	aaabc83a 	sub	r21,r21,r10
81120498:	b000011e 	bne	r22,zero,811204a0 <_strtod_r+0x394>
8112049c:	482d883a 	mov	r22,r9
811204a0:	00800404 	movi	r2,16
811204a4:	482f883a 	mov	r23,r9
811204a8:	1240010e 	bge	r2,r9,811204b0 <_strtod_r+0x3a4>
811204ac:	102f883a 	mov	r23,r2
811204b0:	e009883a 	mov	r4,fp
811204b4:	da401315 	stw	r9,76(sp)
811204b8:	1128d1c0 	call	81128d1c <__floatunsidf>
811204bc:	1025883a 	mov	r18,r2
811204c0:	00800244 	movi	r2,9
811204c4:	1823883a 	mov	r17,r3
811204c8:	da401317 	ldw	r9,76(sp)
811204cc:	15c0160e 	bge	r2,r23,81120528 <_strtod_r+0x41c>
811204d0:	b8bffdc4 	addi	r2,r23,-9
811204d4:	100490fa 	slli	r2,r2,3
811204d8:	180b883a 	mov	r5,r3
811204dc:	00e04534 	movhi	r3,33044
811204e0:	18c7c704 	addi	r3,r3,7964
811204e4:	1885883a 	add	r2,r3,r2
811204e8:	11800017 	ldw	r6,0(r2)
811204ec:	11c00117 	ldw	r7,4(r2)
811204f0:	9009883a 	mov	r4,r18
811204f4:	11129a80 	call	811129a8 <__muldf3>
811204f8:	9809883a 	mov	r4,r19
811204fc:	1025883a 	mov	r18,r2
81120500:	1823883a 	mov	r17,r3
81120504:	1128d1c0 	call	81128d1c <__floatunsidf>
81120508:	9009883a 	mov	r4,r18
8112050c:	880b883a 	mov	r5,r17
81120510:	100d883a 	mov	r6,r2
81120514:	180f883a 	mov	r7,r3
81120518:	1126eb80 	call	81126eb8 <__adddf3>
8112051c:	da401317 	ldw	r9,76(sp)
81120520:	1025883a 	mov	r18,r2
81120524:	1823883a 	mov	r17,r3
81120528:	008003c4 	movi	r2,15
8112052c:	12407b16 	blt	r2,r9,8112071c <_strtod_r+0x610>
81120530:	a83fbe26 	beq	r21,zero,8112042c <__reset+0xfb10042c>
81120534:	0543670e 	bge	zero,r21,811212d4 <_strtod_r+0x11c8>
81120538:	00c00584 	movi	r3,22
8112053c:	1d42e816 	blt	r3,r21,811210e0 <_strtod_r+0xfd4>
81120540:	a82a90fa 	slli	r21,r21,3
81120544:	00a04534 	movhi	r2,33044
81120548:	1087c704 	addi	r2,r2,7964
8112054c:	1545883a 	add	r2,r2,r21
81120550:	11000017 	ldw	r4,0(r2)
81120554:	11400117 	ldw	r5,4(r2)
81120558:	900d883a 	mov	r6,r18
8112055c:	880f883a 	mov	r7,r17
81120560:	11129a80 	call	811129a8 <__muldf3>
81120564:	102b883a 	mov	r21,r2
81120568:	182d883a 	mov	r22,r3
8112056c:	003fb106 	br	81120434 <__reset+0xfb100434>
81120570:	4801b526 	beq	r9,zero,81120c48 <_strtod_r+0xb3c>
81120574:	ddc00617 	ldw	r23,24(sp)
81120578:	00c00ac4 	movi	r3,43
8112057c:	b8800044 	addi	r2,r23,1
81120580:	d8800615 	stw	r2,24(sp)
81120584:	b8800047 	ldb	r2,1(r23)
81120588:	10c1e926 	beq	r2,r3,81120d30 <_strtod_r+0xc24>
8112058c:	00c00b44 	movi	r3,45
81120590:	10c1ec26 	beq	r2,r3,81120d44 <_strtod_r+0xc38>
81120594:	1023883a 	mov	r17,r2
81120598:	0019883a 	mov	r12,zero
8112059c:	88bff404 	addi	r2,r17,-48
811205a0:	00c00244 	movi	r3,9
811205a4:	1881b736 	bltu	r3,r2,81120c84 <_strtod_r+0xb78>
811205a8:	00800c04 	movi	r2,48
811205ac:	8880071e 	bne	r17,r2,811205cc <_strtod_r+0x4c0>
811205b0:	d8800617 	ldw	r2,24(sp)
811205b4:	8807883a 	mov	r3,r17
811205b8:	10800044 	addi	r2,r2,1
811205bc:	d8800615 	stw	r2,24(sp)
811205c0:	14400007 	ldb	r17,0(r2)
811205c4:	10800044 	addi	r2,r2,1
811205c8:	88fffc26 	beq	r17,r3,811205bc <__reset+0xfb1005bc>
811205cc:	88bff3c4 	addi	r2,r17,-49
811205d0:	00c00204 	movi	r3,8
811205d4:	18bf7036 	bltu	r3,r2,81120398 <__reset+0xfb100398>
811205d8:	db800617 	ldw	r14,24(sp)
811205dc:	88bff404 	addi	r2,r17,-48
811205e0:	03400244 	movi	r13,9
811205e4:	71c00044 	addi	r7,r14,1
811205e8:	d9c00615 	stw	r7,24(sp)
811205ec:	74400043 	ldbu	r17,1(r14)
811205f0:	88fff404 	addi	r3,r17,-48
811205f4:	8c403fcc 	andi	r17,r17,255
811205f8:	8c40201c 	xori	r17,r17,128
811205fc:	18c03fcc 	andi	r3,r3,255
81120600:	8c7fe004 	addi	r17,r17,-128
81120604:	68c00e36 	bltu	r13,r3,81120640 <_strtod_r+0x534>
81120608:	71000084 	addi	r4,r14,2
8112060c:	d9000615 	stw	r4,24(sp)
81120610:	108002a4 	muli	r2,r2,10
81120614:	21800003 	ldbu	r6,0(r4)
81120618:	200f883a 	mov	r7,r4
8112061c:	1463883a 	add	r17,r2,r17
81120620:	30fff404 	addi	r3,r6,-48
81120624:	88bff404 	addi	r2,r17,-48
81120628:	34403fcc 	andi	r17,r6,255
8112062c:	8c40201c 	xori	r17,r17,128
81120630:	18c03fcc 	andi	r3,r3,255
81120634:	8c7fe004 	addi	r17,r17,-128
81120638:	21000044 	addi	r4,r4,1
8112063c:	68fff32e 	bgeu	r13,r3,8112060c <__reset+0xfb10060c>
81120640:	3b8fc83a 	sub	r7,r7,r14
81120644:	00c00204 	movi	r3,8
81120648:	19c29716 	blt	r3,r7,811210a8 <_strtod_r+0xf9c>
8112064c:	102b883a 	mov	r21,r2
81120650:	009387c4 	movi	r2,19999
81120654:	1540010e 	bge	r2,r21,8112065c <_strtod_r+0x550>
81120658:	102b883a 	mov	r21,r2
8112065c:	603f4f26 	beq	r12,zero,8112039c <__reset+0xfb10039c>
81120660:	056bc83a 	sub	r21,zero,r21
81120664:	003f4d06 	br	8112039c <__reset+0xfb10039c>
81120668:	98800047 	ldb	r2,1(r19)
8112066c:	00c01604 	movi	r3,88
81120670:	10c1de26 	beq	r2,r3,81120dec <_strtod_r+0xce0>
81120674:	00c01e04 	movi	r3,120
81120678:	10c1dc26 	beq	r2,r3,81120dec <_strtod_r+0xce0>
8112067c:	98c00044 	addi	r3,r19,1
81120680:	1827883a 	mov	r19,r3
81120684:	d8c00615 	stw	r3,24(sp)
81120688:	18c00044 	addi	r3,r3,1
8112068c:	18bfffc3 	ldbu	r2,-1(r3)
81120690:	11003fcc 	andi	r4,r2,255
81120694:	2100201c 	xori	r4,r4,128
81120698:	213fe004 	addi	r4,r4,-128
8112069c:	217ff826 	beq	r4,r5,81120680 <__reset+0xfb100680>
811206a0:	203f7926 	beq	r4,zero,81120488 <__reset+0xfb100488>
811206a4:	dcc00815 	stw	r19,32(sp)
811206a8:	04800044 	movi	r18,1
811206ac:	003f0b06 	br	811202dc <__reset+0xfb1002dc>
811206b0:	8009883a 	mov	r4,r16
811206b4:	111e32c0 	call	8111e32c <_localeconv_r>
811206b8:	11000017 	ldw	r4,0(r2)
811206bc:	111510c0 	call	8111510c <strlen>
811206c0:	d8c00617 	ldw	r3,24(sp)
811206c4:	1885883a 	add	r2,r3,r2
811206c8:	d8800615 	stw	r2,24(sp)
811206cc:	14400007 	ldb	r17,0(r2)
811206d0:	b001881e 	bne	r22,zero,81120cf4 <_strtod_r+0xbe8>
811206d4:	00c00c04 	movi	r3,48
811206d8:	88c3391e 	bne	r17,r3,811213c0 <_strtod_r+0x12b4>
811206dc:	10c00044 	addi	r3,r2,1
811206e0:	8809883a 	mov	r4,r17
811206e4:	d8c00615 	stw	r3,24(sp)
811206e8:	1c400007 	ldb	r17,0(r3)
811206ec:	188bc83a 	sub	r5,r3,r2
811206f0:	18c00044 	addi	r3,r3,1
811206f4:	893ffb26 	beq	r17,r4,811206e4 <__reset+0xfb1006e4>
811206f8:	88bff3c4 	addi	r2,r17,-49
811206fc:	00c00204 	movi	r3,8
81120700:	1882e72e 	bgeu	r3,r2,811212a0 <_strtod_r+0x1194>
81120704:	00801944 	movi	r2,101
81120708:	88814d26 	beq	r17,r2,81120c40 <_strtod_r+0xb34>
8112070c:	0013883a 	mov	r9,zero
81120710:	0015883a 	mov	r10,zero
81120714:	02c00044 	movi	r11,1
81120718:	003f1d06 	br	81120390 <__reset+0xfb100390>
8112071c:	4defc83a 	sub	r23,r9,r23
81120720:	bd6f883a 	add	r23,r23,r21
81120724:	05c21e0e 	bge	zero,r23,81120fa0 <_strtod_r+0xe94>
81120728:	b88003cc 	andi	r2,r23,15
8112072c:	10000d26 	beq	r2,zero,81120764 <_strtod_r+0x658>
81120730:	100490fa 	slli	r2,r2,3
81120734:	00e04534 	movhi	r3,33044
81120738:	18c7c704 	addi	r3,r3,7964
8112073c:	1885883a 	add	r2,r3,r2
81120740:	11000017 	ldw	r4,0(r2)
81120744:	11400117 	ldw	r5,4(r2)
81120748:	900d883a 	mov	r6,r18
8112074c:	880f883a 	mov	r7,r17
81120750:	da401315 	stw	r9,76(sp)
81120754:	11129a80 	call	811129a8 <__muldf3>
81120758:	da401317 	ldw	r9,76(sp)
8112075c:	1025883a 	mov	r18,r2
81120760:	1823883a 	mov	r17,r3
81120764:	023ffc04 	movi	r8,-16
81120768:	ba10703a 	and	r8,r23,r8
8112076c:	40003c26 	beq	r8,zero,81120860 <_strtod_r+0x754>
81120770:	00804d04 	movi	r2,308
81120774:	1201cd16 	blt	r2,r8,81120eac <_strtod_r+0xda0>
81120778:	4011d13a 	srai	r8,r8,4
8112077c:	03000044 	movi	r12,1
81120780:	62037c0e 	bge	r12,r8,81121574 <_strtod_r+0x1468>
81120784:	01204534 	movhi	r4,33044
81120788:	2107bd04 	addi	r4,r4,7924
8112078c:	2015883a 	mov	r10,r4
81120790:	0027883a 	mov	r19,zero
81120794:	d9000915 	stw	r4,36(sp)
81120798:	9005883a 	mov	r2,r18
8112079c:	8807883a 	mov	r3,r17
811207a0:	dc000c15 	stw	r16,48(sp)
811207a4:	dc800e15 	stw	r18,56(sp)
811207a8:	9821883a 	mov	r16,r19
811207ac:	0009883a 	mov	r4,zero
811207b0:	8827883a 	mov	r19,r17
811207b4:	602f883a 	mov	r23,r12
811207b8:	da400a15 	stw	r9,40(sp)
811207bc:	5025883a 	mov	r18,r10
811207c0:	4023883a 	mov	r17,r8
811207c4:	8980004c 	andi	r6,r17,1
811207c8:	30000626 	beq	r6,zero,811207e4 <_strtod_r+0x6d8>
811207cc:	91800017 	ldw	r6,0(r18)
811207d0:	91c00117 	ldw	r7,4(r18)
811207d4:	1009883a 	mov	r4,r2
811207d8:	180b883a 	mov	r5,r3
811207dc:	11129a80 	call	811129a8 <__muldf3>
811207e0:	01000044 	movi	r4,1
811207e4:	8823d07a 	srai	r17,r17,1
811207e8:	84000044 	addi	r16,r16,1
811207ec:	94800204 	addi	r18,r18,8
811207f0:	8dfff41e 	bne	r17,r23,811207c4 <__reset+0xfb1007c4>
811207f4:	21003fcc 	andi	r4,r4,255
811207f8:	9823883a 	mov	r17,r19
811207fc:	da400a17 	ldw	r9,40(sp)
81120800:	8027883a 	mov	r19,r16
81120804:	dc800e17 	ldw	r18,56(sp)
81120808:	dc000c17 	ldw	r16,48(sp)
8112080c:	2003b11e 	bne	r4,zero,811216d4 <_strtod_r+0x15c8>
81120810:	981690fa 	slli	r11,r19,3
81120814:	d8800917 	ldw	r2,36(sp)
81120818:	01ff2c34 	movhi	r7,64688
8112081c:	900d883a 	mov	r6,r18
81120820:	12ef883a 	add	r23,r2,r11
81120824:	b9000017 	ldw	r4,0(r23)
81120828:	b9400117 	ldw	r5,4(r23)
8112082c:	89cf883a 	add	r7,r17,r7
81120830:	da401315 	stw	r9,76(sp)
81120834:	11129a80 	call	811129a8 <__muldf3>
81120838:	1025883a 	mov	r18,r2
8112083c:	011f2834 	movhi	r4,31904
81120840:	189ffc2c 	andhi	r2,r3,32752
81120844:	da401317 	ldw	r9,76(sp)
81120848:	20819836 	bltu	r4,r2,81120eac <_strtod_r+0xda0>
8112084c:	011f2434 	movhi	r4,31888
81120850:	2083382e 	bgeu	r4,r2,81121534 <_strtod_r+0x1428>
81120854:	045ffc34 	movhi	r17,32752
81120858:	8c7fffc4 	addi	r17,r17,-1
8112085c:	04bfffc4 	movi	r18,-1
81120860:	d8000915 	stw	zero,36(sp)
81120864:	d9400817 	ldw	r5,32(sp)
81120868:	df000015 	stw	fp,0(sp)
8112086c:	480f883a 	mov	r7,r9
81120870:	b00d883a 	mov	r6,r22
81120874:	8009883a 	mov	r4,r16
81120878:	111ea480 	call	8111ea48 <__s2b>
8112087c:	d8800815 	stw	r2,32(sp)
81120880:	10018a26 	beq	r2,zero,81120eac <_strtod_r+0xda0>
81120884:	a807d7fa 	srai	r3,r21,31
81120888:	0545c83a 	sub	r2,zero,r21
8112088c:	dd400a15 	stw	r21,40(sp)
81120890:	1886703a 	and	r3,r3,r2
81120894:	d8c00c15 	stw	r3,48(sp)
81120898:	a8013516 	blt	r21,zero,81120d70 <_strtod_r+0xc64>
8112089c:	d9400817 	ldw	r5,32(sp)
811208a0:	0011883a 	mov	r8,zero
811208a4:	0027883a 	mov	r19,zero
811208a8:	29400304 	addi	r5,r5,12
811208ac:	d9400f15 	stw	r5,60(sp)
811208b0:	402b883a 	mov	r21,r8
811208b4:	dd001215 	stw	r20,72(sp)
811208b8:	d8800817 	ldw	r2,32(sp)
811208bc:	8009883a 	mov	r4,r16
811208c0:	11400117 	ldw	r5,4(r2)
811208c4:	111e8480 	call	8111e848 <_Balloc>
811208c8:	1029883a 	mov	r20,r2
811208cc:	10012d26 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
811208d0:	d8c00817 	ldw	r3,32(sp)
811208d4:	d9400f17 	ldw	r5,60(sp)
811208d8:	11000304 	addi	r4,r2,12
811208dc:	19800417 	ldw	r6,16(r3)
811208e0:	31800084 	addi	r6,r6,2
811208e4:	318d883a 	add	r6,r6,r6
811208e8:	318d883a 	add	r6,r6,r6
811208ec:	11145f80 	call	811145f8 <memcpy>
811208f0:	d9000204 	addi	r4,sp,8
811208f4:	d9000015 	stw	r4,0(sp)
811208f8:	d9c00404 	addi	r7,sp,16
811208fc:	900b883a 	mov	r5,r18
81120900:	880d883a 	mov	r6,r17
81120904:	8009883a 	mov	r4,r16
81120908:	111f5240 	call	8111f524 <__d2b>
8112090c:	d8800515 	stw	r2,20(sp)
81120910:	dc801115 	stw	r18,68(sp)
81120914:	dc401015 	stw	r17,64(sp)
81120918:	10027c26 	beq	r2,zero,8112130c <_strtod_r+0x1200>
8112091c:	01400044 	movi	r5,1
81120920:	8009883a 	mov	r4,r16
81120924:	111ec6c0 	call	8111ec6c <__i2b>
81120928:	1027883a 	mov	r19,r2
8112092c:	10011526 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
81120930:	d8800417 	ldw	r2,16(sp)
81120934:	1000c816 	blt	r2,zero,81120c58 <_strtod_r+0xb4c>
81120938:	d9400c17 	ldw	r5,48(sp)
8112093c:	d9000a17 	ldw	r4,40(sp)
81120940:	28ad883a 	add	r22,r5,r2
81120944:	d9400917 	ldw	r5,36(sp)
81120948:	df000217 	ldw	fp,8(sp)
8112094c:	05ff0084 	movi	r23,-1022
81120950:	1147c83a 	sub	r3,r2,r5
81120954:	1f07883a 	add	r3,r3,fp
81120958:	00800d84 	movi	r2,54
8112095c:	18ffffc4 	addi	r3,r3,-1
81120960:	1739c83a 	sub	fp,r2,fp
81120964:	1dc0a50e 	bge	r3,r23,81120bfc <_strtod_r+0xaf0>
81120968:	b8efc83a 	sub	r23,r23,r3
8112096c:	008007c4 	movi	r2,31
81120970:	e5f9c83a 	sub	fp,fp,r23
81120974:	15c0bc16 	blt	r2,r23,81120c68 <_strtod_r+0xb5c>
81120978:	00800044 	movi	r2,1
8112097c:	15c4983a 	sll	r2,r2,r23
81120980:	d8000b15 	stw	zero,44(sp)
81120984:	d8800d15 	stw	r2,52(sp)
81120988:	2707883a 	add	r3,r4,fp
8112098c:	d9000917 	ldw	r4,36(sp)
81120990:	b739883a 	add	fp,r22,fp
81120994:	20ef883a 	add	r23,r4,r3
81120998:	b009883a 	mov	r4,r22
8112099c:	e580010e 	bge	fp,r22,811209a4 <_strtod_r+0x898>
811209a0:	e009883a 	mov	r4,fp
811209a4:	b805883a 	mov	r2,r23
811209a8:	25c0010e 	bge	r4,r23,811209b0 <_strtod_r+0x8a4>
811209ac:	2005883a 	mov	r2,r4
811209b0:	0080030e 	bge	zero,r2,811209c0 <_strtod_r+0x8b4>
811209b4:	e0b9c83a 	sub	fp,fp,r2
811209b8:	b8afc83a 	sub	r23,r23,r2
811209bc:	b0adc83a 	sub	r22,r22,r2
811209c0:	d9400c17 	ldw	r5,48(sp)
811209c4:	28001126 	beq	r5,zero,81120a0c <_strtod_r+0x900>
811209c8:	280d883a 	mov	r6,r5
811209cc:	8009883a 	mov	r4,r16
811209d0:	980b883a 	mov	r5,r19
811209d4:	111eeb00 	call	8111eeb0 <__pow5mult>
811209d8:	1027883a 	mov	r19,r2
811209dc:	1000e926 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
811209e0:	d9800517 	ldw	r6,20(sp)
811209e4:	100b883a 	mov	r5,r2
811209e8:	8009883a 	mov	r4,r16
811209ec:	111ecb00 	call	8111ecb0 <__multiply>
811209f0:	1000e426 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
811209f4:	d9400517 	ldw	r5,20(sp)
811209f8:	8009883a 	mov	r4,r16
811209fc:	d8801315 	stw	r2,76(sp)
81120a00:	111e8f80 	call	8111e8f8 <_Bfree>
81120a04:	d8801317 	ldw	r2,76(sp)
81120a08:	d8800515 	stw	r2,20(sp)
81120a0c:	0700060e 	bge	zero,fp,81120a28 <_strtod_r+0x91c>
81120a10:	d9400517 	ldw	r5,20(sp)
81120a14:	e00d883a 	mov	r6,fp
81120a18:	8009883a 	mov	r4,r16
81120a1c:	111eff80 	call	8111eff8 <__lshift>
81120a20:	d8800515 	stw	r2,20(sp)
81120a24:	10023926 	beq	r2,zero,8112130c <_strtod_r+0x1200>
81120a28:	d8800a17 	ldw	r2,40(sp)
81120a2c:	10000626 	beq	r2,zero,81120a48 <_strtod_r+0x93c>
81120a30:	d9800a17 	ldw	r6,40(sp)
81120a34:	a00b883a 	mov	r5,r20
81120a38:	8009883a 	mov	r4,r16
81120a3c:	111eeb00 	call	8111eeb0 <__pow5mult>
81120a40:	1029883a 	mov	r20,r2
81120a44:	1000cf26 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
81120a48:	05c0060e 	bge	zero,r23,81120a64 <_strtod_r+0x958>
81120a4c:	a00b883a 	mov	r5,r20
81120a50:	b80d883a 	mov	r6,r23
81120a54:	8009883a 	mov	r4,r16
81120a58:	111eff80 	call	8111eff8 <__lshift>
81120a5c:	1029883a 	mov	r20,r2
81120a60:	1000c826 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
81120a64:	0580060e 	bge	zero,r22,81120a80 <_strtod_r+0x974>
81120a68:	980b883a 	mov	r5,r19
81120a6c:	b00d883a 	mov	r6,r22
81120a70:	8009883a 	mov	r4,r16
81120a74:	111eff80 	call	8111eff8 <__lshift>
81120a78:	1027883a 	mov	r19,r2
81120a7c:	1000c126 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
81120a80:	d9400517 	ldw	r5,20(sp)
81120a84:	a00d883a 	mov	r6,r20
81120a88:	8009883a 	mov	r4,r16
81120a8c:	111f1a80 	call	8111f1a8 <__mdiff>
81120a90:	102b883a 	mov	r21,r2
81120a94:	1000bb26 	beq	r2,zero,81120d84 <_strtod_r+0xc78>
81120a98:	10c00317 	ldw	r3,12(r2)
81120a9c:	980b883a 	mov	r5,r19
81120aa0:	10000315 	stw	zero,12(r2)
81120aa4:	1009883a 	mov	r4,r2
81120aa8:	d8c00e15 	stw	r3,56(sp)
81120aac:	111f1480 	call	8111f148 <__mcmp>
81120ab0:	10027616 	blt	r2,zero,8112148c <_strtod_r+0x1380>
81120ab4:	10024426 	beq	r2,zero,811213c8 <_strtod_r+0x12bc>
81120ab8:	980b883a 	mov	r5,r19
81120abc:	a809883a 	mov	r4,r21
81120ac0:	111f6780 	call	8111f678 <__ratio>
81120ac4:	000d883a 	mov	r6,zero
81120ac8:	01d00034 	movhi	r7,16384
81120acc:	1009883a 	mov	r4,r2
81120ad0:	180b883a 	mov	r5,r3
81120ad4:	102f883a 	mov	r23,r2
81120ad8:	182d883a 	mov	r22,r3
81120adc:	11281c00 	call	811281c0 <__ledf2>
81120ae0:	00804a16 	blt	zero,r2,81120c0c <_strtod_r+0xb00>
81120ae4:	d9400e17 	ldw	r5,56(sp)
81120ae8:	28006b26 	beq	r5,zero,81120c98 <_strtod_r+0xb8c>
81120aec:	058ffc34 	movhi	r22,16368
81120af0:	d8000b15 	stw	zero,44(sp)
81120af4:	d8000d15 	stw	zero,52(sp)
81120af8:	b02f883a 	mov	r23,r22
81120afc:	8f1ffc2c 	andhi	fp,r17,32752
81120b00:	009ff834 	movhi	r2,32736
81120b04:	e080cd26 	beq	fp,r2,81120e3c <_strtod_r+0xd30>
81120b08:	d9400917 	ldw	r5,36(sp)
81120b0c:	28001a26 	beq	r5,zero,81120b78 <_strtod_r+0xa6c>
81120b10:	0081a834 	movhi	r2,1696
81120b14:	17001836 	bltu	r2,fp,81120b78 <_strtod_r+0xa6c>
81120b18:	d9000d17 	ldw	r4,52(sp)
81120b1c:	01d07834 	movhi	r7,16864
81120b20:	39ffffc4 	addi	r7,r7,-1
81120b24:	01bff034 	movhi	r6,65472
81120b28:	b80b883a 	mov	r5,r23
81120b2c:	11281c00 	call	811281c0 <__ledf2>
81120b30:	00800e16 	blt	zero,r2,81120b6c <_strtod_r+0xa60>
81120b34:	d9000d17 	ldw	r4,52(sp)
81120b38:	b80b883a 	mov	r5,r23
81120b3c:	1125fcc0 	call	81125fcc <__fixunsdfsi>
81120b40:	10018126 	beq	r2,zero,81121148 <_strtod_r+0x103c>
81120b44:	1009883a 	mov	r4,r2
81120b48:	1128d1c0 	call	81128d1c <__floatunsidf>
81120b4c:	d8800d15 	stw	r2,52(sp)
81120b50:	182f883a 	mov	r23,r3
81120b54:	d8800e17 	ldw	r2,56(sp)
81120b58:	1001791e 	bne	r2,zero,81121140 <_strtod_r+0x1034>
81120b5c:	ba20003c 	xorhi	r8,r23,32768
81120b60:	d8c00d17 	ldw	r3,52(sp)
81120b64:	402d883a 	mov	r22,r8
81120b68:	d8c00b15 	stw	r3,44(sp)
81120b6c:	0081ac34 	movhi	r2,1712
81120b70:	b091883a 	add	r8,r22,r2
81120b74:	472dc83a 	sub	r22,r8,fp
81120b78:	9009883a 	mov	r4,r18
81120b7c:	880b883a 	mov	r5,r17
81120b80:	111f3ac0 	call	8111f3ac <__ulp>
81120b84:	d9000b17 	ldw	r4,44(sp)
81120b88:	b00b883a 	mov	r5,r22
81120b8c:	100d883a 	mov	r6,r2
81120b90:	180f883a 	mov	r7,r3
81120b94:	11129a80 	call	811129a8 <__muldf3>
81120b98:	900d883a 	mov	r6,r18
81120b9c:	880f883a 	mov	r7,r17
81120ba0:	1009883a 	mov	r4,r2
81120ba4:	180b883a 	mov	r5,r3
81120ba8:	1126eb80 	call	81126eb8 <__adddf3>
81120bac:	1025883a 	mov	r18,r2
81120bb0:	1823883a 	mov	r17,r3
81120bb4:	182d883a 	mov	r22,r3
81120bb8:	d9000917 	ldw	r4,36(sp)
81120bbc:	2000021e 	bne	r4,zero,81120bc8 <_strtod_r+0xabc>
81120bc0:	b09ffc2c 	andhi	r2,r22,32752
81120bc4:	e080be26 	beq	fp,r2,81120ec0 <_strtod_r+0xdb4>
81120bc8:	d9400517 	ldw	r5,20(sp)
81120bcc:	8009883a 	mov	r4,r16
81120bd0:	111e8f80 	call	8111e8f8 <_Bfree>
81120bd4:	a00b883a 	mov	r5,r20
81120bd8:	8009883a 	mov	r4,r16
81120bdc:	111e8f80 	call	8111e8f8 <_Bfree>
81120be0:	980b883a 	mov	r5,r19
81120be4:	8009883a 	mov	r4,r16
81120be8:	111e8f80 	call	8111e8f8 <_Bfree>
81120bec:	a80b883a 	mov	r5,r21
81120bf0:	8009883a 	mov	r4,r16
81120bf4:	111e8f80 	call	8111e8f8 <_Bfree>
81120bf8:	003f2f06 	br	811208b8 <__reset+0xfb1008b8>
81120bfc:	00c00044 	movi	r3,1
81120c00:	d8000b15 	stw	zero,44(sp)
81120c04:	d8c00d15 	stw	r3,52(sp)
81120c08:	003f5f06 	br	81120988 <__reset+0xfb100988>
81120c0c:	b809883a 	mov	r4,r23
81120c10:	000d883a 	mov	r6,zero
81120c14:	01cff834 	movhi	r7,16352
81120c18:	b00b883a 	mov	r5,r22
81120c1c:	11129a80 	call	811129a8 <__muldf3>
81120c20:	d9000e17 	ldw	r4,56(sp)
81120c24:	d8800d15 	stw	r2,52(sp)
81120c28:	182f883a 	mov	r23,r3
81120c2c:	2000181e 	bne	r4,zero,81120c90 <_strtod_r+0xb84>
81120c30:	1a20003c 	xorhi	r8,r3,32768
81120c34:	d8800b15 	stw	r2,44(sp)
81120c38:	402d883a 	mov	r22,r8
81120c3c:	003faf06 	br	81120afc <__reset+0xfb100afc>
81120c40:	0015883a 	mov	r10,zero
81120c44:	02c00044 	movi	r11,1
81120c48:	2800011e 	bne	r5,zero,81120c50 <_strtod_r+0xb44>
81120c4c:	903d7e26 	beq	r18,zero,81120248 <__reset+0xfb100248>
81120c50:	0013883a 	mov	r9,zero
81120c54:	003e4706 	br	81120574 <__reset+0xfb100574>
81120c58:	d8c00a17 	ldw	r3,40(sp)
81120c5c:	dd800c17 	ldw	r22,48(sp)
81120c60:	1889c83a 	sub	r4,r3,r2
81120c64:	003f3706 	br	81120944 <__reset+0xfb100944>
81120c68:	00bef884 	movi	r2,-1054
81120c6c:	05c00044 	movi	r23,1
81120c70:	10c5c83a 	sub	r2,r2,r3
81120c74:	b884983a 	sll	r2,r23,r2
81120c78:	ddc00d15 	stw	r23,52(sp)
81120c7c:	d8800b15 	stw	r2,44(sp)
81120c80:	003f4106 	br	81120988 <__reset+0xfb100988>
81120c84:	ddc00615 	stw	r23,24(sp)
81120c88:	002b883a 	mov	r21,zero
81120c8c:	003dc306 	br	8112039c <__reset+0xfb10039c>
81120c90:	1811883a 	mov	r8,r3
81120c94:	003fe706 	br	81120c34 <__reset+0xfb100c34>
81120c98:	90002e1e 	bne	r18,zero,81120d54 <_strtod_r+0xc48>
81120c9c:	00c00434 	movhi	r3,16
81120ca0:	18ffffc4 	addi	r3,r3,-1
81120ca4:	88c4703a 	and	r2,r17,r3
81120ca8:	10002c1e 	bne	r2,zero,81120d5c <_strtod_r+0xc50>
81120cac:	000d883a 	mov	r6,zero
81120cb0:	01cffc34 	movhi	r7,16368
81120cb4:	b809883a 	mov	r4,r23
81120cb8:	b00b883a 	mov	r5,r22
81120cbc:	11281c00 	call	811281c0 <__ledf2>
81120cc0:	10021716 	blt	r2,zero,81121520 <_strtod_r+0x1414>
81120cc4:	b809883a 	mov	r4,r23
81120cc8:	b00b883a 	mov	r5,r22
81120ccc:	000d883a 	mov	r6,zero
81120cd0:	01cff834 	movhi	r7,16352
81120cd4:	11129a80 	call	811129a8 <__muldf3>
81120cd8:	d8800d15 	stw	r2,52(sp)
81120cdc:	182f883a 	mov	r23,r3
81120ce0:	102d883a 	mov	r22,r2
81120ce4:	1a20003c 	xorhi	r8,r3,32768
81120ce8:	dd800b15 	stw	r22,44(sp)
81120cec:	402d883a 	mov	r22,r8
81120cf0:	003f8206 	br	81120afc <__reset+0xfb100afc>
81120cf4:	b013883a 	mov	r9,r22
81120cf8:	000b883a 	mov	r5,zero
81120cfc:	0015883a 	mov	r10,zero
81120d00:	893ff404 	addi	r4,r17,-48
81120d04:	00800244 	movi	r2,9
81120d08:	11001036 	bltu	r2,r4,81120d4c <_strtod_r+0xc40>
81120d0c:	28c00044 	addi	r3,r5,1
81120d10:	2023883a 	mov	r17,r4
81120d14:	20014d1e 	bne	r4,zero,8112124c <_strtod_r+0x1140>
81120d18:	d9800617 	ldw	r6,24(sp)
81120d1c:	180b883a 	mov	r5,r3
81120d20:	30800044 	addi	r2,r6,1
81120d24:	d8800615 	stw	r2,24(sp)
81120d28:	34400047 	ldb	r17,1(r6)
81120d2c:	003ff406 	br	81120d00 <__reset+0xfb100d00>
81120d30:	0019883a 	mov	r12,zero
81120d34:	b8800084 	addi	r2,r23,2
81120d38:	d8800615 	stw	r2,24(sp)
81120d3c:	bc400087 	ldb	r17,2(r23)
81120d40:	003e1606 	br	8112059c <__reset+0xfb10059c>
81120d44:	03000044 	movi	r12,1
81120d48:	003ffa06 	br	81120d34 <__reset+0xfb100d34>
81120d4c:	02c00044 	movi	r11,1
81120d50:	003d8d06 	br	81120388 <__reset+0xfb100388>
81120d54:	00800044 	movi	r2,1
81120d58:	9080fe26 	beq	r18,r2,81121154 <_strtod_r+0x1048>
81120d5c:	d8000b15 	stw	zero,44(sp)
81120d60:	05affc34 	movhi	r22,49136
81120d64:	d8000d15 	stw	zero,52(sp)
81120d68:	05cffc34 	movhi	r23,16368
81120d6c:	003f6306 	br	81120afc <__reset+0xfb100afc>
81120d70:	d8000a15 	stw	zero,40(sp)
81120d74:	003ec906 	br	8112089c <__reset+0xfb10089c>
81120d78:	d9001117 	ldw	r4,68(sp)
81120d7c:	00bfffc4 	movi	r2,-1
81120d80:	2080461e 	bne	r4,r2,81120e9c <_strtod_r+0xd90>
81120d84:	dd000a15 	stw	r20,40(sp)
81120d88:	dd001217 	ldw	r20,72(sp)
81120d8c:	a811883a 	mov	r8,r21
81120d90:	d8800517 	ldw	r2,20(sp)
81120d94:	00c00884 	movi	r3,34
81120d98:	80c00015 	stw	r3,0(r16)
81120d9c:	002b883a 	mov	r21,zero
81120da0:	059ffc34 	movhi	r22,32752
81120da4:	100b883a 	mov	r5,r2
81120da8:	8009883a 	mov	r4,r16
81120dac:	da001315 	stw	r8,76(sp)
81120db0:	111e8f80 	call	8111e8f8 <_Bfree>
81120db4:	d9400a17 	ldw	r5,40(sp)
81120db8:	8009883a 	mov	r4,r16
81120dbc:	111e8f80 	call	8111e8f8 <_Bfree>
81120dc0:	980b883a 	mov	r5,r19
81120dc4:	8009883a 	mov	r4,r16
81120dc8:	111e8f80 	call	8111e8f8 <_Bfree>
81120dcc:	d9400817 	ldw	r5,32(sp)
81120dd0:	8009883a 	mov	r4,r16
81120dd4:	111e8f80 	call	8111e8f8 <_Bfree>
81120dd8:	da001317 	ldw	r8,76(sp)
81120ddc:	8009883a 	mov	r4,r16
81120de0:	400b883a 	mov	r5,r8
81120de4:	111e8f80 	call	8111e8f8 <_Bfree>
81120de8:	003d9206 	br	81120434 <__reset+0xfb100434>
81120dec:	d8c00717 	ldw	r3,28(sp)
81120df0:	d8800504 	addi	r2,sp,20
81120df4:	01a04534 	movhi	r6,33044
81120df8:	31880204 	addi	r6,r6,8200
81120dfc:	d8c00115 	stw	r3,4(sp)
81120e00:	d8800015 	stw	r2,0(sp)
81120e04:	d9c00404 	addi	r7,sp,16
81120e08:	d9400604 	addi	r5,sp,24
81120e0c:	8009883a 	mov	r4,r16
81120e10:	11252600 	call	81125260 <__gethex>
81120e14:	154001cc 	andi	r21,r2,7
81120e18:	a83d9b26 	beq	r21,zero,81120488 <__reset+0xfb100488>
81120e1c:	00c00184 	movi	r3,6
81120e20:	a8c0d61e 	bne	r21,r3,8112117c <_strtod_r+0x1070>
81120e24:	9cc00044 	addi	r19,r19,1
81120e28:	dcc00615 	stw	r19,24(sp)
81120e2c:	002b883a 	mov	r21,zero
81120e30:	002d883a 	mov	r22,zero
81120e34:	d8000715 	stw	zero,28(sp)
81120e38:	003d7e06 	br	81120434 <__reset+0xfb100434>
81120e3c:	00bf2c34 	movhi	r2,64688
81120e40:	88a3883a 	add	r17,r17,r2
81120e44:	9009883a 	mov	r4,r18
81120e48:	880b883a 	mov	r5,r17
81120e4c:	111f3ac0 	call	8111f3ac <__ulp>
81120e50:	d9000b17 	ldw	r4,44(sp)
81120e54:	100d883a 	mov	r6,r2
81120e58:	180f883a 	mov	r7,r3
81120e5c:	b00b883a 	mov	r5,r22
81120e60:	11129a80 	call	811129a8 <__muldf3>
81120e64:	900d883a 	mov	r6,r18
81120e68:	180b883a 	mov	r5,r3
81120e6c:	880f883a 	mov	r7,r17
81120e70:	1009883a 	mov	r4,r2
81120e74:	1126eb80 	call	81126eb8 <__adddf3>
81120e78:	015f2834 	movhi	r5,31904
81120e7c:	1025883a 	mov	r18,r2
81120e80:	297fffc4 	addi	r5,r5,-1
81120e84:	189ffc2c 	andhi	r2,r3,32752
81120e88:	2880892e 	bgeu	r5,r2,811210b0 <_strtod_r+0xfa4>
81120e8c:	d8801017 	ldw	r2,64(sp)
81120e90:	00dffc34 	movhi	r3,32752
81120e94:	18ffffc4 	addi	r3,r3,-1
81120e98:	10ffb726 	beq	r2,r3,81120d78 <__reset+0xfb100d78>
81120e9c:	045ffc34 	movhi	r17,32752
81120ea0:	8c7fffc4 	addi	r17,r17,-1
81120ea4:	04bfffc4 	movi	r18,-1
81120ea8:	003f4706 	br	81120bc8 <__reset+0xfb100bc8>
81120eac:	00800884 	movi	r2,34
81120eb0:	80800015 	stw	r2,0(r16)
81120eb4:	002b883a 	mov	r21,zero
81120eb8:	059ffc34 	movhi	r22,32752
81120ebc:	003d5d06 	br	81120434 <__reset+0xfb100434>
81120ec0:	d9000d17 	ldw	r4,52(sp)
81120ec4:	b80b883a 	mov	r5,r23
81120ec8:	1128bb80 	call	81128bb8 <__fixdfsi>
81120ecc:	1009883a 	mov	r4,r2
81120ed0:	1128c380 	call	81128c38 <__floatsidf>
81120ed4:	d9000d17 	ldw	r4,52(sp)
81120ed8:	b80b883a 	mov	r5,r23
81120edc:	100d883a 	mov	r6,r2
81120ee0:	180f883a 	mov	r7,r3
81120ee4:	11282b40 	call	811282b4 <__subdf3>
81120ee8:	d9400e17 	ldw	r5,56(sp)
81120eec:	1039883a 	mov	fp,r2
81120ef0:	182f883a 	mov	r23,r3
81120ef4:	2800141e 	bne	r5,zero,81120f48 <_strtod_r+0xe3c>
81120ef8:	9000131e 	bne	r18,zero,81120f48 <_strtod_r+0xe3c>
81120efc:	00800434 	movhi	r2,16
81120f00:	10bfffc4 	addi	r2,r2,-1
81120f04:	b0ac703a 	and	r22,r22,r2
81120f08:	b0000f1e 	bne	r22,zero,81120f48 <_strtod_r+0xe3c>
81120f0c:	01a52834 	movhi	r6,38048
81120f10:	01cff434 	movhi	r7,16336
81120f14:	318d6544 	addi	r6,r6,13717
81120f18:	39ffffc4 	addi	r7,r7,-1
81120f1c:	e009883a 	mov	r4,fp
81120f20:	180b883a 	mov	r5,r3
81120f24:	11281c00 	call	811281c0 <__ledf2>
81120f28:	103f270e 	bge	r2,zero,81120bc8 <__reset+0xfb100bc8>
81120f2c:	dd000a15 	stw	r20,40(sp)
81120f30:	a811883a 	mov	r8,r21
81120f34:	dd001217 	ldw	r20,72(sp)
81120f38:	d8800517 	ldw	r2,20(sp)
81120f3c:	002b883a 	mov	r21,zero
81120f40:	882d883a 	mov	r22,r17
81120f44:	003f9706 	br	81120da4 <__reset+0xfb100da4>
81120f48:	01a52834 	movhi	r6,38048
81120f4c:	01cff834 	movhi	r7,16352
81120f50:	318d6544 	addi	r6,r6,13717
81120f54:	39ffffc4 	addi	r7,r7,-1
81120f58:	e009883a 	mov	r4,fp
81120f5c:	b80b883a 	mov	r5,r23
81120f60:	11281c00 	call	811281c0 <__ledf2>
81120f64:	10000716 	blt	r2,zero,81120f84 <_strtod_r+0xe78>
81120f68:	018d6c34 	movhi	r6,13744
81120f6c:	31b94d44 	addi	r6,r6,-6859
81120f70:	01cff834 	movhi	r7,16352
81120f74:	e009883a 	mov	r4,fp
81120f78:	b80b883a 	mov	r5,r23
81120f7c:	11280e40 	call	811280e4 <__gedf2>
81120f80:	00bf110e 	bge	zero,r2,81120bc8 <__reset+0xfb100bc8>
81120f84:	dd000a15 	stw	r20,40(sp)
81120f88:	a811883a 	mov	r8,r21
81120f8c:	dd001217 	ldw	r20,72(sp)
81120f90:	d8800517 	ldw	r2,20(sp)
81120f94:	902b883a 	mov	r21,r18
81120f98:	882d883a 	mov	r22,r17
81120f9c:	003f8106 	br	81120da4 <__reset+0xfb100da4>
81120fa0:	b83e2f26 	beq	r23,zero,81120860 <__reset+0xfb100860>
81120fa4:	05efc83a 	sub	r23,zero,r23
81120fa8:	b88003cc 	andi	r2,r23,15
81120fac:	10000d26 	beq	r2,zero,81120fe4 <_strtod_r+0xed8>
81120fb0:	100490fa 	slli	r2,r2,3
81120fb4:	00e04534 	movhi	r3,33044
81120fb8:	18c7c704 	addi	r3,r3,7964
81120fbc:	1885883a 	add	r2,r3,r2
81120fc0:	11800017 	ldw	r6,0(r2)
81120fc4:	11c00117 	ldw	r7,4(r2)
81120fc8:	9009883a 	mov	r4,r18
81120fcc:	880b883a 	mov	r5,r17
81120fd0:	da401315 	stw	r9,76(sp)
81120fd4:	112776c0 	call	8112776c <__divdf3>
81120fd8:	da401317 	ldw	r9,76(sp)
81120fdc:	1025883a 	mov	r18,r2
81120fe0:	1823883a 	mov	r17,r3
81120fe4:	b82fd13a 	srai	r23,r23,4
81120fe8:	b83e1d26 	beq	r23,zero,81120860 <__reset+0xfb100860>
81120fec:	008007c4 	movi	r2,31
81120ff0:	15c02816 	blt	r2,r23,81121094 <_strtod_r+0xf88>
81120ff4:	b880040c 	andi	r2,r23,16
81120ff8:	10019726 	beq	r2,zero,81121658 <_strtod_r+0x154c>
81120ffc:	05c1880e 	bge	zero,r23,81121620 <_strtod_r+0x1514>
81121000:	00c01a84 	movi	r3,106
81121004:	d8c00915 	stw	r3,36(sp)
81121008:	04e04534 	movhi	r19,33044
8112100c:	9cc80704 	addi	r19,r19,8220
81121010:	8807883a 	mov	r3,r17
81121014:	9005883a 	mov	r2,r18
81121018:	8023883a 	mov	r17,r16
8112101c:	0009883a 	mov	r4,zero
81121020:	9821883a 	mov	r16,r19
81121024:	da400a15 	stw	r9,40(sp)
81121028:	1827883a 	mov	r19,r3
8112102c:	b980004c 	andi	r6,r23,1
81121030:	30000626 	beq	r6,zero,8112104c <_strtod_r+0xf40>
81121034:	81800017 	ldw	r6,0(r16)
81121038:	81c00117 	ldw	r7,4(r16)
8112103c:	1009883a 	mov	r4,r2
81121040:	180b883a 	mov	r5,r3
81121044:	11129a80 	call	811129a8 <__muldf3>
81121048:	01000044 	movi	r4,1
8112104c:	b82fd07a 	srai	r23,r23,1
81121050:	84000204 	addi	r16,r16,8
81121054:	b83ff51e 	bne	r23,zero,8112102c <__reset+0xfb10102c>
81121058:	21003fcc 	andi	r4,r4,255
8112105c:	8821883a 	mov	r16,r17
81121060:	da400a17 	ldw	r9,40(sp)
81121064:	9823883a 	mov	r17,r19
81121068:	2001a51e 	bne	r4,zero,81121700 <_strtod_r+0x15f4>
8112106c:	d9000917 	ldw	r4,36(sp)
81121070:	20016d1e 	bne	r4,zero,81121628 <_strtod_r+0x151c>
81121074:	000d883a 	mov	r6,zero
81121078:	000f883a 	mov	r7,zero
8112107c:	9009883a 	mov	r4,r18
81121080:	880b883a 	mov	r5,r17
81121084:	da401315 	stw	r9,76(sp)
81121088:	112805c0 	call	8112805c <__eqdf2>
8112108c:	da401317 	ldw	r9,76(sp)
81121090:	103df41e 	bne	r2,zero,81120864 <__reset+0xfb100864>
81121094:	00800884 	movi	r2,34
81121098:	80800015 	stw	r2,0(r16)
8112109c:	002b883a 	mov	r21,zero
811210a0:	002d883a 	mov	r22,zero
811210a4:	003ce306 	br	81120434 <__reset+0xfb100434>
811210a8:	055387c4 	movi	r21,19999
811210ac:	003d6b06 	br	8112065c <__reset+0xfb10065c>
811210b0:	0440d434 	movhi	r17,848
811210b4:	1c63883a 	add	r17,r3,r17
811210b8:	882d883a 	mov	r22,r17
811210bc:	003ebe06 	br	81120bb8 <__reset+0xfb100bb8>
811210c0:	14403fcc 	andi	r17,r2,255
811210c4:	8c40201c 	xori	r17,r17,128
811210c8:	8c7fe004 	addi	r17,r17,-128
811210cc:	dd400817 	ldw	r21,32(sp)
811210d0:	0027883a 	mov	r19,zero
811210d4:	0039883a 	mov	fp,zero
811210d8:	002d883a 	mov	r22,zero
811210dc:	003c9906 	br	81120344 <__reset+0xfb100344>
811210e0:	00c00944 	movi	r3,37
811210e4:	1a47c83a 	sub	r3,r3,r9
811210e8:	1d7d8c16 	blt	r3,r21,8112071c <__reset+0xfb10071c>
811210ec:	1261c83a 	sub	r16,r2,r9
811210f0:	800490fa 	slli	r2,r16,3
811210f4:	04e04534 	movhi	r19,33044
811210f8:	9cc7c704 	addi	r19,r19,7964
811210fc:	9885883a 	add	r2,r19,r2
81121100:	11000017 	ldw	r4,0(r2)
81121104:	11400117 	ldw	r5,4(r2)
81121108:	900d883a 	mov	r6,r18
8112110c:	880f883a 	mov	r7,r17
81121110:	11129a80 	call	811129a8 <__muldf3>
81121114:	ac0dc83a 	sub	r6,r21,r16
81121118:	300c90fa 	slli	r6,r6,3
8112111c:	1009883a 	mov	r4,r2
81121120:	180b883a 	mov	r5,r3
81121124:	9985883a 	add	r2,r19,r6
81121128:	11800017 	ldw	r6,0(r2)
8112112c:	11c00117 	ldw	r7,4(r2)
81121130:	11129a80 	call	811129a8 <__muldf3>
81121134:	102b883a 	mov	r21,r2
81121138:	182d883a 	mov	r22,r3
8112113c:	003cbd06 	br	81120434 <__reset+0xfb100434>
81121140:	b811883a 	mov	r8,r23
81121144:	003e8606 	br	81120b60 <__reset+0xfb100b60>
81121148:	d8000d15 	stw	zero,52(sp)
8112114c:	05cffc34 	movhi	r23,16368
81121150:	003e8006 	br	81120b54 <__reset+0xfb100b54>
81121154:	883f011e 	bne	r17,zero,81120d5c <__reset+0xfb100d5c>
81121158:	dd000a15 	stw	r20,40(sp)
8112115c:	dd001217 	ldw	r20,72(sp)
81121160:	a811883a 	mov	r8,r21
81121164:	00800884 	movi	r2,34
81121168:	80800015 	stw	r2,0(r16)
8112116c:	002b883a 	mov	r21,zero
81121170:	d8800517 	ldw	r2,20(sp)
81121174:	002d883a 	mov	r22,zero
81121178:	003f0a06 	br	81120da4 <__reset+0xfb100da4>
8112117c:	d9800517 	ldw	r6,20(sp)
81121180:	30000826 	beq	r6,zero,811211a4 <_strtod_r+0x1098>
81121184:	01400d44 	movi	r5,53
81121188:	d9000204 	addi	r4,sp,8
8112118c:	d8801315 	stw	r2,76(sp)
81121190:	111f7a00 	call	8111f7a0 <__copybits>
81121194:	d9400517 	ldw	r5,20(sp)
81121198:	8009883a 	mov	r4,r16
8112119c:	111e8f80 	call	8111e8f8 <_Bfree>
811211a0:	d8801317 	ldw	r2,76(sp)
811211a4:	00c00184 	movi	r3,6
811211a8:	1d400f36 	bltu	r3,r21,811211e8 <_strtod_r+0x10dc>
811211ac:	a82a90ba 	slli	r21,r21,2
811211b0:	00e044b4 	movhi	r3,33042
811211b4:	18c47104 	addi	r3,r3,4548
811211b8:	a8eb883a 	add	r21,r21,r3
811211bc:	a8c00017 	ldw	r3,0(r21)
811211c0:	1800683a 	jmp	r3
811211c4:	81121240 	call	88112124 <__reset+0x20f2124>
811211c8:	81121218 	cmpnei	r4,r16,18504
811211cc:	811211fc 	xorhi	r4,r16,18503
811211d0:	811211e0 	cmpeqi	r4,r16,18503
811211d4:	81121208 	cmpgei	r4,r16,18504
811211d8:	81121218 	cmpnei	r4,r16,18504
811211dc:	81121240 	call	88112124 <__reset+0x20f2124>
811211e0:	045ffc34 	movhi	r17,32752
811211e4:	0025883a 	mov	r18,zero
811211e8:	1080020c 	andi	r2,r2,8
811211ec:	902b883a 	mov	r21,r18
811211f0:	103c8f26 	beq	r2,zero,81120430 <__reset+0xfb100430>
811211f4:	8da00034 	orhi	r22,r17,32768
811211f8:	003c8e06 	br	81120434 <__reset+0xfb100434>
811211fc:	dc800217 	ldw	r18,8(sp)
81121200:	dc400317 	ldw	r17,12(sp)
81121204:	003ff806 	br	811211e8 <__reset+0xfb1011e8>
81121208:	04600034 	movhi	r17,32768
8112120c:	8c7fffc4 	addi	r17,r17,-1
81121210:	04bfffc4 	movi	r18,-1
81121214:	003ff406 	br	811211e8 <__reset+0xfb1011e8>
81121218:	d8c00417 	ldw	r3,16(sp)
8112121c:	dc400317 	ldw	r17,12(sp)
81121220:	013ffc34 	movhi	r4,65520
81121224:	18c10cc4 	addi	r3,r3,1075
81121228:	1806953a 	slli	r3,r3,20
8112122c:	213fffc4 	addi	r4,r4,-1
81121230:	8922703a 	and	r17,r17,r4
81121234:	dc800217 	ldw	r18,8(sp)
81121238:	88e2b03a 	or	r17,r17,r3
8112123c:	003fea06 	br	811211e8 <__reset+0xfb1011e8>
81121240:	0023883a 	mov	r17,zero
81121244:	0025883a 	mov	r18,zero
81121248:	003fe706 	br	811211e8 <__reset+0xfb1011e8>
8112124c:	01800044 	movi	r6,1
81121250:	50d5883a 	add	r10,r10,r3
81121254:	2a4b883a 	add	r5,r5,r9
81121258:	19811a26 	beq	r3,r6,811216c4 <_strtod_r+0x15b8>
8112125c:	01800204 	movi	r6,8
81121260:	01c00404 	movi	r7,16
81121264:	4a400044 	addi	r9,r9,1
81121268:	48bfffc4 	addi	r2,r9,-1
8112126c:	30801616 	blt	r6,r2,811212c8 <_strtod_r+0x11bc>
81121270:	e70002a4 	muli	fp,fp,10
81121274:	497ffb1e 	bne	r9,r5,81121264 <__reset+0xfb101264>
81121278:	d9800617 	ldw	r6,24(sp)
8112127c:	4a400044 	addi	r9,r9,1
81121280:	00c00204 	movi	r3,8
81121284:	19400c0e 	bge	r3,r5,811212b8 <_strtod_r+0x11ac>
81121288:	00800404 	movi	r2,16
8112128c:	000b883a 	mov	r5,zero
81121290:	127ea316 	blt	r2,r9,81120d20 <__reset+0xfb100d20>
81121294:	988002a4 	muli	r2,r19,10
81121298:	20a7883a 	add	r19,r4,r2
8112129c:	003ea006 	br	81120d20 <__reset+0xfb100d20>
811212a0:	d8800617 	ldw	r2,24(sp)
811212a4:	8c7ff404 	addi	r17,r17,-48
811212a8:	2a800044 	addi	r10,r5,1
811212ac:	d8800815 	stw	r2,32(sp)
811212b0:	100d883a 	mov	r6,r2
811212b4:	02400044 	movi	r9,1
811212b8:	e08002a4 	muli	r2,fp,10
811212bc:	000b883a 	mov	r5,zero
811212c0:	88b9883a 	add	fp,r17,r2
811212c4:	003e9606 	br	81120d20 <__reset+0xfb100d20>
811212c8:	3a7fea16 	blt	r7,r9,81121274 <__reset+0xfb101274>
811212cc:	9cc002a4 	muli	r19,r19,10
811212d0:	003fe806 	br	81121274 <__reset+0xfb101274>
811212d4:	00bffa84 	movi	r2,-22
811212d8:	a8bd1016 	blt	r21,r2,8112071c <__reset+0xfb10071c>
811212dc:	a82a90fa 	slli	r21,r21,3
811212e0:	00a04534 	movhi	r2,33044
811212e4:	1087c704 	addi	r2,r2,7964
811212e8:	1545c83a 	sub	r2,r2,r21
811212ec:	11800017 	ldw	r6,0(r2)
811212f0:	11c00117 	ldw	r7,4(r2)
811212f4:	9009883a 	mov	r4,r18
811212f8:	880b883a 	mov	r5,r17
811212fc:	112776c0 	call	8112776c <__divdf3>
81121300:	102b883a 	mov	r21,r2
81121304:	182d883a 	mov	r22,r3
81121308:	003c4a06 	br	81120434 <__reset+0xfb100434>
8112130c:	dd000a15 	stw	r20,40(sp)
81121310:	a811883a 	mov	r8,r21
81121314:	dd001217 	ldw	r20,72(sp)
81121318:	003e9e06 	br	81120d94 <__reset+0xfb100d94>
8112131c:	01604534 	movhi	r5,33044
81121320:	d9000617 	ldw	r4,24(sp)
81121324:	2947f904 	addi	r5,r5,8164
81121328:	01c00644 	movi	r7,25
8112132c:	00000b06 	br	8112135c <_strtod_r+0x1250>
81121330:	21000044 	addi	r4,r4,1
81121334:	20800003 	ldbu	r2,0(r4)
81121338:	10ffefc4 	addi	r3,r2,-65
8112133c:	10803fcc 	andi	r2,r2,255
81121340:	1080201c 	xori	r2,r2,128
81121344:	18c03fcc 	andi	r3,r3,255
81121348:	10bfe004 	addi	r2,r2,-128
8112134c:	38c00136 	bltu	r7,r3,81121354 <_strtod_r+0x1248>
81121350:	10800804 	addi	r2,r2,32
81121354:	29400044 	addi	r5,r5,1
81121358:	11bbbb1e 	bne	r2,r6,81120248 <__reset+0xfb100248>
8112135c:	29800007 	ldb	r6,0(r5)
81121360:	303ff31e 	bne	r6,zero,81121330 <__reset+0xfb101330>
81121364:	01a04534 	movhi	r6,33044
81121368:	d9000615 	stw	r4,24(sp)
8112136c:	3187fa04 	addi	r6,r6,8168
81121370:	200b883a 	mov	r5,r4
81121374:	02000644 	movi	r8,25
81121378:	00000a06 	br	811213a4 <_strtod_r+0x1298>
8112137c:	28800003 	ldbu	r2,0(r5)
81121380:	10ffefc4 	addi	r3,r2,-65
81121384:	10803fcc 	andi	r2,r2,255
81121388:	1080201c 	xori	r2,r2,128
8112138c:	18c03fcc 	andi	r3,r3,255
81121390:	10bfe004 	addi	r2,r2,-128
81121394:	40c00136 	bltu	r8,r3,8112139c <_strtod_r+0x1290>
81121398:	10800804 	addi	r2,r2,32
8112139c:	31800044 	addi	r6,r6,1
811213a0:	11c0711e 	bne	r2,r7,81121568 <_strtod_r+0x145c>
811213a4:	31c00007 	ldb	r7,0(r6)
811213a8:	29400044 	addi	r5,r5,1
811213ac:	383ff31e 	bne	r7,zero,8112137c <__reset+0xfb10137c>
811213b0:	d9400615 	stw	r5,24(sp)
811213b4:	045ffc34 	movhi	r17,32752
811213b8:	0025883a 	mov	r18,zero
811213bc:	003c1b06 	br	8112042c <__reset+0xfb10042c>
811213c0:	000b883a 	mov	r5,zero
811213c4:	003ccc06 	br	811206f8 <__reset+0xfb1006f8>
811213c8:	d9400e17 	ldw	r5,56(sp)
811213cc:	dd000a15 	stw	r20,40(sp)
811213d0:	00800434 	movhi	r2,16
811213d4:	a811883a 	mov	r8,r21
811213d8:	dd001217 	ldw	r20,72(sp)
811213dc:	dd401117 	ldw	r21,68(sp)
811213e0:	dd801017 	ldw	r22,64(sp)
811213e4:	10bfffc4 	addi	r2,r2,-1
811213e8:	28005626 	beq	r5,zero,81121544 <_strtod_r+0x1438>
811213ec:	8886703a 	and	r3,r17,r2
811213f0:	18807826 	beq	r3,r2,811215d4 <_strtod_r+0x14c8>
811213f4:	d8c00b17 	ldw	r3,44(sp)
811213f8:	18005726 	beq	r3,zero,81121558 <_strtod_r+0x144c>
811213fc:	1c44703a 	and	r2,r3,r17
81121400:	10000f26 	beq	r2,zero,81121440 <_strtod_r+0x1334>
81121404:	d9000e17 	ldw	r4,56(sp)
81121408:	d9800917 	ldw	r6,36(sp)
8112140c:	20005e26 	beq	r4,zero,81121588 <_strtod_r+0x147c>
81121410:	9009883a 	mov	r4,r18
81121414:	880b883a 	mov	r5,r17
81121418:	da001315 	stw	r8,76(sp)
8112141c:	11200a00 	call	811200a0 <sulp>
81121420:	100d883a 	mov	r6,r2
81121424:	180f883a 	mov	r7,r3
81121428:	9009883a 	mov	r4,r18
8112142c:	880b883a 	mov	r5,r17
81121430:	1126eb80 	call	81126eb8 <__adddf3>
81121434:	da001317 	ldw	r8,76(sp)
81121438:	102b883a 	mov	r21,r2
8112143c:	182d883a 	mov	r22,r3
81121440:	d8c00917 	ldw	r3,36(sp)
81121444:	18000f26 	beq	r3,zero,81121484 <_strtod_r+0x1378>
81121448:	a809883a 	mov	r4,r21
8112144c:	b00b883a 	mov	r5,r22
81121450:	000d883a 	mov	r6,zero
81121454:	01ce5434 	movhi	r7,14672
81121458:	da001315 	stw	r8,76(sp)
8112145c:	11129a80 	call	811129a8 <__muldf3>
81121460:	102b883a 	mov	r21,r2
81121464:	182d883a 	mov	r22,r3
81121468:	da001317 	ldw	r8,76(sp)
8112146c:	1800051e 	bne	r3,zero,81121484 <_strtod_r+0x1378>
81121470:	d8800517 	ldw	r2,20(sp)
81121474:	a83e4b1e 	bne	r21,zero,81120da4 <__reset+0xfb100da4>
81121478:	00c00884 	movi	r3,34
8112147c:	80c00015 	stw	r3,0(r16)
81121480:	003e4806 	br	81120da4 <__reset+0xfb100da4>
81121484:	d8800517 	ldw	r2,20(sp)
81121488:	003e4606 	br	81120da4 <__reset+0xfb100da4>
8112148c:	d9000e17 	ldw	r4,56(sp)
81121490:	dd000a15 	stw	r20,40(sp)
81121494:	a811883a 	mov	r8,r21
81121498:	dd001217 	ldw	r20,72(sp)
8112149c:	dd401117 	ldw	r21,68(sp)
811214a0:	dd801017 	ldw	r22,64(sp)
811214a4:	203fe61e 	bne	r4,zero,81121440 <__reset+0xfb101440>
811214a8:	903fe51e 	bne	r18,zero,81121440 <__reset+0xfb101440>
811214ac:	00800434 	movhi	r2,16
811214b0:	10bfffc4 	addi	r2,r2,-1
811214b4:	8884703a 	and	r2,r17,r2
811214b8:	103fe11e 	bne	r2,zero,81121440 <__reset+0xfb101440>
811214bc:	8ddffc2c 	andhi	r23,r17,32752
811214c0:	0081ac34 	movhi	r2,1712
811214c4:	15ffde2e 	bgeu	r2,r23,81121440 <__reset+0xfb101440>
811214c8:	40800517 	ldw	r2,20(r8)
811214cc:	1000031e 	bne	r2,zero,811214dc <_strtod_r+0x13d0>
811214d0:	40800417 	ldw	r2,16(r8)
811214d4:	00c00044 	movi	r3,1
811214d8:	18bfd90e 	bge	r3,r2,81121440 <__reset+0xfb101440>
811214dc:	400b883a 	mov	r5,r8
811214e0:	01800044 	movi	r6,1
811214e4:	8009883a 	mov	r4,r16
811214e8:	111eff80 	call	8111eff8 <__lshift>
811214ec:	980b883a 	mov	r5,r19
811214f0:	1009883a 	mov	r4,r2
811214f4:	d8801315 	stw	r2,76(sp)
811214f8:	111f1480 	call	8111f148 <__mcmp>
811214fc:	da001317 	ldw	r8,76(sp)
81121500:	00bfcf0e 	bge	zero,r2,81121440 <__reset+0xfb101440>
81121504:	d8c00917 	ldw	r3,36(sp)
81121508:	18005c26 	beq	r3,zero,8112167c <_strtod_r+0x1570>
8112150c:	0081ac34 	movhi	r2,1712
81121510:	15c05a16 	blt	r2,r23,8112167c <_strtod_r+0x1570>
81121514:	0080dc34 	movhi	r2,880
81121518:	15ffcb16 	blt	r2,r23,81121448 <__reset+0xfb101448>
8112151c:	003f1106 	br	81121164 <__reset+0xfb101164>
81121520:	002d883a 	mov	r22,zero
81121524:	022ff834 	movhi	r8,49120
81121528:	d8000d15 	stw	zero,52(sp)
8112152c:	05cff834 	movhi	r23,16352
81121530:	003ded06 	br	81120ce8 <__reset+0xfb100ce8>
81121534:	0440d434 	movhi	r17,848
81121538:	1c63883a 	add	r17,r3,r17
8112153c:	d8000915 	stw	zero,36(sp)
81121540:	003cc806 	br	81120864 <__reset+0xfb100864>
81121544:	8884703a 	and	r2,r17,r2
81121548:	103faa1e 	bne	r2,zero,811213f4 <__reset+0xfb1013f4>
8112154c:	903fa91e 	bne	r18,zero,811213f4 <__reset+0xfb1013f4>
81121550:	8ddffc2c 	andhi	r23,r17,32752
81121554:	003feb06 	br	81121504 <__reset+0xfb101504>
81121558:	d8c00d17 	ldw	r3,52(sp)
8112155c:	1cae703a 	and	r23,r3,r18
81121560:	b83fb726 	beq	r23,zero,81121440 <__reset+0xfb101440>
81121564:	003fa706 	br	81121404 <__reset+0xfb101404>
81121568:	21000044 	addi	r4,r4,1
8112156c:	d9000615 	stw	r4,24(sp)
81121570:	003f9006 	br	811213b4 <__reset+0xfb1013b4>
81121574:	01604534 	movhi	r5,33044
81121578:	2947bd04 	addi	r5,r5,7924
8112157c:	d9400915 	stw	r5,36(sp)
81121580:	0027883a 	mov	r19,zero
81121584:	003ca206 	br	81120810 <__reset+0xfb100810>
81121588:	9009883a 	mov	r4,r18
8112158c:	880b883a 	mov	r5,r17
81121590:	da001315 	stw	r8,76(sp)
81121594:	11200a00 	call	811200a0 <sulp>
81121598:	100d883a 	mov	r6,r2
8112159c:	180f883a 	mov	r7,r3
811215a0:	9009883a 	mov	r4,r18
811215a4:	880b883a 	mov	r5,r17
811215a8:	11282b40 	call	811282b4 <__subdf3>
811215ac:	000d883a 	mov	r6,zero
811215b0:	000f883a 	mov	r7,zero
811215b4:	1009883a 	mov	r4,r2
811215b8:	180b883a 	mov	r5,r3
811215bc:	102b883a 	mov	r21,r2
811215c0:	182d883a 	mov	r22,r3
811215c4:	112805c0 	call	8112805c <__eqdf2>
811215c8:	da001317 	ldw	r8,76(sp)
811215cc:	103ee526 	beq	r2,zero,81121164 <__reset+0xfb101164>
811215d0:	003f9b06 	br	81121440 <__reset+0xfb101440>
811215d4:	d8800917 	ldw	r2,36(sp)
811215d8:	10002226 	beq	r2,zero,81121664 <_strtod_r+0x1558>
811215dc:	889ffc2c 	andhi	r2,r17,32752
811215e0:	00c1a834 	movhi	r3,1696
811215e4:	18801f36 	bltu	r3,r2,81121664 <_strtod_r+0x1558>
811215e8:	1004d53a 	srli	r2,r2,20
811215ec:	00c01ac4 	movi	r3,107
811215f0:	1887c83a 	sub	r3,r3,r2
811215f4:	00bfffc4 	movi	r2,-1
811215f8:	10c4983a 	sll	r2,r2,r3
811215fc:	14bf7d1e 	bne	r2,r18,811213f4 <__reset+0xfb1013f4>
81121600:	00dffc34 	movhi	r3,32752
81121604:	18ffffc4 	addi	r3,r3,-1
81121608:	88c03526 	beq	r17,r3,811216e0 <_strtod_r+0x15d4>
8112160c:	8c5ffc2c 	andhi	r17,r17,32752
81121610:	00800434 	movhi	r2,16
81121614:	002b883a 	mov	r21,zero
81121618:	88ad883a 	add	r22,r17,r2
8112161c:	003f8806 	br	81121440 <__reset+0xfb101440>
81121620:	01401a84 	movi	r5,106
81121624:	d9400915 	stw	r5,36(sp)
81121628:	8ddffc2c 	andhi	r23,r17,32752
8112162c:	b82ed53a 	srli	r23,r23,20
81121630:	00801ac4 	movi	r2,107
81121634:	15c5c83a 	sub	r2,r2,r23
81121638:	00be8e0e 	bge	zero,r2,81121074 <__reset+0xfb101074>
8112163c:	00c007c4 	movi	r3,31
81121640:	18800a0e 	bge	r3,r2,8112166c <_strtod_r+0x1560>
81121644:	00c00d04 	movi	r3,52
81121648:	0025883a 	mov	r18,zero
8112164c:	1880270e 	bge	r3,r2,811216ec <_strtod_r+0x15e0>
81121650:	0440dc34 	movhi	r17,880
81121654:	003e8706 	br	81121074 <__reset+0xfb101074>
81121658:	d8000915 	stw	zero,36(sp)
8112165c:	05fe6a16 	blt	zero,r23,81121008 <__reset+0xfb101008>
81121660:	003e8406 	br	81121074 <__reset+0xfb101074>
81121664:	00bfffc4 	movi	r2,-1
81121668:	003fe406 	br	811215fc <__reset+0xfb1015fc>
8112166c:	00ffffc4 	movi	r3,-1
81121670:	1884983a 	sll	r2,r3,r2
81121674:	14a4703a 	and	r18,r2,r18
81121678:	003e7e06 	br	81121074 <__reset+0xfb101074>
8112167c:	00bffc34 	movhi	r2,65520
81121680:	b8af883a 	add	r23,r23,r2
81121684:	057fffc4 	movi	r21,-1
81121688:	00800434 	movhi	r2,16
8112168c:	1545883a 	add	r2,r2,r21
81121690:	b8acb03a 	or	r22,r23,r2
81121694:	003f6a06 	br	81121440 <__reset+0xfb101440>
81121698:	01604534 	movhi	r5,33044
8112169c:	2947fd04 	addi	r5,r5,8180
811216a0:	d9800204 	addi	r6,sp,8
811216a4:	d9000604 	addi	r4,sp,24
811216a8:	1125a980 	call	81125a98 <__hexnan>
811216ac:	00c00144 	movi	r3,5
811216b0:	10fb5c1e 	bne	r2,r3,81120424 <__reset+0xfb100424>
811216b4:	dc400317 	ldw	r17,12(sp)
811216b8:	dc800217 	ldw	r18,8(sp)
811216bc:	8c5ffc34 	orhi	r17,r17,32752
811216c0:	003b5a06 	br	8112042c <__reset+0xfb10042c>
811216c4:	480b883a 	mov	r5,r9
811216c8:	d9800617 	ldw	r6,24(sp)
811216cc:	4a400044 	addi	r9,r9,1
811216d0:	003eeb06 	br	81121280 <__reset+0xfb101280>
811216d4:	1025883a 	mov	r18,r2
811216d8:	1823883a 	mov	r17,r3
811216dc:	003c4c06 	br	81120810 <__reset+0xfb100810>
811216e0:	00ffffc4 	movi	r3,-1
811216e4:	10ffc91e 	bne	r2,r3,8112160c <__reset+0xfb10160c>
811216e8:	003da906 	br	81120d90 <__reset+0xfb100d90>
811216ec:	10bff804 	addi	r2,r2,-32
811216f0:	00ffffc4 	movi	r3,-1
811216f4:	1884983a 	sll	r2,r3,r2
811216f8:	1462703a 	and	r17,r2,r17
811216fc:	003e5d06 	br	81121074 <__reset+0xfb101074>
81121700:	1025883a 	mov	r18,r2
81121704:	1823883a 	mov	r17,r3
81121708:	003e5806 	br	8112106c <__reset+0xfb10106c>

8112170c <strtod>:
8112170c:	00a04534 	movhi	r2,33044
81121710:	10916904 	addi	r2,r2,17828
81121714:	280d883a 	mov	r6,r5
81121718:	200b883a 	mov	r5,r4
8112171c:	11000017 	ldw	r4,0(r2)
81121720:	112010c1 	jmpi	8112010c <_strtod_r>

81121724 <strtof>:
81121724:	defffb04 	addi	sp,sp,-20
81121728:	de00012e 	bgeu	sp,et,81121730 <strtof+0xc>
8112172c:	003b68fa 	trap	3
81121730:	dcc00315 	stw	r19,12(sp)
81121734:	04e04534 	movhi	r19,33044
81121738:	9cd16904 	addi	r19,r19,17828
8112173c:	280d883a 	mov	r6,r5
81121740:	200b883a 	mov	r5,r4
81121744:	99000017 	ldw	r4,0(r19)
81121748:	dfc00415 	stw	ra,16(sp)
8112174c:	dc800215 	stw	r18,8(sp)
81121750:	dc400115 	stw	r17,4(sp)
81121754:	dc000015 	stw	r16,0(sp)
81121758:	112010c0 	call	8112010c <_strtod_r>
8112175c:	1009883a 	mov	r4,r2
81121760:	180b883a 	mov	r5,r3
81121764:	1025883a 	mov	r18,r2
81121768:	1823883a 	mov	r17,r3
8112176c:	11131e00 	call	811131e0 <__truncdfsf2>
81121770:	000b883a 	mov	r5,zero
81121774:	1009883a 	mov	r4,r2
81121778:	1021883a 	mov	r16,r2
8112177c:	1126cbc0 	call	81126cbc <__eqsf2>
81121780:	1000111e 	bne	r2,zero,811217c8 <strtof+0xa4>
81121784:	000d883a 	mov	r6,zero
81121788:	000f883a 	mov	r7,zero
8112178c:	9009883a 	mov	r4,r18
81121790:	880b883a 	mov	r5,r17
81121794:	112805c0 	call	8112805c <__eqdf2>
81121798:	10000b26 	beq	r2,zero,811217c8 <strtof+0xa4>
8112179c:	98800017 	ldw	r2,0(r19)
811217a0:	00c00884 	movi	r3,34
811217a4:	10c00015 	stw	r3,0(r2)
811217a8:	8005883a 	mov	r2,r16
811217ac:	dfc00417 	ldw	ra,16(sp)
811217b0:	dcc00317 	ldw	r19,12(sp)
811217b4:	dc800217 	ldw	r18,8(sp)
811217b8:	dc400117 	ldw	r17,4(sp)
811217bc:	dc000017 	ldw	r16,0(sp)
811217c0:	dec00504 	addi	sp,sp,20
811217c4:	f800283a 	ret
811217c8:	015fe034 	movhi	r5,32640
811217cc:	297fffc4 	addi	r5,r5,-1
811217d0:	8009883a 	mov	r4,r16
811217d4:	1126d340 	call	81126d34 <__gesf2>
811217d8:	0080070e 	bge	zero,r2,811217f8 <strtof+0xd4>
811217dc:	01dffc34 	movhi	r7,32752
811217e0:	39ffffc4 	addi	r7,r7,-1
811217e4:	01bfffc4 	movi	r6,-1
811217e8:	9009883a 	mov	r4,r18
811217ec:	880b883a 	mov	r5,r17
811217f0:	11280e40 	call	811280e4 <__gedf2>
811217f4:	00bfe90e 	bge	zero,r2,8112179c <__reset+0xfb10179c>
811217f8:	017fe034 	movhi	r5,65408
811217fc:	297fffc4 	addi	r5,r5,-1
81121800:	8009883a 	mov	r4,r16
81121804:	1126df00 	call	81126df0 <__lesf2>
81121808:	103fe70e 	bge	r2,zero,811217a8 <__reset+0xfb1017a8>
8112180c:	01fffc34 	movhi	r7,65520
81121810:	39ffffc4 	addi	r7,r7,-1
81121814:	01bfffc4 	movi	r6,-1
81121818:	9009883a 	mov	r4,r18
8112181c:	880b883a 	mov	r5,r17
81121820:	11281c00 	call	811281c0 <__ledf2>
81121824:	103fdd0e 	bge	r2,zero,8112179c <__reset+0xfb10179c>
81121828:	003fdf06 	br	811217a8 <__reset+0xfb1017a8>

8112182c <_strtoll_r>:
8112182c:	00a04534 	movhi	r2,33044
81121830:	defff304 	addi	sp,sp,-52
81121834:	10916704 	addi	r2,r2,17820
81121838:	de00012e 	bgeu	sp,et,81121840 <_strtoll_r+0x14>
8112183c:	003b68fa 	trap	3
81121840:	dc800515 	stw	r18,20(sp)
81121844:	14800017 	ldw	r18,0(r2)
81121848:	dd800915 	stw	r22,36(sp)
8112184c:	dd400815 	stw	r21,32(sp)
81121850:	dcc00615 	stw	r19,24(sp)
81121854:	d9000015 	stw	r4,0(sp)
81121858:	dfc00c15 	stw	ra,48(sp)
8112185c:	df000b15 	stw	fp,44(sp)
81121860:	ddc00a15 	stw	r23,40(sp)
81121864:	dd000715 	stw	r20,28(sp)
81121868:	dc400415 	stw	r17,16(sp)
8112186c:	dc000315 	stw	r16,12(sp)
81121870:	282d883a 	mov	r22,r5
81121874:	302b883a 	mov	r21,r6
81121878:	3827883a 	mov	r19,r7
8112187c:	2809883a 	mov	r4,r5
81121880:	24000003 	ldbu	r16,0(r4)
81121884:	24400044 	addi	r17,r4,1
81121888:	2007883a 	mov	r3,r4
8112188c:	9405883a 	add	r2,r18,r16
81121890:	10800043 	ldbu	r2,1(r2)
81121894:	8809883a 	mov	r4,r17
81121898:	1080020c 	andi	r2,r2,8
8112189c:	103ff81e 	bne	r2,zero,81121880 <__reset+0xfb101880>
811218a0:	00800b44 	movi	r2,45
811218a4:	80807826 	beq	r16,r2,81121a88 <_strtoll_r+0x25c>
811218a8:	00800ac4 	movi	r2,43
811218ac:	80807a26 	beq	r16,r2,81121a98 <_strtoll_r+0x26c>
811218b0:	0039883a 	mov	fp,zero
811218b4:	98004e26 	beq	r19,zero,811219f0 <_strtoll_r+0x1c4>
811218b8:	00800404 	movi	r2,16
811218bc:	98808226 	beq	r19,r2,81121ac8 <_strtoll_r+0x29c>
811218c0:	982fd7fa 	srai	r23,r19,31
811218c4:	9829883a 	mov	r20,r19
811218c8:	e0004f26 	beq	fp,zero,81121a08 <_strtoll_r+0x1dc>
811218cc:	0017883a 	mov	r11,zero
811218d0:	02a00034 	movhi	r10,32768
811218d4:	5809883a 	mov	r4,r11
811218d8:	500b883a 	mov	r5,r10
811218dc:	a00d883a 	mov	r6,r20
811218e0:	b80f883a 	mov	r7,r23
811218e4:	da800215 	stw	r10,8(sp)
811218e8:	dac00115 	stw	r11,4(sp)
811218ec:	11265c80 	call	811265c8 <__umoddi3>
811218f0:	dac00117 	ldw	r11,4(sp)
811218f4:	da800217 	ldw	r10,8(sp)
811218f8:	a00d883a 	mov	r6,r20
811218fc:	5809883a 	mov	r4,r11
81121900:	500b883a 	mov	r5,r10
81121904:	b80f883a 	mov	r7,r23
81121908:	d8800115 	stw	r2,4(sp)
8112190c:	11260480 	call	81126048 <__udivdi3>
81121910:	9409883a 	add	r4,r18,r16
81121914:	21000043 	ldbu	r4,1(r4)
81121918:	1019883a 	mov	r12,r2
8112191c:	880b883a 	mov	r5,r17
81121920:	2240010c 	andi	r9,r4,4
81121924:	0015883a 	mov	r10,zero
81121928:	000d883a 	mov	r6,zero
8112192c:	000f883a 	mov	r7,zero
81121930:	03400044 	movi	r13,1
81121934:	02ffffc4 	movi	r11,-1
81121938:	da000117 	ldw	r8,4(sp)
8112193c:	48000d26 	beq	r9,zero,81121974 <_strtoll_r+0x148>
81121940:	843ff404 	addi	r16,r16,-48
81121944:	84c0110e 	bge	r16,r19,8112198c <_strtoll_r+0x160>
81121948:	52c00426 	beq	r10,r11,8112195c <_strtoll_r+0x130>
8112194c:	19c00236 	bltu	r3,r7,81121958 <_strtoll_r+0x12c>
81121950:	38c0311e 	bne	r7,r3,81121a18 <_strtoll_r+0x1ec>
81121954:	6180302e 	bgeu	r12,r6,81121a18 <_strtoll_r+0x1ec>
81121958:	02bfffc4 	movi	r10,-1
8112195c:	2c000003 	ldbu	r16,0(r5)
81121960:	29400044 	addi	r5,r5,1
81121964:	9409883a 	add	r4,r18,r16
81121968:	21000043 	ldbu	r4,1(r4)
8112196c:	2240010c 	andi	r9,r4,4
81121970:	483ff31e 	bne	r9,zero,81121940 <__reset+0xfb101940>
81121974:	210000cc 	andi	r4,r4,3
81121978:	20000426 	beq	r4,zero,8112198c <_strtoll_r+0x160>
8112197c:	23403426 	beq	r4,r13,81121a50 <_strtoll_r+0x224>
81121980:	008015c4 	movi	r2,87
81121984:	80a1c83a 	sub	r16,r16,r2
81121988:	84ffef16 	blt	r16,r19,81121948 <__reset+0xfb101948>
8112198c:	00bfffc4 	movi	r2,-1
81121990:	50803426 	beq	r10,r2,81121a64 <_strtoll_r+0x238>
81121994:	e0000426 	beq	fp,zero,811219a8 <_strtoll_r+0x17c>
81121998:	018dc83a 	sub	r6,zero,r6
8112199c:	3004c03a 	cmpne	r2,r6,zero
811219a0:	01e1c83a 	sub	r16,zero,r7
811219a4:	808fc83a 	sub	r7,r16,r2
811219a8:	3005883a 	mov	r2,r6
811219ac:	3807883a 	mov	r3,r7
811219b0:	a8000326 	beq	r21,zero,811219c0 <_strtoll_r+0x194>
811219b4:	5000321e 	bne	r10,zero,81121a80 <_strtoll_r+0x254>
811219b8:	b00b883a 	mov	r5,r22
811219bc:	a9400015 	stw	r5,0(r21)
811219c0:	dfc00c17 	ldw	ra,48(sp)
811219c4:	df000b17 	ldw	fp,44(sp)
811219c8:	ddc00a17 	ldw	r23,40(sp)
811219cc:	dd800917 	ldw	r22,36(sp)
811219d0:	dd400817 	ldw	r21,32(sp)
811219d4:	dd000717 	ldw	r20,28(sp)
811219d8:	dcc00617 	ldw	r19,24(sp)
811219dc:	dc800517 	ldw	r18,20(sp)
811219e0:	dc400417 	ldw	r17,16(sp)
811219e4:	dc000317 	ldw	r16,12(sp)
811219e8:	dec00d04 	addi	sp,sp,52
811219ec:	f800283a 	ret
811219f0:	00800c04 	movi	r2,48
811219f4:	80802c26 	beq	r16,r2,81121aa8 <_strtoll_r+0x27c>
811219f8:	05000284 	movi	r20,10
811219fc:	002f883a 	mov	r23,zero
81121a00:	a027883a 	mov	r19,r20
81121a04:	e03fb11e 	bne	fp,zero,811218cc <__reset+0xfb1018cc>
81121a08:	02a00034 	movhi	r10,32768
81121a0c:	52bfffc4 	addi	r10,r10,-1
81121a10:	02ffffc4 	movi	r11,-1
81121a14:	003faf06 	br	811218d4 <__reset+0xfb1018d4>
81121a18:	33000f26 	beq	r6,r12,81121a58 <_strtoll_r+0x22c>
81121a1c:	b985383a 	mul	r2,r23,r6
81121a20:	3d0f383a 	mul	r7,r7,r20
81121a24:	3508383a 	mulxuu	r4,r6,r20
81121a28:	350d383a 	mul	r6,r6,r20
81121a2c:	8013d7fa 	srai	r9,r16,31
81121a30:	388f883a 	add	r7,r7,r2
81121a34:	818d883a 	add	r6,r16,r6
81121a38:	390f883a 	add	r7,r7,r4
81121a3c:	3421803a 	cmpltu	r16,r6,r16
81121a40:	49cf883a 	add	r7,r9,r7
81121a44:	81cf883a 	add	r7,r16,r7
81121a48:	02800044 	movi	r10,1
81121a4c:	003fc306 	br	8112195c <__reset+0xfb10195c>
81121a50:	00800dc4 	movi	r2,55
81121a54:	003fcb06 	br	81121984 <__reset+0xfb101984>
81121a58:	38fff01e 	bne	r7,r3,81121a1c <__reset+0xfb101a1c>
81121a5c:	443fbe16 	blt	r8,r16,81121958 <__reset+0xfb101958>
81121a60:	003fee06 	br	81121a1c <__reset+0xfb101a1c>
81121a64:	e0002426 	beq	fp,zero,81121af8 <_strtoll_r+0x2cc>
81121a68:	0005883a 	mov	r2,zero
81121a6c:	00e00034 	movhi	r3,32768
81121a70:	d9800017 	ldw	r6,0(sp)
81121a74:	01000884 	movi	r4,34
81121a78:	31000015 	stw	r4,0(r6)
81121a7c:	a83fd026 	beq	r21,zero,811219c0 <__reset+0xfb1019c0>
81121a80:	297fffc4 	addi	r5,r5,-1
81121a84:	003fcd06 	br	811219bc <__reset+0xfb1019bc>
81121a88:	1c400084 	addi	r17,r3,2
81121a8c:	1c000043 	ldbu	r16,1(r3)
81121a90:	07000044 	movi	fp,1
81121a94:	003f8706 	br	811218b4 <__reset+0xfb1018b4>
81121a98:	1c400084 	addi	r17,r3,2
81121a9c:	1c000043 	ldbu	r16,1(r3)
81121aa0:	0039883a 	mov	fp,zero
81121aa4:	003f8306 	br	811218b4 <__reset+0xfb1018b4>
81121aa8:	88800003 	ldbu	r2,0(r17)
81121aac:	00c01604 	movi	r3,88
81121ab0:	108037cc 	andi	r2,r2,223
81121ab4:	10c00a26 	beq	r2,r3,81121ae0 <_strtoll_r+0x2b4>
81121ab8:	05000204 	movi	r20,8
81121abc:	002f883a 	mov	r23,zero
81121ac0:	a027883a 	mov	r19,r20
81121ac4:	003f8006 	br	811218c8 <__reset+0xfb1018c8>
81121ac8:	00800c04 	movi	r2,48
81121acc:	80800e1e 	bne	r16,r2,81121b08 <_strtoll_r+0x2dc>
81121ad0:	88800003 	ldbu	r2,0(r17)
81121ad4:	00c01604 	movi	r3,88
81121ad8:	108037cc 	andi	r2,r2,223
81121adc:	10c00a1e 	bne	r2,r3,81121b08 <_strtoll_r+0x2dc>
81121ae0:	05000404 	movi	r20,16
81121ae4:	8c000043 	ldbu	r16,1(r17)
81121ae8:	002f883a 	mov	r23,zero
81121aec:	8c400084 	addi	r17,r17,2
81121af0:	a027883a 	mov	r19,r20
81121af4:	003f7406 	br	811218c8 <__reset+0xfb1018c8>
81121af8:	00e00034 	movhi	r3,32768
81121afc:	18ffffc4 	addi	r3,r3,-1
81121b00:	5005883a 	mov	r2,r10
81121b04:	003fda06 	br	81121a70 <__reset+0xfb101a70>
81121b08:	9829883a 	mov	r20,r19
81121b0c:	002f883a 	mov	r23,zero
81121b10:	003f6d06 	br	811218c8 <__reset+0xfb1018c8>

81121b14 <_strtoul_r>:
81121b14:	00a04534 	movhi	r2,33044
81121b18:	defff604 	addi	sp,sp,-40
81121b1c:	10916704 	addi	r2,r2,17820
81121b20:	de00012e 	bgeu	sp,et,81121b28 <_strtoul_r+0x14>
81121b24:	003b68fa 	trap	3
81121b28:	dc800315 	stw	r18,12(sp)
81121b2c:	14800017 	ldw	r18,0(r2)
81121b30:	dd400615 	stw	r21,24(sp)
81121b34:	dd000515 	stw	r20,20(sp)
81121b38:	dcc00415 	stw	r19,16(sp)
81121b3c:	2029883a 	mov	r20,r4
81121b40:	dfc00915 	stw	ra,36(sp)
81121b44:	ddc00815 	stw	r23,32(sp)
81121b48:	dd800715 	stw	r22,28(sp)
81121b4c:	dc400215 	stw	r17,8(sp)
81121b50:	dc000115 	stw	r16,4(sp)
81121b54:	2827883a 	mov	r19,r5
81121b58:	382b883a 	mov	r21,r7
81121b5c:	2809883a 	mov	r4,r5
81121b60:	24000003 	ldbu	r16,0(r4)
81121b64:	24400044 	addi	r17,r4,1
81121b68:	2007883a 	mov	r3,r4
81121b6c:	9405883a 	add	r2,r18,r16
81121b70:	10800043 	ldbu	r2,1(r2)
81121b74:	8809883a 	mov	r4,r17
81121b78:	1080020c 	andi	r2,r2,8
81121b7c:	103ff81e 	bne	r2,zero,81121b60 <__reset+0xfb101b60>
81121b80:	00800b44 	movi	r2,45
81121b84:	80805326 	beq	r16,r2,81121cd4 <_strtoul_r+0x1c0>
81121b88:	00800ac4 	movi	r2,43
81121b8c:	80805526 	beq	r16,r2,81121ce4 <_strtoul_r+0x1d0>
81121b90:	002f883a 	mov	r23,zero
81121b94:	a8000f26 	beq	r21,zero,81121bd4 <_strtoul_r+0xc0>
81121b98:	00800404 	movi	r2,16
81121b9c:	a8805f26 	beq	r21,r2,81121d1c <_strtoul_r+0x208>
81121ba0:	013fffc4 	movi	r4,-1
81121ba4:	a80b883a 	mov	r5,r21
81121ba8:	d9800015 	stw	r6,0(sp)
81121bac:	1126c000 	call	81126c00 <__udivsi3>
81121bb0:	a80b883a 	mov	r5,r21
81121bb4:	013fffc4 	movi	r4,-1
81121bb8:	102d883a 	mov	r22,r2
81121bbc:	1126c640 	call	81126c64 <__umodsi3>
81121bc0:	d9800017 	ldw	r6,0(sp)
81121bc4:	1019883a 	mov	r12,r2
81121bc8:	a817883a 	mov	r11,r21
81121bcc:	b00f883a 	mov	r7,r22
81121bd0:	00000706 	br	81121bf0 <_strtoul_r+0xdc>
81121bd4:	00800c04 	movi	r2,48
81121bd8:	80804626 	beq	r16,r2,81121cf4 <_strtoul_r+0x1e0>
81121bdc:	05400284 	movi	r21,10
81121be0:	01c666b4 	movhi	r7,6554
81121be4:	03000144 	movi	r12,5
81121be8:	39e66644 	addi	r7,r7,-26215
81121bec:	a817883a 	mov	r11,r21
81121bf0:	9407883a 	add	r3,r18,r16
81121bf4:	18c00043 	ldbu	r3,1(r3)
81121bf8:	8809883a 	mov	r4,r17
81121bfc:	0011883a 	mov	r8,zero
81121c00:	1940010c 	andi	r5,r3,4
81121c04:	0005883a 	mov	r2,zero
81121c08:	02800044 	movi	r10,1
81121c0c:	027fffc4 	movi	r9,-1
81121c10:	28000e26 	beq	r5,zero,81121c4c <_strtoul_r+0x138>
81121c14:	843ff404 	addi	r16,r16,-48
81121c18:	8540120e 	bge	r16,r21,81121c64 <_strtoul_r+0x150>
81121c1c:	42400526 	beq	r8,r9,81121c34 <_strtoul_r+0x120>
81121c20:	38802236 	bltu	r7,r2,81121cac <_strtoul_r+0x198>
81121c24:	11c02026 	beq	r2,r7,81121ca8 <_strtoul_r+0x194>
81121c28:	12c5383a 	mul	r2,r2,r11
81121c2c:	02000044 	movi	r8,1
81121c30:	8085883a 	add	r2,r16,r2
81121c34:	24000003 	ldbu	r16,0(r4)
81121c38:	21000044 	addi	r4,r4,1
81121c3c:	9407883a 	add	r3,r18,r16
81121c40:	18c00043 	ldbu	r3,1(r3)
81121c44:	1940010c 	andi	r5,r3,4
81121c48:	283ff21e 	bne	r5,zero,81121c14 <__reset+0xfb101c14>
81121c4c:	18c000cc 	andi	r3,r3,3
81121c50:	18000426 	beq	r3,zero,81121c64 <_strtoul_r+0x150>
81121c54:	1a801726 	beq	r3,r10,81121cb4 <_strtoul_r+0x1a0>
81121c58:	00c015c4 	movi	r3,87
81121c5c:	80e1c83a 	sub	r16,r16,r3
81121c60:	857fee16 	blt	r16,r21,81121c1c <__reset+0xfb101c1c>
81121c64:	40001516 	blt	r8,zero,81121cbc <_strtoul_r+0x1a8>
81121c68:	b8000126 	beq	r23,zero,81121c70 <_strtoul_r+0x15c>
81121c6c:	0085c83a 	sub	r2,zero,r2
81121c70:	30000226 	beq	r6,zero,81121c7c <_strtoul_r+0x168>
81121c74:	4000151e 	bne	r8,zero,81121ccc <_strtoul_r+0x1b8>
81121c78:	34c00015 	stw	r19,0(r6)
81121c7c:	dfc00917 	ldw	ra,36(sp)
81121c80:	ddc00817 	ldw	r23,32(sp)
81121c84:	dd800717 	ldw	r22,28(sp)
81121c88:	dd400617 	ldw	r21,24(sp)
81121c8c:	dd000517 	ldw	r20,20(sp)
81121c90:	dcc00417 	ldw	r19,16(sp)
81121c94:	dc800317 	ldw	r18,12(sp)
81121c98:	dc400217 	ldw	r17,8(sp)
81121c9c:	dc000117 	ldw	r16,4(sp)
81121ca0:	dec00a04 	addi	sp,sp,40
81121ca4:	f800283a 	ret
81121ca8:	643fdf0e 	bge	r12,r16,81121c28 <__reset+0xfb101c28>
81121cac:	023fffc4 	movi	r8,-1
81121cb0:	003fe006 	br	81121c34 <__reset+0xfb101c34>
81121cb4:	00c00dc4 	movi	r3,55
81121cb8:	003fe806 	br	81121c5c <__reset+0xfb101c5c>
81121cbc:	00800884 	movi	r2,34
81121cc0:	a0800015 	stw	r2,0(r20)
81121cc4:	00bfffc4 	movi	r2,-1
81121cc8:	303fec26 	beq	r6,zero,81121c7c <__reset+0xfb101c7c>
81121ccc:	24ffffc4 	addi	r19,r4,-1
81121cd0:	003fe906 	br	81121c78 <__reset+0xfb101c78>
81121cd4:	1c400084 	addi	r17,r3,2
81121cd8:	1c000043 	ldbu	r16,1(r3)
81121cdc:	05c00044 	movi	r23,1
81121ce0:	003fac06 	br	81121b94 <__reset+0xfb101b94>
81121ce4:	1c400084 	addi	r17,r3,2
81121ce8:	1c000043 	ldbu	r16,1(r3)
81121cec:	002f883a 	mov	r23,zero
81121cf0:	003fa806 	br	81121b94 <__reset+0xfb101b94>
81121cf4:	88800003 	ldbu	r2,0(r17)
81121cf8:	00c01604 	movi	r3,88
81121cfc:	108037cc 	andi	r2,r2,223
81121d00:	10c00c26 	beq	r2,r3,81121d34 <_strtoul_r+0x220>
81121d04:	05400204 	movi	r21,8
81121d08:	01c80034 	movhi	r7,8192
81121d0c:	030001c4 	movi	r12,7
81121d10:	39ffffc4 	addi	r7,r7,-1
81121d14:	a817883a 	mov	r11,r21
81121d18:	003fb506 	br	81121bf0 <__reset+0xfb101bf0>
81121d1c:	00800c04 	movi	r2,48
81121d20:	80800c1e 	bne	r16,r2,81121d54 <_strtoul_r+0x240>
81121d24:	88800003 	ldbu	r2,0(r17)
81121d28:	00c01604 	movi	r3,88
81121d2c:	108037cc 	andi	r2,r2,223
81121d30:	10c0081e 	bne	r2,r3,81121d54 <_strtoul_r+0x240>
81121d34:	02c00404 	movi	r11,16
81121d38:	05840034 	movhi	r22,4096
81121d3c:	8c000043 	ldbu	r16,1(r17)
81121d40:	030003c4 	movi	r12,15
81121d44:	8c400084 	addi	r17,r17,2
81121d48:	b5bfffc4 	addi	r22,r22,-1
81121d4c:	582b883a 	mov	r21,r11
81121d50:	003f9e06 	br	81121bcc <__reset+0xfb101bcc>
81121d54:	01c40034 	movhi	r7,4096
81121d58:	030003c4 	movi	r12,15
81121d5c:	39ffffc4 	addi	r7,r7,-1
81121d60:	a817883a 	mov	r11,r21
81121d64:	003fa206 	br	81121bf0 <__reset+0xfb101bf0>

81121d68 <strtoul>:
81121d68:	00a04534 	movhi	r2,33044
81121d6c:	10916904 	addi	r2,r2,17828
81121d70:	300f883a 	mov	r7,r6
81121d74:	280d883a 	mov	r6,r5
81121d78:	200b883a 	mov	r5,r4
81121d7c:	11000017 	ldw	r4,0(r2)
81121d80:	1121b141 	jmpi	81121b14 <_strtoul_r>

81121d84 <_strtoull_r>:
81121d84:	00a04534 	movhi	r2,33044
81121d88:	defff404 	addi	sp,sp,-48
81121d8c:	10916704 	addi	r2,r2,17820
81121d90:	de00012e 	bgeu	sp,et,81121d98 <_strtoull_r+0x14>
81121d94:	003b68fa 	trap	3
81121d98:	dc400315 	stw	r17,12(sp)
81121d9c:	14400017 	ldw	r17,0(r2)
81121da0:	dd400715 	stw	r21,28(sp)
81121da4:	dd000615 	stw	r20,24(sp)
81121da8:	dcc00515 	stw	r19,20(sp)
81121dac:	dc800415 	stw	r18,16(sp)
81121db0:	dfc00b15 	stw	ra,44(sp)
81121db4:	df000a15 	stw	fp,40(sp)
81121db8:	ddc00915 	stw	r23,36(sp)
81121dbc:	dd800815 	stw	r22,32(sp)
81121dc0:	dc000215 	stw	r16,8(sp)
81121dc4:	2827883a 	mov	r19,r5
81121dc8:	202b883a 	mov	r21,r4
81121dcc:	3029883a 	mov	r20,r6
81121dd0:	3825883a 	mov	r18,r7
81121dd4:	2807883a 	mov	r3,r5
81121dd8:	1c000003 	ldbu	r16,0(r3)
81121ddc:	1f000044 	addi	fp,r3,1
81121de0:	1809883a 	mov	r4,r3
81121de4:	8c05883a 	add	r2,r17,r16
81121de8:	10800043 	ldbu	r2,1(r2)
81121dec:	e007883a 	mov	r3,fp
81121df0:	1080020c 	andi	r2,r2,8
81121df4:	103ff81e 	bne	r2,zero,81121dd8 <__reset+0xfb101dd8>
81121df8:	00800b44 	movi	r2,45
81121dfc:	80806e26 	beq	r16,r2,81121fb8 <_strtoull_r+0x234>
81121e00:	00800ac4 	movi	r2,43
81121e04:	80807026 	beq	r16,r2,81121fc8 <_strtoull_r+0x244>
81121e08:	002f883a 	mov	r23,zero
81121e0c:	90001426 	beq	r18,zero,81121e60 <_strtoull_r+0xdc>
81121e10:	00800404 	movi	r2,16
81121e14:	90807c26 	beq	r18,r2,81122008 <_strtoull_r+0x284>
81121e18:	902dd7fa 	srai	r22,r18,31
81121e1c:	013fffc4 	movi	r4,-1
81121e20:	200b883a 	mov	r5,r4
81121e24:	900d883a 	mov	r6,r18
81121e28:	b00f883a 	mov	r7,r22
81121e2c:	11260480 	call	81126048 <__udivdi3>
81121e30:	013fffc4 	movi	r4,-1
81121e34:	900d883a 	mov	r6,r18
81121e38:	b00f883a 	mov	r7,r22
81121e3c:	200b883a 	mov	r5,r4
81121e40:	d8c00115 	stw	r3,4(sp)
81121e44:	d8800015 	stw	r2,0(sp)
81121e48:	11265c80 	call	811265c8 <__umoddi3>
81121e4c:	101b883a 	mov	r13,r2
81121e50:	9015883a 	mov	r10,r18
81121e54:	dac00017 	ldw	r11,0(sp)
81121e58:	da000117 	ldw	r8,4(sp)
81121e5c:	00000a06 	br	81121e88 <_strtoull_r+0x104>
81121e60:	00800c04 	movi	r2,48
81121e64:	80805c26 	beq	r16,r2,81121fd8 <_strtoull_r+0x254>
81121e68:	02800284 	movi	r10,10
81121e6c:	02e666b4 	movhi	r11,39322
81121e70:	020666b4 	movhi	r8,6554
81121e74:	03400144 	movi	r13,5
81121e78:	5ae66644 	addi	r11,r11,-26215
81121e7c:	42266644 	addi	r8,r8,-26215
81121e80:	002d883a 	mov	r22,zero
81121e84:	5025883a 	mov	r18,r10
81121e88:	8c0b883a 	add	r5,r17,r16
81121e8c:	29400043 	ldbu	r5,1(r5)
81121e90:	e009883a 	mov	r4,fp
81121e94:	000f883a 	mov	r7,zero
81121e98:	2980010c 	andi	r6,r5,4
81121e9c:	0005883a 	mov	r2,zero
81121ea0:	0007883a 	mov	r3,zero
81121ea4:	03000044 	movi	r12,1
81121ea8:	027fffc4 	movi	r9,-1
81121eac:	30000d26 	beq	r6,zero,81121ee4 <_strtoull_r+0x160>
81121eb0:	843ff404 	addi	r16,r16,-48
81121eb4:	8480110e 	bge	r16,r18,81121efc <_strtoull_r+0x178>
81121eb8:	3a400426 	beq	r7,r9,81121ecc <_strtoull_r+0x148>
81121ebc:	40c00236 	bltu	r8,r3,81121ec8 <_strtoull_r+0x144>
81121ec0:	1a00231e 	bne	r3,r8,81121f50 <_strtoull_r+0x1cc>
81121ec4:	5880222e 	bgeu	r11,r2,81121f50 <_strtoull_r+0x1cc>
81121ec8:	01ffffc4 	movi	r7,-1
81121ecc:	24000003 	ldbu	r16,0(r4)
81121ed0:	21000044 	addi	r4,r4,1
81121ed4:	8c0b883a 	add	r5,r17,r16
81121ed8:	29400043 	ldbu	r5,1(r5)
81121edc:	2980010c 	andi	r6,r5,4
81121ee0:	303ff31e 	bne	r6,zero,81121eb0 <__reset+0xfb101eb0>
81121ee4:	294000cc 	andi	r5,r5,3
81121ee8:	28000426 	beq	r5,zero,81121efc <_strtoull_r+0x178>
81121eec:	2b002626 	beq	r5,r12,81121f88 <_strtoull_r+0x204>
81121ef0:	014015c4 	movi	r5,87
81121ef4:	8161c83a 	sub	r16,r16,r5
81121ef8:	84bfef16 	blt	r16,r18,81121eb8 <__reset+0xfb101eb8>
81121efc:	38002716 	blt	r7,zero,81121f9c <_strtoull_r+0x218>
81121f00:	b8000426 	beq	r23,zero,81121f14 <_strtoull_r+0x190>
81121f04:	0085c83a 	sub	r2,zero,r2
81121f08:	100ac03a 	cmpne	r5,r2,zero
81121f0c:	00e1c83a 	sub	r16,zero,r3
81121f10:	8147c83a 	sub	r3,r16,r5
81121f14:	a0000226 	beq	r20,zero,81121f20 <_strtoull_r+0x19c>
81121f18:	3800251e 	bne	r7,zero,81121fb0 <_strtoull_r+0x22c>
81121f1c:	a4c00015 	stw	r19,0(r20)
81121f20:	dfc00b17 	ldw	ra,44(sp)
81121f24:	df000a17 	ldw	fp,40(sp)
81121f28:	ddc00917 	ldw	r23,36(sp)
81121f2c:	dd800817 	ldw	r22,32(sp)
81121f30:	dd400717 	ldw	r21,28(sp)
81121f34:	dd000617 	ldw	r20,24(sp)
81121f38:	dcc00517 	ldw	r19,20(sp)
81121f3c:	dc800417 	ldw	r18,16(sp)
81121f40:	dc400317 	ldw	r17,12(sp)
81121f44:	dc000217 	ldw	r16,8(sp)
81121f48:	dec00c04 	addi	sp,sp,48
81121f4c:	f800283a 	ret
81121f50:	12c00f26 	beq	r2,r11,81121f90 <_strtoull_r+0x20c>
81121f54:	b08d383a 	mul	r6,r22,r2
81121f58:	1a87383a 	mul	r3,r3,r10
81121f5c:	128a383a 	mulxuu	r5,r2,r10
81121f60:	1285383a 	mul	r2,r2,r10
81121f64:	800fd7fa 	srai	r7,r16,31
81121f68:	1987883a 	add	r3,r3,r6
81121f6c:	8085883a 	add	r2,r16,r2
81121f70:	1947883a 	add	r3,r3,r5
81121f74:	38c7883a 	add	r3,r7,r3
81121f78:	1421803a 	cmpltu	r16,r2,r16
81121f7c:	80c7883a 	add	r3,r16,r3
81121f80:	01c00044 	movi	r7,1
81121f84:	003fd106 	br	81121ecc <__reset+0xfb101ecc>
81121f88:	01400dc4 	movi	r5,55
81121f8c:	003fd906 	br	81121ef4 <__reset+0xfb101ef4>
81121f90:	1a3ff01e 	bne	r3,r8,81121f54 <__reset+0xfb101f54>
81121f94:	6c3fcc16 	blt	r13,r16,81121ec8 <__reset+0xfb101ec8>
81121f98:	003fee06 	br	81121f54 <__reset+0xfb101f54>
81121f9c:	00800884 	movi	r2,34
81121fa0:	a8800015 	stw	r2,0(r21)
81121fa4:	00bfffc4 	movi	r2,-1
81121fa8:	1007883a 	mov	r3,r2
81121fac:	a03fdc26 	beq	r20,zero,81121f20 <__reset+0xfb101f20>
81121fb0:	24ffffc4 	addi	r19,r4,-1
81121fb4:	003fd906 	br	81121f1c <__reset+0xfb101f1c>
81121fb8:	27000084 	addi	fp,r4,2
81121fbc:	24000043 	ldbu	r16,1(r4)
81121fc0:	05c00044 	movi	r23,1
81121fc4:	003f9106 	br	81121e0c <__reset+0xfb101e0c>
81121fc8:	27000084 	addi	fp,r4,2
81121fcc:	24000043 	ldbu	r16,1(r4)
81121fd0:	002f883a 	mov	r23,zero
81121fd4:	003f8d06 	br	81121e0c <__reset+0xfb101e0c>
81121fd8:	e0800003 	ldbu	r2,0(fp)
81121fdc:	00c01604 	movi	r3,88
81121fe0:	108037cc 	andi	r2,r2,223
81121fe4:	10c00e26 	beq	r2,r3,81122020 <_strtoull_r+0x29c>
81121fe8:	02800204 	movi	r10,8
81121fec:	02ffffc4 	movi	r11,-1
81121ff0:	02080034 	movhi	r8,8192
81121ff4:	034001c4 	movi	r13,7
81121ff8:	42d1883a 	add	r8,r8,r11
81121ffc:	002d883a 	mov	r22,zero
81122000:	5025883a 	mov	r18,r10
81122004:	003fa006 	br	81121e88 <__reset+0xfb101e88>
81122008:	00800c04 	movi	r2,48
8112200c:	80800e1e 	bne	r16,r2,81122048 <_strtoull_r+0x2c4>
81122010:	e0800003 	ldbu	r2,0(fp)
81122014:	00c01604 	movi	r3,88
81122018:	108037cc 	andi	r2,r2,223
8112201c:	10c00a1e 	bne	r2,r3,81122048 <_strtoull_r+0x2c4>
81122020:	02800404 	movi	r10,16
81122024:	02ffffc4 	movi	r11,-1
81122028:	02040034 	movhi	r8,4096
8112202c:	e4000043 	ldbu	r16,1(fp)
81122030:	034003c4 	movi	r13,15
81122034:	e7000084 	addi	fp,fp,2
81122038:	42d1883a 	add	r8,r8,r11
8112203c:	002d883a 	mov	r22,zero
81122040:	5025883a 	mov	r18,r10
81122044:	003f9006 	br	81121e88 <__reset+0xfb101e88>
81122048:	02ffffc4 	movi	r11,-1
8112204c:	02040034 	movhi	r8,4096
81122050:	034003c4 	movi	r13,15
81122054:	42d1883a 	add	r8,r8,r11
81122058:	9015883a 	mov	r10,r18
8112205c:	002d883a 	mov	r22,zero
81122060:	003f8906 	br	81121e88 <__reset+0xfb101e88>

81122064 <__ssprint_r>:
81122064:	defff604 	addi	sp,sp,-40
81122068:	de00012e 	bgeu	sp,et,81122070 <__ssprint_r+0xc>
8112206c:	003b68fa 	trap	3
81122070:	30800217 	ldw	r2,8(r6)
81122074:	dc800215 	stw	r18,8(sp)
81122078:	dfc00915 	stw	ra,36(sp)
8112207c:	df000815 	stw	fp,32(sp)
81122080:	ddc00715 	stw	r23,28(sp)
81122084:	dd800615 	stw	r22,24(sp)
81122088:	dd400515 	stw	r21,20(sp)
8112208c:	dd000415 	stw	r20,16(sp)
81122090:	dcc00315 	stw	r19,12(sp)
81122094:	dc400115 	stw	r17,4(sp)
81122098:	dc000015 	stw	r16,0(sp)
8112209c:	3025883a 	mov	r18,r6
811220a0:	10005826 	beq	r2,zero,81122204 <__ssprint_r+0x1a0>
811220a4:	2027883a 	mov	r19,r4
811220a8:	35c00017 	ldw	r23,0(r6)
811220ac:	29000017 	ldw	r4,0(r5)
811220b0:	28800217 	ldw	r2,8(r5)
811220b4:	2823883a 	mov	r17,r5
811220b8:	0039883a 	mov	fp,zero
811220bc:	0021883a 	mov	r16,zero
811220c0:	80003926 	beq	r16,zero,811221a8 <__ssprint_r+0x144>
811220c4:	102b883a 	mov	r21,r2
811220c8:	102d883a 	mov	r22,r2
811220cc:	80803a36 	bltu	r16,r2,811221b8 <__ssprint_r+0x154>
811220d0:	88c0030b 	ldhu	r3,12(r17)
811220d4:	1881200c 	andi	r2,r3,1152
811220d8:	10002626 	beq	r2,zero,81122174 <__ssprint_r+0x110>
811220dc:	88800517 	ldw	r2,20(r17)
811220e0:	89400417 	ldw	r5,16(r17)
811220e4:	81800044 	addi	r6,r16,1
811220e8:	108f883a 	add	r7,r2,r2
811220ec:	3885883a 	add	r2,r7,r2
811220f0:	100ed7fa 	srli	r7,r2,31
811220f4:	216dc83a 	sub	r22,r4,r5
811220f8:	3589883a 	add	r4,r6,r22
811220fc:	3885883a 	add	r2,r7,r2
81122100:	102bd07a 	srai	r21,r2,1
81122104:	a80d883a 	mov	r6,r21
81122108:	a900022e 	bgeu	r21,r4,81122114 <__ssprint_r+0xb0>
8112210c:	202b883a 	mov	r21,r4
81122110:	200d883a 	mov	r6,r4
81122114:	18c1000c 	andi	r3,r3,1024
81122118:	18002a26 	beq	r3,zero,811221c4 <__ssprint_r+0x160>
8112211c:	300b883a 	mov	r5,r6
81122120:	9809883a 	mov	r4,r19
81122124:	1113de40 	call	81113de4 <_malloc_r>
81122128:	1029883a 	mov	r20,r2
8112212c:	10002c26 	beq	r2,zero,811221e0 <__ssprint_r+0x17c>
81122130:	89400417 	ldw	r5,16(r17)
81122134:	b00d883a 	mov	r6,r22
81122138:	1009883a 	mov	r4,r2
8112213c:	11145f80 	call	811145f8 <memcpy>
81122140:	8880030b 	ldhu	r2,12(r17)
81122144:	00fedfc4 	movi	r3,-1153
81122148:	10c4703a 	and	r2,r2,r3
8112214c:	10802014 	ori	r2,r2,128
81122150:	8880030d 	sth	r2,12(r17)
81122154:	a589883a 	add	r4,r20,r22
81122158:	adadc83a 	sub	r22,r21,r22
8112215c:	8d400515 	stw	r21,20(r17)
81122160:	8d800215 	stw	r22,8(r17)
81122164:	8d000415 	stw	r20,16(r17)
81122168:	89000015 	stw	r4,0(r17)
8112216c:	802b883a 	mov	r21,r16
81122170:	802d883a 	mov	r22,r16
81122174:	b00d883a 	mov	r6,r22
81122178:	e00b883a 	mov	r5,fp
8112217c:	111e6ec0 	call	8111e6ec <memmove>
81122180:	88800217 	ldw	r2,8(r17)
81122184:	89000017 	ldw	r4,0(r17)
81122188:	90c00217 	ldw	r3,8(r18)
8112218c:	1545c83a 	sub	r2,r2,r21
81122190:	2589883a 	add	r4,r4,r22
81122194:	88800215 	stw	r2,8(r17)
81122198:	89000015 	stw	r4,0(r17)
8112219c:	1c21c83a 	sub	r16,r3,r16
811221a0:	94000215 	stw	r16,8(r18)
811221a4:	80001726 	beq	r16,zero,81122204 <__ssprint_r+0x1a0>
811221a8:	bf000017 	ldw	fp,0(r23)
811221ac:	bc000117 	ldw	r16,4(r23)
811221b0:	bdc00204 	addi	r23,r23,8
811221b4:	003fc206 	br	811220c0 <__reset+0xfb1020c0>
811221b8:	802b883a 	mov	r21,r16
811221bc:	802d883a 	mov	r22,r16
811221c0:	003fec06 	br	81122174 <__reset+0xfb102174>
811221c4:	9809883a 	mov	r4,r19
811221c8:	111f90c0 	call	8111f90c <_realloc_r>
811221cc:	1029883a 	mov	r20,r2
811221d0:	103fe01e 	bne	r2,zero,81122154 <__reset+0xfb102154>
811221d4:	89400417 	ldw	r5,16(r17)
811221d8:	9809883a 	mov	r4,r19
811221dc:	111d8780 	call	8111d878 <_free_r>
811221e0:	88c0030b 	ldhu	r3,12(r17)
811221e4:	00800304 	movi	r2,12
811221e8:	98800015 	stw	r2,0(r19)
811221ec:	18c01014 	ori	r3,r3,64
811221f0:	88c0030d 	sth	r3,12(r17)
811221f4:	00bfffc4 	movi	r2,-1
811221f8:	90000215 	stw	zero,8(r18)
811221fc:	90000115 	stw	zero,4(r18)
81122200:	00000206 	br	8112220c <__ssprint_r+0x1a8>
81122204:	90000115 	stw	zero,4(r18)
81122208:	0005883a 	mov	r2,zero
8112220c:	dfc00917 	ldw	ra,36(sp)
81122210:	df000817 	ldw	fp,32(sp)
81122214:	ddc00717 	ldw	r23,28(sp)
81122218:	dd800617 	ldw	r22,24(sp)
8112221c:	dd400517 	ldw	r21,20(sp)
81122220:	dd000417 	ldw	r20,16(sp)
81122224:	dcc00317 	ldw	r19,12(sp)
81122228:	dc800217 	ldw	r18,8(sp)
8112222c:	dc400117 	ldw	r17,4(sp)
81122230:	dc000017 	ldw	r16,0(sp)
81122234:	dec00a04 	addi	sp,sp,40
81122238:	f800283a 	ret

8112223c <___svfiprintf_internal_r>:
8112223c:	deffc804 	addi	sp,sp,-224
81122240:	de00012e 	bgeu	sp,et,81122248 <___svfiprintf_internal_r+0xc>
81122244:	003b68fa 	trap	3
81122248:	2880030b 	ldhu	r2,12(r5)
8112224c:	dcc03115 	stw	r19,196(sp)
81122250:	dfc03715 	stw	ra,220(sp)
81122254:	df003615 	stw	fp,216(sp)
81122258:	ddc03515 	stw	r23,212(sp)
8112225c:	dd803415 	stw	r22,208(sp)
81122260:	dd403315 	stw	r21,204(sp)
81122264:	dd003215 	stw	r20,200(sp)
81122268:	dc803015 	stw	r18,192(sp)
8112226c:	dc402f15 	stw	r17,188(sp)
81122270:	dc002e15 	stw	r16,184(sp)
81122274:	d9402715 	stw	r5,156(sp)
81122278:	d9002a15 	stw	r4,168(sp)
8112227c:	1080200c 	andi	r2,r2,128
81122280:	d9c02315 	stw	r7,140(sp)
81122284:	3027883a 	mov	r19,r6
81122288:	10000226 	beq	r2,zero,81122294 <___svfiprintf_internal_r+0x58>
8112228c:	28800417 	ldw	r2,16(r5)
81122290:	10041d26 	beq	r2,zero,81123308 <___svfiprintf_internal_r+0x10cc>
81122294:	dac01a04 	addi	r11,sp,104
81122298:	dac01e15 	stw	r11,120(sp)
8112229c:	d8801e17 	ldw	r2,120(sp)
811222a0:	dac019c4 	addi	r11,sp,103
811222a4:	dd402a17 	ldw	r21,168(sp)
811222a8:	ddc02717 	ldw	r23,156(sp)
811222ac:	05a04534 	movhi	r22,33044
811222b0:	05204534 	movhi	r20,33044
811222b4:	dac01f15 	stw	r11,124(sp)
811222b8:	12d7c83a 	sub	r11,r2,r11
811222bc:	b5881504 	addi	r22,r22,8276
811222c0:	a5081104 	addi	r20,r20,8260
811222c4:	dec01a15 	stw	sp,104(sp)
811222c8:	d8001c15 	stw	zero,112(sp)
811222cc:	d8001b15 	stw	zero,108(sp)
811222d0:	d811883a 	mov	r8,sp
811222d4:	d8002915 	stw	zero,164(sp)
811222d8:	d8002515 	stw	zero,148(sp)
811222dc:	dac02b15 	stw	r11,172(sp)
811222e0:	98800007 	ldb	r2,0(r19)
811222e4:	1002dd26 	beq	r2,zero,81122e5c <___svfiprintf_internal_r+0xc20>
811222e8:	00c00944 	movi	r3,37
811222ec:	9823883a 	mov	r17,r19
811222f0:	10c0021e 	bne	r2,r3,811222fc <___svfiprintf_internal_r+0xc0>
811222f4:	00001406 	br	81122348 <___svfiprintf_internal_r+0x10c>
811222f8:	10c00326 	beq	r2,r3,81122308 <___svfiprintf_internal_r+0xcc>
811222fc:	8c400044 	addi	r17,r17,1
81122300:	88800007 	ldb	r2,0(r17)
81122304:	103ffc1e 	bne	r2,zero,811222f8 <__reset+0xfb1022f8>
81122308:	8ce1c83a 	sub	r16,r17,r19
8112230c:	80000e26 	beq	r16,zero,81122348 <___svfiprintf_internal_r+0x10c>
81122310:	d8c01c17 	ldw	r3,112(sp)
81122314:	d8801b17 	ldw	r2,108(sp)
81122318:	44c00015 	stw	r19,0(r8)
8112231c:	1c07883a 	add	r3,r3,r16
81122320:	10800044 	addi	r2,r2,1
81122324:	d8c01c15 	stw	r3,112(sp)
81122328:	44000115 	stw	r16,4(r8)
8112232c:	d8801b15 	stw	r2,108(sp)
81122330:	00c001c4 	movi	r3,7
81122334:	18831e16 	blt	r3,r2,81122fb0 <___svfiprintf_internal_r+0xd74>
81122338:	42000204 	addi	r8,r8,8
8112233c:	dac02517 	ldw	r11,148(sp)
81122340:	5c17883a 	add	r11,r11,r16
81122344:	dac02515 	stw	r11,148(sp)
81122348:	88800007 	ldb	r2,0(r17)
8112234c:	1002c526 	beq	r2,zero,81122e64 <___svfiprintf_internal_r+0xc28>
81122350:	88c00047 	ldb	r3,1(r17)
81122354:	8cc00044 	addi	r19,r17,1
81122358:	d8001d85 	stb	zero,118(sp)
8112235c:	0009883a 	mov	r4,zero
81122360:	000f883a 	mov	r7,zero
81122364:	043fffc4 	movi	r16,-1
81122368:	d8002415 	stw	zero,144(sp)
8112236c:	0025883a 	mov	r18,zero
81122370:	01401604 	movi	r5,88
81122374:	01800244 	movi	r6,9
81122378:	02800a84 	movi	r10,42
8112237c:	02401b04 	movi	r9,108
81122380:	9cc00044 	addi	r19,r19,1
81122384:	18bff804 	addi	r2,r3,-32
81122388:	2881dd36 	bltu	r5,r2,81122b00 <___svfiprintf_internal_r+0x8c4>
8112238c:	100490ba 	slli	r2,r2,2
81122390:	02e044b4 	movhi	r11,33042
81122394:	5ac8e904 	addi	r11,r11,9124
81122398:	12c5883a 	add	r2,r2,r11
8112239c:	10800017 	ldw	r2,0(r2)
811223a0:	1000683a 	jmp	r2
811223a4:	811225a0 	cmpeqi	r4,r16,18582
811223a8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223ac:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223b0:	81122594 	ori	r4,r16,18582
811223b4:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223b8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223bc:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223c0:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223c4:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223c8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223cc:	81122508 	cmpgei	r4,r16,18580
811223d0:	811226e4 	muli	r4,r16,18587
811223d4:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223d8:	81122534 	orhi	r4,r16,18580
811223dc:	81122b34 	orhi	r4,r16,18604
811223e0:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811223e4:	81122b28 	cmpgeui	r4,r16,18604
811223e8:	81122ac8 	cmpgei	r4,r16,18603
811223ec:	81122ac8 	cmpgei	r4,r16,18603
811223f0:	81122ac8 	cmpgei	r4,r16,18603
811223f4:	81122ac8 	cmpgei	r4,r16,18603
811223f8:	81122ac8 	cmpgei	r4,r16,18603
811223fc:	81122ac8 	cmpgei	r4,r16,18603
81122400:	81122ac8 	cmpgei	r4,r16,18603
81122404:	81122ac8 	cmpgei	r4,r16,18603
81122408:	81122ac8 	cmpgei	r4,r16,18603
8112240c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122410:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122414:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122418:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112241c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122420:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122424:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122428:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112242c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122430:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122434:	81122a64 	muli	r4,r16,18601
81122438:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112243c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122440:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122444:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122448:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112244c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122450:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122454:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122458:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112245c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122460:	81122bdc 	xori	r4,r16,18607
81122464:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122468:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112246c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122470:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122474:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122478:	81122b74 	orhi	r4,r16,18605
8112247c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122480:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122484:	811228a8 	cmpgeui	r4,r16,18594
81122488:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112248c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122490:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122494:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122498:	81122b00 	call	881122b0 <__reset+0x20f22b0>
8112249c:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224a0:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224a4:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224a8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224ac:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224b0:	81122798 	cmpnei	r4,r16,18590
811224b4:	81122944 	addi	r4,r16,18597
811224b8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224bc:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224c0:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224c4:	81122938 	rdprs	r4,r16,18596
811224c8:	81122944 	addi	r4,r16,18597
811224cc:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224d0:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224d4:	81122928 	cmpgeui	r4,r16,18596
811224d8:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224dc:	811228ec 	andhi	r4,r16,18595
811224e0:	811226f4 	orhi	r4,r16,18587
811224e4:	81122540 	call	88112254 <__reset+0x20f2254>
811224e8:	81122a58 	cmpnei	r4,r16,18601
811224ec:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224f0:	81122a0c 	andi	r4,r16,18600
811224f4:	81122b00 	call	881122b0 <__reset+0x20f22b0>
811224f8:	81122664 	muli	r4,r16,18585
811224fc:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122500:	81122b00 	call	881122b0 <__reset+0x20f22b0>
81122504:	811225c0 	call	8811225c <__reset+0x20f225c>
81122508:	dac02317 	ldw	r11,140(sp)
8112250c:	5ac00017 	ldw	r11,0(r11)
81122510:	dac02415 	stw	r11,144(sp)
81122514:	dac02317 	ldw	r11,140(sp)
81122518:	58800104 	addi	r2,r11,4
8112251c:	dac02417 	ldw	r11,144(sp)
81122520:	5802e90e 	bge	r11,zero,811230c8 <___svfiprintf_internal_r+0xe8c>
81122524:	dac02417 	ldw	r11,144(sp)
81122528:	d8802315 	stw	r2,140(sp)
8112252c:	02d7c83a 	sub	r11,zero,r11
81122530:	dac02415 	stw	r11,144(sp)
81122534:	94800114 	ori	r18,r18,4
81122538:	98c00007 	ldb	r3,0(r19)
8112253c:	003f9006 	br	81122380 <__reset+0xfb102380>
81122540:	00800c04 	movi	r2,48
81122544:	dac02317 	ldw	r11,140(sp)
81122548:	d8801d05 	stb	r2,116(sp)
8112254c:	00801e04 	movi	r2,120
81122550:	d8801d45 	stb	r2,117(sp)
81122554:	d8001d85 	stb	zero,118(sp)
81122558:	58c00104 	addi	r3,r11,4
8112255c:	5f000017 	ldw	fp,0(r11)
81122560:	0013883a 	mov	r9,zero
81122564:	90800094 	ori	r2,r18,2
81122568:	80032b16 	blt	r16,zero,81123218 <___svfiprintf_internal_r+0xfdc>
8112256c:	00bfdfc4 	movi	r2,-129
81122570:	90a4703a 	and	r18,r18,r2
81122574:	d8c02315 	stw	r3,140(sp)
81122578:	94800094 	ori	r18,r18,2
8112257c:	e002dc26 	beq	fp,zero,811230f0 <___svfiprintf_internal_r+0xeb4>
81122580:	01204534 	movhi	r4,33044
81122584:	21078704 	addi	r4,r4,7708
81122588:	0015883a 	mov	r10,zero
8112258c:	d9002915 	stw	r4,164(sp)
81122590:	00002306 	br	81122620 <___svfiprintf_internal_r+0x3e4>
81122594:	94800054 	ori	r18,r18,1
81122598:	98c00007 	ldb	r3,0(r19)
8112259c:	003f7806 	br	81122380 <__reset+0xfb102380>
811225a0:	38803fcc 	andi	r2,r7,255
811225a4:	1080201c 	xori	r2,r2,128
811225a8:	10bfe004 	addi	r2,r2,-128
811225ac:	1002f31e 	bne	r2,zero,8112317c <___svfiprintf_internal_r+0xf40>
811225b0:	01000044 	movi	r4,1
811225b4:	01c00804 	movi	r7,32
811225b8:	98c00007 	ldb	r3,0(r19)
811225bc:	003f7006 	br	81122380 <__reset+0xfb102380>
811225c0:	21003fcc 	andi	r4,r4,255
811225c4:	2003aa1e 	bne	r4,zero,81123470 <___svfiprintf_internal_r+0x1234>
811225c8:	00a04534 	movhi	r2,33044
811225cc:	10878704 	addi	r2,r2,7708
811225d0:	d8802915 	stw	r2,164(sp)
811225d4:	9080080c 	andi	r2,r18,32
811225d8:	1000ba26 	beq	r2,zero,811228c4 <___svfiprintf_internal_r+0x688>
811225dc:	dac02317 	ldw	r11,140(sp)
811225e0:	5f000017 	ldw	fp,0(r11)
811225e4:	5a400117 	ldw	r9,4(r11)
811225e8:	5ac00204 	addi	r11,r11,8
811225ec:	dac02315 	stw	r11,140(sp)
811225f0:	9080004c 	andi	r2,r18,1
811225f4:	10029026 	beq	r2,zero,81123038 <___svfiprintf_internal_r+0xdfc>
811225f8:	e244b03a 	or	r2,fp,r9
811225fc:	1002d41e 	bne	r2,zero,81123150 <___svfiprintf_internal_r+0xf14>
81122600:	d8001d85 	stb	zero,118(sp)
81122604:	80030b16 	blt	r16,zero,81123234 <___svfiprintf_internal_r+0xff8>
81122608:	00bfdfc4 	movi	r2,-129
8112260c:	90a4703a 	and	r18,r18,r2
81122610:	0015883a 	mov	r10,zero
81122614:	80002426 	beq	r16,zero,811226a8 <___svfiprintf_internal_r+0x46c>
81122618:	0039883a 	mov	fp,zero
8112261c:	0013883a 	mov	r9,zero
81122620:	d9002917 	ldw	r4,164(sp)
81122624:	dc401a04 	addi	r17,sp,104
81122628:	e08003cc 	andi	r2,fp,15
8112262c:	4806973a 	slli	r3,r9,28
81122630:	2085883a 	add	r2,r4,r2
81122634:	e038d13a 	srli	fp,fp,4
81122638:	10800003 	ldbu	r2,0(r2)
8112263c:	4812d13a 	srli	r9,r9,4
81122640:	8c7fffc4 	addi	r17,r17,-1
81122644:	1f38b03a 	or	fp,r3,fp
81122648:	88800005 	stb	r2,0(r17)
8112264c:	e244b03a 	or	r2,fp,r9
81122650:	103ff51e 	bne	r2,zero,81122628 <__reset+0xfb102628>
81122654:	dac01e17 	ldw	r11,120(sp)
81122658:	5c57c83a 	sub	r11,r11,r17
8112265c:	dac02115 	stw	r11,132(sp)
81122660:	00001406 	br	811226b4 <___svfiprintf_internal_r+0x478>
81122664:	21003fcc 	andi	r4,r4,255
81122668:	2003741e 	bne	r4,zero,8112343c <___svfiprintf_internal_r+0x1200>
8112266c:	9080080c 	andi	r2,r18,32
81122670:	10014526 	beq	r2,zero,81122b88 <___svfiprintf_internal_r+0x94c>
81122674:	dac02317 	ldw	r11,140(sp)
81122678:	d8001d85 	stb	zero,118(sp)
8112267c:	58c00204 	addi	r3,r11,8
81122680:	5f000017 	ldw	fp,0(r11)
81122684:	5a400117 	ldw	r9,4(r11)
81122688:	8002d916 	blt	r16,zero,811231f0 <___svfiprintf_internal_r+0xfb4>
8112268c:	013fdfc4 	movi	r4,-129
81122690:	e244b03a 	or	r2,fp,r9
81122694:	d8c02315 	stw	r3,140(sp)
81122698:	9124703a 	and	r18,r18,r4
8112269c:	0015883a 	mov	r10,zero
811226a0:	1000b91e 	bne	r2,zero,81122988 <___svfiprintf_internal_r+0x74c>
811226a4:	8002e61e 	bne	r16,zero,81123240 <___svfiprintf_internal_r+0x1004>
811226a8:	0021883a 	mov	r16,zero
811226ac:	d8002115 	stw	zero,132(sp)
811226b0:	dc401a04 	addi	r17,sp,104
811226b4:	d8c02117 	ldw	r3,132(sp)
811226b8:	dc002015 	stw	r16,128(sp)
811226bc:	80c0010e 	bge	r16,r3,811226c4 <___svfiprintf_internal_r+0x488>
811226c0:	d8c02015 	stw	r3,128(sp)
811226c4:	52803fcc 	andi	r10,r10,255
811226c8:	5280201c 	xori	r10,r10,128
811226cc:	52bfe004 	addi	r10,r10,-128
811226d0:	50003c26 	beq	r10,zero,811227c4 <___svfiprintf_internal_r+0x588>
811226d4:	dac02017 	ldw	r11,128(sp)
811226d8:	5ac00044 	addi	r11,r11,1
811226dc:	dac02015 	stw	r11,128(sp)
811226e0:	00003806 	br	811227c4 <___svfiprintf_internal_r+0x588>
811226e4:	01000044 	movi	r4,1
811226e8:	01c00ac4 	movi	r7,43
811226ec:	98c00007 	ldb	r3,0(r19)
811226f0:	003f2306 	br	81122380 <__reset+0xfb102380>
811226f4:	21003fcc 	andi	r4,r4,255
811226f8:	2003481e 	bne	r4,zero,8112341c <___svfiprintf_internal_r+0x11e0>
811226fc:	9080080c 	andi	r2,r18,32
81122700:	10013b26 	beq	r2,zero,81122bf0 <___svfiprintf_internal_r+0x9b4>
81122704:	dac02317 	ldw	r11,140(sp)
81122708:	d8001d85 	stb	zero,118(sp)
8112270c:	58800204 	addi	r2,r11,8
81122710:	5f000017 	ldw	fp,0(r11)
81122714:	5a400117 	ldw	r9,4(r11)
81122718:	8002a816 	blt	r16,zero,811231bc <___svfiprintf_internal_r+0xf80>
8112271c:	013fdfc4 	movi	r4,-129
81122720:	e246b03a 	or	r3,fp,r9
81122724:	d8802315 	stw	r2,140(sp)
81122728:	9124703a 	and	r18,r18,r4
8112272c:	18013c26 	beq	r3,zero,81122c20 <___svfiprintf_internal_r+0x9e4>
81122730:	0015883a 	mov	r10,zero
81122734:	dc401a04 	addi	r17,sp,104
81122738:	e006d0fa 	srli	r3,fp,3
8112273c:	4808977a 	slli	r4,r9,29
81122740:	4812d0fa 	srli	r9,r9,3
81122744:	e70001cc 	andi	fp,fp,7
81122748:	e0800c04 	addi	r2,fp,48
8112274c:	8c7fffc4 	addi	r17,r17,-1
81122750:	20f8b03a 	or	fp,r4,r3
81122754:	88800005 	stb	r2,0(r17)
81122758:	e246b03a 	or	r3,fp,r9
8112275c:	183ff61e 	bne	r3,zero,81122738 <__reset+0xfb102738>
81122760:	90c0004c 	andi	r3,r18,1
81122764:	1800a526 	beq	r3,zero,811229fc <___svfiprintf_internal_r+0x7c0>
81122768:	10803fcc 	andi	r2,r2,255
8112276c:	1080201c 	xori	r2,r2,128
81122770:	10bfe004 	addi	r2,r2,-128
81122774:	00c00c04 	movi	r3,48
81122778:	10ffb626 	beq	r2,r3,81122654 <__reset+0xfb102654>
8112277c:	88ffffc5 	stb	r3,-1(r17)
81122780:	d8c01e17 	ldw	r3,120(sp)
81122784:	88bfffc4 	addi	r2,r17,-1
81122788:	1023883a 	mov	r17,r2
8112278c:	1887c83a 	sub	r3,r3,r2
81122790:	d8c02115 	stw	r3,132(sp)
81122794:	003fc706 	br	811226b4 <__reset+0xfb1026b4>
81122798:	dac02317 	ldw	r11,140(sp)
8112279c:	00c00044 	movi	r3,1
811227a0:	d8c02015 	stw	r3,128(sp)
811227a4:	58800017 	ldw	r2,0(r11)
811227a8:	5ac00104 	addi	r11,r11,4
811227ac:	d8001d85 	stb	zero,118(sp)
811227b0:	d8801005 	stb	r2,64(sp)
811227b4:	dac02315 	stw	r11,140(sp)
811227b8:	d8c02115 	stw	r3,132(sp)
811227bc:	dc401004 	addi	r17,sp,64
811227c0:	0021883a 	mov	r16,zero
811227c4:	90c0008c 	andi	r3,r18,2
811227c8:	d8c02215 	stw	r3,136(sp)
811227cc:	18000326 	beq	r3,zero,811227dc <___svfiprintf_internal_r+0x5a0>
811227d0:	dac02017 	ldw	r11,128(sp)
811227d4:	5ac00084 	addi	r11,r11,2
811227d8:	dac02015 	stw	r11,128(sp)
811227dc:	90c0210c 	andi	r3,r18,132
811227e0:	d8c02615 	stw	r3,152(sp)
811227e4:	1801131e 	bne	r3,zero,81122c34 <___svfiprintf_internal_r+0x9f8>
811227e8:	dac02417 	ldw	r11,144(sp)
811227ec:	d8c02017 	ldw	r3,128(sp)
811227f0:	58f9c83a 	sub	fp,r11,r3
811227f4:	07010f0e 	bge	zero,fp,81122c34 <___svfiprintf_internal_r+0x9f8>
811227f8:	02400404 	movi	r9,16
811227fc:	d8c01c17 	ldw	r3,112(sp)
81122800:	d8801b17 	ldw	r2,108(sp)
81122804:	4f02d60e 	bge	r9,fp,81123360 <___svfiprintf_internal_r+0x1124>
81122808:	01604534 	movhi	r5,33044
8112280c:	29481504 	addi	r5,r5,8276
81122810:	d9402815 	stw	r5,160(sp)
81122814:	028001c4 	movi	r10,7
81122818:	00000306 	br	81122828 <___svfiprintf_internal_r+0x5ec>
8112281c:	e73ffc04 	addi	fp,fp,-16
81122820:	42000204 	addi	r8,r8,8
81122824:	4f00150e 	bge	r9,fp,8112287c <___svfiprintf_internal_r+0x640>
81122828:	18c00404 	addi	r3,r3,16
8112282c:	10800044 	addi	r2,r2,1
81122830:	45800015 	stw	r22,0(r8)
81122834:	42400115 	stw	r9,4(r8)
81122838:	d8c01c15 	stw	r3,112(sp)
8112283c:	d8801b15 	stw	r2,108(sp)
81122840:	50bff60e 	bge	r10,r2,8112281c <__reset+0xfb10281c>
81122844:	d9801a04 	addi	r6,sp,104
81122848:	b80b883a 	mov	r5,r23
8112284c:	a809883a 	mov	r4,r21
81122850:	da402c15 	stw	r9,176(sp)
81122854:	da802d15 	stw	r10,180(sp)
81122858:	11220640 	call	81122064 <__ssprint_r>
8112285c:	da402c17 	ldw	r9,176(sp)
81122860:	da802d17 	ldw	r10,180(sp)
81122864:	1001851e 	bne	r2,zero,81122e7c <___svfiprintf_internal_r+0xc40>
81122868:	e73ffc04 	addi	fp,fp,-16
8112286c:	d8c01c17 	ldw	r3,112(sp)
81122870:	d8801b17 	ldw	r2,108(sp)
81122874:	d811883a 	mov	r8,sp
81122878:	4f3feb16 	blt	r9,fp,81122828 <__reset+0xfb102828>
8112287c:	dac02817 	ldw	r11,160(sp)
81122880:	e0c7883a 	add	r3,fp,r3
81122884:	10800044 	addi	r2,r2,1
81122888:	42c00015 	stw	r11,0(r8)
8112288c:	47000115 	stw	fp,4(r8)
81122890:	d8c01c15 	stw	r3,112(sp)
81122894:	d8801b15 	stw	r2,108(sp)
81122898:	010001c4 	movi	r4,7
8112289c:	2081ee16 	blt	r4,r2,81123058 <___svfiprintf_internal_r+0xe1c>
811228a0:	42000204 	addi	r8,r8,8
811228a4:	0000e506 	br	81122c3c <___svfiprintf_internal_r+0xa00>
811228a8:	21003fcc 	andi	r4,r4,255
811228ac:	2002dd1e 	bne	r4,zero,81123424 <___svfiprintf_internal_r+0x11e8>
811228b0:	00a04534 	movhi	r2,33044
811228b4:	10878204 	addi	r2,r2,7688
811228b8:	d8802915 	stw	r2,164(sp)
811228bc:	9080080c 	andi	r2,r18,32
811228c0:	103f461e 	bne	r2,zero,811225dc <__reset+0xfb1025dc>
811228c4:	9080040c 	andi	r2,r18,16
811228c8:	10022e1e 	bne	r2,zero,81123184 <___svfiprintf_internal_r+0xf48>
811228cc:	9080100c 	andi	r2,r18,64
811228d0:	dac02317 	ldw	r11,140(sp)
811228d4:	10027326 	beq	r2,zero,811232a4 <___svfiprintf_internal_r+0x1068>
811228d8:	5f00000b 	ldhu	fp,0(r11)
811228dc:	5ac00104 	addi	r11,r11,4
811228e0:	0013883a 	mov	r9,zero
811228e4:	dac02315 	stw	r11,140(sp)
811228e8:	003f4106 	br	811225f0 <__reset+0xfb1025f0>
811228ec:	21003fcc 	andi	r4,r4,255
811228f0:	2002e11e 	bne	r4,zero,81123478 <___svfiprintf_internal_r+0x123c>
811228f4:	9080080c 	andi	r2,r18,32
811228f8:	1002011e 	bne	r2,zero,81123100 <___svfiprintf_internal_r+0xec4>
811228fc:	9080040c 	andi	r2,r18,16
81122900:	10023e1e 	bne	r2,zero,811231fc <___svfiprintf_internal_r+0xfc0>
81122904:	9480100c 	andi	r18,r18,64
81122908:	90023c26 	beq	r18,zero,811231fc <___svfiprintf_internal_r+0xfc0>
8112290c:	dac02317 	ldw	r11,140(sp)
81122910:	58800017 	ldw	r2,0(r11)
81122914:	5ac00104 	addi	r11,r11,4
81122918:	dac02315 	stw	r11,140(sp)
8112291c:	dac02517 	ldw	r11,148(sp)
81122920:	12c0000d 	sth	r11,0(r2)
81122924:	003e6e06 	br	811222e0 <__reset+0xfb1022e0>
81122928:	98c00007 	ldb	r3,0(r19)
8112292c:	1a422926 	beq	r3,r9,811231d4 <___svfiprintf_internal_r+0xf98>
81122930:	94800414 	ori	r18,r18,16
81122934:	003e9206 	br	81122380 <__reset+0xfb102380>
81122938:	94801014 	ori	r18,r18,64
8112293c:	98c00007 	ldb	r3,0(r19)
81122940:	003e8f06 	br	81122380 <__reset+0xfb102380>
81122944:	21003fcc 	andi	r4,r4,255
81122948:	2002c71e 	bne	r4,zero,81123468 <___svfiprintf_internal_r+0x122c>
8112294c:	9080080c 	andi	r2,r18,32
81122950:	10004926 	beq	r2,zero,81122a78 <___svfiprintf_internal_r+0x83c>
81122954:	dac02317 	ldw	r11,140(sp)
81122958:	58800117 	ldw	r2,4(r11)
8112295c:	5f000017 	ldw	fp,0(r11)
81122960:	5ac00204 	addi	r11,r11,8
81122964:	dac02315 	stw	r11,140(sp)
81122968:	1013883a 	mov	r9,r2
8112296c:	10004b16 	blt	r2,zero,81122a9c <___svfiprintf_internal_r+0x860>
81122970:	da801d83 	ldbu	r10,118(sp)
81122974:	8001cb16 	blt	r16,zero,811230a4 <___svfiprintf_internal_r+0xe68>
81122978:	00ffdfc4 	movi	r3,-129
8112297c:	e244b03a 	or	r2,fp,r9
81122980:	90e4703a 	and	r18,r18,r3
81122984:	103f4726 	beq	r2,zero,811226a4 <__reset+0xfb1026a4>
81122988:	48008c26 	beq	r9,zero,81122bbc <___svfiprintf_internal_r+0x980>
8112298c:	dc802015 	stw	r18,128(sp)
81122990:	dc002115 	stw	r16,132(sp)
81122994:	dc401a04 	addi	r17,sp,104
81122998:	e021883a 	mov	r16,fp
8112299c:	da002215 	stw	r8,136(sp)
811229a0:	5039883a 	mov	fp,r10
811229a4:	4825883a 	mov	r18,r9
811229a8:	8009883a 	mov	r4,r16
811229ac:	900b883a 	mov	r5,r18
811229b0:	01800284 	movi	r6,10
811229b4:	000f883a 	mov	r7,zero
811229b8:	11265c80 	call	811265c8 <__umoddi3>
811229bc:	10800c04 	addi	r2,r2,48
811229c0:	8c7fffc4 	addi	r17,r17,-1
811229c4:	8009883a 	mov	r4,r16
811229c8:	900b883a 	mov	r5,r18
811229cc:	88800005 	stb	r2,0(r17)
811229d0:	01800284 	movi	r6,10
811229d4:	000f883a 	mov	r7,zero
811229d8:	11260480 	call	81126048 <__udivdi3>
811229dc:	1021883a 	mov	r16,r2
811229e0:	10c4b03a 	or	r2,r2,r3
811229e4:	1825883a 	mov	r18,r3
811229e8:	103fef1e 	bne	r2,zero,811229a8 <__reset+0xfb1029a8>
811229ec:	dc802017 	ldw	r18,128(sp)
811229f0:	dc002117 	ldw	r16,132(sp)
811229f4:	da002217 	ldw	r8,136(sp)
811229f8:	e015883a 	mov	r10,fp
811229fc:	d8c01e17 	ldw	r3,120(sp)
81122a00:	1c47c83a 	sub	r3,r3,r17
81122a04:	d8c02115 	stw	r3,132(sp)
81122a08:	003f2a06 	br	811226b4 <__reset+0xfb1026b4>
81122a0c:	dac02317 	ldw	r11,140(sp)
81122a10:	d8001d85 	stb	zero,118(sp)
81122a14:	5c400017 	ldw	r17,0(r11)
81122a18:	5f000104 	addi	fp,r11,4
81122a1c:	88022f26 	beq	r17,zero,811232dc <___svfiprintf_internal_r+0x10a0>
81122a20:	80022516 	blt	r16,zero,811232b8 <___svfiprintf_internal_r+0x107c>
81122a24:	800d883a 	mov	r6,r16
81122a28:	000b883a 	mov	r5,zero
81122a2c:	8809883a 	mov	r4,r17
81122a30:	da002c15 	stw	r8,176(sp)
81122a34:	111e6080 	call	8111e608 <memchr>
81122a38:	da002c17 	ldw	r8,176(sp)
81122a3c:	10026426 	beq	r2,zero,811233d0 <___svfiprintf_internal_r+0x1194>
81122a40:	1445c83a 	sub	r2,r2,r17
81122a44:	d8802115 	stw	r2,132(sp)
81122a48:	da801d83 	ldbu	r10,118(sp)
81122a4c:	df002315 	stw	fp,140(sp)
81122a50:	0021883a 	mov	r16,zero
81122a54:	003f1706 	br	811226b4 <__reset+0xfb1026b4>
81122a58:	94800814 	ori	r18,r18,32
81122a5c:	98c00007 	ldb	r3,0(r19)
81122a60:	003e4706 	br	81122380 <__reset+0xfb102380>
81122a64:	21003fcc 	andi	r4,r4,255
81122a68:	2002701e 	bne	r4,zero,8112342c <___svfiprintf_internal_r+0x11f0>
81122a6c:	94800414 	ori	r18,r18,16
81122a70:	9080080c 	andi	r2,r18,32
81122a74:	103fb71e 	bne	r2,zero,81122954 <__reset+0xfb102954>
81122a78:	9080040c 	andi	r2,r18,16
81122a7c:	1001ab26 	beq	r2,zero,8112312c <___svfiprintf_internal_r+0xef0>
81122a80:	dac02317 	ldw	r11,140(sp)
81122a84:	5f000017 	ldw	fp,0(r11)
81122a88:	5ac00104 	addi	r11,r11,4
81122a8c:	dac02315 	stw	r11,140(sp)
81122a90:	e013d7fa 	srai	r9,fp,31
81122a94:	4805883a 	mov	r2,r9
81122a98:	103fb50e 	bge	r2,zero,81122970 <__reset+0xfb102970>
81122a9c:	0739c83a 	sub	fp,zero,fp
81122aa0:	02800b44 	movi	r10,45
81122aa4:	e004c03a 	cmpne	r2,fp,zero
81122aa8:	0253c83a 	sub	r9,zero,r9
81122aac:	da801d85 	stb	r10,118(sp)
81122ab0:	4893c83a 	sub	r9,r9,r2
81122ab4:	80023016 	blt	r16,zero,81123378 <___svfiprintf_internal_r+0x113c>
81122ab8:	00bfdfc4 	movi	r2,-129
81122abc:	90a4703a 	and	r18,r18,r2
81122ac0:	483fb21e 	bne	r9,zero,8112298c <__reset+0xfb10298c>
81122ac4:	00003d06 	br	81122bbc <___svfiprintf_internal_r+0x980>
81122ac8:	9817883a 	mov	r11,r19
81122acc:	d8002415 	stw	zero,144(sp)
81122ad0:	18bff404 	addi	r2,r3,-48
81122ad4:	0019883a 	mov	r12,zero
81122ad8:	58c00007 	ldb	r3,0(r11)
81122adc:	630002a4 	muli	r12,r12,10
81122ae0:	9cc00044 	addi	r19,r19,1
81122ae4:	9817883a 	mov	r11,r19
81122ae8:	1319883a 	add	r12,r2,r12
81122aec:	18bff404 	addi	r2,r3,-48
81122af0:	30bff92e 	bgeu	r6,r2,81122ad8 <__reset+0xfb102ad8>
81122af4:	db002415 	stw	r12,144(sp)
81122af8:	18bff804 	addi	r2,r3,-32
81122afc:	28be232e 	bgeu	r5,r2,8112238c <__reset+0xfb10238c>
81122b00:	21003fcc 	andi	r4,r4,255
81122b04:	20024b1e 	bne	r4,zero,81123434 <___svfiprintf_internal_r+0x11f8>
81122b08:	1800d626 	beq	r3,zero,81122e64 <___svfiprintf_internal_r+0xc28>
81122b0c:	02c00044 	movi	r11,1
81122b10:	dac02015 	stw	r11,128(sp)
81122b14:	d8c01005 	stb	r3,64(sp)
81122b18:	d8001d85 	stb	zero,118(sp)
81122b1c:	dac02115 	stw	r11,132(sp)
81122b20:	dc401004 	addi	r17,sp,64
81122b24:	003f2606 	br	811227c0 <__reset+0xfb1027c0>
81122b28:	94802014 	ori	r18,r18,128
81122b2c:	98c00007 	ldb	r3,0(r19)
81122b30:	003e1306 	br	81122380 <__reset+0xfb102380>
81122b34:	98c00007 	ldb	r3,0(r19)
81122b38:	9ac00044 	addi	r11,r19,1
81122b3c:	1a822b26 	beq	r3,r10,811233ec <___svfiprintf_internal_r+0x11b0>
81122b40:	18bff404 	addi	r2,r3,-48
81122b44:	0021883a 	mov	r16,zero
81122b48:	30821e36 	bltu	r6,r2,811233c4 <___svfiprintf_internal_r+0x1188>
81122b4c:	58c00007 	ldb	r3,0(r11)
81122b50:	840002a4 	muli	r16,r16,10
81122b54:	5cc00044 	addi	r19,r11,1
81122b58:	9817883a 	mov	r11,r19
81122b5c:	80a1883a 	add	r16,r16,r2
81122b60:	18bff404 	addi	r2,r3,-48
81122b64:	30bff92e 	bgeu	r6,r2,81122b4c <__reset+0xfb102b4c>
81122b68:	803e060e 	bge	r16,zero,81122384 <__reset+0xfb102384>
81122b6c:	043fffc4 	movi	r16,-1
81122b70:	003e0406 	br	81122384 <__reset+0xfb102384>
81122b74:	21003fcc 	andi	r4,r4,255
81122b78:	2002371e 	bne	r4,zero,81123458 <___svfiprintf_internal_r+0x121c>
81122b7c:	94800414 	ori	r18,r18,16
81122b80:	9080080c 	andi	r2,r18,32
81122b84:	103ebb1e 	bne	r2,zero,81122674 <__reset+0xfb102674>
81122b88:	9080040c 	andi	r2,r18,16
81122b8c:	10013b26 	beq	r2,zero,8112307c <___svfiprintf_internal_r+0xe40>
81122b90:	dac02317 	ldw	r11,140(sp)
81122b94:	d8001d85 	stb	zero,118(sp)
81122b98:	0013883a 	mov	r9,zero
81122b9c:	58800104 	addi	r2,r11,4
81122ba0:	5f000017 	ldw	fp,0(r11)
81122ba4:	80013d16 	blt	r16,zero,8112309c <___svfiprintf_internal_r+0xe60>
81122ba8:	00ffdfc4 	movi	r3,-129
81122bac:	d8802315 	stw	r2,140(sp)
81122bb0:	90e4703a 	and	r18,r18,r3
81122bb4:	0015883a 	mov	r10,zero
81122bb8:	e03eba26 	beq	fp,zero,811226a4 <__reset+0xfb1026a4>
81122bbc:	00800244 	movi	r2,9
81122bc0:	173f7236 	bltu	r2,fp,8112298c <__reset+0xfb10298c>
81122bc4:	dac02b17 	ldw	r11,172(sp)
81122bc8:	e7000c04 	addi	fp,fp,48
81122bcc:	df0019c5 	stb	fp,103(sp)
81122bd0:	dac02115 	stw	r11,132(sp)
81122bd4:	dc4019c4 	addi	r17,sp,103
81122bd8:	003eb606 	br	811226b4 <__reset+0xfb1026b4>
81122bdc:	21003fcc 	andi	r4,r4,255
81122be0:	20021f1e 	bne	r4,zero,81123460 <___svfiprintf_internal_r+0x1224>
81122be4:	94800414 	ori	r18,r18,16
81122be8:	9080080c 	andi	r2,r18,32
81122bec:	103ec51e 	bne	r2,zero,81122704 <__reset+0xfb102704>
81122bf0:	9080040c 	andi	r2,r18,16
81122bf4:	10016926 	beq	r2,zero,8112319c <___svfiprintf_internal_r+0xf60>
81122bf8:	dac02317 	ldw	r11,140(sp)
81122bfc:	d8001d85 	stb	zero,118(sp)
81122c00:	0013883a 	mov	r9,zero
81122c04:	58800104 	addi	r2,r11,4
81122c08:	5f000017 	ldw	fp,0(r11)
81122c0c:	80016b16 	blt	r16,zero,811231bc <___svfiprintf_internal_r+0xf80>
81122c10:	00ffdfc4 	movi	r3,-129
81122c14:	d8802315 	stw	r2,140(sp)
81122c18:	90e4703a 	and	r18,r18,r3
81122c1c:	e03ec41e 	bne	fp,zero,81122730 <__reset+0xfb102730>
81122c20:	0015883a 	mov	r10,zero
81122c24:	8001c226 	beq	r16,zero,81123330 <___svfiprintf_internal_r+0x10f4>
81122c28:	0039883a 	mov	fp,zero
81122c2c:	0013883a 	mov	r9,zero
81122c30:	003ec006 	br	81122734 <__reset+0xfb102734>
81122c34:	d8c01c17 	ldw	r3,112(sp)
81122c38:	d8801b17 	ldw	r2,108(sp)
81122c3c:	d9001d87 	ldb	r4,118(sp)
81122c40:	20000b26 	beq	r4,zero,81122c70 <___svfiprintf_internal_r+0xa34>
81122c44:	d9001d84 	addi	r4,sp,118
81122c48:	18c00044 	addi	r3,r3,1
81122c4c:	10800044 	addi	r2,r2,1
81122c50:	41000015 	stw	r4,0(r8)
81122c54:	01000044 	movi	r4,1
81122c58:	41000115 	stw	r4,4(r8)
81122c5c:	d8c01c15 	stw	r3,112(sp)
81122c60:	d8801b15 	stw	r2,108(sp)
81122c64:	010001c4 	movi	r4,7
81122c68:	2080e116 	blt	r4,r2,81122ff0 <___svfiprintf_internal_r+0xdb4>
81122c6c:	42000204 	addi	r8,r8,8
81122c70:	dac02217 	ldw	r11,136(sp)
81122c74:	58000b26 	beq	r11,zero,81122ca4 <___svfiprintf_internal_r+0xa68>
81122c78:	d9001d04 	addi	r4,sp,116
81122c7c:	18c00084 	addi	r3,r3,2
81122c80:	10800044 	addi	r2,r2,1
81122c84:	41000015 	stw	r4,0(r8)
81122c88:	01000084 	movi	r4,2
81122c8c:	41000115 	stw	r4,4(r8)
81122c90:	d8c01c15 	stw	r3,112(sp)
81122c94:	d8801b15 	stw	r2,108(sp)
81122c98:	010001c4 	movi	r4,7
81122c9c:	2080dd16 	blt	r4,r2,81123014 <___svfiprintf_internal_r+0xdd8>
81122ca0:	42000204 	addi	r8,r8,8
81122ca4:	dac02617 	ldw	r11,152(sp)
81122ca8:	01002004 	movi	r4,128
81122cac:	59008426 	beq	r11,r4,81122ec0 <___svfiprintf_internal_r+0xc84>
81122cb0:	dac02117 	ldw	r11,132(sp)
81122cb4:	82e1c83a 	sub	r16,r16,r11
81122cb8:	0400270e 	bge	zero,r16,81122d58 <___svfiprintf_internal_r+0xb1c>
81122cbc:	01c00404 	movi	r7,16
81122cc0:	3c016a0e 	bge	r7,r16,8112326c <___svfiprintf_internal_r+0x1030>
81122cc4:	01604534 	movhi	r5,33044
81122cc8:	29481104 	addi	r5,r5,8260
81122ccc:	d9402215 	stw	r5,136(sp)
81122cd0:	070001c4 	movi	fp,7
81122cd4:	00000306 	br	81122ce4 <___svfiprintf_internal_r+0xaa8>
81122cd8:	843ffc04 	addi	r16,r16,-16
81122cdc:	42000204 	addi	r8,r8,8
81122ce0:	3c00130e 	bge	r7,r16,81122d30 <___svfiprintf_internal_r+0xaf4>
81122ce4:	18c00404 	addi	r3,r3,16
81122ce8:	10800044 	addi	r2,r2,1
81122cec:	45000015 	stw	r20,0(r8)
81122cf0:	41c00115 	stw	r7,4(r8)
81122cf4:	d8c01c15 	stw	r3,112(sp)
81122cf8:	d8801b15 	stw	r2,108(sp)
81122cfc:	e0bff60e 	bge	fp,r2,81122cd8 <__reset+0xfb102cd8>
81122d00:	d9801a04 	addi	r6,sp,104
81122d04:	b80b883a 	mov	r5,r23
81122d08:	a809883a 	mov	r4,r21
81122d0c:	d9c02c15 	stw	r7,176(sp)
81122d10:	11220640 	call	81122064 <__ssprint_r>
81122d14:	d9c02c17 	ldw	r7,176(sp)
81122d18:	1000581e 	bne	r2,zero,81122e7c <___svfiprintf_internal_r+0xc40>
81122d1c:	843ffc04 	addi	r16,r16,-16
81122d20:	d8c01c17 	ldw	r3,112(sp)
81122d24:	d8801b17 	ldw	r2,108(sp)
81122d28:	d811883a 	mov	r8,sp
81122d2c:	3c3fed16 	blt	r7,r16,81122ce4 <__reset+0xfb102ce4>
81122d30:	dac02217 	ldw	r11,136(sp)
81122d34:	1c07883a 	add	r3,r3,r16
81122d38:	10800044 	addi	r2,r2,1
81122d3c:	42c00015 	stw	r11,0(r8)
81122d40:	44000115 	stw	r16,4(r8)
81122d44:	d8c01c15 	stw	r3,112(sp)
81122d48:	d8801b15 	stw	r2,108(sp)
81122d4c:	010001c4 	movi	r4,7
81122d50:	20809e16 	blt	r4,r2,81122fcc <___svfiprintf_internal_r+0xd90>
81122d54:	42000204 	addi	r8,r8,8
81122d58:	dac02117 	ldw	r11,132(sp)
81122d5c:	10800044 	addi	r2,r2,1
81122d60:	44400015 	stw	r17,0(r8)
81122d64:	58c7883a 	add	r3,r11,r3
81122d68:	42c00115 	stw	r11,4(r8)
81122d6c:	d8c01c15 	stw	r3,112(sp)
81122d70:	d8801b15 	stw	r2,108(sp)
81122d74:	010001c4 	movi	r4,7
81122d78:	20807f16 	blt	r4,r2,81122f78 <___svfiprintf_internal_r+0xd3c>
81122d7c:	42000204 	addi	r8,r8,8
81122d80:	9480010c 	andi	r18,r18,4
81122d84:	90002926 	beq	r18,zero,81122e2c <___svfiprintf_internal_r+0xbf0>
81122d88:	dac02417 	ldw	r11,144(sp)
81122d8c:	d8802017 	ldw	r2,128(sp)
81122d90:	58a1c83a 	sub	r16,r11,r2
81122d94:	0400250e 	bge	zero,r16,81122e2c <___svfiprintf_internal_r+0xbf0>
81122d98:	04400404 	movi	r17,16
81122d9c:	d8801b17 	ldw	r2,108(sp)
81122da0:	8c017c0e 	bge	r17,r16,81123394 <___svfiprintf_internal_r+0x1158>
81122da4:	01604534 	movhi	r5,33044
81122da8:	29481504 	addi	r5,r5,8276
81122dac:	d9402815 	stw	r5,160(sp)
81122db0:	048001c4 	movi	r18,7
81122db4:	00000306 	br	81122dc4 <___svfiprintf_internal_r+0xb88>
81122db8:	843ffc04 	addi	r16,r16,-16
81122dbc:	42000204 	addi	r8,r8,8
81122dc0:	8c00110e 	bge	r17,r16,81122e08 <___svfiprintf_internal_r+0xbcc>
81122dc4:	18c00404 	addi	r3,r3,16
81122dc8:	10800044 	addi	r2,r2,1
81122dcc:	45800015 	stw	r22,0(r8)
81122dd0:	44400115 	stw	r17,4(r8)
81122dd4:	d8c01c15 	stw	r3,112(sp)
81122dd8:	d8801b15 	stw	r2,108(sp)
81122ddc:	90bff60e 	bge	r18,r2,81122db8 <__reset+0xfb102db8>
81122de0:	d9801a04 	addi	r6,sp,104
81122de4:	b80b883a 	mov	r5,r23
81122de8:	a809883a 	mov	r4,r21
81122dec:	11220640 	call	81122064 <__ssprint_r>
81122df0:	1000221e 	bne	r2,zero,81122e7c <___svfiprintf_internal_r+0xc40>
81122df4:	843ffc04 	addi	r16,r16,-16
81122df8:	d8c01c17 	ldw	r3,112(sp)
81122dfc:	d8801b17 	ldw	r2,108(sp)
81122e00:	d811883a 	mov	r8,sp
81122e04:	8c3fef16 	blt	r17,r16,81122dc4 <__reset+0xfb102dc4>
81122e08:	dac02817 	ldw	r11,160(sp)
81122e0c:	1c07883a 	add	r3,r3,r16
81122e10:	10800044 	addi	r2,r2,1
81122e14:	42c00015 	stw	r11,0(r8)
81122e18:	44000115 	stw	r16,4(r8)
81122e1c:	d8c01c15 	stw	r3,112(sp)
81122e20:	d8801b15 	stw	r2,108(sp)
81122e24:	010001c4 	movi	r4,7
81122e28:	2080aa16 	blt	r4,r2,811230d4 <___svfiprintf_internal_r+0xe98>
81122e2c:	d8802417 	ldw	r2,144(sp)
81122e30:	dac02017 	ldw	r11,128(sp)
81122e34:	12c0010e 	bge	r2,r11,81122e3c <___svfiprintf_internal_r+0xc00>
81122e38:	5805883a 	mov	r2,r11
81122e3c:	dac02517 	ldw	r11,148(sp)
81122e40:	5897883a 	add	r11,r11,r2
81122e44:	dac02515 	stw	r11,148(sp)
81122e48:	1800531e 	bne	r3,zero,81122f98 <___svfiprintf_internal_r+0xd5c>
81122e4c:	98800007 	ldb	r2,0(r19)
81122e50:	d8001b15 	stw	zero,108(sp)
81122e54:	d811883a 	mov	r8,sp
81122e58:	103d231e 	bne	r2,zero,811222e8 <__reset+0xfb1022e8>
81122e5c:	9823883a 	mov	r17,r19
81122e60:	003d3906 	br	81122348 <__reset+0xfb102348>
81122e64:	d8801c17 	ldw	r2,112(sp)
81122e68:	10000426 	beq	r2,zero,81122e7c <___svfiprintf_internal_r+0xc40>
81122e6c:	d9402717 	ldw	r5,156(sp)
81122e70:	d9002a17 	ldw	r4,168(sp)
81122e74:	d9801a04 	addi	r6,sp,104
81122e78:	11220640 	call	81122064 <__ssprint_r>
81122e7c:	dac02717 	ldw	r11,156(sp)
81122e80:	d8802517 	ldw	r2,148(sp)
81122e84:	58c0030b 	ldhu	r3,12(r11)
81122e88:	18c0100c 	andi	r3,r3,64
81122e8c:	1801381e 	bne	r3,zero,81123370 <___svfiprintf_internal_r+0x1134>
81122e90:	dfc03717 	ldw	ra,220(sp)
81122e94:	df003617 	ldw	fp,216(sp)
81122e98:	ddc03517 	ldw	r23,212(sp)
81122e9c:	dd803417 	ldw	r22,208(sp)
81122ea0:	dd403317 	ldw	r21,204(sp)
81122ea4:	dd003217 	ldw	r20,200(sp)
81122ea8:	dcc03117 	ldw	r19,196(sp)
81122eac:	dc803017 	ldw	r18,192(sp)
81122eb0:	dc402f17 	ldw	r17,188(sp)
81122eb4:	dc002e17 	ldw	r16,184(sp)
81122eb8:	dec03804 	addi	sp,sp,224
81122ebc:	f800283a 	ret
81122ec0:	dac02417 	ldw	r11,144(sp)
81122ec4:	d9002017 	ldw	r4,128(sp)
81122ec8:	5939c83a 	sub	fp,r11,r4
81122ecc:	073f780e 	bge	zero,fp,81122cb0 <__reset+0xfb102cb0>
81122ed0:	02400404 	movi	r9,16
81122ed4:	4f01370e 	bge	r9,fp,811233b4 <___svfiprintf_internal_r+0x1178>
81122ed8:	02e04534 	movhi	r11,33044
81122edc:	5ac81104 	addi	r11,r11,8260
81122ee0:	dac02215 	stw	r11,136(sp)
81122ee4:	028001c4 	movi	r10,7
81122ee8:	00000306 	br	81122ef8 <___svfiprintf_internal_r+0xcbc>
81122eec:	e73ffc04 	addi	fp,fp,-16
81122ef0:	42000204 	addi	r8,r8,8
81122ef4:	4f00150e 	bge	r9,fp,81122f4c <___svfiprintf_internal_r+0xd10>
81122ef8:	18c00404 	addi	r3,r3,16
81122efc:	10800044 	addi	r2,r2,1
81122f00:	45000015 	stw	r20,0(r8)
81122f04:	42400115 	stw	r9,4(r8)
81122f08:	d8c01c15 	stw	r3,112(sp)
81122f0c:	d8801b15 	stw	r2,108(sp)
81122f10:	50bff60e 	bge	r10,r2,81122eec <__reset+0xfb102eec>
81122f14:	d9801a04 	addi	r6,sp,104
81122f18:	b80b883a 	mov	r5,r23
81122f1c:	a809883a 	mov	r4,r21
81122f20:	da402c15 	stw	r9,176(sp)
81122f24:	da802d15 	stw	r10,180(sp)
81122f28:	11220640 	call	81122064 <__ssprint_r>
81122f2c:	da402c17 	ldw	r9,176(sp)
81122f30:	da802d17 	ldw	r10,180(sp)
81122f34:	103fd11e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81122f38:	e73ffc04 	addi	fp,fp,-16
81122f3c:	d8c01c17 	ldw	r3,112(sp)
81122f40:	d8801b17 	ldw	r2,108(sp)
81122f44:	d811883a 	mov	r8,sp
81122f48:	4f3feb16 	blt	r9,fp,81122ef8 <__reset+0xfb102ef8>
81122f4c:	dac02217 	ldw	r11,136(sp)
81122f50:	1f07883a 	add	r3,r3,fp
81122f54:	10800044 	addi	r2,r2,1
81122f58:	42c00015 	stw	r11,0(r8)
81122f5c:	47000115 	stw	fp,4(r8)
81122f60:	d8c01c15 	stw	r3,112(sp)
81122f64:	d8801b15 	stw	r2,108(sp)
81122f68:	010001c4 	movi	r4,7
81122f6c:	2080b616 	blt	r4,r2,81123248 <___svfiprintf_internal_r+0x100c>
81122f70:	42000204 	addi	r8,r8,8
81122f74:	003f4e06 	br	81122cb0 <__reset+0xfb102cb0>
81122f78:	d9801a04 	addi	r6,sp,104
81122f7c:	b80b883a 	mov	r5,r23
81122f80:	a809883a 	mov	r4,r21
81122f84:	11220640 	call	81122064 <__ssprint_r>
81122f88:	103fbc1e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81122f8c:	d8c01c17 	ldw	r3,112(sp)
81122f90:	d811883a 	mov	r8,sp
81122f94:	003f7a06 	br	81122d80 <__reset+0xfb102d80>
81122f98:	d9801a04 	addi	r6,sp,104
81122f9c:	b80b883a 	mov	r5,r23
81122fa0:	a809883a 	mov	r4,r21
81122fa4:	11220640 	call	81122064 <__ssprint_r>
81122fa8:	103fa826 	beq	r2,zero,81122e4c <__reset+0xfb102e4c>
81122fac:	003fb306 	br	81122e7c <__reset+0xfb102e7c>
81122fb0:	d9801a04 	addi	r6,sp,104
81122fb4:	b80b883a 	mov	r5,r23
81122fb8:	a809883a 	mov	r4,r21
81122fbc:	11220640 	call	81122064 <__ssprint_r>
81122fc0:	103fae1e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81122fc4:	d811883a 	mov	r8,sp
81122fc8:	003cdc06 	br	8112233c <__reset+0xfb10233c>
81122fcc:	d9801a04 	addi	r6,sp,104
81122fd0:	b80b883a 	mov	r5,r23
81122fd4:	a809883a 	mov	r4,r21
81122fd8:	11220640 	call	81122064 <__ssprint_r>
81122fdc:	103fa71e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81122fe0:	d8c01c17 	ldw	r3,112(sp)
81122fe4:	d8801b17 	ldw	r2,108(sp)
81122fe8:	d811883a 	mov	r8,sp
81122fec:	003f5a06 	br	81122d58 <__reset+0xfb102d58>
81122ff0:	d9801a04 	addi	r6,sp,104
81122ff4:	b80b883a 	mov	r5,r23
81122ff8:	a809883a 	mov	r4,r21
81122ffc:	11220640 	call	81122064 <__ssprint_r>
81123000:	103f9e1e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81123004:	d8c01c17 	ldw	r3,112(sp)
81123008:	d8801b17 	ldw	r2,108(sp)
8112300c:	d811883a 	mov	r8,sp
81123010:	003f1706 	br	81122c70 <__reset+0xfb102c70>
81123014:	d9801a04 	addi	r6,sp,104
81123018:	b80b883a 	mov	r5,r23
8112301c:	a809883a 	mov	r4,r21
81123020:	11220640 	call	81122064 <__ssprint_r>
81123024:	103f951e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
81123028:	d8c01c17 	ldw	r3,112(sp)
8112302c:	d8801b17 	ldw	r2,108(sp)
81123030:	d811883a 	mov	r8,sp
81123034:	003f1b06 	br	81122ca4 <__reset+0xfb102ca4>
81123038:	d8001d85 	stb	zero,118(sp)
8112303c:	80007b16 	blt	r16,zero,8112322c <___svfiprintf_internal_r+0xff0>
81123040:	00ffdfc4 	movi	r3,-129
81123044:	e244b03a 	or	r2,fp,r9
81123048:	90e4703a 	and	r18,r18,r3
8112304c:	103d7026 	beq	r2,zero,81122610 <__reset+0xfb102610>
81123050:	0015883a 	mov	r10,zero
81123054:	003d7206 	br	81122620 <__reset+0xfb102620>
81123058:	d9801a04 	addi	r6,sp,104
8112305c:	b80b883a 	mov	r5,r23
81123060:	a809883a 	mov	r4,r21
81123064:	11220640 	call	81122064 <__ssprint_r>
81123068:	103f841e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
8112306c:	d8c01c17 	ldw	r3,112(sp)
81123070:	d8801b17 	ldw	r2,108(sp)
81123074:	d811883a 	mov	r8,sp
81123078:	003ef006 	br	81122c3c <__reset+0xfb102c3c>
8112307c:	9080100c 	andi	r2,r18,64
81123080:	d8001d85 	stb	zero,118(sp)
81123084:	dac02317 	ldw	r11,140(sp)
81123088:	10008126 	beq	r2,zero,81123290 <___svfiprintf_internal_r+0x1054>
8112308c:	58800104 	addi	r2,r11,4
81123090:	5f00000b 	ldhu	fp,0(r11)
81123094:	0013883a 	mov	r9,zero
81123098:	803ec30e 	bge	r16,zero,81122ba8 <__reset+0xfb102ba8>
8112309c:	d8802315 	stw	r2,140(sp)
811230a0:	0015883a 	mov	r10,zero
811230a4:	e244b03a 	or	r2,fp,r9
811230a8:	103e371e 	bne	r2,zero,81122988 <__reset+0xfb102988>
811230ac:	00800044 	movi	r2,1
811230b0:	10803fcc 	andi	r2,r2,255
811230b4:	00c00044 	movi	r3,1
811230b8:	10c06126 	beq	r2,r3,81123240 <___svfiprintf_internal_r+0x1004>
811230bc:	00c00084 	movi	r3,2
811230c0:	10fd5526 	beq	r2,r3,81122618 <__reset+0xfb102618>
811230c4:	003ed806 	br	81122c28 <__reset+0xfb102c28>
811230c8:	d8802315 	stw	r2,140(sp)
811230cc:	98c00007 	ldb	r3,0(r19)
811230d0:	003cab06 	br	81122380 <__reset+0xfb102380>
811230d4:	d9801a04 	addi	r6,sp,104
811230d8:	b80b883a 	mov	r5,r23
811230dc:	a809883a 	mov	r4,r21
811230e0:	11220640 	call	81122064 <__ssprint_r>
811230e4:	103f651e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
811230e8:	d8c01c17 	ldw	r3,112(sp)
811230ec:	003f4f06 	br	81122e2c <__reset+0xfb102e2c>
811230f0:	00a04534 	movhi	r2,33044
811230f4:	10878704 	addi	r2,r2,7708
811230f8:	d8802915 	stw	r2,164(sp)
811230fc:	003d4406 	br	81122610 <__reset+0xfb102610>
81123100:	dac02317 	ldw	r11,140(sp)
81123104:	58800017 	ldw	r2,0(r11)
81123108:	dac02517 	ldw	r11,148(sp)
8112310c:	5807d7fa 	srai	r3,r11,31
81123110:	dac02317 	ldw	r11,140(sp)
81123114:	10c00115 	stw	r3,4(r2)
81123118:	5ac00104 	addi	r11,r11,4
8112311c:	dac02315 	stw	r11,140(sp)
81123120:	dac02517 	ldw	r11,148(sp)
81123124:	12c00015 	stw	r11,0(r2)
81123128:	003c6d06 	br	811222e0 <__reset+0xfb1022e0>
8112312c:	9080100c 	andi	r2,r18,64
81123130:	dac02317 	ldw	r11,140(sp)
81123134:	103e5326 	beq	r2,zero,81122a84 <__reset+0xfb102a84>
81123138:	5f00000f 	ldh	fp,0(r11)
8112313c:	5ac00104 	addi	r11,r11,4
81123140:	dac02315 	stw	r11,140(sp)
81123144:	e013d7fa 	srai	r9,fp,31
81123148:	4805883a 	mov	r2,r9
8112314c:	003e0706 	br	8112296c <__reset+0xfb10296c>
81123150:	00800c04 	movi	r2,48
81123154:	d8801d05 	stb	r2,116(sp)
81123158:	d8c01d45 	stb	r3,117(sp)
8112315c:	d8001d85 	stb	zero,118(sp)
81123160:	90800094 	ori	r2,r18,2
81123164:	80008f16 	blt	r16,zero,811233a4 <___svfiprintf_internal_r+0x1168>
81123168:	00bfdfc4 	movi	r2,-129
8112316c:	90a4703a 	and	r18,r18,r2
81123170:	94800094 	ori	r18,r18,2
81123174:	0015883a 	mov	r10,zero
81123178:	003d2906 	br	81122620 <__reset+0xfb102620>
8112317c:	98c00007 	ldb	r3,0(r19)
81123180:	003c7f06 	br	81122380 <__reset+0xfb102380>
81123184:	dac02317 	ldw	r11,140(sp)
81123188:	0013883a 	mov	r9,zero
8112318c:	5f000017 	ldw	fp,0(r11)
81123190:	5ac00104 	addi	r11,r11,4
81123194:	dac02315 	stw	r11,140(sp)
81123198:	003d1506 	br	811225f0 <__reset+0xfb1025f0>
8112319c:	9080100c 	andi	r2,r18,64
811231a0:	d8001d85 	stb	zero,118(sp)
811231a4:	dac02317 	ldw	r11,140(sp)
811231a8:	10003426 	beq	r2,zero,8112327c <___svfiprintf_internal_r+0x1040>
811231ac:	58800104 	addi	r2,r11,4
811231b0:	5f00000b 	ldhu	fp,0(r11)
811231b4:	0013883a 	mov	r9,zero
811231b8:	803e950e 	bge	r16,zero,81122c10 <__reset+0xfb102c10>
811231bc:	e246b03a 	or	r3,fp,r9
811231c0:	d8802315 	stw	r2,140(sp)
811231c4:	183d5a1e 	bne	r3,zero,81122730 <__reset+0xfb102730>
811231c8:	0015883a 	mov	r10,zero
811231cc:	0005883a 	mov	r2,zero
811231d0:	003fb706 	br	811230b0 <__reset+0xfb1030b0>
811231d4:	98c00043 	ldbu	r3,1(r19)
811231d8:	94800814 	ori	r18,r18,32
811231dc:	9cc00044 	addi	r19,r19,1
811231e0:	18c03fcc 	andi	r3,r3,255
811231e4:	18c0201c 	xori	r3,r3,128
811231e8:	18ffe004 	addi	r3,r3,-128
811231ec:	003c6406 	br	81122380 <__reset+0xfb102380>
811231f0:	d8c02315 	stw	r3,140(sp)
811231f4:	0015883a 	mov	r10,zero
811231f8:	003faa06 	br	811230a4 <__reset+0xfb1030a4>
811231fc:	dac02317 	ldw	r11,140(sp)
81123200:	58800017 	ldw	r2,0(r11)
81123204:	5ac00104 	addi	r11,r11,4
81123208:	dac02315 	stw	r11,140(sp)
8112320c:	dac02517 	ldw	r11,148(sp)
81123210:	12c00015 	stw	r11,0(r2)
81123214:	003c3206 	br	811222e0 <__reset+0xfb1022e0>
81123218:	01204534 	movhi	r4,33044
8112321c:	21078704 	addi	r4,r4,7708
81123220:	d9002915 	stw	r4,164(sp)
81123224:	d8c02315 	stw	r3,140(sp)
81123228:	1025883a 	mov	r18,r2
8112322c:	e244b03a 	or	r2,fp,r9
81123230:	103f871e 	bne	r2,zero,81123050 <__reset+0xfb103050>
81123234:	0015883a 	mov	r10,zero
81123238:	00800084 	movi	r2,2
8112323c:	003f9c06 	br	811230b0 <__reset+0xfb1030b0>
81123240:	0039883a 	mov	fp,zero
81123244:	003e5f06 	br	81122bc4 <__reset+0xfb102bc4>
81123248:	d9801a04 	addi	r6,sp,104
8112324c:	b80b883a 	mov	r5,r23
81123250:	a809883a 	mov	r4,r21
81123254:	11220640 	call	81122064 <__ssprint_r>
81123258:	103f081e 	bne	r2,zero,81122e7c <__reset+0xfb102e7c>
8112325c:	d8c01c17 	ldw	r3,112(sp)
81123260:	d8801b17 	ldw	r2,108(sp)
81123264:	d811883a 	mov	r8,sp
81123268:	003e9106 	br	81122cb0 <__reset+0xfb102cb0>
8112326c:	01204534 	movhi	r4,33044
81123270:	21081104 	addi	r4,r4,8260
81123274:	d9002215 	stw	r4,136(sp)
81123278:	003ead06 	br	81122d30 <__reset+0xfb102d30>
8112327c:	58800104 	addi	r2,r11,4
81123280:	5f000017 	ldw	fp,0(r11)
81123284:	0013883a 	mov	r9,zero
81123288:	803e610e 	bge	r16,zero,81122c10 <__reset+0xfb102c10>
8112328c:	003fcb06 	br	811231bc <__reset+0xfb1031bc>
81123290:	58800104 	addi	r2,r11,4
81123294:	5f000017 	ldw	fp,0(r11)
81123298:	0013883a 	mov	r9,zero
8112329c:	803e420e 	bge	r16,zero,81122ba8 <__reset+0xfb102ba8>
811232a0:	003f7e06 	br	8112309c <__reset+0xfb10309c>
811232a4:	5f000017 	ldw	fp,0(r11)
811232a8:	5ac00104 	addi	r11,r11,4
811232ac:	0013883a 	mov	r9,zero
811232b0:	dac02315 	stw	r11,140(sp)
811232b4:	003cce06 	br	811225f0 <__reset+0xfb1025f0>
811232b8:	8809883a 	mov	r4,r17
811232bc:	da002c15 	stw	r8,176(sp)
811232c0:	111510c0 	call	8111510c <strlen>
811232c4:	d8802115 	stw	r2,132(sp)
811232c8:	da801d83 	ldbu	r10,118(sp)
811232cc:	df002315 	stw	fp,140(sp)
811232d0:	0021883a 	mov	r16,zero
811232d4:	da002c17 	ldw	r8,176(sp)
811232d8:	003cf606 	br	811226b4 <__reset+0xfb1026b4>
811232dc:	00800184 	movi	r2,6
811232e0:	1400012e 	bgeu	r2,r16,811232e8 <___svfiprintf_internal_r+0x10ac>
811232e4:	1021883a 	mov	r16,r2
811232e8:	dc002115 	stw	r16,132(sp)
811232ec:	8005883a 	mov	r2,r16
811232f0:	80003c16 	blt	r16,zero,811233e4 <___svfiprintf_internal_r+0x11a8>
811232f4:	04604534 	movhi	r17,33044
811232f8:	d8802015 	stw	r2,128(sp)
811232fc:	df002315 	stw	fp,140(sp)
81123300:	8c478c04 	addi	r17,r17,7728
81123304:	003d2e06 	br	811227c0 <__reset+0xfb1027c0>
81123308:	04001004 	movi	r16,64
8112330c:	800b883a 	mov	r5,r16
81123310:	1113de40 	call	81113de4 <_malloc_r>
81123314:	dac02717 	ldw	r11,156(sp)
81123318:	58800015 	stw	r2,0(r11)
8112331c:	58800415 	stw	r2,16(r11)
81123320:	10004826 	beq	r2,zero,81123444 <___svfiprintf_internal_r+0x1208>
81123324:	dac02717 	ldw	r11,156(sp)
81123328:	5c000515 	stw	r16,20(r11)
8112332c:	003bd906 	br	81122294 <__reset+0xfb102294>
81123330:	9080004c 	andi	r2,r18,1
81123334:	0015883a 	mov	r10,zero
81123338:	10000626 	beq	r2,zero,81123354 <___svfiprintf_internal_r+0x1118>
8112333c:	dac02b17 	ldw	r11,172(sp)
81123340:	00800c04 	movi	r2,48
81123344:	d88019c5 	stb	r2,103(sp)
81123348:	dac02115 	stw	r11,132(sp)
8112334c:	dc4019c4 	addi	r17,sp,103
81123350:	003cd806 	br	811226b4 <__reset+0xfb1026b4>
81123354:	d8002115 	stw	zero,132(sp)
81123358:	dc401a04 	addi	r17,sp,104
8112335c:	003cd506 	br	811226b4 <__reset+0xfb1026b4>
81123360:	01204534 	movhi	r4,33044
81123364:	21081504 	addi	r4,r4,8276
81123368:	d9002815 	stw	r4,160(sp)
8112336c:	003d4306 	br	8112287c <__reset+0xfb10287c>
81123370:	00bfffc4 	movi	r2,-1
81123374:	003ec606 	br	81122e90 <__reset+0xfb102e90>
81123378:	00800044 	movi	r2,1
8112337c:	10803fcc 	andi	r2,r2,255
81123380:	00c00044 	movi	r3,1
81123384:	10fd8026 	beq	r2,r3,81122988 <__reset+0xfb102988>
81123388:	00c00084 	movi	r3,2
8112338c:	10fca426 	beq	r2,r3,81122620 <__reset+0xfb102620>
81123390:	003ce806 	br	81122734 <__reset+0xfb102734>
81123394:	01204534 	movhi	r4,33044
81123398:	21081504 	addi	r4,r4,8276
8112339c:	d9002815 	stw	r4,160(sp)
811233a0:	003e9906 	br	81122e08 <__reset+0xfb102e08>
811233a4:	1025883a 	mov	r18,r2
811233a8:	0015883a 	mov	r10,zero
811233ac:	00800084 	movi	r2,2
811233b0:	003ff206 	br	8112337c <__reset+0xfb10337c>
811233b4:	01604534 	movhi	r5,33044
811233b8:	29481104 	addi	r5,r5,8260
811233bc:	d9402215 	stw	r5,136(sp)
811233c0:	003ee206 	br	81122f4c <__reset+0xfb102f4c>
811233c4:	5827883a 	mov	r19,r11
811233c8:	0021883a 	mov	r16,zero
811233cc:	003bed06 	br	81122384 <__reset+0xfb102384>
811233d0:	dc002115 	stw	r16,132(sp)
811233d4:	da801d83 	ldbu	r10,118(sp)
811233d8:	df002315 	stw	fp,140(sp)
811233dc:	0021883a 	mov	r16,zero
811233e0:	003cb406 	br	811226b4 <__reset+0xfb1026b4>
811233e4:	0005883a 	mov	r2,zero
811233e8:	003fc206 	br	811232f4 <__reset+0xfb1032f4>
811233ec:	d8802317 	ldw	r2,140(sp)
811233f0:	98c00043 	ldbu	r3,1(r19)
811233f4:	5827883a 	mov	r19,r11
811233f8:	14000017 	ldw	r16,0(r2)
811233fc:	10800104 	addi	r2,r2,4
81123400:	d8802315 	stw	r2,140(sp)
81123404:	803f760e 	bge	r16,zero,811231e0 <__reset+0xfb1031e0>
81123408:	18c03fcc 	andi	r3,r3,255
8112340c:	18c0201c 	xori	r3,r3,128
81123410:	043fffc4 	movi	r16,-1
81123414:	18ffe004 	addi	r3,r3,-128
81123418:	003bd906 	br	81122380 <__reset+0xfb102380>
8112341c:	d9c01d85 	stb	r7,118(sp)
81123420:	003cb606 	br	811226fc <__reset+0xfb1026fc>
81123424:	d9c01d85 	stb	r7,118(sp)
81123428:	003d2106 	br	811228b0 <__reset+0xfb1028b0>
8112342c:	d9c01d85 	stb	r7,118(sp)
81123430:	003d8e06 	br	81122a6c <__reset+0xfb102a6c>
81123434:	d9c01d85 	stb	r7,118(sp)
81123438:	003db306 	br	81122b08 <__reset+0xfb102b08>
8112343c:	d9c01d85 	stb	r7,118(sp)
81123440:	003c8a06 	br	8112266c <__reset+0xfb10266c>
81123444:	dac02a17 	ldw	r11,168(sp)
81123448:	00800304 	movi	r2,12
8112344c:	58800015 	stw	r2,0(r11)
81123450:	00bfffc4 	movi	r2,-1
81123454:	003e8e06 	br	81122e90 <__reset+0xfb102e90>
81123458:	d9c01d85 	stb	r7,118(sp)
8112345c:	003dc706 	br	81122b7c <__reset+0xfb102b7c>
81123460:	d9c01d85 	stb	r7,118(sp)
81123464:	003ddf06 	br	81122be4 <__reset+0xfb102be4>
81123468:	d9c01d85 	stb	r7,118(sp)
8112346c:	003d3706 	br	8112294c <__reset+0xfb10294c>
81123470:	d9c01d85 	stb	r7,118(sp)
81123474:	003c5406 	br	811225c8 <__reset+0xfb1025c8>
81123478:	d9c01d85 	stb	r7,118(sp)
8112347c:	003d1d06 	br	811228f4 <__reset+0xfb1028f4>

81123480 <__submore>:
81123480:	defffa04 	addi	sp,sp,-24
81123484:	de00012e 	bgeu	sp,et,8112348c <__submore+0xc>
81123488:	003b68fa 	trap	3
8112348c:	dc000015 	stw	r16,0(sp)
81123490:	2821883a 	mov	r16,r5
81123494:	29400c17 	ldw	r5,48(r5)
81123498:	dfc00515 	stw	ra,20(sp)
8112349c:	dd000415 	stw	r20,16(sp)
811234a0:	dcc00315 	stw	r19,12(sp)
811234a4:	dc800215 	stw	r18,8(sp)
811234a8:	dc400115 	stw	r17,4(sp)
811234ac:	80801004 	addi	r2,r16,64
811234b0:	28801726 	beq	r5,r2,81123510 <__submore+0x90>
811234b4:	84400d17 	ldw	r17,52(r16)
811234b8:	8c67883a 	add	r19,r17,r17
811234bc:	980d883a 	mov	r6,r19
811234c0:	111f90c0 	call	8111f90c <_realloc_r>
811234c4:	1025883a 	mov	r18,r2
811234c8:	10002226 	beq	r2,zero,81123554 <__submore+0xd4>
811234cc:	1469883a 	add	r20,r2,r17
811234d0:	880d883a 	mov	r6,r17
811234d4:	100b883a 	mov	r5,r2
811234d8:	a009883a 	mov	r4,r20
811234dc:	11145f80 	call	811145f8 <memcpy>
811234e0:	0005883a 	mov	r2,zero
811234e4:	85000015 	stw	r20,0(r16)
811234e8:	84800c15 	stw	r18,48(r16)
811234ec:	84c00d15 	stw	r19,52(r16)
811234f0:	dfc00517 	ldw	ra,20(sp)
811234f4:	dd000417 	ldw	r20,16(sp)
811234f8:	dcc00317 	ldw	r19,12(sp)
811234fc:	dc800217 	ldw	r18,8(sp)
81123500:	dc400117 	ldw	r17,4(sp)
81123504:	dc000017 	ldw	r16,0(sp)
81123508:	dec00604 	addi	sp,sp,24
8112350c:	f800283a 	ret
81123510:	04410004 	movi	r17,1024
81123514:	880b883a 	mov	r5,r17
81123518:	1113de40 	call	81113de4 <_malloc_r>
8112351c:	1007883a 	mov	r3,r2
81123520:	10000c26 	beq	r2,zero,81123554 <__submore+0xd4>
81123524:	80801083 	ldbu	r2,66(r16)
81123528:	80c00c15 	stw	r3,48(r16)
8112352c:	84400d15 	stw	r17,52(r16)
81123530:	1880ffc5 	stb	r2,1023(r3)
81123534:	81401043 	ldbu	r5,65(r16)
81123538:	1900ff44 	addi	r4,r3,1021
8112353c:	0005883a 	mov	r2,zero
81123540:	1940ff85 	stb	r5,1022(r3)
81123544:	81401003 	ldbu	r5,64(r16)
81123548:	1940ff45 	stb	r5,1021(r3)
8112354c:	81000015 	stw	r4,0(r16)
81123550:	003fe706 	br	811234f0 <__reset+0xfb1034f0>
81123554:	00bfffc4 	movi	r2,-1
81123558:	003fe506 	br	811234f0 <__reset+0xfb1034f0>

8112355c <_ungetc_r>:
8112355c:	00bfffc4 	movi	r2,-1
81123560:	28806326 	beq	r5,r2,811236f0 <_ungetc_r+0x194>
81123564:	defffb04 	addi	sp,sp,-20
81123568:	de00012e 	bgeu	sp,et,81123570 <_ungetc_r+0x14>
8112356c:	003b68fa 	trap	3
81123570:	dcc00315 	stw	r19,12(sp)
81123574:	dc400115 	stw	r17,4(sp)
81123578:	dc000015 	stw	r16,0(sp)
8112357c:	dfc00415 	stw	ra,16(sp)
81123580:	dc800215 	stw	r18,8(sp)
81123584:	2023883a 	mov	r17,r4
81123588:	3021883a 	mov	r16,r6
8112358c:	2827883a 	mov	r19,r5
81123590:	20000226 	beq	r4,zero,8112359c <_ungetc_r+0x40>
81123594:	20800e17 	ldw	r2,56(r4)
81123598:	10002e26 	beq	r2,zero,81123654 <_ungetc_r+0xf8>
8112359c:	80c0030b 	ldhu	r3,12(r16)
811235a0:	1888000c 	andi	r2,r3,8192
811235a4:	1000051e 	bne	r2,zero,811235bc <_ungetc_r+0x60>
811235a8:	81001917 	ldw	r4,100(r16)
811235ac:	00b7ffc4 	movi	r2,-8193
811235b0:	18c80014 	ori	r3,r3,8192
811235b4:	2084703a 	and	r2,r4,r2
811235b8:	80801915 	stw	r2,100(r16)
811235bc:	00bff7c4 	movi	r2,-33
811235c0:	1884703a 	and	r2,r3,r2
811235c4:	8080030d 	sth	r2,12(r16)
811235c8:	1900010c 	andi	r4,r3,4
811235cc:	2000061e 	bne	r4,zero,811235e8 <_ungetc_r+0x8c>
811235d0:	1900040c 	andi	r4,r3,16
811235d4:	20001d26 	beq	r4,zero,8112364c <_ungetc_r+0xf0>
811235d8:	18c0020c 	andi	r3,r3,8
811235dc:	1800331e 	bne	r3,zero,811236ac <_ungetc_r+0x150>
811235e0:	10800114 	ori	r2,r2,4
811235e4:	8080030d 	sth	r2,12(r16)
811235e8:	80800c17 	ldw	r2,48(r16)
811235ec:	9c803fcc 	andi	r18,r19,255
811235f0:	10001a26 	beq	r2,zero,8112365c <_ungetc_r+0x100>
811235f4:	80c00117 	ldw	r3,4(r16)
811235f8:	80800d17 	ldw	r2,52(r16)
811235fc:	18800f0e 	bge	r3,r2,8112363c <_ungetc_r+0xe0>
81123600:	80c00017 	ldw	r3,0(r16)
81123604:	9005883a 	mov	r2,r18
81123608:	193fffc4 	addi	r4,r3,-1
8112360c:	81000015 	stw	r4,0(r16)
81123610:	1cffffc5 	stb	r19,-1(r3)
81123614:	80c00117 	ldw	r3,4(r16)
81123618:	18c00044 	addi	r3,r3,1
8112361c:	80c00115 	stw	r3,4(r16)
81123620:	dfc00417 	ldw	ra,16(sp)
81123624:	dcc00317 	ldw	r19,12(sp)
81123628:	dc800217 	ldw	r18,8(sp)
8112362c:	dc400117 	ldw	r17,4(sp)
81123630:	dc000017 	ldw	r16,0(sp)
81123634:	dec00504 	addi	sp,sp,20
81123638:	f800283a 	ret
8112363c:	800b883a 	mov	r5,r16
81123640:	8809883a 	mov	r4,r17
81123644:	11234800 	call	81123480 <__submore>
81123648:	103fed26 	beq	r2,zero,81123600 <__reset+0xfb103600>
8112364c:	00bfffc4 	movi	r2,-1
81123650:	003ff306 	br	81123620 <__reset+0xfb103620>
81123654:	111d3e00 	call	8111d3e0 <__sinit>
81123658:	003fd006 	br	8112359c <__reset+0xfb10359c>
8112365c:	80c00417 	ldw	r3,16(r16)
81123660:	80800017 	ldw	r2,0(r16)
81123664:	18000326 	beq	r3,zero,81123674 <_ungetc_r+0x118>
81123668:	1880022e 	bgeu	r3,r2,81123674 <_ungetc_r+0x118>
8112366c:	10ffffc3 	ldbu	r3,-1(r2)
81123670:	90c01826 	beq	r18,r3,811236d4 <_ungetc_r+0x178>
81123674:	81400117 	ldw	r5,4(r16)
81123678:	80800e15 	stw	r2,56(r16)
8112367c:	008000c4 	movi	r2,3
81123680:	81001004 	addi	r4,r16,64
81123684:	80c01084 	addi	r3,r16,66
81123688:	80800d15 	stw	r2,52(r16)
8112368c:	00800044 	movi	r2,1
81123690:	80800115 	stw	r2,4(r16)
81123694:	81400f15 	stw	r5,60(r16)
81123698:	81000c15 	stw	r4,48(r16)
8112369c:	84c01085 	stb	r19,66(r16)
811236a0:	80c00015 	stw	r3,0(r16)
811236a4:	9005883a 	mov	r2,r18
811236a8:	003fdd06 	br	81123620 <__reset+0xfb103620>
811236ac:	800b883a 	mov	r5,r16
811236b0:	8809883a 	mov	r4,r17
811236b4:	111cfe40 	call	8111cfe4 <_fflush_r>
811236b8:	103fe41e 	bne	r2,zero,8112364c <__reset+0xfb10364c>
811236bc:	8080030b 	ldhu	r2,12(r16)
811236c0:	00fffdc4 	movi	r3,-9
811236c4:	80000215 	stw	zero,8(r16)
811236c8:	1884703a 	and	r2,r3,r2
811236cc:	80000615 	stw	zero,24(r16)
811236d0:	003fc306 	br	811235e0 <__reset+0xfb1035e0>
811236d4:	80c00117 	ldw	r3,4(r16)
811236d8:	10bfffc4 	addi	r2,r2,-1
811236dc:	80800015 	stw	r2,0(r16)
811236e0:	18800044 	addi	r2,r3,1
811236e4:	80800115 	stw	r2,4(r16)
811236e8:	9005883a 	mov	r2,r18
811236ec:	003fcc06 	br	81123620 <__reset+0xfb103620>
811236f0:	00bfffc4 	movi	r2,-1
811236f4:	f800283a 	ret

811236f8 <ungetc>:
811236f8:	00a04534 	movhi	r2,33044
811236fc:	10916904 	addi	r2,r2,17828
81123700:	280d883a 	mov	r6,r5
81123704:	200b883a 	mov	r5,r4
81123708:	11000017 	ldw	r4,0(r2)
8112370c:	112355c1 	jmpi	8112355c <_ungetc_r>

81123710 <__sprint_r.part.0>:
81123710:	defff604 	addi	sp,sp,-40
81123714:	de00012e 	bgeu	sp,et,8112371c <__sprint_r.part.0+0xc>
81123718:	003b68fa 	trap	3
8112371c:	28801917 	ldw	r2,100(r5)
81123720:	dd400515 	stw	r21,20(sp)
81123724:	dfc00915 	stw	ra,36(sp)
81123728:	df000815 	stw	fp,32(sp)
8112372c:	ddc00715 	stw	r23,28(sp)
81123730:	dd800615 	stw	r22,24(sp)
81123734:	dd000415 	stw	r20,16(sp)
81123738:	dcc00315 	stw	r19,12(sp)
8112373c:	dc800215 	stw	r18,8(sp)
81123740:	dc400115 	stw	r17,4(sp)
81123744:	dc000015 	stw	r16,0(sp)
81123748:	1088000c 	andi	r2,r2,8192
8112374c:	302b883a 	mov	r21,r6
81123750:	10002e26 	beq	r2,zero,8112380c <__sprint_r.part.0+0xfc>
81123754:	30800217 	ldw	r2,8(r6)
81123758:	35800017 	ldw	r22,0(r6)
8112375c:	10002926 	beq	r2,zero,81123804 <__sprint_r.part.0+0xf4>
81123760:	2827883a 	mov	r19,r5
81123764:	2029883a 	mov	r20,r4
81123768:	b5c00104 	addi	r23,r22,4
8112376c:	04bfffc4 	movi	r18,-1
81123770:	bc400017 	ldw	r17,0(r23)
81123774:	b4000017 	ldw	r16,0(r22)
81123778:	0039883a 	mov	fp,zero
8112377c:	8822d0ba 	srli	r17,r17,2
81123780:	8800031e 	bne	r17,zero,81123790 <__sprint_r.part.0+0x80>
81123784:	00001806 	br	811237e8 <__sprint_r.part.0+0xd8>
81123788:	84000104 	addi	r16,r16,4
8112378c:	8f001526 	beq	r17,fp,811237e4 <__sprint_r.part.0+0xd4>
81123790:	81400017 	ldw	r5,0(r16)
81123794:	980d883a 	mov	r6,r19
81123798:	a009883a 	mov	r4,r20
8112379c:	11250b40 	call	811250b4 <_fputwc_r>
811237a0:	e7000044 	addi	fp,fp,1
811237a4:	14bff81e 	bne	r2,r18,81123788 <__reset+0xfb103788>
811237a8:	9005883a 	mov	r2,r18
811237ac:	a8000215 	stw	zero,8(r21)
811237b0:	a8000115 	stw	zero,4(r21)
811237b4:	dfc00917 	ldw	ra,36(sp)
811237b8:	df000817 	ldw	fp,32(sp)
811237bc:	ddc00717 	ldw	r23,28(sp)
811237c0:	dd800617 	ldw	r22,24(sp)
811237c4:	dd400517 	ldw	r21,20(sp)
811237c8:	dd000417 	ldw	r20,16(sp)
811237cc:	dcc00317 	ldw	r19,12(sp)
811237d0:	dc800217 	ldw	r18,8(sp)
811237d4:	dc400117 	ldw	r17,4(sp)
811237d8:	dc000017 	ldw	r16,0(sp)
811237dc:	dec00a04 	addi	sp,sp,40
811237e0:	f800283a 	ret
811237e4:	a8800217 	ldw	r2,8(r21)
811237e8:	8c63883a 	add	r17,r17,r17
811237ec:	8c63883a 	add	r17,r17,r17
811237f0:	1445c83a 	sub	r2,r2,r17
811237f4:	a8800215 	stw	r2,8(r21)
811237f8:	b5800204 	addi	r22,r22,8
811237fc:	bdc00204 	addi	r23,r23,8
81123800:	103fdb1e 	bne	r2,zero,81123770 <__reset+0xfb103770>
81123804:	0005883a 	mov	r2,zero
81123808:	003fe806 	br	811237ac <__reset+0xfb1037ac>
8112380c:	111db900 	call	8111db90 <__sfvwrite_r>
81123810:	003fe606 	br	811237ac <__reset+0xfb1037ac>

81123814 <__sprint_r>:
81123814:	30c00217 	ldw	r3,8(r6)
81123818:	18000126 	beq	r3,zero,81123820 <__sprint_r+0xc>
8112381c:	11237101 	jmpi	81123710 <__sprint_r.part.0>
81123820:	30000115 	stw	zero,4(r6)
81123824:	0005883a 	mov	r2,zero
81123828:	f800283a 	ret

8112382c <___vfiprintf_internal_r>:
8112382c:	deffc904 	addi	sp,sp,-220
81123830:	de00012e 	bgeu	sp,et,81123838 <___vfiprintf_internal_r+0xc>
81123834:	003b68fa 	trap	3
81123838:	df003515 	stw	fp,212(sp)
8112383c:	dd003115 	stw	r20,196(sp)
81123840:	dfc03615 	stw	ra,216(sp)
81123844:	ddc03415 	stw	r23,208(sp)
81123848:	dd803315 	stw	r22,204(sp)
8112384c:	dd403215 	stw	r21,200(sp)
81123850:	dcc03015 	stw	r19,192(sp)
81123854:	dc802f15 	stw	r18,188(sp)
81123858:	dc402e15 	stw	r17,184(sp)
8112385c:	dc002d15 	stw	r16,180(sp)
81123860:	d9002015 	stw	r4,128(sp)
81123864:	d9c02215 	stw	r7,136(sp)
81123868:	2829883a 	mov	r20,r5
8112386c:	3039883a 	mov	fp,r6
81123870:	20000226 	beq	r4,zero,8112387c <___vfiprintf_internal_r+0x50>
81123874:	20800e17 	ldw	r2,56(r4)
81123878:	1000cf26 	beq	r2,zero,81123bb8 <___vfiprintf_internal_r+0x38c>
8112387c:	a080030b 	ldhu	r2,12(r20)
81123880:	10c8000c 	andi	r3,r2,8192
81123884:	1800061e 	bne	r3,zero,811238a0 <___vfiprintf_internal_r+0x74>
81123888:	a1001917 	ldw	r4,100(r20)
8112388c:	00f7ffc4 	movi	r3,-8193
81123890:	10880014 	ori	r2,r2,8192
81123894:	20c6703a 	and	r3,r4,r3
81123898:	a080030d 	sth	r2,12(r20)
8112389c:	a0c01915 	stw	r3,100(r20)
811238a0:	10c0020c 	andi	r3,r2,8
811238a4:	1800a926 	beq	r3,zero,81123b4c <___vfiprintf_internal_r+0x320>
811238a8:	a0c00417 	ldw	r3,16(r20)
811238ac:	1800a726 	beq	r3,zero,81123b4c <___vfiprintf_internal_r+0x320>
811238b0:	1080068c 	andi	r2,r2,26
811238b4:	00c00284 	movi	r3,10
811238b8:	10c0ac26 	beq	r2,r3,81123b6c <___vfiprintf_internal_r+0x340>
811238bc:	da801a04 	addi	r10,sp,104
811238c0:	da801e15 	stw	r10,120(sp)
811238c4:	d8801e17 	ldw	r2,120(sp)
811238c8:	da8019c4 	addi	r10,sp,103
811238cc:	05a04534 	movhi	r22,33044
811238d0:	05e04534 	movhi	r23,33044
811238d4:	da801f15 	stw	r10,124(sp)
811238d8:	1295c83a 	sub	r10,r2,r10
811238dc:	b5881d04 	addi	r22,r22,8308
811238e0:	bdc81904 	addi	r23,r23,8292
811238e4:	dec01a15 	stw	sp,104(sp)
811238e8:	d8001c15 	stw	zero,112(sp)
811238ec:	d8001b15 	stw	zero,108(sp)
811238f0:	d8002615 	stw	zero,152(sp)
811238f4:	d8002315 	stw	zero,140(sp)
811238f8:	da802715 	stw	r10,156(sp)
811238fc:	d811883a 	mov	r8,sp
81123900:	dd002115 	stw	r20,132(sp)
81123904:	e021883a 	mov	r16,fp
81123908:	80800007 	ldb	r2,0(r16)
8112390c:	1003ea26 	beq	r2,zero,811248b8 <___vfiprintf_internal_r+0x108c>
81123910:	00c00944 	movi	r3,37
81123914:	8025883a 	mov	r18,r16
81123918:	10c0021e 	bne	r2,r3,81123924 <___vfiprintf_internal_r+0xf8>
8112391c:	00001606 	br	81123978 <___vfiprintf_internal_r+0x14c>
81123920:	10c00326 	beq	r2,r3,81123930 <___vfiprintf_internal_r+0x104>
81123924:	94800044 	addi	r18,r18,1
81123928:	90800007 	ldb	r2,0(r18)
8112392c:	103ffc1e 	bne	r2,zero,81123920 <__reset+0xfb103920>
81123930:	9423c83a 	sub	r17,r18,r16
81123934:	88001026 	beq	r17,zero,81123978 <___vfiprintf_internal_r+0x14c>
81123938:	d8c01c17 	ldw	r3,112(sp)
8112393c:	d8801b17 	ldw	r2,108(sp)
81123940:	44000015 	stw	r16,0(r8)
81123944:	88c7883a 	add	r3,r17,r3
81123948:	10800044 	addi	r2,r2,1
8112394c:	44400115 	stw	r17,4(r8)
81123950:	d8c01c15 	stw	r3,112(sp)
81123954:	d8801b15 	stw	r2,108(sp)
81123958:	010001c4 	movi	r4,7
8112395c:	2080760e 	bge	r4,r2,81123b38 <___vfiprintf_internal_r+0x30c>
81123960:	1803821e 	bne	r3,zero,8112476c <___vfiprintf_internal_r+0xf40>
81123964:	da802317 	ldw	r10,140(sp)
81123968:	d8001b15 	stw	zero,108(sp)
8112396c:	d811883a 	mov	r8,sp
81123970:	5455883a 	add	r10,r10,r17
81123974:	da802315 	stw	r10,140(sp)
81123978:	90800007 	ldb	r2,0(r18)
8112397c:	10044626 	beq	r2,zero,81124a98 <___vfiprintf_internal_r+0x126c>
81123980:	90c00047 	ldb	r3,1(r18)
81123984:	94000044 	addi	r16,r18,1
81123988:	d8001d85 	stb	zero,118(sp)
8112398c:	0009883a 	mov	r4,zero
81123990:	000f883a 	mov	r7,zero
81123994:	027fffc4 	movi	r9,-1
81123998:	0023883a 	mov	r17,zero
8112399c:	0029883a 	mov	r20,zero
811239a0:	01401604 	movi	r5,88
811239a4:	01800244 	movi	r6,9
811239a8:	03400a84 	movi	r13,42
811239ac:	03001b04 	movi	r12,108
811239b0:	84000044 	addi	r16,r16,1
811239b4:	18bff804 	addi	r2,r3,-32
811239b8:	28827336 	bltu	r5,r2,81124388 <___vfiprintf_internal_r+0xb5c>
811239bc:	100490ba 	slli	r2,r2,2
811239c0:	02a044b4 	movhi	r10,33042
811239c4:	528e7504 	addi	r10,r10,14804
811239c8:	1285883a 	add	r2,r2,r10
811239cc:	10800017 	ldw	r2,0(r2)
811239d0:	1000683a 	jmp	r2
811239d4:	811240bc 	xorhi	r4,r16,18690
811239d8:	81124388 	cmpgei	r4,r16,18702
811239dc:	81124388 	cmpgei	r4,r16,18702
811239e0:	811240dc 	xori	r4,r16,18691
811239e4:	81124388 	cmpgei	r4,r16,18702
811239e8:	81124388 	cmpgei	r4,r16,18702
811239ec:	81124388 	cmpgei	r4,r16,18702
811239f0:	81124388 	cmpgei	r4,r16,18702
811239f4:	81124388 	cmpgei	r4,r16,18702
811239f8:	81124388 	cmpgei	r4,r16,18702
811239fc:	811242c4 	addi	r4,r16,18699
81123a00:	811242e0 	cmpeqi	r4,r16,18699
81123a04:	81124388 	cmpgei	r4,r16,18702
81123a08:	81123bc8 	cmpgei	r4,r16,18671
81123a0c:	811242f0 	cmpltui	r4,r16,18699
81123a10:	81124388 	cmpgei	r4,r16,18702
81123a14:	811240e8 	cmpgeui	r4,r16,18691
81123a18:	811240f4 	orhi	r4,r16,18691
81123a1c:	811240f4 	orhi	r4,r16,18691
81123a20:	811240f4 	orhi	r4,r16,18691
81123a24:	811240f4 	orhi	r4,r16,18691
81123a28:	811240f4 	orhi	r4,r16,18691
81123a2c:	811240f4 	orhi	r4,r16,18691
81123a30:	811240f4 	orhi	r4,r16,18691
81123a34:	811240f4 	orhi	r4,r16,18691
81123a38:	811240f4 	orhi	r4,r16,18691
81123a3c:	81124388 	cmpgei	r4,r16,18702
81123a40:	81124388 	cmpgei	r4,r16,18702
81123a44:	81124388 	cmpgei	r4,r16,18702
81123a48:	81124388 	cmpgei	r4,r16,18702
81123a4c:	81124388 	cmpgei	r4,r16,18702
81123a50:	81124388 	cmpgei	r4,r16,18702
81123a54:	81124388 	cmpgei	r4,r16,18702
81123a58:	81124388 	cmpgei	r4,r16,18702
81123a5c:	81124388 	cmpgei	r4,r16,18702
81123a60:	81124388 	cmpgei	r4,r16,18702
81123a64:	81124120 	cmpeqi	r4,r16,18692
81123a68:	81124388 	cmpgei	r4,r16,18702
81123a6c:	81124388 	cmpgei	r4,r16,18702
81123a70:	81124388 	cmpgei	r4,r16,18702
81123a74:	81124388 	cmpgei	r4,r16,18702
81123a78:	81124388 	cmpgei	r4,r16,18702
81123a7c:	81124388 	cmpgei	r4,r16,18702
81123a80:	81124388 	cmpgei	r4,r16,18702
81123a84:	81124388 	cmpgei	r4,r16,18702
81123a88:	81124388 	cmpgei	r4,r16,18702
81123a8c:	81124388 	cmpgei	r4,r16,18702
81123a90:	81124158 	cmpnei	r4,r16,18693
81123a94:	81124388 	cmpgei	r4,r16,18702
81123a98:	81124388 	cmpgei	r4,r16,18702
81123a9c:	81124388 	cmpgei	r4,r16,18702
81123aa0:	81124388 	cmpgei	r4,r16,18702
81123aa4:	81124388 	cmpgei	r4,r16,18702
81123aa8:	811241b0 	cmpltui	r4,r16,18694
81123aac:	81124388 	cmpgei	r4,r16,18702
81123ab0:	81124388 	cmpgei	r4,r16,18702
81123ab4:	81124220 	cmpeqi	r4,r16,18696
81123ab8:	81124388 	cmpgei	r4,r16,18702
81123abc:	81124388 	cmpgei	r4,r16,18702
81123ac0:	81124388 	cmpgei	r4,r16,18702
81123ac4:	81124388 	cmpgei	r4,r16,18702
81123ac8:	81124388 	cmpgei	r4,r16,18702
81123acc:	81124388 	cmpgei	r4,r16,18702
81123ad0:	81124388 	cmpgei	r4,r16,18702
81123ad4:	81124388 	cmpgei	r4,r16,18702
81123ad8:	81124388 	cmpgei	r4,r16,18702
81123adc:	81124388 	cmpgei	r4,r16,18702
81123ae0:	81123fcc 	andi	r4,r16,18687
81123ae4:	81123ff8 	rdprs	r4,r16,18687
81123ae8:	81124388 	cmpgei	r4,r16,18702
81123aec:	81124388 	cmpgei	r4,r16,18702
81123af0:	81124388 	cmpgei	r4,r16,18702
81123af4:	81124330 	cmpltui	r4,r16,18700
81123af8:	81123ff8 	rdprs	r4,r16,18687
81123afc:	81124388 	cmpgei	r4,r16,18702
81123b00:	81124388 	cmpgei	r4,r16,18702
81123b04:	81123e8c 	andi	r4,r16,18682
81123b08:	81124388 	cmpgei	r4,r16,18702
81123b0c:	81123e9c 	xori	r4,r16,18682
81123b10:	81123ed8 	cmpnei	r4,r16,18683
81123b14:	81123bd4 	ori	r4,r16,18671
81123b18:	81123e80 	call	881123e8 <__reset+0x20f23e8>
81123b1c:	81124388 	cmpgei	r4,r16,18702
81123b20:	8112425c 	xori	r4,r16,18697
81123b24:	81124388 	cmpgei	r4,r16,18702
81123b28:	811242b4 	orhi	r4,r16,18698
81123b2c:	81124388 	cmpgei	r4,r16,18702
81123b30:	81124388 	cmpgei	r4,r16,18702
81123b34:	81123f78 	rdprs	r4,r16,18685
81123b38:	42000204 	addi	r8,r8,8
81123b3c:	da802317 	ldw	r10,140(sp)
81123b40:	5455883a 	add	r10,r10,r17
81123b44:	da802315 	stw	r10,140(sp)
81123b48:	003f8b06 	br	81123978 <__reset+0xfb103978>
81123b4c:	d9002017 	ldw	r4,128(sp)
81123b50:	a00b883a 	mov	r5,r20
81123b54:	111b3700 	call	8111b370 <__swsetup_r>
81123b58:	1003b11e 	bne	r2,zero,81124a20 <___vfiprintf_internal_r+0x11f4>
81123b5c:	a080030b 	ldhu	r2,12(r20)
81123b60:	00c00284 	movi	r3,10
81123b64:	1080068c 	andi	r2,r2,26
81123b68:	10ff541e 	bne	r2,r3,811238bc <__reset+0xfb1038bc>
81123b6c:	a080038f 	ldh	r2,14(r20)
81123b70:	103f5216 	blt	r2,zero,811238bc <__reset+0xfb1038bc>
81123b74:	d9c02217 	ldw	r7,136(sp)
81123b78:	d9002017 	ldw	r4,128(sp)
81123b7c:	e00d883a 	mov	r6,fp
81123b80:	a00b883a 	mov	r5,r20
81123b84:	1124cac0 	call	81124cac <__sbprintf>
81123b88:	dfc03617 	ldw	ra,216(sp)
81123b8c:	df003517 	ldw	fp,212(sp)
81123b90:	ddc03417 	ldw	r23,208(sp)
81123b94:	dd803317 	ldw	r22,204(sp)
81123b98:	dd403217 	ldw	r21,200(sp)
81123b9c:	dd003117 	ldw	r20,196(sp)
81123ba0:	dcc03017 	ldw	r19,192(sp)
81123ba4:	dc802f17 	ldw	r18,188(sp)
81123ba8:	dc402e17 	ldw	r17,184(sp)
81123bac:	dc002d17 	ldw	r16,180(sp)
81123bb0:	dec03704 	addi	sp,sp,220
81123bb4:	f800283a 	ret
81123bb8:	111d3e00 	call	8111d3e0 <__sinit>
81123bbc:	003f2f06 	br	8112387c <__reset+0xfb10387c>
81123bc0:	0463c83a 	sub	r17,zero,r17
81123bc4:	d8802215 	stw	r2,136(sp)
81123bc8:	a5000114 	ori	r20,r20,4
81123bcc:	80c00007 	ldb	r3,0(r16)
81123bd0:	003f7706 	br	811239b0 <__reset+0xfb1039b0>
81123bd4:	00800c04 	movi	r2,48
81123bd8:	da802217 	ldw	r10,136(sp)
81123bdc:	d8801d05 	stb	r2,116(sp)
81123be0:	00801e04 	movi	r2,120
81123be4:	d8801d45 	stb	r2,117(sp)
81123be8:	d8001d85 	stb	zero,118(sp)
81123bec:	50c00104 	addi	r3,r10,4
81123bf0:	54800017 	ldw	r18,0(r10)
81123bf4:	0027883a 	mov	r19,zero
81123bf8:	a0800094 	ori	r2,r20,2
81123bfc:	48030b16 	blt	r9,zero,8112482c <___vfiprintf_internal_r+0x1000>
81123c00:	00bfdfc4 	movi	r2,-129
81123c04:	a096703a 	and	r11,r20,r2
81123c08:	d8c02215 	stw	r3,136(sp)
81123c0c:	5d000094 	ori	r20,r11,2
81123c10:	90032b1e 	bne	r18,zero,811248c0 <___vfiprintf_internal_r+0x1094>
81123c14:	00a04534 	movhi	r2,33044
81123c18:	10878704 	addi	r2,r2,7708
81123c1c:	d8802615 	stw	r2,152(sp)
81123c20:	0039883a 	mov	fp,zero
81123c24:	48017b1e 	bne	r9,zero,81124214 <___vfiprintf_internal_r+0x9e8>
81123c28:	0013883a 	mov	r9,zero
81123c2c:	0027883a 	mov	r19,zero
81123c30:	dd401a04 	addi	r21,sp,104
81123c34:	4825883a 	mov	r18,r9
81123c38:	4cc0010e 	bge	r9,r19,81123c40 <___vfiprintf_internal_r+0x414>
81123c3c:	9825883a 	mov	r18,r19
81123c40:	e7003fcc 	andi	fp,fp,255
81123c44:	e700201c 	xori	fp,fp,128
81123c48:	e73fe004 	addi	fp,fp,-128
81123c4c:	e0000126 	beq	fp,zero,81123c54 <___vfiprintf_internal_r+0x428>
81123c50:	94800044 	addi	r18,r18,1
81123c54:	a380008c 	andi	r14,r20,2
81123c58:	70000126 	beq	r14,zero,81123c60 <___vfiprintf_internal_r+0x434>
81123c5c:	94800084 	addi	r18,r18,2
81123c60:	a700210c 	andi	fp,r20,132
81123c64:	e001df1e 	bne	fp,zero,811243e4 <___vfiprintf_internal_r+0xbb8>
81123c68:	8c87c83a 	sub	r3,r17,r18
81123c6c:	00c1dd0e 	bge	zero,r3,811243e4 <___vfiprintf_internal_r+0xbb8>
81123c70:	01c00404 	movi	r7,16
81123c74:	d8801c17 	ldw	r2,112(sp)
81123c78:	38c3ad0e 	bge	r7,r3,81124b30 <___vfiprintf_internal_r+0x1304>
81123c7c:	02a04534 	movhi	r10,33044
81123c80:	52881d04 	addi	r10,r10,8308
81123c84:	dc002915 	stw	r16,164(sp)
81123c88:	d9801b17 	ldw	r6,108(sp)
81123c8c:	da802415 	stw	r10,144(sp)
81123c90:	03c001c4 	movi	r15,7
81123c94:	da402515 	stw	r9,148(sp)
81123c98:	db802815 	stw	r14,160(sp)
81123c9c:	1821883a 	mov	r16,r3
81123ca0:	00000506 	br	81123cb8 <___vfiprintf_internal_r+0x48c>
81123ca4:	31400084 	addi	r5,r6,2
81123ca8:	42000204 	addi	r8,r8,8
81123cac:	200d883a 	mov	r6,r4
81123cb0:	843ffc04 	addi	r16,r16,-16
81123cb4:	3c000d0e 	bge	r7,r16,81123cec <___vfiprintf_internal_r+0x4c0>
81123cb8:	10800404 	addi	r2,r2,16
81123cbc:	31000044 	addi	r4,r6,1
81123cc0:	45800015 	stw	r22,0(r8)
81123cc4:	41c00115 	stw	r7,4(r8)
81123cc8:	d8801c15 	stw	r2,112(sp)
81123ccc:	d9001b15 	stw	r4,108(sp)
81123cd0:	793ff40e 	bge	r15,r4,81123ca4 <__reset+0xfb103ca4>
81123cd4:	1001b51e 	bne	r2,zero,811243ac <___vfiprintf_internal_r+0xb80>
81123cd8:	843ffc04 	addi	r16,r16,-16
81123cdc:	000d883a 	mov	r6,zero
81123ce0:	01400044 	movi	r5,1
81123ce4:	d811883a 	mov	r8,sp
81123ce8:	3c3ff316 	blt	r7,r16,81123cb8 <__reset+0xfb103cb8>
81123cec:	8007883a 	mov	r3,r16
81123cf0:	da402517 	ldw	r9,148(sp)
81123cf4:	db802817 	ldw	r14,160(sp)
81123cf8:	dc002917 	ldw	r16,164(sp)
81123cfc:	da802417 	ldw	r10,144(sp)
81123d00:	1885883a 	add	r2,r3,r2
81123d04:	40c00115 	stw	r3,4(r8)
81123d08:	42800015 	stw	r10,0(r8)
81123d0c:	d8801c15 	stw	r2,112(sp)
81123d10:	d9401b15 	stw	r5,108(sp)
81123d14:	00c001c4 	movi	r3,7
81123d18:	19426016 	blt	r3,r5,8112469c <___vfiprintf_internal_r+0xe70>
81123d1c:	d8c01d87 	ldb	r3,118(sp)
81123d20:	42000204 	addi	r8,r8,8
81123d24:	29000044 	addi	r4,r5,1
81123d28:	1801b31e 	bne	r3,zero,811243f8 <___vfiprintf_internal_r+0xbcc>
81123d2c:	7001c026 	beq	r14,zero,81124430 <___vfiprintf_internal_r+0xc04>
81123d30:	d8c01d04 	addi	r3,sp,116
81123d34:	10800084 	addi	r2,r2,2
81123d38:	40c00015 	stw	r3,0(r8)
81123d3c:	00c00084 	movi	r3,2
81123d40:	40c00115 	stw	r3,4(r8)
81123d44:	d8801c15 	stw	r2,112(sp)
81123d48:	d9001b15 	stw	r4,108(sp)
81123d4c:	00c001c4 	movi	r3,7
81123d50:	1902650e 	bge	r3,r4,811246e8 <___vfiprintf_internal_r+0xebc>
81123d54:	10029a1e 	bne	r2,zero,811247c0 <___vfiprintf_internal_r+0xf94>
81123d58:	00c02004 	movi	r3,128
81123d5c:	01000044 	movi	r4,1
81123d60:	000b883a 	mov	r5,zero
81123d64:	d811883a 	mov	r8,sp
81123d68:	e0c1b31e 	bne	fp,r3,81124438 <___vfiprintf_internal_r+0xc0c>
81123d6c:	8cb9c83a 	sub	fp,r17,r18
81123d70:	0701b10e 	bge	zero,fp,81124438 <___vfiprintf_internal_r+0xc0c>
81123d74:	01c00404 	movi	r7,16
81123d78:	3f03890e 	bge	r7,fp,81124ba0 <___vfiprintf_internal_r+0x1374>
81123d7c:	00e04534 	movhi	r3,33044
81123d80:	18c81904 	addi	r3,r3,8292
81123d84:	d8c02415 	stw	r3,144(sp)
81123d88:	8007883a 	mov	r3,r16
81123d8c:	034001c4 	movi	r13,7
81123d90:	e021883a 	mov	r16,fp
81123d94:	da402515 	stw	r9,148(sp)
81123d98:	1839883a 	mov	fp,r3
81123d9c:	00000506 	br	81123db4 <___vfiprintf_internal_r+0x588>
81123da0:	29800084 	addi	r6,r5,2
81123da4:	42000204 	addi	r8,r8,8
81123da8:	180b883a 	mov	r5,r3
81123dac:	843ffc04 	addi	r16,r16,-16
81123db0:	3c000d0e 	bge	r7,r16,81123de8 <___vfiprintf_internal_r+0x5bc>
81123db4:	10800404 	addi	r2,r2,16
81123db8:	28c00044 	addi	r3,r5,1
81123dbc:	45c00015 	stw	r23,0(r8)
81123dc0:	41c00115 	stw	r7,4(r8)
81123dc4:	d8801c15 	stw	r2,112(sp)
81123dc8:	d8c01b15 	stw	r3,108(sp)
81123dcc:	68fff40e 	bge	r13,r3,81123da0 <__reset+0xfb103da0>
81123dd0:	1002241e 	bne	r2,zero,81124664 <___vfiprintf_internal_r+0xe38>
81123dd4:	843ffc04 	addi	r16,r16,-16
81123dd8:	01800044 	movi	r6,1
81123ddc:	000b883a 	mov	r5,zero
81123de0:	d811883a 	mov	r8,sp
81123de4:	3c3ff316 	blt	r7,r16,81123db4 <__reset+0xfb103db4>
81123de8:	da402517 	ldw	r9,148(sp)
81123dec:	e007883a 	mov	r3,fp
81123df0:	8039883a 	mov	fp,r16
81123df4:	1821883a 	mov	r16,r3
81123df8:	d8c02417 	ldw	r3,144(sp)
81123dfc:	1705883a 	add	r2,r2,fp
81123e00:	47000115 	stw	fp,4(r8)
81123e04:	40c00015 	stw	r3,0(r8)
81123e08:	d8801c15 	stw	r2,112(sp)
81123e0c:	d9801b15 	stw	r6,108(sp)
81123e10:	00c001c4 	movi	r3,7
81123e14:	19827616 	blt	r3,r6,811247f0 <___vfiprintf_internal_r+0xfc4>
81123e18:	4cf9c83a 	sub	fp,r9,r19
81123e1c:	42000204 	addi	r8,r8,8
81123e20:	31000044 	addi	r4,r6,1
81123e24:	300b883a 	mov	r5,r6
81123e28:	07018516 	blt	zero,fp,81124440 <___vfiprintf_internal_r+0xc14>
81123e2c:	9885883a 	add	r2,r19,r2
81123e30:	45400015 	stw	r21,0(r8)
81123e34:	44c00115 	stw	r19,4(r8)
81123e38:	d8801c15 	stw	r2,112(sp)
81123e3c:	d9001b15 	stw	r4,108(sp)
81123e40:	00c001c4 	movi	r3,7
81123e44:	1901dd0e 	bge	r3,r4,811245bc <___vfiprintf_internal_r+0xd90>
81123e48:	1002401e 	bne	r2,zero,8112474c <___vfiprintf_internal_r+0xf20>
81123e4c:	d8001b15 	stw	zero,108(sp)
81123e50:	a2c0010c 	andi	r11,r20,4
81123e54:	58000226 	beq	r11,zero,81123e60 <___vfiprintf_internal_r+0x634>
81123e58:	8ca7c83a 	sub	r19,r17,r18
81123e5c:	04c2f216 	blt	zero,r19,81124a28 <___vfiprintf_internal_r+0x11fc>
81123e60:	8c80010e 	bge	r17,r18,81123e68 <___vfiprintf_internal_r+0x63c>
81123e64:	9023883a 	mov	r17,r18
81123e68:	da802317 	ldw	r10,140(sp)
81123e6c:	5455883a 	add	r10,r10,r17
81123e70:	da802315 	stw	r10,140(sp)
81123e74:	d8001b15 	stw	zero,108(sp)
81123e78:	d811883a 	mov	r8,sp
81123e7c:	003ea206 	br	81123908 <__reset+0xfb103908>
81123e80:	a5000814 	ori	r20,r20,32
81123e84:	80c00007 	ldb	r3,0(r16)
81123e88:	003ec906 	br	811239b0 <__reset+0xfb1039b0>
81123e8c:	80c00007 	ldb	r3,0(r16)
81123e90:	1b030926 	beq	r3,r12,81124ab8 <___vfiprintf_internal_r+0x128c>
81123e94:	a5000414 	ori	r20,r20,16
81123e98:	003ec506 	br	811239b0 <__reset+0xfb1039b0>
81123e9c:	21003fcc 	andi	r4,r4,255
81123ea0:	20035e1e 	bne	r4,zero,81124c1c <___vfiprintf_internal_r+0x13f0>
81123ea4:	a080080c 	andi	r2,r20,32
81123ea8:	1002a526 	beq	r2,zero,81124940 <___vfiprintf_internal_r+0x1114>
81123eac:	da802217 	ldw	r10,136(sp)
81123eb0:	50800017 	ldw	r2,0(r10)
81123eb4:	da802317 	ldw	r10,140(sp)
81123eb8:	5007d7fa 	srai	r3,r10,31
81123ebc:	da802217 	ldw	r10,136(sp)
81123ec0:	10c00115 	stw	r3,4(r2)
81123ec4:	52800104 	addi	r10,r10,4
81123ec8:	da802215 	stw	r10,136(sp)
81123ecc:	da802317 	ldw	r10,140(sp)
81123ed0:	12800015 	stw	r10,0(r2)
81123ed4:	003e8c06 	br	81123908 <__reset+0xfb103908>
81123ed8:	21003fcc 	andi	r4,r4,255
81123edc:	2003511e 	bne	r4,zero,81124c24 <___vfiprintf_internal_r+0x13f8>
81123ee0:	a080080c 	andi	r2,r20,32
81123ee4:	1000a126 	beq	r2,zero,8112416c <___vfiprintf_internal_r+0x940>
81123ee8:	da802217 	ldw	r10,136(sp)
81123eec:	d8001d85 	stb	zero,118(sp)
81123ef0:	50800204 	addi	r2,r10,8
81123ef4:	54800017 	ldw	r18,0(r10)
81123ef8:	54c00117 	ldw	r19,4(r10)
81123efc:	4802b416 	blt	r9,zero,811249d0 <___vfiprintf_internal_r+0x11a4>
81123f00:	013fdfc4 	movi	r4,-129
81123f04:	94c6b03a 	or	r3,r18,r19
81123f08:	d8802215 	stw	r2,136(sp)
81123f0c:	a128703a 	and	r20,r20,r4
81123f10:	1800a226 	beq	r3,zero,8112419c <___vfiprintf_internal_r+0x970>
81123f14:	0039883a 	mov	fp,zero
81123f18:	dd401a04 	addi	r21,sp,104
81123f1c:	9006d0fa 	srli	r3,r18,3
81123f20:	9808977a 	slli	r4,r19,29
81123f24:	9826d0fa 	srli	r19,r19,3
81123f28:	948001cc 	andi	r18,r18,7
81123f2c:	90800c04 	addi	r2,r18,48
81123f30:	ad7fffc4 	addi	r21,r21,-1
81123f34:	20e4b03a 	or	r18,r4,r3
81123f38:	a8800005 	stb	r2,0(r21)
81123f3c:	94c6b03a 	or	r3,r18,r19
81123f40:	183ff61e 	bne	r3,zero,81123f1c <__reset+0xfb103f1c>
81123f44:	a0c0004c 	andi	r3,r20,1
81123f48:	18005926 	beq	r3,zero,811240b0 <___vfiprintf_internal_r+0x884>
81123f4c:	10803fcc 	andi	r2,r2,255
81123f50:	1080201c 	xori	r2,r2,128
81123f54:	10bfe004 	addi	r2,r2,-128
81123f58:	00c00c04 	movi	r3,48
81123f5c:	10c05426 	beq	r2,r3,811240b0 <___vfiprintf_internal_r+0x884>
81123f60:	da801e17 	ldw	r10,120(sp)
81123f64:	a8bfffc4 	addi	r2,r21,-1
81123f68:	a8ffffc5 	stb	r3,-1(r21)
81123f6c:	50a7c83a 	sub	r19,r10,r2
81123f70:	102b883a 	mov	r21,r2
81123f74:	003f2f06 	br	81123c34 <__reset+0xfb103c34>
81123f78:	21003fcc 	andi	r4,r4,255
81123f7c:	2003421e 	bne	r4,zero,81124c88 <___vfiprintf_internal_r+0x145c>
81123f80:	00a04534 	movhi	r2,33044
81123f84:	10878704 	addi	r2,r2,7708
81123f88:	d8802615 	stw	r2,152(sp)
81123f8c:	a080080c 	andi	r2,r20,32
81123f90:	1000aa26 	beq	r2,zero,8112423c <___vfiprintf_internal_r+0xa10>
81123f94:	da802217 	ldw	r10,136(sp)
81123f98:	54800017 	ldw	r18,0(r10)
81123f9c:	54c00117 	ldw	r19,4(r10)
81123fa0:	52800204 	addi	r10,r10,8
81123fa4:	da802215 	stw	r10,136(sp)
81123fa8:	a080004c 	andi	r2,r20,1
81123fac:	1001d226 	beq	r2,zero,811246f8 <___vfiprintf_internal_r+0xecc>
81123fb0:	94c4b03a 	or	r2,r18,r19
81123fb4:	1002351e 	bne	r2,zero,8112488c <___vfiprintf_internal_r+0x1060>
81123fb8:	d8001d85 	stb	zero,118(sp)
81123fbc:	48022216 	blt	r9,zero,81124848 <___vfiprintf_internal_r+0x101c>
81123fc0:	00bfdfc4 	movi	r2,-129
81123fc4:	a0a8703a 	and	r20,r20,r2
81123fc8:	003f1506 	br	81123c20 <__reset+0xfb103c20>
81123fcc:	da802217 	ldw	r10,136(sp)
81123fd0:	04800044 	movi	r18,1
81123fd4:	d8001d85 	stb	zero,118(sp)
81123fd8:	50800017 	ldw	r2,0(r10)
81123fdc:	52800104 	addi	r10,r10,4
81123fe0:	da802215 	stw	r10,136(sp)
81123fe4:	d8801005 	stb	r2,64(sp)
81123fe8:	9027883a 	mov	r19,r18
81123fec:	dd401004 	addi	r21,sp,64
81123ff0:	0013883a 	mov	r9,zero
81123ff4:	003f1706 	br	81123c54 <__reset+0xfb103c54>
81123ff8:	21003fcc 	andi	r4,r4,255
81123ffc:	2003201e 	bne	r4,zero,81124c80 <___vfiprintf_internal_r+0x1454>
81124000:	a080080c 	andi	r2,r20,32
81124004:	10004b26 	beq	r2,zero,81124134 <___vfiprintf_internal_r+0x908>
81124008:	da802217 	ldw	r10,136(sp)
8112400c:	50800117 	ldw	r2,4(r10)
81124010:	54800017 	ldw	r18,0(r10)
81124014:	52800204 	addi	r10,r10,8
81124018:	da802215 	stw	r10,136(sp)
8112401c:	1027883a 	mov	r19,r2
81124020:	10022c16 	blt	r2,zero,811248d4 <___vfiprintf_internal_r+0x10a8>
81124024:	df001d83 	ldbu	fp,118(sp)
81124028:	48007216 	blt	r9,zero,811241f4 <___vfiprintf_internal_r+0x9c8>
8112402c:	00ffdfc4 	movi	r3,-129
81124030:	94c4b03a 	or	r2,r18,r19
81124034:	a0e8703a 	and	r20,r20,r3
81124038:	1000cc26 	beq	r2,zero,8112436c <___vfiprintf_internal_r+0xb40>
8112403c:	98021026 	beq	r19,zero,81124880 <___vfiprintf_internal_r+0x1054>
81124040:	dc402415 	stw	r17,144(sp)
81124044:	dc002515 	stw	r16,148(sp)
81124048:	9823883a 	mov	r17,r19
8112404c:	9021883a 	mov	r16,r18
81124050:	dd401a04 	addi	r21,sp,104
81124054:	4825883a 	mov	r18,r9
81124058:	4027883a 	mov	r19,r8
8112405c:	8009883a 	mov	r4,r16
81124060:	880b883a 	mov	r5,r17
81124064:	01800284 	movi	r6,10
81124068:	000f883a 	mov	r7,zero
8112406c:	11265c80 	call	811265c8 <__umoddi3>
81124070:	10800c04 	addi	r2,r2,48
81124074:	ad7fffc4 	addi	r21,r21,-1
81124078:	8009883a 	mov	r4,r16
8112407c:	880b883a 	mov	r5,r17
81124080:	a8800005 	stb	r2,0(r21)
81124084:	01800284 	movi	r6,10
81124088:	000f883a 	mov	r7,zero
8112408c:	11260480 	call	81126048 <__udivdi3>
81124090:	1021883a 	mov	r16,r2
81124094:	10c4b03a 	or	r2,r2,r3
81124098:	1823883a 	mov	r17,r3
8112409c:	103fef1e 	bne	r2,zero,8112405c <__reset+0xfb10405c>
811240a0:	dc402417 	ldw	r17,144(sp)
811240a4:	dc002517 	ldw	r16,148(sp)
811240a8:	9013883a 	mov	r9,r18
811240ac:	9811883a 	mov	r8,r19
811240b0:	da801e17 	ldw	r10,120(sp)
811240b4:	5567c83a 	sub	r19,r10,r21
811240b8:	003ede06 	br	81123c34 <__reset+0xfb103c34>
811240bc:	38803fcc 	andi	r2,r7,255
811240c0:	1080201c 	xori	r2,r2,128
811240c4:	10bfe004 	addi	r2,r2,-128
811240c8:	1002371e 	bne	r2,zero,811249a8 <___vfiprintf_internal_r+0x117c>
811240cc:	01000044 	movi	r4,1
811240d0:	01c00804 	movi	r7,32
811240d4:	80c00007 	ldb	r3,0(r16)
811240d8:	003e3506 	br	811239b0 <__reset+0xfb1039b0>
811240dc:	a5000054 	ori	r20,r20,1
811240e0:	80c00007 	ldb	r3,0(r16)
811240e4:	003e3206 	br	811239b0 <__reset+0xfb1039b0>
811240e8:	a5002014 	ori	r20,r20,128
811240ec:	80c00007 	ldb	r3,0(r16)
811240f0:	003e2f06 	br	811239b0 <__reset+0xfb1039b0>
811240f4:	8015883a 	mov	r10,r16
811240f8:	0023883a 	mov	r17,zero
811240fc:	18bff404 	addi	r2,r3,-48
81124100:	50c00007 	ldb	r3,0(r10)
81124104:	8c4002a4 	muli	r17,r17,10
81124108:	84000044 	addi	r16,r16,1
8112410c:	8015883a 	mov	r10,r16
81124110:	1463883a 	add	r17,r2,r17
81124114:	18bff404 	addi	r2,r3,-48
81124118:	30bff92e 	bgeu	r6,r2,81124100 <__reset+0xfb104100>
8112411c:	003e2506 	br	811239b4 <__reset+0xfb1039b4>
81124120:	21003fcc 	andi	r4,r4,255
81124124:	2002d41e 	bne	r4,zero,81124c78 <___vfiprintf_internal_r+0x144c>
81124128:	a5000414 	ori	r20,r20,16
8112412c:	a080080c 	andi	r2,r20,32
81124130:	103fb51e 	bne	r2,zero,81124008 <__reset+0xfb104008>
81124134:	a080040c 	andi	r2,r20,16
81124138:	1001f826 	beq	r2,zero,8112491c <___vfiprintf_internal_r+0x10f0>
8112413c:	da802217 	ldw	r10,136(sp)
81124140:	54800017 	ldw	r18,0(r10)
81124144:	52800104 	addi	r10,r10,4
81124148:	da802215 	stw	r10,136(sp)
8112414c:	9027d7fa 	srai	r19,r18,31
81124150:	9805883a 	mov	r2,r19
81124154:	003fb206 	br	81124020 <__reset+0xfb104020>
81124158:	21003fcc 	andi	r4,r4,255
8112415c:	2002c41e 	bne	r4,zero,81124c70 <___vfiprintf_internal_r+0x1444>
81124160:	a5000414 	ori	r20,r20,16
81124164:	a080080c 	andi	r2,r20,32
81124168:	103f5f1e 	bne	r2,zero,81123ee8 <__reset+0xfb103ee8>
8112416c:	a080040c 	andi	r2,r20,16
81124170:	10020f26 	beq	r2,zero,811249b0 <___vfiprintf_internal_r+0x1184>
81124174:	da802217 	ldw	r10,136(sp)
81124178:	d8001d85 	stb	zero,118(sp)
8112417c:	0027883a 	mov	r19,zero
81124180:	50800104 	addi	r2,r10,4
81124184:	54800017 	ldw	r18,0(r10)
81124188:	48021116 	blt	r9,zero,811249d0 <___vfiprintf_internal_r+0x11a4>
8112418c:	00ffdfc4 	movi	r3,-129
81124190:	d8802215 	stw	r2,136(sp)
81124194:	a0e8703a 	and	r20,r20,r3
81124198:	903f5e1e 	bne	r18,zero,81123f14 <__reset+0xfb103f14>
8112419c:	0039883a 	mov	fp,zero
811241a0:	4802a626 	beq	r9,zero,81124c3c <___vfiprintf_internal_r+0x1410>
811241a4:	0025883a 	mov	r18,zero
811241a8:	0027883a 	mov	r19,zero
811241ac:	003f5a06 	br	81123f18 <__reset+0xfb103f18>
811241b0:	21003fcc 	andi	r4,r4,255
811241b4:	20029f1e 	bne	r4,zero,81124c34 <___vfiprintf_internal_r+0x1408>
811241b8:	a5000414 	ori	r20,r20,16
811241bc:	a080080c 	andi	r2,r20,32
811241c0:	10005e1e 	bne	r2,zero,8112433c <___vfiprintf_internal_r+0xb10>
811241c4:	a080040c 	andi	r2,r20,16
811241c8:	1001a21e 	bne	r2,zero,81124854 <___vfiprintf_internal_r+0x1028>
811241cc:	a080100c 	andi	r2,r20,64
811241d0:	d8001d85 	stb	zero,118(sp)
811241d4:	da802217 	ldw	r10,136(sp)
811241d8:	1002231e 	bne	r2,zero,81124a68 <___vfiprintf_internal_r+0x123c>
811241dc:	50800104 	addi	r2,r10,4
811241e0:	54800017 	ldw	r18,0(r10)
811241e4:	0027883a 	mov	r19,zero
811241e8:	4801a00e 	bge	r9,zero,8112486c <___vfiprintf_internal_r+0x1040>
811241ec:	d8802215 	stw	r2,136(sp)
811241f0:	0039883a 	mov	fp,zero
811241f4:	94c4b03a 	or	r2,r18,r19
811241f8:	103f901e 	bne	r2,zero,8112403c <__reset+0xfb10403c>
811241fc:	00800044 	movi	r2,1
81124200:	10803fcc 	andi	r2,r2,255
81124204:	00c00044 	movi	r3,1
81124208:	10c05926 	beq	r2,r3,81124370 <___vfiprintf_internal_r+0xb44>
8112420c:	00c00084 	movi	r3,2
81124210:	10ffe41e 	bne	r2,r3,811241a4 <__reset+0xfb1041a4>
81124214:	0025883a 	mov	r18,zero
81124218:	0027883a 	mov	r19,zero
8112421c:	00013d06 	br	81124714 <___vfiprintf_internal_r+0xee8>
81124220:	21003fcc 	andi	r4,r4,255
81124224:	2002811e 	bne	r4,zero,81124c2c <___vfiprintf_internal_r+0x1400>
81124228:	00a04534 	movhi	r2,33044
8112422c:	10878204 	addi	r2,r2,7688
81124230:	d8802615 	stw	r2,152(sp)
81124234:	a080080c 	andi	r2,r20,32
81124238:	103f561e 	bne	r2,zero,81123f94 <__reset+0xfb103f94>
8112423c:	a080040c 	andi	r2,r20,16
81124240:	1001d126 	beq	r2,zero,81124988 <___vfiprintf_internal_r+0x115c>
81124244:	da802217 	ldw	r10,136(sp)
81124248:	0027883a 	mov	r19,zero
8112424c:	54800017 	ldw	r18,0(r10)
81124250:	52800104 	addi	r10,r10,4
81124254:	da802215 	stw	r10,136(sp)
81124258:	003f5306 	br	81123fa8 <__reset+0xfb103fa8>
8112425c:	da802217 	ldw	r10,136(sp)
81124260:	d8001d85 	stb	zero,118(sp)
81124264:	55400017 	ldw	r21,0(r10)
81124268:	50c00104 	addi	r3,r10,4
8112426c:	a8024226 	beq	r21,zero,81124b78 <___vfiprintf_internal_r+0x134c>
81124270:	48021816 	blt	r9,zero,81124ad4 <___vfiprintf_internal_r+0x12a8>
81124274:	480d883a 	mov	r6,r9
81124278:	000b883a 	mov	r5,zero
8112427c:	a809883a 	mov	r4,r21
81124280:	d8c02a15 	stw	r3,168(sp)
81124284:	da002b15 	stw	r8,172(sp)
81124288:	da402c15 	stw	r9,176(sp)
8112428c:	111e6080 	call	8111e608 <memchr>
81124290:	d8c02a17 	ldw	r3,168(sp)
81124294:	da002b17 	ldw	r8,172(sp)
81124298:	da402c17 	ldw	r9,176(sp)
8112429c:	10024826 	beq	r2,zero,81124bc0 <___vfiprintf_internal_r+0x1394>
811242a0:	1567c83a 	sub	r19,r2,r21
811242a4:	df001d83 	ldbu	fp,118(sp)
811242a8:	d8c02215 	stw	r3,136(sp)
811242ac:	0013883a 	mov	r9,zero
811242b0:	003e6006 	br	81123c34 <__reset+0xfb103c34>
811242b4:	21003fcc 	andi	r4,r4,255
811242b8:	203fc026 	beq	r4,zero,811241bc <__reset+0xfb1041bc>
811242bc:	d9c01d85 	stb	r7,118(sp)
811242c0:	003fbe06 	br	811241bc <__reset+0xfb1041bc>
811242c4:	da802217 	ldw	r10,136(sp)
811242c8:	54400017 	ldw	r17,0(r10)
811242cc:	50800104 	addi	r2,r10,4
811242d0:	883e3b16 	blt	r17,zero,81123bc0 <__reset+0xfb103bc0>
811242d4:	d8802215 	stw	r2,136(sp)
811242d8:	80c00007 	ldb	r3,0(r16)
811242dc:	003db406 	br	811239b0 <__reset+0xfb1039b0>
811242e0:	01000044 	movi	r4,1
811242e4:	01c00ac4 	movi	r7,43
811242e8:	80c00007 	ldb	r3,0(r16)
811242ec:	003db006 	br	811239b0 <__reset+0xfb1039b0>
811242f0:	80c00007 	ldb	r3,0(r16)
811242f4:	82800044 	addi	r10,r16,1
811242f8:	1b423c26 	beq	r3,r13,81124bec <___vfiprintf_internal_r+0x13c0>
811242fc:	18bff404 	addi	r2,r3,-48
81124300:	0013883a 	mov	r9,zero
81124304:	30822b36 	bltu	r6,r2,81124bb4 <___vfiprintf_internal_r+0x1388>
81124308:	50c00007 	ldb	r3,0(r10)
8112430c:	4a4002a4 	muli	r9,r9,10
81124310:	54000044 	addi	r16,r10,1
81124314:	8015883a 	mov	r10,r16
81124318:	4893883a 	add	r9,r9,r2
8112431c:	18bff404 	addi	r2,r3,-48
81124320:	30bff92e 	bgeu	r6,r2,81124308 <__reset+0xfb104308>
81124324:	483da30e 	bge	r9,zero,811239b4 <__reset+0xfb1039b4>
81124328:	027fffc4 	movi	r9,-1
8112432c:	003da106 	br	811239b4 <__reset+0xfb1039b4>
81124330:	a5001014 	ori	r20,r20,64
81124334:	80c00007 	ldb	r3,0(r16)
81124338:	003d9d06 	br	811239b0 <__reset+0xfb1039b0>
8112433c:	da802217 	ldw	r10,136(sp)
81124340:	d8001d85 	stb	zero,118(sp)
81124344:	50c00204 	addi	r3,r10,8
81124348:	54800017 	ldw	r18,0(r10)
8112434c:	54c00117 	ldw	r19,4(r10)
81124350:	4801ca16 	blt	r9,zero,81124a7c <___vfiprintf_internal_r+0x1250>
81124354:	013fdfc4 	movi	r4,-129
81124358:	94c4b03a 	or	r2,r18,r19
8112435c:	d8c02215 	stw	r3,136(sp)
81124360:	a128703a 	and	r20,r20,r4
81124364:	0039883a 	mov	fp,zero
81124368:	103f341e 	bne	r2,zero,8112403c <__reset+0xfb10403c>
8112436c:	483e2e26 	beq	r9,zero,81123c28 <__reset+0xfb103c28>
81124370:	0025883a 	mov	r18,zero
81124374:	94800c04 	addi	r18,r18,48
81124378:	dc8019c5 	stb	r18,103(sp)
8112437c:	dcc02717 	ldw	r19,156(sp)
81124380:	dd4019c4 	addi	r21,sp,103
81124384:	003e2b06 	br	81123c34 <__reset+0xfb103c34>
81124388:	21003fcc 	andi	r4,r4,255
8112438c:	2002361e 	bne	r4,zero,81124c68 <___vfiprintf_internal_r+0x143c>
81124390:	1801c126 	beq	r3,zero,81124a98 <___vfiprintf_internal_r+0x126c>
81124394:	04800044 	movi	r18,1
81124398:	d8c01005 	stb	r3,64(sp)
8112439c:	d8001d85 	stb	zero,118(sp)
811243a0:	9027883a 	mov	r19,r18
811243a4:	dd401004 	addi	r21,sp,64
811243a8:	003f1106 	br	81123ff0 <__reset+0xfb103ff0>
811243ac:	d9402117 	ldw	r5,132(sp)
811243b0:	d9002017 	ldw	r4,128(sp)
811243b4:	d9801a04 	addi	r6,sp,104
811243b8:	d9c02b15 	stw	r7,172(sp)
811243bc:	dbc02a15 	stw	r15,168(sp)
811243c0:	11237100 	call	81123710 <__sprint_r.part.0>
811243c4:	d9c02b17 	ldw	r7,172(sp)
811243c8:	dbc02a17 	ldw	r15,168(sp)
811243cc:	10006d1e 	bne	r2,zero,81124584 <___vfiprintf_internal_r+0xd58>
811243d0:	d9801b17 	ldw	r6,108(sp)
811243d4:	d8801c17 	ldw	r2,112(sp)
811243d8:	d811883a 	mov	r8,sp
811243dc:	31400044 	addi	r5,r6,1
811243e0:	003e3306 	br	81123cb0 <__reset+0xfb103cb0>
811243e4:	d9401b17 	ldw	r5,108(sp)
811243e8:	d8801c17 	ldw	r2,112(sp)
811243ec:	29000044 	addi	r4,r5,1
811243f0:	d8c01d87 	ldb	r3,118(sp)
811243f4:	183e4d26 	beq	r3,zero,81123d2c <__reset+0xfb103d2c>
811243f8:	00c00044 	movi	r3,1
811243fc:	d9401d84 	addi	r5,sp,118
81124400:	10c5883a 	add	r2,r2,r3
81124404:	41400015 	stw	r5,0(r8)
81124408:	40c00115 	stw	r3,4(r8)
8112440c:	d8801c15 	stw	r2,112(sp)
81124410:	d9001b15 	stw	r4,108(sp)
81124414:	014001c4 	movi	r5,7
81124418:	2900a90e 	bge	r5,r4,811246c0 <___vfiprintf_internal_r+0xe94>
8112441c:	1000da1e 	bne	r2,zero,81124788 <___vfiprintf_internal_r+0xf5c>
81124420:	7000ab1e 	bne	r14,zero,811246d0 <___vfiprintf_internal_r+0xea4>
81124424:	000b883a 	mov	r5,zero
81124428:	1809883a 	mov	r4,r3
8112442c:	d811883a 	mov	r8,sp
81124430:	00c02004 	movi	r3,128
81124434:	e0fe4d26 	beq	fp,r3,81123d6c <__reset+0xfb103d6c>
81124438:	4cf9c83a 	sub	fp,r9,r19
8112443c:	073e7b0e 	bge	zero,fp,81123e2c <__reset+0xfb103e2c>
81124440:	01c00404 	movi	r7,16
81124444:	3f01900e 	bge	r7,fp,81124a88 <___vfiprintf_internal_r+0x125c>
81124448:	00e04534 	movhi	r3,33044
8112444c:	18c81904 	addi	r3,r3,8292
81124450:	d8c02415 	stw	r3,144(sp)
81124454:	034001c4 	movi	r13,7
81124458:	00000506 	br	81124470 <___vfiprintf_internal_r+0xc44>
8112445c:	29000084 	addi	r4,r5,2
81124460:	42000204 	addi	r8,r8,8
81124464:	180b883a 	mov	r5,r3
81124468:	e73ffc04 	addi	fp,fp,-16
8112446c:	3f000d0e 	bge	r7,fp,811244a4 <___vfiprintf_internal_r+0xc78>
81124470:	10800404 	addi	r2,r2,16
81124474:	28c00044 	addi	r3,r5,1
81124478:	45c00015 	stw	r23,0(r8)
8112447c:	41c00115 	stw	r7,4(r8)
81124480:	d8801c15 	stw	r2,112(sp)
81124484:	d8c01b15 	stw	r3,108(sp)
81124488:	68fff40e 	bge	r13,r3,8112445c <__reset+0xfb10445c>
8112448c:	1000101e 	bne	r2,zero,811244d0 <___vfiprintf_internal_r+0xca4>
81124490:	e73ffc04 	addi	fp,fp,-16
81124494:	01000044 	movi	r4,1
81124498:	000b883a 	mov	r5,zero
8112449c:	d811883a 	mov	r8,sp
811244a0:	3f3ff316 	blt	r7,fp,81124470 <__reset+0xfb104470>
811244a4:	da802417 	ldw	r10,144(sp)
811244a8:	1705883a 	add	r2,r2,fp
811244ac:	47000115 	stw	fp,4(r8)
811244b0:	42800015 	stw	r10,0(r8)
811244b4:	d8801c15 	stw	r2,112(sp)
811244b8:	d9001b15 	stw	r4,108(sp)
811244bc:	00c001c4 	movi	r3,7
811244c0:	19003616 	blt	r3,r4,8112459c <___vfiprintf_internal_r+0xd70>
811244c4:	42000204 	addi	r8,r8,8
811244c8:	21000044 	addi	r4,r4,1
811244cc:	003e5706 	br	81123e2c <__reset+0xfb103e2c>
811244d0:	d9402117 	ldw	r5,132(sp)
811244d4:	d9002017 	ldw	r4,128(sp)
811244d8:	d9801a04 	addi	r6,sp,104
811244dc:	d9c02b15 	stw	r7,172(sp)
811244e0:	db402a15 	stw	r13,168(sp)
811244e4:	11237100 	call	81123710 <__sprint_r.part.0>
811244e8:	d9c02b17 	ldw	r7,172(sp)
811244ec:	db402a17 	ldw	r13,168(sp)
811244f0:	1000241e 	bne	r2,zero,81124584 <___vfiprintf_internal_r+0xd58>
811244f4:	d9401b17 	ldw	r5,108(sp)
811244f8:	d8801c17 	ldw	r2,112(sp)
811244fc:	d811883a 	mov	r8,sp
81124500:	29000044 	addi	r4,r5,1
81124504:	003fd806 	br	81124468 <__reset+0xfb104468>
81124508:	d9401b17 	ldw	r5,108(sp)
8112450c:	00e04534 	movhi	r3,33044
81124510:	18c81d04 	addi	r3,r3,8308
81124514:	d8c02415 	stw	r3,144(sp)
81124518:	29400044 	addi	r5,r5,1
8112451c:	d8c02417 	ldw	r3,144(sp)
81124520:	14c5883a 	add	r2,r2,r19
81124524:	44c00115 	stw	r19,4(r8)
81124528:	40c00015 	stw	r3,0(r8)
8112452c:	d8801c15 	stw	r2,112(sp)
81124530:	d9401b15 	stw	r5,108(sp)
81124534:	00c001c4 	movi	r3,7
81124538:	1940070e 	bge	r3,r5,81124558 <___vfiprintf_internal_r+0xd2c>
8112453c:	103e4826 	beq	r2,zero,81123e60 <__reset+0xfb103e60>
81124540:	d9402117 	ldw	r5,132(sp)
81124544:	d9002017 	ldw	r4,128(sp)
81124548:	d9801a04 	addi	r6,sp,104
8112454c:	11237100 	call	81123710 <__sprint_r.part.0>
81124550:	10000c1e 	bne	r2,zero,81124584 <___vfiprintf_internal_r+0xd58>
81124554:	d8801c17 	ldw	r2,112(sp)
81124558:	8c80010e 	bge	r17,r18,81124560 <___vfiprintf_internal_r+0xd34>
8112455c:	9023883a 	mov	r17,r18
81124560:	da802317 	ldw	r10,140(sp)
81124564:	5455883a 	add	r10,r10,r17
81124568:	da802315 	stw	r10,140(sp)
8112456c:	103e4126 	beq	r2,zero,81123e74 <__reset+0xfb103e74>
81124570:	d9402117 	ldw	r5,132(sp)
81124574:	d9002017 	ldw	r4,128(sp)
81124578:	d9801a04 	addi	r6,sp,104
8112457c:	11237100 	call	81123710 <__sprint_r.part.0>
81124580:	103e3c26 	beq	r2,zero,81123e74 <__reset+0xfb103e74>
81124584:	dd002117 	ldw	r20,132(sp)
81124588:	a080030b 	ldhu	r2,12(r20)
8112458c:	1080100c 	andi	r2,r2,64
81124590:	1001231e 	bne	r2,zero,81124a20 <___vfiprintf_internal_r+0x11f4>
81124594:	d8802317 	ldw	r2,140(sp)
81124598:	003d7b06 	br	81123b88 <__reset+0xfb103b88>
8112459c:	1000991e 	bne	r2,zero,81124804 <___vfiprintf_internal_r+0xfd8>
811245a0:	00c00044 	movi	r3,1
811245a4:	9805883a 	mov	r2,r19
811245a8:	dd400015 	stw	r21,0(sp)
811245ac:	dcc00115 	stw	r19,4(sp)
811245b0:	dcc01c15 	stw	r19,112(sp)
811245b4:	d8c01b15 	stw	r3,108(sp)
811245b8:	d811883a 	mov	r8,sp
811245bc:	42000204 	addi	r8,r8,8
811245c0:	a2c0010c 	andi	r11,r20,4
811245c4:	583fe426 	beq	r11,zero,81124558 <__reset+0xfb104558>
811245c8:	8ca7c83a 	sub	r19,r17,r18
811245cc:	04ffe20e 	bge	zero,r19,81124558 <__reset+0xfb104558>
811245d0:	01c00404 	movi	r7,16
811245d4:	3cffcc0e 	bge	r7,r19,81124508 <__reset+0xfb104508>
811245d8:	02a04534 	movhi	r10,33044
811245dc:	52881d04 	addi	r10,r10,8308
811245e0:	d9001b17 	ldw	r4,108(sp)
811245e4:	da802415 	stw	r10,144(sp)
811245e8:	382b883a 	mov	r21,r7
811245ec:	050001c4 	movi	r20,7
811245f0:	df002017 	ldw	fp,128(sp)
811245f4:	00000506 	br	8112460c <___vfiprintf_internal_r+0xde0>
811245f8:	21400084 	addi	r5,r4,2
811245fc:	42000204 	addi	r8,r8,8
81124600:	1809883a 	mov	r4,r3
81124604:	9cfffc04 	addi	r19,r19,-16
81124608:	acffc40e 	bge	r21,r19,8112451c <__reset+0xfb10451c>
8112460c:	10800404 	addi	r2,r2,16
81124610:	20c00044 	addi	r3,r4,1
81124614:	45800015 	stw	r22,0(r8)
81124618:	45400115 	stw	r21,4(r8)
8112461c:	d8801c15 	stw	r2,112(sp)
81124620:	d8c01b15 	stw	r3,108(sp)
81124624:	a0fff40e 	bge	r20,r3,811245f8 <__reset+0xfb1045f8>
81124628:	1000041e 	bne	r2,zero,8112463c <___vfiprintf_internal_r+0xe10>
8112462c:	01400044 	movi	r5,1
81124630:	0009883a 	mov	r4,zero
81124634:	d811883a 	mov	r8,sp
81124638:	003ff206 	br	81124604 <__reset+0xfb104604>
8112463c:	d9402117 	ldw	r5,132(sp)
81124640:	d9801a04 	addi	r6,sp,104
81124644:	e009883a 	mov	r4,fp
81124648:	11237100 	call	81123710 <__sprint_r.part.0>
8112464c:	103fcd1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124650:	d9001b17 	ldw	r4,108(sp)
81124654:	d8801c17 	ldw	r2,112(sp)
81124658:	d811883a 	mov	r8,sp
8112465c:	21400044 	addi	r5,r4,1
81124660:	003fe806 	br	81124604 <__reset+0xfb104604>
81124664:	d9402117 	ldw	r5,132(sp)
81124668:	d9002017 	ldw	r4,128(sp)
8112466c:	d9801a04 	addi	r6,sp,104
81124670:	d9c02b15 	stw	r7,172(sp)
81124674:	db402a15 	stw	r13,168(sp)
81124678:	11237100 	call	81123710 <__sprint_r.part.0>
8112467c:	d9c02b17 	ldw	r7,172(sp)
81124680:	db402a17 	ldw	r13,168(sp)
81124684:	103fbf1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124688:	d9401b17 	ldw	r5,108(sp)
8112468c:	d8801c17 	ldw	r2,112(sp)
81124690:	d811883a 	mov	r8,sp
81124694:	29800044 	addi	r6,r5,1
81124698:	003dc406 	br	81123dac <__reset+0xfb103dac>
8112469c:	1000d21e 	bne	r2,zero,811249e8 <___vfiprintf_internal_r+0x11bc>
811246a0:	d8c01d87 	ldb	r3,118(sp)
811246a4:	18009526 	beq	r3,zero,811248fc <___vfiprintf_internal_r+0x10d0>
811246a8:	00800044 	movi	r2,1
811246ac:	d8c01d84 	addi	r3,sp,118
811246b0:	1009883a 	mov	r4,r2
811246b4:	d8c00015 	stw	r3,0(sp)
811246b8:	d8800115 	stw	r2,4(sp)
811246bc:	d811883a 	mov	r8,sp
811246c0:	200b883a 	mov	r5,r4
811246c4:	42000204 	addi	r8,r8,8
811246c8:	21000044 	addi	r4,r4,1
811246cc:	003d9706 	br	81123d2c <__reset+0xfb103d2c>
811246d0:	d9001d04 	addi	r4,sp,116
811246d4:	00800084 	movi	r2,2
811246d8:	d9000015 	stw	r4,0(sp)
811246dc:	d8800115 	stw	r2,4(sp)
811246e0:	1809883a 	mov	r4,r3
811246e4:	d811883a 	mov	r8,sp
811246e8:	200b883a 	mov	r5,r4
811246ec:	42000204 	addi	r8,r8,8
811246f0:	21000044 	addi	r4,r4,1
811246f4:	003f4e06 	br	81124430 <__reset+0xfb104430>
811246f8:	d8001d85 	stb	zero,118(sp)
811246fc:	48005016 	blt	r9,zero,81124840 <___vfiprintf_internal_r+0x1014>
81124700:	00ffdfc4 	movi	r3,-129
81124704:	94c4b03a 	or	r2,r18,r19
81124708:	a0e8703a 	and	r20,r20,r3
8112470c:	103d4426 	beq	r2,zero,81123c20 <__reset+0xfb103c20>
81124710:	0039883a 	mov	fp,zero
81124714:	d9002617 	ldw	r4,152(sp)
81124718:	dd401a04 	addi	r21,sp,104
8112471c:	908003cc 	andi	r2,r18,15
81124720:	9806973a 	slli	r3,r19,28
81124724:	2085883a 	add	r2,r4,r2
81124728:	9024d13a 	srli	r18,r18,4
8112472c:	10800003 	ldbu	r2,0(r2)
81124730:	9826d13a 	srli	r19,r19,4
81124734:	ad7fffc4 	addi	r21,r21,-1
81124738:	1ca4b03a 	or	r18,r3,r18
8112473c:	a8800005 	stb	r2,0(r21)
81124740:	94c4b03a 	or	r2,r18,r19
81124744:	103ff51e 	bne	r2,zero,8112471c <__reset+0xfb10471c>
81124748:	003e5906 	br	811240b0 <__reset+0xfb1040b0>
8112474c:	d9402117 	ldw	r5,132(sp)
81124750:	d9002017 	ldw	r4,128(sp)
81124754:	d9801a04 	addi	r6,sp,104
81124758:	11237100 	call	81123710 <__sprint_r.part.0>
8112475c:	103f891e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124760:	d8801c17 	ldw	r2,112(sp)
81124764:	d811883a 	mov	r8,sp
81124768:	003f9506 	br	811245c0 <__reset+0xfb1045c0>
8112476c:	d9402117 	ldw	r5,132(sp)
81124770:	d9002017 	ldw	r4,128(sp)
81124774:	d9801a04 	addi	r6,sp,104
81124778:	11237100 	call	81123710 <__sprint_r.part.0>
8112477c:	103f811e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124780:	d811883a 	mov	r8,sp
81124784:	003ced06 	br	81123b3c <__reset+0xfb103b3c>
81124788:	d9402117 	ldw	r5,132(sp)
8112478c:	d9002017 	ldw	r4,128(sp)
81124790:	d9801a04 	addi	r6,sp,104
81124794:	da402c15 	stw	r9,176(sp)
81124798:	db802a15 	stw	r14,168(sp)
8112479c:	11237100 	call	81123710 <__sprint_r.part.0>
811247a0:	da402c17 	ldw	r9,176(sp)
811247a4:	db802a17 	ldw	r14,168(sp)
811247a8:	103f761e 	bne	r2,zero,81124584 <__reset+0xfb104584>
811247ac:	d9401b17 	ldw	r5,108(sp)
811247b0:	d8801c17 	ldw	r2,112(sp)
811247b4:	d811883a 	mov	r8,sp
811247b8:	29000044 	addi	r4,r5,1
811247bc:	003d5b06 	br	81123d2c <__reset+0xfb103d2c>
811247c0:	d9402117 	ldw	r5,132(sp)
811247c4:	d9002017 	ldw	r4,128(sp)
811247c8:	d9801a04 	addi	r6,sp,104
811247cc:	da402c15 	stw	r9,176(sp)
811247d0:	11237100 	call	81123710 <__sprint_r.part.0>
811247d4:	da402c17 	ldw	r9,176(sp)
811247d8:	103f6a1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
811247dc:	d9401b17 	ldw	r5,108(sp)
811247e0:	d8801c17 	ldw	r2,112(sp)
811247e4:	d811883a 	mov	r8,sp
811247e8:	29000044 	addi	r4,r5,1
811247ec:	003f1006 	br	81124430 <__reset+0xfb104430>
811247f0:	1000c31e 	bne	r2,zero,81124b00 <___vfiprintf_internal_r+0x12d4>
811247f4:	01000044 	movi	r4,1
811247f8:	000b883a 	mov	r5,zero
811247fc:	d811883a 	mov	r8,sp
81124800:	003f0d06 	br	81124438 <__reset+0xfb104438>
81124804:	d9402117 	ldw	r5,132(sp)
81124808:	d9002017 	ldw	r4,128(sp)
8112480c:	d9801a04 	addi	r6,sp,104
81124810:	11237100 	call	81123710 <__sprint_r.part.0>
81124814:	103f5b1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124818:	d9001b17 	ldw	r4,108(sp)
8112481c:	d8801c17 	ldw	r2,112(sp)
81124820:	d811883a 	mov	r8,sp
81124824:	21000044 	addi	r4,r4,1
81124828:	003d8006 	br	81123e2c <__reset+0xfb103e2c>
8112482c:	01204534 	movhi	r4,33044
81124830:	21078704 	addi	r4,r4,7708
81124834:	d9002615 	stw	r4,152(sp)
81124838:	d8c02215 	stw	r3,136(sp)
8112483c:	1029883a 	mov	r20,r2
81124840:	94c4b03a 	or	r2,r18,r19
81124844:	103fb21e 	bne	r2,zero,81124710 <__reset+0xfb104710>
81124848:	0039883a 	mov	fp,zero
8112484c:	00800084 	movi	r2,2
81124850:	003e6b06 	br	81124200 <__reset+0xfb104200>
81124854:	da802217 	ldw	r10,136(sp)
81124858:	d8001d85 	stb	zero,118(sp)
8112485c:	0027883a 	mov	r19,zero
81124860:	50800104 	addi	r2,r10,4
81124864:	54800017 	ldw	r18,0(r10)
81124868:	483e6016 	blt	r9,zero,811241ec <__reset+0xfb1041ec>
8112486c:	00ffdfc4 	movi	r3,-129
81124870:	d8802215 	stw	r2,136(sp)
81124874:	a0e8703a 	and	r20,r20,r3
81124878:	0039883a 	mov	fp,zero
8112487c:	903ebb26 	beq	r18,zero,8112436c <__reset+0xfb10436c>
81124880:	00800244 	movi	r2,9
81124884:	14bdee36 	bltu	r2,r18,81124040 <__reset+0xfb104040>
81124888:	003eba06 	br	81124374 <__reset+0xfb104374>
8112488c:	00800c04 	movi	r2,48
81124890:	d8c01d45 	stb	r3,117(sp)
81124894:	d8801d05 	stb	r2,116(sp)
81124898:	d8001d85 	stb	zero,118(sp)
8112489c:	a0c00094 	ori	r3,r20,2
811248a0:	4800a916 	blt	r9,zero,81124b48 <___vfiprintf_internal_r+0x131c>
811248a4:	00bfdfc4 	movi	r2,-129
811248a8:	a096703a 	and	r11,r20,r2
811248ac:	5d000094 	ori	r20,r11,2
811248b0:	0039883a 	mov	fp,zero
811248b4:	003f9706 	br	81124714 <__reset+0xfb104714>
811248b8:	8025883a 	mov	r18,r16
811248bc:	003c2e06 	br	81123978 <__reset+0xfb103978>
811248c0:	00a04534 	movhi	r2,33044
811248c4:	10878704 	addi	r2,r2,7708
811248c8:	0039883a 	mov	fp,zero
811248cc:	d8802615 	stw	r2,152(sp)
811248d0:	003f9006 	br	81124714 <__reset+0xfb104714>
811248d4:	04a5c83a 	sub	r18,zero,r18
811248d8:	07000b44 	movi	fp,45
811248dc:	9004c03a 	cmpne	r2,r18,zero
811248e0:	04e7c83a 	sub	r19,zero,r19
811248e4:	df001d85 	stb	fp,118(sp)
811248e8:	98a7c83a 	sub	r19,r19,r2
811248ec:	48009f16 	blt	r9,zero,81124b6c <___vfiprintf_internal_r+0x1340>
811248f0:	00bfdfc4 	movi	r2,-129
811248f4:	a0a8703a 	and	r20,r20,r2
811248f8:	003dd006 	br	8112403c <__reset+0xfb10403c>
811248fc:	70004c26 	beq	r14,zero,81124a30 <___vfiprintf_internal_r+0x1204>
81124900:	00800084 	movi	r2,2
81124904:	d8c01d04 	addi	r3,sp,116
81124908:	d8c00015 	stw	r3,0(sp)
8112490c:	d8800115 	stw	r2,4(sp)
81124910:	01000044 	movi	r4,1
81124914:	d811883a 	mov	r8,sp
81124918:	003f7306 	br	811246e8 <__reset+0xfb1046e8>
8112491c:	a080100c 	andi	r2,r20,64
81124920:	da802217 	ldw	r10,136(sp)
81124924:	103e0626 	beq	r2,zero,81124140 <__reset+0xfb104140>
81124928:	5480000f 	ldh	r18,0(r10)
8112492c:	52800104 	addi	r10,r10,4
81124930:	da802215 	stw	r10,136(sp)
81124934:	9027d7fa 	srai	r19,r18,31
81124938:	9805883a 	mov	r2,r19
8112493c:	003db806 	br	81124020 <__reset+0xfb104020>
81124940:	a080040c 	andi	r2,r20,16
81124944:	1000091e 	bne	r2,zero,8112496c <___vfiprintf_internal_r+0x1140>
81124948:	a2c0100c 	andi	r11,r20,64
8112494c:	58000726 	beq	r11,zero,8112496c <___vfiprintf_internal_r+0x1140>
81124950:	da802217 	ldw	r10,136(sp)
81124954:	50800017 	ldw	r2,0(r10)
81124958:	52800104 	addi	r10,r10,4
8112495c:	da802215 	stw	r10,136(sp)
81124960:	da802317 	ldw	r10,140(sp)
81124964:	1280000d 	sth	r10,0(r2)
81124968:	003be706 	br	81123908 <__reset+0xfb103908>
8112496c:	da802217 	ldw	r10,136(sp)
81124970:	50800017 	ldw	r2,0(r10)
81124974:	52800104 	addi	r10,r10,4
81124978:	da802215 	stw	r10,136(sp)
8112497c:	da802317 	ldw	r10,140(sp)
81124980:	12800015 	stw	r10,0(r2)
81124984:	003be006 	br	81123908 <__reset+0xfb103908>
81124988:	a080100c 	andi	r2,r20,64
8112498c:	da802217 	ldw	r10,136(sp)
81124990:	10003026 	beq	r2,zero,81124a54 <___vfiprintf_internal_r+0x1228>
81124994:	5480000b 	ldhu	r18,0(r10)
81124998:	52800104 	addi	r10,r10,4
8112499c:	0027883a 	mov	r19,zero
811249a0:	da802215 	stw	r10,136(sp)
811249a4:	003d8006 	br	81123fa8 <__reset+0xfb103fa8>
811249a8:	80c00007 	ldb	r3,0(r16)
811249ac:	003c0006 	br	811239b0 <__reset+0xfb1039b0>
811249b0:	a080100c 	andi	r2,r20,64
811249b4:	d8001d85 	stb	zero,118(sp)
811249b8:	da802217 	ldw	r10,136(sp)
811249bc:	1000201e 	bne	r2,zero,81124a40 <___vfiprintf_internal_r+0x1214>
811249c0:	50800104 	addi	r2,r10,4
811249c4:	54800017 	ldw	r18,0(r10)
811249c8:	0027883a 	mov	r19,zero
811249cc:	483def0e 	bge	r9,zero,8112418c <__reset+0xfb10418c>
811249d0:	94c6b03a 	or	r3,r18,r19
811249d4:	d8802215 	stw	r2,136(sp)
811249d8:	183d4e1e 	bne	r3,zero,81123f14 <__reset+0xfb103f14>
811249dc:	0039883a 	mov	fp,zero
811249e0:	0005883a 	mov	r2,zero
811249e4:	003e0606 	br	81124200 <__reset+0xfb104200>
811249e8:	d9402117 	ldw	r5,132(sp)
811249ec:	d9002017 	ldw	r4,128(sp)
811249f0:	d9801a04 	addi	r6,sp,104
811249f4:	da402c15 	stw	r9,176(sp)
811249f8:	db802a15 	stw	r14,168(sp)
811249fc:	11237100 	call	81123710 <__sprint_r.part.0>
81124a00:	da402c17 	ldw	r9,176(sp)
81124a04:	db802a17 	ldw	r14,168(sp)
81124a08:	103ede1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124a0c:	d9401b17 	ldw	r5,108(sp)
81124a10:	d8801c17 	ldw	r2,112(sp)
81124a14:	d811883a 	mov	r8,sp
81124a18:	29000044 	addi	r4,r5,1
81124a1c:	003e7406 	br	811243f0 <__reset+0xfb1043f0>
81124a20:	00bfffc4 	movi	r2,-1
81124a24:	003c5806 	br	81123b88 <__reset+0xfb103b88>
81124a28:	d811883a 	mov	r8,sp
81124a2c:	003ee806 	br	811245d0 <__reset+0xfb1045d0>
81124a30:	000b883a 	mov	r5,zero
81124a34:	01000044 	movi	r4,1
81124a38:	d811883a 	mov	r8,sp
81124a3c:	003e7c06 	br	81124430 <__reset+0xfb104430>
81124a40:	50800104 	addi	r2,r10,4
81124a44:	5480000b 	ldhu	r18,0(r10)
81124a48:	0027883a 	mov	r19,zero
81124a4c:	483dcf0e 	bge	r9,zero,8112418c <__reset+0xfb10418c>
81124a50:	003fdf06 	br	811249d0 <__reset+0xfb1049d0>
81124a54:	54800017 	ldw	r18,0(r10)
81124a58:	52800104 	addi	r10,r10,4
81124a5c:	0027883a 	mov	r19,zero
81124a60:	da802215 	stw	r10,136(sp)
81124a64:	003d5006 	br	81123fa8 <__reset+0xfb103fa8>
81124a68:	50800104 	addi	r2,r10,4
81124a6c:	5480000b 	ldhu	r18,0(r10)
81124a70:	0027883a 	mov	r19,zero
81124a74:	483f7d0e 	bge	r9,zero,8112486c <__reset+0xfb10486c>
81124a78:	003ddc06 	br	811241ec <__reset+0xfb1041ec>
81124a7c:	d8c02215 	stw	r3,136(sp)
81124a80:	0039883a 	mov	fp,zero
81124a84:	003ddb06 	br	811241f4 <__reset+0xfb1041f4>
81124a88:	02a04534 	movhi	r10,33044
81124a8c:	52881904 	addi	r10,r10,8292
81124a90:	da802415 	stw	r10,144(sp)
81124a94:	003e8306 	br	811244a4 <__reset+0xfb1044a4>
81124a98:	d8801c17 	ldw	r2,112(sp)
81124a9c:	dd002117 	ldw	r20,132(sp)
81124aa0:	103eb926 	beq	r2,zero,81124588 <__reset+0xfb104588>
81124aa4:	d9002017 	ldw	r4,128(sp)
81124aa8:	d9801a04 	addi	r6,sp,104
81124aac:	a00b883a 	mov	r5,r20
81124ab0:	11237100 	call	81123710 <__sprint_r.part.0>
81124ab4:	003eb406 	br	81124588 <__reset+0xfb104588>
81124ab8:	80c00043 	ldbu	r3,1(r16)
81124abc:	a5000814 	ori	r20,r20,32
81124ac0:	84000044 	addi	r16,r16,1
81124ac4:	18c03fcc 	andi	r3,r3,255
81124ac8:	18c0201c 	xori	r3,r3,128
81124acc:	18ffe004 	addi	r3,r3,-128
81124ad0:	003bb706 	br	811239b0 <__reset+0xfb1039b0>
81124ad4:	a809883a 	mov	r4,r21
81124ad8:	d8c02a15 	stw	r3,168(sp)
81124adc:	da002b15 	stw	r8,172(sp)
81124ae0:	111510c0 	call	8111510c <strlen>
81124ae4:	d8c02a17 	ldw	r3,168(sp)
81124ae8:	1027883a 	mov	r19,r2
81124aec:	df001d83 	ldbu	fp,118(sp)
81124af0:	d8c02215 	stw	r3,136(sp)
81124af4:	0013883a 	mov	r9,zero
81124af8:	da002b17 	ldw	r8,172(sp)
81124afc:	003c4d06 	br	81123c34 <__reset+0xfb103c34>
81124b00:	d9402117 	ldw	r5,132(sp)
81124b04:	d9002017 	ldw	r4,128(sp)
81124b08:	d9801a04 	addi	r6,sp,104
81124b0c:	da402c15 	stw	r9,176(sp)
81124b10:	11237100 	call	81123710 <__sprint_r.part.0>
81124b14:	da402c17 	ldw	r9,176(sp)
81124b18:	103e9a1e 	bne	r2,zero,81124584 <__reset+0xfb104584>
81124b1c:	d9401b17 	ldw	r5,108(sp)
81124b20:	d8801c17 	ldw	r2,112(sp)
81124b24:	d811883a 	mov	r8,sp
81124b28:	29000044 	addi	r4,r5,1
81124b2c:	003e4206 	br	81124438 <__reset+0xfb104438>
81124b30:	d9401b17 	ldw	r5,108(sp)
81124b34:	01204534 	movhi	r4,33044
81124b38:	21081d04 	addi	r4,r4,8308
81124b3c:	d9002415 	stw	r4,144(sp)
81124b40:	29400044 	addi	r5,r5,1
81124b44:	003c6d06 	br	81123cfc <__reset+0xfb103cfc>
81124b48:	0039883a 	mov	fp,zero
81124b4c:	00800084 	movi	r2,2
81124b50:	10803fcc 	andi	r2,r2,255
81124b54:	01000044 	movi	r4,1
81124b58:	11001e26 	beq	r2,r4,81124bd4 <___vfiprintf_internal_r+0x13a8>
81124b5c:	01000084 	movi	r4,2
81124b60:	11001e1e 	bne	r2,r4,81124bdc <___vfiprintf_internal_r+0x13b0>
81124b64:	1829883a 	mov	r20,r3
81124b68:	003eea06 	br	81124714 <__reset+0xfb104714>
81124b6c:	a007883a 	mov	r3,r20
81124b70:	00800044 	movi	r2,1
81124b74:	003ff606 	br	81124b50 <__reset+0xfb104b50>
81124b78:	00800184 	movi	r2,6
81124b7c:	1240012e 	bgeu	r2,r9,81124b84 <___vfiprintf_internal_r+0x1358>
81124b80:	1013883a 	mov	r9,r2
81124b84:	4827883a 	mov	r19,r9
81124b88:	4825883a 	mov	r18,r9
81124b8c:	48001516 	blt	r9,zero,81124be4 <___vfiprintf_internal_r+0x13b8>
81124b90:	05604534 	movhi	r21,33044
81124b94:	d8c02215 	stw	r3,136(sp)
81124b98:	ad478c04 	addi	r21,r21,7728
81124b9c:	003d1406 	br	81123ff0 <__reset+0xfb103ff0>
81124ba0:	02a04534 	movhi	r10,33044
81124ba4:	52881904 	addi	r10,r10,8292
81124ba8:	da802415 	stw	r10,144(sp)
81124bac:	200d883a 	mov	r6,r4
81124bb0:	003c9106 	br	81123df8 <__reset+0xfb103df8>
81124bb4:	5021883a 	mov	r16,r10
81124bb8:	0013883a 	mov	r9,zero
81124bbc:	003b7d06 	br	811239b4 <__reset+0xfb1039b4>
81124bc0:	4827883a 	mov	r19,r9
81124bc4:	df001d83 	ldbu	fp,118(sp)
81124bc8:	d8c02215 	stw	r3,136(sp)
81124bcc:	0013883a 	mov	r9,zero
81124bd0:	003c1806 	br	81123c34 <__reset+0xfb103c34>
81124bd4:	1829883a 	mov	r20,r3
81124bd8:	003d1806 	br	8112403c <__reset+0xfb10403c>
81124bdc:	1829883a 	mov	r20,r3
81124be0:	003ccd06 	br	81123f18 <__reset+0xfb103f18>
81124be4:	0025883a 	mov	r18,zero
81124be8:	003fe906 	br	81124b90 <__reset+0xfb104b90>
81124bec:	d8802217 	ldw	r2,136(sp)
81124bf0:	80c00043 	ldbu	r3,1(r16)
81124bf4:	5021883a 	mov	r16,r10
81124bf8:	12400017 	ldw	r9,0(r2)
81124bfc:	10800104 	addi	r2,r2,4
81124c00:	d8802215 	stw	r2,136(sp)
81124c04:	483faf0e 	bge	r9,zero,81124ac4 <__reset+0xfb104ac4>
81124c08:	18c03fcc 	andi	r3,r3,255
81124c0c:	18c0201c 	xori	r3,r3,128
81124c10:	027fffc4 	movi	r9,-1
81124c14:	18ffe004 	addi	r3,r3,-128
81124c18:	003b6506 	br	811239b0 <__reset+0xfb1039b0>
81124c1c:	d9c01d85 	stb	r7,118(sp)
81124c20:	003ca006 	br	81123ea4 <__reset+0xfb103ea4>
81124c24:	d9c01d85 	stb	r7,118(sp)
81124c28:	003cad06 	br	81123ee0 <__reset+0xfb103ee0>
81124c2c:	d9c01d85 	stb	r7,118(sp)
81124c30:	003d7d06 	br	81124228 <__reset+0xfb104228>
81124c34:	d9c01d85 	stb	r7,118(sp)
81124c38:	003d5f06 	br	811241b8 <__reset+0xfb1041b8>
81124c3c:	a080004c 	andi	r2,r20,1
81124c40:	0039883a 	mov	fp,zero
81124c44:	10000526 	beq	r2,zero,81124c5c <___vfiprintf_internal_r+0x1430>
81124c48:	00800c04 	movi	r2,48
81124c4c:	d88019c5 	stb	r2,103(sp)
81124c50:	dcc02717 	ldw	r19,156(sp)
81124c54:	dd4019c4 	addi	r21,sp,103
81124c58:	003bf606 	br	81123c34 <__reset+0xfb103c34>
81124c5c:	0027883a 	mov	r19,zero
81124c60:	dd401a04 	addi	r21,sp,104
81124c64:	003bf306 	br	81123c34 <__reset+0xfb103c34>
81124c68:	d9c01d85 	stb	r7,118(sp)
81124c6c:	003dc806 	br	81124390 <__reset+0xfb104390>
81124c70:	d9c01d85 	stb	r7,118(sp)
81124c74:	003d3a06 	br	81124160 <__reset+0xfb104160>
81124c78:	d9c01d85 	stb	r7,118(sp)
81124c7c:	003d2a06 	br	81124128 <__reset+0xfb104128>
81124c80:	d9c01d85 	stb	r7,118(sp)
81124c84:	003cde06 	br	81124000 <__reset+0xfb104000>
81124c88:	d9c01d85 	stb	r7,118(sp)
81124c8c:	003cbc06 	br	81123f80 <__reset+0xfb103f80>

81124c90 <__vfiprintf_internal>:
81124c90:	00a04534 	movhi	r2,33044
81124c94:	10916904 	addi	r2,r2,17828
81124c98:	300f883a 	mov	r7,r6
81124c9c:	280d883a 	mov	r6,r5
81124ca0:	200b883a 	mov	r5,r4
81124ca4:	11000017 	ldw	r4,0(r2)
81124ca8:	112382c1 	jmpi	8112382c <___vfiprintf_internal_r>

81124cac <__sbprintf>:
81124cac:	defee204 	addi	sp,sp,-1144
81124cb0:	de00012e 	bgeu	sp,et,81124cb8 <__sbprintf+0xc>
81124cb4:	003b68fa 	trap	3
81124cb8:	2880030b 	ldhu	r2,12(r5)
81124cbc:	2ac01917 	ldw	r11,100(r5)
81124cc0:	2a80038b 	ldhu	r10,14(r5)
81124cc4:	2a400717 	ldw	r9,28(r5)
81124cc8:	2a000917 	ldw	r8,36(r5)
81124ccc:	00c10004 	movi	r3,1024
81124cd0:	dc011a15 	stw	r16,1128(sp)
81124cd4:	10bfff4c 	andi	r2,r2,65533
81124cd8:	2821883a 	mov	r16,r5
81124cdc:	d8cb883a 	add	r5,sp,r3
81124ce0:	dc811c15 	stw	r18,1136(sp)
81124ce4:	dc411b15 	stw	r17,1132(sp)
81124ce8:	dfc11d15 	stw	ra,1140(sp)
81124cec:	2025883a 	mov	r18,r4
81124cf0:	d881030d 	sth	r2,1036(sp)
81124cf4:	dac11915 	stw	r11,1124(sp)
81124cf8:	da81038d 	sth	r10,1038(sp)
81124cfc:	da410715 	stw	r9,1052(sp)
81124d00:	da010915 	stw	r8,1060(sp)
81124d04:	dec10015 	stw	sp,1024(sp)
81124d08:	dec10415 	stw	sp,1040(sp)
81124d0c:	d8c10215 	stw	r3,1032(sp)
81124d10:	d8c10515 	stw	r3,1044(sp)
81124d14:	d8010615 	stw	zero,1048(sp)
81124d18:	112382c0 	call	8112382c <___vfiprintf_internal_r>
81124d1c:	1023883a 	mov	r17,r2
81124d20:	10000416 	blt	r2,zero,81124d34 <__sbprintf+0x88>
81124d24:	d9410004 	addi	r5,sp,1024
81124d28:	9009883a 	mov	r4,r18
81124d2c:	111cfe40 	call	8111cfe4 <_fflush_r>
81124d30:	10000d1e 	bne	r2,zero,81124d68 <__sbprintf+0xbc>
81124d34:	d881030b 	ldhu	r2,1036(sp)
81124d38:	1080100c 	andi	r2,r2,64
81124d3c:	10000326 	beq	r2,zero,81124d4c <__sbprintf+0xa0>
81124d40:	8080030b 	ldhu	r2,12(r16)
81124d44:	10801014 	ori	r2,r2,64
81124d48:	8080030d 	sth	r2,12(r16)
81124d4c:	8805883a 	mov	r2,r17
81124d50:	dfc11d17 	ldw	ra,1140(sp)
81124d54:	dc811c17 	ldw	r18,1136(sp)
81124d58:	dc411b17 	ldw	r17,1132(sp)
81124d5c:	dc011a17 	ldw	r16,1128(sp)
81124d60:	dec11e04 	addi	sp,sp,1144
81124d64:	f800283a 	ret
81124d68:	047fffc4 	movi	r17,-1
81124d6c:	003ff106 	br	81124d34 <__reset+0xfb104d34>

81124d70 <_calloc_r>:
81124d70:	298b383a 	mul	r5,r5,r6
81124d74:	defffe04 	addi	sp,sp,-8
81124d78:	de00012e 	bgeu	sp,et,81124d80 <_calloc_r+0x10>
81124d7c:	003b68fa 	trap	3
81124d80:	dfc00115 	stw	ra,4(sp)
81124d84:	dc000015 	stw	r16,0(sp)
81124d88:	1113de40 	call	81113de4 <_malloc_r>
81124d8c:	10002926 	beq	r2,zero,81124e34 <_calloc_r+0xc4>
81124d90:	11bfff17 	ldw	r6,-4(r2)
81124d94:	1021883a 	mov	r16,r2
81124d98:	00bfff04 	movi	r2,-4
81124d9c:	308c703a 	and	r6,r6,r2
81124da0:	00c00904 	movi	r3,36
81124da4:	308d883a 	add	r6,r6,r2
81124da8:	19801636 	bltu	r3,r6,81124e04 <_calloc_r+0x94>
81124dac:	008004c4 	movi	r2,19
81124db0:	11800b2e 	bgeu	r2,r6,81124de0 <_calloc_r+0x70>
81124db4:	80000015 	stw	zero,0(r16)
81124db8:	80000115 	stw	zero,4(r16)
81124dbc:	008006c4 	movi	r2,27
81124dc0:	11801a2e 	bgeu	r2,r6,81124e2c <_calloc_r+0xbc>
81124dc4:	80000215 	stw	zero,8(r16)
81124dc8:	80000315 	stw	zero,12(r16)
81124dcc:	30c0151e 	bne	r6,r3,81124e24 <_calloc_r+0xb4>
81124dd0:	80000415 	stw	zero,16(r16)
81124dd4:	80800604 	addi	r2,r16,24
81124dd8:	80000515 	stw	zero,20(r16)
81124ddc:	00000106 	br	81124de4 <_calloc_r+0x74>
81124de0:	8005883a 	mov	r2,r16
81124de4:	10000015 	stw	zero,0(r2)
81124de8:	10000115 	stw	zero,4(r2)
81124dec:	10000215 	stw	zero,8(r2)
81124df0:	8005883a 	mov	r2,r16
81124df4:	dfc00117 	ldw	ra,4(sp)
81124df8:	dc000017 	ldw	r16,0(sp)
81124dfc:	dec00204 	addi	sp,sp,8
81124e00:	f800283a 	ret
81124e04:	000b883a 	mov	r5,zero
81124e08:	8009883a 	mov	r4,r16
81124e0c:	11147480 	call	81114748 <memset>
81124e10:	8005883a 	mov	r2,r16
81124e14:	dfc00117 	ldw	ra,4(sp)
81124e18:	dc000017 	ldw	r16,0(sp)
81124e1c:	dec00204 	addi	sp,sp,8
81124e20:	f800283a 	ret
81124e24:	80800404 	addi	r2,r16,16
81124e28:	003fee06 	br	81124de4 <__reset+0xfb104de4>
81124e2c:	80800204 	addi	r2,r16,8
81124e30:	003fec06 	br	81124de4 <__reset+0xfb104de4>
81124e34:	0005883a 	mov	r2,zero
81124e38:	003fee06 	br	81124df4 <__reset+0xfb104df4>

81124e3c <_fclose_r>:
81124e3c:	28003b26 	beq	r5,zero,81124f2c <_fclose_r+0xf0>
81124e40:	defffc04 	addi	sp,sp,-16
81124e44:	de00012e 	bgeu	sp,et,81124e4c <_fclose_r+0x10>
81124e48:	003b68fa 	trap	3
81124e4c:	dc400115 	stw	r17,4(sp)
81124e50:	dc000015 	stw	r16,0(sp)
81124e54:	dfc00315 	stw	ra,12(sp)
81124e58:	dc800215 	stw	r18,8(sp)
81124e5c:	2023883a 	mov	r17,r4
81124e60:	2821883a 	mov	r16,r5
81124e64:	20000226 	beq	r4,zero,81124e70 <_fclose_r+0x34>
81124e68:	20800e17 	ldw	r2,56(r4)
81124e6c:	10002726 	beq	r2,zero,81124f0c <_fclose_r+0xd0>
81124e70:	8080030f 	ldh	r2,12(r16)
81124e74:	1000071e 	bne	r2,zero,81124e94 <_fclose_r+0x58>
81124e78:	0005883a 	mov	r2,zero
81124e7c:	dfc00317 	ldw	ra,12(sp)
81124e80:	dc800217 	ldw	r18,8(sp)
81124e84:	dc400117 	ldw	r17,4(sp)
81124e88:	dc000017 	ldw	r16,0(sp)
81124e8c:	dec00404 	addi	sp,sp,16
81124e90:	f800283a 	ret
81124e94:	800b883a 	mov	r5,r16
81124e98:	8809883a 	mov	r4,r17
81124e9c:	111cdc00 	call	8111cdc0 <__sflush_r>
81124ea0:	1025883a 	mov	r18,r2
81124ea4:	80800b17 	ldw	r2,44(r16)
81124ea8:	10000426 	beq	r2,zero,81124ebc <_fclose_r+0x80>
81124eac:	81400717 	ldw	r5,28(r16)
81124eb0:	8809883a 	mov	r4,r17
81124eb4:	103ee83a 	callr	r2
81124eb8:	10001616 	blt	r2,zero,81124f14 <_fclose_r+0xd8>
81124ebc:	8080030b 	ldhu	r2,12(r16)
81124ec0:	1080200c 	andi	r2,r2,128
81124ec4:	1000151e 	bne	r2,zero,81124f1c <_fclose_r+0xe0>
81124ec8:	81400c17 	ldw	r5,48(r16)
81124ecc:	28000526 	beq	r5,zero,81124ee4 <_fclose_r+0xa8>
81124ed0:	80801004 	addi	r2,r16,64
81124ed4:	28800226 	beq	r5,r2,81124ee0 <_fclose_r+0xa4>
81124ed8:	8809883a 	mov	r4,r17
81124edc:	111d8780 	call	8111d878 <_free_r>
81124ee0:	80000c15 	stw	zero,48(r16)
81124ee4:	81401117 	ldw	r5,68(r16)
81124ee8:	28000326 	beq	r5,zero,81124ef8 <_fclose_r+0xbc>
81124eec:	8809883a 	mov	r4,r17
81124ef0:	111d8780 	call	8111d878 <_free_r>
81124ef4:	80001115 	stw	zero,68(r16)
81124ef8:	111d3f00 	call	8111d3f0 <__sfp_lock_acquire>
81124efc:	8000030d 	sth	zero,12(r16)
81124f00:	111d3f40 	call	8111d3f4 <__sfp_lock_release>
81124f04:	9005883a 	mov	r2,r18
81124f08:	003fdc06 	br	81124e7c <__reset+0xfb104e7c>
81124f0c:	111d3e00 	call	8111d3e0 <__sinit>
81124f10:	003fd706 	br	81124e70 <__reset+0xfb104e70>
81124f14:	04bfffc4 	movi	r18,-1
81124f18:	003fe806 	br	81124ebc <__reset+0xfb104ebc>
81124f1c:	81400417 	ldw	r5,16(r16)
81124f20:	8809883a 	mov	r4,r17
81124f24:	111d8780 	call	8111d878 <_free_r>
81124f28:	003fe706 	br	81124ec8 <__reset+0xfb104ec8>
81124f2c:	0005883a 	mov	r2,zero
81124f30:	f800283a 	ret

81124f34 <fclose>:
81124f34:	00a04534 	movhi	r2,33044
81124f38:	10916904 	addi	r2,r2,17828
81124f3c:	200b883a 	mov	r5,r4
81124f40:	11000017 	ldw	r4,0(r2)
81124f44:	1124e3c1 	jmpi	81124e3c <_fclose_r>

81124f48 <__fputwc>:
81124f48:	defff804 	addi	sp,sp,-32
81124f4c:	de00012e 	bgeu	sp,et,81124f54 <__fputwc+0xc>
81124f50:	003b68fa 	trap	3
81124f54:	dcc00415 	stw	r19,16(sp)
81124f58:	dc800315 	stw	r18,12(sp)
81124f5c:	dc000115 	stw	r16,4(sp)
81124f60:	dfc00715 	stw	ra,28(sp)
81124f64:	dd400615 	stw	r21,24(sp)
81124f68:	dd000515 	stw	r20,20(sp)
81124f6c:	dc400215 	stw	r17,8(sp)
81124f70:	2027883a 	mov	r19,r4
81124f74:	2825883a 	mov	r18,r5
81124f78:	3021883a 	mov	r16,r6
81124f7c:	111e3080 	call	8111e308 <__locale_mb_cur_max>
81124f80:	00c00044 	movi	r3,1
81124f84:	10c03e26 	beq	r2,r3,81125080 <__fputwc+0x138>
81124f88:	81c01704 	addi	r7,r16,92
81124f8c:	900d883a 	mov	r6,r18
81124f90:	d80b883a 	mov	r5,sp
81124f94:	9809883a 	mov	r4,r19
81124f98:	1125dcc0 	call	81125dcc <_wcrtomb_r>
81124f9c:	1029883a 	mov	r20,r2
81124fa0:	00bfffc4 	movi	r2,-1
81124fa4:	a0802026 	beq	r20,r2,81125028 <__fputwc+0xe0>
81124fa8:	d9400003 	ldbu	r5,0(sp)
81124fac:	a0001c26 	beq	r20,zero,81125020 <__fputwc+0xd8>
81124fb0:	0023883a 	mov	r17,zero
81124fb4:	05400284 	movi	r21,10
81124fb8:	00000906 	br	81124fe0 <__fputwc+0x98>
81124fbc:	80800017 	ldw	r2,0(r16)
81124fc0:	11400005 	stb	r5,0(r2)
81124fc4:	80c00017 	ldw	r3,0(r16)
81124fc8:	18c00044 	addi	r3,r3,1
81124fcc:	80c00015 	stw	r3,0(r16)
81124fd0:	8c400044 	addi	r17,r17,1
81124fd4:	dc45883a 	add	r2,sp,r17
81124fd8:	8d00112e 	bgeu	r17,r20,81125020 <__fputwc+0xd8>
81124fdc:	11400003 	ldbu	r5,0(r2)
81124fe0:	80c00217 	ldw	r3,8(r16)
81124fe4:	18ffffc4 	addi	r3,r3,-1
81124fe8:	80c00215 	stw	r3,8(r16)
81124fec:	183ff30e 	bge	r3,zero,81124fbc <__reset+0xfb104fbc>
81124ff0:	80800617 	ldw	r2,24(r16)
81124ff4:	18801916 	blt	r3,r2,8112505c <__fputwc+0x114>
81124ff8:	80800017 	ldw	r2,0(r16)
81124ffc:	11400005 	stb	r5,0(r2)
81125000:	80800017 	ldw	r2,0(r16)
81125004:	10c00003 	ldbu	r3,0(r2)
81125008:	10800044 	addi	r2,r2,1
8112500c:	1d402326 	beq	r3,r21,8112509c <__fputwc+0x154>
81125010:	80800015 	stw	r2,0(r16)
81125014:	8c400044 	addi	r17,r17,1
81125018:	dc45883a 	add	r2,sp,r17
8112501c:	8d3fef36 	bltu	r17,r20,81124fdc <__reset+0xfb104fdc>
81125020:	9005883a 	mov	r2,r18
81125024:	00000406 	br	81125038 <__fputwc+0xf0>
81125028:	80c0030b 	ldhu	r3,12(r16)
8112502c:	a005883a 	mov	r2,r20
81125030:	18c01014 	ori	r3,r3,64
81125034:	80c0030d 	sth	r3,12(r16)
81125038:	dfc00717 	ldw	ra,28(sp)
8112503c:	dd400617 	ldw	r21,24(sp)
81125040:	dd000517 	ldw	r20,20(sp)
81125044:	dcc00417 	ldw	r19,16(sp)
81125048:	dc800317 	ldw	r18,12(sp)
8112504c:	dc400217 	ldw	r17,8(sp)
81125050:	dc000117 	ldw	r16,4(sp)
81125054:	dec00804 	addi	sp,sp,32
81125058:	f800283a 	ret
8112505c:	800d883a 	mov	r6,r16
81125060:	29403fcc 	andi	r5,r5,255
81125064:	9809883a 	mov	r4,r19
81125068:	111b1a80 	call	8111b1a8 <__swbuf_r>
8112506c:	10bfffe0 	cmpeqi	r2,r2,-1
81125070:	10803fcc 	andi	r2,r2,255
81125074:	103fd626 	beq	r2,zero,81124fd0 <__reset+0xfb104fd0>
81125078:	00bfffc4 	movi	r2,-1
8112507c:	003fee06 	br	81125038 <__reset+0xfb105038>
81125080:	90ffffc4 	addi	r3,r18,-1
81125084:	01003f84 	movi	r4,254
81125088:	20ffbf36 	bltu	r4,r3,81124f88 <__reset+0xfb104f88>
8112508c:	900b883a 	mov	r5,r18
81125090:	dc800005 	stb	r18,0(sp)
81125094:	1029883a 	mov	r20,r2
81125098:	003fc506 	br	81124fb0 <__reset+0xfb104fb0>
8112509c:	800d883a 	mov	r6,r16
811250a0:	a80b883a 	mov	r5,r21
811250a4:	9809883a 	mov	r4,r19
811250a8:	111b1a80 	call	8111b1a8 <__swbuf_r>
811250ac:	10bfffe0 	cmpeqi	r2,r2,-1
811250b0:	003fef06 	br	81125070 <__reset+0xfb105070>

811250b4 <_fputwc_r>:
811250b4:	3080030b 	ldhu	r2,12(r6)
811250b8:	10c8000c 	andi	r3,r2,8192
811250bc:	1800051e 	bne	r3,zero,811250d4 <_fputwc_r+0x20>
811250c0:	30c01917 	ldw	r3,100(r6)
811250c4:	10880014 	ori	r2,r2,8192
811250c8:	3080030d 	sth	r2,12(r6)
811250cc:	18880014 	ori	r2,r3,8192
811250d0:	30801915 	stw	r2,100(r6)
811250d4:	1124f481 	jmpi	81124f48 <__fputwc>

811250d8 <fputwc>:
811250d8:	00a04534 	movhi	r2,33044
811250dc:	defffc04 	addi	sp,sp,-16
811250e0:	10916904 	addi	r2,r2,17828
811250e4:	de00012e 	bgeu	sp,et,811250ec <fputwc+0x14>
811250e8:	003b68fa 	trap	3
811250ec:	dc000115 	stw	r16,4(sp)
811250f0:	14000017 	ldw	r16,0(r2)
811250f4:	dc400215 	stw	r17,8(sp)
811250f8:	dfc00315 	stw	ra,12(sp)
811250fc:	2023883a 	mov	r17,r4
81125100:	80000226 	beq	r16,zero,8112510c <fputwc+0x34>
81125104:	80800e17 	ldw	r2,56(r16)
81125108:	10001026 	beq	r2,zero,8112514c <fputwc+0x74>
8112510c:	2880030b 	ldhu	r2,12(r5)
81125110:	10c8000c 	andi	r3,r2,8192
81125114:	1800051e 	bne	r3,zero,8112512c <fputwc+0x54>
81125118:	28c01917 	ldw	r3,100(r5)
8112511c:	10880014 	ori	r2,r2,8192
81125120:	2880030d 	sth	r2,12(r5)
81125124:	18880014 	ori	r2,r3,8192
81125128:	28801915 	stw	r2,100(r5)
8112512c:	280d883a 	mov	r6,r5
81125130:	8009883a 	mov	r4,r16
81125134:	880b883a 	mov	r5,r17
81125138:	dfc00317 	ldw	ra,12(sp)
8112513c:	dc400217 	ldw	r17,8(sp)
81125140:	dc000117 	ldw	r16,4(sp)
81125144:	dec00404 	addi	sp,sp,16
81125148:	1124f481 	jmpi	81124f48 <__fputwc>
8112514c:	8009883a 	mov	r4,r16
81125150:	d9400015 	stw	r5,0(sp)
81125154:	111d3e00 	call	8111d3e0 <__sinit>
81125158:	d9400017 	ldw	r5,0(sp)
8112515c:	003feb06 	br	8112510c <__reset+0xfb10510c>

81125160 <rshift>:
81125160:	2807d17a 	srai	r3,r5,5
81125164:	20800417 	ldw	r2,16(r4)
81125168:	22000504 	addi	r8,r4,20
8112516c:	1880250e 	bge	r3,r2,81125204 <rshift+0xa4>
81125170:	1085883a 	add	r2,r2,r2
81125174:	18c7883a 	add	r3,r3,r3
81125178:	1085883a 	add	r2,r2,r2
8112517c:	18c7883a 	add	r3,r3,r3
81125180:	294007cc 	andi	r5,r5,31
81125184:	4085883a 	add	r2,r8,r2
81125188:	40c7883a 	add	r3,r8,r3
8112518c:	28002026 	beq	r5,zero,81125210 <rshift+0xb0>
81125190:	19800017 	ldw	r6,0(r3)
81125194:	02c00804 	movi	r11,32
81125198:	19c00104 	addi	r7,r3,4
8112519c:	5957c83a 	sub	r11,r11,r5
811251a0:	314cd83a 	srl	r6,r6,r5
811251a4:	38802c2e 	bgeu	r7,r2,81125258 <rshift+0xf8>
811251a8:	4015883a 	mov	r10,r8
811251ac:	3a400017 	ldw	r9,0(r7)
811251b0:	52800104 	addi	r10,r10,4
811251b4:	39c00104 	addi	r7,r7,4
811251b8:	4ad2983a 	sll	r9,r9,r11
811251bc:	498cb03a 	or	r6,r9,r6
811251c0:	51bfff15 	stw	r6,-4(r10)
811251c4:	39bfff17 	ldw	r6,-4(r7)
811251c8:	314cd83a 	srl	r6,r6,r5
811251cc:	38bff736 	bltu	r7,r2,811251ac <__reset+0xfb1051ac>
811251d0:	10c7c83a 	sub	r3,r2,r3
811251d4:	18fffec4 	addi	r3,r3,-5
811251d8:	1806d0ba 	srli	r3,r3,2
811251dc:	18c00044 	addi	r3,r3,1
811251e0:	18c7883a 	add	r3,r3,r3
811251e4:	18c7883a 	add	r3,r3,r3
811251e8:	40c7883a 	add	r3,r8,r3
811251ec:	19800015 	stw	r6,0(r3)
811251f0:	30000126 	beq	r6,zero,811251f8 <rshift+0x98>
811251f4:	18c00104 	addi	r3,r3,4
811251f8:	1a05c83a 	sub	r2,r3,r8
811251fc:	1005d0ba 	srai	r2,r2,2
81125200:	00001206 	br	8112524c <rshift+0xec>
81125204:	20000415 	stw	zero,16(r4)
81125208:	20000515 	stw	zero,20(r4)
8112520c:	f800283a 	ret
81125210:	18bffc2e 	bgeu	r3,r2,81125204 <__reset+0xfb105204>
81125214:	180d883a 	mov	r6,r3
81125218:	400b883a 	mov	r5,r8
8112521c:	31c00017 	ldw	r7,0(r6)
81125220:	29400104 	addi	r5,r5,4
81125224:	31800104 	addi	r6,r6,4
81125228:	29ffff15 	stw	r7,-4(r5)
8112522c:	30bffb36 	bltu	r6,r2,8112521c <__reset+0xfb10521c>
81125230:	00c6303a 	nor	r3,zero,r3
81125234:	1885883a 	add	r2,r3,r2
81125238:	1004d0ba 	srli	r2,r2,2
8112523c:	10800044 	addi	r2,r2,1
81125240:	1085883a 	add	r2,r2,r2
81125244:	1085883a 	add	r2,r2,r2
81125248:	1005d0ba 	srai	r2,r2,2
8112524c:	20800415 	stw	r2,16(r4)
81125250:	103fed26 	beq	r2,zero,81125208 <__reset+0xfb105208>
81125254:	f800283a 	ret
81125258:	4007883a 	mov	r3,r8
8112525c:	003fe306 	br	811251ec <__reset+0xfb1051ec>

81125260 <__gethex>:
81125260:	deffeb04 	addi	sp,sp,-84
81125264:	de00012e 	bgeu	sp,et,8112526c <__gethex+0xc>
81125268:	003b68fa 	trap	3
8112526c:	dfc01415 	stw	ra,80(sp)
81125270:	dd801115 	stw	r22,68(sp)
81125274:	dcc00e15 	stw	r19,56(sp)
81125278:	dc800d15 	stw	r18,52(sp)
8112527c:	2827883a 	mov	r19,r5
81125280:	d9000115 	stw	r4,4(sp)
81125284:	d9800015 	stw	r6,0(sp)
81125288:	d9c00415 	stw	r7,16(sp)
8112528c:	df001315 	stw	fp,76(sp)
81125290:	ddc01215 	stw	r23,72(sp)
81125294:	dd401015 	stw	r21,64(sp)
81125298:	dd000f15 	stw	r20,60(sp)
8112529c:	dc400c15 	stw	r17,48(sp)
811252a0:	dc000b15 	stw	r16,44(sp)
811252a4:	111e32c0 	call	8111e32c <_localeconv_r>
811252a8:	14800017 	ldw	r18,0(r2)
811252ac:	9009883a 	mov	r4,r18
811252b0:	111510c0 	call	8111510c <strlen>
811252b4:	98c00017 	ldw	r3,0(r19)
811252b8:	102d883a 	mov	r22,r2
811252bc:	9085883a 	add	r2,r18,r2
811252c0:	10bfffc3 	ldbu	r2,-1(r2)
811252c4:	19000083 	ldbu	r4,2(r3)
811252c8:	d8800305 	stb	r2,12(sp)
811252cc:	00800c04 	movi	r2,48
811252d0:	2081521e 	bne	r4,r2,8112581c <__gethex+0x5bc>
811252d4:	017fff84 	movi	r5,-2
811252d8:	188000c4 	addi	r2,r3,3
811252dc:	28cbc83a 	sub	r5,r5,r3
811252e0:	200d883a 	mov	r6,r4
811252e4:	28a3883a 	add	r17,r5,r2
811252e8:	102b883a 	mov	r21,r2
811252ec:	10800044 	addi	r2,r2,1
811252f0:	113fffc3 	ldbu	r4,-1(r2)
811252f4:	21bffb26 	beq	r4,r6,811252e4 <__reset+0xfb1052e4>
811252f8:	05204534 	movhi	r20,33044
811252fc:	a5082104 	addi	r20,r20,8324
81125300:	a109883a 	add	r4,r20,r4
81125304:	20800003 	ldbu	r2,0(r4)
81125308:	10008826 	beq	r2,zero,8112552c <__gethex+0x2cc>
8112530c:	a8800003 	ldbu	r2,0(r21)
81125310:	0015883a 	mov	r10,zero
81125314:	002f883a 	mov	r23,zero
81125318:	a085883a 	add	r2,r20,r2
8112531c:	10800003 	ldbu	r2,0(r2)
81125320:	a821883a 	mov	r16,r21
81125324:	10000526 	beq	r2,zero,8112533c <__gethex+0xdc>
81125328:	84000044 	addi	r16,r16,1
8112532c:	80800003 	ldbu	r2,0(r16)
81125330:	a085883a 	add	r2,r20,r2
81125334:	10800003 	ldbu	r2,0(r2)
81125338:	103ffb1e 	bne	r2,zero,81125328 <__reset+0xfb105328>
8112533c:	b00d883a 	mov	r6,r22
81125340:	900b883a 	mov	r5,r18
81125344:	8009883a 	mov	r4,r16
81125348:	da800a15 	stw	r10,40(sp)
8112534c:	1125cfc0 	call	81125cfc <strncmp>
81125350:	da800a17 	ldw	r10,40(sp)
81125354:	1000031e 	bne	r2,zero,81125364 <__gethex+0x104>
81125358:	b8015226 	beq	r23,zero,811258a4 <__gethex+0x644>
8112535c:	80800003 	ldbu	r2,0(r16)
81125360:	00000206 	br	8112536c <__gethex+0x10c>
81125364:	80800003 	ldbu	r2,0(r16)
81125368:	b8011f26 	beq	r23,zero,811257e8 <__gethex+0x588>
8112536c:	85efc83a 	sub	r23,r16,r23
81125370:	bdef883a 	add	r23,r23,r23
81125374:	bdef883a 	add	r23,r23,r23
81125378:	05efc83a 	sub	r23,zero,r23
8112537c:	10803fcc 	andi	r2,r2,255
81125380:	01001404 	movi	r4,80
81125384:	11008626 	beq	r2,r4,811255a0 <__gethex+0x340>
81125388:	01001c04 	movi	r4,112
8112538c:	11008426 	beq	r2,r4,811255a0 <__gethex+0x340>
81125390:	8039883a 	mov	fp,r16
81125394:	9c000015 	stw	r16,0(r19)
81125398:	5000711e 	bne	r10,zero,81125560 <__gethex+0x300>
8112539c:	e545c83a 	sub	r2,fp,r21
811253a0:	10bfffc4 	addi	r2,r2,-1
811253a4:	010001c4 	movi	r4,7
811253a8:	000b883a 	mov	r5,zero
811253ac:	2080030e 	bge	r4,r2,811253bc <__gethex+0x15c>
811253b0:	1005d07a 	srai	r2,r2,1
811253b4:	29400044 	addi	r5,r5,1
811253b8:	20bffd16 	blt	r4,r2,811253b0 <__reset+0xfb1053b0>
811253bc:	d9000117 	ldw	r4,4(sp)
811253c0:	111e8480 	call	8111e848 <_Balloc>
811253c4:	10c00504 	addi	r3,r2,20
811253c8:	d8c00215 	stw	r3,8(sp)
811253cc:	1021883a 	mov	r16,r2
811253d0:	af01732e 	bgeu	r21,fp,811259a0 <__gethex+0x740>
811253d4:	dc400303 	ldbu	r17,12(sp)
811253d8:	03400044 	movi	r13,1
811253dc:	1815883a 	mov	r10,r3
811253e0:	0013883a 	mov	r9,zero
811253e4:	0027883a 	mov	r19,zero
811253e8:	6d9bc83a 	sub	r13,r13,r22
811253ec:	02c00804 	movi	r11,32
811253f0:	e0bfffc3 	ldbu	r2,-1(fp)
811253f4:	e3bfffc4 	addi	r14,fp,-1
811253f8:	88803026 	beq	r17,r2,811254bc <__gethex+0x25c>
811253fc:	9ac04526 	beq	r19,r11,81125514 <__gethex+0x2b4>
81125400:	980b883a 	mov	r5,r19
81125404:	9cc00104 	addi	r19,r19,4
81125408:	e13fffc3 	ldbu	r4,-1(fp)
8112540c:	7039883a 	mov	fp,r14
81125410:	a109883a 	add	r4,r20,r4
81125414:	20800003 	ldbu	r2,0(r4)
81125418:	108003cc 	andi	r2,r2,15
8112541c:	1144983a 	sll	r2,r2,r5
81125420:	4892b03a 	or	r9,r9,r2
81125424:	af3ff236 	bltu	r21,fp,811253f0 <__reset+0xfb1053f0>
81125428:	d8c00217 	ldw	r3,8(sp)
8112542c:	50800104 	addi	r2,r10,4
81125430:	52400015 	stw	r9,0(r10)
81125434:	10c5c83a 	sub	r2,r2,r3
81125438:	1005d0ba 	srai	r2,r2,2
8112543c:	4809883a 	mov	r4,r9
81125440:	80800415 	stw	r2,16(r16)
81125444:	1022917a 	slli	r17,r2,5
81125448:	111eb540 	call	8111eb54 <__hi0bits>
8112544c:	d8c00017 	ldw	r3,0(sp)
81125450:	8885c83a 	sub	r2,r17,r2
81125454:	1c800017 	ldw	r18,0(r3)
81125458:	9080c716 	blt	r18,r2,81125778 <__gethex+0x518>
8112545c:	1480e416 	blt	r2,r18,811257f0 <__gethex+0x590>
81125460:	0027883a 	mov	r19,zero
81125464:	d8c00017 	ldw	r3,0(sp)
81125468:	18800217 	ldw	r2,8(r3)
8112546c:	15c08d16 	blt	r2,r23,811256a4 <__gethex+0x444>
81125470:	d8c00017 	ldw	r3,0(sp)
81125474:	18800117 	ldw	r2,4(r3)
81125478:	b880aa0e 	bge	r23,r2,81125724 <__gethex+0x4c4>
8112547c:	15efc83a 	sub	r23,r2,r23
81125480:	bc80ed16 	blt	r23,r18,81125838 <__gethex+0x5d8>
81125484:	18c00317 	ldw	r3,12(r3)
81125488:	01000084 	movi	r4,2
8112548c:	19014926 	beq	r3,r4,811259b4 <__gethex+0x754>
81125490:	010000c4 	movi	r4,3
81125494:	19012e26 	beq	r3,r4,81125950 <__gethex+0x6f0>
81125498:	01000044 	movi	r4,1
8112549c:	19014826 	beq	r3,r4,811259c0 <__gethex+0x760>
811254a0:	d9000117 	ldw	r4,4(sp)
811254a4:	800b883a 	mov	r5,r16
811254a8:	111e8f80 	call	8111e8f8 <_Bfree>
811254ac:	d8801517 	ldw	r2,84(sp)
811254b0:	10000015 	stw	zero,0(r2)
811254b4:	00801404 	movi	r2,80
811254b8:	00002b06 	br	81125568 <__gethex+0x308>
811254bc:	735f883a 	add	r15,r14,r13
811254c0:	7d7fce36 	bltu	r15,r21,811253fc <__reset+0xfb1053fc>
811254c4:	7809883a 	mov	r4,r15
811254c8:	b00d883a 	mov	r6,r22
811254cc:	900b883a 	mov	r5,r18
811254d0:	da400515 	stw	r9,20(sp)
811254d4:	da800a15 	stw	r10,40(sp)
811254d8:	dac00915 	stw	r11,36(sp)
811254dc:	db400815 	stw	r13,32(sp)
811254e0:	db800615 	stw	r14,24(sp)
811254e4:	dbc00715 	stw	r15,28(sp)
811254e8:	1125cfc0 	call	81125cfc <strncmp>
811254ec:	da400517 	ldw	r9,20(sp)
811254f0:	da800a17 	ldw	r10,40(sp)
811254f4:	dac00917 	ldw	r11,36(sp)
811254f8:	db400817 	ldw	r13,32(sp)
811254fc:	db800617 	ldw	r14,24(sp)
81125500:	dbc00717 	ldw	r15,28(sp)
81125504:	103fbd1e 	bne	r2,zero,811253fc <__reset+0xfb1053fc>
81125508:	7839883a 	mov	fp,r15
8112550c:	af3fb836 	bltu	r21,fp,811253f0 <__reset+0xfb1053f0>
81125510:	003fc506 	br	81125428 <__reset+0xfb105428>
81125514:	04c00104 	movi	r19,4
81125518:	52400015 	stw	r9,0(r10)
8112551c:	000b883a 	mov	r5,zero
81125520:	54d5883a 	add	r10,r10,r19
81125524:	0013883a 	mov	r9,zero
81125528:	003fb706 	br	81125408 <__reset+0xfb105408>
8112552c:	b00d883a 	mov	r6,r22
81125530:	900b883a 	mov	r5,r18
81125534:	a809883a 	mov	r4,r21
81125538:	1125cfc0 	call	81125cfc <strncmp>
8112553c:	10006426 	beq	r2,zero,811256d0 <__gethex+0x470>
81125540:	a8800003 	ldbu	r2,0(r21)
81125544:	a821883a 	mov	r16,r21
81125548:	10803fcc 	andi	r2,r2,255
8112554c:	01001404 	movi	r4,80
81125550:	11001126 	beq	r2,r4,81125598 <__gethex+0x338>
81125554:	01001c04 	movi	r4,112
81125558:	11000f26 	beq	r2,r4,81125598 <__gethex+0x338>
8112555c:	9c000015 	stw	r16,0(r19)
81125560:	8800831e 	bne	r17,zero,81125770 <__gethex+0x510>
81125564:	00800184 	movi	r2,6
81125568:	dfc01417 	ldw	ra,80(sp)
8112556c:	df001317 	ldw	fp,76(sp)
81125570:	ddc01217 	ldw	r23,72(sp)
81125574:	dd801117 	ldw	r22,68(sp)
81125578:	dd401017 	ldw	r21,64(sp)
8112557c:	dd000f17 	ldw	r20,60(sp)
81125580:	dcc00e17 	ldw	r19,56(sp)
81125584:	dc800d17 	ldw	r18,52(sp)
81125588:	dc400c17 	ldw	r17,48(sp)
8112558c:	dc000b17 	ldw	r16,44(sp)
81125590:	dec01504 	addi	sp,sp,84
81125594:	f800283a 	ret
81125598:	002f883a 	mov	r23,zero
8112559c:	02800044 	movi	r10,1
811255a0:	80800043 	ldbu	r2,1(r16)
811255a4:	01400ac4 	movi	r5,43
811255a8:	11003fcc 	andi	r4,r2,255
811255ac:	21406e26 	beq	r4,r5,81125768 <__gethex+0x508>
811255b0:	01400b44 	movi	r5,45
811255b4:	21404226 	beq	r4,r5,811256c0 <__gethex+0x460>
811255b8:	81400044 	addi	r5,r16,1
811255bc:	000d883a 	mov	r6,zero
811255c0:	10803fcc 	andi	r2,r2,255
811255c4:	a085883a 	add	r2,r20,r2
811255c8:	11000003 	ldbu	r4,0(r2)
811255cc:	03000604 	movi	r12,24
811255d0:	20bfffc4 	addi	r2,r4,-1
811255d4:	10803fcc 	andi	r2,r2,255
811255d8:	60bf6d36 	bltu	r12,r2,81125390 <__reset+0xfb105390>
811255dc:	2ac00043 	ldbu	r11,1(r5)
811255e0:	20803fcc 	andi	r2,r4,255
811255e4:	01204534 	movhi	r4,33044
811255e8:	21082104 	addi	r4,r4,8324
811255ec:	22c9883a 	add	r4,r4,r11
811255f0:	23400003 	ldbu	r13,0(r4)
811255f4:	10bffc04 	addi	r2,r2,-16
811255f8:	29400044 	addi	r5,r5,1
811255fc:	693fffc4 	addi	r4,r13,-1
81125600:	21003fcc 	andi	r4,r4,255
81125604:	6b403fcc 	andi	r13,r13,255
81125608:	61000b36 	bltu	r12,r4,81125638 <__gethex+0x3d8>
8112560c:	29400044 	addi	r5,r5,1
81125610:	29000003 	ldbu	r4,0(r5)
81125614:	108002a4 	muli	r2,r2,10
81125618:	a109883a 	add	r4,r20,r4
8112561c:	22c00003 	ldbu	r11,0(r4)
81125620:	1345883a 	add	r2,r2,r13
81125624:	10bffc04 	addi	r2,r2,-16
81125628:	593fffc4 	addi	r4,r11,-1
8112562c:	21003fcc 	andi	r4,r4,255
81125630:	5b403fcc 	andi	r13,r11,255
81125634:	613ff52e 	bgeu	r12,r4,8112560c <__reset+0xfb10560c>
81125638:	30000126 	beq	r6,zero,81125640 <__gethex+0x3e0>
8112563c:	0085c83a 	sub	r2,zero,r2
81125640:	8039883a 	mov	fp,r16
81125644:	b8af883a 	add	r23,r23,r2
81125648:	2821883a 	mov	r16,r5
8112564c:	003f5106 	br	81125394 <__reset+0xfb105394>
81125650:	80800217 	ldw	r2,8(r16)
81125654:	e080f00e 	bge	fp,r2,81125a18 <__gethex+0x7b8>
81125658:	e007883a 	mov	r3,fp
8112565c:	18800144 	addi	r2,r3,5
81125660:	1085883a 	add	r2,r2,r2
81125664:	18c00044 	addi	r3,r3,1
81125668:	1085883a 	add	r2,r2,r2
8112566c:	8085883a 	add	r2,r16,r2
81125670:	80c00415 	stw	r3,16(r16)
81125674:	01000044 	movi	r4,1
81125678:	11000015 	stw	r4,0(r2)
8112567c:	00800084 	movi	r2,2
81125680:	8880d826 	beq	r17,r2,811259e4 <__gethex+0x784>
81125684:	e0c0ac0e 	bge	fp,r3,81125938 <__gethex+0x6d8>
81125688:	01400044 	movi	r5,1
8112568c:	8009883a 	mov	r4,r16
81125690:	11251600 	call	81125160 <rshift>
81125694:	d8c00017 	ldw	r3,0(sp)
81125698:	bdc00044 	addi	r23,r23,1
8112569c:	18800217 	ldw	r2,8(r3)
811256a0:	15c0a70e 	bge	r2,r23,81125940 <__gethex+0x6e0>
811256a4:	d9000117 	ldw	r4,4(sp)
811256a8:	800b883a 	mov	r5,r16
811256ac:	111e8f80 	call	8111e8f8 <_Bfree>
811256b0:	d9001517 	ldw	r4,84(sp)
811256b4:	008028c4 	movi	r2,163
811256b8:	20000015 	stw	zero,0(r4)
811256bc:	003faa06 	br	81125568 <__reset+0xfb105568>
811256c0:	01800044 	movi	r6,1
811256c4:	80800083 	ldbu	r2,2(r16)
811256c8:	81400084 	addi	r5,r16,2
811256cc:	003fbc06 	br	811255c0 <__reset+0xfb1055c0>
811256d0:	ada1883a 	add	r16,r21,r22
811256d4:	81000003 	ldbu	r4,0(r16)
811256d8:	21403fcc 	andi	r5,r4,255
811256dc:	a145883a 	add	r2,r20,r5
811256e0:	10800003 	ldbu	r2,0(r2)
811256e4:	11803fcc 	andi	r6,r2,255
811256e8:	30004f26 	beq	r6,zero,81125828 <__gethex+0x5c8>
811256ec:	00c00c04 	movi	r3,48
811256f0:	802b883a 	mov	r21,r16
811256f4:	28c0061e 	bne	r5,r3,81125710 <__gethex+0x4b0>
811256f8:	2809883a 	mov	r4,r5
811256fc:	ad400044 	addi	r21,r21,1
81125700:	a8800003 	ldbu	r2,0(r21)
81125704:	113ffd26 	beq	r2,r4,811256fc <__reset+0xfb1056fc>
81125708:	a085883a 	add	r2,r20,r2
8112570c:	10800003 	ldbu	r2,0(r2)
81125710:	10803fcc 	andi	r2,r2,255
81125714:	1015003a 	cmpeq	r10,r2,zero
81125718:	802f883a 	mov	r23,r16
8112571c:	04400044 	movi	r17,1
81125720:	003eff06 	br	81125320 <__reset+0xfb105320>
81125724:	04400044 	movi	r17,1
81125728:	98000926 	beq	r19,zero,81125750 <__gethex+0x4f0>
8112572c:	d8c00017 	ldw	r3,0(sp)
81125730:	18800317 	ldw	r2,12(r3)
81125734:	00c00084 	movi	r3,2
81125738:	10c06826 	beq	r2,r3,811258dc <__gethex+0x67c>
8112573c:	00c000c4 	movi	r3,3
81125740:	10c06a26 	beq	r2,r3,811258ec <__gethex+0x68c>
81125744:	00c00044 	movi	r3,1
81125748:	10c08d26 	beq	r2,r3,81125980 <__gethex+0x720>
8112574c:	8c400414 	ori	r17,r17,16
81125750:	d9001517 	ldw	r4,84(sp)
81125754:	d8c00417 	ldw	r3,16(sp)
81125758:	8805883a 	mov	r2,r17
8112575c:	24000015 	stw	r16,0(r4)
81125760:	1dc00015 	stw	r23,0(r3)
81125764:	003f8006 	br	81125568 <__reset+0xfb105568>
81125768:	000d883a 	mov	r6,zero
8112576c:	003fd506 	br	811256c4 <__reset+0xfb1056c4>
81125770:	0005883a 	mov	r2,zero
81125774:	003f7c06 	br	81125568 <__reset+0xfb105568>
81125778:	14a3c83a 	sub	r17,r2,r18
8112577c:	880b883a 	mov	r5,r17
81125780:	8009883a 	mov	r4,r16
81125784:	111f8180 	call	8111f818 <__any_on>
81125788:	10002926 	beq	r2,zero,81125830 <__gethex+0x5d0>
8112578c:	897fffc4 	addi	r5,r17,-1
81125790:	2807d17a 	srai	r3,r5,5
81125794:	d8800217 	ldw	r2,8(sp)
81125798:	290007cc 	andi	r4,r5,31
8112579c:	18c7883a 	add	r3,r3,r3
811257a0:	18c7883a 	add	r3,r3,r3
811257a4:	04c00044 	movi	r19,1
811257a8:	10c7883a 	add	r3,r2,r3
811257ac:	9908983a 	sll	r4,r19,r4
811257b0:	18c00017 	ldw	r3,0(r3)
811257b4:	20c6703a 	and	r3,r4,r3
811257b8:	18000626 	beq	r3,zero,811257d4 <__gethex+0x574>
811257bc:	99407b0e 	bge	r19,r5,811259ac <__gethex+0x74c>
811257c0:	897fff84 	addi	r5,r17,-2
811257c4:	8009883a 	mov	r4,r16
811257c8:	111f8180 	call	8111f818 <__any_on>
811257cc:	10007726 	beq	r2,zero,811259ac <__gethex+0x74c>
811257d0:	04c000c4 	movi	r19,3
811257d4:	880b883a 	mov	r5,r17
811257d8:	8009883a 	mov	r4,r16
811257dc:	11251600 	call	81125160 <rshift>
811257e0:	bc6f883a 	add	r23,r23,r17
811257e4:	003f1f06 	br	81125464 <__reset+0xfb105464>
811257e8:	002f883a 	mov	r23,zero
811257ec:	003ee306 	br	8112537c <__reset+0xfb10537c>
811257f0:	d9000117 	ldw	r4,4(sp)
811257f4:	90a3c83a 	sub	r17,r18,r2
811257f8:	800b883a 	mov	r5,r16
811257fc:	880d883a 	mov	r6,r17
81125800:	111eff80 	call	8111eff8 <__lshift>
81125804:	10c00504 	addi	r3,r2,20
81125808:	1021883a 	mov	r16,r2
8112580c:	bc6fc83a 	sub	r23,r23,r17
81125810:	d8c00215 	stw	r3,8(sp)
81125814:	0027883a 	mov	r19,zero
81125818:	003f1206 	br	81125464 <__reset+0xfb105464>
8112581c:	1d400084 	addi	r21,r3,2
81125820:	0023883a 	mov	r17,zero
81125824:	003eb406 	br	811252f8 <__reset+0xfb1052f8>
81125828:	2005883a 	mov	r2,r4
8112582c:	003f4606 	br	81125548 <__reset+0xfb105548>
81125830:	0027883a 	mov	r19,zero
81125834:	003fe706 	br	811257d4 <__reset+0xfb1057d4>
81125838:	bc7fffc4 	addi	r17,r23,-1
8112583c:	9800421e 	bne	r19,zero,81125948 <__gethex+0x6e8>
81125840:	88000426 	beq	r17,zero,81125854 <__gethex+0x5f4>
81125844:	880b883a 	mov	r5,r17
81125848:	8009883a 	mov	r4,r16
8112584c:	111f8180 	call	8111f818 <__any_on>
81125850:	1027883a 	mov	r19,r2
81125854:	8805d17a 	srai	r2,r17,5
81125858:	d8c00217 	ldw	r3,8(sp)
8112585c:	8c4007cc 	andi	r17,r17,31
81125860:	1085883a 	add	r2,r2,r2
81125864:	1085883a 	add	r2,r2,r2
81125868:	1885883a 	add	r2,r3,r2
8112586c:	00c00044 	movi	r3,1
81125870:	1c62983a 	sll	r17,r3,r17
81125874:	10800017 	ldw	r2,0(r2)
81125878:	8884703a 	and	r2,r17,r2
8112587c:	10000126 	beq	r2,zero,81125884 <__gethex+0x624>
81125880:	9cc00094 	ori	r19,r19,2
81125884:	b80b883a 	mov	r5,r23
81125888:	8009883a 	mov	r4,r16
8112588c:	11251600 	call	81125160 <rshift>
81125890:	d8c00017 	ldw	r3,0(sp)
81125894:	95e5c83a 	sub	r18,r18,r23
81125898:	04400084 	movi	r17,2
8112589c:	1dc00117 	ldw	r23,4(r3)
811258a0:	003fa106 	br	81125728 <__reset+0xfb105728>
811258a4:	85af883a 	add	r23,r16,r22
811258a8:	b8800003 	ldbu	r2,0(r23)
811258ac:	b821883a 	mov	r16,r23
811258b0:	11003fcc 	andi	r4,r2,255
811258b4:	a109883a 	add	r4,r20,r4
811258b8:	21000003 	ldbu	r4,0(r4)
811258bc:	203eaa26 	beq	r4,zero,81125368 <__reset+0xfb105368>
811258c0:	84000044 	addi	r16,r16,1
811258c4:	80800003 	ldbu	r2,0(r16)
811258c8:	11003fcc 	andi	r4,r2,255
811258cc:	a109883a 	add	r4,r20,r4
811258d0:	21000003 	ldbu	r4,0(r4)
811258d4:	203ffa1e 	bne	r4,zero,811258c0 <__reset+0xfb1058c0>
811258d8:	003ea306 	br	81125368 <__reset+0xfb105368>
811258dc:	d9001617 	ldw	r4,88(sp)
811258e0:	00800044 	movi	r2,1
811258e4:	1109c83a 	sub	r4,r2,r4
811258e8:	d9001615 	stw	r4,88(sp)
811258ec:	d8801617 	ldw	r2,88(sp)
811258f0:	103f9626 	beq	r2,zero,8112574c <__reset+0xfb10574c>
811258f4:	87000417 	ldw	fp,16(r16)
811258f8:	d9800217 	ldw	r6,8(sp)
811258fc:	013fffc4 	movi	r4,-1
81125900:	e727883a 	add	r19,fp,fp
81125904:	9ce7883a 	add	r19,r19,r19
81125908:	3005883a 	mov	r2,r6
8112590c:	34cb883a 	add	r5,r6,r19
81125910:	00000306 	br	81125920 <__gethex+0x6c0>
81125914:	10000015 	stw	zero,0(r2)
81125918:	10800104 	addi	r2,r2,4
8112591c:	117f4c2e 	bgeu	r2,r5,81125650 <__reset+0xfb105650>
81125920:	10c00017 	ldw	r3,0(r2)
81125924:	193ffb26 	beq	r3,r4,81125914 <__reset+0xfb105914>
81125928:	18c00044 	addi	r3,r3,1
8112592c:	10c00015 	stw	r3,0(r2)
81125930:	00800084 	movi	r2,2
81125934:	88802b26 	beq	r17,r2,811259e4 <__gethex+0x784>
81125938:	948007cc 	andi	r18,r18,31
8112593c:	90002f1e 	bne	r18,zero,811259fc <__gethex+0x79c>
81125940:	04400844 	movi	r17,33
81125944:	003f8206 	br	81125750 <__reset+0xfb105750>
81125948:	04c00044 	movi	r19,1
8112594c:	003fc106 	br	81125854 <__reset+0xfb105854>
81125950:	d8c01617 	ldw	r3,88(sp)
81125954:	183ed226 	beq	r3,zero,811254a0 <__reset+0xfb1054a0>
81125958:	d8c00417 	ldw	r3,16(sp)
8112595c:	d9001517 	ldw	r4,84(sp)
81125960:	18800015 	stw	r2,0(r3)
81125964:	d8c00217 	ldw	r3,8(sp)
81125968:	00800044 	movi	r2,1
8112596c:	80800415 	stw	r2,16(r16)
81125970:	18800015 	stw	r2,0(r3)
81125974:	24000015 	stw	r16,0(r4)
81125978:	00801884 	movi	r2,98
8112597c:	003efa06 	br	81125568 <__reset+0xfb105568>
81125980:	9880008c 	andi	r2,r19,2
81125984:	103f7126 	beq	r2,zero,8112574c <__reset+0xfb10574c>
81125988:	d8c00217 	ldw	r3,8(sp)
8112598c:	18800017 	ldw	r2,0(r3)
81125990:	9884b03a 	or	r2,r19,r2
81125994:	1080004c 	andi	r2,r2,1
81125998:	103fd61e 	bne	r2,zero,811258f4 <__reset+0xfb1058f4>
8112599c:	003f6b06 	br	8112574c <__reset+0xfb10574c>
811259a0:	da800217 	ldw	r10,8(sp)
811259a4:	0013883a 	mov	r9,zero
811259a8:	003e9f06 	br	81125428 <__reset+0xfb105428>
811259ac:	04c00084 	movi	r19,2
811259b0:	003f8806 	br	811257d4 <__reset+0xfb1057d4>
811259b4:	d9001617 	ldw	r4,88(sp)
811259b8:	203fe726 	beq	r4,zero,81125958 <__reset+0xfb105958>
811259bc:	003eb806 	br	811254a0 <__reset+0xfb1054a0>
811259c0:	95feb71e 	bne	r18,r23,811254a0 <__reset+0xfb1054a0>
811259c4:	1cbfe40e 	bge	r3,r18,81125958 <__reset+0xfb105958>
811259c8:	917fffc4 	addi	r5,r18,-1
811259cc:	8009883a 	mov	r4,r16
811259d0:	111f8180 	call	8111f818 <__any_on>
811259d4:	103eb226 	beq	r2,zero,811254a0 <__reset+0xfb1054a0>
811259d8:	d8c00017 	ldw	r3,0(sp)
811259dc:	18800117 	ldw	r2,4(r3)
811259e0:	003fdd06 	br	81125958 <__reset+0xfb105958>
811259e4:	d8c00017 	ldw	r3,0(sp)
811259e8:	18800017 	ldw	r2,0(r3)
811259ec:	10bfffc4 	addi	r2,r2,-1
811259f0:	90801c26 	beq	r18,r2,81125a64 <__gethex+0x804>
811259f4:	04400884 	movi	r17,34
811259f8:	003f5506 	br	81125750 <__reset+0xfb105750>
811259fc:	34c5883a 	add	r2,r6,r19
81125a00:	113fff17 	ldw	r4,-4(r2)
81125a04:	111eb540 	call	8111eb54 <__hi0bits>
81125a08:	00c00804 	movi	r3,32
81125a0c:	1ca5c83a 	sub	r18,r3,r18
81125a10:	14bfcb0e 	bge	r2,r18,81125940 <__reset+0xfb105940>
81125a14:	003f1c06 	br	81125688 <__reset+0xfb105688>
81125a18:	81400117 	ldw	r5,4(r16)
81125a1c:	d9000117 	ldw	r4,4(sp)
81125a20:	29400044 	addi	r5,r5,1
81125a24:	111e8480 	call	8111e848 <_Balloc>
81125a28:	81800417 	ldw	r6,16(r16)
81125a2c:	81400304 	addi	r5,r16,12
81125a30:	11000304 	addi	r4,r2,12
81125a34:	31800084 	addi	r6,r6,2
81125a38:	318d883a 	add	r6,r6,r6
81125a3c:	318d883a 	add	r6,r6,r6
81125a40:	1029883a 	mov	r20,r2
81125a44:	11145f80 	call	811145f8 <memcpy>
81125a48:	d9000117 	ldw	r4,4(sp)
81125a4c:	800b883a 	mov	r5,r16
81125a50:	a021883a 	mov	r16,r20
81125a54:	111e8f80 	call	8111e8f8 <_Bfree>
81125a58:	a0c00417 	ldw	r3,16(r20)
81125a5c:	a1800504 	addi	r6,r20,20
81125a60:	003efe06 	br	8112565c <__reset+0xfb10565c>
81125a64:	9005d17a 	srai	r2,r18,5
81125a68:	944007cc 	andi	r17,r18,31
81125a6c:	1085883a 	add	r2,r2,r2
81125a70:	1085883a 	add	r2,r2,r2
81125a74:	3087883a 	add	r3,r6,r2
81125a78:	00800044 	movi	r2,1
81125a7c:	1462983a 	sll	r17,r2,r17
81125a80:	18800017 	ldw	r2,0(r3)
81125a84:	8884703a 	and	r2,r17,r2
81125a88:	1022c03a 	cmpne	r17,r2,zero
81125a8c:	00800884 	movi	r2,34
81125a90:	1463c83a 	sub	r17,r2,r17
81125a94:	003f2e06 	br	81125750 <__reset+0xfb105750>

81125a98 <__hexnan>:
81125a98:	defff904 	addi	sp,sp,-28
81125a9c:	de00012e 	bgeu	sp,et,81125aa4 <__hexnan+0xc>
81125aa0:	003b68fa 	trap	3
81125aa4:	dc800215 	stw	r18,8(sp)
81125aa8:	2c800017 	ldw	r18,0(r5)
81125aac:	dfc00615 	stw	ra,24(sp)
81125ab0:	dd400515 	stw	r21,20(sp)
81125ab4:	901fd17a 	srai	r15,r18,5
81125ab8:	dd000415 	stw	r20,16(sp)
81125abc:	dcc00315 	stw	r19,12(sp)
81125ac0:	7bdf883a 	add	r15,r15,r15
81125ac4:	7bdf883a 	add	r15,r15,r15
81125ac8:	dc400115 	stw	r17,4(sp)
81125acc:	dc000015 	stw	r16,0(sp)
81125ad0:	948007cc 	andi	r18,r18,31
81125ad4:	33df883a 	add	r15,r6,r15
81125ad8:	90000126 	beq	r18,zero,81125ae0 <__hexnan+0x48>
81125adc:	7bc00104 	addi	r15,r15,4
81125ae0:	22000017 	ldw	r8,0(r4)
81125ae4:	7affff04 	addi	r11,r15,-4
81125ae8:	03a04534 	movhi	r14,33044
81125aec:	783fff15 	stw	zero,-4(r15)
81125af0:	581b883a 	mov	r13,r11
81125af4:	580b883a 	mov	r5,r11
81125af8:	000f883a 	mov	r7,zero
81125afc:	003f883a 	mov	ra,zero
81125b00:	0019883a 	mov	r12,zero
81125b04:	73882104 	addi	r14,r14,8324
81125b08:	04400204 	movi	r17,8
81125b0c:	04000804 	movi	r16,32
81125b10:	04c001c4 	movi	r19,7
81125b14:	42000044 	addi	r8,r8,1
81125b18:	40c00003 	ldbu	r3,0(r8)
81125b1c:	18001d26 	beq	r3,zero,81125b94 <__hexnan+0xfc>
81125b20:	70c5883a 	add	r2,r14,r3
81125b24:	10800003 	ldbu	r2,0(r2)
81125b28:	12403fcc 	andi	r9,r2,255
81125b2c:	4800301e 	bne	r9,zero,81125bf0 <__hexnan+0x158>
81125b30:	80c04236 	bltu	r16,r3,81125c3c <__hexnan+0x1a4>
81125b34:	fb3ff70e 	bge	ra,r12,81125b14 <__reset+0xfb105b14>
81125b38:	2b40112e 	bgeu	r5,r13,81125b80 <__hexnan+0xe8>
81125b3c:	99c01016 	blt	r19,r7,81125b80 <__hexnan+0xe8>
81125b40:	89e9c83a 	sub	r20,r17,r7
81125b44:	a529883a 	add	r20,r20,r20
81125b48:	2a800017 	ldw	r10,0(r5)
81125b4c:	a529883a 	add	r20,r20,r20
81125b50:	852bc83a 	sub	r21,r16,r20
81125b54:	28c00104 	addi	r3,r5,4
81125b58:	2805883a 	mov	r2,r5
81125b5c:	19c00017 	ldw	r7,0(r3)
81125b60:	10800104 	addi	r2,r2,4
81125b64:	18c00104 	addi	r3,r3,4
81125b68:	3d52983a 	sll	r9,r7,r21
81125b6c:	4a92b03a 	or	r9,r9,r10
81125b70:	3d14d83a 	srl	r10,r7,r20
81125b74:	127fff15 	stw	r9,-4(r2)
81125b78:	1abfff15 	stw	r10,-4(r3)
81125b7c:	137ff736 	bltu	r2,r13,81125b5c <__reset+0xfb105b5c>
81125b80:	31402836 	bltu	r6,r5,81125c24 <__hexnan+0x18c>
81125b84:	42000044 	addi	r8,r8,1
81125b88:	40c00003 	ldbu	r3,0(r8)
81125b8c:	01c00204 	movi	r7,8
81125b90:	183fe31e 	bne	r3,zero,81125b20 <__reset+0xfb105b20>
81125b94:	60002b26 	beq	r12,zero,81125c44 <__hexnan+0x1ac>
81125b98:	2b40022e 	bgeu	r5,r13,81125ba4 <__hexnan+0x10c>
81125b9c:	008001c4 	movi	r2,7
81125ba0:	11c0430e 	bge	r2,r7,81125cb0 <__hexnan+0x218>
81125ba4:	3140312e 	bgeu	r6,r5,81125c6c <__hexnan+0x1d4>
81125ba8:	3007883a 	mov	r3,r6
81125bac:	29000017 	ldw	r4,0(r5)
81125bb0:	18800104 	addi	r2,r3,4
81125bb4:	29400104 	addi	r5,r5,4
81125bb8:	19000015 	stw	r4,0(r3)
81125bbc:	1007883a 	mov	r3,r2
81125bc0:	597ffa2e 	bgeu	r11,r5,81125bac <__reset+0xfb105bac>
81125bc4:	10000015 	stw	zero,0(r2)
81125bc8:	10800104 	addi	r2,r2,4
81125bcc:	58bffd2e 	bgeu	r11,r2,81125bc4 <__reset+0xfb105bc4>
81125bd0:	78bfff17 	ldw	r2,-4(r15)
81125bd4:	1000041e 	bne	r2,zero,81125be8 <__hexnan+0x150>
81125bd8:	32c02d26 	beq	r6,r11,81125c90 <__hexnan+0x1f8>
81125bdc:	5affff04 	addi	r11,r11,-4
81125be0:	58800017 	ldw	r2,0(r11)
81125be4:	103ffc26 	beq	r2,zero,81125bd8 <__reset+0xfb105bd8>
81125be8:	00800144 	movi	r2,5
81125bec:	00001606 	br	81125c48 <__hexnan+0x1b0>
81125bf0:	39c00044 	addi	r7,r7,1
81125bf4:	63000044 	addi	r12,r12,1
81125bf8:	89c0040e 	bge	r17,r7,81125c0c <__hexnan+0x174>
81125bfc:	317fc52e 	bgeu	r6,r5,81125b14 <__reset+0xfb105b14>
81125c00:	283fff15 	stw	zero,-4(r5)
81125c04:	01c00044 	movi	r7,1
81125c08:	297fff04 	addi	r5,r5,-4
81125c0c:	28c00017 	ldw	r3,0(r5)
81125c10:	108003cc 	andi	r2,r2,15
81125c14:	1806913a 	slli	r3,r3,4
81125c18:	1884b03a 	or	r2,r3,r2
81125c1c:	28800015 	stw	r2,0(r5)
81125c20:	003fbc06 	br	81125b14 <__reset+0xfb105b14>
81125c24:	2b7fff04 	addi	r13,r5,-4
81125c28:	283fff15 	stw	zero,-4(r5)
81125c2c:	603f883a 	mov	ra,r12
81125c30:	680b883a 	mov	r5,r13
81125c34:	000f883a 	mov	r7,zero
81125c38:	003fb606 	br	81125b14 <__reset+0xfb105b14>
81125c3c:	00800a44 	movi	r2,41
81125c40:	18801726 	beq	r3,r2,81125ca0 <__hexnan+0x208>
81125c44:	00800104 	movi	r2,4
81125c48:	dfc00617 	ldw	ra,24(sp)
81125c4c:	dd400517 	ldw	r21,20(sp)
81125c50:	dd000417 	ldw	r20,16(sp)
81125c54:	dcc00317 	ldw	r19,12(sp)
81125c58:	dc800217 	ldw	r18,8(sp)
81125c5c:	dc400117 	ldw	r17,4(sp)
81125c60:	dc000017 	ldw	r16,0(sp)
81125c64:	dec00704 	addi	sp,sp,28
81125c68:	f800283a 	ret
81125c6c:	903fd826 	beq	r18,zero,81125bd0 <__reset+0xfb105bd0>
81125c70:	00c00804 	movi	r3,32
81125c74:	1ca5c83a 	sub	r18,r3,r18
81125c78:	00ffffc4 	movi	r3,-1
81125c7c:	78bfff17 	ldw	r2,-4(r15)
81125c80:	1c86d83a 	srl	r3,r3,r18
81125c84:	1884703a 	and	r2,r3,r2
81125c88:	78bfff15 	stw	r2,-4(r15)
81125c8c:	003fd106 	br	81125bd4 <__reset+0xfb105bd4>
81125c90:	00800044 	movi	r2,1
81125c94:	58800015 	stw	r2,0(r11)
81125c98:	00800144 	movi	r2,5
81125c9c:	003fea06 	br	81125c48 <__reset+0xfb105c48>
81125ca0:	42000044 	addi	r8,r8,1
81125ca4:	22000015 	stw	r8,0(r4)
81125ca8:	603fbb1e 	bne	r12,zero,81125b98 <__reset+0xfb105b98>
81125cac:	003fe506 	br	81125c44 <__reset+0xfb105c44>
81125cb0:	02400204 	movi	r9,8
81125cb4:	49d3c83a 	sub	r9,r9,r7
81125cb8:	4a53883a 	add	r9,r9,r9
81125cbc:	2a000017 	ldw	r8,0(r5)
81125cc0:	4a53883a 	add	r9,r9,r9
81125cc4:	02800804 	movi	r10,32
81125cc8:	5255c83a 	sub	r10,r10,r9
81125ccc:	28c00104 	addi	r3,r5,4
81125cd0:	2805883a 	mov	r2,r5
81125cd4:	19c00017 	ldw	r7,0(r3)
81125cd8:	10800104 	addi	r2,r2,4
81125cdc:	18c00104 	addi	r3,r3,4
81125ce0:	3a88983a 	sll	r4,r7,r10
81125ce4:	2208b03a 	or	r4,r4,r8
81125ce8:	3a50d83a 	srl	r8,r7,r9
81125cec:	113fff15 	stw	r4,-4(r2)
81125cf0:	1a3fff15 	stw	r8,-4(r3)
81125cf4:	137ff736 	bltu	r2,r13,81125cd4 <__reset+0xfb105cd4>
81125cf8:	003faa06 	br	81125ba4 <__reset+0xfb105ba4>

81125cfc <strncmp>:
81125cfc:	30003126 	beq	r6,zero,81125dc4 <strncmp+0xc8>
81125d00:	2144b03a 	or	r2,r4,r5
81125d04:	108000cc 	andi	r2,r2,3
81125d08:	10001e1e 	bne	r2,zero,81125d84 <strncmp+0x88>
81125d0c:	024000c4 	movi	r9,3
81125d10:	49801c2e 	bgeu	r9,r6,81125d84 <strncmp+0x88>
81125d14:	20800017 	ldw	r2,0(r4)
81125d18:	28c00017 	ldw	r3,0(r5)
81125d1c:	10c0191e 	bne	r2,r3,81125d84 <strncmp+0x88>
81125d20:	31bfff04 	addi	r6,r6,-4
81125d24:	30002726 	beq	r6,zero,81125dc4 <strncmp+0xc8>
81125d28:	02ffbff4 	movhi	r11,65279
81125d2c:	5affbfc4 	addi	r11,r11,-257
81125d30:	0086303a 	nor	r3,zero,r2
81125d34:	02a02074 	movhi	r10,32897
81125d38:	12c5883a 	add	r2,r2,r11
81125d3c:	52a02004 	addi	r10,r10,-32640
81125d40:	10c4703a 	and	r2,r2,r3
81125d44:	1284703a 	and	r2,r2,r10
81125d48:	10000b26 	beq	r2,zero,81125d78 <strncmp+0x7c>
81125d4c:	00001d06 	br	81125dc4 <strncmp+0xc8>
81125d50:	20c00017 	ldw	r3,0(r4)
81125d54:	29c00017 	ldw	r7,0(r5)
81125d58:	1ad1883a 	add	r8,r3,r11
81125d5c:	00c4303a 	nor	r2,zero,r3
81125d60:	4084703a 	and	r2,r8,r2
81125d64:	1284703a 	and	r2,r2,r10
81125d68:	19c0061e 	bne	r3,r7,81125d84 <strncmp+0x88>
81125d6c:	31bfff04 	addi	r6,r6,-4
81125d70:	30001426 	beq	r6,zero,81125dc4 <strncmp+0xc8>
81125d74:	1000131e 	bne	r2,zero,81125dc4 <strncmp+0xc8>
81125d78:	21000104 	addi	r4,r4,4
81125d7c:	29400104 	addi	r5,r5,4
81125d80:	49bff336 	bltu	r9,r6,81125d50 <__reset+0xfb105d50>
81125d84:	28800007 	ldb	r2,0(r5)
81125d88:	20c00007 	ldb	r3,0(r4)
81125d8c:	31bfffc4 	addi	r6,r6,-1
81125d90:	10c0081e 	bne	r2,r3,81125db4 <strncmp+0xb8>
81125d94:	30000b26 	beq	r6,zero,81125dc4 <strncmp+0xc8>
81125d98:	10000a26 	beq	r2,zero,81125dc4 <strncmp+0xc8>
81125d9c:	21000044 	addi	r4,r4,1
81125da0:	29400044 	addi	r5,r5,1
81125da4:	20800007 	ldb	r2,0(r4)
81125da8:	28c00007 	ldb	r3,0(r5)
81125dac:	31bfffc4 	addi	r6,r6,-1
81125db0:	10fff826 	beq	r2,r3,81125d94 <__reset+0xfb105d94>
81125db4:	20800003 	ldbu	r2,0(r4)
81125db8:	28c00003 	ldbu	r3,0(r5)
81125dbc:	10c5c83a 	sub	r2,r2,r3
81125dc0:	f800283a 	ret
81125dc4:	0005883a 	mov	r2,zero
81125dc8:	f800283a 	ret

81125dcc <_wcrtomb_r>:
81125dcc:	defff604 	addi	sp,sp,-40
81125dd0:	00a04534 	movhi	r2,33044
81125dd4:	de00012e 	bgeu	sp,et,81125ddc <_wcrtomb_r+0x10>
81125dd8:	003b68fa 	trap	3
81125ddc:	10916e04 	addi	r2,r2,17848
81125de0:	dc800815 	stw	r18,32(sp)
81125de4:	dc400715 	stw	r17,28(sp)
81125de8:	dc000615 	stw	r16,24(sp)
81125dec:	dfc00915 	stw	ra,36(sp)
81125df0:	2021883a 	mov	r16,r4
81125df4:	3823883a 	mov	r17,r7
81125df8:	14800017 	ldw	r18,0(r2)
81125dfc:	28001426 	beq	r5,zero,81125e50 <_wcrtomb_r+0x84>
81125e00:	d9400415 	stw	r5,16(sp)
81125e04:	d9800515 	stw	r6,20(sp)
81125e08:	111e2fc0 	call	8111e2fc <__locale_charset>
81125e0c:	d9800517 	ldw	r6,20(sp)
81125e10:	d9400417 	ldw	r5,16(sp)
81125e14:	100f883a 	mov	r7,r2
81125e18:	dc400015 	stw	r17,0(sp)
81125e1c:	8009883a 	mov	r4,r16
81125e20:	903ee83a 	callr	r18
81125e24:	00ffffc4 	movi	r3,-1
81125e28:	10c0031e 	bne	r2,r3,81125e38 <_wcrtomb_r+0x6c>
81125e2c:	88000015 	stw	zero,0(r17)
81125e30:	00c02284 	movi	r3,138
81125e34:	80c00015 	stw	r3,0(r16)
81125e38:	dfc00917 	ldw	ra,36(sp)
81125e3c:	dc800817 	ldw	r18,32(sp)
81125e40:	dc400717 	ldw	r17,28(sp)
81125e44:	dc000617 	ldw	r16,24(sp)
81125e48:	dec00a04 	addi	sp,sp,40
81125e4c:	f800283a 	ret
81125e50:	111e2fc0 	call	8111e2fc <__locale_charset>
81125e54:	100f883a 	mov	r7,r2
81125e58:	dc400015 	stw	r17,0(sp)
81125e5c:	000d883a 	mov	r6,zero
81125e60:	d9400104 	addi	r5,sp,4
81125e64:	8009883a 	mov	r4,r16
81125e68:	903ee83a 	callr	r18
81125e6c:	003fed06 	br	81125e24 <__reset+0xfb105e24>

81125e70 <wcrtomb>:
81125e70:	defff604 	addi	sp,sp,-40
81125e74:	00a04534 	movhi	r2,33044
81125e78:	de00012e 	bgeu	sp,et,81125e80 <wcrtomb+0x10>
81125e7c:	003b68fa 	trap	3
81125e80:	10916904 	addi	r2,r2,17828
81125e84:	dc800615 	stw	r18,24(sp)
81125e88:	dc400515 	stw	r17,20(sp)
81125e8c:	dfc00915 	stw	ra,36(sp)
81125e90:	dd000815 	stw	r20,32(sp)
81125e94:	dcc00715 	stw	r19,28(sp)
81125e98:	dc000415 	stw	r16,16(sp)
81125e9c:	3025883a 	mov	r18,r6
81125ea0:	14400017 	ldw	r17,0(r2)
81125ea4:	20001926 	beq	r4,zero,81125f0c <wcrtomb+0x9c>
81125ea8:	00a04534 	movhi	r2,33044
81125eac:	10916e04 	addi	r2,r2,17848
81125eb0:	15000017 	ldw	r20,0(r2)
81125eb4:	2021883a 	mov	r16,r4
81125eb8:	2827883a 	mov	r19,r5
81125ebc:	111e2fc0 	call	8111e2fc <__locale_charset>
81125ec0:	100f883a 	mov	r7,r2
81125ec4:	dc800015 	stw	r18,0(sp)
81125ec8:	980d883a 	mov	r6,r19
81125ecc:	800b883a 	mov	r5,r16
81125ed0:	8809883a 	mov	r4,r17
81125ed4:	a03ee83a 	callr	r20
81125ed8:	00ffffc4 	movi	r3,-1
81125edc:	10c0031e 	bne	r2,r3,81125eec <wcrtomb+0x7c>
81125ee0:	90000015 	stw	zero,0(r18)
81125ee4:	00c02284 	movi	r3,138
81125ee8:	88c00015 	stw	r3,0(r17)
81125eec:	dfc00917 	ldw	ra,36(sp)
81125ef0:	dd000817 	ldw	r20,32(sp)
81125ef4:	dcc00717 	ldw	r19,28(sp)
81125ef8:	dc800617 	ldw	r18,24(sp)
81125efc:	dc400517 	ldw	r17,20(sp)
81125f00:	dc000417 	ldw	r16,16(sp)
81125f04:	dec00a04 	addi	sp,sp,40
81125f08:	f800283a 	ret
81125f0c:	00a04534 	movhi	r2,33044
81125f10:	10916e04 	addi	r2,r2,17848
81125f14:	14000017 	ldw	r16,0(r2)
81125f18:	111e2fc0 	call	8111e2fc <__locale_charset>
81125f1c:	100f883a 	mov	r7,r2
81125f20:	dc800015 	stw	r18,0(sp)
81125f24:	000d883a 	mov	r6,zero
81125f28:	d9400104 	addi	r5,sp,4
81125f2c:	8809883a 	mov	r4,r17
81125f30:	803ee83a 	callr	r16
81125f34:	003fe806 	br	81125ed8 <__reset+0xfb105ed8>

81125f38 <__ascii_wctomb>:
81125f38:	28000526 	beq	r5,zero,81125f50 <__ascii_wctomb+0x18>
81125f3c:	00803fc4 	movi	r2,255
81125f40:	11800536 	bltu	r2,r6,81125f58 <__ascii_wctomb+0x20>
81125f44:	29800005 	stb	r6,0(r5)
81125f48:	00800044 	movi	r2,1
81125f4c:	f800283a 	ret
81125f50:	0005883a 	mov	r2,zero
81125f54:	f800283a 	ret
81125f58:	00802284 	movi	r2,138
81125f5c:	20800015 	stw	r2,0(r4)
81125f60:	00bfffc4 	movi	r2,-1
81125f64:	f800283a 	ret

81125f68 <_wctomb_r>:
81125f68:	00a04534 	movhi	r2,33044
81125f6c:	defff904 	addi	sp,sp,-28
81125f70:	10916e04 	addi	r2,r2,17848
81125f74:	de00012e 	bgeu	sp,et,81125f7c <_wctomb_r+0x14>
81125f78:	003b68fa 	trap	3
81125f7c:	dfc00615 	stw	ra,24(sp)
81125f80:	dc400515 	stw	r17,20(sp)
81125f84:	dc000415 	stw	r16,16(sp)
81125f88:	3823883a 	mov	r17,r7
81125f8c:	14000017 	ldw	r16,0(r2)
81125f90:	d9000115 	stw	r4,4(sp)
81125f94:	d9400215 	stw	r5,8(sp)
81125f98:	d9800315 	stw	r6,12(sp)
81125f9c:	111e2fc0 	call	8111e2fc <__locale_charset>
81125fa0:	d9800317 	ldw	r6,12(sp)
81125fa4:	d9400217 	ldw	r5,8(sp)
81125fa8:	d9000117 	ldw	r4,4(sp)
81125fac:	100f883a 	mov	r7,r2
81125fb0:	dc400015 	stw	r17,0(sp)
81125fb4:	803ee83a 	callr	r16
81125fb8:	dfc00617 	ldw	ra,24(sp)
81125fbc:	dc400517 	ldw	r17,20(sp)
81125fc0:	dc000417 	ldw	r16,16(sp)
81125fc4:	dec00704 	addi	sp,sp,28
81125fc8:	f800283a 	ret

81125fcc <__fixunsdfsi>:
81125fcc:	defffd04 	addi	sp,sp,-12
81125fd0:	000d883a 	mov	r6,zero
81125fd4:	01d07834 	movhi	r7,16864
81125fd8:	de00012e 	bgeu	sp,et,81125fe0 <__fixunsdfsi+0x14>
81125fdc:	003b68fa 	trap	3
81125fe0:	dc400115 	stw	r17,4(sp)
81125fe4:	dc000015 	stw	r16,0(sp)
81125fe8:	dfc00215 	stw	ra,8(sp)
81125fec:	2023883a 	mov	r17,r4
81125ff0:	2821883a 	mov	r16,r5
81125ff4:	11280e40 	call	811280e4 <__gedf2>
81125ff8:	1000080e 	bge	r2,zero,8112601c <__fixunsdfsi+0x50>
81125ffc:	8809883a 	mov	r4,r17
81126000:	800b883a 	mov	r5,r16
81126004:	1128bb80 	call	81128bb8 <__fixdfsi>
81126008:	dfc00217 	ldw	ra,8(sp)
8112600c:	dc400117 	ldw	r17,4(sp)
81126010:	dc000017 	ldw	r16,0(sp)
81126014:	dec00304 	addi	sp,sp,12
81126018:	f800283a 	ret
8112601c:	000d883a 	mov	r6,zero
81126020:	01d07834 	movhi	r7,16864
81126024:	8809883a 	mov	r4,r17
81126028:	800b883a 	mov	r5,r16
8112602c:	11282b40 	call	811282b4 <__subdf3>
81126030:	180b883a 	mov	r5,r3
81126034:	1009883a 	mov	r4,r2
81126038:	1128bb80 	call	81128bb8 <__fixdfsi>
8112603c:	00e00034 	movhi	r3,32768
81126040:	10c5883a 	add	r2,r2,r3
81126044:	003ff006 	br	81126008 <__reset+0xfb106008>

81126048 <__udivdi3>:
81126048:	defff504 	addi	sp,sp,-44
8112604c:	de00012e 	bgeu	sp,et,81126054 <__udivdi3+0xc>
81126050:	003b68fa 	trap	3
81126054:	dcc00415 	stw	r19,16(sp)
81126058:	dc000115 	stw	r16,4(sp)
8112605c:	dfc00a15 	stw	ra,40(sp)
81126060:	df000915 	stw	fp,36(sp)
81126064:	ddc00815 	stw	r23,32(sp)
81126068:	dd800715 	stw	r22,28(sp)
8112606c:	dd400615 	stw	r21,24(sp)
81126070:	dd000515 	stw	r20,20(sp)
81126074:	dc800315 	stw	r18,12(sp)
81126078:	dc400215 	stw	r17,8(sp)
8112607c:	2027883a 	mov	r19,r4
81126080:	2821883a 	mov	r16,r5
81126084:	3800411e 	bne	r7,zero,8112618c <__udivdi3+0x144>
81126088:	3023883a 	mov	r17,r6
8112608c:	2025883a 	mov	r18,r4
81126090:	2980522e 	bgeu	r5,r6,811261dc <__udivdi3+0x194>
81126094:	00bfffd4 	movui	r2,65535
81126098:	282d883a 	mov	r22,r5
8112609c:	1180a836 	bltu	r2,r6,81126340 <__udivdi3+0x2f8>
811260a0:	00803fc4 	movi	r2,255
811260a4:	1185803a 	cmpltu	r2,r2,r6
811260a8:	100490fa 	slli	r2,r2,3
811260ac:	3086d83a 	srl	r3,r6,r2
811260b0:	01204534 	movhi	r4,33044
811260b4:	21069b04 	addi	r4,r4,6764
811260b8:	20c7883a 	add	r3,r4,r3
811260bc:	18c00003 	ldbu	r3,0(r3)
811260c0:	1885883a 	add	r2,r3,r2
811260c4:	00c00804 	movi	r3,32
811260c8:	1887c83a 	sub	r3,r3,r2
811260cc:	18000526 	beq	r3,zero,811260e4 <__udivdi3+0x9c>
811260d0:	80e0983a 	sll	r16,r16,r3
811260d4:	9884d83a 	srl	r2,r19,r2
811260d8:	30e2983a 	sll	r17,r6,r3
811260dc:	98e4983a 	sll	r18,r19,r3
811260e0:	142cb03a 	or	r22,r2,r16
811260e4:	882ad43a 	srli	r21,r17,16
811260e8:	b009883a 	mov	r4,r22
811260ec:	8d3fffcc 	andi	r20,r17,65535
811260f0:	a80b883a 	mov	r5,r21
811260f4:	1126c640 	call	81126c64 <__umodsi3>
811260f8:	b009883a 	mov	r4,r22
811260fc:	a80b883a 	mov	r5,r21
81126100:	1027883a 	mov	r19,r2
81126104:	1126c000 	call	81126c00 <__udivsi3>
81126108:	102d883a 	mov	r22,r2
8112610c:	9826943a 	slli	r19,r19,16
81126110:	9004d43a 	srli	r2,r18,16
81126114:	a5a1383a 	mul	r16,r20,r22
81126118:	14c4b03a 	or	r2,r2,r19
8112611c:	1400052e 	bgeu	r2,r16,81126134 <__udivdi3+0xec>
81126120:	1445883a 	add	r2,r2,r17
81126124:	b0ffffc4 	addi	r3,r22,-1
81126128:	14400136 	bltu	r2,r17,81126130 <__udivdi3+0xe8>
8112612c:	14012336 	bltu	r2,r16,811265bc <__udivdi3+0x574>
81126130:	182d883a 	mov	r22,r3
81126134:	1421c83a 	sub	r16,r2,r16
81126138:	a80b883a 	mov	r5,r21
8112613c:	8009883a 	mov	r4,r16
81126140:	1126c640 	call	81126c64 <__umodsi3>
81126144:	1027883a 	mov	r19,r2
81126148:	a80b883a 	mov	r5,r21
8112614c:	8009883a 	mov	r4,r16
81126150:	1126c000 	call	81126c00 <__udivsi3>
81126154:	9826943a 	slli	r19,r19,16
81126158:	a0a9383a 	mul	r20,r20,r2
8112615c:	94bfffcc 	andi	r18,r18,65535
81126160:	94e4b03a 	or	r18,r18,r19
81126164:	9500052e 	bgeu	r18,r20,8112617c <__udivdi3+0x134>
81126168:	8ca5883a 	add	r18,r17,r18
8112616c:	10ffffc4 	addi	r3,r2,-1
81126170:	9440f136 	bltu	r18,r17,81126538 <__udivdi3+0x4f0>
81126174:	9500f02e 	bgeu	r18,r20,81126538 <__udivdi3+0x4f0>
81126178:	10bfff84 	addi	r2,r2,-2
8112617c:	b00c943a 	slli	r6,r22,16
81126180:	0007883a 	mov	r3,zero
81126184:	3084b03a 	or	r2,r6,r2
81126188:	00005906 	br	811262f0 <__udivdi3+0x2a8>
8112618c:	29c05636 	bltu	r5,r7,811262e8 <__udivdi3+0x2a0>
81126190:	00bfffd4 	movui	r2,65535
81126194:	11c0622e 	bgeu	r2,r7,81126320 <__udivdi3+0x2d8>
81126198:	00804034 	movhi	r2,256
8112619c:	10bfffc4 	addi	r2,r2,-1
811261a0:	11c0ee36 	bltu	r2,r7,8112655c <__udivdi3+0x514>
811261a4:	00800404 	movi	r2,16
811261a8:	3886d83a 	srl	r3,r7,r2
811261ac:	01204534 	movhi	r4,33044
811261b0:	21069b04 	addi	r4,r4,6764
811261b4:	20c7883a 	add	r3,r4,r3
811261b8:	18c00003 	ldbu	r3,0(r3)
811261bc:	05400804 	movi	r21,32
811261c0:	1885883a 	add	r2,r3,r2
811261c4:	a8abc83a 	sub	r21,r21,r2
811261c8:	a800621e 	bne	r21,zero,81126354 <__udivdi3+0x30c>
811261cc:	3c00e936 	bltu	r7,r16,81126574 <__udivdi3+0x52c>
811261d0:	9985403a 	cmpgeu	r2,r19,r6
811261d4:	0007883a 	mov	r3,zero
811261d8:	00004506 	br	811262f0 <__udivdi3+0x2a8>
811261dc:	3000041e 	bne	r6,zero,811261f0 <__udivdi3+0x1a8>
811261e0:	000b883a 	mov	r5,zero
811261e4:	01000044 	movi	r4,1
811261e8:	1126c000 	call	81126c00 <__udivsi3>
811261ec:	1023883a 	mov	r17,r2
811261f0:	00bfffd4 	movui	r2,65535
811261f4:	14404e2e 	bgeu	r2,r17,81126330 <__udivdi3+0x2e8>
811261f8:	00804034 	movhi	r2,256
811261fc:	10bfffc4 	addi	r2,r2,-1
81126200:	1440d836 	bltu	r2,r17,81126564 <__udivdi3+0x51c>
81126204:	00800404 	movi	r2,16
81126208:	8886d83a 	srl	r3,r17,r2
8112620c:	01204534 	movhi	r4,33044
81126210:	21069b04 	addi	r4,r4,6764
81126214:	20c7883a 	add	r3,r4,r3
81126218:	18c00003 	ldbu	r3,0(r3)
8112621c:	1885883a 	add	r2,r3,r2
81126220:	00c00804 	movi	r3,32
81126224:	1887c83a 	sub	r3,r3,r2
81126228:	18008f1e 	bne	r3,zero,81126468 <__udivdi3+0x420>
8112622c:	882ad43a 	srli	r21,r17,16
81126230:	8461c83a 	sub	r16,r16,r17
81126234:	8d3fffcc 	andi	r20,r17,65535
81126238:	00c00044 	movi	r3,1
8112623c:	8009883a 	mov	r4,r16
81126240:	a80b883a 	mov	r5,r21
81126244:	d8c00015 	stw	r3,0(sp)
81126248:	1126c640 	call	81126c64 <__umodsi3>
8112624c:	8009883a 	mov	r4,r16
81126250:	a80b883a 	mov	r5,r21
81126254:	1027883a 	mov	r19,r2
81126258:	1126c000 	call	81126c00 <__udivsi3>
8112625c:	9826943a 	slli	r19,r19,16
81126260:	9008d43a 	srli	r4,r18,16
81126264:	1521383a 	mul	r16,r2,r20
81126268:	102d883a 	mov	r22,r2
8112626c:	24c8b03a 	or	r4,r4,r19
81126270:	d8c00017 	ldw	r3,0(sp)
81126274:	2400052e 	bgeu	r4,r16,8112628c <__udivdi3+0x244>
81126278:	2449883a 	add	r4,r4,r17
8112627c:	b0bfffc4 	addi	r2,r22,-1
81126280:	24400136 	bltu	r4,r17,81126288 <__udivdi3+0x240>
81126284:	2400ca36 	bltu	r4,r16,811265b0 <__udivdi3+0x568>
81126288:	102d883a 	mov	r22,r2
8112628c:	2421c83a 	sub	r16,r4,r16
81126290:	a80b883a 	mov	r5,r21
81126294:	8009883a 	mov	r4,r16
81126298:	d8c00015 	stw	r3,0(sp)
8112629c:	1126c640 	call	81126c64 <__umodsi3>
811262a0:	1027883a 	mov	r19,r2
811262a4:	a80b883a 	mov	r5,r21
811262a8:	8009883a 	mov	r4,r16
811262ac:	1126c000 	call	81126c00 <__udivsi3>
811262b0:	9826943a 	slli	r19,r19,16
811262b4:	1529383a 	mul	r20,r2,r20
811262b8:	94bfffcc 	andi	r18,r18,65535
811262bc:	94e4b03a 	or	r18,r18,r19
811262c0:	d8c00017 	ldw	r3,0(sp)
811262c4:	9500052e 	bgeu	r18,r20,811262dc <__udivdi3+0x294>
811262c8:	8ca5883a 	add	r18,r17,r18
811262cc:	113fffc4 	addi	r4,r2,-1
811262d0:	94409736 	bltu	r18,r17,81126530 <__udivdi3+0x4e8>
811262d4:	9500962e 	bgeu	r18,r20,81126530 <__udivdi3+0x4e8>
811262d8:	10bfff84 	addi	r2,r2,-2
811262dc:	b00c943a 	slli	r6,r22,16
811262e0:	3084b03a 	or	r2,r6,r2
811262e4:	00000206 	br	811262f0 <__udivdi3+0x2a8>
811262e8:	0007883a 	mov	r3,zero
811262ec:	0005883a 	mov	r2,zero
811262f0:	dfc00a17 	ldw	ra,40(sp)
811262f4:	df000917 	ldw	fp,36(sp)
811262f8:	ddc00817 	ldw	r23,32(sp)
811262fc:	dd800717 	ldw	r22,28(sp)
81126300:	dd400617 	ldw	r21,24(sp)
81126304:	dd000517 	ldw	r20,20(sp)
81126308:	dcc00417 	ldw	r19,16(sp)
8112630c:	dc800317 	ldw	r18,12(sp)
81126310:	dc400217 	ldw	r17,8(sp)
81126314:	dc000117 	ldw	r16,4(sp)
81126318:	dec00b04 	addi	sp,sp,44
8112631c:	f800283a 	ret
81126320:	00803fc4 	movi	r2,255
81126324:	11c5803a 	cmpltu	r2,r2,r7
81126328:	100490fa 	slli	r2,r2,3
8112632c:	003f9e06 	br	811261a8 <__reset+0xfb1061a8>
81126330:	00803fc4 	movi	r2,255
81126334:	1445803a 	cmpltu	r2,r2,r17
81126338:	100490fa 	slli	r2,r2,3
8112633c:	003fb206 	br	81126208 <__reset+0xfb106208>
81126340:	00804034 	movhi	r2,256
81126344:	10bfffc4 	addi	r2,r2,-1
81126348:	11808836 	bltu	r2,r6,8112656c <__udivdi3+0x524>
8112634c:	00800404 	movi	r2,16
81126350:	003f5606 	br	811260ac <__reset+0xfb1060ac>
81126354:	30aed83a 	srl	r23,r6,r2
81126358:	3d4e983a 	sll	r7,r7,r21
8112635c:	80acd83a 	srl	r22,r16,r2
81126360:	9884d83a 	srl	r2,r19,r2
81126364:	3deeb03a 	or	r23,r7,r23
81126368:	b824d43a 	srli	r18,r23,16
8112636c:	8560983a 	sll	r16,r16,r21
81126370:	b009883a 	mov	r4,r22
81126374:	900b883a 	mov	r5,r18
81126378:	3568983a 	sll	r20,r6,r21
8112637c:	1420b03a 	or	r16,r2,r16
81126380:	1126c640 	call	81126c64 <__umodsi3>
81126384:	b009883a 	mov	r4,r22
81126388:	900b883a 	mov	r5,r18
8112638c:	1023883a 	mov	r17,r2
81126390:	1126c000 	call	81126c00 <__udivsi3>
81126394:	8808943a 	slli	r4,r17,16
81126398:	bf3fffcc 	andi	fp,r23,65535
8112639c:	8006d43a 	srli	r3,r16,16
811263a0:	e0a3383a 	mul	r17,fp,r2
811263a4:	100d883a 	mov	r6,r2
811263a8:	1906b03a 	or	r3,r3,r4
811263ac:	1c40042e 	bgeu	r3,r17,811263c0 <__udivdi3+0x378>
811263b0:	1dc7883a 	add	r3,r3,r23
811263b4:	10bfffc4 	addi	r2,r2,-1
811263b8:	1dc0752e 	bgeu	r3,r23,81126590 <__udivdi3+0x548>
811263bc:	100d883a 	mov	r6,r2
811263c0:	1c63c83a 	sub	r17,r3,r17
811263c4:	900b883a 	mov	r5,r18
811263c8:	8809883a 	mov	r4,r17
811263cc:	d9800015 	stw	r6,0(sp)
811263d0:	1126c640 	call	81126c64 <__umodsi3>
811263d4:	102d883a 	mov	r22,r2
811263d8:	8809883a 	mov	r4,r17
811263dc:	900b883a 	mov	r5,r18
811263e0:	1126c000 	call	81126c00 <__udivsi3>
811263e4:	b02c943a 	slli	r22,r22,16
811263e8:	e089383a 	mul	r4,fp,r2
811263ec:	843fffcc 	andi	r16,r16,65535
811263f0:	85a0b03a 	or	r16,r16,r22
811263f4:	d9800017 	ldw	r6,0(sp)
811263f8:	8100042e 	bgeu	r16,r4,8112640c <__udivdi3+0x3c4>
811263fc:	85e1883a 	add	r16,r16,r23
81126400:	10ffffc4 	addi	r3,r2,-1
81126404:	85c05e2e 	bgeu	r16,r23,81126580 <__udivdi3+0x538>
81126408:	1805883a 	mov	r2,r3
8112640c:	300c943a 	slli	r6,r6,16
81126410:	a17fffcc 	andi	r5,r20,65535
81126414:	a028d43a 	srli	r20,r20,16
81126418:	3084b03a 	or	r2,r6,r2
8112641c:	10ffffcc 	andi	r3,r2,65535
81126420:	100cd43a 	srli	r6,r2,16
81126424:	194f383a 	mul	r7,r3,r5
81126428:	1d07383a 	mul	r3,r3,r20
8112642c:	314b383a 	mul	r5,r6,r5
81126430:	3810d43a 	srli	r8,r7,16
81126434:	8121c83a 	sub	r16,r16,r4
81126438:	1947883a 	add	r3,r3,r5
8112643c:	40c7883a 	add	r3,r8,r3
81126440:	350d383a 	mul	r6,r6,r20
81126444:	1940022e 	bgeu	r3,r5,81126450 <__udivdi3+0x408>
81126448:	01000074 	movhi	r4,1
8112644c:	310d883a 	add	r6,r6,r4
81126450:	1828d43a 	srli	r20,r3,16
81126454:	a18d883a 	add	r6,r20,r6
81126458:	81803e36 	bltu	r16,r6,81126554 <__udivdi3+0x50c>
8112645c:	81803826 	beq	r16,r6,81126540 <__udivdi3+0x4f8>
81126460:	0007883a 	mov	r3,zero
81126464:	003fa206 	br	811262f0 <__reset+0xfb1062f0>
81126468:	88e2983a 	sll	r17,r17,r3
8112646c:	80a8d83a 	srl	r20,r16,r2
81126470:	80e0983a 	sll	r16,r16,r3
81126474:	882ad43a 	srli	r21,r17,16
81126478:	9884d83a 	srl	r2,r19,r2
8112647c:	a009883a 	mov	r4,r20
81126480:	a80b883a 	mov	r5,r21
81126484:	142eb03a 	or	r23,r2,r16
81126488:	98e4983a 	sll	r18,r19,r3
8112648c:	1126c640 	call	81126c64 <__umodsi3>
81126490:	a009883a 	mov	r4,r20
81126494:	a80b883a 	mov	r5,r21
81126498:	1021883a 	mov	r16,r2
8112649c:	1126c000 	call	81126c00 <__udivsi3>
811264a0:	1039883a 	mov	fp,r2
811264a4:	8d3fffcc 	andi	r20,r17,65535
811264a8:	8020943a 	slli	r16,r16,16
811264ac:	b804d43a 	srli	r2,r23,16
811264b0:	a72d383a 	mul	r22,r20,fp
811264b4:	1404b03a 	or	r2,r2,r16
811264b8:	1580062e 	bgeu	r2,r22,811264d4 <__udivdi3+0x48c>
811264bc:	1445883a 	add	r2,r2,r17
811264c0:	e0ffffc4 	addi	r3,fp,-1
811264c4:	14403836 	bltu	r2,r17,811265a8 <__udivdi3+0x560>
811264c8:	1580372e 	bgeu	r2,r22,811265a8 <__udivdi3+0x560>
811264cc:	e73fff84 	addi	fp,fp,-2
811264d0:	1445883a 	add	r2,r2,r17
811264d4:	15adc83a 	sub	r22,r2,r22
811264d8:	a80b883a 	mov	r5,r21
811264dc:	b009883a 	mov	r4,r22
811264e0:	1126c640 	call	81126c64 <__umodsi3>
811264e4:	1027883a 	mov	r19,r2
811264e8:	b009883a 	mov	r4,r22
811264ec:	a80b883a 	mov	r5,r21
811264f0:	1126c000 	call	81126c00 <__udivsi3>
811264f4:	9826943a 	slli	r19,r19,16
811264f8:	a0a1383a 	mul	r16,r20,r2
811264fc:	b93fffcc 	andi	r4,r23,65535
81126500:	24c8b03a 	or	r4,r4,r19
81126504:	2400062e 	bgeu	r4,r16,81126520 <__udivdi3+0x4d8>
81126508:	2449883a 	add	r4,r4,r17
8112650c:	10ffffc4 	addi	r3,r2,-1
81126510:	24402336 	bltu	r4,r17,811265a0 <__udivdi3+0x558>
81126514:	2400222e 	bgeu	r4,r16,811265a0 <__udivdi3+0x558>
81126518:	10bfff84 	addi	r2,r2,-2
8112651c:	2449883a 	add	r4,r4,r17
81126520:	e038943a 	slli	fp,fp,16
81126524:	2421c83a 	sub	r16,r4,r16
81126528:	e086b03a 	or	r3,fp,r2
8112652c:	003f4306 	br	8112623c <__reset+0xfb10623c>
81126530:	2005883a 	mov	r2,r4
81126534:	003f6906 	br	811262dc <__reset+0xfb1062dc>
81126538:	1805883a 	mov	r2,r3
8112653c:	003f0f06 	br	8112617c <__reset+0xfb10617c>
81126540:	1806943a 	slli	r3,r3,16
81126544:	9d66983a 	sll	r19,r19,r21
81126548:	39ffffcc 	andi	r7,r7,65535
8112654c:	19c7883a 	add	r3,r3,r7
81126550:	98ffc32e 	bgeu	r19,r3,81126460 <__reset+0xfb106460>
81126554:	10bfffc4 	addi	r2,r2,-1
81126558:	003fc106 	br	81126460 <__reset+0xfb106460>
8112655c:	00800604 	movi	r2,24
81126560:	003f1106 	br	811261a8 <__reset+0xfb1061a8>
81126564:	00800604 	movi	r2,24
81126568:	003f2706 	br	81126208 <__reset+0xfb106208>
8112656c:	00800604 	movi	r2,24
81126570:	003ece06 	br	811260ac <__reset+0xfb1060ac>
81126574:	0007883a 	mov	r3,zero
81126578:	00800044 	movi	r2,1
8112657c:	003f5c06 	br	811262f0 <__reset+0xfb1062f0>
81126580:	813fa12e 	bgeu	r16,r4,81126408 <__reset+0xfb106408>
81126584:	10bfff84 	addi	r2,r2,-2
81126588:	85e1883a 	add	r16,r16,r23
8112658c:	003f9f06 	br	8112640c <__reset+0xfb10640c>
81126590:	1c7f8a2e 	bgeu	r3,r17,811263bc <__reset+0xfb1063bc>
81126594:	31bfff84 	addi	r6,r6,-2
81126598:	1dc7883a 	add	r3,r3,r23
8112659c:	003f8806 	br	811263c0 <__reset+0xfb1063c0>
811265a0:	1805883a 	mov	r2,r3
811265a4:	003fde06 	br	81126520 <__reset+0xfb106520>
811265a8:	1839883a 	mov	fp,r3
811265ac:	003fc906 	br	811264d4 <__reset+0xfb1064d4>
811265b0:	b5bfff84 	addi	r22,r22,-2
811265b4:	2449883a 	add	r4,r4,r17
811265b8:	003f3406 	br	8112628c <__reset+0xfb10628c>
811265bc:	b5bfff84 	addi	r22,r22,-2
811265c0:	1445883a 	add	r2,r2,r17
811265c4:	003edb06 	br	81126134 <__reset+0xfb106134>

811265c8 <__umoddi3>:
811265c8:	defff404 	addi	sp,sp,-48
811265cc:	de00012e 	bgeu	sp,et,811265d4 <__umoddi3+0xc>
811265d0:	003b68fa 	trap	3
811265d4:	df000a15 	stw	fp,40(sp)
811265d8:	dc400315 	stw	r17,12(sp)
811265dc:	dc000215 	stw	r16,8(sp)
811265e0:	dfc00b15 	stw	ra,44(sp)
811265e4:	ddc00915 	stw	r23,36(sp)
811265e8:	dd800815 	stw	r22,32(sp)
811265ec:	dd400715 	stw	r21,28(sp)
811265f0:	dd000615 	stw	r20,24(sp)
811265f4:	dcc00515 	stw	r19,20(sp)
811265f8:	dc800415 	stw	r18,16(sp)
811265fc:	2021883a 	mov	r16,r4
81126600:	2823883a 	mov	r17,r5
81126604:	2839883a 	mov	fp,r5
81126608:	38003c1e 	bne	r7,zero,811266fc <__umoddi3+0x134>
8112660c:	3027883a 	mov	r19,r6
81126610:	2029883a 	mov	r20,r4
81126614:	2980512e 	bgeu	r5,r6,8112675c <__umoddi3+0x194>
81126618:	00bfffd4 	movui	r2,65535
8112661c:	11809a36 	bltu	r2,r6,81126888 <__umoddi3+0x2c0>
81126620:	01003fc4 	movi	r4,255
81126624:	2189803a 	cmpltu	r4,r4,r6
81126628:	200890fa 	slli	r4,r4,3
8112662c:	3104d83a 	srl	r2,r6,r4
81126630:	00e04534 	movhi	r3,33044
81126634:	18c69b04 	addi	r3,r3,6764
81126638:	1885883a 	add	r2,r3,r2
8112663c:	10c00003 	ldbu	r3,0(r2)
81126640:	00800804 	movi	r2,32
81126644:	1909883a 	add	r4,r3,r4
81126648:	1125c83a 	sub	r18,r2,r4
8112664c:	90000526 	beq	r18,zero,81126664 <__umoddi3+0x9c>
81126650:	8ca2983a 	sll	r17,r17,r18
81126654:	8108d83a 	srl	r4,r16,r4
81126658:	34a6983a 	sll	r19,r6,r18
8112665c:	84a8983a 	sll	r20,r16,r18
81126660:	2478b03a 	or	fp,r4,r17
81126664:	982ed43a 	srli	r23,r19,16
81126668:	e009883a 	mov	r4,fp
8112666c:	9dbfffcc 	andi	r22,r19,65535
81126670:	b80b883a 	mov	r5,r23
81126674:	1126c640 	call	81126c64 <__umodsi3>
81126678:	e009883a 	mov	r4,fp
8112667c:	b80b883a 	mov	r5,r23
81126680:	102b883a 	mov	r21,r2
81126684:	1126c000 	call	81126c00 <__udivsi3>
81126688:	a806943a 	slli	r3,r21,16
8112668c:	a008d43a 	srli	r4,r20,16
81126690:	b085383a 	mul	r2,r22,r2
81126694:	20c8b03a 	or	r4,r4,r3
81126698:	2080032e 	bgeu	r4,r2,811266a8 <__umoddi3+0xe0>
8112669c:	24c9883a 	add	r4,r4,r19
811266a0:	24c00136 	bltu	r4,r19,811266a8 <__umoddi3+0xe0>
811266a4:	20811036 	bltu	r4,r2,81126ae8 <__umoddi3+0x520>
811266a8:	20abc83a 	sub	r21,r4,r2
811266ac:	b80b883a 	mov	r5,r23
811266b0:	a809883a 	mov	r4,r21
811266b4:	1126c640 	call	81126c64 <__umodsi3>
811266b8:	1023883a 	mov	r17,r2
811266bc:	b80b883a 	mov	r5,r23
811266c0:	a809883a 	mov	r4,r21
811266c4:	1126c000 	call	81126c00 <__udivsi3>
811266c8:	8822943a 	slli	r17,r17,16
811266cc:	b085383a 	mul	r2,r22,r2
811266d0:	a0ffffcc 	andi	r3,r20,65535
811266d4:	1c46b03a 	or	r3,r3,r17
811266d8:	1880042e 	bgeu	r3,r2,811266ec <__umoddi3+0x124>
811266dc:	1cc7883a 	add	r3,r3,r19
811266e0:	1cc00236 	bltu	r3,r19,811266ec <__umoddi3+0x124>
811266e4:	1880012e 	bgeu	r3,r2,811266ec <__umoddi3+0x124>
811266e8:	1cc7883a 	add	r3,r3,r19
811266ec:	1885c83a 	sub	r2,r3,r2
811266f0:	1484d83a 	srl	r2,r2,r18
811266f4:	0007883a 	mov	r3,zero
811266f8:	00004f06 	br	81126838 <__umoddi3+0x270>
811266fc:	29c04c36 	bltu	r5,r7,81126830 <__umoddi3+0x268>
81126700:	00bfffd4 	movui	r2,65535
81126704:	11c0582e 	bgeu	r2,r7,81126868 <__umoddi3+0x2a0>
81126708:	00804034 	movhi	r2,256
8112670c:	10bfffc4 	addi	r2,r2,-1
81126710:	11c0e736 	bltu	r2,r7,81126ab0 <__umoddi3+0x4e8>
81126714:	01000404 	movi	r4,16
81126718:	3904d83a 	srl	r2,r7,r4
8112671c:	00e04534 	movhi	r3,33044
81126720:	18c69b04 	addi	r3,r3,6764
81126724:	1885883a 	add	r2,r3,r2
81126728:	14c00003 	ldbu	r19,0(r2)
8112672c:	00c00804 	movi	r3,32
81126730:	9927883a 	add	r19,r19,r4
81126734:	1ce9c83a 	sub	r20,r3,r19
81126738:	a000581e 	bne	r20,zero,8112689c <__umoddi3+0x2d4>
8112673c:	3c400136 	bltu	r7,r17,81126744 <__umoddi3+0x17c>
81126740:	8180eb36 	bltu	r16,r6,81126af0 <__umoddi3+0x528>
81126744:	8185c83a 	sub	r2,r16,r6
81126748:	89e3c83a 	sub	r17,r17,r7
8112674c:	8089803a 	cmpltu	r4,r16,r2
81126750:	8939c83a 	sub	fp,r17,r4
81126754:	e007883a 	mov	r3,fp
81126758:	00003706 	br	81126838 <__umoddi3+0x270>
8112675c:	3000041e 	bne	r6,zero,81126770 <__umoddi3+0x1a8>
81126760:	000b883a 	mov	r5,zero
81126764:	01000044 	movi	r4,1
81126768:	1126c000 	call	81126c00 <__udivsi3>
8112676c:	1027883a 	mov	r19,r2
81126770:	00bfffd4 	movui	r2,65535
81126774:	14c0402e 	bgeu	r2,r19,81126878 <__umoddi3+0x2b0>
81126778:	00804034 	movhi	r2,256
8112677c:	10bfffc4 	addi	r2,r2,-1
81126780:	14c0cd36 	bltu	r2,r19,81126ab8 <__umoddi3+0x4f0>
81126784:	00800404 	movi	r2,16
81126788:	9886d83a 	srl	r3,r19,r2
8112678c:	01204534 	movhi	r4,33044
81126790:	21069b04 	addi	r4,r4,6764
81126794:	20c7883a 	add	r3,r4,r3
81126798:	18c00003 	ldbu	r3,0(r3)
8112679c:	1887883a 	add	r3,r3,r2
811267a0:	00800804 	movi	r2,32
811267a4:	10e5c83a 	sub	r18,r2,r3
811267a8:	9000901e 	bne	r18,zero,811269ec <__umoddi3+0x424>
811267ac:	982cd43a 	srli	r22,r19,16
811267b0:	8ce3c83a 	sub	r17,r17,r19
811267b4:	9d7fffcc 	andi	r21,r19,65535
811267b8:	b00b883a 	mov	r5,r22
811267bc:	8809883a 	mov	r4,r17
811267c0:	1126c640 	call	81126c64 <__umodsi3>
811267c4:	8809883a 	mov	r4,r17
811267c8:	b00b883a 	mov	r5,r22
811267cc:	1021883a 	mov	r16,r2
811267d0:	1126c000 	call	81126c00 <__udivsi3>
811267d4:	8006943a 	slli	r3,r16,16
811267d8:	a008d43a 	srli	r4,r20,16
811267dc:	1545383a 	mul	r2,r2,r21
811267e0:	20c8b03a 	or	r4,r4,r3
811267e4:	2080042e 	bgeu	r4,r2,811267f8 <__umoddi3+0x230>
811267e8:	24c9883a 	add	r4,r4,r19
811267ec:	24c00236 	bltu	r4,r19,811267f8 <__umoddi3+0x230>
811267f0:	2080012e 	bgeu	r4,r2,811267f8 <__umoddi3+0x230>
811267f4:	24c9883a 	add	r4,r4,r19
811267f8:	20a1c83a 	sub	r16,r4,r2
811267fc:	b00b883a 	mov	r5,r22
81126800:	8009883a 	mov	r4,r16
81126804:	1126c640 	call	81126c64 <__umodsi3>
81126808:	1023883a 	mov	r17,r2
8112680c:	b00b883a 	mov	r5,r22
81126810:	8009883a 	mov	r4,r16
81126814:	1126c000 	call	81126c00 <__udivsi3>
81126818:	8822943a 	slli	r17,r17,16
8112681c:	1545383a 	mul	r2,r2,r21
81126820:	a53fffcc 	andi	r20,r20,65535
81126824:	a446b03a 	or	r3,r20,r17
81126828:	18bfb02e 	bgeu	r3,r2,811266ec <__reset+0xfb1066ec>
8112682c:	003fab06 	br	811266dc <__reset+0xfb1066dc>
81126830:	2005883a 	mov	r2,r4
81126834:	2807883a 	mov	r3,r5
81126838:	dfc00b17 	ldw	ra,44(sp)
8112683c:	df000a17 	ldw	fp,40(sp)
81126840:	ddc00917 	ldw	r23,36(sp)
81126844:	dd800817 	ldw	r22,32(sp)
81126848:	dd400717 	ldw	r21,28(sp)
8112684c:	dd000617 	ldw	r20,24(sp)
81126850:	dcc00517 	ldw	r19,20(sp)
81126854:	dc800417 	ldw	r18,16(sp)
81126858:	dc400317 	ldw	r17,12(sp)
8112685c:	dc000217 	ldw	r16,8(sp)
81126860:	dec00c04 	addi	sp,sp,48
81126864:	f800283a 	ret
81126868:	04c03fc4 	movi	r19,255
8112686c:	99c9803a 	cmpltu	r4,r19,r7
81126870:	200890fa 	slli	r4,r4,3
81126874:	003fa806 	br	81126718 <__reset+0xfb106718>
81126878:	00803fc4 	movi	r2,255
8112687c:	14c5803a 	cmpltu	r2,r2,r19
81126880:	100490fa 	slli	r2,r2,3
81126884:	003fc006 	br	81126788 <__reset+0xfb106788>
81126888:	00804034 	movhi	r2,256
8112688c:	10bfffc4 	addi	r2,r2,-1
81126890:	11808b36 	bltu	r2,r6,81126ac0 <__umoddi3+0x4f8>
81126894:	01000404 	movi	r4,16
81126898:	003f6406 	br	8112662c <__reset+0xfb10662c>
8112689c:	34c4d83a 	srl	r2,r6,r19
811268a0:	3d0e983a 	sll	r7,r7,r20
811268a4:	8cf8d83a 	srl	fp,r17,r19
811268a8:	8d10983a 	sll	r8,r17,r20
811268ac:	38aab03a 	or	r21,r7,r2
811268b0:	a82cd43a 	srli	r22,r21,16
811268b4:	84e2d83a 	srl	r17,r16,r19
811268b8:	e009883a 	mov	r4,fp
811268bc:	b00b883a 	mov	r5,r22
811268c0:	8a22b03a 	or	r17,r17,r8
811268c4:	3524983a 	sll	r18,r6,r20
811268c8:	1126c640 	call	81126c64 <__umodsi3>
811268cc:	e009883a 	mov	r4,fp
811268d0:	b00b883a 	mov	r5,r22
811268d4:	102f883a 	mov	r23,r2
811268d8:	1126c000 	call	81126c00 <__udivsi3>
811268dc:	100d883a 	mov	r6,r2
811268e0:	b808943a 	slli	r4,r23,16
811268e4:	aa3fffcc 	andi	r8,r21,65535
811268e8:	8804d43a 	srli	r2,r17,16
811268ec:	41af383a 	mul	r23,r8,r6
811268f0:	8520983a 	sll	r16,r16,r20
811268f4:	1104b03a 	or	r2,r2,r4
811268f8:	15c0042e 	bgeu	r2,r23,8112690c <__umoddi3+0x344>
811268fc:	1545883a 	add	r2,r2,r21
81126900:	30ffffc4 	addi	r3,r6,-1
81126904:	1540742e 	bgeu	r2,r21,81126ad8 <__umoddi3+0x510>
81126908:	180d883a 	mov	r6,r3
8112690c:	15efc83a 	sub	r23,r2,r23
81126910:	b00b883a 	mov	r5,r22
81126914:	b809883a 	mov	r4,r23
81126918:	d9800115 	stw	r6,4(sp)
8112691c:	da000015 	stw	r8,0(sp)
81126920:	1126c640 	call	81126c64 <__umodsi3>
81126924:	b00b883a 	mov	r5,r22
81126928:	b809883a 	mov	r4,r23
8112692c:	1039883a 	mov	fp,r2
81126930:	1126c000 	call	81126c00 <__udivsi3>
81126934:	da000017 	ldw	r8,0(sp)
81126938:	e038943a 	slli	fp,fp,16
8112693c:	100b883a 	mov	r5,r2
81126940:	4089383a 	mul	r4,r8,r2
81126944:	8a3fffcc 	andi	r8,r17,65535
81126948:	4710b03a 	or	r8,r8,fp
8112694c:	d9800117 	ldw	r6,4(sp)
81126950:	4100042e 	bgeu	r8,r4,81126964 <__umoddi3+0x39c>
81126954:	4551883a 	add	r8,r8,r21
81126958:	10bfffc4 	addi	r2,r2,-1
8112695c:	45405a2e 	bgeu	r8,r21,81126ac8 <__umoddi3+0x500>
81126960:	100b883a 	mov	r5,r2
81126964:	300c943a 	slli	r6,r6,16
81126968:	91ffffcc 	andi	r7,r18,65535
8112696c:	9004d43a 	srli	r2,r18,16
81126970:	314cb03a 	or	r6,r6,r5
81126974:	317fffcc 	andi	r5,r6,65535
81126978:	300cd43a 	srli	r6,r6,16
8112697c:	29d3383a 	mul	r9,r5,r7
81126980:	288b383a 	mul	r5,r5,r2
81126984:	31cf383a 	mul	r7,r6,r7
81126988:	4806d43a 	srli	r3,r9,16
8112698c:	4111c83a 	sub	r8,r8,r4
81126990:	29cb883a 	add	r5,r5,r7
81126994:	194b883a 	add	r5,r3,r5
81126998:	3085383a 	mul	r2,r6,r2
8112699c:	29c0022e 	bgeu	r5,r7,811269a8 <__umoddi3+0x3e0>
811269a0:	00c00074 	movhi	r3,1
811269a4:	10c5883a 	add	r2,r2,r3
811269a8:	2808d43a 	srli	r4,r5,16
811269ac:	280a943a 	slli	r5,r5,16
811269b0:	4a7fffcc 	andi	r9,r9,65535
811269b4:	2085883a 	add	r2,r4,r2
811269b8:	2a4b883a 	add	r5,r5,r9
811269bc:	40803636 	bltu	r8,r2,81126a98 <__umoddi3+0x4d0>
811269c0:	40804d26 	beq	r8,r2,81126af8 <__umoddi3+0x530>
811269c4:	4089c83a 	sub	r4,r8,r2
811269c8:	280f883a 	mov	r7,r5
811269cc:	81cfc83a 	sub	r7,r16,r7
811269d0:	81c7803a 	cmpltu	r3,r16,r7
811269d4:	20c7c83a 	sub	r3,r4,r3
811269d8:	1cc4983a 	sll	r2,r3,r19
811269dc:	3d0ed83a 	srl	r7,r7,r20
811269e0:	1d06d83a 	srl	r3,r3,r20
811269e4:	11c4b03a 	or	r2,r2,r7
811269e8:	003f9306 	br	81126838 <__reset+0xfb106838>
811269ec:	9ca6983a 	sll	r19,r19,r18
811269f0:	88e8d83a 	srl	r20,r17,r3
811269f4:	80c4d83a 	srl	r2,r16,r3
811269f8:	982cd43a 	srli	r22,r19,16
811269fc:	8ca2983a 	sll	r17,r17,r18
81126a00:	a009883a 	mov	r4,r20
81126a04:	b00b883a 	mov	r5,r22
81126a08:	1478b03a 	or	fp,r2,r17
81126a0c:	1126c640 	call	81126c64 <__umodsi3>
81126a10:	a009883a 	mov	r4,r20
81126a14:	b00b883a 	mov	r5,r22
81126a18:	1023883a 	mov	r17,r2
81126a1c:	1126c000 	call	81126c00 <__udivsi3>
81126a20:	9d7fffcc 	andi	r21,r19,65535
81126a24:	880a943a 	slli	r5,r17,16
81126a28:	e008d43a 	srli	r4,fp,16
81126a2c:	a885383a 	mul	r2,r21,r2
81126a30:	84a8983a 	sll	r20,r16,r18
81126a34:	2148b03a 	or	r4,r4,r5
81126a38:	2080042e 	bgeu	r4,r2,81126a4c <__umoddi3+0x484>
81126a3c:	24c9883a 	add	r4,r4,r19
81126a40:	24c00236 	bltu	r4,r19,81126a4c <__umoddi3+0x484>
81126a44:	2080012e 	bgeu	r4,r2,81126a4c <__umoddi3+0x484>
81126a48:	24c9883a 	add	r4,r4,r19
81126a4c:	20a3c83a 	sub	r17,r4,r2
81126a50:	b00b883a 	mov	r5,r22
81126a54:	8809883a 	mov	r4,r17
81126a58:	1126c640 	call	81126c64 <__umodsi3>
81126a5c:	102f883a 	mov	r23,r2
81126a60:	8809883a 	mov	r4,r17
81126a64:	b00b883a 	mov	r5,r22
81126a68:	1126c000 	call	81126c00 <__udivsi3>
81126a6c:	b82e943a 	slli	r23,r23,16
81126a70:	a885383a 	mul	r2,r21,r2
81126a74:	e13fffcc 	andi	r4,fp,65535
81126a78:	25c8b03a 	or	r4,r4,r23
81126a7c:	2080042e 	bgeu	r4,r2,81126a90 <__umoddi3+0x4c8>
81126a80:	24c9883a 	add	r4,r4,r19
81126a84:	24c00236 	bltu	r4,r19,81126a90 <__umoddi3+0x4c8>
81126a88:	2080012e 	bgeu	r4,r2,81126a90 <__umoddi3+0x4c8>
81126a8c:	24c9883a 	add	r4,r4,r19
81126a90:	20a3c83a 	sub	r17,r4,r2
81126a94:	003f4806 	br	811267b8 <__reset+0xfb1067b8>
81126a98:	2c8fc83a 	sub	r7,r5,r18
81126a9c:	1545c83a 	sub	r2,r2,r21
81126aa0:	29cb803a 	cmpltu	r5,r5,r7
81126aa4:	1145c83a 	sub	r2,r2,r5
81126aa8:	4089c83a 	sub	r4,r8,r2
81126aac:	003fc706 	br	811269cc <__reset+0xfb1069cc>
81126ab0:	01000604 	movi	r4,24
81126ab4:	003f1806 	br	81126718 <__reset+0xfb106718>
81126ab8:	00800604 	movi	r2,24
81126abc:	003f3206 	br	81126788 <__reset+0xfb106788>
81126ac0:	01000604 	movi	r4,24
81126ac4:	003ed906 	br	8112662c <__reset+0xfb10662c>
81126ac8:	413fa52e 	bgeu	r8,r4,81126960 <__reset+0xfb106960>
81126acc:	297fff84 	addi	r5,r5,-2
81126ad0:	4551883a 	add	r8,r8,r21
81126ad4:	003fa306 	br	81126964 <__reset+0xfb106964>
81126ad8:	15ff8b2e 	bgeu	r2,r23,81126908 <__reset+0xfb106908>
81126adc:	31bfff84 	addi	r6,r6,-2
81126ae0:	1545883a 	add	r2,r2,r21
81126ae4:	003f8906 	br	8112690c <__reset+0xfb10690c>
81126ae8:	24c9883a 	add	r4,r4,r19
81126aec:	003eee06 	br	811266a8 <__reset+0xfb1066a8>
81126af0:	8005883a 	mov	r2,r16
81126af4:	003f1706 	br	81126754 <__reset+0xfb106754>
81126af8:	817fe736 	bltu	r16,r5,81126a98 <__reset+0xfb106a98>
81126afc:	280f883a 	mov	r7,r5
81126b00:	0009883a 	mov	r4,zero
81126b04:	003fb106 	br	811269cc <__reset+0xfb1069cc>

81126b08 <__divsi3>:
81126b08:	20001b16 	blt	r4,zero,81126b78 <__divsi3+0x70>
81126b0c:	000f883a 	mov	r7,zero
81126b10:	28001616 	blt	r5,zero,81126b6c <__divsi3+0x64>
81126b14:	200d883a 	mov	r6,r4
81126b18:	29001a2e 	bgeu	r5,r4,81126b84 <__divsi3+0x7c>
81126b1c:	00800804 	movi	r2,32
81126b20:	00c00044 	movi	r3,1
81126b24:	00000106 	br	81126b2c <__divsi3+0x24>
81126b28:	10000d26 	beq	r2,zero,81126b60 <__divsi3+0x58>
81126b2c:	294b883a 	add	r5,r5,r5
81126b30:	10bfffc4 	addi	r2,r2,-1
81126b34:	18c7883a 	add	r3,r3,r3
81126b38:	293ffb36 	bltu	r5,r4,81126b28 <__reset+0xfb106b28>
81126b3c:	0005883a 	mov	r2,zero
81126b40:	18000726 	beq	r3,zero,81126b60 <__divsi3+0x58>
81126b44:	0005883a 	mov	r2,zero
81126b48:	31400236 	bltu	r6,r5,81126b54 <__divsi3+0x4c>
81126b4c:	314dc83a 	sub	r6,r6,r5
81126b50:	10c4b03a 	or	r2,r2,r3
81126b54:	1806d07a 	srli	r3,r3,1
81126b58:	280ad07a 	srli	r5,r5,1
81126b5c:	183ffa1e 	bne	r3,zero,81126b48 <__reset+0xfb106b48>
81126b60:	38000126 	beq	r7,zero,81126b68 <__divsi3+0x60>
81126b64:	0085c83a 	sub	r2,zero,r2
81126b68:	f800283a 	ret
81126b6c:	014bc83a 	sub	r5,zero,r5
81126b70:	39c0005c 	xori	r7,r7,1
81126b74:	003fe706 	br	81126b14 <__reset+0xfb106b14>
81126b78:	0109c83a 	sub	r4,zero,r4
81126b7c:	01c00044 	movi	r7,1
81126b80:	003fe306 	br	81126b10 <__reset+0xfb106b10>
81126b84:	00c00044 	movi	r3,1
81126b88:	003fee06 	br	81126b44 <__reset+0xfb106b44>

81126b8c <__modsi3>:
81126b8c:	20001716 	blt	r4,zero,81126bec <__modsi3+0x60>
81126b90:	000f883a 	mov	r7,zero
81126b94:	2005883a 	mov	r2,r4
81126b98:	28001216 	blt	r5,zero,81126be4 <__modsi3+0x58>
81126b9c:	2900162e 	bgeu	r5,r4,81126bf8 <__modsi3+0x6c>
81126ba0:	01800804 	movi	r6,32
81126ba4:	00c00044 	movi	r3,1
81126ba8:	00000106 	br	81126bb0 <__modsi3+0x24>
81126bac:	30000a26 	beq	r6,zero,81126bd8 <__modsi3+0x4c>
81126bb0:	294b883a 	add	r5,r5,r5
81126bb4:	31bfffc4 	addi	r6,r6,-1
81126bb8:	18c7883a 	add	r3,r3,r3
81126bbc:	293ffb36 	bltu	r5,r4,81126bac <__reset+0xfb106bac>
81126bc0:	18000526 	beq	r3,zero,81126bd8 <__modsi3+0x4c>
81126bc4:	1806d07a 	srli	r3,r3,1
81126bc8:	11400136 	bltu	r2,r5,81126bd0 <__modsi3+0x44>
81126bcc:	1145c83a 	sub	r2,r2,r5
81126bd0:	280ad07a 	srli	r5,r5,1
81126bd4:	183ffb1e 	bne	r3,zero,81126bc4 <__reset+0xfb106bc4>
81126bd8:	38000126 	beq	r7,zero,81126be0 <__modsi3+0x54>
81126bdc:	0085c83a 	sub	r2,zero,r2
81126be0:	f800283a 	ret
81126be4:	014bc83a 	sub	r5,zero,r5
81126be8:	003fec06 	br	81126b9c <__reset+0xfb106b9c>
81126bec:	0109c83a 	sub	r4,zero,r4
81126bf0:	01c00044 	movi	r7,1
81126bf4:	003fe706 	br	81126b94 <__reset+0xfb106b94>
81126bf8:	00c00044 	movi	r3,1
81126bfc:	003ff106 	br	81126bc4 <__reset+0xfb106bc4>

81126c00 <__udivsi3>:
81126c00:	200d883a 	mov	r6,r4
81126c04:	2900152e 	bgeu	r5,r4,81126c5c <__udivsi3+0x5c>
81126c08:	28001416 	blt	r5,zero,81126c5c <__udivsi3+0x5c>
81126c0c:	00800804 	movi	r2,32
81126c10:	00c00044 	movi	r3,1
81126c14:	00000206 	br	81126c20 <__udivsi3+0x20>
81126c18:	10000e26 	beq	r2,zero,81126c54 <__udivsi3+0x54>
81126c1c:	28000516 	blt	r5,zero,81126c34 <__udivsi3+0x34>
81126c20:	294b883a 	add	r5,r5,r5
81126c24:	10bfffc4 	addi	r2,r2,-1
81126c28:	18c7883a 	add	r3,r3,r3
81126c2c:	293ffa36 	bltu	r5,r4,81126c18 <__reset+0xfb106c18>
81126c30:	18000826 	beq	r3,zero,81126c54 <__udivsi3+0x54>
81126c34:	0005883a 	mov	r2,zero
81126c38:	31400236 	bltu	r6,r5,81126c44 <__udivsi3+0x44>
81126c3c:	314dc83a 	sub	r6,r6,r5
81126c40:	10c4b03a 	or	r2,r2,r3
81126c44:	1806d07a 	srli	r3,r3,1
81126c48:	280ad07a 	srli	r5,r5,1
81126c4c:	183ffa1e 	bne	r3,zero,81126c38 <__reset+0xfb106c38>
81126c50:	f800283a 	ret
81126c54:	0005883a 	mov	r2,zero
81126c58:	f800283a 	ret
81126c5c:	00c00044 	movi	r3,1
81126c60:	003ff406 	br	81126c34 <__reset+0xfb106c34>

81126c64 <__umodsi3>:
81126c64:	2005883a 	mov	r2,r4
81126c68:	2900122e 	bgeu	r5,r4,81126cb4 <__umodsi3+0x50>
81126c6c:	28001116 	blt	r5,zero,81126cb4 <__umodsi3+0x50>
81126c70:	01800804 	movi	r6,32
81126c74:	00c00044 	movi	r3,1
81126c78:	00000206 	br	81126c84 <__umodsi3+0x20>
81126c7c:	30000c26 	beq	r6,zero,81126cb0 <__umodsi3+0x4c>
81126c80:	28000516 	blt	r5,zero,81126c98 <__umodsi3+0x34>
81126c84:	294b883a 	add	r5,r5,r5
81126c88:	31bfffc4 	addi	r6,r6,-1
81126c8c:	18c7883a 	add	r3,r3,r3
81126c90:	293ffa36 	bltu	r5,r4,81126c7c <__reset+0xfb106c7c>
81126c94:	18000626 	beq	r3,zero,81126cb0 <__umodsi3+0x4c>
81126c98:	1806d07a 	srli	r3,r3,1
81126c9c:	11400136 	bltu	r2,r5,81126ca4 <__umodsi3+0x40>
81126ca0:	1145c83a 	sub	r2,r2,r5
81126ca4:	280ad07a 	srli	r5,r5,1
81126ca8:	183ffb1e 	bne	r3,zero,81126c98 <__reset+0xfb106c98>
81126cac:	f800283a 	ret
81126cb0:	f800283a 	ret
81126cb4:	00c00044 	movi	r3,1
81126cb8:	003ff706 	br	81126c98 <__reset+0xfb106c98>

81126cbc <__eqsf2>:
81126cbc:	2006d5fa 	srli	r3,r4,23
81126cc0:	280cd5fa 	srli	r6,r5,23
81126cc4:	01c02034 	movhi	r7,128
81126cc8:	39ffffc4 	addi	r7,r7,-1
81126ccc:	18c03fcc 	andi	r3,r3,255
81126cd0:	02003fc4 	movi	r8,255
81126cd4:	3904703a 	and	r2,r7,r4
81126cd8:	31803fcc 	andi	r6,r6,255
81126cdc:	394e703a 	and	r7,r7,r5
81126ce0:	2008d7fa 	srli	r4,r4,31
81126ce4:	280ad7fa 	srli	r5,r5,31
81126ce8:	1a000d26 	beq	r3,r8,81126d20 <__eqsf2+0x64>
81126cec:	02003fc4 	movi	r8,255
81126cf0:	32000826 	beq	r6,r8,81126d14 <__eqsf2+0x58>
81126cf4:	19800226 	beq	r3,r6,81126d00 <__eqsf2+0x44>
81126cf8:	00800044 	movi	r2,1
81126cfc:	f800283a 	ret
81126d00:	11fffd1e 	bne	r2,r7,81126cf8 <__reset+0xfb106cf8>
81126d04:	21400926 	beq	r4,r5,81126d2c <__eqsf2+0x70>
81126d08:	183ffb1e 	bne	r3,zero,81126cf8 <__reset+0xfb106cf8>
81126d0c:	1004c03a 	cmpne	r2,r2,zero
81126d10:	f800283a 	ret
81126d14:	383ff726 	beq	r7,zero,81126cf4 <__reset+0xfb106cf4>
81126d18:	00800044 	movi	r2,1
81126d1c:	f800283a 	ret
81126d20:	103ff226 	beq	r2,zero,81126cec <__reset+0xfb106cec>
81126d24:	00800044 	movi	r2,1
81126d28:	f800283a 	ret
81126d2c:	0005883a 	mov	r2,zero
81126d30:	f800283a 	ret

81126d34 <__gesf2>:
81126d34:	2004d5fa 	srli	r2,r4,23
81126d38:	2806d5fa 	srli	r3,r5,23
81126d3c:	01802034 	movhi	r6,128
81126d40:	31bfffc4 	addi	r6,r6,-1
81126d44:	10803fcc 	andi	r2,r2,255
81126d48:	01c03fc4 	movi	r7,255
81126d4c:	3110703a 	and	r8,r6,r4
81126d50:	18c03fcc 	andi	r3,r3,255
81126d54:	314c703a 	and	r6,r6,r5
81126d58:	2008d7fa 	srli	r4,r4,31
81126d5c:	280ad7fa 	srli	r5,r5,31
81126d60:	11c01926 	beq	r2,r7,81126dc8 <__gesf2+0x94>
81126d64:	01c03fc4 	movi	r7,255
81126d68:	19c00f26 	beq	r3,r7,81126da8 <__gesf2+0x74>
81126d6c:	1000061e 	bne	r2,zero,81126d88 <__gesf2+0x54>
81126d70:	400f003a 	cmpeq	r7,r8,zero
81126d74:	1800071e 	bne	r3,zero,81126d94 <__gesf2+0x60>
81126d78:	3000061e 	bne	r6,zero,81126d94 <__gesf2+0x60>
81126d7c:	0005883a 	mov	r2,zero
81126d80:	40000e1e 	bne	r8,zero,81126dbc <__gesf2+0x88>
81126d84:	f800283a 	ret
81126d88:	18000a1e 	bne	r3,zero,81126db4 <__gesf2+0x80>
81126d8c:	30000b26 	beq	r6,zero,81126dbc <__gesf2+0x88>
81126d90:	000f883a 	mov	r7,zero
81126d94:	29403fcc 	andi	r5,r5,255
81126d98:	38000726 	beq	r7,zero,81126db8 <__gesf2+0x84>
81126d9c:	28000826 	beq	r5,zero,81126dc0 <__gesf2+0x8c>
81126da0:	00800044 	movi	r2,1
81126da4:	f800283a 	ret
81126da8:	303ff026 	beq	r6,zero,81126d6c <__reset+0xfb106d6c>
81126dac:	00bfff84 	movi	r2,-2
81126db0:	f800283a 	ret
81126db4:	29403fcc 	andi	r5,r5,255
81126db8:	21400526 	beq	r4,r5,81126dd0 <__gesf2+0x9c>
81126dbc:	203ff826 	beq	r4,zero,81126da0 <__reset+0xfb106da0>
81126dc0:	00bfffc4 	movi	r2,-1
81126dc4:	f800283a 	ret
81126dc8:	403fe626 	beq	r8,zero,81126d64 <__reset+0xfb106d64>
81126dcc:	003ff706 	br	81126dac <__reset+0xfb106dac>
81126dd0:	18bffa16 	blt	r3,r2,81126dbc <__reset+0xfb106dbc>
81126dd4:	10c00216 	blt	r2,r3,81126de0 <__gesf2+0xac>
81126dd8:	323ff836 	bltu	r6,r8,81126dbc <__reset+0xfb106dbc>
81126ddc:	4180022e 	bgeu	r8,r6,81126de8 <__gesf2+0xb4>
81126de0:	203fef1e 	bne	r4,zero,81126da0 <__reset+0xfb106da0>
81126de4:	003ff606 	br	81126dc0 <__reset+0xfb106dc0>
81126de8:	0005883a 	mov	r2,zero
81126dec:	f800283a 	ret

81126df0 <__lesf2>:
81126df0:	2004d5fa 	srli	r2,r4,23
81126df4:	280cd5fa 	srli	r6,r5,23
81126df8:	00c02034 	movhi	r3,128
81126dfc:	18ffffc4 	addi	r3,r3,-1
81126e00:	10803fcc 	andi	r2,r2,255
81126e04:	01c03fc4 	movi	r7,255
81126e08:	1910703a 	and	r8,r3,r4
81126e0c:	31803fcc 	andi	r6,r6,255
81126e10:	1946703a 	and	r3,r3,r5
81126e14:	2008d7fa 	srli	r4,r4,31
81126e18:	280ad7fa 	srli	r5,r5,31
81126e1c:	11c01b26 	beq	r2,r7,81126e8c <__lesf2+0x9c>
81126e20:	01c03fc4 	movi	r7,255
81126e24:	31c01126 	beq	r6,r7,81126e6c <__lesf2+0x7c>
81126e28:	1000071e 	bne	r2,zero,81126e48 <__lesf2+0x58>
81126e2c:	400f003a 	cmpeq	r7,r8,zero
81126e30:	21003fcc 	andi	r4,r4,255
81126e34:	3000081e 	bne	r6,zero,81126e58 <__lesf2+0x68>
81126e38:	1800071e 	bne	r3,zero,81126e58 <__lesf2+0x68>
81126e3c:	0005883a 	mov	r2,zero
81126e40:	40000f1e 	bne	r8,zero,81126e80 <__lesf2+0x90>
81126e44:	f800283a 	ret
81126e48:	21003fcc 	andi	r4,r4,255
81126e4c:	30000a1e 	bne	r6,zero,81126e78 <__lesf2+0x88>
81126e50:	18000b26 	beq	r3,zero,81126e80 <__lesf2+0x90>
81126e54:	000f883a 	mov	r7,zero
81126e58:	29403fcc 	andi	r5,r5,255
81126e5c:	38000726 	beq	r7,zero,81126e7c <__lesf2+0x8c>
81126e60:	28000826 	beq	r5,zero,81126e84 <__lesf2+0x94>
81126e64:	00800044 	movi	r2,1
81126e68:	f800283a 	ret
81126e6c:	183fee26 	beq	r3,zero,81126e28 <__reset+0xfb106e28>
81126e70:	00800084 	movi	r2,2
81126e74:	f800283a 	ret
81126e78:	29403fcc 	andi	r5,r5,255
81126e7c:	21400626 	beq	r4,r5,81126e98 <__lesf2+0xa8>
81126e80:	203ff826 	beq	r4,zero,81126e64 <__reset+0xfb106e64>
81126e84:	00bfffc4 	movi	r2,-1
81126e88:	f800283a 	ret
81126e8c:	403fe426 	beq	r8,zero,81126e20 <__reset+0xfb106e20>
81126e90:	00800084 	movi	r2,2
81126e94:	f800283a 	ret
81126e98:	30bff916 	blt	r6,r2,81126e80 <__reset+0xfb106e80>
81126e9c:	11800216 	blt	r2,r6,81126ea8 <__lesf2+0xb8>
81126ea0:	1a3ff736 	bltu	r3,r8,81126e80 <__reset+0xfb106e80>
81126ea4:	40c0022e 	bgeu	r8,r3,81126eb0 <__lesf2+0xc0>
81126ea8:	203fee1e 	bne	r4,zero,81126e64 <__reset+0xfb106e64>
81126eac:	003ff506 	br	81126e84 <__reset+0xfb106e84>
81126eb0:	0005883a 	mov	r2,zero
81126eb4:	f800283a 	ret

81126eb8 <__adddf3>:
81126eb8:	02c00434 	movhi	r11,16
81126ebc:	5affffc4 	addi	r11,r11,-1
81126ec0:	2806d7fa 	srli	r3,r5,31
81126ec4:	2ad4703a 	and	r10,r5,r11
81126ec8:	3ad2703a 	and	r9,r7,r11
81126ecc:	3804d53a 	srli	r2,r7,20
81126ed0:	3018d77a 	srli	r12,r6,29
81126ed4:	280ad53a 	srli	r5,r5,20
81126ed8:	501490fa 	slli	r10,r10,3
81126edc:	2010d77a 	srli	r8,r4,29
81126ee0:	481290fa 	slli	r9,r9,3
81126ee4:	380ed7fa 	srli	r7,r7,31
81126ee8:	defffb04 	addi	sp,sp,-20
81126eec:	de00012e 	bgeu	sp,et,81126ef4 <__adddf3+0x3c>
81126ef0:	003b68fa 	trap	3
81126ef4:	dc800215 	stw	r18,8(sp)
81126ef8:	dc400115 	stw	r17,4(sp)
81126efc:	dc000015 	stw	r16,0(sp)
81126f00:	dfc00415 	stw	ra,16(sp)
81126f04:	dcc00315 	stw	r19,12(sp)
81126f08:	1c803fcc 	andi	r18,r3,255
81126f0c:	2c01ffcc 	andi	r16,r5,2047
81126f10:	5210b03a 	or	r8,r10,r8
81126f14:	202290fa 	slli	r17,r4,3
81126f18:	1081ffcc 	andi	r2,r2,2047
81126f1c:	4b12b03a 	or	r9,r9,r12
81126f20:	300c90fa 	slli	r6,r6,3
81126f24:	91c07526 	beq	r18,r7,811270fc <__adddf3+0x244>
81126f28:	8087c83a 	sub	r3,r16,r2
81126f2c:	00c0ab0e 	bge	zero,r3,811271dc <__adddf3+0x324>
81126f30:	10002a1e 	bne	r2,zero,81126fdc <__adddf3+0x124>
81126f34:	4984b03a 	or	r2,r9,r6
81126f38:	1000961e 	bne	r2,zero,81127194 <__adddf3+0x2dc>
81126f3c:	888001cc 	andi	r2,r17,7
81126f40:	10000726 	beq	r2,zero,81126f60 <__adddf3+0xa8>
81126f44:	888003cc 	andi	r2,r17,15
81126f48:	00c00104 	movi	r3,4
81126f4c:	10c00426 	beq	r2,r3,81126f60 <__adddf3+0xa8>
81126f50:	88c7883a 	add	r3,r17,r3
81126f54:	1c63803a 	cmpltu	r17,r3,r17
81126f58:	4451883a 	add	r8,r8,r17
81126f5c:	1823883a 	mov	r17,r3
81126f60:	4080202c 	andhi	r2,r8,128
81126f64:	10005926 	beq	r2,zero,811270cc <__adddf3+0x214>
81126f68:	84000044 	addi	r16,r16,1
81126f6c:	0081ffc4 	movi	r2,2047
81126f70:	8080ba26 	beq	r16,r2,8112725c <__adddf3+0x3a4>
81126f74:	00bfe034 	movhi	r2,65408
81126f78:	10bfffc4 	addi	r2,r2,-1
81126f7c:	4090703a 	and	r8,r8,r2
81126f80:	4004977a 	slli	r2,r8,29
81126f84:	4010927a 	slli	r8,r8,9
81126f88:	8822d0fa 	srli	r17,r17,3
81126f8c:	8401ffcc 	andi	r16,r16,2047
81126f90:	4010d33a 	srli	r8,r8,12
81126f94:	9007883a 	mov	r3,r18
81126f98:	1444b03a 	or	r2,r2,r17
81126f9c:	8401ffcc 	andi	r16,r16,2047
81126fa0:	8020953a 	slli	r16,r16,20
81126fa4:	18c03fcc 	andi	r3,r3,255
81126fa8:	01000434 	movhi	r4,16
81126fac:	213fffc4 	addi	r4,r4,-1
81126fb0:	180697fa 	slli	r3,r3,31
81126fb4:	4110703a 	and	r8,r8,r4
81126fb8:	4410b03a 	or	r8,r8,r16
81126fbc:	40c6b03a 	or	r3,r8,r3
81126fc0:	dfc00417 	ldw	ra,16(sp)
81126fc4:	dcc00317 	ldw	r19,12(sp)
81126fc8:	dc800217 	ldw	r18,8(sp)
81126fcc:	dc400117 	ldw	r17,4(sp)
81126fd0:	dc000017 	ldw	r16,0(sp)
81126fd4:	dec00504 	addi	sp,sp,20
81126fd8:	f800283a 	ret
81126fdc:	0081ffc4 	movi	r2,2047
81126fe0:	80bfd626 	beq	r16,r2,81126f3c <__reset+0xfb106f3c>
81126fe4:	4a402034 	orhi	r9,r9,128
81126fe8:	00800e04 	movi	r2,56
81126fec:	10c09f16 	blt	r2,r3,8112726c <__adddf3+0x3b4>
81126ff0:	008007c4 	movi	r2,31
81126ff4:	10c0c216 	blt	r2,r3,81127300 <__adddf3+0x448>
81126ff8:	00800804 	movi	r2,32
81126ffc:	10c5c83a 	sub	r2,r2,r3
81127000:	488a983a 	sll	r5,r9,r2
81127004:	30c8d83a 	srl	r4,r6,r3
81127008:	3084983a 	sll	r2,r6,r2
8112700c:	48c6d83a 	srl	r3,r9,r3
81127010:	290cb03a 	or	r6,r5,r4
81127014:	1004c03a 	cmpne	r2,r2,zero
81127018:	308cb03a 	or	r6,r6,r2
8112701c:	898dc83a 	sub	r6,r17,r6
81127020:	89a3803a 	cmpltu	r17,r17,r6
81127024:	40d1c83a 	sub	r8,r8,r3
81127028:	4451c83a 	sub	r8,r8,r17
8112702c:	3023883a 	mov	r17,r6
81127030:	4080202c 	andhi	r2,r8,128
81127034:	10002326 	beq	r2,zero,811270c4 <__adddf3+0x20c>
81127038:	04c02034 	movhi	r19,128
8112703c:	9cffffc4 	addi	r19,r19,-1
81127040:	44e6703a 	and	r19,r8,r19
81127044:	98007626 	beq	r19,zero,81127220 <__adddf3+0x368>
81127048:	9809883a 	mov	r4,r19
8112704c:	11133880 	call	81113388 <__clzsi2>
81127050:	10fffe04 	addi	r3,r2,-8
81127054:	010007c4 	movi	r4,31
81127058:	20c07716 	blt	r4,r3,81127238 <__adddf3+0x380>
8112705c:	00800804 	movi	r2,32
81127060:	10c5c83a 	sub	r2,r2,r3
81127064:	8884d83a 	srl	r2,r17,r2
81127068:	98d0983a 	sll	r8,r19,r3
8112706c:	88e2983a 	sll	r17,r17,r3
81127070:	1204b03a 	or	r2,r2,r8
81127074:	1c007416 	blt	r3,r16,81127248 <__adddf3+0x390>
81127078:	1c21c83a 	sub	r16,r3,r16
8112707c:	82000044 	addi	r8,r16,1
81127080:	00c007c4 	movi	r3,31
81127084:	1a009116 	blt	r3,r8,811272cc <__adddf3+0x414>
81127088:	00c00804 	movi	r3,32
8112708c:	1a07c83a 	sub	r3,r3,r8
81127090:	8a08d83a 	srl	r4,r17,r8
81127094:	88e2983a 	sll	r17,r17,r3
81127098:	10c6983a 	sll	r3,r2,r3
8112709c:	1210d83a 	srl	r8,r2,r8
811270a0:	8804c03a 	cmpne	r2,r17,zero
811270a4:	1906b03a 	or	r3,r3,r4
811270a8:	18a2b03a 	or	r17,r3,r2
811270ac:	0021883a 	mov	r16,zero
811270b0:	003fa206 	br	81126f3c <__reset+0xfb106f3c>
811270b4:	1890b03a 	or	r8,r3,r2
811270b8:	40017d26 	beq	r8,zero,811276b0 <__adddf3+0x7f8>
811270bc:	1011883a 	mov	r8,r2
811270c0:	1823883a 	mov	r17,r3
811270c4:	888001cc 	andi	r2,r17,7
811270c8:	103f9e1e 	bne	r2,zero,81126f44 <__reset+0xfb106f44>
811270cc:	4004977a 	slli	r2,r8,29
811270d0:	8822d0fa 	srli	r17,r17,3
811270d4:	4010d0fa 	srli	r8,r8,3
811270d8:	9007883a 	mov	r3,r18
811270dc:	1444b03a 	or	r2,r2,r17
811270e0:	0101ffc4 	movi	r4,2047
811270e4:	81002426 	beq	r16,r4,81127178 <__adddf3+0x2c0>
811270e8:	8120703a 	and	r16,r16,r4
811270ec:	01000434 	movhi	r4,16
811270f0:	213fffc4 	addi	r4,r4,-1
811270f4:	4110703a 	and	r8,r8,r4
811270f8:	003fa806 	br	81126f9c <__reset+0xfb106f9c>
811270fc:	8089c83a 	sub	r4,r16,r2
81127100:	01005e0e 	bge	zero,r4,8112727c <__adddf3+0x3c4>
81127104:	10002b26 	beq	r2,zero,811271b4 <__adddf3+0x2fc>
81127108:	0081ffc4 	movi	r2,2047
8112710c:	80bf8b26 	beq	r16,r2,81126f3c <__reset+0xfb106f3c>
81127110:	4a402034 	orhi	r9,r9,128
81127114:	00800e04 	movi	r2,56
81127118:	1100a40e 	bge	r2,r4,811273ac <__adddf3+0x4f4>
8112711c:	498cb03a 	or	r6,r9,r6
81127120:	300ac03a 	cmpne	r5,r6,zero
81127124:	0013883a 	mov	r9,zero
81127128:	2c4b883a 	add	r5,r5,r17
8112712c:	2c63803a 	cmpltu	r17,r5,r17
81127130:	4a11883a 	add	r8,r9,r8
81127134:	8a11883a 	add	r8,r17,r8
81127138:	2823883a 	mov	r17,r5
8112713c:	4080202c 	andhi	r2,r8,128
81127140:	103fe026 	beq	r2,zero,811270c4 <__reset+0xfb1070c4>
81127144:	84000044 	addi	r16,r16,1
81127148:	0081ffc4 	movi	r2,2047
8112714c:	8080d226 	beq	r16,r2,81127498 <__adddf3+0x5e0>
81127150:	00bfe034 	movhi	r2,65408
81127154:	10bfffc4 	addi	r2,r2,-1
81127158:	4090703a 	and	r8,r8,r2
8112715c:	880ad07a 	srli	r5,r17,1
81127160:	400897fa 	slli	r4,r8,31
81127164:	88c0004c 	andi	r3,r17,1
81127168:	28e2b03a 	or	r17,r5,r3
8112716c:	4010d07a 	srli	r8,r8,1
81127170:	2462b03a 	or	r17,r4,r17
81127174:	003f7106 	br	81126f3c <__reset+0xfb106f3c>
81127178:	4088b03a 	or	r4,r8,r2
8112717c:	20014526 	beq	r4,zero,81127694 <__adddf3+0x7dc>
81127180:	01000434 	movhi	r4,16
81127184:	42000234 	orhi	r8,r8,8
81127188:	213fffc4 	addi	r4,r4,-1
8112718c:	4110703a 	and	r8,r8,r4
81127190:	003f8206 	br	81126f9c <__reset+0xfb106f9c>
81127194:	18ffffc4 	addi	r3,r3,-1
81127198:	1800491e 	bne	r3,zero,811272c0 <__adddf3+0x408>
8112719c:	898bc83a 	sub	r5,r17,r6
811271a0:	8963803a 	cmpltu	r17,r17,r5
811271a4:	4251c83a 	sub	r8,r8,r9
811271a8:	4451c83a 	sub	r8,r8,r17
811271ac:	2823883a 	mov	r17,r5
811271b0:	003f9f06 	br	81127030 <__reset+0xfb107030>
811271b4:	4984b03a 	or	r2,r9,r6
811271b8:	103f6026 	beq	r2,zero,81126f3c <__reset+0xfb106f3c>
811271bc:	213fffc4 	addi	r4,r4,-1
811271c0:	2000931e 	bne	r4,zero,81127410 <__adddf3+0x558>
811271c4:	898d883a 	add	r6,r17,r6
811271c8:	3463803a 	cmpltu	r17,r6,r17
811271cc:	4251883a 	add	r8,r8,r9
811271d0:	8a11883a 	add	r8,r17,r8
811271d4:	3023883a 	mov	r17,r6
811271d8:	003fd806 	br	8112713c <__reset+0xfb10713c>
811271dc:	1800541e 	bne	r3,zero,81127330 <__adddf3+0x478>
811271e0:	80800044 	addi	r2,r16,1
811271e4:	1081ffcc 	andi	r2,r2,2047
811271e8:	00c00044 	movi	r3,1
811271ec:	1880a00e 	bge	r3,r2,81127470 <__adddf3+0x5b8>
811271f0:	8989c83a 	sub	r4,r17,r6
811271f4:	8905803a 	cmpltu	r2,r17,r4
811271f8:	4267c83a 	sub	r19,r8,r9
811271fc:	98a7c83a 	sub	r19,r19,r2
81127200:	9880202c 	andhi	r2,r19,128
81127204:	10006326 	beq	r2,zero,81127394 <__adddf3+0x4dc>
81127208:	3463c83a 	sub	r17,r6,r17
8112720c:	4a07c83a 	sub	r3,r9,r8
81127210:	344d803a 	cmpltu	r6,r6,r17
81127214:	19a7c83a 	sub	r19,r3,r6
81127218:	3825883a 	mov	r18,r7
8112721c:	983f8a1e 	bne	r19,zero,81127048 <__reset+0xfb107048>
81127220:	8809883a 	mov	r4,r17
81127224:	11133880 	call	81113388 <__clzsi2>
81127228:	10800804 	addi	r2,r2,32
8112722c:	10fffe04 	addi	r3,r2,-8
81127230:	010007c4 	movi	r4,31
81127234:	20ff890e 	bge	r4,r3,8112705c <__reset+0xfb10705c>
81127238:	10bff604 	addi	r2,r2,-40
8112723c:	8884983a 	sll	r2,r17,r2
81127240:	0023883a 	mov	r17,zero
81127244:	1c3f8c0e 	bge	r3,r16,81127078 <__reset+0xfb107078>
81127248:	023fe034 	movhi	r8,65408
8112724c:	423fffc4 	addi	r8,r8,-1
81127250:	80e1c83a 	sub	r16,r16,r3
81127254:	1210703a 	and	r8,r2,r8
81127258:	003f3806 	br	81126f3c <__reset+0xfb106f3c>
8112725c:	9007883a 	mov	r3,r18
81127260:	0011883a 	mov	r8,zero
81127264:	0005883a 	mov	r2,zero
81127268:	003f4c06 	br	81126f9c <__reset+0xfb106f9c>
8112726c:	498cb03a 	or	r6,r9,r6
81127270:	300cc03a 	cmpne	r6,r6,zero
81127274:	0007883a 	mov	r3,zero
81127278:	003f6806 	br	8112701c <__reset+0xfb10701c>
8112727c:	20009c1e 	bne	r4,zero,811274f0 <__adddf3+0x638>
81127280:	80800044 	addi	r2,r16,1
81127284:	1141ffcc 	andi	r5,r2,2047
81127288:	01000044 	movi	r4,1
8112728c:	2140670e 	bge	r4,r5,8112742c <__adddf3+0x574>
81127290:	0101ffc4 	movi	r4,2047
81127294:	11007f26 	beq	r2,r4,81127494 <__adddf3+0x5dc>
81127298:	898d883a 	add	r6,r17,r6
8112729c:	4247883a 	add	r3,r8,r9
811272a0:	3451803a 	cmpltu	r8,r6,r17
811272a4:	40d1883a 	add	r8,r8,r3
811272a8:	402297fa 	slli	r17,r8,31
811272ac:	300cd07a 	srli	r6,r6,1
811272b0:	4010d07a 	srli	r8,r8,1
811272b4:	1021883a 	mov	r16,r2
811272b8:	89a2b03a 	or	r17,r17,r6
811272bc:	003f1f06 	br	81126f3c <__reset+0xfb106f3c>
811272c0:	0081ffc4 	movi	r2,2047
811272c4:	80bf481e 	bne	r16,r2,81126fe8 <__reset+0xfb106fe8>
811272c8:	003f1c06 	br	81126f3c <__reset+0xfb106f3c>
811272cc:	843ff844 	addi	r16,r16,-31
811272d0:	01000804 	movi	r4,32
811272d4:	1406d83a 	srl	r3,r2,r16
811272d8:	41005026 	beq	r8,r4,8112741c <__adddf3+0x564>
811272dc:	01001004 	movi	r4,64
811272e0:	2211c83a 	sub	r8,r4,r8
811272e4:	1204983a 	sll	r2,r2,r8
811272e8:	88a2b03a 	or	r17,r17,r2
811272ec:	8822c03a 	cmpne	r17,r17,zero
811272f0:	1c62b03a 	or	r17,r3,r17
811272f4:	0011883a 	mov	r8,zero
811272f8:	0021883a 	mov	r16,zero
811272fc:	003f7106 	br	811270c4 <__reset+0xfb1070c4>
81127300:	193ff804 	addi	r4,r3,-32
81127304:	00800804 	movi	r2,32
81127308:	4908d83a 	srl	r4,r9,r4
8112730c:	18804526 	beq	r3,r2,81127424 <__adddf3+0x56c>
81127310:	00801004 	movi	r2,64
81127314:	10c5c83a 	sub	r2,r2,r3
81127318:	4886983a 	sll	r3,r9,r2
8112731c:	198cb03a 	or	r6,r3,r6
81127320:	300cc03a 	cmpne	r6,r6,zero
81127324:	218cb03a 	or	r6,r4,r6
81127328:	0007883a 	mov	r3,zero
8112732c:	003f3b06 	br	8112701c <__reset+0xfb10701c>
81127330:	80002a26 	beq	r16,zero,811273dc <__adddf3+0x524>
81127334:	0101ffc4 	movi	r4,2047
81127338:	11006826 	beq	r2,r4,811274dc <__adddf3+0x624>
8112733c:	00c7c83a 	sub	r3,zero,r3
81127340:	42002034 	orhi	r8,r8,128
81127344:	01000e04 	movi	r4,56
81127348:	20c07c16 	blt	r4,r3,8112753c <__adddf3+0x684>
8112734c:	010007c4 	movi	r4,31
81127350:	20c0da16 	blt	r4,r3,811276bc <__adddf3+0x804>
81127354:	01000804 	movi	r4,32
81127358:	20c9c83a 	sub	r4,r4,r3
8112735c:	4114983a 	sll	r10,r8,r4
81127360:	88cad83a 	srl	r5,r17,r3
81127364:	8908983a 	sll	r4,r17,r4
81127368:	40c6d83a 	srl	r3,r8,r3
8112736c:	5162b03a 	or	r17,r10,r5
81127370:	2008c03a 	cmpne	r4,r4,zero
81127374:	8922b03a 	or	r17,r17,r4
81127378:	3463c83a 	sub	r17,r6,r17
8112737c:	48c7c83a 	sub	r3,r9,r3
81127380:	344d803a 	cmpltu	r6,r6,r17
81127384:	1991c83a 	sub	r8,r3,r6
81127388:	1021883a 	mov	r16,r2
8112738c:	3825883a 	mov	r18,r7
81127390:	003f2706 	br	81127030 <__reset+0xfb107030>
81127394:	24d0b03a 	or	r8,r4,r19
81127398:	40001b1e 	bne	r8,zero,81127408 <__adddf3+0x550>
8112739c:	0005883a 	mov	r2,zero
811273a0:	0007883a 	mov	r3,zero
811273a4:	0021883a 	mov	r16,zero
811273a8:	003f4d06 	br	811270e0 <__reset+0xfb1070e0>
811273ac:	008007c4 	movi	r2,31
811273b0:	11003c16 	blt	r2,r4,811274a4 <__adddf3+0x5ec>
811273b4:	00800804 	movi	r2,32
811273b8:	1105c83a 	sub	r2,r2,r4
811273bc:	488e983a 	sll	r7,r9,r2
811273c0:	310ad83a 	srl	r5,r6,r4
811273c4:	3084983a 	sll	r2,r6,r2
811273c8:	4912d83a 	srl	r9,r9,r4
811273cc:	394ab03a 	or	r5,r7,r5
811273d0:	1004c03a 	cmpne	r2,r2,zero
811273d4:	288ab03a 	or	r5,r5,r2
811273d8:	003f5306 	br	81127128 <__reset+0xfb107128>
811273dc:	4448b03a 	or	r4,r8,r17
811273e0:	20003e26 	beq	r4,zero,811274dc <__adddf3+0x624>
811273e4:	00c6303a 	nor	r3,zero,r3
811273e8:	18003a1e 	bne	r3,zero,811274d4 <__adddf3+0x61c>
811273ec:	3463c83a 	sub	r17,r6,r17
811273f0:	4a07c83a 	sub	r3,r9,r8
811273f4:	344d803a 	cmpltu	r6,r6,r17
811273f8:	1991c83a 	sub	r8,r3,r6
811273fc:	1021883a 	mov	r16,r2
81127400:	3825883a 	mov	r18,r7
81127404:	003f0a06 	br	81127030 <__reset+0xfb107030>
81127408:	2023883a 	mov	r17,r4
8112740c:	003f0d06 	br	81127044 <__reset+0xfb107044>
81127410:	0081ffc4 	movi	r2,2047
81127414:	80bf3f1e 	bne	r16,r2,81127114 <__reset+0xfb107114>
81127418:	003ec806 	br	81126f3c <__reset+0xfb106f3c>
8112741c:	0005883a 	mov	r2,zero
81127420:	003fb106 	br	811272e8 <__reset+0xfb1072e8>
81127424:	0007883a 	mov	r3,zero
81127428:	003fbc06 	br	8112731c <__reset+0xfb10731c>
8112742c:	4444b03a 	or	r2,r8,r17
81127430:	8000871e 	bne	r16,zero,81127650 <__adddf3+0x798>
81127434:	1000ba26 	beq	r2,zero,81127720 <__adddf3+0x868>
81127438:	4984b03a 	or	r2,r9,r6
8112743c:	103ebf26 	beq	r2,zero,81126f3c <__reset+0xfb106f3c>
81127440:	8985883a 	add	r2,r17,r6
81127444:	4247883a 	add	r3,r8,r9
81127448:	1451803a 	cmpltu	r8,r2,r17
8112744c:	40d1883a 	add	r8,r8,r3
81127450:	40c0202c 	andhi	r3,r8,128
81127454:	1023883a 	mov	r17,r2
81127458:	183f1a26 	beq	r3,zero,811270c4 <__reset+0xfb1070c4>
8112745c:	00bfe034 	movhi	r2,65408
81127460:	10bfffc4 	addi	r2,r2,-1
81127464:	2021883a 	mov	r16,r4
81127468:	4090703a 	and	r8,r8,r2
8112746c:	003eb306 	br	81126f3c <__reset+0xfb106f3c>
81127470:	4444b03a 	or	r2,r8,r17
81127474:	8000291e 	bne	r16,zero,8112751c <__adddf3+0x664>
81127478:	10004b1e 	bne	r2,zero,811275a8 <__adddf3+0x6f0>
8112747c:	4990b03a 	or	r8,r9,r6
81127480:	40008b26 	beq	r8,zero,811276b0 <__adddf3+0x7f8>
81127484:	4811883a 	mov	r8,r9
81127488:	3023883a 	mov	r17,r6
8112748c:	3825883a 	mov	r18,r7
81127490:	003eaa06 	br	81126f3c <__reset+0xfb106f3c>
81127494:	1021883a 	mov	r16,r2
81127498:	0011883a 	mov	r8,zero
8112749c:	0005883a 	mov	r2,zero
811274a0:	003f0f06 	br	811270e0 <__reset+0xfb1070e0>
811274a4:	217ff804 	addi	r5,r4,-32
811274a8:	00800804 	movi	r2,32
811274ac:	494ad83a 	srl	r5,r9,r5
811274b0:	20807d26 	beq	r4,r2,811276a8 <__adddf3+0x7f0>
811274b4:	00801004 	movi	r2,64
811274b8:	1109c83a 	sub	r4,r2,r4
811274bc:	4912983a 	sll	r9,r9,r4
811274c0:	498cb03a 	or	r6,r9,r6
811274c4:	300cc03a 	cmpne	r6,r6,zero
811274c8:	298ab03a 	or	r5,r5,r6
811274cc:	0013883a 	mov	r9,zero
811274d0:	003f1506 	br	81127128 <__reset+0xfb107128>
811274d4:	0101ffc4 	movi	r4,2047
811274d8:	113f9a1e 	bne	r2,r4,81127344 <__reset+0xfb107344>
811274dc:	4811883a 	mov	r8,r9
811274e0:	3023883a 	mov	r17,r6
811274e4:	1021883a 	mov	r16,r2
811274e8:	3825883a 	mov	r18,r7
811274ec:	003e9306 	br	81126f3c <__reset+0xfb106f3c>
811274f0:	8000161e 	bne	r16,zero,8112754c <__adddf3+0x694>
811274f4:	444ab03a 	or	r5,r8,r17
811274f8:	28005126 	beq	r5,zero,81127640 <__adddf3+0x788>
811274fc:	0108303a 	nor	r4,zero,r4
81127500:	20004d1e 	bne	r4,zero,81127638 <__adddf3+0x780>
81127504:	89a3883a 	add	r17,r17,r6
81127508:	4253883a 	add	r9,r8,r9
8112750c:	898d803a 	cmpltu	r6,r17,r6
81127510:	3251883a 	add	r8,r6,r9
81127514:	1021883a 	mov	r16,r2
81127518:	003f0806 	br	8112713c <__reset+0xfb10713c>
8112751c:	1000301e 	bne	r2,zero,811275e0 <__adddf3+0x728>
81127520:	4984b03a 	or	r2,r9,r6
81127524:	10007126 	beq	r2,zero,811276ec <__adddf3+0x834>
81127528:	4811883a 	mov	r8,r9
8112752c:	3023883a 	mov	r17,r6
81127530:	3825883a 	mov	r18,r7
81127534:	0401ffc4 	movi	r16,2047
81127538:	003e8006 	br	81126f3c <__reset+0xfb106f3c>
8112753c:	4462b03a 	or	r17,r8,r17
81127540:	8822c03a 	cmpne	r17,r17,zero
81127544:	0007883a 	mov	r3,zero
81127548:	003f8b06 	br	81127378 <__reset+0xfb107378>
8112754c:	0141ffc4 	movi	r5,2047
81127550:	11403b26 	beq	r2,r5,81127640 <__adddf3+0x788>
81127554:	0109c83a 	sub	r4,zero,r4
81127558:	42002034 	orhi	r8,r8,128
8112755c:	01400e04 	movi	r5,56
81127560:	29006716 	blt	r5,r4,81127700 <__adddf3+0x848>
81127564:	014007c4 	movi	r5,31
81127568:	29007016 	blt	r5,r4,8112772c <__adddf3+0x874>
8112756c:	01400804 	movi	r5,32
81127570:	290bc83a 	sub	r5,r5,r4
81127574:	4154983a 	sll	r10,r8,r5
81127578:	890ed83a 	srl	r7,r17,r4
8112757c:	894a983a 	sll	r5,r17,r5
81127580:	4108d83a 	srl	r4,r8,r4
81127584:	51e2b03a 	or	r17,r10,r7
81127588:	280ac03a 	cmpne	r5,r5,zero
8112758c:	8962b03a 	or	r17,r17,r5
81127590:	89a3883a 	add	r17,r17,r6
81127594:	2253883a 	add	r9,r4,r9
81127598:	898d803a 	cmpltu	r6,r17,r6
8112759c:	3251883a 	add	r8,r6,r9
811275a0:	1021883a 	mov	r16,r2
811275a4:	003ee506 	br	8112713c <__reset+0xfb10713c>
811275a8:	4984b03a 	or	r2,r9,r6
811275ac:	103e6326 	beq	r2,zero,81126f3c <__reset+0xfb106f3c>
811275b0:	8987c83a 	sub	r3,r17,r6
811275b4:	88c9803a 	cmpltu	r4,r17,r3
811275b8:	4245c83a 	sub	r2,r8,r9
811275bc:	1105c83a 	sub	r2,r2,r4
811275c0:	1100202c 	andhi	r4,r2,128
811275c4:	203ebb26 	beq	r4,zero,811270b4 <__reset+0xfb1070b4>
811275c8:	3463c83a 	sub	r17,r6,r17
811275cc:	4a07c83a 	sub	r3,r9,r8
811275d0:	344d803a 	cmpltu	r6,r6,r17
811275d4:	1991c83a 	sub	r8,r3,r6
811275d8:	3825883a 	mov	r18,r7
811275dc:	003e5706 	br	81126f3c <__reset+0xfb106f3c>
811275e0:	4984b03a 	or	r2,r9,r6
811275e4:	10002e26 	beq	r2,zero,811276a0 <__adddf3+0x7e8>
811275e8:	4004d0fa 	srli	r2,r8,3
811275ec:	8822d0fa 	srli	r17,r17,3
811275f0:	4010977a 	slli	r8,r8,29
811275f4:	10c0022c 	andhi	r3,r2,8
811275f8:	4462b03a 	or	r17,r8,r17
811275fc:	18000826 	beq	r3,zero,81127620 <__adddf3+0x768>
81127600:	4808d0fa 	srli	r4,r9,3
81127604:	20c0022c 	andhi	r3,r4,8
81127608:	1800051e 	bne	r3,zero,81127620 <__adddf3+0x768>
8112760c:	300cd0fa 	srli	r6,r6,3
81127610:	4806977a 	slli	r3,r9,29
81127614:	2005883a 	mov	r2,r4
81127618:	3825883a 	mov	r18,r7
8112761c:	19a2b03a 	or	r17,r3,r6
81127620:	8810d77a 	srli	r8,r17,29
81127624:	100490fa 	slli	r2,r2,3
81127628:	882290fa 	slli	r17,r17,3
8112762c:	0401ffc4 	movi	r16,2047
81127630:	4090b03a 	or	r8,r8,r2
81127634:	003e4106 	br	81126f3c <__reset+0xfb106f3c>
81127638:	0141ffc4 	movi	r5,2047
8112763c:	117fc71e 	bne	r2,r5,8112755c <__reset+0xfb10755c>
81127640:	4811883a 	mov	r8,r9
81127644:	3023883a 	mov	r17,r6
81127648:	1021883a 	mov	r16,r2
8112764c:	003e3b06 	br	81126f3c <__reset+0xfb106f3c>
81127650:	10002f26 	beq	r2,zero,81127710 <__adddf3+0x858>
81127654:	4984b03a 	or	r2,r9,r6
81127658:	10001126 	beq	r2,zero,811276a0 <__adddf3+0x7e8>
8112765c:	4004d0fa 	srli	r2,r8,3
81127660:	8822d0fa 	srli	r17,r17,3
81127664:	4010977a 	slli	r8,r8,29
81127668:	10c0022c 	andhi	r3,r2,8
8112766c:	4462b03a 	or	r17,r8,r17
81127670:	183feb26 	beq	r3,zero,81127620 <__reset+0xfb107620>
81127674:	4808d0fa 	srli	r4,r9,3
81127678:	20c0022c 	andhi	r3,r4,8
8112767c:	183fe81e 	bne	r3,zero,81127620 <__reset+0xfb107620>
81127680:	300cd0fa 	srli	r6,r6,3
81127684:	4806977a 	slli	r3,r9,29
81127688:	2005883a 	mov	r2,r4
8112768c:	19a2b03a 	or	r17,r3,r6
81127690:	003fe306 	br	81127620 <__reset+0xfb107620>
81127694:	0011883a 	mov	r8,zero
81127698:	0005883a 	mov	r2,zero
8112769c:	003e3f06 	br	81126f9c <__reset+0xfb106f9c>
811276a0:	0401ffc4 	movi	r16,2047
811276a4:	003e2506 	br	81126f3c <__reset+0xfb106f3c>
811276a8:	0013883a 	mov	r9,zero
811276ac:	003f8406 	br	811274c0 <__reset+0xfb1074c0>
811276b0:	0005883a 	mov	r2,zero
811276b4:	0007883a 	mov	r3,zero
811276b8:	003e8906 	br	811270e0 <__reset+0xfb1070e0>
811276bc:	197ff804 	addi	r5,r3,-32
811276c0:	01000804 	movi	r4,32
811276c4:	414ad83a 	srl	r5,r8,r5
811276c8:	19002426 	beq	r3,r4,8112775c <__adddf3+0x8a4>
811276cc:	01001004 	movi	r4,64
811276d0:	20c7c83a 	sub	r3,r4,r3
811276d4:	40c6983a 	sll	r3,r8,r3
811276d8:	1c46b03a 	or	r3,r3,r17
811276dc:	1806c03a 	cmpne	r3,r3,zero
811276e0:	28e2b03a 	or	r17,r5,r3
811276e4:	0007883a 	mov	r3,zero
811276e8:	003f2306 	br	81127378 <__reset+0xfb107378>
811276ec:	0007883a 	mov	r3,zero
811276f0:	5811883a 	mov	r8,r11
811276f4:	00bfffc4 	movi	r2,-1
811276f8:	0401ffc4 	movi	r16,2047
811276fc:	003e7806 	br	811270e0 <__reset+0xfb1070e0>
81127700:	4462b03a 	or	r17,r8,r17
81127704:	8822c03a 	cmpne	r17,r17,zero
81127708:	0009883a 	mov	r4,zero
8112770c:	003fa006 	br	81127590 <__reset+0xfb107590>
81127710:	4811883a 	mov	r8,r9
81127714:	3023883a 	mov	r17,r6
81127718:	0401ffc4 	movi	r16,2047
8112771c:	003e0706 	br	81126f3c <__reset+0xfb106f3c>
81127720:	4811883a 	mov	r8,r9
81127724:	3023883a 	mov	r17,r6
81127728:	003e0406 	br	81126f3c <__reset+0xfb106f3c>
8112772c:	21fff804 	addi	r7,r4,-32
81127730:	01400804 	movi	r5,32
81127734:	41ced83a 	srl	r7,r8,r7
81127738:	21400a26 	beq	r4,r5,81127764 <__adddf3+0x8ac>
8112773c:	01401004 	movi	r5,64
81127740:	2909c83a 	sub	r4,r5,r4
81127744:	4108983a 	sll	r4,r8,r4
81127748:	2448b03a 	or	r4,r4,r17
8112774c:	2008c03a 	cmpne	r4,r4,zero
81127750:	3922b03a 	or	r17,r7,r4
81127754:	0009883a 	mov	r4,zero
81127758:	003f8d06 	br	81127590 <__reset+0xfb107590>
8112775c:	0007883a 	mov	r3,zero
81127760:	003fdd06 	br	811276d8 <__reset+0xfb1076d8>
81127764:	0009883a 	mov	r4,zero
81127768:	003ff706 	br	81127748 <__reset+0xfb107748>

8112776c <__divdf3>:
8112776c:	defff204 	addi	sp,sp,-56
81127770:	de00012e 	bgeu	sp,et,81127778 <__divdf3+0xc>
81127774:	003b68fa 	trap	3
81127778:	dd400915 	stw	r21,36(sp)
8112777c:	282ad53a 	srli	r21,r5,20
81127780:	dd000815 	stw	r20,32(sp)
81127784:	2828d7fa 	srli	r20,r5,31
81127788:	dc000415 	stw	r16,16(sp)
8112778c:	04000434 	movhi	r16,16
81127790:	df000c15 	stw	fp,48(sp)
81127794:	843fffc4 	addi	r16,r16,-1
81127798:	dfc00d15 	stw	ra,52(sp)
8112779c:	ddc00b15 	stw	r23,44(sp)
811277a0:	dd800a15 	stw	r22,40(sp)
811277a4:	dcc00715 	stw	r19,28(sp)
811277a8:	dc800615 	stw	r18,24(sp)
811277ac:	dc400515 	stw	r17,20(sp)
811277b0:	ad41ffcc 	andi	r21,r21,2047
811277b4:	2c20703a 	and	r16,r5,r16
811277b8:	a7003fcc 	andi	fp,r20,255
811277bc:	a8006126 	beq	r21,zero,81127944 <__divdf3+0x1d8>
811277c0:	0081ffc4 	movi	r2,2047
811277c4:	2025883a 	mov	r18,r4
811277c8:	a8803726 	beq	r21,r2,811278a8 <__divdf3+0x13c>
811277cc:	80800434 	orhi	r2,r16,16
811277d0:	100490fa 	slli	r2,r2,3
811277d4:	2020d77a 	srli	r16,r4,29
811277d8:	202490fa 	slli	r18,r4,3
811277dc:	ad7f0044 	addi	r21,r21,-1023
811277e0:	80a0b03a 	or	r16,r16,r2
811277e4:	0027883a 	mov	r19,zero
811277e8:	0013883a 	mov	r9,zero
811277ec:	3804d53a 	srli	r2,r7,20
811277f0:	382cd7fa 	srli	r22,r7,31
811277f4:	04400434 	movhi	r17,16
811277f8:	8c7fffc4 	addi	r17,r17,-1
811277fc:	1081ffcc 	andi	r2,r2,2047
81127800:	3011883a 	mov	r8,r6
81127804:	3c62703a 	and	r17,r7,r17
81127808:	b5c03fcc 	andi	r23,r22,255
8112780c:	10006c26 	beq	r2,zero,811279c0 <__divdf3+0x254>
81127810:	00c1ffc4 	movi	r3,2047
81127814:	10c06426 	beq	r2,r3,811279a8 <__divdf3+0x23c>
81127818:	88c00434 	orhi	r3,r17,16
8112781c:	180690fa 	slli	r3,r3,3
81127820:	3022d77a 	srli	r17,r6,29
81127824:	301090fa 	slli	r8,r6,3
81127828:	10bf0044 	addi	r2,r2,-1023
8112782c:	88e2b03a 	or	r17,r17,r3
81127830:	000f883a 	mov	r7,zero
81127834:	a58cf03a 	xor	r6,r20,r22
81127838:	3cc8b03a 	or	r4,r7,r19
8112783c:	a8abc83a 	sub	r21,r21,r2
81127840:	008003c4 	movi	r2,15
81127844:	3007883a 	mov	r3,r6
81127848:	34c03fcc 	andi	r19,r6,255
8112784c:	11009036 	bltu	r2,r4,81127a90 <__divdf3+0x324>
81127850:	200890ba 	slli	r4,r4,2
81127854:	00a044b4 	movhi	r2,33042
81127858:	109e1a04 	addi	r2,r2,30824
8112785c:	2089883a 	add	r4,r4,r2
81127860:	20800017 	ldw	r2,0(r4)
81127864:	1000683a 	jmp	r2
81127868:	81127a90 	cmplti	r4,r16,18922
8112786c:	811278e0 	cmpeqi	r4,r16,18915
81127870:	81127a80 	call	881127a8 <__reset+0x20f27a8>
81127874:	811278d4 	ori	r4,r16,18915
81127878:	81127a80 	call	881127a8 <__reset+0x20f27a8>
8112787c:	81127a54 	ori	r4,r16,18921
81127880:	81127a80 	call	881127a8 <__reset+0x20f27a8>
81127884:	811278d4 	ori	r4,r16,18915
81127888:	811278e0 	cmpeqi	r4,r16,18915
8112788c:	811278e0 	cmpeqi	r4,r16,18915
81127890:	81127a54 	ori	r4,r16,18921
81127894:	811278d4 	ori	r4,r16,18915
81127898:	811278c4 	addi	r4,r16,18915
8112789c:	811278c4 	addi	r4,r16,18915
811278a0:	811278c4 	addi	r4,r16,18915
811278a4:	81127d74 	orhi	r4,r16,18933
811278a8:	2404b03a 	or	r2,r4,r16
811278ac:	1000661e 	bne	r2,zero,81127a48 <__divdf3+0x2dc>
811278b0:	04c00204 	movi	r19,8
811278b4:	0021883a 	mov	r16,zero
811278b8:	0025883a 	mov	r18,zero
811278bc:	02400084 	movi	r9,2
811278c0:	003fca06 	br	811277ec <__reset+0xfb1077ec>
811278c4:	8023883a 	mov	r17,r16
811278c8:	9011883a 	mov	r8,r18
811278cc:	e02f883a 	mov	r23,fp
811278d0:	480f883a 	mov	r7,r9
811278d4:	00800084 	movi	r2,2
811278d8:	3881311e 	bne	r7,r2,81127da0 <__divdf3+0x634>
811278dc:	b827883a 	mov	r19,r23
811278e0:	98c0004c 	andi	r3,r19,1
811278e4:	0081ffc4 	movi	r2,2047
811278e8:	000b883a 	mov	r5,zero
811278ec:	0025883a 	mov	r18,zero
811278f0:	1004953a 	slli	r2,r2,20
811278f4:	18c03fcc 	andi	r3,r3,255
811278f8:	04400434 	movhi	r17,16
811278fc:	8c7fffc4 	addi	r17,r17,-1
81127900:	180697fa 	slli	r3,r3,31
81127904:	2c4a703a 	and	r5,r5,r17
81127908:	288ab03a 	or	r5,r5,r2
8112790c:	28c6b03a 	or	r3,r5,r3
81127910:	9005883a 	mov	r2,r18
81127914:	dfc00d17 	ldw	ra,52(sp)
81127918:	df000c17 	ldw	fp,48(sp)
8112791c:	ddc00b17 	ldw	r23,44(sp)
81127920:	dd800a17 	ldw	r22,40(sp)
81127924:	dd400917 	ldw	r21,36(sp)
81127928:	dd000817 	ldw	r20,32(sp)
8112792c:	dcc00717 	ldw	r19,28(sp)
81127930:	dc800617 	ldw	r18,24(sp)
81127934:	dc400517 	ldw	r17,20(sp)
81127938:	dc000417 	ldw	r16,16(sp)
8112793c:	dec00e04 	addi	sp,sp,56
81127940:	f800283a 	ret
81127944:	2404b03a 	or	r2,r4,r16
81127948:	2027883a 	mov	r19,r4
8112794c:	10003926 	beq	r2,zero,81127a34 <__divdf3+0x2c8>
81127950:	80012e26 	beq	r16,zero,81127e0c <__divdf3+0x6a0>
81127954:	8009883a 	mov	r4,r16
81127958:	d9800315 	stw	r6,12(sp)
8112795c:	d9c00215 	stw	r7,8(sp)
81127960:	11133880 	call	81113388 <__clzsi2>
81127964:	d9800317 	ldw	r6,12(sp)
81127968:	d9c00217 	ldw	r7,8(sp)
8112796c:	113ffd44 	addi	r4,r2,-11
81127970:	00c00704 	movi	r3,28
81127974:	19012116 	blt	r3,r4,81127dfc <__divdf3+0x690>
81127978:	00c00744 	movi	r3,29
8112797c:	147ffe04 	addi	r17,r2,-8
81127980:	1907c83a 	sub	r3,r3,r4
81127984:	8460983a 	sll	r16,r16,r17
81127988:	98c6d83a 	srl	r3,r19,r3
8112798c:	9c64983a 	sll	r18,r19,r17
81127990:	1c20b03a 	or	r16,r3,r16
81127994:	1080fcc4 	addi	r2,r2,1011
81127998:	00abc83a 	sub	r21,zero,r2
8112799c:	0027883a 	mov	r19,zero
811279a0:	0013883a 	mov	r9,zero
811279a4:	003f9106 	br	811277ec <__reset+0xfb1077ec>
811279a8:	3446b03a 	or	r3,r6,r17
811279ac:	18001f1e 	bne	r3,zero,81127a2c <__divdf3+0x2c0>
811279b0:	0023883a 	mov	r17,zero
811279b4:	0011883a 	mov	r8,zero
811279b8:	01c00084 	movi	r7,2
811279bc:	003f9d06 	br	81127834 <__reset+0xfb107834>
811279c0:	3446b03a 	or	r3,r6,r17
811279c4:	18001526 	beq	r3,zero,81127a1c <__divdf3+0x2b0>
811279c8:	88011b26 	beq	r17,zero,81127e38 <__divdf3+0x6cc>
811279cc:	8809883a 	mov	r4,r17
811279d0:	d9800315 	stw	r6,12(sp)
811279d4:	da400115 	stw	r9,4(sp)
811279d8:	11133880 	call	81113388 <__clzsi2>
811279dc:	d9800317 	ldw	r6,12(sp)
811279e0:	da400117 	ldw	r9,4(sp)
811279e4:	113ffd44 	addi	r4,r2,-11
811279e8:	00c00704 	movi	r3,28
811279ec:	19010e16 	blt	r3,r4,81127e28 <__divdf3+0x6bc>
811279f0:	00c00744 	movi	r3,29
811279f4:	123ffe04 	addi	r8,r2,-8
811279f8:	1907c83a 	sub	r3,r3,r4
811279fc:	8a22983a 	sll	r17,r17,r8
81127a00:	30c6d83a 	srl	r3,r6,r3
81127a04:	3210983a 	sll	r8,r6,r8
81127a08:	1c62b03a 	or	r17,r3,r17
81127a0c:	1080fcc4 	addi	r2,r2,1011
81127a10:	0085c83a 	sub	r2,zero,r2
81127a14:	000f883a 	mov	r7,zero
81127a18:	003f8606 	br	81127834 <__reset+0xfb107834>
81127a1c:	0023883a 	mov	r17,zero
81127a20:	0011883a 	mov	r8,zero
81127a24:	01c00044 	movi	r7,1
81127a28:	003f8206 	br	81127834 <__reset+0xfb107834>
81127a2c:	01c000c4 	movi	r7,3
81127a30:	003f8006 	br	81127834 <__reset+0xfb107834>
81127a34:	04c00104 	movi	r19,4
81127a38:	0021883a 	mov	r16,zero
81127a3c:	0025883a 	mov	r18,zero
81127a40:	02400044 	movi	r9,1
81127a44:	003f6906 	br	811277ec <__reset+0xfb1077ec>
81127a48:	04c00304 	movi	r19,12
81127a4c:	024000c4 	movi	r9,3
81127a50:	003f6606 	br	811277ec <__reset+0xfb1077ec>
81127a54:	01400434 	movhi	r5,16
81127a58:	0007883a 	mov	r3,zero
81127a5c:	297fffc4 	addi	r5,r5,-1
81127a60:	04bfffc4 	movi	r18,-1
81127a64:	0081ffc4 	movi	r2,2047
81127a68:	003fa106 	br	811278f0 <__reset+0xfb1078f0>
81127a6c:	00c00044 	movi	r3,1
81127a70:	1887c83a 	sub	r3,r3,r2
81127a74:	01000e04 	movi	r4,56
81127a78:	20c1210e 	bge	r4,r3,81127f00 <__divdf3+0x794>
81127a7c:	98c0004c 	andi	r3,r19,1
81127a80:	0005883a 	mov	r2,zero
81127a84:	000b883a 	mov	r5,zero
81127a88:	0025883a 	mov	r18,zero
81127a8c:	003f9806 	br	811278f0 <__reset+0xfb1078f0>
81127a90:	8c00fd36 	bltu	r17,r16,81127e88 <__divdf3+0x71c>
81127a94:	8440fb26 	beq	r16,r17,81127e84 <__divdf3+0x718>
81127a98:	8007883a 	mov	r3,r16
81127a9c:	ad7fffc4 	addi	r21,r21,-1
81127aa0:	0021883a 	mov	r16,zero
81127aa4:	4004d63a 	srli	r2,r8,24
81127aa8:	8822923a 	slli	r17,r17,8
81127aac:	1809883a 	mov	r4,r3
81127ab0:	402c923a 	slli	r22,r8,8
81127ab4:	88b8b03a 	or	fp,r17,r2
81127ab8:	e028d43a 	srli	r20,fp,16
81127abc:	d8c00015 	stw	r3,0(sp)
81127ac0:	e5ffffcc 	andi	r23,fp,65535
81127ac4:	a00b883a 	mov	r5,r20
81127ac8:	1126c000 	call	81126c00 <__udivsi3>
81127acc:	d8c00017 	ldw	r3,0(sp)
81127ad0:	a00b883a 	mov	r5,r20
81127ad4:	d8800315 	stw	r2,12(sp)
81127ad8:	1809883a 	mov	r4,r3
81127adc:	1126c640 	call	81126c64 <__umodsi3>
81127ae0:	d9800317 	ldw	r6,12(sp)
81127ae4:	1006943a 	slli	r3,r2,16
81127ae8:	9004d43a 	srli	r2,r18,16
81127aec:	b9a3383a 	mul	r17,r23,r6
81127af0:	10c4b03a 	or	r2,r2,r3
81127af4:	1440062e 	bgeu	r2,r17,81127b10 <__divdf3+0x3a4>
81127af8:	1705883a 	add	r2,r2,fp
81127afc:	30ffffc4 	addi	r3,r6,-1
81127b00:	1700ee36 	bltu	r2,fp,81127ebc <__divdf3+0x750>
81127b04:	1440ed2e 	bgeu	r2,r17,81127ebc <__divdf3+0x750>
81127b08:	31bfff84 	addi	r6,r6,-2
81127b0c:	1705883a 	add	r2,r2,fp
81127b10:	1463c83a 	sub	r17,r2,r17
81127b14:	a00b883a 	mov	r5,r20
81127b18:	8809883a 	mov	r4,r17
81127b1c:	d9800315 	stw	r6,12(sp)
81127b20:	1126c000 	call	81126c00 <__udivsi3>
81127b24:	a00b883a 	mov	r5,r20
81127b28:	8809883a 	mov	r4,r17
81127b2c:	d8800215 	stw	r2,8(sp)
81127b30:	1126c640 	call	81126c64 <__umodsi3>
81127b34:	d9c00217 	ldw	r7,8(sp)
81127b38:	1004943a 	slli	r2,r2,16
81127b3c:	94bfffcc 	andi	r18,r18,65535
81127b40:	b9d1383a 	mul	r8,r23,r7
81127b44:	90a4b03a 	or	r18,r18,r2
81127b48:	d9800317 	ldw	r6,12(sp)
81127b4c:	9200062e 	bgeu	r18,r8,81127b68 <__divdf3+0x3fc>
81127b50:	9725883a 	add	r18,r18,fp
81127b54:	38bfffc4 	addi	r2,r7,-1
81127b58:	9700d636 	bltu	r18,fp,81127eb4 <__divdf3+0x748>
81127b5c:	9200d52e 	bgeu	r18,r8,81127eb4 <__divdf3+0x748>
81127b60:	39ffff84 	addi	r7,r7,-2
81127b64:	9725883a 	add	r18,r18,fp
81127b68:	3004943a 	slli	r2,r6,16
81127b6c:	b012d43a 	srli	r9,r22,16
81127b70:	b1bfffcc 	andi	r6,r22,65535
81127b74:	11e2b03a 	or	r17,r2,r7
81127b78:	8806d43a 	srli	r3,r17,16
81127b7c:	893fffcc 	andi	r4,r17,65535
81127b80:	218b383a 	mul	r5,r4,r6
81127b84:	30c5383a 	mul	r2,r6,r3
81127b88:	2249383a 	mul	r4,r4,r9
81127b8c:	280ed43a 	srli	r7,r5,16
81127b90:	9225c83a 	sub	r18,r18,r8
81127b94:	2089883a 	add	r4,r4,r2
81127b98:	3909883a 	add	r4,r7,r4
81127b9c:	1a47383a 	mul	r3,r3,r9
81127ba0:	2080022e 	bgeu	r4,r2,81127bac <__divdf3+0x440>
81127ba4:	00800074 	movhi	r2,1
81127ba8:	1887883a 	add	r3,r3,r2
81127bac:	2004d43a 	srli	r2,r4,16
81127bb0:	2008943a 	slli	r4,r4,16
81127bb4:	297fffcc 	andi	r5,r5,65535
81127bb8:	10c7883a 	add	r3,r2,r3
81127bbc:	2149883a 	add	r4,r4,r5
81127bc0:	90c0a536 	bltu	r18,r3,81127e58 <__divdf3+0x6ec>
81127bc4:	90c0bf26 	beq	r18,r3,81127ec4 <__divdf3+0x758>
81127bc8:	90c7c83a 	sub	r3,r18,r3
81127bcc:	810fc83a 	sub	r7,r16,r4
81127bd0:	81e5803a 	cmpltu	r18,r16,r7
81127bd4:	1ca5c83a 	sub	r18,r3,r18
81127bd8:	e480c126 	beq	fp,r18,81127ee0 <__divdf3+0x774>
81127bdc:	a00b883a 	mov	r5,r20
81127be0:	9009883a 	mov	r4,r18
81127be4:	d9800315 	stw	r6,12(sp)
81127be8:	d9c00215 	stw	r7,8(sp)
81127bec:	da400115 	stw	r9,4(sp)
81127bf0:	1126c000 	call	81126c00 <__udivsi3>
81127bf4:	a00b883a 	mov	r5,r20
81127bf8:	9009883a 	mov	r4,r18
81127bfc:	d8800015 	stw	r2,0(sp)
81127c00:	1126c640 	call	81126c64 <__umodsi3>
81127c04:	d9c00217 	ldw	r7,8(sp)
81127c08:	da000017 	ldw	r8,0(sp)
81127c0c:	1006943a 	slli	r3,r2,16
81127c10:	3804d43a 	srli	r2,r7,16
81127c14:	ba21383a 	mul	r16,r23,r8
81127c18:	d9800317 	ldw	r6,12(sp)
81127c1c:	10c4b03a 	or	r2,r2,r3
81127c20:	da400117 	ldw	r9,4(sp)
81127c24:	1400062e 	bgeu	r2,r16,81127c40 <__divdf3+0x4d4>
81127c28:	1705883a 	add	r2,r2,fp
81127c2c:	40ffffc4 	addi	r3,r8,-1
81127c30:	1700ad36 	bltu	r2,fp,81127ee8 <__divdf3+0x77c>
81127c34:	1400ac2e 	bgeu	r2,r16,81127ee8 <__divdf3+0x77c>
81127c38:	423fff84 	addi	r8,r8,-2
81127c3c:	1705883a 	add	r2,r2,fp
81127c40:	1421c83a 	sub	r16,r2,r16
81127c44:	a00b883a 	mov	r5,r20
81127c48:	8009883a 	mov	r4,r16
81127c4c:	d9800315 	stw	r6,12(sp)
81127c50:	d9c00215 	stw	r7,8(sp)
81127c54:	da000015 	stw	r8,0(sp)
81127c58:	da400115 	stw	r9,4(sp)
81127c5c:	1126c000 	call	81126c00 <__udivsi3>
81127c60:	8009883a 	mov	r4,r16
81127c64:	a00b883a 	mov	r5,r20
81127c68:	1025883a 	mov	r18,r2
81127c6c:	1126c640 	call	81126c64 <__umodsi3>
81127c70:	d9c00217 	ldw	r7,8(sp)
81127c74:	1004943a 	slli	r2,r2,16
81127c78:	bcaf383a 	mul	r23,r23,r18
81127c7c:	393fffcc 	andi	r4,r7,65535
81127c80:	2088b03a 	or	r4,r4,r2
81127c84:	d9800317 	ldw	r6,12(sp)
81127c88:	da000017 	ldw	r8,0(sp)
81127c8c:	da400117 	ldw	r9,4(sp)
81127c90:	25c0062e 	bgeu	r4,r23,81127cac <__divdf3+0x540>
81127c94:	2709883a 	add	r4,r4,fp
81127c98:	90bfffc4 	addi	r2,r18,-1
81127c9c:	27009436 	bltu	r4,fp,81127ef0 <__divdf3+0x784>
81127ca0:	25c0932e 	bgeu	r4,r23,81127ef0 <__divdf3+0x784>
81127ca4:	94bfff84 	addi	r18,r18,-2
81127ca8:	2709883a 	add	r4,r4,fp
81127cac:	4004943a 	slli	r2,r8,16
81127cb0:	25efc83a 	sub	r23,r4,r23
81127cb4:	1490b03a 	or	r8,r2,r18
81127cb8:	4008d43a 	srli	r4,r8,16
81127cbc:	40ffffcc 	andi	r3,r8,65535
81127cc0:	30c5383a 	mul	r2,r6,r3
81127cc4:	1a47383a 	mul	r3,r3,r9
81127cc8:	310d383a 	mul	r6,r6,r4
81127ccc:	100ad43a 	srli	r5,r2,16
81127cd0:	4913383a 	mul	r9,r9,r4
81127cd4:	1987883a 	add	r3,r3,r6
81127cd8:	28c7883a 	add	r3,r5,r3
81127cdc:	1980022e 	bgeu	r3,r6,81127ce8 <__divdf3+0x57c>
81127ce0:	01000074 	movhi	r4,1
81127ce4:	4913883a 	add	r9,r9,r4
81127ce8:	1808d43a 	srli	r4,r3,16
81127cec:	1806943a 	slli	r3,r3,16
81127cf0:	10bfffcc 	andi	r2,r2,65535
81127cf4:	2253883a 	add	r9,r4,r9
81127cf8:	1887883a 	add	r3,r3,r2
81127cfc:	ba403836 	bltu	r23,r9,81127de0 <__divdf3+0x674>
81127d00:	ba403626 	beq	r23,r9,81127ddc <__divdf3+0x670>
81127d04:	42000054 	ori	r8,r8,1
81127d08:	a880ffc4 	addi	r2,r21,1023
81127d0c:	00bf570e 	bge	zero,r2,81127a6c <__reset+0xfb107a6c>
81127d10:	40c001cc 	andi	r3,r8,7
81127d14:	18000726 	beq	r3,zero,81127d34 <__divdf3+0x5c8>
81127d18:	40c003cc 	andi	r3,r8,15
81127d1c:	01000104 	movi	r4,4
81127d20:	19000426 	beq	r3,r4,81127d34 <__divdf3+0x5c8>
81127d24:	4107883a 	add	r3,r8,r4
81127d28:	1a11803a 	cmpltu	r8,r3,r8
81127d2c:	8a23883a 	add	r17,r17,r8
81127d30:	1811883a 	mov	r8,r3
81127d34:	88c0402c 	andhi	r3,r17,256
81127d38:	18000426 	beq	r3,zero,81127d4c <__divdf3+0x5e0>
81127d3c:	00ffc034 	movhi	r3,65280
81127d40:	18ffffc4 	addi	r3,r3,-1
81127d44:	a8810004 	addi	r2,r21,1024
81127d48:	88e2703a 	and	r17,r17,r3
81127d4c:	00c1ff84 	movi	r3,2046
81127d50:	18bee316 	blt	r3,r2,811278e0 <__reset+0xfb1078e0>
81127d54:	8824977a 	slli	r18,r17,29
81127d58:	4010d0fa 	srli	r8,r8,3
81127d5c:	8822927a 	slli	r17,r17,9
81127d60:	1081ffcc 	andi	r2,r2,2047
81127d64:	9224b03a 	or	r18,r18,r8
81127d68:	880ad33a 	srli	r5,r17,12
81127d6c:	98c0004c 	andi	r3,r19,1
81127d70:	003edf06 	br	811278f0 <__reset+0xfb1078f0>
81127d74:	8080022c 	andhi	r2,r16,8
81127d78:	10001226 	beq	r2,zero,81127dc4 <__divdf3+0x658>
81127d7c:	8880022c 	andhi	r2,r17,8
81127d80:	1000101e 	bne	r2,zero,81127dc4 <__divdf3+0x658>
81127d84:	00800434 	movhi	r2,16
81127d88:	89400234 	orhi	r5,r17,8
81127d8c:	10bfffc4 	addi	r2,r2,-1
81127d90:	b007883a 	mov	r3,r22
81127d94:	288a703a 	and	r5,r5,r2
81127d98:	4025883a 	mov	r18,r8
81127d9c:	003f3106 	br	81127a64 <__reset+0xfb107a64>
81127da0:	008000c4 	movi	r2,3
81127da4:	3880a626 	beq	r7,r2,81128040 <__divdf3+0x8d4>
81127da8:	00800044 	movi	r2,1
81127dac:	3880521e 	bne	r7,r2,81127ef8 <__divdf3+0x78c>
81127db0:	b807883a 	mov	r3,r23
81127db4:	0005883a 	mov	r2,zero
81127db8:	000b883a 	mov	r5,zero
81127dbc:	0025883a 	mov	r18,zero
81127dc0:	003ecb06 	br	811278f0 <__reset+0xfb1078f0>
81127dc4:	00800434 	movhi	r2,16
81127dc8:	81400234 	orhi	r5,r16,8
81127dcc:	10bfffc4 	addi	r2,r2,-1
81127dd0:	a007883a 	mov	r3,r20
81127dd4:	288a703a 	and	r5,r5,r2
81127dd8:	003f2206 	br	81127a64 <__reset+0xfb107a64>
81127ddc:	183fca26 	beq	r3,zero,81127d08 <__reset+0xfb107d08>
81127de0:	e5ef883a 	add	r23,fp,r23
81127de4:	40bfffc4 	addi	r2,r8,-1
81127de8:	bf00392e 	bgeu	r23,fp,81127ed0 <__divdf3+0x764>
81127dec:	1011883a 	mov	r8,r2
81127df0:	ba7fc41e 	bne	r23,r9,81127d04 <__reset+0xfb107d04>
81127df4:	b0ffc31e 	bne	r22,r3,81127d04 <__reset+0xfb107d04>
81127df8:	003fc306 	br	81127d08 <__reset+0xfb107d08>
81127dfc:	143ff604 	addi	r16,r2,-40
81127e00:	9c20983a 	sll	r16,r19,r16
81127e04:	0025883a 	mov	r18,zero
81127e08:	003ee206 	br	81127994 <__reset+0xfb107994>
81127e0c:	d9800315 	stw	r6,12(sp)
81127e10:	d9c00215 	stw	r7,8(sp)
81127e14:	11133880 	call	81113388 <__clzsi2>
81127e18:	10800804 	addi	r2,r2,32
81127e1c:	d9c00217 	ldw	r7,8(sp)
81127e20:	d9800317 	ldw	r6,12(sp)
81127e24:	003ed106 	br	8112796c <__reset+0xfb10796c>
81127e28:	147ff604 	addi	r17,r2,-40
81127e2c:	3462983a 	sll	r17,r6,r17
81127e30:	0011883a 	mov	r8,zero
81127e34:	003ef506 	br	81127a0c <__reset+0xfb107a0c>
81127e38:	3009883a 	mov	r4,r6
81127e3c:	d9800315 	stw	r6,12(sp)
81127e40:	da400115 	stw	r9,4(sp)
81127e44:	11133880 	call	81113388 <__clzsi2>
81127e48:	10800804 	addi	r2,r2,32
81127e4c:	da400117 	ldw	r9,4(sp)
81127e50:	d9800317 	ldw	r6,12(sp)
81127e54:	003ee306 	br	811279e4 <__reset+0xfb1079e4>
81127e58:	85a1883a 	add	r16,r16,r22
81127e5c:	8585803a 	cmpltu	r2,r16,r22
81127e60:	1705883a 	add	r2,r2,fp
81127e64:	14a5883a 	add	r18,r2,r18
81127e68:	88bfffc4 	addi	r2,r17,-1
81127e6c:	e4800c2e 	bgeu	fp,r18,81127ea0 <__divdf3+0x734>
81127e70:	90c03e36 	bltu	r18,r3,81127f6c <__divdf3+0x800>
81127e74:	1c806926 	beq	r3,r18,8112801c <__divdf3+0x8b0>
81127e78:	90c7c83a 	sub	r3,r18,r3
81127e7c:	1023883a 	mov	r17,r2
81127e80:	003f5206 	br	81127bcc <__reset+0xfb107bcc>
81127e84:	923f0436 	bltu	r18,r8,81127a98 <__reset+0xfb107a98>
81127e88:	800897fa 	slli	r4,r16,31
81127e8c:	9004d07a 	srli	r2,r18,1
81127e90:	8006d07a 	srli	r3,r16,1
81127e94:	902097fa 	slli	r16,r18,31
81127e98:	20a4b03a 	or	r18,r4,r2
81127e9c:	003f0106 	br	81127aa4 <__reset+0xfb107aa4>
81127ea0:	e4bff51e 	bne	fp,r18,81127e78 <__reset+0xfb107e78>
81127ea4:	85bff22e 	bgeu	r16,r22,81127e70 <__reset+0xfb107e70>
81127ea8:	e0c7c83a 	sub	r3,fp,r3
81127eac:	1023883a 	mov	r17,r2
81127eb0:	003f4606 	br	81127bcc <__reset+0xfb107bcc>
81127eb4:	100f883a 	mov	r7,r2
81127eb8:	003f2b06 	br	81127b68 <__reset+0xfb107b68>
81127ebc:	180d883a 	mov	r6,r3
81127ec0:	003f1306 	br	81127b10 <__reset+0xfb107b10>
81127ec4:	813fe436 	bltu	r16,r4,81127e58 <__reset+0xfb107e58>
81127ec8:	0007883a 	mov	r3,zero
81127ecc:	003f3f06 	br	81127bcc <__reset+0xfb107bcc>
81127ed0:	ba402c36 	bltu	r23,r9,81127f84 <__divdf3+0x818>
81127ed4:	4dc05426 	beq	r9,r23,81128028 <__divdf3+0x8bc>
81127ed8:	1011883a 	mov	r8,r2
81127edc:	003f8906 	br	81127d04 <__reset+0xfb107d04>
81127ee0:	023fffc4 	movi	r8,-1
81127ee4:	003f8806 	br	81127d08 <__reset+0xfb107d08>
81127ee8:	1811883a 	mov	r8,r3
81127eec:	003f5406 	br	81127c40 <__reset+0xfb107c40>
81127ef0:	1025883a 	mov	r18,r2
81127ef4:	003f6d06 	br	81127cac <__reset+0xfb107cac>
81127ef8:	b827883a 	mov	r19,r23
81127efc:	003f8206 	br	81127d08 <__reset+0xfb107d08>
81127f00:	010007c4 	movi	r4,31
81127f04:	20c02616 	blt	r4,r3,81127fa0 <__divdf3+0x834>
81127f08:	00800804 	movi	r2,32
81127f0c:	10c5c83a 	sub	r2,r2,r3
81127f10:	888a983a 	sll	r5,r17,r2
81127f14:	40c8d83a 	srl	r4,r8,r3
81127f18:	4084983a 	sll	r2,r8,r2
81127f1c:	88e2d83a 	srl	r17,r17,r3
81127f20:	2906b03a 	or	r3,r5,r4
81127f24:	1004c03a 	cmpne	r2,r2,zero
81127f28:	1886b03a 	or	r3,r3,r2
81127f2c:	188001cc 	andi	r2,r3,7
81127f30:	10000726 	beq	r2,zero,81127f50 <__divdf3+0x7e4>
81127f34:	188003cc 	andi	r2,r3,15
81127f38:	01000104 	movi	r4,4
81127f3c:	11000426 	beq	r2,r4,81127f50 <__divdf3+0x7e4>
81127f40:	1805883a 	mov	r2,r3
81127f44:	10c00104 	addi	r3,r2,4
81127f48:	1885803a 	cmpltu	r2,r3,r2
81127f4c:	88a3883a 	add	r17,r17,r2
81127f50:	8880202c 	andhi	r2,r17,128
81127f54:	10002726 	beq	r2,zero,81127ff4 <__divdf3+0x888>
81127f58:	98c0004c 	andi	r3,r19,1
81127f5c:	00800044 	movi	r2,1
81127f60:	000b883a 	mov	r5,zero
81127f64:	0025883a 	mov	r18,zero
81127f68:	003e6106 	br	811278f0 <__reset+0xfb1078f0>
81127f6c:	85a1883a 	add	r16,r16,r22
81127f70:	8585803a 	cmpltu	r2,r16,r22
81127f74:	1705883a 	add	r2,r2,fp
81127f78:	14a5883a 	add	r18,r2,r18
81127f7c:	8c7fff84 	addi	r17,r17,-2
81127f80:	003f1106 	br	81127bc8 <__reset+0xfb107bc8>
81127f84:	b589883a 	add	r4,r22,r22
81127f88:	25ad803a 	cmpltu	r22,r4,r22
81127f8c:	b739883a 	add	fp,r22,fp
81127f90:	40bfff84 	addi	r2,r8,-2
81127f94:	bf2f883a 	add	r23,r23,fp
81127f98:	202d883a 	mov	r22,r4
81127f9c:	003f9306 	br	81127dec <__reset+0xfb107dec>
81127fa0:	013ff844 	movi	r4,-31
81127fa4:	2085c83a 	sub	r2,r4,r2
81127fa8:	8888d83a 	srl	r4,r17,r2
81127fac:	00800804 	movi	r2,32
81127fb0:	18802126 	beq	r3,r2,81128038 <__divdf3+0x8cc>
81127fb4:	00801004 	movi	r2,64
81127fb8:	10c5c83a 	sub	r2,r2,r3
81127fbc:	8884983a 	sll	r2,r17,r2
81127fc0:	1204b03a 	or	r2,r2,r8
81127fc4:	1004c03a 	cmpne	r2,r2,zero
81127fc8:	2084b03a 	or	r2,r4,r2
81127fcc:	144001cc 	andi	r17,r2,7
81127fd0:	88000d1e 	bne	r17,zero,81128008 <__divdf3+0x89c>
81127fd4:	000b883a 	mov	r5,zero
81127fd8:	1024d0fa 	srli	r18,r2,3
81127fdc:	98c0004c 	andi	r3,r19,1
81127fe0:	0005883a 	mov	r2,zero
81127fe4:	9464b03a 	or	r18,r18,r17
81127fe8:	003e4106 	br	811278f0 <__reset+0xfb1078f0>
81127fec:	1007883a 	mov	r3,r2
81127ff0:	0023883a 	mov	r17,zero
81127ff4:	880a927a 	slli	r5,r17,9
81127ff8:	1805883a 	mov	r2,r3
81127ffc:	8822977a 	slli	r17,r17,29
81128000:	280ad33a 	srli	r5,r5,12
81128004:	003ff406 	br	81127fd8 <__reset+0xfb107fd8>
81128008:	10c003cc 	andi	r3,r2,15
8112800c:	01000104 	movi	r4,4
81128010:	193ff626 	beq	r3,r4,81127fec <__reset+0xfb107fec>
81128014:	0023883a 	mov	r17,zero
81128018:	003fca06 	br	81127f44 <__reset+0xfb107f44>
8112801c:	813fd336 	bltu	r16,r4,81127f6c <__reset+0xfb107f6c>
81128020:	1023883a 	mov	r17,r2
81128024:	003fa806 	br	81127ec8 <__reset+0xfb107ec8>
81128028:	b0ffd636 	bltu	r22,r3,81127f84 <__reset+0xfb107f84>
8112802c:	1011883a 	mov	r8,r2
81128030:	b0ff341e 	bne	r22,r3,81127d04 <__reset+0xfb107d04>
81128034:	003f3406 	br	81127d08 <__reset+0xfb107d08>
81128038:	0005883a 	mov	r2,zero
8112803c:	003fe006 	br	81127fc0 <__reset+0xfb107fc0>
81128040:	00800434 	movhi	r2,16
81128044:	89400234 	orhi	r5,r17,8
81128048:	10bfffc4 	addi	r2,r2,-1
8112804c:	b807883a 	mov	r3,r23
81128050:	288a703a 	and	r5,r5,r2
81128054:	4025883a 	mov	r18,r8
81128058:	003e8206 	br	81127a64 <__reset+0xfb107a64>

8112805c <__eqdf2>:
8112805c:	2804d53a 	srli	r2,r5,20
81128060:	3806d53a 	srli	r3,r7,20
81128064:	02000434 	movhi	r8,16
81128068:	423fffc4 	addi	r8,r8,-1
8112806c:	1081ffcc 	andi	r2,r2,2047
81128070:	0281ffc4 	movi	r10,2047
81128074:	2a12703a 	and	r9,r5,r8
81128078:	18c1ffcc 	andi	r3,r3,2047
8112807c:	3a10703a 	and	r8,r7,r8
81128080:	280ad7fa 	srli	r5,r5,31
81128084:	380ed7fa 	srli	r7,r7,31
81128088:	12801026 	beq	r2,r10,811280cc <__eqdf2+0x70>
8112808c:	0281ffc4 	movi	r10,2047
81128090:	1a800a26 	beq	r3,r10,811280bc <__eqdf2+0x60>
81128094:	10c00226 	beq	r2,r3,811280a0 <__eqdf2+0x44>
81128098:	00800044 	movi	r2,1
8112809c:	f800283a 	ret
811280a0:	4a3ffd1e 	bne	r9,r8,81128098 <__reset+0xfb108098>
811280a4:	21bffc1e 	bne	r4,r6,81128098 <__reset+0xfb108098>
811280a8:	29c00c26 	beq	r5,r7,811280dc <__eqdf2+0x80>
811280ac:	103ffa1e 	bne	r2,zero,81128098 <__reset+0xfb108098>
811280b0:	2244b03a 	or	r2,r4,r9
811280b4:	1004c03a 	cmpne	r2,r2,zero
811280b8:	f800283a 	ret
811280bc:	3214b03a 	or	r10,r6,r8
811280c0:	503ff426 	beq	r10,zero,81128094 <__reset+0xfb108094>
811280c4:	00800044 	movi	r2,1
811280c8:	f800283a 	ret
811280cc:	2254b03a 	or	r10,r4,r9
811280d0:	503fee26 	beq	r10,zero,8112808c <__reset+0xfb10808c>
811280d4:	00800044 	movi	r2,1
811280d8:	f800283a 	ret
811280dc:	0005883a 	mov	r2,zero
811280e0:	f800283a 	ret

811280e4 <__gedf2>:
811280e4:	2804d53a 	srli	r2,r5,20
811280e8:	3806d53a 	srli	r3,r7,20
811280ec:	02000434 	movhi	r8,16
811280f0:	423fffc4 	addi	r8,r8,-1
811280f4:	1081ffcc 	andi	r2,r2,2047
811280f8:	0241ffc4 	movi	r9,2047
811280fc:	2a14703a 	and	r10,r5,r8
81128100:	18c1ffcc 	andi	r3,r3,2047
81128104:	3a10703a 	and	r8,r7,r8
81128108:	280ad7fa 	srli	r5,r5,31
8112810c:	380ed7fa 	srli	r7,r7,31
81128110:	12401d26 	beq	r2,r9,81128188 <__gedf2+0xa4>
81128114:	0241ffc4 	movi	r9,2047
81128118:	1a401226 	beq	r3,r9,81128164 <__gedf2+0x80>
8112811c:	1000081e 	bne	r2,zero,81128140 <__gedf2+0x5c>
81128120:	2296b03a 	or	r11,r4,r10
81128124:	5813003a 	cmpeq	r9,r11,zero
81128128:	1800091e 	bne	r3,zero,81128150 <__gedf2+0x6c>
8112812c:	3218b03a 	or	r12,r6,r8
81128130:	6000071e 	bne	r12,zero,81128150 <__gedf2+0x6c>
81128134:	0005883a 	mov	r2,zero
81128138:	5800101e 	bne	r11,zero,8112817c <__gedf2+0x98>
8112813c:	f800283a 	ret
81128140:	18000c1e 	bne	r3,zero,81128174 <__gedf2+0x90>
81128144:	3212b03a 	or	r9,r6,r8
81128148:	48000c26 	beq	r9,zero,8112817c <__gedf2+0x98>
8112814c:	0013883a 	mov	r9,zero
81128150:	39c03fcc 	andi	r7,r7,255
81128154:	48000826 	beq	r9,zero,81128178 <__gedf2+0x94>
81128158:	38000926 	beq	r7,zero,81128180 <__gedf2+0x9c>
8112815c:	00800044 	movi	r2,1
81128160:	f800283a 	ret
81128164:	3212b03a 	or	r9,r6,r8
81128168:	483fec26 	beq	r9,zero,8112811c <__reset+0xfb10811c>
8112816c:	00bfff84 	movi	r2,-2
81128170:	f800283a 	ret
81128174:	39c03fcc 	andi	r7,r7,255
81128178:	29c00626 	beq	r5,r7,81128194 <__gedf2+0xb0>
8112817c:	283ff726 	beq	r5,zero,8112815c <__reset+0xfb10815c>
81128180:	00bfffc4 	movi	r2,-1
81128184:	f800283a 	ret
81128188:	2292b03a 	or	r9,r4,r10
8112818c:	483fe126 	beq	r9,zero,81128114 <__reset+0xfb108114>
81128190:	003ff606 	br	8112816c <__reset+0xfb10816c>
81128194:	18bff916 	blt	r3,r2,8112817c <__reset+0xfb10817c>
81128198:	10c00316 	blt	r2,r3,811281a8 <__gedf2+0xc4>
8112819c:	42bff736 	bltu	r8,r10,8112817c <__reset+0xfb10817c>
811281a0:	52000326 	beq	r10,r8,811281b0 <__gedf2+0xcc>
811281a4:	5200042e 	bgeu	r10,r8,811281b8 <__gedf2+0xd4>
811281a8:	283fec1e 	bne	r5,zero,8112815c <__reset+0xfb10815c>
811281ac:	003ff406 	br	81128180 <__reset+0xfb108180>
811281b0:	313ff236 	bltu	r6,r4,8112817c <__reset+0xfb10817c>
811281b4:	21bffc36 	bltu	r4,r6,811281a8 <__reset+0xfb1081a8>
811281b8:	0005883a 	mov	r2,zero
811281bc:	f800283a 	ret

811281c0 <__ledf2>:
811281c0:	2804d53a 	srli	r2,r5,20
811281c4:	3810d53a 	srli	r8,r7,20
811281c8:	00c00434 	movhi	r3,16
811281cc:	18ffffc4 	addi	r3,r3,-1
811281d0:	1081ffcc 	andi	r2,r2,2047
811281d4:	0241ffc4 	movi	r9,2047
811281d8:	28d4703a 	and	r10,r5,r3
811281dc:	4201ffcc 	andi	r8,r8,2047
811281e0:	38c6703a 	and	r3,r7,r3
811281e4:	280ad7fa 	srli	r5,r5,31
811281e8:	380ed7fa 	srli	r7,r7,31
811281ec:	12401f26 	beq	r2,r9,8112826c <__ledf2+0xac>
811281f0:	0241ffc4 	movi	r9,2047
811281f4:	42401426 	beq	r8,r9,81128248 <__ledf2+0x88>
811281f8:	1000091e 	bne	r2,zero,81128220 <__ledf2+0x60>
811281fc:	2296b03a 	or	r11,r4,r10
81128200:	5813003a 	cmpeq	r9,r11,zero
81128204:	29403fcc 	andi	r5,r5,255
81128208:	40000a1e 	bne	r8,zero,81128234 <__ledf2+0x74>
8112820c:	30d8b03a 	or	r12,r6,r3
81128210:	6000081e 	bne	r12,zero,81128234 <__ledf2+0x74>
81128214:	0005883a 	mov	r2,zero
81128218:	5800111e 	bne	r11,zero,81128260 <__ledf2+0xa0>
8112821c:	f800283a 	ret
81128220:	29403fcc 	andi	r5,r5,255
81128224:	40000c1e 	bne	r8,zero,81128258 <__ledf2+0x98>
81128228:	30d2b03a 	or	r9,r6,r3
8112822c:	48000c26 	beq	r9,zero,81128260 <__ledf2+0xa0>
81128230:	0013883a 	mov	r9,zero
81128234:	39c03fcc 	andi	r7,r7,255
81128238:	48000826 	beq	r9,zero,8112825c <__ledf2+0x9c>
8112823c:	38001126 	beq	r7,zero,81128284 <__ledf2+0xc4>
81128240:	00800044 	movi	r2,1
81128244:	f800283a 	ret
81128248:	30d2b03a 	or	r9,r6,r3
8112824c:	483fea26 	beq	r9,zero,811281f8 <__reset+0xfb1081f8>
81128250:	00800084 	movi	r2,2
81128254:	f800283a 	ret
81128258:	39c03fcc 	andi	r7,r7,255
8112825c:	39400726 	beq	r7,r5,8112827c <__ledf2+0xbc>
81128260:	2800081e 	bne	r5,zero,81128284 <__ledf2+0xc4>
81128264:	00800044 	movi	r2,1
81128268:	f800283a 	ret
8112826c:	2292b03a 	or	r9,r4,r10
81128270:	483fdf26 	beq	r9,zero,811281f0 <__reset+0xfb1081f0>
81128274:	00800084 	movi	r2,2
81128278:	f800283a 	ret
8112827c:	4080030e 	bge	r8,r2,8112828c <__ledf2+0xcc>
81128280:	383fef26 	beq	r7,zero,81128240 <__reset+0xfb108240>
81128284:	00bfffc4 	movi	r2,-1
81128288:	f800283a 	ret
8112828c:	123feb16 	blt	r2,r8,8112823c <__reset+0xfb10823c>
81128290:	1abff336 	bltu	r3,r10,81128260 <__reset+0xfb108260>
81128294:	50c00326 	beq	r10,r3,811282a4 <__ledf2+0xe4>
81128298:	50c0042e 	bgeu	r10,r3,811282ac <__ledf2+0xec>
8112829c:	283fe81e 	bne	r5,zero,81128240 <__reset+0xfb108240>
811282a0:	003ff806 	br	81128284 <__reset+0xfb108284>
811282a4:	313fee36 	bltu	r6,r4,81128260 <__reset+0xfb108260>
811282a8:	21bffc36 	bltu	r4,r6,8112829c <__reset+0xfb10829c>
811282ac:	0005883a 	mov	r2,zero
811282b0:	f800283a 	ret

811282b4 <__subdf3>:
811282b4:	02000434 	movhi	r8,16
811282b8:	423fffc4 	addi	r8,r8,-1
811282bc:	defffb04 	addi	sp,sp,-20
811282c0:	2a14703a 	and	r10,r5,r8
811282c4:	3812d53a 	srli	r9,r7,20
811282c8:	3a10703a 	and	r8,r7,r8
811282cc:	de00012e 	bgeu	sp,et,811282d4 <__subdf3+0x20>
811282d0:	003b68fa 	trap	3
811282d4:	2006d77a 	srli	r3,r4,29
811282d8:	3004d77a 	srli	r2,r6,29
811282dc:	dc000015 	stw	r16,0(sp)
811282e0:	501490fa 	slli	r10,r10,3
811282e4:	2820d53a 	srli	r16,r5,20
811282e8:	401090fa 	slli	r8,r8,3
811282ec:	dc800215 	stw	r18,8(sp)
811282f0:	dc400115 	stw	r17,4(sp)
811282f4:	dfc00415 	stw	ra,16(sp)
811282f8:	202290fa 	slli	r17,r4,3
811282fc:	dcc00315 	stw	r19,12(sp)
81128300:	4a41ffcc 	andi	r9,r9,2047
81128304:	0101ffc4 	movi	r4,2047
81128308:	2824d7fa 	srli	r18,r5,31
8112830c:	8401ffcc 	andi	r16,r16,2047
81128310:	50c6b03a 	or	r3,r10,r3
81128314:	380ed7fa 	srli	r7,r7,31
81128318:	408ab03a 	or	r5,r8,r2
8112831c:	300c90fa 	slli	r6,r6,3
81128320:	49009626 	beq	r9,r4,8112857c <__subdf3+0x2c8>
81128324:	39c0005c 	xori	r7,r7,1
81128328:	8245c83a 	sub	r2,r16,r9
8112832c:	3c807426 	beq	r7,r18,81128500 <__subdf3+0x24c>
81128330:	0080af0e 	bge	zero,r2,811285f0 <__subdf3+0x33c>
81128334:	48002a1e 	bne	r9,zero,811283e0 <__subdf3+0x12c>
81128338:	2988b03a 	or	r4,r5,r6
8112833c:	20009a1e 	bne	r4,zero,811285a8 <__subdf3+0x2f4>
81128340:	888001cc 	andi	r2,r17,7
81128344:	10000726 	beq	r2,zero,81128364 <__subdf3+0xb0>
81128348:	888003cc 	andi	r2,r17,15
8112834c:	01000104 	movi	r4,4
81128350:	11000426 	beq	r2,r4,81128364 <__subdf3+0xb0>
81128354:	890b883a 	add	r5,r17,r4
81128358:	2c63803a 	cmpltu	r17,r5,r17
8112835c:	1c47883a 	add	r3,r3,r17
81128360:	2823883a 	mov	r17,r5
81128364:	1880202c 	andhi	r2,r3,128
81128368:	10005926 	beq	r2,zero,811284d0 <__subdf3+0x21c>
8112836c:	84000044 	addi	r16,r16,1
81128370:	0081ffc4 	movi	r2,2047
81128374:	8080be26 	beq	r16,r2,81128670 <__subdf3+0x3bc>
81128378:	017fe034 	movhi	r5,65408
8112837c:	297fffc4 	addi	r5,r5,-1
81128380:	1946703a 	and	r3,r3,r5
81128384:	1804977a 	slli	r2,r3,29
81128388:	1806927a 	slli	r3,r3,9
8112838c:	8822d0fa 	srli	r17,r17,3
81128390:	8401ffcc 	andi	r16,r16,2047
81128394:	180ad33a 	srli	r5,r3,12
81128398:	9100004c 	andi	r4,r18,1
8112839c:	1444b03a 	or	r2,r2,r17
811283a0:	80c1ffcc 	andi	r3,r16,2047
811283a4:	1820953a 	slli	r16,r3,20
811283a8:	20c03fcc 	andi	r3,r4,255
811283ac:	180897fa 	slli	r4,r3,31
811283b0:	00c00434 	movhi	r3,16
811283b4:	18ffffc4 	addi	r3,r3,-1
811283b8:	28c6703a 	and	r3,r5,r3
811283bc:	1c06b03a 	or	r3,r3,r16
811283c0:	1906b03a 	or	r3,r3,r4
811283c4:	dfc00417 	ldw	ra,16(sp)
811283c8:	dcc00317 	ldw	r19,12(sp)
811283cc:	dc800217 	ldw	r18,8(sp)
811283d0:	dc400117 	ldw	r17,4(sp)
811283d4:	dc000017 	ldw	r16,0(sp)
811283d8:	dec00504 	addi	sp,sp,20
811283dc:	f800283a 	ret
811283e0:	0101ffc4 	movi	r4,2047
811283e4:	813fd626 	beq	r16,r4,81128340 <__reset+0xfb108340>
811283e8:	29402034 	orhi	r5,r5,128
811283ec:	01000e04 	movi	r4,56
811283f0:	2080a316 	blt	r4,r2,81128680 <__subdf3+0x3cc>
811283f4:	010007c4 	movi	r4,31
811283f8:	2080c616 	blt	r4,r2,81128714 <__subdf3+0x460>
811283fc:	01000804 	movi	r4,32
81128400:	2089c83a 	sub	r4,r4,r2
81128404:	2910983a 	sll	r8,r5,r4
81128408:	308ed83a 	srl	r7,r6,r2
8112840c:	3108983a 	sll	r4,r6,r4
81128410:	2884d83a 	srl	r2,r5,r2
81128414:	41ccb03a 	or	r6,r8,r7
81128418:	2008c03a 	cmpne	r4,r4,zero
8112841c:	310cb03a 	or	r6,r6,r4
81128420:	898dc83a 	sub	r6,r17,r6
81128424:	89a3803a 	cmpltu	r17,r17,r6
81128428:	1887c83a 	sub	r3,r3,r2
8112842c:	1c47c83a 	sub	r3,r3,r17
81128430:	3023883a 	mov	r17,r6
81128434:	1880202c 	andhi	r2,r3,128
81128438:	10002326 	beq	r2,zero,811284c8 <__subdf3+0x214>
8112843c:	04c02034 	movhi	r19,128
81128440:	9cffffc4 	addi	r19,r19,-1
81128444:	1ce6703a 	and	r19,r3,r19
81128448:	98007a26 	beq	r19,zero,81128634 <__subdf3+0x380>
8112844c:	9809883a 	mov	r4,r19
81128450:	11133880 	call	81113388 <__clzsi2>
81128454:	113ffe04 	addi	r4,r2,-8
81128458:	00c007c4 	movi	r3,31
8112845c:	19007b16 	blt	r3,r4,8112864c <__subdf3+0x398>
81128460:	00800804 	movi	r2,32
81128464:	1105c83a 	sub	r2,r2,r4
81128468:	8884d83a 	srl	r2,r17,r2
8112846c:	9906983a 	sll	r3,r19,r4
81128470:	8922983a 	sll	r17,r17,r4
81128474:	10c4b03a 	or	r2,r2,r3
81128478:	24007816 	blt	r4,r16,8112865c <__subdf3+0x3a8>
8112847c:	2421c83a 	sub	r16,r4,r16
81128480:	80c00044 	addi	r3,r16,1
81128484:	010007c4 	movi	r4,31
81128488:	20c09516 	blt	r4,r3,811286e0 <__subdf3+0x42c>
8112848c:	01400804 	movi	r5,32
81128490:	28cbc83a 	sub	r5,r5,r3
81128494:	88c8d83a 	srl	r4,r17,r3
81128498:	8962983a 	sll	r17,r17,r5
8112849c:	114a983a 	sll	r5,r2,r5
811284a0:	10c6d83a 	srl	r3,r2,r3
811284a4:	8804c03a 	cmpne	r2,r17,zero
811284a8:	290ab03a 	or	r5,r5,r4
811284ac:	28a2b03a 	or	r17,r5,r2
811284b0:	0021883a 	mov	r16,zero
811284b4:	003fa206 	br	81128340 <__reset+0xfb108340>
811284b8:	2090b03a 	or	r8,r4,r2
811284bc:	40018e26 	beq	r8,zero,81128af8 <__subdf3+0x844>
811284c0:	1007883a 	mov	r3,r2
811284c4:	2023883a 	mov	r17,r4
811284c8:	888001cc 	andi	r2,r17,7
811284cc:	103f9e1e 	bne	r2,zero,81128348 <__reset+0xfb108348>
811284d0:	1804977a 	slli	r2,r3,29
811284d4:	8822d0fa 	srli	r17,r17,3
811284d8:	1810d0fa 	srli	r8,r3,3
811284dc:	9100004c 	andi	r4,r18,1
811284e0:	1444b03a 	or	r2,r2,r17
811284e4:	00c1ffc4 	movi	r3,2047
811284e8:	80c02826 	beq	r16,r3,8112858c <__subdf3+0x2d8>
811284ec:	01400434 	movhi	r5,16
811284f0:	297fffc4 	addi	r5,r5,-1
811284f4:	80e0703a 	and	r16,r16,r3
811284f8:	414a703a 	and	r5,r8,r5
811284fc:	003fa806 	br	811283a0 <__reset+0xfb1083a0>
81128500:	0080630e 	bge	zero,r2,81128690 <__subdf3+0x3dc>
81128504:	48003026 	beq	r9,zero,811285c8 <__subdf3+0x314>
81128508:	0101ffc4 	movi	r4,2047
8112850c:	813f8c26 	beq	r16,r4,81128340 <__reset+0xfb108340>
81128510:	29402034 	orhi	r5,r5,128
81128514:	01000e04 	movi	r4,56
81128518:	2080a90e 	bge	r4,r2,811287c0 <__subdf3+0x50c>
8112851c:	298cb03a 	or	r6,r5,r6
81128520:	3012c03a 	cmpne	r9,r6,zero
81128524:	0005883a 	mov	r2,zero
81128528:	4c53883a 	add	r9,r9,r17
8112852c:	4c63803a 	cmpltu	r17,r9,r17
81128530:	10c7883a 	add	r3,r2,r3
81128534:	88c7883a 	add	r3,r17,r3
81128538:	4823883a 	mov	r17,r9
8112853c:	1880202c 	andhi	r2,r3,128
81128540:	1000d026 	beq	r2,zero,81128884 <__subdf3+0x5d0>
81128544:	84000044 	addi	r16,r16,1
81128548:	0081ffc4 	movi	r2,2047
8112854c:	8080fe26 	beq	r16,r2,81128948 <__subdf3+0x694>
81128550:	00bfe034 	movhi	r2,65408
81128554:	10bfffc4 	addi	r2,r2,-1
81128558:	1886703a 	and	r3,r3,r2
8112855c:	880ad07a 	srli	r5,r17,1
81128560:	180497fa 	slli	r2,r3,31
81128564:	8900004c 	andi	r4,r17,1
81128568:	2922b03a 	or	r17,r5,r4
8112856c:	1806d07a 	srli	r3,r3,1
81128570:	1462b03a 	or	r17,r2,r17
81128574:	3825883a 	mov	r18,r7
81128578:	003f7106 	br	81128340 <__reset+0xfb108340>
8112857c:	2984b03a 	or	r2,r5,r6
81128580:	103f6826 	beq	r2,zero,81128324 <__reset+0xfb108324>
81128584:	39c03fcc 	andi	r7,r7,255
81128588:	003f6706 	br	81128328 <__reset+0xfb108328>
8112858c:	4086b03a 	or	r3,r8,r2
81128590:	18015226 	beq	r3,zero,81128adc <__subdf3+0x828>
81128594:	00c00434 	movhi	r3,16
81128598:	41400234 	orhi	r5,r8,8
8112859c:	18ffffc4 	addi	r3,r3,-1
811285a0:	28ca703a 	and	r5,r5,r3
811285a4:	003f7e06 	br	811283a0 <__reset+0xfb1083a0>
811285a8:	10bfffc4 	addi	r2,r2,-1
811285ac:	1000491e 	bne	r2,zero,811286d4 <__subdf3+0x420>
811285b0:	898fc83a 	sub	r7,r17,r6
811285b4:	89e3803a 	cmpltu	r17,r17,r7
811285b8:	1947c83a 	sub	r3,r3,r5
811285bc:	1c47c83a 	sub	r3,r3,r17
811285c0:	3823883a 	mov	r17,r7
811285c4:	003f9b06 	br	81128434 <__reset+0xfb108434>
811285c8:	2988b03a 	or	r4,r5,r6
811285cc:	203f5c26 	beq	r4,zero,81128340 <__reset+0xfb108340>
811285d0:	10bfffc4 	addi	r2,r2,-1
811285d4:	1000931e 	bne	r2,zero,81128824 <__subdf3+0x570>
811285d8:	898d883a 	add	r6,r17,r6
811285dc:	3463803a 	cmpltu	r17,r6,r17
811285e0:	1947883a 	add	r3,r3,r5
811285e4:	88c7883a 	add	r3,r17,r3
811285e8:	3023883a 	mov	r17,r6
811285ec:	003fd306 	br	8112853c <__reset+0xfb10853c>
811285f0:	1000541e 	bne	r2,zero,81128744 <__subdf3+0x490>
811285f4:	80800044 	addi	r2,r16,1
811285f8:	1081ffcc 	andi	r2,r2,2047
811285fc:	01000044 	movi	r4,1
81128600:	2080a20e 	bge	r4,r2,8112888c <__subdf3+0x5d8>
81128604:	8989c83a 	sub	r4,r17,r6
81128608:	8905803a 	cmpltu	r2,r17,r4
8112860c:	1967c83a 	sub	r19,r3,r5
81128610:	98a7c83a 	sub	r19,r19,r2
81128614:	9880202c 	andhi	r2,r19,128
81128618:	10006326 	beq	r2,zero,811287a8 <__subdf3+0x4f4>
8112861c:	3463c83a 	sub	r17,r6,r17
81128620:	28c7c83a 	sub	r3,r5,r3
81128624:	344d803a 	cmpltu	r6,r6,r17
81128628:	19a7c83a 	sub	r19,r3,r6
8112862c:	3825883a 	mov	r18,r7
81128630:	983f861e 	bne	r19,zero,8112844c <__reset+0xfb10844c>
81128634:	8809883a 	mov	r4,r17
81128638:	11133880 	call	81113388 <__clzsi2>
8112863c:	10800804 	addi	r2,r2,32
81128640:	113ffe04 	addi	r4,r2,-8
81128644:	00c007c4 	movi	r3,31
81128648:	193f850e 	bge	r3,r4,81128460 <__reset+0xfb108460>
8112864c:	10bff604 	addi	r2,r2,-40
81128650:	8884983a 	sll	r2,r17,r2
81128654:	0023883a 	mov	r17,zero
81128658:	243f880e 	bge	r4,r16,8112847c <__reset+0xfb10847c>
8112865c:	00ffe034 	movhi	r3,65408
81128660:	18ffffc4 	addi	r3,r3,-1
81128664:	8121c83a 	sub	r16,r16,r4
81128668:	10c6703a 	and	r3,r2,r3
8112866c:	003f3406 	br	81128340 <__reset+0xfb108340>
81128670:	9100004c 	andi	r4,r18,1
81128674:	000b883a 	mov	r5,zero
81128678:	0005883a 	mov	r2,zero
8112867c:	003f4806 	br	811283a0 <__reset+0xfb1083a0>
81128680:	298cb03a 	or	r6,r5,r6
81128684:	300cc03a 	cmpne	r6,r6,zero
81128688:	0005883a 	mov	r2,zero
8112868c:	003f6406 	br	81128420 <__reset+0xfb108420>
81128690:	10009a1e 	bne	r2,zero,811288fc <__subdf3+0x648>
81128694:	82400044 	addi	r9,r16,1
81128698:	4881ffcc 	andi	r2,r9,2047
8112869c:	02800044 	movi	r10,1
811286a0:	5080670e 	bge	r10,r2,81128840 <__subdf3+0x58c>
811286a4:	0081ffc4 	movi	r2,2047
811286a8:	4880af26 	beq	r9,r2,81128968 <__subdf3+0x6b4>
811286ac:	898d883a 	add	r6,r17,r6
811286b0:	1945883a 	add	r2,r3,r5
811286b4:	3447803a 	cmpltu	r3,r6,r17
811286b8:	1887883a 	add	r3,r3,r2
811286bc:	182297fa 	slli	r17,r3,31
811286c0:	300cd07a 	srli	r6,r6,1
811286c4:	1806d07a 	srli	r3,r3,1
811286c8:	4821883a 	mov	r16,r9
811286cc:	89a2b03a 	or	r17,r17,r6
811286d0:	003f1b06 	br	81128340 <__reset+0xfb108340>
811286d4:	0101ffc4 	movi	r4,2047
811286d8:	813f441e 	bne	r16,r4,811283ec <__reset+0xfb1083ec>
811286dc:	003f1806 	br	81128340 <__reset+0xfb108340>
811286e0:	843ff844 	addi	r16,r16,-31
811286e4:	01400804 	movi	r5,32
811286e8:	1408d83a 	srl	r4,r2,r16
811286ec:	19405026 	beq	r3,r5,81128830 <__subdf3+0x57c>
811286f0:	01401004 	movi	r5,64
811286f4:	28c7c83a 	sub	r3,r5,r3
811286f8:	10c4983a 	sll	r2,r2,r3
811286fc:	88a2b03a 	or	r17,r17,r2
81128700:	8822c03a 	cmpne	r17,r17,zero
81128704:	2462b03a 	or	r17,r4,r17
81128708:	0007883a 	mov	r3,zero
8112870c:	0021883a 	mov	r16,zero
81128710:	003f6d06 	br	811284c8 <__reset+0xfb1084c8>
81128714:	11fff804 	addi	r7,r2,-32
81128718:	01000804 	movi	r4,32
8112871c:	29ced83a 	srl	r7,r5,r7
81128720:	11004526 	beq	r2,r4,81128838 <__subdf3+0x584>
81128724:	01001004 	movi	r4,64
81128728:	2089c83a 	sub	r4,r4,r2
8112872c:	2904983a 	sll	r2,r5,r4
81128730:	118cb03a 	or	r6,r2,r6
81128734:	300cc03a 	cmpne	r6,r6,zero
81128738:	398cb03a 	or	r6,r7,r6
8112873c:	0005883a 	mov	r2,zero
81128740:	003f3706 	br	81128420 <__reset+0xfb108420>
81128744:	80002a26 	beq	r16,zero,811287f0 <__subdf3+0x53c>
81128748:	0101ffc4 	movi	r4,2047
8112874c:	49006626 	beq	r9,r4,811288e8 <__subdf3+0x634>
81128750:	0085c83a 	sub	r2,zero,r2
81128754:	18c02034 	orhi	r3,r3,128
81128758:	01000e04 	movi	r4,56
8112875c:	20807e16 	blt	r4,r2,81128958 <__subdf3+0x6a4>
81128760:	010007c4 	movi	r4,31
81128764:	2080e716 	blt	r4,r2,81128b04 <__subdf3+0x850>
81128768:	01000804 	movi	r4,32
8112876c:	2089c83a 	sub	r4,r4,r2
81128770:	1914983a 	sll	r10,r3,r4
81128774:	8890d83a 	srl	r8,r17,r2
81128778:	8908983a 	sll	r4,r17,r4
8112877c:	1884d83a 	srl	r2,r3,r2
81128780:	5222b03a 	or	r17,r10,r8
81128784:	2006c03a 	cmpne	r3,r4,zero
81128788:	88e2b03a 	or	r17,r17,r3
8112878c:	3463c83a 	sub	r17,r6,r17
81128790:	2885c83a 	sub	r2,r5,r2
81128794:	344d803a 	cmpltu	r6,r6,r17
81128798:	1187c83a 	sub	r3,r2,r6
8112879c:	4821883a 	mov	r16,r9
811287a0:	3825883a 	mov	r18,r7
811287a4:	003f2306 	br	81128434 <__reset+0xfb108434>
811287a8:	24d0b03a 	or	r8,r4,r19
811287ac:	40001b1e 	bne	r8,zero,8112881c <__subdf3+0x568>
811287b0:	0005883a 	mov	r2,zero
811287b4:	0009883a 	mov	r4,zero
811287b8:	0021883a 	mov	r16,zero
811287bc:	003f4906 	br	811284e4 <__reset+0xfb1084e4>
811287c0:	010007c4 	movi	r4,31
811287c4:	20803a16 	blt	r4,r2,811288b0 <__subdf3+0x5fc>
811287c8:	01000804 	movi	r4,32
811287cc:	2089c83a 	sub	r4,r4,r2
811287d0:	2912983a 	sll	r9,r5,r4
811287d4:	3090d83a 	srl	r8,r6,r2
811287d8:	3108983a 	sll	r4,r6,r4
811287dc:	2884d83a 	srl	r2,r5,r2
811287e0:	4a12b03a 	or	r9,r9,r8
811287e4:	2008c03a 	cmpne	r4,r4,zero
811287e8:	4912b03a 	or	r9,r9,r4
811287ec:	003f4e06 	br	81128528 <__reset+0xfb108528>
811287f0:	1c48b03a 	or	r4,r3,r17
811287f4:	20003c26 	beq	r4,zero,811288e8 <__subdf3+0x634>
811287f8:	0084303a 	nor	r2,zero,r2
811287fc:	1000381e 	bne	r2,zero,811288e0 <__subdf3+0x62c>
81128800:	3463c83a 	sub	r17,r6,r17
81128804:	28c5c83a 	sub	r2,r5,r3
81128808:	344d803a 	cmpltu	r6,r6,r17
8112880c:	1187c83a 	sub	r3,r2,r6
81128810:	4821883a 	mov	r16,r9
81128814:	3825883a 	mov	r18,r7
81128818:	003f0606 	br	81128434 <__reset+0xfb108434>
8112881c:	2023883a 	mov	r17,r4
81128820:	003f0906 	br	81128448 <__reset+0xfb108448>
81128824:	0101ffc4 	movi	r4,2047
81128828:	813f3a1e 	bne	r16,r4,81128514 <__reset+0xfb108514>
8112882c:	003ec406 	br	81128340 <__reset+0xfb108340>
81128830:	0005883a 	mov	r2,zero
81128834:	003fb106 	br	811286fc <__reset+0xfb1086fc>
81128838:	0005883a 	mov	r2,zero
8112883c:	003fbc06 	br	81128730 <__reset+0xfb108730>
81128840:	1c44b03a 	or	r2,r3,r17
81128844:	80008e1e 	bne	r16,zero,81128a80 <__subdf3+0x7cc>
81128848:	1000c826 	beq	r2,zero,81128b6c <__subdf3+0x8b8>
8112884c:	2984b03a 	or	r2,r5,r6
81128850:	103ebb26 	beq	r2,zero,81128340 <__reset+0xfb108340>
81128854:	8989883a 	add	r4,r17,r6
81128858:	1945883a 	add	r2,r3,r5
8112885c:	2447803a 	cmpltu	r3,r4,r17
81128860:	1887883a 	add	r3,r3,r2
81128864:	1880202c 	andhi	r2,r3,128
81128868:	2023883a 	mov	r17,r4
8112886c:	103f1626 	beq	r2,zero,811284c8 <__reset+0xfb1084c8>
81128870:	00bfe034 	movhi	r2,65408
81128874:	10bfffc4 	addi	r2,r2,-1
81128878:	5021883a 	mov	r16,r10
8112887c:	1886703a 	and	r3,r3,r2
81128880:	003eaf06 	br	81128340 <__reset+0xfb108340>
81128884:	3825883a 	mov	r18,r7
81128888:	003f0f06 	br	811284c8 <__reset+0xfb1084c8>
8112888c:	1c44b03a 	or	r2,r3,r17
81128890:	8000251e 	bne	r16,zero,81128928 <__subdf3+0x674>
81128894:	1000661e 	bne	r2,zero,81128a30 <__subdf3+0x77c>
81128898:	2990b03a 	or	r8,r5,r6
8112889c:	40009626 	beq	r8,zero,81128af8 <__subdf3+0x844>
811288a0:	2807883a 	mov	r3,r5
811288a4:	3023883a 	mov	r17,r6
811288a8:	3825883a 	mov	r18,r7
811288ac:	003ea406 	br	81128340 <__reset+0xfb108340>
811288b0:	127ff804 	addi	r9,r2,-32
811288b4:	01000804 	movi	r4,32
811288b8:	2a52d83a 	srl	r9,r5,r9
811288bc:	11008c26 	beq	r2,r4,81128af0 <__subdf3+0x83c>
811288c0:	01001004 	movi	r4,64
811288c4:	2085c83a 	sub	r2,r4,r2
811288c8:	2884983a 	sll	r2,r5,r2
811288cc:	118cb03a 	or	r6,r2,r6
811288d0:	300cc03a 	cmpne	r6,r6,zero
811288d4:	4992b03a 	or	r9,r9,r6
811288d8:	0005883a 	mov	r2,zero
811288dc:	003f1206 	br	81128528 <__reset+0xfb108528>
811288e0:	0101ffc4 	movi	r4,2047
811288e4:	493f9c1e 	bne	r9,r4,81128758 <__reset+0xfb108758>
811288e8:	2807883a 	mov	r3,r5
811288ec:	3023883a 	mov	r17,r6
811288f0:	4821883a 	mov	r16,r9
811288f4:	3825883a 	mov	r18,r7
811288f8:	003e9106 	br	81128340 <__reset+0xfb108340>
811288fc:	80001f1e 	bne	r16,zero,8112897c <__subdf3+0x6c8>
81128900:	1c48b03a 	or	r4,r3,r17
81128904:	20005a26 	beq	r4,zero,81128a70 <__subdf3+0x7bc>
81128908:	0084303a 	nor	r2,zero,r2
8112890c:	1000561e 	bne	r2,zero,81128a68 <__subdf3+0x7b4>
81128910:	89a3883a 	add	r17,r17,r6
81128914:	1945883a 	add	r2,r3,r5
81128918:	898d803a 	cmpltu	r6,r17,r6
8112891c:	3087883a 	add	r3,r6,r2
81128920:	4821883a 	mov	r16,r9
81128924:	003f0506 	br	8112853c <__reset+0xfb10853c>
81128928:	10002b1e 	bne	r2,zero,811289d8 <__subdf3+0x724>
8112892c:	2984b03a 	or	r2,r5,r6
81128930:	10008026 	beq	r2,zero,81128b34 <__subdf3+0x880>
81128934:	2807883a 	mov	r3,r5
81128938:	3023883a 	mov	r17,r6
8112893c:	3825883a 	mov	r18,r7
81128940:	0401ffc4 	movi	r16,2047
81128944:	003e7e06 	br	81128340 <__reset+0xfb108340>
81128948:	3809883a 	mov	r4,r7
8112894c:	0011883a 	mov	r8,zero
81128950:	0005883a 	mov	r2,zero
81128954:	003ee306 	br	811284e4 <__reset+0xfb1084e4>
81128958:	1c62b03a 	or	r17,r3,r17
8112895c:	8822c03a 	cmpne	r17,r17,zero
81128960:	0005883a 	mov	r2,zero
81128964:	003f8906 	br	8112878c <__reset+0xfb10878c>
81128968:	3809883a 	mov	r4,r7
8112896c:	4821883a 	mov	r16,r9
81128970:	0011883a 	mov	r8,zero
81128974:	0005883a 	mov	r2,zero
81128978:	003eda06 	br	811284e4 <__reset+0xfb1084e4>
8112897c:	0101ffc4 	movi	r4,2047
81128980:	49003b26 	beq	r9,r4,81128a70 <__subdf3+0x7bc>
81128984:	0085c83a 	sub	r2,zero,r2
81128988:	18c02034 	orhi	r3,r3,128
8112898c:	01000e04 	movi	r4,56
81128990:	20806e16 	blt	r4,r2,81128b4c <__subdf3+0x898>
81128994:	010007c4 	movi	r4,31
81128998:	20807716 	blt	r4,r2,81128b78 <__subdf3+0x8c4>
8112899c:	01000804 	movi	r4,32
811289a0:	2089c83a 	sub	r4,r4,r2
811289a4:	1914983a 	sll	r10,r3,r4
811289a8:	8890d83a 	srl	r8,r17,r2
811289ac:	8908983a 	sll	r4,r17,r4
811289b0:	1884d83a 	srl	r2,r3,r2
811289b4:	5222b03a 	or	r17,r10,r8
811289b8:	2006c03a 	cmpne	r3,r4,zero
811289bc:	88e2b03a 	or	r17,r17,r3
811289c0:	89a3883a 	add	r17,r17,r6
811289c4:	1145883a 	add	r2,r2,r5
811289c8:	898d803a 	cmpltu	r6,r17,r6
811289cc:	3087883a 	add	r3,r6,r2
811289d0:	4821883a 	mov	r16,r9
811289d4:	003ed906 	br	8112853c <__reset+0xfb10853c>
811289d8:	2984b03a 	or	r2,r5,r6
811289dc:	10004226 	beq	r2,zero,81128ae8 <__subdf3+0x834>
811289e0:	1808d0fa 	srli	r4,r3,3
811289e4:	8822d0fa 	srli	r17,r17,3
811289e8:	1806977a 	slli	r3,r3,29
811289ec:	2080022c 	andhi	r2,r4,8
811289f0:	1c62b03a 	or	r17,r3,r17
811289f4:	10000826 	beq	r2,zero,81128a18 <__subdf3+0x764>
811289f8:	2812d0fa 	srli	r9,r5,3
811289fc:	4880022c 	andhi	r2,r9,8
81128a00:	1000051e 	bne	r2,zero,81128a18 <__subdf3+0x764>
81128a04:	300cd0fa 	srli	r6,r6,3
81128a08:	2804977a 	slli	r2,r5,29
81128a0c:	4809883a 	mov	r4,r9
81128a10:	3825883a 	mov	r18,r7
81128a14:	11a2b03a 	or	r17,r2,r6
81128a18:	8806d77a 	srli	r3,r17,29
81128a1c:	200890fa 	slli	r4,r4,3
81128a20:	882290fa 	slli	r17,r17,3
81128a24:	0401ffc4 	movi	r16,2047
81128a28:	1906b03a 	or	r3,r3,r4
81128a2c:	003e4406 	br	81128340 <__reset+0xfb108340>
81128a30:	2984b03a 	or	r2,r5,r6
81128a34:	103e4226 	beq	r2,zero,81128340 <__reset+0xfb108340>
81128a38:	8989c83a 	sub	r4,r17,r6
81128a3c:	8911803a 	cmpltu	r8,r17,r4
81128a40:	1945c83a 	sub	r2,r3,r5
81128a44:	1205c83a 	sub	r2,r2,r8
81128a48:	1200202c 	andhi	r8,r2,128
81128a4c:	403e9a26 	beq	r8,zero,811284b8 <__reset+0xfb1084b8>
81128a50:	3463c83a 	sub	r17,r6,r17
81128a54:	28c5c83a 	sub	r2,r5,r3
81128a58:	344d803a 	cmpltu	r6,r6,r17
81128a5c:	1187c83a 	sub	r3,r2,r6
81128a60:	3825883a 	mov	r18,r7
81128a64:	003e3606 	br	81128340 <__reset+0xfb108340>
81128a68:	0101ffc4 	movi	r4,2047
81128a6c:	493fc71e 	bne	r9,r4,8112898c <__reset+0xfb10898c>
81128a70:	2807883a 	mov	r3,r5
81128a74:	3023883a 	mov	r17,r6
81128a78:	4821883a 	mov	r16,r9
81128a7c:	003e3006 	br	81128340 <__reset+0xfb108340>
81128a80:	10003626 	beq	r2,zero,81128b5c <__subdf3+0x8a8>
81128a84:	2984b03a 	or	r2,r5,r6
81128a88:	10001726 	beq	r2,zero,81128ae8 <__subdf3+0x834>
81128a8c:	1808d0fa 	srli	r4,r3,3
81128a90:	8822d0fa 	srli	r17,r17,3
81128a94:	1806977a 	slli	r3,r3,29
81128a98:	2080022c 	andhi	r2,r4,8
81128a9c:	1c62b03a 	or	r17,r3,r17
81128aa0:	10000726 	beq	r2,zero,81128ac0 <__subdf3+0x80c>
81128aa4:	2812d0fa 	srli	r9,r5,3
81128aa8:	4880022c 	andhi	r2,r9,8
81128aac:	1000041e 	bne	r2,zero,81128ac0 <__subdf3+0x80c>
81128ab0:	300cd0fa 	srli	r6,r6,3
81128ab4:	2804977a 	slli	r2,r5,29
81128ab8:	4809883a 	mov	r4,r9
81128abc:	11a2b03a 	or	r17,r2,r6
81128ac0:	8806d77a 	srli	r3,r17,29
81128ac4:	200890fa 	slli	r4,r4,3
81128ac8:	882290fa 	slli	r17,r17,3
81128acc:	3825883a 	mov	r18,r7
81128ad0:	1906b03a 	or	r3,r3,r4
81128ad4:	0401ffc4 	movi	r16,2047
81128ad8:	003e1906 	br	81128340 <__reset+0xfb108340>
81128adc:	000b883a 	mov	r5,zero
81128ae0:	0005883a 	mov	r2,zero
81128ae4:	003e2e06 	br	811283a0 <__reset+0xfb1083a0>
81128ae8:	0401ffc4 	movi	r16,2047
81128aec:	003e1406 	br	81128340 <__reset+0xfb108340>
81128af0:	0005883a 	mov	r2,zero
81128af4:	003f7506 	br	811288cc <__reset+0xfb1088cc>
81128af8:	0005883a 	mov	r2,zero
81128afc:	0009883a 	mov	r4,zero
81128b00:	003e7806 	br	811284e4 <__reset+0xfb1084e4>
81128b04:	123ff804 	addi	r8,r2,-32
81128b08:	01000804 	movi	r4,32
81128b0c:	1a10d83a 	srl	r8,r3,r8
81128b10:	11002526 	beq	r2,r4,81128ba8 <__subdf3+0x8f4>
81128b14:	01001004 	movi	r4,64
81128b18:	2085c83a 	sub	r2,r4,r2
81128b1c:	1884983a 	sll	r2,r3,r2
81128b20:	1444b03a 	or	r2,r2,r17
81128b24:	1004c03a 	cmpne	r2,r2,zero
81128b28:	40a2b03a 	or	r17,r8,r2
81128b2c:	0005883a 	mov	r2,zero
81128b30:	003f1606 	br	8112878c <__reset+0xfb10878c>
81128b34:	02000434 	movhi	r8,16
81128b38:	0009883a 	mov	r4,zero
81128b3c:	423fffc4 	addi	r8,r8,-1
81128b40:	00bfffc4 	movi	r2,-1
81128b44:	0401ffc4 	movi	r16,2047
81128b48:	003e6606 	br	811284e4 <__reset+0xfb1084e4>
81128b4c:	1c62b03a 	or	r17,r3,r17
81128b50:	8822c03a 	cmpne	r17,r17,zero
81128b54:	0005883a 	mov	r2,zero
81128b58:	003f9906 	br	811289c0 <__reset+0xfb1089c0>
81128b5c:	2807883a 	mov	r3,r5
81128b60:	3023883a 	mov	r17,r6
81128b64:	0401ffc4 	movi	r16,2047
81128b68:	003df506 	br	81128340 <__reset+0xfb108340>
81128b6c:	2807883a 	mov	r3,r5
81128b70:	3023883a 	mov	r17,r6
81128b74:	003df206 	br	81128340 <__reset+0xfb108340>
81128b78:	123ff804 	addi	r8,r2,-32
81128b7c:	01000804 	movi	r4,32
81128b80:	1a10d83a 	srl	r8,r3,r8
81128b84:	11000a26 	beq	r2,r4,81128bb0 <__subdf3+0x8fc>
81128b88:	01001004 	movi	r4,64
81128b8c:	2085c83a 	sub	r2,r4,r2
81128b90:	1884983a 	sll	r2,r3,r2
81128b94:	1444b03a 	or	r2,r2,r17
81128b98:	1004c03a 	cmpne	r2,r2,zero
81128b9c:	40a2b03a 	or	r17,r8,r2
81128ba0:	0005883a 	mov	r2,zero
81128ba4:	003f8606 	br	811289c0 <__reset+0xfb1089c0>
81128ba8:	0005883a 	mov	r2,zero
81128bac:	003fdc06 	br	81128b20 <__reset+0xfb108b20>
81128bb0:	0005883a 	mov	r2,zero
81128bb4:	003ff706 	br	81128b94 <__reset+0xfb108b94>

81128bb8 <__fixdfsi>:
81128bb8:	280cd53a 	srli	r6,r5,20
81128bbc:	00c00434 	movhi	r3,16
81128bc0:	18ffffc4 	addi	r3,r3,-1
81128bc4:	3181ffcc 	andi	r6,r6,2047
81128bc8:	01c0ff84 	movi	r7,1022
81128bcc:	28c6703a 	and	r3,r5,r3
81128bd0:	280ad7fa 	srli	r5,r5,31
81128bd4:	3980120e 	bge	r7,r6,81128c20 <__fixdfsi+0x68>
81128bd8:	00810744 	movi	r2,1053
81128bdc:	11800c16 	blt	r2,r6,81128c10 <__fixdfsi+0x58>
81128be0:	00810cc4 	movi	r2,1075
81128be4:	1185c83a 	sub	r2,r2,r6
81128be8:	01c007c4 	movi	r7,31
81128bec:	18c00434 	orhi	r3,r3,16
81128bf0:	38800d16 	blt	r7,r2,81128c28 <__fixdfsi+0x70>
81128bf4:	31befb44 	addi	r6,r6,-1043
81128bf8:	2084d83a 	srl	r2,r4,r2
81128bfc:	1986983a 	sll	r3,r3,r6
81128c00:	1884b03a 	or	r2,r3,r2
81128c04:	28000726 	beq	r5,zero,81128c24 <__fixdfsi+0x6c>
81128c08:	0085c83a 	sub	r2,zero,r2
81128c0c:	f800283a 	ret
81128c10:	00a00034 	movhi	r2,32768
81128c14:	10bfffc4 	addi	r2,r2,-1
81128c18:	2885883a 	add	r2,r5,r2
81128c1c:	f800283a 	ret
81128c20:	0005883a 	mov	r2,zero
81128c24:	f800283a 	ret
81128c28:	008104c4 	movi	r2,1043
81128c2c:	1185c83a 	sub	r2,r2,r6
81128c30:	1884d83a 	srl	r2,r3,r2
81128c34:	003ff306 	br	81128c04 <__reset+0xfb108c04>

81128c38 <__floatsidf>:
81128c38:	defffd04 	addi	sp,sp,-12
81128c3c:	de00012e 	bgeu	sp,et,81128c44 <__floatsidf+0xc>
81128c40:	003b68fa 	trap	3
81128c44:	dfc00215 	stw	ra,8(sp)
81128c48:	dc400115 	stw	r17,4(sp)
81128c4c:	dc000015 	stw	r16,0(sp)
81128c50:	20002b26 	beq	r4,zero,81128d00 <__floatsidf+0xc8>
81128c54:	2023883a 	mov	r17,r4
81128c58:	2020d7fa 	srli	r16,r4,31
81128c5c:	20002d16 	blt	r4,zero,81128d14 <__floatsidf+0xdc>
81128c60:	8809883a 	mov	r4,r17
81128c64:	11133880 	call	81113388 <__clzsi2>
81128c68:	01410784 	movi	r5,1054
81128c6c:	288bc83a 	sub	r5,r5,r2
81128c70:	01010cc4 	movi	r4,1075
81128c74:	2149c83a 	sub	r4,r4,r5
81128c78:	00c007c4 	movi	r3,31
81128c7c:	1900160e 	bge	r3,r4,81128cd8 <__floatsidf+0xa0>
81128c80:	00c104c4 	movi	r3,1043
81128c84:	1947c83a 	sub	r3,r3,r5
81128c88:	88c6983a 	sll	r3,r17,r3
81128c8c:	00800434 	movhi	r2,16
81128c90:	10bfffc4 	addi	r2,r2,-1
81128c94:	1886703a 	and	r3,r3,r2
81128c98:	2941ffcc 	andi	r5,r5,2047
81128c9c:	800d883a 	mov	r6,r16
81128ca0:	0005883a 	mov	r2,zero
81128ca4:	280a953a 	slli	r5,r5,20
81128ca8:	31803fcc 	andi	r6,r6,255
81128cac:	01000434 	movhi	r4,16
81128cb0:	300c97fa 	slli	r6,r6,31
81128cb4:	213fffc4 	addi	r4,r4,-1
81128cb8:	1906703a 	and	r3,r3,r4
81128cbc:	1946b03a 	or	r3,r3,r5
81128cc0:	1986b03a 	or	r3,r3,r6
81128cc4:	dfc00217 	ldw	ra,8(sp)
81128cc8:	dc400117 	ldw	r17,4(sp)
81128ccc:	dc000017 	ldw	r16,0(sp)
81128cd0:	dec00304 	addi	sp,sp,12
81128cd4:	f800283a 	ret
81128cd8:	00c002c4 	movi	r3,11
81128cdc:	1887c83a 	sub	r3,r3,r2
81128ce0:	88c6d83a 	srl	r3,r17,r3
81128ce4:	8904983a 	sll	r2,r17,r4
81128ce8:	01000434 	movhi	r4,16
81128cec:	213fffc4 	addi	r4,r4,-1
81128cf0:	2941ffcc 	andi	r5,r5,2047
81128cf4:	1906703a 	and	r3,r3,r4
81128cf8:	800d883a 	mov	r6,r16
81128cfc:	003fe906 	br	81128ca4 <__reset+0xfb108ca4>
81128d00:	000d883a 	mov	r6,zero
81128d04:	000b883a 	mov	r5,zero
81128d08:	0007883a 	mov	r3,zero
81128d0c:	0005883a 	mov	r2,zero
81128d10:	003fe406 	br	81128ca4 <__reset+0xfb108ca4>
81128d14:	0123c83a 	sub	r17,zero,r4
81128d18:	003fd106 	br	81128c60 <__reset+0xfb108c60>

81128d1c <__floatunsidf>:
81128d1c:	defffe04 	addi	sp,sp,-8
81128d20:	de00012e 	bgeu	sp,et,81128d28 <__floatunsidf+0xc>
81128d24:	003b68fa 	trap	3
81128d28:	dc000015 	stw	r16,0(sp)
81128d2c:	dfc00115 	stw	ra,4(sp)
81128d30:	2021883a 	mov	r16,r4
81128d34:	20002226 	beq	r4,zero,81128dc0 <__floatunsidf+0xa4>
81128d38:	11133880 	call	81113388 <__clzsi2>
81128d3c:	01010784 	movi	r4,1054
81128d40:	2089c83a 	sub	r4,r4,r2
81128d44:	01810cc4 	movi	r6,1075
81128d48:	310dc83a 	sub	r6,r6,r4
81128d4c:	00c007c4 	movi	r3,31
81128d50:	1980120e 	bge	r3,r6,81128d9c <__floatunsidf+0x80>
81128d54:	00c104c4 	movi	r3,1043
81128d58:	1907c83a 	sub	r3,r3,r4
81128d5c:	80ca983a 	sll	r5,r16,r3
81128d60:	00800434 	movhi	r2,16
81128d64:	10bfffc4 	addi	r2,r2,-1
81128d68:	2101ffcc 	andi	r4,r4,2047
81128d6c:	0021883a 	mov	r16,zero
81128d70:	288a703a 	and	r5,r5,r2
81128d74:	2008953a 	slli	r4,r4,20
81128d78:	00c00434 	movhi	r3,16
81128d7c:	18ffffc4 	addi	r3,r3,-1
81128d80:	28c6703a 	and	r3,r5,r3
81128d84:	8005883a 	mov	r2,r16
81128d88:	1906b03a 	or	r3,r3,r4
81128d8c:	dfc00117 	ldw	ra,4(sp)
81128d90:	dc000017 	ldw	r16,0(sp)
81128d94:	dec00204 	addi	sp,sp,8
81128d98:	f800283a 	ret
81128d9c:	00c002c4 	movi	r3,11
81128da0:	188bc83a 	sub	r5,r3,r2
81128da4:	814ad83a 	srl	r5,r16,r5
81128da8:	00c00434 	movhi	r3,16
81128dac:	18ffffc4 	addi	r3,r3,-1
81128db0:	81a0983a 	sll	r16,r16,r6
81128db4:	2101ffcc 	andi	r4,r4,2047
81128db8:	28ca703a 	and	r5,r5,r3
81128dbc:	003fed06 	br	81128d74 <__reset+0xfb108d74>
81128dc0:	0009883a 	mov	r4,zero
81128dc4:	000b883a 	mov	r5,zero
81128dc8:	003fea06 	br	81128d74 <__reset+0xfb108d74>

81128dcc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81128dcc:	defffb04 	addi	sp,sp,-20
81128dd0:	de00012e 	bgeu	sp,et,81128dd8 <alt_busy_sleep+0xc>
81128dd4:	003b68fa 	trap	3
81128dd8:	df000415 	stw	fp,16(sp)
81128ddc:	df000404 	addi	fp,sp,16
81128de0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81128de4:	008000c4 	movi	r2,3
81128de8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81128dec:	e0fffd17 	ldw	r3,-12(fp)
81128df0:	008003f4 	movhi	r2,15
81128df4:	10909004 	addi	r2,r2,16960
81128df8:	1887383a 	mul	r3,r3,r2
81128dfc:	00817db4 	movhi	r2,1526
81128e00:	10b84004 	addi	r2,r2,-7936
81128e04:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81128e08:	00a00034 	movhi	r2,32768
81128e0c:	10bfffc4 	addi	r2,r2,-1
81128e10:	10c5203a 	divu	r2,r2,r3
81128e14:	e0ffff17 	ldw	r3,-4(fp)
81128e18:	1885203a 	divu	r2,r3,r2
81128e1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81128e20:	e0bffe17 	ldw	r2,-8(fp)
81128e24:	10002526 	beq	r2,zero,81128ebc <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81128e28:	e03ffc15 	stw	zero,-16(fp)
81128e2c:	00001406 	br	81128e80 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81128e30:	00a00034 	movhi	r2,32768
81128e34:	10bfffc4 	addi	r2,r2,-1
81128e38:	10bfffc4 	addi	r2,r2,-1
81128e3c:	103ffe1e 	bne	r2,zero,81128e38 <__reset+0xfb108e38>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81128e40:	e0fffd17 	ldw	r3,-12(fp)
81128e44:	008003f4 	movhi	r2,15
81128e48:	10909004 	addi	r2,r2,16960
81128e4c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81128e50:	00817db4 	movhi	r2,1526
81128e54:	10b84004 	addi	r2,r2,-7936
81128e58:	10c7203a 	divu	r3,r2,r3
81128e5c:	00a00034 	movhi	r2,32768
81128e60:	10bfffc4 	addi	r2,r2,-1
81128e64:	10c5203a 	divu	r2,r2,r3
81128e68:	e0ffff17 	ldw	r3,-4(fp)
81128e6c:	1885c83a 	sub	r2,r3,r2
81128e70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81128e74:	e0bffc17 	ldw	r2,-16(fp)
81128e78:	10800044 	addi	r2,r2,1
81128e7c:	e0bffc15 	stw	r2,-16(fp)
81128e80:	e0fffc17 	ldw	r3,-16(fp)
81128e84:	e0bffe17 	ldw	r2,-8(fp)
81128e88:	18bfe916 	blt	r3,r2,81128e30 <__reset+0xfb108e30>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81128e8c:	e0fffd17 	ldw	r3,-12(fp)
81128e90:	008003f4 	movhi	r2,15
81128e94:	10909004 	addi	r2,r2,16960
81128e98:	1887383a 	mul	r3,r3,r2
81128e9c:	00817db4 	movhi	r2,1526
81128ea0:	10b84004 	addi	r2,r2,-7936
81128ea4:	10c7203a 	divu	r3,r2,r3
81128ea8:	e0bfff17 	ldw	r2,-4(fp)
81128eac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81128eb0:	10bfffc4 	addi	r2,r2,-1
81128eb4:	103ffe1e 	bne	r2,zero,81128eb0 <__reset+0xfb108eb0>
81128eb8:	00000b06 	br	81128ee8 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81128ebc:	e0fffd17 	ldw	r3,-12(fp)
81128ec0:	008003f4 	movhi	r2,15
81128ec4:	10909004 	addi	r2,r2,16960
81128ec8:	1887383a 	mul	r3,r3,r2
81128ecc:	00817db4 	movhi	r2,1526
81128ed0:	10b84004 	addi	r2,r2,-7936
81128ed4:	10c7203a 	divu	r3,r2,r3
81128ed8:	e0bfff17 	ldw	r2,-4(fp)
81128edc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81128ee0:	10bfffc4 	addi	r2,r2,-1
81128ee4:	00bffe16 	blt	zero,r2,81128ee0 <__reset+0xfb108ee0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81128ee8:	0005883a 	mov	r2,zero
}
81128eec:	e037883a 	mov	sp,fp
81128ef0:	df000017 	ldw	fp,0(sp)
81128ef4:	dec00104 	addi	sp,sp,4
81128ef8:	f800283a 	ret

81128efc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128efc:	defffe04 	addi	sp,sp,-8
81128f00:	de00012e 	bgeu	sp,et,81128f08 <alt_get_errno+0xc>
81128f04:	003b68fa 	trap	3
81128f08:	dfc00115 	stw	ra,4(sp)
81128f0c:	df000015 	stw	fp,0(sp)
81128f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128f14:	d0a01017 	ldw	r2,-32704(gp)
81128f18:	10000326 	beq	r2,zero,81128f28 <alt_get_errno+0x2c>
81128f1c:	d0a01017 	ldw	r2,-32704(gp)
81128f20:	103ee83a 	callr	r2
81128f24:	00000106 	br	81128f2c <alt_get_errno+0x30>
81128f28:	d0a06204 	addi	r2,gp,-32376
}
81128f2c:	e037883a 	mov	sp,fp
81128f30:	dfc00117 	ldw	ra,4(sp)
81128f34:	df000017 	ldw	fp,0(sp)
81128f38:	dec00204 	addi	sp,sp,8
81128f3c:	f800283a 	ret

81128f40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81128f40:	defffb04 	addi	sp,sp,-20
81128f44:	de00012e 	bgeu	sp,et,81128f4c <close+0xc>
81128f48:	003b68fa 	trap	3
81128f4c:	dfc00415 	stw	ra,16(sp)
81128f50:	df000315 	stw	fp,12(sp)
81128f54:	df000304 	addi	fp,sp,12
81128f58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81128f5c:	e0bfff17 	ldw	r2,-4(fp)
81128f60:	10000616 	blt	r2,zero,81128f7c <close+0x3c>
81128f64:	e0bfff17 	ldw	r2,-4(fp)
81128f68:	10c00324 	muli	r3,r2,12
81128f6c:	00a04534 	movhi	r2,33044
81128f70:	108c5104 	addi	r2,r2,12612
81128f74:	1885883a 	add	r2,r3,r2
81128f78:	00000106 	br	81128f80 <close+0x40>
81128f7c:	0005883a 	mov	r2,zero
81128f80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81128f84:	e0bffd17 	ldw	r2,-12(fp)
81128f88:	10001926 	beq	r2,zero,81128ff0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81128f8c:	e0bffd17 	ldw	r2,-12(fp)
81128f90:	10800017 	ldw	r2,0(r2)
81128f94:	10800417 	ldw	r2,16(r2)
81128f98:	10000626 	beq	r2,zero,81128fb4 <close+0x74>
81128f9c:	e0bffd17 	ldw	r2,-12(fp)
81128fa0:	10800017 	ldw	r2,0(r2)
81128fa4:	10800417 	ldw	r2,16(r2)
81128fa8:	e13ffd17 	ldw	r4,-12(fp)
81128fac:	103ee83a 	callr	r2
81128fb0:	00000106 	br	81128fb8 <close+0x78>
81128fb4:	0005883a 	mov	r2,zero
81128fb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81128fbc:	e13fff17 	ldw	r4,-4(fp)
81128fc0:	112a5640 	call	8112a564 <alt_release_fd>
    if (rval < 0)
81128fc4:	e0bffe17 	ldw	r2,-8(fp)
81128fc8:	1000070e 	bge	r2,zero,81128fe8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81128fcc:	1128efc0 	call	81128efc <alt_get_errno>
81128fd0:	1007883a 	mov	r3,r2
81128fd4:	e0bffe17 	ldw	r2,-8(fp)
81128fd8:	0085c83a 	sub	r2,zero,r2
81128fdc:	18800015 	stw	r2,0(r3)
      return -1;
81128fe0:	00bfffc4 	movi	r2,-1
81128fe4:	00000706 	br	81129004 <close+0xc4>
    }
    return 0;
81128fe8:	0005883a 	mov	r2,zero
81128fec:	00000506 	br	81129004 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81128ff0:	1128efc0 	call	81128efc <alt_get_errno>
81128ff4:	1007883a 	mov	r3,r2
81128ff8:	00801444 	movi	r2,81
81128ffc:	18800015 	stw	r2,0(r3)
    return -1;
81129000:	00bfffc4 	movi	r2,-1
  }
}
81129004:	e037883a 	mov	sp,fp
81129008:	dfc00117 	ldw	ra,4(sp)
8112900c:	df000017 	ldw	fp,0(sp)
81129010:	dec00204 	addi	sp,sp,8
81129014:	f800283a 	ret

81129018 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81129018:	deffff04 	addi	sp,sp,-4
8112901c:	de00012e 	bgeu	sp,et,81129024 <alt_dcache_flush_all+0xc>
81129020:	003b68fa 	trap	3
81129024:	df000015 	stw	fp,0(sp)
81129028:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8112902c:	0001883a 	nop
81129030:	e037883a 	mov	sp,fp
81129034:	df000017 	ldw	fp,0(sp)
81129038:	dec00104 	addi	sp,sp,4
8112903c:	f800283a 	ret

81129040 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81129040:	defffc04 	addi	sp,sp,-16
81129044:	de00012e 	bgeu	sp,et,8112904c <alt_dev_null_write+0xc>
81129048:	003b68fa 	trap	3
8112904c:	df000315 	stw	fp,12(sp)
81129050:	df000304 	addi	fp,sp,12
81129054:	e13ffd15 	stw	r4,-12(fp)
81129058:	e17ffe15 	stw	r5,-8(fp)
8112905c:	e1bfff15 	stw	r6,-4(fp)
  return len;
81129060:	e0bfff17 	ldw	r2,-4(fp)
}
81129064:	e037883a 	mov	sp,fp
81129068:	df000017 	ldw	fp,0(sp)
8112906c:	dec00104 	addi	sp,sp,4
81129070:	f800283a 	ret

81129074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129074:	defffe04 	addi	sp,sp,-8
81129078:	de00012e 	bgeu	sp,et,81129080 <alt_get_errno+0xc>
8112907c:	003b68fa 	trap	3
81129080:	dfc00115 	stw	ra,4(sp)
81129084:	df000015 	stw	fp,0(sp)
81129088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112908c:	d0a01017 	ldw	r2,-32704(gp)
81129090:	10000326 	beq	r2,zero,811290a0 <alt_get_errno+0x2c>
81129094:	d0a01017 	ldw	r2,-32704(gp)
81129098:	103ee83a 	callr	r2
8112909c:	00000106 	br	811290a4 <alt_get_errno+0x30>
811290a0:	d0a06204 	addi	r2,gp,-32376
}
811290a4:	e037883a 	mov	sp,fp
811290a8:	dfc00117 	ldw	ra,4(sp)
811290ac:	df000017 	ldw	fp,0(sp)
811290b0:	dec00204 	addi	sp,sp,8
811290b4:	f800283a 	ret

811290b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
811290b8:	defffb04 	addi	sp,sp,-20
811290bc:	de00012e 	bgeu	sp,et,811290c4 <fstat+0xc>
811290c0:	003b68fa 	trap	3
811290c4:	dfc00415 	stw	ra,16(sp)
811290c8:	df000315 	stw	fp,12(sp)
811290cc:	df000304 	addi	fp,sp,12
811290d0:	e13ffe15 	stw	r4,-8(fp)
811290d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811290d8:	e0bffe17 	ldw	r2,-8(fp)
811290dc:	10000616 	blt	r2,zero,811290f8 <fstat+0x40>
811290e0:	e0bffe17 	ldw	r2,-8(fp)
811290e4:	10c00324 	muli	r3,r2,12
811290e8:	00a04534 	movhi	r2,33044
811290ec:	108c5104 	addi	r2,r2,12612
811290f0:	1885883a 	add	r2,r3,r2
811290f4:	00000106 	br	811290fc <fstat+0x44>
811290f8:	0005883a 	mov	r2,zero
811290fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81129100:	e0bffd17 	ldw	r2,-12(fp)
81129104:	10001026 	beq	r2,zero,81129148 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81129108:	e0bffd17 	ldw	r2,-12(fp)
8112910c:	10800017 	ldw	r2,0(r2)
81129110:	10800817 	ldw	r2,32(r2)
81129114:	10000726 	beq	r2,zero,81129134 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81129118:	e0bffd17 	ldw	r2,-12(fp)
8112911c:	10800017 	ldw	r2,0(r2)
81129120:	10800817 	ldw	r2,32(r2)
81129124:	e17fff17 	ldw	r5,-4(fp)
81129128:	e13ffd17 	ldw	r4,-12(fp)
8112912c:	103ee83a 	callr	r2
81129130:	00000a06 	br	8112915c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81129134:	e0bfff17 	ldw	r2,-4(fp)
81129138:	00c80004 	movi	r3,8192
8112913c:	10c00115 	stw	r3,4(r2)
      return 0;
81129140:	0005883a 	mov	r2,zero
81129144:	00000506 	br	8112915c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81129148:	11290740 	call	81129074 <alt_get_errno>
8112914c:	1007883a 	mov	r3,r2
81129150:	00801444 	movi	r2,81
81129154:	18800015 	stw	r2,0(r3)
    return -1;
81129158:	00bfffc4 	movi	r2,-1
  }
}
8112915c:	e037883a 	mov	sp,fp
81129160:	dfc00117 	ldw	ra,4(sp)
81129164:	df000017 	ldw	fp,0(sp)
81129168:	dec00204 	addi	sp,sp,8
8112916c:	f800283a 	ret

81129170 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
81129170:	defff004 	addi	sp,sp,-64
81129174:	de00012e 	bgeu	sp,et,8112917c <alt_irq_register+0xc>
81129178:	003b68fa 	trap	3
8112917c:	df000f15 	stw	fp,60(sp)
81129180:	df000f04 	addi	fp,sp,60
81129184:	e13ffd15 	stw	r4,-12(fp)
81129188:	e17ffe15 	stw	r5,-8(fp)
8112918c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81129190:	00bffa84 	movi	r2,-22
81129194:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81129198:	e0bffd17 	ldw	r2,-12(fp)
8112919c:	10800828 	cmpgeui	r2,r2,32
811291a0:	1000501e 	bne	r2,zero,811292e4 <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811291a4:	0005303a 	rdctl	r2,status
811291a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811291ac:	e0fff617 	ldw	r3,-40(fp)
811291b0:	00bfff84 	movi	r2,-2
811291b4:	1884703a 	and	r2,r3,r2
811291b8:	1001703a 	wrctl	status,r2
  
  return context;
811291bc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
811291c0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
811291c4:	00a04574 	movhi	r2,33045
811291c8:	109def04 	addi	r2,r2,30652
811291cc:	e0fffd17 	ldw	r3,-12(fp)
811291d0:	180690fa 	slli	r3,r3,3
811291d4:	10c5883a 	add	r2,r2,r3
811291d8:	e0ffff17 	ldw	r3,-4(fp)
811291dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
811291e0:	00a04574 	movhi	r2,33045
811291e4:	109def04 	addi	r2,r2,30652
811291e8:	e0fffd17 	ldw	r3,-12(fp)
811291ec:	180690fa 	slli	r3,r3,3
811291f0:	10c5883a 	add	r2,r2,r3
811291f4:	10800104 	addi	r2,r2,4
811291f8:	e0fffe17 	ldw	r3,-8(fp)
811291fc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81129200:	e0bfff17 	ldw	r2,-4(fp)
81129204:	10001926 	beq	r2,zero,8112926c <alt_irq_register+0xfc>
81129208:	e0bffd17 	ldw	r2,-12(fp)
8112920c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129210:	0005303a 	rdctl	r2,status
81129214:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129218:	e0fff717 	ldw	r3,-36(fp)
8112921c:	00bfff84 	movi	r2,-2
81129220:	1884703a 	and	r2,r3,r2
81129224:	1001703a 	wrctl	status,r2
  
  return context;
81129228:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8112922c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
81129230:	00c00044 	movi	r3,1
81129234:	e0bff217 	ldw	r2,-56(fp)
81129238:	1884983a 	sll	r2,r3,r2
8112923c:	1007883a 	mov	r3,r2
81129240:	d0a06a17 	ldw	r2,-32344(gp)
81129244:	1884b03a 	or	r2,r3,r2
81129248:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112924c:	d0a06a17 	ldw	r2,-32344(gp)
81129250:	100170fa 	wrctl	ienable,r2
81129254:	e0bff817 	ldw	r2,-32(fp)
81129258:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112925c:	e0bff917 	ldw	r2,-28(fp)
81129260:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81129264:	0005883a 	mov	r2,zero
81129268:	00001906 	br	811292d0 <alt_irq_register+0x160>
8112926c:	e0bffd17 	ldw	r2,-12(fp)
81129270:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129274:	0005303a 	rdctl	r2,status
81129278:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112927c:	e0fffa17 	ldw	r3,-24(fp)
81129280:	00bfff84 	movi	r2,-2
81129284:	1884703a 	and	r2,r3,r2
81129288:	1001703a 	wrctl	status,r2
  
  return context;
8112928c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81129290:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
81129294:	00c00044 	movi	r3,1
81129298:	e0bff417 	ldw	r2,-48(fp)
8112929c:	1884983a 	sll	r2,r3,r2
811292a0:	0084303a 	nor	r2,zero,r2
811292a4:	1007883a 	mov	r3,r2
811292a8:	d0a06a17 	ldw	r2,-32344(gp)
811292ac:	1884703a 	and	r2,r3,r2
811292b0:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811292b4:	d0a06a17 	ldw	r2,-32344(gp)
811292b8:	100170fa 	wrctl	ienable,r2
811292bc:	e0bffb17 	ldw	r2,-20(fp)
811292c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811292c4:	e0bffc17 	ldw	r2,-16(fp)
811292c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811292cc:	0005883a 	mov	r2,zero
811292d0:	e0bff115 	stw	r2,-60(fp)
811292d4:	e0bff317 	ldw	r2,-52(fp)
811292d8:	e0bff515 	stw	r2,-44(fp)
811292dc:	e0bff517 	ldw	r2,-44(fp)
811292e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
811292e4:	e0bff117 	ldw	r2,-60(fp)
}
811292e8:	e037883a 	mov	sp,fp
811292ec:	df000017 	ldw	fp,0(sp)
811292f0:	dec00104 	addi	sp,sp,4
811292f4:	f800283a 	ret

811292f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811292f8:	defffe04 	addi	sp,sp,-8
811292fc:	de00012e 	bgeu	sp,et,81129304 <alt_get_errno+0xc>
81129300:	003b68fa 	trap	3
81129304:	dfc00115 	stw	ra,4(sp)
81129308:	df000015 	stw	fp,0(sp)
8112930c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129310:	d0a01017 	ldw	r2,-32704(gp)
81129314:	10000326 	beq	r2,zero,81129324 <alt_get_errno+0x2c>
81129318:	d0a01017 	ldw	r2,-32704(gp)
8112931c:	103ee83a 	callr	r2
81129320:	00000106 	br	81129328 <alt_get_errno+0x30>
81129324:	d0a06204 	addi	r2,gp,-32376
}
81129328:	e037883a 	mov	sp,fp
8112932c:	dfc00117 	ldw	ra,4(sp)
81129330:	df000017 	ldw	fp,0(sp)
81129334:	dec00204 	addi	sp,sp,8
81129338:	f800283a 	ret

8112933c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8112933c:	deffed04 	addi	sp,sp,-76
81129340:	de00012e 	bgeu	sp,et,81129348 <isatty+0xc>
81129344:	003b68fa 	trap	3
81129348:	dfc01215 	stw	ra,72(sp)
8112934c:	df001115 	stw	fp,68(sp)
81129350:	df001104 	addi	fp,sp,68
81129354:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81129358:	e0bfff17 	ldw	r2,-4(fp)
8112935c:	10000616 	blt	r2,zero,81129378 <isatty+0x3c>
81129360:	e0bfff17 	ldw	r2,-4(fp)
81129364:	10c00324 	muli	r3,r2,12
81129368:	00a04534 	movhi	r2,33044
8112936c:	108c5104 	addi	r2,r2,12612
81129370:	1885883a 	add	r2,r3,r2
81129374:	00000106 	br	8112937c <isatty+0x40>
81129378:	0005883a 	mov	r2,zero
8112937c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81129380:	e0bfef17 	ldw	r2,-68(fp)
81129384:	10000e26 	beq	r2,zero,811293c0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81129388:	e0bfef17 	ldw	r2,-68(fp)
8112938c:	10800017 	ldw	r2,0(r2)
81129390:	10800817 	ldw	r2,32(r2)
81129394:	1000021e 	bne	r2,zero,811293a0 <isatty+0x64>
    {
      return 1;
81129398:	00800044 	movi	r2,1
8112939c:	00000d06 	br	811293d4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
811293a0:	e0bff004 	addi	r2,fp,-64
811293a4:	100b883a 	mov	r5,r2
811293a8:	e13fff17 	ldw	r4,-4(fp)
811293ac:	11290b80 	call	811290b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
811293b0:	e0bff117 	ldw	r2,-60(fp)
811293b4:	10880020 	cmpeqi	r2,r2,8192
811293b8:	10803fcc 	andi	r2,r2,255
811293bc:	00000506 	br	811293d4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811293c0:	11292f80 	call	811292f8 <alt_get_errno>
811293c4:	1007883a 	mov	r3,r2
811293c8:	00801444 	movi	r2,81
811293cc:	18800015 	stw	r2,0(r3)
    return 0;
811293d0:	0005883a 	mov	r2,zero
  }
}
811293d4:	e037883a 	mov	sp,fp
811293d8:	dfc00117 	ldw	ra,4(sp)
811293dc:	df000017 	ldw	fp,0(sp)
811293e0:	dec00204 	addi	sp,sp,8
811293e4:	f800283a 	ret

811293e8 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
811293e8:	01a04834 	movhi	r6,33056
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
811293ec:	318c2404 	addi	r6,r6,12432

811293f0 <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
811293f0:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
811293f4:	01c00826 	beq	zero,r7,81129418 <end_tx>

811293f8 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
811293f8:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
811293fc:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
81129400:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
81129404:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
81129408:	283ffb26 	beq	r5,zero,811293f8 <__reset+0xfb1093f8>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
8112940c:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
81129410:	21000044 	addi	r4,r4,1
	br tx_next_char
81129414:	003ff606 	br	811293f0 <__reset+0xfb1093f0>

81129418 <end_tx>:
end_tx:	
        ret
81129418:	f800283a 	ret

8112941c <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
8112941c:	defffd04 	addi	sp,sp,-12
81129420:	de00012e 	bgeu	sp,et,81129428 <alt_log_txchar+0xc>
81129424:	003b68fa 	trap	3
81129428:	df000215 	stw	fp,8(sp)
8112942c:	df000204 	addi	fp,sp,8
81129430:	e13ffe15 	stw	r4,-8(fp)
81129434:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
81129438:	0001883a 	nop
8112943c:	e0bfff17 	ldw	r2,-4(fp)
81129440:	10800104 	addi	r2,r2,4
81129444:	10800037 	ldwio	r2,0(r2)
81129448:	10bfffec 	andhi	r2,r2,65535
8112944c:	103ffb26 	beq	r2,zero,8112943c <__reset+0xfb10943c>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
81129450:	e0bfff17 	ldw	r2,-4(fp)
81129454:	e0fffe17 	ldw	r3,-8(fp)
81129458:	10c00035 	stwio	r3,0(r2)
}
8112945c:	0001883a 	nop
81129460:	e037883a 	mov	sp,fp
81129464:	df000017 	ldw	fp,0(sp)
81129468:	dec00104 	addi	sp,sp,4
8112946c:	f800283a 	ret

81129470 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
81129470:	defffb04 	addi	sp,sp,-20
81129474:	de00012e 	bgeu	sp,et,8112947c <alt_log_repchar+0xc>
81129478:	003b68fa 	trap	3
8112947c:	dfc00415 	stw	ra,16(sp)
81129480:	df000315 	stw	fp,12(sp)
81129484:	df000304 	addi	fp,sp,12
81129488:	2005883a 	mov	r2,r4
8112948c:	e17ffe15 	stw	r5,-8(fp)
81129490:	e1bfff15 	stw	r6,-4(fp)
81129494:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
81129498:	00000506 	br	811294b0 <alt_log_repchar+0x40>
    alt_log_txchar(c,(char*) base);
8112949c:	e0bffd07 	ldb	r2,-12(fp)
811294a0:	e0ffff17 	ldw	r3,-4(fp)
811294a4:	180b883a 	mov	r5,r3
811294a8:	1009883a 	mov	r4,r2
811294ac:	112941c0 	call	8112941c <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
811294b0:	e0bffe17 	ldw	r2,-8(fp)
811294b4:	10ffffc4 	addi	r3,r2,-1
811294b8:	e0fffe15 	stw	r3,-8(fp)
811294bc:	00bff716 	blt	zero,r2,8112949c <__reset+0xfb10949c>
    alt_log_txchar(c,(char*) base);
}
811294c0:	0001883a 	nop
811294c4:	e037883a 	mov	sp,fp
811294c8:	dfc00117 	ldw	ra,4(sp)
811294cc:	df000017 	ldw	fp,0(sp)
811294d0:	dec00204 	addi	sp,sp,8
811294d4:	f800283a 	ret

811294d8 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
811294d8:	deffe904 	addi	sp,sp,-92
811294dc:	de00012e 	bgeu	sp,et,811294e4 <alt_log_private_printf+0xc>
811294e0:	003b68fa 	trap	3
811294e4:	dfc01615 	stw	ra,88(sp)
811294e8:	df001515 	stw	fp,84(sp)
811294ec:	dc001415 	stw	r16,80(sp)
811294f0:	df001504 	addi	fp,sp,84
811294f4:	e13ffc15 	stw	r4,-16(fp)
811294f8:	e17ffd15 	stw	r5,-12(fp)
811294fc:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
81129500:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
81129504:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
81129508:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
8112950c:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
81129510:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
81129514:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
81129518:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
8112951c:	e0bffc17 	ldw	r2,-16(fp)
81129520:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
81129524:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
81129528:	00014b06 	br	81129a58 <alt_log_private_printf+0x580>
    {
    switch(state)
8112952c:	e0bfec17 	ldw	r2,-80(fp)
81129530:	10c00060 	cmpeqi	r3,r2,1
81129534:	18001b1e 	bne	r3,zero,811295a4 <alt_log_private_printf+0xcc>
81129538:	10c000a0 	cmpeqi	r3,r2,2
8112953c:	18002d1e 	bne	r3,zero,811295f4 <alt_log_private_printf+0x11c>
81129540:	10000126 	beq	r2,zero,81129548 <alt_log_private_printf+0x70>
81129544:	00014406 	br	81129a58 <alt_log_private_printf+0x580>
      {
      case pfState_chars:
        if(c == '%')
81129548:	e0bffb07 	ldb	r2,-20(fp)
8112954c:	10800958 	cmpnei	r2,r2,37
81129550:	10000e1e 	bne	r2,zero,8112958c <alt_log_private_printf+0xb4>
        {
          fmtLeadingZero = 0;
81129554:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
81129558:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
8112955c:	00800284 	movi	r2,10
81129560:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
81129564:	00800044 	movi	r2,1
81129568:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
8112956c:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
81129570:	00bfffc4 	movi	r2,-1
81129574:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
81129578:	00bfffc4 	movi	r2,-1
8112957c:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
81129580:	00800044 	movi	r2,1
81129584:	e0bfec15 	stw	r2,-80(fp)
81129588:	00013306 	br	81129a58 <alt_log_private_printf+0x580>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
8112958c:	e0bffb07 	ldb	r2,-20(fp)
81129590:	e0fffd17 	ldw	r3,-12(fp)
81129594:	180b883a 	mov	r5,r3
81129598:	1009883a 	mov	r4,r2
8112959c:	112941c0 	call	8112941c <alt_log_txchar>
        }
        break;
811295a0:	00012d06 	br	81129a58 <alt_log_private_printf+0x580>

      case pfState_firstFmtChar:
        if(c == '0')
811295a4:	e0bffb07 	ldb	r2,-20(fp)
811295a8:	10800c18 	cmpnei	r2,r2,48
811295ac:	1000051e 	bne	r2,zero,811295c4 <alt_log_private_printf+0xec>
        {
          fmtLeadingZero = 1;
811295b0:	00800044 	movi	r2,1
811295b4:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
811295b8:	00800084 	movi	r2,2
811295bc:	e0bfec15 	stw	r2,-80(fp)
811295c0:	00012506 	br	81129a58 <alt_log_private_printf+0x580>
        }
        else if(c == '%')
811295c4:	e0bffb07 	ldb	r2,-20(fp)
811295c8:	10800958 	cmpnei	r2,r2,37
811295cc:	1000071e 	bne	r2,zero,811295ec <alt_log_private_printf+0x114>
        {
          alt_log_txchar(c,(char*)base);
811295d0:	e0bffb07 	ldb	r2,-20(fp)
811295d4:	e0fffd17 	ldw	r3,-12(fp)
811295d8:	180b883a 	mov	r5,r3
811295dc:	1009883a 	mov	r4,r2
811295e0:	112941c0 	call	8112941c <alt_log_txchar>
          state = pfState_chars;
811295e4:	e03fec15 	stw	zero,-80(fp)
811295e8:	00011b06 	br	81129a58 <alt_log_private_printf+0x580>
        }
        else
        {
          state = pfState_otherFmtChar;
811295ec:	00800084 	movi	r2,2
811295f0:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
811295f4:	e0bffb07 	ldb	r2,-20(fp)
811295f8:	10800b98 	cmpnei	r2,r2,46
811295fc:	1000021e 	bne	r2,zero,81129608 <alt_log_private_printf+0x130>
        {
          fmtAfterDecimal = 0;
81129600:	e03ff015 	stw	zero,-64(fp)
81129604:	00011306 	br	81129a54 <alt_log_private_printf+0x57c>
        }
        else if('0' <= c && c <= '9')
81129608:	e0bffb07 	ldb	r2,-20(fp)
8112960c:	10800c10 	cmplti	r2,r2,48
81129610:	10001a1e 	bne	r2,zero,8112967c <alt_log_private_printf+0x1a4>
81129614:	e0bffb07 	ldb	r2,-20(fp)
81129618:	10800e88 	cmpgei	r2,r2,58
8112961c:	1000171e 	bne	r2,zero,8112967c <alt_log_private_printf+0x1a4>
        {
          c -= '0';
81129620:	e0bffb03 	ldbu	r2,-20(fp)
81129624:	10bff404 	addi	r2,r2,-48
81129628:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
8112962c:	e0bff017 	ldw	r2,-64(fp)
81129630:	10000c0e 	bge	r2,zero,81129664 <alt_log_private_printf+0x18c>
          {
            if(fmtBeforeDecimal < 0)
81129634:	e0bfef17 	ldw	r2,-68(fp)
81129638:	1000020e 	bge	r2,zero,81129644 <alt_log_private_printf+0x16c>
            {
              fmtBeforeDecimal = 0;
8112963c:	e03fef15 	stw	zero,-68(fp)
81129640:	00000306 	br	81129650 <alt_log_private_printf+0x178>
            }
            else
            {
              fmtBeforeDecimal *= 10;
81129644:	e0bfef17 	ldw	r2,-68(fp)
81129648:	108002a4 	muli	r2,r2,10
8112964c:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
81129650:	e0bffb07 	ldb	r2,-20(fp)
81129654:	e0ffef17 	ldw	r3,-68(fp)
81129658:	1885883a 	add	r2,r3,r2
8112965c:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81129660:	0000fc06 	br	81129a54 <alt_log_private_printf+0x57c>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
81129664:	e0bff017 	ldw	r2,-64(fp)
81129668:	10c002a4 	muli	r3,r2,10
8112966c:	e0bffb07 	ldb	r2,-20(fp)
81129670:	1885883a 	add	r2,r3,r2
81129674:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81129678:	0000f606 	br	81129a54 <alt_log_private_printf+0x57c>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
8112967c:	e0bffb07 	ldb	r2,-20(fp)
81129680:	10801b18 	cmpnei	r2,r2,108
81129684:	1000031e 	bne	r2,zero,81129694 <alt_log_private_printf+0x1bc>
        {
          fmtLong = 1;
81129688:	00800044 	movi	r2,1
8112968c:	e0bfee15 	stw	r2,-72(fp)
81129690:	0000f006 	br	81129a54 <alt_log_private_printf+0x57c>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
81129694:	e0bffb07 	ldb	r2,-20(fp)
81129698:	10bfea04 	addi	r2,r2,-88
8112969c:	10c00868 	cmpgeui	r3,r2,33
811296a0:	1800eb1e 	bne	r3,zero,81129a50 <alt_log_private_printf+0x578>
811296a4:	100690ba 	slli	r3,r2,2
811296a8:	00a044f4 	movhi	r2,33043
811296ac:	10a5af04 	addi	r2,r2,-26948
811296b0:	1885883a 	add	r2,r3,r2
811296b4:	10800017 	ldw	r2,0(r2)
811296b8:	1000683a 	jmp	r2
811296bc:	8112997c 	xorhi	r4,r16,19045
811296c0:	81129a50 	cmplti	r4,r16,19049
811296c4:	81129a50 	cmplti	r4,r16,19049
811296c8:	81129a50 	cmplti	r4,r16,19049
811296cc:	81129a50 	cmplti	r4,r16,19049
811296d0:	81129a50 	cmplti	r4,r16,19049
811296d4:	81129a50 	cmplti	r4,r16,19049
811296d8:	81129a50 	cmplti	r4,r16,19049
811296dc:	81129a50 	cmplti	r4,r16,19049
811296e0:	81129a50 	cmplti	r4,r16,19049
811296e4:	81129a50 	cmplti	r4,r16,19049
811296e8:	81129994 	ori	r4,r16,19046
811296ec:	81129740 	call	88112974 <__reset+0x20f2974>
811296f0:	81129a50 	cmplti	r4,r16,19049
811296f4:	81129a50 	cmplti	r4,r16,19049
811296f8:	81129a50 	cmplti	r4,r16,19049
811296fc:	81129a50 	cmplti	r4,r16,19049
81129700:	81129740 	call	88112974 <__reset+0x20f2974>
81129704:	81129a50 	cmplti	r4,r16,19049
81129708:	81129a50 	cmplti	r4,r16,19049
8112970c:	81129a50 	cmplti	r4,r16,19049
81129710:	81129a50 	cmplti	r4,r16,19049
81129714:	81129a50 	cmplti	r4,r16,19049
81129718:	8112995c 	xori	r4,r16,19045
8112971c:	81129a50 	cmplti	r4,r16,19049
81129720:	81129a50 	cmplti	r4,r16,19049
81129724:	81129a50 	cmplti	r4,r16,19049
81129728:	811299d0 	cmplti	r4,r16,19047
8112972c:	81129a50 	cmplti	r4,r16,19049
81129730:	81129954 	ori	r4,r16,19045
81129734:	81129a50 	cmplti	r4,r16,19049
81129738:	81129a50 	cmplti	r4,r16,19049
8112973c:	8112996c 	andhi	r4,r16,19045
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
81129740:	e0bfee17 	ldw	r2,-72(fp)
81129744:	10000e26 	beq	r2,zero,81129780 <alt_log_private_printf+0x2a8>
                {
                  if (fmtSigned)
81129748:	e0bff217 	ldw	r2,-56(fp)
8112974c:	10000626 	beq	r2,zero,81129768 <alt_log_private_printf+0x290>
                  {
                    v = va_arg(args,long);
81129750:	e0bffe17 	ldw	r2,-8(fp)
81129754:	10c00104 	addi	r3,r2,4
81129758:	e0fffe15 	stw	r3,-8(fp)
8112975c:	10800017 	ldw	r2,0(r2)
81129760:	e0bff415 	stw	r2,-48(fp)
81129764:	00001306 	br	811297b4 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
81129768:	e0bffe17 	ldw	r2,-8(fp)
8112976c:	10c00104 	addi	r3,r2,4
81129770:	e0fffe15 	stw	r3,-8(fp)
81129774:	10800017 	ldw	r2,0(r2)
81129778:	e0bff415 	stw	r2,-48(fp)
8112977c:	00000d06 	br	811297b4 <alt_log_private_printf+0x2dc>
                  }
                }
                else
                {
                  if (fmtSigned)
81129780:	e0bff217 	ldw	r2,-56(fp)
81129784:	10000626 	beq	r2,zero,811297a0 <alt_log_private_printf+0x2c8>
                  {
                    v = va_arg(args,int);
81129788:	e0bffe17 	ldw	r2,-8(fp)
8112978c:	10c00104 	addi	r3,r2,4
81129790:	e0fffe15 	stw	r3,-8(fp)
81129794:	10800017 	ldw	r2,0(r2)
81129798:	e0bff415 	stw	r2,-48(fp)
8112979c:	00000506 	br	811297b4 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
811297a0:	e0bffe17 	ldw	r2,-8(fp)
811297a4:	10c00104 	addi	r3,r2,4
811297a8:	e0fffe15 	stw	r3,-8(fp)
811297ac:	10800017 	ldw	r2,0(r2)
811297b0:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
811297b4:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
811297b8:	e0bff217 	ldw	r2,-56(fp)
811297bc:	10000726 	beq	r2,zero,811297dc <alt_log_private_printf+0x304>
811297c0:	e0bff417 	ldw	r2,-48(fp)
811297c4:	1000050e 	bge	r2,zero,811297dc <alt_log_private_printf+0x304>
                  {
                  v = ~v + 1;
811297c8:	e0bff417 	ldw	r2,-48(fp)
811297cc:	0085c83a 	sub	r2,zero,r2
811297d0:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
811297d4:	00800044 	movi	r2,1
811297d8:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
811297dc:	e0bff417 	ldw	r2,-48(fp)
811297e0:	e0bff615 	stw	r2,-40(fp)
                p = 1;
811297e4:	00800044 	movi	r2,1
811297e8:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
811297ec:	00800044 	movi	r2,1
811297f0:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
811297f4:	00000706 	br	81129814 <alt_log_private_printf+0x33c>
                  {
                  digitCount++;
811297f8:	e0bff817 	ldw	r2,-32(fp)
811297fc:	10800044 	addi	r2,r2,1
81129800:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
81129804:	e0bff117 	ldw	r2,-60(fp)
81129808:	e0fff517 	ldw	r3,-44(fp)
8112980c:	1885383a 	mul	r2,r3,r2
81129810:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
81129814:	e0bff117 	ldw	r2,-60(fp)
81129818:	e0fff617 	ldw	r3,-40(fp)
8112981c:	1885203a 	divu	r2,r3,r2
81129820:	e0bff615 	stw	r2,-40(fp)
81129824:	e0bff617 	ldw	r2,-40(fp)
81129828:	103ff31e 	bne	r2,zero,811297f8 <__reset+0xfb1097f8>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
8112982c:	e0ffef17 	ldw	r3,-68(fp)
81129830:	e0bff817 	ldw	r2,-32(fp)
81129834:	1885c83a 	sub	r2,r3,r2
81129838:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
8112983c:	e0bfed17 	ldw	r2,-76(fp)
81129840:	10000e26 	beq	r2,zero,8112987c <alt_log_private_printf+0x3a4>
                  {
                  if(sign)
81129844:	e0bff717 	ldw	r2,-36(fp)
81129848:	10000726 	beq	r2,zero,81129868 <alt_log_private_printf+0x390>
                    {
                    alt_log_txchar('-',(char*)base);
8112984c:	e0bffd17 	ldw	r2,-12(fp)
81129850:	100b883a 	mov	r5,r2
81129854:	01000b44 	movi	r4,45
81129858:	112941c0 	call	8112941c <alt_log_txchar>
                    fmtBeforeDecimal--;
8112985c:	e0bfef17 	ldw	r2,-68(fp)
81129860:	10bfffc4 	addi	r2,r2,-1
81129864:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
81129868:	e1bffd17 	ldw	r6,-12(fp)
8112986c:	e17fef17 	ldw	r5,-68(fp)
81129870:	01000c04 	movi	r4,48
81129874:	11294700 	call	81129470 <alt_log_repchar>
81129878:	00003206 	br	81129944 <alt_log_private_printf+0x46c>
                  }
                else
                  {
                    if(sign)
8112987c:	e0bff717 	ldw	r2,-36(fp)
81129880:	10000326 	beq	r2,zero,81129890 <alt_log_private_printf+0x3b8>
                    {
                      fmtBeforeDecimal--;
81129884:	e0bfef17 	ldw	r2,-68(fp)
81129888:	10bfffc4 	addi	r2,r2,-1
8112988c:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
81129890:	e1bffd17 	ldw	r6,-12(fp)
81129894:	e17fef17 	ldw	r5,-68(fp)
81129898:	01000804 	movi	r4,32
8112989c:	11294700 	call	81129470 <alt_log_repchar>
                    if(sign)
811298a0:	e0bff717 	ldw	r2,-36(fp)
811298a4:	10002726 	beq	r2,zero,81129944 <alt_log_private_printf+0x46c>
                    {
                      alt_log_txchar('-',(char*)base);
811298a8:	e0bffd17 	ldw	r2,-12(fp)
811298ac:	100b883a 	mov	r5,r2
811298b0:	01000b44 	movi	r4,45
811298b4:	112941c0 	call	8112941c <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
811298b8:	00002206 	br	81129944 <alt_log_private_printf+0x46c>
                  {
                  unsigned char d;

                  d = v / p;
811298bc:	e0fff417 	ldw	r3,-48(fp)
811298c0:	e0bff517 	ldw	r2,-44(fp)
811298c4:	1885203a 	divu	r2,r3,r2
811298c8:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
811298cc:	e0bff903 	ldbu	r2,-28(fp)
811298d0:	10800c04 	addi	r2,r2,48
811298d4:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
811298d8:	e0bff903 	ldbu	r2,-28(fp)
811298dc:	10800eb0 	cmpltui	r2,r2,58
811298e0:	1000081e 	bne	r2,zero,81129904 <alt_log_private_printf+0x42c>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
811298e4:	e0bff317 	ldw	r2,-52(fp)
811298e8:	10000226 	beq	r2,zero,811298f4 <alt_log_private_printf+0x41c>
811298ec:	008001c4 	movi	r2,7
811298f0:	00000106 	br	811298f8 <alt_log_private_printf+0x420>
811298f4:	008009c4 	movi	r2,39
811298f8:	e0fff903 	ldbu	r3,-28(fp)
811298fc:	10c5883a 	add	r2,r2,r3
81129900:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
81129904:	e0bff903 	ldbu	r2,-28(fp)
81129908:	e0fffd17 	ldw	r3,-12(fp)
8112990c:	180b883a 	mov	r5,r3
81129910:	1009883a 	mov	r4,r2
81129914:	112941c0 	call	8112941c <alt_log_txchar>

                  v = v % p;
81129918:	e0bff417 	ldw	r2,-48(fp)
8112991c:	e0fff517 	ldw	r3,-44(fp)
81129920:	10c9203a 	divu	r4,r2,r3
81129924:	e0fff517 	ldw	r3,-44(fp)
81129928:	20c7383a 	mul	r3,r4,r3
8112992c:	10c5c83a 	sub	r2,r2,r3
81129930:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
81129934:	e0bff117 	ldw	r2,-60(fp)
81129938:	e0fff517 	ldw	r3,-44(fp)
8112993c:	1885203a 	divu	r2,r3,r2
81129940:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
81129944:	e0bff517 	ldw	r2,-44(fp)
81129948:	103fdc1e 	bne	r2,zero,811298bc <__reset+0xfb1098bc>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
8112994c:	e03fec15 	stw	zero,-80(fp)
              break;
81129950:	00003f06 	br	81129a50 <alt_log_private_printf+0x578>

            case 'u':
              fmtSigned = 0;
81129954:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
81129958:	003f7906 	br	81129740 <__reset+0xfb109740>
            case 'o':
              fmtSigned = 0;
8112995c:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
81129960:	00800204 	movi	r2,8
81129964:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81129968:	003f7506 	br	81129740 <__reset+0xfb109740>
            case 'x':
              fmtSigned = 0;
8112996c:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
81129970:	00800404 	movi	r2,16
81129974:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81129978:	003f7106 	br	81129740 <__reset+0xfb109740>
            case 'X':
              fmtSigned = 0;
8112997c:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
81129980:	00800404 	movi	r2,16
81129984:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
81129988:	00800044 	movi	r2,1
8112998c:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
81129990:	003f6b06 	br	81129740 <__reset+0xfb109740>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
81129994:	e0bfef17 	ldw	r2,-68(fp)
81129998:	10bfffc4 	addi	r2,r2,-1
8112999c:	e1bffd17 	ldw	r6,-12(fp)
811299a0:	100b883a 	mov	r5,r2
811299a4:	01000804 	movi	r4,32
811299a8:	11294700 	call	81129470 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
811299ac:	e0bffe17 	ldw	r2,-8(fp)
811299b0:	10c00104 	addi	r3,r2,4
811299b4:	e0fffe15 	stw	r3,-8(fp)
811299b8:	10800017 	ldw	r2,0(r2)
811299bc:	e0fffd17 	ldw	r3,-12(fp)
811299c0:	180b883a 	mov	r5,r3
811299c4:	1009883a 	mov	r4,r2
811299c8:	112941c0 	call	8112941c <alt_log_txchar>
              break;
811299cc:	00002006 	br	81129a50 <alt_log_private_printf+0x578>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
811299d0:	e0bffe17 	ldw	r2,-8(fp)
811299d4:	10c00104 	addi	r3,r2,4
811299d8:	e0fffe15 	stw	r3,-8(fp)
811299dc:	10800017 	ldw	r2,0(r2)
811299e0:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
811299e4:	e43fef17 	ldw	r16,-68(fp)
811299e8:	e13ffa17 	ldw	r4,-24(fp)
811299ec:	111510c0 	call	8111510c <strlen>
811299f0:	8085c83a 	sub	r2,r16,r2
811299f4:	e1bffd17 	ldw	r6,-12(fp)
811299f8:	100b883a 	mov	r5,r2
811299fc:	01000804 	movi	r4,32
81129a00:	11294700 	call	81129470 <alt_log_repchar>

                while(*s)
81129a04:	00000b06 	br	81129a34 <alt_log_private_printf+0x55c>
                  alt_log_txchar(*s++,(char*)base);
81129a08:	e0bffa17 	ldw	r2,-24(fp)
81129a0c:	10c00044 	addi	r3,r2,1
81129a10:	e0fffa15 	stw	r3,-24(fp)
81129a14:	10800003 	ldbu	r2,0(r2)
81129a18:	10803fcc 	andi	r2,r2,255
81129a1c:	1080201c 	xori	r2,r2,128
81129a20:	10bfe004 	addi	r2,r2,-128
81129a24:	e0fffd17 	ldw	r3,-12(fp)
81129a28:	180b883a 	mov	r5,r3
81129a2c:	1009883a 	mov	r4,r2
81129a30:	112941c0 	call	8112941c <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
81129a34:	e0bffa17 	ldw	r2,-24(fp)
81129a38:	10800003 	ldbu	r2,0(r2)
81129a3c:	10803fcc 	andi	r2,r2,255
81129a40:	1080201c 	xori	r2,r2,128
81129a44:	10bfe004 	addi	r2,r2,-128
81129a48:	103fef1e 	bne	r2,zero,81129a08 <__reset+0xfb109a08>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
81129a4c:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
81129a50:	e03fec15 	stw	zero,-80(fp)
          }
        break;
81129a54:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
81129a58:	e0bfeb17 	ldw	r2,-84(fp)
81129a5c:	10c00044 	addi	r3,r2,1
81129a60:	e0ffeb15 	stw	r3,-84(fp)
81129a64:	10800003 	ldbu	r2,0(r2)
81129a68:	e0bffb05 	stb	r2,-20(fp)
81129a6c:	e0bffb07 	ldb	r2,-20(fp)
81129a70:	103eae1e 	bne	r2,zero,8112952c <__reset+0xfb10952c>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
81129a74:	0001883a 	nop
81129a78:	e6ffff04 	addi	sp,fp,-4
81129a7c:	dfc00217 	ldw	ra,8(sp)
81129a80:	df000117 	ldw	fp,4(sp)
81129a84:	dc000017 	ldw	r16,0(sp)
81129a88:	dec00304 	addi	sp,sp,12
81129a8c:	f800283a 	ret

81129a90 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
81129a90:	defff904 	addi	sp,sp,-28
81129a94:	de00012e 	bgeu	sp,et,81129a9c <alt_log_printf_proc+0xc>
81129a98:	003b68fa 	trap	3
81129a9c:	dfc00315 	stw	ra,12(sp)
81129aa0:	df000215 	stw	fp,8(sp)
81129aa4:	df000204 	addi	fp,sp,8
81129aa8:	e13fff15 	stw	r4,-4(fp)
81129aac:	e1400215 	stw	r5,8(fp)
81129ab0:	e1800315 	stw	r6,12(fp)
81129ab4:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
81129ab8:	e0800204 	addi	r2,fp,8
81129abc:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
81129ac0:	e0bffe17 	ldw	r2,-8(fp)
81129ac4:	100d883a 	mov	r6,r2
81129ac8:	01604834 	movhi	r5,33056
81129acc:	294c2404 	addi	r5,r5,12432
81129ad0:	e13fff17 	ldw	r4,-4(fp)
81129ad4:	11294d80 	call	811294d8 <alt_log_private_printf>
    return (0);
81129ad8:	0005883a 	mov	r2,zero
}
81129adc:	e037883a 	mov	sp,fp
81129ae0:	dfc00117 	ldw	ra,4(sp)
81129ae4:	df000017 	ldw	fp,0(sp)
81129ae8:	dec00504 	addi	sp,sp,20
81129aec:	f800283a 	ret

81129af0 <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
81129af0:	defff904 	addi	sp,sp,-28
81129af4:	de00012e 	bgeu	sp,et,81129afc <altera_avalon_jtag_uart_report_log+0xc>
81129af8:	003b68fa 	trap	3
81129afc:	dfc00615 	stw	ra,24(sp)
81129b00:	df000515 	stw	fp,20(sp)
81129b04:	dc400415 	stw	r17,16(sp)
81129b08:	dc000315 	stw	r16,12(sp)
81129b0c:	df000504 	addi	fp,sp,20
81129b10:	e13ffd15 	stw	r4,-12(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
81129b14:	d0a06b83 	ldbu	r2,-32338(gp)
81129b18:	10803fcc 	andi	r2,r2,255
81129b1c:	10001426 	beq	r2,zero,81129b70 <altera_avalon_jtag_uart_report_log+0x80>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
81129b20:	e0bffd17 	ldw	r2,-12(fp)
81129b24:	e0bffb15 	stw	r2,-20(fp)
        const char* header="JTAG Alarm:";
81129b28:	00a04534 	movhi	r2,33044
81129b2c:	10886404 	addi	r2,r2,8592
81129b30:	e0bffc15 	stw	r2,-16(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
81129b34:	e0bffb17 	ldw	r2,-20(fp)
81129b38:	10800017 	ldw	r2,0(r2)
81129b3c:	e1bffc17 	ldw	r6,-16(fp)
81129b40:	100b883a 	mov	r5,r2
81129b44:	e13ffb17 	ldw	r4,-20(fp)
81129b48:	1129b900 	call	81129b90 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81129b4c:	d0e07217 	ldw	r3,-32312(gp)
        return ALT_LOG_JTAG_UART_TICKS;
81129b50:	00b33374 	movhi	r2,52429
81129b54:	10b33344 	addi	r2,r2,-13107
81129b58:	1888383a 	mulxuu	r4,r3,r2
81129b5c:	1885383a 	mul	r2,r3,r2
81129b60:	1021883a 	mov	r16,r2
81129b64:	2023883a 	mov	r17,r4
81129b68:	8804d0fa 	srli	r2,r17,3
81129b6c:	00000106 	br	81129b74 <altera_avalon_jtag_uart_report_log+0x84>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
81129b70:	0005883a 	mov	r2,zero
    }
}
81129b74:	e6fffe04 	addi	sp,fp,-8
81129b78:	dfc00317 	ldw	ra,12(sp)
81129b7c:	df000217 	ldw	fp,8(sp)
81129b80:	dc400117 	ldw	r17,4(sp)
81129b84:	dc000017 	ldw	r16,0(sp)
81129b88:	dec00404 	addi	sp,sp,16
81129b8c:	f800283a 	ret

81129b90 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
81129b90:	deffef04 	addi	sp,sp,-68
81129b94:	de00012e 	bgeu	sp,et,81129b9c <alt_log_jtag_uart_print_control_reg+0xc>
81129b98:	003b68fa 	trap	3
81129b9c:	dfc01015 	stw	ra,64(sp)
81129ba0:	df000f15 	stw	fp,60(sp)
81129ba4:	df000f04 	addi	fp,sp,60
81129ba8:	e13ffd15 	stw	r4,-12(fp)
81129bac:	e17ffe15 	stw	r5,-8(fp)
81129bb0:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81129bb4:	e0bffe17 	ldw	r2,-8(fp)
81129bb8:	10800104 	addi	r2,r2,4
81129bbc:	10800037 	ldwio	r2,0(r2)
81129bc0:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
81129bc4:	e0bff617 	ldw	r2,-40(fp)
81129bc8:	1004d43a 	srli	r2,r2,16
81129bcc:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
81129bd0:	e0bff617 	ldw	r2,-40(fp)
81129bd4:	1080008c 	andi	r2,r2,2
81129bd8:	1004d07a 	srli	r2,r2,1
81129bdc:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
81129be0:	e0bff617 	ldw	r2,-40(fp)
81129be4:	1080004c 	andi	r2,r2,1
81129be8:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
81129bec:	e0bff617 	ldw	r2,-40(fp)
81129bf0:	1080400c 	andi	r2,r2,256
81129bf4:	1004d23a 	srli	r2,r2,8
81129bf8:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
81129bfc:	e0bff617 	ldw	r2,-40(fp)
81129c00:	1080800c 	andi	r2,r2,512
81129c04:	1004d27a 	srli	r2,r2,9
81129c08:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
81129c0c:	e0bff617 	ldw	r2,-40(fp)
81129c10:	1081000c 	andi	r2,r2,1024
81129c14:	1004d2ba 	srli	r2,r2,10
81129c18:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
81129c1c:	e0bffd17 	ldw	r2,-12(fp)
81129c20:	10c01017 	ldw	r3,64(r2)
81129c24:	e0bffd17 	ldw	r2,-12(fp)
81129c28:	10800f17 	ldw	r2,60(r2)
81129c2c:	1887c83a 	sub	r3,r3,r2
81129c30:	e0bff917 	ldw	r2,-28(fp)
81129c34:	d8800415 	stw	r2,16(sp)
81129c38:	e0bff817 	ldw	r2,-32(fp)
81129c3c:	d8800315 	stw	r2,12(sp)
81129c40:	e0bffa17 	ldw	r2,-24(fp)
81129c44:	d8800215 	stw	r2,8(sp)
81129c48:	e0bffb17 	ldw	r2,-20(fp)
81129c4c:	d8800115 	stw	r2,4(sp)
81129c50:	e0bffc17 	ldw	r2,-16(fp)
81129c54:	d8800015 	stw	r2,0(sp)
81129c58:	e1fff717 	ldw	r7,-36(fp)
81129c5c:	180d883a 	mov	r6,r3
81129c60:	e17fff17 	ldw	r5,-4(fp)
81129c64:	01204534 	movhi	r4,33044
81129c68:	21086704 	addi	r4,r4,8604
81129c6c:	1129a900 	call	81129a90 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
81129c70:	0001883a 	nop

}
81129c74:	e037883a 	mov	sp,fp
81129c78:	dfc00117 	ldw	ra,4(sp)
81129c7c:	df000017 	ldw	fp,0(sp)
81129c80:	dec00204 	addi	sp,sp,8
81129c84:	f800283a 	ret

81129c88 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
81129c88:	defffb04 	addi	sp,sp,-20
81129c8c:	de00012e 	bgeu	sp,et,81129c94 <alt_log_jtag_uart_startup_info+0xc>
81129c90:	003b68fa 	trap	3
81129c94:	dfc00415 	stw	ra,16(sp)
81129c98:	df000315 	stw	fp,12(sp)
81129c9c:	df000304 	addi	fp,sp,12
81129ca0:	e13ffe15 	stw	r4,-8(fp)
81129ca4:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
81129ca8:	00a04534 	movhi	r2,33044
81129cac:	10887904 	addi	r2,r2,8676
81129cb0:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
81129cb4:	e1bffd17 	ldw	r6,-12(fp)
81129cb8:	e17fff17 	ldw	r5,-4(fp)
81129cbc:	e13ffe17 	ldw	r4,-8(fp)
81129cc0:	1129b900 	call	81129b90 <alt_log_jtag_uart_print_control_reg>
     return;
81129cc4:	0001883a 	nop
}
81129cc8:	e037883a 	mov	sp,fp
81129ccc:	dfc00117 	ldw	ra,4(sp)
81129cd0:	df000017 	ldw	fp,0(sp)
81129cd4:	dec00204 	addi	sp,sp,8
81129cd8:	f800283a 	ret

81129cdc <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
81129cdc:	defffb04 	addi	sp,sp,-20
81129ce0:	de00012e 	bgeu	sp,et,81129ce8 <alt_log_jtag_uart_isr_proc+0xc>
81129ce4:	003b68fa 	trap	3
81129ce8:	dfc00415 	stw	ra,16(sp)
81129cec:	df000315 	stw	fp,12(sp)
81129cf0:	df000304 	addi	fp,sp,12
81129cf4:	e13ffe15 	stw	r4,-8(fp)
81129cf8:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
81129cfc:	d0a06bc3 	ldbu	r2,-32337(gp)
81129d00:	10803fcc 	andi	r2,r2,255
81129d04:	10000826 	beq	r2,zero,81129d28 <alt_log_jtag_uart_isr_proc+0x4c>
        const char* header="JTAG IRQ:";
81129d08:	00a04534 	movhi	r2,33044
81129d0c:	10887e04 	addi	r2,r2,8696
81129d10:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
81129d14:	e1bffd17 	ldw	r6,-12(fp)
81129d18:	e17ffe17 	ldw	r5,-8(fp)
81129d1c:	e13fff17 	ldw	r4,-4(fp)
81129d20:	1129b900 	call	81129b90 <alt_log_jtag_uart_print_control_reg>
    }
    return;
81129d24:	0001883a 	nop
81129d28:	0001883a 	nop
}
81129d2c:	e037883a 	mov	sp,fp
81129d30:	dfc00117 	ldw	ra,4(sp)
81129d34:	df000017 	ldw	fp,0(sp)
81129d38:	dec00204 	addi	sp,sp,8
81129d3c:	f800283a 	ret

81129d40 <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
81129d40:	defffa04 	addi	sp,sp,-24
81129d44:	de00012e 	bgeu	sp,et,81129d4c <alt_log_write+0xc>
81129d48:	003b68fa 	trap	3
81129d4c:	dfc00515 	stw	ra,20(sp)
81129d50:	df000415 	stw	fp,16(sp)
81129d54:	df000404 	addi	fp,sp,16
81129d58:	e13ffe15 	stw	r4,-8(fp)
81129d5c:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
81129d60:	d0a06b03 	ldbu	r2,-32340(gp)
81129d64:	10803fcc 	andi	r2,r2,255
81129d68:	10004026 	beq	r2,zero,81129e6c <alt_log_write+0x12c>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
81129d6c:	e0bfff17 	ldw	r2,-4(fp)
81129d70:	10c00430 	cmpltui	r3,r2,16
81129d74:	1800011e 	bne	r3,zero,81129d7c <alt_log_write+0x3c>
81129d78:	008003c4 	movi	r2,15
81129d7c:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
81129d80:	e0bffd17 	ldw	r2,-12(fp)
81129d84:	10800088 	cmpgei	r2,r2,2
81129d88:	10003726 	beq	r2,zero,81129e68 <alt_log_write+0x128>

        strncpy (alt_log_write_buf,ptr,length);
81129d8c:	e0bffd17 	ldw	r2,-12(fp)
81129d90:	100d883a 	mov	r6,r2
81129d94:	e17ffe17 	ldw	r5,-8(fp)
81129d98:	01204574 	movhi	r4,33045
81129d9c:	210b5304 	addi	r4,r4,11596
81129da0:	113deb40 	call	8113deb4 <strncpy>
    alt_log_write_buf[length-1]='\n';
81129da4:	e0bffd17 	ldw	r2,-12(fp)
81129da8:	10ffffc4 	addi	r3,r2,-1
81129dac:	00a04574 	movhi	r2,33045
81129db0:	108b5304 	addi	r2,r2,11596
81129db4:	10c5883a 	add	r2,r2,r3
81129db8:	00c00284 	movi	r3,10
81129dbc:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
81129dc0:	00a04574 	movhi	r2,33045
81129dc4:	108b5304 	addi	r2,r2,11596
81129dc8:	e0fffd17 	ldw	r3,-12(fp)
81129dcc:	10c5883a 	add	r2,r2,r3
81129dd0:	00c00344 	movi	r3,13
81129dd4:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
81129dd8:	e0bffd17 	ldw	r2,-12(fp)
81129ddc:	10c00044 	addi	r3,r2,1
81129de0:	00a04574 	movhi	r2,33045
81129de4:	108b5304 	addi	r2,r2,11596
81129de8:	10c5883a 	add	r2,r2,r3
81129dec:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
81129df0:	e03ffc15 	stw	zero,-16(fp)
81129df4:	00001306 	br	81129e44 <alt_log_write+0x104>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
81129df8:	00a04574 	movhi	r2,33045
81129dfc:	108b5304 	addi	r2,r2,11596
81129e00:	e0fffc17 	ldw	r3,-16(fp)
81129e04:	10c5883a 	add	r2,r2,r3
81129e08:	10800003 	ldbu	r2,0(r2)
81129e0c:	10803fcc 	andi	r2,r2,255
81129e10:	1080201c 	xori	r2,r2,128
81129e14:	10bfe004 	addi	r2,r2,-128
81129e18:	10800118 	cmpnei	r2,r2,4
81129e1c:	1000061e 	bne	r2,zero,81129e38 <alt_log_write+0xf8>
            alt_log_write_buf[temp_cnt]='D';
81129e20:	00a04574 	movhi	r2,33045
81129e24:	108b5304 	addi	r2,r2,11596
81129e28:	e0fffc17 	ldw	r3,-16(fp)
81129e2c:	10c5883a 	add	r2,r2,r3
81129e30:	00c01104 	movi	r3,68
81129e34:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
81129e38:	e0bffc17 	ldw	r2,-16(fp)
81129e3c:	10800044 	addi	r2,r2,1
81129e40:	e0bffc15 	stw	r2,-16(fp)
81129e44:	e0fffc17 	ldw	r3,-16(fp)
81129e48:	e0bffd17 	ldw	r2,-12(fp)
81129e4c:	18bfea16 	blt	r3,r2,81129df8 <__reset+0xfb109df8>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
81129e50:	01604574 	movhi	r5,33045
81129e54:	294b5304 	addi	r5,r5,11596
81129e58:	01204534 	movhi	r4,33044
81129e5c:	21088104 	addi	r4,r4,8708
81129e60:	1129a900 	call	81129a90 <alt_log_printf_proc>
81129e64:	00000106 	br	81129e6c <alt_log_write+0x12c>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
81129e68:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
81129e6c:	e037883a 	mov	sp,fp
81129e70:	dfc00117 	ldw	ra,4(sp)
81129e74:	df000017 	ldw	fp,0(sp)
81129e78:	dec00204 	addi	sp,sp,8
81129e7c:	f800283a 	ret

81129e80 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
81129e80:	defffe04 	addi	sp,sp,-8
81129e84:	de00012e 	bgeu	sp,et,81129e8c <alt_log_system_clock+0xc>
81129e88:	003b68fa 	trap	3
81129e8c:	dfc00115 	stw	ra,4(sp)
81129e90:	df000015 	stw	fp,0(sp)
81129e94:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
81129e98:	d0a06b43 	ldbu	r2,-32339(gp)
81129e9c:	10803fcc 	andi	r2,r2,255
81129ea0:	10000e26 	beq	r2,zero,81129edc <alt_log_system_clock+0x5c>
    alt_log_sys_clk_count++;
81129ea4:	d0a06e17 	ldw	r2,-32328(gp)
81129ea8:	10800044 	addi	r2,r2,1
81129eac:	d0a06e15 	stw	r2,-32328(gp)
81129eb0:	d0a07217 	ldw	r2,-32312(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
81129eb4:	d0e06e17 	ldw	r3,-32328(gp)
81129eb8:	10c0082e 	bgeu	r2,r3,81129edc <alt_log_system_clock+0x5c>
            alt_log_sys_clk_count = 0;
81129ebc:	d0206e15 	stw	zero,-32328(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
81129ec0:	d0a06d17 	ldw	r2,-32332(gp)
81129ec4:	10c00044 	addi	r3,r2,1
81129ec8:	d0e06d15 	stw	r3,-32332(gp)
81129ecc:	100b883a 	mov	r5,r2
81129ed0:	01204534 	movhi	r4,33044
81129ed4:	21088504 	addi	r4,r4,8724
81129ed8:	1129a900 	call	81129a90 <alt_log_printf_proc>
        }
    }
}
81129edc:	0001883a 	nop
81129ee0:	e037883a 	mov	sp,fp
81129ee4:	dfc00117 	ldw	ra,4(sp)
81129ee8:	df000017 	ldw	fp,0(sp)
81129eec:	dec00204 	addi	sp,sp,8
81129ef0:	f800283a 	ret

81129ef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129ef4:	defffe04 	addi	sp,sp,-8
81129ef8:	de00012e 	bgeu	sp,et,81129f00 <alt_get_errno+0xc>
81129efc:	003b68fa 	trap	3
81129f00:	dfc00115 	stw	ra,4(sp)
81129f04:	df000015 	stw	fp,0(sp)
81129f08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129f0c:	d0a01017 	ldw	r2,-32704(gp)
81129f10:	10000326 	beq	r2,zero,81129f20 <alt_get_errno+0x2c>
81129f14:	d0a01017 	ldw	r2,-32704(gp)
81129f18:	103ee83a 	callr	r2
81129f1c:	00000106 	br	81129f24 <alt_get_errno+0x30>
81129f20:	d0a06204 	addi	r2,gp,-32376
}
81129f24:	e037883a 	mov	sp,fp
81129f28:	dfc00117 	ldw	ra,4(sp)
81129f2c:	df000017 	ldw	fp,0(sp)
81129f30:	dec00204 	addi	sp,sp,8
81129f34:	f800283a 	ret

81129f38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81129f38:	defff904 	addi	sp,sp,-28
81129f3c:	de00012e 	bgeu	sp,et,81129f44 <lseek+0xc>
81129f40:	003b68fa 	trap	3
81129f44:	dfc00615 	stw	ra,24(sp)
81129f48:	df000515 	stw	fp,20(sp)
81129f4c:	df000504 	addi	fp,sp,20
81129f50:	e13ffd15 	stw	r4,-12(fp)
81129f54:	e17ffe15 	stw	r5,-8(fp)
81129f58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81129f5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81129f60:	e0bffd17 	ldw	r2,-12(fp)
81129f64:	10000616 	blt	r2,zero,81129f80 <lseek+0x48>
81129f68:	e0bffd17 	ldw	r2,-12(fp)
81129f6c:	10c00324 	muli	r3,r2,12
81129f70:	00a04534 	movhi	r2,33044
81129f74:	108c5104 	addi	r2,r2,12612
81129f78:	1885883a 	add	r2,r3,r2
81129f7c:	00000106 	br	81129f84 <lseek+0x4c>
81129f80:	0005883a 	mov	r2,zero
81129f84:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81129f88:	e0bffc17 	ldw	r2,-16(fp)
81129f8c:	10001026 	beq	r2,zero,81129fd0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81129f90:	e0bffc17 	ldw	r2,-16(fp)
81129f94:	10800017 	ldw	r2,0(r2)
81129f98:	10800717 	ldw	r2,28(r2)
81129f9c:	10000926 	beq	r2,zero,81129fc4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81129fa0:	e0bffc17 	ldw	r2,-16(fp)
81129fa4:	10800017 	ldw	r2,0(r2)
81129fa8:	10800717 	ldw	r2,28(r2)
81129fac:	e1bfff17 	ldw	r6,-4(fp)
81129fb0:	e17ffe17 	ldw	r5,-8(fp)
81129fb4:	e13ffc17 	ldw	r4,-16(fp)
81129fb8:	103ee83a 	callr	r2
81129fbc:	e0bffb15 	stw	r2,-20(fp)
81129fc0:	00000506 	br	81129fd8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81129fc4:	00bfde84 	movi	r2,-134
81129fc8:	e0bffb15 	stw	r2,-20(fp)
81129fcc:	00000206 	br	81129fd8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
81129fd0:	00bfebc4 	movi	r2,-81
81129fd4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81129fd8:	e0bffb17 	ldw	r2,-20(fp)
81129fdc:	1000070e 	bge	r2,zero,81129ffc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
81129fe0:	1129ef40 	call	81129ef4 <alt_get_errno>
81129fe4:	1007883a 	mov	r3,r2
81129fe8:	e0bffb17 	ldw	r2,-20(fp)
81129fec:	0085c83a 	sub	r2,zero,r2
81129ff0:	18800015 	stw	r2,0(r3)
    rc = -1;
81129ff4:	00bfffc4 	movi	r2,-1
81129ff8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81129ffc:	e0bffb17 	ldw	r2,-20(fp)
}
8112a000:	e037883a 	mov	sp,fp
8112a004:	dfc00117 	ldw	ra,4(sp)
8112a008:	df000017 	ldw	fp,0(sp)
8112a00c:	dec00204 	addi	sp,sp,8
8112a010:	f800283a 	ret

8112a014 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8112a014:	defff904 	addi	sp,sp,-28
8112a018:	de00012e 	bgeu	sp,et,8112a020 <alt_main+0xc>
8112a01c:	003b68fa 	trap	3
8112a020:	dfc00615 	stw	ra,24(sp)
8112a024:	df000515 	stw	fp,20(sp)
8112a028:	df000504 	addi	fp,sp,20
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
8112a02c:	d0a01217 	ldw	r2,-32696(gp)
8112a030:	10800058 	cmpnei	r2,r2,1
8112a034:	1000031e 	bne	r2,zero,8112a044 <alt_main+0x30>
8112a038:	01204534 	movhi	r4,33044
8112a03c:	21088b04 	addi	r4,r4,8748
8112a040:	1129a900 	call	81129a90 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8112a044:	0009883a 	mov	r4,zero
8112a048:	1134c300 	call	81134c30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
8112a04c:	d0a01217 	ldw	r2,-32696(gp)
8112a050:	10800058 	cmpnei	r2,r2,1
8112a054:	1000031e 	bne	r2,zero,8112a064 <alt_main+0x50>
8112a058:	01204534 	movhi	r4,33044
8112a05c:	21089904 	addi	r4,r4,8804
8112a060:	1129a900 	call	81129a90 <alt_log_printf_proc>
  ALT_OS_INIT();
8112a064:	112b6c40 	call	8112b6c4 <OSInit>
8112a068:	01000044 	movi	r4,1
8112a06c:	11313e00 	call	811313e0 <OSSemCreate>
8112a070:	d0a07515 	stw	r2,-32300(gp)
8112a074:	01000044 	movi	r4,1
8112a078:	11313e00 	call	811313e0 <OSSemCreate>
8112a07c:	d0a07715 	stw	r2,-32292(gp)
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
8112a080:	d0a01217 	ldw	r2,-32696(gp)
8112a084:	10800058 	cmpnei	r2,r2,1
8112a088:	1000031e 	bne	r2,zero,8112a098 <alt_main+0x84>
8112a08c:	01204534 	movhi	r4,33044
8112a090:	2108a704 	addi	r4,r4,8860
8112a094:	1129a900 	call	81129a90 <alt_log_printf_proc>
8112a098:	d0a06904 	addi	r2,gp,-32348
8112a09c:	e0bffc15 	stw	r2,-16(fp)
8112a0a0:	00800044 	movi	r2,1
8112a0a4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112a0a8:	e0bffd0b 	ldhu	r2,-12(fp)
8112a0ac:	1009883a 	mov	r4,r2
8112a0b0:	11313e00 	call	811313e0 <OSSemCreate>
8112a0b4:	1007883a 	mov	r3,r2
8112a0b8:	e0bffc17 	ldw	r2,-16(fp)
8112a0bc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
8112a0c0:	d0a01217 	ldw	r2,-32696(gp)
8112a0c4:	10800058 	cmpnei	r2,r2,1
8112a0c8:	1000031e 	bne	r2,zero,8112a0d8 <alt_main+0xc4>
8112a0cc:	01204534 	movhi	r4,33044
8112a0d0:	2108b504 	addi	r4,r4,8916
8112a0d4:	1129a900 	call	81129a90 <alt_log_printf_proc>
  alt_sys_init();
8112a0d8:	1134c700 	call	81134c70 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
8112a0dc:	d0a01217 	ldw	r2,-32696(gp)
8112a0e0:	10800058 	cmpnei	r2,r2,1
8112a0e4:	1000031e 	bne	r2,zero,8112a0f4 <alt_main+0xe0>
8112a0e8:	01204534 	movhi	r4,33044
8112a0ec:	2108bf04 	addi	r4,r4,8956
8112a0f0:	1129a900 	call	81129a90 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
8112a0f4:	d0a01217 	ldw	r2,-32696(gp)
8112a0f8:	10800058 	cmpnei	r2,r2,1
8112a0fc:	1000031e 	bne	r2,zero,8112a10c <alt_main+0xf8>
8112a100:	01204534 	movhi	r4,33044
8112a104:	2108c804 	addi	r4,r4,8992
8112a108:	1129a900 	call	81129a90 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8112a10c:	01a04534 	movhi	r6,33044
8112a110:	3188d004 	addi	r6,r6,9024
8112a114:	01604534 	movhi	r5,33044
8112a118:	2948d504 	addi	r5,r5,9044
8112a11c:	01204534 	movhi	r4,33044
8112a120:	2108d504 	addi	r4,r4,9044
8112a124:	113d6300 	call	8113d630 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
8112a128:	d0a01217 	ldw	r2,-32696(gp)
8112a12c:	10800058 	cmpnei	r2,r2,1
8112a130:	1000031e 	bne	r2,zero,8112a140 <alt_main+0x12c>
8112a134:	01204534 	movhi	r4,33044
8112a138:	2108d904 	addi	r4,r4,9060
8112a13c:	1129a900 	call	81129a90 <alt_log_printf_proc>
  _do_ctors ();
8112a140:	113cf400 	call	8113cf40 <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
8112a144:	d0a01217 	ldw	r2,-32696(gp)
8112a148:	10800058 	cmpnei	r2,r2,1
8112a14c:	1000031e 	bne	r2,zero,8112a15c <alt_main+0x148>
8112a150:	01204534 	movhi	r4,33044
8112a154:	2108e404 	addi	r4,r4,9104
8112a158:	1129a900 	call	81129a90 <alt_log_printf_proc>
  atexit (_do_dtors);
8112a15c:	01204534 	movhi	r4,33044
8112a160:	2133ea04 	addi	r4,r4,-12376
8112a164:	113dde40 	call	8113dde4 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
8112a168:	d0a01217 	ldw	r2,-32696(gp)
8112a16c:	10800058 	cmpnei	r2,r2,1
8112a170:	1000031e 	bne	r2,zero,8112a180 <alt_main+0x16c>
8112a174:	01204534 	movhi	r4,33044
8112a178:	2108ec04 	addi	r4,r4,9136
8112a17c:	1129a900 	call	81129a90 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8112a180:	d0a06f17 	ldw	r2,-32324(gp)
8112a184:	d0e07017 	ldw	r3,-32320(gp)
8112a188:	d1207117 	ldw	r4,-32316(gp)
8112a18c:	200d883a 	mov	r6,r4
8112a190:	180b883a 	mov	r5,r3
8112a194:	1009883a 	mov	r4,r2
8112a198:	110d14c0 	call	8110d14c <main>
8112a19c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
8112a1a0:	01000044 	movi	r4,1
8112a1a4:	1128f400 	call	81128f40 <close>
  exit (result);
8112a1a8:	e13ffb17 	ldw	r4,-20(fp)
8112a1ac:	113ddf80 	call	8113ddf8 <exit>

8112a1b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a1b0:	defffe04 	addi	sp,sp,-8
8112a1b4:	de00012e 	bgeu	sp,et,8112a1bc <alt_get_errno+0xc>
8112a1b8:	003b68fa 	trap	3
8112a1bc:	dfc00115 	stw	ra,4(sp)
8112a1c0:	df000015 	stw	fp,0(sp)
8112a1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a1c8:	d0a01017 	ldw	r2,-32704(gp)
8112a1cc:	10000326 	beq	r2,zero,8112a1dc <alt_get_errno+0x2c>
8112a1d0:	d0a01017 	ldw	r2,-32704(gp)
8112a1d4:	103ee83a 	callr	r2
8112a1d8:	00000106 	br	8112a1e0 <alt_get_errno+0x30>
8112a1dc:	d0a06204 	addi	r2,gp,-32376
}
8112a1e0:	e037883a 	mov	sp,fp
8112a1e4:	dfc00117 	ldw	ra,4(sp)
8112a1e8:	df000017 	ldw	fp,0(sp)
8112a1ec:	dec00204 	addi	sp,sp,8
8112a1f0:	f800283a 	ret

8112a1f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8112a1f4:	defffd04 	addi	sp,sp,-12
8112a1f8:	de00012e 	bgeu	sp,et,8112a200 <alt_file_locked+0xc>
8112a1fc:	003b68fa 	trap	3
8112a200:	df000215 	stw	fp,8(sp)
8112a204:	df000204 	addi	fp,sp,8
8112a208:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8112a20c:	e0bfff17 	ldw	r2,-4(fp)
8112a210:	10800217 	ldw	r2,8(r2)
8112a214:	10d00034 	orhi	r3,r2,16384
8112a218:	e0bfff17 	ldw	r2,-4(fp)
8112a21c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8112a220:	e03ffe15 	stw	zero,-8(fp)
8112a224:	00001d06 	br	8112a29c <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112a228:	00a04534 	movhi	r2,33044
8112a22c:	108c5104 	addi	r2,r2,12612
8112a230:	e0fffe17 	ldw	r3,-8(fp)
8112a234:	18c00324 	muli	r3,r3,12
8112a238:	10c5883a 	add	r2,r2,r3
8112a23c:	10c00017 	ldw	r3,0(r2)
8112a240:	e0bfff17 	ldw	r2,-4(fp)
8112a244:	10800017 	ldw	r2,0(r2)
8112a248:	1880111e 	bne	r3,r2,8112a290 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8112a24c:	00a04534 	movhi	r2,33044
8112a250:	108c5104 	addi	r2,r2,12612
8112a254:	e0fffe17 	ldw	r3,-8(fp)
8112a258:	18c00324 	muli	r3,r3,12
8112a25c:	10c5883a 	add	r2,r2,r3
8112a260:	10800204 	addi	r2,r2,8
8112a264:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112a268:	1000090e 	bge	r2,zero,8112a290 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8112a26c:	e0bffe17 	ldw	r2,-8(fp)
8112a270:	10c00324 	muli	r3,r2,12
8112a274:	00a04534 	movhi	r2,33044
8112a278:	108c5104 	addi	r2,r2,12612
8112a27c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8112a280:	e0bfff17 	ldw	r2,-4(fp)
8112a284:	18800226 	beq	r3,r2,8112a290 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8112a288:	00bffcc4 	movi	r2,-13
8112a28c:	00000806 	br	8112a2b0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8112a290:	e0bffe17 	ldw	r2,-8(fp)
8112a294:	10800044 	addi	r2,r2,1
8112a298:	e0bffe15 	stw	r2,-8(fp)
8112a29c:	d0a00f17 	ldw	r2,-32708(gp)
8112a2a0:	1007883a 	mov	r3,r2
8112a2a4:	e0bffe17 	ldw	r2,-8(fp)
8112a2a8:	18bfdf2e 	bgeu	r3,r2,8112a228 <__reset+0xfb10a228>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8112a2ac:	0005883a 	mov	r2,zero
}
8112a2b0:	e037883a 	mov	sp,fp
8112a2b4:	df000017 	ldw	fp,0(sp)
8112a2b8:	dec00104 	addi	sp,sp,4
8112a2bc:	f800283a 	ret

8112a2c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8112a2c0:	defff604 	addi	sp,sp,-40
8112a2c4:	de00012e 	bgeu	sp,et,8112a2cc <open+0xc>
8112a2c8:	003b68fa 	trap	3
8112a2cc:	dfc00915 	stw	ra,36(sp)
8112a2d0:	df000815 	stw	fp,32(sp)
8112a2d4:	df000804 	addi	fp,sp,32
8112a2d8:	e13ffd15 	stw	r4,-12(fp)
8112a2dc:	e17ffe15 	stw	r5,-8(fp)
8112a2e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8112a2e4:	00bfffc4 	movi	r2,-1
8112a2e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8112a2ec:	00bffb44 	movi	r2,-19
8112a2f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8112a2f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8112a2f8:	d1600d04 	addi	r5,gp,-32716
8112a2fc:	e13ffd17 	ldw	r4,-12(fp)
8112a300:	113d0100 	call	8113d010 <alt_find_dev>
8112a304:	e0bff815 	stw	r2,-32(fp)
8112a308:	e0bff817 	ldw	r2,-32(fp)
8112a30c:	1000051e 	bne	r2,zero,8112a324 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8112a310:	e13ffd17 	ldw	r4,-12(fp)
8112a314:	113d0a80 	call	8113d0a8 <alt_find_file>
8112a318:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8112a31c:	00800044 	movi	r2,1
8112a320:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8112a324:	e0bff817 	ldw	r2,-32(fp)
8112a328:	10002926 	beq	r2,zero,8112a3d0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
8112a32c:	e13ff817 	ldw	r4,-32(fp)
8112a330:	113d1b80 	call	8113d1b8 <alt_get_fd>
8112a334:	e0bff915 	stw	r2,-28(fp)
8112a338:	e0bff917 	ldw	r2,-28(fp)
8112a33c:	1000030e 	bge	r2,zero,8112a34c <open+0x8c>
    {
      status = index;
8112a340:	e0bff917 	ldw	r2,-28(fp)
8112a344:	e0bffa15 	stw	r2,-24(fp)
8112a348:	00002306 	br	8112a3d8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
8112a34c:	e0bff917 	ldw	r2,-28(fp)
8112a350:	10c00324 	muli	r3,r2,12
8112a354:	00a04534 	movhi	r2,33044
8112a358:	108c5104 	addi	r2,r2,12612
8112a35c:	1885883a 	add	r2,r3,r2
8112a360:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8112a364:	e0fffe17 	ldw	r3,-8(fp)
8112a368:	00900034 	movhi	r2,16384
8112a36c:	10bfffc4 	addi	r2,r2,-1
8112a370:	1886703a 	and	r3,r3,r2
8112a374:	e0bffc17 	ldw	r2,-16(fp)
8112a378:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8112a37c:	e0bffb17 	ldw	r2,-20(fp)
8112a380:	1000051e 	bne	r2,zero,8112a398 <open+0xd8>
8112a384:	e13ffc17 	ldw	r4,-16(fp)
8112a388:	112a1f40 	call	8112a1f4 <alt_file_locked>
8112a38c:	e0bffa15 	stw	r2,-24(fp)
8112a390:	e0bffa17 	ldw	r2,-24(fp)
8112a394:	10001016 	blt	r2,zero,8112a3d8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8112a398:	e0bff817 	ldw	r2,-32(fp)
8112a39c:	10800317 	ldw	r2,12(r2)
8112a3a0:	10000826 	beq	r2,zero,8112a3c4 <open+0x104>
8112a3a4:	e0bff817 	ldw	r2,-32(fp)
8112a3a8:	10800317 	ldw	r2,12(r2)
8112a3ac:	e1ffff17 	ldw	r7,-4(fp)
8112a3b0:	e1bffe17 	ldw	r6,-8(fp)
8112a3b4:	e17ffd17 	ldw	r5,-12(fp)
8112a3b8:	e13ffc17 	ldw	r4,-16(fp)
8112a3bc:	103ee83a 	callr	r2
8112a3c0:	00000106 	br	8112a3c8 <open+0x108>
8112a3c4:	0005883a 	mov	r2,zero
8112a3c8:	e0bffa15 	stw	r2,-24(fp)
8112a3cc:	00000206 	br	8112a3d8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
8112a3d0:	00bffb44 	movi	r2,-19
8112a3d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8112a3d8:	e0bffa17 	ldw	r2,-24(fp)
8112a3dc:	1000090e 	bge	r2,zero,8112a404 <open+0x144>
  {
    alt_release_fd (index);  
8112a3e0:	e13ff917 	ldw	r4,-28(fp)
8112a3e4:	112a5640 	call	8112a564 <alt_release_fd>
    ALT_ERRNO = -status;
8112a3e8:	112a1b00 	call	8112a1b0 <alt_get_errno>
8112a3ec:	1007883a 	mov	r3,r2
8112a3f0:	e0bffa17 	ldw	r2,-24(fp)
8112a3f4:	0085c83a 	sub	r2,zero,r2
8112a3f8:	18800015 	stw	r2,0(r3)
    return -1;
8112a3fc:	00bfffc4 	movi	r2,-1
8112a400:	00000106 	br	8112a408 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
8112a404:	e0bff917 	ldw	r2,-28(fp)
}
8112a408:	e037883a 	mov	sp,fp
8112a40c:	dfc00117 	ldw	ra,4(sp)
8112a410:	df000017 	ldw	fp,0(sp)
8112a414:	dec00204 	addi	sp,sp,8
8112a418:	f800283a 	ret

8112a41c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a41c:	defffe04 	addi	sp,sp,-8
8112a420:	de00012e 	bgeu	sp,et,8112a428 <alt_get_errno+0xc>
8112a424:	003b68fa 	trap	3
8112a428:	dfc00115 	stw	ra,4(sp)
8112a42c:	df000015 	stw	fp,0(sp)
8112a430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a434:	d0a01017 	ldw	r2,-32704(gp)
8112a438:	10000326 	beq	r2,zero,8112a448 <alt_get_errno+0x2c>
8112a43c:	d0a01017 	ldw	r2,-32704(gp)
8112a440:	103ee83a 	callr	r2
8112a444:	00000106 	br	8112a44c <alt_get_errno+0x30>
8112a448:	d0a06204 	addi	r2,gp,-32376
}
8112a44c:	e037883a 	mov	sp,fp
8112a450:	dfc00117 	ldw	ra,4(sp)
8112a454:	df000017 	ldw	fp,0(sp)
8112a458:	dec00204 	addi	sp,sp,8
8112a45c:	f800283a 	ret

8112a460 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8112a460:	defff904 	addi	sp,sp,-28
8112a464:	de00012e 	bgeu	sp,et,8112a46c <read+0xc>
8112a468:	003b68fa 	trap	3
8112a46c:	dfc00615 	stw	ra,24(sp)
8112a470:	df000515 	stw	fp,20(sp)
8112a474:	df000504 	addi	fp,sp,20
8112a478:	e13ffd15 	stw	r4,-12(fp)
8112a47c:	e17ffe15 	stw	r5,-8(fp)
8112a480:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112a484:	e0bffd17 	ldw	r2,-12(fp)
8112a488:	10000616 	blt	r2,zero,8112a4a4 <read+0x44>
8112a48c:	e0bffd17 	ldw	r2,-12(fp)
8112a490:	10c00324 	muli	r3,r2,12
8112a494:	00a04534 	movhi	r2,33044
8112a498:	108c5104 	addi	r2,r2,12612
8112a49c:	1885883a 	add	r2,r3,r2
8112a4a0:	00000106 	br	8112a4a8 <read+0x48>
8112a4a4:	0005883a 	mov	r2,zero
8112a4a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8112a4ac:	e0bffb17 	ldw	r2,-20(fp)
8112a4b0:	10002226 	beq	r2,zero,8112a53c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8112a4b4:	e0bffb17 	ldw	r2,-20(fp)
8112a4b8:	10800217 	ldw	r2,8(r2)
8112a4bc:	108000cc 	andi	r2,r2,3
8112a4c0:	10800060 	cmpeqi	r2,r2,1
8112a4c4:	1000181e 	bne	r2,zero,8112a528 <read+0xc8>
        (fd->dev->read))
8112a4c8:	e0bffb17 	ldw	r2,-20(fp)
8112a4cc:	10800017 	ldw	r2,0(r2)
8112a4d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8112a4d4:	10001426 	beq	r2,zero,8112a528 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8112a4d8:	e0bffb17 	ldw	r2,-20(fp)
8112a4dc:	10800017 	ldw	r2,0(r2)
8112a4e0:	10800517 	ldw	r2,20(r2)
8112a4e4:	e0ffff17 	ldw	r3,-4(fp)
8112a4e8:	180d883a 	mov	r6,r3
8112a4ec:	e17ffe17 	ldw	r5,-8(fp)
8112a4f0:	e13ffb17 	ldw	r4,-20(fp)
8112a4f4:	103ee83a 	callr	r2
8112a4f8:	e0bffc15 	stw	r2,-16(fp)
8112a4fc:	e0bffc17 	ldw	r2,-16(fp)
8112a500:	1000070e 	bge	r2,zero,8112a520 <read+0xc0>
        {
          ALT_ERRNO = -rval;
8112a504:	112a41c0 	call	8112a41c <alt_get_errno>
8112a508:	1007883a 	mov	r3,r2
8112a50c:	e0bffc17 	ldw	r2,-16(fp)
8112a510:	0085c83a 	sub	r2,zero,r2
8112a514:	18800015 	stw	r2,0(r3)
          return -1;
8112a518:	00bfffc4 	movi	r2,-1
8112a51c:	00000c06 	br	8112a550 <read+0xf0>
        }
        return rval;
8112a520:	e0bffc17 	ldw	r2,-16(fp)
8112a524:	00000a06 	br	8112a550 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
8112a528:	112a41c0 	call	8112a41c <alt_get_errno>
8112a52c:	1007883a 	mov	r3,r2
8112a530:	00800344 	movi	r2,13
8112a534:	18800015 	stw	r2,0(r3)
8112a538:	00000406 	br	8112a54c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8112a53c:	112a41c0 	call	8112a41c <alt_get_errno>
8112a540:	1007883a 	mov	r3,r2
8112a544:	00801444 	movi	r2,81
8112a548:	18800015 	stw	r2,0(r3)
  }
  return -1;
8112a54c:	00bfffc4 	movi	r2,-1
}
8112a550:	e037883a 	mov	sp,fp
8112a554:	dfc00117 	ldw	ra,4(sp)
8112a558:	df000017 	ldw	fp,0(sp)
8112a55c:	dec00204 	addi	sp,sp,8
8112a560:	f800283a 	ret

8112a564 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8112a564:	defffe04 	addi	sp,sp,-8
8112a568:	de00012e 	bgeu	sp,et,8112a570 <alt_release_fd+0xc>
8112a56c:	003b68fa 	trap	3
8112a570:	df000115 	stw	fp,4(sp)
8112a574:	df000104 	addi	fp,sp,4
8112a578:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8112a57c:	e0bfff17 	ldw	r2,-4(fp)
8112a580:	108000d0 	cmplti	r2,r2,3
8112a584:	10000d1e 	bne	r2,zero,8112a5bc <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
8112a588:	00a04534 	movhi	r2,33044
8112a58c:	108c5104 	addi	r2,r2,12612
8112a590:	e0ffff17 	ldw	r3,-4(fp)
8112a594:	18c00324 	muli	r3,r3,12
8112a598:	10c5883a 	add	r2,r2,r3
8112a59c:	10800204 	addi	r2,r2,8
8112a5a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8112a5a4:	00a04534 	movhi	r2,33044
8112a5a8:	108c5104 	addi	r2,r2,12612
8112a5ac:	e0ffff17 	ldw	r3,-4(fp)
8112a5b0:	18c00324 	muli	r3,r3,12
8112a5b4:	10c5883a 	add	r2,r2,r3
8112a5b8:	10000015 	stw	zero,0(r2)
  }
}
8112a5bc:	0001883a 	nop
8112a5c0:	e037883a 	mov	sp,fp
8112a5c4:	df000017 	ldw	fp,0(sp)
8112a5c8:	dec00104 	addi	sp,sp,4
8112a5cc:	f800283a 	ret

8112a5d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8112a5d0:	defff604 	addi	sp,sp,-40
8112a5d4:	de00012e 	bgeu	sp,et,8112a5dc <sbrk+0xc>
8112a5d8:	003b68fa 	trap	3
8112a5dc:	df000915 	stw	fp,36(sp)
8112a5e0:	df000904 	addi	fp,sp,36
8112a5e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a5e8:	0005303a 	rdctl	r2,status
8112a5ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a5f0:	e0fffe17 	ldw	r3,-8(fp)
8112a5f4:	00bfff84 	movi	r2,-2
8112a5f8:	1884703a 	and	r2,r3,r2
8112a5fc:	1001703a 	wrctl	status,r2
  
  return context;
8112a600:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8112a604:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8112a608:	d0a01317 	ldw	r2,-32692(gp)
8112a60c:	10c000c4 	addi	r3,r2,3
8112a610:	00bfff04 	movi	r2,-4
8112a614:	1884703a 	and	r2,r3,r2
8112a618:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8112a61c:	d0e01317 	ldw	r3,-32692(gp)
8112a620:	e0bfff17 	ldw	r2,-4(fp)
8112a624:	1887883a 	add	r3,r3,r2
8112a628:	00a04834 	movhi	r2,33056
8112a62c:	10a80004 	addi	r2,r2,-24576
8112a630:	10c0062e 	bgeu	r2,r3,8112a64c <sbrk+0x7c>
8112a634:	e0bff817 	ldw	r2,-32(fp)
8112a638:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a63c:	e0bff717 	ldw	r2,-36(fp)
8112a640:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8112a644:	00bfffc4 	movi	r2,-1
8112a648:	00001c06 	br	8112a6bc <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
8112a64c:	d0a01317 	ldw	r2,-32692(gp)
8112a650:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
8112a654:	d0e01317 	ldw	r3,-32692(gp)
8112a658:	e0bfff17 	ldw	r2,-4(fp)
8112a65c:	1885883a 	add	r2,r3,r2
8112a660:	d0a01315 	stw	r2,-32692(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
8112a664:	c005883a 	mov	r2,et
8112a668:	e0bff915 	stw	r2,-28(fp)

  return limit; 
8112a66c:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
8112a670:	e0bffa17 	ldw	r2,-24(fp)
8112a674:	18800c1e 	bne	r3,r2,8112a6a8 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
8112a678:	d805883a 	mov	r2,sp
8112a67c:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
8112a680:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
8112a684:	d0e01317 	ldw	r3,-32692(gp)
8112a688:	18800136 	bltu	r3,r2,8112a690 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
8112a68c:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
8112a690:	d0a01317 	ldw	r2,-32692(gp)
8112a694:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
8112a698:	e0bffc17 	ldw	r2,-16(fp)
8112a69c:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
8112a6a0:	e0bffc17 	ldw	r2,-16(fp)
8112a6a4:	1031883a 	mov	et,r2
8112a6a8:	e0bff817 	ldw	r2,-32(fp)
8112a6ac:	e0bffd15 	stw	r2,-12(fp)
8112a6b0:	e0bffd17 	ldw	r2,-12(fp)
8112a6b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8112a6b8:	e0bffa17 	ldw	r2,-24(fp)
} 
8112a6bc:	e037883a 	mov	sp,fp
8112a6c0:	df000017 	ldw	fp,0(sp)
8112a6c4:	dec00104 	addi	sp,sp,4
8112a6c8:	f800283a 	ret

8112a6cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8112a6cc:	defffa04 	addi	sp,sp,-24
8112a6d0:	de00012e 	bgeu	sp,et,8112a6d8 <alt_alarm_stop+0xc>
8112a6d4:	003b68fa 	trap	3
8112a6d8:	df000515 	stw	fp,20(sp)
8112a6dc:	df000504 	addi	fp,sp,20
8112a6e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a6e4:	0005303a 	rdctl	r2,status
8112a6e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a6ec:	e0fffc17 	ldw	r3,-16(fp)
8112a6f0:	00bfff84 	movi	r2,-2
8112a6f4:	1884703a 	and	r2,r3,r2
8112a6f8:	1001703a 	wrctl	status,r2
  
  return context;
8112a6fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8112a700:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8112a704:	e0bfff17 	ldw	r2,-4(fp)
8112a708:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8112a70c:	e0bffd17 	ldw	r2,-12(fp)
8112a710:	10800017 	ldw	r2,0(r2)
8112a714:	e0fffd17 	ldw	r3,-12(fp)
8112a718:	18c00117 	ldw	r3,4(r3)
8112a71c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8112a720:	e0bffd17 	ldw	r2,-12(fp)
8112a724:	10800117 	ldw	r2,4(r2)
8112a728:	e0fffd17 	ldw	r3,-12(fp)
8112a72c:	18c00017 	ldw	r3,0(r3)
8112a730:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8112a734:	e0bffd17 	ldw	r2,-12(fp)
8112a738:	e0fffd17 	ldw	r3,-12(fp)
8112a73c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8112a740:	e0bffd17 	ldw	r2,-12(fp)
8112a744:	e0fffd17 	ldw	r3,-12(fp)
8112a748:	10c00015 	stw	r3,0(r2)
8112a74c:	e0bffb17 	ldw	r2,-20(fp)
8112a750:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a754:	e0bffe17 	ldw	r2,-8(fp)
8112a758:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8112a75c:	0001883a 	nop
8112a760:	e037883a 	mov	sp,fp
8112a764:	df000017 	ldw	fp,0(sp)
8112a768:	dec00104 	addi	sp,sp,4
8112a76c:	f800283a 	ret

8112a770 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8112a770:	defffb04 	addi	sp,sp,-20
8112a774:	de00012e 	bgeu	sp,et,8112a77c <alt_tick+0xc>
8112a778:	003b68fa 	trap	3
8112a77c:	dfc00415 	stw	ra,16(sp)
8112a780:	df000315 	stw	fp,12(sp)
8112a784:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8112a788:	d0a01417 	ldw	r2,-32688(gp)
8112a78c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8112a790:	d0a07317 	ldw	r2,-32308(gp)
8112a794:	10800044 	addi	r2,r2,1
8112a798:	d0a07315 	stw	r2,-32308(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112a79c:	00002e06 	br	8112a858 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
8112a7a0:	e0bffd17 	ldw	r2,-12(fp)
8112a7a4:	10800017 	ldw	r2,0(r2)
8112a7a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8112a7ac:	e0bffd17 	ldw	r2,-12(fp)
8112a7b0:	10800403 	ldbu	r2,16(r2)
8112a7b4:	10803fcc 	andi	r2,r2,255
8112a7b8:	10000426 	beq	r2,zero,8112a7cc <alt_tick+0x5c>
8112a7bc:	d0a07317 	ldw	r2,-32308(gp)
8112a7c0:	1000021e 	bne	r2,zero,8112a7cc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
8112a7c4:	e0bffd17 	ldw	r2,-12(fp)
8112a7c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8112a7cc:	e0bffd17 	ldw	r2,-12(fp)
8112a7d0:	10800217 	ldw	r2,8(r2)
8112a7d4:	d0e07317 	ldw	r3,-32308(gp)
8112a7d8:	18801d36 	bltu	r3,r2,8112a850 <alt_tick+0xe0>
8112a7dc:	e0bffd17 	ldw	r2,-12(fp)
8112a7e0:	10800403 	ldbu	r2,16(r2)
8112a7e4:	10803fcc 	andi	r2,r2,255
8112a7e8:	1000191e 	bne	r2,zero,8112a850 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
8112a7ec:	e0bffd17 	ldw	r2,-12(fp)
8112a7f0:	10800317 	ldw	r2,12(r2)
8112a7f4:	e0fffd17 	ldw	r3,-12(fp)
8112a7f8:	18c00517 	ldw	r3,20(r3)
8112a7fc:	1809883a 	mov	r4,r3
8112a800:	103ee83a 	callr	r2
8112a804:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8112a808:	e0bfff17 	ldw	r2,-4(fp)
8112a80c:	1000031e 	bne	r2,zero,8112a81c <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
8112a810:	e13ffd17 	ldw	r4,-12(fp)
8112a814:	112a6cc0 	call	8112a6cc <alt_alarm_stop>
8112a818:	00000d06 	br	8112a850 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
8112a81c:	e0bffd17 	ldw	r2,-12(fp)
8112a820:	10c00217 	ldw	r3,8(r2)
8112a824:	e0bfff17 	ldw	r2,-4(fp)
8112a828:	1887883a 	add	r3,r3,r2
8112a82c:	e0bffd17 	ldw	r2,-12(fp)
8112a830:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8112a834:	e0bffd17 	ldw	r2,-12(fp)
8112a838:	10c00217 	ldw	r3,8(r2)
8112a83c:	d0a07317 	ldw	r2,-32308(gp)
8112a840:	1880032e 	bgeu	r3,r2,8112a850 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
8112a844:	e0bffd17 	ldw	r2,-12(fp)
8112a848:	00c00044 	movi	r3,1
8112a84c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8112a850:	e0bffe17 	ldw	r2,-8(fp)
8112a854:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112a858:	e0fffd17 	ldw	r3,-12(fp)
8112a85c:	d0a01404 	addi	r2,gp,-32688
8112a860:	18bfcf1e 	bne	r3,r2,8112a7a0 <__reset+0xfb10a7a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8112a864:	112bb240 	call	8112bb24 <OSTimeTick>
}
8112a868:	0001883a 	nop
8112a86c:	e037883a 	mov	sp,fp
8112a870:	dfc00117 	ldw	ra,4(sp)
8112a874:	df000017 	ldw	fp,0(sp)
8112a878:	dec00204 	addi	sp,sp,8
8112a87c:	f800283a 	ret

8112a880 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8112a880:	defffb04 	addi	sp,sp,-20
8112a884:	de00012e 	bgeu	sp,et,8112a88c <usleep+0xc>
8112a888:	003b68fa 	trap	3
8112a88c:	dfc00415 	stw	ra,16(sp)
8112a890:	df000315 	stw	fp,12(sp)
8112a894:	df000304 	addi	fp,sp,12
8112a898:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
8112a89c:	d0a07b03 	ldbu	r2,-32276(gp)
8112a8a0:	10803fcc 	andi	r2,r2,255
8112a8a4:	1000031e 	bne	r2,zero,8112a8b4 <usleep+0x34>
  {
    return alt_busy_sleep (us);
8112a8a8:	e13fff17 	ldw	r4,-4(fp)
8112a8ac:	1128dcc0 	call	81128dcc <alt_busy_sleep>
8112a8b0:	00003d06 	br	8112a9a8 <usleep+0x128>
8112a8b4:	d0a07217 	ldw	r2,-32312(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
8112a8b8:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
8112a8bc:	e0ffff17 	ldw	r3,-4(fp)
8112a8c0:	0090c734 	movhi	r2,17180
8112a8c4:	10b7a0c4 	addi	r2,r2,-8573
8112a8c8:	1888383a 	mulxuu	r4,r3,r2
8112a8cc:	1885383a 	mul	r2,r3,r2
8112a8d0:	1013883a 	mov	r9,r2
8112a8d4:	2015883a 	mov	r10,r4
8112a8d8:	5006d4ba 	srli	r3,r10,18
8112a8dc:	e0bffe17 	ldw	r2,-8(fp)
8112a8e0:	1893383a 	mul	r9,r3,r2
8112a8e4:	e0ffff17 	ldw	r3,-4(fp)
8112a8e8:	0090c734 	movhi	r2,17180
8112a8ec:	10b7a0c4 	addi	r2,r2,-8573
8112a8f0:	1888383a 	mulxuu	r4,r3,r2
8112a8f4:	1885383a 	mul	r2,r3,r2
8112a8f8:	100f883a 	mov	r7,r2
8112a8fc:	2011883a 	mov	r8,r4
8112a900:	4004d4ba 	srli	r2,r8,18
8112a904:	010003f4 	movhi	r4,15
8112a908:	21109004 	addi	r4,r4,16960
8112a90c:	1105383a 	mul	r2,r2,r4
8112a910:	1885c83a 	sub	r2,r3,r2
8112a914:	e0fffe17 	ldw	r3,-8(fp)
8112a918:	10c7383a 	mul	r3,r2,r3
8112a91c:	0090c734 	movhi	r2,17180
8112a920:	10b7a0c4 	addi	r2,r2,-8573
8112a924:	1888383a 	mulxuu	r4,r3,r2
8112a928:	1885383a 	mul	r2,r3,r2
8112a92c:	100b883a 	mov	r5,r2
8112a930:	200d883a 	mov	r6,r4
8112a934:	3004d4ba 	srli	r2,r6,18
8112a938:	4885883a 	add	r2,r9,r2
8112a93c:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112a940:	00000706 	br	8112a960 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
8112a944:	013fffd4 	movui	r4,65535
8112a948:	11335940 	call	81133594 <OSTimeDly>
    ticks -= 0xffff;
8112a94c:	e0fffd17 	ldw	r3,-12(fp)
8112a950:	00bffff4 	movhi	r2,65535
8112a954:	10800044 	addi	r2,r2,1
8112a958:	1885883a 	add	r2,r3,r2
8112a95c:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112a960:	e0bffd17 	ldw	r2,-12(fp)
8112a964:	00ffffd4 	movui	r3,65535
8112a968:	18bff636 	bltu	r3,r2,8112a944 <__reset+0xfb10a944>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
8112a96c:	e0bffd17 	ldw	r2,-12(fp)
8112a970:	10bfffcc 	andi	r2,r2,65535
8112a974:	1009883a 	mov	r4,r2
8112a978:	11335940 	call	81133594 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
8112a97c:	008003f4 	movhi	r2,15
8112a980:	10909004 	addi	r2,r2,16960
8112a984:	e0fffe17 	ldw	r3,-8(fp)
8112a988:	10c7203a 	divu	r3,r2,r3
8112a98c:	e0bfff17 	ldw	r2,-4(fp)
8112a990:	10c9203a 	divu	r4,r2,r3
8112a994:	20c7383a 	mul	r3,r4,r3
8112a998:	10c5c83a 	sub	r2,r2,r3
8112a99c:	1009883a 	mov	r4,r2
8112a9a0:	1128dcc0 	call	81128dcc <alt_busy_sleep>

  return 0;  
8112a9a4:	0005883a 	mov	r2,zero
}
8112a9a8:	e037883a 	mov	sp,fp
8112a9ac:	dfc00117 	ldw	ra,4(sp)
8112a9b0:	df000017 	ldw	fp,0(sp)
8112a9b4:	dec00204 	addi	sp,sp,8
8112a9b8:	f800283a 	ret

8112a9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a9bc:	defffe04 	addi	sp,sp,-8
8112a9c0:	de00012e 	bgeu	sp,et,8112a9c8 <alt_get_errno+0xc>
8112a9c4:	003b68fa 	trap	3
8112a9c8:	dfc00115 	stw	ra,4(sp)
8112a9cc:	df000015 	stw	fp,0(sp)
8112a9d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a9d4:	d0a01017 	ldw	r2,-32704(gp)
8112a9d8:	10000326 	beq	r2,zero,8112a9e8 <alt_get_errno+0x2c>
8112a9dc:	d0a01017 	ldw	r2,-32704(gp)
8112a9e0:	103ee83a 	callr	r2
8112a9e4:	00000106 	br	8112a9ec <alt_get_errno+0x30>
8112a9e8:	d0a06204 	addi	r2,gp,-32376
}
8112a9ec:	e037883a 	mov	sp,fp
8112a9f0:	dfc00117 	ldw	ra,4(sp)
8112a9f4:	df000017 	ldw	fp,0(sp)
8112a9f8:	dec00204 	addi	sp,sp,8
8112a9fc:	f800283a 	ret

8112aa00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8112aa00:	defff904 	addi	sp,sp,-28
8112aa04:	de00012e 	bgeu	sp,et,8112aa0c <write+0xc>
8112aa08:	003b68fa 	trap	3
8112aa0c:	dfc00615 	stw	ra,24(sp)
8112aa10:	df000515 	stw	fp,20(sp)
8112aa14:	df000504 	addi	fp,sp,20
8112aa18:	e13ffd15 	stw	r4,-12(fp)
8112aa1c:	e17ffe15 	stw	r5,-8(fp)
8112aa20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112aa24:	e0bffd17 	ldw	r2,-12(fp)
8112aa28:	10000616 	blt	r2,zero,8112aa44 <write+0x44>
8112aa2c:	e0bffd17 	ldw	r2,-12(fp)
8112aa30:	10c00324 	muli	r3,r2,12
8112aa34:	00a04534 	movhi	r2,33044
8112aa38:	108c5104 	addi	r2,r2,12612
8112aa3c:	1885883a 	add	r2,r3,r2
8112aa40:	00000106 	br	8112aa48 <write+0x48>
8112aa44:	0005883a 	mov	r2,zero
8112aa48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8112aa4c:	e0bffb17 	ldw	r2,-20(fp)
8112aa50:	10002426 	beq	r2,zero,8112aae4 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8112aa54:	e0bffb17 	ldw	r2,-20(fp)
8112aa58:	10800217 	ldw	r2,8(r2)
8112aa5c:	108000cc 	andi	r2,r2,3
8112aa60:	10001b26 	beq	r2,zero,8112aad0 <write+0xd0>
8112aa64:	e0bffb17 	ldw	r2,-20(fp)
8112aa68:	10800017 	ldw	r2,0(r2)
8112aa6c:	10800617 	ldw	r2,24(r2)
8112aa70:	10001726 	beq	r2,zero,8112aad0 <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
8112aa74:	e17fff17 	ldw	r5,-4(fp)
8112aa78:	e13ffe17 	ldw	r4,-8(fp)
8112aa7c:	1129d400 	call	81129d40 <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8112aa80:	e0bffb17 	ldw	r2,-20(fp)
8112aa84:	10800017 	ldw	r2,0(r2)
8112aa88:	10800617 	ldw	r2,24(r2)
8112aa8c:	e0ffff17 	ldw	r3,-4(fp)
8112aa90:	180d883a 	mov	r6,r3
8112aa94:	e17ffe17 	ldw	r5,-8(fp)
8112aa98:	e13ffb17 	ldw	r4,-20(fp)
8112aa9c:	103ee83a 	callr	r2
8112aaa0:	e0bffc15 	stw	r2,-16(fp)
8112aaa4:	e0bffc17 	ldw	r2,-16(fp)
8112aaa8:	1000070e 	bge	r2,zero,8112aac8 <write+0xc8>
      {
        ALT_ERRNO = -rval;
8112aaac:	112a9bc0 	call	8112a9bc <alt_get_errno>
8112aab0:	1007883a 	mov	r3,r2
8112aab4:	e0bffc17 	ldw	r2,-16(fp)
8112aab8:	0085c83a 	sub	r2,zero,r2
8112aabc:	18800015 	stw	r2,0(r3)
        return -1;
8112aac0:	00bfffc4 	movi	r2,-1
8112aac4:	00000c06 	br	8112aaf8 <write+0xf8>
      }
      return rval;
8112aac8:	e0bffc17 	ldw	r2,-16(fp)
8112aacc:	00000a06 	br	8112aaf8 <write+0xf8>
    }
    else
    {
      ALT_ERRNO = EACCES;
8112aad0:	112a9bc0 	call	8112a9bc <alt_get_errno>
8112aad4:	1007883a 	mov	r3,r2
8112aad8:	00800344 	movi	r2,13
8112aadc:	18800015 	stw	r2,0(r3)
8112aae0:	00000406 	br	8112aaf4 <write+0xf4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8112aae4:	112a9bc0 	call	8112a9bc <alt_get_errno>
8112aae8:	1007883a 	mov	r3,r2
8112aaec:	00801444 	movi	r2,81
8112aaf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
8112aaf4:	00bfffc4 	movi	r2,-1
}
8112aaf8:	e037883a 	mov	sp,fp
8112aafc:	dfc00117 	ldw	ra,4(sp)
8112ab00:	df000017 	ldw	fp,0(sp)
8112ab04:	dec00204 	addi	sp,sp,8
8112ab08:	f800283a 	ret

8112ab0c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
8112ab0c:	deffde04 	addi	sp,sp,-136
8112ab10:	de00012e 	bgeu	sp,et,8112ab18 <__env_lock+0xc>
8112ab14:	003b68fa 	trap	3
8112ab18:	dfc02115 	stw	ra,132(sp)
8112ab1c:	df002015 	stw	fp,128(sp)
8112ab20:	df002004 	addi	fp,sp,128
8112ab24:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112ab28:	e0bfe104 	addi	r2,fp,-124
8112ab2c:	100b883a 	mov	r5,r2
8112ab30:	01003fc4 	movi	r4,255
8112ab34:	11333f00 	call	811333f0 <OSTaskQuery>
8112ab38:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112ab3c:	e0bffe83 	ldbu	r2,-6(fp)
8112ab40:	10803fcc 	andi	r2,r2,255
8112ab44:	10001e1e 	bne	r2,zero,8112abc0 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
8112ab48:	e0bfed83 	ldbu	r2,-74(fp)
8112ab4c:	10803fcc 	andi	r2,r2,255
8112ab50:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
8112ab54:	d0a07517 	ldw	r2,-32300(gp)
8112ab58:	e0fffc04 	addi	r3,fp,-16
8112ab5c:	180b883a 	mov	r5,r3
8112ab60:	1009883a 	mov	r4,r2
8112ab64:	1131ba80 	call	81131ba8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
8112ab68:	e0bffe03 	ldbu	r2,-8(fp)
8112ab6c:	10803fcc 	andi	r2,r2,255
8112ab70:	10000726 	beq	r2,zero,8112ab90 <__env_lock+0x84>
8112ab74:	d0a01617 	ldw	r2,-32680(gp)
8112ab78:	e0ffe017 	ldw	r3,-128(fp)
8112ab7c:	1880041e 	bne	r3,r2,8112ab90 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
8112ab80:	d0a07417 	ldw	r2,-32304(gp)
8112ab84:	10800044 	addi	r2,r2,1
8112ab88:	d0a07415 	stw	r2,-32304(gp)
8112ab8c:	00000a06 	br	8112abb8 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
8112ab90:	d0a07517 	ldw	r2,-32300(gp)
8112ab94:	e0fffe84 	addi	r3,fp,-6
8112ab98:	180d883a 	mov	r6,r3
8112ab9c:	000b883a 	mov	r5,zero
8112aba0:	1009883a 	mov	r4,r2
8112aba4:	11317080 	call	81131708 <OSSemPend>
    locks  = 1;
8112aba8:	00800044 	movi	r2,1
8112abac:	d0a07415 	stw	r2,-32304(gp)
    lockid = id;
8112abb0:	e0bfe017 	ldw	r2,-128(fp)
8112abb4:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112abb8:	0001883a 	nop
8112abbc:	00000106 	br	8112abc4 <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112abc0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112abc4:	e037883a 	mov	sp,fp
8112abc8:	dfc00117 	ldw	ra,4(sp)
8112abcc:	df000017 	ldw	fp,0(sp)
8112abd0:	dec00204 	addi	sp,sp,8
8112abd4:	f800283a 	ret

8112abd8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
8112abd8:	defffd04 	addi	sp,sp,-12
8112abdc:	de00012e 	bgeu	sp,et,8112abe4 <__env_unlock+0xc>
8112abe0:	003b68fa 	trap	3
8112abe4:	dfc00215 	stw	ra,8(sp)
8112abe8:	df000115 	stw	fp,4(sp)
8112abec:	df000104 	addi	fp,sp,4
8112abf0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
8112abf4:	d0a07417 	ldw	r2,-32304(gp)
8112abf8:	10000b26 	beq	r2,zero,8112ac28 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
8112abfc:	d0a07417 	ldw	r2,-32304(gp)
8112ac00:	10bfffc4 	addi	r2,r2,-1
8112ac04:	d0a07415 	stw	r2,-32304(gp)
8112ac08:	d0a07417 	ldw	r2,-32304(gp)
8112ac0c:	1000071e 	bne	r2,zero,8112ac2c <__env_unlock+0x54>
  {
    lockid = -1;
8112ac10:	00bfffc4 	movi	r2,-1
8112ac14:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
8112ac18:	d0a07517 	ldw	r2,-32300(gp)
8112ac1c:	1009883a 	mov	r4,r2
8112ac20:	1131a900 	call	81131a90 <OSSemPost>
8112ac24:	00000106 	br	8112ac2c <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
8112ac28:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
8112ac2c:	e037883a 	mov	sp,fp
8112ac30:	dfc00117 	ldw	ra,4(sp)
8112ac34:	df000017 	ldw	fp,0(sp)
8112ac38:	dec00204 	addi	sp,sp,8
8112ac3c:	f800283a 	ret

8112ac40 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
8112ac40:	deffda04 	addi	sp,sp,-152
8112ac44:	de00012e 	bgeu	sp,et,8112ac4c <__malloc_lock+0xc>
8112ac48:	003b68fa 	trap	3
8112ac4c:	dfc02515 	stw	ra,148(sp)
8112ac50:	df002415 	stw	fp,144(sp)
8112ac54:	df002404 	addi	fp,sp,144
8112ac58:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ac5c:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
8112ac60:	d0a07b03 	ldbu	r2,-32276(gp)
8112ac64:	10803fcc 	andi	r2,r2,255
8112ac68:	10800060 	cmpeqi	r2,r2,1
8112ac6c:	10003626 	beq	r2,zero,8112ad48 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112ac70:	e0bfe104 	addi	r2,fp,-124
8112ac74:	100b883a 	mov	r5,r2
8112ac78:	01003fc4 	movi	r4,255
8112ac7c:	11333f00 	call	811333f0 <OSTaskQuery>
8112ac80:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112ac84:	e0bffe83 	ldbu	r2,-6(fp)
8112ac88:	10803fcc 	andi	r2,r2,255
8112ac8c:	1000301e 	bne	r2,zero,8112ad50 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
8112ac90:	e0bfed83 	ldbu	r2,-74(fp)
8112ac94:	10803fcc 	andi	r2,r2,255
8112ac98:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
8112ac9c:	d0a07717 	ldw	r2,-32292(gp)
8112aca0:	e0fffc04 	addi	r3,fp,-16
8112aca4:	180b883a 	mov	r5,r3
8112aca8:	1009883a 	mov	r4,r2
8112acac:	1131ba80 	call	81131ba8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112acb0:	0005303a 	rdctl	r2,status
8112acb4:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112acb8:	e0ffe017 	ldw	r3,-128(fp)
8112acbc:	00bfff84 	movi	r2,-2
8112acc0:	1884703a 	and	r2,r3,r2
8112acc4:	1001703a 	wrctl	status,r2
  
  return context;
8112acc8:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
8112accc:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
8112acd0:	e0bffc0b 	ldhu	r2,-16(fp)
8112acd4:	10bfffcc 	andi	r2,r2,65535
8112acd8:	10000b1e 	bne	r2,zero,8112ad08 <__malloc_lock+0xc8>
8112acdc:	d0a01717 	ldw	r2,-32676(gp)
8112ace0:	e0ffdd17 	ldw	r3,-140(fp)
8112ace4:	1880081e 	bne	r3,r2,8112ad08 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
8112ace8:	d0a07617 	ldw	r2,-32296(gp)
8112acec:	10800044 	addi	r2,r2,1
8112acf0:	d0a07615 	stw	r2,-32296(gp)
8112acf4:	e0bfdc17 	ldw	r2,-144(fp)
8112acf8:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112acfc:	e0bfde17 	ldw	r2,-136(fp)
8112ad00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
8112ad04:	00000e06 	br	8112ad40 <__malloc_lock+0x100>
8112ad08:	e0bfdc17 	ldw	r2,-144(fp)
8112ad0c:	e0bfdf15 	stw	r2,-132(fp)
8112ad10:	e0bfdf17 	ldw	r2,-132(fp)
8112ad14:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
8112ad18:	d0a07717 	ldw	r2,-32292(gp)
8112ad1c:	e0fffe84 	addi	r3,fp,-6
8112ad20:	180d883a 	mov	r6,r3
8112ad24:	000b883a 	mov	r5,zero
8112ad28:	1009883a 	mov	r4,r2
8112ad2c:	11317080 	call	81131708 <OSSemPend>
    locks  = 1;
8112ad30:	00800044 	movi	r2,1
8112ad34:	d0a07615 	stw	r2,-32296(gp)
    lockid = id;
8112ad38:	e0bfdd17 	ldw	r2,-140(fp)
8112ad3c:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112ad40:	0001883a 	nop
8112ad44:	00000306 	br	8112ad54 <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
8112ad48:	0001883a 	nop
8112ad4c:	00000106 	br	8112ad54 <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112ad50:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112ad54:	e037883a 	mov	sp,fp
8112ad58:	dfc00117 	ldw	ra,4(sp)
8112ad5c:	df000017 	ldw	fp,0(sp)
8112ad60:	dec00204 	addi	sp,sp,8
8112ad64:	f800283a 	ret

8112ad68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8112ad68:	defff804 	addi	sp,sp,-32
8112ad6c:	de00012e 	bgeu	sp,et,8112ad74 <__malloc_unlock+0xc>
8112ad70:	003b68fa 	trap	3
8112ad74:	dfc00715 	stw	ra,28(sp)
8112ad78:	df000615 	stw	fp,24(sp)
8112ad7c:	df000604 	addi	fp,sp,24
8112ad80:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ad84:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
8112ad88:	d0a07b03 	ldbu	r2,-32276(gp)
8112ad8c:	10803fcc 	andi	r2,r2,255
8112ad90:	10800060 	cmpeqi	r2,r2,1
8112ad94:	10002326 	beq	r2,zero,8112ae24 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ad98:	0005303a 	rdctl	r2,status
8112ad9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ada0:	e0fffe17 	ldw	r3,-8(fp)
8112ada4:	00bfff84 	movi	r2,-2
8112ada8:	1884703a 	and	r2,r3,r2
8112adac:	1001703a 	wrctl	status,r2
  
  return context;
8112adb0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
8112adb4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
8112adb8:	d0a07617 	ldw	r2,-32296(gp)
8112adbc:	1000051e 	bne	r2,zero,8112add4 <__malloc_unlock+0x6c>
8112adc0:	e0bffa17 	ldw	r2,-24(fp)
8112adc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112adc8:	e0bffb17 	ldw	r2,-20(fp)
8112adcc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
8112add0:	00001506 	br	8112ae28 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
8112add4:	d0a07617 	ldw	r2,-32296(gp)
8112add8:	10bfffc4 	addi	r2,r2,-1
8112addc:	d0a07615 	stw	r2,-32296(gp)
8112ade0:	d0a07617 	ldw	r2,-32296(gp)
8112ade4:	10000a1e 	bne	r2,zero,8112ae10 <__malloc_unlock+0xa8>
  {
    lockid = -1;
8112ade8:	00bfffc4 	movi	r2,-1
8112adec:	d0a01715 	stw	r2,-32676(gp)
8112adf0:	e0bffa17 	ldw	r2,-24(fp)
8112adf4:	e0bffc15 	stw	r2,-16(fp)
8112adf8:	e0bffc17 	ldw	r2,-16(fp)
8112adfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
8112ae00:	d0a07717 	ldw	r2,-32292(gp)
8112ae04:	1009883a 	mov	r4,r2
8112ae08:	1131a900 	call	81131a90 <OSSemPost>
8112ae0c:	00000606 	br	8112ae28 <__malloc_unlock+0xc0>
8112ae10:	e0bffa17 	ldw	r2,-24(fp)
8112ae14:	e0bffd15 	stw	r2,-12(fp)
8112ae18:	e0bffd17 	ldw	r2,-12(fp)
8112ae1c:	1001703a 	wrctl	status,r2
8112ae20:	00000106 	br	8112ae28 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
8112ae24:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
8112ae28:	e037883a 	mov	sp,fp
8112ae2c:	dfc00117 	ldw	ra,4(sp)
8112ae30:	df000017 	ldw	fp,0(sp)
8112ae34:	dec00204 	addi	sp,sp,8
8112ae38:	f800283a 	ret

8112ae3c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112ae3c:	defff704 	addi	sp,sp,-36
8112ae40:	de00012e 	bgeu	sp,et,8112ae48 <OSEventNameGet+0xc>
8112ae44:	003b68fa 	trap	3
8112ae48:	dfc00815 	stw	ra,32(sp)
8112ae4c:	df000715 	stw	fp,28(sp)
8112ae50:	df000704 	addi	fp,sp,28
8112ae54:	e13ffd15 	stw	r4,-12(fp)
8112ae58:	e17ffe15 	stw	r5,-8(fp)
8112ae5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ae60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ae64:	e0bfff17 	ldw	r2,-4(fp)
8112ae68:	1000021e 	bne	r2,zero,8112ae74 <OSEventNameGet+0x38>
        return (0);
8112ae6c:	0005883a 	mov	r2,zero
8112ae70:	00003706 	br	8112af50 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112ae74:	e0bffd17 	ldw	r2,-12(fp)
8112ae78:	1000051e 	bne	r2,zero,8112ae90 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
8112ae7c:	e0bfff17 	ldw	r2,-4(fp)
8112ae80:	00c00104 	movi	r3,4
8112ae84:	10c00005 	stb	r3,0(r2)
        return (0);
8112ae88:	0005883a 	mov	r2,zero
8112ae8c:	00003006 	br	8112af50 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112ae90:	e0bffe17 	ldw	r2,-8(fp)
8112ae94:	1000051e 	bne	r2,zero,8112aeac <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112ae98:	e0bfff17 	ldw	r2,-4(fp)
8112ae9c:	00c00304 	movi	r3,12
8112aea0:	10c00005 	stb	r3,0(r2)
        return (0);
8112aea4:	0005883a 	mov	r2,zero
8112aea8:	00002906 	br	8112af50 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112aeac:	d0a08b03 	ldbu	r2,-32212(gp)
8112aeb0:	10803fcc 	andi	r2,r2,255
8112aeb4:	10000526 	beq	r2,zero,8112aecc <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
8112aeb8:	e0bfff17 	ldw	r2,-4(fp)
8112aebc:	00c00444 	movi	r3,17
8112aec0:	10c00005 	stb	r3,0(r2)
        return (0);
8112aec4:	0005883a 	mov	r2,zero
8112aec8:	00002106 	br	8112af50 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
8112aecc:	e0bffd17 	ldw	r2,-12(fp)
8112aed0:	10800003 	ldbu	r2,0(r2)
8112aed4:	10803fcc 	andi	r2,r2,255
8112aed8:	10bfffc4 	addi	r2,r2,-1
8112aedc:	10800128 	cmpgeui	r2,r2,4
8112aee0:	10000526 	beq	r2,zero,8112aef8 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112aee4:	e0bfff17 	ldw	r2,-4(fp)
8112aee8:	00c00044 	movi	r3,1
8112aeec:	10c00005 	stb	r3,0(r2)
             return (0);
8112aef0:	0005883a 	mov	r2,zero
8112aef4:	00001606 	br	8112af50 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8112aef8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aefc:	0005303a 	rdctl	r2,status
8112af00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112af04:	e0fffb17 	ldw	r3,-20(fp)
8112af08:	00bfff84 	movi	r2,-2
8112af0c:	1884703a 	and	r2,r3,r2
8112af10:	1001703a 	wrctl	status,r2
  
  return context;
8112af14:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
8112af18:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
8112af1c:	e0bffd17 	ldw	r2,-12(fp)
8112af20:	10800444 	addi	r2,r2,17
8112af24:	100b883a 	mov	r5,r2
8112af28:	e13ffe17 	ldw	r4,-8(fp)
8112af2c:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112af30:	e0bffa05 	stb	r2,-24(fp)
8112af34:	e0bff917 	ldw	r2,-28(fp)
8112af38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112af3c:	e0bffc17 	ldw	r2,-16(fp)
8112af40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112af44:	e0bfff17 	ldw	r2,-4(fp)
8112af48:	10000005 	stb	zero,0(r2)
    return (len);
8112af4c:	e0bffa03 	ldbu	r2,-24(fp)
}
8112af50:	e037883a 	mov	sp,fp
8112af54:	dfc00117 	ldw	ra,4(sp)
8112af58:	df000017 	ldw	fp,0(sp)
8112af5c:	dec00204 	addi	sp,sp,8
8112af60:	f800283a 	ret

8112af64 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112af64:	defff604 	addi	sp,sp,-40
8112af68:	de00012e 	bgeu	sp,et,8112af70 <OSEventNameSet+0xc>
8112af6c:	003b68fa 	trap	3
8112af70:	dfc00915 	stw	ra,36(sp)
8112af74:	df000815 	stw	fp,32(sp)
8112af78:	df000804 	addi	fp,sp,32
8112af7c:	e13ffd15 	stw	r4,-12(fp)
8112af80:	e17ffe15 	stw	r5,-8(fp)
8112af84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112af88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112af8c:	e0bfff17 	ldw	r2,-4(fp)
8112af90:	10004026 	beq	r2,zero,8112b094 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112af94:	e0bffd17 	ldw	r2,-12(fp)
8112af98:	1000041e 	bne	r2,zero,8112afac <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112af9c:	e0bfff17 	ldw	r2,-4(fp)
8112afa0:	00c00104 	movi	r3,4
8112afa4:	10c00005 	stb	r3,0(r2)
        return;
8112afa8:	00003b06 	br	8112b098 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112afac:	e0bffe17 	ldw	r2,-8(fp)
8112afb0:	1000041e 	bne	r2,zero,8112afc4 <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112afb4:	e0bfff17 	ldw	r2,-4(fp)
8112afb8:	00c00304 	movi	r3,12
8112afbc:	10c00005 	stb	r3,0(r2)
        return;
8112afc0:	00003506 	br	8112b098 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112afc4:	d0a08b03 	ldbu	r2,-32212(gp)
8112afc8:	10803fcc 	andi	r2,r2,255
8112afcc:	10000426 	beq	r2,zero,8112afe0 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112afd0:	e0bfff17 	ldw	r2,-4(fp)
8112afd4:	00c00484 	movi	r3,18
8112afd8:	10c00005 	stb	r3,0(r2)
        return;
8112afdc:	00002e06 	br	8112b098 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
8112afe0:	e0bffd17 	ldw	r2,-12(fp)
8112afe4:	10800003 	ldbu	r2,0(r2)
8112afe8:	10803fcc 	andi	r2,r2,255
8112afec:	10bfffc4 	addi	r2,r2,-1
8112aff0:	10800128 	cmpgeui	r2,r2,4
8112aff4:	10000426 	beq	r2,zero,8112b008 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112aff8:	e0bfff17 	ldw	r2,-4(fp)
8112affc:	00c00044 	movi	r3,1
8112b000:	10c00005 	stb	r3,0(r2)
             return;
8112b004:	00002406 	br	8112b098 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8112b008:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b00c:	0005303a 	rdctl	r2,status
8112b010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b014:	e0fffc17 	ldw	r3,-16(fp)
8112b018:	00bfff84 	movi	r2,-2
8112b01c:	1884703a 	and	r2,r3,r2
8112b020:	1001703a 	wrctl	status,r2
  
  return context;
8112b024:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
8112b028:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
8112b02c:	e13ffe17 	ldw	r4,-8(fp)
8112b030:	112ca280 	call	8112ca28 <OS_StrLen>
8112b034:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
8112b038:	e0bffa03 	ldbu	r2,-24(fp)
8112b03c:	10800830 	cmpltui	r2,r2,32
8112b040:	1000081e 	bne	r2,zero,8112b064 <OSEventNameSet+0x100>
8112b044:	e0bff817 	ldw	r2,-32(fp)
8112b048:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b04c:	e0bff917 	ldw	r2,-28(fp)
8112b050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
8112b054:	e0bfff17 	ldw	r2,-4(fp)
8112b058:	00c002c4 	movi	r3,11
8112b05c:	10c00005 	stb	r3,0(r2)
        return;
8112b060:	00000d06 	br	8112b098 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
8112b064:	e0bffd17 	ldw	r2,-12(fp)
8112b068:	10800444 	addi	r2,r2,17
8112b06c:	e17ffe17 	ldw	r5,-8(fp)
8112b070:	1009883a 	mov	r4,r2
8112b074:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112b078:	e0bff817 	ldw	r2,-32(fp)
8112b07c:	e0bffb15 	stw	r2,-20(fp)
8112b080:	e0bffb17 	ldw	r2,-20(fp)
8112b084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112b088:	e0bfff17 	ldw	r2,-4(fp)
8112b08c:	10000005 	stb	zero,0(r2)
8112b090:	00000106 	br	8112b098 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112b094:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112b098:	e037883a 	mov	sp,fp
8112b09c:	dfc00117 	ldw	ra,4(sp)
8112b0a0:	df000017 	ldw	fp,0(sp)
8112b0a4:	dec00204 	addi	sp,sp,8
8112b0a8:	f800283a 	ret

8112b0ac <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
8112b0ac:	deffed04 	addi	sp,sp,-76
8112b0b0:	de00012e 	bgeu	sp,et,8112b0b8 <OSEventPendMulti+0xc>
8112b0b4:	003b68fa 	trap	3
8112b0b8:	dfc01215 	stw	ra,72(sp)
8112b0bc:	df001115 	stw	fp,68(sp)
8112b0c0:	df001104 	addi	fp,sp,68
8112b0c4:	e13ffc15 	stw	r4,-16(fp)
8112b0c8:	e17ffd15 	stw	r5,-12(fp)
8112b0cc:	e1bffe15 	stw	r6,-8(fp)
8112b0d0:	3805883a 	mov	r2,r7
8112b0d4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
8112b0d8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
8112b0dc:	e0800217 	ldw	r2,8(fp)
8112b0e0:	1000021e 	bne	r2,zero,8112b0ec <OSEventPendMulti+0x40>
        return (0);
8112b0e4:	0005883a 	mov	r2,zero
8112b0e8:	00017106 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
8112b0ec:	e0bffc17 	ldw	r2,-16(fp)
8112b0f0:	1000051e 	bne	r2,zero,8112b108 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
8112b0f4:	e0800217 	ldw	r2,8(fp)
8112b0f8:	00c00104 	movi	r3,4
8112b0fc:	10c00005 	stb	r3,0(r2)
        return (0);
8112b100:	0005883a 	mov	r2,zero
8112b104:	00016a06 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
8112b108:	e0bffd17 	ldw	r2,-12(fp)
8112b10c:	1000051e 	bne	r2,zero,8112b124 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
8112b110:	e0800217 	ldw	r2,8(fp)
8112b114:	00c00104 	movi	r3,4
8112b118:	10c00005 	stb	r3,0(r2)
        return (0);
8112b11c:	0005883a 	mov	r2,zero
8112b120:	00016306 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
8112b124:	e0bffe17 	ldw	r2,-8(fp)
8112b128:	1000051e 	bne	r2,zero,8112b140 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
8112b12c:	e0800217 	ldw	r2,8(fp)
8112b130:	00c00104 	movi	r3,4
8112b134:	10c00005 	stb	r3,0(r2)
        return (0);
8112b138:	0005883a 	mov	r2,zero
8112b13c:	00015c06 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
8112b140:	e0bffd17 	ldw	r2,-12(fp)
8112b144:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
8112b148:	e0bffc17 	ldw	r2,-16(fp)
8112b14c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
8112b150:	e0bfef17 	ldw	r2,-68(fp)
8112b154:	10800017 	ldw	r2,0(r2)
8112b158:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
8112b15c:	00001906 	br	8112b1c4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
8112b160:	e0bff017 	ldw	r2,-64(fp)
8112b164:	10800003 	ldbu	r2,0(r2)
8112b168:	10803fcc 	andi	r2,r2,255
8112b16c:	10c000a0 	cmpeqi	r3,r2,2
8112b170:	1800091e 	bne	r3,zero,8112b198 <OSEventPendMulti+0xec>
8112b174:	10c000e0 	cmpeqi	r3,r2,3
8112b178:	1800091e 	bne	r3,zero,8112b1a0 <OSEventPendMulti+0xf4>
8112b17c:	10800060 	cmpeqi	r2,r2,1
8112b180:	1000091e 	bne	r2,zero,8112b1a8 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
8112b184:	e0800217 	ldw	r2,8(fp)
8112b188:	00c00044 	movi	r3,1
8112b18c:	10c00005 	stb	r3,0(r2)
                 return (0);
8112b190:	0005883a 	mov	r2,zero
8112b194:	00014606 	br	8112b6b0 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
8112b198:	0001883a 	nop
8112b19c:	00000306 	br	8112b1ac <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
8112b1a0:	0001883a 	nop
8112b1a4:	00000106 	br	8112b1ac <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
8112b1a8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
8112b1ac:	e0bfef17 	ldw	r2,-68(fp)
8112b1b0:	10800104 	addi	r2,r2,4
8112b1b4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
8112b1b8:	e0bfef17 	ldw	r2,-68(fp)
8112b1bc:	10800017 	ldw	r2,0(r2)
8112b1c0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
8112b1c4:	e0bff017 	ldw	r2,-64(fp)
8112b1c8:	103fe51e 	bne	r2,zero,8112b160 <__reset+0xfb10b160>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
8112b1cc:	d0a08b03 	ldbu	r2,-32212(gp)
8112b1d0:	10803fcc 	andi	r2,r2,255
8112b1d4:	10000526 	beq	r2,zero,8112b1ec <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
8112b1d8:	e0800217 	ldw	r2,8(fp)
8112b1dc:	00c00084 	movi	r3,2
8112b1e0:	10c00005 	stb	r3,0(r2)
        return (0);
8112b1e4:	0005883a 	mov	r2,zero
8112b1e8:	00013106 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
8112b1ec:	d0a07903 	ldbu	r2,-32284(gp)
8112b1f0:	10803fcc 	andi	r2,r2,255
8112b1f4:	10000526 	beq	r2,zero,8112b20c <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
8112b1f8:	e0800217 	ldw	r2,8(fp)
8112b1fc:	00c00344 	movi	r3,13
8112b200:	10c00005 	stb	r3,0(r2)
        return (0);
8112b204:	0005883a 	mov	r2,zero
8112b208:	00012906 	br	8112b6b0 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b20c:	0005303a 	rdctl	r2,status
8112b210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b214:	e0fffb17 	ldw	r3,-20(fp)
8112b218:	00bfff84 	movi	r2,-2
8112b21c:	1884703a 	and	r2,r3,r2
8112b220:	1001703a 	wrctl	status,r2
  
  return context;
8112b224:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b228:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
8112b22c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
8112b230:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
8112b234:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
8112b238:	e0bffc17 	ldw	r2,-16(fp)
8112b23c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
8112b240:	e0bfef17 	ldw	r2,-68(fp)
8112b244:	10800017 	ldw	r2,0(r2)
8112b248:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
8112b24c:	00008106 	br	8112b454 <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
8112b250:	e0bff017 	ldw	r2,-64(fp)
8112b254:	10800003 	ldbu	r2,0(r2)
8112b258:	10803fcc 	andi	r2,r2,255
8112b25c:	10c000a0 	cmpeqi	r3,r2,2
8112b260:	18003c1e 	bne	r3,zero,8112b354 <OSEventPendMulti+0x2a8>
8112b264:	10c000e0 	cmpeqi	r3,r2,3
8112b268:	1800031e 	bne	r3,zero,8112b278 <OSEventPendMulti+0x1cc>
8112b26c:	10800060 	cmpeqi	r2,r2,1
8112b270:	10001e1e 	bne	r2,zero,8112b2ec <OSEventPendMulti+0x240>
8112b274:	00006606 	br	8112b410 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
8112b278:	e0bff017 	ldw	r2,-64(fp)
8112b27c:	1080020b 	ldhu	r2,8(r2)
8112b280:	10bfffcc 	andi	r2,r2,65535
8112b284:	10001526 	beq	r2,zero,8112b2dc <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
8112b288:	e0bff017 	ldw	r2,-64(fp)
8112b28c:	1080020b 	ldhu	r2,8(r2)
8112b290:	10bfffc4 	addi	r2,r2,-1
8112b294:	1007883a 	mov	r3,r2
8112b298:	e0bff017 	ldw	r2,-64(fp)
8112b29c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
8112b2a0:	e0bffd17 	ldw	r2,-12(fp)
8112b2a4:	10c00104 	addi	r3,r2,4
8112b2a8:	e0fffd15 	stw	r3,-12(fp)
8112b2ac:	e0fff017 	ldw	r3,-64(fp)
8112b2b0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
8112b2b4:	00800044 	movi	r2,1
8112b2b8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
8112b2bc:	e0bffe17 	ldw	r2,-8(fp)
8112b2c0:	10c00104 	addi	r3,r2,4
8112b2c4:	e0fffe15 	stw	r3,-8(fp)
8112b2c8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
8112b2cc:	e0bff18b 	ldhu	r2,-58(fp)
8112b2d0:	10800044 	addi	r2,r2,1
8112b2d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
8112b2d8:	00005806 	br	8112b43c <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
8112b2dc:	e0bff203 	ldbu	r2,-56(fp)
8112b2e0:	10800054 	ori	r2,r2,1
8112b2e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b2e8:	00005406 	br	8112b43c <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
8112b2ec:	e0bff017 	ldw	r2,-64(fp)
8112b2f0:	10800117 	ldw	r2,4(r2)
8112b2f4:	10001326 	beq	r2,zero,8112b344 <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
8112b2f8:	e0bffe17 	ldw	r2,-8(fp)
8112b2fc:	10c00104 	addi	r3,r2,4
8112b300:	e0fffe15 	stw	r3,-8(fp)
8112b304:	e0fff017 	ldw	r3,-64(fp)
8112b308:	18c00117 	ldw	r3,4(r3)
8112b30c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
8112b310:	e0bff017 	ldw	r2,-64(fp)
8112b314:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
8112b318:	e0bffd17 	ldw	r2,-12(fp)
8112b31c:	10c00104 	addi	r3,r2,4
8112b320:	e0fffd15 	stw	r3,-12(fp)
8112b324:	e0fff017 	ldw	r3,-64(fp)
8112b328:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
8112b32c:	00800044 	movi	r2,1
8112b330:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8112b334:	e0bff18b 	ldhu	r2,-58(fp)
8112b338:	10800044 	addi	r2,r2,1
8112b33c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
8112b340:	00003e06 	br	8112b43c <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
8112b344:	e0bff203 	ldbu	r2,-56(fp)
8112b348:	10800094 	ori	r2,r2,2
8112b34c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b350:	00003a06 	br	8112b43c <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
8112b354:	e0bff017 	ldw	r2,-64(fp)
8112b358:	10800117 	ldw	r2,4(r2)
8112b35c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
8112b360:	e0bff517 	ldw	r2,-44(fp)
8112b364:	1080058b 	ldhu	r2,22(r2)
8112b368:	10bfffcc 	andi	r2,r2,65535
8112b36c:	10002426 	beq	r2,zero,8112b400 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
8112b370:	e0bffe17 	ldw	r2,-8(fp)
8112b374:	10c00104 	addi	r3,r2,4
8112b378:	e0fffe15 	stw	r3,-8(fp)
8112b37c:	e0fff517 	ldw	r3,-44(fp)
8112b380:	18c00417 	ldw	r3,16(r3)
8112b384:	19400104 	addi	r5,r3,4
8112b388:	e13ff517 	ldw	r4,-44(fp)
8112b38c:	21400415 	stw	r5,16(r4)
8112b390:	18c00017 	ldw	r3,0(r3)
8112b394:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
8112b398:	e0bff517 	ldw	r2,-44(fp)
8112b39c:	10c00417 	ldw	r3,16(r2)
8112b3a0:	e0bff517 	ldw	r2,-44(fp)
8112b3a4:	10800217 	ldw	r2,8(r2)
8112b3a8:	1880041e 	bne	r3,r2,8112b3bc <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
8112b3ac:	e0bff517 	ldw	r2,-44(fp)
8112b3b0:	10c00117 	ldw	r3,4(r2)
8112b3b4:	e0bff517 	ldw	r2,-44(fp)
8112b3b8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
8112b3bc:	e0bff517 	ldw	r2,-44(fp)
8112b3c0:	1080058b 	ldhu	r2,22(r2)
8112b3c4:	10bfffc4 	addi	r2,r2,-1
8112b3c8:	1007883a 	mov	r3,r2
8112b3cc:	e0bff517 	ldw	r2,-44(fp)
8112b3d0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
8112b3d4:	e0bffd17 	ldw	r2,-12(fp)
8112b3d8:	10c00104 	addi	r3,r2,4
8112b3dc:	e0fffd15 	stw	r3,-12(fp)
8112b3e0:	e0fff017 	ldw	r3,-64(fp)
8112b3e4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
8112b3e8:	00800044 	movi	r2,1
8112b3ec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8112b3f0:	e0bff18b 	ldhu	r2,-58(fp)
8112b3f4:	10800044 	addi	r2,r2,1
8112b3f8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
8112b3fc:	00000f06 	br	8112b43c <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
8112b400:	e0bff203 	ldbu	r2,-56(fp)
8112b404:	10800114 	ori	r2,r2,4
8112b408:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b40c:	00000b06 	br	8112b43c <OSEventPendMulti+0x390>
8112b410:	e0bff317 	ldw	r2,-52(fp)
8112b414:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b418:	e0bff417 	ldw	r2,-48(fp)
8112b41c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
8112b420:	e0bffd17 	ldw	r2,-12(fp)
8112b424:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
8112b428:	e0800217 	ldw	r2,8(fp)
8112b42c:	00c00044 	movi	r3,1
8112b430:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
8112b434:	e0bff18b 	ldhu	r2,-58(fp)
8112b438:	00009d06 	br	8112b6b0 <OSEventPendMulti+0x604>
        }
        pevents++;
8112b43c:	e0bfef17 	ldw	r2,-68(fp)
8112b440:	10800104 	addi	r2,r2,4
8112b444:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
8112b448:	e0bfef17 	ldw	r2,-68(fp)
8112b44c:	10800017 	ldw	r2,0(r2)
8112b450:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
8112b454:	e0bff017 	ldw	r2,-64(fp)
8112b458:	103f7d1e 	bne	r2,zero,8112b250 <__reset+0xfb10b250>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
8112b45c:	e0bff103 	ldbu	r2,-60(fp)
8112b460:	10800058 	cmpnei	r2,r2,1
8112b464:	10000a1e 	bne	r2,zero,8112b490 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
8112b468:	e0bffd17 	ldw	r2,-12(fp)
8112b46c:	10000015 	stw	zero,0(r2)
8112b470:	e0bff317 	ldw	r2,-52(fp)
8112b474:	e0bff615 	stw	r2,-40(fp)
8112b478:	e0bff617 	ldw	r2,-40(fp)
8112b47c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
8112b480:	e0800217 	ldw	r2,8(fp)
8112b484:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
8112b488:	e0bff18b 	ldhu	r2,-58(fp)
8112b48c:	00008806 	br	8112b6b0 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
8112b490:	d0a08c17 	ldw	r2,-32208(gp)
8112b494:	d0e08c17 	ldw	r3,-32208(gp)
8112b498:	19000c03 	ldbu	r4,48(r3)
8112b49c:	e0fff203 	ldbu	r3,-56(fp)
8112b4a0:	20c6b03a 	or	r3,r4,r3
8112b4a4:	1809883a 	mov	r4,r3
8112b4a8:	00ffe004 	movi	r3,-128
8112b4ac:	20c6b03a 	or	r3,r4,r3
8112b4b0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b4b4:	d0a08c17 	ldw	r2,-32208(gp)
8112b4b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
8112b4bc:	d0a08c17 	ldw	r2,-32208(gp)
8112b4c0:	e0ffff0b 	ldhu	r3,-4(fp)
8112b4c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
8112b4c8:	e13ffc17 	ldw	r4,-16(fp)
8112b4cc:	112c0540 	call	8112c054 <OS_EventTaskWaitMulti>
8112b4d0:	e0bff317 	ldw	r2,-52(fp)
8112b4d4:	e0bff915 	stw	r2,-28(fp)
8112b4d8:	e0bff917 	ldw	r2,-28(fp)
8112b4dc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
8112b4e0:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b4e4:	0005303a 	rdctl	r2,status
8112b4e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b4ec:	e0fff717 	ldw	r3,-36(fp)
8112b4f0:	00bfff84 	movi	r2,-2
8112b4f4:	1884703a 	and	r2,r3,r2
8112b4f8:	1001703a 	wrctl	status,r2
  
  return context;
8112b4fc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
8112b500:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
8112b504:	d0a08c17 	ldw	r2,-32208(gp)
8112b508:	10800c43 	ldbu	r2,49(r2)
8112b50c:	10803fcc 	andi	r2,r2,255
8112b510:	10000226 	beq	r2,zero,8112b51c <OSEventPendMulti+0x470>
8112b514:	108000a0 	cmpeqi	r2,r2,2
8112b518:	10001826 	beq	r2,zero,8112b57c <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
8112b51c:	d0a08c17 	ldw	r2,-32208(gp)
8112b520:	10800717 	ldw	r2,28(r2)
8112b524:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
8112b528:	e0bff017 	ldw	r2,-64(fp)
8112b52c:	10000b26 	beq	r2,zero,8112b55c <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
8112b530:	e0bffd17 	ldw	r2,-12(fp)
8112b534:	10c00104 	addi	r3,r2,4
8112b538:	e0fffd15 	stw	r3,-12(fp)
8112b53c:	e0fff017 	ldw	r3,-64(fp)
8112b540:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
8112b544:	e0bffd17 	ldw	r2,-12(fp)
8112b548:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
8112b54c:	e0bff18b 	ldhu	r2,-58(fp)
8112b550:	10800044 	addi	r2,r2,1
8112b554:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
8112b558:	00000d06 	br	8112b590 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
8112b55c:	d0a08c17 	ldw	r2,-32208(gp)
8112b560:	00c00044 	movi	r3,1
8112b564:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112b568:	d0a08c17 	ldw	r2,-32208(gp)
8112b56c:	e17ffc17 	ldw	r5,-16(fp)
8112b570:	1009883a 	mov	r4,r2
8112b574:	112c26c0 	call	8112c26c <OS_EventTaskRemoveMulti>
             }
			 break;
8112b578:	00000506 	br	8112b590 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112b57c:	d0a08c17 	ldw	r2,-32208(gp)
8112b580:	e17ffc17 	ldw	r5,-16(fp)
8112b584:	1009883a 	mov	r4,r2
8112b588:	112c26c0 	call	8112c26c <OS_EventTaskRemoveMulti>
             break;
8112b58c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
8112b590:	d0a08c17 	ldw	r2,-32208(gp)
8112b594:	10800c43 	ldbu	r2,49(r2)
8112b598:	10803fcc 	andi	r2,r2,255
8112b59c:	10000326 	beq	r2,zero,8112b5ac <OSEventPendMulti+0x500>
8112b5a0:	108000a0 	cmpeqi	r2,r2,2
8112b5a4:	1000231e 	bne	r2,zero,8112b634 <OSEventPendMulti+0x588>
8112b5a8:	00002a06 	br	8112b654 <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
8112b5ac:	e0bff017 	ldw	r2,-64(fp)
8112b5b0:	10800003 	ldbu	r2,0(r2)
8112b5b4:	10803fcc 	andi	r2,r2,255
8112b5b8:	0080100e 	bge	zero,r2,8112b5fc <OSEventPendMulti+0x550>
8112b5bc:	10c000d0 	cmplti	r3,r2,3
8112b5c0:	1800071e 	bne	r3,zero,8112b5e0 <OSEventPendMulti+0x534>
8112b5c4:	108000e0 	cmpeqi	r2,r2,3
8112b5c8:	10000c26 	beq	r2,zero,8112b5fc <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
8112b5cc:	e0bffe17 	ldw	r2,-8(fp)
8112b5d0:	10c00104 	addi	r3,r2,4
8112b5d4:	e0fffe15 	stw	r3,-8(fp)
8112b5d8:	10000015 	stw	zero,0(r2)
                      break;
8112b5dc:	00001206 	br	8112b628 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
8112b5e0:	e0bffe17 	ldw	r2,-8(fp)
8112b5e4:	10c00104 	addi	r3,r2,4
8112b5e8:	e0fffe15 	stw	r3,-8(fp)
8112b5ec:	d0e08c17 	ldw	r3,-32208(gp)
8112b5f0:	18c00917 	ldw	r3,36(r3)
8112b5f4:	10c00015 	stw	r3,0(r2)
                      break;
8112b5f8:	00000b06 	br	8112b628 <OSEventPendMulti+0x57c>
8112b5fc:	e0bff317 	ldw	r2,-52(fp)
8112b600:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b604:	e0bff817 	ldw	r2,-32(fp)
8112b608:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
8112b60c:	e0bffd17 	ldw	r2,-12(fp)
8112b610:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112b614:	e0800217 	ldw	r2,8(fp)
8112b618:	00c00044 	movi	r3,1
8112b61c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
8112b620:	e0bff18b 	ldhu	r2,-58(fp)
8112b624:	00002206 	br	8112b6b0 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
8112b628:	e0800217 	ldw	r2,8(fp)
8112b62c:	10000005 	stb	zero,0(r2)
             break;
8112b630:	00001006 	br	8112b674 <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
8112b634:	e0bffe17 	ldw	r2,-8(fp)
8112b638:	10c00104 	addi	r3,r2,4
8112b63c:	e0fffe15 	stw	r3,-8(fp)
8112b640:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
8112b644:	e0800217 	ldw	r2,8(fp)
8112b648:	00c00384 	movi	r3,14
8112b64c:	10c00005 	stb	r3,0(r2)
             break;
8112b650:	00000806 	br	8112b674 <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
8112b654:	e0bffe17 	ldw	r2,-8(fp)
8112b658:	10c00104 	addi	r3,r2,4
8112b65c:	e0fffe15 	stw	r3,-8(fp)
8112b660:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
8112b664:	e0800217 	ldw	r2,8(fp)
8112b668:	00c00284 	movi	r3,10
8112b66c:	10c00005 	stb	r3,0(r2)
             break;
8112b670:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
8112b674:	d0a08c17 	ldw	r2,-32208(gp)
8112b678:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
8112b67c:	d0a08c17 	ldw	r2,-32208(gp)
8112b680:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
8112b684:	d0a08c17 	ldw	r2,-32208(gp)
8112b688:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112b68c:	d0a08c17 	ldw	r2,-32208(gp)
8112b690:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
8112b694:	d0a08c17 	ldw	r2,-32208(gp)
8112b698:	10000915 	stw	zero,36(r2)
8112b69c:	e0bff317 	ldw	r2,-52(fp)
8112b6a0:	e0bffa15 	stw	r2,-24(fp)
8112b6a4:	e0bffa17 	ldw	r2,-24(fp)
8112b6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
8112b6ac:	e0bff18b 	ldhu	r2,-58(fp)
}
8112b6b0:	e037883a 	mov	sp,fp
8112b6b4:	dfc00117 	ldw	ra,4(sp)
8112b6b8:	df000017 	ldw	fp,0(sp)
8112b6bc:	dec00204 	addi	sp,sp,8
8112b6c0:	f800283a 	ret

8112b6c4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
8112b6c4:	defffe04 	addi	sp,sp,-8
8112b6c8:	de00012e 	bgeu	sp,et,8112b6d0 <OSInit+0xc>
8112b6cc:	003b68fa 	trap	3
8112b6d0:	dfc00115 	stw	ra,4(sp)
8112b6d4:	df000015 	stw	fp,0(sp)
8112b6d8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
8112b6dc:	113dc980 	call	8113dc98 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
8112b6e0:	112c4cc0 	call	8112c4cc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
8112b6e4:	112c51c0 	call	8112c51c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
8112b6e8:	112c6a00 	call	8112c6a0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
8112b6ec:	112c3e40 	call	8112c3e4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
8112b6f0:	112e6600 	call	8112e660 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
8112b6f4:	112efa80 	call	8112efa8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
8112b6f8:	11312780 	call	81131278 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
8112b6fc:	112c5900 	call	8112c590 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
8112b700:	112c6180 	call	8112c618 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
8112b704:	113461c0 	call	8113461c <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
8112b708:	113dcc40 	call	8113dcc4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
8112b70c:	112cf7c0 	call	8112cf7c <OSDebugInit>
#endif
}
8112b710:	0001883a 	nop
8112b714:	e037883a 	mov	sp,fp
8112b718:	dfc00117 	ldw	ra,4(sp)
8112b71c:	df000017 	ldw	fp,0(sp)
8112b720:	dec00204 	addi	sp,sp,8
8112b724:	f800283a 	ret

8112b728 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
8112b728:	deffff04 	addi	sp,sp,-4
8112b72c:	de00012e 	bgeu	sp,et,8112b734 <OSIntEnter+0xc>
8112b730:	003b68fa 	trap	3
8112b734:	df000015 	stw	fp,0(sp)
8112b738:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
8112b73c:	d0a07b03 	ldbu	r2,-32276(gp)
8112b740:	10803fcc 	andi	r2,r2,255
8112b744:	10800058 	cmpnei	r2,r2,1
8112b748:	1000071e 	bne	r2,zero,8112b768 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
8112b74c:	d0a08b03 	ldbu	r2,-32212(gp)
8112b750:	10803fcc 	andi	r2,r2,255
8112b754:	10803fe0 	cmpeqi	r2,r2,255
8112b758:	1000031e 	bne	r2,zero,8112b768 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
8112b75c:	d0a08b03 	ldbu	r2,-32212(gp)
8112b760:	10800044 	addi	r2,r2,1
8112b764:	d0a08b05 	stb	r2,-32212(gp)
        }
    }
}
8112b768:	0001883a 	nop
8112b76c:	e037883a 	mov	sp,fp
8112b770:	df000017 	ldw	fp,0(sp)
8112b774:	dec00104 	addi	sp,sp,4
8112b778:	f800283a 	ret

8112b77c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
8112b77c:	defffb04 	addi	sp,sp,-20
8112b780:	de00012e 	bgeu	sp,et,8112b788 <OSIntExit+0xc>
8112b784:	003b68fa 	trap	3
8112b788:	dfc00415 	stw	ra,16(sp)
8112b78c:	df000315 	stw	fp,12(sp)
8112b790:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b794:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
8112b798:	d0a07b03 	ldbu	r2,-32276(gp)
8112b79c:	10803fcc 	andi	r2,r2,255
8112b7a0:	10800058 	cmpnei	r2,r2,1
8112b7a4:	10002f1e 	bne	r2,zero,8112b864 <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b7a8:	0005303a 	rdctl	r2,status
8112b7ac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b7b0:	e0ffff17 	ldw	r3,-4(fp)
8112b7b4:	00bfff84 	movi	r2,-2
8112b7b8:	1884703a 	and	r2,r3,r2
8112b7bc:	1001703a 	wrctl	status,r2
  
  return context;
8112b7c0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112b7c4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
8112b7c8:	d0a08b03 	ldbu	r2,-32212(gp)
8112b7cc:	10803fcc 	andi	r2,r2,255
8112b7d0:	10000326 	beq	r2,zero,8112b7e0 <OSIntExit+0x64>
            OSIntNesting--;
8112b7d4:	d0a08b03 	ldbu	r2,-32212(gp)
8112b7d8:	10bfffc4 	addi	r2,r2,-1
8112b7dc:	d0a08b05 	stb	r2,-32212(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
8112b7e0:	d0a08b03 	ldbu	r2,-32212(gp)
8112b7e4:	10803fcc 	andi	r2,r2,255
8112b7e8:	10001a1e 	bne	r2,zero,8112b854 <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
8112b7ec:	d0a07903 	ldbu	r2,-32284(gp)
8112b7f0:	10803fcc 	andi	r2,r2,255
8112b7f4:	1000171e 	bne	r2,zero,8112b854 <OSIntExit+0xd8>
                OS_SchedNew();
8112b7f8:	112c9300 	call	8112c930 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
8112b7fc:	d0e07d83 	ldbu	r3,-32266(gp)
8112b800:	d0a07dc3 	ldbu	r2,-32265(gp)
8112b804:	18c03fcc 	andi	r3,r3,255
8112b808:	10803fcc 	andi	r2,r2,255
8112b80c:	18801126 	beq	r3,r2,8112b854 <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
8112b810:	d0a07d83 	ldbu	r2,-32266(gp)
8112b814:	10c03fcc 	andi	r3,r2,255
8112b818:	00a04574 	movhi	r2,33045
8112b81c:	109c6c04 	addi	r2,r2,29104
8112b820:	18c7883a 	add	r3,r3,r3
8112b824:	18c7883a 	add	r3,r3,r3
8112b828:	10c5883a 	add	r2,r2,r3
8112b82c:	10800017 	ldw	r2,0(r2)
8112b830:	d0a08615 	stw	r2,-32232(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112b834:	d0a08617 	ldw	r2,-32232(gp)
8112b838:	10c00e17 	ldw	r3,56(r2)
8112b83c:	18c00044 	addi	r3,r3,1
8112b840:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112b844:	d0a08017 	ldw	r2,-32256(gp)
8112b848:	10800044 	addi	r2,r2,1
8112b84c:	d0a08015 	stw	r2,-32256(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
8112b850:	113d9580 	call	8113d958 <OSCtxSw>
8112b854:	e0bffd17 	ldw	r2,-12(fp)
8112b858:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b85c:	e0bffe17 	ldw	r2,-8(fp)
8112b860:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112b864:	0001883a 	nop
8112b868:	e037883a 	mov	sp,fp
8112b86c:	dfc00117 	ldw	ra,4(sp)
8112b870:	df000017 	ldw	fp,0(sp)
8112b874:	dec00204 	addi	sp,sp,8
8112b878:	f800283a 	ret

8112b87c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
8112b87c:	defffc04 	addi	sp,sp,-16
8112b880:	de00012e 	bgeu	sp,et,8112b888 <OSSchedLock+0xc>
8112b884:	003b68fa 	trap	3
8112b888:	df000315 	stw	fp,12(sp)
8112b88c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b890:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
8112b894:	d0a07b03 	ldbu	r2,-32276(gp)
8112b898:	10803fcc 	andi	r2,r2,255
8112b89c:	10800058 	cmpnei	r2,r2,1
8112b8a0:	1000161e 	bne	r2,zero,8112b8fc <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b8a4:	0005303a 	rdctl	r2,status
8112b8a8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b8ac:	e0ffff17 	ldw	r3,-4(fp)
8112b8b0:	00bfff84 	movi	r2,-2
8112b8b4:	1884703a 	and	r2,r3,r2
8112b8b8:	1001703a 	wrctl	status,r2
  
  return context;
8112b8bc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112b8c0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
8112b8c4:	d0a08b03 	ldbu	r2,-32212(gp)
8112b8c8:	10803fcc 	andi	r2,r2,255
8112b8cc:	1000071e 	bne	r2,zero,8112b8ec <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
8112b8d0:	d0a07903 	ldbu	r2,-32284(gp)
8112b8d4:	10803fcc 	andi	r2,r2,255
8112b8d8:	10803fe0 	cmpeqi	r2,r2,255
8112b8dc:	1000031e 	bne	r2,zero,8112b8ec <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
8112b8e0:	d0a07903 	ldbu	r2,-32284(gp)
8112b8e4:	10800044 	addi	r2,r2,1
8112b8e8:	d0a07905 	stb	r2,-32284(gp)
8112b8ec:	e0bffd17 	ldw	r2,-12(fp)
8112b8f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b8f4:	e0bffe17 	ldw	r2,-8(fp)
8112b8f8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112b8fc:	0001883a 	nop
8112b900:	e037883a 	mov	sp,fp
8112b904:	df000017 	ldw	fp,0(sp)
8112b908:	dec00104 	addi	sp,sp,4
8112b90c:	f800283a 	ret

8112b910 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
8112b910:	defff804 	addi	sp,sp,-32
8112b914:	de00012e 	bgeu	sp,et,8112b91c <OSSchedUnlock+0xc>
8112b918:	003b68fa 	trap	3
8112b91c:	dfc00715 	stw	ra,28(sp)
8112b920:	df000615 	stw	fp,24(sp)
8112b924:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b928:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8112b92c:	d0a07b03 	ldbu	r2,-32276(gp)
8112b930:	10803fcc 	andi	r2,r2,255
8112b934:	10800058 	cmpnei	r2,r2,1
8112b938:	1000281e 	bne	r2,zero,8112b9dc <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b93c:	0005303a 	rdctl	r2,status
8112b940:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b944:	e0ffff17 	ldw	r3,-4(fp)
8112b948:	00bfff84 	movi	r2,-2
8112b94c:	1884703a 	and	r2,r3,r2
8112b950:	1001703a 	wrctl	status,r2
  
  return context;
8112b954:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112b958:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
8112b95c:	d0a07903 	ldbu	r2,-32284(gp)
8112b960:	10803fcc 	andi	r2,r2,255
8112b964:	10001926 	beq	r2,zero,8112b9cc <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
8112b968:	d0a07903 	ldbu	r2,-32284(gp)
8112b96c:	10bfffc4 	addi	r2,r2,-1
8112b970:	d0a07905 	stb	r2,-32284(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
8112b974:	d0a07903 	ldbu	r2,-32284(gp)
8112b978:	10803fcc 	andi	r2,r2,255
8112b97c:	10000e1e 	bne	r2,zero,8112b9b8 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
8112b980:	d0a08b03 	ldbu	r2,-32212(gp)
8112b984:	10803fcc 	andi	r2,r2,255
8112b988:	1000061e 	bne	r2,zero,8112b9a4 <OSSchedUnlock+0x94>
8112b98c:	e0bffa17 	ldw	r2,-24(fp)
8112b990:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b994:	e0bffb17 	ldw	r2,-20(fp)
8112b998:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
8112b99c:	112c8580 	call	8112c858 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
8112b9a0:	00000e06 	br	8112b9dc <OSSchedUnlock+0xcc>
8112b9a4:	e0bffa17 	ldw	r2,-24(fp)
8112b9a8:	e0bffc15 	stw	r2,-16(fp)
8112b9ac:	e0bffc17 	ldw	r2,-16(fp)
8112b9b0:	1001703a 	wrctl	status,r2
8112b9b4:	00000906 	br	8112b9dc <OSSchedUnlock+0xcc>
8112b9b8:	e0bffa17 	ldw	r2,-24(fp)
8112b9bc:	e0bffd15 	stw	r2,-12(fp)
8112b9c0:	e0bffd17 	ldw	r2,-12(fp)
8112b9c4:	1001703a 	wrctl	status,r2
8112b9c8:	00000406 	br	8112b9dc <OSSchedUnlock+0xcc>
8112b9cc:	e0bffa17 	ldw	r2,-24(fp)
8112b9d0:	e0bffe15 	stw	r2,-8(fp)
8112b9d4:	e0bffe17 	ldw	r2,-8(fp)
8112b9d8:	1001703a 	wrctl	status,r2
8112b9dc:	0001883a 	nop
8112b9e0:	e037883a 	mov	sp,fp
8112b9e4:	dfc00117 	ldw	ra,4(sp)
8112b9e8:	df000017 	ldw	fp,0(sp)
8112b9ec:	dec00204 	addi	sp,sp,8
8112b9f0:	f800283a 	ret

8112b9f4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112b9f4:	defffe04 	addi	sp,sp,-8
8112b9f8:	de00012e 	bgeu	sp,et,8112ba00 <OSStart+0xc>
8112b9fc:	003b68fa 	trap	3
8112ba00:	dfc00115 	stw	ra,4(sp)
8112ba04:	df000015 	stw	fp,0(sp)
8112ba08:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112ba0c:	d0a07b03 	ldbu	r2,-32276(gp)
8112ba10:	10803fcc 	andi	r2,r2,255
8112ba14:	10000f1e 	bne	r2,zero,8112ba54 <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
8112ba18:	112c9300 	call	8112c930 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112ba1c:	d0a07d83 	ldbu	r2,-32266(gp)
8112ba20:	d0a07dc5 	stb	r2,-32265(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
8112ba24:	d0a07d83 	ldbu	r2,-32266(gp)
8112ba28:	10c03fcc 	andi	r3,r2,255
8112ba2c:	00a04574 	movhi	r2,33045
8112ba30:	109c6c04 	addi	r2,r2,29104
8112ba34:	18c7883a 	add	r3,r3,r3
8112ba38:	18c7883a 	add	r3,r3,r3
8112ba3c:	10c5883a 	add	r2,r2,r3
8112ba40:	10800017 	ldw	r2,0(r2)
8112ba44:	d0a08615 	stw	r2,-32232(gp)
        OSTCBCur      = OSTCBHighRdy;
8112ba48:	d0a08617 	ldw	r2,-32232(gp)
8112ba4c:	d0a08c15 	stw	r2,-32208(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
8112ba50:	113d9f40 	call	8113d9f4 <OSStartHighRdy>
    }
}
8112ba54:	0001883a 	nop
8112ba58:	e037883a 	mov	sp,fp
8112ba5c:	dfc00117 	ldw	ra,4(sp)
8112ba60:	df000017 	ldw	fp,0(sp)
8112ba64:	dec00204 	addi	sp,sp,8
8112ba68:	f800283a 	ret

8112ba6c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
8112ba6c:	defff904 	addi	sp,sp,-28
8112ba70:	de00012e 	bgeu	sp,et,8112ba78 <OSStatInit+0xc>
8112ba74:	003b68fa 	trap	3
8112ba78:	dfc00615 	stw	ra,24(sp)
8112ba7c:	df000515 	stw	fp,20(sp)
8112ba80:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ba84:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
8112ba88:	01000084 	movi	r4,2
8112ba8c:	11335940 	call	81133594 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ba90:	0005303a 	rdctl	r2,status
8112ba94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ba98:	e0fffc17 	ldw	r3,-16(fp)
8112ba9c:	00bfff84 	movi	r2,-2
8112baa0:	1884703a 	and	r2,r3,r2
8112baa4:	1001703a 	wrctl	status,r2
  
  return context;
8112baa8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
8112baac:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
8112bab0:	d0207c15 	stw	zero,-32272(gp)
8112bab4:	e0bffb17 	ldw	r2,-20(fp)
8112bab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112babc:	e0bffd17 	ldw	r2,-12(fp)
8112bac0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112bac4:	01001904 	movi	r4,100
8112bac8:	11335940 	call	81133594 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bacc:	0005303a 	rdctl	r2,status
8112bad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bad4:	e0fffe17 	ldw	r3,-8(fp)
8112bad8:	00bfff84 	movi	r2,-2
8112badc:	1884703a 	and	r2,r3,r2
8112bae0:	1001703a 	wrctl	status,r2
  
  return context;
8112bae4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
8112bae8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
8112baec:	d0a07c17 	ldw	r2,-32272(gp)
8112baf0:	d0a08215 	stw	r2,-32248(gp)
    OSStatRdy    = OS_TRUE;
8112baf4:	00800044 	movi	r2,1
8112baf8:	d0a09105 	stb	r2,-32188(gp)
8112bafc:	e0bffb17 	ldw	r2,-20(fp)
8112bb00:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb04:	e0bfff17 	ldw	r2,-4(fp)
8112bb08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112bb0c:	0001883a 	nop
8112bb10:	e037883a 	mov	sp,fp
8112bb14:	dfc00117 	ldw	ra,4(sp)
8112bb18:	df000017 	ldw	fp,0(sp)
8112bb1c:	dec00204 	addi	sp,sp,8
8112bb20:	f800283a 	ret

8112bb24 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
8112bb24:	defff704 	addi	sp,sp,-36
8112bb28:	de00012e 	bgeu	sp,et,8112bb30 <OSTimeTick+0xc>
8112bb2c:	003b68fa 	trap	3
8112bb30:	dfc00815 	stw	ra,32(sp)
8112bb34:	df000715 	stw	fp,28(sp)
8112bb38:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112bb3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
8112bb40:	113dc440 	call	8113dc44 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bb44:	0005303a 	rdctl	r2,status
8112bb48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bb4c:	e0fffd17 	ldw	r3,-12(fp)
8112bb50:	00bfff84 	movi	r2,-2
8112bb54:	1884703a 	and	r2,r3,r2
8112bb58:	1001703a 	wrctl	status,r2
  
  return context;
8112bb5c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
8112bb60:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
8112bb64:	d0a08e17 	ldw	r2,-32200(gp)
8112bb68:	10800044 	addi	r2,r2,1
8112bb6c:	d0a08e15 	stw	r2,-32200(gp)
8112bb70:	e0bffb17 	ldw	r2,-20(fp)
8112bb74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb78:	e0bfff17 	ldw	r2,-4(fp)
8112bb7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
8112bb80:	d0a07b03 	ldbu	r2,-32276(gp)
8112bb84:	10803fcc 	andi	r2,r2,255
8112bb88:	10800058 	cmpnei	r2,r2,1
8112bb8c:	10006a1e 	bne	r2,zero,8112bd38 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
8112bb90:	d0a07f03 	ldbu	r2,-32260(gp)
8112bb94:	10803fcc 	andi	r2,r2,255
8112bb98:	10c00060 	cmpeqi	r3,r2,1
8112bb9c:	1800061e 	bne	r3,zero,8112bbb8 <OSTimeTick+0x94>
8112bba0:	10c000a0 	cmpeqi	r3,r2,2
8112bba4:	1800061e 	bne	r3,zero,8112bbc0 <OSTimeTick+0x9c>
8112bba8:	10000a1e 	bne	r2,zero,8112bbd4 <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
8112bbac:	00800044 	movi	r2,1
8112bbb0:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112bbb4:	00000b06 	br	8112bbe4 <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
8112bbb8:	e03ffa05 	stb	zero,-24(fp)
                 break;
8112bbbc:	00000906 	br	8112bbe4 <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
8112bbc0:	00800044 	movi	r2,1
8112bbc4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
8112bbc8:	00800044 	movi	r2,1
8112bbcc:	d0a07f05 	stb	r2,-32260(gp)
                 break;
8112bbd0:	00000406 	br	8112bbe4 <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112bbd4:	00800044 	movi	r2,1
8112bbd8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112bbdc:	d0207f05 	stb	zero,-32260(gp)
                 break;
8112bbe0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112bbe4:	e0bffa03 	ldbu	r2,-24(fp)
8112bbe8:	10005226 	beq	r2,zero,8112bd34 <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112bbec:	d0a07e17 	ldw	r2,-32264(gp)
8112bbf0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112bbf4:	00004906 	br	8112bd1c <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bbf8:	0005303a 	rdctl	r2,status
8112bbfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bc00:	e0fffc17 	ldw	r3,-16(fp)
8112bc04:	00bfff84 	movi	r2,-2
8112bc08:	1884703a 	and	r2,r3,r2
8112bc0c:	1001703a 	wrctl	status,r2
  
  return context;
8112bc10:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
8112bc14:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
8112bc18:	e0bff917 	ldw	r2,-28(fp)
8112bc1c:	10800b8b 	ldhu	r2,46(r2)
8112bc20:	10bfffcc 	andi	r2,r2,65535
8112bc24:	10003626 	beq	r2,zero,8112bd00 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
8112bc28:	e0bff917 	ldw	r2,-28(fp)
8112bc2c:	10800b8b 	ldhu	r2,46(r2)
8112bc30:	10bfffc4 	addi	r2,r2,-1
8112bc34:	1007883a 	mov	r3,r2
8112bc38:	e0bff917 	ldw	r2,-28(fp)
8112bc3c:	10c00b8d 	sth	r3,46(r2)
8112bc40:	e0bff917 	ldw	r2,-28(fp)
8112bc44:	10800b8b 	ldhu	r2,46(r2)
8112bc48:	10bfffcc 	andi	r2,r2,65535
8112bc4c:	10002c1e 	bne	r2,zero,8112bd00 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112bc50:	e0bff917 	ldw	r2,-28(fp)
8112bc54:	10800c03 	ldbu	r2,48(r2)
8112bc58:	10803fcc 	andi	r2,r2,255
8112bc5c:	10800dcc 	andi	r2,r2,55
8112bc60:	10000b26 	beq	r2,zero,8112bc90 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
8112bc64:	e0bff917 	ldw	r2,-28(fp)
8112bc68:	10c00c03 	ldbu	r3,48(r2)
8112bc6c:	00bff204 	movi	r2,-56
8112bc70:	1884703a 	and	r2,r3,r2
8112bc74:	1007883a 	mov	r3,r2
8112bc78:	e0bff917 	ldw	r2,-28(fp)
8112bc7c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
8112bc80:	e0bff917 	ldw	r2,-28(fp)
8112bc84:	00c00044 	movi	r3,1
8112bc88:	10c00c45 	stb	r3,49(r2)
8112bc8c:	00000206 	br	8112bc98 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112bc90:	e0bff917 	ldw	r2,-28(fp)
8112bc94:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
8112bc98:	e0bff917 	ldw	r2,-28(fp)
8112bc9c:	10800c03 	ldbu	r2,48(r2)
8112bca0:	10803fcc 	andi	r2,r2,255
8112bca4:	1080020c 	andi	r2,r2,8
8112bca8:	1000151e 	bne	r2,zero,8112bd00 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
8112bcac:	e0bff917 	ldw	r2,-28(fp)
8112bcb0:	10c00d83 	ldbu	r3,54(r2)
8112bcb4:	d0a08803 	ldbu	r2,-32224(gp)
8112bcb8:	1884b03a 	or	r2,r3,r2
8112bcbc:	d0a08805 	stb	r2,-32224(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112bcc0:	e0bff917 	ldw	r2,-28(fp)
8112bcc4:	10800d03 	ldbu	r2,52(r2)
8112bcc8:	10c03fcc 	andi	r3,r2,255
8112bccc:	e0bff917 	ldw	r2,-28(fp)
8112bcd0:	10800d03 	ldbu	r2,52(r2)
8112bcd4:	11003fcc 	andi	r4,r2,255
8112bcd8:	d0a08844 	addi	r2,gp,-32223
8112bcdc:	2085883a 	add	r2,r4,r2
8112bce0:	11000003 	ldbu	r4,0(r2)
8112bce4:	e0bff917 	ldw	r2,-28(fp)
8112bce8:	10800d43 	ldbu	r2,53(r2)
8112bcec:	2084b03a 	or	r2,r4,r2
8112bcf0:	1009883a 	mov	r4,r2
8112bcf4:	d0a08844 	addi	r2,gp,-32223
8112bcf8:	1885883a 	add	r2,r3,r2
8112bcfc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
8112bd00:	e0bff917 	ldw	r2,-28(fp)
8112bd04:	10800517 	ldw	r2,20(r2)
8112bd08:	e0bff915 	stw	r2,-28(fp)
8112bd0c:	e0bffb17 	ldw	r2,-20(fp)
8112bd10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bd14:	e0bffe17 	ldw	r2,-8(fp)
8112bd18:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112bd1c:	e0bff917 	ldw	r2,-28(fp)
8112bd20:	10800c83 	ldbu	r2,50(r2)
8112bd24:	10803fcc 	andi	r2,r2,255
8112bd28:	10800a18 	cmpnei	r2,r2,40
8112bd2c:	103fb21e 	bne	r2,zero,8112bbf8 <__reset+0xfb10bbf8>
8112bd30:	00000106 	br	8112bd38 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
8112bd34:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
8112bd38:	e037883a 	mov	sp,fp
8112bd3c:	dfc00117 	ldw	ra,4(sp)
8112bd40:	df000017 	ldw	fp,0(sp)
8112bd44:	dec00204 	addi	sp,sp,8
8112bd48:	f800283a 	ret

8112bd4c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
8112bd4c:	deffff04 	addi	sp,sp,-4
8112bd50:	de00012e 	bgeu	sp,et,8112bd58 <OSVersion+0xc>
8112bd54:	003b68fa 	trap	3
8112bd58:	df000015 	stw	fp,0(sp)
8112bd5c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112bd60:	00804784 	movi	r2,286
}
8112bd64:	e037883a 	mov	sp,fp
8112bd68:	df000017 	ldw	fp,0(sp)
8112bd6c:	dec00104 	addi	sp,sp,4
8112bd70:	f800283a 	ret

8112bd74 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112bd74:	deffff04 	addi	sp,sp,-4
8112bd78:	de00012e 	bgeu	sp,et,8112bd80 <OS_Dummy+0xc>
8112bd7c:	003b68fa 	trap	3
8112bd80:	df000015 	stw	fp,0(sp)
8112bd84:	d839883a 	mov	fp,sp
}
8112bd88:	0001883a 	nop
8112bd8c:	e037883a 	mov	sp,fp
8112bd90:	df000017 	ldw	fp,0(sp)
8112bd94:	dec00104 	addi	sp,sp,4
8112bd98:	f800283a 	ret

8112bd9c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
8112bd9c:	defff804 	addi	sp,sp,-32
8112bda0:	de00012e 	bgeu	sp,et,8112bda8 <OS_EventTaskRdy+0xc>
8112bda4:	003b68fa 	trap	3
8112bda8:	dfc00715 	stw	ra,28(sp)
8112bdac:	df000615 	stw	fp,24(sp)
8112bdb0:	df000604 	addi	fp,sp,24
8112bdb4:	e13ffc15 	stw	r4,-16(fp)
8112bdb8:	e17ffd15 	stw	r5,-12(fp)
8112bdbc:	3007883a 	mov	r3,r6
8112bdc0:	3805883a 	mov	r2,r7
8112bdc4:	e0fffe05 	stb	r3,-8(fp)
8112bdc8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
8112bdcc:	e0bffc17 	ldw	r2,-16(fp)
8112bdd0:	10800283 	ldbu	r2,10(r2)
8112bdd4:	10c03fcc 	andi	r3,r2,255
8112bdd8:	00a04534 	movhi	r2,33044
8112bddc:	1088f404 	addi	r2,r2,9168
8112bde0:	10c5883a 	add	r2,r2,r3
8112bde4:	10800003 	ldbu	r2,0(r2)
8112bde8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
8112bdec:	e0bffa03 	ldbu	r2,-24(fp)
8112bdf0:	e0fffc17 	ldw	r3,-16(fp)
8112bdf4:	1885883a 	add	r2,r3,r2
8112bdf8:	108002c4 	addi	r2,r2,11
8112bdfc:	10800003 	ldbu	r2,0(r2)
8112be00:	10c03fcc 	andi	r3,r2,255
8112be04:	00a04534 	movhi	r2,33044
8112be08:	1088f404 	addi	r2,r2,9168
8112be0c:	10c5883a 	add	r2,r2,r3
8112be10:	10800003 	ldbu	r2,0(r2)
8112be14:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
8112be18:	e0bffa03 	ldbu	r2,-24(fp)
8112be1c:	100490fa 	slli	r2,r2,3
8112be20:	1007883a 	mov	r3,r2
8112be24:	e0bffa43 	ldbu	r2,-23(fp)
8112be28:	1885883a 	add	r2,r3,r2
8112be2c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112be30:	e0fffa83 	ldbu	r3,-22(fp)
8112be34:	00a04574 	movhi	r2,33045
8112be38:	109c6c04 	addi	r2,r2,29104
8112be3c:	18c7883a 	add	r3,r3,r3
8112be40:	18c7883a 	add	r3,r3,r3
8112be44:	10c5883a 	add	r2,r2,r3
8112be48:	10800017 	ldw	r2,0(r2)
8112be4c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112be50:	e0bffb17 	ldw	r2,-20(fp)
8112be54:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
8112be58:	e0bffb17 	ldw	r2,-20(fp)
8112be5c:	e0fffd17 	ldw	r3,-12(fp)
8112be60:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112be64:	e0bffb17 	ldw	r2,-20(fp)
8112be68:	10800c03 	ldbu	r2,48(r2)
8112be6c:	1007883a 	mov	r3,r2
8112be70:	e0bffe03 	ldbu	r2,-8(fp)
8112be74:	0084303a 	nor	r2,zero,r2
8112be78:	1884703a 	and	r2,r3,r2
8112be7c:	1007883a 	mov	r3,r2
8112be80:	e0bffb17 	ldw	r2,-20(fp)
8112be84:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
8112be88:	e0bffb17 	ldw	r2,-20(fp)
8112be8c:	e0ffff03 	ldbu	r3,-4(fp)
8112be90:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112be94:	e0bffb17 	ldw	r2,-20(fp)
8112be98:	10800c03 	ldbu	r2,48(r2)
8112be9c:	10803fcc 	andi	r2,r2,255
8112bea0:	1080020c 	andi	r2,r2,8
8112bea4:	1000111e 	bne	r2,zero,8112beec <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
8112bea8:	e0bffb17 	ldw	r2,-20(fp)
8112beac:	10c00d83 	ldbu	r3,54(r2)
8112beb0:	d0a08803 	ldbu	r2,-32224(gp)
8112beb4:	1884b03a 	or	r2,r3,r2
8112beb8:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
8112bebc:	e0fffa03 	ldbu	r3,-24(fp)
8112bec0:	e13ffa03 	ldbu	r4,-24(fp)
8112bec4:	d0a08844 	addi	r2,gp,-32223
8112bec8:	2085883a 	add	r2,r4,r2
8112becc:	11000003 	ldbu	r4,0(r2)
8112bed0:	e0bffb17 	ldw	r2,-20(fp)
8112bed4:	10800d43 	ldbu	r2,53(r2)
8112bed8:	2084b03a 	or	r2,r4,r2
8112bedc:	1009883a 	mov	r4,r2
8112bee0:	d0a08844 	addi	r2,gp,-32223
8112bee4:	1885883a 	add	r2,r3,r2
8112bee8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
8112beec:	e17ffc17 	ldw	r5,-16(fp)
8112bef0:	e13ffb17 	ldw	r4,-20(fp)
8112bef4:	112c1ac0 	call	8112c1ac <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
8112bef8:	e0bffb17 	ldw	r2,-20(fp)
8112befc:	10800817 	ldw	r2,32(r2)
8112bf00:	10000826 	beq	r2,zero,8112bf24 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112bf04:	e0bffb17 	ldw	r2,-20(fp)
8112bf08:	10800817 	ldw	r2,32(r2)
8112bf0c:	100b883a 	mov	r5,r2
8112bf10:	e13ffb17 	ldw	r4,-20(fp)
8112bf14:	112c26c0 	call	8112c26c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
8112bf18:	e0bffb17 	ldw	r2,-20(fp)
8112bf1c:	e0fffc17 	ldw	r3,-16(fp)
8112bf20:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112bf24:	e0bffa83 	ldbu	r2,-22(fp)
}
8112bf28:	e037883a 	mov	sp,fp
8112bf2c:	dfc00117 	ldw	ra,4(sp)
8112bf30:	df000017 	ldw	fp,0(sp)
8112bf34:	dec00204 	addi	sp,sp,8
8112bf38:	f800283a 	ret

8112bf3c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
8112bf3c:	defffd04 	addi	sp,sp,-12
8112bf40:	de00012e 	bgeu	sp,et,8112bf48 <OS_EventTaskWait+0xc>
8112bf44:	003b68fa 	trap	3
8112bf48:	df000215 	stw	fp,8(sp)
8112bf4c:	df000204 	addi	fp,sp,8
8112bf50:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112bf54:	d0a08c17 	ldw	r2,-32208(gp)
8112bf58:	e0ffff17 	ldw	r3,-4(fp)
8112bf5c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
8112bf60:	d0a08c17 	ldw	r2,-32208(gp)
8112bf64:	10800d03 	ldbu	r2,52(r2)
8112bf68:	10803fcc 	andi	r2,r2,255
8112bf6c:	d0e08c17 	ldw	r3,-32208(gp)
8112bf70:	18c00d03 	ldbu	r3,52(r3)
8112bf74:	18c03fcc 	andi	r3,r3,255
8112bf78:	e13fff17 	ldw	r4,-4(fp)
8112bf7c:	20c7883a 	add	r3,r4,r3
8112bf80:	18c002c4 	addi	r3,r3,11
8112bf84:	19000003 	ldbu	r4,0(r3)
8112bf88:	d0e08c17 	ldw	r3,-32208(gp)
8112bf8c:	18c00d43 	ldbu	r3,53(r3)
8112bf90:	20c6b03a 	or	r3,r4,r3
8112bf94:	1809883a 	mov	r4,r3
8112bf98:	e0ffff17 	ldw	r3,-4(fp)
8112bf9c:	1885883a 	add	r2,r3,r2
8112bfa0:	108002c4 	addi	r2,r2,11
8112bfa4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112bfa8:	e0bfff17 	ldw	r2,-4(fp)
8112bfac:	10c00283 	ldbu	r3,10(r2)
8112bfb0:	d0a08c17 	ldw	r2,-32208(gp)
8112bfb4:	10800d83 	ldbu	r2,54(r2)
8112bfb8:	1884b03a 	or	r2,r3,r2
8112bfbc:	1007883a 	mov	r3,r2
8112bfc0:	e0bfff17 	ldw	r2,-4(fp)
8112bfc4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112bfc8:	d0a08c17 	ldw	r2,-32208(gp)
8112bfcc:	10800d03 	ldbu	r2,52(r2)
8112bfd0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112bfd4:	e0fffe03 	ldbu	r3,-8(fp)
8112bfd8:	e13ffe03 	ldbu	r4,-8(fp)
8112bfdc:	d0a08844 	addi	r2,gp,-32223
8112bfe0:	2085883a 	add	r2,r4,r2
8112bfe4:	10800003 	ldbu	r2,0(r2)
8112bfe8:	1009883a 	mov	r4,r2
8112bfec:	d0a08c17 	ldw	r2,-32208(gp)
8112bff0:	10800d43 	ldbu	r2,53(r2)
8112bff4:	0084303a 	nor	r2,zero,r2
8112bff8:	2084703a 	and	r2,r4,r2
8112bffc:	1009883a 	mov	r4,r2
8112c000:	d0a08844 	addi	r2,gp,-32223
8112c004:	1885883a 	add	r2,r3,r2
8112c008:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112c00c:	e0fffe03 	ldbu	r3,-8(fp)
8112c010:	d0a08844 	addi	r2,gp,-32223
8112c014:	1885883a 	add	r2,r3,r2
8112c018:	10800003 	ldbu	r2,0(r2)
8112c01c:	10803fcc 	andi	r2,r2,255
8112c020:	1000071e 	bne	r2,zero,8112c040 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112c024:	d0a08c17 	ldw	r2,-32208(gp)
8112c028:	10800d83 	ldbu	r2,54(r2)
8112c02c:	0084303a 	nor	r2,zero,r2
8112c030:	1007883a 	mov	r3,r2
8112c034:	d0a08803 	ldbu	r2,-32224(gp)
8112c038:	1884703a 	and	r2,r3,r2
8112c03c:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112c040:	0001883a 	nop
8112c044:	e037883a 	mov	sp,fp
8112c048:	df000017 	ldw	fp,0(sp)
8112c04c:	dec00104 	addi	sp,sp,4
8112c050:	f800283a 	ret

8112c054 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112c054:	defffb04 	addi	sp,sp,-20
8112c058:	de00012e 	bgeu	sp,et,8112c060 <OS_EventTaskWaitMulti+0xc>
8112c05c:	003b68fa 	trap	3
8112c060:	df000415 	stw	fp,16(sp)
8112c064:	df000404 	addi	fp,sp,16
8112c068:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
8112c06c:	d0a08c17 	ldw	r2,-32208(gp)
8112c070:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112c074:	d0a08c17 	ldw	r2,-32208(gp)
8112c078:	e0ffff17 	ldw	r3,-4(fp)
8112c07c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
8112c080:	e0bfff17 	ldw	r2,-4(fp)
8112c084:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
8112c088:	e0bffc17 	ldw	r2,-16(fp)
8112c08c:	10800017 	ldw	r2,0(r2)
8112c090:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112c094:	00002006 	br	8112c118 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
8112c098:	d0a08c17 	ldw	r2,-32208(gp)
8112c09c:	10800d03 	ldbu	r2,52(r2)
8112c0a0:	10803fcc 	andi	r2,r2,255
8112c0a4:	d0e08c17 	ldw	r3,-32208(gp)
8112c0a8:	18c00d03 	ldbu	r3,52(r3)
8112c0ac:	18c03fcc 	andi	r3,r3,255
8112c0b0:	e13ffd17 	ldw	r4,-12(fp)
8112c0b4:	20c7883a 	add	r3,r4,r3
8112c0b8:	18c002c4 	addi	r3,r3,11
8112c0bc:	19000003 	ldbu	r4,0(r3)
8112c0c0:	d0e08c17 	ldw	r3,-32208(gp)
8112c0c4:	18c00d43 	ldbu	r3,53(r3)
8112c0c8:	20c6b03a 	or	r3,r4,r3
8112c0cc:	1809883a 	mov	r4,r3
8112c0d0:	e0fffd17 	ldw	r3,-12(fp)
8112c0d4:	1885883a 	add	r2,r3,r2
8112c0d8:	108002c4 	addi	r2,r2,11
8112c0dc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112c0e0:	e0bffd17 	ldw	r2,-12(fp)
8112c0e4:	10c00283 	ldbu	r3,10(r2)
8112c0e8:	d0a08c17 	ldw	r2,-32208(gp)
8112c0ec:	10800d83 	ldbu	r2,54(r2)
8112c0f0:	1884b03a 	or	r2,r3,r2
8112c0f4:	1007883a 	mov	r3,r2
8112c0f8:	e0bffd17 	ldw	r2,-12(fp)
8112c0fc:	10c00285 	stb	r3,10(r2)
        pevents++;
8112c100:	e0bffc17 	ldw	r2,-16(fp)
8112c104:	10800104 	addi	r2,r2,4
8112c108:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
8112c10c:	e0bffc17 	ldw	r2,-16(fp)
8112c110:	10800017 	ldw	r2,0(r2)
8112c114:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112c118:	e0bffd17 	ldw	r2,-12(fp)
8112c11c:	103fde1e 	bne	r2,zero,8112c098 <__reset+0xfb10c098>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112c120:	d0a08c17 	ldw	r2,-32208(gp)
8112c124:	10800d03 	ldbu	r2,52(r2)
8112c128:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112c12c:	e0fffe03 	ldbu	r3,-8(fp)
8112c130:	e13ffe03 	ldbu	r4,-8(fp)
8112c134:	d0a08844 	addi	r2,gp,-32223
8112c138:	2085883a 	add	r2,r4,r2
8112c13c:	10800003 	ldbu	r2,0(r2)
8112c140:	1009883a 	mov	r4,r2
8112c144:	d0a08c17 	ldw	r2,-32208(gp)
8112c148:	10800d43 	ldbu	r2,53(r2)
8112c14c:	0084303a 	nor	r2,zero,r2
8112c150:	2084703a 	and	r2,r4,r2
8112c154:	1009883a 	mov	r4,r2
8112c158:	d0a08844 	addi	r2,gp,-32223
8112c15c:	1885883a 	add	r2,r3,r2
8112c160:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112c164:	e0fffe03 	ldbu	r3,-8(fp)
8112c168:	d0a08844 	addi	r2,gp,-32223
8112c16c:	1885883a 	add	r2,r3,r2
8112c170:	10800003 	ldbu	r2,0(r2)
8112c174:	10803fcc 	andi	r2,r2,255
8112c178:	1000071e 	bne	r2,zero,8112c198 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112c17c:	d0a08c17 	ldw	r2,-32208(gp)
8112c180:	10800d83 	ldbu	r2,54(r2)
8112c184:	0084303a 	nor	r2,zero,r2
8112c188:	1007883a 	mov	r3,r2
8112c18c:	d0a08803 	ldbu	r2,-32224(gp)
8112c190:	1884703a 	and	r2,r3,r2
8112c194:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112c198:	0001883a 	nop
8112c19c:	e037883a 	mov	sp,fp
8112c1a0:	df000017 	ldw	fp,0(sp)
8112c1a4:	dec00104 	addi	sp,sp,4
8112c1a8:	f800283a 	ret

8112c1ac <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8112c1ac:	defffc04 	addi	sp,sp,-16
8112c1b0:	de00012e 	bgeu	sp,et,8112c1b8 <OS_EventTaskRemove+0xc>
8112c1b4:	003b68fa 	trap	3
8112c1b8:	df000315 	stw	fp,12(sp)
8112c1bc:	df000304 	addi	fp,sp,12
8112c1c0:	e13ffe15 	stw	r4,-8(fp)
8112c1c4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
8112c1c8:	e0bffe17 	ldw	r2,-8(fp)
8112c1cc:	10800d03 	ldbu	r2,52(r2)
8112c1d0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112c1d4:	e0bffd03 	ldbu	r2,-12(fp)
8112c1d8:	e0fffd03 	ldbu	r3,-12(fp)
8112c1dc:	e13fff17 	ldw	r4,-4(fp)
8112c1e0:	20c7883a 	add	r3,r4,r3
8112c1e4:	18c002c4 	addi	r3,r3,11
8112c1e8:	18c00003 	ldbu	r3,0(r3)
8112c1ec:	1809883a 	mov	r4,r3
8112c1f0:	e0fffe17 	ldw	r3,-8(fp)
8112c1f4:	18c00d43 	ldbu	r3,53(r3)
8112c1f8:	00c6303a 	nor	r3,zero,r3
8112c1fc:	20c6703a 	and	r3,r4,r3
8112c200:	1809883a 	mov	r4,r3
8112c204:	e0ffff17 	ldw	r3,-4(fp)
8112c208:	1885883a 	add	r2,r3,r2
8112c20c:	108002c4 	addi	r2,r2,11
8112c210:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
8112c214:	e0bffd03 	ldbu	r2,-12(fp)
8112c218:	e0ffff17 	ldw	r3,-4(fp)
8112c21c:	1885883a 	add	r2,r3,r2
8112c220:	108002c4 	addi	r2,r2,11
8112c224:	10800003 	ldbu	r2,0(r2)
8112c228:	10803fcc 	andi	r2,r2,255
8112c22c:	10000a1e 	bne	r2,zero,8112c258 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
8112c230:	e0bfff17 	ldw	r2,-4(fp)
8112c234:	10800283 	ldbu	r2,10(r2)
8112c238:	1007883a 	mov	r3,r2
8112c23c:	e0bffe17 	ldw	r2,-8(fp)
8112c240:	10800d83 	ldbu	r2,54(r2)
8112c244:	0084303a 	nor	r2,zero,r2
8112c248:	1884703a 	and	r2,r3,r2
8112c24c:	1007883a 	mov	r3,r2
8112c250:	e0bfff17 	ldw	r2,-4(fp)
8112c254:	10c00285 	stb	r3,10(r2)
    }
}
8112c258:	0001883a 	nop
8112c25c:	e037883a 	mov	sp,fp
8112c260:	df000017 	ldw	fp,0(sp)
8112c264:	dec00104 	addi	sp,sp,4
8112c268:	f800283a 	ret

8112c26c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
8112c26c:	defffa04 	addi	sp,sp,-24
8112c270:	de00012e 	bgeu	sp,et,8112c278 <OS_EventTaskRemoveMulti+0xc>
8112c274:	003b68fa 	trap	3
8112c278:	df000515 	stw	fp,20(sp)
8112c27c:	df000504 	addi	fp,sp,20
8112c280:	e13ffe15 	stw	r4,-8(fp)
8112c284:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
8112c288:	e0bffe17 	ldw	r2,-8(fp)
8112c28c:	10800d03 	ldbu	r2,52(r2)
8112c290:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
8112c294:	e0bffe17 	ldw	r2,-8(fp)
8112c298:	10800d83 	ldbu	r2,54(r2)
8112c29c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
8112c2a0:	e0bffe17 	ldw	r2,-8(fp)
8112c2a4:	10800d43 	ldbu	r2,53(r2)
8112c2a8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
8112c2ac:	e0bfff17 	ldw	r2,-4(fp)
8112c2b0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
8112c2b4:	e0bffb17 	ldw	r2,-20(fp)
8112c2b8:	10800017 	ldw	r2,0(r2)
8112c2bc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112c2c0:	00002506 	br	8112c358 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
8112c2c4:	e0bffd03 	ldbu	r2,-12(fp)
8112c2c8:	e0fffd03 	ldbu	r3,-12(fp)
8112c2cc:	e13ffc17 	ldw	r4,-16(fp)
8112c2d0:	20c7883a 	add	r3,r4,r3
8112c2d4:	18c002c4 	addi	r3,r3,11
8112c2d8:	18c00003 	ldbu	r3,0(r3)
8112c2dc:	1809883a 	mov	r4,r3
8112c2e0:	e0fffd83 	ldbu	r3,-10(fp)
8112c2e4:	00c6303a 	nor	r3,zero,r3
8112c2e8:	20c6703a 	and	r3,r4,r3
8112c2ec:	1809883a 	mov	r4,r3
8112c2f0:	e0fffc17 	ldw	r3,-16(fp)
8112c2f4:	1885883a 	add	r2,r3,r2
8112c2f8:	108002c4 	addi	r2,r2,11
8112c2fc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
8112c300:	e0bffd03 	ldbu	r2,-12(fp)
8112c304:	e0fffc17 	ldw	r3,-16(fp)
8112c308:	1885883a 	add	r2,r3,r2
8112c30c:	108002c4 	addi	r2,r2,11
8112c310:	10800003 	ldbu	r2,0(r2)
8112c314:	10803fcc 	andi	r2,r2,255
8112c318:	1000091e 	bne	r2,zero,8112c340 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
8112c31c:	e0bffc17 	ldw	r2,-16(fp)
8112c320:	10800283 	ldbu	r2,10(r2)
8112c324:	1007883a 	mov	r3,r2
8112c328:	e0bffd43 	ldbu	r2,-11(fp)
8112c32c:	0084303a 	nor	r2,zero,r2
8112c330:	1884703a 	and	r2,r3,r2
8112c334:	1007883a 	mov	r3,r2
8112c338:	e0bffc17 	ldw	r2,-16(fp)
8112c33c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
8112c340:	e0bffb17 	ldw	r2,-20(fp)
8112c344:	10800104 	addi	r2,r2,4
8112c348:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
8112c34c:	e0bffb17 	ldw	r2,-20(fp)
8112c350:	10800017 	ldw	r2,0(r2)
8112c354:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112c358:	e0bffc17 	ldw	r2,-16(fp)
8112c35c:	103fd91e 	bne	r2,zero,8112c2c4 <__reset+0xfb10c2c4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
8112c360:	0001883a 	nop
8112c364:	e037883a 	mov	sp,fp
8112c368:	df000017 	ldw	fp,0(sp)
8112c36c:	dec00104 	addi	sp,sp,4
8112c370:	f800283a 	ret

8112c374 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
8112c374:	defffc04 	addi	sp,sp,-16
8112c378:	de00012e 	bgeu	sp,et,8112c380 <OS_EventWaitListInit+0xc>
8112c37c:	003b68fa 	trap	3
8112c380:	df000315 	stw	fp,12(sp)
8112c384:	df000304 	addi	fp,sp,12
8112c388:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
8112c38c:	e0bfff17 	ldw	r2,-4(fp)
8112c390:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8112c394:	e0bfff17 	ldw	r2,-4(fp)
8112c398:	108002c4 	addi	r2,r2,11
8112c39c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112c3a0:	e03ffe05 	stb	zero,-8(fp)
8112c3a4:	00000706 	br	8112c3c4 <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
8112c3a8:	e0bffd17 	ldw	r2,-12(fp)
8112c3ac:	10c00044 	addi	r3,r2,1
8112c3b0:	e0fffd15 	stw	r3,-12(fp)
8112c3b4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112c3b8:	e0bffe03 	ldbu	r2,-8(fp)
8112c3bc:	10800044 	addi	r2,r2,1
8112c3c0:	e0bffe05 	stb	r2,-8(fp)
8112c3c4:	e0bffe03 	ldbu	r2,-8(fp)
8112c3c8:	108001b0 	cmpltui	r2,r2,6
8112c3cc:	103ff61e 	bne	r2,zero,8112c3a8 <__reset+0xfb10c3a8>
        *ptbl++ = 0;
    }
}
8112c3d0:	0001883a 	nop
8112c3d4:	e037883a 	mov	sp,fp
8112c3d8:	df000017 	ldw	fp,0(sp)
8112c3dc:	dec00104 	addi	sp,sp,4
8112c3e0:	f800283a 	ret

8112c3e4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112c3e4:	defffb04 	addi	sp,sp,-20
8112c3e8:	de00012e 	bgeu	sp,et,8112c3f0 <OS_InitEventList+0xc>
8112c3ec:	003b68fa 	trap	3
8112c3f0:	dfc00415 	stw	ra,16(sp)
8112c3f4:	df000315 	stw	fp,12(sp)
8112c3f8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
8112c3fc:	01434004 	movi	r5,3328
8112c400:	01204574 	movhi	r4,33045
8112c404:	21159604 	addi	r4,r4,22104
8112c408:	112c78c0 	call	8112c78c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
8112c40c:	00a04574 	movhi	r2,33045
8112c410:	10959604 	addi	r2,r2,22104
8112c414:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
8112c418:	00a04574 	movhi	r2,33045
8112c41c:	1095a304 	addi	r2,r2,22156
8112c420:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112c424:	e03ffd0d 	sth	zero,-12(fp)
8112c428:	00001306 	br	8112c478 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112c42c:	e0bffe17 	ldw	r2,-8(fp)
8112c430:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
8112c434:	e0bffe17 	ldw	r2,-8(fp)
8112c438:	e0ffff17 	ldw	r3,-4(fp)
8112c43c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
8112c440:	e0bffe17 	ldw	r2,-8(fp)
8112c444:	00c00fc4 	movi	r3,63
8112c448:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
8112c44c:	e0bffe17 	ldw	r2,-8(fp)
8112c450:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
8112c454:	e0bffe17 	ldw	r2,-8(fp)
8112c458:	10800d04 	addi	r2,r2,52
8112c45c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
8112c460:	e0bfff17 	ldw	r2,-4(fp)
8112c464:	10800d04 	addi	r2,r2,52
8112c468:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112c46c:	e0bffd0b 	ldhu	r2,-12(fp)
8112c470:	10800044 	addi	r2,r2,1
8112c474:	e0bffd0d 	sth	r2,-12(fp)
8112c478:	e0bffd0b 	ldhu	r2,-12(fp)
8112c47c:	10800ff0 	cmpltui	r2,r2,63
8112c480:	103fea1e 	bne	r2,zero,8112c42c <__reset+0xfb10c42c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
8112c484:	e0bffe17 	ldw	r2,-8(fp)
8112c488:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
8112c48c:	e0bffe17 	ldw	r2,-8(fp)
8112c490:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
8112c494:	e0bffe17 	ldw	r2,-8(fp)
8112c498:	00c00fc4 	movi	r3,63
8112c49c:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
8112c4a0:	e0bffe17 	ldw	r2,-8(fp)
8112c4a4:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
8112c4a8:	00a04574 	movhi	r2,33045
8112c4ac:	10959604 	addi	r2,r2,22104
8112c4b0:	d0a08a15 	stw	r2,-32216(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
8112c4b4:	0001883a 	nop
8112c4b8:	e037883a 	mov	sp,fp
8112c4bc:	dfc00117 	ldw	ra,4(sp)
8112c4c0:	df000017 	ldw	fp,0(sp)
8112c4c4:	dec00204 	addi	sp,sp,8
8112c4c8:	f800283a 	ret

8112c4cc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
8112c4cc:	deffff04 	addi	sp,sp,-4
8112c4d0:	de00012e 	bgeu	sp,et,8112c4d8 <OS_InitMisc+0xc>
8112c4d4:	003b68fa 	trap	3
8112c4d8:	df000015 	stw	fp,0(sp)
8112c4dc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
8112c4e0:	d0208e15 	stw	zero,-32200(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
8112c4e4:	d0208b05 	stb	zero,-32212(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
8112c4e8:	d0207905 	stb	zero,-32284(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
8112c4ec:	d0208445 	stb	zero,-32239(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
8112c4f0:	d0207b05 	stb	zero,-32276(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
8112c4f4:	d0208015 	stw	zero,-32256(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
8112c4f8:	d0207c15 	stw	zero,-32272(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
8112c4fc:	d0209215 	stw	zero,-32184(gp)
    OSIdleCtrMax  = 0L;
8112c500:	d0208215 	stw	zero,-32248(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
8112c504:	d0209105 	stb	zero,-32188(gp)
#endif
}
8112c508:	0001883a 	nop
8112c50c:	e037883a 	mov	sp,fp
8112c510:	df000017 	ldw	fp,0(sp)
8112c514:	dec00104 	addi	sp,sp,4
8112c518:	f800283a 	ret

8112c51c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
8112c51c:	defffd04 	addi	sp,sp,-12
8112c520:	de00012e 	bgeu	sp,et,8112c528 <OS_InitRdyList+0xc>
8112c524:	003b68fa 	trap	3
8112c528:	df000215 	stw	fp,8(sp)
8112c52c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112c530:	d0208805 	stb	zero,-32224(gp)
    prdytbl       = &OSRdyTbl[0];
8112c534:	d0a08844 	addi	r2,gp,-32223
8112c538:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112c53c:	e03ffe05 	stb	zero,-8(fp)
8112c540:	00000706 	br	8112c560 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
8112c544:	e0bfff17 	ldw	r2,-4(fp)
8112c548:	10c00044 	addi	r3,r2,1
8112c54c:	e0ffff15 	stw	r3,-4(fp)
8112c550:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112c554:	e0bffe03 	ldbu	r2,-8(fp)
8112c558:	10800044 	addi	r2,r2,1
8112c55c:	e0bffe05 	stb	r2,-8(fp)
8112c560:	e0bffe03 	ldbu	r2,-8(fp)
8112c564:	108001b0 	cmpltui	r2,r2,6
8112c568:	103ff61e 	bne	r2,zero,8112c544 <__reset+0xfb10c544>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
8112c56c:	d0207dc5 	stb	zero,-32265(gp)
    OSPrioHighRdy = 0;
8112c570:	d0207d85 	stb	zero,-32266(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
8112c574:	d0208615 	stw	zero,-32232(gp)
    OSTCBCur      = (OS_TCB *)0;
8112c578:	d0208c15 	stw	zero,-32208(gp)
}
8112c57c:	0001883a 	nop
8112c580:	e037883a 	mov	sp,fp
8112c584:	df000017 	ldw	fp,0(sp)
8112c588:	dec00104 	addi	sp,sp,4
8112c58c:	f800283a 	ret

8112c590 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112c590:	defff804 	addi	sp,sp,-32
8112c594:	de00012e 	bgeu	sp,et,8112c59c <OS_InitTaskIdle+0xc>
8112c598:	003b68fa 	trap	3
8112c59c:	dfc00715 	stw	ra,28(sp)
8112c5a0:	df000615 	stw	fp,24(sp)
8112c5a4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
8112c5a8:	008000c4 	movi	r2,3
8112c5ac:	d8800415 	stw	r2,16(sp)
8112c5b0:	d8000315 	stw	zero,12(sp)
8112c5b4:	00808004 	movi	r2,512
8112c5b8:	d8800215 	stw	r2,8(sp)
8112c5bc:	00a04574 	movhi	r2,33045
8112c5c0:	10939604 	addi	r2,r2,20056
8112c5c4:	d8800115 	stw	r2,4(sp)
8112c5c8:	00bfffd4 	movui	r2,65535
8112c5cc:	d8800015 	stw	r2,0(sp)
8112c5d0:	01c00a04 	movi	r7,40
8112c5d4:	01a04574 	movhi	r6,33045
8112c5d8:	31959504 	addi	r6,r6,22100
8112c5dc:	000b883a 	mov	r5,zero
8112c5e0:	012044f4 	movhi	r4,33043
8112c5e4:	2132a104 	addi	r4,r4,-13692
8112c5e8:	11324740 	call	81132474 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
8112c5ec:	e1bfff04 	addi	r6,fp,-4
8112c5f0:	01604534 	movhi	r5,33044
8112c5f4:	29493404 	addi	r5,r5,9424
8112c5f8:	01000a04 	movi	r4,40
8112c5fc:	1132ca40 	call	81132ca4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
8112c600:	0001883a 	nop
8112c604:	e037883a 	mov	sp,fp
8112c608:	dfc00117 	ldw	ra,4(sp)
8112c60c:	df000017 	ldw	fp,0(sp)
8112c610:	dec00204 	addi	sp,sp,8
8112c614:	f800283a 	ret

8112c618 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
8112c618:	defff804 	addi	sp,sp,-32
8112c61c:	de00012e 	bgeu	sp,et,8112c624 <OS_InitTaskStat+0xc>
8112c620:	003b68fa 	trap	3
8112c624:	dfc00715 	stw	ra,28(sp)
8112c628:	df000615 	stw	fp,24(sp)
8112c62c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
8112c630:	008000c4 	movi	r2,3
8112c634:	d8800415 	stw	r2,16(sp)
8112c638:	d8000315 	stw	zero,12(sp)
8112c63c:	00808004 	movi	r2,512
8112c640:	d8800215 	stw	r2,8(sp)
8112c644:	00a04574 	movhi	r2,33045
8112c648:	10903604 	addi	r2,r2,16600
8112c64c:	d8800115 	stw	r2,4(sp)
8112c650:	00bfff94 	movui	r2,65534
8112c654:	d8800015 	stw	r2,0(sp)
8112c658:	01c009c4 	movi	r7,39
8112c65c:	01a04574 	movhi	r6,33045
8112c660:	31923504 	addi	r6,r6,18644
8112c664:	000b883a 	mov	r5,zero
8112c668:	012044f4 	movhi	r4,33043
8112c66c:	2132ba04 	addi	r4,r4,-13592
8112c670:	11324740 	call	81132474 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
8112c674:	e1bfff04 	addi	r6,fp,-4
8112c678:	01604534 	movhi	r5,33044
8112c67c:	29493804 	addi	r5,r5,9440
8112c680:	010009c4 	movi	r4,39
8112c684:	1132ca40 	call	81132ca4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
8112c688:	0001883a 	nop
8112c68c:	e037883a 	mov	sp,fp
8112c690:	dfc00117 	ldw	ra,4(sp)
8112c694:	df000017 	ldw	fp,0(sp)
8112c698:	dec00204 	addi	sp,sp,8
8112c69c:	f800283a 	ret

8112c6a0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
8112c6a0:	defffb04 	addi	sp,sp,-20
8112c6a4:	de00012e 	bgeu	sp,et,8112c6ac <OS_InitTCBList+0xc>
8112c6a8:	003b68fa 	trap	3
8112c6ac:	dfc00415 	stw	ra,16(sp)
8112c6b0:	df000315 	stw	fp,12(sp)
8112c6b4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8112c6b8:	01439604 	movi	r5,3672
8112c6bc:	01204574 	movhi	r4,33045
8112c6c0:	2118d604 	addi	r4,r4,25432
8112c6c4:	112c78c0 	call	8112c78c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8112c6c8:	01402904 	movi	r5,164
8112c6cc:	01204574 	movhi	r4,33045
8112c6d0:	211c6c04 	addi	r4,r4,29104
8112c6d4:	112c78c0 	call	8112c78c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
8112c6d8:	00a04574 	movhi	r2,33045
8112c6dc:	1098d604 	addi	r2,r2,25432
8112c6e0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112c6e4:	00a04574 	movhi	r2,33045
8112c6e8:	1098f104 	addi	r2,r2,25540
8112c6ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112c6f0:	e03ffd05 	stb	zero,-12(fp)
8112c6f4:	00001106 	br	8112c73c <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
8112c6f8:	e0bffe17 	ldw	r2,-8(fp)
8112c6fc:	e0ffff17 	ldw	r3,-4(fp)
8112c700:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112c704:	e0bffe17 	ldw	r2,-8(fp)
8112c708:	00c00fc4 	movi	r3,63
8112c70c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112c710:	e0bffe17 	ldw	r2,-8(fp)
8112c714:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
8112c718:	e0bffe17 	ldw	r2,-8(fp)
8112c71c:	10801b04 	addi	r2,r2,108
8112c720:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
8112c724:	e0bfff17 	ldw	r2,-4(fp)
8112c728:	10801b04 	addi	r2,r2,108
8112c72c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112c730:	e0bffd03 	ldbu	r2,-12(fp)
8112c734:	10800044 	addi	r2,r2,1
8112c738:	e0bffd05 	stb	r2,-12(fp)
8112c73c:	e0bffd03 	ldbu	r2,-12(fp)
8112c740:	10800870 	cmpltui	r2,r2,33
8112c744:	103fec1e 	bne	r2,zero,8112c6f8 <__reset+0xfb10c6f8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
8112c748:	e0bffe17 	ldw	r2,-8(fp)
8112c74c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
8112c750:	e0bffe17 	ldw	r2,-8(fp)
8112c754:	00c00fc4 	movi	r3,63
8112c758:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112c75c:	e0bffe17 	ldw	r2,-8(fp)
8112c760:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8112c764:	d0207e15 	stw	zero,-32264(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
8112c768:	00a04574 	movhi	r2,33045
8112c76c:	1098d604 	addi	r2,r2,25432
8112c770:	d0a08315 	stw	r2,-32244(gp)
}
8112c774:	0001883a 	nop
8112c778:	e037883a 	mov	sp,fp
8112c77c:	dfc00117 	ldw	ra,4(sp)
8112c780:	df000017 	ldw	fp,0(sp)
8112c784:	dec00204 	addi	sp,sp,8
8112c788:	f800283a 	ret

8112c78c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
8112c78c:	defffd04 	addi	sp,sp,-12
8112c790:	de00012e 	bgeu	sp,et,8112c798 <OS_MemClr+0xc>
8112c794:	003b68fa 	trap	3
8112c798:	df000215 	stw	fp,8(sp)
8112c79c:	df000204 	addi	fp,sp,8
8112c7a0:	e13ffe15 	stw	r4,-8(fp)
8112c7a4:	2805883a 	mov	r2,r5
8112c7a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112c7ac:	00000706 	br	8112c7cc <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
8112c7b0:	e0bffe17 	ldw	r2,-8(fp)
8112c7b4:	10c00044 	addi	r3,r2,1
8112c7b8:	e0fffe15 	stw	r3,-8(fp)
8112c7bc:	10000005 	stb	zero,0(r2)
        size--;
8112c7c0:	e0bfff0b 	ldhu	r2,-4(fp)
8112c7c4:	10bfffc4 	addi	r2,r2,-1
8112c7c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
8112c7cc:	e0bfff0b 	ldhu	r2,-4(fp)
8112c7d0:	103ff71e 	bne	r2,zero,8112c7b0 <__reset+0xfb10c7b0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112c7d4:	0001883a 	nop
8112c7d8:	e037883a 	mov	sp,fp
8112c7dc:	df000017 	ldw	fp,0(sp)
8112c7e0:	dec00104 	addi	sp,sp,4
8112c7e4:	f800283a 	ret

8112c7e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
8112c7e8:	defffc04 	addi	sp,sp,-16
8112c7ec:	de00012e 	bgeu	sp,et,8112c7f4 <OS_MemCopy+0xc>
8112c7f0:	003b68fa 	trap	3
8112c7f4:	df000315 	stw	fp,12(sp)
8112c7f8:	df000304 	addi	fp,sp,12
8112c7fc:	e13ffd15 	stw	r4,-12(fp)
8112c800:	e17ffe15 	stw	r5,-8(fp)
8112c804:	3005883a 	mov	r2,r6
8112c808:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112c80c:	00000b06 	br	8112c83c <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
8112c810:	e0bffd17 	ldw	r2,-12(fp)
8112c814:	10c00044 	addi	r3,r2,1
8112c818:	e0fffd15 	stw	r3,-12(fp)
8112c81c:	e0fffe17 	ldw	r3,-8(fp)
8112c820:	19000044 	addi	r4,r3,1
8112c824:	e13ffe15 	stw	r4,-8(fp)
8112c828:	18c00003 	ldbu	r3,0(r3)
8112c82c:	10c00005 	stb	r3,0(r2)
        size--;
8112c830:	e0bfff0b 	ldhu	r2,-4(fp)
8112c834:	10bfffc4 	addi	r2,r2,-1
8112c838:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
8112c83c:	e0bfff0b 	ldhu	r2,-4(fp)
8112c840:	103ff31e 	bne	r2,zero,8112c810 <__reset+0xfb10c810>
        *pdest++ = *psrc++;
        size--;
    }
}
8112c844:	0001883a 	nop
8112c848:	e037883a 	mov	sp,fp
8112c84c:	df000017 	ldw	fp,0(sp)
8112c850:	dec00104 	addi	sp,sp,4
8112c854:	f800283a 	ret

8112c858 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
8112c858:	defffb04 	addi	sp,sp,-20
8112c85c:	de00012e 	bgeu	sp,et,8112c864 <OS_Sched+0xc>
8112c860:	003b68fa 	trap	3
8112c864:	dfc00415 	stw	ra,16(sp)
8112c868:	df000315 	stw	fp,12(sp)
8112c86c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112c870:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c874:	0005303a 	rdctl	r2,status
8112c878:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c87c:	e0ffff17 	ldw	r3,-4(fp)
8112c880:	00bfff84 	movi	r2,-2
8112c884:	1884703a 	and	r2,r3,r2
8112c888:	1001703a 	wrctl	status,r2
  
  return context;
8112c88c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112c890:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112c894:	d0a08b03 	ldbu	r2,-32212(gp)
8112c898:	10803fcc 	andi	r2,r2,255
8112c89c:	10001a1e 	bne	r2,zero,8112c908 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112c8a0:	d0a07903 	ldbu	r2,-32284(gp)
8112c8a4:	10803fcc 	andi	r2,r2,255
8112c8a8:	1000171e 	bne	r2,zero,8112c908 <OS_Sched+0xb0>
            OS_SchedNew();
8112c8ac:	112c9300 	call	8112c930 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112c8b0:	d0e07d83 	ldbu	r3,-32266(gp)
8112c8b4:	d0a07dc3 	ldbu	r2,-32265(gp)
8112c8b8:	18c03fcc 	andi	r3,r3,255
8112c8bc:	10803fcc 	andi	r2,r2,255
8112c8c0:	18801126 	beq	r3,r2,8112c908 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112c8c4:	d0a07d83 	ldbu	r2,-32266(gp)
8112c8c8:	10c03fcc 	andi	r3,r2,255
8112c8cc:	00a04574 	movhi	r2,33045
8112c8d0:	109c6c04 	addi	r2,r2,29104
8112c8d4:	18c7883a 	add	r3,r3,r3
8112c8d8:	18c7883a 	add	r3,r3,r3
8112c8dc:	10c5883a 	add	r2,r2,r3
8112c8e0:	10800017 	ldw	r2,0(r2)
8112c8e4:	d0a08615 	stw	r2,-32232(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
8112c8e8:	d0a08617 	ldw	r2,-32232(gp)
8112c8ec:	10c00e17 	ldw	r3,56(r2)
8112c8f0:	18c00044 	addi	r3,r3,1
8112c8f4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
8112c8f8:	d0a08017 	ldw	r2,-32256(gp)
8112c8fc:	10800044 	addi	r2,r2,1
8112c900:	d0a08015 	stw	r2,-32256(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112c904:	113d9580 	call	8113d958 <OSCtxSw>
8112c908:	e0bffd17 	ldw	r2,-12(fp)
8112c90c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c910:	e0bffe17 	ldw	r2,-8(fp)
8112c914:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
8112c918:	0001883a 	nop
8112c91c:	e037883a 	mov	sp,fp
8112c920:	dfc00117 	ldw	ra,4(sp)
8112c924:	df000017 	ldw	fp,0(sp)
8112c928:	dec00204 	addi	sp,sp,8
8112c92c:	f800283a 	ret

8112c930 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
8112c930:	defffe04 	addi	sp,sp,-8
8112c934:	de00012e 	bgeu	sp,et,8112c93c <OS_SchedNew+0xc>
8112c938:	003b68fa 	trap	3
8112c93c:	df000115 	stw	fp,4(sp)
8112c940:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
8112c944:	d0a08803 	ldbu	r2,-32224(gp)
8112c948:	10c03fcc 	andi	r3,r2,255
8112c94c:	00a04534 	movhi	r2,33044
8112c950:	1088f404 	addi	r2,r2,9168
8112c954:	10c5883a 	add	r2,r2,r3
8112c958:	10800003 	ldbu	r2,0(r2)
8112c95c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
8112c960:	e0bfff03 	ldbu	r2,-4(fp)
8112c964:	100490fa 	slli	r2,r2,3
8112c968:	1009883a 	mov	r4,r2
8112c96c:	e0ffff03 	ldbu	r3,-4(fp)
8112c970:	d0a08844 	addi	r2,gp,-32223
8112c974:	1885883a 	add	r2,r3,r2
8112c978:	10800003 	ldbu	r2,0(r2)
8112c97c:	10c03fcc 	andi	r3,r2,255
8112c980:	00a04534 	movhi	r2,33044
8112c984:	1088f404 	addi	r2,r2,9168
8112c988:	10c5883a 	add	r2,r2,r3
8112c98c:	10800003 	ldbu	r2,0(r2)
8112c990:	2085883a 	add	r2,r4,r2
8112c994:	d0a07d85 	stb	r2,-32266(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112c998:	0001883a 	nop
8112c99c:	e037883a 	mov	sp,fp
8112c9a0:	df000017 	ldw	fp,0(sp)
8112c9a4:	dec00104 	addi	sp,sp,4
8112c9a8:	f800283a 	ret

8112c9ac <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112c9ac:	defffc04 	addi	sp,sp,-16
8112c9b0:	de00012e 	bgeu	sp,et,8112c9b8 <OS_StrCopy+0xc>
8112c9b4:	003b68fa 	trap	3
8112c9b8:	df000315 	stw	fp,12(sp)
8112c9bc:	df000304 	addi	fp,sp,12
8112c9c0:	e13ffe15 	stw	r4,-8(fp)
8112c9c4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
8112c9c8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8112c9cc:	00000b06 	br	8112c9fc <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
8112c9d0:	e0bffe17 	ldw	r2,-8(fp)
8112c9d4:	10c00044 	addi	r3,r2,1
8112c9d8:	e0fffe15 	stw	r3,-8(fp)
8112c9dc:	e0ffff17 	ldw	r3,-4(fp)
8112c9e0:	19000044 	addi	r4,r3,1
8112c9e4:	e13fff15 	stw	r4,-4(fp)
8112c9e8:	18c00003 	ldbu	r3,0(r3)
8112c9ec:	10c00005 	stb	r3,0(r2)
        len++;
8112c9f0:	e0bffd03 	ldbu	r2,-12(fp)
8112c9f4:	10800044 	addi	r2,r2,1
8112c9f8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112c9fc:	e0bfff17 	ldw	r2,-4(fp)
8112ca00:	10800003 	ldbu	r2,0(r2)
8112ca04:	10803fcc 	andi	r2,r2,255
8112ca08:	103ff11e 	bne	r2,zero,8112c9d0 <__reset+0xfb10c9d0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8112ca0c:	e0bffe17 	ldw	r2,-8(fp)
8112ca10:	10000005 	stb	zero,0(r2)
    return (len);
8112ca14:	e0bffd03 	ldbu	r2,-12(fp)
}
8112ca18:	e037883a 	mov	sp,fp
8112ca1c:	df000017 	ldw	fp,0(sp)
8112ca20:	dec00104 	addi	sp,sp,4
8112ca24:	f800283a 	ret

8112ca28 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
8112ca28:	defffd04 	addi	sp,sp,-12
8112ca2c:	de00012e 	bgeu	sp,et,8112ca34 <OS_StrLen+0xc>
8112ca30:	003b68fa 	trap	3
8112ca34:	df000215 	stw	fp,8(sp)
8112ca38:	df000204 	addi	fp,sp,8
8112ca3c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
8112ca40:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
8112ca44:	00000606 	br	8112ca60 <OS_StrLen+0x38>
        psrc++;
8112ca48:	e0bfff17 	ldw	r2,-4(fp)
8112ca4c:	10800044 	addi	r2,r2,1
8112ca50:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112ca54:	e0bffe03 	ldbu	r2,-8(fp)
8112ca58:	10800044 	addi	r2,r2,1
8112ca5c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112ca60:	e0bfff17 	ldw	r2,-4(fp)
8112ca64:	10800003 	ldbu	r2,0(r2)
8112ca68:	10803fcc 	andi	r2,r2,255
8112ca6c:	103ff61e 	bne	r2,zero,8112ca48 <__reset+0xfb10ca48>
        psrc++;
        len++;
    }
    return (len);
8112ca70:	e0bffe03 	ldbu	r2,-8(fp)
}
8112ca74:	e037883a 	mov	sp,fp
8112ca78:	df000017 	ldw	fp,0(sp)
8112ca7c:	dec00104 	addi	sp,sp,4
8112ca80:	f800283a 	ret

8112ca84 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112ca84:	defffa04 	addi	sp,sp,-24
8112ca88:	de00012e 	bgeu	sp,et,8112ca90 <OS_TaskIdle+0xc>
8112ca8c:	003b68fa 	trap	3
8112ca90:	dfc00515 	stw	ra,20(sp)
8112ca94:	df000415 	stw	fp,16(sp)
8112ca98:	df000404 	addi	fp,sp,16
8112ca9c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112caa0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112caa4:	0005303a 	rdctl	r2,status
8112caa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112caac:	e0fffd17 	ldw	r3,-12(fp)
8112cab0:	00bfff84 	movi	r2,-2
8112cab4:	1884703a 	and	r2,r3,r2
8112cab8:	1001703a 	wrctl	status,r2
  
  return context;
8112cabc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112cac0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112cac4:	d0a07c17 	ldw	r2,-32272(gp)
8112cac8:	10800044 	addi	r2,r2,1
8112cacc:	d0a07c15 	stw	r2,-32272(gp)
8112cad0:	e0bffc17 	ldw	r2,-16(fp)
8112cad4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cad8:	e0bffe17 	ldw	r2,-8(fp)
8112cadc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112cae0:	113dcec0 	call	8113dcec <OSTaskIdleHook>
    }
8112cae4:	003fef06 	br	8112caa4 <__reset+0xfb10caa4>

8112cae8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112cae8:	defff804 	addi	sp,sp,-32
8112caec:	de00012e 	bgeu	sp,et,8112caf4 <OS_TaskStat+0xc>
8112caf0:	003b68fa 	trap	3
8112caf4:	dfc00715 	stw	ra,28(sp)
8112caf8:	df000615 	stw	fp,24(sp)
8112cafc:	dc400515 	stw	r17,20(sp)
8112cb00:	dc000415 	stw	r16,16(sp)
8112cb04:	df000604 	addi	fp,sp,24
8112cb08:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112cb0c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112cb10:	00000206 	br	8112cb1c <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112cb14:	01003204 	movi	r4,200
8112cb18:	11335940 	call	81133594 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112cb1c:	d0a09103 	ldbu	r2,-32188(gp)
8112cb20:	10803fcc 	andi	r2,r2,255
8112cb24:	103ffb26 	beq	r2,zero,8112cb14 <__reset+0xfb10cb14>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112cb28:	d0e08217 	ldw	r3,-32248(gp)
8112cb2c:	00947b34 	movhi	r2,20972
8112cb30:	10a147c4 	addi	r2,r2,-31457
8112cb34:	1888383a 	mulxuu	r4,r3,r2
8112cb38:	1885383a 	mul	r2,r3,r2
8112cb3c:	1021883a 	mov	r16,r2
8112cb40:	2023883a 	mov	r17,r4
8112cb44:	8804d17a 	srli	r2,r17,5
8112cb48:	d0a08215 	stw	r2,-32248(gp)
    if (OSIdleCtrMax == 0L) {
8112cb4c:	d0a08217 	ldw	r2,-32248(gp)
8112cb50:	1000031e 	bne	r2,zero,8112cb60 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112cb54:	d0208405 	stb	zero,-32240(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112cb58:	01003fc4 	movi	r4,255
8112cb5c:	11332040 	call	81133204 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cb60:	0005303a 	rdctl	r2,status
8112cb64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cb68:	e0fffb17 	ldw	r3,-20(fp)
8112cb6c:	00bfff84 	movi	r2,-2
8112cb70:	1884703a 	and	r2,r3,r2
8112cb74:	1001703a 	wrctl	status,r2
  
  return context;
8112cb78:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112cb7c:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112cb80:	d0a07c17 	ldw	r2,-32272(gp)
8112cb84:	d0a09215 	stw	r2,-32184(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112cb88:	d0207c15 	stw	zero,-32272(gp)
8112cb8c:	e0bffa17 	ldw	r2,-24(fp)
8112cb90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cb94:	e0bffc17 	ldw	r2,-16(fp)
8112cb98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112cb9c:	d0e09217 	ldw	r3,-32184(gp)
8112cba0:	d0a08217 	ldw	r2,-32248(gp)
8112cba4:	1885203a 	divu	r2,r3,r2
8112cba8:	1007883a 	mov	r3,r2
8112cbac:	00801904 	movi	r2,100
8112cbb0:	10c5c83a 	sub	r2,r2,r3
8112cbb4:	d0a08405 	stb	r2,-32240(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112cbb8:	113dc1c0 	call	8113dc1c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112cbbc:	112cbcc0 	call	8112cbcc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112cbc0:	01001904 	movi	r4,100
8112cbc4:	11335940 	call	81133594 <OSTimeDly>
    }
8112cbc8:	003fe506 	br	8112cb60 <__reset+0xfb10cb60>

8112cbcc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112cbcc:	defffa04 	addi	sp,sp,-24
8112cbd0:	de00012e 	bgeu	sp,et,8112cbd8 <OS_TaskStatStkChk+0xc>
8112cbd4:	003b68fa 	trap	3
8112cbd8:	dfc00515 	stw	ra,20(sp)
8112cbdc:	df000415 	stw	fp,16(sp)
8112cbe0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112cbe4:	e03ffc05 	stb	zero,-16(fp)
8112cbe8:	00002406 	br	8112cc7c <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112cbec:	e0bffc03 	ldbu	r2,-16(fp)
8112cbf0:	e0fffe04 	addi	r3,fp,-8
8112cbf4:	180b883a 	mov	r5,r3
8112cbf8:	1009883a 	mov	r4,r2
8112cbfc:	113303c0 	call	8113303c <OSTaskStkChk>
8112cc00:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112cc04:	e0bffc43 	ldbu	r2,-15(fp)
8112cc08:	1000191e 	bne	r2,zero,8112cc70 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112cc0c:	e0fffc03 	ldbu	r3,-16(fp)
8112cc10:	00a04574 	movhi	r2,33045
8112cc14:	109c6c04 	addi	r2,r2,29104
8112cc18:	18c7883a 	add	r3,r3,r3
8112cc1c:	18c7883a 	add	r3,r3,r3
8112cc20:	10c5883a 	add	r2,r2,r3
8112cc24:	10800017 	ldw	r2,0(r2)
8112cc28:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112cc2c:	e0bffd17 	ldw	r2,-12(fp)
8112cc30:	10000f26 	beq	r2,zero,8112cc70 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112cc34:	e0bffd17 	ldw	r2,-12(fp)
8112cc38:	10800060 	cmpeqi	r2,r2,1
8112cc3c:	10000c1e 	bne	r2,zero,8112cc70 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112cc40:	e0bffd17 	ldw	r2,-12(fp)
8112cc44:	10c00217 	ldw	r3,8(r2)
8112cc48:	e0bffd17 	ldw	r2,-12(fp)
8112cc4c:	10800317 	ldw	r2,12(r2)
8112cc50:	1085883a 	add	r2,r2,r2
8112cc54:	1085883a 	add	r2,r2,r2
8112cc58:	1887883a 	add	r3,r3,r2
8112cc5c:	e0bffd17 	ldw	r2,-12(fp)
8112cc60:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112cc64:	e0ffff17 	ldw	r3,-4(fp)
8112cc68:	e0bffd17 	ldw	r2,-12(fp)
8112cc6c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112cc70:	e0bffc03 	ldbu	r2,-16(fp)
8112cc74:	10800044 	addi	r2,r2,1
8112cc78:	e0bffc05 	stb	r2,-16(fp)
8112cc7c:	e0bffc03 	ldbu	r2,-16(fp)
8112cc80:	10800a70 	cmpltui	r2,r2,41
8112cc84:	103fd91e 	bne	r2,zero,8112cbec <__reset+0xfb10cbec>
#endif
                }
            }
        }
    }
}
8112cc88:	0001883a 	nop
8112cc8c:	e037883a 	mov	sp,fp
8112cc90:	dfc00117 	ldw	ra,4(sp)
8112cc94:	df000017 	ldw	fp,0(sp)
8112cc98:	dec00204 	addi	sp,sp,8
8112cc9c:	f800283a 	ret

8112cca0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112cca0:	defff204 	addi	sp,sp,-56
8112cca4:	de00012e 	bgeu	sp,et,8112ccac <OS_TCBInit+0xc>
8112cca8:	003b68fa 	trap	3
8112ccac:	dfc00d15 	stw	ra,52(sp)
8112ccb0:	df000c15 	stw	fp,48(sp)
8112ccb4:	df000c04 	addi	fp,sp,48
8112ccb8:	e17ffc15 	stw	r5,-16(fp)
8112ccbc:	e1bffd15 	stw	r6,-12(fp)
8112ccc0:	3807883a 	mov	r3,r7
8112ccc4:	e0800417 	ldw	r2,16(fp)
8112ccc8:	e13ffb05 	stb	r4,-20(fp)
8112cccc:	e0fffe0d 	sth	r3,-8(fp)
8112ccd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ccd4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ccd8:	0005303a 	rdctl	r2,status
8112ccdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cce0:	e0fffa17 	ldw	r3,-24(fp)
8112cce4:	00bfff84 	movi	r2,-2
8112cce8:	1884703a 	and	r2,r3,r2
8112ccec:	1001703a 	wrctl	status,r2
  
  return context;
8112ccf0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112ccf4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112ccf8:	d0a08317 	ldw	r2,-32244(gp)
8112ccfc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112cd00:	e0bff617 	ldw	r2,-40(fp)
8112cd04:	10009326 	beq	r2,zero,8112cf54 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112cd08:	e0bff617 	ldw	r2,-40(fp)
8112cd0c:	10800517 	ldw	r2,20(r2)
8112cd10:	d0a08315 	stw	r2,-32244(gp)
8112cd14:	e0bff417 	ldw	r2,-48(fp)
8112cd18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cd1c:	e0bff817 	ldw	r2,-32(fp)
8112cd20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112cd24:	e0bff617 	ldw	r2,-40(fp)
8112cd28:	e0fffc17 	ldw	r3,-16(fp)
8112cd2c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112cd30:	e0bff617 	ldw	r2,-40(fp)
8112cd34:	e0fffb03 	ldbu	r3,-20(fp)
8112cd38:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112cd3c:	e0bff617 	ldw	r2,-40(fp)
8112cd40:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112cd44:	e0bff617 	ldw	r2,-40(fp)
8112cd48:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112cd4c:	e0bff617 	ldw	r2,-40(fp)
8112cd50:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112cd54:	e0bff617 	ldw	r2,-40(fp)
8112cd58:	e0c00317 	ldw	r3,12(fp)
8112cd5c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112cd60:	e0bff617 	ldw	r2,-40(fp)
8112cd64:	e0c00217 	ldw	r3,8(fp)
8112cd68:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112cd6c:	e0bff617 	ldw	r2,-40(fp)
8112cd70:	e0fffd17 	ldw	r3,-12(fp)
8112cd74:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112cd78:	e0bff617 	ldw	r2,-40(fp)
8112cd7c:	e0ffff0b 	ldhu	r3,-4(fp)
8112cd80:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112cd84:	e0bff617 	ldw	r2,-40(fp)
8112cd88:	e0fffe0b 	ldhu	r3,-8(fp)
8112cd8c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112cd90:	e0bff617 	ldw	r2,-40(fp)
8112cd94:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112cd98:	e0bffb03 	ldbu	r2,-20(fp)
8112cd9c:	1004d0fa 	srli	r2,r2,3
8112cda0:	1007883a 	mov	r3,r2
8112cda4:	e0bff617 	ldw	r2,-40(fp)
8112cda8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112cdac:	e0bffb03 	ldbu	r2,-20(fp)
8112cdb0:	108001cc 	andi	r2,r2,7
8112cdb4:	1007883a 	mov	r3,r2
8112cdb8:	e0bff617 	ldw	r2,-40(fp)
8112cdbc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112cdc0:	e0bff617 	ldw	r2,-40(fp)
8112cdc4:	10800d03 	ldbu	r2,52(r2)
8112cdc8:	10803fcc 	andi	r2,r2,255
8112cdcc:	00c00044 	movi	r3,1
8112cdd0:	1884983a 	sll	r2,r3,r2
8112cdd4:	1007883a 	mov	r3,r2
8112cdd8:	e0bff617 	ldw	r2,-40(fp)
8112cddc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112cde0:	e0bff617 	ldw	r2,-40(fp)
8112cde4:	10800cc3 	ldbu	r2,51(r2)
8112cde8:	10803fcc 	andi	r2,r2,255
8112cdec:	00c00044 	movi	r3,1
8112cdf0:	1884983a 	sll	r2,r3,r2
8112cdf4:	1007883a 	mov	r3,r2
8112cdf8:	e0bff617 	ldw	r2,-40(fp)
8112cdfc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112ce00:	e0bff617 	ldw	r2,-40(fp)
8112ce04:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112ce08:	e0bff617 	ldw	r2,-40(fp)
8112ce0c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112ce10:	e0bff617 	ldw	r2,-40(fp)
8112ce14:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112ce18:	e0bff617 	ldw	r2,-40(fp)
8112ce1c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112ce20:	e0bff617 	ldw	r2,-40(fp)
8112ce24:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112ce28:	e0bff617 	ldw	r2,-40(fp)
8112ce2c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112ce30:	e0bff617 	ldw	r2,-40(fp)
8112ce34:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112ce38:	e0bff617 	ldw	r2,-40(fp)
8112ce3c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112ce40:	e0bff617 	ldw	r2,-40(fp)
8112ce44:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112ce48:	e0bff617 	ldw	r2,-40(fp)
8112ce4c:	00c00fc4 	movi	r3,63
8112ce50:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112ce54:	e0bff617 	ldw	r2,-40(fp)
8112ce58:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112ce5c:	e13ff617 	ldw	r4,-40(fp)
8112ce60:	113dd140 	call	8113dd14 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112ce64:	e13ff617 	ldw	r4,-40(fp)
8112ce68:	113db9c0 	call	8113db9c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ce6c:	0005303a 	rdctl	r2,status
8112ce70:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ce74:	e0fff517 	ldw	r3,-44(fp)
8112ce78:	00bfff84 	movi	r2,-2
8112ce7c:	1884703a 	and	r2,r3,r2
8112ce80:	1001703a 	wrctl	status,r2
  
  return context;
8112ce84:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112ce88:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112ce8c:	e0fffb03 	ldbu	r3,-20(fp)
8112ce90:	00a04574 	movhi	r2,33045
8112ce94:	109c6c04 	addi	r2,r2,29104
8112ce98:	18c7883a 	add	r3,r3,r3
8112ce9c:	18c7883a 	add	r3,r3,r3
8112cea0:	10c5883a 	add	r2,r2,r3
8112cea4:	e0fff617 	ldw	r3,-40(fp)
8112cea8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112ceac:	d0e07e17 	ldw	r3,-32264(gp)
8112ceb0:	e0bff617 	ldw	r2,-40(fp)
8112ceb4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112ceb8:	e0bff617 	ldw	r2,-40(fp)
8112cebc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112cec0:	d0a07e17 	ldw	r2,-32264(gp)
8112cec4:	10000326 	beq	r2,zero,8112ced4 <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112cec8:	d0a07e17 	ldw	r2,-32264(gp)
8112cecc:	e0fff617 	ldw	r3,-40(fp)
8112ced0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112ced4:	e0bff617 	ldw	r2,-40(fp)
8112ced8:	d0a07e15 	stw	r2,-32264(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112cedc:	e0bff617 	ldw	r2,-40(fp)
8112cee0:	10c00d83 	ldbu	r3,54(r2)
8112cee4:	d0a08803 	ldbu	r2,-32224(gp)
8112cee8:	1884b03a 	or	r2,r3,r2
8112ceec:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112cef0:	e0bff617 	ldw	r2,-40(fp)
8112cef4:	10800d03 	ldbu	r2,52(r2)
8112cef8:	10c03fcc 	andi	r3,r2,255
8112cefc:	e0bff617 	ldw	r2,-40(fp)
8112cf00:	10800d03 	ldbu	r2,52(r2)
8112cf04:	11003fcc 	andi	r4,r2,255
8112cf08:	d0a08844 	addi	r2,gp,-32223
8112cf0c:	2085883a 	add	r2,r4,r2
8112cf10:	11000003 	ldbu	r4,0(r2)
8112cf14:	e0bff617 	ldw	r2,-40(fp)
8112cf18:	10800d43 	ldbu	r2,53(r2)
8112cf1c:	2084b03a 	or	r2,r4,r2
8112cf20:	1009883a 	mov	r4,r2
8112cf24:	d0a08844 	addi	r2,gp,-32223
8112cf28:	1885883a 	add	r2,r3,r2
8112cf2c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112cf30:	d0a08443 	ldbu	r2,-32239(gp)
8112cf34:	10800044 	addi	r2,r2,1
8112cf38:	d0a08445 	stb	r2,-32239(gp)
8112cf3c:	e0bff417 	ldw	r2,-48(fp)
8112cf40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cf44:	e0bff717 	ldw	r2,-36(fp)
8112cf48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112cf4c:	0005883a 	mov	r2,zero
8112cf50:	00000506 	br	8112cf68 <OS_TCBInit+0x2c8>
8112cf54:	e0bff417 	ldw	r2,-48(fp)
8112cf58:	e0bff915 	stw	r2,-28(fp)
8112cf5c:	e0bff917 	ldw	r2,-28(fp)
8112cf60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112cf64:	00801084 	movi	r2,66
}
8112cf68:	e037883a 	mov	sp,fp
8112cf6c:	dfc00117 	ldw	ra,4(sp)
8112cf70:	df000017 	ldw	fp,0(sp)
8112cf74:	dec00204 	addi	sp,sp,8
8112cf78:	f800283a 	ret

8112cf7c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112cf7c:	defffe04 	addi	sp,sp,-8
8112cf80:	de00012e 	bgeu	sp,et,8112cf88 <OSDebugInit+0xc>
8112cf84:	003b68fa 	trap	3
8112cf88:	df000115 	stw	fp,4(sp)
8112cf8c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112cf90:	d0a01804 	addi	r2,gp,-32672
8112cf94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112cf98:	d0a01904 	addi	r2,gp,-32668
8112cf9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112cfa0:	d0a01a84 	addi	r2,gp,-32662
8112cfa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112cfa8:	d0a01b04 	addi	r2,gp,-32660
8112cfac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112cfb0:	d0a01a04 	addi	r2,gp,-32664
8112cfb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112cfb8:	d0a01b84 	addi	r2,gp,-32658
8112cfbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112cfc0:	d0a01c04 	addi	r2,gp,-32656
8112cfc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112cfc8:	d0a01c84 	addi	r2,gp,-32654
8112cfcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112cfd0:	d0a01d04 	addi	r2,gp,-32652
8112cfd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112cfd8:	d0a01d84 	addi	r2,gp,-32650
8112cfdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112cfe0:	d0a01e04 	addi	r2,gp,-32648
8112cfe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112cfe8:	d0a01e84 	addi	r2,gp,-32646
8112cfec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112cff0:	d0a01f04 	addi	r2,gp,-32644
8112cff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112cff8:	d0a01f84 	addi	r2,gp,-32642
8112cffc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112d000:	d0a02004 	addi	r2,gp,-32640
8112d004:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112d008:	d0a02084 	addi	r2,gp,-32638
8112d00c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112d010:	d0a02104 	addi	r2,gp,-32636
8112d014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112d018:	d0a02184 	addi	r2,gp,-32634
8112d01c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112d020:	d0a02204 	addi	r2,gp,-32632
8112d024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112d028:	d0a02284 	addi	r2,gp,-32630
8112d02c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112d030:	d0a02304 	addi	r2,gp,-32628
8112d034:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112d038:	d0a02384 	addi	r2,gp,-32626
8112d03c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112d040:	d0a02404 	addi	r2,gp,-32624
8112d044:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112d048:	d0a02484 	addi	r2,gp,-32622
8112d04c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112d050:	d0a02504 	addi	r2,gp,-32620
8112d054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112d058:	d0a02584 	addi	r2,gp,-32618
8112d05c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112d060:	d0a02604 	addi	r2,gp,-32616
8112d064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112d068:	d0a02684 	addi	r2,gp,-32614
8112d06c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112d070:	d0a02704 	addi	r2,gp,-32612
8112d074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112d078:	d0a02784 	addi	r2,gp,-32610
8112d07c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112d080:	d0a02804 	addi	r2,gp,-32608
8112d084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112d088:	d0a02884 	addi	r2,gp,-32606
8112d08c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112d090:	d0a02904 	addi	r2,gp,-32604
8112d094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112d098:	d0a02984 	addi	r2,gp,-32602
8112d09c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112d0a0:	d0a02a04 	addi	r2,gp,-32600
8112d0a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112d0a8:	d0a02a84 	addi	r2,gp,-32598
8112d0ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112d0b0:	d0a02b04 	addi	r2,gp,-32596
8112d0b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112d0b8:	d0a02b84 	addi	r2,gp,-32594
8112d0bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112d0c0:	d0a02c04 	addi	r2,gp,-32592
8112d0c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112d0c8:	d0a02c84 	addi	r2,gp,-32590
8112d0cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112d0d0:	d0a02d04 	addi	r2,gp,-32588
8112d0d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112d0d8:	d0a02d84 	addi	r2,gp,-32586
8112d0dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112d0e0:	d0a02e04 	addi	r2,gp,-32584
8112d0e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112d0e8:	d0a02e84 	addi	r2,gp,-32582
8112d0ec:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112d0f0:	00a04574 	movhi	r2,33045
8112d0f4:	108cc204 	addi	r2,r2,13064
8112d0f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112d0fc:	00a04574 	movhi	r2,33045
8112d100:	108b5e04 	addi	r2,r2,11640
8112d104:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112d108:	d0a02f84 	addi	r2,gp,-32578
8112d10c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112d110:	d0a03004 	addi	r2,gp,-32576
8112d114:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112d118:	d0a03084 	addi	r2,gp,-32574
8112d11c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112d120:	d0a03104 	addi	r2,gp,-32572
8112d124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112d128:	d0a03184 	addi	r2,gp,-32570
8112d12c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112d130:	d0a03204 	addi	r2,gp,-32568
8112d134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112d138:	d0a03284 	addi	r2,gp,-32566
8112d13c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112d140:	d0a03304 	addi	r2,gp,-32564
8112d144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112d148:	d0a03384 	addi	r2,gp,-32562
8112d14c:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112d150:	d0a02f04 	addi	r2,gp,-32580
8112d154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112d158:	d0a03404 	addi	r2,gp,-32560
8112d15c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112d160:	0001883a 	nop
8112d164:	e037883a 	mov	sp,fp
8112d168:	df000017 	ldw	fp,0(sp)
8112d16c:	dec00104 	addi	sp,sp,4
8112d170:	f800283a 	ret

8112d174 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112d174:	defff204 	addi	sp,sp,-56
8112d178:	de00012e 	bgeu	sp,et,8112d180 <OSFlagAccept+0xc>
8112d17c:	003b68fa 	trap	3
8112d180:	df000d15 	stw	fp,52(sp)
8112d184:	df000d04 	addi	fp,sp,52
8112d188:	e13ffc15 	stw	r4,-16(fp)
8112d18c:	2807883a 	mov	r3,r5
8112d190:	3005883a 	mov	r2,r6
8112d194:	e1ffff15 	stw	r7,-4(fp)
8112d198:	e0fffd0d 	sth	r3,-12(fp)
8112d19c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112d1a0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112d1a4:	e0bfff17 	ldw	r2,-4(fp)
8112d1a8:	1000021e 	bne	r2,zero,8112d1b4 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112d1ac:	0005883a 	mov	r2,zero
8112d1b0:	0000b006 	br	8112d474 <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112d1b4:	e0bffc17 	ldw	r2,-16(fp)
8112d1b8:	1000051e 	bne	r2,zero,8112d1d0 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112d1bc:	e0bfff17 	ldw	r2,-4(fp)
8112d1c0:	00c01b84 	movi	r3,110
8112d1c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112d1c8:	0005883a 	mov	r2,zero
8112d1cc:	0000a906 	br	8112d474 <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112d1d0:	e0bffc17 	ldw	r2,-16(fp)
8112d1d4:	10800003 	ldbu	r2,0(r2)
8112d1d8:	10803fcc 	andi	r2,r2,255
8112d1dc:	10800160 	cmpeqi	r2,r2,5
8112d1e0:	1000051e 	bne	r2,zero,8112d1f8 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112d1e4:	e0bfff17 	ldw	r2,-4(fp)
8112d1e8:	00c00044 	movi	r3,1
8112d1ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112d1f0:	0005883a 	mov	r2,zero
8112d1f4:	00009f06 	br	8112d474 <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112d1f8:	e0fffe03 	ldbu	r3,-8(fp)
8112d1fc:	00bfe004 	movi	r2,-128
8112d200:	1884703a 	and	r2,r3,r2
8112d204:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112d208:	e0bff503 	ldbu	r2,-44(fp)
8112d20c:	10000626 	beq	r2,zero,8112d228 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112d210:	e0bffe03 	ldbu	r2,-8(fp)
8112d214:	10801fcc 	andi	r2,r2,127
8112d218:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112d21c:	00800044 	movi	r2,1
8112d220:	e0bff385 	stb	r2,-50(fp)
8112d224:	00000106 	br	8112d22c <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112d228:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112d22c:	e0bfff17 	ldw	r2,-4(fp)
8112d230:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d234:	0005303a 	rdctl	r2,status
8112d238:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d23c:	e0fffb17 	ldw	r3,-20(fp)
8112d240:	00bfff84 	movi	r2,-2
8112d244:	1884703a 	and	r2,r3,r2
8112d248:	1001703a 	wrctl	status,r2
  
  return context;
8112d24c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112d250:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112d254:	e0bffe03 	ldbu	r2,-8(fp)
8112d258:	10c00060 	cmpeqi	r3,r2,1
8112d25c:	18005f1e 	bne	r3,zero,8112d3dc <OSFlagAccept+0x268>
8112d260:	10c00088 	cmpgei	r3,r2,2
8112d264:	1800021e 	bne	r3,zero,8112d270 <OSFlagAccept+0xfc>
8112d268:	10003f26 	beq	r2,zero,8112d368 <OSFlagAccept+0x1f4>
8112d26c:	00007706 	br	8112d44c <OSFlagAccept+0x2d8>
8112d270:	10c000a0 	cmpeqi	r3,r2,2
8112d274:	1800031e 	bne	r3,zero,8112d284 <OSFlagAccept+0x110>
8112d278:	108000e0 	cmpeqi	r2,r2,3
8112d27c:	10001e1e 	bne	r2,zero,8112d2f8 <OSFlagAccept+0x184>
8112d280:	00007206 	br	8112d44c <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112d284:	e0bffc17 	ldw	r2,-16(fp)
8112d288:	10c0020b 	ldhu	r3,8(r2)
8112d28c:	e0bffd0b 	ldhu	r2,-12(fp)
8112d290:	1884703a 	and	r2,r3,r2
8112d294:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112d298:	e0fff30b 	ldhu	r3,-52(fp)
8112d29c:	e0bffd0b 	ldhu	r2,-12(fp)
8112d2a0:	18800d1e 	bne	r3,r2,8112d2d8 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d2a4:	e0bff383 	ldbu	r2,-50(fp)
8112d2a8:	10800058 	cmpnei	r2,r2,1
8112d2ac:	10000d1e 	bne	r2,zero,8112d2e4 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112d2b0:	e0bffc17 	ldw	r2,-16(fp)
8112d2b4:	1080020b 	ldhu	r2,8(r2)
8112d2b8:	1007883a 	mov	r3,r2
8112d2bc:	e0bff30b 	ldhu	r2,-52(fp)
8112d2c0:	0084303a 	nor	r2,zero,r2
8112d2c4:	1884703a 	and	r2,r3,r2
8112d2c8:	1007883a 	mov	r3,r2
8112d2cc:	e0bffc17 	ldw	r2,-16(fp)
8112d2d0:	10c0020d 	sth	r3,8(r2)
8112d2d4:	00000306 	br	8112d2e4 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d2d8:	e0bfff17 	ldw	r2,-4(fp)
8112d2dc:	00c01c04 	movi	r3,112
8112d2e0:	10c00005 	stb	r3,0(r2)
8112d2e4:	e0bff417 	ldw	r2,-48(fp)
8112d2e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d2ec:	e0bff617 	ldw	r2,-40(fp)
8112d2f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d2f4:	00005e06 	br	8112d470 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112d2f8:	e0bffc17 	ldw	r2,-16(fp)
8112d2fc:	10c0020b 	ldhu	r3,8(r2)
8112d300:	e0bffd0b 	ldhu	r2,-12(fp)
8112d304:	1884703a 	and	r2,r3,r2
8112d308:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112d30c:	e0bff30b 	ldhu	r2,-52(fp)
8112d310:	10000d26 	beq	r2,zero,8112d348 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d314:	e0bff383 	ldbu	r2,-50(fp)
8112d318:	10800058 	cmpnei	r2,r2,1
8112d31c:	10000d1e 	bne	r2,zero,8112d354 <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112d320:	e0bffc17 	ldw	r2,-16(fp)
8112d324:	1080020b 	ldhu	r2,8(r2)
8112d328:	1007883a 	mov	r3,r2
8112d32c:	e0bff30b 	ldhu	r2,-52(fp)
8112d330:	0084303a 	nor	r2,zero,r2
8112d334:	1884703a 	and	r2,r3,r2
8112d338:	1007883a 	mov	r3,r2
8112d33c:	e0bffc17 	ldw	r2,-16(fp)
8112d340:	10c0020d 	sth	r3,8(r2)
8112d344:	00000306 	br	8112d354 <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d348:	e0bfff17 	ldw	r2,-4(fp)
8112d34c:	00c01c04 	movi	r3,112
8112d350:	10c00005 	stb	r3,0(r2)
8112d354:	e0bff417 	ldw	r2,-48(fp)
8112d358:	e0bff715 	stw	r2,-36(fp)
8112d35c:	e0bff717 	ldw	r2,-36(fp)
8112d360:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d364:	00004206 	br	8112d470 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112d368:	e0bffc17 	ldw	r2,-16(fp)
8112d36c:	1080020b 	ldhu	r2,8(r2)
8112d370:	0084303a 	nor	r2,zero,r2
8112d374:	1007883a 	mov	r3,r2
8112d378:	e0bffd0b 	ldhu	r2,-12(fp)
8112d37c:	1884703a 	and	r2,r3,r2
8112d380:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112d384:	e0fff30b 	ldhu	r3,-52(fp)
8112d388:	e0bffd0b 	ldhu	r2,-12(fp)
8112d38c:	18800b1e 	bne	r3,r2,8112d3bc <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d390:	e0bff383 	ldbu	r2,-50(fp)
8112d394:	10800058 	cmpnei	r2,r2,1
8112d398:	10000b1e 	bne	r2,zero,8112d3c8 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112d39c:	e0bffc17 	ldw	r2,-16(fp)
8112d3a0:	10c0020b 	ldhu	r3,8(r2)
8112d3a4:	e0bff30b 	ldhu	r2,-52(fp)
8112d3a8:	1884b03a 	or	r2,r3,r2
8112d3ac:	1007883a 	mov	r3,r2
8112d3b0:	e0bffc17 	ldw	r2,-16(fp)
8112d3b4:	10c0020d 	sth	r3,8(r2)
8112d3b8:	00000306 	br	8112d3c8 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d3bc:	e0bfff17 	ldw	r2,-4(fp)
8112d3c0:	00c01c04 	movi	r3,112
8112d3c4:	10c00005 	stb	r3,0(r2)
8112d3c8:	e0bff417 	ldw	r2,-48(fp)
8112d3cc:	e0bff815 	stw	r2,-32(fp)
8112d3d0:	e0bff817 	ldw	r2,-32(fp)
8112d3d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d3d8:	00002506 	br	8112d470 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112d3dc:	e0bffc17 	ldw	r2,-16(fp)
8112d3e0:	1080020b 	ldhu	r2,8(r2)
8112d3e4:	0084303a 	nor	r2,zero,r2
8112d3e8:	1007883a 	mov	r3,r2
8112d3ec:	e0bffd0b 	ldhu	r2,-12(fp)
8112d3f0:	1884703a 	and	r2,r3,r2
8112d3f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112d3f8:	e0bff30b 	ldhu	r2,-52(fp)
8112d3fc:	10000b26 	beq	r2,zero,8112d42c <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d400:	e0bff383 	ldbu	r2,-50(fp)
8112d404:	10800058 	cmpnei	r2,r2,1
8112d408:	10000b1e 	bne	r2,zero,8112d438 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112d40c:	e0bffc17 	ldw	r2,-16(fp)
8112d410:	10c0020b 	ldhu	r3,8(r2)
8112d414:	e0bff30b 	ldhu	r2,-52(fp)
8112d418:	1884b03a 	or	r2,r3,r2
8112d41c:	1007883a 	mov	r3,r2
8112d420:	e0bffc17 	ldw	r2,-16(fp)
8112d424:	10c0020d 	sth	r3,8(r2)
8112d428:	00000306 	br	8112d438 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d42c:	e0bfff17 	ldw	r2,-4(fp)
8112d430:	00c01c04 	movi	r3,112
8112d434:	10c00005 	stb	r3,0(r2)
8112d438:	e0bff417 	ldw	r2,-48(fp)
8112d43c:	e0bff915 	stw	r2,-28(fp)
8112d440:	e0bff917 	ldw	r2,-28(fp)
8112d444:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d448:	00000906 	br	8112d470 <OSFlagAccept+0x2fc>
8112d44c:	e0bff417 	ldw	r2,-48(fp)
8112d450:	e0bffa15 	stw	r2,-24(fp)
8112d454:	e0bffa17 	ldw	r2,-24(fp)
8112d458:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112d45c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112d460:	e0bfff17 	ldw	r2,-4(fp)
8112d464:	00c01bc4 	movi	r3,111
8112d468:	10c00005 	stb	r3,0(r2)
             break;
8112d46c:	0001883a 	nop
    }
    return (flags_rdy);
8112d470:	e0bff30b 	ldhu	r2,-52(fp)
}
8112d474:	e037883a 	mov	sp,fp
8112d478:	df000017 	ldw	fp,0(sp)
8112d47c:	dec00104 	addi	sp,sp,4
8112d480:	f800283a 	ret

8112d484 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112d484:	defff804 	addi	sp,sp,-32
8112d488:	de00012e 	bgeu	sp,et,8112d490 <OSFlagCreate+0xc>
8112d48c:	003b68fa 	trap	3
8112d490:	df000715 	stw	fp,28(sp)
8112d494:	df000704 	addi	fp,sp,28
8112d498:	2005883a 	mov	r2,r4
8112d49c:	e17fff15 	stw	r5,-4(fp)
8112d4a0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112d4a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112d4a8:	e0bfff17 	ldw	r2,-4(fp)
8112d4ac:	1000021e 	bne	r2,zero,8112d4b8 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112d4b0:	0005883a 	mov	r2,zero
8112d4b4:	00003306 	br	8112d584 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112d4b8:	d0a08b03 	ldbu	r2,-32212(gp)
8112d4bc:	10803fcc 	andi	r2,r2,255
8112d4c0:	10000526 	beq	r2,zero,8112d4d8 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112d4c4:	e0bfff17 	ldw	r2,-4(fp)
8112d4c8:	00c00404 	movi	r3,16
8112d4cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112d4d0:	0005883a 	mov	r2,zero
8112d4d4:	00002b06 	br	8112d584 <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d4d8:	0005303a 	rdctl	r2,status
8112d4dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d4e0:	e0fffd17 	ldw	r3,-12(fp)
8112d4e4:	00bfff84 	movi	r2,-2
8112d4e8:	1884703a 	and	r2,r3,r2
8112d4ec:	1001703a 	wrctl	status,r2
  
  return context;
8112d4f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d4f4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112d4f8:	d0a09017 	ldw	r2,-32192(gp)
8112d4fc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112d500:	e0bffb17 	ldw	r2,-20(fp)
8112d504:	10001726 	beq	r2,zero,8112d564 <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112d508:	d0a09017 	ldw	r2,-32192(gp)
8112d50c:	10800117 	ldw	r2,4(r2)
8112d510:	d0a09015 	stw	r2,-32192(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112d514:	e0bffb17 	ldw	r2,-20(fp)
8112d518:	00c00144 	movi	r3,5
8112d51c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112d520:	e0bffb17 	ldw	r2,-20(fp)
8112d524:	e0fffe0b 	ldhu	r3,-8(fp)
8112d528:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112d52c:	e0bffb17 	ldw	r2,-20(fp)
8112d530:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112d534:	e0bffb17 	ldw	r2,-20(fp)
8112d538:	00c00fc4 	movi	r3,63
8112d53c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112d540:	e0bffb17 	ldw	r2,-20(fp)
8112d544:	100002c5 	stb	zero,11(r2)
8112d548:	e0bff917 	ldw	r2,-28(fp)
8112d54c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d550:	e0bffa17 	ldw	r2,-24(fp)
8112d554:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112d558:	e0bfff17 	ldw	r2,-4(fp)
8112d55c:	10000005 	stb	zero,0(r2)
8112d560:	00000706 	br	8112d580 <OSFlagCreate+0xfc>
8112d564:	e0bff917 	ldw	r2,-28(fp)
8112d568:	e0bffc15 	stw	r2,-16(fp)
8112d56c:	e0bffc17 	ldw	r2,-16(fp)
8112d570:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112d574:	e0bfff17 	ldw	r2,-4(fp)
8112d578:	00c01c84 	movi	r3,114
8112d57c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112d580:	e0bffb17 	ldw	r2,-20(fp)
}
8112d584:	e037883a 	mov	sp,fp
8112d588:	df000017 	ldw	fp,0(sp)
8112d58c:	dec00104 	addi	sp,sp,4
8112d590:	f800283a 	ret

8112d594 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112d594:	defff204 	addi	sp,sp,-56
8112d598:	de00012e 	bgeu	sp,et,8112d5a0 <OSFlagDel+0xc>
8112d59c:	003b68fa 	trap	3
8112d5a0:	dfc00d15 	stw	ra,52(sp)
8112d5a4:	df000c15 	stw	fp,48(sp)
8112d5a8:	df000c04 	addi	fp,sp,48
8112d5ac:	e13ffd15 	stw	r4,-12(fp)
8112d5b0:	2805883a 	mov	r2,r5
8112d5b4:	e1bfff15 	stw	r6,-4(fp)
8112d5b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112d5bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112d5c0:	e0bfff17 	ldw	r2,-4(fp)
8112d5c4:	1000021e 	bne	r2,zero,8112d5d0 <OSFlagDel+0x3c>
        return (pgrp);
8112d5c8:	e0bffd17 	ldw	r2,-12(fp)
8112d5cc:	00008006 	br	8112d7d0 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112d5d0:	e0bffd17 	ldw	r2,-12(fp)
8112d5d4:	1000051e 	bne	r2,zero,8112d5ec <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112d5d8:	e0bfff17 	ldw	r2,-4(fp)
8112d5dc:	00c01b84 	movi	r3,110
8112d5e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112d5e4:	e0bffd17 	ldw	r2,-12(fp)
8112d5e8:	00007906 	br	8112d7d0 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112d5ec:	d0a08b03 	ldbu	r2,-32212(gp)
8112d5f0:	10803fcc 	andi	r2,r2,255
8112d5f4:	10000526 	beq	r2,zero,8112d60c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112d5f8:	e0bfff17 	ldw	r2,-4(fp)
8112d5fc:	00c003c4 	movi	r3,15
8112d600:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112d604:	e0bffd17 	ldw	r2,-12(fp)
8112d608:	00007106 	br	8112d7d0 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112d60c:	e0bffd17 	ldw	r2,-12(fp)
8112d610:	10800003 	ldbu	r2,0(r2)
8112d614:	10803fcc 	andi	r2,r2,255
8112d618:	10800160 	cmpeqi	r2,r2,5
8112d61c:	1000051e 	bne	r2,zero,8112d634 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112d620:	e0bfff17 	ldw	r2,-4(fp)
8112d624:	00c00044 	movi	r3,1
8112d628:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112d62c:	e0bffd17 	ldw	r2,-12(fp)
8112d630:	00006706 	br	8112d7d0 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d634:	0005303a 	rdctl	r2,status
8112d638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d63c:	e0fffc17 	ldw	r3,-16(fp)
8112d640:	00bfff84 	movi	r2,-2
8112d644:	1884703a 	and	r2,r3,r2
8112d648:	1001703a 	wrctl	status,r2
  
  return context;
8112d64c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d650:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112d654:	e0bffd17 	ldw	r2,-12(fp)
8112d658:	10800117 	ldw	r2,4(r2)
8112d65c:	10000326 	beq	r2,zero,8112d66c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112d660:	00800044 	movi	r2,1
8112d664:	e0bff405 	stb	r2,-48(fp)
8112d668:	00000106 	br	8112d670 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112d66c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112d670:	e0bffe03 	ldbu	r2,-8(fp)
8112d674:	10000326 	beq	r2,zero,8112d684 <OSFlagDel+0xf0>
8112d678:	10800060 	cmpeqi	r2,r2,1
8112d67c:	1000231e 	bne	r2,zero,8112d70c <OSFlagDel+0x178>
8112d680:	00004806 	br	8112d7a4 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112d684:	e0bff403 	ldbu	r2,-48(fp)
8112d688:	1000161e 	bne	r2,zero,8112d6e4 <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112d68c:	e0bffd17 	ldw	r2,-12(fp)
8112d690:	00c00fc4 	movi	r3,63
8112d694:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112d698:	e0bffd17 	ldw	r2,-12(fp)
8112d69c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112d6a0:	e0bffd17 	ldw	r2,-12(fp)
8112d6a4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112d6a8:	d0e09017 	ldw	r3,-32192(gp)
8112d6ac:	e0bffd17 	ldw	r2,-12(fp)
8112d6b0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112d6b4:	e0bffd17 	ldw	r2,-12(fp)
8112d6b8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112d6bc:	e0bffd17 	ldw	r2,-12(fp)
8112d6c0:	d0a09015 	stw	r2,-32192(gp)
8112d6c4:	e0bff717 	ldw	r2,-36(fp)
8112d6c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d6cc:	e0bff817 	ldw	r2,-32(fp)
8112d6d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112d6d4:	e0bfff17 	ldw	r2,-4(fp)
8112d6d8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112d6dc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112d6e0:	00003a06 	br	8112d7cc <OSFlagDel+0x238>
8112d6e4:	e0bff717 	ldw	r2,-36(fp)
8112d6e8:	e0bff915 	stw	r2,-28(fp)
8112d6ec:	e0bff917 	ldw	r2,-28(fp)
8112d6f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112d6f4:	e0bfff17 	ldw	r2,-4(fp)
8112d6f8:	00c01244 	movi	r3,73
8112d6fc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112d700:	e0bffd17 	ldw	r2,-12(fp)
8112d704:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112d708:	00003006 	br	8112d7cc <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112d70c:	e0bffd17 	ldw	r2,-12(fp)
8112d710:	10800117 	ldw	r2,4(r2)
8112d714:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112d718:	00000606 	br	8112d734 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112d71c:	000b883a 	mov	r5,zero
8112d720:	e13ff517 	ldw	r4,-44(fp)
8112d724:	112e7480 	call	8112e748 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112d728:	e0bff517 	ldw	r2,-44(fp)
8112d72c:	10800017 	ldw	r2,0(r2)
8112d730:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112d734:	e0bff517 	ldw	r2,-44(fp)
8112d738:	103ff81e 	bne	r2,zero,8112d71c <__reset+0xfb10d71c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112d73c:	e0bffd17 	ldw	r2,-12(fp)
8112d740:	00c00fc4 	movi	r3,63
8112d744:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112d748:	e0bffd17 	ldw	r2,-12(fp)
8112d74c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112d750:	e0bffd17 	ldw	r2,-12(fp)
8112d754:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112d758:	d0e09017 	ldw	r3,-32192(gp)
8112d75c:	e0bffd17 	ldw	r2,-12(fp)
8112d760:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112d764:	e0bffd17 	ldw	r2,-12(fp)
8112d768:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112d76c:	e0bffd17 	ldw	r2,-12(fp)
8112d770:	d0a09015 	stw	r2,-32192(gp)
8112d774:	e0bff717 	ldw	r2,-36(fp)
8112d778:	e0bffa15 	stw	r2,-24(fp)
8112d77c:	e0bffa17 	ldw	r2,-24(fp)
8112d780:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112d784:	e0bff403 	ldbu	r2,-48(fp)
8112d788:	10800058 	cmpnei	r2,r2,1
8112d78c:	1000011e 	bne	r2,zero,8112d794 <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112d790:	112c8580 	call	8112c858 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112d794:	e0bfff17 	ldw	r2,-4(fp)
8112d798:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112d79c:	e03ff615 	stw	zero,-40(fp)
             break;
8112d7a0:	00000a06 	br	8112d7cc <OSFlagDel+0x238>
8112d7a4:	e0bff717 	ldw	r2,-36(fp)
8112d7a8:	e0bffb15 	stw	r2,-20(fp)
8112d7ac:	e0bffb17 	ldw	r2,-20(fp)
8112d7b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112d7b4:	e0bfff17 	ldw	r2,-4(fp)
8112d7b8:	00c001c4 	movi	r3,7
8112d7bc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112d7c0:	e0bffd17 	ldw	r2,-12(fp)
8112d7c4:	e0bff615 	stw	r2,-40(fp)
             break;
8112d7c8:	0001883a 	nop
    }
    return (pgrp_return);
8112d7cc:	e0bff617 	ldw	r2,-40(fp)
}
8112d7d0:	e037883a 	mov	sp,fp
8112d7d4:	dfc00117 	ldw	ra,4(sp)
8112d7d8:	df000017 	ldw	fp,0(sp)
8112d7dc:	dec00204 	addi	sp,sp,8
8112d7e0:	f800283a 	ret

8112d7e4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112d7e4:	defff604 	addi	sp,sp,-40
8112d7e8:	de00012e 	bgeu	sp,et,8112d7f0 <OSFlagNameGet+0xc>
8112d7ec:	003b68fa 	trap	3
8112d7f0:	dfc00915 	stw	ra,36(sp)
8112d7f4:	df000815 	stw	fp,32(sp)
8112d7f8:	df000804 	addi	fp,sp,32
8112d7fc:	e13ffd15 	stw	r4,-12(fp)
8112d800:	e17ffe15 	stw	r5,-8(fp)
8112d804:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d808:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d80c:	e0bfff17 	ldw	r2,-4(fp)
8112d810:	1000021e 	bne	r2,zero,8112d81c <OSFlagNameGet+0x38>
        return (0);
8112d814:	0005883a 	mov	r2,zero
8112d818:	00003906 	br	8112d900 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112d81c:	e0bffd17 	ldw	r2,-12(fp)
8112d820:	1000051e 	bne	r2,zero,8112d838 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112d824:	e0bfff17 	ldw	r2,-4(fp)
8112d828:	00c01b84 	movi	r3,110
8112d82c:	10c00005 	stb	r3,0(r2)
        return (0);
8112d830:	0005883a 	mov	r2,zero
8112d834:	00003206 	br	8112d900 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d838:	e0bffe17 	ldw	r2,-8(fp)
8112d83c:	1000051e 	bne	r2,zero,8112d854 <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112d840:	e0bfff17 	ldw	r2,-4(fp)
8112d844:	00c00304 	movi	r3,12
8112d848:	10c00005 	stb	r3,0(r2)
        return (0);
8112d84c:	0005883a 	mov	r2,zero
8112d850:	00002b06 	br	8112d900 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d854:	d0a08b03 	ldbu	r2,-32212(gp)
8112d858:	10803fcc 	andi	r2,r2,255
8112d85c:	10000526 	beq	r2,zero,8112d874 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112d860:	e0bfff17 	ldw	r2,-4(fp)
8112d864:	00c00444 	movi	r3,17
8112d868:	10c00005 	stb	r3,0(r2)
        return (0);
8112d86c:	0005883a 	mov	r2,zero
8112d870:	00002306 	br	8112d900 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d874:	0005303a 	rdctl	r2,status
8112d878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d87c:	e0fffc17 	ldw	r3,-16(fp)
8112d880:	00bfff84 	movi	r2,-2
8112d884:	1884703a 	and	r2,r3,r2
8112d888:	1001703a 	wrctl	status,r2
  
  return context;
8112d88c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d890:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112d894:	e0bffd17 	ldw	r2,-12(fp)
8112d898:	10800003 	ldbu	r2,0(r2)
8112d89c:	10803fcc 	andi	r2,r2,255
8112d8a0:	10800160 	cmpeqi	r2,r2,5
8112d8a4:	1000091e 	bne	r2,zero,8112d8cc <OSFlagNameGet+0xe8>
8112d8a8:	e0bff817 	ldw	r2,-32(fp)
8112d8ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d8b0:	e0bff917 	ldw	r2,-28(fp)
8112d8b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112d8b8:	e0bfff17 	ldw	r2,-4(fp)
8112d8bc:	00c00044 	movi	r3,1
8112d8c0:	10c00005 	stb	r3,0(r2)
        return (0);
8112d8c4:	0005883a 	mov	r2,zero
8112d8c8:	00000d06 	br	8112d900 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112d8cc:	e0bffd17 	ldw	r2,-12(fp)
8112d8d0:	10800284 	addi	r2,r2,10
8112d8d4:	100b883a 	mov	r5,r2
8112d8d8:	e13ffe17 	ldw	r4,-8(fp)
8112d8dc:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112d8e0:	e0bffb05 	stb	r2,-20(fp)
8112d8e4:	e0bff817 	ldw	r2,-32(fp)
8112d8e8:	e0bffa15 	stw	r2,-24(fp)
8112d8ec:	e0bffa17 	ldw	r2,-24(fp)
8112d8f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d8f4:	e0bfff17 	ldw	r2,-4(fp)
8112d8f8:	10000005 	stb	zero,0(r2)
    return (len);
8112d8fc:	e0bffb03 	ldbu	r2,-20(fp)
}
8112d900:	e037883a 	mov	sp,fp
8112d904:	dfc00117 	ldw	ra,4(sp)
8112d908:	df000017 	ldw	fp,0(sp)
8112d90c:	dec00204 	addi	sp,sp,8
8112d910:	f800283a 	ret

8112d914 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112d914:	defff504 	addi	sp,sp,-44
8112d918:	de00012e 	bgeu	sp,et,8112d920 <OSFlagNameSet+0xc>
8112d91c:	003b68fa 	trap	3
8112d920:	dfc00a15 	stw	ra,40(sp)
8112d924:	df000915 	stw	fp,36(sp)
8112d928:	df000904 	addi	fp,sp,36
8112d92c:	e13ffd15 	stw	r4,-12(fp)
8112d930:	e17ffe15 	stw	r5,-8(fp)
8112d934:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d938:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d93c:	e0bfff17 	ldw	r2,-4(fp)
8112d940:	10004326 	beq	r2,zero,8112da50 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112d944:	e0bffd17 	ldw	r2,-12(fp)
8112d948:	1000041e 	bne	r2,zero,8112d95c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112d94c:	e0bfff17 	ldw	r2,-4(fp)
8112d950:	00c01b84 	movi	r3,110
8112d954:	10c00005 	stb	r3,0(r2)
        return;
8112d958:	00003e06 	br	8112da54 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d95c:	e0bffe17 	ldw	r2,-8(fp)
8112d960:	1000041e 	bne	r2,zero,8112d974 <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112d964:	e0bfff17 	ldw	r2,-4(fp)
8112d968:	00c00304 	movi	r3,12
8112d96c:	10c00005 	stb	r3,0(r2)
        return;
8112d970:	00003806 	br	8112da54 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d974:	d0a08b03 	ldbu	r2,-32212(gp)
8112d978:	10803fcc 	andi	r2,r2,255
8112d97c:	10000426 	beq	r2,zero,8112d990 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112d980:	e0bfff17 	ldw	r2,-4(fp)
8112d984:	00c00484 	movi	r3,18
8112d988:	10c00005 	stb	r3,0(r2)
        return;
8112d98c:	00003106 	br	8112da54 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d990:	0005303a 	rdctl	r2,status
8112d994:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d998:	e0fffc17 	ldw	r3,-16(fp)
8112d99c:	00bfff84 	movi	r2,-2
8112d9a0:	1884703a 	and	r2,r3,r2
8112d9a4:	1001703a 	wrctl	status,r2
  
  return context;
8112d9a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d9ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112d9b0:	e0bffd17 	ldw	r2,-12(fp)
8112d9b4:	10800003 	ldbu	r2,0(r2)
8112d9b8:	10803fcc 	andi	r2,r2,255
8112d9bc:	10800160 	cmpeqi	r2,r2,5
8112d9c0:	1000081e 	bne	r2,zero,8112d9e4 <OSFlagNameSet+0xd0>
8112d9c4:	e0bff717 	ldw	r2,-36(fp)
8112d9c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d9cc:	e0bff817 	ldw	r2,-32(fp)
8112d9d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112d9d4:	e0bfff17 	ldw	r2,-4(fp)
8112d9d8:	00c00044 	movi	r3,1
8112d9dc:	10c00005 	stb	r3,0(r2)
        return;
8112d9e0:	00001c06 	br	8112da54 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112d9e4:	e13ffe17 	ldw	r4,-8(fp)
8112d9e8:	112ca280 	call	8112ca28 <OS_StrLen>
8112d9ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112d9f0:	e0bffa03 	ldbu	r2,-24(fp)
8112d9f4:	10800830 	cmpltui	r2,r2,32
8112d9f8:	1000081e 	bne	r2,zero,8112da1c <OSFlagNameSet+0x108>
8112d9fc:	e0bff717 	ldw	r2,-36(fp)
8112da00:	e0bff915 	stw	r2,-28(fp)
8112da04:	e0bff917 	ldw	r2,-28(fp)
8112da08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112da0c:	e0bfff17 	ldw	r2,-4(fp)
8112da10:	00c01cc4 	movi	r3,115
8112da14:	10c00005 	stb	r3,0(r2)
        return;
8112da18:	00000e06 	br	8112da54 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112da1c:	e0bffd17 	ldw	r2,-12(fp)
8112da20:	10800284 	addi	r2,r2,10
8112da24:	e17ffe17 	ldw	r5,-8(fp)
8112da28:	1009883a 	mov	r4,r2
8112da2c:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112da30:	e0bff717 	ldw	r2,-36(fp)
8112da34:	e0bffb15 	stw	r2,-20(fp)
8112da38:	e0bffb17 	ldw	r2,-20(fp)
8112da3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112da40:	e0bfff17 	ldw	r2,-4(fp)
8112da44:	10000005 	stb	zero,0(r2)
    return;
8112da48:	0001883a 	nop
8112da4c:	00000106 	br	8112da54 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112da50:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112da54:	e037883a 	mov	sp,fp
8112da58:	dfc00117 	ldw	ra,4(sp)
8112da5c:	df000017 	ldw	fp,0(sp)
8112da60:	dec00204 	addi	sp,sp,8
8112da64:	f800283a 	ret

8112da68 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112da68:	deffe104 	addi	sp,sp,-124
8112da6c:	de00012e 	bgeu	sp,et,8112da74 <OSFlagPend+0xc>
8112da70:	003b68fa 	trap	3
8112da74:	dfc01e15 	stw	ra,120(sp)
8112da78:	df001d15 	stw	fp,116(sp)
8112da7c:	df001d04 	addi	fp,sp,116
8112da80:	e13ffc15 	stw	r4,-16(fp)
8112da84:	2809883a 	mov	r4,r5
8112da88:	3007883a 	mov	r3,r6
8112da8c:	3805883a 	mov	r2,r7
8112da90:	e13ffd0d 	sth	r4,-12(fp)
8112da94:	e0fffe05 	stb	r3,-8(fp)
8112da98:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112da9c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112daa0:	e0800217 	ldw	r2,8(fp)
8112daa4:	1000021e 	bne	r2,zero,8112dab0 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112daa8:	0005883a 	mov	r2,zero
8112daac:	00015906 	br	8112e014 <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112dab0:	e0bffc17 	ldw	r2,-16(fp)
8112dab4:	1000051e 	bne	r2,zero,8112dacc <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112dab8:	e0800217 	ldw	r2,8(fp)
8112dabc:	00c01b84 	movi	r3,110
8112dac0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112dac4:	0005883a 	mov	r2,zero
8112dac8:	00015206 	br	8112e014 <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112dacc:	d0a08b03 	ldbu	r2,-32212(gp)
8112dad0:	10803fcc 	andi	r2,r2,255
8112dad4:	10000526 	beq	r2,zero,8112daec <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112dad8:	e0800217 	ldw	r2,8(fp)
8112dadc:	00c00084 	movi	r3,2
8112dae0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112dae4:	0005883a 	mov	r2,zero
8112dae8:	00014a06 	br	8112e014 <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112daec:	d0a07903 	ldbu	r2,-32284(gp)
8112daf0:	10803fcc 	andi	r2,r2,255
8112daf4:	10000526 	beq	r2,zero,8112db0c <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112daf8:	e0800217 	ldw	r2,8(fp)
8112dafc:	00c00344 	movi	r3,13
8112db00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112db04:	0005883a 	mov	r2,zero
8112db08:	00014206 	br	8112e014 <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112db0c:	e0bffc17 	ldw	r2,-16(fp)
8112db10:	10800003 	ldbu	r2,0(r2)
8112db14:	10803fcc 	andi	r2,r2,255
8112db18:	10800160 	cmpeqi	r2,r2,5
8112db1c:	1000051e 	bne	r2,zero,8112db34 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112db20:	e0800217 	ldw	r2,8(fp)
8112db24:	00c00044 	movi	r3,1
8112db28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112db2c:	0005883a 	mov	r2,zero
8112db30:	00013806 	br	8112e014 <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112db34:	e0fffe03 	ldbu	r3,-8(fp)
8112db38:	00bfe004 	movi	r2,-128
8112db3c:	1884703a 	and	r2,r3,r2
8112db40:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112db44:	e0bfe603 	ldbu	r2,-104(fp)
8112db48:	10000626 	beq	r2,zero,8112db64 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112db4c:	e0bffe03 	ldbu	r2,-8(fp)
8112db50:	10801fcc 	andi	r2,r2,127
8112db54:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112db58:	00800044 	movi	r2,1
8112db5c:	e0bfe405 	stb	r2,-112(fp)
8112db60:	00000106 	br	8112db68 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112db64:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db68:	0005303a 	rdctl	r2,status
8112db6c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112db70:	e0fff617 	ldw	r3,-40(fp)
8112db74:	00bfff84 	movi	r2,-2
8112db78:	1884703a 	and	r2,r3,r2
8112db7c:	1001703a 	wrctl	status,r2
  
  return context;
8112db80:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112db84:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112db88:	e0bffe03 	ldbu	r2,-8(fp)
8112db8c:	10c00060 	cmpeqi	r3,r2,1
8112db90:	1800921e 	bne	r3,zero,8112dddc <OSFlagPend+0x374>
8112db94:	10c00088 	cmpgei	r3,r2,2
8112db98:	1800021e 	bne	r3,zero,8112dba4 <OSFlagPend+0x13c>
8112db9c:	10006126 	beq	r2,zero,8112dd24 <OSFlagPend+0x2bc>
8112dba0:	0000bb06 	br	8112de90 <OSFlagPend+0x428>
8112dba4:	10c000a0 	cmpeqi	r3,r2,2
8112dba8:	1800031e 	bne	r3,zero,8112dbb8 <OSFlagPend+0x150>
8112dbac:	108000e0 	cmpeqi	r2,r2,3
8112dbb0:	10002f1e 	bne	r2,zero,8112dc70 <OSFlagPend+0x208>
8112dbb4:	0000b606 	br	8112de90 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112dbb8:	e0bffc17 	ldw	r2,-16(fp)
8112dbbc:	10c0020b 	ldhu	r3,8(r2)
8112dbc0:	e0bffd0b 	ldhu	r2,-12(fp)
8112dbc4:	1884703a 	and	r2,r3,r2
8112dbc8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112dbcc:	e0ffe80b 	ldhu	r3,-96(fp)
8112dbd0:	e0bffd0b 	ldhu	r2,-12(fp)
8112dbd4:	1880171e 	bne	r3,r2,8112dc34 <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112dbd8:	e0bfe403 	ldbu	r2,-112(fp)
8112dbdc:	10800058 	cmpnei	r2,r2,1
8112dbe0:	1000091e 	bne	r2,zero,8112dc08 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112dbe4:	e0bffc17 	ldw	r2,-16(fp)
8112dbe8:	1080020b 	ldhu	r2,8(r2)
8112dbec:	1007883a 	mov	r3,r2
8112dbf0:	e0bfe80b 	ldhu	r2,-96(fp)
8112dbf4:	0084303a 	nor	r2,zero,r2
8112dbf8:	1884703a 	and	r2,r3,r2
8112dbfc:	1007883a 	mov	r3,r2
8112dc00:	e0bffc17 	ldw	r2,-16(fp)
8112dc04:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112dc08:	d0a08c17 	ldw	r2,-32208(gp)
8112dc0c:	e0ffe80b 	ldhu	r3,-96(fp)
8112dc10:	10c00b0d 	sth	r3,44(r2)
8112dc14:	e0bfe517 	ldw	r2,-108(fp)
8112dc18:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dc1c:	e0bfe717 	ldw	r2,-100(fp)
8112dc20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112dc24:	e0800217 	ldw	r2,8(fp)
8112dc28:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112dc2c:	e0bfe80b 	ldhu	r2,-96(fp)
8112dc30:	0000f806 	br	8112e014 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112dc34:	e13ffd0b 	ldhu	r4,-12(fp)
8112dc38:	e17ffe03 	ldbu	r5,-8(fp)
8112dc3c:	e0bfff0b 	ldhu	r2,-4(fp)
8112dc40:	e0fff704 	addi	r3,fp,-36
8112dc44:	d8800015 	stw	r2,0(sp)
8112dc48:	280f883a 	mov	r7,r5
8112dc4c:	200d883a 	mov	r6,r4
8112dc50:	180b883a 	mov	r5,r3
8112dc54:	e13ffc17 	ldw	r4,-16(fp)
8112dc58:	112e4f80 	call	8112e4f8 <OS_FlagBlock>
8112dc5c:	e0bfe517 	ldw	r2,-108(fp)
8112dc60:	e0bfe915 	stw	r2,-92(fp)
8112dc64:	e0bfe917 	ldw	r2,-92(fp)
8112dc68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112dc6c:	00009206 	br	8112deb8 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112dc70:	e0bffc17 	ldw	r2,-16(fp)
8112dc74:	10c0020b 	ldhu	r3,8(r2)
8112dc78:	e0bffd0b 	ldhu	r2,-12(fp)
8112dc7c:	1884703a 	and	r2,r3,r2
8112dc80:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112dc84:	e0bfe80b 	ldhu	r2,-96(fp)
8112dc88:	10001726 	beq	r2,zero,8112dce8 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112dc8c:	e0bfe403 	ldbu	r2,-112(fp)
8112dc90:	10800058 	cmpnei	r2,r2,1
8112dc94:	1000091e 	bne	r2,zero,8112dcbc <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112dc98:	e0bffc17 	ldw	r2,-16(fp)
8112dc9c:	1080020b 	ldhu	r2,8(r2)
8112dca0:	1007883a 	mov	r3,r2
8112dca4:	e0bfe80b 	ldhu	r2,-96(fp)
8112dca8:	0084303a 	nor	r2,zero,r2
8112dcac:	1884703a 	and	r2,r3,r2
8112dcb0:	1007883a 	mov	r3,r2
8112dcb4:	e0bffc17 	ldw	r2,-16(fp)
8112dcb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112dcbc:	d0a08c17 	ldw	r2,-32208(gp)
8112dcc0:	e0ffe80b 	ldhu	r3,-96(fp)
8112dcc4:	10c00b0d 	sth	r3,44(r2)
8112dcc8:	e0bfe517 	ldw	r2,-108(fp)
8112dccc:	e0bfea15 	stw	r2,-88(fp)
8112dcd0:	e0bfea17 	ldw	r2,-88(fp)
8112dcd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112dcd8:	e0800217 	ldw	r2,8(fp)
8112dcdc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112dce0:	e0bfe80b 	ldhu	r2,-96(fp)
8112dce4:	0000cb06 	br	8112e014 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112dce8:	e13ffd0b 	ldhu	r4,-12(fp)
8112dcec:	e17ffe03 	ldbu	r5,-8(fp)
8112dcf0:	e0bfff0b 	ldhu	r2,-4(fp)
8112dcf4:	e0fff704 	addi	r3,fp,-36
8112dcf8:	d8800015 	stw	r2,0(sp)
8112dcfc:	280f883a 	mov	r7,r5
8112dd00:	200d883a 	mov	r6,r4
8112dd04:	180b883a 	mov	r5,r3
8112dd08:	e13ffc17 	ldw	r4,-16(fp)
8112dd0c:	112e4f80 	call	8112e4f8 <OS_FlagBlock>
8112dd10:	e0bfe517 	ldw	r2,-108(fp)
8112dd14:	e0bfeb15 	stw	r2,-84(fp)
8112dd18:	e0bfeb17 	ldw	r2,-84(fp)
8112dd1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112dd20:	00006506 	br	8112deb8 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112dd24:	e0bffc17 	ldw	r2,-16(fp)
8112dd28:	1080020b 	ldhu	r2,8(r2)
8112dd2c:	0084303a 	nor	r2,zero,r2
8112dd30:	1007883a 	mov	r3,r2
8112dd34:	e0bffd0b 	ldhu	r2,-12(fp)
8112dd38:	1884703a 	and	r2,r3,r2
8112dd3c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112dd40:	e0ffe80b 	ldhu	r3,-96(fp)
8112dd44:	e0bffd0b 	ldhu	r2,-12(fp)
8112dd48:	1880151e 	bne	r3,r2,8112dda0 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112dd4c:	e0bfe403 	ldbu	r2,-112(fp)
8112dd50:	10800058 	cmpnei	r2,r2,1
8112dd54:	1000071e 	bne	r2,zero,8112dd74 <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112dd58:	e0bffc17 	ldw	r2,-16(fp)
8112dd5c:	10c0020b 	ldhu	r3,8(r2)
8112dd60:	e0bfe80b 	ldhu	r2,-96(fp)
8112dd64:	1884b03a 	or	r2,r3,r2
8112dd68:	1007883a 	mov	r3,r2
8112dd6c:	e0bffc17 	ldw	r2,-16(fp)
8112dd70:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112dd74:	d0a08c17 	ldw	r2,-32208(gp)
8112dd78:	e0ffe80b 	ldhu	r3,-96(fp)
8112dd7c:	10c00b0d 	sth	r3,44(r2)
8112dd80:	e0bfe517 	ldw	r2,-108(fp)
8112dd84:	e0bfec15 	stw	r2,-80(fp)
8112dd88:	e0bfec17 	ldw	r2,-80(fp)
8112dd8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112dd90:	e0800217 	ldw	r2,8(fp)
8112dd94:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112dd98:	e0bfe80b 	ldhu	r2,-96(fp)
8112dd9c:	00009d06 	br	8112e014 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112dda0:	e13ffd0b 	ldhu	r4,-12(fp)
8112dda4:	e17ffe03 	ldbu	r5,-8(fp)
8112dda8:	e0bfff0b 	ldhu	r2,-4(fp)
8112ddac:	e0fff704 	addi	r3,fp,-36
8112ddb0:	d8800015 	stw	r2,0(sp)
8112ddb4:	280f883a 	mov	r7,r5
8112ddb8:	200d883a 	mov	r6,r4
8112ddbc:	180b883a 	mov	r5,r3
8112ddc0:	e13ffc17 	ldw	r4,-16(fp)
8112ddc4:	112e4f80 	call	8112e4f8 <OS_FlagBlock>
8112ddc8:	e0bfe517 	ldw	r2,-108(fp)
8112ddcc:	e0bfed15 	stw	r2,-76(fp)
8112ddd0:	e0bfed17 	ldw	r2,-76(fp)
8112ddd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112ddd8:	00003706 	br	8112deb8 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112dddc:	e0bffc17 	ldw	r2,-16(fp)
8112dde0:	1080020b 	ldhu	r2,8(r2)
8112dde4:	0084303a 	nor	r2,zero,r2
8112dde8:	1007883a 	mov	r3,r2
8112ddec:	e0bffd0b 	ldhu	r2,-12(fp)
8112ddf0:	1884703a 	and	r2,r3,r2
8112ddf4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112ddf8:	e0bfe80b 	ldhu	r2,-96(fp)
8112ddfc:	10001526 	beq	r2,zero,8112de54 <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112de00:	e0bfe403 	ldbu	r2,-112(fp)
8112de04:	10800058 	cmpnei	r2,r2,1
8112de08:	1000071e 	bne	r2,zero,8112de28 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112de0c:	e0bffc17 	ldw	r2,-16(fp)
8112de10:	10c0020b 	ldhu	r3,8(r2)
8112de14:	e0bfe80b 	ldhu	r2,-96(fp)
8112de18:	1884b03a 	or	r2,r3,r2
8112de1c:	1007883a 	mov	r3,r2
8112de20:	e0bffc17 	ldw	r2,-16(fp)
8112de24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112de28:	d0a08c17 	ldw	r2,-32208(gp)
8112de2c:	e0ffe80b 	ldhu	r3,-96(fp)
8112de30:	10c00b0d 	sth	r3,44(r2)
8112de34:	e0bfe517 	ldw	r2,-108(fp)
8112de38:	e0bfee15 	stw	r2,-72(fp)
8112de3c:	e0bfee17 	ldw	r2,-72(fp)
8112de40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112de44:	e0800217 	ldw	r2,8(fp)
8112de48:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112de4c:	e0bfe80b 	ldhu	r2,-96(fp)
8112de50:	00007006 	br	8112e014 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112de54:	e13ffd0b 	ldhu	r4,-12(fp)
8112de58:	e17ffe03 	ldbu	r5,-8(fp)
8112de5c:	e0bfff0b 	ldhu	r2,-4(fp)
8112de60:	e0fff704 	addi	r3,fp,-36
8112de64:	d8800015 	stw	r2,0(sp)
8112de68:	280f883a 	mov	r7,r5
8112de6c:	200d883a 	mov	r6,r4
8112de70:	180b883a 	mov	r5,r3
8112de74:	e13ffc17 	ldw	r4,-16(fp)
8112de78:	112e4f80 	call	8112e4f8 <OS_FlagBlock>
8112de7c:	e0bfe517 	ldw	r2,-108(fp)
8112de80:	e0bfef15 	stw	r2,-68(fp)
8112de84:	e0bfef17 	ldw	r2,-68(fp)
8112de88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112de8c:	00000a06 	br	8112deb8 <OSFlagPend+0x450>
8112de90:	e0bfe517 	ldw	r2,-108(fp)
8112de94:	e0bff015 	stw	r2,-64(fp)
8112de98:	e0bff017 	ldw	r2,-64(fp)
8112de9c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112dea0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112dea4:	e0800217 	ldw	r2,8(fp)
8112dea8:	00c01bc4 	movi	r3,111
8112deac:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112deb0:	e0bfe80b 	ldhu	r2,-96(fp)
8112deb4:	00005706 	br	8112e014 <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112deb8:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112debc:	0005303a 	rdctl	r2,status
8112dec0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dec4:	e0fff117 	ldw	r3,-60(fp)
8112dec8:	00bfff84 	movi	r2,-2
8112decc:	1884703a 	and	r2,r3,r2
8112ded0:	1001703a 	wrctl	status,r2
  
  return context;
8112ded4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112ded8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112dedc:	d0a08c17 	ldw	r2,-32208(gp)
8112dee0:	10800c43 	ldbu	r2,49(r2)
8112dee4:	10803fcc 	andi	r2,r2,255
8112dee8:	10001c26 	beq	r2,zero,8112df5c <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112deec:	d0a08c17 	ldw	r2,-32208(gp)
8112def0:	10800c43 	ldbu	r2,49(r2)
8112def4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112def8:	d0a08c17 	ldw	r2,-32208(gp)
8112defc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112df00:	e0bff704 	addi	r2,fp,-36
8112df04:	1009883a 	mov	r4,r2
8112df08:	112e8440 	call	8112e844 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112df0c:	d0a08c17 	ldw	r2,-32208(gp)
8112df10:	10000c05 	stb	zero,48(r2)
8112df14:	e0bfe517 	ldw	r2,-108(fp)
8112df18:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112df1c:	e0bff217 	ldw	r2,-56(fp)
8112df20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112df24:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112df28:	e0bff303 	ldbu	r2,-52(fp)
8112df2c:	108000a0 	cmpeqi	r2,r2,2
8112df30:	10000426 	beq	r2,zero,8112df44 <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112df34:	e0800217 	ldw	r2,8(fp)
8112df38:	00c00384 	movi	r3,14
8112df3c:	10c00005 	stb	r3,0(r2)
                 break;
8112df40:	00000406 	br	8112df54 <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112df44:	e0800217 	ldw	r2,8(fp)
8112df48:	00c00284 	movi	r3,10
8112df4c:	10c00005 	stb	r3,0(r2)
                 break;
8112df50:	0001883a 	nop
        }
        return (flags_rdy);
8112df54:	e0bfe80b 	ldhu	r2,-96(fp)
8112df58:	00002e06 	br	8112e014 <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112df5c:	d0a08c17 	ldw	r2,-32208(gp)
8112df60:	10800b0b 	ldhu	r2,44(r2)
8112df64:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112df68:	e0bfe403 	ldbu	r2,-112(fp)
8112df6c:	10800058 	cmpnei	r2,r2,1
8112df70:	1000211e 	bne	r2,zero,8112dff8 <OSFlagPend+0x590>
        switch (wait_type) {
8112df74:	e0bffe03 	ldbu	r2,-8(fp)
8112df78:	10001616 	blt	r2,zero,8112dfd4 <OSFlagPend+0x56c>
8112df7c:	10c00090 	cmplti	r3,r2,2
8112df80:	18000c1e 	bne	r3,zero,8112dfb4 <OSFlagPend+0x54c>
8112df84:	10800108 	cmpgei	r2,r2,4
8112df88:	1000121e 	bne	r2,zero,8112dfd4 <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112df8c:	e0bffc17 	ldw	r2,-16(fp)
8112df90:	1080020b 	ldhu	r2,8(r2)
8112df94:	1007883a 	mov	r3,r2
8112df98:	e0bfe80b 	ldhu	r2,-96(fp)
8112df9c:	0084303a 	nor	r2,zero,r2
8112dfa0:	1884703a 	and	r2,r3,r2
8112dfa4:	1007883a 	mov	r3,r2
8112dfa8:	e0bffc17 	ldw	r2,-16(fp)
8112dfac:	10c0020d 	sth	r3,8(r2)
                 break;
8112dfb0:	00001106 	br	8112dff8 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112dfb4:	e0bffc17 	ldw	r2,-16(fp)
8112dfb8:	10c0020b 	ldhu	r3,8(r2)
8112dfbc:	e0bfe80b 	ldhu	r2,-96(fp)
8112dfc0:	1884b03a 	or	r2,r3,r2
8112dfc4:	1007883a 	mov	r3,r2
8112dfc8:	e0bffc17 	ldw	r2,-16(fp)
8112dfcc:	10c0020d 	sth	r3,8(r2)
                 break;
8112dfd0:	00000906 	br	8112dff8 <OSFlagPend+0x590>
8112dfd4:	e0bfe517 	ldw	r2,-108(fp)
8112dfd8:	e0bff415 	stw	r2,-48(fp)
8112dfdc:	e0bff417 	ldw	r2,-48(fp)
8112dfe0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112dfe4:	e0800217 	ldw	r2,8(fp)
8112dfe8:	00c01bc4 	movi	r3,111
8112dfec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112dff0:	0005883a 	mov	r2,zero
8112dff4:	00000706 	br	8112e014 <OSFlagPend+0x5ac>
8112dff8:	e0bfe517 	ldw	r2,-108(fp)
8112dffc:	e0bff515 	stw	r2,-44(fp)
8112e000:	e0bff517 	ldw	r2,-44(fp)
8112e004:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112e008:	e0800217 	ldw	r2,8(fp)
8112e00c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112e010:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112e014:	e037883a 	mov	sp,fp
8112e018:	dfc00117 	ldw	ra,4(sp)
8112e01c:	df000017 	ldw	fp,0(sp)
8112e020:	dec00204 	addi	sp,sp,8
8112e024:	f800283a 	ret

8112e028 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112e028:	defffb04 	addi	sp,sp,-20
8112e02c:	de00012e 	bgeu	sp,et,8112e034 <OSFlagPendGetFlagsRdy+0xc>
8112e030:	003b68fa 	trap	3
8112e034:	df000415 	stw	fp,16(sp)
8112e038:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112e03c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e040:	0005303a 	rdctl	r2,status
8112e044:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e048:	e0fffe17 	ldw	r3,-8(fp)
8112e04c:	00bfff84 	movi	r2,-2
8112e050:	1884703a 	and	r2,r3,r2
8112e054:	1001703a 	wrctl	status,r2
  
  return context;
8112e058:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112e05c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112e060:	d0a08c17 	ldw	r2,-32208(gp)
8112e064:	10800b0b 	ldhu	r2,44(r2)
8112e068:	e0bffd0d 	sth	r2,-12(fp)
8112e06c:	e0bffc17 	ldw	r2,-16(fp)
8112e070:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e074:	e0bfff17 	ldw	r2,-4(fp)
8112e078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112e07c:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112e080:	e037883a 	mov	sp,fp
8112e084:	df000017 	ldw	fp,0(sp)
8112e088:	dec00104 	addi	sp,sp,4
8112e08c:	f800283a 	ret

8112e090 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112e090:	deffef04 	addi	sp,sp,-68
8112e094:	de00012e 	bgeu	sp,et,8112e09c <OSFlagPost+0xc>
8112e098:	003b68fa 	trap	3
8112e09c:	dfc01015 	stw	ra,64(sp)
8112e0a0:	df000f15 	stw	fp,60(sp)
8112e0a4:	df000f04 	addi	fp,sp,60
8112e0a8:	e13ffc15 	stw	r4,-16(fp)
8112e0ac:	2807883a 	mov	r3,r5
8112e0b0:	3005883a 	mov	r2,r6
8112e0b4:	e1ffff15 	stw	r7,-4(fp)
8112e0b8:	e0fffd0d 	sth	r3,-12(fp)
8112e0bc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112e0c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112e0c4:	e0bfff17 	ldw	r2,-4(fp)
8112e0c8:	1000021e 	bne	r2,zero,8112e0d4 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112e0cc:	0005883a 	mov	r2,zero
8112e0d0:	0000d106 	br	8112e418 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112e0d4:	e0bffc17 	ldw	r2,-16(fp)
8112e0d8:	1000051e 	bne	r2,zero,8112e0f0 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112e0dc:	e0bfff17 	ldw	r2,-4(fp)
8112e0e0:	00c01b84 	movi	r3,110
8112e0e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e0e8:	0005883a 	mov	r2,zero
8112e0ec:	0000ca06 	br	8112e418 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112e0f0:	e0bffc17 	ldw	r2,-16(fp)
8112e0f4:	10800003 	ldbu	r2,0(r2)
8112e0f8:	10803fcc 	andi	r2,r2,255
8112e0fc:	10800160 	cmpeqi	r2,r2,5
8112e100:	1000051e 	bne	r2,zero,8112e118 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112e104:	e0bfff17 	ldw	r2,-4(fp)
8112e108:	00c00044 	movi	r3,1
8112e10c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e110:	0005883a 	mov	r2,zero
8112e114:	0000c006 	br	8112e418 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e118:	0005303a 	rdctl	r2,status
8112e11c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e120:	e0fffb17 	ldw	r3,-20(fp)
8112e124:	00bfff84 	movi	r2,-2
8112e128:	1884703a 	and	r2,r3,r2
8112e12c:	1001703a 	wrctl	status,r2
  
  return context;
8112e130:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112e134:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112e138:	e0bffe03 	ldbu	r2,-8(fp)
8112e13c:	10000326 	beq	r2,zero,8112e14c <OSFlagPost+0xbc>
8112e140:	10800060 	cmpeqi	r2,r2,1
8112e144:	10000b1e 	bne	r2,zero,8112e174 <OSFlagPost+0xe4>
8112e148:	00001206 	br	8112e194 <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112e14c:	e0bffc17 	ldw	r2,-16(fp)
8112e150:	1080020b 	ldhu	r2,8(r2)
8112e154:	1007883a 	mov	r3,r2
8112e158:	e0bffd0b 	ldhu	r2,-12(fp)
8112e15c:	0084303a 	nor	r2,zero,r2
8112e160:	1884703a 	and	r2,r3,r2
8112e164:	1007883a 	mov	r3,r2
8112e168:	e0bffc17 	ldw	r2,-16(fp)
8112e16c:	10c0020d 	sth	r3,8(r2)
             break;
8112e170:	00001106 	br	8112e1b8 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112e174:	e0bffc17 	ldw	r2,-16(fp)
8112e178:	10c0020b 	ldhu	r3,8(r2)
8112e17c:	e0bffd0b 	ldhu	r2,-12(fp)
8112e180:	1884b03a 	or	r2,r3,r2
8112e184:	1007883a 	mov	r3,r2
8112e188:	e0bffc17 	ldw	r2,-16(fp)
8112e18c:	10c0020d 	sth	r3,8(r2)
             break;
8112e190:	00000906 	br	8112e1b8 <OSFlagPost+0x128>
8112e194:	e0bff317 	ldw	r2,-52(fp)
8112e198:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e19c:	e0bff417 	ldw	r2,-48(fp)
8112e1a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112e1a4:	e0bfff17 	ldw	r2,-4(fp)
8112e1a8:	00c01c44 	movi	r3,113
8112e1ac:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112e1b0:	0005883a 	mov	r2,zero
8112e1b4:	00009806 	br	8112e418 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112e1b8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112e1bc:	e0bffc17 	ldw	r2,-16(fp)
8112e1c0:	10800117 	ldw	r2,4(r2)
8112e1c4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112e1c8:	00007706 	br	8112e3a8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112e1cc:	e0bff117 	ldw	r2,-60(fp)
8112e1d0:	10800483 	ldbu	r2,18(r2)
8112e1d4:	10803fcc 	andi	r2,r2,255
8112e1d8:	10c00060 	cmpeqi	r3,r2,1
8112e1dc:	18004a1e 	bne	r3,zero,8112e308 <OSFlagPost+0x278>
8112e1e0:	10c00088 	cmpgei	r3,r2,2
8112e1e4:	1800021e 	bne	r3,zero,8112e1f0 <OSFlagPost+0x160>
8112e1e8:	10002f26 	beq	r2,zero,8112e2a8 <OSFlagPost+0x218>
8112e1ec:	00005b06 	br	8112e35c <OSFlagPost+0x2cc>
8112e1f0:	10c000a0 	cmpeqi	r3,r2,2
8112e1f4:	1800031e 	bne	r3,zero,8112e204 <OSFlagPost+0x174>
8112e1f8:	108000e0 	cmpeqi	r2,r2,3
8112e1fc:	1000171e 	bne	r2,zero,8112e25c <OSFlagPost+0x1cc>
8112e200:	00005606 	br	8112e35c <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e204:	e0bffc17 	ldw	r2,-16(fp)
8112e208:	10c0020b 	ldhu	r3,8(r2)
8112e20c:	e0bff117 	ldw	r2,-60(fp)
8112e210:	1080040b 	ldhu	r2,16(r2)
8112e214:	1884703a 	and	r2,r3,r2
8112e218:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112e21c:	e0bff117 	ldw	r2,-60(fp)
8112e220:	1080040b 	ldhu	r2,16(r2)
8112e224:	10ffffcc 	andi	r3,r2,65535
8112e228:	e0bff60b 	ldhu	r2,-40(fp)
8112e22c:	1880541e 	bne	r3,r2,8112e380 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e230:	e0bff60b 	ldhu	r2,-40(fp)
8112e234:	100b883a 	mov	r5,r2
8112e238:	e13ff117 	ldw	r4,-60(fp)
8112e23c:	112e7480 	call	8112e748 <OS_FlagTaskRdy>
8112e240:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e244:	e0bff683 	ldbu	r2,-38(fp)
8112e248:	10800058 	cmpnei	r2,r2,1
8112e24c:	10004c1e 	bne	r2,zero,8112e380 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e250:	00800044 	movi	r2,1
8112e254:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e258:	00004906 	br	8112e380 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e25c:	e0bffc17 	ldw	r2,-16(fp)
8112e260:	10c0020b 	ldhu	r3,8(r2)
8112e264:	e0bff117 	ldw	r2,-60(fp)
8112e268:	1080040b 	ldhu	r2,16(r2)
8112e26c:	1884703a 	and	r2,r3,r2
8112e270:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112e274:	e0bff60b 	ldhu	r2,-40(fp)
8112e278:	10004326 	beq	r2,zero,8112e388 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e27c:	e0bff60b 	ldhu	r2,-40(fp)
8112e280:	100b883a 	mov	r5,r2
8112e284:	e13ff117 	ldw	r4,-60(fp)
8112e288:	112e7480 	call	8112e748 <OS_FlagTaskRdy>
8112e28c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e290:	e0bff683 	ldbu	r2,-38(fp)
8112e294:	10800058 	cmpnei	r2,r2,1
8112e298:	10003b1e 	bne	r2,zero,8112e388 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e29c:	00800044 	movi	r2,1
8112e2a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e2a4:	00003806 	br	8112e388 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e2a8:	e0bffc17 	ldw	r2,-16(fp)
8112e2ac:	1080020b 	ldhu	r2,8(r2)
8112e2b0:	0084303a 	nor	r2,zero,r2
8112e2b4:	1007883a 	mov	r3,r2
8112e2b8:	e0bff117 	ldw	r2,-60(fp)
8112e2bc:	1080040b 	ldhu	r2,16(r2)
8112e2c0:	1884703a 	and	r2,r3,r2
8112e2c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112e2c8:	e0bff117 	ldw	r2,-60(fp)
8112e2cc:	1080040b 	ldhu	r2,16(r2)
8112e2d0:	10ffffcc 	andi	r3,r2,65535
8112e2d4:	e0bff60b 	ldhu	r2,-40(fp)
8112e2d8:	18802d1e 	bne	r3,r2,8112e390 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e2dc:	e0bff60b 	ldhu	r2,-40(fp)
8112e2e0:	100b883a 	mov	r5,r2
8112e2e4:	e13ff117 	ldw	r4,-60(fp)
8112e2e8:	112e7480 	call	8112e748 <OS_FlagTaskRdy>
8112e2ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e2f0:	e0bff683 	ldbu	r2,-38(fp)
8112e2f4:	10800058 	cmpnei	r2,r2,1
8112e2f8:	1000251e 	bne	r2,zero,8112e390 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e2fc:	00800044 	movi	r2,1
8112e300:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e304:	00002206 	br	8112e390 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e308:	e0bffc17 	ldw	r2,-16(fp)
8112e30c:	1080020b 	ldhu	r2,8(r2)
8112e310:	0084303a 	nor	r2,zero,r2
8112e314:	1007883a 	mov	r3,r2
8112e318:	e0bff117 	ldw	r2,-60(fp)
8112e31c:	1080040b 	ldhu	r2,16(r2)
8112e320:	1884703a 	and	r2,r3,r2
8112e324:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112e328:	e0bff60b 	ldhu	r2,-40(fp)
8112e32c:	10001a26 	beq	r2,zero,8112e398 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e330:	e0bff60b 	ldhu	r2,-40(fp)
8112e334:	100b883a 	mov	r5,r2
8112e338:	e13ff117 	ldw	r4,-60(fp)
8112e33c:	112e7480 	call	8112e748 <OS_FlagTaskRdy>
8112e340:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e344:	e0bff683 	ldbu	r2,-38(fp)
8112e348:	10800058 	cmpnei	r2,r2,1
8112e34c:	1000121e 	bne	r2,zero,8112e398 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e350:	00800044 	movi	r2,1
8112e354:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e358:	00000f06 	br	8112e398 <OSFlagPost+0x308>
8112e35c:	e0bff317 	ldw	r2,-52(fp)
8112e360:	e0bff515 	stw	r2,-44(fp)
8112e364:	e0bff517 	ldw	r2,-44(fp)
8112e368:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112e36c:	e0bfff17 	ldw	r2,-4(fp)
8112e370:	00c01bc4 	movi	r3,111
8112e374:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112e378:	0005883a 	mov	r2,zero
8112e37c:	00002606 	br	8112e418 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e380:	0001883a 	nop
8112e384:	00000506 	br	8112e39c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e388:	0001883a 	nop
8112e38c:	00000306 	br	8112e39c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e390:	0001883a 	nop
8112e394:	00000106 	br	8112e39c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e398:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112e39c:	e0bff117 	ldw	r2,-60(fp)
8112e3a0:	10800017 	ldw	r2,0(r2)
8112e3a4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112e3a8:	e0bff117 	ldw	r2,-60(fp)
8112e3ac:	103f871e 	bne	r2,zero,8112e1cc <__reset+0xfb10e1cc>
8112e3b0:	e0bff317 	ldw	r2,-52(fp)
8112e3b4:	e0bff715 	stw	r2,-36(fp)
8112e3b8:	e0bff717 	ldw	r2,-36(fp)
8112e3bc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112e3c0:	e0bff203 	ldbu	r2,-56(fp)
8112e3c4:	10800058 	cmpnei	r2,r2,1
8112e3c8:	1000011e 	bne	r2,zero,8112e3d0 <OSFlagPost+0x340>
        OS_Sched();
8112e3cc:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e3d0:	0005303a 	rdctl	r2,status
8112e3d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e3d8:	e0fffa17 	ldw	r3,-24(fp)
8112e3dc:	00bfff84 	movi	r2,-2
8112e3e0:	1884703a 	and	r2,r3,r2
8112e3e4:	1001703a 	wrctl	status,r2
  
  return context;
8112e3e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112e3ec:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112e3f0:	e0bffc17 	ldw	r2,-16(fp)
8112e3f4:	1080020b 	ldhu	r2,8(r2)
8112e3f8:	e0bff90d 	sth	r2,-28(fp)
8112e3fc:	e0bff317 	ldw	r2,-52(fp)
8112e400:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e404:	e0bff817 	ldw	r2,-32(fp)
8112e408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112e40c:	e0bfff17 	ldw	r2,-4(fp)
8112e410:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112e414:	e0bff90b 	ldhu	r2,-28(fp)
}
8112e418:	e037883a 	mov	sp,fp
8112e41c:	dfc00117 	ldw	ra,4(sp)
8112e420:	df000017 	ldw	fp,0(sp)
8112e424:	dec00204 	addi	sp,sp,8
8112e428:	f800283a 	ret

8112e42c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112e42c:	defff904 	addi	sp,sp,-28
8112e430:	de00012e 	bgeu	sp,et,8112e438 <OSFlagQuery+0xc>
8112e434:	003b68fa 	trap	3
8112e438:	df000615 	stw	fp,24(sp)
8112e43c:	df000604 	addi	fp,sp,24
8112e440:	e13ffe15 	stw	r4,-8(fp)
8112e444:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112e448:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112e44c:	e0bfff17 	ldw	r2,-4(fp)
8112e450:	1000021e 	bne	r2,zero,8112e45c <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112e454:	0005883a 	mov	r2,zero
8112e458:	00002306 	br	8112e4e8 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112e45c:	e0bffe17 	ldw	r2,-8(fp)
8112e460:	1000051e 	bne	r2,zero,8112e478 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112e464:	e0bfff17 	ldw	r2,-4(fp)
8112e468:	00c01b84 	movi	r3,110
8112e46c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e470:	0005883a 	mov	r2,zero
8112e474:	00001c06 	br	8112e4e8 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112e478:	e0bffe17 	ldw	r2,-8(fp)
8112e47c:	10800003 	ldbu	r2,0(r2)
8112e480:	10803fcc 	andi	r2,r2,255
8112e484:	10800160 	cmpeqi	r2,r2,5
8112e488:	1000051e 	bne	r2,zero,8112e4a0 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112e48c:	e0bfff17 	ldw	r2,-4(fp)
8112e490:	00c00044 	movi	r3,1
8112e494:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e498:	0005883a 	mov	r2,zero
8112e49c:	00001206 	br	8112e4e8 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e4a0:	0005303a 	rdctl	r2,status
8112e4a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e4a8:	e0fffc17 	ldw	r3,-16(fp)
8112e4ac:	00bfff84 	movi	r2,-2
8112e4b0:	1884703a 	and	r2,r3,r2
8112e4b4:	1001703a 	wrctl	status,r2
  
  return context;
8112e4b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e4bc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112e4c0:	e0bffe17 	ldw	r2,-8(fp)
8112e4c4:	1080020b 	ldhu	r2,8(r2)
8112e4c8:	e0bffb0d 	sth	r2,-20(fp)
8112e4cc:	e0bffa17 	ldw	r2,-24(fp)
8112e4d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e4d4:	e0bffd17 	ldw	r2,-12(fp)
8112e4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e4dc:	e0bfff17 	ldw	r2,-4(fp)
8112e4e0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112e4e4:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112e4e8:	e037883a 	mov	sp,fp
8112e4ec:	df000017 	ldw	fp,0(sp)
8112e4f0:	dec00104 	addi	sp,sp,4
8112e4f4:	f800283a 	ret

8112e4f8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112e4f8:	defff804 	addi	sp,sp,-32
8112e4fc:	de00012e 	bgeu	sp,et,8112e504 <OS_FlagBlock+0xc>
8112e500:	003b68fa 	trap	3
8112e504:	df000715 	stw	fp,28(sp)
8112e508:	df000704 	addi	fp,sp,28
8112e50c:	e13ffb15 	stw	r4,-20(fp)
8112e510:	e17ffc15 	stw	r5,-16(fp)
8112e514:	3009883a 	mov	r4,r6
8112e518:	3807883a 	mov	r3,r7
8112e51c:	e0800117 	ldw	r2,4(fp)
8112e520:	e13ffd0d 	sth	r4,-12(fp)
8112e524:	e0fffe05 	stb	r3,-8(fp)
8112e528:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112e52c:	d0a08c17 	ldw	r2,-32208(gp)
8112e530:	d0e08c17 	ldw	r3,-32208(gp)
8112e534:	18c00c03 	ldbu	r3,48(r3)
8112e538:	18c00814 	ori	r3,r3,32
8112e53c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112e540:	d0a08c17 	ldw	r2,-32208(gp)
8112e544:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112e548:	d0a08c17 	ldw	r2,-32208(gp)
8112e54c:	e0ffff0b 	ldhu	r3,-4(fp)
8112e550:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112e554:	d0a08c17 	ldw	r2,-32208(gp)
8112e558:	e0fffc17 	ldw	r3,-16(fp)
8112e55c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112e560:	e0bffc17 	ldw	r2,-16(fp)
8112e564:	e0fffd0b 	ldhu	r3,-12(fp)
8112e568:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112e56c:	e0bffc17 	ldw	r2,-16(fp)
8112e570:	e0fffe03 	ldbu	r3,-8(fp)
8112e574:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112e578:	d0e08c17 	ldw	r3,-32208(gp)
8112e57c:	e0bffc17 	ldw	r2,-16(fp)
8112e580:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112e584:	e0bffb17 	ldw	r2,-20(fp)
8112e588:	10c00117 	ldw	r3,4(r2)
8112e58c:	e0bffc17 	ldw	r2,-16(fp)
8112e590:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112e594:	e0bffc17 	ldw	r2,-16(fp)
8112e598:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112e59c:	e0bffc17 	ldw	r2,-16(fp)
8112e5a0:	e0fffb17 	ldw	r3,-20(fp)
8112e5a4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112e5a8:	e0bffb17 	ldw	r2,-20(fp)
8112e5ac:	10800117 	ldw	r2,4(r2)
8112e5b0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112e5b4:	e0bff917 	ldw	r2,-28(fp)
8112e5b8:	10000326 	beq	r2,zero,8112e5c8 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112e5bc:	e0bff917 	ldw	r2,-28(fp)
8112e5c0:	e0fffc17 	ldw	r3,-16(fp)
8112e5c4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112e5c8:	e0bffb17 	ldw	r2,-20(fp)
8112e5cc:	e0fffc17 	ldw	r3,-16(fp)
8112e5d0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112e5d4:	d0a08c17 	ldw	r2,-32208(gp)
8112e5d8:	10800d03 	ldbu	r2,52(r2)
8112e5dc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112e5e0:	e0fffa03 	ldbu	r3,-24(fp)
8112e5e4:	e13ffa03 	ldbu	r4,-24(fp)
8112e5e8:	d0a08844 	addi	r2,gp,-32223
8112e5ec:	2085883a 	add	r2,r4,r2
8112e5f0:	10800003 	ldbu	r2,0(r2)
8112e5f4:	1009883a 	mov	r4,r2
8112e5f8:	d0a08c17 	ldw	r2,-32208(gp)
8112e5fc:	10800d43 	ldbu	r2,53(r2)
8112e600:	0084303a 	nor	r2,zero,r2
8112e604:	2084703a 	and	r2,r4,r2
8112e608:	1009883a 	mov	r4,r2
8112e60c:	d0a08844 	addi	r2,gp,-32223
8112e610:	1885883a 	add	r2,r3,r2
8112e614:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112e618:	e0fffa03 	ldbu	r3,-24(fp)
8112e61c:	d0a08844 	addi	r2,gp,-32223
8112e620:	1885883a 	add	r2,r3,r2
8112e624:	10800003 	ldbu	r2,0(r2)
8112e628:	10803fcc 	andi	r2,r2,255
8112e62c:	1000071e 	bne	r2,zero,8112e64c <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112e630:	d0a08c17 	ldw	r2,-32208(gp)
8112e634:	10800d83 	ldbu	r2,54(r2)
8112e638:	0084303a 	nor	r2,zero,r2
8112e63c:	1007883a 	mov	r3,r2
8112e640:	d0a08803 	ldbu	r2,-32224(gp)
8112e644:	1884703a 	and	r2,r3,r2
8112e648:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112e64c:	0001883a 	nop
8112e650:	e037883a 	mov	sp,fp
8112e654:	df000017 	ldw	fp,0(sp)
8112e658:	dec00104 	addi	sp,sp,4
8112e65c:	f800283a 	ret

8112e660 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112e660:	defffb04 	addi	sp,sp,-20
8112e664:	de00012e 	bgeu	sp,et,8112e66c <OS_FlagInit+0xc>
8112e668:	003b68fa 	trap	3
8112e66c:	dfc00415 	stw	ra,16(sp)
8112e670:	df000315 	stw	fp,12(sp)
8112e674:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112e678:	01416004 	movi	r5,1408
8112e67c:	01204574 	movhi	r4,33045
8112e680:	210b6204 	addi	r4,r4,11656
8112e684:	112c78c0 	call	8112c78c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112e688:	00a04574 	movhi	r2,33045
8112e68c:	108b6204 	addi	r2,r2,11656
8112e690:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112e694:	00a04574 	movhi	r2,33045
8112e698:	108b6d04 	addi	r2,r2,11700
8112e69c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112e6a0:	e03ffd0d 	sth	zero,-12(fp)
8112e6a4:	00001306 	br	8112e6f4 <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112e6a8:	e0bffe17 	ldw	r2,-8(fp)
8112e6ac:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112e6b0:	e0bffe17 	ldw	r2,-8(fp)
8112e6b4:	e0ffff17 	ldw	r3,-4(fp)
8112e6b8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112e6bc:	e0bffe17 	ldw	r2,-8(fp)
8112e6c0:	00c00fc4 	movi	r3,63
8112e6c4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112e6c8:	e0bffe17 	ldw	r2,-8(fp)
8112e6cc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112e6d0:	e0bffe17 	ldw	r2,-8(fp)
8112e6d4:	10800b04 	addi	r2,r2,44
8112e6d8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112e6dc:	e0bfff17 	ldw	r2,-4(fp)
8112e6e0:	10800b04 	addi	r2,r2,44
8112e6e4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112e6e8:	e0bffd0b 	ldhu	r2,-12(fp)
8112e6ec:	10800044 	addi	r2,r2,1
8112e6f0:	e0bffd0d 	sth	r2,-12(fp)
8112e6f4:	e0bffd0b 	ldhu	r2,-12(fp)
8112e6f8:	108007f0 	cmpltui	r2,r2,31
8112e6fc:	103fea1e 	bne	r2,zero,8112e6a8 <__reset+0xfb10e6a8>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112e700:	e0bffe17 	ldw	r2,-8(fp)
8112e704:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112e708:	e0bffe17 	ldw	r2,-8(fp)
8112e70c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112e710:	e0bffe17 	ldw	r2,-8(fp)
8112e714:	00c00fc4 	movi	r3,63
8112e718:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112e71c:	e0bffe17 	ldw	r2,-8(fp)
8112e720:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112e724:	00a04574 	movhi	r2,33045
8112e728:	108b6204 	addi	r2,r2,11656
8112e72c:	d0a09015 	stw	r2,-32192(gp)
#endif
}
8112e730:	0001883a 	nop
8112e734:	e037883a 	mov	sp,fp
8112e738:	dfc00117 	ldw	ra,4(sp)
8112e73c:	df000017 	ldw	fp,0(sp)
8112e740:	dec00204 	addi	sp,sp,8
8112e744:	f800283a 	ret

8112e748 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112e748:	defffa04 	addi	sp,sp,-24
8112e74c:	de00012e 	bgeu	sp,et,8112e754 <OS_FlagTaskRdy+0xc>
8112e750:	003b68fa 	trap	3
8112e754:	dfc00515 	stw	ra,20(sp)
8112e758:	df000415 	stw	fp,16(sp)
8112e75c:	df000404 	addi	fp,sp,16
8112e760:	e13ffe15 	stw	r4,-8(fp)
8112e764:	2805883a 	mov	r2,r5
8112e768:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112e76c:	e0bffe17 	ldw	r2,-8(fp)
8112e770:	10800217 	ldw	r2,8(r2)
8112e774:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112e778:	e0bffd17 	ldw	r2,-12(fp)
8112e77c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112e780:	e0bffd17 	ldw	r2,-12(fp)
8112e784:	e0ffff0b 	ldhu	r3,-4(fp)
8112e788:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112e78c:	e0bffd17 	ldw	r2,-12(fp)
8112e790:	10c00c03 	ldbu	r3,48(r2)
8112e794:	00bff7c4 	movi	r2,-33
8112e798:	1884703a 	and	r2,r3,r2
8112e79c:	1007883a 	mov	r3,r2
8112e7a0:	e0bffd17 	ldw	r2,-12(fp)
8112e7a4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112e7a8:	e0bffd17 	ldw	r2,-12(fp)
8112e7ac:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112e7b0:	e0bffd17 	ldw	r2,-12(fp)
8112e7b4:	10800c03 	ldbu	r2,48(r2)
8112e7b8:	10803fcc 	andi	r2,r2,255
8112e7bc:	1000181e 	bne	r2,zero,8112e820 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112e7c0:	e0bffd17 	ldw	r2,-12(fp)
8112e7c4:	10c00d83 	ldbu	r3,54(r2)
8112e7c8:	d0a08803 	ldbu	r2,-32224(gp)
8112e7cc:	1884b03a 	or	r2,r3,r2
8112e7d0:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e7d4:	e0bffd17 	ldw	r2,-12(fp)
8112e7d8:	10800d03 	ldbu	r2,52(r2)
8112e7dc:	10c03fcc 	andi	r3,r2,255
8112e7e0:	e0bffd17 	ldw	r2,-12(fp)
8112e7e4:	10800d03 	ldbu	r2,52(r2)
8112e7e8:	11003fcc 	andi	r4,r2,255
8112e7ec:	d0a08844 	addi	r2,gp,-32223
8112e7f0:	2085883a 	add	r2,r4,r2
8112e7f4:	11000003 	ldbu	r4,0(r2)
8112e7f8:	e0bffd17 	ldw	r2,-12(fp)
8112e7fc:	10800d43 	ldbu	r2,53(r2)
8112e800:	2084b03a 	or	r2,r4,r2
8112e804:	1009883a 	mov	r4,r2
8112e808:	d0a08844 	addi	r2,gp,-32223
8112e80c:	1885883a 	add	r2,r3,r2
8112e810:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112e814:	00800044 	movi	r2,1
8112e818:	e0bffc05 	stb	r2,-16(fp)
8112e81c:	00000106 	br	8112e824 <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112e820:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112e824:	e13ffe17 	ldw	r4,-8(fp)
8112e828:	112e8440 	call	8112e844 <OS_FlagUnlink>
    return (sched);
8112e82c:	e0bffc03 	ldbu	r2,-16(fp)
}
8112e830:	e037883a 	mov	sp,fp
8112e834:	dfc00117 	ldw	ra,4(sp)
8112e838:	df000017 	ldw	fp,0(sp)
8112e83c:	dec00204 	addi	sp,sp,8
8112e840:	f800283a 	ret

8112e844 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112e844:	defffa04 	addi	sp,sp,-24
8112e848:	de00012e 	bgeu	sp,et,8112e850 <OS_FlagUnlink+0xc>
8112e84c:	003b68fa 	trap	3
8112e850:	df000515 	stw	fp,20(sp)
8112e854:	df000504 	addi	fp,sp,20
8112e858:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112e85c:	e0bfff17 	ldw	r2,-4(fp)
8112e860:	10800117 	ldw	r2,4(r2)
8112e864:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112e868:	e0bfff17 	ldw	r2,-4(fp)
8112e86c:	10800017 	ldw	r2,0(r2)
8112e870:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112e874:	e0bffb17 	ldw	r2,-20(fp)
8112e878:	10000b1e 	bne	r2,zero,8112e8a8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112e87c:	e0bfff17 	ldw	r2,-4(fp)
8112e880:	10800317 	ldw	r2,12(r2)
8112e884:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112e888:	e0bffd17 	ldw	r2,-12(fp)
8112e88c:	e0fffc17 	ldw	r3,-16(fp)
8112e890:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112e894:	e0bffc17 	ldw	r2,-16(fp)
8112e898:	10000b26 	beq	r2,zero,8112e8c8 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112e89c:	e0bffc17 	ldw	r2,-16(fp)
8112e8a0:	10000115 	stw	zero,4(r2)
8112e8a4:	00000806 	br	8112e8c8 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112e8a8:	e0bffb17 	ldw	r2,-20(fp)
8112e8ac:	e0fffc17 	ldw	r3,-16(fp)
8112e8b0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112e8b4:	e0bffc17 	ldw	r2,-16(fp)
8112e8b8:	10000326 	beq	r2,zero,8112e8c8 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112e8bc:	e0bffc17 	ldw	r2,-16(fp)
8112e8c0:	e0fffb17 	ldw	r3,-20(fp)
8112e8c4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112e8c8:	e0bfff17 	ldw	r2,-4(fp)
8112e8cc:	10800217 	ldw	r2,8(r2)
8112e8d0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112e8d4:	e0bffe17 	ldw	r2,-8(fp)
8112e8d8:	10000a15 	stw	zero,40(r2)
#endif
}
8112e8dc:	0001883a 	nop
8112e8e0:	e037883a 	mov	sp,fp
8112e8e4:	df000017 	ldw	fp,0(sp)
8112e8e8:	dec00104 	addi	sp,sp,4
8112e8ec:	f800283a 	ret

8112e8f0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112e8f0:	defff404 	addi	sp,sp,-48
8112e8f4:	de00012e 	bgeu	sp,et,8112e8fc <OSMemCreate+0xc>
8112e8f8:	003b68fa 	trap	3
8112e8fc:	df000b15 	stw	fp,44(sp)
8112e900:	df000b04 	addi	fp,sp,44
8112e904:	e13ffc15 	stw	r4,-16(fp)
8112e908:	e17ffd15 	stw	r5,-12(fp)
8112e90c:	e1bffe15 	stw	r6,-8(fp)
8112e910:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e914:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112e918:	e0bfff17 	ldw	r2,-4(fp)
8112e91c:	1000021e 	bne	r2,zero,8112e928 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112e920:	0005883a 	mov	r2,zero
8112e924:	00006506 	br	8112eabc <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112e928:	e0bffc17 	ldw	r2,-16(fp)
8112e92c:	1000051e 	bne	r2,zero,8112e944 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112e930:	e0bfff17 	ldw	r2,-4(fp)
8112e934:	00c01884 	movi	r3,98
8112e938:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112e93c:	0005883a 	mov	r2,zero
8112e940:	00005e06 	br	8112eabc <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112e944:	e0bffc17 	ldw	r2,-16(fp)
8112e948:	108000cc 	andi	r2,r2,3
8112e94c:	10000526 	beq	r2,zero,8112e964 <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112e950:	e0bfff17 	ldw	r2,-4(fp)
8112e954:	00c01884 	movi	r3,98
8112e958:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112e95c:	0005883a 	mov	r2,zero
8112e960:	00005606 	br	8112eabc <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112e964:	e0bffd17 	ldw	r2,-12(fp)
8112e968:	108000a8 	cmpgeui	r2,r2,2
8112e96c:	1000051e 	bne	r2,zero,8112e984 <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112e970:	e0bfff17 	ldw	r2,-4(fp)
8112e974:	00c016c4 	movi	r3,91
8112e978:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112e97c:	0005883a 	mov	r2,zero
8112e980:	00004e06 	br	8112eabc <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112e984:	e0bffe17 	ldw	r2,-8(fp)
8112e988:	10800128 	cmpgeui	r2,r2,4
8112e98c:	1000051e 	bne	r2,zero,8112e9a4 <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112e990:	e0bfff17 	ldw	r2,-4(fp)
8112e994:	00c01704 	movi	r3,92
8112e998:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112e99c:	0005883a 	mov	r2,zero
8112e9a0:	00004606 	br	8112eabc <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e9a4:	0005303a 	rdctl	r2,status
8112e9a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e9ac:	e0fffb17 	ldw	r3,-20(fp)
8112e9b0:	00bfff84 	movi	r2,-2
8112e9b4:	1884703a 	and	r2,r3,r2
8112e9b8:	1001703a 	wrctl	status,r2
  
  return context;
8112e9bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112e9c0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112e9c4:	d0a08517 	ldw	r2,-32236(gp)
8112e9c8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112e9cc:	d0a08517 	ldw	r2,-32236(gp)
8112e9d0:	10000326 	beq	r2,zero,8112e9e0 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112e9d4:	d0a08517 	ldw	r2,-32236(gp)
8112e9d8:	10800117 	ldw	r2,4(r2)
8112e9dc:	d0a08515 	stw	r2,-32236(gp)
8112e9e0:	e0bff817 	ldw	r2,-32(fp)
8112e9e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e9e8:	e0bff917 	ldw	r2,-28(fp)
8112e9ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112e9f0:	e0bffa17 	ldw	r2,-24(fp)
8112e9f4:	1000051e 	bne	r2,zero,8112ea0c <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112e9f8:	e0bfff17 	ldw	r2,-4(fp)
8112e9fc:	00c01684 	movi	r3,90
8112ea00:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112ea04:	0005883a 	mov	r2,zero
8112ea08:	00002c06 	br	8112eabc <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112ea0c:	e0bffc17 	ldw	r2,-16(fp)
8112ea10:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112ea14:	e0fffc17 	ldw	r3,-16(fp)
8112ea18:	e0bffe17 	ldw	r2,-8(fp)
8112ea1c:	1885883a 	add	r2,r3,r2
8112ea20:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112ea24:	e03ff715 	stw	zero,-36(fp)
8112ea28:	00000c06 	br	8112ea5c <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112ea2c:	e0bff617 	ldw	r2,-40(fp)
8112ea30:	e0fff517 	ldw	r3,-44(fp)
8112ea34:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112ea38:	e0bff517 	ldw	r2,-44(fp)
8112ea3c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112ea40:	e0fff517 	ldw	r3,-44(fp)
8112ea44:	e0bffe17 	ldw	r2,-8(fp)
8112ea48:	1885883a 	add	r2,r3,r2
8112ea4c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112ea50:	e0bff717 	ldw	r2,-36(fp)
8112ea54:	10800044 	addi	r2,r2,1
8112ea58:	e0bff715 	stw	r2,-36(fp)
8112ea5c:	e0bffd17 	ldw	r2,-12(fp)
8112ea60:	10bfffc4 	addi	r2,r2,-1
8112ea64:	e0fff717 	ldw	r3,-36(fp)
8112ea68:	18bff036 	bltu	r3,r2,8112ea2c <__reset+0xfb10ea2c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112ea6c:	e0bff617 	ldw	r2,-40(fp)
8112ea70:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112ea74:	e0bffa17 	ldw	r2,-24(fp)
8112ea78:	e0fffc17 	ldw	r3,-16(fp)
8112ea7c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112ea80:	e0bffa17 	ldw	r2,-24(fp)
8112ea84:	e0fffc17 	ldw	r3,-16(fp)
8112ea88:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112ea8c:	e0bffa17 	ldw	r2,-24(fp)
8112ea90:	e0fffd17 	ldw	r3,-12(fp)
8112ea94:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112ea98:	e0bffa17 	ldw	r2,-24(fp)
8112ea9c:	e0fffd17 	ldw	r3,-12(fp)
8112eaa0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112eaa4:	e0bffa17 	ldw	r2,-24(fp)
8112eaa8:	e0fffe17 	ldw	r3,-8(fp)
8112eaac:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112eab0:	e0bfff17 	ldw	r2,-4(fp)
8112eab4:	10000005 	stb	zero,0(r2)
    return (pmem);
8112eab8:	e0bffa17 	ldw	r2,-24(fp)
}
8112eabc:	e037883a 	mov	sp,fp
8112eac0:	df000017 	ldw	fp,0(sp)
8112eac4:	dec00104 	addi	sp,sp,4
8112eac8:	f800283a 	ret

8112eacc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112eacc:	defff804 	addi	sp,sp,-32
8112ead0:	de00012e 	bgeu	sp,et,8112ead8 <OSMemGet+0xc>
8112ead4:	003b68fa 	trap	3
8112ead8:	df000715 	stw	fp,28(sp)
8112eadc:	df000704 	addi	fp,sp,28
8112eae0:	e13ffe15 	stw	r4,-8(fp)
8112eae4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112eae8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112eaec:	e0bfff17 	ldw	r2,-4(fp)
8112eaf0:	1000021e 	bne	r2,zero,8112eafc <OSMemGet+0x30>
        return ((void *)0);
8112eaf4:	0005883a 	mov	r2,zero
8112eaf8:	00002e06 	br	8112ebb4 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112eafc:	e0bffe17 	ldw	r2,-8(fp)
8112eb00:	1000051e 	bne	r2,zero,8112eb18 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112eb04:	e0bfff17 	ldw	r2,-4(fp)
8112eb08:	00c01804 	movi	r3,96
8112eb0c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112eb10:	0005883a 	mov	r2,zero
8112eb14:	00002706 	br	8112ebb4 <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eb18:	0005303a 	rdctl	r2,status
8112eb1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eb20:	e0fffd17 	ldw	r3,-12(fp)
8112eb24:	00bfff84 	movi	r2,-2
8112eb28:	1884703a 	and	r2,r3,r2
8112eb2c:	1001703a 	wrctl	status,r2
  
  return context;
8112eb30:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112eb34:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112eb38:	e0bffe17 	ldw	r2,-8(fp)
8112eb3c:	10800417 	ldw	r2,16(r2)
8112eb40:	10001426 	beq	r2,zero,8112eb94 <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112eb44:	e0bffe17 	ldw	r2,-8(fp)
8112eb48:	10800117 	ldw	r2,4(r2)
8112eb4c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112eb50:	e0bffb17 	ldw	r2,-20(fp)
8112eb54:	10c00017 	ldw	r3,0(r2)
8112eb58:	e0bffe17 	ldw	r2,-8(fp)
8112eb5c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112eb60:	e0bffe17 	ldw	r2,-8(fp)
8112eb64:	10800417 	ldw	r2,16(r2)
8112eb68:	10ffffc4 	addi	r3,r2,-1
8112eb6c:	e0bffe17 	ldw	r2,-8(fp)
8112eb70:	10c00415 	stw	r3,16(r2)
8112eb74:	e0bff917 	ldw	r2,-28(fp)
8112eb78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eb7c:	e0bffa17 	ldw	r2,-24(fp)
8112eb80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112eb84:	e0bfff17 	ldw	r2,-4(fp)
8112eb88:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112eb8c:	e0bffb17 	ldw	r2,-20(fp)
8112eb90:	00000806 	br	8112ebb4 <OSMemGet+0xe8>
8112eb94:	e0bff917 	ldw	r2,-28(fp)
8112eb98:	e0bffc15 	stw	r2,-16(fp)
8112eb9c:	e0bffc17 	ldw	r2,-16(fp)
8112eba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112eba4:	e0bfff17 	ldw	r2,-4(fp)
8112eba8:	00c01744 	movi	r3,93
8112ebac:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112ebb0:	0005883a 	mov	r2,zero
}
8112ebb4:	e037883a 	mov	sp,fp
8112ebb8:	df000017 	ldw	fp,0(sp)
8112ebbc:	dec00104 	addi	sp,sp,4
8112ebc0:	f800283a 	ret

8112ebc4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112ebc4:	defff704 	addi	sp,sp,-36
8112ebc8:	de00012e 	bgeu	sp,et,8112ebd0 <OSMemNameGet+0xc>
8112ebcc:	003b68fa 	trap	3
8112ebd0:	dfc00815 	stw	ra,32(sp)
8112ebd4:	df000715 	stw	fp,28(sp)
8112ebd8:	df000704 	addi	fp,sp,28
8112ebdc:	e13ffd15 	stw	r4,-12(fp)
8112ebe0:	e17ffe15 	stw	r5,-8(fp)
8112ebe4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ebe8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ebec:	e0bfff17 	ldw	r2,-4(fp)
8112ebf0:	1000021e 	bne	r2,zero,8112ebfc <OSMemNameGet+0x38>
        return (0);
8112ebf4:	0005883a 	mov	r2,zero
8112ebf8:	00002b06 	br	8112eca8 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112ebfc:	e0bffd17 	ldw	r2,-12(fp)
8112ec00:	1000051e 	bne	r2,zero,8112ec18 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112ec04:	e0bfff17 	ldw	r2,-4(fp)
8112ec08:	00c01804 	movi	r3,96
8112ec0c:	10c00005 	stb	r3,0(r2)
        return (0);
8112ec10:	0005883a 	mov	r2,zero
8112ec14:	00002406 	br	8112eca8 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112ec18:	e0bffe17 	ldw	r2,-8(fp)
8112ec1c:	1000051e 	bne	r2,zero,8112ec34 <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112ec20:	e0bfff17 	ldw	r2,-4(fp)
8112ec24:	00c00304 	movi	r3,12
8112ec28:	10c00005 	stb	r3,0(r2)
        return (0);
8112ec2c:	0005883a 	mov	r2,zero
8112ec30:	00001d06 	br	8112eca8 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112ec34:	d0a08b03 	ldbu	r2,-32212(gp)
8112ec38:	10803fcc 	andi	r2,r2,255
8112ec3c:	10000526 	beq	r2,zero,8112ec54 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112ec40:	e0bfff17 	ldw	r2,-4(fp)
8112ec44:	00c00444 	movi	r3,17
8112ec48:	10c00005 	stb	r3,0(r2)
        return (0);
8112ec4c:	0005883a 	mov	r2,zero
8112ec50:	00001506 	br	8112eca8 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ec54:	0005303a 	rdctl	r2,status
8112ec58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ec5c:	e0fffb17 	ldw	r3,-20(fp)
8112ec60:	00bfff84 	movi	r2,-2
8112ec64:	1884703a 	and	r2,r3,r2
8112ec68:	1001703a 	wrctl	status,r2
  
  return context;
8112ec6c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112ec70:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112ec74:	e0bffd17 	ldw	r2,-12(fp)
8112ec78:	10800504 	addi	r2,r2,20
8112ec7c:	100b883a 	mov	r5,r2
8112ec80:	e13ffe17 	ldw	r4,-8(fp)
8112ec84:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112ec88:	e0bffa05 	stb	r2,-24(fp)
8112ec8c:	e0bff917 	ldw	r2,-28(fp)
8112ec90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ec94:	e0bffc17 	ldw	r2,-16(fp)
8112ec98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112ec9c:	e0bfff17 	ldw	r2,-4(fp)
8112eca0:	10000005 	stb	zero,0(r2)
    return (len);
8112eca4:	e0bffa03 	ldbu	r2,-24(fp)
}
8112eca8:	e037883a 	mov	sp,fp
8112ecac:	dfc00117 	ldw	ra,4(sp)
8112ecb0:	df000017 	ldw	fp,0(sp)
8112ecb4:	dec00204 	addi	sp,sp,8
8112ecb8:	f800283a 	ret

8112ecbc <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112ecbc:	defff604 	addi	sp,sp,-40
8112ecc0:	de00012e 	bgeu	sp,et,8112ecc8 <OSMemNameSet+0xc>
8112ecc4:	003b68fa 	trap	3
8112ecc8:	dfc00915 	stw	ra,36(sp)
8112eccc:	df000815 	stw	fp,32(sp)
8112ecd0:	df000804 	addi	fp,sp,32
8112ecd4:	e13ffd15 	stw	r4,-12(fp)
8112ecd8:	e17ffe15 	stw	r5,-8(fp)
8112ecdc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ece0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ece4:	e0bfff17 	ldw	r2,-4(fp)
8112ece8:	10003526 	beq	r2,zero,8112edc0 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112ecec:	e0bffd17 	ldw	r2,-12(fp)
8112ecf0:	1000041e 	bne	r2,zero,8112ed04 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112ecf4:	e0bfff17 	ldw	r2,-4(fp)
8112ecf8:	00c01804 	movi	r3,96
8112ecfc:	10c00005 	stb	r3,0(r2)
        return;
8112ed00:	00003006 	br	8112edc4 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112ed04:	e0bffe17 	ldw	r2,-8(fp)
8112ed08:	1000041e 	bne	r2,zero,8112ed1c <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112ed0c:	e0bfff17 	ldw	r2,-4(fp)
8112ed10:	00c00304 	movi	r3,12
8112ed14:	10c00005 	stb	r3,0(r2)
        return;
8112ed18:	00002a06 	br	8112edc4 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112ed1c:	d0a08b03 	ldbu	r2,-32212(gp)
8112ed20:	10803fcc 	andi	r2,r2,255
8112ed24:	10000426 	beq	r2,zero,8112ed38 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112ed28:	e0bfff17 	ldw	r2,-4(fp)
8112ed2c:	00c00484 	movi	r3,18
8112ed30:	10c00005 	stb	r3,0(r2)
        return;
8112ed34:	00002306 	br	8112edc4 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ed38:	0005303a 	rdctl	r2,status
8112ed3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ed40:	e0fffc17 	ldw	r3,-16(fp)
8112ed44:	00bfff84 	movi	r2,-2
8112ed48:	1884703a 	and	r2,r3,r2
8112ed4c:	1001703a 	wrctl	status,r2
  
  return context;
8112ed50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ed54:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112ed58:	e13ffe17 	ldw	r4,-8(fp)
8112ed5c:	112ca280 	call	8112ca28 <OS_StrLen>
8112ed60:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112ed64:	e0bffa03 	ldbu	r2,-24(fp)
8112ed68:	10800830 	cmpltui	r2,r2,32
8112ed6c:	1000081e 	bne	r2,zero,8112ed90 <OSMemNameSet+0xd4>
8112ed70:	e0bff817 	ldw	r2,-32(fp)
8112ed74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ed78:	e0bff917 	ldw	r2,-28(fp)
8112ed7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112ed80:	e0bfff17 	ldw	r2,-4(fp)
8112ed84:	00c018c4 	movi	r3,99
8112ed88:	10c00005 	stb	r3,0(r2)
        return;
8112ed8c:	00000d06 	br	8112edc4 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112ed90:	e0bffd17 	ldw	r2,-12(fp)
8112ed94:	10800504 	addi	r2,r2,20
8112ed98:	e17ffe17 	ldw	r5,-8(fp)
8112ed9c:	1009883a 	mov	r4,r2
8112eda0:	112c9ac0 	call	8112c9ac <OS_StrCopy>
8112eda4:	e0bff817 	ldw	r2,-32(fp)
8112eda8:	e0bffb15 	stw	r2,-20(fp)
8112edac:	e0bffb17 	ldw	r2,-20(fp)
8112edb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112edb4:	e0bfff17 	ldw	r2,-4(fp)
8112edb8:	10000005 	stb	zero,0(r2)
8112edbc:	00000106 	br	8112edc4 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112edc0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112edc4:	e037883a 	mov	sp,fp
8112edc8:	dfc00117 	ldw	ra,4(sp)
8112edcc:	df000017 	ldw	fp,0(sp)
8112edd0:	dec00204 	addi	sp,sp,8
8112edd4:	f800283a 	ret

8112edd8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112edd8:	defff904 	addi	sp,sp,-28
8112eddc:	de00012e 	bgeu	sp,et,8112ede4 <OSMemPut+0xc>
8112ede0:	003b68fa 	trap	3
8112ede4:	df000615 	stw	fp,24(sp)
8112ede8:	df000604 	addi	fp,sp,24
8112edec:	e13ffe15 	stw	r4,-8(fp)
8112edf0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112edf4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112edf8:	e0bffe17 	ldw	r2,-8(fp)
8112edfc:	1000021e 	bne	r2,zero,8112ee08 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112ee00:	00801804 	movi	r2,96
8112ee04:	00002806 	br	8112eea8 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112ee08:	e0bfff17 	ldw	r2,-4(fp)
8112ee0c:	1000021e 	bne	r2,zero,8112ee18 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112ee10:	008017c4 	movi	r2,95
8112ee14:	00002406 	br	8112eea8 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ee18:	0005303a 	rdctl	r2,status
8112ee1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ee20:	e0fffd17 	ldw	r3,-12(fp)
8112ee24:	00bfff84 	movi	r2,-2
8112ee28:	1884703a 	and	r2,r3,r2
8112ee2c:	1001703a 	wrctl	status,r2
  
  return context;
8112ee30:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112ee34:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112ee38:	e0bffe17 	ldw	r2,-8(fp)
8112ee3c:	10c00417 	ldw	r3,16(r2)
8112ee40:	e0bffe17 	ldw	r2,-8(fp)
8112ee44:	10800317 	ldw	r2,12(r2)
8112ee48:	18800636 	bltu	r3,r2,8112ee64 <OSMemPut+0x8c>
8112ee4c:	e0bffa17 	ldw	r2,-24(fp)
8112ee50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ee54:	e0bffb17 	ldw	r2,-20(fp)
8112ee58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112ee5c:	00801784 	movi	r2,94
8112ee60:	00001106 	br	8112eea8 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112ee64:	e0bffe17 	ldw	r2,-8(fp)
8112ee68:	10c00117 	ldw	r3,4(r2)
8112ee6c:	e0bfff17 	ldw	r2,-4(fp)
8112ee70:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112ee74:	e0bffe17 	ldw	r2,-8(fp)
8112ee78:	e0ffff17 	ldw	r3,-4(fp)
8112ee7c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112ee80:	e0bffe17 	ldw	r2,-8(fp)
8112ee84:	10800417 	ldw	r2,16(r2)
8112ee88:	10c00044 	addi	r3,r2,1
8112ee8c:	e0bffe17 	ldw	r2,-8(fp)
8112ee90:	10c00415 	stw	r3,16(r2)
8112ee94:	e0bffa17 	ldw	r2,-24(fp)
8112ee98:	e0bffc15 	stw	r2,-16(fp)
8112ee9c:	e0bffc17 	ldw	r2,-16(fp)
8112eea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112eea4:	0005883a 	mov	r2,zero
}
8112eea8:	e037883a 	mov	sp,fp
8112eeac:	df000017 	ldw	fp,0(sp)
8112eeb0:	dec00104 	addi	sp,sp,4
8112eeb4:	f800283a 	ret

8112eeb8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112eeb8:	defffa04 	addi	sp,sp,-24
8112eebc:	de00012e 	bgeu	sp,et,8112eec4 <OSMemQuery+0xc>
8112eec0:	003b68fa 	trap	3
8112eec4:	df000515 	stw	fp,20(sp)
8112eec8:	df000504 	addi	fp,sp,20
8112eecc:	e13ffe15 	stw	r4,-8(fp)
8112eed0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112eed4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112eed8:	e0bffe17 	ldw	r2,-8(fp)
8112eedc:	1000021e 	bne	r2,zero,8112eee8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112eee0:	00801804 	movi	r2,96
8112eee4:	00002c06 	br	8112ef98 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112eee8:	e0bfff17 	ldw	r2,-4(fp)
8112eeec:	1000021e 	bne	r2,zero,8112eef8 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112eef0:	00801844 	movi	r2,97
8112eef4:	00002806 	br	8112ef98 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eef8:	0005303a 	rdctl	r2,status
8112eefc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ef00:	e0fffc17 	ldw	r3,-16(fp)
8112ef04:	00bfff84 	movi	r2,-2
8112ef08:	1884703a 	and	r2,r3,r2
8112ef0c:	1001703a 	wrctl	status,r2
  
  return context;
8112ef10:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112ef14:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112ef18:	e0bffe17 	ldw	r2,-8(fp)
8112ef1c:	10c00017 	ldw	r3,0(r2)
8112ef20:	e0bfff17 	ldw	r2,-4(fp)
8112ef24:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112ef28:	e0bffe17 	ldw	r2,-8(fp)
8112ef2c:	10c00117 	ldw	r3,4(r2)
8112ef30:	e0bfff17 	ldw	r2,-4(fp)
8112ef34:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112ef38:	e0bffe17 	ldw	r2,-8(fp)
8112ef3c:	10c00217 	ldw	r3,8(r2)
8112ef40:	e0bfff17 	ldw	r2,-4(fp)
8112ef44:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112ef48:	e0bffe17 	ldw	r2,-8(fp)
8112ef4c:	10c00317 	ldw	r3,12(r2)
8112ef50:	e0bfff17 	ldw	r2,-4(fp)
8112ef54:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112ef58:	e0bffe17 	ldw	r2,-8(fp)
8112ef5c:	10c00417 	ldw	r3,16(r2)
8112ef60:	e0bfff17 	ldw	r2,-4(fp)
8112ef64:	10c00415 	stw	r3,16(r2)
8112ef68:	e0bffb17 	ldw	r2,-20(fp)
8112ef6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ef70:	e0bffd17 	ldw	r2,-12(fp)
8112ef74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112ef78:	e0bfff17 	ldw	r2,-4(fp)
8112ef7c:	10c00317 	ldw	r3,12(r2)
8112ef80:	e0bfff17 	ldw	r2,-4(fp)
8112ef84:	10800417 	ldw	r2,16(r2)
8112ef88:	1887c83a 	sub	r3,r3,r2
8112ef8c:	e0bfff17 	ldw	r2,-4(fp)
8112ef90:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112ef94:	0005883a 	mov	r2,zero
}
8112ef98:	e037883a 	mov	sp,fp
8112ef9c:	df000017 	ldw	fp,0(sp)
8112efa0:	dec00104 	addi	sp,sp,4
8112efa4:	f800283a 	ret

8112efa8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112efa8:	defffc04 	addi	sp,sp,-16
8112efac:	de00012e 	bgeu	sp,et,8112efb4 <OS_MemInit+0xc>
8112efb0:	003b68fa 	trap	3
8112efb4:	dfc00315 	stw	ra,12(sp)
8112efb8:	df000215 	stw	fp,8(sp)
8112efbc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112efc0:	01430c04 	movi	r5,3120
8112efc4:	01204574 	movhi	r4,33045
8112efc8:	210d2a04 	addi	r4,r4,13480
8112efcc:	112c78c0 	call	8112c78c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112efd0:	00a04574 	movhi	r2,33045
8112efd4:	108d2a04 	addi	r2,r2,13480
8112efd8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112efdc:	e03fff0d 	sth	zero,-4(fp)
8112efe0:	00001306 	br	8112f030 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112efe4:	e0bfff0b 	ldhu	r2,-4(fp)
8112efe8:	10800044 	addi	r2,r2,1
8112efec:	10c00d24 	muli	r3,r2,52
8112eff0:	00a04574 	movhi	r2,33045
8112eff4:	108d2a04 	addi	r2,r2,13480
8112eff8:	1887883a 	add	r3,r3,r2
8112effc:	e0bffe17 	ldw	r2,-8(fp)
8112f000:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112f004:	e0bffe17 	ldw	r2,-8(fp)
8112f008:	00c00fc4 	movi	r3,63
8112f00c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112f010:	e0bffe17 	ldw	r2,-8(fp)
8112f014:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112f018:	e0bffe17 	ldw	r2,-8(fp)
8112f01c:	10800d04 	addi	r2,r2,52
8112f020:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112f024:	e0bfff0b 	ldhu	r2,-4(fp)
8112f028:	10800044 	addi	r2,r2,1
8112f02c:	e0bfff0d 	sth	r2,-4(fp)
8112f030:	e0bfff0b 	ldhu	r2,-4(fp)
8112f034:	10800ef0 	cmpltui	r2,r2,59
8112f038:	103fea1e 	bne	r2,zero,8112efe4 <__reset+0xfb10efe4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112f03c:	e0bffe17 	ldw	r2,-8(fp)
8112f040:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112f044:	e0bffe17 	ldw	r2,-8(fp)
8112f048:	00c00fc4 	movi	r3,63
8112f04c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112f050:	e0bffe17 	ldw	r2,-8(fp)
8112f054:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112f058:	00a04574 	movhi	r2,33045
8112f05c:	108d2a04 	addi	r2,r2,13480
8112f060:	d0a08515 	stw	r2,-32236(gp)
#endif
}
8112f064:	0001883a 	nop
8112f068:	e037883a 	mov	sp,fp
8112f06c:	dfc00117 	ldw	ra,4(sp)
8112f070:	df000017 	ldw	fp,0(sp)
8112f074:	dec00204 	addi	sp,sp,8
8112f078:	f800283a 	ret

8112f07c <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112f07c:	defff704 	addi	sp,sp,-36
8112f080:	de00012e 	bgeu	sp,et,8112f088 <OSMutexAccept+0xc>
8112f084:	003b68fa 	trap	3
8112f088:	df000815 	stw	fp,32(sp)
8112f08c:	df000804 	addi	fp,sp,32
8112f090:	e13ffe15 	stw	r4,-8(fp)
8112f094:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112f098:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112f09c:	e0bfff17 	ldw	r2,-4(fp)
8112f0a0:	1000021e 	bne	r2,zero,8112f0ac <OSMutexAccept+0x30>
        return (OS_FALSE);
8112f0a4:	0005883a 	mov	r2,zero
8112f0a8:	00005b06 	br	8112f218 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112f0ac:	e0bffe17 	ldw	r2,-8(fp)
8112f0b0:	1000051e 	bne	r2,zero,8112f0c8 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112f0b4:	e0bfff17 	ldw	r2,-4(fp)
8112f0b8:	00c00104 	movi	r3,4
8112f0bc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f0c0:	0005883a 	mov	r2,zero
8112f0c4:	00005406 	br	8112f218 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112f0c8:	e0bffe17 	ldw	r2,-8(fp)
8112f0cc:	10800003 	ldbu	r2,0(r2)
8112f0d0:	10803fcc 	andi	r2,r2,255
8112f0d4:	10800120 	cmpeqi	r2,r2,4
8112f0d8:	1000051e 	bne	r2,zero,8112f0f0 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112f0dc:	e0bfff17 	ldw	r2,-4(fp)
8112f0e0:	00c00044 	movi	r3,1
8112f0e4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f0e8:	0005883a 	mov	r2,zero
8112f0ec:	00004a06 	br	8112f218 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112f0f0:	d0a08b03 	ldbu	r2,-32212(gp)
8112f0f4:	10803fcc 	andi	r2,r2,255
8112f0f8:	10000526 	beq	r2,zero,8112f110 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112f0fc:	e0bfff17 	ldw	r2,-4(fp)
8112f100:	00c00084 	movi	r3,2
8112f104:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f108:	0005883a 	mov	r2,zero
8112f10c:	00004206 	br	8112f218 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f110:	0005303a 	rdctl	r2,status
8112f114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f118:	e0fffd17 	ldw	r3,-12(fp)
8112f11c:	00bfff84 	movi	r2,-2
8112f120:	1884703a 	and	r2,r3,r2
8112f124:	1001703a 	wrctl	status,r2
  
  return context;
8112f128:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112f12c:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112f130:	e0bffe17 	ldw	r2,-8(fp)
8112f134:	1080020b 	ldhu	r2,8(r2)
8112f138:	10bfffcc 	andi	r2,r2,65535
8112f13c:	1004d23a 	srli	r2,r2,8
8112f140:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112f144:	e0bffe17 	ldw	r2,-8(fp)
8112f148:	1080020b 	ldhu	r2,8(r2)
8112f14c:	10bfffcc 	andi	r2,r2,65535
8112f150:	10803fcc 	andi	r2,r2,255
8112f154:	10803fd8 	cmpnei	r2,r2,255
8112f158:	1000281e 	bne	r2,zero,8112f1fc <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112f15c:	e0bffe17 	ldw	r2,-8(fp)
8112f160:	10c0020b 	ldhu	r3,8(r2)
8112f164:	00bfc004 	movi	r2,-256
8112f168:	1884703a 	and	r2,r3,r2
8112f16c:	1007883a 	mov	r3,r2
8112f170:	e0bffe17 	ldw	r2,-8(fp)
8112f174:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112f178:	e0bffe17 	ldw	r2,-8(fp)
8112f17c:	10c0020b 	ldhu	r3,8(r2)
8112f180:	d0a08c17 	ldw	r2,-32208(gp)
8112f184:	10800c83 	ldbu	r2,50(r2)
8112f188:	10803fcc 	andi	r2,r2,255
8112f18c:	1884b03a 	or	r2,r3,r2
8112f190:	1007883a 	mov	r3,r2
8112f194:	e0bffe17 	ldw	r2,-8(fp)
8112f198:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112f19c:	d0e08c17 	ldw	r3,-32208(gp)
8112f1a0:	e0bffe17 	ldw	r2,-8(fp)
8112f1a4:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112f1a8:	d0a08c17 	ldw	r2,-32208(gp)
8112f1ac:	10800c83 	ldbu	r2,50(r2)
8112f1b0:	10803fcc 	andi	r2,r2,255
8112f1b4:	e0fffa03 	ldbu	r3,-24(fp)
8112f1b8:	18800836 	bltu	r3,r2,8112f1dc <OSMutexAccept+0x160>
8112f1bc:	e0bff817 	ldw	r2,-32(fp)
8112f1c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f1c4:	e0bff917 	ldw	r2,-28(fp)
8112f1c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112f1cc:	e0bfff17 	ldw	r2,-4(fp)
8112f1d0:	00c01e04 	movi	r3,120
8112f1d4:	10c00005 	stb	r3,0(r2)
8112f1d8:	00000606 	br	8112f1f4 <OSMutexAccept+0x178>
8112f1dc:	e0bff817 	ldw	r2,-32(fp)
8112f1e0:	e0bffb15 	stw	r2,-20(fp)
8112f1e4:	e0bffb17 	ldw	r2,-20(fp)
8112f1e8:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112f1ec:	e0bfff17 	ldw	r2,-4(fp)
8112f1f0:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112f1f4:	00800044 	movi	r2,1
8112f1f8:	00000706 	br	8112f218 <OSMutexAccept+0x19c>
8112f1fc:	e0bff817 	ldw	r2,-32(fp)
8112f200:	e0bffc15 	stw	r2,-16(fp)
8112f204:	e0bffc17 	ldw	r2,-16(fp)
8112f208:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f20c:	e0bfff17 	ldw	r2,-4(fp)
8112f210:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112f214:	0005883a 	mov	r2,zero
}
8112f218:	e037883a 	mov	sp,fp
8112f21c:	df000017 	ldw	fp,0(sp)
8112f220:	dec00104 	addi	sp,sp,4
8112f224:	f800283a 	ret

8112f228 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112f228:	defff604 	addi	sp,sp,-40
8112f22c:	de00012e 	bgeu	sp,et,8112f234 <OSMutexCreate+0xc>
8112f230:	003b68fa 	trap	3
8112f234:	dfc00915 	stw	ra,36(sp)
8112f238:	df000815 	stw	fp,32(sp)
8112f23c:	df000804 	addi	fp,sp,32
8112f240:	2005883a 	mov	r2,r4
8112f244:	e17fff15 	stw	r5,-4(fp)
8112f248:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f24c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f250:	e0bfff17 	ldw	r2,-4(fp)
8112f254:	1000021e 	bne	r2,zero,8112f260 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112f258:	0005883a 	mov	r2,zero
8112f25c:	00006106 	br	8112f3e4 <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112f260:	e0bffe03 	ldbu	r2,-8(fp)
8112f264:	10800a30 	cmpltui	r2,r2,40
8112f268:	1000051e 	bne	r2,zero,8112f280 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112f26c:	e0bfff17 	ldw	r2,-4(fp)
8112f270:	00c00a84 	movi	r3,42
8112f274:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f278:	0005883a 	mov	r2,zero
8112f27c:	00005906 	br	8112f3e4 <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112f280:	d0a08b03 	ldbu	r2,-32212(gp)
8112f284:	10803fcc 	andi	r2,r2,255
8112f288:	10000526 	beq	r2,zero,8112f2a0 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112f28c:	e0bfff17 	ldw	r2,-4(fp)
8112f290:	00c00404 	movi	r3,16
8112f294:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f298:	0005883a 	mov	r2,zero
8112f29c:	00005106 	br	8112f3e4 <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f2a0:	0005303a 	rdctl	r2,status
8112f2a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f2a8:	e0fffd17 	ldw	r3,-12(fp)
8112f2ac:	00bfff84 	movi	r2,-2
8112f2b0:	1884703a 	and	r2,r3,r2
8112f2b4:	1001703a 	wrctl	status,r2
  
  return context;
8112f2b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f2bc:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112f2c0:	e0fffe03 	ldbu	r3,-8(fp)
8112f2c4:	00a04574 	movhi	r2,33045
8112f2c8:	109c6c04 	addi	r2,r2,29104
8112f2cc:	18c7883a 	add	r3,r3,r3
8112f2d0:	18c7883a 	add	r3,r3,r3
8112f2d4:	10c5883a 	add	r2,r2,r3
8112f2d8:	10800017 	ldw	r2,0(r2)
8112f2dc:	10000926 	beq	r2,zero,8112f304 <OSMutexCreate+0xdc>
8112f2e0:	e0bff817 	ldw	r2,-32(fp)
8112f2e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f2e8:	e0bff917 	ldw	r2,-28(fp)
8112f2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112f2f0:	e0bfff17 	ldw	r2,-4(fp)
8112f2f4:	00c00a04 	movi	r3,40
8112f2f8:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f2fc:	0005883a 	mov	r2,zero
8112f300:	00003806 	br	8112f3e4 <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112f304:	e0fffe03 	ldbu	r3,-8(fp)
8112f308:	00a04574 	movhi	r2,33045
8112f30c:	109c6c04 	addi	r2,r2,29104
8112f310:	18c7883a 	add	r3,r3,r3
8112f314:	18c7883a 	add	r3,r3,r3
8112f318:	10c5883a 	add	r2,r2,r3
8112f31c:	00c00044 	movi	r3,1
8112f320:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112f324:	d0a08a17 	ldw	r2,-32216(gp)
8112f328:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112f32c:	e0bffb17 	ldw	r2,-20(fp)
8112f330:	1000101e 	bne	r2,zero,8112f374 <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112f334:	e0fffe03 	ldbu	r3,-8(fp)
8112f338:	00a04574 	movhi	r2,33045
8112f33c:	109c6c04 	addi	r2,r2,29104
8112f340:	18c7883a 	add	r3,r3,r3
8112f344:	18c7883a 	add	r3,r3,r3
8112f348:	10c5883a 	add	r2,r2,r3
8112f34c:	10000015 	stw	zero,0(r2)
8112f350:	e0bff817 	ldw	r2,-32(fp)
8112f354:	e0bffa15 	stw	r2,-24(fp)
8112f358:	e0bffa17 	ldw	r2,-24(fp)
8112f35c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112f360:	e0bfff17 	ldw	r2,-4(fp)
8112f364:	00c00104 	movi	r3,4
8112f368:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f36c:	e0bffb17 	ldw	r2,-20(fp)
8112f370:	00001c06 	br	8112f3e4 <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112f374:	d0a08a17 	ldw	r2,-32216(gp)
8112f378:	10800117 	ldw	r2,4(r2)
8112f37c:	d0a08a15 	stw	r2,-32216(gp)
8112f380:	e0bff817 	ldw	r2,-32(fp)
8112f384:	e0bffc15 	stw	r2,-16(fp)
8112f388:	e0bffc17 	ldw	r2,-16(fp)
8112f38c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112f390:	e0bffb17 	ldw	r2,-20(fp)
8112f394:	00c00104 	movi	r3,4
8112f398:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112f39c:	e0bffe03 	ldbu	r2,-8(fp)
8112f3a0:	1004923a 	slli	r2,r2,8
8112f3a4:	10803fd4 	ori	r2,r2,255
8112f3a8:	1007883a 	mov	r3,r2
8112f3ac:	e0bffb17 	ldw	r2,-20(fp)
8112f3b0:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112f3b4:	e0bffb17 	ldw	r2,-20(fp)
8112f3b8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112f3bc:	e0bffb17 	ldw	r2,-20(fp)
8112f3c0:	00c00fc4 	movi	r3,63
8112f3c4:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112f3c8:	e0bffb17 	ldw	r2,-20(fp)
8112f3cc:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112f3d0:	e13ffb17 	ldw	r4,-20(fp)
8112f3d4:	112c3740 	call	8112c374 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112f3d8:	e0bfff17 	ldw	r2,-4(fp)
8112f3dc:	10000005 	stb	zero,0(r2)
    return (pevent);
8112f3e0:	e0bffb17 	ldw	r2,-20(fp)
}
8112f3e4:	e037883a 	mov	sp,fp
8112f3e8:	dfc00117 	ldw	ra,4(sp)
8112f3ec:	df000017 	ldw	fp,0(sp)
8112f3f0:	dec00204 	addi	sp,sp,8
8112f3f4:	f800283a 	ret

8112f3f8 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112f3f8:	defff004 	addi	sp,sp,-64
8112f3fc:	de00012e 	bgeu	sp,et,8112f404 <OSMutexDel+0xc>
8112f400:	003b68fa 	trap	3
8112f404:	dfc00f15 	stw	ra,60(sp)
8112f408:	df000e15 	stw	fp,56(sp)
8112f40c:	df000e04 	addi	fp,sp,56
8112f410:	e13ffd15 	stw	r4,-12(fp)
8112f414:	2805883a 	mov	r2,r5
8112f418:	e1bfff15 	stw	r6,-4(fp)
8112f41c:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f420:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f424:	e0bfff17 	ldw	r2,-4(fp)
8112f428:	1000021e 	bne	r2,zero,8112f434 <OSMutexDel+0x3c>
        return (pevent);
8112f42c:	e0bffd17 	ldw	r2,-12(fp)
8112f430:	0000ad06 	br	8112f6e8 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f434:	e0bffd17 	ldw	r2,-12(fp)
8112f438:	1000051e 	bne	r2,zero,8112f450 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f43c:	e0bfff17 	ldw	r2,-4(fp)
8112f440:	00c00104 	movi	r3,4
8112f444:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f448:	e0bffd17 	ldw	r2,-12(fp)
8112f44c:	0000a606 	br	8112f6e8 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112f450:	e0bffd17 	ldw	r2,-12(fp)
8112f454:	10800003 	ldbu	r2,0(r2)
8112f458:	10803fcc 	andi	r2,r2,255
8112f45c:	10800120 	cmpeqi	r2,r2,4
8112f460:	1000051e 	bne	r2,zero,8112f478 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f464:	e0bfff17 	ldw	r2,-4(fp)
8112f468:	00c00044 	movi	r3,1
8112f46c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f470:	e0bffd17 	ldw	r2,-12(fp)
8112f474:	00009c06 	br	8112f6e8 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112f478:	d0a08b03 	ldbu	r2,-32212(gp)
8112f47c:	10803fcc 	andi	r2,r2,255
8112f480:	10000526 	beq	r2,zero,8112f498 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112f484:	e0bfff17 	ldw	r2,-4(fp)
8112f488:	00c003c4 	movi	r3,15
8112f48c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f490:	e0bffd17 	ldw	r2,-12(fp)
8112f494:	00009406 	br	8112f6e8 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f498:	0005303a 	rdctl	r2,status
8112f49c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f4a0:	e0fffc17 	ldw	r3,-16(fp)
8112f4a4:	00bfff84 	movi	r2,-2
8112f4a8:	1884703a 	and	r2,r3,r2
8112f4ac:	1001703a 	wrctl	status,r2
  
  return context;
8112f4b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f4b4:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112f4b8:	e0bffd17 	ldw	r2,-12(fp)
8112f4bc:	10800283 	ldbu	r2,10(r2)
8112f4c0:	10803fcc 	andi	r2,r2,255
8112f4c4:	10000326 	beq	r2,zero,8112f4d4 <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112f4c8:	00800044 	movi	r2,1
8112f4cc:	e0bff205 	stb	r2,-56(fp)
8112f4d0:	00000106 	br	8112f4d8 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112f4d4:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112f4d8:	e0bffe03 	ldbu	r2,-8(fp)
8112f4dc:	10000326 	beq	r2,zero,8112f4ec <OSMutexDel+0xf4>
8112f4e0:	10800060 	cmpeqi	r2,r2,1
8112f4e4:	10002f1e 	bne	r2,zero,8112f5a4 <OSMutexDel+0x1ac>
8112f4e8:	00007406 	br	8112f6bc <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112f4ec:	e0bff203 	ldbu	r2,-56(fp)
8112f4f0:	1000221e 	bne	r2,zero,8112f57c <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112f4f4:	e0bffd17 	ldw	r2,-12(fp)
8112f4f8:	00c00fc4 	movi	r3,63
8112f4fc:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112f500:	e0bffd17 	ldw	r2,-12(fp)
8112f504:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112f508:	e0bffd17 	ldw	r2,-12(fp)
8112f50c:	1080020b 	ldhu	r2,8(r2)
8112f510:	10bfffcc 	andi	r2,r2,65535
8112f514:	1004d23a 	srli	r2,r2,8
8112f518:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112f51c:	e0fff603 	ldbu	r3,-40(fp)
8112f520:	00a04574 	movhi	r2,33045
8112f524:	109c6c04 	addi	r2,r2,29104
8112f528:	18c7883a 	add	r3,r3,r3
8112f52c:	18c7883a 	add	r3,r3,r3
8112f530:	10c5883a 	add	r2,r2,r3
8112f534:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112f538:	e0bffd17 	ldw	r2,-12(fp)
8112f53c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112f540:	d0e08a17 	ldw	r3,-32216(gp)
8112f544:	e0bffd17 	ldw	r2,-12(fp)
8112f548:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112f54c:	e0bffd17 	ldw	r2,-12(fp)
8112f550:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112f554:	e0bffd17 	ldw	r2,-12(fp)
8112f558:	d0a08a15 	stw	r2,-32216(gp)
8112f55c:	e0bff417 	ldw	r2,-48(fp)
8112f560:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f564:	e0bff517 	ldw	r2,-44(fp)
8112f568:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112f56c:	e0bfff17 	ldw	r2,-4(fp)
8112f570:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112f574:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112f578:	00005a06 	br	8112f6e4 <OSMutexDel+0x2ec>
8112f57c:	e0bff417 	ldw	r2,-48(fp)
8112f580:	e0bff715 	stw	r2,-36(fp)
8112f584:	e0bff717 	ldw	r2,-36(fp)
8112f588:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112f58c:	e0bfff17 	ldw	r2,-4(fp)
8112f590:	00c01244 	movi	r3,73
8112f594:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112f598:	e0bffd17 	ldw	r2,-12(fp)
8112f59c:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112f5a0:	00005006 	br	8112f6e4 <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112f5a4:	e0bffd17 	ldw	r2,-12(fp)
8112f5a8:	1080020b 	ldhu	r2,8(r2)
8112f5ac:	10bfffcc 	andi	r2,r2,65535
8112f5b0:	1004d23a 	srli	r2,r2,8
8112f5b4:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112f5b8:	e0bffd17 	ldw	r2,-12(fp)
8112f5bc:	1080020b 	ldhu	r2,8(r2)
8112f5c0:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112f5c4:	e0bffd17 	ldw	r2,-12(fp)
8112f5c8:	10800117 	ldw	r2,4(r2)
8112f5cc:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112f5d0:	e0bffa17 	ldw	r2,-24(fp)
8112f5d4:	10000f26 	beq	r2,zero,8112f614 <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112f5d8:	e0bffa17 	ldw	r2,-24(fp)
8112f5dc:	10800c83 	ldbu	r2,50(r2)
8112f5e0:	10c03fcc 	andi	r3,r2,255
8112f5e4:	e0bff603 	ldbu	r2,-40(fp)
8112f5e8:	18800a1e 	bne	r3,r2,8112f614 <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112f5ec:	e0bff903 	ldbu	r2,-28(fp)
8112f5f0:	100b883a 	mov	r5,r2
8112f5f4:	e13ffa17 	ldw	r4,-24(fp)
8112f5f8:	11300340 	call	81130034 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112f5fc:	00000506 	br	8112f614 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112f600:	000f883a 	mov	r7,zero
8112f604:	01800404 	movi	r6,16
8112f608:	000b883a 	mov	r5,zero
8112f60c:	e13ffd17 	ldw	r4,-12(fp)
8112f610:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112f614:	e0bffd17 	ldw	r2,-12(fp)
8112f618:	10800283 	ldbu	r2,10(r2)
8112f61c:	10803fcc 	andi	r2,r2,255
8112f620:	103ff71e 	bne	r2,zero,8112f600 <__reset+0xfb10f600>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112f624:	e0bffd17 	ldw	r2,-12(fp)
8112f628:	00c00fc4 	movi	r3,63
8112f62c:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112f630:	e0bffd17 	ldw	r2,-12(fp)
8112f634:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112f638:	e0bffd17 	ldw	r2,-12(fp)
8112f63c:	1080020b 	ldhu	r2,8(r2)
8112f640:	10bfffcc 	andi	r2,r2,65535
8112f644:	1004d23a 	srli	r2,r2,8
8112f648:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112f64c:	e0fff603 	ldbu	r3,-40(fp)
8112f650:	00a04574 	movhi	r2,33045
8112f654:	109c6c04 	addi	r2,r2,29104
8112f658:	18c7883a 	add	r3,r3,r3
8112f65c:	18c7883a 	add	r3,r3,r3
8112f660:	10c5883a 	add	r2,r2,r3
8112f664:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112f668:	e0bffd17 	ldw	r2,-12(fp)
8112f66c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112f670:	d0e08a17 	ldw	r3,-32216(gp)
8112f674:	e0bffd17 	ldw	r2,-12(fp)
8112f678:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112f67c:	e0bffd17 	ldw	r2,-12(fp)
8112f680:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112f684:	e0bffd17 	ldw	r2,-12(fp)
8112f688:	d0a08a15 	stw	r2,-32216(gp)
8112f68c:	e0bff417 	ldw	r2,-48(fp)
8112f690:	e0bff815 	stw	r2,-32(fp)
8112f694:	e0bff817 	ldw	r2,-32(fp)
8112f698:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112f69c:	e0bff203 	ldbu	r2,-56(fp)
8112f6a0:	10800058 	cmpnei	r2,r2,1
8112f6a4:	1000011e 	bne	r2,zero,8112f6ac <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112f6a8:	112c8580 	call	8112c858 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112f6ac:	e0bfff17 	ldw	r2,-4(fp)
8112f6b0:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112f6b4:	e03ff315 	stw	zero,-52(fp)
             break;
8112f6b8:	00000a06 	br	8112f6e4 <OSMutexDel+0x2ec>
8112f6bc:	e0bff417 	ldw	r2,-48(fp)
8112f6c0:	e0bffb15 	stw	r2,-20(fp)
8112f6c4:	e0bffb17 	ldw	r2,-20(fp)
8112f6c8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112f6cc:	e0bfff17 	ldw	r2,-4(fp)
8112f6d0:	00c001c4 	movi	r3,7
8112f6d4:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112f6d8:	e0bffd17 	ldw	r2,-12(fp)
8112f6dc:	e0bff315 	stw	r2,-52(fp)
             break;
8112f6e0:	0001883a 	nop
    }
    return (pevent_return);
8112f6e4:	e0bff317 	ldw	r2,-52(fp)
}
8112f6e8:	e037883a 	mov	sp,fp
8112f6ec:	dfc00117 	ldw	ra,4(sp)
8112f6f0:	df000017 	ldw	fp,0(sp)
8112f6f4:	dec00204 	addi	sp,sp,8
8112f6f8:	f800283a 	ret

8112f6fc <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112f6fc:	deffee04 	addi	sp,sp,-72
8112f700:	de00012e 	bgeu	sp,et,8112f708 <OSMutexPend+0xc>
8112f704:	003b68fa 	trap	3
8112f708:	dfc01115 	stw	ra,68(sp)
8112f70c:	df001015 	stw	fp,64(sp)
8112f710:	df001004 	addi	fp,sp,64
8112f714:	e13ffd15 	stw	r4,-12(fp)
8112f718:	2805883a 	mov	r2,r5
8112f71c:	e1bfff15 	stw	r6,-4(fp)
8112f720:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f724:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f728:	e0bfff17 	ldw	r2,-4(fp)
8112f72c:	10015626 	beq	r2,zero,8112fc88 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f730:	e0bffd17 	ldw	r2,-12(fp)
8112f734:	1000041e 	bne	r2,zero,8112f748 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112f738:	e0bfff17 	ldw	r2,-4(fp)
8112f73c:	00c00104 	movi	r3,4
8112f740:	10c00005 	stb	r3,0(r2)
        return;
8112f744:	00015106 	br	8112fc8c <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112f748:	e0bffd17 	ldw	r2,-12(fp)
8112f74c:	10800003 	ldbu	r2,0(r2)
8112f750:	10803fcc 	andi	r2,r2,255
8112f754:	10800120 	cmpeqi	r2,r2,4
8112f758:	1000041e 	bne	r2,zero,8112f76c <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112f75c:	e0bfff17 	ldw	r2,-4(fp)
8112f760:	00c00044 	movi	r3,1
8112f764:	10c00005 	stb	r3,0(r2)
        return;
8112f768:	00014806 	br	8112fc8c <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112f76c:	d0a08b03 	ldbu	r2,-32212(gp)
8112f770:	10803fcc 	andi	r2,r2,255
8112f774:	10000426 	beq	r2,zero,8112f788 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112f778:	e0bfff17 	ldw	r2,-4(fp)
8112f77c:	00c00084 	movi	r3,2
8112f780:	10c00005 	stb	r3,0(r2)
        return;
8112f784:	00014106 	br	8112fc8c <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112f788:	d0a07903 	ldbu	r2,-32284(gp)
8112f78c:	10803fcc 	andi	r2,r2,255
8112f790:	10000426 	beq	r2,zero,8112f7a4 <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112f794:	e0bfff17 	ldw	r2,-4(fp)
8112f798:	00c00344 	movi	r3,13
8112f79c:	10c00005 	stb	r3,0(r2)
        return;
8112f7a0:	00013a06 	br	8112fc8c <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f7a4:	0005303a 	rdctl	r2,status
8112f7a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f7ac:	e0fffc17 	ldw	r3,-16(fp)
8112f7b0:	00bfff84 	movi	r2,-2
8112f7b4:	1884703a 	and	r2,r3,r2
8112f7b8:	1001703a 	wrctl	status,r2
  
  return context;
8112f7bc:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112f7c0:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112f7c4:	e0bffd17 	ldw	r2,-12(fp)
8112f7c8:	1080020b 	ldhu	r2,8(r2)
8112f7cc:	10bfffcc 	andi	r2,r2,65535
8112f7d0:	1004d23a 	srli	r2,r2,8
8112f7d4:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112f7d8:	e0bffd17 	ldw	r2,-12(fp)
8112f7dc:	1080020b 	ldhu	r2,8(r2)
8112f7e0:	10803fcc 	andi	r2,r2,255
8112f7e4:	10803fd8 	cmpnei	r2,r2,255
8112f7e8:	1000271e 	bne	r2,zero,8112f888 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112f7ec:	e0bffd17 	ldw	r2,-12(fp)
8112f7f0:	10c0020b 	ldhu	r3,8(r2)
8112f7f4:	00bfc004 	movi	r2,-256
8112f7f8:	1884703a 	and	r2,r3,r2
8112f7fc:	1007883a 	mov	r3,r2
8112f800:	e0bffd17 	ldw	r2,-12(fp)
8112f804:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112f808:	e0bffd17 	ldw	r2,-12(fp)
8112f80c:	10c0020b 	ldhu	r3,8(r2)
8112f810:	d0a08c17 	ldw	r2,-32208(gp)
8112f814:	10800c83 	ldbu	r2,50(r2)
8112f818:	10803fcc 	andi	r2,r2,255
8112f81c:	1884b03a 	or	r2,r3,r2
8112f820:	1007883a 	mov	r3,r2
8112f824:	e0bffd17 	ldw	r2,-12(fp)
8112f828:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112f82c:	d0e08c17 	ldw	r3,-32208(gp)
8112f830:	e0bffd17 	ldw	r2,-12(fp)
8112f834:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112f838:	d0a08c17 	ldw	r2,-32208(gp)
8112f83c:	10800c83 	ldbu	r2,50(r2)
8112f840:	10803fcc 	andi	r2,r2,255
8112f844:	e0fff303 	ldbu	r3,-52(fp)
8112f848:	18800836 	bltu	r3,r2,8112f86c <OSMutexPend+0x170>
8112f84c:	e0bff117 	ldw	r2,-60(fp)
8112f850:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f854:	e0bff217 	ldw	r2,-56(fp)
8112f858:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112f85c:	e0bfff17 	ldw	r2,-4(fp)
8112f860:	00c01e04 	movi	r3,120
8112f864:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112f868:	00010806 	br	8112fc8c <OSMutexPend+0x590>
8112f86c:	e0bff117 	ldw	r2,-60(fp)
8112f870:	e0bff415 	stw	r2,-48(fp)
8112f874:	e0bff417 	ldw	r2,-48(fp)
8112f878:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112f87c:	e0bfff17 	ldw	r2,-4(fp)
8112f880:	10000005 	stb	zero,0(r2)
        }
        return;
8112f884:	00010106 	br	8112fc8c <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112f888:	e0bffd17 	ldw	r2,-12(fp)
8112f88c:	1080020b 	ldhu	r2,8(r2)
8112f890:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112f894:	e0bffd17 	ldw	r2,-12(fp)
8112f898:	10800117 	ldw	r2,4(r2)
8112f89c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112f8a0:	e0bff717 	ldw	r2,-36(fp)
8112f8a4:	10800c83 	ldbu	r2,50(r2)
8112f8a8:	10803fcc 	andi	r2,r2,255
8112f8ac:	e0fff303 	ldbu	r3,-52(fp)
8112f8b0:	1880b92e 	bgeu	r3,r2,8112fb98 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112f8b4:	d0a08c17 	ldw	r2,-32208(gp)
8112f8b8:	10800c83 	ldbu	r2,50(r2)
8112f8bc:	10c03fcc 	andi	r3,r2,255
8112f8c0:	e0bff603 	ldbu	r2,-40(fp)
8112f8c4:	1880b42e 	bgeu	r3,r2,8112fb98 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112f8c8:	e0bff717 	ldw	r2,-36(fp)
8112f8cc:	10800d03 	ldbu	r2,52(r2)
8112f8d0:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112f8d4:	e0fff803 	ldbu	r3,-32(fp)
8112f8d8:	d0a08844 	addi	r2,gp,-32223
8112f8dc:	1885883a 	add	r2,r3,r2
8112f8e0:	10c00003 	ldbu	r3,0(r2)
8112f8e4:	e0bff717 	ldw	r2,-36(fp)
8112f8e8:	10800d43 	ldbu	r2,53(r2)
8112f8ec:	1884703a 	and	r2,r3,r2
8112f8f0:	10803fcc 	andi	r2,r2,255
8112f8f4:	10001e26 	beq	r2,zero,8112f970 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112f8f8:	e0fff803 	ldbu	r3,-32(fp)
8112f8fc:	e13ff803 	ldbu	r4,-32(fp)
8112f900:	d0a08844 	addi	r2,gp,-32223
8112f904:	2085883a 	add	r2,r4,r2
8112f908:	10800003 	ldbu	r2,0(r2)
8112f90c:	1009883a 	mov	r4,r2
8112f910:	e0bff717 	ldw	r2,-36(fp)
8112f914:	10800d43 	ldbu	r2,53(r2)
8112f918:	0084303a 	nor	r2,zero,r2
8112f91c:	2084703a 	and	r2,r4,r2
8112f920:	1009883a 	mov	r4,r2
8112f924:	d0a08844 	addi	r2,gp,-32223
8112f928:	1885883a 	add	r2,r3,r2
8112f92c:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112f930:	e0fff803 	ldbu	r3,-32(fp)
8112f934:	d0a08844 	addi	r2,gp,-32223
8112f938:	1885883a 	add	r2,r3,r2
8112f93c:	10800003 	ldbu	r2,0(r2)
8112f940:	10803fcc 	andi	r2,r2,255
8112f944:	1000071e 	bne	r2,zero,8112f964 <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112f948:	e0bff717 	ldw	r2,-36(fp)
8112f94c:	10800d83 	ldbu	r2,54(r2)
8112f950:	0084303a 	nor	r2,zero,r2
8112f954:	1007883a 	mov	r3,r2
8112f958:	d0a08803 	ldbu	r2,-32224(gp)
8112f95c:	1884703a 	and	r2,r3,r2
8112f960:	d0a08805 	stb	r2,-32224(gp)
                }
                rdy = OS_TRUE;
8112f964:	00800044 	movi	r2,1
8112f968:	e0bff005 	stb	r2,-64(fp)
8112f96c:	00002a06 	br	8112fa18 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112f970:	e0bff717 	ldw	r2,-36(fp)
8112f974:	10800717 	ldw	r2,28(r2)
8112f978:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112f97c:	e0bff917 	ldw	r2,-28(fp)
8112f980:	10002426 	beq	r2,zero,8112fa14 <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112f984:	e0bff717 	ldw	r2,-36(fp)
8112f988:	10800d03 	ldbu	r2,52(r2)
8112f98c:	10803fcc 	andi	r2,r2,255
8112f990:	e0fff717 	ldw	r3,-36(fp)
8112f994:	18c00d03 	ldbu	r3,52(r3)
8112f998:	18c03fcc 	andi	r3,r3,255
8112f99c:	e13ff917 	ldw	r4,-28(fp)
8112f9a0:	20c7883a 	add	r3,r4,r3
8112f9a4:	18c002c4 	addi	r3,r3,11
8112f9a8:	18c00003 	ldbu	r3,0(r3)
8112f9ac:	1809883a 	mov	r4,r3
8112f9b0:	e0fff717 	ldw	r3,-36(fp)
8112f9b4:	18c00d43 	ldbu	r3,53(r3)
8112f9b8:	00c6303a 	nor	r3,zero,r3
8112f9bc:	20c6703a 	and	r3,r4,r3
8112f9c0:	1809883a 	mov	r4,r3
8112f9c4:	e0fff917 	ldw	r3,-28(fp)
8112f9c8:	1887883a 	add	r3,r3,r2
8112f9cc:	18c002c4 	addi	r3,r3,11
8112f9d0:	19000005 	stb	r4,0(r3)
8112f9d4:	e0fff917 	ldw	r3,-28(fp)
8112f9d8:	1885883a 	add	r2,r3,r2
8112f9dc:	108002c4 	addi	r2,r2,11
8112f9e0:	10800003 	ldbu	r2,0(r2)
8112f9e4:	10803fcc 	andi	r2,r2,255
8112f9e8:	10000a1e 	bne	r2,zero,8112fa14 <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112f9ec:	e0bff917 	ldw	r2,-28(fp)
8112f9f0:	10800283 	ldbu	r2,10(r2)
8112f9f4:	1007883a 	mov	r3,r2
8112f9f8:	e0bff717 	ldw	r2,-36(fp)
8112f9fc:	10800d83 	ldbu	r2,54(r2)
8112fa00:	0084303a 	nor	r2,zero,r2
8112fa04:	1884703a 	and	r2,r3,r2
8112fa08:	1007883a 	mov	r3,r2
8112fa0c:	e0bff917 	ldw	r2,-28(fp)
8112fa10:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112fa14:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112fa18:	e0bff717 	ldw	r2,-36(fp)
8112fa1c:	e0fff303 	ldbu	r3,-52(fp)
8112fa20:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112fa24:	e0bff717 	ldw	r2,-36(fp)
8112fa28:	10800c83 	ldbu	r2,50(r2)
8112fa2c:	10803fcc 	andi	r2,r2,255
8112fa30:	1004d0fa 	srli	r2,r2,3
8112fa34:	1007883a 	mov	r3,r2
8112fa38:	e0bff717 	ldw	r2,-36(fp)
8112fa3c:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112fa40:	e0bff717 	ldw	r2,-36(fp)
8112fa44:	10800c83 	ldbu	r2,50(r2)
8112fa48:	108001cc 	andi	r2,r2,7
8112fa4c:	1007883a 	mov	r3,r2
8112fa50:	e0bff717 	ldw	r2,-36(fp)
8112fa54:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112fa58:	e0bff717 	ldw	r2,-36(fp)
8112fa5c:	10800d03 	ldbu	r2,52(r2)
8112fa60:	10803fcc 	andi	r2,r2,255
8112fa64:	00c00044 	movi	r3,1
8112fa68:	1884983a 	sll	r2,r3,r2
8112fa6c:	1007883a 	mov	r3,r2
8112fa70:	e0bff717 	ldw	r2,-36(fp)
8112fa74:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112fa78:	e0bff717 	ldw	r2,-36(fp)
8112fa7c:	10800cc3 	ldbu	r2,51(r2)
8112fa80:	10803fcc 	andi	r2,r2,255
8112fa84:	00c00044 	movi	r3,1
8112fa88:	1884983a 	sll	r2,r3,r2
8112fa8c:	1007883a 	mov	r3,r2
8112fa90:	e0bff717 	ldw	r2,-36(fp)
8112fa94:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112fa98:	e0bff003 	ldbu	r2,-64(fp)
8112fa9c:	10800058 	cmpnei	r2,r2,1
8112faa0:	1000161e 	bne	r2,zero,8112fafc <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112faa4:	e0bff717 	ldw	r2,-36(fp)
8112faa8:	10c00d83 	ldbu	r3,54(r2)
8112faac:	d0a08803 	ldbu	r2,-32224(gp)
8112fab0:	1884b03a 	or	r2,r3,r2
8112fab4:	d0a08805 	stb	r2,-32224(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112fab8:	e0bff717 	ldw	r2,-36(fp)
8112fabc:	10800d03 	ldbu	r2,52(r2)
8112fac0:	10c03fcc 	andi	r3,r2,255
8112fac4:	e0bff717 	ldw	r2,-36(fp)
8112fac8:	10800d03 	ldbu	r2,52(r2)
8112facc:	11003fcc 	andi	r4,r2,255
8112fad0:	d0a08844 	addi	r2,gp,-32223
8112fad4:	2085883a 	add	r2,r4,r2
8112fad8:	11000003 	ldbu	r4,0(r2)
8112fadc:	e0bff717 	ldw	r2,-36(fp)
8112fae0:	10800d43 	ldbu	r2,53(r2)
8112fae4:	2084b03a 	or	r2,r4,r2
8112fae8:	1009883a 	mov	r4,r2
8112faec:	d0a08844 	addi	r2,gp,-32223
8112faf0:	1885883a 	add	r2,r3,r2
8112faf4:	11000005 	stb	r4,0(r2)
8112faf8:	00001f06 	br	8112fb78 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112fafc:	e0bff717 	ldw	r2,-36(fp)
8112fb00:	10800717 	ldw	r2,28(r2)
8112fb04:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112fb08:	e0bff917 	ldw	r2,-28(fp)
8112fb0c:	10001a26 	beq	r2,zero,8112fb78 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112fb10:	e0bff917 	ldw	r2,-28(fp)
8112fb14:	10c00283 	ldbu	r3,10(r2)
8112fb18:	e0bff717 	ldw	r2,-36(fp)
8112fb1c:	10800d83 	ldbu	r2,54(r2)
8112fb20:	1884b03a 	or	r2,r3,r2
8112fb24:	1007883a 	mov	r3,r2
8112fb28:	e0bff917 	ldw	r2,-28(fp)
8112fb2c:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112fb30:	e0bff717 	ldw	r2,-36(fp)
8112fb34:	10800d03 	ldbu	r2,52(r2)
8112fb38:	10803fcc 	andi	r2,r2,255
8112fb3c:	e0fff717 	ldw	r3,-36(fp)
8112fb40:	18c00d03 	ldbu	r3,52(r3)
8112fb44:	18c03fcc 	andi	r3,r3,255
8112fb48:	e13ff917 	ldw	r4,-28(fp)
8112fb4c:	20c7883a 	add	r3,r4,r3
8112fb50:	18c002c4 	addi	r3,r3,11
8112fb54:	19000003 	ldbu	r4,0(r3)
8112fb58:	e0fff717 	ldw	r3,-36(fp)
8112fb5c:	18c00d43 	ldbu	r3,53(r3)
8112fb60:	20c6b03a 	or	r3,r4,r3
8112fb64:	1809883a 	mov	r4,r3
8112fb68:	e0fff917 	ldw	r3,-28(fp)
8112fb6c:	1885883a 	add	r2,r3,r2
8112fb70:	108002c4 	addi	r2,r2,11
8112fb74:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112fb78:	e0fff303 	ldbu	r3,-52(fp)
8112fb7c:	00a04574 	movhi	r2,33045
8112fb80:	109c6c04 	addi	r2,r2,29104
8112fb84:	18c7883a 	add	r3,r3,r3
8112fb88:	18c7883a 	add	r3,r3,r3
8112fb8c:	10c5883a 	add	r2,r2,r3
8112fb90:	e0fff717 	ldw	r3,-36(fp)
8112fb94:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112fb98:	d0a08c17 	ldw	r2,-32208(gp)
8112fb9c:	d0e08c17 	ldw	r3,-32208(gp)
8112fba0:	18c00c03 	ldbu	r3,48(r3)
8112fba4:	18c00414 	ori	r3,r3,16
8112fba8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112fbac:	d0a08c17 	ldw	r2,-32208(gp)
8112fbb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112fbb4:	d0a08c17 	ldw	r2,-32208(gp)
8112fbb8:	e0fffe0b 	ldhu	r3,-8(fp)
8112fbbc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112fbc0:	e13ffd17 	ldw	r4,-12(fp)
8112fbc4:	112bf3c0 	call	8112bf3c <OS_EventTaskWait>
8112fbc8:	e0bff117 	ldw	r2,-60(fp)
8112fbcc:	e0bffb15 	stw	r2,-20(fp)
8112fbd0:	e0bffb17 	ldw	r2,-20(fp)
8112fbd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112fbd8:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fbdc:	0005303a 	rdctl	r2,status
8112fbe0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fbe4:	e0fff517 	ldw	r3,-44(fp)
8112fbe8:	00bfff84 	movi	r2,-2
8112fbec:	1884703a 	and	r2,r3,r2
8112fbf0:	1001703a 	wrctl	status,r2
  
  return context;
8112fbf4:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112fbf8:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112fbfc:	d0a08c17 	ldw	r2,-32208(gp)
8112fc00:	10800c43 	ldbu	r2,49(r2)
8112fc04:	10803fcc 	andi	r2,r2,255
8112fc08:	10000326 	beq	r2,zero,8112fc18 <OSMutexPend+0x51c>
8112fc0c:	108000a0 	cmpeqi	r2,r2,2
8112fc10:	1000041e 	bne	r2,zero,8112fc24 <OSMutexPend+0x528>
8112fc14:	00000706 	br	8112fc34 <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112fc18:	e0bfff17 	ldw	r2,-4(fp)
8112fc1c:	10000005 	stb	zero,0(r2)
             break;
8112fc20:	00000c06 	br	8112fc54 <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112fc24:	e0bfff17 	ldw	r2,-4(fp)
8112fc28:	00c00384 	movi	r3,14
8112fc2c:	10c00005 	stb	r3,0(r2)
             break;
8112fc30:	00000806 	br	8112fc54 <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112fc34:	d0a08c17 	ldw	r2,-32208(gp)
8112fc38:	e17ffd17 	ldw	r5,-12(fp)
8112fc3c:	1009883a 	mov	r4,r2
8112fc40:	112c1ac0 	call	8112c1ac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112fc44:	e0bfff17 	ldw	r2,-4(fp)
8112fc48:	00c00284 	movi	r3,10
8112fc4c:	10c00005 	stb	r3,0(r2)
             break;
8112fc50:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112fc54:	d0a08c17 	ldw	r2,-32208(gp)
8112fc58:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112fc5c:	d0a08c17 	ldw	r2,-32208(gp)
8112fc60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112fc64:	d0a08c17 	ldw	r2,-32208(gp)
8112fc68:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112fc6c:	d0a08c17 	ldw	r2,-32208(gp)
8112fc70:	10000815 	stw	zero,32(r2)
8112fc74:	e0bff117 	ldw	r2,-60(fp)
8112fc78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fc7c:	e0bffa17 	ldw	r2,-24(fp)
8112fc80:	1001703a 	wrctl	status,r2
8112fc84:	00000106 	br	8112fc8c <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112fc88:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112fc8c:	e037883a 	mov	sp,fp
8112fc90:	dfc00117 	ldw	ra,4(sp)
8112fc94:	df000017 	ldw	fp,0(sp)
8112fc98:	dec00204 	addi	sp,sp,8
8112fc9c:	f800283a 	ret

8112fca0 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112fca0:	defff604 	addi	sp,sp,-40
8112fca4:	de00012e 	bgeu	sp,et,8112fcac <OSMutexPost+0xc>
8112fca8:	003b68fa 	trap	3
8112fcac:	dfc00915 	stw	ra,36(sp)
8112fcb0:	df000815 	stw	fp,32(sp)
8112fcb4:	df000804 	addi	fp,sp,32
8112fcb8:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112fcbc:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112fcc0:	d0a08b03 	ldbu	r2,-32212(gp)
8112fcc4:	10803fcc 	andi	r2,r2,255
8112fcc8:	10000226 	beq	r2,zero,8112fcd4 <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112fccc:	00800144 	movi	r2,5
8112fcd0:	00007606 	br	8112feac <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112fcd4:	e0bfff17 	ldw	r2,-4(fp)
8112fcd8:	1000021e 	bne	r2,zero,8112fce4 <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112fcdc:	00800104 	movi	r2,4
8112fce0:	00007206 	br	8112feac <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112fce4:	e0bfff17 	ldw	r2,-4(fp)
8112fce8:	10800003 	ldbu	r2,0(r2)
8112fcec:	10803fcc 	andi	r2,r2,255
8112fcf0:	10800120 	cmpeqi	r2,r2,4
8112fcf4:	1000021e 	bne	r2,zero,8112fd00 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112fcf8:	00800044 	movi	r2,1
8112fcfc:	00006b06 	br	8112feac <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fd00:	0005303a 	rdctl	r2,status
8112fd04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fd08:	e0fffe17 	ldw	r3,-8(fp)
8112fd0c:	00bfff84 	movi	r2,-2
8112fd10:	1884703a 	and	r2,r3,r2
8112fd14:	1001703a 	wrctl	status,r2
  
  return context;
8112fd18:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112fd1c:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112fd20:	e0bfff17 	ldw	r2,-4(fp)
8112fd24:	1080020b 	ldhu	r2,8(r2)
8112fd28:	10bfffcc 	andi	r2,r2,65535
8112fd2c:	1004d23a 	srli	r2,r2,8
8112fd30:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112fd34:	e0bfff17 	ldw	r2,-4(fp)
8112fd38:	1080020b 	ldhu	r2,8(r2)
8112fd3c:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112fd40:	e0bfff17 	ldw	r2,-4(fp)
8112fd44:	10c00117 	ldw	r3,4(r2)
8112fd48:	d0a08c17 	ldw	r2,-32208(gp)
8112fd4c:	18800626 	beq	r3,r2,8112fd68 <OSMutexPost+0xc8>
8112fd50:	e0bff817 	ldw	r2,-32(fp)
8112fd54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fd58:	e0bff917 	ldw	r2,-28(fp)
8112fd5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112fd60:	00801904 	movi	r2,100
8112fd64:	00005106 	br	8112feac <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112fd68:	d0a08c17 	ldw	r2,-32208(gp)
8112fd6c:	10800c83 	ldbu	r2,50(r2)
8112fd70:	10c03fcc 	andi	r3,r2,255
8112fd74:	e0bffa03 	ldbu	r2,-24(fp)
8112fd78:	1880051e 	bne	r3,r2,8112fd90 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112fd7c:	d0a08c17 	ldw	r2,-32208(gp)
8112fd80:	e0fffa43 	ldbu	r3,-23(fp)
8112fd84:	180b883a 	mov	r5,r3
8112fd88:	1009883a 	mov	r4,r2
8112fd8c:	11300340 	call	81130034 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112fd90:	e0fffa03 	ldbu	r3,-24(fp)
8112fd94:	00a04574 	movhi	r2,33045
8112fd98:	109c6c04 	addi	r2,r2,29104
8112fd9c:	18c7883a 	add	r3,r3,r3
8112fda0:	18c7883a 	add	r3,r3,r3
8112fda4:	10c5883a 	add	r2,r2,r3
8112fda8:	00c00044 	movi	r3,1
8112fdac:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112fdb0:	e0bfff17 	ldw	r2,-4(fp)
8112fdb4:	10800283 	ldbu	r2,10(r2)
8112fdb8:	10803fcc 	andi	r2,r2,255
8112fdbc:	10002e26 	beq	r2,zero,8112fe78 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112fdc0:	000f883a 	mov	r7,zero
8112fdc4:	01800404 	movi	r6,16
8112fdc8:	000b883a 	mov	r5,zero
8112fdcc:	e13fff17 	ldw	r4,-4(fp)
8112fdd0:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
8112fdd4:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112fdd8:	e0bfff17 	ldw	r2,-4(fp)
8112fddc:	10c0020b 	ldhu	r3,8(r2)
8112fde0:	00bfc004 	movi	r2,-256
8112fde4:	1884703a 	and	r2,r3,r2
8112fde8:	1007883a 	mov	r3,r2
8112fdec:	e0bfff17 	ldw	r2,-4(fp)
8112fdf0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112fdf4:	e0bfff17 	ldw	r2,-4(fp)
8112fdf8:	10c0020b 	ldhu	r3,8(r2)
8112fdfc:	e0bffa43 	ldbu	r2,-23(fp)
8112fe00:	1884b03a 	or	r2,r3,r2
8112fe04:	1007883a 	mov	r3,r2
8112fe08:	e0bfff17 	ldw	r2,-4(fp)
8112fe0c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112fe10:	e0fffa43 	ldbu	r3,-23(fp)
8112fe14:	00a04574 	movhi	r2,33045
8112fe18:	109c6c04 	addi	r2,r2,29104
8112fe1c:	18c7883a 	add	r3,r3,r3
8112fe20:	18c7883a 	add	r3,r3,r3
8112fe24:	10c5883a 	add	r2,r2,r3
8112fe28:	10c00017 	ldw	r3,0(r2)
8112fe2c:	e0bfff17 	ldw	r2,-4(fp)
8112fe30:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112fe34:	e0bffa43 	ldbu	r2,-23(fp)
8112fe38:	e0fffa03 	ldbu	r3,-24(fp)
8112fe3c:	18800736 	bltu	r3,r2,8112fe5c <OSMutexPost+0x1bc>
8112fe40:	e0bff817 	ldw	r2,-32(fp)
8112fe44:	e0bffb15 	stw	r2,-20(fp)
8112fe48:	e0bffb17 	ldw	r2,-20(fp)
8112fe4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112fe50:	112c8580 	call	8112c858 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112fe54:	00801e04 	movi	r2,120
8112fe58:	00001406 	br	8112feac <OSMutexPost+0x20c>
8112fe5c:	e0bff817 	ldw	r2,-32(fp)
8112fe60:	e0bffc15 	stw	r2,-16(fp)
8112fe64:	e0bffc17 	ldw	r2,-16(fp)
8112fe68:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112fe6c:	112c8580 	call	8112c858 <OS_Sched>
            return (OS_ERR_NONE);
8112fe70:	0005883a 	mov	r2,zero
8112fe74:	00000d06 	br	8112feac <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112fe78:	e0bfff17 	ldw	r2,-4(fp)
8112fe7c:	1080020b 	ldhu	r2,8(r2)
8112fe80:	10803fd4 	ori	r2,r2,255
8112fe84:	1007883a 	mov	r3,r2
8112fe88:	e0bfff17 	ldw	r2,-4(fp)
8112fe8c:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112fe90:	e0bfff17 	ldw	r2,-4(fp)
8112fe94:	10000115 	stw	zero,4(r2)
8112fe98:	e0bff817 	ldw	r2,-32(fp)
8112fe9c:	e0bffd15 	stw	r2,-12(fp)
8112fea0:	e0bffd17 	ldw	r2,-12(fp)
8112fea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112fea8:	0005883a 	mov	r2,zero
}
8112feac:	e037883a 	mov	sp,fp
8112feb0:	dfc00117 	ldw	ra,4(sp)
8112feb4:	df000017 	ldw	fp,0(sp)
8112feb8:	dec00204 	addi	sp,sp,8
8112febc:	f800283a 	ret

8112fec0 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112fec0:	defff704 	addi	sp,sp,-36
8112fec4:	de00012e 	bgeu	sp,et,8112fecc <OSMutexQuery+0xc>
8112fec8:	003b68fa 	trap	3
8112fecc:	df000815 	stw	fp,32(sp)
8112fed0:	df000804 	addi	fp,sp,32
8112fed4:	e13ffe15 	stw	r4,-8(fp)
8112fed8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112fedc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112fee0:	d0a08b03 	ldbu	r2,-32212(gp)
8112fee4:	10803fcc 	andi	r2,r2,255
8112fee8:	10000226 	beq	r2,zero,8112fef4 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112feec:	00800184 	movi	r2,6
8112fef0:	00004c06 	br	81130024 <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112fef4:	e0bffe17 	ldw	r2,-8(fp)
8112fef8:	1000021e 	bne	r2,zero,8112ff04 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112fefc:	00800104 	movi	r2,4
8112ff00:	00004806 	br	81130024 <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112ff04:	e0bfff17 	ldw	r2,-4(fp)
8112ff08:	1000021e 	bne	r2,zero,8112ff14 <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112ff0c:	00800244 	movi	r2,9
8112ff10:	00004406 	br	81130024 <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112ff14:	e0bffe17 	ldw	r2,-8(fp)
8112ff18:	10800003 	ldbu	r2,0(r2)
8112ff1c:	10803fcc 	andi	r2,r2,255
8112ff20:	10800120 	cmpeqi	r2,r2,4
8112ff24:	1000021e 	bne	r2,zero,8112ff30 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112ff28:	00800044 	movi	r2,1
8112ff2c:	00003d06 	br	81130024 <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ff30:	0005303a 	rdctl	r2,status
8112ff34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ff38:	e0fffd17 	ldw	r3,-12(fp)
8112ff3c:	00bfff84 	movi	r2,-2
8112ff40:	1884703a 	and	r2,r3,r2
8112ff44:	1001703a 	wrctl	status,r2
  
  return context;
8112ff48:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ff4c:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112ff50:	e0bffe17 	ldw	r2,-8(fp)
8112ff54:	1080020b 	ldhu	r2,8(r2)
8112ff58:	10bfffcc 	andi	r2,r2,65535
8112ff5c:	1004d23a 	srli	r2,r2,8
8112ff60:	1007883a 	mov	r3,r2
8112ff64:	e0bfff17 	ldw	r2,-4(fp)
8112ff68:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112ff6c:	e0bffe17 	ldw	r2,-8(fp)
8112ff70:	1080020b 	ldhu	r2,8(r2)
8112ff74:	1007883a 	mov	r3,r2
8112ff78:	e0bfff17 	ldw	r2,-4(fp)
8112ff7c:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112ff80:	e0bfff17 	ldw	r2,-4(fp)
8112ff84:	10800203 	ldbu	r2,8(r2)
8112ff88:	10803fcc 	andi	r2,r2,255
8112ff8c:	10803fd8 	cmpnei	r2,r2,255
8112ff90:	1000041e 	bne	r2,zero,8112ffa4 <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112ff94:	e0bfff17 	ldw	r2,-4(fp)
8112ff98:	00c00044 	movi	r3,1
8112ff9c:	10c001c5 	stb	r3,7(r2)
8112ffa0:	00000206 	br	8112ffac <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112ffa4:	e0bfff17 	ldw	r2,-4(fp)
8112ffa8:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112ffac:	e0bffe17 	ldw	r2,-8(fp)
8112ffb0:	10c00283 	ldbu	r3,10(r2)
8112ffb4:	e0bfff17 	ldw	r2,-4(fp)
8112ffb8:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112ffbc:	e0bffe17 	ldw	r2,-8(fp)
8112ffc0:	108002c4 	addi	r2,r2,11
8112ffc4:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112ffc8:	e0bfff17 	ldw	r2,-4(fp)
8112ffcc:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ffd0:	e03ff805 	stb	zero,-32(fp)
8112ffd4:	00000b06 	br	81130004 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112ffd8:	e0bffa17 	ldw	r2,-24(fp)
8112ffdc:	10c00044 	addi	r3,r2,1
8112ffe0:	e0fffa15 	stw	r3,-24(fp)
8112ffe4:	e0fff917 	ldw	r3,-28(fp)
8112ffe8:	19000044 	addi	r4,r3,1
8112ffec:	e13ff915 	stw	r4,-28(fp)
8112fff0:	18c00003 	ldbu	r3,0(r3)
8112fff4:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112fff8:	e0bff803 	ldbu	r2,-32(fp)
8112fffc:	10800044 	addi	r2,r2,1
81130000:	e0bff805 	stb	r2,-32(fp)
81130004:	e0bff803 	ldbu	r2,-32(fp)
81130008:	108001b0 	cmpltui	r2,r2,6
8113000c:	103ff21e 	bne	r2,zero,8112ffd8 <__reset+0xfb10ffd8>
81130010:	e0bffb17 	ldw	r2,-20(fp)
81130014:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130018:	e0bffc17 	ldw	r2,-16(fp)
8113001c:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130020:	0005883a 	mov	r2,zero
}
81130024:	e037883a 	mov	sp,fp
81130028:	df000017 	ldw	fp,0(sp)
8113002c:	dec00104 	addi	sp,sp,4
81130030:	f800283a 	ret

81130034 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
81130034:	defffc04 	addi	sp,sp,-16
81130038:	de00012e 	bgeu	sp,et,81130040 <OSMutex_RdyAtPrio+0xc>
8113003c:	003b68fa 	trap	3
81130040:	df000315 	stw	fp,12(sp)
81130044:	df000304 	addi	fp,sp,12
81130048:	e13ffe15 	stw	r4,-8(fp)
8113004c:	2805883a 	mov	r2,r5
81130050:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
81130054:	e0bffe17 	ldw	r2,-8(fp)
81130058:	10800d03 	ldbu	r2,52(r2)
8113005c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
81130060:	e0fffd03 	ldbu	r3,-12(fp)
81130064:	e13ffd03 	ldbu	r4,-12(fp)
81130068:	d0a08844 	addi	r2,gp,-32223
8113006c:	2085883a 	add	r2,r4,r2
81130070:	10800003 	ldbu	r2,0(r2)
81130074:	1009883a 	mov	r4,r2
81130078:	e0bffe17 	ldw	r2,-8(fp)
8113007c:	10800d43 	ldbu	r2,53(r2)
81130080:	0084303a 	nor	r2,zero,r2
81130084:	2084703a 	and	r2,r4,r2
81130088:	1009883a 	mov	r4,r2
8113008c:	d0a08844 	addi	r2,gp,-32223
81130090:	1885883a 	add	r2,r3,r2
81130094:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81130098:	e0fffd03 	ldbu	r3,-12(fp)
8113009c:	d0a08844 	addi	r2,gp,-32223
811300a0:	1885883a 	add	r2,r3,r2
811300a4:	10800003 	ldbu	r2,0(r2)
811300a8:	10803fcc 	andi	r2,r2,255
811300ac:	1000071e 	bne	r2,zero,811300cc <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
811300b0:	e0bffe17 	ldw	r2,-8(fp)
811300b4:	10800d83 	ldbu	r2,54(r2)
811300b8:	0084303a 	nor	r2,zero,r2
811300bc:	1007883a 	mov	r3,r2
811300c0:	d0a08803 	ldbu	r2,-32224(gp)
811300c4:	1884703a 	and	r2,r3,r2
811300c8:	d0a08805 	stb	r2,-32224(gp)
    }
    ptcb->OSTCBPrio         = prio;
811300cc:	e0bffe17 	ldw	r2,-8(fp)
811300d0:	e0ffff03 	ldbu	r3,-4(fp)
811300d4:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
811300d8:	e0bfff03 	ldbu	r2,-4(fp)
811300dc:	1004d0fa 	srli	r2,r2,3
811300e0:	108001cc 	andi	r2,r2,7
811300e4:	1007883a 	mov	r3,r2
811300e8:	e0bffe17 	ldw	r2,-8(fp)
811300ec:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
811300f0:	e0bfff03 	ldbu	r2,-4(fp)
811300f4:	108001cc 	andi	r2,r2,7
811300f8:	1007883a 	mov	r3,r2
811300fc:	e0bffe17 	ldw	r2,-8(fp)
81130100:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
81130104:	e0bffe17 	ldw	r2,-8(fp)
81130108:	10800d03 	ldbu	r2,52(r2)
8113010c:	10803fcc 	andi	r2,r2,255
81130110:	00c00044 	movi	r3,1
81130114:	1884983a 	sll	r2,r3,r2
81130118:	1007883a 	mov	r3,r2
8113011c:	e0bffe17 	ldw	r2,-8(fp)
81130120:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
81130124:	e0bffe17 	ldw	r2,-8(fp)
81130128:	10800cc3 	ldbu	r2,51(r2)
8113012c:	10803fcc 	andi	r2,r2,255
81130130:	00c00044 	movi	r3,1
81130134:	1884983a 	sll	r2,r3,r2
81130138:	1007883a 	mov	r3,r2
8113013c:	e0bffe17 	ldw	r2,-8(fp)
81130140:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
81130144:	e0bffe17 	ldw	r2,-8(fp)
81130148:	10c00d83 	ldbu	r3,54(r2)
8113014c:	d0a08803 	ldbu	r2,-32224(gp)
81130150:	1884b03a 	or	r2,r3,r2
81130154:	d0a08805 	stb	r2,-32224(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81130158:	e0bffe17 	ldw	r2,-8(fp)
8113015c:	10800d03 	ldbu	r2,52(r2)
81130160:	10c03fcc 	andi	r3,r2,255
81130164:	e0bffe17 	ldw	r2,-8(fp)
81130168:	10800d03 	ldbu	r2,52(r2)
8113016c:	11003fcc 	andi	r4,r2,255
81130170:	d0a08844 	addi	r2,gp,-32223
81130174:	2085883a 	add	r2,r4,r2
81130178:	11000003 	ldbu	r4,0(r2)
8113017c:	e0bffe17 	ldw	r2,-8(fp)
81130180:	10800d43 	ldbu	r2,53(r2)
81130184:	2084b03a 	or	r2,r4,r2
81130188:	1009883a 	mov	r4,r2
8113018c:	d0a08844 	addi	r2,gp,-32223
81130190:	1885883a 	add	r2,r3,r2
81130194:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
81130198:	e0ffff03 	ldbu	r3,-4(fp)
8113019c:	00a04574 	movhi	r2,33045
811301a0:	109c6c04 	addi	r2,r2,29104
811301a4:	18c7883a 	add	r3,r3,r3
811301a8:	18c7883a 	add	r3,r3,r3
811301ac:	10c5883a 	add	r2,r2,r3
811301b0:	e0fffe17 	ldw	r3,-8(fp)
811301b4:	10c00015 	stw	r3,0(r2)
}
811301b8:	0001883a 	nop
811301bc:	e037883a 	mov	sp,fp
811301c0:	df000017 	ldw	fp,0(sp)
811301c4:	dec00104 	addi	sp,sp,4
811301c8:	f800283a 	ret

811301cc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
811301cc:	defff804 	addi	sp,sp,-32
811301d0:	de00012e 	bgeu	sp,et,811301d8 <OSQAccept+0xc>
811301d4:	003b68fa 	trap	3
811301d8:	df000715 	stw	fp,28(sp)
811301dc:	df000704 	addi	fp,sp,28
811301e0:	e13ffe15 	stw	r4,-8(fp)
811301e4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811301e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811301ec:	e0bfff17 	ldw	r2,-4(fp)
811301f0:	1000021e 	bne	r2,zero,811301fc <OSQAccept+0x30>
        return ((void *)0);
811301f4:	0005883a 	mov	r2,zero
811301f8:	00004206 	br	81130304 <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
811301fc:	e0bffe17 	ldw	r2,-8(fp)
81130200:	1000051e 	bne	r2,zero,81130218 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81130204:	e0bfff17 	ldw	r2,-4(fp)
81130208:	00c00104 	movi	r3,4
8113020c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130210:	0005883a 	mov	r2,zero
81130214:	00003b06 	br	81130304 <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81130218:	e0bffe17 	ldw	r2,-8(fp)
8113021c:	10800003 	ldbu	r2,0(r2)
81130220:	10803fcc 	andi	r2,r2,255
81130224:	108000a0 	cmpeqi	r2,r2,2
81130228:	1000051e 	bne	r2,zero,81130240 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8113022c:	e0bfff17 	ldw	r2,-4(fp)
81130230:	00c00044 	movi	r3,1
81130234:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130238:	0005883a 	mov	r2,zero
8113023c:	00003106 	br	81130304 <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130240:	0005303a 	rdctl	r2,status
81130244:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130248:	e0fffd17 	ldw	r3,-12(fp)
8113024c:	00bfff84 	movi	r2,-2
81130250:	1884703a 	and	r2,r3,r2
81130254:	1001703a 	wrctl	status,r2
  
  return context;
81130258:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8113025c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81130260:	e0bffe17 	ldw	r2,-8(fp)
81130264:	10800117 	ldw	r2,4(r2)
81130268:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8113026c:	e0bffc17 	ldw	r2,-16(fp)
81130270:	1080058b 	ldhu	r2,22(r2)
81130274:	10bfffcc 	andi	r2,r2,65535
81130278:	10001926 	beq	r2,zero,811302e0 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8113027c:	e0bffc17 	ldw	r2,-16(fp)
81130280:	10800417 	ldw	r2,16(r2)
81130284:	11000104 	addi	r4,r2,4
81130288:	e0fffc17 	ldw	r3,-16(fp)
8113028c:	19000415 	stw	r4,16(r3)
81130290:	10800017 	ldw	r2,0(r2)
81130294:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81130298:	e0bffc17 	ldw	r2,-16(fp)
8113029c:	1080058b 	ldhu	r2,22(r2)
811302a0:	10bfffc4 	addi	r2,r2,-1
811302a4:	1007883a 	mov	r3,r2
811302a8:	e0bffc17 	ldw	r2,-16(fp)
811302ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
811302b0:	e0bffc17 	ldw	r2,-16(fp)
811302b4:	10c00417 	ldw	r3,16(r2)
811302b8:	e0bffc17 	ldw	r2,-16(fp)
811302bc:	10800217 	ldw	r2,8(r2)
811302c0:	1880041e 	bne	r3,r2,811302d4 <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
811302c4:	e0bffc17 	ldw	r2,-16(fp)
811302c8:	10c00117 	ldw	r3,4(r2)
811302cc:	e0bffc17 	ldw	r2,-16(fp)
811302d0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
811302d4:	e0bfff17 	ldw	r2,-4(fp)
811302d8:	10000005 	stb	zero,0(r2)
811302dc:	00000406 	br	811302f0 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
811302e0:	e0bfff17 	ldw	r2,-4(fp)
811302e4:	00c007c4 	movi	r3,31
811302e8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
811302ec:	e03ff915 	stw	zero,-28(fp)
811302f0:	e0bffa17 	ldw	r2,-24(fp)
811302f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811302f8:	e0bffb17 	ldw	r2,-20(fp)
811302fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
81130300:	e0bff917 	ldw	r2,-28(fp)
}
81130304:	e037883a 	mov	sp,fp
81130308:	df000017 	ldw	fp,0(sp)
8113030c:	dec00104 	addi	sp,sp,4
81130310:	f800283a 	ret

81130314 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
81130314:	defff404 	addi	sp,sp,-48
81130318:	de00012e 	bgeu	sp,et,81130320 <OSQCreate+0xc>
8113031c:	003b68fa 	trap	3
81130320:	dfc00b15 	stw	ra,44(sp)
81130324:	df000a15 	stw	fp,40(sp)
81130328:	df000a04 	addi	fp,sp,40
8113032c:	e13ffe15 	stw	r4,-8(fp)
81130330:	2805883a 	mov	r2,r5
81130334:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130338:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8113033c:	d0a08b03 	ldbu	r2,-32212(gp)
81130340:	10803fcc 	andi	r2,r2,255
81130344:	10000226 	beq	r2,zero,81130350 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
81130348:	0005883a 	mov	r2,zero
8113034c:	00005906 	br	811304b4 <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130350:	0005303a 	rdctl	r2,status
81130354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130358:	e0fffd17 	ldw	r3,-12(fp)
8113035c:	00bfff84 	movi	r2,-2
81130360:	1884703a 	and	r2,r3,r2
81130364:	1001703a 	wrctl	status,r2
  
  return context;
81130368:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8113036c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
81130370:	d0a08a17 	ldw	r2,-32216(gp)
81130374:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
81130378:	d0a08a17 	ldw	r2,-32216(gp)
8113037c:	10000326 	beq	r2,zero,8113038c <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
81130380:	d0a08a17 	ldw	r2,-32216(gp)
81130384:	10800117 	ldw	r2,4(r2)
81130388:	d0a08a15 	stw	r2,-32216(gp)
8113038c:	e0bff717 	ldw	r2,-36(fp)
81130390:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130394:	e0bff817 	ldw	r2,-32(fp)
81130398:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8113039c:	e0bff617 	ldw	r2,-40(fp)
811303a0:	10004326 	beq	r2,zero,811304b0 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811303a4:	0005303a 	rdctl	r2,status
811303a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811303ac:	e0fff917 	ldw	r3,-28(fp)
811303b0:	00bfff84 	movi	r2,-2
811303b4:	1884703a 	and	r2,r3,r2
811303b8:	1001703a 	wrctl	status,r2
  
  return context;
811303bc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
811303c0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
811303c4:	d0a08717 	ldw	r2,-32228(gp)
811303c8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
811303cc:	e0bffb17 	ldw	r2,-20(fp)
811303d0:	10002d26 	beq	r2,zero,81130488 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
811303d4:	d0a08717 	ldw	r2,-32228(gp)
811303d8:	10800017 	ldw	r2,0(r2)
811303dc:	d0a08715 	stw	r2,-32228(gp)
811303e0:	e0bff717 	ldw	r2,-36(fp)
811303e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811303e8:	e0bffa17 	ldw	r2,-24(fp)
811303ec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
811303f0:	e0bffb17 	ldw	r2,-20(fp)
811303f4:	e0fffe17 	ldw	r3,-8(fp)
811303f8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
811303fc:	e0bfff0b 	ldhu	r2,-4(fp)
81130400:	1085883a 	add	r2,r2,r2
81130404:	1085883a 	add	r2,r2,r2
81130408:	1007883a 	mov	r3,r2
8113040c:	e0bffe17 	ldw	r2,-8(fp)
81130410:	10c7883a 	add	r3,r2,r3
81130414:	e0bffb17 	ldw	r2,-20(fp)
81130418:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8113041c:	e0bffb17 	ldw	r2,-20(fp)
81130420:	e0fffe17 	ldw	r3,-8(fp)
81130424:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
81130428:	e0bffb17 	ldw	r2,-20(fp)
8113042c:	e0fffe17 	ldw	r3,-8(fp)
81130430:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
81130434:	e0bffb17 	ldw	r2,-20(fp)
81130438:	e0ffff0b 	ldhu	r3,-4(fp)
8113043c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
81130440:	e0bffb17 	ldw	r2,-20(fp)
81130444:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
81130448:	e0bff617 	ldw	r2,-40(fp)
8113044c:	00c00084 	movi	r3,2
81130450:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
81130454:	e0bff617 	ldw	r2,-40(fp)
81130458:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8113045c:	e0bff617 	ldw	r2,-40(fp)
81130460:	e0fffb17 	ldw	r3,-20(fp)
81130464:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
81130468:	e0bff617 	ldw	r2,-40(fp)
8113046c:	00c00fc4 	movi	r3,63
81130470:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
81130474:	e0bff617 	ldw	r2,-40(fp)
81130478:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8113047c:	e13ff617 	ldw	r4,-40(fp)
81130480:	112c3740 	call	8112c374 <OS_EventWaitListInit>
81130484:	00000a06 	br	811304b0 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
81130488:	d0e08a17 	ldw	r3,-32216(gp)
8113048c:	e0bff617 	ldw	r2,-40(fp)
81130490:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
81130494:	e0bff617 	ldw	r2,-40(fp)
81130498:	d0a08a15 	stw	r2,-32216(gp)
8113049c:	e0bff717 	ldw	r2,-36(fp)
811304a0:	e0bffc15 	stw	r2,-16(fp)
811304a4:	e0bffc17 	ldw	r2,-16(fp)
811304a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
811304ac:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
811304b0:	e0bff617 	ldw	r2,-40(fp)
}
811304b4:	e037883a 	mov	sp,fp
811304b8:	dfc00117 	ldw	ra,4(sp)
811304bc:	df000017 	ldw	fp,0(sp)
811304c0:	dec00204 	addi	sp,sp,8
811304c4:	f800283a 	ret

811304c8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811304c8:	defff204 	addi	sp,sp,-56
811304cc:	de00012e 	bgeu	sp,et,811304d4 <OSQDel+0xc>
811304d0:	003b68fa 	trap	3
811304d4:	dfc00d15 	stw	ra,52(sp)
811304d8:	df000c15 	stw	fp,48(sp)
811304dc:	df000c04 	addi	fp,sp,48
811304e0:	e13ffd15 	stw	r4,-12(fp)
811304e4:	2805883a 	mov	r2,r5
811304e8:	e1bfff15 	stw	r6,-4(fp)
811304ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811304f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811304f4:	e0bfff17 	ldw	r2,-4(fp)
811304f8:	1000021e 	bne	r2,zero,81130504 <OSQDel+0x3c>
        return (pevent);
811304fc:	e0bffd17 	ldw	r2,-12(fp)
81130500:	00008e06 	br	8113073c <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81130504:	e0bffd17 	ldw	r2,-12(fp)
81130508:	1000051e 	bne	r2,zero,81130520 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8113050c:	e0bfff17 	ldw	r2,-4(fp)
81130510:	00c00104 	movi	r3,4
81130514:	10c00005 	stb	r3,0(r2)
        return (pevent);
81130518:	e0bffd17 	ldw	r2,-12(fp)
8113051c:	00008706 	br	8113073c <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81130520:	e0bffd17 	ldw	r2,-12(fp)
81130524:	10800003 	ldbu	r2,0(r2)
81130528:	10803fcc 	andi	r2,r2,255
8113052c:	108000a0 	cmpeqi	r2,r2,2
81130530:	1000051e 	bne	r2,zero,81130548 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81130534:	e0bfff17 	ldw	r2,-4(fp)
81130538:	00c00044 	movi	r3,1
8113053c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81130540:	e0bffd17 	ldw	r2,-12(fp)
81130544:	00007d06 	br	8113073c <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81130548:	d0a08b03 	ldbu	r2,-32212(gp)
8113054c:	10803fcc 	andi	r2,r2,255
81130550:	10000526 	beq	r2,zero,81130568 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81130554:	e0bfff17 	ldw	r2,-4(fp)
81130558:	00c003c4 	movi	r3,15
8113055c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81130560:	e0bffd17 	ldw	r2,-12(fp)
81130564:	00007506 	br	8113073c <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130568:	0005303a 	rdctl	r2,status
8113056c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130570:	e0fffc17 	ldw	r3,-16(fp)
81130574:	00bfff84 	movi	r2,-2
81130578:	1884703a 	and	r2,r3,r2
8113057c:	1001703a 	wrctl	status,r2
  
  return context;
81130580:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130584:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
81130588:	e0bffd17 	ldw	r2,-12(fp)
8113058c:	10800283 	ldbu	r2,10(r2)
81130590:	10803fcc 	andi	r2,r2,255
81130594:	10000326 	beq	r2,zero,811305a4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81130598:	00800044 	movi	r2,1
8113059c:	e0bff405 	stb	r2,-48(fp)
811305a0:	00000106 	br	811305a8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
811305a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
811305a8:	e0bffe03 	ldbu	r2,-8(fp)
811305ac:	10000326 	beq	r2,zero,811305bc <OSQDel+0xf4>
811305b0:	10800060 	cmpeqi	r2,r2,1
811305b4:	1000301e 	bne	r2,zero,81130678 <OSQDel+0x1b0>
811305b8:	00005506 	br	81130710 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
811305bc:	e0bff403 	ldbu	r2,-48(fp)
811305c0:	10001e1e 	bne	r2,zero,8113063c <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
811305c4:	e0bffd17 	ldw	r2,-12(fp)
811305c8:	00c00fc4 	movi	r3,63
811305cc:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
811305d0:	e0bffd17 	ldw	r2,-12(fp)
811305d4:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
811305d8:	e0bffd17 	ldw	r2,-12(fp)
811305dc:	10800117 	ldw	r2,4(r2)
811305e0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
811305e4:	d0e08717 	ldw	r3,-32228(gp)
811305e8:	e0bff817 	ldw	r2,-32(fp)
811305ec:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
811305f0:	e0bff817 	ldw	r2,-32(fp)
811305f4:	d0a08715 	stw	r2,-32228(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
811305f8:	e0bffd17 	ldw	r2,-12(fp)
811305fc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81130600:	d0e08a17 	ldw	r3,-32216(gp)
81130604:	e0bffd17 	ldw	r2,-12(fp)
81130608:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8113060c:	e0bffd17 	ldw	r2,-12(fp)
81130610:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81130614:	e0bffd17 	ldw	r2,-12(fp)
81130618:	d0a08a15 	stw	r2,-32216(gp)
8113061c:	e0bff617 	ldw	r2,-40(fp)
81130620:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130624:	e0bff717 	ldw	r2,-36(fp)
81130628:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8113062c:	e0bfff17 	ldw	r2,-4(fp)
81130630:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
81130634:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81130638:	00003f06 	br	81130738 <OSQDel+0x270>
8113063c:	e0bff617 	ldw	r2,-40(fp)
81130640:	e0bff915 	stw	r2,-28(fp)
81130644:	e0bff917 	ldw	r2,-28(fp)
81130648:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8113064c:	e0bfff17 	ldw	r2,-4(fp)
81130650:	00c01244 	movi	r3,73
81130654:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81130658:	e0bffd17 	ldw	r2,-12(fp)
8113065c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
81130660:	00003506 	br	81130738 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
81130664:	000f883a 	mov	r7,zero
81130668:	01800104 	movi	r6,4
8113066c:	000b883a 	mov	r5,zero
81130670:	e13ffd17 	ldw	r4,-12(fp)
81130674:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
81130678:	e0bffd17 	ldw	r2,-12(fp)
8113067c:	10800283 	ldbu	r2,10(r2)
81130680:	10803fcc 	andi	r2,r2,255
81130684:	103ff71e 	bne	r2,zero,81130664 <__reset+0xfb110664>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81130688:	e0bffd17 	ldw	r2,-12(fp)
8113068c:	00c00fc4 	movi	r3,63
81130690:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81130694:	e0bffd17 	ldw	r2,-12(fp)
81130698:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8113069c:	e0bffd17 	ldw	r2,-12(fp)
811306a0:	10800117 	ldw	r2,4(r2)
811306a4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
811306a8:	d0e08717 	ldw	r3,-32228(gp)
811306ac:	e0bff817 	ldw	r2,-32(fp)
811306b0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
811306b4:	e0bff817 	ldw	r2,-32(fp)
811306b8:	d0a08715 	stw	r2,-32228(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
811306bc:	e0bffd17 	ldw	r2,-12(fp)
811306c0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
811306c4:	d0e08a17 	ldw	r3,-32216(gp)
811306c8:	e0bffd17 	ldw	r2,-12(fp)
811306cc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
811306d0:	e0bffd17 	ldw	r2,-12(fp)
811306d4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
811306d8:	e0bffd17 	ldw	r2,-12(fp)
811306dc:	d0a08a15 	stw	r2,-32216(gp)
811306e0:	e0bff617 	ldw	r2,-40(fp)
811306e4:	e0bffa15 	stw	r2,-24(fp)
811306e8:	e0bffa17 	ldw	r2,-24(fp)
811306ec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
811306f0:	e0bff403 	ldbu	r2,-48(fp)
811306f4:	10800058 	cmpnei	r2,r2,1
811306f8:	1000011e 	bne	r2,zero,81130700 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
811306fc:	112c8580 	call	8112c858 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81130700:	e0bfff17 	ldw	r2,-4(fp)
81130704:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
81130708:	e03ff515 	stw	zero,-44(fp)
             break;
8113070c:	00000a06 	br	81130738 <OSQDel+0x270>
81130710:	e0bff617 	ldw	r2,-40(fp)
81130714:	e0bffb15 	stw	r2,-20(fp)
81130718:	e0bffb17 	ldw	r2,-20(fp)
8113071c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81130720:	e0bfff17 	ldw	r2,-4(fp)
81130724:	00c001c4 	movi	r3,7
81130728:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8113072c:	e0bffd17 	ldw	r2,-12(fp)
81130730:	e0bff515 	stw	r2,-44(fp)
             break;
81130734:	0001883a 	nop
    }
    return (pevent_return);
81130738:	e0bff517 	ldw	r2,-44(fp)
}
8113073c:	e037883a 	mov	sp,fp
81130740:	dfc00117 	ldw	ra,4(sp)
81130744:	df000017 	ldw	fp,0(sp)
81130748:	dec00204 	addi	sp,sp,8
8113074c:	f800283a 	ret

81130750 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
81130750:	defffa04 	addi	sp,sp,-24
81130754:	de00012e 	bgeu	sp,et,8113075c <OSQFlush+0xc>
81130758:	003b68fa 	trap	3
8113075c:	df000515 	stw	fp,20(sp)
81130760:	df000504 	addi	fp,sp,20
81130764:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130768:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113076c:	e0bfff17 	ldw	r2,-4(fp)
81130770:	1000021e 	bne	r2,zero,8113077c <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
81130774:	00800104 	movi	r2,4
81130778:	00002106 	br	81130800 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8113077c:	e0bfff17 	ldw	r2,-4(fp)
81130780:	10800003 	ldbu	r2,0(r2)
81130784:	10803fcc 	andi	r2,r2,255
81130788:	108000a0 	cmpeqi	r2,r2,2
8113078c:	1000021e 	bne	r2,zero,81130798 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
81130790:	00800044 	movi	r2,1
81130794:	00001a06 	br	81130800 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130798:	0005303a 	rdctl	r2,status
8113079c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811307a0:	e0fffd17 	ldw	r3,-12(fp)
811307a4:	00bfff84 	movi	r2,-2
811307a8:	1884703a 	and	r2,r3,r2
811307ac:	1001703a 	wrctl	status,r2
  
  return context;
811307b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811307b4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
811307b8:	e0bfff17 	ldw	r2,-4(fp)
811307bc:	10800117 	ldw	r2,4(r2)
811307c0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
811307c4:	e0bffc17 	ldw	r2,-16(fp)
811307c8:	10c00117 	ldw	r3,4(r2)
811307cc:	e0bffc17 	ldw	r2,-16(fp)
811307d0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
811307d4:	e0bffc17 	ldw	r2,-16(fp)
811307d8:	10c00117 	ldw	r3,4(r2)
811307dc:	e0bffc17 	ldw	r2,-16(fp)
811307e0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
811307e4:	e0bffc17 	ldw	r2,-16(fp)
811307e8:	1000058d 	sth	zero,22(r2)
811307ec:	e0bffb17 	ldw	r2,-20(fp)
811307f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811307f4:	e0bffe17 	ldw	r2,-8(fp)
811307f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811307fc:	0005883a 	mov	r2,zero
}
81130800:	e037883a 	mov	sp,fp
81130804:	df000017 	ldw	fp,0(sp)
81130808:	dec00104 	addi	sp,sp,4
8113080c:	f800283a 	ret

81130810 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81130810:	defff304 	addi	sp,sp,-52
81130814:	de00012e 	bgeu	sp,et,8113081c <OSQPend+0xc>
81130818:	003b68fa 	trap	3
8113081c:	dfc00c15 	stw	ra,48(sp)
81130820:	df000b15 	stw	fp,44(sp)
81130824:	df000b04 	addi	fp,sp,44
81130828:	e13ffd15 	stw	r4,-12(fp)
8113082c:	2805883a 	mov	r2,r5
81130830:	e1bfff15 	stw	r6,-4(fp)
81130834:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130838:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8113083c:	e0bfff17 	ldw	r2,-4(fp)
81130840:	1000021e 	bne	r2,zero,8113084c <OSQPend+0x3c>
        return ((void *)0);
81130844:	0005883a 	mov	r2,zero
81130848:	00009106 	br	81130a90 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8113084c:	e0bffd17 	ldw	r2,-12(fp)
81130850:	1000051e 	bne	r2,zero,81130868 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81130854:	e0bfff17 	ldw	r2,-4(fp)
81130858:	00c00104 	movi	r3,4
8113085c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130860:	0005883a 	mov	r2,zero
81130864:	00008a06 	br	81130a90 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81130868:	e0bffd17 	ldw	r2,-12(fp)
8113086c:	10800003 	ldbu	r2,0(r2)
81130870:	10803fcc 	andi	r2,r2,255
81130874:	108000a0 	cmpeqi	r2,r2,2
81130878:	1000051e 	bne	r2,zero,81130890 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8113087c:	e0bfff17 	ldw	r2,-4(fp)
81130880:	00c00044 	movi	r3,1
81130884:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130888:	0005883a 	mov	r2,zero
8113088c:	00008006 	br	81130a90 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81130890:	d0a08b03 	ldbu	r2,-32212(gp)
81130894:	10803fcc 	andi	r2,r2,255
81130898:	10000526 	beq	r2,zero,811308b0 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8113089c:	e0bfff17 	ldw	r2,-4(fp)
811308a0:	00c00084 	movi	r3,2
811308a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811308a8:	0005883a 	mov	r2,zero
811308ac:	00007806 	br	81130a90 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
811308b0:	d0a07903 	ldbu	r2,-32284(gp)
811308b4:	10803fcc 	andi	r2,r2,255
811308b8:	10000526 	beq	r2,zero,811308d0 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
811308bc:	e0bfff17 	ldw	r2,-4(fp)
811308c0:	00c00344 	movi	r3,13
811308c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811308c8:	0005883a 	mov	r2,zero
811308cc:	00007006 	br	81130a90 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811308d0:	0005303a 	rdctl	r2,status
811308d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811308d8:	e0fffc17 	ldw	r3,-16(fp)
811308dc:	00bfff84 	movi	r2,-2
811308e0:	1884703a 	and	r2,r3,r2
811308e4:	1001703a 	wrctl	status,r2
  
  return context;
811308e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811308ec:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
811308f0:	e0bffd17 	ldw	r2,-12(fp)
811308f4:	10800117 	ldw	r2,4(r2)
811308f8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
811308fc:	e0bff817 	ldw	r2,-32(fp)
81130900:	1080058b 	ldhu	r2,22(r2)
81130904:	10bfffcc 	andi	r2,r2,65535
81130908:	10001e26 	beq	r2,zero,81130984 <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8113090c:	e0bff817 	ldw	r2,-32(fp)
81130910:	10800417 	ldw	r2,16(r2)
81130914:	11000104 	addi	r4,r2,4
81130918:	e0fff817 	ldw	r3,-32(fp)
8113091c:	19000415 	stw	r4,16(r3)
81130920:	10800017 	ldw	r2,0(r2)
81130924:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81130928:	e0bff817 	ldw	r2,-32(fp)
8113092c:	1080058b 	ldhu	r2,22(r2)
81130930:	10bfffc4 	addi	r2,r2,-1
81130934:	1007883a 	mov	r3,r2
81130938:	e0bff817 	ldw	r2,-32(fp)
8113093c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81130940:	e0bff817 	ldw	r2,-32(fp)
81130944:	10c00417 	ldw	r3,16(r2)
81130948:	e0bff817 	ldw	r2,-32(fp)
8113094c:	10800217 	ldw	r2,8(r2)
81130950:	1880041e 	bne	r3,r2,81130964 <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
81130954:	e0bff817 	ldw	r2,-32(fp)
81130958:	10c00117 	ldw	r3,4(r2)
8113095c:	e0bff817 	ldw	r2,-32(fp)
81130960:	10c00415 	stw	r3,16(r2)
81130964:	e0bff617 	ldw	r2,-40(fp)
81130968:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113096c:	e0bff717 	ldw	r2,-36(fp)
81130970:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81130974:	e0bfff17 	ldw	r2,-4(fp)
81130978:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8113097c:	e0bff517 	ldw	r2,-44(fp)
81130980:	00004306 	br	81130a90 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
81130984:	d0a08c17 	ldw	r2,-32208(gp)
81130988:	d0e08c17 	ldw	r3,-32208(gp)
8113098c:	18c00c03 	ldbu	r3,48(r3)
81130990:	18c00114 	ori	r3,r3,4
81130994:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81130998:	d0a08c17 	ldw	r2,-32208(gp)
8113099c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
811309a0:	d0a08c17 	ldw	r2,-32208(gp)
811309a4:	e0fffe0b 	ldhu	r3,-8(fp)
811309a8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
811309ac:	e13ffd17 	ldw	r4,-12(fp)
811309b0:	112bf3c0 	call	8112bf3c <OS_EventTaskWait>
811309b4:	e0bff617 	ldw	r2,-40(fp)
811309b8:	e0bffb15 	stw	r2,-20(fp)
811309bc:	e0bffb17 	ldw	r2,-20(fp)
811309c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
811309c4:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811309c8:	0005303a 	rdctl	r2,status
811309cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811309d0:	e0fff917 	ldw	r3,-28(fp)
811309d4:	00bfff84 	movi	r2,-2
811309d8:	1884703a 	and	r2,r3,r2
811309dc:	1001703a 	wrctl	status,r2
  
  return context;
811309e0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
811309e4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
811309e8:	d0a08c17 	ldw	r2,-32208(gp)
811309ec:	10800c43 	ldbu	r2,49(r2)
811309f0:	10803fcc 	andi	r2,r2,255
811309f4:	10000326 	beq	r2,zero,81130a04 <OSQPend+0x1f4>
811309f8:	108000a0 	cmpeqi	r2,r2,2
811309fc:	1000071e 	bne	r2,zero,81130a1c <OSQPend+0x20c>
81130a00:	00000b06 	br	81130a30 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
81130a04:	d0a08c17 	ldw	r2,-32208(gp)
81130a08:	10800917 	ldw	r2,36(r2)
81130a0c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
81130a10:	e0bfff17 	ldw	r2,-4(fp)
81130a14:	10000005 	stb	zero,0(r2)
             break;
81130a18:	00000e06 	br	81130a54 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
81130a1c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81130a20:	e0bfff17 	ldw	r2,-4(fp)
81130a24:	00c00384 	movi	r3,14
81130a28:	10c00005 	stb	r3,0(r2)
             break;
81130a2c:	00000906 	br	81130a54 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81130a30:	d0a08c17 	ldw	r2,-32208(gp)
81130a34:	e17ffd17 	ldw	r5,-12(fp)
81130a38:	1009883a 	mov	r4,r2
81130a3c:	112c1ac0 	call	8112c1ac <OS_EventTaskRemove>
             pmsg = (void *)0;
81130a40:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81130a44:	e0bfff17 	ldw	r2,-4(fp)
81130a48:	00c00284 	movi	r3,10
81130a4c:	10c00005 	stb	r3,0(r2)
             break;
81130a50:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81130a54:	d0a08c17 	ldw	r2,-32208(gp)
81130a58:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81130a5c:	d0a08c17 	ldw	r2,-32208(gp)
81130a60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81130a64:	d0a08c17 	ldw	r2,-32208(gp)
81130a68:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81130a6c:	d0a08c17 	ldw	r2,-32208(gp)
81130a70:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
81130a74:	d0a08c17 	ldw	r2,-32208(gp)
81130a78:	10000915 	stw	zero,36(r2)
81130a7c:	e0bff617 	ldw	r2,-40(fp)
81130a80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130a84:	e0bffa17 	ldw	r2,-24(fp)
81130a88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
81130a8c:	e0bff517 	ldw	r2,-44(fp)
}
81130a90:	e037883a 	mov	sp,fp
81130a94:	dfc00117 	ldw	ra,4(sp)
81130a98:	df000017 	ldw	fp,0(sp)
81130a9c:	dec00204 	addi	sp,sp,8
81130aa0:	f800283a 	ret

81130aa4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81130aa4:	defff604 	addi	sp,sp,-40
81130aa8:	de00012e 	bgeu	sp,et,81130ab0 <OSQPendAbort+0xc>
81130aac:	003b68fa 	trap	3
81130ab0:	dfc00915 	stw	ra,36(sp)
81130ab4:	df000815 	stw	fp,32(sp)
81130ab8:	df000804 	addi	fp,sp,32
81130abc:	e13ffd15 	stw	r4,-12(fp)
81130ac0:	2805883a 	mov	r2,r5
81130ac4:	e1bfff15 	stw	r6,-4(fp)
81130ac8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81130acc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81130ad0:	e0bfff17 	ldw	r2,-4(fp)
81130ad4:	1000021e 	bne	r2,zero,81130ae0 <OSQPendAbort+0x3c>
        return (0);
81130ad8:	0005883a 	mov	r2,zero
81130adc:	00004906 	br	81130c04 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81130ae0:	e0bffd17 	ldw	r2,-12(fp)
81130ae4:	1000051e 	bne	r2,zero,81130afc <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81130ae8:	e0bfff17 	ldw	r2,-4(fp)
81130aec:	00c00104 	movi	r3,4
81130af0:	10c00005 	stb	r3,0(r2)
        return (0);
81130af4:	0005883a 	mov	r2,zero
81130af8:	00004206 	br	81130c04 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81130afc:	e0bffd17 	ldw	r2,-12(fp)
81130b00:	10800003 	ldbu	r2,0(r2)
81130b04:	10803fcc 	andi	r2,r2,255
81130b08:	108000a0 	cmpeqi	r2,r2,2
81130b0c:	1000051e 	bne	r2,zero,81130b24 <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81130b10:	e0bfff17 	ldw	r2,-4(fp)
81130b14:	00c00044 	movi	r3,1
81130b18:	10c00005 	stb	r3,0(r2)
        return (0);
81130b1c:	0005883a 	mov	r2,zero
81130b20:	00003806 	br	81130c04 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130b24:	0005303a 	rdctl	r2,status
81130b28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130b2c:	e0fffc17 	ldw	r3,-16(fp)
81130b30:	00bfff84 	movi	r2,-2
81130b34:	1884703a 	and	r2,r3,r2
81130b38:	1001703a 	wrctl	status,r2
  
  return context;
81130b3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130b40:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
81130b44:	e0bffd17 	ldw	r2,-12(fp)
81130b48:	10800283 	ldbu	r2,10(r2)
81130b4c:	10803fcc 	andi	r2,r2,255
81130b50:	10002526 	beq	r2,zero,81130be8 <OSQPendAbort+0x144>
        nbr_tasks = 0;
81130b54:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81130b58:	e0bffe03 	ldbu	r2,-8(fp)
81130b5c:	10800060 	cmpeqi	r2,r2,1
81130b60:	10000e26 	beq	r2,zero,81130b9c <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81130b64:	00000806 	br	81130b88 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81130b68:	01c00084 	movi	r7,2
81130b6c:	01800104 	movi	r6,4
81130b70:	000b883a 	mov	r5,zero
81130b74:	e13ffd17 	ldw	r4,-12(fp)
81130b78:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                     nbr_tasks++;
81130b7c:	e0bff803 	ldbu	r2,-32(fp)
81130b80:	10800044 	addi	r2,r2,1
81130b84:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81130b88:	e0bffd17 	ldw	r2,-12(fp)
81130b8c:	10800283 	ldbu	r2,10(r2)
81130b90:	10803fcc 	andi	r2,r2,255
81130b94:	103ff41e 	bne	r2,zero,81130b68 <__reset+0xfb110b68>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81130b98:	00000906 	br	81130bc0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81130b9c:	01c00084 	movi	r7,2
81130ba0:	01800104 	movi	r6,4
81130ba4:	000b883a 	mov	r5,zero
81130ba8:	e13ffd17 	ldw	r4,-12(fp)
81130bac:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                 nbr_tasks++;
81130bb0:	e0bff803 	ldbu	r2,-32(fp)
81130bb4:	10800044 	addi	r2,r2,1
81130bb8:	e0bff805 	stb	r2,-32(fp)
                 break;
81130bbc:	0001883a 	nop
81130bc0:	e0bff917 	ldw	r2,-28(fp)
81130bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130bc8:	e0bffa17 	ldw	r2,-24(fp)
81130bcc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
81130bd0:	112c8580 	call	8112c858 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81130bd4:	e0bfff17 	ldw	r2,-4(fp)
81130bd8:	00c00384 	movi	r3,14
81130bdc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81130be0:	e0bff803 	ldbu	r2,-32(fp)
81130be4:	00000706 	br	81130c04 <OSQPendAbort+0x160>
81130be8:	e0bff917 	ldw	r2,-28(fp)
81130bec:	e0bffb15 	stw	r2,-20(fp)
81130bf0:	e0bffb17 	ldw	r2,-20(fp)
81130bf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81130bf8:	e0bfff17 	ldw	r2,-4(fp)
81130bfc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
81130c00:	0005883a 	mov	r2,zero
}
81130c04:	e037883a 	mov	sp,fp
81130c08:	dfc00117 	ldw	ra,4(sp)
81130c0c:	df000017 	ldw	fp,0(sp)
81130c10:	dec00204 	addi	sp,sp,8
81130c14:	f800283a 	ret

81130c18 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
81130c18:	defff604 	addi	sp,sp,-40
81130c1c:	de00012e 	bgeu	sp,et,81130c24 <OSQPost+0xc>
81130c20:	003b68fa 	trap	3
81130c24:	dfc00915 	stw	ra,36(sp)
81130c28:	df000815 	stw	fp,32(sp)
81130c2c:	df000804 	addi	fp,sp,32
81130c30:	e13ffe15 	stw	r4,-8(fp)
81130c34:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81130c38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
81130c3c:	e0bffe17 	ldw	r2,-8(fp)
81130c40:	1000021e 	bne	r2,zero,81130c4c <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
81130c44:	00800104 	movi	r2,4
81130c48:	00004a06 	br	81130d74 <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
81130c4c:	e0bffe17 	ldw	r2,-8(fp)
81130c50:	10800003 	ldbu	r2,0(r2)
81130c54:	10803fcc 	andi	r2,r2,255
81130c58:	108000a0 	cmpeqi	r2,r2,2
81130c5c:	1000021e 	bne	r2,zero,81130c68 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
81130c60:	00800044 	movi	r2,1
81130c64:	00004306 	br	81130d74 <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130c68:	0005303a 	rdctl	r2,status
81130c6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130c70:	e0fffd17 	ldw	r3,-12(fp)
81130c74:	00bfff84 	movi	r2,-2
81130c78:	1884703a 	and	r2,r3,r2
81130c7c:	1001703a 	wrctl	status,r2
  
  return context;
81130c80:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81130c84:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
81130c88:	e0bffe17 	ldw	r2,-8(fp)
81130c8c:	10800283 	ldbu	r2,10(r2)
81130c90:	10803fcc 	andi	r2,r2,255
81130c94:	10000c26 	beq	r2,zero,81130cc8 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81130c98:	000f883a 	mov	r7,zero
81130c9c:	01800104 	movi	r6,4
81130ca0:	e17fff17 	ldw	r5,-4(fp)
81130ca4:	e13ffe17 	ldw	r4,-8(fp)
81130ca8:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
81130cac:	e0bff817 	ldw	r2,-32(fp)
81130cb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130cb4:	e0bff917 	ldw	r2,-28(fp)
81130cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
81130cbc:	112c8580 	call	8112c858 <OS_Sched>
        return (OS_ERR_NONE);
81130cc0:	0005883a 	mov	r2,zero
81130cc4:	00002b06 	br	81130d74 <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
81130cc8:	e0bffe17 	ldw	r2,-8(fp)
81130ccc:	10800117 	ldw	r2,4(r2)
81130cd0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
81130cd4:	e0bffb17 	ldw	r2,-20(fp)
81130cd8:	10c0058b 	ldhu	r3,22(r2)
81130cdc:	e0bffb17 	ldw	r2,-20(fp)
81130ce0:	1080050b 	ldhu	r2,20(r2)
81130ce4:	18ffffcc 	andi	r3,r3,65535
81130ce8:	10bfffcc 	andi	r2,r2,65535
81130cec:	18800636 	bltu	r3,r2,81130d08 <OSQPost+0xf0>
81130cf0:	e0bff817 	ldw	r2,-32(fp)
81130cf4:	e0bffa15 	stw	r2,-24(fp)
81130cf8:	e0bffa17 	ldw	r2,-24(fp)
81130cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81130d00:	00800784 	movi	r2,30
81130d04:	00001b06 	br	81130d74 <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
81130d08:	e0bffb17 	ldw	r2,-20(fp)
81130d0c:	10800317 	ldw	r2,12(r2)
81130d10:	11000104 	addi	r4,r2,4
81130d14:	e0fffb17 	ldw	r3,-20(fp)
81130d18:	19000315 	stw	r4,12(r3)
81130d1c:	e0ffff17 	ldw	r3,-4(fp)
81130d20:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
81130d24:	e0bffb17 	ldw	r2,-20(fp)
81130d28:	1080058b 	ldhu	r2,22(r2)
81130d2c:	10800044 	addi	r2,r2,1
81130d30:	1007883a 	mov	r3,r2
81130d34:	e0bffb17 	ldw	r2,-20(fp)
81130d38:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
81130d3c:	e0bffb17 	ldw	r2,-20(fp)
81130d40:	10c00317 	ldw	r3,12(r2)
81130d44:	e0bffb17 	ldw	r2,-20(fp)
81130d48:	10800217 	ldw	r2,8(r2)
81130d4c:	1880041e 	bne	r3,r2,81130d60 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
81130d50:	e0bffb17 	ldw	r2,-20(fp)
81130d54:	10c00117 	ldw	r3,4(r2)
81130d58:	e0bffb17 	ldw	r2,-20(fp)
81130d5c:	10c00315 	stw	r3,12(r2)
81130d60:	e0bff817 	ldw	r2,-32(fp)
81130d64:	e0bffc15 	stw	r2,-16(fp)
81130d68:	e0bffc17 	ldw	r2,-16(fp)
81130d6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130d70:	0005883a 	mov	r2,zero
}
81130d74:	e037883a 	mov	sp,fp
81130d78:	dfc00117 	ldw	ra,4(sp)
81130d7c:	df000017 	ldw	fp,0(sp)
81130d80:	dec00204 	addi	sp,sp,8
81130d84:	f800283a 	ret

81130d88 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
81130d88:	defff604 	addi	sp,sp,-40
81130d8c:	de00012e 	bgeu	sp,et,81130d94 <OSQPostFront+0xc>
81130d90:	003b68fa 	trap	3
81130d94:	dfc00915 	stw	ra,36(sp)
81130d98:	df000815 	stw	fp,32(sp)
81130d9c:	df000804 	addi	fp,sp,32
81130da0:	e13ffe15 	stw	r4,-8(fp)
81130da4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130da8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81130dac:	e0bffe17 	ldw	r2,-8(fp)
81130db0:	1000021e 	bne	r2,zero,81130dbc <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
81130db4:	00800104 	movi	r2,4
81130db8:	00004c06 	br	81130eec <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81130dbc:	e0bffe17 	ldw	r2,-8(fp)
81130dc0:	10800003 	ldbu	r2,0(r2)
81130dc4:	10803fcc 	andi	r2,r2,255
81130dc8:	108000a0 	cmpeqi	r2,r2,2
81130dcc:	1000021e 	bne	r2,zero,81130dd8 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
81130dd0:	00800044 	movi	r2,1
81130dd4:	00004506 	br	81130eec <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130dd8:	0005303a 	rdctl	r2,status
81130ddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130de0:	e0fffd17 	ldw	r3,-12(fp)
81130de4:	00bfff84 	movi	r2,-2
81130de8:	1884703a 	and	r2,r3,r2
81130dec:	1001703a 	wrctl	status,r2
  
  return context;
81130df0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81130df4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
81130df8:	e0bffe17 	ldw	r2,-8(fp)
81130dfc:	10800283 	ldbu	r2,10(r2)
81130e00:	10803fcc 	andi	r2,r2,255
81130e04:	10000c26 	beq	r2,zero,81130e38 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81130e08:	000f883a 	mov	r7,zero
81130e0c:	01800104 	movi	r6,4
81130e10:	e17fff17 	ldw	r5,-4(fp)
81130e14:	e13ffe17 	ldw	r4,-8(fp)
81130e18:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
81130e1c:	e0bff817 	ldw	r2,-32(fp)
81130e20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130e24:	e0bff917 	ldw	r2,-28(fp)
81130e28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
81130e2c:	112c8580 	call	8112c858 <OS_Sched>
        return (OS_ERR_NONE);
81130e30:	0005883a 	mov	r2,zero
81130e34:	00002d06 	br	81130eec <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
81130e38:	e0bffe17 	ldw	r2,-8(fp)
81130e3c:	10800117 	ldw	r2,4(r2)
81130e40:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
81130e44:	e0bffb17 	ldw	r2,-20(fp)
81130e48:	10c0058b 	ldhu	r3,22(r2)
81130e4c:	e0bffb17 	ldw	r2,-20(fp)
81130e50:	1080050b 	ldhu	r2,20(r2)
81130e54:	18ffffcc 	andi	r3,r3,65535
81130e58:	10bfffcc 	andi	r2,r2,65535
81130e5c:	18800636 	bltu	r3,r2,81130e78 <OSQPostFront+0xf0>
81130e60:	e0bff817 	ldw	r2,-32(fp)
81130e64:	e0bffa15 	stw	r2,-24(fp)
81130e68:	e0bffa17 	ldw	r2,-24(fp)
81130e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81130e70:	00800784 	movi	r2,30
81130e74:	00001d06 	br	81130eec <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
81130e78:	e0bffb17 	ldw	r2,-20(fp)
81130e7c:	10c00417 	ldw	r3,16(r2)
81130e80:	e0bffb17 	ldw	r2,-20(fp)
81130e84:	10800117 	ldw	r2,4(r2)
81130e88:	1880041e 	bne	r3,r2,81130e9c <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
81130e8c:	e0bffb17 	ldw	r2,-20(fp)
81130e90:	10c00217 	ldw	r3,8(r2)
81130e94:	e0bffb17 	ldw	r2,-20(fp)
81130e98:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
81130e9c:	e0bffb17 	ldw	r2,-20(fp)
81130ea0:	10800417 	ldw	r2,16(r2)
81130ea4:	10ffff04 	addi	r3,r2,-4
81130ea8:	e0bffb17 	ldw	r2,-20(fp)
81130eac:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
81130eb0:	e0bffb17 	ldw	r2,-20(fp)
81130eb4:	10800417 	ldw	r2,16(r2)
81130eb8:	e0ffff17 	ldw	r3,-4(fp)
81130ebc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
81130ec0:	e0bffb17 	ldw	r2,-20(fp)
81130ec4:	1080058b 	ldhu	r2,22(r2)
81130ec8:	10800044 	addi	r2,r2,1
81130ecc:	1007883a 	mov	r3,r2
81130ed0:	e0bffb17 	ldw	r2,-20(fp)
81130ed4:	10c0058d 	sth	r3,22(r2)
81130ed8:	e0bff817 	ldw	r2,-32(fp)
81130edc:	e0bffc15 	stw	r2,-16(fp)
81130ee0:	e0bffc17 	ldw	r2,-16(fp)
81130ee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130ee8:	0005883a 	mov	r2,zero
}
81130eec:	e037883a 	mov	sp,fp
81130ef0:	dfc00117 	ldw	ra,4(sp)
81130ef4:	df000017 	ldw	fp,0(sp)
81130ef8:	dec00204 	addi	sp,sp,8
81130efc:	f800283a 	ret

81130f00 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
81130f00:	defff504 	addi	sp,sp,-44
81130f04:	de00012e 	bgeu	sp,et,81130f0c <OSQPostOpt+0xc>
81130f08:	003b68fa 	trap	3
81130f0c:	dfc00a15 	stw	ra,40(sp)
81130f10:	df000915 	stw	fp,36(sp)
81130f14:	df000904 	addi	fp,sp,36
81130f18:	e13ffd15 	stw	r4,-12(fp)
81130f1c:	e17ffe15 	stw	r5,-8(fp)
81130f20:	3005883a 	mov	r2,r6
81130f24:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130f28:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81130f2c:	e0bffd17 	ldw	r2,-12(fp)
81130f30:	1000021e 	bne	r2,zero,81130f3c <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
81130f34:	00800104 	movi	r2,4
81130f38:	00007106 	br	81131100 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81130f3c:	e0bffd17 	ldw	r2,-12(fp)
81130f40:	10800003 	ldbu	r2,0(r2)
81130f44:	10803fcc 	andi	r2,r2,255
81130f48:	108000a0 	cmpeqi	r2,r2,2
81130f4c:	1000021e 	bne	r2,zero,81130f58 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
81130f50:	00800044 	movi	r2,1
81130f54:	00006a06 	br	81131100 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130f58:	0005303a 	rdctl	r2,status
81130f5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130f60:	e0fffc17 	ldw	r3,-16(fp)
81130f64:	00bfff84 	movi	r2,-2
81130f68:	1884703a 	and	r2,r3,r2
81130f6c:	1001703a 	wrctl	status,r2
  
  return context;
81130f70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130f74:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
81130f78:	e0bffd17 	ldw	r2,-12(fp)
81130f7c:	10800283 	ldbu	r2,10(r2)
81130f80:	10803fcc 	andi	r2,r2,255
81130f84:	10001d26 	beq	r2,zero,81130ffc <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
81130f88:	e0bfff03 	ldbu	r2,-4(fp)
81130f8c:	1080004c 	andi	r2,r2,1
81130f90:	10000b26 	beq	r2,zero,81130fc0 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
81130f94:	00000506 	br	81130fac <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81130f98:	000f883a 	mov	r7,zero
81130f9c:	01800104 	movi	r6,4
81130fa0:	e17ffe17 	ldw	r5,-8(fp)
81130fa4:	e13ffd17 	ldw	r4,-12(fp)
81130fa8:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
81130fac:	e0bffd17 	ldw	r2,-12(fp)
81130fb0:	10800283 	ldbu	r2,10(r2)
81130fb4:	10803fcc 	andi	r2,r2,255
81130fb8:	103ff71e 	bne	r2,zero,81130f98 <__reset+0xfb110f98>
81130fbc:	00000506 	br	81130fd4 <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81130fc0:	000f883a 	mov	r7,zero
81130fc4:	01800104 	movi	r6,4
81130fc8:	e17ffe17 	ldw	r5,-8(fp)
81130fcc:	e13ffd17 	ldw	r4,-12(fp)
81130fd0:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
81130fd4:	e0bff717 	ldw	r2,-36(fp)
81130fd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130fdc:	e0bff817 	ldw	r2,-32(fp)
81130fe0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
81130fe4:	e0bfff03 	ldbu	r2,-4(fp)
81130fe8:	1080010c 	andi	r2,r2,4
81130fec:	1000011e 	bne	r2,zero,81130ff4 <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
81130ff0:	112c8580 	call	8112c858 <OS_Sched>
        }
        return (OS_ERR_NONE);
81130ff4:	0005883a 	mov	r2,zero
81130ff8:	00004106 	br	81131100 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
81130ffc:	e0bffd17 	ldw	r2,-12(fp)
81131000:	10800117 	ldw	r2,4(r2)
81131004:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
81131008:	e0bffa17 	ldw	r2,-24(fp)
8113100c:	10c0058b 	ldhu	r3,22(r2)
81131010:	e0bffa17 	ldw	r2,-24(fp)
81131014:	1080050b 	ldhu	r2,20(r2)
81131018:	18ffffcc 	andi	r3,r3,65535
8113101c:	10bfffcc 	andi	r2,r2,65535
81131020:	18800636 	bltu	r3,r2,8113103c <OSQPostOpt+0x13c>
81131024:	e0bff717 	ldw	r2,-36(fp)
81131028:	e0bff915 	stw	r2,-28(fp)
8113102c:	e0bff917 	ldw	r2,-28(fp)
81131030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81131034:	00800784 	movi	r2,30
81131038:	00003106 	br	81131100 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8113103c:	e0bfff03 	ldbu	r2,-4(fp)
81131040:	1080008c 	andi	r2,r2,2
81131044:	10001326 	beq	r2,zero,81131094 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
81131048:	e0bffa17 	ldw	r2,-24(fp)
8113104c:	10c00417 	ldw	r3,16(r2)
81131050:	e0bffa17 	ldw	r2,-24(fp)
81131054:	10800117 	ldw	r2,4(r2)
81131058:	1880041e 	bne	r3,r2,8113106c <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8113105c:	e0bffa17 	ldw	r2,-24(fp)
81131060:	10c00217 	ldw	r3,8(r2)
81131064:	e0bffa17 	ldw	r2,-24(fp)
81131068:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8113106c:	e0bffa17 	ldw	r2,-24(fp)
81131070:	10800417 	ldw	r2,16(r2)
81131074:	10ffff04 	addi	r3,r2,-4
81131078:	e0bffa17 	ldw	r2,-24(fp)
8113107c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
81131080:	e0bffa17 	ldw	r2,-24(fp)
81131084:	10800417 	ldw	r2,16(r2)
81131088:	e0fffe17 	ldw	r3,-8(fp)
8113108c:	10c00015 	stw	r3,0(r2)
81131090:	00001006 	br	811310d4 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
81131094:	e0bffa17 	ldw	r2,-24(fp)
81131098:	10800317 	ldw	r2,12(r2)
8113109c:	11000104 	addi	r4,r2,4
811310a0:	e0fffa17 	ldw	r3,-24(fp)
811310a4:	19000315 	stw	r4,12(r3)
811310a8:	e0fffe17 	ldw	r3,-8(fp)
811310ac:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
811310b0:	e0bffa17 	ldw	r2,-24(fp)
811310b4:	10c00317 	ldw	r3,12(r2)
811310b8:	e0bffa17 	ldw	r2,-24(fp)
811310bc:	10800217 	ldw	r2,8(r2)
811310c0:	1880041e 	bne	r3,r2,811310d4 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
811310c4:	e0bffa17 	ldw	r2,-24(fp)
811310c8:	10c00117 	ldw	r3,4(r2)
811310cc:	e0bffa17 	ldw	r2,-24(fp)
811310d0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
811310d4:	e0bffa17 	ldw	r2,-24(fp)
811310d8:	1080058b 	ldhu	r2,22(r2)
811310dc:	10800044 	addi	r2,r2,1
811310e0:	1007883a 	mov	r3,r2
811310e4:	e0bffa17 	ldw	r2,-24(fp)
811310e8:	10c0058d 	sth	r3,22(r2)
811310ec:	e0bff717 	ldw	r2,-36(fp)
811310f0:	e0bffb15 	stw	r2,-20(fp)
811310f4:	e0bffb17 	ldw	r2,-20(fp)
811310f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811310fc:	0005883a 	mov	r2,zero
}
81131100:	e037883a 	mov	sp,fp
81131104:	dfc00117 	ldw	ra,4(sp)
81131108:	df000017 	ldw	fp,0(sp)
8113110c:	dec00204 	addi	sp,sp,8
81131110:	f800283a 	ret

81131114 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
81131114:	defff604 	addi	sp,sp,-40
81131118:	de00012e 	bgeu	sp,et,81131120 <OSQQuery+0xc>
8113111c:	003b68fa 	trap	3
81131120:	df000915 	stw	fp,36(sp)
81131124:	df000904 	addi	fp,sp,36
81131128:	e13ffe15 	stw	r4,-8(fp)
8113112c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81131130:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
81131134:	e0bffe17 	ldw	r2,-8(fp)
81131138:	1000021e 	bne	r2,zero,81131144 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8113113c:	00800104 	movi	r2,4
81131140:	00004906 	br	81131268 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
81131144:	e0bfff17 	ldw	r2,-4(fp)
81131148:	1000021e 	bne	r2,zero,81131154 <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8113114c:	00800244 	movi	r2,9
81131150:	00004506 	br	81131268 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
81131154:	e0bffe17 	ldw	r2,-8(fp)
81131158:	10800003 	ldbu	r2,0(r2)
8113115c:	10803fcc 	andi	r2,r2,255
81131160:	108000a0 	cmpeqi	r2,r2,2
81131164:	1000021e 	bne	r2,zero,81131170 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
81131168:	00800044 	movi	r2,1
8113116c:	00003e06 	br	81131268 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131170:	0005303a 	rdctl	r2,status
81131174:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131178:	e0fffd17 	ldw	r3,-12(fp)
8113117c:	00bfff84 	movi	r2,-2
81131180:	1884703a 	and	r2,r3,r2
81131184:	1001703a 	wrctl	status,r2
  
  return context;
81131188:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8113118c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
81131190:	e0bffe17 	ldw	r2,-8(fp)
81131194:	10c00283 	ldbu	r3,10(r2)
81131198:	e0bfff17 	ldw	r2,-4(fp)
8113119c:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
811311a0:	e0bffe17 	ldw	r2,-8(fp)
811311a4:	108002c4 	addi	r2,r2,11
811311a8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
811311ac:	e0bfff17 	ldw	r2,-4(fp)
811311b0:	10800204 	addi	r2,r2,8
811311b4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811311b8:	e03ff705 	stb	zero,-36(fp)
811311bc:	00000b06 	br	811311ec <OSQQuery+0xd8>
        *pdest++ = *psrc++;
811311c0:	e0bff917 	ldw	r2,-28(fp)
811311c4:	10c00044 	addi	r3,r2,1
811311c8:	e0fff915 	stw	r3,-28(fp)
811311cc:	e0fff817 	ldw	r3,-32(fp)
811311d0:	19000044 	addi	r4,r3,1
811311d4:	e13ff815 	stw	r4,-32(fp)
811311d8:	18c00003 	ldbu	r3,0(r3)
811311dc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811311e0:	e0bff703 	ldbu	r2,-36(fp)
811311e4:	10800044 	addi	r2,r2,1
811311e8:	e0bff705 	stb	r2,-36(fp)
811311ec:	e0bff703 	ldbu	r2,-36(fp)
811311f0:	108001b0 	cmpltui	r2,r2,6
811311f4:	103ff21e 	bne	r2,zero,811311c0 <__reset+0xfb1111c0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
811311f8:	e0bffe17 	ldw	r2,-8(fp)
811311fc:	10800117 	ldw	r2,4(r2)
81131200:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
81131204:	e0bffc17 	ldw	r2,-16(fp)
81131208:	1080058b 	ldhu	r2,22(r2)
8113120c:	10bfffcc 	andi	r2,r2,65535
81131210:	10000626 	beq	r2,zero,8113122c <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
81131214:	e0bffc17 	ldw	r2,-16(fp)
81131218:	10800417 	ldw	r2,16(r2)
8113121c:	10c00017 	ldw	r3,0(r2)
81131220:	e0bfff17 	ldw	r2,-4(fp)
81131224:	10c00015 	stw	r3,0(r2)
81131228:	00000206 	br	81131234 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8113122c:	e0bfff17 	ldw	r2,-4(fp)
81131230:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
81131234:	e0bffc17 	ldw	r2,-16(fp)
81131238:	10c0058b 	ldhu	r3,22(r2)
8113123c:	e0bfff17 	ldw	r2,-4(fp)
81131240:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
81131244:	e0bffc17 	ldw	r2,-16(fp)
81131248:	10c0050b 	ldhu	r3,20(r2)
8113124c:	e0bfff17 	ldw	r2,-4(fp)
81131250:	10c0018d 	sth	r3,6(r2)
81131254:	e0bffa17 	ldw	r2,-24(fp)
81131258:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113125c:	e0bffb17 	ldw	r2,-20(fp)
81131260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131264:	0005883a 	mov	r2,zero
}
81131268:	e037883a 	mov	sp,fp
8113126c:	df000017 	ldw	fp,0(sp)
81131270:	dec00104 	addi	sp,sp,4
81131274:	f800283a 	ret

81131278 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
81131278:	defffb04 	addi	sp,sp,-20
8113127c:	de00012e 	bgeu	sp,et,81131284 <OS_QInit+0xc>
81131280:	003b68fa 	trap	3
81131284:	dfc00415 	stw	ra,16(sp)
81131288:	df000315 	stw	fp,12(sp)
8113128c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
81131290:	01406004 	movi	r5,384
81131294:	01204574 	movhi	r4,33045
81131298:	21123604 	addi	r4,r4,18648
8113129c:	112c78c0 	call	8112c78c <OS_MemClr>
    pq1 = &OSQTbl[0];
811312a0:	00a04574 	movhi	r2,33045
811312a4:	10923604 	addi	r2,r2,18648
811312a8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
811312ac:	00a04574 	movhi	r2,33045
811312b0:	10923c04 	addi	r2,r2,18672
811312b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
811312b8:	e03ffd0d 	sth	zero,-12(fp)
811312bc:	00000c06 	br	811312f0 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
811312c0:	e0bffe17 	ldw	r2,-8(fp)
811312c4:	e0ffff17 	ldw	r3,-4(fp)
811312c8:	10c00015 	stw	r3,0(r2)
        pq1++;
811312cc:	e0bffe17 	ldw	r2,-8(fp)
811312d0:	10800604 	addi	r2,r2,24
811312d4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
811312d8:	e0bfff17 	ldw	r2,-4(fp)
811312dc:	10800604 	addi	r2,r2,24
811312e0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
811312e4:	e0bffd0b 	ldhu	r2,-12(fp)
811312e8:	10800044 	addi	r2,r2,1
811312ec:	e0bffd0d 	sth	r2,-12(fp)
811312f0:	e0bffd0b 	ldhu	r2,-12(fp)
811312f4:	108003f0 	cmpltui	r2,r2,15
811312f8:	103ff11e 	bne	r2,zero,811312c0 <__reset+0xfb1112c0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
811312fc:	e0bffe17 	ldw	r2,-8(fp)
81131300:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
81131304:	00a04574 	movhi	r2,33045
81131308:	10923604 	addi	r2,r2,18648
8113130c:	d0a08715 	stw	r2,-32228(gp)
#endif
}
81131310:	0001883a 	nop
81131314:	e037883a 	mov	sp,fp
81131318:	dfc00117 	ldw	ra,4(sp)
8113131c:	df000017 	ldw	fp,0(sp)
81131320:	dec00204 	addi	sp,sp,8
81131324:	f800283a 	ret

81131328 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
81131328:	defffa04 	addi	sp,sp,-24
8113132c:	de00012e 	bgeu	sp,et,81131334 <OSSemAccept+0xc>
81131330:	003b68fa 	trap	3
81131334:	df000515 	stw	fp,20(sp)
81131338:	df000504 	addi	fp,sp,20
8113133c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131340:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131344:	e0bfff17 	ldw	r2,-4(fp)
81131348:	1000021e 	bne	r2,zero,81131354 <OSSemAccept+0x2c>
        return (0);
8113134c:	0005883a 	mov	r2,zero
81131350:	00001f06 	br	811313d0 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131354:	e0bfff17 	ldw	r2,-4(fp)
81131358:	10800003 	ldbu	r2,0(r2)
8113135c:	10803fcc 	andi	r2,r2,255
81131360:	108000e0 	cmpeqi	r2,r2,3
81131364:	1000021e 	bne	r2,zero,81131370 <OSSemAccept+0x48>
        return (0);
81131368:	0005883a 	mov	r2,zero
8113136c:	00001806 	br	811313d0 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131370:	0005303a 	rdctl	r2,status
81131374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131378:	e0fffe17 	ldw	r3,-8(fp)
8113137c:	00bfff84 	movi	r2,-2
81131380:	1884703a 	and	r2,r3,r2
81131384:	1001703a 	wrctl	status,r2
  
  return context;
81131388:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8113138c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
81131390:	e0bfff17 	ldw	r2,-4(fp)
81131394:	1080020b 	ldhu	r2,8(r2)
81131398:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8113139c:	e0bffd0b 	ldhu	r2,-12(fp)
811313a0:	10000626 	beq	r2,zero,811313bc <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
811313a4:	e0bfff17 	ldw	r2,-4(fp)
811313a8:	1080020b 	ldhu	r2,8(r2)
811313ac:	10bfffc4 	addi	r2,r2,-1
811313b0:	1007883a 	mov	r3,r2
811313b4:	e0bfff17 	ldw	r2,-4(fp)
811313b8:	10c0020d 	sth	r3,8(r2)
811313bc:	e0bffb17 	ldw	r2,-20(fp)
811313c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811313c4:	e0bffc17 	ldw	r2,-16(fp)
811313c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
811313cc:	e0bffd0b 	ldhu	r2,-12(fp)
}
811313d0:	e037883a 	mov	sp,fp
811313d4:	df000017 	ldw	fp,0(sp)
811313d8:	dec00104 	addi	sp,sp,4
811313dc:	f800283a 	ret

811313e0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
811313e0:	defff904 	addi	sp,sp,-28
811313e4:	de00012e 	bgeu	sp,et,811313ec <OSSemCreate+0xc>
811313e8:	003b68fa 	trap	3
811313ec:	dfc00615 	stw	ra,24(sp)
811313f0:	df000515 	stw	fp,20(sp)
811313f4:	df000504 	addi	fp,sp,20
811313f8:	2005883a 	mov	r2,r4
811313fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81131400:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81131404:	d0a08b03 	ldbu	r2,-32212(gp)
81131408:	10803fcc 	andi	r2,r2,255
8113140c:	10000226 	beq	r2,zero,81131418 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
81131410:	0005883a 	mov	r2,zero
81131414:	00002506 	br	811314ac <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131418:	0005303a 	rdctl	r2,status
8113141c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131420:	e0fffe17 	ldw	r3,-8(fp)
81131424:	00bfff84 	movi	r2,-2
81131428:	1884703a 	and	r2,r3,r2
8113142c:	1001703a 	wrctl	status,r2
  
  return context;
81131430:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81131434:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
81131438:	d0a08a17 	ldw	r2,-32216(gp)
8113143c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
81131440:	d0a08a17 	ldw	r2,-32216(gp)
81131444:	10000326 	beq	r2,zero,81131454 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
81131448:	d0a08a17 	ldw	r2,-32216(gp)
8113144c:	10800117 	ldw	r2,4(r2)
81131450:	d0a08a15 	stw	r2,-32216(gp)
81131454:	e0bffb17 	ldw	r2,-20(fp)
81131458:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113145c:	e0bffc17 	ldw	r2,-16(fp)
81131460:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
81131464:	e0bffd17 	ldw	r2,-12(fp)
81131468:	10000f26 	beq	r2,zero,811314a8 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8113146c:	e0bffd17 	ldw	r2,-12(fp)
81131470:	00c000c4 	movi	r3,3
81131474:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
81131478:	e0bffd17 	ldw	r2,-12(fp)
8113147c:	e0ffff0b 	ldhu	r3,-4(fp)
81131480:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
81131484:	e0bffd17 	ldw	r2,-12(fp)
81131488:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8113148c:	e0bffd17 	ldw	r2,-12(fp)
81131490:	00c00fc4 	movi	r3,63
81131494:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
81131498:	e0bffd17 	ldw	r2,-12(fp)
8113149c:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
811314a0:	e13ffd17 	ldw	r4,-12(fp)
811314a4:	112c3740 	call	8112c374 <OS_EventWaitListInit>
    }
    return (pevent);
811314a8:	e0bffd17 	ldw	r2,-12(fp)
}
811314ac:	e037883a 	mov	sp,fp
811314b0:	dfc00117 	ldw	ra,4(sp)
811314b4:	df000017 	ldw	fp,0(sp)
811314b8:	dec00204 	addi	sp,sp,8
811314bc:	f800283a 	ret

811314c0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811314c0:	defff304 	addi	sp,sp,-52
811314c4:	de00012e 	bgeu	sp,et,811314cc <OSSemDel+0xc>
811314c8:	003b68fa 	trap	3
811314cc:	dfc00c15 	stw	ra,48(sp)
811314d0:	df000b15 	stw	fp,44(sp)
811314d4:	df000b04 	addi	fp,sp,44
811314d8:	e13ffd15 	stw	r4,-12(fp)
811314dc:	2805883a 	mov	r2,r5
811314e0:	e1bfff15 	stw	r6,-4(fp)
811314e4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811314e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811314ec:	e0bfff17 	ldw	r2,-4(fp)
811314f0:	1000021e 	bne	r2,zero,811314fc <OSSemDel+0x3c>
        return (pevent);
811314f4:	e0bffd17 	ldw	r2,-12(fp)
811314f8:	00007e06 	br	811316f4 <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
811314fc:	e0bffd17 	ldw	r2,-12(fp)
81131500:	1000051e 	bne	r2,zero,81131518 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81131504:	e0bfff17 	ldw	r2,-4(fp)
81131508:	00c00104 	movi	r3,4
8113150c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81131510:	e0bffd17 	ldw	r2,-12(fp)
81131514:	00007706 	br	811316f4 <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81131518:	e0bffd17 	ldw	r2,-12(fp)
8113151c:	10800003 	ldbu	r2,0(r2)
81131520:	10803fcc 	andi	r2,r2,255
81131524:	108000e0 	cmpeqi	r2,r2,3
81131528:	1000051e 	bne	r2,zero,81131540 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8113152c:	e0bfff17 	ldw	r2,-4(fp)
81131530:	00c00044 	movi	r3,1
81131534:	10c00005 	stb	r3,0(r2)
        return (pevent);
81131538:	e0bffd17 	ldw	r2,-12(fp)
8113153c:	00006d06 	br	811316f4 <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81131540:	d0a08b03 	ldbu	r2,-32212(gp)
81131544:	10803fcc 	andi	r2,r2,255
81131548:	10000526 	beq	r2,zero,81131560 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8113154c:	e0bfff17 	ldw	r2,-4(fp)
81131550:	00c003c4 	movi	r3,15
81131554:	10c00005 	stb	r3,0(r2)
        return (pevent);
81131558:	e0bffd17 	ldw	r2,-12(fp)
8113155c:	00006506 	br	811316f4 <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131560:	0005303a 	rdctl	r2,status
81131564:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131568:	e0fffc17 	ldw	r3,-16(fp)
8113156c:	00bfff84 	movi	r2,-2
81131570:	1884703a 	and	r2,r3,r2
81131574:	1001703a 	wrctl	status,r2
  
  return context;
81131578:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8113157c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
81131580:	e0bffd17 	ldw	r2,-12(fp)
81131584:	10800283 	ldbu	r2,10(r2)
81131588:	10803fcc 	andi	r2,r2,255
8113158c:	10000326 	beq	r2,zero,8113159c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81131590:	00800044 	movi	r2,1
81131594:	e0bff505 	stb	r2,-44(fp)
81131598:	00000106 	br	811315a0 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8113159c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
811315a0:	e0bffe03 	ldbu	r2,-8(fp)
811315a4:	10000326 	beq	r2,zero,811315b4 <OSSemDel+0xf4>
811315a8:	10800060 	cmpeqi	r2,r2,1
811315ac:	1000281e 	bne	r2,zero,81131650 <OSSemDel+0x190>
811315b0:	00004506 	br	811316c8 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
811315b4:	e0bff503 	ldbu	r2,-44(fp)
811315b8:	1000161e 	bne	r2,zero,81131614 <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
811315bc:	e0bffd17 	ldw	r2,-12(fp)
811315c0:	00c00fc4 	movi	r3,63
811315c4:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
811315c8:	e0bffd17 	ldw	r2,-12(fp)
811315cc:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
811315d0:	e0bffd17 	ldw	r2,-12(fp)
811315d4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
811315d8:	d0e08a17 	ldw	r3,-32216(gp)
811315dc:	e0bffd17 	ldw	r2,-12(fp)
811315e0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
811315e4:	e0bffd17 	ldw	r2,-12(fp)
811315e8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
811315ec:	e0bffd17 	ldw	r2,-12(fp)
811315f0:	d0a08a15 	stw	r2,-32216(gp)
811315f4:	e0bff717 	ldw	r2,-36(fp)
811315f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811315fc:	e0bff817 	ldw	r2,-32(fp)
81131600:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81131604:	e0bfff17 	ldw	r2,-4(fp)
81131608:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8113160c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81131610:	00003706 	br	811316f0 <OSSemDel+0x230>
81131614:	e0bff717 	ldw	r2,-36(fp)
81131618:	e0bff915 	stw	r2,-28(fp)
8113161c:	e0bff917 	ldw	r2,-28(fp)
81131620:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81131624:	e0bfff17 	ldw	r2,-4(fp)
81131628:	00c01244 	movi	r3,73
8113162c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81131630:	e0bffd17 	ldw	r2,-12(fp)
81131634:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81131638:	00002d06 	br	811316f0 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8113163c:	000f883a 	mov	r7,zero
81131640:	01800044 	movi	r6,1
81131644:	000b883a 	mov	r5,zero
81131648:	e13ffd17 	ldw	r4,-12(fp)
8113164c:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
81131650:	e0bffd17 	ldw	r2,-12(fp)
81131654:	10800283 	ldbu	r2,10(r2)
81131658:	10803fcc 	andi	r2,r2,255
8113165c:	103ff71e 	bne	r2,zero,8113163c <__reset+0xfb11163c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81131660:	e0bffd17 	ldw	r2,-12(fp)
81131664:	00c00fc4 	movi	r3,63
81131668:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8113166c:	e0bffd17 	ldw	r2,-12(fp)
81131670:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81131674:	e0bffd17 	ldw	r2,-12(fp)
81131678:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8113167c:	d0e08a17 	ldw	r3,-32216(gp)
81131680:	e0bffd17 	ldw	r2,-12(fp)
81131684:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81131688:	e0bffd17 	ldw	r2,-12(fp)
8113168c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81131690:	e0bffd17 	ldw	r2,-12(fp)
81131694:	d0a08a15 	stw	r2,-32216(gp)
81131698:	e0bff717 	ldw	r2,-36(fp)
8113169c:	e0bffa15 	stw	r2,-24(fp)
811316a0:	e0bffa17 	ldw	r2,-24(fp)
811316a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
811316a8:	e0bff503 	ldbu	r2,-44(fp)
811316ac:	10800058 	cmpnei	r2,r2,1
811316b0:	1000011e 	bne	r2,zero,811316b8 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
811316b4:	112c8580 	call	8112c858 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
811316b8:	e0bfff17 	ldw	r2,-4(fp)
811316bc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
811316c0:	e03ff615 	stw	zero,-40(fp)
             break;
811316c4:	00000a06 	br	811316f0 <OSSemDel+0x230>
811316c8:	e0bff717 	ldw	r2,-36(fp)
811316cc:	e0bffb15 	stw	r2,-20(fp)
811316d0:	e0bffb17 	ldw	r2,-20(fp)
811316d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
811316d8:	e0bfff17 	ldw	r2,-4(fp)
811316dc:	00c001c4 	movi	r3,7
811316e0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
811316e4:	e0bffd17 	ldw	r2,-12(fp)
811316e8:	e0bff615 	stw	r2,-40(fp)
             break;
811316ec:	0001883a 	nop
    }
    return (pevent_return);
811316f0:	e0bff617 	ldw	r2,-40(fp)
}
811316f4:	e037883a 	mov	sp,fp
811316f8:	dfc00117 	ldw	ra,4(sp)
811316fc:	df000017 	ldw	fp,0(sp)
81131700:	dec00204 	addi	sp,sp,8
81131704:	f800283a 	ret

81131708 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81131708:	defff504 	addi	sp,sp,-44
8113170c:	de00012e 	bgeu	sp,et,81131714 <OSSemPend+0xc>
81131710:	003b68fa 	trap	3
81131714:	dfc00a15 	stw	ra,40(sp)
81131718:	df000915 	stw	fp,36(sp)
8113171c:	df000904 	addi	fp,sp,36
81131720:	e13ffd15 	stw	r4,-12(fp)
81131724:	2805883a 	mov	r2,r5
81131728:	e1bfff15 	stw	r6,-4(fp)
8113172c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131730:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81131734:	e0bfff17 	ldw	r2,-4(fp)
81131738:	10007226 	beq	r2,zero,81131904 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113173c:	e0bffd17 	ldw	r2,-12(fp)
81131740:	1000041e 	bne	r2,zero,81131754 <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81131744:	e0bfff17 	ldw	r2,-4(fp)
81131748:	00c00104 	movi	r3,4
8113174c:	10c00005 	stb	r3,0(r2)
        return;
81131750:	00006d06 	br	81131908 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131754:	e0bffd17 	ldw	r2,-12(fp)
81131758:	10800003 	ldbu	r2,0(r2)
8113175c:	10803fcc 	andi	r2,r2,255
81131760:	108000e0 	cmpeqi	r2,r2,3
81131764:	1000041e 	bne	r2,zero,81131778 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
81131768:	e0bfff17 	ldw	r2,-4(fp)
8113176c:	00c00044 	movi	r3,1
81131770:	10c00005 	stb	r3,0(r2)
        return;
81131774:	00006406 	br	81131908 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81131778:	d0a08b03 	ldbu	r2,-32212(gp)
8113177c:	10803fcc 	andi	r2,r2,255
81131780:	10000426 	beq	r2,zero,81131794 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
81131784:	e0bfff17 	ldw	r2,-4(fp)
81131788:	00c00084 	movi	r3,2
8113178c:	10c00005 	stb	r3,0(r2)
        return;
81131790:	00005d06 	br	81131908 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81131794:	d0a07903 	ldbu	r2,-32284(gp)
81131798:	10803fcc 	andi	r2,r2,255
8113179c:	10000426 	beq	r2,zero,811317b0 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
811317a0:	e0bfff17 	ldw	r2,-4(fp)
811317a4:	00c00344 	movi	r3,13
811317a8:	10c00005 	stb	r3,0(r2)
        return;
811317ac:	00005606 	br	81131908 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811317b0:	0005303a 	rdctl	r2,status
811317b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811317b8:	e0fffc17 	ldw	r3,-16(fp)
811317bc:	00bfff84 	movi	r2,-2
811317c0:	1884703a 	and	r2,r3,r2
811317c4:	1001703a 	wrctl	status,r2
  
  return context;
811317c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811317cc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
811317d0:	e0bffd17 	ldw	r2,-12(fp)
811317d4:	1080020b 	ldhu	r2,8(r2)
811317d8:	10bfffcc 	andi	r2,r2,65535
811317dc:	10000d26 	beq	r2,zero,81131814 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
811317e0:	e0bffd17 	ldw	r2,-12(fp)
811317e4:	1080020b 	ldhu	r2,8(r2)
811317e8:	10bfffc4 	addi	r2,r2,-1
811317ec:	1007883a 	mov	r3,r2
811317f0:	e0bffd17 	ldw	r2,-12(fp)
811317f4:	10c0020d 	sth	r3,8(r2)
811317f8:	e0bff717 	ldw	r2,-36(fp)
811317fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131800:	e0bff817 	ldw	r2,-32(fp)
81131804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81131808:	e0bfff17 	ldw	r2,-4(fp)
8113180c:	10000005 	stb	zero,0(r2)
        return;
81131810:	00003d06 	br	81131908 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
81131814:	d0a08c17 	ldw	r2,-32208(gp)
81131818:	d0e08c17 	ldw	r3,-32208(gp)
8113181c:	18c00c03 	ldbu	r3,48(r3)
81131820:	18c00054 	ori	r3,r3,1
81131824:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81131828:	d0a08c17 	ldw	r2,-32208(gp)
8113182c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
81131830:	d0a08c17 	ldw	r2,-32208(gp)
81131834:	e0fffe0b 	ldhu	r3,-8(fp)
81131838:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8113183c:	e13ffd17 	ldw	r4,-12(fp)
81131840:	112bf3c0 	call	8112bf3c <OS_EventTaskWait>
81131844:	e0bff717 	ldw	r2,-36(fp)
81131848:	e0bffb15 	stw	r2,-20(fp)
8113184c:	e0bffb17 	ldw	r2,-20(fp)
81131850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81131854:	112c8580 	call	8112c858 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131858:	0005303a 	rdctl	r2,status
8113185c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131860:	e0fff917 	ldw	r3,-28(fp)
81131864:	00bfff84 	movi	r2,-2
81131868:	1884703a 	and	r2,r3,r2
8113186c:	1001703a 	wrctl	status,r2
  
  return context;
81131870:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81131874:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81131878:	d0a08c17 	ldw	r2,-32208(gp)
8113187c:	10800c43 	ldbu	r2,49(r2)
81131880:	10803fcc 	andi	r2,r2,255
81131884:	10000326 	beq	r2,zero,81131894 <OSSemPend+0x18c>
81131888:	108000a0 	cmpeqi	r2,r2,2
8113188c:	1000041e 	bne	r2,zero,811318a0 <OSSemPend+0x198>
81131890:	00000706 	br	811318b0 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81131894:	e0bfff17 	ldw	r2,-4(fp)
81131898:	10000005 	stb	zero,0(r2)
             break;
8113189c:	00000c06 	br	811318d0 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
811318a0:	e0bfff17 	ldw	r2,-4(fp)
811318a4:	00c00384 	movi	r3,14
811318a8:	10c00005 	stb	r3,0(r2)
             break;
811318ac:	00000806 	br	811318d0 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
811318b0:	d0a08c17 	ldw	r2,-32208(gp)
811318b4:	e17ffd17 	ldw	r5,-12(fp)
811318b8:	1009883a 	mov	r4,r2
811318bc:	112c1ac0 	call	8112c1ac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
811318c0:	e0bfff17 	ldw	r2,-4(fp)
811318c4:	00c00284 	movi	r3,10
811318c8:	10c00005 	stb	r3,0(r2)
             break;
811318cc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
811318d0:	d0a08c17 	ldw	r2,-32208(gp)
811318d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
811318d8:	d0a08c17 	ldw	r2,-32208(gp)
811318dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
811318e0:	d0a08c17 	ldw	r2,-32208(gp)
811318e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811318e8:	d0a08c17 	ldw	r2,-32208(gp)
811318ec:	10000815 	stw	zero,32(r2)
811318f0:	e0bff717 	ldw	r2,-36(fp)
811318f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811318f8:	e0bffa17 	ldw	r2,-24(fp)
811318fc:	1001703a 	wrctl	status,r2
81131900:	00000106 	br	81131908 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81131904:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81131908:	e037883a 	mov	sp,fp
8113190c:	dfc00117 	ldw	ra,4(sp)
81131910:	df000017 	ldw	fp,0(sp)
81131914:	dec00204 	addi	sp,sp,8
81131918:	f800283a 	ret

8113191c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8113191c:	defff604 	addi	sp,sp,-40
81131920:	de00012e 	bgeu	sp,et,81131928 <OSSemPendAbort+0xc>
81131924:	003b68fa 	trap	3
81131928:	dfc00915 	stw	ra,36(sp)
8113192c:	df000815 	stw	fp,32(sp)
81131930:	df000804 	addi	fp,sp,32
81131934:	e13ffd15 	stw	r4,-12(fp)
81131938:	2805883a 	mov	r2,r5
8113193c:	e1bfff15 	stw	r6,-4(fp)
81131940:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131944:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81131948:	e0bfff17 	ldw	r2,-4(fp)
8113194c:	1000021e 	bne	r2,zero,81131958 <OSSemPendAbort+0x3c>
        return (0);
81131950:	0005883a 	mov	r2,zero
81131954:	00004906 	br	81131a7c <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131958:	e0bffd17 	ldw	r2,-12(fp)
8113195c:	1000051e 	bne	r2,zero,81131974 <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81131960:	e0bfff17 	ldw	r2,-4(fp)
81131964:	00c00104 	movi	r3,4
81131968:	10c00005 	stb	r3,0(r2)
        return (0);
8113196c:	0005883a 	mov	r2,zero
81131970:	00004206 	br	81131a7c <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131974:	e0bffd17 	ldw	r2,-12(fp)
81131978:	10800003 	ldbu	r2,0(r2)
8113197c:	10803fcc 	andi	r2,r2,255
81131980:	108000e0 	cmpeqi	r2,r2,3
81131984:	1000051e 	bne	r2,zero,8113199c <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81131988:	e0bfff17 	ldw	r2,-4(fp)
8113198c:	00c00044 	movi	r3,1
81131990:	10c00005 	stb	r3,0(r2)
        return (0);
81131994:	0005883a 	mov	r2,zero
81131998:	00003806 	br	81131a7c <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113199c:	0005303a 	rdctl	r2,status
811319a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811319a4:	e0fffc17 	ldw	r3,-16(fp)
811319a8:	00bfff84 	movi	r2,-2
811319ac:	1884703a 	and	r2,r3,r2
811319b0:	1001703a 	wrctl	status,r2
  
  return context;
811319b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811319b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
811319bc:	e0bffd17 	ldw	r2,-12(fp)
811319c0:	10800283 	ldbu	r2,10(r2)
811319c4:	10803fcc 	andi	r2,r2,255
811319c8:	10002526 	beq	r2,zero,81131a60 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
811319cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
811319d0:	e0bffe03 	ldbu	r2,-8(fp)
811319d4:	10800060 	cmpeqi	r2,r2,1
811319d8:	10000e26 	beq	r2,zero,81131a14 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
811319dc:	00000806 	br	81131a00 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
811319e0:	01c00084 	movi	r7,2
811319e4:	01800044 	movi	r6,1
811319e8:	000b883a 	mov	r5,zero
811319ec:	e13ffd17 	ldw	r4,-12(fp)
811319f0:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                     nbr_tasks++;
811319f4:	e0bff803 	ldbu	r2,-32(fp)
811319f8:	10800044 	addi	r2,r2,1
811319fc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81131a00:	e0bffd17 	ldw	r2,-12(fp)
81131a04:	10800283 	ldbu	r2,10(r2)
81131a08:	10803fcc 	andi	r2,r2,255
81131a0c:	103ff41e 	bne	r2,zero,811319e0 <__reset+0xfb1119e0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81131a10:	00000906 	br	81131a38 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81131a14:	01c00084 	movi	r7,2
81131a18:	01800044 	movi	r6,1
81131a1c:	000b883a 	mov	r5,zero
81131a20:	e13ffd17 	ldw	r4,-12(fp)
81131a24:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
                 nbr_tasks++;
81131a28:	e0bff803 	ldbu	r2,-32(fp)
81131a2c:	10800044 	addi	r2,r2,1
81131a30:	e0bff805 	stb	r2,-32(fp)
                 break;
81131a34:	0001883a 	nop
81131a38:	e0bff917 	ldw	r2,-28(fp)
81131a3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131a40:	e0bffa17 	ldw	r2,-24(fp)
81131a44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
81131a48:	112c8580 	call	8112c858 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81131a4c:	e0bfff17 	ldw	r2,-4(fp)
81131a50:	00c00384 	movi	r3,14
81131a54:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81131a58:	e0bff803 	ldbu	r2,-32(fp)
81131a5c:	00000706 	br	81131a7c <OSSemPendAbort+0x160>
81131a60:	e0bff917 	ldw	r2,-28(fp)
81131a64:	e0bffb15 	stw	r2,-20(fp)
81131a68:	e0bffb17 	ldw	r2,-20(fp)
81131a6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81131a70:	e0bfff17 	ldw	r2,-4(fp)
81131a74:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
81131a78:	0005883a 	mov	r2,zero
}
81131a7c:	e037883a 	mov	sp,fp
81131a80:	dfc00117 	ldw	ra,4(sp)
81131a84:	df000017 	ldw	fp,0(sp)
81131a88:	dec00204 	addi	sp,sp,8
81131a8c:	f800283a 	ret

81131a90 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
81131a90:	defff804 	addi	sp,sp,-32
81131a94:	de00012e 	bgeu	sp,et,81131a9c <OSSemPost+0xc>
81131a98:	003b68fa 	trap	3
81131a9c:	dfc00715 	stw	ra,28(sp)
81131aa0:	df000615 	stw	fp,24(sp)
81131aa4:	df000604 	addi	fp,sp,24
81131aa8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131aac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131ab0:	e0bfff17 	ldw	r2,-4(fp)
81131ab4:	1000021e 	bne	r2,zero,81131ac0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
81131ab8:	00800104 	movi	r2,4
81131abc:	00003506 	br	81131b94 <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131ac0:	e0bfff17 	ldw	r2,-4(fp)
81131ac4:	10800003 	ldbu	r2,0(r2)
81131ac8:	10803fcc 	andi	r2,r2,255
81131acc:	108000e0 	cmpeqi	r2,r2,3
81131ad0:	1000021e 	bne	r2,zero,81131adc <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
81131ad4:	00800044 	movi	r2,1
81131ad8:	00002e06 	br	81131b94 <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131adc:	0005303a 	rdctl	r2,status
81131ae0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131ae4:	e0fffe17 	ldw	r3,-8(fp)
81131ae8:	00bfff84 	movi	r2,-2
81131aec:	1884703a 	and	r2,r3,r2
81131af0:	1001703a 	wrctl	status,r2
  
  return context;
81131af4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81131af8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
81131afc:	e0bfff17 	ldw	r2,-4(fp)
81131b00:	10800283 	ldbu	r2,10(r2)
81131b04:	10803fcc 	andi	r2,r2,255
81131b08:	10000c26 	beq	r2,zero,81131b3c <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81131b0c:	000f883a 	mov	r7,zero
81131b10:	01800044 	movi	r6,1
81131b14:	000b883a 	mov	r5,zero
81131b18:	e13fff17 	ldw	r4,-4(fp)
81131b1c:	112bd9c0 	call	8112bd9c <OS_EventTaskRdy>
81131b20:	e0bffa17 	ldw	r2,-24(fp)
81131b24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131b28:	e0bffb17 	ldw	r2,-20(fp)
81131b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
81131b30:	112c8580 	call	8112c858 <OS_Sched>
        return (OS_ERR_NONE);
81131b34:	0005883a 	mov	r2,zero
81131b38:	00001606 	br	81131b94 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
81131b3c:	e0bfff17 	ldw	r2,-4(fp)
81131b40:	1080020b 	ldhu	r2,8(r2)
81131b44:	10ffffcc 	andi	r3,r2,65535
81131b48:	00bfffd4 	movui	r2,65535
81131b4c:	18800c26 	beq	r3,r2,81131b80 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
81131b50:	e0bfff17 	ldw	r2,-4(fp)
81131b54:	1080020b 	ldhu	r2,8(r2)
81131b58:	10800044 	addi	r2,r2,1
81131b5c:	1007883a 	mov	r3,r2
81131b60:	e0bfff17 	ldw	r2,-4(fp)
81131b64:	10c0020d 	sth	r3,8(r2)
81131b68:	e0bffa17 	ldw	r2,-24(fp)
81131b6c:	e0bffc15 	stw	r2,-16(fp)
81131b70:	e0bffc17 	ldw	r2,-16(fp)
81131b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81131b78:	0005883a 	mov	r2,zero
81131b7c:	00000506 	br	81131b94 <OSSemPost+0x104>
81131b80:	e0bffa17 	ldw	r2,-24(fp)
81131b84:	e0bffd15 	stw	r2,-12(fp)
81131b88:	e0bffd17 	ldw	r2,-12(fp)
81131b8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
81131b90:	00800c84 	movi	r2,50
}
81131b94:	e037883a 	mov	sp,fp
81131b98:	dfc00117 	ldw	ra,4(sp)
81131b9c:	df000017 	ldw	fp,0(sp)
81131ba0:	dec00204 	addi	sp,sp,8
81131ba4:	f800283a 	ret

81131ba8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81131ba8:	defff704 	addi	sp,sp,-36
81131bac:	de00012e 	bgeu	sp,et,81131bb4 <OSSemQuery+0xc>
81131bb0:	003b68fa 	trap	3
81131bb4:	df000815 	stw	fp,32(sp)
81131bb8:	df000804 	addi	fp,sp,32
81131bbc:	e13ffe15 	stw	r4,-8(fp)
81131bc0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81131bc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81131bc8:	e0bffe17 	ldw	r2,-8(fp)
81131bcc:	1000021e 	bne	r2,zero,81131bd8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
81131bd0:	00800104 	movi	r2,4
81131bd4:	00003606 	br	81131cb0 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
81131bd8:	e0bfff17 	ldw	r2,-4(fp)
81131bdc:	1000021e 	bne	r2,zero,81131be8 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
81131be0:	00800244 	movi	r2,9
81131be4:	00003206 	br	81131cb0 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81131be8:	e0bffe17 	ldw	r2,-8(fp)
81131bec:	10800003 	ldbu	r2,0(r2)
81131bf0:	10803fcc 	andi	r2,r2,255
81131bf4:	108000e0 	cmpeqi	r2,r2,3
81131bf8:	1000021e 	bne	r2,zero,81131c04 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
81131bfc:	00800044 	movi	r2,1
81131c00:	00002b06 	br	81131cb0 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131c04:	0005303a 	rdctl	r2,status
81131c08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131c0c:	e0fffd17 	ldw	r3,-12(fp)
81131c10:	00bfff84 	movi	r2,-2
81131c14:	1884703a 	and	r2,r3,r2
81131c18:	1001703a 	wrctl	status,r2
  
  return context;
81131c1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81131c20:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
81131c24:	e0bffe17 	ldw	r2,-8(fp)
81131c28:	10c00283 	ldbu	r3,10(r2)
81131c2c:	e0bfff17 	ldw	r2,-4(fp)
81131c30:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
81131c34:	e0bffe17 	ldw	r2,-8(fp)
81131c38:	108002c4 	addi	r2,r2,11
81131c3c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
81131c40:	e0bfff17 	ldw	r2,-4(fp)
81131c44:	10800084 	addi	r2,r2,2
81131c48:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81131c4c:	e03ffa05 	stb	zero,-24(fp)
81131c50:	00000b06 	br	81131c80 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
81131c54:	e0bff917 	ldw	r2,-28(fp)
81131c58:	10c00044 	addi	r3,r2,1
81131c5c:	e0fff915 	stw	r3,-28(fp)
81131c60:	e0fff817 	ldw	r3,-32(fp)
81131c64:	19000044 	addi	r4,r3,1
81131c68:	e13ff815 	stw	r4,-32(fp)
81131c6c:	18c00003 	ldbu	r3,0(r3)
81131c70:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81131c74:	e0bffa03 	ldbu	r2,-24(fp)
81131c78:	10800044 	addi	r2,r2,1
81131c7c:	e0bffa05 	stb	r2,-24(fp)
81131c80:	e0bffa03 	ldbu	r2,-24(fp)
81131c84:	108001b0 	cmpltui	r2,r2,6
81131c88:	103ff21e 	bne	r2,zero,81131c54 <__reset+0xfb111c54>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
81131c8c:	e0bffe17 	ldw	r2,-8(fp)
81131c90:	10c0020b 	ldhu	r3,8(r2)
81131c94:	e0bfff17 	ldw	r2,-4(fp)
81131c98:	10c0000d 	sth	r3,0(r2)
81131c9c:	e0bffb17 	ldw	r2,-20(fp)
81131ca0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131ca4:	e0bffc17 	ldw	r2,-16(fp)
81131ca8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131cac:	0005883a 	mov	r2,zero
}
81131cb0:	e037883a 	mov	sp,fp
81131cb4:	df000017 	ldw	fp,0(sp)
81131cb8:	dec00104 	addi	sp,sp,4
81131cbc:	f800283a 	ret

81131cc0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
81131cc0:	defff904 	addi	sp,sp,-28
81131cc4:	de00012e 	bgeu	sp,et,81131ccc <OSSemSet+0xc>
81131cc8:	003b68fa 	trap	3
81131ccc:	df000615 	stw	fp,24(sp)
81131cd0:	df000604 	addi	fp,sp,24
81131cd4:	e13ffd15 	stw	r4,-12(fp)
81131cd8:	2805883a 	mov	r2,r5
81131cdc:	e1bfff15 	stw	r6,-4(fp)
81131ce0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131ce4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81131ce8:	e0bfff17 	ldw	r2,-4(fp)
81131cec:	10003126 	beq	r2,zero,81131db4 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131cf0:	e0bffd17 	ldw	r2,-12(fp)
81131cf4:	1000041e 	bne	r2,zero,81131d08 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81131cf8:	e0bfff17 	ldw	r2,-4(fp)
81131cfc:	00c00104 	movi	r3,4
81131d00:	10c00005 	stb	r3,0(r2)
        return;
81131d04:	00002c06 	br	81131db8 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131d08:	e0bffd17 	ldw	r2,-12(fp)
81131d0c:	10800003 	ldbu	r2,0(r2)
81131d10:	10803fcc 	andi	r2,r2,255
81131d14:	108000e0 	cmpeqi	r2,r2,3
81131d18:	1000041e 	bne	r2,zero,81131d2c <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81131d1c:	e0bfff17 	ldw	r2,-4(fp)
81131d20:	00c00044 	movi	r3,1
81131d24:	10c00005 	stb	r3,0(r2)
        return;
81131d28:	00002306 	br	81131db8 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131d2c:	0005303a 	rdctl	r2,status
81131d30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131d34:	e0fffc17 	ldw	r3,-16(fp)
81131d38:	00bfff84 	movi	r2,-2
81131d3c:	1884703a 	and	r2,r3,r2
81131d40:	1001703a 	wrctl	status,r2
  
  return context;
81131d44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81131d48:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
81131d4c:	e0bfff17 	ldw	r2,-4(fp)
81131d50:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
81131d54:	e0bffd17 	ldw	r2,-12(fp)
81131d58:	1080020b 	ldhu	r2,8(r2)
81131d5c:	10bfffcc 	andi	r2,r2,65535
81131d60:	10000426 	beq	r2,zero,81131d74 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
81131d64:	e0bffd17 	ldw	r2,-12(fp)
81131d68:	e0fffe0b 	ldhu	r3,-8(fp)
81131d6c:	10c0020d 	sth	r3,8(r2)
81131d70:	00000b06 	br	81131da0 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
81131d74:	e0bffd17 	ldw	r2,-12(fp)
81131d78:	10800283 	ldbu	r2,10(r2)
81131d7c:	10803fcc 	andi	r2,r2,255
81131d80:	1000041e 	bne	r2,zero,81131d94 <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
81131d84:	e0bffd17 	ldw	r2,-12(fp)
81131d88:	e0fffe0b 	ldhu	r3,-8(fp)
81131d8c:	10c0020d 	sth	r3,8(r2)
81131d90:	00000306 	br	81131da0 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
81131d94:	e0bfff17 	ldw	r2,-4(fp)
81131d98:	00c01244 	movi	r3,73
81131d9c:	10c00005 	stb	r3,0(r2)
81131da0:	e0bffa17 	ldw	r2,-24(fp)
81131da4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131da8:	e0bffb17 	ldw	r2,-20(fp)
81131dac:	1001703a 	wrctl	status,r2
81131db0:	00000106 	br	81131db8 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81131db4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81131db8:	e037883a 	mov	sp,fp
81131dbc:	df000017 	ldw	fp,0(sp)
81131dc0:	dec00104 	addi	sp,sp,4
81131dc4:	f800283a 	ret

81131dc8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81131dc8:	defff104 	addi	sp,sp,-60
81131dcc:	de00012e 	bgeu	sp,et,81131dd4 <OSTaskChangePrio+0xc>
81131dd0:	003b68fa 	trap	3
81131dd4:	dfc00e15 	stw	ra,56(sp)
81131dd8:	df000d15 	stw	fp,52(sp)
81131ddc:	df000d04 	addi	fp,sp,52
81131de0:	2007883a 	mov	r3,r4
81131de4:	2805883a 	mov	r2,r5
81131de8:	e0fffe05 	stb	r3,-8(fp)
81131dec:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
81131df0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
81131df4:	e0bffe03 	ldbu	r2,-8(fp)
81131df8:	10800a30 	cmpltui	r2,r2,40
81131dfc:	1000051e 	bne	r2,zero,81131e14 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
81131e00:	e0bffe03 	ldbu	r2,-8(fp)
81131e04:	10803fe0 	cmpeqi	r2,r2,255
81131e08:	1000021e 	bne	r2,zero,81131e14 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
81131e0c:	00800a84 	movi	r2,42
81131e10:	00012606 	br	811322ac <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
81131e14:	e0bfff03 	ldbu	r2,-4(fp)
81131e18:	10800a30 	cmpltui	r2,r2,40
81131e1c:	1000021e 	bne	r2,zero,81131e28 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
81131e20:	00800a84 	movi	r2,42
81131e24:	00012106 	br	811322ac <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131e28:	0005303a 	rdctl	r2,status
81131e2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131e30:	e0fffd17 	ldw	r3,-12(fp)
81131e34:	00bfff84 	movi	r2,-2
81131e38:	1884703a 	and	r2,r3,r2
81131e3c:	1001703a 	wrctl	status,r2
  
  return context;
81131e40:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81131e44:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
81131e48:	e0ffff03 	ldbu	r3,-4(fp)
81131e4c:	00a04574 	movhi	r2,33045
81131e50:	109c6c04 	addi	r2,r2,29104
81131e54:	18c7883a 	add	r3,r3,r3
81131e58:	18c7883a 	add	r3,r3,r3
81131e5c:	10c5883a 	add	r2,r2,r3
81131e60:	10800017 	ldw	r2,0(r2)
81131e64:	10000626 	beq	r2,zero,81131e80 <OSTaskChangePrio+0xb8>
81131e68:	e0bff517 	ldw	r2,-44(fp)
81131e6c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131e70:	e0bff617 	ldw	r2,-40(fp)
81131e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
81131e78:	00800a04 	movi	r2,40
81131e7c:	00010b06 	br	811322ac <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
81131e80:	e0bffe03 	ldbu	r2,-8(fp)
81131e84:	10803fd8 	cmpnei	r2,r2,255
81131e88:	1000031e 	bne	r2,zero,81131e98 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
81131e8c:	d0a08c17 	ldw	r2,-32208(gp)
81131e90:	10800c83 	ldbu	r2,50(r2)
81131e94:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
81131e98:	e0fffe03 	ldbu	r3,-8(fp)
81131e9c:	00a04574 	movhi	r2,33045
81131ea0:	109c6c04 	addi	r2,r2,29104
81131ea4:	18c7883a 	add	r3,r3,r3
81131ea8:	18c7883a 	add	r3,r3,r3
81131eac:	10c5883a 	add	r2,r2,r3
81131eb0:	10800017 	ldw	r2,0(r2)
81131eb4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
81131eb8:	e0bff817 	ldw	r2,-32(fp)
81131ebc:	1000061e 	bne	r2,zero,81131ed8 <OSTaskChangePrio+0x110>
81131ec0:	e0bff517 	ldw	r2,-44(fp)
81131ec4:	e0bff715 	stw	r2,-36(fp)
81131ec8:	e0bff717 	ldw	r2,-36(fp)
81131ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
81131ed0:	00800a44 	movi	r2,41
81131ed4:	0000f506 	br	811322ac <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
81131ed8:	e0bff817 	ldw	r2,-32(fp)
81131edc:	10800058 	cmpnei	r2,r2,1
81131ee0:	1000061e 	bne	r2,zero,81131efc <OSTaskChangePrio+0x134>
81131ee4:	e0bff517 	ldw	r2,-44(fp)
81131ee8:	e0bff915 	stw	r2,-28(fp)
81131eec:	e0bff917 	ldw	r2,-28(fp)
81131ef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
81131ef4:	008010c4 	movi	r2,67
81131ef8:	0000ec06 	br	811322ac <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
81131efc:	e0bfff03 	ldbu	r2,-4(fp)
81131f00:	1004d0fa 	srli	r2,r2,3
81131f04:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
81131f08:	e0bfff03 	ldbu	r2,-4(fp)
81131f0c:	108001cc 	andi	r2,r2,7
81131f10:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
81131f14:	e0bffb03 	ldbu	r2,-20(fp)
81131f18:	00c00044 	movi	r3,1
81131f1c:	1884983a 	sll	r2,r3,r2
81131f20:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
81131f24:	e0bffb43 	ldbu	r2,-19(fp)
81131f28:	00c00044 	movi	r3,1
81131f2c:	1884983a 	sll	r2,r3,r2
81131f30:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
81131f34:	e0fffe03 	ldbu	r3,-8(fp)
81131f38:	00a04574 	movhi	r2,33045
81131f3c:	109c6c04 	addi	r2,r2,29104
81131f40:	18c7883a 	add	r3,r3,r3
81131f44:	18c7883a 	add	r3,r3,r3
81131f48:	10c5883a 	add	r2,r2,r3
81131f4c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
81131f50:	e0ffff03 	ldbu	r3,-4(fp)
81131f54:	00a04574 	movhi	r2,33045
81131f58:	109c6c04 	addi	r2,r2,29104
81131f5c:	18c7883a 	add	r3,r3,r3
81131f60:	18c7883a 	add	r3,r3,r3
81131f64:	10c5883a 	add	r2,r2,r3
81131f68:	e0fff817 	ldw	r3,-32(fp)
81131f6c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
81131f70:	e0bff817 	ldw	r2,-32(fp)
81131f74:	10800d03 	ldbu	r2,52(r2)
81131f78:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
81131f7c:	e0bff817 	ldw	r2,-32(fp)
81131f80:	10800d83 	ldbu	r2,54(r2)
81131f84:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
81131f88:	e0bff817 	ldw	r2,-32(fp)
81131f8c:	10800d43 	ldbu	r2,53(r2)
81131f90:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
81131f94:	e0fffc03 	ldbu	r3,-16(fp)
81131f98:	d0a08844 	addi	r2,gp,-32223
81131f9c:	1885883a 	add	r2,r3,r2
81131fa0:	10c00003 	ldbu	r3,0(r2)
81131fa4:	e0bffc83 	ldbu	r2,-14(fp)
81131fa8:	1884703a 	and	r2,r3,r2
81131fac:	10803fcc 	andi	r2,r2,255
81131fb0:	10002826 	beq	r2,zero,81132054 <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
81131fb4:	e0fffc03 	ldbu	r3,-16(fp)
81131fb8:	e13ffc03 	ldbu	r4,-16(fp)
81131fbc:	d0a08844 	addi	r2,gp,-32223
81131fc0:	2085883a 	add	r2,r4,r2
81131fc4:	10800003 	ldbu	r2,0(r2)
81131fc8:	1009883a 	mov	r4,r2
81131fcc:	e0bffc83 	ldbu	r2,-14(fp)
81131fd0:	0084303a 	nor	r2,zero,r2
81131fd4:	2084703a 	and	r2,r4,r2
81131fd8:	1009883a 	mov	r4,r2
81131fdc:	d0a08844 	addi	r2,gp,-32223
81131fe0:	1885883a 	add	r2,r3,r2
81131fe4:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
81131fe8:	e0fffc03 	ldbu	r3,-16(fp)
81131fec:	d0a08844 	addi	r2,gp,-32223
81131ff0:	1885883a 	add	r2,r3,r2
81131ff4:	10800003 	ldbu	r2,0(r2)
81131ff8:	10803fcc 	andi	r2,r2,255
81131ffc:	1000061e 	bne	r2,zero,81132018 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
81132000:	e0bffc43 	ldbu	r2,-15(fp)
81132004:	0084303a 	nor	r2,zero,r2
81132008:	1007883a 	mov	r3,r2
8113200c:	d0a08803 	ldbu	r2,-32224(gp)
81132010:	1884703a 	and	r2,r3,r2
81132014:	d0a08805 	stb	r2,-32224(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
81132018:	d0e08803 	ldbu	r3,-32224(gp)
8113201c:	e0bffb83 	ldbu	r2,-18(fp)
81132020:	1884b03a 	or	r2,r3,r2
81132024:	d0a08805 	stb	r2,-32224(gp)
         OSRdyTbl[y_new] |= bitx_new;
81132028:	e0fffb03 	ldbu	r3,-20(fp)
8113202c:	e13ffb03 	ldbu	r4,-20(fp)
81132030:	d0a08844 	addi	r2,gp,-32223
81132034:	2085883a 	add	r2,r4,r2
81132038:	11000003 	ldbu	r4,0(r2)
8113203c:	e0bffbc3 	ldbu	r2,-17(fp)
81132040:	2084b03a 	or	r2,r4,r2
81132044:	1009883a 	mov	r4,r2
81132048:	d0a08844 	addi	r2,gp,-32223
8113204c:	1885883a 	add	r2,r3,r2
81132050:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
81132054:	e0bff817 	ldw	r2,-32(fp)
81132058:	10800717 	ldw	r2,28(r2)
8113205c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
81132060:	e0bff317 	ldw	r2,-52(fp)
81132064:	10003326 	beq	r2,zero,81132134 <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
81132068:	e0bffc03 	ldbu	r2,-16(fp)
8113206c:	e0fffc03 	ldbu	r3,-16(fp)
81132070:	e13ff317 	ldw	r4,-52(fp)
81132074:	20c7883a 	add	r3,r4,r3
81132078:	18c002c4 	addi	r3,r3,11
8113207c:	18c00003 	ldbu	r3,0(r3)
81132080:	1809883a 	mov	r4,r3
81132084:	e0fffc83 	ldbu	r3,-14(fp)
81132088:	00c6303a 	nor	r3,zero,r3
8113208c:	20c6703a 	and	r3,r4,r3
81132090:	1809883a 	mov	r4,r3
81132094:	e0fff317 	ldw	r3,-52(fp)
81132098:	1885883a 	add	r2,r3,r2
8113209c:	108002c4 	addi	r2,r2,11
811320a0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
811320a4:	e0bffc03 	ldbu	r2,-16(fp)
811320a8:	e0fff317 	ldw	r3,-52(fp)
811320ac:	1885883a 	add	r2,r3,r2
811320b0:	108002c4 	addi	r2,r2,11
811320b4:	10800003 	ldbu	r2,0(r2)
811320b8:	10803fcc 	andi	r2,r2,255
811320bc:	1000091e 	bne	r2,zero,811320e4 <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
811320c0:	e0bff317 	ldw	r2,-52(fp)
811320c4:	10800283 	ldbu	r2,10(r2)
811320c8:	1007883a 	mov	r3,r2
811320cc:	e0bffc43 	ldbu	r2,-15(fp)
811320d0:	0084303a 	nor	r2,zero,r2
811320d4:	1884703a 	and	r2,r3,r2
811320d8:	1007883a 	mov	r3,r2
811320dc:	e0bff317 	ldw	r2,-52(fp)
811320e0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
811320e4:	e0bff317 	ldw	r2,-52(fp)
811320e8:	10c00283 	ldbu	r3,10(r2)
811320ec:	e0bffb83 	ldbu	r2,-18(fp)
811320f0:	1884b03a 	or	r2,r3,r2
811320f4:	1007883a 	mov	r3,r2
811320f8:	e0bff317 	ldw	r2,-52(fp)
811320fc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
81132100:	e0bffb03 	ldbu	r2,-20(fp)
81132104:	e0fffb03 	ldbu	r3,-20(fp)
81132108:	e13ff317 	ldw	r4,-52(fp)
8113210c:	20c7883a 	add	r3,r4,r3
81132110:	18c002c4 	addi	r3,r3,11
81132114:	19000003 	ldbu	r4,0(r3)
81132118:	e0fffbc3 	ldbu	r3,-17(fp)
8113211c:	20c6b03a 	or	r3,r4,r3
81132120:	1809883a 	mov	r4,r3
81132124:	e0fff317 	ldw	r3,-52(fp)
81132128:	1885883a 	add	r2,r3,r2
8113212c:	108002c4 	addi	r2,r2,11
81132130:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
81132134:	e0bff817 	ldw	r2,-32(fp)
81132138:	10800817 	ldw	r2,32(r2)
8113213c:	10004226 	beq	r2,zero,81132248 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
81132140:	e0bff817 	ldw	r2,-32(fp)
81132144:	10800817 	ldw	r2,32(r2)
81132148:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8113214c:	e0bff417 	ldw	r2,-48(fp)
81132150:	10800017 	ldw	r2,0(r2)
81132154:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
81132158:	00003906 	br	81132240 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8113215c:	e0bffc03 	ldbu	r2,-16(fp)
81132160:	e0fffc03 	ldbu	r3,-16(fp)
81132164:	e13ff317 	ldw	r4,-52(fp)
81132168:	20c7883a 	add	r3,r4,r3
8113216c:	18c002c4 	addi	r3,r3,11
81132170:	18c00003 	ldbu	r3,0(r3)
81132174:	1809883a 	mov	r4,r3
81132178:	e0fffc83 	ldbu	r3,-14(fp)
8113217c:	00c6303a 	nor	r3,zero,r3
81132180:	20c6703a 	and	r3,r4,r3
81132184:	1809883a 	mov	r4,r3
81132188:	e0fff317 	ldw	r3,-52(fp)
8113218c:	1885883a 	add	r2,r3,r2
81132190:	108002c4 	addi	r2,r2,11
81132194:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81132198:	e0bffc03 	ldbu	r2,-16(fp)
8113219c:	e0fff317 	ldw	r3,-52(fp)
811321a0:	1885883a 	add	r2,r3,r2
811321a4:	108002c4 	addi	r2,r2,11
811321a8:	10800003 	ldbu	r2,0(r2)
811321ac:	10803fcc 	andi	r2,r2,255
811321b0:	1000091e 	bne	r2,zero,811321d8 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
811321b4:	e0bff317 	ldw	r2,-52(fp)
811321b8:	10800283 	ldbu	r2,10(r2)
811321bc:	1007883a 	mov	r3,r2
811321c0:	e0bffc43 	ldbu	r2,-15(fp)
811321c4:	0084303a 	nor	r2,zero,r2
811321c8:	1884703a 	and	r2,r3,r2
811321cc:	1007883a 	mov	r3,r2
811321d0:	e0bff317 	ldw	r2,-52(fp)
811321d4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
811321d8:	e0bff317 	ldw	r2,-52(fp)
811321dc:	10c00283 	ldbu	r3,10(r2)
811321e0:	e0bffb83 	ldbu	r2,-18(fp)
811321e4:	1884b03a 	or	r2,r3,r2
811321e8:	1007883a 	mov	r3,r2
811321ec:	e0bff317 	ldw	r2,-52(fp)
811321f0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
811321f4:	e0bffb03 	ldbu	r2,-20(fp)
811321f8:	e0fffb03 	ldbu	r3,-20(fp)
811321fc:	e13ff317 	ldw	r4,-52(fp)
81132200:	20c7883a 	add	r3,r4,r3
81132204:	18c002c4 	addi	r3,r3,11
81132208:	19000003 	ldbu	r4,0(r3)
8113220c:	e0fffbc3 	ldbu	r3,-17(fp)
81132210:	20c6b03a 	or	r3,r4,r3
81132214:	1809883a 	mov	r4,r3
81132218:	e0fff317 	ldw	r3,-52(fp)
8113221c:	1885883a 	add	r2,r3,r2
81132220:	108002c4 	addi	r2,r2,11
81132224:	11000005 	stb	r4,0(r2)
            pevents++;
81132228:	e0bff417 	ldw	r2,-48(fp)
8113222c:	10800104 	addi	r2,r2,4
81132230:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
81132234:	e0bff417 	ldw	r2,-48(fp)
81132238:	10800017 	ldw	r2,0(r2)
8113223c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
81132240:	e0bff317 	ldw	r2,-52(fp)
81132244:	103fc51e 	bne	r2,zero,8113215c <__reset+0xfb11215c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
81132248:	e0bff817 	ldw	r2,-32(fp)
8113224c:	e0ffff03 	ldbu	r3,-4(fp)
81132250:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
81132254:	e0bff817 	ldw	r2,-32(fp)
81132258:	e0fffb03 	ldbu	r3,-20(fp)
8113225c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
81132260:	e0bff817 	ldw	r2,-32(fp)
81132264:	e0fffb43 	ldbu	r3,-19(fp)
81132268:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8113226c:	e0bff817 	ldw	r2,-32(fp)
81132270:	e0fffb83 	ldbu	r3,-18(fp)
81132274:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
81132278:	e0bff817 	ldw	r2,-32(fp)
8113227c:	e0fffbc3 	ldbu	r3,-17(fp)
81132280:	10c00d45 	stb	r3,53(r2)
81132284:	e0bff517 	ldw	r2,-44(fp)
81132288:	e0bffa15 	stw	r2,-24(fp)
8113228c:	e0bffa17 	ldw	r2,-24(fp)
81132290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81132294:	d0a07b03 	ldbu	r2,-32276(gp)
81132298:	10803fcc 	andi	r2,r2,255
8113229c:	10800058 	cmpnei	r2,r2,1
811322a0:	1000011e 	bne	r2,zero,811322a8 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
811322a4:	112c8580 	call	8112c858 <OS_Sched>
    }
    return (OS_ERR_NONE);
811322a8:	0005883a 	mov	r2,zero
}
811322ac:	e037883a 	mov	sp,fp
811322b0:	dfc00117 	ldw	ra,4(sp)
811322b4:	df000017 	ldw	fp,0(sp)
811322b8:	dec00204 	addi	sp,sp,8
811322bc:	f800283a 	ret

811322c0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
811322c0:	deffee04 	addi	sp,sp,-72
811322c4:	de00012e 	bgeu	sp,et,811322cc <OSTaskCreate+0xc>
811322c8:	003b68fa 	trap	3
811322cc:	dfc01115 	stw	ra,68(sp)
811322d0:	df001015 	stw	fp,64(sp)
811322d4:	df001004 	addi	fp,sp,64
811322d8:	e13ffc15 	stw	r4,-16(fp)
811322dc:	e17ffd15 	stw	r5,-12(fp)
811322e0:	e1bffe15 	stw	r6,-8(fp)
811322e4:	3805883a 	mov	r2,r7
811322e8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
811322ec:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
811322f0:	e0bfff03 	ldbu	r2,-4(fp)
811322f4:	10800a70 	cmpltui	r2,r2,41
811322f8:	1000021e 	bne	r2,zero,81132304 <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
811322fc:	00800a84 	movi	r2,42
81132300:	00005706 	br	81132460 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132304:	0005303a 	rdctl	r2,status
81132308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113230c:	e0fffb17 	ldw	r3,-20(fp)
81132310:	00bfff84 	movi	r2,-2
81132314:	1884703a 	and	r2,r3,r2
81132318:	1001703a 	wrctl	status,r2
  
  return context;
8113231c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81132320:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81132324:	d0a08b03 	ldbu	r2,-32212(gp)
81132328:	10803fcc 	andi	r2,r2,255
8113232c:	10000626 	beq	r2,zero,81132348 <OSTaskCreate+0x88>
81132330:	e0bff317 	ldw	r2,-52(fp)
81132334:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132338:	e0bff417 	ldw	r2,-48(fp)
8113233c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81132340:	00800f04 	movi	r2,60
81132344:	00004606 	br	81132460 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81132348:	e0ffff03 	ldbu	r3,-4(fp)
8113234c:	00a04574 	movhi	r2,33045
81132350:	109c6c04 	addi	r2,r2,29104
81132354:	18c7883a 	add	r3,r3,r3
81132358:	18c7883a 	add	r3,r3,r3
8113235c:	10c5883a 	add	r2,r2,r3
81132360:	10800017 	ldw	r2,0(r2)
81132364:	1000391e 	bne	r2,zero,8113244c <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81132368:	e0ffff03 	ldbu	r3,-4(fp)
8113236c:	00a04574 	movhi	r2,33045
81132370:	109c6c04 	addi	r2,r2,29104
81132374:	18c7883a 	add	r3,r3,r3
81132378:	18c7883a 	add	r3,r3,r3
8113237c:	10c5883a 	add	r2,r2,r3
81132380:	00c00044 	movi	r3,1
81132384:	10c00015 	stw	r3,0(r2)
81132388:	e0bff317 	ldw	r2,-52(fp)
8113238c:	e0bff515 	stw	r2,-44(fp)
81132390:	e0bff517 	ldw	r2,-44(fp)
81132394:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81132398:	000f883a 	mov	r7,zero
8113239c:	e1bffe17 	ldw	r6,-8(fp)
811323a0:	e17ffd17 	ldw	r5,-12(fp)
811323a4:	e13ffc17 	ldw	r4,-16(fp)
811323a8:	113da380 	call	8113da38 <OSTaskStkInit>
811323ac:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
811323b0:	e0bfff03 	ldbu	r2,-4(fp)
811323b4:	d8000215 	stw	zero,8(sp)
811323b8:	d8000115 	stw	zero,4(sp)
811323bc:	d8000015 	stw	zero,0(sp)
811323c0:	000f883a 	mov	r7,zero
811323c4:	000d883a 	mov	r6,zero
811323c8:	e17ff717 	ldw	r5,-36(fp)
811323cc:	1009883a 	mov	r4,r2
811323d0:	112cca00 	call	8112cca0 <OS_TCBInit>
811323d4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
811323d8:	e0bff803 	ldbu	r2,-32(fp)
811323dc:	1000061e 	bne	r2,zero,811323f8 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
811323e0:	d0a07b03 	ldbu	r2,-32276(gp)
811323e4:	10803fcc 	andi	r2,r2,255
811323e8:	10800058 	cmpnei	r2,r2,1
811323ec:	1000151e 	bne	r2,zero,81132444 <OSTaskCreate+0x184>
                OS_Sched();
811323f0:	112c8580 	call	8112c858 <OS_Sched>
811323f4:	00001306 	br	81132444 <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811323f8:	0005303a 	rdctl	r2,status
811323fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132400:	e0fffa17 	ldw	r3,-24(fp)
81132404:	00bfff84 	movi	r2,-2
81132408:	1884703a 	and	r2,r3,r2
8113240c:	1001703a 	wrctl	status,r2
  
  return context;
81132410:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81132414:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81132418:	e0ffff03 	ldbu	r3,-4(fp)
8113241c:	00a04574 	movhi	r2,33045
81132420:	109c6c04 	addi	r2,r2,29104
81132424:	18c7883a 	add	r3,r3,r3
81132428:	18c7883a 	add	r3,r3,r3
8113242c:	10c5883a 	add	r2,r2,r3
81132430:	10000015 	stw	zero,0(r2)
81132434:	e0bff317 	ldw	r2,-52(fp)
81132438:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113243c:	e0bff617 	ldw	r2,-40(fp)
81132440:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81132444:	e0bff803 	ldbu	r2,-32(fp)
81132448:	00000506 	br	81132460 <OSTaskCreate+0x1a0>
8113244c:	e0bff317 	ldw	r2,-52(fp)
81132450:	e0bff915 	stw	r2,-28(fp)
81132454:	e0bff917 	ldw	r2,-28(fp)
81132458:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8113245c:	00800a04 	movi	r2,40
}
81132460:	e037883a 	mov	sp,fp
81132464:	dfc00117 	ldw	ra,4(sp)
81132468:	df000017 	ldw	fp,0(sp)
8113246c:	dec00204 	addi	sp,sp,8
81132470:	f800283a 	ret

81132474 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
81132474:	deffec04 	addi	sp,sp,-80
81132478:	de00012e 	bgeu	sp,et,81132480 <OSTaskCreateExt+0xc>
8113247c:	003b68fa 	trap	3
81132480:	dfc01315 	stw	ra,76(sp)
81132484:	df001215 	stw	fp,72(sp)
81132488:	df001204 	addi	fp,sp,72
8113248c:	e13ffa15 	stw	r4,-24(fp)
81132490:	e17ffb15 	stw	r5,-20(fp)
81132494:	e1bffc15 	stw	r6,-16(fp)
81132498:	3809883a 	mov	r4,r7
8113249c:	e0c00217 	ldw	r3,8(fp)
811324a0:	e0800617 	ldw	r2,24(fp)
811324a4:	e13ffd05 	stb	r4,-12(fp)
811324a8:	e0fffe0d 	sth	r3,-8(fp)
811324ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
811324b0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
811324b4:	e0bffd03 	ldbu	r2,-12(fp)
811324b8:	10800a70 	cmpltui	r2,r2,41
811324bc:	1000021e 	bne	r2,zero,811324c8 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
811324c0:	00800a84 	movi	r2,42
811324c4:	00006106 	br	8113264c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811324c8:	0005303a 	rdctl	r2,status
811324cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811324d0:	e0fff917 	ldw	r3,-28(fp)
811324d4:	00bfff84 	movi	r2,-2
811324d8:	1884703a 	and	r2,r3,r2
811324dc:	1001703a 	wrctl	status,r2
  
  return context;
811324e0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811324e4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
811324e8:	d0a08b03 	ldbu	r2,-32212(gp)
811324ec:	10803fcc 	andi	r2,r2,255
811324f0:	10000626 	beq	r2,zero,8113250c <OSTaskCreateExt+0x98>
811324f4:	e0bff117 	ldw	r2,-60(fp)
811324f8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811324fc:	e0bff217 	ldw	r2,-56(fp)
81132500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81132504:	00800f04 	movi	r2,60
81132508:	00005006 	br	8113264c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8113250c:	e0fffd03 	ldbu	r3,-12(fp)
81132510:	00a04574 	movhi	r2,33045
81132514:	109c6c04 	addi	r2,r2,29104
81132518:	18c7883a 	add	r3,r3,r3
8113251c:	18c7883a 	add	r3,r3,r3
81132520:	10c5883a 	add	r2,r2,r3
81132524:	10800017 	ldw	r2,0(r2)
81132528:	1000431e 	bne	r2,zero,81132638 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8113252c:	e0fffd03 	ldbu	r3,-12(fp)
81132530:	00a04574 	movhi	r2,33045
81132534:	109c6c04 	addi	r2,r2,29104
81132538:	18c7883a 	add	r3,r3,r3
8113253c:	18c7883a 	add	r3,r3,r3
81132540:	10c5883a 	add	r2,r2,r3
81132544:	00c00044 	movi	r3,1
81132548:	10c00015 	stw	r3,0(r2)
8113254c:	e0bff117 	ldw	r2,-60(fp)
81132550:	e0bff315 	stw	r2,-52(fp)
81132554:	e0bff317 	ldw	r2,-52(fp)
81132558:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8113255c:	e0bfff0b 	ldhu	r2,-4(fp)
81132560:	100d883a 	mov	r6,r2
81132564:	e1400417 	ldw	r5,16(fp)
81132568:	e1000317 	ldw	r4,12(fp)
8113256c:	113351c0 	call	8113351c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
81132570:	e0bfff0b 	ldhu	r2,-4(fp)
81132574:	100f883a 	mov	r7,r2
81132578:	e1bffc17 	ldw	r6,-16(fp)
8113257c:	e17ffb17 	ldw	r5,-20(fp)
81132580:	e13ffa17 	ldw	r4,-24(fp)
81132584:	113da380 	call	8113da38 <OSTaskStkInit>
81132588:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8113258c:	e0fffd03 	ldbu	r3,-12(fp)
81132590:	e13ffe0b 	ldhu	r4,-8(fp)
81132594:	e0bfff0b 	ldhu	r2,-4(fp)
81132598:	d8800215 	stw	r2,8(sp)
8113259c:	e0800517 	ldw	r2,20(fp)
811325a0:	d8800115 	stw	r2,4(sp)
811325a4:	e0800417 	ldw	r2,16(fp)
811325a8:	d8800015 	stw	r2,0(sp)
811325ac:	200f883a 	mov	r7,r4
811325b0:	e1800317 	ldw	r6,12(fp)
811325b4:	e17ff517 	ldw	r5,-44(fp)
811325b8:	1809883a 	mov	r4,r3
811325bc:	112cca00 	call	8112cca0 <OS_TCBInit>
811325c0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
811325c4:	e0bff603 	ldbu	r2,-40(fp)
811325c8:	1000061e 	bne	r2,zero,811325e4 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
811325cc:	d0a07b03 	ldbu	r2,-32276(gp)
811325d0:	10803fcc 	andi	r2,r2,255
811325d4:	10800058 	cmpnei	r2,r2,1
811325d8:	1000151e 	bne	r2,zero,81132630 <OSTaskCreateExt+0x1bc>
                OS_Sched();
811325dc:	112c8580 	call	8112c858 <OS_Sched>
811325e0:	00001306 	br	81132630 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811325e4:	0005303a 	rdctl	r2,status
811325e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811325ec:	e0fff817 	ldw	r3,-32(fp)
811325f0:	00bfff84 	movi	r2,-2
811325f4:	1884703a 	and	r2,r3,r2
811325f8:	1001703a 	wrctl	status,r2
  
  return context;
811325fc:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81132600:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
81132604:	e0fffd03 	ldbu	r3,-12(fp)
81132608:	00a04574 	movhi	r2,33045
8113260c:	109c6c04 	addi	r2,r2,29104
81132610:	18c7883a 	add	r3,r3,r3
81132614:	18c7883a 	add	r3,r3,r3
81132618:	10c5883a 	add	r2,r2,r3
8113261c:	10000015 	stw	zero,0(r2)
81132620:	e0bff117 	ldw	r2,-60(fp)
81132624:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132628:	e0bff417 	ldw	r2,-48(fp)
8113262c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81132630:	e0bff603 	ldbu	r2,-40(fp)
81132634:	00000506 	br	8113264c <OSTaskCreateExt+0x1d8>
81132638:	e0bff117 	ldw	r2,-60(fp)
8113263c:	e0bff715 	stw	r2,-36(fp)
81132640:	e0bff717 	ldw	r2,-36(fp)
81132644:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81132648:	00800a04 	movi	r2,40
}
8113264c:	e037883a 	mov	sp,fp
81132650:	dfc00117 	ldw	ra,4(sp)
81132654:	df000017 	ldw	fp,0(sp)
81132658:	dec00204 	addi	sp,sp,8
8113265c:	f800283a 	ret

81132660 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
81132660:	defff404 	addi	sp,sp,-48
81132664:	de00012e 	bgeu	sp,et,8113266c <OSTaskDel+0xc>
81132668:	003b68fa 	trap	3
8113266c:	dfc00b15 	stw	ra,44(sp)
81132670:	df000a15 	stw	fp,40(sp)
81132674:	df000a04 	addi	fp,sp,40
81132678:	2005883a 	mov	r2,r4
8113267c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
81132680:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81132684:	d0a08b03 	ldbu	r2,-32212(gp)
81132688:	10803fcc 	andi	r2,r2,255
8113268c:	10000226 	beq	r2,zero,81132698 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
81132690:	00801004 	movi	r2,64
81132694:	0000c006 	br	81132998 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81132698:	e0bfff03 	ldbu	r2,-4(fp)
8113269c:	10800a18 	cmpnei	r2,r2,40
811326a0:	1000021e 	bne	r2,zero,811326ac <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
811326a4:	00800f84 	movi	r2,62
811326a8:	0000bb06 	br	81132998 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
811326ac:	e0bfff03 	ldbu	r2,-4(fp)
811326b0:	10800a30 	cmpltui	r2,r2,40
811326b4:	1000051e 	bne	r2,zero,811326cc <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
811326b8:	e0bfff03 	ldbu	r2,-4(fp)
811326bc:	10803fe0 	cmpeqi	r2,r2,255
811326c0:	1000021e 	bne	r2,zero,811326cc <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
811326c4:	00800a84 	movi	r2,42
811326c8:	0000b306 	br	81132998 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811326cc:	0005303a 	rdctl	r2,status
811326d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811326d4:	e0fffe17 	ldw	r3,-8(fp)
811326d8:	00bfff84 	movi	r2,-2
811326dc:	1884703a 	and	r2,r3,r2
811326e0:	1001703a 	wrctl	status,r2
  
  return context;
811326e4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
811326e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
811326ec:	e0bfff03 	ldbu	r2,-4(fp)
811326f0:	10803fd8 	cmpnei	r2,r2,255
811326f4:	1000031e 	bne	r2,zero,81132704 <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
811326f8:	d0a08c17 	ldw	r2,-32208(gp)
811326fc:	10800c83 	ldbu	r2,50(r2)
81132700:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81132704:	e0ffff03 	ldbu	r3,-4(fp)
81132708:	00a04574 	movhi	r2,33045
8113270c:	109c6c04 	addi	r2,r2,29104
81132710:	18c7883a 	add	r3,r3,r3
81132714:	18c7883a 	add	r3,r3,r3
81132718:	10c5883a 	add	r2,r2,r3
8113271c:	10800017 	ldw	r2,0(r2)
81132720:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
81132724:	e0bff817 	ldw	r2,-32(fp)
81132728:	1000061e 	bne	r2,zero,81132744 <OSTaskDel+0xe4>
8113272c:	e0bff617 	ldw	r2,-40(fp)
81132730:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132734:	e0bff717 	ldw	r2,-36(fp)
81132738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8113273c:	008010c4 	movi	r2,67
81132740:	00009506 	br	81132998 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
81132744:	e0bff817 	ldw	r2,-32(fp)
81132748:	10800058 	cmpnei	r2,r2,1
8113274c:	1000061e 	bne	r2,zero,81132768 <OSTaskDel+0x108>
81132750:	e0bff617 	ldw	r2,-40(fp)
81132754:	e0bff915 	stw	r2,-28(fp)
81132758:	e0bff917 	ldw	r2,-28(fp)
8113275c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81132760:	00800f44 	movi	r2,61
81132764:	00008c06 	br	81132998 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81132768:	e0bff817 	ldw	r2,-32(fp)
8113276c:	10800d03 	ldbu	r2,52(r2)
81132770:	10c03fcc 	andi	r3,r2,255
81132774:	e0bff817 	ldw	r2,-32(fp)
81132778:	10800d03 	ldbu	r2,52(r2)
8113277c:	11003fcc 	andi	r4,r2,255
81132780:	d0a08844 	addi	r2,gp,-32223
81132784:	2085883a 	add	r2,r4,r2
81132788:	10800003 	ldbu	r2,0(r2)
8113278c:	1009883a 	mov	r4,r2
81132790:	e0bff817 	ldw	r2,-32(fp)
81132794:	10800d43 	ldbu	r2,53(r2)
81132798:	0084303a 	nor	r2,zero,r2
8113279c:	2084703a 	and	r2,r4,r2
811327a0:	1009883a 	mov	r4,r2
811327a4:	d0a08844 	addi	r2,gp,-32223
811327a8:	1885883a 	add	r2,r3,r2
811327ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
811327b0:	e0bff817 	ldw	r2,-32(fp)
811327b4:	10800d03 	ldbu	r2,52(r2)
811327b8:	10c03fcc 	andi	r3,r2,255
811327bc:	d0a08844 	addi	r2,gp,-32223
811327c0:	1885883a 	add	r2,r3,r2
811327c4:	10800003 	ldbu	r2,0(r2)
811327c8:	10803fcc 	andi	r2,r2,255
811327cc:	1000071e 	bne	r2,zero,811327ec <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
811327d0:	e0bff817 	ldw	r2,-32(fp)
811327d4:	10800d83 	ldbu	r2,54(r2)
811327d8:	0084303a 	nor	r2,zero,r2
811327dc:	1007883a 	mov	r3,r2
811327e0:	d0a08803 	ldbu	r2,-32224(gp)
811327e4:	1884703a 	and	r2,r3,r2
811327e8:	d0a08805 	stb	r2,-32224(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
811327ec:	e0bff817 	ldw	r2,-32(fp)
811327f0:	10800717 	ldw	r2,28(r2)
811327f4:	10000526 	beq	r2,zero,8113280c <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
811327f8:	e0bff817 	ldw	r2,-32(fp)
811327fc:	10800717 	ldw	r2,28(r2)
81132800:	100b883a 	mov	r5,r2
81132804:	e13ff817 	ldw	r4,-32(fp)
81132808:	112c1ac0 	call	8112c1ac <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8113280c:	e0bff817 	ldw	r2,-32(fp)
81132810:	10800817 	ldw	r2,32(r2)
81132814:	10000526 	beq	r2,zero,8113282c <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81132818:	e0bff817 	ldw	r2,-32(fp)
8113281c:	10800817 	ldw	r2,32(r2)
81132820:	100b883a 	mov	r5,r2
81132824:	e13ff817 	ldw	r4,-32(fp)
81132828:	112c26c0 	call	8112c26c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8113282c:	e0bff817 	ldw	r2,-32(fp)
81132830:	10800a17 	ldw	r2,40(r2)
81132834:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
81132838:	e0bffb17 	ldw	r2,-20(fp)
8113283c:	10000226 	beq	r2,zero,81132848 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
81132840:	e13ffb17 	ldw	r4,-20(fp)
81132844:	112e8440 	call	8112e844 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
81132848:	e0bff817 	ldw	r2,-32(fp)
8113284c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
81132850:	e0bff817 	ldw	r2,-32(fp)
81132854:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81132858:	e0bff817 	ldw	r2,-32(fp)
8113285c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
81132860:	d0a07903 	ldbu	r2,-32284(gp)
81132864:	10803fcc 	andi	r2,r2,255
81132868:	10803fe0 	cmpeqi	r2,r2,255
8113286c:	1000031e 	bne	r2,zero,8113287c <OSTaskDel+0x21c>
        OSLockNesting++;
81132870:	d0a07903 	ldbu	r2,-32284(gp)
81132874:	10800044 	addi	r2,r2,1
81132878:	d0a07905 	stb	r2,-32284(gp)
8113287c:	e0bff617 	ldw	r2,-40(fp)
81132880:	e0bffd15 	stw	r2,-12(fp)
81132884:	e0bffd17 	ldw	r2,-12(fp)
81132888:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8113288c:	112bd740 	call	8112bd74 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132890:	0005303a 	rdctl	r2,status
81132894:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132898:	e0fffa17 	ldw	r3,-24(fp)
8113289c:	00bfff84 	movi	r2,-2
811328a0:	1884703a 	and	r2,r3,r2
811328a4:	1001703a 	wrctl	status,r2
  
  return context;
811328a8:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
811328ac:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
811328b0:	d0a07903 	ldbu	r2,-32284(gp)
811328b4:	10803fcc 	andi	r2,r2,255
811328b8:	10000326 	beq	r2,zero,811328c8 <OSTaskDel+0x268>
        OSLockNesting--;
811328bc:	d0a07903 	ldbu	r2,-32284(gp)
811328c0:	10bfffc4 	addi	r2,r2,-1
811328c4:	d0a07905 	stb	r2,-32284(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
811328c8:	e13ff817 	ldw	r4,-32(fp)
811328cc:	113dbc80 	call	8113dbc8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
811328d0:	d0a08443 	ldbu	r2,-32239(gp)
811328d4:	10bfffc4 	addi	r2,r2,-1
811328d8:	d0a08445 	stb	r2,-32239(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
811328dc:	e0ffff03 	ldbu	r3,-4(fp)
811328e0:	00a04574 	movhi	r2,33045
811328e4:	109c6c04 	addi	r2,r2,29104
811328e8:	18c7883a 	add	r3,r3,r3
811328ec:	18c7883a 	add	r3,r3,r3
811328f0:	10c5883a 	add	r2,r2,r3
811328f4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
811328f8:	e0bff817 	ldw	r2,-32(fp)
811328fc:	10800617 	ldw	r2,24(r2)
81132900:	1000071e 	bne	r2,zero,81132920 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
81132904:	e0bff817 	ldw	r2,-32(fp)
81132908:	10800517 	ldw	r2,20(r2)
8113290c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
81132910:	e0bff817 	ldw	r2,-32(fp)
81132914:	10800517 	ldw	r2,20(r2)
81132918:	d0a07e15 	stw	r2,-32264(gp)
8113291c:	00000a06 	br	81132948 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
81132920:	e0bff817 	ldw	r2,-32(fp)
81132924:	10800617 	ldw	r2,24(r2)
81132928:	e0fff817 	ldw	r3,-32(fp)
8113292c:	18c00517 	ldw	r3,20(r3)
81132930:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
81132934:	e0bff817 	ldw	r2,-32(fp)
81132938:	10800517 	ldw	r2,20(r2)
8113293c:	e0fff817 	ldw	r3,-32(fp)
81132940:	18c00617 	ldw	r3,24(r3)
81132944:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
81132948:	d0e08317 	ldw	r3,-32244(gp)
8113294c:	e0bff817 	ldw	r2,-32(fp)
81132950:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
81132954:	e0bff817 	ldw	r2,-32(fp)
81132958:	d0a08315 	stw	r2,-32244(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8113295c:	e0bff817 	ldw	r2,-32(fp)
81132960:	00c00fc4 	movi	r3,63
81132964:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81132968:	e0bff817 	ldw	r2,-32(fp)
8113296c:	10001345 	stb	zero,77(r2)
81132970:	e0bff617 	ldw	r2,-40(fp)
81132974:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132978:	e0bffc17 	ldw	r2,-16(fp)
8113297c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81132980:	d0a07b03 	ldbu	r2,-32276(gp)
81132984:	10803fcc 	andi	r2,r2,255
81132988:	10800058 	cmpnei	r2,r2,1
8113298c:	1000011e 	bne	r2,zero,81132994 <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
81132990:	112c8580 	call	8112c858 <OS_Sched>
    }
    return (OS_ERR_NONE);
81132994:	0005883a 	mov	r2,zero
}
81132998:	e037883a 	mov	sp,fp
8113299c:	dfc00117 	ldw	ra,4(sp)
811329a0:	df000017 	ldw	fp,0(sp)
811329a4:	dec00204 	addi	sp,sp,8
811329a8:	f800283a 	ret

811329ac <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
811329ac:	defff504 	addi	sp,sp,-44
811329b0:	de00012e 	bgeu	sp,et,811329b8 <OSTaskDelReq+0xc>
811329b4:	003b68fa 	trap	3
811329b8:	df000a15 	stw	fp,40(sp)
811329bc:	df000a04 	addi	fp,sp,40
811329c0:	2005883a 	mov	r2,r4
811329c4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811329c8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
811329cc:	e0bfff03 	ldbu	r2,-4(fp)
811329d0:	10800a18 	cmpnei	r2,r2,40
811329d4:	1000021e 	bne	r2,zero,811329e0 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
811329d8:	00800f84 	movi	r2,62
811329dc:	00004506 	br	81132af4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
811329e0:	e0bfff03 	ldbu	r2,-4(fp)
811329e4:	10800a30 	cmpltui	r2,r2,40
811329e8:	1000051e 	bne	r2,zero,81132a00 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
811329ec:	e0bfff03 	ldbu	r2,-4(fp)
811329f0:	10803fe0 	cmpeqi	r2,r2,255
811329f4:	1000021e 	bne	r2,zero,81132a00 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
811329f8:	00800a84 	movi	r2,42
811329fc:	00003d06 	br	81132af4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
81132a00:	e0bfff03 	ldbu	r2,-4(fp)
81132a04:	10803fd8 	cmpnei	r2,r2,255
81132a08:	1000111e 	bne	r2,zero,81132a50 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132a0c:	0005303a 	rdctl	r2,status
81132a10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132a14:	e0fff917 	ldw	r3,-28(fp)
81132a18:	00bfff84 	movi	r2,-2
81132a1c:	1884703a 	and	r2,r3,r2
81132a20:	1001703a 	wrctl	status,r2
  
  return context;
81132a24:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
81132a28:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
81132a2c:	d0a08c17 	ldw	r2,-32208(gp)
81132a30:	10800dc3 	ldbu	r2,55(r2)
81132a34:	e0bff805 	stb	r2,-32(fp)
81132a38:	e0bff617 	ldw	r2,-40(fp)
81132a3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132a40:	e0bffe17 	ldw	r2,-8(fp)
81132a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
81132a48:	e0bff803 	ldbu	r2,-32(fp)
81132a4c:	00002906 	br	81132af4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132a50:	0005303a 	rdctl	r2,status
81132a54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132a58:	e0fff717 	ldw	r3,-36(fp)
81132a5c:	00bfff84 	movi	r2,-2
81132a60:	1884703a 	and	r2,r3,r2
81132a64:	1001703a 	wrctl	status,r2
  
  return context;
81132a68:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
81132a6c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81132a70:	e0ffff03 	ldbu	r3,-4(fp)
81132a74:	00a04574 	movhi	r2,33045
81132a78:	109c6c04 	addi	r2,r2,29104
81132a7c:	18c7883a 	add	r3,r3,r3
81132a80:	18c7883a 	add	r3,r3,r3
81132a84:	10c5883a 	add	r2,r2,r3
81132a88:	10800017 	ldw	r2,0(r2)
81132a8c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
81132a90:	e0bffb17 	ldw	r2,-20(fp)
81132a94:	1000061e 	bne	r2,zero,81132ab0 <OSTaskDelReq+0x104>
81132a98:	e0bff617 	ldw	r2,-40(fp)
81132a9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132aa0:	e0bffa17 	ldw	r2,-24(fp)
81132aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81132aa8:	008010c4 	movi	r2,67
81132aac:	00001106 	br	81132af4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
81132ab0:	e0bffb17 	ldw	r2,-20(fp)
81132ab4:	10800058 	cmpnei	r2,r2,1
81132ab8:	1000061e 	bne	r2,zero,81132ad4 <OSTaskDelReq+0x128>
81132abc:	e0bff617 	ldw	r2,-40(fp)
81132ac0:	e0bffc15 	stw	r2,-16(fp)
81132ac4:	e0bffc17 	ldw	r2,-16(fp)
81132ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81132acc:	00800f44 	movi	r2,61
81132ad0:	00000806 	br	81132af4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
81132ad4:	e0bffb17 	ldw	r2,-20(fp)
81132ad8:	00c00fc4 	movi	r3,63
81132adc:	10c00dc5 	stb	r3,55(r2)
81132ae0:	e0bff617 	ldw	r2,-40(fp)
81132ae4:	e0bffd15 	stw	r2,-12(fp)
81132ae8:	e0bffd17 	ldw	r2,-12(fp)
81132aec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81132af0:	0005883a 	mov	r2,zero
}
81132af4:	e037883a 	mov	sp,fp
81132af8:	df000017 	ldw	fp,0(sp)
81132afc:	dec00104 	addi	sp,sp,4
81132b00:	f800283a 	ret

81132b04 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
81132b04:	defff404 	addi	sp,sp,-48
81132b08:	de00012e 	bgeu	sp,et,81132b10 <OSTaskNameGet+0xc>
81132b0c:	003b68fa 	trap	3
81132b10:	dfc00b15 	stw	ra,44(sp)
81132b14:	df000a15 	stw	fp,40(sp)
81132b18:	df000a04 	addi	fp,sp,40
81132b1c:	2005883a 	mov	r2,r4
81132b20:	e17ffe15 	stw	r5,-8(fp)
81132b24:	e1bfff15 	stw	r6,-4(fp)
81132b28:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
81132b2c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
81132b30:	e0bfff17 	ldw	r2,-4(fp)
81132b34:	1000021e 	bne	r2,zero,81132b40 <OSTaskNameGet+0x3c>
        return (0);
81132b38:	0005883a 	mov	r2,zero
81132b3c:	00005406 	br	81132c90 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
81132b40:	e0bffd03 	ldbu	r2,-12(fp)
81132b44:	10800a70 	cmpltui	r2,r2,41
81132b48:	1000081e 	bne	r2,zero,81132b6c <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
81132b4c:	e0bffd03 	ldbu	r2,-12(fp)
81132b50:	10803fe0 	cmpeqi	r2,r2,255
81132b54:	1000051e 	bne	r2,zero,81132b6c <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
81132b58:	e0bfff17 	ldw	r2,-4(fp)
81132b5c:	00c00a84 	movi	r3,42
81132b60:	10c00005 	stb	r3,0(r2)
            return (0);
81132b64:	0005883a 	mov	r2,zero
81132b68:	00004906 	br	81132c90 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
81132b6c:	e0bffe17 	ldw	r2,-8(fp)
81132b70:	1000051e 	bne	r2,zero,81132b88 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
81132b74:	e0bfff17 	ldw	r2,-4(fp)
81132b78:	00c00304 	movi	r3,12
81132b7c:	10c00005 	stb	r3,0(r2)
        return (0);
81132b80:	0005883a 	mov	r2,zero
81132b84:	00004206 	br	81132c90 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
81132b88:	d0a08b03 	ldbu	r2,-32212(gp)
81132b8c:	10803fcc 	andi	r2,r2,255
81132b90:	10000526 	beq	r2,zero,81132ba8 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
81132b94:	e0bfff17 	ldw	r2,-4(fp)
81132b98:	00c00444 	movi	r3,17
81132b9c:	10c00005 	stb	r3,0(r2)
        return (0);
81132ba0:	0005883a 	mov	r2,zero
81132ba4:	00003a06 	br	81132c90 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132ba8:	0005303a 	rdctl	r2,status
81132bac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132bb0:	e0fffc17 	ldw	r3,-16(fp)
81132bb4:	00bfff84 	movi	r2,-2
81132bb8:	1884703a 	and	r2,r3,r2
81132bbc:	1001703a 	wrctl	status,r2
  
  return context;
81132bc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81132bc4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81132bc8:	e0bffd03 	ldbu	r2,-12(fp)
81132bcc:	10803fd8 	cmpnei	r2,r2,255
81132bd0:	1000031e 	bne	r2,zero,81132be0 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
81132bd4:	d0a08c17 	ldw	r2,-32208(gp)
81132bd8:	10800c83 	ldbu	r2,50(r2)
81132bdc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81132be0:	e0fffd03 	ldbu	r3,-12(fp)
81132be4:	00a04574 	movhi	r2,33045
81132be8:	109c6c04 	addi	r2,r2,29104
81132bec:	18c7883a 	add	r3,r3,r3
81132bf0:	18c7883a 	add	r3,r3,r3
81132bf4:	10c5883a 	add	r2,r2,r3
81132bf8:	10800017 	ldw	r2,0(r2)
81132bfc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
81132c00:	e0bff817 	ldw	r2,-32(fp)
81132c04:	1000091e 	bne	r2,zero,81132c2c <OSTaskNameGet+0x128>
81132c08:	e0bff617 	ldw	r2,-40(fp)
81132c0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132c10:	e0bff717 	ldw	r2,-36(fp)
81132c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
81132c18:	e0bfff17 	ldw	r2,-4(fp)
81132c1c:	00c010c4 	movi	r3,67
81132c20:	10c00005 	stb	r3,0(r2)
        return (0);
81132c24:	0005883a 	mov	r2,zero
81132c28:	00001906 	br	81132c90 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
81132c2c:	e0bff817 	ldw	r2,-32(fp)
81132c30:	10800058 	cmpnei	r2,r2,1
81132c34:	1000091e 	bne	r2,zero,81132c5c <OSTaskNameGet+0x158>
81132c38:	e0bff617 	ldw	r2,-40(fp)
81132c3c:	e0bff915 	stw	r2,-28(fp)
81132c40:	e0bff917 	ldw	r2,-28(fp)
81132c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
81132c48:	e0bfff17 	ldw	r2,-4(fp)
81132c4c:	00c010c4 	movi	r3,67
81132c50:	10c00005 	stb	r3,0(r2)
        return (0);
81132c54:	0005883a 	mov	r2,zero
81132c58:	00000d06 	br	81132c90 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
81132c5c:	e0bff817 	ldw	r2,-32(fp)
81132c60:	10801304 	addi	r2,r2,76
81132c64:	100b883a 	mov	r5,r2
81132c68:	e13ffe17 	ldw	r4,-8(fp)
81132c6c:	112c9ac0 	call	8112c9ac <OS_StrCopy>
81132c70:	e0bffb05 	stb	r2,-20(fp)
81132c74:	e0bff617 	ldw	r2,-40(fp)
81132c78:	e0bffa15 	stw	r2,-24(fp)
81132c7c:	e0bffa17 	ldw	r2,-24(fp)
81132c80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81132c84:	e0bfff17 	ldw	r2,-4(fp)
81132c88:	10000005 	stb	zero,0(r2)
    return (len);
81132c8c:	e0bffb03 	ldbu	r2,-20(fp)
}
81132c90:	e037883a 	mov	sp,fp
81132c94:	dfc00117 	ldw	ra,4(sp)
81132c98:	df000017 	ldw	fp,0(sp)
81132c9c:	dec00204 	addi	sp,sp,8
81132ca0:	f800283a 	ret

81132ca4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
81132ca4:	defff304 	addi	sp,sp,-52
81132ca8:	de00012e 	bgeu	sp,et,81132cb0 <OSTaskNameSet+0xc>
81132cac:	003b68fa 	trap	3
81132cb0:	dfc00c15 	stw	ra,48(sp)
81132cb4:	df000b15 	stw	fp,44(sp)
81132cb8:	df000b04 	addi	fp,sp,44
81132cbc:	2005883a 	mov	r2,r4
81132cc0:	e17ffe15 	stw	r5,-8(fp)
81132cc4:	e1bfff15 	stw	r6,-4(fp)
81132cc8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81132ccc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81132cd0:	e0bfff17 	ldw	r2,-4(fp)
81132cd4:	10005c26 	beq	r2,zero,81132e48 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81132cd8:	e0bffd03 	ldbu	r2,-12(fp)
81132cdc:	10800a70 	cmpltui	r2,r2,41
81132ce0:	1000071e 	bne	r2,zero,81132d00 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
81132ce4:	e0bffd03 	ldbu	r2,-12(fp)
81132ce8:	10803fe0 	cmpeqi	r2,r2,255
81132cec:	1000041e 	bne	r2,zero,81132d00 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
81132cf0:	e0bfff17 	ldw	r2,-4(fp)
81132cf4:	00c00a84 	movi	r3,42
81132cf8:	10c00005 	stb	r3,0(r2)
            return;
81132cfc:	00005306 	br	81132e4c <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
81132d00:	e0bffe17 	ldw	r2,-8(fp)
81132d04:	1000041e 	bne	r2,zero,81132d18 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
81132d08:	e0bfff17 	ldw	r2,-4(fp)
81132d0c:	00c00304 	movi	r3,12
81132d10:	10c00005 	stb	r3,0(r2)
        return;
81132d14:	00004d06 	br	81132e4c <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
81132d18:	d0a08b03 	ldbu	r2,-32212(gp)
81132d1c:	10803fcc 	andi	r2,r2,255
81132d20:	10000426 	beq	r2,zero,81132d34 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
81132d24:	e0bfff17 	ldw	r2,-4(fp)
81132d28:	00c00484 	movi	r3,18
81132d2c:	10c00005 	stb	r3,0(r2)
        return;
81132d30:	00004606 	br	81132e4c <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132d34:	0005303a 	rdctl	r2,status
81132d38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132d3c:	e0fffc17 	ldw	r3,-16(fp)
81132d40:	00bfff84 	movi	r2,-2
81132d44:	1884703a 	and	r2,r3,r2
81132d48:	1001703a 	wrctl	status,r2
  
  return context;
81132d4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81132d50:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
81132d54:	e0bffd03 	ldbu	r2,-12(fp)
81132d58:	10803fd8 	cmpnei	r2,r2,255
81132d5c:	1000031e 	bne	r2,zero,81132d6c <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
81132d60:	d0a08c17 	ldw	r2,-32208(gp)
81132d64:	10800c83 	ldbu	r2,50(r2)
81132d68:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81132d6c:	e0fffd03 	ldbu	r3,-12(fp)
81132d70:	00a04574 	movhi	r2,33045
81132d74:	109c6c04 	addi	r2,r2,29104
81132d78:	18c7883a 	add	r3,r3,r3
81132d7c:	18c7883a 	add	r3,r3,r3
81132d80:	10c5883a 	add	r2,r2,r3
81132d84:	10800017 	ldw	r2,0(r2)
81132d88:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
81132d8c:	e0bff717 	ldw	r2,-36(fp)
81132d90:	1000081e 	bne	r2,zero,81132db4 <OSTaskNameSet+0x110>
81132d94:	e0bff517 	ldw	r2,-44(fp)
81132d98:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132d9c:	e0bff617 	ldw	r2,-40(fp)
81132da0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
81132da4:	e0bfff17 	ldw	r2,-4(fp)
81132da8:	00c010c4 	movi	r3,67
81132dac:	10c00005 	stb	r3,0(r2)
        return;
81132db0:	00002606 	br	81132e4c <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
81132db4:	e0bff717 	ldw	r2,-36(fp)
81132db8:	10800058 	cmpnei	r2,r2,1
81132dbc:	1000081e 	bne	r2,zero,81132de0 <OSTaskNameSet+0x13c>
81132dc0:	e0bff517 	ldw	r2,-44(fp)
81132dc4:	e0bff815 	stw	r2,-32(fp)
81132dc8:	e0bff817 	ldw	r2,-32(fp)
81132dcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
81132dd0:	e0bfff17 	ldw	r2,-4(fp)
81132dd4:	00c010c4 	movi	r3,67
81132dd8:	10c00005 	stb	r3,0(r2)
        return;
81132ddc:	00001b06 	br	81132e4c <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
81132de0:	e13ffe17 	ldw	r4,-8(fp)
81132de4:	112ca280 	call	8112ca28 <OS_StrLen>
81132de8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
81132dec:	e0bffa03 	ldbu	r2,-24(fp)
81132df0:	10800830 	cmpltui	r2,r2,32
81132df4:	1000081e 	bne	r2,zero,81132e18 <OSTaskNameSet+0x174>
81132df8:	e0bff517 	ldw	r2,-44(fp)
81132dfc:	e0bff915 	stw	r2,-28(fp)
81132e00:	e0bff917 	ldw	r2,-28(fp)
81132e04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
81132e08:	e0bfff17 	ldw	r2,-4(fp)
81132e0c:	00c01044 	movi	r3,65
81132e10:	10c00005 	stb	r3,0(r2)
        return;
81132e14:	00000d06 	br	81132e4c <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
81132e18:	e0bff717 	ldw	r2,-36(fp)
81132e1c:	10801304 	addi	r2,r2,76
81132e20:	e17ffe17 	ldw	r5,-8(fp)
81132e24:	1009883a 	mov	r4,r2
81132e28:	112c9ac0 	call	8112c9ac <OS_StrCopy>
81132e2c:	e0bff517 	ldw	r2,-44(fp)
81132e30:	e0bffb15 	stw	r2,-20(fp)
81132e34:	e0bffb17 	ldw	r2,-20(fp)
81132e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81132e3c:	e0bfff17 	ldw	r2,-4(fp)
81132e40:	10000005 	stb	zero,0(r2)
81132e44:	00000106 	br	81132e4c <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
81132e48:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81132e4c:	e037883a 	mov	sp,fp
81132e50:	dfc00117 	ldw	ra,4(sp)
81132e54:	df000017 	ldw	fp,0(sp)
81132e58:	dec00204 	addi	sp,sp,8
81132e5c:	f800283a 	ret

81132e60 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
81132e60:	defff404 	addi	sp,sp,-48
81132e64:	de00012e 	bgeu	sp,et,81132e6c <OSTaskResume+0xc>
81132e68:	003b68fa 	trap	3
81132e6c:	dfc00b15 	stw	ra,44(sp)
81132e70:	df000a15 	stw	fp,40(sp)
81132e74:	df000a04 	addi	fp,sp,40
81132e78:	2005883a 	mov	r2,r4
81132e7c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81132e80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
81132e84:	e0bfff03 	ldbu	r2,-4(fp)
81132e88:	10800a30 	cmpltui	r2,r2,40
81132e8c:	1000021e 	bne	r2,zero,81132e98 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81132e90:	00800a84 	movi	r2,42
81132e94:	00006406 	br	81133028 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132e98:	0005303a 	rdctl	r2,status
81132e9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132ea0:	e0fffe17 	ldw	r3,-8(fp)
81132ea4:	00bfff84 	movi	r2,-2
81132ea8:	1884703a 	and	r2,r3,r2
81132eac:	1001703a 	wrctl	status,r2
  
  return context;
81132eb0:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81132eb4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81132eb8:	e0ffff03 	ldbu	r3,-4(fp)
81132ebc:	00a04574 	movhi	r2,33045
81132ec0:	109c6c04 	addi	r2,r2,29104
81132ec4:	18c7883a 	add	r3,r3,r3
81132ec8:	18c7883a 	add	r3,r3,r3
81132ecc:	10c5883a 	add	r2,r2,r3
81132ed0:	10800017 	ldw	r2,0(r2)
81132ed4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81132ed8:	e0bff817 	ldw	r2,-32(fp)
81132edc:	1000061e 	bne	r2,zero,81132ef8 <OSTaskResume+0x98>
81132ee0:	e0bff617 	ldw	r2,-40(fp)
81132ee4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132ee8:	e0bff717 	ldw	r2,-36(fp)
81132eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
81132ef0:	00801184 	movi	r2,70
81132ef4:	00004c06 	br	81133028 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81132ef8:	e0bff817 	ldw	r2,-32(fp)
81132efc:	10800058 	cmpnei	r2,r2,1
81132f00:	1000061e 	bne	r2,zero,81132f1c <OSTaskResume+0xbc>
81132f04:	e0bff617 	ldw	r2,-40(fp)
81132f08:	e0bff915 	stw	r2,-28(fp)
81132f0c:	e0bff917 	ldw	r2,-28(fp)
81132f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81132f14:	008010c4 	movi	r2,67
81132f18:	00004306 	br	81133028 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
81132f1c:	e0bff817 	ldw	r2,-32(fp)
81132f20:	10800c03 	ldbu	r2,48(r2)
81132f24:	10803fcc 	andi	r2,r2,255
81132f28:	1080020c 	andi	r2,r2,8
81132f2c:	10003926 	beq	r2,zero,81133014 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
81132f30:	e0bff817 	ldw	r2,-32(fp)
81132f34:	10c00c03 	ldbu	r3,48(r2)
81132f38:	00bffdc4 	movi	r2,-9
81132f3c:	1884703a 	and	r2,r3,r2
81132f40:	1007883a 	mov	r3,r2
81132f44:	e0bff817 	ldw	r2,-32(fp)
81132f48:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
81132f4c:	e0bff817 	ldw	r2,-32(fp)
81132f50:	10800c03 	ldbu	r2,48(r2)
81132f54:	10803fcc 	andi	r2,r2,255
81132f58:	1000281e 	bne	r2,zero,81132ffc <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
81132f5c:	e0bff817 	ldw	r2,-32(fp)
81132f60:	10800b8b 	ldhu	r2,46(r2)
81132f64:	10bfffcc 	andi	r2,r2,65535
81132f68:	10001f1e 	bne	r2,zero,81132fe8 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
81132f6c:	e0bff817 	ldw	r2,-32(fp)
81132f70:	10c00d83 	ldbu	r3,54(r2)
81132f74:	d0a08803 	ldbu	r2,-32224(gp)
81132f78:	1884b03a 	or	r2,r3,r2
81132f7c:	d0a08805 	stb	r2,-32224(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81132f80:	e0bff817 	ldw	r2,-32(fp)
81132f84:	10800d03 	ldbu	r2,52(r2)
81132f88:	10c03fcc 	andi	r3,r2,255
81132f8c:	e0bff817 	ldw	r2,-32(fp)
81132f90:	10800d03 	ldbu	r2,52(r2)
81132f94:	11003fcc 	andi	r4,r2,255
81132f98:	d0a08844 	addi	r2,gp,-32223
81132f9c:	2085883a 	add	r2,r4,r2
81132fa0:	11000003 	ldbu	r4,0(r2)
81132fa4:	e0bff817 	ldw	r2,-32(fp)
81132fa8:	10800d43 	ldbu	r2,53(r2)
81132fac:	2084b03a 	or	r2,r4,r2
81132fb0:	1009883a 	mov	r4,r2
81132fb4:	d0a08844 	addi	r2,gp,-32223
81132fb8:	1885883a 	add	r2,r3,r2
81132fbc:	11000005 	stb	r4,0(r2)
81132fc0:	e0bff617 	ldw	r2,-40(fp)
81132fc4:	e0bffa15 	stw	r2,-24(fp)
81132fc8:	e0bffa17 	ldw	r2,-24(fp)
81132fcc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81132fd0:	d0a07b03 	ldbu	r2,-32276(gp)
81132fd4:	10803fcc 	andi	r2,r2,255
81132fd8:	10800058 	cmpnei	r2,r2,1
81132fdc:	10000b1e 	bne	r2,zero,8113300c <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
81132fe0:	112c8580 	call	8112c858 <OS_Sched>
81132fe4:	00000906 	br	8113300c <OSTaskResume+0x1ac>
81132fe8:	e0bff617 	ldw	r2,-40(fp)
81132fec:	e0bffb15 	stw	r2,-20(fp)
81132ff0:	e0bffb17 	ldw	r2,-20(fp)
81132ff4:	1001703a 	wrctl	status,r2
81132ff8:	00000406 	br	8113300c <OSTaskResume+0x1ac>
81132ffc:	e0bff617 	ldw	r2,-40(fp)
81133000:	e0bffc15 	stw	r2,-16(fp)
81133004:	e0bffc17 	ldw	r2,-16(fp)
81133008:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8113300c:	0005883a 	mov	r2,zero
81133010:	00000506 	br	81133028 <OSTaskResume+0x1c8>
81133014:	e0bff617 	ldw	r2,-40(fp)
81133018:	e0bffd15 	stw	r2,-12(fp)
8113301c:	e0bffd17 	ldw	r2,-12(fp)
81133020:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
81133024:	00801104 	movi	r2,68
}
81133028:	e037883a 	mov	sp,fp
8113302c:	dfc00117 	ldw	ra,4(sp)
81133030:	df000017 	ldw	fp,0(sp)
81133034:	dec00204 	addi	sp,sp,8
81133038:	f800283a 	ret

8113303c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8113303c:	defff304 	addi	sp,sp,-52
81133040:	de00012e 	bgeu	sp,et,81133048 <OSTaskStkChk+0xc>
81133044:	003b68fa 	trap	3
81133048:	df000c15 	stw	fp,48(sp)
8113304c:	df000c04 	addi	fp,sp,48
81133050:	2005883a 	mov	r2,r4
81133054:	e17fff15 	stw	r5,-4(fp)
81133058:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8113305c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
81133060:	e0bffe03 	ldbu	r2,-8(fp)
81133064:	10800a70 	cmpltui	r2,r2,41
81133068:	1000051e 	bne	r2,zero,81133080 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
8113306c:	e0bffe03 	ldbu	r2,-8(fp)
81133070:	10803fe0 	cmpeqi	r2,r2,255
81133074:	1000021e 	bne	r2,zero,81133080 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
81133078:	00800a84 	movi	r2,42
8113307c:	00005d06 	br	811331f4 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
81133080:	e0bfff17 	ldw	r2,-4(fp)
81133084:	1000021e 	bne	r2,zero,81133090 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
81133088:	00800244 	movi	r2,9
8113308c:	00005906 	br	811331f4 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
81133090:	e0bfff17 	ldw	r2,-4(fp)
81133094:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81133098:	e0bfff17 	ldw	r2,-4(fp)
8113309c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811330a0:	0005303a 	rdctl	r2,status
811330a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811330a8:	e0fffd17 	ldw	r3,-12(fp)
811330ac:	00bfff84 	movi	r2,-2
811330b0:	1884703a 	and	r2,r3,r2
811330b4:	1001703a 	wrctl	status,r2
  
  return context;
811330b8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
811330bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
811330c0:	e0bffe03 	ldbu	r2,-8(fp)
811330c4:	10803fd8 	cmpnei	r2,r2,255
811330c8:	1000031e 	bne	r2,zero,811330d8 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
811330cc:	d0a08c17 	ldw	r2,-32208(gp)
811330d0:	10800c83 	ldbu	r2,50(r2)
811330d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811330d8:	e0fffe03 	ldbu	r3,-8(fp)
811330dc:	00a04574 	movhi	r2,33045
811330e0:	109c6c04 	addi	r2,r2,29104
811330e4:	18c7883a 	add	r3,r3,r3
811330e8:	18c7883a 	add	r3,r3,r3
811330ec:	10c5883a 	add	r2,r2,r3
811330f0:	10800017 	ldw	r2,0(r2)
811330f4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
811330f8:	e0bff817 	ldw	r2,-32(fp)
811330fc:	1000061e 	bne	r2,zero,81133118 <OSTaskStkChk+0xdc>
81133100:	e0bff617 	ldw	r2,-40(fp)
81133104:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133108:	e0bff717 	ldw	r2,-36(fp)
8113310c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133110:	008010c4 	movi	r2,67
81133114:	00003706 	br	811331f4 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81133118:	e0bff817 	ldw	r2,-32(fp)
8113311c:	10800058 	cmpnei	r2,r2,1
81133120:	1000061e 	bne	r2,zero,8113313c <OSTaskStkChk+0x100>
81133124:	e0bff617 	ldw	r2,-40(fp)
81133128:	e0bff915 	stw	r2,-28(fp)
8113312c:	e0bff917 	ldw	r2,-28(fp)
81133130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133134:	008010c4 	movi	r2,67
81133138:	00002e06 	br	811331f4 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8113313c:	e0bff817 	ldw	r2,-32(fp)
81133140:	1080040b 	ldhu	r2,16(r2)
81133144:	10bfffcc 	andi	r2,r2,65535
81133148:	1080004c 	andi	r2,r2,1
8113314c:	1000061e 	bne	r2,zero,81133168 <OSTaskStkChk+0x12c>
81133150:	e0bff617 	ldw	r2,-40(fp)
81133154:	e0bffa15 	stw	r2,-24(fp)
81133158:	e0bffa17 	ldw	r2,-24(fp)
8113315c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
81133160:	00801144 	movi	r2,69
81133164:	00002306 	br	811331f4 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
81133168:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8113316c:	e0bff817 	ldw	r2,-32(fp)
81133170:	10800317 	ldw	r2,12(r2)
81133174:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
81133178:	e0bff817 	ldw	r2,-32(fp)
8113317c:	10800217 	ldw	r2,8(r2)
81133180:	e0bff415 	stw	r2,-48(fp)
81133184:	e0bff617 	ldw	r2,-40(fp)
81133188:	e0bffb15 	stw	r2,-20(fp)
8113318c:	e0bffb17 	ldw	r2,-20(fp)
81133190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81133194:	00000306 	br	811331a4 <OSTaskStkChk+0x168>
        nfree++;
81133198:	e0bff517 	ldw	r2,-44(fp)
8113319c:	10800044 	addi	r2,r2,1
811331a0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
811331a4:	e0bff417 	ldw	r2,-48(fp)
811331a8:	10c00104 	addi	r3,r2,4
811331ac:	e0fff415 	stw	r3,-48(fp)
811331b0:	10800017 	ldw	r2,0(r2)
811331b4:	103ff826 	beq	r2,zero,81133198 <__reset+0xfb113198>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
811331b8:	e0bff517 	ldw	r2,-44(fp)
811331bc:	1085883a 	add	r2,r2,r2
811331c0:	1085883a 	add	r2,r2,r2
811331c4:	1007883a 	mov	r3,r2
811331c8:	e0bfff17 	ldw	r2,-4(fp)
811331cc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
811331d0:	e0fffc17 	ldw	r3,-16(fp)
811331d4:	e0bff517 	ldw	r2,-44(fp)
811331d8:	1885c83a 	sub	r2,r3,r2
811331dc:	1085883a 	add	r2,r2,r2
811331e0:	1085883a 	add	r2,r2,r2
811331e4:	1007883a 	mov	r3,r2
811331e8:	e0bfff17 	ldw	r2,-4(fp)
811331ec:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
811331f0:	0005883a 	mov	r2,zero
}
811331f4:	e037883a 	mov	sp,fp
811331f8:	df000017 	ldw	fp,0(sp)
811331fc:	dec00104 	addi	sp,sp,4
81133200:	f800283a 	ret

81133204 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
81133204:	defff504 	addi	sp,sp,-44
81133208:	de00012e 	bgeu	sp,et,81133210 <OSTaskSuspend+0xc>
8113320c:	003b68fa 	trap	3
81133210:	dfc00a15 	stw	ra,40(sp)
81133214:	df000915 	stw	fp,36(sp)
81133218:	df000904 	addi	fp,sp,36
8113321c:	2005883a 	mov	r2,r4
81133220:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133224:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
81133228:	e0bfff03 	ldbu	r2,-4(fp)
8113322c:	10800a18 	cmpnei	r2,r2,40
81133230:	1000021e 	bne	r2,zero,8113323c <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
81133234:	008011c4 	movi	r2,71
81133238:	00006806 	br	811333dc <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8113323c:	e0bfff03 	ldbu	r2,-4(fp)
81133240:	10800a30 	cmpltui	r2,r2,40
81133244:	1000051e 	bne	r2,zero,8113325c <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
81133248:	e0bfff03 	ldbu	r2,-4(fp)
8113324c:	10803fe0 	cmpeqi	r2,r2,255
81133250:	1000021e 	bne	r2,zero,8113325c <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
81133254:	00800a84 	movi	r2,42
81133258:	00006006 	br	811333dc <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113325c:	0005303a 	rdctl	r2,status
81133260:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133264:	e0fffe17 	ldw	r3,-8(fp)
81133268:	00bfff84 	movi	r2,-2
8113326c:	1884703a 	and	r2,r3,r2
81133270:	1001703a 	wrctl	status,r2
  
  return context;
81133274:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
81133278:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8113327c:	e0bfff03 	ldbu	r2,-4(fp)
81133280:	10803fd8 	cmpnei	r2,r2,255
81133284:	1000061e 	bne	r2,zero,811332a0 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81133288:	d0a08c17 	ldw	r2,-32208(gp)
8113328c:	10800c83 	ldbu	r2,50(r2)
81133290:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
81133294:	00800044 	movi	r2,1
81133298:	e0bff705 	stb	r2,-36(fp)
8113329c:	00000906 	br	811332c4 <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
811332a0:	d0a08c17 	ldw	r2,-32208(gp)
811332a4:	10800c83 	ldbu	r2,50(r2)
811332a8:	10c03fcc 	andi	r3,r2,255
811332ac:	e0bfff03 	ldbu	r2,-4(fp)
811332b0:	1880031e 	bne	r3,r2,811332c0 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
811332b4:	00800044 	movi	r2,1
811332b8:	e0bff705 	stb	r2,-36(fp)
811332bc:	00000106 	br	811332c4 <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
811332c0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811332c4:	e0ffff03 	ldbu	r3,-4(fp)
811332c8:	00a04574 	movhi	r2,33045
811332cc:	109c6c04 	addi	r2,r2,29104
811332d0:	18c7883a 	add	r3,r3,r3
811332d4:	18c7883a 	add	r3,r3,r3
811332d8:	10c5883a 	add	r2,r2,r3
811332dc:	10800017 	ldw	r2,0(r2)
811332e0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
811332e4:	e0bffa17 	ldw	r2,-24(fp)
811332e8:	1000061e 	bne	r2,zero,81133304 <OSTaskSuspend+0x100>
811332ec:	e0bff817 	ldw	r2,-32(fp)
811332f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811332f4:	e0bff917 	ldw	r2,-28(fp)
811332f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
811332fc:	00801204 	movi	r2,72
81133300:	00003606 	br	811333dc <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
81133304:	e0bffa17 	ldw	r2,-24(fp)
81133308:	10800058 	cmpnei	r2,r2,1
8113330c:	1000061e 	bne	r2,zero,81133328 <OSTaskSuspend+0x124>
81133310:	e0bff817 	ldw	r2,-32(fp)
81133314:	e0bffb15 	stw	r2,-20(fp)
81133318:	e0bffb17 	ldw	r2,-20(fp)
8113331c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133320:	008010c4 	movi	r2,67
81133324:	00002d06 	br	811333dc <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
81133328:	e0bffa17 	ldw	r2,-24(fp)
8113332c:	10800d03 	ldbu	r2,52(r2)
81133330:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
81133334:	e0fffd03 	ldbu	r3,-12(fp)
81133338:	e13ffd03 	ldbu	r4,-12(fp)
8113333c:	d0a08844 	addi	r2,gp,-32223
81133340:	2085883a 	add	r2,r4,r2
81133344:	10800003 	ldbu	r2,0(r2)
81133348:	1009883a 	mov	r4,r2
8113334c:	e0bffa17 	ldw	r2,-24(fp)
81133350:	10800d43 	ldbu	r2,53(r2)
81133354:	0084303a 	nor	r2,zero,r2
81133358:	2084703a 	and	r2,r4,r2
8113335c:	1009883a 	mov	r4,r2
81133360:	d0a08844 	addi	r2,gp,-32223
81133364:	1885883a 	add	r2,r3,r2
81133368:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8113336c:	e0fffd03 	ldbu	r3,-12(fp)
81133370:	d0a08844 	addi	r2,gp,-32223
81133374:	1885883a 	add	r2,r3,r2
81133378:	10800003 	ldbu	r2,0(r2)
8113337c:	10803fcc 	andi	r2,r2,255
81133380:	1000071e 	bne	r2,zero,811333a0 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
81133384:	e0bffa17 	ldw	r2,-24(fp)
81133388:	10800d83 	ldbu	r2,54(r2)
8113338c:	0084303a 	nor	r2,zero,r2
81133390:	1007883a 	mov	r3,r2
81133394:	d0a08803 	ldbu	r2,-32224(gp)
81133398:	1884703a 	and	r2,r3,r2
8113339c:	d0a08805 	stb	r2,-32224(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
811333a0:	e0bffa17 	ldw	r2,-24(fp)
811333a4:	10800c03 	ldbu	r2,48(r2)
811333a8:	10800214 	ori	r2,r2,8
811333ac:	1007883a 	mov	r3,r2
811333b0:	e0bffa17 	ldw	r2,-24(fp)
811333b4:	10c00c05 	stb	r3,48(r2)
811333b8:	e0bff817 	ldw	r2,-32(fp)
811333bc:	e0bffc15 	stw	r2,-16(fp)
811333c0:	e0bffc17 	ldw	r2,-16(fp)
811333c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
811333c8:	e0bff703 	ldbu	r2,-36(fp)
811333cc:	10800058 	cmpnei	r2,r2,1
811333d0:	1000011e 	bne	r2,zero,811333d8 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
811333d4:	112c8580 	call	8112c858 <OS_Sched>
    }
    return (OS_ERR_NONE);
811333d8:	0005883a 	mov	r2,zero
}
811333dc:	e037883a 	mov	sp,fp
811333e0:	dfc00117 	ldw	ra,4(sp)
811333e4:	df000017 	ldw	fp,0(sp)
811333e8:	dec00204 	addi	sp,sp,8
811333ec:	f800283a 	ret

811333f0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
811333f0:	defff604 	addi	sp,sp,-40
811333f4:	de00012e 	bgeu	sp,et,811333fc <OSTaskQuery+0xc>
811333f8:	003b68fa 	trap	3
811333fc:	dfc00915 	stw	ra,36(sp)
81133400:	df000815 	stw	fp,32(sp)
81133404:	df000804 	addi	fp,sp,32
81133408:	2005883a 	mov	r2,r4
8113340c:	e17fff15 	stw	r5,-4(fp)
81133410:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133414:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81133418:	e0bffe03 	ldbu	r2,-8(fp)
8113341c:	10800a70 	cmpltui	r2,r2,41
81133420:	1000051e 	bne	r2,zero,81133438 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
81133424:	e0bffe03 	ldbu	r2,-8(fp)
81133428:	10803fe0 	cmpeqi	r2,r2,255
8113342c:	1000021e 	bne	r2,zero,81133438 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
81133430:	00800a84 	movi	r2,42
81133434:	00003406 	br	81133508 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
81133438:	e0bfff17 	ldw	r2,-4(fp)
8113343c:	1000021e 	bne	r2,zero,81133448 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
81133440:	00800244 	movi	r2,9
81133444:	00003006 	br	81133508 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133448:	0005303a 	rdctl	r2,status
8113344c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133450:	e0fffd17 	ldw	r3,-12(fp)
81133454:	00bfff84 	movi	r2,-2
81133458:	1884703a 	and	r2,r3,r2
8113345c:	1001703a 	wrctl	status,r2
  
  return context;
81133460:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81133464:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81133468:	e0bffe03 	ldbu	r2,-8(fp)
8113346c:	10803fd8 	cmpnei	r2,r2,255
81133470:	1000031e 	bne	r2,zero,81133480 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
81133474:	d0a08c17 	ldw	r2,-32208(gp)
81133478:	10800c83 	ldbu	r2,50(r2)
8113347c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81133480:	e0fffe03 	ldbu	r3,-8(fp)
81133484:	00a04574 	movhi	r2,33045
81133488:	109c6c04 	addi	r2,r2,29104
8113348c:	18c7883a 	add	r3,r3,r3
81133490:	18c7883a 	add	r3,r3,r3
81133494:	10c5883a 	add	r2,r2,r3
81133498:	10800017 	ldw	r2,0(r2)
8113349c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
811334a0:	e0bffa17 	ldw	r2,-24(fp)
811334a4:	1000061e 	bne	r2,zero,811334c0 <OSTaskQuery+0xd0>
811334a8:	e0bff817 	ldw	r2,-32(fp)
811334ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811334b0:	e0bff917 	ldw	r2,-28(fp)
811334b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
811334b8:	00800a44 	movi	r2,41
811334bc:	00001206 	br	81133508 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
811334c0:	e0bffa17 	ldw	r2,-24(fp)
811334c4:	10800058 	cmpnei	r2,r2,1
811334c8:	1000061e 	bne	r2,zero,811334e4 <OSTaskQuery+0xf4>
811334cc:	e0bff817 	ldw	r2,-32(fp)
811334d0:	e0bffb15 	stw	r2,-20(fp)
811334d4:	e0bffb17 	ldw	r2,-20(fp)
811334d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811334dc:	008010c4 	movi	r2,67
811334e0:	00000906 	br	81133508 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
811334e4:	01801b04 	movi	r6,108
811334e8:	e17ffa17 	ldw	r5,-24(fp)
811334ec:	e13fff17 	ldw	r4,-4(fp)
811334f0:	112c7e80 	call	8112c7e8 <OS_MemCopy>
811334f4:	e0bff817 	ldw	r2,-32(fp)
811334f8:	e0bffc15 	stw	r2,-16(fp)
811334fc:	e0bffc17 	ldw	r2,-16(fp)
81133500:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81133504:	0005883a 	mov	r2,zero
}
81133508:	e037883a 	mov	sp,fp
8113350c:	dfc00117 	ldw	ra,4(sp)
81133510:	df000017 	ldw	fp,0(sp)
81133514:	dec00204 	addi	sp,sp,8
81133518:	f800283a 	ret

8113351c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8113351c:	defffc04 	addi	sp,sp,-16
81133520:	de00012e 	bgeu	sp,et,81133528 <OS_TaskStkClr+0xc>
81133524:	003b68fa 	trap	3
81133528:	df000315 	stw	fp,12(sp)
8113352c:	df000304 	addi	fp,sp,12
81133530:	e13ffd15 	stw	r4,-12(fp)
81133534:	e17ffe15 	stw	r5,-8(fp)
81133538:	3005883a 	mov	r2,r6
8113353c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81133540:	e0bfff0b 	ldhu	r2,-4(fp)
81133544:	1080004c 	andi	r2,r2,1
81133548:	10000d26 	beq	r2,zero,81133580 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8113354c:	e0bfff0b 	ldhu	r2,-4(fp)
81133550:	1080008c 	andi	r2,r2,2
81133554:	10000a26 	beq	r2,zero,81133580 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81133558:	00000706 	br	81133578 <OS_TaskStkClr+0x5c>
                size--;
8113355c:	e0bffe17 	ldw	r2,-8(fp)
81133560:	10bfffc4 	addi	r2,r2,-1
81133564:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81133568:	e0bffd17 	ldw	r2,-12(fp)
8113356c:	10c00104 	addi	r3,r2,4
81133570:	e0fffd15 	stw	r3,-12(fp)
81133574:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81133578:	e0bffe17 	ldw	r2,-8(fp)
8113357c:	103ff71e 	bne	r2,zero,8113355c <__reset+0xfb11355c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
81133580:	0001883a 	nop
81133584:	e037883a 	mov	sp,fp
81133588:	df000017 	ldw	fp,0(sp)
8113358c:	dec00104 	addi	sp,sp,4
81133590:	f800283a 	ret

81133594 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81133594:	defff904 	addi	sp,sp,-28
81133598:	de00012e 	bgeu	sp,et,811335a0 <OSTimeDly+0xc>
8113359c:	003b68fa 	trap	3
811335a0:	dfc00615 	stw	ra,24(sp)
811335a4:	df000515 	stw	fp,20(sp)
811335a8:	df000504 	addi	fp,sp,20
811335ac:	2005883a 	mov	r2,r4
811335b0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811335b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811335b8:	d0a08b03 	ldbu	r2,-32212(gp)
811335bc:	10803fcc 	andi	r2,r2,255
811335c0:	1000311e 	bne	r2,zero,81133688 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
811335c4:	e0bfff0b 	ldhu	r2,-4(fp)
811335c8:	10003026 	beq	r2,zero,8113368c <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811335cc:	0005303a 	rdctl	r2,status
811335d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811335d4:	e0fffe17 	ldw	r3,-8(fp)
811335d8:	00bfff84 	movi	r2,-2
811335dc:	1884703a 	and	r2,r3,r2
811335e0:	1001703a 	wrctl	status,r2
  
  return context;
811335e4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
811335e8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
811335ec:	d0a08c17 	ldw	r2,-32208(gp)
811335f0:	10800d03 	ldbu	r2,52(r2)
811335f4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
811335f8:	e0fffd03 	ldbu	r3,-12(fp)
811335fc:	e13ffd03 	ldbu	r4,-12(fp)
81133600:	d0a08844 	addi	r2,gp,-32223
81133604:	2085883a 	add	r2,r4,r2
81133608:	10800003 	ldbu	r2,0(r2)
8113360c:	1009883a 	mov	r4,r2
81133610:	d0a08c17 	ldw	r2,-32208(gp)
81133614:	10800d43 	ldbu	r2,53(r2)
81133618:	0084303a 	nor	r2,zero,r2
8113361c:	2084703a 	and	r2,r4,r2
81133620:	1009883a 	mov	r4,r2
81133624:	d0a08844 	addi	r2,gp,-32223
81133628:	1885883a 	add	r2,r3,r2
8113362c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81133630:	e0fffd03 	ldbu	r3,-12(fp)
81133634:	d0a08844 	addi	r2,gp,-32223
81133638:	1885883a 	add	r2,r3,r2
8113363c:	10800003 	ldbu	r2,0(r2)
81133640:	10803fcc 	andi	r2,r2,255
81133644:	1000071e 	bne	r2,zero,81133664 <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81133648:	d0a08c17 	ldw	r2,-32208(gp)
8113364c:	10800d83 	ldbu	r2,54(r2)
81133650:	0084303a 	nor	r2,zero,r2
81133654:	1007883a 	mov	r3,r2
81133658:	d0a08803 	ldbu	r2,-32224(gp)
8113365c:	1884703a 	and	r2,r3,r2
81133660:	d0a08805 	stb	r2,-32224(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81133664:	d0a08c17 	ldw	r2,-32208(gp)
81133668:	e0ffff0b 	ldhu	r3,-4(fp)
8113366c:	10c00b8d 	sth	r3,46(r2)
81133670:	e0bffb17 	ldw	r2,-20(fp)
81133674:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133678:	e0bffc17 	ldw	r2,-16(fp)
8113367c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81133680:	112c8580 	call	8112c858 <OS_Sched>
81133684:	00000106 	br	8113368c <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81133688:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8113368c:	e037883a 	mov	sp,fp
81133690:	dfc00117 	ldw	ra,4(sp)
81133694:	df000017 	ldw	fp,0(sp)
81133698:	dec00204 	addi	sp,sp,8
8113369c:	f800283a 	ret

811336a0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
811336a0:	defff804 	addi	sp,sp,-32
811336a4:	de00012e 	bgeu	sp,et,811336ac <OSTimeDlyHMSM+0xc>
811336a8:	003b68fa 	trap	3
811336ac:	dfc00715 	stw	ra,28(sp)
811336b0:	df000615 	stw	fp,24(sp)
811336b4:	df000604 	addi	fp,sp,24
811336b8:	2015883a 	mov	r10,r4
811336bc:	2809883a 	mov	r4,r5
811336c0:	3007883a 	mov	r3,r6
811336c4:	3805883a 	mov	r2,r7
811336c8:	e2bffc05 	stb	r10,-16(fp)
811336cc:	e13ffd05 	stb	r4,-12(fp)
811336d0:	e0fffe05 	stb	r3,-8(fp)
811336d4:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811336d8:	d0a08b03 	ldbu	r2,-32212(gp)
811336dc:	10803fcc 	andi	r2,r2,255
811336e0:	10000226 	beq	r2,zero,811336ec <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
811336e4:	00801544 	movi	r2,85
811336e8:	00004106 	br	811337f0 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
811336ec:	e0bffc03 	ldbu	r2,-16(fp)
811336f0:	1000081e 	bne	r2,zero,81133714 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
811336f4:	e0bffd03 	ldbu	r2,-12(fp)
811336f8:	1000061e 	bne	r2,zero,81133714 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
811336fc:	e0bffe03 	ldbu	r2,-8(fp)
81133700:	1000041e 	bne	r2,zero,81133714 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
81133704:	e0bfff0b 	ldhu	r2,-4(fp)
81133708:	1000021e 	bne	r2,zero,81133714 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
8113370c:	00801504 	movi	r2,84
81133710:	00003706 	br	811337f0 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
81133714:	e0bffd03 	ldbu	r2,-12(fp)
81133718:	10800f30 	cmpltui	r2,r2,60
8113371c:	1000021e 	bne	r2,zero,81133728 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81133720:	00801444 	movi	r2,81
81133724:	00003206 	br	811337f0 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
81133728:	e0bffe03 	ldbu	r2,-8(fp)
8113372c:	10800f30 	cmpltui	r2,r2,60
81133730:	1000021e 	bne	r2,zero,8113373c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
81133734:	00801484 	movi	r2,82
81133738:	00002d06 	br	811337f0 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
8113373c:	e0bfff0b 	ldhu	r2,-4(fp)
81133740:	1080fa30 	cmpltui	r2,r2,1000
81133744:	1000021e 	bne	r2,zero,81133750 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
81133748:	008014c4 	movi	r2,83
8113374c:	00002806 	br	811337f0 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81133750:	e0bffc03 	ldbu	r2,-16(fp)
81133754:	10c38424 	muli	r3,r2,3600
81133758:	e0bffd03 	ldbu	r2,-12(fp)
8113375c:	10800f24 	muli	r2,r2,60
81133760:	1887883a 	add	r3,r3,r2
81133764:	e0bffe03 	ldbu	r2,-8(fp)
81133768:	1885883a 	add	r2,r3,r2
8113376c:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81133770:	e0bfff0b 	ldhu	r2,-4(fp)
81133774:	10c0fa24 	muli	r3,r2,1000
81133778:	008418b4 	movhi	r2,4194
8113377c:	109374c4 	addi	r2,r2,19923
81133780:	188a383a 	mulxuu	r5,r3,r2
81133784:	1885383a 	mul	r2,r3,r2
81133788:	1011883a 	mov	r8,r2
8113378c:	2813883a 	mov	r9,r5
81133790:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81133794:	2085883a 	add	r2,r4,r2
81133798:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8113379c:	e0bffb17 	ldw	r2,-20(fp)
811337a0:	1004d43a 	srli	r2,r2,16
811337a4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
811337a8:	e0bffb17 	ldw	r2,-20(fp)
811337ac:	10bfffcc 	andi	r2,r2,65535
811337b0:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
811337b4:	e0bffb17 	ldw	r2,-20(fp)
811337b8:	10bfffcc 	andi	r2,r2,65535
811337bc:	1009883a 	mov	r4,r2
811337c0:	11335940 	call	81133594 <OSTimeDly>
    while (loops > 0) {
811337c4:	00000706 	br	811337e4 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
811337c8:	01200014 	movui	r4,32768
811337cc:	11335940 	call	81133594 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
811337d0:	01200014 	movui	r4,32768
811337d4:	11335940 	call	81133594 <OSTimeDly>
        loops--;
811337d8:	e0bffa0b 	ldhu	r2,-24(fp)
811337dc:	10bfffc4 	addi	r2,r2,-1
811337e0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
811337e4:	e0bffa0b 	ldhu	r2,-24(fp)
811337e8:	103ff71e 	bne	r2,zero,811337c8 <__reset+0xfb1137c8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
811337ec:	0005883a 	mov	r2,zero
}
811337f0:	e037883a 	mov	sp,fp
811337f4:	dfc00117 	ldw	ra,4(sp)
811337f8:	df000017 	ldw	fp,0(sp)
811337fc:	dec00204 	addi	sp,sp,8
81133800:	f800283a 	ret

81133804 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81133804:	defff504 	addi	sp,sp,-44
81133808:	de00012e 	bgeu	sp,et,81133810 <OSTimeDlyResume+0xc>
8113380c:	003b68fa 	trap	3
81133810:	dfc00a15 	stw	ra,40(sp)
81133814:	df000915 	stw	fp,36(sp)
81133818:	df000904 	addi	fp,sp,36
8113381c:	2005883a 	mov	r2,r4
81133820:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81133824:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81133828:	e0bfff03 	ldbu	r2,-4(fp)
8113382c:	10800a30 	cmpltui	r2,r2,40
81133830:	1000021e 	bne	r2,zero,8113383c <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81133834:	00800a84 	movi	r2,42
81133838:	00006406 	br	811339cc <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113383c:	0005303a 	rdctl	r2,status
81133840:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133844:	e0fffe17 	ldw	r3,-8(fp)
81133848:	00bfff84 	movi	r2,-2
8113384c:	1884703a 	and	r2,r3,r2
81133850:	1001703a 	wrctl	status,r2
  
  return context;
81133854:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81133858:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8113385c:	e0ffff03 	ldbu	r3,-4(fp)
81133860:	00a04574 	movhi	r2,33045
81133864:	109c6c04 	addi	r2,r2,29104
81133868:	18c7883a 	add	r3,r3,r3
8113386c:	18c7883a 	add	r3,r3,r3
81133870:	10c5883a 	add	r2,r2,r3
81133874:	10800017 	ldw	r2,0(r2)
81133878:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8113387c:	e0bff917 	ldw	r2,-28(fp)
81133880:	1000061e 	bne	r2,zero,8113389c <OSTimeDlyResume+0x98>
81133884:	e0bff717 	ldw	r2,-36(fp)
81133888:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113388c:	e0bff817 	ldw	r2,-32(fp)
81133890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81133894:	008010c4 	movi	r2,67
81133898:	00004c06 	br	811339cc <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8113389c:	e0bff917 	ldw	r2,-28(fp)
811338a0:	10800058 	cmpnei	r2,r2,1
811338a4:	1000061e 	bne	r2,zero,811338c0 <OSTimeDlyResume+0xbc>
811338a8:	e0bff717 	ldw	r2,-36(fp)
811338ac:	e0bffa15 	stw	r2,-24(fp)
811338b0:	e0bffa17 	ldw	r2,-24(fp)
811338b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
811338b8:	008010c4 	movi	r2,67
811338bc:	00004306 	br	811339cc <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
811338c0:	e0bff917 	ldw	r2,-28(fp)
811338c4:	10800b8b 	ldhu	r2,46(r2)
811338c8:	10bfffcc 	andi	r2,r2,65535
811338cc:	1000061e 	bne	r2,zero,811338e8 <OSTimeDlyResume+0xe4>
811338d0:	e0bff717 	ldw	r2,-36(fp)
811338d4:	e0bffb15 	stw	r2,-20(fp)
811338d8:	e0bffb17 	ldw	r2,-20(fp)
811338dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
811338e0:	00801404 	movi	r2,80
811338e4:	00003906 	br	811339cc <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
811338e8:	e0bff917 	ldw	r2,-28(fp)
811338ec:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
811338f0:	e0bff917 	ldw	r2,-28(fp)
811338f4:	10800c03 	ldbu	r2,48(r2)
811338f8:	10803fcc 	andi	r2,r2,255
811338fc:	10800dcc 	andi	r2,r2,55
81133900:	10000b26 	beq	r2,zero,81133930 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81133904:	e0bff917 	ldw	r2,-28(fp)
81133908:	10c00c03 	ldbu	r3,48(r2)
8113390c:	00bff204 	movi	r2,-56
81133910:	1884703a 	and	r2,r3,r2
81133914:	1007883a 	mov	r3,r2
81133918:	e0bff917 	ldw	r2,-28(fp)
8113391c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
81133920:	e0bff917 	ldw	r2,-28(fp)
81133924:	00c00044 	movi	r3,1
81133928:	10c00c45 	stb	r3,49(r2)
8113392c:	00000206 	br	81133938 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
81133930:	e0bff917 	ldw	r2,-28(fp)
81133934:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
81133938:	e0bff917 	ldw	r2,-28(fp)
8113393c:	10800c03 	ldbu	r2,48(r2)
81133940:	10803fcc 	andi	r2,r2,255
81133944:	1080020c 	andi	r2,r2,8
81133948:	10001b1e 	bne	r2,zero,811339b8 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8113394c:	e0bff917 	ldw	r2,-28(fp)
81133950:	10c00d83 	ldbu	r3,54(r2)
81133954:	d0a08803 	ldbu	r2,-32224(gp)
81133958:	1884b03a 	or	r2,r3,r2
8113395c:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81133960:	e0bff917 	ldw	r2,-28(fp)
81133964:	10800d03 	ldbu	r2,52(r2)
81133968:	10c03fcc 	andi	r3,r2,255
8113396c:	e0bff917 	ldw	r2,-28(fp)
81133970:	10800d03 	ldbu	r2,52(r2)
81133974:	11003fcc 	andi	r4,r2,255
81133978:	d0a08844 	addi	r2,gp,-32223
8113397c:	2085883a 	add	r2,r4,r2
81133980:	11000003 	ldbu	r4,0(r2)
81133984:	e0bff917 	ldw	r2,-28(fp)
81133988:	10800d43 	ldbu	r2,53(r2)
8113398c:	2084b03a 	or	r2,r4,r2
81133990:	1009883a 	mov	r4,r2
81133994:	d0a08844 	addi	r2,gp,-32223
81133998:	1885883a 	add	r2,r3,r2
8113399c:	11000005 	stb	r4,0(r2)
811339a0:	e0bff717 	ldw	r2,-36(fp)
811339a4:	e0bffc15 	stw	r2,-16(fp)
811339a8:	e0bffc17 	ldw	r2,-16(fp)
811339ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
811339b0:	112c8580 	call	8112c858 <OS_Sched>
811339b4:	00000406 	br	811339c8 <OSTimeDlyResume+0x1c4>
811339b8:	e0bff717 	ldw	r2,-36(fp)
811339bc:	e0bffd15 	stw	r2,-12(fp)
811339c0:	e0bffd17 	ldw	r2,-12(fp)
811339c4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
811339c8:	0005883a 	mov	r2,zero
}
811339cc:	e037883a 	mov	sp,fp
811339d0:	dfc00117 	ldw	ra,4(sp)
811339d4:	df000017 	ldw	fp,0(sp)
811339d8:	dec00204 	addi	sp,sp,8
811339dc:	f800283a 	ret

811339e0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
811339e0:	defffb04 	addi	sp,sp,-20
811339e4:	de00012e 	bgeu	sp,et,811339ec <OSTimeGet+0xc>
811339e8:	003b68fa 	trap	3
811339ec:	df000415 	stw	fp,16(sp)
811339f0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811339f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811339f8:	0005303a 	rdctl	r2,status
811339fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133a00:	e0fffe17 	ldw	r3,-8(fp)
81133a04:	00bfff84 	movi	r2,-2
81133a08:	1884703a 	and	r2,r3,r2
81133a0c:	1001703a 	wrctl	status,r2
  
  return context;
81133a10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81133a14:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81133a18:	d0a08e17 	ldw	r2,-32200(gp)
81133a1c:	e0bffd15 	stw	r2,-12(fp)
81133a20:	e0bffc17 	ldw	r2,-16(fp)
81133a24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133a28:	e0bfff17 	ldw	r2,-4(fp)
81133a2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
81133a30:	e0bffd17 	ldw	r2,-12(fp)
}
81133a34:	e037883a 	mov	sp,fp
81133a38:	df000017 	ldw	fp,0(sp)
81133a3c:	dec00104 	addi	sp,sp,4
81133a40:	f800283a 	ret

81133a44 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
81133a44:	defffb04 	addi	sp,sp,-20
81133a48:	de00012e 	bgeu	sp,et,81133a50 <OSTimeSet+0xc>
81133a4c:	003b68fa 	trap	3
81133a50:	df000415 	stw	fp,16(sp)
81133a54:	df000404 	addi	fp,sp,16
81133a58:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133a5c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133a60:	0005303a 	rdctl	r2,status
81133a64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133a68:	e0fffd17 	ldw	r3,-12(fp)
81133a6c:	00bfff84 	movi	r2,-2
81133a70:	1884703a 	and	r2,r3,r2
81133a74:	1001703a 	wrctl	status,r2
  
  return context;
81133a78:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
81133a7c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
81133a80:	e0bfff17 	ldw	r2,-4(fp)
81133a84:	d0a08e15 	stw	r2,-32200(gp)
81133a88:	e0bffc17 	ldw	r2,-16(fp)
81133a8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133a90:	e0bffe17 	ldw	r2,-8(fp)
81133a94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81133a98:	0001883a 	nop
81133a9c:	e037883a 	mov	sp,fp
81133aa0:	df000017 	ldw	fp,0(sp)
81133aa4:	dec00104 	addi	sp,sp,4
81133aa8:	f800283a 	ret

81133aac <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
81133aac:	defff804 	addi	sp,sp,-32
81133ab0:	de00012e 	bgeu	sp,et,81133ab8 <OSTmrCreate+0xc>
81133ab4:	003b68fa 	trap	3
81133ab8:	dfc00715 	stw	ra,28(sp)
81133abc:	df000615 	stw	fp,24(sp)
81133ac0:	df000604 	addi	fp,sp,24
81133ac4:	e13ffc15 	stw	r4,-16(fp)
81133ac8:	e17ffd15 	stw	r5,-12(fp)
81133acc:	3005883a 	mov	r2,r6
81133ad0:	e1ffff15 	stw	r7,-4(fp)
81133ad4:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81133ad8:	e0800417 	ldw	r2,16(fp)
81133adc:	1000021e 	bne	r2,zero,81133ae8 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
81133ae0:	0005883a 	mov	r2,zero
81133ae4:	00005d06 	br	81133c5c <OSTmrCreate+0x1b0>
    }
    switch (opt) {
81133ae8:	e0bffe03 	ldbu	r2,-8(fp)
81133aec:	10c00060 	cmpeqi	r3,r2,1
81133af0:	1800091e 	bne	r3,zero,81133b18 <OSTmrCreate+0x6c>
81133af4:	108000a0 	cmpeqi	r2,r2,2
81133af8:	10000e26 	beq	r2,zero,81133b34 <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
81133afc:	e0bffd17 	ldw	r2,-12(fp)
81133b00:	1000111e 	bne	r2,zero,81133b48 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
81133b04:	e0800417 	ldw	r2,16(fp)
81133b08:	00ffe0c4 	movi	r3,-125
81133b0c:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81133b10:	0005883a 	mov	r2,zero
81133b14:	00005106 	br	81133c5c <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
81133b18:	e0bffc17 	ldw	r2,-16(fp)
81133b1c:	10000c1e 	bne	r2,zero,81133b50 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
81133b20:	e0800417 	ldw	r2,16(fp)
81133b24:	00ffe084 	movi	r3,-126
81133b28:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81133b2c:	0005883a 	mov	r2,zero
81133b30:	00004a06 	br	81133c5c <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
81133b34:	e0800417 	ldw	r2,16(fp)
81133b38:	00ffe104 	movi	r3,-124
81133b3c:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
81133b40:	0005883a 	mov	r2,zero
81133b44:	00004506 	br	81133c5c <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
81133b48:	0001883a 	nop
81133b4c:	00000106 	br	81133b54 <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
81133b50:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81133b54:	d0a08b03 	ldbu	r2,-32212(gp)
81133b58:	10803fcc 	andi	r2,r2,255
81133b5c:	10000526 	beq	r2,zero,81133b74 <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
81133b60:	e0800417 	ldw	r2,16(fp)
81133b64:	00ffe2c4 	movi	r3,-117
81133b68:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81133b6c:	0005883a 	mov	r2,zero
81133b70:	00003a06 	br	81133c5c <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
81133b74:	1134a640 	call	81134a64 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
81133b78:	11345040 	call	81134504 <OSTmr_Alloc>
81133b7c:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
81133b80:	e0bffa17 	ldw	r2,-24(fp)
81133b84:	1000061e 	bne	r2,zero,81133ba0 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
81133b88:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
81133b8c:	e0800417 	ldw	r2,16(fp)
81133b90:	00ffe184 	movi	r3,-122
81133b94:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81133b98:	0005883a 	mov	r2,zero
81133b9c:	00002f06 	br	81133c5c <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
81133ba0:	e0bffa17 	ldw	r2,-24(fp)
81133ba4:	00c00044 	movi	r3,1
81133ba8:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
81133bac:	e0bffa17 	ldw	r2,-24(fp)
81133bb0:	e0fffc17 	ldw	r3,-16(fp)
81133bb4:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81133bb8:	e0bffa17 	ldw	r2,-24(fp)
81133bbc:	e0fffd17 	ldw	r3,-12(fp)
81133bc0:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
81133bc4:	e0bffa17 	ldw	r2,-24(fp)
81133bc8:	e0fffe03 	ldbu	r3,-8(fp)
81133bcc:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
81133bd0:	e0bffa17 	ldw	r2,-24(fp)
81133bd4:	e0ffff17 	ldw	r3,-4(fp)
81133bd8:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
81133bdc:	e0bffa17 	ldw	r2,-24(fp)
81133be0:	e0c00217 	ldw	r3,8(fp)
81133be4:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
81133be8:	e0800317 	ldw	r2,12(fp)
81133bec:	10001726 	beq	r2,zero,81133c4c <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
81133bf0:	e1000317 	ldw	r4,12(fp)
81133bf4:	112ca280 	call	8112ca28 <OS_StrLen>
81133bf8:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
81133bfc:	e0bffb03 	ldbu	r2,-20(fp)
81133c00:	10800428 	cmpgeui	r2,r2,16
81133c04:	1000061e 	bne	r2,zero,81133c20 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
81133c08:	e0bffa17 	ldw	r2,-24(fp)
81133c0c:	10800804 	addi	r2,r2,32
81133c10:	e1400317 	ldw	r5,12(fp)
81133c14:	1009883a 	mov	r4,r2
81133c18:	112c9ac0 	call	8112c9ac <OS_StrCopy>
81133c1c:	00000b06 	br	81133c4c <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
81133c20:	e0bffa17 	ldw	r2,-24(fp)
81133c24:	00c008c4 	movi	r3,35
81133c28:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
81133c2c:	e0bffa17 	ldw	r2,-24(fp)
81133c30:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
81133c34:	e0800417 	ldw	r2,16(fp)
81133c38:	00ffe304 	movi	r3,-116
81133c3c:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
81133c40:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
            return (ptmr);
81133c44:	e0bffa17 	ldw	r2,-24(fp)
81133c48:	00000406 	br	81133c5c <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
81133c4c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
81133c50:	e0800417 	ldw	r2,16(fp)
81133c54:	10000005 	stb	zero,0(r2)
    return (ptmr);
81133c58:	e0bffa17 	ldw	r2,-24(fp)
}
81133c5c:	e037883a 	mov	sp,fp
81133c60:	dfc00117 	ldw	ra,4(sp)
81133c64:	df000017 	ldw	fp,0(sp)
81133c68:	dec00204 	addi	sp,sp,8
81133c6c:	f800283a 	ret

81133c70 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
81133c70:	defffc04 	addi	sp,sp,-16
81133c74:	de00012e 	bgeu	sp,et,81133c7c <OSTmrDel+0xc>
81133c78:	003b68fa 	trap	3
81133c7c:	dfc00315 	stw	ra,12(sp)
81133c80:	df000215 	stw	fp,8(sp)
81133c84:	df000204 	addi	fp,sp,8
81133c88:	e13ffe15 	stw	r4,-8(fp)
81133c8c:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81133c90:	e0bfff17 	ldw	r2,-4(fp)
81133c94:	1000021e 	bne	r2,zero,81133ca0 <OSTmrDel+0x30>
        return (OS_FALSE);
81133c98:	0005883a 	mov	r2,zero
81133c9c:	00003f06 	br	81133d9c <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81133ca0:	e0bffe17 	ldw	r2,-8(fp)
81133ca4:	1000051e 	bne	r2,zero,81133cbc <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81133ca8:	e0bfff17 	ldw	r2,-4(fp)
81133cac:	00ffe284 	movi	r3,-118
81133cb0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81133cb4:	0005883a 	mov	r2,zero
81133cb8:	00003806 	br	81133d9c <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81133cbc:	e0bffe17 	ldw	r2,-8(fp)
81133cc0:	10800003 	ldbu	r2,0(r2)
81133cc4:	10803fcc 	andi	r2,r2,255
81133cc8:	10801920 	cmpeqi	r2,r2,100
81133ccc:	1000051e 	bne	r2,zero,81133ce4 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81133cd0:	e0bfff17 	ldw	r2,-4(fp)
81133cd4:	00ffe244 	movi	r3,-119
81133cd8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81133cdc:	0005883a 	mov	r2,zero
81133ce0:	00002e06 	br	81133d9c <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81133ce4:	d0a08b03 	ldbu	r2,-32212(gp)
81133ce8:	10803fcc 	andi	r2,r2,255
81133cec:	10000526 	beq	r2,zero,81133d04 <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
81133cf0:	e0bfff17 	ldw	r2,-4(fp)
81133cf4:	00ffe2c4 	movi	r3,-117
81133cf8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81133cfc:	0005883a 	mov	r2,zero
81133d00:	00002606 	br	81133d9c <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
81133d04:	1134a640 	call	81134a64 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81133d08:	e0bffe17 	ldw	r2,-8(fp)
81133d0c:	10800c43 	ldbu	r2,49(r2)
81133d10:	10803fcc 	andi	r2,r2,255
81133d14:	10c000c8 	cmpgei	r3,r2,3
81133d18:	1800031e 	bne	r3,zero,81133d28 <OSTmrDel+0xb8>
81133d1c:	00800d16 	blt	zero,r2,81133d54 <OSTmrDel+0xe4>
81133d20:	10001326 	beq	r2,zero,81133d70 <OSTmrDel+0x100>
81133d24:	00001806 	br	81133d88 <OSTmrDel+0x118>
81133d28:	108000e0 	cmpeqi	r2,r2,3
81133d2c:	10001626 	beq	r2,zero,81133d88 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
81133d30:	e13ffe17 	ldw	r4,-8(fp)
81133d34:	11349680 	call	81134968 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
81133d38:	e13ffe17 	ldw	r4,-8(fp)
81133d3c:	11345780 	call	81134578 <OSTmr_Free>
             OSTmr_Unlock();
81133d40:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81133d44:	e0bfff17 	ldw	r2,-4(fp)
81133d48:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81133d4c:	00800044 	movi	r2,1
81133d50:	00001206 	br	81133d9c <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
81133d54:	e13ffe17 	ldw	r4,-8(fp)
81133d58:	11345780 	call	81134578 <OSTmr_Free>
             OSTmr_Unlock();
81133d5c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81133d60:	e0bfff17 	ldw	r2,-4(fp)
81133d64:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81133d68:	00800044 	movi	r2,1
81133d6c:	00000b06 	br	81133d9c <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
81133d70:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81133d74:	e0bfff17 	ldw	r2,-4(fp)
81133d78:	00ffe1c4 	movi	r3,-121
81133d7c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81133d80:	0005883a 	mov	r2,zero
81133d84:	00000506 	br	81133d9c <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
81133d88:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81133d8c:	e0bfff17 	ldw	r2,-4(fp)
81133d90:	00ffe344 	movi	r3,-115
81133d94:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81133d98:	0005883a 	mov	r2,zero
    }
}
81133d9c:	e037883a 	mov	sp,fp
81133da0:	dfc00117 	ldw	ra,4(sp)
81133da4:	df000017 	ldw	fp,0(sp)
81133da8:	dec00204 	addi	sp,sp,8
81133dac:	f800283a 	ret

81133db0 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
81133db0:	defffa04 	addi	sp,sp,-24
81133db4:	de00012e 	bgeu	sp,et,81133dbc <OSTmrNameGet+0xc>
81133db8:	003b68fa 	trap	3
81133dbc:	dfc00515 	stw	ra,20(sp)
81133dc0:	df000415 	stw	fp,16(sp)
81133dc4:	df000404 	addi	fp,sp,16
81133dc8:	e13ffd15 	stw	r4,-12(fp)
81133dcc:	e17ffe15 	stw	r5,-8(fp)
81133dd0:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81133dd4:	e0bfff17 	ldw	r2,-4(fp)
81133dd8:	1000021e 	bne	r2,zero,81133de4 <OSTmrNameGet+0x34>
        return (0);
81133ddc:	0005883a 	mov	r2,zero
81133de0:	00003e06 	br	81133edc <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
81133de4:	e0bffe17 	ldw	r2,-8(fp)
81133de8:	1000051e 	bne	r2,zero,81133e00 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
81133dec:	e0bfff17 	ldw	r2,-4(fp)
81133df0:	00ffe204 	movi	r3,-120
81133df4:	10c00005 	stb	r3,0(r2)
        return (0);
81133df8:	0005883a 	mov	r2,zero
81133dfc:	00003706 	br	81133edc <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81133e00:	e0bffd17 	ldw	r2,-12(fp)
81133e04:	1000051e 	bne	r2,zero,81133e1c <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
81133e08:	e0bfff17 	ldw	r2,-4(fp)
81133e0c:	00ffe284 	movi	r3,-118
81133e10:	10c00005 	stb	r3,0(r2)
        return (0);
81133e14:	0005883a 	mov	r2,zero
81133e18:	00003006 	br	81133edc <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81133e1c:	e0bffd17 	ldw	r2,-12(fp)
81133e20:	10800003 	ldbu	r2,0(r2)
81133e24:	10803fcc 	andi	r2,r2,255
81133e28:	10801920 	cmpeqi	r2,r2,100
81133e2c:	1000051e 	bne	r2,zero,81133e44 <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81133e30:	e0bfff17 	ldw	r2,-4(fp)
81133e34:	00ffe244 	movi	r3,-119
81133e38:	10c00005 	stb	r3,0(r2)
        return (0);
81133e3c:	0005883a 	mov	r2,zero
81133e40:	00002606 	br	81133edc <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81133e44:	d0a08b03 	ldbu	r2,-32212(gp)
81133e48:	10803fcc 	andi	r2,r2,255
81133e4c:	10000526 	beq	r2,zero,81133e64 <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
81133e50:	e0bfff17 	ldw	r2,-4(fp)
81133e54:	00c00444 	movi	r3,17
81133e58:	10c00005 	stb	r3,0(r2)
        return (0);
81133e5c:	0005883a 	mov	r2,zero
81133e60:	00001e06 	br	81133edc <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
81133e64:	1134a640 	call	81134a64 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81133e68:	e0bffd17 	ldw	r2,-12(fp)
81133e6c:	10800c43 	ldbu	r2,49(r2)
81133e70:	10803fcc 	andi	r2,r2,255
81133e74:	10000e26 	beq	r2,zero,81133eb0 <OSTmrNameGet+0x100>
81133e78:	10001316 	blt	r2,zero,81133ec8 <OSTmrNameGet+0x118>
81133e7c:	10800108 	cmpgei	r2,r2,4
81133e80:	1000111e 	bne	r2,zero,81133ec8 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
81133e84:	e0bffd17 	ldw	r2,-12(fp)
81133e88:	10800804 	addi	r2,r2,32
81133e8c:	100b883a 	mov	r5,r2
81133e90:	e13ffe17 	ldw	r4,-8(fp)
81133e94:	112c9ac0 	call	8112c9ac <OS_StrCopy>
81133e98:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
81133e9c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81133ea0:	e0bfff17 	ldw	r2,-4(fp)
81133ea4:	10000005 	stb	zero,0(r2)
             return (len);
81133ea8:	e0bffc03 	ldbu	r2,-16(fp)
81133eac:	00000b06 	br	81133edc <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
81133eb0:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81133eb4:	e0bfff17 	ldw	r2,-4(fp)
81133eb8:	00ffe1c4 	movi	r3,-121
81133ebc:	10c00005 	stb	r3,0(r2)
             return (0);
81133ec0:	0005883a 	mov	r2,zero
81133ec4:	00000506 	br	81133edc <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81133ec8:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81133ecc:	e0bfff17 	ldw	r2,-4(fp)
81133ed0:	00ffe344 	movi	r3,-115
81133ed4:	10c00005 	stb	r3,0(r2)
             return (0);
81133ed8:	0005883a 	mov	r2,zero
    }
}
81133edc:	e037883a 	mov	sp,fp
81133ee0:	dfc00117 	ldw	ra,4(sp)
81133ee4:	df000017 	ldw	fp,0(sp)
81133ee8:	dec00204 	addi	sp,sp,8
81133eec:	f800283a 	ret

81133ef0 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
81133ef0:	defffb04 	addi	sp,sp,-20
81133ef4:	de00012e 	bgeu	sp,et,81133efc <OSTmrRemainGet+0xc>
81133ef8:	003b68fa 	trap	3
81133efc:	dfc00415 	stw	ra,16(sp)
81133f00:	df000315 	stw	fp,12(sp)
81133f04:	df000304 	addi	fp,sp,12
81133f08:	e13ffe15 	stw	r4,-8(fp)
81133f0c:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81133f10:	e0bfff17 	ldw	r2,-4(fp)
81133f14:	1000021e 	bne	r2,zero,81133f20 <OSTmrRemainGet+0x30>
        return (0);
81133f18:	0005883a 	mov	r2,zero
81133f1c:	00005d06 	br	81134094 <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
81133f20:	e0bffe17 	ldw	r2,-8(fp)
81133f24:	1000051e 	bne	r2,zero,81133f3c <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81133f28:	e0bfff17 	ldw	r2,-4(fp)
81133f2c:	00ffe284 	movi	r3,-118
81133f30:	10c00005 	stb	r3,0(r2)
        return (0);
81133f34:	0005883a 	mov	r2,zero
81133f38:	00005606 	br	81134094 <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81133f3c:	e0bffe17 	ldw	r2,-8(fp)
81133f40:	10800003 	ldbu	r2,0(r2)
81133f44:	10803fcc 	andi	r2,r2,255
81133f48:	10801920 	cmpeqi	r2,r2,100
81133f4c:	1000051e 	bne	r2,zero,81133f64 <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81133f50:	e0bfff17 	ldw	r2,-4(fp)
81133f54:	00ffe244 	movi	r3,-119
81133f58:	10c00005 	stb	r3,0(r2)
        return (0);
81133f5c:	0005883a 	mov	r2,zero
81133f60:	00004c06 	br	81134094 <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81133f64:	d0a08b03 	ldbu	r2,-32212(gp)
81133f68:	10803fcc 	andi	r2,r2,255
81133f6c:	10000526 	beq	r2,zero,81133f84 <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81133f70:	e0bfff17 	ldw	r2,-4(fp)
81133f74:	00ffe2c4 	movi	r3,-117
81133f78:	10c00005 	stb	r3,0(r2)
        return (0);
81133f7c:	0005883a 	mov	r2,zero
81133f80:	00004406 	br	81134094 <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
81133f84:	1134a640 	call	81134a64 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81133f88:	e0bffe17 	ldw	r2,-8(fp)
81133f8c:	10800c43 	ldbu	r2,49(r2)
81133f90:	10803fcc 	andi	r2,r2,255
81133f94:	10c00060 	cmpeqi	r3,r2,1
81133f98:	1800121e 	bne	r3,zero,81133fe4 <OSTmrRemainGet+0xf4>
81133f9c:	10c00088 	cmpgei	r3,r2,2
81133fa0:	1800021e 	bne	r3,zero,81133fac <OSTmrRemainGet+0xbc>
81133fa4:	10003026 	beq	r2,zero,81134068 <OSTmrRemainGet+0x178>
81133fa8:	00003506 	br	81134080 <OSTmrRemainGet+0x190>
81133fac:	10c000a0 	cmpeqi	r3,r2,2
81133fb0:	1800281e 	bne	r3,zero,81134054 <OSTmrRemainGet+0x164>
81133fb4:	108000e0 	cmpeqi	r2,r2,3
81133fb8:	10003126 	beq	r2,zero,81134080 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
81133fbc:	e0bffe17 	ldw	r2,-8(fp)
81133fc0:	10c00517 	ldw	r3,20(r2)
81133fc4:	d0a08d17 	ldw	r2,-32204(gp)
81133fc8:	1885c83a 	sub	r2,r3,r2
81133fcc:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
81133fd0:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
81133fd4:	e0bfff17 	ldw	r2,-4(fp)
81133fd8:	10000005 	stb	zero,0(r2)
             return (remain);
81133fdc:	e0bffd17 	ldw	r2,-12(fp)
81133fe0:	00002c06 	br	81134094 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
81133fe4:	e0bffe17 	ldw	r2,-8(fp)
81133fe8:	10800c03 	ldbu	r2,48(r2)
81133fec:	10803fcc 	andi	r2,r2,255
81133ff0:	108000a0 	cmpeqi	r2,r2,2
81133ff4:	10000e26 	beq	r2,zero,81134030 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
81133ff8:	e0bffe17 	ldw	r2,-8(fp)
81133ffc:	10800617 	ldw	r2,24(r2)
81134000:	1000041e 	bne	r2,zero,81134014 <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
81134004:	e0bffe17 	ldw	r2,-8(fp)
81134008:	10800717 	ldw	r2,28(r2)
8113400c:	e0bffd15 	stw	r2,-12(fp)
81134010:	00000306 	br	81134020 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
81134014:	e0bffe17 	ldw	r2,-8(fp)
81134018:	10800617 	ldw	r2,24(r2)
8113401c:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
81134020:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81134024:	e0bfff17 	ldw	r2,-4(fp)
81134028:	10000005 	stb	zero,0(r2)
                      break;
8113402c:	00000706 	br	8113404c <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
81134030:	e0bffe17 	ldw	r2,-8(fp)
81134034:	10800617 	ldw	r2,24(r2)
81134038:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
8113403c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81134040:	e0bfff17 	ldw	r2,-4(fp)
81134044:	10000005 	stb	zero,0(r2)
                      break;
81134048:	0001883a 	nop
             }
             return (remain);
8113404c:	e0bffd17 	ldw	r2,-12(fp)
81134050:	00001006 	br	81134094 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
81134054:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81134058:	e0bfff17 	ldw	r2,-4(fp)
8113405c:	10000005 	stb	zero,0(r2)
             return (0);
81134060:	0005883a 	mov	r2,zero
81134064:	00000b06 	br	81134094 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
81134068:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8113406c:	e0bfff17 	ldw	r2,-4(fp)
81134070:	00ffe1c4 	movi	r3,-121
81134074:	10c00005 	stb	r3,0(r2)
             return (0);
81134078:	0005883a 	mov	r2,zero
8113407c:	00000506 	br	81134094 <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
81134080:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81134084:	e0bfff17 	ldw	r2,-4(fp)
81134088:	00ffe344 	movi	r3,-115
8113408c:	10c00005 	stb	r3,0(r2)
             return (0);
81134090:	0005883a 	mov	r2,zero
    }
}
81134094:	e037883a 	mov	sp,fp
81134098:	dfc00117 	ldw	ra,4(sp)
8113409c:	df000017 	ldw	fp,0(sp)
811340a0:	dec00204 	addi	sp,sp,8
811340a4:	f800283a 	ret

811340a8 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
811340a8:	defffb04 	addi	sp,sp,-20
811340ac:	de00012e 	bgeu	sp,et,811340b4 <OSTmrStateGet+0xc>
811340b0:	003b68fa 	trap	3
811340b4:	dfc00415 	stw	ra,16(sp)
811340b8:	df000315 	stw	fp,12(sp)
811340bc:	df000304 	addi	fp,sp,12
811340c0:	e13ffe15 	stw	r4,-8(fp)
811340c4:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
811340c8:	e0bfff17 	ldw	r2,-4(fp)
811340cc:	1000021e 	bne	r2,zero,811340d8 <OSTmrStateGet+0x30>
        return (0);
811340d0:	0005883a 	mov	r2,zero
811340d4:	00002a06 	br	81134180 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
811340d8:	e0bffe17 	ldw	r2,-8(fp)
811340dc:	1000051e 	bne	r2,zero,811340f4 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
811340e0:	e0bfff17 	ldw	r2,-4(fp)
811340e4:	00ffe284 	movi	r3,-118
811340e8:	10c00005 	stb	r3,0(r2)
        return (0);
811340ec:	0005883a 	mov	r2,zero
811340f0:	00002306 	br	81134180 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811340f4:	e0bffe17 	ldw	r2,-8(fp)
811340f8:	10800003 	ldbu	r2,0(r2)
811340fc:	10803fcc 	andi	r2,r2,255
81134100:	10801920 	cmpeqi	r2,r2,100
81134104:	1000051e 	bne	r2,zero,8113411c <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81134108:	e0bfff17 	ldw	r2,-4(fp)
8113410c:	00ffe244 	movi	r3,-119
81134110:	10c00005 	stb	r3,0(r2)
        return (0);
81134114:	0005883a 	mov	r2,zero
81134118:	00001906 	br	81134180 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8113411c:	d0a08b03 	ldbu	r2,-32212(gp)
81134120:	10803fcc 	andi	r2,r2,255
81134124:	10000526 	beq	r2,zero,8113413c <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81134128:	e0bfff17 	ldw	r2,-4(fp)
8113412c:	00ffe2c4 	movi	r3,-117
81134130:	10c00005 	stb	r3,0(r2)
        return (0);
81134134:	0005883a 	mov	r2,zero
81134138:	00001106 	br	81134180 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
8113413c:	1134a640 	call	81134a64 <OSTmr_Lock>
    state = ptmr->OSTmrState;
81134140:	e0bffe17 	ldw	r2,-8(fp)
81134144:	10800c43 	ldbu	r2,49(r2)
81134148:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
8113414c:	e0bffd03 	ldbu	r2,-12(fp)
81134150:	1005883a 	mov	r2,r2
81134154:	10800128 	cmpgeui	r2,r2,4
81134158:	1000031e 	bne	r2,zero,81134168 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
8113415c:	e0bfff17 	ldw	r2,-4(fp)
81134160:	10000005 	stb	zero,0(r2)
             break;
81134164:	00000406 	br	81134178 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
81134168:	e0bfff17 	ldw	r2,-4(fp)
8113416c:	00ffe344 	movi	r3,-115
81134170:	10c00005 	stb	r3,0(r2)
             break;
81134174:	0001883a 	nop
    }
    OSTmr_Unlock();
81134178:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
    return (state);
8113417c:	e0bffd03 	ldbu	r2,-12(fp)
}
81134180:	e037883a 	mov	sp,fp
81134184:	dfc00117 	ldw	ra,4(sp)
81134188:	df000017 	ldw	fp,0(sp)
8113418c:	dec00204 	addi	sp,sp,8
81134190:	f800283a 	ret

81134194 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
81134194:	defffc04 	addi	sp,sp,-16
81134198:	de00012e 	bgeu	sp,et,811341a0 <OSTmrStart+0xc>
8113419c:	003b68fa 	trap	3
811341a0:	dfc00315 	stw	ra,12(sp)
811341a4:	df000215 	stw	fp,8(sp)
811341a8:	df000204 	addi	fp,sp,8
811341ac:	e13ffe15 	stw	r4,-8(fp)
811341b0:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
811341b4:	e0bfff17 	ldw	r2,-4(fp)
811341b8:	1000021e 	bne	r2,zero,811341c4 <OSTmrStart+0x30>
        return (OS_FALSE);
811341bc:	0005883a 	mov	r2,zero
811341c0:	00004106 	br	811342c8 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
811341c4:	e0bffe17 	ldw	r2,-8(fp)
811341c8:	1000051e 	bne	r2,zero,811341e0 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
811341cc:	e0bfff17 	ldw	r2,-4(fp)
811341d0:	00ffe284 	movi	r3,-118
811341d4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811341d8:	0005883a 	mov	r2,zero
811341dc:	00003a06 	br	811342c8 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
811341e0:	e0bffe17 	ldw	r2,-8(fp)
811341e4:	10800003 	ldbu	r2,0(r2)
811341e8:	10803fcc 	andi	r2,r2,255
811341ec:	10801920 	cmpeqi	r2,r2,100
811341f0:	1000051e 	bne	r2,zero,81134208 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811341f4:	e0bfff17 	ldw	r2,-4(fp)
811341f8:	00ffe244 	movi	r3,-119
811341fc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134200:	0005883a 	mov	r2,zero
81134204:	00003006 	br	811342c8 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81134208:	d0a08b03 	ldbu	r2,-32212(gp)
8113420c:	10803fcc 	andi	r2,r2,255
81134210:	10000526 	beq	r2,zero,81134228 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
81134214:	e0bfff17 	ldw	r2,-4(fp)
81134218:	00ffe2c4 	movi	r3,-117
8113421c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134220:	0005883a 	mov	r2,zero
81134224:	00002806 	br	811342c8 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
81134228:	1134a640 	call	81134a64 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8113422c:	e0bffe17 	ldw	r2,-8(fp)
81134230:	10800c43 	ldbu	r2,49(r2)
81134234:	10803fcc 	andi	r2,r2,255
81134238:	10c000c8 	cmpgei	r3,r2,3
8113423c:	1800031e 	bne	r3,zero,8113424c <OSTmrStart+0xb8>
81134240:	00800e16 	blt	zero,r2,8113427c <OSTmrStart+0xe8>
81134244:	10001526 	beq	r2,zero,8113429c <OSTmrStart+0x108>
81134248:	00001a06 	br	811342b4 <OSTmrStart+0x120>
8113424c:	108000e0 	cmpeqi	r2,r2,3
81134250:	10001826 	beq	r2,zero,811342b4 <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
81134254:	e13ffe17 	ldw	r4,-8(fp)
81134258:	11349680 	call	81134968 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8113425c:	000b883a 	mov	r5,zero
81134260:	e13ffe17 	ldw	r4,-8(fp)
81134264:	11348180 	call	81134818 <OSTmr_Link>
             OSTmr_Unlock();
81134268:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8113426c:	e0bfff17 	ldw	r2,-4(fp)
81134270:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81134274:	00800044 	movi	r2,1
81134278:	00001306 	br	811342c8 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8113427c:	000b883a 	mov	r5,zero
81134280:	e13ffe17 	ldw	r4,-8(fp)
81134284:	11348180 	call	81134818 <OSTmr_Link>
             OSTmr_Unlock();
81134288:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8113428c:	e0bfff17 	ldw	r2,-4(fp)
81134290:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81134294:	00800044 	movi	r2,1
81134298:	00000b06 	br	811342c8 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
8113429c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811342a0:	e0bfff17 	ldw	r2,-4(fp)
811342a4:	00ffe1c4 	movi	r3,-121
811342a8:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811342ac:	0005883a 	mov	r2,zero
811342b0:	00000506 	br	811342c8 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
811342b4:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811342b8:	e0bfff17 	ldw	r2,-4(fp)
811342bc:	00ffe344 	movi	r3,-115
811342c0:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811342c4:	0005883a 	mov	r2,zero
    }
}
811342c8:	e037883a 	mov	sp,fp
811342cc:	dfc00117 	ldw	ra,4(sp)
811342d0:	df000017 	ldw	fp,0(sp)
811342d4:	dec00204 	addi	sp,sp,8
811342d8:	f800283a 	ret

811342dc <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
811342dc:	defff904 	addi	sp,sp,-28
811342e0:	de00012e 	bgeu	sp,et,811342e8 <OSTmrStop+0xc>
811342e4:	003b68fa 	trap	3
811342e8:	dfc00615 	stw	ra,24(sp)
811342ec:	df000515 	stw	fp,20(sp)
811342f0:	df000504 	addi	fp,sp,20
811342f4:	e13ffc15 	stw	r4,-16(fp)
811342f8:	2805883a 	mov	r2,r5
811342fc:	e1bffe15 	stw	r6,-8(fp)
81134300:	e1ffff15 	stw	r7,-4(fp)
81134304:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
81134308:	e0bfff17 	ldw	r2,-4(fp)
8113430c:	1000021e 	bne	r2,zero,81134318 <OSTmrStop+0x3c>
        return (OS_FALSE);
81134310:	0005883a 	mov	r2,zero
81134314:	00006606 	br	811344b0 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
81134318:	e0bffc17 	ldw	r2,-16(fp)
8113431c:	1000051e 	bne	r2,zero,81134334 <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
81134320:	e0bfff17 	ldw	r2,-4(fp)
81134324:	00ffe284 	movi	r3,-118
81134328:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113432c:	0005883a 	mov	r2,zero
81134330:	00005f06 	br	811344b0 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
81134334:	e0bffc17 	ldw	r2,-16(fp)
81134338:	10800003 	ldbu	r2,0(r2)
8113433c:	10803fcc 	andi	r2,r2,255
81134340:	10801920 	cmpeqi	r2,r2,100
81134344:	1000051e 	bne	r2,zero,8113435c <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81134348:	e0bfff17 	ldw	r2,-4(fp)
8113434c:	00ffe244 	movi	r3,-119
81134350:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134354:	0005883a 	mov	r2,zero
81134358:	00005506 	br	811344b0 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
8113435c:	d0a08b03 	ldbu	r2,-32212(gp)
81134360:	10803fcc 	andi	r2,r2,255
81134364:	10000526 	beq	r2,zero,8113437c <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
81134368:	e0bfff17 	ldw	r2,-4(fp)
8113436c:	00ffe2c4 	movi	r3,-117
81134370:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134374:	0005883a 	mov	r2,zero
81134378:	00004d06 	br	811344b0 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
8113437c:	1134a640 	call	81134a64 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81134380:	e0bffc17 	ldw	r2,-16(fp)
81134384:	10800c43 	ldbu	r2,49(r2)
81134388:	10803fcc 	andi	r2,r2,255
8113438c:	10c000c8 	cmpgei	r3,r2,3
81134390:	1800031e 	bne	r3,zero,811343a0 <OSTmrStop+0xc4>
81134394:	00803516 	blt	zero,r2,8113446c <OSTmrStop+0x190>
81134398:	10003a26 	beq	r2,zero,81134484 <OSTmrStop+0x1a8>
8113439c:	00003f06 	br	8113449c <OSTmrStop+0x1c0>
811343a0:	108000e0 	cmpeqi	r2,r2,3
811343a4:	10003d26 	beq	r2,zero,8113449c <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
811343a8:	e13ffc17 	ldw	r4,-16(fp)
811343ac:	11349680 	call	81134968 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
811343b0:	e0bfff17 	ldw	r2,-4(fp)
811343b4:	10000005 	stb	zero,0(r2)
             switch (opt) {
811343b8:	e0bffd03 	ldbu	r2,-12(fp)
811343bc:	10c000e0 	cmpeqi	r3,r2,3
811343c0:	1800041e 	bne	r3,zero,811343d4 <OSTmrStop+0xf8>
811343c4:	10c00120 	cmpeqi	r3,r2,4
811343c8:	1800121e 	bne	r3,zero,81134414 <OSTmrStop+0x138>
811343cc:	10002326 	beq	r2,zero,8113445c <OSTmrStop+0x180>
811343d0:	00001e06 	br	8113444c <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
811343d4:	e0bffc17 	ldw	r2,-16(fp)
811343d8:	10800117 	ldw	r2,4(r2)
811343dc:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
811343e0:	e0bffb17 	ldw	r2,-20(fp)
811343e4:	10000726 	beq	r2,zero,81134404 <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
811343e8:	e0bffc17 	ldw	r2,-16(fp)
811343ec:	10c00217 	ldw	r3,8(r2)
811343f0:	e0bffb17 	ldw	r2,-20(fp)
811343f4:	180b883a 	mov	r5,r3
811343f8:	e13ffc17 	ldw	r4,-16(fp)
811343fc:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81134400:	00001706 	br	81134460 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81134404:	e0bfff17 	ldw	r2,-4(fp)
81134408:	00ffe3c4 	movi	r3,-113
8113440c:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81134410:	00001306 	br	81134460 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81134414:	e0bffc17 	ldw	r2,-16(fp)
81134418:	10800117 	ldw	r2,4(r2)
8113441c:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81134420:	e0bffb17 	ldw	r2,-20(fp)
81134424:	10000526 	beq	r2,zero,8113443c <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
81134428:	e0bffb17 	ldw	r2,-20(fp)
8113442c:	e17ffe17 	ldw	r5,-8(fp)
81134430:	e13ffc17 	ldw	r4,-16(fp)
81134434:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81134438:	00000906 	br	81134460 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8113443c:	e0bfff17 	ldw	r2,-4(fp)
81134440:	00ffe3c4 	movi	r3,-113
81134444:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81134448:	00000506 	br	81134460 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
8113444c:	e0bfff17 	ldw	r2,-4(fp)
81134450:	00ffe104 	movi	r3,-124
81134454:	10c00005 	stb	r3,0(r2)
                     break;
81134458:	00000106 	br	81134460 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
8113445c:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
81134460:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             return (OS_TRUE);
81134464:	00800044 	movi	r2,1
81134468:	00001106 	br	811344b0 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
8113446c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
81134470:	e0bfff17 	ldw	r2,-4(fp)
81134474:	00ffe384 	movi	r3,-114
81134478:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
8113447c:	00800044 	movi	r2,1
81134480:	00000b06 	br	811344b0 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
81134484:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81134488:	e0bfff17 	ldw	r2,-4(fp)
8113448c:	00ffe1c4 	movi	r3,-121
81134490:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81134494:	0005883a 	mov	r2,zero
81134498:	00000506 	br	811344b0 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
8113449c:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811344a0:	e0bfff17 	ldw	r2,-4(fp)
811344a4:	00ffe344 	movi	r3,-115
811344a8:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811344ac:	0005883a 	mov	r2,zero
    }
}
811344b0:	e037883a 	mov	sp,fp
811344b4:	dfc00117 	ldw	ra,4(sp)
811344b8:	df000017 	ldw	fp,0(sp)
811344bc:	dec00204 	addi	sp,sp,8
811344c0:	f800283a 	ret

811344c4 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
811344c4:	defffd04 	addi	sp,sp,-12
811344c8:	de00012e 	bgeu	sp,et,811344d0 <OSTmrSignal+0xc>
811344cc:	003b68fa 	trap	3
811344d0:	dfc00215 	stw	ra,8(sp)
811344d4:	df000115 	stw	fp,4(sp)
811344d8:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
811344dc:	d0a07a17 	ldw	r2,-32280(gp)
811344e0:	1009883a 	mov	r4,r2
811344e4:	1131a900 	call	81131a90 <OSSemPost>
811344e8:	e0bfff05 	stb	r2,-4(fp)
    return (err);
811344ec:	e0bfff03 	ldbu	r2,-4(fp)
}
811344f0:	e037883a 	mov	sp,fp
811344f4:	dfc00117 	ldw	ra,4(sp)
811344f8:	df000017 	ldw	fp,0(sp)
811344fc:	dec00204 	addi	sp,sp,8
81134500:	f800283a 	ret

81134504 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
81134504:	defffe04 	addi	sp,sp,-8
81134508:	de00012e 	bgeu	sp,et,81134510 <OSTmr_Alloc+0xc>
8113450c:	003b68fa 	trap	3
81134510:	df000115 	stw	fp,4(sp)
81134514:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81134518:	d0a07817 	ldw	r2,-32288(gp)
8113451c:	1000021e 	bne	r2,zero,81134528 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81134520:	0005883a 	mov	r2,zero
81134524:	00001006 	br	81134568 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
81134528:	d0a07817 	ldw	r2,-32288(gp)
8113452c:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
81134530:	e0bfff17 	ldw	r2,-4(fp)
81134534:	10800317 	ldw	r2,12(r2)
81134538:	d0a07815 	stw	r2,-32288(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
8113453c:	e0bfff17 	ldw	r2,-4(fp)
81134540:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
81134544:	e0bfff17 	ldw	r2,-4(fp)
81134548:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
8113454c:	d0a07d0b 	ldhu	r2,-32268(gp)
81134550:	10800044 	addi	r2,r2,1
81134554:	d0a07d0d 	sth	r2,-32268(gp)
    OSTmrFree--;
81134558:	d0a0810b 	ldhu	r2,-32252(gp)
8113455c:	10bfffc4 	addi	r2,r2,-1
81134560:	d0a0810d 	sth	r2,-32252(gp)
    return (ptmr);
81134564:	e0bfff17 	ldw	r2,-4(fp)
}
81134568:	e037883a 	mov	sp,fp
8113456c:	df000017 	ldw	fp,0(sp)
81134570:	dec00104 	addi	sp,sp,4
81134574:	f800283a 	ret

81134578 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81134578:	defffe04 	addi	sp,sp,-8
8113457c:	de00012e 	bgeu	sp,et,81134584 <OSTmr_Free+0xc>
81134580:	003b68fa 	trap	3
81134584:	df000115 	stw	fp,4(sp)
81134588:	df000104 	addi	fp,sp,4
8113458c:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81134590:	e0bfff17 	ldw	r2,-4(fp)
81134594:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81134598:	e0bfff17 	ldw	r2,-4(fp)
8113459c:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
811345a0:	e0bfff17 	ldw	r2,-4(fp)
811345a4:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
811345a8:	e0bfff17 	ldw	r2,-4(fp)
811345ac:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
811345b0:	e0bfff17 	ldw	r2,-4(fp)
811345b4:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
811345b8:	e0bfff17 	ldw	r2,-4(fp)
811345bc:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
811345c0:	e0bfff17 	ldw	r2,-4(fp)
811345c4:	00c00fc4 	movi	r3,63
811345c8:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
811345cc:	e0bfff17 	ldw	r2,-4(fp)
811345d0:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
811345d4:	e0bfff17 	ldw	r2,-4(fp)
811345d8:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
811345dc:	d0e07817 	ldw	r3,-32288(gp)
811345e0:	e0bfff17 	ldw	r2,-4(fp)
811345e4:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
811345e8:	e0bfff17 	ldw	r2,-4(fp)
811345ec:	d0a07815 	stw	r2,-32288(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
811345f0:	d0a07d0b 	ldhu	r2,-32268(gp)
811345f4:	10bfffc4 	addi	r2,r2,-1
811345f8:	d0a07d0d 	sth	r2,-32268(gp)
    OSTmrFree++;
811345fc:	d0a0810b 	ldhu	r2,-32252(gp)
81134600:	10800044 	addi	r2,r2,1
81134604:	d0a0810d 	sth	r2,-32252(gp)
}
81134608:	0001883a 	nop
8113460c:	e037883a 	mov	sp,fp
81134610:	df000017 	ldw	fp,0(sp)
81134614:	dec00104 	addi	sp,sp,4
81134618:	f800283a 	ret

8113461c <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
8113461c:	defffa04 	addi	sp,sp,-24
81134620:	de00012e 	bgeu	sp,et,81134628 <OSTmr_Init+0xc>
81134624:	003b68fa 	trap	3
81134628:	dfc00515 	stw	ra,20(sp)
8113462c:	df000415 	stw	fp,16(sp)
81134630:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
81134634:	01406804 	movi	r5,416
81134638:	01204574 	movhi	r4,33045
8113463c:	210cc204 	addi	r4,r4,13064
81134640:	112c78c0 	call	8112c78c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
81134644:	01400404 	movi	r5,16
81134648:	01204574 	movhi	r4,33045
8113464c:	210b5e04 	addi	r4,r4,11640
81134650:	112c78c0 	call	8112c78c <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
81134654:	00a04574 	movhi	r2,33045
81134658:	108cc204 	addi	r2,r2,13064
8113465c:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
81134660:	00a04574 	movhi	r2,33045
81134664:	108ccf04 	addi	r2,r2,13116
81134668:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8113466c:	e03ffc0d 	sth	zero,-16(fp)
81134670:	00001606 	br	811346cc <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81134674:	e0bffd17 	ldw	r2,-12(fp)
81134678:	00c01904 	movi	r3,100
8113467c:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81134680:	e0bffd17 	ldw	r2,-12(fp)
81134684:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81134688:	e0bffd17 	ldw	r2,-12(fp)
8113468c:	e0fffe17 	ldw	r3,-8(fp)
81134690:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81134694:	e0bffd17 	ldw	r2,-12(fp)
81134698:	00c00fc4 	movi	r3,63
8113469c:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
811346a0:	e0bffd17 	ldw	r2,-12(fp)
811346a4:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
811346a8:	e0bffd17 	ldw	r2,-12(fp)
811346ac:	10800d04 	addi	r2,r2,52
811346b0:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
811346b4:	e0bffe17 	ldw	r2,-8(fp)
811346b8:	10800d04 	addi	r2,r2,52
811346bc:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
811346c0:	e0bffc0b 	ldhu	r2,-16(fp)
811346c4:	10800044 	addi	r2,r2,1
811346c8:	e0bffc0d 	sth	r2,-16(fp)
811346cc:	e0bffc0b 	ldhu	r2,-16(fp)
811346d0:	108001f0 	cmpltui	r2,r2,7
811346d4:	103fe71e 	bne	r2,zero,81134674 <__reset+0xfb114674>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
811346d8:	e0bffd17 	ldw	r2,-12(fp)
811346dc:	00c01904 	movi	r3,100
811346e0:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
811346e4:	e0bffd17 	ldw	r2,-12(fp)
811346e8:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
811346ec:	e0bffd17 	ldw	r2,-12(fp)
811346f0:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
811346f4:	e0bffd17 	ldw	r2,-12(fp)
811346f8:	00c00fc4 	movi	r3,63
811346fc:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81134700:	e0bffd17 	ldw	r2,-12(fp)
81134704:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81134708:	d0208d15 	stw	zero,-32204(gp)
    OSTmrUsed           = 0;
8113470c:	d0207d0d 	sth	zero,-32268(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81134710:	00800204 	movi	r2,8
81134714:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
81134718:	00a04574 	movhi	r2,33045
8113471c:	108cc204 	addi	r2,r2,13064
81134720:	d0a07815 	stw	r2,-32288(gp)
    OSTmrSem            = OSSemCreate(1);
81134724:	01000044 	movi	r4,1
81134728:	11313e00 	call	811313e0 <OSSemCreate>
8113472c:	d0a08f15 	stw	r2,-32196(gp)
    OSTmrSemSignal      = OSSemCreate(0);
81134730:	0009883a 	mov	r4,zero
81134734:	11313e00 	call	811313e0 <OSSemCreate>
81134738:	d0a07a15 	stw	r2,-32280(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
8113473c:	d0a08f17 	ldw	r2,-32196(gp)
81134740:	e0ffff04 	addi	r3,fp,-4
81134744:	180d883a 	mov	r6,r3
81134748:	01604534 	movhi	r5,33044
8113474c:	29493c04 	addi	r5,r5,9456
81134750:	1009883a 	mov	r4,r2
81134754:	112af640 	call	8112af64 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
81134758:	d0a07a17 	ldw	r2,-32280(gp)
8113475c:	e0ffff04 	addi	r3,fp,-4
81134760:	180d883a 	mov	r6,r3
81134764:	01604534 	movhi	r5,33044
81134768:	29494104 	addi	r5,r5,9476
8113476c:	1009883a 	mov	r4,r2
81134770:	112af640 	call	8112af64 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81134774:	11347900 	call	81134790 <OSTmr_InitTask>
}
81134778:	0001883a 	nop
8113477c:	e037883a 	mov	sp,fp
81134780:	dfc00117 	ldw	ra,4(sp)
81134784:	df000017 	ldw	fp,0(sp)
81134788:	dec00204 	addi	sp,sp,8
8113478c:	f800283a 	ret

81134790 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81134790:	defff804 	addi	sp,sp,-32
81134794:	de00012e 	bgeu	sp,et,8113479c <OSTmr_InitTask+0xc>
81134798:	003b68fa 	trap	3
8113479c:	dfc00715 	stw	ra,28(sp)
811347a0:	df000615 	stw	fp,24(sp)
811347a4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
811347a8:	008000c4 	movi	r2,3
811347ac:	d8800415 	stw	r2,16(sp)
811347b0:	d8000315 	stw	zero,12(sp)
811347b4:	00804004 	movi	r2,256
811347b8:	d8800215 	stw	r2,8(sp)
811347bc:	00a04574 	movhi	r2,33045
811347c0:	10929604 	addi	r2,r2,19032
811347c4:	d8800115 	stw	r2,4(sp)
811347c8:	00bfff54 	movui	r2,65533
811347cc:	d8800015 	stw	r2,0(sp)
811347d0:	01c00744 	movi	r7,29
811347d4:	01a04574 	movhi	r6,33045
811347d8:	31939504 	addi	r6,r6,20052
811347dc:	000b883a 	mov	r5,zero
811347e0:	012044f4 	movhi	r4,33043
811347e4:	2112b904 	addi	r4,r4,19172
811347e8:	11324740 	call	81132474 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
811347ec:	e1bfff04 	addi	r6,fp,-4
811347f0:	01604534 	movhi	r5,33044
811347f4:	29494604 	addi	r5,r5,9496
811347f8:	01000744 	movi	r4,29
811347fc:	1132ca40 	call	81132ca4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
81134800:	0001883a 	nop
81134804:	e037883a 	mov	sp,fp
81134808:	dfc00117 	ldw	ra,4(sp)
8113480c:	df000017 	ldw	fp,0(sp)
81134810:	dec00204 	addi	sp,sp,8
81134814:	f800283a 	ret

81134818 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
81134818:	defffa04 	addi	sp,sp,-24
8113481c:	de00012e 	bgeu	sp,et,81134824 <OSTmr_Link+0xc>
81134820:	003b68fa 	trap	3
81134824:	df000515 	stw	fp,20(sp)
81134828:	df000504 	addi	fp,sp,20
8113482c:	e13ffe15 	stw	r4,-8(fp)
81134830:	2805883a 	mov	r2,r5
81134834:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
81134838:	e0bffe17 	ldw	r2,-8(fp)
8113483c:	00c000c4 	movi	r3,3
81134840:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
81134844:	e0bfff03 	ldbu	r2,-4(fp)
81134848:	10800058 	cmpnei	r2,r2,1
8113484c:	1000071e 	bne	r2,zero,8113486c <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81134850:	e0bffe17 	ldw	r2,-8(fp)
81134854:	10c00717 	ldw	r3,28(r2)
81134858:	d0a08d17 	ldw	r2,-32204(gp)
8113485c:	1887883a 	add	r3,r3,r2
81134860:	e0bffe17 	ldw	r2,-8(fp)
81134864:	10c00515 	stw	r3,20(r2)
81134868:	00001006 	br	811348ac <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
8113486c:	e0bffe17 	ldw	r2,-8(fp)
81134870:	10800617 	ldw	r2,24(r2)
81134874:	1000071e 	bne	r2,zero,81134894 <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81134878:	e0bffe17 	ldw	r2,-8(fp)
8113487c:	10c00717 	ldw	r3,28(r2)
81134880:	d0a08d17 	ldw	r2,-32204(gp)
81134884:	1887883a 	add	r3,r3,r2
81134888:	e0bffe17 	ldw	r2,-8(fp)
8113488c:	10c00515 	stw	r3,20(r2)
81134890:	00000606 	br	811348ac <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81134894:	e0bffe17 	ldw	r2,-8(fp)
81134898:	10c00617 	ldw	r3,24(r2)
8113489c:	d0a08d17 	ldw	r2,-32204(gp)
811348a0:	1887883a 	add	r3,r3,r2
811348a4:	e0bffe17 	ldw	r2,-8(fp)
811348a8:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
811348ac:	e0bffe17 	ldw	r2,-8(fp)
811348b0:	10800517 	ldw	r2,20(r2)
811348b4:	1080004c 	andi	r2,r2,1
811348b8:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
811348bc:	e0bffb0b 	ldhu	r2,-20(fp)
811348c0:	100690fa 	slli	r3,r2,3
811348c4:	00a04574 	movhi	r2,33045
811348c8:	108b5e04 	addi	r2,r2,11640
811348cc:	1885883a 	add	r2,r3,r2
811348d0:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
811348d4:	e0bffc17 	ldw	r2,-16(fp)
811348d8:	10800017 	ldw	r2,0(r2)
811348dc:	1000091e 	bne	r2,zero,81134904 <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
811348e0:	e0bffc17 	ldw	r2,-16(fp)
811348e4:	e0fffe17 	ldw	r3,-8(fp)
811348e8:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
811348ec:	e0bffe17 	ldw	r2,-8(fp)
811348f0:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
811348f4:	e0bffc17 	ldw	r2,-16(fp)
811348f8:	00c00044 	movi	r3,1
811348fc:	10c0010d 	sth	r3,4(r2)
81134900:	00001206 	br	8113494c <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
81134904:	e0bffc17 	ldw	r2,-16(fp)
81134908:	10800017 	ldw	r2,0(r2)
8113490c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
81134910:	e0bffc17 	ldw	r2,-16(fp)
81134914:	e0fffe17 	ldw	r3,-8(fp)
81134918:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
8113491c:	e0bffe17 	ldw	r2,-8(fp)
81134920:	e0fffd17 	ldw	r3,-12(fp)
81134924:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
81134928:	e0bffd17 	ldw	r2,-12(fp)
8113492c:	e0fffe17 	ldw	r3,-8(fp)
81134930:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
81134934:	e0bffc17 	ldw	r2,-16(fp)
81134938:	1080010b 	ldhu	r2,4(r2)
8113493c:	10800044 	addi	r2,r2,1
81134940:	1007883a 	mov	r3,r2
81134944:	e0bffc17 	ldw	r2,-16(fp)
81134948:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
8113494c:	e0bffe17 	ldw	r2,-8(fp)
81134950:	10000415 	stw	zero,16(r2)
}
81134954:	0001883a 	nop
81134958:	e037883a 	mov	sp,fp
8113495c:	df000017 	ldw	fp,0(sp)
81134960:	dec00104 	addi	sp,sp,4
81134964:	f800283a 	ret

81134968 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
81134968:	defffa04 	addi	sp,sp,-24
8113496c:	de00012e 	bgeu	sp,et,81134974 <OSTmr_Unlink+0xc>
81134970:	003b68fa 	trap	3
81134974:	df000515 	stw	fp,20(sp)
81134978:	df000504 	addi	fp,sp,20
8113497c:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81134980:	e0bfff17 	ldw	r2,-4(fp)
81134984:	10800517 	ldw	r2,20(r2)
81134988:	1080004c 	andi	r2,r2,1
8113498c:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81134990:	e0bffb0b 	ldhu	r2,-20(fp)
81134994:	100690fa 	slli	r3,r2,3
81134998:	00a04574 	movhi	r2,33045
8113499c:	108b5e04 	addi	r2,r2,11640
811349a0:	1885883a 	add	r2,r3,r2
811349a4:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
811349a8:	e0bffc17 	ldw	r2,-16(fp)
811349ac:	10c00017 	ldw	r3,0(r2)
811349b0:	e0bfff17 	ldw	r2,-4(fp)
811349b4:	18800b1e 	bne	r3,r2,811349e4 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
811349b8:	e0bfff17 	ldw	r2,-4(fp)
811349bc:	10800317 	ldw	r2,12(r2)
811349c0:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
811349c4:	e0bffc17 	ldw	r2,-16(fp)
811349c8:	e0fffd17 	ldw	r3,-12(fp)
811349cc:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
811349d0:	e0bffd17 	ldw	r2,-12(fp)
811349d4:	10001126 	beq	r2,zero,81134a1c <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
811349d8:	e0bffd17 	ldw	r2,-12(fp)
811349dc:	10000415 	stw	zero,16(r2)
811349e0:	00000e06 	br	81134a1c <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
811349e4:	e0bfff17 	ldw	r2,-4(fp)
811349e8:	10800417 	ldw	r2,16(r2)
811349ec:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
811349f0:	e0bfff17 	ldw	r2,-4(fp)
811349f4:	10800317 	ldw	r2,12(r2)
811349f8:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
811349fc:	e0bffd17 	ldw	r2,-12(fp)
81134a00:	e0fffe17 	ldw	r3,-8(fp)
81134a04:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81134a08:	e0bffe17 	ldw	r2,-8(fp)
81134a0c:	10000326 	beq	r2,zero,81134a1c <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
81134a10:	e0bffe17 	ldw	r2,-8(fp)
81134a14:	e0fffd17 	ldw	r3,-12(fp)
81134a18:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
81134a1c:	e0bfff17 	ldw	r2,-4(fp)
81134a20:	00c00044 	movi	r3,1
81134a24:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
81134a28:	e0bfff17 	ldw	r2,-4(fp)
81134a2c:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
81134a30:	e0bfff17 	ldw	r2,-4(fp)
81134a34:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
81134a38:	e0bffc17 	ldw	r2,-16(fp)
81134a3c:	1080010b 	ldhu	r2,4(r2)
81134a40:	10bfffc4 	addi	r2,r2,-1
81134a44:	1007883a 	mov	r3,r2
81134a48:	e0bffc17 	ldw	r2,-16(fp)
81134a4c:	10c0010d 	sth	r3,4(r2)
}
81134a50:	0001883a 	nop
81134a54:	e037883a 	mov	sp,fp
81134a58:	df000017 	ldw	fp,0(sp)
81134a5c:	dec00104 	addi	sp,sp,4
81134a60:	f800283a 	ret

81134a64 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
81134a64:	defffd04 	addi	sp,sp,-12
81134a68:	de00012e 	bgeu	sp,et,81134a70 <OSTmr_Lock+0xc>
81134a6c:	003b68fa 	trap	3
81134a70:	dfc00215 	stw	ra,8(sp)
81134a74:	df000115 	stw	fp,4(sp)
81134a78:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
81134a7c:	d0a08f17 	ldw	r2,-32196(gp)
81134a80:	e1bfff04 	addi	r6,fp,-4
81134a84:	000b883a 	mov	r5,zero
81134a88:	1009883a 	mov	r4,r2
81134a8c:	11317080 	call	81131708 <OSSemPend>
    (void)err;
}
81134a90:	0001883a 	nop
81134a94:	e037883a 	mov	sp,fp
81134a98:	dfc00117 	ldw	ra,4(sp)
81134a9c:	df000017 	ldw	fp,0(sp)
81134aa0:	dec00204 	addi	sp,sp,8
81134aa4:	f800283a 	ret

81134aa8 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81134aa8:	defffe04 	addi	sp,sp,-8
81134aac:	de00012e 	bgeu	sp,et,81134ab4 <OSTmr_Unlock+0xc>
81134ab0:	003b68fa 	trap	3
81134ab4:	dfc00115 	stw	ra,4(sp)
81134ab8:	df000015 	stw	fp,0(sp)
81134abc:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
81134ac0:	d0a08f17 	ldw	r2,-32196(gp)
81134ac4:	1009883a 	mov	r4,r2
81134ac8:	1131a900 	call	81131a90 <OSSemPost>
}
81134acc:	0001883a 	nop
81134ad0:	e037883a 	mov	sp,fp
81134ad4:	dfc00117 	ldw	ra,4(sp)
81134ad8:	df000017 	ldw	fp,0(sp)
81134adc:	dec00204 	addi	sp,sp,8
81134ae0:	f800283a 	ret

81134ae4 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
81134ae4:	defff704 	addi	sp,sp,-36
81134ae8:	de00012e 	bgeu	sp,et,81134af0 <OSTmr_Task+0xc>
81134aec:	003b68fa 	trap	3
81134af0:	dfc00815 	stw	ra,32(sp)
81134af4:	df000715 	stw	fp,28(sp)
81134af8:	df000704 	addi	fp,sp,28
81134afc:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
81134b00:	d0a07a17 	ldw	r2,-32280(gp)
81134b04:	e0fffe04 	addi	r3,fp,-8
81134b08:	180d883a 	mov	r6,r3
81134b0c:	000b883a 	mov	r5,zero
81134b10:	1009883a 	mov	r4,r2
81134b14:	11317080 	call	81131708 <OSSemPend>
        OSTmr_Lock();
81134b18:	1134a640 	call	81134a64 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
81134b1c:	d0a08d17 	ldw	r2,-32204(gp)
81134b20:	10800044 	addi	r2,r2,1
81134b24:	d0a08d15 	stw	r2,-32204(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
81134b28:	d0a08d17 	ldw	r2,-32204(gp)
81134b2c:	1080004c 	andi	r2,r2,1
81134b30:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
81134b34:	e0bffa0b 	ldhu	r2,-24(fp)
81134b38:	100690fa 	slli	r3,r2,3
81134b3c:	00a04574 	movhi	r2,33045
81134b40:	108b5e04 	addi	r2,r2,11640
81134b44:	1885883a 	add	r2,r3,r2
81134b48:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
81134b4c:	e0bffb17 	ldw	r2,-20(fp)
81134b50:	10800017 	ldw	r2,0(r2)
81134b54:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
81134b58:	00002206 	br	81134be4 <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
81134b5c:	e0bff917 	ldw	r2,-28(fp)
81134b60:	10800317 	ldw	r2,12(r2)
81134b64:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
81134b68:	e0bff917 	ldw	r2,-28(fp)
81134b6c:	10c00517 	ldw	r3,20(r2)
81134b70:	d0a08d17 	ldw	r2,-32204(gp)
81134b74:	1880191e 	bne	r3,r2,81134bdc <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
81134b78:	e0bff917 	ldw	r2,-28(fp)
81134b7c:	10800117 	ldw	r2,4(r2)
81134b80:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
81134b84:	e0bffd17 	ldw	r2,-12(fp)
81134b88:	10000626 	beq	r2,zero,81134ba4 <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
81134b8c:	e0bff917 	ldw	r2,-28(fp)
81134b90:	10c00217 	ldw	r3,8(r2)
81134b94:	e0bffd17 	ldw	r2,-12(fp)
81134b98:	180b883a 	mov	r5,r3
81134b9c:	e13ff917 	ldw	r4,-28(fp)
81134ba0:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
81134ba4:	e13ff917 	ldw	r4,-28(fp)
81134ba8:	11349680 	call	81134968 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81134bac:	e0bff917 	ldw	r2,-28(fp)
81134bb0:	10800c03 	ldbu	r2,48(r2)
81134bb4:	10803fcc 	andi	r2,r2,255
81134bb8:	10800098 	cmpnei	r2,r2,2
81134bbc:	1000041e 	bne	r2,zero,81134bd0 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
81134bc0:	01400044 	movi	r5,1
81134bc4:	e13ff917 	ldw	r4,-28(fp)
81134bc8:	11348180 	call	81134818 <OSTmr_Link>
81134bcc:	00000306 	br	81134bdc <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
81134bd0:	e0bff917 	ldw	r2,-28(fp)
81134bd4:	00c00084 	movi	r3,2
81134bd8:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81134bdc:	e0bffc17 	ldw	r2,-16(fp)
81134be0:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
81134be4:	e0bff917 	ldw	r2,-28(fp)
81134be8:	103fdc1e 	bne	r2,zero,81134b5c <__reset+0xfb114b5c>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
81134bec:	1134aa80 	call	81134aa8 <OSTmr_Unlock>
    }
81134bf0:	003fc306 	br	81134b00 <__reset+0xfb114b00>

81134bf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81134bf4:	defffd04 	addi	sp,sp,-12
81134bf8:	de00012e 	bgeu	sp,et,81134c00 <alt_dev_reg+0xc>
81134bfc:	003b68fa 	trap	3
81134c00:	dfc00215 	stw	ra,8(sp)
81134c04:	df000115 	stw	fp,4(sp)
81134c08:	df000104 	addi	fp,sp,4
81134c0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81134c10:	d1600d04 	addi	r5,gp,-32716
81134c14:	e13fff17 	ldw	r4,-4(fp)
81134c18:	113ce940 	call	8113ce94 <alt_dev_llist_insert>
}
81134c1c:	e037883a 	mov	sp,fp
81134c20:	dfc00117 	ldw	ra,4(sp)
81134c24:	df000017 	ldw	fp,0(sp)
81134c28:	dec00204 	addi	sp,sp,8
81134c2c:	f800283a 	ret

81134c30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81134c30:	defffd04 	addi	sp,sp,-12
81134c34:	de00012e 	bgeu	sp,et,81134c3c <alt_irq_init+0xc>
81134c38:	003b68fa 	trap	3
81134c3c:	dfc00215 	stw	ra,8(sp)
81134c40:	df000115 	stw	fp,4(sp)
81134c44:	df000104 	addi	fp,sp,4
81134c48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81134c4c:	113d92c0 	call	8113d92c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81134c50:	00800044 	movi	r2,1
81134c54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81134c58:	0001883a 	nop
81134c5c:	e037883a 	mov	sp,fp
81134c60:	dfc00117 	ldw	ra,4(sp)
81134c64:	df000017 	ldw	fp,0(sp)
81134c68:	dec00204 	addi	sp,sp,8
81134c6c:	f800283a 	ret

81134c70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81134c70:	defffe04 	addi	sp,sp,-8
81134c74:	de00012e 	bgeu	sp,et,81134c7c <alt_sys_init+0xc>
81134c78:	003b68fa 	trap	3
81134c7c:	dfc00115 	stw	ra,4(sp)
81134c80:	df000015 	stw	fp,0(sp)
81134c84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81134c88:	01c0fa04 	movi	r7,1000
81134c8c:	01800304 	movi	r6,12
81134c90:	000b883a 	mov	r5,zero
81134c94:	01200034 	movhi	r4,32768
81134c98:	21022004 	addi	r4,r4,2176
81134c9c:	1139fc80 	call	81139fc8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81134ca0:	018002c4 	movi	r6,11
81134ca4:	000b883a 	mov	r5,zero
81134ca8:	01204534 	movhi	r4,33044
81134cac:	210ce204 	addi	r4,r4,13192
81134cb0:	11392b40 	call	811392b4 <altera_avalon_jtag_uart_init>
81134cb4:	01204534 	movhi	r4,33044
81134cb8:	210cd804 	addi	r4,r4,13152
81134cbc:	1134bf40 	call	81134bf4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81134cc0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81134cc4:	018003c4 	movi	r6,15
81134cc8:	000b883a 	mov	r5,zero
81134ccc:	01204534 	movhi	r4,33044
81134cd0:	2110fd04 	addi	r4,r4,17396
81134cd4:	113a1740 	call	8113a174 <altera_avalon_uart_init>
81134cd8:	01204534 	movhi	r4,33044
81134cdc:	2110f304 	addi	r4,r4,17356
81134ce0:	1134bf40 	call	81134bf4 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81134ce4:	00a04534 	movhi	r2,33044
81134ce8:	10912704 	addi	r2,r2,17564
81134cec:	10c00717 	ldw	r3,28(r2)
81134cf0:	00a04534 	movhi	r2,33044
81134cf4:	10912704 	addi	r2,r2,17564
81134cf8:	10800817 	ldw	r2,32(r2)
81134cfc:	100d883a 	mov	r6,r2
81134d00:	180b883a 	mov	r5,r3
81134d04:	01204534 	movhi	r4,33044
81134d08:	21112704 	addi	r4,r4,17564
81134d0c:	113c9fc0 	call	8113c9fc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81134d10:	00a04534 	movhi	r2,33044
81134d14:	10914004 	addi	r2,r2,17664
81134d18:	10c00717 	ldw	r3,28(r2)
81134d1c:	00a04534 	movhi	r2,33044
81134d20:	10914004 	addi	r2,r2,17664
81134d24:	10800817 	ldw	r2,32(r2)
81134d28:	100d883a 	mov	r6,r2
81134d2c:	180b883a 	mov	r5,r3
81134d30:	01204534 	movhi	r4,33044
81134d34:	21114004 	addi	r4,r4,17664
81134d38:	113c9fc0 	call	8113c9fc <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
81134d3c:	01204534 	movhi	r4,33044
81134d40:	21115904 	addi	r4,r4,17764
81134d44:	1134bf40 	call	81134bf4 <alt_dev_reg>
}
81134d48:	0001883a 	nop
81134d4c:	e037883a 	mov	sp,fp
81134d50:	dfc00117 	ldw	ra,4(sp)
81134d54:	df000017 	ldw	fp,0(sp)
81134d58:	dec00204 	addi	sp,sp,8
81134d5c:	f800283a 	ret

81134d60 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
81134d60:	defffa04 	addi	sp,sp,-24
81134d64:	de00012e 	bgeu	sp,et,81134d6c <Write_Sector_Data+0xc>
81134d68:	003b68fa 	trap	3
81134d6c:	dfc00515 	stw	ra,20(sp)
81134d70:	df000415 	stw	fp,16(sp)
81134d74:	df000404 	addi	fp,sp,16
81134d78:	e13ffe15 	stw	r4,-8(fp)
81134d7c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81134d80:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
81134d84:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81134d88:	10001e26 	beq	r2,zero,81134e04 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
81134d8c:	00803fc4 	movi	r2,255
81134d90:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81134d94:	d0a09917 	ldw	r2,-32156(gp)
81134d98:	e13ffe17 	ldw	r4,-8(fp)
81134d9c:	e0ffff17 	ldw	r3,-4(fp)
81134da0:	20c7883a 	add	r3,r4,r3
81134da4:	1806927a 	slli	r3,r3,9
81134da8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81134dac:	d0a09817 	ldw	r2,-32160(gp)
81134db0:	00c00604 	movi	r3,24
81134db4:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81134db8:	d0a09517 	ldw	r2,-32172(gp)
81134dbc:	1080002b 	ldhuio	r2,0(r2)
81134dc0:	10bfffcc 	andi	r2,r2,65535
81134dc4:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81134dc8:	e0bffd0b 	ldhu	r2,-12(fp)
81134dcc:	10bfffcc 	andi	r2,r2,65535
81134dd0:	1080010c 	andi	r2,r2,4
81134dd4:	103ff81e 	bne	r2,zero,81134db8 <__reset+0xfb114db8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81134dd8:	e0bffd0b 	ldhu	r2,-12(fp)
81134ddc:	10bfffcc 	andi	r2,r2,65535
81134de0:	1080040c 	andi	r2,r2,16
81134de4:	1000071e 	bne	r2,zero,81134e04 <Write_Sector_Data+0xa4>
        {
            result = true;
81134de8:	00800044 	movi	r2,1
81134dec:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81134df0:	d0209e15 	stw	zero,-32136(gp)
            current_sector_index = sector_index+partition_offset;
81134df4:	e0fffe17 	ldw	r3,-8(fp)
81134df8:	e0bfff17 	ldw	r2,-4(fp)
81134dfc:	1885883a 	add	r2,r3,r2
81134e00:	d0a09f15 	stw	r2,-32132(gp)
        }
    }
    return result;
81134e04:	e0bffc17 	ldw	r2,-16(fp)
}
81134e08:	e037883a 	mov	sp,fp
81134e0c:	dfc00117 	ldw	ra,4(sp)
81134e10:	df000017 	ldw	fp,0(sp)
81134e14:	dec00204 	addi	sp,sp,8
81134e18:	f800283a 	ret

81134e1c <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
81134e1c:	defffd04 	addi	sp,sp,-12
81134e20:	de00012e 	bgeu	sp,et,81134e28 <Save_Modified_Sector+0xc>
81134e24:	003b68fa 	trap	3
81134e28:	dfc00215 	stw	ra,8(sp)
81134e2c:	df000115 	stw	fp,4(sp)
81134e30:	df000104 	addi	fp,sp,4
    bool result = true;
81134e34:	00800044 	movi	r2,1
81134e38:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
81134e3c:	d0a09e17 	ldw	r2,-32136(gp)
81134e40:	10000526 	beq	r2,zero,81134e58 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
81134e44:	d0a09f17 	ldw	r2,-32132(gp)
81134e48:	000b883a 	mov	r5,zero
81134e4c:	1009883a 	mov	r4,r2
81134e50:	1134d600 	call	81134d60 <Write_Sector_Data>
81134e54:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
81134e58:	e0bfff17 	ldw	r2,-4(fp)
}
81134e5c:	e037883a 	mov	sp,fp
81134e60:	dfc00117 	ldw	ra,4(sp)
81134e64:	df000017 	ldw	fp,0(sp)
81134e68:	dec00204 	addi	sp,sp,8
81134e6c:	f800283a 	ret

81134e70 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
81134e70:	defffa04 	addi	sp,sp,-24
81134e74:	de00012e 	bgeu	sp,et,81134e7c <Read_Sector_Data+0xc>
81134e78:	003b68fa 	trap	3
81134e7c:	dfc00515 	stw	ra,20(sp)
81134e80:	df000415 	stw	fp,16(sp)
81134e84:	df000404 	addi	fp,sp,16
81134e88:	e13ffe15 	stw	r4,-8(fp)
81134e8c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81134e90:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
81134e94:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81134e98:	10002726 	beq	r2,zero,81134f38 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81134e9c:	00803fc4 	movi	r2,255
81134ea0:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
81134ea4:	d0a09e17 	ldw	r2,-32136(gp)
81134ea8:	10000726 	beq	r2,zero,81134ec8 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81134eac:	d0a09f17 	ldw	r2,-32132(gp)
81134eb0:	000b883a 	mov	r5,zero
81134eb4:	1009883a 	mov	r4,r2
81134eb8:	1134d600 	call	81134d60 <Write_Sector_Data>
81134ebc:	1000021e 	bne	r2,zero,81134ec8 <Read_Sector_Data+0x58>
            {
                return false;
81134ec0:	0005883a 	mov	r2,zero
81134ec4:	00001d06 	br	81134f3c <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81134ec8:	d0a09917 	ldw	r2,-32156(gp)
81134ecc:	e13ffe17 	ldw	r4,-8(fp)
81134ed0:	e0ffff17 	ldw	r3,-4(fp)
81134ed4:	20c7883a 	add	r3,r4,r3
81134ed8:	1806927a 	slli	r3,r3,9
81134edc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81134ee0:	d0a09817 	ldw	r2,-32160(gp)
81134ee4:	00c00444 	movi	r3,17
81134ee8:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81134eec:	d0a09517 	ldw	r2,-32172(gp)
81134ef0:	1080002b 	ldhuio	r2,0(r2)
81134ef4:	10bfffcc 	andi	r2,r2,65535
81134ef8:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
81134efc:	e0bffd0b 	ldhu	r2,-12(fp)
81134f00:	10bfffcc 	andi	r2,r2,65535
81134f04:	1080010c 	andi	r2,r2,4
81134f08:	103ff81e 	bne	r2,zero,81134eec <__reset+0xfb114eec>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
81134f0c:	e0bffd0b 	ldhu	r2,-12(fp)
81134f10:	10bfffcc 	andi	r2,r2,65535
81134f14:	1080040c 	andi	r2,r2,16
81134f18:	1000071e 	bne	r2,zero,81134f38 <Read_Sector_Data+0xc8>
		{
			result = true;
81134f1c:	00800044 	movi	r2,1
81134f20:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81134f24:	d0209e15 	stw	zero,-32136(gp)
            current_sector_index = sector_index+partition_offset;
81134f28:	e0fffe17 	ldw	r3,-8(fp)
81134f2c:	e0bfff17 	ldw	r2,-4(fp)
81134f30:	1885883a 	add	r2,r3,r2
81134f34:	d0a09f15 	stw	r2,-32132(gp)
		}
	}
	return result;
81134f38:	e0bffc17 	ldw	r2,-16(fp)
}
81134f3c:	e037883a 	mov	sp,fp
81134f40:	dfc00117 	ldw	ra,4(sp)
81134f44:	df000017 	ldw	fp,0(sp)
81134f48:	dec00204 	addi	sp,sp,8
81134f4c:	f800283a 	ret

81134f50 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
81134f50:	defffb04 	addi	sp,sp,-20
81134f54:	de00012e 	bgeu	sp,et,81134f5c <get_cluster_flag+0xc>
81134f58:	003b68fa 	trap	3
81134f5c:	dfc00415 	stw	ra,16(sp)
81134f60:	df000315 	stw	fp,12(sp)
81134f64:	df000304 	addi	fp,sp,12
81134f68:	e13ffe15 	stw	r4,-8(fp)
81134f6c:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
81134f70:	e0bffe17 	ldw	r2,-8(fp)
81134f74:	1004d23a 	srli	r2,r2,8
81134f78:	d0e09b17 	ldw	r3,-32148(gp)
81134f7c:	10c5883a 	add	r2,r2,r3
81134f80:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81134f84:	00a04574 	movhi	r2,33045
81134f88:	109c9a04 	addi	r2,r2,29288
81134f8c:	10801117 	ldw	r2,68(r2)
81134f90:	e0fffd17 	ldw	r3,-12(fp)
81134f94:	1885883a 	add	r2,r3,r2
81134f98:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81134f9c:	d0a09f17 	ldw	r2,-32132(gp)
81134fa0:	e0fffd17 	ldw	r3,-12(fp)
81134fa4:	18800726 	beq	r3,r2,81134fc4 <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81134fa8:	e0bffd17 	ldw	r2,-12(fp)
81134fac:	000b883a 	mov	r5,zero
81134fb0:	1009883a 	mov	r4,r2
81134fb4:	1134e700 	call	81134e70 <Read_Sector_Data>
81134fb8:	1000021e 	bne	r2,zero,81134fc4 <get_cluster_flag+0x74>
        {
            return false;
81134fbc:	0005883a 	mov	r2,zero
81134fc0:	00000d06 	br	81134ff8 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
81134fc4:	e0bffe17 	ldw	r2,-8(fp)
81134fc8:	10803fcc 	andi	r2,r2,255
81134fcc:	1085883a 	add	r2,r2,r2
81134fd0:	1007883a 	mov	r3,r2
81134fd4:	d0a09d17 	ldw	r2,-32140(gp)
81134fd8:	10800a17 	ldw	r2,40(r2)
81134fdc:	1885883a 	add	r2,r3,r2
81134fe0:	1080002b 	ldhuio	r2,0(r2)
81134fe4:	10bfffcc 	andi	r2,r2,65535
81134fe8:	1007883a 	mov	r3,r2
81134fec:	e0bfff17 	ldw	r2,-4(fp)
81134ff0:	10c0000d 	sth	r3,0(r2)
    return true;
81134ff4:	00800044 	movi	r2,1
}
81134ff8:	e037883a 	mov	sp,fp
81134ffc:	dfc00117 	ldw	ra,4(sp)
81135000:	df000017 	ldw	fp,0(sp)
81135004:	dec00204 	addi	sp,sp,8
81135008:	f800283a 	ret

8113500c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
8113500c:	defffa04 	addi	sp,sp,-24
81135010:	de00012e 	bgeu	sp,et,81135018 <mark_cluster+0xc>
81135014:	003b68fa 	trap	3
81135018:	dfc00515 	stw	ra,20(sp)
8113501c:	df000415 	stw	fp,16(sp)
81135020:	df000404 	addi	fp,sp,16
81135024:	e13ffd15 	stw	r4,-12(fp)
81135028:	2805883a 	mov	r2,r5
8113502c:	e1bfff15 	stw	r6,-4(fp)
81135030:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
81135034:	e0bffd17 	ldw	r2,-12(fp)
81135038:	1004d23a 	srli	r2,r2,8
8113503c:	d0e09b17 	ldw	r3,-32148(gp)
81135040:	10c5883a 	add	r2,r2,r3
81135044:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
81135048:	e0bfff17 	ldw	r2,-4(fp)
8113504c:	10000726 	beq	r2,zero,8113506c <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81135050:	00a04574 	movhi	r2,33045
81135054:	109c9a04 	addi	r2,r2,29288
81135058:	10801117 	ldw	r2,68(r2)
8113505c:	e0fffc17 	ldw	r3,-16(fp)
81135060:	1885883a 	add	r2,r3,r2
81135064:	e0bffc15 	stw	r2,-16(fp)
81135068:	00000606 	br	81135084 <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
8113506c:	00a04574 	movhi	r2,33045
81135070:	109c9a04 	addi	r2,r2,29288
81135074:	10801217 	ldw	r2,72(r2)
81135078:	e0fffc17 	ldw	r3,-16(fp)
8113507c:	1885883a 	add	r2,r3,r2
81135080:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
81135084:	d0a09f17 	ldw	r2,-32132(gp)
81135088:	e0fffc17 	ldw	r3,-16(fp)
8113508c:	18800726 	beq	r3,r2,811350ac <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81135090:	e0bffc17 	ldw	r2,-16(fp)
81135094:	000b883a 	mov	r5,zero
81135098:	1009883a 	mov	r4,r2
8113509c:	1134e700 	call	81134e70 <Read_Sector_Data>
811350a0:	1000021e 	bne	r2,zero,811350ac <mark_cluster+0xa0>
        {
            return false;
811350a4:	0005883a 	mov	r2,zero
811350a8:	00000d06 	br	811350e0 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
811350ac:	e0bffd17 	ldw	r2,-12(fp)
811350b0:	10803fcc 	andi	r2,r2,255
811350b4:	1085883a 	add	r2,r2,r2
811350b8:	1007883a 	mov	r3,r2
811350bc:	d0a09d17 	ldw	r2,-32140(gp)
811350c0:	10800a17 	ldw	r2,40(r2)
811350c4:	1885883a 	add	r2,r3,r2
811350c8:	1007883a 	mov	r3,r2
811350cc:	e0bffe0f 	ldh	r2,-8(fp)
811350d0:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
811350d4:	00800044 	movi	r2,1
811350d8:	d0a09e15 	stw	r2,-32136(gp)
    return true;
811350dc:	00800044 	movi	r2,1
}
811350e0:	e037883a 	mov	sp,fp
811350e4:	dfc00117 	ldw	ra,4(sp)
811350e8:	df000017 	ldw	fp,0(sp)
811350ec:	dec00204 	addi	sp,sp,8
811350f0:	f800283a 	ret

811350f4 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
811350f4:	defff704 	addi	sp,sp,-36
811350f8:	de00012e 	bgeu	sp,et,81135100 <Check_for_Master_Boot_Record+0xc>
811350fc:	003b68fa 	trap	3
81135100:	dfc00815 	stw	ra,32(sp)
81135104:	df000715 	stw	fp,28(sp)
81135108:	df000704 	addi	fp,sp,28
	bool result = false;
8113510c:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81135110:	000b883a 	mov	r5,zero
81135114:	0009883a 	mov	r4,zero
81135118:	1134e700 	call	81134e70 <Read_Sector_Data>
8113511c:	10005a26 	beq	r2,zero,81135288 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81135120:	d0a09d17 	ldw	r2,-32140(gp)
81135124:	10800a17 	ldw	r2,40(r2)
81135128:	10807f84 	addi	r2,r2,510
8113512c:	1080002b 	ldhuio	r2,0(r2)
81135130:	10bfffcc 	andi	r2,r2,65535
81135134:	10bfffcc 	andi	r2,r2,65535
81135138:	10a0001c 	xori	r2,r2,32768
8113513c:	10a00004 	addi	r2,r2,-32768
81135140:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
81135144:	e0bffb17 	ldw	r2,-20(fp)
81135148:	10ffffcc 	andi	r3,r2,65535
8113514c:	00aa9554 	movui	r2,43605
81135150:	18804d1e 	bne	r3,r2,81135288 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81135154:	e03ffa15 	stw	zero,-24(fp)
81135158:	00004806 	br	8113527c <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
8113515c:	e0bffa17 	ldw	r2,-24(fp)
81135160:	1004913a 	slli	r2,r2,4
81135164:	10806f84 	addi	r2,r2,446
81135168:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
8113516c:	d0a09d17 	ldw	r2,-32140(gp)
81135170:	10c00a17 	ldw	r3,40(r2)
81135174:	e0bffc17 	ldw	r2,-16(fp)
81135178:	1885883a 	add	r2,r3,r2
8113517c:	10800104 	addi	r2,r2,4
81135180:	10800023 	ldbuio	r2,0(r2)
81135184:	10803fcc 	andi	r2,r2,255
81135188:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
8113518c:	e0bffd07 	ldb	r2,-12(fp)
81135190:	10800060 	cmpeqi	r2,r2,1
81135194:	1000091e 	bne	r2,zero,811351bc <Check_for_Master_Boot_Record+0xc8>
81135198:	e0bffd07 	ldb	r2,-12(fp)
8113519c:	10800120 	cmpeqi	r2,r2,4
811351a0:	1000061e 	bne	r2,zero,811351bc <Check_for_Master_Boot_Record+0xc8>
811351a4:	e0bffd07 	ldb	r2,-12(fp)
811351a8:	108001a0 	cmpeqi	r2,r2,6
811351ac:	1000031e 	bne	r2,zero,811351bc <Check_for_Master_Boot_Record+0xc8>
811351b0:	e0bffd07 	ldb	r2,-12(fp)
811351b4:	10800398 	cmpnei	r2,r2,14
811351b8:	10002d1e 	bne	r2,zero,81135270 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
811351bc:	d0a09d17 	ldw	r2,-32140(gp)
811351c0:	10c00a17 	ldw	r3,40(r2)
811351c4:	e0bffc17 	ldw	r2,-16(fp)
811351c8:	1885883a 	add	r2,r3,r2
811351cc:	10800284 	addi	r2,r2,10
811351d0:	1080002b 	ldhuio	r2,0(r2)
811351d4:	10bfffcc 	andi	r2,r2,65535
811351d8:	1006943a 	slli	r3,r2,16
811351dc:	d0a09d17 	ldw	r2,-32140(gp)
811351e0:	11000a17 	ldw	r4,40(r2)
811351e4:	e0bffc17 	ldw	r2,-16(fp)
811351e8:	2085883a 	add	r2,r4,r2
811351ec:	10800204 	addi	r2,r2,8
811351f0:	1080002b 	ldhuio	r2,0(r2)
811351f4:	10bfffcc 	andi	r2,r2,65535
811351f8:	10bfffcc 	andi	r2,r2,65535
811351fc:	1884b03a 	or	r2,r3,r2
81135200:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
81135204:	d0a09d17 	ldw	r2,-32140(gp)
81135208:	10c00a17 	ldw	r3,40(r2)
8113520c:	e0bffc17 	ldw	r2,-16(fp)
81135210:	1885883a 	add	r2,r3,r2
81135214:	10800384 	addi	r2,r2,14
81135218:	1080002b 	ldhuio	r2,0(r2)
8113521c:	10bfffcc 	andi	r2,r2,65535
81135220:	1006943a 	slli	r3,r2,16
81135224:	d0a09d17 	ldw	r2,-32140(gp)
81135228:	11000a17 	ldw	r4,40(r2)
8113522c:	e0bffc17 	ldw	r2,-16(fp)
81135230:	2085883a 	add	r2,r4,r2
81135234:	10800304 	addi	r2,r2,12
81135238:	1080002b 	ldhuio	r2,0(r2)
8113523c:	10bfffcc 	andi	r2,r2,65535
81135240:	10bfffcc 	andi	r2,r2,65535
81135244:	1884b03a 	or	r2,r3,r2
81135248:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
8113524c:	e0bfff17 	ldw	r2,-4(fp)
81135250:	0080070e 	bge	zero,r2,81135270 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
81135254:	00800044 	movi	r2,1
81135258:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
8113525c:	e0bfff17 	ldw	r2,-4(fp)
81135260:	d0a09c15 	stw	r2,-32144(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
81135264:	e0bffe17 	ldw	r2,-8(fp)
81135268:	d0a09b15 	stw	r2,-32148(gp)
						break;
8113526c:	00000606 	br	81135288 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81135270:	e0bffa17 	ldw	r2,-24(fp)
81135274:	10800044 	addi	r2,r2,1
81135278:	e0bffa15 	stw	r2,-24(fp)
8113527c:	e0bffa17 	ldw	r2,-24(fp)
81135280:	10800110 	cmplti	r2,r2,4
81135284:	103fb51e 	bne	r2,zero,8113515c <__reset+0xfb11515c>
				}
			}
		}
	}

	return result;
81135288:	e0bff917 	ldw	r2,-28(fp)
}
8113528c:	e037883a 	mov	sp,fp
81135290:	dfc00117 	ldw	ra,4(sp)
81135294:	df000017 	ldw	fp,0(sp)
81135298:	dec00204 	addi	sp,sp,8
8113529c:	f800283a 	ret

811352a0 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
811352a0:	defff804 	addi	sp,sp,-32
811352a4:	de00012e 	bgeu	sp,et,811352ac <Read_File_Record_At_Offset+0xc>
811352a8:	003b68fa 	trap	3
811352ac:	dfc00715 	stw	ra,28(sp)
811352b0:	df000615 	stw	fp,24(sp)
811352b4:	df000604 	addi	fp,sp,24
811352b8:	e13ffc15 	stw	r4,-16(fp)
811352bc:	e17ffd15 	stw	r5,-12(fp)
811352c0:	e1bffe15 	stw	r6,-8(fp)
811352c4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
811352c8:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811352cc:	e0bffc17 	ldw	r2,-16(fp)
811352d0:	108007cc 	andi	r2,r2,31
811352d4:	10008d1e 	bne	r2,zero,8113550c <Read_File_Record_At_Offset+0x26c>
811352d8:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
811352dc:	10008b26 	beq	r2,zero,8113550c <Read_File_Record_At_Offset+0x26c>
811352e0:	d0a09417 	ldw	r2,-32176(gp)
811352e4:	10008926 	beq	r2,zero,8113550c <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
811352e8:	e03ffb15 	stw	zero,-20(fp)
811352ec:	00001106 	br	81135334 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
811352f0:	e0fffc17 	ldw	r3,-16(fp)
811352f4:	e0bffb17 	ldw	r2,-20(fp)
811352f8:	1885883a 	add	r2,r3,r2
811352fc:	1007883a 	mov	r3,r2
81135300:	d0a09d17 	ldw	r2,-32140(gp)
81135304:	10800a17 	ldw	r2,40(r2)
81135308:	1885883a 	add	r2,r3,r2
8113530c:	10800023 	ldbuio	r2,0(r2)
81135310:	10803fcc 	andi	r2,r2,255
81135314:	1009883a 	mov	r4,r2
81135318:	e0fffd17 	ldw	r3,-12(fp)
8113531c:	e0bffb17 	ldw	r2,-20(fp)
81135320:	1885883a 	add	r2,r3,r2
81135324:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81135328:	e0bffb17 	ldw	r2,-20(fp)
8113532c:	10800044 	addi	r2,r2,1
81135330:	e0bffb15 	stw	r2,-20(fp)
81135334:	e0bffb17 	ldw	r2,-20(fp)
81135338:	10800210 	cmplti	r2,r2,8
8113533c:	103fec1e 	bne	r2,zero,811352f0 <__reset+0xfb1152f0>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81135340:	e03ffb15 	stw	zero,-20(fp)
81135344:	00001306 	br	81135394 <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81135348:	e0fffc17 	ldw	r3,-16(fp)
8113534c:	e0bffb17 	ldw	r2,-20(fp)
81135350:	1885883a 	add	r2,r3,r2
81135354:	1007883a 	mov	r3,r2
81135358:	d0a09d17 	ldw	r2,-32140(gp)
8113535c:	10800a17 	ldw	r2,40(r2)
81135360:	1885883a 	add	r2,r3,r2
81135364:	10800204 	addi	r2,r2,8
81135368:	10800023 	ldbuio	r2,0(r2)
8113536c:	10803fcc 	andi	r2,r2,255
81135370:	1009883a 	mov	r4,r2
81135374:	e0fffd17 	ldw	r3,-12(fp)
81135378:	e0bffb17 	ldw	r2,-20(fp)
8113537c:	1885883a 	add	r2,r3,r2
81135380:	10800204 	addi	r2,r2,8
81135384:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81135388:	e0bffb17 	ldw	r2,-20(fp)
8113538c:	10800044 	addi	r2,r2,1
81135390:	e0bffb15 	stw	r2,-20(fp)
81135394:	e0bffb17 	ldw	r2,-20(fp)
81135398:	108000d0 	cmplti	r2,r2,3
8113539c:	103fea1e 	bne	r2,zero,81135348 <__reset+0xfb115348>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
811353a0:	d0a09d17 	ldw	r2,-32140(gp)
811353a4:	10c00a17 	ldw	r3,40(r2)
811353a8:	e0bffc17 	ldw	r2,-16(fp)
811353ac:	1885883a 	add	r2,r3,r2
811353b0:	108002c4 	addi	r2,r2,11
811353b4:	10800023 	ldbuio	r2,0(r2)
811353b8:	10803fcc 	andi	r2,r2,255
811353bc:	1007883a 	mov	r3,r2
811353c0:	e0bffd17 	ldw	r2,-12(fp)
811353c4:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
811353c8:	d0a09d17 	ldw	r2,-32140(gp)
811353cc:	10c00a17 	ldw	r3,40(r2)
811353d0:	e0bffc17 	ldw	r2,-16(fp)
811353d4:	1885883a 	add	r2,r3,r2
811353d8:	10800384 	addi	r2,r2,14
811353dc:	1080002b 	ldhuio	r2,0(r2)
811353e0:	10bfffcc 	andi	r2,r2,65535
811353e4:	1007883a 	mov	r3,r2
811353e8:	e0bffd17 	ldw	r2,-12(fp)
811353ec:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
811353f0:	d0a09d17 	ldw	r2,-32140(gp)
811353f4:	10c00a17 	ldw	r3,40(r2)
811353f8:	e0bffc17 	ldw	r2,-16(fp)
811353fc:	1885883a 	add	r2,r3,r2
81135400:	10800404 	addi	r2,r2,16
81135404:	1080002b 	ldhuio	r2,0(r2)
81135408:	10bfffcc 	andi	r2,r2,65535
8113540c:	1007883a 	mov	r3,r2
81135410:	e0bffd17 	ldw	r2,-12(fp)
81135414:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81135418:	d0a09d17 	ldw	r2,-32140(gp)
8113541c:	10c00a17 	ldw	r3,40(r2)
81135420:	e0bffc17 	ldw	r2,-16(fp)
81135424:	1885883a 	add	r2,r3,r2
81135428:	10800484 	addi	r2,r2,18
8113542c:	1080002b 	ldhuio	r2,0(r2)
81135430:	10bfffcc 	andi	r2,r2,65535
81135434:	1007883a 	mov	r3,r2
81135438:	e0bffd17 	ldw	r2,-12(fp)
8113543c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
81135440:	d0a09d17 	ldw	r2,-32140(gp)
81135444:	10c00a17 	ldw	r3,40(r2)
81135448:	e0bffc17 	ldw	r2,-16(fp)
8113544c:	1885883a 	add	r2,r3,r2
81135450:	10800584 	addi	r2,r2,22
81135454:	1080002b 	ldhuio	r2,0(r2)
81135458:	10bfffcc 	andi	r2,r2,65535
8113545c:	1007883a 	mov	r3,r2
81135460:	e0bffd17 	ldw	r2,-12(fp)
81135464:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81135468:	d0a09d17 	ldw	r2,-32140(gp)
8113546c:	10c00a17 	ldw	r3,40(r2)
81135470:	e0bffc17 	ldw	r2,-16(fp)
81135474:	1885883a 	add	r2,r3,r2
81135478:	10800604 	addi	r2,r2,24
8113547c:	1080002b 	ldhuio	r2,0(r2)
81135480:	10bfffcc 	andi	r2,r2,65535
81135484:	1007883a 	mov	r3,r2
81135488:	e0bffd17 	ldw	r2,-12(fp)
8113548c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81135490:	d0a09d17 	ldw	r2,-32140(gp)
81135494:	10c00a17 	ldw	r3,40(r2)
81135498:	e0bffc17 	ldw	r2,-16(fp)
8113549c:	1885883a 	add	r2,r3,r2
811354a0:	10800684 	addi	r2,r2,26
811354a4:	1080002b 	ldhuio	r2,0(r2)
811354a8:	10bfffcc 	andi	r2,r2,65535
811354ac:	1007883a 	mov	r3,r2
811354b0:	e0bffd17 	ldw	r2,-12(fp)
811354b4:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
811354b8:	d0a09d17 	ldw	r2,-32140(gp)
811354bc:	10c00a17 	ldw	r3,40(r2)
811354c0:	e0bffc17 	ldw	r2,-16(fp)
811354c4:	1885883a 	add	r2,r3,r2
811354c8:	10800704 	addi	r2,r2,28
811354cc:	10800037 	ldwio	r2,0(r2)
811354d0:	1007883a 	mov	r3,r2
811354d4:	e0bffd17 	ldw	r2,-12(fp)
811354d8:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
811354dc:	e0bffd17 	ldw	r2,-12(fp)
811354e0:	e0fffe17 	ldw	r3,-8(fp)
811354e4:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
811354e8:	e0bffd17 	ldw	r2,-12(fp)
811354ec:	e0ffff17 	ldw	r3,-4(fp)
811354f0:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
811354f4:	e0bffc17 	ldw	r2,-16(fp)
811354f8:	1007883a 	mov	r3,r2
811354fc:	e0bffd17 	ldw	r2,-12(fp)
81135500:	10c00c0d 	sth	r3,48(r2)
		result = true;
81135504:	00800044 	movi	r2,1
81135508:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
8113550c:	e0bffa17 	ldw	r2,-24(fp)
}
81135510:	e037883a 	mov	sp,fp
81135514:	dfc00117 	ldw	ra,4(sp)
81135518:	df000017 	ldw	fp,0(sp)
8113551c:	dec00204 	addi	sp,sp,8
81135520:	f800283a 	ret

81135524 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81135524:	defff904 	addi	sp,sp,-28
81135528:	de00012e 	bgeu	sp,et,81135530 <Write_File_Record_At_Offset+0xc>
8113552c:	003b68fa 	trap	3
81135530:	dfc00615 	stw	ra,24(sp)
81135534:	df000515 	stw	fp,20(sp)
81135538:	df000504 	addi	fp,sp,20
8113553c:	e13ffe15 	stw	r4,-8(fp)
81135540:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81135544:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81135548:	e0bffe17 	ldw	r2,-8(fp)
8113554c:	108007cc 	andi	r2,r2,31
81135550:	1000931e 	bne	r2,zero,811357a0 <Write_File_Record_At_Offset+0x27c>
81135554:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81135558:	10009126 	beq	r2,zero,811357a0 <Write_File_Record_At_Offset+0x27c>
8113555c:	d0a09417 	ldw	r2,-32176(gp)
81135560:	10008f26 	beq	r2,zero,811357a0 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81135564:	e03ffc15 	stw	zero,-16(fp)
81135568:	00001f06 	br	811355e8 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
8113556c:	e0bffc17 	ldw	r2,-16(fp)
81135570:	10800044 	addi	r2,r2,1
81135574:	e0ffff17 	ldw	r3,-4(fp)
81135578:	1885883a 	add	r2,r3,r2
8113557c:	10800003 	ldbu	r2,0(r2)
81135580:	10803fcc 	andi	r2,r2,255
81135584:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81135588:	e0bffd0f 	ldh	r2,-12(fp)
8113558c:	1004923a 	slli	r2,r2,8
81135590:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81135594:	e0ffff17 	ldw	r3,-4(fp)
81135598:	e0bffc17 	ldw	r2,-16(fp)
8113559c:	1885883a 	add	r2,r3,r2
811355a0:	10800003 	ldbu	r2,0(r2)
811355a4:	10c03fcc 	andi	r3,r2,255
811355a8:	e0bffd0b 	ldhu	r2,-12(fp)
811355ac:	1884b03a 	or	r2,r3,r2
811355b0:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
811355b4:	e0fffe17 	ldw	r3,-8(fp)
811355b8:	e0bffc17 	ldw	r2,-16(fp)
811355bc:	1885883a 	add	r2,r3,r2
811355c0:	1007883a 	mov	r3,r2
811355c4:	d0a09d17 	ldw	r2,-32140(gp)
811355c8:	10800a17 	ldw	r2,40(r2)
811355cc:	1885883a 	add	r2,r3,r2
811355d0:	1007883a 	mov	r3,r2
811355d4:	e0bffd0f 	ldh	r2,-12(fp)
811355d8:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
811355dc:	e0bffc17 	ldw	r2,-16(fp)
811355e0:	10800084 	addi	r2,r2,2
811355e4:	e0bffc15 	stw	r2,-16(fp)
811355e8:	e0bffc17 	ldw	r2,-16(fp)
811355ec:	10800210 	cmplti	r2,r2,8
811355f0:	103fde1e 	bne	r2,zero,8113556c <__reset+0xfb11556c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
811355f4:	e03ffc15 	stw	zero,-16(fp)
811355f8:	00001306 	br	81135648 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
811355fc:	e0fffe17 	ldw	r3,-8(fp)
81135600:	e0bffc17 	ldw	r2,-16(fp)
81135604:	1885883a 	add	r2,r3,r2
81135608:	1007883a 	mov	r3,r2
8113560c:	d0a09d17 	ldw	r2,-32140(gp)
81135610:	10800a17 	ldw	r2,40(r2)
81135614:	1885883a 	add	r2,r3,r2
81135618:	10800204 	addi	r2,r2,8
8113561c:	1009883a 	mov	r4,r2
81135620:	e0ffff17 	ldw	r3,-4(fp)
81135624:	e0bffc17 	ldw	r2,-16(fp)
81135628:	1885883a 	add	r2,r3,r2
8113562c:	10800204 	addi	r2,r2,8
81135630:	10800003 	ldbu	r2,0(r2)
81135634:	10803fcc 	andi	r2,r2,255
81135638:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8113563c:	e0bffc17 	ldw	r2,-16(fp)
81135640:	10800044 	addi	r2,r2,1
81135644:	e0bffc15 	stw	r2,-16(fp)
81135648:	e0bffc17 	ldw	r2,-16(fp)
8113564c:	108000d0 	cmplti	r2,r2,3
81135650:	103fea1e 	bne	r2,zero,811355fc <__reset+0xfb1155fc>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
81135654:	d0a09d17 	ldw	r2,-32140(gp)
81135658:	10c00a17 	ldw	r3,40(r2)
8113565c:	e0bffe17 	ldw	r2,-8(fp)
81135660:	1885883a 	add	r2,r3,r2
81135664:	108002c4 	addi	r2,r2,11
81135668:	1007883a 	mov	r3,r2
8113566c:	e0bfff17 	ldw	r2,-4(fp)
81135670:	108002c3 	ldbu	r2,11(r2)
81135674:	10803fcc 	andi	r2,r2,255
81135678:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
8113567c:	d0a09d17 	ldw	r2,-32140(gp)
81135680:	10c00a17 	ldw	r3,40(r2)
81135684:	e0bffe17 	ldw	r2,-8(fp)
81135688:	1885883a 	add	r2,r3,r2
8113568c:	10800384 	addi	r2,r2,14
81135690:	1007883a 	mov	r3,r2
81135694:	e0bfff17 	ldw	r2,-4(fp)
81135698:	1080030b 	ldhu	r2,12(r2)
8113569c:	10bfffcc 	andi	r2,r2,65535
811356a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
811356a4:	d0a09d17 	ldw	r2,-32140(gp)
811356a8:	10c00a17 	ldw	r3,40(r2)
811356ac:	e0bffe17 	ldw	r2,-8(fp)
811356b0:	1885883a 	add	r2,r3,r2
811356b4:	10800404 	addi	r2,r2,16
811356b8:	1007883a 	mov	r3,r2
811356bc:	e0bfff17 	ldw	r2,-4(fp)
811356c0:	1080038b 	ldhu	r2,14(r2)
811356c4:	10bfffcc 	andi	r2,r2,65535
811356c8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
811356cc:	d0a09d17 	ldw	r2,-32140(gp)
811356d0:	10c00a17 	ldw	r3,40(r2)
811356d4:	e0bffe17 	ldw	r2,-8(fp)
811356d8:	1885883a 	add	r2,r3,r2
811356dc:	10800484 	addi	r2,r2,18
811356e0:	1007883a 	mov	r3,r2
811356e4:	e0bfff17 	ldw	r2,-4(fp)
811356e8:	1080040b 	ldhu	r2,16(r2)
811356ec:	10bfffcc 	andi	r2,r2,65535
811356f0:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
811356f4:	d0a09d17 	ldw	r2,-32140(gp)
811356f8:	10c00a17 	ldw	r3,40(r2)
811356fc:	e0bffe17 	ldw	r2,-8(fp)
81135700:	1885883a 	add	r2,r3,r2
81135704:	10800584 	addi	r2,r2,22
81135708:	1007883a 	mov	r3,r2
8113570c:	e0bfff17 	ldw	r2,-4(fp)
81135710:	1080048b 	ldhu	r2,18(r2)
81135714:	10bfffcc 	andi	r2,r2,65535
81135718:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
8113571c:	d0a09d17 	ldw	r2,-32140(gp)
81135720:	10c00a17 	ldw	r3,40(r2)
81135724:	e0bffe17 	ldw	r2,-8(fp)
81135728:	1885883a 	add	r2,r3,r2
8113572c:	10800604 	addi	r2,r2,24
81135730:	1007883a 	mov	r3,r2
81135734:	e0bfff17 	ldw	r2,-4(fp)
81135738:	1080050b 	ldhu	r2,20(r2)
8113573c:	10bfffcc 	andi	r2,r2,65535
81135740:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81135744:	d0a09d17 	ldw	r2,-32140(gp)
81135748:	10c00a17 	ldw	r3,40(r2)
8113574c:	e0bffe17 	ldw	r2,-8(fp)
81135750:	1885883a 	add	r2,r3,r2
81135754:	10800684 	addi	r2,r2,26
81135758:	1007883a 	mov	r3,r2
8113575c:	e0bfff17 	ldw	r2,-4(fp)
81135760:	1080058b 	ldhu	r2,22(r2)
81135764:	10bfffcc 	andi	r2,r2,65535
81135768:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
8113576c:	d0a09d17 	ldw	r2,-32140(gp)
81135770:	10c00a17 	ldw	r3,40(r2)
81135774:	e0bffe17 	ldw	r2,-8(fp)
81135778:	1885883a 	add	r2,r3,r2
8113577c:	10800704 	addi	r2,r2,28
81135780:	1007883a 	mov	r3,r2
81135784:	e0bfff17 	ldw	r2,-4(fp)
81135788:	10800617 	ldw	r2,24(r2)
8113578c:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81135790:	00800044 	movi	r2,1
81135794:	d0a09e15 	stw	r2,-32136(gp)
        result = true;
81135798:	00800044 	movi	r2,1
8113579c:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
811357a0:	e0bffb17 	ldw	r2,-20(fp)
}
811357a4:	e037883a 	mov	sp,fp
811357a8:	dfc00117 	ldw	ra,4(sp)
811357ac:	df000017 	ldw	fp,0(sp)
811357b0:	dec00204 	addi	sp,sp,8
811357b4:	f800283a 	ret

811357b8 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
811357b8:	defff904 	addi	sp,sp,-28
811357bc:	de00012e 	bgeu	sp,et,811357c4 <Check_for_DOS_FAT+0xc>
811357c0:	003b68fa 	trap	3
811357c4:	dfc00615 	stw	ra,24(sp)
811357c8:	df000515 	stw	fp,20(sp)
811357cc:	df000504 	addi	fp,sp,20
811357d0:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
811357d4:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
811357d8:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
811357dc:	e17fff17 	ldw	r5,-4(fp)
811357e0:	0009883a 	mov	r4,zero
811357e4:	1134e700 	call	81134e70 <Read_Sector_Data>
811357e8:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
811357ec:	d0a09d17 	ldw	r2,-32140(gp)
811357f0:	10800a17 	ldw	r2,40(r2)
811357f4:	10807f84 	addi	r2,r2,510
811357f8:	1080002b 	ldhuio	r2,0(r2)
811357fc:	10bfffcc 	andi	r2,r2,65535
81135800:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81135804:	e0bffe0f 	ldh	r2,-8(fp)
81135808:	10ffffcc 	andi	r3,r2,65535
8113580c:	00aa9554 	movui	r2,43605
81135810:	1881841e 	bne	r3,r2,81135e24 <Check_for_DOS_FAT+0x66c>
81135814:	e0bffb17 	ldw	r2,-20(fp)
81135818:	10018226 	beq	r2,zero,81135e24 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
8113581c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
81135820:	d0a09d17 	ldw	r2,-32140(gp)
81135824:	10800a17 	ldw	r2,40(r2)
81135828:	10800023 	ldbuio	r2,0(r2)
8113582c:	10803fcc 	andi	r2,r2,255
81135830:	1007883a 	mov	r3,r2
81135834:	00a04574 	movhi	r2,33045
81135838:	109c9a04 	addi	r2,r2,29288
8113583c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
81135840:	d0a09d17 	ldw	r2,-32140(gp)
81135844:	10800a17 	ldw	r2,40(r2)
81135848:	10800044 	addi	r2,r2,1
8113584c:	10800023 	ldbuio	r2,0(r2)
81135850:	10803fcc 	andi	r2,r2,255
81135854:	1007883a 	mov	r3,r2
81135858:	00a04574 	movhi	r2,33045
8113585c:	109c9a04 	addi	r2,r2,29288
81135860:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81135864:	d0a09d17 	ldw	r2,-32140(gp)
81135868:	10800a17 	ldw	r2,40(r2)
8113586c:	10800084 	addi	r2,r2,2
81135870:	10800023 	ldbuio	r2,0(r2)
81135874:	10803fcc 	andi	r2,r2,255
81135878:	1007883a 	mov	r3,r2
8113587c:	00a04574 	movhi	r2,33045
81135880:	109c9a04 	addi	r2,r2,29288
81135884:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81135888:	e03ffc15 	stw	zero,-16(fp)
8113588c:	00001106 	br	811358d4 <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81135890:	d0a09d17 	ldw	r2,-32140(gp)
81135894:	10c00a17 	ldw	r3,40(r2)
81135898:	e0bffc17 	ldw	r2,-16(fp)
8113589c:	1885883a 	add	r2,r3,r2
811358a0:	108000c4 	addi	r2,r2,3
811358a4:	10800023 	ldbuio	r2,0(r2)
811358a8:	10803fcc 	andi	r2,r2,255
811358ac:	1009883a 	mov	r4,r2
811358b0:	00a04574 	movhi	r2,33045
811358b4:	109c9a04 	addi	r2,r2,29288
811358b8:	e0fffc17 	ldw	r3,-16(fp)
811358bc:	10c5883a 	add	r2,r2,r3
811358c0:	108000c4 	addi	r2,r2,3
811358c4:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
811358c8:	e0bffc17 	ldw	r2,-16(fp)
811358cc:	10800044 	addi	r2,r2,1
811358d0:	e0bffc15 	stw	r2,-16(fp)
811358d4:	e0bffc17 	ldw	r2,-16(fp)
811358d8:	10800210 	cmplti	r2,r2,8
811358dc:	103fec1e 	bne	r2,zero,81135890 <__reset+0xfb115890>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
811358e0:	d0a09d17 	ldw	r2,-32140(gp)
811358e4:	10800a17 	ldw	r2,40(r2)
811358e8:	10800304 	addi	r2,r2,12
811358ec:	10800023 	ldbuio	r2,0(r2)
811358f0:	10803fcc 	andi	r2,r2,255
811358f4:	1004923a 	slli	r2,r2,8
811358f8:	1007883a 	mov	r3,r2
811358fc:	d0a09d17 	ldw	r2,-32140(gp)
81135900:	10800a17 	ldw	r2,40(r2)
81135904:	108002c4 	addi	r2,r2,11
81135908:	10800023 	ldbuio	r2,0(r2)
8113590c:	10803fcc 	andi	r2,r2,255
81135910:	10803fcc 	andi	r2,r2,255
81135914:	1080201c 	xori	r2,r2,128
81135918:	10bfe004 	addi	r2,r2,-128
8113591c:	1884b03a 	or	r2,r3,r2
81135920:	1007883a 	mov	r3,r2
81135924:	00a04574 	movhi	r2,33045
81135928:	109c9a04 	addi	r2,r2,29288
8113592c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
81135930:	d0a09d17 	ldw	r2,-32140(gp)
81135934:	10800a17 	ldw	r2,40(r2)
81135938:	10800344 	addi	r2,r2,13
8113593c:	10800023 	ldbuio	r2,0(r2)
81135940:	10803fcc 	andi	r2,r2,255
81135944:	1007883a 	mov	r3,r2
81135948:	00a04574 	movhi	r2,33045
8113594c:	109c9a04 	addi	r2,r2,29288
81135950:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
81135954:	d0a09d17 	ldw	r2,-32140(gp)
81135958:	10800a17 	ldw	r2,40(r2)
8113595c:	10800384 	addi	r2,r2,14
81135960:	1080002b 	ldhuio	r2,0(r2)
81135964:	10bfffcc 	andi	r2,r2,65535
81135968:	1007883a 	mov	r3,r2
8113596c:	00a04574 	movhi	r2,33045
81135970:	109c9a04 	addi	r2,r2,29288
81135974:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81135978:	d0a09d17 	ldw	r2,-32140(gp)
8113597c:	10800a17 	ldw	r2,40(r2)
81135980:	10800404 	addi	r2,r2,16
81135984:	10800023 	ldbuio	r2,0(r2)
81135988:	10803fcc 	andi	r2,r2,255
8113598c:	1007883a 	mov	r3,r2
81135990:	00a04574 	movhi	r2,33045
81135994:	109c9a04 	addi	r2,r2,29288
81135998:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
8113599c:	d0a09d17 	ldw	r2,-32140(gp)
811359a0:	10800a17 	ldw	r2,40(r2)
811359a4:	10800484 	addi	r2,r2,18
811359a8:	10800023 	ldbuio	r2,0(r2)
811359ac:	10803fcc 	andi	r2,r2,255
811359b0:	1004923a 	slli	r2,r2,8
811359b4:	1007883a 	mov	r3,r2
811359b8:	d0a09d17 	ldw	r2,-32140(gp)
811359bc:	10800a17 	ldw	r2,40(r2)
811359c0:	10800444 	addi	r2,r2,17
811359c4:	10800023 	ldbuio	r2,0(r2)
811359c8:	10803fcc 	andi	r2,r2,255
811359cc:	10803fcc 	andi	r2,r2,255
811359d0:	1884b03a 	or	r2,r3,r2
811359d4:	1007883a 	mov	r3,r2
811359d8:	00a04574 	movhi	r2,33045
811359dc:	109c9a04 	addi	r2,r2,29288
811359e0:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
811359e4:	d0a09d17 	ldw	r2,-32140(gp)
811359e8:	10800a17 	ldw	r2,40(r2)
811359ec:	10800504 	addi	r2,r2,20
811359f0:	10800023 	ldbuio	r2,0(r2)
811359f4:	10803fcc 	andi	r2,r2,255
811359f8:	1004923a 	slli	r2,r2,8
811359fc:	1007883a 	mov	r3,r2
81135a00:	d0a09d17 	ldw	r2,-32140(gp)
81135a04:	10800a17 	ldw	r2,40(r2)
81135a08:	108004c4 	addi	r2,r2,19
81135a0c:	10800023 	ldbuio	r2,0(r2)
81135a10:	10803fcc 	andi	r2,r2,255
81135a14:	10803fcc 	andi	r2,r2,255
81135a18:	1884b03a 	or	r2,r3,r2
81135a1c:	1007883a 	mov	r3,r2
81135a20:	00a04574 	movhi	r2,33045
81135a24:	109c9a04 	addi	r2,r2,29288
81135a28:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
81135a2c:	d0a09d17 	ldw	r2,-32140(gp)
81135a30:	10800a17 	ldw	r2,40(r2)
81135a34:	10800544 	addi	r2,r2,21
81135a38:	10800023 	ldbuio	r2,0(r2)
81135a3c:	10803fcc 	andi	r2,r2,255
81135a40:	1007883a 	mov	r3,r2
81135a44:	00a04574 	movhi	r2,33045
81135a48:	109c9a04 	addi	r2,r2,29288
81135a4c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
81135a50:	d0a09d17 	ldw	r2,-32140(gp)
81135a54:	10800a17 	ldw	r2,40(r2)
81135a58:	10800584 	addi	r2,r2,22
81135a5c:	1080002b 	ldhuio	r2,0(r2)
81135a60:	10bfffcc 	andi	r2,r2,65535
81135a64:	1007883a 	mov	r3,r2
81135a68:	00a04574 	movhi	r2,33045
81135a6c:	109c9a04 	addi	r2,r2,29288
81135a70:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
81135a74:	d0a09d17 	ldw	r2,-32140(gp)
81135a78:	10800a17 	ldw	r2,40(r2)
81135a7c:	10800604 	addi	r2,r2,24
81135a80:	1080002b 	ldhuio	r2,0(r2)
81135a84:	10bfffcc 	andi	r2,r2,65535
81135a88:	1007883a 	mov	r3,r2
81135a8c:	00a04574 	movhi	r2,33045
81135a90:	109c9a04 	addi	r2,r2,29288
81135a94:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81135a98:	d0a09d17 	ldw	r2,-32140(gp)
81135a9c:	10800a17 	ldw	r2,40(r2)
81135aa0:	10800684 	addi	r2,r2,26
81135aa4:	1080002b 	ldhuio	r2,0(r2)
81135aa8:	10bfffcc 	andi	r2,r2,65535
81135aac:	1007883a 	mov	r3,r2
81135ab0:	00a04574 	movhi	r2,33045
81135ab4:	109c9a04 	addi	r2,r2,29288
81135ab8:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81135abc:	d0a09d17 	ldw	r2,-32140(gp)
81135ac0:	10800a17 	ldw	r2,40(r2)
81135ac4:	10800704 	addi	r2,r2,28
81135ac8:	10800037 	ldwio	r2,0(r2)
81135acc:	1007883a 	mov	r3,r2
81135ad0:	00a04574 	movhi	r2,33045
81135ad4:	109c9a04 	addi	r2,r2,29288
81135ad8:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81135adc:	d0a09d17 	ldw	r2,-32140(gp)
81135ae0:	10800a17 	ldw	r2,40(r2)
81135ae4:	10800804 	addi	r2,r2,32
81135ae8:	10800037 	ldwio	r2,0(r2)
81135aec:	1007883a 	mov	r3,r2
81135af0:	00a04574 	movhi	r2,33045
81135af4:	109c9a04 	addi	r2,r2,29288
81135af8:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81135afc:	d0a09d17 	ldw	r2,-32140(gp)
81135b00:	10800a17 	ldw	r2,40(r2)
81135b04:	10800904 	addi	r2,r2,36
81135b08:	10800023 	ldbuio	r2,0(r2)
81135b0c:	10803fcc 	andi	r2,r2,255
81135b10:	1007883a 	mov	r3,r2
81135b14:	00a04574 	movhi	r2,33045
81135b18:	109c9a04 	addi	r2,r2,29288
81135b1c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
81135b20:	d0a09d17 	ldw	r2,-32140(gp)
81135b24:	10800a17 	ldw	r2,40(r2)
81135b28:	10800944 	addi	r2,r2,37
81135b2c:	10800023 	ldbuio	r2,0(r2)
81135b30:	10803fcc 	andi	r2,r2,255
81135b34:	1007883a 	mov	r3,r2
81135b38:	00a04574 	movhi	r2,33045
81135b3c:	109c9a04 	addi	r2,r2,29288
81135b40:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
81135b44:	d0a09d17 	ldw	r2,-32140(gp)
81135b48:	10800a17 	ldw	r2,40(r2)
81135b4c:	10800984 	addi	r2,r2,38
81135b50:	10800023 	ldbuio	r2,0(r2)
81135b54:	10803fcc 	andi	r2,r2,255
81135b58:	1007883a 	mov	r3,r2
81135b5c:	00a04574 	movhi	r2,33045
81135b60:	109c9a04 	addi	r2,r2,29288
81135b64:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
81135b68:	00a04574 	movhi	r2,33045
81135b6c:	109c9a04 	addi	r2,r2,29288
81135b70:	1080040b 	ldhu	r2,16(r2)
81135b74:	10ffffcc 	andi	r3,r2,65535
81135b78:	00a04574 	movhi	r2,33045
81135b7c:	109c9a04 	addi	r2,r2,29288
81135b80:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
81135b84:	00a04574 	movhi	r2,33045
81135b88:	109c9a04 	addi	r2,r2,29288
81135b8c:	10c01117 	ldw	r3,68(r2)
81135b90:	00a04574 	movhi	r2,33045
81135b94:	109c9a04 	addi	r2,r2,29288
81135b98:	1080068b 	ldhu	r2,26(r2)
81135b9c:	10bfffcc 	andi	r2,r2,65535
81135ba0:	1887883a 	add	r3,r3,r2
81135ba4:	00a04574 	movhi	r2,33045
81135ba8:	109c9a04 	addi	r2,r2,29288
81135bac:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81135bb0:	00a04574 	movhi	r2,33045
81135bb4:	109c9a04 	addi	r2,r2,29288
81135bb8:	10c01217 	ldw	r3,72(r2)
81135bbc:	00a04574 	movhi	r2,33045
81135bc0:	109c9a04 	addi	r2,r2,29288
81135bc4:	1080068b 	ldhu	r2,26(r2)
81135bc8:	10bfffcc 	andi	r2,r2,65535
81135bcc:	1887883a 	add	r3,r3,r2
81135bd0:	00a04574 	movhi	r2,33045
81135bd4:	109c9a04 	addi	r2,r2,29288
81135bd8:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81135bdc:	00a04574 	movhi	r2,33045
81135be0:	109c9a04 	addi	r2,r2,29288
81135be4:	10c01317 	ldw	r3,76(r2)
81135be8:	00a04574 	movhi	r2,33045
81135bec:	109c9a04 	addi	r2,r2,29288
81135bf0:	1080050b 	ldhu	r2,20(r2)
81135bf4:	10bfffcc 	andi	r2,r2,65535
81135bf8:	1008917a 	slli	r4,r2,5
81135bfc:	00a04574 	movhi	r2,33045
81135c00:	109c9a04 	addi	r2,r2,29288
81135c04:	1080030b 	ldhu	r2,12(r2)
81135c08:	10bfffcc 	andi	r2,r2,65535
81135c0c:	2085283a 	div	r2,r4,r2
81135c10:	1887883a 	add	r3,r3,r2
81135c14:	00a04574 	movhi	r2,33045
81135c18:	109c9a04 	addi	r2,r2,29288
81135c1c:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
81135c20:	00a04574 	movhi	r2,33045
81135c24:	109c9a04 	addi	r2,r2,29288
81135c28:	1080058b 	ldhu	r2,22(r2)
81135c2c:	10bfffcc 	andi	r2,r2,65535
81135c30:	10000b26 	beq	r2,zero,81135c60 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
81135c34:	00a04574 	movhi	r2,33045
81135c38:	109c9a04 	addi	r2,r2,29288
81135c3c:	1080058b 	ldhu	r2,22(r2)
81135c40:	10ffffcc 	andi	r3,r2,65535
81135c44:	00a04574 	movhi	r2,33045
81135c48:	109c9a04 	addi	r2,r2,29288
81135c4c:	10800383 	ldbu	r2,14(r2)
81135c50:	10803fcc 	andi	r2,r2,255
81135c54:	1885283a 	div	r2,r3,r2
81135c58:	e0bffd15 	stw	r2,-12(fp)
81135c5c:	00000906 	br	81135c84 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
81135c60:	00a04574 	movhi	r2,33045
81135c64:	109c9a04 	addi	r2,r2,29288
81135c68:	10c00917 	ldw	r3,36(r2)
81135c6c:	00a04574 	movhi	r2,33045
81135c70:	109c9a04 	addi	r2,r2,29288
81135c74:	10800383 	ldbu	r2,14(r2)
81135c78:	10803fcc 	andi	r2,r2,255
81135c7c:	1885203a 	divu	r2,r3,r2
81135c80:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
81135c84:	e0bffd17 	ldw	r2,-12(fp)
81135c88:	1083fdc8 	cmpgei	r2,r2,4087
81135c8c:	1000051e 	bne	r2,zero,81135ca4 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81135c90:	00a04574 	movhi	r2,33045
81135c94:	109c9a04 	addi	r2,r2,29288
81135c98:	00c00304 	movi	r3,12
81135c9c:	10c01085 	stb	r3,66(r2)
81135ca0:	00000c06 	br	81135cd4 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
81135ca4:	e0bffd17 	ldw	r2,-12(fp)
81135ca8:	00fffb54 	movui	r3,65517
81135cac:	18800516 	blt	r3,r2,81135cc4 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81135cb0:	00a04574 	movhi	r2,33045
81135cb4:	109c9a04 	addi	r2,r2,29288
81135cb8:	00c00404 	movi	r3,16
81135cbc:	10c01085 	stb	r3,66(r2)
81135cc0:	00000406 	br	81135cd4 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
81135cc4:	00a04574 	movhi	r2,33045
81135cc8:	109c9a04 	addi	r2,r2,29288
81135ccc:	00c00804 	movi	r3,32
81135cd0:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
81135cd4:	e03ffc15 	stw	zero,-16(fp)
81135cd8:	00001106 	br	81135d20 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81135cdc:	d0a09d17 	ldw	r2,-32140(gp)
81135ce0:	10c00a17 	ldw	r3,40(r2)
81135ce4:	e0bffc17 	ldw	r2,-16(fp)
81135ce8:	1885883a 	add	r2,r3,r2
81135cec:	108009c4 	addi	r2,r2,39
81135cf0:	10800023 	ldbuio	r2,0(r2)
81135cf4:	10803fcc 	andi	r2,r2,255
81135cf8:	1009883a 	mov	r4,r2
81135cfc:	00a04574 	movhi	r2,33045
81135d00:	109c9a04 	addi	r2,r2,29288
81135d04:	e0fffc17 	ldw	r3,-16(fp)
81135d08:	10c5883a 	add	r2,r2,r3
81135d0c:	10800ac4 	addi	r2,r2,43
81135d10:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
81135d14:	e0bffc17 	ldw	r2,-16(fp)
81135d18:	10800044 	addi	r2,r2,1
81135d1c:	e0bffc15 	stw	r2,-16(fp)
81135d20:	e0bffc17 	ldw	r2,-16(fp)
81135d24:	10800110 	cmplti	r2,r2,4
81135d28:	103fec1e 	bne	r2,zero,81135cdc <__reset+0xfb115cdc>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
81135d2c:	e03ffc15 	stw	zero,-16(fp)
81135d30:	00001106 	br	81135d78 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
81135d34:	d0a09d17 	ldw	r2,-32140(gp)
81135d38:	10c00a17 	ldw	r3,40(r2)
81135d3c:	e0bffc17 	ldw	r2,-16(fp)
81135d40:	1885883a 	add	r2,r3,r2
81135d44:	10800ac4 	addi	r2,r2,43
81135d48:	10800023 	ldbuio	r2,0(r2)
81135d4c:	10803fcc 	andi	r2,r2,255
81135d50:	1009883a 	mov	r4,r2
81135d54:	00a04574 	movhi	r2,33045
81135d58:	109c9a04 	addi	r2,r2,29288
81135d5c:	e0fffc17 	ldw	r3,-16(fp)
81135d60:	10c5883a 	add	r2,r2,r3
81135d64:	10800bc4 	addi	r2,r2,47
81135d68:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
81135d6c:	e0bffc17 	ldw	r2,-16(fp)
81135d70:	10800044 	addi	r2,r2,1
81135d74:	e0bffc15 	stw	r2,-16(fp)
81135d78:	e0bffc17 	ldw	r2,-16(fp)
81135d7c:	108002d0 	cmplti	r2,r2,11
81135d80:	103fec1e 	bne	r2,zero,81135d34 <__reset+0xfb115d34>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81135d84:	e03ffc15 	stw	zero,-16(fp)
81135d88:	00001106 	br	81135dd0 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
81135d8c:	d0a09d17 	ldw	r2,-32140(gp)
81135d90:	10c00a17 	ldw	r3,40(r2)
81135d94:	e0bffc17 	ldw	r2,-16(fp)
81135d98:	1885883a 	add	r2,r3,r2
81135d9c:	10800d84 	addi	r2,r2,54
81135da0:	10800023 	ldbuio	r2,0(r2)
81135da4:	10803fcc 	andi	r2,r2,255
81135da8:	1009883a 	mov	r4,r2
81135dac:	00a04574 	movhi	r2,33045
81135db0:	109c9a04 	addi	r2,r2,29288
81135db4:	e0fffc17 	ldw	r3,-16(fp)
81135db8:	10c5883a 	add	r2,r2,r3
81135dbc:	10800e84 	addi	r2,r2,58
81135dc0:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81135dc4:	e0bffc17 	ldw	r2,-16(fp)
81135dc8:	10800044 	addi	r2,r2,1
81135dcc:	e0bffc15 	stw	r2,-16(fp)
81135dd0:	e0bffc17 	ldw	r2,-16(fp)
81135dd4:	10800210 	cmplti	r2,r2,8
81135dd8:	103fec1e 	bne	r2,zero,81135d8c <__reset+0xfb115d8c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81135ddc:	e03ffc15 	stw	zero,-16(fp)
81135de0:	00000a06 	br	81135e0c <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
81135de4:	00a04574 	movhi	r2,33045
81135de8:	109caf04 	addi	r2,r2,29372
81135dec:	e0fffc17 	ldw	r3,-16(fp)
81135df0:	180691ba 	slli	r3,r3,6
81135df4:	10c5883a 	add	r2,r2,r3
81135df8:	10800f04 	addi	r2,r2,60
81135dfc:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81135e00:	e0bffc17 	ldw	r2,-16(fp)
81135e04:	10800044 	addi	r2,r2,1
81135e08:	e0bffc15 	stw	r2,-16(fp)
81135e0c:	e0bffc17 	ldw	r2,-16(fp)
81135e10:	10800510 	cmplti	r2,r2,20
81135e14:	103ff31e 	bne	r2,zero,81135de4 <__reset+0xfb115de4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
81135e18:	00800044 	movi	r2,1
81135e1c:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
81135e20:	00000106 	br	81135e28 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
81135e24:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
81135e28:	e0bffb17 	ldw	r2,-20(fp)
}
81135e2c:	e037883a 	mov	sp,fp
81135e30:	dfc00117 	ldw	ra,4(sp)
81135e34:	df000017 	ldw	fp,0(sp)
81135e38:	dec00204 	addi	sp,sp,8
81135e3c:	f800283a 	ret

81135e40 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
81135e40:	defffc04 	addi	sp,sp,-16
81135e44:	de00012e 	bgeu	sp,et,81135e4c <Look_for_FAT16+0xc>
81135e48:	003b68fa 	trap	3
81135e4c:	dfc00315 	stw	ra,12(sp)
81135e50:	df000215 	stw	fp,8(sp)
81135e54:	df000204 	addi	fp,sp,8
	bool result = false;
81135e58:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
81135e5c:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81135e60:	10002e26 	beq	r2,zero,81135f1c <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
81135e64:	d0a09717 	ldw	r2,-32164(gp)
81135e68:	1080000b 	ldhu	r2,0(r2)
81135e6c:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
81135e70:	d0209b15 	stw	zero,-32148(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
81135e74:	d0209c15 	stw	zero,-32144(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
81135e78:	e0bfff0f 	ldh	r2,-4(fp)
81135e7c:	10002716 	blt	r2,zero,81135f1c <Look_for_FAT16+0xdc>
81135e80:	e0bfff0b 	ldhu	r2,-4(fp)
81135e84:	10bfffcc 	andi	r2,r2,65535
81135e88:	1083000c 	andi	r2,r2,3072
81135e8c:	10830020 	cmpeqi	r2,r2,3072
81135e90:	1000221e 	bne	r2,zero,81135f1c <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
81135e94:	e0bfff0b 	ldhu	r2,-4(fp)
81135e98:	10bfffcc 	andi	r2,r2,65535
81135e9c:	1083000c 	andi	r2,r2,3072
81135ea0:	10810018 	cmpnei	r2,r2,1024
81135ea4:	1000031e 	bne	r2,zero,81135eb4 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81135ea8:	0009883a 	mov	r4,zero
81135eac:	11357b80 	call	811357b8 <Check_for_DOS_FAT>
81135eb0:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
81135eb4:	e0bfff0b 	ldhu	r2,-4(fp)
81135eb8:	10bfffcc 	andi	r2,r2,65535
81135ebc:	1083000c 	andi	r2,r2,3072
81135ec0:	1000061e 	bne	r2,zero,81135edc <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
81135ec4:	11350f40 	call	811350f4 <Check_for_Master_Boot_Record>
81135ec8:	10000426 	beq	r2,zero,81135edc <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81135ecc:	d0a09b17 	ldw	r2,-32148(gp)
81135ed0:	1009883a 	mov	r4,r2
81135ed4:	11357b80 	call	811357b8 <Check_for_DOS_FAT>
81135ed8:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81135edc:	e0bffe17 	ldw	r2,-8(fp)
81135ee0:	10800058 	cmpnei	r2,r2,1
81135ee4:	10000d1e 	bne	r2,zero,81135f1c <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81135ee8:	00a04574 	movhi	r2,33045
81135eec:	109c9a04 	addi	r2,r2,29288
81135ef0:	10801083 	ldbu	r2,66(r2)
81135ef4:	10803fcc 	andi	r2,r2,255
81135ef8:	10800420 	cmpeqi	r2,r2,16
81135efc:	1000021e 	bne	r2,zero,81135f08 <Look_for_FAT16+0xc8>
				{
					result = false;
81135f00:	e03ffe15 	stw	zero,-8(fp)
81135f04:	00000506 	br	81135f1c <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81135f08:	00a04574 	movhi	r2,33045
81135f0c:	109c9a04 	addi	r2,r2,29288
81135f10:	1080058b 	ldhu	r2,22(r2)
81135f14:	10bfffcc 	andi	r2,r2,65535
81135f18:	d0a09c15 	stw	r2,-32144(gp)
				}
			}
		}
	}
	return result;
81135f1c:	e0bffe17 	ldw	r2,-8(fp)
}
81135f20:	e037883a 	mov	sp,fp
81135f24:	dfc00117 	ldw	ra,4(sp)
81135f28:	df000017 	ldw	fp,0(sp)
81135f2c:	dec00204 	addi	sp,sp,8
81135f30:	f800283a 	ret

81135f34 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
81135f34:	defffb04 	addi	sp,sp,-20
81135f38:	de00012e 	bgeu	sp,et,81135f40 <filename_to_upper_case+0xc>
81135f3c:	003b68fa 	trap	3
81135f40:	dfc00415 	stw	ra,16(sp)
81135f44:	df000315 	stw	fp,12(sp)
81135f48:	df000304 	addi	fp,sp,12
81135f4c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
81135f50:	e13fff17 	ldw	r4,-4(fp)
81135f54:	111510c0 	call	8111510c <strlen>
81135f58:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
81135f5c:	e03ffd15 	stw	zero,-12(fp)
81135f60:	00001e06 	br	81135fdc <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
81135f64:	e0bffd17 	ldw	r2,-12(fp)
81135f68:	e0ffff17 	ldw	r3,-4(fp)
81135f6c:	1885883a 	add	r2,r3,r2
81135f70:	10800003 	ldbu	r2,0(r2)
81135f74:	10803fcc 	andi	r2,r2,255
81135f78:	1080201c 	xori	r2,r2,128
81135f7c:	10bfe004 	addi	r2,r2,-128
81135f80:	10801850 	cmplti	r2,r2,97
81135f84:	1000121e 	bne	r2,zero,81135fd0 <filename_to_upper_case+0x9c>
81135f88:	e0bffd17 	ldw	r2,-12(fp)
81135f8c:	e0ffff17 	ldw	r3,-4(fp)
81135f90:	1885883a 	add	r2,r3,r2
81135f94:	10800003 	ldbu	r2,0(r2)
81135f98:	10803fcc 	andi	r2,r2,255
81135f9c:	1080201c 	xori	r2,r2,128
81135fa0:	10bfe004 	addi	r2,r2,-128
81135fa4:	10801ec8 	cmpgei	r2,r2,123
81135fa8:	1000091e 	bne	r2,zero,81135fd0 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81135fac:	e0bffd17 	ldw	r2,-12(fp)
81135fb0:	e0ffff17 	ldw	r3,-4(fp)
81135fb4:	1885883a 	add	r2,r3,r2
81135fb8:	e0fffd17 	ldw	r3,-12(fp)
81135fbc:	e13fff17 	ldw	r4,-4(fp)
81135fc0:	20c7883a 	add	r3,r4,r3
81135fc4:	18c00003 	ldbu	r3,0(r3)
81135fc8:	18fff804 	addi	r3,r3,-32
81135fcc:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81135fd0:	e0bffd17 	ldw	r2,-12(fp)
81135fd4:	10800044 	addi	r2,r2,1
81135fd8:	e0bffd15 	stw	r2,-12(fp)
81135fdc:	e0fffd17 	ldw	r3,-12(fp)
81135fe0:	e0bffe17 	ldw	r2,-8(fp)
81135fe4:	18bfdf16 	blt	r3,r2,81135f64 <__reset+0xfb115f64>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81135fe8:	0001883a 	nop
81135fec:	e037883a 	mov	sp,fp
81135ff0:	dfc00117 	ldw	ra,4(sp)
81135ff4:	df000017 	ldw	fp,0(sp)
81135ff8:	dec00204 	addi	sp,sp,8
81135ffc:	f800283a 	ret

81136000 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81136000:	defff804 	addi	sp,sp,-32
81136004:	de00012e 	bgeu	sp,et,8113600c <check_file_name_for_FAT16_compliance+0xc>
81136008:	003b68fa 	trap	3
8113600c:	dfc00715 	stw	ra,28(sp)
81136010:	df000615 	stw	fp,24(sp)
81136014:	df000604 	addi	fp,sp,24
81136018:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
8113601c:	e13fff17 	ldw	r4,-4(fp)
81136020:	111510c0 	call	8111510c <strlen>
81136024:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81136028:	00bfffc4 	movi	r2,-1
8113602c:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
81136030:	00bfffc4 	movi	r2,-1
81136034:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
81136038:	00800044 	movi	r2,1
8113603c:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
81136040:	e03ffa15 	stw	zero,-24(fp)
81136044:	00006d06 	br	811361fc <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
81136048:	e0bffa17 	ldw	r2,-24(fp)
8113604c:	e0ffff17 	ldw	r3,-4(fp)
81136050:	1885883a 	add	r2,r3,r2
81136054:	10800003 	ldbu	r2,0(r2)
81136058:	10803fcc 	andi	r2,r2,255
8113605c:	1080201c 	xori	r2,r2,128
81136060:	10bfe004 	addi	r2,r2,-128
81136064:	10800820 	cmpeqi	r2,r2,32
81136068:	10003e1e 	bne	r2,zero,81136164 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8113606c:	e0bffa17 	ldw	r2,-24(fp)
81136070:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
81136074:	e0bffb17 	ldw	r2,-20(fp)
81136078:	1880121e 	bne	r3,r2,811360c4 <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8113607c:	e0bffa17 	ldw	r2,-24(fp)
81136080:	e0ffff17 	ldw	r3,-4(fp)
81136084:	1885883a 	add	r2,r3,r2
81136088:	10800003 	ldbu	r2,0(r2)
8113608c:	10803fcc 	andi	r2,r2,255
81136090:	1080201c 	xori	r2,r2,128
81136094:	10bfe004 	addi	r2,r2,-128
81136098:	10801720 	cmpeqi	r2,r2,92
8113609c:	1000311e 	bne	r2,zero,81136164 <check_file_name_for_FAT16_compliance+0x164>
811360a0:	e0bffa17 	ldw	r2,-24(fp)
811360a4:	e0ffff17 	ldw	r3,-4(fp)
811360a8:	1885883a 	add	r2,r3,r2
811360ac:	10800003 	ldbu	r2,0(r2)
811360b0:	10803fcc 	andi	r2,r2,255
811360b4:	1080201c 	xori	r2,r2,128
811360b8:	10bfe004 	addi	r2,r2,-128
811360bc:	10800be0 	cmpeqi	r2,r2,47
811360c0:	1000281e 	bne	r2,zero,81136164 <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
811360c4:	e0fffa17 	ldw	r3,-24(fp)
811360c8:	e0bffc17 	ldw	r2,-16(fp)
811360cc:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811360d0:	10800258 	cmpnei	r2,r2,9
811360d4:	1000091e 	bne	r2,zero,811360fc <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
811360d8:	e0bffa17 	ldw	r2,-24(fp)
811360dc:	e0ffff17 	ldw	r3,-4(fp)
811360e0:	1885883a 	add	r2,r3,r2
811360e4:	10800003 	ldbu	r2,0(r2)
811360e8:	10803fcc 	andi	r2,r2,255
811360ec:	1080201c 	xori	r2,r2,128
811360f0:	10bfe004 	addi	r2,r2,-128
811360f4:	10800b98 	cmpnei	r2,r2,46
811360f8:	10001a1e 	bne	r2,zero,81136164 <check_file_name_for_FAT16_compliance+0x164>
811360fc:	e0fffb17 	ldw	r3,-20(fp)
81136100:	e0bffc17 	ldw	r2,-16(fp)
81136104:	18801926 	beq	r3,r2,8113616c <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81136108:	e0fffa17 	ldw	r3,-24(fp)
8113610c:	e0bffc17 	ldw	r2,-16(fp)
81136110:	1885c83a 	sub	r2,r3,r2
81136114:	10800110 	cmplti	r2,r2,4
81136118:	1000141e 	bne	r2,zero,8113616c <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8113611c:	e0bffa17 	ldw	r2,-24(fp)
81136120:	e0ffff17 	ldw	r3,-4(fp)
81136124:	1885883a 	add	r2,r3,r2
81136128:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8113612c:	10803fcc 	andi	r2,r2,255
81136130:	1080201c 	xori	r2,r2,128
81136134:	10bfe004 	addi	r2,r2,-128
81136138:	10801720 	cmpeqi	r2,r2,92
8113613c:	10000b1e 	bne	r2,zero,8113616c <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81136140:	e0bffa17 	ldw	r2,-24(fp)
81136144:	e0ffff17 	ldw	r3,-4(fp)
81136148:	1885883a 	add	r2,r3,r2
8113614c:	10800003 	ldbu	r2,0(r2)
81136150:	10803fcc 	andi	r2,r2,255
81136154:	1080201c 	xori	r2,r2,128
81136158:	10bfe004 	addi	r2,r2,-128
8113615c:	10800be0 	cmpeqi	r2,r2,47
81136160:	1000021e 	bne	r2,zero,8113616c <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
81136164:	e03ffd15 	stw	zero,-12(fp)
            break;
81136168:	00002706 	br	81136208 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
8113616c:	e0bffa17 	ldw	r2,-24(fp)
81136170:	e0ffff17 	ldw	r3,-4(fp)
81136174:	1885883a 	add	r2,r3,r2
81136178:	10800003 	ldbu	r2,0(r2)
8113617c:	10803fcc 	andi	r2,r2,255
81136180:	1080201c 	xori	r2,r2,128
81136184:	10bfe004 	addi	r2,r2,-128
81136188:	10801720 	cmpeqi	r2,r2,92
8113618c:	1000091e 	bne	r2,zero,811361b4 <check_file_name_for_FAT16_compliance+0x1b4>
81136190:	e0bffa17 	ldw	r2,-24(fp)
81136194:	e0ffff17 	ldw	r3,-4(fp)
81136198:	1885883a 	add	r2,r3,r2
8113619c:	10800003 	ldbu	r2,0(r2)
811361a0:	10803fcc 	andi	r2,r2,255
811361a4:	1080201c 	xori	r2,r2,128
811361a8:	10bfe004 	addi	r2,r2,-128
811361ac:	10800bd8 	cmpnei	r2,r2,47
811361b0:	1000041e 	bne	r2,zero,811361c4 <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
811361b4:	e0bffa17 	ldw	r2,-24(fp)
811361b8:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
811361bc:	e0bffa17 	ldw	r2,-24(fp)
811361c0:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
811361c4:	e0bffa17 	ldw	r2,-24(fp)
811361c8:	e0ffff17 	ldw	r3,-4(fp)
811361cc:	1885883a 	add	r2,r3,r2
811361d0:	10800003 	ldbu	r2,0(r2)
811361d4:	10803fcc 	andi	r2,r2,255
811361d8:	1080201c 	xori	r2,r2,128
811361dc:	10bfe004 	addi	r2,r2,-128
811361e0:	10800b98 	cmpnei	r2,r2,46
811361e4:	1000021e 	bne	r2,zero,811361f0 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
811361e8:	e0bffa17 	ldw	r2,-24(fp)
811361ec:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
811361f0:	e0bffa17 	ldw	r2,-24(fp)
811361f4:	10800044 	addi	r2,r2,1
811361f8:	e0bffa15 	stw	r2,-24(fp)
811361fc:	e0fffa17 	ldw	r3,-24(fp)
81136200:	e0bffe17 	ldw	r2,-8(fp)
81136204:	18bf9016 	blt	r3,r2,81136048 <__reset+0xfb116048>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81136208:	e0bffe17 	ldw	r2,-8(fp)
8113620c:	10bfffc4 	addi	r2,r2,-1
81136210:	e0ffff17 	ldw	r3,-4(fp)
81136214:	1885883a 	add	r2,r3,r2
81136218:	10800003 	ldbu	r2,0(r2)
8113621c:	10803fcc 	andi	r2,r2,255
81136220:	1080201c 	xori	r2,r2,128
81136224:	10bfe004 	addi	r2,r2,-128
81136228:	10801720 	cmpeqi	r2,r2,92
8113622c:	10000a1e 	bne	r2,zero,81136258 <check_file_name_for_FAT16_compliance+0x258>
81136230:	e0bffe17 	ldw	r2,-8(fp)
81136234:	10bfffc4 	addi	r2,r2,-1
81136238:	e0ffff17 	ldw	r3,-4(fp)
8113623c:	1885883a 	add	r2,r3,r2
81136240:	10800003 	ldbu	r2,0(r2)
81136244:	10803fcc 	andi	r2,r2,255
81136248:	1080201c 	xori	r2,r2,128
8113624c:	10bfe004 	addi	r2,r2,-128
81136250:	10800bd8 	cmpnei	r2,r2,47
81136254:	1000011e 	bne	r2,zero,8113625c <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81136258:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
8113625c:	e0bffd17 	ldw	r2,-12(fp)
}
81136260:	e037883a 	mov	sp,fp
81136264:	dfc00117 	ldw	ra,4(sp)
81136268:	df000017 	ldw	fp,0(sp)
8113626c:	dec00204 	addi	sp,sp,8
81136270:	f800283a 	ret

81136274 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
81136274:	defffb04 	addi	sp,sp,-20
81136278:	de00012e 	bgeu	sp,et,81136280 <get_dir_divider_location+0xc>
8113627c:	003b68fa 	trap	3
81136280:	dfc00415 	stw	ra,16(sp)
81136284:	df000315 	stw	fp,12(sp)
81136288:	df000304 	addi	fp,sp,12
8113628c:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81136290:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
81136294:	e13fff17 	ldw	r4,-4(fp)
81136298:	111510c0 	call	8111510c <strlen>
8113629c:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
811362a0:	e03ffd15 	stw	zero,-12(fp)
811362a4:	00001506 	br	811362fc <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
811362a8:	e0bffd17 	ldw	r2,-12(fp)
811362ac:	e0ffff17 	ldw	r3,-4(fp)
811362b0:	1885883a 	add	r2,r3,r2
811362b4:	10800003 	ldbu	r2,0(r2)
811362b8:	10803fcc 	andi	r2,r2,255
811362bc:	1080201c 	xori	r2,r2,128
811362c0:	10bfe004 	addi	r2,r2,-128
811362c4:	10801720 	cmpeqi	r2,r2,92
811362c8:	10000f1e 	bne	r2,zero,81136308 <get_dir_divider_location+0x94>
811362cc:	e0bffd17 	ldw	r2,-12(fp)
811362d0:	e0ffff17 	ldw	r3,-4(fp)
811362d4:	1885883a 	add	r2,r3,r2
811362d8:	10800003 	ldbu	r2,0(r2)
811362dc:	10803fcc 	andi	r2,r2,255
811362e0:	1080201c 	xori	r2,r2,128
811362e4:	10bfe004 	addi	r2,r2,-128
811362e8:	10800be0 	cmpeqi	r2,r2,47
811362ec:	1000061e 	bne	r2,zero,81136308 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
811362f0:	e0bffd17 	ldw	r2,-12(fp)
811362f4:	10800044 	addi	r2,r2,1
811362f8:	e0bffd15 	stw	r2,-12(fp)
811362fc:	e0fffd17 	ldw	r3,-12(fp)
81136300:	e0bffe17 	ldw	r2,-8(fp)
81136304:	18bfe816 	blt	r3,r2,811362a8 <__reset+0xfb1162a8>
        {
            break;
        }
    }
    
    if (index == length)
81136308:	e0fffd17 	ldw	r3,-12(fp)
8113630c:	e0bffe17 	ldw	r2,-8(fp)
81136310:	1880021e 	bne	r3,r2,8113631c <get_dir_divider_location+0xa8>
    {
        index = -1;
81136314:	00bfffc4 	movi	r2,-1
81136318:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
8113631c:	e0bffd17 	ldw	r2,-12(fp)
}
81136320:	e037883a 	mov	sp,fp
81136324:	dfc00117 	ldw	ra,4(sp)
81136328:	df000017 	ldw	fp,0(sp)
8113632c:	dec00204 	addi	sp,sp,8
81136330:	f800283a 	ret

81136334 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81136334:	defffa04 	addi	sp,sp,-24
81136338:	de00012e 	bgeu	sp,et,81136340 <match_file_record_to_name_ext+0xc>
8113633c:	003b68fa 	trap	3
81136340:	df000515 	stw	fp,20(sp)
81136344:	df000504 	addi	fp,sp,20
81136348:	e13ffd15 	stw	r4,-12(fp)
8113634c:	e17ffe15 	stw	r5,-8(fp)
81136350:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
81136354:	00800044 	movi	r2,1
81136358:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
8113635c:	e03ffc15 	stw	zero,-16(fp)
81136360:	00004606 	br	8113647c <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
81136364:	e0fffd17 	ldw	r3,-12(fp)
81136368:	e0bffc17 	ldw	r2,-16(fp)
8113636c:	1885883a 	add	r2,r3,r2
81136370:	10800003 	ldbu	r2,0(r2)
81136374:	10803fcc 	andi	r2,r2,255
81136378:	10801870 	cmpltui	r2,r2,97
8113637c:	1000101e 	bne	r2,zero,811363c0 <match_file_record_to_name_ext+0x8c>
81136380:	e0fffd17 	ldw	r3,-12(fp)
81136384:	e0bffc17 	ldw	r2,-16(fp)
81136388:	1885883a 	add	r2,r3,r2
8113638c:	10800003 	ldbu	r2,0(r2)
81136390:	10803fcc 	andi	r2,r2,255
81136394:	10801ee8 	cmpgeui	r2,r2,123
81136398:	1000091e 	bne	r2,zero,811363c0 <match_file_record_to_name_ext+0x8c>
8113639c:	e0fffd17 	ldw	r3,-12(fp)
811363a0:	e0bffc17 	ldw	r2,-16(fp)
811363a4:	1885883a 	add	r2,r3,r2
811363a8:	10800003 	ldbu	r2,0(r2)
811363ac:	10bff804 	addi	r2,r2,-32
811363b0:	10c03fcc 	andi	r3,r2,255
811363b4:	18c0201c 	xori	r3,r3,128
811363b8:	18ffe004 	addi	r3,r3,-128
811363bc:	00000706 	br	811363dc <match_file_record_to_name_ext+0xa8>
811363c0:	e0fffd17 	ldw	r3,-12(fp)
811363c4:	e0bffc17 	ldw	r2,-16(fp)
811363c8:	1885883a 	add	r2,r3,r2
811363cc:	10800003 	ldbu	r2,0(r2)
811363d0:	10c03fcc 	andi	r3,r2,255
811363d4:	18c0201c 	xori	r3,r3,128
811363d8:	18ffe004 	addi	r3,r3,-128
811363dc:	e0bffc17 	ldw	r2,-16(fp)
811363e0:	e13ffe17 	ldw	r4,-8(fp)
811363e4:	2085883a 	add	r2,r4,r2
811363e8:	10800003 	ldbu	r2,0(r2)
811363ec:	10803fcc 	andi	r2,r2,255
811363f0:	1080201c 	xori	r2,r2,128
811363f4:	10bfe004 	addi	r2,r2,-128
811363f8:	10801850 	cmplti	r2,r2,97
811363fc:	1000121e 	bne	r2,zero,81136448 <match_file_record_to_name_ext+0x114>
81136400:	e0bffc17 	ldw	r2,-16(fp)
81136404:	e13ffe17 	ldw	r4,-8(fp)
81136408:	2085883a 	add	r2,r4,r2
8113640c:	10800003 	ldbu	r2,0(r2)
81136410:	10803fcc 	andi	r2,r2,255
81136414:	1080201c 	xori	r2,r2,128
81136418:	10bfe004 	addi	r2,r2,-128
8113641c:	10801ec8 	cmpgei	r2,r2,123
81136420:	1000091e 	bne	r2,zero,81136448 <match_file_record_to_name_ext+0x114>
81136424:	e0bffc17 	ldw	r2,-16(fp)
81136428:	e13ffe17 	ldw	r4,-8(fp)
8113642c:	2085883a 	add	r2,r4,r2
81136430:	10800003 	ldbu	r2,0(r2)
81136434:	10bff804 	addi	r2,r2,-32
81136438:	10803fcc 	andi	r2,r2,255
8113643c:	1080201c 	xori	r2,r2,128
81136440:	10bfe004 	addi	r2,r2,-128
81136444:	00000706 	br	81136464 <match_file_record_to_name_ext+0x130>
81136448:	e0bffc17 	ldw	r2,-16(fp)
8113644c:	e13ffe17 	ldw	r4,-8(fp)
81136450:	2085883a 	add	r2,r4,r2
81136454:	10800003 	ldbu	r2,0(r2)
81136458:	10803fcc 	andi	r2,r2,255
8113645c:	1080201c 	xori	r2,r2,128
81136460:	10bfe004 	addi	r2,r2,-128
81136464:	18800226 	beq	r3,r2,81136470 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81136468:	e03ffb15 	stw	zero,-20(fp)
			break;
8113646c:	00000606 	br	81136488 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81136470:	e0bffc17 	ldw	r2,-16(fp)
81136474:	10800044 	addi	r2,r2,1
81136478:	e0bffc15 	stw	r2,-16(fp)
8113647c:	e0bffc17 	ldw	r2,-16(fp)
81136480:	10800210 	cmplti	r2,r2,8
81136484:	103fb71e 	bne	r2,zero,81136364 <__reset+0xfb116364>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81136488:	e03ffc15 	stw	zero,-16(fp)
8113648c:	00004a06 	br	811365b8 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81136490:	e0fffd17 	ldw	r3,-12(fp)
81136494:	e0bffc17 	ldw	r2,-16(fp)
81136498:	1885883a 	add	r2,r3,r2
8113649c:	10800204 	addi	r2,r2,8
811364a0:	10800003 	ldbu	r2,0(r2)
811364a4:	10803fcc 	andi	r2,r2,255
811364a8:	10801870 	cmpltui	r2,r2,97
811364ac:	1000121e 	bne	r2,zero,811364f8 <match_file_record_to_name_ext+0x1c4>
811364b0:	e0fffd17 	ldw	r3,-12(fp)
811364b4:	e0bffc17 	ldw	r2,-16(fp)
811364b8:	1885883a 	add	r2,r3,r2
811364bc:	10800204 	addi	r2,r2,8
811364c0:	10800003 	ldbu	r2,0(r2)
811364c4:	10803fcc 	andi	r2,r2,255
811364c8:	10801ee8 	cmpgeui	r2,r2,123
811364cc:	10000a1e 	bne	r2,zero,811364f8 <match_file_record_to_name_ext+0x1c4>
811364d0:	e0fffd17 	ldw	r3,-12(fp)
811364d4:	e0bffc17 	ldw	r2,-16(fp)
811364d8:	1885883a 	add	r2,r3,r2
811364dc:	10800204 	addi	r2,r2,8
811364e0:	10800003 	ldbu	r2,0(r2)
811364e4:	10bff804 	addi	r2,r2,-32
811364e8:	10c03fcc 	andi	r3,r2,255
811364ec:	18c0201c 	xori	r3,r3,128
811364f0:	18ffe004 	addi	r3,r3,-128
811364f4:	00000806 	br	81136518 <match_file_record_to_name_ext+0x1e4>
811364f8:	e0fffd17 	ldw	r3,-12(fp)
811364fc:	e0bffc17 	ldw	r2,-16(fp)
81136500:	1885883a 	add	r2,r3,r2
81136504:	10800204 	addi	r2,r2,8
81136508:	10800003 	ldbu	r2,0(r2)
8113650c:	10c03fcc 	andi	r3,r2,255
81136510:	18c0201c 	xori	r3,r3,128
81136514:	18ffe004 	addi	r3,r3,-128
81136518:	e0bffc17 	ldw	r2,-16(fp)
8113651c:	e13fff17 	ldw	r4,-4(fp)
81136520:	2085883a 	add	r2,r4,r2
81136524:	10800003 	ldbu	r2,0(r2)
81136528:	10803fcc 	andi	r2,r2,255
8113652c:	1080201c 	xori	r2,r2,128
81136530:	10bfe004 	addi	r2,r2,-128
81136534:	10801850 	cmplti	r2,r2,97
81136538:	1000121e 	bne	r2,zero,81136584 <match_file_record_to_name_ext+0x250>
8113653c:	e0bffc17 	ldw	r2,-16(fp)
81136540:	e13fff17 	ldw	r4,-4(fp)
81136544:	2085883a 	add	r2,r4,r2
81136548:	10800003 	ldbu	r2,0(r2)
8113654c:	10803fcc 	andi	r2,r2,255
81136550:	1080201c 	xori	r2,r2,128
81136554:	10bfe004 	addi	r2,r2,-128
81136558:	10801ec8 	cmpgei	r2,r2,123
8113655c:	1000091e 	bne	r2,zero,81136584 <match_file_record_to_name_ext+0x250>
81136560:	e0bffc17 	ldw	r2,-16(fp)
81136564:	e13fff17 	ldw	r4,-4(fp)
81136568:	2085883a 	add	r2,r4,r2
8113656c:	10800003 	ldbu	r2,0(r2)
81136570:	10bff804 	addi	r2,r2,-32
81136574:	10803fcc 	andi	r2,r2,255
81136578:	1080201c 	xori	r2,r2,128
8113657c:	10bfe004 	addi	r2,r2,-128
81136580:	00000706 	br	811365a0 <match_file_record_to_name_ext+0x26c>
81136584:	e0bffc17 	ldw	r2,-16(fp)
81136588:	e13fff17 	ldw	r4,-4(fp)
8113658c:	2085883a 	add	r2,r4,r2
81136590:	10800003 	ldbu	r2,0(r2)
81136594:	10803fcc 	andi	r2,r2,255
81136598:	1080201c 	xori	r2,r2,128
8113659c:	10bfe004 	addi	r2,r2,-128
811365a0:	18800226 	beq	r3,r2,811365ac <match_file_record_to_name_ext+0x278>
        {
            match = false;
811365a4:	e03ffb15 	stw	zero,-20(fp)
			break;
811365a8:	00000606 	br	811365c4 <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
811365ac:	e0bffc17 	ldw	r2,-16(fp)
811365b0:	10800044 	addi	r2,r2,1
811365b4:	e0bffc15 	stw	r2,-16(fp)
811365b8:	e0bffc17 	ldw	r2,-16(fp)
811365bc:	108000d0 	cmplti	r2,r2,3
811365c0:	103fb31e 	bne	r2,zero,81136490 <__reset+0xfb116490>
        {
            match = false;
			break;
        }
    }
	return match;
811365c4:	e0bffb17 	ldw	r2,-20(fp)
}
811365c8:	e037883a 	mov	sp,fp
811365cc:	df000017 	ldw	fp,0(sp)
811365d0:	dec00104 	addi	sp,sp,4
811365d4:	f800283a 	ret

811365d8 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
811365d8:	deffe704 	addi	sp,sp,-100
811365dc:	de00012e 	bgeu	sp,et,811365e4 <get_home_directory_cluster_for_file+0xc>
811365e0:	003b68fa 	trap	3
811365e4:	dfc01815 	stw	ra,96(sp)
811365e8:	df001715 	stw	fp,92(sp)
811365ec:	df001704 	addi	fp,sp,92
811365f0:	e13ffd15 	stw	r4,-12(fp)
811365f4:	e17ffe15 	stw	r5,-8(fp)
811365f8:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
811365fc:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81136600:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81136604:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81136608:	e13ffd17 	ldw	r4,-12(fp)
8113660c:	11362740 	call	81136274 <get_dir_divider_location>
81136610:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81136614:	00012f06 	br	81136ad4 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81136618:	00800804 	movi	r2,32
8113661c:	e0bff905 	stb	r2,-28(fp)
81136620:	00800804 	movi	r2,32
81136624:	e0bff945 	stb	r2,-27(fp)
81136628:	00800804 	movi	r2,32
8113662c:	e0bff985 	stb	r2,-26(fp)
81136630:	00800804 	movi	r2,32
81136634:	e0bff9c5 	stb	r2,-25(fp)
81136638:	00800804 	movi	r2,32
8113663c:	e0bffa05 	stb	r2,-24(fp)
81136640:	00800804 	movi	r2,32
81136644:	e0bffa45 	stb	r2,-23(fp)
81136648:	00800804 	movi	r2,32
8113664c:	e0bffa85 	stb	r2,-22(fp)
81136650:	00800804 	movi	r2,32
81136654:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81136658:	00800804 	movi	r2,32
8113665c:	e0bffb05 	stb	r2,-20(fp)
81136660:	00800804 	movi	r2,32
81136664:	e0bffb45 	stb	r2,-19(fp)
81136668:	00800804 	movi	r2,32
8113666c:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81136670:	00bfffc4 	movi	r2,-1
81136674:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81136678:	e0bfea17 	ldw	r2,-88(fp)
8113667c:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81136680:	e03fec15 	stw	zero,-80(fp)
81136684:	00002d06 	br	8113673c <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81136688:	e0ffec17 	ldw	r3,-80(fp)
8113668c:	e0bfed17 	ldw	r2,-76(fp)
81136690:	1885883a 	add	r2,r3,r2
81136694:	1007883a 	mov	r3,r2
81136698:	e0bffd17 	ldw	r2,-12(fp)
8113669c:	10c5883a 	add	r2,r2,r3
811366a0:	10800003 	ldbu	r2,0(r2)
811366a4:	10803fcc 	andi	r2,r2,255
811366a8:	1080201c 	xori	r2,r2,128
811366ac:	10bfe004 	addi	r2,r2,-128
811366b0:	10800b98 	cmpnei	r2,r2,46
811366b4:	1000031e 	bne	r2,zero,811366c4 <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
811366b8:	e0bfec17 	ldw	r2,-80(fp)
811366bc:	e0bfee15 	stw	r2,-72(fp)
811366c0:	00001b06 	br	81136730 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
811366c4:	e0bfee17 	ldw	r2,-72(fp)
811366c8:	10000c0e 	bge	r2,zero,811366fc <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
811366cc:	e0ffec17 	ldw	r3,-80(fp)
811366d0:	e0bfed17 	ldw	r2,-76(fp)
811366d4:	1885883a 	add	r2,r3,r2
811366d8:	1007883a 	mov	r3,r2
811366dc:	e0bffd17 	ldw	r2,-12(fp)
811366e0:	10c5883a 	add	r2,r2,r3
811366e4:	10c00003 	ldbu	r3,0(r2)
811366e8:	e13ff904 	addi	r4,fp,-28
811366ec:	e0bfec17 	ldw	r2,-80(fp)
811366f0:	2085883a 	add	r2,r4,r2
811366f4:	10c00005 	stb	r3,0(r2)
811366f8:	00000d06 	br	81136730 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
811366fc:	e0ffec17 	ldw	r3,-80(fp)
81136700:	e0bfee17 	ldw	r2,-72(fp)
81136704:	1885c83a 	sub	r2,r3,r2
81136708:	e13fec17 	ldw	r4,-80(fp)
8113670c:	e0ffed17 	ldw	r3,-76(fp)
81136710:	20c7883a 	add	r3,r4,r3
81136714:	1809883a 	mov	r4,r3
81136718:	e0fffd17 	ldw	r3,-12(fp)
8113671c:	1907883a 	add	r3,r3,r4
81136720:	18c00003 	ldbu	r3,0(r3)
81136724:	e13ffb04 	addi	r4,fp,-20
81136728:	2085883a 	add	r2,r4,r2
8113672c:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81136730:	e0bfec17 	ldw	r2,-80(fp)
81136734:	10800044 	addi	r2,r2,1
81136738:	e0bfec15 	stw	r2,-80(fp)
8113673c:	e0ffec17 	ldw	r3,-80(fp)
81136740:	e0bfeb17 	ldw	r2,-84(fp)
81136744:	18bfd016 	blt	r3,r2,81136688 <__reset+0xfb116688>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81136748:	e0bfea17 	ldw	r2,-88(fp)
8113674c:	10005c1e 	bne	r2,zero,811368c0 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81136750:	00a04574 	movhi	r2,33045
81136754:	109c9a04 	addi	r2,r2,29288
81136758:	1080050b 	ldhu	r2,20(r2)
8113675c:	10bfffcc 	andi	r2,r2,65535
81136760:	1006917a 	slli	r3,r2,5
81136764:	00a04574 	movhi	r2,33045
81136768:	109c9a04 	addi	r2,r2,29288
8113676c:	1080030b 	ldhu	r2,12(r2)
81136770:	10bfffcc 	andi	r2,r2,65535
81136774:	1885283a 	div	r2,r3,r2
81136778:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113677c:	e03ff015 	stw	zero,-64(fp)
81136780:	00003b06 	br	81136870 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81136784:	00a04574 	movhi	r2,33045
81136788:	109c9a04 	addi	r2,r2,29288
8113678c:	10c01317 	ldw	r3,76(r2)
81136790:	e0bff017 	ldw	r2,-64(fp)
81136794:	1885883a 	add	r2,r3,r2
81136798:	1007883a 	mov	r3,r2
8113679c:	d0a09b17 	ldw	r2,-32148(gp)
811367a0:	100b883a 	mov	r5,r2
811367a4:	1809883a 	mov	r4,r3
811367a8:	1134e700 	call	81134e70 <Read_Sector_Data>
811367ac:	10003426 	beq	r2,zero,81136880 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811367b0:	e03ff115 	stw	zero,-60(fp)
811367b4:	00002506 	br	8113684c <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
811367b8:	e0bff117 	ldw	r2,-60(fp)
811367bc:	1004917a 	slli	r2,r2,5
811367c0:	e0fff017 	ldw	r3,-64(fp)
811367c4:	180f883a 	mov	r7,r3
811367c8:	000d883a 	mov	r6,zero
811367cc:	e17fff17 	ldw	r5,-4(fp)
811367d0:	1009883a 	mov	r4,r2
811367d4:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811367d8:	e0bfff17 	ldw	r2,-4(fp)
811367dc:	10800003 	ldbu	r2,0(r2)
811367e0:	10803fcc 	andi	r2,r2,255
811367e4:	10803960 	cmpeqi	r2,r2,229
811367e8:	1000151e 	bne	r2,zero,81136840 <get_home_directory_cluster_for_file+0x268>
811367ec:	e0bfff17 	ldw	r2,-4(fp)
811367f0:	10800003 	ldbu	r2,0(r2)
811367f4:	10803fcc 	andi	r2,r2,255
811367f8:	10001126 	beq	r2,zero,81136840 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
811367fc:	e0fffb04 	addi	r3,fp,-20
81136800:	e0bff904 	addi	r2,fp,-28
81136804:	180d883a 	mov	r6,r3
81136808:	100b883a 	mov	r5,r2
8113680c:	e13fff17 	ldw	r4,-4(fp)
81136810:	11363340 	call	81136334 <match_file_record_to_name_ext>
81136814:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81136818:	e0bff817 	ldw	r2,-32(fp)
8113681c:	10000826 	beq	r2,zero,81136840 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
81136820:	e0bfff17 	ldw	r2,-4(fp)
81136824:	1080058b 	ldhu	r2,22(r2)
81136828:	10bfffcc 	andi	r2,r2,65535
8113682c:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81136830:	e0bfff17 	ldw	r2,-4(fp)
81136834:	00c00044 	movi	r3,1
81136838:	10c00a15 	stw	r3,40(r2)
                                break;
8113683c:	00000606 	br	81136858 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81136840:	e0bff117 	ldw	r2,-60(fp)
81136844:	10800044 	addi	r2,r2,1
81136848:	e0bff115 	stw	r2,-60(fp)
8113684c:	e0bff117 	ldw	r2,-60(fp)
81136850:	10800410 	cmplti	r2,r2,16
81136854:	103fd81e 	bne	r2,zero,811367b8 <__reset+0xfb1167b8>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81136858:	e0ffef17 	ldw	r3,-68(fp)
8113685c:	e0bfea17 	ldw	r2,-88(fp)
81136860:	1880091e 	bne	r3,r2,81136888 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81136864:	e0bff017 	ldw	r2,-64(fp)
81136868:	10800044 	addi	r2,r2,1
8113686c:	e0bff015 	stw	r2,-64(fp)
81136870:	e0fff017 	ldw	r3,-64(fp)
81136874:	e0bff717 	ldw	r2,-36(fp)
81136878:	18bfc216 	blt	r3,r2,81136784 <__reset+0xfb116784>
8113687c:	00000306 	br	8113688c <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
81136880:	0001883a 	nop
81136884:	00000106 	br	8113688c <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81136888:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
8113688c:	e0ffef17 	ldw	r3,-68(fp)
81136890:	e0bfea17 	ldw	r2,-88(fp)
81136894:	18800826 	beq	r3,r2,811368b8 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81136898:	e0bfef17 	ldw	r2,-68(fp)
8113689c:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
811368a0:	e0ffed17 	ldw	r3,-76(fp)
811368a4:	e0bfeb17 	ldw	r2,-84(fp)
811368a8:	1885883a 	add	r2,r3,r2
811368ac:	10800044 	addi	r2,r2,1
811368b0:	e0bfed15 	stw	r2,-76(fp)
811368b4:	00007d06 	br	81136aac <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
811368b8:	0005883a 	mov	r2,zero
811368bc:	00009106 	br	81136b04 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
811368c0:	e0bfea17 	ldw	r2,-88(fp)
811368c4:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811368c8:	e0bff417 	ldw	r2,-48(fp)
811368cc:	10ffff84 	addi	r3,r2,-2
811368d0:	00a04574 	movhi	r2,33045
811368d4:	109c9a04 	addi	r2,r2,29288
811368d8:	10800383 	ldbu	r2,14(r2)
811368dc:	10803fcc 	andi	r2,r2,255
811368e0:	1885383a 	mul	r2,r3,r2
811368e4:	1007883a 	mov	r3,r2
811368e8:	00a04574 	movhi	r2,33045
811368ec:	109c9a04 	addi	r2,r2,29288
811368f0:	10801417 	ldw	r2,80(r2)
811368f4:	1885883a 	add	r2,r3,r2
811368f8:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811368fc:	e03ff215 	stw	zero,-56(fp)
81136900:	00003606 	br	811369dc <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81136904:	e0fff217 	ldw	r3,-56(fp)
81136908:	e0bff517 	ldw	r2,-44(fp)
8113690c:	1885883a 	add	r2,r3,r2
81136910:	d0e09b17 	ldw	r3,-32148(gp)
81136914:	180b883a 	mov	r5,r3
81136918:	1009883a 	mov	r4,r2
8113691c:	1134e700 	call	81134e70 <Read_Sector_Data>
81136920:	10003526 	beq	r2,zero,811369f8 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81136924:	e03ff315 	stw	zero,-52(fp)
81136928:	00002306 	br	811369b8 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8113692c:	e0bff317 	ldw	r2,-52(fp)
81136930:	1004917a 	slli	r2,r2,5
81136934:	e0fff417 	ldw	r3,-48(fp)
81136938:	e13ff217 	ldw	r4,-56(fp)
8113693c:	200f883a 	mov	r7,r4
81136940:	180d883a 	mov	r6,r3
81136944:	e17fff17 	ldw	r5,-4(fp)
81136948:	1009883a 	mov	r4,r2
8113694c:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81136950:	e0bfff17 	ldw	r2,-4(fp)
81136954:	10800003 	ldbu	r2,0(r2)
81136958:	10803fcc 	andi	r2,r2,255
8113695c:	10803960 	cmpeqi	r2,r2,229
81136960:	1000121e 	bne	r2,zero,811369ac <get_home_directory_cluster_for_file+0x3d4>
81136964:	e0bfff17 	ldw	r2,-4(fp)
81136968:	10800003 	ldbu	r2,0(r2)
8113696c:	10803fcc 	andi	r2,r2,255
81136970:	10000e26 	beq	r2,zero,811369ac <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81136974:	e0fffb04 	addi	r3,fp,-20
81136978:	e0bff904 	addi	r2,fp,-28
8113697c:	180d883a 	mov	r6,r3
81136980:	100b883a 	mov	r5,r2
81136984:	e13fff17 	ldw	r4,-4(fp)
81136988:	11363340 	call	81136334 <match_file_record_to_name_ext>
8113698c:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81136990:	e0bff617 	ldw	r2,-40(fp)
81136994:	10000526 	beq	r2,zero,811369ac <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81136998:	e0bfff17 	ldw	r2,-4(fp)
8113699c:	1080058b 	ldhu	r2,22(r2)
811369a0:	10bfffcc 	andi	r2,r2,65535
811369a4:	e0bfef15 	stw	r2,-68(fp)
                                    break;
811369a8:	00000606 	br	811369c4 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
811369ac:	e0bff317 	ldw	r2,-52(fp)
811369b0:	10800044 	addi	r2,r2,1
811369b4:	e0bff315 	stw	r2,-52(fp)
811369b8:	e0bff317 	ldw	r2,-52(fp)
811369bc:	10800410 	cmplti	r2,r2,16
811369c0:	103fda1e 	bne	r2,zero,8113692c <__reset+0xfb11692c>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
811369c4:	e0ffef17 	ldw	r3,-68(fp)
811369c8:	e0bfea17 	ldw	r2,-88(fp)
811369cc:	18800c1e 	bne	r3,r2,81136a00 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811369d0:	e0bff217 	ldw	r2,-56(fp)
811369d4:	10800044 	addi	r2,r2,1
811369d8:	e0bff215 	stw	r2,-56(fp)
811369dc:	00a04574 	movhi	r2,33045
811369e0:	109c9a04 	addi	r2,r2,29288
811369e4:	10800383 	ldbu	r2,14(r2)
811369e8:	10803fcc 	andi	r2,r2,255
811369ec:	e0fff217 	ldw	r3,-56(fp)
811369f0:	18bfc416 	blt	r3,r2,81136904 <__reset+0xfb116904>
811369f4:	00000306 	br	81136a04 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
811369f8:	0001883a 	nop
811369fc:	00000106 	br	81136a04 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81136a00:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81136a04:	e0ffef17 	ldw	r3,-68(fp)
81136a08:	e0bfea17 	ldw	r2,-88(fp)
81136a0c:	1880141e 	bne	r3,r2,81136a60 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81136a10:	e0bfef17 	ldw	r2,-68(fp)
81136a14:	e0fffc04 	addi	r3,fp,-16
81136a18:	180b883a 	mov	r5,r3
81136a1c:	1009883a 	mov	r4,r2
81136a20:	1134f500 	call	81134f50 <get_cluster_flag>
81136a24:	10000c26 	beq	r2,zero,81136a58 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81136a28:	e0bffc0b 	ldhu	r2,-16(fp)
81136a2c:	10bfffcc 	andi	r2,r2,65535
81136a30:	10fffe0c 	andi	r3,r2,65528
81136a34:	00bffe14 	movui	r2,65528
81136a38:	1880021e 	bne	r3,r2,81136a44 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
81136a3c:	0005883a 	mov	r2,zero
81136a40:	00003006 	br	81136b04 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
81136a44:	e0bffc0b 	ldhu	r2,-16(fp)
81136a48:	10bfffcc 	andi	r2,r2,65535
81136a4c:	10bffe0c 	andi	r2,r2,65528
81136a50:	e0bfef15 	stw	r2,-68(fp)
81136a54:	00000206 	br	81136a60 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
81136a58:	0005883a 	mov	r2,zero
81136a5c:	00002906 	br	81136b04 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
81136a60:	e0bff417 	ldw	r2,-48(fp)
81136a64:	00fffdd4 	movui	r3,65527
81136a68:	18800316 	blt	r3,r2,81136a78 <get_home_directory_cluster_for_file+0x4a0>
81136a6c:	e0ffef17 	ldw	r3,-68(fp)
81136a70:	e0bfea17 	ldw	r2,-88(fp)
81136a74:	18bf9426 	beq	r3,r2,811368c8 <__reset+0xfb1168c8>
            if (new_cluster != home_dir_cluster)
81136a78:	e0ffef17 	ldw	r3,-68(fp)
81136a7c:	e0bfea17 	ldw	r2,-88(fp)
81136a80:	18800826 	beq	r3,r2,81136aa4 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81136a84:	e0bfef17 	ldw	r2,-68(fp)
81136a88:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81136a8c:	e0ffed17 	ldw	r3,-76(fp)
81136a90:	e0bfeb17 	ldw	r2,-84(fp)
81136a94:	1885883a 	add	r2,r3,r2
81136a98:	10800044 	addi	r2,r2,1
81136a9c:	e0bfed15 	stw	r2,-76(fp)
81136aa0:	00000206 	br	81136aac <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81136aa4:	0005883a 	mov	r2,zero
81136aa8:	00001606 	br	81136b04 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81136aac:	e0bfed17 	ldw	r2,-76(fp)
81136ab0:	e0fffd17 	ldw	r3,-12(fp)
81136ab4:	1885883a 	add	r2,r3,r2
81136ab8:	1009883a 	mov	r4,r2
81136abc:	11362740 	call	81136274 <get_dir_divider_location>
81136ac0:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81136ac4:	e0bfeb17 	ldw	r2,-84(fp)
81136ac8:	1000020e 	bge	r2,zero,81136ad4 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81136acc:	00800044 	movi	r2,1
81136ad0:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81136ad4:	e0bfeb17 	ldw	r2,-84(fp)
81136ad8:	00becf16 	blt	zero,r2,81136618 <__reset+0xfb116618>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81136adc:	e0bffe17 	ldw	r2,-8(fp)
81136ae0:	e0ffea17 	ldw	r3,-88(fp)
81136ae4:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81136ae8:	e0bfea17 	ldw	r2,-88(fp)
81136aec:	1000041e 	bne	r2,zero,81136b00 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81136af0:	e0bfff17 	ldw	r2,-4(fp)
81136af4:	10000a15 	stw	zero,40(r2)
		result = true;
81136af8:	00800044 	movi	r2,1
81136afc:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81136b00:	e0bfe917 	ldw	r2,-92(fp)
}
81136b04:	e037883a 	mov	sp,fp
81136b08:	dfc00117 	ldw	ra,4(sp)
81136b0c:	df000017 	ldw	fp,0(sp)
81136b10:	dec00204 	addi	sp,sp,8
81136b14:	f800283a 	ret

81136b18 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81136b18:	deffe804 	addi	sp,sp,-96
81136b1c:	de00012e 	bgeu	sp,et,81136b24 <find_file_in_directory+0xc>
81136b20:	003b68fa 	trap	3
81136b24:	dfc01715 	stw	ra,92(sp)
81136b28:	df001615 	stw	fp,88(sp)
81136b2c:	df001604 	addi	fp,sp,88
81136b30:	e13ffd15 	stw	r4,-12(fp)
81136b34:	e17ffe15 	stw	r5,-8(fp)
81136b38:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
81136b3c:	e13ffe17 	ldw	r4,-8(fp)
81136b40:	11362740 	call	81136274 <get_dir_divider_location>
81136b44:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
81136b48:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81136b4c:	00800804 	movi	r2,32
81136b50:	e0bff905 	stb	r2,-28(fp)
81136b54:	00800804 	movi	r2,32
81136b58:	e0bff945 	stb	r2,-27(fp)
81136b5c:	00800804 	movi	r2,32
81136b60:	e0bff985 	stb	r2,-26(fp)
81136b64:	00800804 	movi	r2,32
81136b68:	e0bff9c5 	stb	r2,-25(fp)
81136b6c:	00800804 	movi	r2,32
81136b70:	e0bffa05 	stb	r2,-24(fp)
81136b74:	00800804 	movi	r2,32
81136b78:	e0bffa45 	stb	r2,-23(fp)
81136b7c:	00800804 	movi	r2,32
81136b80:	e0bffa85 	stb	r2,-22(fp)
81136b84:	00800804 	movi	r2,32
81136b88:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81136b8c:	00800804 	movi	r2,32
81136b90:	e0bffb05 	stb	r2,-20(fp)
81136b94:	00800804 	movi	r2,32
81136b98:	e0bffb45 	stb	r2,-19(fp)
81136b9c:	00800804 	movi	r2,32
81136ba0:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81136ba4:	00bfffc4 	movi	r2,-1
81136ba8:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81136bac:	e0bffd17 	ldw	r2,-12(fp)
81136bb0:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81136bb4:	e13ffe17 	ldw	r4,-8(fp)
81136bb8:	111510c0 	call	8111510c <strlen>
81136bbc:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81136bc0:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81136bc4:	00000b06 	br	81136bf4 <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81136bc8:	e0ffeb17 	ldw	r3,-84(fp)
81136bcc:	e0bfea17 	ldw	r2,-88(fp)
81136bd0:	1885883a 	add	r2,r3,r2
81136bd4:	10800044 	addi	r2,r2,1
81136bd8:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81136bdc:	e0bfeb17 	ldw	r2,-84(fp)
81136be0:	e0fffe17 	ldw	r3,-8(fp)
81136be4:	1885883a 	add	r2,r3,r2
81136be8:	1009883a 	mov	r4,r2
81136bec:	11362740 	call	81136274 <get_dir_divider_location>
81136bf0:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81136bf4:	e0bfea17 	ldw	r2,-88(fp)
81136bf8:	00bff316 	blt	zero,r2,81136bc8 <__reset+0xfb116bc8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81136bfc:	e0bfeb17 	ldw	r2,-84(fp)
81136c00:	e0bfee15 	stw	r2,-72(fp)
81136c04:	00002706 	br	81136ca4 <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81136c08:	e0bfee17 	ldw	r2,-72(fp)
81136c0c:	e0fffe17 	ldw	r3,-8(fp)
81136c10:	1885883a 	add	r2,r3,r2
81136c14:	10800003 	ldbu	r2,0(r2)
81136c18:	10803fcc 	andi	r2,r2,255
81136c1c:	1080201c 	xori	r2,r2,128
81136c20:	10bfe004 	addi	r2,r2,-128
81136c24:	10800b98 	cmpnei	r2,r2,46
81136c28:	1000031e 	bne	r2,zero,81136c38 <find_file_in_directory+0x120>
        {
            ext_index = index;
81136c2c:	e0bfee17 	ldw	r2,-72(fp)
81136c30:	e0bfec15 	stw	r2,-80(fp)
81136c34:	00001806 	br	81136c98 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
81136c38:	e0bfec17 	ldw	r2,-80(fp)
81136c3c:	10000b0e 	bge	r2,zero,81136c6c <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
81136c40:	e0ffee17 	ldw	r3,-72(fp)
81136c44:	e0bfeb17 	ldw	r2,-84(fp)
81136c48:	1885c83a 	sub	r2,r3,r2
81136c4c:	e0ffee17 	ldw	r3,-72(fp)
81136c50:	e13ffe17 	ldw	r4,-8(fp)
81136c54:	20c7883a 	add	r3,r4,r3
81136c58:	18c00003 	ldbu	r3,0(r3)
81136c5c:	e13ff904 	addi	r4,fp,-28
81136c60:	2085883a 	add	r2,r4,r2
81136c64:	10c00005 	stb	r3,0(r2)
81136c68:	00000b06 	br	81136c98 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81136c6c:	e0ffee17 	ldw	r3,-72(fp)
81136c70:	e0bfec17 	ldw	r2,-80(fp)
81136c74:	1885c83a 	sub	r2,r3,r2
81136c78:	10bfffc4 	addi	r2,r2,-1
81136c7c:	e0ffee17 	ldw	r3,-72(fp)
81136c80:	e13ffe17 	ldw	r4,-8(fp)
81136c84:	20c7883a 	add	r3,r4,r3
81136c88:	18c00003 	ldbu	r3,0(r3)
81136c8c:	e13ffb04 	addi	r4,fp,-20
81136c90:	2085883a 	add	r2,r4,r2
81136c94:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81136c98:	e0bfee17 	ldw	r2,-72(fp)
81136c9c:	10800044 	addi	r2,r2,1
81136ca0:	e0bfee15 	stw	r2,-72(fp)
81136ca4:	e0ffee17 	ldw	r3,-72(fp)
81136ca8:	e0bff417 	ldw	r2,-48(fp)
81136cac:	18bfd616 	blt	r3,r2,81136c08 <__reset+0xfb116c08>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81136cb0:	e0bffd17 	ldw	r2,-12(fp)
81136cb4:	1000461e 	bne	r2,zero,81136dd0 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81136cb8:	00a04574 	movhi	r2,33045
81136cbc:	109c9a04 	addi	r2,r2,29288
81136cc0:	1080050b 	ldhu	r2,20(r2)
81136cc4:	10bfffcc 	andi	r2,r2,65535
81136cc8:	1006917a 	slli	r3,r2,5
81136ccc:	00a04574 	movhi	r2,33045
81136cd0:	109c9a04 	addi	r2,r2,29288
81136cd4:	1080030b 	ldhu	r2,12(r2)
81136cd8:	10bfffcc 	andi	r2,r2,65535
81136cdc:	1885283a 	div	r2,r3,r2
81136ce0:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81136ce4:	e03ff015 	stw	zero,-64(fp)
81136ce8:	00003506 	br	81136dc0 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81136cec:	00a04574 	movhi	r2,33045
81136cf0:	109c9a04 	addi	r2,r2,29288
81136cf4:	10c01317 	ldw	r3,76(r2)
81136cf8:	e0bff017 	ldw	r2,-64(fp)
81136cfc:	1885883a 	add	r2,r3,r2
81136d00:	1007883a 	mov	r3,r2
81136d04:	d0a09b17 	ldw	r2,-32148(gp)
81136d08:	100b883a 	mov	r5,r2
81136d0c:	1809883a 	mov	r4,r3
81136d10:	1134e700 	call	81134e70 <Read_Sector_Data>
81136d14:	10009626 	beq	r2,zero,81136f70 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81136d18:	e03ff115 	stw	zero,-60(fp)
81136d1c:	00002006 	br	81136da0 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81136d20:	e0bff117 	ldw	r2,-60(fp)
81136d24:	1004917a 	slli	r2,r2,5
81136d28:	e0fff017 	ldw	r3,-64(fp)
81136d2c:	180f883a 	mov	r7,r3
81136d30:	000d883a 	mov	r6,zero
81136d34:	e17fff17 	ldw	r5,-4(fp)
81136d38:	1009883a 	mov	r4,r2
81136d3c:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81136d40:	e0bfff17 	ldw	r2,-4(fp)
81136d44:	10800003 	ldbu	r2,0(r2)
81136d48:	10803fcc 	andi	r2,r2,255
81136d4c:	10803960 	cmpeqi	r2,r2,229
81136d50:	1000101e 	bne	r2,zero,81136d94 <find_file_in_directory+0x27c>
81136d54:	e0bfff17 	ldw	r2,-4(fp)
81136d58:	10800003 	ldbu	r2,0(r2)
81136d5c:	10803fcc 	andi	r2,r2,255
81136d60:	10000c26 	beq	r2,zero,81136d94 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
81136d64:	e0fffb04 	addi	r3,fp,-20
81136d68:	e0bff904 	addi	r2,fp,-28
81136d6c:	180d883a 	mov	r6,r3
81136d70:	100b883a 	mov	r5,r2
81136d74:	e13fff17 	ldw	r4,-4(fp)
81136d78:	11363340 	call	81136334 <match_file_record_to_name_ext>
81136d7c:	e0bff815 	stw	r2,-32(fp)

                        if (match)
81136d80:	e0bff817 	ldw	r2,-32(fp)
81136d84:	10000326 	beq	r2,zero,81136d94 <find_file_in_directory+0x27c>
                        {
                            result = true;
81136d88:	00800044 	movi	r2,1
81136d8c:	e0bfef15 	stw	r2,-68(fp)
                            break;
81136d90:	00000606 	br	81136dac <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81136d94:	e0bff117 	ldw	r2,-60(fp)
81136d98:	10800044 	addi	r2,r2,1
81136d9c:	e0bff115 	stw	r2,-60(fp)
81136da0:	e0bff117 	ldw	r2,-60(fp)
81136da4:	10800410 	cmplti	r2,r2,16
81136da8:	103fdd1e 	bne	r2,zero,81136d20 <__reset+0xfb116d20>
            }
            else
            {
                break;
            }
            if (result)
81136dac:	e0bfef17 	ldw	r2,-68(fp)
81136db0:	1000711e 	bne	r2,zero,81136f78 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81136db4:	e0bff017 	ldw	r2,-64(fp)
81136db8:	10800044 	addi	r2,r2,1
81136dbc:	e0bff015 	stw	r2,-64(fp)
81136dc0:	e0fff017 	ldw	r3,-64(fp)
81136dc4:	e0bff717 	ldw	r2,-36(fp)
81136dc8:	18bfc816 	blt	r3,r2,81136cec <__reset+0xfb116cec>
81136dcc:	00006b06 	br	81136f7c <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81136dd0:	e0bfed17 	ldw	r2,-76(fp)
81136dd4:	10ffff84 	addi	r3,r2,-2
81136dd8:	00a04574 	movhi	r2,33045
81136ddc:	109c9a04 	addi	r2,r2,29288
81136de0:	10800383 	ldbu	r2,14(r2)
81136de4:	10803fcc 	andi	r2,r2,255
81136de8:	1885383a 	mul	r2,r3,r2
81136dec:	1007883a 	mov	r3,r2
81136df0:	00a04574 	movhi	r2,33045
81136df4:	109c9a04 	addi	r2,r2,29288
81136df8:	10801417 	ldw	r2,80(r2)
81136dfc:	1885883a 	add	r2,r3,r2
81136e00:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136e04:	e03ff215 	stw	zero,-56(fp)
81136e08:	00003306 	br	81136ed8 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81136e0c:	e0fff217 	ldw	r3,-56(fp)
81136e10:	e0bff517 	ldw	r2,-44(fp)
81136e14:	1885883a 	add	r2,r3,r2
81136e18:	d0e09b17 	ldw	r3,-32148(gp)
81136e1c:	180b883a 	mov	r5,r3
81136e20:	1009883a 	mov	r4,r2
81136e24:	1134e700 	call	81134e70 <Read_Sector_Data>
81136e28:	10003226 	beq	r2,zero,81136ef4 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81136e2c:	e03ff315 	stw	zero,-52(fp)
81136e30:	00002106 	br	81136eb8 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81136e34:	e0bff317 	ldw	r2,-52(fp)
81136e38:	1004917a 	slli	r2,r2,5
81136e3c:	e0ffed17 	ldw	r3,-76(fp)
81136e40:	e13ff217 	ldw	r4,-56(fp)
81136e44:	200f883a 	mov	r7,r4
81136e48:	180d883a 	mov	r6,r3
81136e4c:	e17fff17 	ldw	r5,-4(fp)
81136e50:	1009883a 	mov	r4,r2
81136e54:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81136e58:	e0bfff17 	ldw	r2,-4(fp)
81136e5c:	10800003 	ldbu	r2,0(r2)
81136e60:	10803fcc 	andi	r2,r2,255
81136e64:	10803960 	cmpeqi	r2,r2,229
81136e68:	1000101e 	bne	r2,zero,81136eac <find_file_in_directory+0x394>
81136e6c:	e0bfff17 	ldw	r2,-4(fp)
81136e70:	10800003 	ldbu	r2,0(r2)
81136e74:	10803fcc 	andi	r2,r2,255
81136e78:	10000c26 	beq	r2,zero,81136eac <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81136e7c:	e0fffb04 	addi	r3,fp,-20
81136e80:	e0bff904 	addi	r2,fp,-28
81136e84:	180d883a 	mov	r6,r3
81136e88:	100b883a 	mov	r5,r2
81136e8c:	e13fff17 	ldw	r4,-4(fp)
81136e90:	11363340 	call	81136334 <match_file_record_to_name_ext>
81136e94:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81136e98:	e0bff617 	ldw	r2,-40(fp)
81136e9c:	10000326 	beq	r2,zero,81136eac <find_file_in_directory+0x394>
                            {                               
                                result = true;
81136ea0:	00800044 	movi	r2,1
81136ea4:	e0bfef15 	stw	r2,-68(fp)
                                break;
81136ea8:	00000606 	br	81136ec4 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81136eac:	e0bff317 	ldw	r2,-52(fp)
81136eb0:	10800044 	addi	r2,r2,1
81136eb4:	e0bff315 	stw	r2,-52(fp)
81136eb8:	e0bff317 	ldw	r2,-52(fp)
81136ebc:	10800410 	cmplti	r2,r2,16
81136ec0:	103fdc1e 	bne	r2,zero,81136e34 <__reset+0xfb116e34>
                }
                else
                {
                    break;
                }
                if (result)
81136ec4:	e0bfef17 	ldw	r2,-68(fp)
81136ec8:	10000c1e 	bne	r2,zero,81136efc <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136ecc:	e0bff217 	ldw	r2,-56(fp)
81136ed0:	10800044 	addi	r2,r2,1
81136ed4:	e0bff215 	stw	r2,-56(fp)
81136ed8:	00a04574 	movhi	r2,33045
81136edc:	109c9a04 	addi	r2,r2,29288
81136ee0:	10800383 	ldbu	r2,14(r2)
81136ee4:	10803fcc 	andi	r2,r2,255
81136ee8:	e0fff217 	ldw	r3,-56(fp)
81136eec:	18bfc716 	blt	r3,r2,81136e0c <__reset+0xfb116e0c>
81136ef0:	00000306 	br	81136f00 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
81136ef4:	0001883a 	nop
81136ef8:	00000106 	br	81136f00 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81136efc:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
81136f00:	e0bfef17 	ldw	r2,-68(fp)
81136f04:	1000141e 	bne	r2,zero,81136f58 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81136f08:	e0bfed17 	ldw	r2,-76(fp)
81136f0c:	e0fffc04 	addi	r3,fp,-16
81136f10:	180b883a 	mov	r5,r3
81136f14:	1009883a 	mov	r4,r2
81136f18:	1134f500 	call	81134f50 <get_cluster_flag>
81136f1c:	10000c26 	beq	r2,zero,81136f50 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81136f20:	e0bffc0b 	ldhu	r2,-16(fp)
81136f24:	10bfffcc 	andi	r2,r2,65535
81136f28:	10fffe0c 	andi	r3,r2,65528
81136f2c:	00bffe14 	movui	r2,65528
81136f30:	1880021e 	bne	r3,r2,81136f3c <find_file_in_directory+0x424>
					{
						return false;
81136f34:	0005883a 	mov	r2,zero
81136f38:	00001106 	br	81136f80 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
81136f3c:	e0bffc0b 	ldhu	r2,-16(fp)
81136f40:	10bfffcc 	andi	r2,r2,65535
81136f44:	10bffe0c 	andi	r2,r2,65528
81136f48:	e0bfed15 	stw	r2,-76(fp)
81136f4c:	00000206 	br	81136f58 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
81136f50:	0005883a 	mov	r2,zero
81136f54:	00000a06 	br	81136f80 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
81136f58:	e0bfed17 	ldw	r2,-76(fp)
81136f5c:	00fffdd4 	movui	r3,65527
81136f60:	18800616 	blt	r3,r2,81136f7c <find_file_in_directory+0x464>
81136f64:	e0bfef17 	ldw	r2,-68(fp)
81136f68:	103f9926 	beq	r2,zero,81136dd0 <__reset+0xfb116dd0>
81136f6c:	00000306 	br	81136f7c <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
81136f70:	0001883a 	nop
81136f74:	00000106 	br	81136f7c <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
81136f78:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
81136f7c:	e0bfef17 	ldw	r2,-68(fp)
}
81136f80:	e037883a 	mov	sp,fp
81136f84:	dfc00117 	ldw	ra,4(sp)
81136f88:	df000017 	ldw	fp,0(sp)
81136f8c:	dec00204 	addi	sp,sp,8
81136f90:	f800283a 	ret

81136f94 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81136f94:	defff504 	addi	sp,sp,-44
81136f98:	de00012e 	bgeu	sp,et,81136fa0 <find_first_empty_cluster+0xc>
81136f9c:	003b68fa 	trap	3
81136fa0:	dfc00a15 	stw	ra,40(sp)
81136fa4:	df000915 	stw	fp,36(sp)
81136fa8:	df000904 	addi	fp,sp,36
81136fac:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81136fb0:	00a04574 	movhi	r2,33045
81136fb4:	109c9a04 	addi	r2,r2,29288
81136fb8:	10801117 	ldw	r2,68(r2)
81136fbc:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81136fc0:	00800084 	movi	r2,2
81136fc4:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81136fc8:	00bfffc4 	movi	r2,-1
81136fcc:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81136fd0:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
81136fd4:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81136fd8:	00a04574 	movhi	r2,33045
81136fdc:	109c9a04 	addi	r2,r2,29288
81136fe0:	10801417 	ldw	r2,80(r2)
81136fe4:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81136fe8:	00a04574 	movhi	r2,33045
81136fec:	109c9a04 	addi	r2,r2,29288
81136ff0:	1080058b 	ldhu	r2,22(r2)
81136ff4:	10bfffcc 	andi	r2,r2,65535
81136ff8:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81136ffc:	00a04574 	movhi	r2,33045
81137000:	109c9a04 	addi	r2,r2,29288
81137004:	10800917 	ldw	r2,36(r2)
81137008:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
8113700c:	e0bffd17 	ldw	r2,-12(fp)
81137010:	e0fffe17 	ldw	r3,-8(fp)
81137014:	18800b2e 	bgeu	r3,r2,81137044 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81137018:	e0fffd17 	ldw	r3,-12(fp)
8113701c:	e0bffc17 	ldw	r2,-16(fp)
81137020:	1887c83a 	sub	r3,r3,r2
81137024:	00a04574 	movhi	r2,33045
81137028:	109c9a04 	addi	r2,r2,29288
8113702c:	10800383 	ldbu	r2,14(r2)
81137030:	10803fcc 	andi	r2,r2,255
81137034:	1885203a 	divu	r2,r3,r2
81137038:	10800044 	addi	r2,r2,1
8113703c:	e0bffb15 	stw	r2,-20(fp)
81137040:	00002a06 	br	811370ec <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81137044:	e0fffe17 	ldw	r3,-8(fp)
81137048:	e0bffc17 	ldw	r2,-16(fp)
8113704c:	1887c83a 	sub	r3,r3,r2
81137050:	00a04574 	movhi	r2,33045
81137054:	109c9a04 	addi	r2,r2,29288
81137058:	10800383 	ldbu	r2,14(r2)
8113705c:	10803fcc 	andi	r2,r2,255
81137060:	1885203a 	divu	r2,r3,r2
81137064:	10800044 	addi	r2,r2,1
81137068:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8113706c:	00001f06 	br	811370ec <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
81137070:	e0bff717 	ldw	r2,-36(fp)
81137074:	d0e09b17 	ldw	r3,-32148(gp)
81137078:	180b883a 	mov	r5,r3
8113707c:	1009883a 	mov	r4,r2
81137080:	1134e700 	call	81134e70 <Read_Sector_Data>
81137084:	10001426 	beq	r2,zero,811370d8 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81137088:	e0bff817 	ldw	r2,-32(fp)
8113708c:	10803fcc 	andi	r2,r2,255
81137090:	1085883a 	add	r2,r2,r2
81137094:	1007883a 	mov	r3,r2
81137098:	d0a09d17 	ldw	r2,-32140(gp)
8113709c:	10800a17 	ldw	r2,40(r2)
811370a0:	1885883a 	add	r2,r3,r2
811370a4:	1080002b 	ldhuio	r2,0(r2)
811370a8:	10bfffcc 	andi	r2,r2,65535
811370ac:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
811370b0:	e0bff90f 	ldh	r2,-28(fp)
811370b4:	10000726 	beq	r2,zero,811370d4 <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
811370b8:	e0bff817 	ldw	r2,-32(fp)
811370bc:	10800044 	addi	r2,r2,1
811370c0:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
811370c4:	e0bff817 	ldw	r2,-32(fp)
811370c8:	10803fcc 	andi	r2,r2,255
811370cc:	103fee1e 	bne	r2,zero,81137088 <__reset+0xfb117088>
811370d0:	00000106 	br	811370d8 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
811370d4:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
811370d8:	e0bff90f 	ldh	r2,-28(fp)
811370dc:	10000926 	beq	r2,zero,81137104 <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
811370e0:	e0bff717 	ldw	r2,-36(fp)
811370e4:	10800044 	addi	r2,r2,1
811370e8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811370ec:	00a04574 	movhi	r2,33045
811370f0:	109c9a04 	addi	r2,r2,29288
811370f4:	10c01217 	ldw	r3,72(r2)
811370f8:	e0bff717 	ldw	r2,-36(fp)
811370fc:	18bfdc1e 	bne	r3,r2,81137070 <__reset+0xfb117070>
81137100:	00000106 	br	81137108 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81137104:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81137108:	e0bff90f 	ldh	r2,-28(fp)
8113710c:	1000081e 	bne	r2,zero,81137130 <find_first_empty_cluster+0x19c>
81137110:	e0bff90f 	ldh	r2,-28(fp)
81137114:	e0fffb17 	ldw	r3,-20(fp)
81137118:	18800536 	bltu	r3,r2,81137130 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
8113711c:	e0bfff17 	ldw	r2,-4(fp)
81137120:	e0fff817 	ldw	r3,-32(fp)
81137124:	10c00015 	stw	r3,0(r2)
		result = true;
81137128:	00800044 	movi	r2,1
8113712c:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
81137130:	e0bffa17 	ldw	r2,-24(fp)
}
81137134:	e037883a 	mov	sp,fp
81137138:	dfc00117 	ldw	ra,4(sp)
8113713c:	df000017 	ldw	fp,0(sp)
81137140:	dec00204 	addi	sp,sp,8
81137144:	f800283a 	ret

81137148 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81137148:	defff604 	addi	sp,sp,-40
8113714c:	de00012e 	bgeu	sp,et,81137154 <find_first_empty_record_in_a_subdirectory+0xc>
81137150:	003b68fa 	trap	3
81137154:	dfc00915 	stw	ra,36(sp)
81137158:	df000815 	stw	fp,32(sp)
8113715c:	df000804 	addi	fp,sp,32
81137160:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
81137164:	00bfffc4 	movi	r2,-1
81137168:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
8113716c:	e0bfff17 	ldw	r2,-4(fp)
81137170:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81137174:	e0bff917 	ldw	r2,-28(fp)
81137178:	10ffff84 	addi	r3,r2,-2
8113717c:	00a04574 	movhi	r2,33045
81137180:	109c9a04 	addi	r2,r2,29288
81137184:	10800383 	ldbu	r2,14(r2)
81137188:	10803fcc 	andi	r2,r2,255
8113718c:	1885383a 	mul	r2,r3,r2
81137190:	1007883a 	mov	r3,r2
81137194:	00a04574 	movhi	r2,33045
81137198:	109c9a04 	addi	r2,r2,29288
8113719c:	10801417 	ldw	r2,80(r2)
811371a0:	1885883a 	add	r2,r3,r2
811371a4:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811371a8:	e03ffa15 	stw	zero,-24(fp)
811371ac:	00002c06 	br	81137260 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811371b0:	e0fffa17 	ldw	r3,-24(fp)
811371b4:	e0bffc17 	ldw	r2,-16(fp)
811371b8:	1885883a 	add	r2,r3,r2
811371bc:	d0e09b17 	ldw	r3,-32148(gp)
811371c0:	180b883a 	mov	r5,r3
811371c4:	1009883a 	mov	r4,r2
811371c8:	1134e700 	call	81134e70 <Read_Sector_Data>
811371cc:	10002b26 	beq	r2,zero,8113727c <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811371d0:	e03ffb15 	stw	zero,-20(fp)
811371d4:	00001c06 	br	81137248 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
811371d8:	e0bffb17 	ldw	r2,-20(fp)
811371dc:	1004917a 	slli	r2,r2,5
811371e0:	1007883a 	mov	r3,r2
811371e4:	d0a09d17 	ldw	r2,-32140(gp)
811371e8:	10800a17 	ldw	r2,40(r2)
811371ec:	1885883a 	add	r2,r3,r2
811371f0:	10800023 	ldbuio	r2,0(r2)
811371f4:	10803fcc 	andi	r2,r2,255
811371f8:	10803fcc 	andi	r2,r2,255
811371fc:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81137200:	e0bffd0b 	ldhu	r2,-12(fp)
81137204:	10803960 	cmpeqi	r2,r2,229
81137208:	1000021e 	bne	r2,zero,81137214 <find_first_empty_record_in_a_subdirectory+0xcc>
8113720c:	e0bffd0b 	ldhu	r2,-12(fp)
81137210:	10000a1e 	bne	r2,zero,8113723c <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81137214:	e0bffa17 	ldw	r2,-24(fp)
81137218:	1006913a 	slli	r3,r2,4
8113721c:	e0bffb17 	ldw	r2,-20(fp)
81137220:	1885883a 	add	r2,r3,r2
81137224:	1006943a 	slli	r3,r2,16
81137228:	e0bff917 	ldw	r2,-28(fp)
8113722c:	1884b03a 	or	r2,r3,r2
81137230:	e0bff815 	stw	r2,-32(fp)
                        return result;
81137234:	e0bff817 	ldw	r2,-32(fp)
81137238:	00005306 	br	81137388 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8113723c:	e0bffb17 	ldw	r2,-20(fp)
81137240:	10800044 	addi	r2,r2,1
81137244:	e0bffb15 	stw	r2,-20(fp)
81137248:	e0bffb17 	ldw	r2,-20(fp)
8113724c:	10800410 	cmplti	r2,r2,16
81137250:	103fe11e 	bne	r2,zero,811371d8 <__reset+0xfb1171d8>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81137254:	e0bffa17 	ldw	r2,-24(fp)
81137258:	10800044 	addi	r2,r2,1
8113725c:	e0bffa15 	stw	r2,-24(fp)
81137260:	00a04574 	movhi	r2,33045
81137264:	109c9a04 	addi	r2,r2,29288
81137268:	10800383 	ldbu	r2,14(r2)
8113726c:	10803fcc 	andi	r2,r2,255
81137270:	e0fffa17 	ldw	r3,-24(fp)
81137274:	18bfce16 	blt	r3,r2,811371b0 <__reset+0xfb1171b0>
81137278:	00000106 	br	81137280 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
8113727c:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
81137280:	e0bff817 	ldw	r2,-32(fp)
81137284:	1000390e 	bge	r2,zero,8113736c <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81137288:	e0bff917 	ldw	r2,-28(fp)
8113728c:	e0fffd84 	addi	r3,fp,-10
81137290:	180b883a 	mov	r5,r3
81137294:	1009883a 	mov	r4,r2
81137298:	1134f500 	call	81134f50 <get_cluster_flag>
8113729c:	10003126 	beq	r2,zero,81137364 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811372a0:	e0bffd8b 	ldhu	r2,-10(fp)
811372a4:	10bfffcc 	andi	r2,r2,65535
811372a8:	10fffe0c 	andi	r3,r2,65528
811372ac:	00bffe14 	movui	r2,65528
811372b0:	18802e1e 	bne	r3,r2,8113736c <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
811372b4:	e0bffe04 	addi	r2,fp,-8
811372b8:	1009883a 	mov	r4,r2
811372bc:	1136f940 	call	81136f94 <find_first_empty_cluster>
811372c0:	10002326 	beq	r2,zero,81137350 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
811372c4:	e0bff917 	ldw	r2,-28(fp)
811372c8:	e0fffe17 	ldw	r3,-8(fp)
811372cc:	18ffffcc 	andi	r3,r3,65535
811372d0:	18e0001c 	xori	r3,r3,32768
811372d4:	18e00004 	addi	r3,r3,-32768
811372d8:	01800044 	movi	r6,1
811372dc:	180b883a 	mov	r5,r3
811372e0:	1009883a 	mov	r4,r2
811372e4:	113500c0 	call	8113500c <mark_cluster>
811372e8:	10001926 	beq	r2,zero,81137350 <find_first_empty_record_in_a_subdirectory+0x208>
811372ec:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
811372f0:	01800044 	movi	r6,1
811372f4:	017fffc4 	movi	r5,-1
811372f8:	1009883a 	mov	r4,r2
811372fc:	113500c0 	call	8113500c <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81137300:	10001326 	beq	r2,zero,81137350 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81137304:	e0bff917 	ldw	r2,-28(fp)
81137308:	e0fffe17 	ldw	r3,-8(fp)
8113730c:	18ffffcc 	andi	r3,r3,65535
81137310:	18e0001c 	xori	r3,r3,32768
81137314:	18e00004 	addi	r3,r3,-32768
81137318:	000d883a 	mov	r6,zero
8113731c:	180b883a 	mov	r5,r3
81137320:	1009883a 	mov	r4,r2
81137324:	113500c0 	call	8113500c <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81137328:	10000926 	beq	r2,zero,81137350 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8113732c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81137330:	000d883a 	mov	r6,zero
81137334:	017fffc4 	movi	r5,-1
81137338:	1009883a 	mov	r4,r2
8113733c:	113500c0 	call	8113500c <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81137340:	10000326 	beq	r2,zero,81137350 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81137344:	1134e1c0 	call	81134e1c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81137348:	e0bffe17 	ldw	r2,-8(fp)
8113734c:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81137350:	e0bffd8b 	ldhu	r2,-10(fp)
81137354:	10bfffcc 	andi	r2,r2,65535
81137358:	10bffe0c 	andi	r2,r2,65528
8113735c:	e0bff915 	stw	r2,-28(fp)
81137360:	00000206 	br	8113736c <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81137364:	00bfffc4 	movi	r2,-1
81137368:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
8113736c:	e0bff917 	ldw	r2,-28(fp)
81137370:	00fffdd4 	movui	r3,65527
81137374:	18800316 	blt	r3,r2,81137384 <find_first_empty_record_in_a_subdirectory+0x23c>
81137378:	e0bff817 	ldw	r2,-32(fp)
8113737c:	10bfffe0 	cmpeqi	r2,r2,-1
81137380:	103f7c1e 	bne	r2,zero,81137174 <__reset+0xfb117174>
    return result; 
81137384:	e0bff817 	ldw	r2,-32(fp)
}
81137388:	e037883a 	mov	sp,fp
8113738c:	dfc00117 	ldw	ra,4(sp)
81137390:	df000017 	ldw	fp,0(sp)
81137394:	dec00204 	addi	sp,sp,8
81137398:	f800283a 	ret

8113739c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
8113739c:	defff904 	addi	sp,sp,-28
811373a0:	de00012e 	bgeu	sp,et,811373a8 <find_first_empty_record_in_root_directory+0xc>
811373a4:	003b68fa 	trap	3
811373a8:	dfc00615 	stw	ra,24(sp)
811373ac:	df000515 	stw	fp,20(sp)
811373b0:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811373b4:	00a04574 	movhi	r2,33045
811373b8:	109c9a04 	addi	r2,r2,29288
811373bc:	1080050b 	ldhu	r2,20(r2)
811373c0:	10bfffcc 	andi	r2,r2,65535
811373c4:	1006917a 	slli	r3,r2,5
811373c8:	00a04574 	movhi	r2,33045
811373cc:	109c9a04 	addi	r2,r2,29288
811373d0:	1080030b 	ldhu	r2,12(r2)
811373d4:	10bfffcc 	andi	r2,r2,65535
811373d8:	1885283a 	div	r2,r3,r2
811373dc:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
811373e0:	00bfffc4 	movi	r2,-1
811373e4:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811373e8:	e03ffb15 	stw	zero,-20(fp)
811373ec:	00002d06 	br	811374a4 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811373f0:	00a04574 	movhi	r2,33045
811373f4:	109c9a04 	addi	r2,r2,29288
811373f8:	10c01317 	ldw	r3,76(r2)
811373fc:	e0bffb17 	ldw	r2,-20(fp)
81137400:	1885883a 	add	r2,r3,r2
81137404:	1007883a 	mov	r3,r2
81137408:	d0a09b17 	ldw	r2,-32148(gp)
8113740c:	100b883a 	mov	r5,r2
81137410:	1809883a 	mov	r4,r3
81137414:	1134e700 	call	81134e70 <Read_Sector_Data>
81137418:	10002626 	beq	r2,zero,811374b4 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8113741c:	e03ffc15 	stw	zero,-16(fp)
81137420:	00001a06 	br	8113748c <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81137424:	e0bffc17 	ldw	r2,-16(fp)
81137428:	1004917a 	slli	r2,r2,5
8113742c:	1007883a 	mov	r3,r2
81137430:	d0a09d17 	ldw	r2,-32140(gp)
81137434:	10800a17 	ldw	r2,40(r2)
81137438:	1885883a 	add	r2,r3,r2
8113743c:	10800023 	ldbuio	r2,0(r2)
81137440:	10803fcc 	andi	r2,r2,255
81137444:	10803fcc 	andi	r2,r2,255
81137448:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
8113744c:	e0bfff0b 	ldhu	r2,-4(fp)
81137450:	10803960 	cmpeqi	r2,r2,229
81137454:	1000021e 	bne	r2,zero,81137460 <find_first_empty_record_in_root_directory+0xc4>
81137458:	e0bfff0b 	ldhu	r2,-4(fp)
8113745c:	1000081e 	bne	r2,zero,81137480 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81137460:	e0bffb17 	ldw	r2,-20(fp)
81137464:	1006913a 	slli	r3,r2,4
81137468:	e0bffc17 	ldw	r2,-16(fp)
8113746c:	1885883a 	add	r2,r3,r2
81137470:	1004943a 	slli	r2,r2,16
81137474:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81137478:	e0bffe17 	ldw	r2,-8(fp)
8113747c:	00000f06 	br	811374bc <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81137480:	e0bffc17 	ldw	r2,-16(fp)
81137484:	10800044 	addi	r2,r2,1
81137488:	e0bffc15 	stw	r2,-16(fp)
8113748c:	e0bffc17 	ldw	r2,-16(fp)
81137490:	10800410 	cmplti	r2,r2,16
81137494:	103fe31e 	bne	r2,zero,81137424 <__reset+0xfb117424>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81137498:	e0bffb17 	ldw	r2,-20(fp)
8113749c:	10800044 	addi	r2,r2,1
811374a0:	e0bffb15 	stw	r2,-20(fp)
811374a4:	e0fffb17 	ldw	r3,-20(fp)
811374a8:	e0bffd17 	ldw	r2,-12(fp)
811374ac:	18bfd016 	blt	r3,r2,811373f0 <__reset+0xfb1173f0>
811374b0:	00000106 	br	811374b8 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
811374b4:	0001883a 	nop
        }
    }
    return result;
811374b8:	e0bffe17 	ldw	r2,-8(fp)
}
811374bc:	e037883a 	mov	sp,fp
811374c0:	dfc00117 	ldw	ra,4(sp)
811374c4:	df000017 	ldw	fp,0(sp)
811374c8:	dec00204 	addi	sp,sp,8
811374cc:	f800283a 	ret

811374d0 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
811374d0:	defffa04 	addi	sp,sp,-24
811374d4:	de00012e 	bgeu	sp,et,811374dc <convert_filename_to_name_extension+0xc>
811374d8:	003b68fa 	trap	3
811374dc:	df000515 	stw	fp,20(sp)
811374e0:	df000504 	addi	fp,sp,20
811374e4:	e13ffd15 	stw	r4,-12(fp)
811374e8:	e17ffe15 	stw	r5,-8(fp)
811374ec:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
811374f0:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
811374f4:	e03ffb15 	stw	zero,-20(fp)
811374f8:	00002506 	br	81137590 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
811374fc:	e0bffc17 	ldw	r2,-16(fp)
81137500:	e0fffd17 	ldw	r3,-12(fp)
81137504:	1885883a 	add	r2,r3,r2
81137508:	10800003 	ldbu	r2,0(r2)
8113750c:	10803fcc 	andi	r2,r2,255
81137510:	1080201c 	xori	r2,r2,128
81137514:	10bfe004 	addi	r2,r2,-128
81137518:	10800ba0 	cmpeqi	r2,r2,46
8113751c:	1000141e 	bne	r2,zero,81137570 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81137520:	e0bffb17 	ldw	r2,-20(fp)
81137524:	e0fffe17 	ldw	r3,-8(fp)
81137528:	1885883a 	add	r2,r3,r2
8113752c:	e0fffc17 	ldw	r3,-16(fp)
81137530:	e13ffd17 	ldw	r4,-12(fp)
81137534:	20c7883a 	add	r3,r4,r3
81137538:	18c00003 	ldbu	r3,0(r3)
8113753c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81137540:	e0bffc17 	ldw	r2,-16(fp)
81137544:	e0fffd17 	ldw	r3,-12(fp)
81137548:	1885883a 	add	r2,r3,r2
8113754c:	10800003 	ldbu	r2,0(r2)
81137550:	10803fcc 	andi	r2,r2,255
81137554:	1080201c 	xori	r2,r2,128
81137558:	10bfe004 	addi	r2,r2,-128
8113755c:	10000926 	beq	r2,zero,81137584 <convert_filename_to_name_extension+0xb4>
81137560:	e0bffc17 	ldw	r2,-16(fp)
81137564:	10800044 	addi	r2,r2,1
81137568:	e0bffc15 	stw	r2,-16(fp)
8113756c:	00000506 	br	81137584 <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
81137570:	e0bffb17 	ldw	r2,-20(fp)
81137574:	e0fffe17 	ldw	r3,-8(fp)
81137578:	1885883a 	add	r2,r3,r2
8113757c:	00c00804 	movi	r3,32
81137580:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81137584:	e0bffb17 	ldw	r2,-20(fp)
81137588:	10800044 	addi	r2,r2,1
8113758c:	e0bffb15 	stw	r2,-20(fp)
81137590:	e0bffb17 	ldw	r2,-20(fp)
81137594:	10800210 	cmplti	r2,r2,8
81137598:	103fd81e 	bne	r2,zero,811374fc <__reset+0xfb1174fc>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
8113759c:	e0bffc17 	ldw	r2,-16(fp)
811375a0:	e0fffd17 	ldw	r3,-12(fp)
811375a4:	1885883a 	add	r2,r3,r2
811375a8:	10800003 	ldbu	r2,0(r2)
811375ac:	10803fcc 	andi	r2,r2,255
811375b0:	1080201c 	xori	r2,r2,128
811375b4:	10bfe004 	addi	r2,r2,-128
811375b8:	10800b98 	cmpnei	r2,r2,46
811375bc:	1000031e 	bne	r2,zero,811375cc <convert_filename_to_name_extension+0xfc>
811375c0:	e0bffc17 	ldw	r2,-16(fp)
811375c4:	10800044 	addi	r2,r2,1
811375c8:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
811375cc:	e03ffb15 	stw	zero,-20(fp)
811375d0:	00001c06 	br	81137644 <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
811375d4:	e0bffc17 	ldw	r2,-16(fp)
811375d8:	e0fffd17 	ldw	r3,-12(fp)
811375dc:	1885883a 	add	r2,r3,r2
811375e0:	10800003 	ldbu	r2,0(r2)
811375e4:	10803fcc 	andi	r2,r2,255
811375e8:	1080201c 	xori	r2,r2,128
811375ec:	10bfe004 	addi	r2,r2,-128
811375f0:	10000c26 	beq	r2,zero,81137624 <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
811375f4:	e0bffb17 	ldw	r2,-20(fp)
811375f8:	e0ffff17 	ldw	r3,-4(fp)
811375fc:	1885883a 	add	r2,r3,r2
81137600:	e0fffc17 	ldw	r3,-16(fp)
81137604:	e13ffd17 	ldw	r4,-12(fp)
81137608:	20c7883a 	add	r3,r4,r3
8113760c:	18c00003 	ldbu	r3,0(r3)
81137610:	10c00005 	stb	r3,0(r2)
            local++;
81137614:	e0bffc17 	ldw	r2,-16(fp)
81137618:	10800044 	addi	r2,r2,1
8113761c:	e0bffc15 	stw	r2,-16(fp)
81137620:	00000506 	br	81137638 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81137624:	e0bffb17 	ldw	r2,-20(fp)
81137628:	e0ffff17 	ldw	r3,-4(fp)
8113762c:	1885883a 	add	r2,r3,r2
81137630:	00c00804 	movi	r3,32
81137634:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81137638:	e0bffb17 	ldw	r2,-20(fp)
8113763c:	10800044 	addi	r2,r2,1
81137640:	e0bffb15 	stw	r2,-20(fp)
81137644:	e0bffb17 	ldw	r2,-20(fp)
81137648:	108000d0 	cmplti	r2,r2,3
8113764c:	103fe11e 	bne	r2,zero,811375d4 <__reset+0xfb1175d4>
        {
            extension[counter] = ' ';
        }
    }

}
81137650:	0001883a 	nop
81137654:	e037883a 	mov	sp,fp
81137658:	df000017 	ldw	fp,0(sp)
8113765c:	dec00104 	addi	sp,sp,4
81137660:	f800283a 	ret

81137664 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81137664:	defff504 	addi	sp,sp,-44
81137668:	de00012e 	bgeu	sp,et,81137670 <create_file+0xc>
8113766c:	003b68fa 	trap	3
81137670:	dfc00a15 	stw	ra,40(sp)
81137674:	df000915 	stw	fp,36(sp)
81137678:	df000904 	addi	fp,sp,36
8113767c:	e13ffd15 	stw	r4,-12(fp)
81137680:	e17ffe15 	stw	r5,-8(fp)
81137684:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81137688:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
8113768c:	e0bffc04 	addi	r2,fp,-16
81137690:	1009883a 	mov	r4,r2
81137694:	1136f940 	call	81136f94 <find_first_empty_cluster>
81137698:	1000a026 	beq	r2,zero,8113791c <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
8113769c:	e0bfff17 	ldw	r2,-4(fp)
811376a0:	10800a17 	ldw	r2,40(r2)
811376a4:	1000031e 	bne	r2,zero,811376b4 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
811376a8:	113739c0 	call	8113739c <find_first_empty_record_in_root_directory>
811376ac:	e0bff815 	stw	r2,-32(fp)
811376b0:	00000606 	br	811376cc <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
811376b4:	e0bfff17 	ldw	r2,-4(fp)
811376b8:	1080058b 	ldhu	r2,22(r2)
811376bc:	10bfffcc 	andi	r2,r2,65535
811376c0:	1009883a 	mov	r4,r2
811376c4:	11371480 	call	81137148 <find_first_empty_record_in_a_subdirectory>
811376c8:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
811376cc:	e0bff817 	ldw	r2,-32(fp)
811376d0:	10009216 	blt	r2,zero,8113791c <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
811376d4:	e13ffd17 	ldw	r4,-12(fp)
811376d8:	11362740 	call	81136274 <get_dir_divider_location>
811376dc:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
811376e0:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
811376e4:	00000b06 	br	81137714 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
811376e8:	e0fffa17 	ldw	r3,-24(fp)
811376ec:	e0bff917 	ldw	r2,-28(fp)
811376f0:	1885883a 	add	r2,r3,r2
811376f4:	10800044 	addi	r2,r2,1
811376f8:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
811376fc:	e0bffa17 	ldw	r2,-24(fp)
81137700:	e0fffd17 	ldw	r3,-12(fp)
81137704:	1885883a 	add	r2,r3,r2
81137708:	1009883a 	mov	r4,r2
8113770c:	11362740 	call	81136274 <get_dir_divider_location>
81137710:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81137714:	e0bff917 	ldw	r2,-28(fp)
81137718:	00bff316 	blt	zero,r2,811376e8 <__reset+0xfb1176e8>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
8113771c:	e0bffa17 	ldw	r2,-24(fp)
81137720:	e0fffd17 	ldw	r3,-12(fp)
81137724:	1887883a 	add	r3,r3,r2
81137728:	e13ffe17 	ldw	r4,-8(fp)
8113772c:	e0bffe17 	ldw	r2,-8(fp)
81137730:	10800204 	addi	r2,r2,8
81137734:	100d883a 	mov	r6,r2
81137738:	200b883a 	mov	r5,r4
8113773c:	1809883a 	mov	r4,r3
81137740:	11374d00 	call	811374d0 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81137744:	e0bffe17 	ldw	r2,-8(fp)
81137748:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
8113774c:	e0bffe17 	ldw	r2,-8(fp)
81137750:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81137754:	e0bffe17 	ldw	r2,-8(fp)
81137758:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
8113775c:	e0bffe17 	ldw	r2,-8(fp)
81137760:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81137764:	e0bffe17 	ldw	r2,-8(fp)
81137768:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
8113776c:	e0bffe17 	ldw	r2,-8(fp)
81137770:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81137774:	e0bffc17 	ldw	r2,-16(fp)
81137778:	1007883a 	mov	r3,r2
8113777c:	e0bffe17 	ldw	r2,-8(fp)
81137780:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81137784:	e0bffe17 	ldw	r2,-8(fp)
81137788:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
8113778c:	e0fffc17 	ldw	r3,-16(fp)
81137790:	e0bffe17 	ldw	r2,-8(fp)
81137794:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81137798:	e0bffe17 	ldw	r2,-8(fp)
8113779c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
811377a0:	e0bffe17 	ldw	r2,-8(fp)
811377a4:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
811377a8:	e0bff817 	ldw	r2,-32(fp)
811377ac:	10ffffcc 	andi	r3,r2,65535
811377b0:	e0bffe17 	ldw	r2,-8(fp)
811377b4:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
811377b8:	e0bff817 	ldw	r2,-32(fp)
811377bc:	1004d43a 	srli	r2,r2,16
811377c0:	1000010e 	bge	r2,zero,811377c8 <create_file+0x164>
811377c4:	108003c4 	addi	r2,r2,15
811377c8:	1005d13a 	srai	r2,r2,4
811377cc:	1007883a 	mov	r3,r2
811377d0:	e0bffe17 	ldw	r2,-8(fp)
811377d4:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
811377d8:	e0bff817 	ldw	r2,-32(fp)
811377dc:	1004d43a 	srli	r2,r2,16
811377e0:	1007883a 	mov	r3,r2
811377e4:	00a00034 	movhi	r2,32768
811377e8:	108003c4 	addi	r2,r2,15
811377ec:	1884703a 	and	r2,r3,r2
811377f0:	1000040e 	bge	r2,zero,81137804 <create_file+0x1a0>
811377f4:	10bfffc4 	addi	r2,r2,-1
811377f8:	00fffc04 	movi	r3,-16
811377fc:	10c4b03a 	or	r2,r2,r3
81137800:	10800044 	addi	r2,r2,1
81137804:	1004917a 	slli	r2,r2,5
81137808:	1007883a 	mov	r3,r2
8113780c:	e0bffe17 	ldw	r2,-8(fp)
81137810:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81137814:	e0bfff17 	ldw	r2,-4(fp)
81137818:	1080058b 	ldhu	r2,22(r2)
8113781c:	10ffffcc 	andi	r3,r2,65535
81137820:	e0bffe17 	ldw	r2,-8(fp)
81137824:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81137828:	e0bffe17 	ldw	r2,-8(fp)
8113782c:	00c00044 	movi	r3,1
81137830:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
81137834:	e0bffe17 	ldw	r2,-8(fp)
81137838:	00c00044 	movi	r3,1
8113783c:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81137840:	e0bffe17 	ldw	r2,-8(fp)
81137844:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81137848:	1000071e 	bne	r2,zero,81137868 <create_file+0x204>
8113784c:	00a04574 	movhi	r2,33045
81137850:	109c9a04 	addi	r2,r2,29288
81137854:	10c01317 	ldw	r3,76(r2)
81137858:	e0bffe17 	ldw	r2,-8(fp)
8113785c:	10800b17 	ldw	r2,44(r2)
81137860:	1885883a 	add	r2,r3,r2
81137864:	00000f06 	br	811378a4 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81137868:	00a04574 	movhi	r2,33045
8113786c:	109c9a04 	addi	r2,r2,29288
81137870:	10c01417 	ldw	r3,80(r2)
81137874:	e0bffe17 	ldw	r2,-8(fp)
81137878:	10800a17 	ldw	r2,40(r2)
8113787c:	113fff84 	addi	r4,r2,-2
81137880:	00a04574 	movhi	r2,33045
81137884:	109c9a04 	addi	r2,r2,29288
81137888:	10800383 	ldbu	r2,14(r2)
8113788c:	10803fcc 	andi	r2,r2,255
81137890:	2085383a 	mul	r2,r4,r2
81137894:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81137898:	e0bffe17 	ldw	r2,-8(fp)
8113789c:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
811378a0:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
811378a4:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
811378a8:	e0bffb17 	ldw	r2,-20(fp)
811378ac:	d0e09b17 	ldw	r3,-32148(gp)
811378b0:	180b883a 	mov	r5,r3
811378b4:	1009883a 	mov	r4,r2
811378b8:	1134e700 	call	81134e70 <Read_Sector_Data>
811378bc:	10001726 	beq	r2,zero,8113791c <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
811378c0:	e0bffe17 	ldw	r2,-8(fp)
811378c4:	10800c0b 	ldhu	r2,48(r2)
811378c8:	10bfffcc 	andi	r2,r2,65535
811378cc:	10a0001c 	xori	r2,r2,32768
811378d0:	10a00004 	addi	r2,r2,-32768
811378d4:	e17ffe17 	ldw	r5,-8(fp)
811378d8:	1009883a 	mov	r4,r2
811378dc:	11355240 	call	81135524 <Write_File_Record_At_Offset>
811378e0:	10000e26 	beq	r2,zero,8113791c <create_file+0x2b8>
                {
                    Save_Modified_Sector();
811378e4:	1134e1c0 	call	81134e1c <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
811378e8:	e0bffc17 	ldw	r2,-16(fp)
811378ec:	01800044 	movi	r6,1
811378f0:	017fffc4 	movi	r5,-1
811378f4:	1009883a 	mov	r4,r2
811378f8:	113500c0 	call	8113500c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
811378fc:	e0bffc17 	ldw	r2,-16(fp)
81137900:	000d883a 	mov	r6,zero
81137904:	017fffc4 	movi	r5,-1
81137908:	1009883a 	mov	r4,r2
8113790c:	113500c0 	call	8113500c <mark_cluster>
81137910:	10000226 	beq	r2,zero,8113791c <create_file+0x2b8>
                    {
                        result = true;
81137914:	00800044 	movi	r2,1
81137918:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
8113791c:	e0bff717 	ldw	r2,-36(fp)
}
81137920:	e037883a 	mov	sp,fp
81137924:	dfc00117 	ldw	ra,4(sp)
81137928:	df000017 	ldw	fp,0(sp)
8113792c:	dec00204 	addi	sp,sp,8
81137930:	f800283a 	ret

81137934 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
81137934:	defffb04 	addi	sp,sp,-20
81137938:	de00012e 	bgeu	sp,et,81137940 <copy_file_record_name_to_string+0xc>
8113793c:	003b68fa 	trap	3
81137940:	df000415 	stw	fp,16(sp)
81137944:	df000404 	addi	fp,sp,16
81137948:	e13ffe15 	stw	r4,-8(fp)
8113794c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
81137950:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81137954:	e03ffc15 	stw	zero,-16(fp)
81137958:	00001506 	br	811379b0 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
8113795c:	e0fffe17 	ldw	r3,-8(fp)
81137960:	e0bffc17 	ldw	r2,-16(fp)
81137964:	1885883a 	add	r2,r3,r2
81137968:	10800003 	ldbu	r2,0(r2)
8113796c:	10803fcc 	andi	r2,r2,255
81137970:	10800820 	cmpeqi	r2,r2,32
81137974:	10000b1e 	bne	r2,zero,811379a4 <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81137978:	e0bffd17 	ldw	r2,-12(fp)
8113797c:	e0ffff17 	ldw	r3,-4(fp)
81137980:	1885883a 	add	r2,r3,r2
81137984:	e13ffe17 	ldw	r4,-8(fp)
81137988:	e0fffc17 	ldw	r3,-16(fp)
8113798c:	20c7883a 	add	r3,r4,r3
81137990:	18c00003 	ldbu	r3,0(r3)
81137994:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81137998:	e0bffd17 	ldw	r2,-12(fp)
8113799c:	10800044 	addi	r2,r2,1
811379a0:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
811379a4:	e0bffc17 	ldw	r2,-16(fp)
811379a8:	10800044 	addi	r2,r2,1
811379ac:	e0bffc15 	stw	r2,-16(fp)
811379b0:	e0bffc17 	ldw	r2,-16(fp)
811379b4:	10800210 	cmplti	r2,r2,8
811379b8:	103fe81e 	bne	r2,zero,8113795c <__reset+0xfb11795c>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
811379bc:	e0bffe17 	ldw	r2,-8(fp)
811379c0:	10800203 	ldbu	r2,8(r2)
811379c4:	10803fcc 	andi	r2,r2,255
811379c8:	10800820 	cmpeqi	r2,r2,32
811379cc:	1000241e 	bne	r2,zero,81137a60 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
811379d0:	e0bffd17 	ldw	r2,-12(fp)
811379d4:	e0ffff17 	ldw	r3,-4(fp)
811379d8:	1885883a 	add	r2,r3,r2
811379dc:	00c00b84 	movi	r3,46
811379e0:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
811379e4:	e0bffd17 	ldw	r2,-12(fp)
811379e8:	10800044 	addi	r2,r2,1
811379ec:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
811379f0:	e03ffc15 	stw	zero,-16(fp)
811379f4:	00001706 	br	81137a54 <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
811379f8:	e0fffe17 	ldw	r3,-8(fp)
811379fc:	e0bffc17 	ldw	r2,-16(fp)
81137a00:	1885883a 	add	r2,r3,r2
81137a04:	10800204 	addi	r2,r2,8
81137a08:	10800003 	ldbu	r2,0(r2)
81137a0c:	10803fcc 	andi	r2,r2,255
81137a10:	10800820 	cmpeqi	r2,r2,32
81137a14:	10000c1e 	bne	r2,zero,81137a48 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81137a18:	e0bffd17 	ldw	r2,-12(fp)
81137a1c:	e0ffff17 	ldw	r3,-4(fp)
81137a20:	1885883a 	add	r2,r3,r2
81137a24:	e13ffe17 	ldw	r4,-8(fp)
81137a28:	e0fffc17 	ldw	r3,-16(fp)
81137a2c:	20c7883a 	add	r3,r4,r3
81137a30:	18c00204 	addi	r3,r3,8
81137a34:	18c00003 	ldbu	r3,0(r3)
81137a38:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
81137a3c:	e0bffd17 	ldw	r2,-12(fp)
81137a40:	10800044 	addi	r2,r2,1
81137a44:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
81137a48:	e0bffc17 	ldw	r2,-16(fp)
81137a4c:	10800044 	addi	r2,r2,1
81137a50:	e0bffc15 	stw	r2,-16(fp)
81137a54:	e0bffc17 	ldw	r2,-16(fp)
81137a58:	108000d0 	cmplti	r2,r2,3
81137a5c:	103fe61e 	bne	r2,zero,811379f8 <__reset+0xfb1179f8>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
81137a60:	e0bffd17 	ldw	r2,-12(fp)
81137a64:	e0ffff17 	ldw	r3,-4(fp)
81137a68:	1885883a 	add	r2,r3,r2
81137a6c:	10000005 	stb	zero,0(r2)
}
81137a70:	0001883a 	nop
81137a74:	e037883a 	mov	sp,fp
81137a78:	df000017 	ldw	fp,0(sp)
81137a7c:	dec00104 	addi	sp,sp,4
81137a80:	f800283a 	ret

81137a84 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
81137a84:	defffc04 	addi	sp,sp,-16
81137a88:	de00012e 	bgeu	sp,et,81137a90 <alt_up_sd_card_open_dev+0xc>
81137a8c:	003b68fa 	trap	3
81137a90:	dfc00315 	stw	ra,12(sp)
81137a94:	df000215 	stw	fp,8(sp)
81137a98:	df000204 	addi	fp,sp,8
81137a9c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81137aa0:	d1600d04 	addi	r5,gp,-32716
81137aa4:	e13fff17 	ldw	r4,-4(fp)
81137aa8:	113d0100 	call	8113d010 <alt_find_dev>
81137aac:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81137ab0:	e0bffe17 	ldw	r2,-8(fp)
81137ab4:	10001e26 	beq	r2,zero,81137b30 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81137ab8:	e0bffe17 	ldw	r2,-8(fp)
81137abc:	10800a17 	ldw	r2,40(r2)
81137ac0:	10808d04 	addi	r2,r2,564
81137ac4:	d0a09515 	stw	r2,-32172(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81137ac8:	e0bffe17 	ldw	r2,-8(fp)
81137acc:	10800a17 	ldw	r2,40(r2)
81137ad0:	10808904 	addi	r2,r2,548
81137ad4:	d0a09615 	stw	r2,-32168(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81137ad8:	e0bffe17 	ldw	r2,-8(fp)
81137adc:	10800a17 	ldw	r2,40(r2)
81137ae0:	10808404 	addi	r2,r2,528
81137ae4:	d0a09715 	stw	r2,-32164(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81137ae8:	e0bffe17 	ldw	r2,-8(fp)
81137aec:	10800a17 	ldw	r2,40(r2)
81137af0:	10808c04 	addi	r2,r2,560
81137af4:	d0a09815 	stw	r2,-32160(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81137af8:	e0bffe17 	ldw	r2,-8(fp)
81137afc:	10800a17 	ldw	r2,40(r2)
81137b00:	10808b04 	addi	r2,r2,556
81137b04:	d0a09915 	stw	r2,-32156(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81137b08:	e0bffe17 	ldw	r2,-8(fp)
81137b0c:	10800a17 	ldw	r2,40(r2)
81137b10:	d0a09a15 	stw	r2,-32152(gp)
		device_pointer = dev;
81137b14:	e0bffe17 	ldw	r2,-8(fp)
81137b18:	d0a09d15 	stw	r2,-32140(gp)
		initialized = false;
81137b1c:	d0209315 	stw	zero,-32180(gp)
		is_sd_card_formated_as_FAT16 = false;
81137b20:	d0209415 	stw	zero,-32176(gp)
		search_data.valid = false;
81137b24:	00a04574 	movhi	r2,33045
81137b28:	109c9504 	addi	r2,r2,29268
81137b2c:	10000415 	stw	zero,16(r2)
	}
	return dev;
81137b30:	e0bffe17 	ldw	r2,-8(fp)
}
81137b34:	e037883a 	mov	sp,fp
81137b38:	dfc00117 	ldw	ra,4(sp)
81137b3c:	df000017 	ldw	fp,0(sp)
81137b40:	dec00204 	addi	sp,sp,8
81137b44:	f800283a 	ret

81137b48 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
81137b48:	defffd04 	addi	sp,sp,-12
81137b4c:	de00012e 	bgeu	sp,et,81137b54 <alt_up_sd_card_is_Present+0xc>
81137b50:	003b68fa 	trap	3
81137b54:	df000215 	stw	fp,8(sp)
81137b58:	df000204 	addi	fp,sp,8
    bool result = false;
81137b5c:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
81137b60:	d0a09d17 	ldw	r2,-32140(gp)
81137b64:	10000826 	beq	r2,zero,81137b88 <alt_up_sd_card_is_Present+0x40>
81137b68:	d0a09517 	ldw	r2,-32172(gp)
81137b6c:	1080002b 	ldhuio	r2,0(r2)
81137b70:	10bfffcc 	andi	r2,r2,65535
81137b74:	1080008c 	andi	r2,r2,2
81137b78:	10000326 	beq	r2,zero,81137b88 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81137b7c:	00800044 	movi	r2,1
81137b80:	e0bffe15 	stw	r2,-8(fp)
81137b84:	00001e06 	br	81137c00 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81137b88:	d0a09317 	ldw	r2,-32180(gp)
81137b8c:	10800058 	cmpnei	r2,r2,1
81137b90:	10001b1e 	bne	r2,zero,81137c00 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81137b94:	d0209315 	stw	zero,-32180(gp)
		search_data.valid = false;
81137b98:	00a04574 	movhi	r2,33045
81137b9c:	109c9504 	addi	r2,r2,29268
81137ba0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81137ba4:	d0209415 	stw	zero,-32176(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81137ba8:	e03fff15 	stw	zero,-4(fp)
81137bac:	00001106 	br	81137bf4 <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81137bb0:	00a04574 	movhi	r2,33045
81137bb4:	109caf04 	addi	r2,r2,29372
81137bb8:	e0ffff17 	ldw	r3,-4(fp)
81137bbc:	180691ba 	slli	r3,r3,6
81137bc0:	10c5883a 	add	r2,r2,r3
81137bc4:	10800f04 	addi	r2,r2,60
81137bc8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81137bcc:	00a04574 	movhi	r2,33045
81137bd0:	109caf04 	addi	r2,r2,29372
81137bd4:	e0ffff17 	ldw	r3,-4(fp)
81137bd8:	180691ba 	slli	r3,r3,6
81137bdc:	10c5883a 	add	r2,r2,r3
81137be0:	10800e04 	addi	r2,r2,56
81137be4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81137be8:	e0bfff17 	ldw	r2,-4(fp)
81137bec:	10800044 	addi	r2,r2,1
81137bf0:	e0bfff15 	stw	r2,-4(fp)
81137bf4:	e0bfff17 	ldw	r2,-4(fp)
81137bf8:	10800510 	cmplti	r2,r2,20
81137bfc:	103fec1e 	bne	r2,zero,81137bb0 <__reset+0xfb117bb0>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81137c00:	e0bffe17 	ldw	r2,-8(fp)
}
81137c04:	e037883a 	mov	sp,fp
81137c08:	df000017 	ldw	fp,0(sp)
81137c0c:	dec00104 	addi	sp,sp,4
81137c10:	f800283a 	ret

81137c14 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
81137c14:	defffd04 	addi	sp,sp,-12
81137c18:	de00012e 	bgeu	sp,et,81137c20 <alt_up_sd_card_is_FAT16+0xc>
81137c1c:	003b68fa 	trap	3
81137c20:	dfc00215 	stw	ra,8(sp)
81137c24:	df000115 	stw	fp,4(sp)
81137c28:	df000104 	addi	fp,sp,4
	bool result = false;
81137c2c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
81137c30:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81137c34:	10000c26 	beq	r2,zero,81137c68 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
81137c38:	d0a09317 	ldw	r2,-32180(gp)
81137c3c:	1000071e 	bne	r2,zero,81137c5c <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
81137c40:	1135e400 	call	81135e40 <Look_for_FAT16>
81137c44:	d0a09415 	stw	r2,-32176(gp)
			initialized = is_sd_card_formated_as_FAT16;
81137c48:	d0a09417 	ldw	r2,-32176(gp)
81137c4c:	d0a09315 	stw	r2,-32180(gp)
			search_data.valid = false;
81137c50:	00a04574 	movhi	r2,33045
81137c54:	109c9504 	addi	r2,r2,29268
81137c58:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
81137c5c:	d0a09417 	ldw	r2,-32176(gp)
81137c60:	e0bfff15 	stw	r2,-4(fp)
81137c64:	00000206 	br	81137c70 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
81137c68:	d0209315 	stw	zero,-32180(gp)
		is_sd_card_formated_as_FAT16 = false;
81137c6c:	d0209415 	stw	zero,-32176(gp)
	}

	return result;
81137c70:	e0bfff17 	ldw	r2,-4(fp)
}
81137c74:	e037883a 	mov	sp,fp
81137c78:	dfc00117 	ldw	ra,4(sp)
81137c7c:	df000017 	ldw	fp,0(sp)
81137c80:	dec00204 	addi	sp,sp,8
81137c84:	f800283a 	ret

81137c88 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81137c88:	deffea04 	addi	sp,sp,-88
81137c8c:	de00012e 	bgeu	sp,et,81137c94 <alt_up_sd_card_find_first+0xc>
81137c90:	003b68fa 	trap	3
81137c94:	dfc01515 	stw	ra,84(sp)
81137c98:	df001415 	stw	fp,80(sp)
81137c9c:	df001404 	addi	fp,sp,80
81137ca0:	e13ffe15 	stw	r4,-8(fp)
81137ca4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81137ca8:	00800084 	movi	r2,2
81137cac:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81137cb0:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81137cb4:	10002426 	beq	r2,zero,81137d48 <alt_up_sd_card_find_first+0xc0>
81137cb8:	d0a09417 	ldw	r2,-32176(gp)
81137cbc:	10002226 	beq	r2,zero,81137d48 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81137cc0:	e0ffee04 	addi	r3,fp,-72
81137cc4:	e0bfed04 	addi	r2,fp,-76
81137cc8:	180d883a 	mov	r6,r3
81137ccc:	100b883a 	mov	r5,r2
81137cd0:	e13ffe17 	ldw	r4,-8(fp)
81137cd4:	11365d80 	call	811365d8 <get_home_directory_cluster_for_file>
81137cd8:	10001926 	beq	r2,zero,81137d40 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81137cdc:	e0bfed17 	ldw	r2,-76(fp)
81137ce0:	1007883a 	mov	r3,r2
81137ce4:	00a04574 	movhi	r2,33045
81137ce8:	109c9504 	addi	r2,r2,29268
81137cec:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
81137cf0:	e0bfed17 	ldw	r2,-76(fp)
81137cf4:	1007883a 	mov	r3,r2
81137cf8:	00a04574 	movhi	r2,33045
81137cfc:	109c9504 	addi	r2,r2,29268
81137d00:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
81137d04:	00a04574 	movhi	r2,33045
81137d08:	109c9504 	addi	r2,r2,29268
81137d0c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
81137d10:	00a04574 	movhi	r2,33045
81137d14:	109c9504 	addi	r2,r2,29268
81137d18:	00ffffc4 	movi	r3,-1
81137d1c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
81137d20:	00a04574 	movhi	r2,33045
81137d24:	109c9504 	addi	r2,r2,29268
81137d28:	00c00044 	movi	r3,1
81137d2c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
81137d30:	e13fff17 	ldw	r4,-4(fp)
81137d34:	1137d600 	call	81137d60 <alt_up_sd_card_find_next>
81137d38:	e0bfec0d 	sth	r2,-80(fp)
81137d3c:	00000206 	br	81137d48 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
81137d40:	00800044 	movi	r2,1
81137d44:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
81137d48:	e0bfec0b 	ldhu	r2,-80(fp)
}
81137d4c:	e037883a 	mov	sp,fp
81137d50:	dfc00117 	ldw	ra,4(sp)
81137d54:	df000017 	ldw	fp,0(sp)
81137d58:	dec00204 	addi	sp,sp,8
81137d5c:	f800283a 	ret

81137d60 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
81137d60:	deffe404 	addi	sp,sp,-112
81137d64:	de00012e 	bgeu	sp,et,81137d6c <alt_up_sd_card_find_next+0xc>
81137d68:	003b68fa 	trap	3
81137d6c:	dfc01b15 	stw	ra,108(sp)
81137d70:	df001a15 	stw	fp,104(sp)
81137d74:	df001a04 	addi	fp,sp,104
81137d78:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81137d7c:	00800084 	movi	r2,2
81137d80:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81137d84:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81137d88:	1000df26 	beq	r2,zero,81138108 <alt_up_sd_card_find_next+0x3a8>
81137d8c:	d0a09417 	ldw	r2,-32176(gp)
81137d90:	1000dd26 	beq	r2,zero,81138108 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81137d94:	00a04574 	movhi	r2,33045
81137d98:	109c9504 	addi	r2,r2,29268
81137d9c:	10800417 	ldw	r2,16(r2)
81137da0:	1000d726 	beq	r2,zero,81138100 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
81137da4:	00a04574 	movhi	r2,33045
81137da8:	109c9504 	addi	r2,r2,29268
81137dac:	10800117 	ldw	r2,4(r2)
81137db0:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
81137db4:	e0bfe717 	ldw	r2,-100(fp)
81137db8:	1000561e 	bne	r2,zero,81137f14 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81137dbc:	00a04574 	movhi	r2,33045
81137dc0:	109c9a04 	addi	r2,r2,29288
81137dc4:	1080050b 	ldhu	r2,20(r2)
81137dc8:	10bfffcc 	andi	r2,r2,65535
81137dcc:	1006917a 	slli	r3,r2,5
81137dd0:	00a04574 	movhi	r2,33045
81137dd4:	109c9a04 	addi	r2,r2,29288
81137dd8:	1080030b 	ldhu	r2,12(r2)
81137ddc:	10bfffcc 	andi	r2,r2,65535
81137de0:	1885283a 	div	r2,r3,r2
81137de4:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81137de8:	00a04574 	movhi	r2,33045
81137dec:	109c9504 	addi	r2,r2,29268
81137df0:	10800217 	ldw	r2,8(r2)
81137df4:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81137df8:	00a04574 	movhi	r2,33045
81137dfc:	109c9504 	addi	r2,r2,29268
81137e00:	1080030b 	ldhu	r2,12(r2)
81137e04:	10bfffcc 	andi	r2,r2,65535
81137e08:	10a0001c 	xori	r2,r2,32768
81137e0c:	10a00004 	addi	r2,r2,-32768
81137e10:	10800044 	addi	r2,r2,1
81137e14:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81137e18:	00003606 	br	81137ef4 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81137e1c:	00a04574 	movhi	r2,33045
81137e20:	109c9a04 	addi	r2,r2,29288
81137e24:	10c01317 	ldw	r3,76(r2)
81137e28:	e0bfe817 	ldw	r2,-96(fp)
81137e2c:	1885883a 	add	r2,r3,r2
81137e30:	1007883a 	mov	r3,r2
81137e34:	d0a09b17 	ldw	r2,-32148(gp)
81137e38:	100b883a 	mov	r5,r2
81137e3c:	1809883a 	mov	r4,r3
81137e40:	1134e700 	call	81134e70 <Read_Sector_Data>
81137e44:	10002f26 	beq	r2,zero,81137f04 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81137e48:	00002306 	br	81137ed8 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
81137e4c:	e0bfe917 	ldw	r2,-92(fp)
81137e50:	1004917a 	slli	r2,r2,5
81137e54:	e13fe817 	ldw	r4,-96(fp)
81137e58:	e0ffef04 	addi	r3,fp,-68
81137e5c:	200f883a 	mov	r7,r4
81137e60:	000d883a 	mov	r6,zero
81137e64:	180b883a 	mov	r5,r3
81137e68:	1009883a 	mov	r4,r2
81137e6c:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
81137e70:	10001626 	beq	r2,zero,81137ecc <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81137e74:	e0bfef03 	ldbu	r2,-68(fp)
81137e78:	10803fcc 	andi	r2,r2,255
81137e7c:	10001326 	beq	r2,zero,81137ecc <alt_up_sd_card_find_next+0x16c>
81137e80:	e0bfef03 	ldbu	r2,-68(fp)
81137e84:	10803fcc 	andi	r2,r2,255
81137e88:	10803960 	cmpeqi	r2,r2,229
81137e8c:	10000f1e 	bne	r2,zero,81137ecc <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81137e90:	e0bfe917 	ldw	r2,-92(fp)
81137e94:	1007883a 	mov	r3,r2
81137e98:	00a04574 	movhi	r2,33045
81137e9c:	109c9504 	addi	r2,r2,29268
81137ea0:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
81137ea4:	e0ffe817 	ldw	r3,-96(fp)
81137ea8:	00a04574 	movhi	r2,33045
81137eac:	109c9504 	addi	r2,r2,29268
81137eb0:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
81137eb4:	e0bfef04 	addi	r2,fp,-68
81137eb8:	e17fff17 	ldw	r5,-4(fp)
81137ebc:	1009883a 	mov	r4,r2
81137ec0:	11379340 	call	81137934 <copy_file_record_name_to_string>
									return 0;
81137ec4:	0005883a 	mov	r2,zero
81137ec8:	00009006 	br	8113810c <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81137ecc:	e0bfe917 	ldw	r2,-92(fp)
81137ed0:	10800044 	addi	r2,r2,1
81137ed4:	e0bfe915 	stw	r2,-92(fp)
81137ed8:	e0bfe917 	ldw	r2,-92(fp)
81137edc:	10800410 	cmplti	r2,r2,16
81137ee0:	103fda1e 	bne	r2,zero,81137e4c <__reset+0xfb117e4c>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
81137ee4:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81137ee8:	e0bfe817 	ldw	r2,-96(fp)
81137eec:	10800044 	addi	r2,r2,1
81137ef0:	e0bfe815 	stw	r2,-96(fp)
81137ef4:	e0ffe817 	ldw	r3,-96(fp)
81137ef8:	e0bfec17 	ldw	r2,-80(fp)
81137efc:	18bfc716 	blt	r3,r2,81137e1c <__reset+0xfb117e1c>
81137f00:	00000106 	br	81137f08 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
81137f04:	0001883a 	nop
					}
				}
				result = -1;
81137f08:	00bfffc4 	movi	r2,-1
81137f0c:	e0bfe60d 	sth	r2,-104(fp)
81137f10:	00007d06 	br	81138108 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
81137f14:	00a04574 	movhi	r2,33045
81137f18:	109c9504 	addi	r2,r2,29268
81137f1c:	1080030b 	ldhu	r2,12(r2)
81137f20:	10bfffcc 	andi	r2,r2,65535
81137f24:	10a0001c 	xori	r2,r2,32768
81137f28:	10a00004 	addi	r2,r2,-32768
81137f2c:	10800044 	addi	r2,r2,1
81137f30:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81137f34:	e0bfe717 	ldw	r2,-100(fp)
81137f38:	10ffff84 	addi	r3,r2,-2
81137f3c:	00a04574 	movhi	r2,33045
81137f40:	109c9a04 	addi	r2,r2,29288
81137f44:	10800383 	ldbu	r2,14(r2)
81137f48:	10803fcc 	andi	r2,r2,255
81137f4c:	1885383a 	mul	r2,r3,r2
81137f50:	1007883a 	mov	r3,r2
81137f54:	00a04574 	movhi	r2,33045
81137f58:	109c9a04 	addi	r2,r2,29288
81137f5c:	10801417 	ldw	r2,80(r2)
81137f60:	1885883a 	add	r2,r3,r2
81137f64:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
81137f68:	00a04574 	movhi	r2,33045
81137f6c:	109c9504 	addi	r2,r2,29268
81137f70:	10800217 	ldw	r2,8(r2)
81137f74:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81137f78:	00003806 	br	8113805c <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81137f7c:	e0ffeb17 	ldw	r3,-84(fp)
81137f80:	e0bfed17 	ldw	r2,-76(fp)
81137f84:	1885883a 	add	r2,r3,r2
81137f88:	d0e09b17 	ldw	r3,-32148(gp)
81137f8c:	180b883a 	mov	r5,r3
81137f90:	1009883a 	mov	r4,r2
81137f94:	1134e700 	call	81134e70 <Read_Sector_Data>
81137f98:	10003726 	beq	r2,zero,81138078 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81137f9c:	00002806 	br	81138040 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81137fa0:	e0bfea17 	ldw	r2,-88(fp)
81137fa4:	1004917a 	slli	r2,r2,5
81137fa8:	e13fe717 	ldw	r4,-100(fp)
81137fac:	e17feb17 	ldw	r5,-84(fp)
81137fb0:	e0ffef04 	addi	r3,fp,-68
81137fb4:	280f883a 	mov	r7,r5
81137fb8:	200d883a 	mov	r6,r4
81137fbc:	180b883a 	mov	r5,r3
81137fc0:	1009883a 	mov	r4,r2
81137fc4:	11352a00 	call	811352a0 <Read_File_Record_At_Offset>
81137fc8:	10001a26 	beq	r2,zero,81138034 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81137fcc:	e0bfef03 	ldbu	r2,-68(fp)
81137fd0:	10803fcc 	andi	r2,r2,255
81137fd4:	10001726 	beq	r2,zero,81138034 <alt_up_sd_card_find_next+0x2d4>
81137fd8:	e0bfef03 	ldbu	r2,-68(fp)
81137fdc:	10803fcc 	andi	r2,r2,255
81137fe0:	10803960 	cmpeqi	r2,r2,229
81137fe4:	1000131e 	bne	r2,zero,81138034 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81137fe8:	e0ffe717 	ldw	r3,-100(fp)
81137fec:	00a04574 	movhi	r2,33045
81137ff0:	109c9504 	addi	r2,r2,29268
81137ff4:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81137ff8:	e0bfea17 	ldw	r2,-88(fp)
81137ffc:	1007883a 	mov	r3,r2
81138000:	00a04574 	movhi	r2,33045
81138004:	109c9504 	addi	r2,r2,29268
81138008:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
8113800c:	e0ffeb17 	ldw	r3,-84(fp)
81138010:	00a04574 	movhi	r2,33045
81138014:	109c9504 	addi	r2,r2,29268
81138018:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
8113801c:	e0bfef04 	addi	r2,fp,-68
81138020:	e17fff17 	ldw	r5,-4(fp)
81138024:	1009883a 	mov	r4,r2
81138028:	11379340 	call	81137934 <copy_file_record_name_to_string>
										return 0;
8113802c:	0005883a 	mov	r2,zero
81138030:	00003606 	br	8113810c <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
81138034:	e0bfea17 	ldw	r2,-88(fp)
81138038:	10800044 	addi	r2,r2,1
8113803c:	e0bfea15 	stw	r2,-88(fp)
81138040:	e0bfea17 	ldw	r2,-88(fp)
81138044:	10800410 	cmplti	r2,r2,16
81138048:	103fd51e 	bne	r2,zero,81137fa0 <__reset+0xfb117fa0>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
8113804c:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81138050:	e0bfeb17 	ldw	r2,-84(fp)
81138054:	10800044 	addi	r2,r2,1
81138058:	e0bfeb15 	stw	r2,-84(fp)
8113805c:	00a04574 	movhi	r2,33045
81138060:	109c9a04 	addi	r2,r2,29288
81138064:	10800383 	ldbu	r2,14(r2)
81138068:	10803fcc 	andi	r2,r2,255
8113806c:	e0ffeb17 	ldw	r3,-84(fp)
81138070:	18bfc216 	blt	r3,r2,81137f7c <__reset+0xfb117f7c>
81138074:	00000106 	br	8113807c <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
81138078:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
8113807c:	00a04574 	movhi	r2,33045
81138080:	109c9a04 	addi	r2,r2,29288
81138084:	10800383 	ldbu	r2,14(r2)
81138088:	10803fcc 	andi	r2,r2,255
8113808c:	e0ffeb17 	ldw	r3,-84(fp)
81138090:	18801716 	blt	r3,r2,811380f0 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81138094:	e0bfe717 	ldw	r2,-100(fp)
81138098:	e0ffee04 	addi	r3,fp,-72
8113809c:	180b883a 	mov	r5,r3
811380a0:	1009883a 	mov	r4,r2
811380a4:	1134f500 	call	81134f50 <get_cluster_flag>
811380a8:	10000f26 	beq	r2,zero,811380e8 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811380ac:	e0bfee0b 	ldhu	r2,-72(fp)
811380b0:	10bfffcc 	andi	r2,r2,65535
811380b4:	10fffe0c 	andi	r3,r2,65528
811380b8:	00bffe14 	movui	r2,65528
811380bc:	1880051e 	bne	r3,r2,811380d4 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
811380c0:	00bfffc4 	movi	r2,-1
811380c4:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
811380c8:	00a04574 	movhi	r2,33045
811380cc:	109c9504 	addi	r2,r2,29268
811380d0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
811380d4:	e0bfee0b 	ldhu	r2,-72(fp)
811380d8:	10bfffcc 	andi	r2,r2,65535
811380dc:	10bffe0c 	andi	r2,r2,65528
811380e0:	e0bfe715 	stw	r2,-100(fp)
811380e4:	00000206 	br	811380f0 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
811380e8:	00bfffc4 	movi	r2,-1
811380ec:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
811380f0:	e0bfe717 	ldw	r2,-100(fp)
811380f4:	00fffdd4 	movui	r3,65527
811380f8:	18bf8e0e 	bge	r3,r2,81137f34 <__reset+0xfb117f34>
811380fc:	00000206 	br	81138108 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81138100:	008000c4 	movi	r2,3
81138104:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81138108:	e0bfe60b 	ldhu	r2,-104(fp)
}
8113810c:	e037883a 	mov	sp,fp
81138110:	dfc00117 	ldw	ra,4(sp)
81138114:	df000017 	ldw	fp,0(sp)
81138118:	dec00204 	addi	sp,sp,8
8113811c:	f800283a 	ret

81138120 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81138120:	deffe904 	addi	sp,sp,-92
81138124:	de00012e 	bgeu	sp,et,8113812c <alt_up_sd_card_fopen+0xc>
81138128:	003b68fa 	trap	3
8113812c:	dfc01615 	stw	ra,88(sp)
81138130:	df001515 	stw	fp,84(sp)
81138134:	df001504 	addi	fp,sp,84
81138138:	e13ffe15 	stw	r4,-8(fp)
8113813c:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
81138140:	00bfffc4 	movi	r2,-1
81138144:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81138148:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
8113814c:	1000cf26 	beq	r2,zero,8113848c <alt_up_sd_card_fopen+0x36c>
81138150:	d0a09417 	ldw	r2,-32176(gp)
81138154:	1000cd26 	beq	r2,zero,8113848c <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81138158:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
8113815c:	e13ffe17 	ldw	r4,-8(fp)
81138160:	1135f340 	call	81135f34 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
81138164:	e13ffe17 	ldw	r4,-8(fp)
81138168:	11360000 	call	81136000 <check_file_name_for_FAT16_compliance>
8113816c:	1000c726 	beq	r2,zero,8113848c <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
81138170:	e0ffee04 	addi	r3,fp,-72
81138174:	e0bfed04 	addi	r2,fp,-76
81138178:	180d883a 	mov	r6,r3
8113817c:	100b883a 	mov	r5,r2
81138180:	e13ffe17 	ldw	r4,-8(fp)
81138184:	11365d80 	call	811365d8 <get_home_directory_cluster_for_file>
81138188:	1000021e 	bne	r2,zero,81138194 <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
8113818c:	e0bfeb0b 	ldhu	r2,-84(fp)
81138190:	0000bf06 	br	81138490 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81138194:	e03fec15 	stw	zero,-80(fp)
81138198:	00000e06 	br	811381d4 <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
8113819c:	00a04574 	movhi	r2,33045
811381a0:	109caf04 	addi	r2,r2,29372
811381a4:	e0ffec17 	ldw	r3,-80(fp)
811381a8:	180691ba 	slli	r3,r3,6
811381ac:	10c5883a 	add	r2,r2,r3
811381b0:	10800f04 	addi	r2,r2,60
811381b4:	10800017 	ldw	r2,0(r2)
811381b8:	1000031e 	bne	r2,zero,811381c8 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
811381bc:	e0bfec17 	ldw	r2,-80(fp)
811381c0:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
811381c4:	00000606 	br	811381e0 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
811381c8:	e0bfec17 	ldw	r2,-80(fp)
811381cc:	10800044 	addi	r2,r2,1
811381d0:	e0bfec15 	stw	r2,-80(fp)
811381d4:	e0bfec17 	ldw	r2,-80(fp)
811381d8:	10800510 	cmplti	r2,r2,20
811381dc:	103fef1e 	bne	r2,zero,8113819c <__reset+0xfb11819c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
811381e0:	e0bfeb0f 	ldh	r2,-84(fp)
811381e4:	1000a916 	blt	r2,zero,8113848c <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
811381e8:	e0bfed17 	ldw	r2,-76(fp)
811381ec:	1009883a 	mov	r4,r2
811381f0:	e0bfeb0f 	ldh	r2,-84(fp)
811381f4:	100691ba 	slli	r3,r2,6
811381f8:	00a04574 	movhi	r2,33045
811381fc:	109caf04 	addi	r2,r2,29372
81138200:	1885883a 	add	r2,r3,r2
81138204:	100d883a 	mov	r6,r2
81138208:	e17ffe17 	ldw	r5,-8(fp)
8113820c:	1136b180 	call	81136b18 <find_file_in_directory>
81138210:	10007b26 	beq	r2,zero,81138400 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81138214:	e0bfff17 	ldw	r2,-4(fp)
81138218:	10000226 	beq	r2,zero,81138224 <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
8113821c:	00bfffc4 	movi	r2,-1
81138220:	00009b06 	br	81138490 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81138224:	e13feb0f 	ldh	r4,-84(fp)
81138228:	e0ffeb0f 	ldh	r3,-84(fp)
8113822c:	00a04574 	movhi	r2,33045
81138230:	109caf04 	addi	r2,r2,29372
81138234:	180691ba 	slli	r3,r3,6
81138238:	10c5883a 	add	r2,r2,r3
8113823c:	10800584 	addi	r2,r2,22
81138240:	1080000b 	ldhu	r2,0(r2)
81138244:	10ffffcc 	andi	r3,r2,65535
81138248:	00a04574 	movhi	r2,33045
8113824c:	109caf04 	addi	r2,r2,29372
81138250:	200891ba 	slli	r4,r4,6
81138254:	1105883a 	add	r2,r2,r4
81138258:	10800704 	addi	r2,r2,28
8113825c:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81138260:	e0ffeb0f 	ldh	r3,-84(fp)
81138264:	00a04574 	movhi	r2,33045
81138268:	109caf04 	addi	r2,r2,29372
8113826c:	180691ba 	slli	r3,r3,6
81138270:	10c5883a 	add	r2,r2,r3
81138274:	10800804 	addi	r2,r2,32
81138278:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
8113827c:	e0ffeb0f 	ldh	r3,-84(fp)
81138280:	00a04574 	movhi	r2,33045
81138284:	109caf04 	addi	r2,r2,29372
81138288:	180691ba 	slli	r3,r3,6
8113828c:	10c5883a 	add	r2,r2,r3
81138290:	10800904 	addi	r2,r2,36
81138294:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81138298:	e0ffeb0f 	ldh	r3,-84(fp)
8113829c:	00a04574 	movhi	r2,33045
811382a0:	109caf04 	addi	r2,r2,29372
811382a4:	180691ba 	slli	r3,r3,6
811382a8:	10c5883a 	add	r2,r2,r3
811382ac:	10800f04 	addi	r2,r2,60
811382b0:	00c00044 	movi	r3,1
811382b4:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
811382b8:	e0ffeb0f 	ldh	r3,-84(fp)
811382bc:	00a04574 	movhi	r2,33045
811382c0:	109caf04 	addi	r2,r2,29372
811382c4:	180691ba 	slli	r3,r3,6
811382c8:	10c5883a 	add	r2,r2,r3
811382cc:	10800e04 	addi	r2,r2,56
811382d0:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
811382d4:	e03fec15 	stw	zero,-80(fp)
811382d8:	00004506 	br	811383f0 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
811382dc:	e0ffeb0f 	ldh	r3,-84(fp)
811382e0:	e0bfec17 	ldw	r2,-80(fp)
811382e4:	18803f26 	beq	r3,r2,811383e4 <alt_up_sd_card_fopen+0x2c4>
811382e8:	00a04574 	movhi	r2,33045
811382ec:	109caf04 	addi	r2,r2,29372
811382f0:	e0ffec17 	ldw	r3,-80(fp)
811382f4:	180691ba 	slli	r3,r3,6
811382f8:	10c5883a 	add	r2,r2,r3
811382fc:	10800f04 	addi	r2,r2,60
81138300:	10800017 	ldw	r2,0(r2)
81138304:	10800058 	cmpnei	r2,r2,1
81138308:	1000361e 	bne	r2,zero,811383e4 <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8113830c:	e0ffeb0f 	ldh	r3,-84(fp)
81138310:	00a04574 	movhi	r2,33045
81138314:	109caf04 	addi	r2,r2,29372
81138318:	180691ba 	slli	r3,r3,6
8113831c:	10c5883a 	add	r2,r2,r3
81138320:	10800a04 	addi	r2,r2,40
81138324:	10c00017 	ldw	r3,0(r2)
81138328:	00a04574 	movhi	r2,33045
8113832c:	109caf04 	addi	r2,r2,29372
81138330:	e13fec17 	ldw	r4,-80(fp)
81138334:	200891ba 	slli	r4,r4,6
81138338:	1105883a 	add	r2,r2,r4
8113833c:	10800a04 	addi	r2,r2,40
81138340:	10800017 	ldw	r2,0(r2)
81138344:	1880271e 	bne	r3,r2,811383e4 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81138348:	e0ffeb0f 	ldh	r3,-84(fp)
8113834c:	00a04574 	movhi	r2,33045
81138350:	109caf04 	addi	r2,r2,29372
81138354:	180691ba 	slli	r3,r3,6
81138358:	10c5883a 	add	r2,r2,r3
8113835c:	10800b04 	addi	r2,r2,44
81138360:	10c00017 	ldw	r3,0(r2)
81138364:	00a04574 	movhi	r2,33045
81138368:	109caf04 	addi	r2,r2,29372
8113836c:	e13fec17 	ldw	r4,-80(fp)
81138370:	200891ba 	slli	r4,r4,6
81138374:	1105883a 	add	r2,r2,r4
81138378:	10800b04 	addi	r2,r2,44
8113837c:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81138380:	1880181e 	bne	r3,r2,811383e4 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81138384:	e0ffeb0f 	ldh	r3,-84(fp)
81138388:	00a04574 	movhi	r2,33045
8113838c:	109caf04 	addi	r2,r2,29372
81138390:	180691ba 	slli	r3,r3,6
81138394:	10c5883a 	add	r2,r2,r3
81138398:	10800c04 	addi	r2,r2,48
8113839c:	1100000b 	ldhu	r4,0(r2)
811383a0:	00a04574 	movhi	r2,33045
811383a4:	109caf04 	addi	r2,r2,29372
811383a8:	e0ffec17 	ldw	r3,-80(fp)
811383ac:	180691ba 	slli	r3,r3,6
811383b0:	10c5883a 	add	r2,r2,r3
811383b4:	10800c04 	addi	r2,r2,48
811383b8:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
811383bc:	20ffffcc 	andi	r3,r4,65535
811383c0:	18e0001c 	xori	r3,r3,32768
811383c4:	18e00004 	addi	r3,r3,-32768
811383c8:	10bfffcc 	andi	r2,r2,65535
811383cc:	10a0001c 	xori	r2,r2,32768
811383d0:	10a00004 	addi	r2,r2,-32768
811383d4:	1880031e 	bne	r3,r2,811383e4 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
811383d8:	00bfff84 	movi	r2,-2
811383dc:	e0bfeb0d 	sth	r2,-84(fp)
								break;
811383e0:	00002a06 	br	8113848c <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
811383e4:	e0bfec17 	ldw	r2,-80(fp)
811383e8:	10800044 	addi	r2,r2,1
811383ec:	e0bfec15 	stw	r2,-80(fp)
811383f0:	e0bfec17 	ldw	r2,-80(fp)
811383f4:	10800510 	cmplti	r2,r2,20
811383f8:	103fb81e 	bne	r2,zero,811382dc <__reset+0xfb1182dc>
811383fc:	00002306 	br	8113848c <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81138400:	e0bfff17 	ldw	r2,-4(fp)
81138404:	10001f26 	beq	r2,zero,81138484 <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81138408:	e0bfeb0f 	ldh	r2,-84(fp)
8113840c:	100691ba 	slli	r3,r2,6
81138410:	00a04574 	movhi	r2,33045
81138414:	109caf04 	addi	r2,r2,29372
81138418:	1885883a 	add	r2,r3,r2
8113841c:	e0ffee04 	addi	r3,fp,-72
81138420:	180d883a 	mov	r6,r3
81138424:	100b883a 	mov	r5,r2
81138428:	e13ffe17 	ldw	r4,-8(fp)
8113842c:	11376640 	call	81137664 <create_file>
81138430:	10001126 	beq	r2,zero,81138478 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81138434:	e0ffeb0f 	ldh	r3,-84(fp)
81138438:	00a04574 	movhi	r2,33045
8113843c:	109caf04 	addi	r2,r2,29372
81138440:	180691ba 	slli	r3,r3,6
81138444:	10c5883a 	add	r2,r2,r3
81138448:	10800f04 	addi	r2,r2,60
8113844c:	00c00044 	movi	r3,1
81138450:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81138454:	e0ffeb0f 	ldh	r3,-84(fp)
81138458:	00a04574 	movhi	r2,33045
8113845c:	109caf04 	addi	r2,r2,29372
81138460:	180691ba 	slli	r3,r3,6
81138464:	10c5883a 	add	r2,r2,r3
81138468:	10800e04 	addi	r2,r2,56
8113846c:	00c00044 	movi	r3,1
81138470:	10c00015 	stw	r3,0(r2)
81138474:	00000506 	br	8113848c <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81138478:	00bfffc4 	movi	r2,-1
8113847c:	e0bfeb0d 	sth	r2,-84(fp)
81138480:	00000206 	br	8113848c <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81138484:	00bfffc4 	movi	r2,-1
81138488:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
8113848c:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81138490:	e037883a 	mov	sp,fp
81138494:	dfc00117 	ldw	ra,4(sp)
81138498:	df000017 	ldw	fp,0(sp)
8113849c:	dec00204 	addi	sp,sp,8
811384a0:	f800283a 	ret

811384a4 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
811384a4:	defffd04 	addi	sp,sp,-12
811384a8:	de00012e 	bgeu	sp,et,811384b0 <alt_up_sd_card_set_attributes+0xc>
811384ac:	003b68fa 	trap	3
811384b0:	df000215 	stw	fp,8(sp)
811384b4:	df000204 	addi	fp,sp,8
811384b8:	2007883a 	mov	r3,r4
811384bc:	2805883a 	mov	r2,r5
811384c0:	e0fffe0d 	sth	r3,-8(fp)
811384c4:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811384c8:	e0bffe0f 	ldh	r2,-8(fp)
811384cc:	10001416 	blt	r2,zero,81138520 <alt_up_sd_card_set_attributes+0x7c>
811384d0:	e0bffe0f 	ldh	r2,-8(fp)
811384d4:	10800508 	cmpgei	r2,r2,20
811384d8:	1000111e 	bne	r2,zero,81138520 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
811384dc:	e0fffe0f 	ldh	r3,-8(fp)
811384e0:	00a04574 	movhi	r2,33045
811384e4:	109caf04 	addi	r2,r2,29372
811384e8:	180691ba 	slli	r3,r3,6
811384ec:	10c5883a 	add	r2,r2,r3
811384f0:	10800f04 	addi	r2,r2,60
811384f4:	10800017 	ldw	r2,0(r2)
811384f8:	10000926 	beq	r2,zero,81138520 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
811384fc:	e0fffe0f 	ldh	r3,-8(fp)
81138500:	e0bfff0b 	ldhu	r2,-4(fp)
81138504:	1009883a 	mov	r4,r2
81138508:	00a04574 	movhi	r2,33045
8113850c:	109caf04 	addi	r2,r2,29372
81138510:	180691ba 	slli	r3,r3,6
81138514:	10c5883a 	add	r2,r2,r3
81138518:	108002c4 	addi	r2,r2,11
8113851c:	11000005 	stb	r4,0(r2)
        }
    }
}
81138520:	0001883a 	nop
81138524:	e037883a 	mov	sp,fp
81138528:	df000017 	ldw	fp,0(sp)
8113852c:	dec00104 	addi	sp,sp,4
81138530:	f800283a 	ret

81138534 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81138534:	defffd04 	addi	sp,sp,-12
81138538:	de00012e 	bgeu	sp,et,81138540 <alt_up_sd_card_get_attributes+0xc>
8113853c:	003b68fa 	trap	3
81138540:	df000215 	stw	fp,8(sp)
81138544:	df000204 	addi	fp,sp,8
81138548:	2005883a 	mov	r2,r4
8113854c:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81138550:	00bfffc4 	movi	r2,-1
81138554:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81138558:	e0bfff0f 	ldh	r2,-4(fp)
8113855c:	10001416 	blt	r2,zero,811385b0 <alt_up_sd_card_get_attributes+0x7c>
81138560:	e0bfff0f 	ldh	r2,-4(fp)
81138564:	10800508 	cmpgei	r2,r2,20
81138568:	1000111e 	bne	r2,zero,811385b0 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
8113856c:	e0ffff0f 	ldh	r3,-4(fp)
81138570:	00a04574 	movhi	r2,33045
81138574:	109caf04 	addi	r2,r2,29372
81138578:	180691ba 	slli	r3,r3,6
8113857c:	10c5883a 	add	r2,r2,r3
81138580:	10800f04 	addi	r2,r2,60
81138584:	10800017 	ldw	r2,0(r2)
81138588:	10000926 	beq	r2,zero,811385b0 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
8113858c:	e0ffff0f 	ldh	r3,-4(fp)
81138590:	00a04574 	movhi	r2,33045
81138594:	109caf04 	addi	r2,r2,29372
81138598:	180691ba 	slli	r3,r3,6
8113859c:	10c5883a 	add	r2,r2,r3
811385a0:	108002c4 	addi	r2,r2,11
811385a4:	10800003 	ldbu	r2,0(r2)
811385a8:	10803fcc 	andi	r2,r2,255
811385ac:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
811385b0:	e0bffe0b 	ldhu	r2,-8(fp)
}
811385b4:	e037883a 	mov	sp,fp
811385b8:	df000017 	ldw	fp,0(sp)
811385bc:	dec00104 	addi	sp,sp,4
811385c0:	f800283a 	ret

811385c4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
811385c4:	defffa04 	addi	sp,sp,-24
811385c8:	de00012e 	bgeu	sp,et,811385d0 <alt_up_sd_card_read+0xc>
811385cc:	003b68fa 	trap	3
811385d0:	dfc00515 	stw	ra,20(sp)
811385d4:	df000415 	stw	fp,16(sp)
811385d8:	df000404 	addi	fp,sp,16
811385dc:	2005883a 	mov	r2,r4
811385e0:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
811385e4:	00bfffc4 	movi	r2,-1
811385e8:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811385ec:	e0bfff0f 	ldh	r2,-4(fp)
811385f0:	1000ce16 	blt	r2,zero,8113892c <alt_up_sd_card_read+0x368>
811385f4:	e0bfff0f 	ldh	r2,-4(fp)
811385f8:	10800508 	cmpgei	r2,r2,20
811385fc:	1000cb1e 	bne	r2,zero,8113892c <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81138600:	e0ffff0f 	ldh	r3,-4(fp)
81138604:	00a04574 	movhi	r2,33045
81138608:	109caf04 	addi	r2,r2,29372
8113860c:	180691ba 	slli	r3,r3,6
81138610:	10c5883a 	add	r2,r2,r3
81138614:	10800f04 	addi	r2,r2,60
81138618:	10800017 	ldw	r2,0(r2)
8113861c:	1000c326 	beq	r2,zero,8113892c <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81138620:	e0ffff0f 	ldh	r3,-4(fp)
81138624:	00a04574 	movhi	r2,33045
81138628:	109caf04 	addi	r2,r2,29372
8113862c:	180691ba 	slli	r3,r3,6
81138630:	10c5883a 	add	r2,r2,r3
81138634:	10800904 	addi	r2,r2,36
81138638:	10c00017 	ldw	r3,0(r2)
8113863c:	e13fff0f 	ldh	r4,-4(fp)
81138640:	00a04574 	movhi	r2,33045
81138644:	109caf04 	addi	r2,r2,29372
81138648:	200891ba 	slli	r4,r4,6
8113864c:	1105883a 	add	r2,r2,r4
81138650:	10800604 	addi	r2,r2,24
81138654:	10800017 	ldw	r2,0(r2)
81138658:	1880b42e 	bgeu	r3,r2,8113892c <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113865c:	00a04574 	movhi	r2,33045
81138660:	109c9a04 	addi	r2,r2,29288
81138664:	10c01417 	ldw	r3,80(r2)
81138668:	e13fff0f 	ldh	r4,-4(fp)
8113866c:	00a04574 	movhi	r2,33045
81138670:	109caf04 	addi	r2,r2,29372
81138674:	200891ba 	slli	r4,r4,6
81138678:	1105883a 	add	r2,r2,r4
8113867c:	10800704 	addi	r2,r2,28
81138680:	10800017 	ldw	r2,0(r2)
81138684:	113fff84 	addi	r4,r2,-2
81138688:	00a04574 	movhi	r2,33045
8113868c:	109c9a04 	addi	r2,r2,29288
81138690:	10800383 	ldbu	r2,14(r2)
81138694:	10803fcc 	andi	r2,r2,255
81138698:	2085383a 	mul	r2,r4,r2
8113869c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
811386a0:	e13fff0f 	ldh	r4,-4(fp)
811386a4:	00a04574 	movhi	r2,33045
811386a8:	109caf04 	addi	r2,r2,29372
811386ac:	200891ba 	slli	r4,r4,6
811386b0:	1105883a 	add	r2,r2,r4
811386b4:	10800804 	addi	r2,r2,32
811386b8:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811386bc:	1885883a 	add	r2,r3,r2
811386c0:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
811386c4:	e0ffff0f 	ldh	r3,-4(fp)
811386c8:	00a04574 	movhi	r2,33045
811386cc:	109caf04 	addi	r2,r2,29372
811386d0:	180691ba 	slli	r3,r3,6
811386d4:	10c5883a 	add	r2,r2,r3
811386d8:	10800904 	addi	r2,r2,36
811386dc:	10800017 	ldw	r2,0(r2)
811386e0:	10006826 	beq	r2,zero,81138884 <alt_up_sd_card_read+0x2c0>
811386e4:	e0ffff0f 	ldh	r3,-4(fp)
811386e8:	00a04574 	movhi	r2,33045
811386ec:	109caf04 	addi	r2,r2,29372
811386f0:	180691ba 	slli	r3,r3,6
811386f4:	10c5883a 	add	r2,r2,r3
811386f8:	10800904 	addi	r2,r2,36
811386fc:	10800017 	ldw	r2,0(r2)
81138700:	10807fcc 	andi	r2,r2,511
81138704:	10005f1e 	bne	r2,zero,81138884 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81138708:	e0ffff0f 	ldh	r3,-4(fp)
8113870c:	00a04574 	movhi	r2,33045
81138710:	109caf04 	addi	r2,r2,29372
81138714:	180691ba 	slli	r3,r3,6
81138718:	10c5883a 	add	r2,r2,r3
8113871c:	10800804 	addi	r2,r2,32
81138720:	10c00017 	ldw	r3,0(r2)
81138724:	00a04574 	movhi	r2,33045
81138728:	109c9a04 	addi	r2,r2,29288
8113872c:	10800383 	ldbu	r2,14(r2)
81138730:	10803fcc 	andi	r2,r2,255
81138734:	10bfffc4 	addi	r2,r2,-1
81138738:	1880401e 	bne	r3,r2,8113883c <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8113873c:	e0ffff0f 	ldh	r3,-4(fp)
81138740:	00a04574 	movhi	r2,33045
81138744:	109caf04 	addi	r2,r2,29372
81138748:	180691ba 	slli	r3,r3,6
8113874c:	10c5883a 	add	r2,r2,r3
81138750:	10800704 	addi	r2,r2,28
81138754:	10800017 	ldw	r2,0(r2)
81138758:	e0fffe04 	addi	r3,fp,-8
8113875c:	180b883a 	mov	r5,r3
81138760:	1009883a 	mov	r4,r2
81138764:	1134f500 	call	81134f50 <get_cluster_flag>
81138768:	10003226 	beq	r2,zero,81138834 <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
8113876c:	e0bffe0b 	ldhu	r2,-8(fp)
81138770:	10bfffcc 	andi	r2,r2,65535
81138774:	10fffe0c 	andi	r3,r2,65528
81138778:	00bffe14 	movui	r2,65528
8113877c:	1880021e 	bne	r3,r2,81138788 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81138780:	00bfffc4 	movi	r2,-1
81138784:	00006a06 	br	81138930 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81138788:	e13fff0f 	ldh	r4,-4(fp)
8113878c:	e0bffe0b 	ldhu	r2,-8(fp)
81138790:	10ffffcc 	andi	r3,r2,65535
81138794:	00a04574 	movhi	r2,33045
81138798:	109caf04 	addi	r2,r2,29372
8113879c:	200891ba 	slli	r4,r4,6
811387a0:	1105883a 	add	r2,r2,r4
811387a4:	10800704 	addi	r2,r2,28
811387a8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811387ac:	e0ffff0f 	ldh	r3,-4(fp)
811387b0:	00a04574 	movhi	r2,33045
811387b4:	109caf04 	addi	r2,r2,29372
811387b8:	180691ba 	slli	r3,r3,6
811387bc:	10c5883a 	add	r2,r2,r3
811387c0:	10800804 	addi	r2,r2,32
811387c4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811387c8:	00a04574 	movhi	r2,33045
811387cc:	109c9a04 	addi	r2,r2,29288
811387d0:	10c01417 	ldw	r3,80(r2)
811387d4:	e13fff0f 	ldh	r4,-4(fp)
811387d8:	00a04574 	movhi	r2,33045
811387dc:	109caf04 	addi	r2,r2,29372
811387e0:	200891ba 	slli	r4,r4,6
811387e4:	1105883a 	add	r2,r2,r4
811387e8:	10800704 	addi	r2,r2,28
811387ec:	10800017 	ldw	r2,0(r2)
811387f0:	113fff84 	addi	r4,r2,-2
811387f4:	00a04574 	movhi	r2,33045
811387f8:	109c9a04 	addi	r2,r2,29288
811387fc:	10800383 	ldbu	r2,14(r2)
81138800:	10803fcc 	andi	r2,r2,255
81138804:	2085383a 	mul	r2,r4,r2
81138808:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8113880c:	e13fff0f 	ldh	r4,-4(fp)
81138810:	00a04574 	movhi	r2,33045
81138814:	109caf04 	addi	r2,r2,29372
81138818:	200891ba 	slli	r4,r4,6
8113881c:	1105883a 	add	r2,r2,r4
81138820:	10800804 	addi	r2,r2,32
81138824:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138828:	1885883a 	add	r2,r3,r2
8113882c:	e0bffd15 	stw	r2,-12(fp)
81138830:	00001406 	br	81138884 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
81138834:	00bfff84 	movi	r2,-2
81138838:	00003d06 	br	81138930 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8113883c:	e13fff0f 	ldh	r4,-4(fp)
81138840:	e0ffff0f 	ldh	r3,-4(fp)
81138844:	00a04574 	movhi	r2,33045
81138848:	109caf04 	addi	r2,r2,29372
8113884c:	180691ba 	slli	r3,r3,6
81138850:	10c5883a 	add	r2,r2,r3
81138854:	10800804 	addi	r2,r2,32
81138858:	10800017 	ldw	r2,0(r2)
8113885c:	10c00044 	addi	r3,r2,1
81138860:	00a04574 	movhi	r2,33045
81138864:	109caf04 	addi	r2,r2,29372
81138868:	200891ba 	slli	r4,r4,6
8113886c:	1105883a 	add	r2,r2,r4
81138870:	10800804 	addi	r2,r2,32
81138874:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81138878:	e0bffd17 	ldw	r2,-12(fp)
8113887c:	10800044 	addi	r2,r2,1
81138880:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81138884:	d0e09b17 	ldw	r3,-32148(gp)
81138888:	e0bffd17 	ldw	r2,-12(fp)
8113888c:	1885883a 	add	r2,r3,r2
81138890:	1007883a 	mov	r3,r2
81138894:	d0a09f17 	ldw	r2,-32132(gp)
81138898:	18800726 	beq	r3,r2,811388b8 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8113889c:	d0a09b17 	ldw	r2,-32148(gp)
811388a0:	100b883a 	mov	r5,r2
811388a4:	e13ffd17 	ldw	r4,-12(fp)
811388a8:	1134e700 	call	81134e70 <Read_Sector_Data>
811388ac:	1000021e 	bne	r2,zero,811388b8 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
811388b0:	00bfff84 	movi	r2,-2
811388b4:	00001e06 	br	81138930 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
811388b8:	d0e09a17 	ldw	r3,-32152(gp)
811388bc:	e13fff0f 	ldh	r4,-4(fp)
811388c0:	00a04574 	movhi	r2,33045
811388c4:	109caf04 	addi	r2,r2,29372
811388c8:	200891ba 	slli	r4,r4,6
811388cc:	1105883a 	add	r2,r2,r4
811388d0:	10800904 	addi	r2,r2,36
811388d4:	10800017 	ldw	r2,0(r2)
811388d8:	10807fcc 	andi	r2,r2,511
811388dc:	1885883a 	add	r2,r3,r2
811388e0:	10800023 	ldbuio	r2,0(r2)
811388e4:	10803fcc 	andi	r2,r2,255
811388e8:	10803fcc 	andi	r2,r2,255
811388ec:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
811388f0:	e13fff0f 	ldh	r4,-4(fp)
811388f4:	e0ffff0f 	ldh	r3,-4(fp)
811388f8:	00a04574 	movhi	r2,33045
811388fc:	109caf04 	addi	r2,r2,29372
81138900:	180691ba 	slli	r3,r3,6
81138904:	10c5883a 	add	r2,r2,r3
81138908:	10800904 	addi	r2,r2,36
8113890c:	10800017 	ldw	r2,0(r2)
81138910:	10c00044 	addi	r3,r2,1
81138914:	00a04574 	movhi	r2,33045
81138918:	109caf04 	addi	r2,r2,29372
8113891c:	200891ba 	slli	r4,r4,6
81138920:	1105883a 	add	r2,r2,r4
81138924:	10800904 	addi	r2,r2,36
81138928:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
8113892c:	e0bffc0b 	ldhu	r2,-16(fp)
}
81138930:	e037883a 	mov	sp,fp
81138934:	dfc00117 	ldw	ra,4(sp)
81138938:	df000017 	ldw	fp,0(sp)
8113893c:	dec00204 	addi	sp,sp,8
81138940:	f800283a 	ret

81138944 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
81138944:	defff804 	addi	sp,sp,-32
81138948:	de00012e 	bgeu	sp,et,81138950 <alt_up_sd_card_write+0xc>
8113894c:	003b68fa 	trap	3
81138950:	dfc00715 	stw	ra,28(sp)
81138954:	df000615 	stw	fp,24(sp)
81138958:	df000604 	addi	fp,sp,24
8113895c:	2007883a 	mov	r3,r4
81138960:	2805883a 	mov	r2,r5
81138964:	e0fffe0d 	sth	r3,-8(fp)
81138968:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
8113896c:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81138970:	e0bffe0f 	ldh	r2,-8(fp)
81138974:	10017716 	blt	r2,zero,81138f54 <alt_up_sd_card_write+0x610>
81138978:	e0bffe0f 	ldh	r2,-8(fp)
8113897c:	10800508 	cmpgei	r2,r2,20
81138980:	1001741e 	bne	r2,zero,81138f54 <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81138984:	e0fffe0f 	ldh	r3,-8(fp)
81138988:	00a04574 	movhi	r2,33045
8113898c:	109caf04 	addi	r2,r2,29372
81138990:	180691ba 	slli	r3,r3,6
81138994:	10c5883a 	add	r2,r2,r3
81138998:	10800f04 	addi	r2,r2,60
8113899c:	10800017 	ldw	r2,0(r2)
811389a0:	10016c26 	beq	r2,zero,81138f54 <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811389a4:	00a04574 	movhi	r2,33045
811389a8:	109c9a04 	addi	r2,r2,29288
811389ac:	10c01417 	ldw	r3,80(r2)
811389b0:	e13ffe0f 	ldh	r4,-8(fp)
811389b4:	00a04574 	movhi	r2,33045
811389b8:	109caf04 	addi	r2,r2,29372
811389bc:	200891ba 	slli	r4,r4,6
811389c0:	1105883a 	add	r2,r2,r4
811389c4:	10800704 	addi	r2,r2,28
811389c8:	10800017 	ldw	r2,0(r2)
811389cc:	113fff84 	addi	r4,r2,-2
811389d0:	00a04574 	movhi	r2,33045
811389d4:	109c9a04 	addi	r2,r2,29288
811389d8:	10800383 	ldbu	r2,14(r2)
811389dc:	10803fcc 	andi	r2,r2,255
811389e0:	2085383a 	mul	r2,r4,r2
811389e4:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
811389e8:	e13ffe0f 	ldh	r4,-8(fp)
811389ec:	00a04574 	movhi	r2,33045
811389f0:	109caf04 	addi	r2,r2,29372
811389f4:	200891ba 	slli	r4,r4,6
811389f8:	1105883a 	add	r2,r2,r4
811389fc:	10800804 	addi	r2,r2,32
81138a00:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138a04:	1885883a 	add	r2,r3,r2
81138a08:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81138a0c:	e0fffe0f 	ldh	r3,-8(fp)
81138a10:	00a04574 	movhi	r2,33045
81138a14:	109caf04 	addi	r2,r2,29372
81138a18:	180691ba 	slli	r3,r3,6
81138a1c:	10c5883a 	add	r2,r2,r3
81138a20:	10800904 	addi	r2,r2,36
81138a24:	10c00017 	ldw	r3,0(r2)
81138a28:	00a04574 	movhi	r2,33045
81138a2c:	109c9a04 	addi	r2,r2,29288
81138a30:	1080030b 	ldhu	r2,12(r2)
81138a34:	10bfffcc 	andi	r2,r2,65535
81138a38:	1889203a 	divu	r4,r3,r2
81138a3c:	2085383a 	mul	r2,r4,r2
81138a40:	1885c83a 	sub	r2,r3,r2
81138a44:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81138a48:	e0fffe0f 	ldh	r3,-8(fp)
81138a4c:	00a04574 	movhi	r2,33045
81138a50:	109caf04 	addi	r2,r2,29372
81138a54:	180691ba 	slli	r3,r3,6
81138a58:	10c5883a 	add	r2,r2,r3
81138a5c:	10800904 	addi	r2,r2,36
81138a60:	10c00017 	ldw	r3,0(r2)
81138a64:	e13ffe0f 	ldh	r4,-8(fp)
81138a68:	00a04574 	movhi	r2,33045
81138a6c:	109caf04 	addi	r2,r2,29372
81138a70:	200891ba 	slli	r4,r4,6
81138a74:	1105883a 	add	r2,r2,r4
81138a78:	10800604 	addi	r2,r2,24
81138a7c:	10800017 	ldw	r2,0(r2)
81138a80:	1880672e 	bgeu	r3,r2,81138c20 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81138a84:	e0fffe0f 	ldh	r3,-8(fp)
81138a88:	00a04574 	movhi	r2,33045
81138a8c:	109caf04 	addi	r2,r2,29372
81138a90:	180691ba 	slli	r3,r3,6
81138a94:	10c5883a 	add	r2,r2,r3
81138a98:	10800904 	addi	r2,r2,36
81138a9c:	10800017 	ldw	r2,0(r2)
81138aa0:	1000e126 	beq	r2,zero,81138e28 <alt_up_sd_card_write+0x4e4>
81138aa4:	e0bffc0f 	ldh	r2,-16(fp)
81138aa8:	1000df1e 	bne	r2,zero,81138e28 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81138aac:	e0fffe0f 	ldh	r3,-8(fp)
81138ab0:	00a04574 	movhi	r2,33045
81138ab4:	109caf04 	addi	r2,r2,29372
81138ab8:	180691ba 	slli	r3,r3,6
81138abc:	10c5883a 	add	r2,r2,r3
81138ac0:	10800804 	addi	r2,r2,32
81138ac4:	10c00017 	ldw	r3,0(r2)
81138ac8:	00a04574 	movhi	r2,33045
81138acc:	109c9a04 	addi	r2,r2,29288
81138ad0:	10800383 	ldbu	r2,14(r2)
81138ad4:	10803fcc 	andi	r2,r2,255
81138ad8:	10bfffc4 	addi	r2,r2,-1
81138adc:	18803d1e 	bne	r3,r2,81138bd4 <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81138ae0:	e0fffe0f 	ldh	r3,-8(fp)
81138ae4:	00a04574 	movhi	r2,33045
81138ae8:	109caf04 	addi	r2,r2,29372
81138aec:	180691ba 	slli	r3,r3,6
81138af0:	10c5883a 	add	r2,r2,r3
81138af4:	10800704 	addi	r2,r2,28
81138af8:	10800017 	ldw	r2,0(r2)
81138afc:	e0fffc84 	addi	r3,fp,-14
81138b00:	180b883a 	mov	r5,r3
81138b04:	1009883a 	mov	r4,r2
81138b08:	1134f500 	call	81134f50 <get_cluster_flag>
81138b0c:	10002f26 	beq	r2,zero,81138bcc <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81138b10:	e0bffc8b 	ldhu	r2,-14(fp)
81138b14:	10bfffcc 	andi	r2,r2,65535
81138b18:	10bffe28 	cmpgeui	r2,r2,65528
81138b1c:	1000c21e 	bne	r2,zero,81138e28 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81138b20:	e13ffe0f 	ldh	r4,-8(fp)
81138b24:	e0bffc8b 	ldhu	r2,-14(fp)
81138b28:	10ffffcc 	andi	r3,r2,65535
81138b2c:	00a04574 	movhi	r2,33045
81138b30:	109caf04 	addi	r2,r2,29372
81138b34:	200891ba 	slli	r4,r4,6
81138b38:	1105883a 	add	r2,r2,r4
81138b3c:	10800704 	addi	r2,r2,28
81138b40:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81138b44:	e0fffe0f 	ldh	r3,-8(fp)
81138b48:	00a04574 	movhi	r2,33045
81138b4c:	109caf04 	addi	r2,r2,29372
81138b50:	180691ba 	slli	r3,r3,6
81138b54:	10c5883a 	add	r2,r2,r3
81138b58:	10800804 	addi	r2,r2,32
81138b5c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138b60:	00a04574 	movhi	r2,33045
81138b64:	109c9a04 	addi	r2,r2,29288
81138b68:	10c01417 	ldw	r3,80(r2)
81138b6c:	e13ffe0f 	ldh	r4,-8(fp)
81138b70:	00a04574 	movhi	r2,33045
81138b74:	109caf04 	addi	r2,r2,29372
81138b78:	200891ba 	slli	r4,r4,6
81138b7c:	1105883a 	add	r2,r2,r4
81138b80:	10800704 	addi	r2,r2,28
81138b84:	10800017 	ldw	r2,0(r2)
81138b88:	113fff84 	addi	r4,r2,-2
81138b8c:	00a04574 	movhi	r2,33045
81138b90:	109c9a04 	addi	r2,r2,29288
81138b94:	10800383 	ldbu	r2,14(r2)
81138b98:	10803fcc 	andi	r2,r2,255
81138b9c:	2085383a 	mul	r2,r4,r2
81138ba0:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81138ba4:	e13ffe0f 	ldh	r4,-8(fp)
81138ba8:	00a04574 	movhi	r2,33045
81138bac:	109caf04 	addi	r2,r2,29372
81138bb0:	200891ba 	slli	r4,r4,6
81138bb4:	1105883a 	add	r2,r2,r4
81138bb8:	10800804 	addi	r2,r2,32
81138bbc:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138bc0:	1885883a 	add	r2,r3,r2
81138bc4:	e0bffb15 	stw	r2,-20(fp)
81138bc8:	00009706 	br	81138e28 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81138bcc:	0005883a 	mov	r2,zero
81138bd0:	0000e106 	br	81138f58 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81138bd4:	e13ffe0f 	ldh	r4,-8(fp)
81138bd8:	e0fffe0f 	ldh	r3,-8(fp)
81138bdc:	00a04574 	movhi	r2,33045
81138be0:	109caf04 	addi	r2,r2,29372
81138be4:	180691ba 	slli	r3,r3,6
81138be8:	10c5883a 	add	r2,r2,r3
81138bec:	10800804 	addi	r2,r2,32
81138bf0:	10800017 	ldw	r2,0(r2)
81138bf4:	10c00044 	addi	r3,r2,1
81138bf8:	00a04574 	movhi	r2,33045
81138bfc:	109caf04 	addi	r2,r2,29372
81138c00:	200891ba 	slli	r4,r4,6
81138c04:	1105883a 	add	r2,r2,r4
81138c08:	10800804 	addi	r2,r2,32
81138c0c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81138c10:	e0bffb17 	ldw	r2,-20(fp)
81138c14:	10800044 	addi	r2,r2,1
81138c18:	e0bffb15 	stw	r2,-20(fp)
81138c1c:	00008206 	br	81138e28 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81138c20:	e0fffe0f 	ldh	r3,-8(fp)
81138c24:	00a04574 	movhi	r2,33045
81138c28:	109caf04 	addi	r2,r2,29372
81138c2c:	180691ba 	slli	r3,r3,6
81138c30:	10c5883a 	add	r2,r2,r3
81138c34:	10800904 	addi	r2,r2,36
81138c38:	10800017 	ldw	r2,0(r2)
81138c3c:	10007a26 	beq	r2,zero,81138e28 <alt_up_sd_card_write+0x4e4>
81138c40:	e0bffc0f 	ldh	r2,-16(fp)
81138c44:	1000781e 	bne	r2,zero,81138e28 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81138c48:	e0fffe0f 	ldh	r3,-8(fp)
81138c4c:	00a04574 	movhi	r2,33045
81138c50:	109caf04 	addi	r2,r2,29372
81138c54:	180691ba 	slli	r3,r3,6
81138c58:	10c5883a 	add	r2,r2,r3
81138c5c:	10800804 	addi	r2,r2,32
81138c60:	10c00017 	ldw	r3,0(r2)
81138c64:	00a04574 	movhi	r2,33045
81138c68:	109c9a04 	addi	r2,r2,29288
81138c6c:	10800383 	ldbu	r2,14(r2)
81138c70:	10803fcc 	andi	r2,r2,255
81138c74:	10bfffc4 	addi	r2,r2,-1
81138c78:	18803e1e 	bne	r3,r2,81138d74 <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81138c7c:	e0bffd04 	addi	r2,fp,-12
81138c80:	1009883a 	mov	r4,r2
81138c84:	1136f940 	call	81136f94 <find_first_empty_cluster>
81138c88:	10003826 	beq	r2,zero,81138d6c <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81138c8c:	e0fffe0f 	ldh	r3,-8(fp)
81138c90:	00a04574 	movhi	r2,33045
81138c94:	109caf04 	addi	r2,r2,29372
81138c98:	180691ba 	slli	r3,r3,6
81138c9c:	10c5883a 	add	r2,r2,r3
81138ca0:	10800704 	addi	r2,r2,28
81138ca4:	10800017 	ldw	r2,0(r2)
81138ca8:	e0fffd17 	ldw	r3,-12(fp)
81138cac:	18ffffcc 	andi	r3,r3,65535
81138cb0:	18e0001c 	xori	r3,r3,32768
81138cb4:	18e00004 	addi	r3,r3,-32768
81138cb8:	01800044 	movi	r6,1
81138cbc:	180b883a 	mov	r5,r3
81138cc0:	1009883a 	mov	r4,r2
81138cc4:	113500c0 	call	8113500c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81138cc8:	e0bffd17 	ldw	r2,-12(fp)
81138ccc:	01800044 	movi	r6,1
81138cd0:	017fffc4 	movi	r5,-1
81138cd4:	1009883a 	mov	r4,r2
81138cd8:	113500c0 	call	8113500c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81138cdc:	e0fffe0f 	ldh	r3,-8(fp)
81138ce0:	00a04574 	movhi	r2,33045
81138ce4:	109caf04 	addi	r2,r2,29372
81138ce8:	180691ba 	slli	r3,r3,6
81138cec:	10c5883a 	add	r2,r2,r3
81138cf0:	10800704 	addi	r2,r2,28
81138cf4:	10800017 	ldw	r2,0(r2)
81138cf8:	e0fffd17 	ldw	r3,-12(fp)
81138cfc:	18ffffcc 	andi	r3,r3,65535
81138d00:	18e0001c 	xori	r3,r3,32768
81138d04:	18e00004 	addi	r3,r3,-32768
81138d08:	000d883a 	mov	r6,zero
81138d0c:	180b883a 	mov	r5,r3
81138d10:	1009883a 	mov	r4,r2
81138d14:	113500c0 	call	8113500c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81138d18:	e0bffd17 	ldw	r2,-12(fp)
81138d1c:	000d883a 	mov	r6,zero
81138d20:	017fffc4 	movi	r5,-1
81138d24:	1009883a 	mov	r4,r2
81138d28:	113500c0 	call	8113500c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
81138d2c:	e13ffe0f 	ldh	r4,-8(fp)
81138d30:	e0fffd17 	ldw	r3,-12(fp)
81138d34:	00a04574 	movhi	r2,33045
81138d38:	109caf04 	addi	r2,r2,29372
81138d3c:	200891ba 	slli	r4,r4,6
81138d40:	1105883a 	add	r2,r2,r4
81138d44:	10800704 	addi	r2,r2,28
81138d48:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
81138d4c:	e0fffe0f 	ldh	r3,-8(fp)
81138d50:	00a04574 	movhi	r2,33045
81138d54:	109caf04 	addi	r2,r2,29372
81138d58:	180691ba 	slli	r3,r3,6
81138d5c:	10c5883a 	add	r2,r2,r3
81138d60:	10800804 	addi	r2,r2,32
81138d64:	10000015 	stw	zero,0(r2)
81138d68:	00001506 	br	81138dc0 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
81138d6c:	0005883a 	mov	r2,zero
81138d70:	00007906 	br	81138f58 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
81138d74:	e13ffe0f 	ldh	r4,-8(fp)
81138d78:	e0fffe0f 	ldh	r3,-8(fp)
81138d7c:	00a04574 	movhi	r2,33045
81138d80:	109caf04 	addi	r2,r2,29372
81138d84:	180691ba 	slli	r3,r3,6
81138d88:	10c5883a 	add	r2,r2,r3
81138d8c:	10800904 	addi	r2,r2,36
81138d90:	10c00017 	ldw	r3,0(r2)
81138d94:	00a04574 	movhi	r2,33045
81138d98:	109c9a04 	addi	r2,r2,29288
81138d9c:	1080030b 	ldhu	r2,12(r2)
81138da0:	10bfffcc 	andi	r2,r2,65535
81138da4:	1887203a 	divu	r3,r3,r2
81138da8:	00a04574 	movhi	r2,33045
81138dac:	109caf04 	addi	r2,r2,29372
81138db0:	200891ba 	slli	r4,r4,6
81138db4:	1105883a 	add	r2,r2,r4
81138db8:	10800804 	addi	r2,r2,32
81138dbc:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138dc0:	00a04574 	movhi	r2,33045
81138dc4:	109c9a04 	addi	r2,r2,29288
81138dc8:	10c01417 	ldw	r3,80(r2)
81138dcc:	e13ffe0f 	ldh	r4,-8(fp)
81138dd0:	00a04574 	movhi	r2,33045
81138dd4:	109caf04 	addi	r2,r2,29372
81138dd8:	200891ba 	slli	r4,r4,6
81138ddc:	1105883a 	add	r2,r2,r4
81138de0:	10800704 	addi	r2,r2,28
81138de4:	10800017 	ldw	r2,0(r2)
81138de8:	113fff84 	addi	r4,r2,-2
81138dec:	00a04574 	movhi	r2,33045
81138df0:	109c9a04 	addi	r2,r2,29288
81138df4:	10800383 	ldbu	r2,14(r2)
81138df8:	10803fcc 	andi	r2,r2,255
81138dfc:	2085383a 	mul	r2,r4,r2
81138e00:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
81138e04:	e13ffe0f 	ldh	r4,-8(fp)
81138e08:	00a04574 	movhi	r2,33045
81138e0c:	109caf04 	addi	r2,r2,29372
81138e10:	200891ba 	slli	r4,r4,6
81138e14:	1105883a 	add	r2,r2,r4
81138e18:	10800804 	addi	r2,r2,32
81138e1c:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138e20:	1885883a 	add	r2,r3,r2
81138e24:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
81138e28:	d0e09b17 	ldw	r3,-32148(gp)
81138e2c:	e0bffb17 	ldw	r2,-20(fp)
81138e30:	1885883a 	add	r2,r3,r2
81138e34:	1007883a 	mov	r3,r2
81138e38:	d0a09f17 	ldw	r2,-32132(gp)
81138e3c:	18800726 	beq	r3,r2,81138e5c <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81138e40:	d0a09b17 	ldw	r2,-32148(gp)
81138e44:	100b883a 	mov	r5,r2
81138e48:	e13ffb17 	ldw	r4,-20(fp)
81138e4c:	1134e700 	call	81134e70 <Read_Sector_Data>
81138e50:	1000021e 	bne	r2,zero,81138e5c <alt_up_sd_card_write+0x518>
                {
					return false;
81138e54:	0005883a 	mov	r2,zero
81138e58:	00003f06 	br	81138f58 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
81138e5c:	d0e09a17 	ldw	r3,-32152(gp)
81138e60:	e0bffc0f 	ldh	r2,-16(fp)
81138e64:	1885883a 	add	r2,r3,r2
81138e68:	e0ffff07 	ldb	r3,-4(fp)
81138e6c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81138e70:	e13ffe0f 	ldh	r4,-8(fp)
81138e74:	e0fffe0f 	ldh	r3,-8(fp)
81138e78:	00a04574 	movhi	r2,33045
81138e7c:	109caf04 	addi	r2,r2,29372
81138e80:	180691ba 	slli	r3,r3,6
81138e84:	10c5883a 	add	r2,r2,r3
81138e88:	10800904 	addi	r2,r2,36
81138e8c:	10800017 	ldw	r2,0(r2)
81138e90:	10c00044 	addi	r3,r2,1
81138e94:	00a04574 	movhi	r2,33045
81138e98:	109caf04 	addi	r2,r2,29372
81138e9c:	200891ba 	slli	r4,r4,6
81138ea0:	1105883a 	add	r2,r2,r4
81138ea4:	10800904 	addi	r2,r2,36
81138ea8:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81138eac:	e0fffe0f 	ldh	r3,-8(fp)
81138eb0:	00a04574 	movhi	r2,33045
81138eb4:	109caf04 	addi	r2,r2,29372
81138eb8:	180691ba 	slli	r3,r3,6
81138ebc:	10c5883a 	add	r2,r2,r3
81138ec0:	10800904 	addi	r2,r2,36
81138ec4:	10c00017 	ldw	r3,0(r2)
81138ec8:	e13ffe0f 	ldh	r4,-8(fp)
81138ecc:	00a04574 	movhi	r2,33045
81138ed0:	109caf04 	addi	r2,r2,29372
81138ed4:	200891ba 	slli	r4,r4,6
81138ed8:	1105883a 	add	r2,r2,r4
81138edc:	10800604 	addi	r2,r2,24
81138ee0:	10800017 	ldw	r2,0(r2)
81138ee4:	18801736 	bltu	r3,r2,81138f44 <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81138ee8:	e13ffe0f 	ldh	r4,-8(fp)
81138eec:	e0fffe0f 	ldh	r3,-8(fp)
81138ef0:	00a04574 	movhi	r2,33045
81138ef4:	109caf04 	addi	r2,r2,29372
81138ef8:	180691ba 	slli	r3,r3,6
81138efc:	10c5883a 	add	r2,r2,r3
81138f00:	10800604 	addi	r2,r2,24
81138f04:	10800017 	ldw	r2,0(r2)
81138f08:	10c00044 	addi	r3,r2,1
81138f0c:	00a04574 	movhi	r2,33045
81138f10:	109caf04 	addi	r2,r2,29372
81138f14:	200891ba 	slli	r4,r4,6
81138f18:	1105883a 	add	r2,r2,r4
81138f1c:	10800604 	addi	r2,r2,24
81138f20:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
81138f24:	e0fffe0f 	ldh	r3,-8(fp)
81138f28:	00a04574 	movhi	r2,33045
81138f2c:	109caf04 	addi	r2,r2,29372
81138f30:	180691ba 	slli	r3,r3,6
81138f34:	10c5883a 	add	r2,r2,r3
81138f38:	10800e04 	addi	r2,r2,56
81138f3c:	00c00044 	movi	r3,1
81138f40:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
81138f44:	00800044 	movi	r2,1
81138f48:	d0a09e15 	stw	r2,-32136(gp)
			result = true;
81138f4c:	00800044 	movi	r2,1
81138f50:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
81138f54:	e0bffa17 	ldw	r2,-24(fp)
}
81138f58:	e037883a 	mov	sp,fp
81138f5c:	dfc00117 	ldw	ra,4(sp)
81138f60:	df000017 	ldw	fp,0(sp)
81138f64:	dec00204 	addi	sp,sp,8
81138f68:	f800283a 	ret

81138f6c <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
81138f6c:	defffb04 	addi	sp,sp,-20
81138f70:	de00012e 	bgeu	sp,et,81138f78 <alt_up_sd_card_fclose+0xc>
81138f74:	003b68fa 	trap	3
81138f78:	dfc00415 	stw	ra,16(sp)
81138f7c:	df000315 	stw	fp,12(sp)
81138f80:	df000304 	addi	fp,sp,12
81138f84:	2005883a 	mov	r2,r4
81138f88:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81138f8c:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81138f90:	1137b480 	call	81137b48 <alt_up_sd_card_is_Present>
81138f94:	10006026 	beq	r2,zero,81139118 <alt_up_sd_card_fclose+0x1ac>
81138f98:	d0a09417 	ldw	r2,-32176(gp)
81138f9c:	10005e26 	beq	r2,zero,81139118 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81138fa0:	e0ffff0f 	ldh	r3,-4(fp)
81138fa4:	00a04574 	movhi	r2,33045
81138fa8:	109caf04 	addi	r2,r2,29372
81138fac:	180691ba 	slli	r3,r3,6
81138fb0:	10c5883a 	add	r2,r2,r3
81138fb4:	10800f04 	addi	r2,r2,60
81138fb8:	10800017 	ldw	r2,0(r2)
81138fbc:	10005626 	beq	r2,zero,81139118 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81138fc0:	e0ffff0f 	ldh	r3,-4(fp)
81138fc4:	00a04574 	movhi	r2,33045
81138fc8:	109caf04 	addi	r2,r2,29372
81138fcc:	180691ba 	slli	r3,r3,6
81138fd0:	10c5883a 	add	r2,r2,r3
81138fd4:	10800e04 	addi	r2,r2,56
81138fd8:	10800017 	ldw	r2,0(r2)
81138fdc:	10004526 	beq	r2,zero,811390f4 <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81138fe0:	e0ffff0f 	ldh	r3,-4(fp)
81138fe4:	00a04574 	movhi	r2,33045
81138fe8:	109caf04 	addi	r2,r2,29372
81138fec:	180691ba 	slli	r3,r3,6
81138ff0:	10c5883a 	add	r2,r2,r3
81138ff4:	10800b04 	addi	r2,r2,44
81138ff8:	10800017 	ldw	r2,0(r2)
81138ffc:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81139000:	e0ffff0f 	ldh	r3,-4(fp)
81139004:	00a04574 	movhi	r2,33045
81139008:	109caf04 	addi	r2,r2,29372
8113900c:	180691ba 	slli	r3,r3,6
81139010:	10c5883a 	add	r2,r2,r3
81139014:	10800a04 	addi	r2,r2,40
81139018:	10800017 	ldw	r2,0(r2)
8113901c:	1000071e 	bne	r2,zero,8113903c <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81139020:	00a04574 	movhi	r2,33045
81139024:	109c9a04 	addi	r2,r2,29288
81139028:	10801317 	ldw	r2,76(r2)
8113902c:	e0fffe17 	ldw	r3,-8(fp)
81139030:	1885883a 	add	r2,r3,r2
81139034:	e0bffe15 	stw	r2,-8(fp)
81139038:	00001406 	br	8113908c <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8113903c:	00a04574 	movhi	r2,33045
81139040:	109c9a04 	addi	r2,r2,29288
81139044:	10c01417 	ldw	r3,80(r2)
81139048:	e0bffe17 	ldw	r2,-8(fp)
8113904c:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
81139050:	e13fff0f 	ldh	r4,-4(fp)
81139054:	00a04574 	movhi	r2,33045
81139058:	109caf04 	addi	r2,r2,29372
8113905c:	200891ba 	slli	r4,r4,6
81139060:	1105883a 	add	r2,r2,r4
81139064:	10800a04 	addi	r2,r2,40
81139068:	10800017 	ldw	r2,0(r2)
8113906c:	113fff84 	addi	r4,r2,-2
81139070:	00a04574 	movhi	r2,33045
81139074:	109c9a04 	addi	r2,r2,29288
81139078:	10800383 	ldbu	r2,14(r2)
8113907c:	10803fcc 	andi	r2,r2,255
81139080:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81139084:	1885883a 	add	r2,r3,r2
81139088:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
8113908c:	e0bffe17 	ldw	r2,-8(fp)
81139090:	d0e09b17 	ldw	r3,-32148(gp)
81139094:	180b883a 	mov	r5,r3
81139098:	1009883a 	mov	r4,r2
8113909c:	1134e700 	call	81134e70 <Read_Sector_Data>
811390a0:	10001426 	beq	r2,zero,811390f4 <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
811390a4:	e0ffff0f 	ldh	r3,-4(fp)
811390a8:	00a04574 	movhi	r2,33045
811390ac:	109caf04 	addi	r2,r2,29372
811390b0:	180691ba 	slli	r3,r3,6
811390b4:	10c5883a 	add	r2,r2,r3
811390b8:	10800c04 	addi	r2,r2,48
811390bc:	1080000b 	ldhu	r2,0(r2)
811390c0:	113fffcc 	andi	r4,r2,65535
811390c4:	2120001c 	xori	r4,r4,32768
811390c8:	21200004 	addi	r4,r4,-32768
811390cc:	e0bfff0f 	ldh	r2,-4(fp)
811390d0:	100691ba 	slli	r3,r2,6
811390d4:	00a04574 	movhi	r2,33045
811390d8:	109caf04 	addi	r2,r2,29372
811390dc:	1885883a 	add	r2,r3,r2
811390e0:	100b883a 	mov	r5,r2
811390e4:	11355240 	call	81135524 <Write_File_Record_At_Offset>
811390e8:	10000226 	beq	r2,zero,811390f4 <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
811390ec:	1134e1c0 	call	81134e1c <Save_Modified_Sector>
811390f0:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
811390f4:	e0ffff0f 	ldh	r3,-4(fp)
811390f8:	00a04574 	movhi	r2,33045
811390fc:	109caf04 	addi	r2,r2,29372
81139100:	180691ba 	slli	r3,r3,6
81139104:	10c5883a 	add	r2,r2,r3
81139108:	10800f04 	addi	r2,r2,60
8113910c:	10000015 	stw	zero,0(r2)
			result = true;
81139110:	00800044 	movi	r2,1
81139114:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81139118:	e0bffd17 	ldw	r2,-12(fp)
}
8113911c:	e037883a 	mov	sp,fp
81139120:	dfc00117 	ldw	ra,4(sp)
81139124:	df000017 	ldw	fp,0(sp)
81139128:	dec00204 	addi	sp,sp,8
8113912c:	f800283a 	ret

81139130 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81139130:	defffa04 	addi	sp,sp,-24
81139134:	de00012e 	bgeu	sp,et,8113913c <altera_avalon_jtag_uart_read_fd+0xc>
81139138:	003b68fa 	trap	3
8113913c:	dfc00515 	stw	ra,20(sp)
81139140:	df000415 	stw	fp,16(sp)
81139144:	df000404 	addi	fp,sp,16
81139148:	e13ffd15 	stw	r4,-12(fp)
8113914c:	e17ffe15 	stw	r5,-8(fp)
81139150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81139154:	e0bffd17 	ldw	r2,-12(fp)
81139158:	10800017 	ldw	r2,0(r2)
8113915c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81139160:	e0bffc17 	ldw	r2,-16(fp)
81139164:	10c00a04 	addi	r3,r2,40
81139168:	e0bffd17 	ldw	r2,-12(fp)
8113916c:	10800217 	ldw	r2,8(r2)
81139170:	100f883a 	mov	r7,r2
81139174:	e1bfff17 	ldw	r6,-4(fp)
81139178:	e17ffe17 	ldw	r5,-8(fp)
8113917c:	1809883a 	mov	r4,r3
81139180:	11399b40 	call	811399b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81139184:	e037883a 	mov	sp,fp
81139188:	dfc00117 	ldw	ra,4(sp)
8113918c:	df000017 	ldw	fp,0(sp)
81139190:	dec00204 	addi	sp,sp,8
81139194:	f800283a 	ret

81139198 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81139198:	defffa04 	addi	sp,sp,-24
8113919c:	de00012e 	bgeu	sp,et,811391a4 <altera_avalon_jtag_uart_write_fd+0xc>
811391a0:	003b68fa 	trap	3
811391a4:	dfc00515 	stw	ra,20(sp)
811391a8:	df000415 	stw	fp,16(sp)
811391ac:	df000404 	addi	fp,sp,16
811391b0:	e13ffd15 	stw	r4,-12(fp)
811391b4:	e17ffe15 	stw	r5,-8(fp)
811391b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811391bc:	e0bffd17 	ldw	r2,-12(fp)
811391c0:	10800017 	ldw	r2,0(r2)
811391c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
811391c8:	e0bffc17 	ldw	r2,-16(fp)
811391cc:	10c00a04 	addi	r3,r2,40
811391d0:	e0bffd17 	ldw	r2,-12(fp)
811391d4:	10800217 	ldw	r2,8(r2)
811391d8:	100f883a 	mov	r7,r2
811391dc:	e1bfff17 	ldw	r6,-4(fp)
811391e0:	e17ffe17 	ldw	r5,-8(fp)
811391e4:	1809883a 	mov	r4,r3
811391e8:	1139c780 	call	81139c78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811391ec:	e037883a 	mov	sp,fp
811391f0:	dfc00117 	ldw	ra,4(sp)
811391f4:	df000017 	ldw	fp,0(sp)
811391f8:	dec00204 	addi	sp,sp,8
811391fc:	f800283a 	ret

81139200 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81139200:	defffc04 	addi	sp,sp,-16
81139204:	de00012e 	bgeu	sp,et,8113920c <altera_avalon_jtag_uart_close_fd+0xc>
81139208:	003b68fa 	trap	3
8113920c:	dfc00315 	stw	ra,12(sp)
81139210:	df000215 	stw	fp,8(sp)
81139214:	df000204 	addi	fp,sp,8
81139218:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8113921c:	e0bfff17 	ldw	r2,-4(fp)
81139220:	10800017 	ldw	r2,0(r2)
81139224:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81139228:	e0bffe17 	ldw	r2,-8(fp)
8113922c:	10c00a04 	addi	r3,r2,40
81139230:	e0bfff17 	ldw	r2,-4(fp)
81139234:	10800217 	ldw	r2,8(r2)
81139238:	100b883a 	mov	r5,r2
8113923c:	1809883a 	mov	r4,r3
81139240:	113984c0 	call	8113984c <altera_avalon_jtag_uart_close>
}
81139244:	e037883a 	mov	sp,fp
81139248:	dfc00117 	ldw	ra,4(sp)
8113924c:	df000017 	ldw	fp,0(sp)
81139250:	dec00204 	addi	sp,sp,8
81139254:	f800283a 	ret

81139258 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81139258:	defffa04 	addi	sp,sp,-24
8113925c:	de00012e 	bgeu	sp,et,81139264 <altera_avalon_jtag_uart_ioctl_fd+0xc>
81139260:	003b68fa 	trap	3
81139264:	dfc00515 	stw	ra,20(sp)
81139268:	df000415 	stw	fp,16(sp)
8113926c:	df000404 	addi	fp,sp,16
81139270:	e13ffd15 	stw	r4,-12(fp)
81139274:	e17ffe15 	stw	r5,-8(fp)
81139278:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8113927c:	e0bffd17 	ldw	r2,-12(fp)
81139280:	10800017 	ldw	r2,0(r2)
81139284:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81139288:	e0bffc17 	ldw	r2,-16(fp)
8113928c:	10800a04 	addi	r2,r2,40
81139290:	e1bfff17 	ldw	r6,-4(fp)
81139294:	e17ffe17 	ldw	r5,-8(fp)
81139298:	1009883a 	mov	r4,r2
8113929c:	11398bc0 	call	811398bc <altera_avalon_jtag_uart_ioctl>
}
811392a0:	e037883a 	mov	sp,fp
811392a4:	dfc00117 	ldw	ra,4(sp)
811392a8:	df000017 	ldw	fp,0(sp)
811392ac:	dec00204 	addi	sp,sp,8
811392b0:	f800283a 	ret

811392b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811392b4:	deffef04 	addi	sp,sp,-68
811392b8:	de00012e 	bgeu	sp,et,811392c0 <altera_avalon_jtag_uart_init+0xc>
811392bc:	003b68fa 	trap	3
811392c0:	dfc01015 	stw	ra,64(sp)
811392c4:	df000f15 	stw	fp,60(sp)
811392c8:	dc400e15 	stw	r17,56(sp)
811392cc:	dc000d15 	stw	r16,52(sp)
811392d0:	df000f04 	addi	fp,sp,60
811392d4:	e13ff715 	stw	r4,-36(fp)
811392d8:	e17ff815 	stw	r5,-32(fp)
811392dc:	e1bff915 	stw	r6,-28(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
811392e0:	e0bff717 	ldw	r2,-36(fp)
811392e4:	10800c04 	addi	r2,r2,48
811392e8:	e0bff215 	stw	r2,-56(fp)
811392ec:	e03ff60d 	sth	zero,-40(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811392f0:	e0bff60b 	ldhu	r2,-40(fp)
811392f4:	e0fff684 	addi	r3,fp,-38
811392f8:	180b883a 	mov	r5,r3
811392fc:	1009883a 	mov	r4,r2
81139300:	112d4840 	call	8112d484 <OSFlagCreate>
81139304:	1007883a 	mov	r3,r2
81139308:	e0bff217 	ldw	r2,-56(fp)
8113930c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81139310:	e0bff717 	ldw	r2,-36(fp)
81139314:	10800a04 	addi	r2,r2,40
81139318:	e0bff315 	stw	r2,-52(fp)
8113931c:	00800044 	movi	r2,1
81139320:	e0bff58d 	sth	r2,-42(fp)
81139324:	e0bff58b 	ldhu	r2,-42(fp)
81139328:	1009883a 	mov	r4,r2
8113932c:	11313e00 	call	811313e0 <OSSemCreate>
81139330:	1007883a 	mov	r3,r2
81139334:	e0bff317 	ldw	r2,-52(fp)
81139338:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
8113933c:	e0bff717 	ldw	r2,-36(fp)
81139340:	10800b04 	addi	r2,r2,44
81139344:	e0bff415 	stw	r2,-48(fp)
81139348:	00800044 	movi	r2,1
8113934c:	e0bff50d 	sth	r2,-44(fp)
81139350:	e0bff50b 	ldhu	r2,-44(fp)
81139354:	1009883a 	mov	r4,r2
81139358:	11313e00 	call	811313e0 <OSSemCreate>
8113935c:	1007883a 	mov	r3,r2
81139360:	e0bff417 	ldw	r2,-48(fp)
81139364:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81139368:	e0bff717 	ldw	r2,-36(fp)
8113936c:	00c00044 	movi	r3,1
81139370:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81139374:	e0bff717 	ldw	r2,-36(fp)
81139378:	10800017 	ldw	r2,0(r2)
8113937c:	10800104 	addi	r2,r2,4
81139380:	1007883a 	mov	r3,r2
81139384:	e0bff717 	ldw	r2,-36(fp)
81139388:	10800817 	ldw	r2,32(r2)
8113938c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81139390:	e0bff817 	ldw	r2,-32(fp)
81139394:	e0fff917 	ldw	r3,-28(fp)
81139398:	d8000015 	stw	zero,0(sp)
8113939c:	e1fff717 	ldw	r7,-36(fp)
811393a0:	01a04534 	movhi	r6,33044
811393a4:	31a52104 	addi	r6,r6,-27516
811393a8:	180b883a 	mov	r5,r3
811393ac:	1009883a 	mov	r4,r2
811393b0:	113d29c0 	call	8113d29c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
811393b4:	e0bff717 	ldw	r2,-36(fp)
811393b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
811393bc:	e0bff717 	ldw	r2,-36(fp)
811393c0:	10800204 	addi	r2,r2,8
811393c4:	d0e07217 	ldw	r3,-32312(gp)
811393c8:	e1fff717 	ldw	r7,-36(fp)
811393cc:	01a04534 	movhi	r6,33044
811393d0:	31a5d004 	addi	r6,r6,-26816
811393d4:	180b883a 	mov	r5,r3
811393d8:	1009883a 	mov	r4,r2
811393dc:	113cd1c0 	call	8113cd1c <alt_alarm_start>
811393e0:	1000040e 	bge	r2,zero,811393f4 <altera_avalon_jtag_uart_init+0x140>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
811393e4:	e0fff717 	ldw	r3,-36(fp)
811393e8:	00a00034 	movhi	r2,32768
811393ec:	10bfffc4 	addi	r2,r2,-1
811393f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
811393f4:	d0a06b83 	ldbu	r2,-32338(gp)
811393f8:	10803fcc 	andi	r2,r2,255
811393fc:	10800058 	cmpnei	r2,r2,1
81139400:	10000f1e 	bne	r2,zero,81139440 <altera_avalon_jtag_uart_init+0x18c>
81139404:	d0e07217 	ldw	r3,-32312(gp)
81139408:	00b33374 	movhi	r2,52429
8113940c:	10b33344 	addi	r2,r2,-13107
81139410:	1888383a 	mulxuu	r4,r3,r2
81139414:	1885383a 	mul	r2,r3,r2
81139418:	1021883a 	mov	r16,r2
8113941c:	2023883a 	mov	r17,r4
81139420:	8804d0fa 	srli	r2,r17,3
81139424:	e1fff717 	ldw	r7,-36(fp)
81139428:	01a044f4 	movhi	r6,33043
8113942c:	31a6bc04 	addi	r6,r6,-25872
81139430:	100b883a 	mov	r5,r2
81139434:	01204574 	movhi	r4,33045
81139438:	210b5804 	addi	r4,r4,11616
8113943c:	113cd1c0 	call	8113cd1c <alt_alarm_start>
81139440:	d0a06c03 	ldbu	r2,-32336(gp)
81139444:	10803fcc 	andi	r2,r2,255
81139448:	10800058 	cmpnei	r2,r2,1
8113944c:	1000051e 	bne	r2,zero,81139464 <altera_avalon_jtag_uart_init+0x1b0>
81139450:	e0bff717 	ldw	r2,-36(fp)
81139454:	10800017 	ldw	r2,0(r2)
81139458:	100b883a 	mov	r5,r2
8113945c:	e13ff717 	ldw	r4,-36(fp)
81139460:	1129c880 	call	81129c88 <alt_log_jtag_uart_startup_info>
}
81139464:	0001883a 	nop
81139468:	e6fffe04 	addi	sp,fp,-8
8113946c:	dfc00317 	ldw	ra,12(sp)
81139470:	df000217 	ldw	fp,8(sp)
81139474:	dc400117 	ldw	r17,4(sp)
81139478:	dc000017 	ldw	r16,0(sp)
8113947c:	dec00404 	addi	sp,sp,16
81139480:	f800283a 	ret

81139484 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81139484:	defff204 	addi	sp,sp,-56
81139488:	de00012e 	bgeu	sp,et,81139490 <altera_avalon_jtag_uart_irq+0xc>
8113948c:	003b68fa 	trap	3
81139490:	dfc00d15 	stw	ra,52(sp)
81139494:	df000c15 	stw	fp,48(sp)
81139498:	df000c04 	addi	fp,sp,48
8113949c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
811394a0:	e0bfff17 	ldw	r2,-4(fp)
811394a4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
811394a8:	e0bff617 	ldw	r2,-40(fp)
811394ac:	10800017 	ldw	r2,0(r2)
811394b0:	e0bff715 	stw	r2,-36(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
811394b4:	e0bff717 	ldw	r2,-36(fp)
811394b8:	e17ff617 	ldw	r5,-40(fp)
811394bc:	1009883a 	mov	r4,r2
811394c0:	1129cdc0 	call	81129cdc <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811394c4:	e0bff717 	ldw	r2,-36(fp)
811394c8:	10800104 	addi	r2,r2,4
811394cc:	10800037 	ldwio	r2,0(r2)
811394d0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
811394d4:	e0bff817 	ldw	r2,-32(fp)
811394d8:	1080c00c 	andi	r2,r2,768
811394dc:	10009126 	beq	r2,zero,81139724 <altera_avalon_jtag_uart_irq+0x2a0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
811394e0:	e0bff817 	ldw	r2,-32(fp)
811394e4:	1080400c 	andi	r2,r2,256
811394e8:	10004726 	beq	r2,zero,81139608 <altera_avalon_jtag_uart_irq+0x184>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
811394ec:	00800074 	movhi	r2,1
811394f0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811394f4:	e0bff617 	ldw	r2,-40(fp)
811394f8:	10800d17 	ldw	r2,52(r2)
811394fc:	10800044 	addi	r2,r2,1
81139500:	1081ffcc 	andi	r2,r2,2047
81139504:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81139508:	e0bff617 	ldw	r2,-40(fp)
8113950c:	10c00e17 	ldw	r3,56(r2)
81139510:	e0bff917 	ldw	r2,-28(fp)
81139514:	18802726 	beq	r3,r2,811395b4 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81139518:	e0bff717 	ldw	r2,-36(fp)
8113951c:	10800037 	ldwio	r2,0(r2)
81139520:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81139524:	e0bff417 	ldw	r2,-48(fp)
81139528:	10a0000c 	andi	r2,r2,32768
8113952c:	10002326 	beq	r2,zero,811395bc <altera_avalon_jtag_uart_irq+0x138>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81139530:	e0bff617 	ldw	r2,-40(fp)
81139534:	10800d17 	ldw	r2,52(r2)
81139538:	e0fff417 	ldw	r3,-48(fp)
8113953c:	1809883a 	mov	r4,r3
81139540:	e0fff617 	ldw	r3,-40(fp)
81139544:	1885883a 	add	r2,r3,r2
81139548:	10801104 	addi	r2,r2,68
8113954c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139550:	e0bff617 	ldw	r2,-40(fp)
81139554:	10800d17 	ldw	r2,52(r2)
81139558:	10800044 	addi	r2,r2,1
8113955c:	10c1ffcc 	andi	r3,r2,2047
81139560:	e0bff617 	ldw	r2,-40(fp)
81139564:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81139568:	e0bff617 	ldw	r2,-40(fp)
8113956c:	10800c17 	ldw	r2,48(r2)
81139570:	e0bffb15 	stw	r2,-20(fp)
81139574:	00800044 	movi	r2,1
81139578:	e0bffc0d 	sth	r2,-16(fp)
8113957c:	00800044 	movi	r2,1
81139580:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81139584:	d0a07b03 	ldbu	r2,-32276(gp)
81139588:	10803fcc 	andi	r2,r2,255
8113958c:	103fd926 	beq	r2,zero,811394f4 <__reset+0xfb1194f4>
  {
    OSFlagPost (group, flags, opt, &err);
81139590:	e0bffc0b 	ldhu	r2,-16(fp)
81139594:	e0fffc83 	ldbu	r3,-14(fp)
81139598:	e13ffdc4 	addi	r4,fp,-9
8113959c:	200f883a 	mov	r7,r4
811395a0:	180d883a 	mov	r6,r3
811395a4:	100b883a 	mov	r5,r2
811395a8:	e13ffb17 	ldw	r4,-20(fp)
811395ac:	112e0900 	call	8112e090 <OSFlagPost>
      }
811395b0:	003fd006 	br	811394f4 <__reset+0xfb1194f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
811395b4:	0001883a 	nop
811395b8:	00000106 	br	811395c0 <altera_avalon_jtag_uart_irq+0x13c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
811395bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
811395c0:	e0bff417 	ldw	r2,-48(fp)
811395c4:	10bfffec 	andhi	r2,r2,65535
811395c8:	10000f26 	beq	r2,zero,81139608 <altera_avalon_jtag_uart_irq+0x184>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811395cc:	e0bff617 	ldw	r2,-40(fp)
811395d0:	10c00817 	ldw	r3,32(r2)
811395d4:	00bfff84 	movi	r2,-2
811395d8:	1886703a 	and	r3,r3,r2
811395dc:	e0bff617 	ldw	r2,-40(fp)
811395e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
811395e4:	e0bff717 	ldw	r2,-36(fp)
811395e8:	10800104 	addi	r2,r2,4
811395ec:	1007883a 	mov	r3,r2
811395f0:	e0bff617 	ldw	r2,-40(fp)
811395f4:	10800817 	ldw	r2,32(r2)
811395f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811395fc:	e0bff717 	ldw	r2,-36(fp)
81139600:	10800104 	addi	r2,r2,4
81139604:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81139608:	e0bff817 	ldw	r2,-32(fp)
8113960c:	1080800c 	andi	r2,r2,512
81139610:	103fac26 	beq	r2,zero,811394c4 <__reset+0xfb1194c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81139614:	e0bff817 	ldw	r2,-32(fp)
81139618:	1004d43a 	srli	r2,r2,16
8113961c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81139620:	00002606 	br	811396bc <altera_avalon_jtag_uart_irq+0x238>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81139624:	e0bff717 	ldw	r2,-36(fp)
81139628:	e0fff617 	ldw	r3,-40(fp)
8113962c:	18c01017 	ldw	r3,64(r3)
81139630:	e13ff617 	ldw	r4,-40(fp)
81139634:	20c7883a 	add	r3,r4,r3
81139638:	18c21104 	addi	r3,r3,2116
8113963c:	18c00003 	ldbu	r3,0(r3)
81139640:	18c03fcc 	andi	r3,r3,255
81139644:	18c0201c 	xori	r3,r3,128
81139648:	18ffe004 	addi	r3,r3,-128
8113964c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139650:	e0bff617 	ldw	r2,-40(fp)
81139654:	10801017 	ldw	r2,64(r2)
81139658:	10800044 	addi	r2,r2,1
8113965c:	10c1ffcc 	andi	r3,r2,2047
81139660:	e0bff617 	ldw	r2,-40(fp)
81139664:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81139668:	e0bff617 	ldw	r2,-40(fp)
8113966c:	10800c17 	ldw	r2,48(r2)
81139670:	e0bffa15 	stw	r2,-24(fp)
81139674:	00800084 	movi	r2,2
81139678:	e0bffd0d 	sth	r2,-12(fp)
8113967c:	00800044 	movi	r2,1
81139680:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81139684:	d0a07b03 	ldbu	r2,-32276(gp)
81139688:	10803fcc 	andi	r2,r2,255
8113968c:	10000826 	beq	r2,zero,811396b0 <altera_avalon_jtag_uart_irq+0x22c>
  {
    OSFlagPost (group, flags, opt, &err);
81139690:	e0bffd0b 	ldhu	r2,-12(fp)
81139694:	e0fffd83 	ldbu	r3,-10(fp)
81139698:	e13ffe04 	addi	r4,fp,-8
8113969c:	200f883a 	mov	r7,r4
811396a0:	180d883a 	mov	r6,r3
811396a4:	100b883a 	mov	r5,r2
811396a8:	e13ffa17 	ldw	r4,-24(fp)
811396ac:	112e0900 	call	8112e090 <OSFlagPost>

        space--;
811396b0:	e0bff517 	ldw	r2,-44(fp)
811396b4:	10bfffc4 	addi	r2,r2,-1
811396b8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811396bc:	e0bff517 	ldw	r2,-44(fp)
811396c0:	10000526 	beq	r2,zero,811396d8 <altera_avalon_jtag_uart_irq+0x254>
811396c4:	e0bff617 	ldw	r2,-40(fp)
811396c8:	10c01017 	ldw	r3,64(r2)
811396cc:	e0bff617 	ldw	r2,-40(fp)
811396d0:	10800f17 	ldw	r2,60(r2)
811396d4:	18bfd31e 	bne	r3,r2,81139624 <__reset+0xfb119624>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
811396d8:	e0bff517 	ldw	r2,-44(fp)
811396dc:	103f7926 	beq	r2,zero,811394c4 <__reset+0xfb1194c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811396e0:	e0bff617 	ldw	r2,-40(fp)
811396e4:	10c00817 	ldw	r3,32(r2)
811396e8:	00bfff44 	movi	r2,-3
811396ec:	1886703a 	and	r3,r3,r2
811396f0:	e0bff617 	ldw	r2,-40(fp)
811396f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811396f8:	e0bff617 	ldw	r2,-40(fp)
811396fc:	10800017 	ldw	r2,0(r2)
81139700:	10800104 	addi	r2,r2,4
81139704:	1007883a 	mov	r3,r2
81139708:	e0bff617 	ldw	r2,-40(fp)
8113970c:	10800817 	ldw	r2,32(r2)
81139710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81139714:	e0bff717 	ldw	r2,-36(fp)
81139718:	10800104 	addi	r2,r2,4
8113971c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81139720:	003f6806 	br	811394c4 <__reset+0xfb1194c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81139724:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81139728:	0001883a 	nop
8113972c:	e037883a 	mov	sp,fp
81139730:	dfc00117 	ldw	ra,4(sp)
81139734:	df000017 	ldw	fp,0(sp)
81139738:	dec00204 	addi	sp,sp,8
8113973c:	f800283a 	ret

81139740 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81139740:	defff904 	addi	sp,sp,-28
81139744:	de00012e 	bgeu	sp,et,8113974c <altera_avalon_jtag_uart_timeout+0xc>
81139748:	003b68fa 	trap	3
8113974c:	dfc00615 	stw	ra,24(sp)
81139750:	df000515 	stw	fp,20(sp)
81139754:	df000504 	addi	fp,sp,20
81139758:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8113975c:	e0bfff17 	ldw	r2,-4(fp)
81139760:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81139764:	e0bffb17 	ldw	r2,-20(fp)
81139768:	10800017 	ldw	r2,0(r2)
8113976c:	10800104 	addi	r2,r2,4
81139770:	10800037 	ldwio	r2,0(r2)
81139774:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81139778:	e0bffc17 	ldw	r2,-16(fp)
8113977c:	1081000c 	andi	r2,r2,1024
81139780:	10000b26 	beq	r2,zero,811397b0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81139784:	e0bffb17 	ldw	r2,-20(fp)
81139788:	10800017 	ldw	r2,0(r2)
8113978c:	10800104 	addi	r2,r2,4
81139790:	1007883a 	mov	r3,r2
81139794:	e0bffb17 	ldw	r2,-20(fp)
81139798:	10800817 	ldw	r2,32(r2)
8113979c:	10810014 	ori	r2,r2,1024
811397a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
811397a4:	e0bffb17 	ldw	r2,-20(fp)
811397a8:	10000915 	stw	zero,36(r2)
811397ac:	00002106 	br	81139834 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811397b0:	e0bffb17 	ldw	r2,-20(fp)
811397b4:	10c00917 	ldw	r3,36(r2)
811397b8:	00a00034 	movhi	r2,32768
811397bc:	10bfff04 	addi	r2,r2,-4
811397c0:	10c01c36 	bltu	r2,r3,81139834 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
811397c4:	e0bffb17 	ldw	r2,-20(fp)
811397c8:	10800917 	ldw	r2,36(r2)
811397cc:	10c00044 	addi	r3,r2,1
811397d0:	e0bffb17 	ldw	r2,-20(fp)
811397d4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
811397d8:	e0bffb17 	ldw	r2,-20(fp)
811397dc:	10c00917 	ldw	r3,36(r2)
811397e0:	e0bffb17 	ldw	r2,-20(fp)
811397e4:	10800117 	ldw	r2,4(r2)
811397e8:	18801236 	bltu	r3,r2,81139834 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
811397ec:	e0bffb17 	ldw	r2,-20(fp)
811397f0:	10800c17 	ldw	r2,48(r2)
811397f4:	e0bffd15 	stw	r2,-12(fp)
811397f8:	00800104 	movi	r2,4
811397fc:	e0bffe0d 	sth	r2,-8(fp)
81139800:	00800044 	movi	r2,1
81139804:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81139808:	d0a07b03 	ldbu	r2,-32276(gp)
8113980c:	10803fcc 	andi	r2,r2,255
81139810:	10000826 	beq	r2,zero,81139834 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81139814:	e0bffe0b 	ldhu	r2,-8(fp)
81139818:	e0fffe83 	ldbu	r3,-6(fp)
8113981c:	e13ffec4 	addi	r4,fp,-5
81139820:	200f883a 	mov	r7,r4
81139824:	180d883a 	mov	r6,r3
81139828:	100b883a 	mov	r5,r2
8113982c:	e13ffd17 	ldw	r4,-12(fp)
81139830:	112e0900 	call	8112e090 <OSFlagPost>
81139834:	d0a07217 	ldw	r2,-32312(gp)
    }
  }

  return alt_ticks_per_second();
}
81139838:	e037883a 	mov	sp,fp
8113983c:	dfc00117 	ldw	ra,4(sp)
81139840:	df000017 	ldw	fp,0(sp)
81139844:	dec00204 	addi	sp,sp,8
81139848:	f800283a 	ret

8113984c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8113984c:	defffd04 	addi	sp,sp,-12
81139850:	de00012e 	bgeu	sp,et,81139858 <altera_avalon_jtag_uart_close+0xc>
81139854:	003b68fa 	trap	3
81139858:	df000215 	stw	fp,8(sp)
8113985c:	df000204 	addi	fp,sp,8
81139860:	e13ffe15 	stw	r4,-8(fp)
81139864:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81139868:	00000506 	br	81139880 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
8113986c:	e0bfff17 	ldw	r2,-4(fp)
81139870:	1090000c 	andi	r2,r2,16384
81139874:	10000226 	beq	r2,zero,81139880 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81139878:	00bffd44 	movi	r2,-11
8113987c:	00000b06 	br	811398ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81139880:	e0bffe17 	ldw	r2,-8(fp)
81139884:	10c01017 	ldw	r3,64(r2)
81139888:	e0bffe17 	ldw	r2,-8(fp)
8113988c:	10800f17 	ldw	r2,60(r2)
81139890:	18800526 	beq	r3,r2,811398a8 <altera_avalon_jtag_uart_close+0x5c>
81139894:	e0bffe17 	ldw	r2,-8(fp)
81139898:	10c00917 	ldw	r3,36(r2)
8113989c:	e0bffe17 	ldw	r2,-8(fp)
811398a0:	10800117 	ldw	r2,4(r2)
811398a4:	18bff136 	bltu	r3,r2,8113986c <__reset+0xfb11986c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
811398a8:	0005883a 	mov	r2,zero
}
811398ac:	e037883a 	mov	sp,fp
811398b0:	df000017 	ldw	fp,0(sp)
811398b4:	dec00104 	addi	sp,sp,4
811398b8:	f800283a 	ret

811398bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
811398bc:	defffa04 	addi	sp,sp,-24
811398c0:	de00012e 	bgeu	sp,et,811398c8 <altera_avalon_jtag_uart_ioctl+0xc>
811398c4:	003b68fa 	trap	3
811398c8:	df000515 	stw	fp,20(sp)
811398cc:	df000504 	addi	fp,sp,20
811398d0:	e13ffd15 	stw	r4,-12(fp)
811398d4:	e17ffe15 	stw	r5,-8(fp)
811398d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
811398dc:	00bff9c4 	movi	r2,-25
811398e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
811398e4:	e0bffe17 	ldw	r2,-8(fp)
811398e8:	10da8060 	cmpeqi	r3,r2,27137
811398ec:	1800031e 	bne	r3,zero,811398fc <altera_avalon_jtag_uart_ioctl+0x40>
811398f0:	109a80a0 	cmpeqi	r2,r2,27138
811398f4:	1000181e 	bne	r2,zero,81139958 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
811398f8:	00002906 	br	811399a0 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
811398fc:	e0bffd17 	ldw	r2,-12(fp)
81139900:	10c00117 	ldw	r3,4(r2)
81139904:	00a00034 	movhi	r2,32768
81139908:	10bfffc4 	addi	r2,r2,-1
8113990c:	18802126 	beq	r3,r2,81139994 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81139910:	e0bfff17 	ldw	r2,-4(fp)
81139914:	10800017 	ldw	r2,0(r2)
81139918:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8113991c:	e0bffc17 	ldw	r2,-16(fp)
81139920:	10800090 	cmplti	r2,r2,2
81139924:	1000061e 	bne	r2,zero,81139940 <altera_avalon_jtag_uart_ioctl+0x84>
81139928:	e0fffc17 	ldw	r3,-16(fp)
8113992c:	00a00034 	movhi	r2,32768
81139930:	10bfffc4 	addi	r2,r2,-1
81139934:	18800226 	beq	r3,r2,81139940 <altera_avalon_jtag_uart_ioctl+0x84>
81139938:	e0bffc17 	ldw	r2,-16(fp)
8113993c:	00000206 	br	81139948 <altera_avalon_jtag_uart_ioctl+0x8c>
81139940:	00a00034 	movhi	r2,32768
81139944:	10bfff84 	addi	r2,r2,-2
81139948:	e0fffd17 	ldw	r3,-12(fp)
8113994c:	18800115 	stw	r2,4(r3)
      rc = 0;
81139950:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81139954:	00000f06 	br	81139994 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81139958:	e0bffd17 	ldw	r2,-12(fp)
8113995c:	10c00117 	ldw	r3,4(r2)
81139960:	00a00034 	movhi	r2,32768
81139964:	10bfffc4 	addi	r2,r2,-1
81139968:	18800c26 	beq	r3,r2,8113999c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8113996c:	e0bffd17 	ldw	r2,-12(fp)
81139970:	10c00917 	ldw	r3,36(r2)
81139974:	e0bffd17 	ldw	r2,-12(fp)
81139978:	10800117 	ldw	r2,4(r2)
8113997c:	1885803a 	cmpltu	r2,r3,r2
81139980:	10c03fcc 	andi	r3,r2,255
81139984:	e0bfff17 	ldw	r2,-4(fp)
81139988:	10c00015 	stw	r3,0(r2)
      rc = 0;
8113998c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81139990:	00000206 	br	8113999c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81139994:	0001883a 	nop
81139998:	00000106 	br	811399a0 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8113999c:	0001883a 	nop

  default:
    break;
  }

  return rc;
811399a0:	e0bffb17 	ldw	r2,-20(fp)
}
811399a4:	e037883a 	mov	sp,fp
811399a8:	df000017 	ldw	fp,0(sp)
811399ac:	dec00104 	addi	sp,sp,4
811399b0:	f800283a 	ret

811399b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
811399b4:	deffed04 	addi	sp,sp,-76
811399b8:	de00012e 	bgeu	sp,et,811399c0 <altera_avalon_jtag_uart_read+0xc>
811399bc:	003b68fa 	trap	3
811399c0:	dfc01215 	stw	ra,72(sp)
811399c4:	df001115 	stw	fp,68(sp)
811399c8:	df001104 	addi	fp,sp,68
811399cc:	e13ffc15 	stw	r4,-16(fp)
811399d0:	e17ffd15 	stw	r5,-12(fp)
811399d4:	e1bffe15 	stw	r6,-8(fp)
811399d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
811399dc:	e0bffd17 	ldw	r2,-12(fp)
811399e0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
811399e4:	e0bffc17 	ldw	r2,-16(fp)
811399e8:	10800a17 	ldw	r2,40(r2)
811399ec:	e0bff815 	stw	r2,-32(fp)
811399f0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811399f4:	e0bff90b 	ldhu	r2,-28(fp)
811399f8:	e0fffb04 	addi	r3,fp,-20
811399fc:	180d883a 	mov	r6,r3
81139a00:	100b883a 	mov	r5,r2
81139a04:	e13ff817 	ldw	r4,-32(fp)
81139a08:	11317080 	call	81131708 <OSSemPend>

  while (space > 0)
81139a0c:	00006106 	br	81139b94 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81139a10:	e0bffc17 	ldw	r2,-16(fp)
81139a14:	10800d17 	ldw	r2,52(r2)
81139a18:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81139a1c:	e0bffc17 	ldw	r2,-16(fp)
81139a20:	10800e17 	ldw	r2,56(r2)
81139a24:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81139a28:	e0fff317 	ldw	r3,-52(fp)
81139a2c:	e0bff417 	ldw	r2,-48(fp)
81139a30:	18800536 	bltu	r3,r2,81139a48 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81139a34:	e0fff317 	ldw	r3,-52(fp)
81139a38:	e0bff417 	ldw	r2,-48(fp)
81139a3c:	1885c83a 	sub	r2,r3,r2
81139a40:	e0bff115 	stw	r2,-60(fp)
81139a44:	00000406 	br	81139a58 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81139a48:	00c20004 	movi	r3,2048
81139a4c:	e0bff417 	ldw	r2,-48(fp)
81139a50:	1885c83a 	sub	r2,r3,r2
81139a54:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81139a58:	e0bff117 	ldw	r2,-60(fp)
81139a5c:	10001e26 	beq	r2,zero,81139ad8 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81139a60:	e0fffe17 	ldw	r3,-8(fp)
81139a64:	e0bff117 	ldw	r2,-60(fp)
81139a68:	1880022e 	bgeu	r3,r2,81139a74 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81139a6c:	e0bffe17 	ldw	r2,-8(fp)
81139a70:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81139a74:	e0bffc17 	ldw	r2,-16(fp)
81139a78:	10c01104 	addi	r3,r2,68
81139a7c:	e0bff417 	ldw	r2,-48(fp)
81139a80:	1885883a 	add	r2,r3,r2
81139a84:	e1bff117 	ldw	r6,-60(fp)
81139a88:	100b883a 	mov	r5,r2
81139a8c:	e13ff017 	ldw	r4,-64(fp)
81139a90:	11145f80 	call	811145f8 <memcpy>
      ptr   += n;
81139a94:	e0fff017 	ldw	r3,-64(fp)
81139a98:	e0bff117 	ldw	r2,-60(fp)
81139a9c:	1885883a 	add	r2,r3,r2
81139aa0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81139aa4:	e0fffe17 	ldw	r3,-8(fp)
81139aa8:	e0bff117 	ldw	r2,-60(fp)
81139aac:	1885c83a 	sub	r2,r3,r2
81139ab0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139ab4:	e0fff417 	ldw	r3,-48(fp)
81139ab8:	e0bff117 	ldw	r2,-60(fp)
81139abc:	1885883a 	add	r2,r3,r2
81139ac0:	10c1ffcc 	andi	r3,r2,2047
81139ac4:	e0bffc17 	ldw	r2,-16(fp)
81139ac8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81139acc:	e0bffe17 	ldw	r2,-8(fp)
81139ad0:	00bfcf16 	blt	zero,r2,81139a10 <__reset+0xfb119a10>
81139ad4:	00000106 	br	81139adc <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81139ad8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81139adc:	e0fff017 	ldw	r3,-64(fp)
81139ae0:	e0bffd17 	ldw	r2,-12(fp)
81139ae4:	18802e1e 	bne	r3,r2,81139ba0 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81139ae8:	e0bfff17 	ldw	r2,-4(fp)
81139aec:	1090000c 	andi	r2,r2,16384
81139af0:	10002d1e 	bne	r2,zero,81139ba8 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81139af4:	d0a07b03 	ldbu	r2,-32276(gp)
81139af8:	10803fcc 	andi	r2,r2,255
81139afc:	10800058 	cmpnei	r2,r2,1
81139b00:	1000161e 	bne	r2,zero,81139b5c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
81139b04:	e0bffc17 	ldw	r2,-16(fp)
81139b08:	10800c17 	ldw	r2,48(r2)
81139b0c:	e0bff215 	stw	r2,-56(fp)
81139b10:	00800144 	movi	r2,5
81139b14:	e0bff98d 	sth	r2,-26(fp)
81139b18:	00bfe0c4 	movi	r2,-125
81139b1c:	e0bffa05 	stb	r2,-24(fp)
81139b20:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139b24:	d0a07b03 	ldbu	r2,-32276(gp)
81139b28:	10803fcc 	andi	r2,r2,255
81139b2c:	10001526 	beq	r2,zero,81139b84 <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81139b30:	e0fff98b 	ldhu	r3,-26(fp)
81139b34:	e13ffa03 	ldbu	r4,-24(fp)
81139b38:	e17ffa8b 	ldhu	r5,-22(fp)
81139b3c:	e0bffb44 	addi	r2,fp,-19
81139b40:	d8800015 	stw	r2,0(sp)
81139b44:	280f883a 	mov	r7,r5
81139b48:	200d883a 	mov	r6,r4
81139b4c:	180b883a 	mov	r5,r3
81139b50:	e13ff217 	ldw	r4,-56(fp)
81139b54:	112da680 	call	8112da68 <OSFlagPend>
81139b58:	00000a06 	br	81139b84 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81139b5c:	0001883a 	nop
81139b60:	e0bffc17 	ldw	r2,-16(fp)
81139b64:	10c00d17 	ldw	r3,52(r2)
81139b68:	e0bff317 	ldw	r2,-52(fp)
81139b6c:	1880051e 	bne	r3,r2,81139b84 <altera_avalon_jtag_uart_read+0x1d0>
81139b70:	e0bffc17 	ldw	r2,-16(fp)
81139b74:	10c00917 	ldw	r3,36(r2)
81139b78:	e0bffc17 	ldw	r2,-16(fp)
81139b7c:	10800117 	ldw	r2,4(r2)
81139b80:	18bff736 	bltu	r3,r2,81139b60 <__reset+0xfb119b60>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81139b84:	e0bffc17 	ldw	r2,-16(fp)
81139b88:	10c00d17 	ldw	r3,52(r2)
81139b8c:	e0bff317 	ldw	r2,-52(fp)
81139b90:	18800726 	beq	r3,r2,81139bb0 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81139b94:	e0bffe17 	ldw	r2,-8(fp)
81139b98:	00bf9d16 	blt	zero,r2,81139a10 <__reset+0xfb119a10>
81139b9c:	00000506 	br	81139bb4 <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81139ba0:	0001883a 	nop
81139ba4:	00000306 	br	81139bb4 <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81139ba8:	0001883a 	nop
81139bac:	00000106 	br	81139bb4 <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81139bb0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81139bb4:	e0bffc17 	ldw	r2,-16(fp)
81139bb8:	10800a17 	ldw	r2,40(r2)
81139bbc:	1009883a 	mov	r4,r2
81139bc0:	1131a900 	call	81131a90 <OSSemPost>

  if (ptr != buffer)
81139bc4:	e0fff017 	ldw	r3,-64(fp)
81139bc8:	e0bffd17 	ldw	r2,-12(fp)
81139bcc:	18801826 	beq	r3,r2,81139c30 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139bd0:	0005303a 	rdctl	r2,status
81139bd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139bd8:	e0fff717 	ldw	r3,-36(fp)
81139bdc:	00bfff84 	movi	r2,-2
81139be0:	1884703a 	and	r2,r3,r2
81139be4:	1001703a 	wrctl	status,r2
  
  return context;
81139be8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81139bec:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81139bf0:	e0bffc17 	ldw	r2,-16(fp)
81139bf4:	10800817 	ldw	r2,32(r2)
81139bf8:	10c00054 	ori	r3,r2,1
81139bfc:	e0bffc17 	ldw	r2,-16(fp)
81139c00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81139c04:	e0bffc17 	ldw	r2,-16(fp)
81139c08:	10800017 	ldw	r2,0(r2)
81139c0c:	10800104 	addi	r2,r2,4
81139c10:	1007883a 	mov	r3,r2
81139c14:	e0bffc17 	ldw	r2,-16(fp)
81139c18:	10800817 	ldw	r2,32(r2)
81139c1c:	18800035 	stwio	r2,0(r3)
81139c20:	e0bff617 	ldw	r2,-40(fp)
81139c24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139c28:	e0bff517 	ldw	r2,-44(fp)
81139c2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81139c30:	e0fff017 	ldw	r3,-64(fp)
81139c34:	e0bffd17 	ldw	r2,-12(fp)
81139c38:	18800426 	beq	r3,r2,81139c4c <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
81139c3c:	e0fff017 	ldw	r3,-64(fp)
81139c40:	e0bffd17 	ldw	r2,-12(fp)
81139c44:	1885c83a 	sub	r2,r3,r2
81139c48:	00000606 	br	81139c64 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
81139c4c:	e0bfff17 	ldw	r2,-4(fp)
81139c50:	1090000c 	andi	r2,r2,16384
81139c54:	10000226 	beq	r2,zero,81139c60 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81139c58:	00bffd44 	movi	r2,-11
81139c5c:	00000106 	br	81139c64 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81139c60:	00bffec4 	movi	r2,-5
}
81139c64:	e037883a 	mov	sp,fp
81139c68:	dfc00117 	ldw	ra,4(sp)
81139c6c:	df000017 	ldw	fp,0(sp)
81139c70:	dec00204 	addi	sp,sp,8
81139c74:	f800283a 	ret

81139c78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81139c78:	deffed04 	addi	sp,sp,-76
81139c7c:	de00012e 	bgeu	sp,et,81139c84 <altera_avalon_jtag_uart_write+0xc>
81139c80:	003b68fa 	trap	3
81139c84:	dfc01215 	stw	ra,72(sp)
81139c88:	df001115 	stw	fp,68(sp)
81139c8c:	df001104 	addi	fp,sp,68
81139c90:	e13ffc15 	stw	r4,-16(fp)
81139c94:	e17ffd15 	stw	r5,-12(fp)
81139c98:	e1bffe15 	stw	r6,-8(fp)
81139c9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81139ca0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81139ca4:	e0bffd17 	ldw	r2,-12(fp)
81139ca8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81139cac:	e0bffc17 	ldw	r2,-16(fp)
81139cb0:	10800b17 	ldw	r2,44(r2)
81139cb4:	e0bff815 	stw	r2,-32(fp)
81139cb8:	e03ff90d 	sth	zero,-28(fp)
81139cbc:	e0bff90b 	ldhu	r2,-28(fp)
81139cc0:	e0fffb44 	addi	r3,fp,-19
81139cc4:	180d883a 	mov	r6,r3
81139cc8:	100b883a 	mov	r5,r2
81139ccc:	e13ff817 	ldw	r4,-32(fp)
81139cd0:	11317080 	call	81131708 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81139cd4:	00003706 	br	81139db4 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81139cd8:	e0bffc17 	ldw	r2,-16(fp)
81139cdc:	10800f17 	ldw	r2,60(r2)
81139ce0:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
81139ce4:	e0bffc17 	ldw	r2,-16(fp)
81139ce8:	10801017 	ldw	r2,64(r2)
81139cec:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
81139cf0:	e0fff417 	ldw	r3,-48(fp)
81139cf4:	e0bff017 	ldw	r2,-64(fp)
81139cf8:	1880062e 	bgeu	r3,r2,81139d14 <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81139cfc:	e0fff017 	ldw	r3,-64(fp)
81139d00:	e0bff417 	ldw	r2,-48(fp)
81139d04:	1885c83a 	sub	r2,r3,r2
81139d08:	10bfffc4 	addi	r2,r2,-1
81139d0c:	e0bff115 	stw	r2,-60(fp)
81139d10:	00000b06 	br	81139d40 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
81139d14:	e0bff017 	ldw	r2,-64(fp)
81139d18:	10000526 	beq	r2,zero,81139d30 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81139d1c:	00c20004 	movi	r3,2048
81139d20:	e0bff417 	ldw	r2,-48(fp)
81139d24:	1885c83a 	sub	r2,r3,r2
81139d28:	e0bff115 	stw	r2,-60(fp)
81139d2c:	00000406 	br	81139d40 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81139d30:	00c1ffc4 	movi	r3,2047
81139d34:	e0bff417 	ldw	r2,-48(fp)
81139d38:	1885c83a 	sub	r2,r3,r2
81139d3c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81139d40:	e0bff117 	ldw	r2,-60(fp)
81139d44:	10001e26 	beq	r2,zero,81139dc0 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
81139d48:	e0fffe17 	ldw	r3,-8(fp)
81139d4c:	e0bff117 	ldw	r2,-60(fp)
81139d50:	1880022e 	bgeu	r3,r2,81139d5c <altera_avalon_jtag_uart_write+0xe4>
        n = count;
81139d54:	e0bffe17 	ldw	r2,-8(fp)
81139d58:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81139d5c:	e0bffc17 	ldw	r2,-16(fp)
81139d60:	10c21104 	addi	r3,r2,2116
81139d64:	e0bff417 	ldw	r2,-48(fp)
81139d68:	1885883a 	add	r2,r3,r2
81139d6c:	e1bff117 	ldw	r6,-60(fp)
81139d70:	e17ffd17 	ldw	r5,-12(fp)
81139d74:	1009883a 	mov	r4,r2
81139d78:	11145f80 	call	811145f8 <memcpy>
      ptr   += n;
81139d7c:	e0fffd17 	ldw	r3,-12(fp)
81139d80:	e0bff117 	ldw	r2,-60(fp)
81139d84:	1885883a 	add	r2,r3,r2
81139d88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81139d8c:	e0fffe17 	ldw	r3,-8(fp)
81139d90:	e0bff117 	ldw	r2,-60(fp)
81139d94:	1885c83a 	sub	r2,r3,r2
81139d98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139d9c:	e0fff417 	ldw	r3,-48(fp)
81139da0:	e0bff117 	ldw	r2,-60(fp)
81139da4:	1885883a 	add	r2,r3,r2
81139da8:	10c1ffcc 	andi	r3,r2,2047
81139dac:	e0bffc17 	ldw	r2,-16(fp)
81139db0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81139db4:	e0bffe17 	ldw	r2,-8(fp)
81139db8:	00bfc716 	blt	zero,r2,81139cd8 <__reset+0xfb119cd8>
81139dbc:	00000106 	br	81139dc4 <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81139dc0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139dc4:	0005303a 	rdctl	r2,status
81139dc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139dcc:	e0fff717 	ldw	r3,-36(fp)
81139dd0:	00bfff84 	movi	r2,-2
81139dd4:	1884703a 	and	r2,r3,r2
81139dd8:	1001703a 	wrctl	status,r2
  
  return context;
81139ddc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81139de0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81139de4:	e0bffc17 	ldw	r2,-16(fp)
81139de8:	10800817 	ldw	r2,32(r2)
81139dec:	10c00094 	ori	r3,r2,2
81139df0:	e0bffc17 	ldw	r2,-16(fp)
81139df4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81139df8:	e0bffc17 	ldw	r2,-16(fp)
81139dfc:	10800017 	ldw	r2,0(r2)
81139e00:	10800104 	addi	r2,r2,4
81139e04:	1007883a 	mov	r3,r2
81139e08:	e0bffc17 	ldw	r2,-16(fp)
81139e0c:	10800817 	ldw	r2,32(r2)
81139e10:	18800035 	stwio	r2,0(r3)
81139e14:	e0bff617 	ldw	r2,-40(fp)
81139e18:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139e1c:	e0bff317 	ldw	r2,-52(fp)
81139e20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81139e24:	e0bffe17 	ldw	r2,-8(fp)
81139e28:	00802a0e 	bge	zero,r2,81139ed4 <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81139e2c:	e0bfff17 	ldw	r2,-4(fp)
81139e30:	1090000c 	andi	r2,r2,16384
81139e34:	10002a1e 	bne	r2,zero,81139ee0 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
81139e38:	d0a07b03 	ldbu	r2,-32276(gp)
81139e3c:	10803fcc 	andi	r2,r2,255
81139e40:	10800058 	cmpnei	r2,r2,1
81139e44:	1000161e 	bne	r2,zero,81139ea0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
81139e48:	e0bffc17 	ldw	r2,-16(fp)
81139e4c:	10800c17 	ldw	r2,48(r2)
81139e50:	e0bff515 	stw	r2,-44(fp)
81139e54:	00800184 	movi	r2,6
81139e58:	e0bff98d 	sth	r2,-26(fp)
81139e5c:	00bfe0c4 	movi	r2,-125
81139e60:	e0bffa05 	stb	r2,-24(fp)
81139e64:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139e68:	d0a07b03 	ldbu	r2,-32276(gp)
81139e6c:	10803fcc 	andi	r2,r2,255
81139e70:	10001526 	beq	r2,zero,81139ec8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81139e74:	e0fff98b 	ldhu	r3,-26(fp)
81139e78:	e13ffa03 	ldbu	r4,-24(fp)
81139e7c:	e17ffa8b 	ldhu	r5,-22(fp)
81139e80:	e0bffb04 	addi	r2,fp,-20
81139e84:	d8800015 	stw	r2,0(sp)
81139e88:	280f883a 	mov	r7,r5
81139e8c:	200d883a 	mov	r6,r4
81139e90:	180b883a 	mov	r5,r3
81139e94:	e13ff517 	ldw	r4,-44(fp)
81139e98:	112da680 	call	8112da68 <OSFlagPend>
81139e9c:	00000a06 	br	81139ec8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81139ea0:	0001883a 	nop
81139ea4:	e0bffc17 	ldw	r2,-16(fp)
81139ea8:	10c01017 	ldw	r3,64(r2)
81139eac:	e0bff017 	ldw	r2,-64(fp)
81139eb0:	1880051e 	bne	r3,r2,81139ec8 <altera_avalon_jtag_uart_write+0x250>
81139eb4:	e0bffc17 	ldw	r2,-16(fp)
81139eb8:	10c00917 	ldw	r3,36(r2)
81139ebc:	e0bffc17 	ldw	r2,-16(fp)
81139ec0:	10800117 	ldw	r2,4(r2)
81139ec4:	18bff736 	bltu	r3,r2,81139ea4 <__reset+0xfb119ea4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81139ec8:	e0bffc17 	ldw	r2,-16(fp)
81139ecc:	10800917 	ldw	r2,36(r2)
81139ed0:	1000051e 	bne	r2,zero,81139ee8 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
81139ed4:	e0bffe17 	ldw	r2,-8(fp)
81139ed8:	00bfb616 	blt	zero,r2,81139db4 <__reset+0xfb119db4>
81139edc:	00000306 	br	81139eec <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81139ee0:	0001883a 	nop
81139ee4:	00000106 	br	81139eec <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81139ee8:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81139eec:	e0bffc17 	ldw	r2,-16(fp)
81139ef0:	10800b17 	ldw	r2,44(r2)
81139ef4:	1009883a 	mov	r4,r2
81139ef8:	1131a900 	call	81131a90 <OSSemPost>

  if (ptr != start)
81139efc:	e0fffd17 	ldw	r3,-12(fp)
81139f00:	e0bff217 	ldw	r2,-56(fp)
81139f04:	18800426 	beq	r3,r2,81139f18 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81139f08:	e0fffd17 	ldw	r3,-12(fp)
81139f0c:	e0bff217 	ldw	r2,-56(fp)
81139f10:	1885c83a 	sub	r2,r3,r2
81139f14:	00000606 	br	81139f30 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81139f18:	e0bfff17 	ldw	r2,-4(fp)
81139f1c:	1090000c 	andi	r2,r2,16384
81139f20:	10000226 	beq	r2,zero,81139f2c <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
81139f24:	00bffd44 	movi	r2,-11
81139f28:	00000106 	br	81139f30 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81139f2c:	00bffec4 	movi	r2,-5
}
81139f30:	e037883a 	mov	sp,fp
81139f34:	dfc00117 	ldw	ra,4(sp)
81139f38:	df000017 	ldw	fp,0(sp)
81139f3c:	dec00204 	addi	sp,sp,8
81139f40:	f800283a 	ret

81139f44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81139f44:	defffa04 	addi	sp,sp,-24
81139f48:	de00012e 	bgeu	sp,et,81139f50 <alt_avalon_timer_sc_irq+0xc>
81139f4c:	003b68fa 	trap	3
81139f50:	dfc00515 	stw	ra,20(sp)
81139f54:	df000415 	stw	fp,16(sp)
81139f58:	df000404 	addi	fp,sp,16
81139f5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81139f60:	0007883a 	mov	r3,zero
81139f64:	e0bfff17 	ldw	r2,-4(fp)
81139f68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81139f6c:	e0bfff17 	ldw	r2,-4(fp)
81139f70:	10800104 	addi	r2,r2,4
81139f74:	10800037 	ldwio	r2,0(r2)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
81139f78:	1129e800 	call	81129e80 <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139f7c:	0005303a 	rdctl	r2,status
81139f80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139f84:	e0fffd17 	ldw	r3,-12(fp)
81139f88:	00bfff84 	movi	r2,-2
81139f8c:	1884703a 	and	r2,r3,r2
81139f90:	1001703a 	wrctl	status,r2
  
  return context;
81139f94:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81139f98:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81139f9c:	112a7700 	call	8112a770 <alt_tick>
81139fa0:	e0bffc17 	ldw	r2,-16(fp)
81139fa4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139fa8:	e0bffe17 	ldw	r2,-8(fp)
81139fac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81139fb0:	0001883a 	nop
81139fb4:	e037883a 	mov	sp,fp
81139fb8:	dfc00117 	ldw	ra,4(sp)
81139fbc:	df000017 	ldw	fp,0(sp)
81139fc0:	dec00204 	addi	sp,sp,8
81139fc4:	f800283a 	ret

81139fc8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81139fc8:	defff804 	addi	sp,sp,-32
81139fcc:	de00012e 	bgeu	sp,et,81139fd4 <alt_avalon_timer_sc_init+0xc>
81139fd0:	003b68fa 	trap	3
81139fd4:	dfc00715 	stw	ra,28(sp)
81139fd8:	df000615 	stw	fp,24(sp)
81139fdc:	df000604 	addi	fp,sp,24
81139fe0:	e13ffc15 	stw	r4,-16(fp)
81139fe4:	e17ffd15 	stw	r5,-12(fp)
81139fe8:	e1bffe15 	stw	r6,-8(fp)
81139fec:	e1ffff15 	stw	r7,-4(fp)
81139ff0:	e0bfff17 	ldw	r2,-4(fp)
81139ff4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81139ff8:	d0a07217 	ldw	r2,-32312(gp)
81139ffc:	1000021e 	bne	r2,zero,8113a008 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
8113a000:	e0bffb17 	ldw	r2,-20(fp)
8113a004:	d0a07215 	stw	r2,-32312(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8113a008:	e0bffc17 	ldw	r2,-16(fp)
8113a00c:	10800104 	addi	r2,r2,4
8113a010:	00c001c4 	movi	r3,7
8113a014:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8113a018:	d8000015 	stw	zero,0(sp)
8113a01c:	e1fffc17 	ldw	r7,-16(fp)
8113a020:	01a04534 	movhi	r6,33044
8113a024:	31a7d104 	addi	r6,r6,-24764
8113a028:	e17ffe17 	ldw	r5,-8(fp)
8113a02c:	e13ffd17 	ldw	r4,-12(fp)
8113a030:	113d29c0 	call	8113d29c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8113a034:	0001883a 	nop
8113a038:	e037883a 	mov	sp,fp
8113a03c:	dfc00117 	ldw	ra,4(sp)
8113a040:	df000017 	ldw	fp,0(sp)
8113a044:	dec00204 	addi	sp,sp,8
8113a048:	f800283a 	ret

8113a04c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8113a04c:	defffa04 	addi	sp,sp,-24
8113a050:	de00012e 	bgeu	sp,et,8113a058 <altera_avalon_uart_read_fd+0xc>
8113a054:	003b68fa 	trap	3
8113a058:	dfc00515 	stw	ra,20(sp)
8113a05c:	df000415 	stw	fp,16(sp)
8113a060:	df000404 	addi	fp,sp,16
8113a064:	e13ffd15 	stw	r4,-12(fp)
8113a068:	e17ffe15 	stw	r5,-8(fp)
8113a06c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a070:	e0bffd17 	ldw	r2,-12(fp)
8113a074:	10800017 	ldw	r2,0(r2)
8113a078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8113a07c:	e0bffc17 	ldw	r2,-16(fp)
8113a080:	10c00a04 	addi	r3,r2,40
8113a084:	e0bffd17 	ldw	r2,-12(fp)
8113a088:	10800217 	ldw	r2,8(r2)
8113a08c:	100f883a 	mov	r7,r2
8113a090:	e1bfff17 	ldw	r6,-4(fp)
8113a094:	e17ffe17 	ldw	r5,-8(fp)
8113a098:	1809883a 	mov	r4,r3
8113a09c:	113a70c0 	call	8113a70c <altera_avalon_uart_read>
      fd->fd_flags);
}
8113a0a0:	e037883a 	mov	sp,fp
8113a0a4:	dfc00117 	ldw	ra,4(sp)
8113a0a8:	df000017 	ldw	fp,0(sp)
8113a0ac:	dec00204 	addi	sp,sp,8
8113a0b0:	f800283a 	ret

8113a0b4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8113a0b4:	defffa04 	addi	sp,sp,-24
8113a0b8:	de00012e 	bgeu	sp,et,8113a0c0 <altera_avalon_uart_write_fd+0xc>
8113a0bc:	003b68fa 	trap	3
8113a0c0:	dfc00515 	stw	ra,20(sp)
8113a0c4:	df000415 	stw	fp,16(sp)
8113a0c8:	df000404 	addi	fp,sp,16
8113a0cc:	e13ffd15 	stw	r4,-12(fp)
8113a0d0:	e17ffe15 	stw	r5,-8(fp)
8113a0d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a0d8:	e0bffd17 	ldw	r2,-12(fp)
8113a0dc:	10800017 	ldw	r2,0(r2)
8113a0e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8113a0e4:	e0bffc17 	ldw	r2,-16(fp)
8113a0e8:	10c00a04 	addi	r3,r2,40
8113a0ec:	e0bffd17 	ldw	r2,-12(fp)
8113a0f0:	10800217 	ldw	r2,8(r2)
8113a0f4:	100f883a 	mov	r7,r2
8113a0f8:	e1bfff17 	ldw	r6,-4(fp)
8113a0fc:	e17ffe17 	ldw	r5,-8(fp)
8113a100:	1809883a 	mov	r4,r3
8113a104:	113a9c00 	call	8113a9c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
8113a108:	e037883a 	mov	sp,fp
8113a10c:	dfc00117 	ldw	ra,4(sp)
8113a110:	df000017 	ldw	fp,0(sp)
8113a114:	dec00204 	addi	sp,sp,8
8113a118:	f800283a 	ret

8113a11c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8113a11c:	defffc04 	addi	sp,sp,-16
8113a120:	de00012e 	bgeu	sp,et,8113a128 <altera_avalon_uart_close_fd+0xc>
8113a124:	003b68fa 	trap	3
8113a128:	dfc00315 	stw	ra,12(sp)
8113a12c:	df000215 	stw	fp,8(sp)
8113a130:	df000204 	addi	fp,sp,8
8113a134:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a138:	e0bfff17 	ldw	r2,-4(fp)
8113a13c:	10800017 	ldw	r2,0(r2)
8113a140:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8113a144:	e0bffe17 	ldw	r2,-8(fp)
8113a148:	10c00a04 	addi	r3,r2,40
8113a14c:	e0bfff17 	ldw	r2,-4(fp)
8113a150:	10800217 	ldw	r2,8(r2)
8113a154:	100b883a 	mov	r5,r2
8113a158:	1809883a 	mov	r4,r3
8113a15c:	113a66c0 	call	8113a66c <altera_avalon_uart_close>
}
8113a160:	e037883a 	mov	sp,fp
8113a164:	dfc00117 	ldw	ra,4(sp)
8113a168:	df000017 	ldw	fp,0(sp)
8113a16c:	dec00204 	addi	sp,sp,8
8113a170:	f800283a 	ret

8113a174 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8113a174:	defff304 	addi	sp,sp,-52
8113a178:	de00012e 	bgeu	sp,et,8113a180 <altera_avalon_uart_init+0xc>
8113a17c:	003b68fa 	trap	3
8113a180:	dfc00c15 	stw	ra,48(sp)
8113a184:	df000b15 	stw	fp,44(sp)
8113a188:	df000b04 	addi	fp,sp,44
8113a18c:	e13ffd15 	stw	r4,-12(fp)
8113a190:	e17ffe15 	stw	r5,-8(fp)
8113a194:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8113a198:	e0bffd17 	ldw	r2,-12(fp)
8113a19c:	10800017 	ldw	r2,0(r2)
8113a1a0:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a1a4:	e0bffd17 	ldw	r2,-12(fp)
8113a1a8:	10800704 	addi	r2,r2,28
8113a1ac:	e0bffa15 	stw	r2,-24(fp)
8113a1b0:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8113a1b4:	e0bffb0b 	ldhu	r2,-20(fp)
8113a1b8:	e0fffc84 	addi	r3,fp,-14
8113a1bc:	180b883a 	mov	r5,r3
8113a1c0:	1009883a 	mov	r4,r2
8113a1c4:	112d4840 	call	8112d484 <OSFlagCreate>
8113a1c8:	1007883a 	mov	r3,r2
8113a1cc:	e0bffa17 	ldw	r2,-24(fp)
8113a1d0:	10c00015 	stw	r3,0(r2)
  return err;
8113a1d4:	e0bffc83 	ldbu	r2,-14(fp)
8113a1d8:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8113a1dc:	1000241e 	bne	r2,zero,8113a270 <altera_avalon_uart_init+0xfc>
8113a1e0:	e0bffd17 	ldw	r2,-12(fp)
8113a1e4:	10800804 	addi	r2,r2,32
8113a1e8:	e0bff715 	stw	r2,-36(fp)
8113a1ec:	00800044 	movi	r2,1
8113a1f0:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a1f4:	e0bffb8b 	ldhu	r2,-18(fp)
8113a1f8:	1009883a 	mov	r4,r2
8113a1fc:	11313e00 	call	811313e0 <OSSemCreate>
8113a200:	1007883a 	mov	r3,r2
8113a204:	e0bff717 	ldw	r2,-36(fp)
8113a208:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a20c:	e0bff717 	ldw	r2,-36(fp)
8113a210:	10800017 	ldw	r2,0(r2)
8113a214:	10000226 	beq	r2,zero,8113a220 <altera_avalon_uart_init+0xac>
8113a218:	0005883a 	mov	r2,zero
8113a21c:	00000106 	br	8113a224 <altera_avalon_uart_init+0xb0>
8113a220:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a224:	1000121e 	bne	r2,zero,8113a270 <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
8113a228:	e0bffd17 	ldw	r2,-12(fp)
8113a22c:	10800904 	addi	r2,r2,36
8113a230:	e0bff815 	stw	r2,-32(fp)
8113a234:	00800044 	movi	r2,1
8113a238:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a23c:	e0bffc0b 	ldhu	r2,-16(fp)
8113a240:	1009883a 	mov	r4,r2
8113a244:	11313e00 	call	811313e0 <OSSemCreate>
8113a248:	1007883a 	mov	r3,r2
8113a24c:	e0bff817 	ldw	r2,-32(fp)
8113a250:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a254:	e0bff817 	ldw	r2,-32(fp)
8113a258:	10800017 	ldw	r2,0(r2)
8113a25c:	10000226 	beq	r2,zero,8113a268 <altera_avalon_uart_init+0xf4>
8113a260:	0005883a 	mov	r2,zero
8113a264:	00000106 	br	8113a26c <altera_avalon_uart_init+0xf8>
8113a268:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8113a26c:	10000226 	beq	r2,zero,8113a278 <altera_avalon_uart_init+0x104>
8113a270:	00800044 	movi	r2,1
8113a274:	00000106 	br	8113a27c <altera_avalon_uart_init+0x108>
8113a278:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a27c:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8113a280:	e0bff917 	ldw	r2,-28(fp)
8113a284:	10000f1e 	bne	r2,zero,8113a2c4 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8113a288:	e0bffd17 	ldw	r2,-12(fp)
8113a28c:	00c32004 	movi	r3,3200
8113a290:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8113a294:	e0bff617 	ldw	r2,-40(fp)
8113a298:	10800304 	addi	r2,r2,12
8113a29c:	e0fffd17 	ldw	r3,-12(fp)
8113a2a0:	18c00117 	ldw	r3,4(r3)
8113a2a4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8113a2a8:	d8000015 	stw	zero,0(sp)
8113a2ac:	e1fffd17 	ldw	r7,-12(fp)
8113a2b0:	01a04534 	movhi	r6,33044
8113a2b4:	31a8b704 	addi	r6,r6,-23844
8113a2b8:	e17fff17 	ldw	r5,-4(fp)
8113a2bc:	e13ffe17 	ldw	r4,-8(fp)
8113a2c0:	113d29c0 	call	8113d29c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8113a2c4:	0001883a 	nop
8113a2c8:	e037883a 	mov	sp,fp
8113a2cc:	dfc00117 	ldw	ra,4(sp)
8113a2d0:	df000017 	ldw	fp,0(sp)
8113a2d4:	dec00204 	addi	sp,sp,8
8113a2d8:	f800283a 	ret

8113a2dc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8113a2dc:	defffa04 	addi	sp,sp,-24
8113a2e0:	de00012e 	bgeu	sp,et,8113a2e8 <altera_avalon_uart_irq+0xc>
8113a2e4:	003b68fa 	trap	3
8113a2e8:	dfc00515 	stw	ra,20(sp)
8113a2ec:	df000415 	stw	fp,16(sp)
8113a2f0:	df000404 	addi	fp,sp,16
8113a2f4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8113a2f8:	e0bfff17 	ldw	r2,-4(fp)
8113a2fc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8113a300:	e0bffc17 	ldw	r2,-16(fp)
8113a304:	10800017 	ldw	r2,0(r2)
8113a308:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8113a30c:	e0bffd17 	ldw	r2,-12(fp)
8113a310:	10800204 	addi	r2,r2,8
8113a314:	10800037 	ldwio	r2,0(r2)
8113a318:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8113a31c:	e0bffd17 	ldw	r2,-12(fp)
8113a320:	10800204 	addi	r2,r2,8
8113a324:	0007883a 	mov	r3,zero
8113a328:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8113a32c:	e0bffd17 	ldw	r2,-12(fp)
8113a330:	10800204 	addi	r2,r2,8
8113a334:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8113a338:	e0bffe17 	ldw	r2,-8(fp)
8113a33c:	1080200c 	andi	r2,r2,128
8113a340:	10000326 	beq	r2,zero,8113a350 <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
8113a344:	e17ffe17 	ldw	r5,-8(fp)
8113a348:	e13ffc17 	ldw	r4,-16(fp)
8113a34c:	113a3800 	call	8113a380 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8113a350:	e0bffe17 	ldw	r2,-8(fp)
8113a354:	1081100c 	andi	r2,r2,1088
8113a358:	10000326 	beq	r2,zero,8113a368 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8113a35c:	e17ffe17 	ldw	r5,-8(fp)
8113a360:	e13ffc17 	ldw	r4,-16(fp)
8113a364:	113a4c00 	call	8113a4c0 <altera_avalon_uart_txirq>
  }
  

}
8113a368:	0001883a 	nop
8113a36c:	e037883a 	mov	sp,fp
8113a370:	dfc00117 	ldw	ra,4(sp)
8113a374:	df000017 	ldw	fp,0(sp)
8113a378:	dec00204 	addi	sp,sp,8
8113a37c:	f800283a 	ret

8113a380 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113a380:	defff904 	addi	sp,sp,-28
8113a384:	de00012e 	bgeu	sp,et,8113a38c <altera_avalon_uart_rxirq+0xc>
8113a388:	003b68fa 	trap	3
8113a38c:	dfc00615 	stw	ra,24(sp)
8113a390:	df000515 	stw	fp,20(sp)
8113a394:	df000504 	addi	fp,sp,20
8113a398:	e13ffe15 	stw	r4,-8(fp)
8113a39c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8113a3a0:	e0bfff17 	ldw	r2,-4(fp)
8113a3a4:	108000cc 	andi	r2,r2,3
8113a3a8:	10003f1e 	bne	r2,zero,8113a4a8 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8113a3ac:	e0bffe17 	ldw	r2,-8(fp)
8113a3b0:	10c00317 	ldw	r3,12(r2)
8113a3b4:	e0bffe17 	ldw	r2,-8(fp)
8113a3b8:	10800217 	ldw	r2,8(r2)
8113a3bc:	1880121e 	bne	r3,r2,8113a408 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
8113a3c0:	e0bffe17 	ldw	r2,-8(fp)
8113a3c4:	10800717 	ldw	r2,28(r2)
8113a3c8:	e0bffc15 	stw	r2,-16(fp)
8113a3cc:	00800044 	movi	r2,1
8113a3d0:	e0bffd0d 	sth	r2,-12(fp)
8113a3d4:	00800044 	movi	r2,1
8113a3d8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113a3dc:	d0a07b03 	ldbu	r2,-32276(gp)
8113a3e0:	10803fcc 	andi	r2,r2,255
8113a3e4:	10000826 	beq	r2,zero,8113a408 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
8113a3e8:	e0bffd0b 	ldhu	r2,-12(fp)
8113a3ec:	e0fffd83 	ldbu	r3,-10(fp)
8113a3f0:	e13ffdc4 	addi	r4,fp,-9
8113a3f4:	200f883a 	mov	r7,r4
8113a3f8:	180d883a 	mov	r6,r3
8113a3fc:	100b883a 	mov	r5,r2
8113a400:	e13ffc17 	ldw	r4,-16(fp)
8113a404:	112e0900 	call	8112e090 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113a408:	e0bffe17 	ldw	r2,-8(fp)
8113a40c:	10800317 	ldw	r2,12(r2)
8113a410:	10800044 	addi	r2,r2,1
8113a414:	10800fcc 	andi	r2,r2,63
8113a418:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8113a41c:	e0bffe17 	ldw	r2,-8(fp)
8113a420:	10800317 	ldw	r2,12(r2)
8113a424:	e0fffe17 	ldw	r3,-8(fp)
8113a428:	18c00017 	ldw	r3,0(r3)
8113a42c:	18c00037 	ldwio	r3,0(r3)
8113a430:	1809883a 	mov	r4,r3
8113a434:	e0fffe17 	ldw	r3,-8(fp)
8113a438:	1885883a 	add	r2,r3,r2
8113a43c:	10800a04 	addi	r2,r2,40
8113a440:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8113a444:	e0bffe17 	ldw	r2,-8(fp)
8113a448:	e0fffb17 	ldw	r3,-20(fp)
8113a44c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113a450:	e0bffe17 	ldw	r2,-8(fp)
8113a454:	10800317 	ldw	r2,12(r2)
8113a458:	10800044 	addi	r2,r2,1
8113a45c:	10800fcc 	andi	r2,r2,63
8113a460:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8113a464:	e0bffe17 	ldw	r2,-8(fp)
8113a468:	10c00217 	ldw	r3,8(r2)
8113a46c:	e0bffb17 	ldw	r2,-20(fp)
8113a470:	18800e1e 	bne	r3,r2,8113a4ac <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113a474:	e0bffe17 	ldw	r2,-8(fp)
8113a478:	10c00117 	ldw	r3,4(r2)
8113a47c:	00bfdfc4 	movi	r2,-129
8113a480:	1886703a 	and	r3,r3,r2
8113a484:	e0bffe17 	ldw	r2,-8(fp)
8113a488:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8113a48c:	e0bffe17 	ldw	r2,-8(fp)
8113a490:	10800017 	ldw	r2,0(r2)
8113a494:	10800304 	addi	r2,r2,12
8113a498:	e0fffe17 	ldw	r3,-8(fp)
8113a49c:	18c00117 	ldw	r3,4(r3)
8113a4a0:	10c00035 	stwio	r3,0(r2)
8113a4a4:	00000106 	br	8113a4ac <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8113a4a8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8113a4ac:	e037883a 	mov	sp,fp
8113a4b0:	dfc00117 	ldw	ra,4(sp)
8113a4b4:	df000017 	ldw	fp,0(sp)
8113a4b8:	dec00204 	addi	sp,sp,8
8113a4bc:	f800283a 	ret

8113a4c0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113a4c0:	defffa04 	addi	sp,sp,-24
8113a4c4:	de00012e 	bgeu	sp,et,8113a4cc <altera_avalon_uart_txirq+0xc>
8113a4c8:	003b68fa 	trap	3
8113a4cc:	dfc00515 	stw	ra,20(sp)
8113a4d0:	df000415 	stw	fp,16(sp)
8113a4d4:	df000404 	addi	fp,sp,16
8113a4d8:	e13ffe15 	stw	r4,-8(fp)
8113a4dc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8113a4e0:	e0bffe17 	ldw	r2,-8(fp)
8113a4e4:	10c00417 	ldw	r3,16(r2)
8113a4e8:	e0bffe17 	ldw	r2,-8(fp)
8113a4ec:	10800517 	ldw	r2,20(r2)
8113a4f0:	18804726 	beq	r3,r2,8113a610 <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8113a4f4:	e0bffe17 	ldw	r2,-8(fp)
8113a4f8:	10800617 	ldw	r2,24(r2)
8113a4fc:	1080008c 	andi	r2,r2,2
8113a500:	10000326 	beq	r2,zero,8113a510 <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8113a504:	e0bfff17 	ldw	r2,-4(fp)
8113a508:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8113a50c:	10003226 	beq	r2,zero,8113a5d8 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8113a510:	e0bffe17 	ldw	r2,-8(fp)
8113a514:	10c00417 	ldw	r3,16(r2)
8113a518:	e0bffe17 	ldw	r2,-8(fp)
8113a51c:	10800517 	ldw	r2,20(r2)
8113a520:	10800044 	addi	r2,r2,1
8113a524:	10800fcc 	andi	r2,r2,63
8113a528:	1880121e 	bne	r3,r2,8113a574 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
8113a52c:	e0bffe17 	ldw	r2,-8(fp)
8113a530:	10800717 	ldw	r2,28(r2)
8113a534:	e0bffc15 	stw	r2,-16(fp)
8113a538:	00800084 	movi	r2,2
8113a53c:	e0bffd0d 	sth	r2,-12(fp)
8113a540:	00800044 	movi	r2,1
8113a544:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113a548:	d0a07b03 	ldbu	r2,-32276(gp)
8113a54c:	10803fcc 	andi	r2,r2,255
8113a550:	10000826 	beq	r2,zero,8113a574 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
8113a554:	e0bffd0b 	ldhu	r2,-12(fp)
8113a558:	e0fffd83 	ldbu	r3,-10(fp)
8113a55c:	e13ffdc4 	addi	r4,fp,-9
8113a560:	200f883a 	mov	r7,r4
8113a564:	180d883a 	mov	r6,r3
8113a568:	100b883a 	mov	r5,r2
8113a56c:	e13ffc17 	ldw	r4,-16(fp)
8113a570:	112e0900 	call	8112e090 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8113a574:	e0bffe17 	ldw	r2,-8(fp)
8113a578:	10800017 	ldw	r2,0(r2)
8113a57c:	10800104 	addi	r2,r2,4
8113a580:	e0fffe17 	ldw	r3,-8(fp)
8113a584:	18c00417 	ldw	r3,16(r3)
8113a588:	e13ffe17 	ldw	r4,-8(fp)
8113a58c:	20c7883a 	add	r3,r4,r3
8113a590:	18c01a04 	addi	r3,r3,104
8113a594:	18c00003 	ldbu	r3,0(r3)
8113a598:	18c03fcc 	andi	r3,r3,255
8113a59c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8113a5a0:	e0bffe17 	ldw	r2,-8(fp)
8113a5a4:	10800417 	ldw	r2,16(r2)
8113a5a8:	10800044 	addi	r2,r2,1
8113a5ac:	e0fffe17 	ldw	r3,-8(fp)
8113a5b0:	18800415 	stw	r2,16(r3)
8113a5b4:	10c00fcc 	andi	r3,r2,63
8113a5b8:	e0bffe17 	ldw	r2,-8(fp)
8113a5bc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113a5c0:	e0bffe17 	ldw	r2,-8(fp)
8113a5c4:	10800117 	ldw	r2,4(r2)
8113a5c8:	10c01014 	ori	r3,r2,64
8113a5cc:	e0bffe17 	ldw	r2,-8(fp)
8113a5d0:	10c00115 	stw	r3,4(r2)
8113a5d4:	00000e06 	br	8113a610 <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8113a5d8:	e0bffe17 	ldw	r2,-8(fp)
8113a5dc:	10800017 	ldw	r2,0(r2)
8113a5e0:	10800204 	addi	r2,r2,8
8113a5e4:	10800037 	ldwio	r2,0(r2)
8113a5e8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8113a5ec:	e0bfff17 	ldw	r2,-4(fp)
8113a5f0:	1082000c 	andi	r2,r2,2048
8113a5f4:	1000061e 	bne	r2,zero,8113a610 <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113a5f8:	e0bffe17 	ldw	r2,-8(fp)
8113a5fc:	10c00117 	ldw	r3,4(r2)
8113a600:	00bfefc4 	movi	r2,-65
8113a604:	1886703a 	and	r3,r3,r2
8113a608:	e0bffe17 	ldw	r2,-8(fp)
8113a60c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8113a610:	e0bffe17 	ldw	r2,-8(fp)
8113a614:	10c00417 	ldw	r3,16(r2)
8113a618:	e0bffe17 	ldw	r2,-8(fp)
8113a61c:	10800517 	ldw	r2,20(r2)
8113a620:	1880061e 	bne	r3,r2,8113a63c <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113a624:	e0bffe17 	ldw	r2,-8(fp)
8113a628:	10c00117 	ldw	r3,4(r2)
8113a62c:	00beefc4 	movi	r2,-1089
8113a630:	1886703a 	and	r3,r3,r2
8113a634:	e0bffe17 	ldw	r2,-8(fp)
8113a638:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113a63c:	e0bffe17 	ldw	r2,-8(fp)
8113a640:	10800017 	ldw	r2,0(r2)
8113a644:	10800304 	addi	r2,r2,12
8113a648:	e0fffe17 	ldw	r3,-8(fp)
8113a64c:	18c00117 	ldw	r3,4(r3)
8113a650:	10c00035 	stwio	r3,0(r2)
}
8113a654:	0001883a 	nop
8113a658:	e037883a 	mov	sp,fp
8113a65c:	dfc00117 	ldw	ra,4(sp)
8113a660:	df000017 	ldw	fp,0(sp)
8113a664:	dec00204 	addi	sp,sp,8
8113a668:	f800283a 	ret

8113a66c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8113a66c:	defffd04 	addi	sp,sp,-12
8113a670:	de00012e 	bgeu	sp,et,8113a678 <altera_avalon_uart_close+0xc>
8113a674:	003b68fa 	trap	3
8113a678:	df000215 	stw	fp,8(sp)
8113a67c:	df000204 	addi	fp,sp,8
8113a680:	e13ffe15 	stw	r4,-8(fp)
8113a684:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113a688:	00000506 	br	8113a6a0 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
8113a68c:	e0bfff17 	ldw	r2,-4(fp)
8113a690:	1090000c 	andi	r2,r2,16384
8113a694:	10000226 	beq	r2,zero,8113a6a0 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
8113a698:	00bffd44 	movi	r2,-11
8113a69c:	00000606 	br	8113a6b8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113a6a0:	e0bffe17 	ldw	r2,-8(fp)
8113a6a4:	10c00417 	ldw	r3,16(r2)
8113a6a8:	e0bffe17 	ldw	r2,-8(fp)
8113a6ac:	10800517 	ldw	r2,20(r2)
8113a6b0:	18bff61e 	bne	r3,r2,8113a68c <__reset+0xfb11a68c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8113a6b4:	0005883a 	mov	r2,zero
}
8113a6b8:	e037883a 	mov	sp,fp
8113a6bc:	df000017 	ldw	fp,0(sp)
8113a6c0:	dec00104 	addi	sp,sp,4
8113a6c4:	f800283a 	ret

8113a6c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113a6c8:	defffe04 	addi	sp,sp,-8
8113a6cc:	de00012e 	bgeu	sp,et,8113a6d4 <alt_get_errno+0xc>
8113a6d0:	003b68fa 	trap	3
8113a6d4:	dfc00115 	stw	ra,4(sp)
8113a6d8:	df000015 	stw	fp,0(sp)
8113a6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113a6e0:	d0a01017 	ldw	r2,-32704(gp)
8113a6e4:	10000326 	beq	r2,zero,8113a6f4 <alt_get_errno+0x2c>
8113a6e8:	d0a01017 	ldw	r2,-32704(gp)
8113a6ec:	103ee83a 	callr	r2
8113a6f0:	00000106 	br	8113a6f8 <alt_get_errno+0x30>
8113a6f4:	d0a06204 	addi	r2,gp,-32376
}
8113a6f8:	e037883a 	mov	sp,fp
8113a6fc:	dfc00117 	ldw	ra,4(sp)
8113a700:	df000017 	ldw	fp,0(sp)
8113a704:	dec00204 	addi	sp,sp,8
8113a708:	f800283a 	ret

8113a70c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8113a70c:	deffec04 	addi	sp,sp,-80
8113a710:	de00012e 	bgeu	sp,et,8113a718 <altera_avalon_uart_read+0xc>
8113a714:	003b68fa 	trap	3
8113a718:	dfc01315 	stw	ra,76(sp)
8113a71c:	df001215 	stw	fp,72(sp)
8113a720:	df001204 	addi	fp,sp,72
8113a724:	e13ffc15 	stw	r4,-16(fp)
8113a728:	e17ffd15 	stw	r5,-12(fp)
8113a72c:	e1bffe15 	stw	r6,-8(fp)
8113a730:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8113a734:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
8113a738:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8113a73c:	e0bfff17 	ldw	r2,-4(fp)
8113a740:	1090000c 	andi	r2,r2,16384
8113a744:	1005003a 	cmpeq	r2,r2,zero
8113a748:	10803fcc 	andi	r2,r2,255
8113a74c:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
8113a750:	e0bffc17 	ldw	r2,-16(fp)
8113a754:	10800817 	ldw	r2,32(r2)
8113a758:	e0bff815 	stw	r2,-32(fp)
8113a75c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113a760:	e0bff90b 	ldhu	r2,-28(fp)
8113a764:	e0fffb44 	addi	r3,fp,-19
8113a768:	180d883a 	mov	r6,r3
8113a76c:	100b883a 	mov	r5,r2
8113a770:	e13ff817 	ldw	r4,-32(fp)
8113a774:	11317080 	call	81131708 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113a778:	00001306 	br	8113a7c8 <altera_avalon_uart_read+0xbc>
    {
      count++;
8113a77c:	e0bff017 	ldw	r2,-64(fp)
8113a780:	10800044 	addi	r2,r2,1
8113a784:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8113a788:	e0bffd17 	ldw	r2,-12(fp)
8113a78c:	10c00044 	addi	r3,r2,1
8113a790:	e0fffd15 	stw	r3,-12(fp)
8113a794:	e0fffc17 	ldw	r3,-16(fp)
8113a798:	18c00217 	ldw	r3,8(r3)
8113a79c:	e13ffc17 	ldw	r4,-16(fp)
8113a7a0:	20c7883a 	add	r3,r4,r3
8113a7a4:	18c00a04 	addi	r3,r3,40
8113a7a8:	18c00003 	ldbu	r3,0(r3)
8113a7ac:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8113a7b0:	e0bffc17 	ldw	r2,-16(fp)
8113a7b4:	10800217 	ldw	r2,8(r2)
8113a7b8:	10800044 	addi	r2,r2,1
8113a7bc:	10c00fcc 	andi	r3,r2,63
8113a7c0:	e0bffc17 	ldw	r2,-16(fp)
8113a7c4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113a7c8:	e0fff017 	ldw	r3,-64(fp)
8113a7cc:	e0bffe17 	ldw	r2,-8(fp)
8113a7d0:	1880050e 	bge	r3,r2,8113a7e8 <altera_avalon_uart_read+0xdc>
8113a7d4:	e0bffc17 	ldw	r2,-16(fp)
8113a7d8:	10c00217 	ldw	r3,8(r2)
8113a7dc:	e0bffc17 	ldw	r2,-16(fp)
8113a7e0:	10800317 	ldw	r2,12(r2)
8113a7e4:	18bfe51e 	bne	r3,r2,8113a77c <__reset+0xfb11a77c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8113a7e8:	e0bff017 	ldw	r2,-64(fp)
8113a7ec:	10003a1e 	bne	r2,zero,8113a8d8 <altera_avalon_uart_read+0x1cc>
8113a7f0:	e0bffc17 	ldw	r2,-16(fp)
8113a7f4:	10c00217 	ldw	r3,8(r2)
8113a7f8:	e0bffc17 	ldw	r2,-16(fp)
8113a7fc:	10800317 	ldw	r2,12(r2)
8113a800:	1880351e 	bne	r3,r2,8113a8d8 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
8113a804:	e0bff117 	ldw	r2,-60(fp)
8113a808:	1000071e 	bne	r2,zero,8113a828 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8113a80c:	113a6c80 	call	8113a6c8 <alt_get_errno>
8113a810:	1007883a 	mov	r3,r2
8113a814:	008002c4 	movi	r2,11
8113a818:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8113a81c:	00800044 	movi	r2,1
8113a820:	e0bfef05 	stb	r2,-68(fp)
        break;
8113a824:	00003006 	br	8113a8e8 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a828:	0005303a 	rdctl	r2,status
8113a82c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a830:	e0fff517 	ldw	r3,-44(fp)
8113a834:	00bfff84 	movi	r2,-2
8113a838:	1884703a 	and	r2,r3,r2
8113a83c:	1001703a 	wrctl	status,r2
  
  return context;
8113a840:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8113a844:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113a848:	e0bffc17 	ldw	r2,-16(fp)
8113a84c:	10800117 	ldw	r2,4(r2)
8113a850:	10c02014 	ori	r3,r2,128
8113a854:	e0bffc17 	ldw	r2,-16(fp)
8113a858:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113a85c:	e0bffc17 	ldw	r2,-16(fp)
8113a860:	10800017 	ldw	r2,0(r2)
8113a864:	10800304 	addi	r2,r2,12
8113a868:	e0fffc17 	ldw	r3,-16(fp)
8113a86c:	18c00117 	ldw	r3,4(r3)
8113a870:	10c00035 	stwio	r3,0(r2)
8113a874:	e0bff417 	ldw	r2,-48(fp)
8113a878:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a87c:	e0bff617 	ldw	r2,-40(fp)
8113a880:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
8113a884:	e0bffc17 	ldw	r2,-16(fp)
8113a888:	10800717 	ldw	r2,28(r2)
8113a88c:	e0bff215 	stw	r2,-56(fp)
8113a890:	00800044 	movi	r2,1
8113a894:	e0bff98d 	sth	r2,-26(fp)
8113a898:	00bfe0c4 	movi	r2,-125
8113a89c:	e0bffa05 	stb	r2,-24(fp)
8113a8a0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113a8a4:	d0a07b03 	ldbu	r2,-32276(gp)
8113a8a8:	10803fcc 	andi	r2,r2,255
8113a8ac:	10000a26 	beq	r2,zero,8113a8d8 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113a8b0:	e0fff98b 	ldhu	r3,-26(fp)
8113a8b4:	e13ffa03 	ldbu	r4,-24(fp)
8113a8b8:	e17ffa8b 	ldhu	r5,-22(fp)
8113a8bc:	e0bffb04 	addi	r2,fp,-20
8113a8c0:	d8800015 	stw	r2,0(sp)
8113a8c4:	280f883a 	mov	r7,r5
8113a8c8:	200d883a 	mov	r6,r4
8113a8cc:	180b883a 	mov	r5,r3
8113a8d0:	e13ff217 	ldw	r4,-56(fp)
8113a8d4:	112da680 	call	8112da68 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8113a8d8:	e0bff017 	ldw	r2,-64(fp)
8113a8dc:	1000021e 	bne	r2,zero,8113a8e8 <altera_avalon_uart_read+0x1dc>
8113a8e0:	e0bffe17 	ldw	r2,-8(fp)
8113a8e4:	103fb81e 	bne	r2,zero,8113a7c8 <__reset+0xfb11a7c8>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8113a8e8:	e0bffc17 	ldw	r2,-16(fp)
8113a8ec:	10800817 	ldw	r2,32(r2)
8113a8f0:	1009883a 	mov	r4,r2
8113a8f4:	1131a900 	call	81131a90 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a8f8:	0005303a 	rdctl	r2,status
8113a8fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a900:	e0fff717 	ldw	r3,-36(fp)
8113a904:	00bfff84 	movi	r2,-2
8113a908:	1884703a 	and	r2,r3,r2
8113a90c:	1001703a 	wrctl	status,r2
  
  return context;
8113a910:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8113a914:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113a918:	e0bffc17 	ldw	r2,-16(fp)
8113a91c:	10800117 	ldw	r2,4(r2)
8113a920:	10c02014 	ori	r3,r2,128
8113a924:	e0bffc17 	ldw	r2,-16(fp)
8113a928:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113a92c:	e0bffc17 	ldw	r2,-16(fp)
8113a930:	10800017 	ldw	r2,0(r2)
8113a934:	10800304 	addi	r2,r2,12
8113a938:	e0fffc17 	ldw	r3,-16(fp)
8113a93c:	18c00117 	ldw	r3,4(r3)
8113a940:	10c00035 	stwio	r3,0(r2)
8113a944:	e0bff417 	ldw	r2,-48(fp)
8113a948:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a94c:	e0bff317 	ldw	r2,-52(fp)
8113a950:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8113a954:	e0bfef03 	ldbu	r2,-68(fp)
8113a958:	10000226 	beq	r2,zero,8113a964 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
8113a95c:	00bffd44 	movi	r2,-11
8113a960:	00000106 	br	8113a968 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
8113a964:	e0bff017 	ldw	r2,-64(fp)
  }
}
8113a968:	e037883a 	mov	sp,fp
8113a96c:	dfc00117 	ldw	ra,4(sp)
8113a970:	df000017 	ldw	fp,0(sp)
8113a974:	dec00204 	addi	sp,sp,8
8113a978:	f800283a 	ret

8113a97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113a97c:	defffe04 	addi	sp,sp,-8
8113a980:	de00012e 	bgeu	sp,et,8113a988 <alt_get_errno+0xc>
8113a984:	003b68fa 	trap	3
8113a988:	dfc00115 	stw	ra,4(sp)
8113a98c:	df000015 	stw	fp,0(sp)
8113a990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113a994:	d0a01017 	ldw	r2,-32704(gp)
8113a998:	10000326 	beq	r2,zero,8113a9a8 <alt_get_errno+0x2c>
8113a99c:	d0a01017 	ldw	r2,-32704(gp)
8113a9a0:	103ee83a 	callr	r2
8113a9a4:	00000106 	br	8113a9ac <alt_get_errno+0x30>
8113a9a8:	d0a06204 	addi	r2,gp,-32376
}
8113a9ac:	e037883a 	mov	sp,fp
8113a9b0:	dfc00117 	ldw	ra,4(sp)
8113a9b4:	df000017 	ldw	fp,0(sp)
8113a9b8:	dec00204 	addi	sp,sp,8
8113a9bc:	f800283a 	ret

8113a9c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8113a9c0:	deffec04 	addi	sp,sp,-80
8113a9c4:	de00012e 	bgeu	sp,et,8113a9cc <altera_avalon_uart_write+0xc>
8113a9c8:	003b68fa 	trap	3
8113a9cc:	dfc01315 	stw	ra,76(sp)
8113a9d0:	df001215 	stw	fp,72(sp)
8113a9d4:	df001204 	addi	fp,sp,72
8113a9d8:	e13ffc15 	stw	r4,-16(fp)
8113a9dc:	e17ffd15 	stw	r5,-12(fp)
8113a9e0:	e1bffe15 	stw	r6,-8(fp)
8113a9e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8113a9e8:	e0bffe17 	ldw	r2,-8(fp)
8113a9ec:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8113a9f0:	e0bfff17 	ldw	r2,-4(fp)
8113a9f4:	1090000c 	andi	r2,r2,16384
8113a9f8:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
8113a9fc:	e0bffc17 	ldw	r2,-16(fp)
8113aa00:	10800917 	ldw	r2,36(r2)
8113aa04:	e0bff815 	stw	r2,-32(fp)
8113aa08:	e03ff90d 	sth	zero,-28(fp)
8113aa0c:	e0bff90b 	ldhu	r2,-28(fp)
8113aa10:	e0fffb44 	addi	r3,fp,-19
8113aa14:	180d883a 	mov	r6,r3
8113aa18:	100b883a 	mov	r5,r2
8113aa1c:	e13ff817 	ldw	r4,-32(fp)
8113aa20:	11317080 	call	81131708 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8113aa24:	00005106 	br	8113ab6c <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113aa28:	e0bffc17 	ldw	r2,-16(fp)
8113aa2c:	10800517 	ldw	r2,20(r2)
8113aa30:	10800044 	addi	r2,r2,1
8113aa34:	10800fcc 	andi	r2,r2,63
8113aa38:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8113aa3c:	e0bffc17 	ldw	r2,-16(fp)
8113aa40:	10c00417 	ldw	r3,16(r2)
8113aa44:	e0bff217 	ldw	r2,-56(fp)
8113aa48:	1880371e 	bne	r3,r2,8113ab28 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
8113aa4c:	e0bff017 	ldw	r2,-64(fp)
8113aa50:	10000526 	beq	r2,zero,8113aa68 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8113aa54:	113a97c0 	call	8113a97c <alt_get_errno>
8113aa58:	1007883a 	mov	r3,r2
8113aa5c:	008002c4 	movi	r2,11
8113aa60:	18800015 	stw	r2,0(r3)
        break;
8113aa64:	00004306 	br	8113ab74 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113aa68:	0005303a 	rdctl	r2,status
8113aa6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113aa70:	e0fff517 	ldw	r3,-44(fp)
8113aa74:	00bfff84 	movi	r2,-2
8113aa78:	1884703a 	and	r2,r3,r2
8113aa7c:	1001703a 	wrctl	status,r2
  
  return context;
8113aa80:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8113aa84:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113aa88:	e0bffc17 	ldw	r2,-16(fp)
8113aa8c:	10800117 	ldw	r2,4(r2)
8113aa90:	10c11014 	ori	r3,r2,1088
8113aa94:	e0bffc17 	ldw	r2,-16(fp)
8113aa98:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113aa9c:	e0bffc17 	ldw	r2,-16(fp)
8113aaa0:	10800017 	ldw	r2,0(r2)
8113aaa4:	10800304 	addi	r2,r2,12
8113aaa8:	e0fffc17 	ldw	r3,-16(fp)
8113aaac:	18c00117 	ldw	r3,4(r3)
8113aab0:	10c00035 	stwio	r3,0(r2)
8113aab4:	e0bff417 	ldw	r2,-48(fp)
8113aab8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aabc:	e0bff117 	ldw	r2,-60(fp)
8113aac0:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
8113aac4:	e0bffc17 	ldw	r2,-16(fp)
8113aac8:	10800717 	ldw	r2,28(r2)
8113aacc:	e0bff315 	stw	r2,-52(fp)
8113aad0:	00800084 	movi	r2,2
8113aad4:	e0bff98d 	sth	r2,-26(fp)
8113aad8:	00bfe0c4 	movi	r2,-125
8113aadc:	e0bffa05 	stb	r2,-24(fp)
8113aae0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113aae4:	d0a07b03 	ldbu	r2,-32276(gp)
8113aae8:	10803fcc 	andi	r2,r2,255
8113aaec:	10000a26 	beq	r2,zero,8113ab18 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113aaf0:	e0fff98b 	ldhu	r3,-26(fp)
8113aaf4:	e13ffa03 	ldbu	r4,-24(fp)
8113aaf8:	e17ffa8b 	ldhu	r5,-22(fp)
8113aafc:	e0bffb04 	addi	r2,fp,-20
8113ab00:	d8800015 	stw	r2,0(sp)
8113ab04:	280f883a 	mov	r7,r5
8113ab08:	200d883a 	mov	r6,r4
8113ab0c:	180b883a 	mov	r5,r3
8113ab10:	e13ff317 	ldw	r4,-52(fp)
8113ab14:	112da680 	call	8112da68 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8113ab18:	e0bffc17 	ldw	r2,-16(fp)
8113ab1c:	10c00417 	ldw	r3,16(r2)
8113ab20:	e0bff217 	ldw	r2,-56(fp)
8113ab24:	18bfe726 	beq	r3,r2,8113aac4 <__reset+0xfb11aac4>
      }
    }

    count--;
8113ab28:	e0bfef17 	ldw	r2,-68(fp)
8113ab2c:	10bfffc4 	addi	r2,r2,-1
8113ab30:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8113ab34:	e0bffc17 	ldw	r2,-16(fp)
8113ab38:	10c00517 	ldw	r3,20(r2)
8113ab3c:	e0bffd17 	ldw	r2,-12(fp)
8113ab40:	11000044 	addi	r4,r2,1
8113ab44:	e13ffd15 	stw	r4,-12(fp)
8113ab48:	10800003 	ldbu	r2,0(r2)
8113ab4c:	1009883a 	mov	r4,r2
8113ab50:	e0bffc17 	ldw	r2,-16(fp)
8113ab54:	10c5883a 	add	r2,r2,r3
8113ab58:	10801a04 	addi	r2,r2,104
8113ab5c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8113ab60:	e0bffc17 	ldw	r2,-16(fp)
8113ab64:	e0fff217 	ldw	r3,-56(fp)
8113ab68:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8113ab6c:	e0bfef17 	ldw	r2,-68(fp)
8113ab70:	103fad1e 	bne	r2,zero,8113aa28 <__reset+0xfb11aa28>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
8113ab74:	e0bffc17 	ldw	r2,-16(fp)
8113ab78:	10800917 	ldw	r2,36(r2)
8113ab7c:	1009883a 	mov	r4,r2
8113ab80:	1131a900 	call	81131a90 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ab84:	0005303a 	rdctl	r2,status
8113ab88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ab8c:	e0fff717 	ldw	r3,-36(fp)
8113ab90:	00bfff84 	movi	r2,-2
8113ab94:	1884703a 	and	r2,r3,r2
8113ab98:	1001703a 	wrctl	status,r2
  
  return context;
8113ab9c:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8113aba0:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113aba4:	e0bffc17 	ldw	r2,-16(fp)
8113aba8:	10800117 	ldw	r2,4(r2)
8113abac:	10c11014 	ori	r3,r2,1088
8113abb0:	e0bffc17 	ldw	r2,-16(fp)
8113abb4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113abb8:	e0bffc17 	ldw	r2,-16(fp)
8113abbc:	10800017 	ldw	r2,0(r2)
8113abc0:	10800304 	addi	r2,r2,12
8113abc4:	e0fffc17 	ldw	r3,-16(fp)
8113abc8:	18c00117 	ldw	r3,4(r3)
8113abcc:	10c00035 	stwio	r3,0(r2)
8113abd0:	e0bff417 	ldw	r2,-48(fp)
8113abd4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113abd8:	e0bff617 	ldw	r2,-40(fp)
8113abdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8113abe0:	e0fffe17 	ldw	r3,-8(fp)
8113abe4:	e0bfef17 	ldw	r2,-68(fp)
8113abe8:	1885c83a 	sub	r2,r3,r2
}
8113abec:	e037883a 	mov	sp,fp
8113abf0:	dfc00117 	ldw	ra,4(sp)
8113abf4:	df000017 	ldw	fp,0(sp)
8113abf8:	dec00204 	addi	sp,sp,8
8113abfc:	f800283a 	ret

8113ac00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113ac00:	defffe04 	addi	sp,sp,-8
8113ac04:	de00012e 	bgeu	sp,et,8113ac0c <alt_get_errno+0xc>
8113ac08:	003b68fa 	trap	3
8113ac0c:	dfc00115 	stw	ra,4(sp)
8113ac10:	df000015 	stw	fp,0(sp)
8113ac14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113ac18:	d0a01017 	ldw	r2,-32704(gp)
8113ac1c:	10000326 	beq	r2,zero,8113ac2c <alt_get_errno+0x2c>
8113ac20:	d0a01017 	ldw	r2,-32704(gp)
8113ac24:	103ee83a 	callr	r2
8113ac28:	00000106 	br	8113ac30 <alt_get_errno+0x30>
8113ac2c:	d0a06204 	addi	r2,gp,-32376
}
8113ac30:	e037883a 	mov	sp,fp
8113ac34:	dfc00117 	ldw	ra,4(sp)
8113ac38:	df000017 	ldw	fp,0(sp)
8113ac3c:	dec00204 	addi	sp,sp,8
8113ac40:	f800283a 	ret

8113ac44 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8113ac44:	defffc04 	addi	sp,sp,-16
8113ac48:	de00012e 	bgeu	sp,et,8113ac50 <alt_msgdma_write_standard_descriptor+0xc>
8113ac4c:	003b68fa 	trap	3
8113ac50:	df000315 	stw	fp,12(sp)
8113ac54:	df000304 	addi	fp,sp,12
8113ac58:	e13ffd15 	stw	r4,-12(fp)
8113ac5c:	e17ffe15 	stw	r5,-8(fp)
8113ac60:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113ac64:	e0bffd17 	ldw	r2,-12(fp)
8113ac68:	10800037 	ldwio	r2,0(r2)
8113ac6c:	1080010c 	andi	r2,r2,4
8113ac70:	10000226 	beq	r2,zero,8113ac7c <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8113ac74:	00bff904 	movi	r2,-28
8113ac78:	00001506 	br	8113acd0 <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8113ac7c:	e0bfff17 	ldw	r2,-4(fp)
8113ac80:	10800017 	ldw	r2,0(r2)
8113ac84:	1007883a 	mov	r3,r2
8113ac88:	e0bffe17 	ldw	r2,-8(fp)
8113ac8c:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8113ac90:	e0bffe17 	ldw	r2,-8(fp)
8113ac94:	10800104 	addi	r2,r2,4
8113ac98:	e0ffff17 	ldw	r3,-4(fp)
8113ac9c:	18c00117 	ldw	r3,4(r3)
8113aca0:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8113aca4:	e0bffe17 	ldw	r2,-8(fp)
8113aca8:	10800204 	addi	r2,r2,8
8113acac:	e0ffff17 	ldw	r3,-4(fp)
8113acb0:	18c00217 	ldw	r3,8(r3)
8113acb4:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8113acb8:	e0bffe17 	ldw	r2,-8(fp)
8113acbc:	10800304 	addi	r2,r2,12
8113acc0:	e0ffff17 	ldw	r3,-4(fp)
8113acc4:	18c00317 	ldw	r3,12(r3)
8113acc8:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8113accc:	0005883a 	mov	r2,zero
}
8113acd0:	e037883a 	mov	sp,fp
8113acd4:	df000017 	ldw	fp,0(sp)
8113acd8:	dec00104 	addi	sp,sp,4
8113acdc:	f800283a 	ret

8113ace0 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8113ace0:	defffc04 	addi	sp,sp,-16
8113ace4:	de00012e 	bgeu	sp,et,8113acec <alt_msgdma_write_extended_descriptor+0xc>
8113ace8:	003b68fa 	trap	3
8113acec:	df000315 	stw	fp,12(sp)
8113acf0:	df000304 	addi	fp,sp,12
8113acf4:	e13ffd15 	stw	r4,-12(fp)
8113acf8:	e17ffe15 	stw	r5,-8(fp)
8113acfc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113ad00:	e0bffd17 	ldw	r2,-12(fp)
8113ad04:	10800037 	ldwio	r2,0(r2)
8113ad08:	1080010c 	andi	r2,r2,4
8113ad0c:	10000226 	beq	r2,zero,8113ad18 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8113ad10:	00bff904 	movi	r2,-28
8113ad14:	00003b06 	br	8113ae04 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8113ad18:	e0bfff17 	ldw	r2,-4(fp)
8113ad1c:	10800017 	ldw	r2,0(r2)
8113ad20:	1007883a 	mov	r3,r2
8113ad24:	e0bffe17 	ldw	r2,-8(fp)
8113ad28:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8113ad2c:	e0bffe17 	ldw	r2,-8(fp)
8113ad30:	10800104 	addi	r2,r2,4
8113ad34:	e0ffff17 	ldw	r3,-4(fp)
8113ad38:	18c00117 	ldw	r3,4(r3)
8113ad3c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8113ad40:	e0bffe17 	ldw	r2,-8(fp)
8113ad44:	10800204 	addi	r2,r2,8
8113ad48:	e0ffff17 	ldw	r3,-4(fp)
8113ad4c:	18c00217 	ldw	r3,8(r3)
8113ad50:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8113ad54:	e0bffe17 	ldw	r2,-8(fp)
8113ad58:	10800304 	addi	r2,r2,12
8113ad5c:	e0ffff17 	ldw	r3,-4(fp)
8113ad60:	18c0030b 	ldhu	r3,12(r3)
8113ad64:	18ffffcc 	andi	r3,r3,65535
8113ad68:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8113ad6c:	e0bffe17 	ldw	r2,-8(fp)
8113ad70:	10800384 	addi	r2,r2,14
8113ad74:	e0ffff17 	ldw	r3,-4(fp)
8113ad78:	18c00383 	ldbu	r3,14(r3)
8113ad7c:	18c03fcc 	andi	r3,r3,255
8113ad80:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8113ad84:	e0bffe17 	ldw	r2,-8(fp)
8113ad88:	108003c4 	addi	r2,r2,15
8113ad8c:	e0ffff17 	ldw	r3,-4(fp)
8113ad90:	18c003c3 	ldbu	r3,15(r3)
8113ad94:	18c03fcc 	andi	r3,r3,255
8113ad98:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8113ad9c:	e0bffe17 	ldw	r2,-8(fp)
8113ada0:	10800404 	addi	r2,r2,16
8113ada4:	e0ffff17 	ldw	r3,-4(fp)
8113ada8:	18c0040b 	ldhu	r3,16(r3)
8113adac:	18ffffcc 	andi	r3,r3,65535
8113adb0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8113adb4:	e0bffe17 	ldw	r2,-8(fp)
8113adb8:	10800484 	addi	r2,r2,18
8113adbc:	e0ffff17 	ldw	r3,-4(fp)
8113adc0:	18c0048b 	ldhu	r3,18(r3)
8113adc4:	18ffffcc 	andi	r3,r3,65535
8113adc8:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8113adcc:	e0bffe17 	ldw	r2,-8(fp)
8113add0:	10800504 	addi	r2,r2,20
8113add4:	0007883a 	mov	r3,zero
8113add8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8113addc:	e0bffe17 	ldw	r2,-8(fp)
8113ade0:	10800604 	addi	r2,r2,24
8113ade4:	0007883a 	mov	r3,zero
8113ade8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8113adec:	e0bffe17 	ldw	r2,-8(fp)
8113adf0:	10800704 	addi	r2,r2,28
8113adf4:	e0ffff17 	ldw	r3,-4(fp)
8113adf8:	18c00717 	ldw	r3,28(r3)
8113adfc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8113ae00:	0005883a 	mov	r2,zero
}
8113ae04:	e037883a 	mov	sp,fp
8113ae08:	df000017 	ldw	fp,0(sp)
8113ae0c:	dec00104 	addi	sp,sp,4
8113ae10:	f800283a 	ret

8113ae14 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8113ae14:	defff804 	addi	sp,sp,-32
8113ae18:	de00012e 	bgeu	sp,et,8113ae20 <alt_msgdma_irq+0xc>
8113ae1c:	003b68fa 	trap	3
8113ae20:	dfc00715 	stw	ra,28(sp)
8113ae24:	df000615 	stw	fp,24(sp)
8113ae28:	df000604 	addi	fp,sp,24
8113ae2c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8113ae30:	e0bfff17 	ldw	r2,-4(fp)
8113ae34:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8113ae38:	e0bffa17 	ldw	r2,-24(fp)
8113ae3c:	10801783 	ldbu	r2,94(r2)
8113ae40:	10803fcc 	andi	r2,r2,255
8113ae44:	10001126 	beq	r2,zero,8113ae8c <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113ae48:	e0bffa17 	ldw	r2,-24(fp)
8113ae4c:	10800617 	ldw	r2,24(r2)
8113ae50:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8113ae54:	1007883a 	mov	r3,r2
8113ae58:	00bffdc4 	movi	r2,-9
8113ae5c:	1884703a 	and	r2,r3,r2
8113ae60:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113ae64:	e0bffa17 	ldw	r2,-24(fp)
8113ae68:	10800617 	ldw	r2,24(r2)
8113ae6c:	e0fffb17 	ldw	r3,-20(fp)
8113ae70:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8113ae74:	e0bffa17 	ldw	r2,-24(fp)
8113ae78:	10800617 	ldw	r2,24(r2)
8113ae7c:	10800404 	addi	r2,r2,16
8113ae80:	00c00044 	movi	r3,1
8113ae84:	10c00035 	stwio	r3,0(r2)
8113ae88:	00001106 	br	8113aed0 <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113ae8c:	e0bffa17 	ldw	r2,-24(fp)
8113ae90:	10800317 	ldw	r2,12(r2)
8113ae94:	10800104 	addi	r2,r2,4
8113ae98:	10800037 	ldwio	r2,0(r2)
8113ae9c:	1007883a 	mov	r3,r2
8113aea0:	00bffbc4 	movi	r2,-17
8113aea4:	1884703a 	and	r2,r3,r2
8113aea8:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113aeac:	e0bffa17 	ldw	r2,-24(fp)
8113aeb0:	10800317 	ldw	r2,12(r2)
8113aeb4:	10800104 	addi	r2,r2,4
8113aeb8:	e0fffb17 	ldw	r3,-20(fp)
8113aebc:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113aec0:	e0bffa17 	ldw	r2,-24(fp)
8113aec4:	10800317 	ldw	r2,12(r2)
8113aec8:	00c08004 	movi	r3,512
8113aecc:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8113aed0:	e0bffa17 	ldw	r2,-24(fp)
8113aed4:	10800b17 	ldw	r2,44(r2)
8113aed8:	10001226 	beq	r2,zero,8113af24 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113aedc:	0005303a 	rdctl	r2,status
8113aee0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113aee4:	e0fffd17 	ldw	r3,-12(fp)
8113aee8:	00bfff84 	movi	r2,-2
8113aeec:	1884703a 	and	r2,r3,r2
8113aef0:	1001703a 	wrctl	status,r2
  
  return context;
8113aef4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8113aef8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8113aefc:	e0bffa17 	ldw	r2,-24(fp)
8113af00:	10800b17 	ldw	r2,44(r2)
8113af04:	e0fffa17 	ldw	r3,-24(fp)
8113af08:	18c00c17 	ldw	r3,48(r3)
8113af0c:	1809883a 	mov	r4,r3
8113af10:	103ee83a 	callr	r2
8113af14:	e0bffc17 	ldw	r2,-16(fp)
8113af18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113af1c:	e0bffe17 	ldw	r2,-8(fp)
8113af20:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8113af24:	e0bffa17 	ldw	r2,-24(fp)
8113af28:	10801783 	ldbu	r2,94(r2)
8113af2c:	10803fcc 	andi	r2,r2,255
8113af30:	10000a26 	beq	r2,zero,8113af5c <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113af34:	e0bffa17 	ldw	r2,-24(fp)
8113af38:	10800617 	ldw	r2,24(r2)
8113af3c:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113af40:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8113af44:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113af48:	e0bffa17 	ldw	r2,-24(fp)
8113af4c:	10800617 	ldw	r2,24(r2)
8113af50:	e0fffb17 	ldw	r3,-20(fp)
8113af54:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8113af58:	00000c06 	br	8113af8c <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113af5c:	e0bffa17 	ldw	r2,-24(fp)
8113af60:	10800317 	ldw	r2,12(r2)
8113af64:	10800104 	addi	r2,r2,4
8113af68:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8113af6c:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113af70:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113af74:	e0bffa17 	ldw	r2,-24(fp)
8113af78:	10800317 	ldw	r2,12(r2)
8113af7c:	10800104 	addi	r2,r2,4
8113af80:	e0fffb17 	ldw	r3,-20(fp)
8113af84:	10c00035 	stwio	r3,0(r2)
    }

    return;
8113af88:	0001883a 	nop
}
8113af8c:	e037883a 	mov	sp,fp
8113af90:	dfc00117 	ldw	ra,4(sp)
8113af94:	df000017 	ldw	fp,0(sp)
8113af98:	dec00204 	addi	sp,sp,8
8113af9c:	f800283a 	ret

8113afa0 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113afa0:	defffb04 	addi	sp,sp,-20
8113afa4:	de00012e 	bgeu	sp,et,8113afac <alt_msgdma_construct_standard_descriptor+0xc>
8113afa8:	003b68fa 	trap	3
8113afac:	df000415 	stw	fp,16(sp)
8113afb0:	df000404 	addi	fp,sp,16
8113afb4:	e13ffc15 	stw	r4,-16(fp)
8113afb8:	e17ffd15 	stw	r5,-12(fp)
8113afbc:	e1bffe15 	stw	r6,-8(fp)
8113afc0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113afc4:	e0bffc17 	ldw	r2,-16(fp)
8113afc8:	10c01217 	ldw	r3,72(r2)
8113afcc:	e0800117 	ldw	r2,4(fp)
8113afd0:	18800436 	bltu	r3,r2,8113afe4 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113afd4:	e0bffc17 	ldw	r2,-16(fp)
8113afd8:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113afdc:	10803fcc 	andi	r2,r2,255
8113afe0:	10000226 	beq	r2,zero,8113afec <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113afe4:	00bffa84 	movi	r2,-22
8113afe8:	00000e06 	br	8113b024 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
8113afec:	e0bffd17 	ldw	r2,-12(fp)
8113aff0:	e0fffe17 	ldw	r3,-8(fp)
8113aff4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113aff8:	e0bffd17 	ldw	r2,-12(fp)
8113affc:	e0ffff17 	ldw	r3,-4(fp)
8113b000:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113b004:	e0bffd17 	ldw	r2,-12(fp)
8113b008:	e0c00117 	ldw	r3,4(fp)
8113b00c:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113b010:	e0800217 	ldw	r2,8(fp)
8113b014:	10e00034 	orhi	r3,r2,32768
8113b018:	e0bffd17 	ldw	r2,-12(fp)
8113b01c:	10c00315 	stw	r3,12(r2)
    
    return 0;
8113b020:	0005883a 	mov	r2,zero
}
8113b024:	e037883a 	mov	sp,fp
8113b028:	df000017 	ldw	fp,0(sp)
8113b02c:	dec00104 	addi	sp,sp,4
8113b030:	f800283a 	ret

8113b034 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113b034:	defff604 	addi	sp,sp,-40
8113b038:	de00012e 	bgeu	sp,et,8113b040 <alt_msgdma_construct_extended_descriptor+0xc>
8113b03c:	003b68fa 	trap	3
8113b040:	df000915 	stw	fp,36(sp)
8113b044:	df000904 	addi	fp,sp,36
8113b048:	e13ff715 	stw	r4,-36(fp)
8113b04c:	e17ff815 	stw	r5,-32(fp)
8113b050:	e1bff915 	stw	r6,-28(fp)
8113b054:	e1fffa15 	stw	r7,-24(fp)
8113b058:	e1800317 	ldw	r6,12(fp)
8113b05c:	e1400417 	ldw	r5,16(fp)
8113b060:	e1000517 	ldw	r4,20(fp)
8113b064:	e0c00617 	ldw	r3,24(fp)
8113b068:	e0800717 	ldw	r2,28(fp)
8113b06c:	e1bffb0d 	sth	r6,-20(fp)
8113b070:	e17ffc05 	stb	r5,-16(fp)
8113b074:	e13ffd05 	stb	r4,-12(fp)
8113b078:	e0fffe0d 	sth	r3,-8(fp)
8113b07c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8113b080:	e0bff717 	ldw	r2,-36(fp)
8113b084:	10c01217 	ldw	r3,72(r2)
8113b088:	e0800117 	ldw	r2,4(fp)
8113b08c:	18801936 	bltu	r3,r2,8113b0f4 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113b090:	e13ff717 	ldw	r4,-36(fp)
8113b094:	20801317 	ldw	r2,76(r4)
8113b098:	20c01417 	ldw	r3,80(r4)
8113b09c:	e13ffe0b 	ldhu	r4,-8(fp)
8113b0a0:	213fffcc 	andi	r4,r4,65535
8113b0a4:	2015883a 	mov	r10,r4
8113b0a8:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8113b0ac:	1ac01136 	bltu	r3,r11,8113b0f4 <alt_msgdma_construct_extended_descriptor+0xc0>
8113b0b0:	58c0011e 	bne	r11,r3,8113b0b8 <alt_msgdma_construct_extended_descriptor+0x84>
8113b0b4:	12800f36 	bltu	r2,r10,8113b0f4 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113b0b8:	e13ff717 	ldw	r4,-36(fp)
8113b0bc:	20801317 	ldw	r2,76(r4)
8113b0c0:	20c01417 	ldw	r3,80(r4)
8113b0c4:	e13fff0b 	ldhu	r4,-4(fp)
8113b0c8:	213fffcc 	andi	r4,r4,65535
8113b0cc:	2011883a 	mov	r8,r4
8113b0d0:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113b0d4:	1a400736 	bltu	r3,r9,8113b0f4 <alt_msgdma_construct_extended_descriptor+0xc0>
8113b0d8:	48c0011e 	bne	r9,r3,8113b0e0 <alt_msgdma_construct_extended_descriptor+0xac>
8113b0dc:	12000536 	bltu	r2,r8,8113b0f4 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113b0e0:	e0bff717 	ldw	r2,-36(fp)
8113b0e4:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113b0e8:	10803fcc 	andi	r2,r2,255
8113b0ec:	10800060 	cmpeqi	r2,r2,1
8113b0f0:	1000021e 	bne	r2,zero,8113b0fc <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113b0f4:	00bffa84 	movi	r2,-22
8113b0f8:	00002106 	br	8113b180 <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
8113b0fc:	e0bff817 	ldw	r2,-32(fp)
8113b100:	e0fff917 	ldw	r3,-28(fp)
8113b104:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8113b108:	e0bff817 	ldw	r2,-32(fp)
8113b10c:	e0fffa17 	ldw	r3,-24(fp)
8113b110:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113b114:	e0bff817 	ldw	r2,-32(fp)
8113b118:	e0c00117 	ldw	r3,4(fp)
8113b11c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113b120:	e0bff817 	ldw	r2,-32(fp)
8113b124:	e0fffb0b 	ldhu	r3,-20(fp)
8113b128:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8113b12c:	e0bff817 	ldw	r2,-32(fp)
8113b130:	e0fffc03 	ldbu	r3,-16(fp)
8113b134:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8113b138:	e0bff817 	ldw	r2,-32(fp)
8113b13c:	e0fffd03 	ldbu	r3,-12(fp)
8113b140:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8113b144:	e0bff817 	ldw	r2,-32(fp)
8113b148:	e0fffe0b 	ldhu	r3,-8(fp)
8113b14c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8113b150:	e0bff817 	ldw	r2,-32(fp)
8113b154:	e0ffff0b 	ldhu	r3,-4(fp)
8113b158:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8113b15c:	e0bff817 	ldw	r2,-32(fp)
8113b160:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8113b164:	e0bff817 	ldw	r2,-32(fp)
8113b168:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113b16c:	e0800217 	ldw	r2,8(fp)
8113b170:	10e00034 	orhi	r3,r2,32768
8113b174:	e0bff817 	ldw	r2,-32(fp)
8113b178:	10c00715 	stw	r3,28(r2)

  return 0 ;
8113b17c:	0005883a 	mov	r2,zero

}
8113b180:	e037883a 	mov	sp,fp
8113b184:	df000017 	ldw	fp,0(sp)
8113b188:	dec00104 	addi	sp,sp,4
8113b18c:	f800283a 	ret

8113b190 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113b190:	deffee04 	addi	sp,sp,-72
8113b194:	de00012e 	bgeu	sp,et,8113b19c <alt_msgdma_descriptor_async_transfer+0xc>
8113b198:	003b68fa 	trap	3
8113b19c:	dfc01115 	stw	ra,68(sp)
8113b1a0:	df001015 	stw	fp,64(sp)
8113b1a4:	df001004 	addi	fp,sp,64
8113b1a8:	e13ffd15 	stw	r4,-12(fp)
8113b1ac:	e17ffe15 	stw	r5,-8(fp)
8113b1b0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8113b1b4:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8113b1b8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8113b1bc:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b1c0:	e0bffd17 	ldw	r2,-12(fp)
8113b1c4:	10800317 	ldw	r2,12(r2)
8113b1c8:	10800204 	addi	r2,r2,8
8113b1cc:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113b1d0:	10bfffcc 	andi	r2,r2,65535
8113b1d4:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b1d8:	e0bffd17 	ldw	r2,-12(fp)
8113b1dc:	10800317 	ldw	r2,12(r2)
8113b1e0:	10800204 	addi	r2,r2,8
8113b1e4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8113b1e8:	1004d43a 	srli	r2,r2,16
8113b1ec:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b1f0:	e0bffd17 	ldw	r2,-12(fp)
8113b1f4:	10800917 	ldw	r2,36(r2)
8113b1f8:	e0fff417 	ldw	r3,-48(fp)
8113b1fc:	1880042e 	bgeu	r3,r2,8113b210 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113b200:	e0bffd17 	ldw	r2,-12(fp)
8113b204:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b208:	e0fff317 	ldw	r3,-52(fp)
8113b20c:	18800236 	bltu	r3,r2,8113b218 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8113b210:	00bff904 	movi	r2,-28
8113b214:	0000a906 	br	8113b4bc <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
8113b218:	e0bffd17 	ldw	r2,-12(fp)
8113b21c:	10801817 	ldw	r2,96(r2)
8113b220:	e0bff615 	stw	r2,-40(fp)
8113b224:	e03ffc0d 	sth	zero,-16(fp)
8113b228:	e0bffc0b 	ldhu	r2,-16(fp)
8113b22c:	e0fffc84 	addi	r3,fp,-14
8113b230:	180d883a 	mov	r6,r3
8113b234:	100b883a 	mov	r5,r2
8113b238:	e13ff617 	ldw	r4,-40(fp)
8113b23c:	11317080 	call	81131708 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113b240:	00800804 	movi	r2,32
8113b244:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b248:	0005303a 	rdctl	r2,status
8113b24c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b250:	e0fff717 	ldw	r3,-36(fp)
8113b254:	00bfff84 	movi	r2,-2
8113b258:	1884703a 	and	r2,r3,r2
8113b25c:	1001703a 	wrctl	status,r2
  
  return context;
8113b260:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113b264:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b268:	e0bffd17 	ldw	r2,-12(fp)
8113b26c:	10800317 	ldw	r2,12(r2)
8113b270:	10800104 	addi	r2,r2,4
8113b274:	e0fff117 	ldw	r3,-60(fp)
8113b278:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113b27c:	e0bffd17 	ldw	r2,-12(fp)
8113b280:	10800317 	ldw	r2,12(r2)
8113b284:	e0fffd17 	ldw	r3,-12(fp)
8113b288:	18c00317 	ldw	r3,12(r3)
8113b28c:	18c00037 	ldwio	r3,0(r3)
8113b290:	10c00035 	stwio	r3,0(r2)
8113b294:	e0bff217 	ldw	r2,-56(fp)
8113b298:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b29c:	e0bffb17 	ldw	r2,-20(fp)
8113b2a0:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8113b2a4:	e0bffe17 	ldw	r2,-8(fp)
8113b2a8:	10001e26 	beq	r2,zero,8113b324 <alt_msgdma_descriptor_async_transfer+0x194>
8113b2ac:	e0bfff17 	ldw	r2,-4(fp)
8113b2b0:	10001c1e 	bne	r2,zero,8113b324 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b2b4:	00001106 	br	8113b2fc <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113b2b8:	01000044 	movi	r4,1
8113b2bc:	1128dcc0 	call	81128dcc <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b2c0:	e0bff00b 	ldhu	r2,-64(fp)
8113b2c4:	1084e230 	cmpltui	r2,r2,5000
8113b2c8:	1000091e 	bne	r2,zero,8113b2f0 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
8113b2cc:	01204534 	movhi	r4,33044
8113b2d0:	21096e04 	addi	r4,r4,9656
8113b2d4:	113d6b40 	call	8113d6b4 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b2d8:	e0bffd17 	ldw	r2,-12(fp)
8113b2dc:	10801817 	ldw	r2,96(r2)
8113b2e0:	1009883a 	mov	r4,r2
8113b2e4:	1131a900 	call	81131a90 <OSSemPost>
				
                return -ETIME;
8113b2e8:	00bff084 	movi	r2,-62
8113b2ec:	00007306 	br	8113b4bc <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113b2f0:	e0bff00b 	ldhu	r2,-64(fp)
8113b2f4:	10800044 	addi	r2,r2,1
8113b2f8:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b2fc:	e0bffd17 	ldw	r2,-12(fp)
8113b300:	10c00317 	ldw	r3,12(r2)
8113b304:	e0bffd17 	ldw	r2,-12(fp)
8113b308:	10800417 	ldw	r2,16(r2)
8113b30c:	e1bffe17 	ldw	r6,-8(fp)
8113b310:	100b883a 	mov	r5,r2
8113b314:	1809883a 	mov	r4,r3
8113b318:	113ac440 	call	8113ac44 <alt_msgdma_write_standard_descriptor>
8113b31c:	103fe61e 	bne	r2,zero,8113b2b8 <__reset+0xfb11b2b8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8113b320:	00002706 	br	8113b3c0 <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b324:	e0bffe17 	ldw	r2,-8(fp)
8113b328:	10001f1e 	bne	r2,zero,8113b3a8 <alt_msgdma_descriptor_async_transfer+0x218>
8113b32c:	e0bfff17 	ldw	r2,-4(fp)
8113b330:	10001d26 	beq	r2,zero,8113b3a8 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
8113b334:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b338:	00001106 	br	8113b380 <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113b33c:	01000044 	movi	r4,1
8113b340:	1128dcc0 	call	81128dcc <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b344:	e0bff00b 	ldhu	r2,-64(fp)
8113b348:	1084e230 	cmpltui	r2,r2,5000
8113b34c:	1000091e 	bne	r2,zero,8113b374 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8113b350:	01204534 	movhi	r4,33044
8113b354:	21098404 	addi	r4,r4,9744
8113b358:	113d6b40 	call	8113d6b4 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b35c:	e0bffd17 	ldw	r2,-12(fp)
8113b360:	10801817 	ldw	r2,96(r2)
8113b364:	1009883a 	mov	r4,r2
8113b368:	1131a900 	call	81131a90 <OSSemPost>
				
                return -ETIME;
8113b36c:	00bff084 	movi	r2,-62
8113b370:	00005206 	br	8113b4bc <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113b374:	e0bff00b 	ldhu	r2,-64(fp)
8113b378:	10800044 	addi	r2,r2,1
8113b37c:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b380:	e0bffd17 	ldw	r2,-12(fp)
8113b384:	10c00317 	ldw	r3,12(r2)
8113b388:	e0bffd17 	ldw	r2,-12(fp)
8113b38c:	10800417 	ldw	r2,16(r2)
8113b390:	e1bfff17 	ldw	r6,-4(fp)
8113b394:	100b883a 	mov	r5,r2
8113b398:	1809883a 	mov	r4,r3
8113b39c:	113ace00 	call	8113ace0 <alt_msgdma_write_extended_descriptor>
8113b3a0:	103fe61e 	bne	r2,zero,8113b33c <__reset+0xfb11b33c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b3a4:	00000606 	br	8113b3c0 <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113b3a8:	e0bffd17 	ldw	r2,-12(fp)
8113b3ac:	10801817 	ldw	r2,96(r2)
8113b3b0:	1009883a 	mov	r4,r2
8113b3b4:	1131a900 	call	81131a90 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8113b3b8:	00bfffc4 	movi	r2,-1
8113b3bc:	00003f06 	br	8113b4bc <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8113b3c0:	e0bffd17 	ldw	r2,-12(fp)
8113b3c4:	10800b17 	ldw	r2,44(r2)
8113b3c8:	10001c26 	beq	r2,zero,8113b43c <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
8113b3cc:	e0bffd17 	ldw	r2,-12(fp)
8113b3d0:	10c00d17 	ldw	r3,52(r2)
8113b3d4:	e0bff117 	ldw	r2,-60(fp)
8113b3d8:	1884b03a 	or	r2,r3,r2
8113b3dc:	10800514 	ori	r2,r2,20
8113b3e0:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113b3e4:	e0fff117 	ldw	r3,-60(fp)
8113b3e8:	00bff7c4 	movi	r2,-33
8113b3ec:	1884703a 	and	r2,r3,r2
8113b3f0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b3f4:	0005303a 	rdctl	r2,status
8113b3f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b3fc:	e0fff917 	ldw	r3,-28(fp)
8113b400:	00bfff84 	movi	r2,-2
8113b404:	1884703a 	and	r2,r3,r2
8113b408:	1001703a 	wrctl	status,r2
  
  return context;
8113b40c:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8113b410:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b414:	e0bffd17 	ldw	r2,-12(fp)
8113b418:	10800317 	ldw	r2,12(r2)
8113b41c:	10800104 	addi	r2,r2,4
8113b420:	e0fff117 	ldw	r3,-60(fp)
8113b424:	10c00035 	stwio	r3,0(r2)
8113b428:	e0bff217 	ldw	r2,-56(fp)
8113b42c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b430:	e0bff517 	ldw	r2,-44(fp)
8113b434:	1001703a 	wrctl	status,r2
8113b438:	00001b06 	br	8113b4a8 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8113b43c:	e0bffd17 	ldw	r2,-12(fp)
8113b440:	10c00d17 	ldw	r3,52(r2)
8113b444:	e0bff117 	ldw	r2,-60(fp)
8113b448:	1884b03a 	or	r2,r3,r2
8113b44c:	10800114 	ori	r2,r2,4
8113b450:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8113b454:	e0fff117 	ldw	r3,-60(fp)
8113b458:	00bff3c4 	movi	r2,-49
8113b45c:	1884703a 	and	r2,r3,r2
8113b460:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b464:	0005303a 	rdctl	r2,status
8113b468:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b46c:	e0fffa17 	ldw	r3,-24(fp)
8113b470:	00bfff84 	movi	r2,-2
8113b474:	1884703a 	and	r2,r3,r2
8113b478:	1001703a 	wrctl	status,r2
  
  return context;
8113b47c:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8113b480:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b484:	e0bffd17 	ldw	r2,-12(fp)
8113b488:	10800317 	ldw	r2,12(r2)
8113b48c:	10800104 	addi	r2,r2,4
8113b490:	e0fff117 	ldw	r3,-60(fp)
8113b494:	10c00035 	stwio	r3,0(r2)
8113b498:	e0bff217 	ldw	r2,-56(fp)
8113b49c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b4a0:	e0bff817 	ldw	r2,-32(fp)
8113b4a4:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
8113b4a8:	e0bffd17 	ldw	r2,-12(fp)
8113b4ac:	10801817 	ldw	r2,96(r2)
8113b4b0:	1009883a 	mov	r4,r2
8113b4b4:	1131a900 	call	81131a90 <OSSemPost>
    
    return 0;
8113b4b8:	0005883a 	mov	r2,zero
}
8113b4bc:	e037883a 	mov	sp,fp
8113b4c0:	dfc00117 	ldw	ra,4(sp)
8113b4c4:	df000017 	ldw	fp,0(sp)
8113b4c8:	dec00204 	addi	sp,sp,8
8113b4cc:	f800283a 	ret

8113b4d0 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113b4d0:	deffee04 	addi	sp,sp,-72
8113b4d4:	de00012e 	bgeu	sp,et,8113b4dc <alt_msgdma_descriptor_sync_transfer+0xc>
8113b4d8:	003b68fa 	trap	3
8113b4dc:	dfc01115 	stw	ra,68(sp)
8113b4e0:	df001015 	stw	fp,64(sp)
8113b4e4:	df001004 	addi	fp,sp,64
8113b4e8:	e13ffd15 	stw	r4,-12(fp)
8113b4ec:	e17ffe15 	stw	r5,-8(fp)
8113b4f0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8113b4f4:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
8113b4f8:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
8113b4fc:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
8113b500:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b504:	e0bffd17 	ldw	r2,-12(fp)
8113b508:	10800317 	ldw	r2,12(r2)
8113b50c:	10800204 	addi	r2,r2,8
8113b510:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113b514:	10bfffcc 	andi	r2,r2,65535
8113b518:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b51c:	e0bffd17 	ldw	r2,-12(fp)
8113b520:	10800317 	ldw	r2,12(r2)
8113b524:	10800204 	addi	r2,r2,8
8113b528:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8113b52c:	1004d43a 	srli	r2,r2,16
8113b530:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8113b534:	00807804 	movi	r2,480
8113b538:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b53c:	00001906 	br	8113b5a4 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8113b540:	01000044 	movi	r4,1
8113b544:	1128dcc0 	call	81128dcc <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b548:	e0bff10b 	ldhu	r2,-60(fp)
8113b54c:	1084e230 	cmpltui	r2,r2,5000
8113b550:	1000051e 	bne	r2,zero,8113b568 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8113b554:	01204534 	movhi	r4,33044
8113b558:	21099a04 	addi	r4,r4,9832
8113b55c:	113d6b40 	call	8113d6b4 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8113b560:	00bff084 	movi	r2,-62
8113b564:	0000d706 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
8113b568:	e0bff10b 	ldhu	r2,-60(fp)
8113b56c:	10800044 	addi	r2,r2,1
8113b570:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b574:	e0bffd17 	ldw	r2,-12(fp)
8113b578:	10800317 	ldw	r2,12(r2)
8113b57c:	10800204 	addi	r2,r2,8
8113b580:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8113b584:	10bfffcc 	andi	r2,r2,65535
8113b588:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b58c:	e0bffd17 	ldw	r2,-12(fp)
8113b590:	10800317 	ldw	r2,12(r2)
8113b594:	10800204 	addi	r2,r2,8
8113b598:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8113b59c:	1004d43a 	srli	r2,r2,16
8113b5a0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b5a4:	e0bffd17 	ldw	r2,-12(fp)
8113b5a8:	10800917 	ldw	r2,36(r2)
8113b5ac:	e0fff317 	ldw	r3,-52(fp)
8113b5b0:	18bfe32e 	bgeu	r3,r2,8113b540 <__reset+0xfb11b540>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113b5b4:	e0bffd17 	ldw	r2,-12(fp)
8113b5b8:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b5bc:	e0fff217 	ldw	r3,-56(fp)
8113b5c0:	18bfdf2e 	bgeu	r3,r2,8113b540 <__reset+0xfb11b540>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113b5c4:	e0bffd17 	ldw	r2,-12(fp)
8113b5c8:	10801817 	ldw	r2,96(r2)
8113b5cc:	e0bff815 	stw	r2,-32(fp)
8113b5d0:	e03ffc0d 	sth	zero,-16(fp)
8113b5d4:	e0bffc0b 	ldhu	r2,-16(fp)
8113b5d8:	e0fffc84 	addi	r3,fp,-14
8113b5dc:	180d883a 	mov	r6,r3
8113b5e0:	100b883a 	mov	r5,r2
8113b5e4:	e13ff817 	ldw	r4,-32(fp)
8113b5e8:	11317080 	call	81131708 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b5ec:	0005303a 	rdctl	r2,status
8113b5f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b5f4:	e0fffb17 	ldw	r3,-20(fp)
8113b5f8:	00bfff84 	movi	r2,-2
8113b5fc:	1884703a 	and	r2,r3,r2
8113b600:	1001703a 	wrctl	status,r2
  
  return context;
8113b604:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8113b608:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113b60c:	e0bffd17 	ldw	r2,-12(fp)
8113b610:	10800317 	ldw	r2,12(r2)
8113b614:	10800104 	addi	r2,r2,4
8113b618:	00c00804 	movi	r3,32
8113b61c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113b620:	e0bffd17 	ldw	r2,-12(fp)
8113b624:	10800317 	ldw	r2,12(r2)
8113b628:	e0fffd17 	ldw	r3,-12(fp)
8113b62c:	18c00317 	ldw	r3,12(r3)
8113b630:	18c00037 	ldwio	r3,0(r3)
8113b634:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113b638:	e0bffe17 	ldw	r2,-8(fp)
8113b63c:	10001f26 	beq	r2,zero,8113b6bc <alt_msgdma_descriptor_sync_transfer+0x1ec>
8113b640:	e0bfff17 	ldw	r2,-4(fp)
8113b644:	10001d1e 	bne	r2,zero,8113b6bc <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
8113b648:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b64c:	00001106 	br	8113b694 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8113b650:	01000044 	movi	r4,1
8113b654:	1128dcc0 	call	81128dcc <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b658:	e0bff10b 	ldhu	r2,-60(fp)
8113b65c:	1084e230 	cmpltui	r2,r2,5000
8113b660:	1000091e 	bne	r2,zero,8113b688 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
8113b664:	01204534 	movhi	r4,33044
8113b668:	2109ae04 	addi	r4,r4,9912
8113b66c:	113d6b40 	call	8113d6b4 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b670:	e0bffd17 	ldw	r2,-12(fp)
8113b674:	10801817 	ldw	r2,96(r2)
8113b678:	1009883a 	mov	r4,r2
8113b67c:	1131a900 	call	81131a90 <OSSemPost>
				
                return -ETIME;
8113b680:	00bff084 	movi	r2,-62
8113b684:	00008f06 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
8113b688:	e0bff10b 	ldhu	r2,-60(fp)
8113b68c:	10800044 	addi	r2,r2,1
8113b690:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b694:	e0bffd17 	ldw	r2,-12(fp)
8113b698:	10c00317 	ldw	r3,12(r2)
8113b69c:	e0bffd17 	ldw	r2,-12(fp)
8113b6a0:	10800417 	ldw	r2,16(r2)
8113b6a4:	e1bffe17 	ldw	r6,-8(fp)
8113b6a8:	100b883a 	mov	r5,r2
8113b6ac:	1809883a 	mov	r4,r3
8113b6b0:	113ac440 	call	8113ac44 <alt_msgdma_write_standard_descriptor>
8113b6b4:	103fe61e 	bne	r2,zero,8113b650 <__reset+0xfb11b650>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113b6b8:	00002706 	br	8113b758 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b6bc:	e0bffe17 	ldw	r2,-8(fp)
8113b6c0:	10001f1e 	bne	r2,zero,8113b740 <alt_msgdma_descriptor_sync_transfer+0x270>
8113b6c4:	e0bfff17 	ldw	r2,-4(fp)
8113b6c8:	10001d26 	beq	r2,zero,8113b740 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
8113b6cc:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b6d0:	00001106 	br	8113b718 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113b6d4:	01000044 	movi	r4,1
8113b6d8:	1128dcc0 	call	81128dcc <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b6dc:	e0bff10b 	ldhu	r2,-60(fp)
8113b6e0:	1084e230 	cmpltui	r2,r2,5000
8113b6e4:	1000091e 	bne	r2,zero,8113b70c <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
8113b6e8:	01204534 	movhi	r4,33044
8113b6ec:	2109bf04 	addi	r4,r4,9980
8113b6f0:	113d6b40 	call	8113d6b4 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b6f4:	e0bffd17 	ldw	r2,-12(fp)
8113b6f8:	10801817 	ldw	r2,96(r2)
8113b6fc:	1009883a 	mov	r4,r2
8113b700:	1131a900 	call	81131a90 <OSSemPost>
				
                return -ETIME;
8113b704:	00bff084 	movi	r2,-62
8113b708:	00006e06 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
8113b70c:	e0bff10b 	ldhu	r2,-60(fp)
8113b710:	10800044 	addi	r2,r2,1
8113b714:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b718:	e0bffd17 	ldw	r2,-12(fp)
8113b71c:	10c00317 	ldw	r3,12(r2)
8113b720:	e0bffd17 	ldw	r2,-12(fp)
8113b724:	10800417 	ldw	r2,16(r2)
8113b728:	e1bfff17 	ldw	r6,-4(fp)
8113b72c:	100b883a 	mov	r5,r2
8113b730:	1809883a 	mov	r4,r3
8113b734:	113ace00 	call	8113ace0 <alt_msgdma_write_extended_descriptor>
8113b738:	103fe61e 	bne	r2,zero,8113b6d4 <__reset+0xfb11b6d4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b73c:	00000606 	br	8113b758 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113b740:	e0bffd17 	ldw	r2,-12(fp)
8113b744:	10801817 	ldw	r2,96(r2)
8113b748:	1009883a 	mov	r4,r2
8113b74c:	1131a900 	call	81131a90 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8113b750:	00bfffc4 	movi	r2,-1
8113b754:	00005b06 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113b758:	e0bffd17 	ldw	r2,-12(fp)
8113b75c:	10800317 	ldw	r2,12(r2)
8113b760:	10800104 	addi	r2,r2,4
8113b764:	e0fffd17 	ldw	r3,-12(fp)
8113b768:	19000d17 	ldw	r4,52(r3)
8113b76c:	00fff2c4 	movi	r3,-53
8113b770:	20c6703a 	and	r3,r4,r3
8113b774:	18c00114 	ori	r3,r3,4
8113b778:	10c00035 	stwio	r3,0(r2)
8113b77c:	e0bff517 	ldw	r2,-44(fp)
8113b780:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b784:	e0bff717 	ldw	r2,-36(fp)
8113b788:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8113b78c:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113b790:	e0bffd17 	ldw	r2,-12(fp)
8113b794:	10800317 	ldw	r2,12(r2)
8113b798:	10800037 	ldwio	r2,0(r2)
8113b79c:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113b7a0:	00001506 	br	8113b7f8 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
8113b7a4:	01000044 	movi	r4,1
8113b7a8:	1128dcc0 	call	81128dcc <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b7ac:	e0bff10b 	ldhu	r2,-60(fp)
8113b7b0:	1084e230 	cmpltui	r2,r2,5000
8113b7b4:	1000091e 	bne	r2,zero,8113b7dc <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8113b7b8:	01204534 	movhi	r4,33044
8113b7bc:	2109d004 	addi	r4,r4,10048
8113b7c0:	113d6b40 	call	8113d6b4 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8113b7c4:	e0bffd17 	ldw	r2,-12(fp)
8113b7c8:	10801817 	ldw	r2,96(r2)
8113b7cc:	1009883a 	mov	r4,r2
8113b7d0:	1131a900 	call	81131a90 <OSSemPost>
			
            return -ETIME;
8113b7d4:	00bff084 	movi	r2,-62
8113b7d8:	00003a06 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
8113b7dc:	e0bff10b 	ldhu	r2,-60(fp)
8113b7e0:	10800044 	addi	r2,r2,1
8113b7e4:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113b7e8:	e0bffd17 	ldw	r2,-12(fp)
8113b7ec:	10800317 	ldw	r2,12(r2)
8113b7f0:	10800037 	ldwio	r2,0(r2)
8113b7f4:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113b7f8:	e0fff017 	ldw	r3,-64(fp)
8113b7fc:	e0bff617 	ldw	r2,-40(fp)
8113b800:	1884703a 	and	r2,r3,r2
8113b804:	1000031e 	bne	r2,zero,8113b814 <alt_msgdma_descriptor_sync_transfer+0x344>
8113b808:	e0bff017 	ldw	r2,-64(fp)
8113b80c:	1080004c 	andi	r2,r2,1
8113b810:	103fe41e 	bne	r2,zero,8113b7a4 <__reset+0xfb11b7a4>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8113b814:	e0fff017 	ldw	r3,-64(fp)
8113b818:	e0bff617 	ldw	r2,-40(fp)
8113b81c:	1884703a 	and	r2,r3,r2
8113b820:	10000626 	beq	r2,zero,8113b83c <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113b824:	e0bffd17 	ldw	r2,-12(fp)
8113b828:	10801817 	ldw	r2,96(r2)
8113b82c:	1009883a 	mov	r4,r2
8113b830:	1131a900 	call	81131a90 <OSSemPost>
		
        return error;
8113b834:	e0bff617 	ldw	r2,-40(fp)
8113b838:	00002206 	br	8113b8c4 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8113b83c:	e0bffd17 	ldw	r2,-12(fp)
8113b840:	10800317 	ldw	r2,12(r2)
8113b844:	10800104 	addi	r2,r2,4
8113b848:	10800037 	ldwio	r2,0(r2)
8113b84c:	10800814 	ori	r2,r2,32
8113b850:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b854:	0005303a 	rdctl	r2,status
8113b858:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b85c:	e0fffa17 	ldw	r3,-24(fp)
8113b860:	00bfff84 	movi	r2,-2
8113b864:	1884703a 	and	r2,r3,r2
8113b868:	1001703a 	wrctl	status,r2
  
  return context;
8113b86c:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8113b870:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b874:	e0bffd17 	ldw	r2,-12(fp)
8113b878:	10800317 	ldw	r2,12(r2)
8113b87c:	10800104 	addi	r2,r2,4
8113b880:	e0fff417 	ldw	r3,-48(fp)
8113b884:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113b888:	e0bffd17 	ldw	r2,-12(fp)
8113b88c:	10800317 	ldw	r2,12(r2)
8113b890:	e0fffd17 	ldw	r3,-12(fp)
8113b894:	18c00317 	ldw	r3,12(r3)
8113b898:	18c00037 	ldwio	r3,0(r3)
8113b89c:	10c00035 	stwio	r3,0(r2)
8113b8a0:	e0bff517 	ldw	r2,-44(fp)
8113b8a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b8a8:	e0bff917 	ldw	r2,-28(fp)
8113b8ac:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
8113b8b0:	e0bffd17 	ldw	r2,-12(fp)
8113b8b4:	10801817 	ldw	r2,96(r2)
8113b8b8:	1009883a 	mov	r4,r2
8113b8bc:	1131a900 	call	81131a90 <OSSemPost>
    
    return 0;
8113b8c0:	0005883a 	mov	r2,zero

}
8113b8c4:	e037883a 	mov	sp,fp
8113b8c8:	dfc00117 	ldw	ra,4(sp)
8113b8cc:	df000017 	ldw	fp,0(sp)
8113b8d0:	dec00204 	addi	sp,sp,8
8113b8d4:	f800283a 	ret

8113b8d8 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8113b8d8:	defff804 	addi	sp,sp,-32
8113b8dc:	de00012e 	bgeu	sp,et,8113b8e4 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
8113b8e0:	003b68fa 	trap	3
8113b8e4:	dfc00715 	stw	ra,28(sp)
8113b8e8:	df000615 	stw	fp,24(sp)
8113b8ec:	df000604 	addi	fp,sp,24
8113b8f0:	e13ffc15 	stw	r4,-16(fp)
8113b8f4:	e17ffd15 	stw	r5,-12(fp)
8113b8f8:	e1bffe15 	stw	r6,-8(fp)
8113b8fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8113b900:	e0800217 	ldw	r2,8(fp)
8113b904:	d8800115 	stw	r2,4(sp)
8113b908:	e0bfff17 	ldw	r2,-4(fp)
8113b90c:	d8800015 	stw	r2,0(sp)
8113b910:	e1fffe17 	ldw	r7,-8(fp)
8113b914:	000d883a 	mov	r6,zero
8113b918:	e17ffd17 	ldw	r5,-12(fp)
8113b91c:	e13ffc17 	ldw	r4,-16(fp)
8113b920:	113afa00 	call	8113afa0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113b924:	e037883a 	mov	sp,fp
8113b928:	dfc00117 	ldw	ra,4(sp)
8113b92c:	df000017 	ldw	fp,0(sp)
8113b930:	dec00204 	addi	sp,sp,8
8113b934:	f800283a 	ret

8113b938 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8113b938:	defff804 	addi	sp,sp,-32
8113b93c:	de00012e 	bgeu	sp,et,8113b944 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
8113b940:	003b68fa 	trap	3
8113b944:	dfc00715 	stw	ra,28(sp)
8113b948:	df000615 	stw	fp,24(sp)
8113b94c:	df000604 	addi	fp,sp,24
8113b950:	e13ffc15 	stw	r4,-16(fp)
8113b954:	e17ffd15 	stw	r5,-12(fp)
8113b958:	e1bffe15 	stw	r6,-8(fp)
8113b95c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113b960:	e0800217 	ldw	r2,8(fp)
8113b964:	d8800115 	stw	r2,4(sp)
8113b968:	e0bfff17 	ldw	r2,-4(fp)
8113b96c:	d8800015 	stw	r2,0(sp)
8113b970:	000f883a 	mov	r7,zero
8113b974:	e1bffe17 	ldw	r6,-8(fp)
8113b978:	e17ffd17 	ldw	r5,-12(fp)
8113b97c:	e13ffc17 	ldw	r4,-16(fp)
8113b980:	113afa00 	call	8113afa0 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8113b984:	e037883a 	mov	sp,fp
8113b988:	dfc00117 	ldw	ra,4(sp)
8113b98c:	df000017 	ldw	fp,0(sp)
8113b990:	dec00204 	addi	sp,sp,8
8113b994:	f800283a 	ret

8113b998 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113b998:	defff804 	addi	sp,sp,-32
8113b99c:	de00012e 	bgeu	sp,et,8113b9a4 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113b9a0:	003b68fa 	trap	3
8113b9a4:	dfc00715 	stw	ra,28(sp)
8113b9a8:	df000615 	stw	fp,24(sp)
8113b9ac:	df000604 	addi	fp,sp,24
8113b9b0:	e13ffc15 	stw	r4,-16(fp)
8113b9b4:	e17ffd15 	stw	r5,-12(fp)
8113b9b8:	e1bffe15 	stw	r6,-8(fp)
8113b9bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113b9c0:	e0800317 	ldw	r2,12(fp)
8113b9c4:	d8800115 	stw	r2,4(sp)
8113b9c8:	e0800217 	ldw	r2,8(fp)
8113b9cc:	d8800015 	stw	r2,0(sp)
8113b9d0:	e1ffff17 	ldw	r7,-4(fp)
8113b9d4:	e1bffe17 	ldw	r6,-8(fp)
8113b9d8:	e17ffd17 	ldw	r5,-12(fp)
8113b9dc:	e13ffc17 	ldw	r4,-16(fp)
8113b9e0:	113afa00 	call	8113afa0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113b9e4:	e037883a 	mov	sp,fp
8113b9e8:	dfc00117 	ldw	ra,4(sp)
8113b9ec:	df000017 	ldw	fp,0(sp)
8113b9f0:	dec00204 	addi	sp,sp,8
8113b9f4:	f800283a 	ret

8113b9f8 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8113b9f8:	defff004 	addi	sp,sp,-64
8113b9fc:	de00012e 	bgeu	sp,et,8113ba04 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
8113ba00:	003b68fa 	trap	3
8113ba04:	dfc00f15 	stw	ra,60(sp)
8113ba08:	df000e15 	stw	fp,56(sp)
8113ba0c:	df000e04 	addi	fp,sp,56
8113ba10:	e13ff915 	stw	r4,-28(fp)
8113ba14:	e17ffa15 	stw	r5,-24(fp)
8113ba18:	e1bffb15 	stw	r6,-20(fp)
8113ba1c:	e1fffc15 	stw	r7,-16(fp)
8113ba20:	e1000317 	ldw	r4,12(fp)
8113ba24:	e0c00417 	ldw	r3,16(fp)
8113ba28:	e0800517 	ldw	r2,20(fp)
8113ba2c:	e13ffd0d 	sth	r4,-12(fp)
8113ba30:	e0fffe05 	stb	r3,-8(fp)
8113ba34:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113ba38:	e0bffd0b 	ldhu	r2,-12(fp)
8113ba3c:	e0fffe03 	ldbu	r3,-8(fp)
8113ba40:	e13fff0b 	ldhu	r4,-4(fp)
8113ba44:	d9000615 	stw	r4,24(sp)
8113ba48:	d8000515 	stw	zero,20(sp)
8113ba4c:	d8c00415 	stw	r3,16(sp)
8113ba50:	d8000315 	stw	zero,12(sp)
8113ba54:	d8800215 	stw	r2,8(sp)
8113ba58:	e0800217 	ldw	r2,8(fp)
8113ba5c:	d8800115 	stw	r2,4(sp)
8113ba60:	e0bffc17 	ldw	r2,-16(fp)
8113ba64:	d8800015 	stw	r2,0(sp)
8113ba68:	e1fffb17 	ldw	r7,-20(fp)
8113ba6c:	000d883a 	mov	r6,zero
8113ba70:	e17ffa17 	ldw	r5,-24(fp)
8113ba74:	e13ff917 	ldw	r4,-28(fp)
8113ba78:	113b0340 	call	8113b034 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8113ba7c:	e037883a 	mov	sp,fp
8113ba80:	dfc00117 	ldw	ra,4(sp)
8113ba84:	df000017 	ldw	fp,0(sp)
8113ba88:	dec00204 	addi	sp,sp,8
8113ba8c:	f800283a 	ret

8113ba90 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113ba90:	defff004 	addi	sp,sp,-64
8113ba94:	de00012e 	bgeu	sp,et,8113ba9c <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
8113ba98:	003b68fa 	trap	3
8113ba9c:	dfc00f15 	stw	ra,60(sp)
8113baa0:	df000e15 	stw	fp,56(sp)
8113baa4:	df000e04 	addi	fp,sp,56
8113baa8:	e13ff915 	stw	r4,-28(fp)
8113baac:	e17ffa15 	stw	r5,-24(fp)
8113bab0:	e1bffb15 	stw	r6,-20(fp)
8113bab4:	e1fffc15 	stw	r7,-16(fp)
8113bab8:	e1000317 	ldw	r4,12(fp)
8113babc:	e0c00417 	ldw	r3,16(fp)
8113bac0:	e0800517 	ldw	r2,20(fp)
8113bac4:	e13ffd0d 	sth	r4,-12(fp)
8113bac8:	e0fffe05 	stb	r3,-8(fp)
8113bacc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8113bad0:	e0bffd0b 	ldhu	r2,-12(fp)
8113bad4:	e0fffe03 	ldbu	r3,-8(fp)
8113bad8:	e13fff0b 	ldhu	r4,-4(fp)
8113badc:	d8000615 	stw	zero,24(sp)
8113bae0:	d9000515 	stw	r4,20(sp)
8113bae4:	d8000415 	stw	zero,16(sp)
8113bae8:	d8c00315 	stw	r3,12(sp)
8113baec:	d8800215 	stw	r2,8(sp)
8113baf0:	e0800217 	ldw	r2,8(fp)
8113baf4:	d8800115 	stw	r2,4(sp)
8113baf8:	e0bffc17 	ldw	r2,-16(fp)
8113bafc:	d8800015 	stw	r2,0(sp)
8113bb00:	000f883a 	mov	r7,zero
8113bb04:	e1bffb17 	ldw	r6,-20(fp)
8113bb08:	e17ffa17 	ldw	r5,-24(fp)
8113bb0c:	e13ff917 	ldw	r4,-28(fp)
8113bb10:	113b0340 	call	8113b034 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8113bb14:	e037883a 	mov	sp,fp
8113bb18:	dfc00117 	ldw	ra,4(sp)
8113bb1c:	df000017 	ldw	fp,0(sp)
8113bb20:	dec00204 	addi	sp,sp,8
8113bb24:	f800283a 	ret

8113bb28 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113bb28:	deffee04 	addi	sp,sp,-72
8113bb2c:	de00012e 	bgeu	sp,et,8113bb34 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113bb30:	003b68fa 	trap	3
8113bb34:	dfc01115 	stw	ra,68(sp)
8113bb38:	df001015 	stw	fp,64(sp)
8113bb3c:	df001004 	addi	fp,sp,64
8113bb40:	e13ff715 	stw	r4,-36(fp)
8113bb44:	e17ff815 	stw	r5,-32(fp)
8113bb48:	e1bff915 	stw	r6,-28(fp)
8113bb4c:	e1fffa15 	stw	r7,-24(fp)
8113bb50:	e1800417 	ldw	r6,16(fp)
8113bb54:	e1400517 	ldw	r5,20(fp)
8113bb58:	e1000617 	ldw	r4,24(fp)
8113bb5c:	e0c00717 	ldw	r3,28(fp)
8113bb60:	e0800817 	ldw	r2,32(fp)
8113bb64:	e1bffb0d 	sth	r6,-20(fp)
8113bb68:	e17ffc05 	stb	r5,-16(fp)
8113bb6c:	e13ffd05 	stb	r4,-12(fp)
8113bb70:	e0fffe0d 	sth	r3,-8(fp)
8113bb74:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113bb78:	e0bffb0b 	ldhu	r2,-20(fp)
8113bb7c:	e0fffc03 	ldbu	r3,-16(fp)
8113bb80:	e13ffd03 	ldbu	r4,-12(fp)
8113bb84:	e17ffe0b 	ldhu	r5,-8(fp)
8113bb88:	e1bfff0b 	ldhu	r6,-4(fp)
8113bb8c:	d9800615 	stw	r6,24(sp)
8113bb90:	d9400515 	stw	r5,20(sp)
8113bb94:	d9000415 	stw	r4,16(sp)
8113bb98:	d8c00315 	stw	r3,12(sp)
8113bb9c:	d8800215 	stw	r2,8(sp)
8113bba0:	e0800317 	ldw	r2,12(fp)
8113bba4:	d8800115 	stw	r2,4(sp)
8113bba8:	e0800217 	ldw	r2,8(fp)
8113bbac:	d8800015 	stw	r2,0(sp)
8113bbb0:	e1fffa17 	ldw	r7,-24(fp)
8113bbb4:	e1bff917 	ldw	r6,-28(fp)
8113bbb8:	e17ff817 	ldw	r5,-32(fp)
8113bbbc:	e13ff717 	ldw	r4,-36(fp)
8113bbc0:	113b0340 	call	8113b034 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8113bbc4:	e037883a 	mov	sp,fp
8113bbc8:	dfc00117 	ldw	ra,4(sp)
8113bbcc:	df000017 	ldw	fp,0(sp)
8113bbd0:	dec00204 	addi	sp,sp,8
8113bbd4:	f800283a 	ret

8113bbd8 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113bbd8:	defffb04 	addi	sp,sp,-20
8113bbdc:	de00012e 	bgeu	sp,et,8113bbe4 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
8113bbe0:	003b68fa 	trap	3
8113bbe4:	df000415 	stw	fp,16(sp)
8113bbe8:	df000404 	addi	fp,sp,16
8113bbec:	e13ffc15 	stw	r4,-16(fp)
8113bbf0:	e17ffd15 	stw	r5,-12(fp)
8113bbf4:	e1bffe15 	stw	r6,-8(fp)
8113bbf8:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113bbfc:	e0bffc17 	ldw	r2,-16(fp)
8113bc00:	10c01217 	ldw	r3,72(r2)
8113bc04:	e0800117 	ldw	r2,4(fp)
8113bc08:	18800436 	bltu	r3,r2,8113bc1c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113bc0c:	e0bffc17 	ldw	r2,-16(fp)
8113bc10:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113bc14:	10803fcc 	andi	r2,r2,255
8113bc18:	10000226 	beq	r2,zero,8113bc24 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113bc1c:	00bffa84 	movi	r2,-22
8113bc20:	00001406 	br	8113bc74 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
8113bc24:	e0bffd17 	ldw	r2,-12(fp)
8113bc28:	e0fffe17 	ldw	r3,-8(fp)
8113bc2c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113bc30:	e0bffd17 	ldw	r2,-12(fp)
8113bc34:	e0ffff17 	ldw	r3,-4(fp)
8113bc38:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113bc3c:	e0bffd17 	ldw	r2,-12(fp)
8113bc40:	e0c00117 	ldw	r3,4(fp)
8113bc44:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113bc48:	e0fffd17 	ldw	r3,-12(fp)
8113bc4c:	e0bffd17 	ldw	r2,-12(fp)
8113bc50:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113bc54:	e0c00217 	ldw	r3,8(fp)
8113bc58:	00900034 	movhi	r2,16384
8113bc5c:	10bfffc4 	addi	r2,r2,-1
8113bc60:	1884703a 	and	r2,r3,r2
8113bc64:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113bc68:	e0bffd17 	ldw	r2,-12(fp)
8113bc6c:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8113bc70:	0005883a 	mov	r2,zero
}
8113bc74:	e037883a 	mov	sp,fp
8113bc78:	df000017 	ldw	fp,0(sp)
8113bc7c:	dec00104 	addi	sp,sp,4
8113bc80:	f800283a 	ret

8113bc84 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113bc84:	defff404 	addi	sp,sp,-48
8113bc88:	de00012e 	bgeu	sp,et,8113bc90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
8113bc8c:	003b68fa 	trap	3
8113bc90:	df000b15 	stw	fp,44(sp)
8113bc94:	df000b04 	addi	fp,sp,44
8113bc98:	e13ff715 	stw	r4,-36(fp)
8113bc9c:	e17ff815 	stw	r5,-32(fp)
8113bca0:	e1bff915 	stw	r6,-28(fp)
8113bca4:	e1fffa15 	stw	r7,-24(fp)
8113bca8:	e1800517 	ldw	r6,20(fp)
8113bcac:	e1400617 	ldw	r5,24(fp)
8113bcb0:	e1000717 	ldw	r4,28(fp)
8113bcb4:	e0c00817 	ldw	r3,32(fp)
8113bcb8:	e0800917 	ldw	r2,36(fp)
8113bcbc:	e1bffb0d 	sth	r6,-20(fp)
8113bcc0:	e17ffc05 	stb	r5,-16(fp)
8113bcc4:	e13ffd05 	stb	r4,-12(fp)
8113bcc8:	e0fffe0d 	sth	r3,-8(fp)
8113bccc:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113bcd0:	e0bff717 	ldw	r2,-36(fp)
8113bcd4:	10c01217 	ldw	r3,72(r2)
8113bcd8:	e0800317 	ldw	r2,12(fp)
8113bcdc:	18801936 	bltu	r3,r2,8113bd44 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113bce0:	e13ff717 	ldw	r4,-36(fp)
8113bce4:	20801317 	ldw	r2,76(r4)
8113bce8:	20c01417 	ldw	r3,80(r4)
8113bcec:	e13ffe0b 	ldhu	r4,-8(fp)
8113bcf0:	213fffcc 	andi	r4,r4,65535
8113bcf4:	2015883a 	mov	r10,r4
8113bcf8:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113bcfc:	1ac01136 	bltu	r3,r11,8113bd44 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113bd00:	58c0011e 	bne	r11,r3,8113bd08 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
8113bd04:	12800f36 	bltu	r2,r10,8113bd44 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113bd08:	e13ff717 	ldw	r4,-36(fp)
8113bd0c:	20801317 	ldw	r2,76(r4)
8113bd10:	20c01417 	ldw	r3,80(r4)
8113bd14:	e13fff0b 	ldhu	r4,-4(fp)
8113bd18:	213fffcc 	andi	r4,r4,65535
8113bd1c:	2011883a 	mov	r8,r4
8113bd20:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113bd24:	1a400736 	bltu	r3,r9,8113bd44 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113bd28:	48c0011e 	bne	r9,r3,8113bd30 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
8113bd2c:	12000536 	bltu	r2,r8,8113bd44 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113bd30:	e0bff717 	ldw	r2,-36(fp)
8113bd34:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113bd38:	10803fcc 	andi	r2,r2,255
8113bd3c:	10800060 	cmpeqi	r2,r2,1
8113bd40:	1000021e 	bne	r2,zero,8113bd4c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113bd44:	00bffa84 	movi	r2,-22
8113bd48:	00003106 	br	8113be10 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
8113bd4c:	e0bff817 	ldw	r2,-32(fp)
8113bd50:	e0fff917 	ldw	r3,-28(fp)
8113bd54:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113bd58:	e0bff817 	ldw	r2,-32(fp)
8113bd5c:	e0fffa17 	ldw	r3,-24(fp)
8113bd60:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8113bd64:	e0bff817 	ldw	r2,-32(fp)
8113bd68:	e0c00117 	ldw	r3,4(fp)
8113bd6c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8113bd70:	e0bff817 	ldw	r2,-32(fp)
8113bd74:	e0c00217 	ldw	r3,8(fp)
8113bd78:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113bd7c:	e0bff817 	ldw	r2,-32(fp)
8113bd80:	e0c00317 	ldw	r3,12(fp)
8113bd84:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113bd88:	e0bff817 	ldw	r2,-32(fp)
8113bd8c:	e0fffb0b 	ldhu	r3,-20(fp)
8113bd90:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8113bd94:	e0bff817 	ldw	r2,-32(fp)
8113bd98:	e0fffc03 	ldbu	r3,-16(fp)
8113bd9c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8113bda0:	e0bff817 	ldw	r2,-32(fp)
8113bda4:	e0fffd03 	ldbu	r3,-12(fp)
8113bda8:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8113bdac:	e0bff817 	ldw	r2,-32(fp)
8113bdb0:	e0fffe0b 	ldhu	r3,-8(fp)
8113bdb4:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8113bdb8:	e0bff817 	ldw	r2,-32(fp)
8113bdbc:	e0ffff0b 	ldhu	r3,-4(fp)
8113bdc0:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8113bdc4:	e0bff817 	ldw	r2,-32(fp)
8113bdc8:	1019883a 	mov	r12,r2
8113bdcc:	001b883a 	mov	r13,zero
8113bdd0:	e33ff515 	stw	r12,-44(fp)
8113bdd4:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8113bdd8:	e0fff517 	ldw	r3,-44(fp)
8113bddc:	e0bff817 	ldw	r2,-32(fp)
8113bde0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8113bde4:	e0fff617 	ldw	r3,-40(fp)
8113bde8:	e0bff817 	ldw	r2,-32(fp)
8113bdec:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113bdf0:	e0c00417 	ldw	r3,16(fp)
8113bdf4:	00900034 	movhi	r2,16384
8113bdf8:	10bfffc4 	addi	r2,r2,-1
8113bdfc:	1884703a 	and	r2,r3,r2
8113be00:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8113be04:	e0bff817 	ldw	r2,-32(fp)
8113be08:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8113be0c:	0005883a 	mov	r2,zero
}
8113be10:	e037883a 	mov	sp,fp
8113be14:	df000017 	ldw	fp,0(sp)
8113be18:	dec00104 	addi	sp,sp,4
8113be1c:	f800283a 	ret

8113be20 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8113be20:	defff804 	addi	sp,sp,-32
8113be24:	de00012e 	bgeu	sp,et,8113be2c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113be28:	003b68fa 	trap	3
8113be2c:	dfc00715 	stw	ra,28(sp)
8113be30:	df000615 	stw	fp,24(sp)
8113be34:	df000604 	addi	fp,sp,24
8113be38:	e13ffc15 	stw	r4,-16(fp)
8113be3c:	e17ffd15 	stw	r5,-12(fp)
8113be40:	e1bffe15 	stw	r6,-8(fp)
8113be44:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113be48:	e0800317 	ldw	r2,12(fp)
8113be4c:	d8800115 	stw	r2,4(sp)
8113be50:	e0800217 	ldw	r2,8(fp)
8113be54:	d8800015 	stw	r2,0(sp)
8113be58:	e1ffff17 	ldw	r7,-4(fp)
8113be5c:	e1bffe17 	ldw	r6,-8(fp)
8113be60:	e17ffd17 	ldw	r5,-12(fp)
8113be64:	e13ffc17 	ldw	r4,-16(fp)
8113be68:	113bbd80 	call	8113bbd8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8113be6c:	e037883a 	mov	sp,fp
8113be70:	dfc00117 	ldw	ra,4(sp)
8113be74:	df000017 	ldw	fp,0(sp)
8113be78:	dec00204 	addi	sp,sp,8
8113be7c:	f800283a 	ret

8113be80 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113be80:	defff804 	addi	sp,sp,-32
8113be84:	de00012e 	bgeu	sp,et,8113be8c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
8113be88:	003b68fa 	trap	3
8113be8c:	dfc00715 	stw	ra,28(sp)
8113be90:	df000615 	stw	fp,24(sp)
8113be94:	df000604 	addi	fp,sp,24
8113be98:	e13ffc15 	stw	r4,-16(fp)
8113be9c:	e17ffd15 	stw	r5,-12(fp)
8113bea0:	e1bffe15 	stw	r6,-8(fp)
8113bea4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113bea8:	e0800217 	ldw	r2,8(fp)
8113beac:	d8800115 	stw	r2,4(sp)
8113beb0:	e0bfff17 	ldw	r2,-4(fp)
8113beb4:	d8800015 	stw	r2,0(sp)
8113beb8:	e1fffe17 	ldw	r7,-8(fp)
8113bebc:	000d883a 	mov	r6,zero
8113bec0:	e17ffd17 	ldw	r5,-12(fp)
8113bec4:	e13ffc17 	ldw	r4,-16(fp)
8113bec8:	113bbd80 	call	8113bbd8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8113becc:	e037883a 	mov	sp,fp
8113bed0:	dfc00117 	ldw	ra,4(sp)
8113bed4:	df000017 	ldw	fp,0(sp)
8113bed8:	dec00204 	addi	sp,sp,8
8113bedc:	f800283a 	ret

8113bee0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113bee0:	defff804 	addi	sp,sp,-32
8113bee4:	de00012e 	bgeu	sp,et,8113beec <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
8113bee8:	003b68fa 	trap	3
8113beec:	dfc00715 	stw	ra,28(sp)
8113bef0:	df000615 	stw	fp,24(sp)
8113bef4:	df000604 	addi	fp,sp,24
8113bef8:	e13ffc15 	stw	r4,-16(fp)
8113befc:	e17ffd15 	stw	r5,-12(fp)
8113bf00:	e1bffe15 	stw	r6,-8(fp)
8113bf04:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113bf08:	e0800217 	ldw	r2,8(fp)
8113bf0c:	d8800115 	stw	r2,4(sp)
8113bf10:	e0bfff17 	ldw	r2,-4(fp)
8113bf14:	d8800015 	stw	r2,0(sp)
8113bf18:	000f883a 	mov	r7,zero
8113bf1c:	e1bffe17 	ldw	r6,-8(fp)
8113bf20:	e17ffd17 	ldw	r5,-12(fp)
8113bf24:	e13ffc17 	ldw	r4,-16(fp)
8113bf28:	113bbd80 	call	8113bbd8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8113bf2c:	e037883a 	mov	sp,fp
8113bf30:	dfc00117 	ldw	ra,4(sp)
8113bf34:	df000017 	ldw	fp,0(sp)
8113bf38:	dec00204 	addi	sp,sp,8
8113bf3c:	f800283a 	ret

8113bf40 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113bf40:	deffee04 	addi	sp,sp,-72
8113bf44:	de00012e 	bgeu	sp,et,8113bf4c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113bf48:	003b68fa 	trap	3
8113bf4c:	dfc01115 	stw	ra,68(sp)
8113bf50:	df001015 	stw	fp,64(sp)
8113bf54:	df001004 	addi	fp,sp,64
8113bf58:	e13ff915 	stw	r4,-28(fp)
8113bf5c:	e17ffa15 	stw	r5,-24(fp)
8113bf60:	e1bffb15 	stw	r6,-20(fp)
8113bf64:	e1fffc15 	stw	r7,-16(fp)
8113bf68:	e1000417 	ldw	r4,16(fp)
8113bf6c:	e0c00517 	ldw	r3,20(fp)
8113bf70:	e0800617 	ldw	r2,24(fp)
8113bf74:	e13ffd0d 	sth	r4,-12(fp)
8113bf78:	e0fffe05 	stb	r3,-8(fp)
8113bf7c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113bf80:	e0bffd0b 	ldhu	r2,-12(fp)
8113bf84:	e0fffe03 	ldbu	r3,-8(fp)
8113bf88:	e13fff0b 	ldhu	r4,-4(fp)
8113bf8c:	d9000815 	stw	r4,32(sp)
8113bf90:	d8000715 	stw	zero,28(sp)
8113bf94:	d8c00615 	stw	r3,24(sp)
8113bf98:	d8000515 	stw	zero,20(sp)
8113bf9c:	d8800415 	stw	r2,16(sp)
8113bfa0:	e0800317 	ldw	r2,12(fp)
8113bfa4:	d8800315 	stw	r2,12(sp)
8113bfa8:	e0800217 	ldw	r2,8(fp)
8113bfac:	d8800215 	stw	r2,8(sp)
8113bfb0:	e0bffc17 	ldw	r2,-16(fp)
8113bfb4:	d8800115 	stw	r2,4(sp)
8113bfb8:	e0bffb17 	ldw	r2,-20(fp)
8113bfbc:	d8800015 	stw	r2,0(sp)
8113bfc0:	000f883a 	mov	r7,zero
8113bfc4:	000d883a 	mov	r6,zero
8113bfc8:	e17ffa17 	ldw	r5,-24(fp)
8113bfcc:	e13ff917 	ldw	r4,-28(fp)
8113bfd0:	113bc840 	call	8113bc84 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8113bfd4:	e037883a 	mov	sp,fp
8113bfd8:	dfc00117 	ldw	ra,4(sp)
8113bfdc:	df000017 	ldw	fp,0(sp)
8113bfe0:	dec00204 	addi	sp,sp,8
8113bfe4:	f800283a 	ret

8113bfe8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113bfe8:	deffee04 	addi	sp,sp,-72
8113bfec:	de00012e 	bgeu	sp,et,8113bff4 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
8113bff0:	003b68fa 	trap	3
8113bff4:	dfc01115 	stw	ra,68(sp)
8113bff8:	df001015 	stw	fp,64(sp)
8113bffc:	df001004 	addi	fp,sp,64
8113c000:	e13ff915 	stw	r4,-28(fp)
8113c004:	e17ffa15 	stw	r5,-24(fp)
8113c008:	e1bffb15 	stw	r6,-20(fp)
8113c00c:	e1fffc15 	stw	r7,-16(fp)
8113c010:	e1000417 	ldw	r4,16(fp)
8113c014:	e0c00517 	ldw	r3,20(fp)
8113c018:	e0800617 	ldw	r2,24(fp)
8113c01c:	e13ffd0d 	sth	r4,-12(fp)
8113c020:	e0fffe05 	stb	r3,-8(fp)
8113c024:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113c028:	e0bffd0b 	ldhu	r2,-12(fp)
8113c02c:	e0fffe03 	ldbu	r3,-8(fp)
8113c030:	e13fff0b 	ldhu	r4,-4(fp)
8113c034:	d8000815 	stw	zero,32(sp)
8113c038:	d9000715 	stw	r4,28(sp)
8113c03c:	d8000615 	stw	zero,24(sp)
8113c040:	d8c00515 	stw	r3,20(sp)
8113c044:	d8800415 	stw	r2,16(sp)
8113c048:	e0800317 	ldw	r2,12(fp)
8113c04c:	d8800315 	stw	r2,12(sp)
8113c050:	e0800217 	ldw	r2,8(fp)
8113c054:	d8800215 	stw	r2,8(sp)
8113c058:	d8000115 	stw	zero,4(sp)
8113c05c:	d8000015 	stw	zero,0(sp)
8113c060:	e1fffc17 	ldw	r7,-16(fp)
8113c064:	e1bffb17 	ldw	r6,-20(fp)
8113c068:	e17ffa17 	ldw	r5,-24(fp)
8113c06c:	e13ff917 	ldw	r4,-28(fp)
8113c070:	113bc840 	call	8113bc84 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8113c074:	e037883a 	mov	sp,fp
8113c078:	dfc00117 	ldw	ra,4(sp)
8113c07c:	df000017 	ldw	fp,0(sp)
8113c080:	dec00204 	addi	sp,sp,8
8113c084:	f800283a 	ret

8113c088 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113c088:	deffec04 	addi	sp,sp,-80
8113c08c:	de00012e 	bgeu	sp,et,8113c094 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113c090:	003b68fa 	trap	3
8113c094:	dfc01315 	stw	ra,76(sp)
8113c098:	df001215 	stw	fp,72(sp)
8113c09c:	df001204 	addi	fp,sp,72
8113c0a0:	e13ff715 	stw	r4,-36(fp)
8113c0a4:	e17ff815 	stw	r5,-32(fp)
8113c0a8:	e1bff915 	stw	r6,-28(fp)
8113c0ac:	e1fffa15 	stw	r7,-24(fp)
8113c0b0:	e1800617 	ldw	r6,24(fp)
8113c0b4:	e1400717 	ldw	r5,28(fp)
8113c0b8:	e1000817 	ldw	r4,32(fp)
8113c0bc:	e0c00917 	ldw	r3,36(fp)
8113c0c0:	e0800a17 	ldw	r2,40(fp)
8113c0c4:	e1bffb0d 	sth	r6,-20(fp)
8113c0c8:	e17ffc05 	stb	r5,-16(fp)
8113c0cc:	e13ffd05 	stb	r4,-12(fp)
8113c0d0:	e0fffe0d 	sth	r3,-8(fp)
8113c0d4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113c0d8:	e0bffb0b 	ldhu	r2,-20(fp)
8113c0dc:	e0fffc03 	ldbu	r3,-16(fp)
8113c0e0:	e13ffd03 	ldbu	r4,-12(fp)
8113c0e4:	e17ffe0b 	ldhu	r5,-8(fp)
8113c0e8:	e1bfff0b 	ldhu	r6,-4(fp)
8113c0ec:	d9800815 	stw	r6,32(sp)
8113c0f0:	d9400715 	stw	r5,28(sp)
8113c0f4:	d9000615 	stw	r4,24(sp)
8113c0f8:	d8c00515 	stw	r3,20(sp)
8113c0fc:	d8800415 	stw	r2,16(sp)
8113c100:	e0800517 	ldw	r2,20(fp)
8113c104:	d8800315 	stw	r2,12(sp)
8113c108:	e0800417 	ldw	r2,16(fp)
8113c10c:	d8800215 	stw	r2,8(sp)
8113c110:	e0800317 	ldw	r2,12(fp)
8113c114:	d8800115 	stw	r2,4(sp)
8113c118:	e0800217 	ldw	r2,8(fp)
8113c11c:	d8800015 	stw	r2,0(sp)
8113c120:	e1fffa17 	ldw	r7,-24(fp)
8113c124:	e1bff917 	ldw	r6,-28(fp)
8113c128:	e17ff817 	ldw	r5,-32(fp)
8113c12c:	e13ff717 	ldw	r4,-36(fp)
8113c130:	113bc840 	call	8113bc84 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8113c134:	e037883a 	mov	sp,fp
8113c138:	dfc00117 	ldw	ra,4(sp)
8113c13c:	df000017 	ldw	fp,0(sp)
8113c140:	dec00204 	addi	sp,sp,8
8113c144:	f800283a 	ret

8113c148 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113c148:	defffc04 	addi	sp,sp,-16
8113c14c:	de00012e 	bgeu	sp,et,8113c154 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
8113c150:	003b68fa 	trap	3
8113c154:	df000315 	stw	fp,12(sp)
8113c158:	df000304 	addi	fp,sp,12
8113c15c:	e13ffe15 	stw	r4,-8(fp)
8113c160:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8113c164:	e0bfff17 	ldw	r2,-4(fp)
8113c168:	1000021e 	bne	r2,zero,8113c174 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113c16c:	00bffa84 	movi	r2,-22
8113c170:	00002f06 	br	8113c230 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8113c174:	e0bfff17 	ldw	r2,-4(fp)
8113c178:	10c00317 	ldw	r3,12(r2)
8113c17c:	e0bfff17 	ldw	r2,-4(fp)
8113c180:	18800226 	beq	r3,r2,8113c18c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113c184:	00bffa84 	movi	r2,-22
8113c188:	00002906 	br	8113c230 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
8113c18c:	e0bffe17 	ldw	r2,-8(fp)
8113c190:	10800017 	ldw	r2,0(r2)
8113c194:	1000051e 	bne	r2,zero,8113c1ac <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8113c198:	e0bffe17 	ldw	r2,-8(fp)
8113c19c:	e0ffff17 	ldw	r3,-4(fp)
8113c1a0:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8113c1a4:	0005883a 	mov	r2,zero
8113c1a8:	00002106 	br	8113c230 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
8113c1ac:	e0bffe17 	ldw	r2,-8(fp)
8113c1b0:	10c00017 	ldw	r3,0(r2)
8113c1b4:	e0bfff17 	ldw	r2,-4(fp)
8113c1b8:	1880021e 	bne	r3,r2,8113c1c4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113c1bc:	00bffa84 	movi	r2,-22
8113c1c0:	00001b06 	br	8113c230 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113c1c4:	e0bffe17 	ldw	r2,-8(fp)
8113c1c8:	10800017 	ldw	r2,0(r2)
8113c1cc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113c1d0:	00000906 	br	8113c1f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8113c1d4:	e0bffd17 	ldw	r2,-12(fp)
8113c1d8:	10c00317 	ldw	r3,12(r2)
8113c1dc:	e0bfff17 	ldw	r2,-4(fp)
8113c1e0:	1880021e 	bne	r3,r2,8113c1ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113c1e4:	00bffa84 	movi	r2,-22
8113c1e8:	00001106 	br	8113c230 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113c1ec:	e0bffd17 	ldw	r2,-12(fp)
8113c1f0:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8113c1f4:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113c1f8:	e0bffd17 	ldw	r2,-12(fp)
8113c1fc:	10800317 	ldw	r2,12(r2)
8113c200:	e0fffe17 	ldw	r3,-8(fp)
8113c204:	18c00017 	ldw	r3,0(r3)
8113c208:	10fff21e 	bne	r2,r3,8113c1d4 <__reset+0xfb11c1d4>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8113c20c:	e0ffff17 	ldw	r3,-4(fp)
8113c210:	e0bffd17 	ldw	r2,-12(fp)
8113c214:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8113c218:	e0bffe17 	ldw	r2,-8(fp)
8113c21c:	10800017 	ldw	r2,0(r2)
8113c220:	1007883a 	mov	r3,r2
8113c224:	e0bfff17 	ldw	r2,-4(fp)
8113c228:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8113c22c:	0005883a 	mov	r2,zero
}
8113c230:	e037883a 	mov	sp,fp
8113c234:	df000017 	ldw	fp,0(sp)
8113c238:	dec00104 	addi	sp,sp,4
8113c23c:	f800283a 	ret

8113c240 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113c240:	defff804 	addi	sp,sp,-32
8113c244:	de00012e 	bgeu	sp,et,8113c24c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
8113c248:	003b68fa 	trap	3
8113c24c:	df000715 	stw	fp,28(sp)
8113c250:	df000704 	addi	fp,sp,28
8113c254:	e13ffe15 	stw	r4,-8(fp)
8113c258:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8113c25c:	e13fff17 	ldw	r4,-4(fp)
8113c260:	2000021e 	bne	r4,zero,8113c26c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113c264:	00bffa84 	movi	r2,-22
8113c268:	00005906 	br	8113c3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8113c26c:	e13fff17 	ldw	r4,-4(fp)
8113c270:	2015883a 	mov	r10,r4
8113c274:	0017883a 	mov	r11,zero
8113c278:	e2bffc15 	stw	r10,-16(fp)
8113c27c:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113c280:	e13fff17 	ldw	r4,-4(fp)
8113c284:	21400317 	ldw	r5,12(r4)
8113c288:	e13ffc17 	ldw	r4,-16(fp)
8113c28c:	29000626 	beq	r5,r4,8113c2a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113c290:	e13fff17 	ldw	r4,-4(fp)
8113c294:	21400b17 	ldw	r5,44(r4)
8113c298:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113c29c:	29000226 	beq	r5,r4,8113c2a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113c2a0:	00bffa84 	movi	r2,-22
8113c2a4:	00004a06 	br	8113c3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
8113c2a8:	e13ffe17 	ldw	r4,-8(fp)
8113c2ac:	21000017 	ldw	r4,0(r4)
8113c2b0:	2000051e 	bne	r4,zero,8113c2c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8113c2b4:	e0bffe17 	ldw	r2,-8(fp)
8113c2b8:	e0ffff17 	ldw	r3,-4(fp)
8113c2bc:	10c00015 	stw	r3,0(r2)
		return 0;
8113c2c0:	0005883a 	mov	r2,zero
8113c2c4:	00004206 	br	8113c3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
8113c2c8:	e13ffe17 	ldw	r4,-8(fp)
8113c2cc:	21400017 	ldw	r5,0(r4)
8113c2d0:	e13fff17 	ldw	r4,-4(fp)
8113c2d4:	2900021e 	bne	r5,r4,8113c2e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113c2d8:	00bffa84 	movi	r2,-22
8113c2dc:	00003c06 	br	8113c3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113c2e0:	e13ffe17 	ldw	r4,-8(fp)
8113c2e4:	21000017 	ldw	r4,0(r4)
8113c2e8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8113c2ec:	e13ffe17 	ldw	r4,-8(fp)
8113c2f0:	21000017 	ldw	r4,0(r4)
8113c2f4:	2011883a 	mov	r8,r4
8113c2f8:	0013883a 	mov	r9,zero
8113c2fc:	e23ffa15 	stw	r8,-24(fp)
8113c300:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c304:	00001806 	br	8113c368 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113c308:	e13fff17 	ldw	r4,-4(fp)
8113c30c:	200d883a 	mov	r6,r4
8113c310:	000f883a 	mov	r7,zero
8113c314:	e1bffc15 	stw	r6,-16(fp)
8113c318:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8113c31c:	e13ff917 	ldw	r4,-28(fp)
8113c320:	21400317 	ldw	r5,12(r4)
8113c324:	e13ffc17 	ldw	r4,-16(fp)
8113c328:	2900061e 	bne	r5,r4,8113c344 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8113c32c:	e13ff917 	ldw	r4,-28(fp)
8113c330:	21400b17 	ldw	r5,44(r4)
8113c334:	e13ffd17 	ldw	r4,-12(fp)
8113c338:	2900021e 	bne	r5,r4,8113c344 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113c33c:	00bffa84 	movi	r2,-22
8113c340:	00002306 	br	8113c3d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113c344:	e13ff917 	ldw	r4,-28(fp)
8113c348:	21000317 	ldw	r4,12(r4)
8113c34c:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113c350:	e13ff917 	ldw	r4,-28(fp)
8113c354:	21000b17 	ldw	r4,44(r4)
8113c358:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113c35c:	e13ffc17 	ldw	r4,-16(fp)
8113c360:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113c364:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c368:	e13ff917 	ldw	r4,-28(fp)
8113c36c:	21400317 	ldw	r5,12(r4)
8113c370:	e13ffa17 	ldw	r4,-24(fp)
8113c374:	29000426 	beq	r5,r4,8113c388 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113c378:	e13ff917 	ldw	r4,-28(fp)
8113c37c:	21400b17 	ldw	r5,44(r4)
8113c380:	e13ffb17 	ldw	r4,-20(fp)
8113c384:	293fe01e 	bne	r5,r4,8113c308 <__reset+0xfb11c308>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8113c388:	e13fff17 	ldw	r4,-4(fp)
8113c38c:	2005883a 	mov	r2,r4
8113c390:	0007883a 	mov	r3,zero
8113c394:	e0bffc15 	stw	r2,-16(fp)
8113c398:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8113c39c:	e0fffc17 	ldw	r3,-16(fp)
8113c3a0:	e0bff917 	ldw	r2,-28(fp)
8113c3a4:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8113c3a8:	e0fffd17 	ldw	r3,-12(fp)
8113c3ac:	e0bff917 	ldw	r2,-28(fp)
8113c3b0:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8113c3b4:	e0fffa17 	ldw	r3,-24(fp)
8113c3b8:	e0bfff17 	ldw	r2,-4(fp)
8113c3bc:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8113c3c0:	e0fffb17 	ldw	r3,-20(fp)
8113c3c4:	e0bfff17 	ldw	r2,-4(fp)
8113c3c8:	10c00b15 	stw	r3,44(r2)
	return 0;
8113c3cc:	0005883a 	mov	r2,zero
}
8113c3d0:	e037883a 	mov	sp,fp
8113c3d4:	df000017 	ldw	fp,0(sp)
8113c3d8:	dec00104 	addi	sp,sp,4
8113c3dc:	f800283a 	ret

8113c3e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8113c3e0:	defffc04 	addi	sp,sp,-16
8113c3e4:	de00012e 	bgeu	sp,et,8113c3ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
8113c3e8:	003b68fa 	trap	3
8113c3ec:	df000315 	stw	fp,12(sp)
8113c3f0:	df000304 	addi	fp,sp,12
8113c3f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113c3f8:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8113c3fc:	e0bfff17 	ldw	r2,-4(fp)
8113c400:	1000021e 	bne	r2,zero,8113c40c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113c404:	00bffa84 	movi	r2,-22
8113c408:	00001906 	br	8113c470 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113c40c:	e0bfff17 	ldw	r2,-4(fp)
8113c410:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113c414:	00000a06 	br	8113c440 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8113c418:	e0bffd17 	ldw	r2,-12(fp)
8113c41c:	10800717 	ldw	r2,28(r2)
8113c420:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c424:	e0bffe17 	ldw	r2,-8(fp)
8113c428:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113c42c:	e0bffd17 	ldw	r2,-12(fp)
8113c430:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113c434:	e0bffd17 	ldw	r2,-12(fp)
8113c438:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8113c43c:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113c440:	e0bffd17 	ldw	r2,-12(fp)
8113c444:	10c00317 	ldw	r3,12(r2)
8113c448:	e0bfff17 	ldw	r2,-4(fp)
8113c44c:	18bff21e 	bne	r3,r2,8113c418 <__reset+0xfb11c418>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8113c450:	e0bffd17 	ldw	r2,-12(fp)
8113c454:	10800717 	ldw	r2,28(r2)
8113c458:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c45c:	e0bffe17 	ldw	r2,-8(fp)
8113c460:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113c464:	e0bffd17 	ldw	r2,-12(fp)
8113c468:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8113c46c:	0005883a 	mov	r2,zero
}
8113c470:	e037883a 	mov	sp,fp
8113c474:	df000017 	ldw	fp,0(sp)
8113c478:	dec00104 	addi	sp,sp,4
8113c47c:	f800283a 	ret

8113c480 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8113c480:	defff804 	addi	sp,sp,-32
8113c484:	de00012e 	bgeu	sp,et,8113c48c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
8113c488:	003b68fa 	trap	3
8113c48c:	df000715 	stw	fp,28(sp)
8113c490:	df000704 	addi	fp,sp,28
8113c494:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113c498:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8113c49c:	e13fff17 	ldw	r4,-4(fp)
8113c4a0:	2000021e 	bne	r4,zero,8113c4ac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113c4a4:	00bffa84 	movi	r2,-22
8113c4a8:	00002806 	br	8113c54c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113c4ac:	e13fff17 	ldw	r4,-4(fp)
8113c4b0:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8113c4b4:	e13fff17 	ldw	r4,-4(fp)
8113c4b8:	2005883a 	mov	r2,r4
8113c4bc:	0007883a 	mov	r3,zero
8113c4c0:	e0bffb15 	stw	r2,-20(fp)
8113c4c4:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c4c8:	00001006 	br	8113c50c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8113c4cc:	e0bff917 	ldw	r2,-28(fp)
8113c4d0:	10800f17 	ldw	r2,60(r2)
8113c4d4:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c4d8:	e0bffa17 	ldw	r2,-24(fp)
8113c4dc:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113c4e0:	e0bff917 	ldw	r2,-28(fp)
8113c4e4:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113c4e8:	e0bff917 	ldw	r2,-28(fp)
8113c4ec:	10800317 	ldw	r2,12(r2)
8113c4f0:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113c4f4:	e0bff917 	ldw	r2,-28(fp)
8113c4f8:	10800b17 	ldw	r2,44(r2)
8113c4fc:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113c500:	e0bffd17 	ldw	r2,-12(fp)
8113c504:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113c508:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c50c:	e0bff917 	ldw	r2,-28(fp)
8113c510:	10c00317 	ldw	r3,12(r2)
8113c514:	e0bffb17 	ldw	r2,-20(fp)
8113c518:	18800426 	beq	r3,r2,8113c52c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113c51c:	e0bff917 	ldw	r2,-28(fp)
8113c520:	10c00b17 	ldw	r3,44(r2)
8113c524:	e0bffc17 	ldw	r2,-16(fp)
8113c528:	18bfe81e 	bne	r3,r2,8113c4cc <__reset+0xfb11c4cc>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8113c52c:	e0bff917 	ldw	r2,-28(fp)
8113c530:	10800f17 	ldw	r2,60(r2)
8113c534:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c538:	e0bffa17 	ldw	r2,-24(fp)
8113c53c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113c540:	e0bff917 	ldw	r2,-28(fp)
8113c544:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8113c548:	0005883a 	mov	r2,zero
}
8113c54c:	e037883a 	mov	sp,fp
8113c550:	df000017 	ldw	fp,0(sp)
8113c554:	dec00104 	addi	sp,sp,4
8113c558:	f800283a 	ret

8113c55c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113c55c:	deffeb04 	addi	sp,sp,-84
8113c560:	de00012e 	bgeu	sp,et,8113c568 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
8113c564:	003b68fa 	trap	3
8113c568:	dfc01415 	stw	ra,80(sp)
8113c56c:	df001315 	stw	fp,76(sp)
8113c570:	df001304 	addi	fp,sp,76
8113c574:	e13ffb15 	stw	r4,-20(fp)
8113c578:	e17ffc15 	stw	r5,-16(fp)
8113c57c:	e1bffd15 	stw	r6,-12(fp)
8113c580:	3807883a 	mov	r3,r7
8113c584:	e0800217 	ldw	r2,8(fp)
8113c588:	e0fffe05 	stb	r3,-8(fp)
8113c58c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8113c590:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
8113c594:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
8113c598:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8113c59c:	e0bffc17 	ldw	r2,-16(fp)
8113c5a0:	e0bff815 	stw	r2,-32(fp)
8113c5a4:	e0bffd17 	ldw	r2,-12(fp)
8113c5a8:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113c5ac:	e0bffb17 	ldw	r2,-20(fp)
8113c5b0:	10801817 	ldw	r2,96(r2)
8113c5b4:	e0bff615 	stw	r2,-40(fp)
8113c5b8:	e03ff70d 	sth	zero,-36(fp)
8113c5bc:	e0bff70b 	ldhu	r2,-36(fp)
8113c5c0:	e0fffa04 	addi	r3,fp,-24
8113c5c4:	180d883a 	mov	r6,r3
8113c5c8:	100b883a 	mov	r5,r2
8113c5cc:	e13ff617 	ldw	r4,-40(fp)
8113c5d0:	11317080 	call	81131708 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8113c5d4:	e0bffb17 	ldw	r2,-20(fp)
8113c5d8:	10800617 	ldw	r2,24(r2)
8113c5dc:	10800037 	ldwio	r2,0(r2)
8113c5e0:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8113c5e4:	e0bfed17 	ldw	r2,-76(fp)
8113c5e8:	1080004c 	andi	r2,r2,1
8113c5ec:	10000626 	beq	r2,zero,8113c608 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113c5f0:	e0bffb17 	ldw	r2,-20(fp)
8113c5f4:	10801817 	ldw	r2,96(r2)
8113c5f8:	1009883a 	mov	r4,r2
8113c5fc:	1131a900 	call	81131a90 <OSSemPost>
		return -EBUSY;
8113c600:	00bffc04 	movi	r2,-16
8113c604:	00009606 	br	8113c860 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113c608:	00800804 	movi	r2,32
8113c60c:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113c610:	0005303a 	rdctl	r2,status
8113c614:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113c618:	e0fff217 	ldw	r3,-56(fp)
8113c61c:	00bfff84 	movi	r2,-2
8113c620:	1884703a 	and	r2,r3,r2
8113c624:	1001703a 	wrctl	status,r2
  
  return context;
8113c628:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113c62c:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113c630:	e0bffb17 	ldw	r2,-20(fp)
8113c634:	10800317 	ldw	r2,12(r2)
8113c638:	10800104 	addi	r2,r2,4
8113c63c:	e0ffee17 	ldw	r3,-72(fp)
8113c640:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8113c644:	e0bffb17 	ldw	r2,-20(fp)
8113c648:	10800317 	ldw	r2,12(r2)
8113c64c:	e0fffb17 	ldw	r3,-20(fp)
8113c650:	18c00317 	ldw	r3,12(r3)
8113c654:	18c00037 	ldwio	r3,0(r3)
8113c658:	10c00035 	stwio	r3,0(r2)
8113c65c:	e0bfef17 	ldw	r2,-68(fp)
8113c660:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113c664:	e0bff017 	ldw	r2,-64(fp)
8113c668:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8113c66c:	e0bffb17 	ldw	r2,-20(fp)
8113c670:	10800b17 	ldw	r2,44(r2)
8113c674:	10002326 	beq	r2,zero,8113c704 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8113c678:	e0bffb17 	ldw	r2,-20(fp)
8113c67c:	10c00d17 	ldw	r3,52(r2)
8113c680:	e0bfee17 	ldw	r2,-72(fp)
8113c684:	1884b03a 	or	r2,r3,r2
8113c688:	10800514 	ori	r2,r2,20
8113c68c:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113c690:	e0ffee17 	ldw	r3,-72(fp)
8113c694:	00bff7c4 	movi	r2,-33
8113c698:	1884703a 	and	r2,r3,r2
8113c69c:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113c6a0:	e0bfed17 	ldw	r2,-76(fp)
8113c6a4:	10800214 	ori	r2,r2,8
8113c6a8:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113c6ac:	0005303a 	rdctl	r2,status
8113c6b0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113c6b4:	e0fff417 	ldw	r3,-48(fp)
8113c6b8:	00bfff84 	movi	r2,-2
8113c6bc:	1884703a 	and	r2,r3,r2
8113c6c0:	1001703a 	wrctl	status,r2
  
  return context;
8113c6c4:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8113c6c8:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113c6cc:	e0bffb17 	ldw	r2,-20(fp)
8113c6d0:	10800317 	ldw	r2,12(r2)
8113c6d4:	10800104 	addi	r2,r2,4
8113c6d8:	e0ffee17 	ldw	r3,-72(fp)
8113c6dc:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113c6e0:	e0bffb17 	ldw	r2,-20(fp)
8113c6e4:	10800617 	ldw	r2,24(r2)
8113c6e8:	e0ffed17 	ldw	r3,-76(fp)
8113c6ec:	10c00035 	stwio	r3,0(r2)
8113c6f0:	e0bfef17 	ldw	r2,-68(fp)
8113c6f4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113c6f8:	e0bff117 	ldw	r2,-60(fp)
8113c6fc:	1001703a 	wrctl	status,r2
8113c700:	00002306 	br	8113c790 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8113c704:	e0bffb17 	ldw	r2,-20(fp)
8113c708:	10c00d17 	ldw	r3,52(r2)
8113c70c:	e0bfee17 	ldw	r2,-72(fp)
8113c710:	1884b03a 	or	r2,r3,r2
8113c714:	10800114 	ori	r2,r2,4
8113c718:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8113c71c:	e0ffee17 	ldw	r3,-72(fp)
8113c720:	00bff3c4 	movi	r2,-49
8113c724:	1884703a 	and	r2,r3,r2
8113c728:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8113c72c:	e0ffed17 	ldw	r3,-76(fp)
8113c730:	00bffdc4 	movi	r2,-9
8113c734:	1884703a 	and	r2,r3,r2
8113c738:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113c73c:	0005303a 	rdctl	r2,status
8113c740:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113c744:	e0fff517 	ldw	r3,-44(fp)
8113c748:	00bfff84 	movi	r2,-2
8113c74c:	1884703a 	and	r2,r3,r2
8113c750:	1001703a 	wrctl	status,r2
  
  return context;
8113c754:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8113c758:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113c75c:	e0bffb17 	ldw	r2,-20(fp)
8113c760:	10800317 	ldw	r2,12(r2)
8113c764:	10800104 	addi	r2,r2,4
8113c768:	e0ffee17 	ldw	r3,-72(fp)
8113c76c:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113c770:	e0bffb17 	ldw	r2,-20(fp)
8113c774:	10800617 	ldw	r2,24(r2)
8113c778:	e0ffed17 	ldw	r3,-76(fp)
8113c77c:	10c00035 	stwio	r3,0(r2)
8113c780:	e0bfef17 	ldw	r2,-68(fp)
8113c784:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113c788:	e0bff317 	ldw	r2,-52(fp)
8113c78c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8113c790:	e0bffb17 	ldw	r2,-20(fp)
8113c794:	10800617 	ldw	r2,24(r2)
8113c798:	10800104 	addi	r2,r2,4
8113c79c:	e0fff817 	ldw	r3,-32(fp)
8113c7a0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8113c7a4:	e0bffb17 	ldw	r2,-20(fp)
8113c7a8:	10800617 	ldw	r2,24(r2)
8113c7ac:	10800204 	addi	r2,r2,8
8113c7b0:	e0fff917 	ldw	r3,-28(fp)
8113c7b4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8113c7b8:	e0bffe03 	ldbu	r2,-8(fp)
8113c7bc:	10000426 	beq	r2,zero,8113c7d0 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8113c7c0:	e0bfed17 	ldw	r2,-76(fp)
8113c7c4:	10800414 	ori	r2,r2,16
8113c7c8:	e0bfed15 	stw	r2,-76(fp)
8113c7cc:	00000406 	br	8113c7e0 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8113c7d0:	e0ffed17 	ldw	r3,-76(fp)
8113c7d4:	00bffbc4 	movi	r2,-17
8113c7d8:	1884703a 	and	r2,r3,r2
8113c7dc:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8113c7e0:	e0bfff03 	ldbu	r2,-4(fp)
8113c7e4:	10000e26 	beq	r2,zero,8113c820 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8113c7e8:	e0bfed17 	ldw	r2,-76(fp)
8113c7ec:	10800094 	ori	r2,r2,2
8113c7f0:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113c7f4:	e0bffb17 	ldw	r2,-20(fp)
8113c7f8:	10800617 	ldw	r2,24(r2)
8113c7fc:	10800304 	addi	r2,r2,12
8113c800:	10800037 	ldwio	r2,0(r2)
8113c804:	10000a1e 	bne	r2,zero,8113c830 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113c808:	e0bffb17 	ldw	r2,-20(fp)
8113c80c:	10800617 	ldw	r2,24(r2)
8113c810:	10800304 	addi	r2,r2,12
8113c814:	00c03fc4 	movi	r3,255
8113c818:	10c00035 	stwio	r3,0(r2)
8113c81c:	00000406 	br	8113c830 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8113c820:	e0ffed17 	ldw	r3,-76(fp)
8113c824:	00bfff44 	movi	r2,-3
8113c828:	1884703a 	and	r2,r3,r2
8113c82c:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8113c830:	e0bfed17 	ldw	r2,-76(fp)
8113c834:	10800054 	ori	r2,r2,1
8113c838:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113c83c:	e0bffb17 	ldw	r2,-20(fp)
8113c840:	10800617 	ldw	r2,24(r2)
8113c844:	e0ffed17 	ldw	r3,-76(fp)
8113c848:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
8113c84c:	e0bffb17 	ldw	r2,-20(fp)
8113c850:	10801817 	ldw	r2,96(r2)
8113c854:	1009883a 	mov	r4,r2
8113c858:	1131a900 	call	81131a90 <OSSemPost>
	 
	 return 0;
8113c85c:	0005883a 	mov	r2,zero
}
8113c860:	e037883a 	mov	sp,fp
8113c864:	dfc00117 	ldw	ra,4(sp)
8113c868:	df000017 	ldw	fp,0(sp)
8113c86c:	dec00204 	addi	sp,sp,8
8113c870:	f800283a 	ret

8113c874 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8113c874:	defff704 	addi	sp,sp,-36
8113c878:	de00012e 	bgeu	sp,et,8113c880 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
8113c87c:	003b68fa 	trap	3
8113c880:	dfc00815 	stw	ra,32(sp)
8113c884:	df000715 	stw	fp,28(sp)
8113c888:	dc400615 	stw	r17,24(sp)
8113c88c:	dc000515 	stw	r16,20(sp)
8113c890:	df000704 	addi	fp,sp,28
8113c894:	e13ffa15 	stw	r4,-24(fp)
8113c898:	e17ffb15 	stw	r5,-20(fp)
8113c89c:	3007883a 	mov	r3,r6
8113c8a0:	3805883a 	mov	r2,r7
8113c8a4:	e0fffc05 	stb	r3,-16(fp)
8113c8a8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8113c8ac:	e13ffb17 	ldw	r4,-20(fp)
8113c8b0:	113c3e00 	call	8113c3e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113c8b4:	10000226 	beq	r2,zero,8113c8c0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
8113c8b8:	00bffa84 	movi	r2,-22
8113c8bc:	00000b06 	br	8113c8ec <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8113c8c0:	e0bffb17 	ldw	r2,-20(fp)
8113c8c4:	1021883a 	mov	r16,r2
8113c8c8:	0023883a 	mov	r17,zero
8113c8cc:	e0fffc03 	ldbu	r3,-16(fp)
8113c8d0:	e0bffd03 	ldbu	r2,-12(fp)
8113c8d4:	d8800015 	stw	r2,0(sp)
8113c8d8:	180f883a 	mov	r7,r3
8113c8dc:	800b883a 	mov	r5,r16
8113c8e0:	880d883a 	mov	r6,r17
8113c8e4:	e13ffa17 	ldw	r4,-24(fp)
8113c8e8:	113c55c0 	call	8113c55c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113c8ec:	e6fffe04 	addi	sp,fp,-8
8113c8f0:	dfc00317 	ldw	ra,12(sp)
8113c8f4:	df000217 	ldw	fp,8(sp)
8113c8f8:	dc400117 	ldw	r17,4(sp)
8113c8fc:	dc000017 	ldw	r16,0(sp)
8113c900:	dec00404 	addi	sp,sp,16
8113c904:	f800283a 	ret

8113c908 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113c908:	defff704 	addi	sp,sp,-36
8113c90c:	de00012e 	bgeu	sp,et,8113c914 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
8113c910:	003b68fa 	trap	3
8113c914:	dfc00815 	stw	ra,32(sp)
8113c918:	df000715 	stw	fp,28(sp)
8113c91c:	dc400615 	stw	r17,24(sp)
8113c920:	dc000515 	stw	r16,20(sp)
8113c924:	df000704 	addi	fp,sp,28
8113c928:	e13ffa15 	stw	r4,-24(fp)
8113c92c:	e17ffb15 	stw	r5,-20(fp)
8113c930:	3007883a 	mov	r3,r6
8113c934:	3805883a 	mov	r2,r7
8113c938:	e0fffc05 	stb	r3,-16(fp)
8113c93c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8113c940:	e13ffb17 	ldw	r4,-20(fp)
8113c944:	113c4800 	call	8113c480 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113c948:	10000226 	beq	r2,zero,8113c954 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
8113c94c:	00bffa84 	movi	r2,-22
8113c950:	00000b06 	br	8113c980 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113c954:	e0bffb17 	ldw	r2,-20(fp)
8113c958:	1021883a 	mov	r16,r2
8113c95c:	0023883a 	mov	r17,zero
8113c960:	e0fffc03 	ldbu	r3,-16(fp)
8113c964:	e0bffd03 	ldbu	r2,-12(fp)
8113c968:	d8800015 	stw	r2,0(sp)
8113c96c:	180f883a 	mov	r7,r3
8113c970:	800b883a 	mov	r5,r16
8113c974:	880d883a 	mov	r6,r17
8113c978:	e13ffa17 	ldw	r4,-24(fp)
8113c97c:	113c55c0 	call	8113c55c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113c980:	e6fffe04 	addi	sp,fp,-8
8113c984:	dfc00317 	ldw	ra,12(sp)
8113c988:	df000217 	ldw	fp,8(sp)
8113c98c:	dc400117 	ldw	r17,4(sp)
8113c990:	dc000017 	ldw	r16,0(sp)
8113c994:	dec00404 	addi	sp,sp,16
8113c998:	f800283a 	ret

8113c99c <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113c99c:	defffc04 	addi	sp,sp,-16
8113c9a0:	de00012e 	bgeu	sp,et,8113c9a8 <alt_msgdma_open+0xc>
8113c9a4:	003b68fa 	trap	3
8113c9a8:	dfc00315 	stw	ra,12(sp)
8113c9ac:	df000215 	stw	fp,8(sp)
8113c9b0:	df000204 	addi	fp,sp,8
8113c9b4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8113c9b8:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8113c9bc:	d1603504 	addi	r5,gp,-32556
8113c9c0:	e13fff17 	ldw	r4,-4(fp)
8113c9c4:	113d0100 	call	8113d010 <alt_find_dev>
8113c9c8:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8113c9cc:	e0bffe17 	ldw	r2,-8(fp)
8113c9d0:	1000041e 	bne	r2,zero,8113c9e4 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
8113c9d4:	113ac000 	call	8113ac00 <alt_get_errno>
8113c9d8:	1007883a 	mov	r3,r2
8113c9dc:	008004c4 	movi	r2,19
8113c9e0:	18800015 	stw	r2,0(r3)
    }

    return dev;
8113c9e4:	e0bffe17 	ldw	r2,-8(fp)
}
8113c9e8:	e037883a 	mov	sp,fp
8113c9ec:	dfc00117 	ldw	ra,4(sp)
8113c9f0:	df000017 	ldw	fp,0(sp)
8113c9f4:	dec00204 	addi	sp,sp,8
8113c9f8:	f800283a 	ret

8113c9fc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8113c9fc:	defff604 	addi	sp,sp,-40
8113ca00:	de00012e 	bgeu	sp,et,8113ca08 <alt_msgdma_init+0xc>
8113ca04:	003b68fa 	trap	3
8113ca08:	dfc00915 	stw	ra,36(sp)
8113ca0c:	df000815 	stw	fp,32(sp)
8113ca10:	df000804 	addi	fp,sp,32
8113ca14:	e13ffd15 	stw	r4,-12(fp)
8113ca18:	e17ffe15 	stw	r5,-8(fp)
8113ca1c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8113ca20:	e0bffd17 	ldw	r2,-12(fp)
8113ca24:	10801783 	ldbu	r2,94(r2)
8113ca28:	10803fcc 	andi	r2,r2,255
8113ca2c:	10000b26 	beq	r2,zero,8113ca5c <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8113ca30:	e0bffd17 	ldw	r2,-12(fp)
8113ca34:	10800617 	ldw	r2,24(r2)
8113ca38:	00c00104 	movi	r3,4
8113ca3c:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8113ca40:	0001883a 	nop
8113ca44:	e0bffd17 	ldw	r2,-12(fp)
8113ca48:	10800617 	ldw	r2,24(r2)
8113ca4c:	10800037 	ldwio	r2,0(r2)
8113ca50:	1080010c 	andi	r2,r2,4
8113ca54:	1005d0ba 	srai	r2,r2,2
8113ca58:	103ffa1e 	bne	r2,zero,8113ca44 <__reset+0xfb11ca44>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113ca5c:	e0bffd17 	ldw	r2,-12(fp)
8113ca60:	10800317 	ldw	r2,12(r2)
8113ca64:	10800104 	addi	r2,r2,4
8113ca68:	00c00084 	movi	r3,2
8113ca6c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113ca70:	0001883a 	nop
8113ca74:	e0bffd17 	ldw	r2,-12(fp)
8113ca78:	10800317 	ldw	r2,12(r2)
8113ca7c:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8113ca80:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113ca84:	103ffb1e 	bne	r2,zero,8113ca74 <__reset+0xfb11ca74>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113ca88:	e0bffd17 	ldw	r2,-12(fp)
8113ca8c:	10800317 	ldw	r2,12(r2)
8113ca90:	10800104 	addi	r2,r2,4
8113ca94:	10800037 	ldwio	r2,0(r2)
8113ca98:	1007883a 	mov	r3,r2
8113ca9c:	00bffbc4 	movi	r2,-17
8113caa0:	1884703a 	and	r2,r3,r2
8113caa4:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113caa8:	e0bff917 	ldw	r2,-28(fp)
8113caac:	10800814 	ori	r2,r2,32
8113cab0:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113cab4:	e0bffd17 	ldw	r2,-12(fp)
8113cab8:	10800317 	ldw	r2,12(r2)
8113cabc:	10800104 	addi	r2,r2,4
8113cac0:	e0fff917 	ldw	r3,-28(fp)
8113cac4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8113cac8:	e0bffd17 	ldw	r2,-12(fp)
8113cacc:	10800317 	ldw	r2,12(r2)
8113cad0:	e0fffd17 	ldw	r3,-12(fp)
8113cad4:	18c00317 	ldw	r3,12(r3)
8113cad8:	18c00037 	ldwio	r3,0(r3)
8113cadc:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113cae0:	e0bffd17 	ldw	r2,-12(fp)
8113cae4:	10801783 	ldbu	r2,94(r2)
8113cae8:	10803fcc 	andi	r2,r2,255
8113caec:	10000826 	beq	r2,zero,8113cb10 <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113caf0:	e0bffd17 	ldw	r2,-12(fp)
8113caf4:	10800617 	ldw	r2,24(r2)
8113caf8:	10800404 	addi	r2,r2,16
8113cafc:	e0fffd17 	ldw	r3,-12(fp)
8113cb00:	18c00617 	ldw	r3,24(r3)
8113cb04:	18c00404 	addi	r3,r3,16
8113cb08:	18c00037 	ldwio	r3,0(r3)
8113cb0c:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113cb10:	d1603504 	addi	r5,gp,-32556
8113cb14:	e13ffd17 	ldw	r4,-12(fp)
8113cb18:	113ce940 	call	8113ce94 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113cb1c:	e0bffd17 	ldw	r2,-12(fp)
8113cb20:	10801804 	addi	r2,r2,96
8113cb24:	e0bffb15 	stw	r2,-20(fp)
8113cb28:	00800044 	movi	r2,1
8113cb2c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113cb30:	e0bffc0b 	ldhu	r2,-16(fp)
8113cb34:	1009883a 	mov	r4,r2
8113cb38:	11313e00 	call	811313e0 <OSSemCreate>
8113cb3c:	1007883a 	mov	r3,r2
8113cb40:	e0bffb17 	ldw	r2,-20(fp)
8113cb44:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113cb48:	e0bffb17 	ldw	r2,-20(fp)
8113cb4c:	10800017 	ldw	r2,0(r2)
8113cb50:	10000226 	beq	r2,zero,8113cb5c <alt_msgdma_init+0x160>
8113cb54:	0005883a 	mov	r2,zero
8113cb58:	00000106 	br	8113cb60 <alt_msgdma_init+0x164>
8113cb5c:	00bfffc4 	movi	r2,-1
8113cb60:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113cb64:	e0bffa17 	ldw	r2,-24(fp)
8113cb68:	1000081e 	bne	r2,zero,8113cb8c <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113cb6c:	d8000015 	stw	zero,0(sp)
8113cb70:	e1fffd17 	ldw	r7,-12(fp)
8113cb74:	01a04534 	movhi	r6,33044
8113cb78:	31ab8504 	addi	r6,r6,-20972
8113cb7c:	e17fff17 	ldw	r5,-4(fp)
8113cb80:	e13ffe17 	ldw	r4,-8(fp)
8113cb84:	113d29c0 	call	8113d29c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113cb88:	00000406 	br	8113cb9c <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113cb8c:	01204534 	movhi	r4,33044
8113cb90:	2109e204 	addi	r4,r4,10120
8113cb94:	113d6b40 	call	8113d6b4 <alt_printf>
    }
    
    return;
8113cb98:	0001883a 	nop

}
8113cb9c:	e037883a 	mov	sp,fp
8113cba0:	dfc00117 	ldw	ra,4(sp)
8113cba4:	df000017 	ldw	fp,0(sp)
8113cba8:	dec00204 	addi	sp,sp,8
8113cbac:	f800283a 	ret

8113cbb0 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113cbb0:	defffb04 	addi	sp,sp,-20
8113cbb4:	de00012e 	bgeu	sp,et,8113cbbc <alt_msgdma_register_callback+0xc>
8113cbb8:	003b68fa 	trap	3
8113cbbc:	df000415 	stw	fp,16(sp)
8113cbc0:	df000404 	addi	fp,sp,16
8113cbc4:	e13ffc15 	stw	r4,-16(fp)
8113cbc8:	e17ffd15 	stw	r5,-12(fp)
8113cbcc:	e1bffe15 	stw	r6,-8(fp)
8113cbd0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113cbd4:	e0bffc17 	ldw	r2,-16(fp)
8113cbd8:	e0fffd17 	ldw	r3,-12(fp)
8113cbdc:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113cbe0:	e0bffc17 	ldw	r2,-16(fp)
8113cbe4:	e0ffff17 	ldw	r3,-4(fp)
8113cbe8:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113cbec:	e0bffc17 	ldw	r2,-16(fp)
8113cbf0:	e0fffe17 	ldw	r3,-8(fp)
8113cbf4:	10c00d15 	stw	r3,52(r2)

    return ;
8113cbf8:	0001883a 	nop
}
8113cbfc:	e037883a 	mov	sp,fp
8113cc00:	df000017 	ldw	fp,0(sp)
8113cc04:	dec00104 	addi	sp,sp,4
8113cc08:	f800283a 	ret

8113cc0c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113cc0c:	defffc04 	addi	sp,sp,-16
8113cc10:	de00012e 	bgeu	sp,et,8113cc18 <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113cc14:	003b68fa 	trap	3
8113cc18:	dfc00315 	stw	ra,12(sp)
8113cc1c:	df000215 	stw	fp,8(sp)
8113cc20:	df000204 	addi	fp,sp,8
8113cc24:	e13ffe15 	stw	r4,-8(fp)
8113cc28:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113cc2c:	000d883a 	mov	r6,zero
8113cc30:	e17fff17 	ldw	r5,-4(fp)
8113cc34:	e13ffe17 	ldw	r4,-8(fp)
8113cc38:	113b1900 	call	8113b190 <alt_msgdma_descriptor_async_transfer>

}
8113cc3c:	e037883a 	mov	sp,fp
8113cc40:	dfc00117 	ldw	ra,4(sp)
8113cc44:	df000017 	ldw	fp,0(sp)
8113cc48:	dec00204 	addi	sp,sp,8
8113cc4c:	f800283a 	ret

8113cc50 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113cc50:	defffc04 	addi	sp,sp,-16
8113cc54:	de00012e 	bgeu	sp,et,8113cc5c <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113cc58:	003b68fa 	trap	3
8113cc5c:	dfc00315 	stw	ra,12(sp)
8113cc60:	df000215 	stw	fp,8(sp)
8113cc64:	df000204 	addi	fp,sp,8
8113cc68:	e13ffe15 	stw	r4,-8(fp)
8113cc6c:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113cc70:	e1bfff17 	ldw	r6,-4(fp)
8113cc74:	000b883a 	mov	r5,zero
8113cc78:	e13ffe17 	ldw	r4,-8(fp)
8113cc7c:	113b1900 	call	8113b190 <alt_msgdma_descriptor_async_transfer>
}
8113cc80:	e037883a 	mov	sp,fp
8113cc84:	dfc00117 	ldw	ra,4(sp)
8113cc88:	df000017 	ldw	fp,0(sp)
8113cc8c:	dec00204 	addi	sp,sp,8
8113cc90:	f800283a 	ret

8113cc94 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113cc94:	defffc04 	addi	sp,sp,-16
8113cc98:	de00012e 	bgeu	sp,et,8113cca0 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113cc9c:	003b68fa 	trap	3
8113cca0:	dfc00315 	stw	ra,12(sp)
8113cca4:	df000215 	stw	fp,8(sp)
8113cca8:	df000204 	addi	fp,sp,8
8113ccac:	e13ffe15 	stw	r4,-8(fp)
8113ccb0:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113ccb4:	000d883a 	mov	r6,zero
8113ccb8:	e17fff17 	ldw	r5,-4(fp)
8113ccbc:	e13ffe17 	ldw	r4,-8(fp)
8113ccc0:	113b4d00 	call	8113b4d0 <alt_msgdma_descriptor_sync_transfer>
}
8113ccc4:	e037883a 	mov	sp,fp
8113ccc8:	dfc00117 	ldw	ra,4(sp)
8113cccc:	df000017 	ldw	fp,0(sp)
8113ccd0:	dec00204 	addi	sp,sp,8
8113ccd4:	f800283a 	ret

8113ccd8 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113ccd8:	defffc04 	addi	sp,sp,-16
8113ccdc:	de00012e 	bgeu	sp,et,8113cce4 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113cce0:	003b68fa 	trap	3
8113cce4:	dfc00315 	stw	ra,12(sp)
8113cce8:	df000215 	stw	fp,8(sp)
8113ccec:	df000204 	addi	fp,sp,8
8113ccf0:	e13ffe15 	stw	r4,-8(fp)
8113ccf4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113ccf8:	e1bfff17 	ldw	r6,-4(fp)
8113ccfc:	000b883a 	mov	r5,zero
8113cd00:	e13ffe17 	ldw	r4,-8(fp)
8113cd04:	113b4d00 	call	8113b4d0 <alt_msgdma_descriptor_sync_transfer>
}
8113cd08:	e037883a 	mov	sp,fp
8113cd0c:	dfc00117 	ldw	ra,4(sp)
8113cd10:	df000017 	ldw	fp,0(sp)
8113cd14:	dec00204 	addi	sp,sp,8
8113cd18:	f800283a 	ret

8113cd1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113cd1c:	defff504 	addi	sp,sp,-44
8113cd20:	de00012e 	bgeu	sp,et,8113cd28 <alt_alarm_start+0xc>
8113cd24:	003b68fa 	trap	3
8113cd28:	df000a15 	stw	fp,40(sp)
8113cd2c:	df000a04 	addi	fp,sp,40
8113cd30:	e13ffc15 	stw	r4,-16(fp)
8113cd34:	e17ffd15 	stw	r5,-12(fp)
8113cd38:	e1bffe15 	stw	r6,-8(fp)
8113cd3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113cd40:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113cd44:	d0a07217 	ldw	r2,-32312(gp)
  
  if (alt_ticks_per_second ())
8113cd48:	10003c26 	beq	r2,zero,8113ce3c <alt_alarm_start+0x120>
  {
    if (alarm)
8113cd4c:	e0bffc17 	ldw	r2,-16(fp)
8113cd50:	10003826 	beq	r2,zero,8113ce34 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113cd54:	e0bffc17 	ldw	r2,-16(fp)
8113cd58:	e0fffe17 	ldw	r3,-8(fp)
8113cd5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113cd60:	e0bffc17 	ldw	r2,-16(fp)
8113cd64:	e0ffff17 	ldw	r3,-4(fp)
8113cd68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113cd6c:	0005303a 	rdctl	r2,status
8113cd70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113cd74:	e0fff917 	ldw	r3,-28(fp)
8113cd78:	00bfff84 	movi	r2,-2
8113cd7c:	1884703a 	and	r2,r3,r2
8113cd80:	1001703a 	wrctl	status,r2
  
  return context;
8113cd84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113cd88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113cd8c:	d0a07317 	ldw	r2,-32308(gp)
      
      current_nticks = alt_nticks();
8113cd90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113cd94:	e0fffd17 	ldw	r3,-12(fp)
8113cd98:	e0bff617 	ldw	r2,-40(fp)
8113cd9c:	1885883a 	add	r2,r3,r2
8113cda0:	10c00044 	addi	r3,r2,1
8113cda4:	e0bffc17 	ldw	r2,-16(fp)
8113cda8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113cdac:	e0bffc17 	ldw	r2,-16(fp)
8113cdb0:	10c00217 	ldw	r3,8(r2)
8113cdb4:	e0bff617 	ldw	r2,-40(fp)
8113cdb8:	1880042e 	bgeu	r3,r2,8113cdcc <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113cdbc:	e0bffc17 	ldw	r2,-16(fp)
8113cdc0:	00c00044 	movi	r3,1
8113cdc4:	10c00405 	stb	r3,16(r2)
8113cdc8:	00000206 	br	8113cdd4 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113cdcc:	e0bffc17 	ldw	r2,-16(fp)
8113cdd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113cdd4:	e0bffc17 	ldw	r2,-16(fp)
8113cdd8:	d0e01404 	addi	r3,gp,-32688
8113cddc:	e0fffa15 	stw	r3,-24(fp)
8113cde0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113cde4:	e0bffb17 	ldw	r2,-20(fp)
8113cde8:	e0fffa17 	ldw	r3,-24(fp)
8113cdec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113cdf0:	e0bffa17 	ldw	r2,-24(fp)
8113cdf4:	10c00017 	ldw	r3,0(r2)
8113cdf8:	e0bffb17 	ldw	r2,-20(fp)
8113cdfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113ce00:	e0bffa17 	ldw	r2,-24(fp)
8113ce04:	10800017 	ldw	r2,0(r2)
8113ce08:	e0fffb17 	ldw	r3,-20(fp)
8113ce0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113ce10:	e0bffa17 	ldw	r2,-24(fp)
8113ce14:	e0fffb17 	ldw	r3,-20(fp)
8113ce18:	10c00015 	stw	r3,0(r2)
8113ce1c:	e0bff817 	ldw	r2,-32(fp)
8113ce20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113ce24:	e0bff717 	ldw	r2,-36(fp)
8113ce28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113ce2c:	0005883a 	mov	r2,zero
8113ce30:	00000306 	br	8113ce40 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113ce34:	00bffa84 	movi	r2,-22
8113ce38:	00000106 	br	8113ce40 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113ce3c:	00bfde84 	movi	r2,-134
  }
}
8113ce40:	e037883a 	mov	sp,fp
8113ce44:	df000017 	ldw	fp,0(sp)
8113ce48:	dec00104 	addi	sp,sp,4
8113ce4c:	f800283a 	ret

8113ce50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113ce50:	defffe04 	addi	sp,sp,-8
8113ce54:	de00012e 	bgeu	sp,et,8113ce5c <alt_get_errno+0xc>
8113ce58:	003b68fa 	trap	3
8113ce5c:	dfc00115 	stw	ra,4(sp)
8113ce60:	df000015 	stw	fp,0(sp)
8113ce64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113ce68:	d0a01017 	ldw	r2,-32704(gp)
8113ce6c:	10000326 	beq	r2,zero,8113ce7c <alt_get_errno+0x2c>
8113ce70:	d0a01017 	ldw	r2,-32704(gp)
8113ce74:	103ee83a 	callr	r2
8113ce78:	00000106 	br	8113ce80 <alt_get_errno+0x30>
8113ce7c:	d0a06204 	addi	r2,gp,-32376
}
8113ce80:	e037883a 	mov	sp,fp
8113ce84:	dfc00117 	ldw	ra,4(sp)
8113ce88:	df000017 	ldw	fp,0(sp)
8113ce8c:	dec00204 	addi	sp,sp,8
8113ce90:	f800283a 	ret

8113ce94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113ce94:	defffa04 	addi	sp,sp,-24
8113ce98:	de00012e 	bgeu	sp,et,8113cea0 <alt_dev_llist_insert+0xc>
8113ce9c:	003b68fa 	trap	3
8113cea0:	dfc00515 	stw	ra,20(sp)
8113cea4:	df000415 	stw	fp,16(sp)
8113cea8:	df000404 	addi	fp,sp,16
8113ceac:	e13ffe15 	stw	r4,-8(fp)
8113ceb0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113ceb4:	e0bffe17 	ldw	r2,-8(fp)
8113ceb8:	10000326 	beq	r2,zero,8113cec8 <alt_dev_llist_insert+0x34>
8113cebc:	e0bffe17 	ldw	r2,-8(fp)
8113cec0:	10800217 	ldw	r2,8(r2)
8113cec4:	1000061e 	bne	r2,zero,8113cee0 <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113cec8:	113ce500 	call	8113ce50 <alt_get_errno>
8113cecc:	1007883a 	mov	r3,r2
8113ced0:	00800584 	movi	r2,22
8113ced4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113ced8:	00bffa84 	movi	r2,-22
8113cedc:	00001306 	br	8113cf2c <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113cee0:	e0bffe17 	ldw	r2,-8(fp)
8113cee4:	e0ffff17 	ldw	r3,-4(fp)
8113cee8:	e0fffc15 	stw	r3,-16(fp)
8113ceec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113cef0:	e0bffd17 	ldw	r2,-12(fp)
8113cef4:	e0fffc17 	ldw	r3,-16(fp)
8113cef8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113cefc:	e0bffc17 	ldw	r2,-16(fp)
8113cf00:	10c00017 	ldw	r3,0(r2)
8113cf04:	e0bffd17 	ldw	r2,-12(fp)
8113cf08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113cf0c:	e0bffc17 	ldw	r2,-16(fp)
8113cf10:	10800017 	ldw	r2,0(r2)
8113cf14:	e0fffd17 	ldw	r3,-12(fp)
8113cf18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113cf1c:	e0bffc17 	ldw	r2,-16(fp)
8113cf20:	e0fffd17 	ldw	r3,-12(fp)
8113cf24:	10c00015 	stw	r3,0(r2)

  return 0;  
8113cf28:	0005883a 	mov	r2,zero
}
8113cf2c:	e037883a 	mov	sp,fp
8113cf30:	dfc00117 	ldw	ra,4(sp)
8113cf34:	df000017 	ldw	fp,0(sp)
8113cf38:	dec00204 	addi	sp,sp,8
8113cf3c:	f800283a 	ret

8113cf40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113cf40:	defffd04 	addi	sp,sp,-12
8113cf44:	de00012e 	bgeu	sp,et,8113cf4c <_do_ctors+0xc>
8113cf48:	003b68fa 	trap	3
8113cf4c:	dfc00215 	stw	ra,8(sp)
8113cf50:	df000115 	stw	fp,4(sp)
8113cf54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113cf58:	00a04534 	movhi	r2,33044
8113cf5c:	10b8c004 	addi	r2,r2,-7424
8113cf60:	e0bfff15 	stw	r2,-4(fp)
8113cf64:	00000606 	br	8113cf80 <_do_ctors+0x40>
        (*ctor) (); 
8113cf68:	e0bfff17 	ldw	r2,-4(fp)
8113cf6c:	10800017 	ldw	r2,0(r2)
8113cf70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113cf74:	e0bfff17 	ldw	r2,-4(fp)
8113cf78:	10bfff04 	addi	r2,r2,-4
8113cf7c:	e0bfff15 	stw	r2,-4(fp)
8113cf80:	e0ffff17 	ldw	r3,-4(fp)
8113cf84:	00a04534 	movhi	r2,33044
8113cf88:	10b8c104 	addi	r2,r2,-7420
8113cf8c:	18bff62e 	bgeu	r3,r2,8113cf68 <__reset+0xfb11cf68>
        (*ctor) (); 
}
8113cf90:	0001883a 	nop
8113cf94:	e037883a 	mov	sp,fp
8113cf98:	dfc00117 	ldw	ra,4(sp)
8113cf9c:	df000017 	ldw	fp,0(sp)
8113cfa0:	dec00204 	addi	sp,sp,8
8113cfa4:	f800283a 	ret

8113cfa8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113cfa8:	defffd04 	addi	sp,sp,-12
8113cfac:	de00012e 	bgeu	sp,et,8113cfb4 <_do_dtors+0xc>
8113cfb0:	003b68fa 	trap	3
8113cfb4:	dfc00215 	stw	ra,8(sp)
8113cfb8:	df000115 	stw	fp,4(sp)
8113cfbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113cfc0:	00a04534 	movhi	r2,33044
8113cfc4:	10b8c004 	addi	r2,r2,-7424
8113cfc8:	e0bfff15 	stw	r2,-4(fp)
8113cfcc:	00000606 	br	8113cfe8 <_do_dtors+0x40>
        (*dtor) (); 
8113cfd0:	e0bfff17 	ldw	r2,-4(fp)
8113cfd4:	10800017 	ldw	r2,0(r2)
8113cfd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113cfdc:	e0bfff17 	ldw	r2,-4(fp)
8113cfe0:	10bfff04 	addi	r2,r2,-4
8113cfe4:	e0bfff15 	stw	r2,-4(fp)
8113cfe8:	e0ffff17 	ldw	r3,-4(fp)
8113cfec:	00a04534 	movhi	r2,33044
8113cff0:	10b8c104 	addi	r2,r2,-7420
8113cff4:	18bff62e 	bgeu	r3,r2,8113cfd0 <__reset+0xfb11cfd0>
        (*dtor) (); 
}
8113cff8:	0001883a 	nop
8113cffc:	e037883a 	mov	sp,fp
8113d000:	dfc00117 	ldw	ra,4(sp)
8113d004:	df000017 	ldw	fp,0(sp)
8113d008:	dec00204 	addi	sp,sp,8
8113d00c:	f800283a 	ret

8113d010 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113d010:	defffa04 	addi	sp,sp,-24
8113d014:	de00012e 	bgeu	sp,et,8113d01c <alt_find_dev+0xc>
8113d018:	003b68fa 	trap	3
8113d01c:	dfc00515 	stw	ra,20(sp)
8113d020:	df000415 	stw	fp,16(sp)
8113d024:	df000404 	addi	fp,sp,16
8113d028:	e13ffe15 	stw	r4,-8(fp)
8113d02c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113d030:	e0bfff17 	ldw	r2,-4(fp)
8113d034:	10800017 	ldw	r2,0(r2)
8113d038:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113d03c:	e13ffe17 	ldw	r4,-8(fp)
8113d040:	111510c0 	call	8111510c <strlen>
8113d044:	10800044 	addi	r2,r2,1
8113d048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113d04c:	00000d06 	br	8113d084 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113d050:	e0bffc17 	ldw	r2,-16(fp)
8113d054:	10800217 	ldw	r2,8(r2)
8113d058:	e0fffd17 	ldw	r3,-12(fp)
8113d05c:	180d883a 	mov	r6,r3
8113d060:	e17ffe17 	ldw	r5,-8(fp)
8113d064:	1009883a 	mov	r4,r2
8113d068:	113de380 	call	8113de38 <memcmp>
8113d06c:	1000021e 	bne	r2,zero,8113d078 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113d070:	e0bffc17 	ldw	r2,-16(fp)
8113d074:	00000706 	br	8113d094 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113d078:	e0bffc17 	ldw	r2,-16(fp)
8113d07c:	10800017 	ldw	r2,0(r2)
8113d080:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113d084:	e0fffc17 	ldw	r3,-16(fp)
8113d088:	e0bfff17 	ldw	r2,-4(fp)
8113d08c:	18bff01e 	bne	r3,r2,8113d050 <__reset+0xfb11d050>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113d090:	0005883a 	mov	r2,zero
}
8113d094:	e037883a 	mov	sp,fp
8113d098:	dfc00117 	ldw	ra,4(sp)
8113d09c:	df000017 	ldw	fp,0(sp)
8113d0a0:	dec00204 	addi	sp,sp,8
8113d0a4:	f800283a 	ret

8113d0a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113d0a8:	defffb04 	addi	sp,sp,-20
8113d0ac:	de00012e 	bgeu	sp,et,8113d0b4 <alt_find_file+0xc>
8113d0b0:	003b68fa 	trap	3
8113d0b4:	dfc00415 	stw	ra,16(sp)
8113d0b8:	df000315 	stw	fp,12(sp)
8113d0bc:	df000304 	addi	fp,sp,12
8113d0c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113d0c4:	d0a00b17 	ldw	r2,-32724(gp)
8113d0c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113d0cc:	00003106 	br	8113d194 <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113d0d0:	e0bffd17 	ldw	r2,-12(fp)
8113d0d4:	10800217 	ldw	r2,8(r2)
8113d0d8:	1009883a 	mov	r4,r2
8113d0dc:	111510c0 	call	8111510c <strlen>
8113d0e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113d0e4:	e0bffd17 	ldw	r2,-12(fp)
8113d0e8:	10c00217 	ldw	r3,8(r2)
8113d0ec:	e0bffe17 	ldw	r2,-8(fp)
8113d0f0:	10bfffc4 	addi	r2,r2,-1
8113d0f4:	1885883a 	add	r2,r3,r2
8113d0f8:	10800003 	ldbu	r2,0(r2)
8113d0fc:	10803fcc 	andi	r2,r2,255
8113d100:	1080201c 	xori	r2,r2,128
8113d104:	10bfe004 	addi	r2,r2,-128
8113d108:	10800bd8 	cmpnei	r2,r2,47
8113d10c:	1000031e 	bne	r2,zero,8113d11c <alt_find_file+0x74>
    {
      len -= 1;
8113d110:	e0bffe17 	ldw	r2,-8(fp)
8113d114:	10bfffc4 	addi	r2,r2,-1
8113d118:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113d11c:	e0bffe17 	ldw	r2,-8(fp)
8113d120:	e0ffff17 	ldw	r3,-4(fp)
8113d124:	1885883a 	add	r2,r3,r2
8113d128:	10800003 	ldbu	r2,0(r2)
8113d12c:	10803fcc 	andi	r2,r2,255
8113d130:	1080201c 	xori	r2,r2,128
8113d134:	10bfe004 	addi	r2,r2,-128
8113d138:	10800be0 	cmpeqi	r2,r2,47
8113d13c:	1000081e 	bne	r2,zero,8113d160 <alt_find_file+0xb8>
8113d140:	e0bffe17 	ldw	r2,-8(fp)
8113d144:	e0ffff17 	ldw	r3,-4(fp)
8113d148:	1885883a 	add	r2,r3,r2
8113d14c:	10800003 	ldbu	r2,0(r2)
8113d150:	10803fcc 	andi	r2,r2,255
8113d154:	1080201c 	xori	r2,r2,128
8113d158:	10bfe004 	addi	r2,r2,-128
8113d15c:	10000a1e 	bne	r2,zero,8113d188 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113d160:	e0bffd17 	ldw	r2,-12(fp)
8113d164:	10800217 	ldw	r2,8(r2)
8113d168:	e0fffe17 	ldw	r3,-8(fp)
8113d16c:	180d883a 	mov	r6,r3
8113d170:	e17fff17 	ldw	r5,-4(fp)
8113d174:	1009883a 	mov	r4,r2
8113d178:	113de380 	call	8113de38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113d17c:	1000021e 	bne	r2,zero,8113d188 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113d180:	e0bffd17 	ldw	r2,-12(fp)
8113d184:	00000706 	br	8113d1a4 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113d188:	e0bffd17 	ldw	r2,-12(fp)
8113d18c:	10800017 	ldw	r2,0(r2)
8113d190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113d194:	e0fffd17 	ldw	r3,-12(fp)
8113d198:	d0a00b04 	addi	r2,gp,-32724
8113d19c:	18bfcc1e 	bne	r3,r2,8113d0d0 <__reset+0xfb11d0d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113d1a0:	0005883a 	mov	r2,zero
}
8113d1a4:	e037883a 	mov	sp,fp
8113d1a8:	dfc00117 	ldw	ra,4(sp)
8113d1ac:	df000017 	ldw	fp,0(sp)
8113d1b0:	dec00204 	addi	sp,sp,8
8113d1b4:	f800283a 	ret

8113d1b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113d1b8:	defff904 	addi	sp,sp,-28
8113d1bc:	de00012e 	bgeu	sp,et,8113d1c4 <alt_get_fd+0xc>
8113d1c0:	003b68fa 	trap	3
8113d1c4:	dfc00615 	stw	ra,24(sp)
8113d1c8:	df000515 	stw	fp,20(sp)
8113d1cc:	df000504 	addi	fp,sp,20
8113d1d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113d1d4:	00bffa04 	movi	r2,-24
8113d1d8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113d1dc:	d0a06917 	ldw	r2,-32348(gp)
8113d1e0:	e0bffd15 	stw	r2,-12(fp)
8113d1e4:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113d1e8:	e0bffe0b 	ldhu	r2,-8(fp)
8113d1ec:	e0fffe84 	addi	r3,fp,-6
8113d1f0:	180d883a 	mov	r6,r3
8113d1f4:	100b883a 	mov	r5,r2
8113d1f8:	e13ffd17 	ldw	r4,-12(fp)
8113d1fc:	11317080 	call	81131708 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113d200:	e03ffb15 	stw	zero,-20(fp)
8113d204:	00001906 	br	8113d26c <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113d208:	00a04534 	movhi	r2,33044
8113d20c:	108c5104 	addi	r2,r2,12612
8113d210:	e0fffb17 	ldw	r3,-20(fp)
8113d214:	18c00324 	muli	r3,r3,12
8113d218:	10c5883a 	add	r2,r2,r3
8113d21c:	10800017 	ldw	r2,0(r2)
8113d220:	10000f1e 	bne	r2,zero,8113d260 <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113d224:	00a04534 	movhi	r2,33044
8113d228:	108c5104 	addi	r2,r2,12612
8113d22c:	e0fffb17 	ldw	r3,-20(fp)
8113d230:	18c00324 	muli	r3,r3,12
8113d234:	10c5883a 	add	r2,r2,r3
8113d238:	e0ffff17 	ldw	r3,-4(fp)
8113d23c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113d240:	d0e00f17 	ldw	r3,-32708(gp)
8113d244:	e0bffb17 	ldw	r2,-20(fp)
8113d248:	1880020e 	bge	r3,r2,8113d254 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113d24c:	e0bffb17 	ldw	r2,-20(fp)
8113d250:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113d254:	e0bffb17 	ldw	r2,-20(fp)
8113d258:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113d25c:	00000606 	br	8113d278 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113d260:	e0bffb17 	ldw	r2,-20(fp)
8113d264:	10800044 	addi	r2,r2,1
8113d268:	e0bffb15 	stw	r2,-20(fp)
8113d26c:	e0bffb17 	ldw	r2,-20(fp)
8113d270:	10800810 	cmplti	r2,r2,32
8113d274:	103fe41e 	bne	r2,zero,8113d208 <__reset+0xfb11d208>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113d278:	d0a06917 	ldw	r2,-32348(gp)
8113d27c:	1009883a 	mov	r4,r2
8113d280:	1131a900 	call	81131a90 <OSSemPost>

  return rc;
8113d284:	e0bffc17 	ldw	r2,-16(fp)
}
8113d288:	e037883a 	mov	sp,fp
8113d28c:	dfc00117 	ldw	ra,4(sp)
8113d290:	df000017 	ldw	fp,0(sp)
8113d294:	dec00204 	addi	sp,sp,8
8113d298:	f800283a 	ret

8113d29c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113d29c:	defff904 	addi	sp,sp,-28
8113d2a0:	de00012e 	bgeu	sp,et,8113d2a8 <alt_ic_isr_register+0xc>
8113d2a4:	003b68fa 	trap	3
8113d2a8:	dfc00615 	stw	ra,24(sp)
8113d2ac:	df000515 	stw	fp,20(sp)
8113d2b0:	df000504 	addi	fp,sp,20
8113d2b4:	e13ffc15 	stw	r4,-16(fp)
8113d2b8:	e17ffd15 	stw	r5,-12(fp)
8113d2bc:	e1bffe15 	stw	r6,-8(fp)
8113d2c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113d2c4:	e0800217 	ldw	r2,8(fp)
8113d2c8:	d8800015 	stw	r2,0(sp)
8113d2cc:	e1ffff17 	ldw	r7,-4(fp)
8113d2d0:	e1bffe17 	ldw	r6,-8(fp)
8113d2d4:	e17ffd17 	ldw	r5,-12(fp)
8113d2d8:	e13ffc17 	ldw	r4,-16(fp)
8113d2dc:	113d46c0 	call	8113d46c <alt_iic_isr_register>
}  
8113d2e0:	e037883a 	mov	sp,fp
8113d2e4:	dfc00117 	ldw	ra,4(sp)
8113d2e8:	df000017 	ldw	fp,0(sp)
8113d2ec:	dec00204 	addi	sp,sp,8
8113d2f0:	f800283a 	ret

8113d2f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113d2f4:	defff904 	addi	sp,sp,-28
8113d2f8:	de00012e 	bgeu	sp,et,8113d300 <alt_ic_irq_enable+0xc>
8113d2fc:	003b68fa 	trap	3
8113d300:	df000615 	stw	fp,24(sp)
8113d304:	df000604 	addi	fp,sp,24
8113d308:	e13ffe15 	stw	r4,-8(fp)
8113d30c:	e17fff15 	stw	r5,-4(fp)
8113d310:	e0bfff17 	ldw	r2,-4(fp)
8113d314:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d318:	0005303a 	rdctl	r2,status
8113d31c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d320:	e0fffb17 	ldw	r3,-20(fp)
8113d324:	00bfff84 	movi	r2,-2
8113d328:	1884703a 	and	r2,r3,r2
8113d32c:	1001703a 	wrctl	status,r2
  
  return context;
8113d330:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113d334:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113d338:	00c00044 	movi	r3,1
8113d33c:	e0bffa17 	ldw	r2,-24(fp)
8113d340:	1884983a 	sll	r2,r3,r2
8113d344:	1007883a 	mov	r3,r2
8113d348:	d0a06a17 	ldw	r2,-32344(gp)
8113d34c:	1884b03a 	or	r2,r3,r2
8113d350:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113d354:	d0a06a17 	ldw	r2,-32344(gp)
8113d358:	100170fa 	wrctl	ienable,r2
8113d35c:	e0bffc17 	ldw	r2,-16(fp)
8113d360:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d364:	e0bffd17 	ldw	r2,-12(fp)
8113d368:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113d36c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113d370:	0001883a 	nop
}
8113d374:	e037883a 	mov	sp,fp
8113d378:	df000017 	ldw	fp,0(sp)
8113d37c:	dec00104 	addi	sp,sp,4
8113d380:	f800283a 	ret

8113d384 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113d384:	defff904 	addi	sp,sp,-28
8113d388:	de00012e 	bgeu	sp,et,8113d390 <alt_ic_irq_disable+0xc>
8113d38c:	003b68fa 	trap	3
8113d390:	df000615 	stw	fp,24(sp)
8113d394:	df000604 	addi	fp,sp,24
8113d398:	e13ffe15 	stw	r4,-8(fp)
8113d39c:	e17fff15 	stw	r5,-4(fp)
8113d3a0:	e0bfff17 	ldw	r2,-4(fp)
8113d3a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d3a8:	0005303a 	rdctl	r2,status
8113d3ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d3b0:	e0fffb17 	ldw	r3,-20(fp)
8113d3b4:	00bfff84 	movi	r2,-2
8113d3b8:	1884703a 	and	r2,r3,r2
8113d3bc:	1001703a 	wrctl	status,r2
  
  return context;
8113d3c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113d3c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113d3c8:	00c00044 	movi	r3,1
8113d3cc:	e0bffa17 	ldw	r2,-24(fp)
8113d3d0:	1884983a 	sll	r2,r3,r2
8113d3d4:	0084303a 	nor	r2,zero,r2
8113d3d8:	1007883a 	mov	r3,r2
8113d3dc:	d0a06a17 	ldw	r2,-32344(gp)
8113d3e0:	1884703a 	and	r2,r3,r2
8113d3e4:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113d3e8:	d0a06a17 	ldw	r2,-32344(gp)
8113d3ec:	100170fa 	wrctl	ienable,r2
8113d3f0:	e0bffc17 	ldw	r2,-16(fp)
8113d3f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d3f8:	e0bffd17 	ldw	r2,-12(fp)
8113d3fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113d400:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113d404:	0001883a 	nop
}
8113d408:	e037883a 	mov	sp,fp
8113d40c:	df000017 	ldw	fp,0(sp)
8113d410:	dec00104 	addi	sp,sp,4
8113d414:	f800283a 	ret

8113d418 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113d418:	defffc04 	addi	sp,sp,-16
8113d41c:	de00012e 	bgeu	sp,et,8113d424 <alt_ic_irq_enabled+0xc>
8113d420:	003b68fa 	trap	3
8113d424:	df000315 	stw	fp,12(sp)
8113d428:	df000304 	addi	fp,sp,12
8113d42c:	e13ffe15 	stw	r4,-8(fp)
8113d430:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113d434:	000530fa 	rdctl	r2,ienable
8113d438:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113d43c:	00c00044 	movi	r3,1
8113d440:	e0bfff17 	ldw	r2,-4(fp)
8113d444:	1884983a 	sll	r2,r3,r2
8113d448:	1007883a 	mov	r3,r2
8113d44c:	e0bffd17 	ldw	r2,-12(fp)
8113d450:	1884703a 	and	r2,r3,r2
8113d454:	1004c03a 	cmpne	r2,r2,zero
8113d458:	10803fcc 	andi	r2,r2,255
}
8113d45c:	e037883a 	mov	sp,fp
8113d460:	df000017 	ldw	fp,0(sp)
8113d464:	dec00104 	addi	sp,sp,4
8113d468:	f800283a 	ret

8113d46c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113d46c:	defff504 	addi	sp,sp,-44
8113d470:	de00012e 	bgeu	sp,et,8113d478 <alt_iic_isr_register+0xc>
8113d474:	003b68fa 	trap	3
8113d478:	dfc00a15 	stw	ra,40(sp)
8113d47c:	df000915 	stw	fp,36(sp)
8113d480:	df000904 	addi	fp,sp,36
8113d484:	e13ffc15 	stw	r4,-16(fp)
8113d488:	e17ffd15 	stw	r5,-12(fp)
8113d48c:	e1bffe15 	stw	r6,-8(fp)
8113d490:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113d494:	00bffa84 	movi	r2,-22
8113d498:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113d49c:	e0bffd17 	ldw	r2,-12(fp)
8113d4a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113d4a4:	e0bff817 	ldw	r2,-32(fp)
8113d4a8:	10800808 	cmpgei	r2,r2,32
8113d4ac:	1000271e 	bne	r2,zero,8113d54c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d4b0:	0005303a 	rdctl	r2,status
8113d4b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d4b8:	e0fffb17 	ldw	r3,-20(fp)
8113d4bc:	00bfff84 	movi	r2,-2
8113d4c0:	1884703a 	and	r2,r3,r2
8113d4c4:	1001703a 	wrctl	status,r2
  
  return context;
8113d4c8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113d4cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113d4d0:	00a04574 	movhi	r2,33045
8113d4d4:	109def04 	addi	r2,r2,30652
8113d4d8:	e0fff817 	ldw	r3,-32(fp)
8113d4dc:	180690fa 	slli	r3,r3,3
8113d4e0:	10c5883a 	add	r2,r2,r3
8113d4e4:	e0fffe17 	ldw	r3,-8(fp)
8113d4e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113d4ec:	00a04574 	movhi	r2,33045
8113d4f0:	109def04 	addi	r2,r2,30652
8113d4f4:	e0fff817 	ldw	r3,-32(fp)
8113d4f8:	180690fa 	slli	r3,r3,3
8113d4fc:	10c5883a 	add	r2,r2,r3
8113d500:	10800104 	addi	r2,r2,4
8113d504:	e0ffff17 	ldw	r3,-4(fp)
8113d508:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113d50c:	e0bffe17 	ldw	r2,-8(fp)
8113d510:	10000526 	beq	r2,zero,8113d528 <alt_iic_isr_register+0xbc>
8113d514:	e0bff817 	ldw	r2,-32(fp)
8113d518:	100b883a 	mov	r5,r2
8113d51c:	e13ffc17 	ldw	r4,-16(fp)
8113d520:	113d2f40 	call	8113d2f4 <alt_ic_irq_enable>
8113d524:	00000406 	br	8113d538 <alt_iic_isr_register+0xcc>
8113d528:	e0bff817 	ldw	r2,-32(fp)
8113d52c:	100b883a 	mov	r5,r2
8113d530:	e13ffc17 	ldw	r4,-16(fp)
8113d534:	113d3840 	call	8113d384 <alt_ic_irq_disable>
8113d538:	e0bff715 	stw	r2,-36(fp)
8113d53c:	e0bffa17 	ldw	r2,-24(fp)
8113d540:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d544:	e0bff917 	ldw	r2,-28(fp)
8113d548:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113d54c:	e0bff717 	ldw	r2,-36(fp)
}
8113d550:	e037883a 	mov	sp,fp
8113d554:	dfc00117 	ldw	ra,4(sp)
8113d558:	df000017 	ldw	fp,0(sp)
8113d55c:	dec00204 	addi	sp,sp,8
8113d560:	f800283a 	ret

8113d564 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113d564:	defff904 	addi	sp,sp,-28
8113d568:	de00012e 	bgeu	sp,et,8113d570 <alt_open_fd+0xc>
8113d56c:	003b68fa 	trap	3
8113d570:	dfc00615 	stw	ra,24(sp)
8113d574:	df000515 	stw	fp,20(sp)
8113d578:	df000504 	addi	fp,sp,20
8113d57c:	e13ffc15 	stw	r4,-16(fp)
8113d580:	e17ffd15 	stw	r5,-12(fp)
8113d584:	e1bffe15 	stw	r6,-8(fp)
8113d588:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113d58c:	e1bfff17 	ldw	r6,-4(fp)
8113d590:	e17ffe17 	ldw	r5,-8(fp)
8113d594:	e13ffd17 	ldw	r4,-12(fp)
8113d598:	112a2c00 	call	8112a2c0 <open>
8113d59c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113d5a0:	e0bffb17 	ldw	r2,-20(fp)
8113d5a4:	10001c16 	blt	r2,zero,8113d618 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113d5a8:	00a04534 	movhi	r2,33044
8113d5ac:	108c5104 	addi	r2,r2,12612
8113d5b0:	e0fffb17 	ldw	r3,-20(fp)
8113d5b4:	18c00324 	muli	r3,r3,12
8113d5b8:	10c5883a 	add	r2,r2,r3
8113d5bc:	10c00017 	ldw	r3,0(r2)
8113d5c0:	e0bffc17 	ldw	r2,-16(fp)
8113d5c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113d5c8:	00a04534 	movhi	r2,33044
8113d5cc:	108c5104 	addi	r2,r2,12612
8113d5d0:	e0fffb17 	ldw	r3,-20(fp)
8113d5d4:	18c00324 	muli	r3,r3,12
8113d5d8:	10c5883a 	add	r2,r2,r3
8113d5dc:	10800104 	addi	r2,r2,4
8113d5e0:	10c00017 	ldw	r3,0(r2)
8113d5e4:	e0bffc17 	ldw	r2,-16(fp)
8113d5e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113d5ec:	00a04534 	movhi	r2,33044
8113d5f0:	108c5104 	addi	r2,r2,12612
8113d5f4:	e0fffb17 	ldw	r3,-20(fp)
8113d5f8:	18c00324 	muli	r3,r3,12
8113d5fc:	10c5883a 	add	r2,r2,r3
8113d600:	10800204 	addi	r2,r2,8
8113d604:	10c00017 	ldw	r3,0(r2)
8113d608:	e0bffc17 	ldw	r2,-16(fp)
8113d60c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113d610:	e13ffb17 	ldw	r4,-20(fp)
8113d614:	112a5640 	call	8112a564 <alt_release_fd>
  }
} 
8113d618:	0001883a 	nop
8113d61c:	e037883a 	mov	sp,fp
8113d620:	dfc00117 	ldw	ra,4(sp)
8113d624:	df000017 	ldw	fp,0(sp)
8113d628:	dec00204 	addi	sp,sp,8
8113d62c:	f800283a 	ret

8113d630 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113d630:	defffb04 	addi	sp,sp,-20
8113d634:	de00012e 	bgeu	sp,et,8113d63c <alt_io_redirect+0xc>
8113d638:	003b68fa 	trap	3
8113d63c:	dfc00415 	stw	ra,16(sp)
8113d640:	df000315 	stw	fp,12(sp)
8113d644:	df000304 	addi	fp,sp,12
8113d648:	e13ffd15 	stw	r4,-12(fp)
8113d64c:	e17ffe15 	stw	r5,-8(fp)
8113d650:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113d654:	01c07fc4 	movi	r7,511
8113d658:	01800044 	movi	r6,1
8113d65c:	e17ffd17 	ldw	r5,-12(fp)
8113d660:	01204534 	movhi	r4,33044
8113d664:	210c5404 	addi	r4,r4,12624
8113d668:	113d5640 	call	8113d564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113d66c:	01c07fc4 	movi	r7,511
8113d670:	000d883a 	mov	r6,zero
8113d674:	e17ffe17 	ldw	r5,-8(fp)
8113d678:	01204534 	movhi	r4,33044
8113d67c:	210c5104 	addi	r4,r4,12612
8113d680:	113d5640 	call	8113d564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113d684:	01c07fc4 	movi	r7,511
8113d688:	01800044 	movi	r6,1
8113d68c:	e17fff17 	ldw	r5,-4(fp)
8113d690:	01204534 	movhi	r4,33044
8113d694:	210c5704 	addi	r4,r4,12636
8113d698:	113d5640 	call	8113d564 <alt_open_fd>
}  
8113d69c:	0001883a 	nop
8113d6a0:	e037883a 	mov	sp,fp
8113d6a4:	dfc00117 	ldw	ra,4(sp)
8113d6a8:	df000017 	ldw	fp,0(sp)
8113d6ac:	dec00204 	addi	sp,sp,8
8113d6b0:	f800283a 	ret

8113d6b4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113d6b4:	defff204 	addi	sp,sp,-56
8113d6b8:	de00012e 	bgeu	sp,et,8113d6c0 <alt_printf+0xc>
8113d6bc:	003b68fa 	trap	3
8113d6c0:	dfc00a15 	stw	ra,40(sp)
8113d6c4:	df000915 	stw	fp,36(sp)
8113d6c8:	df000904 	addi	fp,sp,36
8113d6cc:	e13fff15 	stw	r4,-4(fp)
8113d6d0:	e1400215 	stw	r5,8(fp)
8113d6d4:	e1800315 	stw	r6,12(fp)
8113d6d8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113d6dc:	e0800204 	addi	r2,fp,8
8113d6e0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113d6e4:	e0bfff17 	ldw	r2,-4(fp)
8113d6e8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113d6ec:	00006f06 	br	8113d8ac <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113d6f0:	e0bff807 	ldb	r2,-32(fp)
8113d6f4:	10800960 	cmpeqi	r2,r2,37
8113d6f8:	1000041e 	bne	r2,zero,8113d70c <alt_printf+0x58>
        {
            alt_putchar(c);
8113d6fc:	e0bff807 	ldb	r2,-32(fp)
8113d700:	1009883a 	mov	r4,r2
8113d704:	113d8e80 	call	8113d8e8 <alt_putchar>
8113d708:	00006806 	br	8113d8ac <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113d70c:	e0bff717 	ldw	r2,-36(fp)
8113d710:	10c00044 	addi	r3,r2,1
8113d714:	e0fff715 	stw	r3,-36(fp)
8113d718:	10800003 	ldbu	r2,0(r2)
8113d71c:	e0bff805 	stb	r2,-32(fp)
8113d720:	e0bff807 	ldb	r2,-32(fp)
8113d724:	10006926 	beq	r2,zero,8113d8cc <alt_printf+0x218>
            {
                if (c == '%')
8113d728:	e0bff807 	ldb	r2,-32(fp)
8113d72c:	10800958 	cmpnei	r2,r2,37
8113d730:	1000041e 	bne	r2,zero,8113d744 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113d734:	e0bff807 	ldb	r2,-32(fp)
8113d738:	1009883a 	mov	r4,r2
8113d73c:	113d8e80 	call	8113d8e8 <alt_putchar>
8113d740:	00005a06 	br	8113d8ac <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113d744:	e0bff807 	ldb	r2,-32(fp)
8113d748:	108018d8 	cmpnei	r2,r2,99
8113d74c:	1000081e 	bne	r2,zero,8113d770 <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113d750:	e0bffe17 	ldw	r2,-8(fp)
8113d754:	10c00104 	addi	r3,r2,4
8113d758:	e0fffe15 	stw	r3,-8(fp)
8113d75c:	10800017 	ldw	r2,0(r2)
8113d760:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113d764:	e13ffd17 	ldw	r4,-12(fp)
8113d768:	113d8e80 	call	8113d8e8 <alt_putchar>
8113d76c:	00004f06 	br	8113d8ac <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113d770:	e0bff807 	ldb	r2,-32(fp)
8113d774:	10801e18 	cmpnei	r2,r2,120
8113d778:	1000341e 	bne	r2,zero,8113d84c <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113d77c:	e0bffe17 	ldw	r2,-8(fp)
8113d780:	10c00104 	addi	r3,r2,4
8113d784:	e0fffe15 	stw	r3,-8(fp)
8113d788:	10800017 	ldw	r2,0(r2)
8113d78c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113d790:	e0bffb17 	ldw	r2,-20(fp)
8113d794:	1000031e 	bne	r2,zero,8113d7a4 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113d798:	01000c04 	movi	r4,48
8113d79c:	113d8e80 	call	8113d8e8 <alt_putchar>
                        continue;
8113d7a0:	00004206 	br	8113d8ac <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113d7a4:	00800704 	movi	r2,28
8113d7a8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113d7ac:	00000306 	br	8113d7bc <alt_printf+0x108>
                        digit_shift -= 4;
8113d7b0:	e0bff917 	ldw	r2,-28(fp)
8113d7b4:	10bfff04 	addi	r2,r2,-4
8113d7b8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113d7bc:	00c003c4 	movi	r3,15
8113d7c0:	e0bff917 	ldw	r2,-28(fp)
8113d7c4:	1884983a 	sll	r2,r3,r2
8113d7c8:	1007883a 	mov	r3,r2
8113d7cc:	e0bffb17 	ldw	r2,-20(fp)
8113d7d0:	1884703a 	and	r2,r3,r2
8113d7d4:	103ff626 	beq	r2,zero,8113d7b0 <__reset+0xfb11d7b0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113d7d8:	00001906 	br	8113d840 <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113d7dc:	00c003c4 	movi	r3,15
8113d7e0:	e0bff917 	ldw	r2,-28(fp)
8113d7e4:	1884983a 	sll	r2,r3,r2
8113d7e8:	1007883a 	mov	r3,r2
8113d7ec:	e0bffb17 	ldw	r2,-20(fp)
8113d7f0:	1886703a 	and	r3,r3,r2
8113d7f4:	e0bff917 	ldw	r2,-28(fp)
8113d7f8:	1884d83a 	srl	r2,r3,r2
8113d7fc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113d800:	e0bffc17 	ldw	r2,-16(fp)
8113d804:	108002a8 	cmpgeui	r2,r2,10
8113d808:	1000041e 	bne	r2,zero,8113d81c <alt_printf+0x168>
                            c = '0' + digit;
8113d80c:	e0bffc17 	ldw	r2,-16(fp)
8113d810:	10800c04 	addi	r2,r2,48
8113d814:	e0bff805 	stb	r2,-32(fp)
8113d818:	00000306 	br	8113d828 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113d81c:	e0bffc17 	ldw	r2,-16(fp)
8113d820:	108015c4 	addi	r2,r2,87
8113d824:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113d828:	e0bff807 	ldb	r2,-32(fp)
8113d82c:	1009883a 	mov	r4,r2
8113d830:	113d8e80 	call	8113d8e8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113d834:	e0bff917 	ldw	r2,-28(fp)
8113d838:	10bfff04 	addi	r2,r2,-4
8113d83c:	e0bff915 	stw	r2,-28(fp)
8113d840:	e0bff917 	ldw	r2,-28(fp)
8113d844:	103fe50e 	bge	r2,zero,8113d7dc <__reset+0xfb11d7dc>
8113d848:	00001806 	br	8113d8ac <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113d84c:	e0bff807 	ldb	r2,-32(fp)
8113d850:	10801cd8 	cmpnei	r2,r2,115
8113d854:	1000151e 	bne	r2,zero,8113d8ac <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113d858:	e0bffe17 	ldw	r2,-8(fp)
8113d85c:	10c00104 	addi	r3,r2,4
8113d860:	e0fffe15 	stw	r3,-8(fp)
8113d864:	10800017 	ldw	r2,0(r2)
8113d868:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113d86c:	00000906 	br	8113d894 <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113d870:	e0bffa17 	ldw	r2,-24(fp)
8113d874:	10c00044 	addi	r3,r2,1
8113d878:	e0fffa15 	stw	r3,-24(fp)
8113d87c:	10800003 	ldbu	r2,0(r2)
8113d880:	10803fcc 	andi	r2,r2,255
8113d884:	1080201c 	xori	r2,r2,128
8113d888:	10bfe004 	addi	r2,r2,-128
8113d88c:	1009883a 	mov	r4,r2
8113d890:	113d8e80 	call	8113d8e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113d894:	e0bffa17 	ldw	r2,-24(fp)
8113d898:	10800003 	ldbu	r2,0(r2)
8113d89c:	10803fcc 	andi	r2,r2,255
8113d8a0:	1080201c 	xori	r2,r2,128
8113d8a4:	10bfe004 	addi	r2,r2,-128
8113d8a8:	103ff11e 	bne	r2,zero,8113d870 <__reset+0xfb11d870>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113d8ac:	e0bff717 	ldw	r2,-36(fp)
8113d8b0:	10c00044 	addi	r3,r2,1
8113d8b4:	e0fff715 	stw	r3,-36(fp)
8113d8b8:	10800003 	ldbu	r2,0(r2)
8113d8bc:	e0bff805 	stb	r2,-32(fp)
8113d8c0:	e0bff807 	ldb	r2,-32(fp)
8113d8c4:	103f8a1e 	bne	r2,zero,8113d6f0 <__reset+0xfb11d6f0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113d8c8:	00000106 	br	8113d8d0 <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113d8cc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113d8d0:	0001883a 	nop
8113d8d4:	e037883a 	mov	sp,fp
8113d8d8:	dfc00117 	ldw	ra,4(sp)
8113d8dc:	df000017 	ldw	fp,0(sp)
8113d8e0:	dec00504 	addi	sp,sp,20
8113d8e4:	f800283a 	ret

8113d8e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113d8e8:	defffd04 	addi	sp,sp,-12
8113d8ec:	de00012e 	bgeu	sp,et,8113d8f4 <alt_putchar+0xc>
8113d8f0:	003b68fa 	trap	3
8113d8f4:	dfc00215 	stw	ra,8(sp)
8113d8f8:	df000115 	stw	fp,4(sp)
8113d8fc:	df000104 	addi	fp,sp,4
8113d900:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113d904:	d0a00517 	ldw	r2,-32748(gp)
8113d908:	10800217 	ldw	r2,8(r2)
8113d90c:	100b883a 	mov	r5,r2
8113d910:	e13fff17 	ldw	r4,-4(fp)
8113d914:	11149fc0 	call	811149fc <putc>
#endif
#endif
}
8113d918:	e037883a 	mov	sp,fp
8113d91c:	dfc00117 	ldw	ra,4(sp)
8113d920:	df000017 	ldw	fp,0(sp)
8113d924:	dec00204 	addi	sp,sp,8
8113d928:	f800283a 	ret

8113d92c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113d92c:	deffff04 	addi	sp,sp,-4
8113d930:	de00012e 	bgeu	sp,et,8113d938 <altera_nios2_gen2_irq_init+0xc>
8113d934:	003b68fa 	trap	3
8113d938:	df000015 	stw	fp,0(sp)
8113d93c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113d940:	000170fa 	wrctl	ienable,zero
}
8113d944:	0001883a 	nop
8113d948:	e037883a 	mov	sp,fp
8113d94c:	df000017 	ldw	fp,0(sp)
8113d950:	dec00104 	addi	sp,sp,4
8113d954:	f800283a 	ret

8113d958 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113d958:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113d95c:	de002436 	bltu	sp,et,8113d9f0 <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113d960:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113d964:	d1208c17 	ldw	r4,-32208(gp)

      stw ra,  0(sp)
8113d968:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113d96c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113d970:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113d974:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113d978:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113d97c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113d980:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113d984:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113d988:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113d98c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113d990:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113d994:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113d998:	113dbf40 	call	8113dbf4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113d99c:	d1208617 	ldw	r4,-32232(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113d9a0:	d1607d87 	ldb	r5,-32266(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113d9a4:	d1208c15 	stw	r4,-32208(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113d9a8:	d1607dc5 	stb	r5,-32265(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113d9ac:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113d9b0:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113d9b4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113d9b8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113d9bc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113d9c0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113d9c4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113d9c8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113d9cc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113d9d0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113d9d4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113d9d8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113d9dc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113d9e0:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113d9e4:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113d9e8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113d9ec:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113d9f0:	003da0fa 	break	3

8113d9f4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113d9f4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113d9f8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113d9fc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113da00:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113da04:	113dbf40 	call	8113dbf4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113da08:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113da0c:	d4a07b05 	stb	r18,-32276(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113da10:	003fe206 	br	8113d99c <__reset+0xfb11d99c>

8113da14 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113da14:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113da18:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113da1c:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113da20:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113da24:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113da28:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113da2c:	dec00204 	addi	sp,sp,8

      callr r2
8113da30:	103ee83a 	callr	r2

      nop
8113da34:	0001883a 	nop

8113da38 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113da38:	defff704 	addi	sp,sp,-36
8113da3c:	de00012e 	bgeu	sp,et,8113da44 <OSTaskStkInit+0xc>
8113da40:	003b68fa 	trap	3
8113da44:	dfc00815 	stw	ra,32(sp)
8113da48:	df000715 	stw	fp,28(sp)
8113da4c:	df000704 	addi	fp,sp,28
8113da50:	e13ffc15 	stw	r4,-16(fp)
8113da54:	e17ffd15 	stw	r5,-12(fp)
8113da58:	e1bffe15 	stw	r6,-8(fp)
8113da5c:	3805883a 	mov	r2,r7
8113da60:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113da64:	e0fffe17 	ldw	r3,-8(fp)
8113da68:	00bfff04 	movi	r2,-4
8113da6c:	1884703a 	and	r2,r3,r2
8113da70:	10bef704 	addi	r2,r2,-1060
8113da74:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113da78:	01810904 	movi	r6,1060
8113da7c:	000b883a 	mov	r5,zero
8113da80:	e13ff917 	ldw	r4,-28(fp)
8113da84:	11147480 	call	81114748 <memset>
8113da88:	e0bff917 	ldw	r2,-28(fp)
8113da8c:	10c0bb04 	addi	r3,r2,748
8113da90:	e0bff917 	ldw	r2,-28(fp)
8113da94:	10c00115 	stw	r3,4(r2)
8113da98:	e0bff917 	ldw	r2,-28(fp)
8113da9c:	10c0d504 	addi	r3,r2,852
8113daa0:	e0bff917 	ldw	r2,-28(fp)
8113daa4:	10c00215 	stw	r3,8(r2)
8113daa8:	e0bff917 	ldw	r2,-28(fp)
8113daac:	10c0ef04 	addi	r3,r2,956
8113dab0:	e0bff917 	ldw	r2,-28(fp)
8113dab4:	10c00315 	stw	r3,12(r2)
8113dab8:	e0fff917 	ldw	r3,-28(fp)
8113dabc:	00a04534 	movhi	r2,33044
8113dac0:	1089ea04 	addi	r2,r2,10152
8113dac4:	18800d15 	stw	r2,52(r3)
8113dac8:	e0bff917 	ldw	r2,-28(fp)
8113dacc:	00c00044 	movi	r3,1
8113dad0:	10c02915 	stw	r3,164(r2)
8113dad4:	10002a15 	stw	zero,168(r2)
8113dad8:	e0bff917 	ldw	r2,-28(fp)
8113dadc:	00ccc384 	movi	r3,13070
8113dae0:	10c02b0d 	sth	r3,172(r2)
8113dae4:	e0bff917 	ldw	r2,-28(fp)
8113dae8:	00eaf344 	movi	r3,-21555
8113daec:	10c02b8d 	sth	r3,174(r2)
8113daf0:	e0bff917 	ldw	r2,-28(fp)
8113daf4:	00c48d04 	movi	r3,4660
8113daf8:	10c02c0d 	sth	r3,176(r2)
8113dafc:	e0bff917 	ldw	r2,-28(fp)
8113db00:	00f99b44 	movi	r3,-6547
8113db04:	10c02c8d 	sth	r3,178(r2)
8113db08:	e0bff917 	ldw	r2,-28(fp)
8113db0c:	00f7bb04 	movi	r3,-8468
8113db10:	10c02d0d 	sth	r3,180(r2)
8113db14:	e0bff917 	ldw	r2,-28(fp)
8113db18:	00c00144 	movi	r3,5
8113db1c:	10c02d8d 	sth	r3,182(r2)
8113db20:	e0bff917 	ldw	r2,-28(fp)
8113db24:	00c002c4 	movi	r3,11
8113db28:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113db2c:	e0bff917 	ldw	r2,-28(fp)
8113db30:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113db34:	e0bffa17 	ldw	r2,-24(fp)
8113db38:	10bff304 	addi	r2,r2,-52
8113db3c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113db40:	e0bffb17 	ldw	r2,-20(fp)
8113db44:	10800c04 	addi	r2,r2,48
8113db48:	e0fffc17 	ldw	r3,-16(fp)
8113db4c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113db50:	e0bffb17 	ldw	r2,-20(fp)
8113db54:	10800b04 	addi	r2,r2,44
8113db58:	e0fffd17 	ldw	r3,-12(fp)
8113db5c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113db60:	e0bffb17 	ldw	r2,-20(fp)
8113db64:	10800a04 	addi	r2,r2,40
8113db68:	e0fff917 	ldw	r3,-28(fp)
8113db6c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113db70:	00a04534 	movhi	r2,33044
8113db74:	10b68504 	addi	r2,r2,-9708
8113db78:	10c00104 	addi	r3,r2,4
8113db7c:	e0bffb17 	ldw	r2,-20(fp)
8113db80:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113db84:	e0bffb17 	ldw	r2,-20(fp)
}
8113db88:	e037883a 	mov	sp,fp
8113db8c:	dfc00117 	ldw	ra,4(sp)
8113db90:	df000017 	ldw	fp,0(sp)
8113db94:	dec00204 	addi	sp,sp,8
8113db98:	f800283a 	ret

8113db9c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113db9c:	defffe04 	addi	sp,sp,-8
8113dba0:	de00012e 	bgeu	sp,et,8113dba8 <OSTaskCreateHook+0xc>
8113dba4:	003b68fa 	trap	3
8113dba8:	df000115 	stw	fp,4(sp)
8113dbac:	df000104 	addi	fp,sp,4
8113dbb0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113dbb4:	0001883a 	nop
8113dbb8:	e037883a 	mov	sp,fp
8113dbbc:	df000017 	ldw	fp,0(sp)
8113dbc0:	dec00104 	addi	sp,sp,4
8113dbc4:	f800283a 	ret

8113dbc8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113dbc8:	defffe04 	addi	sp,sp,-8
8113dbcc:	de00012e 	bgeu	sp,et,8113dbd4 <OSTaskDelHook+0xc>
8113dbd0:	003b68fa 	trap	3
8113dbd4:	df000115 	stw	fp,4(sp)
8113dbd8:	df000104 	addi	fp,sp,4
8113dbdc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113dbe0:	0001883a 	nop
8113dbe4:	e037883a 	mov	sp,fp
8113dbe8:	df000017 	ldw	fp,0(sp)
8113dbec:	dec00104 	addi	sp,sp,4
8113dbf0:	f800283a 	ret

8113dbf4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113dbf4:	deffff04 	addi	sp,sp,-4
8113dbf8:	de00012e 	bgeu	sp,et,8113dc00 <OSTaskSwHook+0xc>
8113dbfc:	003b68fa 	trap	3
8113dc00:	df000015 	stw	fp,0(sp)
8113dc04:	d839883a 	mov	fp,sp
}
8113dc08:	0001883a 	nop
8113dc0c:	e037883a 	mov	sp,fp
8113dc10:	df000017 	ldw	fp,0(sp)
8113dc14:	dec00104 	addi	sp,sp,4
8113dc18:	f800283a 	ret

8113dc1c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113dc1c:	deffff04 	addi	sp,sp,-4
8113dc20:	de00012e 	bgeu	sp,et,8113dc28 <OSTaskStatHook+0xc>
8113dc24:	003b68fa 	trap	3
8113dc28:	df000015 	stw	fp,0(sp)
8113dc2c:	d839883a 	mov	fp,sp
}
8113dc30:	0001883a 	nop
8113dc34:	e037883a 	mov	sp,fp
8113dc38:	df000017 	ldw	fp,0(sp)
8113dc3c:	dec00104 	addi	sp,sp,4
8113dc40:	f800283a 	ret

8113dc44 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113dc44:	defffe04 	addi	sp,sp,-8
8113dc48:	de00012e 	bgeu	sp,et,8113dc50 <OSTimeTickHook+0xc>
8113dc4c:	003b68fa 	trap	3
8113dc50:	dfc00115 	stw	ra,4(sp)
8113dc54:	df000015 	stw	fp,0(sp)
8113dc58:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113dc5c:	d0a0a00b 	ldhu	r2,-32128(gp)
8113dc60:	10800044 	addi	r2,r2,1
8113dc64:	d0a0a00d 	sth	r2,-32128(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113dc68:	d0a0a00b 	ldhu	r2,-32128(gp)
8113dc6c:	10bfffcc 	andi	r2,r2,65535
8113dc70:	10807d30 	cmpltui	r2,r2,500
8113dc74:	1000021e 	bne	r2,zero,8113dc80 <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113dc78:	d020a00d 	sth	zero,-32128(gp)
        OSTmrSignal();
8113dc7c:	11344c40 	call	811344c4 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113dc80:	0001883a 	nop
8113dc84:	e037883a 	mov	sp,fp
8113dc88:	dfc00117 	ldw	ra,4(sp)
8113dc8c:	df000017 	ldw	fp,0(sp)
8113dc90:	dec00204 	addi	sp,sp,8
8113dc94:	f800283a 	ret

8113dc98 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113dc98:	deffff04 	addi	sp,sp,-4
8113dc9c:	de00012e 	bgeu	sp,et,8113dca4 <OSInitHookBegin+0xc>
8113dca0:	003b68fa 	trap	3
8113dca4:	df000015 	stw	fp,0(sp)
8113dca8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113dcac:	d020a00d 	sth	zero,-32128(gp)
#endif
}
8113dcb0:	0001883a 	nop
8113dcb4:	e037883a 	mov	sp,fp
8113dcb8:	df000017 	ldw	fp,0(sp)
8113dcbc:	dec00104 	addi	sp,sp,4
8113dcc0:	f800283a 	ret

8113dcc4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113dcc4:	deffff04 	addi	sp,sp,-4
8113dcc8:	de00012e 	bgeu	sp,et,8113dcd0 <OSInitHookEnd+0xc>
8113dccc:	003b68fa 	trap	3
8113dcd0:	df000015 	stw	fp,0(sp)
8113dcd4:	d839883a 	mov	fp,sp
}
8113dcd8:	0001883a 	nop
8113dcdc:	e037883a 	mov	sp,fp
8113dce0:	df000017 	ldw	fp,0(sp)
8113dce4:	dec00104 	addi	sp,sp,4
8113dce8:	f800283a 	ret

8113dcec <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113dcec:	deffff04 	addi	sp,sp,-4
8113dcf0:	de00012e 	bgeu	sp,et,8113dcf8 <OSTaskIdleHook+0xc>
8113dcf4:	003b68fa 	trap	3
8113dcf8:	df000015 	stw	fp,0(sp)
8113dcfc:	d839883a 	mov	fp,sp
}
8113dd00:	0001883a 	nop
8113dd04:	e037883a 	mov	sp,fp
8113dd08:	df000017 	ldw	fp,0(sp)
8113dd0c:	dec00104 	addi	sp,sp,4
8113dd10:	f800283a 	ret

8113dd14 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113dd14:	defffe04 	addi	sp,sp,-8
8113dd18:	de00012e 	bgeu	sp,et,8113dd20 <OSTCBInitHook+0xc>
8113dd1c:	003b68fa 	trap	3
8113dd20:	df000115 	stw	fp,4(sp)
8113dd24:	df000104 	addi	fp,sp,4
8113dd28:	e13fff15 	stw	r4,-4(fp)
}
8113dd2c:	0001883a 	nop
8113dd30:	e037883a 	mov	sp,fp
8113dd34:	df000017 	ldw	fp,0(sp)
8113dd38:	dec00104 	addi	sp,sp,4
8113dd3c:	f800283a 	ret

8113dd40 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113dd40:	defffe04 	addi	sp,sp,-8
8113dd44:	de00012e 	bgeu	sp,et,8113dd4c <alt_exception_cause_generated_bad_addr+0xc>
8113dd48:	003b68fa 	trap	3
8113dd4c:	df000115 	stw	fp,4(sp)
8113dd50:	df000104 	addi	fp,sp,4
8113dd54:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113dd58:	e0bfff17 	ldw	r2,-4(fp)
8113dd5c:	10bffe84 	addi	r2,r2,-6
8113dd60:	10c00428 	cmpgeui	r3,r2,16
8113dd64:	18001a1e 	bne	r3,zero,8113ddd0 <alt_exception_cause_generated_bad_addr+0x90>
8113dd68:	100690ba 	slli	r3,r2,2
8113dd6c:	00a04534 	movhi	r2,33044
8113dd70:	10b76004 	addi	r2,r2,-8832
8113dd74:	1885883a 	add	r2,r3,r2
8113dd78:	10800017 	ldw	r2,0(r2)
8113dd7c:	1000683a 	jmp	r2
8113dd80:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113dd84:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113dd88:	8113ddd0 	cmplti	r4,r16,20343
8113dd8c:	8113ddd0 	cmplti	r4,r16,20343
8113dd90:	8113ddd0 	cmplti	r4,r16,20343
8113dd94:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113dd98:	8113ddc8 	cmpgei	r4,r16,20343
8113dd9c:	8113ddd0 	cmplti	r4,r16,20343
8113dda0:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113dda4:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113dda8:	8113ddd0 	cmplti	r4,r16,20343
8113ddac:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
8113ddb0:	8113ddc8 	cmpgei	r4,r16,20343
8113ddb4:	8113ddd0 	cmplti	r4,r16,20343
8113ddb8:	8113ddd0 	cmplti	r4,r16,20343
8113ddbc:	8113ddc0 	call	88113ddc <__reset+0x20f3ddc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113ddc0:	00800044 	movi	r2,1
8113ddc4:	00000306 	br	8113ddd4 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113ddc8:	0005883a 	mov	r2,zero
8113ddcc:	00000106 	br	8113ddd4 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113ddd0:	0005883a 	mov	r2,zero
  }
}
8113ddd4:	e037883a 	mov	sp,fp
8113ddd8:	df000017 	ldw	fp,0(sp)
8113dddc:	dec00104 	addi	sp,sp,4
8113dde0:	f800283a 	ret

8113dde4 <atexit>:
8113dde4:	200b883a 	mov	r5,r4
8113dde8:	000f883a 	mov	r7,zero
8113ddec:	000d883a 	mov	r6,zero
8113ddf0:	0009883a 	mov	r4,zero
8113ddf4:	113dfa01 	jmpi	8113dfa0 <__register_exitproc>

8113ddf8 <exit>:
8113ddf8:	defffe04 	addi	sp,sp,-8
8113ddfc:	000b883a 	mov	r5,zero
8113de00:	de00012e 	bgeu	sp,et,8113de08 <exit+0x10>
8113de04:	003b68fa 	trap	3
8113de08:	dc000015 	stw	r16,0(sp)
8113de0c:	dfc00115 	stw	ra,4(sp)
8113de10:	2021883a 	mov	r16,r4
8113de14:	113e0c00 	call	8113e0c0 <__call_exitprocs>
8113de18:	00a04534 	movhi	r2,33044
8113de1c:	10916804 	addi	r2,r2,17824
8113de20:	11000017 	ldw	r4,0(r2)
8113de24:	20800f17 	ldw	r2,60(r4)
8113de28:	10000126 	beq	r2,zero,8113de30 <exit+0x38>
8113de2c:	103ee83a 	callr	r2
8113de30:	8009883a 	mov	r4,r16
8113de34:	113e2480 	call	8113e248 <_exit>

8113de38 <memcmp>:
8113de38:	01c000c4 	movi	r7,3
8113de3c:	3980192e 	bgeu	r7,r6,8113dea4 <memcmp+0x6c>
8113de40:	2144b03a 	or	r2,r4,r5
8113de44:	11c4703a 	and	r2,r2,r7
8113de48:	10000f26 	beq	r2,zero,8113de88 <memcmp+0x50>
8113de4c:	20800003 	ldbu	r2,0(r4)
8113de50:	28c00003 	ldbu	r3,0(r5)
8113de54:	10c0151e 	bne	r2,r3,8113deac <memcmp+0x74>
8113de58:	31bfff84 	addi	r6,r6,-2
8113de5c:	01ffffc4 	movi	r7,-1
8113de60:	00000406 	br	8113de74 <memcmp+0x3c>
8113de64:	20800003 	ldbu	r2,0(r4)
8113de68:	28c00003 	ldbu	r3,0(r5)
8113de6c:	31bfffc4 	addi	r6,r6,-1
8113de70:	10c00e1e 	bne	r2,r3,8113deac <memcmp+0x74>
8113de74:	21000044 	addi	r4,r4,1
8113de78:	29400044 	addi	r5,r5,1
8113de7c:	31fff91e 	bne	r6,r7,8113de64 <__reset+0xfb11de64>
8113de80:	0005883a 	mov	r2,zero
8113de84:	f800283a 	ret
8113de88:	20c00017 	ldw	r3,0(r4)
8113de8c:	28800017 	ldw	r2,0(r5)
8113de90:	18bfee1e 	bne	r3,r2,8113de4c <__reset+0xfb11de4c>
8113de94:	31bfff04 	addi	r6,r6,-4
8113de98:	21000104 	addi	r4,r4,4
8113de9c:	29400104 	addi	r5,r5,4
8113dea0:	39bff936 	bltu	r7,r6,8113de88 <__reset+0xfb11de88>
8113dea4:	303fe91e 	bne	r6,zero,8113de4c <__reset+0xfb11de4c>
8113dea8:	003ff506 	br	8113de80 <__reset+0xfb11de80>
8113deac:	10c5c83a 	sub	r2,r2,r3
8113deb0:	f800283a 	ret

8113deb4 <strncpy>:
8113deb4:	2906b03a 	or	r3,r5,r4
8113deb8:	18c000cc 	andi	r3,r3,3
8113debc:	2005883a 	mov	r2,r4
8113dec0:	18002c1e 	bne	r3,zero,8113df74 <strncpy+0xc0>
8113dec4:	010000c4 	movi	r4,3
8113dec8:	21802a2e 	bgeu	r4,r6,8113df74 <strncpy+0xc0>
8113decc:	033fbff4 	movhi	r12,65279
8113ded0:	02e02074 	movhi	r11,32897
8113ded4:	633fbfc4 	addi	r12,r12,-257
8113ded8:	5ae02004 	addi	r11,r11,-32640
8113dedc:	100f883a 	mov	r7,r2
8113dee0:	2a000017 	ldw	r8,0(r5)
8113dee4:	3815883a 	mov	r10,r7
8113dee8:	4313883a 	add	r9,r8,r12
8113deec:	0206303a 	nor	r3,zero,r8
8113def0:	48c6703a 	and	r3,r9,r3
8113def4:	1ac6703a 	and	r3,r3,r11
8113def8:	1800261e 	bne	r3,zero,8113df94 <strncpy+0xe0>
8113defc:	39c00104 	addi	r7,r7,4
8113df00:	52000015 	stw	r8,0(r10)
8113df04:	31bfff04 	addi	r6,r6,-4
8113df08:	3811883a 	mov	r8,r7
8113df0c:	29400104 	addi	r5,r5,4
8113df10:	21bff336 	bltu	r4,r6,8113dee0 <__reset+0xfb11dee0>
8113df14:	30001e26 	beq	r6,zero,8113df90 <strncpy+0xdc>
8113df18:	29c00003 	ldbu	r7,0(r5)
8113df1c:	31bfffc4 	addi	r6,r6,-1
8113df20:	40c00044 	addi	r3,r8,1
8113df24:	41c00005 	stb	r7,0(r8)
8113df28:	39c03fcc 	andi	r7,r7,255
8113df2c:	39c0201c 	xori	r7,r7,128
8113df30:	39ffe004 	addi	r7,r7,-128
8113df34:	29400044 	addi	r5,r5,1
8113df38:	38001026 	beq	r7,zero,8113df7c <strncpy+0xc8>
8113df3c:	1811883a 	mov	r8,r3
8113df40:	00000906 	br	8113df68 <strncpy+0xb4>
8113df44:	29c00003 	ldbu	r7,0(r5)
8113df48:	31bfffc4 	addi	r6,r6,-1
8113df4c:	29400044 	addi	r5,r5,1
8113df50:	41c00005 	stb	r7,0(r8)
8113df54:	39c03fcc 	andi	r7,r7,255
8113df58:	39c0201c 	xori	r7,r7,128
8113df5c:	39ffe004 	addi	r7,r7,-128
8113df60:	1811883a 	mov	r8,r3
8113df64:	38000526 	beq	r7,zero,8113df7c <strncpy+0xc8>
8113df68:	18c00044 	addi	r3,r3,1
8113df6c:	303ff51e 	bne	r6,zero,8113df44 <__reset+0xfb11df44>
8113df70:	f800283a 	ret
8113df74:	1011883a 	mov	r8,r2
8113df78:	003fe606 	br	8113df14 <__reset+0xfb11df14>
8113df7c:	30000726 	beq	r6,zero,8113df9c <strncpy+0xe8>
8113df80:	198d883a 	add	r6,r3,r6
8113df84:	18000005 	stb	zero,0(r3)
8113df88:	18c00044 	addi	r3,r3,1
8113df8c:	19bffd1e 	bne	r3,r6,8113df84 <__reset+0xfb11df84>
8113df90:	f800283a 	ret
8113df94:	3811883a 	mov	r8,r7
8113df98:	003fdf06 	br	8113df18 <__reset+0xfb11df18>
8113df9c:	f800283a 	ret

8113dfa0 <__register_exitproc>:
8113dfa0:	defffa04 	addi	sp,sp,-24
8113dfa4:	de00012e 	bgeu	sp,et,8113dfac <__register_exitproc+0xc>
8113dfa8:	003b68fa 	trap	3
8113dfac:	dc000315 	stw	r16,12(sp)
8113dfb0:	04204534 	movhi	r16,33044
8113dfb4:	84116804 	addi	r16,r16,17824
8113dfb8:	80c00017 	ldw	r3,0(r16)
8113dfbc:	dc400415 	stw	r17,16(sp)
8113dfc0:	dfc00515 	stw	ra,20(sp)
8113dfc4:	18805217 	ldw	r2,328(r3)
8113dfc8:	2023883a 	mov	r17,r4
8113dfcc:	10003726 	beq	r2,zero,8113e0ac <__register_exitproc+0x10c>
8113dfd0:	10c00117 	ldw	r3,4(r2)
8113dfd4:	010007c4 	movi	r4,31
8113dfd8:	20c00e16 	blt	r4,r3,8113e014 <__register_exitproc+0x74>
8113dfdc:	1a000044 	addi	r8,r3,1
8113dfe0:	8800221e 	bne	r17,zero,8113e06c <__register_exitproc+0xcc>
8113dfe4:	18c00084 	addi	r3,r3,2
8113dfe8:	18c7883a 	add	r3,r3,r3
8113dfec:	18c7883a 	add	r3,r3,r3
8113dff0:	12000115 	stw	r8,4(r2)
8113dff4:	10c7883a 	add	r3,r2,r3
8113dff8:	19400015 	stw	r5,0(r3)
8113dffc:	0005883a 	mov	r2,zero
8113e000:	dfc00517 	ldw	ra,20(sp)
8113e004:	dc400417 	ldw	r17,16(sp)
8113e008:	dc000317 	ldw	r16,12(sp)
8113e00c:	dec00604 	addi	sp,sp,24
8113e010:	f800283a 	ret
8113e014:	00800034 	movhi	r2,0
8113e018:	10800004 	addi	r2,r2,0
8113e01c:	10002626 	beq	r2,zero,8113e0b8 <__register_exitproc+0x118>
8113e020:	01006404 	movi	r4,400
8113e024:	d9400015 	stw	r5,0(sp)
8113e028:	d9800115 	stw	r6,4(sp)
8113e02c:	d9c00215 	stw	r7,8(sp)
8113e030:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113e034:	d9400017 	ldw	r5,0(sp)
8113e038:	d9800117 	ldw	r6,4(sp)
8113e03c:	d9c00217 	ldw	r7,8(sp)
8113e040:	10001d26 	beq	r2,zero,8113e0b8 <__register_exitproc+0x118>
8113e044:	81000017 	ldw	r4,0(r16)
8113e048:	10000115 	stw	zero,4(r2)
8113e04c:	02000044 	movi	r8,1
8113e050:	22405217 	ldw	r9,328(r4)
8113e054:	0007883a 	mov	r3,zero
8113e058:	12400015 	stw	r9,0(r2)
8113e05c:	20805215 	stw	r2,328(r4)
8113e060:	10006215 	stw	zero,392(r2)
8113e064:	10006315 	stw	zero,396(r2)
8113e068:	883fde26 	beq	r17,zero,8113dfe4 <__reset+0xfb11dfe4>
8113e06c:	18c9883a 	add	r4,r3,r3
8113e070:	2109883a 	add	r4,r4,r4
8113e074:	1109883a 	add	r4,r2,r4
8113e078:	21802215 	stw	r6,136(r4)
8113e07c:	01800044 	movi	r6,1
8113e080:	12406217 	ldw	r9,392(r2)
8113e084:	30cc983a 	sll	r6,r6,r3
8113e088:	4992b03a 	or	r9,r9,r6
8113e08c:	12406215 	stw	r9,392(r2)
8113e090:	21c04215 	stw	r7,264(r4)
8113e094:	01000084 	movi	r4,2
8113e098:	893fd21e 	bne	r17,r4,8113dfe4 <__reset+0xfb11dfe4>
8113e09c:	11006317 	ldw	r4,396(r2)
8113e0a0:	218cb03a 	or	r6,r4,r6
8113e0a4:	11806315 	stw	r6,396(r2)
8113e0a8:	003fce06 	br	8113dfe4 <__reset+0xfb11dfe4>
8113e0ac:	18805304 	addi	r2,r3,332
8113e0b0:	18805215 	stw	r2,328(r3)
8113e0b4:	003fc606 	br	8113dfd0 <__reset+0xfb11dfd0>
8113e0b8:	00bfffc4 	movi	r2,-1
8113e0bc:	003fd006 	br	8113e000 <__reset+0xfb11e000>

8113e0c0 <__call_exitprocs>:
8113e0c0:	defff504 	addi	sp,sp,-44
8113e0c4:	de00012e 	bgeu	sp,et,8113e0cc <__call_exitprocs+0xc>
8113e0c8:	003b68fa 	trap	3
8113e0cc:	df000915 	stw	fp,36(sp)
8113e0d0:	dd400615 	stw	r21,24(sp)
8113e0d4:	dc800315 	stw	r18,12(sp)
8113e0d8:	dfc00a15 	stw	ra,40(sp)
8113e0dc:	ddc00815 	stw	r23,32(sp)
8113e0e0:	dd800715 	stw	r22,28(sp)
8113e0e4:	dd000515 	stw	r20,20(sp)
8113e0e8:	dcc00415 	stw	r19,16(sp)
8113e0ec:	dc400215 	stw	r17,8(sp)
8113e0f0:	dc000115 	stw	r16,4(sp)
8113e0f4:	d9000015 	stw	r4,0(sp)
8113e0f8:	2839883a 	mov	fp,r5
8113e0fc:	04800044 	movi	r18,1
8113e100:	057fffc4 	movi	r21,-1
8113e104:	00a04534 	movhi	r2,33044
8113e108:	10916804 	addi	r2,r2,17824
8113e10c:	12000017 	ldw	r8,0(r2)
8113e110:	45005217 	ldw	r20,328(r8)
8113e114:	44c05204 	addi	r19,r8,328
8113e118:	a0001c26 	beq	r20,zero,8113e18c <__call_exitprocs+0xcc>
8113e11c:	a0800117 	ldw	r2,4(r20)
8113e120:	15ffffc4 	addi	r23,r2,-1
8113e124:	b8000d16 	blt	r23,zero,8113e15c <__call_exitprocs+0x9c>
8113e128:	14000044 	addi	r16,r2,1
8113e12c:	8421883a 	add	r16,r16,r16
8113e130:	8421883a 	add	r16,r16,r16
8113e134:	84402004 	addi	r17,r16,128
8113e138:	a463883a 	add	r17,r20,r17
8113e13c:	a421883a 	add	r16,r20,r16
8113e140:	e0001e26 	beq	fp,zero,8113e1bc <__call_exitprocs+0xfc>
8113e144:	80804017 	ldw	r2,256(r16)
8113e148:	e0801c26 	beq	fp,r2,8113e1bc <__call_exitprocs+0xfc>
8113e14c:	bdffffc4 	addi	r23,r23,-1
8113e150:	843fff04 	addi	r16,r16,-4
8113e154:	8c7fff04 	addi	r17,r17,-4
8113e158:	bd7ff91e 	bne	r23,r21,8113e140 <__reset+0xfb11e140>
8113e15c:	00800034 	movhi	r2,0
8113e160:	10800004 	addi	r2,r2,0
8113e164:	10000926 	beq	r2,zero,8113e18c <__call_exitprocs+0xcc>
8113e168:	a0800117 	ldw	r2,4(r20)
8113e16c:	1000301e 	bne	r2,zero,8113e230 <__call_exitprocs+0x170>
8113e170:	a0800017 	ldw	r2,0(r20)
8113e174:	10003226 	beq	r2,zero,8113e240 <__call_exitprocs+0x180>
8113e178:	a009883a 	mov	r4,r20
8113e17c:	98800015 	stw	r2,0(r19)
8113e180:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113e184:	9d000017 	ldw	r20,0(r19)
8113e188:	a03fe41e 	bne	r20,zero,8113e11c <__reset+0xfb11e11c>
8113e18c:	dfc00a17 	ldw	ra,40(sp)
8113e190:	df000917 	ldw	fp,36(sp)
8113e194:	ddc00817 	ldw	r23,32(sp)
8113e198:	dd800717 	ldw	r22,28(sp)
8113e19c:	dd400617 	ldw	r21,24(sp)
8113e1a0:	dd000517 	ldw	r20,20(sp)
8113e1a4:	dcc00417 	ldw	r19,16(sp)
8113e1a8:	dc800317 	ldw	r18,12(sp)
8113e1ac:	dc400217 	ldw	r17,8(sp)
8113e1b0:	dc000117 	ldw	r16,4(sp)
8113e1b4:	dec00b04 	addi	sp,sp,44
8113e1b8:	f800283a 	ret
8113e1bc:	a0800117 	ldw	r2,4(r20)
8113e1c0:	80c00017 	ldw	r3,0(r16)
8113e1c4:	10bfffc4 	addi	r2,r2,-1
8113e1c8:	15c01426 	beq	r2,r23,8113e21c <__call_exitprocs+0x15c>
8113e1cc:	80000015 	stw	zero,0(r16)
8113e1d0:	183fde26 	beq	r3,zero,8113e14c <__reset+0xfb11e14c>
8113e1d4:	95c8983a 	sll	r4,r18,r23
8113e1d8:	a0806217 	ldw	r2,392(r20)
8113e1dc:	a5800117 	ldw	r22,4(r20)
8113e1e0:	2084703a 	and	r2,r4,r2
8113e1e4:	10000b26 	beq	r2,zero,8113e214 <__call_exitprocs+0x154>
8113e1e8:	a0806317 	ldw	r2,396(r20)
8113e1ec:	2088703a 	and	r4,r4,r2
8113e1f0:	20000c1e 	bne	r4,zero,8113e224 <__call_exitprocs+0x164>
8113e1f4:	89400017 	ldw	r5,0(r17)
8113e1f8:	d9000017 	ldw	r4,0(sp)
8113e1fc:	183ee83a 	callr	r3
8113e200:	a0800117 	ldw	r2,4(r20)
8113e204:	15bfbf1e 	bne	r2,r22,8113e104 <__reset+0xfb11e104>
8113e208:	98800017 	ldw	r2,0(r19)
8113e20c:	153fcf26 	beq	r2,r20,8113e14c <__reset+0xfb11e14c>
8113e210:	003fbc06 	br	8113e104 <__reset+0xfb11e104>
8113e214:	183ee83a 	callr	r3
8113e218:	003ff906 	br	8113e200 <__reset+0xfb11e200>
8113e21c:	a5c00115 	stw	r23,4(r20)
8113e220:	003feb06 	br	8113e1d0 <__reset+0xfb11e1d0>
8113e224:	89000017 	ldw	r4,0(r17)
8113e228:	183ee83a 	callr	r3
8113e22c:	003ff406 	br	8113e200 <__reset+0xfb11e200>
8113e230:	a0800017 	ldw	r2,0(r20)
8113e234:	a027883a 	mov	r19,r20
8113e238:	1029883a 	mov	r20,r2
8113e23c:	003fb606 	br	8113e118 <__reset+0xfb11e118>
8113e240:	0005883a 	mov	r2,zero
8113e244:	003ffb06 	br	8113e234 <__reset+0xfb11e234>

8113e248 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113e248:	defffc04 	addi	sp,sp,-16
8113e24c:	de00012e 	bgeu	sp,et,8113e254 <_exit+0xc>
8113e250:	003b68fa 	trap	3
8113e254:	dfc00315 	stw	ra,12(sp)
8113e258:	df000215 	stw	fp,8(sp)
8113e25c:	df000204 	addi	fp,sp,8
8113e260:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
8113e264:	d0a01217 	ldw	r2,-32696(gp)
8113e268:	10800058 	cmpnei	r2,r2,1
8113e26c:	1000031e 	bne	r2,zero,8113e27c <_exit+0x34>
8113e270:	01204534 	movhi	r4,33044
8113e274:	2109eb04 	addi	r4,r4,10156
8113e278:	1129a900 	call	81129a90 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
8113e27c:	d0a01217 	ldw	r2,-32696(gp)
8113e280:	10800058 	cmpnei	r2,r2,1
8113e284:	1000041e 	bne	r2,zero,8113e298 <_exit+0x50>
8113e288:	e17fff17 	ldw	r5,-4(fp)
8113e28c:	01204534 	movhi	r4,33044
8113e290:	2109f604 	addi	r4,r4,10200
8113e294:	1129a900 	call	81129a90 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
8113e298:	d0a01217 	ldw	r2,-32696(gp)
8113e29c:	10800058 	cmpnei	r2,r2,1
8113e2a0:	1000031e 	bne	r2,zero,8113e2b0 <_exit+0x68>
8113e2a4:	01204534 	movhi	r4,33044
8113e2a8:	210a0104 	addi	r4,r4,10244
8113e2ac:	1129a900 	call	81129a90 <alt_log_printf_proc>
  ALT_OS_STOP();
8113e2b0:	d0207b05 	stb	zero,-32276(gp)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
8113e2b4:	d0a01217 	ldw	r2,-32696(gp)
8113e2b8:	10800058 	cmpnei	r2,r2,1
8113e2bc:	1000031e 	bne	r2,zero,8113e2cc <_exit+0x84>
8113e2c0:	01204534 	movhi	r4,33044
8113e2c4:	210a0b04 	addi	r4,r4,10284
8113e2c8:	1129a900 	call	81129a90 <alt_log_printf_proc>
8113e2cc:	e0bfff17 	ldw	r2,-4(fp)
8113e2d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113e2d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113e2d8:	10000226 	beq	r2,zero,8113e2e4 <_exit+0x9c>
    ALT_SIM_FAIL();
8113e2dc:	002af070 	cmpltui	zero,zero,43969
8113e2e0:	00000106 	br	8113e2e8 <_exit+0xa0>
  } else {
    ALT_SIM_PASS();
8113e2e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
8113e2e8:	d0a01217 	ldw	r2,-32696(gp)
8113e2ec:	10800058 	cmpnei	r2,r2,1
8113e2f0:	1000031e 	bne	r2,zero,8113e300 <_exit+0xb8>
8113e2f4:	01204534 	movhi	r4,33044
8113e2f8:	210a1504 	addi	r4,r4,10324
8113e2fc:	1129a900 	call	81129a90 <alt_log_printf_proc>
  while (1);
8113e300:	003fff06 	br	8113e300 <__reset+0xfb11e300>
