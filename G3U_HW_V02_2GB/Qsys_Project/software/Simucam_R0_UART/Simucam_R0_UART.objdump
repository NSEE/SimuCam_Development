
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x000408f8 memsz 0x00054628 flags rwx
    LOAD off    0x00042000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003b5d8  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003390  8113b834  8113b834  0003c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  8113ebc4  8113ebc4  0003fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d30  81140918  81140918  00041918  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81154648  81154648  00042000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00042000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00042000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c18  00000000  00000000  00042028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005a73a  00000000  00000000  00043c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001482a  00000000  00000000  0009e37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d2f6  00000000  00000000  000b2ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007a3c  00000000  00000000  000cfe9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a6ef  00000000  00000000  000d78d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026ce7  00000000  00000000  000e1fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00108cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  00108cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00114e11  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00114e17  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00114e23  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00114e24  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00114e25  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00114e29  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00114e2d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00114e31  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  00114e3c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  00114e46  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00114e50  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00114e61  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  00114ea0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113b834 l    d  .rodata	00000000 .rodata
8113ebc4 l    d  .rwdata	00000000 .rwdata
81140918 l    d  .bss	00000000 .bss
81154648 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81140934 l     O .bss	00000004 viCh1HoldContext
81140938 l     O .bss	00000004 viCh2HoldContext
8114093c l     O .bss	00000004 viCh3HoldContext
81140940 l     O .bss	00000004 viCh4HoldContext
81140944 l     O .bss	00000004 viCh5HoldContext
81140948 l     O .bss	00000004 viCh6HoldContext
8114094c l     O .bss	00000004 viCh7HoldContext
81140950 l     O .bss	00000004 viCh8HoldContext
811050d8 l     F .text	00000054 vFeebWriteReg
8110512c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
811056dc l     F .text	00000050 uliSpwcReadReg
81105688 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81140844 l     O .rwdata	00000001 ucIoValue
811058dc l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811061cc l     F .text	0000013c msgdma_write_extended_descriptor
81106308 l     F .text	00000164 msgdma_construct_extended_descriptor
8110646c l     F .text	00000318 msgdma_descriptor_async_transfer
81106784 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107300 l     F .text	00000054 vRstcWriteReg
81107354 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81140958 l     O .bss	00000004 viHoldContext
81108688 l     F .text	00000058 uliSyncReadReg
8110862c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8114095e l     O .bss	00000004 xRAckLocal.4450
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
81140962 l     O .bss	00000004 xSAckLocal.4446
00000000 l    df *ABS*	00000000 parser_comm_task.c
81140aa8 l     O .bss	0000004c PreParsedLocal.4533
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81140af4 l     O .bss	0000004c xPreParsedReader.4523
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113d153 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113e2a1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113ebc4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81112db4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113e46e l     O .rodata	00000010 zeroes.4389
8113e47e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113e48e l     O .rodata	00000010 zeroes.4404
811179e8 l     F .text	000000c4 __sbprintf
8113e49e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113e4b6 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81119570 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111b0c0 l     F .text	00000008 __fp_unlock
8111b0d4 l     F .text	000001a4 __sinit.part.1
8111b278 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113f410 l     O .rwdata	00000020 lc_ctype_charset
8113f3f0 l     O .rwdata	00000020 lc_message_charset
8113f430 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113e4f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111e0e8 l     F .text	0000006c sulp
8113e63c l     O .rodata	00000014 fpi.2737
8113e650 l     O .rodata	00000028 tinytens
8113e628 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113e688 l     O .rodata	00000010 blanks.4332
8113e678 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81121758 l     F .text	00000104 __sprint_r.part.0
8113e6a8 l     O .rodata	00000010 blanks.4348
8113e698 l     O .rodata	00000010 zeroes.4349
81122cf4 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
811231a8 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
811270a4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811271e8 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8112721c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
811274a0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81127590 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81127774 l     F .text	00000044 alt_get_errno
811277b8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
811279e0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81140888 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81127f80 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81140894 l     O .rwdata	00000004 lockid
811409f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81140898 l     O .rwdata	00000004 lockid
811409f8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81129a84 l     F .text	00000050 OS_InitMisc
81129ad4 l     F .text	00000074 OS_InitRdyList
81129c58 l     F .text	000000ec OS_InitTCBList
8112999c l     F .text	000000e8 OS_InitEventList
81129b48 l     F .text	00000088 OS_InitTaskIdle
81129bd0 l     F .text	00000088 OS_InitTaskStat
81129ee8 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112bd00 l     F .text	000000fc OS_FlagTaskRdy
8112bab0 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112d5ec l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
8113201c l     F .text	00000044 OSTmr_Lock
81131abc l     F .text	00000074 OSTmr_Alloc
81132060 l     F .text	0000003c OSTmr_Unlock
81131f20 l     F .text	000000fc OSTmr_Unlink
81131b30 l     F .text	000000a4 OSTmr_Free
81131dd0 l     F .text	00000150 OSTmr_Link
81131d48 l     F .text	00000088 OSTmr_InitTask
8113209c l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
811321ac l     F .text	0000003c alt_dev_reg
8113f610 l     O .rwdata	0000106c jtag_uart_0
8114067c l     O .rwdata	000000d0 rs232_uart
8114074c l     O .rwdata	00000064 dma_DDR_M1
811407b0 l     O .rwdata	00000064 dma_DDR_M2
81140814 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
811369bc l     F .text	000002ac altera_avalon_jtag_uart_irq
81136c68 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8113746c l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81137800 l     F .text	000000a4 altera_avalon_uart_irq
811378a4 l     F .text	00000140 altera_avalon_uart_rxirq
811379e4 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81137bec l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81137ea0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81138124 l     F .text	00000044 alt_get_errno
81138168 l     F .text	0000009c alt_msgdma_write_standard_descriptor
81138204 l     F .text	00000134 alt_msgdma_write_extended_descriptor
81138338 l     F .text	0000018c alt_msgdma_irq
811384c4 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81138558 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
811386b4 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
811389f4 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
811390fc l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
811391a8 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113a374 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113aa88 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
81140aa0 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81140aa4 g     O .bss	00000004 alt_instruction_exception_handler
8110e4a8 g     F .text	0000004c vFailDeleteInitialization
81140a74 g     O .bss	00000004 aux_status_register
81141068 g     O .bss	00002000 vInAckHandlerTask_stk
8113a130 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110788c g     F .text	0000004c vSyncInitIrq
8111d76c g     F .text	0000007c _mprec_log10
81107a08 g     F .text	00000040 bSyncSetMbt
81105ac0 g     F .text	00000108 I2C_Read
811408e6 g     O .rwdata	00000002 OSTaskNameSize
81143068 g     O .bss	00000118 xBuffer64
8111d860 g     F .text	0000008c __any_on
8111c234 g     F .text	0000005c _isatty_r
8113e500 g     O .rodata	00000028 __mprec_tinytens
811276b0 g     F .text	000000c4 alt_main
81112cd8 g     F .text	000000c8 _puts_r
81104964 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81140a00 g     O .bss	00000004 OSTmrFreeList
81154548 g     O .bss	00000100 alt_irq
8111c3a4 g     F .text	00000068 _lseek_r
8110fbbc g     F .text	00000030 vChangeDefaultAutoResetSync
8112c560 g     F .text	000000d4 OS_MemInit
8110d100 g     F .text	0000098c vLoadDefaultETHConf
81130ffc g     F .text	00000068 OSTimeSet
8111b478 g     F .text	000000ac __sflags
81126204 g     F .text	00000088 .hidden __eqdf2
81102a38 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110fa34 g     F .text	00000034 vLoadDefaultSyncSource
811326ac g     F .text	000001ac Check_for_Master_Boot_Record
8114f984 g     O .bss	00000010 OSTmrWheelTbl
81138ebc g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81128664 g     F .text	00000618 OSEventPendMulti
81154648 g       *ABS*	00000000 __alt_heap_start
8113b0c0 g     F .text	0000002c OSTaskCreateHook
81136524 g     F .text	000001c4 alt_up_sd_card_fclose
81140968 g     O .bss	00000004 xSemCountBuffer64
81112c94 g     F .text	00000044 printf
81140955 g     O .bss	00000001 SspdConfigControl
81107e24 g     F .text	00000054 bSyncCtrReset
811408be g     O .rwdata	00000002 OSMboxEn
8110b930 g     F .text	00000398 bSendUART128
81110230 g     F .text	000000a4 aatoh
81128ce0 g     F .text	00000054 OSIntEnter
81123f74 g     F .text	000000a4 _wcrtomb_r
81104870 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110e410 g     F .text	0000004c vFailReceiverCreate
811044d4 g     F .text	00000040 vFeebCh2HandleIrq
81113240 g     F .text	00000064 __sseek
8111b428 g     F .text	00000010 __sinit
81106c40 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
81123e14 g     F .text	00000148 __swbuf_r
8110b3bc g     F .text	000002cc bResourcesInitRTOS
8110534c g     F .text	000000f4 bSpwcGetLinkError
811408ce g     O .rwdata	00000002 OSQEn
8111c2c0 g     F .text	00000084 _setlocale_r
81140848 g     O .rwdata	00000004 LedsPainelControl
81140b68 g     O .bss	00000100 cDebugBuffer
8111b280 g     F .text	00000070 __sfmoreglue
81121740 g     F .text	00000018 ungetc
81128320 g     F .text	000000d4 __malloc_unlock
81102d28 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113b140 g     F .text	00000028 OSTaskStatHook
8110faa4 g     F .text	00000030 vChangeDefaultSyncSource
81140a04 g     O .bss	00000001 OSLockNesting
81140a08 g     O .bss	00000004 OSTmrSemSignal
8110f01c g     F .text	000000d8 vNFeeStructureInit
8114096c g     O .bss	00000004 xSemCommInit
811028bc g     F .text	00000080 uliXorshift32
8111e154 g     F .text	00001600 _strtod_r
81140970 g     O .bss	00000004 xSemCountSenderACK
8111036c g     F .text	00000448 .hidden __divsf3
81140a98 g     O .bss	00000004 current_sector_modified
8114090c g     O .rwdata	00000002 OSDataSize
81140a0c g     O .bss	00000001 OSRunning
81105510 g     F .text	00000178 bSpwcInitCh
81143180 g     O .bss	00002000 senderTask_stk
81140974 g     O .bss	00000004 fp
8111c734 g     F .text	0000015c memmove
81145180 g     O .bss	0000045c xSimMebStruct
8113b1bc g     F .text	0000002c OSInitHookBegin
811082c0 g     F .text	00000074 bSyncCtrCh8OutEnable
81140904 g     O .rwdata	00000002 OSTmrSize
8111b410 g     F .text	00000018 _cleanup
8110fe68 g     F .text	00000040 siCloseFile
8111c890 g     F .text	000000b0 _Balloc
8110fb48 g     F .text	00000038 vLoadDefaultAutoResetSync
81135100 g     F .text	000000cc alt_up_sd_card_is_Present
81138dfc g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81140920 g     O .bss	00000004 pxDmaM1Dev
81102ad0 g     F .text	000000a4 DMA_DISPATCHER_STOP
811323d4 g     F .text	00000054 Save_Modified_Sector
81104ac4 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81140a10 g     O .bss	00000004 OSIdleCtr
8110572c g     F .text	0000003c bEnableIsoDrivers
8112628c g     F .text	000000dc .hidden __gtdf2
8113ae50 g     F .text	0000002c altera_nios2_gen2_irq_init
8113af38 g       .text	00000000 OSStartTsk
81107b7c g     F .text	00000070 bSyncSetNCycles
8112a258 g     F .text	000002dc OS_TCBInit
8110f61c g     F .text	00000068 vInitSimucamBasicHW
811455dc g     O .bss	00002000 vTimeoutCheckerTask_stk
811081d8 g     F .text	00000074 bSyncCtrCh6OutEnable
81105e3c g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
81140a90 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81140a14 g     O .bss	00000002 OSTmrUsed
81140978 g     O .bss	00000004 xSemCountBuffer128
81103200 g     F .text	000000f8 TEMP_Read
81104554 g     F .text	00000040 vFeebCh4HandleIrq
8114090a g     O .rwdata	00000002 OSTmrWheelTblSize
8110f4ec g     F .text	0000002c cFeeSpwChannelDisable
811408aa g     O .rwdata	00000002 OSEventSize
81140a16 g     O .bss	00000001 OSPrioHighRdy
81111e30 g     F .text	00000064 _fstat_r
8113b0ec g     F .text	0000002c OSTaskDelHook
811409b8 g     O .bss	00000004 errno
811085b4 g     F .text	0000003c uliSyncGetCtr
811192e0 g     F .text	0000001c __svfscanf
811131b4 g     F .text	00000008 __seofread
8113af18 g       .text	00000000 OSStartHighRdy
8112fa2c g     F .text	000001ec OSTaskCreateExt
8110e694 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
81120284 g     F .text	00001244 ___svfiprintf_internal_r
8112b5e0 g     F .text	00000068 OSFlagPendGetFlagsRdy
811408ea g     O .rwdata	00000002 OSTaskStatStkSize
8112a72c g     F .text	00000310 OSFlagAccept
8112dd08 g     F .text	000000c0 OSQFlush
8112d784 g     F .text	00000148 OSQAccept
811409e0 g     O .bss	00000004 alt_argv
8110c3f8 g     F .text	00000398 bSendStatusFirstTime
81148840 g       *ABS*	00000000 _gp
8110e0d8 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
81127e44 g     F .text	0000013c usleep
811356d8 g     F .text	00000384 alt_up_sd_card_fopen
8110fcd4 g     F .text	00000030 bSDcardIsPresent
8110a938 g     F .text	00000174 vSenderComTask
81135240 g     F .text	000000d8 alt_up_sd_card_find_first
8112f878 g     F .text	000001b4 OSTaskCreate
8110e834 g     F .text	00000068 vFailSendNack
81140a84 g     O .bss	00000004 command_argument_register
8112f380 g     F .text	000004f8 OSTaskChangePrio
8110ef44 g     F .text	00000088 vCouldNotSendTMPusCommand
811409fc g     O .bss	00000004 alt_heapsem
811060d4 g     F .text	00000080 bSetBoardLeds
8112a534 g     F .text	000001f8 OSDebugInit
8112fc18 g     F .text	0000034c OSTaskDel
8112c634 g     F .text	000001ac OSMutexAccept
8110fad4 g     F .text	00000040 vSetTimeCode
811399a4 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8114097c g     O .bss	00000004 xSemCountPreParsed
8113f490 g     O .rwdata	00000180 alt_fd_list
81104a14 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
8114f994 g     O .bss	00000370 OSFlagTbl
8110e240 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110f98c g     F .text	0000003c vLoadDefaultRTValue
81129764 g     F .text	000000c0 OS_EventTaskRemove
81134954 g     F .text	00000134 find_first_empty_record_in_root_directory
8113a534 g     F .text	00000098 alt_find_dev
8111297c g     F .text	00000150 memcpy
81123ae0 g     F .text	00000264 __hexnan
811475dc g     O .bss	00000130 xBuffer32
811408d4 g     O .rwdata	00000002 OSRdyTblSize
8114fd04 g     O .bss	000001a0 OSTmrTbl
8111b0c8 g     F .text	0000000c _cleanup_r
81126de0 g     F .text	000000e4 .hidden __floatsidf
8110cd28 g     F .text	000001a8 vSendPusTM64
81107978 g     F .text	0000004c ucSyncStatusErrorCode
8110f5e8 g     F .text	00000034 cFeeRMAPLogDisable
8110924c g     F .text	00000a80 vParserCommTask
8113ab54 g     F .text	00000084 alt_io_redirect
8110f57c g     F .text	00000034 cFeeRMAPEchoingDisable
81126368 g     F .text	000000f4 .hidden __ltdf2
81104cf4 g     F .text	000000d4 bFeebSetIrqControl
8110eda4 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
81140980 g     O .bss	00000004 xMutexReceivedACK
81103b7c g     F .text	000000b0 bSdmaInitM2Dma
8113b834 g       *ABS*	00000000 __DTOR_END__
81139e2c g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113a174 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107ecc g     F .text	00000054 bSyncCtrErrInj
8113a0d4 g     F .text	0000005c alt_msgdma_register_callback
8110da8c g     F .text	00000330 vShowEthConfig
8110f684 g     F .text	00000030 bLogWriteSDCard
8110e55c g     F .text	00000068 vFailSetCountSemaphorexBuffer64
81109de4 g     F .text	000000a0 bTrySendSemaphoreCommInit
8110c060 g     F .text	00000398 bSendUART32
81112da0 g     F .text	00000014 puts
8113b264 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
8110784c g     F .text	00000040 vSyncHandleIrq
811283f4 g     F .text	00000128 OSEventNameGet
811046d8 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
811408b8 g     O .rwdata	00000002 OSFlagMax
8111c4c0 g     F .text	000000e0 mbrtowc
8113454c g     F .text	000001b4 find_first_empty_cluster
81108164 g     F .text	00000074 bSyncCtrCh5OutEnable
8114095c g     O .bss	00000001 vucN
8111dec0 g     F .text	00000074 __fpclassifyd
811078d8 g     F .text	00000054 bSyncStatusExtnIrq
811192fc g     F .text	00000054 _vfscanf_r
8112ccb4 g     F .text	000005a4 OSMutexPend
8111d6c0 g     F .text	000000ac __ratio
8113503c g     F .text	000000c4 alt_up_sd_card_open_dev
81128d34 g     F .text	00000100 OSIntExit
81107a48 g     F .text	00000040 bSyncSetBt
81122cd8 g     F .text	0000001c __vfiprintf_internal
811408f2 g     O .rwdata	00000002 OSTCBSize
81104694 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81140a17 g     O .bss	00000001 OSPrioCur
81136edc g     F .text	000002c4 altera_avalon_jtag_uart_read
8113966c g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81112c5c g     F .text	00000038 _printf_r
81124da8 g     F .text	00000064 .hidden __udivsi3
811274e4 g     F .text	000000ac isatty
81140954 g     O .bss	00000001 LedsBoardControl
81140984 g     O .bss	00000004 xSemCountReceivedACK
811408d8 g     O .rwdata	00000002 OSStkWidth
8111c290 g     F .text	00000030 iswspace
8113e550 g     O .rodata	000000c8 __mprec_tens
811408cc g     O .rwdata	00000002 OSPtrSize
8111c344 g     F .text	0000000c __locale_charset
8110807c g     F .text	00000074 bSyncCtrCh3OutEnable
81124f98 g     F .text	000000c8 .hidden __lesf2
811408ac g     O .rwdata	00000002 OSEventTblSize
81124174 g     F .text	0000007c .hidden __fixunsdfsi
8113ae7c g       .text	00000000 OSCtxSw
81105bc8 g     F .text	00000160 I2C_MultipleRead
811409c4 g     O .bss	00000004 __malloc_top_pad
81140a18 g     O .bss	00000004 OSTCBList
81131a7c g     F .text	00000040 OSTmrSignal
811409d4 g     O .bss	00000004 alt_fd_list_lock
8111fdb0 g     F .text	0000001c strtoul
81140860 g     O .rwdata	00000004 __mb_cur_max
8111c374 g     F .text	0000000c _localeconv_r
8111fdcc g     F .text	000002e0 _strtoull_r
81107290 g     F .text	00000070 vRstcHoldDeviceReset
8111ccb4 g     F .text	00000044 __i2b
8111bbd8 g     F .text	000004c4 __sfvwrite_r
8113382c g     F .text	000000c0 get_dir_divider_location
8114fea4 g     O .bss	00000c30 OSMemTbl
81140a1c g     O .bss	00000001 OSTickStepState
8114770c g     O .bss	00002000 vReceiverUartTask_stk
81112fac g     F .text	0000005c _sbrk_r
81140988 g     O .bss	00000004 xSemTimeoutChecker
811334ec g     F .text	000000cc filename_to_upper_case
811408d0 g     O .rwdata	00000002 OSQMax
81135a5c g     F .text	00000090 alt_up_sd_card_set_attributes
8112c9b0 g     F .text	00000304 OSMutexDel
81150ad4 g     O .bss	00000800 OSTaskStatStk
8110fd04 g     F .text	00000030 bSDcardFAT16Check
8112c17c g     F .text	000000f8 OSMemNameGet
8110df2c g     F .text	00000060 vFailCreateMutexSResources
81132858 g     F .text	00000284 Read_File_Record_At_Offset
811408b0 g     O .rwdata	00000002 OSFlagEn
8111d8ec g     F .text	00000068 _read_r
811408f6 g     O .rwdata	00000002 OSTimeTickHookEn
8112e1d0 g     F .text	00000170 OSQPost
8112bdfc g     F .text	000000ac OS_FlagUnlink
81102420 g     F .text	0000049c bDdr2MemoryRandomReadTest
8114087c g     O .rwdata	00000004 alt_max_fd
8110eb50 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
81129da0 g     F .text	00000070 OS_MemCopy
81129e10 g     F .text	000000d8 OS_Sched
811340d0 g     F .text	0000047c find_file_in_directory
81122e84 g     F .text	000000f8 _fclose_r
8112c084 g     F .text	000000f8 OSMemGet
8113025c g     F .text	000001bc OSTaskNameSet
8111b090 g     F .text	00000030 fflush
811409c0 g     O .bss	00000004 __malloc_max_sbrked_mem
81140a20 g     O .bss	00000004 OSCtxSwCtr
8113b168 g     F .text	00000054 OSTimeTickHook
8114970c g     O .bss	00002000 vOutAckHandlerTask_stk
81127318 g     F .text	00000188 alt_irq_register
811408ba g     O .rwdata	00000002 OSFlagNameSize
811114fc g     F .text	00000118 .hidden __extendsfdf2
81129824 g     F .text	00000108 OS_EventTaskRemoveMulti
811351cc g     F .text	00000074 alt_up_sd_card_is_FAT16
81105958 g     F .text	00000088 I2C_TestAdress
81125060 g     F .text	000008b4 .hidden __adddf3
81124e64 g     F .text	00000078 .hidden __nesf2
8112960c g     F .text	00000158 OS_EventTaskWaitMulti
8111d458 g     F .text	00000114 __b2d
811393a4 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
811408d2 g     O .rwdata	00000002 OSQSize
81124770 g     F .text	00000540 .hidden __umoddi3
811275d4 g     F .text	000000dc lseek
8112ecc0 g     F .text	00000214 OSSemPend
81105440 g     F .text	000000d0 bSpwcGetLinkStatus
81104fa4 g     F .text	00000088 bFeebGetWindowing
81140850 g     O .rwdata	00000004 _global_impure_ptr
81107800 g     F .text	0000004c bSSDisplayUpdate
81133b90 g     F .text	00000540 get_home_directory_cluster_for_file
8111d954 g     F .text	0000056c _realloc_r
811408bc g     O .rwdata	00000002 OSLowestPrio
81154648 g       *ABS*	00000000 __bss_end
8113a990 g     F .text	000000f8 alt_iic_isr_register
8113b238 g     F .text	0000002c OSTCBInitHook
81140902 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81127d34 g     F .text	00000110 alt_tick
8110e1d8 g     F .text	00000068 vFailGetMutexSenderTask
811071b0 g     F .text	0000006c vRstcSimucamReset
8113e6b8 g     O .rodata	00000100 __hexdig
81139f20 g     F .text	000001b4 alt_msgdma_init
811241f0 g     F .text	00000580 .hidden __udivdi3
8110a5e8 g     F .text	000001a8 setPreAckSenderFreePos
811230fc g     F .text	00000024 _fputwc_r
811408a4 g     O .rwdata	00000002 OSEventEn
8113e528 g     O .rodata	00000028 __mprec_bigtens
8111ca90 g     F .text	0000010c __s2b
811408fe g     O .rwdata	00000002 OSTmrCfgNameSize
81107b08 g     F .text	00000074 bSyncSetPolarity
81126ec4 g     F .text	000000b0 .hidden __floatunsidf
8110e62c g     F .text	00000068 vFailFoundBufferRetransmission
8111d190 g     F .text	00000060 __mcmp
81140a9c g     O .bss	00000004 current_sector_index
81137698 g     F .text	00000168 altera_avalon_uart_init
8113a1fc g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110405c g     F .text	00000438 bSdmaDmaM2Transfer
8110fb14 g     F .text	00000034 vResetTimeCode
8110f4c0 g     F .text	0000002c cFeeSpwChannelEnable
8111b448 g     F .text	00000018 __fp_lock_all
8113a93c g     F .text	00000054 alt_ic_irq_enabled
811059e0 g     F .text	000000e0 I2C_Write
81140a24 g     O .bss	00000002 OSTmrFree
8112bc18 g     F .text	000000e8 OS_FlagInit
81127c90 g     F .text	000000a4 alt_alarm_stop
811135d0 g     F .text	0000001c strtol
81131228 g     F .text	00000140 OSTmrDel
811325c4 g     F .text	000000e8 mark_cluster
811408e0 g     O .rwdata	00000002 OSTaskIdleStkSize
811409d8 g     O .bss	00000004 alt_irq_active
8112e8e0 g     F .text	000000b8 OSSemAccept
811119c8 g     F .text	0000044c _fseeko_r
8112c390 g     F .text	000000e0 OSMemPut
8112bea8 g     F .text	000001dc OSMemCreate
81140a28 g     O .bss	00000004 OSIdleCtrMax
8110ced0 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
8113f468 g     O .rwdata	00000028 alt_dev_null
81138fb4 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107ac8 g     F .text	00000040 bSyncSetOst
811408f4 g     O .rwdata	00000002 OSTicksPerSec
81134a88 g     F .text	00000194 convert_filename_to_name_extension
8110aaac g     F .text	00000030 vSimMebTask
81105d28 g     F .text	00000094 i2c_start
8113ae7c g       .text	00000000 OSIntCtxSw
811080f0 g     F .text	00000074 bSyncCtrCh4OutEnable
81139d98 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
811271c0 g     F .text	00000028 alt_dcache_flush_all
8111cb9c g     F .text	00000068 __hi0bits
8110f9c8 g     F .text	0000003c vChangeRTValue
81140a70 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110efcc g     F .text	00000050 vNFeeNotInUse
81126d60 g     F .text	00000080 .hidden __fixdfsi
8114b70c g     O .bss	00002000 vInitialTask_stk
8114098c g     O .bss	00000002 usiIdCMD
81107dd0 g     F .text	00000054 bSyncCtrStart
81134700 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
8110a074 g     F .text	00000410 bPreParser
8111f754 g     F .text	00000018 strtod
81140a2c g     O .bss	00000004 OSTCBFreeList
8112eed4 g     F .text	00000174 OSSemPendAbort
8110e378 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110eab8 g     F .text	0000004c vFailCreateTimerRetransmisison
8110f74c g     F .text	0000019c vSimucamStructureInit
81140874 g     O .rwdata	00000008 alt_dev_list
81127fc4 g     F .text	00000100 write
8113b3d8 g     F .text	000000a8 _putc_r
81140a94 g     O .bss	00000004 device_pointer
811408f8 g     O .rwdata	00000002 OSVersionNbr
81124edc g     F .text	000000bc .hidden __gtsf2
81109ccc g     F .text	00000118 getPreParsedPacket
81127260 g     F .text	000000b8 fstat
8110fc20 g     F .text	00000040 vChangeIdNFEEMaster
8111197c g     F .text	0000002c fprintf
8110f5b0 g     F .text	00000038 cFeeRMAPLogEnable
81102c18 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104a6c g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110ec04 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110ff10 g     F .text	00000058 _reg_write
8110fc60 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81126368 g     F .text	000000f4 .hidden __ledf2
8110eedc g     F .text	00000068 vCouldNotSendLog
811314a8 g     F .text	000001b8 OSTmrRemainGet
811408a0 g     O .rwdata	00000004 OSEndiannessTest
811073a4 g     F .text	00000058 v_spi_start
8111cef8 g     F .text	00000148 __pow5mult
81121874 g     F .text	00001464 ___vfiprintf_internal_r
811409d0 g     O .bss	00000004 __nlocale_changed
81124e0c g     F .text	00000058 .hidden __umodsi3
81107f20 g     F .text	00000074 bSyncCtrSyncOutEnable
8110fd34 g     F .text	000000f8 bInitializeSDCard
8110e9d4 g     F .text	0000004c vFailParserCommTaskCreate
8111304c g     F .text	00000038 _scanf_r
8110ea6c g     F .text	0000004c vFailOutAckHandlerTaskCreate
811408b2 g     O .rwdata	00000002 OSFlagGrpSize
81139404 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81131660 g     F .text	000000ec OSTmrStateGet
81154648 g       *ABS*	00000000 end
811045d4 g     F .text	00000040 vFeebCh6HandleIrq
8110e764 g     F .text	00000068 vNoContentInPreParsedBuffer
81111e14 g     F .text	0000001c fseeko
8111182c g     F .text	0000000c _atoi_r
81137ee4 g     F .text	00000240 altera_avalon_uart_write
811119ac g     F .text	0000001c fseek
8110b8a0 g     F .text	00000090 vCCDChangeValues
8113686c g     F .text	00000150 altera_avalon_jtag_uart_init
8112a0a0 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110dfd8 g     F .text	0000004c vFailTestCriticasParts
8113b834 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101fb0 g     F .text	00000470 bDdr2MemoryRandomWriteTest
811374ec g     F .text	00000084 alt_avalon_timer_sc_init
81104efc g     F .text	000000a8 bFeebSetWindowing
811375d8 g     F .text	00000068 altera_avalon_uart_write_fd
811117bc g     F .text	00000064 .hidden __clzsi2
81137640 g     F .text	00000058 altera_avalon_uart_close_fd
811371a0 g     F .text	000002cc altera_avalon_jtag_uart_write
81131bd4 g     F .text	00000174 OSTmr_Init
8114d70c g     O .bss	0000010c xBuffer128
8111b438 g     F .text	00000004 __sfp_lock_acquire
811032f8 g     F .text	00000048 sense_log_temp
8111c650 g     F .text	000000e4 memchr
81129d44 g     F .text	0000005c OS_MemClr
811157cc g     F .text	00002200 ___vfprintf_internal_r
8113af5c g     F .text	00000164 OSTaskStkInit
81113084 g     F .text	00000060 _sprintf_r
8111b8c0 g     F .text	00000318 _free_r
8113abd8 g     F .text	00000234 alt_printf
8110ccd8 g     F .text	00000050 vTimeoutCheck
8110ffc0 g     F .text	000001fc _print_codec_status
8111c350 g     F .text	00000010 __locale_mb_cur_max
81129354 g     F .text	000001a0 OS_EventTaskRdy
81102b74 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113b670 g     F .text	00000188 __call_exitprocs
81140a30 g     O .bss	00000001 OSCPUUsage
811409cc g     O .bss	00000004 __mlocale_changed
81107e78 g     F .text	00000054 bSyncCtrOneShot
81140858 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
811085f0 g     F .text	0000003c uliSyncReadStatus
811409e8 g     O .bss	00000004 _alt_tick_rate
8112ddc8 g     F .text	00000294 OSQPend
8111f874 g     F .text	000002e8 _strtoll_r
81130b4c g     F .text	0000010c OSTimeDly
8111d040 g     F .text	00000150 __lshift
81108f8c g     F .text	000002c0 vOutAckHandlerTask
81138e5c g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
811409ec g     O .bss	00000004 _alt_nticks
81127a24 g     F .text	00000104 read
81132228 g     F .text	000000f0 alt_sys_init
81110bb8 g     F .text	0000012c .hidden __floatsisf
811200ac g     F .text	000001d8 __ssprint_r
81112bf4 g     F .text	00000068 _open_r
8110fee8 g     F .text	00000028 bTestSimucamCriticalHW
8110502c g     F .text	000000ac bFeebGetBuffersStatus
8110ddbc g     F .text	000000a4 ucCrc8
811007ac g     F .text	00000cb4 bDdr2EepromDump
8113b550 g     F .text	00000120 __register_exitproc
81140a31 g     O .bss	00000001 OSTaskCtr
8110cc88 g     F .text	00000050 siPosStr
81123d44 g     F .text	000000d0 strncmp
81130c58 g     F .text	00000164 OSTimeDlyHMSM
8111ccf8 g     F .text	00000200 __multiply
81136d74 g     F .text	00000070 altera_avalon_jtag_uart_close
81107574 g     F .text	00000058 v_spi_end
8110fea8 g     F .text	00000040 cGetNextChar
81140b40 g     O .bss	00000028 __malloc_current_mallinfo
811408a6 g     O .rwdata	00000002 OSEventMax
81124e64 g     F .text	00000078 .hidden __eqsf2
8111d56c g     F .text	00000154 __d2b
8112f048 g     F .text	00000118 OSSemPost
81104760 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110fa04 g     F .text	00000030 vChangeDefaultRTValue
81104654 g     F .text	00000040 vFeebCh8HandleIrq
81140a6c g     O .bss	00000004 initialized
8110cb38 g     F .text	00000100 vSendLog
81128ec8 g     F .text	000000e4 OSSchedUnlock
811075cc g     F .text	00000164 RTCC_SPI_R_MAC
811366e8 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111fb5c g     F .text	00000254 _strtoul_r
8113a6dc g     F .text	000000e4 alt_get_fd
81140a34 g     O .bss	00000004 OSMemFreeList
81129024 g     F .text	000000b8 OSStatInit
8110293c g     F .text	00000064 DMA_OPEN_DEVICE
81153fe0 g     O .bss	00000014 search_data
8110517c g     F .text	00000100 bSpwcSetLink
81126f74 g     F .text	00000130 alt_busy_sleep
8112b9e4 g     F .text	000000cc OSFlagQuery
81107f94 g     F .text	00000074 bSyncCtrCh1OutEnable
811408dc g     O .rwdata	00000002 OSTaskCreateExtEn
811101bc g     F .text	00000074 _split_codec_status
81119514 g     F .text	0000005c _close_r
8110e7cc g     F .text	00000068 vCouldNotSendEthConfUART
81108c6c g     F .text	00000320 vInitialTask
81139344 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113b35c g     F .text	0000007c memcmp
8112932c g     F .text	00000028 OS_Dummy
811367b8 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81154648 g       *ABS*	00000000 __alt_stack_base
81136810 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
811047a4 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
81111e94 g     F .text	000000d4 _fwrite_r
81139464 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811048b4 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
811193b8 g     F .text	0000015c __swsetup_r
811512d4 g     O .bss	000001e0 OSQTbl
8110aadc g     F .text	000008e0 vTimeoutCheckerTask
8114f968 g     O .bss	0000001c xConfEth
81125914 g     F .text	000008f0 .hidden __divdf3
8110fa68 g     F .text	0000003c vChangeSyncSource
8111b2f0 g     F .text	00000120 __sfp
81153ff4 g     O .bss	00000054 boot_sector_data
81102a84 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111d7e8 g     F .text	00000078 __copybits
8113efe8 g     O .rwdata	00000408 __malloc_av_
8111b444 g     F .text	00000004 __sinit_lock_release
81140918 g     O .bss	00000004 uliInitialState
81105dbc g     F .text	00000080 i2c_stop
811102d4 g     F .text	00000064 Verif_Error
81110338 g     F .text	00000034 toInt
8110e124 g     F .text	0000004c vFailSendPreAckSenderSemaphore
81140a38 g     O .bss	00000004 OSTCBHighRdy
81110ddc g     F .text	00000720 .hidden __muldf3
81113158 g     F .text	0000005c __sread
8111b758 g     F .text	0000003c fread
81140a3c g     O .bss	00000004 OSQFreeList
8113a5cc g     F .text	00000110 alt_find_file
8113a3b8 g     F .text	000000ac alt_dev_llist_insert
811281f8 g     F .text	00000128 __malloc_lock
8111194c g     F .text	00000030 _fprintf_r
81127b94 g     F .text	000000fc sbrk
8110f43c g     F .text	0000002c vFeeSpwRMAPLoadDefault
811135ec g     F .text	000021e0 ___svfprintf_internal_r
8110d078 g     F .text	00000088 vTMPusTestConnection
8112851c g     F .text	00000148 OSEventNameSet
8111b02c g     F .text	00000064 _fflush_r
81122db8 g     F .text	000000cc _calloc_r
81140a40 g     O .bss	00000001 OSRdyGrp
811079c4 g     F .text	00000044 ucSyncStatusCycleNumber
8113174c g     F .text	00000148 OSTmrStart
81104594 g     F .text	00000040 vFeebCh5HandleIrq
81111934 g     F .text	00000018 fopen
811029a0 g     F .text	0000004c DMA_CONFIG
81140918 g       *ABS*	00000000 __bss_start
81112acc g     F .text	00000128 memset
8110a484 g     F .text	00000164 setPreParsedFreePos
81139ec0 g     F .text	00000060 alt_msgdma_open
81108710 g     F .text	0000055c vInAckHandlerTask
8110b6b8 g     F .text	00000180 main
8110e2a8 g     F .text	00000068 vFailGetMutexReceiverTask
8110f920 g     F .text	0000003c vChangeEPValue
811409e4 g     O .bss	00000004 alt_envp
811409bc g     O .bss	00000004 __malloc_max_total_mem
81139764 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110de60 g     F .text	0000005c ucCrc8wInit
8110eb04 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81136750 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102f38 g     F .text	000002c8 POWER_Read
81105f74 g     F .text	00000160 i2c_read
81123f5c g     F .text	00000018 __swbuf
8113e7e8 g     O .rodata	00000100 OSUnMapTbl
81124f98 g     F .text	000000c8 .hidden __ltsf2
81135aec g     F .text	00000090 alt_up_sd_card_get_attributes
8111b524 g     F .text	00000234 _fread_r
8110e170 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
81105768 g     F .text	0000003c bDisableIsoDrivers
811408d6 g     O .rwdata	00000002 OSSemEn
81132318 g     F .text	000000bc Write_Sector_Data
81135efc g     F .text	00000628 alt_up_sd_card_write
8112b648 g     F .text	0000039c OSFlagPost
811132a4 g     F .text	00000008 __sclose
8110ee0c g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
81122f7c g     F .text	00000014 fclose
811294f4 g     F .text	00000118 OS_EventTaskWait
8110ecd4 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81113390 g     F .text	00000240 _strtol_r
81111614 g     F .text	000001a8 .hidden __truncdfsf2
8112a184 g     F .text	000000d4 OS_TaskStatStkChk
8112ff64 g     F .text	00000158 OSTaskDelReq
81119778 g     F .text	00001690 _dtoa_r
81139a80 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81112168 g     F .text	00000814 _malloc_r
811240e0 g     F .text	00000030 __ascii_wctomb
8112c7e0 g     F .text	000001d0 OSMutexCreate
8110ec6c g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81140880 g     O .rwdata	00000004 alt_errno
811395ac g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81128fac g     F .text	00000078 OSStart
8110527c g     F .text	000000d0 bSpwcGetLink
81106cc8 g     F .text	000004e8 POWER_SPI_RW
811214c8 g     F .text	000000dc __submore
81128190 g     F .text	00000068 __env_unlock
8111c09c g     F .text	000000cc _fwalk
81130418 g     F .text	000001dc OSTaskResume
8112c470 g     F .text	000000f0 OSMemQuery
811408e8 g     O .rwdata	00000002 OSTaskStatEn
81154648 g       *ABS*	00000000 __alt_stack_limit
81140930 g     O .bss	00000004 ECommSpwCh
8110fb80 g     F .text	0000003c vChangeAutoResetSync
8111c5ec g     F .text	00000064 _mbtowc_r
811408c2 g     O .rwdata	00000002 OSMemMax
8112e340 g     F .text	00000178 OSQPostFront
8113b480 g     F .text	000000d0 putc
81124cb0 g     F .text	00000084 .hidden __divsi3
81140a41 g     O .bss	00000006 OSRdyTbl
8114089c g     O .rwdata	00000002 OSDebugEn
8111b794 g     F .text	0000012c _malloc_trim_r
8113b834 g       *ABS*	00000000 __CTOR_END__
811409b0 g     O .bss	00000008 xSdHandle
811107b4 g     F .text	00000404 .hidden __mulsf3
811408b4 g     O .rwdata	00000002 OSFlagNodeSize
8114091c g     O .bss	00000004 pnt_memory
8110fc94 g     F .text	00000040 vSyncReset
81107a88 g     F .text	00000040 bSyncSetPer
81100298 g     F .text	00000514 bDdr2EepromTest
81140a78 g     O .bss	00000004 status_register
811408fc g     O .rwdata	00000002 OSTmrCfgMax
8110841c g     F .text	00000074 bSyncIrqFlagClrError
8110e89c g     F .text	00000068 vFailSetPreAckSenderBuffer
8111e00c g     F .text	000000dc strcmp
81140a80 g     O .bss	00000004 command_register
8112d8cc g     F .text	000001b4 OSQCreate
811300bc g     F .text	000001a0 OSTaskNameGet
8114d818 g     O .bss	00000010 xReceivedACK
8112e4b8 g     F .text	00000214 OSQPostOpt
811290dc g     F .text	00000228 OSTimeTick
811408e4 g     O .rwdata	00000002 OSTaskMax
8113b834 g       *ABS*	00000000 __DTOR_LIST__
8112e998 g     F .text	000000e0 OSSemCreate
81140908 g     O .rwdata	00000002 OSTmrWheelSize
8110ff68 g     F .text	00000058 _reg_read
8112d478 g     F .text	00000174 OSMutexQuery
81126204 g     F .text	00000088 .hidden __nedf2
811408de g     O .rwdata	00000002 OSTaskDelEn
8110f8e8 g     F .text	00000038 vLoadDefaultEPValue
8110824c g     F .text	00000074 bSyncCtrCh7OutEnable
8112f160 g     F .text	00000118 OSSemQuery
8112da80 g     F .text	00000288 OSQDel
8112e05c g     F .text	00000174 OSQPendAbort
81140990 g     O .bss	00000004 xMutexPreParsed
811321e8 g     F .text	00000040 alt_irq_init
8110bcc8 g     F .text	00000398 bSendUART64
81127b28 g     F .text	0000006c alt_release_fd
81132508 g     F .text	000000bc get_cluster_flag
81108490 g     F .text	00000074 bSyncIrqFlagClrBlank
8113a1b8 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
811130e4 g     F .text	00000074 sprintf
8113e0a0 g     O .rodata	00000100 .hidden __clz_tab
81132adc g     F .text	00000294 Write_File_Record_At_Offset
81101520 g     F .text	00000580 bDdr2MemoryWriteTest
8110e310 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
811409c8 g     O .bss	00000004 _PathLocale
8110855c g     F .text	00000058 bSyncIrqFlagBlank
81106b80 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81131894 g     F .text	000001e8 OSTmrStop
8110cc38 g     F .text	00000050 usiGetIdCMD
8111f76c g     F .text	00000108 strtof
8113b308 g     F .text	00000014 atexit
81104514 g     F .text	00000040 vFeebCh3HandleIrq
81124edc g     F .text	000000bc .hidden __gesf2
811132ac g     F .text	0000004c strcspn
81119350 g     F .text	00000068 _write_r
8110721c g     F .text	00000074 vRstcReleaseDeviceReset
8110ea20 g     F .text	0000004c vFailInAckHandlerTaskCreate
81128e34 g     F .text	00000094 OSSchedLock
8111c380 g     F .text	00000018 setlocale
8113950c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
811514b4 g     O .bss	00000800 OSTmrTaskStk
81113008 g     F .text	00000044 scanf
8112aa3c g     F .text	00000110 OSFlagCreate
81132d70 g     F .text	00000688 Check_for_DOS_FAT
81134c1c g     F .text	000002d0 create_file
8111e004 g     F .text	00000008 nanf
81140854 g     O .rwdata	00000004 _impure_ptr
81140a7c g     O .bss	00000004 CSD_register_w0
811409dc g     O .bss	00000004 alt_argc
8111ae08 g     F .text	00000224 __sflush_r
8111c40c g     F .text	000000b4 _mbrtowc_r
8113a4cc g     F .text	00000068 _do_dtors
8111c36c g     F .text	00000008 __locale_cjk_lang
81103340 g     F .text	0000078c sense_log
81140928 g     O .bss	00000004 ESdmaBufferSide
811408ae g     O .rwdata	00000002 OSEventMultiEn
811119a8 g     F .text	00000004 _fseek_r
8114d828 g     O .bss	00002000 vParserCommTask_stk
8110debc g     F .text	00000070 printErrorTask
8110f95c g     F .text	00000030 vChangeDefaultEPValue
81131064 g     F .text	000001c4 OSTmrCreate
81112dd0 g     F .text	000001dc __srefill_r
811057a4 g     F .text	0000003c bEnableLvdsBoard
81140994 g     O .bss	00000004 xMutexBuffer32
8112ab4c g     F .text	00000250 OSFlagDel
81140a48 g     O .bss	00000004 OSEventFreeList
8110581c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111c5a0 g     F .text	0000004c __ascii_mbtowc
81107d58 g     F .text	00000078 bSyncCtrExtnIrq
8111d3f4 g     F .text	00000064 __ulp
8112b020 g     F .text	000005c0 OSFlagPend
811408fa g     O .rwdata	00000002 OSTmrEn
8111b460 g     F .text	00000018 __fp_unlock_all
8110a790 g     F .text	000001a8 setPreAckReceiverFreePos
81107d18 g     F .text	00000040 bSyncErrInj
8114086c g     O .rwdata	00000008 alt_fs_list
811335b8 g     F .text	00000274 check_file_name_for_FAT16_compliance
81131368 g     F .text	00000140 OSTmrNameGet
81140c68 g     O .bss	00000400 xSZData
81129f64 g     F .text	0000007c OS_StrCopy
81140a88 g     O .bss	00000004 buffer_memory
8110e6fc g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8110f6b4 g     F .text	00000098 vLogWriteNUC
811408c4 g     O .rwdata	00000002 OSMemNameSize
81103acc g     F .text	000000b0 bSdmaInitM1Dma
811083a8 g     F .text	00000074 bSyncIrqEnableBlank
8113b1e8 g     F .text	00000028 OSInitHookEnd
8110f0f4 g     F .text	00000348 vUpdateMemMapFEE
8110e96c g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b1c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
811408f0 g     O .rwdata	00000002 OSTCBPrioTblMax
8111c398 g     F .text	0000000c localeconv
81140998 g     O .bss	00000004 xTimerRetransmission
81109e84 g     F .text	000001f0 vReceiverUartTask
811408ec g     O .rwdata	00000002 OSTaskStatStkChkEn
8114099c g     O .bss	00000004 xMutexBuffer128
81104494 g     F .text	00000040 vFeebCh1HandleIrq
81104614 g     F .text	00000040 vFeebCh7HandleIrq
8113a7c0 g     F .text	00000058 alt_ic_isr_register
811408c0 g     O .rwdata	00000002 OSMemEn
81140840 g     O .rwdata	00000004 alt_stack_limit_value
81111f68 g     F .text	0000003c fwrite
81140a8c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
811408ca g     O .rwdata	00000002 OSMutexEn
81140918 g       *ABS*	00000000 _edata
81137570 g     F .text	00000068 altera_avalon_uart_read_fd
8110fbec g     F .text	00000034 vLoadDefaultIdNFEEMaster
81154648 g       *ABS*	00000000 _end
81154048 g     O .bss	00000500 active_files
81140a4c g     O .bss	00000001 OSIntNesting
8110e3c4 g     F .text	0000004c vFailInitialization
81101460 g     F .text	000000c0 bDdr2SwitchMemory
8110f518 g     F .text	0000002c cFeeRMAPDump
811409a0 g     O .bss	00000004 xSemCountBuffer32
81122f90 g     F .text	0000016c __fputwc
8110f468 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81119270 g     F .text	00000070 vfscanf
81134eec g     F .text	00000150 copy_file_record_name_to_string
81136de4 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81130dbc g     F .text	000001dc OSTimeDlyResume
811333f8 g     F .text	000000f4 Look_for_FAT16
8112aecc g     F .text	00000154 OSFlagNameSet
811409a4 g     O .bss	00000004 xMutexBuffer64
811305f4 g     F .text	000001c8 OSTaskStkChk
8113a8a8 g     F .text	00000094 alt_ic_irq_disable
81103c2c g     F .text	00000430 bSdmaDmaM1Transfer
811408c6 g     O .rwdata	00000002 OSMemSize
8110e4f4 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
811131bc g     F .text	00000084 __swrite
8114085c g     O .rwdata	00000004 __malloc_trim_threshold
8111c360 g     F .text	0000000c __locale_msgcharset
81140a50 g     O .bss	00000004 OSTCBCur
8110ed3c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106c84 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113b31c g     F .text	00000040 exit
8112d258 g     F .text	00000220 OSMutexPost
81108504 g     F .text	00000058 bSyncIrqFlagError
81135318 g     F .text	000003c0 alt_up_sd_card_find_next
811408c8 g     O .rwdata	00000002 OSMemTblSize
8111c168 g     F .text	000000cc _fwalk_reent
81139904 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81110ce4 g     F .text	000000f8 .hidden __floatunsisf
8111d1f0 g     F .text	00000204 __mdiff
81104b74 g     F .text	00000180 vFeebInitIrq
8110e45c g     F .text	0000004c vFailSenderCreate
81124d34 g     F .text	00000074 .hidden __modsi3
81107c64 g     F .text	0000003c uliSyncGetPer
811409a8 g     O .bss	00000004 xMutexSenderACK
8110eb9c g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8114084c g     O .rwdata	00000004 __ctype_ptr__
8110e904 g     F .text	00000068 vFailSetPreParsedBuffer
81132428 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111b43c g     F .text	00000004 __sfp_lock_release
81104dc8 g     F .text	000000ac bFeebGetIrqControl
8110ee74 g     F .text	00000068 vCouldNotSendTurnOff
81128c7c g     F .text	00000064 OSInit
81106154 g     F .text	00000078 bSetPainelLeds
8113904c g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81140a54 g     O .bss	00000004 OSTmrTime
81101aa0 g     F .text	00000510 bDdr2MemoryReadTest
811309a8 g     F .text	0000012c OSTaskQuery
81108334 g     F .text	00000074 bSyncIrqEnableError
8112e830 g     F .text	000000b0 OS_QInit
8111df34 g     F .text	000000d0 __sccl
81111820 g     F .text	0000000c atoi
811086e0 g     F .text	00000030 vFeeTask
81129fe0 g     F .text	0000005c OS_StrLen
8110490c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112c274 g     F .text	0000011c OSMemNameSet
8113e1a0 g     O .rodata	00000101 _ctype_
81107c28 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110e5c4 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
811408e2 g     O .rwdata	00000002 OSTaskProfileEn
81138f1c g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
811409ac g     O .bss	00000004 xTxUARTMutex
81140a58 g     O .bss	00000004 OSTime
81140864 g     O .rwdata	00000004 __mbtowc
81137b90 g     F .text	0000005c altera_avalon_uart_close
81140a5c g     O .bss	00000004 OSTmrSem
81151cb4 g     O .bss	00000800 OSTaskIdleStk
81111838 g     F .text	000000fc _fopen_r
8113b7f8 g     F .text	0000003c _exit
8113a240 g     F .text	00000134 alt_alarm_start
8112ad9c g     F .text	00000130 OSFlagNameGet
81130f98 g     F .text	00000064 OSTimeGet
8114092c g     O .bss	00000004 ESdmaChBufferId
81135b7c g     F .text	00000380 alt_up_sd_card_read
81111fa4 g     F .text	000001c4 __smakebuf_r
811049bc g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81140910 g     O .rwdata	00000008 alt_msgdma_list
811132f8 g     F .text	00000098 strlen
811074c0 g     F .text	000000b4 uc_spi_get_byte
8113b118 g     F .text	00000028 OSTaskSwHook
81127884 g     F .text	0000015c open
811524b4 g     O .bss	00000c30 OSEventTbl
8110f494 g     F .text	0000002c vFeeSpwRMAPChangeDefault
8112628c g     F .text	000000dc .hidden __gedf2
8114f828 g     O .bss	00000010 xSenderACK
8113ae0c g     F .text	00000044 alt_putchar
811530e4 g     O .bss	00000e58 OSTCBTbl
811232a8 g     F .text	00000838 __gethex
8112f278 g     F .text	00000108 OSSemSet
8110f544 g     F .text	00000038 cFeeRMAPEchoingEnable
81140868 g     O .rwdata	00000004 __wctomb
8110b688 g     F .text	00000030 vVariablesInitialization
8112185c g     F .text	00000018 __sprint_r
81104e74 g     F .text	00000088 bFeebGetIrqFlags
81140924 g     O .bss	00000004 pxDmaM2Dev
8110df8c g     F .text	0000004c vFailCreateSemaphoreResources
81140884 g     O .rwdata	00000004 alt_priority_mask
811057e0 g     F .text	0000003c bDisableLvdsBoard
8112ea78 g     F .text	00000248 OSSemDel
81140a60 g     O .bss	00000004 OSFlagFreeList
811073fc g     F .text	000000c4 v_spi_send_byte
81107730 g     F .text	000000d0 bSSDisplayConfig
8113a818 g     F .text	00000090 alt_ic_irq_enable
811408a8 g     O .rwdata	00000002 OSEventNameSize
811179cc g     F .text	0000001c __vfprintf_internal
81140a64 g     O .bss	00000001 OSStatRdy
81108008 g     F .text	00000074 bSyncCtrCh2OutEnable
81153f3c g     O .bss	000000a4 OSTCBPrioTbl
81137c30 g     F .text	00000270 altera_avalon_uart_read
81124110 g     F .text	00000064 _wctomb_r
811280c4 g     F .text	000000cc __env_lock
811408ee g     O .rwdata	00000002 OSTaskSwHookEn
8110471c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
8112645c g     F .text	00000904 .hidden __subdf3
8114f838 g     O .bss	00000130 xPreParsed
81107ca0 g     F .text	0000003c uliSyncGetOst
811047e8 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110c790 g     F .text	00000290 vSendEthConf
8111cc04 g     F .text	000000b0 __lo0bits
81117aac g     F .text	000017c4 __svfscanf_r
8114088c g     O .rwdata	00000008 alt_alarm_list
811215a4 g     F .text	0000019c _ungetc_r
811408b6 g     O .rwdata	00000002 OSFlagWidth
8113a464 g     F .text	00000068 _do_ctors
811029ec g     F .text	0000004c DMA_BUSY
81124018 g     F .text	000000c8 wcrtomb
8110b838 g     F .text	00000068 vCCDLoadDefaultValues
811270e8 g     F .text	000000d8 close
81107cdc g     F .text	0000003c uliSyncGetGeneral
811409f4 g     O .bss	00000004 alt_envsem
81140a68 g     O .bss	00000004 OSIdleCtrRun
81129304 g     F .text	00000028 OSVersion
81140900 g     O .rwdata	00000002 OSTmrCfgWheelSize
81130ad4 g     F .text	00000078 OS_TaskStkClr
8110fe2c g     F .text	0000003c siOpenFile
811408da g     O .rwdata	00000002 OSTaskCreateEn
8110ca20 g     F .text	00000118 vSendTurnOff
8110e08c g     F .text	0000004c vFailSendPreParsedSemaphore
811338ec g     F .text	000002a4 match_file_record_to_name_ext
8112992c g     F .text	00000070 OS_EventWaitListInit
81123120 g     F .text	00000088 fputwc
8110e024 g     F .text	00000068 vFailSendxSemCommInit
8113b210 g     F .text	00000028 OSTaskIdleHook
8111b440 g     F .text	00000004 __sinit_lock_acquire
8111c968 g     F .text	00000128 __multadd
8110482c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110792c g     F .text	0000004c ucSyncStatusState
811307bc g     F .text	000001ec OSTaskSuspend
8111c940 g     F .text	00000028 _Bfree
81107bec g     F .text	0000003c uliSyncGetMbt
8112a03c g     F .text	00000064 OS_TaskIdle
81140906 g     O .rwdata	00000002 OSTmrTblSize
8112e6cc g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	1128ce00 	call	81128ce0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	10915204 	addi	r2,r2,17736
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	10915204 	addi	r2,r2,17736
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	1128d340 	call	81128d34 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a09917 	ldw	r2,-32156(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a09917 	ldw	r2,-32156(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110025c:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100260:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
81100264:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100268:	d6a21014 	ori	gp,gp,34880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
8110026c:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
81100270:	10824614 	ori	r2,r2,2328

    movhi r3, %hi(__bss_end)
81100274:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
81100278:	18d19214 	ori	r3,r3,17992

    beq r2, r3, 1f
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>

0:
    stw zero, (r2)
81100280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
81100284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
8110028c:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100290:	11276b00 	call	811276b0 <alt_main>

81100294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <bDdr2EepromTest+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	00e04534 	movhi	r3,33044
811002bc:	18c2da04 	addi	r3,r3,2920
811002c0:	00a04534 	movhi	r2,33044
811002c4:	10ae0d04 	addi	r2,r2,-18380
811002c8:	1009883a 	mov	r4,r2
811002cc:	00800884 	movi	r2,34
811002d0:	100d883a 	mov	r6,r2
811002d4:	200b883a 	mov	r5,r4
811002d8:	1809883a 	mov	r4,r3
811002dc:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
811002e0:	d0a04d17 	ldw	r2,-32460(gp)
811002e4:	01604534 	movhi	r5,33044
811002e8:	2942da04 	addi	r5,r5,2920
811002ec:	1009883a 	mov	r4,r2
811002f0:	111197c0 	call	8111197c <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002f4:	00bfe804 	movi	r2,-96
811002f8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002fc:	00800044 	movi	r2,1
81100300:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100304:	e0bfff03 	ldbu	r2,-4(fp)
81100308:	10c00060 	cmpeqi	r3,r2,1
8110030c:	1800031e 	bne	r3,zero,8110031c <bDdr2EepromTest+0x84>
81100310:	108000a0 	cmpeqi	r2,r2,2
81100314:	1000081e 	bne	r2,zero,81100338 <bDdr2EepromTest+0xa0>
81100318:	00000e06 	br	81100354 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10827c04 	addi	r2,r2,2544
81100324:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100328:	00a00034 	movhi	r2,32768
8110032c:	10828004 	addi	r2,r2,2560
81100330:	e0bffb15 	stw	r2,-20(fp)
		break;
81100334:	00001906 	br	8110039c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100338:	00a00034 	movhi	r2,32768
8110033c:	10825804 	addi	r2,r2,2400
81100340:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100344:	00a00034 	movhi	r2,32768
81100348:	10825c04 	addi	r2,r2,2416
8110034c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100350:	00001206 	br	8110039c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
81100354:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100358:	00e04534 	movhi	r3,33044
8110035c:	18c2da04 	addi	r3,r3,2920
81100360:	00a04534 	movhi	r2,33044
81100364:	10ae1604 	addi	r2,r2,-18344
81100368:	1009883a 	mov	r4,r2
8110036c:	00800bc4 	movi	r2,47
81100370:	100d883a 	mov	r6,r2
81100374:	200b883a 	mov	r5,r4
81100378:	1809883a 	mov	r4,r3
8110037c:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100380:	d0a04d17 	ldw	r2,-32460(gp)
81100384:	01604534 	movhi	r5,33044
81100388:	2942da04 	addi	r5,r5,2920
8110038c:	1009883a 	mov	r4,r2
81100390:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	0000ff06 	br	81100798 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110039c:	00e04534 	movhi	r3,33044
811003a0:	18c2da04 	addi	r3,r3,2920
811003a4:	00a04534 	movhi	r2,33044
811003a8:	10ae2204 	addi	r2,r2,-18296
811003ac:	1009883a 	mov	r4,r2
811003b0:	008005c4 	movi	r2,23
811003b4:	100d883a 	mov	r6,r2
811003b8:	200b883a 	mov	r5,r4
811003bc:	1809883a 	mov	r4,r3
811003c0:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
811003c4:	d0a04d17 	ldw	r2,-32460(gp)
811003c8:	01604534 	movhi	r5,33044
811003cc:	2942da04 	addi	r5,r5,2920
811003d0:	1009883a 	mov	r4,r2
811003d4:	111197c0 	call	8111197c <fprintf>
#endif
	usleep(20 * 1000);
811003d8:	01138804 	movi	r4,20000
811003dc:	1127e440 	call	81127e44 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003e0:	e03ffc15 	stw	zero,-16(fp)
811003e4:	00003306 	br	811004b4 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
811003e8:	e0bffc17 	ldw	r2,-16(fp)
811003ec:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003f0:	e0bffd03 	ldbu	r2,-12(fp)
811003f4:	10c03fcc 	andi	r3,r2,255
811003f8:	18c0201c 	xori	r3,r3,128
811003fc:	18ffe004 	addi	r3,r3,-128
81100400:	e13ffd43 	ldbu	r4,-11(fp)
81100404:	e0bffe04 	addi	r2,fp,-8
81100408:	d8800015 	stw	r2,0(sp)
8110040c:	200f883a 	mov	r7,r4
81100410:	180d883a 	mov	r6,r3
81100414:	e17ffb17 	ldw	r5,-20(fp)
81100418:	e13ffa17 	ldw	r4,-24(fp)
8110041c:	1105ac00 	call	81105ac0 <I2C_Read>
81100420:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100424:	e0bff917 	ldw	r2,-28(fp)
81100428:	10001026 	beq	r2,zero,8110046c <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110042c:	e0bffd43 	ldbu	r2,-11(fp)
81100430:	e0fffe03 	ldbu	r3,-8(fp)
81100434:	18c03fcc 	andi	r3,r3,255
81100438:	180f883a 	mov	r7,r3
8110043c:	100d883a 	mov	r6,r2
81100440:	01604534 	movhi	r5,33044
81100444:	296e2804 	addi	r5,r5,-18272
81100448:	01204534 	movhi	r4,33044
8110044c:	2102da04 	addi	r4,r4,2920
81100450:	11130e40 	call	811130e4 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100454:	d0a04d17 	ldw	r2,-32460(gp)
81100458:	01604534 	movhi	r5,33044
8110045c:	2942da04 	addi	r5,r5,2920
81100460:	1009883a 	mov	r4,r2
81100464:	111197c0 	call	8111197c <fprintf>
81100468:	00000f06 	br	811004a8 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
8110046c:	00e04534 	movhi	r3,33044
81100470:	18c2da04 	addi	r3,r3,2920
81100474:	00a04534 	movhi	r2,33044
81100478:	10ae2d04 	addi	r2,r2,-18252
8110047c:	1009883a 	mov	r4,r2
81100480:	008005c4 	movi	r2,23
81100484:	100d883a 	mov	r6,r2
81100488:	200b883a 	mov	r5,r4
8110048c:	1809883a 	mov	r4,r3
81100490:	111297c0 	call	8111297c <memcpy>
			debug(fp, cDebugBuffer);
81100494:	d0a04d17 	ldw	r2,-32460(gp)
81100498:	01604534 	movhi	r5,33044
8110049c:	2942da04 	addi	r5,r5,2920
811004a0:	1009883a 	mov	r4,r2
811004a4:	111197c0 	call	8111197c <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811004a8:	e0bffc17 	ldw	r2,-16(fp)
811004ac:	10800044 	addi	r2,r2,1
811004b0:	e0bffc15 	stw	r2,-16(fp)
811004b4:	e0bffc17 	ldw	r2,-16(fp)
811004b8:	10804008 	cmpgei	r2,r2,256
811004bc:	1000021e 	bne	r2,zero,811004c8 <bDdr2EepromTest+0x230>
811004c0:	e0bff917 	ldw	r2,-28(fp)
811004c4:	103fc81e 	bne	r2,zero,811003e8 <__reset+0xfb0e03e8>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004c8:	e0bff917 	ldw	r2,-28(fp)
811004cc:	10001026 	beq	r2,zero,81100510 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004d0:	00e04534 	movhi	r3,33044
811004d4:	18c2da04 	addi	r3,r3,2920
811004d8:	00a04534 	movhi	r2,33044
811004dc:	10ae3304 	addi	r2,r2,-18228
811004e0:	1009883a 	mov	r4,r2
811004e4:	00800884 	movi	r2,34
811004e8:	100d883a 	mov	r6,r2
811004ec:	200b883a 	mov	r5,r4
811004f0:	1809883a 	mov	r4,r3
811004f4:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
811004f8:	d0a04d17 	ldw	r2,-32460(gp)
811004fc:	01604534 	movhi	r5,33044
81100500:	2942da04 	addi	r5,r5,2920
81100504:	1009883a 	mov	r4,r2
81100508:	111197c0 	call	8111197c <fprintf>
8110050c:	00000f06 	br	8110054c <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100510:	00e04534 	movhi	r3,33044
81100514:	18c2da04 	addi	r3,r3,2920
81100518:	00a04534 	movhi	r2,33044
8110051c:	10ae3c04 	addi	r2,r2,-18192
81100520:	1009883a 	mov	r4,r2
81100524:	008007c4 	movi	r2,31
81100528:	100d883a 	mov	r6,r2
8110052c:	200b883a 	mov	r5,r4
81100530:	1809883a 	mov	r4,r3
81100534:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81100538:	d0a04d17 	ldw	r2,-32460(gp)
8110053c:	01604534 	movhi	r5,33044
81100540:	2942da04 	addi	r5,r5,2920
81100544:	1009883a 	mov	r4,r2
81100548:	111197c0 	call	8111197c <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
8110054c:	00e04534 	movhi	r3,33044
81100550:	18c2da04 	addi	r3,r3,2920
81100554:	00a04534 	movhi	r2,33044
81100558:	10ae4404 	addi	r2,r2,-18160
8110055c:	1009883a 	mov	r4,r2
81100560:	00800604 	movi	r2,24
81100564:	100d883a 	mov	r6,r2
81100568:	200b883a 	mov	r5,r4
8110056c:	1809883a 	mov	r4,r3
81100570:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81100574:	d0a04d17 	ldw	r2,-32460(gp)
81100578:	01604534 	movhi	r5,33044
8110057c:	2942da04 	addi	r5,r5,2920
81100580:	1009883a 	mov	r4,r2
81100584:	111197c0 	call	8111197c <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100588:	00800484 	movi	r2,18
8110058c:	e0bffd85 	stb	r2,-10(fp)
81100590:	00bfe004 	movi	r2,-128
81100594:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100598:	01138804 	movi	r4,20000
8110059c:	1127e440 	call	81127e44 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005a0:	e0bffd03 	ldbu	r2,-12(fp)
811005a4:	10c03fcc 	andi	r3,r2,255
811005a8:	18c0201c 	xori	r3,r3,128
811005ac:	18ffe004 	addi	r3,r3,-128
811005b0:	e13ffdc3 	ldbu	r4,-9(fp)
811005b4:	e0bffd83 	ldbu	r2,-10(fp)
811005b8:	d8800015 	stw	r2,0(sp)
811005bc:	200f883a 	mov	r7,r4
811005c0:	180d883a 	mov	r6,r3
811005c4:	e17ffb17 	ldw	r5,-20(fp)
811005c8:	e13ffa17 	ldw	r4,-24(fp)
811005cc:	11059e00 	call	811059e0 <I2C_Write>
811005d0:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005d4:	e0bff917 	ldw	r2,-28(fp)
811005d8:	1000101e 	bne	r2,zero,8110061c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005dc:	00e04534 	movhi	r3,33044
811005e0:	18c2da04 	addi	r3,r3,2920
811005e4:	00a04534 	movhi	r2,33044
811005e8:	10ae4a04 	addi	r2,r2,-18136
811005ec:	1009883a 	mov	r4,r2
811005f0:	00800604 	movi	r2,24
811005f4:	100d883a 	mov	r6,r2
811005f8:	200b883a 	mov	r5,r4
811005fc:	1809883a 	mov	r4,r3
81100600:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81100604:	d0a04d17 	ldw	r2,-32460(gp)
81100608:	01604534 	movhi	r5,33044
8110060c:	2942da04 	addi	r5,r5,2920
81100610:	1009883a 	mov	r4,r2
81100614:	111197c0 	call	8111197c <fprintf>
81100618:	00003306 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110061c:	e0bffd03 	ldbu	r2,-12(fp)
81100620:	10c03fcc 	andi	r3,r2,255
81100624:	18c0201c 	xori	r3,r3,128
81100628:	18ffe004 	addi	r3,r3,-128
8110062c:	e13ffdc3 	ldbu	r4,-9(fp)
81100630:	e0bffe44 	addi	r2,fp,-7
81100634:	d8800015 	stw	r2,0(sp)
81100638:	200f883a 	mov	r7,r4
8110063c:	180d883a 	mov	r6,r3
81100640:	e17ffb17 	ldw	r5,-20(fp)
81100644:	e13ffa17 	ldw	r4,-24(fp)
81100648:	1105ac00 	call	81105ac0 <I2C_Read>
8110064c:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100650:	e0bff917 	ldw	r2,-28(fp)
81100654:	1000101e 	bne	r2,zero,81100698 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100658:	00e04534 	movhi	r3,33044
8110065c:	18c2da04 	addi	r3,r3,2920
81100660:	00a04534 	movhi	r2,33044
81100664:	10ae5004 	addi	r2,r2,-18112
81100668:	1009883a 	mov	r4,r2
8110066c:	00800884 	movi	r2,34
81100670:	100d883a 	mov	r6,r2
81100674:	200b883a 	mov	r5,r4
81100678:	1809883a 	mov	r4,r3
8110067c:	111297c0 	call	8111297c <memcpy>
			debug(fp, cDebugBuffer);
81100680:	d0a04d17 	ldw	r2,-32460(gp)
81100684:	01604534 	movhi	r5,33044
81100688:	2942da04 	addi	r5,r5,2920
8110068c:	1009883a 	mov	r4,r2
81100690:	111197c0 	call	8111197c <fprintf>
81100694:	00001406 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100698:	e0bffe43 	ldbu	r2,-7(fp)
8110069c:	10c03fcc 	andi	r3,r2,255
811006a0:	e0bffd83 	ldbu	r2,-10(fp)
811006a4:	18801026 	beq	r3,r2,811006e8 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
811006a8:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811006ac:	e0bffe43 	ldbu	r2,-7(fp)
811006b0:	10803fcc 	andi	r2,r2,255
811006b4:	e0fffd83 	ldbu	r3,-10(fp)
811006b8:	180f883a 	mov	r7,r3
811006bc:	100d883a 	mov	r6,r2
811006c0:	01604534 	movhi	r5,33044
811006c4:	296e5904 	addi	r5,r5,-18076
811006c8:	01204534 	movhi	r4,33044
811006cc:	2102da04 	addi	r4,r4,2920
811006d0:	11130e40 	call	811130e4 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006d4:	d0a04d17 	ldw	r2,-32460(gp)
811006d8:	01604534 	movhi	r5,33044
811006dc:	2942da04 	addi	r5,r5,2920
811006e0:	1009883a 	mov	r4,r2
811006e4:	111197c0 	call	8111197c <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006e8:	e0bff917 	ldw	r2,-28(fp)
811006ec:	10001026 	beq	r2,zero,81100730 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006f0:	00e04534 	movhi	r3,33044
811006f4:	18c2da04 	addi	r3,r3,2920
811006f8:	00a04534 	movhi	r2,33044
811006fc:	10ae6804 	addi	r2,r2,-18016
81100700:	1009883a 	mov	r4,r2
81100704:	008008c4 	movi	r2,35
81100708:	100d883a 	mov	r6,r2
8110070c:	200b883a 	mov	r5,r4
81100710:	1809883a 	mov	r4,r3
81100714:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81100718:	d0a04d17 	ldw	r2,-32460(gp)
8110071c:	01604534 	movhi	r5,33044
81100720:	2942da04 	addi	r5,r5,2920
81100724:	1009883a 	mov	r4,r2
81100728:	111197c0 	call	8111197c <fprintf>
8110072c:	00000f06 	br	8110076c <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100730:	00e04534 	movhi	r3,33044
81100734:	18c2da04 	addi	r3,r3,2920
81100738:	00a04534 	movhi	r2,33044
8110073c:	10ae7104 	addi	r2,r2,-17980
81100740:	1009883a 	mov	r4,r2
81100744:	00800804 	movi	r2,32
81100748:	100d883a 	mov	r6,r2
8110074c:	200b883a 	mov	r5,r4
81100750:	1809883a 	mov	r4,r3
81100754:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81100758:	d0a04d17 	ldw	r2,-32460(gp)
8110075c:	01604534 	movhi	r5,33044
81100760:	2942da04 	addi	r5,r5,2920
81100764:	1009883a 	mov	r4,r2
81100768:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110076c:	00a04534 	movhi	r2,33044
81100770:	1082da04 	addi	r2,r2,2920
81100774:	00c00284 	movi	r3,10
81100778:	10c00005 	stb	r3,0(r2)
8110077c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100780:	d0a04d17 	ldw	r2,-32460(gp)
81100784:	01604534 	movhi	r5,33044
81100788:	2942da04 	addi	r5,r5,2920
8110078c:	1009883a 	mov	r4,r2
81100790:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
81100794:	e0bff917 	ldw	r2,-28(fp)
}
81100798:	e037883a 	mov	sp,fp
8110079c:	dfc00117 	ldw	ra,4(sp)
811007a0:	df000017 	ldw	fp,0(sp)
811007a4:	dec00204 	addi	sp,sp,8
811007a8:	f800283a 	ret

811007ac <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811007ac:	deffb704 	addi	sp,sp,-292
811007b0:	de00012e 	bgeu	sp,et,811007b8 <bDdr2EepromDump+0xc>
811007b4:	003b68fa 	trap	3
811007b8:	dfc04815 	stw	ra,288(sp)
811007bc:	df004715 	stw	fp,284(sp)
811007c0:	df004704 	addi	fp,sp,284
811007c4:	2005883a 	mov	r2,r4
811007c8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007cc:	00e04534 	movhi	r3,33044
811007d0:	18c2da04 	addi	r3,r3,2920
811007d4:	00a04534 	movhi	r2,33044
811007d8:	10ae7904 	addi	r2,r2,-17948
811007dc:	1009883a 	mov	r4,r2
811007e0:	00800884 	movi	r2,34
811007e4:	100d883a 	mov	r6,r2
811007e8:	200b883a 	mov	r5,r4
811007ec:	1809883a 	mov	r4,r3
811007f0:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
811007f4:	d0a04d17 	ldw	r2,-32460(gp)
811007f8:	01604534 	movhi	r5,33044
811007fc:	2942da04 	addi	r5,r5,2920
81100800:	1009883a 	mov	r4,r2
81100804:	111197c0 	call	8111197c <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100808:	00bfe804 	movi	r2,-96
8110080c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100810:	00800044 	movi	r2,1
81100814:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100818:	e0bfff03 	ldbu	r2,-4(fp)
8110081c:	10c00060 	cmpeqi	r3,r2,1
81100820:	1800031e 	bne	r3,zero,81100830 <bDdr2EepromDump+0x84>
81100824:	108000a0 	cmpeqi	r2,r2,2
81100828:	1000081e 	bne	r2,zero,8110084c <bDdr2EepromDump+0xa0>
8110082c:	00000e06 	br	81100868 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100830:	00a00034 	movhi	r2,32768
81100834:	10827c04 	addi	r2,r2,2544
81100838:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110083c:	00a00034 	movhi	r2,32768
81100840:	10828004 	addi	r2,r2,2560
81100844:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100848:	00001906 	br	811008b0 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8110084c:	00a00034 	movhi	r2,32768
81100850:	10825804 	addi	r2,r2,2400
81100854:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100858:	00a00034 	movhi	r2,32768
8110085c:	10825c04 	addi	r2,r2,2416
81100860:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100864:	00001206 	br	811008b0 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
81100868:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110086c:	00e04534 	movhi	r3,33044
81100870:	18c2da04 	addi	r3,r3,2920
81100874:	00a04534 	movhi	r2,33044
81100878:	10ae8204 	addi	r2,r2,-17912
8110087c:	1009883a 	mov	r4,r2
81100880:	00800bc4 	movi	r2,47
81100884:	100d883a 	mov	r6,r2
81100888:	200b883a 	mov	r5,r4
8110088c:	1809883a 	mov	r4,r3
81100890:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100894:	d0a04d17 	ldw	r2,-32460(gp)
81100898:	01604534 	movhi	r5,33044
8110089c:	2942da04 	addi	r5,r5,2920
811008a0:	1009883a 	mov	r4,r2
811008a4:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
811008a8:	e0bfbe17 	ldw	r2,-264(fp)
811008ac:	0002e706 	br	8110144c <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811008b0:	e0bfbd03 	ldbu	r2,-268(fp)
811008b4:	10c03fcc 	andi	r3,r2,255
811008b8:	18c0201c 	xori	r3,r3,128
811008bc:	18ffe004 	addi	r3,r3,-128
811008c0:	e13fbf04 	addi	r4,fp,-260
811008c4:	00804004 	movi	r2,256
811008c8:	d8800015 	stw	r2,0(sp)
811008cc:	200f883a 	mov	r7,r4
811008d0:	180d883a 	mov	r6,r3
811008d4:	e17fbb17 	ldw	r5,-276(fp)
811008d8:	e13fba17 	ldw	r4,-280(fp)
811008dc:	1105bc80 	call	81105bc8 <I2C_MultipleRead>
811008e0:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008e4:	e0bfbe17 	ldw	r2,-264(fp)
811008e8:	1002be26 	beq	r2,zero,811013e4 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008ec:	e03fbc15 	stw	zero,-272(fp)
811008f0:	0002b606 	br	811013cc <bDdr2EepromDump+0xc20>
			if (iI == 0) {
811008f4:	e0bfbc17 	ldw	r2,-272(fp)
811008f8:	1000121e 	bne	r2,zero,81100944 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008fc:	e0ffbf04 	addi	r3,fp,-260
81100900:	e0bfbc17 	ldw	r2,-272(fp)
81100904:	1885883a 	add	r2,r3,r2
81100908:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110090c:	10803fcc 	andi	r2,r2,255
81100910:	100f883a 	mov	r7,r2
81100914:	e1bfbc17 	ldw	r6,-272(fp)
81100918:	01604534 	movhi	r5,33044
8110091c:	296e8e04 	addi	r5,r5,-17864
81100920:	01204534 	movhi	r4,33044
81100924:	2102da04 	addi	r4,r4,2920
81100928:	11130e40 	call	811130e4 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110092c:	d0a04d17 	ldw	r2,-32460(gp)
81100930:	01604534 	movhi	r5,33044
81100934:	2942da04 	addi	r5,r5,2920
81100938:	1009883a 	mov	r4,r2
8110093c:	111197c0 	call	8111197c <fprintf>
81100940:	00029f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10800058 	cmpnei	r2,r2,1
8110094c:	1000101e 	bne	r2,zero,81100990 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100950:	00e04534 	movhi	r3,33044
81100954:	18c2da04 	addi	r3,r3,2920
81100958:	00a04534 	movhi	r2,33044
8110095c:	10ae9a04 	addi	r2,r2,-17816
81100960:	1009883a 	mov	r4,r2
81100964:	00800c04 	movi	r2,48
81100968:	100d883a 	mov	r6,r2
8110096c:	200b883a 	mov	r5,r4
81100970:	1809883a 	mov	r4,r3
81100974:	111297c0 	call	8111297c <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100978:	d0a04d17 	ldw	r2,-32460(gp)
8110097c:	01604534 	movhi	r5,33044
81100980:	2942da04 	addi	r5,r5,2920
81100984:	1009883a 	mov	r4,r2
81100988:	111197c0 	call	8111197c <fprintf>
8110098c:	00028c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100990:	e0bfbc17 	ldw	r2,-272(fp)
81100994:	10800098 	cmpnei	r2,r2,2
81100998:	1000101e 	bne	r2,zero,811009dc <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
8110099c:	00e04534 	movhi	r3,33044
811009a0:	18c2da04 	addi	r3,r3,2920
811009a4:	00a04534 	movhi	r2,33044
811009a8:	10aea604 	addi	r2,r2,-17768
811009ac:	1009883a 	mov	r4,r2
811009b0:	008007c4 	movi	r2,31
811009b4:	100d883a 	mov	r6,r2
811009b8:	200b883a 	mov	r5,r4
811009bc:	1809883a 	mov	r4,r3
811009c0:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
811009c4:	d0a04d17 	ldw	r2,-32460(gp)
811009c8:	01604534 	movhi	r5,33044
811009cc:	2942da04 	addi	r5,r5,2920
811009d0:	1009883a 	mov	r4,r2
811009d4:	111197c0 	call	8111197c <fprintf>
811009d8:	00027906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108000d8 	cmpnei	r2,r2,3
811009e4:	1000101e 	bne	r2,zero,81100a28 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009e8:	00e04534 	movhi	r3,33044
811009ec:	18c2da04 	addi	r3,r3,2920
811009f0:	00a04534 	movhi	r2,33044
811009f4:	10aeae04 	addi	r2,r2,-17736
811009f8:	1009883a 	mov	r4,r2
811009fc:	008009c4 	movi	r2,39
81100a00:	100d883a 	mov	r6,r2
81100a04:	200b883a 	mov	r5,r4
81100a08:	1809883a 	mov	r4,r3
81100a0c:	111297c0 	call	8111297c <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a10:	d0a04d17 	ldw	r2,-32460(gp)
81100a14:	01604534 	movhi	r5,33044
81100a18:	2942da04 	addi	r5,r5,2920
81100a1c:	1009883a 	mov	r4,r2
81100a20:	111197c0 	call	8111197c <fprintf>
81100a24:	00026606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a28:	e0bfbc17 	ldw	r2,-272(fp)
81100a2c:	10800118 	cmpnei	r2,r2,4
81100a30:	1000101e 	bne	r2,zero,81100a74 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a34:	00e04534 	movhi	r3,33044
81100a38:	18c2da04 	addi	r3,r3,2920
81100a3c:	00a04534 	movhi	r2,33044
81100a40:	10aeb804 	addi	r2,r2,-17696
81100a44:	1009883a 	mov	r4,r2
81100a48:	00800a84 	movi	r2,42
81100a4c:	100d883a 	mov	r6,r2
81100a50:	200b883a 	mov	r5,r4
81100a54:	1809883a 	mov	r4,r3
81100a58:	111297c0 	call	8111297c <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a5c:	d0a04d17 	ldw	r2,-32460(gp)
81100a60:	01604534 	movhi	r5,33044
81100a64:	2942da04 	addi	r5,r5,2920
81100a68:	1009883a 	mov	r4,r2
81100a6c:	111197c0 	call	8111197c <fprintf>
81100a70:	00025306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100a74:	e0bfbc17 	ldw	r2,-272(fp)
81100a78:	10800158 	cmpnei	r2,r2,5
81100a7c:	1000101e 	bne	r2,zero,81100ac0 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a80:	00e04534 	movhi	r3,33044
81100a84:	18c2da04 	addi	r3,r3,2920
81100a88:	00a04534 	movhi	r2,33044
81100a8c:	10aec304 	addi	r2,r2,-17652
81100a90:	1009883a 	mov	r4,r2
81100a94:	00800c04 	movi	r2,48
81100a98:	100d883a 	mov	r6,r2
81100a9c:	200b883a 	mov	r5,r4
81100aa0:	1809883a 	mov	r4,r3
81100aa4:	111297c0 	call	8111297c <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100aa8:	d0a04d17 	ldw	r2,-32460(gp)
81100aac:	01604534 	movhi	r5,33044
81100ab0:	2942da04 	addi	r5,r5,2920
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	111197c0 	call	8111197c <fprintf>
81100abc:	00024006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100ac0:	e0bfbc17 	ldw	r2,-272(fp)
81100ac4:	10800198 	cmpnei	r2,r2,6
81100ac8:	1000101e 	bne	r2,zero,81100b0c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100acc:	00e04534 	movhi	r3,33044
81100ad0:	18c2da04 	addi	r3,r3,2920
81100ad4:	00a04534 	movhi	r2,33044
81100ad8:	10aecf04 	addi	r2,r2,-17604
81100adc:	1009883a 	mov	r4,r2
81100ae0:	00800544 	movi	r2,21
81100ae4:	100d883a 	mov	r6,r2
81100ae8:	200b883a 	mov	r5,r4
81100aec:	1809883a 	mov	r4,r3
81100af0:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100af4:	d0a04d17 	ldw	r2,-32460(gp)
81100af8:	01604534 	movhi	r5,33044
81100afc:	2942da04 	addi	r5,r5,2920
81100b00:	1009883a 	mov	r4,r2
81100b04:	111197c0 	call	8111197c <fprintf>
81100b08:	00022d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b0c:	e0bfbc17 	ldw	r2,-272(fp)
81100b10:	108001d8 	cmpnei	r2,r2,7
81100b14:	1000101e 	bne	r2,zero,81100b58 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b18:	00e04534 	movhi	r3,33044
81100b1c:	18c2da04 	addi	r3,r3,2920
81100b20:	00a04534 	movhi	r2,33044
81100b24:	10aed504 	addi	r2,r2,-17580
81100b28:	1009883a 	mov	r4,r2
81100b2c:	00800804 	movi	r2,32
81100b30:	100d883a 	mov	r6,r2
81100b34:	200b883a 	mov	r5,r4
81100b38:	1809883a 	mov	r4,r3
81100b3c:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100b40:	d0a04d17 	ldw	r2,-32460(gp)
81100b44:	01604534 	movhi	r5,33044
81100b48:	2942da04 	addi	r5,r5,2920
81100b4c:	1009883a 	mov	r4,r2
81100b50:	111197c0 	call	8111197c <fprintf>
81100b54:	00021a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100b58:	e0bfbc17 	ldw	r2,-272(fp)
81100b5c:	10800418 	cmpnei	r2,r2,16
81100b60:	1000101e 	bne	r2,zero,81100ba4 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b64:	00e04534 	movhi	r3,33044
81100b68:	18c2da04 	addi	r3,r3,2920
81100b6c:	00a04534 	movhi	r2,33044
81100b70:	10aedd04 	addi	r2,r2,-17548
81100b74:	1009883a 	mov	r4,r2
81100b78:	00800d04 	movi	r2,52
81100b7c:	100d883a 	mov	r6,r2
81100b80:	200b883a 	mov	r5,r4
81100b84:	1809883a 	mov	r4,r3
81100b88:	111297c0 	call	8111297c <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b8c:	d0a04d17 	ldw	r2,-32460(gp)
81100b90:	01604534 	movhi	r5,33044
81100b94:	2942da04 	addi	r5,r5,2920
81100b98:	1009883a 	mov	r4,r2
81100b9c:	111197c0 	call	8111197c <fprintf>
81100ba0:	00020706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100ba4:	e0bfbc17 	ldw	r2,-272(fp)
81100ba8:	10800358 	cmpnei	r2,r2,13
81100bac:	1000101e 	bne	r2,zero,81100bf0 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100bb0:	00e04534 	movhi	r3,33044
81100bb4:	18c2da04 	addi	r3,r3,2920
81100bb8:	00a04534 	movhi	r2,33044
81100bbc:	10aeea04 	addi	r2,r2,-17496
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	008005c4 	movi	r2,23
81100bc8:	100d883a 	mov	r6,r2
81100bcc:	200b883a 	mov	r5,r4
81100bd0:	1809883a 	mov	r4,r3
81100bd4:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100bd8:	d0a04d17 	ldw	r2,-32460(gp)
81100bdc:	01604534 	movhi	r5,33044
81100be0:	2942da04 	addi	r5,r5,2920
81100be4:	1009883a 	mov	r4,r2
81100be8:	111197c0 	call	8111197c <fprintf>
81100bec:	0001f406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100bf0:	e0bfbc17 	ldw	r2,-272(fp)
81100bf4:	10800398 	cmpnei	r2,r2,14
81100bf8:	1000101e 	bne	r2,zero,81100c3c <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bfc:	00e04534 	movhi	r3,33044
81100c00:	18c2da04 	addi	r3,r3,2920
81100c04:	00a04534 	movhi	r2,33044
81100c08:	10aef004 	addi	r2,r2,-17472
81100c0c:	1009883a 	mov	r4,r2
81100c10:	008004c4 	movi	r2,19
81100c14:	100d883a 	mov	r6,r2
81100c18:	200b883a 	mov	r5,r4
81100c1c:	1809883a 	mov	r4,r3
81100c20:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100c24:	d0a04d17 	ldw	r2,-32460(gp)
81100c28:	01604534 	movhi	r5,33044
81100c2c:	2942da04 	addi	r5,r5,2920
81100c30:	1009883a 	mov	r4,r2
81100c34:	111197c0 	call	8111197c <fprintf>
81100c38:	0001e106 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100c3c:	e0bfbc17 	ldw	r2,-272(fp)
81100c40:	10800458 	cmpnei	r2,r2,17
81100c44:	1000101e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c48:	00e04534 	movhi	r3,33044
81100c4c:	18c2da04 	addi	r3,r3,2920
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10aef504 	addi	r2,r2,-17452
81100c58:	1009883a 	mov	r4,r2
81100c5c:	00800684 	movi	r2,26
81100c60:	100d883a 	mov	r6,r2
81100c64:	200b883a 	mov	r5,r4
81100c68:	1809883a 	mov	r4,r3
81100c6c:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100c70:	d0a04d17 	ldw	r2,-32460(gp)
81100c74:	01604534 	movhi	r5,33044
81100c78:	2942da04 	addi	r5,r5,2920
81100c7c:	1009883a 	mov	r4,r2
81100c80:	111197c0 	call	8111197c <fprintf>
81100c84:	0001ce06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	10800498 	cmpnei	r2,r2,18
81100c90:	1000101e 	bne	r2,zero,81100cd4 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c94:	00e04534 	movhi	r3,33044
81100c98:	18c2da04 	addi	r3,r3,2920
81100c9c:	00a04534 	movhi	r2,33044
81100ca0:	10aefc04 	addi	r2,r2,-17424
81100ca4:	1009883a 	mov	r4,r2
81100ca8:	00800d44 	movi	r2,53
81100cac:	100d883a 	mov	r6,r2
81100cb0:	200b883a 	mov	r5,r4
81100cb4:	1809883a 	mov	r4,r3
81100cb8:	111297c0 	call	8111297c <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100cbc:	d0a04d17 	ldw	r2,-32460(gp)
81100cc0:	01604534 	movhi	r5,33044
81100cc4:	2942da04 	addi	r5,r5,2920
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	111197c0 	call	8111197c <fprintf>
81100cd0:	0001bb06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100cd4:	e0bfbc17 	ldw	r2,-272(fp)
81100cd8:	10800518 	cmpnei	r2,r2,20
81100cdc:	1000101e 	bne	r2,zero,81100d20 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ce0:	00e04534 	movhi	r3,33044
81100ce4:	18c2da04 	addi	r3,r3,2920
81100ce8:	00a04534 	movhi	r2,33044
81100cec:	10af0a04 	addi	r2,r2,-17368
81100cf0:	1009883a 	mov	r4,r2
81100cf4:	00801204 	movi	r2,72
81100cf8:	100d883a 	mov	r6,r2
81100cfc:	200b883a 	mov	r5,r4
81100d00:	1809883a 	mov	r4,r3
81100d04:	111297c0 	call	8111297c <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d08:	d0a04d17 	ldw	r2,-32460(gp)
81100d0c:	01604534 	movhi	r5,33044
81100d10:	2942da04 	addi	r5,r5,2920
81100d14:	1009883a 	mov	r4,r2
81100d18:	111197c0 	call	8111197c <fprintf>
81100d1c:	0001a806 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d20:	e0bfbc17 	ldw	r2,-272(fp)
81100d24:	10800598 	cmpnei	r2,r2,22
81100d28:	1000101e 	bne	r2,zero,81100d6c <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d2c:	00e04534 	movhi	r3,33044
81100d30:	18c2da04 	addi	r3,r3,2920
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10af1c04 	addi	r2,r2,-17296
81100d3c:	1009883a 	mov	r4,r2
81100d40:	00800784 	movi	r2,30
81100d44:	100d883a 	mov	r6,r2
81100d48:	200b883a 	mov	r5,r4
81100d4c:	1809883a 	mov	r4,r3
81100d50:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81100d54:	d0a04d17 	ldw	r2,-32460(gp)
81100d58:	01604534 	movhi	r5,33044
81100d5c:	2942da04 	addi	r5,r5,2920
81100d60:	1009883a 	mov	r4,r2
81100d64:	111197c0 	call	8111197c <fprintf>
81100d68:	00019506 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100d6c:	e0bfbc17 	ldw	r2,-272(fp)
81100d70:	108006d8 	cmpnei	r2,r2,27
81100d74:	1000101e 	bne	r2,zero,81100db8 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d78:	00e04534 	movhi	r3,33044
81100d7c:	18c2da04 	addi	r3,r3,2920
81100d80:	00a04534 	movhi	r2,33044
81100d84:	10af2404 	addi	r2,r2,-17264
81100d88:	1009883a 	mov	r4,r2
81100d8c:	00800a04 	movi	r2,40
81100d90:	100d883a 	mov	r6,r2
81100d94:	200b883a 	mov	r5,r4
81100d98:	1809883a 	mov	r4,r3
81100d9c:	111297c0 	call	8111297c <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100da0:	d0a04d17 	ldw	r2,-32460(gp)
81100da4:	01604534 	movhi	r5,33044
81100da8:	2942da04 	addi	r5,r5,2920
81100dac:	1009883a 	mov	r4,r2
81100db0:	111197c0 	call	8111197c <fprintf>
81100db4:	00018206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100db8:	e0bfbc17 	ldw	r2,-272(fp)
81100dbc:	10800718 	cmpnei	r2,r2,28
81100dc0:	1000101e 	bne	r2,zero,81100e04 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100dc4:	00e04534 	movhi	r3,33044
81100dc8:	18c2da04 	addi	r3,r3,2920
81100dcc:	00a04534 	movhi	r2,33044
81100dd0:	10af2e04 	addi	r2,r2,-17224
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	00800cc4 	movi	r2,51
81100ddc:	100d883a 	mov	r6,r2
81100de0:	200b883a 	mov	r5,r4
81100de4:	1809883a 	mov	r4,r3
81100de8:	111297c0 	call	8111297c <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dec:	d0a04d17 	ldw	r2,-32460(gp)
81100df0:	01604534 	movhi	r5,33044
81100df4:	2942da04 	addi	r5,r5,2920
81100df8:	1009883a 	mov	r4,r2
81100dfc:	111197c0 	call	8111197c <fprintf>
81100e00:	00016f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e04:	e0bfbc17 	ldw	r2,-272(fp)
81100e08:	10800758 	cmpnei	r2,r2,29
81100e0c:	1000101e 	bne	r2,zero,81100e50 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e10:	00e04534 	movhi	r3,33044
81100e14:	18c2da04 	addi	r3,r3,2920
81100e18:	00a04534 	movhi	r2,33044
81100e1c:	10af3b04 	addi	r2,r2,-17172
81100e20:	1009883a 	mov	r4,r2
81100e24:	008009c4 	movi	r2,39
81100e28:	100d883a 	mov	r6,r2
81100e2c:	200b883a 	mov	r5,r4
81100e30:	1809883a 	mov	r4,r3
81100e34:	111297c0 	call	8111297c <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e38:	d0a04d17 	ldw	r2,-32460(gp)
81100e3c:	01604534 	movhi	r5,33044
81100e40:	2942da04 	addi	r5,r5,2920
81100e44:	1009883a 	mov	r4,r2
81100e48:	111197c0 	call	8111197c <fprintf>
81100e4c:	00015c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100e50:	e0bfbc17 	ldw	r2,-272(fp)
81100e54:	10800798 	cmpnei	r2,r2,30
81100e58:	1000101e 	bne	r2,zero,81100e9c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e5c:	00e04534 	movhi	r3,33044
81100e60:	18c2da04 	addi	r3,r3,2920
81100e64:	00a04534 	movhi	r2,33044
81100e68:	10af4504 	addi	r2,r2,-17132
81100e6c:	1009883a 	mov	r4,r2
81100e70:	00800b04 	movi	r2,44
81100e74:	100d883a 	mov	r6,r2
81100e78:	200b883a 	mov	r5,r4
81100e7c:	1809883a 	mov	r4,r3
81100e80:	111297c0 	call	8111297c <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e84:	d0a04d17 	ldw	r2,-32460(gp)
81100e88:	01604534 	movhi	r5,33044
81100e8c:	2942da04 	addi	r5,r5,2920
81100e90:	1009883a 	mov	r4,r2
81100e94:	111197c0 	call	8111197c <fprintf>
81100e98:	00014906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100e9c:	e0bfbc17 	ldw	r2,-272(fp)
81100ea0:	108007d8 	cmpnei	r2,r2,31
81100ea4:	1000101e 	bne	r2,zero,81100ee8 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ea8:	00e04534 	movhi	r3,33044
81100eac:	18c2da04 	addi	r3,r3,2920
81100eb0:	00a04534 	movhi	r2,33044
81100eb4:	10af5004 	addi	r2,r2,-17088
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	008010c4 	movi	r2,67
81100ec0:	100d883a 	mov	r6,r2
81100ec4:	200b883a 	mov	r5,r4
81100ec8:	1809883a 	mov	r4,r3
81100ecc:	111297c0 	call	8111297c <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ed0:	d0a04d17 	ldw	r2,-32460(gp)
81100ed4:	01604534 	movhi	r5,33044
81100ed8:	2942da04 	addi	r5,r5,2920
81100edc:	1009883a 	mov	r4,r2
81100ee0:	111197c0 	call	8111197c <fprintf>
81100ee4:	00013606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100ee8:	e0bfbc17 	ldw	r2,-272(fp)
81100eec:	10800918 	cmpnei	r2,r2,36
81100ef0:	1000101e 	bne	r2,zero,81100f34 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ef4:	00e04534 	movhi	r3,33044
81100ef8:	18c2da04 	addi	r3,r3,2920
81100efc:	00a04534 	movhi	r2,33044
81100f00:	10af6104 	addi	r2,r2,-17020
81100f04:	1009883a 	mov	r4,r2
81100f08:	00800a84 	movi	r2,42
81100f0c:	100d883a 	mov	r6,r2
81100f10:	200b883a 	mov	r5,r4
81100f14:	1809883a 	mov	r4,r3
81100f18:	111297c0 	call	8111297c <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f1c:	d0a04d17 	ldw	r2,-32460(gp)
81100f20:	01604534 	movhi	r5,33044
81100f24:	2942da04 	addi	r5,r5,2920
81100f28:	1009883a 	mov	r4,r2
81100f2c:	111197c0 	call	8111197c <fprintf>
81100f30:	00012306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100f34:	e0bfbc17 	ldw	r2,-272(fp)
81100f38:	10800958 	cmpnei	r2,r2,37
81100f3c:	1000101e 	bne	r2,zero,81100f80 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f40:	00e04534 	movhi	r3,33044
81100f44:	18c2da04 	addi	r3,r3,2920
81100f48:	00a04534 	movhi	r2,33044
81100f4c:	10af6c04 	addi	r2,r2,-16976
81100f50:	1009883a 	mov	r4,r2
81100f54:	00800cc4 	movi	r2,51
81100f58:	100d883a 	mov	r6,r2
81100f5c:	200b883a 	mov	r5,r4
81100f60:	1809883a 	mov	r4,r3
81100f64:	111297c0 	call	8111297c <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f68:	d0a04d17 	ldw	r2,-32460(gp)
81100f6c:	01604534 	movhi	r5,33044
81100f70:	2942da04 	addi	r5,r5,2920
81100f74:	1009883a 	mov	r4,r2
81100f78:	111197c0 	call	8111197c <fprintf>
81100f7c:	00011006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100f80:	e0bfbc17 	ldw	r2,-272(fp)
81100f84:	10800998 	cmpnei	r2,r2,38
81100f88:	1000101e 	bne	r2,zero,81100fcc <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f8c:	00e04534 	movhi	r3,33044
81100f90:	18c2da04 	addi	r3,r3,2920
81100f94:	00a04534 	movhi	r2,33044
81100f98:	10af7904 	addi	r2,r2,-16924
81100f9c:	1009883a 	mov	r4,r2
81100fa0:	00800dc4 	movi	r2,55
81100fa4:	100d883a 	mov	r6,r2
81100fa8:	200b883a 	mov	r5,r4
81100fac:	1809883a 	mov	r4,r3
81100fb0:	111297c0 	call	8111297c <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fb4:	d0a04d17 	ldw	r2,-32460(gp)
81100fb8:	01604534 	movhi	r5,33044
81100fbc:	2942da04 	addi	r5,r5,2920
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	111197c0 	call	8111197c <fprintf>
81100fc8:	0000fd06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
81100fcc:	e0bfbc17 	ldw	r2,-272(fp)
81100fd0:	10800a58 	cmpnei	r2,r2,41
81100fd4:	1000101e 	bne	r2,zero,81101018 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fd8:	00e04534 	movhi	r3,33044
81100fdc:	18c2da04 	addi	r3,r3,2920
81100fe0:	00a04534 	movhi	r2,33044
81100fe4:	10af8704 	addi	r2,r2,-16868
81100fe8:	1009883a 	mov	r4,r2
81100fec:	00800c84 	movi	r2,50
81100ff0:	100d883a 	mov	r6,r2
81100ff4:	200b883a 	mov	r5,r4
81100ff8:	1809883a 	mov	r4,r3
81100ffc:	111297c0 	call	8111297c <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101000:	d0a04d17 	ldw	r2,-32460(gp)
81101004:	01604534 	movhi	r5,33044
81101008:	2942da04 	addi	r5,r5,2920
8110100c:	1009883a 	mov	r4,r2
81101010:	111197c0 	call	8111197c <fprintf>
81101014:	0000ea06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101018:	e0bfbc17 	ldw	r2,-272(fp)
8110101c:	10800a98 	cmpnei	r2,r2,42
81101020:	1000101e 	bne	r2,zero,81101064 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101024:	00e04534 	movhi	r3,33044
81101028:	18c2da04 	addi	r3,r3,2920
8110102c:	00a04534 	movhi	r2,33044
81101030:	10af9404 	addi	r2,r2,-16816
81101034:	1009883a 	mov	r4,r2
81101038:	00800cc4 	movi	r2,51
8110103c:	100d883a 	mov	r6,r2
81101040:	200b883a 	mov	r5,r4
81101044:	1809883a 	mov	r4,r3
81101048:	111297c0 	call	8111297c <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
8110104c:	d0a04d17 	ldw	r2,-32460(gp)
81101050:	01604534 	movhi	r5,33044
81101054:	2942da04 	addi	r5,r5,2920
81101058:	1009883a 	mov	r4,r2
8110105c:	111197c0 	call	8111197c <fprintf>
81101060:	0000d706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
81101064:	e0bfbc17 	ldw	r2,-272(fp)
81101068:	10800f98 	cmpnei	r2,r2,62
8110106c:	1000101e 	bne	r2,zero,811010b0 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101070:	00e04534 	movhi	r3,33044
81101074:	18c2da04 	addi	r3,r3,2920
81101078:	00a04534 	movhi	r2,33044
8110107c:	10afa104 	addi	r2,r2,-16764
81101080:	1009883a 	mov	r4,r2
81101084:	00800404 	movi	r2,16
81101088:	100d883a 	mov	r6,r2
8110108c:	200b883a 	mov	r5,r4
81101090:	1809883a 	mov	r4,r3
81101094:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81101098:	d0a04d17 	ldw	r2,-32460(gp)
8110109c:	01604534 	movhi	r5,33044
811010a0:	2942da04 	addi	r5,r5,2920
811010a4:	1009883a 	mov	r4,r2
811010a8:	111197c0 	call	8111197c <fprintf>
811010ac:	0000c406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
811010b0:	e0bfbc17 	ldw	r2,-272(fp)
811010b4:	10800fd8 	cmpnei	r2,r2,63
811010b8:	10001f1e 	bne	r2,zero,81101138 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
811010bc:	00a04534 	movhi	r2,33044
811010c0:	1082da04 	addi	r2,r2,2920
811010c4:	00c00a04 	movi	r3,40
811010c8:	10c00005 	stb	r3,0(r2)
811010cc:	00c010c4 	movi	r3,67
811010d0:	10c00045 	stb	r3,1(r2)
811010d4:	00c01a04 	movi	r3,104
811010d8:	10c00085 	stb	r3,2(r2)
811010dc:	00c01944 	movi	r3,101
811010e0:	10c000c5 	stb	r3,3(r2)
811010e4:	00c018c4 	movi	r3,99
811010e8:	10c00105 	stb	r3,4(r2)
811010ec:	00c01ac4 	movi	r3,107
811010f0:	10c00145 	stb	r3,5(r2)
811010f4:	00c01cc4 	movi	r3,115
811010f8:	10c00185 	stb	r3,6(r2)
811010fc:	00c01d44 	movi	r3,117
81101100:	10c001c5 	stb	r3,7(r2)
81101104:	00c01b44 	movi	r3,109
81101108:	10c00205 	stb	r3,8(r2)
8110110c:	00c00a44 	movi	r3,41
81101110:	10c00245 	stb	r3,9(r2)
81101114:	00c00284 	movi	r3,10
81101118:	10c00285 	stb	r3,10(r2)
8110111c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101120:	d0a04d17 	ldw	r2,-32460(gp)
81101124:	01604534 	movhi	r5,33044
81101128:	2942da04 	addi	r5,r5,2920
8110112c:	1009883a 	mov	r4,r2
81101130:	111197c0 	call	8111197c <fprintf>
81101134:	0000a206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
81101138:	e0bfbc17 	ldw	r2,-272(fp)
8110113c:	10801018 	cmpnei	r2,r2,64
81101140:	1000101e 	bne	r2,zero,81101184 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101144:	00e04534 	movhi	r3,33044
81101148:	18c2da04 	addi	r3,r3,2920
8110114c:	00a04534 	movhi	r2,33044
81101150:	10afa504 	addi	r2,r2,-16748
81101154:	1009883a 	mov	r4,r2
81101158:	00800804 	movi	r2,32
8110115c:	100d883a 	mov	r6,r2
81101160:	200b883a 	mov	r5,r4
81101164:	1809883a 	mov	r4,r3
81101168:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
8110116c:	d0a04d17 	ldw	r2,-32460(gp)
81101170:	01604534 	movhi	r5,33044
81101174:	2942da04 	addi	r5,r5,2920
81101178:	1009883a 	mov	r4,r2
8110117c:	111197c0 	call	8111197c <fprintf>
81101180:	00008f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
81101184:	e0bfbc17 	ldw	r2,-272(fp)
81101188:	10801218 	cmpnei	r2,r2,72
8110118c:	1000101e 	bne	r2,zero,811011d0 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101190:	00e04534 	movhi	r3,33044
81101194:	18c2da04 	addi	r3,r3,2920
81101198:	00a04534 	movhi	r2,33044
8110119c:	10afad04 	addi	r2,r2,-16716
811011a0:	1009883a 	mov	r4,r2
811011a4:	00800dc4 	movi	r2,55
811011a8:	100d883a 	mov	r6,r2
811011ac:	200b883a 	mov	r5,r4
811011b0:	1809883a 	mov	r4,r3
811011b4:	111297c0 	call	8111297c <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
811011b8:	d0a04d17 	ldw	r2,-32460(gp)
811011bc:	01604534 	movhi	r5,33044
811011c0:	2942da04 	addi	r5,r5,2920
811011c4:	1009883a 	mov	r4,r2
811011c8:	111197c0 	call	8111197c <fprintf>
811011cc:	00007c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
811011d0:	e0bfbc17 	ldw	r2,-272(fp)
811011d4:	10801258 	cmpnei	r2,r2,73
811011d8:	1000101e 	bne	r2,zero,8110121c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011dc:	00e04534 	movhi	r3,33044
811011e0:	18c2da04 	addi	r3,r3,2920
811011e4:	00a04534 	movhi	r2,33044
811011e8:	10afbb04 	addi	r2,r2,-16660
811011ec:	1009883a 	mov	r4,r2
811011f0:	00800784 	movi	r2,30
811011f4:	100d883a 	mov	r6,r2
811011f8:	200b883a 	mov	r5,r4
811011fc:	1809883a 	mov	r4,r3
81101200:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81101204:	d0a04d17 	ldw	r2,-32460(gp)
81101208:	01604534 	movhi	r5,33044
8110120c:	2942da04 	addi	r5,r5,2920
81101210:	1009883a 	mov	r4,r2
81101214:	111197c0 	call	8111197c <fprintf>
81101218:	00006906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110121c:	e0bfbc17 	ldw	r2,-272(fp)
81101220:	108016d8 	cmpnei	r2,r2,91
81101224:	1000101e 	bne	r2,zero,81101268 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101228:	00e04534 	movhi	r3,33044
8110122c:	18c2da04 	addi	r3,r3,2920
81101230:	00a04534 	movhi	r2,33044
81101234:	10afc304 	addi	r2,r2,-16628
81101238:	1009883a 	mov	r4,r2
8110123c:	00800804 	movi	r2,32
81101240:	100d883a 	mov	r6,r2
81101244:	200b883a 	mov	r5,r4
81101248:	1809883a 	mov	r4,r3
8110124c:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81101250:	d0a04d17 	ldw	r2,-32460(gp)
81101254:	01604534 	movhi	r5,33044
81101258:	2942da04 	addi	r5,r5,2920
8110125c:	1009883a 	mov	r4,r2
81101260:	111197c0 	call	8111197c <fprintf>
81101264:	00005606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
81101268:	e0bfbc17 	ldw	r2,-272(fp)
8110126c:	10801758 	cmpnei	r2,r2,93
81101270:	1000101e 	bne	r2,zero,811012b4 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101274:	00e04534 	movhi	r3,33044
81101278:	18c2da04 	addi	r3,r3,2920
8110127c:	00a04534 	movhi	r2,33044
81101280:	10afcb04 	addi	r2,r2,-16596
81101284:	1009883a 	mov	r4,r2
81101288:	008009c4 	movi	r2,39
8110128c:	100d883a 	mov	r6,r2
81101290:	200b883a 	mov	r5,r4
81101294:	1809883a 	mov	r4,r3
81101298:	111297c0 	call	8111297c <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110129c:	d0a04d17 	ldw	r2,-32460(gp)
811012a0:	01604534 	movhi	r5,33044
811012a4:	2942da04 	addi	r5,r5,2920
811012a8:	1009883a 	mov	r4,r2
811012ac:	111197c0 	call	8111197c <fprintf>
811012b0:	00004306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
811012b4:	e0bfbc17 	ldw	r2,-272(fp)
811012b8:	10801798 	cmpnei	r2,r2,94
811012bc:	1000101e 	bne	r2,zero,81101300 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
811012c0:	00e04534 	movhi	r3,33044
811012c4:	18c2da04 	addi	r3,r3,2920
811012c8:	00a04534 	movhi	r2,33044
811012cc:	10afd504 	addi	r2,r2,-16556
811012d0:	1009883a 	mov	r4,r2
811012d4:	008006c4 	movi	r2,27
811012d8:	100d883a 	mov	r6,r2
811012dc:	200b883a 	mov	r5,r4
811012e0:	1809883a 	mov	r4,r3
811012e4:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
811012e8:	d0a04d17 	ldw	r2,-32460(gp)
811012ec:	01604534 	movhi	r5,33044
811012f0:	2942da04 	addi	r5,r5,2920
811012f4:	1009883a 	mov	r4,r2
811012f8:	111197c0 	call	8111197c <fprintf>
811012fc:	00003006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101300:	e0bfbc17 	ldw	r2,-272(fp)
81101304:	108017d8 	cmpnei	r2,r2,95
81101308:	1000101e 	bne	r2,zero,8110134c <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110130c:	00e04534 	movhi	r3,33044
81101310:	18c2da04 	addi	r3,r3,2920
81101314:	00a04534 	movhi	r2,33044
81101318:	10afdc04 	addi	r2,r2,-16528
8110131c:	1009883a 	mov	r4,r2
81101320:	00800a04 	movi	r2,40
81101324:	100d883a 	mov	r6,r2
81101328:	200b883a 	mov	r5,r4
8110132c:	1809883a 	mov	r4,r3
81101330:	111297c0 	call	8111297c <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101334:	d0a04d17 	ldw	r2,-32460(gp)
81101338:	01604534 	movhi	r5,33044
8110133c:	2942da04 	addi	r5,r5,2920
81101340:	1009883a 	mov	r4,r2
81101344:	111197c0 	call	8111197c <fprintf>
81101348:	00001d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
8110134c:	e0bfbc17 	ldw	r2,-272(fp)
81101350:	108018d8 	cmpnei	r2,r2,99
81101354:	1000101e 	bne	r2,zero,81101398 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101358:	00e04534 	movhi	r3,33044
8110135c:	18c2da04 	addi	r3,r3,2920
81101360:	00a04534 	movhi	r2,33044
81101364:	10afe604 	addi	r2,r2,-16488
81101368:	1009883a 	mov	r4,r2
8110136c:	00800984 	movi	r2,38
81101370:	100d883a 	mov	r6,r2
81101374:	200b883a 	mov	r5,r4
81101378:	1809883a 	mov	r4,r3
8110137c:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
81101380:	d0a04d17 	ldw	r2,-32460(gp)
81101384:	01604534 	movhi	r5,33044
81101388:	2942da04 	addi	r5,r5,2920
8110138c:	1009883a 	mov	r4,r2
81101390:	111197c0 	call	8111197c <fprintf>
81101394:	00000a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101398:	00a04534 	movhi	r2,33044
8110139c:	1082da04 	addi	r2,r2,2920
811013a0:	00c00284 	movi	r3,10
811013a4:	10c00005 	stb	r3,0(r2)
811013a8:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
811013ac:	d0a04d17 	ldw	r2,-32460(gp)
811013b0:	01604534 	movhi	r5,33044
811013b4:	2942da04 	addi	r5,r5,2920
811013b8:	1009883a 	mov	r4,r2
811013bc:	111197c0 	call	8111197c <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811013c0:	e0bfbc17 	ldw	r2,-272(fp)
811013c4:	10800044 	addi	r2,r2,1
811013c8:	e0bfbc15 	stw	r2,-272(fp)
811013cc:	e0bfbc17 	ldw	r2,-272(fp)
811013d0:	10804008 	cmpgei	r2,r2,256
811013d4:	1000121e 	bne	r2,zero,81101420 <bDdr2EepromDump+0xc74>
811013d8:	e0bfbe17 	ldw	r2,-264(fp)
811013dc:	103d451e 	bne	r2,zero,811008f4 <__reset+0xfb0e08f4>
811013e0:	00000f06 	br	81101420 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013e4:	00e04534 	movhi	r3,33044
811013e8:	18c2da04 	addi	r3,r3,2920
811013ec:	00a04534 	movhi	r2,33044
811013f0:	10aff004 	addi	r2,r2,-16448
811013f4:	1009883a 	mov	r4,r2
811013f8:	008005c4 	movi	r2,23
811013fc:	100d883a 	mov	r6,r2
81101400:	200b883a 	mov	r5,r4
81101404:	1809883a 	mov	r4,r3
81101408:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
8110140c:	d0a04d17 	ldw	r2,-32460(gp)
81101410:	01604534 	movhi	r5,33044
81101414:	2942da04 	addi	r5,r5,2920
81101418:	1009883a 	mov	r4,r2
8110141c:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101420:	00a04534 	movhi	r2,33044
81101424:	1082da04 	addi	r2,r2,2920
81101428:	00c00284 	movi	r3,10
8110142c:	10c00005 	stb	r3,0(r2)
81101430:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101434:	d0a04d17 	ldw	r2,-32460(gp)
81101438:	01604534 	movhi	r5,33044
8110143c:	2942da04 	addi	r5,r5,2920
81101440:	1009883a 	mov	r4,r2
81101444:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
81101448:	e0bfbe17 	ldw	r2,-264(fp)
}
8110144c:	e037883a 	mov	sp,fp
81101450:	dfc00117 	ldw	ra,4(sp)
81101454:	df000017 	ldw	fp,0(sp)
81101458:	dec00204 	addi	sp,sp,8
8110145c:	f800283a 	ret

81101460 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101460:	defffb04 	addi	sp,sp,-20
81101464:	de00012e 	bgeu	sp,et,8110146c <bDdr2SwitchMemory+0xc>
81101468:	003b68fa 	trap	3
8110146c:	dfc00415 	stw	ra,16(sp)
81101470:	df000315 	stw	fp,12(sp)
81101474:	df000304 	addi	fp,sp,12
81101478:	2005883a 	mov	r2,r4
8110147c:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101480:	00a04834 	movhi	r2,33056
81101484:	108c2204 	addi	r2,r2,12424
81101488:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
8110148c:	00800044 	movi	r2,1
81101490:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101494:	e0bfff03 	ldbu	r2,-4(fp)
81101498:	10c00060 	cmpeqi	r3,r2,1
8110149c:	1800031e 	bne	r3,zero,811014ac <bDdr2SwitchMemory+0x4c>
811014a0:	108000a0 	cmpeqi	r2,r2,2
811014a4:	1000041e 	bne	r2,zero,811014b8 <bDdr2SwitchMemory+0x58>
811014a8:	00000706 	br	811014c8 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811014ac:	e0bffe17 	ldw	r2,-8(fp)
811014b0:	10000015 	stw	zero,0(r2)
		break;
811014b4:	00001406 	br	81101508 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811014b8:	e0bffe17 	ldw	r2,-8(fp)
811014bc:	00e00034 	movhi	r3,32768
811014c0:	10c00015 	stw	r3,0(r2)
		break;
811014c4:	00001006 	br	81101508 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
811014c8:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811014cc:	00e04534 	movhi	r3,33044
811014d0:	18c2da04 	addi	r3,r3,2920
811014d4:	00a04534 	movhi	r2,33044
811014d8:	10aff604 	addi	r2,r2,-16424
811014dc:	1009883a 	mov	r4,r2
811014e0:	00800f04 	movi	r2,60
811014e4:	100d883a 	mov	r6,r2
811014e8:	200b883a 	mov	r5,r4
811014ec:	1809883a 	mov	r4,r3
811014f0:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014f4:	d0a04d17 	ldw	r2,-32460(gp)
811014f8:	01604534 	movhi	r5,33044
811014fc:	2942da04 	addi	r5,r5,2920
81101500:	1009883a 	mov	r4,r2
81101504:	111197c0 	call	8111197c <fprintf>
		;
#endif
	}

	return bSuccess;
81101508:	e0bffd17 	ldw	r2,-12(fp)
}
8110150c:	e037883a 	mov	sp,fp
81101510:	dfc00117 	ldw	ra,4(sp)
81101514:	df000017 	ldw	fp,0(sp)
81101518:	dec00204 	addi	sp,sp,8
8110151c:	f800283a 	ret

81101520 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101520:	deffe204 	addi	sp,sp,-120
81101524:	de00012e 	bgeu	sp,et,8110152c <bDdr2MemoryWriteTest+0xc>
81101528:	003b68fa 	trap	3
8110152c:	dfc01d15 	stw	ra,116(sp)
81101530:	df001c15 	stw	fp,112(sp)
81101534:	dc401b15 	stw	r17,108(sp)
81101538:	dc001a15 	stw	r16,104(sp)
8110153c:	df001c04 	addi	fp,sp,112
81101540:	2005883a 	mov	r2,r4
81101544:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101548:	00e04534 	movhi	r3,33044
8110154c:	18c2da04 	addi	r3,r3,2920
81101550:	00a04534 	movhi	r2,33044
81101554:	10b00504 	addi	r2,r2,-16364
81101558:	1009883a 	mov	r4,r2
8110155c:	00800a04 	movi	r2,40
81101560:	100d883a 	mov	r6,r2
81101564:	200b883a 	mov	r5,r4
81101568:	1809883a 	mov	r4,r3
8110156c:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81101570:	d0a04d17 	ldw	r2,-32460(gp)
81101574:	01604534 	movhi	r5,33044
81101578:	2942da04 	addi	r5,r5,2920
8110157c:	1009883a 	mov	r4,r2
81101580:	111197c0 	call	8111197c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101584:	00800044 	movi	r2,1
81101588:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
8110158c:	e0bffd03 	ldbu	r2,-12(fp)
81101590:	10c00060 	cmpeqi	r3,r2,1
81101594:	1800031e 	bne	r3,zero,811015a4 <bDdr2MemoryWriteTest+0x84>
81101598:	108000a0 	cmpeqi	r2,r2,2
8110159c:	1000081e 	bne	r2,zero,811015c0 <bDdr2MemoryWriteTest+0xa0>
811015a0:	00000e06 	br	811015dc <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	1009883a 	mov	r4,r2
811015ac:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015b0:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015b4:	00a00034 	movhi	r2,32768
811015b8:	e0bfe615 	stw	r2,-104(fp)
		break;
811015bc:	00001906 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015c0:	e0bffd03 	ldbu	r2,-12(fp)
811015c4:	1009883a 	mov	r4,r2
811015c8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015cc:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015d0:	00a00034 	movhi	r2,32768
811015d4:	e0bfe615 	stw	r2,-104(fp)
		break;
811015d8:	00001206 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
811015dc:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015e0:	00e04534 	movhi	r3,33044
811015e4:	18c2da04 	addi	r3,r3,2920
811015e8:	00a04534 	movhi	r2,33044
811015ec:	10ae1604 	addi	r2,r2,-18344
811015f0:	1009883a 	mov	r4,r2
811015f4:	00800bc4 	movi	r2,47
811015f8:	100d883a 	mov	r6,r2
811015fc:	200b883a 	mov	r5,r4
81101600:	1809883a 	mov	r4,r3
81101604:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101608:	d0a04d17 	ldw	r2,-32460(gp)
8110160c:	01604534 	movhi	r5,33044
81101610:	2942da04 	addi	r5,r5,2920
81101614:	1009883a 	mov	r4,r2
81101618:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
8110161c:	e0bfed17 	ldw	r2,-76(fp)
81101620:	00011806 	br	81101a84 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101624:	e0bfe617 	ldw	r2,-104(fp)
81101628:	1004d53a 	srli	r2,r2,20
8110162c:	100d883a 	mov	r6,r2
81101630:	01604534 	movhi	r5,33044
81101634:	29700f04 	addi	r5,r5,-16324
81101638:	01204534 	movhi	r4,33044
8110163c:	2102da04 	addi	r4,r4,2920
81101640:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81101644:	d0a04d17 	ldw	r2,-32460(gp)
81101648:	01604534 	movhi	r5,33044
8110164c:	2942da04 	addi	r5,r5,2920
81101650:	1009883a 	mov	r4,r2
81101654:	111197c0 	call	8111197c <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81101658:	00800104 	movi	r2,4
8110165c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101660:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101664:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81101668:	e03fe715 	stw	zero,-100(fp)
8110166c:	00001506 	br	811016c4 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101670:	e0ffe617 	ldw	r3,-104(fp)
81101674:	00b33374 	movhi	r2,52429
81101678:	10b33344 	addi	r2,r2,-13107
8110167c:	1888383a 	mulxuu	r4,r3,r2
81101680:	1885383a 	mul	r2,r3,r2
81101684:	1021883a 	mov	r16,r2
81101688:	2023883a 	mov	r17,r4
8110168c:	8804d0fa 	srli	r2,r17,3
81101690:	e0ffe717 	ldw	r3,-100(fp)
81101694:	18c00044 	addi	r3,r3,1
81101698:	10c7383a 	mul	r3,r2,r3
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1085883a 	add	r2,r2,r2
811016a4:	1085883a 	add	r2,r2,r2
811016a8:	e13fe504 	addi	r4,fp,-108
811016ac:	2085883a 	add	r2,r4,r2
811016b0:	10800e04 	addi	r2,r2,56
811016b4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811016b8:	e0bfe717 	ldw	r2,-100(fp)
811016bc:	10800044 	addi	r2,r2,1
811016c0:	e0bfe715 	stw	r2,-100(fp)
811016c4:	e0bfe717 	ldw	r2,-100(fp)
811016c8:	10800290 	cmplti	r2,r2,10
811016cc:	103fe81e 	bne	r2,zero,81101670 <__reset+0xfb0e1670>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016d0:	d0a06b17 	ldw	r2,-32340(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
811016d4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
811016d8:	00804004 	movi	r2,256
811016dc:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016e0:	e03fe715 	stw	zero,-100(fp)
811016e4:	00001e06 	br	81101760 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
811016e8:	e0bfe717 	ldw	r2,-100(fp)
811016ec:	1000091e 	bne	r2,zero,81101714 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
811016f0:	00a04534 	movhi	r2,33044
811016f4:	10831a04 	addi	r2,r2,3176
811016f8:	e0ffe717 	ldw	r3,-100(fp)
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	18c7883a 	add	r3,r3,r3
81101704:	10c5883a 	add	r2,r2,r3
81101708:	e0fff017 	ldw	r3,-64(fp)
8110170c:	10c00015 	stw	r3,0(r2)
81101710:	00001006 	br	81101754 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101714:	e0bfe717 	ldw	r2,-100(fp)
81101718:	10ffffc4 	addi	r3,r2,-1
8110171c:	00a04534 	movhi	r2,33044
81101720:	10831a04 	addi	r2,r2,3176
81101724:	18c7883a 	add	r3,r3,r3
81101728:	18c7883a 	add	r3,r3,r3
8110172c:	10c5883a 	add	r2,r2,r3
81101730:	10800017 	ldw	r2,0(r2)
81101734:	11000364 	muli	r4,r2,13
81101738:	00a04534 	movhi	r2,33044
8110173c:	10831a04 	addi	r2,r2,3176
81101740:	e0ffe717 	ldw	r3,-100(fp)
81101744:	18c7883a 	add	r3,r3,r3
81101748:	18c7883a 	add	r3,r3,r3
8110174c:	10c5883a 	add	r2,r2,r3
81101750:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101754:	e0bfe717 	ldw	r2,-100(fp)
81101758:	10800044 	addi	r2,r2,1
8110175c:	e0bfe715 	stw	r2,-100(fp)
81101760:	e0ffe717 	ldw	r3,-100(fp)
81101764:	e0bfea17 	ldw	r2,-88(fp)
81101768:	18bfdf16 	blt	r3,r2,811016e8 <__reset+0xfb0e16e8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
8110176c:	e0bfea17 	ldw	r2,-88(fp)
81101770:	10ffffc4 	addi	r3,r2,-1
81101774:	00a04534 	movhi	r2,33044
81101778:	10831a04 	addi	r2,r2,3176
8110177c:	18c7883a 	add	r3,r3,r3
81101780:	18c7883a 	add	r3,r3,r3
81101784:	10c7883a 	add	r3,r2,r3
81101788:	00aaaaf4 	movhi	r2,43691
8110178c:	10aaaa84 	addi	r2,r2,-21846
81101790:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101794:	e0bfea17 	ldw	r2,-88(fp)
81101798:	10ffff84 	addi	r3,r2,-2
8110179c:	00a04534 	movhi	r2,33044
811017a0:	10831a04 	addi	r2,r2,3176
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	18c7883a 	add	r3,r3,r3
811017ac:	10c7883a 	add	r3,r2,r3
811017b0:	00955574 	movhi	r2,21845
811017b4:	10955544 	addi	r2,r2,21845
811017b8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
811017bc:	e0bfea17 	ldw	r2,-88(fp)
811017c0:	10ffff44 	addi	r3,r2,-3
811017c4:	00a04534 	movhi	r2,33044
811017c8:	10831a04 	addi	r2,r2,3176
811017cc:	18c7883a 	add	r3,r3,r3
811017d0:	18c7883a 	add	r3,r3,r3
811017d4:	10c5883a 	add	r2,r2,r3
811017d8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffff04 	addi	r3,r2,-4
811017e4:	00a04534 	movhi	r2,33044
811017e8:	10831a04 	addi	r2,r2,3176
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c5883a 	add	r2,r2,r3
811017f8:	00ffffc4 	movi	r3,-1
811017fc:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101800:	00e04534 	movhi	r3,33044
81101804:	18c2da04 	addi	r3,r3,2920
81101808:	00a04534 	movhi	r2,33044
8110180c:	10b01504 	addi	r2,r2,-16300
81101810:	1009883a 	mov	r4,r2
81101814:	00800444 	movi	r2,17
81101818:	100d883a 	mov	r6,r2
8110181c:	200b883a 	mov	r5,r4
81101820:	1809883a 	mov	r4,r3
81101824:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81101828:	d0a04d17 	ldw	r2,-32460(gp)
8110182c:	01604534 	movhi	r5,33044
81101830:	2942da04 	addi	r5,r5,2920
81101834:	1009883a 	mov	r4,r2
81101838:	111197c0 	call	8111197c <fprintf>
8110183c:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101840:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101844:	e0bfe517 	ldw	r2,-108(fp)
81101848:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
8110184c:	00810004 	movi	r2,1024
81101850:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101864:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
81101868:	00003a06 	br	81101954 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
8110186c:	e0bfeb17 	ldw	r2,-84(fp)
81101870:	e0ffe617 	ldw	r3,-104(fp)
81101874:	1885c83a 	sub	r2,r3,r2
81101878:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110187c:	e0bfe817 	ldw	r2,-96(fp)
81101880:	e0fff217 	ldw	r3,-56(fp)
81101884:	1880060e 	bge	r3,r2,811018a0 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
81101888:	e0bff217 	ldw	r2,-56(fp)
8110188c:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101890:	e0ffe817 	ldw	r3,-96(fp)
81101894:	e0bfee17 	ldw	r2,-72(fp)
81101898:	1885283a 	div	r2,r3,r2
8110189c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
811018a0:	e0bfe817 	ldw	r2,-96(fp)
811018a4:	100d883a 	mov	r6,r2
811018a8:	01604534 	movhi	r5,33044
811018ac:	29431a04 	addi	r5,r5,3176
811018b0:	e13fe917 	ldw	r4,-92(fp)
811018b4:	111297c0 	call	8111297c <memcpy>
		pxDes += iNItemNum;
811018b8:	e0bfea17 	ldw	r2,-88(fp)
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	1085883a 	add	r2,r2,r2
811018c4:	1007883a 	mov	r3,r2
811018c8:	e0bfe917 	ldw	r2,-92(fp)
811018cc:	10c5883a 	add	r2,r2,r3
811018d0:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
811018d4:	e0ffeb17 	ldw	r3,-84(fp)
811018d8:	e0bfe817 	ldw	r2,-96(fp)
811018dc:	1885883a 	add	r2,r3,r2
811018e0:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	10800288 	cmpgei	r2,r2,10
811018ec:	1000191e 	bne	r2,zero,81101954 <bDdr2MemoryWriteTest+0x434>
811018f0:	e0bfec17 	ldw	r2,-80(fp)
811018f4:	1085883a 	add	r2,r2,r2
811018f8:	1085883a 	add	r2,r2,r2
811018fc:	e0ffe504 	addi	r3,fp,-108
81101900:	1885883a 	add	r2,r3,r2
81101904:	10800e04 	addi	r2,r2,56
81101908:	10800017 	ldw	r2,0(r2)
8110190c:	e0ffeb17 	ldw	r3,-84(fp)
81101910:	18801036 	bltu	r3,r2,81101954 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101914:	e0bfec17 	ldw	r2,-80(fp)
81101918:	10800044 	addi	r2,r2,1
8110191c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101920:	e0bfec17 	ldw	r2,-80(fp)
81101924:	108002a4 	muli	r2,r2,10
81101928:	100d883a 	mov	r6,r2
8110192c:	01604534 	movhi	r5,33044
81101930:	29701a04 	addi	r5,r5,-16280
81101934:	01204534 	movhi	r4,33044
81101938:	2102da04 	addi	r4,r4,2920
8110193c:	11130e40 	call	811130e4 <sprintf>
			debug(fp, cDebugBuffer);
81101940:	d0a04d17 	ldw	r2,-32460(gp)
81101944:	01604534 	movhi	r5,33044
81101948:	2942da04 	addi	r5,r5,2920
8110194c:	1009883a 	mov	r4,r2
81101950:	111197c0 	call	8111197c <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101954:	e0ffeb17 	ldw	r3,-84(fp)
81101958:	e0bfe617 	ldw	r2,-104(fp)
8110195c:	18bfc336 	bltu	r3,r2,8110186c <__reset+0xfb0e186c>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101960:	11271c00 	call	811271c0 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101964:	00a04534 	movhi	r2,33044
81101968:	1082da04 	addi	r2,r2,2920
8110196c:	00c00284 	movi	r3,10
81101970:	10c00005 	stb	r3,0(r2)
81101974:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101978:	d0a04d17 	ldw	r2,-32460(gp)
8110197c:	01604534 	movhi	r5,33044
81101980:	2942da04 	addi	r5,r5,2920
81101984:	1009883a 	mov	r4,r2
81101988:	111197c0 	call	8111197c <fprintf>
8110198c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101990:	e0bff117 	ldw	r2,-60(fp)
81101994:	1885c83a 	sub	r2,r3,r2
81101998:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
8110199c:	e0bfed17 	ldw	r2,-76(fp)
811019a0:	10001e26 	beq	r2,zero,81101a1c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811019a4:	e13fef17 	ldw	r4,-68(fp)
811019a8:	1110bb80 	call	81110bb8 <__floatsisf>
811019ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811019b0:	d0a06a17 	ldw	r2,-32344(gp)
811019b4:	1009883a 	mov	r4,r2
811019b8:	1110ce40 	call	81110ce4 <__floatunsisf>
811019bc:	1007883a 	mov	r3,r2
811019c0:	180b883a 	mov	r5,r3
811019c4:	8009883a 	mov	r4,r16
811019c8:	111036c0 	call	8111036c <__divsf3>
811019cc:	1007883a 	mov	r3,r2
811019d0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811019d4:	1009883a 	mov	r4,r2
811019d8:	11114fc0 	call	811114fc <__extendsfdf2>
811019dc:	1009883a 	mov	r4,r2
811019e0:	180b883a 	mov	r5,r3
811019e4:	d9400015 	stw	r5,0(sp)
811019e8:	200f883a 	mov	r7,r4
811019ec:	e1bfe617 	ldw	r6,-104(fp)
811019f0:	01604534 	movhi	r5,33044
811019f4:	29701c04 	addi	r5,r5,-16272
811019f8:	01204534 	movhi	r4,33044
811019fc:	2102da04 	addi	r4,r4,2920
81101a00:	11130e40 	call	811130e4 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a04:	d0a04d17 	ldw	r2,-32460(gp)
81101a08:	01604534 	movhi	r5,33044
81101a0c:	2942da04 	addi	r5,r5,2920
81101a10:	1009883a 	mov	r4,r2
81101a14:	111197c0 	call	8111197c <fprintf>
81101a18:	00000f06 	br	81101a58 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a1c:	00e04534 	movhi	r3,33044
81101a20:	18c2da04 	addi	r3,r3,2920
81101a24:	00a04534 	movhi	r2,33044
81101a28:	10b02804 	addi	r2,r2,-16224
81101a2c:	1009883a 	mov	r4,r2
81101a30:	00800584 	movi	r2,22
81101a34:	100d883a 	mov	r6,r2
81101a38:	200b883a 	mov	r5,r4
81101a3c:	1809883a 	mov	r4,r3
81101a40:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81101a44:	d0a04d17 	ldw	r2,-32460(gp)
81101a48:	01604534 	movhi	r5,33044
81101a4c:	2942da04 	addi	r5,r5,2920
81101a50:	1009883a 	mov	r4,r2
81101a54:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a58:	00a04534 	movhi	r2,33044
81101a5c:	1082da04 	addi	r2,r2,2920
81101a60:	00c00284 	movi	r3,10
81101a64:	10c00005 	stb	r3,0(r2)
81101a68:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a6c:	d0a04d17 	ldw	r2,-32460(gp)
81101a70:	01604534 	movhi	r5,33044
81101a74:	2942da04 	addi	r5,r5,2920
81101a78:	1009883a 	mov	r4,r2
81101a7c:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
81101a80:	e0bfed17 	ldw	r2,-76(fp)
}
81101a84:	e6fffe04 	addi	sp,fp,-8
81101a88:	dfc00317 	ldw	ra,12(sp)
81101a8c:	df000217 	ldw	fp,8(sp)
81101a90:	dc400117 	ldw	r17,4(sp)
81101a94:	dc000017 	ldw	r16,0(sp)
81101a98:	dec00404 	addi	sp,sp,16
81101a9c:	f800283a 	ret

81101aa0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101aa0:	deffe204 	addi	sp,sp,-120
81101aa4:	de00012e 	bgeu	sp,et,81101aac <bDdr2MemoryReadTest+0xc>
81101aa8:	003b68fa 	trap	3
81101aac:	dfc01d15 	stw	ra,116(sp)
81101ab0:	df001c15 	stw	fp,112(sp)
81101ab4:	dc401b15 	stw	r17,108(sp)
81101ab8:	dc001a15 	stw	r16,104(sp)
81101abc:	df001c04 	addi	fp,sp,112
81101ac0:	2005883a 	mov	r2,r4
81101ac4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101ac8:	00e04534 	movhi	r3,33044
81101acc:	18c2da04 	addi	r3,r3,2920
81101ad0:	00a04534 	movhi	r2,33044
81101ad4:	10b02e04 	addi	r2,r2,-16200
81101ad8:	1009883a 	mov	r4,r2
81101adc:	008009c4 	movi	r2,39
81101ae0:	100d883a 	mov	r6,r2
81101ae4:	200b883a 	mov	r5,r4
81101ae8:	1809883a 	mov	r4,r3
81101aec:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81101af0:	d0a04d17 	ldw	r2,-32460(gp)
81101af4:	01604534 	movhi	r5,33044
81101af8:	2942da04 	addi	r5,r5,2920
81101afc:	1009883a 	mov	r4,r2
81101b00:	111197c0 	call	8111197c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b04:	00800044 	movi	r2,1
81101b08:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10c00060 	cmpeqi	r3,r2,1
81101b14:	1800031e 	bne	r3,zero,81101b24 <bDdr2MemoryReadTest+0x84>
81101b18:	108000a0 	cmpeqi	r2,r2,2
81101b1c:	1000081e 	bne	r2,zero,81101b40 <bDdr2MemoryReadTest+0xa0>
81101b20:	00000e06 	br	81101b5c <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b24:	e0bffd03 	ldbu	r2,-12(fp)
81101b28:	1009883a 	mov	r4,r2
81101b2c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b30:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101b34:	00a00034 	movhi	r2,32768
81101b38:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b3c:	00001906 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b40:	e0bffd03 	ldbu	r2,-12(fp)
81101b44:	1009883a 	mov	r4,r2
81101b48:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b4c:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b50:	00a00034 	movhi	r2,32768
81101b54:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b58:	00001206 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101b5c:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b60:	00e04534 	movhi	r3,33044
81101b64:	18c2da04 	addi	r3,r3,2920
81101b68:	00a04534 	movhi	r2,33044
81101b6c:	10ae1604 	addi	r2,r2,-18344
81101b70:	1009883a 	mov	r4,r2
81101b74:	00800bc4 	movi	r2,47
81101b78:	100d883a 	mov	r6,r2
81101b7c:	200b883a 	mov	r5,r4
81101b80:	1809883a 	mov	r4,r3
81101b84:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b88:	d0a04d17 	ldw	r2,-32460(gp)
81101b8c:	01604534 	movhi	r5,33044
81101b90:	2942da04 	addi	r5,r5,2920
81101b94:	1009883a 	mov	r4,r2
81101b98:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
81101b9c:	e0bfe517 	ldw	r2,-108(fp)
81101ba0:	0000fc06 	br	81101f94 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101ba4:	e0bfe717 	ldw	r2,-100(fp)
81101ba8:	1004d53a 	srli	r2,r2,20
81101bac:	100d883a 	mov	r6,r2
81101bb0:	01604534 	movhi	r5,33044
81101bb4:	29703804 	addi	r5,r5,-16160
81101bb8:	01204534 	movhi	r4,33044
81101bbc:	2102da04 	addi	r4,r4,2920
81101bc0:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81101bc4:	d0a04d17 	ldw	r2,-32460(gp)
81101bc8:	01604534 	movhi	r5,33044
81101bcc:	2942da04 	addi	r5,r5,2920
81101bd0:	1009883a 	mov	r4,r2
81101bd4:	111197c0 	call	8111197c <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101bd8:	00804004 	movi	r2,256
81101bdc:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101be0:	00800104 	movi	r2,4
81101be4:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101be8:	e0ffec17 	ldw	r3,-80(fp)
81101bec:	e0bfef17 	ldw	r2,-68(fp)
81101bf0:	1885383a 	mul	r2,r3,r2
81101bf4:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bf8:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bfc:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c00:	e03fe815 	stw	zero,-96(fp)
81101c04:	00001506 	br	81101c5c <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c08:	e0ffe717 	ldw	r3,-100(fp)
81101c0c:	00b33374 	movhi	r2,52429
81101c10:	10b33344 	addi	r2,r2,-13107
81101c14:	1888383a 	mulxuu	r4,r3,r2
81101c18:	1885383a 	mul	r2,r3,r2
81101c1c:	1021883a 	mov	r16,r2
81101c20:	2023883a 	mov	r17,r4
81101c24:	8804d0fa 	srli	r2,r17,3
81101c28:	e0ffe817 	ldw	r3,-96(fp)
81101c2c:	18c00044 	addi	r3,r3,1
81101c30:	10c7383a 	mul	r3,r2,r3
81101c34:	e0bfe817 	ldw	r2,-96(fp)
81101c38:	1085883a 	add	r2,r2,r2
81101c3c:	1085883a 	add	r2,r2,r2
81101c40:	e13fe504 	addi	r4,fp,-108
81101c44:	2085883a 	add	r2,r4,r2
81101c48:	10800e04 	addi	r2,r2,56
81101c4c:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c50:	e0bfe817 	ldw	r2,-96(fp)
81101c54:	10800044 	addi	r2,r2,1
81101c58:	e0bfe815 	stw	r2,-96(fp)
81101c5c:	e0bfe817 	ldw	r2,-96(fp)
81101c60:	10800290 	cmplti	r2,r2,10
81101c64:	103fe81e 	bne	r2,zero,81101c08 <__reset+0xfb0e1c08>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c6c:	00e04534 	movhi	r3,33044
81101c70:	18c2da04 	addi	r3,r3,2920
81101c74:	00a04534 	movhi	r2,33044
81101c78:	10b03e04 	addi	r2,r2,-16136
81101c7c:	1009883a 	mov	r4,r2
81101c80:	008006c4 	movi	r2,27
81101c84:	100d883a 	mov	r6,r2
81101c88:	200b883a 	mov	r5,r4
81101c8c:	1809883a 	mov	r4,r3
81101c90:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81101c94:	d0a04d17 	ldw	r2,-32460(gp)
81101c98:	01604534 	movhi	r5,33044
81101c9c:	2942da04 	addi	r5,r5,2920
81101ca0:	1009883a 	mov	r4,r2
81101ca4:	111197c0 	call	8111197c <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101ca8:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101cac:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101cb0:	e0bfe617 	ldw	r2,-104(fp)
81101cb4:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101cb8:	00810004 	movi	r2,1024
81101cbc:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101cc0:	e0ffe917 	ldw	r3,-92(fp)
81101cc4:	e0bfef17 	ldw	r2,-68(fp)
81101cc8:	1885283a 	div	r2,r3,r2
81101ccc:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101cd0:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101cd4:	00006206 	br	81101e60 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101cd8:	e0bfed17 	ldw	r2,-76(fp)
81101cdc:	e0ffe717 	ldw	r3,-100(fp)
81101ce0:	1885c83a 	sub	r2,r3,r2
81101ce4:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ce8:	e0bfe917 	ldw	r2,-92(fp)
81101cec:	e0fff217 	ldw	r3,-56(fp)
81101cf0:	1880060e 	bge	r3,r2,81101d0c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101cf4:	e0bff217 	ldw	r2,-56(fp)
81101cf8:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cfc:	e0ffe917 	ldw	r3,-92(fp)
81101d00:	e0bfef17 	ldw	r2,-68(fp)
81101d04:	1885283a 	div	r2,r3,r2
81101d08:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d0c:	00a04534 	movhi	r2,33044
81101d10:	10831a04 	addi	r2,r2,3176
81101d14:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d18:	e03fe815 	stw	zero,-96(fp)
81101d1c:	00002b06 	br	81101dcc <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d20:	e0bfeb17 	ldw	r2,-84(fp)
81101d24:	10c00104 	addi	r3,r2,4
81101d28:	e0ffeb15 	stw	r3,-84(fp)
81101d2c:	10c00017 	ldw	r3,0(r2)
81101d30:	e0bfea17 	ldw	r2,-88(fp)
81101d34:	11000104 	addi	r4,r2,4
81101d38:	e13fea15 	stw	r4,-88(fp)
81101d3c:	10800017 	ldw	r2,0(r2)
81101d40:	18801f26 	beq	r3,r2,81101dc0 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d44:	e0bfeb17 	ldw	r2,-84(fp)
81101d48:	10bfff04 	addi	r2,r2,-4
81101d4c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d50:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d54:	00a04534 	movhi	r2,33044
81101d58:	10831a04 	addi	r2,r2,3176
81101d5c:	e0ffe817 	ldw	r3,-96(fp)
81101d60:	18c7883a 	add	r3,r3,r3
81101d64:	18c7883a 	add	r3,r3,r3
81101d68:	10c5883a 	add	r2,r2,r3
81101d6c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d70:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d74:	e0ffed17 	ldw	r3,-76(fp)
81101d78:	e0bfef17 	ldw	r2,-68(fp)
81101d7c:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d80:	e0bfe817 	ldw	r2,-96(fp)
81101d84:	1885883a 	add	r2,r3,r2
81101d88:	d8800015 	stw	r2,0(sp)
81101d8c:	280f883a 	mov	r7,r5
81101d90:	200d883a 	mov	r6,r4
81101d94:	01604534 	movhi	r5,33044
81101d98:	29704504 	addi	r5,r5,-16108
81101d9c:	01204534 	movhi	r4,33044
81101da0:	2102da04 	addi	r4,r4,2920
81101da4:	11130e40 	call	811130e4 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101da8:	d0a04d17 	ldw	r2,-32460(gp)
81101dac:	01604534 	movhi	r5,33044
81101db0:	2942da04 	addi	r5,r5,2920
81101db4:	1009883a 	mov	r4,r2
81101db8:	111197c0 	call	8111197c <fprintf>
#endif
				bSuccess = FALSE;
81101dbc:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101dc0:	e0bfe817 	ldw	r2,-96(fp)
81101dc4:	10800044 	addi	r2,r2,1
81101dc8:	e0bfe815 	stw	r2,-96(fp)
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	e0bfec17 	ldw	r2,-80(fp)
81101dd4:	1880020e 	bge	r3,r2,81101de0 <bDdr2MemoryReadTest+0x340>
81101dd8:	e0bfe517 	ldw	r2,-108(fp)
81101ddc:	103fd01e 	bne	r2,zero,81101d20 <__reset+0xfb0e1d20>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101de0:	e0ffed17 	ldw	r3,-76(fp)
81101de4:	e0bfe917 	ldw	r2,-92(fp)
81101de8:	1885883a 	add	r2,r3,r2
81101dec:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101df0:	e0bfee17 	ldw	r2,-72(fp)
81101df4:	10800288 	cmpgei	r2,r2,10
81101df8:	1000191e 	bne	r2,zero,81101e60 <bDdr2MemoryReadTest+0x3c0>
81101dfc:	e0bfee17 	ldw	r2,-72(fp)
81101e00:	1085883a 	add	r2,r2,r2
81101e04:	1085883a 	add	r2,r2,r2
81101e08:	e0ffe504 	addi	r3,fp,-108
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800e04 	addi	r2,r2,56
81101e14:	10800017 	ldw	r2,0(r2)
81101e18:	e0ffed17 	ldw	r3,-76(fp)
81101e1c:	18801036 	bltu	r3,r2,81101e60 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e20:	e0bfee17 	ldw	r2,-72(fp)
81101e24:	10800044 	addi	r2,r2,1
81101e28:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e2c:	e0bfee17 	ldw	r2,-72(fp)
81101e30:	108002a4 	muli	r2,r2,10
81101e34:	100d883a 	mov	r6,r2
81101e38:	01604534 	movhi	r5,33044
81101e3c:	29701a04 	addi	r5,r5,-16280
81101e40:	01204534 	movhi	r4,33044
81101e44:	2102da04 	addi	r4,r4,2920
81101e48:	11130e40 	call	811130e4 <sprintf>
			debug(fp, cDebugBuffer);
81101e4c:	d0a04d17 	ldw	r2,-32460(gp)
81101e50:	01604534 	movhi	r5,33044
81101e54:	2942da04 	addi	r5,r5,2920
81101e58:	1009883a 	mov	r4,r2
81101e5c:	111197c0 	call	8111197c <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e60:	e0bfe517 	ldw	r2,-108(fp)
81101e64:	10000326 	beq	r2,zero,81101e74 <bDdr2MemoryReadTest+0x3d4>
81101e68:	e0ffed17 	ldw	r3,-76(fp)
81101e6c:	e0bfe717 	ldw	r2,-100(fp)
81101e70:	18bf9936 	bltu	r3,r2,81101cd8 <__reset+0xfb0e1cd8>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e74:	00a04534 	movhi	r2,33044
81101e78:	1082da04 	addi	r2,r2,2920
81101e7c:	00c00284 	movi	r3,10
81101e80:	10c00005 	stb	r3,0(r2)
81101e84:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e88:	d0a04d17 	ldw	r2,-32460(gp)
81101e8c:	01604534 	movhi	r5,33044
81101e90:	2942da04 	addi	r5,r5,2920
81101e94:	1009883a 	mov	r4,r2
81101e98:	111197c0 	call	8111197c <fprintf>
81101e9c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101ea0:	e0bff117 	ldw	r2,-60(fp)
81101ea4:	1885c83a 	sub	r2,r3,r2
81101ea8:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101eac:	e0bfe517 	ldw	r2,-108(fp)
81101eb0:	10001e26 	beq	r2,zero,81101f2c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101eb4:	e13ff017 	ldw	r4,-64(fp)
81101eb8:	1110bb80 	call	81110bb8 <__floatsisf>
81101ebc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ec0:	d0a06a17 	ldw	r2,-32344(gp)
81101ec4:	1009883a 	mov	r4,r2
81101ec8:	1110ce40 	call	81110ce4 <__floatunsisf>
81101ecc:	1007883a 	mov	r3,r2
81101ed0:	180b883a 	mov	r5,r3
81101ed4:	8009883a 	mov	r4,r16
81101ed8:	111036c0 	call	8111036c <__divsf3>
81101edc:	1007883a 	mov	r3,r2
81101ee0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	11114fc0 	call	811114fc <__extendsfdf2>
81101eec:	1009883a 	mov	r4,r2
81101ef0:	180b883a 	mov	r5,r3
81101ef4:	d9400015 	stw	r5,0(sp)
81101ef8:	200f883a 	mov	r7,r4
81101efc:	e1bfe717 	ldw	r6,-100(fp)
81101f00:	01604534 	movhi	r5,33044
81101f04:	29705304 	addi	r5,r5,-16052
81101f08:	01204534 	movhi	r4,33044
81101f0c:	2102da04 	addi	r4,r4,2920
81101f10:	11130e40 	call	811130e4 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f14:	d0a04d17 	ldw	r2,-32460(gp)
81101f18:	01604534 	movhi	r5,33044
81101f1c:	2942da04 	addi	r5,r5,2920
81101f20:	1009883a 	mov	r4,r2
81101f24:	111197c0 	call	8111197c <fprintf>
81101f28:	00000f06 	br	81101f68 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f2c:	00e04534 	movhi	r3,33044
81101f30:	18c2da04 	addi	r3,r3,2920
81101f34:	00a04534 	movhi	r2,33044
81101f38:	10b05f04 	addi	r2,r2,-16004
81101f3c:	1009883a 	mov	r4,r2
81101f40:	00800544 	movi	r2,21
81101f44:	100d883a 	mov	r6,r2
81101f48:	200b883a 	mov	r5,r4
81101f4c:	1809883a 	mov	r4,r3
81101f50:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81101f54:	d0a04d17 	ldw	r2,-32460(gp)
81101f58:	01604534 	movhi	r5,33044
81101f5c:	2942da04 	addi	r5,r5,2920
81101f60:	1009883a 	mov	r4,r2
81101f64:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f68:	00a04534 	movhi	r2,33044
81101f6c:	1082da04 	addi	r2,r2,2920
81101f70:	00c00284 	movi	r3,10
81101f74:	10c00005 	stb	r3,0(r2)
81101f78:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f7c:	d0a04d17 	ldw	r2,-32460(gp)
81101f80:	01604534 	movhi	r5,33044
81101f84:	2942da04 	addi	r5,r5,2920
81101f88:	1009883a 	mov	r4,r2
81101f8c:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
81101f90:	e0bfe517 	ldw	r2,-108(fp)
}
81101f94:	e6fffe04 	addi	sp,fp,-8
81101f98:	dfc00317 	ldw	ra,12(sp)
81101f9c:	df000217 	ldw	fp,8(sp)
81101fa0:	dc400117 	ldw	r17,4(sp)
81101fa4:	dc000017 	ldw	r16,0(sp)
81101fa8:	dec00404 	addi	sp,sp,16
81101fac:	f800283a 	ret

81101fb0 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101fb0:	deffec04 	addi	sp,sp,-80
81101fb4:	de00012e 	bgeu	sp,et,81101fbc <bDdr2MemoryRandomWriteTest+0xc>
81101fb8:	003b68fa 	trap	3
81101fbc:	dfc01315 	stw	ra,76(sp)
81101fc0:	df001215 	stw	fp,72(sp)
81101fc4:	dcc01115 	stw	r19,68(sp)
81101fc8:	dc801015 	stw	r18,64(sp)
81101fcc:	dc400f15 	stw	r17,60(sp)
81101fd0:	dc000e15 	stw	r16,56(sp)
81101fd4:	df001204 	addi	fp,sp,72
81101fd8:	2005883a 	mov	r2,r4
81101fdc:	e17ffa15 	stw	r5,-24(fp)
81101fe0:	e1bffb15 	stw	r6,-20(fp)
81101fe4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101fe8:	00e04534 	movhi	r3,33044
81101fec:	18c2da04 	addi	r3,r3,2920
81101ff0:	00a04534 	movhi	r2,33044
81101ff4:	10b06504 	addi	r2,r2,-15980
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	00800bc4 	movi	r2,47
81102000:	100d883a 	mov	r6,r2
81102004:	200b883a 	mov	r5,r4
81102008:	1809883a 	mov	r4,r3
8110200c:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81102010:	d0a04d17 	ldw	r2,-32460(gp)
81102014:	01604534 	movhi	r5,33044
81102018:	2942da04 	addi	r5,r5,2920
8110201c:	1009883a 	mov	r4,r2
81102020:	111197c0 	call	8111197c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102024:	00800044 	movi	r2,1
81102028:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110202c:	e0bff903 	ldbu	r2,-28(fp)
81102030:	10c00060 	cmpeqi	r3,r2,1
81102034:	1800031e 	bne	r3,zero,81102044 <bDdr2MemoryRandomWriteTest+0x94>
81102038:	108000a0 	cmpeqi	r2,r2,2
8110203c:	1000081e 	bne	r2,zero,81102060 <bDdr2MemoryRandomWriteTest+0xb0>
81102040:	00000e06 	br	8110207c <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102044:	e0bff903 	ldbu	r2,-28(fp)
81102048:	1009883a 	mov	r4,r2
8110204c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102050:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102054:	00a00034 	movhi	r2,32768
81102058:	e0bff015 	stw	r2,-64(fp)
		break;
8110205c:	00001906 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102060:	e0bff903 	ldbu	r2,-28(fp)
81102064:	1009883a 	mov	r4,r2
81102068:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110206c:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00a00034 	movhi	r2,32768
81102074:	e0bff015 	stw	r2,-64(fp)
		break;
81102078:	00001206 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102080:	00e04534 	movhi	r3,33044
81102084:	18c2da04 	addi	r3,r3,2920
81102088:	00a04534 	movhi	r2,33044
8110208c:	10ae1604 	addi	r2,r2,-18344
81102090:	1009883a 	mov	r4,r2
81102094:	00800bc4 	movi	r2,47
81102098:	100d883a 	mov	r6,r2
8110209c:	200b883a 	mov	r5,r4
811020a0:	1809883a 	mov	r4,r3
811020a4:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811020a8:	d0a04d17 	ldw	r2,-32460(gp)
811020ac:	01604534 	movhi	r5,33044
811020b0:	2942da04 	addi	r5,r5,2920
811020b4:	1009883a 	mov	r4,r2
811020b8:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
811020bc:	e0bff417 	ldw	r2,-48(fp)
811020c0:	0000ce06 	br	811023fc <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811020c4:	e0bff017 	ldw	r2,-64(fp)
811020c8:	1004d53a 	srli	r2,r2,20
811020cc:	100d883a 	mov	r6,r2
811020d0:	01604534 	movhi	r5,33044
811020d4:	29700f04 	addi	r5,r5,-16324
811020d8:	01204534 	movhi	r4,33044
811020dc:	2102da04 	addi	r4,r4,2920
811020e0:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
811020e4:	d0a04d17 	ldw	r2,-32460(gp)
811020e8:	01604534 	movhi	r5,33044
811020ec:	2942da04 	addi	r5,r5,2920
811020f0:	1009883a 	mov	r4,r2
811020f4:	111197c0 	call	8111197c <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020f8:	d0a06b17 	ldw	r2,-32340(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020fc:	d0a03615 	stw	r2,-32552(gp)
	uliCurrentState = uliInitialState;
81102100:	d0a03617 	ldw	r2,-32552(gp)
81102104:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102108:	e0ffef17 	ldw	r3,-68(fp)
8110210c:	e0bff017 	ldw	r2,-64(fp)
81102110:	1885883a 	add	r2,r3,r2
81102114:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102118:	e0fff017 	ldw	r3,-64(fp)
8110211c:	00b33374 	movhi	r2,52429
81102120:	10b33344 	addi	r2,r2,-13107
81102124:	1888383a 	mulxuu	r4,r3,r2
81102128:	1885383a 	mul	r2,r3,r2
8110212c:	1025883a 	mov	r18,r2
81102130:	2027883a 	mov	r19,r4
81102134:	9806d13a 	srli	r3,r19,4
81102138:	e0bfef17 	ldw	r2,-68(fp)
8110213c:	1885883a 	add	r2,r3,r2
81102140:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
81102144:	00800144 	movi	r2,5
81102148:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
8110214c:	00e04534 	movhi	r3,33044
81102150:	18c2da04 	addi	r3,r3,2920
81102154:	00a04534 	movhi	r2,33044
81102158:	10b07104 	addi	r2,r2,-15932
8110215c:	1009883a 	mov	r4,r2
81102160:	00800584 	movi	r2,22
81102164:	100d883a 	mov	r6,r2
81102168:	200b883a 	mov	r5,r4
8110216c:	1809883a 	mov	r4,r3
81102170:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81102174:	d0a04d17 	ldw	r2,-32460(gp)
81102178:	01604534 	movhi	r5,33044
8110217c:	2942da04 	addi	r5,r5,2920
81102180:	1009883a 	mov	r4,r2
81102184:	111197c0 	call	8111197c <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800058 	cmpnei	r2,r2,1
81102190:	10000a1e 	bne	r2,zero,811021bc <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102194:	01604534 	movhi	r5,33044
81102198:	29707704 	addi	r5,r5,-15908
8110219c:	01204534 	movhi	r4,33044
811021a0:	2102da04 	addi	r4,r4,2920
811021a4:	11130e40 	call	811130e4 <sprintf>
		debug(fp, cDebugBuffer);
811021a8:	d0a04d17 	ldw	r2,-32460(gp)
811021ac:	01604534 	movhi	r5,33044
811021b0:	2942da04 	addi	r5,r5,2920
811021b4:	1009883a 	mov	r4,r2
811021b8:	111197c0 	call	8111197c <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
811021bc:	e03ff615 	stw	zero,-40(fp)
811021c0:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
811021c4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811021c8:	e0bfef17 	ldw	r2,-68(fp)
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	00002c06 	br	81102284 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811021d4:	e0bff804 	addi	r2,fp,-32
811021d8:	1009883a 	mov	r4,r2
811021dc:	11028bc0 	call	811028bc <uliXorshift32>
811021e0:	1007883a 	mov	r3,r2
811021e4:	e0bff117 	ldw	r2,-60(fp)
811021e8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021ec:	e0bffa17 	ldw	r2,-24(fp)
811021f0:	10800060 	cmpeqi	r2,r2,1
811021f4:	1009883a 	mov	r4,r2
811021f8:	e0bff117 	ldw	r2,-60(fp)
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885803a 	cmpltu	r2,r3,r2
81102204:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102208:	10803fcc 	andi	r2,r2,255
8110220c:	10001a26 	beq	r2,zero,81102278 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102210:	e0bff303 	ldbu	r2,-52(fp)
81102214:	100d883a 	mov	r6,r2
81102218:	01604534 	movhi	r5,33044
8110221c:	29707904 	addi	r5,r5,-15900
81102220:	01204534 	movhi	r4,33044
81102224:	2102da04 	addi	r4,r4,2920
81102228:	11130e40 	call	811130e4 <sprintf>
			debug(fp, cDebugBuffer);
8110222c:	d0a04d17 	ldw	r2,-32460(gp)
81102230:	01604534 	movhi	r5,33044
81102234:	2942da04 	addi	r5,r5,2920
81102238:	1009883a 	mov	r4,r2
8110223c:	111197c0 	call	8111197c <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102240:	e0fff017 	ldw	r3,-64(fp)
81102244:	00b33374 	movhi	r2,52429
81102248:	10b33344 	addi	r2,r2,-13107
8110224c:	1888383a 	mulxuu	r4,r3,r2
81102250:	1885383a 	mul	r2,r3,r2
81102254:	1021883a 	mov	r16,r2
81102258:	2023883a 	mov	r17,r4
8110225c:	8804d13a 	srli	r2,r17,4
81102260:	e0fff217 	ldw	r3,-56(fp)
81102264:	1885883a 	add	r2,r3,r2
81102268:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
8110226c:	e0bff303 	ldbu	r2,-52(fp)
81102270:	10800144 	addi	r2,r2,5
81102274:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102278:	e0bff117 	ldw	r2,-60(fp)
8110227c:	10800104 	addi	r2,r2,4
81102280:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102284:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102288:	e0bff517 	ldw	r2,-44(fp)
8110228c:	18bfd136 	bltu	r3,r2,811021d4 <__reset+0xfb0e21d4>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102290:	11271c00 	call	811271c0 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102294:	e0bffa17 	ldw	r2,-24(fp)
81102298:	10800058 	cmpnei	r2,r2,1
8110229c:	10000a1e 	bne	r2,zero,811022c8 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811022a0:	01604534 	movhi	r5,33044
811022a4:	29707c04 	addi	r5,r5,-15888
811022a8:	01204534 	movhi	r4,33044
811022ac:	2102da04 	addi	r4,r4,2920
811022b0:	11130e40 	call	811130e4 <sprintf>
		debug(fp, cDebugBuffer);
811022b4:	d0a04d17 	ldw	r2,-32460(gp)
811022b8:	01604534 	movhi	r5,33044
811022bc:	2942da04 	addi	r5,r5,2920
811022c0:	1009883a 	mov	r4,r2
811022c4:	111197c0 	call	8111197c <fprintf>
#endif
	}

	if (bSuccess) {
811022c8:	e0bff417 	ldw	r2,-48(fp)
811022cc:	10003126 	beq	r2,zero,81102394 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
811022d0:	e0bffb17 	ldw	r2,-20(fp)
811022d4:	10800058 	cmpnei	r2,r2,1
811022d8:	1000221e 	bne	r2,zero,81102364 <bDdr2MemoryRandomWriteTest+0x3b4>
811022dc:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811022e0:	e0bff717 	ldw	r2,-36(fp)
811022e4:	1885c83a 	sub	r2,r3,r2
811022e8:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022ec:	e13ff617 	ldw	r4,-40(fp)
811022f0:	1110bb80 	call	81110bb8 <__floatsisf>
811022f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022f8:	d0a06a17 	ldw	r2,-32344(gp)
811022fc:	1009883a 	mov	r4,r2
81102300:	1110ce40 	call	81110ce4 <__floatunsisf>
81102304:	1007883a 	mov	r3,r2
81102308:	180b883a 	mov	r5,r3
8110230c:	8009883a 	mov	r4,r16
81102310:	111036c0 	call	8111036c <__divsf3>
81102314:	1007883a 	mov	r3,r2
81102318:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110231c:	1009883a 	mov	r4,r2
81102320:	11114fc0 	call	811114fc <__extendsfdf2>
81102324:	1009883a 	mov	r4,r2
81102328:	180b883a 	mov	r5,r3
8110232c:	d9400015 	stw	r5,0(sp)
81102330:	200f883a 	mov	r7,r4
81102334:	e1bff017 	ldw	r6,-64(fp)
81102338:	01604534 	movhi	r5,33044
8110233c:	29707f04 	addi	r5,r5,-15876
81102340:	01204534 	movhi	r4,33044
81102344:	2102da04 	addi	r4,r4,2920
81102348:	11130e40 	call	811130e4 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
8110234c:	d0a04d17 	ldw	r2,-32460(gp)
81102350:	01604534 	movhi	r5,33044
81102354:	2942da04 	addi	r5,r5,2920
81102358:	1009883a 	mov	r4,r2
8110235c:	111197c0 	call	8111197c <fprintf>
81102360:	00001b06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102364:	e1bff017 	ldw	r6,-64(fp)
81102368:	01604534 	movhi	r5,33044
8110236c:	29708b04 	addi	r5,r5,-15828
81102370:	01204534 	movhi	r4,33044
81102374:	2102da04 	addi	r4,r4,2920
81102378:	11130e40 	call	811130e4 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8110237c:	d0a04d17 	ldw	r2,-32460(gp)
81102380:	01604534 	movhi	r5,33044
81102384:	2942da04 	addi	r5,r5,2920
81102388:	1009883a 	mov	r4,r2
8110238c:	111197c0 	call	8111197c <fprintf>
81102390:	00000f06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102394:	00e04534 	movhi	r3,33044
81102398:	18c2da04 	addi	r3,r3,2920
8110239c:	00a04534 	movhi	r2,33044
811023a0:	10b02804 	addi	r2,r2,-16224
811023a4:	1009883a 	mov	r4,r2
811023a8:	00800584 	movi	r2,22
811023ac:	100d883a 	mov	r6,r2
811023b0:	200b883a 	mov	r5,r4
811023b4:	1809883a 	mov	r4,r3
811023b8:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
811023bc:	d0a04d17 	ldw	r2,-32460(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	2942da04 	addi	r5,r5,2920
811023c8:	1009883a 	mov	r4,r2
811023cc:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811023d0:	00a04534 	movhi	r2,33044
811023d4:	1082da04 	addi	r2,r2,2920
811023d8:	00c00284 	movi	r3,10
811023dc:	10c00005 	stb	r3,0(r2)
811023e0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811023e4:	d0a04d17 	ldw	r2,-32460(gp)
811023e8:	01604534 	movhi	r5,33044
811023ec:	2942da04 	addi	r5,r5,2920
811023f0:	1009883a 	mov	r4,r2
811023f4:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
811023f8:	e0bff417 	ldw	r2,-48(fp)
}
811023fc:	e6fffc04 	addi	sp,fp,-16
81102400:	dfc00517 	ldw	ra,20(sp)
81102404:	df000417 	ldw	fp,16(sp)
81102408:	dcc00317 	ldw	r19,12(sp)
8110240c:	dc800217 	ldw	r18,8(sp)
81102410:	dc400117 	ldw	r17,4(sp)
81102414:	dc000017 	ldw	r16,0(sp)
81102418:	dec00604 	addi	sp,sp,24
8110241c:	f800283a 	ret

81102420 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102420:	deffec04 	addi	sp,sp,-80
81102424:	de00012e 	bgeu	sp,et,8110242c <bDdr2MemoryRandomReadTest+0xc>
81102428:	003b68fa 	trap	3
8110242c:	dfc01315 	stw	ra,76(sp)
81102430:	df001215 	stw	fp,72(sp)
81102434:	dcc01115 	stw	r19,68(sp)
81102438:	dc801015 	stw	r18,64(sp)
8110243c:	dc400f15 	stw	r17,60(sp)
81102440:	dc000e15 	stw	r16,56(sp)
81102444:	df001204 	addi	fp,sp,72
81102448:	2005883a 	mov	r2,r4
8110244c:	e17ffa15 	stw	r5,-24(fp)
81102450:	e1bffb15 	stw	r6,-20(fp)
81102454:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102458:	00e04534 	movhi	r3,33044
8110245c:	18c2da04 	addi	r3,r3,2920
81102460:	00a04534 	movhi	r2,33044
81102464:	10b09504 	addi	r2,r2,-15788
81102468:	1009883a 	mov	r4,r2
8110246c:	00800b84 	movi	r2,46
81102470:	100d883a 	mov	r6,r2
81102474:	200b883a 	mov	r5,r4
81102478:	1809883a 	mov	r4,r3
8110247c:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81102480:	d0a04d17 	ldw	r2,-32460(gp)
81102484:	01604534 	movhi	r5,33044
81102488:	2942da04 	addi	r5,r5,2920
8110248c:	1009883a 	mov	r4,r2
81102490:	111197c0 	call	8111197c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102494:	00800044 	movi	r2,1
81102498:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110249c:	e0bff903 	ldbu	r2,-28(fp)
811024a0:	10c00060 	cmpeqi	r3,r2,1
811024a4:	1800031e 	bne	r3,zero,811024b4 <bDdr2MemoryRandomReadTest+0x94>
811024a8:	108000a0 	cmpeqi	r2,r2,2
811024ac:	1000081e 	bne	r2,zero,811024d0 <bDdr2MemoryRandomReadTest+0xb0>
811024b0:	00000e06 	br	811024ec <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024b4:	e0bff903 	ldbu	r2,-28(fp)
811024b8:	1009883a 	mov	r4,r2
811024bc:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024c0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811024c4:	00a00034 	movhi	r2,32768
811024c8:	e0bff115 	stw	r2,-60(fp)
		break;
811024cc:	00001906 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024d0:	e0bff903 	ldbu	r2,-28(fp)
811024d4:	1009883a 	mov	r4,r2
811024d8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811024e0:	00a00034 	movhi	r2,32768
811024e4:	e0bff115 	stw	r2,-60(fp)
		break;
811024e8:	00001206 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
811024ec:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811024f0:	00e04534 	movhi	r3,33044
811024f4:	18c2da04 	addi	r3,r3,2920
811024f8:	00a04534 	movhi	r2,33044
811024fc:	10ae1604 	addi	r2,r2,-18344
81102500:	1009883a 	mov	r4,r2
81102504:	00800bc4 	movi	r2,47
81102508:	100d883a 	mov	r6,r2
8110250c:	200b883a 	mov	r5,r4
81102510:	1809883a 	mov	r4,r3
81102514:	111297c0 	call	8111297c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102518:	d0a04d17 	ldw	r2,-32460(gp)
8110251c:	01604534 	movhi	r5,33044
81102520:	2942da04 	addi	r5,r5,2920
81102524:	1009883a 	mov	r4,r2
81102528:	111197c0 	call	8111197c <fprintf>
		;
#endif
		return bSuccess;
8110252c:	e0bfef17 	ldw	r2,-68(fp)
81102530:	0000d906 	br	81102898 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102534:	e0bff117 	ldw	r2,-60(fp)
81102538:	1004d53a 	srli	r2,r2,20
8110253c:	100d883a 	mov	r6,r2
81102540:	01604534 	movhi	r5,33044
81102544:	29700f04 	addi	r5,r5,-16324
81102548:	01204534 	movhi	r4,33044
8110254c:	2102da04 	addi	r4,r4,2920
81102550:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81102554:	d0a04d17 	ldw	r2,-32460(gp)
81102558:	01604534 	movhi	r5,33044
8110255c:	2942da04 	addi	r5,r5,2920
81102560:	1009883a 	mov	r4,r2
81102564:	111197c0 	call	8111197c <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102568:	d0a03617 	ldw	r2,-32552(gp)
8110256c:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102570:	e0fff017 	ldw	r3,-64(fp)
81102574:	e0bff117 	ldw	r2,-60(fp)
81102578:	1885883a 	add	r2,r3,r2
8110257c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102580:	e0fff117 	ldw	r3,-60(fp)
81102584:	00b33374 	movhi	r2,52429
81102588:	10b33344 	addi	r2,r2,-13107
8110258c:	1888383a 	mulxuu	r4,r3,r2
81102590:	1885383a 	mul	r2,r3,r2
81102594:	1025883a 	mov	r18,r2
81102598:	2027883a 	mov	r19,r4
8110259c:	9806d13a 	srli	r3,r19,4
811025a0:	e0bff017 	ldw	r2,-64(fp)
811025a4:	1885883a 	add	r2,r3,r2
811025a8:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
811025ac:	00800144 	movi	r2,5
811025b0:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
811025b4:	00e04534 	movhi	r3,33044
811025b8:	18c2da04 	addi	r3,r3,2920
811025bc:	00a04534 	movhi	r2,33044
811025c0:	10b0a104 	addi	r2,r2,-15740
811025c4:	1009883a 	mov	r4,r2
811025c8:	00800604 	movi	r2,24
811025cc:	100d883a 	mov	r6,r2
811025d0:	200b883a 	mov	r5,r4
811025d4:	1809883a 	mov	r4,r3
811025d8:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
811025dc:	d0a04d17 	ldw	r2,-32460(gp)
811025e0:	01604534 	movhi	r5,33044
811025e4:	2942da04 	addi	r5,r5,2920
811025e8:	1009883a 	mov	r4,r2
811025ec:	111197c0 	call	8111197c <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811025f0:	e0bffa17 	ldw	r2,-24(fp)
811025f4:	10800058 	cmpnei	r2,r2,1
811025f8:	10000a1e 	bne	r2,zero,81102624 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025fc:	01604534 	movhi	r5,33044
81102600:	29707704 	addi	r5,r5,-15908
81102604:	01204534 	movhi	r4,33044
81102608:	2102da04 	addi	r4,r4,2920
8110260c:	11130e40 	call	811130e4 <sprintf>
		debug(fp, cDebugBuffer);
81102610:	d0a04d17 	ldw	r2,-32460(gp)
81102614:	01604534 	movhi	r5,33044
81102618:	2942da04 	addi	r5,r5,2920
8110261c:	1009883a 	mov	r4,r2
81102620:	111197c0 	call	8111197c <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102624:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102628:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
8110262c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
81102630:	e0bff017 	ldw	r2,-64(fp)
81102634:	e0bff215 	stw	r2,-56(fp)
81102638:	00003a06 	br	81102724 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
8110263c:	e0bff804 	addi	r2,fp,-32
81102640:	1009883a 	mov	r4,r2
81102644:	11028bc0 	call	811028bc <uliXorshift32>
81102648:	1007883a 	mov	r3,r2
8110264c:	e0bff217 	ldw	r2,-56(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	18801026 	beq	r3,r2,81102698 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
81102658:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
8110265c:	e0bffa17 	ldw	r2,-24(fp)
81102660:	10800058 	cmpnei	r2,r2,1
81102664:	10000c1e 	bne	r2,zero,81102698 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102668:	e0bff217 	ldw	r2,-56(fp)
8110266c:	100d883a 	mov	r6,r2
81102670:	01604534 	movhi	r5,33044
81102674:	2970a704 	addi	r5,r5,-15716
81102678:	01204534 	movhi	r4,33044
8110267c:	2102da04 	addi	r4,r4,2920
81102680:	11130e40 	call	811130e4 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102684:	d0a04d17 	ldw	r2,-32460(gp)
81102688:	01604534 	movhi	r5,33044
8110268c:	2942da04 	addi	r5,r5,2920
81102690:	1009883a 	mov	r4,r2
81102694:	111197c0 	call	8111197c <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102698:	e0bffa17 	ldw	r2,-24(fp)
8110269c:	10800058 	cmpnei	r2,r2,1
811026a0:	10001d1e 	bne	r2,zero,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811026a4:	e0bff217 	ldw	r2,-56(fp)
811026a8:	e0fff317 	ldw	r3,-52(fp)
811026ac:	18801a2e 	bgeu	r3,r2,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811026b0:	e0bff403 	ldbu	r2,-48(fp)
811026b4:	100d883a 	mov	r6,r2
811026b8:	01604534 	movhi	r5,33044
811026bc:	29707904 	addi	r5,r5,-15900
811026c0:	01204534 	movhi	r4,33044
811026c4:	2102da04 	addi	r4,r4,2920
811026c8:	11130e40 	call	811130e4 <sprintf>
			debug(fp, cDebugBuffer);
811026cc:	d0a04d17 	ldw	r2,-32460(gp)
811026d0:	01604534 	movhi	r5,33044
811026d4:	2942da04 	addi	r5,r5,2920
811026d8:	1009883a 	mov	r4,r2
811026dc:	111197c0 	call	8111197c <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811026e0:	e0fff117 	ldw	r3,-60(fp)
811026e4:	00b33374 	movhi	r2,52429
811026e8:	10b33344 	addi	r2,r2,-13107
811026ec:	1888383a 	mulxuu	r4,r3,r2
811026f0:	1885383a 	mul	r2,r3,r2
811026f4:	1021883a 	mov	r16,r2
811026f8:	2023883a 	mov	r17,r4
811026fc:	8804d13a 	srli	r2,r17,4
81102700:	e0fff317 	ldw	r3,-52(fp)
81102704:	1885883a 	add	r2,r3,r2
81102708:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110270c:	e0bff403 	ldbu	r2,-48(fp)
81102710:	10800144 	addi	r2,r2,5
81102714:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102718:	e0bff217 	ldw	r2,-56(fp)
8110271c:	10800104 	addi	r2,r2,4
81102720:	e0bff215 	stw	r2,-56(fp)
81102724:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102728:	e0bff517 	ldw	r2,-44(fp)
8110272c:	18bfc336 	bltu	r3,r2,8110263c <__reset+0xfb0e263c>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81102730:	e0bffa17 	ldw	r2,-24(fp)
81102734:	10800058 	cmpnei	r2,r2,1
81102738:	10000a1e 	bne	r2,zero,81102764 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110273c:	01604534 	movhi	r5,33044
81102740:	29707c04 	addi	r5,r5,-15888
81102744:	01204534 	movhi	r4,33044
81102748:	2102da04 	addi	r4,r4,2920
8110274c:	11130e40 	call	811130e4 <sprintf>
		debug(fp, cDebugBuffer);
81102750:	d0a04d17 	ldw	r2,-32460(gp)
81102754:	01604534 	movhi	r5,33044
81102758:	2942da04 	addi	r5,r5,2920
8110275c:	1009883a 	mov	r4,r2
81102760:	111197c0 	call	8111197c <fprintf>
#endif
	}

	if (bSuccess) {
81102764:	e0bfef17 	ldw	r2,-68(fp)
81102768:	10003126 	beq	r2,zero,81102830 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
8110276c:	e0bffb17 	ldw	r2,-20(fp)
81102770:	10800058 	cmpnei	r2,r2,1
81102774:	1000221e 	bne	r2,zero,81102800 <bDdr2MemoryRandomReadTest+0x3e0>
81102778:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110277c:	e0bff717 	ldw	r2,-36(fp)
81102780:	1885c83a 	sub	r2,r3,r2
81102784:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102788:	e13ff617 	ldw	r4,-40(fp)
8110278c:	1110bb80 	call	81110bb8 <__floatsisf>
81102790:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102794:	d0a06a17 	ldw	r2,-32344(gp)
81102798:	1009883a 	mov	r4,r2
8110279c:	1110ce40 	call	81110ce4 <__floatunsisf>
811027a0:	1007883a 	mov	r3,r2
811027a4:	180b883a 	mov	r5,r3
811027a8:	8009883a 	mov	r4,r16
811027ac:	111036c0 	call	8111036c <__divsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811027b8:	1009883a 	mov	r4,r2
811027bc:	11114fc0 	call	811114fc <__extendsfdf2>
811027c0:	1009883a 	mov	r4,r2
811027c4:	180b883a 	mov	r5,r3
811027c8:	d9400015 	stw	r5,0(sp)
811027cc:	200f883a 	mov	r7,r4
811027d0:	e1bff117 	ldw	r6,-60(fp)
811027d4:	01604534 	movhi	r5,33044
811027d8:	2970af04 	addi	r5,r5,-15684
811027dc:	01204534 	movhi	r4,33044
811027e0:	2102da04 	addi	r4,r4,2920
811027e4:	11130e40 	call	811130e4 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811027e8:	d0a04d17 	ldw	r2,-32460(gp)
811027ec:	01604534 	movhi	r5,33044
811027f0:	2942da04 	addi	r5,r5,2920
811027f4:	1009883a 	mov	r4,r2
811027f8:	111197c0 	call	8111197c <fprintf>
811027fc:	00001b06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102800:	e1bff117 	ldw	r6,-60(fp)
81102804:	01604534 	movhi	r5,33044
81102808:	2970bb04 	addi	r5,r5,-15636
8110280c:	01204534 	movhi	r4,33044
81102810:	2102da04 	addi	r4,r4,2920
81102814:	11130e40 	call	811130e4 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102818:	d0a04d17 	ldw	r2,-32460(gp)
8110281c:	01604534 	movhi	r5,33044
81102820:	2942da04 	addi	r5,r5,2920
81102824:	1009883a 	mov	r4,r2
81102828:	111197c0 	call	8111197c <fprintf>
8110282c:	00000f06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81102830:	00e04534 	movhi	r3,33044
81102834:	18c2da04 	addi	r3,r3,2920
81102838:	00a04534 	movhi	r2,33044
8110283c:	10b05f04 	addi	r2,r2,-16004
81102840:	1009883a 	mov	r4,r2
81102844:	00800544 	movi	r2,21
81102848:	100d883a 	mov	r6,r2
8110284c:	200b883a 	mov	r5,r4
81102850:	1809883a 	mov	r4,r3
81102854:	111297c0 	call	8111297c <memcpy>
		debug(fp, cDebugBuffer);
81102858:	d0a04d17 	ldw	r2,-32460(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	2942da04 	addi	r5,r5,2920
81102864:	1009883a 	mov	r4,r2
81102868:	111197c0 	call	8111197c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110286c:	00a04534 	movhi	r2,33044
81102870:	1082da04 	addi	r2,r2,2920
81102874:	00c00284 	movi	r3,10
81102878:	10c00005 	stb	r3,0(r2)
8110287c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102880:	d0a04d17 	ldw	r2,-32460(gp)
81102884:	01604534 	movhi	r5,33044
81102888:	2942da04 	addi	r5,r5,2920
8110288c:	1009883a 	mov	r4,r2
81102890:	111197c0 	call	8111197c <fprintf>
#endif

	return bSuccess;
81102894:	e0bfef17 	ldw	r2,-68(fp)
}
81102898:	e6fffc04 	addi	sp,fp,-16
8110289c:	dfc00517 	ldw	ra,20(sp)
811028a0:	df000417 	ldw	fp,16(sp)
811028a4:	dcc00317 	ldw	r19,12(sp)
811028a8:	dc800217 	ldw	r18,8(sp)
811028ac:	dc400117 	ldw	r17,4(sp)
811028b0:	dc000017 	ldw	r16,0(sp)
811028b4:	dec00604 	addi	sp,sp,24
811028b8:	f800283a 	ret

811028bc <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
811028bc:	defffd04 	addi	sp,sp,-12
811028c0:	de00012e 	bgeu	sp,et,811028c8 <uliXorshift32+0xc>
811028c4:	003b68fa 	trap	3
811028c8:	df000215 	stw	fp,8(sp)
811028cc:	df000204 	addi	fp,sp,8
811028d0:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
811028d4:	e0bfff17 	ldw	r2,-4(fp)
811028d8:	10800017 	ldw	r2,0(r2)
811028dc:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
811028e0:	e0bffe17 	ldw	r2,-8(fp)
811028e4:	1004937a 	slli	r2,r2,13
811028e8:	e0fffe17 	ldw	r3,-8(fp)
811028ec:	1884f03a 	xor	r2,r3,r2
811028f0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
811028f4:	e0bffe17 	ldw	r2,-8(fp)
811028f8:	1004d47a 	srli	r2,r2,17
811028fc:	e0fffe17 	ldw	r3,-8(fp)
81102900:	1884f03a 	xor	r2,r3,r2
81102904:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102908:	e0bffe17 	ldw	r2,-8(fp)
8110290c:	1004917a 	slli	r2,r2,5
81102910:	e0fffe17 	ldw	r3,-8(fp)
81102914:	1884f03a 	xor	r2,r3,r2
81102918:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110291c:	e0bfff17 	ldw	r2,-4(fp)
81102920:	e0fffe17 	ldw	r3,-8(fp)
81102924:	10c00015 	stw	r3,0(r2)

	return uliX;
81102928:	e0bffe17 	ldw	r2,-8(fp)
}
8110292c:	e037883a 	mov	sp,fp
81102930:	df000017 	ldw	fp,0(sp)
81102934:	dec00104 	addi	sp,sp,4
81102938:	f800283a 	ret

8110293c <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
8110293c:	defffb04 	addi	sp,sp,-20
81102940:	de00012e 	bgeu	sp,et,81102948 <DMA_OPEN_DEVICE+0xc>
81102944:	003b68fa 	trap	3
81102948:	dfc00415 	stw	ra,16(sp)
8110294c:	df000315 	stw	fp,12(sp)
81102950:	df000304 	addi	fp,sp,12
81102954:	e13ffe15 	stw	r4,-8(fp)
81102958:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110295c:	00800044 	movi	r2,1
81102960:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102964:	e13fff17 	ldw	r4,-4(fp)
81102968:	1139ec00 	call	81139ec0 <alt_msgdma_open>
8110296c:	1007883a 	mov	r3,r2
81102970:	e0bffe17 	ldw	r2,-8(fp)
81102974:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	10800017 	ldw	r2,0(r2)
81102980:	1000011e 	bne	r2,zero,81102988 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81102984:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81102988:	e0bffd17 	ldw	r2,-12(fp)
}
8110298c:	e037883a 	mov	sp,fp
81102990:	dfc00117 	ldw	ra,4(sp)
81102994:	df000017 	ldw	fp,0(sp)
81102998:	dec00204 	addi	sp,sp,8
8110299c:	f800283a 	ret

811029a0 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
811029a0:	defffc04 	addi	sp,sp,-16
811029a4:	de00012e 	bgeu	sp,et,811029ac <DMA_CONFIG+0xc>
811029a8:	003b68fa 	trap	3
811029ac:	df000315 	stw	fp,12(sp)
811029b0:	df000304 	addi	fp,sp,12
811029b4:	e13ffe15 	stw	r4,-8(fp)
811029b8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029bc:	00800044 	movi	r2,1
811029c0:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	10800317 	ldw	r2,12(r2)
811029cc:	10800104 	addi	r2,r2,4
811029d0:	e0ffff17 	ldw	r3,-4(fp)
811029d4:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811029d8:	e0bffd17 	ldw	r2,-12(fp)
}
811029dc:	e037883a 	mov	sp,fp
811029e0:	df000017 	ldw	fp,0(sp)
811029e4:	dec00104 	addi	sp,sp,4
811029e8:	f800283a 	ret

811029ec <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811029ec:	defffd04 	addi	sp,sp,-12
811029f0:	de00012e 	bgeu	sp,et,811029f8 <DMA_BUSY+0xc>
811029f4:	003b68fa 	trap	3
811029f8:	df000215 	stw	fp,8(sp)
811029fc:	df000204 	addi	fp,sp,8
81102a00:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a04:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a08:	e0bfff17 	ldw	r2,-4(fp)
81102a0c:	10800317 	ldw	r2,12(r2)
81102a10:	10800037 	ldwio	r2,0(r2)
81102a14:	1080004c 	andi	r2,r2,1
81102a18:	10000226 	beq	r2,zero,81102a24 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a1c:	00800044 	movi	r2,1
81102a20:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a24:	e0bffe17 	ldw	r2,-8(fp)
}
81102a28:	e037883a 	mov	sp,fp
81102a2c:	df000017 	ldw	fp,0(sp)
81102a30:	dec00104 	addi	sp,sp,4
81102a34:	f800283a 	ret

81102a38 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102a38:	defffd04 	addi	sp,sp,-12
81102a3c:	de00012e 	bgeu	sp,et,81102a44 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102a40:	003b68fa 	trap	3
81102a44:	df000215 	stw	fp,8(sp)
81102a48:	df000204 	addi	fp,sp,8
81102a4c:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102a50:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102a54:	e0bfff17 	ldw	r2,-4(fp)
81102a58:	10800317 	ldw	r2,12(r2)
81102a5c:	10800037 	ldwio	r2,0(r2)
81102a60:	1080010c 	andi	r2,r2,4
81102a64:	10000226 	beq	r2,zero,81102a70 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102a68:	00800044 	movi	r2,1
81102a6c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102a70:	e0bffe17 	ldw	r2,-8(fp)
}
81102a74:	e037883a 	mov	sp,fp
81102a78:	df000017 	ldw	fp,0(sp)
81102a7c:	dec00104 	addi	sp,sp,4
81102a80:	f800283a 	ret

81102a84 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102a84:	defffd04 	addi	sp,sp,-12
81102a88:	de00012e 	bgeu	sp,et,81102a90 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102a8c:	003b68fa 	trap	3
81102a90:	df000215 	stw	fp,8(sp)
81102a94:	df000204 	addi	fp,sp,8
81102a98:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102a9c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102aa0:	e0bfff17 	ldw	r2,-4(fp)
81102aa4:	10800317 	ldw	r2,12(r2)
81102aa8:	10800037 	ldwio	r2,0(r2)
81102aac:	1080008c 	andi	r2,r2,2
81102ab0:	10000226 	beq	r2,zero,81102abc <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102ab4:	00800044 	movi	r2,1
81102ab8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102abc:	e0bffe17 	ldw	r2,-8(fp)
}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	de00012e 	bgeu	sp,et,81102adc <DMA_DISPATCHER_STOP+0xc>
81102ad8:	003b68fa 	trap	3
81102adc:	dfc00515 	stw	ra,20(sp)
81102ae0:	df000415 	stw	fp,16(sp)
81102ae4:	df000404 	addi	fp,sp,16
81102ae8:	e13ffd15 	stw	r4,-12(fp)
81102aec:	e17ffe15 	stw	r5,-8(fp)
81102af0:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102af4:	00800044 	movi	r2,1
81102af8:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102afc:	e0bffd17 	ldw	r2,-12(fp)
81102b00:	10800317 	ldw	r2,12(r2)
81102b04:	10800104 	addi	r2,r2,4
81102b08:	00c00044 	movi	r3,1
81102b0c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b10:	e0bffe17 	ldw	r2,-8(fp)
81102b14:	10800058 	cmpnei	r2,r2,1
81102b18:	10000e1e 	bne	r2,zero,81102b54 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b1c:	00000706 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b20:	e0bfff17 	ldw	r2,-4(fp)
81102b24:	1000031e 	bne	r2,zero,81102b34 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b28:	01000044 	movi	r4,1
81102b2c:	1127e440 	call	81127e44 <usleep>
81102b30:	00000206 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102b34:	e13fff17 	ldw	r4,-4(fp)
81102b38:	1127e440 	call	81127e44 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b3c:	e0bffd17 	ldw	r2,-12(fp)
81102b40:	10800317 	ldw	r2,12(r2)
81102b44:	10800037 	ldwio	r2,0(r2)
81102b48:	1080080c 	andi	r2,r2,32
81102b4c:	103ff41e 	bne	r2,zero,81102b20 <__reset+0xfb0e2b20>
81102b50:	00000206 	br	81102b5c <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102b54:	e0bffc17 	ldw	r2,-16(fp)
81102b58:	00000106 	br	81102b60 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102b5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102b60:	e037883a 	mov	sp,fp
81102b64:	dfc00117 	ldw	ra,4(sp)
81102b68:	df000017 	ldw	fp,0(sp)
81102b6c:	dec00204 	addi	sp,sp,8
81102b70:	f800283a 	ret

81102b74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b74:	defffa04 	addi	sp,sp,-24
81102b78:	de00012e 	bgeu	sp,et,81102b80 <DMA_DISPATCHER_RESET+0xc>
81102b7c:	003b68fa 	trap	3
81102b80:	dfc00515 	stw	ra,20(sp)
81102b84:	df000415 	stw	fp,16(sp)
81102b88:	df000404 	addi	fp,sp,16
81102b8c:	e13ffd15 	stw	r4,-12(fp)
81102b90:	e17ffe15 	stw	r5,-8(fp)
81102b94:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b98:	00800044 	movi	r2,1
81102b9c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102ba0:	e0bffd17 	ldw	r2,-12(fp)
81102ba4:	10800317 	ldw	r2,12(r2)
81102ba8:	10800104 	addi	r2,r2,4
81102bac:	00c00084 	movi	r3,2
81102bb0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102bb4:	e0bffe17 	ldw	r2,-8(fp)
81102bb8:	10800058 	cmpnei	r2,r2,1
81102bbc:	10000e1e 	bne	r2,zero,81102bf8 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102bc0:	00000706 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102bc4:	e0bfff17 	ldw	r2,-4(fp)
81102bc8:	1000031e 	bne	r2,zero,81102bd8 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102bcc:	01000044 	movi	r4,1
81102bd0:	1127e440 	call	81127e44 <usleep>
81102bd4:	00000206 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102bd8:	e13fff17 	ldw	r4,-4(fp)
81102bdc:	1127e440 	call	81127e44 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102be0:	e0bffd17 	ldw	r2,-12(fp)
81102be4:	10800317 	ldw	r2,12(r2)
81102be8:	10800037 	ldwio	r2,0(r2)
81102bec:	1080100c 	andi	r2,r2,64
81102bf0:	103ff41e 	bne	r2,zero,81102bc4 <__reset+0xfb0e2bc4>
81102bf4:	00000206 	br	81102c00 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	00000106 	br	81102c04 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c18:	defff604 	addi	sp,sp,-40
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <DMA_SINGLE_TRANSFER+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00915 	stw	ra,36(sp)
81102c28:	df000815 	stw	fp,32(sp)
81102c2c:	dc000715 	stw	r16,28(sp)
81102c30:	df000804 	addi	fp,sp,32
81102c34:	e13ffb15 	stw	r4,-20(fp)
81102c38:	e17ffc15 	stw	r5,-16(fp)
81102c3c:	e1bffd15 	stw	r6,-12(fp)
81102c40:	e1fffe15 	stw	r7,-8(fp)
81102c44:	defff804 	addi	sp,sp,-32
81102c48:	d8800204 	addi	r2,sp,8
81102c4c:	108003c4 	addi	r2,r2,15
81102c50:	1004d13a 	srli	r2,r2,4
81102c54:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102c58:	00800044 	movi	r2,1
81102c5c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102c60:	e0fffc17 	ldw	r3,-16(fp)
81102c64:	e13ffd17 	ldw	r4,-12(fp)
81102c68:	e0800217 	ldw	r2,8(fp)
81102c6c:	d8800115 	stw	r2,4(sp)
81102c70:	e0bffe17 	ldw	r2,-8(fp)
81102c74:	d8800015 	stw	r2,0(sp)
81102c78:	200f883a 	mov	r7,r4
81102c7c:	180d883a 	mov	r6,r3
81102c80:	800b883a 	mov	r5,r16
81102c84:	e13ffb17 	ldw	r4,-20(fp)
81102c88:	1138ebc0 	call	81138ebc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102c8c:	10000326 	beq	r2,zero,81102c9c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102c90:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102c94:	e0bffa17 	ldw	r2,-24(fp)
81102c98:	00001d06 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102c9c:	800b883a 	mov	r5,r16
81102ca0:	e13ffb17 	ldw	r4,-20(fp)
81102ca4:	113a1300 	call	8113a130 <alt_msgdma_standard_descriptor_async_transfer>
81102ca8:	10000326 	beq	r2,zero,81102cb8 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102cb0:	e0bffa17 	ldw	r2,-24(fp)
81102cb4:	00001606 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102cb8:	e0bffa17 	ldw	r2,-24(fp)
81102cbc:	10800060 	cmpeqi	r2,r2,1
81102cc0:	1007883a 	mov	r3,r2
81102cc4:	e0800317 	ldw	r2,12(fp)
81102cc8:	10800060 	cmpeqi	r2,r2,1
81102ccc:	1884703a 	and	r2,r3,r2
81102cd0:	10803fcc 	andi	r2,r2,255
81102cd4:	10000d26 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cd8:	00000706 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102cdc:	e0800417 	ldw	r2,16(fp)
81102ce0:	1000031e 	bne	r2,zero,81102cf0 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102ce4:	0100fa04 	movi	r4,1000
81102ce8:	1127e440 	call	81127e44 <usleep>
81102cec:	00000206 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102cf0:	e1000417 	ldw	r4,16(fp)
81102cf4:	1127e440 	call	81127e44 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cf8:	e0bffb17 	ldw	r2,-20(fp)
81102cfc:	10800317 	ldw	r2,12(r2)
81102d00:	10800037 	ldwio	r2,0(r2)
81102d04:	1080004c 	andi	r2,r2,1
81102d08:	103ff41e 	bne	r2,zero,81102cdc <__reset+0xfb0e2cdc>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d0c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d10:	e6ffff04 	addi	sp,fp,-4
81102d14:	dfc00217 	ldw	ra,8(sp)
81102d18:	df000117 	ldw	fp,4(sp)
81102d1c:	dc000017 	ldw	r16,0(sp)
81102d20:	dec00304 	addi	sp,sp,12
81102d24:	f800283a 	ret

81102d28 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d28:	defff504 	addi	sp,sp,-44
81102d2c:	de00012e 	bgeu	sp,et,81102d34 <DMA_MULTIPLE_TRANSFER+0xc>
81102d30:	003b68fa 	trap	3
81102d34:	dfc00a15 	stw	ra,40(sp)
81102d38:	df000915 	stw	fp,36(sp)
81102d3c:	dc000815 	stw	r16,32(sp)
81102d40:	df000904 	addi	fp,sp,36
81102d44:	e13ffb15 	stw	r4,-20(fp)
81102d48:	e17ffc15 	stw	r5,-16(fp)
81102d4c:	e1bffd15 	stw	r6,-12(fp)
81102d50:	3805883a 	mov	r2,r7
81102d54:	e0bffe05 	stb	r2,-8(fp)
81102d58:	defff804 	addi	sp,sp,-32
81102d5c:	d8800204 	addi	r2,sp,8
81102d60:	108003c4 	addi	r2,r2,15
81102d64:	1004d13a 	srli	r2,r2,4
81102d68:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102d6c:	00800044 	movi	r2,1
81102d70:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102d74:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102d78:	00002506 	br	81102e10 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102d7c:	e0bffa03 	ldbu	r2,-24(fp)
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1085883a 	add	r2,r2,r2
81102d88:	1007883a 	mov	r3,r2
81102d8c:	e0bffc17 	ldw	r2,-16(fp)
81102d90:	10c5883a 	add	r2,r2,r3
81102d94:	10800017 	ldw	r2,0(r2)
81102d98:	1009883a 	mov	r4,r2
81102d9c:	e0bffa03 	ldbu	r2,-24(fp)
81102da0:	1085883a 	add	r2,r2,r2
81102da4:	1085883a 	add	r2,r2,r2
81102da8:	1007883a 	mov	r3,r2
81102dac:	e0bffd17 	ldw	r2,-12(fp)
81102db0:	10c5883a 	add	r2,r2,r3
81102db4:	10800017 	ldw	r2,0(r2)
81102db8:	1007883a 	mov	r3,r2
81102dbc:	e0800317 	ldw	r2,12(fp)
81102dc0:	10804034 	orhi	r2,r2,256
81102dc4:	d8800115 	stw	r2,4(sp)
81102dc8:	e0800217 	ldw	r2,8(fp)
81102dcc:	d8800015 	stw	r2,0(sp)
81102dd0:	180f883a 	mov	r7,r3
81102dd4:	200d883a 	mov	r6,r4
81102dd8:	800b883a 	mov	r5,r16
81102ddc:	e13ffb17 	ldw	r4,-20(fp)
81102de0:	1138ebc0 	call	81138ebc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102de4:	10000226 	beq	r2,zero,81102df0 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102de8:	e03ff915 	stw	zero,-28(fp)
81102dec:	00000506 	br	81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102df0:	800b883a 	mov	r5,r16
81102df4:	e13ffb17 	ldw	r4,-20(fp)
81102df8:	113a1300 	call	8113a130 <alt_msgdma_standard_descriptor_async_transfer>
81102dfc:	10000126 	beq	r2,zero,81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e00:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e04:	e0bffa03 	ldbu	r2,-24(fp)
81102e08:	10800044 	addi	r2,r2,1
81102e0c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e10:	e0bff917 	ldw	r2,-28(fp)
81102e14:	10800060 	cmpeqi	r2,r2,1
81102e18:	1009883a 	mov	r4,r2
81102e1c:	e0fffa03 	ldbu	r3,-24(fp)
81102e20:	e0bffe03 	ldbu	r2,-8(fp)
81102e24:	10bfffc4 	addi	r2,r2,-1
81102e28:	1884803a 	cmplt	r2,r3,r2
81102e2c:	2084703a 	and	r2,r4,r2
81102e30:	10803fcc 	andi	r2,r2,255
81102e34:	103fd11e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102e38:	e0bff917 	ldw	r2,-28(fp)
81102e3c:	10800058 	cmpnei	r2,r2,1
81102e40:	1000211e 	bne	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102e44:	e0bffa03 	ldbu	r2,-24(fp)
81102e48:	1085883a 	add	r2,r2,r2
81102e4c:	1085883a 	add	r2,r2,r2
81102e50:	1007883a 	mov	r3,r2
81102e54:	e0bffc17 	ldw	r2,-16(fp)
81102e58:	10c5883a 	add	r2,r2,r3
81102e5c:	10800017 	ldw	r2,0(r2)
81102e60:	1009883a 	mov	r4,r2
81102e64:	e0bffa03 	ldbu	r2,-24(fp)
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	1085883a 	add	r2,r2,r2
81102e70:	1007883a 	mov	r3,r2
81102e74:	e0bffd17 	ldw	r2,-12(fp)
81102e78:	10c5883a 	add	r2,r2,r3
81102e7c:	10800017 	ldw	r2,0(r2)
81102e80:	1007883a 	mov	r3,r2
81102e84:	e0800317 	ldw	r2,12(fp)
81102e88:	d8800115 	stw	r2,4(sp)
81102e8c:	e0800217 	ldw	r2,8(fp)
81102e90:	d8800015 	stw	r2,0(sp)
81102e94:	180f883a 	mov	r7,r3
81102e98:	200d883a 	mov	r6,r4
81102e9c:	800b883a 	mov	r5,r16
81102ea0:	e13ffb17 	ldw	r4,-20(fp)
81102ea4:	1138ebc0 	call	81138ebc <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102ea8:	10000226 	beq	r2,zero,81102eb4 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102eac:	e03ff915 	stw	zero,-28(fp)
81102eb0:	00000506 	br	81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102eb4:	800b883a 	mov	r5,r16
81102eb8:	e13ffb17 	ldw	r4,-20(fp)
81102ebc:	113a1300 	call	8113a130 <alt_msgdma_standard_descriptor_async_transfer>
81102ec0:	10000126 	beq	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102ec4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102ec8:	e0bff917 	ldw	r2,-28(fp)
81102ecc:	10800060 	cmpeqi	r2,r2,1
81102ed0:	1007883a 	mov	r3,r2
81102ed4:	e0800417 	ldw	r2,16(fp)
81102ed8:	10800060 	cmpeqi	r2,r2,1
81102edc:	1884703a 	and	r2,r3,r2
81102ee0:	10803fcc 	andi	r2,r2,255
81102ee4:	10000d26 	beq	r2,zero,81102f1c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102ee8:	00000706 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102eec:	e0800517 	ldw	r2,20(fp)
81102ef0:	1000031e 	bne	r2,zero,81102f00 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102ef4:	0100fa04 	movi	r4,1000
81102ef8:	1127e440 	call	81127e44 <usleep>
81102efc:	00000206 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f00:	e1000517 	ldw	r4,20(fp)
81102f04:	1127e440 	call	81127e44 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f08:	e0bffb17 	ldw	r2,-20(fp)
81102f0c:	10800317 	ldw	r2,12(r2)
81102f10:	10800037 	ldwio	r2,0(r2)
81102f14:	1080004c 	andi	r2,r2,1
81102f18:	103ff41e 	bne	r2,zero,81102eec <__reset+0xfb0e2eec>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f1c:	e0bff917 	ldw	r2,-28(fp)
}
81102f20:	e6ffff04 	addi	sp,fp,-4
81102f24:	dfc00217 	ldw	ra,8(sp)
81102f28:	df000117 	ldw	fp,4(sp)
81102f2c:	dc000017 	ldw	r16,0(sp)
81102f30:	dec00304 	addi	sp,sp,12
81102f34:	f800283a 	ret

81102f38 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102f38:	deffef04 	addi	sp,sp,-68
81102f3c:	de00012e 	bgeu	sp,et,81102f44 <POWER_Read+0xc>
81102f40:	003b68fa 	trap	3
81102f44:	dfc01015 	stw	ra,64(sp)
81102f48:	df000f15 	stw	fp,60(sp)
81102f4c:	df000f04 	addi	fp,sp,60
81102f50:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102f54:	00800044 	movi	r2,1
81102f58:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102f5c:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102f60:	00800204 	movi	r2,8
81102f64:	e0bffc15 	stw	r2,-16(fp)
81102f68:	00800104 	movi	r2,4
81102f6c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102f70:	00800044 	movi	r2,1
81102f74:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102f80:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102f84:	e03ff515 	stw	zero,-44(fp)
81102f88:	00009206 	br	811031d4 <POWER_Read+0x29c>
		NextChannel = 0;
81102f8c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102f90:	e0bff517 	ldw	r2,-44(fp)
81102f94:	10c03fcc 	andi	r3,r2,255
81102f98:	e13ffa03 	ldbu	r4,-24(fp)
81102f9c:	e0bfff17 	ldw	r2,-4(fp)
81102fa0:	d8800115 	stw	r2,4(sp)
81102fa4:	e0bff917 	ldw	r2,-28(fp)
81102fa8:	d8800015 	stw	r2,0(sp)
81102fac:	e1fff817 	ldw	r7,-32(fp)
81102fb0:	e1bff717 	ldw	r6,-36(fp)
81102fb4:	200b883a 	mov	r5,r4
81102fb8:	1809883a 	mov	r4,r3
81102fbc:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81102fc0:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102fc4:	e03ff415 	stw	zero,-48(fp)
81102fc8:	00007406 	br	8110319c <POWER_Read+0x264>
			NextChannel = i + 1;
81102fcc:	e0bff417 	ldw	r2,-48(fp)
81102fd0:	10800044 	addi	r2,r2,1
81102fd4:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102fd8:	e0bff517 	ldw	r2,-44(fp)
81102fdc:	10c03fcc 	andi	r3,r2,255
81102fe0:	e13ffa03 	ldbu	r4,-24(fp)
81102fe4:	e0bffe04 	addi	r2,fp,-8
81102fe8:	d8800115 	stw	r2,4(sp)
81102fec:	e0bff917 	ldw	r2,-28(fp)
81102ff0:	d8800015 	stw	r2,0(sp)
81102ff4:	e1fff817 	ldw	r7,-32(fp)
81102ff8:	e1bff717 	ldw	r6,-36(fp)
81102ffc:	200b883a 	mov	r5,r4
81103000:	1809883a 	mov	r4,r3
81103004:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81103008:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110300c:	e0bff317 	ldw	r2,-52(fp)
81103010:	10005026 	beq	r2,zero,81103154 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103014:	e0bffe17 	ldw	r2,-8(fp)
81103018:	1004d7ba 	srli	r2,r2,30
8110301c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103020:	e0bffe17 	ldw	r2,-8(fp)
81103024:	1004d07a 	srli	r2,r2,1
81103028:	108001cc 	andi	r2,r2,7
8110302c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
81103030:	e0bffe17 	ldw	r2,-8(fp)
81103034:	1004d13a 	srli	r2,r2,4
81103038:	1080004c 	andi	r2,r2,1
8110303c:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	1004d17a 	srli	r2,r2,5
81103048:	1080004c 	andi	r2,r2,1
8110304c:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
81103050:	e0bffe17 	ldw	r2,-8(fp)
81103054:	1080004c 	andi	r2,r2,1
81103058:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
8110305c:	e0bffa43 	ldbu	r2,-23(fp)
81103060:	10000d26 	beq	r2,zero,81103098 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81103064:	e1bff417 	ldw	r6,-48(fp)
81103068:	01604534 	movhi	r5,33044
8110306c:	2970c504 	addi	r5,r5,-15596
81103070:	01204534 	movhi	r4,33044
81103074:	2102da04 	addi	r4,r4,2920
81103078:	11130e40 	call	811130e4 <sprintf>
					debug(fp, cDebugBuffer);
8110307c:	d0a04d17 	ldw	r2,-32460(gp)
81103080:	01604534 	movhi	r5,33044
81103084:	2942da04 	addi	r5,r5,2920
81103088:	1009883a 	mov	r4,r2
8110308c:	111197c0 	call	8111197c <fprintf>
#endif
					bSuccess = FALSE;
81103090:	e03ff315 	stw	zero,-52(fp)
81103094:	00002206 	br	81103120 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103098:	e0fffa83 	ldbu	r3,-22(fp)
8110309c:	e0bff417 	ldw	r2,-48(fp)
811030a0:	18801026 	beq	r3,r2,811030e4 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
811030a4:	e0bffa83 	ldbu	r2,-22(fp)
811030a8:	d8800015 	stw	r2,0(sp)
811030ac:	e1fff417 	ldw	r7,-48(fp)
811030b0:	e1bff417 	ldw	r6,-48(fp)
811030b4:	01604534 	movhi	r5,33044
811030b8:	2970cb04 	addi	r5,r5,-15572
811030bc:	01204534 	movhi	r4,33044
811030c0:	2102da04 	addi	r4,r4,2920
811030c4:	11130e40 	call	811130e4 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
811030c8:	d0a04d17 	ldw	r2,-32460(gp)
811030cc:	01604534 	movhi	r5,33044
811030d0:	2942da04 	addi	r5,r5,2920
811030d4:	1009883a 	mov	r4,r2
811030d8:	111197c0 	call	8111197c <fprintf>
#endif
					bSuccess = FALSE;
811030dc:	e03ff315 	stw	zero,-52(fp)
811030e0:	00000f06 	br	81103120 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
811030e4:	e0fffac3 	ldbu	r3,-21(fp)
811030e8:	e0bff817 	ldw	r2,-32(fp)
811030ec:	18800c26 	beq	r3,r2,81103120 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
811030f0:	e1bff417 	ldw	r6,-48(fp)
811030f4:	01604534 	movhi	r5,33044
811030f8:	2970d704 	addi	r5,r5,-15524
811030fc:	01204534 	movhi	r4,33044
81103100:	2102da04 	addi	r4,r4,2920
81103104:	11130e40 	call	811130e4 <sprintf>
					debug(fp, cDebugBuffer);
81103108:	d0a04d17 	ldw	r2,-32460(gp)
8110310c:	01604534 	movhi	r5,33044
81103110:	2942da04 	addi	r5,r5,2920
81103114:	1009883a 	mov	r4,r2
81103118:	111197c0 	call	8111197c <fprintf>
#endif
					bSuccess = FALSE;
8110311c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103120:	e0bff317 	ldw	r2,-52(fp)
81103124:	10001a26 	beq	r2,zero,81103190 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103128:	e0bff617 	ldw	r2,-40(fp)
8110312c:	10c00044 	addi	r3,r2,1
81103130:	e0fff615 	stw	r3,-40(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	1085883a 	add	r2,r2,r2
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bfff17 	ldw	r2,-4(fp)
81103144:	10c5883a 	add	r2,r2,r3
81103148:	e0fffe17 	ldw	r3,-8(fp)
8110314c:	10c00015 	stw	r3,0(r2)
81103150:	00000f06 	br	81103190 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81103154:	00e04534 	movhi	r3,33044
81103158:	18c2da04 	addi	r3,r3,2920
8110315c:	00a04534 	movhi	r2,33044
81103160:	10b0dd04 	addi	r2,r2,-15500
81103164:	1009883a 	mov	r4,r2
81103168:	00800444 	movi	r2,17
8110316c:	100d883a 	mov	r6,r2
81103170:	200b883a 	mov	r5,r4
81103174:	1809883a 	mov	r4,r3
81103178:	111297c0 	call	8111297c <memcpy>
				debug(fp, cDebugBuffer);
8110317c:	d0a04d17 	ldw	r2,-32460(gp)
81103180:	01604534 	movhi	r5,33044
81103184:	2942da04 	addi	r5,r5,2920
81103188:	1009883a 	mov	r4,r2
8110318c:	111197c0 	call	8111197c <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103190:	e0bff417 	ldw	r2,-48(fp)
81103194:	10800044 	addi	r2,r2,1
81103198:	e0bff415 	stw	r2,-48(fp)
8110319c:	e0bff517 	ldw	r2,-44(fp)
811031a0:	1085883a 	add	r2,r2,r2
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	e0fff304 	addi	r3,fp,-52
811031ac:	1885883a 	add	r2,r3,r2
811031b0:	10800904 	addi	r2,r2,36
811031b4:	10800017 	ldw	r2,0(r2)
811031b8:	e0fff417 	ldw	r3,-48(fp)
811031bc:	1880020e 	bge	r3,r2,811031c8 <POWER_Read+0x290>
811031c0:	e0bff317 	ldw	r2,-52(fp)
811031c4:	103f811e 	bne	r2,zero,81102fcc <__reset+0xfb0e2fcc>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
811031c8:	e0bff517 	ldw	r2,-44(fp)
811031cc:	10800044 	addi	r2,r2,1
811031d0:	e0bff515 	stw	r2,-44(fp)
811031d4:	e0bff517 	ldw	r2,-44(fp)
811031d8:	10800088 	cmpgei	r2,r2,2
811031dc:	1000021e 	bne	r2,zero,811031e8 <POWER_Read+0x2b0>
811031e0:	e0bff317 	ldw	r2,-52(fp)
811031e4:	103f691e 	bne	r2,zero,81102f8c <__reset+0xfb0e2f8c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
811031e8:	e0bff317 	ldw	r2,-52(fp)
}
811031ec:	e037883a 	mov	sp,fp
811031f0:	dfc00117 	ldw	ra,4(sp)
811031f4:	df000017 	ldw	fp,0(sp)
811031f8:	dec00204 	addi	sp,sp,8
811031fc:	f800283a 	ret

81103200 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103200:	defff904 	addi	sp,sp,-28
81103204:	de00012e 	bgeu	sp,et,8110320c <TEMP_Read+0xc>
81103208:	003b68fa 	trap	3
8110320c:	dfc00615 	stw	ra,24(sp)
81103210:	df000515 	stw	fp,20(sp)
81103214:	df000504 	addi	fp,sp,20
81103218:	e13ffe15 	stw	r4,-8(fp)
8110321c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103220:	00800c04 	movi	r2,48
81103224:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103228:	e0bffd83 	ldbu	r2,-10(fp)
8110322c:	10c03fcc 	andi	r3,r2,255
81103230:	18c0201c 	xori	r3,r3,128
81103234:	18ffe004 	addi	r3,r3,-128
81103238:	e0bffdc4 	addi	r2,fp,-9
8110323c:	d8800015 	stw	r2,0(sp)
81103240:	000f883a 	mov	r7,zero
81103244:	180d883a 	mov	r6,r3
81103248:	01600034 	movhi	r5,32768
8110324c:	29426004 	addi	r5,r5,2432
81103250:	01200034 	movhi	r4,32768
81103254:	21026404 	addi	r4,r4,2448
81103258:	1105ac00 	call	81105ac0 <I2C_Read>
8110325c:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81103260:	e0bffc17 	ldw	r2,-16(fp)
81103264:	10000226 	beq	r2,zero,81103270 <TEMP_Read+0x70>
		BoardTemp = Data;
81103268:	e0bffdc3 	ldbu	r2,-9(fp)
8110326c:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81103270:	e0bffc17 	ldw	r2,-16(fp)
81103274:	10001226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81103278:	e0bffd83 	ldbu	r2,-10(fp)
8110327c:	10c03fcc 	andi	r3,r2,255
81103280:	18c0201c 	xori	r3,r3,128
81103284:	18ffe004 	addi	r3,r3,-128
81103288:	e0bffdc4 	addi	r2,fp,-9
8110328c:	d8800015 	stw	r2,0(sp)
81103290:	01c00044 	movi	r7,1
81103294:	180d883a 	mov	r6,r3
81103298:	01600034 	movhi	r5,32768
8110329c:	29426004 	addi	r5,r5,2432
811032a0:	01200034 	movhi	r4,32768
811032a4:	21026404 	addi	r4,r4,2448
811032a8:	1105ac00 	call	81105ac0 <I2C_Read>
811032ac:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
811032b0:	e0bffc17 	ldw	r2,-16(fp)
811032b4:	10000226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
			FpgaTemp = Data;
811032b8:	e0bffdc3 	ldbu	r2,-9(fp)
811032bc:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
811032c0:	e0bffc17 	ldw	r2,-16(fp)
811032c4:	10000626 	beq	r2,zero,811032e0 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
811032c8:	e0bffe17 	ldw	r2,-8(fp)
811032cc:	e0fffd03 	ldbu	r3,-12(fp)
811032d0:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
811032d4:	e0bfff17 	ldw	r2,-4(fp)
811032d8:	e0fffd43 	ldbu	r3,-11(fp)
811032dc:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
811032e0:	e0bffc17 	ldw	r2,-16(fp)
}
811032e4:	e037883a 	mov	sp,fp
811032e8:	dfc00117 	ldw	ra,4(sp)
811032ec:	df000017 	ldw	fp,0(sp)
811032f0:	dec00204 	addi	sp,sp,8
811032f4:	f800283a 	ret

811032f8 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
811032f8:	defffb04 	addi	sp,sp,-20
811032fc:	de00012e 	bgeu	sp,et,81103304 <sense_log_temp+0xc>
81103300:	003b68fa 	trap	3
81103304:	dfc00415 	stw	ra,16(sp)
81103308:	df000315 	stw	fp,12(sp)
8110330c:	df000304 	addi	fp,sp,12
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103318:	e17fff17 	ldw	r5,-4(fp)
8110331c:	e13ffe17 	ldw	r4,-8(fp)
81103320:	11032000 	call	81103200 <TEMP_Read>
81103324:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103328:	e0bffd17 	ldw	r2,-12(fp)
}
8110332c:	e037883a 	mov	sp,fp
81103330:	dfc00117 	ldw	ra,4(sp)
81103334:	df000017 	ldw	fp,0(sp)
81103338:	dec00204 	addi	sp,sp,8
8110333c:	f800283a 	ret

81103340 <sense_log>:

void sense_log(void) {
81103340:	deff0404 	addi	sp,sp,-1008
81103344:	de00012e 	bgeu	sp,et,8110334c <sense_log+0xc>
81103348:	003b68fa 	trap	3
8110334c:	dfc0fb15 	stw	ra,1004(sp)
81103350:	df00fa15 	stw	fp,1000(sp)
81103354:	dd40f915 	stw	r21,996(sp)
81103358:	dd00f815 	stw	r20,992(sp)
8110335c:	dcc0f715 	stw	r19,988(sp)
81103360:	dc80f615 	stw	r18,984(sp)
81103364:	dc40f515 	stw	r17,980(sp)
81103368:	dc00f415 	stw	r16,976(sp)
8110336c:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81103370:	00902834 	movhi	r2,16544
81103374:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81103378:	008ed174 	movhi	r2,15173
8110337c:	10a6e984 	addi	r2,r2,-25690
81103380:	e0bf2215 	stw	r2,-888(fp)
81103384:	008ea0f4 	movhi	r2,14979
81103388:	10849bc4 	addi	r2,r2,4719
8110338c:	e0bf2315 	stw	r2,-884(fp)
81103390:	008ed174 	movhi	r2,15173
81103394:	10a6e984 	addi	r2,r2,-25690
81103398:	e0bf2415 	stw	r2,-880(fp)
8110339c:	008ed174 	movhi	r2,15173
811033a0:	10a6e984 	addi	r2,r2,-25690
811033a4:	e0bf2515 	stw	r2,-876(fp)
811033a8:	008ed174 	movhi	r2,15173
811033ac:	10a6e984 	addi	r2,r2,-25690
811033b0:	e0bf2615 	stw	r2,-872(fp)
811033b4:	008ed174 	movhi	r2,15173
811033b8:	10a6e984 	addi	r2,r2,-25690
811033bc:	e0bf2715 	stw	r2,-868(fp)
811033c0:	008ed174 	movhi	r2,15173
811033c4:	10a6e984 	addi	r2,r2,-25690
811033c8:	e0bf2815 	stw	r2,-864(fp)
811033cc:	008ed174 	movhi	r2,15173
811033d0:	10a6e984 	addi	r2,r2,-25690
811033d4:	e0bf2915 	stw	r2,-860(fp)
811033d8:	008ed174 	movhi	r2,15173
811033dc:	10a6e984 	addi	r2,r2,-25690
811033e0:	e0bf2a15 	stw	r2,-856(fp)
811033e4:	008ed174 	movhi	r2,15173
811033e8:	10a6e984 	addi	r2,r2,-25690
811033ec:	e0bf2b15 	stw	r2,-852(fp)
811033f0:	008ed174 	movhi	r2,15173
811033f4:	10a6e984 	addi	r2,r2,-25690
811033f8:	e0bf2c15 	stw	r2,-848(fp)
811033fc:	008ed174 	movhi	r2,15173
81103400:	10a6e984 	addi	r2,r2,-25690
81103404:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103408:	008fd9b4 	movhi	r2,16230
8110340c:	10999984 	addi	r2,r2,26214
81103410:	e0bf2e15 	stw	r2,-840(fp)
81103414:	008fd9b4 	movhi	r2,16230
81103418:	10999984 	addi	r2,r2,26214
8110341c:	e0bf2f15 	stw	r2,-836(fp)
81103420:	00901034 	movhi	r2,16448
81103424:	e0bf3015 	stw	r2,-832(fp)
81103428:	008fd9b4 	movhi	r2,16230
8110342c:	10999984 	addi	r2,r2,26214
81103430:	e0bf3115 	stw	r2,-828(fp)
81103434:	008ff9b4 	movhi	r2,16358
81103438:	10999984 	addi	r2,r2,26214
8110343c:	e0bf3215 	stw	r2,-824(fp)
81103440:	00900834 	movhi	r2,16416
81103444:	e0bf3315 	stw	r2,-820(fp)
81103448:	008ff9b4 	movhi	r2,16358
8110344c:	10999984 	addi	r2,r2,26214
81103450:	e0bf3415 	stw	r2,-816(fp)
81103454:	00900834 	movhi	r2,16416
81103458:	e0bf3515 	stw	r2,-812(fp)
8110345c:	008fe374 	movhi	r2,16269
81103460:	10b33344 	addi	r2,r2,-13107
81103464:	e0bf3615 	stw	r2,-808(fp)
81103468:	008fecf4 	movhi	r2,16307
8110346c:	108cccc4 	addi	r2,r2,13107
81103470:	e0bf3715 	stw	r2,-804(fp)
81103474:	009014f4 	movhi	r2,16467
81103478:	108cccc4 	addi	r2,r2,13107
8110347c:	e0bf3815 	stw	r2,-800(fp)
81103480:	00900834 	movhi	r2,16416
81103484:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81103488:	00a04534 	movhi	r2,33044
8110348c:	10b11404 	addi	r2,r2,-15280
81103490:	e0ff3a04 	addi	r3,fp,-792
81103494:	1009883a 	mov	r4,r2
81103498:	0080c004 	movi	r2,768
8110349c:	100d883a 	mov	r6,r2
811034a0:	200b883a 	mov	r5,r4
811034a4:	1809883a 	mov	r4,r3
811034a8:	111297c0 	call	8111297c <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
811034ac:	e0bf1604 	addi	r2,fp,-936
811034b0:	1009883a 	mov	r4,r2
811034b4:	1102f380 	call	81102f38 <POWER_Read>
811034b8:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
811034bc:	e0bf0f17 	ldw	r2,-964(fp)
811034c0:	10016026 	beq	r2,zero,81103a44 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811034c4:	e03f0c15 	stw	zero,-976(fp)
811034c8:	00014c06 	br	811039fc <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
811034cc:	e0bf0c17 	ldw	r2,-976(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	1085883a 	add	r2,r2,r2
811034d8:	e0ff0c04 	addi	r3,fp,-976
811034dc:	1885883a 	add	r2,r3,r2
811034e0:	10800a04 	addi	r2,r2,40
811034e4:	10800017 	ldw	r2,0(r2)
811034e8:	1004d77a 	srli	r2,r2,29
811034ec:	1080004c 	andi	r2,r2,1
811034f0:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
811034f4:	e0bf0c17 	ldw	r2,-976(fp)
811034f8:	1085883a 	add	r2,r2,r2
811034fc:	1085883a 	add	r2,r2,r2
81103500:	e0ff0c04 	addi	r3,fp,-976
81103504:	1885883a 	add	r2,r3,r2
81103508:	10800a04 	addi	r2,r2,40
8110350c:	10800017 	ldw	r2,0(r2)
81103510:	1004d73a 	srli	r2,r2,28
81103514:	1080004c 	andi	r2,r2,1
81103518:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110351c:	e0bf0c17 	ldw	r2,-976(fp)
81103520:	1085883a 	add	r2,r2,r2
81103524:	1085883a 	add	r2,r2,r2
81103528:	e0ff0c04 	addi	r3,fp,-976
8110352c:	1885883a 	add	r2,r3,r2
81103530:	10800a04 	addi	r2,r2,40
81103534:	10800017 	ldw	r2,0(r2)
81103538:	1006d1ba 	srli	r3,r2,6
8110353c:	00801034 	movhi	r2,64
81103540:	10bfffc4 	addi	r2,r2,-1
81103544:	1884703a 	and	r2,r3,r2
81103548:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
8110354c:	e0bf1117 	ldw	r2,-956(fp)
81103550:	1000091e 	bne	r2,zero,81103578 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81103554:	e13f1217 	ldw	r4,-952(fp)
81103558:	1110ce40 	call	81110ce4 <__floatunsisf>
8110355c:	1007883a 	mov	r3,r2
81103560:	0152a034 	movhi	r5,19072
81103564:	1809883a 	mov	r4,r3
81103568:	111036c0 	call	8111036c <__divsf3>
8110356c:	1007883a 	mov	r3,r2
81103570:	e0ff0d15 	stw	r3,-972(fp)
81103574:	00000106 	br	8110357c <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103578:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
8110357c:	e0bf1017 	ldw	r2,-960(fp)
81103580:	10002626 	beq	r2,zero,8110361c <sense_log+0x2dc>
81103584:	e0bf1117 	ldw	r2,-956(fp)
81103588:	10002426 	beq	r2,zero,8110361c <sense_log+0x2dc>
				fVol = fRef * 0.5;
8110358c:	014fc034 	movhi	r5,16128
81103590:	e13f0e17 	ldw	r4,-968(fp)
81103594:	11107b40 	call	811107b4 <__mulsf3>
81103598:	1007883a 	mov	r3,r2
8110359c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811035a0:	e0ff3a04 	addi	r3,fp,-792
811035a4:	e0bf0c17 	ldw	r2,-976(fp)
811035a8:	100491ba 	slli	r2,r2,6
811035ac:	18a1883a 	add	r16,r3,r2
811035b0:	e0bf0c17 	ldw	r2,-976(fp)
811035b4:	1085883a 	add	r2,r2,r2
811035b8:	1085883a 	add	r2,r2,r2
811035bc:	e0ff0c04 	addi	r3,fp,-976
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	10800a04 	addi	r2,r2,40
811035c8:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
811035cc:	1023883a 	mov	r17,r2
811035d0:	e13f1317 	ldw	r4,-948(fp)
811035d4:	11114fc0 	call	811114fc <__extendsfdf2>
811035d8:	1009883a 	mov	r4,r2
811035dc:	180b883a 	mov	r5,r3
811035e0:	d9000015 	stw	r4,0(sp)
811035e4:	d9400115 	stw	r5,4(sp)
811035e8:	880f883a 	mov	r7,r17
811035ec:	800d883a 	mov	r6,r16
811035f0:	01604534 	movhi	r5,33044
811035f4:	2970e204 	addi	r5,r5,-15480
811035f8:	01204534 	movhi	r4,33044
811035fc:	2102da04 	addi	r4,r4,2920
81103600:	11130e40 	call	811130e4 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103604:	d0a04d17 	ldw	r2,-32460(gp)
81103608:	01604534 	movhi	r5,33044
8110360c:	2942da04 	addi	r5,r5,2920
81103610:	1009883a 	mov	r4,r2
81103614:	111197c0 	call	8111197c <fprintf>
81103618:	0000f506 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110361c:	e0bf1017 	ldw	r2,-960(fp)
81103620:	10006426 	beq	r2,zero,811037b4 <sense_log+0x474>
81103624:	e0bf1117 	ldw	r2,-956(fp)
81103628:	1000621e 	bne	r2,zero,811037b4 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110362c:	e13f0e17 	ldw	r4,-968(fp)
81103630:	11114fc0 	call	811114fc <__extendsfdf2>
81103634:	1011883a 	mov	r8,r2
81103638:	1813883a 	mov	r9,r3
8110363c:	000d883a 	mov	r6,zero
81103640:	01cff834 	movhi	r7,16352
81103644:	4009883a 	mov	r4,r8
81103648:	480b883a 	mov	r5,r9
8110364c:	1110ddc0 	call	81110ddc <__muldf3>
81103650:	1009883a 	mov	r4,r2
81103654:	180b883a 	mov	r5,r3
81103658:	2021883a 	mov	r16,r4
8110365c:	2823883a 	mov	r17,r5
81103660:	e13f0d17 	ldw	r4,-972(fp)
81103664:	11114fc0 	call	811114fc <__extendsfdf2>
81103668:	1009883a 	mov	r4,r2
8110366c:	180b883a 	mov	r5,r3
81103670:	200d883a 	mov	r6,r4
81103674:	280f883a 	mov	r7,r5
81103678:	8009883a 	mov	r4,r16
8110367c:	880b883a 	mov	r5,r17
81103680:	1110ddc0 	call	81110ddc <__muldf3>
81103684:	1009883a 	mov	r4,r2
81103688:	180b883a 	mov	r5,r3
8110368c:	2005883a 	mov	r2,r4
81103690:	2807883a 	mov	r3,r5
81103694:	1009883a 	mov	r4,r2
81103698:	180b883a 	mov	r5,r3
8110369c:	11116140 	call	81111614 <__truncdfsf2>
811036a0:	1007883a 	mov	r3,r2
811036a4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811036a8:	e0bf0c17 	ldw	r2,-976(fp)
811036ac:	1085883a 	add	r2,r2,r2
811036b0:	1085883a 	add	r2,r2,r2
811036b4:	e0ff0c04 	addi	r3,fp,-976
811036b8:	1885883a 	add	r2,r3,r2
811036bc:	10801604 	addi	r2,r2,88
811036c0:	10c00017 	ldw	r3,0(r2)
811036c4:	180b883a 	mov	r5,r3
811036c8:	e13f0d17 	ldw	r4,-972(fp)
811036cc:	111036c0 	call	8111036c <__divsf3>
811036d0:	1007883a 	mov	r3,r2
811036d4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811036d8:	e0bf0c17 	ldw	r2,-976(fp)
811036dc:	1085883a 	add	r2,r2,r2
811036e0:	1085883a 	add	r2,r2,r2
811036e4:	e0ff0c04 	addi	r3,fp,-976
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10802204 	addi	r2,r2,136
811036f0:	10c00017 	ldw	r3,0(r2)
811036f4:	e17f1417 	ldw	r5,-944(fp)
811036f8:	1809883a 	mov	r4,r3
811036fc:	11107b40 	call	811107b4 <__mulsf3>
81103700:	1007883a 	mov	r3,r2
81103704:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103708:	e0ff3a04 	addi	r3,fp,-792
8110370c:	e0bf0c17 	ldw	r2,-976(fp)
81103710:	100491ba 	slli	r2,r2,6
81103714:	18a9883a 	add	r20,r3,r2
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10800a04 	addi	r2,r2,40
81103730:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103734:	102b883a 	mov	r21,r2
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	11114fc0 	call	811114fc <__extendsfdf2>
81103740:	1021883a 	mov	r16,r2
81103744:	1823883a 	mov	r17,r3
81103748:	e13f1417 	ldw	r4,-944(fp)
8110374c:	11114fc0 	call	811114fc <__extendsfdf2>
81103750:	1025883a 	mov	r18,r2
81103754:	1827883a 	mov	r19,r3
81103758:	e13f1517 	ldw	r4,-940(fp)
8110375c:	11114fc0 	call	811114fc <__extendsfdf2>
81103760:	1009883a 	mov	r4,r2
81103764:	180b883a 	mov	r5,r3
81103768:	d9000415 	stw	r4,16(sp)
8110376c:	d9400515 	stw	r5,20(sp)
81103770:	dc800215 	stw	r18,8(sp)
81103774:	dcc00315 	stw	r19,12(sp)
81103778:	dc000015 	stw	r16,0(sp)
8110377c:	dc400115 	stw	r17,4(sp)
81103780:	a80f883a 	mov	r7,r21
81103784:	a00d883a 	mov	r6,r20
81103788:	01604534 	movhi	r5,33044
8110378c:	2970eb04 	addi	r5,r5,-15444
81103790:	01204534 	movhi	r4,33044
81103794:	2102da04 	addi	r4,r4,2920
81103798:	11130e40 	call	811130e4 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110379c:	d0a04d17 	ldw	r2,-32460(gp)
811037a0:	01604534 	movhi	r5,33044
811037a4:	2942da04 	addi	r5,r5,2920
811037a8:	1009883a 	mov	r4,r2
811037ac:	111197c0 	call	8111197c <fprintf>
811037b0:	00008f06 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
811037b4:	e0bf1017 	ldw	r2,-960(fp)
811037b8:	1000641e 	bne	r2,zero,8110394c <sense_log+0x60c>
811037bc:	e0bf1117 	ldw	r2,-956(fp)
811037c0:	10006226 	beq	r2,zero,8110394c <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
811037c4:	e13f0e17 	ldw	r4,-968(fp)
811037c8:	11114fc0 	call	811114fc <__extendsfdf2>
811037cc:	1011883a 	mov	r8,r2
811037d0:	1813883a 	mov	r9,r3
811037d4:	000d883a 	mov	r6,zero
811037d8:	01cff834 	movhi	r7,16352
811037dc:	4009883a 	mov	r4,r8
811037e0:	480b883a 	mov	r5,r9
811037e4:	1110ddc0 	call	81110ddc <__muldf3>
811037e8:	1009883a 	mov	r4,r2
811037ec:	180b883a 	mov	r5,r3
811037f0:	2021883a 	mov	r16,r4
811037f4:	2823883a 	mov	r17,r5
811037f8:	e13f0d17 	ldw	r4,-972(fp)
811037fc:	11114fc0 	call	811114fc <__extendsfdf2>
81103800:	1009883a 	mov	r4,r2
81103804:	180b883a 	mov	r5,r3
81103808:	200d883a 	mov	r6,r4
8110380c:	280f883a 	mov	r7,r5
81103810:	8009883a 	mov	r4,r16
81103814:	880b883a 	mov	r5,r17
81103818:	1110ddc0 	call	81110ddc <__muldf3>
8110381c:	1009883a 	mov	r4,r2
81103820:	180b883a 	mov	r5,r3
81103824:	2005883a 	mov	r2,r4
81103828:	2807883a 	mov	r3,r5
8110382c:	1009883a 	mov	r4,r2
81103830:	180b883a 	mov	r5,r3
81103834:	11116140 	call	81111614 <__truncdfsf2>
81103838:	1007883a 	mov	r3,r2
8110383c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103840:	e0bf0c17 	ldw	r2,-976(fp)
81103844:	1085883a 	add	r2,r2,r2
81103848:	1085883a 	add	r2,r2,r2
8110384c:	e0ff0c04 	addi	r3,fp,-976
81103850:	1885883a 	add	r2,r3,r2
81103854:	10801604 	addi	r2,r2,88
81103858:	10c00017 	ldw	r3,0(r2)
8110385c:	180b883a 	mov	r5,r3
81103860:	e13f0d17 	ldw	r4,-972(fp)
81103864:	111036c0 	call	8111036c <__divsf3>
81103868:	1007883a 	mov	r3,r2
8110386c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103870:	e0bf0c17 	ldw	r2,-976(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	e0ff0c04 	addi	r3,fp,-976
81103880:	1885883a 	add	r2,r3,r2
81103884:	10802204 	addi	r2,r2,136
81103888:	10c00017 	ldw	r3,0(r2)
8110388c:	e17f1417 	ldw	r5,-944(fp)
81103890:	1809883a 	mov	r4,r3
81103894:	11107b40 	call	811107b4 <__mulsf3>
81103898:	1007883a 	mov	r3,r2
8110389c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
811038a0:	e0ff3a04 	addi	r3,fp,-792
811038a4:	e0bf0c17 	ldw	r2,-976(fp)
811038a8:	100491ba 	slli	r2,r2,6
811038ac:	18a9883a 	add	r20,r3,r2
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10800a04 	addi	r2,r2,40
811038c8:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811038cc:	102b883a 	mov	r21,r2
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	11114fc0 	call	811114fc <__extendsfdf2>
811038d8:	1021883a 	mov	r16,r2
811038dc:	1823883a 	mov	r17,r3
811038e0:	e13f1417 	ldw	r4,-944(fp)
811038e4:	11114fc0 	call	811114fc <__extendsfdf2>
811038e8:	1025883a 	mov	r18,r2
811038ec:	1827883a 	mov	r19,r3
811038f0:	e13f1517 	ldw	r4,-940(fp)
811038f4:	11114fc0 	call	811114fc <__extendsfdf2>
811038f8:	1009883a 	mov	r4,r2
811038fc:	180b883a 	mov	r5,r3
81103900:	d9000415 	stw	r4,16(sp)
81103904:	d9400515 	stw	r5,20(sp)
81103908:	dc800215 	stw	r18,8(sp)
8110390c:	dcc00315 	stw	r19,12(sp)
81103910:	dc000015 	stw	r16,0(sp)
81103914:	dc400115 	stw	r17,4(sp)
81103918:	a80f883a 	mov	r7,r21
8110391c:	a00d883a 	mov	r6,r20
81103920:	01604534 	movhi	r5,33044
81103924:	2970fb04 	addi	r5,r5,-15380
81103928:	01204534 	movhi	r4,33044
8110392c:	2102da04 	addi	r4,r4,2920
81103930:	11130e40 	call	811130e4 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103934:	d0a04d17 	ldw	r2,-32460(gp)
81103938:	01604534 	movhi	r5,33044
8110393c:	2942da04 	addi	r5,r5,2920
81103940:	1009883a 	mov	r4,r2
81103944:	111197c0 	call	8111197c <fprintf>
81103948:	00002906 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
8110394c:	e0bf1017 	ldw	r2,-960(fp)
81103950:	1000271e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
81103954:	e0bf1117 	ldw	r2,-956(fp)
81103958:	1000251e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
8110395c:	e0bf0e17 	ldw	r2,-968(fp)
81103960:	10a0003c 	xorhi	r2,r2,32768
81103964:	014fc034 	movhi	r5,16128
81103968:	1009883a 	mov	r4,r2
8110396c:	11107b40 	call	811107b4 <__mulsf3>
81103970:	1007883a 	mov	r3,r2
81103974:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103978:	e0ff3a04 	addi	r3,fp,-792
8110397c:	e0bf0c17 	ldw	r2,-976(fp)
81103980:	100491ba 	slli	r2,r2,6
81103984:	18a1883a 	add	r16,r3,r2
81103988:	e0bf0c17 	ldw	r2,-976(fp)
8110398c:	1085883a 	add	r2,r2,r2
81103990:	1085883a 	add	r2,r2,r2
81103994:	e0ff0c04 	addi	r3,fp,-976
81103998:	1885883a 	add	r2,r3,r2
8110399c:	10800a04 	addi	r2,r2,40
811039a0:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
811039a4:	1023883a 	mov	r17,r2
811039a8:	e13f1317 	ldw	r4,-948(fp)
811039ac:	11114fc0 	call	811114fc <__extendsfdf2>
811039b0:	1009883a 	mov	r4,r2
811039b4:	180b883a 	mov	r5,r3
811039b8:	d9000015 	stw	r4,0(sp)
811039bc:	d9400115 	stw	r5,4(sp)
811039c0:	880f883a 	mov	r7,r17
811039c4:	800d883a 	mov	r6,r16
811039c8:	01604534 	movhi	r5,33044
811039cc:	29710b04 	addi	r5,r5,-15316
811039d0:	01204534 	movhi	r4,33044
811039d4:	2102da04 	addi	r4,r4,2920
811039d8:	11130e40 	call	811130e4 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
811039dc:	d0a04d17 	ldw	r2,-32460(gp)
811039e0:	01604534 	movhi	r5,33044
811039e4:	2942da04 	addi	r5,r5,2920
811039e8:	1009883a 	mov	r4,r2
811039ec:	111197c0 	call	8111197c <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811039f0:	e0bf0c17 	ldw	r2,-976(fp)
811039f4:	10800044 	addi	r2,r2,1
811039f8:	e0bf0c15 	stw	r2,-976(fp)
811039fc:	e0bf0c17 	ldw	r2,-976(fp)
81103a00:	10800308 	cmpgei	r2,r2,12
81103a04:	1000021e 	bne	r2,zero,81103a10 <sense_log+0x6d0>
81103a08:	e0bf0f17 	ldw	r2,-964(fp)
81103a0c:	103eaf1e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a10:	00a04534 	movhi	r2,33044
81103a14:	1082da04 	addi	r2,r2,2920
81103a18:	00c00344 	movi	r3,13
81103a1c:	10c00005 	stb	r3,0(r2)
81103a20:	00c00284 	movi	r3,10
81103a24:	10c00045 	stb	r3,1(r2)
81103a28:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a2c:	d0a04d17 	ldw	r2,-32460(gp)
81103a30:	01604534 	movhi	r5,33044
81103a34:	2942da04 	addi	r5,r5,2920
81103a38:	1009883a 	mov	r4,r2
81103a3c:	111197c0 	call	8111197c <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103a40:	00001606 	br	81103a9c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103a44:	00a04534 	movhi	r2,33044
81103a48:	1082da04 	addi	r2,r2,2920
81103a4c:	00c01144 	movi	r3,69
81103a50:	10c00005 	stb	r3,0(r2)
81103a54:	00c01c84 	movi	r3,114
81103a58:	10c00045 	stb	r3,1(r2)
81103a5c:	00c01c84 	movi	r3,114
81103a60:	10c00085 	stb	r3,2(r2)
81103a64:	00c01bc4 	movi	r3,111
81103a68:	10c000c5 	stb	r3,3(r2)
81103a6c:	00c01c84 	movi	r3,114
81103a70:	10c00105 	stb	r3,4(r2)
81103a74:	00c00344 	movi	r3,13
81103a78:	10c00145 	stb	r3,5(r2)
81103a7c:	00c00284 	movi	r3,10
81103a80:	10c00185 	stb	r3,6(r2)
81103a84:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103a88:	d0a04d17 	ldw	r2,-32460(gp)
81103a8c:	01604534 	movhi	r5,33044
81103a90:	2942da04 	addi	r5,r5,2920
81103a94:	1009883a 	mov	r4,r2
81103a98:	111197c0 	call	8111197c <fprintf>
#endif
	}
}
81103a9c:	0001883a 	nop
81103aa0:	e6fffa04 	addi	sp,fp,-24
81103aa4:	dfc00717 	ldw	ra,28(sp)
81103aa8:	df000617 	ldw	fp,24(sp)
81103aac:	dd400517 	ldw	r21,20(sp)
81103ab0:	dd000417 	ldw	r20,16(sp)
81103ab4:	dcc00317 	ldw	r19,12(sp)
81103ab8:	dc800217 	ldw	r18,8(sp)
81103abc:	dc400117 	ldw	r17,4(sp)
81103ac0:	dc000017 	ldw	r16,0(sp)
81103ac4:	dec00804 	addi	sp,sp,32
81103ac8:	f800283a 	ret

81103acc <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103acc:	defffc04 	addi	sp,sp,-16
81103ad0:	de00012e 	bgeu	sp,et,81103ad8 <bSdmaInitM1Dma+0xc>
81103ad4:	003b68fa 	trap	3
81103ad8:	dfc00315 	stw	ra,12(sp)
81103adc:	df000215 	stw	fp,8(sp)
81103ae0:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103ae4:	00800044 	movi	r2,1
81103ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103aec:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103af0:	01204534 	movhi	r4,33044
81103af4:	2131d404 	addi	r4,r4,-14512
81103af8:	1139ec00 	call	81139ec0 <alt_msgdma_open>
81103afc:	d0a03815 	stw	r2,-32544(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b00:	d0a03817 	ldw	r2,-32544(gp)
81103b04:	1000021e 	bne	r2,zero,81103b10 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b08:	e03ffe15 	stw	zero,-8(fp)
81103b0c:	00001506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b10:	d0a03817 	ldw	r2,-32544(gp)
81103b14:	10800317 	ldw	r2,12(r2)
81103b18:	10800104 	addi	r2,r2,4
81103b1c:	00c00084 	movi	r3,2
81103b20:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b24:	00000a06 	br	81103b50 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b28:	01000044 	movi	r4,1
81103b2c:	1127e440 	call	81127e44 <usleep>
			usiCounter++;
81103b30:	e0bfff0b 	ldhu	r2,-4(fp)
81103b34:	10800044 	addi	r2,r2,1
81103b38:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103b3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103b40:	1084e230 	cmpltui	r2,r2,5000
81103b44:	1000021e 	bne	r2,zero,81103b50 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103b48:	e03ffe15 	stw	zero,-8(fp)
				break;
81103b4c:	00000506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b50:	d0a03817 	ldw	r2,-32544(gp)
81103b54:	10800317 	ldw	r2,12(r2)
81103b58:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103b5c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b60:	103ff11e 	bne	r2,zero,81103b28 <__reset+0xfb0e3b28>
				break;
			}
		}
	}

	return bStatus;
81103b64:	e0bffe17 	ldw	r2,-8(fp)
}
81103b68:	e037883a 	mov	sp,fp
81103b6c:	dfc00117 	ldw	ra,4(sp)
81103b70:	df000017 	ldw	fp,0(sp)
81103b74:	dec00204 	addi	sp,sp,8
81103b78:	f800283a 	ret

81103b7c <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103b7c:	defffc04 	addi	sp,sp,-16
81103b80:	de00012e 	bgeu	sp,et,81103b88 <bSdmaInitM2Dma+0xc>
81103b84:	003b68fa 	trap	3
81103b88:	dfc00315 	stw	ra,12(sp)
81103b8c:	df000215 	stw	fp,8(sp)
81103b90:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b94:	00800044 	movi	r2,1
81103b98:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b9c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103ba0:	01204534 	movhi	r4,33044
81103ba4:	2131d904 	addi	r4,r4,-14492
81103ba8:	1139ec00 	call	81139ec0 <alt_msgdma_open>
81103bac:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103bb0:	d0a03917 	ldw	r2,-32540(gp)
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
81103bbc:	00001506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800104 	addi	r2,r2,4
81103bcc:	00c00084 	movi	r3,2
81103bd0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103bd4:	00000a06 	br	81103c00 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103bd8:	01000044 	movi	r4,1
81103bdc:	1127e440 	call	81127e44 <usleep>
			usiCounter++;
81103be0:	e0bfff0b 	ldhu	r2,-4(fp)
81103be4:	10800044 	addi	r2,r2,1
81103be8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bec:	e0bfff0b 	ldhu	r2,-4(fp)
81103bf0:	1084e230 	cmpltui	r2,r2,5000
81103bf4:	1000021e 	bne	r2,zero,81103c00 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103bf8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bfc:	00000506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c00:	d0a03917 	ldw	r2,-32540(gp)
81103c04:	10800317 	ldw	r2,12(r2)
81103c08:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c0c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c10:	103ff11e 	bne	r2,zero,81103bd8 <__reset+0xfb0e3bd8>
				break;
			}
		}
	}

	return bStatus;
81103c14:	e0bffe17 	ldw	r2,-8(fp)
}
81103c18:	e037883a 	mov	sp,fp
81103c1c:	dfc00117 	ldw	ra,4(sp)
81103c20:	df000017 	ldw	fp,0(sp)
81103c24:	dec00204 	addi	sp,sp,8
81103c28:	f800283a 	ret

81103c2c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c2c:	deffe904 	addi	sp,sp,-92
81103c30:	de00012e 	bgeu	sp,et,81103c38 <bSdmaDmaM1Transfer+0xc>
81103c34:	003b68fa 	trap	3
81103c38:	dfc01615 	stw	ra,88(sp)
81103c3c:	df001515 	stw	fp,84(sp)
81103c40:	dc001415 	stw	r16,80(sp)
81103c44:	df001504 	addi	fp,sp,84
81103c48:	e13ffb15 	stw	r4,-20(fp)
81103c4c:	2809883a 	mov	r4,r5
81103c50:	3007883a 	mov	r3,r6
81103c54:	3805883a 	mov	r2,r7
81103c58:	e13ffc0d 	sth	r4,-16(fp)
81103c5c:	e0fffd05 	stb	r3,-12(fp)
81103c60:	e0bffe05 	stb	r2,-8(fp)
81103c64:	defff004 	addi	sp,sp,-64
81103c68:	d8800904 	addi	r2,sp,36
81103c6c:	108007c4 	addi	r2,r2,31
81103c70:	1004d17a 	srli	r2,r2,5
81103c74:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103c80:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103c84:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103c88:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103c8c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103c90:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103c94:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103c98:	e0bffe03 	ldbu	r2,-8(fp)
81103c9c:	10c00268 	cmpgeui	r3,r2,9
81103ca0:	1800a51e 	bne	r3,zero,81103f38 <bSdmaDmaM1Transfer+0x30c>
81103ca4:	100690ba 	slli	r3,r2,2
81103ca8:	00a04434 	movhi	r2,33040
81103cac:	108f2f04 	addi	r2,r2,15548
81103cb0:	1885883a 	add	r2,r3,r2
81103cb4:	10800017 	ldw	r2,0(r2)
81103cb8:	1000683a 	jmp	r2
81103cbc:	81103f38 	rdprs	r4,r16,16636
81103cc0:	81103ce0 	cmpeqi	r4,r16,16627
81103cc4:	81103d24 	muli	r4,r16,16628
81103cc8:	81103d70 	cmpltui	r4,r16,16629
81103ccc:	81103dbc 	xorhi	r4,r16,16630
81103cd0:	81103e08 	cmpgei	r4,r16,16632
81103cd4:	81103e54 	ori	r4,r16,16633
81103cd8:	81103ea0 	cmpeqi	r4,r16,16634
81103cdc:	81103eec 	andhi	r4,r16,16635
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ce0:	e0bffd03 	ldbu	r2,-12(fp)
81103ce4:	10000326 	beq	r2,zero,81103cf4 <bSdmaDmaM1Transfer+0xc8>
81103ce8:	10800060 	cmpeqi	r2,r2,1
81103cec:	1000051e 	bne	r2,zero,81103d04 <bSdmaDmaM1Transfer+0xd8>
81103cf0:	00000906 	br	81103d18 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103cf4:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103cf8:	00800044 	movi	r2,1
81103cfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103d00:	00000706 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d04:	00800074 	movhi	r2,1
81103d08:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d0c:	00800044 	movi	r2,1
81103d10:	e0bff715 	stw	r2,-36(fp)
			break;
81103d14:	00000206 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d18:	e03ff415 	stw	zero,-48(fp)
			break;
81103d1c:	0001883a 	nop
		}
		break;
81103d20:	00008706 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d24:	e0bffd03 	ldbu	r2,-12(fp)
81103d28:	10000326 	beq	r2,zero,81103d38 <bSdmaDmaM1Transfer+0x10c>
81103d2c:	10800060 	cmpeqi	r2,r2,1
81103d30:	1000061e 	bne	r2,zero,81103d4c <bSdmaDmaM1Transfer+0x120>
81103d34:	00000b06 	br	81103d64 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103d38:	00880004 	movi	r2,8192
81103d3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103d40:	00800044 	movi	r2,1
81103d44:	e0bff715 	stw	r2,-36(fp)
			break;
81103d48:	00000806 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103d4c:	00800074 	movhi	r2,1
81103d50:	10880004 	addi	r2,r2,8192
81103d54:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103d58:	00800044 	movi	r2,1
81103d5c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d60:	00000206 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103d64:	e03ff415 	stw	zero,-48(fp)
			break;
81103d68:	0001883a 	nop
		}
		break;
81103d6c:	00007406 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103d70:	e0bffd03 	ldbu	r2,-12(fp)
81103d74:	10000326 	beq	r2,zero,81103d84 <bSdmaDmaM1Transfer+0x158>
81103d78:	10800060 	cmpeqi	r2,r2,1
81103d7c:	1000061e 	bne	r2,zero,81103d98 <bSdmaDmaM1Transfer+0x16c>
81103d80:	00000b06 	br	81103db0 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103d84:	00900004 	movi	r2,16384
81103d88:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103d8c:	00800044 	movi	r2,1
81103d90:	e0bff715 	stw	r2,-36(fp)
			break;
81103d94:	00000806 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103d98:	00800074 	movhi	r2,1
81103d9c:	10900004 	addi	r2,r2,16384
81103da0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103da4:	00800044 	movi	r2,1
81103da8:	e0bff715 	stw	r2,-36(fp)
			break;
81103dac:	00000206 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
			break;
81103db4:	0001883a 	nop
		}
		break;
81103db8:	00006106 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103dbc:	e0bffd03 	ldbu	r2,-12(fp)
81103dc0:	10000326 	beq	r2,zero,81103dd0 <bSdmaDmaM1Transfer+0x1a4>
81103dc4:	10800060 	cmpeqi	r2,r2,1
81103dc8:	1000061e 	bne	r2,zero,81103de4 <bSdmaDmaM1Transfer+0x1b8>
81103dcc:	00000b06 	br	81103dfc <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103dd0:	00980004 	movi	r2,24576
81103dd4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103dd8:	00800044 	movi	r2,1
81103ddc:	e0bff715 	stw	r2,-36(fp)
			break;
81103de0:	00000806 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103de4:	00800074 	movhi	r2,1
81103de8:	10980004 	addi	r2,r2,24576
81103dec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103df0:	00800044 	movi	r2,1
81103df4:	e0bff715 	stw	r2,-36(fp)
			break;
81103df8:	00000206 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103dfc:	e03ff415 	stw	zero,-48(fp)
			break;
81103e00:	0001883a 	nop
		}
		break;
81103e04:	00004e06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e08:	e0bffd03 	ldbu	r2,-12(fp)
81103e0c:	10000326 	beq	r2,zero,81103e1c <bSdmaDmaM1Transfer+0x1f0>
81103e10:	10800060 	cmpeqi	r2,r2,1
81103e14:	1000061e 	bne	r2,zero,81103e30 <bSdmaDmaM1Transfer+0x204>
81103e18:	00000b06 	br	81103e48 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e1c:	00a00014 	movui	r2,32768
81103e20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e24:	00800044 	movi	r2,1
81103e28:	e0bff715 	stw	r2,-36(fp)
			break;
81103e2c:	00000806 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103e30:	008000b4 	movhi	r2,2
81103e34:	10a00004 	addi	r2,r2,-32768
81103e38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103e3c:	00800044 	movi	r2,1
81103e40:	e0bff715 	stw	r2,-36(fp)
			break;
81103e44:	00000206 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103e48:	e03ff415 	stw	zero,-48(fp)
			break;
81103e4c:	0001883a 	nop
		}
		break;
81103e50:	00003b06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103e54:	e0bffd03 	ldbu	r2,-12(fp)
81103e58:	10000326 	beq	r2,zero,81103e68 <bSdmaDmaM1Transfer+0x23c>
81103e5c:	10800060 	cmpeqi	r2,r2,1
81103e60:	1000061e 	bne	r2,zero,81103e7c <bSdmaDmaM1Transfer+0x250>
81103e64:	00000b06 	br	81103e94 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103e68:	00a80014 	movui	r2,40960
81103e6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103e70:	00800044 	movi	r2,1
81103e74:	e0bff715 	stw	r2,-36(fp)
			break;
81103e78:	00000806 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103e7c:	008000b4 	movhi	r2,2
81103e80:	10a80004 	addi	r2,r2,-24576
81103e84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e90:	00000206 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103e94:	e03ff415 	stw	zero,-48(fp)
			break;
81103e98:	0001883a 	nop
		}
		break;
81103e9c:	00002806 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103ea0:	e0bffd03 	ldbu	r2,-12(fp)
81103ea4:	10000326 	beq	r2,zero,81103eb4 <bSdmaDmaM1Transfer+0x288>
81103ea8:	10800060 	cmpeqi	r2,r2,1
81103eac:	1000061e 	bne	r2,zero,81103ec8 <bSdmaDmaM1Transfer+0x29c>
81103eb0:	00000b06 	br	81103ee0 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103eb4:	00b00014 	movui	r2,49152
81103eb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103ebc:	00800044 	movi	r2,1
81103ec0:	e0bff715 	stw	r2,-36(fp)
			break;
81103ec4:	00000806 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103ec8:	008000b4 	movhi	r2,2
81103ecc:	10b00004 	addi	r2,r2,-16384
81103ed0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103ed4:	00800044 	movi	r2,1
81103ed8:	e0bff715 	stw	r2,-36(fp)
			break;
81103edc:	00000206 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103ee0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ee4:	0001883a 	nop
		}
		break;
81103ee8:	00001506 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103eec:	e0bffd03 	ldbu	r2,-12(fp)
81103ef0:	10000326 	beq	r2,zero,81103f00 <bSdmaDmaM1Transfer+0x2d4>
81103ef4:	10800060 	cmpeqi	r2,r2,1
81103ef8:	1000061e 	bne	r2,zero,81103f14 <bSdmaDmaM1Transfer+0x2e8>
81103efc:	00000b06 	br	81103f2c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f00:	00b80014 	movui	r2,57344
81103f04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f08:	00800044 	movi	r2,1
81103f0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f10:	00000806 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f14:	008000b4 	movhi	r2,2
81103f18:	10b80004 	addi	r2,r2,-8192
81103f1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f20:	00800044 	movi	r2,1
81103f24:	e0bff715 	stw	r2,-36(fp)
			break;
81103f28:	00000206 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103f30:	0001883a 	nop
		}
		break;
81103f34:	00000206 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103f38:	e03ff415 	stw	zero,-48(fp)
		break;
81103f3c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103f40:	e0bffb17 	ldw	r2,-20(fp)
81103f44:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103f48:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103f4c:	e0bff417 	ldw	r2,-48(fp)
81103f50:	10003b26 	beq	r2,zero,81104040 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103f54:	d0a03817 	ldw	r2,-32544(gp)
81103f58:	1000021e 	bne	r2,zero,81103f64 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103f5c:	e03ff415 	stw	zero,-48(fp)
81103f60:	00003706 	br	81104040 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103f64:	e03ff50d 	sth	zero,-44(fp)
81103f68:	00003206 	br	81104034 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103f6c:	01000044 	movi	r4,1
81103f70:	1126f740 	call	81126f74 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103f74:	d0a03817 	ldw	r2,-32544(gp)
81103f78:	10800317 	ldw	r2,12(r2)
81103f7c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103f80:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103f84:	103ff91e 	bne	r2,zero,81103f6c <__reset+0xfb0e3f6c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103f88:	d2203817 	ldw	r8,-32544(gp)
81103f8c:	e17ff817 	ldw	r5,-32(fp)
81103f90:	e1bff617 	ldw	r6,-40(fp)
81103f94:	e0bff917 	ldw	r2,-28(fp)
81103f98:	e0fff717 	ldw	r3,-36(fp)
81103f9c:	01000044 	movi	r4,1
81103fa0:	d9000815 	stw	r4,32(sp)
81103fa4:	01000044 	movi	r4,1
81103fa8:	d9000715 	stw	r4,28(sp)
81103fac:	01000044 	movi	r4,1
81103fb0:	d9000615 	stw	r4,24(sp)
81103fb4:	01000044 	movi	r4,1
81103fb8:	d9000515 	stw	r4,20(sp)
81103fbc:	01000044 	movi	r4,1
81103fc0:	d9000415 	stw	r4,16(sp)
81103fc4:	d8c00315 	stw	r3,12(sp)
81103fc8:	d8800215 	stw	r2,8(sp)
81103fcc:	e0bffa17 	ldw	r2,-24(fp)
81103fd0:	d8800115 	stw	r2,4(sp)
81103fd4:	00802204 	movi	r2,136
81103fd8:	d8800015 	stw	r2,0(sp)
81103fdc:	300f883a 	mov	r7,r6
81103fe0:	280d883a 	mov	r6,r5
81103fe4:	800b883a 	mov	r5,r16
81103fe8:	4009883a 	mov	r4,r8
81103fec:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103ff0:	10000226 	beq	r2,zero,81103ffc <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103ff4:	e03ff415 	stw	zero,-48(fp)
					break;
81103ff8:	00001106 	br	81104040 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
81103ffc:	d0a03817 	ldw	r2,-32544(gp)
81104000:	800b883a 	mov	r5,r16
81104004:	1009883a 	mov	r4,r2
81104008:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
8110400c:	10000226 	beq	r2,zero,81104018 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104010:	e03ff415 	stw	zero,-48(fp)
						break;
81104014:	00000a06 	br	81104040 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104018:	e0bff817 	ldw	r2,-32(fp)
8110401c:	10802204 	addi	r2,r2,136
81104020:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104024:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104028:	e0bff50b 	ldhu	r2,-44(fp)
8110402c:	10800044 	addi	r2,r2,1
81104030:	e0bff50d 	sth	r2,-44(fp)
81104034:	e0fff50b 	ldhu	r3,-44(fp)
81104038:	e0bffc0b 	ldhu	r2,-16(fp)
8110403c:	18bfcd36 	bltu	r3,r2,81103f74 <__reset+0xfb0e3f74>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104040:	e0bff417 	ldw	r2,-48(fp)
}
81104044:	e6ffff04 	addi	sp,fp,-4
81104048:	dfc00217 	ldw	ra,8(sp)
8110404c:	df000117 	ldw	fp,4(sp)
81104050:	dc000017 	ldw	r16,0(sp)
81104054:	dec00304 	addi	sp,sp,12
81104058:	f800283a 	ret

8110405c <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
8110405c:	deffe904 	addi	sp,sp,-92
81104060:	de00012e 	bgeu	sp,et,81104068 <bSdmaDmaM2Transfer+0xc>
81104064:	003b68fa 	trap	3
81104068:	dfc01615 	stw	ra,88(sp)
8110406c:	df001515 	stw	fp,84(sp)
81104070:	dc001415 	stw	r16,80(sp)
81104074:	df001504 	addi	fp,sp,84
81104078:	e13ffb15 	stw	r4,-20(fp)
8110407c:	2809883a 	mov	r4,r5
81104080:	3007883a 	mov	r3,r6
81104084:	3805883a 	mov	r2,r7
81104088:	e13ffc0d 	sth	r4,-16(fp)
8110408c:	e0fffd05 	stb	r3,-12(fp)
81104090:	e0bffe05 	stb	r2,-8(fp)
81104094:	defff004 	addi	sp,sp,-64
81104098:	d8800904 	addi	r2,sp,36
8110409c:	108007c4 	addi	r2,r2,31
811040a0:	1004d17a 	srli	r2,r2,5
811040a4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811040a8:	00800044 	movi	r2,1
811040ac:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811040b0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811040b4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811040b8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811040bc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
811040c0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
811040c4:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10c00268 	cmpgeui	r3,r2,9
811040d0:	1800a51e 	bne	r3,zero,81104368 <bSdmaDmaM2Transfer+0x30c>
811040d4:	100690ba 	slli	r3,r2,2
811040d8:	00a04434 	movhi	r2,33040
811040dc:	10903b04 	addi	r2,r2,16620
811040e0:	1885883a 	add	r2,r3,r2
811040e4:	10800017 	ldw	r2,0(r2)
811040e8:	1000683a 	jmp	r2
811040ec:	81104368 	cmpgeui	r4,r16,16653
811040f0:	81104110 	cmplti	r4,r16,16644
811040f4:	81104154 	ori	r4,r16,16645
811040f8:	811041a0 	cmpeqi	r4,r16,16646
811040fc:	811041ec 	andhi	r4,r16,16647
81104100:	81104238 	rdprs	r4,r16,16648
81104104:	81104284 	addi	r4,r16,16650
81104108:	811042d0 	cmplti	r4,r16,16651
8110410c:	8110431c 	xori	r4,r16,16652
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104110:	e0bffd03 	ldbu	r2,-12(fp)
81104114:	10000326 	beq	r2,zero,81104124 <bSdmaDmaM2Transfer+0xc8>
81104118:	10800060 	cmpeqi	r2,r2,1
8110411c:	1000051e 	bne	r2,zero,81104134 <bSdmaDmaM2Transfer+0xd8>
81104120:	00000906 	br	81104148 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104124:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104128:	00800044 	movi	r2,1
8110412c:	e0bff715 	stw	r2,-36(fp)
			break;
81104130:	00000706 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81104134:	00800074 	movhi	r2,1
81104138:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110413c:	00800044 	movi	r2,1
81104140:	e0bff715 	stw	r2,-36(fp)
			break;
81104144:	00000206 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
81104148:	e03ff415 	stw	zero,-48(fp)
			break;
8110414c:	0001883a 	nop
		}
		break;
81104150:	00008706 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81104154:	e0bffd03 	ldbu	r2,-12(fp)
81104158:	10000326 	beq	r2,zero,81104168 <bSdmaDmaM2Transfer+0x10c>
8110415c:	10800060 	cmpeqi	r2,r2,1
81104160:	1000061e 	bne	r2,zero,8110417c <bSdmaDmaM2Transfer+0x120>
81104164:	00000b06 	br	81104194 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81104168:	00880004 	movi	r2,8192
8110416c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81104170:	00800044 	movi	r2,1
81104174:	e0bff715 	stw	r2,-36(fp)
			break;
81104178:	00000806 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8110417c:	00800074 	movhi	r2,1
81104180:	10880004 	addi	r2,r2,8192
81104184:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81104188:	00800044 	movi	r2,1
8110418c:	e0bff715 	stw	r2,-36(fp)
			break;
81104190:	00000206 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104194:	e03ff415 	stw	zero,-48(fp)
			break;
81104198:	0001883a 	nop
		}
		break;
8110419c:	00007406 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811041a0:	e0bffd03 	ldbu	r2,-12(fp)
811041a4:	10000326 	beq	r2,zero,811041b4 <bSdmaDmaM2Transfer+0x158>
811041a8:	10800060 	cmpeqi	r2,r2,1
811041ac:	1000061e 	bne	r2,zero,811041c8 <bSdmaDmaM2Transfer+0x16c>
811041b0:	00000b06 	br	811041e0 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811041b4:	00900004 	movi	r2,16384
811041b8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811041bc:	00800044 	movi	r2,1
811041c0:	e0bff715 	stw	r2,-36(fp)
			break;
811041c4:	00000806 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
811041c8:	00800074 	movhi	r2,1
811041cc:	10900004 	addi	r2,r2,16384
811041d0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
811041d4:	00800044 	movi	r2,1
811041d8:	e0bff715 	stw	r2,-36(fp)
			break;
811041dc:	00000206 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
811041e0:	e03ff415 	stw	zero,-48(fp)
			break;
811041e4:	0001883a 	nop
		}
		break;
811041e8:	00006106 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
811041ec:	e0bffd03 	ldbu	r2,-12(fp)
811041f0:	10000326 	beq	r2,zero,81104200 <bSdmaDmaM2Transfer+0x1a4>
811041f4:	10800060 	cmpeqi	r2,r2,1
811041f8:	1000061e 	bne	r2,zero,81104214 <bSdmaDmaM2Transfer+0x1b8>
811041fc:	00000b06 	br	8110422c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104200:	00980004 	movi	r2,24576
81104204:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104208:	00800044 	movi	r2,1
8110420c:	e0bff715 	stw	r2,-36(fp)
			break;
81104210:	00000806 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104214:	00800074 	movhi	r2,1
81104218:	10980004 	addi	r2,r2,24576
8110421c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104220:	00800044 	movi	r2,1
81104224:	e0bff715 	stw	r2,-36(fp)
			break;
81104228:	00000206 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110422c:	e03ff415 	stw	zero,-48(fp)
			break;
81104230:	0001883a 	nop
		}
		break;
81104234:	00004e06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81104238:	e0bffd03 	ldbu	r2,-12(fp)
8110423c:	10000326 	beq	r2,zero,8110424c <bSdmaDmaM2Transfer+0x1f0>
81104240:	10800060 	cmpeqi	r2,r2,1
81104244:	1000061e 	bne	r2,zero,81104260 <bSdmaDmaM2Transfer+0x204>
81104248:	00000b06 	br	81104278 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110424c:	00a00014 	movui	r2,32768
81104250:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81104254:	00800044 	movi	r2,1
81104258:	e0bff715 	stw	r2,-36(fp)
			break;
8110425c:	00000806 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81104260:	008000b4 	movhi	r2,2
81104264:	10a00004 	addi	r2,r2,-32768
81104268:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8110426c:	00800044 	movi	r2,1
81104270:	e0bff715 	stw	r2,-36(fp)
			break;
81104274:	00000206 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
81104278:	e03ff415 	stw	zero,-48(fp)
			break;
8110427c:	0001883a 	nop
		}
		break;
81104280:	00003b06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81104284:	e0bffd03 	ldbu	r2,-12(fp)
81104288:	10000326 	beq	r2,zero,81104298 <bSdmaDmaM2Transfer+0x23c>
8110428c:	10800060 	cmpeqi	r2,r2,1
81104290:	1000061e 	bne	r2,zero,811042ac <bSdmaDmaM2Transfer+0x250>
81104294:	00000b06 	br	811042c4 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104298:	00a80014 	movui	r2,40960
8110429c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811042a0:	00800044 	movi	r2,1
811042a4:	e0bff715 	stw	r2,-36(fp)
			break;
811042a8:	00000806 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811042ac:	008000b4 	movhi	r2,2
811042b0:	10a80004 	addi	r2,r2,-24576
811042b4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bff715 	stw	r2,-36(fp)
			break;
811042c0:	00000206 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
811042c4:	e03ff415 	stw	zero,-48(fp)
			break;
811042c8:	0001883a 	nop
		}
		break;
811042cc:	00002806 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
811042d0:	e0bffd03 	ldbu	r2,-12(fp)
811042d4:	10000326 	beq	r2,zero,811042e4 <bSdmaDmaM2Transfer+0x288>
811042d8:	10800060 	cmpeqi	r2,r2,1
811042dc:	1000061e 	bne	r2,zero,811042f8 <bSdmaDmaM2Transfer+0x29c>
811042e0:	00000b06 	br	81104310 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
811042e4:	00b00014 	movui	r2,49152
811042e8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
811042ec:	00800044 	movi	r2,1
811042f0:	e0bff715 	stw	r2,-36(fp)
			break;
811042f4:	00000806 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
811042f8:	008000b4 	movhi	r2,2
811042fc:	10b00004 	addi	r2,r2,-16384
81104300:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104304:	00800044 	movi	r2,1
81104308:	e0bff715 	stw	r2,-36(fp)
			break;
8110430c:	00000206 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104310:	e03ff415 	stw	zero,-48(fp)
			break;
81104314:	0001883a 	nop
		}
		break;
81104318:	00001506 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110431c:	e0bffd03 	ldbu	r2,-12(fp)
81104320:	10000326 	beq	r2,zero,81104330 <bSdmaDmaM2Transfer+0x2d4>
81104324:	10800060 	cmpeqi	r2,r2,1
81104328:	1000061e 	bne	r2,zero,81104344 <bSdmaDmaM2Transfer+0x2e8>
8110432c:	00000b06 	br	8110435c <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81104330:	00b80014 	movui	r2,57344
81104334:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81104338:	00800044 	movi	r2,1
8110433c:	e0bff715 	stw	r2,-36(fp)
			break;
81104340:	00000806 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81104344:	008000b4 	movhi	r2,2
81104348:	10b80004 	addi	r2,r2,-8192
8110434c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81104350:	00800044 	movi	r2,1
81104354:	e0bff715 	stw	r2,-36(fp)
			break;
81104358:	00000206 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
8110435c:	e03ff415 	stw	zero,-48(fp)
			break;
81104360:	0001883a 	nop
		}
		break;
81104364:	00000206 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
81104368:	e03ff415 	stw	zero,-48(fp)
		break;
8110436c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81104370:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81104374:	00a00034 	movhi	r2,32768
81104378:	1885883a 	add	r2,r3,r2
8110437c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81104380:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81104384:	e0bff417 	ldw	r2,-48(fp)
81104388:	10003b26 	beq	r2,zero,81104478 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
8110438c:	d0a03917 	ldw	r2,-32540(gp)
81104390:	1000021e 	bne	r2,zero,8110439c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104394:	e03ff415 	stw	zero,-48(fp)
81104398:	00003706 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110439c:	e03ff50d 	sth	zero,-44(fp)
811043a0:	00003206 	br	8110446c <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811043a4:	01000044 	movi	r4,1
811043a8:	1126f740 	call	81126f74 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
811043ac:	d0a03917 	ldw	r2,-32540(gp)
811043b0:	10800317 	ldw	r2,12(r2)
811043b4:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811043b8:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811043bc:	103ff91e 	bne	r2,zero,811043a4 <__reset+0xfb0e43a4>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
811043c0:	d2203917 	ldw	r8,-32540(gp)
811043c4:	e17ff817 	ldw	r5,-32(fp)
811043c8:	e1bff617 	ldw	r6,-40(fp)
811043cc:	e0bff917 	ldw	r2,-28(fp)
811043d0:	e0fff717 	ldw	r3,-36(fp)
811043d4:	01000044 	movi	r4,1
811043d8:	d9000815 	stw	r4,32(sp)
811043dc:	01000044 	movi	r4,1
811043e0:	d9000715 	stw	r4,28(sp)
811043e4:	01000044 	movi	r4,1
811043e8:	d9000615 	stw	r4,24(sp)
811043ec:	01000044 	movi	r4,1
811043f0:	d9000515 	stw	r4,20(sp)
811043f4:	01000044 	movi	r4,1
811043f8:	d9000415 	stw	r4,16(sp)
811043fc:	d8c00315 	stw	r3,12(sp)
81104400:	d8800215 	stw	r2,8(sp)
81104404:	e0bffa17 	ldw	r2,-24(fp)
81104408:	d8800115 	stw	r2,4(sp)
8110440c:	00802204 	movi	r2,136
81104410:	d8800015 	stw	r2,0(sp)
81104414:	300f883a 	mov	r7,r6
81104418:	280d883a 	mov	r6,r5
8110441c:	800b883a 	mov	r5,r16
81104420:	4009883a 	mov	r4,r8
81104424:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104428:	10000226 	beq	r2,zero,81104434 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110442c:	e03ff415 	stw	zero,-48(fp)
					break;
81104430:	00001106 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81104434:	d0a03917 	ldw	r2,-32540(gp)
81104438:	800b883a 	mov	r5,r16
8110443c:	1009883a 	mov	r4,r2
81104440:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
81104444:	10000226 	beq	r2,zero,81104450 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104448:	e03ff415 	stw	zero,-48(fp)
						break;
8110444c:	00000a06 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104450:	e0bff817 	ldw	r2,-32(fp)
81104454:	10802204 	addi	r2,r2,136
81104458:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
8110445c:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104460:	e0bff50b 	ldhu	r2,-44(fp)
81104464:	10800044 	addi	r2,r2,1
81104468:	e0bff50d 	sth	r2,-44(fp)
8110446c:	e0fff50b 	ldhu	r3,-44(fp)
81104470:	e0bffc0b 	ldhu	r2,-16(fp)
81104474:	18bfcd36 	bltu	r3,r2,811043ac <__reset+0xfb0e43ac>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104478:	e0bff417 	ldw	r2,-48(fp)
}
8110447c:	e6ffff04 	addi	sp,fp,-4
81104480:	dfc00217 	ldw	ra,8(sp)
81104484:	df000117 	ldw	fp,4(sp)
81104488:	dc000017 	ldw	r16,0(sp)
8110448c:	dec00304 	addi	sp,sp,12
81104490:	f800283a 	ret

81104494 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104494:	defffc04 	addi	sp,sp,-16
81104498:	de00012e 	bgeu	sp,et,811044a0 <vFeebCh1HandleIrq+0xc>
8110449c:	003b68fa 	trap	3
811044a0:	dfc00315 	stw	ra,12(sp)
811044a4:	df000215 	stw	fp,8(sp)
811044a8:	df000204 	addi	fp,sp,8
811044ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044b0:	e0bfff17 	ldw	r2,-4(fp)
811044b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
811044b8:	11046940 	call	81104694 <vFeebCh1IrqFlagClrBufferEmpty>
}
811044bc:	0001883a 	nop
811044c0:	e037883a 	mov	sp,fp
811044c4:	dfc00117 	ldw	ra,4(sp)
811044c8:	df000017 	ldw	fp,0(sp)
811044cc:	dec00204 	addi	sp,sp,8
811044d0:	f800283a 	ret

811044d4 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
811044d4:	defffc04 	addi	sp,sp,-16
811044d8:	de00012e 	bgeu	sp,et,811044e0 <vFeebCh2HandleIrq+0xc>
811044dc:	003b68fa 	trap	3
811044e0:	dfc00315 	stw	ra,12(sp)
811044e4:	df000215 	stw	fp,8(sp)
811044e8:	df000204 	addi	fp,sp,8
811044ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044f0:	e0bfff17 	ldw	r2,-4(fp)
811044f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
811044f8:	11046d80 	call	811046d8 <vFeebCh2IrqFlagClrBufferEmpty>
}
811044fc:	0001883a 	nop
81104500:	e037883a 	mov	sp,fp
81104504:	dfc00117 	ldw	ra,4(sp)
81104508:	df000017 	ldw	fp,0(sp)
8110450c:	dec00204 	addi	sp,sp,8
81104510:	f800283a 	ret

81104514 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104514:	defffc04 	addi	sp,sp,-16
81104518:	de00012e 	bgeu	sp,et,81104520 <vFeebCh3HandleIrq+0xc>
8110451c:	003b68fa 	trap	3
81104520:	dfc00315 	stw	ra,12(sp)
81104524:	df000215 	stw	fp,8(sp)
81104528:	df000204 	addi	fp,sp,8
8110452c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104530:	e0bfff17 	ldw	r2,-4(fp)
81104534:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81104538:	110471c0 	call	8110471c <vFeebCh3IrqFlagClrBufferEmpty>
}
8110453c:	0001883a 	nop
81104540:	e037883a 	mov	sp,fp
81104544:	dfc00117 	ldw	ra,4(sp)
81104548:	df000017 	ldw	fp,0(sp)
8110454c:	dec00204 	addi	sp,sp,8
81104550:	f800283a 	ret

81104554 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104554:	defffc04 	addi	sp,sp,-16
81104558:	de00012e 	bgeu	sp,et,81104560 <vFeebCh4HandleIrq+0xc>
8110455c:	003b68fa 	trap	3
81104560:	dfc00315 	stw	ra,12(sp)
81104564:	df000215 	stw	fp,8(sp)
81104568:	df000204 	addi	fp,sp,8
8110456c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104570:	e0bfff17 	ldw	r2,-4(fp)
81104574:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81104578:	11047600 	call	81104760 <vFeebCh4IrqFlagClrBufferEmpty>
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104594:	defffc04 	addi	sp,sp,-16
81104598:	de00012e 	bgeu	sp,et,811045a0 <vFeebCh5HandleIrq+0xc>
8110459c:	003b68fa 	trap	3
811045a0:	dfc00315 	stw	ra,12(sp)
811045a4:	df000215 	stw	fp,8(sp)
811045a8:	df000204 	addi	fp,sp,8
811045ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
811045b8:	11047a40 	call	811047a4 <vFeebCh5IrqFlagClrBufferEmpty>
}
811045bc:	0001883a 	nop
811045c0:	e037883a 	mov	sp,fp
811045c4:	dfc00117 	ldw	ra,4(sp)
811045c8:	df000017 	ldw	fp,0(sp)
811045cc:	dec00204 	addi	sp,sp,8
811045d0:	f800283a 	ret

811045d4 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811045d4:	defffc04 	addi	sp,sp,-16
811045d8:	de00012e 	bgeu	sp,et,811045e0 <vFeebCh6HandleIrq+0xc>
811045dc:	003b68fa 	trap	3
811045e0:	dfc00315 	stw	ra,12(sp)
811045e4:	df000215 	stw	fp,8(sp)
811045e8:	df000204 	addi	fp,sp,8
811045ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
811045f8:	11047e80 	call	811047e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
811045fc:	0001883a 	nop
81104600:	e037883a 	mov	sp,fp
81104604:	dfc00117 	ldw	ra,4(sp)
81104608:	df000017 	ldw	fp,0(sp)
8110460c:	dec00204 	addi	sp,sp,8
81104610:	f800283a 	ret

81104614 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104614:	defffc04 	addi	sp,sp,-16
81104618:	de00012e 	bgeu	sp,et,81104620 <vFeebCh7HandleIrq+0xc>
8110461c:	003b68fa 	trap	3
81104620:	dfc00315 	stw	ra,12(sp)
81104624:	df000215 	stw	fp,8(sp)
81104628:	df000204 	addi	fp,sp,8
8110462c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104630:	e0bfff17 	ldw	r2,-4(fp)
81104634:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81104638:	110482c0 	call	8110482c <vFeebCh7IrqFlagClrBufferEmpty>
}
8110463c:	0001883a 	nop
81104640:	e037883a 	mov	sp,fp
81104644:	dfc00117 	ldw	ra,4(sp)
81104648:	df000017 	ldw	fp,0(sp)
8110464c:	dec00204 	addi	sp,sp,8
81104650:	f800283a 	ret

81104654 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104654:	defffc04 	addi	sp,sp,-16
81104658:	de00012e 	bgeu	sp,et,81104660 <vFeebCh8HandleIrq+0xc>
8110465c:	003b68fa 	trap	3
81104660:	dfc00315 	stw	ra,12(sp)
81104664:	df000215 	stw	fp,8(sp)
81104668:	df000204 	addi	fp,sp,8
8110466c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81104678:	11048700 	call	81104870 <vFeebCh8IrqFlagClrBufferEmpty>
}
8110467c:	0001883a 	nop
81104680:	e037883a 	mov	sp,fp
81104684:	dfc00117 	ldw	ra,4(sp)
81104688:	df000017 	ldw	fp,0(sp)
8110468c:	dec00204 	addi	sp,sp,8
81104690:	f800283a 	ret

81104694 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104694:	defffe04 	addi	sp,sp,-8
81104698:	de00012e 	bgeu	sp,et,811046a0 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110469c:	003b68fa 	trap	3
811046a0:	dfc00115 	stw	ra,4(sp)
811046a4:	df000015 	stw	fp,0(sp)
811046a8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811046ac:	01800044 	movi	r6,1
811046b0:	01400144 	movi	r5,5
811046b4:	01204834 	movhi	r4,33056
811046b8:	210b0004 	addi	r4,r4,11264
811046bc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811046c0:	0001883a 	nop
811046c4:	e037883a 	mov	sp,fp
811046c8:	dfc00117 	ldw	ra,4(sp)
811046cc:	df000017 	ldw	fp,0(sp)
811046d0:	dec00204 	addi	sp,sp,8
811046d4:	f800283a 	ret

811046d8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
811046d8:	defffe04 	addi	sp,sp,-8
811046dc:	de00012e 	bgeu	sp,et,811046e4 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
811046e0:	003b68fa 	trap	3
811046e4:	dfc00115 	stw	ra,4(sp)
811046e8:	df000015 	stw	fp,0(sp)
811046ec:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811046f0:	01800044 	movi	r6,1
811046f4:	01400144 	movi	r5,5
811046f8:	01204834 	movhi	r4,33056
811046fc:	210a0004 	addi	r4,r4,10240
81104700:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104704:	0001883a 	nop
81104708:	e037883a 	mov	sp,fp
8110470c:	dfc00117 	ldw	ra,4(sp)
81104710:	df000017 	ldw	fp,0(sp)
81104714:	dec00204 	addi	sp,sp,8
81104718:	f800283a 	ret

8110471c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110471c:	defffe04 	addi	sp,sp,-8
81104720:	de00012e 	bgeu	sp,et,81104728 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104724:	003b68fa 	trap	3
81104728:	dfc00115 	stw	ra,4(sp)
8110472c:	df000015 	stw	fp,0(sp)
81104730:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104734:	01800044 	movi	r6,1
81104738:	01400144 	movi	r5,5
8110473c:	01204834 	movhi	r4,33056
81104740:	21090004 	addi	r4,r4,9216
81104744:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104748:	0001883a 	nop
8110474c:	e037883a 	mov	sp,fp
81104750:	dfc00117 	ldw	ra,4(sp)
81104754:	df000017 	ldw	fp,0(sp)
81104758:	dec00204 	addi	sp,sp,8
8110475c:	f800283a 	ret

81104760 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104760:	defffe04 	addi	sp,sp,-8
81104764:	de00012e 	bgeu	sp,et,8110476c <vFeebCh4IrqFlagClrBufferEmpty+0xc>
81104768:	003b68fa 	trap	3
8110476c:	dfc00115 	stw	ra,4(sp)
81104770:	df000015 	stw	fp,0(sp)
81104774:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104778:	01800044 	movi	r6,1
8110477c:	01400144 	movi	r5,5
81104780:	01204834 	movhi	r4,33056
81104784:	21080004 	addi	r4,r4,8192
81104788:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110478c:	0001883a 	nop
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811047a4:	defffe04 	addi	sp,sp,-8
811047a8:	de00012e 	bgeu	sp,et,811047b0 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
811047ac:	003b68fa 	trap	3
811047b0:	dfc00115 	stw	ra,4(sp)
811047b4:	df000015 	stw	fp,0(sp)
811047b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811047bc:	01800044 	movi	r6,1
811047c0:	01400144 	movi	r5,5
811047c4:	01204834 	movhi	r4,33056
811047c8:	21070004 	addi	r4,r4,7168
811047cc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047d0:	0001883a 	nop
811047d4:	e037883a 	mov	sp,fp
811047d8:	dfc00117 	ldw	ra,4(sp)
811047dc:	df000017 	ldw	fp,0(sp)
811047e0:	dec00204 	addi	sp,sp,8
811047e4:	f800283a 	ret

811047e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811047e8:	defffe04 	addi	sp,sp,-8
811047ec:	de00012e 	bgeu	sp,et,811047f4 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
811047f0:	003b68fa 	trap	3
811047f4:	dfc00115 	stw	ra,4(sp)
811047f8:	df000015 	stw	fp,0(sp)
811047fc:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104800:	01800044 	movi	r6,1
81104804:	01400144 	movi	r5,5
81104808:	01204834 	movhi	r4,33056
8110480c:	21060004 	addi	r4,r4,6144
81104810:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104814:	0001883a 	nop
81104818:	e037883a 	mov	sp,fp
8110481c:	dfc00117 	ldw	ra,4(sp)
81104820:	df000017 	ldw	fp,0(sp)
81104824:	dec00204 	addi	sp,sp,8
81104828:	f800283a 	ret

8110482c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110482c:	defffe04 	addi	sp,sp,-8
81104830:	de00012e 	bgeu	sp,et,81104838 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
81104834:	003b68fa 	trap	3
81104838:	dfc00115 	stw	ra,4(sp)
8110483c:	df000015 	stw	fp,0(sp)
81104840:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104844:	01800044 	movi	r6,1
81104848:	01400144 	movi	r5,5
8110484c:	01204834 	movhi	r4,33056
81104850:	21050004 	addi	r4,r4,5120
81104854:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104858:	0001883a 	nop
8110485c:	e037883a 	mov	sp,fp
81104860:	dfc00117 	ldw	ra,4(sp)
81104864:	df000017 	ldw	fp,0(sp)
81104868:	dec00204 	addi	sp,sp,8
8110486c:	f800283a 	ret

81104870 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104870:	defffe04 	addi	sp,sp,-8
81104874:	de00012e 	bgeu	sp,et,8110487c <vFeebCh8IrqFlagClrBufferEmpty+0xc>
81104878:	003b68fa 	trap	3
8110487c:	dfc00115 	stw	ra,4(sp)
81104880:	df000015 	stw	fp,0(sp)
81104884:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104888:	01800044 	movi	r6,1
8110488c:	01400144 	movi	r5,5
81104890:	01204834 	movhi	r4,33056
81104894:	21040004 	addi	r4,r4,4096
81104898:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
811048b4:	defffd04 	addi	sp,sp,-12
811048b8:	de00012e 	bgeu	sp,et,811048c0 <bFeebCh1IrqFlagBufferEmpty+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00215 	stw	ra,8(sp)
811048c4:	df000115 	stw	fp,4(sp)
811048c8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048cc:	01400144 	movi	r5,5
811048d0:	01204834 	movhi	r4,33056
811048d4:	210b0004 	addi	r4,r4,11264
811048d8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811048dc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048e0:	10000326 	beq	r2,zero,811048f0 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811048e4:	00800044 	movi	r2,1
811048e8:	e0bfff15 	stw	r2,-4(fp)
811048ec:	00000106 	br	811048f4 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811048f0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
}
811048f8:	e037883a 	mov	sp,fp
811048fc:	dfc00117 	ldw	ra,4(sp)
81104900:	df000017 	ldw	fp,0(sp)
81104904:	dec00204 	addi	sp,sp,8
81104908:	f800283a 	ret

8110490c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110490c:	defffd04 	addi	sp,sp,-12
81104910:	de00012e 	bgeu	sp,et,81104918 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104914:	003b68fa 	trap	3
81104918:	dfc00215 	stw	ra,8(sp)
8110491c:	df000115 	stw	fp,4(sp)
81104920:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104924:	01400144 	movi	r5,5
81104928:	01204834 	movhi	r4,33056
8110492c:	210a0004 	addi	r4,r4,10240
81104930:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104934:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104938:	10000326 	beq	r2,zero,81104948 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
8110493c:	00800044 	movi	r2,1
81104940:	e0bfff15 	stw	r2,-4(fp)
81104944:	00000106 	br	8110494c <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104948:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110494c:	e0bfff17 	ldw	r2,-4(fp)
}
81104950:	e037883a 	mov	sp,fp
81104954:	dfc00117 	ldw	ra,4(sp)
81104958:	df000017 	ldw	fp,0(sp)
8110495c:	dec00204 	addi	sp,sp,8
81104960:	f800283a 	ret

81104964 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104964:	defffd04 	addi	sp,sp,-12
81104968:	de00012e 	bgeu	sp,et,81104970 <bFeebCh3IrqFlagBufferEmpty+0xc>
8110496c:	003b68fa 	trap	3
81104970:	dfc00215 	stw	ra,8(sp)
81104974:	df000115 	stw	fp,4(sp)
81104978:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110497c:	01400144 	movi	r5,5
81104980:	01204834 	movhi	r4,33056
81104984:	21090004 	addi	r4,r4,9216
81104988:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110498c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104990:	10000326 	beq	r2,zero,811049a0 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104994:	00800044 	movi	r2,1
81104998:	e0bfff15 	stw	r2,-4(fp)
8110499c:	00000106 	br	811049a4 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049a0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049a4:	e0bfff17 	ldw	r2,-4(fp)
}
811049a8:	e037883a 	mov	sp,fp
811049ac:	dfc00117 	ldw	ra,4(sp)
811049b0:	df000017 	ldw	fp,0(sp)
811049b4:	dec00204 	addi	sp,sp,8
811049b8:	f800283a 	ret

811049bc <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
811049bc:	defffd04 	addi	sp,sp,-12
811049c0:	de00012e 	bgeu	sp,et,811049c8 <bFeebCh4IrqFlagBufferEmpty+0xc>
811049c4:	003b68fa 	trap	3
811049c8:	dfc00215 	stw	ra,8(sp)
811049cc:	df000115 	stw	fp,4(sp)
811049d0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049d4:	01400144 	movi	r5,5
811049d8:	01204834 	movhi	r4,33056
811049dc:	21080004 	addi	r4,r4,8192
811049e0:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049e4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049e8:	10000326 	beq	r2,zero,811049f8 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bfff15 	stw	r2,-4(fp)
811049f4:	00000106 	br	811049fc <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049f8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049fc:	e0bfff17 	ldw	r2,-4(fp)
}
81104a00:	e037883a 	mov	sp,fp
81104a04:	dfc00117 	ldw	ra,4(sp)
81104a08:	df000017 	ldw	fp,0(sp)
81104a0c:	dec00204 	addi	sp,sp,8
81104a10:	f800283a 	ret

81104a14 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a14:	defffd04 	addi	sp,sp,-12
81104a18:	de00012e 	bgeu	sp,et,81104a20 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a1c:	003b68fa 	trap	3
81104a20:	dfc00215 	stw	ra,8(sp)
81104a24:	df000115 	stw	fp,4(sp)
81104a28:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a2c:	01400144 	movi	r5,5
81104a30:	01204834 	movhi	r4,33056
81104a34:	21070004 	addi	r4,r4,7168
81104a38:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a3c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a40:	10000326 	beq	r2,zero,81104a50 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bfff15 	stw	r2,-4(fp)
81104a4c:	00000106 	br	81104a54 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a50:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a54:	e0bfff17 	ldw	r2,-4(fp)
}
81104a58:	e037883a 	mov	sp,fp
81104a5c:	dfc00117 	ldw	ra,4(sp)
81104a60:	df000017 	ldw	fp,0(sp)
81104a64:	dec00204 	addi	sp,sp,8
81104a68:	f800283a 	ret

81104a6c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104a6c:	defffd04 	addi	sp,sp,-12
81104a70:	de00012e 	bgeu	sp,et,81104a78 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104a74:	003b68fa 	trap	3
81104a78:	dfc00215 	stw	ra,8(sp)
81104a7c:	df000115 	stw	fp,4(sp)
81104a80:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a84:	01400144 	movi	r5,5
81104a88:	01204834 	movhi	r4,33056
81104a8c:	21060004 	addi	r4,r4,6144
81104a90:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a94:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a98:	10000326 	beq	r2,zero,81104aa8 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a9c:	00800044 	movi	r2,1
81104aa0:	e0bfff15 	stw	r2,-4(fp)
81104aa4:	00000106 	br	81104aac <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104aa8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104aac:	e0bfff17 	ldw	r2,-4(fp)
}
81104ab0:	e037883a 	mov	sp,fp
81104ab4:	dfc00117 	ldw	ra,4(sp)
81104ab8:	df000017 	ldw	fp,0(sp)
81104abc:	dec00204 	addi	sp,sp,8
81104ac0:	f800283a 	ret

81104ac4 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104ac4:	defffd04 	addi	sp,sp,-12
81104ac8:	de00012e 	bgeu	sp,et,81104ad0 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104acc:	003b68fa 	trap	3
81104ad0:	dfc00215 	stw	ra,8(sp)
81104ad4:	df000115 	stw	fp,4(sp)
81104ad8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104adc:	01400144 	movi	r5,5
81104ae0:	01204834 	movhi	r4,33056
81104ae4:	21050004 	addi	r4,r4,5120
81104ae8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104af0:	10000326 	beq	r2,zero,81104b00 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104af4:	00800044 	movi	r2,1
81104af8:	e0bfff15 	stw	r2,-4(fp)
81104afc:	00000106 	br	81104b04 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b00:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b04:	e0bfff17 	ldw	r2,-4(fp)
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	dfc00117 	ldw	ra,4(sp)
81104b10:	df000017 	ldw	fp,0(sp)
81104b14:	dec00204 	addi	sp,sp,8
81104b18:	f800283a 	ret

81104b1c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b1c:	defffd04 	addi	sp,sp,-12
81104b20:	de00012e 	bgeu	sp,et,81104b28 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b24:	003b68fa 	trap	3
81104b28:	dfc00215 	stw	ra,8(sp)
81104b2c:	df000115 	stw	fp,4(sp)
81104b30:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b34:	01400144 	movi	r5,5
81104b38:	01204834 	movhi	r4,33056
81104b3c:	21040004 	addi	r4,r4,4096
81104b40:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b44:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b48:	10000326 	beq	r2,zero,81104b58 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b4c:	00800044 	movi	r2,1
81104b50:	e0bfff15 	stw	r2,-4(fp)
81104b54:	00000106 	br	81104b5c <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b58:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b5c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104b74:	defffc04 	addi	sp,sp,-16
81104b78:	de00012e 	bgeu	sp,et,81104b80 <vFeebInitIrq+0xc>
81104b7c:	003b68fa 	trap	3
81104b80:	dfc00315 	stw	ra,12(sp)
81104b84:	df000215 	stw	fp,8(sp)
81104b88:	df000204 	addi	fp,sp,8
81104b8c:	2005883a 	mov	r2,r4
81104b90:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104b94:	e0bfff03 	ldbu	r2,-4(fp)
81104b98:	10c00268 	cmpgeui	r3,r2,9
81104b9c:	18004f1e 	bne	r3,zero,81104cdc <vFeebInitIrq+0x168>
81104ba0:	100690ba 	slli	r3,r2,2
81104ba4:	00a04434 	movhi	r2,33040
81104ba8:	1092ee04 	addi	r2,r2,19384
81104bac:	1885883a 	add	r2,r3,r2
81104bb0:	10800017 	ldw	r2,0(r2)
81104bb4:	1000683a 	jmp	r2
81104bb8:	81104cdc 	xori	r4,r16,16691
81104bbc:	81104bdc 	xori	r4,r16,16687
81104bc0:	81104bfc 	xorhi	r4,r16,16687
81104bc4:	81104c1c 	xori	r4,r16,16688
81104bc8:	81104c3c 	xorhi	r4,r16,16688
81104bcc:	81104c5c 	xori	r4,r16,16689
81104bd0:	81104c7c 	xorhi	r4,r16,16689
81104bd4:	81104c9c 	xori	r4,r16,16690
81104bd8:	81104cbc 	xorhi	r4,r16,16690
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104bdc:	d0a03d04 	addi	r2,gp,-32524
81104be0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104be4:	01a04434 	movhi	r6,33040
81104be8:	31912504 	addi	r6,r6,17556
81104bec:	e17ffe17 	ldw	r5,-8(fp)
81104bf0:	01000084 	movi	r4,2
81104bf4:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104bf8:	00003806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104bfc:	d0a03e04 	addi	r2,gp,-32520
81104c00:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c04:	01a04434 	movhi	r6,33040
81104c08:	31913504 	addi	r6,r6,17620
81104c0c:	e17ffe17 	ldw	r5,-8(fp)
81104c10:	010000c4 	movi	r4,3
81104c14:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c18:	00003006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c1c:	d0a03f04 	addi	r2,gp,-32516
81104c20:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c24:	01a04434 	movhi	r6,33040
81104c28:	31914504 	addi	r6,r6,17684
81104c2c:	e17ffe17 	ldw	r5,-8(fp)
81104c30:	01000104 	movi	r4,4
81104c34:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104c38:	00002806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104c3c:	d0a04004 	addi	r2,gp,-32512
81104c40:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104c44:	01a04434 	movhi	r6,33040
81104c48:	31915504 	addi	r6,r6,17748
81104c4c:	e17ffe17 	ldw	r5,-8(fp)
81104c50:	01000204 	movi	r4,8
81104c54:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104c58:	00002006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104c5c:	d0a04104 	addi	r2,gp,-32508
81104c60:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104c64:	01a04434 	movhi	r6,33040
81104c68:	31916504 	addi	r6,r6,17812
81104c6c:	e17ffe17 	ldw	r5,-8(fp)
81104c70:	010001c4 	movi	r4,7
81104c74:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104c78:	00001806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104c7c:	d0a04204 	addi	r2,gp,-32504
81104c80:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104c84:	01a04434 	movhi	r6,33040
81104c88:	31917504 	addi	r6,r6,17876
81104c8c:	e17ffe17 	ldw	r5,-8(fp)
81104c90:	01000184 	movi	r4,6
81104c94:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104c98:	00001006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104c9c:	d0a04304 	addi	r2,gp,-32500
81104ca0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104ca4:	01a04434 	movhi	r6,33040
81104ca8:	31918504 	addi	r6,r6,17940
81104cac:	e17ffe17 	ldw	r5,-8(fp)
81104cb0:	01000144 	movi	r4,5
81104cb4:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104cb8:	00000806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104cbc:	d0a04404 	addi	r2,gp,-32496
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104cc4:	01a04434 	movhi	r6,33040
81104cc8:	31919504 	addi	r6,r6,18004
81104ccc:	e17ffe17 	ldw	r5,-8(fp)
81104cd0:	01000244 	movi	r4,9
81104cd4:	11273180 	call	81127318 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104cd8:	0001883a 	nop
	}
}
81104cdc:	0001883a 	nop
81104ce0:	e037883a 	mov	sp,fp
81104ce4:	dfc00117 	ldw	ra,4(sp)
81104ce8:	df000017 	ldw	fp,0(sp)
81104cec:	dec00204 	addi	sp,sp,8
81104cf0:	f800283a 	ret

81104cf4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104cf4:	defffb04 	addi	sp,sp,-20
81104cf8:	de00012e 	bgeu	sp,et,81104d00 <bFeebSetIrqControl+0xc>
81104cfc:	003b68fa 	trap	3
81104d00:	dfc00415 	stw	ra,16(sp)
81104d04:	df000315 	stw	fp,12(sp)
81104d08:	df000304 	addi	fp,sp,12
81104d0c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d10:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d14:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	10002426 	beq	r2,zero,81104db0 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d20:	e0bfff17 	ldw	r2,-4(fp)
81104d24:	10800017 	ldw	r2,0(r2)
81104d28:	01400104 	movi	r5,4
81104d2c:	1009883a 	mov	r4,r2
81104d30:	110512c0 	call	8110512c <uliFeebReadReg>
81104d34:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104d38:	e0bfff17 	ldw	r2,-4(fp)
81104d3c:	10800217 	ldw	r2,8(r2)
81104d40:	10000426 	beq	r2,zero,81104d54 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10804014 	ori	r2,r2,256
81104d4c:	e0bffe15 	stw	r2,-8(fp)
81104d50:	00000406 	br	81104d64 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104d54:	e0fffe17 	ldw	r3,-8(fp)
81104d58:	00bfbfc4 	movi	r2,-257
81104d5c:	1884703a 	and	r2,r3,r2
81104d60:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104d64:	e0bfff17 	ldw	r2,-4(fp)
81104d68:	10800317 	ldw	r2,12(r2)
81104d6c:	10000426 	beq	r2,zero,81104d80 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10800054 	ori	r2,r2,1
81104d78:	e0bffe15 	stw	r2,-8(fp)
81104d7c:	00000406 	br	81104d90 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104d80:	e0fffe17 	ldw	r3,-8(fp)
81104d84:	00bfff84 	movi	r2,-2
81104d88:	1884703a 	and	r2,r3,r2
81104d8c:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	e1bffe17 	ldw	r6,-8(fp)
81104d9c:	01400104 	movi	r5,4
81104da0:	1009883a 	mov	r4,r2
81104da4:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104da8:	00800044 	movi	r2,1
81104dac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104db0:	e0bffd17 	ldw	r2,-12(fp)
}
81104db4:	e037883a 	mov	sp,fp
81104db8:	dfc00117 	ldw	ra,4(sp)
81104dbc:	df000017 	ldw	fp,0(sp)
81104dc0:	dec00204 	addi	sp,sp,8
81104dc4:	f800283a 	ret

81104dc8 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104dc8:	defffb04 	addi	sp,sp,-20
81104dcc:	de00012e 	bgeu	sp,et,81104dd4 <bFeebGetIrqControl+0xc>
81104dd0:	003b68fa 	trap	3
81104dd4:	dfc00415 	stw	ra,16(sp)
81104dd8:	df000315 	stw	fp,12(sp)
81104ddc:	df000304 	addi	fp,sp,12
81104de0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104de4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104de8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104dec:	e0bfff17 	ldw	r2,-4(fp)
81104df0:	10001a26 	beq	r2,zero,81104e5c <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104df4:	e0bfff17 	ldw	r2,-4(fp)
81104df8:	10800017 	ldw	r2,0(r2)
81104dfc:	01400104 	movi	r5,4
81104e00:	1009883a 	mov	r4,r2
81104e04:	110512c0 	call	8110512c <uliFeebReadReg>
81104e08:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e0c:	e0bffe17 	ldw	r2,-8(fp)
81104e10:	1080400c 	andi	r2,r2,256
81104e14:	10000426 	beq	r2,zero,81104e28 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e18:	e0bfff17 	ldw	r2,-4(fp)
81104e1c:	00c00044 	movi	r3,1
81104e20:	10c00215 	stw	r3,8(r2)
81104e24:	00000206 	br	81104e30 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e28:	e0bfff17 	ldw	r2,-4(fp)
81104e2c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104e30:	e0bffe17 	ldw	r2,-8(fp)
81104e34:	1080004c 	andi	r2,r2,1
81104e38:	10000426 	beq	r2,zero,81104e4c <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104e3c:	e0bfff17 	ldw	r2,-4(fp)
81104e40:	00c00044 	movi	r3,1
81104e44:	10c00315 	stw	r3,12(r2)
81104e48:	00000206 	br	81104e54 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104e4c:	e0bfff17 	ldw	r2,-4(fp)
81104e50:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104e54:	00800044 	movi	r2,1
81104e58:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e5c:	e0bffd17 	ldw	r2,-12(fp)
}
81104e60:	e037883a 	mov	sp,fp
81104e64:	dfc00117 	ldw	ra,4(sp)
81104e68:	df000017 	ldw	fp,0(sp)
81104e6c:	dec00204 	addi	sp,sp,8
81104e70:	f800283a 	ret

81104e74 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104e74:	defffb04 	addi	sp,sp,-20
81104e78:	de00012e 	bgeu	sp,et,81104e80 <bFeebGetIrqFlags+0xc>
81104e7c:	003b68fa 	trap	3
81104e80:	dfc00415 	stw	ra,16(sp)
81104e84:	df000315 	stw	fp,12(sp)
81104e88:	df000304 	addi	fp,sp,12
81104e8c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e90:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e94:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10001126 	beq	r2,zero,81104ee4 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104ea0:	e0bfff17 	ldw	r2,-4(fp)
81104ea4:	10800017 	ldw	r2,0(r2)
81104ea8:	01400144 	movi	r5,5
81104eac:	1009883a 	mov	r4,r2
81104eb0:	110512c0 	call	8110512c <uliFeebReadReg>
81104eb4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104eb8:	e0bffe17 	ldw	r2,-8(fp)
81104ebc:	1080004c 	andi	r2,r2,1
81104ec0:	10000426 	beq	r2,zero,81104ed4 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104ec4:	e0bfff17 	ldw	r2,-4(fp)
81104ec8:	00c00044 	movi	r3,1
81104ecc:	10c00415 	stw	r3,16(r2)
81104ed0:	00000206 	br	81104edc <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104ed4:	e0bfff17 	ldw	r2,-4(fp)
81104ed8:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104edc:	00800044 	movi	r2,1
81104ee0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ee4:	e0bffd17 	ldw	r2,-12(fp)
}
81104ee8:	e037883a 	mov	sp,fp
81104eec:	dfc00117 	ldw	ra,4(sp)
81104ef0:	df000017 	ldw	fp,0(sp)
81104ef4:	dec00204 	addi	sp,sp,8
81104ef8:	f800283a 	ret

81104efc <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104efc:	defffb04 	addi	sp,sp,-20
81104f00:	de00012e 	bgeu	sp,et,81104f08 <bFeebSetWindowing+0xc>
81104f04:	003b68fa 	trap	3
81104f08:	dfc00415 	stw	ra,16(sp)
81104f0c:	df000315 	stw	fp,12(sp)
81104f10:	df000304 	addi	fp,sp,12
81104f14:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f18:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f1c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	10001926 	beq	r2,zero,81104f8c <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f28:	e0bfff17 	ldw	r2,-4(fp)
81104f2c:	10800017 	ldw	r2,0(r2)
81104f30:	000b883a 	mov	r5,zero
81104f34:	1009883a 	mov	r4,r2
81104f38:	110512c0 	call	8110512c <uliFeebReadReg>
81104f3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104f40:	e0bfff17 	ldw	r2,-4(fp)
81104f44:	10800117 	ldw	r2,4(r2)
81104f48:	10000426 	beq	r2,zero,81104f5c <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10804014 	ori	r2,r2,256
81104f54:	e0bffe15 	stw	r2,-8(fp)
81104f58:	00000406 	br	81104f6c <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104f5c:	e0fffe17 	ldw	r3,-8(fp)
81104f60:	00bfbfc4 	movi	r2,-257
81104f64:	1884703a 	and	r2,r3,r2
81104f68:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104f6c:	e0bfff17 	ldw	r2,-4(fp)
81104f70:	10800017 	ldw	r2,0(r2)
81104f74:	e1bffe17 	ldw	r6,-8(fp)
81104f78:	000b883a 	mov	r5,zero
81104f7c:	1009883a 	mov	r4,r2
81104f80:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f8c:	e0bffd17 	ldw	r2,-12(fp)
}
81104f90:	e037883a 	mov	sp,fp
81104f94:	dfc00117 	ldw	ra,4(sp)
81104f98:	df000017 	ldw	fp,0(sp)
81104f9c:	dec00204 	addi	sp,sp,8
81104fa0:	f800283a 	ret

81104fa4 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104fa4:	defffb04 	addi	sp,sp,-20
81104fa8:	de00012e 	bgeu	sp,et,81104fb0 <bFeebGetWindowing+0xc>
81104fac:	003b68fa 	trap	3
81104fb0:	dfc00415 	stw	ra,16(sp)
81104fb4:	df000315 	stw	fp,12(sp)
81104fb8:	df000304 	addi	fp,sp,12
81104fbc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104fc0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104fc4:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104fc8:	e0bfff17 	ldw	r2,-4(fp)
81104fcc:	10001126 	beq	r2,zero,81105014 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104fd0:	e0bfff17 	ldw	r2,-4(fp)
81104fd4:	10800017 	ldw	r2,0(r2)
81104fd8:	000b883a 	mov	r5,zero
81104fdc:	1009883a 	mov	r4,r2
81104fe0:	110512c0 	call	8110512c <uliFeebReadReg>
81104fe4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104fe8:	e0bffe17 	ldw	r2,-8(fp)
81104fec:	1080400c 	andi	r2,r2,256
81104ff0:	10000426 	beq	r2,zero,81105004 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81104ff4:	e0bfff17 	ldw	r2,-4(fp)
81104ff8:	00c00044 	movi	r3,1
81104ffc:	10c00115 	stw	r3,4(r2)
81105000:	00000206 	br	8110500c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105004:	e0bfff17 	ldw	r2,-4(fp)
81105008:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105014:	e0bffd17 	ldw	r2,-12(fp)
}
81105018:	e037883a 	mov	sp,fp
8110501c:	dfc00117 	ldw	ra,4(sp)
81105020:	df000017 	ldw	fp,0(sp)
81105024:	dec00204 	addi	sp,sp,8
81105028:	f800283a 	ret

8110502c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110502c:	defffb04 	addi	sp,sp,-20
81105030:	de00012e 	bgeu	sp,et,81105038 <bFeebGetBuffersStatus+0xc>
81105034:	003b68fa 	trap	3
81105038:	dfc00415 	stw	ra,16(sp)
8110503c:	df000315 	stw	fp,12(sp)
81105040:	df000304 	addi	fp,sp,12
81105044:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105048:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110504c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105050:	e0bfff17 	ldw	r2,-4(fp)
81105054:	10001a26 	beq	r2,zero,811050c0 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105058:	e0bfff17 	ldw	r2,-4(fp)
8110505c:	10800017 	ldw	r2,0(r2)
81105060:	01400184 	movi	r5,6
81105064:	1009883a 	mov	r4,r2
81105068:	110512c0 	call	8110512c <uliFeebReadReg>
8110506c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
81105070:	e0bffe17 	ldw	r2,-8(fp)
81105074:	1080400c 	andi	r2,r2,256
81105078:	10000426 	beq	r2,zero,8110508c <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110507c:	e0bfff17 	ldw	r2,-4(fp)
81105080:	00c00044 	movi	r3,1
81105084:	10c00515 	stw	r3,20(r2)
81105088:	00000206 	br	81105094 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110508c:	e0bfff17 	ldw	r2,-4(fp)
81105090:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105094:	e0bffe17 	ldw	r2,-8(fp)
81105098:	1080004c 	andi	r2,r2,1
8110509c:	10000426 	beq	r2,zero,811050b0 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
811050a0:	e0bfff17 	ldw	r2,-4(fp)
811050a4:	00c00044 	movi	r3,1
811050a8:	10c00615 	stw	r3,24(r2)
811050ac:	00000206 	br	811050b8 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
811050b0:	e0bfff17 	ldw	r2,-4(fp)
811050b4:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811050c0:	e0bffd17 	ldw	r2,-12(fp)
}
811050c4:	e037883a 	mov	sp,fp
811050c8:	dfc00117 	ldw	ra,4(sp)
811050cc:	df000017 	ldw	fp,0(sp)
811050d0:	dec00204 	addi	sp,sp,8
811050d4:	f800283a 	ret

811050d8 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811050d8:	defffc04 	addi	sp,sp,-16
811050dc:	de00012e 	bgeu	sp,et,811050e4 <vFeebWriteReg+0xc>
811050e0:	003b68fa 	trap	3
811050e4:	df000315 	stw	fp,12(sp)
811050e8:	df000304 	addi	fp,sp,12
811050ec:	e13ffd15 	stw	r4,-12(fp)
811050f0:	e17ffe15 	stw	r5,-8(fp)
811050f4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811050f8:	e0bffe17 	ldw	r2,-8(fp)
811050fc:	1085883a 	add	r2,r2,r2
81105100:	1085883a 	add	r2,r2,r2
81105104:	1007883a 	mov	r3,r2
81105108:	e0bffd17 	ldw	r2,-12(fp)
8110510c:	10c5883a 	add	r2,r2,r3
81105110:	e0ffff17 	ldw	r3,-4(fp)
81105114:	10c00015 	stw	r3,0(r2)
}
81105118:	0001883a 	nop
8110511c:	e037883a 	mov	sp,fp
81105120:	df000017 	ldw	fp,0(sp)
81105124:	dec00104 	addi	sp,sp,4
81105128:	f800283a 	ret

8110512c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110512c:	defffc04 	addi	sp,sp,-16
81105130:	de00012e 	bgeu	sp,et,81105138 <uliFeebReadReg+0xc>
81105134:	003b68fa 	trap	3
81105138:	df000315 	stw	fp,12(sp)
8110513c:	df000304 	addi	fp,sp,12
81105140:	e13ffe15 	stw	r4,-8(fp)
81105144:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105148:	e0bfff17 	ldw	r2,-4(fp)
8110514c:	1085883a 	add	r2,r2,r2
81105150:	1085883a 	add	r2,r2,r2
81105154:	1007883a 	mov	r3,r2
81105158:	e0bffe17 	ldw	r2,-8(fp)
8110515c:	10c5883a 	add	r2,r2,r3
81105160:	10800017 	ldw	r2,0(r2)
81105164:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105168:	e0bffd17 	ldw	r2,-12(fp)
}
8110516c:	e037883a 	mov	sp,fp
81105170:	df000017 	ldw	fp,0(sp)
81105174:	dec00104 	addi	sp,sp,4
81105178:	f800283a 	ret

8110517c <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
8110517c:	defffb04 	addi	sp,sp,-20
81105180:	de00012e 	bgeu	sp,et,81105188 <bSpwcSetLink+0xc>
81105184:	003b68fa 	trap	3
81105188:	dfc00415 	stw	ra,16(sp)
8110518c:	df000315 	stw	fp,12(sp)
81105190:	df000304 	addi	fp,sp,12
81105194:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105198:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110519c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10002f26 	beq	r2,zero,81105264 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811051a8:	e0bfff17 	ldw	r2,-4(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	000b883a 	mov	r5,zero
811051b4:	1009883a 	mov	r4,r2
811051b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811051bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
811051c0:	e0bfff17 	ldw	r2,-4(fp)
811051c4:	10800117 	ldw	r2,4(r2)
811051c8:	10000426 	beq	r2,zero,811051dc <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
811051cc:	e0bffe17 	ldw	r2,-8(fp)
811051d0:	10800114 	ori	r2,r2,4
811051d4:	e0bffe15 	stw	r2,-8(fp)
811051d8:	00000406 	br	811051ec <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
811051dc:	e0fffe17 	ldw	r3,-8(fp)
811051e0:	00bffec4 	movi	r2,-5
811051e4:	1884703a 	and	r2,r3,r2
811051e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
811051ec:	e0bfff17 	ldw	r2,-4(fp)
811051f0:	10800217 	ldw	r2,8(r2)
811051f4:	10000426 	beq	r2,zero,81105208 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
811051f8:	e0bffe17 	ldw	r2,-8(fp)
811051fc:	10800094 	ori	r2,r2,2
81105200:	e0bffe15 	stw	r2,-8(fp)
81105204:	00000406 	br	81105218 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105208:	e0fffe17 	ldw	r3,-8(fp)
8110520c:	00bfff44 	movi	r2,-3
81105210:	1884703a 	and	r2,r3,r2
81105214:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800317 	ldw	r2,12(r2)
81105220:	10000426 	beq	r2,zero,81105234 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105224:	e0bffe17 	ldw	r2,-8(fp)
81105228:	10800054 	ori	r2,r2,1
8110522c:	e0bffe15 	stw	r2,-8(fp)
81105230:	00000406 	br	81105244 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81105234:	e0fffe17 	ldw	r3,-8(fp)
81105238:	00bfff84 	movi	r2,-2
8110523c:	1884703a 	and	r2,r3,r2
81105240:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81105244:	e0bfff17 	ldw	r2,-4(fp)
81105248:	10800017 	ldw	r2,0(r2)
8110524c:	e1bffe17 	ldw	r6,-8(fp)
81105250:	000b883a 	mov	r5,zero
81105254:	1009883a 	mov	r4,r2
81105258:	11056880 	call	81105688 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
8110525c:	00800044 	movi	r2,1
81105260:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105264:	e0bffd17 	ldw	r2,-12(fp)
}
81105268:	e037883a 	mov	sp,fp
8110526c:	dfc00117 	ldw	ra,4(sp)
81105270:	df000017 	ldw	fp,0(sp)
81105274:	dec00204 	addi	sp,sp,8
81105278:	f800283a 	ret

8110527c <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
8110527c:	defffb04 	addi	sp,sp,-20
81105280:	de00012e 	bgeu	sp,et,81105288 <bSpwcGetLink+0xc>
81105284:	003b68fa 	trap	3
81105288:	dfc00415 	stw	ra,16(sp)
8110528c:	df000315 	stw	fp,12(sp)
81105290:	df000304 	addi	fp,sp,12
81105294:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105298:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110529c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811052a0:	e0bfff17 	ldw	r2,-4(fp)
811052a4:	10002326 	beq	r2,zero,81105334 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811052a8:	e0bfff17 	ldw	r2,-4(fp)
811052ac:	10800017 	ldw	r2,0(r2)
811052b0:	000b883a 	mov	r5,zero
811052b4:	1009883a 	mov	r4,r2
811052b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811052bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
811052c0:	e0bffe17 	ldw	r2,-8(fp)
811052c4:	1080010c 	andi	r2,r2,4
811052c8:	10000426 	beq	r2,zero,811052dc <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
811052cc:	e0bfff17 	ldw	r2,-4(fp)
811052d0:	00c00044 	movi	r3,1
811052d4:	10c00115 	stw	r3,4(r2)
811052d8:	00000206 	br	811052e4 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
811052dc:	e0bfff17 	ldw	r2,-4(fp)
811052e0:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
811052e4:	e0bffe17 	ldw	r2,-8(fp)
811052e8:	1080008c 	andi	r2,r2,2
811052ec:	10000426 	beq	r2,zero,81105300 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
811052f0:	e0bfff17 	ldw	r2,-4(fp)
811052f4:	00c00044 	movi	r3,1
811052f8:	10c00215 	stw	r3,8(r2)
811052fc:	00000206 	br	81105308 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105300:	e0bfff17 	ldw	r2,-4(fp)
81105304:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105308:	e0bffe17 	ldw	r2,-8(fp)
8110530c:	1080004c 	andi	r2,r2,1
81105310:	10000426 	beq	r2,zero,81105324 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105314:	e0bfff17 	ldw	r2,-4(fp)
81105318:	00c00044 	movi	r3,1
8110531c:	10c00315 	stw	r3,12(r2)
81105320:	00000206 	br	8110532c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105334:	e0bffd17 	ldw	r2,-12(fp)
}
81105338:	e037883a 	mov	sp,fp
8110533c:	dfc00117 	ldw	ra,4(sp)
81105340:	df000017 	ldw	fp,0(sp)
81105344:	dec00204 	addi	sp,sp,8
81105348:	f800283a 	ret

8110534c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
8110534c:	defffb04 	addi	sp,sp,-20
81105350:	de00012e 	bgeu	sp,et,81105358 <bSpwcGetLinkError+0xc>
81105354:	003b68fa 	trap	3
81105358:	dfc00415 	stw	ra,16(sp)
8110535c:	df000315 	stw	fp,12(sp)
81105360:	df000304 	addi	fp,sp,12
81105364:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105368:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110536c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10002c26 	beq	r2,zero,81105428 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105378:	e0bfff17 	ldw	r2,-4(fp)
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	01400044 	movi	r5,1
81105384:	1009883a 	mov	r4,r2
81105388:	11056dc0 	call	811056dc <uliSpwcReadReg>
8110538c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	1082000c 	andi	r2,r2,2048
81105398:	10000426 	beq	r2,zero,811053ac <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110539c:	e0bfff17 	ldw	r2,-4(fp)
811053a0:	00c00044 	movi	r3,1
811053a4:	10c00415 	stw	r3,16(r2)
811053a8:	00000206 	br	811053b4 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
811053b4:	e0bffe17 	ldw	r2,-8(fp)
811053b8:	1081000c 	andi	r2,r2,1024
811053bc:	10000426 	beq	r2,zero,811053d0 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
811053c0:	e0bfff17 	ldw	r2,-4(fp)
811053c4:	00c00044 	movi	r3,1
811053c8:	10c00515 	stw	r3,20(r2)
811053cc:	00000206 	br	811053d8 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
811053d0:	e0bfff17 	ldw	r2,-4(fp)
811053d4:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
811053d8:	e0bffe17 	ldw	r2,-8(fp)
811053dc:	1080800c 	andi	r2,r2,512
811053e0:	10000426 	beq	r2,zero,811053f4 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
811053e4:	e0bfff17 	ldw	r2,-4(fp)
811053e8:	00c00044 	movi	r3,1
811053ec:	10c00615 	stw	r3,24(r2)
811053f0:	00000206 	br	811053fc <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811053f4:	e0bfff17 	ldw	r2,-4(fp)
811053f8:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	1080400c 	andi	r2,r2,256
81105404:	10000426 	beq	r2,zero,81105418 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105408:	e0bfff17 	ldw	r2,-4(fp)
8110540c:	00c00044 	movi	r3,1
81105410:	10c00715 	stw	r3,28(r2)
81105414:	00000206 	br	81105420 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105418:	e0bfff17 	ldw	r2,-4(fp)
8110541c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105420:	00800044 	movi	r2,1
81105424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105428:	e0bffd17 	ldw	r2,-12(fp)
}
8110542c:	e037883a 	mov	sp,fp
81105430:	dfc00117 	ldw	ra,4(sp)
81105434:	df000017 	ldw	fp,0(sp)
81105438:	dec00204 	addi	sp,sp,8
8110543c:	f800283a 	ret

81105440 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81105440:	defffb04 	addi	sp,sp,-20
81105444:	de00012e 	bgeu	sp,et,8110544c <bSpwcGetLinkStatus+0xc>
81105448:	003b68fa 	trap	3
8110544c:	dfc00415 	stw	ra,16(sp)
81105450:	df000315 	stw	fp,12(sp)
81105454:	df000304 	addi	fp,sp,12
81105458:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110545c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105460:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10002326 	beq	r2,zero,811054f8 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110546c:	e0bfff17 	ldw	r2,-4(fp)
81105470:	10800017 	ldw	r2,0(r2)
81105474:	01400044 	movi	r5,1
81105478:	1009883a 	mov	r4,r2
8110547c:	11056dc0 	call	811056dc <uliSpwcReadReg>
81105480:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	1080010c 	andi	r2,r2,4
8110548c:	10000426 	beq	r2,zero,811054a0 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105490:	e0bfff17 	ldw	r2,-4(fp)
81105494:	00c00044 	movi	r3,1
81105498:	10c00815 	stw	r3,32(r2)
8110549c:	00000206 	br	811054a8 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
811054a0:	e0bfff17 	ldw	r2,-4(fp)
811054a4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
811054a8:	e0bffe17 	ldw	r2,-8(fp)
811054ac:	1080008c 	andi	r2,r2,2
811054b0:	10000426 	beq	r2,zero,811054c4 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
811054b4:	e0bfff17 	ldw	r2,-4(fp)
811054b8:	00c00044 	movi	r3,1
811054bc:	10c00915 	stw	r3,36(r2)
811054c0:	00000206 	br	811054cc <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
811054c4:	e0bfff17 	ldw	r2,-4(fp)
811054c8:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
811054cc:	e0bffe17 	ldw	r2,-8(fp)
811054d0:	1080004c 	andi	r2,r2,1
811054d4:	10000426 	beq	r2,zero,811054e8 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
811054d8:	e0bfff17 	ldw	r2,-4(fp)
811054dc:	00c00044 	movi	r3,1
811054e0:	10c00a15 	stw	r3,40(r2)
811054e4:	00000206 	br	811054f0 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
811054e8:	e0bfff17 	ldw	r2,-4(fp)
811054ec:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
811054f0:	00800044 	movi	r2,1
811054f4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811054f8:	e0bffd17 	ldw	r2,-12(fp)
}
811054fc:	e037883a 	mov	sp,fp
81105500:	dfc00117 	ldw	ra,4(sp)
81105504:	df000017 	ldw	fp,0(sp)
81105508:	dec00204 	addi	sp,sp,8
8110550c:	f800283a 	ret

81105510 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105510:	defffb04 	addi	sp,sp,-20
81105514:	de00012e 	bgeu	sp,et,8110551c <bSpwcInitCh+0xc>
81105518:	003b68fa 	trap	3
8110551c:	dfc00415 	stw	ra,16(sp)
81105520:	df000315 	stw	fp,12(sp)
81105524:	df000304 	addi	fp,sp,12
81105528:	e13ffe15 	stw	r4,-8(fp)
8110552c:	2805883a 	mov	r2,r5
81105530:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105534:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	10004c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
		bStatus = TRUE;
81105540:	00800044 	movi	r2,1
81105544:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105548:	e0bfff03 	ldbu	r2,-4(fp)
8110554c:	10c00268 	cmpgeui	r3,r2,9
81105550:	1800371e 	bne	r3,zero,81105630 <bSpwcInitCh+0x120>
81105554:	100690ba 	slli	r3,r2,2
81105558:	00a04434 	movhi	r2,33040
8110555c:	10955b04 	addi	r2,r2,21868
81105560:	1885883a 	add	r2,r3,r2
81105564:	10800017 	ldw	r2,0(r2)
81105568:	1000683a 	jmp	r2
8110556c:	81105630 	cmpltui	r4,r16,16728
81105570:	81105590 	cmplti	r4,r16,16726
81105574:	811055a4 	muli	r4,r16,16726
81105578:	811055b8 	rdprs	r4,r16,16726
8110557c:	811055cc 	andi	r4,r16,16727
81105580:	811055e0 	cmpeqi	r4,r16,16727
81105584:	811055f4 	orhi	r4,r16,16727
81105588:	81105608 	cmpgei	r4,r16,16728
8110558c:	8110561c 	xori	r4,r16,16728
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105590:	e0fffe17 	ldw	r3,-8(fp)
81105594:	00a04834 	movhi	r2,33056
81105598:	108b0004 	addi	r2,r2,11264
8110559c:	18800015 	stw	r2,0(r3)
			break;
811055a0:	00002506 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
811055a4:	e0fffe17 	ldw	r3,-8(fp)
811055a8:	00a04834 	movhi	r2,33056
811055ac:	108a0004 	addi	r2,r2,10240
811055b0:	18800015 	stw	r2,0(r3)
			break;
811055b4:	00002006 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
811055b8:	e0fffe17 	ldw	r3,-8(fp)
811055bc:	00a04834 	movhi	r2,33056
811055c0:	10890004 	addi	r2,r2,9216
811055c4:	18800015 	stw	r2,0(r3)
			break;
811055c8:	00001b06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
811055cc:	e0fffe17 	ldw	r3,-8(fp)
811055d0:	00a04834 	movhi	r2,33056
811055d4:	10880004 	addi	r2,r2,8192
811055d8:	18800015 	stw	r2,0(r3)
			break;
811055dc:	00001606 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811055e0:	e0fffe17 	ldw	r3,-8(fp)
811055e4:	00a04834 	movhi	r2,33056
811055e8:	10870004 	addi	r2,r2,7168
811055ec:	18800015 	stw	r2,0(r3)
			break;
811055f0:	00001106 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811055f4:	e0fffe17 	ldw	r3,-8(fp)
811055f8:	00a04834 	movhi	r2,33056
811055fc:	10860004 	addi	r2,r2,6144
81105600:	18800015 	stw	r2,0(r3)
			break;
81105604:	00000c06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105608:	e0fffe17 	ldw	r3,-8(fp)
8110560c:	00a04834 	movhi	r2,33056
81105610:	10850004 	addi	r2,r2,5120
81105614:	18800015 	stw	r2,0(r3)
			break;
81105618:	00000706 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110561c:	e0fffe17 	ldw	r3,-8(fp)
81105620:	00a04834 	movhi	r2,33056
81105624:	10840004 	addi	r2,r2,4096
81105628:	18800015 	stw	r2,0(r3)
			break;
8110562c:	00000206 	br	81105638 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
81105630:	e03ffd15 	stw	zero,-12(fp)
			break;
81105634:	0001883a 	nop
		}

		if (bStatus) {
81105638:	e0bffd17 	ldw	r2,-12(fp)
8110563c:	10000c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81105640:	e13ffe17 	ldw	r4,-8(fp)
81105644:	110527c0 	call	8110527c <bSpwcGetLink>
81105648:	1000011e 	bne	r2,zero,81105650 <bSpwcInitCh+0x140>
				bStatus = FALSE;
8110564c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81105650:	e13ffe17 	ldw	r4,-8(fp)
81105654:	110534c0 	call	8110534c <bSpwcGetLinkError>
81105658:	1000011e 	bne	r2,zero,81105660 <bSpwcInitCh+0x150>
				bStatus = FALSE;
8110565c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81105660:	e13ffe17 	ldw	r4,-8(fp)
81105664:	11054400 	call	81105440 <bSpwcGetLinkStatus>
81105668:	1000011e 	bne	r2,zero,81105670 <bSpwcInitCh+0x160>
				bStatus = FALSE;
8110566c:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81105670:	e0bffd17 	ldw	r2,-12(fp)
}
81105674:	e037883a 	mov	sp,fp
81105678:	dfc00117 	ldw	ra,4(sp)
8110567c:	df000017 	ldw	fp,0(sp)
81105680:	dec00204 	addi	sp,sp,8
81105684:	f800283a 	ret

81105688 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105688:	defffc04 	addi	sp,sp,-16
8110568c:	de00012e 	bgeu	sp,et,81105694 <vSpwcWriteReg+0xc>
81105690:	003b68fa 	trap	3
81105694:	df000315 	stw	fp,12(sp)
81105698:	df000304 	addi	fp,sp,12
8110569c:	e13ffd15 	stw	r4,-12(fp)
811056a0:	e17ffe15 	stw	r5,-8(fp)
811056a4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811056a8:	e0bffe17 	ldw	r2,-8(fp)
811056ac:	1085883a 	add	r2,r2,r2
811056b0:	1085883a 	add	r2,r2,r2
811056b4:	1007883a 	mov	r3,r2
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	10c5883a 	add	r2,r2,r3
811056c0:	e0ffff17 	ldw	r3,-4(fp)
811056c4:	10c00015 	stw	r3,0(r2)
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	df000017 	ldw	fp,0(sp)
811056d4:	dec00104 	addi	sp,sp,4
811056d8:	f800283a 	ret

811056dc <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811056dc:	defffc04 	addi	sp,sp,-16
811056e0:	de00012e 	bgeu	sp,et,811056e8 <uliSpwcReadReg+0xc>
811056e4:	003b68fa 	trap	3
811056e8:	df000315 	stw	fp,12(sp)
811056ec:	df000304 	addi	fp,sp,12
811056f0:	e13ffe15 	stw	r4,-8(fp)
811056f4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	1085883a 	add	r2,r2,r2
81105700:	1085883a 	add	r2,r2,r2
81105704:	1007883a 	mov	r3,r2
81105708:	e0bffe17 	ldw	r2,-8(fp)
8110570c:	10c5883a 	add	r2,r2,r3
81105710:	10800017 	ldw	r2,0(r2)
81105714:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105718:	e0bffd17 	ldw	r2,-12(fp)
}
8110571c:	e037883a 	mov	sp,fp
81105720:	df000017 	ldw	fp,0(sp)
81105724:	dec00104 	addi	sp,sp,4
81105728:	f800283a 	ret

8110572c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110572c:	defffe04 	addi	sp,sp,-8
81105730:	de00012e 	bgeu	sp,et,81105738 <bEnableIsoDrivers+0xc>
81105734:	003b68fa 	trap	3
81105738:	dfc00115 	stw	ra,4(sp)
8110573c:	df000015 	stw	fp,0(sp)
81105740:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81105744:	01400204 	movi	r5,8
81105748:	01000044 	movi	r4,1
8110574c:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105750:	00800044 	movi	r2,1
}
81105754:	e037883a 	mov	sp,fp
81105758:	dfc00117 	ldw	ra,4(sp)
8110575c:	df000017 	ldw	fp,0(sp)
81105760:	dec00204 	addi	sp,sp,8
81105764:	f800283a 	ret

81105768 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81105768:	defffe04 	addi	sp,sp,-8
8110576c:	de00012e 	bgeu	sp,et,81105774 <bDisableIsoDrivers+0xc>
81105770:	003b68fa 	trap	3
81105774:	dfc00115 	stw	ra,4(sp)
81105778:	df000015 	stw	fp,0(sp)
8110577c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81105780:	01400204 	movi	r5,8
81105784:	0009883a 	mov	r4,zero
81105788:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110578c:	00800044 	movi	r2,1
}
81105790:	e037883a 	mov	sp,fp
81105794:	dfc00117 	ldw	ra,4(sp)
81105798:	df000017 	ldw	fp,0(sp)
8110579c:	dec00204 	addi	sp,sp,8
811057a0:	f800283a 	ret

811057a4 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
811057a4:	defffe04 	addi	sp,sp,-8
811057a8:	de00012e 	bgeu	sp,et,811057b0 <bEnableLvdsBoard+0xc>
811057ac:	003b68fa 	trap	3
811057b0:	dfc00115 	stw	ra,4(sp)
811057b4:	df000015 	stw	fp,0(sp)
811057b8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811057bc:	01400104 	movi	r5,4
811057c0:	01000044 	movi	r4,1
811057c4:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
811057c8:	00800044 	movi	r2,1
}
811057cc:	e037883a 	mov	sp,fp
811057d0:	dfc00117 	ldw	ra,4(sp)
811057d4:	df000017 	ldw	fp,0(sp)
811057d8:	dec00204 	addi	sp,sp,8
811057dc:	f800283a 	ret

811057e0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811057e0:	defffe04 	addi	sp,sp,-8
811057e4:	de00012e 	bgeu	sp,et,811057ec <bDisableLvdsBoard+0xc>
811057e8:	003b68fa 	trap	3
811057ec:	dfc00115 	stw	ra,4(sp)
811057f0:	df000015 	stw	fp,0(sp)
811057f4:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811057f8:	01400104 	movi	r5,4
811057fc:	0009883a 	mov	r4,zero
81105800:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105804:	00800044 	movi	r2,1
}
81105808:	e037883a 	mov	sp,fp
8110580c:	dfc00117 	ldw	ra,4(sp)
81105810:	df000017 	ldw	fp,0(sp)
81105814:	dec00204 	addi	sp,sp,8
81105818:	f800283a 	ret

8110581c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110581c:	defffd04 	addi	sp,sp,-12
81105820:	de00012e 	bgeu	sp,et,81105828 <bSetPreEmphasys+0xc>
81105824:	003b68fa 	trap	3
81105828:	dfc00215 	stw	ra,8(sp)
8110582c:	df000115 	stw	fp,4(sp)
81105830:	df000104 	addi	fp,sp,4
81105834:	2005883a 	mov	r2,r4
81105838:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110583c:	e0bfff03 	ldbu	r2,-4(fp)
81105840:	10c00060 	cmpeqi	r3,r2,1
81105844:	18000d1e 	bne	r3,zero,8110587c <bSetPreEmphasys+0x60>
81105848:	10c00088 	cmpgei	r3,r2,2
8110584c:	1800021e 	bne	r3,zero,81105858 <bSetPreEmphasys+0x3c>
81105850:	10000626 	beq	r2,zero,8110586c <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105854:	00001b06 	br	811058c4 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105858:	10c000a0 	cmpeqi	r3,r2,2
8110585c:	18000e1e 	bne	r3,zero,81105898 <bSetPreEmphasys+0x7c>
81105860:	108000e0 	cmpeqi	r2,r2,3
81105864:	1000131e 	bne	r2,zero,811058b4 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105868:	00001606 	br	811058c4 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110586c:	014000c4 	movi	r5,3
81105870:	0009883a 	mov	r4,zero
81105874:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105878:	00001206 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110587c:	01400084 	movi	r5,2
81105880:	0009883a 	mov	r4,zero
81105884:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105888:	01400044 	movi	r5,1
8110588c:	01000044 	movi	r4,1
81105890:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105894:	00000b06 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105898:	01400044 	movi	r5,1
8110589c:	0009883a 	mov	r4,zero
811058a0:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811058a4:	01400084 	movi	r5,2
811058a8:	01000044 	movi	r4,1
811058ac:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058b0:	00000406 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058b4:	014000c4 	movi	r5,3
811058b8:	01000044 	movi	r4,1
811058bc:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811058c4:	00800044 	movi	r2,1
}
811058c8:	e037883a 	mov	sp,fp
811058cc:	dfc00117 	ldw	ra,4(sp)
811058d0:	df000017 	ldw	fp,0(sp)
811058d4:	dec00204 	addi	sp,sp,8
811058d8:	f800283a 	ret

811058dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811058dc:	defffd04 	addi	sp,sp,-12
811058e0:	de00012e 	bgeu	sp,et,811058e8 <bCtrlIoLvdsDrive+0xc>
811058e4:	003b68fa 	trap	3
811058e8:	df000215 	stw	fp,8(sp)
811058ec:	df000204 	addi	fp,sp,8
811058f0:	e13ffe15 	stw	r4,-8(fp)
811058f4:	2805883a 	mov	r2,r5
811058f8:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811058fc:	e0bffe17 	ldw	r2,-8(fp)
81105900:	1000071e 	bne	r2,zero,81105920 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105904:	e0bfff03 	ldbu	r2,-4(fp)
81105908:	0084303a 	nor	r2,zero,r2
8110590c:	1007883a 	mov	r3,r2
81105910:	d0a00103 	ldbu	r2,-32764(gp)
81105914:	1884703a 	and	r2,r3,r2
81105918:	d0a00105 	stb	r2,-32764(gp)
8110591c:	00000406 	br	81105930 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105920:	d0e00103 	ldbu	r3,-32764(gp)
81105924:	e0bfff03 	ldbu	r2,-4(fp)
81105928:	1884b03a 	or	r2,r3,r2
8110592c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105930:	d0a00103 	ldbu	r2,-32764(gp)
81105934:	10c03fcc 	andi	r3,r2,255
81105938:	00a00034 	movhi	r2,32768
8110593c:	10822804 	addi	r2,r2,2208
81105940:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81105944:	00800044 	movi	r2,1
}
81105948:	e037883a 	mov	sp,fp
8110594c:	df000017 	ldw	fp,0(sp)
81105950:	dec00104 	addi	sp,sp,4
81105954:	f800283a 	ret

81105958 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105958:	defffa04 	addi	sp,sp,-24
8110595c:	de00012e 	bgeu	sp,et,81105964 <I2C_TestAdress+0xc>
81105960:	003b68fa 	trap	3
81105964:	dfc00515 	stw	ra,20(sp)
81105968:	df000415 	stw	fp,16(sp)
8110596c:	df000404 	addi	fp,sp,16
81105970:	e13ffd15 	stw	r4,-12(fp)
81105974:	e17ffe15 	stw	r5,-8(fp)
81105978:	3005883a 	mov	r2,r6
8110597c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105988:	e17ffe17 	ldw	r5,-8(fp)
8110598c:	e13ffd17 	ldw	r4,-12(fp)
81105990:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	10803fcc 	andi	r2,r2,255
8110599c:	100d883a 	mov	r6,r2
811059a0:	e17ffe17 	ldw	r5,-8(fp)
811059a4:	e13ffd17 	ldw	r4,-12(fp)
811059a8:	1105e3c0 	call	81105e3c <i2c_write>
811059ac:	1000011e 	bne	r2,zero,811059b4 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
811059b0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811059b4:	e17ffe17 	ldw	r5,-8(fp)
811059b8:	e13ffd17 	ldw	r4,-12(fp)
811059bc:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811059c0:	0106d604 	movi	r4,7000
811059c4:	1127e440 	call	81127e44 <usleep>
    
    return bSuccess;
811059c8:	e0bffc17 	ldw	r2,-16(fp)

}
811059cc:	e037883a 	mov	sp,fp
811059d0:	dfc00117 	ldw	ra,4(sp)
811059d4:	df000017 	ldw	fp,0(sp)
811059d8:	dec00204 	addi	sp,sp,8
811059dc:	f800283a 	ret

811059e0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811059e0:	defff804 	addi	sp,sp,-32
811059e4:	de00012e 	bgeu	sp,et,811059ec <I2C_Write+0xc>
811059e8:	003b68fa 	trap	3
811059ec:	dfc00715 	stw	ra,28(sp)
811059f0:	df000615 	stw	fp,24(sp)
811059f4:	df000604 	addi	fp,sp,24
811059f8:	e13ffb15 	stw	r4,-20(fp)
811059fc:	e17ffc15 	stw	r5,-16(fp)
81105a00:	3009883a 	mov	r4,r6
81105a04:	3807883a 	mov	r3,r7
81105a08:	e0800217 	ldw	r2,8(fp)
81105a0c:	e13ffd05 	stb	r4,-12(fp)
81105a10:	e0fffe05 	stb	r3,-8(fp)
81105a14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a18:	00800044 	movi	r2,1
81105a1c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a20:	e17ffc17 	ldw	r5,-16(fp)
81105a24:	e13ffb17 	ldw	r4,-20(fp)
81105a28:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a2c:	e0bffd03 	ldbu	r2,-12(fp)
81105a30:	10803fcc 	andi	r2,r2,255
81105a34:	100d883a 	mov	r6,r2
81105a38:	e17ffc17 	ldw	r5,-16(fp)
81105a3c:	e13ffb17 	ldw	r4,-20(fp)
81105a40:	1105e3c0 	call	81105e3c <i2c_write>
81105a44:	1000011e 	bne	r2,zero,81105a4c <I2C_Write+0x6c>
        bSuccess = FALSE;
81105a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105a4c:	e0bffa17 	ldw	r2,-24(fp)
81105a50:	10000726 	beq	r2,zero,81105a70 <I2C_Write+0x90>
81105a54:	e0bffe03 	ldbu	r2,-8(fp)
81105a58:	100d883a 	mov	r6,r2
81105a5c:	e17ffc17 	ldw	r5,-16(fp)
81105a60:	e13ffb17 	ldw	r4,-20(fp)
81105a64:	1105e3c0 	call	81105e3c <i2c_write>
81105a68:	1000011e 	bne	r2,zero,81105a70 <I2C_Write+0x90>
        bSuccess = FALSE;
81105a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105a70:	e0bffa17 	ldw	r2,-24(fp)
81105a74:	10000726 	beq	r2,zero,81105a94 <I2C_Write+0xb4>
81105a78:	e0bfff03 	ldbu	r2,-4(fp)
81105a7c:	100d883a 	mov	r6,r2
81105a80:	e17ffc17 	ldw	r5,-16(fp)
81105a84:	e13ffb17 	ldw	r4,-20(fp)
81105a88:	1105e3c0 	call	81105e3c <i2c_write>
81105a8c:	1000011e 	bne	r2,zero,81105a94 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105a90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	e13ffb17 	ldw	r4,-20(fp)
81105a9c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105aa0:	0106d604 	movi	r4,7000
81105aa4:	1127e440 	call	81127e44 <usleep>
    
    return bSuccess;
81105aa8:	e0bffa17 	ldw	r2,-24(fp)

}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105ac0:	defff904 	addi	sp,sp,-28
81105ac4:	de00012e 	bgeu	sp,et,81105acc <I2C_Read+0xc>
81105ac8:	003b68fa 	trap	3
81105acc:	dfc00615 	stw	ra,24(sp)
81105ad0:	df000515 	stw	fp,20(sp)
81105ad4:	df000504 	addi	fp,sp,20
81105ad8:	e13ffc15 	stw	r4,-16(fp)
81105adc:	e17ffd15 	stw	r5,-12(fp)
81105ae0:	3007883a 	mov	r3,r6
81105ae4:	3805883a 	mov	r2,r7
81105ae8:	e0fffe05 	stb	r3,-8(fp)
81105aec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105af0:	00800044 	movi	r2,1
81105af4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105af8:	e17ffd17 	ldw	r5,-12(fp)
81105afc:	e13ffc17 	ldw	r4,-16(fp)
81105b00:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b04:	e0bffe03 	ldbu	r2,-8(fp)
81105b08:	10803fcc 	andi	r2,r2,255
81105b0c:	100d883a 	mov	r6,r2
81105b10:	e17ffd17 	ldw	r5,-12(fp)
81105b14:	e13ffc17 	ldw	r4,-16(fp)
81105b18:	1105e3c0 	call	81105e3c <i2c_write>
81105b1c:	1000011e 	bne	r2,zero,81105b24 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b24:	e0bffb17 	ldw	r2,-20(fp)
81105b28:	10000726 	beq	r2,zero,81105b48 <I2C_Read+0x88>
81105b2c:	e0bfff03 	ldbu	r2,-4(fp)
81105b30:	100d883a 	mov	r6,r2
81105b34:	e17ffd17 	ldw	r5,-12(fp)
81105b38:	e13ffc17 	ldw	r4,-16(fp)
81105b3c:	1105e3c0 	call	81105e3c <i2c_write>
81105b40:	1000011e 	bne	r2,zero,81105b48 <I2C_Read+0x88>
        bSuccess = FALSE;
81105b44:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105b48:	e17ffd17 	ldw	r5,-12(fp)
81105b4c:	e13ffc17 	ldw	r4,-16(fp)
81105b50:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105b54:	e0bffe03 	ldbu	r2,-8(fp)
81105b58:	10800054 	ori	r2,r2,1
81105b5c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105b60:	e0bffb17 	ldw	r2,-20(fp)
81105b64:	10000826 	beq	r2,zero,81105b88 <I2C_Read+0xc8>
81105b68:	e0bffe03 	ldbu	r2,-8(fp)
81105b6c:	10803fcc 	andi	r2,r2,255
81105b70:	100d883a 	mov	r6,r2
81105b74:	e17ffd17 	ldw	r5,-12(fp)
81105b78:	e13ffc17 	ldw	r4,-16(fp)
81105b7c:	1105e3c0 	call	81105e3c <i2c_write>
81105b80:	1000011e 	bne	r2,zero,81105b88 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105b84:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105b88:	e0bffb17 	ldw	r2,-20(fp)
81105b8c:	10000526 	beq	r2,zero,81105ba4 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105b90:	000f883a 	mov	r7,zero
81105b94:	e1800217 	ldw	r6,8(fp)
81105b98:	e17ffd17 	ldw	r5,-12(fp)
81105b9c:	e13ffc17 	ldw	r4,-16(fp)
81105ba0:	1105f740 	call	81105f74 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105bc8:	defff604 	addi	sp,sp,-40
81105bcc:	de00012e 	bgeu	sp,et,81105bd4 <I2C_MultipleRead+0xc>
81105bd0:	003b68fa 	trap	3
81105bd4:	dfc00915 	stw	ra,36(sp)
81105bd8:	df000815 	stw	fp,32(sp)
81105bdc:	df000804 	addi	fp,sp,32
81105be0:	e13ffb15 	stw	r4,-20(fp)
81105be4:	e17ffc15 	stw	r5,-16(fp)
81105be8:	3007883a 	mov	r3,r6
81105bec:	e1fffe15 	stw	r7,-8(fp)
81105bf0:	e0800217 	ldw	r2,8(fp)
81105bf4:	e0fffd05 	stb	r3,-12(fp)
81105bf8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105bfc:	00800044 	movi	r2,1
81105c00:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c04:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c08:	e17ffc17 	ldw	r5,-16(fp)
81105c0c:	e13ffb17 	ldw	r4,-20(fp)
81105c10:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c14:	e0bffd03 	ldbu	r2,-12(fp)
81105c18:	10803fcc 	andi	r2,r2,255
81105c1c:	100d883a 	mov	r6,r2
81105c20:	e17ffc17 	ldw	r5,-16(fp)
81105c24:	e13ffb17 	ldw	r4,-20(fp)
81105c28:	1105e3c0 	call	81105e3c <i2c_write>
81105c2c:	1000011e 	bne	r2,zero,81105c34 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105c30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105c34:	e0bff917 	ldw	r2,-28(fp)
81105c38:	10000726 	beq	r2,zero,81105c58 <I2C_MultipleRead+0x90>
81105c3c:	e0bffa03 	ldbu	r2,-24(fp)
81105c40:	100d883a 	mov	r6,r2
81105c44:	e17ffc17 	ldw	r5,-16(fp)
81105c48:	e13ffb17 	ldw	r4,-20(fp)
81105c4c:	1105e3c0 	call	81105e3c <i2c_write>
81105c50:	1000011e 	bne	r2,zero,81105c58 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105c58:	e0bff917 	ldw	r2,-28(fp)
81105c5c:	10000326 	beq	r2,zero,81105c6c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105c60:	e17ffc17 	ldw	r5,-16(fp)
81105c64:	e13ffb17 	ldw	r4,-20(fp)
81105c68:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105c6c:	e0bffd03 	ldbu	r2,-12(fp)
81105c70:	10800054 	ori	r2,r2,1
81105c74:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105c78:	e0bff917 	ldw	r2,-28(fp)
81105c7c:	10000826 	beq	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
81105c80:	e0bffd03 	ldbu	r2,-12(fp)
81105c84:	10803fcc 	andi	r2,r2,255
81105c88:	100d883a 	mov	r6,r2
81105c8c:	e17ffc17 	ldw	r5,-16(fp)
81105c90:	e13ffb17 	ldw	r4,-20(fp)
81105c94:	1105e3c0 	call	81105e3c <i2c_write>
81105c98:	1000011e 	bne	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105c9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105ca0:	e0bff917 	ldw	r2,-28(fp)
81105ca4:	10001726 	beq	r2,zero,81105d04 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105ca8:	e03ff815 	stw	zero,-32(fp)
81105cac:	00001006 	br	81105cf0 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105cb0:	e0bff817 	ldw	r2,-32(fp)
81105cb4:	e0fffe17 	ldw	r3,-8(fp)
81105cb8:	1889883a 	add	r4,r3,r2
81105cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81105cc0:	10ffffc4 	addi	r3,r2,-1
81105cc4:	e0bff817 	ldw	r2,-32(fp)
81105cc8:	1884c03a 	cmpne	r2,r3,r2
81105ccc:	10803fcc 	andi	r2,r2,255
81105cd0:	100f883a 	mov	r7,r2
81105cd4:	200d883a 	mov	r6,r4
81105cd8:	e17ffc17 	ldw	r5,-16(fp)
81105cdc:	e13ffb17 	ldw	r4,-20(fp)
81105ce0:	1105f740 	call	81105f74 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105ce4:	e0bff817 	ldw	r2,-32(fp)
81105ce8:	10800044 	addi	r2,r2,1
81105cec:	e0bff815 	stw	r2,-32(fp)
81105cf0:	e0bfff0b 	ldhu	r2,-4(fp)
81105cf4:	e0fff817 	ldw	r3,-32(fp)
81105cf8:	1880020e 	bge	r3,r2,81105d04 <I2C_MultipleRead+0x13c>
81105cfc:	e0bff917 	ldw	r2,-28(fp)
81105d00:	103feb1e 	bne	r2,zero,81105cb0 <__reset+0xfb0e5cb0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d04:	e17ffc17 	ldw	r5,-16(fp)
81105d08:	e13ffb17 	ldw	r4,-20(fp)
81105d0c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;    
81105d10:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d14:	e037883a 	mov	sp,fp
81105d18:	dfc00117 	ldw	ra,4(sp)
81105d1c:	df000017 	ldw	fp,0(sp)
81105d20:	dec00204 	addi	sp,sp,8
81105d24:	f800283a 	ret

81105d28 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d28:	defffc04 	addi	sp,sp,-16
81105d2c:	de00012e 	bgeu	sp,et,81105d34 <i2c_start+0xc>
81105d30:	003b68fa 	trap	3
81105d34:	dfc00315 	stw	ra,12(sp)
81105d38:	df000215 	stw	fp,8(sp)
81105d3c:	df000204 	addi	fp,sp,8
81105d40:	e13ffe15 	stw	r4,-8(fp)
81105d44:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105d48:	e0bfff17 	ldw	r2,-4(fp)
81105d4c:	10800104 	addi	r2,r2,4
81105d50:	1007883a 	mov	r3,r2
81105d54:	00800044 	movi	r2,1
81105d58:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105d5c:	e0bfff17 	ldw	r2,-4(fp)
81105d60:	00c00044 	movi	r3,1
81105d64:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	00c00044 	movi	r3,1
81105d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d74:	01000044 	movi	r4,1
81105d78:	1127e440 	call	81127e44 <usleep>
     
    SDA_LOW(data_base); // data low
81105d7c:	e0bfff17 	ldw	r2,-4(fp)
81105d80:	0007883a 	mov	r3,zero
81105d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105d88:	01000044 	movi	r4,1
81105d8c:	1127e440 	call	81127e44 <usleep>
    SCL_LOW(clk_base); // clock low
81105d90:	e0bffe17 	ldw	r2,-8(fp)
81105d94:	0007883a 	mov	r3,zero
81105d98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d9c:	01000044 	movi	r4,1
81105da0:	1127e440 	call	81127e44 <usleep>
}
81105da4:	0001883a 	nop
81105da8:	e037883a 	mov	sp,fp
81105dac:	dfc00117 	ldw	ra,4(sp)
81105db0:	df000017 	ldw	fp,0(sp)
81105db4:	dec00204 	addi	sp,sp,8
81105db8:	f800283a 	ret

81105dbc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105dbc:	defffc04 	addi	sp,sp,-16
81105dc0:	de00012e 	bgeu	sp,et,81105dc8 <i2c_stop+0xc>
81105dc4:	003b68fa 	trap	3
81105dc8:	dfc00315 	stw	ra,12(sp)
81105dcc:	df000215 	stw	fp,8(sp)
81105dd0:	df000204 	addi	fp,sp,8
81105dd4:	e13ffe15 	stw	r4,-8(fp)
81105dd8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105ddc:	e0bfff17 	ldw	r2,-4(fp)
81105de0:	10800104 	addi	r2,r2,4
81105de4:	1007883a 	mov	r3,r2
81105de8:	00800044 	movi	r2,1
81105dec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105df0:	e0bfff17 	ldw	r2,-4(fp)
81105df4:	0007883a 	mov	r3,zero
81105df8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105dfc:	e0bffe17 	ldw	r2,-8(fp)
81105e00:	00c00044 	movi	r3,1
81105e04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e08:	01000044 	movi	r4,1
81105e0c:	1127e440 	call	81127e44 <usleep>
    SDA_HIGH(data_base); // data high
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	00c00044 	movi	r3,1
81105e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e1c:	01000044 	movi	r4,1
81105e20:	1127e440 	call	81127e44 <usleep>
    

    
}
81105e24:	0001883a 	nop
81105e28:	e037883a 	mov	sp,fp
81105e2c:	dfc00117 	ldw	ra,4(sp)
81105e30:	df000017 	ldw	fp,0(sp)
81105e34:	dec00204 	addi	sp,sp,8
81105e38:	f800283a 	ret

81105e3c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105e3c:	defff804 	addi	sp,sp,-32
81105e40:	de00012e 	bgeu	sp,et,81105e48 <i2c_write+0xc>
81105e44:	003b68fa 	trap	3
81105e48:	dfc00715 	stw	ra,28(sp)
81105e4c:	df000615 	stw	fp,24(sp)
81105e50:	df000604 	addi	fp,sp,24
81105e54:	e13ffd15 	stw	r4,-12(fp)
81105e58:	e17ffe15 	stw	r5,-8(fp)
81105e5c:	3005883a 	mov	r2,r6
81105e60:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105e64:	00bfe004 	movi	r2,-128
81105e68:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	1007883a 	mov	r3,r2
81105e78:	00800044 	movi	r2,1
81105e7c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105e80:	e03ffb15 	stw	zero,-20(fp)
81105e84:	00001f06 	br	81105f04 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105e88:	e0bffd17 	ldw	r2,-12(fp)
81105e8c:	0007883a 	mov	r3,zero
81105e90:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105e94:	e0ffff03 	ldbu	r3,-4(fp)
81105e98:	e0bffa03 	ldbu	r2,-24(fp)
81105e9c:	1884703a 	and	r2,r3,r2
81105ea0:	10803fcc 	andi	r2,r2,255
81105ea4:	10000426 	beq	r2,zero,81105eb8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105ea8:	e0bffe17 	ldw	r2,-8(fp)
81105eac:	00c00044 	movi	r3,1
81105eb0:	10c00035 	stwio	r3,0(r2)
81105eb4:	00000306 	br	81105ec4 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105eb8:	e0bffe17 	ldw	r2,-8(fp)
81105ebc:	0007883a 	mov	r3,zero
81105ec0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105ec4:	e0bffa03 	ldbu	r2,-24(fp)
81105ec8:	1004d07a 	srli	r2,r2,1
81105ecc:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
81105ed4:	00c00044 	movi	r3,1
81105ed8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105edc:	01000044 	movi	r4,1
81105ee0:	1127e440 	call	81127e44 <usleep>
        SCL_LOW(clk_base);
81105ee4:	e0bffd17 	ldw	r2,-12(fp)
81105ee8:	0007883a 	mov	r3,zero
81105eec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105ef0:	01000044 	movi	r4,1
81105ef4:	1127e440 	call	81127e44 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105ef8:	e0bffb17 	ldw	r2,-20(fp)
81105efc:	10800044 	addi	r2,r2,1
81105f00:	e0bffb15 	stw	r2,-20(fp)
81105f04:	e0bffb17 	ldw	r2,-20(fp)
81105f08:	10800210 	cmplti	r2,r2,8
81105f0c:	103fde1e 	bne	r2,zero,81105e88 <__reset+0xfb0e5e88>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f10:	e0bffe17 	ldw	r2,-8(fp)
81105f14:	10800104 	addi	r2,r2,4
81105f18:	0007883a 	mov	r3,zero
81105f1c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f20:	e0bffd17 	ldw	r2,-12(fp)
81105f24:	00c00044 	movi	r3,1
81105f28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f2c:	01000044 	movi	r4,1
81105f30:	1127e440 	call	81127e44 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	10800037 	ldwio	r2,0(r2)
81105f3c:	1005003a 	cmpeq	r2,r2,zero
81105f40:	10803fcc 	andi	r2,r2,255
81105f44:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105f48:	e0bffd17 	ldw	r2,-12(fp)
81105f4c:	0007883a 	mov	r3,zero
81105f50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105f54:	01000044 	movi	r4,1
81105f58:	1127e440 	call	81127e44 <usleep>
    return bAck;
81105f5c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105f60:	e037883a 	mov	sp,fp
81105f64:	dfc00117 	ldw	ra,4(sp)
81105f68:	df000017 	ldw	fp,0(sp)
81105f6c:	dec00204 	addi	sp,sp,8
81105f70:	f800283a 	ret

81105f74 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105f74:	defff804 	addi	sp,sp,-32
81105f78:	de00012e 	bgeu	sp,et,81105f80 <i2c_read+0xc>
81105f7c:	003b68fa 	trap	3
81105f80:	dfc00715 	stw	ra,28(sp)
81105f84:	df000615 	stw	fp,24(sp)
81105f88:	df000604 	addi	fp,sp,24
81105f8c:	e13ffc15 	stw	r4,-16(fp)
81105f90:	e17ffd15 	stw	r5,-12(fp)
81105f94:	e1bffe15 	stw	r6,-8(fp)
81105f98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105f9c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105fa0:	e0bffd17 	ldw	r2,-12(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	0007883a 	mov	r3,zero
81105fac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105fb0:	e0bffc17 	ldw	r2,-16(fp)
81105fb4:	0007883a 	mov	r3,zero
81105fb8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fbc:	01000044 	movi	r4,1
81105fc0:	1127e440 	call	81127e44 <usleep>

    for(i=0;i<8;i++){
81105fc4:	e03ffb15 	stw	zero,-20(fp)
81105fc8:	00001606 	br	81106024 <i2c_read+0xb0>
        Data <<= 1;
81105fcc:	e0bffa03 	ldbu	r2,-24(fp)
81105fd0:	1085883a 	add	r2,r2,r2
81105fd4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105fd8:	e0bffc17 	ldw	r2,-16(fp)
81105fdc:	00c00044 	movi	r3,1
81105fe0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105fe4:	01000044 	movi	r4,1
81105fe8:	1127e440 	call	81127e44 <usleep>
        if (SDA_READ(data_base))  // read data   
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10800037 	ldwio	r2,0(r2)
81105ff4:	10000326 	beq	r2,zero,81106004 <i2c_read+0x90>
            Data |= 0x01;
81105ff8:	e0bffa03 	ldbu	r2,-24(fp)
81105ffc:	10800054 	ori	r2,r2,1
81106000:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106004:	e0bffc17 	ldw	r2,-16(fp)
81106008:	0007883a 	mov	r3,zero
8110600c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106010:	01000044 	movi	r4,1
81106014:	1127e440 	call	81127e44 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106018:	e0bffb17 	ldw	r2,-20(fp)
8110601c:	10800044 	addi	r2,r2,1
81106020:	e0bffb15 	stw	r2,-20(fp)
81106024:	e0bffb17 	ldw	r2,-20(fp)
81106028:	10800210 	cmplti	r2,r2,8
8110602c:	103fe71e 	bne	r2,zero,81105fcc <__reset+0xfb0e5fcc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81106030:	e0bffc17 	ldw	r2,-16(fp)
81106034:	0007883a 	mov	r3,zero
81106038:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8110603c:	e0bffd17 	ldw	r2,-12(fp)
81106040:	10800104 	addi	r2,r2,4
81106044:	1007883a 	mov	r3,r2
81106048:	00800044 	movi	r2,1
8110604c:	18800035 	stwio	r2,0(r3)
    if (bAck)
81106050:	e0bfff17 	ldw	r2,-4(fp)
81106054:	10000426 	beq	r2,zero,81106068 <i2c_read+0xf4>
        SDA_LOW(data_base);
81106058:	e0bffd17 	ldw	r2,-12(fp)
8110605c:	0007883a 	mov	r3,zero
81106060:	10c00035 	stwio	r3,0(r2)
81106064:	00000306 	br	81106074 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
81106068:	e0bffd17 	ldw	r2,-12(fp)
8110606c:	00c00044 	movi	r3,1
81106070:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	00c00044 	movi	r3,1
8110607c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81106080:	01000044 	movi	r4,1
81106084:	1127e440 	call	81127e44 <usleep>
    SCL_LOW(clk_base); // clock low
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	0007883a 	mov	r3,zero
81106090:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106094:	01000044 	movi	r4,1
81106098:	1127e440 	call	81127e44 <usleep>
    SDA_LOW(data_base);  // data low
8110609c:	e0bffd17 	ldw	r2,-12(fp)
811060a0:	0007883a 	mov	r3,zero
811060a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811060a8:	01000044 	movi	r4,1
811060ac:	1127e440 	call	81127e44 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811060b0:	e0bffe17 	ldw	r2,-8(fp)
811060b4:	e0fffa03 	ldbu	r3,-24(fp)
811060b8:	10c00005 	stb	r3,0(r2)
}
811060bc:	0001883a 	nop
811060c0:	e037883a 	mov	sp,fp
811060c4:	dfc00117 	ldw	ra,4(sp)
811060c8:	df000017 	ldw	fp,0(sp)
811060cc:	dec00204 	addi	sp,sp,8
811060d0:	f800283a 	ret

811060d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
811060d4:	defffd04 	addi	sp,sp,-12
811060d8:	de00012e 	bgeu	sp,et,811060e0 <bSetBoardLeds+0xc>
811060dc:	003b68fa 	trap	3
811060e0:	df000215 	stw	fp,8(sp)
811060e4:	df000204 	addi	fp,sp,8
811060e8:	e13ffe15 	stw	r4,-8(fp)
811060ec:	2805883a 	mov	r2,r5
811060f0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811060f4:	e0bffe17 	ldw	r2,-8(fp)
811060f8:	10800058 	cmpnei	r2,r2,1
811060fc:	1000071e 	bne	r2,zero,8110611c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106100:	e0bfff03 	ldbu	r2,-4(fp)
81106104:	0084303a 	nor	r2,zero,r2
81106108:	1007883a 	mov	r3,r2
8110610c:	d0a04503 	ldbu	r2,-32492(gp)
81106110:	1884703a 	and	r2,r3,r2
81106114:	d0a04505 	stb	r2,-32492(gp)
81106118:	00000406 	br	8110612c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110611c:	d0e04503 	ldbu	r3,-32492(gp)
81106120:	e0bfff03 	ldbu	r2,-4(fp)
81106124:	1884b03a 	or	r2,r3,r2
81106128:	d0a04505 	stb	r2,-32492(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110612c:	d0a04503 	ldbu	r2,-32492(gp)
81106130:	10c03fcc 	andi	r3,r2,255
81106134:	00a00034 	movhi	r2,32768
81106138:	10827404 	addi	r2,r2,2512
8110613c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106140:	00800044 	movi	r2,1
}
81106144:	e037883a 	mov	sp,fp
81106148:	df000017 	ldw	fp,0(sp)
8110614c:	dec00104 	addi	sp,sp,4
81106150:	f800283a 	ret

81106154 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81106154:	defffd04 	addi	sp,sp,-12
81106158:	de00012e 	bgeu	sp,et,81106160 <bSetPainelLeds+0xc>
8110615c:	003b68fa 	trap	3
81106160:	df000215 	stw	fp,8(sp)
81106164:	df000204 	addi	fp,sp,8
81106168:	e13ffe15 	stw	r4,-8(fp)
8110616c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81106170:	e0bffe17 	ldw	r2,-8(fp)
81106174:	10800058 	cmpnei	r2,r2,1
81106178:	1000051e 	bne	r2,zero,81106190 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
8110617c:	d0e00217 	ldw	r3,-32760(gp)
81106180:	e0bfff17 	ldw	r2,-4(fp)
81106184:	1884b03a 	or	r2,r3,r2
81106188:	d0a00215 	stw	r2,-32760(gp)
8110618c:	00000506 	br	811061a4 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106190:	e0bfff17 	ldw	r2,-4(fp)
81106194:	0086303a 	nor	r3,zero,r2
81106198:	d0a00217 	ldw	r2,-32760(gp)
8110619c:	1884703a 	and	r2,r3,r2
811061a0:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811061a4:	d0a00217 	ldw	r2,-32760(gp)
811061a8:	1007883a 	mov	r3,r2
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10824004 	addi	r2,r2,2304
811061b4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b8:	00800044 	movi	r2,1
}
811061bc:	e037883a 	mov	sp,fp
811061c0:	df000017 	ldw	fp,0(sp)
811061c4:	dec00104 	addi	sp,sp,4
811061c8:	f800283a 	ret

811061cc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811061cc:	defffc04 	addi	sp,sp,-16
811061d0:	de00012e 	bgeu	sp,et,811061d8 <msgdma_write_extended_descriptor+0xc>
811061d4:	003b68fa 	trap	3
811061d8:	df000315 	stw	fp,12(sp)
811061dc:	df000304 	addi	fp,sp,12
811061e0:	e13ffd15 	stw	r4,-12(fp)
811061e4:	e17ffe15 	stw	r5,-8(fp)
811061e8:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811061ec:	e0bffd17 	ldw	r2,-12(fp)
811061f0:	10800037 	ldwio	r2,0(r2)
811061f4:	1080010c 	andi	r2,r2,4
811061f8:	10000226 	beq	r2,zero,81106204 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811061fc:	00bff904 	movi	r2,-28
81106200:	00003d06 	br	811062f8 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106204:	e0bfff17 	ldw	r2,-4(fp)
81106208:	10800017 	ldw	r2,0(r2)
8110620c:	1007883a 	mov	r3,r2
81106210:	e0bffe17 	ldw	r2,-8(fp)
81106214:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106218:	e0bffe17 	ldw	r2,-8(fp)
8110621c:	10800104 	addi	r2,r2,4
81106220:	e0ffff17 	ldw	r3,-4(fp)
81106224:	18c00117 	ldw	r3,4(r3)
81106228:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110622c:	e0bffe17 	ldw	r2,-8(fp)
81106230:	10800204 	addi	r2,r2,8
81106234:	e0ffff17 	ldw	r3,-4(fp)
81106238:	18c00217 	ldw	r3,8(r3)
8110623c:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10800304 	addi	r2,r2,12
81106248:	e0ffff17 	ldw	r3,-4(fp)
8110624c:	18c0030b 	ldhu	r3,12(r3)
81106250:	18ffffcc 	andi	r3,r3,65535
81106254:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81106258:	e0bffe17 	ldw	r2,-8(fp)
8110625c:	10800384 	addi	r2,r2,14
81106260:	e0ffff17 	ldw	r3,-4(fp)
81106264:	18c00383 	ldbu	r3,14(r3)
81106268:	18c03fcc 	andi	r3,r3,255
8110626c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81106270:	e0bffe17 	ldw	r2,-8(fp)
81106274:	108003c4 	addi	r2,r2,15
81106278:	e0ffff17 	ldw	r3,-4(fp)
8110627c:	18c003c3 	ldbu	r3,15(r3)
81106280:	18c03fcc 	andi	r3,r3,255
81106284:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800404 	addi	r2,r2,16
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c0040b 	ldhu	r3,16(r3)
81106298:	18ffffcc 	andi	r3,r3,65535
8110629c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811062a0:	e0bffe17 	ldw	r2,-8(fp)
811062a4:	10800484 	addi	r2,r2,18
811062a8:	e0ffff17 	ldw	r3,-4(fp)
811062ac:	18c0048b 	ldhu	r3,18(r3)
811062b0:	18ffffcc 	andi	r3,r3,65535
811062b4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
811062b8:	e0bffe17 	ldw	r2,-8(fp)
811062bc:	10800504 	addi	r2,r2,20
811062c0:	e0ffff17 	ldw	r3,-4(fp)
811062c4:	18c00517 	ldw	r3,20(r3)
811062c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
811062cc:	e0bffe17 	ldw	r2,-8(fp)
811062d0:	10800604 	addi	r2,r2,24
811062d4:	e0ffff17 	ldw	r3,-4(fp)
811062d8:	18c00617 	ldw	r3,24(r3)
811062dc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	10800704 	addi	r2,r2,28
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c00717 	ldw	r3,28(r3)
811062f0:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
811062f4:	0005883a 	mov	r2,zero
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	df000017 	ldw	fp,0(sp)
81106300:	dec00104 	addi	sp,sp,4
81106304:	f800283a 	ret

81106308 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106308:	defff604 	addi	sp,sp,-40
8110630c:	de00012e 	bgeu	sp,et,81106314 <msgdma_construct_extended_descriptor+0xc>
81106310:	003b68fa 	trap	3
81106314:	df000915 	stw	fp,36(sp)
81106318:	df000904 	addi	fp,sp,36
8110631c:	e13ff715 	stw	r4,-36(fp)
81106320:	e17ff815 	stw	r5,-32(fp)
81106324:	e1bff915 	stw	r6,-28(fp)
81106328:	e1fffa15 	stw	r7,-24(fp)
8110632c:	e1800517 	ldw	r6,20(fp)
81106330:	e1400617 	ldw	r5,24(fp)
81106334:	e1000717 	ldw	r4,28(fp)
81106338:	e0c00817 	ldw	r3,32(fp)
8110633c:	e0800917 	ldw	r2,36(fp)
81106340:	e1bffb0d 	sth	r6,-20(fp)
81106344:	e17ffc05 	stb	r5,-16(fp)
81106348:	e13ffd05 	stb	r4,-12(fp)
8110634c:	e0fffe0d 	sth	r3,-8(fp)
81106350:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81106354:	e0bff717 	ldw	r2,-36(fp)
81106358:	10c01217 	ldw	r3,72(r2)
8110635c:	e0800117 	ldw	r2,4(fp)
81106360:	18801936 	bltu	r3,r2,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106364:	e13ff717 	ldw	r4,-36(fp)
81106368:	20801317 	ldw	r2,76(r4)
8110636c:	20c01417 	ldw	r3,80(r4)
81106370:	e13ffe0b 	ldhu	r4,-8(fp)
81106374:	213fffcc 	andi	r4,r4,65535
81106378:	2015883a 	mov	r10,r4
8110637c:	0017883a 	mov	r11,zero
81106380:	1ac01136 	bltu	r3,r11,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106384:	58c0011e 	bne	r11,r3,8110638c <msgdma_construct_extended_descriptor+0x84>
81106388:	12800f36 	bltu	r2,r10,811063c8 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110638c:	e13ff717 	ldw	r4,-36(fp)
81106390:	20801317 	ldw	r2,76(r4)
81106394:	20c01417 	ldw	r3,80(r4)
81106398:	e13fff0b 	ldhu	r4,-4(fp)
8110639c:	213fffcc 	andi	r4,r4,65535
811063a0:	2011883a 	mov	r8,r4
811063a4:	0013883a 	mov	r9,zero
811063a8:	1a400736 	bltu	r3,r9,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063ac:	48c0011e 	bne	r9,r3,811063b4 <msgdma_construct_extended_descriptor+0xac>
811063b0:	12000536 	bltu	r2,r8,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063b4:	e0bff717 	ldw	r2,-36(fp)
811063b8:	10801703 	ldbu	r2,92(r2)
811063bc:	10803fcc 	andi	r2,r2,255
811063c0:	10800060 	cmpeqi	r2,r2,1
811063c4:	1000021e 	bne	r2,zero,811063d0 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
811063c8:	00bffa84 	movi	r2,-22
811063cc:	00002306 	br	8110645c <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
811063d0:	e0bff817 	ldw	r2,-32(fp)
811063d4:	e0fff917 	ldw	r3,-28(fp)
811063d8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
811063dc:	e0bff817 	ldw	r2,-32(fp)
811063e0:	e0fffa17 	ldw	r3,-24(fp)
811063e4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
811063e8:	e0bff817 	ldw	r2,-32(fp)
811063ec:	e0c00117 	ldw	r3,4(fp)
811063f0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
811063f4:	e0bff817 	ldw	r2,-32(fp)
811063f8:	e0fffb0b 	ldhu	r3,-20(fp)
811063fc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106400:	e0bff817 	ldw	r2,-32(fp)
81106404:	e0fffc03 	ldbu	r3,-16(fp)
81106408:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110640c:	e0bff817 	ldw	r2,-32(fp)
81106410:	e0fffd03 	ldbu	r3,-12(fp)
81106414:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106418:	e0bff817 	ldw	r2,-32(fp)
8110641c:	e0fffe0b 	ldhu	r3,-8(fp)
81106420:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106424:	e0bff817 	ldw	r2,-32(fp)
81106428:	e0ffff0b 	ldhu	r3,-4(fp)
8110642c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81106430:	e0bff817 	ldw	r2,-32(fp)
81106434:	e0c00317 	ldw	r3,12(fp)
81106438:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110643c:	e0bff817 	ldw	r2,-32(fp)
81106440:	e0c00417 	ldw	r3,16(fp)
81106444:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106448:	e0800217 	ldw	r2,8(fp)
8110644c:	10e00034 	orhi	r3,r2,32768
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10c00715 	stw	r3,28(r2)

	return 0;
81106458:	0005883a 	mov	r2,zero

}
8110645c:	e037883a 	mov	sp,fp
81106460:	df000017 	ldw	fp,0(sp)
81106464:	dec00104 	addi	sp,sp,4
81106468:	f800283a 	ret

8110646c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110646c:	deffee04 	addi	sp,sp,-72
81106470:	de00012e 	bgeu	sp,et,81106478 <msgdma_descriptor_async_transfer+0xc>
81106474:	003b68fa 	trap	3
81106478:	dfc01115 	stw	ra,68(sp)
8110647c:	df001015 	stw	fp,64(sp)
81106480:	df001004 	addi	fp,sp,64
81106484:	e13ffd15 	stw	r4,-12(fp)
81106488:	e17ffe15 	stw	r5,-8(fp)
8110648c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106490:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106494:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106498:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110649c:	e0bffd17 	ldw	r2,-12(fp)
811064a0:	10800317 	ldw	r2,12(r2)
811064a4:	10800204 	addi	r2,r2,8
811064a8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811064ac:	10bfffcc 	andi	r2,r2,65535
811064b0:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811064b4:	e0bffd17 	ldw	r2,-12(fp)
811064b8:	10800317 	ldw	r2,12(r2)
811064bc:	10800204 	addi	r2,r2,8
811064c0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811064c4:	1004d43a 	srli	r2,r2,16
811064c8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811064cc:	e0bffd17 	ldw	r2,-12(fp)
811064d0:	10800917 	ldw	r2,36(r2)
811064d4:	e0fff417 	ldw	r3,-48(fp)
811064d8:	1880042e 	bgeu	r3,r2,811064ec <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811064dc:	e0bffd17 	ldw	r2,-12(fp)
811064e0:	10800917 	ldw	r2,36(r2)
811064e4:	e0fff317 	ldw	r3,-52(fp)
811064e8:	18800236 	bltu	r3,r2,811064f4 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
811064ec:	00bff904 	movi	r2,-28
811064f0:	00009f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811064f4:	e0bffd17 	ldw	r2,-12(fp)
811064f8:	10801817 	ldw	r2,96(r2)
811064fc:	e0bff615 	stw	r2,-40(fp)
81106500:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106504:	e0bffc0b 	ldhu	r2,-16(fp)
81106508:	e0fffc84 	addi	r3,fp,-14
8110650c:	180d883a 	mov	r6,r3
81106510:	100b883a 	mov	r5,r2
81106514:	e13ff617 	ldw	r4,-40(fp)
81106518:	112ecc00 	call	8112ecc0 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110651c:	00800804 	movi	r2,32
81106520:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106524:	0005303a 	rdctl	r2,status
81106528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110652c:	e0fff717 	ldw	r3,-36(fp)
81106530:	00bfff84 	movi	r2,-2
81106534:	1884703a 	and	r2,r3,r2
81106538:	1001703a 	wrctl	status,r2
  
  return context;
8110653c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106540:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106544:	e0bffd17 	ldw	r2,-12(fp)
81106548:	10800317 	ldw	r2,12(r2)
8110654c:	10800104 	addi	r2,r2,4
81106550:	e0fff117 	ldw	r3,-60(fp)
81106554:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106558:	e0bffd17 	ldw	r2,-12(fp)
8110655c:	10800317 	ldw	r2,12(r2)
81106560:	e0fffd17 	ldw	r3,-12(fp)
81106564:	18c00317 	ldw	r3,12(r3)
81106568:	18c00037 	ldwio	r3,0(r3)
8110656c:	10c00035 	stwio	r3,0(r2)
81106570:	e0bff217 	ldw	r2,-56(fp)
81106574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106578:	e0bffb17 	ldw	r2,-20(fp)
8110657c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81106580:	e0bffe17 	ldw	r2,-8(fp)
81106584:	10001026 	beq	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
81106588:	e0bfff17 	ldw	r2,-4(fp)
8110658c:	10000e1e 	bne	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106590:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106594:	d0a04d17 	ldw	r2,-32460(gp)
81106598:	100f883a 	mov	r7,r2
8110659c:	01800784 	movi	r6,30
811065a0:	01400044 	movi	r5,1
811065a4:	01204534 	movhi	r4,33044
811065a8:	2131de04 	addi	r4,r4,-14472
811065ac:	1111f680 	call	81111f68 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10801817 	ldw	r2,96(r2)
811065b8:	1009883a 	mov	r4,r2
811065bc:	112f0480 	call	8112f048 <OSSemPost>

		return -ETIME;
811065c0:	00bff084 	movi	r2,-62
811065c4:	00006a06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811065c8:	e0bffe17 	ldw	r2,-8(fp)
811065cc:	1000231e 	bne	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
811065d0:	e0bfff17 	ldw	r2,-4(fp)
811065d4:	10002126 	beq	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
811065d8:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811065dc:	00001506 	br	81106634 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811065e0:	01000044 	movi	r4,1
811065e4:	1126f740 	call	81126f74 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811065e8:	e0bff00b 	ldhu	r2,-64(fp)
811065ec:	1084e230 	cmpltui	r2,r2,5000
811065f0:	10000d1e 	bne	r2,zero,81106628 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
811065f4:	d0a04d17 	ldw	r2,-32460(gp)
811065f8:	100f883a 	mov	r7,r2
811065fc:	01801544 	movi	r6,85
81106600:	01400044 	movi	r5,1
81106604:	01204534 	movhi	r4,33044
81106608:	2131e604 	addi	r4,r4,-14440
8110660c:	1111f680 	call	81111f68 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106610:	e0bffd17 	ldw	r2,-12(fp)
81106614:	10801817 	ldw	r2,96(r2)
81106618:	1009883a 	mov	r4,r2
8110661c:	112f0480 	call	8112f048 <OSSemPost>

				return -ETIME;
81106620:	00bff084 	movi	r2,-62
81106624:	00005206 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106628:	e0bff00b 	ldhu	r2,-64(fp)
8110662c:	10800044 	addi	r2,r2,1
81106630:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106634:	e0bffd17 	ldw	r2,-12(fp)
81106638:	10c00317 	ldw	r3,12(r2)
8110663c:	e0bffd17 	ldw	r2,-12(fp)
81106640:	10800417 	ldw	r2,16(r2)
81106644:	e1bfff17 	ldw	r6,-4(fp)
81106648:	100b883a 	mov	r5,r2
8110664c:	1809883a 	mov	r4,r3
81106650:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106654:	103fe21e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106658:	00000606 	br	81106674 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110665c:	e0bffd17 	ldw	r2,-12(fp)
81106660:	10801817 	ldw	r2,96(r2)
81106664:	1009883a 	mov	r4,r2
81106668:	112f0480 	call	8112f048 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110666c:	00bfffc4 	movi	r2,-1
81106670:	00003f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81106674:	e0bffd17 	ldw	r2,-12(fp)
81106678:	10800b17 	ldw	r2,44(r2)
8110667c:	10001c26 	beq	r2,zero,811066f0 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10c00d17 	ldw	r3,52(r2)
81106688:	e0bff117 	ldw	r2,-60(fp)
8110668c:	1884b03a 	or	r2,r3,r2
81106690:	10800514 	ori	r2,r2,20
81106694:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106698:	e0fff117 	ldw	r3,-60(fp)
8110669c:	00bff7c4 	movi	r2,-33
811066a0:	1884703a 	and	r2,r3,r2
811066a4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811066a8:	0005303a 	rdctl	r2,status
811066ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811066b0:	e0fff917 	ldw	r3,-28(fp)
811066b4:	00bfff84 	movi	r2,-2
811066b8:	1884703a 	and	r2,r3,r2
811066bc:	1001703a 	wrctl	status,r2
  
  return context;
811066c0:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811066c4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811066c8:	e0bffd17 	ldw	r2,-12(fp)
811066cc:	10800317 	ldw	r2,12(r2)
811066d0:	10800104 	addi	r2,r2,4
811066d4:	e0fff117 	ldw	r3,-60(fp)
811066d8:	10c00035 	stwio	r3,0(r2)
811066dc:	e0bff217 	ldw	r2,-56(fp)
811066e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811066e4:	e0bff517 	ldw	r2,-44(fp)
811066e8:	1001703a 	wrctl	status,r2
811066ec:	00001b06 	br	8110675c <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800114 	ori	r2,r2,4
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff3c4 	movi	r2,-49
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fffa17 	ldw	r3,-24(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff817 	ldw	r2,-32(fp)
81106758:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
8110675c:	e0bffd17 	ldw	r2,-12(fp)
81106760:	10801817 	ldw	r2,96(r2)
81106764:	1009883a 	mov	r4,r2
81106768:	112f0480 	call	8112f048 <OSSemPost>

	return 0;
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	dfc00117 	ldw	ra,4(sp)
81106778:	df000017 	ldw	fp,0(sp)
8110677c:	dec00204 	addi	sp,sp,8
81106780:	f800283a 	ret

81106784 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81106784:	deffee04 	addi	sp,sp,-72
81106788:	de00012e 	bgeu	sp,et,81106790 <msgdma_descriptor_sync_transfer+0xc>
8110678c:	003b68fa 	trap	3
81106790:	dfc01115 	stw	ra,68(sp)
81106794:	df001015 	stw	fp,64(sp)
81106798:	df001004 	addi	fp,sp,64
8110679c:	e13ffd15 	stw	r4,-12(fp)
811067a0:	e17ffe15 	stw	r5,-8(fp)
811067a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811067a8:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
811067ac:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
811067b0:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
811067b4:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067b8:	e0bffd17 	ldw	r2,-12(fp)
811067bc:	10800317 	ldw	r2,12(r2)
811067c0:	10800204 	addi	r2,r2,8
811067c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811067c8:	10bfffcc 	andi	r2,r2,65535
811067cc:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067d0:	e0bffd17 	ldw	r2,-12(fp)
811067d4:	10800317 	ldw	r2,12(r2)
811067d8:	10800204 	addi	r2,r2,8
811067dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811067e0:	1004d43a 	srli	r2,r2,16
811067e4:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
811067e8:	00807804 	movi	r2,480
811067ec:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811067f0:	00001d06 	br	81106868 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
811067f4:	01000044 	movi	r4,1
811067f8:	1126f740 	call	81126f74 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811067fc:	e0bff10b 	ldhu	r2,-60(fp)
81106800:	1084e230 	cmpltui	r2,r2,5000
81106804:	1000091e 	bne	r2,zero,8110682c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106808:	d0a04d17 	ldw	r2,-32460(gp)
8110680c:	100f883a 	mov	r7,r2
81106810:	01801304 	movi	r6,76
81106814:	01400044 	movi	r5,1
81106818:	01204534 	movhi	r4,33044
8110681c:	2131fc04 	addi	r4,r4,-14352
81106820:	1111f680 	call	81111f68 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106824:	00bff084 	movi	r2,-62
81106828:	0000d006 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110682c:	e0bff10b 	ldhu	r2,-60(fp)
81106830:	10800044 	addi	r2,r2,1
81106834:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106838:	e0bffd17 	ldw	r2,-12(fp)
8110683c:	10800317 	ldw	r2,12(r2)
81106840:	10800204 	addi	r2,r2,8
81106844:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81106848:	10bfffcc 	andi	r2,r2,65535
8110684c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106850:	e0bffd17 	ldw	r2,-12(fp)
81106854:	10800317 	ldw	r2,12(r2)
81106858:	10800204 	addi	r2,r2,8
8110685c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81106860:	1004d43a 	srli	r2,r2,16
81106864:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106868:	e0bffd17 	ldw	r2,-12(fp)
8110686c:	10800917 	ldw	r2,36(r2)
81106870:	e0fff317 	ldw	r3,-52(fp)
81106874:	18bfdf2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81106878:	e0bffd17 	ldw	r2,-12(fp)
8110687c:	10800917 	ldw	r2,36(r2)
81106880:	e0fff217 	ldw	r3,-56(fp)
81106884:	18bfdb2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106888:	e0bffd17 	ldw	r2,-12(fp)
8110688c:	10801817 	ldw	r2,96(r2)
81106890:	e0bff815 	stw	r2,-32(fp)
81106894:	e03ffc0d 	sth	zero,-16(fp)
81106898:	e0bffc0b 	ldhu	r2,-16(fp)
8110689c:	e0fffc84 	addi	r3,fp,-14
811068a0:	180d883a 	mov	r6,r3
811068a4:	100b883a 	mov	r5,r2
811068a8:	e13ff817 	ldw	r4,-32(fp)
811068ac:	112ecc00 	call	8112ecc0 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811068b0:	0005303a 	rdctl	r2,status
811068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811068b8:	e0fffb17 	ldw	r3,-20(fp)
811068bc:	00bfff84 	movi	r2,-2
811068c0:	1884703a 	and	r2,r3,r2
811068c4:	1001703a 	wrctl	status,r2
  
  return context;
811068c8:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811068cc:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811068d0:	e0bffd17 	ldw	r2,-12(fp)
811068d4:	10800317 	ldw	r2,12(r2)
811068d8:	10800104 	addi	r2,r2,4
811068dc:	00c00804 	movi	r3,32
811068e0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811068e4:	e0bffd17 	ldw	r2,-12(fp)
811068e8:	10800317 	ldw	r2,12(r2)
811068ec:	e0fffd17 	ldw	r3,-12(fp)
811068f0:	18c00317 	ldw	r3,12(r3)
811068f4:	18c00037 	ldwio	r3,0(r3)
811068f8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
811068fc:	e0bffe17 	ldw	r2,-8(fp)
81106900:	10001026 	beq	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
81106904:	e0bfff17 	ldw	r2,-4(fp)
81106908:	10000e1e 	bne	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110690c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106910:	d0a04d17 	ldw	r2,-32460(gp)
81106914:	100f883a 	mov	r7,r2
81106918:	01800784 	movi	r6,30
8110691c:	01400044 	movi	r5,1
81106920:	01204534 	movhi	r4,33044
81106924:	2131de04 	addi	r4,r4,-14472
81106928:	1111f680 	call	81111f68 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110692c:	e0bffd17 	ldw	r2,-12(fp)
81106930:	10801817 	ldw	r2,96(r2)
81106934:	1009883a 	mov	r4,r2
81106938:	112f0480 	call	8112f048 <OSSemPost>

		return -ETIME;
8110693c:	00bff084 	movi	r2,-62
81106940:	00008a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106944:	e0bffe17 	ldw	r2,-8(fp)
81106948:	1000231e 	bne	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
8110694c:	e0bfff17 	ldw	r2,-4(fp)
81106950:	10002126 	beq	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
81106954:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106958:	00001506 	br	811069b0 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110695c:	01000044 	movi	r4,1
81106960:	1126f740 	call	81126f74 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106964:	e0bff10b 	ldhu	r2,-60(fp)
81106968:	1084e230 	cmpltui	r2,r2,5000
8110696c:	10000d1e 	bne	r2,zero,811069a4 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
81106970:	d0a04d17 	ldw	r2,-32460(gp)
81106974:	100f883a 	mov	r7,r2
81106978:	01801004 	movi	r6,64
8110697c:	01400044 	movi	r5,1
81106980:	01204534 	movhi	r4,33044
81106984:	21321004 	addi	r4,r4,-14272
81106988:	1111f680 	call	81111f68 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
8110698c:	e0bffd17 	ldw	r2,-12(fp)
81106990:	10801817 	ldw	r2,96(r2)
81106994:	1009883a 	mov	r4,r2
81106998:	112f0480 	call	8112f048 <OSSemPost>

				return -ETIME;
8110699c:	00bff084 	movi	r2,-62
811069a0:	00007206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
811069a4:	e0bff10b 	ldhu	r2,-60(fp)
811069a8:	10800044 	addi	r2,r2,1
811069ac:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811069b0:	e0bffd17 	ldw	r2,-12(fp)
811069b4:	10c00317 	ldw	r3,12(r2)
811069b8:	e0bffd17 	ldw	r2,-12(fp)
811069bc:	10800417 	ldw	r2,16(r2)
811069c0:	e1bfff17 	ldw	r6,-4(fp)
811069c4:	100b883a 	mov	r5,r2
811069c8:	1809883a 	mov	r4,r3
811069cc:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069d0:	103fe21e 	bne	r2,zero,8110695c <__reset+0xfb0e695c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069d4:	00000606 	br	811069f0 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811069d8:	e0bffd17 	ldw	r2,-12(fp)
811069dc:	10801817 	ldw	r2,96(r2)
811069e0:	1009883a 	mov	r4,r2
811069e4:	112f0480 	call	8112f048 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811069e8:	00bfffc4 	movi	r2,-1
811069ec:	00005f06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811069f0:	e0bffd17 	ldw	r2,-12(fp)
811069f4:	10800317 	ldw	r2,12(r2)
811069f8:	10800104 	addi	r2,r2,4
811069fc:	e0fffd17 	ldw	r3,-12(fp)
81106a00:	19000d17 	ldw	r4,52(r3)
81106a04:	00fff2c4 	movi	r3,-53
81106a08:	20c6703a 	and	r3,r4,r3
81106a0c:	18c00114 	ori	r3,r3,4
81106a10:	10c00035 	stwio	r3,0(r2)
81106a14:	e0bff517 	ldw	r2,-44(fp)
81106a18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a24:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800317 	ldw	r2,12(r2)
81106a30:	10800037 	ldwio	r2,0(r2)
81106a34:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106a38:	00001906 	br	81106aa0 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106a3c:	01000044 	movi	r4,1
81106a40:	1126f740 	call	81126f74 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106a44:	e0bff10b 	ldhu	r2,-60(fp)
81106a48:	1084e230 	cmpltui	r2,r2,5000
81106a4c:	10000d1e 	bne	r2,zero,81106a84 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106a50:	d0a04d17 	ldw	r2,-32460(gp)
81106a54:	100f883a 	mov	r7,r2
81106a58:	01801184 	movi	r6,70
81106a5c:	01400044 	movi	r5,1
81106a60:	01204534 	movhi	r4,33044
81106a64:	21322104 	addi	r4,r4,-14204
81106a68:	1111f680 	call	81111f68 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106a6c:	e0bffd17 	ldw	r2,-12(fp)
81106a70:	10801817 	ldw	r2,96(r2)
81106a74:	1009883a 	mov	r4,r2
81106a78:	112f0480 	call	8112f048 <OSSemPost>

			return -ETIME;
81106a7c:	00bff084 	movi	r2,-62
81106a80:	00003a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106a84:	e0bff10b 	ldhu	r2,-60(fp)
81106a88:	10800044 	addi	r2,r2,1
81106a8c:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a90:	e0bffd17 	ldw	r2,-12(fp)
81106a94:	10800317 	ldw	r2,12(r2)
81106a98:	10800037 	ldwio	r2,0(r2)
81106a9c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa0:	e0fff017 	ldw	r3,-64(fp)
81106aa4:	e0bff617 	ldw	r2,-40(fp)
81106aa8:	1884703a 	and	r2,r3,r2
81106aac:	1000031e 	bne	r2,zero,81106abc <msgdma_descriptor_sync_transfer+0x338>
81106ab0:	e0bff017 	ldw	r2,-64(fp)
81106ab4:	1080004c 	andi	r2,r2,1
81106ab8:	103fe01e 	bne	r2,zero,81106a3c <__reset+0xfb0e6a3c>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106abc:	e0fff017 	ldw	r3,-64(fp)
81106ac0:	e0bff617 	ldw	r2,-40(fp)
81106ac4:	1884703a 	and	r2,r3,r2
81106ac8:	10000626 	beq	r2,zero,81106ae4 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106acc:	e0bffd17 	ldw	r2,-12(fp)
81106ad0:	10801817 	ldw	r2,96(r2)
81106ad4:	1009883a 	mov	r4,r2
81106ad8:	112f0480 	call	8112f048 <OSSemPost>

		return error;
81106adc:	e0bff617 	ldw	r2,-40(fp)
81106ae0:	00002206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106ae4:	e0bffd17 	ldw	r2,-12(fp)
81106ae8:	10800317 	ldw	r2,12(r2)
81106aec:	10800104 	addi	r2,r2,4
81106af0:	10800037 	ldwio	r2,0(r2)
81106af4:	10800814 	ori	r2,r2,32
81106af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106afc:	0005303a 	rdctl	r2,status
81106b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b04:	e0fffa17 	ldw	r3,-24(fp)
81106b08:	00bfff84 	movi	r2,-2
81106b0c:	1884703a 	and	r2,r3,r2
81106b10:	1001703a 	wrctl	status,r2
  
  return context;
81106b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b18:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b1c:	e0bffd17 	ldw	r2,-12(fp)
81106b20:	10800317 	ldw	r2,12(r2)
81106b24:	10800104 	addi	r2,r2,4
81106b28:	e0fff417 	ldw	r3,-48(fp)
81106b2c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106b30:	e0bffd17 	ldw	r2,-12(fp)
81106b34:	10800317 	ldw	r2,12(r2)
81106b38:	e0fffd17 	ldw	r3,-12(fp)
81106b3c:	18c00317 	ldw	r3,12(r3)
81106b40:	18c00037 	ldwio	r3,0(r3)
81106b44:	10c00035 	stwio	r3,0(r2)
81106b48:	e0bff517 	ldw	r2,-44(fp)
81106b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b50:	e0bff917 	ldw	r2,-28(fp)
81106b54:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106b58:	e0bffd17 	ldw	r2,-12(fp)
81106b5c:	10801817 	ldw	r2,96(r2)
81106b60:	1009883a 	mov	r4,r2
81106b64:	112f0480 	call	8112f048 <OSSemPost>

	return 0;
81106b68:	0005883a 	mov	r2,zero

}
81106b6c:	e037883a 	mov	sp,fp
81106b70:	dfc00117 	ldw	ra,4(sp)
81106b74:	df000017 	ldw	fp,0(sp)
81106b78:	dec00204 	addi	sp,sp,8
81106b7c:	f800283a 	ret

81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106b80:	deffec04 	addi	sp,sp,-80
81106b84:	de00012e 	bgeu	sp,et,81106b8c <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106b88:	003b68fa 	trap	3
81106b8c:	dfc01315 	stw	ra,76(sp)
81106b90:	df001215 	stw	fp,72(sp)
81106b94:	df001204 	addi	fp,sp,72
81106b98:	e13ff715 	stw	r4,-36(fp)
81106b9c:	e17ff815 	stw	r5,-32(fp)
81106ba0:	e1bff915 	stw	r6,-28(fp)
81106ba4:	e1fffa15 	stw	r7,-24(fp)
81106ba8:	e1800617 	ldw	r6,24(fp)
81106bac:	e1400717 	ldw	r5,28(fp)
81106bb0:	e1000817 	ldw	r4,32(fp)
81106bb4:	e0c00917 	ldw	r3,36(fp)
81106bb8:	e0800a17 	ldw	r2,40(fp)
81106bbc:	e1bffb0d 	sth	r6,-20(fp)
81106bc0:	e17ffc05 	stb	r5,-16(fp)
81106bc4:	e13ffd05 	stb	r4,-12(fp)
81106bc8:	e0fffe0d 	sth	r3,-8(fp)
81106bcc:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106bd0:	e0bffb0b 	ldhu	r2,-20(fp)
81106bd4:	e0fffc03 	ldbu	r3,-16(fp)
81106bd8:	e13ffd03 	ldbu	r4,-12(fp)
81106bdc:	e17ffe0b 	ldhu	r5,-8(fp)
81106be0:	e1bfff0b 	ldhu	r6,-4(fp)
81106be4:	d9800815 	stw	r6,32(sp)
81106be8:	d9400715 	stw	r5,28(sp)
81106bec:	d9000615 	stw	r4,24(sp)
81106bf0:	d8c00515 	stw	r3,20(sp)
81106bf4:	d8800415 	stw	r2,16(sp)
81106bf8:	e0800517 	ldw	r2,20(fp)
81106bfc:	d8800315 	stw	r2,12(sp)
81106c00:	e0800417 	ldw	r2,16(fp)
81106c04:	d8800215 	stw	r2,8(sp)
81106c08:	e0800317 	ldw	r2,12(fp)
81106c0c:	d8800115 	stw	r2,4(sp)
81106c10:	e0800217 	ldw	r2,8(fp)
81106c14:	d8800015 	stw	r2,0(sp)
81106c18:	e1fffa17 	ldw	r7,-24(fp)
81106c1c:	e1bff917 	ldw	r6,-28(fp)
81106c20:	e17ff817 	ldw	r5,-32(fp)
81106c24:	e13ff717 	ldw	r4,-36(fp)
81106c28:	11063080 	call	81106308 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c2c:	e037883a 	mov	sp,fp
81106c30:	dfc00117 	ldw	ra,4(sp)
81106c34:	df000017 	ldw	fp,0(sp)
81106c38:	dec00204 	addi	sp,sp,8
81106c3c:	f800283a 	ret

81106c40 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c40:	defffc04 	addi	sp,sp,-16
81106c44:	de00012e 	bgeu	sp,et,81106c4c <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106c48:	003b68fa 	trap	3
81106c4c:	dfc00315 	stw	ra,12(sp)
81106c50:	df000215 	stw	fp,8(sp)
81106c54:	df000204 	addi	fp,sp,8
81106c58:	e13ffe15 	stw	r4,-8(fp)
81106c5c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106c60:	e1bfff17 	ldw	r6,-4(fp)
81106c64:	000b883a 	mov	r5,zero
81106c68:	e13ffe17 	ldw	r4,-8(fp)
81106c6c:	110646c0 	call	8110646c <msgdma_descriptor_async_transfer>
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c84:	defffc04 	addi	sp,sp,-16
81106c88:	de00012e 	bgeu	sp,et,81106c90 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106c8c:	003b68fa 	trap	3
81106c90:	dfc00315 	stw	ra,12(sp)
81106c94:	df000215 	stw	fp,8(sp)
81106c98:	df000204 	addi	fp,sp,8
81106c9c:	e13ffe15 	stw	r4,-8(fp)
81106ca0:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106ca4:	e1bfff17 	ldw	r6,-4(fp)
81106ca8:	000b883a 	mov	r5,zero
81106cac:	e13ffe17 	ldw	r4,-8(fp)
81106cb0:	11067840 	call	81106784 <msgdma_descriptor_sync_transfer>
}
81106cb4:	e037883a 	mov	sp,fp
81106cb8:	dfc00117 	ldw	ra,4(sp)
81106cbc:	df000017 	ldw	fp,0(sp)
81106cc0:	dec00204 	addi	sp,sp,8
81106cc4:	f800283a 	ret

81106cc8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106cc8:	defff204 	addi	sp,sp,-56
81106ccc:	de00012e 	bgeu	sp,et,81106cd4 <POWER_SPI_RW+0xc>
81106cd0:	003b68fa 	trap	3
81106cd4:	dfc00d15 	stw	ra,52(sp)
81106cd8:	df000c15 	stw	fp,48(sp)
81106cdc:	df000c04 	addi	fp,sp,48
81106ce0:	2007883a 	mov	r3,r4
81106ce4:	2805883a 	mov	r2,r5
81106ce8:	e1bffe15 	stw	r6,-8(fp)
81106cec:	e1ffff15 	stw	r7,-4(fp)
81106cf0:	e0fffc05 	stb	r3,-16(fp)
81106cf4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106cf8:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106cfc:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d00:	008003f4 	movhi	r2,15
81106d04:	10909004 	addi	r2,r2,16960
81106d08:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d0c:	00bfe004 	movi	r2,-128
81106d10:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d14:	e0bffe17 	ldw	r2,-8(fp)
81106d18:	10000226 	beq	r2,zero,81106d24 <POWER_SPI_RW+0x5c>
81106d1c:	00800804 	movi	r2,32
81106d20:	00000106 	br	81106d28 <POWER_SPI_RW+0x60>
81106d24:	0005883a 	mov	r2,zero
81106d28:	e0fff403 	ldbu	r3,-48(fp)
81106d2c:	10c4b03a 	or	r2,r2,r3
81106d30:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106d34:	e0800217 	ldw	r2,8(fp)
81106d38:	10000226 	beq	r2,zero,81106d44 <POWER_SPI_RW+0x7c>
81106d3c:	00800404 	movi	r2,16
81106d40:	00000106 	br	81106d48 <POWER_SPI_RW+0x80>
81106d44:	0005883a 	mov	r2,zero
81106d48:	e0fff403 	ldbu	r3,-48(fp)
81106d4c:	10c4b03a 	or	r2,r2,r3
81106d50:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106d54:	e0bfff17 	ldw	r2,-4(fp)
81106d58:	10000226 	beq	r2,zero,81106d64 <POWER_SPI_RW+0x9c>
81106d5c:	00800204 	movi	r2,8
81106d60:	00000106 	br	81106d68 <POWER_SPI_RW+0xa0>
81106d64:	0005883a 	mov	r2,zero
81106d68:	e0fff403 	ldbu	r3,-48(fp)
81106d6c:	10c4b03a 	or	r2,r2,r3
81106d70:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106d74:	e0bffd03 	ldbu	r2,-12(fp)
81106d78:	108001cc 	andi	r2,r2,7
81106d7c:	1007883a 	mov	r3,r2
81106d80:	e0bff403 	ldbu	r2,-48(fp)
81106d84:	1884b03a 	or	r2,r3,r2
81106d88:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106d8c:	0007883a 	mov	r3,zero
81106d90:	00a00034 	movhi	r2,32768
81106d94:	10824404 	addi	r2,r2,2320
81106d98:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106d9c:	0007883a 	mov	r3,zero
81106da0:	00a00034 	movhi	r2,32768
81106da4:	10824c04 	addi	r2,r2,2352
81106da8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106dac:	e0bffc03 	ldbu	r2,-16(fp)
81106db0:	1000021e 	bne	r2,zero,81106dbc <POWER_SPI_RW+0xf4>
81106db4:	00c00084 	movi	r3,2
81106db8:	00000106 	br	81106dc0 <POWER_SPI_RW+0xf8>
81106dbc:	00c00044 	movi	r3,1
81106dc0:	00a00034 	movhi	r2,32768
81106dc4:	10824804 	addi	r2,r2,2336
81106dc8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106dcc:	010003c4 	movi	r4,15
81106dd0:	1127e440 	call	81127e44 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106dd4:	00000306 	br	81106de4 <POWER_SPI_RW+0x11c>
		nWait++;
81106dd8:	e0bff817 	ldw	r2,-32(fp)
81106ddc:	10800044 	addi	r2,r2,1
81106de0:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106de4:	00a00034 	movhi	r2,32768
81106de8:	10825404 	addi	r2,r2,2384
81106dec:	10800037 	ldwio	r2,0(r2)
81106df0:	1080004c 	andi	r2,r2,1
81106df4:	10000326 	beq	r2,zero,81106e04 <POWER_SPI_RW+0x13c>
81106df8:	e0fff817 	ldw	r3,-32(fp)
81106dfc:	e0bffa17 	ldw	r2,-24(fp)
81106e00:	18bff516 	blt	r3,r2,81106dd8 <__reset+0xfb0e6dd8>
		nWait++;
	}

	if (SPI_SDO) {
81106e04:	00a00034 	movhi	r2,32768
81106e08:	10825404 	addi	r2,r2,2384
81106e0c:	10800037 	ldwio	r2,0(r2)
81106e10:	1080004c 	andi	r2,r2,1
81106e14:	10000626 	beq	r2,zero,81106e30 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e18:	00c000c4 	movi	r3,3
81106e1c:	00a00034 	movhi	r2,32768
81106e20:	10824804 	addi	r2,r2,2336
81106e24:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e28:	0005883a 	mov	r2,zero
81106e2c:	0000db06 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106e30:	e03ff715 	stw	zero,-36(fp)
81106e34:	00002406 	br	81106ec8 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106e38:	e0bff403 	ldbu	r2,-48(fp)
81106e3c:	10803fcc 	andi	r2,r2,255
81106e40:	1004d1fa 	srli	r2,r2,7
81106e44:	10c03fcc 	andi	r3,r2,255
81106e48:	00a00034 	movhi	r2,32768
81106e4c:	10825004 	addi	r2,r2,2368
81106e50:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106e54:	e0bff403 	ldbu	r2,-48(fp)
81106e58:	1085883a 	add	r2,r2,r2
81106e5c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106e60:	e0bff517 	ldw	r2,-44(fp)
81106e64:	1085883a 	add	r2,r2,r2
81106e68:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106e6c:	00a00034 	movhi	r2,32768
81106e70:	10825404 	addi	r2,r2,2384
81106e74:	10800037 	ldwio	r2,0(r2)
81106e78:	1080004c 	andi	r2,r2,1
81106e7c:	1007883a 	mov	r3,r2
81106e80:	e0bff517 	ldw	r2,-44(fp)
81106e84:	10c4b03a 	or	r2,r2,r3
81106e88:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106e8c:	00c00044 	movi	r3,1
81106e90:	00a00034 	movhi	r2,32768
81106e94:	10824c04 	addi	r2,r2,2352
81106e98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106e9c:	010003c4 	movi	r4,15
81106ea0:	1127e440 	call	81127e44 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106ea4:	0007883a 	mov	r3,zero
81106ea8:	00a00034 	movhi	r2,32768
81106eac:	10824c04 	addi	r2,r2,2352
81106eb0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106eb4:	010003c4 	movi	r4,15
81106eb8:	1127e440 	call	81127e44 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ebc:	e0bff717 	ldw	r2,-36(fp)
81106ec0:	10800044 	addi	r2,r2,1
81106ec4:	e0bff715 	stw	r2,-36(fp)
81106ec8:	e0bff717 	ldw	r2,-36(fp)
81106ecc:	10800090 	cmplti	r2,r2,2
81106ed0:	103fd91e 	bne	r2,zero,81106e38 <__reset+0xfb0e6e38>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106ed4:	e03ff715 	stw	zero,-36(fp)
81106ed8:	00002406 	br	81106f6c <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106edc:	e0bff403 	ldbu	r2,-48(fp)
81106ee0:	10803fcc 	andi	r2,r2,255
81106ee4:	1004d1fa 	srli	r2,r2,7
81106ee8:	10c03fcc 	andi	r3,r2,255
81106eec:	00a00034 	movhi	r2,32768
81106ef0:	10825004 	addi	r2,r2,2368
81106ef4:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ef8:	e0bff403 	ldbu	r2,-48(fp)
81106efc:	1085883a 	add	r2,r2,r2
81106f00:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f04:	e0bff517 	ldw	r2,-44(fp)
81106f08:	1085883a 	add	r2,r2,r2
81106f0c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f10:	00a00034 	movhi	r2,32768
81106f14:	10825404 	addi	r2,r2,2384
81106f18:	10800037 	ldwio	r2,0(r2)
81106f1c:	1080004c 	andi	r2,r2,1
81106f20:	1007883a 	mov	r3,r2
81106f24:	e0bff517 	ldw	r2,-44(fp)
81106f28:	10c4b03a 	or	r2,r2,r3
81106f2c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106f30:	00c00044 	movi	r3,1
81106f34:	00a00034 	movhi	r2,32768
81106f38:	10824c04 	addi	r2,r2,2352
81106f3c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f40:	010003c4 	movi	r4,15
81106f44:	1127e440 	call	81127e44 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f48:	0007883a 	mov	r3,zero
81106f4c:	00a00034 	movhi	r2,32768
81106f50:	10824c04 	addi	r2,r2,2352
81106f54:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f58:	010003c4 	movi	r4,15
81106f5c:	1127e440 	call	81127e44 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f60:	e0bff717 	ldw	r2,-36(fp)
81106f64:	10800044 	addi	r2,r2,1
81106f68:	e0bff715 	stw	r2,-36(fp)
81106f6c:	e0bff717 	ldw	r2,-36(fp)
81106f70:	10800210 	cmplti	r2,r2,8
81106f74:	103fd91e 	bne	r2,zero,81106edc <__reset+0xfb0e6edc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106f78:	e03ff715 	stw	zero,-36(fp)
81106f7c:	00001a06 	br	81106fe8 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106f80:	e0bff517 	ldw	r2,-44(fp)
81106f84:	1085883a 	add	r2,r2,r2
81106f88:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106f8c:	00a00034 	movhi	r2,32768
81106f90:	10825404 	addi	r2,r2,2384
81106f94:	10800037 	ldwio	r2,0(r2)
81106f98:	1080004c 	andi	r2,r2,1
81106f9c:	1007883a 	mov	r3,r2
81106fa0:	e0bff517 	ldw	r2,-44(fp)
81106fa4:	10c4b03a 	or	r2,r2,r3
81106fa8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fac:	00c00044 	movi	r3,1
81106fb0:	00a00034 	movhi	r2,32768
81106fb4:	10824c04 	addi	r2,r2,2352
81106fb8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fbc:	010003c4 	movi	r4,15
81106fc0:	1127e440 	call	81127e44 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fc4:	0007883a 	mov	r3,zero
81106fc8:	00a00034 	movhi	r2,32768
81106fcc:	10824c04 	addi	r2,r2,2352
81106fd0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fd4:	010003c4 	movi	r4,15
81106fd8:	1127e440 	call	81127e44 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800044 	addi	r2,r2,1
81106fe4:	e0bff715 	stw	r2,-36(fp)
81106fe8:	e0bff717 	ldw	r2,-36(fp)
81106fec:	10800210 	cmplti	r2,r2,8
81106ff0:	103fe31e 	bne	r2,zero,81106f80 <__reset+0xfb0e6f80>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81106ff4:	e03ff715 	stw	zero,-36(fp)
81106ff8:	00001a06 	br	81107064 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106ffc:	e0bff517 	ldw	r2,-44(fp)
81107000:	1085883a 	add	r2,r2,r2
81107004:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107008:	00a00034 	movhi	r2,32768
8110700c:	10825404 	addi	r2,r2,2384
81107010:	10800037 	ldwio	r2,0(r2)
81107014:	1080004c 	andi	r2,r2,1
81107018:	1007883a 	mov	r3,r2
8110701c:	e0bff517 	ldw	r2,-44(fp)
81107020:	10c4b03a 	or	r2,r2,r3
81107024:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107028:	00c00044 	movi	r3,1
8110702c:	00a00034 	movhi	r2,32768
81107030:	10824c04 	addi	r2,r2,2352
81107034:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107038:	010003c4 	movi	r4,15
8110703c:	1127e440 	call	81127e44 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107040:	0007883a 	mov	r3,zero
81107044:	00a00034 	movhi	r2,32768
81107048:	10824c04 	addi	r2,r2,2352
8110704c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107050:	010003c4 	movi	r4,15
81107054:	1127e440 	call	81127e44 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800044 	addi	r2,r2,1
81107060:	e0bff715 	stw	r2,-36(fp)
81107064:	e0bff717 	ldw	r2,-36(fp)
81107068:	10800210 	cmplti	r2,r2,8
8110706c:	103fe31e 	bne	r2,zero,81106ffc <__reset+0xfb0e6ffc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107070:	e03ff715 	stw	zero,-36(fp)
81107074:	00001a06 	br	811070e0 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81107078:	e0bff517 	ldw	r2,-44(fp)
8110707c:	1085883a 	add	r2,r2,r2
81107080:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81107084:	00a00034 	movhi	r2,32768
81107088:	10825404 	addi	r2,r2,2384
8110708c:	10800037 	ldwio	r2,0(r2)
81107090:	1080004c 	andi	r2,r2,1
81107094:	1007883a 	mov	r3,r2
81107098:	e0bff517 	ldw	r2,-44(fp)
8110709c:	10c4b03a 	or	r2,r2,r3
811070a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811070a4:	00c00044 	movi	r3,1
811070a8:	00a00034 	movhi	r2,32768
811070ac:	10824c04 	addi	r2,r2,2352
811070b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070b4:	010003c4 	movi	r4,15
811070b8:	1127e440 	call	81127e44 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070bc:	0007883a 	mov	r3,zero
811070c0:	00a00034 	movhi	r2,32768
811070c4:	10824c04 	addi	r2,r2,2352
811070c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070cc:	010003c4 	movi	r4,15
811070d0:	1127e440 	call	81127e44 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800044 	addi	r2,r2,1
811070dc:	e0bff715 	stw	r2,-36(fp)
811070e0:	e0bff717 	ldw	r2,-36(fp)
811070e4:	10800190 	cmplti	r2,r2,6
811070e8:	103fe31e 	bne	r2,zero,81107078 <__reset+0xfb0e7078>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
811070ec:	00c00044 	movi	r3,1
811070f0:	00a00034 	movhi	r2,32768
811070f4:	10824c04 	addi	r2,r2,2352
811070f8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
811070fc:	010003c4 	movi	r4,15
81107100:	1127e440 	call	81127e44 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107104:	00c000c4 	movi	r3,3
81107108:	00a00034 	movhi	r2,32768
8110710c:	10824804 	addi	r2,r2,2336
81107110:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107114:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107118:	00800044 	movi	r2,1
8110711c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107120:	e03ff715 	stw	zero,-36(fp)
81107124:	00000d06 	br	8110715c <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107128:	e0fff517 	ldw	r3,-44(fp)
8110712c:	e0bff617 	ldw	r2,-40(fp)
81107130:	1884703a 	and	r2,r3,r2
81107134:	1000031e 	bne	r2,zero,81107144 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
81107138:	e0bff917 	ldw	r2,-28(fp)
8110713c:	10800044 	addi	r2,r2,1
81107140:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
81107144:	e0bff617 	ldw	r2,-40(fp)
81107148:	1085883a 	add	r2,r2,r2
8110714c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800044 	addi	r2,r2,1
81107158:	e0bff715 	stw	r2,-36(fp)
8110715c:	e0bff717 	ldw	r2,-36(fp)
81107160:	10800810 	cmplti	r2,r2,32
81107164:	103ff01e 	bne	r2,zero,81107128 <__reset+0xfb0e7128>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
81107168:	e0bff917 	ldw	r2,-28(fp)
8110716c:	1080004c 	andi	r2,r2,1
81107170:	1005003a 	cmpeq	r2,r2,zero
81107174:	10803fcc 	andi	r2,r2,255
81107178:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110717c:	e0bffb17 	ldw	r2,-20(fp)
81107180:	1000021e 	bne	r2,zero,8110718c <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
81107184:	0005883a 	mov	r2,zero
81107188:	00000406 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
8110718c:	e0800317 	ldw	r2,12(fp)
81107190:	e0fff517 	ldw	r3,-44(fp)
81107194:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107198:	e0bffb17 	ldw	r2,-20(fp)
}
8110719c:	e037883a 	mov	sp,fp
811071a0:	dfc00117 	ldw	ra,4(sp)
811071a4:	df000017 	ldw	fp,0(sp)
811071a8:	dec00204 	addi	sp,sp,8
811071ac:	f800283a 	ret

811071b0 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
811071b0:	defffc04 	addi	sp,sp,-16
811071b4:	de00012e 	bgeu	sp,et,811071bc <vRstcSimucamReset+0xc>
811071b8:	003b68fa 	trap	3
811071bc:	dfc00315 	stw	ra,12(sp)
811071c0:	df000215 	stw	fp,8(sp)
811071c4:	df000204 	addi	fp,sp,8
811071c8:	2005883a 	mov	r2,r4
811071cc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
811071d0:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
811071d4:	e0bfff0b 	ldhu	r2,-4(fp)
811071d8:	e0fffe17 	ldw	r3,-8(fp)
811071dc:	1884b03a 	or	r2,r3,r2
811071e0:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
811071e4:	e0bffe17 	ldw	r2,-8(fp)
811071e8:	10800074 	orhi	r2,r2,1
811071ec:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	000b883a 	mov	r5,zero
811071f8:	01200034 	movhi	r4,32768
811071fc:	21020004 	addi	r4,r4,2048
81107200:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107204:	0001883a 	nop
81107208:	e037883a 	mov	sp,fp
8110720c:	dfc00117 	ldw	ra,4(sp)
81107210:	df000017 	ldw	fp,0(sp)
81107214:	dec00204 	addi	sp,sp,8
81107218:	f800283a 	ret

8110721c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110721c:	defffc04 	addi	sp,sp,-16
81107220:	de00012e 	bgeu	sp,et,81107228 <vRstcReleaseDeviceReset+0xc>
81107224:	003b68fa 	trap	3
81107228:	dfc00315 	stw	ra,12(sp)
8110722c:	df000215 	stw	fp,8(sp)
81107230:	df000204 	addi	fp,sp,8
81107234:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
81107238:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110723c:	01400044 	movi	r5,1
81107240:	01200034 	movhi	r4,32768
81107244:	21020004 	addi	r4,r4,2048
81107248:	11073540 	call	81107354 <uliRstReadReg>
8110724c:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	0084303a 	nor	r2,zero,r2
81107258:	e0fffe17 	ldw	r3,-8(fp)
8110725c:	1884703a 	and	r2,r3,r2
81107260:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107264:	e1bffe17 	ldw	r6,-8(fp)
81107268:	01400044 	movi	r5,1
8110726c:	01200034 	movhi	r4,32768
81107270:	21020004 	addi	r4,r4,2048
81107274:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107278:	0001883a 	nop
8110727c:	e037883a 	mov	sp,fp
81107280:	dfc00117 	ldw	ra,4(sp)
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00204 	addi	sp,sp,8
8110728c:	f800283a 	ret

81107290 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107290:	defffc04 	addi	sp,sp,-16
81107294:	de00012e 	bgeu	sp,et,8110729c <vRstcHoldDeviceReset+0xc>
81107298:	003b68fa 	trap	3
8110729c:	dfc00315 	stw	ra,12(sp)
811072a0:	df000215 	stw	fp,8(sp)
811072a4:	df000204 	addi	fp,sp,8
811072a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072ac:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072b0:	01400044 	movi	r5,1
811072b4:	01200034 	movhi	r4,32768
811072b8:	21020004 	addi	r4,r4,2048
811072bc:	11073540 	call	81107354 <uliRstReadReg>
811072c0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
811072c4:	e0fffe17 	ldw	r3,-8(fp)
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	1884b03a 	or	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcWriteReg+0xc>
81107308:	003b68fa 	trap	3
8110730c:	df000315 	stw	fp,12(sp)
81107310:	df000304 	addi	fp,sp,12
81107314:	e13ffd15 	stw	r4,-12(fp)
81107318:	e17ffe15 	stw	r5,-8(fp)
8110731c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	1085883a 	add	r2,r2,r2
81107328:	1085883a 	add	r2,r2,r2
8110732c:	1007883a 	mov	r3,r2
81107330:	e0bffd17 	ldw	r2,-12(fp)
81107334:	10c5883a 	add	r2,r2,r3
81107338:	e0ffff17 	ldw	r3,-4(fp)
8110733c:	10c00015 	stw	r3,0(r2)
}
81107340:	0001883a 	nop
81107344:	e037883a 	mov	sp,fp
81107348:	df000017 	ldw	fp,0(sp)
8110734c:	dec00104 	addi	sp,sp,4
81107350:	f800283a 	ret

81107354 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81107354:	defffc04 	addi	sp,sp,-16
81107358:	de00012e 	bgeu	sp,et,81107360 <uliRstReadReg+0xc>
8110735c:	003b68fa 	trap	3
81107360:	df000315 	stw	fp,12(sp)
81107364:	df000304 	addi	fp,sp,12
81107368:	e13ffe15 	stw	r4,-8(fp)
8110736c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81107370:	e0bfff17 	ldw	r2,-4(fp)
81107374:	1085883a 	add	r2,r2,r2
81107378:	1085883a 	add	r2,r2,r2
8110737c:	1007883a 	mov	r3,r2
81107380:	e0bffe17 	ldw	r2,-8(fp)
81107384:	10c5883a 	add	r2,r2,r3
81107388:	10800017 	ldw	r2,0(r2)
8110738c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107390:	e0bffd17 	ldw	r2,-12(fp)
}
81107394:	e037883a 	mov	sp,fp
81107398:	df000017 	ldw	fp,0(sp)
8110739c:	dec00104 	addi	sp,sp,4
811073a0:	f800283a 	ret

811073a4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811073a4:	defffe04 	addi	sp,sp,-8
811073a8:	de00012e 	bgeu	sp,et,811073b0 <v_spi_start+0xc>
811073ac:	003b68fa 	trap	3
811073b0:	dfc00115 	stw	ra,4(sp)
811073b4:	df000015 	stw	fp,0(sp)
811073b8:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811073bc:	0007883a 	mov	r3,zero
811073c0:	00a00034 	movhi	r2,32768
811073c4:	10823004 	addi	r2,r2,2240
811073c8:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
811073cc:	0007883a 	mov	r3,zero
811073d0:	00a00034 	movhi	r2,32768
811073d4:	10822c04 	addi	r2,r2,2224
811073d8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811073dc:	01002584 	movi	r4,150
811073e0:	1127e440 	call	81127e44 <usleep>
}
811073e4:	0001883a 	nop
811073e8:	e037883a 	mov	sp,fp
811073ec:	dfc00117 	ldw	ra,4(sp)
811073f0:	df000017 	ldw	fp,0(sp)
811073f4:	dec00204 	addi	sp,sp,8
811073f8:	f800283a 	ret

811073fc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811073fc:	defffc04 	addi	sp,sp,-16
81107400:	de00012e 	bgeu	sp,et,81107408 <v_spi_send_byte+0xc>
81107404:	003b68fa 	trap	3
81107408:	dfc00315 	stw	ra,12(sp)
8110740c:	df000215 	stw	fp,8(sp)
81107410:	df000204 	addi	fp,sp,8
81107414:	2005883a 	mov	r2,r4
81107418:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110741c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107420:	00bfe004 	movi	r2,-128
81107424:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107428:	e03ffe05 	stb	zero,-8(fp)
8110742c:	00001b06 	br	8110749c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81107430:	e0ffff03 	ldbu	r3,-4(fp)
81107434:	e0bffe43 	ldbu	r2,-7(fp)
81107438:	1884703a 	and	r2,r3,r2
8110743c:	10803fcc 	andi	r2,r2,255
81107440:	1004c03a 	cmpne	r2,r2,zero
81107444:	10c03fcc 	andi	r3,r2,255
81107448:	00a00034 	movhi	r2,32768
8110744c:	10823404 	addi	r2,r2,2256
81107450:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81107454:	e0bffe43 	ldbu	r2,-7(fp)
81107458:	1004d07a 	srli	r2,r2,1
8110745c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81107460:	00c00044 	movi	r3,1
81107464:	00a00034 	movhi	r2,32768
81107468:	10823004 	addi	r2,r2,2240
8110746c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107470:	01002584 	movi	r4,150
81107474:	1127e440 	call	81127e44 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81107478:	0007883a 	mov	r3,zero
8110747c:	00a00034 	movhi	r2,32768
81107480:	10823004 	addi	r2,r2,2240
81107484:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107488:	01002584 	movi	r4,150
8110748c:	1127e440 	call	81127e44 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107490:	e0bffe03 	ldbu	r2,-8(fp)
81107494:	10800044 	addi	r2,r2,1
81107498:	e0bffe05 	stb	r2,-8(fp)
8110749c:	e0bffe03 	ldbu	r2,-8(fp)
811074a0:	10800230 	cmpltui	r2,r2,8
811074a4:	103fe21e 	bne	r2,zero,81107430 <__reset+0xfb0e7430>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
811074a8:	0001883a 	nop
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	de00012e 	bgeu	sp,et,811074cc <uc_spi_get_byte+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00215 	stw	ra,8(sp)
811074d0:	df000115 	stw	fp,4(sp)
811074d4:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811074d8:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811074dc:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811074e0:	e03fff05 	stb	zero,-4(fp)
811074e4:	00001a06 	br	81107550 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811074e8:	e0bfff43 	ldbu	r2,-3(fp)
811074ec:	1085883a 	add	r2,r2,r2
811074f0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811074f4:	00a00034 	movhi	r2,32768
811074f8:	10823804 	addi	r2,r2,2272
811074fc:	10800037 	ldwio	r2,0(r2)
81107500:	1080004c 	andi	r2,r2,1
81107504:	1007883a 	mov	r3,r2
81107508:	e0bfff43 	ldbu	r2,-3(fp)
8110750c:	1884b03a 	or	r2,r3,r2
81107510:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107514:	00c00044 	movi	r3,1
81107518:	00a00034 	movhi	r2,32768
8110751c:	10823004 	addi	r2,r2,2240
81107520:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107524:	01002584 	movi	r4,150
81107528:	1127e440 	call	81127e44 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110752c:	0007883a 	mov	r3,zero
81107530:	00a00034 	movhi	r2,32768
81107534:	10823004 	addi	r2,r2,2240
81107538:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110753c:	01002584 	movi	r4,150
81107540:	1127e440 	call	81127e44 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81107544:	e0bfff03 	ldbu	r2,-4(fp)
81107548:	10800044 	addi	r2,r2,1
8110754c:	e0bfff05 	stb	r2,-4(fp)
81107550:	e0bfff03 	ldbu	r2,-4(fp)
81107554:	10800230 	cmpltui	r2,r2,8
81107558:	103fe31e 	bne	r2,zero,811074e8 <__reset+0xfb0e74e8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110755c:	e0bfff43 	ldbu	r2,-3(fp)
}
81107560:	e037883a 	mov	sp,fp
81107564:	dfc00117 	ldw	ra,4(sp)
81107568:	df000017 	ldw	fp,0(sp)
8110756c:	dec00204 	addi	sp,sp,8
81107570:	f800283a 	ret

81107574 <v_spi_end>:

void v_spi_end(void){
81107574:	defffe04 	addi	sp,sp,-8
81107578:	de00012e 	bgeu	sp,et,81107580 <v_spi_end+0xc>
8110757c:	003b68fa 	trap	3
81107580:	dfc00115 	stw	ra,4(sp)
81107584:	df000015 	stw	fp,0(sp)
81107588:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110758c:	0007883a 	mov	r3,zero
81107590:	00a00034 	movhi	r2,32768
81107594:	10823004 	addi	r2,r2,2240
81107598:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110759c:	01002584 	movi	r4,150
811075a0:	1127e440 	call	81127e44 <usleep>
    SPI_CS_N(1);
811075a4:	00c00044 	movi	r3,1
811075a8:	00a00034 	movhi	r2,32768
811075ac:	10822c04 	addi	r2,r2,2224
811075b0:	10c00035 	stwio	r3,0(r2)
}
811075b4:	0001883a 	nop
811075b8:	e037883a 	mov	sp,fp
811075bc:	dfc00117 	ldw	ra,4(sp)
811075c0:	df000017 	ldw	fp,0(sp)
811075c4:	dec00204 	addi	sp,sp,8
811075c8:	f800283a 	ret

811075cc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811075cc:	defff604 	addi	sp,sp,-40
811075d0:	de00012e 	bgeu	sp,et,811075d8 <RTCC_SPI_R_MAC+0xc>
811075d4:	003b68fa 	trap	3
811075d8:	dfc00915 	stw	ra,36(sp)
811075dc:	df000815 	stw	fp,32(sp)
811075e0:	df000804 	addi	fp,sp,32
811075e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811075e8:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
811075ec:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
811075f0:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
811075f4:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
811075f8:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
811075fc:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107600:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107604:	00800084 	movi	r2,2
81107608:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110760c:	00800cc4 	movi	r2,51
81107610:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107614:	11073a40 	call	811073a4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107618:	e0bffec3 	ldbu	r2,-5(fp)
8110761c:	1009883a 	mov	r4,r2
81107620:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107624:	e0bffe83 	ldbu	r2,-6(fp)
81107628:	1009883a 	mov	r4,r2
8110762c:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81107630:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107634:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81107638:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110763c:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81107640:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107644:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81107648:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110764c:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81107650:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107654:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81107658:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110765c:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81107660:	11075740 	call	81107574 <v_spi_end>

    bSuccess = TRUE;
81107664:	00800044 	movi	r2,1
81107668:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110766c:	e0bfff17 	ldw	r2,-4(fp)
81107670:	e0fffd03 	ldbu	r3,-12(fp)
81107674:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81107678:	e0bfff17 	ldw	r2,-4(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0fffd43 	ldbu	r3,-11(fp)
81107684:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	10800084 	addi	r2,r2,2
81107690:	e0fffd83 	ldbu	r3,-10(fp)
81107694:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107698:	e0bfff17 	ldw	r2,-4(fp)
8110769c:	108000c4 	addi	r2,r2,3
811076a0:	e0fffdc3 	ldbu	r3,-9(fp)
811076a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811076a8:	e0bfff17 	ldw	r2,-4(fp)
811076ac:	10800104 	addi	r2,r2,4
811076b0:	e0fffe03 	ldbu	r3,-8(fp)
811076b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811076b8:	e0bfff17 	ldw	r2,-4(fp)
811076bc:	10800144 	addi	r2,r2,5
811076c0:	e0fffe43 	ldbu	r3,-7(fp)
811076c4:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811076c8:	e1bffd03 	ldbu	r6,-12(fp)
811076cc:	e1fffd43 	ldbu	r7,-11(fp)
811076d0:	e0bffd83 	ldbu	r2,-10(fp)
811076d4:	e0fffdc3 	ldbu	r3,-9(fp)
811076d8:	e13ffe03 	ldbu	r4,-8(fp)
811076dc:	e17ffe43 	ldbu	r5,-7(fp)
811076e0:	d9400315 	stw	r5,12(sp)
811076e4:	d9000215 	stw	r4,8(sp)
811076e8:	d8c00115 	stw	r3,4(sp)
811076ec:	d8800015 	stw	r2,0(sp)
811076f0:	01604534 	movhi	r5,33044
811076f4:	29723304 	addi	r5,r5,-14132
811076f8:	01204534 	movhi	r4,33044
811076fc:	2102da04 	addi	r4,r4,2920
81107700:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81107704:	d0a04d17 	ldw	r2,-32460(gp)
81107708:	01604534 	movhi	r5,33044
8110770c:	2942da04 	addi	r5,r5,2920
81107710:	1009883a 	mov	r4,r2
81107714:	111197c0 	call	8111197c <fprintf>
#endif

    return bSuccess;
81107718:	e0bffc17 	ldw	r2,-16(fp)
}
8110771c:	e037883a 	mov	sp,fp
81107720:	dfc00117 	ldw	ra,4(sp)
81107724:	df000017 	ldw	fp,0(sp)
81107728:	dec00204 	addi	sp,sp,8
8110772c:	f800283a 	ret

81107730 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81107730:	defffd04 	addi	sp,sp,-12
81107734:	de00012e 	bgeu	sp,et,8110773c <bSSDisplayConfig+0xc>
81107738:	003b68fa 	trap	3
8110773c:	df000215 	stw	fp,8(sp)
81107740:	df000204 	addi	fp,sp,8
81107744:	2005883a 	mov	r2,r4
81107748:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110774c:	e0bfff03 	ldbu	r2,-4(fp)
81107750:	10c00168 	cmpgeui	r3,r2,5
81107754:	18001c1e 	bne	r3,zero,811077c8 <bSSDisplayConfig+0x98>
81107758:	100690ba 	slli	r3,r2,2
8110775c:	00a04434 	movhi	r2,33040
81107760:	109ddc04 	addi	r2,r2,30576
81107764:	1885883a 	add	r2,r3,r2
81107768:	10800017 	ldw	r2,0(r2)
8110776c:	1000683a 	jmp	r2
81107770:	81107784 	addi	r4,r16,16862
81107774:	81107790 	cmplti	r4,r16,16862
81107778:	8110779c 	xori	r4,r16,16862
8110777c:	811077b0 	cmpltui	r4,r16,16862
81107780:	811077c0 	call	8811077c <__reset+0x20f077c>
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81107784:	00800cc4 	movi	r2,51
81107788:	d0a04545 	stb	r2,-32491(gp)
	    break;
8110778c:	00001006 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107790:	00801544 	movi	r2,85
81107794:	d0a04545 	stb	r2,-32491(gp)
	    break;
81107798:	00000d06 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110779c:	d0e04543 	ldbu	r3,-32491(gp)
811077a0:	00bff744 	movi	r2,-35
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077ac:	00000806 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
811077b0:	d0a04543 	ldbu	r2,-32491(gp)
811077b4:	10800894 	ori	r2,r2,34
811077b8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077bc:	00000406 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
811077c0:	d0204545 	stb	zero,-32491(gp)
	    break;
811077c4:	00000206 	br	811077d0 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
811077c8:	0005883a 	mov	r2,zero
811077cc:	00000806 	br	811077f0 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
811077d0:	00a00034 	movhi	r2,32768
811077d4:	10828404 	addi	r2,r2,2576
811077d8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811077dc:	d0a04543 	ldbu	r2,-32491(gp)
811077e0:	10c03fcc 	andi	r3,r2,255
811077e4:	e0bffe17 	ldw	r2,-8(fp)
811077e8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811077ec:	00800044 	movi	r2,1
}
811077f0:	e037883a 	mov	sp,fp
811077f4:	df000017 	ldw	fp,0(sp)
811077f8:	dec00104 	addi	sp,sp,4
811077fc:	f800283a 	ret

81107800 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107800:	defffd04 	addi	sp,sp,-12
81107804:	de00012e 	bgeu	sp,et,8110780c <bSSDisplayUpdate+0xc>
81107808:	003b68fa 	trap	3
8110780c:	df000215 	stw	fp,8(sp)
81107810:	df000204 	addi	fp,sp,8
81107814:	2005883a 	mov	r2,r4
81107818:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110781c:	00a00034 	movhi	r2,32768
81107820:	10828404 	addi	r2,r2,2576
81107824:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107828:	e0bffe17 	ldw	r2,-8(fp)
8110782c:	10800104 	addi	r2,r2,4
81107830:	e0ffff03 	ldbu	r3,-4(fp)
81107834:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81107838:	00800044 	movi	r2,1
}
8110783c:	e037883a 	mov	sp,fp
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00104 	addi	sp,sp,4
81107848:	f800283a 	ret

8110784c <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110784c:	defffd04 	addi	sp,sp,-12
81107850:	de00012e 	bgeu	sp,et,81107858 <vSyncHandleIrq+0xc>
81107854:	003b68fa 	trap	3
81107858:	df000215 	stw	fp,8(sp)
8110785c:	df000204 	addi	fp,sp,8
81107860:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81107864:	e0bfff17 	ldw	r2,-4(fp)
81107868:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
8110786c:	d0a04703 	ldbu	r2,-32484(gp)
81107870:	10800044 	addi	r2,r2,1
81107874:	d0a04705 	stb	r2,-32484(gp)
}
81107878:	0001883a 	nop
8110787c:	e037883a 	mov	sp,fp
81107880:	df000017 	ldw	fp,0(sp)
81107884:	dec00104 	addi	sp,sp,4
81107888:	f800283a 	ret

8110788c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110788c:	defffd04 	addi	sp,sp,-12
81107890:	de00012e 	bgeu	sp,et,81107898 <vSyncInitIrq+0xc>
81107894:	003b68fa 	trap	3
81107898:	dfc00215 	stw	ra,8(sp)
8110789c:	df000115 	stw	fp,4(sp)
811078a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
811078a4:	d0a04604 	addi	r2,gp,-32488
811078a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
811078ac:	01a04434 	movhi	r6,33040
811078b0:	319e1304 	addi	r6,r6,30796
811078b4:	e17fff17 	ldw	r5,-4(fp)
811078b8:	01000284 	movi	r4,10
811078bc:	11273180 	call	81127318 <alt_irq_register>
}
811078c0:	0001883a 	nop
811078c4:	e037883a 	mov	sp,fp
811078c8:	dfc00117 	ldw	ra,4(sp)
811078cc:	df000017 	ldw	fp,0(sp)
811078d0:	dec00204 	addi	sp,sp,8
811078d4:	f800283a 	ret

811078d8 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
811078d8:	defffc04 	addi	sp,sp,-16
811078dc:	de00012e 	bgeu	sp,et,811078e4 <bSyncStatusExtnIrq+0xc>
811078e0:	003b68fa 	trap	3
811078e4:	dfc00315 	stw	ra,12(sp)
811078e8:	df000215 	stw	fp,8(sp)
811078ec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811078f0:	0009883a 	mov	r4,zero
811078f4:	11086880 	call	81108688 <uliSyncReadReg>
811078f8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
811078fc:	e0bfff17 	ldw	r2,-4(fp)
81107900:	1000030e 	bge	r2,zero,81107910 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107904:	00800044 	movi	r2,1
81107908:	e0bffe15 	stw	r2,-8(fp)
8110790c:	00000106 	br	81107914 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107910:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107914:	e0bffe17 	ldw	r2,-8(fp)
}
81107918:	e037883a 	mov	sp,fp
8110791c:	dfc00117 	ldw	ra,4(sp)
81107920:	df000017 	ldw	fp,0(sp)
81107924:	dec00204 	addi	sp,sp,8
81107928:	f800283a 	ret

8110792c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110792c:	defffc04 	addi	sp,sp,-16
81107930:	de00012e 	bgeu	sp,et,81107938 <ucSyncStatusState+0xc>
81107934:	003b68fa 	trap	3
81107938:	dfc00315 	stw	ra,12(sp)
8110793c:	df000215 	stw	fp,8(sp)
81107940:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107944:	0009883a 	mov	r4,zero
81107948:	11086880 	call	81108688 <uliSyncReadReg>
8110794c:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81107950:	e0bffe17 	ldw	r2,-8(fp)
81107954:	10803fec 	andhi	r2,r2,255
81107958:	1004d43a 	srli	r2,r2,16
8110795c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107960:	e0bfff03 	ldbu	r2,-4(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81107978:	defffc04 	addi	sp,sp,-16
8110797c:	de00012e 	bgeu	sp,et,81107984 <ucSyncStatusErrorCode+0xc>
81107980:	003b68fa 	trap	3
81107984:	dfc00315 	stw	ra,12(sp)
81107988:	df000215 	stw	fp,8(sp)
8110798c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107990:	0009883a 	mov	r4,zero
81107994:	11086880 	call	81108688 <uliSyncReadReg>
81107998:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10bfc00c 	andi	r2,r2,65280
811079a4:	1004d23a 	srli	r2,r2,8
811079a8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079ac:	e0bfff03 	ldbu	r2,-4(fp)
}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	de00012e 	bgeu	sp,et,811079d0 <ucSyncStatusCycleNumber+0xc>
811079cc:	003b68fa 	trap	3
811079d0:	dfc00315 	stw	ra,12(sp)
811079d4:	df000215 	stw	fp,8(sp)
811079d8:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079dc:	0009883a 	mov	r4,zero
811079e0:	11086880 	call	81108688 <uliSyncReadReg>
811079e4:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
811079e8:	e0bffe17 	ldw	r2,-8(fp)
811079ec:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079f0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079f4:	e037883a 	mov	sp,fp
811079f8:	dfc00117 	ldw	ra,4(sp)
811079fc:	df000017 	ldw	fp,0(sp)
81107a00:	dec00204 	addi	sp,sp,8
81107a04:	f800283a 	ret

81107a08 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a08:	defffd04 	addi	sp,sp,-12
81107a0c:	de00012e 	bgeu	sp,et,81107a14 <bSyncSetMbt+0xc>
81107a10:	003b68fa 	trap	3
81107a14:	dfc00215 	stw	ra,8(sp)
81107a18:	df000115 	stw	fp,4(sp)
81107a1c:	df000104 	addi	fp,sp,4
81107a20:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a24:	e17fff17 	ldw	r5,-4(fp)
81107a28:	01000104 	movi	r4,4
81107a2c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a30:	00800044 	movi	r2,1
}
81107a34:	e037883a 	mov	sp,fp
81107a38:	dfc00117 	ldw	ra,4(sp)
81107a3c:	df000017 	ldw	fp,0(sp)
81107a40:	dec00204 	addi	sp,sp,8
81107a44:	f800283a 	ret

81107a48 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107a48:	defffd04 	addi	sp,sp,-12
81107a4c:	de00012e 	bgeu	sp,et,81107a54 <bSyncSetBt+0xc>
81107a50:	003b68fa 	trap	3
81107a54:	dfc00215 	stw	ra,8(sp)
81107a58:	df000115 	stw	fp,4(sp)
81107a5c:	df000104 	addi	fp,sp,4
81107a60:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107a64:	e17fff17 	ldw	r5,-4(fp)
81107a68:	01000144 	movi	r4,5
81107a6c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a70:	00800044 	movi	r2,1
}
81107a74:	e037883a 	mov	sp,fp
81107a78:	dfc00117 	ldw	ra,4(sp)
81107a7c:	df000017 	ldw	fp,0(sp)
81107a80:	dec00204 	addi	sp,sp,8
81107a84:	f800283a 	ret

81107a88 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107a88:	defffd04 	addi	sp,sp,-12
81107a8c:	de00012e 	bgeu	sp,et,81107a94 <bSyncSetPer+0xc>
81107a90:	003b68fa 	trap	3
81107a94:	dfc00215 	stw	ra,8(sp)
81107a98:	df000115 	stw	fp,4(sp)
81107a9c:	df000104 	addi	fp,sp,4
81107aa0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107aa4:	e17fff17 	ldw	r5,-4(fp)
81107aa8:	01000184 	movi	r4,6
81107aac:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ab0:	00800044 	movi	r2,1
}
81107ab4:	e037883a 	mov	sp,fp
81107ab8:	dfc00117 	ldw	ra,4(sp)
81107abc:	df000017 	ldw	fp,0(sp)
81107ac0:	dec00204 	addi	sp,sp,8
81107ac4:	f800283a 	ret

81107ac8 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107ac8:	defffd04 	addi	sp,sp,-12
81107acc:	de00012e 	bgeu	sp,et,81107ad4 <bSyncSetOst+0xc>
81107ad0:	003b68fa 	trap	3
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
81107ae0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107ae4:	e17fff17 	ldw	r5,-4(fp)
81107ae8:	010001c4 	movi	r4,7
81107aec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107af0:	00800044 	movi	r2,1
}
81107af4:	e037883a 	mov	sp,fp
81107af8:	dfc00117 	ldw	ra,4(sp)
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00204 	addi	sp,sp,8
81107b04:	f800283a 	ret

81107b08 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b08:	defffc04 	addi	sp,sp,-16
81107b0c:	de00012e 	bgeu	sp,et,81107b14 <bSyncSetPolarity+0xc>
81107b10:	003b68fa 	trap	3
81107b14:	dfc00315 	stw	ra,12(sp)
81107b18:	df000215 	stw	fp,8(sp)
81107b1c:	df000204 	addi	fp,sp,8
81107b20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b24:	01000204 	movi	r4,8
81107b28:	11086880 	call	81108688 <uliSyncReadReg>
81107b2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107b38:	e0fffe17 	ldw	r3,-8(fp)
81107b3c:	00bfbfc4 	movi	r2,-257
81107b40:	1884703a 	and	r2,r3,r2
81107b44:	e0bffe15 	stw	r2,-8(fp)
81107b48:	00000306 	br	81107b58 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107b4c:	e0bffe17 	ldw	r2,-8(fp)
81107b50:	10804014 	ori	r2,r2,256
81107b54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107b58:	e17ffe17 	ldw	r5,-8(fp)
81107b5c:	01000204 	movi	r4,8
81107b60:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107b64:	00800044 	movi	r2,1
}
81107b68:	e037883a 	mov	sp,fp
81107b6c:	dfc00117 	ldw	ra,4(sp)
81107b70:	df000017 	ldw	fp,0(sp)
81107b74:	dec00204 	addi	sp,sp,8
81107b78:	f800283a 	ret

81107b7c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107b7c:	defffc04 	addi	sp,sp,-16
81107b80:	de00012e 	bgeu	sp,et,81107b88 <bSyncSetNCycles+0xc>
81107b84:	003b68fa 	trap	3
81107b88:	dfc00315 	stw	ra,12(sp)
81107b8c:	df000215 	stw	fp,8(sp)
81107b90:	df000204 	addi	fp,sp,8
81107b94:	2005883a 	mov	r2,r4
81107b98:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b9c:	01000204 	movi	r4,8
81107ba0:	11086880 	call	81108688 <uliSyncReadReg>
81107ba4:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfc004 	movi	r2,-256
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107bb8:	e0bfff03 	ldbu	r2,-4(fp)
81107bbc:	e0fffe17 	ldw	r3,-8(fp)
81107bc0:	1884b03a 	or	r2,r3,r2
81107bc4:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107bec:	defffd04 	addi	sp,sp,-12
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <uliSyncGetMbt+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00215 	stw	ra,8(sp)
81107bfc:	df000115 	stw	fp,4(sp)
81107c00:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c04:	01000104 	movi	r4,4
81107c08:	11086880 	call	81108688 <uliSyncReadReg>
81107c0c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c10:	e0bfff17 	ldw	r2,-4(fp)
}
81107c14:	e037883a 	mov	sp,fp
81107c18:	dfc00117 	ldw	ra,4(sp)
81107c1c:	df000017 	ldw	fp,0(sp)
81107c20:	dec00204 	addi	sp,sp,8
81107c24:	f800283a 	ret

81107c28 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c28:	defffd04 	addi	sp,sp,-12
81107c2c:	de00012e 	bgeu	sp,et,81107c34 <uliSyncGetBt+0xc>
81107c30:	003b68fa 	trap	3
81107c34:	dfc00215 	stw	ra,8(sp)
81107c38:	df000115 	stw	fp,4(sp)
81107c3c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107c40:	01000144 	movi	r4,5
81107c44:	11086880 	call	81108688 <uliSyncReadReg>
81107c48:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c4c:	e0bfff17 	ldw	r2,-4(fp)
}
81107c50:	e037883a 	mov	sp,fp
81107c54:	dfc00117 	ldw	ra,4(sp)
81107c58:	df000017 	ldw	fp,0(sp)
81107c5c:	dec00204 	addi	sp,sp,8
81107c60:	f800283a 	ret

81107c64 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107c64:	defffd04 	addi	sp,sp,-12
81107c68:	de00012e 	bgeu	sp,et,81107c70 <uliSyncGetPer+0xc>
81107c6c:	003b68fa 	trap	3
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	df000115 	stw	fp,4(sp)
81107c78:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107c7c:	01000184 	movi	r4,6
81107c80:	11086880 	call	81108688 <uliSyncReadReg>
81107c84:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c88:	e0bfff17 	ldw	r2,-4(fp)
}
81107c8c:	e037883a 	mov	sp,fp
81107c90:	dfc00117 	ldw	ra,4(sp)
81107c94:	df000017 	ldw	fp,0(sp)
81107c98:	dec00204 	addi	sp,sp,8
81107c9c:	f800283a 	ret

81107ca0 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107ca0:	defffd04 	addi	sp,sp,-12
81107ca4:	de00012e 	bgeu	sp,et,81107cac <uliSyncGetOst+0xc>
81107ca8:	003b68fa 	trap	3
81107cac:	dfc00215 	stw	ra,8(sp)
81107cb0:	df000115 	stw	fp,4(sp)
81107cb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107cb8:	010001c4 	movi	r4,7
81107cbc:	11086880 	call	81108688 <uliSyncReadReg>
81107cc0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cc4:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc8:	e037883a 	mov	sp,fp
81107ccc:	dfc00117 	ldw	ra,4(sp)
81107cd0:	df000017 	ldw	fp,0(sp)
81107cd4:	dec00204 	addi	sp,sp,8
81107cd8:	f800283a 	ret

81107cdc <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107cdc:	defffd04 	addi	sp,sp,-12
81107ce0:	de00012e 	bgeu	sp,et,81107ce8 <uliSyncGetGeneral+0xc>
81107ce4:	003b68fa 	trap	3
81107ce8:	dfc00215 	stw	ra,8(sp)
81107cec:	df000115 	stw	fp,4(sp)
81107cf0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107cf4:	01000204 	movi	r4,8
81107cf8:	11086880 	call	81108688 <uliSyncReadReg>
81107cfc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d00:	e0bfff17 	ldw	r2,-4(fp)
}
81107d04:	e037883a 	mov	sp,fp
81107d08:	dfc00117 	ldw	ra,4(sp)
81107d0c:	df000017 	ldw	fp,0(sp)
81107d10:	dec00204 	addi	sp,sp,8
81107d14:	f800283a 	ret

81107d18 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d18:	defffd04 	addi	sp,sp,-12
81107d1c:	de00012e 	bgeu	sp,et,81107d24 <bSyncErrInj+0xc>
81107d20:	003b68fa 	trap	3
81107d24:	dfc00215 	stw	ra,8(sp)
81107d28:	df000115 	stw	fp,4(sp)
81107d2c:	df000104 	addi	fp,sp,4
81107d30:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107d34:	e17fff17 	ldw	r5,-4(fp)
81107d38:	01000244 	movi	r4,9
81107d3c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107d40:	00800044 	movi	r2,1
}
81107d44:	e037883a 	mov	sp,fp
81107d48:	dfc00117 	ldw	ra,4(sp)
81107d4c:	df000017 	ldw	fp,0(sp)
81107d50:	dec00204 	addi	sp,sp,8
81107d54:	f800283a 	ret

81107d58 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107d58:	defffc04 	addi	sp,sp,-16
81107d5c:	de00012e 	bgeu	sp,et,81107d64 <bSyncCtrExtnIrq+0xc>
81107d60:	003b68fa 	trap	3
81107d64:	dfc00315 	stw	ra,12(sp)
81107d68:	df000215 	stw	fp,8(sp)
81107d6c:	df000204 	addi	fp,sp,8
81107d70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107d74:	01000284 	movi	r4,10
81107d78:	11086880 	call	81108688 <uliSyncReadReg>
81107d7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107d80:	e0bfff17 	ldw	r2,-4(fp)
81107d84:	1000061e 	bne	r2,zero,81107da0 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107d88:	e0fffe17 	ldw	r3,-8(fp)
81107d8c:	00a00034 	movhi	r2,32768
81107d90:	10bfffc4 	addi	r2,r2,-1
81107d94:	1884703a 	and	r2,r3,r2
81107d98:	e0bffe15 	stw	r2,-8(fp)
81107d9c:	00000306 	br	81107dac <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10a00034 	orhi	r2,r2,32768
81107da8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107dac:	e17ffe17 	ldw	r5,-8(fp)
81107db0:	01000284 	movi	r4,10
81107db4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107db8:	00800044 	movi	r2,1
}
81107dbc:	e037883a 	mov	sp,fp
81107dc0:	dfc00117 	ldw	ra,4(sp)
81107dc4:	df000017 	ldw	fp,0(sp)
81107dc8:	dec00204 	addi	sp,sp,8
81107dcc:	f800283a 	ret

81107dd0 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	de00012e 	bgeu	sp,et,81107ddc <bSyncCtrStart+0xc>
81107dd8:	003b68fa 	trap	3
81107ddc:	dfc00215 	stw	ra,8(sp)
81107de0:	df000115 	stw	fp,4(sp)
81107de4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de8:	01000284 	movi	r4,10
81107dec:	11086880 	call	81108688 <uliSyncReadReg>
81107df0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800234 	orhi	r2,r2,8
81107dfc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e00:	e17fff17 	ldw	r5,-4(fp)
81107e04:	01000284 	movi	r4,10
81107e08:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e0c:	00800044 	movi	r2,1
}
81107e10:	e037883a 	mov	sp,fp
81107e14:	dfc00117 	ldw	ra,4(sp)
81107e18:	df000017 	ldw	fp,0(sp)
81107e1c:	dec00204 	addi	sp,sp,8
81107e20:	f800283a 	ret

81107e24 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e24:	defffd04 	addi	sp,sp,-12
81107e28:	de00012e 	bgeu	sp,et,81107e30 <bSyncCtrReset+0xc>
81107e2c:	003b68fa 	trap	3
81107e30:	dfc00215 	stw	ra,8(sp)
81107e34:	df000115 	stw	fp,4(sp)
81107e38:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e3c:	01000284 	movi	r4,10
81107e40:	11086880 	call	81108688 <uliSyncReadReg>
81107e44:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800134 	orhi	r2,r2,4
81107e50:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e54:	e17fff17 	ldw	r5,-4(fp)
81107e58:	01000284 	movi	r4,10
81107e5c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e60:	00800044 	movi	r2,1
}
81107e64:	e037883a 	mov	sp,fp
81107e68:	dfc00117 	ldw	ra,4(sp)
81107e6c:	df000017 	ldw	fp,0(sp)
81107e70:	dec00204 	addi	sp,sp,8
81107e74:	f800283a 	ret

81107e78 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107e78:	defffd04 	addi	sp,sp,-12
81107e7c:	de00012e 	bgeu	sp,et,81107e84 <bSyncCtrOneShot+0xc>
81107e80:	003b68fa 	trap	3
81107e84:	dfc00215 	stw	ra,8(sp)
81107e88:	df000115 	stw	fp,4(sp)
81107e8c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e90:	01000284 	movi	r4,10
81107e94:	11086880 	call	81108688 <uliSyncReadReg>
81107e98:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107e9c:	e0bfff17 	ldw	r2,-4(fp)
81107ea0:	108000b4 	orhi	r2,r2,2
81107ea4:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ea8:	e17fff17 	ldw	r5,-4(fp)
81107eac:	01000284 	movi	r4,10
81107eb0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107eb4:	00800044 	movi	r2,1
}
81107eb8:	e037883a 	mov	sp,fp
81107ebc:	dfc00117 	ldw	ra,4(sp)
81107ec0:	df000017 	ldw	fp,0(sp)
81107ec4:	dec00204 	addi	sp,sp,8
81107ec8:	f800283a 	ret

81107ecc <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107ecc:	defffd04 	addi	sp,sp,-12
81107ed0:	de00012e 	bgeu	sp,et,81107ed8 <bSyncCtrErrInj+0xc>
81107ed4:	003b68fa 	trap	3
81107ed8:	dfc00215 	stw	ra,8(sp)
81107edc:	df000115 	stw	fp,4(sp)
81107ee0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107ee4:	01000284 	movi	r4,10
81107ee8:	11086880 	call	81108688 <uliSyncReadReg>
81107eec:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800074 	orhi	r2,r2,1
81107ef8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107efc:	e17fff17 	ldw	r5,-4(fp)
81107f00:	01000284 	movi	r4,10
81107f04:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f08:	00800044 	movi	r2,1
}
81107f0c:	e037883a 	mov	sp,fp
81107f10:	dfc00117 	ldw	ra,4(sp)
81107f14:	df000017 	ldw	fp,0(sp)
81107f18:	dec00204 	addi	sp,sp,8
81107f1c:	f800283a 	ret

81107f20 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f20:	defffc04 	addi	sp,sp,-16
81107f24:	de00012e 	bgeu	sp,et,81107f2c <bSyncCtrSyncOutEnable+0xc>
81107f28:	003b68fa 	trap	3
81107f2c:	dfc00315 	stw	ra,12(sp)
81107f30:	df000215 	stw	fp,8(sp)
81107f34:	df000204 	addi	fp,sp,8
81107f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f3c:	01000284 	movi	r4,10
81107f40:	11086880 	call	81108688 <uliSyncReadReg>
81107f44:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107f48:	e0bfff17 	ldw	r2,-4(fp)
81107f4c:	1000051e 	bne	r2,zero,81107f64 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107f50:	e0fffe17 	ldw	r3,-8(fp)
81107f54:	00bfbfc4 	movi	r2,-257
81107f58:	1884703a 	and	r2,r3,r2
81107f5c:	e0bffe15 	stw	r2,-8(fp)
81107f60:	00000306 	br	81107f70 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107f64:	e0bffe17 	ldw	r2,-8(fp)
81107f68:	10804014 	ori	r2,r2,256
81107f6c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f70:	e17ffe17 	ldw	r5,-8(fp)
81107f74:	01000284 	movi	r4,10
81107f78:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f7c:	00800044 	movi	r2,1
}
81107f80:	e037883a 	mov	sp,fp
81107f84:	dfc00117 	ldw	ra,4(sp)
81107f88:	df000017 	ldw	fp,0(sp)
81107f8c:	dec00204 	addi	sp,sp,8
81107f90:	f800283a 	ret

81107f94 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81107f94:	defffc04 	addi	sp,sp,-16
81107f98:	de00012e 	bgeu	sp,et,81107fa0 <bSyncCtrCh1OutEnable+0xc>
81107f9c:	003b68fa 	trap	3
81107fa0:	dfc00315 	stw	ra,12(sp)
81107fa4:	df000215 	stw	fp,8(sp)
81107fa8:	df000204 	addi	fp,sp,8
81107fac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fb0:	01000284 	movi	r4,10
81107fb4:	11086880 	call	81108688 <uliSyncReadReg>
81107fb8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fbc:	e0bfff17 	ldw	r2,-4(fp)
81107fc0:	1000051e 	bne	r2,zero,81107fd8 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107fc4:	e0fffe17 	ldw	r3,-8(fp)
81107fc8:	00bfff84 	movi	r2,-2
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	e0bffe15 	stw	r2,-8(fp)
81107fd4:	00000306 	br	81107fe4 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107fd8:	e0bffe17 	ldw	r2,-8(fp)
81107fdc:	10800054 	ori	r2,r2,1
81107fe0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe4:	e17ffe17 	ldw	r5,-8(fp)
81107fe8:	01000284 	movi	r4,10
81107fec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ff0:	00800044 	movi	r2,1
}
81107ff4:	e037883a 	mov	sp,fp
81107ff8:	dfc00117 	ldw	ra,4(sp)
81107ffc:	df000017 	ldw	fp,0(sp)
81108000:	dec00204 	addi	sp,sp,8
81108004:	f800283a 	ret

81108008 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108008:	defffc04 	addi	sp,sp,-16
8110800c:	de00012e 	bgeu	sp,et,81108014 <bSyncCtrCh2OutEnable+0xc>
81108010:	003b68fa 	trap	3
81108014:	dfc00315 	stw	ra,12(sp)
81108018:	df000215 	stw	fp,8(sp)
8110801c:	df000204 	addi	fp,sp,8
81108020:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108024:	01000284 	movi	r4,10
81108028:	11086880 	call	81108688 <uliSyncReadReg>
8110802c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108030:	e0bfff17 	ldw	r2,-4(fp)
81108034:	1000051e 	bne	r2,zero,8110804c <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81108038:	e0fffe17 	ldw	r3,-8(fp)
8110803c:	00bfff44 	movi	r2,-3
81108040:	1884703a 	and	r2,r3,r2
81108044:	e0bffe15 	stw	r2,-8(fp)
81108048:	00000306 	br	81108058 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110804c:	e0bffe17 	ldw	r2,-8(fp)
81108050:	10800094 	ori	r2,r2,2
81108054:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108058:	e17ffe17 	ldw	r5,-8(fp)
8110805c:	01000284 	movi	r4,10
81108060:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108064:	00800044 	movi	r2,1
}
81108068:	e037883a 	mov	sp,fp
8110806c:	dfc00117 	ldw	ra,4(sp)
81108070:	df000017 	ldw	fp,0(sp)
81108074:	dec00204 	addi	sp,sp,8
81108078:	f800283a 	ret

8110807c <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110807c:	defffc04 	addi	sp,sp,-16
81108080:	de00012e 	bgeu	sp,et,81108088 <bSyncCtrCh3OutEnable+0xc>
81108084:	003b68fa 	trap	3
81108088:	dfc00315 	stw	ra,12(sp)
8110808c:	df000215 	stw	fp,8(sp)
81108090:	df000204 	addi	fp,sp,8
81108094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108098:	01000284 	movi	r4,10
8110809c:	11086880 	call	81108688 <uliSyncReadReg>
811080a0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a4:	e0bfff17 	ldw	r2,-4(fp)
811080a8:	1000051e 	bne	r2,zero,811080c0 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811080ac:	e0fffe17 	ldw	r3,-8(fp)
811080b0:	00bffec4 	movi	r2,-5
811080b4:	1884703a 	and	r2,r3,r2
811080b8:	e0bffe15 	stw	r2,-8(fp)
811080bc:	00000306 	br	811080cc <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
811080c0:	e0bffe17 	ldw	r2,-8(fp)
811080c4:	10800114 	ori	r2,r2,4
811080c8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080cc:	e17ffe17 	ldw	r5,-8(fp)
811080d0:	01000284 	movi	r4,10
811080d4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811080d8:	00800044 	movi	r2,1
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
811080f0:	defffc04 	addi	sp,sp,-16
811080f4:	de00012e 	bgeu	sp,et,811080fc <bSyncCtrCh4OutEnable+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00315 	stw	ra,12(sp)
81108100:	df000215 	stw	fp,8(sp)
81108104:	df000204 	addi	fp,sp,8
81108108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110810c:	01000284 	movi	r4,10
81108110:	11086880 	call	81108688 <uliSyncReadReg>
81108114:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108118:	e0bfff17 	ldw	r2,-4(fp)
8110811c:	1000051e 	bne	r2,zero,81108134 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108120:	e0fffe17 	ldw	r3,-8(fp)
81108124:	00bffdc4 	movi	r2,-9
81108128:	1884703a 	and	r2,r3,r2
8110812c:	e0bffe15 	stw	r2,-8(fp)
81108130:	00000306 	br	81108140 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
81108134:	e0bffe17 	ldw	r2,-8(fp)
81108138:	10800214 	ori	r2,r2,8
8110813c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108140:	e17ffe17 	ldw	r5,-8(fp)
81108144:	01000284 	movi	r4,10
81108148:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110814c:	00800044 	movi	r2,1
}
81108150:	e037883a 	mov	sp,fp
81108154:	dfc00117 	ldw	ra,4(sp)
81108158:	df000017 	ldw	fp,0(sp)
8110815c:	dec00204 	addi	sp,sp,8
81108160:	f800283a 	ret

81108164 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
81108164:	defffc04 	addi	sp,sp,-16
81108168:	de00012e 	bgeu	sp,et,81108170 <bSyncCtrCh5OutEnable+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00315 	stw	ra,12(sp)
81108174:	df000215 	stw	fp,8(sp)
81108178:	df000204 	addi	fp,sp,8
8110817c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108180:	01000284 	movi	r4,10
81108184:	11086880 	call	81108688 <uliSyncReadReg>
81108188:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110818c:	e0bfff17 	ldw	r2,-4(fp)
81108190:	1000051e 	bne	r2,zero,811081a8 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108194:	e0fffe17 	ldw	r3,-8(fp)
81108198:	00bffbc4 	movi	r2,-17
8110819c:	1884703a 	and	r2,r3,r2
811081a0:	e0bffe15 	stw	r2,-8(fp)
811081a4:	00000306 	br	811081b4 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811081a8:	e0bffe17 	ldw	r2,-8(fp)
811081ac:	10800414 	ori	r2,r2,16
811081b0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b4:	e17ffe17 	ldw	r5,-8(fp)
811081b8:	01000284 	movi	r4,10
811081bc:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811081c0:	00800044 	movi	r2,1
}
811081c4:	e037883a 	mov	sp,fp
811081c8:	dfc00117 	ldw	ra,4(sp)
811081cc:	df000017 	ldw	fp,0(sp)
811081d0:	dec00204 	addi	sp,sp,8
811081d4:	f800283a 	ret

811081d8 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
811081d8:	defffc04 	addi	sp,sp,-16
811081dc:	de00012e 	bgeu	sp,et,811081e4 <bSyncCtrCh6OutEnable+0xc>
811081e0:	003b68fa 	trap	3
811081e4:	dfc00315 	stw	ra,12(sp)
811081e8:	df000215 	stw	fp,8(sp)
811081ec:	df000204 	addi	fp,sp,8
811081f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f4:	01000284 	movi	r4,10
811081f8:	11086880 	call	81108688 <uliSyncReadReg>
811081fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108200:	e0bfff17 	ldw	r2,-4(fp)
81108204:	1000051e 	bne	r2,zero,8110821c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108208:	e0fffe17 	ldw	r3,-8(fp)
8110820c:	00bff7c4 	movi	r2,-33
81108210:	1884703a 	and	r2,r3,r2
81108214:	e0bffe15 	stw	r2,-8(fp)
81108218:	00000306 	br	81108228 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110821c:	e0bffe17 	ldw	r2,-8(fp)
81108220:	10800814 	ori	r2,r2,32
81108224:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108228:	e17ffe17 	ldw	r5,-8(fp)
8110822c:	01000284 	movi	r4,10
81108230:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108234:	00800044 	movi	r2,1
}
81108238:	e037883a 	mov	sp,fp
8110823c:	dfc00117 	ldw	ra,4(sp)
81108240:	df000017 	ldw	fp,0(sp)
81108244:	dec00204 	addi	sp,sp,8
81108248:	f800283a 	ret

8110824c <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110824c:	defffc04 	addi	sp,sp,-16
81108250:	de00012e 	bgeu	sp,et,81108258 <bSyncCtrCh7OutEnable+0xc>
81108254:	003b68fa 	trap	3
81108258:	dfc00315 	stw	ra,12(sp)
8110825c:	df000215 	stw	fp,8(sp)
81108260:	df000204 	addi	fp,sp,8
81108264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108268:	01000284 	movi	r4,10
8110826c:	11086880 	call	81108688 <uliSyncReadReg>
81108270:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108274:	e0bfff17 	ldw	r2,-4(fp)
81108278:	1000051e 	bne	r2,zero,81108290 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110827c:	e0fffe17 	ldw	r3,-8(fp)
81108280:	00bfefc4 	movi	r2,-65
81108284:	1884703a 	and	r2,r3,r2
81108288:	e0bffe15 	stw	r2,-8(fp)
8110828c:	00000306 	br	8110829c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108290:	e0bffe17 	ldw	r2,-8(fp)
81108294:	10801014 	ori	r2,r2,64
81108298:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110829c:	e17ffe17 	ldw	r5,-8(fp)
811082a0:	01000284 	movi	r4,10
811082a4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811082a8:	00800044 	movi	r2,1
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	dfc00117 	ldw	ra,4(sp)
811082b4:	df000017 	ldw	fp,0(sp)
811082b8:	dec00204 	addi	sp,sp,8
811082bc:	f800283a 	ret

811082c0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811082c0:	defffc04 	addi	sp,sp,-16
811082c4:	de00012e 	bgeu	sp,et,811082cc <bSyncCtrCh8OutEnable+0xc>
811082c8:	003b68fa 	trap	3
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082dc:	01000284 	movi	r4,10
811082e0:	11086880 	call	81108688 <uliSyncReadReg>
811082e4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e8:	e0bfff17 	ldw	r2,-4(fp)
811082ec:	1000051e 	bne	r2,zero,81108304 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
811082f0:	e0fffe17 	ldw	r3,-8(fp)
811082f4:	00bfdfc4 	movi	r2,-129
811082f8:	1884703a 	and	r2,r3,r2
811082fc:	e0bffe15 	stw	r2,-8(fp)
81108300:	00000306 	br	81108310 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10802014 	ori	r2,r2,128
8110830c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108310:	e17ffe17 	ldw	r5,-8(fp)
81108314:	01000284 	movi	r4,10
81108318:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110831c:	00800044 	movi	r2,1
}
81108320:	e037883a 	mov	sp,fp
81108324:	dfc00117 	ldw	ra,4(sp)
81108328:	df000017 	ldw	fp,0(sp)
8110832c:	dec00204 	addi	sp,sp,8
81108330:	f800283a 	ret

81108334 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
81108334:	defffc04 	addi	sp,sp,-16
81108338:	de00012e 	bgeu	sp,et,81108340 <bSyncIrqEnableError+0xc>
8110833c:	003b68fa 	trap	3
81108340:	dfc00315 	stw	ra,12(sp)
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108350:	01000044 	movi	r4,1
81108354:	11086880 	call	81108688 <uliSyncReadReg>
81108358:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	1000051e 	bne	r2,zero,81108378 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81108364:	e0fffe17 	ldw	r3,-8(fp)
81108368:	00bfff44 	movi	r2,-3
8110836c:	1884703a 	and	r2,r3,r2
81108370:	e0bffe15 	stw	r2,-8(fp)
81108374:	00000306 	br	81108384 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81108378:	e0bffe17 	ldw	r2,-8(fp)
8110837c:	10800094 	ori	r2,r2,2
81108380:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108384:	e17ffe17 	ldw	r5,-8(fp)
81108388:	01000044 	movi	r4,1
8110838c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108390:	00800044 	movi	r2,1
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811083a8:	defffc04 	addi	sp,sp,-16
811083ac:	de00012e 	bgeu	sp,et,811083b4 <bSyncIrqEnableBlank+0xc>
811083b0:	003b68fa 	trap	3
811083b4:	dfc00315 	stw	ra,12(sp)
811083b8:	df000215 	stw	fp,8(sp)
811083bc:	df000204 	addi	fp,sp,8
811083c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c4:	01000044 	movi	r4,1
811083c8:	11086880 	call	81108688 <uliSyncReadReg>
811083cc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083d0:	e0bfff17 	ldw	r2,-4(fp)
811083d4:	1000051e 	bne	r2,zero,811083ec <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811083d8:	e0fffe17 	ldw	r3,-8(fp)
811083dc:	00bfff84 	movi	r2,-2
811083e0:	1884703a 	and	r2,r3,r2
811083e4:	e0bffe15 	stw	r2,-8(fp)
811083e8:	00000306 	br	811083f8 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811083ec:	e0bffe17 	ldw	r2,-8(fp)
811083f0:	10800054 	ori	r2,r2,1
811083f4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f8:	e17ffe17 	ldw	r5,-8(fp)
811083fc:	01000044 	movi	r4,1
81108400:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108404:	00800044 	movi	r2,1
}
81108408:	e037883a 	mov	sp,fp
8110840c:	dfc00117 	ldw	ra,4(sp)
81108410:	df000017 	ldw	fp,0(sp)
81108414:	dec00204 	addi	sp,sp,8
81108418:	f800283a 	ret

8110841c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110841c:	defffc04 	addi	sp,sp,-16
81108420:	de00012e 	bgeu	sp,et,81108428 <bSyncIrqFlagClrError+0xc>
81108424:	003b68fa 	trap	3
81108428:	dfc00315 	stw	ra,12(sp)
8110842c:	df000215 	stw	fp,8(sp)
81108430:	df000204 	addi	fp,sp,8
81108434:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81108438:	01000084 	movi	r4,2
8110843c:	11086880 	call	81108688 <uliSyncReadReg>
81108440:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110844c:	e0fffe17 	ldw	r3,-8(fp)
81108450:	00bfff44 	movi	r2,-3
81108454:	1884703a 	and	r2,r3,r2
81108458:	e0bffe15 	stw	r2,-8(fp)
8110845c:	00000306 	br	8110846c <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81108460:	e0bffe17 	ldw	r2,-8(fp)
81108464:	10800094 	ori	r2,r2,2
81108468:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110846c:	e17ffe17 	ldw	r5,-8(fp)
81108470:	01000084 	movi	r4,2
81108474:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108478:	00800044 	movi	r2,1
}
8110847c:	e037883a 	mov	sp,fp
81108480:	dfc00117 	ldw	ra,4(sp)
81108484:	df000017 	ldw	fp,0(sp)
81108488:	dec00204 	addi	sp,sp,8
8110848c:	f800283a 	ret

81108490 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108490:	defffc04 	addi	sp,sp,-16
81108494:	de00012e 	bgeu	sp,et,8110849c <bSyncIrqFlagClrBlank+0xc>
81108498:	003b68fa 	trap	3
8110849c:	dfc00315 	stw	ra,12(sp)
811084a0:	df000215 	stw	fp,8(sp)
811084a4:	df000204 	addi	fp,sp,8
811084a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084ac:	01000084 	movi	r4,2
811084b0:	11086880 	call	81108688 <uliSyncReadReg>
811084b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b8:	e0bfff17 	ldw	r2,-4(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084c0:	e0fffe17 	ldw	r3,-8(fp)
811084c4:	00bfff84 	movi	r2,-2
811084c8:	1884703a 	and	r2,r3,r2
811084cc:	e0bffe15 	stw	r2,-8(fp)
811084d0:	00000306 	br	811084e0 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	10800054 	ori	r2,r2,1
811084dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	01000084 	movi	r4,2
811084e8:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811084ec:	00800044 	movi	r2,1
}
811084f0:	e037883a 	mov	sp,fp
811084f4:	dfc00117 	ldw	ra,4(sp)
811084f8:	df000017 	ldw	fp,0(sp)
811084fc:	dec00204 	addi	sp,sp,8
81108500:	f800283a 	ret

81108504 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108504:	defffc04 	addi	sp,sp,-16
81108508:	de00012e 	bgeu	sp,et,81108510 <bSyncIrqFlagError+0xc>
8110850c:	003b68fa 	trap	3
81108510:	dfc00315 	stw	ra,12(sp)
81108514:	df000215 	stw	fp,8(sp)
81108518:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110851c:	010000c4 	movi	r4,3
81108520:	11086880 	call	81108688 <uliSyncReadReg>
81108524:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1080008c 	andi	r2,r2,2
81108530:	10000326 	beq	r2,zero,81108540 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
81108534:	00800044 	movi	r2,1
81108538:	e0bffe15 	stw	r2,-8(fp)
8110853c:	00000106 	br	81108544 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
81108540:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81108544:	e0bffe17 	ldw	r2,-8(fp)
}
81108548:	e037883a 	mov	sp,fp
8110854c:	dfc00117 	ldw	ra,4(sp)
81108550:	df000017 	ldw	fp,0(sp)
81108554:	dec00204 	addi	sp,sp,8
81108558:	f800283a 	ret

8110855c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110855c:	defffc04 	addi	sp,sp,-16
81108560:	de00012e 	bgeu	sp,et,81108568 <bSyncIrqFlagBlank+0xc>
81108564:	003b68fa 	trap	3
81108568:	dfc00315 	stw	ra,12(sp)
8110856c:	df000215 	stw	fp,8(sp)
81108570:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81108574:	010000c4 	movi	r4,3
81108578:	11086880 	call	81108688 <uliSyncReadReg>
8110857c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	1080004c 	andi	r2,r2,1
81108588:	10000326 	beq	r2,zero,81108598 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
8110858c:	00800044 	movi	r2,1
81108590:	e0bffe15 	stw	r2,-8(fp)
81108594:	00000106 	br	8110859c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108598:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110859c:	e0bffe17 	ldw	r2,-8(fp)
}
811085a0:	e037883a 	mov	sp,fp
811085a4:	dfc00117 	ldw	ra,4(sp)
811085a8:	df000017 	ldw	fp,0(sp)
811085ac:	dec00204 	addi	sp,sp,8
811085b0:	f800283a 	ret

811085b4 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
811085b4:	defffd04 	addi	sp,sp,-12
811085b8:	de00012e 	bgeu	sp,et,811085c0 <uliSyncGetCtr+0xc>
811085bc:	003b68fa 	trap	3
811085c0:	dfc00215 	stw	ra,8(sp)
811085c4:	df000115 	stw	fp,4(sp)
811085c8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811085cc:	01000284 	movi	r4,10
811085d0:	11086880 	call	81108688 <uliSyncReadReg>
811085d4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811085d8:	e0bfff17 	ldw	r2,-4(fp)
}
811085dc:	e037883a 	mov	sp,fp
811085e0:	dfc00117 	ldw	ra,4(sp)
811085e4:	df000017 	ldw	fp,0(sp)
811085e8:	dec00204 	addi	sp,sp,8
811085ec:	f800283a 	ret

811085f0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
811085f0:	defffd04 	addi	sp,sp,-12
811085f4:	de00012e 	bgeu	sp,et,811085fc <uliSyncReadStatus+0xc>
811085f8:	003b68fa 	trap	3
811085fc:	dfc00215 	stw	ra,8(sp)
81108600:	df000115 	stw	fp,4(sp)
81108604:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108608:	0009883a 	mov	r4,zero
8110860c:	11086880 	call	81108688 <uliSyncReadReg>
81108610:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108614:	e0bfff17 	ldw	r2,-4(fp)
}
81108618:	e037883a 	mov	sp,fp
8110861c:	dfc00117 	ldw	ra,4(sp)
81108620:	df000017 	ldw	fp,0(sp)
81108624:	dec00204 	addi	sp,sp,8
81108628:	f800283a 	ret

8110862c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110862c:	defffc04 	addi	sp,sp,-16
81108630:	de00012e 	bgeu	sp,et,81108638 <bSyncWriteReg+0xc>
81108634:	003b68fa 	trap	3
81108638:	df000315 	stw	fp,12(sp)
8110863c:	df000304 	addi	fp,sp,12
81108640:	e13ffe15 	stw	r4,-8(fp)
81108644:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108648:	00a00034 	movhi	r2,32768
8110864c:	10810004 	addi	r2,r2,1024
81108650:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81108654:	e0bffe17 	ldw	r2,-8(fp)
81108658:	1085883a 	add	r2,r2,r2
8110865c:	1085883a 	add	r2,r2,r2
81108660:	1007883a 	mov	r3,r2
81108664:	e0bffd17 	ldw	r2,-12(fp)
81108668:	10c5883a 	add	r2,r2,r3
8110866c:	e0ffff17 	ldw	r3,-4(fp)
81108670:	10c00015 	stw	r3,0(r2)
	return TRUE;
81108674:	00800044 	movi	r2,1
}
81108678:	e037883a 	mov	sp,fp
8110867c:	df000017 	ldw	fp,0(sp)
81108680:	dec00104 	addi	sp,sp,4
81108684:	f800283a 	ret

81108688 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81108688:	defffc04 	addi	sp,sp,-16
8110868c:	de00012e 	bgeu	sp,et,81108694 <uliSyncReadReg+0xc>
81108690:	003b68fa 	trap	3
81108694:	df000315 	stw	fp,12(sp)
81108698:	df000304 	addi	fp,sp,12
8110869c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086a0:	00a00034 	movhi	r2,32768
811086a4:	10810004 	addi	r2,r2,1024
811086a8:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
811086ac:	e0bfff17 	ldw	r2,-4(fp)
811086b0:	1085883a 	add	r2,r2,r2
811086b4:	1085883a 	add	r2,r2,r2
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	10c5883a 	add	r2,r2,r3
811086c4:	10800017 	ldw	r2,0(r2)
811086c8:	e0bffe15 	stw	r2,-8(fp)
	return value;
811086cc:	e0bffe17 	ldw	r2,-8(fp)
}
811086d0:	e037883a 	mov	sp,fp
811086d4:	df000017 	ldw	fp,0(sp)
811086d8:	dec00104 	addi	sp,sp,4
811086dc:	f800283a 	ret

811086e0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811086e0:	defffd04 	addi	sp,sp,-12
811086e4:	de00012e 	bgeu	sp,et,811086ec <vFeeTask+0xc>
811086e8:	003b68fa 	trap	3
811086ec:	df000215 	stw	fp,8(sp)
811086f0:	df000204 	addi	fp,sp,8
811086f4:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
811086f8:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
811086fc:	0001883a 	nop
81108700:	e037883a 	mov	sp,fp
81108704:	df000017 	ldw	fp,0(sp)
81108708:	dec00104 	addi	sp,sp,4
8110870c:	f800283a 	ret

81108710 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81108710:	defff504 	addi	sp,sp,-44
81108714:	de00012e 	bgeu	sp,et,8110871c <vInAckHandlerTask+0xc>
81108718:	003b68fa 	trap	3
8110871c:	dfc00a15 	stw	ra,40(sp)
81108720:	df000915 	stw	fp,36(sp)
81108724:	df000904 	addi	fp,sp,36
81108728:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110872c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81108730:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81108734:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81108738:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110873c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81108740:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81108744:	d0a04d17 	ldw	r2,-32460(gp)
81108748:	100f883a 	mov	r7,r2
8110874c:	01800784 	movi	r6,30
81108750:	01400044 	movi	r5,1
81108754:	01204534 	movhi	r4,33044
81108758:	21324204 	addi	r4,r4,-14072
8110875c:	1111f680 	call	81111f68 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81108760:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	10c00060 	cmpeqi	r3,r2,1
8110876c:	1800071e 	bne	r3,zero,8110878c <vInAckHandlerTask+0x7c>
81108770:	0080032e 	bgeu	zero,r2,81108780 <vInAckHandlerTask+0x70>
81108774:	108000a0 	cmpeqi	r2,r2,2
81108778:	10005a1e 	bne	r2,zero,811088e4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110877c:	00013a06 	br	81108c68 <vInAckHandlerTask+0x558>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81108780:	00800044 	movi	r2,1
81108784:	e0bffd15 	stw	r2,-12(fp)
				break;
81108788:	00013706 	br	81108c68 <vInAckHandlerTask+0x558>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110878c:	d0a05117 	ldw	r2,-32444(gp)
81108790:	e0fffec4 	addi	r3,fp,-5
81108794:	180d883a 	mov	r6,r3
81108798:	000b883a 	mov	r5,zero
8110879c:	1009883a 	mov	r4,r2
811087a0:	112ecc00 	call	8112ecc0 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811087a4:	e0bffec3 	ldbu	r2,-5(fp)
811087a8:	10803fcc 	andi	r2,r2,255
811087ac:	10004b1e 	bne	r2,zero,811088dc <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811087b0:	d0a05017 	ldw	r2,-32448(gp)
811087b4:	e0fffec4 	addi	r3,fp,-5
811087b8:	180d883a 	mov	r6,r3
811087bc:	000b883a 	mov	r5,zero
811087c0:	1009883a 	mov	r4,r2
811087c4:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811087c8:	e0bffec3 	ldbu	r2,-5(fp)
811087cc:	10803fcc 	andi	r2,r2,255
811087d0:	1000401e 	bne	r2,zero,811088d4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811087d4:	e03ffe45 	stb	zero,-7(fp)
811087d8:	00003706 	br	811088b8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811087dc:	e0fffe43 	ldbu	r3,-7(fp)
811087e0:	00a04574 	movhi	r2,33045
811087e4:	10b60604 	addi	r2,r2,-10216
811087e8:	18c7883a 	add	r3,r3,r3
811087ec:	18c7883a 	add	r3,r3,r3
811087f0:	10c5883a 	add	r2,r2,r3
811087f4:	10800003 	ldbu	r2,0(r2)
811087f8:	10803fcc 	andi	r2,r2,255
811087fc:	1080201c 	xori	r2,r2,128
81108800:	10bfe004 	addi	r2,r2,-128
81108804:	10002926 	beq	r2,zero,811088ac <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81108808:	e0fffe43 	ldbu	r3,-7(fp)
8110880c:	00a04574 	movhi	r2,33045
81108810:	10b60604 	addi	r2,r2,-10216
81108814:	18c7883a 	add	r3,r3,r3
81108818:	18c7883a 	add	r3,r3,r3
8110881c:	10c5883a 	add	r2,r2,r3
81108820:	10800003 	ldbu	r2,0(r2)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1080201c 	xori	r2,r2,128
8110882c:	10bfe004 	addi	r2,r2,-128
81108830:	108008e0 	cmpeqi	r2,r2,35
81108834:	10000d1e 	bne	r2,zero,8110886c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81108838:	e0fffe43 	ldbu	r3,-7(fp)
8110883c:	00a04574 	movhi	r2,33045
81108840:	10b60604 	addi	r2,r2,-10216
81108844:	18c7883a 	add	r3,r3,r3
81108848:	18c7883a 	add	r3,r3,r3
8110884c:	10c5883a 	add	r2,r2,r3
81108850:	10c0000b 	ldhu	r3,0(r2)
81108854:	d0e0478d 	sth	r3,-32482(gp)
81108858:	1080008b 	ldhu	r2,2(r2)
8110885c:	d0a0480d 	sth	r2,-32480(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81108860:	00800084 	movi	r2,2
81108864:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81108868:	00001606 	br	811088c4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110886c:	d0a04d17 	ldw	r2,-32460(gp)
81108870:	100f883a 	mov	r7,r2
81108874:	01800384 	movi	r6,14
81108878:	01400044 	movi	r5,1
8110887c:	01204534 	movhi	r4,33044
81108880:	21324a04 	addi	r4,r4,-14040
81108884:	1111f680 	call	81111f68 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81108888:	00800044 	movi	r2,1
8110888c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81108890:	e0fffe43 	ldbu	r3,-7(fp)
81108894:	00a04574 	movhi	r2,33045
81108898:	10b60604 	addi	r2,r2,-10216
8110889c:	18c7883a 	add	r3,r3,r3
811088a0:	18c7883a 	add	r3,r3,r3
811088a4:	10c5883a 	add	r2,r2,r3
811088a8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088ac:	e0bffe43 	ldbu	r2,-7(fp)
811088b0:	10800044 	addi	r2,r2,1
811088b4:	e0bffe45 	stb	r2,-7(fp)
811088b8:	e0bffe43 	ldbu	r2,-7(fp)
811088bc:	10800130 	cmpltui	r2,r2,4
811088c0:	103fc61e 	bne	r2,zero,811087dc <__reset+0xfb0e87dc>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811088c4:	d0a05017 	ldw	r2,-32448(gp)
811088c8:	1009883a 	mov	r4,r2
811088cc:	112d2580 	call	8112d258 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d0:	0000e506 	br	81108c68 <vInAckHandlerTask+0x558>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811088d4:	110e2a80 	call	8110e2a8 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d8:	0000e306 	br	81108c68 <vInAckHandlerTask+0x558>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811088dc:	110e2400 	call	8110e240 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811088e0:	0000e106 	br	81108c68 <vInAckHandlerTask+0x558>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811088e4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811088e8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811088ec:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811088f0:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
811088f4:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811088f8:	0000ca06 	br	81108c24 <vInAckHandlerTask+0x514>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811088fc:	e0bff917 	ldw	r2,-28(fp)
81108900:	1000371e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
81108904:	e0bffa17 	ldw	r2,-24(fp)
81108908:	1000351e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110890c:	d0a05517 	ldw	r2,-32428(gp)
81108910:	e0fffec4 	addi	r3,fp,-5
81108914:	180b883a 	mov	r5,r3
81108918:	1009883a 	mov	r4,r2
8110891c:	112c6340 	call	8112c634 <OSMutexAccept>
81108920:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108924:	e0bffec3 	ldbu	r2,-5(fp)
81108928:	10803fcc 	andi	r2,r2,255
8110892c:	10002c1e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
81108930:	e03ffe45 	stb	zero,-7(fp)
81108934:	00002006 	br	811089b8 <vInAckHandlerTask+0x2a8>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81108938:	e0fffe43 	ldbu	r3,-7(fp)
8110893c:	00a04534 	movhi	r2,33044
81108940:	109d7704 	addi	r2,r2,30172
81108944:	18c009a4 	muli	r3,r3,38
81108948:	10c5883a 	add	r2,r2,r3
8110894c:	10800804 	addi	r2,r2,32
81108950:	10c0000b 	ldhu	r3,0(r2)
81108954:	d0a0480b 	ldhu	r2,-32480(gp)
81108958:	18ffffcc 	andi	r3,r3,65535
8110895c:	10bfffcc 	andi	r2,r2,65535
81108960:	1880121e 	bne	r3,r2,811089ac <vInAckHandlerTask+0x29c>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81108964:	e0fffe43 	ldbu	r3,-7(fp)
81108968:	00a04534 	movhi	r2,33044
8110896c:	109d7704 	addi	r2,r2,30172
81108970:	18c009a4 	muli	r3,r3,38
81108974:	10c5883a 	add	r2,r2,r3
81108978:	10800804 	addi	r2,r2,32
8110897c:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108980:	00800044 	movi	r2,1
81108984:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108988:	d0a05817 	ldw	r2,-32416(gp)
8110898c:	1009883a 	mov	r4,r2
81108990:	112f0480 	call	8112f048 <OSSemPost>
81108994:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108998:	e0bffec3 	ldbu	r2,-5(fp)
8110899c:	10803fcc 	andi	r2,r2,255
811089a0:	10000926 	beq	r2,zero,811089c8 <vInAckHandlerTask+0x2b8>
                                        vFailSetCountSemaphorexBuffer32();
811089a4:	110e4f40 	call	8110e4f4 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811089a8:	00000706 	br	811089c8 <vInAckHandlerTask+0x2b8>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811089ac:	e0bffe43 	ldbu	r2,-7(fp)
811089b0:	10800044 	addi	r2,r2,1
811089b4:	e0bffe45 	stb	r2,-7(fp)
811089b8:	e0bffe43 	ldbu	r2,-7(fp)
811089bc:	10800230 	cmpltui	r2,r2,8
811089c0:	103fdd1e 	bne	r2,zero,81108938 <__reset+0xfb0e8938>
811089c4:	00000106 	br	811089cc <vInAckHandlerTask+0x2bc>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811089c8:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
811089cc:	d0a05517 	ldw	r2,-32428(gp)
811089d0:	1009883a 	mov	r4,r2
811089d4:	112d2580 	call	8112d258 <OSMutexPost>
                            bFinished32 = TRUE;
811089d8:	00800044 	movi	r2,1
811089dc:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811089e0:	e0bff917 	ldw	r2,-28(fp)
811089e4:	1000371e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
811089e8:	e0bffb17 	ldw	r2,-20(fp)
811089ec:	1000351e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811089f0:	d0a05917 	ldw	r2,-32412(gp)
811089f4:	e0fffec4 	addi	r3,fp,-5
811089f8:	180b883a 	mov	r5,r3
811089fc:	1009883a 	mov	r4,r2
81108a00:	112c6340 	call	8112c634 <OSMutexAccept>
81108a04:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108a08:	e0bffec3 	ldbu	r2,-5(fp)
81108a0c:	10803fcc 	andi	r2,r2,255
81108a10:	10002c1e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a14:	e03ffe45 	stb	zero,-7(fp)
81108a18:	00002006 	br	81108a9c <vInAckHandlerTask+0x38c>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81108a1c:	e0fffe43 	ldbu	r3,-7(fp)
81108a20:	00a04534 	movhi	r2,33044
81108a24:	108c1a04 	addi	r2,r2,12392
81108a28:	18c011a4 	muli	r3,r3,70
81108a2c:	10c5883a 	add	r2,r2,r3
81108a30:	10801004 	addi	r2,r2,64
81108a34:	10c0000b 	ldhu	r3,0(r2)
81108a38:	d0a0480b 	ldhu	r2,-32480(gp)
81108a3c:	18ffffcc 	andi	r3,r3,65535
81108a40:	10bfffcc 	andi	r2,r2,65535
81108a44:	1880121e 	bne	r3,r2,81108a90 <vInAckHandlerTask+0x380>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81108a48:	e0fffe43 	ldbu	r3,-7(fp)
81108a4c:	00a04534 	movhi	r2,33044
81108a50:	108c1a04 	addi	r2,r2,12392
81108a54:	18c011a4 	muli	r3,r3,70
81108a58:	10c5883a 	add	r2,r2,r3
81108a5c:	10801004 	addi	r2,r2,64
81108a60:	1000000d 	sth	zero,0(r2)

                                    bFound = TRUE;
81108a64:	00800044 	movi	r2,1
81108a68:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108a6c:	d0a04a17 	ldw	r2,-32472(gp)
81108a70:	1009883a 	mov	r4,r2
81108a74:	112f0480 	call	8112f048 <OSSemPost>
81108a78:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108a7c:	e0bffec3 	ldbu	r2,-5(fp)
81108a80:	10803fcc 	andi	r2,r2,255
81108a84:	10000926 	beq	r2,zero,81108aac <vInAckHandlerTask+0x39c>
                                        vFailSetCountSemaphorexBuffer64();
81108a88:	110e55c0 	call	8110e55c <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81108a8c:	00000706 	br	81108aac <vInAckHandlerTask+0x39c>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a90:	e0bffe43 	ldbu	r2,-7(fp)
81108a94:	10800044 	addi	r2,r2,1
81108a98:	e0bffe45 	stb	r2,-7(fp)
81108a9c:	e0bffe43 	ldbu	r2,-7(fp)
81108aa0:	10800130 	cmpltui	r2,r2,4
81108aa4:	103fdd1e 	bne	r2,zero,81108a1c <__reset+0xfb0e8a1c>
81108aa8:	00000106 	br	81108ab0 <vInAckHandlerTask+0x3a0>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81108aac:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81108ab0:	d0a05917 	ldw	r2,-32412(gp)
81108ab4:	1009883a 	mov	r4,r2
81108ab8:	112d2580 	call	8112d258 <OSMutexPost>
                            bFinished64 = TRUE;
81108abc:	00800044 	movi	r2,1
81108ac0:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81108ac4:	e0bff917 	ldw	r2,-28(fp)
81108ac8:	1000371e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
81108acc:	e0bffc17 	ldw	r2,-16(fp)
81108ad0:	1000351e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81108ad4:	d0a05717 	ldw	r2,-32420(gp)
81108ad8:	e0fffec4 	addi	r3,fp,-5
81108adc:	180b883a 	mov	r5,r3
81108ae0:	1009883a 	mov	r4,r2
81108ae4:	112c6340 	call	8112c634 <OSMutexAccept>
81108ae8:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108aec:	e0bffec3 	ldbu	r2,-5(fp)
81108af0:	10803fcc 	andi	r2,r2,255
81108af4:	10002c1e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108af8:	e03ffe45 	stb	zero,-7(fp)
81108afc:	00002006 	br	81108b80 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81108b00:	e0fffe43 	ldbu	r3,-7(fp)
81108b04:	00a04574 	movhi	r2,33045
81108b08:	10b5c304 	addi	r2,r2,-10484
81108b0c:	18c021a4 	muli	r3,r3,134
81108b10:	10c5883a 	add	r2,r2,r3
81108b14:	10802004 	addi	r2,r2,128
81108b18:	10c0000b 	ldhu	r3,0(r2)
81108b1c:	d0a0480b 	ldhu	r2,-32480(gp)
81108b20:	18ffffcc 	andi	r3,r3,65535
81108b24:	10bfffcc 	andi	r2,r2,65535
81108b28:	1880121e 	bne	r3,r2,81108b74 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81108b2c:	e0fffe43 	ldbu	r3,-7(fp)
81108b30:	00a04574 	movhi	r2,33045
81108b34:	10b5c304 	addi	r2,r2,-10484
81108b38:	18c021a4 	muli	r3,r3,134
81108b3c:	10c5883a 	add	r2,r2,r3
81108b40:	10802004 	addi	r2,r2,128
81108b44:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108b48:	00800044 	movi	r2,1
81108b4c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108b50:	d0a04e17 	ldw	r2,-32456(gp)
81108b54:	1009883a 	mov	r4,r2
81108b58:	112f0480 	call	8112f048 <OSSemPost>
81108b5c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108b60:	e0bffec3 	ldbu	r2,-5(fp)
81108b64:	10803fcc 	andi	r2,r2,255
81108b68:	10000926 	beq	r2,zero,81108b90 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81108b6c:	110e5c40 	call	8110e5c4 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81108b70:	00000706 	br	81108b90 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108b74:	e0bffe43 	ldbu	r2,-7(fp)
81108b78:	10800044 	addi	r2,r2,1
81108b7c:	e0bffe45 	stb	r2,-7(fp)
81108b80:	e0bffe43 	ldbu	r2,-7(fp)
81108b84:	108000b0 	cmpltui	r2,r2,2
81108b88:	103fdd1e 	bne	r2,zero,81108b00 <__reset+0xfb0e8b00>
81108b8c:	00000106 	br	81108b94 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81108b90:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108b94:	d0a05717 	ldw	r2,-32420(gp)
81108b98:	1009883a 	mov	r4,r2
81108b9c:	112d2580 	call	8112d258 <OSMutexPost>
                            bFinished128 = TRUE;
81108ba0:	00800044 	movi	r2,1
81108ba4:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81108ba8:	e0bff917 	ldw	r2,-28(fp)
81108bac:	10001d1e 	bne	r2,zero,81108c24 <vInAckHandlerTask+0x514>
81108bb0:	e0bffa17 	ldw	r2,-24(fp)
81108bb4:	10000426 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bb8:	e0bffb17 	ldw	r2,-20(fp)
81108bbc:	10000226 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bc0:	e0bffc17 	ldw	r2,-16(fp)
81108bc4:	1000171e 	bne	r2,zero,81108c24 <vInAckHandlerTask+0x514>
                        OSTimeDly(3); /* Make this task sleep for 3 ticks*/
81108bc8:	010000c4 	movi	r4,3
81108bcc:	1130b4c0 	call	81130b4c <OSTimeDly>
                        ucCountRetries++;
81108bd0:	e0bffe03 	ldbu	r2,-8(fp)
81108bd4:	10800044 	addi	r2,r2,1
81108bd8:	e0bffe05 	stb	r2,-8(fp)
                        #ifdef DEBUG_ON
                            /* Debug:remove */
                            debug(fp, "Temp. Debug: Retrying again. ucCountRetries++; \n");
81108bdc:	d0a04d17 	ldw	r2,-32460(gp)
81108be0:	100f883a 	mov	r7,r2
81108be4:	01800c04 	movi	r6,48
81108be8:	01400044 	movi	r5,1
81108bec:	01204534 	movhi	r4,33044
81108bf0:	21324e04 	addi	r4,r4,-14024
81108bf4:	1111f680 	call	81111f68 <fwrite>
                            fprintf( fp, " bFound = %d , bFinished32 = %d , bFinished64 = %d , bFinished128 = %d  \n", bFound, bFinished32, bFinished64, bFinished128 );
81108bf8:	d0e04d17 	ldw	r3,-32460(gp)
81108bfc:	e0bffc17 	ldw	r2,-16(fp)
81108c00:	d8800115 	stw	r2,4(sp)
81108c04:	e0bffb17 	ldw	r2,-20(fp)
81108c08:	d8800015 	stw	r2,0(sp)
81108c0c:	e1fffa17 	ldw	r7,-24(fp)
81108c10:	e1bff917 	ldw	r6,-28(fp)
81108c14:	01604534 	movhi	r5,33044
81108c18:	29725b04 	addi	r5,r5,-13972
81108c1c:	1809883a 	mov	r4,r3
81108c20:	111197c0 	call	8111197c <fprintf>
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81108c24:	e0bff917 	ldw	r2,-28(fp)
81108c28:	1000091e 	bne	r2,zero,81108c50 <vInAckHandlerTask+0x540>
81108c2c:	e0bffe03 	ldbu	r2,-8(fp)
81108c30:	108001a8 	cmpgeui	r2,r2,6
81108c34:	1000061e 	bne	r2,zero,81108c50 <vInAckHandlerTask+0x540>
81108c38:	e0bffa17 	ldw	r2,-24(fp)
81108c3c:	103f2f26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108c40:	e0bffb17 	ldw	r2,-20(fp)
81108c44:	103f2d26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108c48:	e0bffc17 	ldw	r2,-16(fp)
81108c4c:	103f2b26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
                            fprintf( fp, " bFound = %d , bFinished32 = %d , bFinished64 = %d , bFinished128 = %d  \n", bFound, bFinished32, bFinished64, bFinished128 );
                        #endif                      
                    }
                }
                
                if (bFound == FALSE) {
81108c50:	e0bff917 	ldw	r2,-28(fp)
81108c54:	1000011e 	bne	r2,zero,81108c5c <vInAckHandlerTask+0x54c>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108c58:	110e62c0 	call	8110e62c <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81108c5c:	00800044 	movi	r2,1
81108c60:	e0bffd15 	stw	r2,-12(fp)
				break;
81108c64:	0001883a 	nop
			default:
				break;
		}
	}
81108c68:	003ebe06 	br	81108764 <__reset+0xfb0e8764>

81108c6c <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108c6c:	defff704 	addi	sp,sp,-36
81108c70:	de00012e 	bgeu	sp,et,81108c78 <vInitialTask+0xc>
81108c74:	003b68fa 	trap	3
81108c78:	dfc00815 	stw	ra,32(sp)
81108c7c:	df000715 	stw	fp,28(sp)
81108c80:	df000704 	addi	fp,sp,28
81108c84:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108c88:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81108c8c:	00800104 	movi	r2,4
81108c90:	d8800415 	stw	r2,16(sp)
81108c94:	d8000315 	stw	zero,12(sp)
81108c98:	00820004 	movi	r2,2048
81108c9c:	d8800215 	stw	r2,8(sp)
81108ca0:	00a04534 	movhi	r2,33044
81108ca4:	109dc304 	addi	r2,r2,30476
81108ca8:	d8800115 	stw	r2,4(sp)
81108cac:	00800784 	movi	r2,30
81108cb0:	d8800015 	stw	r2,0(sp)
81108cb4:	01c00784 	movi	r7,30
81108cb8:	01a04574 	movhi	r6,33045
81108cbc:	31a5c204 	addi	r6,r6,-26872
81108cc0:	000b883a 	mov	r5,zero
81108cc4:	01204474 	movhi	r4,33041
81108cc8:	2127a104 	addi	r4,r4,-24956
81108ccc:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108cd0:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108cd4:	e0bffe03 	ldbu	r2,-8(fp)
81108cd8:	10803fcc 	andi	r2,r2,255
81108cdc:	10000526 	beq	r2,zero,81108cf4 <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ce0:	e0bffe03 	ldbu	r2,-8(fp)
81108ce4:	10803fcc 	andi	r2,r2,255
81108ce8:	1009883a 	mov	r4,r2
81108cec:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailReceiverCreate();
81108cf0:	110e4100 	call	8110e410 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81108cf4:	00800104 	movi	r2,4
81108cf8:	d8800415 	stw	r2,16(sp)
81108cfc:	d8000315 	stw	zero,12(sp)
81108d00:	00820004 	movi	r2,2048
81108d04:	d8800215 	stw	r2,8(sp)
81108d08:	00a04574 	movhi	r2,33045
81108d0c:	10b60a04 	addi	r2,r2,-10200
81108d10:	d8800115 	stw	r2,4(sp)
81108d14:	00800684 	movi	r2,26
81108d18:	d8800015 	stw	r2,0(sp)
81108d1c:	01c00684 	movi	r7,26
81108d20:	01a04574 	movhi	r6,33045
81108d24:	31be0904 	addi	r6,r6,-2012
81108d28:	000b883a 	mov	r5,zero
81108d2c:	01204474 	movhi	r4,33041
81108d30:	21249304 	addi	r4,r4,-28084
81108d34:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108d38:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d3c:	e0bffe03 	ldbu	r2,-8(fp)
81108d40:	10803fcc 	andi	r2,r2,255
81108d44:	10000526 	beq	r2,zero,81108d5c <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d48:	e0bffe03 	ldbu	r2,-8(fp)
81108d4c:	10803fcc 	andi	r2,r2,255
81108d50:	1009883a 	mov	r4,r2
81108d54:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81108d58:	110e9d40 	call	8110e9d4 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81108d5c:	00800104 	movi	r2,4
81108d60:	d8800415 	stw	r2,16(sp)
81108d64:	d8000315 	stw	zero,12(sp)
81108d68:	00820004 	movi	r2,2048
81108d6c:	d8800215 	stw	r2,8(sp)
81108d70:	00a04534 	movhi	r2,33044
81108d74:	10841a04 	addi	r2,r2,4200
81108d78:	d8800115 	stw	r2,4(sp)
81108d7c:	008005c4 	movi	r2,23
81108d80:	d8800015 	stw	r2,0(sp)
81108d84:	01c005c4 	movi	r7,23
81108d88:	01a04534 	movhi	r6,33044
81108d8c:	318c1904 	addi	r6,r6,12388
81108d90:	000b883a 	mov	r5,zero
81108d94:	01204474 	movhi	r4,33041
81108d98:	2121c404 	addi	r4,r4,-30960
81108d9c:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108da0:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108da4:	e0bffe03 	ldbu	r2,-8(fp)
81108da8:	10803fcc 	andi	r2,r2,255
81108dac:	10000526 	beq	r2,zero,81108dc4 <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108db0:	e0bffe03 	ldbu	r2,-8(fp)
81108db4:	10803fcc 	andi	r2,r2,255
81108db8:	1009883a 	mov	r4,r2
81108dbc:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81108dc0:	110ea200 	call	8110ea20 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108dc4:	00800104 	movi	r2,4
81108dc8:	d8800415 	stw	r2,16(sp)
81108dcc:	d8000315 	stw	zero,12(sp)
81108dd0:	00820004 	movi	r2,2048
81108dd4:	d8800215 	stw	r2,8(sp)
81108dd8:	00a04574 	movhi	r2,33045
81108ddc:	10a5c304 	addi	r2,r2,-26868
81108de0:	d8800115 	stw	r2,4(sp)
81108de4:	00800644 	movi	r2,25
81108de8:	d8800015 	stw	r2,0(sp)
81108dec:	01c00644 	movi	r7,25
81108df0:	01a04574 	movhi	r6,33045
81108df4:	31adc204 	addi	r6,r6,-18680
81108df8:	000b883a 	mov	r5,zero
81108dfc:	01204474 	movhi	r4,33041
81108e00:	2123e304 	addi	r4,r4,-28788
81108e04:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108e08:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e0c:	e0bffe03 	ldbu	r2,-8(fp)
81108e10:	10803fcc 	andi	r2,r2,255
81108e14:	10000526 	beq	r2,zero,81108e2c <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e18:	e0bffe03 	ldbu	r2,-8(fp)
81108e1c:	10803fcc 	andi	r2,r2,255
81108e20:	1009883a 	mov	r4,r2
81108e24:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108e28:	110ea6c0 	call	8110ea6c <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81108e2c:	00800104 	movi	r2,4
81108e30:	d8800415 	stw	r2,16(sp)
81108e34:	d8000315 	stw	zero,12(sp)
81108e38:	00820004 	movi	r2,2048
81108e3c:	d8800215 	stw	r2,8(sp)
81108e40:	00a04534 	movhi	r2,33044
81108e44:	10957704 	addi	r2,r2,21980
81108e48:	d8800115 	stw	r2,4(sp)
81108e4c:	00800704 	movi	r2,28
81108e50:	d8800015 	stw	r2,0(sp)
81108e54:	01c00704 	movi	r7,28
81108e58:	01a04534 	movhi	r6,33044
81108e5c:	319d7604 	addi	r6,r6,30168
81108e60:	000b883a 	mov	r5,zero
81108e64:	01204474 	movhi	r4,33041
81108e68:	212ab704 	addi	r4,r4,-21796
81108e6c:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108e70:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e74:	e0bffe03 	ldbu	r2,-8(fp)
81108e78:	10803fcc 	andi	r2,r2,255
81108e7c:	10000526 	beq	r2,zero,81108e94 <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e80:	e0bffe03 	ldbu	r2,-8(fp)
81108e84:	10803fcc 	andi	r2,r2,255
81108e88:	1009883a 	mov	r4,r2
81108e8c:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108e90:	110eb500 	call	8110eb50 <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81108e94:	00800104 	movi	r2,4
81108e98:	d8800415 	stw	r2,16(sp)
81108e9c:	d8000315 	stw	zero,12(sp)
81108ea0:	00820004 	movi	r2,2048
81108ea4:	d8800215 	stw	r2,8(sp)
81108ea8:	00a04534 	movhi	r2,33044
81108eac:	108c6004 	addi	r2,r2,12672
81108eb0:	d8800115 	stw	r2,4(sp)
81108eb4:	00800604 	movi	r2,24
81108eb8:	d8800015 	stw	r2,0(sp)
81108ebc:	01c00604 	movi	r7,24
81108ec0:	01a04534 	movhi	r6,33044
81108ec4:	31945f04 	addi	r6,r6,20860
81108ec8:	000b883a 	mov	r5,zero
81108ecc:	01204474 	movhi	r4,33041
81108ed0:	212a4e04 	addi	r4,r4,-22216
81108ed4:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
81108ed8:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108edc:	e0bffe03 	ldbu	r2,-8(fp)
81108ee0:	10803fcc 	andi	r2,r2,255
81108ee4:	10000526 	beq	r2,zero,81108efc <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ee8:	e0bffe03 	ldbu	r2,-8(fp)
81108eec:	10803fcc 	andi	r2,r2,255
81108ef0:	1009883a 	mov	r4,r2
81108ef4:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailSenderCreate();
81108ef8:	110e45c0 	call	8110e45c <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81108efc:	d0a05617 	ldw	r2,-32424(gp)
81108f00:	e17ffe04 	addi	r5,fp,-8
81108f04:	1009883a 	mov	r4,r2
81108f08:	113174c0 	call	8113174c <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81108f0c:	e0bffe03 	ldbu	r2,-8(fp)
81108f10:	10803fcc 	andi	r2,r2,255
81108f14:	10000126 	beq	r2,zero,81108f1c <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81108f18:	110ee0c0 	call	8110ee0c <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81108f1c:	01003fc4 	movi	r4,255
81108f20:	112fc180 	call	8112fc18 <OSTaskDel>
81108f24:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81108f28:	e0bffe03 	ldbu	r2,-8(fp)
81108f2c:	10803fcc 	andi	r2,r2,255
81108f30:	10001026 	beq	r2,zero,81108f74 <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108f34:	e0bffe03 	ldbu	r2,-8(fp)
81108f38:	10803fcc 	andi	r2,r2,255
81108f3c:	1009883a 	mov	r4,r2
81108f40:	110debc0 	call	8110debc <printErrorTask>
		#endif
		vFailDeleteInitialization();
81108f44:	110e4a80 	call	8110e4a8 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81108f48:	014009c4 	movi	r5,39
81108f4c:	01000044 	movi	r4,1
81108f50:	112f3800 	call	8112f380 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81108f54:	01003fc4 	movi	r4,255
81108f58:	112fc180 	call	8112fc18 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81108f5c:	000f883a 	mov	r7,zero
81108f60:	01800284 	movi	r6,10
81108f64:	000b883a 	mov	r5,zero
81108f68:	0009883a 	mov	r4,zero
81108f6c:	1130c580 	call	81130c58 <OSTimeDlyHMSM>
		}
81108f70:	003ff806 	br	81108f54 <__reset+0xfb0e8f54>
	}

}
81108f74:	0001883a 	nop
81108f78:	e037883a 	mov	sp,fp
81108f7c:	dfc00117 	ldw	ra,4(sp)
81108f80:	df000017 	ldw	fp,0(sp)
81108f84:	dec00204 	addi	sp,sp,8
81108f88:	f800283a 	ret

81108f8c <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81108f8c:	defff604 	addi	sp,sp,-40
81108f90:	de00012e 	bgeu	sp,et,81108f98 <vOutAckHandlerTask+0xc>
81108f94:	003b68fa 	trap	3
81108f98:	dfc00915 	stw	ra,36(sp)
81108f9c:	df000815 	stw	fp,32(sp)
81108fa0:	df000804 	addi	fp,sp,32
81108fa4:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81108fa8:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81108fac:	e03ffb15 	stw	zero,-20(fp)
81108fb0:	e03ffc15 	stw	zero,-16(fp)
81108fb4:	e03ffd15 	stw	zero,-12(fp)
81108fb8:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81108fbc:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81108fc0:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81108fc4:	d0a04d17 	ldw	r2,-32460(gp)
81108fc8:	100f883a 	mov	r7,r2
81108fcc:	01800704 	movi	r6,28
81108fd0:	01400044 	movi	r5,1
81108fd4:	01204534 	movhi	r4,33044
81108fd8:	21326e04 	addi	r4,r4,-13896
81108fdc:	1111f680 	call	81111f68 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81108fe0:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81108fe4:	e0bff917 	ldw	r2,-28(fp)
81108fe8:	10c00060 	cmpeqi	r3,r2,1
81108fec:	1800071e 	bne	r3,zero,8110900c <vOutAckHandlerTask+0x80>
81108ff0:	0080032e 	bgeu	zero,r2,81109000 <vOutAckHandlerTask+0x74>
81108ff4:	108000a0 	cmpeqi	r2,r2,2
81108ff8:	1000451e 	bne	r2,zero,81109110 <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81108ffc:	00009206 	br	81109248 <vOutAckHandlerTask+0x2bc>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81109000:	00800044 	movi	r2,1
81109004:	e0bff915 	stw	r2,-28(fp)
				break;
81109008:	00008f06 	br	81109248 <vOutAckHandlerTask+0x2bc>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
8110900c:	d0a04c17 	ldw	r2,-32464(gp)
81109010:	e0fffac4 	addi	r3,fp,-21
81109014:	180d883a 	mov	r6,r3
81109018:	000b883a 	mov	r5,zero
8110901c:	1009883a 	mov	r4,r2
81109020:	112ecc00 	call	8112ecc0 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81109024:	e0bffac3 	ldbu	r2,-21(fp)
81109028:	10803fcc 	andi	r2,r2,255
8110902c:	1000361e 	bne	r2,zero,81109108 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81109030:	d0a05a17 	ldw	r2,-32408(gp)
81109034:	e0fffac4 	addi	r3,fp,-21
81109038:	180d883a 	mov	r6,r3
8110903c:	000b883a 	mov	r5,zero
81109040:	1009883a 	mov	r4,r2
81109044:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109048:	e0bffac3 	ldbu	r2,-21(fp)
8110904c:	10803fcc 	andi	r2,r2,255
81109050:	10002b1e 	bne	r2,zero,81109100 <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109054:	e03ffa45 	stb	zero,-23(fp)
81109058:	00002206 	br	811090e4 <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
8110905c:	e0fffa43 	ldbu	r3,-23(fp)
81109060:	00a04574 	movhi	r2,33045
81109064:	10be0a04 	addi	r2,r2,-2008
81109068:	18c7883a 	add	r3,r3,r3
8110906c:	18c7883a 	add	r3,r3,r3
81109070:	10c5883a 	add	r2,r2,r3
81109074:	10800003 	ldbu	r2,0(r2)
81109078:	10803fcc 	andi	r2,r2,255
8110907c:	1080201c 	xori	r2,r2,128
81109080:	10bfe004 	addi	r2,r2,-128
81109084:	10001426 	beq	r2,zero,811090d8 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109088:	e0fffa43 	ldbu	r3,-23(fp)
8110908c:	00a04574 	movhi	r2,33045
81109090:	10be0a04 	addi	r2,r2,-2008
81109094:	18c7883a 	add	r3,r3,r3
81109098:	18c7883a 	add	r3,r3,r3
8110909c:	10c5883a 	add	r2,r2,r3
811090a0:	10c0000b 	ldhu	r3,0(r2)
811090a4:	d0e0488d 	sth	r3,-32478(gp)
811090a8:	1080008b 	ldhu	r2,2(r2)
811090ac:	d0a0490d 	sth	r2,-32476(gp)
                                eSenderAckState = sSASending;
811090b0:	00800084 	movi	r2,2
811090b4:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811090b8:	e0fffa43 	ldbu	r3,-23(fp)
811090bc:	00a04574 	movhi	r2,33045
811090c0:	10be0a04 	addi	r2,r2,-2008
811090c4:	18c7883a 	add	r3,r3,r3
811090c8:	18c7883a 	add	r3,r3,r3
811090cc:	10c5883a 	add	r2,r2,r3
811090d0:	10000005 	stb	zero,0(r2)
                                break;
811090d4:	00000606 	br	811090f0 <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811090d8:	e0bffa43 	ldbu	r2,-23(fp)
811090dc:	10800044 	addi	r2,r2,1
811090e0:	e0bffa45 	stb	r2,-23(fp)
811090e4:	e0bffa43 	ldbu	r2,-23(fp)
811090e8:	10800130 	cmpltui	r2,r2,4
811090ec:	103fdb1e 	bne	r2,zero,8110905c <__reset+0xfb0e905c>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811090f0:	d0a05a17 	ldw	r2,-32408(gp)
811090f4:	1009883a 	mov	r4,r2
811090f8:	112d2580 	call	8112d258 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090fc:	00005206 	br	81109248 <vOutAckHandlerTask+0x2bc>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
81109100:	110e1d80 	call	8110e1d8 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
81109104:	00005006 	br	81109248 <vOutAckHandlerTask+0x2bc>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
81109108:	110e1700 	call	8110e170 <vFailGetCountSemaphoreSenderTask>
                }
                break;
8110910c:	00004e06 	br	81109248 <vOutAckHandlerTask+0x2bc>
			case sSASending:

                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
81109110:	d0a04883 	ldbu	r2,-32478(gp)
81109114:	10803fcc 	andi	r2,r2,255
81109118:	1080201c 	xori	r2,r2,128
8110911c:	10bfe004 	addi	r2,r2,-128
81109120:	108008e0 	cmpeqi	r2,r2,35
81109124:	1000201e 	bne	r2,zero,811091a8 <vOutAckHandlerTask+0x21c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
81109128:	d0a048c3 	ldbu	r2,-32477(gp)
8110912c:	10c03fcc 	andi	r3,r2,255
81109130:	18c0201c 	xori	r3,r3,128
81109134:	18ffe004 	addi	r3,r3,-128
81109138:	d0a0490b 	ldhu	r2,-32476(gp)
8110913c:	113fffcc 	andi	r4,r2,65535
81109140:	e0bffb04 	addi	r2,fp,-20
81109144:	200f883a 	mov	r7,r4
81109148:	180d883a 	mov	r6,r3
8110914c:	01604534 	movhi	r5,33044
81109150:	29727604 	addi	r5,r5,-13864
81109154:	1009883a 	mov	r4,r2
81109158:	11130e40 	call	811130e4 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
8110915c:	e0bffb04 	addi	r2,fp,-20
81109160:	1009883a 	mov	r4,r2
81109164:	11132f80 	call	811132f8 <strlen>
81109168:	1007883a 	mov	r3,r2
8110916c:	e0bffb04 	addi	r2,fp,-20
81109170:	180b883a 	mov	r5,r3
81109174:	1009883a 	mov	r4,r2
81109178:	110de600 	call	8110de60 <ucCrc8wInit>
8110917c:	e0bffa85 	stb	r2,-22(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109180:	e13ffa83 	ldbu	r4,-22(fp)
81109184:	e0fffb04 	addi	r3,fp,-20
81109188:	e0bffb04 	addi	r2,fp,-20
8110918c:	200f883a 	mov	r7,r4
81109190:	180d883a 	mov	r6,r3
81109194:	01604534 	movhi	r5,33044
81109198:	29727804 	addi	r5,r5,-13856
8110919c:	1009883a 	mov	r4,r2
811091a0:	11130e40 	call	811130e4 <sprintf>
811091a4:	00000606 	br	811091c0 <vOutAckHandlerTask+0x234>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
811091a8:	e0fffb04 	addi	r3,fp,-20
811091ac:	008d0d74 	movhi	r2,13365
811091b0:	109f08c4 	addi	r2,r2,31779
811091b4:	18800015 	stw	r2,0(r3)
811091b8:	00800ec4 	movi	r2,59
811091bc:	1880010d 	sth	r2,4(r3)
                }

                bSuccess = FALSE;
811091c0:	e03ff815 	stw	zero,-32(fp)
                ucCountRetries = 0;
811091c4:	e03ffa05 	stb	zero,-24(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811091c8:	00001406 	br	8110921c <vOutAckHandlerTask+0x290>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
811091cc:	d0a05b17 	ldw	r2,-32404(gp)
811091d0:	e0fffac4 	addi	r3,fp,-21
811091d4:	180d883a 	mov	r6,r3
811091d8:	01400144 	movi	r5,5
811091dc:	1009883a 	mov	r4,r2
811091e0:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
811091e4:	e0bffac3 	ldbu	r2,-21(fp)
811091e8:	10803fcc 	andi	r2,r2,255
811091ec:	1000081e 	bne	r2,zero,81109210 <vOutAckHandlerTask+0x284>
                        puts(cBufferAck);
811091f0:	e0bffb04 	addi	r2,fp,-20
811091f4:	1009883a 	mov	r4,r2
811091f8:	1112da00 	call	81112da0 <puts>
                        OSMutexPost(xTxUARTMutex);
811091fc:	d0a05b17 	ldw	r2,-32404(gp)
81109200:	1009883a 	mov	r4,r2
81109204:	112d2580 	call	8112d258 <OSMutexPost>
                        bSuccess = TRUE;
81109208:	00800044 	movi	r2,1
8110920c:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
81109210:	e0bffa03 	ldbu	r2,-24(fp)
81109214:	10800044 	addi	r2,r2,1
81109218:	e0bffa05 	stb	r2,-24(fp)
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
                }

                bSuccess = FALSE;
                ucCountRetries = 0;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
8110921c:	e0bff817 	ldw	r2,-32(fp)
81109220:	1000031e 	bne	r2,zero,81109230 <vOutAckHandlerTask+0x2a4>
81109224:	e0bffa03 	ldbu	r2,-24(fp)
81109228:	108001b0 	cmpltui	r2,r2,6
8110922c:	103fe71e 	bne	r2,zero,811091cc <__reset+0xfb0e91cc>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
81109230:	e0bff817 	ldw	r2,-32(fp)
81109234:	1000011e 	bne	r2,zero,8110923c <vOutAckHandlerTask+0x2b0>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
81109238:	110e3100 	call	8110e310 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
8110923c:	00800044 	movi	r2,1
81109240:	e0bff915 	stw	r2,-28(fp)
				break;
81109244:	0001883a 	nop
			default:
				break;
		}
	}
81109248:	003f6606 	br	81108fe4 <__reset+0xfb0e8fe4>

8110924c <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
8110924c:	deffc104 	addi	sp,sp,-252
81109250:	de00012e 	bgeu	sp,et,81109258 <vParserCommTask+0xc>
81109254:	003b68fa 	trap	3
81109258:	dfc03e15 	stw	ra,248(sp)
8110925c:	df003d15 	stw	fp,244(sp)
81109260:	df003d04 	addi	fp,sp,244
81109264:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
81109268:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

	#ifdef DEBUG_ON
		debug(fp,"vParserCommTask, enter task.\n");
8110926c:	d0a04d17 	ldw	r2,-32460(gp)
81109270:	100f883a 	mov	r7,r2
81109274:	01800744 	movi	r6,29
81109278:	01400044 	movi	r5,1
8110927c:	01204534 	movhi	r4,33044
81109280:	21327b04 	addi	r4,r4,-13844
81109284:	1111f680 	call	81111f68 <fwrite>
	#endif

	eParserMode = sConfiguring;
81109288:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
8110928c:	e0bfc817 	ldw	r2,-224(fp)
81109290:	108001a8 	cmpgeui	r2,r2,6
81109294:	1002881e 	bne	r2,zero,81109cb8 <vParserCommTask+0xa6c>
81109298:	e0bfc817 	ldw	r2,-224(fp)
8110929c:	100690ba 	slli	r3,r2,2
811092a0:	00a04474 	movhi	r2,33041
811092a4:	10a4ad04 	addi	r2,r2,-27980
811092a8:	1885883a 	add	r2,r3,r2
811092ac:	10800017 	ldw	r2,0(r2)
811092b0:	1000683a 	jmp	r2
811092b4:	811092cc 	andi	r4,r16,16971
811092b8:	811092d8 	cmpnei	r4,r16,16971
811092bc:	811093a4 	muli	r4,r16,16974
811092c0:	81109438 	rdprs	r4,r16,16976
811092c4:	81109590 	cmplti	r4,r16,16982
811092c8:	811095d8 	cmpnei	r4,r16,16983
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
811092cc:	00800044 	movi	r2,1
811092d0:	e0bfc815 	stw	r2,-224(fp)
				break;
811092d4:	00027c06 	br	81109cc8 <vParserCommTask+0xa7c>
			case sWaitingConn:

				bSuccess = FALSE;
811092d8:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingConn;
811092dc:	00800044 	movi	r2,1
811092e0:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
811092e4:	d0a04f17 	ldw	r2,-32452(gp)
811092e8:	e0ffca84 	addi	r3,fp,-214
811092ec:	180d883a 	mov	r6,r3
811092f0:	000b883a 	mov	r5,zero
811092f4:	1009883a 	mov	r4,r2
811092f8:	112ecc00 	call	8112ecc0 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811092fc:	e0bfca83 	ldbu	r2,-214(fp)
81109300:	10803fcc 	andi	r2,r2,255
81109304:	1000251e 	bne	r2,zero,8110939c <vParserCommTask+0x150>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
81109308:	d0a04b17 	ldw	r2,-32468(gp)
8110930c:	1009883a 	mov	r4,r2
81109310:	112f0480 	call	8112f048 <OSSemPost>
81109314:	e0bfca85 	stb	r2,-214(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109318:	e0bfca83 	ldbu	r2,-214(fp)
8110931c:	10803fcc 	andi	r2,r2,255
81109320:	1000171e 	bne	r2,zero,81109380 <vParserCommTask+0x134>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81109324:	01204534 	movhi	r4,33044
81109328:	2102aa04 	addi	r4,r4,2728
8110932c:	1109ccc0 	call	81109ccc <getPreParsedPacket>
81109330:	e0bfc915 	stw	r2,-220(fp)
                    	if (bSuccess == TRUE) {
81109334:	e0bfc917 	ldw	r2,-220(fp)
81109338:	10800058 	cmpnei	r2,r2,1
8110933c:	10000e1e 	bne	r2,zero,81109378 <vParserCommTask+0x12c>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109340:	00a04534 	movhi	r2,33044
81109344:	1082aa04 	addi	r2,r2,2728
81109348:	10800103 	ldbu	r2,4(r2)
8110934c:	10803fcc 	andi	r2,r2,255
81109350:	1080201c 	xori	r2,r2,128
81109354:	10bfe004 	addi	r2,r2,-128
81109358:	10800858 	cmpnei	r2,r2,33
8110935c:	1000031e 	bne	r2,zero,8110936c <vParserCommTask+0x120>
                            	eParserMode = sReplyParsing;
81109360:	00800104 	movi	r2,4
81109364:	e0bfc815 	stw	r2,-224(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109368:	00025606 	br	81109cc4 <vParserCommTask+0xa78>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
8110936c:	008000c4 	movi	r2,3
81109370:	e0bfc815 	stw	r2,-224(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109374:	00025306 	br	81109cc4 <vParserCommTask+0xa78>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81109378:	110e7640 	call	8110e764 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
8110937c:	00025106 	br	81109cc4 <vParserCommTask+0xa78>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81109380:	1109de40 	call	81109de4 <bTrySendSemaphoreCommInit>
81109384:	e0bfc915 	stw	r2,-220(fp)
						if (bSuccess == TRUE) {
81109388:	e0bfc917 	ldw	r2,-220(fp)
8110938c:	10800058 	cmpnei	r2,r2,1
81109390:	10024c1e 	bne	r2,zero,81109cc4 <vParserCommTask+0xa78>
							vFailSendxSemCommInit();
81109394:	110e0240 	call	8110e024 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109398:	00024a06 	br	81109cc4 <vParserCommTask+0xa78>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110939c:	110e6940 	call	8110e694 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
811093a0:	00024806 	br	81109cc4 <vParserCommTask+0xa78>
			case sWaitingMessage:

				bSuccess = FALSE;
811093a4:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
811093a8:	00800084 	movi	r2,2
811093ac:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
811093b0:	d0a04f17 	ldw	r2,-32452(gp)
811093b4:	e0ffca84 	addi	r3,fp,-214
811093b8:	180d883a 	mov	r6,r3
811093bc:	000b883a 	mov	r5,zero
811093c0:	1009883a 	mov	r4,r2
811093c4:	112ecc00 	call	8112ecc0 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811093c8:	e0bfca83 	ldbu	r2,-214(fp)
811093cc:	10803fcc 	andi	r2,r2,255
811093d0:	1000171e 	bne	r2,zero,81109430 <vParserCommTask+0x1e4>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811093d4:	01204534 	movhi	r4,33044
811093d8:	2102aa04 	addi	r4,r4,2728
811093dc:	1109ccc0 	call	81109ccc <getPreParsedPacket>
811093e0:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
811093e4:	e0bfc917 	ldw	r2,-220(fp)
811093e8:	10800058 	cmpnei	r2,r2,1
811093ec:	10000e1e 	bne	r2,zero,81109428 <vParserCommTask+0x1dc>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
811093f0:	00a04534 	movhi	r2,33044
811093f4:	1082aa04 	addi	r2,r2,2728
811093f8:	10800103 	ldbu	r2,4(r2)
811093fc:	10803fcc 	andi	r2,r2,255
81109400:	1080201c 	xori	r2,r2,128
81109404:	10bfe004 	addi	r2,r2,-128
81109408:	10800858 	cmpnei	r2,r2,33
8110940c:	1000031e 	bne	r2,zero,8110941c <vParserCommTask+0x1d0>
							eParserMode = sReplyParsing;
81109410:	00800104 	movi	r2,4
81109414:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109418:	00022b06 	br	81109cc8 <vParserCommTask+0xa7c>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110941c:	008000c4 	movi	r2,3
81109420:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109424:	00022806 	br	81109cc8 <vParserCommTask+0xa7c>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
81109428:	110e7640 	call	8110e764 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110942c:	00022606 	br	81109cc8 <vParserCommTask+0xa7c>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109430:	110e6940 	call	8110e694 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
81109434:	00022406 	br	81109cc8 <vParserCommTask+0xa7c>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
81109438:	00a04534 	movhi	r2,33044
8110943c:	1082aa04 	addi	r2,r2,2728
81109440:	10800143 	ldbu	r2,5(r2)
81109444:	10803fcc 	andi	r2,r2,255
81109448:	1080201c 	xori	r2,r2,128
8110944c:	10bfe004 	addi	r2,r2,-128
81109450:	10c01120 	cmpeqi	r3,r2,68
81109454:	1800081e 	bne	r3,zero,81109478 <vParserCommTask+0x22c>
81109458:	10c01420 	cmpeqi	r3,r2,80
8110945c:	18000a1e 	bne	r3,zero,81109488 <vParserCommTask+0x23c>
81109460:	108010e0 	cmpeqi	r2,r2,67
81109464:	10004626 	beq	r2,zero,81109580 <vParserCommTask+0x334>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
81109468:	110c7900 	call	8110c790 <vSendEthConf>
						eParserMode = sWaitingMessage;
8110946c:	00800084 	movi	r2,2
81109470:	e0bfc815 	stw	r2,-224(fp)
						break;
81109474:	00004506 	br	8110958c <vParserCommTask+0x340>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109478:	110ca200 	call	8110ca20 <vSendTurnOff>
						eParserMode = sWaitingMessage;
8110947c:	00800084 	movi	r2,2
81109480:	e0bfc815 	stw	r2,-224(fp)
                        break;						
81109484:	00004106 	br	8110958c <vParserCommTask+0x340>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
81109488:	d0a04d17 	ldw	r2,-32460(gp)
8110948c:	100f883a 	mov	r7,r2
81109490:	01800384 	movi	r6,14
81109494:	01400044 	movi	r5,1
81109498:	01204534 	movhi	r4,33044
8110949c:	21328304 	addi	r4,r4,-13812
811094a0:	1111f680 	call	81111f68 <fwrite>
							memset(cPUSDebug,0,128);
811094a4:	e0bfdf04 	addi	r2,fp,-132
811094a8:	01802004 	movi	r6,128
811094ac:	000b883a 	mov	r5,zero
811094b0:	1009883a 	mov	r4,r2
811094b4:	1112acc0 	call	81112acc <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
811094b8:	00a04534 	movhi	r2,33044
811094bc:	1082aa04 	addi	r2,r2,2728
811094c0:	1080028b 	ldhu	r2,10(r2)
811094c4:	117fffcc 	andi	r5,r2,65535
811094c8:	00a04534 	movhi	r2,33044
811094cc:	1082aa04 	addi	r2,r2,2728
811094d0:	1080030b 	ldhu	r2,12(r2)
811094d4:	11bfffcc 	andi	r6,r2,65535
811094d8:	00a04534 	movhi	r2,33044
811094dc:	1082aa04 	addi	r2,r2,2728
811094e0:	1080038b 	ldhu	r2,14(r2)
811094e4:	10ffffcc 	andi	r3,r2,65535
811094e8:	00a04534 	movhi	r2,33044
811094ec:	1082aa04 	addi	r2,r2,2728
811094f0:	1080040b 	ldhu	r2,16(r2)
811094f4:	113fffcc 	andi	r4,r2,65535
811094f8:	00a04534 	movhi	r2,33044
811094fc:	1082aa04 	addi	r2,r2,2728
81109500:	1080048b 	ldhu	r2,18(r2)
81109504:	10bfffcc 	andi	r2,r2,65535
81109508:	e23fdf04 	addi	r8,fp,-132
8110950c:	d8800215 	stw	r2,8(sp)
81109510:	d9000115 	stw	r4,4(sp)
81109514:	d8c00015 	stw	r3,0(sp)
81109518:	300f883a 	mov	r7,r6
8110951c:	280d883a 	mov	r6,r5
81109520:	01604534 	movhi	r5,33044
81109524:	29728704 	addi	r5,r5,-13796
81109528:	4009883a 	mov	r4,r8
8110952c:	11130e40 	call	811130e4 <sprintf>
							debug(fp, cPUSDebug );
81109530:	d0a04d17 	ldw	r2,-32460(gp)
81109534:	e0ffdf04 	addi	r3,fp,-132
81109538:	180b883a 	mov	r5,r3
8110953c:	1009883a 	mov	r4,r2
81109540:	111197c0 	call	8111197c <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
81109544:	00a04534 	movhi	r2,33044
81109548:	1082aa04 	addi	r2,r2,2728
8110954c:	1080038b 	ldhu	r2,14(r2)
81109550:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
81109554:	00a04534 	movhi	r2,33044
81109558:	1082aa04 	addi	r2,r2,2728
8110955c:	1080040b 	ldhu	r2,16(r2)
81109560:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
81109564:	00a04534 	movhi	r2,33044
81109568:	1082aa04 	addi	r2,r2,2728
8110956c:	1080048b 	ldhu	r2,18(r2)
81109570:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
81109574:	00800144 	movi	r2,5
81109578:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110957c:	00000306 	br	8110958c <vParserCommTask+0x340>
					default:
						eParserMode = sWaitingMessage;
81109580:	00800084 	movi	r2,2
81109584:	e0bfc815 	stw	r2,-224(fp)
						break;
81109588:	0001883a 	nop
				}
				break;
8110958c:	0001ce06 	br	81109cc8 <vParserCommTask+0xa7c>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
81109590:	00800084 	movi	r2,2
81109594:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
81109598:	e0bfc60b 	ldhu	r2,-232(fp)
8110959c:	10c01220 	cmpeqi	r3,r2,72
811095a0:	1800091e 	bne	r3,zero,811095c8 <vParserCommTask+0x37c>
811095a4:	10c014e0 	cmpeqi	r3,r2,83
811095a8:	1800091e 	bne	r3,zero,811095d0 <vParserCommTask+0x384>
811095ac:	10801120 	cmpeqi	r2,r2,68
811095b0:	10000226 	beq	r2,zero,811095bc <vParserCommTask+0x370>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
811095b4:	110ca200 	call	8110ca20 <vSendTurnOff>
						
						
                        break;
811095b8:	00000606 	br	811095d4 <vParserCommTask+0x388>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
811095bc:	00800084 	movi	r2,2
811095c0:	e0bfc815 	stw	r2,-224(fp)
                        break;
811095c4:	00000306 	br	811095d4 <vParserCommTask+0x388>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
811095c8:	0001883a 	nop
811095cc:	0001be06 	br	81109cc8 <vParserCommTask+0xa7c>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
811095d0:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
811095d4:	0001bc06 	br	81109cc8 <vParserCommTask+0xa7c>
			case sPusHandling:
				eParserMode = sWaitingMessage;
811095d8:	00800084 	movi	r2,2
811095dc:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
811095e0:	e0bfc60b 	ldhu	r2,-232(fp)
811095e4:	10c03ea0 	cmpeqi	r3,r2,250
811095e8:	1800311e 	bne	r3,zero,811096b0 <vParserCommTask+0x464>
811095ec:	10c03ec8 	cmpgei	r3,r2,251
811095f0:	1800031e 	bne	r3,zero,81109600 <vParserCommTask+0x3b4>
811095f4:	10800460 	cmpeqi	r2,r2,17
811095f8:	1000061e 	bne	r2,zero,81109614 <vParserCommTask+0x3c8>
811095fc:	0001aa06 	br	81109ca8 <vParserCommTask+0xa5c>
81109600:	10c03ee0 	cmpeqi	r3,r2,251
81109604:	1800621e 	bne	r3,zero,81109790 <vParserCommTask+0x544>
81109608:	10803f20 	cmpeqi	r2,r2,252
8110960c:	1000ba1e 	bne	r2,zero,811098f8 <vParserCommTask+0x6ac>
81109610:	0001a506 	br	81109ca8 <vParserCommTask+0xa5c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
81109614:	e0bfc68b 	ldhu	r2,-230(fp)
81109618:	10800060 	cmpeqi	r2,r2,1
8110961c:	10000b26 	beq	r2,zero,8110964c <vParserCommTask+0x400>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
81109620:	d0a04d17 	ldw	r2,-32460(gp)
81109624:	100f883a 	mov	r7,r2
81109628:	01800604 	movi	r6,24
8110962c:	01400044 	movi	r5,1
81109630:	01204534 	movhi	r4,33044
81109634:	21329a04 	addi	r4,r4,-13720
81109638:	1111f680 	call	81111f68 <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
8110963c:	e0bfc70b 	ldhu	r2,-228(fp)
81109640:	1009883a 	mov	r4,r2
81109644:	110d0780 	call	8110d078 <vTMPusTestConnection>

								break;
81109648:	00001806 	br	811096ac <vParserCommTask+0x460>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110964c:	e0bfdf04 	addi	r2,fp,-132
81109650:	01802004 	movi	r6,128
81109654:	000b883a 	mov	r5,zero
81109658:	1009883a 	mov	r4,r2
8110965c:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109660:	e13fc60b 	ldhu	r4,-232(fp)
81109664:	e17fc68b 	ldhu	r5,-230(fp)
81109668:	e0bfc70b 	ldhu	r2,-228(fp)
8110966c:	e0ffdf04 	addi	r3,fp,-132
81109670:	d8800015 	stw	r2,0(sp)
81109674:	280f883a 	mov	r7,r5
81109678:	200d883a 	mov	r6,r4
8110967c:	01604534 	movhi	r5,33044
81109680:	2972a104 	addi	r5,r5,-13692
81109684:	1809883a 	mov	r4,r3
81109688:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
8110968c:	d0a04d17 	ldw	r2,-32460(gp)
81109690:	e0ffdf04 	addi	r3,fp,-132
81109694:	180b883a 	mov	r5,r3
81109698:	1009883a 	mov	r4,r2
8110969c:	111197c0 	call	8111197c <fprintf>
								#endif
								eParserMode = sWaitingMessage;
811096a0:	00800084 	movi	r2,2
811096a4:	e0bfc815 	stw	r2,-224(fp)
								break;
811096a8:	0001883a 	nop
						}
                        break;
811096ac:	00018106 	br	81109cb4 <vParserCommTask+0xa68>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
811096b0:	e0bfc68b 	ldhu	r2,-230(fp)
811096b4:	10c00f20 	cmpeqi	r3,r2,60
811096b8:	18000c1e 	bne	r3,zero,811096ec <vParserCommTask+0x4a0>
811096bc:	10c00f60 	cmpeqi	r3,r2,61
811096c0:	1800121e 	bne	r3,zero,8110970c <vParserCommTask+0x4c0>
811096c4:	10800ee0 	cmpeqi	r2,r2,59
811096c8:	10001826 	beq	r2,zero,8110972c <vParserCommTask+0x4e0>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
811096cc:	d0a04d17 	ldw	r2,-32460(gp)
811096d0:	100f883a 	mov	r7,r2
811096d4:	01800384 	movi	r6,14
811096d8:	01400044 	movi	r5,1
811096dc:	01204534 	movhi	r4,33044
811096e0:	2132b104 	addi	r4,r4,-13628
811096e4:	1111f680 	call	81111f68 <fwrite>
								#endif

								
								break;
811096e8:	00002806 	br	8110978c <vParserCommTask+0x540>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
811096ec:	d0a04d17 	ldw	r2,-32460(gp)
811096f0:	100f883a 	mov	r7,r2
811096f4:	018003c4 	movi	r6,15
811096f8:	01400044 	movi	r5,1
811096fc:	01204534 	movhi	r4,33044
81109700:	2132b504 	addi	r4,r4,-13612
81109704:	1111f680 	call	81111f68 <fwrite>
								#endif


								break;
81109708:	00002006 	br	8110978c <vParserCommTask+0x540>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
8110970c:	d0a04d17 	ldw	r2,-32460(gp)
81109710:	100f883a 	mov	r7,r2
81109714:	01800304 	movi	r6,12
81109718:	01400044 	movi	r5,1
8110971c:	01204534 	movhi	r4,33044
81109720:	2132b904 	addi	r4,r4,-13596
81109724:	1111f680 	call	81111f68 <fwrite>
								#endif


								break;
81109728:	00001806 	br	8110978c <vParserCommTask+0x540>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110972c:	e0bfdf04 	addi	r2,fp,-132
81109730:	01802004 	movi	r6,128
81109734:	000b883a 	mov	r5,zero
81109738:	1009883a 	mov	r4,r2
8110973c:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109740:	e13fc60b 	ldhu	r4,-232(fp)
81109744:	e17fc68b 	ldhu	r5,-230(fp)
81109748:	e0bfc70b 	ldhu	r2,-228(fp)
8110974c:	e0ffdf04 	addi	r3,fp,-132
81109750:	d8800015 	stw	r2,0(sp)
81109754:	280f883a 	mov	r7,r5
81109758:	200d883a 	mov	r6,r4
8110975c:	01604534 	movhi	r5,33044
81109760:	2972a104 	addi	r5,r5,-13692
81109764:	1809883a 	mov	r4,r3
81109768:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
8110976c:	d0a04d17 	ldw	r2,-32460(gp)
81109770:	e0ffdf04 	addi	r3,fp,-132
81109774:	180b883a 	mov	r5,r3
81109778:	1009883a 	mov	r4,r2
8110977c:	111197c0 	call	8111197c <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109780:	00800084 	movi	r2,2
81109784:	e0bfc815 	stw	r2,-224(fp)
								break;
81109788:	0001883a 	nop
						}
                        break;
8110978c:	00014906 	br	81109cb4 <vParserCommTask+0xa68>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109790:	00a04534 	movhi	r2,33044
81109794:	1082aa04 	addi	r2,r2,2728
81109798:	1080050b 	ldhu	r2,20(r2)
8110979c:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
811097a0:	e0bfc68b 	ldhu	r2,-230(fp)
811097a4:	10c000a0 	cmpeqi	r3,r2,2
811097a8:	1800161e 	bne	r3,zero,81109804 <vParserCommTask+0x5b8>
811097ac:	10c000e0 	cmpeqi	r3,r2,3
811097b0:	1800261e 	bne	r3,zero,8110984c <vParserCommTask+0x600>
811097b4:	10800060 	cmpeqi	r2,r2,1
811097b8:	10003626 	beq	r2,zero,81109894 <vParserCommTask+0x648>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811097bc:	e0bfdf04 	addi	r2,fp,-132
811097c0:	01802004 	movi	r6,128
811097c4:	000b883a 	mov	r5,zero
811097c8:	1009883a 	mov	r4,r2
811097cc:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
811097d0:	e0ffca0b 	ldhu	r3,-216(fp)
811097d4:	e0bfdf04 	addi	r2,fp,-132
811097d8:	180d883a 	mov	r6,r3
811097dc:	01604534 	movhi	r5,33044
811097e0:	2972bd04 	addi	r5,r5,-13580
811097e4:	1009883a 	mov	r4,r2
811097e8:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
811097ec:	d0a04d17 	ldw	r2,-32460(gp)
811097f0:	e0ffdf04 	addi	r3,fp,-132
811097f4:	180b883a 	mov	r5,r3
811097f8:	1009883a 	mov	r4,r2
811097fc:	111197c0 	call	8111197c <fprintf>
								#endif							


								break;
81109800:	00003c06 	br	811098f4 <vParserCommTask+0x6a8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109804:	e0bfdf04 	addi	r2,fp,-132
81109808:	01802004 	movi	r6,128
8110980c:	000b883a 	mov	r5,zero
81109810:	1009883a 	mov	r4,r2
81109814:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109818:	e0ffca0b 	ldhu	r3,-216(fp)
8110981c:	e0bfdf04 	addi	r2,fp,-132
81109820:	180d883a 	mov	r6,r3
81109824:	01604534 	movhi	r5,33044
81109828:	2972c904 	addi	r5,r5,-13532
8110982c:	1009883a 	mov	r4,r2
81109830:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109834:	d0a04d17 	ldw	r2,-32460(gp)
81109838:	e0ffdf04 	addi	r3,fp,-132
8110983c:	180b883a 	mov	r5,r3
81109840:	1009883a 	mov	r4,r2
81109844:	111197c0 	call	8111197c <fprintf>
								#endif


								break;
81109848:	00002a06 	br	811098f4 <vParserCommTask+0x6a8>
							case 3: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110984c:	e0bfdf04 	addi	r2,fp,-132
81109850:	01802004 	movi	r6,128
81109854:	000b883a 	mov	r5,zero
81109858:	1009883a 	mov	r4,r2
8110985c:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109860:	e0ffca0b 	ldhu	r3,-216(fp)
81109864:	e0bfdf04 	addi	r2,fp,-132
81109868:	180d883a 	mov	r6,r3
8110986c:	01604534 	movhi	r5,33044
81109870:	2972d504 	addi	r5,r5,-13484
81109874:	1009883a 	mov	r4,r2
81109878:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
8110987c:	d0a04d17 	ldw	r2,-32460(gp)
81109880:	e0ffdf04 	addi	r3,fp,-132
81109884:	180b883a 	mov	r5,r3
81109888:	1009883a 	mov	r4,r2
8110988c:	111197c0 	call	8111197c <fprintf>
								#endif


								break;
81109890:	00001806 	br	811098f4 <vParserCommTask+0x6a8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109894:	e0bfdf04 	addi	r2,fp,-132
81109898:	01802004 	movi	r6,128
8110989c:	000b883a 	mov	r5,zero
811098a0:	1009883a 	mov	r4,r2
811098a4:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
811098a8:	e13fc60b 	ldhu	r4,-232(fp)
811098ac:	e17fc68b 	ldhu	r5,-230(fp)
811098b0:	e0bfc70b 	ldhu	r2,-228(fp)
811098b4:	e0ffdf04 	addi	r3,fp,-132
811098b8:	d8800015 	stw	r2,0(sp)
811098bc:	280f883a 	mov	r7,r5
811098c0:	200d883a 	mov	r6,r4
811098c4:	01604534 	movhi	r5,33044
811098c8:	2972a104 	addi	r5,r5,-13692
811098cc:	1809883a 	mov	r4,r3
811098d0:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
811098d4:	d0a04d17 	ldw	r2,-32460(gp)
811098d8:	e0ffdf04 	addi	r3,fp,-132
811098dc:	180b883a 	mov	r5,r3
811098e0:	1009883a 	mov	r4,r2
811098e4:	111197c0 	call	8111197c <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
811098e8:	00800084 	movi	r2,2
811098ec:	e0bfc815 	stw	r2,-224(fp)
								break;
811098f0:	0001883a 	nop
						}
                        break;
811098f4:	0000ef06 	br	81109cb4 <vParserCommTask+0xa68>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
811098f8:	00a04534 	movhi	r2,33044
811098fc:	1082aa04 	addi	r2,r2,2728
81109900:	1080050b 	ldhu	r2,20(r2)
81109904:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
81109908:	e0bfc68b 	ldhu	r2,-230(fp)
8110990c:	10c000e0 	cmpeqi	r3,r2,3
81109910:	18000a1e 	bne	r3,zero,8110993c <vParserCommTask+0x6f0>
81109914:	10c00108 	cmpgei	r3,r2,4
81109918:	1800031e 	bne	r3,zero,81109928 <vParserCommTask+0x6dc>
8110991c:	108000a0 	cmpeqi	r2,r2,2
81109920:	10003c1e 	bne	r2,zero,81109a14 <vParserCommTask+0x7c8>
81109924:	0000c706 	br	81109c44 <vParserCommTask+0x9f8>
81109928:	10c00120 	cmpeqi	r3,r2,4
8110992c:	1800151e 	bne	r3,zero,81109984 <vParserCommTask+0x738>
81109930:	10800160 	cmpeqi	r2,r2,5
81109934:	1000251e 	bne	r2,zero,811099cc <vParserCommTask+0x780>
81109938:	0000c206 	br	81109c44 <vParserCommTask+0x9f8>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110993c:	e0bfdf04 	addi	r2,fp,-132
81109940:	01802004 	movi	r6,128
81109944:	000b883a 	mov	r5,zero
81109948:	1009883a 	mov	r4,r2
8110994c:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109950:	e0ffca0b 	ldhu	r3,-216(fp)
81109954:	e0bfdf04 	addi	r2,fp,-132
81109958:	180d883a 	mov	r6,r3
8110995c:	01604534 	movhi	r5,33044
81109960:	2972e204 	addi	r5,r5,-13432
81109964:	1009883a 	mov	r4,r2
81109968:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
8110996c:	d0a04d17 	ldw	r2,-32460(gp)
81109970:	e0ffdf04 	addi	r3,fp,-132
81109974:	180b883a 	mov	r5,r3
81109978:	1009883a 	mov	r4,r2
8110997c:	111197c0 	call	8111197c <fprintf>
								#endif


								break;
81109980:	0000c806 	br	81109ca4 <vParserCommTask+0xa58>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109984:	e0bfdf04 	addi	r2,fp,-132
81109988:	01802004 	movi	r6,128
8110998c:	000b883a 	mov	r5,zero
81109990:	1009883a 	mov	r4,r2
81109994:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109998:	e0ffca0b 	ldhu	r3,-216(fp)
8110999c:	e0bfdf04 	addi	r2,fp,-132
811099a0:	180d883a 	mov	r6,r3
811099a4:	01604534 	movhi	r5,33044
811099a8:	2972ef04 	addi	r5,r5,-13380
811099ac:	1009883a 	mov	r4,r2
811099b0:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
811099b4:	d0a04d17 	ldw	r2,-32460(gp)
811099b8:	e0ffdf04 	addi	r3,fp,-132
811099bc:	180b883a 	mov	r5,r3
811099c0:	1009883a 	mov	r4,r2
811099c4:	111197c0 	call	8111197c <fprintf>
								#endif


								break;
811099c8:	0000b606 	br	81109ca4 <vParserCommTask+0xa58>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099cc:	e0bfdf04 	addi	r2,fp,-132
811099d0:	01802004 	movi	r6,128
811099d4:	000b883a 	mov	r5,zero
811099d8:	1009883a 	mov	r4,r2
811099dc:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
811099e0:	e0ffca0b 	ldhu	r3,-216(fp)
811099e4:	e0bfdf04 	addi	r2,fp,-132
811099e8:	180d883a 	mov	r6,r3
811099ec:	01604534 	movhi	r5,33044
811099f0:	2972fc04 	addi	r5,r5,-13328
811099f4:	1009883a 	mov	r4,r2
811099f8:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
811099fc:	d0a04d17 	ldw	r2,-32460(gp)
81109a00:	e0ffdf04 	addi	r3,fp,-132
81109a04:	180b883a 	mov	r5,r3
81109a08:	1009883a 	mov	r4,r2
81109a0c:	111197c0 	call	8111197c <fprintf>
								#endif


								break;
81109a10:	0000a406 	br	81109ca4 <vParserCommTask+0xa58>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109a14:	e0bfdf04 	addi	r2,fp,-132
81109a18:	01802004 	movi	r6,128
81109a1c:	000b883a 	mov	r5,zero
81109a20:	1009883a 	mov	r4,r2
81109a24:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
81109a28:	e0bfdf04 	addi	r2,fp,-132
81109a2c:	00d4d7f4 	movhi	r3,21343
81109a30:	18d0d504 	addi	r3,r3,17236
81109a34:	10c00015 	stw	r3,0(r2)
81109a38:	00d7d374 	movhi	r3,24397
81109a3c:	18d050c4 	addi	r3,r3,16707
81109a40:	10c00115 	stw	r3,4(r2)
81109a44:	00d7d5f4 	movhi	r3,24407
81109a48:	18d414c4 	addi	r3,r3,20563
81109a4c:	10c00215 	stw	r3,8(r2)
81109a50:	00d41074 	movhi	r3,20545
81109a54:	18d35484 	addi	r3,r3,19794
81109a58:	10c00315 	stw	r3,12(r2)
81109a5c:	00d393f4 	movhi	r3,20047
81109a60:	18d0d7c4 	addi	r3,r3,17247
81109a64:	10c00415 	stw	r3,16(r2)
81109a68:	00d7d1f4 	movhi	r3,24391
81109a6c:	18d25184 	addi	r3,r3,18758
81109a70:	10c00515 	stw	r3,20(r2)
81109a74:	00d05134 	movhi	r3,16708
81109a78:	18d41544 	addi	r3,r3,20565
81109a7c:	10c00615 	stw	r3,24(r2)
81109a80:	00cf8b74 	movhi	r3,15917
81109a84:	18d15504 	addi	r3,r3,17748
81109a88:	10c00715 	stw	r3,28(r2)
81109a8c:	00c00284 	movi	r3,10
81109a90:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
81109a94:	d0a04d17 	ldw	r2,-32460(gp)
81109a98:	e0ffdf04 	addi	r3,fp,-132
81109a9c:	180b883a 	mov	r5,r3
81109aa0:	1009883a 	mov	r4,r2
81109aa4:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109aa8:	e0ffca0b 	ldhu	r3,-216(fp)
81109aac:	e0bfdf04 	addi	r2,fp,-132
81109ab0:	180d883a 	mov	r6,r3
81109ab4:	01604534 	movhi	r5,33044
81109ab8:	29730804 	addi	r5,r5,-13280
81109abc:	1009883a 	mov	r4,r2
81109ac0:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109ac4:	d0a04d17 	ldw	r2,-32460(gp)
81109ac8:	e0ffdf04 	addi	r3,fp,-132
81109acc:	180b883a 	mov	r5,r3
81109ad0:	1009883a 	mov	r4,r2
81109ad4:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
81109ad8:	00a04534 	movhi	r2,33044
81109adc:	1082aa04 	addi	r2,r2,2728
81109ae0:	1080058b 	ldhu	r2,22(r2)
81109ae4:	10ffffcc 	andi	r3,r2,65535
81109ae8:	e0bfdf04 	addi	r2,fp,-132
81109aec:	180d883a 	mov	r6,r3
81109af0:	01604534 	movhi	r5,33044
81109af4:	29730f04 	addi	r5,r5,-13252
81109af8:	1009883a 	mov	r4,r2
81109afc:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109b00:	d0a04d17 	ldw	r2,-32460(gp)
81109b04:	e0ffdf04 	addi	r3,fp,-132
81109b08:	180b883a 	mov	r5,r3
81109b0c:	1009883a 	mov	r4,r2
81109b10:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
81109b14:	00a04534 	movhi	r2,33044
81109b18:	1082aa04 	addi	r2,r2,2728
81109b1c:	1080060b 	ldhu	r2,24(r2)
81109b20:	10ffffcc 	andi	r3,r2,65535
81109b24:	e0bfdf04 	addi	r2,fp,-132
81109b28:	180d883a 	mov	r6,r3
81109b2c:	01604534 	movhi	r5,33044
81109b30:	29731304 	addi	r5,r5,-13236
81109b34:	1009883a 	mov	r4,r2
81109b38:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109b3c:	d0a04d17 	ldw	r2,-32460(gp)
81109b40:	e0ffdf04 	addi	r3,fp,-132
81109b44:	180b883a 	mov	r5,r3
81109b48:	1009883a 	mov	r4,r2
81109b4c:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
81109b50:	00a04534 	movhi	r2,33044
81109b54:	1082aa04 	addi	r2,r2,2728
81109b58:	1080068b 	ldhu	r2,26(r2)
81109b5c:	10ffffcc 	andi	r3,r2,65535
81109b60:	e0bfdf04 	addi	r2,fp,-132
81109b64:	180d883a 	mov	r6,r3
81109b68:	01604534 	movhi	r5,33044
81109b6c:	29731804 	addi	r5,r5,-13216
81109b70:	1009883a 	mov	r4,r2
81109b74:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109b78:	d0a04d17 	ldw	r2,-32460(gp)
81109b7c:	e0ffdf04 	addi	r3,fp,-132
81109b80:	180b883a 	mov	r5,r3
81109b84:	1009883a 	mov	r4,r2
81109b88:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
81109b8c:	00a04534 	movhi	r2,33044
81109b90:	1082aa04 	addi	r2,r2,2728
81109b94:	1080070b 	ldhu	r2,28(r2)
81109b98:	10ffffcc 	andi	r3,r2,65535
81109b9c:	e0bfdf04 	addi	r2,fp,-132
81109ba0:	180d883a 	mov	r6,r3
81109ba4:	01604534 	movhi	r5,33044
81109ba8:	29731f04 	addi	r5,r5,-13188
81109bac:	1009883a 	mov	r4,r2
81109bb0:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109bb4:	d0a04d17 	ldw	r2,-32460(gp)
81109bb8:	e0ffdf04 	addi	r3,fp,-132
81109bbc:	180b883a 	mov	r5,r3
81109bc0:	1009883a 	mov	r4,r2
81109bc4:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
81109bc8:	00a04534 	movhi	r2,33044
81109bcc:	1082aa04 	addi	r2,r2,2728
81109bd0:	1080078b 	ldhu	r2,30(r2)
81109bd4:	10ffffcc 	andi	r3,r2,65535
81109bd8:	e0bfdf04 	addi	r2,fp,-132
81109bdc:	180d883a 	mov	r6,r3
81109be0:	01604534 	movhi	r5,33044
81109be4:	29732604 	addi	r5,r5,-13160
81109be8:	1009883a 	mov	r4,r2
81109bec:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109bf0:	d0a04d17 	ldw	r2,-32460(gp)
81109bf4:	e0ffdf04 	addi	r3,fp,-132
81109bf8:	180b883a 	mov	r5,r3
81109bfc:	1009883a 	mov	r4,r2
81109c00:	111197c0 	call	8111197c <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
81109c04:	00a04534 	movhi	r2,33044
81109c08:	1082aa04 	addi	r2,r2,2728
81109c0c:	1080080b 	ldhu	r2,32(r2)
81109c10:	10ffffcc 	andi	r3,r2,65535
81109c14:	e0bfdf04 	addi	r2,fp,-132
81109c18:	180d883a 	mov	r6,r3
81109c1c:	01604534 	movhi	r5,33044
81109c20:	29732c04 	addi	r5,r5,-13136
81109c24:	1009883a 	mov	r4,r2
81109c28:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109c2c:	d0a04d17 	ldw	r2,-32460(gp)
81109c30:	e0ffdf04 	addi	r3,fp,-132
81109c34:	180b883a 	mov	r5,r3
81109c38:	1009883a 	mov	r4,r2
81109c3c:	111197c0 	call	8111197c <fprintf>
								#endif



								break;
81109c40:	00001806 	br	81109ca4 <vParserCommTask+0xa58>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109c44:	e0bfdf04 	addi	r2,fp,-132
81109c48:	01802004 	movi	r6,128
81109c4c:	000b883a 	mov	r5,zero
81109c50:	1009883a 	mov	r4,r2
81109c54:	1112acc0 	call	81112acc <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109c58:	e13fc60b 	ldhu	r4,-232(fp)
81109c5c:	e17fc68b 	ldhu	r5,-230(fp)
81109c60:	e0bfc70b 	ldhu	r2,-228(fp)
81109c64:	e0ffdf04 	addi	r3,fp,-132
81109c68:	d8800015 	stw	r2,0(sp)
81109c6c:	280f883a 	mov	r7,r5
81109c70:	200d883a 	mov	r6,r4
81109c74:	01604534 	movhi	r5,33044
81109c78:	2972a104 	addi	r5,r5,-13692
81109c7c:	1809883a 	mov	r4,r3
81109c80:	11130e40 	call	811130e4 <sprintf>
									debug(fp, cPUSDebug );
81109c84:	d0a04d17 	ldw	r2,-32460(gp)
81109c88:	e0ffdf04 	addi	r3,fp,-132
81109c8c:	180b883a 	mov	r5,r3
81109c90:	1009883a 	mov	r4,r2
81109c94:	111197c0 	call	8111197c <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109c98:	00800084 	movi	r2,2
81109c9c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109ca0:	0001883a 	nop
						}
                        break;
81109ca4:	00000306 	br	81109cb4 <vParserCommTask+0xa68>
                    default:
						eParserMode = sWaitingMessage;
81109ca8:	00800084 	movi	r2,2
81109cac:	e0bfc815 	stw	r2,-224(fp)
                        break;
81109cb0:	0001883a 	nop
                }
				break;				
81109cb4:	00000406 	br	81109cc8 <vParserCommTask+0xa7c>
			default:
				eParserMode = sWaitingMessage;
81109cb8:	00800084 	movi	r2,2
81109cbc:	e0bfc815 	stw	r2,-224(fp)
				break;
81109cc0:	00000106 	br	81109cc8 <vParserCommTask+0xa7c>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109cc4:	0001883a 	nop
				break;				
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
81109cc8:	003d7006 	br	8110928c <__reset+0xfb0e928c>

81109ccc <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109ccc:	defffb04 	addi	sp,sp,-20
81109cd0:	de00012e 	bgeu	sp,et,81109cd8 <getPreParsedPacket+0xc>
81109cd4:	003b68fa 	trap	3
81109cd8:	dfc00415 	stw	ra,16(sp)
81109cdc:	df000315 	stw	fp,12(sp)
81109ce0:	df000304 	addi	fp,sp,12
81109ce4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109ce8:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
81109cec:	d0a05417 	ldw	r2,-32432(gp)
81109cf0:	e0fffe44 	addi	r3,fp,-7
81109cf4:	180d883a 	mov	r6,r3
81109cf8:	000b883a 	mov	r5,zero
81109cfc:	1009883a 	mov	r4,r2
81109d00:	112ccb40 	call	8112ccb4 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
81109d04:	e0bffe43 	ldbu	r2,-7(fp)
81109d08:	10803fcc 	andi	r2,r2,255
81109d0c:	10002e1e 	bne	r2,zero,81109dc8 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109d10:	e03ffe05 	stb	zero,-8(fp)
81109d14:	00002506 	br	81109dac <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
81109d18:	e0fffe03 	ldbu	r3,-8(fp)
81109d1c:	00a04574 	movhi	r2,33045
81109d20:	10be0e04 	addi	r2,r2,-1992
81109d24:	18c01324 	muli	r3,r3,76
81109d28:	10c5883a 	add	r2,r2,r3
81109d2c:	10800104 	addi	r2,r2,4
81109d30:	10800003 	ldbu	r2,0(r2)
81109d34:	10803fcc 	andi	r2,r2,255
81109d38:	1080201c 	xori	r2,r2,128
81109d3c:	10bfe004 	addi	r2,r2,-128
81109d40:	10001726 	beq	r2,zero,81109da0 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109d44:	e0fffe03 	ldbu	r3,-8(fp)
81109d48:	e13fff17 	ldw	r4,-4(fp)
81109d4c:	00a04574 	movhi	r2,33045
81109d50:	10be0e04 	addi	r2,r2,-1992
81109d54:	18c01324 	muli	r3,r3,76
81109d58:	10c5883a 	add	r2,r2,r3
81109d5c:	2007883a 	mov	r3,r4
81109d60:	1009883a 	mov	r4,r2
81109d64:	00801304 	movi	r2,76
81109d68:	100d883a 	mov	r6,r2
81109d6c:	200b883a 	mov	r5,r4
81109d70:	1809883a 	mov	r4,r3
81109d74:	111297c0 	call	8111297c <memcpy>
                bSuccess = TRUE;
81109d78:	00800044 	movi	r2,1
81109d7c:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81109d80:	e0fffe03 	ldbu	r3,-8(fp)
81109d84:	00a04574 	movhi	r2,33045
81109d88:	10be0e04 	addi	r2,r2,-1992
81109d8c:	18c01324 	muli	r3,r3,76
81109d90:	10c5883a 	add	r2,r2,r3
81109d94:	10800104 	addi	r2,r2,4
81109d98:	10000005 	stb	zero,0(r2)
                break;
81109d9c:	00000606 	br	81109db8 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109da0:	e0bffe03 	ldbu	r2,-8(fp)
81109da4:	10800044 	addi	r2,r2,1
81109da8:	e0bffe05 	stb	r2,-8(fp)
81109dac:	e0bffe03 	ldbu	r2,-8(fp)
81109db0:	10800130 	cmpltui	r2,r2,4
81109db4:	103fd81e 	bne	r2,zero,81109d18 <__reset+0xfb0e9d18>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
81109db8:	d0a05417 	ldw	r2,-32432(gp)
81109dbc:	1009883a 	mov	r4,r2
81109dc0:	112d2580 	call	8112d258 <OSMutexPost>
81109dc4:	00000106 	br	81109dcc <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
81109dc8:	110e6fc0 	call	8110e6fc <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81109dcc:	e0bffd17 	ldw	r2,-12(fp)
}
81109dd0:	e037883a 	mov	sp,fp
81109dd4:	dfc00117 	ldw	ra,4(sp)
81109dd8:	df000017 	ldw	fp,0(sp)
81109ddc:	dec00204 	addi	sp,sp,8
81109de0:	f800283a 	ret

81109de4 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
81109de4:	defffc04 	addi	sp,sp,-16
81109de8:	de00012e 	bgeu	sp,et,81109df0 <bTrySendSemaphoreCommInit+0xc>
81109dec:	003b68fa 	trap	3
81109df0:	dfc00315 	stw	ra,12(sp)
81109df4:	df000215 	stw	fp,8(sp)
81109df8:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
81109dfc:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
81109e00:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
81109e04:	d0a04d17 	ldw	r2,-32460(gp)
81109e08:	100f883a 	mov	r7,r2
81109e0c:	01800e84 	movi	r6,58
81109e10:	01400044 	movi	r5,1
81109e14:	01204534 	movhi	r4,33044
81109e18:	21333204 	addi	r4,r4,-13112
81109e1c:	1111f680 	call	81111f68 <fwrite>
	#endif

	ucCountRetries = 0;
81109e20:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
81109e24:	e0bfff03 	ldbu	r2,-4(fp)
81109e28:	10800044 	addi	r2,r2,1
81109e2c:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
81109e30:	01000c84 	movi	r4,50
81109e34:	1130b4c0 	call	81130b4c <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
81109e38:	d0a04b17 	ldw	r2,-32468(gp)
81109e3c:	1009883a 	mov	r4,r2
81109e40:	112f0480 	call	8112f048 <OSSemPost>
81109e44:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
81109e48:	e0bfff43 	ldbu	r2,-3(fp)
81109e4c:	10000326 	beq	r2,zero,81109e5c <bTrySendSemaphoreCommInit+0x78>
81109e50:	e0bfff03 	ldbu	r2,-4(fp)
81109e54:	108002f0 	cmpltui	r2,r2,11
81109e58:	103ff21e 	bne	r2,zero,81109e24 <__reset+0xfb0e9e24>

	if ( error_code == OS_ERR_NONE ) {
81109e5c:	e0bfff43 	ldbu	r2,-3(fp)
81109e60:	1000021e 	bne	r2,zero,81109e6c <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81109e64:	00800044 	movi	r2,1
81109e68:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81109e6c:	e0bffe17 	ldw	r2,-8(fp)
}
81109e70:	e037883a 	mov	sp,fp
81109e74:	dfc00117 	ldw	ra,4(sp)
81109e78:	df000017 	ldw	fp,0(sp)
81109e7c:	dec00204 	addi	sp,sp,8
81109e80:	f800283a 	ret

81109e84 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81109e84:	deffeb04 	addi	sp,sp,-84
81109e88:	de00012e 	bgeu	sp,et,81109e90 <vReceiverUartTask+0xc>
81109e8c:	003b68fa 	trap	3
81109e90:	dfc01415 	stw	ra,80(sp)
81109e94:	df001315 	stw	fp,76(sp)
81109e98:	df001304 	addi	fp,sp,76
81109e9c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109ea0:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81109ea4:	d0a04d17 	ldw	r2,-32460(gp)
81109ea8:	100f883a 	mov	r7,r2
81109eac:	018006c4 	movi	r6,27
81109eb0:	01400044 	movi	r5,1
81109eb4:	01204534 	movhi	r4,33044
81109eb8:	21334104 	addi	r4,r4,-13052
81109ebc:	1111f680 	call	81111f68 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81109ec0:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81109ec4:	e0bfed17 	ldw	r2,-76(fp)
81109ec8:	10c00060 	cmpeqi	r3,r2,1
81109ecc:	1800091e 	bne	r3,zero,81109ef4 <vReceiverUartTask+0x70>
81109ed0:	0080052e 	bgeu	zero,r2,81109ee8 <vReceiverUartTask+0x64>
81109ed4:	10c000a0 	cmpeqi	r3,r2,2
81109ed8:	1800451e 	bne	r3,zero,81109ff0 <vReceiverUartTask+0x16c>
81109edc:	108000e0 	cmpeqi	r2,r2,3
81109ee0:	1000561e 	bne	r2,zero,8110a03c <vReceiverUartTask+0x1b8>
81109ee4:	00005f06 	br	8110a064 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
81109ee8:	00800044 	movi	r2,1
81109eec:	e0bfed15 	stw	r2,-76(fp)
                break;
81109ef0:	00005f06 	br	8110a070 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81109ef4:	e0bfef04 	addi	r2,fp,-68
81109ef8:	01801004 	movi	r6,64
81109efc:	000b883a 	mov	r5,zero
81109f00:	1009883a 	mov	r4,r2
81109f04:	1112acc0 	call	81112acc <memset>
                scanf("%s", cReceiveBuffer);
81109f08:	e0bfef04 	addi	r2,fp,-68
81109f0c:	100b883a 	mov	r5,r2
81109f10:	01204534 	movhi	r4,33044
81109f14:	21334804 	addi	r4,r4,-13024
81109f18:	11130080 	call	81113008 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
81109f1c:	e0bfef04 	addi	r2,fp,-68
81109f20:	01604534 	movhi	r5,33044
81109f24:	2942bd04 	addi	r5,r5,2804
81109f28:	1009883a 	mov	r4,r2
81109f2c:	110a0740 	call	8110a074 <bPreParser>
81109f30:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
81109f34:	e0bfee17 	ldw	r2,-72(fp)
81109f38:	10800058 	cmpnei	r2,r2,1
81109f3c:	1000161e 	bne	r2,zero,81109f98 <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
81109f40:	00a04534 	movhi	r2,33044
81109f44:	1082bd04 	addi	r2,r2,2804
81109f48:	10800103 	ldbu	r2,4(r2)
81109f4c:	10803fcc 	andi	r2,r2,255
81109f50:	1080201c 	xori	r2,r2,128
81109f54:	10bfe004 	addi	r2,r2,-128
81109f58:	10800fe0 	cmpeqi	r2,r2,63
81109f5c:	1000081e 	bne	r2,zero,81109f80 <vReceiverUartTask+0xfc>
81109f60:	00a04534 	movhi	r2,33044
81109f64:	1082bd04 	addi	r2,r2,2804
81109f68:	10800103 	ldbu	r2,4(r2)
81109f6c:	10803fcc 	andi	r2,r2,255
81109f70:	1080201c 	xori	r2,r2,128
81109f74:	10bfe004 	addi	r2,r2,-128
81109f78:	10800858 	cmpnei	r2,r2,33
81109f7c:	1000031e 	bne	r2,zero,81109f8c <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81109f80:	00800084 	movi	r2,2
81109f84:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f88:	00003906 	br	8110a070 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81109f8c:	008000c4 	movi	r2,3
81109f90:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f94:	00003606 	br	8110a070 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
81109f98:	00a04534 	movhi	r2,33044
81109f9c:	1082bd04 	addi	r2,r2,2804
81109fa0:	00c008c4 	movi	r3,35
81109fa4:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
81109fa8:	00a04534 	movhi	r2,33044
81109fac:	1082bd04 	addi	r2,r2,2804
81109fb0:	00c00a44 	movi	r3,41
81109fb4:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
81109fb8:	00a04534 	movhi	r2,33044
81109fbc:	1082bd04 	addi	r2,r2,2804
81109fc0:	00c00044 	movi	r3,1
81109fc4:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109fc8:	01204534 	movhi	r4,33044
81109fcc:	2102bd04 	addi	r4,r4,2804
81109fd0:	110a5e80 	call	8110a5e8 <setPreAckSenderFreePos>
81109fd4:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81109fd8:	e0bfee17 	ldw	r2,-72(fp)
81109fdc:	1000011e 	bne	r2,zero,81109fe4 <vReceiverUartTask+0x160>
                        vFailSendNack();
81109fe0:	110e8340 	call	8110e834 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
81109fe4:	00800044 	movi	r2,1
81109fe8:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
81109fec:	00002006 	br	8110a070 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109ff0:	01204534 	movhi	r4,33044
81109ff4:	2102bd04 	addi	r4,r4,2804
81109ff8:	110a5e80 	call	8110a5e8 <setPreAckSenderFreePos>
81109ffc:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
8110a000:	e0bfee17 	ldw	r2,-72(fp)
8110a004:	10800058 	cmpnei	r2,r2,1
8110a008:	1000081e 	bne	r2,zero,8110a02c <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
8110a00c:	01204534 	movhi	r4,33044
8110a010:	2102bd04 	addi	r4,r4,2804
8110a014:	110a4840 	call	8110a484 <setPreParsedFreePos>
8110a018:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
8110a01c:	e0bfee17 	ldw	r2,-72(fp)
8110a020:	1000031e 	bne	r2,zero,8110a030 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110a024:	110e9040 	call	8110e904 <vFailSetPreParsedBuffer>
8110a028:	00000106 	br	8110a030 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110a02c:	110e89c0 	call	8110e89c <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110a030:	00800044 	movi	r2,1
8110a034:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a038:	00000d06 	br	8110a070 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110a03c:	01204534 	movhi	r4,33044
8110a040:	2102bd04 	addi	r4,r4,2804
8110a044:	110a7900 	call	8110a790 <setPreAckReceiverFreePos>
8110a048:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
8110a04c:	e0bfee17 	ldw	r2,-72(fp)
8110a050:	1000011e 	bne	r2,zero,8110a058 <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110a054:	110e96c0 	call	8110e96c <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110a058:	00800044 	movi	r2,1
8110a05c:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a060:	00000306 	br	8110a070 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
8110a064:	00800044 	movi	r2,1
8110a068:	e0bfed15 	stw	r2,-76(fp)
                break;
8110a06c:	0001883a 	nop
        }

    }
8110a070:	003f9406 	br	81109ec4 <__reset+0xfb0e9ec4>

8110a074 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110a074:	defff204 	addi	sp,sp,-56
8110a078:	de00012e 	bgeu	sp,et,8110a080 <bPreParser+0xc>
8110a07c:	003b68fa 	trap	3
8110a080:	dfc00d15 	stw	ra,52(sp)
8110a084:	df000c15 	stw	fp,48(sp)
8110a088:	dc000b15 	stw	r16,44(sp)
8110a08c:	df000c04 	addi	fp,sp,48
8110a090:	e13ffd15 	stw	r4,-12(fp)
8110a094:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110a098:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
8110a09c:	e13ffd17 	ldw	r4,-12(fp)
8110a0a0:	11132f80 	call	811132f8 <strlen>
8110a0a4:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110a0a8:	01400ec4 	movi	r5,59
8110a0ac:	e13ffd17 	ldw	r4,-12(fp)
8110a0b0:	110cc880 	call	8110cc88 <siPosStr>
8110a0b4:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
8110a0b8:	01401004 	movi	r5,64
8110a0bc:	e13ffd17 	ldw	r4,-12(fp)
8110a0c0:	110cc880 	call	8110cc88 <siPosStr>
8110a0c4:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
8110a0c8:	014008c4 	movi	r5,35
8110a0cc:	e13ffd17 	ldw	r4,-12(fp)
8110a0d0:	110cc880 	call	8110cc88 <siPosStr>
8110a0d4:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
8110a0d8:	e17ff80b 	ldhu	r5,-32(fp)
8110a0dc:	e0bff88b 	ldhu	r2,-30(fp)
8110a0e0:	10ffffcc 	andi	r3,r2,65535
8110a0e4:	18e0001c 	xori	r3,r3,32768
8110a0e8:	18e00004 	addi	r3,r3,-32768
8110a0ec:	293fffcc 	andi	r4,r5,65535
8110a0f0:	2120001c 	xori	r4,r4,32768
8110a0f4:	21200004 	addi	r4,r4,-32768
8110a0f8:	20c0010e 	bge	r4,r3,8110a100 <bPreParser+0x8c>
8110a0fc:	2805883a 	mov	r2,r5
8110a100:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
8110a104:	01400fc4 	movi	r5,63
8110a108:	e13ffd17 	ldw	r4,-12(fp)
8110a10c:	110cc880 	call	8110cc88 <siPosStr>
8110a110:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
8110a114:	01400844 	movi	r5,33
8110a118:	e13ffd17 	ldw	r4,-12(fp)
8110a11c:	110cc880 	call	8110cc88 <siPosStr>
8110a120:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
8110a124:	e17ff90b 	ldhu	r5,-28(fp)
8110a128:	e0bff98b 	ldhu	r2,-26(fp)
8110a12c:	10ffffcc 	andi	r3,r2,65535
8110a130:	18e0001c 	xori	r3,r3,32768
8110a134:	18e00004 	addi	r3,r3,-32768
8110a138:	293fffcc 	andi	r4,r5,65535
8110a13c:	2120001c 	xori	r4,r4,32768
8110a140:	21200004 	addi	r4,r4,-32768
8110a144:	20c0010e 	bge	r4,r3,8110a14c <bPreParser+0xd8>
8110a148:	2805883a 	mov	r2,r5
8110a14c:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
8110a150:	e17ff90b 	ldhu	r5,-28(fp)
8110a154:	e0bff80b 	ldhu	r2,-32(fp)
8110a158:	10ffffcc 	andi	r3,r2,65535
8110a15c:	18e0001c 	xori	r3,r3,32768
8110a160:	18e00004 	addi	r3,r3,-32768
8110a164:	293fffcc 	andi	r4,r5,65535
8110a168:	2120001c 	xori	r4,r4,32768
8110a16c:	21200004 	addi	r4,r4,-32768
8110a170:	20c0010e 	bge	r4,r3,8110a178 <bPreParser+0x104>
8110a174:	2805883a 	mov	r2,r5
8110a178:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110a17c:	01401f04 	movi	r5,124
8110a180:	e13ffd17 	ldw	r4,-12(fp)
8110a184:	110cc880 	call	8110cc88 <siPosStr>
8110a188:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
8110a18c:	e0fff78f 	ldh	r3,-34(fp)
8110a190:	e0bff70f 	ldh	r2,-36(fp)
8110a194:	10bfffc4 	addi	r2,r2,-1
8110a198:	1880ac1e 	bne	r3,r2,8110a44c <bPreParser+0x3d8>
8110a19c:	e0fffa0f 	ldh	r3,-24(fp)
8110a1a0:	e0bff78f 	ldh	r2,-34(fp)
8110a1a4:	1880a90e 	bge	r3,r2,8110a44c <bPreParser+0x3d8>
8110a1a8:	e0fff90f 	ldh	r3,-28(fp)
8110a1ac:	e0bffa0f 	ldh	r2,-24(fp)
8110a1b0:	1880a60e 	bge	r3,r2,8110a44c <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
8110a1b4:	e0bff90f 	ldh	r2,-28(fp)
8110a1b8:	e0fffd17 	ldw	r3,-12(fp)
8110a1bc:	1889883a 	add	r4,r3,r2
8110a1c0:	e0fffa0f 	ldh	r3,-24(fp)
8110a1c4:	e0bff90f 	ldh	r2,-28(fp)
8110a1c8:	1885c83a 	sub	r2,r3,r2
8110a1cc:	100b883a 	mov	r5,r2
8110a1d0:	110de600 	call	8110de60 <ucCrc8wInit>
8110a1d4:	1007883a 	mov	r3,r2
8110a1d8:	e0bffe17 	ldw	r2,-8(fp)
8110a1dc:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
8110a1e0:	e0bff90f 	ldh	r2,-28(fp)
8110a1e4:	e0fffd17 	ldw	r3,-12(fp)
8110a1e8:	1885883a 	add	r2,r3,r2
8110a1ec:	10c00003 	ldbu	r3,0(r2)
8110a1f0:	e0bffe17 	ldw	r2,-8(fp)
8110a1f4:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a1f8:	e0bffe17 	ldw	r2,-8(fp)
8110a1fc:	10800103 	ldbu	r2,4(r2)
8110a200:	10803fcc 	andi	r2,r2,255
8110a204:	1080201c 	xori	r2,r2,128
8110a208:	10bfe004 	addi	r2,r2,-128
8110a20c:	108008d8 	cmpnei	r2,r2,35
8110a210:	1000091e 	bne	r2,zero,8110a238 <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
8110a214:	e0bffe17 	ldw	r2,-8(fp)
8110a218:	00c00d84 	movi	r3,54
8110a21c:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
8110a220:	e0bffe17 	ldw	r2,-8(fp)
8110a224:	00c00d84 	movi	r3,54
8110a228:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
8110a22c:	00800044 	movi	r2,1
8110a230:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a234:	00008606 	br	8110a450 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
8110a238:	e0bff90f 	ldh	r2,-28(fp)
8110a23c:	10800044 	addi	r2,r2,1
8110a240:	e0fffd17 	ldw	r3,-12(fp)
8110a244:	1885883a 	add	r2,r3,r2
8110a248:	10c00003 	ldbu	r3,0(r2)
8110a24c:	e0bffe17 	ldw	r2,-8(fp)
8110a250:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
8110a254:	e0bffe17 	ldw	r2,-8(fp)
8110a258:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
8110a25c:	e0bffe17 	ldw	r2,-8(fp)
8110a260:	10800204 	addi	r2,r2,8
8110a264:	01800804 	movi	r6,32
8110a268:	000b883a 	mov	r5,zero
8110a26c:	1009883a 	mov	r4,r2
8110a270:	1112acc0 	call	81112acc <memset>

            i = siIniReq + 3; /* "?C:i..." */
8110a274:	e0bff90b 	ldhu	r2,-28(fp)
8110a278:	108000c4 	addi	r2,r2,3
8110a27c:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
8110a280:	e0bffac4 	addi	r2,fp,-21
8110a284:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110a288:	e0bffac4 	addi	r2,fp,-21
8110a28c:	01800184 	movi	r6,6
8110a290:	000b883a 	mov	r5,zero
8110a294:	1009883a 	mov	r4,r2
8110a298:	1112acc0 	call	81112acc <memset>
                do {
                    c = buffer[i];
8110a29c:	e0bff503 	ldbu	r2,-44(fp)
8110a2a0:	e0fffd17 	ldw	r3,-12(fp)
8110a2a4:	1885883a 	add	r2,r3,r2
8110a2a8:	10800003 	ldbu	r2,0(r2)
8110a2ac:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
8110a2b0:	d0e00317 	ldw	r3,-32756(gp)
8110a2b4:	e0bffa87 	ldb	r2,-22(fp)
8110a2b8:	10800044 	addi	r2,r2,1
8110a2bc:	1885883a 	add	r2,r3,r2
8110a2c0:	10800003 	ldbu	r2,0(r2)
8110a2c4:	10803fcc 	andi	r2,r2,255
8110a2c8:	1080010c 	andi	r2,r2,4
8110a2cc:	10000626 	beq	r2,zero,8110a2e8 <bPreParser+0x274>
                        (*p_inteiro) = c;
8110a2d0:	e0bff617 	ldw	r2,-40(fp)
8110a2d4:	e0fffa83 	ldbu	r3,-22(fp)
8110a2d8:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
8110a2dc:	e0bff617 	ldw	r2,-40(fp)
8110a2e0:	10800044 	addi	r2,r2,1
8110a2e4:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
8110a2e8:	e0bff503 	ldbu	r2,-44(fp)
8110a2ec:	10800044 	addi	r2,r2,1
8110a2f0:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110a2f4:	e0bff70f 	ldh	r2,-36(fp)
8110a2f8:	e0fff503 	ldbu	r3,-44(fp)
8110a2fc:	1880090e 	bge	r3,r2,8110a324 <bPreParser+0x2b0>
8110a300:	e0bffa87 	ldb	r2,-22(fp)
8110a304:	10800ea0 	cmpeqi	r2,r2,58
8110a308:	1000061e 	bne	r2,zero,8110a324 <bPreParser+0x2b0>
8110a30c:	e0bffa87 	ldb	r2,-22(fp)
8110a310:	10800ee0 	cmpeqi	r2,r2,59
8110a314:	1000031e 	bne	r2,zero,8110a324 <bPreParser+0x2b0>
8110a318:	e0bffa87 	ldb	r2,-22(fp)
8110a31c:	10801f18 	cmpnei	r2,r2,124
8110a320:	103fde1e 	bne	r2,zero,8110a29c <__reset+0xfb0ea29c>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a324:	e0bff617 	ldw	r2,-40(fp)
8110a328:	00c00284 	movi	r3,10
8110a32c:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110a330:	e0bffa87 	ldb	r2,-22(fp)
8110a334:	10800ea0 	cmpeqi	r2,r2,58
8110a338:	1000031e 	bne	r2,zero,8110a348 <bPreParser+0x2d4>
8110a33c:	e0bffa87 	ldb	r2,-22(fp)
8110a340:	10801f18 	cmpnei	r2,r2,124
8110a344:	10001a1e 	bne	r2,zero,8110a3b0 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110a348:	e0bffe17 	ldw	r2,-8(fp)
8110a34c:	10800183 	ldbu	r2,6(r2)
8110a350:	10803fcc 	andi	r2,r2,255
8110a354:	10800828 	cmpgeui	r2,r2,32
8110a358:	1000041e 	bne	r2,zero,8110a36c <bPreParser+0x2f8>
8110a35c:	e0bffe17 	ldw	r2,-8(fp)
8110a360:	10800183 	ldbu	r2,6(r2)
8110a364:	14003fcc 	andi	r16,r2,255
8110a368:	00000106 	br	8110a370 <bPreParser+0x2fc>
8110a36c:	04000804 	movi	r16,32
8110a370:	e0bffac4 	addi	r2,fp,-21
8110a374:	1009883a 	mov	r4,r2
8110a378:	11118200 	call	81111820 <atoi>
8110a37c:	1009883a 	mov	r4,r2
8110a380:	e0fffe17 	ldw	r3,-8(fp)
8110a384:	80800104 	addi	r2,r16,4
8110a388:	1085883a 	add	r2,r2,r2
8110a38c:	1885883a 	add	r2,r3,r2
8110a390:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
8110a394:	e0bffe17 	ldw	r2,-8(fp)
8110a398:	10800183 	ldbu	r2,6(r2)
8110a39c:	10800044 	addi	r2,r2,1
8110a3a0:	1007883a 	mov	r3,r2
8110a3a4:	e0bffe17 	ldw	r2,-8(fp)
8110a3a8:	10c00185 	stb	r3,6(r2)
8110a3ac:	00000906 	br	8110a3d4 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
8110a3b0:	e0bffa87 	ldb	r2,-22(fp)
8110a3b4:	10800ed8 	cmpnei	r2,r2,59
8110a3b8:	1000061e 	bne	r2,zero,8110a3d4 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110a3bc:	e0bffac4 	addi	r2,fp,-21
8110a3c0:	1009883a 	mov	r4,r2
8110a3c4:	11118200 	call	81111820 <atoi>
8110a3c8:	1007883a 	mov	r3,r2
8110a3cc:	e0bffe17 	ldw	r2,-8(fp)
8110a3d0:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110a3d4:	e0bffa87 	ldb	r2,-22(fp)
8110a3d8:	10800ee0 	cmpeqi	r2,r2,59
8110a3dc:	1000031e 	bne	r2,zero,8110a3ec <bPreParser+0x378>
8110a3e0:	e0bff70f 	ldh	r2,-36(fp)
8110a3e4:	e0fff503 	ldbu	r3,-44(fp)
8110a3e8:	18bfa516 	blt	r3,r2,8110a280 <__reset+0xfb0ea280>

            if ( c == FINAL_CHAR )
8110a3ec:	e0bffa87 	ldb	r2,-22(fp)
8110a3f0:	10800ed8 	cmpnei	r2,r2,59
8110a3f4:	1000131e 	bne	r2,zero,8110a444 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110a3f8:	e0bffe17 	ldw	r2,-8(fp)
8110a3fc:	10c01243 	ldbu	r3,73(r2)
8110a400:	e0bffe17 	ldw	r2,-8(fp)
8110a404:	10801203 	ldbu	r2,72(r2)
8110a408:	18c03fcc 	andi	r3,r3,255
8110a40c:	10803fcc 	andi	r2,r2,255
8110a410:	1880031e 	bne	r3,r2,8110a420 <bPreParser+0x3ac>
                    bSuccess = TRUE;
8110a414:	00800044 	movi	r2,1
8110a418:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a41c:	00000c06 	br	8110a450 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
8110a420:	d0a04d17 	ldw	r2,-32460(gp)
8110a424:	100f883a 	mov	r7,r2
8110a428:	018005c4 	movi	r6,23
8110a42c:	01400044 	movi	r5,1
8110a430:	01204534 	movhi	r4,33044
8110a434:	21334904 	addi	r4,r4,-13020
8110a438:	1111f680 	call	81111f68 <fwrite>
                    #endif
                    bSuccess = FALSE;
8110a43c:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a440:	00000306 	br	8110a450 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
8110a444:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a448:	00000106 	br	8110a450 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
8110a44c:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
8110a450:	e13ffd17 	ldw	r4,-12(fp)
8110a454:	11132f80 	call	811132f8 <strlen>
8110a458:	100d883a 	mov	r6,r2
8110a45c:	000b883a 	mov	r5,zero
8110a460:	e13ffd17 	ldw	r4,-12(fp)
8110a464:	1112acc0 	call	81112acc <memset>

    return bSuccess;
8110a468:	e0bff417 	ldw	r2,-48(fp)
}
8110a46c:	e6ffff04 	addi	sp,fp,-4
8110a470:	dfc00217 	ldw	ra,8(sp)
8110a474:	df000117 	ldw	fp,4(sp)
8110a478:	dc000017 	ldw	r16,0(sp)
8110a47c:	dec00304 	addi	sp,sp,12
8110a480:	f800283a 	ret

8110a484 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110a484:	defffb04 	addi	sp,sp,-20
8110a488:	de00012e 	bgeu	sp,et,8110a490 <setPreParsedFreePos+0xc>
8110a48c:	003b68fa 	trap	3
8110a490:	dfc00415 	stw	ra,16(sp)
8110a494:	df000315 	stw	fp,12(sp)
8110a498:	df000304 	addi	fp,sp,12
8110a49c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a4a0:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a4a4:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a4a8:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a4ac:	00004306 	br	8110a5bc <setPreParsedFreePos+0x138>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a4b0:	d0a05417 	ldw	r2,-32432(gp)
8110a4b4:	e0fffe84 	addi	r3,fp,-6
8110a4b8:	180d883a 	mov	r6,r3
8110a4bc:	01400084 	movi	r5,2
8110a4c0:	1009883a 	mov	r4,r2
8110a4c4:	112ccb40 	call	8112ccb4 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a4c8:	e0bffe83 	ldbu	r2,-6(fp)
8110a4cc:	10803fcc 	andi	r2,r2,255
8110a4d0:	1000371e 	bne	r2,zero,8110a5b0 <setPreParsedFreePos+0x12c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a4d4:	e03ffe45 	stb	zero,-7(fp)
8110a4d8:	00002e06 	br	8110a594 <setPreParsedFreePos+0x110>
            {
                if ( xPreParsed[i].cType == 0 ) {
8110a4dc:	e0fffe43 	ldbu	r3,-7(fp)
8110a4e0:	00a04574 	movhi	r2,33045
8110a4e4:	10be0e04 	addi	r2,r2,-1992
8110a4e8:	18c01324 	muli	r3,r3,76
8110a4ec:	10c5883a 	add	r2,r2,r3
8110a4f0:	10800104 	addi	r2,r2,4
8110a4f4:	10800003 	ldbu	r2,0(r2)
8110a4f8:	10803fcc 	andi	r2,r2,255
8110a4fc:	1080201c 	xori	r2,r2,128
8110a500:	10bfe004 	addi	r2,r2,-128
8110a504:	1000201e 	bne	r2,zero,8110a588 <setPreParsedFreePos+0x104>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
8110a508:	e0fffe43 	ldbu	r3,-7(fp)
8110a50c:	00a04574 	movhi	r2,33045
8110a510:	10be0e04 	addi	r2,r2,-1992
8110a514:	18c01324 	muli	r3,r3,76
8110a518:	10c7883a 	add	r3,r2,r3
8110a51c:	e0bfff17 	ldw	r2,-4(fp)
8110a520:	1009883a 	mov	r4,r2
8110a524:	00801304 	movi	r2,76
8110a528:	100d883a 	mov	r6,r2
8110a52c:	200b883a 	mov	r5,r4
8110a530:	1809883a 	mov	r4,r3
8110a534:	111297c0 	call	8111297c <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
8110a538:	d0a04f17 	ldw	r2,-32452(gp)
8110a53c:	1009883a 	mov	r4,r2
8110a540:	112f0480 	call	8112f048 <OSSemPost>
8110a544:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a548:	e0bffe83 	ldbu	r2,-6(fp)
8110a54c:	10803fcc 	andi	r2,r2,255
8110a550:	1000031e 	bne	r2,zero,8110a560 <setPreParsedFreePos+0xdc>
                        bSuccess = TRUE;
8110a554:	00800044 	movi	r2,1
8110a558:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a55c:	00001006 	br	8110a5a0 <setPreParsedFreePos+0x11c>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
8110a560:	110e08c0 	call	8110e08c <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
8110a564:	e0fffe43 	ldbu	r3,-7(fp)
8110a568:	00a04574 	movhi	r2,33045
8110a56c:	10be0e04 	addi	r2,r2,-1992
8110a570:	18c01324 	muli	r3,r3,76
8110a574:	10c5883a 	add	r2,r2,r3
8110a578:	10800104 	addi	r2,r2,4
8110a57c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a580:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a584:	00000606 	br	8110a5a0 <setPreParsedFreePos+0x11c>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a588:	e0bffe43 	ldbu	r2,-7(fp)
8110a58c:	10800044 	addi	r2,r2,1
8110a590:	e0bffe45 	stb	r2,-7(fp)
8110a594:	e0bffe43 	ldbu	r2,-7(fp)
8110a598:	10800130 	cmpltui	r2,r2,4
8110a59c:	103fcf1e 	bne	r2,zero,8110a4dc <__reset+0xfb0ea4dc>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
8110a5a0:	d0a05417 	ldw	r2,-32432(gp)
8110a5a4:	1009883a 	mov	r4,r2
8110a5a8:	112d2580 	call	8112d258 <OSMutexPost>
8110a5ac:	00000306 	br	8110a5bc <setPreParsedFreePos+0x138>
        } else {
            ucCountRetries++;
8110a5b0:	e0bffe03 	ldbu	r2,-8(fp)
8110a5b4:	10800044 	addi	r2,r2,1
8110a5b8:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a5bc:	e0bffd17 	ldw	r2,-12(fp)
8110a5c0:	1000031e 	bne	r2,zero,8110a5d0 <setPreParsedFreePos+0x14c>
8110a5c4:	e0bffe03 	ldbu	r2,-8(fp)
8110a5c8:	108000b0 	cmpltui	r2,r2,2
8110a5cc:	103fb81e 	bne	r2,zero,8110a4b0 <__reset+0xfb0ea4b0>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a5d0:	e0bffd17 	ldw	r2,-12(fp)
}
8110a5d4:	e037883a 	mov	sp,fp
8110a5d8:	dfc00117 	ldw	ra,4(sp)
8110a5dc:	df000017 	ldw	fp,0(sp)
8110a5e0:	dec00204 	addi	sp,sp,8
8110a5e4:	f800283a 	ret

8110a5e8 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110a5e8:	defffb04 	addi	sp,sp,-20
8110a5ec:	de00012e 	bgeu	sp,et,8110a5f4 <setPreAckSenderFreePos+0xc>
8110a5f0:	003b68fa 	trap	3
8110a5f4:	dfc00415 	stw	ra,16(sp)
8110a5f8:	df000315 	stw	fp,12(sp)
8110a5fc:	df000304 	addi	fp,sp,12
8110a600:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a604:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a608:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a60c:	e03ffe05 	stb	zero,-8(fp)
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a610:	00005406 	br	8110a764 <setPreAckSenderFreePos+0x17c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
8110a614:	d0a05a17 	ldw	r2,-32408(gp)
8110a618:	e0fffe84 	addi	r3,fp,-6
8110a61c:	180d883a 	mov	r6,r3
8110a620:	01400104 	movi	r5,4
8110a624:	1009883a 	mov	r4,r2
8110a628:	112ccb40 	call	8112ccb4 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a62c:	e0bffe83 	ldbu	r2,-6(fp)
8110a630:	10803fcc 	andi	r2,r2,255
8110a634:	1000481e 	bne	r2,zero,8110a758 <setPreAckSenderFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a638:	e03ffe45 	stb	zero,-7(fp)
8110a63c:	00003f06 	br	8110a73c <setPreAckSenderFreePos+0x154>
            {
                if ( xSenderACK[i].cType == 0 ) {
8110a640:	e0fffe43 	ldbu	r3,-7(fp)
8110a644:	00a04574 	movhi	r2,33045
8110a648:	10be0a04 	addi	r2,r2,-2008
8110a64c:	18c7883a 	add	r3,r3,r3
8110a650:	18c7883a 	add	r3,r3,r3
8110a654:	10c5883a 	add	r2,r2,r3
8110a658:	10800003 	ldbu	r2,0(r2)
8110a65c:	10803fcc 	andi	r2,r2,255
8110a660:	1080201c 	xori	r2,r2,128
8110a664:	10bfe004 	addi	r2,r2,-128
8110a668:	1000311e 	bne	r2,zero,8110a730 <setPreAckSenderFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
8110a66c:	e0fffe43 	ldbu	r3,-7(fp)
8110a670:	e0bfff17 	ldw	r2,-4(fp)
8110a674:	11000103 	ldbu	r4,4(r2)
8110a678:	00a04574 	movhi	r2,33045
8110a67c:	10be0a04 	addi	r2,r2,-2008
8110a680:	18c7883a 	add	r3,r3,r3
8110a684:	18c7883a 	add	r3,r3,r3
8110a688:	10c5883a 	add	r2,r2,r3
8110a68c:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
8110a690:	e0fffe43 	ldbu	r3,-7(fp)
8110a694:	e0bfff17 	ldw	r2,-4(fp)
8110a698:	11000143 	ldbu	r4,5(r2)
8110a69c:	00a04574 	movhi	r2,33045
8110a6a0:	10be0a04 	addi	r2,r2,-2008
8110a6a4:	18c7883a 	add	r3,r3,r3
8110a6a8:	18c7883a 	add	r3,r3,r3
8110a6ac:	10c5883a 	add	r2,r2,r3
8110a6b0:	10800044 	addi	r2,r2,1
8110a6b4:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110a6b8:	e0fffe43 	ldbu	r3,-7(fp)
8110a6bc:	e0bfff17 	ldw	r2,-4(fp)
8110a6c0:	1100020b 	ldhu	r4,8(r2)
8110a6c4:	00a04574 	movhi	r2,33045
8110a6c8:	10be0a04 	addi	r2,r2,-2008
8110a6cc:	18c7883a 	add	r3,r3,r3
8110a6d0:	18c7883a 	add	r3,r3,r3
8110a6d4:	10c5883a 	add	r2,r2,r3
8110a6d8:	10800084 	addi	r2,r2,2
8110a6dc:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
8110a6e0:	d0a04c17 	ldw	r2,-32464(gp)
8110a6e4:	1009883a 	mov	r4,r2
8110a6e8:	112f0480 	call	8112f048 <OSSemPost>
8110a6ec:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a6f0:	e0bffe83 	ldbu	r2,-6(fp)
8110a6f4:	10803fcc 	andi	r2,r2,255
8110a6f8:	1000031e 	bne	r2,zero,8110a708 <setPreAckSenderFreePos+0x120>
                        bSuccess = TRUE;
8110a6fc:	00800044 	movi	r2,1
8110a700:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a704:	00001006 	br	8110a748 <setPreAckSenderFreePos+0x160>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
8110a708:	110e1240 	call	8110e124 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
8110a70c:	e0fffe43 	ldbu	r3,-7(fp)
8110a710:	00a04574 	movhi	r2,33045
8110a714:	10be0a04 	addi	r2,r2,-2008
8110a718:	18c7883a 	add	r3,r3,r3
8110a71c:	18c7883a 	add	r3,r3,r3
8110a720:	10c5883a 	add	r2,r2,r3
8110a724:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a728:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a72c:	00000606 	br	8110a748 <setPreAckSenderFreePos+0x160>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a730:	e0bffe43 	ldbu	r2,-7(fp)
8110a734:	10800044 	addi	r2,r2,1
8110a738:	e0bffe45 	stb	r2,-7(fp)
8110a73c:	e0bffe43 	ldbu	r2,-7(fp)
8110a740:	10800130 	cmpltui	r2,r2,4
8110a744:	103fbe1e 	bne	r2,zero,8110a640 <__reset+0xfb0ea640>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
8110a748:	d0a05a17 	ldw	r2,-32408(gp)
8110a74c:	1009883a 	mov	r4,r2
8110a750:	112d2580 	call	8112d258 <OSMutexPost>
8110a754:	00000306 	br	8110a764 <setPreAckSenderFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a758:	e0bffe03 	ldbu	r2,-8(fp)
8110a75c:	10800044 	addi	r2,r2,1
8110a760:	e0bffe05 	stb	r2,-8(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a764:	e0bffd17 	ldw	r2,-12(fp)
8110a768:	1000031e 	bne	r2,zero,8110a778 <setPreAckSenderFreePos+0x190>
8110a76c:	e0bffe03 	ldbu	r2,-8(fp)
8110a770:	108000b0 	cmpltui	r2,r2,2
8110a774:	103fa71e 	bne	r2,zero,8110a614 <__reset+0xfb0ea614>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a778:	e0bffd17 	ldw	r2,-12(fp)
}
8110a77c:	e037883a 	mov	sp,fp
8110a780:	dfc00117 	ldw	ra,4(sp)
8110a784:	df000017 	ldw	fp,0(sp)
8110a788:	dec00204 	addi	sp,sp,8
8110a78c:	f800283a 	ret

8110a790 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110a790:	defffb04 	addi	sp,sp,-20
8110a794:	de00012e 	bgeu	sp,et,8110a79c <setPreAckReceiverFreePos+0xc>
8110a798:	003b68fa 	trap	3
8110a79c:	dfc00415 	stw	ra,16(sp)
8110a7a0:	df000315 	stw	fp,12(sp)
8110a7a4:	df000304 	addi	fp,sp,12
8110a7a8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a7ac:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a7b0:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a7b4:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a7b8:	00005406 	br	8110a90c <setPreAckReceiverFreePos+0x17c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a7bc:	d0a05017 	ldw	r2,-32448(gp)
8110a7c0:	e0fffe84 	addi	r3,fp,-6
8110a7c4:	180d883a 	mov	r6,r3
8110a7c8:	01400084 	movi	r5,2
8110a7cc:	1009883a 	mov	r4,r2
8110a7d0:	112ccb40 	call	8112ccb4 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a7d4:	e0bffe83 	ldbu	r2,-6(fp)
8110a7d8:	10803fcc 	andi	r2,r2,255
8110a7dc:	1000481e 	bne	r2,zero,8110a900 <setPreAckReceiverFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a7e0:	e03ffe45 	stb	zero,-7(fp)
8110a7e4:	00003f06 	br	8110a8e4 <setPreAckReceiverFreePos+0x154>
            {
                if ( xReceivedACK[i].cType == 0 ) {
8110a7e8:	e0fffe43 	ldbu	r3,-7(fp)
8110a7ec:	00a04574 	movhi	r2,33045
8110a7f0:	10b60604 	addi	r2,r2,-10216
8110a7f4:	18c7883a 	add	r3,r3,r3
8110a7f8:	18c7883a 	add	r3,r3,r3
8110a7fc:	10c5883a 	add	r2,r2,r3
8110a800:	10800003 	ldbu	r2,0(r2)
8110a804:	10803fcc 	andi	r2,r2,255
8110a808:	1080201c 	xori	r2,r2,128
8110a80c:	10bfe004 	addi	r2,r2,-128
8110a810:	1000311e 	bne	r2,zero,8110a8d8 <setPreAckReceiverFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
8110a814:	e0fffe43 	ldbu	r3,-7(fp)
8110a818:	e0bfff17 	ldw	r2,-4(fp)
8110a81c:	11000103 	ldbu	r4,4(r2)
8110a820:	00a04574 	movhi	r2,33045
8110a824:	10b60604 	addi	r2,r2,-10216
8110a828:	18c7883a 	add	r3,r3,r3
8110a82c:	18c7883a 	add	r3,r3,r3
8110a830:	10c5883a 	add	r2,r2,r3
8110a834:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a838:	e0fffe43 	ldbu	r3,-7(fp)
8110a83c:	e0bfff17 	ldw	r2,-4(fp)
8110a840:	11000143 	ldbu	r4,5(r2)
8110a844:	00a04574 	movhi	r2,33045
8110a848:	10b60604 	addi	r2,r2,-10216
8110a84c:	18c7883a 	add	r3,r3,r3
8110a850:	18c7883a 	add	r3,r3,r3
8110a854:	10c5883a 	add	r2,r2,r3
8110a858:	10800044 	addi	r2,r2,1
8110a85c:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a860:	e0fffe43 	ldbu	r3,-7(fp)
8110a864:	e0bfff17 	ldw	r2,-4(fp)
8110a868:	1100020b 	ldhu	r4,8(r2)
8110a86c:	00a04574 	movhi	r2,33045
8110a870:	10b60604 	addi	r2,r2,-10216
8110a874:	18c7883a 	add	r3,r3,r3
8110a878:	18c7883a 	add	r3,r3,r3
8110a87c:	10c5883a 	add	r2,r2,r3
8110a880:	10800084 	addi	r2,r2,2
8110a884:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
8110a888:	d0a05117 	ldw	r2,-32444(gp)
8110a88c:	1009883a 	mov	r4,r2
8110a890:	112f0480 	call	8112f048 <OSSemPost>
8110a894:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a898:	e0bffe83 	ldbu	r2,-6(fp)
8110a89c:	10803fcc 	andi	r2,r2,255
8110a8a0:	1000031e 	bne	r2,zero,8110a8b0 <setPreAckReceiverFreePos+0x120>
                        bSuccess = TRUE;
8110a8a4:	00800044 	movi	r2,1
8110a8a8:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a8ac:	00001006 	br	8110a8f0 <setPreAckReceiverFreePos+0x160>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
8110a8b0:	110e0d80 	call	8110e0d8 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110a8b4:	e0fffe43 	ldbu	r3,-7(fp)
8110a8b8:	00a04574 	movhi	r2,33045
8110a8bc:	10b60604 	addi	r2,r2,-10216
8110a8c0:	18c7883a 	add	r3,r3,r3
8110a8c4:	18c7883a 	add	r3,r3,r3
8110a8c8:	10c5883a 	add	r2,r2,r3
8110a8cc:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a8d0:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a8d4:	00000606 	br	8110a8f0 <setPreAckReceiverFreePos+0x160>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a8d8:	e0bffe43 	ldbu	r2,-7(fp)
8110a8dc:	10800044 	addi	r2,r2,1
8110a8e0:	e0bffe45 	stb	r2,-7(fp)
8110a8e4:	e0bffe43 	ldbu	r2,-7(fp)
8110a8e8:	10800130 	cmpltui	r2,r2,4
8110a8ec:	103fbe1e 	bne	r2,zero,8110a7e8 <__reset+0xfb0ea7e8>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
8110a8f0:	d0a05017 	ldw	r2,-32448(gp)
8110a8f4:	1009883a 	mov	r4,r2
8110a8f8:	112d2580 	call	8112d258 <OSMutexPost>
8110a8fc:	00000306 	br	8110a90c <setPreAckReceiverFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a900:	e0bffe03 	ldbu	r2,-8(fp)
8110a904:	10800044 	addi	r2,r2,1
8110a908:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a90c:	e0bffd17 	ldw	r2,-12(fp)
8110a910:	1000031e 	bne	r2,zero,8110a920 <setPreAckReceiverFreePos+0x190>
8110a914:	e0bffe03 	ldbu	r2,-8(fp)
8110a918:	108000b0 	cmpltui	r2,r2,2
8110a91c:	103fa71e 	bne	r2,zero,8110a7bc <__reset+0xfb0ea7bc>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a920:	e0bffd17 	ldw	r2,-12(fp)
}
8110a924:	e037883a 	mov	sp,fp
8110a928:	dfc00117 	ldw	ra,4(sp)
8110a92c:	df000017 	ldw	fp,0(sp)
8110a930:	dec00204 	addi	sp,sp,8
8110a934:	f800283a 	ret

8110a938 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
8110a938:	defffa04 	addi	sp,sp,-24
8110a93c:	de00012e 	bgeu	sp,et,8110a944 <vSenderComTask+0xc>
8110a940:	003b68fa 	trap	3
8110a944:	dfc00515 	stw	ra,20(sp)
8110a948:	df000415 	stw	fp,16(sp)
8110a94c:	df000404 	addi	fp,sp,16
8110a950:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    bool bSuccess;
    int desligarEm = 0;
8110a954:	e03ffd15 	stw	zero,-12(fp)

    eSenderMode = sConfiguringSender;
8110a958:	e03ffc15 	stw	zero,-16(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
8110a95c:	d0a04d17 	ldw	r2,-32460(gp)
8110a960:	100f883a 	mov	r7,r2
8110a964:	01800704 	movi	r6,28
8110a968:	01400044 	movi	r5,1
8110a96c:	01204534 	movhi	r4,33044
8110a970:	21334f04 	addi	r4,r4,-12996
8110a974:	1111f680 	call	81111f68 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110a978:	e0bffc17 	ldw	r2,-16(fp)
8110a97c:	10c00060 	cmpeqi	r3,r2,1
8110a980:	1800091e 	bne	r3,zero,8110a9a8 <vSenderComTask+0x70>
8110a984:	0080052e 	bgeu	zero,r2,8110a99c <vSenderComTask+0x64>
8110a988:	10c000a0 	cmpeqi	r3,r2,2
8110a98c:	1800451e 	bne	r3,zero,8110aaa4 <vSenderComTask+0x16c>
8110a990:	10800160 	cmpeqi	r2,r2,5
8110a994:	10002c1e 	bne	r2,zero,8110aa48 <vSenderComTask+0x110>
8110a998:	00003a06 	br	8110aa84 <vSenderComTask+0x14c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110a99c:	00800044 	movi	r2,1
8110a9a0:	e0bffc15 	stw	r2,-16(fp)
                break;
8110a9a4:	00004006 	br	8110aaa8 <vSenderComTask+0x170>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110a9a8:	d0a04d17 	ldw	r2,-32460(gp)
8110a9ac:	100f883a 	mov	r7,r2
8110a9b0:	01800784 	movi	r6,30
8110a9b4:	01400044 	movi	r5,1
8110a9b8:	01204534 	movhi	r4,33044
8110a9bc:	21335704 	addi	r4,r4,-12964
8110a9c0:	1111f680 	call	81111f68 <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendStatusFirstTime(START_STATUS_SEQUENCE, 1);
8110a9c4:	01400044 	movi	r5,1
8110a9c8:	01204534 	movhi	r4,33044
8110a9cc:	21335f04 	addi	r4,r4,-12932
8110a9d0:	110c3f80 	call	8110c3f8 <bSendStatusFirstTime>
8110a9d4:	e0bffe15 	stw	r2,-8(fp)
                if ( bSuccess == TRUE ) {
8110a9d8:	e0bffe17 	ldw	r2,-8(fp)
8110a9dc:	10800058 	cmpnei	r2,r2,1
8110a9e0:	10000a1e 	bne	r2,zero,8110aa0c <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110a9e4:	00800144 	movi	r2,5
8110a9e8:	e0bffc15 	stw	r2,-16(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110a9ec:	d0a04d17 	ldw	r2,-32460(gp)
8110a9f0:	100f883a 	mov	r7,r2
8110a9f4:	01800d44 	movi	r6,53
8110a9f8:	01400044 	movi	r5,1
8110a9fc:	01204534 	movhi	r4,33044
8110aa00:	21336204 	addi	r4,r4,-12920
8110aa04:	1111f680 	call	81111f68 <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110aa08:	00002706 	br	8110aaa8 <vSenderComTask+0x170>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110aa0c:	d0a04d17 	ldw	r2,-32460(gp)
8110aa10:	100f883a 	mov	r7,r2
8110aa14:	01800784 	movi	r6,30
8110aa18:	01400044 	movi	r5,1
8110aa1c:	01204534 	movhi	r4,33044
8110aa20:	21337004 	addi	r4,r4,-12864
8110aa24:	1111f680 	call	81111f68 <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110aa28:	00800044 	movi	r2,1
8110aa2c:	e0bffc15 	stw	r2,-16(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110aa30:	000f883a 	mov	r7,zero
8110aa34:	01800144 	movi	r6,5
8110aa38:	000b883a 	mov	r5,zero
8110aa3c:	0009883a 	mov	r4,zero
8110aa40:	1130c580 	call	81130c58 <OSTimeDlyHMSM>
                }
                break;
8110aa44:	00001806 	br	8110aaa8 <vSenderComTask+0x170>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110aa48:	00800144 	movi	r2,5
8110aa4c:	e0bffc15 	stw	r2,-16(fp)
                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110aa50:	d0a04d17 	ldw	r2,-32460(gp)
8110aa54:	100f883a 	mov	r7,r2
8110aa58:	01800344 	movi	r6,13
8110aa5c:	01400044 	movi	r5,1
8110aa60:	01204534 	movhi	r4,33044
8110aa64:	21337804 	addi	r4,r4,-12832
8110aa68:	1111f680 	call	81111f68 <fwrite>
                #endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110aa6c:	000f883a 	mov	r7,zero
8110aa70:	01800284 	movi	r6,10
8110aa74:	000b883a 	mov	r5,zero
8110aa78:	0009883a 	mov	r4,zero
8110aa7c:	1130c580 	call	81130c58 <OSTimeDlyHMSM>

                break;
8110aa80:	00000906 	br	8110aaa8 <vSenderComTask+0x170>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
8110aa84:	d0a04d17 	ldw	r2,-32460(gp)
8110aa88:	100f883a 	mov	r7,r2
8110aa8c:	018003c4 	movi	r6,15
8110aa90:	01400044 	movi	r5,1
8110aa94:	01204534 	movhi	r4,33044
8110aa98:	21337c04 	addi	r4,r4,-12816
8110aa9c:	1111f680 	call	81111f68 <fwrite>
#endif
                break;
8110aaa0:	00000106 	br	8110aaa8 <vSenderComTask+0x170>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110aaa4:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
8110aaa8:	003fb306 	br	8110a978 <__reset+0xfb0ea978>

8110aaac <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110aaac:	defffd04 	addi	sp,sp,-12
8110aab0:	de00012e 	bgeu	sp,et,8110aab8 <vSimMebTask+0xc>
8110aab4:	003b68fa 	trap	3
8110aab8:	df000215 	stw	fp,8(sp)
8110aabc:	df000204 	addi	fp,sp,8
8110aac0:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110aac4:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110aac8:	0001883a 	nop
8110aacc:	e037883a 	mov	sp,fp
8110aad0:	df000017 	ldw	fp,0(sp)
8110aad4:	dec00104 	addi	sp,sp,4
8110aad8:	f800283a 	ret

8110aadc <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
8110aadc:	defff504 	addi	sp,sp,-44
8110aae0:	de00012e 	bgeu	sp,et,8110aae8 <vTimeoutCheckerTask+0xc>
8110aae4:	003b68fa 	trap	3
8110aae8:	dfc00a15 	stw	ra,40(sp)
8110aaec:	df000915 	stw	fp,36(sp)
8110aaf0:	df000904 	addi	fp,sp,36
8110aaf4:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
8110aaf8:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
8110aafc:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
8110ab00:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
8110ab04:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
8110ab08:	e03ffa45 	stb	zero,-23(fp)
8110ab0c:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110ab10:	d0a04d17 	ldw	r2,-32460(gp)
8110ab14:	100f883a 	mov	r7,r2
8110ab18:	01800844 	movi	r6,33
8110ab1c:	01400044 	movi	r5,1
8110ab20:	01204534 	movhi	r4,33044
8110ab24:	21338004 	addi	r4,r4,-12800
8110ab28:	1111f680 	call	81111f68 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
8110ab2c:	d0a05217 	ldw	r2,-32440(gp)
8110ab30:	e0fffac4 	addi	r3,fp,-21
8110ab34:	180d883a 	mov	r6,r3
8110ab38:	000b883a 	mov	r5,zero
8110ab3c:	1009883a 	mov	r4,r2
8110ab40:	112ecc00 	call	8112ecc0 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
8110ab44:	e0bffac3 	ldbu	r2,-21(fp)
8110ab48:	10803fcc 	andi	r2,r2,255
8110ab4c:	1002191e 	bne	r2,zero,8110b3b4 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
8110ab50:	e0bffb04 	addi	r2,fp,-20
8110ab54:	01800204 	movi	r6,8
8110ab58:	01403fc4 	movi	r5,255
8110ab5c:	1009883a 	mov	r4,r2
8110ab60:	1112acc0 	call	81112acc <memset>
            memset(ucRetransB64, 255, N_64);
8110ab64:	e0bffd04 	addi	r2,fp,-12
8110ab68:	01800104 	movi	r6,4
8110ab6c:	01403fc4 	movi	r5,255
8110ab70:	1009883a 	mov	r4,r2
8110ab74:	1112acc0 	call	81112acc <memset>
            memset(ucRetransB128, 255, N_128);
8110ab78:	e0bffe04 	addi	r2,fp,-8
8110ab7c:	01800084 	movi	r6,2
8110ab80:	01403fc4 	movi	r5,255
8110ab84:	1009883a 	mov	r4,r2
8110ab88:	1112acc0 	call	81112acc <memset>

            bFinished32=FALSE;
8110ab8c:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
8110ab90:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
8110ab94:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
8110ab98:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110ab9c:	00011a06 	br	8110b008 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
8110aba0:	e0bff717 	ldw	r2,-36(fp)
8110aba4:	10005b1e 	bne	r2,zero,8110ad14 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110aba8:	d0a05517 	ldw	r2,-32428(gp)
8110abac:	e0fffac4 	addi	r3,fp,-21
8110abb0:	180d883a 	mov	r6,r3
8110abb4:	01400084 	movi	r5,2
8110abb8:	1009883a 	mov	r4,r2
8110abbc:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110abc0:	e0bffac3 	ldbu	r2,-21(fp)
8110abc4:	10803fcc 	andi	r2,r2,255
8110abc8:	1000521e 	bne	r2,zero,8110ad14 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
8110abcc:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
8110abd0:	e03ffa45 	stb	zero,-23(fp)
8110abd4:	00004706 	br	8110acf4 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
8110abd8:	e0fffa43 	ldbu	r3,-23(fp)
8110abdc:	00a04534 	movhi	r2,33044
8110abe0:	109d7704 	addi	r2,r2,30172
8110abe4:	18c009a4 	muli	r3,r3,38
8110abe8:	10c5883a 	add	r2,r2,r3
8110abec:	10800804 	addi	r2,r2,32
8110abf0:	1080000b 	ldhu	r2,0(r2)
8110abf4:	10bfffcc 	andi	r2,r2,65535
8110abf8:	10003b26 	beq	r2,zero,8110ace8 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
8110abfc:	e0fffa43 	ldbu	r3,-23(fp)
8110ac00:	00a04534 	movhi	r2,33044
8110ac04:	109d7704 	addi	r2,r2,30172
8110ac08:	18c009a4 	muli	r3,r3,38
8110ac0c:	10c5883a 	add	r2,r2,r3
8110ac10:	10800904 	addi	r2,r2,36
8110ac14:	10800003 	ldbu	r2,0(r2)
8110ac18:	10803fcc 	andi	r2,r2,255
8110ac1c:	1000101e 	bne	r2,zero,8110ac60 <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
8110ac20:	e0fffa43 	ldbu	r3,-23(fp)
8110ac24:	00a04534 	movhi	r2,33044
8110ac28:	109d7704 	addi	r2,r2,30172
8110ac2c:	18c009a4 	muli	r3,r3,38
8110ac30:	10c5883a 	add	r2,r2,r3
8110ac34:	10800804 	addi	r2,r2,32
8110ac38:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
8110ac3c:	d0a05817 	ldw	r2,-32416(gp)
8110ac40:	1009883a 	mov	r4,r2
8110ac44:	112f0480 	call	8112f048 <OSSemPost>
8110ac48:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110ac4c:	e0bffac3 	ldbu	r2,-21(fp)
8110ac50:	10803fcc 	andi	r2,r2,255
8110ac54:	10002426 	beq	r2,zero,8110ace8 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
8110ac58:	110e4f40 	call	8110e4f4 <vFailSetCountSemaphorexBuffer32>
8110ac5c:	00002206 	br	8110ace8 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
8110ac60:	e0fffa43 	ldbu	r3,-23(fp)
8110ac64:	00a04534 	movhi	r2,33044
8110ac68:	109d7704 	addi	r2,r2,30172
8110ac6c:	190009a4 	muli	r4,r3,38
8110ac70:	1105883a 	add	r2,r2,r4
8110ac74:	10800884 	addi	r2,r2,34
8110ac78:	1080000b 	ldhu	r2,0(r2)
8110ac7c:	10bfffc4 	addi	r2,r2,-1
8110ac80:	1009883a 	mov	r4,r2
8110ac84:	00a04534 	movhi	r2,33044
8110ac88:	109d7704 	addi	r2,r2,30172
8110ac8c:	18c009a4 	muli	r3,r3,38
8110ac90:	10c5883a 	add	r2,r2,r3
8110ac94:	10800884 	addi	r2,r2,34
8110ac98:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
8110ac9c:	e0fffa43 	ldbu	r3,-23(fp)
8110aca0:	00a04534 	movhi	r2,33044
8110aca4:	109d7704 	addi	r2,r2,30172
8110aca8:	18c009a4 	muli	r3,r3,38
8110acac:	10c5883a 	add	r2,r2,r3
8110acb0:	10800884 	addi	r2,r2,34
8110acb4:	1080000b 	ldhu	r2,0(r2)
8110acb8:	10bfffcc 	andi	r2,r2,65535
8110acbc:	10a0001c 	xori	r2,r2,32768
8110acc0:	10a00004 	addi	r2,r2,-32768
8110acc4:	00800816 	blt	zero,r2,8110ace8 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
8110acc8:	e0bffa83 	ldbu	r2,-22(fp)
8110accc:	e0fffb04 	addi	r3,fp,-20
8110acd0:	1885883a 	add	r2,r3,r2
8110acd4:	e0fffa43 	ldbu	r3,-23(fp)
8110acd8:	10c00005 	stb	r3,0(r2)
                                        k++;
8110acdc:	e0bffa83 	ldbu	r2,-22(fp)
8110ace0:	10800044 	addi	r2,r2,1
8110ace4:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
8110ace8:	e0bffa43 	ldbu	r2,-23(fp)
8110acec:	10800044 	addi	r2,r2,1
8110acf0:	e0bffa45 	stb	r2,-23(fp)
8110acf4:	e0bffa43 	ldbu	r2,-23(fp)
8110acf8:	10800230 	cmpltui	r2,r2,8
8110acfc:	103fb61e 	bne	r2,zero,8110abd8 <__reset+0xfb0eabd8>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110ad00:	d0a05517 	ldw	r2,-32428(gp)
8110ad04:	1009883a 	mov	r4,r2
8110ad08:	112d2580 	call	8112d258 <OSMutexPost>
                        bFinished32 = TRUE;
8110ad0c:	00800044 	movi	r2,1
8110ad10:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
8110ad14:	e0bff817 	ldw	r2,-32(fp)
8110ad18:	10005b1e 	bne	r2,zero,8110ae88 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110ad1c:	d0a05917 	ldw	r2,-32412(gp)
8110ad20:	e0fffac4 	addi	r3,fp,-21
8110ad24:	180d883a 	mov	r6,r3
8110ad28:	01400084 	movi	r5,2
8110ad2c:	1009883a 	mov	r4,r2
8110ad30:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110ad34:	e0bffac3 	ldbu	r2,-21(fp)
8110ad38:	10803fcc 	andi	r2,r2,255
8110ad3c:	1000521e 	bne	r2,zero,8110ae88 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
8110ad40:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
8110ad44:	e03ffa45 	stb	zero,-23(fp)
8110ad48:	00004706 	br	8110ae68 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
8110ad4c:	e0fffa43 	ldbu	r3,-23(fp)
8110ad50:	00a04534 	movhi	r2,33044
8110ad54:	108c1a04 	addi	r2,r2,12392
8110ad58:	18c011a4 	muli	r3,r3,70
8110ad5c:	10c5883a 	add	r2,r2,r3
8110ad60:	10801004 	addi	r2,r2,64
8110ad64:	1080000b 	ldhu	r2,0(r2)
8110ad68:	10bfffcc 	andi	r2,r2,65535
8110ad6c:	10003b26 	beq	r2,zero,8110ae5c <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
8110ad70:	e0fffa43 	ldbu	r3,-23(fp)
8110ad74:	00a04534 	movhi	r2,33044
8110ad78:	108c1a04 	addi	r2,r2,12392
8110ad7c:	18c011a4 	muli	r3,r3,70
8110ad80:	10c5883a 	add	r2,r2,r3
8110ad84:	10801104 	addi	r2,r2,68
8110ad88:	10800003 	ldbu	r2,0(r2)
8110ad8c:	10803fcc 	andi	r2,r2,255
8110ad90:	1000101e 	bne	r2,zero,8110add4 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
8110ad94:	e0fffa43 	ldbu	r3,-23(fp)
8110ad98:	00a04534 	movhi	r2,33044
8110ad9c:	108c1a04 	addi	r2,r2,12392
8110ada0:	18c011a4 	muli	r3,r3,70
8110ada4:	10c5883a 	add	r2,r2,r3
8110ada8:	10801004 	addi	r2,r2,64
8110adac:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
8110adb0:	d0a04a17 	ldw	r2,-32472(gp)
8110adb4:	1009883a 	mov	r4,r2
8110adb8:	112f0480 	call	8112f048 <OSSemPost>
8110adbc:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110adc0:	e0bffac3 	ldbu	r2,-21(fp)
8110adc4:	10803fcc 	andi	r2,r2,255
8110adc8:	10002426 	beq	r2,zero,8110ae5c <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
8110adcc:	110e55c0 	call	8110e55c <vFailSetCountSemaphorexBuffer64>
8110add0:	00002206 	br	8110ae5c <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
8110add4:	e0fffa43 	ldbu	r3,-23(fp)
8110add8:	00a04534 	movhi	r2,33044
8110addc:	108c1a04 	addi	r2,r2,12392
8110ade0:	190011a4 	muli	r4,r3,70
8110ade4:	1105883a 	add	r2,r2,r4
8110ade8:	10801084 	addi	r2,r2,66
8110adec:	1080000b 	ldhu	r2,0(r2)
8110adf0:	10bfffc4 	addi	r2,r2,-1
8110adf4:	1009883a 	mov	r4,r2
8110adf8:	00a04534 	movhi	r2,33044
8110adfc:	108c1a04 	addi	r2,r2,12392
8110ae00:	18c011a4 	muli	r3,r3,70
8110ae04:	10c5883a 	add	r2,r2,r3
8110ae08:	10801084 	addi	r2,r2,66
8110ae0c:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
8110ae10:	e0fffa43 	ldbu	r3,-23(fp)
8110ae14:	00a04534 	movhi	r2,33044
8110ae18:	108c1a04 	addi	r2,r2,12392
8110ae1c:	18c011a4 	muli	r3,r3,70
8110ae20:	10c5883a 	add	r2,r2,r3
8110ae24:	10801084 	addi	r2,r2,66
8110ae28:	1080000b 	ldhu	r2,0(r2)
8110ae2c:	10bfffcc 	andi	r2,r2,65535
8110ae30:	10a0001c 	xori	r2,r2,32768
8110ae34:	10a00004 	addi	r2,r2,-32768
8110ae38:	00800816 	blt	zero,r2,8110ae5c <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
8110ae3c:	e0bffa83 	ldbu	r2,-22(fp)
8110ae40:	e0fffd04 	addi	r3,fp,-12
8110ae44:	1885883a 	add	r2,r3,r2
8110ae48:	e0fffa43 	ldbu	r3,-23(fp)
8110ae4c:	10c00005 	stb	r3,0(r2)
                                        k++;
8110ae50:	e0bffa83 	ldbu	r2,-22(fp)
8110ae54:	10800044 	addi	r2,r2,1
8110ae58:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
8110ae5c:	e0bffa43 	ldbu	r2,-23(fp)
8110ae60:	10800044 	addi	r2,r2,1
8110ae64:	e0bffa45 	stb	r2,-23(fp)
8110ae68:	e0bffa43 	ldbu	r2,-23(fp)
8110ae6c:	10800130 	cmpltui	r2,r2,4
8110ae70:	103fb61e 	bne	r2,zero,8110ad4c <__reset+0xfb0ead4c>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
8110ae74:	d0a05917 	ldw	r2,-32412(gp)
8110ae78:	1009883a 	mov	r4,r2
8110ae7c:	112d2580 	call	8112d258 <OSMutexPost>
                        bFinished64 = TRUE;
8110ae80:	00800044 	movi	r2,1
8110ae84:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
8110ae88:	e0bff917 	ldw	r2,-28(fp)
8110ae8c:	10005b1e 	bne	r2,zero,8110affc <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110ae90:	d0a05717 	ldw	r2,-32420(gp)
8110ae94:	e0fffac4 	addi	r3,fp,-21
8110ae98:	180d883a 	mov	r6,r3
8110ae9c:	01400084 	movi	r5,2
8110aea0:	1009883a 	mov	r4,r2
8110aea4:	112ccb40 	call	8112ccb4 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110aea8:	e0bffac3 	ldbu	r2,-21(fp)
8110aeac:	10803fcc 	andi	r2,r2,255
8110aeb0:	1000521e 	bne	r2,zero,8110affc <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
8110aeb4:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
8110aeb8:	e03ffa45 	stb	zero,-23(fp)
8110aebc:	00004706 	br	8110afdc <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
8110aec0:	e0fffa43 	ldbu	r3,-23(fp)
8110aec4:	00a04574 	movhi	r2,33045
8110aec8:	10b5c304 	addi	r2,r2,-10484
8110aecc:	18c021a4 	muli	r3,r3,134
8110aed0:	10c5883a 	add	r2,r2,r3
8110aed4:	10802004 	addi	r2,r2,128
8110aed8:	1080000b 	ldhu	r2,0(r2)
8110aedc:	10bfffcc 	andi	r2,r2,65535
8110aee0:	10003b26 	beq	r2,zero,8110afd0 <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
8110aee4:	e0fffa43 	ldbu	r3,-23(fp)
8110aee8:	00a04574 	movhi	r2,33045
8110aeec:	10b5c304 	addi	r2,r2,-10484
8110aef0:	18c021a4 	muli	r3,r3,134
8110aef4:	10c5883a 	add	r2,r2,r3
8110aef8:	10802104 	addi	r2,r2,132
8110aefc:	10800003 	ldbu	r2,0(r2)
8110af00:	10803fcc 	andi	r2,r2,255
8110af04:	1000101e 	bne	r2,zero,8110af48 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
8110af08:	e0fffa43 	ldbu	r3,-23(fp)
8110af0c:	00a04574 	movhi	r2,33045
8110af10:	10b5c304 	addi	r2,r2,-10484
8110af14:	18c021a4 	muli	r3,r3,134
8110af18:	10c5883a 	add	r2,r2,r3
8110af1c:	10802004 	addi	r2,r2,128
8110af20:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
8110af24:	d0a04e17 	ldw	r2,-32456(gp)
8110af28:	1009883a 	mov	r4,r2
8110af2c:	112f0480 	call	8112f048 <OSSemPost>
8110af30:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110af34:	e0bffac3 	ldbu	r2,-21(fp)
8110af38:	10803fcc 	andi	r2,r2,255
8110af3c:	10002426 	beq	r2,zero,8110afd0 <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
8110af40:	110e5c40 	call	8110e5c4 <vFailSetCountSemaphorexBuffer128>
8110af44:	00002206 	br	8110afd0 <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
8110af48:	e0fffa43 	ldbu	r3,-23(fp)
8110af4c:	00a04574 	movhi	r2,33045
8110af50:	10b5c304 	addi	r2,r2,-10484
8110af54:	190021a4 	muli	r4,r3,134
8110af58:	1105883a 	add	r2,r2,r4
8110af5c:	10802084 	addi	r2,r2,130
8110af60:	1080000b 	ldhu	r2,0(r2)
8110af64:	10bfffc4 	addi	r2,r2,-1
8110af68:	1009883a 	mov	r4,r2
8110af6c:	00a04574 	movhi	r2,33045
8110af70:	10b5c304 	addi	r2,r2,-10484
8110af74:	18c021a4 	muli	r3,r3,134
8110af78:	10c5883a 	add	r2,r2,r3
8110af7c:	10802084 	addi	r2,r2,130
8110af80:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
8110af84:	e0fffa43 	ldbu	r3,-23(fp)
8110af88:	00a04574 	movhi	r2,33045
8110af8c:	10b5c304 	addi	r2,r2,-10484
8110af90:	18c021a4 	muli	r3,r3,134
8110af94:	10c5883a 	add	r2,r2,r3
8110af98:	10802084 	addi	r2,r2,130
8110af9c:	1080000b 	ldhu	r2,0(r2)
8110afa0:	10bfffcc 	andi	r2,r2,65535
8110afa4:	10a0001c 	xori	r2,r2,32768
8110afa8:	10a00004 	addi	r2,r2,-32768
8110afac:	00800816 	blt	zero,r2,8110afd0 <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
8110afb0:	e0bffa83 	ldbu	r2,-22(fp)
8110afb4:	e0fffe04 	addi	r3,fp,-8
8110afb8:	1885883a 	add	r2,r3,r2
8110afbc:	e0fffa43 	ldbu	r3,-23(fp)
8110afc0:	10c00005 	stb	r3,0(r2)
                                        k++;
8110afc4:	e0bffa83 	ldbu	r2,-22(fp)
8110afc8:	10800044 	addi	r2,r2,1
8110afcc:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110afd0:	e0bffa43 	ldbu	r2,-23(fp)
8110afd4:	10800044 	addi	r2,r2,1
8110afd8:	e0bffa45 	stb	r2,-23(fp)
8110afdc:	e0bffa43 	ldbu	r2,-23(fp)
8110afe0:	108000b0 	cmpltui	r2,r2,2
8110afe4:	103fb61e 	bne	r2,zero,8110aec0 <__reset+0xfb0eaec0>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
8110afe8:	d0a05717 	ldw	r2,-32420(gp)
8110afec:	1009883a 	mov	r4,r2
8110aff0:	112d2580 	call	8112d258 <OSMutexPost>
                        bFinished128 = TRUE;
8110aff4:	00800044 	movi	r2,1
8110aff8:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
8110affc:	e0bffa03 	ldbu	r2,-24(fp)
8110b000:	10800044 	addi	r2,r2,1
8110b004:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110b008:	e0bffa03 	ldbu	r2,-24(fp)
8110b00c:	108001a8 	cmpgeui	r2,r2,6
8110b010:	1000061e 	bne	r2,zero,8110b02c <vTimeoutCheckerTask+0x550>
8110b014:	e0bff717 	ldw	r2,-36(fp)
8110b018:	103ee126 	beq	r2,zero,8110aba0 <__reset+0xfb0eaba0>
8110b01c:	e0bff817 	ldw	r2,-32(fp)
8110b020:	103edf26 	beq	r2,zero,8110aba0 <__reset+0xfb0eaba0>
8110b024:	e0bff917 	ldw	r2,-28(fp)
8110b028:	103edd26 	beq	r2,zero,8110aba0 <__reset+0xfb0eaba0>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
8110b02c:	e0bff717 	ldw	r2,-36(fp)
8110b030:	10000426 	beq	r2,zero,8110b044 <vTimeoutCheckerTask+0x568>
8110b034:	e0bff817 	ldw	r2,-32(fp)
8110b038:	10000226 	beq	r2,zero,8110b044 <vTimeoutCheckerTask+0x568>
8110b03c:	e0bff917 	ldw	r2,-28(fp)
8110b040:	1000011e 	bne	r2,zero,8110b048 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is occourring*/
                vCouldNotCheckBufferTimeOutFunction();
8110b044:	110eb040 	call	8110eb04 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) || (ucRetransB64[0] != 255) || (ucRetransB128[0] != 255) ) {
8110b048:	e0bffb03 	ldbu	r2,-20(fp)
8110b04c:	10803fcc 	andi	r2,r2,255
8110b050:	10803fd8 	cmpnei	r2,r2,255
8110b054:	1000081e 	bne	r2,zero,8110b078 <vTimeoutCheckerTask+0x59c>
8110b058:	e0bffd03 	ldbu	r2,-12(fp)
8110b05c:	10803fcc 	andi	r2,r2,255
8110b060:	10803fd8 	cmpnei	r2,r2,255
8110b064:	1000041e 	bne	r2,zero,8110b078 <vTimeoutCheckerTask+0x59c>
8110b068:	e0bffe03 	ldbu	r2,-8(fp)
8110b06c:	10803fcc 	andi	r2,r2,255
8110b070:	10803fe0 	cmpeqi	r2,r2,255
8110b074:	103ead1e 	bne	r2,zero,8110ab2c <__reset+0xfb0eab2c>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
8110b078:	d0a05b17 	ldw	r2,-32404(gp)
8110b07c:	e0fffac4 	addi	r3,fp,-21
8110b080:	180d883a 	mov	r6,r3
8110b084:	01400c84 	movi	r5,50
8110b088:	1009883a 	mov	r4,r2
8110b08c:	112ccb40 	call	8112ccb4 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110b090:	e0bffac3 	ldbu	r2,-21(fp)
8110b094:	10803fcc 	andi	r2,r2,255
8110b098:	1000c41e 	bne	r2,zero,8110b3ac <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
8110b09c:	e0bffb03 	ldbu	r2,-20(fp)
8110b0a0:	10803fcc 	andi	r2,r2,255
8110b0a4:	10803fe0 	cmpeqi	r2,r2,255
8110b0a8:	10003c1e 	bne	r2,zero,8110b19c <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b0ac:	d0a05517 	ldw	r2,-32428(gp)
8110b0b0:	e0fffac4 	addi	r3,fp,-21
8110b0b4:	180d883a 	mov	r6,r3
8110b0b8:	01400044 	movi	r5,1
8110b0bc:	1009883a 	mov	r4,r2
8110b0c0:	112ccb40 	call	8112ccb4 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b0c4:	e0bffac3 	ldbu	r2,-21(fp)
8110b0c8:	10803fcc 	andi	r2,r2,255
8110b0cc:	1000321e 	bne	r2,zero,8110b198 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110b0d0:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
8110b0d4:	e0bffa83 	ldbu	r2,-22(fp)
8110b0d8:	e0fffb04 	addi	r3,fp,-20
8110b0dc:	1885883a 	add	r2,r3,r2
8110b0e0:	10800003 	ldbu	r2,0(r2)
8110b0e4:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
8110b0e8:	e0fffa43 	ldbu	r3,-23(fp)
8110b0ec:	00a04534 	movhi	r2,33044
8110b0f0:	109d7704 	addi	r2,r2,30172
8110b0f4:	190009a4 	muli	r4,r3,38
8110b0f8:	1105883a 	add	r2,r2,r4
8110b0fc:	10800904 	addi	r2,r2,36
8110b100:	10800003 	ldbu	r2,0(r2)
8110b104:	10bfffc4 	addi	r2,r2,-1
8110b108:	1009883a 	mov	r4,r2
8110b10c:	00a04534 	movhi	r2,33044
8110b110:	109d7704 	addi	r2,r2,30172
8110b114:	18c009a4 	muli	r3,r3,38
8110b118:	10c5883a 	add	r2,r2,r3
8110b11c:	10800904 	addi	r2,r2,36
8110b120:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110b124:	e0fffa43 	ldbu	r3,-23(fp)
8110b128:	00a04534 	movhi	r2,33044
8110b12c:	109d7704 	addi	r2,r2,30172
8110b130:	18c009a4 	muli	r3,r3,38
8110b134:	10c5883a 	add	r2,r2,r3
8110b138:	10800884 	addi	r2,r2,34
8110b13c:	00c00144 	movi	r3,5
8110b140:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
8110b144:	e0bffa43 	ldbu	r2,-23(fp)
8110b148:	10c009a4 	muli	r3,r2,38
8110b14c:	00a04534 	movhi	r2,33044
8110b150:	109d7704 	addi	r2,r2,30172
8110b154:	1885883a 	add	r2,r3,r2
8110b158:	1009883a 	mov	r4,r2
8110b15c:	1112da00 	call	81112da0 <puts>
                                k++;
8110b160:	e0bffa83 	ldbu	r2,-22(fp)
8110b164:	10800044 	addi	r2,r2,1
8110b168:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
8110b16c:	e0bffa83 	ldbu	r2,-22(fp)
8110b170:	e0fffb04 	addi	r3,fp,-20
8110b174:	1885883a 	add	r2,r3,r2
8110b178:	10800003 	ldbu	r2,0(r2)
8110b17c:	10803fcc 	andi	r2,r2,255
8110b180:	10803fd8 	cmpnei	r2,r2,255
8110b184:	103fd31e 	bne	r2,zero,8110b0d4 <__reset+0xfb0eb0d4>

                            OSMutexPost(xMutexBuffer32);
8110b188:	d0a05517 	ldw	r2,-32428(gp)
8110b18c:	1009883a 	mov	r4,r2
8110b190:	112d2580 	call	8112d258 <OSMutexPost>
8110b194:	00000106 	br	8110b19c <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
8110b198:	110ecd40 	call	8110ecd4 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
8110b19c:	e0bffd03 	ldbu	r2,-12(fp)
8110b1a0:	10803fcc 	andi	r2,r2,255
8110b1a4:	10803fe0 	cmpeqi	r2,r2,255
8110b1a8:	10003c1e 	bne	r2,zero,8110b29c <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b1ac:	d0a05917 	ldw	r2,-32412(gp)
8110b1b0:	e0fffac4 	addi	r3,fp,-21
8110b1b4:	180d883a 	mov	r6,r3
8110b1b8:	01400044 	movi	r5,1
8110b1bc:	1009883a 	mov	r4,r2
8110b1c0:	112ccb40 	call	8112ccb4 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b1c4:	e0bffac3 	ldbu	r2,-21(fp)
8110b1c8:	10803fcc 	andi	r2,r2,255
8110b1cc:	1000321e 	bne	r2,zero,8110b298 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110b1d0:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
8110b1d4:	e0bffa83 	ldbu	r2,-22(fp)
8110b1d8:	e0fffd04 	addi	r3,fp,-12
8110b1dc:	1885883a 	add	r2,r3,r2
8110b1e0:	10800003 	ldbu	r2,0(r2)
8110b1e4:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
8110b1e8:	e0fffa43 	ldbu	r3,-23(fp)
8110b1ec:	00a04534 	movhi	r2,33044
8110b1f0:	108c1a04 	addi	r2,r2,12392
8110b1f4:	190011a4 	muli	r4,r3,70
8110b1f8:	1105883a 	add	r2,r2,r4
8110b1fc:	10801104 	addi	r2,r2,68
8110b200:	10800003 	ldbu	r2,0(r2)
8110b204:	10bfffc4 	addi	r2,r2,-1
8110b208:	1009883a 	mov	r4,r2
8110b20c:	00a04534 	movhi	r2,33044
8110b210:	108c1a04 	addi	r2,r2,12392
8110b214:	18c011a4 	muli	r3,r3,70
8110b218:	10c5883a 	add	r2,r2,r3
8110b21c:	10801104 	addi	r2,r2,68
8110b220:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110b224:	e0fffa43 	ldbu	r3,-23(fp)
8110b228:	00a04534 	movhi	r2,33044
8110b22c:	108c1a04 	addi	r2,r2,12392
8110b230:	18c011a4 	muli	r3,r3,70
8110b234:	10c5883a 	add	r2,r2,r3
8110b238:	10801084 	addi	r2,r2,66
8110b23c:	00c00144 	movi	r3,5
8110b240:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
8110b244:	e0bffa43 	ldbu	r2,-23(fp)
8110b248:	10c011a4 	muli	r3,r2,70
8110b24c:	00a04534 	movhi	r2,33044
8110b250:	108c1a04 	addi	r2,r2,12392
8110b254:	1885883a 	add	r2,r3,r2
8110b258:	1009883a 	mov	r4,r2
8110b25c:	1112da00 	call	81112da0 <puts>
                                k++;
8110b260:	e0bffa83 	ldbu	r2,-22(fp)
8110b264:	10800044 	addi	r2,r2,1
8110b268:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
8110b26c:	e0bffa83 	ldbu	r2,-22(fp)
8110b270:	e0fffd04 	addi	r3,fp,-12
8110b274:	1885883a 	add	r2,r3,r2
8110b278:	10800003 	ldbu	r2,0(r2)
8110b27c:	10803fcc 	andi	r2,r2,255
8110b280:	10803fd8 	cmpnei	r2,r2,255
8110b284:	103fd31e 	bne	r2,zero,8110b1d4 <__reset+0xfb0eb1d4>

                            OSMutexPost(xMutexBuffer64);
8110b288:	d0a05917 	ldw	r2,-32412(gp)
8110b28c:	1009883a 	mov	r4,r2
8110b290:	112d2580 	call	8112d258 <OSMutexPost>
8110b294:	00000106 	br	8110b29c <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
8110b298:	110ed3c0 	call	8110ed3c <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
8110b29c:	e0bffe03 	ldbu	r2,-8(fp)
8110b2a0:	10803fcc 	andi	r2,r2,255
8110b2a4:	10803fe0 	cmpeqi	r2,r2,255
8110b2a8:	10003c1e 	bne	r2,zero,8110b39c <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b2ac:	d0a05717 	ldw	r2,-32420(gp)
8110b2b0:	e0fffac4 	addi	r3,fp,-21
8110b2b4:	180d883a 	mov	r6,r3
8110b2b8:	01400044 	movi	r5,1
8110b2bc:	1009883a 	mov	r4,r2
8110b2c0:	112ccb40 	call	8112ccb4 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b2c4:	e0bffac3 	ldbu	r2,-21(fp)
8110b2c8:	10803fcc 	andi	r2,r2,255
8110b2cc:	1000321e 	bne	r2,zero,8110b398 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110b2d0:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
8110b2d4:	e0bffa83 	ldbu	r2,-22(fp)
8110b2d8:	e0fffe04 	addi	r3,fp,-8
8110b2dc:	1885883a 	add	r2,r3,r2
8110b2e0:	10800003 	ldbu	r2,0(r2)
8110b2e4:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
8110b2e8:	e0fffa43 	ldbu	r3,-23(fp)
8110b2ec:	00a04574 	movhi	r2,33045
8110b2f0:	10b5c304 	addi	r2,r2,-10484
8110b2f4:	190021a4 	muli	r4,r3,134
8110b2f8:	1105883a 	add	r2,r2,r4
8110b2fc:	10802104 	addi	r2,r2,132
8110b300:	10800003 	ldbu	r2,0(r2)
8110b304:	10bfffc4 	addi	r2,r2,-1
8110b308:	1009883a 	mov	r4,r2
8110b30c:	00a04574 	movhi	r2,33045
8110b310:	10b5c304 	addi	r2,r2,-10484
8110b314:	18c021a4 	muli	r3,r3,134
8110b318:	10c5883a 	add	r2,r2,r3
8110b31c:	10802104 	addi	r2,r2,132
8110b320:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b324:	e0fffa43 	ldbu	r3,-23(fp)
8110b328:	00a04574 	movhi	r2,33045
8110b32c:	10b5c304 	addi	r2,r2,-10484
8110b330:	18c021a4 	muli	r3,r3,134
8110b334:	10c5883a 	add	r2,r2,r3
8110b338:	10802084 	addi	r2,r2,130
8110b33c:	00c00144 	movi	r3,5
8110b340:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
8110b344:	e0bffa43 	ldbu	r2,-23(fp)
8110b348:	10c021a4 	muli	r3,r2,134
8110b34c:	00a04574 	movhi	r2,33045
8110b350:	10b5c304 	addi	r2,r2,-10484
8110b354:	1885883a 	add	r2,r3,r2
8110b358:	1009883a 	mov	r4,r2
8110b35c:	1112da00 	call	81112da0 <puts>
                                k++;
8110b360:	e0bffa83 	ldbu	r2,-22(fp)
8110b364:	10800044 	addi	r2,r2,1
8110b368:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
8110b36c:	e0bffa83 	ldbu	r2,-22(fp)
8110b370:	e0fffe04 	addi	r3,fp,-8
8110b374:	1885883a 	add	r2,r3,r2
8110b378:	10800003 	ldbu	r2,0(r2)
8110b37c:	10803fcc 	andi	r2,r2,255
8110b380:	10803fd8 	cmpnei	r2,r2,255
8110b384:	103fd31e 	bne	r2,zero,8110b2d4 <__reset+0xfb0eb2d4>

                            OSMutexPost(xMutexBuffer128);
8110b388:	d0a05717 	ldw	r2,-32420(gp)
8110b38c:	1009883a 	mov	r4,r2
8110b390:	112d2580 	call	8112d258 <OSMutexPost>
8110b394:	00000106 	br	8110b39c <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
8110b398:	110eda40 	call	8110eda4 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
8110b39c:	d0a05b17 	ldw	r2,-32404(gp)
8110b3a0:	1009883a 	mov	r4,r2
8110b3a4:	112d2580 	call	8112d258 <OSMutexPost>
8110b3a8:	003de006 	br	8110ab2c <__reset+0xfb0eab2c>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
8110b3ac:	110ec6c0 	call	8110ec6c <vFailCouldNotRetransmitTimeoutTask>
8110b3b0:	003dde06 	br	8110ab2c <__reset+0xfb0eab2c>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110b3b4:	110eb9c0 	call	8110eb9c <vFailGetBlockingSemTimeoutTask>
        }
    }
8110b3b8:	003ddc06 	br	8110ab2c <__reset+0xfb0eab2c>

8110b3bc <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110b3bc:	defff904 	addi	sp,sp,-28
8110b3c0:	de00012e 	bgeu	sp,et,8110b3c8 <bResourcesInitRTOS+0xc>
8110b3c4:	003b68fa 	trap	3
8110b3c8:	dfc00615 	stw	ra,24(sp)
8110b3cc:	df000515 	stw	fp,20(sp)
8110b3d0:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110b3d4:	00800044 	movi	r2,1
8110b3d8:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110b3dc:	0009883a 	mov	r4,zero
8110b3e0:	112e9980 	call	8112e998 <OSSemCreate>
8110b3e4:	d0a04b15 	stw	r2,-32468(gp)
	if (!xSemCommInit) {
8110b3e8:	d0a04b17 	ldw	r2,-32468(gp)
8110b3ec:	1000021e 	bne	r2,zero,8110b3f8 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110b3f0:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b3f4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110b3f8:	e0bfff04 	addi	r2,fp,-4
8110b3fc:	100b883a 	mov	r5,r2
8110b400:	010000c4 	movi	r4,3
8110b404:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b408:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110b40c:	e0bfff03 	ldbu	r2,-4(fp)
8110b410:	10803fcc 	andi	r2,r2,255
8110b414:	10000526 	beq	r2,zero,8110b42c <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110b418:	e0bfff03 	ldbu	r2,-4(fp)
8110b41c:	10803fcc 	andi	r2,r2,255
8110b420:	1009883a 	mov	r4,r2
8110b424:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b428:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110b42c:	e0bfff04 	addi	r2,fp,-4
8110b430:	100b883a 	mov	r5,r2
8110b434:	01000184 	movi	r4,6
8110b438:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b43c:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110b440:	e0bfff03 	ldbu	r2,-4(fp)
8110b444:	10803fcc 	andi	r2,r2,255
8110b448:	10000526 	beq	r2,zero,8110b460 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110b44c:	e0bfff03 	ldbu	r2,-4(fp)
8110b450:	10803fcc 	andi	r2,r2,255
8110b454:	1009883a 	mov	r4,r2
8110b458:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b45c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110b460:	e0bfff04 	addi	r2,fp,-4
8110b464:	100b883a 	mov	r5,r2
8110b468:	010001c4 	movi	r4,7
8110b46c:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b470:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110b474:	e0bfff03 	ldbu	r2,-4(fp)
8110b478:	10803fcc 	andi	r2,r2,255
8110b47c:	10000526 	beq	r2,zero,8110b494 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110b480:	e0bfff03 	ldbu	r2,-4(fp)
8110b484:	10803fcc 	andi	r2,r2,255
8110b488:	1009883a 	mov	r4,r2
8110b48c:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b490:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110b494:	e0bfff04 	addi	r2,fp,-4
8110b498:	100b883a 	mov	r5,r2
8110b49c:	01000204 	movi	r4,8
8110b4a0:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b4a4:	d0a05515 	stw	r2,-32428(gp)
	if ( err != OS_ERR_NONE ) {
8110b4a8:	e0bfff03 	ldbu	r2,-4(fp)
8110b4ac:	10803fcc 	andi	r2,r2,255
8110b4b0:	10000526 	beq	r2,zero,8110b4c8 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110b4b4:	e0bfff03 	ldbu	r2,-4(fp)
8110b4b8:	10803fcc 	andi	r2,r2,255
8110b4bc:	1009883a 	mov	r4,r2
8110b4c0:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b4c4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110b4c8:	01000084 	movi	r4,2
8110b4cc:	112e9980 	call	8112e998 <OSSemCreate>
8110b4d0:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountBuffer128) {
8110b4d4:	d0a04e17 	ldw	r2,-32456(gp)
8110b4d8:	1000021e 	bne	r2,zero,8110b4e4 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
8110b4dc:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b4e0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
8110b4e4:	01000104 	movi	r4,4
8110b4e8:	112e9980 	call	8112e998 <OSSemCreate>
8110b4ec:	d0a04a15 	stw	r2,-32472(gp)
	if (!xSemCountBuffer64) {
8110b4f0:	d0a04a17 	ldw	r2,-32472(gp)
8110b4f4:	1000021e 	bne	r2,zero,8110b500 <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
8110b4f8:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b4fc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110b500:	01000204 	movi	r4,8
8110b504:	112e9980 	call	8112e998 <OSSemCreate>
8110b508:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCountBuffer32) {
8110b50c:	d0a05817 	ldw	r2,-32416(gp)
8110b510:	1000021e 	bne	r2,zero,8110b51c <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
8110b514:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b518:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110b51c:	e0bfff04 	addi	r2,fp,-4
8110b520:	100b883a 	mov	r5,r2
8110b524:	01000144 	movi	r4,5
8110b528:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b52c:	d0a05015 	stw	r2,-32448(gp)
	if ( err != OS_ERR_NONE ) {
8110b530:	e0bfff03 	ldbu	r2,-4(fp)
8110b534:	10803fcc 	andi	r2,r2,255
8110b538:	10000526 	beq	r2,zero,8110b550 <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
8110b53c:	e0bfff03 	ldbu	r2,-4(fp)
8110b540:	10803fcc 	andi	r2,r2,255
8110b544:	1009883a 	mov	r4,r2
8110b548:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b54c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110b550:	e0bfff04 	addi	r2,fp,-4
8110b554:	100b883a 	mov	r5,r2
8110b558:	01000244 	movi	r4,9
8110b55c:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b560:	d0a05415 	stw	r2,-32432(gp)
	if ( err != OS_ERR_NONE ) {
8110b564:	e0bfff03 	ldbu	r2,-4(fp)
8110b568:	10803fcc 	andi	r2,r2,255
8110b56c:	10000526 	beq	r2,zero,8110b584 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110b570:	e0bfff03 	ldbu	r2,-4(fp)
8110b574:	10803fcc 	andi	r2,r2,255
8110b578:	1009883a 	mov	r4,r2
8110b57c:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b580:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110b584:	0009883a 	mov	r4,zero
8110b588:	112e9980 	call	8112e998 <OSSemCreate>
8110b58c:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountReceivedACK) {
8110b590:	d0a05117 	ldw	r2,-32444(gp)
8110b594:	1000021e 	bne	r2,zero,8110b5a0 <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
8110b598:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b59c:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110b5a0:	0009883a 	mov	r4,zero
8110b5a4:	112e9980 	call	8112e998 <OSSemCreate>
8110b5a8:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountPreParsed) {
8110b5ac:	d0a04f17 	ldw	r2,-32452(gp)
8110b5b0:	1000021e 	bne	r2,zero,8110b5bc <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
8110b5b4:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b5b8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110b5bc:	0009883a 	mov	r4,zero
8110b5c0:	112e9980 	call	8112e998 <OSSemCreate>
8110b5c4:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountSenderACK) {
8110b5c8:	d0a04c17 	ldw	r2,-32464(gp)
8110b5cc:	1000021e 	bne	r2,zero,8110b5d8 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110b5d0:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b5d4:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110b5d8:	e0bfff04 	addi	r2,fp,-4
8110b5dc:	100b883a 	mov	r5,r2
8110b5e0:	01000104 	movi	r4,4
8110b5e4:	112c7e00 	call	8112c7e0 <OSMutexCreate>
8110b5e8:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110b5ec:	e0bfff03 	ldbu	r2,-4(fp)
8110b5f0:	10803fcc 	andi	r2,r2,255
8110b5f4:	10000526 	beq	r2,zero,8110b60c <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
8110b5f8:	e0bfff03 	ldbu	r2,-4(fp)
8110b5fc:	10803fcc 	andi	r2,r2,255
8110b600:	1009883a 	mov	r4,r2
8110b604:	110df2c0 	call	8110df2c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b608:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110b60c:	0009883a 	mov	r4,zero
8110b610:	112e9980 	call	8112e998 <OSSemCreate>
8110b614:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemTimeoutChecker) {
8110b618:	d0a05217 	ldw	r2,-32440(gp)
8110b61c:	1000021e 	bne	r2,zero,8110b628 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110b620:	110df8c0 	call	8110df8c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b624:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110b628:	e0bfff04 	addi	r2,fp,-4
8110b62c:	d8800215 	stw	r2,8(sp)
8110b630:	00a04534 	movhi	r2,33044
8110b634:	10b38904 	addi	r2,r2,-12764
8110b638:	d8800115 	stw	r2,4(sp)
8110b63c:	d8000015 	stw	zero,0(sp)
8110b640:	01e04474 	movhi	r7,33041
8110b644:	39f33604 	addi	r7,r7,-13096
8110b648:	01800084 	movi	r6,2
8110b64c:	01400144 	movi	r5,5
8110b650:	01003204 	movi	r4,200
8110b654:	11310640 	call	81131064 <OSTmrCreate>
8110b658:	d0a05615 	stw	r2,-32424(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110b65c:	e0bfff03 	ldbu	r2,-4(fp)
8110b660:	10803fcc 	andi	r2,r2,255
8110b664:	10000226 	beq	r2,zero,8110b670 <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
8110b668:	110eab80 	call	8110eab8 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110b66c:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110b670:	e0bffe17 	ldw	r2,-8(fp)
}
8110b674:	e037883a 	mov	sp,fp
8110b678:	dfc00117 	ldw	ra,4(sp)
8110b67c:	df000017 	ldw	fp,0(sp)
8110b680:	dec00204 	addi	sp,sp,8
8110b684:	f800283a 	ret

8110b688 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
8110b688:	deffff04 	addi	sp,sp,-4
8110b68c:	de00012e 	bgeu	sp,et,8110b694 <vVariablesInitialization+0xc>
8110b690:	003b68fa 	trap	3
8110b694:	df000015 	stw	fp,0(sp)
8110b698:	d839883a 	mov	fp,sp
	usiIdCMD = 2;
8110b69c:	00800084 	movi	r2,2
8110b6a0:	d0a0530d 	sth	r2,-32436(gp)
}
8110b6a4:	0001883a 	nop
8110b6a8:	e037883a 	mov	sp,fp
8110b6ac:	df000017 	ldw	fp,0(sp)
8110b6b0:	dec00104 	addi	sp,sp,4
8110b6b4:	f800283a 	ret

8110b6b8 <main>:



/* Entry point */
int main(void)
{
8110b6b8:	defff704 	addi	sp,sp,-36
8110b6bc:	de00012e 	bgeu	sp,et,8110b6c4 <main+0xc>
8110b6c0:	003b68fa 	trap	3
8110b6c4:	dfc00815 	stw	ra,32(sp)
8110b6c8:	df000715 	stw	fp,28(sp)
8110b6cc:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110b6d0:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
8110b6d4:	0009883a 	mov	r4,zero
8110b6d8:	1130ffc0 	call	81130ffc <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110b6dc:	01604534 	movhi	r5,33044
8110b6e0:	29738d04 	addi	r5,r5,-12748
8110b6e4:	01204534 	movhi	r4,33044
8110b6e8:	21338e04 	addi	r4,r4,-12744
8110b6ec:	11119340 	call	81111934 <fopen>
8110b6f0:	d0a04d15 	stw	r2,-32460(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110b6f4:	d0a04d17 	ldw	r2,-32460(gp)
8110b6f8:	100f883a 	mov	r7,r2
8110b6fc:	01800484 	movi	r6,18
8110b700:	01400044 	movi	r5,1
8110b704:	01204534 	movhi	r4,33044
8110b708:	21339304 	addi	r4,r4,-12724
8110b70c:	1111f680 	call	81111f68 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110b710:	110f61c0 	call	8110f61c <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110b714:	110fee80 	call	8110fee8 <bTestSimucamCriticalHW>
8110b718:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b71c:	e0bffe17 	ldw	r2,-8(fp)
8110b720:	1000031e 	bne	r2,zero,8110b730 <main+0x78>
		vFailTestCriticasParts();
8110b724:	110dfd80 	call	8110dfd8 <vFailTestCriticasParts>
		return -1;
8110b728:	00bfffc4 	movi	r2,-1
8110b72c:	00003d06 	br	8110b824 <main+0x16c>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110b730:	110fd340 	call	8110fd34 <bInitializeSDCard>
8110b734:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b738:	e0bffe17 	ldw	r2,-8(fp)
8110b73c:	1000031e 	bne	r2,zero,8110b74c <main+0x94>
		vFailTestCriticasParts();
8110b740:	110dfd80 	call	8110dfd8 <vFailTestCriticasParts>
		return -1;
8110b744:	00bfffc4 	movi	r2,-1
8110b748:	00003606 	br	8110b824 <main+0x16c>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110b74c:	110d1000 	call	8110d100 <vLoadDefaultETHConf>
8110b750:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b754:	e0bffe17 	ldw	r2,-8(fp)
8110b758:	1000091e 	bne	r2,zero,8110b780 <main+0xc8>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110b75c:	d0a04d17 	ldw	r2,-32460(gp)
8110b760:	100f883a 	mov	r7,r2
8110b764:	01801644 	movi	r6,89
8110b768:	01400044 	movi	r5,1
8110b76c:	01204534 	movhi	r4,33044
8110b770:	21339804 	addi	r4,r4,-12704
8110b774:	1111f680 	call	81111f68 <fwrite>
		#endif
		return -1;
8110b778:	00bfffc4 	movi	r2,-1
8110b77c:	00002906 	br	8110b824 <main+0x16c>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110b780:	110da8c0 	call	8110da8c <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110b784:	110b3bc0 	call	8110b3bc <bResourcesInitRTOS>
8110b788:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b78c:	e0bffe17 	ldw	r2,-8(fp)
8110b790:	1000091e 	bne	r2,zero,8110b7b8 <main+0x100>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110b794:	d0a04d17 	ldw	r2,-32460(gp)
8110b798:	100f883a 	mov	r7,r2
8110b79c:	01800ac4 	movi	r6,43
8110b7a0:	01400044 	movi	r5,1
8110b7a4:	01204534 	movhi	r4,33044
8110b7a8:	2133af04 	addi	r4,r4,-12612
8110b7ac:	1111f680 	call	81111f68 <fwrite>
		return -1;
8110b7b0:	00bfffc4 	movi	r2,-1
8110b7b4:	00001b06 	br	8110b824 <main+0x16c>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110b7b8:	01204534 	movhi	r4,33044
8110b7bc:	21146004 	addi	r4,r4,20864
8110b7c0:	110f74c0 	call	8110f74c <vSimucamStructureInit>

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
8110b7c4:	00800104 	movi	r2,4
8110b7c8:	d8800415 	stw	r2,16(sp)
8110b7cc:	d8000315 	stw	zero,12(sp)
8110b7d0:	00820004 	movi	r2,2048
8110b7d4:	d8800215 	stw	r2,8(sp)
8110b7d8:	00a04574 	movhi	r2,33045
8110b7dc:	10adc304 	addi	r2,r2,-18676
8110b7e0:	d8800115 	stw	r2,4(sp)
8110b7e4:	00800044 	movi	r2,1
8110b7e8:	d8800015 	stw	r2,0(sp)
8110b7ec:	01c00044 	movi	r7,1
8110b7f0:	01a04574 	movhi	r6,33045
8110b7f4:	31b5c204 	addi	r6,r6,-10488
8110b7f8:	000b883a 	mov	r5,zero
8110b7fc:	01204474 	movhi	r4,33041
8110b800:	21231b04 	addi	r4,r4,-29588
8110b804:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
8110b808:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110b80c:	e0bfff03 	ldbu	r2,-4(fp)
8110b810:	1000021e 	bne	r2,zero,8110b81c <main+0x164>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110b814:	1128fac0 	call	81128fac <OSStart>
8110b818:	00000106 	br	8110b820 <main+0x168>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110b81c:	110e3c40 	call	8110e3c4 <vFailInitialization>
	}
  
	return 0;
8110b820:	0005883a 	mov	r2,zero
}
8110b824:	e037883a 	mov	sp,fp
8110b828:	dfc00117 	ldw	ra,4(sp)
8110b82c:	df000017 	ldw	fp,0(sp)
8110b830:	dec00204 	addi	sp,sp,8
8110b834:	f800283a 	ret

8110b838 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110b838:	defffe04 	addi	sp,sp,-8
8110b83c:	de00012e 	bgeu	sp,et,8110b844 <vCCDLoadDefaultValues+0xc>
8110b840:	003b68fa 	trap	3
8110b844:	df000115 	stw	fp,4(sp)
8110b848:	df000104 	addi	fp,sp,4
8110b84c:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110b850:	e0bfff17 	ldw	r2,-4(fp)
8110b854:	00c46784 	movi	r3,4510
8110b858:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110b85c:	e0bfff17 	ldw	r2,-4(fp)
8110b860:	00c00784 	movi	r3,30
8110b864:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110b868:	e0bfff17 	ldw	r2,-4(fp)
8110b86c:	00c233c4 	movi	r3,2255
8110b870:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110b874:	e0bfff17 	ldw	r2,-4(fp)
8110b878:	00c003c4 	movi	r3,15
8110b87c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110b880:	e0bfff17 	ldw	r2,-4(fp)
8110b884:	00c00644 	movi	r3,25
8110b888:	10c0000d 	sth	r3,0(r2)
}
8110b88c:	0001883a 	nop
8110b890:	e037883a 	mov	sp,fp
8110b894:	df000017 	ldw	fp,0(sp)
8110b898:	dec00104 	addi	sp,sp,4
8110b89c:	f800283a 	ret

8110b8a0 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110b8a0:	defff904 	addi	sp,sp,-28
8110b8a4:	de00012e 	bgeu	sp,et,8110b8ac <vCCDChangeValues+0xc>
8110b8a8:	003b68fa 	trap	3
8110b8ac:	df000615 	stw	fp,24(sp)
8110b8b0:	df000604 	addi	fp,sp,24
8110b8b4:	e13ffa15 	stw	r4,-24(fp)
8110b8b8:	2811883a 	mov	r8,r5
8110b8bc:	300b883a 	mov	r5,r6
8110b8c0:	3809883a 	mov	r4,r7
8110b8c4:	e0c00117 	ldw	r3,4(fp)
8110b8c8:	e0800217 	ldw	r2,8(fp)
8110b8cc:	e23ffb0d 	sth	r8,-20(fp)
8110b8d0:	e17ffc0d 	sth	r5,-16(fp)
8110b8d4:	e13ffd0d 	sth	r4,-12(fp)
8110b8d8:	e0fffe0d 	sth	r3,-8(fp)
8110b8dc:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110b8e0:	e0bffa17 	ldw	r2,-24(fp)
8110b8e4:	e0fffb0b 	ldhu	r3,-20(fp)
8110b8e8:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110b8ec:	e0bffa17 	ldw	r2,-24(fp)
8110b8f0:	e0fffc0b 	ldhu	r3,-16(fp)
8110b8f4:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110b8f8:	e0bffa17 	ldw	r2,-24(fp)
8110b8fc:	e0fffd0b 	ldhu	r3,-12(fp)
8110b900:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110b904:	e0bffa17 	ldw	r2,-24(fp)
8110b908:	e0fffe0b 	ldhu	r3,-8(fp)
8110b90c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110b910:	e0bffa17 	ldw	r2,-24(fp)
8110b914:	e0ffff0b 	ldhu	r3,-4(fp)
8110b918:	10c0000d 	sth	r3,0(r2)
}
8110b91c:	0001883a 	nop
8110b920:	e037883a 	mov	sp,fp
8110b924:	df000017 	ldw	fp,0(sp)
8110b928:	dec00104 	addi	sp,sp,4
8110b92c:	f800283a 	ret

8110b930 <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110b930:	deffd804 	addi	sp,sp,-160
8110b934:	de00012e 	bgeu	sp,et,8110b93c <bSendUART128+0xc>
8110b938:	003b68fa 	trap	3
8110b93c:	dfc02715 	stw	ra,156(sp)
8110b940:	df002615 	stw	fp,152(sp)
8110b944:	df002604 	addi	fp,sp,152
8110b948:	e13ffe15 	stw	r4,-8(fp)
8110b94c:	2805883a 	mov	r2,r5
8110b950:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110b954:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110b958:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110b95c:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110b960:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110b964:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, strlen(cBuffer));
8110b968:	e13ffe17 	ldw	r4,-8(fp)
8110b96c:	11132f80 	call	811132f8 <strlen>
8110b970:	1007883a 	mov	r3,r2
8110b974:	e0bfdd44 	addi	r2,fp,-139
8110b978:	180d883a 	mov	r6,r3
8110b97c:	e17ffe17 	ldw	r5,-8(fp)
8110b980:	1009883a 	mov	r4,r2
8110b984:	111297c0 	call	8111297c <memcpy>
	bSuccess = FALSE;
8110b988:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110b98c:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
8110b990:	e0bfda03 	ldbu	r2,-152(fp)
8110b994:	10800044 	addi	r2,r2,1
8110b998:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110b99c:	d0a04e17 	ldw	r2,-32456(gp)
8110b9a0:	e0ffdc84 	addi	r3,fp,-142
8110b9a4:	180d883a 	mov	r6,r3
8110b9a8:	01401904 	movi	r5,100
8110b9ac:	1009883a 	mov	r4,r2
8110b9b0:	112ecc00 	call	8112ecc0 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110b9b4:	e0bfdc83 	ldbu	r2,-142(fp)
8110b9b8:	10803fcc 	andi	r2,r2,255
8110b9bc:	1000b61e 	bne	r2,zero,8110bc98 <bSendUART128+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110b9c0:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110b9c4:	e0bfda83 	ldbu	r2,-150(fp)
8110b9c8:	10800044 	addi	r2,r2,1
8110b9cc:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110b9d0:	d0a05b17 	ldw	r2,-32404(gp)
8110b9d4:	e0ffdd04 	addi	r3,fp,-140
8110b9d8:	180d883a 	mov	r6,r3
8110b9dc:	01400144 	movi	r5,5
8110b9e0:	1009883a 	mov	r4,r2
8110b9e4:	112ccb40 	call	8112ccb4 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110b9e8:	e0bfdd03 	ldbu	r2,-140(fp)
8110b9ec:	10803fcc 	andi	r2,r2,255
8110b9f0:	1000991e 	bne	r2,zero,8110bc58 <bSendUART128+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
8110b9f4:	e0bfdd44 	addi	r2,fp,-139
8110b9f8:	1009883a 	mov	r4,r2
8110b9fc:	1112da00 	call	81112da0 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110ba00:	d0a05717 	ldw	r2,-32420(gp)
8110ba04:	e0ffdcc4 	addi	r3,fp,-141
8110ba08:	180b883a 	mov	r5,r3
8110ba0c:	1009883a 	mov	r4,r2
8110ba10:	112c6340 	call	8112c634 <OSMutexAccept>
8110ba14:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110ba18:	e0bfdcc3 	ldbu	r2,-141(fp)
8110ba1c:	10803fcc 	andi	r2,r2,255
8110ba20:	10003a1e 	bne	r2,zero,8110bb0c <bSendUART128+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110ba24:	e03fdac5 	stb	zero,-149(fp)
8110ba28:	00003206 	br	8110baf4 <bSendUART128+0x1c4>
						{
							if ( xBuffer128[i].usiId == 0 ) {
8110ba2c:	e0ffdac3 	ldbu	r3,-149(fp)
8110ba30:	00a04574 	movhi	r2,33045
8110ba34:	10b5c304 	addi	r2,r2,-10484
8110ba38:	18c021a4 	muli	r3,r3,134
8110ba3c:	10c5883a 	add	r2,r2,r3
8110ba40:	10802004 	addi	r2,r2,128
8110ba44:	1080000b 	ldhu	r2,0(r2)
8110ba48:	10bfffcc 	andi	r2,r2,65535
8110ba4c:	1000261e 	bne	r2,zero,8110bae8 <bSendUART128+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110ba50:	00800044 	movi	r2,1
8110ba54:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110ba58:	e0bfdac3 	ldbu	r2,-149(fp)
8110ba5c:	10c021a4 	muli	r3,r2,134
8110ba60:	00a04574 	movhi	r2,33045
8110ba64:	10b5c304 	addi	r2,r2,-10484
8110ba68:	1885883a 	add	r2,r3,r2
8110ba6c:	1009883a 	mov	r4,r2
8110ba70:	e0bfdd44 	addi	r2,fp,-139
8110ba74:	00c02004 	movi	r3,128
8110ba78:	180d883a 	mov	r6,r3
8110ba7c:	100b883a 	mov	r5,r2
8110ba80:	111297c0 	call	8111297c <memcpy>
								xBuffer128[i].usiId = siIdMessage;
8110ba84:	e13fdac3 	ldbu	r4,-149(fp)
8110ba88:	e0ffff0b 	ldhu	r3,-4(fp)
8110ba8c:	00a04574 	movhi	r2,33045
8110ba90:	10b5c304 	addi	r2,r2,-10484
8110ba94:	210021a4 	muli	r4,r4,134
8110ba98:	1105883a 	add	r2,r2,r4
8110ba9c:	10802004 	addi	r2,r2,128
8110baa0:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110baa4:	e0ffdac3 	ldbu	r3,-149(fp)
8110baa8:	00a04574 	movhi	r2,33045
8110baac:	10b5c304 	addi	r2,r2,-10484
8110bab0:	18c021a4 	muli	r3,r3,134
8110bab4:	10c5883a 	add	r2,r2,r3
8110bab8:	10802104 	addi	r2,r2,132
8110babc:	00c000c4 	movi	r3,3
8110bac0:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110bac4:	e0ffdac3 	ldbu	r3,-149(fp)
8110bac8:	00a04574 	movhi	r2,33045
8110bacc:	10b5c304 	addi	r2,r2,-10484
8110bad0:	18c021a4 	muli	r3,r3,134
8110bad4:	10c5883a 	add	r2,r2,r3
8110bad8:	10802084 	addi	r2,r2,130
8110badc:	00c00144 	movi	r3,5
8110bae0:	10c0000d 	sth	r3,0(r2)
								break;
8110bae4:	00000606 	br	8110bb00 <bSendUART128+0x1d0>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110bae8:	e0bfdac3 	ldbu	r2,-149(fp)
8110baec:	10800044 	addi	r2,r2,1
8110baf0:	e0bfdac5 	stb	r2,-149(fp)
8110baf4:	e0bfdac3 	ldbu	r2,-149(fp)
8110baf8:	108000b0 	cmpltui	r2,r2,2
8110bafc:	103fcb1e 	bne	r2,zero,8110ba2c <__reset+0xfb0eba2c>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110bb00:	d0a05717 	ldw	r2,-32420(gp)
8110bb04:	1009883a 	mov	r4,r2
8110bb08:	112d2580 	call	8112d258 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110bb0c:	d0a05b17 	ldw	r2,-32404(gp)
8110bb10:	1009883a 	mov	r4,r2
8110bb14:	112d2580 	call	8112d258 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110bb18:	e0bfdb17 	ldw	r2,-148(fp)
8110bb1c:	10800060 	cmpeqi	r2,r2,1
8110bb20:	10004d1e 	bne	r2,zero,8110bc58 <bSendUART128+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110bb24:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110bb28:	e0bfda43 	ldbu	r2,-151(fp)
8110bb2c:	10800044 	addi	r2,r2,1
8110bb30:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110bb34:	d0a05717 	ldw	r2,-32420(gp)
8110bb38:	e0ffdcc4 	addi	r3,fp,-141
8110bb3c:	180d883a 	mov	r6,r3
8110bb40:	01400144 	movi	r5,5
8110bb44:	1009883a 	mov	r4,r2
8110bb48:	112ccb40 	call	8112ccb4 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110bb4c:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bb50:	10803fcc 	andi	r2,r2,255
8110bb54:	10003a1e 	bne	r2,zero,8110bc40 <bSendUART128+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110bb58:	e03fdac5 	stb	zero,-149(fp)
8110bb5c:	00003206 	br	8110bc28 <bSendUART128+0x2f8>
								{
									if ( xBuffer128[i].usiId == 0 ) {
8110bb60:	e0ffdac3 	ldbu	r3,-149(fp)
8110bb64:	00a04574 	movhi	r2,33045
8110bb68:	10b5c304 	addi	r2,r2,-10484
8110bb6c:	18c021a4 	muli	r3,r3,134
8110bb70:	10c5883a 	add	r2,r2,r3
8110bb74:	10802004 	addi	r2,r2,128
8110bb78:	1080000b 	ldhu	r2,0(r2)
8110bb7c:	10bfffcc 	andi	r2,r2,65535
8110bb80:	1000261e 	bne	r2,zero,8110bc1c <bSendUART128+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110bb84:	00800044 	movi	r2,1
8110bb88:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110bb8c:	e0bfdac3 	ldbu	r2,-149(fp)
8110bb90:	10c021a4 	muli	r3,r2,134
8110bb94:	00a04574 	movhi	r2,33045
8110bb98:	10b5c304 	addi	r2,r2,-10484
8110bb9c:	1885883a 	add	r2,r3,r2
8110bba0:	1009883a 	mov	r4,r2
8110bba4:	e0bfdd44 	addi	r2,fp,-139
8110bba8:	00c02004 	movi	r3,128
8110bbac:	180d883a 	mov	r6,r3
8110bbb0:	100b883a 	mov	r5,r2
8110bbb4:	111297c0 	call	8111297c <memcpy>
										xBuffer128[i].usiId = siIdMessage;
8110bbb8:	e13fdac3 	ldbu	r4,-149(fp)
8110bbbc:	e0ffff0b 	ldhu	r3,-4(fp)
8110bbc0:	00a04574 	movhi	r2,33045
8110bbc4:	10b5c304 	addi	r2,r2,-10484
8110bbc8:	210021a4 	muli	r4,r4,134
8110bbcc:	1105883a 	add	r2,r2,r4
8110bbd0:	10802004 	addi	r2,r2,128
8110bbd4:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110bbd8:	e0ffdac3 	ldbu	r3,-149(fp)
8110bbdc:	00a04574 	movhi	r2,33045
8110bbe0:	10b5c304 	addi	r2,r2,-10484
8110bbe4:	18c021a4 	muli	r3,r3,134
8110bbe8:	10c5883a 	add	r2,r2,r3
8110bbec:	10802104 	addi	r2,r2,132
8110bbf0:	00c000c4 	movi	r3,3
8110bbf4:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110bbf8:	e0ffdac3 	ldbu	r3,-149(fp)
8110bbfc:	00a04574 	movhi	r2,33045
8110bc00:	10b5c304 	addi	r2,r2,-10484
8110bc04:	18c021a4 	muli	r3,r3,134
8110bc08:	10c5883a 	add	r2,r2,r3
8110bc0c:	10802084 	addi	r2,r2,130
8110bc10:	00c00144 	movi	r3,5
8110bc14:	10c0000d 	sth	r3,0(r2)
										break;
8110bc18:	00000606 	br	8110bc34 <bSendUART128+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110bc1c:	e0bfdac3 	ldbu	r2,-149(fp)
8110bc20:	10800044 	addi	r2,r2,1
8110bc24:	e0bfdac5 	stb	r2,-149(fp)
8110bc28:	e0bfdac3 	ldbu	r2,-149(fp)
8110bc2c:	108000b0 	cmpltui	r2,r2,2
8110bc30:	103fcb1e 	bne	r2,zero,8110bb60 <__reset+0xfb0ebb60>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110bc34:	d0a05717 	ldw	r2,-32420(gp)
8110bc38:	1009883a 	mov	r4,r2
8110bc3c:	112d2580 	call	8112d258 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110bc40:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bc44:	10803fcc 	andi	r2,r2,255
8110bc48:	10000326 	beq	r2,zero,8110bc58 <bSendUART128+0x328>
8110bc4c:	e0bfda43 	ldbu	r2,-151(fp)
8110bc50:	10800130 	cmpltui	r2,r2,4
8110bc54:	103fb41e 	bne	r2,zero,8110bb28 <__reset+0xfb0ebb28>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110bc58:	e0bfdd03 	ldbu	r2,-140(fp)
8110bc5c:	10803fcc 	andi	r2,r2,255
8110bc60:	10000326 	beq	r2,zero,8110bc70 <bSendUART128+0x340>
8110bc64:	e0bfda83 	ldbu	r2,-150(fp)
8110bc68:	10800130 	cmpltui	r2,r2,4
8110bc6c:	103f551e 	bne	r2,zero,8110b9c4 <__reset+0xfb0eb9c4>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110bc70:	e0bfdb17 	ldw	r2,-148(fp)
8110bc74:	10800060 	cmpeqi	r2,r2,1
8110bc78:	1000071e 	bne	r2,zero,8110bc98 <bSendUART128+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
8110bc7c:	d0a04e17 	ldw	r2,-32456(gp)
8110bc80:	1009883a 	mov	r4,r2
8110bc84:	112f0480 	call	8112f048 <OSSemPost>
8110bc88:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
8110bc8c:	e0bfdc43 	ldbu	r2,-143(fp)
8110bc90:	10000126 	beq	r2,zero,8110bc98 <bSendUART128+0x368>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110bc94:	110e5c40 	call	8110e5c4 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110bc98:	e0bfdc83 	ldbu	r2,-142(fp)
8110bc9c:	10803fcc 	andi	r2,r2,255
8110bca0:	10000326 	beq	r2,zero,8110bcb0 <bSendUART128+0x380>
8110bca4:	e0bfda03 	ldbu	r2,-152(fp)
8110bca8:	108001b0 	cmpltui	r2,r2,6
8110bcac:	103f381e 	bne	r2,zero,8110b990 <__reset+0xfb0eb990>

	return bSuccess;
8110bcb0:	e0bfdb17 	ldw	r2,-148(fp)
}
8110bcb4:	e037883a 	mov	sp,fp
8110bcb8:	dfc00117 	ldw	ra,4(sp)
8110bcbc:	df000017 	ldw	fp,0(sp)
8110bcc0:	dec00204 	addi	sp,sp,8
8110bcc4:	f800283a 	ret

8110bcc8 <bSendUART64>:



/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART64 ( char *cBuffer, short int siIdMessage ) {
8110bcc8:	deffe804 	addi	sp,sp,-96
8110bccc:	de00012e 	bgeu	sp,et,8110bcd4 <bSendUART64+0xc>
8110bcd0:	003b68fa 	trap	3
8110bcd4:	dfc01715 	stw	ra,92(sp)
8110bcd8:	df001615 	stw	fp,88(sp)
8110bcdc:	df001604 	addi	fp,sp,88
8110bce0:	e13ffe15 	stw	r4,-8(fp)
8110bce4:	2805883a 	mov	r2,r5
8110bce8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110bcec:	e03fea05 	stb	zero,-88(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110bcf0:	e03fea45 	stb	zero,-87(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110bcf4:	e03fea85 	stb	zero,-86(fp)
	unsigned char i = 0;
8110bcf8:	e03feac5 	stb	zero,-85(fp)
	bool bSuccess = FALSE;
8110bcfc:	e03feb15 	stw	zero,-84(fp)
	char cLocalBuffer64[64];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer64, cBuffer, strlen(cBuffer));
8110bd00:	e13ffe17 	ldw	r4,-8(fp)
8110bd04:	11132f80 	call	811132f8 <strlen>
8110bd08:	1007883a 	mov	r3,r2
8110bd0c:	e0bfed44 	addi	r2,fp,-75
8110bd10:	180d883a 	mov	r6,r3
8110bd14:	e17ffe17 	ldw	r5,-8(fp)
8110bd18:	1009883a 	mov	r4,r2
8110bd1c:	111297c0 	call	8111297c <memcpy>
	bSuccess = FALSE;
8110bd20:	e03feb15 	stw	zero,-84(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110bd24:	e03fea05 	stb	zero,-88(fp)
	do
	{
		ucCountRetriesSem++;
8110bd28:	e0bfea03 	ldbu	r2,-88(fp)
8110bd2c:	10800044 	addi	r2,r2,1
8110bd30:	e0bfea05 	stb	r2,-88(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110bd34:	d0a04a17 	ldw	r2,-32472(gp)
8110bd38:	e0ffec84 	addi	r3,fp,-78
8110bd3c:	180d883a 	mov	r6,r3
8110bd40:	01401904 	movi	r5,100
8110bd44:	1009883a 	mov	r4,r2
8110bd48:	112ecc00 	call	8112ecc0 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110bd4c:	e0bfec83 	ldbu	r2,-78(fp)
8110bd50:	10803fcc 	andi	r2,r2,255
8110bd54:	1000b61e 	bne	r2,zero,8110c030 <bSendUART64+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110bd58:	e03fea85 	stb	zero,-86(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110bd5c:	e0bfea83 	ldbu	r2,-86(fp)
8110bd60:	10800044 	addi	r2,r2,1
8110bd64:	e0bfea85 	stb	r2,-86(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110bd68:	d0a05b17 	ldw	r2,-32404(gp)
8110bd6c:	e0ffed04 	addi	r3,fp,-76
8110bd70:	180d883a 	mov	r6,r3
8110bd74:	01400144 	movi	r5,5
8110bd78:	1009883a 	mov	r4,r2
8110bd7c:	112ccb40 	call	8112ccb4 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110bd80:	e0bfed03 	ldbu	r2,-76(fp)
8110bd84:	10803fcc 	andi	r2,r2,255
8110bd88:	1000991e 	bne	r2,zero,8110bff0 <bSendUART64+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer64);
8110bd8c:	e0bfed44 	addi	r2,fp,-75
8110bd90:	1009883a 	mov	r4,r2
8110bd94:	1112da00 	call	81112da0 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110bd98:	d0a05917 	ldw	r2,-32412(gp)
8110bd9c:	e0ffecc4 	addi	r3,fp,-77
8110bda0:	180b883a 	mov	r5,r3
8110bda4:	1009883a 	mov	r4,r2
8110bda8:	112c6340 	call	8112c634 <OSMutexAccept>
8110bdac:	e0bfec05 	stb	r2,-80(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110bdb0:	e0bfecc3 	ldbu	r2,-77(fp)
8110bdb4:	10803fcc 	andi	r2,r2,255
8110bdb8:	10003a1e 	bne	r2,zero,8110bea4 <bSendUART64+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110bdbc:	e03feac5 	stb	zero,-85(fp)
8110bdc0:	00003206 	br	8110be8c <bSendUART64+0x1c4>
						{
							if ( xBuffer64[i].usiId == 0 ) {
8110bdc4:	e0ffeac3 	ldbu	r3,-85(fp)
8110bdc8:	00a04534 	movhi	r2,33044
8110bdcc:	108c1a04 	addi	r2,r2,12392
8110bdd0:	18c011a4 	muli	r3,r3,70
8110bdd4:	10c5883a 	add	r2,r2,r3
8110bdd8:	10801004 	addi	r2,r2,64
8110bddc:	1080000b 	ldhu	r2,0(r2)
8110bde0:	10bfffcc 	andi	r2,r2,65535
8110bde4:	1000261e 	bne	r2,zero,8110be80 <bSendUART64+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110bde8:	00800044 	movi	r2,1
8110bdec:	e0bfeb15 	stw	r2,-84(fp)
								memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110bdf0:	e0bfeac3 	ldbu	r2,-85(fp)
8110bdf4:	10c011a4 	muli	r3,r2,70
8110bdf8:	00a04534 	movhi	r2,33044
8110bdfc:	108c1a04 	addi	r2,r2,12392
8110be00:	1885883a 	add	r2,r3,r2
8110be04:	1009883a 	mov	r4,r2
8110be08:	e0bfed44 	addi	r2,fp,-75
8110be0c:	00c01004 	movi	r3,64
8110be10:	180d883a 	mov	r6,r3
8110be14:	100b883a 	mov	r5,r2
8110be18:	111297c0 	call	8111297c <memcpy>
								xBuffer64[i].usiId = siIdMessage;
8110be1c:	e13feac3 	ldbu	r4,-85(fp)
8110be20:	e0ffff0b 	ldhu	r3,-4(fp)
8110be24:	00a04534 	movhi	r2,33044
8110be28:	108c1a04 	addi	r2,r2,12392
8110be2c:	210011a4 	muli	r4,r4,70
8110be30:	1105883a 	add	r2,r2,r4
8110be34:	10801004 	addi	r2,r2,64
8110be38:	10c0000d 	sth	r3,0(r2)
								xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110be3c:	e0ffeac3 	ldbu	r3,-85(fp)
8110be40:	00a04534 	movhi	r2,33044
8110be44:	108c1a04 	addi	r2,r2,12392
8110be48:	18c011a4 	muli	r3,r3,70
8110be4c:	10c5883a 	add	r2,r2,r3
8110be50:	10801104 	addi	r2,r2,68
8110be54:	00c000c4 	movi	r3,3
8110be58:	10c00005 	stb	r3,0(r2)
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110be5c:	e0ffeac3 	ldbu	r3,-85(fp)
8110be60:	00a04534 	movhi	r2,33044
8110be64:	108c1a04 	addi	r2,r2,12392
8110be68:	18c011a4 	muli	r3,r3,70
8110be6c:	10c5883a 	add	r2,r2,r3
8110be70:	10801084 	addi	r2,r2,66
8110be74:	00c00144 	movi	r3,5
8110be78:	10c0000d 	sth	r3,0(r2)
								break;
8110be7c:	00000606 	br	8110be98 <bSendUART64+0x1d0>
					puts(cLocalBuffer64);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110be80:	e0bfeac3 	ldbu	r2,-85(fp)
8110be84:	10800044 	addi	r2,r2,1
8110be88:	e0bfeac5 	stb	r2,-85(fp)
8110be8c:	e0bfeac3 	ldbu	r2,-85(fp)
8110be90:	10800130 	cmpltui	r2,r2,4
8110be94:	103fcb1e 	bne	r2,zero,8110bdc4 <__reset+0xfb0ebdc4>
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
8110be98:	d0a05917 	ldw	r2,-32412(gp)
8110be9c:	1009883a 	mov	r4,r2
8110bea0:	112d2580 	call	8112d258 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110bea4:	d0a05b17 	ldw	r2,-32404(gp)
8110bea8:	1009883a 	mov	r4,r2
8110beac:	112d2580 	call	8112d258 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110beb0:	e0bfeb17 	ldw	r2,-84(fp)
8110beb4:	10800060 	cmpeqi	r2,r2,1
8110beb8:	10004d1e 	bne	r2,zero,8110bff0 <bSendUART64+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110bebc:	e03fea45 	stb	zero,-87(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110bec0:	e0bfea43 	ldbu	r2,-87(fp)
8110bec4:	10800044 	addi	r2,r2,1
8110bec8:	e0bfea45 	stb	r2,-87(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110becc:	d0a05917 	ldw	r2,-32412(gp)
8110bed0:	e0ffecc4 	addi	r3,fp,-77
8110bed4:	180d883a 	mov	r6,r3
8110bed8:	01400144 	movi	r5,5
8110bedc:	1009883a 	mov	r4,r2
8110bee0:	112ccb40 	call	8112ccb4 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110bee4:	e0bfecc3 	ldbu	r2,-77(fp)
8110bee8:	10803fcc 	andi	r2,r2,255
8110beec:	10003a1e 	bne	r2,zero,8110bfd8 <bSendUART64+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110bef0:	e03feac5 	stb	zero,-85(fp)
8110bef4:	00003206 	br	8110bfc0 <bSendUART64+0x2f8>
								{
									if ( xBuffer64[i].usiId == 0 ) {
8110bef8:	e0ffeac3 	ldbu	r3,-85(fp)
8110befc:	00a04534 	movhi	r2,33044
8110bf00:	108c1a04 	addi	r2,r2,12392
8110bf04:	18c011a4 	muli	r3,r3,70
8110bf08:	10c5883a 	add	r2,r2,r3
8110bf0c:	10801004 	addi	r2,r2,64
8110bf10:	1080000b 	ldhu	r2,0(r2)
8110bf14:	10bfffcc 	andi	r2,r2,65535
8110bf18:	1000261e 	bne	r2,zero,8110bfb4 <bSendUART64+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110bf1c:	00800044 	movi	r2,1
8110bf20:	e0bfeb15 	stw	r2,-84(fp)
										memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110bf24:	e0bfeac3 	ldbu	r2,-85(fp)
8110bf28:	10c011a4 	muli	r3,r2,70
8110bf2c:	00a04534 	movhi	r2,33044
8110bf30:	108c1a04 	addi	r2,r2,12392
8110bf34:	1885883a 	add	r2,r3,r2
8110bf38:	1009883a 	mov	r4,r2
8110bf3c:	e0bfed44 	addi	r2,fp,-75
8110bf40:	00c01004 	movi	r3,64
8110bf44:	180d883a 	mov	r6,r3
8110bf48:	100b883a 	mov	r5,r2
8110bf4c:	111297c0 	call	8111297c <memcpy>
										xBuffer64[i].usiId = siIdMessage;
8110bf50:	e13feac3 	ldbu	r4,-85(fp)
8110bf54:	e0ffff0b 	ldhu	r3,-4(fp)
8110bf58:	00a04534 	movhi	r2,33044
8110bf5c:	108c1a04 	addi	r2,r2,12392
8110bf60:	210011a4 	muli	r4,r4,70
8110bf64:	1105883a 	add	r2,r2,r4
8110bf68:	10801004 	addi	r2,r2,64
8110bf6c:	10c0000d 	sth	r3,0(r2)
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110bf70:	e0ffeac3 	ldbu	r3,-85(fp)
8110bf74:	00a04534 	movhi	r2,33044
8110bf78:	108c1a04 	addi	r2,r2,12392
8110bf7c:	18c011a4 	muli	r3,r3,70
8110bf80:	10c5883a 	add	r2,r2,r3
8110bf84:	10801104 	addi	r2,r2,68
8110bf88:	00c000c4 	movi	r3,3
8110bf8c:	10c00005 	stb	r3,0(r2)
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110bf90:	e0ffeac3 	ldbu	r3,-85(fp)
8110bf94:	00a04534 	movhi	r2,33044
8110bf98:	108c1a04 	addi	r2,r2,12392
8110bf9c:	18c011a4 	muli	r3,r3,70
8110bfa0:	10c5883a 	add	r2,r2,r3
8110bfa4:	10801084 	addi	r2,r2,66
8110bfa8:	00c00144 	movi	r3,5
8110bfac:	10c0000d 	sth	r3,0(r2)
										break;
8110bfb0:	00000606 	br	8110bfcc <bSendUART64+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110bfb4:	e0bfeac3 	ldbu	r2,-85(fp)
8110bfb8:	10800044 	addi	r2,r2,1
8110bfbc:	e0bfeac5 	stb	r2,-85(fp)
8110bfc0:	e0bfeac3 	ldbu	r2,-85(fp)
8110bfc4:	10800130 	cmpltui	r2,r2,4
8110bfc8:	103fcb1e 	bne	r2,zero,8110bef8 <__reset+0xfb0ebef8>
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
8110bfcc:	d0a05917 	ldw	r2,-32412(gp)
8110bfd0:	1009883a 	mov	r4,r2
8110bfd4:	112d2580 	call	8112d258 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110bfd8:	e0bfecc3 	ldbu	r2,-77(fp)
8110bfdc:	10803fcc 	andi	r2,r2,255
8110bfe0:	10000326 	beq	r2,zero,8110bff0 <bSendUART64+0x328>
8110bfe4:	e0bfea43 	ldbu	r2,-87(fp)
8110bfe8:	10800130 	cmpltui	r2,r2,4
8110bfec:	103fb41e 	bne	r2,zero,8110bec0 <__reset+0xfb0ebec0>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110bff0:	e0bfed03 	ldbu	r2,-76(fp)
8110bff4:	10803fcc 	andi	r2,r2,255
8110bff8:	10000326 	beq	r2,zero,8110c008 <bSendUART64+0x340>
8110bffc:	e0bfea83 	ldbu	r2,-86(fp)
8110c000:	10800130 	cmpltui	r2,r2,4
8110c004:	103f551e 	bne	r2,zero,8110bd5c <__reset+0xfb0ebd5c>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c008:	e0bfeb17 	ldw	r2,-84(fp)
8110c00c:	10800060 	cmpeqi	r2,r2,1
8110c010:	1000071e 	bne	r2,zero,8110c030 <bSendUART64+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer64);
8110c014:	d0a04a17 	ldw	r2,-32472(gp)
8110c018:	1009883a 	mov	r4,r2
8110c01c:	112f0480 	call	8112f048 <OSSemPost>
8110c020:	e0bfec45 	stb	r2,-79(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c024:	e0bfec43 	ldbu	r2,-79(fp)
8110c028:	10000126 	beq	r2,zero,8110c030 <bSendUART64+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c02c:	110e55c0 	call	8110e55c <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c030:	e0bfec83 	ldbu	r2,-78(fp)
8110c034:	10803fcc 	andi	r2,r2,255
8110c038:	10000326 	beq	r2,zero,8110c048 <bSendUART64+0x380>
8110c03c:	e0bfea03 	ldbu	r2,-88(fp)
8110c040:	108001b0 	cmpltui	r2,r2,6
8110c044:	103f381e 	bne	r2,zero,8110bd28 <__reset+0xfb0ebd28>

	return bSuccess;
8110c048:	e0bfeb17 	ldw	r2,-84(fp)
}
8110c04c:	e037883a 	mov	sp,fp
8110c050:	dfc00117 	ldw	ra,4(sp)
8110c054:	df000017 	ldw	fp,0(sp)
8110c058:	dec00204 	addi	sp,sp,8
8110c05c:	f800283a 	ret

8110c060 <bSendUART32>:

/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART32 ( char *cBuffer, short int siIdMessage ) {
8110c060:	defff004 	addi	sp,sp,-64
8110c064:	de00012e 	bgeu	sp,et,8110c06c <bSendUART32+0xc>
8110c068:	003b68fa 	trap	3
8110c06c:	dfc00f15 	stw	ra,60(sp)
8110c070:	df000e15 	stw	fp,56(sp)
8110c074:	df000e04 	addi	fp,sp,56
8110c078:	e13ffe15 	stw	r4,-8(fp)
8110c07c:	2805883a 	mov	r2,r5
8110c080:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110c084:	e03ff205 	stb	zero,-56(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110c088:	e03ff245 	stb	zero,-55(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110c08c:	e03ff285 	stb	zero,-54(fp)
	unsigned char i = 0;
8110c090:	e03ff2c5 	stb	zero,-53(fp)
	bool bSuccess = FALSE;
8110c094:	e03ff315 	stw	zero,-52(fp)
	char cLocalBuffer32[32];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer32, cBuffer, strlen(cBuffer));
8110c098:	e13ffe17 	ldw	r4,-8(fp)
8110c09c:	11132f80 	call	811132f8 <strlen>
8110c0a0:	1007883a 	mov	r3,r2
8110c0a4:	e0bff544 	addi	r2,fp,-43
8110c0a8:	180d883a 	mov	r6,r3
8110c0ac:	e17ffe17 	ldw	r5,-8(fp)
8110c0b0:	1009883a 	mov	r4,r2
8110c0b4:	111297c0 	call	8111297c <memcpy>
	bSuccess = FALSE;
8110c0b8:	e03ff315 	stw	zero,-52(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110c0bc:	e03ff205 	stb	zero,-56(fp)
	do
	{
		ucCountRetriesSem++;
8110c0c0:	e0bff203 	ldbu	r2,-56(fp)
8110c0c4:	10800044 	addi	r2,r2,1
8110c0c8:	e0bff205 	stb	r2,-56(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110c0cc:	d0a05817 	ldw	r2,-32416(gp)
8110c0d0:	e0fff484 	addi	r3,fp,-46
8110c0d4:	180d883a 	mov	r6,r3
8110c0d8:	01401904 	movi	r5,100
8110c0dc:	1009883a 	mov	r4,r2
8110c0e0:	112ecc00 	call	8112ecc0 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110c0e4:	e0bff483 	ldbu	r2,-46(fp)
8110c0e8:	10803fcc 	andi	r2,r2,255
8110c0ec:	1000b61e 	bne	r2,zero,8110c3c8 <bSendUART32+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110c0f0:	e03ff285 	stb	zero,-54(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110c0f4:	e0bff283 	ldbu	r2,-54(fp)
8110c0f8:	10800044 	addi	r2,r2,1
8110c0fc:	e0bff285 	stb	r2,-54(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110c100:	d0a05b17 	ldw	r2,-32404(gp)
8110c104:	e0fff504 	addi	r3,fp,-44
8110c108:	180d883a 	mov	r6,r3
8110c10c:	01400144 	movi	r5,5
8110c110:	1009883a 	mov	r4,r2
8110c114:	112ccb40 	call	8112ccb4 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110c118:	e0bff503 	ldbu	r2,-44(fp)
8110c11c:	10803fcc 	andi	r2,r2,255
8110c120:	1000991e 	bne	r2,zero,8110c388 <bSendUART32+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer32);
8110c124:	e0bff544 	addi	r2,fp,-43
8110c128:	1009883a 	mov	r4,r2
8110c12c:	1112da00 	call	81112da0 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110c130:	d0a05517 	ldw	r2,-32428(gp)
8110c134:	e0fff4c4 	addi	r3,fp,-45
8110c138:	180b883a 	mov	r5,r3
8110c13c:	1009883a 	mov	r4,r2
8110c140:	112c6340 	call	8112c634 <OSMutexAccept>
8110c144:	e0bff405 	stb	r2,-48(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110c148:	e0bff4c3 	ldbu	r2,-45(fp)
8110c14c:	10803fcc 	andi	r2,r2,255
8110c150:	10003a1e 	bne	r2,zero,8110c23c <bSendUART32+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c154:	e03ff2c5 	stb	zero,-53(fp)
8110c158:	00003206 	br	8110c224 <bSendUART32+0x1c4>
						{
							if ( xBuffer32[i].usiId == 0 ) {
8110c15c:	e0fff2c3 	ldbu	r3,-53(fp)
8110c160:	00a04534 	movhi	r2,33044
8110c164:	109d7704 	addi	r2,r2,30172
8110c168:	18c009a4 	muli	r3,r3,38
8110c16c:	10c5883a 	add	r2,r2,r3
8110c170:	10800804 	addi	r2,r2,32
8110c174:	1080000b 	ldhu	r2,0(r2)
8110c178:	10bfffcc 	andi	r2,r2,65535
8110c17c:	1000261e 	bne	r2,zero,8110c218 <bSendUART32+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110c180:	00800044 	movi	r2,1
8110c184:	e0bff315 	stw	r2,-52(fp)
								memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c188:	e0bff2c3 	ldbu	r2,-53(fp)
8110c18c:	10c009a4 	muli	r3,r2,38
8110c190:	00a04534 	movhi	r2,33044
8110c194:	109d7704 	addi	r2,r2,30172
8110c198:	1885883a 	add	r2,r3,r2
8110c19c:	1009883a 	mov	r4,r2
8110c1a0:	e0bff544 	addi	r2,fp,-43
8110c1a4:	00c00804 	movi	r3,32
8110c1a8:	180d883a 	mov	r6,r3
8110c1ac:	100b883a 	mov	r5,r2
8110c1b0:	111297c0 	call	8111297c <memcpy>
								xBuffer32[i].usiId = siIdMessage;
8110c1b4:	e13ff2c3 	ldbu	r4,-53(fp)
8110c1b8:	e0ffff0b 	ldhu	r3,-4(fp)
8110c1bc:	00a04534 	movhi	r2,33044
8110c1c0:	109d7704 	addi	r2,r2,30172
8110c1c4:	210009a4 	muli	r4,r4,38
8110c1c8:	1105883a 	add	r2,r2,r4
8110c1cc:	10800804 	addi	r2,r2,32
8110c1d0:	10c0000d 	sth	r3,0(r2)
								xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c1d4:	e0fff2c3 	ldbu	r3,-53(fp)
8110c1d8:	00a04534 	movhi	r2,33044
8110c1dc:	109d7704 	addi	r2,r2,30172
8110c1e0:	18c009a4 	muli	r3,r3,38
8110c1e4:	10c5883a 	add	r2,r2,r3
8110c1e8:	10800904 	addi	r2,r2,36
8110c1ec:	00c000c4 	movi	r3,3
8110c1f0:	10c00005 	stb	r3,0(r2)
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c1f4:	e0fff2c3 	ldbu	r3,-53(fp)
8110c1f8:	00a04534 	movhi	r2,33044
8110c1fc:	109d7704 	addi	r2,r2,30172
8110c200:	18c009a4 	muli	r3,r3,38
8110c204:	10c5883a 	add	r2,r2,r3
8110c208:	10800884 	addi	r2,r2,34
8110c20c:	00c00144 	movi	r3,5
8110c210:	10c0000d 	sth	r3,0(r2)
								break;
8110c214:	00000606 	br	8110c230 <bSendUART32+0x1d0>
					puts(cLocalBuffer32);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c218:	e0bff2c3 	ldbu	r2,-53(fp)
8110c21c:	10800044 	addi	r2,r2,1
8110c220:	e0bff2c5 	stb	r2,-53(fp)
8110c224:	e0bff2c3 	ldbu	r2,-53(fp)
8110c228:	10800230 	cmpltui	r2,r2,8
8110c22c:	103fcb1e 	bne	r2,zero,8110c15c <__reset+0xfb0ec15c>
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c230:	d0a05517 	ldw	r2,-32428(gp)
8110c234:	1009883a 	mov	r4,r2
8110c238:	112d2580 	call	8112d258 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c23c:	d0a05b17 	ldw	r2,-32404(gp)
8110c240:	1009883a 	mov	r4,r2
8110c244:	112d2580 	call	8112d258 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c248:	e0bff317 	ldw	r2,-52(fp)
8110c24c:	10800060 	cmpeqi	r2,r2,1
8110c250:	10004d1e 	bne	r2,zero,8110c388 <bSendUART32+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c254:	e03ff245 	stb	zero,-55(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c258:	e0bff243 	ldbu	r2,-55(fp)
8110c25c:	10800044 	addi	r2,r2,1
8110c260:	e0bff245 	stb	r2,-55(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c264:	d0a05517 	ldw	r2,-32428(gp)
8110c268:	e0fff4c4 	addi	r3,fp,-45
8110c26c:	180d883a 	mov	r6,r3
8110c270:	01400144 	movi	r5,5
8110c274:	1009883a 	mov	r4,r2
8110c278:	112ccb40 	call	8112ccb4 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c27c:	e0bff4c3 	ldbu	r2,-45(fp)
8110c280:	10803fcc 	andi	r2,r2,255
8110c284:	10003a1e 	bne	r2,zero,8110c370 <bSendUART32+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c288:	e03ff2c5 	stb	zero,-53(fp)
8110c28c:	00003206 	br	8110c358 <bSendUART32+0x2f8>
								{
									if ( xBuffer32[i].usiId == 0 ) {
8110c290:	e0fff2c3 	ldbu	r3,-53(fp)
8110c294:	00a04534 	movhi	r2,33044
8110c298:	109d7704 	addi	r2,r2,30172
8110c29c:	18c009a4 	muli	r3,r3,38
8110c2a0:	10c5883a 	add	r2,r2,r3
8110c2a4:	10800804 	addi	r2,r2,32
8110c2a8:	1080000b 	ldhu	r2,0(r2)
8110c2ac:	10bfffcc 	andi	r2,r2,65535
8110c2b0:	1000261e 	bne	r2,zero,8110c34c <bSendUART32+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c2b4:	00800044 	movi	r2,1
8110c2b8:	e0bff315 	stw	r2,-52(fp)
										memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c2bc:	e0bff2c3 	ldbu	r2,-53(fp)
8110c2c0:	10c009a4 	muli	r3,r2,38
8110c2c4:	00a04534 	movhi	r2,33044
8110c2c8:	109d7704 	addi	r2,r2,30172
8110c2cc:	1885883a 	add	r2,r3,r2
8110c2d0:	1009883a 	mov	r4,r2
8110c2d4:	e0bff544 	addi	r2,fp,-43
8110c2d8:	00c00804 	movi	r3,32
8110c2dc:	180d883a 	mov	r6,r3
8110c2e0:	100b883a 	mov	r5,r2
8110c2e4:	111297c0 	call	8111297c <memcpy>
										xBuffer32[i].usiId = siIdMessage;
8110c2e8:	e13ff2c3 	ldbu	r4,-53(fp)
8110c2ec:	e0ffff0b 	ldhu	r3,-4(fp)
8110c2f0:	00a04534 	movhi	r2,33044
8110c2f4:	109d7704 	addi	r2,r2,30172
8110c2f8:	210009a4 	muli	r4,r4,38
8110c2fc:	1105883a 	add	r2,r2,r4
8110c300:	10800804 	addi	r2,r2,32
8110c304:	10c0000d 	sth	r3,0(r2)
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c308:	e0fff2c3 	ldbu	r3,-53(fp)
8110c30c:	00a04534 	movhi	r2,33044
8110c310:	109d7704 	addi	r2,r2,30172
8110c314:	18c009a4 	muli	r3,r3,38
8110c318:	10c5883a 	add	r2,r2,r3
8110c31c:	10800904 	addi	r2,r2,36
8110c320:	00c000c4 	movi	r3,3
8110c324:	10c00005 	stb	r3,0(r2)
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c328:	e0fff2c3 	ldbu	r3,-53(fp)
8110c32c:	00a04534 	movhi	r2,33044
8110c330:	109d7704 	addi	r2,r2,30172
8110c334:	18c009a4 	muli	r3,r3,38
8110c338:	10c5883a 	add	r2,r2,r3
8110c33c:	10800884 	addi	r2,r2,34
8110c340:	00c00144 	movi	r3,5
8110c344:	10c0000d 	sth	r3,0(r2)
										break;
8110c348:	00000606 	br	8110c364 <bSendUART32+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c34c:	e0bff2c3 	ldbu	r2,-53(fp)
8110c350:	10800044 	addi	r2,r2,1
8110c354:	e0bff2c5 	stb	r2,-53(fp)
8110c358:	e0bff2c3 	ldbu	r2,-53(fp)
8110c35c:	10800230 	cmpltui	r2,r2,8
8110c360:	103fcb1e 	bne	r2,zero,8110c290 <__reset+0xfb0ec290>
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c364:	d0a05517 	ldw	r2,-32428(gp)
8110c368:	1009883a 	mov	r4,r2
8110c36c:	112d2580 	call	8112d258 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c370:	e0bff4c3 	ldbu	r2,-45(fp)
8110c374:	10803fcc 	andi	r2,r2,255
8110c378:	10000326 	beq	r2,zero,8110c388 <bSendUART32+0x328>
8110c37c:	e0bff243 	ldbu	r2,-55(fp)
8110c380:	10800130 	cmpltui	r2,r2,4
8110c384:	103fb41e 	bne	r2,zero,8110c258 <__reset+0xfb0ec258>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c388:	e0bff503 	ldbu	r2,-44(fp)
8110c38c:	10803fcc 	andi	r2,r2,255
8110c390:	10000326 	beq	r2,zero,8110c3a0 <bSendUART32+0x340>
8110c394:	e0bff283 	ldbu	r2,-54(fp)
8110c398:	10800130 	cmpltui	r2,r2,4
8110c39c:	103f551e 	bne	r2,zero,8110c0f4 <__reset+0xfb0ec0f4>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c3a0:	e0bff317 	ldw	r2,-52(fp)
8110c3a4:	10800060 	cmpeqi	r2,r2,1
8110c3a8:	1000071e 	bne	r2,zero,8110c3c8 <bSendUART32+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer32);
8110c3ac:	d0a05817 	ldw	r2,-32416(gp)
8110c3b0:	1009883a 	mov	r4,r2
8110c3b4:	112f0480 	call	8112f048 <OSSemPost>
8110c3b8:	e0bff445 	stb	r2,-47(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c3bc:	e0bff443 	ldbu	r2,-47(fp)
8110c3c0:	10000126 	beq	r2,zero,8110c3c8 <bSendUART32+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c3c4:	110e55c0 	call	8110e55c <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c3c8:	e0bff483 	ldbu	r2,-46(fp)
8110c3cc:	10803fcc 	andi	r2,r2,255
8110c3d0:	10000326 	beq	r2,zero,8110c3e0 <bSendUART32+0x380>
8110c3d4:	e0bff203 	ldbu	r2,-56(fp)
8110c3d8:	108001b0 	cmpltui	r2,r2,6
8110c3dc:	103f381e 	bne	r2,zero,8110c0c0 <__reset+0xfb0ec0c0>

	return bSuccess;
8110c3e0:	e0bff317 	ldw	r2,-52(fp)
}
8110c3e4:	e037883a 	mov	sp,fp
8110c3e8:	dfc00117 	ldw	ra,4(sp)
8110c3ec:	df000017 	ldw	fp,0(sp)
8110c3f0:	dec00204 	addi	sp,sp,8
8110c3f4:	f800283a 	ret

8110c3f8 <bSendStatusFirstTime>:

/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendStatusFirstTime ( char *cBuffer, short int siIdMessage ) {
8110c3f8:	defff004 	addi	sp,sp,-64
8110c3fc:	de00012e 	bgeu	sp,et,8110c404 <bSendStatusFirstTime+0xc>
8110c400:	003b68fa 	trap	3
8110c404:	dfc00f15 	stw	ra,60(sp)
8110c408:	df000e15 	stw	fp,56(sp)
8110c40c:	df000e04 	addi	fp,sp,56
8110c410:	e13ffe15 	stw	r4,-8(fp)
8110c414:	2805883a 	mov	r2,r5
8110c418:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110c41c:	e03ff205 	stb	zero,-56(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110c420:	e03ff245 	stb	zero,-55(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110c424:	e03ff285 	stb	zero,-54(fp)
	unsigned char i = 0;
8110c428:	e03ff2c5 	stb	zero,-53(fp)
	bool bSuccess = FALSE;
8110c42c:	e03ff315 	stw	zero,-52(fp)
	char cLocalBuffer32[32];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer32, cBuffer, strlen(cBuffer));
8110c430:	e13ffe17 	ldw	r4,-8(fp)
8110c434:	11132f80 	call	811132f8 <strlen>
8110c438:	1007883a 	mov	r3,r2
8110c43c:	e0bff544 	addi	r2,fp,-43
8110c440:	180d883a 	mov	r6,r3
8110c444:	e17ffe17 	ldw	r5,-8(fp)
8110c448:	1009883a 	mov	r4,r2
8110c44c:	111297c0 	call	8111297c <memcpy>
	bSuccess = FALSE;
8110c450:	e03ff315 	stw	zero,-52(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110c454:	e03ff205 	stb	zero,-56(fp)
	do
	{
		ucCountRetriesSem++;
8110c458:	e0bff203 	ldbu	r2,-56(fp)
8110c45c:	10800044 	addi	r2,r2,1
8110c460:	e0bff205 	stb	r2,-56(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110c464:	d0a05817 	ldw	r2,-32416(gp)
8110c468:	e0fff484 	addi	r3,fp,-46
8110c46c:	180d883a 	mov	r6,r3
8110c470:	01401904 	movi	r5,100
8110c474:	1009883a 	mov	r4,r2
8110c478:	112ecc00 	call	8112ecc0 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110c47c:	e0bff483 	ldbu	r2,-46(fp)
8110c480:	10803fcc 	andi	r2,r2,255
8110c484:	1000b61e 	bne	r2,zero,8110c760 <bSendStatusFirstTime+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110c488:	e03ff285 	stb	zero,-54(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110c48c:	e0bff283 	ldbu	r2,-54(fp)
8110c490:	10800044 	addi	r2,r2,1
8110c494:	e0bff285 	stb	r2,-54(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110c498:	d0a05b17 	ldw	r2,-32404(gp)
8110c49c:	e0fff504 	addi	r3,fp,-44
8110c4a0:	180d883a 	mov	r6,r3
8110c4a4:	01400144 	movi	r5,5
8110c4a8:	1009883a 	mov	r4,r2
8110c4ac:	112ccb40 	call	8112ccb4 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110c4b0:	e0bff503 	ldbu	r2,-44(fp)
8110c4b4:	10803fcc 	andi	r2,r2,255
8110c4b8:	1000991e 	bne	r2,zero,8110c720 <bSendStatusFirstTime+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer32);
8110c4bc:	e0bff544 	addi	r2,fp,-43
8110c4c0:	1009883a 	mov	r4,r2
8110c4c4:	1112da00 	call	81112da0 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110c4c8:	d0a05517 	ldw	r2,-32428(gp)
8110c4cc:	e0fff4c4 	addi	r3,fp,-45
8110c4d0:	180b883a 	mov	r5,r3
8110c4d4:	1009883a 	mov	r4,r2
8110c4d8:	112c6340 	call	8112c634 <OSMutexAccept>
8110c4dc:	e0bff405 	stb	r2,-48(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110c4e0:	e0bff4c3 	ldbu	r2,-45(fp)
8110c4e4:	10803fcc 	andi	r2,r2,255
8110c4e8:	10003a1e 	bne	r2,zero,8110c5d4 <bSendStatusFirstTime+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c4ec:	e03ff2c5 	stb	zero,-53(fp)
8110c4f0:	00003206 	br	8110c5bc <bSendStatusFirstTime+0x1c4>
						{
							if ( xBuffer32[i].usiId == 0 ) {
8110c4f4:	e0fff2c3 	ldbu	r3,-53(fp)
8110c4f8:	00a04534 	movhi	r2,33044
8110c4fc:	109d7704 	addi	r2,r2,30172
8110c500:	18c009a4 	muli	r3,r3,38
8110c504:	10c5883a 	add	r2,r2,r3
8110c508:	10800804 	addi	r2,r2,32
8110c50c:	1080000b 	ldhu	r2,0(r2)
8110c510:	10bfffcc 	andi	r2,r2,65535
8110c514:	1000261e 	bne	r2,zero,8110c5b0 <bSendStatusFirstTime+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110c518:	00800044 	movi	r2,1
8110c51c:	e0bff315 	stw	r2,-52(fp)
								memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c520:	e0bff2c3 	ldbu	r2,-53(fp)
8110c524:	10c009a4 	muli	r3,r2,38
8110c528:	00a04534 	movhi	r2,33044
8110c52c:	109d7704 	addi	r2,r2,30172
8110c530:	1885883a 	add	r2,r3,r2
8110c534:	1009883a 	mov	r4,r2
8110c538:	e0bff544 	addi	r2,fp,-43
8110c53c:	00c00804 	movi	r3,32
8110c540:	180d883a 	mov	r6,r3
8110c544:	100b883a 	mov	r5,r2
8110c548:	111297c0 	call	8111297c <memcpy>
								xBuffer32[i].usiId = siIdMessage;
8110c54c:	e13ff2c3 	ldbu	r4,-53(fp)
8110c550:	e0ffff0b 	ldhu	r3,-4(fp)
8110c554:	00a04534 	movhi	r2,33044
8110c558:	109d7704 	addi	r2,r2,30172
8110c55c:	210009a4 	muli	r4,r4,38
8110c560:	1105883a 	add	r2,r2,r4
8110c564:	10800804 	addi	r2,r2,32
8110c568:	10c0000d 	sth	r3,0(r2)
								xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
8110c56c:	e0fff2c3 	ldbu	r3,-53(fp)
8110c570:	00a04534 	movhi	r2,33044
8110c574:	109d7704 	addi	r2,r2,30172
8110c578:	18c009a4 	muli	r3,r3,38
8110c57c:	10c5883a 	add	r2,r2,r3
8110c580:	10800904 	addi	r2,r2,36
8110c584:	00ffffc4 	movi	r3,-1
8110c588:	10c00005 	stb	r3,0(r2)
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c58c:	e0fff2c3 	ldbu	r3,-53(fp)
8110c590:	00a04534 	movhi	r2,33044
8110c594:	109d7704 	addi	r2,r2,30172
8110c598:	18c009a4 	muli	r3,r3,38
8110c59c:	10c5883a 	add	r2,r2,r3
8110c5a0:	10800884 	addi	r2,r2,34
8110c5a4:	00c00144 	movi	r3,5
8110c5a8:	10c0000d 	sth	r3,0(r2)
								break;
8110c5ac:	00000606 	br	8110c5c8 <bSendStatusFirstTime+0x1d0>
					puts(cLocalBuffer32);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c5b0:	e0bff2c3 	ldbu	r2,-53(fp)
8110c5b4:	10800044 	addi	r2,r2,1
8110c5b8:	e0bff2c5 	stb	r2,-53(fp)
8110c5bc:	e0bff2c3 	ldbu	r2,-53(fp)
8110c5c0:	10800230 	cmpltui	r2,r2,8
8110c5c4:	103fcb1e 	bne	r2,zero,8110c4f4 <__reset+0xfb0ec4f4>
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c5c8:	d0a05517 	ldw	r2,-32428(gp)
8110c5cc:	1009883a 	mov	r4,r2
8110c5d0:	112d2580 	call	8112d258 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c5d4:	d0a05b17 	ldw	r2,-32404(gp)
8110c5d8:	1009883a 	mov	r4,r2
8110c5dc:	112d2580 	call	8112d258 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c5e0:	e0bff317 	ldw	r2,-52(fp)
8110c5e4:	10800060 	cmpeqi	r2,r2,1
8110c5e8:	10004d1e 	bne	r2,zero,8110c720 <bSendStatusFirstTime+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c5ec:	e03ff245 	stb	zero,-55(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c5f0:	e0bff243 	ldbu	r2,-55(fp)
8110c5f4:	10800044 	addi	r2,r2,1
8110c5f8:	e0bff245 	stb	r2,-55(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c5fc:	d0a05517 	ldw	r2,-32428(gp)
8110c600:	e0fff4c4 	addi	r3,fp,-45
8110c604:	180d883a 	mov	r6,r3
8110c608:	01400144 	movi	r5,5
8110c60c:	1009883a 	mov	r4,r2
8110c610:	112ccb40 	call	8112ccb4 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c614:	e0bff4c3 	ldbu	r2,-45(fp)
8110c618:	10803fcc 	andi	r2,r2,255
8110c61c:	10003a1e 	bne	r2,zero,8110c708 <bSendStatusFirstTime+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c620:	e03ff2c5 	stb	zero,-53(fp)
8110c624:	00003206 	br	8110c6f0 <bSendStatusFirstTime+0x2f8>
								{
									if ( xBuffer32[i].usiId == 0 ) {
8110c628:	e0fff2c3 	ldbu	r3,-53(fp)
8110c62c:	00a04534 	movhi	r2,33044
8110c630:	109d7704 	addi	r2,r2,30172
8110c634:	18c009a4 	muli	r3,r3,38
8110c638:	10c5883a 	add	r2,r2,r3
8110c63c:	10800804 	addi	r2,r2,32
8110c640:	1080000b 	ldhu	r2,0(r2)
8110c644:	10bfffcc 	andi	r2,r2,65535
8110c648:	1000261e 	bne	r2,zero,8110c6e4 <bSendStatusFirstTime+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c64c:	00800044 	movi	r2,1
8110c650:	e0bff315 	stw	r2,-52(fp)
										memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c654:	e0bff2c3 	ldbu	r2,-53(fp)
8110c658:	10c009a4 	muli	r3,r2,38
8110c65c:	00a04534 	movhi	r2,33044
8110c660:	109d7704 	addi	r2,r2,30172
8110c664:	1885883a 	add	r2,r3,r2
8110c668:	1009883a 	mov	r4,r2
8110c66c:	e0bff544 	addi	r2,fp,-43
8110c670:	00c00804 	movi	r3,32
8110c674:	180d883a 	mov	r6,r3
8110c678:	100b883a 	mov	r5,r2
8110c67c:	111297c0 	call	8111297c <memcpy>
										xBuffer32[i].usiId = siIdMessage;
8110c680:	e13ff2c3 	ldbu	r4,-53(fp)
8110c684:	e0ffff0b 	ldhu	r3,-4(fp)
8110c688:	00a04534 	movhi	r2,33044
8110c68c:	109d7704 	addi	r2,r2,30172
8110c690:	210009a4 	muli	r4,r4,38
8110c694:	1105883a 	add	r2,r2,r4
8110c698:	10800804 	addi	r2,r2,32
8110c69c:	10c0000d 	sth	r3,0(r2)
										xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
8110c6a0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c6a4:	00a04534 	movhi	r2,33044
8110c6a8:	109d7704 	addi	r2,r2,30172
8110c6ac:	18c009a4 	muli	r3,r3,38
8110c6b0:	10c5883a 	add	r2,r2,r3
8110c6b4:	10800904 	addi	r2,r2,36
8110c6b8:	00ffffc4 	movi	r3,-1
8110c6bc:	10c00005 	stb	r3,0(r2)
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c6c0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c6c4:	00a04534 	movhi	r2,33044
8110c6c8:	109d7704 	addi	r2,r2,30172
8110c6cc:	18c009a4 	muli	r3,r3,38
8110c6d0:	10c5883a 	add	r2,r2,r3
8110c6d4:	10800884 	addi	r2,r2,34
8110c6d8:	00c00144 	movi	r3,5
8110c6dc:	10c0000d 	sth	r3,0(r2)
										break;
8110c6e0:	00000606 	br	8110c6fc <bSendStatusFirstTime+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c6e4:	e0bff2c3 	ldbu	r2,-53(fp)
8110c6e8:	10800044 	addi	r2,r2,1
8110c6ec:	e0bff2c5 	stb	r2,-53(fp)
8110c6f0:	e0bff2c3 	ldbu	r2,-53(fp)
8110c6f4:	10800230 	cmpltui	r2,r2,8
8110c6f8:	103fcb1e 	bne	r2,zero,8110c628 <__reset+0xfb0ec628>
										xBuffer32[i].ucNofRetries = N_RETRIES_INI_INF;
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c6fc:	d0a05517 	ldw	r2,-32428(gp)
8110c700:	1009883a 	mov	r4,r2
8110c704:	112d2580 	call	8112d258 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c708:	e0bff4c3 	ldbu	r2,-45(fp)
8110c70c:	10803fcc 	andi	r2,r2,255
8110c710:	10000326 	beq	r2,zero,8110c720 <bSendStatusFirstTime+0x328>
8110c714:	e0bff243 	ldbu	r2,-55(fp)
8110c718:	10800130 	cmpltui	r2,r2,4
8110c71c:	103fb41e 	bne	r2,zero,8110c5f0 <__reset+0xfb0ec5f0>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c720:	e0bff503 	ldbu	r2,-44(fp)
8110c724:	10803fcc 	andi	r2,r2,255
8110c728:	10000326 	beq	r2,zero,8110c738 <bSendStatusFirstTime+0x340>
8110c72c:	e0bff283 	ldbu	r2,-54(fp)
8110c730:	10800130 	cmpltui	r2,r2,4
8110c734:	103f551e 	bne	r2,zero,8110c48c <__reset+0xfb0ec48c>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c738:	e0bff317 	ldw	r2,-52(fp)
8110c73c:	10800060 	cmpeqi	r2,r2,1
8110c740:	1000071e 	bne	r2,zero,8110c760 <bSendStatusFirstTime+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer32);
8110c744:	d0a05817 	ldw	r2,-32416(gp)
8110c748:	1009883a 	mov	r4,r2
8110c74c:	112f0480 	call	8112f048 <OSSemPost>
8110c750:	e0bff445 	stb	r2,-47(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c754:	e0bff443 	ldbu	r2,-47(fp)
8110c758:	10000126 	beq	r2,zero,8110c760 <bSendStatusFirstTime+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c75c:	110e55c0 	call	8110e55c <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c760:	e0bff483 	ldbu	r2,-46(fp)
8110c764:	10803fcc 	andi	r2,r2,255
8110c768:	10000326 	beq	r2,zero,8110c778 <bSendStatusFirstTime+0x380>
8110c76c:	e0bff203 	ldbu	r2,-56(fp)
8110c770:	108001b0 	cmpltui	r2,r2,6
8110c774:	103f381e 	bne	r2,zero,8110c458 <__reset+0xfb0ec458>

	return bSuccess;
8110c778:	e0bff317 	ldw	r2,-52(fp)
}
8110c77c:	e037883a 	mov	sp,fp
8110c780:	dfc00117 	ldw	ra,4(sp)
8110c784:	df000017 	ldw	fp,0(sp)
8110c788:	dec00204 	addi	sp,sp,8
8110c78c:	f800283a 	ret

8110c790 <vSendEthConf>:



void vSendEthConf ( void ) {
8110c790:	deffc304 	addi	sp,sp,-244
8110c794:	de00012e 	bgeu	sp,et,8110c79c <vSendEthConf+0xc>
8110c798:	003b68fa 	trap	3
8110c79c:	dfc03c15 	stw	ra,240(sp)
8110c7a0:	df003b15 	stw	fp,236(sp)
8110c7a4:	dd403a15 	stw	r21,232(sp)
8110c7a8:	dd003915 	stw	r20,228(sp)
8110c7ac:	dcc03815 	stw	r19,224(sp)
8110c7b0:	dc803715 	stw	r18,220(sp)
8110c7b4:	dc403615 	stw	r17,216(sp)
8110c7b8:	dc003515 	stw	r16,212(sp)
8110c7bc:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110c7c0:	e03fd98d 	sth	zero,-154(fp)
8110c7c4:	e03fda0d 	sth	zero,-152(fp)
8110c7c8:	e0bfda84 	addi	r2,fp,-150
8110c7cc:	00c01f04 	movi	r3,124
8110c7d0:	180d883a 	mov	r6,r3
8110c7d4:	000b883a 	mov	r5,zero
8110c7d8:	1009883a 	mov	r4,r2
8110c7dc:	1112acc0 	call	81112acc <memset>
    unsigned char crc = 0;
8110c7e0:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110c7e4:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110c7e8:	110cc380 	call	8110cc38 <usiGetIdCMD>
8110c7ec:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c7f0:	e57fd90b 	ldhu	r21,-156(fp)
8110c7f4:	00a04574 	movhi	r2,33045
8110c7f8:	10be5a04 	addi	r2,r2,-1688
8110c7fc:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c800:	00a04574 	movhi	r2,33045
8110c804:	10be5a04 	addi	r2,r2,-1688
8110c808:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c80c:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c810:	00a04574 	movhi	r2,33045
8110c814:	10be5a04 	addi	r2,r2,-1688
8110c818:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c81c:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c820:	00a04574 	movhi	r2,33045
8110c824:	10be5a04 	addi	r2,r2,-1688
8110c828:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c82c:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c830:	00a04574 	movhi	r2,33045
8110c834:	10be5a04 	addi	r2,r2,-1688
8110c838:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c83c:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c840:	00a04574 	movhi	r2,33045
8110c844:	10be5a04 	addi	r2,r2,-1688
8110c848:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c84c:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c850:	00a04574 	movhi	r2,33045
8110c854:	10be5a04 	addi	r2,r2,-1688
8110c858:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c85c:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c860:	00a04574 	movhi	r2,33045
8110c864:	10be5a04 	addi	r2,r2,-1688
8110c868:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c86c:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c870:	00a04574 	movhi	r2,33045
8110c874:	10be5a04 	addi	r2,r2,-1688
8110c878:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c87c:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c880:	00a04574 	movhi	r2,33045
8110c884:	10be5a04 	addi	r2,r2,-1688
8110c888:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c88c:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c890:	00a04574 	movhi	r2,33045
8110c894:	10be5a04 	addi	r2,r2,-1688
8110c898:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c89c:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c8a0:	00a04574 	movhi	r2,33045
8110c8a4:	10be5a04 	addi	r2,r2,-1688
8110c8a8:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8ac:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c8b0:	00a04574 	movhi	r2,33045
8110c8b4:	10be5a04 	addi	r2,r2,-1688
8110c8b8:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8bc:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c8c0:	00a04574 	movhi	r2,33045
8110c8c4:	10be5a04 	addi	r2,r2,-1688
8110c8c8:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8cc:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c8d0:	00a04574 	movhi	r2,33045
8110c8d4:	10be5a04 	addi	r2,r2,-1688
8110c8d8:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8dc:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c8e0:	00a04574 	movhi	r2,33045
8110c8e4:	10be5a04 	addi	r2,r2,-1688
8110c8e8:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8ec:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c8f0:	00a04574 	movhi	r2,33045
8110c8f4:	10be5a04 	addi	r2,r2,-1688
8110c8f8:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c8fc:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110c900:	00a04574 	movhi	r2,33045
8110c904:	10be5a04 	addi	r2,r2,-1688
8110c908:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c90c:	10bfffcc 	andi	r2,r2,65535
8110c910:	e53fd984 	addi	r20,fp,-154
8110c914:	d8801115 	stw	r2,68(sp)
8110c918:	dcc01015 	stw	r19,64(sp)
8110c91c:	dc800f15 	stw	r18,60(sp)
8110c920:	dc400e15 	stw	r17,56(sp)
8110c924:	dc000d15 	stw	r16,52(sp)
8110c928:	dbc00c15 	stw	r15,48(sp)
8110c92c:	db800b15 	stw	r14,44(sp)
8110c930:	db400a15 	stw	r13,40(sp)
8110c934:	db000915 	stw	r12,36(sp)
8110c938:	dac00815 	stw	r11,32(sp)
8110c93c:	da800715 	stw	r10,28(sp)
8110c940:	da400615 	stw	r9,24(sp)
8110c944:	da000515 	stw	r8,20(sp)
8110c948:	d9c00415 	stw	r7,16(sp)
8110c94c:	d9800315 	stw	r6,12(sp)
8110c950:	d9400215 	stw	r5,8(sp)
8110c954:	d9000115 	stw	r4,4(sp)
8110c958:	d8c00015 	stw	r3,0(sp)
8110c95c:	a80f883a 	mov	r7,r21
8110c960:	018010c4 	movi	r6,67
8110c964:	01604534 	movhi	r5,33044
8110c968:	2973ba04 	addi	r5,r5,-12568
8110c96c:	a009883a 	mov	r4,r20
8110c970:	11130e40 	call	811130e4 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110c974:	e0bfd984 	addi	r2,fp,-154
8110c978:	1009883a 	mov	r4,r2
8110c97c:	11132f80 	call	811132f8 <strlen>
8110c980:	1007883a 	mov	r3,r2
8110c984:	e0bfd984 	addi	r2,fp,-154
8110c988:	180b883a 	mov	r5,r3
8110c98c:	1009883a 	mov	r4,r2
8110c990:	110de600 	call	8110de60 <ucCrc8wInit>
8110c994:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110c998:	e13fd703 	ldbu	r4,-164(fp)
8110c99c:	e0ffd984 	addi	r3,fp,-154
8110c9a0:	e0bfd984 	addi	r2,fp,-154
8110c9a4:	200f883a 	mov	r7,r4
8110c9a8:	180d883a 	mov	r6,r3
8110c9ac:	01604534 	movhi	r5,33044
8110c9b0:	2973d204 	addi	r5,r5,-12472
8110c9b4:	1009883a 	mov	r4,r2
8110c9b8:	11130e40 	call	811130e4 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
8110c9bc:	e0bfd90b 	ldhu	r2,-156(fp)
8110c9c0:	10ffffcc 	andi	r3,r2,65535
8110c9c4:	18e0001c 	xori	r3,r3,32768
8110c9c8:	18e00004 	addi	r3,r3,-32768
8110c9cc:	e0bfd984 	addi	r2,fp,-154
8110c9d0:	180b883a 	mov	r5,r3
8110c9d4:	1009883a 	mov	r4,r2
8110c9d8:	110b9300 	call	8110b930 <bSendUART128>
8110c9dc:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110c9e0:	e0bfd817 	ldw	r2,-160(fp)
8110c9e4:	10800060 	cmpeqi	r2,r2,1
8110c9e8:	1000011e 	bne	r2,zero,8110c9f0 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110c9ec:	110e7cc0 	call	8110e7cc <vCouldNotSendEthConfUART>
	}
}
8110c9f0:	0001883a 	nop
8110c9f4:	e6fffa04 	addi	sp,fp,-24
8110c9f8:	dfc00717 	ldw	ra,28(sp)
8110c9fc:	df000617 	ldw	fp,24(sp)
8110ca00:	dd400517 	ldw	r21,20(sp)
8110ca04:	dd000417 	ldw	r20,16(sp)
8110ca08:	dcc00317 	ldw	r19,12(sp)
8110ca0c:	dc800217 	ldw	r18,8(sp)
8110ca10:	dc400117 	ldw	r17,4(sp)
8110ca14:	dc000017 	ldw	r16,0(sp)
8110ca18:	dec00804 	addi	sp,sp,32
8110ca1c:	f800283a 	ret

8110ca20 <vSendTurnOff>:

void vSendTurnOff ( void ) {
8110ca20:	defff304 	addi	sp,sp,-52
8110ca24:	de00012e 	bgeu	sp,et,8110ca2c <vSendTurnOff+0xc>
8110ca28:	003b68fa 	trap	3
8110ca2c:	dfc00c15 	stw	ra,48(sp)
8110ca30:	df000b15 	stw	fp,44(sp)
8110ca34:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110ca38:	e03ff78d 	sth	zero,-34(fp)
8110ca3c:	e03ff80d 	sth	zero,-32(fp)
8110ca40:	e03ff88d 	sth	zero,-30(fp)
8110ca44:	e03ff90d 	sth	zero,-28(fp)
8110ca48:	e03ff98d 	sth	zero,-26(fp)
8110ca4c:	e03ffa0d 	sth	zero,-24(fp)
8110ca50:	e03ffa8d 	sth	zero,-22(fp)
8110ca54:	e03ffb0d 	sth	zero,-20(fp)
8110ca58:	e03ffb8d 	sth	zero,-18(fp)
8110ca5c:	e03ffc0d 	sth	zero,-16(fp)
8110ca60:	e03ffc8d 	sth	zero,-14(fp)
8110ca64:	e03ffd0d 	sth	zero,-12(fp)
8110ca68:	e03ffd8d 	sth	zero,-10(fp)
8110ca6c:	e03ffe0d 	sth	zero,-8(fp)
8110ca70:	e03ffe8d 	sth	zero,-6(fp)
8110ca74:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110ca78:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110ca7c:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110ca80:	110cc380 	call	8110cc38 <usiGetIdCMD>
8110ca84:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110ca88:	e0fff70b 	ldhu	r3,-36(fp)
8110ca8c:	e0bff784 	addi	r2,fp,-34
8110ca90:	180d883a 	mov	r6,r3
8110ca94:	01604534 	movhi	r5,33044
8110ca98:	2973d504 	addi	r5,r5,-12460
8110ca9c:	1009883a 	mov	r4,r2
8110caa0:	11130e40 	call	811130e4 <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110caa4:	e0bff784 	addi	r2,fp,-34
8110caa8:	1009883a 	mov	r4,r2
8110caac:	11132f80 	call	811132f8 <strlen>
8110cab0:	1007883a 	mov	r3,r2
8110cab4:	e0bff784 	addi	r2,fp,-34
8110cab8:	180b883a 	mov	r5,r3
8110cabc:	1009883a 	mov	r4,r2
8110cac0:	110de600 	call	8110de60 <ucCrc8wInit>
8110cac4:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110cac8:	e13ff503 	ldbu	r4,-44(fp)
8110cacc:	e0fff784 	addi	r3,fp,-34
8110cad0:	e0bff784 	addi	r2,fp,-34
8110cad4:	200f883a 	mov	r7,r4
8110cad8:	180d883a 	mov	r6,r3
8110cadc:	01604534 	movhi	r5,33044
8110cae0:	2973d204 	addi	r5,r5,-12472
8110cae4:	1009883a 	mov	r4,r2
8110cae8:	11130e40 	call	811130e4 <sprintf>

	bSuccees = bSendUART32(cBufferTurnOff, usiIdCMDLocal);
8110caec:	e0bff70b 	ldhu	r2,-36(fp)
8110caf0:	10ffffcc 	andi	r3,r2,65535
8110caf4:	18e0001c 	xori	r3,r3,32768
8110caf8:	18e00004 	addi	r3,r3,-32768
8110cafc:	e0bff784 	addi	r2,fp,-34
8110cb00:	180b883a 	mov	r5,r3
8110cb04:	1009883a 	mov	r4,r2
8110cb08:	110c0600 	call	8110c060 <bSendUART32>
8110cb0c:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110cb10:	e0bff617 	ldw	r2,-40(fp)
8110cb14:	10800060 	cmpeqi	r2,r2,1
8110cb18:	1000011e 	bne	r2,zero,8110cb20 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110cb1c:	110ee740 	call	8110ee74 <vCouldNotSendTurnOff>
	}
}
8110cb20:	0001883a 	nop
8110cb24:	e037883a 	mov	sp,fp
8110cb28:	dfc00117 	ldw	ra,4(sp)
8110cb2c:	df000017 	ldw	fp,0(sp)
8110cb30:	dec00204 	addi	sp,sp,8
8110cb34:	f800283a 	ret

8110cb38 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110cb38:	deffda04 	addi	sp,sp,-152
8110cb3c:	de00012e 	bgeu	sp,et,8110cb44 <vSendLog+0xc>
8110cb40:	003b68fa 	trap	3
8110cb44:	dfc02515 	stw	ra,148(sp)
8110cb48:	df002415 	stw	fp,144(sp)
8110cb4c:	df002404 	addi	fp,sp,144
8110cb50:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110cb54:	e03fde8d 	sth	zero,-134(fp)
8110cb58:	e03fdf0d 	sth	zero,-132(fp)
8110cb5c:	e0bfdf84 	addi	r2,fp,-130
8110cb60:	00c01f04 	movi	r3,124
8110cb64:	180d883a 	mov	r6,r3
8110cb68:	000b883a 	mov	r5,zero
8110cb6c:	1009883a 	mov	r4,r2
8110cb70:	1112acc0 	call	81112acc <memset>
    unsigned char crc = 0;
8110cb74:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cb78:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cb7c:	110cc380 	call	8110cc38 <usiGetIdCMD>
8110cb80:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110cb84:	e0ffde0b 	ldhu	r3,-136(fp)
8110cb88:	e0bfde84 	addi	r2,fp,-134
8110cb8c:	e1ffff17 	ldw	r7,-4(fp)
8110cb90:	180d883a 	mov	r6,r3
8110cb94:	01604534 	movhi	r5,33044
8110cb98:	2973d704 	addi	r5,r5,-12452
8110cb9c:	1009883a 	mov	r4,r2
8110cba0:	11130e40 	call	811130e4 <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110cba4:	e0bfde84 	addi	r2,fp,-134
8110cba8:	1009883a 	mov	r4,r2
8110cbac:	11132f80 	call	811132f8 <strlen>
8110cbb0:	1007883a 	mov	r3,r2
8110cbb4:	e0bfde84 	addi	r2,fp,-134
8110cbb8:	180b883a 	mov	r5,r3
8110cbbc:	1009883a 	mov	r4,r2
8110cbc0:	110de600 	call	8110de60 <ucCrc8wInit>
8110cbc4:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110cbc8:	e13fdc03 	ldbu	r4,-144(fp)
8110cbcc:	e0ffde84 	addi	r3,fp,-134
8110cbd0:	e0bfde84 	addi	r2,fp,-134
8110cbd4:	200f883a 	mov	r7,r4
8110cbd8:	180d883a 	mov	r6,r3
8110cbdc:	01604534 	movhi	r5,33044
8110cbe0:	2973d204 	addi	r5,r5,-12472
8110cbe4:	1009883a 	mov	r4,r2
8110cbe8:	11130e40 	call	811130e4 <sprintf>

	bSuccees = bSendUART128(cBufferLog, usiIdCMDLocal);
8110cbec:	e0bfde0b 	ldhu	r2,-136(fp)
8110cbf0:	10ffffcc 	andi	r3,r2,65535
8110cbf4:	18e0001c 	xori	r3,r3,32768
8110cbf8:	18e00004 	addi	r3,r3,-32768
8110cbfc:	e0bfde84 	addi	r2,fp,-134
8110cc00:	180b883a 	mov	r5,r3
8110cc04:	1009883a 	mov	r4,r2
8110cc08:	110b9300 	call	8110b930 <bSendUART128>
8110cc0c:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110cc10:	e0bfdd17 	ldw	r2,-140(fp)
8110cc14:	10800060 	cmpeqi	r2,r2,1
8110cc18:	1000011e 	bne	r2,zero,8110cc20 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110cc1c:	110eedc0 	call	8110eedc <vCouldNotSendLog>
	}
}
8110cc20:	0001883a 	nop
8110cc24:	e037883a 	mov	sp,fp
8110cc28:	dfc00117 	ldw	ra,4(sp)
8110cc2c:	df000017 	ldw	fp,0(sp)
8110cc30:	dec00204 	addi	sp,sp,8
8110cc34:	f800283a 	ret

8110cc38 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110cc38:	deffff04 	addi	sp,sp,-4
8110cc3c:	de00012e 	bgeu	sp,et,8110cc44 <usiGetIdCMD+0xc>
8110cc40:	003b68fa 	trap	3
8110cc44:	df000015 	stw	fp,0(sp)
8110cc48:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110cc4c:	d0a0530b 	ldhu	r2,-32436(gp)
8110cc50:	10ffffcc 	andi	r3,r2,65535
8110cc54:	00bfffd4 	movui	r2,65535
8110cc58:	1880031e 	bne	r3,r2,8110cc68 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
8110cc5c:	00800044 	movi	r2,1
8110cc60:	d0a0530d 	sth	r2,-32436(gp)
8110cc64:	00000306 	br	8110cc74 <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110cc68:	d0a0530b 	ldhu	r2,-32436(gp)
8110cc6c:	10800044 	addi	r2,r2,1
8110cc70:	d0a0530d 	sth	r2,-32436(gp)
    return usiIdCMD;
8110cc74:	d0a0530b 	ldhu	r2,-32436(gp)
}
8110cc78:	e037883a 	mov	sp,fp
8110cc7c:	df000017 	ldw	fp,0(sp)
8110cc80:	dec00104 	addi	sp,sp,4
8110cc84:	f800283a 	ret

8110cc88 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110cc88:	defffb04 	addi	sp,sp,-20
8110cc8c:	de00012e 	bgeu	sp,et,8110cc94 <siPosStr+0xc>
8110cc90:	003b68fa 	trap	3
8110cc94:	dfc00415 	stw	ra,16(sp)
8110cc98:	df000315 	stw	fp,12(sp)
8110cc9c:	df000304 	addi	fp,sp,12
8110cca0:	e13ffe15 	stw	r4,-8(fp)
8110cca4:	2805883a 	mov	r2,r5
8110cca8:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110ccac:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110ccb0:	e0bfff03 	ldbu	r2,-4(fp)
8110ccb4:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110ccb8:	e17ffd04 	addi	r5,fp,-12
8110ccbc:	e13ffe17 	ldw	r4,-8(fp)
8110ccc0:	11132ac0 	call	811132ac <strcspn>
}
8110ccc4:	e037883a 	mov	sp,fp
8110ccc8:	dfc00117 	ldw	ra,4(sp)
8110cccc:	df000017 	ldw	fp,0(sp)
8110ccd0:	dec00204 	addi	sp,sp,8
8110ccd4:	f800283a 	ret

8110ccd8 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110ccd8:	defffc04 	addi	sp,sp,-16
8110ccdc:	de00012e 	bgeu	sp,et,8110cce4 <vTimeoutCheck+0xc>
8110cce0:	003b68fa 	trap	3
8110cce4:	dfc00315 	stw	ra,12(sp)
8110cce8:	df000215 	stw	fp,8(sp)
8110ccec:	df000204 	addi	fp,sp,8
8110ccf0:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110ccf4:	d0a05217 	ldw	r2,-32440(gp)
8110ccf8:	1009883a 	mov	r4,r2
8110ccfc:	112f0480 	call	8112f048 <OSSemPost>
8110cd00:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110cd04:	e0bffe03 	ldbu	r2,-8(fp)
8110cd08:	10000126 	beq	r2,zero,8110cd10 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110cd0c:	110ec040 	call	8110ec04 <vFailPostBlockingSemTimeoutTask>
	}
}
8110cd10:	0001883a 	nop
8110cd14:	e037883a 	mov	sp,fp
8110cd18:	dfc00117 	ldw	ra,4(sp)
8110cd1c:	df000017 	ldw	fp,0(sp)
8110cd20:	dec00204 	addi	sp,sp,8
8110cd24:	f800283a 	ret

8110cd28 <vSendPusTM64>:

/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110cd28:	deffe304 	addi	sp,sp,-116
8110cd2c:	de00012e 	bgeu	sp,et,8110cd34 <vSendPusTM64+0xc>
8110cd30:	003b68fa 	trap	3
8110cd34:	dfc01815 	stw	ra,96(sp)
8110cd38:	df001715 	stw	fp,92(sp)
8110cd3c:	df001704 	addi	fp,sp,92
8110cd40:	e1000215 	stw	r4,8(fp)
8110cd44:	e1400315 	stw	r5,12(fp)
8110cd48:	e1800415 	stw	r6,16(fp)
8110cd4c:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110cd50:	e03fef8d 	sth	zero,-66(fp)
8110cd54:	e03ff00d 	sth	zero,-64(fp)
8110cd58:	e0bff084 	addi	r2,fp,-62
8110cd5c:	00c00f04 	movi	r3,60
8110cd60:	180d883a 	mov	r6,r3
8110cd64:	000b883a 	mov	r5,zero
8110cd68:	1009883a 	mov	r4,r2
8110cd6c:	1112acc0 	call	81112acc <memset>
    unsigned char crc = 0;
8110cd70:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110cd74:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cd78:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cd7c:	110cc380 	call	8110cc38 <usiGetIdCMD>
8110cd80:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110cd84:	e1bfef0b 	ldhu	r6,-68(fp)
8110cd88:	e080030b 	ldhu	r2,12(fp)
8110cd8c:	11ffffcc 	andi	r7,r2,65535
8110cd90:	e080038b 	ldhu	r2,14(fp)
8110cd94:	10bfffcc 	andi	r2,r2,65535
8110cd98:	e0c0040b 	ldhu	r3,16(fp)
8110cd9c:	18ffffcc 	andi	r3,r3,65535
8110cda0:	e100048b 	ldhu	r4,18(fp)
8110cda4:	213fffcc 	andi	r4,r4,65535
8110cda8:	e140050b 	ldhu	r5,20(fp)
8110cdac:	297fffcc 	andi	r5,r5,65535
8110cdb0:	e23fef84 	addi	r8,fp,-66
8110cdb4:	d9400315 	stw	r5,12(sp)
8110cdb8:	d9000215 	stw	r4,8(sp)
8110cdbc:	d8c00115 	stw	r3,4(sp)
8110cdc0:	d8800015 	stw	r2,0(sp)
8110cdc4:	01604534 	movhi	r5,33044
8110cdc8:	2973da04 	addi	r5,r5,-12440
8110cdcc:	4009883a 	mov	r4,r8
8110cdd0:	11130e40 	call	811130e4 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110cdd4:	e03fed05 	stb	zero,-76(fp)
8110cdd8:	00001206 	br	8110ce24 <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110cddc:	e0bfed03 	ldbu	r2,-76(fp)
8110cde0:	10800204 	addi	r2,r2,8
8110cde4:	1085883a 	add	r2,r2,r2
8110cde8:	e0c00204 	addi	r3,fp,8
8110cdec:	1885883a 	add	r2,r3,r2
8110cdf0:	1080000b 	ldhu	r2,0(r2)
8110cdf4:	113fffcc 	andi	r4,r2,65535
8110cdf8:	e0ffef84 	addi	r3,fp,-66
8110cdfc:	e0bfef84 	addi	r2,fp,-66
8110ce00:	200f883a 	mov	r7,r4
8110ce04:	180d883a 	mov	r6,r3
8110ce08:	01604534 	movhi	r5,33044
8110ce0c:	2973e104 	addi	r5,r5,-12412
8110ce10:	1009883a 	mov	r4,r2
8110ce14:	11130e40 	call	811130e4 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110ce18:	e0bfed03 	ldbu	r2,-76(fp)
8110ce1c:	10800044 	addi	r2,r2,1
8110ce20:	e0bfed05 	stb	r2,-76(fp)
8110ce24:	e0800583 	ldbu	r2,22(fp)
8110ce28:	10803fcc 	andi	r2,r2,255
8110ce2c:	e0ffed03 	ldbu	r3,-76(fp)
8110ce30:	18bfea36 	bltu	r3,r2,8110cddc <__reset+0xfb0ecddc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110ce34:	e0bfef84 	addi	r2,fp,-66
8110ce38:	1009883a 	mov	r4,r2
8110ce3c:	11132f80 	call	811132f8 <strlen>
8110ce40:	1007883a 	mov	r3,r2
8110ce44:	e0bfef84 	addi	r2,fp,-66
8110ce48:	180b883a 	mov	r5,r3
8110ce4c:	1009883a 	mov	r4,r2
8110ce50:	110de600 	call	8110de60 <ucCrc8wInit>
8110ce54:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110ce58:	e13fed43 	ldbu	r4,-75(fp)
8110ce5c:	e0ffef84 	addi	r3,fp,-66
8110ce60:	e0bfef84 	addi	r2,fp,-66
8110ce64:	200f883a 	mov	r7,r4
8110ce68:	180d883a 	mov	r6,r3
8110ce6c:	01604534 	movhi	r5,33044
8110ce70:	2973d204 	addi	r5,r5,-12472
8110ce74:	1009883a 	mov	r4,r2
8110ce78:	11130e40 	call	811130e4 <sprintf>

	bSuccees = bSendUART64(cBufferPus, usiIdCMDLocal);
8110ce7c:	e0bfef0b 	ldhu	r2,-68(fp)
8110ce80:	10ffffcc 	andi	r3,r2,65535
8110ce84:	18e0001c 	xori	r3,r3,32768
8110ce88:	18e00004 	addi	r3,r3,-32768
8110ce8c:	e0bfef84 	addi	r2,fp,-66
8110ce90:	180b883a 	mov	r5,r3
8110ce94:	1009883a 	mov	r4,r2
8110ce98:	110bcc80 	call	8110bcc8 <bSendUART64>
8110ce9c:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110cea0:	e0bfee17 	ldw	r2,-72(fp)
8110cea4:	10800060 	cmpeqi	r2,r2,1
8110cea8:	1000031e 	bne	r2,zero,8110ceb8 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110ceac:	e0bfef84 	addi	r2,fp,-66
8110ceb0:	1009883a 	mov	r4,r2
8110ceb4:	110ef440 	call	8110ef44 <vCouldNotSendTMPusCommand>
	}
}
8110ceb8:	0001883a 	nop
8110cebc:	e037883a 	mov	sp,fp
8110cec0:	dfc00117 	ldw	ra,4(sp)
8110cec4:	df000017 	ldw	fp,0(sp)
8110cec8:	dec00604 	addi	sp,sp,24
8110cecc:	f800283a 	ret

8110ced0 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110ced0:	deffd304 	addi	sp,sp,-180
8110ced4:	de00012e 	bgeu	sp,et,8110cedc <vSendPusTM128+0xc>
8110ced8:	003b68fa 	trap	3
8110cedc:	dfc02815 	stw	ra,160(sp)
8110cee0:	df002715 	stw	fp,156(sp)
8110cee4:	df002704 	addi	fp,sp,156
8110cee8:	e1000215 	stw	r4,8(fp)
8110ceec:	e1400315 	stw	r5,12(fp)
8110cef0:	e1800415 	stw	r6,16(fp)
8110cef4:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110cef8:	e03fdf8d 	sth	zero,-130(fp)
8110cefc:	e03fe00d 	sth	zero,-128(fp)
8110cf00:	e0bfe084 	addi	r2,fp,-126
8110cf04:	00c01f04 	movi	r3,124
8110cf08:	180d883a 	mov	r6,r3
8110cf0c:	000b883a 	mov	r5,zero
8110cf10:	1009883a 	mov	r4,r2
8110cf14:	1112acc0 	call	81112acc <memset>
    unsigned char crc = 0;
8110cf18:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110cf1c:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cf20:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cf24:	110cc380 	call	8110cc38 <usiGetIdCMD>
8110cf28:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110cf2c:	e1bfdf0b 	ldhu	r6,-132(fp)
8110cf30:	e080030b 	ldhu	r2,12(fp)
8110cf34:	11ffffcc 	andi	r7,r2,65535
8110cf38:	e080038b 	ldhu	r2,14(fp)
8110cf3c:	10bfffcc 	andi	r2,r2,65535
8110cf40:	e0c0040b 	ldhu	r3,16(fp)
8110cf44:	18ffffcc 	andi	r3,r3,65535
8110cf48:	e100048b 	ldhu	r4,18(fp)
8110cf4c:	213fffcc 	andi	r4,r4,65535
8110cf50:	e140050b 	ldhu	r5,20(fp)
8110cf54:	297fffcc 	andi	r5,r5,65535
8110cf58:	e23fdf84 	addi	r8,fp,-130
8110cf5c:	d9400315 	stw	r5,12(sp)
8110cf60:	d9000215 	stw	r4,8(sp)
8110cf64:	d8c00115 	stw	r3,4(sp)
8110cf68:	d8800015 	stw	r2,0(sp)
8110cf6c:	01604534 	movhi	r5,33044
8110cf70:	2973da04 	addi	r5,r5,-12440
8110cf74:	4009883a 	mov	r4,r8
8110cf78:	11130e40 	call	811130e4 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110cf7c:	e03fdd05 	stb	zero,-140(fp)
8110cf80:	00001206 	br	8110cfcc <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110cf84:	e0bfdd03 	ldbu	r2,-140(fp)
8110cf88:	10800204 	addi	r2,r2,8
8110cf8c:	1085883a 	add	r2,r2,r2
8110cf90:	e0c00204 	addi	r3,fp,8
8110cf94:	1885883a 	add	r2,r3,r2
8110cf98:	1080000b 	ldhu	r2,0(r2)
8110cf9c:	113fffcc 	andi	r4,r2,65535
8110cfa0:	e0ffdf84 	addi	r3,fp,-130
8110cfa4:	e0bfdf84 	addi	r2,fp,-130
8110cfa8:	200f883a 	mov	r7,r4
8110cfac:	180d883a 	mov	r6,r3
8110cfb0:	01604534 	movhi	r5,33044
8110cfb4:	2973e104 	addi	r5,r5,-12412
8110cfb8:	1009883a 	mov	r4,r2
8110cfbc:	11130e40 	call	811130e4 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110cfc0:	e0bfdd03 	ldbu	r2,-140(fp)
8110cfc4:	10800044 	addi	r2,r2,1
8110cfc8:	e0bfdd05 	stb	r2,-140(fp)
8110cfcc:	e0800583 	ldbu	r2,22(fp)
8110cfd0:	10803fcc 	andi	r2,r2,255
8110cfd4:	e0ffdd03 	ldbu	r3,-140(fp)
8110cfd8:	18bfea36 	bltu	r3,r2,8110cf84 <__reset+0xfb0ecf84>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110cfdc:	e0bfdf84 	addi	r2,fp,-130
8110cfe0:	1009883a 	mov	r4,r2
8110cfe4:	11132f80 	call	811132f8 <strlen>
8110cfe8:	1007883a 	mov	r3,r2
8110cfec:	e0bfdf84 	addi	r2,fp,-130
8110cff0:	180b883a 	mov	r5,r3
8110cff4:	1009883a 	mov	r4,r2
8110cff8:	110de600 	call	8110de60 <ucCrc8wInit>
8110cffc:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d000:	e13fdd43 	ldbu	r4,-139(fp)
8110d004:	e0ffdf84 	addi	r3,fp,-130
8110d008:	e0bfdf84 	addi	r2,fp,-130
8110d00c:	200f883a 	mov	r7,r4
8110d010:	180d883a 	mov	r6,r3
8110d014:	01604534 	movhi	r5,33044
8110d018:	2973d204 	addi	r5,r5,-12472
8110d01c:	1009883a 	mov	r4,r2
8110d020:	11130e40 	call	811130e4 <sprintf>

	bSuccees = bSendUART128(cBufferPus, usiIdCMDLocal);
8110d024:	e0bfdf0b 	ldhu	r2,-132(fp)
8110d028:	10ffffcc 	andi	r3,r2,65535
8110d02c:	18e0001c 	xori	r3,r3,32768
8110d030:	18e00004 	addi	r3,r3,-32768
8110d034:	e0bfdf84 	addi	r2,fp,-130
8110d038:	180b883a 	mov	r5,r3
8110d03c:	1009883a 	mov	r4,r2
8110d040:	110b9300 	call	8110b930 <bSendUART128>
8110d044:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110d048:	e0bfde17 	ldw	r2,-136(fp)
8110d04c:	10800060 	cmpeqi	r2,r2,1
8110d050:	1000031e 	bne	r2,zero,8110d060 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d054:	e0bfdf84 	addi	r2,fp,-130
8110d058:	1009883a 	mov	r4,r2
8110d05c:	110ef440 	call	8110ef44 <vCouldNotSendTMPusCommand>
	}
}
8110d060:	0001883a 	nop
8110d064:	e037883a 	mov	sp,fp
8110d068:	dfc00117 	ldw	ra,4(sp)
8110d06c:	df000017 	ldw	fp,0(sp)
8110d070:	dec00604 	addi	sp,sp,24
8110d074:	f800283a 	ret

8110d078 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				64			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110d078:	deffd904 	addi	sp,sp,-156
8110d07c:	de00012e 	bgeu	sp,et,8110d084 <vTMPusTestConnection+0xc>
8110d080:	003b68fa 	trap	3
8110d084:	dfc02615 	stw	ra,152(sp)
8110d088:	df002515 	stw	fp,148(sp)
8110d08c:	df002504 	addi	fp,sp,148
8110d090:	2005883a 	mov	r2,r4
8110d094:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110d098:	e0bfff0b 	ldhu	r2,-4(fp)
8110d09c:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 64;
8110d0a0:	00801004 	movi	r2,64
8110d0a4:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110d0a8:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110d0ac:	00800444 	movi	r2,17
8110d0b0:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110d0b4:	00800084 	movi	r2,2
8110d0b8:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110d0bc:	d809883a 	mov	r4,sp
8110d0c0:	e0bfef04 	addi	r2,fp,-68
8110d0c4:	00c01004 	movi	r3,64
8110d0c8:	180d883a 	mov	r6,r3
8110d0cc:	100b883a 	mov	r5,r2
8110d0d0:	111297c0 	call	8111297c <memcpy>
8110d0d4:	e13feb17 	ldw	r4,-84(fp)
8110d0d8:	e17fec17 	ldw	r5,-80(fp)
8110d0dc:	e1bfed17 	ldw	r6,-76(fp)
8110d0e0:	e1ffee17 	ldw	r7,-72(fp)
8110d0e4:	110cd280 	call	8110cd28 <vSendPusTM64>
}
8110d0e8:	0001883a 	nop
8110d0ec:	e037883a 	mov	sp,fp
8110d0f0:	dfc00117 	ldw	ra,4(sp)
8110d0f4:	df000017 	ldw	fp,0(sp)
8110d0f8:	dec00204 	addi	sp,sp,8
8110d0fc:	f800283a 	ret

8110d100 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110d100:	defff504 	addi	sp,sp,-44
8110d104:	de00012e 	bgeu	sp,et,8110d10c <vLoadDefaultETHConf+0xc>
8110d108:	003b68fa 	trap	3
8110d10c:	dfc00a15 	stw	ra,40(sp)
8110d110:	df000915 	stw	fp,36(sp)
8110d114:	dc000815 	stw	r16,32(sp)
8110d118:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110d11c:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110d120:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110d124:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110d128:	d0a05c17 	ldw	r2,-32400(gp)
8110d12c:	10800058 	cmpnei	r2,r2,1
8110d130:	1001f61e 	bne	r2,zero,8110d90c <vLoadDefaultETHConf+0x80c>
8110d134:	110fcd40 	call	8110fcd4 <bSDcardIsPresent>
8110d138:	1001f426 	beq	r2,zero,8110d90c <vLoadDefaultETHConf+0x80c>
8110d13c:	110fd040 	call	8110fd04 <bSDcardFAT16Check>
8110d140:	1001f226 	beq	r2,zero,8110d90c <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110d144:	01204534 	movhi	r4,33044
8110d148:	2133e304 	addi	r4,r4,-12404
8110d14c:	110fe2c0 	call	8110fe2c <siOpenFile>
8110d150:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110d154:	e0bffc0f 	ldh	r2,-16(fp)
8110d158:	1001e816 	blt	r2,zero,8110d8fc <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110d15c:	e0bffd04 	addi	r2,fp,-12
8110d160:	01800204 	movi	r6,8
8110d164:	01400284 	movi	r5,10
8110d168:	1009883a 	mov	r4,r2
8110d16c:	1112acc0 	call	81112acc <memset>
			p_inteiro = inteiro;
8110d170:	e0bffd04 	addi	r2,fp,-12
8110d174:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110d178:	e0bffc0f 	ldh	r2,-16(fp)
8110d17c:	1009883a 	mov	r4,r2
8110d180:	110fea80 	call	8110fea8 <cGetNextChar>
8110d184:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110d188:	e0bff947 	ldb	r2,-27(fp)
8110d18c:	10800084 	addi	r2,r2,2
8110d190:	10c015a8 	cmpgeui	r3,r2,86
8110d194:	1801cf1e 	bne	r3,zero,8110d8d4 <vLoadDefaultETHConf+0x7d4>
8110d198:	100690ba 	slli	r3,r2,2
8110d19c:	00a04474 	movhi	r2,33041
8110d1a0:	10b46c04 	addi	r2,r2,-11856
8110d1a4:	1885883a 	add	r2,r3,r2
8110d1a8:	10800017 	ldw	r2,0(r2)
8110d1ac:	1000683a 	jmp	r2
8110d1b0:	8110d348 	cmpgei	r4,r16,17229
8110d1b4:	8110d33c 	xorhi	r4,r16,17228
8110d1b8:	8110d8d4 	ori	r4,r16,17251
8110d1bc:	8110d8d4 	ori	r4,r16,17251
8110d1c0:	8110d8d4 	ori	r4,r16,17251
8110d1c4:	8110d8d4 	ori	r4,r16,17251
8110d1c8:	8110d8d4 	ori	r4,r16,17251
8110d1cc:	8110d8d4 	ori	r4,r16,17251
8110d1d0:	8110d8d4 	ori	r4,r16,17251
8110d1d4:	8110d8d4 	ori	r4,r16,17251
8110d1d8:	8110d8d4 	ori	r4,r16,17251
8110d1dc:	8110d8d4 	ori	r4,r16,17251
8110d1e0:	8110d8ec 	andhi	r4,r16,17251
8110d1e4:	8110d8d4 	ori	r4,r16,17251
8110d1e8:	8110d8d4 	ori	r4,r16,17251
8110d1ec:	8110d8ec 	andhi	r4,r16,17251
8110d1f0:	8110d8d4 	ori	r4,r16,17251
8110d1f4:	8110d8d4 	ori	r4,r16,17251
8110d1f8:	8110d8d4 	ori	r4,r16,17251
8110d1fc:	8110d8d4 	ori	r4,r16,17251
8110d200:	8110d8d4 	ori	r4,r16,17251
8110d204:	8110d8d4 	ori	r4,r16,17251
8110d208:	8110d8d4 	ori	r4,r16,17251
8110d20c:	8110d8d4 	ori	r4,r16,17251
8110d210:	8110d8d4 	ori	r4,r16,17251
8110d214:	8110d8d4 	ori	r4,r16,17251
8110d218:	8110d8d4 	ori	r4,r16,17251
8110d21c:	8110d8d4 	ori	r4,r16,17251
8110d220:	8110d8d4 	ori	r4,r16,17251
8110d224:	8110d8d4 	ori	r4,r16,17251
8110d228:	8110d8d4 	ori	r4,r16,17251
8110d22c:	8110d8d4 	ori	r4,r16,17251
8110d230:	8110d8d4 	ori	r4,r16,17251
8110d234:	8110d8d4 	ori	r4,r16,17251
8110d238:	8110d8ec 	andhi	r4,r16,17251
8110d23c:	8110d8d4 	ori	r4,r16,17251
8110d240:	8110d8d4 	ori	r4,r16,17251
8110d244:	8110d8d4 	ori	r4,r16,17251
8110d248:	8110d8d4 	ori	r4,r16,17251
8110d24c:	8110d8d4 	ori	r4,r16,17251
8110d250:	8110d8d4 	ori	r4,r16,17251
8110d254:	8110d308 	cmpgei	r4,r16,17228
8110d258:	8110d8d4 	ori	r4,r16,17251
8110d25c:	8110d8d4 	ori	r4,r16,17251
8110d260:	8110d8d4 	ori	r4,r16,17251
8110d264:	8110d8d4 	ori	r4,r16,17251
8110d268:	8110d8d4 	ori	r4,r16,17251
8110d26c:	8110d8d4 	ori	r4,r16,17251
8110d270:	8110d8d4 	ori	r4,r16,17251
8110d274:	8110d8d4 	ori	r4,r16,17251
8110d278:	8110d8d4 	ori	r4,r16,17251
8110d27c:	8110d8d4 	ori	r4,r16,17251
8110d280:	8110d8d4 	ori	r4,r16,17251
8110d284:	8110d8d4 	ori	r4,r16,17251
8110d288:	8110d8d4 	ori	r4,r16,17251
8110d28c:	8110d8d4 	ori	r4,r16,17251
8110d290:	8110d8d4 	ori	r4,r16,17251
8110d294:	8110d8d4 	ori	r4,r16,17251
8110d298:	8110d8d4 	ori	r4,r16,17251
8110d29c:	8110d8d4 	ori	r4,r16,17251
8110d2a0:	8110d8d4 	ori	r4,r16,17251
8110d2a4:	8110d8d4 	ori	r4,r16,17251
8110d2a8:	8110d89c 	xori	r4,r16,17250
8110d2ac:	8110d8d4 	ori	r4,r16,17251
8110d2b0:	8110d8d4 	ori	r4,r16,17251
8110d2b4:	8110d8d4 	ori	r4,r16,17251
8110d2b8:	8110d8d4 	ori	r4,r16,17251
8110d2bc:	8110d8d4 	ori	r4,r16,17251
8110d2c0:	8110d8d4 	ori	r4,r16,17251
8110d2c4:	8110d8d4 	ori	r4,r16,17251
8110d2c8:	8110d69c 	xori	r4,r16,17242
8110d2cc:	8110d8d4 	ori	r4,r16,17251
8110d2d0:	8110d8d4 	ori	r4,r16,17251
8110d2d4:	8110d4fc 	xorhi	r4,r16,17235
8110d2d8:	8110d7f4 	orhi	r4,r16,17247
8110d2dc:	8110d430 	cmpltui	r4,r16,17232
8110d2e0:	8110d8d4 	ori	r4,r16,17251
8110d2e4:	8110d8d4 	ori	r4,r16,17251
8110d2e8:	8110d8d4 	ori	r4,r16,17251
8110d2ec:	8110d360 	cmpeqi	r4,r16,17229
8110d2f0:	8110d8d4 	ori	r4,r16,17251
8110d2f4:	8110d8d4 	ori	r4,r16,17251
8110d2f8:	8110d76c 	andhi	r4,r16,17245
8110d2fc:	8110d8d4 	ori	r4,r16,17251
8110d300:	8110d8d4 	ori	r4,r16,17251
8110d304:	8110d5cc 	andi	r4,r16,17239
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110d308:	e0bffc0f 	ldh	r2,-16(fp)
8110d30c:	1009883a 	mov	r4,r2
8110d310:	110fea80 	call	8110fea8 <cGetNextChar>
8110d314:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110d318:	00000406 	br	8110d32c <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110d31c:	e0bffc0f 	ldh	r2,-16(fp)
8110d320:	1009883a 	mov	r4,r2
8110d324:	110fea80 	call	8110fea8 <cGetNextChar>
8110d328:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110d32c:	e0bff947 	ldb	r2,-27(fp)
8110d330:	108009d8 	cmpnei	r2,r2,39
8110d334:	103ff91e 	bne	r2,zero,8110d31c <__reset+0xfb0ed31c>
							c = cGetNextChar(siFile);
						}
						break;
8110d338:	00016d06 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110d33c:	00800044 	movi	r2,1
8110d340:	e0bff815 	stw	r2,-32(fp)
						break;
8110d344:	00016a06 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110d348:	01204534 	movhi	r4,33044
8110d34c:	2133e504 	addi	r4,r4,-12396
8110d350:	1112c940 	call	81112c94 <printf>
						bEOF = TRUE;
8110d354:	00800044 	movi	r2,1
8110d358:	e0bff815 	stw	r2,-32(fp)
						break;
8110d35c:	00016406 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110d360:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d364:	e0bffc0f 	ldh	r2,-16(fp)
8110d368:	1009883a 	mov	r4,r2
8110d36c:	110fea80 	call	8110fea8 <cGetNextChar>
8110d370:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d374:	d0e00317 	ldw	r3,-32756(gp)
8110d378:	e0bff947 	ldb	r2,-27(fp)
8110d37c:	10800044 	addi	r2,r2,1
8110d380:	1885883a 	add	r2,r3,r2
8110d384:	10800003 	ldbu	r2,0(r2)
8110d388:	10803fcc 	andi	r2,r2,255
8110d38c:	1080010c 	andi	r2,r2,4
8110d390:	10000626 	beq	r2,zero,8110d3ac <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110d394:	e0bffa17 	ldw	r2,-24(fp)
8110d398:	e0fff943 	ldbu	r3,-27(fp)
8110d39c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d3a0:	e0bffa17 	ldw	r2,-24(fp)
8110d3a4:	10800044 	addi	r2,r2,1
8110d3a8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110d3ac:	e0bff947 	ldb	r2,-27(fp)
8110d3b0:	10800ea0 	cmpeqi	r2,r2,58
8110d3b4:	1000031e 	bne	r2,zero,8110d3c4 <vLoadDefaultETHConf+0x2c4>
8110d3b8:	e0bff947 	ldb	r2,-27(fp)
8110d3bc:	10800ed8 	cmpnei	r2,r2,59
8110d3c0:	103fe81e 	bne	r2,zero,8110d364 <__reset+0xfb0ed364>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d3c4:	e0bffa17 	ldw	r2,-24(fp)
8110d3c8:	00c00284 	movi	r3,10
8110d3cc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110d3d0:	e0bff903 	ldbu	r2,-28(fp)
8110d3d4:	10800168 	cmpgeui	r2,r2,5
8110d3d8:	1000021e 	bne	r2,zero,8110d3e4 <vLoadDefaultETHConf+0x2e4>
8110d3dc:	e43ff903 	ldbu	r16,-28(fp)
8110d3e0:	00000106 	br	8110d3e8 <vLoadDefaultETHConf+0x2e8>
8110d3e4:	04000144 	movi	r16,5
8110d3e8:	e0bffd04 	addi	r2,fp,-12
8110d3ec:	1009883a 	mov	r4,r2
8110d3f0:	11118200 	call	81111820 <atoi>
8110d3f4:	1007883a 	mov	r3,r2
8110d3f8:	00a04574 	movhi	r2,33045
8110d3fc:	10be5a04 	addi	r2,r2,-1688
8110d400:	1405883a 	add	r2,r2,r16
8110d404:	10800404 	addi	r2,r2,16
8110d408:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d40c:	e0bffd04 	addi	r2,fp,-12
8110d410:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d414:	e0bff903 	ldbu	r2,-28(fp)
8110d418:	10800044 	addi	r2,r2,1
8110d41c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d420:	e0bff947 	ldb	r2,-27(fp)
8110d424:	10800ed8 	cmpnei	r2,r2,59
8110d428:	103fce1e 	bne	r2,zero,8110d364 <__reset+0xfb0ed364>

						break;
8110d42c:	00013006 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110d430:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d434:	e0bffc0f 	ldh	r2,-16(fp)
8110d438:	1009883a 	mov	r4,r2
8110d43c:	110fea80 	call	8110fea8 <cGetNextChar>
8110d440:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d444:	d0e00317 	ldw	r3,-32756(gp)
8110d448:	e0bff947 	ldb	r2,-27(fp)
8110d44c:	10800044 	addi	r2,r2,1
8110d450:	1885883a 	add	r2,r3,r2
8110d454:	10800003 	ldbu	r2,0(r2)
8110d458:	10803fcc 	andi	r2,r2,255
8110d45c:	1080010c 	andi	r2,r2,4
8110d460:	10000626 	beq	r2,zero,8110d47c <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110d464:	e0bffa17 	ldw	r2,-24(fp)
8110d468:	e0fff943 	ldbu	r3,-27(fp)
8110d46c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d470:	e0bffa17 	ldw	r2,-24(fp)
8110d474:	10800044 	addi	r2,r2,1
8110d478:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d47c:	e0bff947 	ldb	r2,-27(fp)
8110d480:	10800ba0 	cmpeqi	r2,r2,46
8110d484:	1000031e 	bne	r2,zero,8110d494 <vLoadDefaultETHConf+0x394>
8110d488:	e0bff947 	ldb	r2,-27(fp)
8110d48c:	10800ed8 	cmpnei	r2,r2,59
8110d490:	103fe81e 	bne	r2,zero,8110d434 <__reset+0xfb0ed434>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d494:	e0bffa17 	ldw	r2,-24(fp)
8110d498:	00c00284 	movi	r3,10
8110d49c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110d4a0:	e0bff903 	ldbu	r2,-28(fp)
8110d4a4:	108000e8 	cmpgeui	r2,r2,3
8110d4a8:	1000021e 	bne	r2,zero,8110d4b4 <vLoadDefaultETHConf+0x3b4>
8110d4ac:	e43ff903 	ldbu	r16,-28(fp)
8110d4b0:	00000106 	br	8110d4b8 <vLoadDefaultETHConf+0x3b8>
8110d4b4:	040000c4 	movi	r16,3
8110d4b8:	e0bffd04 	addi	r2,fp,-12
8110d4bc:	1009883a 	mov	r4,r2
8110d4c0:	11118200 	call	81111820 <atoi>
8110d4c4:	1007883a 	mov	r3,r2
8110d4c8:	00a04574 	movhi	r2,33045
8110d4cc:	10be5a04 	addi	r2,r2,-1688
8110d4d0:	1405883a 	add	r2,r2,r16
8110d4d4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d4d8:	e0bffd04 	addi	r2,fp,-12
8110d4dc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d4e0:	e0bff903 	ldbu	r2,-28(fp)
8110d4e4:	10800044 	addi	r2,r2,1
8110d4e8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d4ec:	e0bff947 	ldb	r2,-27(fp)
8110d4f0:	10800ed8 	cmpnei	r2,r2,59
8110d4f4:	103fcf1e 	bne	r2,zero,8110d434 <__reset+0xfb0ed434>

						break;
8110d4f8:	0000fd06 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110d4fc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d500:	e0bffc0f 	ldh	r2,-16(fp)
8110d504:	1009883a 	mov	r4,r2
8110d508:	110fea80 	call	8110fea8 <cGetNextChar>
8110d50c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d510:	d0e00317 	ldw	r3,-32756(gp)
8110d514:	e0bff947 	ldb	r2,-27(fp)
8110d518:	10800044 	addi	r2,r2,1
8110d51c:	1885883a 	add	r2,r3,r2
8110d520:	10800003 	ldbu	r2,0(r2)
8110d524:	10803fcc 	andi	r2,r2,255
8110d528:	1080010c 	andi	r2,r2,4
8110d52c:	10000626 	beq	r2,zero,8110d548 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110d530:	e0bffa17 	ldw	r2,-24(fp)
8110d534:	e0fff943 	ldbu	r3,-27(fp)
8110d538:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d53c:	e0bffa17 	ldw	r2,-24(fp)
8110d540:	10800044 	addi	r2,r2,1
8110d544:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d548:	e0bff947 	ldb	r2,-27(fp)
8110d54c:	10800ba0 	cmpeqi	r2,r2,46
8110d550:	1000031e 	bne	r2,zero,8110d560 <vLoadDefaultETHConf+0x460>
8110d554:	e0bff947 	ldb	r2,-27(fp)
8110d558:	10800ed8 	cmpnei	r2,r2,59
8110d55c:	103fe81e 	bne	r2,zero,8110d500 <__reset+0xfb0ed500>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d560:	e0bffa17 	ldw	r2,-24(fp)
8110d564:	00c00284 	movi	r3,10
8110d568:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110d56c:	e0bff903 	ldbu	r2,-28(fp)
8110d570:	108000e8 	cmpgeui	r2,r2,3
8110d574:	1000021e 	bne	r2,zero,8110d580 <vLoadDefaultETHConf+0x480>
8110d578:	e43ff903 	ldbu	r16,-28(fp)
8110d57c:	00000106 	br	8110d584 <vLoadDefaultETHConf+0x484>
8110d580:	040000c4 	movi	r16,3
8110d584:	e0bffd04 	addi	r2,fp,-12
8110d588:	1009883a 	mov	r4,r2
8110d58c:	11118200 	call	81111820 <atoi>
8110d590:	1007883a 	mov	r3,r2
8110d594:	00a04574 	movhi	r2,33045
8110d598:	10be5a04 	addi	r2,r2,-1688
8110d59c:	1405883a 	add	r2,r2,r16
8110d5a0:	10800104 	addi	r2,r2,4
8110d5a4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d5a8:	e0bffd04 	addi	r2,fp,-12
8110d5ac:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d5b0:	e0bff903 	ldbu	r2,-28(fp)
8110d5b4:	10800044 	addi	r2,r2,1
8110d5b8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d5bc:	e0bff947 	ldb	r2,-27(fp)
8110d5c0:	10800ed8 	cmpnei	r2,r2,59
8110d5c4:	103fce1e 	bne	r2,zero,8110d500 <__reset+0xfb0ed500>

						break;
8110d5c8:	0000c906 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110d5cc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d5d0:	e0bffc0f 	ldh	r2,-16(fp)
8110d5d4:	1009883a 	mov	r4,r2
8110d5d8:	110fea80 	call	8110fea8 <cGetNextChar>
8110d5dc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d5e0:	d0e00317 	ldw	r3,-32756(gp)
8110d5e4:	e0bff947 	ldb	r2,-27(fp)
8110d5e8:	10800044 	addi	r2,r2,1
8110d5ec:	1885883a 	add	r2,r3,r2
8110d5f0:	10800003 	ldbu	r2,0(r2)
8110d5f4:	10803fcc 	andi	r2,r2,255
8110d5f8:	1080010c 	andi	r2,r2,4
8110d5fc:	10000626 	beq	r2,zero,8110d618 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110d600:	e0bffa17 	ldw	r2,-24(fp)
8110d604:	e0fff943 	ldbu	r3,-27(fp)
8110d608:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d60c:	e0bffa17 	ldw	r2,-24(fp)
8110d610:	10800044 	addi	r2,r2,1
8110d614:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d618:	e0bff947 	ldb	r2,-27(fp)
8110d61c:	10800ba0 	cmpeqi	r2,r2,46
8110d620:	1000031e 	bne	r2,zero,8110d630 <vLoadDefaultETHConf+0x530>
8110d624:	e0bff947 	ldb	r2,-27(fp)
8110d628:	10800ed8 	cmpnei	r2,r2,59
8110d62c:	103fe81e 	bne	r2,zero,8110d5d0 <__reset+0xfb0ed5d0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d630:	e0bffa17 	ldw	r2,-24(fp)
8110d634:	00c00284 	movi	r3,10
8110d638:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110d63c:	e0bff903 	ldbu	r2,-28(fp)
8110d640:	108000e8 	cmpgeui	r2,r2,3
8110d644:	1000021e 	bne	r2,zero,8110d650 <vLoadDefaultETHConf+0x550>
8110d648:	e43ff903 	ldbu	r16,-28(fp)
8110d64c:	00000106 	br	8110d654 <vLoadDefaultETHConf+0x554>
8110d650:	040000c4 	movi	r16,3
8110d654:	e0bffd04 	addi	r2,fp,-12
8110d658:	1009883a 	mov	r4,r2
8110d65c:	11118200 	call	81111820 <atoi>
8110d660:	1007883a 	mov	r3,r2
8110d664:	00a04574 	movhi	r2,33045
8110d668:	10be5a04 	addi	r2,r2,-1688
8110d66c:	1405883a 	add	r2,r2,r16
8110d670:	10800204 	addi	r2,r2,8
8110d674:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d678:	e0bffd04 	addi	r2,fp,-12
8110d67c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d680:	e0bff903 	ldbu	r2,-28(fp)
8110d684:	10800044 	addi	r2,r2,1
8110d688:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d68c:	e0bff947 	ldb	r2,-27(fp)
8110d690:	10800ed8 	cmpnei	r2,r2,59
8110d694:	103fce1e 	bne	r2,zero,8110d5d0 <__reset+0xfb0ed5d0>

						break;
8110d698:	00009506 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110d69c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d6a0:	e0bffc0f 	ldh	r2,-16(fp)
8110d6a4:	1009883a 	mov	r4,r2
8110d6a8:	110fea80 	call	8110fea8 <cGetNextChar>
8110d6ac:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d6b0:	d0e00317 	ldw	r3,-32756(gp)
8110d6b4:	e0bff947 	ldb	r2,-27(fp)
8110d6b8:	10800044 	addi	r2,r2,1
8110d6bc:	1885883a 	add	r2,r3,r2
8110d6c0:	10800003 	ldbu	r2,0(r2)
8110d6c4:	10803fcc 	andi	r2,r2,255
8110d6c8:	1080010c 	andi	r2,r2,4
8110d6cc:	10000626 	beq	r2,zero,8110d6e8 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110d6d0:	e0bffa17 	ldw	r2,-24(fp)
8110d6d4:	e0fff943 	ldbu	r3,-27(fp)
8110d6d8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d6dc:	e0bffa17 	ldw	r2,-24(fp)
8110d6e0:	10800044 	addi	r2,r2,1
8110d6e4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d6e8:	e0bff947 	ldb	r2,-27(fp)
8110d6ec:	10800ba0 	cmpeqi	r2,r2,46
8110d6f0:	1000031e 	bne	r2,zero,8110d700 <vLoadDefaultETHConf+0x600>
8110d6f4:	e0bff947 	ldb	r2,-27(fp)
8110d6f8:	10800ed8 	cmpnei	r2,r2,59
8110d6fc:	103fe81e 	bne	r2,zero,8110d6a0 <__reset+0xfb0ed6a0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d700:	e0bffa17 	ldw	r2,-24(fp)
8110d704:	00c00284 	movi	r3,10
8110d708:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110d70c:	e0bff903 	ldbu	r2,-28(fp)
8110d710:	108000e8 	cmpgeui	r2,r2,3
8110d714:	1000021e 	bne	r2,zero,8110d720 <vLoadDefaultETHConf+0x620>
8110d718:	e43ff903 	ldbu	r16,-28(fp)
8110d71c:	00000106 	br	8110d724 <vLoadDefaultETHConf+0x624>
8110d720:	040000c4 	movi	r16,3
8110d724:	e0bffd04 	addi	r2,fp,-12
8110d728:	1009883a 	mov	r4,r2
8110d72c:	11118200 	call	81111820 <atoi>
8110d730:	1007883a 	mov	r3,r2
8110d734:	00a04574 	movhi	r2,33045
8110d738:	10be5a04 	addi	r2,r2,-1688
8110d73c:	1405883a 	add	r2,r2,r16
8110d740:	10800304 	addi	r2,r2,12
8110d744:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d748:	e0bffd04 	addi	r2,fp,-12
8110d74c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d750:	e0bff903 	ldbu	r2,-28(fp)
8110d754:	10800044 	addi	r2,r2,1
8110d758:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d75c:	e0bff947 	ldb	r2,-27(fp)
8110d760:	10800ed8 	cmpnei	r2,r2,59
8110d764:	103fce1e 	bne	r2,zero,8110d6a0 <__reset+0xfb0ed6a0>

						break;						
8110d768:	00006106 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110d76c:	e0bffc0f 	ldh	r2,-16(fp)
8110d770:	1009883a 	mov	r4,r2
8110d774:	110fea80 	call	8110fea8 <cGetNextChar>
8110d778:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110d77c:	d0e00317 	ldw	r3,-32756(gp)
8110d780:	e0bff947 	ldb	r2,-27(fp)
8110d784:	10800044 	addi	r2,r2,1
8110d788:	1885883a 	add	r2,r3,r2
8110d78c:	10800003 	ldbu	r2,0(r2)
8110d790:	10803fcc 	andi	r2,r2,255
8110d794:	1080010c 	andi	r2,r2,4
8110d798:	10000626 	beq	r2,zero,8110d7b4 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110d79c:	e0bffa17 	ldw	r2,-24(fp)
8110d7a0:	e0fff943 	ldbu	r3,-27(fp)
8110d7a4:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110d7a8:	e0bffa17 	ldw	r2,-24(fp)
8110d7ac:	10800044 	addi	r2,r2,1
8110d7b0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110d7b4:	e0bff947 	ldb	r2,-27(fp)
8110d7b8:	10800ed8 	cmpnei	r2,r2,59
8110d7bc:	103feb1e 	bne	r2,zero,8110d76c <__reset+0xfb0ed76c>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d7c0:	e0bffa17 	ldw	r2,-24(fp)
8110d7c4:	00c00284 	movi	r3,10
8110d7c8:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110d7cc:	e0bffd04 	addi	r2,fp,-12
8110d7d0:	1009883a 	mov	r4,r2
8110d7d4:	11118200 	call	81111820 <atoi>
8110d7d8:	1007883a 	mov	r3,r2
8110d7dc:	00a04574 	movhi	r2,33045
8110d7e0:	10be5a04 	addi	r2,r2,-1688
8110d7e4:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110d7e8:	e0bffd04 	addi	r2,fp,-12
8110d7ec:	e0bffa15 	stw	r2,-24(fp)

						break;
8110d7f0:	00003f06 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110d7f4:	e0bffc0f 	ldh	r2,-16(fp)
8110d7f8:	1009883a 	mov	r4,r2
8110d7fc:	110fea80 	call	8110fea8 <cGetNextChar>
8110d800:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110d804:	d0e00317 	ldw	r3,-32756(gp)
8110d808:	e0bff947 	ldb	r2,-27(fp)
8110d80c:	10800044 	addi	r2,r2,1
8110d810:	1885883a 	add	r2,r3,r2
8110d814:	10800003 	ldbu	r2,0(r2)
8110d818:	10803fcc 	andi	r2,r2,255
8110d81c:	1080010c 	andi	r2,r2,4
8110d820:	10000626 	beq	r2,zero,8110d83c <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110d824:	e0bffa17 	ldw	r2,-24(fp)
8110d828:	e0fff943 	ldbu	r3,-27(fp)
8110d82c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110d830:	e0bffa17 	ldw	r2,-24(fp)
8110d834:	10800044 	addi	r2,r2,1
8110d838:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110d83c:	e0bff947 	ldb	r2,-27(fp)
8110d840:	10800ed8 	cmpnei	r2,r2,59
8110d844:	103feb1e 	bne	r2,zero,8110d7f4 <__reset+0xfb0ed7f4>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d848:	e0bffa17 	ldw	r2,-24(fp)
8110d84c:	00c00284 	movi	r3,10
8110d850:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110d854:	e0bffd04 	addi	r2,fp,-12
8110d858:	1009883a 	mov	r4,r2
8110d85c:	11118200 	call	81111820 <atoi>
8110d860:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110d864:	e0bffc8f 	ldh	r2,-14(fp)
8110d868:	10800058 	cmpnei	r2,r2,1
8110d86c:	1000051e 	bne	r2,zero,8110d884 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110d870:	00a04574 	movhi	r2,33045
8110d874:	10be5a04 	addi	r2,r2,-1688
8110d878:	00c00044 	movi	r3,1
8110d87c:	10c00615 	stw	r3,24(r2)
8110d880:	00000306 	br	8110d890 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110d884:	00a04574 	movhi	r2,33045
8110d888:	10be5a04 	addi	r2,r2,-1688
8110d88c:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110d890:	e0bffd04 	addi	r2,fp,-12
8110d894:	e0bffa15 	stw	r2,-24(fp)

						break;
8110d898:	00001506 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110d89c:	e0bffc0f 	ldh	r2,-16(fp)
8110d8a0:	1009883a 	mov	r4,r2
8110d8a4:	110fe680 	call	8110fe68 <siCloseFile>
8110d8a8:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110d8ac:	e0bffb17 	ldw	r2,-20(fp)
8110d8b0:	1000031e 	bne	r2,zero,8110d8c0 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110d8b4:	01204534 	movhi	r4,33044
8110d8b8:	2133ea04 	addi	r4,r4,-12376
8110d8bc:	1112da00 	call	81112da0 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110d8c0:	00800044 	movi	r2,1
8110d8c4:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110d8c8:	00800044 	movi	r2,1
8110d8cc:	e0bff715 	stw	r2,-36(fp)
						break;
8110d8d0:	00000706 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110d8d4:	e0bff947 	ldb	r2,-27(fp)
8110d8d8:	100b883a 	mov	r5,r2
8110d8dc:	01204534 	movhi	r4,33044
8110d8e0:	2133f204 	addi	r4,r4,-12344
8110d8e4:	1112c940 	call	81112c94 <printf>
						break;
8110d8e8:	00000106 	br	8110d8f0 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110d8ec:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110d8f0:	e0bff817 	ldw	r2,-32(fp)
8110d8f4:	103e2026 	beq	r2,zero,8110d178 <__reset+0xfb0ed178>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110d8f8:	00000706 	br	8110d918 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110d8fc:	01204534 	movhi	r4,33044
8110d900:	2133ff04 	addi	r4,r4,-12292
8110d904:	1112da00 	call	81112da0 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110d908:	00000306 	br	8110d918 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110d90c:	01204534 	movhi	r4,33044
8110d910:	21340804 	addi	r4,r4,-12256
8110d914:	1112da00 	call	81112da0 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110d918:	e0bff717 	ldw	r2,-36(fp)
8110d91c:	1000541e 	bne	r2,zero,8110da70 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110d920:	01204534 	movhi	r4,33044
8110d924:	21340b04 	addi	r4,r4,-12244
8110d928:	1112da00 	call	81112da0 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110d92c:	01604534 	movhi	r5,33044
8110d930:	2973e304 	addi	r5,r5,-12404
8110d934:	01204534 	movhi	r4,33044
8110d938:	21341f04 	addi	r4,r4,-12164
8110d93c:	1112c940 	call	81112c94 <printf>


		xConfEth.siPortPUS = 17000;
8110d940:	00a04574 	movhi	r2,33045
8110d944:	10be5a04 	addi	r2,r2,-1688
8110d948:	00d09a04 	movi	r3,17000
8110d94c:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110d950:	00a04574 	movhi	r2,33045
8110d954:	10be5a04 	addi	r2,r2,-1688
8110d958:	00fff004 	movi	r3,-64
8110d95c:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110d960:	00a04574 	movhi	r2,33045
8110d964:	10be5a04 	addi	r2,r2,-1688
8110d968:	00ffea04 	movi	r3,-88
8110d96c:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110d970:	00a04574 	movhi	r2,33045
8110d974:	10be5a04 	addi	r2,r2,-1688
8110d978:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110d97c:	00a04574 	movhi	r2,33045
8110d980:	10be5a04 	addi	r2,r2,-1688
8110d984:	00c00144 	movi	r3,5
8110d988:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110d98c:	00a04574 	movhi	r2,33045
8110d990:	10be5a04 	addi	r2,r2,-1688
8110d994:	00fff004 	movi	r3,-64
8110d998:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110d99c:	00a04574 	movhi	r2,33045
8110d9a0:	10be5a04 	addi	r2,r2,-1688
8110d9a4:	00ffea04 	movi	r3,-88
8110d9a8:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110d9ac:	00a04574 	movhi	r2,33045
8110d9b0:	10be5a04 	addi	r2,r2,-1688
8110d9b4:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110d9b8:	00a04574 	movhi	r2,33045
8110d9bc:	10be5a04 	addi	r2,r2,-1688
8110d9c0:	00c00044 	movi	r3,1
8110d9c4:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110d9c8:	00a04574 	movhi	r2,33045
8110d9cc:	10be5a04 	addi	r2,r2,-1688
8110d9d0:	00ffffc4 	movi	r3,-1
8110d9d4:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110d9d8:	00a04574 	movhi	r2,33045
8110d9dc:	10be5a04 	addi	r2,r2,-1688
8110d9e0:	00ffffc4 	movi	r3,-1
8110d9e4:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110d9e8:	00a04574 	movhi	r2,33045
8110d9ec:	10be5a04 	addi	r2,r2,-1688
8110d9f0:	00ffffc4 	movi	r3,-1
8110d9f4:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110d9f8:	00a04574 	movhi	r2,33045
8110d9fc:	10be5a04 	addi	r2,r2,-1688
8110da00:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110da04:	00a04574 	movhi	r2,33045
8110da08:	10be5a04 	addi	r2,r2,-1688
8110da0c:	00ffff04 	movi	r3,-4
8110da10:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110da14:	00a04574 	movhi	r2,33045
8110da18:	10be5a04 	addi	r2,r2,-1688
8110da1c:	00fffdc4 	movi	r3,-9
8110da20:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110da24:	00a04574 	movhi	r2,33045
8110da28:	10be5a04 	addi	r2,r2,-1688
8110da2c:	00c018c4 	movi	r3,99
8110da30:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110da34:	00a04574 	movhi	r2,33045
8110da38:	10be5a04 	addi	r2,r2,-1688
8110da3c:	00c01344 	movi	r3,77
8110da40:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110da44:	00a04574 	movhi	r2,33045
8110da48:	10be5a04 	addi	r2,r2,-1688
8110da4c:	00c007c4 	movi	r3,31
8110da50:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110da54:	00a04574 	movhi	r2,33045
8110da58:	10be5a04 	addi	r2,r2,-1688
8110da5c:	00c01084 	movi	r3,66
8110da60:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110da64:	00a04574 	movhi	r2,33045
8110da68:	10be5a04 	addi	r2,r2,-1688
8110da6c:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110da70:	e0bff717 	ldw	r2,-36(fp)
}
8110da74:	e6ffff04 	addi	sp,fp,-4
8110da78:	dfc00217 	ldw	ra,8(sp)
8110da7c:	df000117 	ldw	fp,4(sp)
8110da80:	dc000017 	ldw	r16,0(sp)
8110da84:	dec00304 	addi	sp,sp,12
8110da88:	f800283a 	ret

8110da8c <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110da8c:	defff004 	addi	sp,sp,-64
8110da90:	de00012e 	bgeu	sp,et,8110da98 <vShowEthConfig+0xc>
8110da94:	003b68fa 	trap	3
8110da98:	dfc00f15 	stw	ra,60(sp)
8110da9c:	df000e15 	stw	fp,56(sp)
8110daa0:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110daa4:	d0a04d17 	ldw	r2,-32460(gp)
8110daa8:	100f883a 	mov	r7,r2
8110daac:	018007c4 	movi	r6,31
8110dab0:	01400044 	movi	r5,1
8110dab4:	01204534 	movhi	r4,33044
8110dab8:	21342504 	addi	r4,r4,-12140
8110dabc:	1111f680 	call	81111f68 <fwrite>

		memset(buffer,0,40);
8110dac0:	01800a04 	movi	r6,40
8110dac4:	000b883a 	mov	r5,zero
8110dac8:	e13ff604 	addi	r4,fp,-40
8110dacc:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110dad0:	00a04574 	movhi	r2,33045
8110dad4:	10be5a04 	addi	r2,r2,-1688
8110dad8:	10800403 	ldbu	r2,16(r2)
8110dadc:	11803fcc 	andi	r6,r2,255
8110dae0:	00a04574 	movhi	r2,33045
8110dae4:	10be5a04 	addi	r2,r2,-1688
8110dae8:	10800443 	ldbu	r2,17(r2)
8110daec:	11c03fcc 	andi	r7,r2,255
8110daf0:	00a04574 	movhi	r2,33045
8110daf4:	10be5a04 	addi	r2,r2,-1688
8110daf8:	10800483 	ldbu	r2,18(r2)
8110dafc:	10c03fcc 	andi	r3,r2,255
8110db00:	00a04574 	movhi	r2,33045
8110db04:	10be5a04 	addi	r2,r2,-1688
8110db08:	108004c3 	ldbu	r2,19(r2)
8110db0c:	11003fcc 	andi	r4,r2,255
8110db10:	00a04574 	movhi	r2,33045
8110db14:	10be5a04 	addi	r2,r2,-1688
8110db18:	10800503 	ldbu	r2,20(r2)
8110db1c:	11403fcc 	andi	r5,r2,255
8110db20:	00a04574 	movhi	r2,33045
8110db24:	10be5a04 	addi	r2,r2,-1688
8110db28:	10800543 	ldbu	r2,21(r2)
8110db2c:	10803fcc 	andi	r2,r2,255
8110db30:	d8800315 	stw	r2,12(sp)
8110db34:	d9400215 	stw	r5,8(sp)
8110db38:	d9000115 	stw	r4,4(sp)
8110db3c:	d8c00015 	stw	r3,0(sp)
8110db40:	01604534 	movhi	r5,33044
8110db44:	29742d04 	addi	r5,r5,-12108
8110db48:	e13ff604 	addi	r4,fp,-40
8110db4c:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110db50:	d0a04d17 	ldw	r2,-32460(gp)
8110db54:	e17ff604 	addi	r5,fp,-40
8110db58:	1009883a 	mov	r4,r2
8110db5c:	111197c0 	call	8111197c <fprintf>

		memset(buffer,0,40);
8110db60:	01800a04 	movi	r6,40
8110db64:	000b883a 	mov	r5,zero
8110db68:	e13ff604 	addi	r4,fp,-40
8110db6c:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110db70:	00a04574 	movhi	r2,33045
8110db74:	10be5a04 	addi	r2,r2,-1688
8110db78:	10800003 	ldbu	r2,0(r2)
8110db7c:	11003fcc 	andi	r4,r2,255
8110db80:	00a04574 	movhi	r2,33045
8110db84:	10be5a04 	addi	r2,r2,-1688
8110db88:	10800043 	ldbu	r2,1(r2)
8110db8c:	11403fcc 	andi	r5,r2,255
8110db90:	00a04574 	movhi	r2,33045
8110db94:	10be5a04 	addi	r2,r2,-1688
8110db98:	10800083 	ldbu	r2,2(r2)
8110db9c:	10c03fcc 	andi	r3,r2,255
8110dba0:	00a04574 	movhi	r2,33045
8110dba4:	10be5a04 	addi	r2,r2,-1688
8110dba8:	108000c3 	ldbu	r2,3(r2)
8110dbac:	10803fcc 	andi	r2,r2,255
8110dbb0:	d8800115 	stw	r2,4(sp)
8110dbb4:	d8c00015 	stw	r3,0(sp)
8110dbb8:	280f883a 	mov	r7,r5
8110dbbc:	200d883a 	mov	r6,r4
8110dbc0:	01604534 	movhi	r5,33044
8110dbc4:	29743604 	addi	r5,r5,-12072
8110dbc8:	e13ff604 	addi	r4,fp,-40
8110dbcc:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110dbd0:	d0a04d17 	ldw	r2,-32460(gp)
8110dbd4:	e17ff604 	addi	r5,fp,-40
8110dbd8:	1009883a 	mov	r4,r2
8110dbdc:	111197c0 	call	8111197c <fprintf>

		memset(buffer,0,40);
8110dbe0:	01800a04 	movi	r6,40
8110dbe4:	000b883a 	mov	r5,zero
8110dbe8:	e13ff604 	addi	r4,fp,-40
8110dbec:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110dbf0:	00a04574 	movhi	r2,33045
8110dbf4:	10be5a04 	addi	r2,r2,-1688
8110dbf8:	10800103 	ldbu	r2,4(r2)
8110dbfc:	11003fcc 	andi	r4,r2,255
8110dc00:	00a04574 	movhi	r2,33045
8110dc04:	10be5a04 	addi	r2,r2,-1688
8110dc08:	10800143 	ldbu	r2,5(r2)
8110dc0c:	11403fcc 	andi	r5,r2,255
8110dc10:	00a04574 	movhi	r2,33045
8110dc14:	10be5a04 	addi	r2,r2,-1688
8110dc18:	10800183 	ldbu	r2,6(r2)
8110dc1c:	10c03fcc 	andi	r3,r2,255
8110dc20:	00a04574 	movhi	r2,33045
8110dc24:	10be5a04 	addi	r2,r2,-1688
8110dc28:	108001c3 	ldbu	r2,7(r2)
8110dc2c:	10803fcc 	andi	r2,r2,255
8110dc30:	d8800115 	stw	r2,4(sp)
8110dc34:	d8c00015 	stw	r3,0(sp)
8110dc38:	280f883a 	mov	r7,r5
8110dc3c:	200d883a 	mov	r6,r4
8110dc40:	01604534 	movhi	r5,33044
8110dc44:	29743c04 	addi	r5,r5,-12048
8110dc48:	e13ff604 	addi	r4,fp,-40
8110dc4c:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110dc50:	d0a04d17 	ldw	r2,-32460(gp)
8110dc54:	e17ff604 	addi	r5,fp,-40
8110dc58:	1009883a 	mov	r4,r2
8110dc5c:	111197c0 	call	8111197c <fprintf>

		memset(buffer,0,40);
8110dc60:	01800a04 	movi	r6,40
8110dc64:	000b883a 	mov	r5,zero
8110dc68:	e13ff604 	addi	r4,fp,-40
8110dc6c:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110dc70:	00a04574 	movhi	r2,33045
8110dc74:	10be5a04 	addi	r2,r2,-1688
8110dc78:	10800203 	ldbu	r2,8(r2)
8110dc7c:	11003fcc 	andi	r4,r2,255
8110dc80:	00a04574 	movhi	r2,33045
8110dc84:	10be5a04 	addi	r2,r2,-1688
8110dc88:	10800243 	ldbu	r2,9(r2)
8110dc8c:	11403fcc 	andi	r5,r2,255
8110dc90:	00a04574 	movhi	r2,33045
8110dc94:	10be5a04 	addi	r2,r2,-1688
8110dc98:	10800283 	ldbu	r2,10(r2)
8110dc9c:	10c03fcc 	andi	r3,r2,255
8110dca0:	00a04574 	movhi	r2,33045
8110dca4:	10be5a04 	addi	r2,r2,-1688
8110dca8:	108002c3 	ldbu	r2,11(r2)
8110dcac:	10803fcc 	andi	r2,r2,255
8110dcb0:	d8800115 	stw	r2,4(sp)
8110dcb4:	d8c00015 	stw	r3,0(sp)
8110dcb8:	280f883a 	mov	r7,r5
8110dcbc:	200d883a 	mov	r6,r4
8110dcc0:	01604534 	movhi	r5,33044
8110dcc4:	29744304 	addi	r5,r5,-12020
8110dcc8:	e13ff604 	addi	r4,fp,-40
8110dccc:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110dcd0:	d0a04d17 	ldw	r2,-32460(gp)
8110dcd4:	e17ff604 	addi	r5,fp,-40
8110dcd8:	1009883a 	mov	r4,r2
8110dcdc:	111197c0 	call	8111197c <fprintf>

		memset(buffer,0,40);
8110dce0:	01800a04 	movi	r6,40
8110dce4:	000b883a 	mov	r5,zero
8110dce8:	e13ff604 	addi	r4,fp,-40
8110dcec:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110dcf0:	00a04574 	movhi	r2,33045
8110dcf4:	10be5a04 	addi	r2,r2,-1688
8110dcf8:	10800303 	ldbu	r2,12(r2)
8110dcfc:	11003fcc 	andi	r4,r2,255
8110dd00:	00a04574 	movhi	r2,33045
8110dd04:	10be5a04 	addi	r2,r2,-1688
8110dd08:	10800343 	ldbu	r2,13(r2)
8110dd0c:	11403fcc 	andi	r5,r2,255
8110dd10:	00a04574 	movhi	r2,33045
8110dd14:	10be5a04 	addi	r2,r2,-1688
8110dd18:	10800383 	ldbu	r2,14(r2)
8110dd1c:	10c03fcc 	andi	r3,r2,255
8110dd20:	00a04574 	movhi	r2,33045
8110dd24:	10be5a04 	addi	r2,r2,-1688
8110dd28:	108003c3 	ldbu	r2,15(r2)
8110dd2c:	10803fcc 	andi	r2,r2,255
8110dd30:	d8800115 	stw	r2,4(sp)
8110dd34:	d8c00015 	stw	r3,0(sp)
8110dd38:	280f883a 	mov	r7,r5
8110dd3c:	200d883a 	mov	r6,r4
8110dd40:	01604534 	movhi	r5,33044
8110dd44:	29744a04 	addi	r5,r5,-11992
8110dd48:	e13ff604 	addi	r4,fp,-40
8110dd4c:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110dd50:	d0a04d17 	ldw	r2,-32460(gp)
8110dd54:	e17ff604 	addi	r5,fp,-40
8110dd58:	1009883a 	mov	r4,r2
8110dd5c:	111197c0 	call	8111197c <fprintf>

		memset(buffer,0,40);
8110dd60:	01800a04 	movi	r6,40
8110dd64:	000b883a 	mov	r5,zero
8110dd68:	e13ff604 	addi	r4,fp,-40
8110dd6c:	1112acc0 	call	81112acc <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110dd70:	00a04574 	movhi	r2,33045
8110dd74:	10be5a04 	addi	r2,r2,-1688
8110dd78:	1080058b 	ldhu	r2,22(r2)
8110dd7c:	10bfffcc 	andi	r2,r2,65535
8110dd80:	100d883a 	mov	r6,r2
8110dd84:	01604534 	movhi	r5,33044
8110dd88:	29745104 	addi	r5,r5,-11964
8110dd8c:	e13ff604 	addi	r4,fp,-40
8110dd90:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer );
8110dd94:	d0a04d17 	ldw	r2,-32460(gp)
8110dd98:	e17ff604 	addi	r5,fp,-40
8110dd9c:	1009883a 	mov	r4,r2
8110dda0:	111197c0 	call	8111197c <fprintf>

	}
8110dda4:	0001883a 	nop
8110dda8:	e037883a 	mov	sp,fp
8110ddac:	dfc00117 	ldw	ra,4(sp)
8110ddb0:	df000017 	ldw	fp,0(sp)
8110ddb4:	dec00204 	addi	sp,sp,8
8110ddb8:	f800283a 	ret

8110ddbc <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110ddbc:	defffb04 	addi	sp,sp,-20
8110ddc0:	de00012e 	bgeu	sp,et,8110ddc8 <ucCrc8+0xc>
8110ddc4:	003b68fa 	trap	3
8110ddc8:	df000415 	stw	fp,16(sp)
8110ddcc:	df000404 	addi	fp,sp,16
8110ddd0:	e13ffd15 	stw	r4,-12(fp)
8110ddd4:	e17ffe15 	stw	r5,-8(fp)
8110ddd8:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110dddc:	e0bffe17 	ldw	r2,-8(fp)
8110dde0:	1000021e 	bne	r2,zero,8110ddec <ucCrc8+0x30>
        return 0;
8110dde4:	0005883a 	mov	r2,zero
8110dde8:	00001906 	br	8110de50 <ucCrc8+0x94>
    crc &= 0xff;
8110ddec:	e0bffd17 	ldw	r2,-12(fp)
8110ddf0:	10803fcc 	andi	r2,r2,255
8110ddf4:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110ddf8:	e0fffe17 	ldw	r3,-8(fp)
8110ddfc:	e0bfff17 	ldw	r2,-4(fp)
8110de00:	1885883a 	add	r2,r3,r2
8110de04:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110de08:	00000d06 	br	8110de40 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110de0c:	e0bffe17 	ldw	r2,-8(fp)
8110de10:	10c00044 	addi	r3,r2,1
8110de14:	e0fffe15 	stw	r3,-8(fp)
8110de18:	10800003 	ldbu	r2,0(r2)
8110de1c:	10c03fcc 	andi	r3,r2,255
8110de20:	e0bffd17 	ldw	r2,-12(fp)
8110de24:	1886f03a 	xor	r3,r3,r2
8110de28:	00a04534 	movhi	r2,33044
8110de2c:	10b454c4 	addi	r2,r2,-11949
8110de30:	10c5883a 	add	r2,r2,r3
8110de34:	10800003 	ldbu	r2,0(r2)
8110de38:	10803fcc 	andi	r2,r2,255
8110de3c:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110de40:	e0fffe17 	ldw	r3,-8(fp)
8110de44:	e0bffc17 	ldw	r2,-16(fp)
8110de48:	18bff036 	bltu	r3,r2,8110de0c <__reset+0xfb0ede0c>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110de4c:	e0bffd17 	ldw	r2,-12(fp)
}
8110de50:	e037883a 	mov	sp,fp
8110de54:	df000017 	ldw	fp,0(sp)
8110de58:	dec00104 	addi	sp,sp,4
8110de5c:	f800283a 	ret

8110de60 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110de60:	defffb04 	addi	sp,sp,-20
8110de64:	de00012e 	bgeu	sp,et,8110de6c <ucCrc8wInit+0xc>
8110de68:	003b68fa 	trap	3
8110de6c:	dfc00415 	stw	ra,16(sp)
8110de70:	df000315 	stw	fp,12(sp)
8110de74:	df000304 	addi	fp,sp,12
8110de78:	e13ffe15 	stw	r4,-8(fp)
8110de7c:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110de80:	000d883a 	mov	r6,zero
8110de84:	000b883a 	mov	r5,zero
8110de88:	0009883a 	mov	r4,zero
8110de8c:	110ddbc0 	call	8110ddbc <ucCrc8>
8110de90:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110de94:	e0bffd03 	ldbu	r2,-12(fp)
8110de98:	e1bfff17 	ldw	r6,-4(fp)
8110de9c:	e17ffe17 	ldw	r5,-8(fp)
8110dea0:	1009883a 	mov	r4,r2
8110dea4:	110ddbc0 	call	8110ddbc <ucCrc8>
}
8110dea8:	e037883a 	mov	sp,fp
8110deac:	dfc00117 	ldw	ra,4(sp)
8110deb0:	df000017 	ldw	fp,0(sp)
8110deb4:	dec00204 	addi	sp,sp,8
8110deb8:	f800283a 	ret

8110debc <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110debc:	defff904 	addi	sp,sp,-28
8110dec0:	de00012e 	bgeu	sp,et,8110dec8 <printErrorTask+0xc>
8110dec4:	003b68fa 	trap	3
8110dec8:	dfc00615 	stw	ra,24(sp)
8110decc:	df000515 	stw	fp,20(sp)
8110ded0:	df000504 	addi	fp,sp,20
8110ded4:	2005883a 	mov	r2,r4
8110ded8:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110dedc:	e03ffb15 	stw	zero,-20(fp)
8110dee0:	e03ffc15 	stw	zero,-16(fp)
8110dee4:	e03ffd15 	stw	zero,-12(fp)
8110dee8:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110deec:	e0bfff03 	ldbu	r2,-4(fp)
8110def0:	100d883a 	mov	r6,r2
8110def4:	01604534 	movhi	r5,33044
8110def8:	29749504 	addi	r5,r5,-11692
8110defc:	e13ffb04 	addi	r4,fp,-20
8110df00:	11130e40 	call	811130e4 <sprintf>
		debug(fp, buffer);
8110df04:	d0a04d17 	ldw	r2,-32460(gp)
8110df08:	e17ffb04 	addi	r5,fp,-20
8110df0c:	1009883a 	mov	r4,r2
8110df10:	111197c0 	call	8111197c <fprintf>
	}
8110df14:	0001883a 	nop
8110df18:	e037883a 	mov	sp,fp
8110df1c:	dfc00117 	ldw	ra,4(sp)
8110df20:	df000017 	ldw	fp,0(sp)
8110df24:	dec00204 	addi	sp,sp,8
8110df28:	f800283a 	ret

8110df2c <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110df2c:	defffd04 	addi	sp,sp,-12
8110df30:	de00012e 	bgeu	sp,et,8110df38 <vFailCreateMutexSResources+0xc>
8110df34:	003b68fa 	trap	3
8110df38:	dfc00215 	stw	ra,8(sp)
8110df3c:	df000115 	stw	fp,4(sp)
8110df40:	df000104 	addi	fp,sp,4
8110df44:	2005883a 	mov	r2,r4
8110df48:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110df4c:	d0a04d17 	ldw	r2,-32460(gp)
8110df50:	100f883a 	mov	r7,r2
8110df54:	018008c4 	movi	r6,35
8110df58:	01400044 	movi	r5,1
8110df5c:	01204534 	movhi	r4,33044
8110df60:	21349804 	addi	r4,r4,-11680
8110df64:	1111f680 	call	81111f68 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110df68:	e0bfff03 	ldbu	r2,-4(fp)
8110df6c:	1009883a 	mov	r4,r2
8110df70:	110debc0 	call	8110debc <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110df74:	0001883a 	nop
8110df78:	e037883a 	mov	sp,fp
8110df7c:	dfc00117 	ldw	ra,4(sp)
8110df80:	df000017 	ldw	fp,0(sp)
8110df84:	dec00204 	addi	sp,sp,8
8110df88:	f800283a 	ret

8110df8c <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110df8c:	defffe04 	addi	sp,sp,-8
8110df90:	de00012e 	bgeu	sp,et,8110df98 <vFailCreateSemaphoreResources+0xc>
8110df94:	003b68fa 	trap	3
8110df98:	dfc00115 	stw	ra,4(sp)
8110df9c:	df000015 	stw	fp,0(sp)
8110dfa0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110dfa4:	d0a04d17 	ldw	r2,-32460(gp)
8110dfa8:	100f883a 	mov	r7,r2
8110dfac:	01800984 	movi	r6,38
8110dfb0:	01400044 	movi	r5,1
8110dfb4:	01204534 	movhi	r4,33044
8110dfb8:	2134a104 	addi	r4,r4,-11644
8110dfbc:	1111f680 	call	81111f68 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dfc0:	0001883a 	nop
8110dfc4:	e037883a 	mov	sp,fp
8110dfc8:	dfc00117 	ldw	ra,4(sp)
8110dfcc:	df000017 	ldw	fp,0(sp)
8110dfd0:	dec00204 	addi	sp,sp,8
8110dfd4:	f800283a 	ret

8110dfd8 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110dfd8:	defffe04 	addi	sp,sp,-8
8110dfdc:	de00012e 	bgeu	sp,et,8110dfe4 <vFailTestCriticasParts+0xc>
8110dfe0:	003b68fa 	trap	3
8110dfe4:	dfc00115 	stw	ra,4(sp)
8110dfe8:	df000015 	stw	fp,0(sp)
8110dfec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110dff0:	d0a04d17 	ldw	r2,-32460(gp)
8110dff4:	100f883a 	mov	r7,r2
8110dff8:	018007c4 	movi	r6,31
8110dffc:	01400044 	movi	r5,1
8110e000:	01204534 	movhi	r4,33044
8110e004:	2134ab04 	addi	r4,r4,-11604
8110e008:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e00c:	0001883a 	nop
8110e010:	e037883a 	mov	sp,fp
8110e014:	dfc00117 	ldw	ra,4(sp)
8110e018:	df000017 	ldw	fp,0(sp)
8110e01c:	dec00204 	addi	sp,sp,8
8110e020:	f800283a 	ret

8110e024 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110e024:	defffe04 	addi	sp,sp,-8
8110e028:	de00012e 	bgeu	sp,et,8110e030 <vFailSendxSemCommInit+0xc>
8110e02c:	003b68fa 	trap	3
8110e030:	dfc00115 	stw	ra,4(sp)
8110e034:	df000015 	stw	fp,0(sp)
8110e038:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110e03c:	d0a04d17 	ldw	r2,-32460(gp)
8110e040:	100f883a 	mov	r7,r2
8110e044:	01800744 	movi	r6,29
8110e048:	01400044 	movi	r5,1
8110e04c:	01204534 	movhi	r4,33044
8110e050:	2134b304 	addi	r4,r4,-11572
8110e054:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110e058:	d0a04d17 	ldw	r2,-32460(gp)
8110e05c:	100f883a 	mov	r7,r2
8110e060:	01800a44 	movi	r6,41
8110e064:	01400044 	movi	r5,1
8110e068:	01204534 	movhi	r4,33044
8110e06c:	2134bb04 	addi	r4,r4,-11540
8110e070:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e074:	0001883a 	nop
8110e078:	e037883a 	mov	sp,fp
8110e07c:	dfc00117 	ldw	ra,4(sp)
8110e080:	df000017 	ldw	fp,0(sp)
8110e084:	dec00204 	addi	sp,sp,8
8110e088:	f800283a 	ret

8110e08c <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110e08c:	defffe04 	addi	sp,sp,-8
8110e090:	de00012e 	bgeu	sp,et,8110e098 <vFailSendPreParsedSemaphore+0xc>
8110e094:	003b68fa 	trap	3
8110e098:	dfc00115 	stw	ra,4(sp)
8110e09c:	df000015 	stw	fp,0(sp)
8110e0a0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110e0a4:	d0a04d17 	ldw	r2,-32460(gp)
8110e0a8:	100f883a 	mov	r7,r2
8110e0ac:	01800904 	movi	r6,36
8110e0b0:	01400044 	movi	r5,1
8110e0b4:	01204534 	movhi	r4,33044
8110e0b8:	2134c604 	addi	r4,r4,-11496
8110e0bc:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e0c0:	0001883a 	nop
8110e0c4:	e037883a 	mov	sp,fp
8110e0c8:	dfc00117 	ldw	ra,4(sp)
8110e0cc:	df000017 	ldw	fp,0(sp)
8110e0d0:	dec00204 	addi	sp,sp,8
8110e0d4:	f800283a 	ret

8110e0d8 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110e0d8:	defffe04 	addi	sp,sp,-8
8110e0dc:	de00012e 	bgeu	sp,et,8110e0e4 <vFailSendPreAckReceiverSemaphore+0xc>
8110e0e0:	003b68fa 	trap	3
8110e0e4:	dfc00115 	stw	ra,4(sp)
8110e0e8:	df000015 	stw	fp,0(sp)
8110e0ec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110e0f0:	d0a04d17 	ldw	r2,-32460(gp)
8110e0f4:	100f883a 	mov	r7,r2
8110e0f8:	01800a44 	movi	r6,41
8110e0fc:	01400044 	movi	r5,1
8110e100:	01204534 	movhi	r4,33044
8110e104:	2134d004 	addi	r4,r4,-11456
8110e108:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e10c:	0001883a 	nop
8110e110:	e037883a 	mov	sp,fp
8110e114:	dfc00117 	ldw	ra,4(sp)
8110e118:	df000017 	ldw	fp,0(sp)
8110e11c:	dec00204 	addi	sp,sp,8
8110e120:	f800283a 	ret

8110e124 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110e124:	defffe04 	addi	sp,sp,-8
8110e128:	de00012e 	bgeu	sp,et,8110e130 <vFailSendPreAckSenderSemaphore+0xc>
8110e12c:	003b68fa 	trap	3
8110e130:	dfc00115 	stw	ra,4(sp)
8110e134:	df000015 	stw	fp,0(sp)
8110e138:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110e13c:	d0a04d17 	ldw	r2,-32460(gp)
8110e140:	100f883a 	mov	r7,r2
8110e144:	018009c4 	movi	r6,39
8110e148:	01400044 	movi	r5,1
8110e14c:	01204534 	movhi	r4,33044
8110e150:	2134db04 	addi	r4,r4,-11412
8110e154:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e158:	0001883a 	nop
8110e15c:	e037883a 	mov	sp,fp
8110e160:	dfc00117 	ldw	ra,4(sp)
8110e164:	df000017 	ldw	fp,0(sp)
8110e168:	dec00204 	addi	sp,sp,8
8110e16c:	f800283a 	ret

8110e170 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110e170:	defffe04 	addi	sp,sp,-8
8110e174:	de00012e 	bgeu	sp,et,8110e17c <vFailGetCountSemaphoreSenderTask+0xc>
8110e178:	003b68fa 	trap	3
8110e17c:	dfc00115 	stw	ra,4(sp)
8110e180:	df000015 	stw	fp,0(sp)
8110e184:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110e188:	d0a04d17 	ldw	r2,-32460(gp)
8110e18c:	100f883a 	mov	r7,r2
8110e190:	01800a44 	movi	r6,41
8110e194:	01400044 	movi	r5,1
8110e198:	01204534 	movhi	r4,33044
8110e19c:	2134e504 	addi	r4,r4,-11372
8110e1a0:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110e1a4:	d0a04d17 	ldw	r2,-32460(gp)
8110e1a8:	100f883a 	mov	r7,r2
8110e1ac:	01801104 	movi	r6,68
8110e1b0:	01400044 	movi	r5,1
8110e1b4:	01204534 	movhi	r4,33044
8110e1b8:	2134f004 	addi	r4,r4,-11328
8110e1bc:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e1c0:	0001883a 	nop
8110e1c4:	e037883a 	mov	sp,fp
8110e1c8:	dfc00117 	ldw	ra,4(sp)
8110e1cc:	df000017 	ldw	fp,0(sp)
8110e1d0:	dec00204 	addi	sp,sp,8
8110e1d4:	f800283a 	ret

8110e1d8 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110e1d8:	defffe04 	addi	sp,sp,-8
8110e1dc:	de00012e 	bgeu	sp,et,8110e1e4 <vFailGetMutexSenderTask+0xc>
8110e1e0:	003b68fa 	trap	3
8110e1e4:	dfc00115 	stw	ra,4(sp)
8110e1e8:	df000015 	stw	fp,0(sp)
8110e1ec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110e1f0:	d0a04d17 	ldw	r2,-32460(gp)
8110e1f4:	100f883a 	mov	r7,r2
8110e1f8:	01800804 	movi	r6,32
8110e1fc:	01400044 	movi	r5,1
8110e200:	01204534 	movhi	r4,33044
8110e204:	21350204 	addi	r4,r4,-11256
8110e208:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110e20c:	d0a04d17 	ldw	r2,-32460(gp)
8110e210:	100f883a 	mov	r7,r2
8110e214:	01801084 	movi	r6,66
8110e218:	01400044 	movi	r5,1
8110e21c:	01204534 	movhi	r4,33044
8110e220:	21350b04 	addi	r4,r4,-11220
8110e224:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e228:	0001883a 	nop
8110e22c:	e037883a 	mov	sp,fp
8110e230:	dfc00117 	ldw	ra,4(sp)
8110e234:	df000017 	ldw	fp,0(sp)
8110e238:	dec00204 	addi	sp,sp,8
8110e23c:	f800283a 	ret

8110e240 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110e240:	defffe04 	addi	sp,sp,-8
8110e244:	de00012e 	bgeu	sp,et,8110e24c <vFailGetCountSemaphoreReceiverTask+0xc>
8110e248:	003b68fa 	trap	3
8110e24c:	dfc00115 	stw	ra,4(sp)
8110e250:	df000015 	stw	fp,0(sp)
8110e254:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110e258:	d0a04d17 	ldw	r2,-32460(gp)
8110e25c:	100f883a 	mov	r7,r2
8110e260:	01800ac4 	movi	r6,43
8110e264:	01400044 	movi	r5,1
8110e268:	01204534 	movhi	r4,33044
8110e26c:	21351c04 	addi	r4,r4,-11152
8110e270:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110e274:	d0a04d17 	ldw	r2,-32460(gp)
8110e278:	100f883a 	mov	r7,r2
8110e27c:	01801184 	movi	r6,70
8110e280:	01400044 	movi	r5,1
8110e284:	01204534 	movhi	r4,33044
8110e288:	21352704 	addi	r4,r4,-11108
8110e28c:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e290:	0001883a 	nop
8110e294:	e037883a 	mov	sp,fp
8110e298:	dfc00117 	ldw	ra,4(sp)
8110e29c:	df000017 	ldw	fp,0(sp)
8110e2a0:	dec00204 	addi	sp,sp,8
8110e2a4:	f800283a 	ret

8110e2a8 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110e2a8:	defffe04 	addi	sp,sp,-8
8110e2ac:	de00012e 	bgeu	sp,et,8110e2b4 <vFailGetMutexReceiverTask+0xc>
8110e2b0:	003b68fa 	trap	3
8110e2b4:	dfc00115 	stw	ra,4(sp)
8110e2b8:	df000015 	stw	fp,0(sp)
8110e2bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110e2c0:	d0a04d17 	ldw	r2,-32460(gp)
8110e2c4:	100f883a 	mov	r7,r2
8110e2c8:	01800884 	movi	r6,34
8110e2cc:	01400044 	movi	r5,1
8110e2d0:	01204534 	movhi	r4,33044
8110e2d4:	21353904 	addi	r4,r4,-11036
8110e2d8:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110e2dc:	d0a04d17 	ldw	r2,-32460(gp)
8110e2e0:	100f883a 	mov	r7,r2
8110e2e4:	01801104 	movi	r6,68
8110e2e8:	01400044 	movi	r5,1
8110e2ec:	01204534 	movhi	r4,33044
8110e2f0:	21354204 	addi	r4,r4,-11000
8110e2f4:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e2f8:	0001883a 	nop
8110e2fc:	e037883a 	mov	sp,fp
8110e300:	dfc00117 	ldw	ra,4(sp)
8110e304:	df000017 	ldw	fp,0(sp)
8110e308:	dec00204 	addi	sp,sp,8
8110e30c:	f800283a 	ret

8110e310 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110e310:	defffe04 	addi	sp,sp,-8
8110e314:	de00012e 	bgeu	sp,et,8110e31c <vFailGetMutexTxUARTSenderTask+0xc>
8110e318:	003b68fa 	trap	3
8110e31c:	dfc00115 	stw	ra,4(sp)
8110e320:	df000015 	stw	fp,0(sp)
8110e324:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110e328:	d0a04d17 	ldw	r2,-32460(gp)
8110e32c:	100f883a 	mov	r7,r2
8110e330:	01800984 	movi	r6,38
8110e334:	01400044 	movi	r5,1
8110e338:	01204534 	movhi	r4,33044
8110e33c:	21355404 	addi	r4,r4,-10928
8110e340:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110e344:	d0a04d17 	ldw	r2,-32460(gp)
8110e348:	100f883a 	mov	r7,r2
8110e34c:	01801044 	movi	r6,65
8110e350:	01400044 	movi	r5,1
8110e354:	01204534 	movhi	r4,33044
8110e358:	21355e04 	addi	r4,r4,-10888
8110e35c:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e360:	0001883a 	nop
8110e364:	e037883a 	mov	sp,fp
8110e368:	dfc00117 	ldw	ra,4(sp)
8110e36c:	df000017 	ldw	fp,0(sp)
8110e370:	dec00204 	addi	sp,sp,8
8110e374:	f800283a 	ret

8110e378 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110e378:	defffe04 	addi	sp,sp,-8
8110e37c:	de00012e 	bgeu	sp,et,8110e384 <vFailGetMacRTC+0xc>
8110e380:	003b68fa 	trap	3
8110e384:	dfc00115 	stw	ra,4(sp)
8110e388:	df000015 	stw	fp,0(sp)
8110e38c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110e390:	d0a04d17 	ldw	r2,-32460(gp)
8110e394:	100f883a 	mov	r7,r2
8110e398:	018003c4 	movi	r6,15
8110e39c:	01400044 	movi	r5,1
8110e3a0:	01204534 	movhi	r4,33044
8110e3a4:	21356f04 	addi	r4,r4,-10820
8110e3a8:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e3ac:	0001883a 	nop
8110e3b0:	e037883a 	mov	sp,fp
8110e3b4:	dfc00117 	ldw	ra,4(sp)
8110e3b8:	df000017 	ldw	fp,0(sp)
8110e3bc:	dec00204 	addi	sp,sp,8
8110e3c0:	f800283a 	ret

8110e3c4 <vFailInitialization>:


void vFailInitialization( void )
{
8110e3c4:	defffe04 	addi	sp,sp,-8
8110e3c8:	de00012e 	bgeu	sp,et,8110e3d0 <vFailInitialization+0xc>
8110e3cc:	003b68fa 	trap	3
8110e3d0:	dfc00115 	stw	ra,4(sp)
8110e3d4:	df000015 	stw	fp,0(sp)
8110e3d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110e3dc:	d0a04d17 	ldw	r2,-32460(gp)
8110e3e0:	100f883a 	mov	r7,r2
8110e3e4:	01800504 	movi	r6,20
8110e3e8:	01400044 	movi	r5,1
8110e3ec:	01204534 	movhi	r4,33044
8110e3f0:	21357304 	addi	r4,r4,-10804
8110e3f4:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e3f8:	0001883a 	nop
8110e3fc:	e037883a 	mov	sp,fp
8110e400:	dfc00117 	ldw	ra,4(sp)
8110e404:	df000017 	ldw	fp,0(sp)
8110e408:	dec00204 	addi	sp,sp,8
8110e40c:	f800283a 	ret

8110e410 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110e410:	defffe04 	addi	sp,sp,-8
8110e414:	de00012e 	bgeu	sp,et,8110e41c <vFailReceiverCreate+0xc>
8110e418:	003b68fa 	trap	3
8110e41c:	dfc00115 	stw	ra,4(sp)
8110e420:	df000015 	stw	fp,0(sp)
8110e424:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110e428:	d0a04d17 	ldw	r2,-32460(gp)
8110e42c:	100f883a 	mov	r7,r2
8110e430:	01800484 	movi	r6,18
8110e434:	01400044 	movi	r5,1
8110e438:	01204534 	movhi	r4,33044
8110e43c:	21357904 	addi	r4,r4,-10780
8110e440:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e444:	0001883a 	nop
8110e448:	e037883a 	mov	sp,fp
8110e44c:	dfc00117 	ldw	ra,4(sp)
8110e450:	df000017 	ldw	fp,0(sp)
8110e454:	dec00204 	addi	sp,sp,8
8110e458:	f800283a 	ret

8110e45c <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110e45c:	defffe04 	addi	sp,sp,-8
8110e460:	de00012e 	bgeu	sp,et,8110e468 <vFailSenderCreate+0xc>
8110e464:	003b68fa 	trap	3
8110e468:	dfc00115 	stw	ra,4(sp)
8110e46c:	df000015 	stw	fp,0(sp)
8110e470:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110e474:	d0a04d17 	ldw	r2,-32460(gp)
8110e478:	100f883a 	mov	r7,r2
8110e47c:	01800484 	movi	r6,18
8110e480:	01400044 	movi	r5,1
8110e484:	01204534 	movhi	r4,33044
8110e488:	21357e04 	addi	r4,r4,-10760
8110e48c:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e490:	0001883a 	nop
8110e494:	e037883a 	mov	sp,fp
8110e498:	dfc00117 	ldw	ra,4(sp)
8110e49c:	df000017 	ldw	fp,0(sp)
8110e4a0:	dec00204 	addi	sp,sp,8
8110e4a4:	f800283a 	ret

8110e4a8 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110e4a8:	defffe04 	addi	sp,sp,-8
8110e4ac:	de00012e 	bgeu	sp,et,8110e4b4 <vFailDeleteInitialization+0xc>
8110e4b0:	003b68fa 	trap	3
8110e4b4:	dfc00115 	stw	ra,4(sp)
8110e4b8:	df000015 	stw	fp,0(sp)
8110e4bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110e4c0:	d0a04d17 	ldw	r2,-32460(gp)
8110e4c4:	100f883a 	mov	r7,r2
8110e4c8:	01800684 	movi	r6,26
8110e4cc:	01400044 	movi	r5,1
8110e4d0:	01204534 	movhi	r4,33044
8110e4d4:	21358304 	addi	r4,r4,-10740
8110e4d8:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4dc:	0001883a 	nop
8110e4e0:	e037883a 	mov	sp,fp
8110e4e4:	dfc00117 	ldw	ra,4(sp)
8110e4e8:	df000017 	ldw	fp,0(sp)
8110e4ec:	dec00204 	addi	sp,sp,8
8110e4f0:	f800283a 	ret

8110e4f4 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110e4f4:	defffe04 	addi	sp,sp,-8
8110e4f8:	de00012e 	bgeu	sp,et,8110e500 <vFailSetCountSemaphorexBuffer32+0xc>
8110e4fc:	003b68fa 	trap	3
8110e500:	dfc00115 	stw	ra,4(sp)
8110e504:	df000015 	stw	fp,0(sp)
8110e508:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110e50c:	d0a04d17 	ldw	r2,-32460(gp)
8110e510:	100f883a 	mov	r7,r2
8110e514:	01800a04 	movi	r6,40
8110e518:	01400044 	movi	r5,1
8110e51c:	01204534 	movhi	r4,33044
8110e520:	21358a04 	addi	r4,r4,-10712
8110e524:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e528:	d0a04d17 	ldw	r2,-32460(gp)
8110e52c:	100f883a 	mov	r7,r2
8110e530:	018008c4 	movi	r6,35
8110e534:	01400044 	movi	r5,1
8110e538:	01204534 	movhi	r4,33044
8110e53c:	21359504 	addi	r4,r4,-10668
8110e540:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e544:	0001883a 	nop
8110e548:	e037883a 	mov	sp,fp
8110e54c:	dfc00117 	ldw	ra,4(sp)
8110e550:	df000017 	ldw	fp,0(sp)
8110e554:	dec00204 	addi	sp,sp,8
8110e558:	f800283a 	ret

8110e55c <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110e55c:	defffe04 	addi	sp,sp,-8
8110e560:	de00012e 	bgeu	sp,et,8110e568 <vFailSetCountSemaphorexBuffer64+0xc>
8110e564:	003b68fa 	trap	3
8110e568:	dfc00115 	stw	ra,4(sp)
8110e56c:	df000015 	stw	fp,0(sp)
8110e570:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110e574:	d0a04d17 	ldw	r2,-32460(gp)
8110e578:	100f883a 	mov	r7,r2
8110e57c:	01800a04 	movi	r6,40
8110e580:	01400044 	movi	r5,1
8110e584:	01204534 	movhi	r4,33044
8110e588:	21359e04 	addi	r4,r4,-10632
8110e58c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e590:	d0a04d17 	ldw	r2,-32460(gp)
8110e594:	100f883a 	mov	r7,r2
8110e598:	018008c4 	movi	r6,35
8110e59c:	01400044 	movi	r5,1
8110e5a0:	01204534 	movhi	r4,33044
8110e5a4:	21359504 	addi	r4,r4,-10668
8110e5a8:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5ac:	0001883a 	nop
8110e5b0:	e037883a 	mov	sp,fp
8110e5b4:	dfc00117 	ldw	ra,4(sp)
8110e5b8:	df000017 	ldw	fp,0(sp)
8110e5bc:	dec00204 	addi	sp,sp,8
8110e5c0:	f800283a 	ret

8110e5c4 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110e5c4:	defffe04 	addi	sp,sp,-8
8110e5c8:	de00012e 	bgeu	sp,et,8110e5d0 <vFailSetCountSemaphorexBuffer128+0xc>
8110e5cc:	003b68fa 	trap	3
8110e5d0:	dfc00115 	stw	ra,4(sp)
8110e5d4:	df000015 	stw	fp,0(sp)
8110e5d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110e5dc:	d0a04d17 	ldw	r2,-32460(gp)
8110e5e0:	100f883a 	mov	r7,r2
8110e5e4:	01800a44 	movi	r6,41
8110e5e8:	01400044 	movi	r5,1
8110e5ec:	01204534 	movhi	r4,33044
8110e5f0:	2135a904 	addi	r4,r4,-10588
8110e5f4:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e5f8:	d0a04d17 	ldw	r2,-32460(gp)
8110e5fc:	100f883a 	mov	r7,r2
8110e600:	018008c4 	movi	r6,35
8110e604:	01400044 	movi	r5,1
8110e608:	01204534 	movhi	r4,33044
8110e60c:	21359504 	addi	r4,r4,-10668
8110e610:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e614:	0001883a 	nop
8110e618:	e037883a 	mov	sp,fp
8110e61c:	dfc00117 	ldw	ra,4(sp)
8110e620:	df000017 	ldw	fp,0(sp)
8110e624:	dec00204 	addi	sp,sp,8
8110e628:	f800283a 	ret

8110e62c <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110e62c:	defffe04 	addi	sp,sp,-8
8110e630:	de00012e 	bgeu	sp,et,8110e638 <vFailFoundBufferRetransmission+0xc>
8110e634:	003b68fa 	trap	3
8110e638:	dfc00115 	stw	ra,4(sp)
8110e63c:	df000015 	stw	fp,0(sp)
8110e640:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)\n");
8110e644:	d0a04d17 	ldw	r2,-32460(gp)
8110e648:	100f883a 	mov	r7,r2
8110e64c:	018009c4 	movi	r6,39
8110e650:	01400044 	movi	r5,1
8110e654:	01204534 	movhi	r4,33044
8110e658:	2135b404 	addi	r4,r4,-10544
8110e65c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110e660:	d0a04d17 	ldw	r2,-32460(gp)
8110e664:	100f883a 	mov	r7,r2
8110e668:	01801284 	movi	r6,74
8110e66c:	01400044 	movi	r5,1
8110e670:	01204534 	movhi	r4,33044
8110e674:	2135be04 	addi	r4,r4,-10504
8110e678:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e67c:	0001883a 	nop
8110e680:	e037883a 	mov	sp,fp
8110e684:	dfc00117 	ldw	ra,4(sp)
8110e688:	df000017 	ldw	fp,0(sp)
8110e68c:	dec00204 	addi	sp,sp,8
8110e690:	f800283a 	ret

8110e694 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110e694:	defffe04 	addi	sp,sp,-8
8110e698:	de00012e 	bgeu	sp,et,8110e6a0 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110e69c:	003b68fa 	trap	3
8110e6a0:	dfc00115 	stw	ra,4(sp)
8110e6a4:	df000015 	stw	fp,0(sp)
8110e6a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110e6ac:	d0a04d17 	ldw	r2,-32460(gp)
8110e6b0:	100f883a 	mov	r7,r2
8110e6b4:	01800b84 	movi	r6,46
8110e6b8:	01400044 	movi	r5,1
8110e6bc:	01204534 	movhi	r4,33044
8110e6c0:	2135d104 	addi	r4,r4,-10428
8110e6c4:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110e6c8:	d0a04d17 	ldw	r2,-32460(gp)
8110e6cc:	100f883a 	mov	r7,r2
8110e6d0:	018010c4 	movi	r6,67
8110e6d4:	01400044 	movi	r5,1
8110e6d8:	01204534 	movhi	r4,33044
8110e6dc:	2135dd04 	addi	r4,r4,-10380
8110e6e0:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6e4:	0001883a 	nop
8110e6e8:	e037883a 	mov	sp,fp
8110e6ec:	dfc00117 	ldw	ra,4(sp)
8110e6f0:	df000017 	ldw	fp,0(sp)
8110e6f4:	dec00204 	addi	sp,sp,8
8110e6f8:	f800283a 	ret

8110e6fc <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110e6fc:	defffe04 	addi	sp,sp,-8
8110e700:	de00012e 	bgeu	sp,et,8110e708 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110e704:	003b68fa 	trap	3
8110e708:	dfc00115 	stw	ra,4(sp)
8110e70c:	df000015 	stw	fp,0(sp)
8110e710:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110e714:	d0a04d17 	ldw	r2,-32460(gp)
8110e718:	100f883a 	mov	r7,r2
8110e71c:	01800b04 	movi	r6,44
8110e720:	01400044 	movi	r5,1
8110e724:	01204534 	movhi	r4,33044
8110e728:	2135ee04 	addi	r4,r4,-10312
8110e72c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110e730:	d0a04d17 	ldw	r2,-32460(gp)
8110e734:	100f883a 	mov	r7,r2
8110e738:	01800fc4 	movi	r6,63
8110e73c:	01400044 	movi	r5,1
8110e740:	01204534 	movhi	r4,33044
8110e744:	2135fa04 	addi	r4,r4,-10264
8110e748:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e74c:	0001883a 	nop
8110e750:	e037883a 	mov	sp,fp
8110e754:	dfc00117 	ldw	ra,4(sp)
8110e758:	df000017 	ldw	fp,0(sp)
8110e75c:	dec00204 	addi	sp,sp,8
8110e760:	f800283a 	ret

8110e764 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110e764:	defffe04 	addi	sp,sp,-8
8110e768:	de00012e 	bgeu	sp,et,8110e770 <vNoContentInPreParsedBuffer+0xc>
8110e76c:	003b68fa 	trap	3
8110e770:	dfc00115 	stw	ra,4(sp)
8110e774:	df000015 	stw	fp,0(sp)
8110e778:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110e77c:	d0a04d17 	ldw	r2,-32460(gp)
8110e780:	100f883a 	mov	r7,r2
8110e784:	01800904 	movi	r6,36
8110e788:	01400044 	movi	r5,1
8110e78c:	01204534 	movhi	r4,33044
8110e790:	21360a04 	addi	r4,r4,-10200
8110e794:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110e798:	d0a04d17 	ldw	r2,-32460(gp)
8110e79c:	100f883a 	mov	r7,r2
8110e7a0:	01801684 	movi	r6,90
8110e7a4:	01400044 	movi	r5,1
8110e7a8:	01204534 	movhi	r4,33044
8110e7ac:	21361404 	addi	r4,r4,-10160
8110e7b0:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e7b4:	0001883a 	nop
8110e7b8:	e037883a 	mov	sp,fp
8110e7bc:	dfc00117 	ldw	ra,4(sp)
8110e7c0:	df000017 	ldw	fp,0(sp)
8110e7c4:	dec00204 	addi	sp,sp,8
8110e7c8:	f800283a 	ret

8110e7cc <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110e7cc:	defffe04 	addi	sp,sp,-8
8110e7d0:	de00012e 	bgeu	sp,et,8110e7d8 <vCouldNotSendEthConfUART+0xc>
8110e7d4:	003b68fa 	trap	3
8110e7d8:	dfc00115 	stw	ra,4(sp)
8110e7dc:	df000015 	stw	fp,0(sp)
8110e7e0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110e7e4:	d0a04d17 	ldw	r2,-32460(gp)
8110e7e8:	100f883a 	mov	r7,r2
8110e7ec:	01800844 	movi	r6,33
8110e7f0:	01400044 	movi	r5,1
8110e7f4:	01204534 	movhi	r4,33044
8110e7f8:	21362b04 	addi	r4,r4,-10068
8110e7fc:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110e800:	d0a04d17 	ldw	r2,-32460(gp)
8110e804:	100f883a 	mov	r7,r2
8110e808:	01801784 	movi	r6,94
8110e80c:	01400044 	movi	r5,1
8110e810:	01204534 	movhi	r4,33044
8110e814:	21363404 	addi	r4,r4,-10032
8110e818:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e81c:	0001883a 	nop
8110e820:	e037883a 	mov	sp,fp
8110e824:	dfc00117 	ldw	ra,4(sp)
8110e828:	df000017 	ldw	fp,0(sp)
8110e82c:	dec00204 	addi	sp,sp,8
8110e830:	f800283a 	ret

8110e834 <vFailSendNack>:

void vFailSendNack( void )
{
8110e834:	defffe04 	addi	sp,sp,-8
8110e838:	de00012e 	bgeu	sp,et,8110e840 <vFailSendNack+0xc>
8110e83c:	003b68fa 	trap	3
8110e840:	dfc00115 	stw	ra,4(sp)
8110e844:	df000015 	stw	fp,0(sp)
8110e848:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110e84c:	d0a04d17 	ldw	r2,-32460(gp)
8110e850:	100f883a 	mov	r7,r2
8110e854:	01800584 	movi	r6,22
8110e858:	01400044 	movi	r5,1
8110e85c:	01204534 	movhi	r4,33044
8110e860:	21364c04 	addi	r4,r4,-9936
8110e864:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110e868:	d0a04d17 	ldw	r2,-32460(gp)
8110e86c:	100f883a 	mov	r7,r2
8110e870:	01800a84 	movi	r6,42
8110e874:	01400044 	movi	r5,1
8110e878:	01204534 	movhi	r4,33044
8110e87c:	21365204 	addi	r4,r4,-9912
8110e880:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e884:	0001883a 	nop
8110e888:	e037883a 	mov	sp,fp
8110e88c:	dfc00117 	ldw	ra,4(sp)
8110e890:	df000017 	ldw	fp,0(sp)
8110e894:	dec00204 	addi	sp,sp,8
8110e898:	f800283a 	ret

8110e89c <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110e89c:	defffe04 	addi	sp,sp,-8
8110e8a0:	de00012e 	bgeu	sp,et,8110e8a8 <vFailSetPreAckSenderBuffer+0xc>
8110e8a4:	003b68fa 	trap	3
8110e8a8:	dfc00115 	stw	ra,4(sp)
8110e8ac:	df000015 	stw	fp,0(sp)
8110e8b0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110e8b4:	d0a04d17 	ldw	r2,-32460(gp)
8110e8b8:	100f883a 	mov	r7,r2
8110e8bc:	018008c4 	movi	r6,35
8110e8c0:	01400044 	movi	r5,1
8110e8c4:	01204534 	movhi	r4,33044
8110e8c8:	21365d04 	addi	r4,r4,-9868
8110e8cc:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110e8d0:	d0a04d17 	ldw	r2,-32460(gp)
8110e8d4:	100f883a 	mov	r7,r2
8110e8d8:	01801584 	movi	r6,86
8110e8dc:	01400044 	movi	r5,1
8110e8e0:	01204534 	movhi	r4,33044
8110e8e4:	21366604 	addi	r4,r4,-9832
8110e8e8:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e8ec:	0001883a 	nop
8110e8f0:	e037883a 	mov	sp,fp
8110e8f4:	dfc00117 	ldw	ra,4(sp)
8110e8f8:	df000017 	ldw	fp,0(sp)
8110e8fc:	dec00204 	addi	sp,sp,8
8110e900:	f800283a 	ret

8110e904 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110e904:	defffe04 	addi	sp,sp,-8
8110e908:	de00012e 	bgeu	sp,et,8110e910 <vFailSetPreParsedBuffer+0xc>
8110e90c:	003b68fa 	trap	3
8110e910:	dfc00115 	stw	ra,4(sp)
8110e914:	df000015 	stw	fp,0(sp)
8110e918:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
8110e91c:	d0a04d17 	ldw	r2,-32460(gp)
8110e920:	100f883a 	mov	r7,r2
8110e924:	01800804 	movi	r6,32
8110e928:	01400044 	movi	r5,1
8110e92c:	01204534 	movhi	r4,33044
8110e930:	21367c04 	addi	r4,r4,-9744
8110e934:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110e938:	d0a04d17 	ldw	r2,-32460(gp)
8110e93c:	100f883a 	mov	r7,r2
8110e940:	018013c4 	movi	r6,79
8110e944:	01400044 	movi	r5,1
8110e948:	01204534 	movhi	r4,33044
8110e94c:	21368504 	addi	r4,r4,-9708
8110e950:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e954:	0001883a 	nop
8110e958:	e037883a 	mov	sp,fp
8110e95c:	dfc00117 	ldw	ra,4(sp)
8110e960:	df000017 	ldw	fp,0(sp)
8110e964:	dec00204 	addi	sp,sp,8
8110e968:	f800283a 	ret

8110e96c <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110e96c:	defffe04 	addi	sp,sp,-8
8110e970:	de00012e 	bgeu	sp,et,8110e978 <vFailSetPreAckReceiverBuffer+0xc>
8110e974:	003b68fa 	trap	3
8110e978:	dfc00115 	stw	ra,4(sp)
8110e97c:	df000015 	stw	fp,0(sp)
8110e980:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
8110e984:	d0a04d17 	ldw	r2,-32460(gp)
8110e988:	100f883a 	mov	r7,r2
8110e98c:	01800944 	movi	r6,37
8110e990:	01400044 	movi	r5,1
8110e994:	01204534 	movhi	r4,33044
8110e998:	21369904 	addi	r4,r4,-9628
8110e99c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110e9a0:	d0a04d17 	ldw	r2,-32460(gp)
8110e9a4:	100f883a 	mov	r7,r2
8110e9a8:	018015c4 	movi	r6,87
8110e9ac:	01400044 	movi	r5,1
8110e9b0:	01204534 	movhi	r4,33044
8110e9b4:	2136a304 	addi	r4,r4,-9588
8110e9b8:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e9bc:	0001883a 	nop
8110e9c0:	e037883a 	mov	sp,fp
8110e9c4:	dfc00117 	ldw	ra,4(sp)
8110e9c8:	df000017 	ldw	fp,0(sp)
8110e9cc:	dec00204 	addi	sp,sp,8
8110e9d0:	f800283a 	ret

8110e9d4 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110e9d4:	defffe04 	addi	sp,sp,-8
8110e9d8:	de00012e 	bgeu	sp,et,8110e9e0 <vFailParserCommTaskCreate+0xc>
8110e9dc:	003b68fa 	trap	3
8110e9e0:	dfc00115 	stw	ra,4(sp)
8110e9e4:	df000015 	stw	fp,0(sp)
8110e9e8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
8110e9ec:	d0a04d17 	ldw	r2,-32460(gp)
8110e9f0:	100f883a 	mov	r7,r2
8110e9f4:	01800684 	movi	r6,26
8110e9f8:	01400044 	movi	r5,1
8110e9fc:	01204534 	movhi	r4,33044
8110ea00:	2136b904 	addi	r4,r4,-9500
8110ea04:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ea08:	0001883a 	nop
8110ea0c:	e037883a 	mov	sp,fp
8110ea10:	dfc00117 	ldw	ra,4(sp)
8110ea14:	df000017 	ldw	fp,0(sp)
8110ea18:	dec00204 	addi	sp,sp,8
8110ea1c:	f800283a 	ret

8110ea20 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110ea20:	defffe04 	addi	sp,sp,-8
8110ea24:	de00012e 	bgeu	sp,et,8110ea2c <vFailInAckHandlerTaskCreate+0xc>
8110ea28:	003b68fa 	trap	3
8110ea2c:	dfc00115 	stw	ra,4(sp)
8110ea30:	df000015 	stw	fp,0(sp)
8110ea34:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ea38:	d0a04d17 	ldw	r2,-32460(gp)
8110ea3c:	100f883a 	mov	r7,r2
8110ea40:	01800704 	movi	r6,28
8110ea44:	01400044 	movi	r5,1
8110ea48:	01204534 	movhi	r4,33044
8110ea4c:	2136c004 	addi	r4,r4,-9472
8110ea50:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ea54:	0001883a 	nop
8110ea58:	e037883a 	mov	sp,fp
8110ea5c:	dfc00117 	ldw	ra,4(sp)
8110ea60:	df000017 	ldw	fp,0(sp)
8110ea64:	dec00204 	addi	sp,sp,8
8110ea68:	f800283a 	ret

8110ea6c <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110ea6c:	defffe04 	addi	sp,sp,-8
8110ea70:	de00012e 	bgeu	sp,et,8110ea78 <vFailOutAckHandlerTaskCreate+0xc>
8110ea74:	003b68fa 	trap	3
8110ea78:	dfc00115 	stw	ra,4(sp)
8110ea7c:	df000015 	stw	fp,0(sp)
8110ea80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ea84:	d0a04d17 	ldw	r2,-32460(gp)
8110ea88:	100f883a 	mov	r7,r2
8110ea8c:	01800704 	movi	r6,28
8110ea90:	01400044 	movi	r5,1
8110ea94:	01204534 	movhi	r4,33044
8110ea98:	2136c004 	addi	r4,r4,-9472
8110ea9c:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eaa0:	0001883a 	nop
8110eaa4:	e037883a 	mov	sp,fp
8110eaa8:	dfc00117 	ldw	ra,4(sp)
8110eaac:	df000017 	ldw	fp,0(sp)
8110eab0:	dec00204 	addi	sp,sp,8
8110eab4:	f800283a 	ret

8110eab8 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110eab8:	defffe04 	addi	sp,sp,-8
8110eabc:	de00012e 	bgeu	sp,et,8110eac4 <vFailCreateTimerRetransmisison+0xc>
8110eac0:	003b68fa 	trap	3
8110eac4:	dfc00115 	stw	ra,4(sp)
8110eac8:	df000015 	stw	fp,0(sp)
8110eacc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
8110ead0:	d0a04d17 	ldw	r2,-32460(gp)
8110ead4:	100f883a 	mov	r7,r2
8110ead8:	018007c4 	movi	r6,31
8110eadc:	01400044 	movi	r5,1
8110eae0:	01204534 	movhi	r4,33044
8110eae4:	2136c804 	addi	r4,r4,-9440
8110eae8:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eaec:	0001883a 	nop
8110eaf0:	e037883a 	mov	sp,fp
8110eaf4:	dfc00117 	ldw	ra,4(sp)
8110eaf8:	df000017 	ldw	fp,0(sp)
8110eafc:	dec00204 	addi	sp,sp,8
8110eb00:	f800283a 	ret

8110eb04 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110eb04:	defffe04 	addi	sp,sp,-8
8110eb08:	de00012e 	bgeu	sp,et,8110eb10 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110eb0c:	003b68fa 	trap	3
8110eb10:	dfc00115 	stw	ra,4(sp)
8110eb14:	df000015 	stw	fp,0(sp)
8110eb18:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
8110eb1c:	d0a04d17 	ldw	r2,-32460(gp)
8110eb20:	100f883a 	mov	r7,r2
8110eb24:	01800904 	movi	r6,36
8110eb28:	01400044 	movi	r5,1
8110eb2c:	01204534 	movhi	r4,33044
8110eb30:	2136d004 	addi	r4,r4,-9408
8110eb34:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eb38:	0001883a 	nop
8110eb3c:	e037883a 	mov	sp,fp
8110eb40:	dfc00117 	ldw	ra,4(sp)
8110eb44:	df000017 	ldw	fp,0(sp)
8110eb48:	dec00204 	addi	sp,sp,8
8110eb4c:	f800283a 	ret

8110eb50 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110eb50:	defffe04 	addi	sp,sp,-8
8110eb54:	de00012e 	bgeu	sp,et,8110eb5c <vFailTimeoutCheckerTaskCreate+0xc>
8110eb58:	003b68fa 	trap	3
8110eb5c:	dfc00115 	stw	ra,4(sp)
8110eb60:	df000015 	stw	fp,0(sp)
8110eb64:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate\n");
8110eb68:	d0a04d17 	ldw	r2,-32460(gp)
8110eb6c:	100f883a 	mov	r7,r2
8110eb70:	01800784 	movi	r6,30
8110eb74:	01400044 	movi	r5,1
8110eb78:	01204534 	movhi	r4,33044
8110eb7c:	2136da04 	addi	r4,r4,-9368
8110eb80:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eb84:	0001883a 	nop
8110eb88:	e037883a 	mov	sp,fp
8110eb8c:	dfc00117 	ldw	ra,4(sp)
8110eb90:	df000017 	ldw	fp,0(sp)
8110eb94:	dec00204 	addi	sp,sp,8
8110eb98:	f800283a 	ret

8110eb9c <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110eb9c:	defffe04 	addi	sp,sp,-8
8110eba0:	de00012e 	bgeu	sp,et,8110eba8 <vFailGetBlockingSemTimeoutTask+0xc>
8110eba4:	003b68fa 	trap	3
8110eba8:	dfc00115 	stw	ra,4(sp)
8110ebac:	df000015 	stw	fp,0(sp)
8110ebb0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
8110ebb4:	d0a04d17 	ldw	r2,-32460(gp)
8110ebb8:	100f883a 	mov	r7,r2
8110ebbc:	018009c4 	movi	r6,39
8110ebc0:	01400044 	movi	r5,1
8110ebc4:	01204534 	movhi	r4,33044
8110ebc8:	2136e204 	addi	r4,r4,-9336
8110ebcc:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
8110ebd0:	d0a04d17 	ldw	r2,-32460(gp)
8110ebd4:	100f883a 	mov	r7,r2
8110ebd8:	01800cc4 	movi	r6,51
8110ebdc:	01400044 	movi	r5,1
8110ebe0:	01204534 	movhi	r4,33044
8110ebe4:	2136ec04 	addi	r4,r4,-9296
8110ebe8:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ebec:	0001883a 	nop
8110ebf0:	e037883a 	mov	sp,fp
8110ebf4:	dfc00117 	ldw	ra,4(sp)
8110ebf8:	df000017 	ldw	fp,0(sp)
8110ebfc:	dec00204 	addi	sp,sp,8
8110ec00:	f800283a 	ret

8110ec04 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110ec04:	defffe04 	addi	sp,sp,-8
8110ec08:	de00012e 	bgeu	sp,et,8110ec10 <vFailPostBlockingSemTimeoutTask+0xc>
8110ec0c:	003b68fa 	trap	3
8110ec10:	dfc00115 	stw	ra,4(sp)
8110ec14:	df000015 	stw	fp,0(sp)
8110ec18:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
8110ec1c:	d0a04d17 	ldw	r2,-32460(gp)
8110ec20:	100f883a 	mov	r7,r2
8110ec24:	01800a04 	movi	r6,40
8110ec28:	01400044 	movi	r5,1
8110ec2c:	01204534 	movhi	r4,33044
8110ec30:	2136f904 	addi	r4,r4,-9244
8110ec34:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8110ec38:	d0a04d17 	ldw	r2,-32460(gp)
8110ec3c:	100f883a 	mov	r7,r2
8110ec40:	01800c84 	movi	r6,50
8110ec44:	01400044 	movi	r5,1
8110ec48:	01204534 	movhi	r4,33044
8110ec4c:	21370404 	addi	r4,r4,-9200
8110ec50:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ec54:	0001883a 	nop
8110ec58:	e037883a 	mov	sp,fp
8110ec5c:	dfc00117 	ldw	ra,4(sp)
8110ec60:	df000017 	ldw	fp,0(sp)
8110ec64:	dec00204 	addi	sp,sp,8
8110ec68:	f800283a 	ret

8110ec6c <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110ec6c:	defffe04 	addi	sp,sp,-8
8110ec70:	de00012e 	bgeu	sp,et,8110ec78 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110ec74:	003b68fa 	trap	3
8110ec78:	dfc00115 	stw	ra,4(sp)
8110ec7c:	df000015 	stw	fp,0(sp)
8110ec80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
8110ec84:	d0a04d17 	ldw	r2,-32460(gp)
8110ec88:	100f883a 	mov	r7,r2
8110ec8c:	01800ac4 	movi	r6,43
8110ec90:	01400044 	movi	r5,1
8110ec94:	01204534 	movhi	r4,33044
8110ec98:	21371104 	addi	r4,r4,-9148
8110ec9c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
8110eca0:	d0a04d17 	ldw	r2,-32460(gp)
8110eca4:	100f883a 	mov	r7,r2
8110eca8:	01801644 	movi	r6,89
8110ecac:	01400044 	movi	r5,1
8110ecb0:	01204534 	movhi	r4,33044
8110ecb4:	21371c04 	addi	r4,r4,-9104
8110ecb8:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ecbc:	0001883a 	nop
8110ecc0:	e037883a 	mov	sp,fp
8110ecc4:	dfc00117 	ldw	ra,4(sp)
8110ecc8:	df000017 	ldw	fp,0(sp)
8110eccc:	dec00204 	addi	sp,sp,8
8110ecd0:	f800283a 	ret

8110ecd4 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110ecd4:	defffe04 	addi	sp,sp,-8
8110ecd8:	de00012e 	bgeu	sp,et,8110ece0 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110ecdc:	003b68fa 	trap	3
8110ece0:	dfc00115 	stw	ra,4(sp)
8110ece4:	df000015 	stw	fp,0(sp)
8110ece8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
8110ecec:	d0a04d17 	ldw	r2,-32460(gp)
8110ecf0:	100f883a 	mov	r7,r2
8110ecf4:	01800a84 	movi	r6,42
8110ecf8:	01400044 	movi	r5,1
8110ecfc:	01204534 	movhi	r4,33044
8110ed00:	21373304 	addi	r4,r4,-9012
8110ed04:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8110ed08:	d0a04d17 	ldw	r2,-32460(gp)
8110ed0c:	100f883a 	mov	r7,r2
8110ed10:	01801444 	movi	r6,81
8110ed14:	01400044 	movi	r5,1
8110ed18:	01204534 	movhi	r4,33044
8110ed1c:	21373e04 	addi	r4,r4,-8968
8110ed20:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ed24:	0001883a 	nop
8110ed28:	e037883a 	mov	sp,fp
8110ed2c:	dfc00117 	ldw	ra,4(sp)
8110ed30:	df000017 	ldw	fp,0(sp)
8110ed34:	dec00204 	addi	sp,sp,8
8110ed38:	f800283a 	ret

8110ed3c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110ed3c:	defffe04 	addi	sp,sp,-8
8110ed40:	de00012e 	bgeu	sp,et,8110ed48 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110ed44:	003b68fa 	trap	3
8110ed48:	dfc00115 	stw	ra,4(sp)
8110ed4c:	df000015 	stw	fp,0(sp)
8110ed50:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
8110ed54:	d0a04d17 	ldw	r2,-32460(gp)
8110ed58:	100f883a 	mov	r7,r2
8110ed5c:	01800a84 	movi	r6,42
8110ed60:	01400044 	movi	r5,1
8110ed64:	01204534 	movhi	r4,33044
8110ed68:	21375304 	addi	r4,r4,-8884
8110ed6c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
8110ed70:	d0a04d17 	ldw	r2,-32460(gp)
8110ed74:	100f883a 	mov	r7,r2
8110ed78:	01801444 	movi	r6,81
8110ed7c:	01400044 	movi	r5,1
8110ed80:	01204534 	movhi	r4,33044
8110ed84:	21375e04 	addi	r4,r4,-8840
8110ed88:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ed8c:	0001883a 	nop
8110ed90:	e037883a 	mov	sp,fp
8110ed94:	dfc00117 	ldw	ra,4(sp)
8110ed98:	df000017 	ldw	fp,0(sp)
8110ed9c:	dec00204 	addi	sp,sp,8
8110eda0:	f800283a 	ret

8110eda4 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110eda4:	defffe04 	addi	sp,sp,-8
8110eda8:	de00012e 	bgeu	sp,et,8110edb0 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110edac:	003b68fa 	trap	3
8110edb0:	dfc00115 	stw	ra,4(sp)
8110edb4:	df000015 	stw	fp,0(sp)
8110edb8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
8110edbc:	d0a04d17 	ldw	r2,-32460(gp)
8110edc0:	100f883a 	mov	r7,r2
8110edc4:	01800ac4 	movi	r6,43
8110edc8:	01400044 	movi	r5,1
8110edcc:	01204534 	movhi	r4,33044
8110edd0:	21377304 	addi	r4,r4,-8756
8110edd4:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8110edd8:	d0a04d17 	ldw	r2,-32460(gp)
8110eddc:	100f883a 	mov	r7,r2
8110ede0:	01801484 	movi	r6,82
8110ede4:	01400044 	movi	r5,1
8110ede8:	01204534 	movhi	r4,33044
8110edec:	21377e04 	addi	r4,r4,-8712
8110edf0:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110edf4:	0001883a 	nop
8110edf8:	e037883a 	mov	sp,fp
8110edfc:	dfc00117 	ldw	ra,4(sp)
8110ee00:	df000017 	ldw	fp,0(sp)
8110ee04:	dec00204 	addi	sp,sp,8
8110ee08:	f800283a 	ret

8110ee0c <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110ee0c:	defffe04 	addi	sp,sp,-8
8110ee10:	de00012e 	bgeu	sp,et,8110ee18 <vFailStartTimerRetransmission+0xc>
8110ee14:	003b68fa 	trap	3
8110ee18:	dfc00115 	stw	ra,4(sp)
8110ee1c:	df000015 	stw	fp,0(sp)
8110ee20:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
8110ee24:	d0a04d17 	ldw	r2,-32460(gp)
8110ee28:	100f883a 	mov	r7,r2
8110ee2c:	01800984 	movi	r6,38
8110ee30:	01400044 	movi	r5,1
8110ee34:	01204534 	movhi	r4,33044
8110ee38:	21379304 	addi	r4,r4,-8628
8110ee3c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
8110ee40:	d0a04d17 	ldw	r2,-32460(gp)
8110ee44:	100f883a 	mov	r7,r2
8110ee48:	01800d44 	movi	r6,53
8110ee4c:	01400044 	movi	r5,1
8110ee50:	01204534 	movhi	r4,33044
8110ee54:	21379d04 	addi	r4,r4,-8588
8110ee58:	1111f680 	call	81111f68 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ee5c:	0001883a 	nop
8110ee60:	e037883a 	mov	sp,fp
8110ee64:	dfc00117 	ldw	ra,4(sp)
8110ee68:	df000017 	ldw	fp,0(sp)
8110ee6c:	dec00204 	addi	sp,sp,8
8110ee70:	f800283a 	ret

8110ee74 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
8110ee74:	defffe04 	addi	sp,sp,-8
8110ee78:	de00012e 	bgeu	sp,et,8110ee80 <vCouldNotSendTurnOff+0xc>
8110ee7c:	003b68fa 	trap	3
8110ee80:	dfc00115 	stw	ra,4(sp)
8110ee84:	df000015 	stw	fp,0(sp)
8110ee88:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
8110ee8c:	d0a04d17 	ldw	r2,-32460(gp)
8110ee90:	100f883a 	mov	r7,r2
8110ee94:	01800744 	movi	r6,29
8110ee98:	01400044 	movi	r5,1
8110ee9c:	01204534 	movhi	r4,33044
8110eea0:	2137ab04 	addi	r4,r4,-8532
8110eea4:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
8110eea8:	d0a04d17 	ldw	r2,-32460(gp)
8110eeac:	100f883a 	mov	r7,r2
8110eeb0:	01800984 	movi	r6,38
8110eeb4:	01400044 	movi	r5,1
8110eeb8:	01204534 	movhi	r4,33044
8110eebc:	2137b304 	addi	r4,r4,-8500
8110eec0:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eec4:	0001883a 	nop
8110eec8:	e037883a 	mov	sp,fp
8110eecc:	dfc00117 	ldw	ra,4(sp)
8110eed0:	df000017 	ldw	fp,0(sp)
8110eed4:	dec00204 	addi	sp,sp,8
8110eed8:	f800283a 	ret

8110eedc <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
8110eedc:	defffe04 	addi	sp,sp,-8
8110eee0:	de00012e 	bgeu	sp,et,8110eee8 <vCouldNotSendLog+0xc>
8110eee4:	003b68fa 	trap	3
8110eee8:	dfc00115 	stw	ra,4(sp)
8110eeec:	df000015 	stw	fp,0(sp)
8110eef0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
8110eef4:	d0a04d17 	ldw	r2,-32460(gp)
8110eef8:	100f883a 	mov	r7,r2
8110eefc:	01800644 	movi	r6,25
8110ef00:	01400044 	movi	r5,1
8110ef04:	01204534 	movhi	r4,33044
8110ef08:	2137bd04 	addi	r4,r4,-8460
8110ef0c:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
8110ef10:	d0a04d17 	ldw	r2,-32460(gp)
8110ef14:	100f883a 	mov	r7,r2
8110ef18:	018008c4 	movi	r6,35
8110ef1c:	01400044 	movi	r5,1
8110ef20:	01204534 	movhi	r4,33044
8110ef24:	2137c404 	addi	r4,r4,-8432
8110ef28:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ef2c:	0001883a 	nop
8110ef30:	e037883a 	mov	sp,fp
8110ef34:	dfc00117 	ldw	ra,4(sp)
8110ef38:	df000017 	ldw	fp,0(sp)
8110ef3c:	dec00204 	addi	sp,sp,8
8110ef40:	f800283a 	ret

8110ef44 <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
8110ef44:	defffd04 	addi	sp,sp,-12
8110ef48:	de00012e 	bgeu	sp,et,8110ef50 <vCouldNotSendTMPusCommand+0xc>
8110ef4c:	003b68fa 	trap	3
8110ef50:	dfc00215 	stw	ra,8(sp)
8110ef54:	df000115 	stw	fp,4(sp)
8110ef58:	df000104 	addi	fp,sp,4
8110ef5c:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
8110ef60:	d0a04d17 	ldw	r2,-32460(gp)
8110ef64:	100f883a 	mov	r7,r2
8110ef68:	01800884 	movi	r6,34
8110ef6c:	01400044 	movi	r5,1
8110ef70:	01204534 	movhi	r4,33044
8110ef74:	2137cd04 	addi	r4,r4,-8396
8110ef78:	1111f680 	call	81111f68 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
8110ef7c:	d0a04d17 	ldw	r2,-32460(gp)
8110ef80:	100f883a 	mov	r7,r2
8110ef84:	01800ac4 	movi	r6,43
8110ef88:	01400044 	movi	r5,1
8110ef8c:	01204534 	movhi	r4,33044
8110ef90:	2137d604 	addi	r4,r4,-8360
8110ef94:	1111f680 	call	81111f68 <fwrite>
		debug(fp,"cData");
8110ef98:	d0a04d17 	ldw	r2,-32460(gp)
8110ef9c:	100f883a 	mov	r7,r2
8110efa0:	01800144 	movi	r6,5
8110efa4:	01400044 	movi	r5,1
8110efa8:	01204534 	movhi	r4,33044
8110efac:	2137e104 	addi	r4,r4,-8316
8110efb0:	1111f680 	call	81111f68 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110efb4:	0001883a 	nop
8110efb8:	e037883a 	mov	sp,fp
8110efbc:	dfc00117 	ldw	ra,4(sp)
8110efc0:	df000017 	ldw	fp,0(sp)
8110efc4:	dec00204 	addi	sp,sp,8
8110efc8:	f800283a 	ret

8110efcc <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110efcc:	defffd04 	addi	sp,sp,-12
8110efd0:	de00012e 	bgeu	sp,et,8110efd8 <vNFeeNotInUse+0xc>
8110efd4:	003b68fa 	trap	3
8110efd8:	df000215 	stw	fp,8(sp)
8110efdc:	df000204 	addi	fp,sp,8
8110efe0:	e13ffe15 	stw	r4,-8(fp)
8110efe4:	2805883a 	mov	r2,r5
8110efe8:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110efec:	e0bffe17 	ldw	r2,-8(fp)
8110eff0:	e0ffff03 	ldbu	r3,-4(fp)
8110eff4:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110eff8:	e0bffe17 	ldw	r2,-8(fp)
8110effc:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f000:	e0bffe17 	ldw	r2,-8(fp)
8110f004:	10002115 	stw	zero,132(r2)
}
8110f008:	0001883a 	nop
8110f00c:	e037883a 	mov	sp,fp
8110f010:	df000017 	ldw	fp,0(sp)
8110f014:	dec00104 	addi	sp,sp,4
8110f018:	f800283a 	ret

8110f01c <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f01c:	defffb04 	addi	sp,sp,-20
8110f020:	de00012e 	bgeu	sp,et,8110f028 <vNFeeStructureInit+0xc>
8110f024:	003b68fa 	trap	3
8110f028:	dfc00415 	stw	ra,16(sp)
8110f02c:	df000315 	stw	fp,12(sp)
8110f030:	df000304 	addi	fp,sp,12
8110f034:	e13ffe15 	stw	r4,-8(fp)
8110f038:	2805883a 	mov	r2,r5
8110f03c:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110f040:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110f044:	e0bffe17 	ldw	r2,-8(fp)
8110f048:	e0ffff03 	ldbu	r3,-4(fp)
8110f04c:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110f050:	e0bffe17 	ldw	r2,-8(fp)
8110f054:	10802804 	addi	r2,r2,160
8110f058:	1009883a 	mov	r4,r2
8110f05c:	110b8380 	call	8110b838 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110f060:	e13ffe17 	ldw	r4,-8(fp)
8110f064:	110f0f40 	call	8110f0f4 <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110f068:	e0bffe17 	ldw	r2,-8(fp)
8110f06c:	00c00044 	movi	r3,1
8110f070:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f074:	e0bffe17 	ldw	r2,-8(fp)
8110f078:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110f07c:	e0bffe17 	ldw	r2,-8(fp)
8110f080:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f084:	e03ffd05 	stb	zero,-12(fp)
8110f088:	00000906 	br	8110f0b0 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110f08c:	e0bffd03 	ldbu	r2,-12(fp)
8110f090:	e0fffe17 	ldw	r3,-8(fp)
8110f094:	1885883a 	add	r2,r3,r2
8110f098:	10802504 	addi	r2,r2,148
8110f09c:	e0fffd03 	ldbu	r3,-12(fp)
8110f0a0:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f0a4:	e0bffd03 	ldbu	r2,-12(fp)
8110f0a8:	10800044 	addi	r2,r2,1
8110f0ac:	e0bffd05 	stb	r2,-12(fp)
8110f0b0:	e0bffd03 	ldbu	r2,-12(fp)
8110f0b4:	10800130 	cmpltui	r2,r2,4
8110f0b8:	103ff41e 	bne	r2,zero,8110f08c <__reset+0xfb0ef08c>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110f0bc:	e0bffe17 	ldw	r2,-8(fp)
8110f0c0:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f0c4:	e0bffe17 	ldw	r2,-8(fp)
8110f0c8:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110f0cc:	e0bffe17 	ldw	r2,-8(fp)
8110f0d0:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110f0d4:	e0bffe17 	ldw	r2,-8(fp)
8110f0d8:	10002415 	stw	zero,144(r2)

}
8110f0dc:	0001883a 	nop
8110f0e0:	e037883a 	mov	sp,fp
8110f0e4:	dfc00117 	ldw	ra,4(sp)
8110f0e8:	df000017 	ldw	fp,0(sp)
8110f0ec:	dec00204 	addi	sp,sp,8
8110f0f0:	f800283a 	ret

8110f0f4 <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110f0f4:	defff404 	addi	sp,sp,-48
8110f0f8:	de00012e 	bgeu	sp,et,8110f100 <vUpdateMemMapFEE+0xc>
8110f0fc:	003b68fa 	trap	3
8110f100:	df000b15 	stw	fp,44(sp)
8110f104:	df000b04 	addi	fp,sp,44
8110f108:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110f10c:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110f110:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110f114:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110f118:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110f11c:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110f120:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110f124:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110f128:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110f12c:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110f130:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110f134:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110f138:	e17fff17 	ldw	r5,-4(fp)
8110f13c:	01035a34 	movhi	r4,3432
8110f140:	21348c04 	addi	r4,r4,-11728
8110f144:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110f148:	e13fff17 	ldw	r4,-4(fp)
8110f14c:	21000003 	ldbu	r4,0(r4)
8110f150:	21403fcc 	andi	r5,r4,255
8110f154:	01035a34 	movhi	r4,3432
8110f158:	21348c04 	addi	r4,r4,-11728
8110f15c:	2909383a 	mul	r4,r5,r4
8110f160:	200b883a 	mov	r5,r4
8110f164:	e13fff17 	ldw	r4,-4(fp)
8110f168:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110f16c:	e13fff17 	ldw	r4,-4(fp)
8110f170:	21400117 	ldw	r5,4(r4)
8110f174:	01033234 	movhi	r4,3272
8110f178:	21348c04 	addi	r4,r4,-11728
8110f17c:	290b883a 	add	r5,r5,r4
8110f180:	e13fff17 	ldw	r4,-4(fp)
8110f184:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f188:	e13fff17 	ldw	r4,-4(fp)
8110f18c:	21002a0b 	ldhu	r4,168(r4)
8110f190:	217fffcc 	andi	r5,r4,65535
8110f194:	e13fff17 	ldw	r4,-4(fp)
8110f198:	2100290b 	ldhu	r4,164(r4)
8110f19c:	213fffcc 	andi	r4,r4,65535
8110f1a0:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110f1a4:	e13fff17 	ldw	r4,-4(fp)
8110f1a8:	2100298b 	ldhu	r4,166(r4)
8110f1ac:	21bfffcc 	andi	r6,r4,65535
8110f1b0:	e13fff17 	ldw	r4,-4(fp)
8110f1b4:	2100288b 	ldhu	r4,162(r4)
8110f1b8:	213fffcc 	andi	r4,r4,65535
8110f1bc:	310d883a 	add	r6,r6,r4
8110f1c0:	e13fff17 	ldw	r4,-4(fp)
8110f1c4:	2100280b 	ldhu	r4,160(r4)
8110f1c8:	213fffcc 	andi	r4,r4,65535
8110f1cc:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f1d0:	2909383a 	mul	r4,r5,r4
8110f1d4:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110f1d8:	e13ff917 	ldw	r4,-28(fp)
8110f1dc:	2109883a 	add	r4,r4,r4
8110f1e0:	200b883a 	mov	r5,r4
8110f1e4:	e13fff17 	ldw	r4,-4(fp)
8110f1e8:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110f1ec:	e13fff17 	ldw	r4,-4(fp)
8110f1f0:	2100048b 	ldhu	r4,18(r4)
8110f1f4:	213fffcc 	andi	r4,r4,65535
8110f1f8:	2008d0fa 	srli	r4,r4,3
8110f1fc:	213fffcc 	andi	r4,r4,65535
8110f200:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110f204:	e13fff17 	ldw	r4,-4(fp)
8110f208:	2100048b 	ldhu	r4,18(r4)
8110f20c:	213fffcc 	andi	r4,r4,65535
8110f210:	210001cc 	andi	r4,r4,7
8110f214:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110f218:	e13ffb17 	ldw	r4,-20(fp)
8110f21c:	20001326 	beq	r4,zero,8110f26c <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110f220:	e13ff517 	ldw	r4,-44(fp)
8110f224:	21000044 	addi	r4,r4,1
8110f228:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110f22c:	e13fff17 	ldw	r4,-4(fp)
8110f230:	2100048b 	ldhu	r4,18(r4)
8110f234:	e17ffb17 	ldw	r5,-20(fp)
8110f238:	2149c83a 	sub	r4,r4,r5
8110f23c:	21000204 	addi	r4,r4,8
8110f240:	200b883a 	mov	r5,r4
8110f244:	e13fff17 	ldw	r4,-4(fp)
8110f248:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110f24c:	e13ffb17 	ldw	r4,-20(fp)
8110f250:	200b883a 	mov	r5,r4
8110f254:	01000204 	movi	r4,8
8110f258:	2149c83a 	sub	r4,r4,r5
8110f25c:	200b883a 	mov	r5,r4
8110f260:	e13fff17 	ldw	r4,-4(fp)
8110f264:	21400505 	stb	r5,20(r4)
8110f268:	00000206 	br	8110f274 <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110f26c:	e13fff17 	ldw	r4,-4(fp)
8110f270:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110f274:	e13ff517 	ldw	r4,-44(fp)
8110f278:	2008d13a 	srli	r4,r4,4
8110f27c:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110f280:	e13ff517 	ldw	r4,-44(fp)
8110f284:	210003cc 	andi	r4,r4,15
8110f288:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110f28c:	e13ffc17 	ldw	r4,-16(fp)
8110f290:	20000b26 	beq	r4,zero,8110f2c0 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110f294:	e13ff617 	ldw	r4,-40(fp)
8110f298:	21000044 	addi	r4,r4,1
8110f29c:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110f2a0:	e17ff517 	ldw	r5,-44(fp)
8110f2a4:	e13ffc17 	ldw	r4,-16(fp)
8110f2a8:	290bc83a 	sub	r5,r5,r4
8110f2ac:	e13ff617 	ldw	r4,-40(fp)
8110f2b0:	2909883a 	add	r4,r5,r4
8110f2b4:	21000404 	addi	r4,r4,16
8110f2b8:	e13ffa15 	stw	r4,-24(fp)
8110f2bc:	00000406 	br	8110f2d0 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110f2c0:	e17ff517 	ldw	r5,-44(fp)
8110f2c4:	e13ff617 	ldw	r4,-40(fp)
8110f2c8:	2909883a 	add	r4,r5,r4
8110f2cc:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110f2d0:	e13ffb17 	ldw	r4,-20(fp)
8110f2d4:	20000926 	beq	r4,zero,8110f2fc <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110f2d8:	e13ffc17 	ldw	r4,-16(fp)
8110f2dc:	2109883a 	add	r4,r4,r4
8110f2e0:	2109883a 	add	r4,r4,r4
8110f2e4:	200b883a 	mov	r5,r4
8110f2e8:	e13ffb17 	ldw	r4,-20(fp)
8110f2ec:	2008d07a 	srli	r4,r4,1
8110f2f0:	2909883a 	add	r4,r5,r4
8110f2f4:	e13ff705 	stb	r4,-36(fp)
8110f2f8:	00000406 	br	8110f30c <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110f2fc:	e13ffc17 	ldw	r4,-16(fp)
8110f300:	2109883a 	add	r4,r4,r4
8110f304:	2109883a 	add	r4,r4,r4
8110f308:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110f30c:	e13ff703 	ldbu	r4,-36(fp)
8110f310:	01401004 	movi	r5,64
8110f314:	2909c83a 	sub	r4,r5,r4
8110f318:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110f31c:	e13ffd03 	ldbu	r4,-12(fp)
8110f320:	217ff804 	addi	r5,r4,-32
8110f324:	28000416 	blt	r5,zero,8110f338 <vUpdateMemMapFEE+0x244>
8110f328:	013fffc4 	movi	r4,-1
8110f32c:	2144d83a 	srl	r2,r4,r5
8110f330:	0007883a 	mov	r3,zero
8110f334:	00000a06 	br	8110f360 <vUpdateMemMapFEE+0x26c>
8110f338:	017fffc4 	movi	r5,-1
8110f33c:	280c907a 	slli	r6,r5,1
8110f340:	014007c4 	movi	r5,31
8110f344:	290bc83a 	sub	r5,r5,r4
8110f348:	314a983a 	sll	r5,r6,r5
8110f34c:	01bfffc4 	movi	r6,-1
8110f350:	3104d83a 	srl	r2,r6,r4
8110f354:	2884b03a 	or	r2,r5,r2
8110f358:	017fffc4 	movi	r5,-1
8110f35c:	2906d83a 	srl	r3,r5,r4
8110f360:	e13fff17 	ldw	r4,-4(fp)
8110f364:	20800615 	stw	r2,24(r4)
8110f368:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110f36c:	e0bff617 	ldw	r2,-40(fp)
8110f370:	1007883a 	mov	r3,r2
8110f374:	e0bfff17 	ldw	r2,-4(fp)
8110f378:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110f37c:	e0bfff17 	ldw	r2,-4(fp)
8110f380:	10c00117 	ldw	r3,4(r2)
8110f384:	008004b4 	movhi	r2,18
8110f388:	10a40004 	addi	r2,r2,-28672
8110f38c:	1885883a 	add	r2,r3,r2
8110f390:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110f394:	e0bfff17 	ldw	r2,-4(fp)
8110f398:	1080048b 	ldhu	r2,18(r2)
8110f39c:	10ffffcc 	andi	r3,r2,65535
8110f3a0:	008000b4 	movhi	r2,2
8110f3a4:	10a40004 	addi	r2,r2,-28672
8110f3a8:	1885883a 	add	r2,r3,r2
8110f3ac:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f3b0:	e03ff745 	stb	zero,-35(fp)
8110f3b4:	00001906 	br	8110f41c <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110f3b8:	e0bff743 	ldbu	r2,-35(fp)
8110f3bc:	e0ffff17 	ldw	r3,-4(fp)
8110f3c0:	10800624 	muli	r2,r2,24
8110f3c4:	1885883a 	add	r2,r3,r2
8110f3c8:	10800804 	addi	r2,r2,32
8110f3cc:	e0fff817 	ldw	r3,-32(fp)
8110f3d0:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f3d4:	e0fff817 	ldw	r3,-32(fp)
8110f3d8:	e0bffe17 	ldw	r2,-8(fp)
8110f3dc:	1885883a 	add	r2,r3,r2
8110f3e0:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110f3e4:	e0bff743 	ldbu	r2,-35(fp)
8110f3e8:	e0ffff17 	ldw	r3,-4(fp)
8110f3ec:	10800624 	muli	r2,r2,24
8110f3f0:	1885883a 	add	r2,r3,r2
8110f3f4:	10800b04 	addi	r2,r2,44
8110f3f8:	e0fff817 	ldw	r3,-32(fp)
8110f3fc:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f400:	e0fff817 	ldw	r3,-32(fp)
8110f404:	e0bffe17 	ldw	r2,-8(fp)
8110f408:	1885883a 	add	r2,r3,r2
8110f40c:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f410:	e0bff743 	ldbu	r2,-35(fp)
8110f414:	10800044 	addi	r2,r2,1
8110f418:	e0bff745 	stb	r2,-35(fp)
8110f41c:	e0bff743 	ldbu	r2,-35(fp)
8110f420:	10800130 	cmpltui	r2,r2,4
8110f424:	103fe41e 	bne	r2,zero,8110f3b8 <__reset+0xfb0ef3b8>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110f428:	0001883a 	nop
8110f42c:	e037883a 	mov	sp,fp
8110f430:	df000017 	ldw	fp,0(sp)
8110f434:	dec00104 	addi	sp,sp,4
8110f438:	f800283a 	ret

8110f43c <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110f43c:	defffe04 	addi	sp,sp,-8
8110f440:	de00012e 	bgeu	sp,et,8110f448 <vFeeSpwRMAPLoadDefault+0xc>
8110f444:	003b68fa 	trap	3
8110f448:	df000115 	stw	fp,4(sp)
8110f44c:	df000104 	addi	fp,sp,4
8110f450:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f454:	0001883a 	nop
8110f458:	e037883a 	mov	sp,fp
8110f45c:	df000017 	ldw	fp,0(sp)
8110f460:	dec00104 	addi	sp,sp,4
8110f464:	f800283a 	ret

8110f468 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110f468:	defffe04 	addi	sp,sp,-8
8110f46c:	de00012e 	bgeu	sp,et,8110f474 <vFeeSpwRMAPChangeConfig+0xc>
8110f470:	003b68fa 	trap	3
8110f474:	df000115 	stw	fp,4(sp)
8110f478:	df000104 	addi	fp,sp,4
8110f47c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f480:	0001883a 	nop
8110f484:	e037883a 	mov	sp,fp
8110f488:	df000017 	ldw	fp,0(sp)
8110f48c:	dec00104 	addi	sp,sp,4
8110f490:	f800283a 	ret

8110f494 <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110f494:	defffe04 	addi	sp,sp,-8
8110f498:	de00012e 	bgeu	sp,et,8110f4a0 <vFeeSpwRMAPChangeDefault+0xc>
8110f49c:	003b68fa 	trap	3
8110f4a0:	df000115 	stw	fp,4(sp)
8110f4a4:	df000104 	addi	fp,sp,4
8110f4a8:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110f4ac:	0001883a 	nop
8110f4b0:	e037883a 	mov	sp,fp
8110f4b4:	df000017 	ldw	fp,0(sp)
8110f4b8:	dec00104 	addi	sp,sp,4
8110f4bc:	f800283a 	ret

8110f4c0 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110f4c0:	defffe04 	addi	sp,sp,-8
8110f4c4:	de00012e 	bgeu	sp,et,8110f4cc <cFeeSpwChannelEnable+0xc>
8110f4c8:	003b68fa 	trap	3
8110f4cc:	df000115 	stw	fp,4(sp)
8110f4d0:	df000104 	addi	fp,sp,4
8110f4d4:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f4d8:	0001883a 	nop
8110f4dc:	e037883a 	mov	sp,fp
8110f4e0:	df000017 	ldw	fp,0(sp)
8110f4e4:	dec00104 	addi	sp,sp,4
8110f4e8:	f800283a 	ret

8110f4ec <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110f4ec:	defffe04 	addi	sp,sp,-8
8110f4f0:	de00012e 	bgeu	sp,et,8110f4f8 <cFeeSpwChannelDisable+0xc>
8110f4f4:	003b68fa 	trap	3
8110f4f8:	df000115 	stw	fp,4(sp)
8110f4fc:	df000104 	addi	fp,sp,4
8110f500:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f504:	0001883a 	nop
8110f508:	e037883a 	mov	sp,fp
8110f50c:	df000017 	ldw	fp,0(sp)
8110f510:	dec00104 	addi	sp,sp,4
8110f514:	f800283a 	ret

8110f518 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110f518:	defffe04 	addi	sp,sp,-8
8110f51c:	de00012e 	bgeu	sp,et,8110f524 <cFeeRMAPDump+0xc>
8110f520:	003b68fa 	trap	3
8110f524:	df000115 	stw	fp,4(sp)
8110f528:	df000104 	addi	fp,sp,4
8110f52c:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110f530:	0001883a 	nop
8110f534:	e037883a 	mov	sp,fp
8110f538:	df000017 	ldw	fp,0(sp)
8110f53c:	dec00104 	addi	sp,sp,4
8110f540:	f800283a 	ret

8110f544 <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110f544:	defffe04 	addi	sp,sp,-8
8110f548:	de00012e 	bgeu	sp,et,8110f550 <cFeeRMAPEchoingEnable+0xc>
8110f54c:	003b68fa 	trap	3
8110f550:	df000115 	stw	fp,4(sp)
8110f554:	df000104 	addi	fp,sp,4
8110f558:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110f55c:	e0bfff17 	ldw	r2,-4(fp)
8110f560:	00c00044 	movi	r3,1
8110f564:	10c02315 	stw	r3,140(r2)
}
8110f568:	0001883a 	nop
8110f56c:	e037883a 	mov	sp,fp
8110f570:	df000017 	ldw	fp,0(sp)
8110f574:	dec00104 	addi	sp,sp,4
8110f578:	f800283a 	ret

8110f57c <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110f57c:	defffe04 	addi	sp,sp,-8
8110f580:	de00012e 	bgeu	sp,et,8110f588 <cFeeRMAPEchoingDisable+0xc>
8110f584:	003b68fa 	trap	3
8110f588:	df000115 	stw	fp,4(sp)
8110f58c:	df000104 	addi	fp,sp,4
8110f590:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f594:	e0bfff17 	ldw	r2,-4(fp)
8110f598:	10002315 	stw	zero,140(r2)
}
8110f59c:	0001883a 	nop
8110f5a0:	e037883a 	mov	sp,fp
8110f5a4:	df000017 	ldw	fp,0(sp)
8110f5a8:	dec00104 	addi	sp,sp,4
8110f5ac:	f800283a 	ret

8110f5b0 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110f5b0:	defffe04 	addi	sp,sp,-8
8110f5b4:	de00012e 	bgeu	sp,et,8110f5bc <cFeeRMAPLogEnable+0xc>
8110f5b8:	003b68fa 	trap	3
8110f5bc:	df000115 	stw	fp,4(sp)
8110f5c0:	df000104 	addi	fp,sp,4
8110f5c4:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110f5c8:	e0bfff17 	ldw	r2,-4(fp)
8110f5cc:	00c00044 	movi	r3,1
8110f5d0:	10c02215 	stw	r3,136(r2)
}
8110f5d4:	0001883a 	nop
8110f5d8:	e037883a 	mov	sp,fp
8110f5dc:	df000017 	ldw	fp,0(sp)
8110f5e0:	dec00104 	addi	sp,sp,4
8110f5e4:	f800283a 	ret

8110f5e8 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110f5e8:	defffe04 	addi	sp,sp,-8
8110f5ec:	de00012e 	bgeu	sp,et,8110f5f4 <cFeeRMAPLogDisable+0xc>
8110f5f0:	003b68fa 	trap	3
8110f5f4:	df000115 	stw	fp,4(sp)
8110f5f8:	df000104 	addi	fp,sp,4
8110f5fc:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110f600:	e0bfff17 	ldw	r2,-4(fp)
8110f604:	10002215 	stw	zero,136(r2)
}
8110f608:	0001883a 	nop
8110f60c:	e037883a 	mov	sp,fp
8110f610:	df000017 	ldw	fp,0(sp)
8110f614:	dec00104 	addi	sp,sp,4
8110f618:	f800283a 	ret

8110f61c <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110f61c:	defffe04 	addi	sp,sp,-8
8110f620:	de00012e 	bgeu	sp,et,8110f628 <vInitSimucamBasicHW+0xc>
8110f624:	003b68fa 	trap	3
8110f628:	dfc00115 	stw	ra,4(sp)
8110f62c:	df000015 	stw	fp,0(sp)
8110f630:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110f634:	01403fc4 	movi	r5,255
8110f638:	0009883a 	mov	r4,zero
8110f63c:	11060d40 	call	811060d4 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110f640:	01400834 	movhi	r5,32
8110f644:	297fffc4 	addi	r5,r5,-1
8110f648:	0009883a 	mov	r4,zero
8110f64c:	11061540 	call	81106154 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110f650:	01400074 	movhi	r5,1
8110f654:	01000044 	movi	r4,1
8110f658:	11061540 	call	81106154 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110f65c:	0009883a 	mov	r4,zero
8110f660:	11077300 	call	81107730 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110f664:	0009883a 	mov	r4,zero
8110f668:	11078000 	call	81107800 <bSSDisplayUpdate>

}
8110f66c:	0001883a 	nop
8110f670:	e037883a 	mov	sp,fp
8110f674:	dfc00117 	ldw	ra,4(sp)
8110f678:	df000017 	ldw	fp,0(sp)
8110f67c:	dec00204 	addi	sp,sp,8
8110f680:	f800283a 	ret

8110f684 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110f684:	defffd04 	addi	sp,sp,-12
8110f688:	de00012e 	bgeu	sp,et,8110f690 <bLogWriteSDCard+0xc>
8110f68c:	003b68fa 	trap	3
8110f690:	df000215 	stw	fp,8(sp)
8110f694:	df000204 	addi	fp,sp,8
8110f698:	e13ffe15 	stw	r4,-8(fp)
8110f69c:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110f6a0:	00800044 	movi	r2,1
}
8110f6a4:	e037883a 	mov	sp,fp
8110f6a8:	df000017 	ldw	fp,0(sp)
8110f6ac:	dec00104 	addi	sp,sp,4
8110f6b0:	f800283a 	ret

8110f6b4 <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8110f6b4:	deffe004 	addi	sp,sp,-128
8110f6b8:	de00012e 	bgeu	sp,et,8110f6c0 <vLogWriteNUC+0xc>
8110f6bc:	003b68fa 	trap	3
8110f6c0:	dfc01f15 	stw	ra,124(sp)
8110f6c4:	df001e15 	stw	fp,120(sp)
8110f6c8:	df001e04 	addi	fp,sp,120
8110f6cc:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
8110f6d0:	e03fe215 	stw	zero,-120(fp)
8110f6d4:	e0bfe304 	addi	r2,fp,-116
8110f6d8:	00c01b84 	movi	r3,110
8110f6dc:	180d883a 	mov	r6,r3
8110f6e0:	000b883a 	mov	r5,zero
8110f6e4:	1009883a 	mov	r4,r2
8110f6e8:	1112acc0 	call	81112acc <memset>
	memset(cTemp,0,114);
8110f6ec:	01801c84 	movi	r6,114
8110f6f0:	000b883a 	mov	r5,zero
8110f6f4:	e13fe204 	addi	r4,fp,-120
8110f6f8:	1112acc0 	call	81112acc <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8110f6fc:	e13fff17 	ldw	r4,-4(fp)
8110f700:	11132f80 	call	811132f8 <strlen>
8110f704:	10801c68 	cmpgeui	r2,r2,113
8110f708:	1000031e 	bne	r2,zero,8110f718 <vLogWriteNUC+0x64>
8110f70c:	e13fff17 	ldw	r4,-4(fp)
8110f710:	11132f80 	call	811132f8 <strlen>
8110f714:	00000106 	br	8110f71c <vLogWriteNUC+0x68>
8110f718:	00801c44 	movi	r2,113
8110f71c:	100d883a 	mov	r6,r2
8110f720:	e17fff17 	ldw	r5,-4(fp)
8110f724:	e13fe204 	addi	r4,fp,-120
8110f728:	111297c0 	call	8111297c <memcpy>
	vSendLog ( cDataIn );
8110f72c:	e13fff17 	ldw	r4,-4(fp)
8110f730:	110cb380 	call	8110cb38 <vSendLog>
}
8110f734:	0001883a 	nop
8110f738:	e037883a 	mov	sp,fp
8110f73c:	dfc00117 	ldw	ra,4(sp)
8110f740:	df000017 	ldw	fp,0(sp)
8110f744:	dec00204 	addi	sp,sp,8
8110f748:	f800283a 	ret

8110f74c <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110f74c:	defffc04 	addi	sp,sp,-16
8110f750:	de00012e 	bgeu	sp,et,8110f758 <vSimucamStructureInit+0xc>
8110f754:	003b68fa 	trap	3
8110f758:	dfc00315 	stw	ra,12(sp)
8110f75c:	df000215 	stw	fp,8(sp)
8110f760:	df000204 	addi	fp,sp,8
8110f764:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110f768:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110f76c:	e0bfff17 	ldw	r2,-4(fp)
8110f770:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110f774:	e0bfff17 	ldw	r2,-4(fp)
8110f778:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110f77c:	e13fff17 	ldw	r4,-4(fp)
8110f780:	110f8e80 	call	8110f8e8 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110f784:	e13fff17 	ldw	r4,-4(fp)
8110f788:	110f98c0 	call	8110f98c <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110f78c:	e13fff17 	ldw	r4,-4(fp)
8110f790:	110fa340 	call	8110fa34 <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110f794:	e13fff17 	ldw	r4,-4(fp)
8110f798:	110fb140 	call	8110fb14 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110f79c:	e13fff17 	ldw	r4,-4(fp)
8110f7a0:	110fbec0 	call	8110fbec <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110f7a4:	e13fff17 	ldw	r4,-4(fp)
8110f7a8:	110fb480 	call	8110fb48 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110f7ac:	e0bfff17 	ldw	r2,-4(fp)
8110f7b0:	00c00084 	movi	r3,2
8110f7b4:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110f7b8:	e0bfff17 	ldw	r2,-4(fp)
8110f7bc:	10800017 	ldw	r2,0(r2)
8110f7c0:	1000391e 	bne	r2,zero,8110f8a8 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110f7c4:	e03ffe05 	stb	zero,-8(fp)
8110f7c8:	00003306 	br	8110f898 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110f7cc:	e0bfff17 	ldw	r2,-4(fp)
8110f7d0:	10800203 	ldbu	r2,8(r2)
8110f7d4:	10803fcc 	andi	r2,r2,255
8110f7d8:	e0fffe03 	ldbu	r3,-8(fp)
8110f7dc:	18800a2e 	bgeu	r3,r2,8110f808 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110f7e0:	e0bffe03 	ldbu	r2,-8(fp)
8110f7e4:	10802b24 	muli	r2,r2,172
8110f7e8:	10800304 	addi	r2,r2,12
8110f7ec:	e0ffff17 	ldw	r3,-4(fp)
8110f7f0:	1885883a 	add	r2,r3,r2
8110f7f4:	e0fffe03 	ldbu	r3,-8(fp)
8110f7f8:	180b883a 	mov	r5,r3
8110f7fc:	1009883a 	mov	r4,r2
8110f800:	110f01c0 	call	8110f01c <vNFeeStructureInit>
8110f804:	00000906 	br	8110f82c <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110f808:	e0bffe03 	ldbu	r2,-8(fp)
8110f80c:	10802b24 	muli	r2,r2,172
8110f810:	10800304 	addi	r2,r2,12
8110f814:	e0ffff17 	ldw	r3,-4(fp)
8110f818:	1885883a 	add	r2,r3,r2
8110f81c:	e0fffe03 	ldbu	r3,-8(fp)
8110f820:	180b883a 	mov	r5,r3
8110f824:	1009883a 	mov	r4,r2
8110f828:	110efcc0 	call	8110efcc <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110f82c:	e0bffe03 	ldbu	r2,-8(fp)
8110f830:	e0fffe03 	ldbu	r3,-8(fp)
8110f834:	18c02b24 	muli	r3,r3,172
8110f838:	18c02304 	addi	r3,r3,140
8110f83c:	e13fff17 	ldw	r4,-4(fp)
8110f840:	20c7883a 	add	r3,r4,r3
8110f844:	e13fff17 	ldw	r4,-4(fp)
8110f848:	108042c4 	addi	r2,r2,267
8110f84c:	1085883a 	add	r2,r2,r2
8110f850:	1085883a 	add	r2,r2,r2
8110f854:	2085883a 	add	r2,r4,r2
8110f858:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110f85c:	e0bffe03 	ldbu	r2,-8(fp)
8110f860:	e0fffe03 	ldbu	r3,-8(fp)
8110f864:	18c02b24 	muli	r3,r3,172
8110f868:	18c02404 	addi	r3,r3,144
8110f86c:	e13fff17 	ldw	r4,-4(fp)
8110f870:	20c7883a 	add	r3,r4,r3
8110f874:	e13fff17 	ldw	r4,-4(fp)
8110f878:	10804444 	addi	r2,r2,273
8110f87c:	1085883a 	add	r2,r2,r2
8110f880:	1085883a 	add	r2,r2,r2
8110f884:	2085883a 	add	r2,r4,r2
8110f888:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110f88c:	e0bffe03 	ldbu	r2,-8(fp)
8110f890:	10800044 	addi	r2,r2,1
8110f894:	e0bffe05 	stb	r2,-8(fp)
8110f898:	e0bffe03 	ldbu	r2,-8(fp)
8110f89c:	108001b0 	cmpltui	r2,r2,6
8110f8a0:	103fca1e 	bne	r2,zero,8110f7cc <__reset+0xfb0ef7cc>
8110f8a4:	00000806 	br	8110f8c8 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110f8a8:	e03ffe05 	stb	zero,-8(fp)
8110f8ac:	00000306 	br	8110f8bc <vSimucamStructureInit+0x170>
8110f8b0:	e0bffe03 	ldbu	r2,-8(fp)
8110f8b4:	10800044 	addi	r2,r2,1
8110f8b8:	e0bffe05 	stb	r2,-8(fp)
8110f8bc:	e0bffe03 	ldbu	r2,-8(fp)
8110f8c0:	108000b0 	cmpltui	r2,r2,2
8110f8c4:	103ffa1e 	bne	r2,zero,8110f8b0 <__reset+0xfb0ef8b0>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110f8c8:	e0bfff17 	ldw	r2,-4(fp)
8110f8cc:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110f8d0:	0001883a 	nop
8110f8d4:	e037883a 	mov	sp,fp
8110f8d8:	dfc00117 	ldw	ra,4(sp)
8110f8dc:	df000017 	ldw	fp,0(sp)
8110f8e0:	dec00204 	addi	sp,sp,8
8110f8e4:	f800283a 	ret

8110f8e8 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110f8e8:	defffe04 	addi	sp,sp,-8
8110f8ec:	de00012e 	bgeu	sp,et,8110f8f4 <vLoadDefaultEPValue+0xc>
8110f8f0:	003b68fa 	trap	3
8110f8f4:	df000115 	stw	fp,4(sp)
8110f8f8:	df000104 	addi	fp,sp,4
8110f8fc:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110f900:	e0bfff17 	ldw	r2,-4(fp)
8110f904:	00d07234 	movhi	r3,16840
8110f908:	10c10615 	stw	r3,1048(r2)
}
8110f90c:	0001883a 	nop
8110f910:	e037883a 	mov	sp,fp
8110f914:	df000017 	ldw	fp,0(sp)
8110f918:	dec00104 	addi	sp,sp,4
8110f91c:	f800283a 	ret

8110f920 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f920:	defffd04 	addi	sp,sp,-12
8110f924:	de00012e 	bgeu	sp,et,8110f92c <vChangeEPValue+0xc>
8110f928:	003b68fa 	trap	3
8110f92c:	df000215 	stw	fp,8(sp)
8110f930:	df000204 	addi	fp,sp,8
8110f934:	e13ffe15 	stw	r4,-8(fp)
8110f938:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110f93c:	e0bffe17 	ldw	r2,-8(fp)
8110f940:	e0ffff17 	ldw	r3,-4(fp)
8110f944:	10c10615 	stw	r3,1048(r2)
}
8110f948:	0001883a 	nop
8110f94c:	e037883a 	mov	sp,fp
8110f950:	df000017 	ldw	fp,0(sp)
8110f954:	dec00104 	addi	sp,sp,4
8110f958:	f800283a 	ret

8110f95c <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f95c:	defffd04 	addi	sp,sp,-12
8110f960:	de00012e 	bgeu	sp,et,8110f968 <vChangeDefaultEPValue+0xc>
8110f964:	003b68fa 	trap	3
8110f968:	df000215 	stw	fp,8(sp)
8110f96c:	df000204 	addi	fp,sp,8
8110f970:	e13ffe15 	stw	r4,-8(fp)
8110f974:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110f978:	0001883a 	nop
8110f97c:	e037883a 	mov	sp,fp
8110f980:	df000017 	ldw	fp,0(sp)
8110f984:	dec00104 	addi	sp,sp,4
8110f988:	f800283a 	ret

8110f98c <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110f98c:	defffe04 	addi	sp,sp,-8
8110f990:	de00012e 	bgeu	sp,et,8110f998 <vLoadDefaultRTValue+0xc>
8110f994:	003b68fa 	trap	3
8110f998:	df000115 	stw	fp,4(sp)
8110f99c:	df000104 	addi	fp,sp,4
8110f9a0:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110f9a4:	e0ffff17 	ldw	r3,-4(fp)
8110f9a8:	00901eb4 	movhi	r2,16506
8110f9ac:	10a66684 	addi	r2,r2,-26214
8110f9b0:	18810715 	stw	r2,1052(r3)
}
8110f9b4:	0001883a 	nop
8110f9b8:	e037883a 	mov	sp,fp
8110f9bc:	df000017 	ldw	fp,0(sp)
8110f9c0:	dec00104 	addi	sp,sp,4
8110f9c4:	f800283a 	ret

8110f9c8 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f9c8:	defffd04 	addi	sp,sp,-12
8110f9cc:	de00012e 	bgeu	sp,et,8110f9d4 <vChangeRTValue+0xc>
8110f9d0:	003b68fa 	trap	3
8110f9d4:	df000215 	stw	fp,8(sp)
8110f9d8:	df000204 	addi	fp,sp,8
8110f9dc:	e13ffe15 	stw	r4,-8(fp)
8110f9e0:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110f9e4:	e0bffe17 	ldw	r2,-8(fp)
8110f9e8:	e0ffff17 	ldw	r3,-4(fp)
8110f9ec:	10c10715 	stw	r3,1052(r2)
}
8110f9f0:	0001883a 	nop
8110f9f4:	e037883a 	mov	sp,fp
8110f9f8:	df000017 	ldw	fp,0(sp)
8110f9fc:	dec00104 	addi	sp,sp,4
8110fa00:	f800283a 	ret

8110fa04 <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fa04:	defffd04 	addi	sp,sp,-12
8110fa08:	de00012e 	bgeu	sp,et,8110fa10 <vChangeDefaultRTValue+0xc>
8110fa0c:	003b68fa 	trap	3
8110fa10:	df000215 	stw	fp,8(sp)
8110fa14:	df000204 	addi	fp,sp,8
8110fa18:	e13ffe15 	stw	r4,-8(fp)
8110fa1c:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110fa20:	0001883a 	nop
8110fa24:	e037883a 	mov	sp,fp
8110fa28:	df000017 	ldw	fp,0(sp)
8110fa2c:	dec00104 	addi	sp,sp,4
8110fa30:	f800283a 	ret

8110fa34 <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110fa34:	defffe04 	addi	sp,sp,-8
8110fa38:	de00012e 	bgeu	sp,et,8110fa40 <vLoadDefaultSyncSource+0xc>
8110fa3c:	003b68fa 	trap	3
8110fa40:	df000115 	stw	fp,4(sp)
8110fa44:	df000104 	addi	fp,sp,4
8110fa48:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110fa4c:	e0bfff17 	ldw	r2,-4(fp)
8110fa50:	10010815 	stw	zero,1056(r2)
}
8110fa54:	0001883a 	nop
8110fa58:	e037883a 	mov	sp,fp
8110fa5c:	df000017 	ldw	fp,0(sp)
8110fa60:	dec00104 	addi	sp,sp,4
8110fa64:	f800283a 	ret

8110fa68 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110fa68:	defffd04 	addi	sp,sp,-12
8110fa6c:	de00012e 	bgeu	sp,et,8110fa74 <vChangeSyncSource+0xc>
8110fa70:	003b68fa 	trap	3
8110fa74:	df000215 	stw	fp,8(sp)
8110fa78:	df000204 	addi	fp,sp,8
8110fa7c:	e13ffe15 	stw	r4,-8(fp)
8110fa80:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110fa84:	e0bffe17 	ldw	r2,-8(fp)
8110fa88:	e0ffff17 	ldw	r3,-4(fp)
8110fa8c:	10c10815 	stw	r3,1056(r2)
}
8110fa90:	0001883a 	nop
8110fa94:	e037883a 	mov	sp,fp
8110fa98:	df000017 	ldw	fp,0(sp)
8110fa9c:	dec00104 	addi	sp,sp,4
8110faa0:	f800283a 	ret

8110faa4 <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110faa4:	defffd04 	addi	sp,sp,-12
8110faa8:	de00012e 	bgeu	sp,et,8110fab0 <vChangeDefaultSyncSource+0xc>
8110faac:	003b68fa 	trap	3
8110fab0:	df000215 	stw	fp,8(sp)
8110fab4:	df000204 	addi	fp,sp,8
8110fab8:	e13ffe15 	stw	r4,-8(fp)
8110fabc:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110fac0:	0001883a 	nop
8110fac4:	e037883a 	mov	sp,fp
8110fac8:	df000017 	ldw	fp,0(sp)
8110facc:	dec00104 	addi	sp,sp,4
8110fad0:	f800283a 	ret

8110fad4 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110fad4:	defffd04 	addi	sp,sp,-12
8110fad8:	de00012e 	bgeu	sp,et,8110fae0 <vSetTimeCode+0xc>
8110fadc:	003b68fa 	trap	3
8110fae0:	df000215 	stw	fp,8(sp)
8110fae4:	df000204 	addi	fp,sp,8
8110fae8:	e13ffe15 	stw	r4,-8(fp)
8110faec:	2805883a 	mov	r2,r5
8110faf0:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110faf4:	e0bffe17 	ldw	r2,-8(fp)
8110faf8:	e0ffff03 	ldbu	r3,-4(fp)
8110fafc:	10c10905 	stb	r3,1060(r2)
}
8110fb00:	0001883a 	nop
8110fb04:	e037883a 	mov	sp,fp
8110fb08:	df000017 	ldw	fp,0(sp)
8110fb0c:	dec00104 	addi	sp,sp,4
8110fb10:	f800283a 	ret

8110fb14 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110fb14:	defffe04 	addi	sp,sp,-8
8110fb18:	de00012e 	bgeu	sp,et,8110fb20 <vResetTimeCode+0xc>
8110fb1c:	003b68fa 	trap	3
8110fb20:	df000115 	stw	fp,4(sp)
8110fb24:	df000104 	addi	fp,sp,4
8110fb28:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110fb2c:	e0bfff17 	ldw	r2,-4(fp)
8110fb30:	10010905 	stb	zero,1060(r2)
}
8110fb34:	0001883a 	nop
8110fb38:	e037883a 	mov	sp,fp
8110fb3c:	df000017 	ldw	fp,0(sp)
8110fb40:	dec00104 	addi	sp,sp,4
8110fb44:	f800283a 	ret

8110fb48 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110fb48:	defffe04 	addi	sp,sp,-8
8110fb4c:	de00012e 	bgeu	sp,et,8110fb54 <vLoadDefaultAutoResetSync+0xc>
8110fb50:	003b68fa 	trap	3
8110fb54:	df000115 	stw	fp,4(sp)
8110fb58:	df000104 	addi	fp,sp,4
8110fb5c:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110fb60:	e0bfff17 	ldw	r2,-4(fp)
8110fb64:	00c00044 	movi	r3,1
8110fb68:	10c10a15 	stw	r3,1064(r2)
}
8110fb6c:	0001883a 	nop
8110fb70:	e037883a 	mov	sp,fp
8110fb74:	df000017 	ldw	fp,0(sp)
8110fb78:	dec00104 	addi	sp,sp,4
8110fb7c:	f800283a 	ret

8110fb80 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110fb80:	defffd04 	addi	sp,sp,-12
8110fb84:	de00012e 	bgeu	sp,et,8110fb8c <vChangeAutoResetSync+0xc>
8110fb88:	003b68fa 	trap	3
8110fb8c:	df000215 	stw	fp,8(sp)
8110fb90:	df000204 	addi	fp,sp,8
8110fb94:	e13ffe15 	stw	r4,-8(fp)
8110fb98:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110fb9c:	e0bffe17 	ldw	r2,-8(fp)
8110fba0:	e0ffff17 	ldw	r3,-4(fp)
8110fba4:	10c10a15 	stw	r3,1064(r2)
}
8110fba8:	0001883a 	nop
8110fbac:	e037883a 	mov	sp,fp
8110fbb0:	df000017 	ldw	fp,0(sp)
8110fbb4:	dec00104 	addi	sp,sp,4
8110fbb8:	f800283a 	ret

8110fbbc <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110fbbc:	defffd04 	addi	sp,sp,-12
8110fbc0:	de00012e 	bgeu	sp,et,8110fbc8 <vChangeDefaultAutoResetSync+0xc>
8110fbc4:	003b68fa 	trap	3
8110fbc8:	df000215 	stw	fp,8(sp)
8110fbcc:	df000204 	addi	fp,sp,8
8110fbd0:	e13ffe15 	stw	r4,-8(fp)
8110fbd4:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110fbd8:	0001883a 	nop
8110fbdc:	e037883a 	mov	sp,fp
8110fbe0:	df000017 	ldw	fp,0(sp)
8110fbe4:	dec00104 	addi	sp,sp,4
8110fbe8:	f800283a 	ret

8110fbec <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110fbec:	defffe04 	addi	sp,sp,-8
8110fbf0:	de00012e 	bgeu	sp,et,8110fbf8 <vLoadDefaultIdNFEEMaster+0xc>
8110fbf4:	003b68fa 	trap	3
8110fbf8:	df000115 	stw	fp,4(sp)
8110fbfc:	df000104 	addi	fp,sp,4
8110fc00:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110fc04:	e0bfff17 	ldw	r2,-4(fp)
8110fc08:	10010945 	stb	zero,1061(r2)
}
8110fc0c:	0001883a 	nop
8110fc10:	e037883a 	mov	sp,fp
8110fc14:	df000017 	ldw	fp,0(sp)
8110fc18:	dec00104 	addi	sp,sp,4
8110fc1c:	f800283a 	ret

8110fc20 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110fc20:	defffd04 	addi	sp,sp,-12
8110fc24:	de00012e 	bgeu	sp,et,8110fc2c <vChangeIdNFEEMaster+0xc>
8110fc28:	003b68fa 	trap	3
8110fc2c:	df000215 	stw	fp,8(sp)
8110fc30:	df000204 	addi	fp,sp,8
8110fc34:	e13ffe15 	stw	r4,-8(fp)
8110fc38:	2805883a 	mov	r2,r5
8110fc3c:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110fc40:	e0bffe17 	ldw	r2,-8(fp)
8110fc44:	e0ffff03 	ldbu	r3,-4(fp)
8110fc48:	10c10945 	stb	r3,1061(r2)
}
8110fc4c:	0001883a 	nop
8110fc50:	e037883a 	mov	sp,fp
8110fc54:	df000017 	ldw	fp,0(sp)
8110fc58:	dec00104 	addi	sp,sp,4
8110fc5c:	f800283a 	ret

8110fc60 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110fc60:	defffd04 	addi	sp,sp,-12
8110fc64:	de00012e 	bgeu	sp,et,8110fc6c <vChangeDefaultIdNFEEMaster+0xc>
8110fc68:	003b68fa 	trap	3
8110fc6c:	df000215 	stw	fp,8(sp)
8110fc70:	df000204 	addi	fp,sp,8
8110fc74:	e13ffe15 	stw	r4,-8(fp)
8110fc78:	2805883a 	mov	r2,r5
8110fc7c:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110fc80:	0001883a 	nop
8110fc84:	e037883a 	mov	sp,fp
8110fc88:	df000017 	ldw	fp,0(sp)
8110fc8c:	dec00104 	addi	sp,sp,4
8110fc90:	f800283a 	ret

8110fc94 <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110fc94:	defffc04 	addi	sp,sp,-16
8110fc98:	de00012e 	bgeu	sp,et,8110fca0 <vSyncReset+0xc>
8110fc9c:	003b68fa 	trap	3
8110fca0:	dfc00315 	stw	ra,12(sp)
8110fca4:	df000215 	stw	fp,8(sp)
8110fca8:	df000204 	addi	fp,sp,8
8110fcac:	e13ffe15 	stw	r4,-8(fp)
8110fcb0:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110fcb4:	e13ffe17 	ldw	r4,-8(fp)
8110fcb8:	110fb140 	call	8110fb14 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110fcbc:	0001883a 	nop
8110fcc0:	e037883a 	mov	sp,fp
8110fcc4:	dfc00117 	ldw	ra,4(sp)
8110fcc8:	df000017 	ldw	fp,0(sp)
8110fccc:	dec00204 	addi	sp,sp,8
8110fcd0:	f800283a 	ret

8110fcd4 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110fcd4:	defffe04 	addi	sp,sp,-8
8110fcd8:	de00012e 	bgeu	sp,et,8110fce0 <bSDcardIsPresent+0xc>
8110fcdc:	003b68fa 	trap	3
8110fce0:	dfc00115 	stw	ra,4(sp)
8110fce4:	df000015 	stw	fp,0(sp)
8110fce8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110fcec:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
}
8110fcf0:	e037883a 	mov	sp,fp
8110fcf4:	dfc00117 	ldw	ra,4(sp)
8110fcf8:	df000017 	ldw	fp,0(sp)
8110fcfc:	dec00204 	addi	sp,sp,8
8110fd00:	f800283a 	ret

8110fd04 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110fd04:	defffe04 	addi	sp,sp,-8
8110fd08:	de00012e 	bgeu	sp,et,8110fd10 <bSDcardFAT16Check+0xc>
8110fd0c:	003b68fa 	trap	3
8110fd10:	dfc00115 	stw	ra,4(sp)
8110fd14:	df000015 	stw	fp,0(sp)
8110fd18:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110fd1c:	11351cc0 	call	811351cc <alt_up_sd_card_is_FAT16>
}
8110fd20:	e037883a 	mov	sp,fp
8110fd24:	dfc00117 	ldw	ra,4(sp)
8110fd28:	df000017 	ldw	fp,0(sp)
8110fd2c:	dec00204 	addi	sp,sp,8
8110fd30:	f800283a 	ret

8110fd34 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110fd34:	defffd04 	addi	sp,sp,-12
8110fd38:	de00012e 	bgeu	sp,et,8110fd40 <bInitializeSDCard+0xc>
8110fd3c:	003b68fa 	trap	3
8110fd40:	dfc00215 	stw	ra,8(sp)
8110fd44:	df000115 	stw	fp,4(sp)
8110fd48:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110fd4c:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110fd50:	d0205d15 	stw	zero,-32396(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110fd54:	01204534 	movhi	r4,33044
8110fd58:	2137e304 	addi	r4,r4,-8308
8110fd5c:	113503c0 	call	8113503c <alt_up_sd_card_open_dev>
8110fd60:	d0a05d15 	stw	r2,-32396(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110fd64:	d0a05d17 	ldw	r2,-32396(gp)
8110fd68:	10002226 	beq	r2,zero,8110fdf4 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110fd6c:	110fcd40 	call	8110fcd4 <bSDcardIsPresent>
8110fd70:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110fd74:	e0bfff17 	ldw	r2,-4(fp)
8110fd78:	10001626 	beq	r2,zero,8110fdd4 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110fd7c:	110fd040 	call	8110fd04 <bSDcardFAT16Check>
8110fd80:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110fd84:	e0bfff17 	ldw	r2,-4(fp)
8110fd88:	10000a26 	beq	r2,zero,8110fdb4 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110fd8c:	00800044 	movi	r2,1
8110fd90:	d0a05c15 	stw	r2,-32400(gp)
				debug(fp, "SD is up.\r\n");
8110fd94:	d0a04d17 	ldw	r2,-32460(gp)
8110fd98:	100f883a 	mov	r7,r2
8110fd9c:	018002c4 	movi	r6,11
8110fda0:	01400044 	movi	r5,1
8110fda4:	01204534 	movhi	r4,33044
8110fda8:	2137ee04 	addi	r4,r4,-8264
8110fdac:	1111f680 	call	81111f68 <fwrite>
8110fdb0:	00001806 	br	8110fe14 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110fdb4:	d0a04d17 	ldw	r2,-32460(gp)
8110fdb8:	100f883a 	mov	r7,r2
8110fdbc:	01800984 	movi	r6,38
8110fdc0:	01400044 	movi	r5,1
8110fdc4:	01204534 	movhi	r4,33044
8110fdc8:	2137f104 	addi	r4,r4,-8252
8110fdcc:	1111f680 	call	81111f68 <fwrite>
8110fdd0:	00001006 	br	8110fe14 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110fdd4:	d0a04d17 	ldw	r2,-32460(gp)
8110fdd8:	100f883a 	mov	r7,r2
8110fddc:	01800744 	movi	r6,29
8110fde0:	01400044 	movi	r5,1
8110fde4:	01204534 	movhi	r4,33044
8110fde8:	2137fb04 	addi	r4,r4,-8212
8110fdec:	1111f680 	call	81111f68 <fwrite>
8110fdf0:	00000806 	br	8110fe14 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110fdf4:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110fdf8:	d0a04d17 	ldw	r2,-32460(gp)
8110fdfc:	100f883a 	mov	r7,r2
8110fe00:	018008c4 	movi	r6,35
8110fe04:	01400044 	movi	r5,1
8110fe08:	01204534 	movhi	r4,33044
8110fe0c:	21380304 	addi	r4,r4,-8180
8110fe10:	1111f680 	call	81111f68 <fwrite>
	}

	return bSucess;
8110fe14:	e0bfff17 	ldw	r2,-4(fp)
}
8110fe18:	e037883a 	mov	sp,fp
8110fe1c:	dfc00117 	ldw	ra,4(sp)
8110fe20:	df000017 	ldw	fp,0(sp)
8110fe24:	dec00204 	addi	sp,sp,8
8110fe28:	f800283a 	ret

8110fe2c <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110fe2c:	defffd04 	addi	sp,sp,-12
8110fe30:	de00012e 	bgeu	sp,et,8110fe38 <siOpenFile+0xc>
8110fe34:	003b68fa 	trap	3
8110fe38:	dfc00215 	stw	ra,8(sp)
8110fe3c:	df000115 	stw	fp,4(sp)
8110fe40:	df000104 	addi	fp,sp,4
8110fe44:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110fe48:	000b883a 	mov	r5,zero
8110fe4c:	e13fff17 	ldw	r4,-4(fp)
8110fe50:	11356d80 	call	811356d8 <alt_up_sd_card_fopen>
}
8110fe54:	e037883a 	mov	sp,fp
8110fe58:	dfc00117 	ldw	ra,4(sp)
8110fe5c:	df000017 	ldw	fp,0(sp)
8110fe60:	dec00204 	addi	sp,sp,8
8110fe64:	f800283a 	ret

8110fe68 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110fe68:	defffd04 	addi	sp,sp,-12
8110fe6c:	de00012e 	bgeu	sp,et,8110fe74 <siCloseFile+0xc>
8110fe70:	003b68fa 	trap	3
8110fe74:	dfc00215 	stw	ra,8(sp)
8110fe78:	df000115 	stw	fp,4(sp)
8110fe7c:	df000104 	addi	fp,sp,4
8110fe80:	2005883a 	mov	r2,r4
8110fe84:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110fe88:	e0bfff0f 	ldh	r2,-4(fp)
8110fe8c:	1009883a 	mov	r4,r2
8110fe90:	11365240 	call	81136524 <alt_up_sd_card_fclose>
}
8110fe94:	e037883a 	mov	sp,fp
8110fe98:	dfc00117 	ldw	ra,4(sp)
8110fe9c:	df000017 	ldw	fp,0(sp)
8110fea0:	dec00204 	addi	sp,sp,8
8110fea4:	f800283a 	ret

8110fea8 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110fea8:	defffd04 	addi	sp,sp,-12
8110feac:	de00012e 	bgeu	sp,et,8110feb4 <cGetNextChar+0xc>
8110feb0:	003b68fa 	trap	3
8110feb4:	dfc00215 	stw	ra,8(sp)
8110feb8:	df000115 	stw	fp,4(sp)
8110febc:	df000104 	addi	fp,sp,4
8110fec0:	2005883a 	mov	r2,r4
8110fec4:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110fec8:	e0bfff0f 	ldh	r2,-4(fp)
8110fecc:	1009883a 	mov	r4,r2
8110fed0:	1135b7c0 	call	81135b7c <alt_up_sd_card_read>
}
8110fed4:	e037883a 	mov	sp,fp
8110fed8:	dfc00117 	ldw	ra,4(sp)
8110fedc:	df000017 	ldw	fp,0(sp)
8110fee0:	dec00204 	addi	sp,sp,8
8110fee4:	f800283a 	ret

8110fee8 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110fee8:	deffff04 	addi	sp,sp,-4
8110feec:	de00012e 	bgeu	sp,et,8110fef4 <bTestSimucamCriticalHW+0xc>
8110fef0:	003b68fa 	trap	3
8110fef4:	df000015 	stw	fp,0(sp)
8110fef8:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110fefc:	00800044 	movi	r2,1
}
8110ff00:	e037883a 	mov	sp,fp
8110ff04:	df000017 	ldw	fp,0(sp)
8110ff08:	dec00104 	addi	sp,sp,4
8110ff0c:	f800283a 	ret

8110ff10 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110ff10:	defffc04 	addi	sp,sp,-16
8110ff14:	de00012e 	bgeu	sp,et,8110ff1c <_reg_write+0xc>
8110ff18:	003b68fa 	trap	3
8110ff1c:	df000315 	stw	fp,12(sp)
8110ff20:	df000304 	addi	fp,sp,12
8110ff24:	e13ffd15 	stw	r4,-12(fp)
8110ff28:	e17ffe15 	stw	r5,-8(fp)
8110ff2c:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110ff30:	e0bffe17 	ldw	r2,-8(fp)
8110ff34:	1085883a 	add	r2,r2,r2
8110ff38:	1085883a 	add	r2,r2,r2
8110ff3c:	1007883a 	mov	r3,r2
8110ff40:	e0bffd17 	ldw	r2,-12(fp)
8110ff44:	1885883a 	add	r2,r3,r2
8110ff48:	1007883a 	mov	r3,r2
8110ff4c:	e0bfff17 	ldw	r2,-4(fp)
8110ff50:	18800035 	stwio	r2,0(r3)
	return 1;
8110ff54:	00800044 	movi	r2,1

}
8110ff58:	e037883a 	mov	sp,fp
8110ff5c:	df000017 	ldw	fp,0(sp)
8110ff60:	dec00104 	addi	sp,sp,4
8110ff64:	f800283a 	ret

8110ff68 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110ff68:	defffc04 	addi	sp,sp,-16
8110ff6c:	de00012e 	bgeu	sp,et,8110ff74 <_reg_read+0xc>
8110ff70:	003b68fa 	trap	3
8110ff74:	df000315 	stw	fp,12(sp)
8110ff78:	df000304 	addi	fp,sp,12
8110ff7c:	e13ffd15 	stw	r4,-12(fp)
8110ff80:	e17ffe15 	stw	r5,-8(fp)
8110ff84:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110ff88:	e0bffe17 	ldw	r2,-8(fp)
8110ff8c:	1085883a 	add	r2,r2,r2
8110ff90:	1085883a 	add	r2,r2,r2
8110ff94:	1007883a 	mov	r3,r2
8110ff98:	e0bffd17 	ldw	r2,-12(fp)
8110ff9c:	1885883a 	add	r2,r3,r2
8110ffa0:	10c00037 	ldwio	r3,0(r2)
8110ffa4:	e0bfff17 	ldw	r2,-4(fp)
8110ffa8:	10c00015 	stw	r3,0(r2)
	return 1;
8110ffac:	00800044 	movi	r2,1

}
8110ffb0:	e037883a 	mov	sp,fp
8110ffb4:	df000017 	ldw	fp,0(sp)
8110ffb8:	dec00104 	addi	sp,sp,4
8110ffbc:	f800283a 	ret

8110ffc0 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110ffc0:	defffa04 	addi	sp,sp,-24
8110ffc4:	de00012e 	bgeu	sp,et,8110ffcc <_print_codec_status+0xc>
8110ffc8:	003b68fa 	trap	3
8110ffcc:	dfc00515 	stw	ra,20(sp)
8110ffd0:	df000415 	stw	fp,16(sp)
8110ffd4:	df000404 	addi	fp,sp,16
8110ffd8:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110ffdc:	e0bfff17 	ldw	r2,-4(fp)
8110ffe0:	1005d1ba 	srai	r2,r2,6
8110ffe4:	1080004c 	andi	r2,r2,1
8110ffe8:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110ffec:	e0bfff17 	ldw	r2,-4(fp)
8110fff0:	1005d17a 	srai	r2,r2,5
8110fff4:	1080004c 	andi	r2,r2,1
8110fff8:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110fffc:	e0bfff17 	ldw	r2,-4(fp)
81110000:	1005d13a 	srai	r2,r2,4
81110004:	1080004c 	andi	r2,r2,1
81110008:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8111000c:	00e04534 	movhi	r3,33044
81110010:	18c2da04 	addi	r3,r3,2920
81110014:	00a04534 	movhi	r2,33044
81110018:	10b80c04 	addi	r2,r2,-8144
8111001c:	1009883a 	mov	r4,r2
81110020:	008005c4 	movi	r2,23
81110024:	100d883a 	mov	r6,r2
81110028:	200b883a 	mov	r5,r4
8111002c:	1809883a 	mov	r4,r3
81110030:	111297c0 	call	8111297c <memcpy>
	debug(fp, cDebugBuffer);
81110034:	d0a04d17 	ldw	r2,-32460(gp)
81110038:	01604534 	movhi	r5,33044
8111003c:	2942da04 	addi	r5,r5,2920
81110040:	1009883a 	mov	r4,r2
81110044:	111197c0 	call	8111197c <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
81110048:	e0bffc17 	ldw	r2,-16(fp)
8111004c:	10800058 	cmpnei	r2,r2,1
81110050:	1000031e 	bne	r2,zero,81110060 <_print_codec_status+0xa0>
81110054:	00a04534 	movhi	r2,33044
81110058:	10b81204 	addi	r2,r2,-8120
8111005c:	00000206 	br	81110068 <_print_codec_status+0xa8>
81110060:	00a04534 	movhi	r2,33044
81110064:	10b81304 	addi	r2,r2,-8116
81110068:	100d883a 	mov	r6,r2
8111006c:	01604534 	movhi	r5,33044
81110070:	29781404 	addi	r5,r5,-8112
81110074:	01204534 	movhi	r4,33044
81110078:	2102da04 	addi	r4,r4,2920
8111007c:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81110080:	d0a04d17 	ldw	r2,-32460(gp)
81110084:	01604534 	movhi	r5,33044
81110088:	2942da04 	addi	r5,r5,2920
8111008c:	1009883a 	mov	r4,r2
81110090:	111197c0 	call	8111197c <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
81110094:	e0bffd17 	ldw	r2,-12(fp)
81110098:	10800058 	cmpnei	r2,r2,1
8111009c:	1000031e 	bne	r2,zero,811100ac <_print_codec_status+0xec>
811100a0:	00a04534 	movhi	r2,33044
811100a4:	10b81204 	addi	r2,r2,-8120
811100a8:	00000206 	br	811100b4 <_print_codec_status+0xf4>
811100ac:	00a04534 	movhi	r2,33044
811100b0:	10b81304 	addi	r2,r2,-8116
811100b4:	100d883a 	mov	r6,r2
811100b8:	01604534 	movhi	r5,33044
811100bc:	29781a04 	addi	r5,r5,-8088
811100c0:	01204534 	movhi	r4,33044
811100c4:	2102da04 	addi	r4,r4,2920
811100c8:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
811100cc:	d0a04d17 	ldw	r2,-32460(gp)
811100d0:	01604534 	movhi	r5,33044
811100d4:	2942da04 	addi	r5,r5,2920
811100d8:	1009883a 	mov	r4,r2
811100dc:	111197c0 	call	8111197c <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
811100e0:	e0bffe17 	ldw	r2,-8(fp)
811100e4:	10800058 	cmpnei	r2,r2,1
811100e8:	1000031e 	bne	r2,zero,811100f8 <_print_codec_status+0x138>
811100ec:	00a04534 	movhi	r2,33044
811100f0:	10b81204 	addi	r2,r2,-8120
811100f4:	00000206 	br	81110100 <_print_codec_status+0x140>
811100f8:	00a04534 	movhi	r2,33044
811100fc:	10b81304 	addi	r2,r2,-8116
81110100:	100d883a 	mov	r6,r2
81110104:	01604534 	movhi	r5,33044
81110108:	29782004 	addi	r5,r5,-8064
8111010c:	01204534 	movhi	r4,33044
81110110:	2102da04 	addi	r4,r4,2920
81110114:	11130e40 	call	811130e4 <sprintf>
	debug(fp, cDebugBuffer);
81110118:	d0a04d17 	ldw	r2,-32460(gp)
8111011c:	01604534 	movhi	r5,33044
81110120:	2942da04 	addi	r5,r5,2920
81110124:	1009883a 	mov	r4,r2
81110128:	111197c0 	call	8111197c <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8111012c:	00a04534 	movhi	r2,33044
81110130:	1082da04 	addi	r2,r2,2920
81110134:	00c00b44 	movi	r3,45
81110138:	10c00005 	stb	r3,0(r2)
8111013c:	00c00b44 	movi	r3,45
81110140:	10c00045 	stb	r3,1(r2)
81110144:	00c00b44 	movi	r3,45
81110148:	10c00085 	stb	r3,2(r2)
8111014c:	00c00b44 	movi	r3,45
81110150:	10c000c5 	stb	r3,3(r2)
81110154:	00c00b44 	movi	r3,45
81110158:	10c00105 	stb	r3,4(r2)
8111015c:	00c00b44 	movi	r3,45
81110160:	10c00145 	stb	r3,5(r2)
81110164:	00c00b44 	movi	r3,45
81110168:	10c00185 	stb	r3,6(r2)
8111016c:	00c00b44 	movi	r3,45
81110170:	10c001c5 	stb	r3,7(r2)
81110174:	00c00804 	movi	r3,32
81110178:	10c00205 	stb	r3,8(r2)
8111017c:	00c00804 	movi	r3,32
81110180:	10c00245 	stb	r3,9(r2)
81110184:	00c00284 	movi	r3,10
81110188:	10c00285 	stb	r3,10(r2)
8111018c:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
81110190:	d0a04d17 	ldw	r2,-32460(gp)
81110194:	01604534 	movhi	r5,33044
81110198:	2942da04 	addi	r5,r5,2920
8111019c:	1009883a 	mov	r4,r2
811101a0:	111197c0 	call	8111197c <fprintf>
#endif
}
811101a4:	0001883a 	nop
811101a8:	e037883a 	mov	sp,fp
811101ac:	dfc00117 	ldw	ra,4(sp)
811101b0:	df000017 	ldw	fp,0(sp)
811101b4:	dec00204 	addi	sp,sp,8
811101b8:	f800283a 	ret

811101bc <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
811101bc:	defffb04 	addi	sp,sp,-20
811101c0:	de00012e 	bgeu	sp,et,811101c8 <_split_codec_status+0xc>
811101c4:	003b68fa 	trap	3
811101c8:	df000415 	stw	fp,16(sp)
811101cc:	df000404 	addi	fp,sp,16
811101d0:	e13ffc15 	stw	r4,-16(fp)
811101d4:	e17ffd15 	stw	r5,-12(fp)
811101d8:	e1bffe15 	stw	r6,-8(fp)
811101dc:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
811101e0:	e0bffc17 	ldw	r2,-16(fp)
811101e4:	1005d1ba 	srai	r2,r2,6
811101e8:	10c0004c 	andi	r3,r2,1
811101ec:	e0bffd17 	ldw	r2,-12(fp)
811101f0:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
811101f4:	e0bffc17 	ldw	r2,-16(fp)
811101f8:	1005d17a 	srai	r2,r2,5
811101fc:	10c0004c 	andi	r3,r2,1
81110200:	e0bffe17 	ldw	r2,-8(fp)
81110204:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
81110208:	e0bffc17 	ldw	r2,-16(fp)
8111020c:	1005d13a 	srai	r2,r2,4
81110210:	10c0004c 	andi	r3,r2,1
81110214:	e0bfff17 	ldw	r2,-4(fp)
81110218:	10c00015 	stw	r3,0(r2)
}
8111021c:	0001883a 	nop
81110220:	e037883a 	mov	sp,fp
81110224:	df000017 	ldw	fp,0(sp)
81110228:	dec00104 	addi	sp,sp,4
8111022c:	f800283a 	ret

81110230 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
81110230:	defffc04 	addi	sp,sp,-16
81110234:	de00012e 	bgeu	sp,et,8111023c <aatoh+0xc>
81110238:	003b68fa 	trap	3
8111023c:	df000315 	stw	fp,12(sp)
81110240:	df000304 	addi	fp,sp,12
81110244:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
81110248:	e0bfff17 	ldw	r2,-4(fp)
8111024c:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81110250:	e0bffd17 	ldw	r2,-12(fp)
81110254:	10c00003 	ldbu	r3,0(r2)
81110258:	e0bffd17 	ldw	r2,-12(fp)
8111025c:	10800003 	ldbu	r2,0(r2)
81110260:	10803fcc 	andi	r2,r2,255
81110264:	10800eb0 	cmpltui	r2,r2,58
81110268:	1000021e 	bne	r2,zero,81110274 <aatoh+0x44>
8111026c:	00800dc4 	movi	r2,55
81110270:	00000106 	br	81110278 <aatoh+0x48>
81110274:	00800c04 	movi	r2,48
81110278:	1885c83a 	sub	r2,r3,r2
8111027c:	1004913a 	slli	r2,r2,4
81110280:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
81110284:	e0bffd17 	ldw	r2,-12(fp)
81110288:	10800044 	addi	r2,r2,1
8111028c:	10c00003 	ldbu	r3,0(r2)
81110290:	e0bffd17 	ldw	r2,-12(fp)
81110294:	10800044 	addi	r2,r2,1
81110298:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8111029c:	10803fcc 	andi	r2,r2,255
811102a0:	10800eb0 	cmpltui	r2,r2,58
811102a4:	1000021e 	bne	r2,zero,811102b0 <aatoh+0x80>
811102a8:	00800dc4 	movi	r2,55
811102ac:	00000106 	br	811102b4 <aatoh+0x84>
811102b0:	00800c04 	movi	r2,48
811102b4:	1885c83a 	sub	r2,r3,r2
811102b8:	2085883a 	add	r2,r4,r2
811102bc:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
811102c0:	e0bffe03 	ldbu	r2,-8(fp)
}
811102c4:	e037883a 	mov	sp,fp
811102c8:	df000017 	ldw	fp,0(sp)
811102cc:	dec00104 	addi	sp,sp,4
811102d0:	f800283a 	ret

811102d4 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
811102d4:	defffd04 	addi	sp,sp,-12
811102d8:	de00012e 	bgeu	sp,et,811102e0 <Verif_Error+0xc>
811102dc:	003b68fa 	trap	3
811102e0:	dfc00215 	stw	ra,8(sp)
811102e4:	df000115 	stw	fp,4(sp)
811102e8:	df000104 	addi	fp,sp,4
811102ec:	2005883a 	mov	r2,r4
811102f0:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
811102f4:	e0bfff03 	ldbu	r2,-4(fp)
811102f8:	1000091e 	bne	r2,zero,81110320 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
811102fc:	d0a04d17 	ldw	r2,-32460(gp)
81110300:	100f883a 	mov	r7,r2
81110304:	018001c4 	movi	r6,7
81110308:	01400044 	movi	r5,1
8111030c:	01204534 	movhi	r4,33044
81110310:	21382604 	addi	r4,r4,-8040
81110314:	1111f680 	call	81111f68 <fwrite>
#endif
		return 0;
81110318:	0005883a 	mov	r2,zero
8111031c:	00000106 	br	81110324 <Verif_Error+0x50>
	} else
		return 1;
81110320:	00800044 	movi	r2,1
}
81110324:	e037883a 	mov	sp,fp
81110328:	dfc00117 	ldw	ra,4(sp)
8111032c:	df000017 	ldw	fp,0(sp)
81110330:	dec00204 	addi	sp,sp,8
81110334:	f800283a 	ret

81110338 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
81110338:	defffe04 	addi	sp,sp,-8
8111033c:	de00012e 	bgeu	sp,et,81110344 <toInt+0xc>
81110340:	003b68fa 	trap	3
81110344:	df000115 	stw	fp,4(sp)
81110348:	df000104 	addi	fp,sp,4
8111034c:	2005883a 	mov	r2,r4
81110350:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
81110354:	e0bfff03 	ldbu	r2,-4(fp)
81110358:	10bff404 	addi	r2,r2,-48
}
8111035c:	e037883a 	mov	sp,fp
81110360:	df000017 	ldw	fp,0(sp)
81110364:	dec00104 	addi	sp,sp,4
81110368:	f800283a 	ret

8111036c <__divsf3>:
8111036c:	defff504 	addi	sp,sp,-44
81110370:	200cd5fa 	srli	r6,r4,23
81110374:	de00012e 	bgeu	sp,et,8111037c <__divsf3+0x10>
81110378:	003b68fa 	trap	3
8111037c:	dcc00415 	stw	r19,16(sp)
81110380:	2026d7fa 	srli	r19,r4,31
81110384:	00c02034 	movhi	r3,128
81110388:	dd800715 	stw	r22,28(sp)
8111038c:	dd000515 	stw	r20,20(sp)
81110390:	dc800315 	stw	r18,12(sp)
81110394:	18ffffc4 	addi	r3,r3,-1
81110398:	dfc00a15 	stw	ra,40(sp)
8111039c:	df000915 	stw	fp,36(sp)
811103a0:	ddc00815 	stw	r23,32(sp)
811103a4:	dd400615 	stw	r21,24(sp)
811103a8:	dc400215 	stw	r17,8(sp)
811103ac:	dc000115 	stw	r16,4(sp)
811103b0:	35003fcc 	andi	r20,r6,255
811103b4:	1924703a 	and	r18,r3,r4
811103b8:	9d803fcc 	andi	r22,r19,255
811103bc:	a0005226 	beq	r20,zero,81110508 <__divsf3+0x19c>
811103c0:	00803fc4 	movi	r2,255
811103c4:	a0802e26 	beq	r20,r2,81110480 <__divsf3+0x114>
811103c8:	91002034 	orhi	r4,r18,128
811103cc:	202490fa 	slli	r18,r4,3
811103d0:	a53fe044 	addi	r20,r20,-127
811103d4:	0021883a 	mov	r16,zero
811103d8:	002f883a 	mov	r23,zero
811103dc:	280cd5fa 	srli	r6,r5,23
811103e0:	282ad7fa 	srli	r21,r5,31
811103e4:	00c02034 	movhi	r3,128
811103e8:	18ffffc4 	addi	r3,r3,-1
811103ec:	31803fcc 	andi	r6,r6,255
811103f0:	1962703a 	and	r17,r3,r5
811103f4:	af003fcc 	andi	fp,r21,255
811103f8:	30004a26 	beq	r6,zero,81110524 <__divsf3+0x1b8>
811103fc:	00803fc4 	movi	r2,255
81110400:	30804526 	beq	r6,r2,81110518 <__divsf3+0x1ac>
81110404:	89402034 	orhi	r5,r17,128
81110408:	282290fa 	slli	r17,r5,3
8111040c:	31bfe044 	addi	r6,r6,-127
81110410:	000b883a 	mov	r5,zero
81110414:	2c20b03a 	or	r16,r5,r16
81110418:	802090ba 	slli	r16,r16,2
8111041c:	00a04474 	movhi	r2,33041
81110420:	10811004 	addi	r2,r2,1088
81110424:	80a1883a 	add	r16,r16,r2
81110428:	81000017 	ldw	r4,0(r16)
8111042c:	9d46f03a 	xor	r3,r19,r21
81110430:	180f883a 	mov	r7,r3
81110434:	18803fcc 	andi	r2,r3,255
81110438:	a18dc83a 	sub	r6,r20,r6
8111043c:	2000683a 	jmp	r4
81110440:	81110624 	muli	r4,r16,17432
81110444:	811104a8 	cmpgeui	r4,r16,17426
81110448:	81110618 	cmpnei	r4,r16,17432
8111044c:	81110494 	ori	r4,r16,17426
81110450:	81110618 	cmpnei	r4,r16,17432
81110454:	811105f0 	cmpltui	r4,r16,17431
81110458:	81110618 	cmpnei	r4,r16,17432
8111045c:	81110494 	ori	r4,r16,17426
81110460:	811104a8 	cmpgeui	r4,r16,17426
81110464:	811104a8 	cmpgeui	r4,r16,17426
81110468:	811105f0 	cmpltui	r4,r16,17431
8111046c:	81110494 	ori	r4,r16,17426
81110470:	81110704 	addi	r4,r16,17436
81110474:	81110704 	addi	r4,r16,17436
81110478:	81110704 	addi	r4,r16,17436
8111047c:	811106b8 	rdprs	r4,r16,17434
81110480:	9000581e 	bne	r18,zero,811105e4 <__divsf3+0x278>
81110484:	04000204 	movi	r16,8
81110488:	05c00084 	movi	r23,2
8111048c:	003fd306 	br	811103dc <__reset+0xfb0f03dc>
81110490:	0023883a 	mov	r17,zero
81110494:	e02d883a 	mov	r22,fp
81110498:	282f883a 	mov	r23,r5
8111049c:	00800084 	movi	r2,2
811104a0:	b8808f1e 	bne	r23,r2,811106e0 <__divsf3+0x374>
811104a4:	b005883a 	mov	r2,r22
811104a8:	11c0004c 	andi	r7,r2,1
811104ac:	013fffc4 	movi	r4,-1
811104b0:	000d883a 	mov	r6,zero
811104b4:	21003fcc 	andi	r4,r4,255
811104b8:	200895fa 	slli	r4,r4,23
811104bc:	38803fcc 	andi	r2,r7,255
811104c0:	00c02034 	movhi	r3,128
811104c4:	100497fa 	slli	r2,r2,31
811104c8:	18ffffc4 	addi	r3,r3,-1
811104cc:	30c6703a 	and	r3,r6,r3
811104d0:	1906b03a 	or	r3,r3,r4
811104d4:	1884b03a 	or	r2,r3,r2
811104d8:	dfc00a17 	ldw	ra,40(sp)
811104dc:	df000917 	ldw	fp,36(sp)
811104e0:	ddc00817 	ldw	r23,32(sp)
811104e4:	dd800717 	ldw	r22,28(sp)
811104e8:	dd400617 	ldw	r21,24(sp)
811104ec:	dd000517 	ldw	r20,20(sp)
811104f0:	dcc00417 	ldw	r19,16(sp)
811104f4:	dc800317 	ldw	r18,12(sp)
811104f8:	dc400217 	ldw	r17,8(sp)
811104fc:	dc000117 	ldw	r16,4(sp)
81110500:	dec00b04 	addi	sp,sp,44
81110504:	f800283a 	ret
81110508:	90002b1e 	bne	r18,zero,811105b8 <__divsf3+0x24c>
8111050c:	04000104 	movi	r16,4
81110510:	05c00044 	movi	r23,1
81110514:	003fb106 	br	811103dc <__reset+0xfb0f03dc>
81110518:	8800251e 	bne	r17,zero,811105b0 <__divsf3+0x244>
8111051c:	01400084 	movi	r5,2
81110520:	00000206 	br	8111052c <__divsf3+0x1c0>
81110524:	88001a1e 	bne	r17,zero,81110590 <__divsf3+0x224>
81110528:	01400044 	movi	r5,1
8111052c:	8160b03a 	or	r16,r16,r5
81110530:	802090ba 	slli	r16,r16,2
81110534:	00e04474 	movhi	r3,33041
81110538:	18c15404 	addi	r3,r3,1360
8111053c:	80e1883a 	add	r16,r16,r3
81110540:	80c00017 	ldw	r3,0(r16)
81110544:	9d44f03a 	xor	r2,r19,r21
81110548:	a18dc83a 	sub	r6,r20,r6
8111054c:	1800683a 	jmp	r3
81110550:	811104a8 	cmpgeui	r4,r16,17426
81110554:	811104a8 	cmpgeui	r4,r16,17426
81110558:	811106f4 	orhi	r4,r16,17435
8111055c:	81110490 	cmplti	r4,r16,17426
81110560:	811106f4 	orhi	r4,r16,17435
81110564:	811105f0 	cmpltui	r4,r16,17431
81110568:	811106f4 	orhi	r4,r16,17435
8111056c:	81110490 	cmplti	r4,r16,17426
81110570:	811104a8 	cmpgeui	r4,r16,17426
81110574:	811104a8 	cmpgeui	r4,r16,17426
81110578:	811105f0 	cmpltui	r4,r16,17431
8111057c:	81110490 	cmplti	r4,r16,17426
81110580:	81110704 	addi	r4,r16,17436
81110584:	81110704 	addi	r4,r16,17436
81110588:	81110704 	addi	r4,r16,17436
8111058c:	8111071c 	xori	r4,r16,17436
81110590:	8809883a 	mov	r4,r17
81110594:	11117bc0 	call	811117bc <__clzsi2>
81110598:	10fffec4 	addi	r3,r2,-5
8111059c:	10801d84 	addi	r2,r2,118
811105a0:	88e2983a 	sll	r17,r17,r3
811105a4:	008dc83a 	sub	r6,zero,r2
811105a8:	000b883a 	mov	r5,zero
811105ac:	003f9906 	br	81110414 <__reset+0xfb0f0414>
811105b0:	014000c4 	movi	r5,3
811105b4:	003f9706 	br	81110414 <__reset+0xfb0f0414>
811105b8:	9009883a 	mov	r4,r18
811105bc:	d9400015 	stw	r5,0(sp)
811105c0:	11117bc0 	call	811117bc <__clzsi2>
811105c4:	10fffec4 	addi	r3,r2,-5
811105c8:	11801d84 	addi	r6,r2,118
811105cc:	90e4983a 	sll	r18,r18,r3
811105d0:	01a9c83a 	sub	r20,zero,r6
811105d4:	0021883a 	mov	r16,zero
811105d8:	002f883a 	mov	r23,zero
811105dc:	d9400017 	ldw	r5,0(sp)
811105e0:	003f7e06 	br	811103dc <__reset+0xfb0f03dc>
811105e4:	04000304 	movi	r16,12
811105e8:	05c000c4 	movi	r23,3
811105ec:	003f7b06 	br	811103dc <__reset+0xfb0f03dc>
811105f0:	01802034 	movhi	r6,128
811105f4:	000f883a 	mov	r7,zero
811105f8:	31bfffc4 	addi	r6,r6,-1
811105fc:	013fffc4 	movi	r4,-1
81110600:	003fac06 	br	811104b4 <__reset+0xfb0f04b4>
81110604:	01400044 	movi	r5,1
81110608:	2909c83a 	sub	r4,r5,r4
8111060c:	00c006c4 	movi	r3,27
81110610:	19004b0e 	bge	r3,r4,81110740 <__divsf3+0x3d4>
81110614:	114e703a 	and	r7,r2,r5
81110618:	0009883a 	mov	r4,zero
8111061c:	000d883a 	mov	r6,zero
81110620:	003fa406 	br	811104b4 <__reset+0xfb0f04b4>
81110624:	9006917a 	slli	r3,r18,5
81110628:	8822917a 	slli	r17,r17,5
8111062c:	1c40372e 	bgeu	r3,r17,8111070c <__divsf3+0x3a0>
81110630:	31bfffc4 	addi	r6,r6,-1
81110634:	010006c4 	movi	r4,27
81110638:	000b883a 	mov	r5,zero
8111063c:	180f883a 	mov	r7,r3
81110640:	294b883a 	add	r5,r5,r5
81110644:	18c7883a 	add	r3,r3,r3
81110648:	38000116 	blt	r7,zero,81110650 <__divsf3+0x2e4>
8111064c:	1c400236 	bltu	r3,r17,81110658 <__divsf3+0x2ec>
81110650:	1c47c83a 	sub	r3,r3,r17
81110654:	29400054 	ori	r5,r5,1
81110658:	213fffc4 	addi	r4,r4,-1
8111065c:	203ff71e 	bne	r4,zero,8111063c <__reset+0xfb0f063c>
81110660:	1806c03a 	cmpne	r3,r3,zero
81110664:	1962b03a 	or	r17,r3,r5
81110668:	31001fc4 	addi	r4,r6,127
8111066c:	013fe50e 	bge	zero,r4,81110604 <__reset+0xfb0f0604>
81110670:	88c001cc 	andi	r3,r17,7
81110674:	18000426 	beq	r3,zero,81110688 <__divsf3+0x31c>
81110678:	88c003cc 	andi	r3,r17,15
8111067c:	01400104 	movi	r5,4
81110680:	19400126 	beq	r3,r5,81110688 <__divsf3+0x31c>
81110684:	8963883a 	add	r17,r17,r5
81110688:	88c2002c 	andhi	r3,r17,2048
8111068c:	18000426 	beq	r3,zero,811106a0 <__divsf3+0x334>
81110690:	00fe0034 	movhi	r3,63488
81110694:	18ffffc4 	addi	r3,r3,-1
81110698:	31002004 	addi	r4,r6,128
8111069c:	88e2703a 	and	r17,r17,r3
811106a0:	00c03f84 	movi	r3,254
811106a4:	193f8016 	blt	r3,r4,811104a8 <__reset+0xfb0f04a8>
811106a8:	880c91ba 	slli	r6,r17,6
811106ac:	11c0004c 	andi	r7,r2,1
811106b0:	300cd27a 	srli	r6,r6,9
811106b4:	003f7f06 	br	811104b4 <__reset+0xfb0f04b4>
811106b8:	9080102c 	andhi	r2,r18,64
811106bc:	10000226 	beq	r2,zero,811106c8 <__divsf3+0x35c>
811106c0:	8880102c 	andhi	r2,r17,64
811106c4:	10001826 	beq	r2,zero,81110728 <__divsf3+0x3bc>
811106c8:	00802034 	movhi	r2,128
811106cc:	91801034 	orhi	r6,r18,64
811106d0:	10bfffc4 	addi	r2,r2,-1
811106d4:	980f883a 	mov	r7,r19
811106d8:	308c703a 	and	r6,r6,r2
811106dc:	003fc706 	br	811105fc <__reset+0xfb0f05fc>
811106e0:	008000c4 	movi	r2,3
811106e4:	b8802d26 	beq	r23,r2,8111079c <__divsf3+0x430>
811106e8:	00c00044 	movi	r3,1
811106ec:	b005883a 	mov	r2,r22
811106f0:	b8ffdd1e 	bne	r23,r3,81110668 <__reset+0xfb0f0668>
811106f4:	11c0004c 	andi	r7,r2,1
811106f8:	0009883a 	mov	r4,zero
811106fc:	000d883a 	mov	r6,zero
81110700:	003f6c06 	br	811104b4 <__reset+0xfb0f04b4>
81110704:	9023883a 	mov	r17,r18
81110708:	003f6406 	br	8111049c <__reset+0xfb0f049c>
8111070c:	1c47c83a 	sub	r3,r3,r17
81110710:	01000684 	movi	r4,26
81110714:	01400044 	movi	r5,1
81110718:	003fc806 	br	8111063c <__reset+0xfb0f063c>
8111071c:	9080102c 	andhi	r2,r18,64
81110720:	103fe926 	beq	r2,zero,811106c8 <__reset+0xfb0f06c8>
81110724:	0023883a 	mov	r17,zero
81110728:	00802034 	movhi	r2,128
8111072c:	89801034 	orhi	r6,r17,64
81110730:	10bfffc4 	addi	r2,r2,-1
81110734:	a80f883a 	mov	r7,r21
81110738:	308c703a 	and	r6,r6,r2
8111073c:	003faf06 	br	811105fc <__reset+0xfb0f05fc>
81110740:	01c00804 	movi	r7,32
81110744:	390fc83a 	sub	r7,r7,r4
81110748:	89ce983a 	sll	r7,r17,r7
8111074c:	890ad83a 	srl	r5,r17,r4
81110750:	380ec03a 	cmpne	r7,r7,zero
81110754:	29cab03a 	or	r5,r5,r7
81110758:	28c001cc 	andi	r3,r5,7
8111075c:	18000426 	beq	r3,zero,81110770 <__divsf3+0x404>
81110760:	28c003cc 	andi	r3,r5,15
81110764:	01000104 	movi	r4,4
81110768:	19000126 	beq	r3,r4,81110770 <__divsf3+0x404>
8111076c:	290b883a 	add	r5,r5,r4
81110770:	28c1002c 	andhi	r3,r5,1024
81110774:	18000426 	beq	r3,zero,81110788 <__divsf3+0x41c>
81110778:	11c0004c 	andi	r7,r2,1
8111077c:	01000044 	movi	r4,1
81110780:	000d883a 	mov	r6,zero
81110784:	003f4b06 	br	811104b4 <__reset+0xfb0f04b4>
81110788:	280a91ba 	slli	r5,r5,6
8111078c:	11c0004c 	andi	r7,r2,1
81110790:	0009883a 	mov	r4,zero
81110794:	280cd27a 	srli	r6,r5,9
81110798:	003f4606 	br	811104b4 <__reset+0xfb0f04b4>
8111079c:	00802034 	movhi	r2,128
811107a0:	89801034 	orhi	r6,r17,64
811107a4:	10bfffc4 	addi	r2,r2,-1
811107a8:	b00f883a 	mov	r7,r22
811107ac:	308c703a 	and	r6,r6,r2
811107b0:	003f9206 	br	811105fc <__reset+0xfb0f05fc>

811107b4 <__mulsf3>:
811107b4:	defff504 	addi	sp,sp,-44
811107b8:	de00012e 	bgeu	sp,et,811107c0 <__mulsf3+0xc>
811107bc:	003b68fa 	trap	3
811107c0:	dc000115 	stw	r16,4(sp)
811107c4:	2020d5fa 	srli	r16,r4,23
811107c8:	dd400615 	stw	r21,24(sp)
811107cc:	202ad7fa 	srli	r21,r4,31
811107d0:	dc800315 	stw	r18,12(sp)
811107d4:	04802034 	movhi	r18,128
811107d8:	df000915 	stw	fp,36(sp)
811107dc:	dd000515 	stw	r20,20(sp)
811107e0:	94bfffc4 	addi	r18,r18,-1
811107e4:	dfc00a15 	stw	ra,40(sp)
811107e8:	ddc00815 	stw	r23,32(sp)
811107ec:	dd800715 	stw	r22,28(sp)
811107f0:	dcc00415 	stw	r19,16(sp)
811107f4:	dc400215 	stw	r17,8(sp)
811107f8:	84003fcc 	andi	r16,r16,255
811107fc:	9124703a 	and	r18,r18,r4
81110800:	a829883a 	mov	r20,r21
81110804:	af003fcc 	andi	fp,r21,255
81110808:	80005426 	beq	r16,zero,8111095c <__mulsf3+0x1a8>
8111080c:	00803fc4 	movi	r2,255
81110810:	80802f26 	beq	r16,r2,811108d0 <__mulsf3+0x11c>
81110814:	91002034 	orhi	r4,r18,128
81110818:	202490fa 	slli	r18,r4,3
8111081c:	843fe044 	addi	r16,r16,-127
81110820:	0023883a 	mov	r17,zero
81110824:	002f883a 	mov	r23,zero
81110828:	2804d5fa 	srli	r2,r5,23
8111082c:	282cd7fa 	srli	r22,r5,31
81110830:	01002034 	movhi	r4,128
81110834:	213fffc4 	addi	r4,r4,-1
81110838:	10803fcc 	andi	r2,r2,255
8111083c:	2166703a 	and	r19,r4,r5
81110840:	b1803fcc 	andi	r6,r22,255
81110844:	10004c26 	beq	r2,zero,81110978 <__mulsf3+0x1c4>
81110848:	00c03fc4 	movi	r3,255
8111084c:	10c04726 	beq	r2,r3,8111096c <__mulsf3+0x1b8>
81110850:	99002034 	orhi	r4,r19,128
81110854:	202690fa 	slli	r19,r4,3
81110858:	10bfe044 	addi	r2,r2,-127
8111085c:	0007883a 	mov	r3,zero
81110860:	80a1883a 	add	r16,r16,r2
81110864:	010003c4 	movi	r4,15
81110868:	1c44b03a 	or	r2,r3,r17
8111086c:	b56af03a 	xor	r21,r22,r21
81110870:	81c00044 	addi	r7,r16,1
81110874:	20806b36 	bltu	r4,r2,81110a24 <__mulsf3+0x270>
81110878:	100490ba 	slli	r2,r2,2
8111087c:	01204474 	movhi	r4,33041
81110880:	21022404 	addi	r4,r4,2192
81110884:	1105883a 	add	r2,r2,r4
81110888:	10800017 	ldw	r2,0(r2)
8111088c:	1000683a 	jmp	r2
81110890:	81110a24 	muli	r4,r16,17448
81110894:	811108e4 	muli	r4,r16,17443
81110898:	811108e4 	muli	r4,r16,17443
8111089c:	811108e0 	cmpeqi	r4,r16,17443
811108a0:	81110a08 	cmpgei	r4,r16,17448
811108a4:	81110a08 	cmpgei	r4,r16,17448
811108a8:	811109f4 	orhi	r4,r16,17447
811108ac:	811108e0 	cmpeqi	r4,r16,17443
811108b0:	81110a08 	cmpgei	r4,r16,17448
811108b4:	811109f4 	orhi	r4,r16,17447
811108b8:	81110a08 	cmpgei	r4,r16,17448
811108bc:	811108e0 	cmpeqi	r4,r16,17443
811108c0:	81110a14 	ori	r4,r16,17448
811108c4:	81110a14 	ori	r4,r16,17448
811108c8:	81110a14 	ori	r4,r16,17448
811108cc:	81110af0 	cmpltui	r4,r16,17451
811108d0:	90003b1e 	bne	r18,zero,811109c0 <__mulsf3+0x20c>
811108d4:	04400204 	movi	r17,8
811108d8:	05c00084 	movi	r23,2
811108dc:	003fd206 	br	81110828 <__reset+0xfb0f0828>
811108e0:	302b883a 	mov	r21,r6
811108e4:	00800084 	movi	r2,2
811108e8:	18802626 	beq	r3,r2,81110984 <__mulsf3+0x1d0>
811108ec:	008000c4 	movi	r2,3
811108f0:	1880ab26 	beq	r3,r2,81110ba0 <__mulsf3+0x3ec>
811108f4:	00800044 	movi	r2,1
811108f8:	1880a21e 	bne	r3,r2,81110b84 <__mulsf3+0x3d0>
811108fc:	a829883a 	mov	r20,r21
81110900:	0007883a 	mov	r3,zero
81110904:	0009883a 	mov	r4,zero
81110908:	18803fcc 	andi	r2,r3,255
8111090c:	100695fa 	slli	r3,r2,23
81110910:	a0803fcc 	andi	r2,r20,255
81110914:	100a97fa 	slli	r5,r2,31
81110918:	00802034 	movhi	r2,128
8111091c:	10bfffc4 	addi	r2,r2,-1
81110920:	2084703a 	and	r2,r4,r2
81110924:	10c4b03a 	or	r2,r2,r3
81110928:	1144b03a 	or	r2,r2,r5
8111092c:	dfc00a17 	ldw	ra,40(sp)
81110930:	df000917 	ldw	fp,36(sp)
81110934:	ddc00817 	ldw	r23,32(sp)
81110938:	dd800717 	ldw	r22,28(sp)
8111093c:	dd400617 	ldw	r21,24(sp)
81110940:	dd000517 	ldw	r20,20(sp)
81110944:	dcc00417 	ldw	r19,16(sp)
81110948:	dc800317 	ldw	r18,12(sp)
8111094c:	dc400217 	ldw	r17,8(sp)
81110950:	dc000117 	ldw	r16,4(sp)
81110954:	dec00b04 	addi	sp,sp,44
81110958:	f800283a 	ret
8111095c:	90000d1e 	bne	r18,zero,81110994 <__mulsf3+0x1e0>
81110960:	04400104 	movi	r17,4
81110964:	05c00044 	movi	r23,1
81110968:	003faf06 	br	81110828 <__reset+0xfb0f0828>
8111096c:	9806c03a 	cmpne	r3,r19,zero
81110970:	18c00084 	addi	r3,r3,2
81110974:	003fba06 	br	81110860 <__reset+0xfb0f0860>
81110978:	9800141e 	bne	r19,zero,811109cc <__mulsf3+0x218>
8111097c:	00c00044 	movi	r3,1
81110980:	003fb706 	br	81110860 <__reset+0xfb0f0860>
81110984:	a829883a 	mov	r20,r21
81110988:	00ffffc4 	movi	r3,-1
8111098c:	0009883a 	mov	r4,zero
81110990:	003fdd06 	br	81110908 <__reset+0xfb0f0908>
81110994:	9009883a 	mov	r4,r18
81110998:	d9400015 	stw	r5,0(sp)
8111099c:	11117bc0 	call	811117bc <__clzsi2>
811109a0:	10fffec4 	addi	r3,r2,-5
811109a4:	10801d84 	addi	r2,r2,118
811109a8:	90e4983a 	sll	r18,r18,r3
811109ac:	00a1c83a 	sub	r16,zero,r2
811109b0:	0023883a 	mov	r17,zero
811109b4:	002f883a 	mov	r23,zero
811109b8:	d9400017 	ldw	r5,0(sp)
811109bc:	003f9a06 	br	81110828 <__reset+0xfb0f0828>
811109c0:	04400304 	movi	r17,12
811109c4:	05c000c4 	movi	r23,3
811109c8:	003f9706 	br	81110828 <__reset+0xfb0f0828>
811109cc:	9809883a 	mov	r4,r19
811109d0:	d9800015 	stw	r6,0(sp)
811109d4:	11117bc0 	call	811117bc <__clzsi2>
811109d8:	10fffec4 	addi	r3,r2,-5
811109dc:	10801d84 	addi	r2,r2,118
811109e0:	98e6983a 	sll	r19,r19,r3
811109e4:	0085c83a 	sub	r2,zero,r2
811109e8:	0007883a 	mov	r3,zero
811109ec:	d9800017 	ldw	r6,0(sp)
811109f0:	003f9b06 	br	81110860 <__reset+0xfb0f0860>
811109f4:	01002034 	movhi	r4,128
811109f8:	0029883a 	mov	r20,zero
811109fc:	213fffc4 	addi	r4,r4,-1
81110a00:	00ffffc4 	movi	r3,-1
81110a04:	003fc006 	br	81110908 <__reset+0xfb0f0908>
81110a08:	9027883a 	mov	r19,r18
81110a0c:	b807883a 	mov	r3,r23
81110a10:	003fb406 	br	811108e4 <__reset+0xfb0f08e4>
81110a14:	9027883a 	mov	r19,r18
81110a18:	e02b883a 	mov	r21,fp
81110a1c:	b807883a 	mov	r3,r23
81110a20:	003fb006 	br	811108e4 <__reset+0xfb0f08e4>
81110a24:	9004d43a 	srli	r2,r18,16
81110a28:	9810d43a 	srli	r8,r19,16
81110a2c:	94bfffcc 	andi	r18,r18,65535
81110a30:	993fffcc 	andi	r4,r19,65535
81110a34:	910d383a 	mul	r6,r18,r4
81110a38:	20a7383a 	mul	r19,r4,r2
81110a3c:	9225383a 	mul	r18,r18,r8
81110a40:	3006d43a 	srli	r3,r6,16
81110a44:	1211383a 	mul	r8,r2,r8
81110a48:	94e5883a 	add	r18,r18,r19
81110a4c:	1c87883a 	add	r3,r3,r18
81110a50:	1cc0022e 	bgeu	r3,r19,81110a5c <__mulsf3+0x2a8>
81110a54:	00800074 	movhi	r2,1
81110a58:	4091883a 	add	r8,r8,r2
81110a5c:	1804943a 	slli	r2,r3,16
81110a60:	31bfffcc 	andi	r6,r6,65535
81110a64:	1806d43a 	srli	r3,r3,16
81110a68:	1185883a 	add	r2,r2,r6
81110a6c:	102691ba 	slli	r19,r2,6
81110a70:	1a07883a 	add	r3,r3,r8
81110a74:	1004d6ba 	srli	r2,r2,26
81110a78:	180891ba 	slli	r4,r3,6
81110a7c:	9826c03a 	cmpne	r19,r19,zero
81110a80:	9884b03a 	or	r2,r19,r2
81110a84:	1126b03a 	or	r19,r2,r4
81110a88:	9882002c 	andhi	r2,r19,2048
81110a8c:	10000426 	beq	r2,zero,81110aa0 <__mulsf3+0x2ec>
81110a90:	9804d07a 	srli	r2,r19,1
81110a94:	9900004c 	andi	r4,r19,1
81110a98:	3821883a 	mov	r16,r7
81110a9c:	1126b03a 	or	r19,r2,r4
81110aa0:	80c01fc4 	addi	r3,r16,127
81110aa4:	00c0210e 	bge	zero,r3,81110b2c <__mulsf3+0x378>
81110aa8:	988001cc 	andi	r2,r19,7
81110aac:	10000426 	beq	r2,zero,81110ac0 <__mulsf3+0x30c>
81110ab0:	988003cc 	andi	r2,r19,15
81110ab4:	01000104 	movi	r4,4
81110ab8:	11000126 	beq	r2,r4,81110ac0 <__mulsf3+0x30c>
81110abc:	9927883a 	add	r19,r19,r4
81110ac0:	9882002c 	andhi	r2,r19,2048
81110ac4:	10000426 	beq	r2,zero,81110ad8 <__mulsf3+0x324>
81110ac8:	00be0034 	movhi	r2,63488
81110acc:	10bfffc4 	addi	r2,r2,-1
81110ad0:	80c02004 	addi	r3,r16,128
81110ad4:	98a6703a 	and	r19,r19,r2
81110ad8:	00803f84 	movi	r2,254
81110adc:	10ffa916 	blt	r2,r3,81110984 <__reset+0xfb0f0984>
81110ae0:	980891ba 	slli	r4,r19,6
81110ae4:	a829883a 	mov	r20,r21
81110ae8:	2008d27a 	srli	r4,r4,9
81110aec:	003f8606 	br	81110908 <__reset+0xfb0f0908>
81110af0:	9080102c 	andhi	r2,r18,64
81110af4:	10000826 	beq	r2,zero,81110b18 <__mulsf3+0x364>
81110af8:	9880102c 	andhi	r2,r19,64
81110afc:	1000061e 	bne	r2,zero,81110b18 <__mulsf3+0x364>
81110b00:	00802034 	movhi	r2,128
81110b04:	99001034 	orhi	r4,r19,64
81110b08:	10bfffc4 	addi	r2,r2,-1
81110b0c:	b029883a 	mov	r20,r22
81110b10:	2088703a 	and	r4,r4,r2
81110b14:	003fba06 	br	81110a00 <__reset+0xfb0f0a00>
81110b18:	00802034 	movhi	r2,128
81110b1c:	91001034 	orhi	r4,r18,64
81110b20:	10bfffc4 	addi	r2,r2,-1
81110b24:	2088703a 	and	r4,r4,r2
81110b28:	003fb506 	br	81110a00 <__reset+0xfb0f0a00>
81110b2c:	00800044 	movi	r2,1
81110b30:	10c7c83a 	sub	r3,r2,r3
81110b34:	008006c4 	movi	r2,27
81110b38:	10ff7016 	blt	r2,r3,811108fc <__reset+0xfb0f08fc>
81110b3c:	00800804 	movi	r2,32
81110b40:	10c5c83a 	sub	r2,r2,r3
81110b44:	9884983a 	sll	r2,r19,r2
81110b48:	98c6d83a 	srl	r3,r19,r3
81110b4c:	1004c03a 	cmpne	r2,r2,zero
81110b50:	1884b03a 	or	r2,r3,r2
81110b54:	10c001cc 	andi	r3,r2,7
81110b58:	18000426 	beq	r3,zero,81110b6c <__mulsf3+0x3b8>
81110b5c:	10c003cc 	andi	r3,r2,15
81110b60:	01000104 	movi	r4,4
81110b64:	19000126 	beq	r3,r4,81110b6c <__mulsf3+0x3b8>
81110b68:	1105883a 	add	r2,r2,r4
81110b6c:	10c1002c 	andhi	r3,r2,1024
81110b70:	18000626 	beq	r3,zero,81110b8c <__mulsf3+0x3d8>
81110b74:	a829883a 	mov	r20,r21
81110b78:	00c00044 	movi	r3,1
81110b7c:	0009883a 	mov	r4,zero
81110b80:	003f6106 	br	81110908 <__reset+0xfb0f0908>
81110b84:	3821883a 	mov	r16,r7
81110b88:	003fc506 	br	81110aa0 <__reset+0xfb0f0aa0>
81110b8c:	100491ba 	slli	r2,r2,6
81110b90:	a829883a 	mov	r20,r21
81110b94:	0007883a 	mov	r3,zero
81110b98:	1008d27a 	srli	r4,r2,9
81110b9c:	003f5a06 	br	81110908 <__reset+0xfb0f0908>
81110ba0:	00802034 	movhi	r2,128
81110ba4:	99001034 	orhi	r4,r19,64
81110ba8:	10bfffc4 	addi	r2,r2,-1
81110bac:	a829883a 	mov	r20,r21
81110bb0:	2088703a 	and	r4,r4,r2
81110bb4:	003f9206 	br	81110a00 <__reset+0xfb0f0a00>

81110bb8 <__floatsisf>:
81110bb8:	defffd04 	addi	sp,sp,-12
81110bbc:	de00012e 	bgeu	sp,et,81110bc4 <__floatsisf+0xc>
81110bc0:	003b68fa 	trap	3
81110bc4:	dfc00215 	stw	ra,8(sp)
81110bc8:	dc400115 	stw	r17,4(sp)
81110bcc:	dc000015 	stw	r16,0(sp)
81110bd0:	20003526 	beq	r4,zero,81110ca8 <__floatsisf+0xf0>
81110bd4:	2021883a 	mov	r16,r4
81110bd8:	2022d7fa 	srli	r17,r4,31
81110bdc:	20003616 	blt	r4,zero,81110cb8 <__floatsisf+0x100>
81110be0:	8009883a 	mov	r4,r16
81110be4:	11117bc0 	call	811117bc <__clzsi2>
81110be8:	00c02784 	movi	r3,158
81110bec:	1887c83a 	sub	r3,r3,r2
81110bf0:	01002584 	movi	r4,150
81110bf4:	20c01416 	blt	r4,r3,81110c48 <__floatsisf+0x90>
81110bf8:	20c9c83a 	sub	r4,r4,r3
81110bfc:	8120983a 	sll	r16,r16,r4
81110c00:	00802034 	movhi	r2,128
81110c04:	10bfffc4 	addi	r2,r2,-1
81110c08:	8809883a 	mov	r4,r17
81110c0c:	80a0703a 	and	r16,r16,r2
81110c10:	18803fcc 	andi	r2,r3,255
81110c14:	100695fa 	slli	r3,r2,23
81110c18:	20803fcc 	andi	r2,r4,255
81110c1c:	100897fa 	slli	r4,r2,31
81110c20:	00802034 	movhi	r2,128
81110c24:	10bfffc4 	addi	r2,r2,-1
81110c28:	8084703a 	and	r2,r16,r2
81110c2c:	10c4b03a 	or	r2,r2,r3
81110c30:	1104b03a 	or	r2,r2,r4
81110c34:	dfc00217 	ldw	ra,8(sp)
81110c38:	dc400117 	ldw	r17,4(sp)
81110c3c:	dc000017 	ldw	r16,0(sp)
81110c40:	dec00304 	addi	sp,sp,12
81110c44:	f800283a 	ret
81110c48:	01002644 	movi	r4,153
81110c4c:	20c01c16 	blt	r4,r3,81110cc0 <__floatsisf+0x108>
81110c50:	20c9c83a 	sub	r4,r4,r3
81110c54:	8120983a 	sll	r16,r16,r4
81110c58:	013f0034 	movhi	r4,64512
81110c5c:	213fffc4 	addi	r4,r4,-1
81110c60:	814001cc 	andi	r5,r16,7
81110c64:	8108703a 	and	r4,r16,r4
81110c68:	28000426 	beq	r5,zero,81110c7c <__floatsisf+0xc4>
81110c6c:	840003cc 	andi	r16,r16,15
81110c70:	01400104 	movi	r5,4
81110c74:	81400126 	beq	r16,r5,81110c7c <__floatsisf+0xc4>
81110c78:	2149883a 	add	r4,r4,r5
81110c7c:	2141002c 	andhi	r5,r4,1024
81110c80:	28000526 	beq	r5,zero,81110c98 <__floatsisf+0xe0>
81110c84:	00c027c4 	movi	r3,159
81110c88:	1887c83a 	sub	r3,r3,r2
81110c8c:	00bf0034 	movhi	r2,64512
81110c90:	10bfffc4 	addi	r2,r2,-1
81110c94:	2088703a 	and	r4,r4,r2
81110c98:	202091ba 	slli	r16,r4,6
81110c9c:	8809883a 	mov	r4,r17
81110ca0:	8020d27a 	srli	r16,r16,9
81110ca4:	003fda06 	br	81110c10 <__reset+0xfb0f0c10>
81110ca8:	0009883a 	mov	r4,zero
81110cac:	0007883a 	mov	r3,zero
81110cb0:	0021883a 	mov	r16,zero
81110cb4:	003fd606 	br	81110c10 <__reset+0xfb0f0c10>
81110cb8:	0121c83a 	sub	r16,zero,r4
81110cbc:	003fc806 	br	81110be0 <__reset+0xfb0f0be0>
81110cc0:	01002e44 	movi	r4,185
81110cc4:	20c9c83a 	sub	r4,r4,r3
81110cc8:	01400144 	movi	r5,5
81110ccc:	8108983a 	sll	r4,r16,r4
81110cd0:	288bc83a 	sub	r5,r5,r2
81110cd4:	8160d83a 	srl	r16,r16,r5
81110cd8:	2008c03a 	cmpne	r4,r4,zero
81110cdc:	8120b03a 	or	r16,r16,r4
81110ce0:	003fdd06 	br	81110c58 <__reset+0xfb0f0c58>

81110ce4 <__floatunsisf>:
81110ce4:	defffe04 	addi	sp,sp,-8
81110ce8:	de00012e 	bgeu	sp,et,81110cf0 <__floatunsisf+0xc>
81110cec:	003b68fa 	trap	3
81110cf0:	dfc00115 	stw	ra,4(sp)
81110cf4:	dc000015 	stw	r16,0(sp)
81110cf8:	20002c26 	beq	r4,zero,81110dac <__floatunsisf+0xc8>
81110cfc:	2021883a 	mov	r16,r4
81110d00:	11117bc0 	call	811117bc <__clzsi2>
81110d04:	00c02784 	movi	r3,158
81110d08:	1887c83a 	sub	r3,r3,r2
81110d0c:	01002584 	movi	r4,150
81110d10:	20c00f16 	blt	r4,r3,81110d50 <__floatunsisf+0x6c>
81110d14:	20c9c83a 	sub	r4,r4,r3
81110d18:	8108983a 	sll	r4,r16,r4
81110d1c:	00802034 	movhi	r2,128
81110d20:	10bfffc4 	addi	r2,r2,-1
81110d24:	2088703a 	and	r4,r4,r2
81110d28:	18803fcc 	andi	r2,r3,255
81110d2c:	100695fa 	slli	r3,r2,23
81110d30:	00802034 	movhi	r2,128
81110d34:	10bfffc4 	addi	r2,r2,-1
81110d38:	2084703a 	and	r2,r4,r2
81110d3c:	10c4b03a 	or	r2,r2,r3
81110d40:	dfc00117 	ldw	ra,4(sp)
81110d44:	dc000017 	ldw	r16,0(sp)
81110d48:	dec00204 	addi	sp,sp,8
81110d4c:	f800283a 	ret
81110d50:	01002644 	movi	r4,153
81110d54:	20c01816 	blt	r4,r3,81110db8 <__floatunsisf+0xd4>
81110d58:	20c9c83a 	sub	r4,r4,r3
81110d5c:	8108983a 	sll	r4,r16,r4
81110d60:	017f0034 	movhi	r5,64512
81110d64:	297fffc4 	addi	r5,r5,-1
81110d68:	218001cc 	andi	r6,r4,7
81110d6c:	214a703a 	and	r5,r4,r5
81110d70:	30000426 	beq	r6,zero,81110d84 <__floatunsisf+0xa0>
81110d74:	210003cc 	andi	r4,r4,15
81110d78:	01800104 	movi	r6,4
81110d7c:	21800126 	beq	r4,r6,81110d84 <__floatunsisf+0xa0>
81110d80:	298b883a 	add	r5,r5,r6
81110d84:	2901002c 	andhi	r4,r5,1024
81110d88:	20000526 	beq	r4,zero,81110da0 <__floatunsisf+0xbc>
81110d8c:	00c027c4 	movi	r3,159
81110d90:	1887c83a 	sub	r3,r3,r2
81110d94:	00bf0034 	movhi	r2,64512
81110d98:	10bfffc4 	addi	r2,r2,-1
81110d9c:	288a703a 	and	r5,r5,r2
81110da0:	280891ba 	slli	r4,r5,6
81110da4:	2008d27a 	srli	r4,r4,9
81110da8:	003fdf06 	br	81110d28 <__reset+0xfb0f0d28>
81110dac:	0007883a 	mov	r3,zero
81110db0:	0009883a 	mov	r4,zero
81110db4:	003fdc06 	br	81110d28 <__reset+0xfb0f0d28>
81110db8:	01402e44 	movi	r5,185
81110dbc:	28cbc83a 	sub	r5,r5,r3
81110dc0:	01000144 	movi	r4,5
81110dc4:	2089c83a 	sub	r4,r4,r2
81110dc8:	814a983a 	sll	r5,r16,r5
81110dcc:	8108d83a 	srl	r4,r16,r4
81110dd0:	2820c03a 	cmpne	r16,r5,zero
81110dd4:	2408b03a 	or	r4,r4,r16
81110dd8:	003fe106 	br	81110d60 <__reset+0xfb0f0d60>

81110ddc <__muldf3>:
81110ddc:	defff304 	addi	sp,sp,-52
81110de0:	2804d53a 	srli	r2,r5,20
81110de4:	de00012e 	bgeu	sp,et,81110dec <__muldf3+0x10>
81110de8:	003b68fa 	trap	3
81110dec:	dd800915 	stw	r22,36(sp)
81110df0:	282cd7fa 	srli	r22,r5,31
81110df4:	dc000315 	stw	r16,12(sp)
81110df8:	04000434 	movhi	r16,16
81110dfc:	dd400815 	stw	r21,32(sp)
81110e00:	dc800515 	stw	r18,20(sp)
81110e04:	843fffc4 	addi	r16,r16,-1
81110e08:	dfc00c15 	stw	ra,48(sp)
81110e0c:	df000b15 	stw	fp,44(sp)
81110e10:	ddc00a15 	stw	r23,40(sp)
81110e14:	dd000715 	stw	r20,28(sp)
81110e18:	dcc00615 	stw	r19,24(sp)
81110e1c:	dc400415 	stw	r17,16(sp)
81110e20:	1481ffcc 	andi	r18,r2,2047
81110e24:	2c20703a 	and	r16,r5,r16
81110e28:	b02b883a 	mov	r21,r22
81110e2c:	b2403fcc 	andi	r9,r22,255
81110e30:	90006026 	beq	r18,zero,81110fb4 <__muldf3+0x1d8>
81110e34:	0081ffc4 	movi	r2,2047
81110e38:	2029883a 	mov	r20,r4
81110e3c:	90803626 	beq	r18,r2,81110f18 <__muldf3+0x13c>
81110e40:	80800434 	orhi	r2,r16,16
81110e44:	100490fa 	slli	r2,r2,3
81110e48:	2020d77a 	srli	r16,r4,29
81110e4c:	202890fa 	slli	r20,r4,3
81110e50:	94bf0044 	addi	r18,r18,-1023
81110e54:	80a0b03a 	or	r16,r16,r2
81110e58:	0027883a 	mov	r19,zero
81110e5c:	0039883a 	mov	fp,zero
81110e60:	3804d53a 	srli	r2,r7,20
81110e64:	382ed7fa 	srli	r23,r7,31
81110e68:	04400434 	movhi	r17,16
81110e6c:	8c7fffc4 	addi	r17,r17,-1
81110e70:	1081ffcc 	andi	r2,r2,2047
81110e74:	3011883a 	mov	r8,r6
81110e78:	3c62703a 	and	r17,r7,r17
81110e7c:	ba803fcc 	andi	r10,r23,255
81110e80:	10006d26 	beq	r2,zero,81111038 <__muldf3+0x25c>
81110e84:	00c1ffc4 	movi	r3,2047
81110e88:	10c06526 	beq	r2,r3,81111020 <__muldf3+0x244>
81110e8c:	88c00434 	orhi	r3,r17,16
81110e90:	180690fa 	slli	r3,r3,3
81110e94:	3022d77a 	srli	r17,r6,29
81110e98:	301090fa 	slli	r8,r6,3
81110e9c:	10bf0044 	addi	r2,r2,-1023
81110ea0:	88e2b03a 	or	r17,r17,r3
81110ea4:	000b883a 	mov	r5,zero
81110ea8:	9085883a 	add	r2,r18,r2
81110eac:	2cc8b03a 	or	r4,r5,r19
81110eb0:	00c003c4 	movi	r3,15
81110eb4:	bdacf03a 	xor	r22,r23,r22
81110eb8:	12c00044 	addi	r11,r2,1
81110ebc:	19009936 	bltu	r3,r4,81111124 <__muldf3+0x348>
81110ec0:	200890ba 	slli	r4,r4,2
81110ec4:	00e04474 	movhi	r3,33041
81110ec8:	18c3b604 	addi	r3,r3,3800
81110ecc:	20c9883a 	add	r4,r4,r3
81110ed0:	20c00017 	ldw	r3,0(r4)
81110ed4:	1800683a 	jmp	r3
81110ed8:	81111124 	muli	r4,r16,17476
81110edc:	81110f38 	rdprs	r4,r16,17468
81110ee0:	81110f38 	rdprs	r4,r16,17468
81110ee4:	81110f34 	orhi	r4,r16,17468
81110ee8:	81111100 	call	88111110 <__reset+0x20f1110>
81110eec:	81111100 	call	88111110 <__reset+0x20f1110>
81110ef0:	811110e8 	cmpgeui	r4,r16,17475
81110ef4:	81110f34 	orhi	r4,r16,17468
81110ef8:	81111100 	call	88111110 <__reset+0x20f1110>
81110efc:	811110e8 	cmpgeui	r4,r16,17475
81110f00:	81111100 	call	88111110 <__reset+0x20f1110>
81110f04:	81110f34 	orhi	r4,r16,17468
81110f08:	81111110 	cmplti	r4,r16,17476
81110f0c:	81111110 	cmplti	r4,r16,17476
81110f10:	81111110 	cmplti	r4,r16,17476
81110f14:	8111132c 	andhi	r4,r16,17484
81110f18:	2404b03a 	or	r2,r4,r16
81110f1c:	10006f1e 	bne	r2,zero,811110dc <__muldf3+0x300>
81110f20:	04c00204 	movi	r19,8
81110f24:	0021883a 	mov	r16,zero
81110f28:	0029883a 	mov	r20,zero
81110f2c:	07000084 	movi	fp,2
81110f30:	003fcb06 	br	81110e60 <__reset+0xfb0f0e60>
81110f34:	502d883a 	mov	r22,r10
81110f38:	00800084 	movi	r2,2
81110f3c:	28805726 	beq	r5,r2,8111109c <__muldf3+0x2c0>
81110f40:	008000c4 	movi	r2,3
81110f44:	28816626 	beq	r5,r2,811114e0 <__muldf3+0x704>
81110f48:	00800044 	movi	r2,1
81110f4c:	2881411e 	bne	r5,r2,81111454 <__muldf3+0x678>
81110f50:	b02b883a 	mov	r21,r22
81110f54:	0005883a 	mov	r2,zero
81110f58:	000b883a 	mov	r5,zero
81110f5c:	0029883a 	mov	r20,zero
81110f60:	1004953a 	slli	r2,r2,20
81110f64:	a8c03fcc 	andi	r3,r21,255
81110f68:	04400434 	movhi	r17,16
81110f6c:	8c7fffc4 	addi	r17,r17,-1
81110f70:	180697fa 	slli	r3,r3,31
81110f74:	2c4a703a 	and	r5,r5,r17
81110f78:	288ab03a 	or	r5,r5,r2
81110f7c:	28c6b03a 	or	r3,r5,r3
81110f80:	a005883a 	mov	r2,r20
81110f84:	dfc00c17 	ldw	ra,48(sp)
81110f88:	df000b17 	ldw	fp,44(sp)
81110f8c:	ddc00a17 	ldw	r23,40(sp)
81110f90:	dd800917 	ldw	r22,36(sp)
81110f94:	dd400817 	ldw	r21,32(sp)
81110f98:	dd000717 	ldw	r20,28(sp)
81110f9c:	dcc00617 	ldw	r19,24(sp)
81110fa0:	dc800517 	ldw	r18,20(sp)
81110fa4:	dc400417 	ldw	r17,16(sp)
81110fa8:	dc000317 	ldw	r16,12(sp)
81110fac:	dec00d04 	addi	sp,sp,52
81110fb0:	f800283a 	ret
81110fb4:	2404b03a 	or	r2,r4,r16
81110fb8:	2027883a 	mov	r19,r4
81110fbc:	10004226 	beq	r2,zero,811110c8 <__muldf3+0x2ec>
81110fc0:	8000fc26 	beq	r16,zero,811113b4 <__muldf3+0x5d8>
81110fc4:	8009883a 	mov	r4,r16
81110fc8:	d9800215 	stw	r6,8(sp)
81110fcc:	d9c00015 	stw	r7,0(sp)
81110fd0:	da400115 	stw	r9,4(sp)
81110fd4:	11117bc0 	call	811117bc <__clzsi2>
81110fd8:	d9800217 	ldw	r6,8(sp)
81110fdc:	d9c00017 	ldw	r7,0(sp)
81110fe0:	da400117 	ldw	r9,4(sp)
81110fe4:	113ffd44 	addi	r4,r2,-11
81110fe8:	00c00704 	movi	r3,28
81110fec:	1900ed16 	blt	r3,r4,811113a4 <__muldf3+0x5c8>
81110ff0:	00c00744 	movi	r3,29
81110ff4:	147ffe04 	addi	r17,r2,-8
81110ff8:	1907c83a 	sub	r3,r3,r4
81110ffc:	8460983a 	sll	r16,r16,r17
81111000:	98c6d83a 	srl	r3,r19,r3
81111004:	9c68983a 	sll	r20,r19,r17
81111008:	1c20b03a 	or	r16,r3,r16
8111100c:	1080fcc4 	addi	r2,r2,1011
81111010:	00a5c83a 	sub	r18,zero,r2
81111014:	0027883a 	mov	r19,zero
81111018:	0039883a 	mov	fp,zero
8111101c:	003f9006 	br	81110e60 <__reset+0xfb0f0e60>
81111020:	3446b03a 	or	r3,r6,r17
81111024:	1800261e 	bne	r3,zero,811110c0 <__muldf3+0x2e4>
81111028:	0023883a 	mov	r17,zero
8111102c:	0011883a 	mov	r8,zero
81111030:	01400084 	movi	r5,2
81111034:	003f9c06 	br	81110ea8 <__reset+0xfb0f0ea8>
81111038:	3446b03a 	or	r3,r6,r17
8111103c:	18001c26 	beq	r3,zero,811110b0 <__muldf3+0x2d4>
81111040:	8800ce26 	beq	r17,zero,8111137c <__muldf3+0x5a0>
81111044:	8809883a 	mov	r4,r17
81111048:	d9800215 	stw	r6,8(sp)
8111104c:	da400115 	stw	r9,4(sp)
81111050:	da800015 	stw	r10,0(sp)
81111054:	11117bc0 	call	811117bc <__clzsi2>
81111058:	d9800217 	ldw	r6,8(sp)
8111105c:	da400117 	ldw	r9,4(sp)
81111060:	da800017 	ldw	r10,0(sp)
81111064:	113ffd44 	addi	r4,r2,-11
81111068:	00c00704 	movi	r3,28
8111106c:	1900bf16 	blt	r3,r4,8111136c <__muldf3+0x590>
81111070:	00c00744 	movi	r3,29
81111074:	123ffe04 	addi	r8,r2,-8
81111078:	1907c83a 	sub	r3,r3,r4
8111107c:	8a22983a 	sll	r17,r17,r8
81111080:	30c6d83a 	srl	r3,r6,r3
81111084:	3210983a 	sll	r8,r6,r8
81111088:	1c62b03a 	or	r17,r3,r17
8111108c:	1080fcc4 	addi	r2,r2,1011
81111090:	0085c83a 	sub	r2,zero,r2
81111094:	000b883a 	mov	r5,zero
81111098:	003f8306 	br	81110ea8 <__reset+0xfb0f0ea8>
8111109c:	b02b883a 	mov	r21,r22
811110a0:	0081ffc4 	movi	r2,2047
811110a4:	000b883a 	mov	r5,zero
811110a8:	0029883a 	mov	r20,zero
811110ac:	003fac06 	br	81110f60 <__reset+0xfb0f0f60>
811110b0:	0023883a 	mov	r17,zero
811110b4:	0011883a 	mov	r8,zero
811110b8:	01400044 	movi	r5,1
811110bc:	003f7a06 	br	81110ea8 <__reset+0xfb0f0ea8>
811110c0:	014000c4 	movi	r5,3
811110c4:	003f7806 	br	81110ea8 <__reset+0xfb0f0ea8>
811110c8:	04c00104 	movi	r19,4
811110cc:	0021883a 	mov	r16,zero
811110d0:	0029883a 	mov	r20,zero
811110d4:	07000044 	movi	fp,1
811110d8:	003f6106 	br	81110e60 <__reset+0xfb0f0e60>
811110dc:	04c00304 	movi	r19,12
811110e0:	070000c4 	movi	fp,3
811110e4:	003f5e06 	br	81110e60 <__reset+0xfb0f0e60>
811110e8:	01400434 	movhi	r5,16
811110ec:	002b883a 	mov	r21,zero
811110f0:	297fffc4 	addi	r5,r5,-1
811110f4:	053fffc4 	movi	r20,-1
811110f8:	0081ffc4 	movi	r2,2047
811110fc:	003f9806 	br	81110f60 <__reset+0xfb0f0f60>
81111100:	8023883a 	mov	r17,r16
81111104:	a011883a 	mov	r8,r20
81111108:	e00b883a 	mov	r5,fp
8111110c:	003f8a06 	br	81110f38 <__reset+0xfb0f0f38>
81111110:	8023883a 	mov	r17,r16
81111114:	a011883a 	mov	r8,r20
81111118:	482d883a 	mov	r22,r9
8111111c:	e00b883a 	mov	r5,fp
81111120:	003f8506 	br	81110f38 <__reset+0xfb0f0f38>
81111124:	a00ad43a 	srli	r5,r20,16
81111128:	401ad43a 	srli	r13,r8,16
8111112c:	a53fffcc 	andi	r20,r20,65535
81111130:	423fffcc 	andi	r8,r8,65535
81111134:	4519383a 	mul	r12,r8,r20
81111138:	4147383a 	mul	r3,r8,r5
8111113c:	6d09383a 	mul	r4,r13,r20
81111140:	600cd43a 	srli	r6,r12,16
81111144:	2b5d383a 	mul	r14,r5,r13
81111148:	20c9883a 	add	r4,r4,r3
8111114c:	310d883a 	add	r6,r6,r4
81111150:	30c0022e 	bgeu	r6,r3,8111115c <__muldf3+0x380>
81111154:	00c00074 	movhi	r3,1
81111158:	70dd883a 	add	r14,r14,r3
8111115c:	8826d43a 	srli	r19,r17,16
81111160:	8bffffcc 	andi	r15,r17,65535
81111164:	7d23383a 	mul	r17,r15,r20
81111168:	7949383a 	mul	r4,r15,r5
8111116c:	9d29383a 	mul	r20,r19,r20
81111170:	8814d43a 	srli	r10,r17,16
81111174:	3012943a 	slli	r9,r6,16
81111178:	a129883a 	add	r20,r20,r4
8111117c:	633fffcc 	andi	r12,r12,65535
81111180:	5515883a 	add	r10,r10,r20
81111184:	3006d43a 	srli	r3,r6,16
81111188:	4b13883a 	add	r9,r9,r12
8111118c:	2ccb383a 	mul	r5,r5,r19
81111190:	5100022e 	bgeu	r10,r4,8111119c <__muldf3+0x3c0>
81111194:	01000074 	movhi	r4,1
81111198:	290b883a 	add	r5,r5,r4
8111119c:	802ad43a 	srli	r21,r16,16
811111a0:	843fffcc 	andi	r16,r16,65535
811111a4:	440d383a 	mul	r6,r8,r16
811111a8:	4565383a 	mul	r18,r8,r21
811111ac:	8349383a 	mul	r4,r16,r13
811111b0:	500e943a 	slli	r7,r10,16
811111b4:	3010d43a 	srli	r8,r6,16
811111b8:	5028d43a 	srli	r20,r10,16
811111bc:	2489883a 	add	r4,r4,r18
811111c0:	8abfffcc 	andi	r10,r17,65535
811111c4:	3a95883a 	add	r10,r7,r10
811111c8:	4119883a 	add	r12,r8,r4
811111cc:	a169883a 	add	r20,r20,r5
811111d0:	1a87883a 	add	r3,r3,r10
811111d4:	6d5b383a 	mul	r13,r13,r21
811111d8:	6480022e 	bgeu	r12,r18,811111e4 <__muldf3+0x408>
811111dc:	01000074 	movhi	r4,1
811111e0:	691b883a 	add	r13,r13,r4
811111e4:	7c25383a 	mul	r18,r15,r16
811111e8:	7d4b383a 	mul	r5,r15,r21
811111ec:	84cf383a 	mul	r7,r16,r19
811111f0:	901ed43a 	srli	r15,r18,16
811111f4:	6008d43a 	srli	r4,r12,16
811111f8:	6010943a 	slli	r8,r12,16
811111fc:	394f883a 	add	r7,r7,r5
81111200:	333fffcc 	andi	r12,r6,65535
81111204:	79df883a 	add	r15,r15,r7
81111208:	235b883a 	add	r13,r4,r13
8111120c:	9d63383a 	mul	r17,r19,r21
81111210:	4309883a 	add	r4,r8,r12
81111214:	7940022e 	bgeu	r15,r5,81111220 <__muldf3+0x444>
81111218:	01400074 	movhi	r5,1
8111121c:	8963883a 	add	r17,r17,r5
81111220:	780a943a 	slli	r5,r15,16
81111224:	91bfffcc 	andi	r6,r18,65535
81111228:	70c7883a 	add	r3,r14,r3
8111122c:	298d883a 	add	r6,r5,r6
81111230:	1a8f803a 	cmpltu	r7,r3,r10
81111234:	350b883a 	add	r5,r6,r20
81111238:	20c7883a 	add	r3,r4,r3
8111123c:	3955883a 	add	r10,r7,r5
81111240:	1909803a 	cmpltu	r4,r3,r4
81111244:	6a91883a 	add	r8,r13,r10
81111248:	780cd43a 	srli	r6,r15,16
8111124c:	2219883a 	add	r12,r4,r8
81111250:	2d0b803a 	cmpltu	r5,r5,r20
81111254:	51cf803a 	cmpltu	r7,r10,r7
81111258:	29ceb03a 	or	r7,r5,r7
8111125c:	4351803a 	cmpltu	r8,r8,r13
81111260:	610b803a 	cmpltu	r5,r12,r4
81111264:	4148b03a 	or	r4,r8,r5
81111268:	398f883a 	add	r7,r7,r6
8111126c:	3909883a 	add	r4,r7,r4
81111270:	1810927a 	slli	r8,r3,9
81111274:	2449883a 	add	r4,r4,r17
81111278:	2008927a 	slli	r4,r4,9
8111127c:	6022d5fa 	srli	r17,r12,23
81111280:	1806d5fa 	srli	r3,r3,23
81111284:	4252b03a 	or	r9,r8,r9
81111288:	600a927a 	slli	r5,r12,9
8111128c:	4810c03a 	cmpne	r8,r9,zero
81111290:	2462b03a 	or	r17,r4,r17
81111294:	40c6b03a 	or	r3,r8,r3
81111298:	8900402c 	andhi	r4,r17,256
8111129c:	1950b03a 	or	r8,r3,r5
811112a0:	20000726 	beq	r4,zero,811112c0 <__muldf3+0x4e4>
811112a4:	4006d07a 	srli	r3,r8,1
811112a8:	880497fa 	slli	r2,r17,31
811112ac:	4200004c 	andi	r8,r8,1
811112b0:	8822d07a 	srli	r17,r17,1
811112b4:	1a10b03a 	or	r8,r3,r8
811112b8:	1210b03a 	or	r8,r2,r8
811112bc:	5805883a 	mov	r2,r11
811112c0:	1140ffc4 	addi	r5,r2,1023
811112c4:	0140440e 	bge	zero,r5,811113d8 <__muldf3+0x5fc>
811112c8:	40c001cc 	andi	r3,r8,7
811112cc:	18000726 	beq	r3,zero,811112ec <__muldf3+0x510>
811112d0:	40c003cc 	andi	r3,r8,15
811112d4:	01000104 	movi	r4,4
811112d8:	19000426 	beq	r3,r4,811112ec <__muldf3+0x510>
811112dc:	4107883a 	add	r3,r8,r4
811112e0:	1a11803a 	cmpltu	r8,r3,r8
811112e4:	8a23883a 	add	r17,r17,r8
811112e8:	1811883a 	mov	r8,r3
811112ec:	88c0402c 	andhi	r3,r17,256
811112f0:	18000426 	beq	r3,zero,81111304 <__muldf3+0x528>
811112f4:	11410004 	addi	r5,r2,1024
811112f8:	00bfc034 	movhi	r2,65280
811112fc:	10bfffc4 	addi	r2,r2,-1
81111300:	88a2703a 	and	r17,r17,r2
81111304:	0081ff84 	movi	r2,2046
81111308:	117f6416 	blt	r2,r5,8111109c <__reset+0xfb0f109c>
8111130c:	8828977a 	slli	r20,r17,29
81111310:	4010d0fa 	srli	r8,r8,3
81111314:	8822927a 	slli	r17,r17,9
81111318:	2881ffcc 	andi	r2,r5,2047
8111131c:	a228b03a 	or	r20,r20,r8
81111320:	880ad33a 	srli	r5,r17,12
81111324:	b02b883a 	mov	r21,r22
81111328:	003f0d06 	br	81110f60 <__reset+0xfb0f0f60>
8111132c:	8080022c 	andhi	r2,r16,8
81111330:	10000926 	beq	r2,zero,81111358 <__muldf3+0x57c>
81111334:	8880022c 	andhi	r2,r17,8
81111338:	1000071e 	bne	r2,zero,81111358 <__muldf3+0x57c>
8111133c:	00800434 	movhi	r2,16
81111340:	89400234 	orhi	r5,r17,8
81111344:	10bfffc4 	addi	r2,r2,-1
81111348:	b82b883a 	mov	r21,r23
8111134c:	288a703a 	and	r5,r5,r2
81111350:	4029883a 	mov	r20,r8
81111354:	003f6806 	br	811110f8 <__reset+0xfb0f10f8>
81111358:	00800434 	movhi	r2,16
8111135c:	81400234 	orhi	r5,r16,8
81111360:	10bfffc4 	addi	r2,r2,-1
81111364:	288a703a 	and	r5,r5,r2
81111368:	003f6306 	br	811110f8 <__reset+0xfb0f10f8>
8111136c:	147ff604 	addi	r17,r2,-40
81111370:	3462983a 	sll	r17,r6,r17
81111374:	0011883a 	mov	r8,zero
81111378:	003f4406 	br	8111108c <__reset+0xfb0f108c>
8111137c:	3009883a 	mov	r4,r6
81111380:	d9800215 	stw	r6,8(sp)
81111384:	da400115 	stw	r9,4(sp)
81111388:	da800015 	stw	r10,0(sp)
8111138c:	11117bc0 	call	811117bc <__clzsi2>
81111390:	10800804 	addi	r2,r2,32
81111394:	da800017 	ldw	r10,0(sp)
81111398:	da400117 	ldw	r9,4(sp)
8111139c:	d9800217 	ldw	r6,8(sp)
811113a0:	003f3006 	br	81111064 <__reset+0xfb0f1064>
811113a4:	143ff604 	addi	r16,r2,-40
811113a8:	9c20983a 	sll	r16,r19,r16
811113ac:	0029883a 	mov	r20,zero
811113b0:	003f1606 	br	8111100c <__reset+0xfb0f100c>
811113b4:	d9800215 	stw	r6,8(sp)
811113b8:	d9c00015 	stw	r7,0(sp)
811113bc:	da400115 	stw	r9,4(sp)
811113c0:	11117bc0 	call	811117bc <__clzsi2>
811113c4:	10800804 	addi	r2,r2,32
811113c8:	da400117 	ldw	r9,4(sp)
811113cc:	d9c00017 	ldw	r7,0(sp)
811113d0:	d9800217 	ldw	r6,8(sp)
811113d4:	003f0306 	br	81110fe4 <__reset+0xfb0f0fe4>
811113d8:	00c00044 	movi	r3,1
811113dc:	1947c83a 	sub	r3,r3,r5
811113e0:	00800e04 	movi	r2,56
811113e4:	10feda16 	blt	r2,r3,81110f50 <__reset+0xfb0f0f50>
811113e8:	008007c4 	movi	r2,31
811113ec:	10c01b16 	blt	r2,r3,8111145c <__muldf3+0x680>
811113f0:	00800804 	movi	r2,32
811113f4:	10c5c83a 	sub	r2,r2,r3
811113f8:	888a983a 	sll	r5,r17,r2
811113fc:	40c8d83a 	srl	r4,r8,r3
81111400:	4084983a 	sll	r2,r8,r2
81111404:	88e2d83a 	srl	r17,r17,r3
81111408:	2906b03a 	or	r3,r5,r4
8111140c:	1004c03a 	cmpne	r2,r2,zero
81111410:	1886b03a 	or	r3,r3,r2
81111414:	188001cc 	andi	r2,r3,7
81111418:	10000726 	beq	r2,zero,81111438 <__muldf3+0x65c>
8111141c:	188003cc 	andi	r2,r3,15
81111420:	01000104 	movi	r4,4
81111424:	11000426 	beq	r2,r4,81111438 <__muldf3+0x65c>
81111428:	1805883a 	mov	r2,r3
8111142c:	10c00104 	addi	r3,r2,4
81111430:	1885803a 	cmpltu	r2,r3,r2
81111434:	88a3883a 	add	r17,r17,r2
81111438:	8880202c 	andhi	r2,r17,128
8111143c:	10001c26 	beq	r2,zero,811114b0 <__muldf3+0x6d4>
81111440:	b02b883a 	mov	r21,r22
81111444:	00800044 	movi	r2,1
81111448:	000b883a 	mov	r5,zero
8111144c:	0029883a 	mov	r20,zero
81111450:	003ec306 	br	81110f60 <__reset+0xfb0f0f60>
81111454:	5805883a 	mov	r2,r11
81111458:	003f9906 	br	811112c0 <__reset+0xfb0f12c0>
8111145c:	00bff844 	movi	r2,-31
81111460:	1145c83a 	sub	r2,r2,r5
81111464:	8888d83a 	srl	r4,r17,r2
81111468:	00800804 	movi	r2,32
8111146c:	18801a26 	beq	r3,r2,811114d8 <__muldf3+0x6fc>
81111470:	00801004 	movi	r2,64
81111474:	10c5c83a 	sub	r2,r2,r3
81111478:	8884983a 	sll	r2,r17,r2
8111147c:	1204b03a 	or	r2,r2,r8
81111480:	1004c03a 	cmpne	r2,r2,zero
81111484:	2084b03a 	or	r2,r4,r2
81111488:	144001cc 	andi	r17,r2,7
8111148c:	88000d1e 	bne	r17,zero,811114c4 <__muldf3+0x6e8>
81111490:	000b883a 	mov	r5,zero
81111494:	1028d0fa 	srli	r20,r2,3
81111498:	b02b883a 	mov	r21,r22
8111149c:	0005883a 	mov	r2,zero
811114a0:	a468b03a 	or	r20,r20,r17
811114a4:	003eae06 	br	81110f60 <__reset+0xfb0f0f60>
811114a8:	1007883a 	mov	r3,r2
811114ac:	0023883a 	mov	r17,zero
811114b0:	880a927a 	slli	r5,r17,9
811114b4:	1805883a 	mov	r2,r3
811114b8:	8822977a 	slli	r17,r17,29
811114bc:	280ad33a 	srli	r5,r5,12
811114c0:	003ff406 	br	81111494 <__reset+0xfb0f1494>
811114c4:	10c003cc 	andi	r3,r2,15
811114c8:	01000104 	movi	r4,4
811114cc:	193ff626 	beq	r3,r4,811114a8 <__reset+0xfb0f14a8>
811114d0:	0023883a 	mov	r17,zero
811114d4:	003fd506 	br	8111142c <__reset+0xfb0f142c>
811114d8:	0005883a 	mov	r2,zero
811114dc:	003fe706 	br	8111147c <__reset+0xfb0f147c>
811114e0:	00800434 	movhi	r2,16
811114e4:	89400234 	orhi	r5,r17,8
811114e8:	10bfffc4 	addi	r2,r2,-1
811114ec:	b02b883a 	mov	r21,r22
811114f0:	288a703a 	and	r5,r5,r2
811114f4:	4029883a 	mov	r20,r8
811114f8:	003eff06 	br	811110f8 <__reset+0xfb0f10f8>

811114fc <__extendsfdf2>:
811114fc:	200ad5fa 	srli	r5,r4,23
81111500:	defffd04 	addi	sp,sp,-12
81111504:	de00012e 	bgeu	sp,et,8111150c <__extendsfdf2+0x10>
81111508:	003b68fa 	trap	3
8111150c:	29403fcc 	andi	r5,r5,255
81111510:	dc400115 	stw	r17,4(sp)
81111514:	29800044 	addi	r6,r5,1
81111518:	04402034 	movhi	r17,128
8111151c:	dc000015 	stw	r16,0(sp)
81111520:	8c7fffc4 	addi	r17,r17,-1
81111524:	dfc00215 	stw	ra,8(sp)
81111528:	31803fcc 	andi	r6,r6,255
8111152c:	00800044 	movi	r2,1
81111530:	8922703a 	and	r17,r17,r4
81111534:	2020d7fa 	srli	r16,r4,31
81111538:	1180110e 	bge	r2,r6,81111580 <__extendsfdf2+0x84>
8111153c:	880cd0fa 	srli	r6,r17,3
81111540:	8822977a 	slli	r17,r17,29
81111544:	2940e004 	addi	r5,r5,896
81111548:	2941ffcc 	andi	r5,r5,2047
8111154c:	2804953a 	slli	r2,r5,20
81111550:	01400434 	movhi	r5,16
81111554:	800697fa 	slli	r3,r16,31
81111558:	297fffc4 	addi	r5,r5,-1
8111155c:	314a703a 	and	r5,r6,r5
81111560:	288ab03a 	or	r5,r5,r2
81111564:	28c6b03a 	or	r3,r5,r3
81111568:	8805883a 	mov	r2,r17
8111156c:	dfc00217 	ldw	ra,8(sp)
81111570:	dc400117 	ldw	r17,4(sp)
81111574:	dc000017 	ldw	r16,0(sp)
81111578:	dec00304 	addi	sp,sp,12
8111157c:	f800283a 	ret
81111580:	2800111e 	bne	r5,zero,811115c8 <__extendsfdf2+0xcc>
81111584:	88001c26 	beq	r17,zero,811115f8 <__extendsfdf2+0xfc>
81111588:	8809883a 	mov	r4,r17
8111158c:	11117bc0 	call	811117bc <__clzsi2>
81111590:	00c00284 	movi	r3,10
81111594:	18801b16 	blt	r3,r2,81111604 <__extendsfdf2+0x108>
81111598:	018002c4 	movi	r6,11
8111159c:	308dc83a 	sub	r6,r6,r2
811115a0:	11000544 	addi	r4,r2,21
811115a4:	8986d83a 	srl	r3,r17,r6
811115a8:	8922983a 	sll	r17,r17,r4
811115ac:	0180e244 	movi	r6,905
811115b0:	01400434 	movhi	r5,16
811115b4:	3085c83a 	sub	r2,r6,r2
811115b8:	297fffc4 	addi	r5,r5,-1
811115bc:	194c703a 	and	r6,r3,r5
811115c0:	1141ffcc 	andi	r5,r2,2047
811115c4:	003fe006 	br	81111548 <__reset+0xfb0f1548>
811115c8:	88000826 	beq	r17,zero,811115ec <__extendsfdf2+0xf0>
811115cc:	880cd0fa 	srli	r6,r17,3
811115d0:	00800434 	movhi	r2,16
811115d4:	10bfffc4 	addi	r2,r2,-1
811115d8:	31800234 	orhi	r6,r6,8
811115dc:	8822977a 	slli	r17,r17,29
811115e0:	308c703a 	and	r6,r6,r2
811115e4:	0141ffc4 	movi	r5,2047
811115e8:	003fd706 	br	81111548 <__reset+0xfb0f1548>
811115ec:	0141ffc4 	movi	r5,2047
811115f0:	000d883a 	mov	r6,zero
811115f4:	003fd406 	br	81111548 <__reset+0xfb0f1548>
811115f8:	000b883a 	mov	r5,zero
811115fc:	000d883a 	mov	r6,zero
81111600:	003fd106 	br	81111548 <__reset+0xfb0f1548>
81111604:	11bffd44 	addi	r6,r2,-11
81111608:	8986983a 	sll	r3,r17,r6
8111160c:	0023883a 	mov	r17,zero
81111610:	003fe606 	br	811115ac <__reset+0xfb0f15ac>

81111614 <__truncdfsf2>:
81111614:	2810d53a 	srli	r8,r5,20
81111618:	01c00434 	movhi	r7,16
8111161c:	39ffffc4 	addi	r7,r7,-1
81111620:	29ce703a 	and	r7,r5,r7
81111624:	4201ffcc 	andi	r8,r8,2047
81111628:	380e90fa 	slli	r7,r7,3
8111162c:	200cd77a 	srli	r6,r4,29
81111630:	42400044 	addi	r9,r8,1
81111634:	4a41ffcc 	andi	r9,r9,2047
81111638:	00c00044 	movi	r3,1
8111163c:	280ad7fa 	srli	r5,r5,31
81111640:	31ceb03a 	or	r7,r6,r7
81111644:	200490fa 	slli	r2,r4,3
81111648:	1a40230e 	bge	r3,r9,811116d8 <__truncdfsf2+0xc4>
8111164c:	40ff2004 	addi	r3,r8,-896
81111650:	01803f84 	movi	r6,254
81111654:	30c01516 	blt	r6,r3,811116ac <__truncdfsf2+0x98>
81111658:	00c0380e 	bge	zero,r3,8111173c <__truncdfsf2+0x128>
8111165c:	200c91ba 	slli	r6,r4,6
81111660:	380e90fa 	slli	r7,r7,3
81111664:	1004d77a 	srli	r2,r2,29
81111668:	300cc03a 	cmpne	r6,r6,zero
8111166c:	31ccb03a 	or	r6,r6,r7
81111670:	308cb03a 	or	r6,r6,r2
81111674:	308001cc 	andi	r2,r6,7
81111678:	10000426 	beq	r2,zero,8111168c <__truncdfsf2+0x78>
8111167c:	308003cc 	andi	r2,r6,15
81111680:	01000104 	movi	r4,4
81111684:	11000126 	beq	r2,r4,8111168c <__truncdfsf2+0x78>
81111688:	31800104 	addi	r6,r6,4
8111168c:	3081002c 	andhi	r2,r6,1024
81111690:	10001626 	beq	r2,zero,811116ec <__truncdfsf2+0xd8>
81111694:	18c00044 	addi	r3,r3,1
81111698:	00803fc4 	movi	r2,255
8111169c:	18800326 	beq	r3,r2,811116ac <__truncdfsf2+0x98>
811116a0:	300c91ba 	slli	r6,r6,6
811116a4:	300cd27a 	srli	r6,r6,9
811116a8:	00000206 	br	811116b4 <__truncdfsf2+0xa0>
811116ac:	00ffffc4 	movi	r3,-1
811116b0:	000d883a 	mov	r6,zero
811116b4:	18c03fcc 	andi	r3,r3,255
811116b8:	180895fa 	slli	r4,r3,23
811116bc:	00c02034 	movhi	r3,128
811116c0:	280a97fa 	slli	r5,r5,31
811116c4:	18ffffc4 	addi	r3,r3,-1
811116c8:	30c6703a 	and	r3,r6,r3
811116cc:	1906b03a 	or	r3,r3,r4
811116d0:	1944b03a 	or	r2,r3,r5
811116d4:	f800283a 	ret
811116d8:	40000b1e 	bne	r8,zero,81111708 <__truncdfsf2+0xf4>
811116dc:	388cb03a 	or	r6,r7,r2
811116e0:	0007883a 	mov	r3,zero
811116e4:	30000426 	beq	r6,zero,811116f8 <__truncdfsf2+0xe4>
811116e8:	01800144 	movi	r6,5
811116ec:	00803fc4 	movi	r2,255
811116f0:	300cd0fa 	srli	r6,r6,3
811116f4:	18800a26 	beq	r3,r2,81111720 <__truncdfsf2+0x10c>
811116f8:	00802034 	movhi	r2,128
811116fc:	10bfffc4 	addi	r2,r2,-1
81111700:	308c703a 	and	r6,r6,r2
81111704:	003feb06 	br	811116b4 <__reset+0xfb0f16b4>
81111708:	3888b03a 	or	r4,r7,r2
8111170c:	203fe726 	beq	r4,zero,811116ac <__reset+0xfb0f16ac>
81111710:	380c90fa 	slli	r6,r7,3
81111714:	00c03fc4 	movi	r3,255
81111718:	31808034 	orhi	r6,r6,512
8111171c:	003fd506 	br	81111674 <__reset+0xfb0f1674>
81111720:	303fe226 	beq	r6,zero,811116ac <__reset+0xfb0f16ac>
81111724:	00802034 	movhi	r2,128
81111728:	31801034 	orhi	r6,r6,64
8111172c:	10bfffc4 	addi	r2,r2,-1
81111730:	00ffffc4 	movi	r3,-1
81111734:	308c703a 	and	r6,r6,r2
81111738:	003fde06 	br	811116b4 <__reset+0xfb0f16b4>
8111173c:	013ffa44 	movi	r4,-23
81111740:	19000e16 	blt	r3,r4,8111177c <__truncdfsf2+0x168>
81111744:	01000784 	movi	r4,30
81111748:	20c9c83a 	sub	r4,r4,r3
8111174c:	018007c4 	movi	r6,31
81111750:	39c02034 	orhi	r7,r7,128
81111754:	31000b16 	blt	r6,r4,81111784 <__truncdfsf2+0x170>
81111758:	423f2084 	addi	r8,r8,-894
8111175c:	120c983a 	sll	r6,r2,r8
81111760:	3a0e983a 	sll	r7,r7,r8
81111764:	1104d83a 	srl	r2,r2,r4
81111768:	300cc03a 	cmpne	r6,r6,zero
8111176c:	31ceb03a 	or	r7,r6,r7
81111770:	388cb03a 	or	r6,r7,r2
81111774:	0007883a 	mov	r3,zero
81111778:	003fbe06 	br	81111674 <__reset+0xfb0f1674>
8111177c:	0007883a 	mov	r3,zero
81111780:	003fd906 	br	811116e8 <__reset+0xfb0f16e8>
81111784:	01bfff84 	movi	r6,-2
81111788:	30cdc83a 	sub	r6,r6,r3
8111178c:	00c00804 	movi	r3,32
81111790:	398cd83a 	srl	r6,r7,r6
81111794:	20c00726 	beq	r4,r3,811117b4 <__truncdfsf2+0x1a0>
81111798:	423f2884 	addi	r8,r8,-862
8111179c:	3a0e983a 	sll	r7,r7,r8
811117a0:	3884b03a 	or	r2,r7,r2
811117a4:	1004c03a 	cmpne	r2,r2,zero
811117a8:	118cb03a 	or	r6,r2,r6
811117ac:	0007883a 	mov	r3,zero
811117b0:	003fb006 	br	81111674 <__reset+0xfb0f1674>
811117b4:	000f883a 	mov	r7,zero
811117b8:	003ff906 	br	811117a0 <__reset+0xfb0f17a0>

811117bc <__clzsi2>:
811117bc:	00bfffd4 	movui	r2,65535
811117c0:	11000536 	bltu	r2,r4,811117d8 <__clzsi2+0x1c>
811117c4:	00803fc4 	movi	r2,255
811117c8:	11000f36 	bltu	r2,r4,81111808 <__clzsi2+0x4c>
811117cc:	00800804 	movi	r2,32
811117d0:	0007883a 	mov	r3,zero
811117d4:	00000506 	br	811117ec <__clzsi2+0x30>
811117d8:	00804034 	movhi	r2,256
811117dc:	10bfffc4 	addi	r2,r2,-1
811117e0:	11000c2e 	bgeu	r2,r4,81111814 <__clzsi2+0x58>
811117e4:	00800204 	movi	r2,8
811117e8:	00c00604 	movi	r3,24
811117ec:	20c8d83a 	srl	r4,r4,r3
811117f0:	00e04534 	movhi	r3,33044
811117f4:	18f82804 	addi	r3,r3,-8032
811117f8:	1909883a 	add	r4,r3,r4
811117fc:	20c00003 	ldbu	r3,0(r4)
81111800:	10c5c83a 	sub	r2,r2,r3
81111804:	f800283a 	ret
81111808:	00800604 	movi	r2,24
8111180c:	00c00204 	movi	r3,8
81111810:	003ff606 	br	811117ec <__reset+0xfb0f17ec>
81111814:	00800404 	movi	r2,16
81111818:	1007883a 	mov	r3,r2
8111181c:	003ff306 	br	811117ec <__reset+0xfb0f17ec>

81111820 <atoi>:
81111820:	01800284 	movi	r6,10
81111824:	000b883a 	mov	r5,zero
81111828:	11135d01 	jmpi	811135d0 <strtol>

8111182c <_atoi_r>:
8111182c:	01c00284 	movi	r7,10
81111830:	000d883a 	mov	r6,zero
81111834:	11133901 	jmpi	81113390 <_strtol_r>

81111838 <_fopen_r>:
81111838:	defffa04 	addi	sp,sp,-24
8111183c:	3005883a 	mov	r2,r6
81111840:	de00012e 	bgeu	sp,et,81111848 <_fopen_r+0x10>
81111844:	003b68fa 	trap	3
81111848:	d80d883a 	mov	r6,sp
8111184c:	dcc00415 	stw	r19,16(sp)
81111850:	2827883a 	mov	r19,r5
81111854:	100b883a 	mov	r5,r2
81111858:	dc800315 	stw	r18,12(sp)
8111185c:	dfc00515 	stw	ra,20(sp)
81111860:	dc400215 	stw	r17,8(sp)
81111864:	dc000115 	stw	r16,4(sp)
81111868:	2025883a 	mov	r18,r4
8111186c:	111b4780 	call	8111b478 <__sflags>
81111870:	10002726 	beq	r2,zero,81111910 <_fopen_r+0xd8>
81111874:	9009883a 	mov	r4,r18
81111878:	1023883a 	mov	r17,r2
8111187c:	111b2f00 	call	8111b2f0 <__sfp>
81111880:	1021883a 	mov	r16,r2
81111884:	10002226 	beq	r2,zero,81111910 <_fopen_r+0xd8>
81111888:	d9800017 	ldw	r6,0(sp)
8111188c:	01c06d84 	movi	r7,438
81111890:	980b883a 	mov	r5,r19
81111894:	9009883a 	mov	r4,r18
81111898:	1112bf40 	call	81112bf4 <_open_r>
8111189c:	10001916 	blt	r2,zero,81111904 <_fopen_r+0xcc>
811118a0:	8080038d 	sth	r2,14(r16)
811118a4:	00a04474 	movhi	r2,33041
811118a8:	108c5604 	addi	r2,r2,12632
811118ac:	80800815 	stw	r2,32(r16)
811118b0:	00a04474 	movhi	r2,33041
811118b4:	108c6f04 	addi	r2,r2,12732
811118b8:	80800915 	stw	r2,36(r16)
811118bc:	00a04474 	movhi	r2,33041
811118c0:	108c9004 	addi	r2,r2,12864
811118c4:	80800a15 	stw	r2,40(r16)
811118c8:	00a04474 	movhi	r2,33041
811118cc:	108ca904 	addi	r2,r2,12964
811118d0:	8440030d 	sth	r17,12(r16)
811118d4:	84000715 	stw	r16,28(r16)
811118d8:	80800b15 	stw	r2,44(r16)
811118dc:	8c40400c 	andi	r17,r17,256
811118e0:	88000d1e 	bne	r17,zero,81111918 <_fopen_r+0xe0>
811118e4:	8005883a 	mov	r2,r16
811118e8:	dfc00517 	ldw	ra,20(sp)
811118ec:	dcc00417 	ldw	r19,16(sp)
811118f0:	dc800317 	ldw	r18,12(sp)
811118f4:	dc400217 	ldw	r17,8(sp)
811118f8:	dc000117 	ldw	r16,4(sp)
811118fc:	dec00604 	addi	sp,sp,24
81111900:	f800283a 	ret
81111904:	111b4380 	call	8111b438 <__sfp_lock_acquire>
81111908:	8000030d 	sth	zero,12(r16)
8111190c:	111b43c0 	call	8111b43c <__sfp_lock_release>
81111910:	0005883a 	mov	r2,zero
81111914:	003ff406 	br	811118e8 <__reset+0xfb0f18e8>
81111918:	01c00084 	movi	r7,2
8111191c:	000d883a 	mov	r6,zero
81111920:	800b883a 	mov	r5,r16
81111924:	9009883a 	mov	r4,r18
81111928:	11119a80 	call	811119a8 <_fseek_r>
8111192c:	8005883a 	mov	r2,r16
81111930:	003fed06 	br	811118e8 <__reset+0xfb0f18e8>

81111934 <fopen>:
81111934:	00a04534 	movhi	r2,33044
81111938:	10821504 	addi	r2,r2,2132
8111193c:	280d883a 	mov	r6,r5
81111940:	200b883a 	mov	r5,r4
81111944:	11000017 	ldw	r4,0(r2)
81111948:	11118381 	jmpi	81111838 <_fopen_r>

8111194c <_fprintf_r>:
8111194c:	defffe04 	addi	sp,sp,-8
81111950:	2809883a 	mov	r4,r5
81111954:	300b883a 	mov	r5,r6
81111958:	de00012e 	bgeu	sp,et,81111960 <_fprintf_r+0x14>
8111195c:	003b68fa 	trap	3
81111960:	dfc00015 	stw	ra,0(sp)
81111964:	d9c00115 	stw	r7,4(sp)
81111968:	d9800104 	addi	r6,sp,4
8111196c:	11179cc0 	call	811179cc <__vfprintf_internal>
81111970:	dfc00017 	ldw	ra,0(sp)
81111974:	dec00204 	addi	sp,sp,8
81111978:	f800283a 	ret

8111197c <fprintf>:
8111197c:	defffd04 	addi	sp,sp,-12
81111980:	de00012e 	bgeu	sp,et,81111988 <fprintf+0xc>
81111984:	003b68fa 	trap	3
81111988:	dfc00015 	stw	ra,0(sp)
8111198c:	d9800115 	stw	r6,4(sp)
81111990:	d9c00215 	stw	r7,8(sp)
81111994:	d9800104 	addi	r6,sp,4
81111998:	11179cc0 	call	811179cc <__vfprintf_internal>
8111199c:	dfc00017 	ldw	ra,0(sp)
811119a0:	dec00304 	addi	sp,sp,12
811119a4:	f800283a 	ret

811119a8 <_fseek_r>:
811119a8:	11119c81 	jmpi	811119c8 <_fseeko_r>

811119ac <fseek>:
811119ac:	00a04534 	movhi	r2,33044
811119b0:	10821504 	addi	r2,r2,2132
811119b4:	300f883a 	mov	r7,r6
811119b8:	280d883a 	mov	r6,r5
811119bc:	200b883a 	mov	r5,r4
811119c0:	11000017 	ldw	r4,0(r2)
811119c4:	11119c81 	jmpi	811119c8 <_fseeko_r>

811119c8 <_fseeko_r>:
811119c8:	deffe804 	addi	sp,sp,-96
811119cc:	de00012e 	bgeu	sp,et,811119d4 <_fseeko_r+0xc>
811119d0:	003b68fa 	trap	3
811119d4:	dd401415 	stw	r21,80(sp)
811119d8:	dc801115 	stw	r18,68(sp)
811119dc:	dc401015 	stw	r17,64(sp)
811119e0:	dc000f15 	stw	r16,60(sp)
811119e4:	dfc01715 	stw	ra,92(sp)
811119e8:	ddc01615 	stw	r23,88(sp)
811119ec:	dd801515 	stw	r22,84(sp)
811119f0:	dd001315 	stw	r20,76(sp)
811119f4:	dcc01215 	stw	r19,72(sp)
811119f8:	2023883a 	mov	r17,r4
811119fc:	2821883a 	mov	r16,r5
81111a00:	302b883a 	mov	r21,r6
81111a04:	3825883a 	mov	r18,r7
81111a08:	20000226 	beq	r4,zero,81111a14 <_fseeko_r+0x4c>
81111a0c:	20800e17 	ldw	r2,56(r4)
81111a10:	10005a26 	beq	r2,zero,81111b7c <_fseeko_r+0x1b4>
81111a14:	8080030b 	ldhu	r2,12(r16)
81111a18:	00c04204 	movi	r3,264
81111a1c:	1080420c 	andi	r2,r2,264
81111a20:	10c05b26 	beq	r2,r3,81111b90 <_fseeko_r+0x1c8>
81111a24:	85000a17 	ldw	r20,40(r16)
81111a28:	a000f626 	beq	r20,zero,81111e04 <_fseeko_r+0x43c>
81111a2c:	00800044 	movi	r2,1
81111a30:	90803e26 	beq	r18,r2,81111b2c <_fseeko_r+0x164>
81111a34:	00800084 	movi	r2,2
81111a38:	90801026 	beq	r18,r2,81111a7c <_fseeko_r+0xb4>
81111a3c:	90000f26 	beq	r18,zero,81111a7c <_fseeko_r+0xb4>
81111a40:	00800584 	movi	r2,22
81111a44:	88800015 	stw	r2,0(r17)
81111a48:	04ffffc4 	movi	r19,-1
81111a4c:	9805883a 	mov	r2,r19
81111a50:	dfc01717 	ldw	ra,92(sp)
81111a54:	ddc01617 	ldw	r23,88(sp)
81111a58:	dd801517 	ldw	r22,84(sp)
81111a5c:	dd401417 	ldw	r21,80(sp)
81111a60:	dd001317 	ldw	r20,76(sp)
81111a64:	dcc01217 	ldw	r19,72(sp)
81111a68:	dc801117 	ldw	r18,68(sp)
81111a6c:	dc401017 	ldw	r17,64(sp)
81111a70:	dc000f17 	ldw	r16,60(sp)
81111a74:	dec01804 	addi	sp,sp,96
81111a78:	f800283a 	ret
81111a7c:	80800417 	ldw	r2,16(r16)
81111a80:	002f883a 	mov	r23,zero
81111a84:	0027883a 	mov	r19,zero
81111a88:	1000cb26 	beq	r2,zero,81111db8 <_fseeko_r+0x3f0>
81111a8c:	8080030b 	ldhu	r2,12(r16)
81111a90:	10c2068c 	andi	r3,r2,2074
81111a94:	1800071e 	bne	r3,zero,81111ab4 <_fseeko_r+0xec>
81111a98:	10c1000c 	andi	r3,r2,1024
81111a9c:	1800451e 	bne	r3,zero,81111bb4 <_fseeko_r+0x1ec>
81111aa0:	00e04474 	movhi	r3,33041
81111aa4:	18cc9004 	addi	r3,r3,12864
81111aa8:	a0c0b726 	beq	r20,r3,81111d88 <_fseeko_r+0x3c0>
81111aac:	10820014 	ori	r2,r2,2048
81111ab0:	8080030d 	sth	r2,12(r16)
81111ab4:	800b883a 	mov	r5,r16
81111ab8:	8809883a 	mov	r4,r17
81111abc:	111b02c0 	call	8111b02c <_fflush_r>
81111ac0:	1027883a 	mov	r19,r2
81111ac4:	103fe01e 	bne	r2,zero,81111a48 <__reset+0xfb0f1a48>
81111ac8:	81400717 	ldw	r5,28(r16)
81111acc:	900f883a 	mov	r7,r18
81111ad0:	a80d883a 	mov	r6,r21
81111ad4:	8809883a 	mov	r4,r17
81111ad8:	a03ee83a 	callr	r20
81111adc:	00ffffc4 	movi	r3,-1
81111ae0:	10ffd926 	beq	r2,r3,81111a48 <__reset+0xfb0f1a48>
81111ae4:	81400c17 	ldw	r5,48(r16)
81111ae8:	28000526 	beq	r5,zero,81111b00 <_fseeko_r+0x138>
81111aec:	80801004 	addi	r2,r16,64
81111af0:	28800226 	beq	r5,r2,81111afc <_fseeko_r+0x134>
81111af4:	8809883a 	mov	r4,r17
81111af8:	111b8c00 	call	8111b8c0 <_free_r>
81111afc:	80000c15 	stw	zero,48(r16)
81111b00:	8080030b 	ldhu	r2,12(r16)
81111b04:	80c00417 	ldw	r3,16(r16)
81111b08:	80000115 	stw	zero,4(r16)
81111b0c:	10bdf7cc 	andi	r2,r2,63455
81111b10:	80c00015 	stw	r3,0(r16)
81111b14:	8080030d 	sth	r2,12(r16)
81111b18:	01800204 	movi	r6,8
81111b1c:	000b883a 	mov	r5,zero
81111b20:	81001704 	addi	r4,r16,92
81111b24:	1112acc0 	call	81112acc <memset>
81111b28:	003fc806 	br	81111a4c <__reset+0xfb0f1a4c>
81111b2c:	800b883a 	mov	r5,r16
81111b30:	8809883a 	mov	r4,r17
81111b34:	111b02c0 	call	8111b02c <_fflush_r>
81111b38:	8080030b 	ldhu	r2,12(r16)
81111b3c:	10c4000c 	andi	r3,r2,4096
81111b40:	18008726 	beq	r3,zero,81111d60 <_fseeko_r+0x398>
81111b44:	84c01417 	ldw	r19,80(r16)
81111b48:	10c0010c 	andi	r3,r2,4
81111b4c:	1800431e 	bne	r3,zero,81111c5c <_fseeko_r+0x294>
81111b50:	1080020c 	andi	r2,r2,8
81111b54:	10008026 	beq	r2,zero,81111d58 <_fseeko_r+0x390>
81111b58:	80c00017 	ldw	r3,0(r16)
81111b5c:	80800417 	ldw	r2,16(r16)
81111b60:	18000226 	beq	r3,zero,81111b6c <_fseeko_r+0x1a4>
81111b64:	1887c83a 	sub	r3,r3,r2
81111b68:	98e7883a 	add	r19,r19,r3
81111b6c:	aceb883a 	add	r21,r21,r19
81111b70:	05c00044 	movi	r23,1
81111b74:	0025883a 	mov	r18,zero
81111b78:	003fc306 	br	81111a88 <__reset+0xfb0f1a88>
81111b7c:	111b4280 	call	8111b428 <__sinit>
81111b80:	8080030b 	ldhu	r2,12(r16)
81111b84:	00c04204 	movi	r3,264
81111b88:	1080420c 	andi	r2,r2,264
81111b8c:	10ffa51e 	bne	r2,r3,81111a24 <__reset+0xfb0f1a24>
81111b90:	800b883a 	mov	r5,r16
81111b94:	8809883a 	mov	r4,r17
81111b98:	111b02c0 	call	8111b02c <_fflush_r>
81111b9c:	003fa106 	br	81111a24 <__reset+0xfb0f1a24>
81111ba0:	8080030b 	ldhu	r2,12(r16)
81111ba4:	00c10004 	movi	r3,1024
81111ba8:	80c01315 	stw	r3,76(r16)
81111bac:	10c4b03a 	or	r2,r2,r3
81111bb0:	8080030d 	sth	r2,12(r16)
81111bb4:	9000311e 	bne	r18,zero,81111c7c <_fseeko_r+0x2b4>
81111bb8:	a82d883a 	mov	r22,r21
81111bbc:	b800371e 	bne	r23,zero,81111c9c <_fseeko_r+0x2d4>
81111bc0:	8080030b 	ldhu	r2,12(r16)
81111bc4:	1084000c 	andi	r2,r2,4096
81111bc8:	10007f26 	beq	r2,zero,81111dc8 <_fseeko_r+0x400>
81111bcc:	80801417 	ldw	r2,80(r16)
81111bd0:	81800117 	ldw	r6,4(r16)
81111bd4:	81400c17 	ldw	r5,48(r16)
81111bd8:	11a7c83a 	sub	r19,r2,r6
81111bdc:	28008226 	beq	r5,zero,81111de8 <_fseeko_r+0x420>
81111be0:	81c00f17 	ldw	r7,60(r16)
81111be4:	99e7c83a 	sub	r19,r19,r7
81111be8:	81000e17 	ldw	r4,56(r16)
81111bec:	80800417 	ldw	r2,16(r16)
81111bf0:	99a7883a 	add	r19,r19,r6
81111bf4:	2087c83a 	sub	r3,r4,r2
81111bf8:	98e7c83a 	sub	r19,r19,r3
81111bfc:	38c7883a 	add	r3,r7,r3
81111c00:	b4c02b16 	blt	r22,r19,81111cb0 <_fseeko_r+0x2e8>
81111c04:	98c9883a 	add	r4,r19,r3
81111c08:	b100292e 	bgeu	r22,r4,81111cb0 <_fseeko_r+0x2e8>
81111c0c:	b4e7c83a 	sub	r19,r22,r19
81111c10:	14c5883a 	add	r2,r2,r19
81111c14:	1ce7c83a 	sub	r19,r3,r19
81111c18:	80800015 	stw	r2,0(r16)
81111c1c:	84c00115 	stw	r19,4(r16)
81111c20:	28000526 	beq	r5,zero,81111c38 <_fseeko_r+0x270>
81111c24:	80801004 	addi	r2,r16,64
81111c28:	28800226 	beq	r5,r2,81111c34 <_fseeko_r+0x26c>
81111c2c:	8809883a 	mov	r4,r17
81111c30:	111b8c00 	call	8111b8c0 <_free_r>
81111c34:	80000c15 	stw	zero,48(r16)
81111c38:	8080030b 	ldhu	r2,12(r16)
81111c3c:	01800204 	movi	r6,8
81111c40:	000b883a 	mov	r5,zero
81111c44:	10bff7cc 	andi	r2,r2,65503
81111c48:	8080030d 	sth	r2,12(r16)
81111c4c:	81001704 	addi	r4,r16,92
81111c50:	1112acc0 	call	81112acc <memset>
81111c54:	0027883a 	mov	r19,zero
81111c58:	003f7c06 	br	81111a4c <__reset+0xfb0f1a4c>
81111c5c:	80c00117 	ldw	r3,4(r16)
81111c60:	80800c17 	ldw	r2,48(r16)
81111c64:	98e7c83a 	sub	r19,r19,r3
81111c68:	10003b26 	beq	r2,zero,81111d58 <_fseeko_r+0x390>
81111c6c:	80c00f17 	ldw	r3,60(r16)
81111c70:	80800417 	ldw	r2,16(r16)
81111c74:	98e7c83a 	sub	r19,r19,r3
81111c78:	003fbc06 	br	81111b6c <__reset+0xfb0f1b6c>
81111c7c:	8140038f 	ldh	r5,14(r16)
81111c80:	d80d883a 	mov	r6,sp
81111c84:	8809883a 	mov	r4,r17
81111c88:	1111e300 	call	81111e30 <_fstat_r>
81111c8c:	103f891e 	bne	r2,zero,81111ab4 <__reset+0xfb0f1ab4>
81111c90:	dd800417 	ldw	r22,16(sp)
81111c94:	adad883a 	add	r22,r21,r22
81111c98:	b83fc926 	beq	r23,zero,81111bc0 <__reset+0xfb0f1bc0>
81111c9c:	81400c17 	ldw	r5,48(r16)
81111ca0:	81800117 	ldw	r6,4(r16)
81111ca4:	28005026 	beq	r5,zero,81111de8 <_fseeko_r+0x420>
81111ca8:	81c00f17 	ldw	r7,60(r16)
81111cac:	003fce06 	br	81111be8 <__reset+0xfb0f1be8>
81111cb0:	84c01317 	ldw	r19,76(r16)
81111cb4:	81400717 	ldw	r5,28(r16)
81111cb8:	000f883a 	mov	r7,zero
81111cbc:	04e7c83a 	sub	r19,zero,r19
81111cc0:	9da6703a 	and	r19,r19,r22
81111cc4:	980d883a 	mov	r6,r19
81111cc8:	8809883a 	mov	r4,r17
81111ccc:	a03ee83a 	callr	r20
81111cd0:	00ffffc4 	movi	r3,-1
81111cd4:	10ff7726 	beq	r2,r3,81111ab4 <__reset+0xfb0f1ab4>
81111cd8:	80800417 	ldw	r2,16(r16)
81111cdc:	81400c17 	ldw	r5,48(r16)
81111ce0:	80000115 	stw	zero,4(r16)
81111ce4:	80800015 	stw	r2,0(r16)
81111ce8:	28000526 	beq	r5,zero,81111d00 <_fseeko_r+0x338>
81111cec:	80801004 	addi	r2,r16,64
81111cf0:	28800226 	beq	r5,r2,81111cfc <_fseeko_r+0x334>
81111cf4:	8809883a 	mov	r4,r17
81111cf8:	111b8c00 	call	8111b8c0 <_free_r>
81111cfc:	80000c15 	stw	zero,48(r16)
81111d00:	8080030b 	ldhu	r2,12(r16)
81111d04:	b4e7c83a 	sub	r19,r22,r19
81111d08:	10bff7cc 	andi	r2,r2,65503
81111d0c:	8080030d 	sth	r2,12(r16)
81111d10:	98000b26 	beq	r19,zero,81111d40 <_fseeko_r+0x378>
81111d14:	800b883a 	mov	r5,r16
81111d18:	8809883a 	mov	r4,r17
81111d1c:	1112dd00 	call	81112dd0 <__srefill_r>
81111d20:	103f641e 	bne	r2,zero,81111ab4 <__reset+0xfb0f1ab4>
81111d24:	80800117 	ldw	r2,4(r16)
81111d28:	14ff6236 	bltu	r2,r19,81111ab4 <__reset+0xfb0f1ab4>
81111d2c:	80c00017 	ldw	r3,0(r16)
81111d30:	14c5c83a 	sub	r2,r2,r19
81111d34:	80800115 	stw	r2,4(r16)
81111d38:	1ce7883a 	add	r19,r3,r19
81111d3c:	84c00015 	stw	r19,0(r16)
81111d40:	01800204 	movi	r6,8
81111d44:	000b883a 	mov	r5,zero
81111d48:	81001704 	addi	r4,r16,92
81111d4c:	1112acc0 	call	81112acc <memset>
81111d50:	0027883a 	mov	r19,zero
81111d54:	003f3d06 	br	81111a4c <__reset+0xfb0f1a4c>
81111d58:	80800417 	ldw	r2,16(r16)
81111d5c:	003f8306 	br	81111b6c <__reset+0xfb0f1b6c>
81111d60:	81400717 	ldw	r5,28(r16)
81111d64:	900f883a 	mov	r7,r18
81111d68:	000d883a 	mov	r6,zero
81111d6c:	8809883a 	mov	r4,r17
81111d70:	a03ee83a 	callr	r20
81111d74:	1027883a 	mov	r19,r2
81111d78:	00bfffc4 	movi	r2,-1
81111d7c:	98bf3226 	beq	r19,r2,81111a48 <__reset+0xfb0f1a48>
81111d80:	8080030b 	ldhu	r2,12(r16)
81111d84:	003f7006 	br	81111b48 <__reset+0xfb0f1b48>
81111d88:	8140038f 	ldh	r5,14(r16)
81111d8c:	283f4716 	blt	r5,zero,81111aac <__reset+0xfb0f1aac>
81111d90:	d80d883a 	mov	r6,sp
81111d94:	8809883a 	mov	r4,r17
81111d98:	1111e300 	call	81111e30 <_fstat_r>
81111d9c:	1000041e 	bne	r2,zero,81111db0 <_fseeko_r+0x3e8>
81111da0:	d8800117 	ldw	r2,4(sp)
81111da4:	00e00014 	movui	r3,32768
81111da8:	10bc000c 	andi	r2,r2,61440
81111dac:	10ff7c26 	beq	r2,r3,81111ba0 <__reset+0xfb0f1ba0>
81111db0:	8080030b 	ldhu	r2,12(r16)
81111db4:	003f3d06 	br	81111aac <__reset+0xfb0f1aac>
81111db8:	800b883a 	mov	r5,r16
81111dbc:	8809883a 	mov	r4,r17
81111dc0:	1111fa40 	call	81111fa4 <__smakebuf_r>
81111dc4:	003f3106 	br	81111a8c <__reset+0xfb0f1a8c>
81111dc8:	81400717 	ldw	r5,28(r16)
81111dcc:	01c00044 	movi	r7,1
81111dd0:	000d883a 	mov	r6,zero
81111dd4:	8809883a 	mov	r4,r17
81111dd8:	a03ee83a 	callr	r20
81111ddc:	00ffffc4 	movi	r3,-1
81111de0:	10ff7b1e 	bne	r2,r3,81111bd0 <__reset+0xfb0f1bd0>
81111de4:	003f3306 	br	81111ab4 <__reset+0xfb0f1ab4>
81111de8:	80c00017 	ldw	r3,0(r16)
81111dec:	80800417 	ldw	r2,16(r16)
81111df0:	000b883a 	mov	r5,zero
81111df4:	1887c83a 	sub	r3,r3,r2
81111df8:	98e7c83a 	sub	r19,r19,r3
81111dfc:	30c7883a 	add	r3,r6,r3
81111e00:	003f7f06 	br	81111c00 <__reset+0xfb0f1c00>
81111e04:	00800744 	movi	r2,29
81111e08:	88800015 	stw	r2,0(r17)
81111e0c:	04ffffc4 	movi	r19,-1
81111e10:	003f0e06 	br	81111a4c <__reset+0xfb0f1a4c>

81111e14 <fseeko>:
81111e14:	00a04534 	movhi	r2,33044
81111e18:	10821504 	addi	r2,r2,2132
81111e1c:	300f883a 	mov	r7,r6
81111e20:	280d883a 	mov	r6,r5
81111e24:	200b883a 	mov	r5,r4
81111e28:	11000017 	ldw	r4,0(r2)
81111e2c:	11119c81 	jmpi	811119c8 <_fseeko_r>

81111e30 <_fstat_r>:
81111e30:	defffd04 	addi	sp,sp,-12
81111e34:	de00012e 	bgeu	sp,et,81111e3c <_fstat_r+0xc>
81111e38:	003b68fa 	trap	3
81111e3c:	2805883a 	mov	r2,r5
81111e40:	dc000015 	stw	r16,0(sp)
81111e44:	04204534 	movhi	r16,33044
81111e48:	dc400115 	stw	r17,4(sp)
81111e4c:	84026e04 	addi	r16,r16,2488
81111e50:	2023883a 	mov	r17,r4
81111e54:	300b883a 	mov	r5,r6
81111e58:	1009883a 	mov	r4,r2
81111e5c:	dfc00215 	stw	ra,8(sp)
81111e60:	80000015 	stw	zero,0(r16)
81111e64:	11272600 	call	81127260 <fstat>
81111e68:	00ffffc4 	movi	r3,-1
81111e6c:	10c00526 	beq	r2,r3,81111e84 <_fstat_r+0x54>
81111e70:	dfc00217 	ldw	ra,8(sp)
81111e74:	dc400117 	ldw	r17,4(sp)
81111e78:	dc000017 	ldw	r16,0(sp)
81111e7c:	dec00304 	addi	sp,sp,12
81111e80:	f800283a 	ret
81111e84:	80c00017 	ldw	r3,0(r16)
81111e88:	183ff926 	beq	r3,zero,81111e70 <__reset+0xfb0f1e70>
81111e8c:	88c00015 	stw	r3,0(r17)
81111e90:	003ff706 	br	81111e70 <__reset+0xfb0f1e70>

81111e94 <_fwrite_r>:
81111e94:	defff504 	addi	sp,sp,-44
81111e98:	de00012e 	bgeu	sp,et,81111ea0 <_fwrite_r+0xc>
81111e9c:	003b68fa 	trap	3
81111ea0:	dc800815 	stw	r18,32(sp)
81111ea4:	39a5383a 	mul	r18,r7,r6
81111ea8:	d8800304 	addi	r2,sp,12
81111eac:	d8800015 	stw	r2,0(sp)
81111eb0:	00800044 	movi	r2,1
81111eb4:	dcc00915 	stw	r19,36(sp)
81111eb8:	dc400715 	stw	r17,28(sp)
81111ebc:	dc000615 	stw	r16,24(sp)
81111ec0:	d9400315 	stw	r5,12(sp)
81111ec4:	dfc00a15 	stw	ra,40(sp)
81111ec8:	dc800415 	stw	r18,16(sp)
81111ecc:	dc800215 	stw	r18,8(sp)
81111ed0:	d8800115 	stw	r2,4(sp)
81111ed4:	3027883a 	mov	r19,r6
81111ed8:	3821883a 	mov	r16,r7
81111edc:	2023883a 	mov	r17,r4
81111ee0:	d9400b17 	ldw	r5,44(sp)
81111ee4:	20000226 	beq	r4,zero,81111ef0 <_fwrite_r+0x5c>
81111ee8:	20800e17 	ldw	r2,56(r4)
81111eec:	10001a26 	beq	r2,zero,81111f58 <_fwrite_r+0xc4>
81111ef0:	2880030b 	ldhu	r2,12(r5)
81111ef4:	10c8000c 	andi	r3,r2,8192
81111ef8:	1800061e 	bne	r3,zero,81111f14 <_fwrite_r+0x80>
81111efc:	29001917 	ldw	r4,100(r5)
81111f00:	00f7ffc4 	movi	r3,-8193
81111f04:	10880014 	ori	r2,r2,8192
81111f08:	20c6703a 	and	r3,r4,r3
81111f0c:	2880030d 	sth	r2,12(r5)
81111f10:	28c01915 	stw	r3,100(r5)
81111f14:	d80d883a 	mov	r6,sp
81111f18:	8809883a 	mov	r4,r17
81111f1c:	111bbd80 	call	8111bbd8 <__sfvwrite_r>
81111f20:	10000b26 	beq	r2,zero,81111f50 <_fwrite_r+0xbc>
81111f24:	d9000217 	ldw	r4,8(sp)
81111f28:	980b883a 	mov	r5,r19
81111f2c:	9109c83a 	sub	r4,r18,r4
81111f30:	1124da80 	call	81124da8 <__udivsi3>
81111f34:	dfc00a17 	ldw	ra,40(sp)
81111f38:	dcc00917 	ldw	r19,36(sp)
81111f3c:	dc800817 	ldw	r18,32(sp)
81111f40:	dc400717 	ldw	r17,28(sp)
81111f44:	dc000617 	ldw	r16,24(sp)
81111f48:	dec00b04 	addi	sp,sp,44
81111f4c:	f800283a 	ret
81111f50:	8005883a 	mov	r2,r16
81111f54:	003ff706 	br	81111f34 <__reset+0xfb0f1f34>
81111f58:	d9400515 	stw	r5,20(sp)
81111f5c:	111b4280 	call	8111b428 <__sinit>
81111f60:	d9400517 	ldw	r5,20(sp)
81111f64:	003fe206 	br	81111ef0 <__reset+0xfb0f1ef0>

81111f68 <fwrite>:
81111f68:	defffe04 	addi	sp,sp,-8
81111f6c:	00a04534 	movhi	r2,33044
81111f70:	de00012e 	bgeu	sp,et,81111f78 <fwrite+0x10>
81111f74:	003b68fa 	trap	3
81111f78:	10821504 	addi	r2,r2,2132
81111f7c:	d9c00015 	stw	r7,0(sp)
81111f80:	300f883a 	mov	r7,r6
81111f84:	280d883a 	mov	r6,r5
81111f88:	200b883a 	mov	r5,r4
81111f8c:	11000017 	ldw	r4,0(r2)
81111f90:	dfc00115 	stw	ra,4(sp)
81111f94:	1111e940 	call	81111e94 <_fwrite_r>
81111f98:	dfc00117 	ldw	ra,4(sp)
81111f9c:	dec00204 	addi	sp,sp,8
81111fa0:	f800283a 	ret

81111fa4 <__smakebuf_r>:
81111fa4:	2880030b 	ldhu	r2,12(r5)
81111fa8:	10c0008c 	andi	r3,r2,2
81111fac:	1800431e 	bne	r3,zero,811120bc <__smakebuf_r+0x118>
81111fb0:	deffec04 	addi	sp,sp,-80
81111fb4:	de00012e 	bgeu	sp,et,81111fbc <__smakebuf_r+0x18>
81111fb8:	003b68fa 	trap	3
81111fbc:	dc000f15 	stw	r16,60(sp)
81111fc0:	2821883a 	mov	r16,r5
81111fc4:	2940038f 	ldh	r5,14(r5)
81111fc8:	dc401015 	stw	r17,64(sp)
81111fcc:	dfc01315 	stw	ra,76(sp)
81111fd0:	dcc01215 	stw	r19,72(sp)
81111fd4:	dc801115 	stw	r18,68(sp)
81111fd8:	2023883a 	mov	r17,r4
81111fdc:	28001c16 	blt	r5,zero,81112050 <__smakebuf_r+0xac>
81111fe0:	d80d883a 	mov	r6,sp
81111fe4:	1111e300 	call	81111e30 <_fstat_r>
81111fe8:	10001816 	blt	r2,zero,8111204c <__smakebuf_r+0xa8>
81111fec:	d8800117 	ldw	r2,4(sp)
81111ff0:	00e00014 	movui	r3,32768
81111ff4:	10bc000c 	andi	r2,r2,61440
81111ff8:	14c80020 	cmpeqi	r19,r2,8192
81111ffc:	10c03726 	beq	r2,r3,811120dc <__smakebuf_r+0x138>
81112000:	80c0030b 	ldhu	r3,12(r16)
81112004:	18c20014 	ori	r3,r3,2048
81112008:	80c0030d 	sth	r3,12(r16)
8111200c:	00c80004 	movi	r3,8192
81112010:	10c0521e 	bne	r2,r3,8111215c <__smakebuf_r+0x1b8>
81112014:	8140038f 	ldh	r5,14(r16)
81112018:	8809883a 	mov	r4,r17
8111201c:	111c2340 	call	8111c234 <_isatty_r>
81112020:	10004c26 	beq	r2,zero,81112154 <__smakebuf_r+0x1b0>
81112024:	8080030b 	ldhu	r2,12(r16)
81112028:	80c010c4 	addi	r3,r16,67
8111202c:	80c00015 	stw	r3,0(r16)
81112030:	10800054 	ori	r2,r2,1
81112034:	8080030d 	sth	r2,12(r16)
81112038:	00800044 	movi	r2,1
8111203c:	80c00415 	stw	r3,16(r16)
81112040:	80800515 	stw	r2,20(r16)
81112044:	04810004 	movi	r18,1024
81112048:	00000706 	br	81112068 <__smakebuf_r+0xc4>
8111204c:	8080030b 	ldhu	r2,12(r16)
81112050:	10c0200c 	andi	r3,r2,128
81112054:	18001f1e 	bne	r3,zero,811120d4 <__smakebuf_r+0x130>
81112058:	04810004 	movi	r18,1024
8111205c:	10820014 	ori	r2,r2,2048
81112060:	8080030d 	sth	r2,12(r16)
81112064:	0027883a 	mov	r19,zero
81112068:	900b883a 	mov	r5,r18
8111206c:	8809883a 	mov	r4,r17
81112070:	11121680 	call	81112168 <_malloc_r>
81112074:	10002c26 	beq	r2,zero,81112128 <__smakebuf_r+0x184>
81112078:	80c0030b 	ldhu	r3,12(r16)
8111207c:	012044b4 	movhi	r4,33042
81112080:	212c3204 	addi	r4,r4,-20280
81112084:	89000f15 	stw	r4,60(r17)
81112088:	18c02014 	ori	r3,r3,128
8111208c:	80c0030d 	sth	r3,12(r16)
81112090:	80800015 	stw	r2,0(r16)
81112094:	80800415 	stw	r2,16(r16)
81112098:	84800515 	stw	r18,20(r16)
8111209c:	98001a1e 	bne	r19,zero,81112108 <__smakebuf_r+0x164>
811120a0:	dfc01317 	ldw	ra,76(sp)
811120a4:	dcc01217 	ldw	r19,72(sp)
811120a8:	dc801117 	ldw	r18,68(sp)
811120ac:	dc401017 	ldw	r17,64(sp)
811120b0:	dc000f17 	ldw	r16,60(sp)
811120b4:	dec01404 	addi	sp,sp,80
811120b8:	f800283a 	ret
811120bc:	288010c4 	addi	r2,r5,67
811120c0:	28800015 	stw	r2,0(r5)
811120c4:	28800415 	stw	r2,16(r5)
811120c8:	00800044 	movi	r2,1
811120cc:	28800515 	stw	r2,20(r5)
811120d0:	f800283a 	ret
811120d4:	04801004 	movi	r18,64
811120d8:	003fe006 	br	8111205c <__reset+0xfb0f205c>
811120dc:	81000a17 	ldw	r4,40(r16)
811120e0:	00e04474 	movhi	r3,33041
811120e4:	18cc9004 	addi	r3,r3,12864
811120e8:	20ffc51e 	bne	r4,r3,81112000 <__reset+0xfb0f2000>
811120ec:	8080030b 	ldhu	r2,12(r16)
811120f0:	04810004 	movi	r18,1024
811120f4:	84801315 	stw	r18,76(r16)
811120f8:	1484b03a 	or	r2,r2,r18
811120fc:	8080030d 	sth	r2,12(r16)
81112100:	0027883a 	mov	r19,zero
81112104:	003fd806 	br	81112068 <__reset+0xfb0f2068>
81112108:	8140038f 	ldh	r5,14(r16)
8111210c:	8809883a 	mov	r4,r17
81112110:	111c2340 	call	8111c234 <_isatty_r>
81112114:	103fe226 	beq	r2,zero,811120a0 <__reset+0xfb0f20a0>
81112118:	8080030b 	ldhu	r2,12(r16)
8111211c:	10800054 	ori	r2,r2,1
81112120:	8080030d 	sth	r2,12(r16)
81112124:	003fde06 	br	811120a0 <__reset+0xfb0f20a0>
81112128:	8080030b 	ldhu	r2,12(r16)
8111212c:	10c0800c 	andi	r3,r2,512
81112130:	183fdb1e 	bne	r3,zero,811120a0 <__reset+0xfb0f20a0>
81112134:	10800094 	ori	r2,r2,2
81112138:	80c010c4 	addi	r3,r16,67
8111213c:	8080030d 	sth	r2,12(r16)
81112140:	00800044 	movi	r2,1
81112144:	80c00015 	stw	r3,0(r16)
81112148:	80c00415 	stw	r3,16(r16)
8111214c:	80800515 	stw	r2,20(r16)
81112150:	003fd306 	br	811120a0 <__reset+0xfb0f20a0>
81112154:	04810004 	movi	r18,1024
81112158:	003fc306 	br	81112068 <__reset+0xfb0f2068>
8111215c:	0027883a 	mov	r19,zero
81112160:	04810004 	movi	r18,1024
81112164:	003fc006 	br	81112068 <__reset+0xfb0f2068>

81112168 <_malloc_r>:
81112168:	defff504 	addi	sp,sp,-44
8111216c:	de00012e 	bgeu	sp,et,81112174 <_malloc_r+0xc>
81112170:	003b68fa 	trap	3
81112174:	288002c4 	addi	r2,r5,11
81112178:	dc800315 	stw	r18,12(sp)
8111217c:	dfc00a15 	stw	ra,40(sp)
81112180:	df000915 	stw	fp,36(sp)
81112184:	ddc00815 	stw	r23,32(sp)
81112188:	dd800715 	stw	r22,28(sp)
8111218c:	dd400615 	stw	r21,24(sp)
81112190:	dd000515 	stw	r20,20(sp)
81112194:	dcc00415 	stw	r19,16(sp)
81112198:	dc400215 	stw	r17,8(sp)
8111219c:	dc000115 	stw	r16,4(sp)
811121a0:	00c00584 	movi	r3,22
811121a4:	2025883a 	mov	r18,r4
811121a8:	18807f2e 	bgeu	r3,r2,811123a8 <_malloc_r+0x240>
811121ac:	047ffe04 	movi	r17,-8
811121b0:	1462703a 	and	r17,r2,r17
811121b4:	8800a316 	blt	r17,zero,81112444 <_malloc_r+0x2dc>
811121b8:	8940a236 	bltu	r17,r5,81112444 <_malloc_r+0x2dc>
811121bc:	11281f80 	call	811281f8 <__malloc_lock>
811121c0:	00807dc4 	movi	r2,503
811121c4:	1441e92e 	bgeu	r2,r17,8111296c <_malloc_r+0x804>
811121c8:	8804d27a 	srli	r2,r17,9
811121cc:	1000a126 	beq	r2,zero,81112454 <_malloc_r+0x2ec>
811121d0:	00c00104 	movi	r3,4
811121d4:	18811e36 	bltu	r3,r2,81112650 <_malloc_r+0x4e8>
811121d8:	8804d1ba 	srli	r2,r17,6
811121dc:	12000e44 	addi	r8,r2,57
811121e0:	11c00e04 	addi	r7,r2,56
811121e4:	4209883a 	add	r4,r8,r8
811121e8:	04e04534 	movhi	r19,33044
811121ec:	2109883a 	add	r4,r4,r4
811121f0:	9cfbfa04 	addi	r19,r19,-4120
811121f4:	2109883a 	add	r4,r4,r4
811121f8:	9909883a 	add	r4,r19,r4
811121fc:	24000117 	ldw	r16,4(r4)
81112200:	213ffe04 	addi	r4,r4,-8
81112204:	24009726 	beq	r4,r16,81112464 <_malloc_r+0x2fc>
81112208:	80800117 	ldw	r2,4(r16)
8111220c:	01bfff04 	movi	r6,-4
81112210:	014003c4 	movi	r5,15
81112214:	1184703a 	and	r2,r2,r6
81112218:	1447c83a 	sub	r3,r2,r17
8111221c:	28c00716 	blt	r5,r3,8111223c <_malloc_r+0xd4>
81112220:	1800920e 	bge	r3,zero,8111246c <_malloc_r+0x304>
81112224:	84000317 	ldw	r16,12(r16)
81112228:	24008e26 	beq	r4,r16,81112464 <_malloc_r+0x2fc>
8111222c:	80800117 	ldw	r2,4(r16)
81112230:	1184703a 	and	r2,r2,r6
81112234:	1447c83a 	sub	r3,r2,r17
81112238:	28fff90e 	bge	r5,r3,81112220 <__reset+0xfb0f2220>
8111223c:	3809883a 	mov	r4,r7
81112240:	01a04534 	movhi	r6,33044
81112244:	9c000417 	ldw	r16,16(r19)
81112248:	31bbfa04 	addi	r6,r6,-4120
8111224c:	32000204 	addi	r8,r6,8
81112250:	82013426 	beq	r16,r8,81112724 <_malloc_r+0x5bc>
81112254:	80c00117 	ldw	r3,4(r16)
81112258:	00bfff04 	movi	r2,-4
8111225c:	188e703a 	and	r7,r3,r2
81112260:	3c45c83a 	sub	r2,r7,r17
81112264:	00c003c4 	movi	r3,15
81112268:	18811f16 	blt	r3,r2,811126e8 <_malloc_r+0x580>
8111226c:	32000515 	stw	r8,20(r6)
81112270:	32000415 	stw	r8,16(r6)
81112274:	10007f0e 	bge	r2,zero,81112474 <_malloc_r+0x30c>
81112278:	00807fc4 	movi	r2,511
8111227c:	11c0fd36 	bltu	r2,r7,81112674 <_malloc_r+0x50c>
81112280:	3806d0fa 	srli	r3,r7,3
81112284:	01c00044 	movi	r7,1
81112288:	30800117 	ldw	r2,4(r6)
8111228c:	19400044 	addi	r5,r3,1
81112290:	294b883a 	add	r5,r5,r5
81112294:	1807d0ba 	srai	r3,r3,2
81112298:	294b883a 	add	r5,r5,r5
8111229c:	294b883a 	add	r5,r5,r5
811122a0:	298b883a 	add	r5,r5,r6
811122a4:	38c6983a 	sll	r3,r7,r3
811122a8:	29c00017 	ldw	r7,0(r5)
811122ac:	2a7ffe04 	addi	r9,r5,-8
811122b0:	1886b03a 	or	r3,r3,r2
811122b4:	82400315 	stw	r9,12(r16)
811122b8:	81c00215 	stw	r7,8(r16)
811122bc:	30c00115 	stw	r3,4(r6)
811122c0:	2c000015 	stw	r16,0(r5)
811122c4:	3c000315 	stw	r16,12(r7)
811122c8:	2005d0ba 	srai	r2,r4,2
811122cc:	01400044 	movi	r5,1
811122d0:	288a983a 	sll	r5,r5,r2
811122d4:	19406f36 	bltu	r3,r5,81112494 <_malloc_r+0x32c>
811122d8:	28c4703a 	and	r2,r5,r3
811122dc:	10000a1e 	bne	r2,zero,81112308 <_malloc_r+0x1a0>
811122e0:	00bfff04 	movi	r2,-4
811122e4:	294b883a 	add	r5,r5,r5
811122e8:	2088703a 	and	r4,r4,r2
811122ec:	28c4703a 	and	r2,r5,r3
811122f0:	21000104 	addi	r4,r4,4
811122f4:	1000041e 	bne	r2,zero,81112308 <_malloc_r+0x1a0>
811122f8:	294b883a 	add	r5,r5,r5
811122fc:	28c4703a 	and	r2,r5,r3
81112300:	21000104 	addi	r4,r4,4
81112304:	103ffc26 	beq	r2,zero,811122f8 <__reset+0xfb0f22f8>
81112308:	02bfff04 	movi	r10,-4
8111230c:	024003c4 	movi	r9,15
81112310:	21800044 	addi	r6,r4,1
81112314:	318d883a 	add	r6,r6,r6
81112318:	318d883a 	add	r6,r6,r6
8111231c:	318d883a 	add	r6,r6,r6
81112320:	998d883a 	add	r6,r19,r6
81112324:	333ffe04 	addi	r12,r6,-8
81112328:	2017883a 	mov	r11,r4
8111232c:	31800104 	addi	r6,r6,4
81112330:	34000017 	ldw	r16,0(r6)
81112334:	31fffd04 	addi	r7,r6,-12
81112338:	81c0041e 	bne	r16,r7,8111234c <_malloc_r+0x1e4>
8111233c:	0000fb06 	br	8111272c <_malloc_r+0x5c4>
81112340:	1801030e 	bge	r3,zero,81112750 <_malloc_r+0x5e8>
81112344:	84000317 	ldw	r16,12(r16)
81112348:	81c0f826 	beq	r16,r7,8111272c <_malloc_r+0x5c4>
8111234c:	80800117 	ldw	r2,4(r16)
81112350:	1284703a 	and	r2,r2,r10
81112354:	1447c83a 	sub	r3,r2,r17
81112358:	48fff90e 	bge	r9,r3,81112340 <__reset+0xfb0f2340>
8111235c:	80800317 	ldw	r2,12(r16)
81112360:	81000217 	ldw	r4,8(r16)
81112364:	89400054 	ori	r5,r17,1
81112368:	81400115 	stw	r5,4(r16)
8111236c:	20800315 	stw	r2,12(r4)
81112370:	11000215 	stw	r4,8(r2)
81112374:	8463883a 	add	r17,r16,r17
81112378:	9c400515 	stw	r17,20(r19)
8111237c:	9c400415 	stw	r17,16(r19)
81112380:	18800054 	ori	r2,r3,1
81112384:	88800115 	stw	r2,4(r17)
81112388:	8a000315 	stw	r8,12(r17)
8111238c:	8a000215 	stw	r8,8(r17)
81112390:	88e3883a 	add	r17,r17,r3
81112394:	88c00015 	stw	r3,0(r17)
81112398:	9009883a 	mov	r4,r18
8111239c:	11283200 	call	81128320 <__malloc_unlock>
811123a0:	80800204 	addi	r2,r16,8
811123a4:	00001b06 	br	81112414 <_malloc_r+0x2ac>
811123a8:	04400404 	movi	r17,16
811123ac:	89402536 	bltu	r17,r5,81112444 <_malloc_r+0x2dc>
811123b0:	11281f80 	call	811281f8 <__malloc_lock>
811123b4:	00800184 	movi	r2,6
811123b8:	01000084 	movi	r4,2
811123bc:	04e04534 	movhi	r19,33044
811123c0:	1085883a 	add	r2,r2,r2
811123c4:	9cfbfa04 	addi	r19,r19,-4120
811123c8:	1085883a 	add	r2,r2,r2
811123cc:	9885883a 	add	r2,r19,r2
811123d0:	14000117 	ldw	r16,4(r2)
811123d4:	10fffe04 	addi	r3,r2,-8
811123d8:	80c0d926 	beq	r16,r3,81112740 <_malloc_r+0x5d8>
811123dc:	80c00117 	ldw	r3,4(r16)
811123e0:	81000317 	ldw	r4,12(r16)
811123e4:	00bfff04 	movi	r2,-4
811123e8:	1884703a 	and	r2,r3,r2
811123ec:	81400217 	ldw	r5,8(r16)
811123f0:	8085883a 	add	r2,r16,r2
811123f4:	10c00117 	ldw	r3,4(r2)
811123f8:	29000315 	stw	r4,12(r5)
811123fc:	21400215 	stw	r5,8(r4)
81112400:	18c00054 	ori	r3,r3,1
81112404:	10c00115 	stw	r3,4(r2)
81112408:	9009883a 	mov	r4,r18
8111240c:	11283200 	call	81128320 <__malloc_unlock>
81112410:	80800204 	addi	r2,r16,8
81112414:	dfc00a17 	ldw	ra,40(sp)
81112418:	df000917 	ldw	fp,36(sp)
8111241c:	ddc00817 	ldw	r23,32(sp)
81112420:	dd800717 	ldw	r22,28(sp)
81112424:	dd400617 	ldw	r21,24(sp)
81112428:	dd000517 	ldw	r20,20(sp)
8111242c:	dcc00417 	ldw	r19,16(sp)
81112430:	dc800317 	ldw	r18,12(sp)
81112434:	dc400217 	ldw	r17,8(sp)
81112438:	dc000117 	ldw	r16,4(sp)
8111243c:	dec00b04 	addi	sp,sp,44
81112440:	f800283a 	ret
81112444:	00800304 	movi	r2,12
81112448:	90800015 	stw	r2,0(r18)
8111244c:	0005883a 	mov	r2,zero
81112450:	003ff006 	br	81112414 <__reset+0xfb0f2414>
81112454:	01002004 	movi	r4,128
81112458:	02001004 	movi	r8,64
8111245c:	01c00fc4 	movi	r7,63
81112460:	003f6106 	br	811121e8 <__reset+0xfb0f21e8>
81112464:	4009883a 	mov	r4,r8
81112468:	003f7506 	br	81112240 <__reset+0xfb0f2240>
8111246c:	81000317 	ldw	r4,12(r16)
81112470:	003fde06 	br	811123ec <__reset+0xfb0f23ec>
81112474:	81c5883a 	add	r2,r16,r7
81112478:	11400117 	ldw	r5,4(r2)
8111247c:	9009883a 	mov	r4,r18
81112480:	29400054 	ori	r5,r5,1
81112484:	11400115 	stw	r5,4(r2)
81112488:	11283200 	call	81128320 <__malloc_unlock>
8111248c:	80800204 	addi	r2,r16,8
81112490:	003fe006 	br	81112414 <__reset+0xfb0f2414>
81112494:	9c000217 	ldw	r16,8(r19)
81112498:	00bfff04 	movi	r2,-4
8111249c:	85800117 	ldw	r22,4(r16)
811124a0:	b0ac703a 	and	r22,r22,r2
811124a4:	b4400336 	bltu	r22,r17,811124b4 <_malloc_r+0x34c>
811124a8:	b445c83a 	sub	r2,r22,r17
811124ac:	00c003c4 	movi	r3,15
811124b0:	18805d16 	blt	r3,r2,81112628 <_malloc_r+0x4c0>
811124b4:	05e04534 	movhi	r23,33044
811124b8:	00a04534 	movhi	r2,33044
811124bc:	10827104 	addi	r2,r2,2500
811124c0:	bdc21604 	addi	r23,r23,2136
811124c4:	15400017 	ldw	r21,0(r2)
811124c8:	b8c00017 	ldw	r3,0(r23)
811124cc:	00bfffc4 	movi	r2,-1
811124d0:	858d883a 	add	r6,r16,r22
811124d4:	8d6b883a 	add	r21,r17,r21
811124d8:	1880ea26 	beq	r3,r2,81112884 <_malloc_r+0x71c>
811124dc:	ad4403c4 	addi	r21,r21,4111
811124e0:	00bc0004 	movi	r2,-4096
811124e4:	a8aa703a 	and	r21,r21,r2
811124e8:	a80b883a 	mov	r5,r21
811124ec:	9009883a 	mov	r4,r18
811124f0:	d9800015 	stw	r6,0(sp)
811124f4:	1112fac0 	call	81112fac <_sbrk_r>
811124f8:	1029883a 	mov	r20,r2
811124fc:	00bfffc4 	movi	r2,-1
81112500:	d9800017 	ldw	r6,0(sp)
81112504:	a080e826 	beq	r20,r2,811128a8 <_malloc_r+0x740>
81112508:	a180a636 	bltu	r20,r6,811127a4 <_malloc_r+0x63c>
8111250c:	07204534 	movhi	fp,33044
81112510:	e702d004 	addi	fp,fp,2880
81112514:	e0800017 	ldw	r2,0(fp)
81112518:	a887883a 	add	r3,r21,r2
8111251c:	e0c00015 	stw	r3,0(fp)
81112520:	3500e626 	beq	r6,r20,811128bc <_malloc_r+0x754>
81112524:	b9000017 	ldw	r4,0(r23)
81112528:	00bfffc4 	movi	r2,-1
8111252c:	2080ee26 	beq	r4,r2,811128e8 <_malloc_r+0x780>
81112530:	a185c83a 	sub	r2,r20,r6
81112534:	10c5883a 	add	r2,r2,r3
81112538:	e0800015 	stw	r2,0(fp)
8111253c:	a0c001cc 	andi	r3,r20,7
81112540:	1800bc26 	beq	r3,zero,81112834 <_malloc_r+0x6cc>
81112544:	a0e9c83a 	sub	r20,r20,r3
81112548:	00840204 	movi	r2,4104
8111254c:	a5000204 	addi	r20,r20,8
81112550:	10c7c83a 	sub	r3,r2,r3
81112554:	a545883a 	add	r2,r20,r21
81112558:	1083ffcc 	andi	r2,r2,4095
8111255c:	18abc83a 	sub	r21,r3,r2
81112560:	a80b883a 	mov	r5,r21
81112564:	9009883a 	mov	r4,r18
81112568:	1112fac0 	call	81112fac <_sbrk_r>
8111256c:	00ffffc4 	movi	r3,-1
81112570:	10c0e126 	beq	r2,r3,811128f8 <_malloc_r+0x790>
81112574:	1505c83a 	sub	r2,r2,r20
81112578:	1545883a 	add	r2,r2,r21
8111257c:	10800054 	ori	r2,r2,1
81112580:	e0c00017 	ldw	r3,0(fp)
81112584:	9d000215 	stw	r20,8(r19)
81112588:	a0800115 	stw	r2,4(r20)
8111258c:	a8c7883a 	add	r3,r21,r3
81112590:	e0c00015 	stw	r3,0(fp)
81112594:	84c00e26 	beq	r16,r19,811125d0 <_malloc_r+0x468>
81112598:	018003c4 	movi	r6,15
8111259c:	3580a72e 	bgeu	r6,r22,8111283c <_malloc_r+0x6d4>
811125a0:	81400117 	ldw	r5,4(r16)
811125a4:	013ffe04 	movi	r4,-8
811125a8:	b0bffd04 	addi	r2,r22,-12
811125ac:	1104703a 	and	r2,r2,r4
811125b0:	2900004c 	andi	r4,r5,1
811125b4:	2088b03a 	or	r4,r4,r2
811125b8:	81000115 	stw	r4,4(r16)
811125bc:	01400144 	movi	r5,5
811125c0:	8089883a 	add	r4,r16,r2
811125c4:	21400115 	stw	r5,4(r4)
811125c8:	21400215 	stw	r5,8(r4)
811125cc:	3080cd36 	bltu	r6,r2,81112904 <_malloc_r+0x79c>
811125d0:	00a04534 	movhi	r2,33044
811125d4:	10827004 	addi	r2,r2,2496
811125d8:	11000017 	ldw	r4,0(r2)
811125dc:	20c0012e 	bgeu	r4,r3,811125e4 <_malloc_r+0x47c>
811125e0:	10c00015 	stw	r3,0(r2)
811125e4:	00a04534 	movhi	r2,33044
811125e8:	10826f04 	addi	r2,r2,2492
811125ec:	11000017 	ldw	r4,0(r2)
811125f0:	9c000217 	ldw	r16,8(r19)
811125f4:	20c0012e 	bgeu	r4,r3,811125fc <_malloc_r+0x494>
811125f8:	10c00015 	stw	r3,0(r2)
811125fc:	80c00117 	ldw	r3,4(r16)
81112600:	00bfff04 	movi	r2,-4
81112604:	1886703a 	and	r3,r3,r2
81112608:	1c45c83a 	sub	r2,r3,r17
8111260c:	1c400236 	bltu	r3,r17,81112618 <_malloc_r+0x4b0>
81112610:	00c003c4 	movi	r3,15
81112614:	18800416 	blt	r3,r2,81112628 <_malloc_r+0x4c0>
81112618:	9009883a 	mov	r4,r18
8111261c:	11283200 	call	81128320 <__malloc_unlock>
81112620:	0005883a 	mov	r2,zero
81112624:	003f7b06 	br	81112414 <__reset+0xfb0f2414>
81112628:	88c00054 	ori	r3,r17,1
8111262c:	80c00115 	stw	r3,4(r16)
81112630:	8463883a 	add	r17,r16,r17
81112634:	10800054 	ori	r2,r2,1
81112638:	9c400215 	stw	r17,8(r19)
8111263c:	88800115 	stw	r2,4(r17)
81112640:	9009883a 	mov	r4,r18
81112644:	11283200 	call	81128320 <__malloc_unlock>
81112648:	80800204 	addi	r2,r16,8
8111264c:	003f7106 	br	81112414 <__reset+0xfb0f2414>
81112650:	00c00504 	movi	r3,20
81112654:	18804a2e 	bgeu	r3,r2,81112780 <_malloc_r+0x618>
81112658:	00c01504 	movi	r3,84
8111265c:	18806e36 	bltu	r3,r2,81112818 <_malloc_r+0x6b0>
81112660:	8804d33a 	srli	r2,r17,12
81112664:	12001bc4 	addi	r8,r2,111
81112668:	11c01b84 	addi	r7,r2,110
8111266c:	4209883a 	add	r4,r8,r8
81112670:	003edd06 	br	811121e8 <__reset+0xfb0f21e8>
81112674:	3804d27a 	srli	r2,r7,9
81112678:	00c00104 	movi	r3,4
8111267c:	1880442e 	bgeu	r3,r2,81112790 <_malloc_r+0x628>
81112680:	00c00504 	movi	r3,20
81112684:	18808136 	bltu	r3,r2,8111288c <_malloc_r+0x724>
81112688:	11401704 	addi	r5,r2,92
8111268c:	10c016c4 	addi	r3,r2,91
81112690:	294b883a 	add	r5,r5,r5
81112694:	294b883a 	add	r5,r5,r5
81112698:	294b883a 	add	r5,r5,r5
8111269c:	994b883a 	add	r5,r19,r5
811126a0:	28800017 	ldw	r2,0(r5)
811126a4:	01a04534 	movhi	r6,33044
811126a8:	297ffe04 	addi	r5,r5,-8
811126ac:	31bbfa04 	addi	r6,r6,-4120
811126b0:	28806526 	beq	r5,r2,81112848 <_malloc_r+0x6e0>
811126b4:	01bfff04 	movi	r6,-4
811126b8:	10c00117 	ldw	r3,4(r2)
811126bc:	1986703a 	and	r3,r3,r6
811126c0:	38c0022e 	bgeu	r7,r3,811126cc <_malloc_r+0x564>
811126c4:	10800217 	ldw	r2,8(r2)
811126c8:	28bffb1e 	bne	r5,r2,811126b8 <__reset+0xfb0f26b8>
811126cc:	11400317 	ldw	r5,12(r2)
811126d0:	98c00117 	ldw	r3,4(r19)
811126d4:	81400315 	stw	r5,12(r16)
811126d8:	80800215 	stw	r2,8(r16)
811126dc:	2c000215 	stw	r16,8(r5)
811126e0:	14000315 	stw	r16,12(r2)
811126e4:	003ef806 	br	811122c8 <__reset+0xfb0f22c8>
811126e8:	88c00054 	ori	r3,r17,1
811126ec:	80c00115 	stw	r3,4(r16)
811126f0:	8463883a 	add	r17,r16,r17
811126f4:	34400515 	stw	r17,20(r6)
811126f8:	34400415 	stw	r17,16(r6)
811126fc:	10c00054 	ori	r3,r2,1
81112700:	8a000315 	stw	r8,12(r17)
81112704:	8a000215 	stw	r8,8(r17)
81112708:	88c00115 	stw	r3,4(r17)
8111270c:	88a3883a 	add	r17,r17,r2
81112710:	88800015 	stw	r2,0(r17)
81112714:	9009883a 	mov	r4,r18
81112718:	11283200 	call	81128320 <__malloc_unlock>
8111271c:	80800204 	addi	r2,r16,8
81112720:	003f3c06 	br	81112414 <__reset+0xfb0f2414>
81112724:	30c00117 	ldw	r3,4(r6)
81112728:	003ee706 	br	811122c8 <__reset+0xfb0f22c8>
8111272c:	5ac00044 	addi	r11,r11,1
81112730:	588000cc 	andi	r2,r11,3
81112734:	31800204 	addi	r6,r6,8
81112738:	103efd1e 	bne	r2,zero,81112330 <__reset+0xfb0f2330>
8111273c:	00002406 	br	811127d0 <_malloc_r+0x668>
81112740:	14000317 	ldw	r16,12(r2)
81112744:	143f251e 	bne	r2,r16,811123dc <__reset+0xfb0f23dc>
81112748:	21000084 	addi	r4,r4,2
8111274c:	003ebc06 	br	81112240 <__reset+0xfb0f2240>
81112750:	8085883a 	add	r2,r16,r2
81112754:	10c00117 	ldw	r3,4(r2)
81112758:	81000317 	ldw	r4,12(r16)
8111275c:	81400217 	ldw	r5,8(r16)
81112760:	18c00054 	ori	r3,r3,1
81112764:	10c00115 	stw	r3,4(r2)
81112768:	29000315 	stw	r4,12(r5)
8111276c:	21400215 	stw	r5,8(r4)
81112770:	9009883a 	mov	r4,r18
81112774:	11283200 	call	81128320 <__malloc_unlock>
81112778:	80800204 	addi	r2,r16,8
8111277c:	003f2506 	br	81112414 <__reset+0xfb0f2414>
81112780:	12001704 	addi	r8,r2,92
81112784:	11c016c4 	addi	r7,r2,91
81112788:	4209883a 	add	r4,r8,r8
8111278c:	003e9606 	br	811121e8 <__reset+0xfb0f21e8>
81112790:	3804d1ba 	srli	r2,r7,6
81112794:	11400e44 	addi	r5,r2,57
81112798:	10c00e04 	addi	r3,r2,56
8111279c:	294b883a 	add	r5,r5,r5
811127a0:	003fbc06 	br	81112694 <__reset+0xfb0f2694>
811127a4:	84ff5926 	beq	r16,r19,8111250c <__reset+0xfb0f250c>
811127a8:	00a04534 	movhi	r2,33044
811127ac:	10bbfa04 	addi	r2,r2,-4120
811127b0:	14000217 	ldw	r16,8(r2)
811127b4:	00bfff04 	movi	r2,-4
811127b8:	80c00117 	ldw	r3,4(r16)
811127bc:	1886703a 	and	r3,r3,r2
811127c0:	003f9106 	br	81112608 <__reset+0xfb0f2608>
811127c4:	60800217 	ldw	r2,8(r12)
811127c8:	213fffc4 	addi	r4,r4,-1
811127cc:	1300651e 	bne	r2,r12,81112964 <_malloc_r+0x7fc>
811127d0:	208000cc 	andi	r2,r4,3
811127d4:	633ffe04 	addi	r12,r12,-8
811127d8:	103ffa1e 	bne	r2,zero,811127c4 <__reset+0xfb0f27c4>
811127dc:	98800117 	ldw	r2,4(r19)
811127e0:	0146303a 	nor	r3,zero,r5
811127e4:	1884703a 	and	r2,r3,r2
811127e8:	98800115 	stw	r2,4(r19)
811127ec:	294b883a 	add	r5,r5,r5
811127f0:	117f2836 	bltu	r2,r5,81112494 <__reset+0xfb0f2494>
811127f4:	283f2726 	beq	r5,zero,81112494 <__reset+0xfb0f2494>
811127f8:	2886703a 	and	r3,r5,r2
811127fc:	5809883a 	mov	r4,r11
81112800:	183ec31e 	bne	r3,zero,81112310 <__reset+0xfb0f2310>
81112804:	294b883a 	add	r5,r5,r5
81112808:	2886703a 	and	r3,r5,r2
8111280c:	21000104 	addi	r4,r4,4
81112810:	183ffc26 	beq	r3,zero,81112804 <__reset+0xfb0f2804>
81112814:	003ebe06 	br	81112310 <__reset+0xfb0f2310>
81112818:	00c05504 	movi	r3,340
8111281c:	18801236 	bltu	r3,r2,81112868 <_malloc_r+0x700>
81112820:	8804d3fa 	srli	r2,r17,15
81112824:	12001e04 	addi	r8,r2,120
81112828:	11c01dc4 	addi	r7,r2,119
8111282c:	4209883a 	add	r4,r8,r8
81112830:	003e6d06 	br	811121e8 <__reset+0xfb0f21e8>
81112834:	00c40004 	movi	r3,4096
81112838:	003f4606 	br	81112554 <__reset+0xfb0f2554>
8111283c:	00800044 	movi	r2,1
81112840:	a0800115 	stw	r2,4(r20)
81112844:	003f7406 	br	81112618 <__reset+0xfb0f2618>
81112848:	1805d0ba 	srai	r2,r3,2
8111284c:	01c00044 	movi	r7,1
81112850:	30c00117 	ldw	r3,4(r6)
81112854:	388e983a 	sll	r7,r7,r2
81112858:	2805883a 	mov	r2,r5
8111285c:	38c6b03a 	or	r3,r7,r3
81112860:	30c00115 	stw	r3,4(r6)
81112864:	003f9b06 	br	811126d4 <__reset+0xfb0f26d4>
81112868:	00c15504 	movi	r3,1364
8111286c:	18801a36 	bltu	r3,r2,811128d8 <_malloc_r+0x770>
81112870:	8804d4ba 	srli	r2,r17,18
81112874:	12001f44 	addi	r8,r2,125
81112878:	11c01f04 	addi	r7,r2,124
8111287c:	4209883a 	add	r4,r8,r8
81112880:	003e5906 	br	811121e8 <__reset+0xfb0f21e8>
81112884:	ad400404 	addi	r21,r21,16
81112888:	003f1706 	br	811124e8 <__reset+0xfb0f24e8>
8111288c:	00c01504 	movi	r3,84
81112890:	18802336 	bltu	r3,r2,81112920 <_malloc_r+0x7b8>
81112894:	3804d33a 	srli	r2,r7,12
81112898:	11401bc4 	addi	r5,r2,111
8111289c:	10c01b84 	addi	r3,r2,110
811128a0:	294b883a 	add	r5,r5,r5
811128a4:	003f7b06 	br	81112694 <__reset+0xfb0f2694>
811128a8:	9c000217 	ldw	r16,8(r19)
811128ac:	00bfff04 	movi	r2,-4
811128b0:	80c00117 	ldw	r3,4(r16)
811128b4:	1886703a 	and	r3,r3,r2
811128b8:	003f5306 	br	81112608 <__reset+0xfb0f2608>
811128bc:	3083ffcc 	andi	r2,r6,4095
811128c0:	103f181e 	bne	r2,zero,81112524 <__reset+0xfb0f2524>
811128c4:	99000217 	ldw	r4,8(r19)
811128c8:	b545883a 	add	r2,r22,r21
811128cc:	10800054 	ori	r2,r2,1
811128d0:	20800115 	stw	r2,4(r4)
811128d4:	003f3e06 	br	811125d0 <__reset+0xfb0f25d0>
811128d8:	01003f84 	movi	r4,254
811128dc:	02001fc4 	movi	r8,127
811128e0:	01c01f84 	movi	r7,126
811128e4:	003e4006 	br	811121e8 <__reset+0xfb0f21e8>
811128e8:	00a04534 	movhi	r2,33044
811128ec:	10821604 	addi	r2,r2,2136
811128f0:	15000015 	stw	r20,0(r2)
811128f4:	003f1106 	br	8111253c <__reset+0xfb0f253c>
811128f8:	00800044 	movi	r2,1
811128fc:	002b883a 	mov	r21,zero
81112900:	003f1f06 	br	81112580 <__reset+0xfb0f2580>
81112904:	81400204 	addi	r5,r16,8
81112908:	9009883a 	mov	r4,r18
8111290c:	111b8c00 	call	8111b8c0 <_free_r>
81112910:	00a04534 	movhi	r2,33044
81112914:	1082d004 	addi	r2,r2,2880
81112918:	10c00017 	ldw	r3,0(r2)
8111291c:	003f2c06 	br	811125d0 <__reset+0xfb0f25d0>
81112920:	00c05504 	movi	r3,340
81112924:	18800536 	bltu	r3,r2,8111293c <_malloc_r+0x7d4>
81112928:	3804d3fa 	srli	r2,r7,15
8111292c:	11401e04 	addi	r5,r2,120
81112930:	10c01dc4 	addi	r3,r2,119
81112934:	294b883a 	add	r5,r5,r5
81112938:	003f5606 	br	81112694 <__reset+0xfb0f2694>
8111293c:	00c15504 	movi	r3,1364
81112940:	18800536 	bltu	r3,r2,81112958 <_malloc_r+0x7f0>
81112944:	3804d4ba 	srli	r2,r7,18
81112948:	11401f44 	addi	r5,r2,125
8111294c:	10c01f04 	addi	r3,r2,124
81112950:	294b883a 	add	r5,r5,r5
81112954:	003f4f06 	br	81112694 <__reset+0xfb0f2694>
81112958:	01403f84 	movi	r5,254
8111295c:	00c01f84 	movi	r3,126
81112960:	003f4c06 	br	81112694 <__reset+0xfb0f2694>
81112964:	98800117 	ldw	r2,4(r19)
81112968:	003fa006 	br	811127ec <__reset+0xfb0f27ec>
8111296c:	8808d0fa 	srli	r4,r17,3
81112970:	20800044 	addi	r2,r4,1
81112974:	1085883a 	add	r2,r2,r2
81112978:	003e9006 	br	811123bc <__reset+0xfb0f23bc>

8111297c <memcpy>:
8111297c:	defffd04 	addi	sp,sp,-12
81112980:	de00012e 	bgeu	sp,et,81112988 <memcpy+0xc>
81112984:	003b68fa 	trap	3
81112988:	00c003c4 	movi	r3,15
8111298c:	dfc00215 	stw	ra,8(sp)
81112990:	dc400115 	stw	r17,4(sp)
81112994:	dc000015 	stw	r16,0(sp)
81112998:	2005883a 	mov	r2,r4
8111299c:	1980452e 	bgeu	r3,r6,81112ab4 <memcpy+0x138>
811129a0:	2906b03a 	or	r3,r5,r4
811129a4:	18c000cc 	andi	r3,r3,3
811129a8:	1800441e 	bne	r3,zero,81112abc <memcpy+0x140>
811129ac:	347ffc04 	addi	r17,r6,-16
811129b0:	8822d13a 	srli	r17,r17,4
811129b4:	28c00104 	addi	r3,r5,4
811129b8:	23400104 	addi	r13,r4,4
811129bc:	8820913a 	slli	r16,r17,4
811129c0:	2b000204 	addi	r12,r5,8
811129c4:	22c00204 	addi	r11,r4,8
811129c8:	84000504 	addi	r16,r16,20
811129cc:	2a800304 	addi	r10,r5,12
811129d0:	22400304 	addi	r9,r4,12
811129d4:	2c21883a 	add	r16,r5,r16
811129d8:	2811883a 	mov	r8,r5
811129dc:	200f883a 	mov	r7,r4
811129e0:	41000017 	ldw	r4,0(r8)
811129e4:	1fc00017 	ldw	ra,0(r3)
811129e8:	63c00017 	ldw	r15,0(r12)
811129ec:	39000015 	stw	r4,0(r7)
811129f0:	53800017 	ldw	r14,0(r10)
811129f4:	6fc00015 	stw	ra,0(r13)
811129f8:	5bc00015 	stw	r15,0(r11)
811129fc:	4b800015 	stw	r14,0(r9)
81112a00:	18c00404 	addi	r3,r3,16
81112a04:	39c00404 	addi	r7,r7,16
81112a08:	42000404 	addi	r8,r8,16
81112a0c:	6b400404 	addi	r13,r13,16
81112a10:	63000404 	addi	r12,r12,16
81112a14:	5ac00404 	addi	r11,r11,16
81112a18:	52800404 	addi	r10,r10,16
81112a1c:	4a400404 	addi	r9,r9,16
81112a20:	1c3fef1e 	bne	r3,r16,811129e0 <__reset+0xfb0f29e0>
81112a24:	89c00044 	addi	r7,r17,1
81112a28:	380e913a 	slli	r7,r7,4
81112a2c:	310003cc 	andi	r4,r6,15
81112a30:	02c000c4 	movi	r11,3
81112a34:	11c7883a 	add	r3,r2,r7
81112a38:	29cb883a 	add	r5,r5,r7
81112a3c:	5900212e 	bgeu	r11,r4,81112ac4 <memcpy+0x148>
81112a40:	1813883a 	mov	r9,r3
81112a44:	2811883a 	mov	r8,r5
81112a48:	200f883a 	mov	r7,r4
81112a4c:	42800017 	ldw	r10,0(r8)
81112a50:	4a400104 	addi	r9,r9,4
81112a54:	39ffff04 	addi	r7,r7,-4
81112a58:	4abfff15 	stw	r10,-4(r9)
81112a5c:	42000104 	addi	r8,r8,4
81112a60:	59fffa36 	bltu	r11,r7,81112a4c <__reset+0xfb0f2a4c>
81112a64:	213fff04 	addi	r4,r4,-4
81112a68:	2008d0ba 	srli	r4,r4,2
81112a6c:	318000cc 	andi	r6,r6,3
81112a70:	21000044 	addi	r4,r4,1
81112a74:	2109883a 	add	r4,r4,r4
81112a78:	2109883a 	add	r4,r4,r4
81112a7c:	1907883a 	add	r3,r3,r4
81112a80:	290b883a 	add	r5,r5,r4
81112a84:	30000626 	beq	r6,zero,81112aa0 <memcpy+0x124>
81112a88:	198d883a 	add	r6,r3,r6
81112a8c:	29c00003 	ldbu	r7,0(r5)
81112a90:	18c00044 	addi	r3,r3,1
81112a94:	29400044 	addi	r5,r5,1
81112a98:	19ffffc5 	stb	r7,-1(r3)
81112a9c:	19bffb1e 	bne	r3,r6,81112a8c <__reset+0xfb0f2a8c>
81112aa0:	dfc00217 	ldw	ra,8(sp)
81112aa4:	dc400117 	ldw	r17,4(sp)
81112aa8:	dc000017 	ldw	r16,0(sp)
81112aac:	dec00304 	addi	sp,sp,12
81112ab0:	f800283a 	ret
81112ab4:	2007883a 	mov	r3,r4
81112ab8:	003ff206 	br	81112a84 <__reset+0xfb0f2a84>
81112abc:	2007883a 	mov	r3,r4
81112ac0:	003ff106 	br	81112a88 <__reset+0xfb0f2a88>
81112ac4:	200d883a 	mov	r6,r4
81112ac8:	003fee06 	br	81112a84 <__reset+0xfb0f2a84>

81112acc <memset>:
81112acc:	20c000cc 	andi	r3,r4,3
81112ad0:	2005883a 	mov	r2,r4
81112ad4:	18004426 	beq	r3,zero,81112be8 <memset+0x11c>
81112ad8:	31ffffc4 	addi	r7,r6,-1
81112adc:	30004026 	beq	r6,zero,81112be0 <memset+0x114>
81112ae0:	2813883a 	mov	r9,r5
81112ae4:	200d883a 	mov	r6,r4
81112ae8:	2007883a 	mov	r3,r4
81112aec:	00000406 	br	81112b00 <memset+0x34>
81112af0:	3a3fffc4 	addi	r8,r7,-1
81112af4:	31800044 	addi	r6,r6,1
81112af8:	38003926 	beq	r7,zero,81112be0 <memset+0x114>
81112afc:	400f883a 	mov	r7,r8
81112b00:	18c00044 	addi	r3,r3,1
81112b04:	32400005 	stb	r9,0(r6)
81112b08:	1a0000cc 	andi	r8,r3,3
81112b0c:	403ff81e 	bne	r8,zero,81112af0 <__reset+0xfb0f2af0>
81112b10:	010000c4 	movi	r4,3
81112b14:	21c02d2e 	bgeu	r4,r7,81112bcc <memset+0x100>
81112b18:	29003fcc 	andi	r4,r5,255
81112b1c:	200c923a 	slli	r6,r4,8
81112b20:	3108b03a 	or	r4,r6,r4
81112b24:	200c943a 	slli	r6,r4,16
81112b28:	218cb03a 	or	r6,r4,r6
81112b2c:	010003c4 	movi	r4,15
81112b30:	21c0182e 	bgeu	r4,r7,81112b94 <memset+0xc8>
81112b34:	3b3ffc04 	addi	r12,r7,-16
81112b38:	6018d13a 	srli	r12,r12,4
81112b3c:	1a000104 	addi	r8,r3,4
81112b40:	1ac00204 	addi	r11,r3,8
81112b44:	6008913a 	slli	r4,r12,4
81112b48:	1a800304 	addi	r10,r3,12
81112b4c:	1813883a 	mov	r9,r3
81112b50:	21000504 	addi	r4,r4,20
81112b54:	1909883a 	add	r4,r3,r4
81112b58:	49800015 	stw	r6,0(r9)
81112b5c:	41800015 	stw	r6,0(r8)
81112b60:	59800015 	stw	r6,0(r11)
81112b64:	51800015 	stw	r6,0(r10)
81112b68:	42000404 	addi	r8,r8,16
81112b6c:	4a400404 	addi	r9,r9,16
81112b70:	5ac00404 	addi	r11,r11,16
81112b74:	52800404 	addi	r10,r10,16
81112b78:	413ff71e 	bne	r8,r4,81112b58 <__reset+0xfb0f2b58>
81112b7c:	63000044 	addi	r12,r12,1
81112b80:	6018913a 	slli	r12,r12,4
81112b84:	39c003cc 	andi	r7,r7,15
81112b88:	010000c4 	movi	r4,3
81112b8c:	1b07883a 	add	r3,r3,r12
81112b90:	21c00e2e 	bgeu	r4,r7,81112bcc <memset+0x100>
81112b94:	1813883a 	mov	r9,r3
81112b98:	3811883a 	mov	r8,r7
81112b9c:	010000c4 	movi	r4,3
81112ba0:	49800015 	stw	r6,0(r9)
81112ba4:	423fff04 	addi	r8,r8,-4
81112ba8:	4a400104 	addi	r9,r9,4
81112bac:	223ffc36 	bltu	r4,r8,81112ba0 <__reset+0xfb0f2ba0>
81112bb0:	393fff04 	addi	r4,r7,-4
81112bb4:	2008d0ba 	srli	r4,r4,2
81112bb8:	39c000cc 	andi	r7,r7,3
81112bbc:	21000044 	addi	r4,r4,1
81112bc0:	2109883a 	add	r4,r4,r4
81112bc4:	2109883a 	add	r4,r4,r4
81112bc8:	1907883a 	add	r3,r3,r4
81112bcc:	38000526 	beq	r7,zero,81112be4 <memset+0x118>
81112bd0:	19cf883a 	add	r7,r3,r7
81112bd4:	19400005 	stb	r5,0(r3)
81112bd8:	18c00044 	addi	r3,r3,1
81112bdc:	38fffd1e 	bne	r7,r3,81112bd4 <__reset+0xfb0f2bd4>
81112be0:	f800283a 	ret
81112be4:	f800283a 	ret
81112be8:	2007883a 	mov	r3,r4
81112bec:	300f883a 	mov	r7,r6
81112bf0:	003fc706 	br	81112b10 <__reset+0xfb0f2b10>

81112bf4 <_open_r>:
81112bf4:	defffd04 	addi	sp,sp,-12
81112bf8:	de00012e 	bgeu	sp,et,81112c00 <_open_r+0xc>
81112bfc:	003b68fa 	trap	3
81112c00:	2805883a 	mov	r2,r5
81112c04:	dc000015 	stw	r16,0(sp)
81112c08:	04204534 	movhi	r16,33044
81112c0c:	dc400115 	stw	r17,4(sp)
81112c10:	300b883a 	mov	r5,r6
81112c14:	84026e04 	addi	r16,r16,2488
81112c18:	2023883a 	mov	r17,r4
81112c1c:	380d883a 	mov	r6,r7
81112c20:	1009883a 	mov	r4,r2
81112c24:	dfc00215 	stw	ra,8(sp)
81112c28:	80000015 	stw	zero,0(r16)
81112c2c:	11278840 	call	81127884 <open>
81112c30:	00ffffc4 	movi	r3,-1
81112c34:	10c00526 	beq	r2,r3,81112c4c <_open_r+0x58>
81112c38:	dfc00217 	ldw	ra,8(sp)
81112c3c:	dc400117 	ldw	r17,4(sp)
81112c40:	dc000017 	ldw	r16,0(sp)
81112c44:	dec00304 	addi	sp,sp,12
81112c48:	f800283a 	ret
81112c4c:	80c00017 	ldw	r3,0(r16)
81112c50:	183ff926 	beq	r3,zero,81112c38 <__reset+0xfb0f2c38>
81112c54:	88c00015 	stw	r3,0(r17)
81112c58:	003ff706 	br	81112c38 <__reset+0xfb0f2c38>

81112c5c <_printf_r>:
81112c5c:	defffd04 	addi	sp,sp,-12
81112c60:	2805883a 	mov	r2,r5
81112c64:	de00012e 	bgeu	sp,et,81112c6c <_printf_r+0x10>
81112c68:	003b68fa 	trap	3
81112c6c:	dfc00015 	stw	ra,0(sp)
81112c70:	d9800115 	stw	r6,4(sp)
81112c74:	d9c00215 	stw	r7,8(sp)
81112c78:	21400217 	ldw	r5,8(r4)
81112c7c:	d9c00104 	addi	r7,sp,4
81112c80:	100d883a 	mov	r6,r2
81112c84:	11157cc0 	call	811157cc <___vfprintf_internal_r>
81112c88:	dfc00017 	ldw	ra,0(sp)
81112c8c:	dec00304 	addi	sp,sp,12
81112c90:	f800283a 	ret

81112c94 <printf>:
81112c94:	defffc04 	addi	sp,sp,-16
81112c98:	de00012e 	bgeu	sp,et,81112ca0 <printf+0xc>
81112c9c:	003b68fa 	trap	3
81112ca0:	dfc00015 	stw	ra,0(sp)
81112ca4:	d9400115 	stw	r5,4(sp)
81112ca8:	d9800215 	stw	r6,8(sp)
81112cac:	d9c00315 	stw	r7,12(sp)
81112cb0:	00a04534 	movhi	r2,33044
81112cb4:	10821504 	addi	r2,r2,2132
81112cb8:	10800017 	ldw	r2,0(r2)
81112cbc:	200b883a 	mov	r5,r4
81112cc0:	d9800104 	addi	r6,sp,4
81112cc4:	11000217 	ldw	r4,8(r2)
81112cc8:	11179cc0 	call	811179cc <__vfprintf_internal>
81112ccc:	dfc00017 	ldw	ra,0(sp)
81112cd0:	dec00404 	addi	sp,sp,16
81112cd4:	f800283a 	ret

81112cd8 <_puts_r>:
81112cd8:	defff604 	addi	sp,sp,-40
81112cdc:	de00012e 	bgeu	sp,et,81112ce4 <_puts_r+0xc>
81112ce0:	003b68fa 	trap	3
81112ce4:	dc000715 	stw	r16,28(sp)
81112ce8:	2021883a 	mov	r16,r4
81112cec:	2809883a 	mov	r4,r5
81112cf0:	dc400815 	stw	r17,32(sp)
81112cf4:	dfc00915 	stw	ra,36(sp)
81112cf8:	2823883a 	mov	r17,r5
81112cfc:	11132f80 	call	811132f8 <strlen>
81112d00:	10c00044 	addi	r3,r2,1
81112d04:	d8800115 	stw	r2,4(sp)
81112d08:	00a04534 	movhi	r2,33044
81112d0c:	10b90a04 	addi	r2,r2,-7128
81112d10:	d8800215 	stw	r2,8(sp)
81112d14:	00800044 	movi	r2,1
81112d18:	d8800315 	stw	r2,12(sp)
81112d1c:	00800084 	movi	r2,2
81112d20:	dc400015 	stw	r17,0(sp)
81112d24:	d8c00615 	stw	r3,24(sp)
81112d28:	dec00415 	stw	sp,16(sp)
81112d2c:	d8800515 	stw	r2,20(sp)
81112d30:	80000226 	beq	r16,zero,81112d3c <_puts_r+0x64>
81112d34:	80800e17 	ldw	r2,56(r16)
81112d38:	10001426 	beq	r2,zero,81112d8c <_puts_r+0xb4>
81112d3c:	81400217 	ldw	r5,8(r16)
81112d40:	2880030b 	ldhu	r2,12(r5)
81112d44:	10c8000c 	andi	r3,r2,8192
81112d48:	1800061e 	bne	r3,zero,81112d64 <_puts_r+0x8c>
81112d4c:	29001917 	ldw	r4,100(r5)
81112d50:	00f7ffc4 	movi	r3,-8193
81112d54:	10880014 	ori	r2,r2,8192
81112d58:	20c6703a 	and	r3,r4,r3
81112d5c:	2880030d 	sth	r2,12(r5)
81112d60:	28c01915 	stw	r3,100(r5)
81112d64:	d9800404 	addi	r6,sp,16
81112d68:	8009883a 	mov	r4,r16
81112d6c:	111bbd80 	call	8111bbd8 <__sfvwrite_r>
81112d70:	1000091e 	bne	r2,zero,81112d98 <_puts_r+0xc0>
81112d74:	00800284 	movi	r2,10
81112d78:	dfc00917 	ldw	ra,36(sp)
81112d7c:	dc400817 	ldw	r17,32(sp)
81112d80:	dc000717 	ldw	r16,28(sp)
81112d84:	dec00a04 	addi	sp,sp,40
81112d88:	f800283a 	ret
81112d8c:	8009883a 	mov	r4,r16
81112d90:	111b4280 	call	8111b428 <__sinit>
81112d94:	003fe906 	br	81112d3c <__reset+0xfb0f2d3c>
81112d98:	00bfffc4 	movi	r2,-1
81112d9c:	003ff606 	br	81112d78 <__reset+0xfb0f2d78>

81112da0 <puts>:
81112da0:	00a04534 	movhi	r2,33044
81112da4:	10821504 	addi	r2,r2,2132
81112da8:	200b883a 	mov	r5,r4
81112dac:	11000017 	ldw	r4,0(r2)
81112db0:	1112cd81 	jmpi	81112cd8 <_puts_r>

81112db4 <lflush>:
81112db4:	2080030b 	ldhu	r2,12(r4)
81112db8:	00c00244 	movi	r3,9
81112dbc:	1080024c 	andi	r2,r2,9
81112dc0:	10c00226 	beq	r2,r3,81112dcc <lflush+0x18>
81112dc4:	0005883a 	mov	r2,zero
81112dc8:	f800283a 	ret
81112dcc:	111b0901 	jmpi	8111b090 <fflush>

81112dd0 <__srefill_r>:
81112dd0:	defffc04 	addi	sp,sp,-16
81112dd4:	de00012e 	bgeu	sp,et,81112ddc <__srefill_r+0xc>
81112dd8:	003b68fa 	trap	3
81112ddc:	dc400115 	stw	r17,4(sp)
81112de0:	dc000015 	stw	r16,0(sp)
81112de4:	dfc00315 	stw	ra,12(sp)
81112de8:	dc800215 	stw	r18,8(sp)
81112dec:	2023883a 	mov	r17,r4
81112df0:	2821883a 	mov	r16,r5
81112df4:	20000226 	beq	r4,zero,81112e00 <__srefill_r+0x30>
81112df8:	20800e17 	ldw	r2,56(r4)
81112dfc:	10003c26 	beq	r2,zero,81112ef0 <__srefill_r+0x120>
81112e00:	80c0030b 	ldhu	r3,12(r16)
81112e04:	1908000c 	andi	r4,r3,8192
81112e08:	1805883a 	mov	r2,r3
81112e0c:	2000071e 	bne	r4,zero,81112e2c <__srefill_r+0x5c>
81112e10:	81001917 	ldw	r4,100(r16)
81112e14:	18880014 	ori	r2,r3,8192
81112e18:	00f7ffc4 	movi	r3,-8193
81112e1c:	20c8703a 	and	r4,r4,r3
81112e20:	8080030d 	sth	r2,12(r16)
81112e24:	1007883a 	mov	r3,r2
81112e28:	81001915 	stw	r4,100(r16)
81112e2c:	80000115 	stw	zero,4(r16)
81112e30:	1100080c 	andi	r4,r2,32
81112e34:	2000571e 	bne	r4,zero,81112f94 <__srefill_r+0x1c4>
81112e38:	1100010c 	andi	r4,r2,4
81112e3c:	20001f26 	beq	r4,zero,81112ebc <__srefill_r+0xec>
81112e40:	81400c17 	ldw	r5,48(r16)
81112e44:	28000826 	beq	r5,zero,81112e68 <__srefill_r+0x98>
81112e48:	80801004 	addi	r2,r16,64
81112e4c:	28800226 	beq	r5,r2,81112e58 <__srefill_r+0x88>
81112e50:	8809883a 	mov	r4,r17
81112e54:	111b8c00 	call	8111b8c0 <_free_r>
81112e58:	80800f17 	ldw	r2,60(r16)
81112e5c:	80000c15 	stw	zero,48(r16)
81112e60:	80800115 	stw	r2,4(r16)
81112e64:	1000391e 	bne	r2,zero,81112f4c <__srefill_r+0x17c>
81112e68:	80800417 	ldw	r2,16(r16)
81112e6c:	10004b26 	beq	r2,zero,81112f9c <__srefill_r+0x1cc>
81112e70:	8480030b 	ldhu	r18,12(r16)
81112e74:	908000cc 	andi	r2,r18,3
81112e78:	10001f1e 	bne	r2,zero,81112ef8 <__srefill_r+0x128>
81112e7c:	81800417 	ldw	r6,16(r16)
81112e80:	80800817 	ldw	r2,32(r16)
81112e84:	81c00517 	ldw	r7,20(r16)
81112e88:	81400717 	ldw	r5,28(r16)
81112e8c:	81800015 	stw	r6,0(r16)
81112e90:	8809883a 	mov	r4,r17
81112e94:	103ee83a 	callr	r2
81112e98:	80800115 	stw	r2,4(r16)
81112e9c:	00800e0e 	bge	zero,r2,81112ed8 <__srefill_r+0x108>
81112ea0:	0005883a 	mov	r2,zero
81112ea4:	dfc00317 	ldw	ra,12(sp)
81112ea8:	dc800217 	ldw	r18,8(sp)
81112eac:	dc400117 	ldw	r17,4(sp)
81112eb0:	dc000017 	ldw	r16,0(sp)
81112eb4:	dec00404 	addi	sp,sp,16
81112eb8:	f800283a 	ret
81112ebc:	1100040c 	andi	r4,r2,16
81112ec0:	20003026 	beq	r4,zero,81112f84 <__srefill_r+0x1b4>
81112ec4:	1080020c 	andi	r2,r2,8
81112ec8:	1000241e 	bne	r2,zero,81112f5c <__srefill_r+0x18c>
81112ecc:	18c00114 	ori	r3,r3,4
81112ed0:	80c0030d 	sth	r3,12(r16)
81112ed4:	003fe406 	br	81112e68 <__reset+0xfb0f2e68>
81112ed8:	80c0030b 	ldhu	r3,12(r16)
81112edc:	1000161e 	bne	r2,zero,81112f38 <__srefill_r+0x168>
81112ee0:	18c00814 	ori	r3,r3,32
81112ee4:	00bfffc4 	movi	r2,-1
81112ee8:	80c0030d 	sth	r3,12(r16)
81112eec:	003fed06 	br	81112ea4 <__reset+0xfb0f2ea4>
81112ef0:	111b4280 	call	8111b428 <__sinit>
81112ef4:	003fc206 	br	81112e00 <__reset+0xfb0f2e00>
81112ef8:	00a04534 	movhi	r2,33044
81112efc:	10821404 	addi	r2,r2,2128
81112f00:	11000017 	ldw	r4,0(r2)
81112f04:	01604474 	movhi	r5,33041
81112f08:	00800044 	movi	r2,1
81112f0c:	294b6d04 	addi	r5,r5,11700
81112f10:	8080030d 	sth	r2,12(r16)
81112f14:	111c09c0 	call	8111c09c <_fwalk>
81112f18:	00800244 	movi	r2,9
81112f1c:	8480030d 	sth	r18,12(r16)
81112f20:	9480024c 	andi	r18,r18,9
81112f24:	90bfd51e 	bne	r18,r2,81112e7c <__reset+0xfb0f2e7c>
81112f28:	800b883a 	mov	r5,r16
81112f2c:	8809883a 	mov	r4,r17
81112f30:	111ae080 	call	8111ae08 <__sflush_r>
81112f34:	003fd106 	br	81112e7c <__reset+0xfb0f2e7c>
81112f38:	18c01014 	ori	r3,r3,64
81112f3c:	80000115 	stw	zero,4(r16)
81112f40:	00bfffc4 	movi	r2,-1
81112f44:	80c0030d 	sth	r3,12(r16)
81112f48:	003fd606 	br	81112ea4 <__reset+0xfb0f2ea4>
81112f4c:	80c00e17 	ldw	r3,56(r16)
81112f50:	0005883a 	mov	r2,zero
81112f54:	80c00015 	stw	r3,0(r16)
81112f58:	003fd206 	br	81112ea4 <__reset+0xfb0f2ea4>
81112f5c:	800b883a 	mov	r5,r16
81112f60:	8809883a 	mov	r4,r17
81112f64:	111b02c0 	call	8111b02c <_fflush_r>
81112f68:	10000a1e 	bne	r2,zero,81112f94 <__srefill_r+0x1c4>
81112f6c:	8080030b 	ldhu	r2,12(r16)
81112f70:	00fffdc4 	movi	r3,-9
81112f74:	80000215 	stw	zero,8(r16)
81112f78:	1886703a 	and	r3,r3,r2
81112f7c:	80000615 	stw	zero,24(r16)
81112f80:	003fd206 	br	81112ecc <__reset+0xfb0f2ecc>
81112f84:	00800244 	movi	r2,9
81112f88:	88800015 	stw	r2,0(r17)
81112f8c:	18c01014 	ori	r3,r3,64
81112f90:	80c0030d 	sth	r3,12(r16)
81112f94:	00bfffc4 	movi	r2,-1
81112f98:	003fc206 	br	81112ea4 <__reset+0xfb0f2ea4>
81112f9c:	800b883a 	mov	r5,r16
81112fa0:	8809883a 	mov	r4,r17
81112fa4:	1111fa40 	call	81111fa4 <__smakebuf_r>
81112fa8:	003fb106 	br	81112e70 <__reset+0xfb0f2e70>

81112fac <_sbrk_r>:
81112fac:	defffd04 	addi	sp,sp,-12
81112fb0:	de00012e 	bgeu	sp,et,81112fb8 <_sbrk_r+0xc>
81112fb4:	003b68fa 	trap	3
81112fb8:	dc000015 	stw	r16,0(sp)
81112fbc:	04204534 	movhi	r16,33044
81112fc0:	dc400115 	stw	r17,4(sp)
81112fc4:	84026e04 	addi	r16,r16,2488
81112fc8:	2023883a 	mov	r17,r4
81112fcc:	2809883a 	mov	r4,r5
81112fd0:	dfc00215 	stw	ra,8(sp)
81112fd4:	80000015 	stw	zero,0(r16)
81112fd8:	1127b940 	call	81127b94 <sbrk>
81112fdc:	00ffffc4 	movi	r3,-1
81112fe0:	10c00526 	beq	r2,r3,81112ff8 <_sbrk_r+0x4c>
81112fe4:	dfc00217 	ldw	ra,8(sp)
81112fe8:	dc400117 	ldw	r17,4(sp)
81112fec:	dc000017 	ldw	r16,0(sp)
81112ff0:	dec00304 	addi	sp,sp,12
81112ff4:	f800283a 	ret
81112ff8:	80c00017 	ldw	r3,0(r16)
81112ffc:	183ff926 	beq	r3,zero,81112fe4 <__reset+0xfb0f2fe4>
81113000:	88c00015 	stw	r3,0(r17)
81113004:	003ff706 	br	81112fe4 <__reset+0xfb0f2fe4>

81113008 <scanf>:
81113008:	defffc04 	addi	sp,sp,-16
8111300c:	de00012e 	bgeu	sp,et,81113014 <scanf+0xc>
81113010:	003b68fa 	trap	3
81113014:	dfc00015 	stw	ra,0(sp)
81113018:	d9400115 	stw	r5,4(sp)
8111301c:	d9800215 	stw	r6,8(sp)
81113020:	d9c00315 	stw	r7,12(sp)
81113024:	00a04534 	movhi	r2,33044
81113028:	10821504 	addi	r2,r2,2132
8111302c:	200d883a 	mov	r6,r4
81113030:	11000017 	ldw	r4,0(r2)
81113034:	d9c00104 	addi	r7,sp,4
81113038:	21400117 	ldw	r5,4(r4)
8111303c:	11192fc0 	call	811192fc <_vfscanf_r>
81113040:	dfc00017 	ldw	ra,0(sp)
81113044:	dec00404 	addi	sp,sp,16
81113048:	f800283a 	ret

8111304c <_scanf_r>:
8111304c:	defffd04 	addi	sp,sp,-12
81113050:	2805883a 	mov	r2,r5
81113054:	de00012e 	bgeu	sp,et,8111305c <_scanf_r+0x10>
81113058:	003b68fa 	trap	3
8111305c:	dfc00015 	stw	ra,0(sp)
81113060:	d9800115 	stw	r6,4(sp)
81113064:	d9c00215 	stw	r7,8(sp)
81113068:	21400117 	ldw	r5,4(r4)
8111306c:	d9c00104 	addi	r7,sp,4
81113070:	100d883a 	mov	r6,r2
81113074:	11192fc0 	call	811192fc <_vfscanf_r>
81113078:	dfc00017 	ldw	ra,0(sp)
8111307c:	dec00304 	addi	sp,sp,12
81113080:	f800283a 	ret

81113084 <_sprintf_r>:
81113084:	deffe404 	addi	sp,sp,-112
81113088:	2807883a 	mov	r3,r5
8111308c:	de00012e 	bgeu	sp,et,81113094 <_sprintf_r+0x10>
81113090:	003b68fa 	trap	3
81113094:	dfc01a15 	stw	ra,104(sp)
81113098:	d9c01b15 	stw	r7,108(sp)
8111309c:	00a00034 	movhi	r2,32768
811130a0:	10bfffc4 	addi	r2,r2,-1
811130a4:	02008204 	movi	r8,520
811130a8:	d8800215 	stw	r2,8(sp)
811130ac:	d8800515 	stw	r2,20(sp)
811130b0:	d9c01b04 	addi	r7,sp,108
811130b4:	d80b883a 	mov	r5,sp
811130b8:	00bfffc4 	movi	r2,-1
811130bc:	d8c00015 	stw	r3,0(sp)
811130c0:	d8c00415 	stw	r3,16(sp)
811130c4:	da00030d 	sth	r8,12(sp)
811130c8:	d880038d 	sth	r2,14(sp)
811130cc:	11135ec0 	call	811135ec <___svfprintf_internal_r>
811130d0:	d8c00017 	ldw	r3,0(sp)
811130d4:	18000005 	stb	zero,0(r3)
811130d8:	dfc01a17 	ldw	ra,104(sp)
811130dc:	dec01c04 	addi	sp,sp,112
811130e0:	f800283a 	ret

811130e4 <sprintf>:
811130e4:	deffe304 	addi	sp,sp,-116
811130e8:	2007883a 	mov	r3,r4
811130ec:	de00012e 	bgeu	sp,et,811130f4 <sprintf+0x10>
811130f0:	003b68fa 	trap	3
811130f4:	dfc01a15 	stw	ra,104(sp)
811130f8:	d9801b15 	stw	r6,108(sp)
811130fc:	d9c01c15 	stw	r7,112(sp)
81113100:	01204534 	movhi	r4,33044
81113104:	21021504 	addi	r4,r4,2132
81113108:	21000017 	ldw	r4,0(r4)
8111310c:	00a00034 	movhi	r2,32768
81113110:	10bfffc4 	addi	r2,r2,-1
81113114:	280d883a 	mov	r6,r5
81113118:	02008204 	movi	r8,520
8111311c:	d8800215 	stw	r2,8(sp)
81113120:	d8800515 	stw	r2,20(sp)
81113124:	d9c01b04 	addi	r7,sp,108
81113128:	d80b883a 	mov	r5,sp
8111312c:	00bfffc4 	movi	r2,-1
81113130:	d8c00015 	stw	r3,0(sp)
81113134:	d8c00415 	stw	r3,16(sp)
81113138:	da00030d 	sth	r8,12(sp)
8111313c:	d880038d 	sth	r2,14(sp)
81113140:	11135ec0 	call	811135ec <___svfprintf_internal_r>
81113144:	d8c00017 	ldw	r3,0(sp)
81113148:	18000005 	stb	zero,0(r3)
8111314c:	dfc01a17 	ldw	ra,104(sp)
81113150:	dec01d04 	addi	sp,sp,116
81113154:	f800283a 	ret

81113158 <__sread>:
81113158:	defffe04 	addi	sp,sp,-8
8111315c:	de00012e 	bgeu	sp,et,81113164 <__sread+0xc>
81113160:	003b68fa 	trap	3
81113164:	dc000015 	stw	r16,0(sp)
81113168:	2821883a 	mov	r16,r5
8111316c:	2940038f 	ldh	r5,14(r5)
81113170:	dfc00115 	stw	ra,4(sp)
81113174:	111d8ec0 	call	8111d8ec <_read_r>
81113178:	10000716 	blt	r2,zero,81113198 <__sread+0x40>
8111317c:	80c01417 	ldw	r3,80(r16)
81113180:	1887883a 	add	r3,r3,r2
81113184:	80c01415 	stw	r3,80(r16)
81113188:	dfc00117 	ldw	ra,4(sp)
8111318c:	dc000017 	ldw	r16,0(sp)
81113190:	dec00204 	addi	sp,sp,8
81113194:	f800283a 	ret
81113198:	80c0030b 	ldhu	r3,12(r16)
8111319c:	18fbffcc 	andi	r3,r3,61439
811131a0:	80c0030d 	sth	r3,12(r16)
811131a4:	dfc00117 	ldw	ra,4(sp)
811131a8:	dc000017 	ldw	r16,0(sp)
811131ac:	dec00204 	addi	sp,sp,8
811131b0:	f800283a 	ret

811131b4 <__seofread>:
811131b4:	0005883a 	mov	r2,zero
811131b8:	f800283a 	ret

811131bc <__swrite>:
811131bc:	defffb04 	addi	sp,sp,-20
811131c0:	de00012e 	bgeu	sp,et,811131c8 <__swrite+0xc>
811131c4:	003b68fa 	trap	3
811131c8:	2880030b 	ldhu	r2,12(r5)
811131cc:	dcc00315 	stw	r19,12(sp)
811131d0:	dc800215 	stw	r18,8(sp)
811131d4:	dc400115 	stw	r17,4(sp)
811131d8:	dc000015 	stw	r16,0(sp)
811131dc:	dfc00415 	stw	ra,16(sp)
811131e0:	10c0400c 	andi	r3,r2,256
811131e4:	2821883a 	mov	r16,r5
811131e8:	2023883a 	mov	r17,r4
811131ec:	3025883a 	mov	r18,r6
811131f0:	3827883a 	mov	r19,r7
811131f4:	18000526 	beq	r3,zero,8111320c <__swrite+0x50>
811131f8:	2940038f 	ldh	r5,14(r5)
811131fc:	01c00084 	movi	r7,2
81113200:	000d883a 	mov	r6,zero
81113204:	111c3a40 	call	8111c3a4 <_lseek_r>
81113208:	8080030b 	ldhu	r2,12(r16)
8111320c:	8140038f 	ldh	r5,14(r16)
81113210:	10bbffcc 	andi	r2,r2,61439
81113214:	980f883a 	mov	r7,r19
81113218:	900d883a 	mov	r6,r18
8111321c:	8809883a 	mov	r4,r17
81113220:	8080030d 	sth	r2,12(r16)
81113224:	dfc00417 	ldw	ra,16(sp)
81113228:	dcc00317 	ldw	r19,12(sp)
8111322c:	dc800217 	ldw	r18,8(sp)
81113230:	dc400117 	ldw	r17,4(sp)
81113234:	dc000017 	ldw	r16,0(sp)
81113238:	dec00504 	addi	sp,sp,20
8111323c:	11193501 	jmpi	81119350 <_write_r>

81113240 <__sseek>:
81113240:	defffe04 	addi	sp,sp,-8
81113244:	de00012e 	bgeu	sp,et,8111324c <__sseek+0xc>
81113248:	003b68fa 	trap	3
8111324c:	dc000015 	stw	r16,0(sp)
81113250:	2821883a 	mov	r16,r5
81113254:	2940038f 	ldh	r5,14(r5)
81113258:	dfc00115 	stw	ra,4(sp)
8111325c:	111c3a40 	call	8111c3a4 <_lseek_r>
81113260:	00ffffc4 	movi	r3,-1
81113264:	10c00826 	beq	r2,r3,81113288 <__sseek+0x48>
81113268:	80c0030b 	ldhu	r3,12(r16)
8111326c:	80801415 	stw	r2,80(r16)
81113270:	18c40014 	ori	r3,r3,4096
81113274:	80c0030d 	sth	r3,12(r16)
81113278:	dfc00117 	ldw	ra,4(sp)
8111327c:	dc000017 	ldw	r16,0(sp)
81113280:	dec00204 	addi	sp,sp,8
81113284:	f800283a 	ret
81113288:	80c0030b 	ldhu	r3,12(r16)
8111328c:	18fbffcc 	andi	r3,r3,61439
81113290:	80c0030d 	sth	r3,12(r16)
81113294:	dfc00117 	ldw	ra,4(sp)
81113298:	dc000017 	ldw	r16,0(sp)
8111329c:	dec00204 	addi	sp,sp,8
811132a0:	f800283a 	ret

811132a4 <__sclose>:
811132a4:	2940038f 	ldh	r5,14(r5)
811132a8:	11195141 	jmpi	81119514 <_close_r>

811132ac <strcspn>:
811132ac:	21c00007 	ldb	r7,0(r4)
811132b0:	38000f26 	beq	r7,zero,811132f0 <strcspn+0x44>
811132b4:	2a000007 	ldb	r8,0(r5)
811132b8:	2005883a 	mov	r2,r4
811132bc:	40000726 	beq	r8,zero,811132dc <strcspn+0x30>
811132c0:	3a000926 	beq	r7,r8,811132e8 <strcspn+0x3c>
811132c4:	2807883a 	mov	r3,r5
811132c8:	00000106 	br	811132d0 <strcspn+0x24>
811132cc:	31c00626 	beq	r6,r7,811132e8 <strcspn+0x3c>
811132d0:	18c00044 	addi	r3,r3,1
811132d4:	19800007 	ldb	r6,0(r3)
811132d8:	303ffc1e 	bne	r6,zero,811132cc <__reset+0xfb0f32cc>
811132dc:	10800044 	addi	r2,r2,1
811132e0:	11c00007 	ldb	r7,0(r2)
811132e4:	383ff51e 	bne	r7,zero,811132bc <__reset+0xfb0f32bc>
811132e8:	1105c83a 	sub	r2,r2,r4
811132ec:	f800283a 	ret
811132f0:	0005883a 	mov	r2,zero
811132f4:	f800283a 	ret

811132f8 <strlen>:
811132f8:	208000cc 	andi	r2,r4,3
811132fc:	10002026 	beq	r2,zero,81113380 <strlen+0x88>
81113300:	20800007 	ldb	r2,0(r4)
81113304:	10002026 	beq	r2,zero,81113388 <strlen+0x90>
81113308:	2005883a 	mov	r2,r4
8111330c:	00000206 	br	81113318 <strlen+0x20>
81113310:	10c00007 	ldb	r3,0(r2)
81113314:	18001826 	beq	r3,zero,81113378 <strlen+0x80>
81113318:	10800044 	addi	r2,r2,1
8111331c:	10c000cc 	andi	r3,r2,3
81113320:	183ffb1e 	bne	r3,zero,81113310 <__reset+0xfb0f3310>
81113324:	10c00017 	ldw	r3,0(r2)
81113328:	01ffbff4 	movhi	r7,65279
8111332c:	39ffbfc4 	addi	r7,r7,-257
81113330:	00ca303a 	nor	r5,zero,r3
81113334:	01a02074 	movhi	r6,32897
81113338:	19c7883a 	add	r3,r3,r7
8111333c:	31a02004 	addi	r6,r6,-32640
81113340:	1946703a 	and	r3,r3,r5
81113344:	1986703a 	and	r3,r3,r6
81113348:	1800091e 	bne	r3,zero,81113370 <strlen+0x78>
8111334c:	10800104 	addi	r2,r2,4
81113350:	10c00017 	ldw	r3,0(r2)
81113354:	19cb883a 	add	r5,r3,r7
81113358:	00c6303a 	nor	r3,zero,r3
8111335c:	28c6703a 	and	r3,r5,r3
81113360:	1986703a 	and	r3,r3,r6
81113364:	183ff926 	beq	r3,zero,8111334c <__reset+0xfb0f334c>
81113368:	00000106 	br	81113370 <strlen+0x78>
8111336c:	10800044 	addi	r2,r2,1
81113370:	10c00007 	ldb	r3,0(r2)
81113374:	183ffd1e 	bne	r3,zero,8111336c <__reset+0xfb0f336c>
81113378:	1105c83a 	sub	r2,r2,r4
8111337c:	f800283a 	ret
81113380:	2005883a 	mov	r2,r4
81113384:	003fe706 	br	81113324 <__reset+0xfb0f3324>
81113388:	0005883a 	mov	r2,zero
8111338c:	f800283a 	ret

81113390 <_strtol_r>:
81113390:	00a04534 	movhi	r2,33044
81113394:	defff404 	addi	sp,sp,-48
81113398:	10821304 	addi	r2,r2,2124
8111339c:	de00012e 	bgeu	sp,et,811133a4 <_strtol_r+0x14>
811133a0:	003b68fa 	trap	3
811133a4:	dd400715 	stw	r21,28(sp)
811133a8:	15400017 	ldw	r21,0(r2)
811133ac:	dd800815 	stw	r22,32(sp)
811133b0:	dd000615 	stw	r20,24(sp)
811133b4:	dcc00515 	stw	r19,20(sp)
811133b8:	d9000015 	stw	r4,0(sp)
811133bc:	dfc00b15 	stw	ra,44(sp)
811133c0:	df000a15 	stw	fp,40(sp)
811133c4:	ddc00915 	stw	r23,36(sp)
811133c8:	dc800415 	stw	r18,16(sp)
811133cc:	dc400315 	stw	r17,12(sp)
811133d0:	dc000215 	stw	r16,8(sp)
811133d4:	2829883a 	mov	r20,r5
811133d8:	3027883a 	mov	r19,r6
811133dc:	382d883a 	mov	r22,r7
811133e0:	2809883a 	mov	r4,r5
811133e4:	24000003 	ldbu	r16,0(r4)
811133e8:	24400044 	addi	r17,r4,1
811133ec:	2007883a 	mov	r3,r4
811133f0:	ac05883a 	add	r2,r21,r16
811133f4:	10800043 	ldbu	r2,1(r2)
811133f8:	8809883a 	mov	r4,r17
811133fc:	1080020c 	andi	r2,r2,8
81113400:	103ff81e 	bne	r2,zero,811133e4 <__reset+0xfb0f33e4>
81113404:	00800b44 	movi	r2,45
81113408:	80805826 	beq	r16,r2,8111356c <_strtol_r+0x1dc>
8111340c:	00800ac4 	movi	r2,43
81113410:	80805a26 	beq	r16,r2,8111357c <_strtol_r+0x1ec>
81113414:	0039883a 	mov	fp,zero
81113418:	b0004426 	beq	r22,zero,8111352c <_strtol_r+0x19c>
8111341c:	00800404 	movi	r2,16
81113420:	b0806026 	beq	r22,r2,811135a4 <_strtol_r+0x214>
81113424:	b02f883a 	mov	r23,r22
81113428:	00a00034 	movhi	r2,32768
8111342c:	e025003a 	cmpeq	r18,fp,zero
81113430:	14a5c83a 	sub	r18,r2,r18
81113434:	b80b883a 	mov	r5,r23
81113438:	9009883a 	mov	r4,r18
8111343c:	1124e0c0 	call	81124e0c <__umodsi3>
81113440:	b80b883a 	mov	r5,r23
81113444:	9009883a 	mov	r4,r18
81113448:	d8800115 	stw	r2,4(sp)
8111344c:	1124da80 	call	81124da8 <__udivsi3>
81113450:	ac07883a 	add	r3,r21,r16
81113454:	18c00043 	ldbu	r3,1(r3)
81113458:	880b883a 	mov	r5,r17
8111345c:	000d883a 	mov	r6,zero
81113460:	1a00010c 	andi	r8,r3,4
81113464:	0009883a 	mov	r4,zero
81113468:	02800044 	movi	r10,1
8111346c:	027fffc4 	movi	r9,-1
81113470:	d9c00117 	ldw	r7,4(sp)
81113474:	40000e26 	beq	r8,zero,811134b0 <_strtol_r+0x120>
81113478:	843ff404 	addi	r16,r16,-48
8111347c:	8580120e 	bge	r16,r22,811134c8 <_strtol_r+0x138>
81113480:	32400526 	beq	r6,r9,81113498 <_strtol_r+0x108>
81113484:	11002536 	bltu	r2,r4,8111351c <_strtol_r+0x18c>
81113488:	20802326 	beq	r4,r2,81113518 <_strtol_r+0x188>
8111348c:	25c9383a 	mul	r4,r4,r23
81113490:	01800044 	movi	r6,1
81113494:	8109883a 	add	r4,r16,r4
81113498:	2c000003 	ldbu	r16,0(r5)
8111349c:	29400044 	addi	r5,r5,1
811134a0:	ac07883a 	add	r3,r21,r16
811134a4:	18c00043 	ldbu	r3,1(r3)
811134a8:	1a00010c 	andi	r8,r3,4
811134ac:	403ff21e 	bne	r8,zero,81113478 <__reset+0xfb0f3478>
811134b0:	18c000cc 	andi	r3,r3,3
811134b4:	18000426 	beq	r3,zero,811134c8 <_strtol_r+0x138>
811134b8:	1a801a26 	beq	r3,r10,81113524 <_strtol_r+0x194>
811134bc:	00c015c4 	movi	r3,87
811134c0:	80e1c83a 	sub	r16,r16,r3
811134c4:	85bfee16 	blt	r16,r22,81113480 <__reset+0xfb0f3480>
811134c8:	00bfffc4 	movi	r2,-1
811134cc:	30801e26 	beq	r6,r2,81113548 <_strtol_r+0x1b8>
811134d0:	e0001b1e 	bne	fp,zero,81113540 <_strtol_r+0x1b0>
811134d4:	2005883a 	mov	r2,r4
811134d8:	98000326 	beq	r19,zero,811134e8 <_strtol_r+0x158>
811134dc:	3000211e 	bne	r6,zero,81113564 <_strtol_r+0x1d4>
811134e0:	a00b883a 	mov	r5,r20
811134e4:	99400015 	stw	r5,0(r19)
811134e8:	dfc00b17 	ldw	ra,44(sp)
811134ec:	df000a17 	ldw	fp,40(sp)
811134f0:	ddc00917 	ldw	r23,36(sp)
811134f4:	dd800817 	ldw	r22,32(sp)
811134f8:	dd400717 	ldw	r21,28(sp)
811134fc:	dd000617 	ldw	r20,24(sp)
81113500:	dcc00517 	ldw	r19,20(sp)
81113504:	dc800417 	ldw	r18,16(sp)
81113508:	dc400317 	ldw	r17,12(sp)
8111350c:	dc000217 	ldw	r16,8(sp)
81113510:	dec00c04 	addi	sp,sp,48
81113514:	f800283a 	ret
81113518:	3c3fdc0e 	bge	r7,r16,8111348c <__reset+0xfb0f348c>
8111351c:	01bfffc4 	movi	r6,-1
81113520:	003fdd06 	br	81113498 <__reset+0xfb0f3498>
81113524:	00c00dc4 	movi	r3,55
81113528:	003fe506 	br	811134c0 <__reset+0xfb0f34c0>
8111352c:	00800c04 	movi	r2,48
81113530:	80801626 	beq	r16,r2,8111358c <_strtol_r+0x1fc>
81113534:	05800284 	movi	r22,10
81113538:	b02f883a 	mov	r23,r22
8111353c:	003fba06 	br	81113428 <__reset+0xfb0f3428>
81113540:	0109c83a 	sub	r4,zero,r4
81113544:	003fe306 	br	811134d4 <__reset+0xfb0f34d4>
81113548:	d9000017 	ldw	r4,0(sp)
8111354c:	00c00884 	movi	r3,34
81113550:	e005003a 	cmpeq	r2,fp,zero
81113554:	20c00015 	stw	r3,0(r4)
81113558:	00e00034 	movhi	r3,32768
8111355c:	1885c83a 	sub	r2,r3,r2
81113560:	983fe126 	beq	r19,zero,811134e8 <__reset+0xfb0f34e8>
81113564:	297fffc4 	addi	r5,r5,-1
81113568:	003fde06 	br	811134e4 <__reset+0xfb0f34e4>
8111356c:	1c400084 	addi	r17,r3,2
81113570:	1c000043 	ldbu	r16,1(r3)
81113574:	07000044 	movi	fp,1
81113578:	003fa706 	br	81113418 <__reset+0xfb0f3418>
8111357c:	1c400084 	addi	r17,r3,2
81113580:	1c000043 	ldbu	r16,1(r3)
81113584:	0039883a 	mov	fp,zero
81113588:	003fa306 	br	81113418 <__reset+0xfb0f3418>
8111358c:	88800003 	ldbu	r2,0(r17)
81113590:	00c01604 	movi	r3,88
81113594:	108037cc 	andi	r2,r2,223
81113598:	10c00826 	beq	r2,r3,811135bc <_strtol_r+0x22c>
8111359c:	05800204 	movi	r22,8
811135a0:	003fa006 	br	81113424 <__reset+0xfb0f3424>
811135a4:	00800c04 	movi	r2,48
811135a8:	80bf9e1e 	bne	r16,r2,81113424 <__reset+0xfb0f3424>
811135ac:	88800003 	ldbu	r2,0(r17)
811135b0:	00c01604 	movi	r3,88
811135b4:	108037cc 	andi	r2,r2,223
811135b8:	10ff9a1e 	bne	r2,r3,81113424 <__reset+0xfb0f3424>
811135bc:	05c00404 	movi	r23,16
811135c0:	8c000043 	ldbu	r16,1(r17)
811135c4:	b82d883a 	mov	r22,r23
811135c8:	8c400084 	addi	r17,r17,2
811135cc:	003f9606 	br	81113428 <__reset+0xfb0f3428>

811135d0 <strtol>:
811135d0:	00a04534 	movhi	r2,33044
811135d4:	10821504 	addi	r2,r2,2132
811135d8:	300f883a 	mov	r7,r6
811135dc:	280d883a 	mov	r6,r5
811135e0:	200b883a 	mov	r5,r4
811135e4:	11000017 	ldw	r4,0(r2)
811135e8:	11133901 	jmpi	81113390 <_strtol_r>

811135ec <___svfprintf_internal_r>:
811135ec:	deffb704 	addi	sp,sp,-292
811135f0:	de00012e 	bgeu	sp,et,811135f8 <___svfprintf_internal_r+0xc>
811135f4:	003b68fa 	trap	3
811135f8:	dfc04815 	stw	ra,288(sp)
811135fc:	ddc04615 	stw	r23,280(sp)
81113600:	d9402c15 	stw	r5,176(sp)
81113604:	d9003915 	stw	r4,228(sp)
81113608:	302f883a 	mov	r23,r6
8111360c:	d9c02d15 	stw	r7,180(sp)
81113610:	df004715 	stw	fp,284(sp)
81113614:	dd804515 	stw	r22,276(sp)
81113618:	dd404415 	stw	r21,272(sp)
8111361c:	dd004315 	stw	r20,268(sp)
81113620:	dcc04215 	stw	r19,264(sp)
81113624:	dc804115 	stw	r18,260(sp)
81113628:	dc404015 	stw	r17,256(sp)
8111362c:	dc003f15 	stw	r16,252(sp)
81113630:	111c3740 	call	8111c374 <_localeconv_r>
81113634:	10800017 	ldw	r2,0(r2)
81113638:	1009883a 	mov	r4,r2
8111363c:	d8803415 	stw	r2,208(sp)
81113640:	11132f80 	call	811132f8 <strlen>
81113644:	d8c02c17 	ldw	r3,176(sp)
81113648:	d8803815 	stw	r2,224(sp)
8111364c:	1880030b 	ldhu	r2,12(r3)
81113650:	1080200c 	andi	r2,r2,128
81113654:	10000226 	beq	r2,zero,81113660 <___svfprintf_internal_r+0x74>
81113658:	18800417 	ldw	r2,16(r3)
8111365c:	10067f26 	beq	r2,zero,8111505c <___svfprintf_internal_r+0x1a70>
81113660:	dcc03917 	ldw	r19,228(sp)
81113664:	d8c00404 	addi	r3,sp,16
81113668:	05604534 	movhi	r21,33044
8111366c:	d9001e04 	addi	r4,sp,120
81113670:	ad791b84 	addi	r21,r21,-7058
81113674:	d8c01e15 	stw	r3,120(sp)
81113678:	d8002015 	stw	zero,128(sp)
8111367c:	d8001f15 	stw	zero,124(sp)
81113680:	d8003315 	stw	zero,204(sp)
81113684:	d8003615 	stw	zero,216(sp)
81113688:	d8003715 	stw	zero,220(sp)
8111368c:	1811883a 	mov	r8,r3
81113690:	d8003a15 	stw	zero,232(sp)
81113694:	d8003b15 	stw	zero,236(sp)
81113698:	d8002f15 	stw	zero,188(sp)
8111369c:	d9002815 	stw	r4,160(sp)
811136a0:	b8800007 	ldb	r2,0(r23)
811136a4:	10026726 	beq	r2,zero,81114044 <___svfprintf_internal_r+0xa58>
811136a8:	00c00944 	movi	r3,37
811136ac:	b821883a 	mov	r16,r23
811136b0:	10c0021e 	bne	r2,r3,811136bc <___svfprintf_internal_r+0xd0>
811136b4:	00001406 	br	81113708 <___svfprintf_internal_r+0x11c>
811136b8:	10c00326 	beq	r2,r3,811136c8 <___svfprintf_internal_r+0xdc>
811136bc:	84000044 	addi	r16,r16,1
811136c0:	80800007 	ldb	r2,0(r16)
811136c4:	103ffc1e 	bne	r2,zero,811136b8 <__reset+0xfb0f36b8>
811136c8:	85e3c83a 	sub	r17,r16,r23
811136cc:	88000e26 	beq	r17,zero,81113708 <___svfprintf_internal_r+0x11c>
811136d0:	d8c02017 	ldw	r3,128(sp)
811136d4:	d8801f17 	ldw	r2,124(sp)
811136d8:	45c00015 	stw	r23,0(r8)
811136dc:	1c47883a 	add	r3,r3,r17
811136e0:	10800044 	addi	r2,r2,1
811136e4:	d8c02015 	stw	r3,128(sp)
811136e8:	44400115 	stw	r17,4(r8)
811136ec:	d8801f15 	stw	r2,124(sp)
811136f0:	00c001c4 	movi	r3,7
811136f4:	18809716 	blt	r3,r2,81113954 <___svfprintf_internal_r+0x368>
811136f8:	42000204 	addi	r8,r8,8
811136fc:	d9402f17 	ldw	r5,188(sp)
81113700:	2c4b883a 	add	r5,r5,r17
81113704:	d9402f15 	stw	r5,188(sp)
81113708:	80800007 	ldb	r2,0(r16)
8111370c:	10009826 	beq	r2,zero,81113970 <___svfprintf_internal_r+0x384>
81113710:	84400047 	ldb	r17,1(r16)
81113714:	00bfffc4 	movi	r2,-1
81113718:	85c00044 	addi	r23,r16,1
8111371c:	d8002785 	stb	zero,158(sp)
81113720:	0007883a 	mov	r3,zero
81113724:	000f883a 	mov	r7,zero
81113728:	d8802915 	stw	r2,164(sp)
8111372c:	d8003115 	stw	zero,196(sp)
81113730:	0025883a 	mov	r18,zero
81113734:	01401604 	movi	r5,88
81113738:	01800244 	movi	r6,9
8111373c:	02800a84 	movi	r10,42
81113740:	02401b04 	movi	r9,108
81113744:	bdc00044 	addi	r23,r23,1
81113748:	88bff804 	addi	r2,r17,-32
8111374c:	2882f036 	bltu	r5,r2,81114310 <___svfprintf_internal_r+0xd24>
81113750:	100490ba 	slli	r2,r2,2
81113754:	01204474 	movhi	r4,33041
81113758:	210dda04 	addi	r4,r4,14184
8111375c:	1105883a 	add	r2,r2,r4
81113760:	10800017 	ldw	r2,0(r2)
81113764:	1000683a 	jmp	r2
81113768:	81114278 	rdprs	r4,r16,17673
8111376c:	81114310 	cmplti	r4,r16,17676
81113770:	81114310 	cmplti	r4,r16,17676
81113774:	8111426c 	andhi	r4,r16,17673
81113778:	81114310 	cmplti	r4,r16,17676
8111377c:	81114310 	cmplti	r4,r16,17676
81113780:	81114310 	cmplti	r4,r16,17676
81113784:	81114310 	cmplti	r4,r16,17676
81113788:	81114310 	cmplti	r4,r16,17676
8111378c:	81114310 	cmplti	r4,r16,17676
81113790:	811139cc 	andi	r4,r16,17639
81113794:	811141a8 	cmpgeui	r4,r16,17670
81113798:	81114310 	cmplti	r4,r16,17676
8111379c:	811138dc 	xori	r4,r16,17635
811137a0:	811139f4 	orhi	r4,r16,17639
811137a4:	81114310 	cmplti	r4,r16,17676
811137a8:	81113a68 	cmpgeui	r4,r16,17641
811137ac:	81113a34 	orhi	r4,r16,17640
811137b0:	81113a34 	orhi	r4,r16,17640
811137b4:	81113a34 	orhi	r4,r16,17640
811137b8:	81113a34 	orhi	r4,r16,17640
811137bc:	81113a34 	orhi	r4,r16,17640
811137c0:	81113a34 	orhi	r4,r16,17640
811137c4:	81113a34 	orhi	r4,r16,17640
811137c8:	81113a34 	orhi	r4,r16,17640
811137cc:	81113a34 	orhi	r4,r16,17640
811137d0:	81114310 	cmplti	r4,r16,17676
811137d4:	81114310 	cmplti	r4,r16,17676
811137d8:	81114310 	cmplti	r4,r16,17676
811137dc:	81114310 	cmplti	r4,r16,17676
811137e0:	81114310 	cmplti	r4,r16,17676
811137e4:	81114310 	cmplti	r4,r16,17676
811137e8:	81114310 	cmplti	r4,r16,17676
811137ec:	81114310 	cmplti	r4,r16,17676
811137f0:	81114310 	cmplti	r4,r16,17676
811137f4:	81114310 	cmplti	r4,r16,17676
811137f8:	81113b20 	cmpeqi	r4,r16,17644
811137fc:	81113a74 	orhi	r4,r16,17641
81113800:	81114310 	cmplti	r4,r16,17676
81113804:	81113a74 	orhi	r4,r16,17641
81113808:	81114310 	cmplti	r4,r16,17676
8111380c:	81114310 	cmplti	r4,r16,17676
81113810:	81114310 	cmplti	r4,r16,17676
81113814:	81114310 	cmplti	r4,r16,17676
81113818:	81113b14 	ori	r4,r16,17644
8111381c:	81114310 	cmplti	r4,r16,17676
81113820:	81114310 	cmplti	r4,r16,17676
81113824:	81113bdc 	xori	r4,r16,17647
81113828:	81114310 	cmplti	r4,r16,17676
8111382c:	81114310 	cmplti	r4,r16,17676
81113830:	81114310 	cmplti	r4,r16,17676
81113834:	81114310 	cmplti	r4,r16,17676
81113838:	81114310 	cmplti	r4,r16,17676
8111383c:	8111404c 	andi	r4,r16,17665
81113840:	81114310 	cmplti	r4,r16,17676
81113844:	81114310 	cmplti	r4,r16,17676
81113848:	811140ac 	andhi	r4,r16,17666
8111384c:	81114310 	cmplti	r4,r16,17676
81113850:	81114310 	cmplti	r4,r16,17676
81113854:	81114310 	cmplti	r4,r16,17676
81113858:	81114310 	cmplti	r4,r16,17676
8111385c:	81114310 	cmplti	r4,r16,17676
81113860:	81114310 	cmplti	r4,r16,17676
81113864:	81114310 	cmplti	r4,r16,17676
81113868:	81114310 	cmplti	r4,r16,17676
8111386c:	81114310 	cmplti	r4,r16,17676
81113870:	81114310 	cmplti	r4,r16,17676
81113874:	8111415c 	xori	r4,r16,17669
81113878:	81114298 	cmpnei	r4,r16,17674
8111387c:	81113a74 	orhi	r4,r16,17641
81113880:	81113a74 	orhi	r4,r16,17641
81113884:	81113a74 	orhi	r4,r16,17641
81113888:	811142ec 	andhi	r4,r16,17675
8111388c:	81114298 	cmpnei	r4,r16,17674
81113890:	81114310 	cmplti	r4,r16,17676
81113894:	81114310 	cmplti	r4,r16,17676
81113898:	811142a8 	cmpgeui	r4,r16,17674
8111389c:	81114310 	cmplti	r4,r16,17676
811138a0:	811142b8 	rdprs	r4,r16,17674
811138a4:	81114198 	cmpnei	r4,r16,17670
811138a8:	811138e8 	cmpgeui	r4,r16,17635
811138ac:	811141b8 	rdprs	r4,r16,17670
811138b0:	81114310 	cmplti	r4,r16,17676
811138b4:	811141c4 	addi	r4,r16,17671
811138b8:	81114310 	cmplti	r4,r16,17676
811138bc:	81114220 	cmpeqi	r4,r16,17672
811138c0:	81114310 	cmplti	r4,r16,17676
811138c4:	81114310 	cmplti	r4,r16,17676
811138c8:	81114230 	cmpltui	r4,r16,17672
811138cc:	d9003117 	ldw	r4,196(sp)
811138d0:	d8802d15 	stw	r2,180(sp)
811138d4:	0109c83a 	sub	r4,zero,r4
811138d8:	d9003115 	stw	r4,196(sp)
811138dc:	94800114 	ori	r18,r18,4
811138e0:	bc400007 	ldb	r17,0(r23)
811138e4:	003f9706 	br	81113744 <__reset+0xfb0f3744>
811138e8:	00800c04 	movi	r2,48
811138ec:	d9002d17 	ldw	r4,180(sp)
811138f0:	d9402917 	ldw	r5,164(sp)
811138f4:	d8802705 	stb	r2,156(sp)
811138f8:	00801e04 	movi	r2,120
811138fc:	d8802745 	stb	r2,157(sp)
81113900:	d8002785 	stb	zero,158(sp)
81113904:	20c00104 	addi	r3,r4,4
81113908:	25000017 	ldw	r20,0(r4)
8111390c:	002d883a 	mov	r22,zero
81113910:	90800094 	ori	r2,r18,2
81113914:	28028616 	blt	r5,zero,81114330 <___svfprintf_internal_r+0xd44>
81113918:	00bfdfc4 	movi	r2,-129
8111391c:	90a4703a 	and	r18,r18,r2
81113920:	d8c02d15 	stw	r3,180(sp)
81113924:	94800094 	ori	r18,r18,2
81113928:	a002731e 	bne	r20,zero,811142f8 <___svfprintf_internal_r+0xd0c>
8111392c:	00a04534 	movhi	r2,33044
81113930:	10b91404 	addi	r2,r2,-7088
81113934:	d8803a15 	stw	r2,232(sp)
81113938:	04401e04 	movi	r17,120
8111393c:	d8c02917 	ldw	r3,164(sp)
81113940:	0039883a 	mov	fp,zero
81113944:	1801d526 	beq	r3,zero,8111409c <___svfprintf_internal_r+0xab0>
81113948:	0029883a 	mov	r20,zero
8111394c:	002d883a 	mov	r22,zero
81113950:	0001f106 	br	81114118 <___svfprintf_internal_r+0xb2c>
81113954:	d9402c17 	ldw	r5,176(sp)
81113958:	d9801e04 	addi	r6,sp,120
8111395c:	9809883a 	mov	r4,r19
81113960:	11200ac0 	call	811200ac <__ssprint_r>
81113964:	1000081e 	bne	r2,zero,81113988 <___svfprintf_internal_r+0x39c>
81113968:	da000404 	addi	r8,sp,16
8111396c:	003f6306 	br	811136fc <__reset+0xfb0f36fc>
81113970:	d8802017 	ldw	r2,128(sp)
81113974:	10000426 	beq	r2,zero,81113988 <___svfprintf_internal_r+0x39c>
81113978:	d9402c17 	ldw	r5,176(sp)
8111397c:	d9003917 	ldw	r4,228(sp)
81113980:	d9801e04 	addi	r6,sp,120
81113984:	11200ac0 	call	811200ac <__ssprint_r>
81113988:	d8802c17 	ldw	r2,176(sp)
8111398c:	10c0030b 	ldhu	r3,12(r2)
81113990:	d8802f17 	ldw	r2,188(sp)
81113994:	18c0100c 	andi	r3,r3,64
81113998:	1805f51e 	bne	r3,zero,81115170 <___svfprintf_internal_r+0x1b84>
8111399c:	dfc04817 	ldw	ra,288(sp)
811139a0:	df004717 	ldw	fp,284(sp)
811139a4:	ddc04617 	ldw	r23,280(sp)
811139a8:	dd804517 	ldw	r22,276(sp)
811139ac:	dd404417 	ldw	r21,272(sp)
811139b0:	dd004317 	ldw	r20,268(sp)
811139b4:	dcc04217 	ldw	r19,264(sp)
811139b8:	dc804117 	ldw	r18,260(sp)
811139bc:	dc404017 	ldw	r17,256(sp)
811139c0:	dc003f17 	ldw	r16,252(sp)
811139c4:	dec04904 	addi	sp,sp,292
811139c8:	f800283a 	ret
811139cc:	d8802d17 	ldw	r2,180(sp)
811139d0:	d9002d17 	ldw	r4,180(sp)
811139d4:	10800017 	ldw	r2,0(r2)
811139d8:	d8803115 	stw	r2,196(sp)
811139dc:	20800104 	addi	r2,r4,4
811139e0:	d9003117 	ldw	r4,196(sp)
811139e4:	203fb916 	blt	r4,zero,811138cc <__reset+0xfb0f38cc>
811139e8:	d8802d15 	stw	r2,180(sp)
811139ec:	bc400007 	ldb	r17,0(r23)
811139f0:	003f5406 	br	81113744 <__reset+0xfb0f3744>
811139f4:	bc400007 	ldb	r17,0(r23)
811139f8:	bac00044 	addi	r11,r23,1
811139fc:	8a873926 	beq	r17,r10,811156e4 <___svfprintf_internal_r+0x20f8>
81113a00:	88bff404 	addi	r2,r17,-48
81113a04:	0009883a 	mov	r4,zero
81113a08:	30868836 	bltu	r6,r2,8111542c <___svfprintf_internal_r+0x1e40>
81113a0c:	5c400007 	ldb	r17,0(r11)
81113a10:	210002a4 	muli	r4,r4,10
81113a14:	5dc00044 	addi	r23,r11,1
81113a18:	b817883a 	mov	r11,r23
81113a1c:	2089883a 	add	r4,r4,r2
81113a20:	88bff404 	addi	r2,r17,-48
81113a24:	30bff92e 	bgeu	r6,r2,81113a0c <__reset+0xfb0f3a0c>
81113a28:	2005d716 	blt	r4,zero,81115188 <___svfprintf_internal_r+0x1b9c>
81113a2c:	d9002915 	stw	r4,164(sp)
81113a30:	003f4506 	br	81113748 <__reset+0xfb0f3748>
81113a34:	b809883a 	mov	r4,r23
81113a38:	d8003115 	stw	zero,196(sp)
81113a3c:	88bff404 	addi	r2,r17,-48
81113a40:	0017883a 	mov	r11,zero
81113a44:	24400007 	ldb	r17,0(r4)
81113a48:	5ac002a4 	muli	r11,r11,10
81113a4c:	bdc00044 	addi	r23,r23,1
81113a50:	b809883a 	mov	r4,r23
81113a54:	12d7883a 	add	r11,r2,r11
81113a58:	88bff404 	addi	r2,r17,-48
81113a5c:	30bff92e 	bgeu	r6,r2,81113a44 <__reset+0xfb0f3a44>
81113a60:	dac03115 	stw	r11,196(sp)
81113a64:	003f3806 	br	81113748 <__reset+0xfb0f3748>
81113a68:	94802014 	ori	r18,r18,128
81113a6c:	bc400007 	ldb	r17,0(r23)
81113a70:	003f3406 	br	81113744 <__reset+0xfb0f3744>
81113a74:	18c03fcc 	andi	r3,r3,255
81113a78:	1807471e 	bne	r3,zero,81115798 <___svfprintf_internal_r+0x21ac>
81113a7c:	9080020c 	andi	r2,r18,8
81113a80:	10047d26 	beq	r2,zero,81114c78 <___svfprintf_internal_r+0x168c>
81113a84:	d8c02d17 	ldw	r3,180(sp)
81113a88:	d9002d17 	ldw	r4,180(sp)
81113a8c:	d9402d17 	ldw	r5,180(sp)
81113a90:	18c00017 	ldw	r3,0(r3)
81113a94:	21000117 	ldw	r4,4(r4)
81113a98:	29400204 	addi	r5,r5,8
81113a9c:	d8c03615 	stw	r3,216(sp)
81113aa0:	d9003715 	stw	r4,220(sp)
81113aa4:	d9402d15 	stw	r5,180(sp)
81113aa8:	d9003617 	ldw	r4,216(sp)
81113aac:	d9403717 	ldw	r5,220(sp)
81113ab0:	da003e15 	stw	r8,248(sp)
81113ab4:	04000044 	movi	r16,1
81113ab8:	111dec00 	call	8111dec0 <__fpclassifyd>
81113abc:	da003e17 	ldw	r8,248(sp)
81113ac0:	14044b1e 	bne	r2,r16,81114bf0 <___svfprintf_internal_r+0x1604>
81113ac4:	d9003617 	ldw	r4,216(sp)
81113ac8:	d9403717 	ldw	r5,220(sp)
81113acc:	000d883a 	mov	r6,zero
81113ad0:	000f883a 	mov	r7,zero
81113ad4:	11263680 	call	81126368 <__ledf2>
81113ad8:	da003e17 	ldw	r8,248(sp)
81113adc:	1005f316 	blt	r2,zero,811152ac <___svfprintf_internal_r+0x1cc0>
81113ae0:	df002783 	ldbu	fp,158(sp)
81113ae4:	008011c4 	movi	r2,71
81113ae8:	1445590e 	bge	r2,r17,81115050 <___svfprintf_internal_r+0x1a64>
81113aec:	04204534 	movhi	r16,33044
81113af0:	84390c04 	addi	r16,r16,-7120
81113af4:	00c000c4 	movi	r3,3
81113af8:	00bfdfc4 	movi	r2,-129
81113afc:	d8c02a15 	stw	r3,168(sp)
81113b00:	90a4703a 	and	r18,r18,r2
81113b04:	d8c02e15 	stw	r3,184(sp)
81113b08:	d8002915 	stw	zero,164(sp)
81113b0c:	d8003215 	stw	zero,200(sp)
81113b10:	00006606 	br	81113cac <___svfprintf_internal_r+0x6c0>
81113b14:	94800214 	ori	r18,r18,8
81113b18:	bc400007 	ldb	r17,0(r23)
81113b1c:	003f0906 	br	81113744 <__reset+0xfb0f3744>
81113b20:	18c03fcc 	andi	r3,r3,255
81113b24:	1807181e 	bne	r3,zero,81115788 <___svfprintf_internal_r+0x219c>
81113b28:	94800414 	ori	r18,r18,16
81113b2c:	9080080c 	andi	r2,r18,32
81113b30:	10039626 	beq	r2,zero,8111498c <___svfprintf_internal_r+0x13a0>
81113b34:	d9402d17 	ldw	r5,180(sp)
81113b38:	28800117 	ldw	r2,4(r5)
81113b3c:	2d000017 	ldw	r20,0(r5)
81113b40:	29400204 	addi	r5,r5,8
81113b44:	d9402d15 	stw	r5,180(sp)
81113b48:	102d883a 	mov	r22,r2
81113b4c:	10039816 	blt	r2,zero,811149b0 <___svfprintf_internal_r+0x13c4>
81113b50:	d9402917 	ldw	r5,164(sp)
81113b54:	df002783 	ldbu	fp,158(sp)
81113b58:	2803ab16 	blt	r5,zero,81114a08 <___svfprintf_internal_r+0x141c>
81113b5c:	00ffdfc4 	movi	r3,-129
81113b60:	a584b03a 	or	r2,r20,r22
81113b64:	90e4703a 	and	r18,r18,r3
81113b68:	10014a26 	beq	r2,zero,81114094 <___svfprintf_internal_r+0xaa8>
81113b6c:	b0034b26 	beq	r22,zero,8111489c <___svfprintf_internal_r+0x12b0>
81113b70:	dc402a15 	stw	r17,168(sp)
81113b74:	dc001e04 	addi	r16,sp,120
81113b78:	b023883a 	mov	r17,r22
81113b7c:	402d883a 	mov	r22,r8
81113b80:	a009883a 	mov	r4,r20
81113b84:	880b883a 	mov	r5,r17
81113b88:	01800284 	movi	r6,10
81113b8c:	000f883a 	mov	r7,zero
81113b90:	11247700 	call	81124770 <__umoddi3>
81113b94:	10800c04 	addi	r2,r2,48
81113b98:	843fffc4 	addi	r16,r16,-1
81113b9c:	a009883a 	mov	r4,r20
81113ba0:	880b883a 	mov	r5,r17
81113ba4:	80800005 	stb	r2,0(r16)
81113ba8:	01800284 	movi	r6,10
81113bac:	000f883a 	mov	r7,zero
81113bb0:	11241f00 	call	811241f0 <__udivdi3>
81113bb4:	1029883a 	mov	r20,r2
81113bb8:	10c4b03a 	or	r2,r2,r3
81113bbc:	1823883a 	mov	r17,r3
81113bc0:	103fef1e 	bne	r2,zero,81113b80 <__reset+0xfb0f3b80>
81113bc4:	d8c02817 	ldw	r3,160(sp)
81113bc8:	dc402a17 	ldw	r17,168(sp)
81113bcc:	b011883a 	mov	r8,r22
81113bd0:	1c07c83a 	sub	r3,r3,r16
81113bd4:	d8c02e15 	stw	r3,184(sp)
81113bd8:	00002e06 	br	81113c94 <___svfprintf_internal_r+0x6a8>
81113bdc:	18c03fcc 	andi	r3,r3,255
81113be0:	1806e71e 	bne	r3,zero,81115780 <___svfprintf_internal_r+0x2194>
81113be4:	94800414 	ori	r18,r18,16
81113be8:	9080080c 	andi	r2,r18,32
81113bec:	1002d426 	beq	r2,zero,81114740 <___svfprintf_internal_r+0x1154>
81113bf0:	d9402d17 	ldw	r5,180(sp)
81113bf4:	d8c02917 	ldw	r3,164(sp)
81113bf8:	d8002785 	stb	zero,158(sp)
81113bfc:	28800204 	addi	r2,r5,8
81113c00:	2d000017 	ldw	r20,0(r5)
81113c04:	2d800117 	ldw	r22,4(r5)
81113c08:	18041516 	blt	r3,zero,81114c60 <___svfprintf_internal_r+0x1674>
81113c0c:	013fdfc4 	movi	r4,-129
81113c10:	a586b03a 	or	r3,r20,r22
81113c14:	d8802d15 	stw	r2,180(sp)
81113c18:	9124703a 	and	r18,r18,r4
81113c1c:	1802d51e 	bne	r3,zero,81114774 <___svfprintf_internal_r+0x1188>
81113c20:	d9402917 	ldw	r5,164(sp)
81113c24:	0039883a 	mov	fp,zero
81113c28:	2806be26 	beq	r5,zero,81115724 <___svfprintf_internal_r+0x2138>
81113c2c:	0029883a 	mov	r20,zero
81113c30:	002d883a 	mov	r22,zero
81113c34:	dc001e04 	addi	r16,sp,120
81113c38:	a006d0fa 	srli	r3,r20,3
81113c3c:	b008977a 	slli	r4,r22,29
81113c40:	b02cd0fa 	srli	r22,r22,3
81113c44:	a50001cc 	andi	r20,r20,7
81113c48:	a0800c04 	addi	r2,r20,48
81113c4c:	843fffc4 	addi	r16,r16,-1
81113c50:	20e8b03a 	or	r20,r4,r3
81113c54:	80800005 	stb	r2,0(r16)
81113c58:	a586b03a 	or	r3,r20,r22
81113c5c:	183ff61e 	bne	r3,zero,81113c38 <__reset+0xfb0f3c38>
81113c60:	90c0004c 	andi	r3,r18,1
81113c64:	18013926 	beq	r3,zero,8111414c <___svfprintf_internal_r+0xb60>
81113c68:	10803fcc 	andi	r2,r2,255
81113c6c:	1080201c 	xori	r2,r2,128
81113c70:	10bfe004 	addi	r2,r2,-128
81113c74:	00c00c04 	movi	r3,48
81113c78:	10c13426 	beq	r2,r3,8111414c <___svfprintf_internal_r+0xb60>
81113c7c:	80ffffc5 	stb	r3,-1(r16)
81113c80:	d8c02817 	ldw	r3,160(sp)
81113c84:	80bfffc4 	addi	r2,r16,-1
81113c88:	1021883a 	mov	r16,r2
81113c8c:	1887c83a 	sub	r3,r3,r2
81113c90:	d8c02e15 	stw	r3,184(sp)
81113c94:	d8802e17 	ldw	r2,184(sp)
81113c98:	d9002917 	ldw	r4,164(sp)
81113c9c:	1100010e 	bge	r2,r4,81113ca4 <___svfprintf_internal_r+0x6b8>
81113ca0:	2005883a 	mov	r2,r4
81113ca4:	d8802a15 	stw	r2,168(sp)
81113ca8:	d8003215 	stw	zero,200(sp)
81113cac:	e7003fcc 	andi	fp,fp,255
81113cb0:	e700201c 	xori	fp,fp,128
81113cb4:	e73fe004 	addi	fp,fp,-128
81113cb8:	e0000326 	beq	fp,zero,81113cc8 <___svfprintf_internal_r+0x6dc>
81113cbc:	d8c02a17 	ldw	r3,168(sp)
81113cc0:	18c00044 	addi	r3,r3,1
81113cc4:	d8c02a15 	stw	r3,168(sp)
81113cc8:	90c0008c 	andi	r3,r18,2
81113ccc:	d8c02b15 	stw	r3,172(sp)
81113cd0:	18000326 	beq	r3,zero,81113ce0 <___svfprintf_internal_r+0x6f4>
81113cd4:	d8c02a17 	ldw	r3,168(sp)
81113cd8:	18c00084 	addi	r3,r3,2
81113cdc:	d8c02a15 	stw	r3,168(sp)
81113ce0:	90c0210c 	andi	r3,r18,132
81113ce4:	d8c03015 	stw	r3,192(sp)
81113ce8:	1801a11e 	bne	r3,zero,81114370 <___svfprintf_internal_r+0xd84>
81113cec:	d9003117 	ldw	r4,196(sp)
81113cf0:	d8c02a17 	ldw	r3,168(sp)
81113cf4:	20e9c83a 	sub	r20,r4,r3
81113cf8:	05019d0e 	bge	zero,r20,81114370 <___svfprintf_internal_r+0xd84>
81113cfc:	02400404 	movi	r9,16
81113d00:	d8c02017 	ldw	r3,128(sp)
81113d04:	d8801f17 	ldw	r2,124(sp)
81113d08:	4d051b0e 	bge	r9,r20,81115178 <___svfprintf_internal_r+0x1b8c>
81113d0c:	01604534 	movhi	r5,33044
81113d10:	29791f84 	addi	r5,r5,-7042
81113d14:	dc403c15 	stw	r17,240(sp)
81113d18:	d9403515 	stw	r5,212(sp)
81113d1c:	a023883a 	mov	r17,r20
81113d20:	482d883a 	mov	r22,r9
81113d24:	9029883a 	mov	r20,r18
81113d28:	070001c4 	movi	fp,7
81113d2c:	8025883a 	mov	r18,r16
81113d30:	dc002c17 	ldw	r16,176(sp)
81113d34:	00000306 	br	81113d44 <___svfprintf_internal_r+0x758>
81113d38:	8c7ffc04 	addi	r17,r17,-16
81113d3c:	42000204 	addi	r8,r8,8
81113d40:	b440130e 	bge	r22,r17,81113d90 <___svfprintf_internal_r+0x7a4>
81113d44:	01204534 	movhi	r4,33044
81113d48:	18c00404 	addi	r3,r3,16
81113d4c:	10800044 	addi	r2,r2,1
81113d50:	21391f84 	addi	r4,r4,-7042
81113d54:	41000015 	stw	r4,0(r8)
81113d58:	45800115 	stw	r22,4(r8)
81113d5c:	d8c02015 	stw	r3,128(sp)
81113d60:	d8801f15 	stw	r2,124(sp)
81113d64:	e0bff40e 	bge	fp,r2,81113d38 <__reset+0xfb0f3d38>
81113d68:	d9801e04 	addi	r6,sp,120
81113d6c:	800b883a 	mov	r5,r16
81113d70:	9809883a 	mov	r4,r19
81113d74:	11200ac0 	call	811200ac <__ssprint_r>
81113d78:	103f031e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81113d7c:	8c7ffc04 	addi	r17,r17,-16
81113d80:	d8c02017 	ldw	r3,128(sp)
81113d84:	d8801f17 	ldw	r2,124(sp)
81113d88:	da000404 	addi	r8,sp,16
81113d8c:	b47fed16 	blt	r22,r17,81113d44 <__reset+0xfb0f3d44>
81113d90:	9021883a 	mov	r16,r18
81113d94:	a025883a 	mov	r18,r20
81113d98:	8829883a 	mov	r20,r17
81113d9c:	dc403c17 	ldw	r17,240(sp)
81113da0:	d9403517 	ldw	r5,212(sp)
81113da4:	a0c7883a 	add	r3,r20,r3
81113da8:	10800044 	addi	r2,r2,1
81113dac:	41400015 	stw	r5,0(r8)
81113db0:	45000115 	stw	r20,4(r8)
81113db4:	d8c02015 	stw	r3,128(sp)
81113db8:	d8801f15 	stw	r2,124(sp)
81113dbc:	010001c4 	movi	r4,7
81113dc0:	20829f16 	blt	r4,r2,81114840 <___svfprintf_internal_r+0x1254>
81113dc4:	df002787 	ldb	fp,158(sp)
81113dc8:	42000204 	addi	r8,r8,8
81113dcc:	e0000c26 	beq	fp,zero,81113e00 <___svfprintf_internal_r+0x814>
81113dd0:	d8801f17 	ldw	r2,124(sp)
81113dd4:	d9002784 	addi	r4,sp,158
81113dd8:	18c00044 	addi	r3,r3,1
81113ddc:	10800044 	addi	r2,r2,1
81113de0:	41000015 	stw	r4,0(r8)
81113de4:	01000044 	movi	r4,1
81113de8:	41000115 	stw	r4,4(r8)
81113dec:	d8c02015 	stw	r3,128(sp)
81113df0:	d8801f15 	stw	r2,124(sp)
81113df4:	010001c4 	movi	r4,7
81113df8:	20823816 	blt	r4,r2,811146dc <___svfprintf_internal_r+0x10f0>
81113dfc:	42000204 	addi	r8,r8,8
81113e00:	d8802b17 	ldw	r2,172(sp)
81113e04:	10000c26 	beq	r2,zero,81113e38 <___svfprintf_internal_r+0x84c>
81113e08:	d8801f17 	ldw	r2,124(sp)
81113e0c:	d9002704 	addi	r4,sp,156
81113e10:	18c00084 	addi	r3,r3,2
81113e14:	10800044 	addi	r2,r2,1
81113e18:	41000015 	stw	r4,0(r8)
81113e1c:	01000084 	movi	r4,2
81113e20:	41000115 	stw	r4,4(r8)
81113e24:	d8c02015 	stw	r3,128(sp)
81113e28:	d8801f15 	stw	r2,124(sp)
81113e2c:	010001c4 	movi	r4,7
81113e30:	20823216 	blt	r4,r2,811146fc <___svfprintf_internal_r+0x1110>
81113e34:	42000204 	addi	r8,r8,8
81113e38:	d9003017 	ldw	r4,192(sp)
81113e3c:	00802004 	movi	r2,128
81113e40:	20819726 	beq	r4,r2,811144a0 <___svfprintf_internal_r+0xeb4>
81113e44:	d9402917 	ldw	r5,164(sp)
81113e48:	d8802e17 	ldw	r2,184(sp)
81113e4c:	28adc83a 	sub	r22,r5,r2
81113e50:	05802f0e 	bge	zero,r22,81113f10 <___svfprintf_internal_r+0x924>
81113e54:	07000404 	movi	fp,16
81113e58:	d8801f17 	ldw	r2,124(sp)
81113e5c:	e583c00e 	bge	fp,r22,81114d60 <___svfprintf_internal_r+0x1774>
81113e60:	01604534 	movhi	r5,33044
81113e64:	29791b84 	addi	r5,r5,-7058
81113e68:	dc402915 	stw	r17,164(sp)
81113e6c:	d9402b15 	stw	r5,172(sp)
81113e70:	b023883a 	mov	r17,r22
81113e74:	050001c4 	movi	r20,7
81113e78:	902d883a 	mov	r22,r18
81113e7c:	8025883a 	mov	r18,r16
81113e80:	dc002c17 	ldw	r16,176(sp)
81113e84:	00000306 	br	81113e94 <___svfprintf_internal_r+0x8a8>
81113e88:	8c7ffc04 	addi	r17,r17,-16
81113e8c:	42000204 	addi	r8,r8,8
81113e90:	e440110e 	bge	fp,r17,81113ed8 <___svfprintf_internal_r+0x8ec>
81113e94:	18c00404 	addi	r3,r3,16
81113e98:	10800044 	addi	r2,r2,1
81113e9c:	45400015 	stw	r21,0(r8)
81113ea0:	47000115 	stw	fp,4(r8)
81113ea4:	d8c02015 	stw	r3,128(sp)
81113ea8:	d8801f15 	stw	r2,124(sp)
81113eac:	a0bff60e 	bge	r20,r2,81113e88 <__reset+0xfb0f3e88>
81113eb0:	d9801e04 	addi	r6,sp,120
81113eb4:	800b883a 	mov	r5,r16
81113eb8:	9809883a 	mov	r4,r19
81113ebc:	11200ac0 	call	811200ac <__ssprint_r>
81113ec0:	103eb11e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81113ec4:	8c7ffc04 	addi	r17,r17,-16
81113ec8:	d8c02017 	ldw	r3,128(sp)
81113ecc:	d8801f17 	ldw	r2,124(sp)
81113ed0:	da000404 	addi	r8,sp,16
81113ed4:	e47fef16 	blt	fp,r17,81113e94 <__reset+0xfb0f3e94>
81113ed8:	9021883a 	mov	r16,r18
81113edc:	b025883a 	mov	r18,r22
81113ee0:	882d883a 	mov	r22,r17
81113ee4:	dc402917 	ldw	r17,164(sp)
81113ee8:	d9002b17 	ldw	r4,172(sp)
81113eec:	1d87883a 	add	r3,r3,r22
81113ef0:	10800044 	addi	r2,r2,1
81113ef4:	41000015 	stw	r4,0(r8)
81113ef8:	45800115 	stw	r22,4(r8)
81113efc:	d8c02015 	stw	r3,128(sp)
81113f00:	d8801f15 	stw	r2,124(sp)
81113f04:	010001c4 	movi	r4,7
81113f08:	2081ec16 	blt	r4,r2,811146bc <___svfprintf_internal_r+0x10d0>
81113f0c:	42000204 	addi	r8,r8,8
81113f10:	9080400c 	andi	r2,r18,256
81113f14:	1001181e 	bne	r2,zero,81114378 <___svfprintf_internal_r+0xd8c>
81113f18:	d9402e17 	ldw	r5,184(sp)
81113f1c:	d8801f17 	ldw	r2,124(sp)
81113f20:	44000015 	stw	r16,0(r8)
81113f24:	1947883a 	add	r3,r3,r5
81113f28:	10800044 	addi	r2,r2,1
81113f2c:	41400115 	stw	r5,4(r8)
81113f30:	d8c02015 	stw	r3,128(sp)
81113f34:	d8801f15 	stw	r2,124(sp)
81113f38:	010001c4 	movi	r4,7
81113f3c:	2081d116 	blt	r4,r2,81114684 <___svfprintf_internal_r+0x1098>
81113f40:	42000204 	addi	r8,r8,8
81113f44:	9480010c 	andi	r18,r18,4
81113f48:	90003226 	beq	r18,zero,81114014 <___svfprintf_internal_r+0xa28>
81113f4c:	d9403117 	ldw	r5,196(sp)
81113f50:	d8802a17 	ldw	r2,168(sp)
81113f54:	28a1c83a 	sub	r16,r5,r2
81113f58:	04002e0e 	bge	zero,r16,81114014 <___svfprintf_internal_r+0xa28>
81113f5c:	04400404 	movi	r17,16
81113f60:	d8801f17 	ldw	r2,124(sp)
81113f64:	8c04b90e 	bge	r17,r16,8111524c <___svfprintf_internal_r+0x1c60>
81113f68:	01604534 	movhi	r5,33044
81113f6c:	29791f84 	addi	r5,r5,-7042
81113f70:	d9403515 	stw	r5,212(sp)
81113f74:	048001c4 	movi	r18,7
81113f78:	dd002c17 	ldw	r20,176(sp)
81113f7c:	00000306 	br	81113f8c <___svfprintf_internal_r+0x9a0>
81113f80:	843ffc04 	addi	r16,r16,-16
81113f84:	42000204 	addi	r8,r8,8
81113f88:	8c00130e 	bge	r17,r16,81113fd8 <___svfprintf_internal_r+0x9ec>
81113f8c:	01204534 	movhi	r4,33044
81113f90:	18c00404 	addi	r3,r3,16
81113f94:	10800044 	addi	r2,r2,1
81113f98:	21391f84 	addi	r4,r4,-7042
81113f9c:	41000015 	stw	r4,0(r8)
81113fa0:	44400115 	stw	r17,4(r8)
81113fa4:	d8c02015 	stw	r3,128(sp)
81113fa8:	d8801f15 	stw	r2,124(sp)
81113fac:	90bff40e 	bge	r18,r2,81113f80 <__reset+0xfb0f3f80>
81113fb0:	d9801e04 	addi	r6,sp,120
81113fb4:	a00b883a 	mov	r5,r20
81113fb8:	9809883a 	mov	r4,r19
81113fbc:	11200ac0 	call	811200ac <__ssprint_r>
81113fc0:	103e711e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81113fc4:	843ffc04 	addi	r16,r16,-16
81113fc8:	d8c02017 	ldw	r3,128(sp)
81113fcc:	d8801f17 	ldw	r2,124(sp)
81113fd0:	da000404 	addi	r8,sp,16
81113fd4:	8c3fed16 	blt	r17,r16,81113f8c <__reset+0xfb0f3f8c>
81113fd8:	d9403517 	ldw	r5,212(sp)
81113fdc:	1c07883a 	add	r3,r3,r16
81113fe0:	10800044 	addi	r2,r2,1
81113fe4:	41400015 	stw	r5,0(r8)
81113fe8:	44000115 	stw	r16,4(r8)
81113fec:	d8c02015 	stw	r3,128(sp)
81113ff0:	d8801f15 	stw	r2,124(sp)
81113ff4:	010001c4 	movi	r4,7
81113ff8:	2080060e 	bge	r4,r2,81114014 <___svfprintf_internal_r+0xa28>
81113ffc:	d9402c17 	ldw	r5,176(sp)
81114000:	d9801e04 	addi	r6,sp,120
81114004:	9809883a 	mov	r4,r19
81114008:	11200ac0 	call	811200ac <__ssprint_r>
8111400c:	103e5e1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114010:	d8c02017 	ldw	r3,128(sp)
81114014:	d8803117 	ldw	r2,196(sp)
81114018:	d9002a17 	ldw	r4,168(sp)
8111401c:	1100010e 	bge	r2,r4,81114024 <___svfprintf_internal_r+0xa38>
81114020:	2005883a 	mov	r2,r4
81114024:	d9402f17 	ldw	r5,188(sp)
81114028:	288b883a 	add	r5,r5,r2
8111402c:	d9402f15 	stw	r5,188(sp)
81114030:	18019c1e 	bne	r3,zero,811146a4 <___svfprintf_internal_r+0x10b8>
81114034:	b8800007 	ldb	r2,0(r23)
81114038:	d8001f15 	stw	zero,124(sp)
8111403c:	da000404 	addi	r8,sp,16
81114040:	103d991e 	bne	r2,zero,811136a8 <__reset+0xfb0f36a8>
81114044:	b821883a 	mov	r16,r23
81114048:	003daf06 	br	81113708 <__reset+0xfb0f3708>
8111404c:	18c03fcc 	andi	r3,r3,255
81114050:	1805c71e 	bne	r3,zero,81115770 <___svfprintf_internal_r+0x2184>
81114054:	94800414 	ori	r18,r18,16
81114058:	9080080c 	andi	r2,r18,32
8111405c:	10020126 	beq	r2,zero,81114864 <___svfprintf_internal_r+0x1278>
81114060:	d8802d17 	ldw	r2,180(sp)
81114064:	d9002917 	ldw	r4,164(sp)
81114068:	d8002785 	stb	zero,158(sp)
8111406c:	10c00204 	addi	r3,r2,8
81114070:	15000017 	ldw	r20,0(r2)
81114074:	15800117 	ldw	r22,4(r2)
81114078:	20038e16 	blt	r4,zero,81114eb4 <___svfprintf_internal_r+0x18c8>
8111407c:	013fdfc4 	movi	r4,-129
81114080:	a584b03a 	or	r2,r20,r22
81114084:	d8c02d15 	stw	r3,180(sp)
81114088:	9124703a 	and	r18,r18,r4
8111408c:	0039883a 	mov	fp,zero
81114090:	103eb61e 	bne	r2,zero,81113b6c <__reset+0xfb0f3b6c>
81114094:	d8802917 	ldw	r2,164(sp)
81114098:	1002c81e 	bne	r2,zero,81114bbc <___svfprintf_internal_r+0x15d0>
8111409c:	d8002915 	stw	zero,164(sp)
811140a0:	d8002e15 	stw	zero,184(sp)
811140a4:	dc001e04 	addi	r16,sp,120
811140a8:	003efa06 	br	81113c94 <__reset+0xfb0f3c94>
811140ac:	18c03fcc 	andi	r3,r3,255
811140b0:	1805ad1e 	bne	r3,zero,81115768 <___svfprintf_internal_r+0x217c>
811140b4:	01604534 	movhi	r5,33044
811140b8:	29790f04 	addi	r5,r5,-7108
811140bc:	d9403a15 	stw	r5,232(sp)
811140c0:	9080080c 	andi	r2,r18,32
811140c4:	10006126 	beq	r2,zero,8111424c <___svfprintf_internal_r+0xc60>
811140c8:	d8802d17 	ldw	r2,180(sp)
811140cc:	15000017 	ldw	r20,0(r2)
811140d0:	15800117 	ldw	r22,4(r2)
811140d4:	10800204 	addi	r2,r2,8
811140d8:	d8802d15 	stw	r2,180(sp)
811140dc:	9080004c 	andi	r2,r18,1
811140e0:	10018e26 	beq	r2,zero,8111471c <___svfprintf_internal_r+0x1130>
811140e4:	a584b03a 	or	r2,r20,r22
811140e8:	10030926 	beq	r2,zero,81114d10 <___svfprintf_internal_r+0x1724>
811140ec:	d8c02917 	ldw	r3,164(sp)
811140f0:	00800c04 	movi	r2,48
811140f4:	d8802705 	stb	r2,156(sp)
811140f8:	dc402745 	stb	r17,157(sp)
811140fc:	d8002785 	stb	zero,158(sp)
81114100:	90800094 	ori	r2,r18,2
81114104:	18048716 	blt	r3,zero,81115324 <___svfprintf_internal_r+0x1d38>
81114108:	00bfdfc4 	movi	r2,-129
8111410c:	90a4703a 	and	r18,r18,r2
81114110:	94800094 	ori	r18,r18,2
81114114:	0039883a 	mov	fp,zero
81114118:	d9003a17 	ldw	r4,232(sp)
8111411c:	dc001e04 	addi	r16,sp,120
81114120:	a08003cc 	andi	r2,r20,15
81114124:	b006973a 	slli	r3,r22,28
81114128:	2085883a 	add	r2,r4,r2
8111412c:	a028d13a 	srli	r20,r20,4
81114130:	10800003 	ldbu	r2,0(r2)
81114134:	b02cd13a 	srli	r22,r22,4
81114138:	843fffc4 	addi	r16,r16,-1
8111413c:	1d28b03a 	or	r20,r3,r20
81114140:	80800005 	stb	r2,0(r16)
81114144:	a584b03a 	or	r2,r20,r22
81114148:	103ff51e 	bne	r2,zero,81114120 <__reset+0xfb0f4120>
8111414c:	d8c02817 	ldw	r3,160(sp)
81114150:	1c07c83a 	sub	r3,r3,r16
81114154:	d8c02e15 	stw	r3,184(sp)
81114158:	003ece06 	br	81113c94 <__reset+0xfb0f3c94>
8111415c:	d8c02d17 	ldw	r3,180(sp)
81114160:	d9002d17 	ldw	r4,180(sp)
81114164:	d8002785 	stb	zero,158(sp)
81114168:	18800017 	ldw	r2,0(r3)
8111416c:	21000104 	addi	r4,r4,4
81114170:	00c00044 	movi	r3,1
81114174:	d8c02a15 	stw	r3,168(sp)
81114178:	d8801405 	stb	r2,80(sp)
8111417c:	d9002d15 	stw	r4,180(sp)
81114180:	d8c02e15 	stw	r3,184(sp)
81114184:	d8002915 	stw	zero,164(sp)
81114188:	d8003215 	stw	zero,200(sp)
8111418c:	dc001404 	addi	r16,sp,80
81114190:	0039883a 	mov	fp,zero
81114194:	003ecc06 	br	81113cc8 <__reset+0xfb0f3cc8>
81114198:	18c03fcc 	andi	r3,r3,255
8111419c:	183e9226 	beq	r3,zero,81113be8 <__reset+0xfb0f3be8>
811141a0:	d9c02785 	stb	r7,158(sp)
811141a4:	003e9006 	br	81113be8 <__reset+0xfb0f3be8>
811141a8:	00c00044 	movi	r3,1
811141ac:	01c00ac4 	movi	r7,43
811141b0:	bc400007 	ldb	r17,0(r23)
811141b4:	003d6306 	br	81113744 <__reset+0xfb0f3744>
811141b8:	94800814 	ori	r18,r18,32
811141bc:	bc400007 	ldb	r17,0(r23)
811141c0:	003d6006 	br	81113744 <__reset+0xfb0f3744>
811141c4:	d8c02d17 	ldw	r3,180(sp)
811141c8:	d8002785 	stb	zero,158(sp)
811141cc:	1c000017 	ldw	r16,0(r3)
811141d0:	1d000104 	addi	r20,r3,4
811141d4:	80040f26 	beq	r16,zero,81115214 <___svfprintf_internal_r+0x1c28>
811141d8:	d9002917 	ldw	r4,164(sp)
811141dc:	2003dc16 	blt	r4,zero,81115150 <___svfprintf_internal_r+0x1b64>
811141e0:	200d883a 	mov	r6,r4
811141e4:	000b883a 	mov	r5,zero
811141e8:	8009883a 	mov	r4,r16
811141ec:	da003e15 	stw	r8,248(sp)
811141f0:	111c6500 	call	8111c650 <memchr>
811141f4:	da003e17 	ldw	r8,248(sp)
811141f8:	10045826 	beq	r2,zero,8111535c <___svfprintf_internal_r+0x1d70>
811141fc:	1405c83a 	sub	r2,r2,r16
81114200:	d8802e15 	stw	r2,184(sp)
81114204:	1003d816 	blt	r2,zero,81115168 <___svfprintf_internal_r+0x1b7c>
81114208:	df002783 	ldbu	fp,158(sp)
8111420c:	d8802a15 	stw	r2,168(sp)
81114210:	dd002d15 	stw	r20,180(sp)
81114214:	d8002915 	stw	zero,164(sp)
81114218:	d8003215 	stw	zero,200(sp)
8111421c:	003ea306 	br	81113cac <__reset+0xfb0f3cac>
81114220:	18c03fcc 	andi	r3,r3,255
81114224:	183f8c26 	beq	r3,zero,81114058 <__reset+0xfb0f4058>
81114228:	d9c02785 	stb	r7,158(sp)
8111422c:	003f8a06 	br	81114058 <__reset+0xfb0f4058>
81114230:	18c03fcc 	andi	r3,r3,255
81114234:	1805631e 	bne	r3,zero,811157c4 <___svfprintf_internal_r+0x21d8>
81114238:	01604534 	movhi	r5,33044
8111423c:	29791404 	addi	r5,r5,-7088
81114240:	d9403a15 	stw	r5,232(sp)
81114244:	9080080c 	andi	r2,r18,32
81114248:	103f9f1e 	bne	r2,zero,811140c8 <__reset+0xfb0f40c8>
8111424c:	9080040c 	andi	r2,r18,16
81114250:	10029c26 	beq	r2,zero,81114cc4 <___svfprintf_internal_r+0x16d8>
81114254:	d8c02d17 	ldw	r3,180(sp)
81114258:	002d883a 	mov	r22,zero
8111425c:	1d000017 	ldw	r20,0(r3)
81114260:	18c00104 	addi	r3,r3,4
81114264:	d8c02d15 	stw	r3,180(sp)
81114268:	003f9c06 	br	811140dc <__reset+0xfb0f40dc>
8111426c:	94800054 	ori	r18,r18,1
81114270:	bc400007 	ldb	r17,0(r23)
81114274:	003d3306 	br	81113744 <__reset+0xfb0f3744>
81114278:	38803fcc 	andi	r2,r7,255
8111427c:	1080201c 	xori	r2,r2,128
81114280:	10bfe004 	addi	r2,r2,-128
81114284:	1002971e 	bne	r2,zero,81114ce4 <___svfprintf_internal_r+0x16f8>
81114288:	00c00044 	movi	r3,1
8111428c:	01c00804 	movi	r7,32
81114290:	bc400007 	ldb	r17,0(r23)
81114294:	003d2b06 	br	81113744 <__reset+0xfb0f3744>
81114298:	18c03fcc 	andi	r3,r3,255
8111429c:	183e2326 	beq	r3,zero,81113b2c <__reset+0xfb0f3b2c>
811142a0:	d9c02785 	stb	r7,158(sp)
811142a4:	003e2106 	br	81113b2c <__reset+0xfb0f3b2c>
811142a8:	bc400007 	ldb	r17,0(r23)
811142ac:	8a430426 	beq	r17,r9,81114ec0 <___svfprintf_internal_r+0x18d4>
811142b0:	94800414 	ori	r18,r18,16
811142b4:	003d2306 	br	81113744 <__reset+0xfb0f3744>
811142b8:	18c03fcc 	andi	r3,r3,255
811142bc:	18053f1e 	bne	r3,zero,811157bc <___svfprintf_internal_r+0x21d0>
811142c0:	9080080c 	andi	r2,r18,32
811142c4:	10028926 	beq	r2,zero,81114cec <___svfprintf_internal_r+0x1700>
811142c8:	d9402d17 	ldw	r5,180(sp)
811142cc:	d9002f17 	ldw	r4,188(sp)
811142d0:	28800017 	ldw	r2,0(r5)
811142d4:	2007d7fa 	srai	r3,r4,31
811142d8:	29400104 	addi	r5,r5,4
811142dc:	d9402d15 	stw	r5,180(sp)
811142e0:	11000015 	stw	r4,0(r2)
811142e4:	10c00115 	stw	r3,4(r2)
811142e8:	003ced06 	br	811136a0 <__reset+0xfb0f36a0>
811142ec:	94801014 	ori	r18,r18,64
811142f0:	bc400007 	ldb	r17,0(r23)
811142f4:	003d1306 	br	81113744 <__reset+0xfb0f3744>
811142f8:	01204534 	movhi	r4,33044
811142fc:	21391404 	addi	r4,r4,-7088
81114300:	0039883a 	mov	fp,zero
81114304:	d9003a15 	stw	r4,232(sp)
81114308:	04401e04 	movi	r17,120
8111430c:	003f8206 	br	81114118 <__reset+0xfb0f4118>
81114310:	18c03fcc 	andi	r3,r3,255
81114314:	1805221e 	bne	r3,zero,811157a0 <___svfprintf_internal_r+0x21b4>
81114318:	883d9526 	beq	r17,zero,81113970 <__reset+0xfb0f3970>
8111431c:	00c00044 	movi	r3,1
81114320:	d8c02a15 	stw	r3,168(sp)
81114324:	dc401405 	stb	r17,80(sp)
81114328:	d8002785 	stb	zero,158(sp)
8111432c:	003f9406 	br	81114180 <__reset+0xfb0f4180>
81114330:	01204534 	movhi	r4,33044
81114334:	21391404 	addi	r4,r4,-7088
81114338:	d9003a15 	stw	r4,232(sp)
8111433c:	d8c02d15 	stw	r3,180(sp)
81114340:	1025883a 	mov	r18,r2
81114344:	04401e04 	movi	r17,120
81114348:	a584b03a 	or	r2,r20,r22
8111434c:	1000fa1e 	bne	r2,zero,81114738 <___svfprintf_internal_r+0x114c>
81114350:	0039883a 	mov	fp,zero
81114354:	00800084 	movi	r2,2
81114358:	10803fcc 	andi	r2,r2,255
8111435c:	00c00044 	movi	r3,1
81114360:	10c21626 	beq	r2,r3,81114bbc <___svfprintf_internal_r+0x15d0>
81114364:	00c00084 	movi	r3,2
81114368:	10fe301e 	bne	r2,r3,81113c2c <__reset+0xfb0f3c2c>
8111436c:	003d7606 	br	81113948 <__reset+0xfb0f3948>
81114370:	d8c02017 	ldw	r3,128(sp)
81114374:	003e9506 	br	81113dcc <__reset+0xfb0f3dcc>
81114378:	00801944 	movi	r2,101
8111437c:	14407c0e 	bge	r2,r17,81114570 <___svfprintf_internal_r+0xf84>
81114380:	d9003617 	ldw	r4,216(sp)
81114384:	d9403717 	ldw	r5,220(sp)
81114388:	000d883a 	mov	r6,zero
8111438c:	000f883a 	mov	r7,zero
81114390:	d8c03d15 	stw	r3,244(sp)
81114394:	da003e15 	stw	r8,248(sp)
81114398:	11262040 	call	81126204 <__eqdf2>
8111439c:	d8c03d17 	ldw	r3,244(sp)
811143a0:	da003e17 	ldw	r8,248(sp)
811143a4:	1000f51e 	bne	r2,zero,8111477c <___svfprintf_internal_r+0x1190>
811143a8:	d8801f17 	ldw	r2,124(sp)
811143ac:	01204534 	movhi	r4,33044
811143b0:	21391b04 	addi	r4,r4,-7060
811143b4:	18c00044 	addi	r3,r3,1
811143b8:	10800044 	addi	r2,r2,1
811143bc:	41000015 	stw	r4,0(r8)
811143c0:	01000044 	movi	r4,1
811143c4:	41000115 	stw	r4,4(r8)
811143c8:	d8c02015 	stw	r3,128(sp)
811143cc:	d8801f15 	stw	r2,124(sp)
811143d0:	010001c4 	movi	r4,7
811143d4:	20826616 	blt	r4,r2,81114d70 <___svfprintf_internal_r+0x1784>
811143d8:	42000204 	addi	r8,r8,8
811143dc:	d8802617 	ldw	r2,152(sp)
811143e0:	d9403317 	ldw	r5,204(sp)
811143e4:	11400216 	blt	r2,r5,811143f0 <___svfprintf_internal_r+0xe04>
811143e8:	9080004c 	andi	r2,r18,1
811143ec:	103ed526 	beq	r2,zero,81113f44 <__reset+0xfb0f3f44>
811143f0:	d8803817 	ldw	r2,224(sp)
811143f4:	d9003417 	ldw	r4,208(sp)
811143f8:	d9403817 	ldw	r5,224(sp)
811143fc:	1887883a 	add	r3,r3,r2
81114400:	d8801f17 	ldw	r2,124(sp)
81114404:	41000015 	stw	r4,0(r8)
81114408:	41400115 	stw	r5,4(r8)
8111440c:	10800044 	addi	r2,r2,1
81114410:	d8c02015 	stw	r3,128(sp)
81114414:	d8801f15 	stw	r2,124(sp)
81114418:	010001c4 	movi	r4,7
8111441c:	2082af16 	blt	r4,r2,81114edc <___svfprintf_internal_r+0x18f0>
81114420:	42000204 	addi	r8,r8,8
81114424:	d8803317 	ldw	r2,204(sp)
81114428:	143fffc4 	addi	r16,r2,-1
8111442c:	043ec50e 	bge	zero,r16,81113f44 <__reset+0xfb0f3f44>
81114430:	04400404 	movi	r17,16
81114434:	d8801f17 	ldw	r2,124(sp)
81114438:	8c00860e 	bge	r17,r16,81114654 <___svfprintf_internal_r+0x1068>
8111443c:	01604534 	movhi	r5,33044
81114440:	29791b84 	addi	r5,r5,-7058
81114444:	d9402b15 	stw	r5,172(sp)
81114448:	058001c4 	movi	r22,7
8111444c:	dd002c17 	ldw	r20,176(sp)
81114450:	00000306 	br	81114460 <___svfprintf_internal_r+0xe74>
81114454:	42000204 	addi	r8,r8,8
81114458:	843ffc04 	addi	r16,r16,-16
8111445c:	8c00800e 	bge	r17,r16,81114660 <___svfprintf_internal_r+0x1074>
81114460:	18c00404 	addi	r3,r3,16
81114464:	10800044 	addi	r2,r2,1
81114468:	45400015 	stw	r21,0(r8)
8111446c:	44400115 	stw	r17,4(r8)
81114470:	d8c02015 	stw	r3,128(sp)
81114474:	d8801f15 	stw	r2,124(sp)
81114478:	b0bff60e 	bge	r22,r2,81114454 <__reset+0xfb0f4454>
8111447c:	d9801e04 	addi	r6,sp,120
81114480:	a00b883a 	mov	r5,r20
81114484:	9809883a 	mov	r4,r19
81114488:	11200ac0 	call	811200ac <__ssprint_r>
8111448c:	103d3e1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114490:	d8c02017 	ldw	r3,128(sp)
81114494:	d8801f17 	ldw	r2,124(sp)
81114498:	da000404 	addi	r8,sp,16
8111449c:	003fee06 	br	81114458 <__reset+0xfb0f4458>
811144a0:	d9403117 	ldw	r5,196(sp)
811144a4:	d8802a17 	ldw	r2,168(sp)
811144a8:	28adc83a 	sub	r22,r5,r2
811144ac:	05be650e 	bge	zero,r22,81113e44 <__reset+0xfb0f3e44>
811144b0:	07000404 	movi	fp,16
811144b4:	d8801f17 	ldw	r2,124(sp)
811144b8:	e583a20e 	bge	fp,r22,81115344 <___svfprintf_internal_r+0x1d58>
811144bc:	01604534 	movhi	r5,33044
811144c0:	29791b84 	addi	r5,r5,-7058
811144c4:	dc403015 	stw	r17,192(sp)
811144c8:	d9402b15 	stw	r5,172(sp)
811144cc:	b023883a 	mov	r17,r22
811144d0:	050001c4 	movi	r20,7
811144d4:	902d883a 	mov	r22,r18
811144d8:	8025883a 	mov	r18,r16
811144dc:	dc002c17 	ldw	r16,176(sp)
811144e0:	00000306 	br	811144f0 <___svfprintf_internal_r+0xf04>
811144e4:	8c7ffc04 	addi	r17,r17,-16
811144e8:	42000204 	addi	r8,r8,8
811144ec:	e440110e 	bge	fp,r17,81114534 <___svfprintf_internal_r+0xf48>
811144f0:	18c00404 	addi	r3,r3,16
811144f4:	10800044 	addi	r2,r2,1
811144f8:	45400015 	stw	r21,0(r8)
811144fc:	47000115 	stw	fp,4(r8)
81114500:	d8c02015 	stw	r3,128(sp)
81114504:	d8801f15 	stw	r2,124(sp)
81114508:	a0bff60e 	bge	r20,r2,811144e4 <__reset+0xfb0f44e4>
8111450c:	d9801e04 	addi	r6,sp,120
81114510:	800b883a 	mov	r5,r16
81114514:	9809883a 	mov	r4,r19
81114518:	11200ac0 	call	811200ac <__ssprint_r>
8111451c:	103d1a1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114520:	8c7ffc04 	addi	r17,r17,-16
81114524:	d8c02017 	ldw	r3,128(sp)
81114528:	d8801f17 	ldw	r2,124(sp)
8111452c:	da000404 	addi	r8,sp,16
81114530:	e47fef16 	blt	fp,r17,811144f0 <__reset+0xfb0f44f0>
81114534:	9021883a 	mov	r16,r18
81114538:	b025883a 	mov	r18,r22
8111453c:	882d883a 	mov	r22,r17
81114540:	dc403017 	ldw	r17,192(sp)
81114544:	d9002b17 	ldw	r4,172(sp)
81114548:	1d87883a 	add	r3,r3,r22
8111454c:	10800044 	addi	r2,r2,1
81114550:	41000015 	stw	r4,0(r8)
81114554:	45800115 	stw	r22,4(r8)
81114558:	d8c02015 	stw	r3,128(sp)
8111455c:	d8801f15 	stw	r2,124(sp)
81114560:	010001c4 	movi	r4,7
81114564:	20819a16 	blt	r4,r2,81114bd0 <___svfprintf_internal_r+0x15e4>
81114568:	42000204 	addi	r8,r8,8
8111456c:	003e3506 	br	81113e44 <__reset+0xfb0f3e44>
81114570:	d9403317 	ldw	r5,204(sp)
81114574:	00800044 	movi	r2,1
81114578:	18c00044 	addi	r3,r3,1
8111457c:	1141710e 	bge	r2,r5,81114b44 <___svfprintf_internal_r+0x1558>
81114580:	dc401f17 	ldw	r17,124(sp)
81114584:	00800044 	movi	r2,1
81114588:	40800115 	stw	r2,4(r8)
8111458c:	8c400044 	addi	r17,r17,1
81114590:	44000015 	stw	r16,0(r8)
81114594:	d8c02015 	stw	r3,128(sp)
81114598:	dc401f15 	stw	r17,124(sp)
8111459c:	008001c4 	movi	r2,7
811145a0:	14417416 	blt	r2,r17,81114b74 <___svfprintf_internal_r+0x1588>
811145a4:	42000204 	addi	r8,r8,8
811145a8:	d8803817 	ldw	r2,224(sp)
811145ac:	d9003417 	ldw	r4,208(sp)
811145b0:	8c400044 	addi	r17,r17,1
811145b4:	10c7883a 	add	r3,r2,r3
811145b8:	40800115 	stw	r2,4(r8)
811145bc:	41000015 	stw	r4,0(r8)
811145c0:	d8c02015 	stw	r3,128(sp)
811145c4:	dc401f15 	stw	r17,124(sp)
811145c8:	008001c4 	movi	r2,7
811145cc:	14417216 	blt	r2,r17,81114b98 <___svfprintf_internal_r+0x15ac>
811145d0:	45800204 	addi	r22,r8,8
811145d4:	d9003617 	ldw	r4,216(sp)
811145d8:	d9403717 	ldw	r5,220(sp)
811145dc:	000d883a 	mov	r6,zero
811145e0:	000f883a 	mov	r7,zero
811145e4:	d8c03d15 	stw	r3,244(sp)
811145e8:	11262040 	call	81126204 <__eqdf2>
811145ec:	d8c03d17 	ldw	r3,244(sp)
811145f0:	1000b326 	beq	r2,zero,811148c0 <___svfprintf_internal_r+0x12d4>
811145f4:	d9403317 	ldw	r5,204(sp)
811145f8:	84000044 	addi	r16,r16,1
811145fc:	8c400044 	addi	r17,r17,1
81114600:	28bfffc4 	addi	r2,r5,-1
81114604:	1887883a 	add	r3,r3,r2
81114608:	b0800115 	stw	r2,4(r22)
8111460c:	b4000015 	stw	r16,0(r22)
81114610:	d8c02015 	stw	r3,128(sp)
81114614:	dc401f15 	stw	r17,124(sp)
81114618:	008001c4 	movi	r2,7
8111461c:	1440d216 	blt	r2,r17,81114968 <___svfprintf_internal_r+0x137c>
81114620:	b5800204 	addi	r22,r22,8
81114624:	d9003b17 	ldw	r4,236(sp)
81114628:	df0022c4 	addi	fp,sp,139
8111462c:	8c400044 	addi	r17,r17,1
81114630:	20c7883a 	add	r3,r4,r3
81114634:	b7000015 	stw	fp,0(r22)
81114638:	b1000115 	stw	r4,4(r22)
8111463c:	d8c02015 	stw	r3,128(sp)
81114640:	dc401f15 	stw	r17,124(sp)
81114644:	008001c4 	movi	r2,7
81114648:	14400e16 	blt	r2,r17,81114684 <___svfprintf_internal_r+0x1098>
8111464c:	b2000204 	addi	r8,r22,8
81114650:	003e3c06 	br	81113f44 <__reset+0xfb0f3f44>
81114654:	01204534 	movhi	r4,33044
81114658:	21391b84 	addi	r4,r4,-7058
8111465c:	d9002b15 	stw	r4,172(sp)
81114660:	d9002b17 	ldw	r4,172(sp)
81114664:	1c07883a 	add	r3,r3,r16
81114668:	44000115 	stw	r16,4(r8)
8111466c:	41000015 	stw	r4,0(r8)
81114670:	10800044 	addi	r2,r2,1
81114674:	d8c02015 	stw	r3,128(sp)
81114678:	d8801f15 	stw	r2,124(sp)
8111467c:	010001c4 	movi	r4,7
81114680:	20be2f0e 	bge	r4,r2,81113f40 <__reset+0xfb0f3f40>
81114684:	d9402c17 	ldw	r5,176(sp)
81114688:	d9801e04 	addi	r6,sp,120
8111468c:	9809883a 	mov	r4,r19
81114690:	11200ac0 	call	811200ac <__ssprint_r>
81114694:	103cbc1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114698:	d8c02017 	ldw	r3,128(sp)
8111469c:	da000404 	addi	r8,sp,16
811146a0:	003e2806 	br	81113f44 <__reset+0xfb0f3f44>
811146a4:	d9402c17 	ldw	r5,176(sp)
811146a8:	d9801e04 	addi	r6,sp,120
811146ac:	9809883a 	mov	r4,r19
811146b0:	11200ac0 	call	811200ac <__ssprint_r>
811146b4:	103e5f26 	beq	r2,zero,81114034 <__reset+0xfb0f4034>
811146b8:	003cb306 	br	81113988 <__reset+0xfb0f3988>
811146bc:	d9402c17 	ldw	r5,176(sp)
811146c0:	d9801e04 	addi	r6,sp,120
811146c4:	9809883a 	mov	r4,r19
811146c8:	11200ac0 	call	811200ac <__ssprint_r>
811146cc:	103cae1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
811146d0:	d8c02017 	ldw	r3,128(sp)
811146d4:	da000404 	addi	r8,sp,16
811146d8:	003e0d06 	br	81113f10 <__reset+0xfb0f3f10>
811146dc:	d9402c17 	ldw	r5,176(sp)
811146e0:	d9801e04 	addi	r6,sp,120
811146e4:	9809883a 	mov	r4,r19
811146e8:	11200ac0 	call	811200ac <__ssprint_r>
811146ec:	103ca61e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
811146f0:	d8c02017 	ldw	r3,128(sp)
811146f4:	da000404 	addi	r8,sp,16
811146f8:	003dc106 	br	81113e00 <__reset+0xfb0f3e00>
811146fc:	d9402c17 	ldw	r5,176(sp)
81114700:	d9801e04 	addi	r6,sp,120
81114704:	9809883a 	mov	r4,r19
81114708:	11200ac0 	call	811200ac <__ssprint_r>
8111470c:	103c9e1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114710:	d8c02017 	ldw	r3,128(sp)
81114714:	da000404 	addi	r8,sp,16
81114718:	003dc706 	br	81113e38 <__reset+0xfb0f3e38>
8111471c:	d8802917 	ldw	r2,164(sp)
81114720:	d8002785 	stb	zero,158(sp)
81114724:	103f0816 	blt	r2,zero,81114348 <__reset+0xfb0f4348>
81114728:	00ffdfc4 	movi	r3,-129
8111472c:	a584b03a 	or	r2,r20,r22
81114730:	90e4703a 	and	r18,r18,r3
81114734:	103c8126 	beq	r2,zero,8111393c <__reset+0xfb0f393c>
81114738:	0039883a 	mov	fp,zero
8111473c:	003e7606 	br	81114118 <__reset+0xfb0f4118>
81114740:	9080040c 	andi	r2,r18,16
81114744:	10013d26 	beq	r2,zero,81114c3c <___svfprintf_internal_r+0x1650>
81114748:	d9002d17 	ldw	r4,180(sp)
8111474c:	d9402917 	ldw	r5,164(sp)
81114750:	d8002785 	stb	zero,158(sp)
81114754:	20800104 	addi	r2,r4,4
81114758:	25000017 	ldw	r20,0(r4)
8111475c:	002d883a 	mov	r22,zero
81114760:	28013f16 	blt	r5,zero,81114c60 <___svfprintf_internal_r+0x1674>
81114764:	00ffdfc4 	movi	r3,-129
81114768:	d8802d15 	stw	r2,180(sp)
8111476c:	90e4703a 	and	r18,r18,r3
81114770:	a03d2b26 	beq	r20,zero,81113c20 <__reset+0xfb0f3c20>
81114774:	0039883a 	mov	fp,zero
81114778:	003d2e06 	br	81113c34 <__reset+0xfb0f3c34>
8111477c:	dc402617 	ldw	r17,152(sp)
81114780:	0441830e 	bge	zero,r17,81114d90 <___svfprintf_internal_r+0x17a4>
81114784:	dc403217 	ldw	r17,200(sp)
81114788:	d8803317 	ldw	r2,204(sp)
8111478c:	1440010e 	bge	r2,r17,81114794 <___svfprintf_internal_r+0x11a8>
81114790:	1023883a 	mov	r17,r2
81114794:	04400a0e 	bge	zero,r17,811147c0 <___svfprintf_internal_r+0x11d4>
81114798:	d8801f17 	ldw	r2,124(sp)
8111479c:	1c47883a 	add	r3,r3,r17
811147a0:	44000015 	stw	r16,0(r8)
811147a4:	10800044 	addi	r2,r2,1
811147a8:	44400115 	stw	r17,4(r8)
811147ac:	d8c02015 	stw	r3,128(sp)
811147b0:	d8801f15 	stw	r2,124(sp)
811147b4:	010001c4 	movi	r4,7
811147b8:	20827516 	blt	r4,r2,81115190 <___svfprintf_internal_r+0x1ba4>
811147bc:	42000204 	addi	r8,r8,8
811147c0:	88027b16 	blt	r17,zero,811151b0 <___svfprintf_internal_r+0x1bc4>
811147c4:	d9003217 	ldw	r4,200(sp)
811147c8:	2463c83a 	sub	r17,r4,r17
811147cc:	0440990e 	bge	zero,r17,81114a34 <___svfprintf_internal_r+0x1448>
811147d0:	05800404 	movi	r22,16
811147d4:	d8801f17 	ldw	r2,124(sp)
811147d8:	b441530e 	bge	r22,r17,81114d28 <___svfprintf_internal_r+0x173c>
811147dc:	01204534 	movhi	r4,33044
811147e0:	21391b84 	addi	r4,r4,-7058
811147e4:	d9002b15 	stw	r4,172(sp)
811147e8:	070001c4 	movi	fp,7
811147ec:	dd002c17 	ldw	r20,176(sp)
811147f0:	00000306 	br	81114800 <___svfprintf_internal_r+0x1214>
811147f4:	42000204 	addi	r8,r8,8
811147f8:	8c7ffc04 	addi	r17,r17,-16
811147fc:	b4414d0e 	bge	r22,r17,81114d34 <___svfprintf_internal_r+0x1748>
81114800:	18c00404 	addi	r3,r3,16
81114804:	10800044 	addi	r2,r2,1
81114808:	45400015 	stw	r21,0(r8)
8111480c:	45800115 	stw	r22,4(r8)
81114810:	d8c02015 	stw	r3,128(sp)
81114814:	d8801f15 	stw	r2,124(sp)
81114818:	e0bff60e 	bge	fp,r2,811147f4 <__reset+0xfb0f47f4>
8111481c:	d9801e04 	addi	r6,sp,120
81114820:	a00b883a 	mov	r5,r20
81114824:	9809883a 	mov	r4,r19
81114828:	11200ac0 	call	811200ac <__ssprint_r>
8111482c:	103c561e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114830:	d8c02017 	ldw	r3,128(sp)
81114834:	d8801f17 	ldw	r2,124(sp)
81114838:	da000404 	addi	r8,sp,16
8111483c:	003fee06 	br	811147f8 <__reset+0xfb0f47f8>
81114840:	d9402c17 	ldw	r5,176(sp)
81114844:	d9801e04 	addi	r6,sp,120
81114848:	9809883a 	mov	r4,r19
8111484c:	11200ac0 	call	811200ac <__ssprint_r>
81114850:	103c4d1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114854:	d8c02017 	ldw	r3,128(sp)
81114858:	df002787 	ldb	fp,158(sp)
8111485c:	da000404 	addi	r8,sp,16
81114860:	003d5a06 	br	81113dcc <__reset+0xfb0f3dcc>
81114864:	9080040c 	andi	r2,r18,16
81114868:	10005c26 	beq	r2,zero,811149dc <___svfprintf_internal_r+0x13f0>
8111486c:	d9402d17 	ldw	r5,180(sp)
81114870:	d8c02917 	ldw	r3,164(sp)
81114874:	d8002785 	stb	zero,158(sp)
81114878:	28800104 	addi	r2,r5,4
8111487c:	2d000017 	ldw	r20,0(r5)
81114880:	002d883a 	mov	r22,zero
81114884:	18005e16 	blt	r3,zero,81114a00 <___svfprintf_internal_r+0x1414>
81114888:	00ffdfc4 	movi	r3,-129
8111488c:	d8802d15 	stw	r2,180(sp)
81114890:	90e4703a 	and	r18,r18,r3
81114894:	0039883a 	mov	fp,zero
81114898:	a03dfe26 	beq	r20,zero,81114094 <__reset+0xfb0f4094>
8111489c:	00800244 	movi	r2,9
811148a0:	153cb336 	bltu	r2,r20,81113b70 <__reset+0xfb0f3b70>
811148a4:	a5000c04 	addi	r20,r20,48
811148a8:	dc001dc4 	addi	r16,sp,119
811148ac:	dd001dc5 	stb	r20,119(sp)
811148b0:	d8c02817 	ldw	r3,160(sp)
811148b4:	1c07c83a 	sub	r3,r3,r16
811148b8:	d8c02e15 	stw	r3,184(sp)
811148bc:	003cf506 	br	81113c94 <__reset+0xfb0f3c94>
811148c0:	d8803317 	ldw	r2,204(sp)
811148c4:	143fffc4 	addi	r16,r2,-1
811148c8:	043f560e 	bge	zero,r16,81114624 <__reset+0xfb0f4624>
811148cc:	07000404 	movi	fp,16
811148d0:	e403530e 	bge	fp,r16,81115620 <___svfprintf_internal_r+0x2034>
811148d4:	01604534 	movhi	r5,33044
811148d8:	29791b84 	addi	r5,r5,-7058
811148dc:	d9402b15 	stw	r5,172(sp)
811148e0:	01c001c4 	movi	r7,7
811148e4:	dd002c17 	ldw	r20,176(sp)
811148e8:	00000306 	br	811148f8 <___svfprintf_internal_r+0x130c>
811148ec:	843ffc04 	addi	r16,r16,-16
811148f0:	b5800204 	addi	r22,r22,8
811148f4:	e400130e 	bge	fp,r16,81114944 <___svfprintf_internal_r+0x1358>
811148f8:	18c00404 	addi	r3,r3,16
811148fc:	8c400044 	addi	r17,r17,1
81114900:	b5400015 	stw	r21,0(r22)
81114904:	b7000115 	stw	fp,4(r22)
81114908:	d8c02015 	stw	r3,128(sp)
8111490c:	dc401f15 	stw	r17,124(sp)
81114910:	3c7ff60e 	bge	r7,r17,811148ec <__reset+0xfb0f48ec>
81114914:	d9801e04 	addi	r6,sp,120
81114918:	a00b883a 	mov	r5,r20
8111491c:	9809883a 	mov	r4,r19
81114920:	d9c03d15 	stw	r7,244(sp)
81114924:	11200ac0 	call	811200ac <__ssprint_r>
81114928:	d9c03d17 	ldw	r7,244(sp)
8111492c:	103c161e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114930:	843ffc04 	addi	r16,r16,-16
81114934:	d8c02017 	ldw	r3,128(sp)
81114938:	dc401f17 	ldw	r17,124(sp)
8111493c:	dd800404 	addi	r22,sp,16
81114940:	e43fed16 	blt	fp,r16,811148f8 <__reset+0xfb0f48f8>
81114944:	d8802b17 	ldw	r2,172(sp)
81114948:	1c07883a 	add	r3,r3,r16
8111494c:	8c400044 	addi	r17,r17,1
81114950:	b0800015 	stw	r2,0(r22)
81114954:	b4000115 	stw	r16,4(r22)
81114958:	d8c02015 	stw	r3,128(sp)
8111495c:	dc401f15 	stw	r17,124(sp)
81114960:	008001c4 	movi	r2,7
81114964:	147f2e0e 	bge	r2,r17,81114620 <__reset+0xfb0f4620>
81114968:	d9402c17 	ldw	r5,176(sp)
8111496c:	d9801e04 	addi	r6,sp,120
81114970:	9809883a 	mov	r4,r19
81114974:	11200ac0 	call	811200ac <__ssprint_r>
81114978:	103c031e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
8111497c:	d8c02017 	ldw	r3,128(sp)
81114980:	dc401f17 	ldw	r17,124(sp)
81114984:	dd800404 	addi	r22,sp,16
81114988:	003f2606 	br	81114624 <__reset+0xfb0f4624>
8111498c:	9080040c 	andi	r2,r18,16
81114990:	1000c326 	beq	r2,zero,81114ca0 <___svfprintf_internal_r+0x16b4>
81114994:	d8802d17 	ldw	r2,180(sp)
81114998:	15000017 	ldw	r20,0(r2)
8111499c:	10800104 	addi	r2,r2,4
811149a0:	d8802d15 	stw	r2,180(sp)
811149a4:	a02dd7fa 	srai	r22,r20,31
811149a8:	b005883a 	mov	r2,r22
811149ac:	103c680e 	bge	r2,zero,81113b50 <__reset+0xfb0f3b50>
811149b0:	0529c83a 	sub	r20,zero,r20
811149b4:	a004c03a 	cmpne	r2,r20,zero
811149b8:	05adc83a 	sub	r22,zero,r22
811149bc:	b0adc83a 	sub	r22,r22,r2
811149c0:	d8802917 	ldw	r2,164(sp)
811149c4:	07000b44 	movi	fp,45
811149c8:	df002785 	stb	fp,158(sp)
811149cc:	10022e16 	blt	r2,zero,81115288 <___svfprintf_internal_r+0x1c9c>
811149d0:	00bfdfc4 	movi	r2,-129
811149d4:	90a4703a 	and	r18,r18,r2
811149d8:	003c6406 	br	81113b6c <__reset+0xfb0f3b6c>
811149dc:	9080100c 	andi	r2,r18,64
811149e0:	d8002785 	stb	zero,158(sp)
811149e4:	10012526 	beq	r2,zero,81114e7c <___svfprintf_internal_r+0x1890>
811149e8:	d9002d17 	ldw	r4,180(sp)
811149ec:	d9402917 	ldw	r5,164(sp)
811149f0:	002d883a 	mov	r22,zero
811149f4:	20800104 	addi	r2,r4,4
811149f8:	2500000b 	ldhu	r20,0(r4)
811149fc:	283fa20e 	bge	r5,zero,81114888 <__reset+0xfb0f4888>
81114a00:	d8802d15 	stw	r2,180(sp)
81114a04:	0039883a 	mov	fp,zero
81114a08:	a584b03a 	or	r2,r20,r22
81114a0c:	103c571e 	bne	r2,zero,81113b6c <__reset+0xfb0f3b6c>
81114a10:	00800044 	movi	r2,1
81114a14:	003e5006 	br	81114358 <__reset+0xfb0f4358>
81114a18:	d9402c17 	ldw	r5,176(sp)
81114a1c:	d9801e04 	addi	r6,sp,120
81114a20:	9809883a 	mov	r4,r19
81114a24:	11200ac0 	call	811200ac <__ssprint_r>
81114a28:	103bd71e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114a2c:	d8c02017 	ldw	r3,128(sp)
81114a30:	da000404 	addi	r8,sp,16
81114a34:	d9003217 	ldw	r4,200(sp)
81114a38:	d8802617 	ldw	r2,152(sp)
81114a3c:	d9403317 	ldw	r5,204(sp)
81114a40:	8123883a 	add	r17,r16,r4
81114a44:	11400216 	blt	r2,r5,81114a50 <___svfprintf_internal_r+0x1464>
81114a48:	9100004c 	andi	r4,r18,1
81114a4c:	20000d26 	beq	r4,zero,81114a84 <___svfprintf_internal_r+0x1498>
81114a50:	d9003817 	ldw	r4,224(sp)
81114a54:	d9403417 	ldw	r5,208(sp)
81114a58:	1907883a 	add	r3,r3,r4
81114a5c:	d9001f17 	ldw	r4,124(sp)
81114a60:	41400015 	stw	r5,0(r8)
81114a64:	d9403817 	ldw	r5,224(sp)
81114a68:	21000044 	addi	r4,r4,1
81114a6c:	d8c02015 	stw	r3,128(sp)
81114a70:	41400115 	stw	r5,4(r8)
81114a74:	d9001f15 	stw	r4,124(sp)
81114a78:	014001c4 	movi	r5,7
81114a7c:	2901dc16 	blt	r5,r4,811151f0 <___svfprintf_internal_r+0x1c04>
81114a80:	42000204 	addi	r8,r8,8
81114a84:	d9003317 	ldw	r4,204(sp)
81114a88:	8121883a 	add	r16,r16,r4
81114a8c:	2085c83a 	sub	r2,r4,r2
81114a90:	8461c83a 	sub	r16,r16,r17
81114a94:	1400010e 	bge	r2,r16,81114a9c <___svfprintf_internal_r+0x14b0>
81114a98:	1021883a 	mov	r16,r2
81114a9c:	04000a0e 	bge	zero,r16,81114ac8 <___svfprintf_internal_r+0x14dc>
81114aa0:	d9001f17 	ldw	r4,124(sp)
81114aa4:	1c07883a 	add	r3,r3,r16
81114aa8:	44400015 	stw	r17,0(r8)
81114aac:	21000044 	addi	r4,r4,1
81114ab0:	44000115 	stw	r16,4(r8)
81114ab4:	d8c02015 	stw	r3,128(sp)
81114ab8:	d9001f15 	stw	r4,124(sp)
81114abc:	014001c4 	movi	r5,7
81114ac0:	2901e616 	blt	r5,r4,8111525c <___svfprintf_internal_r+0x1c70>
81114ac4:	42000204 	addi	r8,r8,8
81114ac8:	8001f616 	blt	r16,zero,811152a4 <___svfprintf_internal_r+0x1cb8>
81114acc:	1421c83a 	sub	r16,r2,r16
81114ad0:	043d1c0e 	bge	zero,r16,81113f44 <__reset+0xfb0f3f44>
81114ad4:	04400404 	movi	r17,16
81114ad8:	d8801f17 	ldw	r2,124(sp)
81114adc:	8c3edd0e 	bge	r17,r16,81114654 <__reset+0xfb0f4654>
81114ae0:	01604534 	movhi	r5,33044
81114ae4:	29791b84 	addi	r5,r5,-7058
81114ae8:	d9402b15 	stw	r5,172(sp)
81114aec:	058001c4 	movi	r22,7
81114af0:	dd002c17 	ldw	r20,176(sp)
81114af4:	00000306 	br	81114b04 <___svfprintf_internal_r+0x1518>
81114af8:	42000204 	addi	r8,r8,8
81114afc:	843ffc04 	addi	r16,r16,-16
81114b00:	8c3ed70e 	bge	r17,r16,81114660 <__reset+0xfb0f4660>
81114b04:	18c00404 	addi	r3,r3,16
81114b08:	10800044 	addi	r2,r2,1
81114b0c:	45400015 	stw	r21,0(r8)
81114b10:	44400115 	stw	r17,4(r8)
81114b14:	d8c02015 	stw	r3,128(sp)
81114b18:	d8801f15 	stw	r2,124(sp)
81114b1c:	b0bff60e 	bge	r22,r2,81114af8 <__reset+0xfb0f4af8>
81114b20:	d9801e04 	addi	r6,sp,120
81114b24:	a00b883a 	mov	r5,r20
81114b28:	9809883a 	mov	r4,r19
81114b2c:	11200ac0 	call	811200ac <__ssprint_r>
81114b30:	103b951e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114b34:	d8c02017 	ldw	r3,128(sp)
81114b38:	d8801f17 	ldw	r2,124(sp)
81114b3c:	da000404 	addi	r8,sp,16
81114b40:	003fee06 	br	81114afc <__reset+0xfb0f4afc>
81114b44:	9088703a 	and	r4,r18,r2
81114b48:	203e8d1e 	bne	r4,zero,81114580 <__reset+0xfb0f4580>
81114b4c:	dc401f17 	ldw	r17,124(sp)
81114b50:	40800115 	stw	r2,4(r8)
81114b54:	44000015 	stw	r16,0(r8)
81114b58:	8c400044 	addi	r17,r17,1
81114b5c:	d8c02015 	stw	r3,128(sp)
81114b60:	dc401f15 	stw	r17,124(sp)
81114b64:	008001c4 	movi	r2,7
81114b68:	147f7f16 	blt	r2,r17,81114968 <__reset+0xfb0f4968>
81114b6c:	45800204 	addi	r22,r8,8
81114b70:	003eac06 	br	81114624 <__reset+0xfb0f4624>
81114b74:	d9402c17 	ldw	r5,176(sp)
81114b78:	d9801e04 	addi	r6,sp,120
81114b7c:	9809883a 	mov	r4,r19
81114b80:	11200ac0 	call	811200ac <__ssprint_r>
81114b84:	103b801e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114b88:	d8c02017 	ldw	r3,128(sp)
81114b8c:	dc401f17 	ldw	r17,124(sp)
81114b90:	da000404 	addi	r8,sp,16
81114b94:	003e8406 	br	811145a8 <__reset+0xfb0f45a8>
81114b98:	d9402c17 	ldw	r5,176(sp)
81114b9c:	d9801e04 	addi	r6,sp,120
81114ba0:	9809883a 	mov	r4,r19
81114ba4:	11200ac0 	call	811200ac <__ssprint_r>
81114ba8:	103b771e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114bac:	d8c02017 	ldw	r3,128(sp)
81114bb0:	dc401f17 	ldw	r17,124(sp)
81114bb4:	dd800404 	addi	r22,sp,16
81114bb8:	003e8606 	br	811145d4 <__reset+0xfb0f45d4>
81114bbc:	0029883a 	mov	r20,zero
81114bc0:	a5000c04 	addi	r20,r20,48
81114bc4:	dc001dc4 	addi	r16,sp,119
81114bc8:	dd001dc5 	stb	r20,119(sp)
81114bcc:	003f3806 	br	811148b0 <__reset+0xfb0f48b0>
81114bd0:	d9402c17 	ldw	r5,176(sp)
81114bd4:	d9801e04 	addi	r6,sp,120
81114bd8:	9809883a 	mov	r4,r19
81114bdc:	11200ac0 	call	811200ac <__ssprint_r>
81114be0:	103b691e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114be4:	d8c02017 	ldw	r3,128(sp)
81114be8:	da000404 	addi	r8,sp,16
81114bec:	003c9506 	br	81113e44 <__reset+0xfb0f3e44>
81114bf0:	d9003617 	ldw	r4,216(sp)
81114bf4:	d9403717 	ldw	r5,220(sp)
81114bf8:	da003e15 	stw	r8,248(sp)
81114bfc:	111dec00 	call	8111dec0 <__fpclassifyd>
81114c00:	da003e17 	ldw	r8,248(sp)
81114c04:	1000bd1e 	bne	r2,zero,81114efc <___svfprintf_internal_r+0x1910>
81114c08:	008011c4 	movi	r2,71
81114c0c:	14411e0e 	bge	r2,r17,81115088 <___svfprintf_internal_r+0x1a9c>
81114c10:	04204534 	movhi	r16,33044
81114c14:	84390e04 	addi	r16,r16,-7112
81114c18:	00c000c4 	movi	r3,3
81114c1c:	00bfdfc4 	movi	r2,-129
81114c20:	d8c02a15 	stw	r3,168(sp)
81114c24:	90a4703a 	and	r18,r18,r2
81114c28:	df002783 	ldbu	fp,158(sp)
81114c2c:	d8c02e15 	stw	r3,184(sp)
81114c30:	d8002915 	stw	zero,164(sp)
81114c34:	d8003215 	stw	zero,200(sp)
81114c38:	003c1c06 	br	81113cac <__reset+0xfb0f3cac>
81114c3c:	9080100c 	andi	r2,r18,64
81114c40:	d8002785 	stb	zero,158(sp)
81114c44:	10009426 	beq	r2,zero,81114e98 <___svfprintf_internal_r+0x18ac>
81114c48:	d8c02d17 	ldw	r3,180(sp)
81114c4c:	d9002917 	ldw	r4,164(sp)
81114c50:	002d883a 	mov	r22,zero
81114c54:	18800104 	addi	r2,r3,4
81114c58:	1d00000b 	ldhu	r20,0(r3)
81114c5c:	203ec10e 	bge	r4,zero,81114764 <__reset+0xfb0f4764>
81114c60:	a586b03a 	or	r3,r20,r22
81114c64:	d8802d15 	stw	r2,180(sp)
81114c68:	183ec21e 	bne	r3,zero,81114774 <__reset+0xfb0f4774>
81114c6c:	0039883a 	mov	fp,zero
81114c70:	0005883a 	mov	r2,zero
81114c74:	003db806 	br	81114358 <__reset+0xfb0f4358>
81114c78:	d8802d17 	ldw	r2,180(sp)
81114c7c:	d8c02d17 	ldw	r3,180(sp)
81114c80:	d9002d17 	ldw	r4,180(sp)
81114c84:	10800017 	ldw	r2,0(r2)
81114c88:	18c00117 	ldw	r3,4(r3)
81114c8c:	21000204 	addi	r4,r4,8
81114c90:	d8803615 	stw	r2,216(sp)
81114c94:	d8c03715 	stw	r3,220(sp)
81114c98:	d9002d15 	stw	r4,180(sp)
81114c9c:	003b8206 	br	81113aa8 <__reset+0xfb0f3aa8>
81114ca0:	9080100c 	andi	r2,r18,64
81114ca4:	10010726 	beq	r2,zero,811150c4 <___svfprintf_internal_r+0x1ad8>
81114ca8:	d8c02d17 	ldw	r3,180(sp)
81114cac:	1d00000f 	ldh	r20,0(r3)
81114cb0:	18c00104 	addi	r3,r3,4
81114cb4:	d8c02d15 	stw	r3,180(sp)
81114cb8:	a02dd7fa 	srai	r22,r20,31
81114cbc:	b005883a 	mov	r2,r22
81114cc0:	003ba206 	br	81113b4c <__reset+0xfb0f3b4c>
81114cc4:	9080100c 	andi	r2,r18,64
81114cc8:	10010526 	beq	r2,zero,811150e0 <___svfprintf_internal_r+0x1af4>
81114ccc:	d9002d17 	ldw	r4,180(sp)
81114cd0:	002d883a 	mov	r22,zero
81114cd4:	2500000b 	ldhu	r20,0(r4)
81114cd8:	21000104 	addi	r4,r4,4
81114cdc:	d9002d15 	stw	r4,180(sp)
81114ce0:	003cfe06 	br	811140dc <__reset+0xfb0f40dc>
81114ce4:	bc400007 	ldb	r17,0(r23)
81114ce8:	003a9606 	br	81113744 <__reset+0xfb0f3744>
81114cec:	9080040c 	andi	r2,r18,16
81114cf0:	10010126 	beq	r2,zero,811150f8 <___svfprintf_internal_r+0x1b0c>
81114cf4:	d9402d17 	ldw	r5,180(sp)
81114cf8:	d8c02f17 	ldw	r3,188(sp)
81114cfc:	28800017 	ldw	r2,0(r5)
81114d00:	29400104 	addi	r5,r5,4
81114d04:	d9402d15 	stw	r5,180(sp)
81114d08:	10c00015 	stw	r3,0(r2)
81114d0c:	003a6406 	br	811136a0 <__reset+0xfb0f36a0>
81114d10:	d9002917 	ldw	r4,164(sp)
81114d14:	d8002785 	stb	zero,158(sp)
81114d18:	203d8d16 	blt	r4,zero,81114350 <__reset+0xfb0f4350>
81114d1c:	00bfdfc4 	movi	r2,-129
81114d20:	90a4703a 	and	r18,r18,r2
81114d24:	003b0506 	br	8111393c <__reset+0xfb0f393c>
81114d28:	01604534 	movhi	r5,33044
81114d2c:	29791b84 	addi	r5,r5,-7058
81114d30:	d9402b15 	stw	r5,172(sp)
81114d34:	d9402b17 	ldw	r5,172(sp)
81114d38:	1c47883a 	add	r3,r3,r17
81114d3c:	10800044 	addi	r2,r2,1
81114d40:	41400015 	stw	r5,0(r8)
81114d44:	44400115 	stw	r17,4(r8)
81114d48:	d8c02015 	stw	r3,128(sp)
81114d4c:	d8801f15 	stw	r2,124(sp)
81114d50:	010001c4 	movi	r4,7
81114d54:	20bf3016 	blt	r4,r2,81114a18 <__reset+0xfb0f4a18>
81114d58:	42000204 	addi	r8,r8,8
81114d5c:	003f3506 	br	81114a34 <__reset+0xfb0f4a34>
81114d60:	01204534 	movhi	r4,33044
81114d64:	21391b84 	addi	r4,r4,-7058
81114d68:	d9002b15 	stw	r4,172(sp)
81114d6c:	003c5e06 	br	81113ee8 <__reset+0xfb0f3ee8>
81114d70:	d9402c17 	ldw	r5,176(sp)
81114d74:	d9801e04 	addi	r6,sp,120
81114d78:	9809883a 	mov	r4,r19
81114d7c:	11200ac0 	call	811200ac <__ssprint_r>
81114d80:	103b011e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114d84:	d8c02017 	ldw	r3,128(sp)
81114d88:	da000404 	addi	r8,sp,16
81114d8c:	003d9306 	br	811143dc <__reset+0xfb0f43dc>
81114d90:	d8801f17 	ldw	r2,124(sp)
81114d94:	01604534 	movhi	r5,33044
81114d98:	01000044 	movi	r4,1
81114d9c:	18c00044 	addi	r3,r3,1
81114da0:	10800044 	addi	r2,r2,1
81114da4:	29791b04 	addi	r5,r5,-7060
81114da8:	41000115 	stw	r4,4(r8)
81114dac:	41400015 	stw	r5,0(r8)
81114db0:	d8c02015 	stw	r3,128(sp)
81114db4:	d8801f15 	stw	r2,124(sp)
81114db8:	010001c4 	movi	r4,7
81114dbc:	2080b516 	blt	r4,r2,81115094 <___svfprintf_internal_r+0x1aa8>
81114dc0:	42000204 	addi	r8,r8,8
81114dc4:	8800041e 	bne	r17,zero,81114dd8 <___svfprintf_internal_r+0x17ec>
81114dc8:	d8803317 	ldw	r2,204(sp)
81114dcc:	1000021e 	bne	r2,zero,81114dd8 <___svfprintf_internal_r+0x17ec>
81114dd0:	9080004c 	andi	r2,r18,1
81114dd4:	103c5b26 	beq	r2,zero,81113f44 <__reset+0xfb0f3f44>
81114dd8:	d9003817 	ldw	r4,224(sp)
81114ddc:	d8801f17 	ldw	r2,124(sp)
81114de0:	d9403417 	ldw	r5,208(sp)
81114de4:	20c7883a 	add	r3,r4,r3
81114de8:	10800044 	addi	r2,r2,1
81114dec:	41000115 	stw	r4,4(r8)
81114df0:	41400015 	stw	r5,0(r8)
81114df4:	d8c02015 	stw	r3,128(sp)
81114df8:	d8801f15 	stw	r2,124(sp)
81114dfc:	010001c4 	movi	r4,7
81114e00:	20818016 	blt	r4,r2,81115404 <___svfprintf_internal_r+0x1e18>
81114e04:	42000204 	addi	r8,r8,8
81114e08:	0463c83a 	sub	r17,zero,r17
81114e0c:	0440cb0e 	bge	zero,r17,8111513c <___svfprintf_internal_r+0x1b50>
81114e10:	05800404 	movi	r22,16
81114e14:	b440e80e 	bge	r22,r17,811151b8 <___svfprintf_internal_r+0x1bcc>
81114e18:	01604534 	movhi	r5,33044
81114e1c:	29791b84 	addi	r5,r5,-7058
81114e20:	d9402b15 	stw	r5,172(sp)
81114e24:	070001c4 	movi	fp,7
81114e28:	dd002c17 	ldw	r20,176(sp)
81114e2c:	00000306 	br	81114e3c <___svfprintf_internal_r+0x1850>
81114e30:	42000204 	addi	r8,r8,8
81114e34:	8c7ffc04 	addi	r17,r17,-16
81114e38:	b440e20e 	bge	r22,r17,811151c4 <___svfprintf_internal_r+0x1bd8>
81114e3c:	18c00404 	addi	r3,r3,16
81114e40:	10800044 	addi	r2,r2,1
81114e44:	45400015 	stw	r21,0(r8)
81114e48:	45800115 	stw	r22,4(r8)
81114e4c:	d8c02015 	stw	r3,128(sp)
81114e50:	d8801f15 	stw	r2,124(sp)
81114e54:	e0bff60e 	bge	fp,r2,81114e30 <__reset+0xfb0f4e30>
81114e58:	d9801e04 	addi	r6,sp,120
81114e5c:	a00b883a 	mov	r5,r20
81114e60:	9809883a 	mov	r4,r19
81114e64:	11200ac0 	call	811200ac <__ssprint_r>
81114e68:	103ac71e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114e6c:	d8c02017 	ldw	r3,128(sp)
81114e70:	d8801f17 	ldw	r2,124(sp)
81114e74:	da000404 	addi	r8,sp,16
81114e78:	003fee06 	br	81114e34 <__reset+0xfb0f4e34>
81114e7c:	d8c02d17 	ldw	r3,180(sp)
81114e80:	d9002917 	ldw	r4,164(sp)
81114e84:	002d883a 	mov	r22,zero
81114e88:	18800104 	addi	r2,r3,4
81114e8c:	1d000017 	ldw	r20,0(r3)
81114e90:	203e7d0e 	bge	r4,zero,81114888 <__reset+0xfb0f4888>
81114e94:	003eda06 	br	81114a00 <__reset+0xfb0f4a00>
81114e98:	d9402d17 	ldw	r5,180(sp)
81114e9c:	d8c02917 	ldw	r3,164(sp)
81114ea0:	002d883a 	mov	r22,zero
81114ea4:	28800104 	addi	r2,r5,4
81114ea8:	2d000017 	ldw	r20,0(r5)
81114eac:	183e2d0e 	bge	r3,zero,81114764 <__reset+0xfb0f4764>
81114eb0:	003f6b06 	br	81114c60 <__reset+0xfb0f4c60>
81114eb4:	d8c02d15 	stw	r3,180(sp)
81114eb8:	0039883a 	mov	fp,zero
81114ebc:	003ed206 	br	81114a08 <__reset+0xfb0f4a08>
81114ec0:	bc400043 	ldbu	r17,1(r23)
81114ec4:	94800814 	ori	r18,r18,32
81114ec8:	bdc00044 	addi	r23,r23,1
81114ecc:	8c403fcc 	andi	r17,r17,255
81114ed0:	8c40201c 	xori	r17,r17,128
81114ed4:	8c7fe004 	addi	r17,r17,-128
81114ed8:	003a1a06 	br	81113744 <__reset+0xfb0f3744>
81114edc:	d9402c17 	ldw	r5,176(sp)
81114ee0:	d9801e04 	addi	r6,sp,120
81114ee4:	9809883a 	mov	r4,r19
81114ee8:	11200ac0 	call	811200ac <__ssprint_r>
81114eec:	103aa61e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81114ef0:	d8c02017 	ldw	r3,128(sp)
81114ef4:	da000404 	addi	r8,sp,16
81114ef8:	003d4a06 	br	81114424 <__reset+0xfb0f4424>
81114efc:	d9002917 	ldw	r4,164(sp)
81114f00:	05bff7c4 	movi	r22,-33
81114f04:	00bfffc4 	movi	r2,-1
81114f08:	8dac703a 	and	r22,r17,r22
81114f0c:	20806a26 	beq	r4,r2,811150b8 <___svfprintf_internal_r+0x1acc>
81114f10:	008011c4 	movi	r2,71
81114f14:	b0813726 	beq	r22,r2,811153f4 <___svfprintf_internal_r+0x1e08>
81114f18:	d9003717 	ldw	r4,220(sp)
81114f1c:	90c04014 	ori	r3,r18,256
81114f20:	d8c02b15 	stw	r3,172(sp)
81114f24:	20015d16 	blt	r4,zero,8111549c <___svfprintf_internal_r+0x1eb0>
81114f28:	dd003717 	ldw	r20,220(sp)
81114f2c:	d8002a05 	stb	zero,168(sp)
81114f30:	00801984 	movi	r2,102
81114f34:	88814026 	beq	r17,r2,81115438 <___svfprintf_internal_r+0x1e4c>
81114f38:	00801184 	movi	r2,70
81114f3c:	88817126 	beq	r17,r2,81115504 <___svfprintf_internal_r+0x1f18>
81114f40:	00801144 	movi	r2,69
81114f44:	b0816226 	beq	r22,r2,811154d0 <___svfprintf_internal_r+0x1ee4>
81114f48:	d8c02917 	ldw	r3,164(sp)
81114f4c:	d8802104 	addi	r2,sp,132
81114f50:	d8800315 	stw	r2,12(sp)
81114f54:	d9403617 	ldw	r5,216(sp)
81114f58:	d8802504 	addi	r2,sp,148
81114f5c:	d8800215 	stw	r2,8(sp)
81114f60:	d8802604 	addi	r2,sp,152
81114f64:	d8c00015 	stw	r3,0(sp)
81114f68:	d8800115 	stw	r2,4(sp)
81114f6c:	01c00084 	movi	r7,2
81114f70:	a00d883a 	mov	r6,r20
81114f74:	9809883a 	mov	r4,r19
81114f78:	d8c03d15 	stw	r3,244(sp)
81114f7c:	da003e15 	stw	r8,248(sp)
81114f80:	11197780 	call	81119778 <_dtoa_r>
81114f84:	1021883a 	mov	r16,r2
81114f88:	008019c4 	movi	r2,103
81114f8c:	d8c03d17 	ldw	r3,244(sp)
81114f90:	da003e17 	ldw	r8,248(sp)
81114f94:	8880e726 	beq	r17,r2,81115334 <___svfprintf_internal_r+0x1d48>
81114f98:	008011c4 	movi	r2,71
81114f9c:	8880d426 	beq	r17,r2,811152f0 <___svfprintf_internal_r+0x1d04>
81114fa0:	80f9883a 	add	fp,r16,r3
81114fa4:	d9003617 	ldw	r4,216(sp)
81114fa8:	000d883a 	mov	r6,zero
81114fac:	000f883a 	mov	r7,zero
81114fb0:	a00b883a 	mov	r5,r20
81114fb4:	da003e15 	stw	r8,248(sp)
81114fb8:	11262040 	call	81126204 <__eqdf2>
81114fbc:	da003e17 	ldw	r8,248(sp)
81114fc0:	1000e426 	beq	r2,zero,81115354 <___svfprintf_internal_r+0x1d68>
81114fc4:	d8802117 	ldw	r2,132(sp)
81114fc8:	1700062e 	bgeu	r2,fp,81114fe4 <___svfprintf_internal_r+0x19f8>
81114fcc:	01000c04 	movi	r4,48
81114fd0:	10c00044 	addi	r3,r2,1
81114fd4:	d8c02115 	stw	r3,132(sp)
81114fd8:	11000005 	stb	r4,0(r2)
81114fdc:	d8802117 	ldw	r2,132(sp)
81114fe0:	173ffb36 	bltu	r2,fp,81114fd0 <__reset+0xfb0f4fd0>
81114fe4:	1405c83a 	sub	r2,r2,r16
81114fe8:	d8803315 	stw	r2,204(sp)
81114fec:	008011c4 	movi	r2,71
81114ff0:	b080c526 	beq	r22,r2,81115308 <___svfprintf_internal_r+0x1d1c>
81114ff4:	00801944 	movi	r2,101
81114ff8:	1441d90e 	bge	r2,r17,81115760 <___svfprintf_internal_r+0x2174>
81114ffc:	d8c02617 	ldw	r3,152(sp)
81115000:	00801984 	movi	r2,102
81115004:	d8c03215 	stw	r3,200(sp)
81115008:	88813426 	beq	r17,r2,811154dc <___svfprintf_internal_r+0x1ef0>
8111500c:	d8c03217 	ldw	r3,200(sp)
81115010:	d9003317 	ldw	r4,204(sp)
81115014:	19012516 	blt	r3,r4,811154ac <___svfprintf_internal_r+0x1ec0>
81115018:	9480004c 	andi	r18,r18,1
8111501c:	9001841e 	bne	r18,zero,81115630 <___svfprintf_internal_r+0x2044>
81115020:	1805883a 	mov	r2,r3
81115024:	1801cc16 	blt	r3,zero,81115758 <___svfprintf_internal_r+0x216c>
81115028:	d8c03217 	ldw	r3,200(sp)
8111502c:	044019c4 	movi	r17,103
81115030:	d8c02e15 	stw	r3,184(sp)
81115034:	df002a07 	ldb	fp,168(sp)
81115038:	e000a61e 	bne	fp,zero,811152d4 <___svfprintf_internal_r+0x1ce8>
8111503c:	df002783 	ldbu	fp,158(sp)
81115040:	d8802a15 	stw	r2,168(sp)
81115044:	dc802b17 	ldw	r18,172(sp)
81115048:	d8002915 	stw	zero,164(sp)
8111504c:	003b1706 	br	81113cac <__reset+0xfb0f3cac>
81115050:	04204534 	movhi	r16,33044
81115054:	84390b04 	addi	r16,r16,-7124
81115058:	003aa606 	br	81113af4 <__reset+0xfb0f3af4>
8111505c:	d9003917 	ldw	r4,228(sp)
81115060:	04001004 	movi	r16,64
81115064:	800b883a 	mov	r5,r16
81115068:	11121680 	call	81112168 <_malloc_r>
8111506c:	d9002c17 	ldw	r4,176(sp)
81115070:	20800015 	stw	r2,0(r4)
81115074:	20800415 	stw	r2,16(r4)
81115078:	1001cb26 	beq	r2,zero,811157a8 <___svfprintf_internal_r+0x21bc>
8111507c:	d8802c17 	ldw	r2,176(sp)
81115080:	14000515 	stw	r16,20(r2)
81115084:	00397606 	br	81113660 <__reset+0xfb0f3660>
81115088:	04204534 	movhi	r16,33044
8111508c:	84390d04 	addi	r16,r16,-7116
81115090:	003ee106 	br	81114c18 <__reset+0xfb0f4c18>
81115094:	d9402c17 	ldw	r5,176(sp)
81115098:	d9801e04 	addi	r6,sp,120
8111509c:	9809883a 	mov	r4,r19
811150a0:	11200ac0 	call	811200ac <__ssprint_r>
811150a4:	103a381e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
811150a8:	dc402617 	ldw	r17,152(sp)
811150ac:	d8c02017 	ldw	r3,128(sp)
811150b0:	da000404 	addi	r8,sp,16
811150b4:	003f4306 	br	81114dc4 <__reset+0xfb0f4dc4>
811150b8:	01400184 	movi	r5,6
811150bc:	d9402915 	stw	r5,164(sp)
811150c0:	003f9506 	br	81114f18 <__reset+0xfb0f4f18>
811150c4:	d9002d17 	ldw	r4,180(sp)
811150c8:	25000017 	ldw	r20,0(r4)
811150cc:	21000104 	addi	r4,r4,4
811150d0:	d9002d15 	stw	r4,180(sp)
811150d4:	a02dd7fa 	srai	r22,r20,31
811150d8:	b005883a 	mov	r2,r22
811150dc:	003a9b06 	br	81113b4c <__reset+0xfb0f3b4c>
811150e0:	d9402d17 	ldw	r5,180(sp)
811150e4:	002d883a 	mov	r22,zero
811150e8:	2d000017 	ldw	r20,0(r5)
811150ec:	29400104 	addi	r5,r5,4
811150f0:	d9402d15 	stw	r5,180(sp)
811150f4:	003bf906 	br	811140dc <__reset+0xfb0f40dc>
811150f8:	9480100c 	andi	r18,r18,64
811150fc:	90006e26 	beq	r18,zero,811152b8 <___svfprintf_internal_r+0x1ccc>
81115100:	d9002d17 	ldw	r4,180(sp)
81115104:	d9402f17 	ldw	r5,188(sp)
81115108:	20800017 	ldw	r2,0(r4)
8111510c:	21000104 	addi	r4,r4,4
81115110:	d9002d15 	stw	r4,180(sp)
81115114:	1140000d 	sth	r5,0(r2)
81115118:	00396106 	br	811136a0 <__reset+0xfb0f36a0>
8111511c:	d9402c17 	ldw	r5,176(sp)
81115120:	d9801e04 	addi	r6,sp,120
81115124:	9809883a 	mov	r4,r19
81115128:	11200ac0 	call	811200ac <__ssprint_r>
8111512c:	103a161e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81115130:	d8c02017 	ldw	r3,128(sp)
81115134:	d8801f17 	ldw	r2,124(sp)
81115138:	da000404 	addi	r8,sp,16
8111513c:	d9403317 	ldw	r5,204(sp)
81115140:	10800044 	addi	r2,r2,1
81115144:	44000015 	stw	r16,0(r8)
81115148:	28c7883a 	add	r3,r5,r3
8111514c:	003b7706 	br	81113f2c <__reset+0xfb0f3f2c>
81115150:	8009883a 	mov	r4,r16
81115154:	da003e15 	stw	r8,248(sp)
81115158:	11132f80 	call	811132f8 <strlen>
8111515c:	d8802e15 	stw	r2,184(sp)
81115160:	da003e17 	ldw	r8,248(sp)
81115164:	103c280e 	bge	r2,zero,81114208 <__reset+0xfb0f4208>
81115168:	0005883a 	mov	r2,zero
8111516c:	003c2606 	br	81114208 <__reset+0xfb0f4208>
81115170:	00bfffc4 	movi	r2,-1
81115174:	003a0906 	br	8111399c <__reset+0xfb0f399c>
81115178:	01204534 	movhi	r4,33044
8111517c:	21391f84 	addi	r4,r4,-7042
81115180:	d9003515 	stw	r4,212(sp)
81115184:	003b0606 	br	81113da0 <__reset+0xfb0f3da0>
81115188:	013fffc4 	movi	r4,-1
8111518c:	003a2706 	br	81113a2c <__reset+0xfb0f3a2c>
81115190:	d9402c17 	ldw	r5,176(sp)
81115194:	d9801e04 	addi	r6,sp,120
81115198:	9809883a 	mov	r4,r19
8111519c:	11200ac0 	call	811200ac <__ssprint_r>
811151a0:	1039f91e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
811151a4:	d8c02017 	ldw	r3,128(sp)
811151a8:	da000404 	addi	r8,sp,16
811151ac:	003d8406 	br	811147c0 <__reset+0xfb0f47c0>
811151b0:	0023883a 	mov	r17,zero
811151b4:	003d8306 	br	811147c4 <__reset+0xfb0f47c4>
811151b8:	01204534 	movhi	r4,33044
811151bc:	21391b84 	addi	r4,r4,-7058
811151c0:	d9002b15 	stw	r4,172(sp)
811151c4:	d9002b17 	ldw	r4,172(sp)
811151c8:	1c47883a 	add	r3,r3,r17
811151cc:	10800044 	addi	r2,r2,1
811151d0:	41000015 	stw	r4,0(r8)
811151d4:	44400115 	stw	r17,4(r8)
811151d8:	d8c02015 	stw	r3,128(sp)
811151dc:	d8801f15 	stw	r2,124(sp)
811151e0:	010001c4 	movi	r4,7
811151e4:	20bfcd16 	blt	r4,r2,8111511c <__reset+0xfb0f511c>
811151e8:	42000204 	addi	r8,r8,8
811151ec:	003fd306 	br	8111513c <__reset+0xfb0f513c>
811151f0:	d9402c17 	ldw	r5,176(sp)
811151f4:	d9801e04 	addi	r6,sp,120
811151f8:	9809883a 	mov	r4,r19
811151fc:	11200ac0 	call	811200ac <__ssprint_r>
81115200:	1039e11e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81115204:	d8802617 	ldw	r2,152(sp)
81115208:	d8c02017 	ldw	r3,128(sp)
8111520c:	da000404 	addi	r8,sp,16
81115210:	003e1c06 	br	81114a84 <__reset+0xfb0f4a84>
81115214:	d8802917 	ldw	r2,164(sp)
81115218:	00c00184 	movi	r3,6
8111521c:	1880012e 	bgeu	r3,r2,81115224 <___svfprintf_internal_r+0x1c38>
81115220:	1805883a 	mov	r2,r3
81115224:	d8802e15 	stw	r2,184(sp)
81115228:	1000f316 	blt	r2,zero,811155f8 <___svfprintf_internal_r+0x200c>
8111522c:	04204534 	movhi	r16,33044
81115230:	d8802a15 	stw	r2,168(sp)
81115234:	dd002d15 	stw	r20,180(sp)
81115238:	d8002915 	stw	zero,164(sp)
8111523c:	d8003215 	stw	zero,200(sp)
81115240:	84391904 	addi	r16,r16,-7068
81115244:	0039883a 	mov	fp,zero
81115248:	003a9f06 	br	81113cc8 <__reset+0xfb0f3cc8>
8111524c:	01204534 	movhi	r4,33044
81115250:	21391f84 	addi	r4,r4,-7042
81115254:	d9003515 	stw	r4,212(sp)
81115258:	003b5f06 	br	81113fd8 <__reset+0xfb0f3fd8>
8111525c:	d9402c17 	ldw	r5,176(sp)
81115260:	d9801e04 	addi	r6,sp,120
81115264:	9809883a 	mov	r4,r19
81115268:	11200ac0 	call	811200ac <__ssprint_r>
8111526c:	1039c61e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81115270:	d8802617 	ldw	r2,152(sp)
81115274:	d9403317 	ldw	r5,204(sp)
81115278:	d8c02017 	ldw	r3,128(sp)
8111527c:	da000404 	addi	r8,sp,16
81115280:	2885c83a 	sub	r2,r5,r2
81115284:	003e1006 	br	81114ac8 <__reset+0xfb0f4ac8>
81115288:	00800044 	movi	r2,1
8111528c:	10803fcc 	andi	r2,r2,255
81115290:	00c00044 	movi	r3,1
81115294:	10fa3526 	beq	r2,r3,81113b6c <__reset+0xfb0f3b6c>
81115298:	00c00084 	movi	r3,2
8111529c:	10fb9e26 	beq	r2,r3,81114118 <__reset+0xfb0f4118>
811152a0:	003a6406 	br	81113c34 <__reset+0xfb0f3c34>
811152a4:	0021883a 	mov	r16,zero
811152a8:	003e0806 	br	81114acc <__reset+0xfb0f4acc>
811152ac:	07000b44 	movi	fp,45
811152b0:	df002785 	stb	fp,158(sp)
811152b4:	003a0b06 	br	81113ae4 <__reset+0xfb0f3ae4>
811152b8:	d8c02d17 	ldw	r3,180(sp)
811152bc:	d9002f17 	ldw	r4,188(sp)
811152c0:	18800017 	ldw	r2,0(r3)
811152c4:	18c00104 	addi	r3,r3,4
811152c8:	d8c02d15 	stw	r3,180(sp)
811152cc:	11000015 	stw	r4,0(r2)
811152d0:	0038f306 	br	811136a0 <__reset+0xfb0f36a0>
811152d4:	00c00b44 	movi	r3,45
811152d8:	d8c02785 	stb	r3,158(sp)
811152dc:	d8802a15 	stw	r2,168(sp)
811152e0:	dc802b17 	ldw	r18,172(sp)
811152e4:	d8002915 	stw	zero,164(sp)
811152e8:	07000b44 	movi	fp,45
811152ec:	003a7306 	br	81113cbc <__reset+0xfb0f3cbc>
811152f0:	9080004c 	andi	r2,r18,1
811152f4:	1000941e 	bne	r2,zero,81115548 <___svfprintf_internal_r+0x1f5c>
811152f8:	d8802117 	ldw	r2,132(sp)
811152fc:	1405c83a 	sub	r2,r2,r16
81115300:	d8803315 	stw	r2,204(sp)
81115304:	b441161e 	bne	r22,r17,81115760 <___svfprintf_internal_r+0x2174>
81115308:	dd802617 	ldw	r22,152(sp)
8111530c:	00bfff44 	movi	r2,-3
81115310:	b0801a16 	blt	r22,r2,8111537c <___svfprintf_internal_r+0x1d90>
81115314:	d9402917 	ldw	r5,164(sp)
81115318:	2d801816 	blt	r5,r22,8111537c <___svfprintf_internal_r+0x1d90>
8111531c:	dd803215 	stw	r22,200(sp)
81115320:	003f3a06 	br	8111500c <__reset+0xfb0f500c>
81115324:	1025883a 	mov	r18,r2
81115328:	0039883a 	mov	fp,zero
8111532c:	00800084 	movi	r2,2
81115330:	003fd606 	br	8111528c <__reset+0xfb0f528c>
81115334:	9080004c 	andi	r2,r18,1
81115338:	103f191e 	bne	r2,zero,81114fa0 <__reset+0xfb0f4fa0>
8111533c:	d8802117 	ldw	r2,132(sp)
81115340:	003f2806 	br	81114fe4 <__reset+0xfb0f4fe4>
81115344:	01204534 	movhi	r4,33044
81115348:	21391b84 	addi	r4,r4,-7058
8111534c:	d9002b15 	stw	r4,172(sp)
81115350:	003c7c06 	br	81114544 <__reset+0xfb0f4544>
81115354:	e005883a 	mov	r2,fp
81115358:	003f2206 	br	81114fe4 <__reset+0xfb0f4fe4>
8111535c:	d9402917 	ldw	r5,164(sp)
81115360:	df002783 	ldbu	fp,158(sp)
81115364:	dd002d15 	stw	r20,180(sp)
81115368:	d9402a15 	stw	r5,168(sp)
8111536c:	d9402e15 	stw	r5,184(sp)
81115370:	d8002915 	stw	zero,164(sp)
81115374:	d8003215 	stw	zero,200(sp)
81115378:	003a4c06 	br	81113cac <__reset+0xfb0f3cac>
8111537c:	8c7fff84 	addi	r17,r17,-2
81115380:	b5bfffc4 	addi	r22,r22,-1
81115384:	dd802615 	stw	r22,152(sp)
81115388:	dc4022c5 	stb	r17,139(sp)
8111538c:	b000c316 	blt	r22,zero,8111569c <___svfprintf_internal_r+0x20b0>
81115390:	00800ac4 	movi	r2,43
81115394:	d8802305 	stb	r2,140(sp)
81115398:	00800244 	movi	r2,9
8111539c:	15806e16 	blt	r2,r22,81115558 <___svfprintf_internal_r+0x1f6c>
811153a0:	00800c04 	movi	r2,48
811153a4:	b5800c04 	addi	r22,r22,48
811153a8:	d8802345 	stb	r2,141(sp)
811153ac:	dd802385 	stb	r22,142(sp)
811153b0:	d88023c4 	addi	r2,sp,143
811153b4:	df0022c4 	addi	fp,sp,139
811153b8:	d8c03317 	ldw	r3,204(sp)
811153bc:	1739c83a 	sub	fp,r2,fp
811153c0:	d9003317 	ldw	r4,204(sp)
811153c4:	e0c7883a 	add	r3,fp,r3
811153c8:	df003b15 	stw	fp,236(sp)
811153cc:	d8c02e15 	stw	r3,184(sp)
811153d0:	00800044 	movi	r2,1
811153d4:	1100b70e 	bge	r2,r4,811156b4 <___svfprintf_internal_r+0x20c8>
811153d8:	d8c02e17 	ldw	r3,184(sp)
811153dc:	18c00044 	addi	r3,r3,1
811153e0:	d8c02e15 	stw	r3,184(sp)
811153e4:	1805883a 	mov	r2,r3
811153e8:	1800b016 	blt	r3,zero,811156ac <___svfprintf_internal_r+0x20c0>
811153ec:	d8003215 	stw	zero,200(sp)
811153f0:	003f1006 	br	81115034 <__reset+0xfb0f5034>
811153f4:	d8802917 	ldw	r2,164(sp)
811153f8:	103ec71e 	bne	r2,zero,81114f18 <__reset+0xfb0f4f18>
811153fc:	dc002915 	stw	r16,164(sp)
81115400:	003ec506 	br	81114f18 <__reset+0xfb0f4f18>
81115404:	d9402c17 	ldw	r5,176(sp)
81115408:	d9801e04 	addi	r6,sp,120
8111540c:	9809883a 	mov	r4,r19
81115410:	11200ac0 	call	811200ac <__ssprint_r>
81115414:	10395c1e 	bne	r2,zero,81113988 <__reset+0xfb0f3988>
81115418:	dc402617 	ldw	r17,152(sp)
8111541c:	d8c02017 	ldw	r3,128(sp)
81115420:	d8801f17 	ldw	r2,124(sp)
81115424:	da000404 	addi	r8,sp,16
81115428:	003e7706 	br	81114e08 <__reset+0xfb0f4e08>
8111542c:	582f883a 	mov	r23,r11
81115430:	d8002915 	stw	zero,164(sp)
81115434:	0038c406 	br	81113748 <__reset+0xfb0f3748>
81115438:	d8c02917 	ldw	r3,164(sp)
8111543c:	d8802104 	addi	r2,sp,132
81115440:	d8800315 	stw	r2,12(sp)
81115444:	d9403617 	ldw	r5,216(sp)
81115448:	d8802504 	addi	r2,sp,148
8111544c:	d8800215 	stw	r2,8(sp)
81115450:	d8802604 	addi	r2,sp,152
81115454:	d8c00015 	stw	r3,0(sp)
81115458:	9809883a 	mov	r4,r19
8111545c:	d8800115 	stw	r2,4(sp)
81115460:	01c000c4 	movi	r7,3
81115464:	a00d883a 	mov	r6,r20
81115468:	da003e15 	stw	r8,248(sp)
8111546c:	11197780 	call	81119778 <_dtoa_r>
81115470:	d9002917 	ldw	r4,164(sp)
81115474:	da003e17 	ldw	r8,248(sp)
81115478:	1021883a 	mov	r16,r2
8111547c:	1139883a 	add	fp,r2,r4
81115480:	2007883a 	mov	r3,r4
81115484:	81000007 	ldb	r4,0(r16)
81115488:	00800c04 	movi	r2,48
8111548c:	20806f26 	beq	r4,r2,8111564c <___svfprintf_internal_r+0x2060>
81115490:	d8c02617 	ldw	r3,152(sp)
81115494:	e0f9883a 	add	fp,fp,r3
81115498:	003ec206 	br	81114fa4 <__reset+0xfb0f4fa4>
8111549c:	00c00b44 	movi	r3,45
811154a0:	2520003c 	xorhi	r20,r4,32768
811154a4:	d8c02a05 	stb	r3,168(sp)
811154a8:	003ea106 	br	81114f30 <__reset+0xfb0f4f30>
811154ac:	d8c03217 	ldw	r3,200(sp)
811154b0:	00c0890e 	bge	zero,r3,811156d8 <___svfprintf_internal_r+0x20ec>
811154b4:	00800044 	movi	r2,1
811154b8:	d9003317 	ldw	r4,204(sp)
811154bc:	1105883a 	add	r2,r2,r4
811154c0:	d8802e15 	stw	r2,184(sp)
811154c4:	10005f16 	blt	r2,zero,81115644 <___svfprintf_internal_r+0x2058>
811154c8:	044019c4 	movi	r17,103
811154cc:	003ed906 	br	81115034 <__reset+0xfb0f5034>
811154d0:	d9002917 	ldw	r4,164(sp)
811154d4:	20c00044 	addi	r3,r4,1
811154d8:	003e9c06 	br	81114f4c <__reset+0xfb0f4f4c>
811154dc:	d9002917 	ldw	r4,164(sp)
811154e0:	00c0680e 	bge	zero,r3,81115684 <___svfprintf_internal_r+0x2098>
811154e4:	2000461e 	bne	r4,zero,81115600 <___svfprintf_internal_r+0x2014>
811154e8:	9480004c 	andi	r18,r18,1
811154ec:	9000441e 	bne	r18,zero,81115600 <___svfprintf_internal_r+0x2014>
811154f0:	1805883a 	mov	r2,r3
811154f4:	1800a016 	blt	r3,zero,81115778 <___svfprintf_internal_r+0x218c>
811154f8:	d8c03217 	ldw	r3,200(sp)
811154fc:	d8c02e15 	stw	r3,184(sp)
81115500:	003ecc06 	br	81115034 <__reset+0xfb0f5034>
81115504:	d9402917 	ldw	r5,164(sp)
81115508:	d8802104 	addi	r2,sp,132
8111550c:	d8800315 	stw	r2,12(sp)
81115510:	d9400015 	stw	r5,0(sp)
81115514:	d8802504 	addi	r2,sp,148
81115518:	d9403617 	ldw	r5,216(sp)
8111551c:	d8800215 	stw	r2,8(sp)
81115520:	d8802604 	addi	r2,sp,152
81115524:	d8800115 	stw	r2,4(sp)
81115528:	01c000c4 	movi	r7,3
8111552c:	a00d883a 	mov	r6,r20
81115530:	9809883a 	mov	r4,r19
81115534:	da003e15 	stw	r8,248(sp)
81115538:	11197780 	call	81119778 <_dtoa_r>
8111553c:	d8c02917 	ldw	r3,164(sp)
81115540:	da003e17 	ldw	r8,248(sp)
81115544:	1021883a 	mov	r16,r2
81115548:	00801184 	movi	r2,70
8111554c:	80f9883a 	add	fp,r16,r3
81115550:	88bfcc26 	beq	r17,r2,81115484 <__reset+0xfb0f5484>
81115554:	003e9306 	br	81114fa4 <__reset+0xfb0f4fa4>
81115558:	df0022c4 	addi	fp,sp,139
8111555c:	dc002915 	stw	r16,164(sp)
81115560:	9829883a 	mov	r20,r19
81115564:	e021883a 	mov	r16,fp
81115568:	4027883a 	mov	r19,r8
8111556c:	b009883a 	mov	r4,r22
81115570:	01400284 	movi	r5,10
81115574:	1124d340 	call	81124d34 <__modsi3>
81115578:	10800c04 	addi	r2,r2,48
8111557c:	843fffc4 	addi	r16,r16,-1
81115580:	b009883a 	mov	r4,r22
81115584:	01400284 	movi	r5,10
81115588:	80800005 	stb	r2,0(r16)
8111558c:	1124cb00 	call	81124cb0 <__divsi3>
81115590:	102d883a 	mov	r22,r2
81115594:	00800244 	movi	r2,9
81115598:	15bff416 	blt	r2,r22,8111556c <__reset+0xfb0f556c>
8111559c:	9811883a 	mov	r8,r19
811155a0:	b0800c04 	addi	r2,r22,48
811155a4:	a027883a 	mov	r19,r20
811155a8:	8029883a 	mov	r20,r16
811155ac:	a17fffc4 	addi	r5,r20,-1
811155b0:	a0bfffc5 	stb	r2,-1(r20)
811155b4:	dc002917 	ldw	r16,164(sp)
811155b8:	2f00752e 	bgeu	r5,fp,81115790 <___svfprintf_internal_r+0x21a4>
811155bc:	d9c02384 	addi	r7,sp,142
811155c0:	3d0fc83a 	sub	r7,r7,r20
811155c4:	d9002344 	addi	r4,sp,141
811155c8:	e1cf883a 	add	r7,fp,r7
811155cc:	00000106 	br	811155d4 <___svfprintf_internal_r+0x1fe8>
811155d0:	28800003 	ldbu	r2,0(r5)
811155d4:	20800005 	stb	r2,0(r4)
811155d8:	21000044 	addi	r4,r4,1
811155dc:	29400044 	addi	r5,r5,1
811155e0:	21fffb1e 	bne	r4,r7,811155d0 <__reset+0xfb0f55d0>
811155e4:	d8802304 	addi	r2,sp,140
811155e8:	1505c83a 	sub	r2,r2,r20
811155ec:	d8c02344 	addi	r3,sp,141
811155f0:	1885883a 	add	r2,r3,r2
811155f4:	003f7006 	br	811153b8 <__reset+0xfb0f53b8>
811155f8:	0005883a 	mov	r2,zero
811155fc:	003f0b06 	br	8111522c <__reset+0xfb0f522c>
81115600:	d9002917 	ldw	r4,164(sp)
81115604:	d8c03217 	ldw	r3,200(sp)
81115608:	20800044 	addi	r2,r4,1
8111560c:	1885883a 	add	r2,r3,r2
81115610:	d8802e15 	stw	r2,184(sp)
81115614:	103e870e 	bge	r2,zero,81115034 <__reset+0xfb0f5034>
81115618:	0005883a 	mov	r2,zero
8111561c:	003e8506 	br	81115034 <__reset+0xfb0f5034>
81115620:	01204534 	movhi	r4,33044
81115624:	21391b84 	addi	r4,r4,-7058
81115628:	d9002b15 	stw	r4,172(sp)
8111562c:	003cc506 	br	81114944 <__reset+0xfb0f4944>
81115630:	d8c03217 	ldw	r3,200(sp)
81115634:	18c00044 	addi	r3,r3,1
81115638:	d8c02e15 	stw	r3,184(sp)
8111563c:	1805883a 	mov	r2,r3
81115640:	183fa10e 	bge	r3,zero,811154c8 <__reset+0xfb0f54c8>
81115644:	0005883a 	mov	r2,zero
81115648:	003f9f06 	br	811154c8 <__reset+0xfb0f54c8>
8111564c:	d9003617 	ldw	r4,216(sp)
81115650:	000d883a 	mov	r6,zero
81115654:	000f883a 	mov	r7,zero
81115658:	a00b883a 	mov	r5,r20
8111565c:	d8c03d15 	stw	r3,244(sp)
81115660:	da003e15 	stw	r8,248(sp)
81115664:	11262040 	call	81126204 <__eqdf2>
81115668:	d8c03d17 	ldw	r3,244(sp)
8111566c:	da003e17 	ldw	r8,248(sp)
81115670:	103f8726 	beq	r2,zero,81115490 <__reset+0xfb0f5490>
81115674:	00800044 	movi	r2,1
81115678:	10c7c83a 	sub	r3,r2,r3
8111567c:	d8c02615 	stw	r3,152(sp)
81115680:	003f8406 	br	81115494 <__reset+0xfb0f5494>
81115684:	20000e1e 	bne	r4,zero,811156c0 <___svfprintf_internal_r+0x20d4>
81115688:	9480004c 	andi	r18,r18,1
8111568c:	90000c1e 	bne	r18,zero,811156c0 <___svfprintf_internal_r+0x20d4>
81115690:	00800044 	movi	r2,1
81115694:	d8802e15 	stw	r2,184(sp)
81115698:	003e6606 	br	81115034 <__reset+0xfb0f5034>
8111569c:	00800b44 	movi	r2,45
811156a0:	05adc83a 	sub	r22,zero,r22
811156a4:	d8802305 	stb	r2,140(sp)
811156a8:	003f3b06 	br	81115398 <__reset+0xfb0f5398>
811156ac:	0005883a 	mov	r2,zero
811156b0:	003f4e06 	br	811153ec <__reset+0xfb0f53ec>
811156b4:	90a4703a 	and	r18,r18,r2
811156b8:	903f4a26 	beq	r18,zero,811153e4 <__reset+0xfb0f53e4>
811156bc:	003f4606 	br	811153d8 <__reset+0xfb0f53d8>
811156c0:	d8c02917 	ldw	r3,164(sp)
811156c4:	18c00084 	addi	r3,r3,2
811156c8:	d8c02e15 	stw	r3,184(sp)
811156cc:	1805883a 	mov	r2,r3
811156d0:	183e580e 	bge	r3,zero,81115034 <__reset+0xfb0f5034>
811156d4:	003fd006 	br	81115618 <__reset+0xfb0f5618>
811156d8:	00800084 	movi	r2,2
811156dc:	10c5c83a 	sub	r2,r2,r3
811156e0:	003f7506 	br	811154b8 <__reset+0xfb0f54b8>
811156e4:	d8802d17 	ldw	r2,180(sp)
811156e8:	d9002d17 	ldw	r4,180(sp)
811156ec:	bc400043 	ldbu	r17,1(r23)
811156f0:	10800017 	ldw	r2,0(r2)
811156f4:	582f883a 	mov	r23,r11
811156f8:	d8802915 	stw	r2,164(sp)
811156fc:	20800104 	addi	r2,r4,4
81115700:	d9002917 	ldw	r4,164(sp)
81115704:	d8802d15 	stw	r2,180(sp)
81115708:	203df00e 	bge	r4,zero,81114ecc <__reset+0xfb0f4ecc>
8111570c:	8c403fcc 	andi	r17,r17,255
81115710:	00bfffc4 	movi	r2,-1
81115714:	8c40201c 	xori	r17,r17,128
81115718:	d8802915 	stw	r2,164(sp)
8111571c:	8c7fe004 	addi	r17,r17,-128
81115720:	00380806 	br	81113744 <__reset+0xfb0f3744>
81115724:	9080004c 	andi	r2,r18,1
81115728:	0039883a 	mov	fp,zero
8111572c:	10000726 	beq	r2,zero,8111574c <___svfprintf_internal_r+0x2160>
81115730:	d8c02817 	ldw	r3,160(sp)
81115734:	dc001dc4 	addi	r16,sp,119
81115738:	00800c04 	movi	r2,48
8111573c:	1c07c83a 	sub	r3,r3,r16
81115740:	d8801dc5 	stb	r2,119(sp)
81115744:	d8c02e15 	stw	r3,184(sp)
81115748:	00395206 	br	81113c94 <__reset+0xfb0f3c94>
8111574c:	d8002e15 	stw	zero,184(sp)
81115750:	dc001e04 	addi	r16,sp,120
81115754:	00394f06 	br	81113c94 <__reset+0xfb0f3c94>
81115758:	0005883a 	mov	r2,zero
8111575c:	003e3206 	br	81115028 <__reset+0xfb0f5028>
81115760:	dd802617 	ldw	r22,152(sp)
81115764:	003f0606 	br	81115380 <__reset+0xfb0f5380>
81115768:	d9c02785 	stb	r7,158(sp)
8111576c:	003a5106 	br	811140b4 <__reset+0xfb0f40b4>
81115770:	d9c02785 	stb	r7,158(sp)
81115774:	003a3706 	br	81114054 <__reset+0xfb0f4054>
81115778:	0005883a 	mov	r2,zero
8111577c:	003f5e06 	br	811154f8 <__reset+0xfb0f54f8>
81115780:	d9c02785 	stb	r7,158(sp)
81115784:	00391706 	br	81113be4 <__reset+0xfb0f3be4>
81115788:	d9c02785 	stb	r7,158(sp)
8111578c:	0038e606 	br	81113b28 <__reset+0xfb0f3b28>
81115790:	d8802344 	addi	r2,sp,141
81115794:	003f0806 	br	811153b8 <__reset+0xfb0f53b8>
81115798:	d9c02785 	stb	r7,158(sp)
8111579c:	0038b706 	br	81113a7c <__reset+0xfb0f3a7c>
811157a0:	d9c02785 	stb	r7,158(sp)
811157a4:	003adc06 	br	81114318 <__reset+0xfb0f4318>
811157a8:	d9403917 	ldw	r5,228(sp)
811157ac:	00800304 	movi	r2,12
811157b0:	28800015 	stw	r2,0(r5)
811157b4:	00bfffc4 	movi	r2,-1
811157b8:	00387806 	br	8111399c <__reset+0xfb0f399c>
811157bc:	d9c02785 	stb	r7,158(sp)
811157c0:	003abf06 	br	811142c0 <__reset+0xfb0f42c0>
811157c4:	d9c02785 	stb	r7,158(sp)
811157c8:	003a9b06 	br	81114238 <__reset+0xfb0f4238>

811157cc <___vfprintf_internal_r>:
811157cc:	deffb804 	addi	sp,sp,-288
811157d0:	de00012e 	bgeu	sp,et,811157d8 <___vfprintf_internal_r+0xc>
811157d4:	003b68fa 	trap	3
811157d8:	dfc04715 	stw	ra,284(sp)
811157dc:	ddc04515 	stw	r23,276(sp)
811157e0:	dd404315 	stw	r21,268(sp)
811157e4:	d9002c15 	stw	r4,176(sp)
811157e8:	282f883a 	mov	r23,r5
811157ec:	302b883a 	mov	r21,r6
811157f0:	d9c02d15 	stw	r7,180(sp)
811157f4:	df004615 	stw	fp,280(sp)
811157f8:	dd804415 	stw	r22,272(sp)
811157fc:	dd004215 	stw	r20,264(sp)
81115800:	dcc04115 	stw	r19,260(sp)
81115804:	dc804015 	stw	r18,256(sp)
81115808:	dc403f15 	stw	r17,252(sp)
8111580c:	dc003e15 	stw	r16,248(sp)
81115810:	111c3740 	call	8111c374 <_localeconv_r>
81115814:	10800017 	ldw	r2,0(r2)
81115818:	1009883a 	mov	r4,r2
8111581c:	d8803415 	stw	r2,208(sp)
81115820:	11132f80 	call	811132f8 <strlen>
81115824:	d8803715 	stw	r2,220(sp)
81115828:	d8802c17 	ldw	r2,176(sp)
8111582c:	10000226 	beq	r2,zero,81115838 <___vfprintf_internal_r+0x6c>
81115830:	10800e17 	ldw	r2,56(r2)
81115834:	1000f926 	beq	r2,zero,81115c1c <___vfprintf_internal_r+0x450>
81115838:	b880030b 	ldhu	r2,12(r23)
8111583c:	10c8000c 	andi	r3,r2,8192
81115840:	1800061e 	bne	r3,zero,8111585c <___vfprintf_internal_r+0x90>
81115844:	b9001917 	ldw	r4,100(r23)
81115848:	00f7ffc4 	movi	r3,-8193
8111584c:	10880014 	ori	r2,r2,8192
81115850:	20c6703a 	and	r3,r4,r3
81115854:	b880030d 	sth	r2,12(r23)
81115858:	b8c01915 	stw	r3,100(r23)
8111585c:	10c0020c 	andi	r3,r2,8
81115860:	1800c126 	beq	r3,zero,81115b68 <___vfprintf_internal_r+0x39c>
81115864:	b8c00417 	ldw	r3,16(r23)
81115868:	1800bf26 	beq	r3,zero,81115b68 <___vfprintf_internal_r+0x39c>
8111586c:	1080068c 	andi	r2,r2,26
81115870:	00c00284 	movi	r3,10
81115874:	10c0c426 	beq	r2,r3,81115b88 <___vfprintf_internal_r+0x3bc>
81115878:	d8c00404 	addi	r3,sp,16
8111587c:	05204534 	movhi	r20,33044
81115880:	d9001e04 	addi	r4,sp,120
81115884:	a5392384 	addi	r20,r20,-7026
81115888:	d8c01e15 	stw	r3,120(sp)
8111588c:	d8002015 	stw	zero,128(sp)
81115890:	d8001f15 	stw	zero,124(sp)
81115894:	d8003315 	stw	zero,204(sp)
81115898:	d8003615 	stw	zero,216(sp)
8111589c:	d8003815 	stw	zero,224(sp)
811158a0:	1811883a 	mov	r8,r3
811158a4:	d8003915 	stw	zero,228(sp)
811158a8:	d8003a15 	stw	zero,232(sp)
811158ac:	d8002f15 	stw	zero,188(sp)
811158b0:	d9002815 	stw	r4,160(sp)
811158b4:	a8800007 	ldb	r2,0(r21)
811158b8:	10027b26 	beq	r2,zero,811162a8 <___vfprintf_internal_r+0xadc>
811158bc:	00c00944 	movi	r3,37
811158c0:	a821883a 	mov	r16,r21
811158c4:	10c0021e 	bne	r2,r3,811158d0 <___vfprintf_internal_r+0x104>
811158c8:	00001406 	br	8111591c <___vfprintf_internal_r+0x150>
811158cc:	10c00326 	beq	r2,r3,811158dc <___vfprintf_internal_r+0x110>
811158d0:	84000044 	addi	r16,r16,1
811158d4:	80800007 	ldb	r2,0(r16)
811158d8:	103ffc1e 	bne	r2,zero,811158cc <__reset+0xfb0f58cc>
811158dc:	8563c83a 	sub	r17,r16,r21
811158e0:	88000e26 	beq	r17,zero,8111591c <___vfprintf_internal_r+0x150>
811158e4:	d8c02017 	ldw	r3,128(sp)
811158e8:	d8801f17 	ldw	r2,124(sp)
811158ec:	45400015 	stw	r21,0(r8)
811158f0:	1c47883a 	add	r3,r3,r17
811158f4:	10800044 	addi	r2,r2,1
811158f8:	d8c02015 	stw	r3,128(sp)
811158fc:	44400115 	stw	r17,4(r8)
81115900:	d8801f15 	stw	r2,124(sp)
81115904:	00c001c4 	movi	r3,7
81115908:	1880a716 	blt	r3,r2,81115ba8 <___vfprintf_internal_r+0x3dc>
8111590c:	42000204 	addi	r8,r8,8
81115910:	d9402f17 	ldw	r5,188(sp)
81115914:	2c4b883a 	add	r5,r5,r17
81115918:	d9402f15 	stw	r5,188(sp)
8111591c:	80800007 	ldb	r2,0(r16)
81115920:	1000a826 	beq	r2,zero,81115bc4 <___vfprintf_internal_r+0x3f8>
81115924:	84400047 	ldb	r17,1(r16)
81115928:	00bfffc4 	movi	r2,-1
8111592c:	85400044 	addi	r21,r16,1
81115930:	d8002785 	stb	zero,158(sp)
81115934:	0007883a 	mov	r3,zero
81115938:	000f883a 	mov	r7,zero
8111593c:	d8802915 	stw	r2,164(sp)
81115940:	d8003115 	stw	zero,196(sp)
81115944:	0025883a 	mov	r18,zero
81115948:	01401604 	movi	r5,88
8111594c:	01800244 	movi	r6,9
81115950:	02800a84 	movi	r10,42
81115954:	02401b04 	movi	r9,108
81115958:	ad400044 	addi	r21,r21,1
8111595c:	88bff804 	addi	r2,r17,-32
81115960:	28830436 	bltu	r5,r2,81116574 <___vfprintf_internal_r+0xda8>
81115964:	100490ba 	slli	r2,r2,2
81115968:	01204474 	movhi	r4,33041
8111596c:	21165f04 	addi	r4,r4,22908
81115970:	1105883a 	add	r2,r2,r4
81115974:	10800017 	ldw	r2,0(r2)
81115978:	1000683a 	jmp	r2
8111597c:	81116494 	ori	r4,r16,17810
81115980:	81116574 	orhi	r4,r16,17813
81115984:	81116574 	orhi	r4,r16,17813
81115988:	811164b4 	orhi	r4,r16,17810
8111598c:	81116574 	orhi	r4,r16,17813
81115990:	81116574 	orhi	r4,r16,17813
81115994:	81116574 	orhi	r4,r16,17813
81115998:	81116574 	orhi	r4,r16,17813
8111599c:	81116574 	orhi	r4,r16,17813
811159a0:	81116574 	orhi	r4,r16,17813
811159a4:	81115c28 	cmpgeui	r4,r16,17776
811159a8:	811163d0 	cmplti	r4,r16,17807
811159ac:	81116574 	orhi	r4,r16,17813
811159b0:	81115af0 	cmpltui	r4,r16,17771
811159b4:	81115c50 	cmplti	r4,r16,17777
811159b8:	81116574 	orhi	r4,r16,17813
811159bc:	81115c90 	cmplti	r4,r16,17778
811159c0:	81115c9c 	xori	r4,r16,17778
811159c4:	81115c9c 	xori	r4,r16,17778
811159c8:	81115c9c 	xori	r4,r16,17778
811159cc:	81115c9c 	xori	r4,r16,17778
811159d0:	81115c9c 	xori	r4,r16,17778
811159d4:	81115c9c 	xori	r4,r16,17778
811159d8:	81115c9c 	xori	r4,r16,17778
811159dc:	81115c9c 	xori	r4,r16,17778
811159e0:	81115c9c 	xori	r4,r16,17778
811159e4:	81116574 	orhi	r4,r16,17813
811159e8:	81116574 	orhi	r4,r16,17813
811159ec:	81116574 	orhi	r4,r16,17813
811159f0:	81116574 	orhi	r4,r16,17813
811159f4:	81116574 	orhi	r4,r16,17813
811159f8:	81116574 	orhi	r4,r16,17813
811159fc:	81116574 	orhi	r4,r16,17813
81115a00:	81116574 	orhi	r4,r16,17813
81115a04:	81116574 	orhi	r4,r16,17813
81115a08:	81116574 	orhi	r4,r16,17813
81115a0c:	81115cd0 	cmplti	r4,r16,17779
81115a10:	81115d8c 	andi	r4,r16,17782
81115a14:	81116574 	orhi	r4,r16,17813
81115a18:	81115d8c 	andi	r4,r16,17782
81115a1c:	81116574 	orhi	r4,r16,17813
81115a20:	81116574 	orhi	r4,r16,17813
81115a24:	81116574 	orhi	r4,r16,17813
81115a28:	81116574 	orhi	r4,r16,17813
81115a2c:	81115e2c 	andhi	r4,r16,17784
81115a30:	81116574 	orhi	r4,r16,17813
81115a34:	81116574 	orhi	r4,r16,17813
81115a38:	81115e38 	rdprs	r4,r16,17784
81115a3c:	81116574 	orhi	r4,r16,17813
81115a40:	81116574 	orhi	r4,r16,17813
81115a44:	81116574 	orhi	r4,r16,17813
81115a48:	81116574 	orhi	r4,r16,17813
81115a4c:	81116574 	orhi	r4,r16,17813
81115a50:	811162b0 	cmpltui	r4,r16,17802
81115a54:	81116574 	orhi	r4,r16,17813
81115a58:	81116574 	orhi	r4,r16,17813
81115a5c:	81116310 	cmplti	r4,r16,17804
81115a60:	81116574 	orhi	r4,r16,17813
81115a64:	81116574 	orhi	r4,r16,17813
81115a68:	81116574 	orhi	r4,r16,17813
81115a6c:	81116574 	orhi	r4,r16,17813
81115a70:	81116574 	orhi	r4,r16,17813
81115a74:	81116574 	orhi	r4,r16,17813
81115a78:	81116574 	orhi	r4,r16,17813
81115a7c:	81116574 	orhi	r4,r16,17813
81115a80:	81116574 	orhi	r4,r16,17813
81115a84:	81116574 	orhi	r4,r16,17813
81115a88:	81116520 	cmpeqi	r4,r16,17812
81115a8c:	811164c0 	call	8811164c <__reset+0x20f164c>
81115a90:	81115d8c 	andi	r4,r16,17782
81115a94:	81115d8c 	andi	r4,r16,17782
81115a98:	81115d8c 	andi	r4,r16,17782
81115a9c:	811164d0 	cmplti	r4,r16,17811
81115aa0:	811164c0 	call	8811164c <__reset+0x20f164c>
81115aa4:	81116574 	orhi	r4,r16,17813
81115aa8:	81116574 	orhi	r4,r16,17813
81115aac:	811164dc 	xori	r4,r16,17811
81115ab0:	81116574 	orhi	r4,r16,17813
81115ab4:	811164ec 	andhi	r4,r16,17811
81115ab8:	811163c0 	call	8811163c <__reset+0x20f163c>
81115abc:	81115afc 	xorhi	r4,r16,17771
81115ac0:	811163e0 	cmpeqi	r4,r16,17807
81115ac4:	81116574 	orhi	r4,r16,17813
81115ac8:	811163ec 	andhi	r4,r16,17807
81115acc:	81116574 	orhi	r4,r16,17813
81115ad0:	81116448 	cmpgei	r4,r16,17809
81115ad4:	81116574 	orhi	r4,r16,17813
81115ad8:	81116574 	orhi	r4,r16,17813
81115adc:	81116458 	cmpnei	r4,r16,17809
81115ae0:	d9003117 	ldw	r4,196(sp)
81115ae4:	d8802d15 	stw	r2,180(sp)
81115ae8:	0109c83a 	sub	r4,zero,r4
81115aec:	d9003115 	stw	r4,196(sp)
81115af0:	94800114 	ori	r18,r18,4
81115af4:	ac400007 	ldb	r17,0(r21)
81115af8:	003f9706 	br	81115958 <__reset+0xfb0f5958>
81115afc:	00800c04 	movi	r2,48
81115b00:	d9002d17 	ldw	r4,180(sp)
81115b04:	d9402917 	ldw	r5,164(sp)
81115b08:	d8802705 	stb	r2,156(sp)
81115b0c:	00801e04 	movi	r2,120
81115b10:	d8802745 	stb	r2,157(sp)
81115b14:	d8002785 	stb	zero,158(sp)
81115b18:	20c00104 	addi	r3,r4,4
81115b1c:	24c00017 	ldw	r19,0(r4)
81115b20:	002d883a 	mov	r22,zero
81115b24:	90800094 	ori	r2,r18,2
81115b28:	28029a16 	blt	r5,zero,81116594 <___vfprintf_internal_r+0xdc8>
81115b2c:	00bfdfc4 	movi	r2,-129
81115b30:	90a4703a 	and	r18,r18,r2
81115b34:	d8c02d15 	stw	r3,180(sp)
81115b38:	94800094 	ori	r18,r18,2
81115b3c:	9802871e 	bne	r19,zero,8111655c <___vfprintf_internal_r+0xd90>
81115b40:	00a04534 	movhi	r2,33044
81115b44:	10b91404 	addi	r2,r2,-7088
81115b48:	d8803915 	stw	r2,228(sp)
81115b4c:	04401e04 	movi	r17,120
81115b50:	d8802917 	ldw	r2,164(sp)
81115b54:	0039883a 	mov	fp,zero
81115b58:	1001e926 	beq	r2,zero,81116300 <___vfprintf_internal_r+0xb34>
81115b5c:	0027883a 	mov	r19,zero
81115b60:	002d883a 	mov	r22,zero
81115b64:	00020506 	br	8111637c <___vfprintf_internal_r+0xbb0>
81115b68:	d9002c17 	ldw	r4,176(sp)
81115b6c:	b80b883a 	mov	r5,r23
81115b70:	11193b80 	call	811193b8 <__swsetup_r>
81115b74:	1005ac1e 	bne	r2,zero,81117228 <___vfprintf_internal_r+0x1a5c>
81115b78:	b880030b 	ldhu	r2,12(r23)
81115b7c:	00c00284 	movi	r3,10
81115b80:	1080068c 	andi	r2,r2,26
81115b84:	10ff3c1e 	bne	r2,r3,81115878 <__reset+0xfb0f5878>
81115b88:	b880038f 	ldh	r2,14(r23)
81115b8c:	103f3a16 	blt	r2,zero,81115878 <__reset+0xfb0f5878>
81115b90:	d9c02d17 	ldw	r7,180(sp)
81115b94:	d9002c17 	ldw	r4,176(sp)
81115b98:	a80d883a 	mov	r6,r21
81115b9c:	b80b883a 	mov	r5,r23
81115ba0:	11179e80 	call	811179e8 <__sbprintf>
81115ba4:	00001106 	br	81115bec <___vfprintf_internal_r+0x420>
81115ba8:	d9002c17 	ldw	r4,176(sp)
81115bac:	d9801e04 	addi	r6,sp,120
81115bb0:	b80b883a 	mov	r5,r23
81115bb4:	112185c0 	call	8112185c <__sprint_r>
81115bb8:	1000081e 	bne	r2,zero,81115bdc <___vfprintf_internal_r+0x410>
81115bbc:	da000404 	addi	r8,sp,16
81115bc0:	003f5306 	br	81115910 <__reset+0xfb0f5910>
81115bc4:	d8802017 	ldw	r2,128(sp)
81115bc8:	10000426 	beq	r2,zero,81115bdc <___vfprintf_internal_r+0x410>
81115bcc:	d9002c17 	ldw	r4,176(sp)
81115bd0:	d9801e04 	addi	r6,sp,120
81115bd4:	b80b883a 	mov	r5,r23
81115bd8:	112185c0 	call	8112185c <__sprint_r>
81115bdc:	b880030b 	ldhu	r2,12(r23)
81115be0:	1080100c 	andi	r2,r2,64
81115be4:	1005901e 	bne	r2,zero,81117228 <___vfprintf_internal_r+0x1a5c>
81115be8:	d8802f17 	ldw	r2,188(sp)
81115bec:	dfc04717 	ldw	ra,284(sp)
81115bf0:	df004617 	ldw	fp,280(sp)
81115bf4:	ddc04517 	ldw	r23,276(sp)
81115bf8:	dd804417 	ldw	r22,272(sp)
81115bfc:	dd404317 	ldw	r21,268(sp)
81115c00:	dd004217 	ldw	r20,264(sp)
81115c04:	dcc04117 	ldw	r19,260(sp)
81115c08:	dc804017 	ldw	r18,256(sp)
81115c0c:	dc403f17 	ldw	r17,252(sp)
81115c10:	dc003e17 	ldw	r16,248(sp)
81115c14:	dec04804 	addi	sp,sp,288
81115c18:	f800283a 	ret
81115c1c:	d9002c17 	ldw	r4,176(sp)
81115c20:	111b4280 	call	8111b428 <__sinit>
81115c24:	003f0406 	br	81115838 <__reset+0xfb0f5838>
81115c28:	d8802d17 	ldw	r2,180(sp)
81115c2c:	d9002d17 	ldw	r4,180(sp)
81115c30:	10800017 	ldw	r2,0(r2)
81115c34:	d8803115 	stw	r2,196(sp)
81115c38:	20800104 	addi	r2,r4,4
81115c3c:	d9003117 	ldw	r4,196(sp)
81115c40:	203fa716 	blt	r4,zero,81115ae0 <__reset+0xfb0f5ae0>
81115c44:	d8802d15 	stw	r2,180(sp)
81115c48:	ac400007 	ldb	r17,0(r21)
81115c4c:	003f4206 	br	81115958 <__reset+0xfb0f5958>
81115c50:	ac400007 	ldb	r17,0(r21)
81115c54:	aac00044 	addi	r11,r21,1
81115c58:	8a872826 	beq	r17,r10,811178fc <___vfprintf_internal_r+0x2130>
81115c5c:	88bff404 	addi	r2,r17,-48
81115c60:	0009883a 	mov	r4,zero
81115c64:	30867d36 	bltu	r6,r2,8111765c <___vfprintf_internal_r+0x1e90>
81115c68:	5c400007 	ldb	r17,0(r11)
81115c6c:	210002a4 	muli	r4,r4,10
81115c70:	5d400044 	addi	r21,r11,1
81115c74:	a817883a 	mov	r11,r21
81115c78:	2089883a 	add	r4,r4,r2
81115c7c:	88bff404 	addi	r2,r17,-48
81115c80:	30bff92e 	bgeu	r6,r2,81115c68 <__reset+0xfb0f5c68>
81115c84:	2005c916 	blt	r4,zero,811173ac <___vfprintf_internal_r+0x1be0>
81115c88:	d9002915 	stw	r4,164(sp)
81115c8c:	003f3306 	br	8111595c <__reset+0xfb0f595c>
81115c90:	94802014 	ori	r18,r18,128
81115c94:	ac400007 	ldb	r17,0(r21)
81115c98:	003f2f06 	br	81115958 <__reset+0xfb0f5958>
81115c9c:	a809883a 	mov	r4,r21
81115ca0:	d8003115 	stw	zero,196(sp)
81115ca4:	88bff404 	addi	r2,r17,-48
81115ca8:	0017883a 	mov	r11,zero
81115cac:	24400007 	ldb	r17,0(r4)
81115cb0:	5ac002a4 	muli	r11,r11,10
81115cb4:	ad400044 	addi	r21,r21,1
81115cb8:	a809883a 	mov	r4,r21
81115cbc:	12d7883a 	add	r11,r2,r11
81115cc0:	88bff404 	addi	r2,r17,-48
81115cc4:	30bff92e 	bgeu	r6,r2,81115cac <__reset+0xfb0f5cac>
81115cc8:	dac03115 	stw	r11,196(sp)
81115ccc:	003f2306 	br	8111595c <__reset+0xfb0f595c>
81115cd0:	18c03fcc 	andi	r3,r3,255
81115cd4:	18072b1e 	bne	r3,zero,81117984 <___vfprintf_internal_r+0x21b8>
81115cd8:	94800414 	ori	r18,r18,16
81115cdc:	9080080c 	andi	r2,r18,32
81115ce0:	10037b26 	beq	r2,zero,81116ad0 <___vfprintf_internal_r+0x1304>
81115ce4:	d9402d17 	ldw	r5,180(sp)
81115ce8:	28800117 	ldw	r2,4(r5)
81115cec:	2cc00017 	ldw	r19,0(r5)
81115cf0:	29400204 	addi	r5,r5,8
81115cf4:	d9402d15 	stw	r5,180(sp)
81115cf8:	102d883a 	mov	r22,r2
81115cfc:	10044b16 	blt	r2,zero,81116e2c <___vfprintf_internal_r+0x1660>
81115d00:	d9402917 	ldw	r5,164(sp)
81115d04:	df002783 	ldbu	fp,158(sp)
81115d08:	2803bc16 	blt	r5,zero,81116bfc <___vfprintf_internal_r+0x1430>
81115d0c:	00ffdfc4 	movi	r3,-129
81115d10:	9d84b03a 	or	r2,r19,r22
81115d14:	90e4703a 	and	r18,r18,r3
81115d18:	10017726 	beq	r2,zero,811162f8 <___vfprintf_internal_r+0xb2c>
81115d1c:	b0038326 	beq	r22,zero,81116b2c <___vfprintf_internal_r+0x1360>
81115d20:	dc402a15 	stw	r17,168(sp)
81115d24:	dc001e04 	addi	r16,sp,120
81115d28:	b023883a 	mov	r17,r22
81115d2c:	402d883a 	mov	r22,r8
81115d30:	9809883a 	mov	r4,r19
81115d34:	880b883a 	mov	r5,r17
81115d38:	01800284 	movi	r6,10
81115d3c:	000f883a 	mov	r7,zero
81115d40:	11247700 	call	81124770 <__umoddi3>
81115d44:	10800c04 	addi	r2,r2,48
81115d48:	843fffc4 	addi	r16,r16,-1
81115d4c:	9809883a 	mov	r4,r19
81115d50:	880b883a 	mov	r5,r17
81115d54:	80800005 	stb	r2,0(r16)
81115d58:	01800284 	movi	r6,10
81115d5c:	000f883a 	mov	r7,zero
81115d60:	11241f00 	call	811241f0 <__udivdi3>
81115d64:	1027883a 	mov	r19,r2
81115d68:	10c4b03a 	or	r2,r2,r3
81115d6c:	1823883a 	mov	r17,r3
81115d70:	103fef1e 	bne	r2,zero,81115d30 <__reset+0xfb0f5d30>
81115d74:	d8c02817 	ldw	r3,160(sp)
81115d78:	dc402a17 	ldw	r17,168(sp)
81115d7c:	b011883a 	mov	r8,r22
81115d80:	1c07c83a 	sub	r3,r3,r16
81115d84:	d8c02e15 	stw	r3,184(sp)
81115d88:	00005906 	br	81115ef0 <___vfprintf_internal_r+0x724>
81115d8c:	18c03fcc 	andi	r3,r3,255
81115d90:	1806fa1e 	bne	r3,zero,8111797c <___vfprintf_internal_r+0x21b0>
81115d94:	9080020c 	andi	r2,r18,8
81115d98:	10048a26 	beq	r2,zero,81116fc4 <___vfprintf_internal_r+0x17f8>
81115d9c:	d8c02d17 	ldw	r3,180(sp)
81115da0:	d9002d17 	ldw	r4,180(sp)
81115da4:	d9402d17 	ldw	r5,180(sp)
81115da8:	18c00017 	ldw	r3,0(r3)
81115dac:	21000117 	ldw	r4,4(r4)
81115db0:	29400204 	addi	r5,r5,8
81115db4:	d8c03615 	stw	r3,216(sp)
81115db8:	d9003815 	stw	r4,224(sp)
81115dbc:	d9402d15 	stw	r5,180(sp)
81115dc0:	d9003617 	ldw	r4,216(sp)
81115dc4:	d9403817 	ldw	r5,224(sp)
81115dc8:	da003d15 	stw	r8,244(sp)
81115dcc:	04000044 	movi	r16,1
81115dd0:	111dec00 	call	8111dec0 <__fpclassifyd>
81115dd4:	da003d17 	ldw	r8,244(sp)
81115dd8:	14041f1e 	bne	r2,r16,81116e58 <___vfprintf_internal_r+0x168c>
81115ddc:	d9003617 	ldw	r4,216(sp)
81115de0:	d9403817 	ldw	r5,224(sp)
81115de4:	000d883a 	mov	r6,zero
81115de8:	000f883a 	mov	r7,zero
81115dec:	11263680 	call	81126368 <__ledf2>
81115df0:	da003d17 	ldw	r8,244(sp)
81115df4:	1005be16 	blt	r2,zero,811174f0 <___vfprintf_internal_r+0x1d24>
81115df8:	df002783 	ldbu	fp,158(sp)
81115dfc:	008011c4 	movi	r2,71
81115e00:	1445330e 	bge	r2,r17,811172d0 <___vfprintf_internal_r+0x1b04>
81115e04:	04204534 	movhi	r16,33044
81115e08:	84390c04 	addi	r16,r16,-7120
81115e0c:	00c000c4 	movi	r3,3
81115e10:	00bfdfc4 	movi	r2,-129
81115e14:	d8c02a15 	stw	r3,168(sp)
81115e18:	90a4703a 	and	r18,r18,r2
81115e1c:	d8c02e15 	stw	r3,184(sp)
81115e20:	d8002915 	stw	zero,164(sp)
81115e24:	d8003215 	stw	zero,200(sp)
81115e28:	00003706 	br	81115f08 <___vfprintf_internal_r+0x73c>
81115e2c:	94800214 	ori	r18,r18,8
81115e30:	ac400007 	ldb	r17,0(r21)
81115e34:	003ec806 	br	81115958 <__reset+0xfb0f5958>
81115e38:	18c03fcc 	andi	r3,r3,255
81115e3c:	1806db1e 	bne	r3,zero,811179ac <___vfprintf_internal_r+0x21e0>
81115e40:	94800414 	ori	r18,r18,16
81115e44:	9080080c 	andi	r2,r18,32
81115e48:	1002d826 	beq	r2,zero,811169ac <___vfprintf_internal_r+0x11e0>
81115e4c:	d9402d17 	ldw	r5,180(sp)
81115e50:	d8c02917 	ldw	r3,164(sp)
81115e54:	d8002785 	stb	zero,158(sp)
81115e58:	28800204 	addi	r2,r5,8
81115e5c:	2cc00017 	ldw	r19,0(r5)
81115e60:	2d800117 	ldw	r22,4(r5)
81115e64:	18048f16 	blt	r3,zero,811170a4 <___vfprintf_internal_r+0x18d8>
81115e68:	013fdfc4 	movi	r4,-129
81115e6c:	9d86b03a 	or	r3,r19,r22
81115e70:	d8802d15 	stw	r2,180(sp)
81115e74:	9124703a 	and	r18,r18,r4
81115e78:	1802d91e 	bne	r3,zero,811169e0 <___vfprintf_internal_r+0x1214>
81115e7c:	d8c02917 	ldw	r3,164(sp)
81115e80:	0039883a 	mov	fp,zero
81115e84:	1805c326 	beq	r3,zero,81117594 <___vfprintf_internal_r+0x1dc8>
81115e88:	0027883a 	mov	r19,zero
81115e8c:	002d883a 	mov	r22,zero
81115e90:	dc001e04 	addi	r16,sp,120
81115e94:	9806d0fa 	srli	r3,r19,3
81115e98:	b008977a 	slli	r4,r22,29
81115e9c:	b02cd0fa 	srli	r22,r22,3
81115ea0:	9cc001cc 	andi	r19,r19,7
81115ea4:	98800c04 	addi	r2,r19,48
81115ea8:	843fffc4 	addi	r16,r16,-1
81115eac:	20e6b03a 	or	r19,r4,r3
81115eb0:	80800005 	stb	r2,0(r16)
81115eb4:	9d86b03a 	or	r3,r19,r22
81115eb8:	183ff61e 	bne	r3,zero,81115e94 <__reset+0xfb0f5e94>
81115ebc:	90c0004c 	andi	r3,r18,1
81115ec0:	18013b26 	beq	r3,zero,811163b0 <___vfprintf_internal_r+0xbe4>
81115ec4:	10803fcc 	andi	r2,r2,255
81115ec8:	1080201c 	xori	r2,r2,128
81115ecc:	10bfe004 	addi	r2,r2,-128
81115ed0:	00c00c04 	movi	r3,48
81115ed4:	10c13626 	beq	r2,r3,811163b0 <___vfprintf_internal_r+0xbe4>
81115ed8:	80ffffc5 	stb	r3,-1(r16)
81115edc:	d8c02817 	ldw	r3,160(sp)
81115ee0:	80bfffc4 	addi	r2,r16,-1
81115ee4:	1021883a 	mov	r16,r2
81115ee8:	1887c83a 	sub	r3,r3,r2
81115eec:	d8c02e15 	stw	r3,184(sp)
81115ef0:	d8802e17 	ldw	r2,184(sp)
81115ef4:	d9002917 	ldw	r4,164(sp)
81115ef8:	1100010e 	bge	r2,r4,81115f00 <___vfprintf_internal_r+0x734>
81115efc:	2005883a 	mov	r2,r4
81115f00:	d8802a15 	stw	r2,168(sp)
81115f04:	d8003215 	stw	zero,200(sp)
81115f08:	e7003fcc 	andi	fp,fp,255
81115f0c:	e700201c 	xori	fp,fp,128
81115f10:	e73fe004 	addi	fp,fp,-128
81115f14:	e0000326 	beq	fp,zero,81115f24 <___vfprintf_internal_r+0x758>
81115f18:	d8c02a17 	ldw	r3,168(sp)
81115f1c:	18c00044 	addi	r3,r3,1
81115f20:	d8c02a15 	stw	r3,168(sp)
81115f24:	90c0008c 	andi	r3,r18,2
81115f28:	d8c02b15 	stw	r3,172(sp)
81115f2c:	18000326 	beq	r3,zero,81115f3c <___vfprintf_internal_r+0x770>
81115f30:	d8c02a17 	ldw	r3,168(sp)
81115f34:	18c00084 	addi	r3,r3,2
81115f38:	d8c02a15 	stw	r3,168(sp)
81115f3c:	90c0210c 	andi	r3,r18,132
81115f40:	d8c03015 	stw	r3,192(sp)
81115f44:	1801a31e 	bne	r3,zero,811165d4 <___vfprintf_internal_r+0xe08>
81115f48:	d9003117 	ldw	r4,196(sp)
81115f4c:	d8c02a17 	ldw	r3,168(sp)
81115f50:	20e7c83a 	sub	r19,r4,r3
81115f54:	04c19f0e 	bge	zero,r19,811165d4 <___vfprintf_internal_r+0xe08>
81115f58:	02400404 	movi	r9,16
81115f5c:	d8c02017 	ldw	r3,128(sp)
81115f60:	d8801f17 	ldw	r2,124(sp)
81115f64:	4cc50d0e 	bge	r9,r19,8111739c <___vfprintf_internal_r+0x1bd0>
81115f68:	01604534 	movhi	r5,33044
81115f6c:	29792784 	addi	r5,r5,-7010
81115f70:	dc403b15 	stw	r17,236(sp)
81115f74:	d9403515 	stw	r5,212(sp)
81115f78:	9823883a 	mov	r17,r19
81115f7c:	482d883a 	mov	r22,r9
81115f80:	9027883a 	mov	r19,r18
81115f84:	070001c4 	movi	fp,7
81115f88:	8025883a 	mov	r18,r16
81115f8c:	dc002c17 	ldw	r16,176(sp)
81115f90:	00000306 	br	81115fa0 <___vfprintf_internal_r+0x7d4>
81115f94:	8c7ffc04 	addi	r17,r17,-16
81115f98:	42000204 	addi	r8,r8,8
81115f9c:	b440130e 	bge	r22,r17,81115fec <___vfprintf_internal_r+0x820>
81115fa0:	01204534 	movhi	r4,33044
81115fa4:	18c00404 	addi	r3,r3,16
81115fa8:	10800044 	addi	r2,r2,1
81115fac:	21392784 	addi	r4,r4,-7010
81115fb0:	41000015 	stw	r4,0(r8)
81115fb4:	45800115 	stw	r22,4(r8)
81115fb8:	d8c02015 	stw	r3,128(sp)
81115fbc:	d8801f15 	stw	r2,124(sp)
81115fc0:	e0bff40e 	bge	fp,r2,81115f94 <__reset+0xfb0f5f94>
81115fc4:	d9801e04 	addi	r6,sp,120
81115fc8:	b80b883a 	mov	r5,r23
81115fcc:	8009883a 	mov	r4,r16
81115fd0:	112185c0 	call	8112185c <__sprint_r>
81115fd4:	103f011e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81115fd8:	8c7ffc04 	addi	r17,r17,-16
81115fdc:	d8c02017 	ldw	r3,128(sp)
81115fe0:	d8801f17 	ldw	r2,124(sp)
81115fe4:	da000404 	addi	r8,sp,16
81115fe8:	b47fed16 	blt	r22,r17,81115fa0 <__reset+0xfb0f5fa0>
81115fec:	9021883a 	mov	r16,r18
81115ff0:	9825883a 	mov	r18,r19
81115ff4:	8827883a 	mov	r19,r17
81115ff8:	dc403b17 	ldw	r17,236(sp)
81115ffc:	d9403517 	ldw	r5,212(sp)
81116000:	98c7883a 	add	r3,r19,r3
81116004:	10800044 	addi	r2,r2,1
81116008:	41400015 	stw	r5,0(r8)
8111600c:	44c00115 	stw	r19,4(r8)
81116010:	d8c02015 	stw	r3,128(sp)
81116014:	d8801f15 	stw	r2,124(sp)
81116018:	010001c4 	movi	r4,7
8111601c:	2082a316 	blt	r4,r2,81116aac <___vfprintf_internal_r+0x12e0>
81116020:	df002787 	ldb	fp,158(sp)
81116024:	42000204 	addi	r8,r8,8
81116028:	e0000c26 	beq	fp,zero,8111605c <___vfprintf_internal_r+0x890>
8111602c:	d8801f17 	ldw	r2,124(sp)
81116030:	d9002784 	addi	r4,sp,158
81116034:	18c00044 	addi	r3,r3,1
81116038:	10800044 	addi	r2,r2,1
8111603c:	41000015 	stw	r4,0(r8)
81116040:	01000044 	movi	r4,1
81116044:	41000115 	stw	r4,4(r8)
81116048:	d8c02015 	stw	r3,128(sp)
8111604c:	d8801f15 	stw	r2,124(sp)
81116050:	010001c4 	movi	r4,7
81116054:	20823c16 	blt	r4,r2,81116948 <___vfprintf_internal_r+0x117c>
81116058:	42000204 	addi	r8,r8,8
8111605c:	d8802b17 	ldw	r2,172(sp)
81116060:	10000c26 	beq	r2,zero,81116094 <___vfprintf_internal_r+0x8c8>
81116064:	d8801f17 	ldw	r2,124(sp)
81116068:	d9002704 	addi	r4,sp,156
8111606c:	18c00084 	addi	r3,r3,2
81116070:	10800044 	addi	r2,r2,1
81116074:	41000015 	stw	r4,0(r8)
81116078:	01000084 	movi	r4,2
8111607c:	41000115 	stw	r4,4(r8)
81116080:	d8c02015 	stw	r3,128(sp)
81116084:	d8801f15 	stw	r2,124(sp)
81116088:	010001c4 	movi	r4,7
8111608c:	20823616 	blt	r4,r2,81116968 <___vfprintf_internal_r+0x119c>
81116090:	42000204 	addi	r8,r8,8
81116094:	d9003017 	ldw	r4,192(sp)
81116098:	00802004 	movi	r2,128
8111609c:	20819926 	beq	r4,r2,81116704 <___vfprintf_internal_r+0xf38>
811160a0:	d9402917 	ldw	r5,164(sp)
811160a4:	d8802e17 	ldw	r2,184(sp)
811160a8:	28adc83a 	sub	r22,r5,r2
811160ac:	0580310e 	bge	zero,r22,81116174 <___vfprintf_internal_r+0x9a8>
811160b0:	07000404 	movi	fp,16
811160b4:	d8801f17 	ldw	r2,124(sp)
811160b8:	e584140e 	bge	fp,r22,8111710c <___vfprintf_internal_r+0x1940>
811160bc:	01604534 	movhi	r5,33044
811160c0:	29792384 	addi	r5,r5,-7026
811160c4:	dc402915 	stw	r17,164(sp)
811160c8:	d9402b15 	stw	r5,172(sp)
811160cc:	b023883a 	mov	r17,r22
811160d0:	04c001c4 	movi	r19,7
811160d4:	a82d883a 	mov	r22,r21
811160d8:	902b883a 	mov	r21,r18
811160dc:	8025883a 	mov	r18,r16
811160e0:	dc002c17 	ldw	r16,176(sp)
811160e4:	00000306 	br	811160f4 <___vfprintf_internal_r+0x928>
811160e8:	8c7ffc04 	addi	r17,r17,-16
811160ec:	42000204 	addi	r8,r8,8
811160f0:	e440110e 	bge	fp,r17,81116138 <___vfprintf_internal_r+0x96c>
811160f4:	18c00404 	addi	r3,r3,16
811160f8:	10800044 	addi	r2,r2,1
811160fc:	45000015 	stw	r20,0(r8)
81116100:	47000115 	stw	fp,4(r8)
81116104:	d8c02015 	stw	r3,128(sp)
81116108:	d8801f15 	stw	r2,124(sp)
8111610c:	98bff60e 	bge	r19,r2,811160e8 <__reset+0xfb0f60e8>
81116110:	d9801e04 	addi	r6,sp,120
81116114:	b80b883a 	mov	r5,r23
81116118:	8009883a 	mov	r4,r16
8111611c:	112185c0 	call	8112185c <__sprint_r>
81116120:	103eae1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116124:	8c7ffc04 	addi	r17,r17,-16
81116128:	d8c02017 	ldw	r3,128(sp)
8111612c:	d8801f17 	ldw	r2,124(sp)
81116130:	da000404 	addi	r8,sp,16
81116134:	e47fef16 	blt	fp,r17,811160f4 <__reset+0xfb0f60f4>
81116138:	9021883a 	mov	r16,r18
8111613c:	a825883a 	mov	r18,r21
81116140:	b02b883a 	mov	r21,r22
81116144:	882d883a 	mov	r22,r17
81116148:	dc402917 	ldw	r17,164(sp)
8111614c:	d9002b17 	ldw	r4,172(sp)
81116150:	1d87883a 	add	r3,r3,r22
81116154:	10800044 	addi	r2,r2,1
81116158:	41000015 	stw	r4,0(r8)
8111615c:	45800115 	stw	r22,4(r8)
81116160:	d8c02015 	stw	r3,128(sp)
81116164:	d8801f15 	stw	r2,124(sp)
81116168:	010001c4 	movi	r4,7
8111616c:	2081ee16 	blt	r4,r2,81116928 <___vfprintf_internal_r+0x115c>
81116170:	42000204 	addi	r8,r8,8
81116174:	9080400c 	andi	r2,r18,256
81116178:	1001181e 	bne	r2,zero,811165dc <___vfprintf_internal_r+0xe10>
8111617c:	d9402e17 	ldw	r5,184(sp)
81116180:	d8801f17 	ldw	r2,124(sp)
81116184:	44000015 	stw	r16,0(r8)
81116188:	1947883a 	add	r3,r3,r5
8111618c:	10800044 	addi	r2,r2,1
81116190:	41400115 	stw	r5,4(r8)
81116194:	d8c02015 	stw	r3,128(sp)
81116198:	d8801f15 	stw	r2,124(sp)
8111619c:	010001c4 	movi	r4,7
811161a0:	2081d316 	blt	r4,r2,811168f0 <___vfprintf_internal_r+0x1124>
811161a4:	42000204 	addi	r8,r8,8
811161a8:	9480010c 	andi	r18,r18,4
811161ac:	90003226 	beq	r18,zero,81116278 <___vfprintf_internal_r+0xaac>
811161b0:	d9403117 	ldw	r5,196(sp)
811161b4:	d8802a17 	ldw	r2,168(sp)
811161b8:	28a1c83a 	sub	r16,r5,r2
811161bc:	04002e0e 	bge	zero,r16,81116278 <___vfprintf_internal_r+0xaac>
811161c0:	04400404 	movi	r17,16
811161c4:	d8801f17 	ldw	r2,124(sp)
811161c8:	8c04a20e 	bge	r17,r16,81117454 <___vfprintf_internal_r+0x1c88>
811161cc:	01604534 	movhi	r5,33044
811161d0:	29792784 	addi	r5,r5,-7010
811161d4:	d9403515 	stw	r5,212(sp)
811161d8:	048001c4 	movi	r18,7
811161dc:	dcc02c17 	ldw	r19,176(sp)
811161e0:	00000306 	br	811161f0 <___vfprintf_internal_r+0xa24>
811161e4:	843ffc04 	addi	r16,r16,-16
811161e8:	42000204 	addi	r8,r8,8
811161ec:	8c00130e 	bge	r17,r16,8111623c <___vfprintf_internal_r+0xa70>
811161f0:	01204534 	movhi	r4,33044
811161f4:	18c00404 	addi	r3,r3,16
811161f8:	10800044 	addi	r2,r2,1
811161fc:	21392784 	addi	r4,r4,-7010
81116200:	41000015 	stw	r4,0(r8)
81116204:	44400115 	stw	r17,4(r8)
81116208:	d8c02015 	stw	r3,128(sp)
8111620c:	d8801f15 	stw	r2,124(sp)
81116210:	90bff40e 	bge	r18,r2,811161e4 <__reset+0xfb0f61e4>
81116214:	d9801e04 	addi	r6,sp,120
81116218:	b80b883a 	mov	r5,r23
8111621c:	9809883a 	mov	r4,r19
81116220:	112185c0 	call	8112185c <__sprint_r>
81116224:	103e6d1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116228:	843ffc04 	addi	r16,r16,-16
8111622c:	d8c02017 	ldw	r3,128(sp)
81116230:	d8801f17 	ldw	r2,124(sp)
81116234:	da000404 	addi	r8,sp,16
81116238:	8c3fed16 	blt	r17,r16,811161f0 <__reset+0xfb0f61f0>
8111623c:	d9403517 	ldw	r5,212(sp)
81116240:	1c07883a 	add	r3,r3,r16
81116244:	10800044 	addi	r2,r2,1
81116248:	41400015 	stw	r5,0(r8)
8111624c:	44000115 	stw	r16,4(r8)
81116250:	d8c02015 	stw	r3,128(sp)
81116254:	d8801f15 	stw	r2,124(sp)
81116258:	010001c4 	movi	r4,7
8111625c:	2080060e 	bge	r4,r2,81116278 <___vfprintf_internal_r+0xaac>
81116260:	d9002c17 	ldw	r4,176(sp)
81116264:	d9801e04 	addi	r6,sp,120
81116268:	b80b883a 	mov	r5,r23
8111626c:	112185c0 	call	8112185c <__sprint_r>
81116270:	103e5a1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116274:	d8c02017 	ldw	r3,128(sp)
81116278:	d8803117 	ldw	r2,196(sp)
8111627c:	d9002a17 	ldw	r4,168(sp)
81116280:	1100010e 	bge	r2,r4,81116288 <___vfprintf_internal_r+0xabc>
81116284:	2005883a 	mov	r2,r4
81116288:	d9402f17 	ldw	r5,188(sp)
8111628c:	288b883a 	add	r5,r5,r2
81116290:	d9402f15 	stw	r5,188(sp)
81116294:	18019e1e 	bne	r3,zero,81116910 <___vfprintf_internal_r+0x1144>
81116298:	a8800007 	ldb	r2,0(r21)
8111629c:	d8001f15 	stw	zero,124(sp)
811162a0:	da000404 	addi	r8,sp,16
811162a4:	103d851e 	bne	r2,zero,811158bc <__reset+0xfb0f58bc>
811162a8:	a821883a 	mov	r16,r21
811162ac:	003d9b06 	br	8111591c <__reset+0xfb0f591c>
811162b0:	18c03fcc 	andi	r3,r3,255
811162b4:	1805c11e 	bne	r3,zero,811179bc <___vfprintf_internal_r+0x21f0>
811162b8:	94800414 	ori	r18,r18,16
811162bc:	9080080c 	andi	r2,r18,32
811162c0:	10020c26 	beq	r2,zero,81116af4 <___vfprintf_internal_r+0x1328>
811162c4:	d8802d17 	ldw	r2,180(sp)
811162c8:	d9002917 	ldw	r4,164(sp)
811162cc:	d8002785 	stb	zero,158(sp)
811162d0:	10c00204 	addi	r3,r2,8
811162d4:	14c00017 	ldw	r19,0(r2)
811162d8:	15800117 	ldw	r22,4(r2)
811162dc:	20040f16 	blt	r4,zero,8111731c <___vfprintf_internal_r+0x1b50>
811162e0:	013fdfc4 	movi	r4,-129
811162e4:	9d84b03a 	or	r2,r19,r22
811162e8:	d8c02d15 	stw	r3,180(sp)
811162ec:	9124703a 	and	r18,r18,r4
811162f0:	0039883a 	mov	fp,zero
811162f4:	103e891e 	bne	r2,zero,81115d1c <__reset+0xfb0f5d1c>
811162f8:	d9002917 	ldw	r4,164(sp)
811162fc:	2002c11e 	bne	r4,zero,81116e04 <___vfprintf_internal_r+0x1638>
81116300:	d8002915 	stw	zero,164(sp)
81116304:	d8002e15 	stw	zero,184(sp)
81116308:	dc001e04 	addi	r16,sp,120
8111630c:	003ef806 	br	81115ef0 <__reset+0xfb0f5ef0>
81116310:	18c03fcc 	andi	r3,r3,255
81116314:	18059d1e 	bne	r3,zero,8111798c <___vfprintf_internal_r+0x21c0>
81116318:	01604534 	movhi	r5,33044
8111631c:	29790f04 	addi	r5,r5,-7108
81116320:	d9403915 	stw	r5,228(sp)
81116324:	9080080c 	andi	r2,r18,32
81116328:	10005226 	beq	r2,zero,81116474 <___vfprintf_internal_r+0xca8>
8111632c:	d8802d17 	ldw	r2,180(sp)
81116330:	14c00017 	ldw	r19,0(r2)
81116334:	15800117 	ldw	r22,4(r2)
81116338:	10800204 	addi	r2,r2,8
8111633c:	d8802d15 	stw	r2,180(sp)
81116340:	9080004c 	andi	r2,r18,1
81116344:	10019026 	beq	r2,zero,81116988 <___vfprintf_internal_r+0x11bc>
81116348:	9d84b03a 	or	r2,r19,r22
8111634c:	10036926 	beq	r2,zero,811170f4 <___vfprintf_internal_r+0x1928>
81116350:	d8c02917 	ldw	r3,164(sp)
81116354:	00800c04 	movi	r2,48
81116358:	d8802705 	stb	r2,156(sp)
8111635c:	dc402745 	stb	r17,157(sp)
81116360:	d8002785 	stb	zero,158(sp)
81116364:	90800094 	ori	r2,r18,2
81116368:	18045d16 	blt	r3,zero,811174e0 <___vfprintf_internal_r+0x1d14>
8111636c:	00bfdfc4 	movi	r2,-129
81116370:	90a4703a 	and	r18,r18,r2
81116374:	94800094 	ori	r18,r18,2
81116378:	0039883a 	mov	fp,zero
8111637c:	d9003917 	ldw	r4,228(sp)
81116380:	dc001e04 	addi	r16,sp,120
81116384:	988003cc 	andi	r2,r19,15
81116388:	b006973a 	slli	r3,r22,28
8111638c:	2085883a 	add	r2,r4,r2
81116390:	9826d13a 	srli	r19,r19,4
81116394:	10800003 	ldbu	r2,0(r2)
81116398:	b02cd13a 	srli	r22,r22,4
8111639c:	843fffc4 	addi	r16,r16,-1
811163a0:	1ce6b03a 	or	r19,r3,r19
811163a4:	80800005 	stb	r2,0(r16)
811163a8:	9d84b03a 	or	r2,r19,r22
811163ac:	103ff51e 	bne	r2,zero,81116384 <__reset+0xfb0f6384>
811163b0:	d8c02817 	ldw	r3,160(sp)
811163b4:	1c07c83a 	sub	r3,r3,r16
811163b8:	d8c02e15 	stw	r3,184(sp)
811163bc:	003ecc06 	br	81115ef0 <__reset+0xfb0f5ef0>
811163c0:	18c03fcc 	andi	r3,r3,255
811163c4:	183e9f26 	beq	r3,zero,81115e44 <__reset+0xfb0f5e44>
811163c8:	d9c02785 	stb	r7,158(sp)
811163cc:	003e9d06 	br	81115e44 <__reset+0xfb0f5e44>
811163d0:	00c00044 	movi	r3,1
811163d4:	01c00ac4 	movi	r7,43
811163d8:	ac400007 	ldb	r17,0(r21)
811163dc:	003d5e06 	br	81115958 <__reset+0xfb0f5958>
811163e0:	94800814 	ori	r18,r18,32
811163e4:	ac400007 	ldb	r17,0(r21)
811163e8:	003d5b06 	br	81115958 <__reset+0xfb0f5958>
811163ec:	d8c02d17 	ldw	r3,180(sp)
811163f0:	d8002785 	stb	zero,158(sp)
811163f4:	1c000017 	ldw	r16,0(r3)
811163f8:	1cc00104 	addi	r19,r3,4
811163fc:	80041926 	beq	r16,zero,81117464 <___vfprintf_internal_r+0x1c98>
81116400:	d9002917 	ldw	r4,164(sp)
81116404:	2003d016 	blt	r4,zero,81117348 <___vfprintf_internal_r+0x1b7c>
81116408:	200d883a 	mov	r6,r4
8111640c:	000b883a 	mov	r5,zero
81116410:	8009883a 	mov	r4,r16
81116414:	da003d15 	stw	r8,244(sp)
81116418:	111c6500 	call	8111c650 <memchr>
8111641c:	da003d17 	ldw	r8,244(sp)
81116420:	10045426 	beq	r2,zero,81117574 <___vfprintf_internal_r+0x1da8>
81116424:	1405c83a 	sub	r2,r2,r16
81116428:	d8802e15 	stw	r2,184(sp)
8111642c:	1003cc16 	blt	r2,zero,81117360 <___vfprintf_internal_r+0x1b94>
81116430:	df002783 	ldbu	fp,158(sp)
81116434:	d8802a15 	stw	r2,168(sp)
81116438:	dcc02d15 	stw	r19,180(sp)
8111643c:	d8002915 	stw	zero,164(sp)
81116440:	d8003215 	stw	zero,200(sp)
81116444:	003eb006 	br	81115f08 <__reset+0xfb0f5f08>
81116448:	18c03fcc 	andi	r3,r3,255
8111644c:	183f9b26 	beq	r3,zero,811162bc <__reset+0xfb0f62bc>
81116450:	d9c02785 	stb	r7,158(sp)
81116454:	003f9906 	br	811162bc <__reset+0xfb0f62bc>
81116458:	18c03fcc 	andi	r3,r3,255
8111645c:	1805551e 	bne	r3,zero,811179b4 <___vfprintf_internal_r+0x21e8>
81116460:	01604534 	movhi	r5,33044
81116464:	29791404 	addi	r5,r5,-7088
81116468:	d9403915 	stw	r5,228(sp)
8111646c:	9080080c 	andi	r2,r18,32
81116470:	103fae1e 	bne	r2,zero,8111632c <__reset+0xfb0f632c>
81116474:	9080040c 	andi	r2,r18,16
81116478:	1002de26 	beq	r2,zero,81116ff4 <___vfprintf_internal_r+0x1828>
8111647c:	d8c02d17 	ldw	r3,180(sp)
81116480:	002d883a 	mov	r22,zero
81116484:	1cc00017 	ldw	r19,0(r3)
81116488:	18c00104 	addi	r3,r3,4
8111648c:	d8c02d15 	stw	r3,180(sp)
81116490:	003fab06 	br	81116340 <__reset+0xfb0f6340>
81116494:	38803fcc 	andi	r2,r7,255
81116498:	1080201c 	xori	r2,r2,128
8111649c:	10bfe004 	addi	r2,r2,-128
811164a0:	1002d21e 	bne	r2,zero,81116fec <___vfprintf_internal_r+0x1820>
811164a4:	00c00044 	movi	r3,1
811164a8:	01c00804 	movi	r7,32
811164ac:	ac400007 	ldb	r17,0(r21)
811164b0:	003d2906 	br	81115958 <__reset+0xfb0f5958>
811164b4:	94800054 	ori	r18,r18,1
811164b8:	ac400007 	ldb	r17,0(r21)
811164bc:	003d2606 	br	81115958 <__reset+0xfb0f5958>
811164c0:	18c03fcc 	andi	r3,r3,255
811164c4:	183e0526 	beq	r3,zero,81115cdc <__reset+0xfb0f5cdc>
811164c8:	d9c02785 	stb	r7,158(sp)
811164cc:	003e0306 	br	81115cdc <__reset+0xfb0f5cdc>
811164d0:	94801014 	ori	r18,r18,64
811164d4:	ac400007 	ldb	r17,0(r21)
811164d8:	003d1f06 	br	81115958 <__reset+0xfb0f5958>
811164dc:	ac400007 	ldb	r17,0(r21)
811164e0:	8a438726 	beq	r17,r9,81117300 <___vfprintf_internal_r+0x1b34>
811164e4:	94800414 	ori	r18,r18,16
811164e8:	003d1b06 	br	81115958 <__reset+0xfb0f5958>
811164ec:	18c03fcc 	andi	r3,r3,255
811164f0:	1805341e 	bne	r3,zero,811179c4 <___vfprintf_internal_r+0x21f8>
811164f4:	9080080c 	andi	r2,r18,32
811164f8:	1002cd26 	beq	r2,zero,81117030 <___vfprintf_internal_r+0x1864>
811164fc:	d9402d17 	ldw	r5,180(sp)
81116500:	d9002f17 	ldw	r4,188(sp)
81116504:	28800017 	ldw	r2,0(r5)
81116508:	2007d7fa 	srai	r3,r4,31
8111650c:	29400104 	addi	r5,r5,4
81116510:	d9402d15 	stw	r5,180(sp)
81116514:	11000015 	stw	r4,0(r2)
81116518:	10c00115 	stw	r3,4(r2)
8111651c:	003ce506 	br	811158b4 <__reset+0xfb0f58b4>
81116520:	d8c02d17 	ldw	r3,180(sp)
81116524:	d9002d17 	ldw	r4,180(sp)
81116528:	d8002785 	stb	zero,158(sp)
8111652c:	18800017 	ldw	r2,0(r3)
81116530:	21000104 	addi	r4,r4,4
81116534:	00c00044 	movi	r3,1
81116538:	d8c02a15 	stw	r3,168(sp)
8111653c:	d8801405 	stb	r2,80(sp)
81116540:	d9002d15 	stw	r4,180(sp)
81116544:	d8c02e15 	stw	r3,184(sp)
81116548:	d8002915 	stw	zero,164(sp)
8111654c:	d8003215 	stw	zero,200(sp)
81116550:	dc001404 	addi	r16,sp,80
81116554:	0039883a 	mov	fp,zero
81116558:	003e7206 	br	81115f24 <__reset+0xfb0f5f24>
8111655c:	01204534 	movhi	r4,33044
81116560:	21391404 	addi	r4,r4,-7088
81116564:	0039883a 	mov	fp,zero
81116568:	d9003915 	stw	r4,228(sp)
8111656c:	04401e04 	movi	r17,120
81116570:	003f8206 	br	8111637c <__reset+0xfb0f637c>
81116574:	18c03fcc 	andi	r3,r3,255
81116578:	1805061e 	bne	r3,zero,81117994 <___vfprintf_internal_r+0x21c8>
8111657c:	883d9126 	beq	r17,zero,81115bc4 <__reset+0xfb0f5bc4>
81116580:	00c00044 	movi	r3,1
81116584:	d8c02a15 	stw	r3,168(sp)
81116588:	dc401405 	stb	r17,80(sp)
8111658c:	d8002785 	stb	zero,158(sp)
81116590:	003fec06 	br	81116544 <__reset+0xfb0f6544>
81116594:	01604534 	movhi	r5,33044
81116598:	29791404 	addi	r5,r5,-7088
8111659c:	d9403915 	stw	r5,228(sp)
811165a0:	d8c02d15 	stw	r3,180(sp)
811165a4:	1025883a 	mov	r18,r2
811165a8:	04401e04 	movi	r17,120
811165ac:	9d84b03a 	or	r2,r19,r22
811165b0:	1000fc1e 	bne	r2,zero,811169a4 <___vfprintf_internal_r+0x11d8>
811165b4:	0039883a 	mov	fp,zero
811165b8:	00800084 	movi	r2,2
811165bc:	10803fcc 	andi	r2,r2,255
811165c0:	00c00044 	movi	r3,1
811165c4:	10c20f26 	beq	r2,r3,81116e04 <___vfprintf_internal_r+0x1638>
811165c8:	00c00084 	movi	r3,2
811165cc:	10fd6326 	beq	r2,r3,81115b5c <__reset+0xfb0f5b5c>
811165d0:	003e2d06 	br	81115e88 <__reset+0xfb0f5e88>
811165d4:	d8c02017 	ldw	r3,128(sp)
811165d8:	003e9306 	br	81116028 <__reset+0xfb0f6028>
811165dc:	00801944 	movi	r2,101
811165e0:	14407e0e 	bge	r2,r17,811167dc <___vfprintf_internal_r+0x1010>
811165e4:	d9003617 	ldw	r4,216(sp)
811165e8:	d9403817 	ldw	r5,224(sp)
811165ec:	000d883a 	mov	r6,zero
811165f0:	000f883a 	mov	r7,zero
811165f4:	d8c03c15 	stw	r3,240(sp)
811165f8:	da003d15 	stw	r8,244(sp)
811165fc:	11262040 	call	81126204 <__eqdf2>
81116600:	d8c03c17 	ldw	r3,240(sp)
81116604:	da003d17 	ldw	r8,244(sp)
81116608:	1000f71e 	bne	r2,zero,811169e8 <___vfprintf_internal_r+0x121c>
8111660c:	d8801f17 	ldw	r2,124(sp)
81116610:	01204534 	movhi	r4,33044
81116614:	21391b04 	addi	r4,r4,-7060
81116618:	18c00044 	addi	r3,r3,1
8111661c:	10800044 	addi	r2,r2,1
81116620:	41000015 	stw	r4,0(r8)
81116624:	01000044 	movi	r4,1
81116628:	41000115 	stw	r4,4(r8)
8111662c:	d8c02015 	stw	r3,128(sp)
81116630:	d8801f15 	stw	r2,124(sp)
81116634:	010001c4 	movi	r4,7
81116638:	2082b816 	blt	r4,r2,8111711c <___vfprintf_internal_r+0x1950>
8111663c:	42000204 	addi	r8,r8,8
81116640:	d8802617 	ldw	r2,152(sp)
81116644:	d9403317 	ldw	r5,204(sp)
81116648:	11400216 	blt	r2,r5,81116654 <___vfprintf_internal_r+0xe88>
8111664c:	9080004c 	andi	r2,r18,1
81116650:	103ed526 	beq	r2,zero,811161a8 <__reset+0xfb0f61a8>
81116654:	d8803717 	ldw	r2,220(sp)
81116658:	d9003417 	ldw	r4,208(sp)
8111665c:	d9403717 	ldw	r5,220(sp)
81116660:	1887883a 	add	r3,r3,r2
81116664:	d8801f17 	ldw	r2,124(sp)
81116668:	41000015 	stw	r4,0(r8)
8111666c:	41400115 	stw	r5,4(r8)
81116670:	10800044 	addi	r2,r2,1
81116674:	d8c02015 	stw	r3,128(sp)
81116678:	d8801f15 	stw	r2,124(sp)
8111667c:	010001c4 	movi	r4,7
81116680:	20832916 	blt	r4,r2,81117328 <___vfprintf_internal_r+0x1b5c>
81116684:	42000204 	addi	r8,r8,8
81116688:	d8803317 	ldw	r2,204(sp)
8111668c:	143fffc4 	addi	r16,r2,-1
81116690:	043ec50e 	bge	zero,r16,811161a8 <__reset+0xfb0f61a8>
81116694:	04400404 	movi	r17,16
81116698:	d8801f17 	ldw	r2,124(sp)
8111669c:	8c00880e 	bge	r17,r16,811168c0 <___vfprintf_internal_r+0x10f4>
811166a0:	01604534 	movhi	r5,33044
811166a4:	29792384 	addi	r5,r5,-7026
811166a8:	d9402b15 	stw	r5,172(sp)
811166ac:	058001c4 	movi	r22,7
811166b0:	dcc02c17 	ldw	r19,176(sp)
811166b4:	00000306 	br	811166c4 <___vfprintf_internal_r+0xef8>
811166b8:	42000204 	addi	r8,r8,8
811166bc:	843ffc04 	addi	r16,r16,-16
811166c0:	8c00820e 	bge	r17,r16,811168cc <___vfprintf_internal_r+0x1100>
811166c4:	18c00404 	addi	r3,r3,16
811166c8:	10800044 	addi	r2,r2,1
811166cc:	45000015 	stw	r20,0(r8)
811166d0:	44400115 	stw	r17,4(r8)
811166d4:	d8c02015 	stw	r3,128(sp)
811166d8:	d8801f15 	stw	r2,124(sp)
811166dc:	b0bff60e 	bge	r22,r2,811166b8 <__reset+0xfb0f66b8>
811166e0:	d9801e04 	addi	r6,sp,120
811166e4:	b80b883a 	mov	r5,r23
811166e8:	9809883a 	mov	r4,r19
811166ec:	112185c0 	call	8112185c <__sprint_r>
811166f0:	103d3a1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
811166f4:	d8c02017 	ldw	r3,128(sp)
811166f8:	d8801f17 	ldw	r2,124(sp)
811166fc:	da000404 	addi	r8,sp,16
81116700:	003fee06 	br	811166bc <__reset+0xfb0f66bc>
81116704:	d9403117 	ldw	r5,196(sp)
81116708:	d8802a17 	ldw	r2,168(sp)
8111670c:	28adc83a 	sub	r22,r5,r2
81116710:	05be630e 	bge	zero,r22,811160a0 <__reset+0xfb0f60a0>
81116714:	07000404 	movi	fp,16
81116718:	d8801f17 	ldw	r2,124(sp)
8111671c:	e5838f0e 	bge	fp,r22,8111755c <___vfprintf_internal_r+0x1d90>
81116720:	01604534 	movhi	r5,33044
81116724:	29792384 	addi	r5,r5,-7026
81116728:	dc403015 	stw	r17,192(sp)
8111672c:	d9402b15 	stw	r5,172(sp)
81116730:	b023883a 	mov	r17,r22
81116734:	04c001c4 	movi	r19,7
81116738:	a82d883a 	mov	r22,r21
8111673c:	902b883a 	mov	r21,r18
81116740:	8025883a 	mov	r18,r16
81116744:	dc002c17 	ldw	r16,176(sp)
81116748:	00000306 	br	81116758 <___vfprintf_internal_r+0xf8c>
8111674c:	8c7ffc04 	addi	r17,r17,-16
81116750:	42000204 	addi	r8,r8,8
81116754:	e440110e 	bge	fp,r17,8111679c <___vfprintf_internal_r+0xfd0>
81116758:	18c00404 	addi	r3,r3,16
8111675c:	10800044 	addi	r2,r2,1
81116760:	45000015 	stw	r20,0(r8)
81116764:	47000115 	stw	fp,4(r8)
81116768:	d8c02015 	stw	r3,128(sp)
8111676c:	d8801f15 	stw	r2,124(sp)
81116770:	98bff60e 	bge	r19,r2,8111674c <__reset+0xfb0f674c>
81116774:	d9801e04 	addi	r6,sp,120
81116778:	b80b883a 	mov	r5,r23
8111677c:	8009883a 	mov	r4,r16
81116780:	112185c0 	call	8112185c <__sprint_r>
81116784:	103d151e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116788:	8c7ffc04 	addi	r17,r17,-16
8111678c:	d8c02017 	ldw	r3,128(sp)
81116790:	d8801f17 	ldw	r2,124(sp)
81116794:	da000404 	addi	r8,sp,16
81116798:	e47fef16 	blt	fp,r17,81116758 <__reset+0xfb0f6758>
8111679c:	9021883a 	mov	r16,r18
811167a0:	a825883a 	mov	r18,r21
811167a4:	b02b883a 	mov	r21,r22
811167a8:	882d883a 	mov	r22,r17
811167ac:	dc403017 	ldw	r17,192(sp)
811167b0:	d9002b17 	ldw	r4,172(sp)
811167b4:	1d87883a 	add	r3,r3,r22
811167b8:	10800044 	addi	r2,r2,1
811167bc:	41000015 	stw	r4,0(r8)
811167c0:	45800115 	stw	r22,4(r8)
811167c4:	d8c02015 	stw	r3,128(sp)
811167c8:	d8801f15 	stw	r2,124(sp)
811167cc:	010001c4 	movi	r4,7
811167d0:	20818e16 	blt	r4,r2,81116e0c <___vfprintf_internal_r+0x1640>
811167d4:	42000204 	addi	r8,r8,8
811167d8:	003e3106 	br	811160a0 <__reset+0xfb0f60a0>
811167dc:	d9403317 	ldw	r5,204(sp)
811167e0:	00800044 	movi	r2,1
811167e4:	18c00044 	addi	r3,r3,1
811167e8:	1141530e 	bge	r2,r5,81116d38 <___vfprintf_internal_r+0x156c>
811167ec:	dc401f17 	ldw	r17,124(sp)
811167f0:	00800044 	movi	r2,1
811167f4:	40800115 	stw	r2,4(r8)
811167f8:	8c400044 	addi	r17,r17,1
811167fc:	44000015 	stw	r16,0(r8)
81116800:	d8c02015 	stw	r3,128(sp)
81116804:	dc401f15 	stw	r17,124(sp)
81116808:	008001c4 	movi	r2,7
8111680c:	14416b16 	blt	r2,r17,81116dbc <___vfprintf_internal_r+0x15f0>
81116810:	42000204 	addi	r8,r8,8
81116814:	d8803717 	ldw	r2,220(sp)
81116818:	d9003417 	ldw	r4,208(sp)
8111681c:	8c400044 	addi	r17,r17,1
81116820:	10c7883a 	add	r3,r2,r3
81116824:	40800115 	stw	r2,4(r8)
81116828:	41000015 	stw	r4,0(r8)
8111682c:	d8c02015 	stw	r3,128(sp)
81116830:	dc401f15 	stw	r17,124(sp)
81116834:	008001c4 	movi	r2,7
81116838:	14416916 	blt	r2,r17,81116de0 <___vfprintf_internal_r+0x1614>
8111683c:	45800204 	addi	r22,r8,8
81116840:	d9003617 	ldw	r4,216(sp)
81116844:	d9403817 	ldw	r5,224(sp)
81116848:	000d883a 	mov	r6,zero
8111684c:	000f883a 	mov	r7,zero
81116850:	d8c03c15 	stw	r3,240(sp)
81116854:	11262040 	call	81126204 <__eqdf2>
81116858:	d8c03c17 	ldw	r3,240(sp)
8111685c:	1000bc26 	beq	r2,zero,81116b50 <___vfprintf_internal_r+0x1384>
81116860:	d9403317 	ldw	r5,204(sp)
81116864:	84000044 	addi	r16,r16,1
81116868:	8c400044 	addi	r17,r17,1
8111686c:	28bfffc4 	addi	r2,r5,-1
81116870:	1887883a 	add	r3,r3,r2
81116874:	b0800115 	stw	r2,4(r22)
81116878:	b4000015 	stw	r16,0(r22)
8111687c:	d8c02015 	stw	r3,128(sp)
81116880:	dc401f15 	stw	r17,124(sp)
81116884:	008001c4 	movi	r2,7
81116888:	14414316 	blt	r2,r17,81116d98 <___vfprintf_internal_r+0x15cc>
8111688c:	b5800204 	addi	r22,r22,8
81116890:	d9003a17 	ldw	r4,232(sp)
81116894:	df0022c4 	addi	fp,sp,139
81116898:	8c400044 	addi	r17,r17,1
8111689c:	20c7883a 	add	r3,r4,r3
811168a0:	b7000015 	stw	fp,0(r22)
811168a4:	b1000115 	stw	r4,4(r22)
811168a8:	d8c02015 	stw	r3,128(sp)
811168ac:	dc401f15 	stw	r17,124(sp)
811168b0:	008001c4 	movi	r2,7
811168b4:	14400e16 	blt	r2,r17,811168f0 <___vfprintf_internal_r+0x1124>
811168b8:	b2000204 	addi	r8,r22,8
811168bc:	003e3a06 	br	811161a8 <__reset+0xfb0f61a8>
811168c0:	01204534 	movhi	r4,33044
811168c4:	21392384 	addi	r4,r4,-7026
811168c8:	d9002b15 	stw	r4,172(sp)
811168cc:	d9002b17 	ldw	r4,172(sp)
811168d0:	1c07883a 	add	r3,r3,r16
811168d4:	44000115 	stw	r16,4(r8)
811168d8:	41000015 	stw	r4,0(r8)
811168dc:	10800044 	addi	r2,r2,1
811168e0:	d8c02015 	stw	r3,128(sp)
811168e4:	d8801f15 	stw	r2,124(sp)
811168e8:	010001c4 	movi	r4,7
811168ec:	20be2d0e 	bge	r4,r2,811161a4 <__reset+0xfb0f61a4>
811168f0:	d9002c17 	ldw	r4,176(sp)
811168f4:	d9801e04 	addi	r6,sp,120
811168f8:	b80b883a 	mov	r5,r23
811168fc:	112185c0 	call	8112185c <__sprint_r>
81116900:	103cb61e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116904:	d8c02017 	ldw	r3,128(sp)
81116908:	da000404 	addi	r8,sp,16
8111690c:	003e2606 	br	811161a8 <__reset+0xfb0f61a8>
81116910:	d9002c17 	ldw	r4,176(sp)
81116914:	d9801e04 	addi	r6,sp,120
81116918:	b80b883a 	mov	r5,r23
8111691c:	112185c0 	call	8112185c <__sprint_r>
81116920:	103e5d26 	beq	r2,zero,81116298 <__reset+0xfb0f6298>
81116924:	003cad06 	br	81115bdc <__reset+0xfb0f5bdc>
81116928:	d9002c17 	ldw	r4,176(sp)
8111692c:	d9801e04 	addi	r6,sp,120
81116930:	b80b883a 	mov	r5,r23
81116934:	112185c0 	call	8112185c <__sprint_r>
81116938:	103ca81e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
8111693c:	d8c02017 	ldw	r3,128(sp)
81116940:	da000404 	addi	r8,sp,16
81116944:	003e0b06 	br	81116174 <__reset+0xfb0f6174>
81116948:	d9002c17 	ldw	r4,176(sp)
8111694c:	d9801e04 	addi	r6,sp,120
81116950:	b80b883a 	mov	r5,r23
81116954:	112185c0 	call	8112185c <__sprint_r>
81116958:	103ca01e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
8111695c:	d8c02017 	ldw	r3,128(sp)
81116960:	da000404 	addi	r8,sp,16
81116964:	003dbd06 	br	8111605c <__reset+0xfb0f605c>
81116968:	d9002c17 	ldw	r4,176(sp)
8111696c:	d9801e04 	addi	r6,sp,120
81116970:	b80b883a 	mov	r5,r23
81116974:	112185c0 	call	8112185c <__sprint_r>
81116978:	103c981e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
8111697c:	d8c02017 	ldw	r3,128(sp)
81116980:	da000404 	addi	r8,sp,16
81116984:	003dc306 	br	81116094 <__reset+0xfb0f6094>
81116988:	d8802917 	ldw	r2,164(sp)
8111698c:	d8002785 	stb	zero,158(sp)
81116990:	103f0616 	blt	r2,zero,811165ac <__reset+0xfb0f65ac>
81116994:	00ffdfc4 	movi	r3,-129
81116998:	9d84b03a 	or	r2,r19,r22
8111699c:	90e4703a 	and	r18,r18,r3
811169a0:	103c6b26 	beq	r2,zero,81115b50 <__reset+0xfb0f5b50>
811169a4:	0039883a 	mov	fp,zero
811169a8:	003e7406 	br	8111637c <__reset+0xfb0f637c>
811169ac:	9080040c 	andi	r2,r18,16
811169b0:	1001b326 	beq	r2,zero,81117080 <___vfprintf_internal_r+0x18b4>
811169b4:	d9002d17 	ldw	r4,180(sp)
811169b8:	d9402917 	ldw	r5,164(sp)
811169bc:	d8002785 	stb	zero,158(sp)
811169c0:	20800104 	addi	r2,r4,4
811169c4:	24c00017 	ldw	r19,0(r4)
811169c8:	002d883a 	mov	r22,zero
811169cc:	2801b516 	blt	r5,zero,811170a4 <___vfprintf_internal_r+0x18d8>
811169d0:	00ffdfc4 	movi	r3,-129
811169d4:	d8802d15 	stw	r2,180(sp)
811169d8:	90e4703a 	and	r18,r18,r3
811169dc:	983d2726 	beq	r19,zero,81115e7c <__reset+0xfb0f5e7c>
811169e0:	0039883a 	mov	fp,zero
811169e4:	003d2a06 	br	81115e90 <__reset+0xfb0f5e90>
811169e8:	dc402617 	ldw	r17,152(sp)
811169ec:	0441d30e 	bge	zero,r17,8111713c <___vfprintf_internal_r+0x1970>
811169f0:	dc403217 	ldw	r17,200(sp)
811169f4:	d8803317 	ldw	r2,204(sp)
811169f8:	1440010e 	bge	r2,r17,81116a00 <___vfprintf_internal_r+0x1234>
811169fc:	1023883a 	mov	r17,r2
81116a00:	04400a0e 	bge	zero,r17,81116a2c <___vfprintf_internal_r+0x1260>
81116a04:	d8801f17 	ldw	r2,124(sp)
81116a08:	1c47883a 	add	r3,r3,r17
81116a0c:	44000015 	stw	r16,0(r8)
81116a10:	10800044 	addi	r2,r2,1
81116a14:	44400115 	stw	r17,4(r8)
81116a18:	d8c02015 	stw	r3,128(sp)
81116a1c:	d8801f15 	stw	r2,124(sp)
81116a20:	010001c4 	movi	r4,7
81116a24:	20826516 	blt	r4,r2,811173bc <___vfprintf_internal_r+0x1bf0>
81116a28:	42000204 	addi	r8,r8,8
81116a2c:	88026116 	blt	r17,zero,811173b4 <___vfprintf_internal_r+0x1be8>
81116a30:	d9003217 	ldw	r4,200(sp)
81116a34:	2463c83a 	sub	r17,r4,r17
81116a38:	04407b0e 	bge	zero,r17,81116c28 <___vfprintf_internal_r+0x145c>
81116a3c:	05800404 	movi	r22,16
81116a40:	d8801f17 	ldw	r2,124(sp)
81116a44:	b4419d0e 	bge	r22,r17,811170bc <___vfprintf_internal_r+0x18f0>
81116a48:	01204534 	movhi	r4,33044
81116a4c:	21392384 	addi	r4,r4,-7026
81116a50:	d9002b15 	stw	r4,172(sp)
81116a54:	070001c4 	movi	fp,7
81116a58:	dcc02c17 	ldw	r19,176(sp)
81116a5c:	00000306 	br	81116a6c <___vfprintf_internal_r+0x12a0>
81116a60:	42000204 	addi	r8,r8,8
81116a64:	8c7ffc04 	addi	r17,r17,-16
81116a68:	b441970e 	bge	r22,r17,811170c8 <___vfprintf_internal_r+0x18fc>
81116a6c:	18c00404 	addi	r3,r3,16
81116a70:	10800044 	addi	r2,r2,1
81116a74:	45000015 	stw	r20,0(r8)
81116a78:	45800115 	stw	r22,4(r8)
81116a7c:	d8c02015 	stw	r3,128(sp)
81116a80:	d8801f15 	stw	r2,124(sp)
81116a84:	e0bff60e 	bge	fp,r2,81116a60 <__reset+0xfb0f6a60>
81116a88:	d9801e04 	addi	r6,sp,120
81116a8c:	b80b883a 	mov	r5,r23
81116a90:	9809883a 	mov	r4,r19
81116a94:	112185c0 	call	8112185c <__sprint_r>
81116a98:	103c501e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116a9c:	d8c02017 	ldw	r3,128(sp)
81116aa0:	d8801f17 	ldw	r2,124(sp)
81116aa4:	da000404 	addi	r8,sp,16
81116aa8:	003fee06 	br	81116a64 <__reset+0xfb0f6a64>
81116aac:	d9002c17 	ldw	r4,176(sp)
81116ab0:	d9801e04 	addi	r6,sp,120
81116ab4:	b80b883a 	mov	r5,r23
81116ab8:	112185c0 	call	8112185c <__sprint_r>
81116abc:	103c471e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116ac0:	d8c02017 	ldw	r3,128(sp)
81116ac4:	df002787 	ldb	fp,158(sp)
81116ac8:	da000404 	addi	r8,sp,16
81116acc:	003d5606 	br	81116028 <__reset+0xfb0f6028>
81116ad0:	9080040c 	andi	r2,r18,16
81116ad4:	10016126 	beq	r2,zero,8111705c <___vfprintf_internal_r+0x1890>
81116ad8:	d8802d17 	ldw	r2,180(sp)
81116adc:	14c00017 	ldw	r19,0(r2)
81116ae0:	10800104 	addi	r2,r2,4
81116ae4:	d8802d15 	stw	r2,180(sp)
81116ae8:	982dd7fa 	srai	r22,r19,31
81116aec:	b005883a 	mov	r2,r22
81116af0:	003c8206 	br	81115cfc <__reset+0xfb0f5cfc>
81116af4:	9080040c 	andi	r2,r18,16
81116af8:	10003526 	beq	r2,zero,81116bd0 <___vfprintf_internal_r+0x1404>
81116afc:	d9402d17 	ldw	r5,180(sp)
81116b00:	d8c02917 	ldw	r3,164(sp)
81116b04:	d8002785 	stb	zero,158(sp)
81116b08:	28800104 	addi	r2,r5,4
81116b0c:	2cc00017 	ldw	r19,0(r5)
81116b10:	002d883a 	mov	r22,zero
81116b14:	18003716 	blt	r3,zero,81116bf4 <___vfprintf_internal_r+0x1428>
81116b18:	00ffdfc4 	movi	r3,-129
81116b1c:	d8802d15 	stw	r2,180(sp)
81116b20:	90e4703a 	and	r18,r18,r3
81116b24:	0039883a 	mov	fp,zero
81116b28:	983df326 	beq	r19,zero,811162f8 <__reset+0xfb0f62f8>
81116b2c:	00800244 	movi	r2,9
81116b30:	14fc7b36 	bltu	r2,r19,81115d20 <__reset+0xfb0f5d20>
81116b34:	d8c02817 	ldw	r3,160(sp)
81116b38:	dc001dc4 	addi	r16,sp,119
81116b3c:	9cc00c04 	addi	r19,r19,48
81116b40:	1c07c83a 	sub	r3,r3,r16
81116b44:	dcc01dc5 	stb	r19,119(sp)
81116b48:	d8c02e15 	stw	r3,184(sp)
81116b4c:	003ce806 	br	81115ef0 <__reset+0xfb0f5ef0>
81116b50:	d8803317 	ldw	r2,204(sp)
81116b54:	143fffc4 	addi	r16,r2,-1
81116b58:	043f4d0e 	bge	zero,r16,81116890 <__reset+0xfb0f6890>
81116b5c:	07000404 	movi	fp,16
81116b60:	e400810e 	bge	fp,r16,81116d68 <___vfprintf_internal_r+0x159c>
81116b64:	01604534 	movhi	r5,33044
81116b68:	29792384 	addi	r5,r5,-7026
81116b6c:	d9402b15 	stw	r5,172(sp)
81116b70:	01c001c4 	movi	r7,7
81116b74:	dcc02c17 	ldw	r19,176(sp)
81116b78:	00000306 	br	81116b88 <___vfprintf_internal_r+0x13bc>
81116b7c:	b5800204 	addi	r22,r22,8
81116b80:	843ffc04 	addi	r16,r16,-16
81116b84:	e4007b0e 	bge	fp,r16,81116d74 <___vfprintf_internal_r+0x15a8>
81116b88:	18c00404 	addi	r3,r3,16
81116b8c:	8c400044 	addi	r17,r17,1
81116b90:	b5000015 	stw	r20,0(r22)
81116b94:	b7000115 	stw	fp,4(r22)
81116b98:	d8c02015 	stw	r3,128(sp)
81116b9c:	dc401f15 	stw	r17,124(sp)
81116ba0:	3c7ff60e 	bge	r7,r17,81116b7c <__reset+0xfb0f6b7c>
81116ba4:	d9801e04 	addi	r6,sp,120
81116ba8:	b80b883a 	mov	r5,r23
81116bac:	9809883a 	mov	r4,r19
81116bb0:	d9c03c15 	stw	r7,240(sp)
81116bb4:	112185c0 	call	8112185c <__sprint_r>
81116bb8:	d9c03c17 	ldw	r7,240(sp)
81116bbc:	103c071e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116bc0:	d8c02017 	ldw	r3,128(sp)
81116bc4:	dc401f17 	ldw	r17,124(sp)
81116bc8:	dd800404 	addi	r22,sp,16
81116bcc:	003fec06 	br	81116b80 <__reset+0xfb0f6b80>
81116bd0:	9080100c 	andi	r2,r18,64
81116bd4:	d8002785 	stb	zero,158(sp)
81116bd8:	10010e26 	beq	r2,zero,81117014 <___vfprintf_internal_r+0x1848>
81116bdc:	d9002d17 	ldw	r4,180(sp)
81116be0:	d9402917 	ldw	r5,164(sp)
81116be4:	002d883a 	mov	r22,zero
81116be8:	20800104 	addi	r2,r4,4
81116bec:	24c0000b 	ldhu	r19,0(r4)
81116bf0:	283fc90e 	bge	r5,zero,81116b18 <__reset+0xfb0f6b18>
81116bf4:	d8802d15 	stw	r2,180(sp)
81116bf8:	0039883a 	mov	fp,zero
81116bfc:	9d84b03a 	or	r2,r19,r22
81116c00:	103c461e 	bne	r2,zero,81115d1c <__reset+0xfb0f5d1c>
81116c04:	00800044 	movi	r2,1
81116c08:	003e6c06 	br	811165bc <__reset+0xfb0f65bc>
81116c0c:	d9002c17 	ldw	r4,176(sp)
81116c10:	d9801e04 	addi	r6,sp,120
81116c14:	b80b883a 	mov	r5,r23
81116c18:	112185c0 	call	8112185c <__sprint_r>
81116c1c:	103bef1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116c20:	d8c02017 	ldw	r3,128(sp)
81116c24:	da000404 	addi	r8,sp,16
81116c28:	d9003217 	ldw	r4,200(sp)
81116c2c:	d8802617 	ldw	r2,152(sp)
81116c30:	d9403317 	ldw	r5,204(sp)
81116c34:	8123883a 	add	r17,r16,r4
81116c38:	11400216 	blt	r2,r5,81116c44 <___vfprintf_internal_r+0x1478>
81116c3c:	9100004c 	andi	r4,r18,1
81116c40:	20000d26 	beq	r4,zero,81116c78 <___vfprintf_internal_r+0x14ac>
81116c44:	d9003717 	ldw	r4,220(sp)
81116c48:	d9403417 	ldw	r5,208(sp)
81116c4c:	1907883a 	add	r3,r3,r4
81116c50:	d9001f17 	ldw	r4,124(sp)
81116c54:	41400015 	stw	r5,0(r8)
81116c58:	d9403717 	ldw	r5,220(sp)
81116c5c:	21000044 	addi	r4,r4,1
81116c60:	d8c02015 	stw	r3,128(sp)
81116c64:	41400115 	stw	r5,4(r8)
81116c68:	d9001f15 	stw	r4,124(sp)
81116c6c:	014001c4 	movi	r5,7
81116c70:	2901e816 	blt	r5,r4,81117414 <___vfprintf_internal_r+0x1c48>
81116c74:	42000204 	addi	r8,r8,8
81116c78:	d9003317 	ldw	r4,204(sp)
81116c7c:	8121883a 	add	r16,r16,r4
81116c80:	2085c83a 	sub	r2,r4,r2
81116c84:	8461c83a 	sub	r16,r16,r17
81116c88:	1400010e 	bge	r2,r16,81116c90 <___vfprintf_internal_r+0x14c4>
81116c8c:	1021883a 	mov	r16,r2
81116c90:	04000a0e 	bge	zero,r16,81116cbc <___vfprintf_internal_r+0x14f0>
81116c94:	d9001f17 	ldw	r4,124(sp)
81116c98:	1c07883a 	add	r3,r3,r16
81116c9c:	44400015 	stw	r17,0(r8)
81116ca0:	21000044 	addi	r4,r4,1
81116ca4:	44000115 	stw	r16,4(r8)
81116ca8:	d8c02015 	stw	r3,128(sp)
81116cac:	d9001f15 	stw	r4,124(sp)
81116cb0:	014001c4 	movi	r5,7
81116cb4:	2901fb16 	blt	r5,r4,811174a4 <___vfprintf_internal_r+0x1cd8>
81116cb8:	42000204 	addi	r8,r8,8
81116cbc:	8001f716 	blt	r16,zero,8111749c <___vfprintf_internal_r+0x1cd0>
81116cc0:	1421c83a 	sub	r16,r2,r16
81116cc4:	043d380e 	bge	zero,r16,811161a8 <__reset+0xfb0f61a8>
81116cc8:	04400404 	movi	r17,16
81116ccc:	d8801f17 	ldw	r2,124(sp)
81116cd0:	8c3efb0e 	bge	r17,r16,811168c0 <__reset+0xfb0f68c0>
81116cd4:	01604534 	movhi	r5,33044
81116cd8:	29792384 	addi	r5,r5,-7026
81116cdc:	d9402b15 	stw	r5,172(sp)
81116ce0:	058001c4 	movi	r22,7
81116ce4:	dcc02c17 	ldw	r19,176(sp)
81116ce8:	00000306 	br	81116cf8 <___vfprintf_internal_r+0x152c>
81116cec:	42000204 	addi	r8,r8,8
81116cf0:	843ffc04 	addi	r16,r16,-16
81116cf4:	8c3ef50e 	bge	r17,r16,811168cc <__reset+0xfb0f68cc>
81116cf8:	18c00404 	addi	r3,r3,16
81116cfc:	10800044 	addi	r2,r2,1
81116d00:	45000015 	stw	r20,0(r8)
81116d04:	44400115 	stw	r17,4(r8)
81116d08:	d8c02015 	stw	r3,128(sp)
81116d0c:	d8801f15 	stw	r2,124(sp)
81116d10:	b0bff60e 	bge	r22,r2,81116cec <__reset+0xfb0f6cec>
81116d14:	d9801e04 	addi	r6,sp,120
81116d18:	b80b883a 	mov	r5,r23
81116d1c:	9809883a 	mov	r4,r19
81116d20:	112185c0 	call	8112185c <__sprint_r>
81116d24:	103bad1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116d28:	d8c02017 	ldw	r3,128(sp)
81116d2c:	d8801f17 	ldw	r2,124(sp)
81116d30:	da000404 	addi	r8,sp,16
81116d34:	003fee06 	br	81116cf0 <__reset+0xfb0f6cf0>
81116d38:	9088703a 	and	r4,r18,r2
81116d3c:	203eab1e 	bne	r4,zero,811167ec <__reset+0xfb0f67ec>
81116d40:	dc401f17 	ldw	r17,124(sp)
81116d44:	40800115 	stw	r2,4(r8)
81116d48:	44000015 	stw	r16,0(r8)
81116d4c:	8c400044 	addi	r17,r17,1
81116d50:	d8c02015 	stw	r3,128(sp)
81116d54:	dc401f15 	stw	r17,124(sp)
81116d58:	008001c4 	movi	r2,7
81116d5c:	14400e16 	blt	r2,r17,81116d98 <___vfprintf_internal_r+0x15cc>
81116d60:	45800204 	addi	r22,r8,8
81116d64:	003eca06 	br	81116890 <__reset+0xfb0f6890>
81116d68:	01204534 	movhi	r4,33044
81116d6c:	21392384 	addi	r4,r4,-7026
81116d70:	d9002b15 	stw	r4,172(sp)
81116d74:	d8802b17 	ldw	r2,172(sp)
81116d78:	1c07883a 	add	r3,r3,r16
81116d7c:	8c400044 	addi	r17,r17,1
81116d80:	b0800015 	stw	r2,0(r22)
81116d84:	b4000115 	stw	r16,4(r22)
81116d88:	d8c02015 	stw	r3,128(sp)
81116d8c:	dc401f15 	stw	r17,124(sp)
81116d90:	008001c4 	movi	r2,7
81116d94:	147ebd0e 	bge	r2,r17,8111688c <__reset+0xfb0f688c>
81116d98:	d9002c17 	ldw	r4,176(sp)
81116d9c:	d9801e04 	addi	r6,sp,120
81116da0:	b80b883a 	mov	r5,r23
81116da4:	112185c0 	call	8112185c <__sprint_r>
81116da8:	103b8c1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116dac:	d8c02017 	ldw	r3,128(sp)
81116db0:	dc401f17 	ldw	r17,124(sp)
81116db4:	dd800404 	addi	r22,sp,16
81116db8:	003eb506 	br	81116890 <__reset+0xfb0f6890>
81116dbc:	d9002c17 	ldw	r4,176(sp)
81116dc0:	d9801e04 	addi	r6,sp,120
81116dc4:	b80b883a 	mov	r5,r23
81116dc8:	112185c0 	call	8112185c <__sprint_r>
81116dcc:	103b831e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116dd0:	d8c02017 	ldw	r3,128(sp)
81116dd4:	dc401f17 	ldw	r17,124(sp)
81116dd8:	da000404 	addi	r8,sp,16
81116ddc:	003e8d06 	br	81116814 <__reset+0xfb0f6814>
81116de0:	d9002c17 	ldw	r4,176(sp)
81116de4:	d9801e04 	addi	r6,sp,120
81116de8:	b80b883a 	mov	r5,r23
81116dec:	112185c0 	call	8112185c <__sprint_r>
81116df0:	103b7a1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116df4:	d8c02017 	ldw	r3,128(sp)
81116df8:	dc401f17 	ldw	r17,124(sp)
81116dfc:	dd800404 	addi	r22,sp,16
81116e00:	003e8f06 	br	81116840 <__reset+0xfb0f6840>
81116e04:	0027883a 	mov	r19,zero
81116e08:	003f4a06 	br	81116b34 <__reset+0xfb0f6b34>
81116e0c:	d9002c17 	ldw	r4,176(sp)
81116e10:	d9801e04 	addi	r6,sp,120
81116e14:	b80b883a 	mov	r5,r23
81116e18:	112185c0 	call	8112185c <__sprint_r>
81116e1c:	103b6f1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81116e20:	d8c02017 	ldw	r3,128(sp)
81116e24:	da000404 	addi	r8,sp,16
81116e28:	003c9d06 	br	811160a0 <__reset+0xfb0f60a0>
81116e2c:	04e7c83a 	sub	r19,zero,r19
81116e30:	9804c03a 	cmpne	r2,r19,zero
81116e34:	05adc83a 	sub	r22,zero,r22
81116e38:	b0adc83a 	sub	r22,r22,r2
81116e3c:	d8802917 	ldw	r2,164(sp)
81116e40:	07000b44 	movi	fp,45
81116e44:	df002785 	stb	fp,158(sp)
81116e48:	10017b16 	blt	r2,zero,81117438 <___vfprintf_internal_r+0x1c6c>
81116e4c:	00bfdfc4 	movi	r2,-129
81116e50:	90a4703a 	and	r18,r18,r2
81116e54:	003bb106 	br	81115d1c <__reset+0xfb0f5d1c>
81116e58:	d9003617 	ldw	r4,216(sp)
81116e5c:	d9403817 	ldw	r5,224(sp)
81116e60:	da003d15 	stw	r8,244(sp)
81116e64:	111dec00 	call	8111dec0 <__fpclassifyd>
81116e68:	da003d17 	ldw	r8,244(sp)
81116e6c:	1000f026 	beq	r2,zero,81117230 <___vfprintf_internal_r+0x1a64>
81116e70:	d9002917 	ldw	r4,164(sp)
81116e74:	05bff7c4 	movi	r22,-33
81116e78:	00bfffc4 	movi	r2,-1
81116e7c:	8dac703a 	and	r22,r17,r22
81116e80:	20820026 	beq	r4,r2,81117684 <___vfprintf_internal_r+0x1eb8>
81116e84:	008011c4 	movi	r2,71
81116e88:	b081f726 	beq	r22,r2,81117668 <___vfprintf_internal_r+0x1e9c>
81116e8c:	d9003817 	ldw	r4,224(sp)
81116e90:	90c04014 	ori	r3,r18,256
81116e94:	d8c02b15 	stw	r3,172(sp)
81116e98:	20021516 	blt	r4,zero,811176f0 <___vfprintf_internal_r+0x1f24>
81116e9c:	dcc03817 	ldw	r19,224(sp)
81116ea0:	d8002a05 	stb	zero,168(sp)
81116ea4:	00801984 	movi	r2,102
81116ea8:	8881f926 	beq	r17,r2,81117690 <___vfprintf_internal_r+0x1ec4>
81116eac:	00801184 	movi	r2,70
81116eb0:	88821c26 	beq	r17,r2,81117724 <___vfprintf_internal_r+0x1f58>
81116eb4:	00801144 	movi	r2,69
81116eb8:	b081ef26 	beq	r22,r2,81117678 <___vfprintf_internal_r+0x1eac>
81116ebc:	d8c02917 	ldw	r3,164(sp)
81116ec0:	d8802104 	addi	r2,sp,132
81116ec4:	d8800315 	stw	r2,12(sp)
81116ec8:	d9403617 	ldw	r5,216(sp)
81116ecc:	d8802504 	addi	r2,sp,148
81116ed0:	d9002c17 	ldw	r4,176(sp)
81116ed4:	d8800215 	stw	r2,8(sp)
81116ed8:	d8802604 	addi	r2,sp,152
81116edc:	d8c00015 	stw	r3,0(sp)
81116ee0:	d8800115 	stw	r2,4(sp)
81116ee4:	01c00084 	movi	r7,2
81116ee8:	980d883a 	mov	r6,r19
81116eec:	d8c03c15 	stw	r3,240(sp)
81116ef0:	da003d15 	stw	r8,244(sp)
81116ef4:	11197780 	call	81119778 <_dtoa_r>
81116ef8:	1021883a 	mov	r16,r2
81116efc:	008019c4 	movi	r2,103
81116f00:	d8c03c17 	ldw	r3,240(sp)
81116f04:	da003d17 	ldw	r8,244(sp)
81116f08:	88817126 	beq	r17,r2,811174d0 <___vfprintf_internal_r+0x1d04>
81116f0c:	008011c4 	movi	r2,71
81116f10:	88829226 	beq	r17,r2,8111795c <___vfprintf_internal_r+0x2190>
81116f14:	80f9883a 	add	fp,r16,r3
81116f18:	d9003617 	ldw	r4,216(sp)
81116f1c:	000d883a 	mov	r6,zero
81116f20:	000f883a 	mov	r7,zero
81116f24:	980b883a 	mov	r5,r19
81116f28:	da003d15 	stw	r8,244(sp)
81116f2c:	11262040 	call	81126204 <__eqdf2>
81116f30:	da003d17 	ldw	r8,244(sp)
81116f34:	10018d26 	beq	r2,zero,8111756c <___vfprintf_internal_r+0x1da0>
81116f38:	d8802117 	ldw	r2,132(sp)
81116f3c:	1700062e 	bgeu	r2,fp,81116f58 <___vfprintf_internal_r+0x178c>
81116f40:	01000c04 	movi	r4,48
81116f44:	10c00044 	addi	r3,r2,1
81116f48:	d8c02115 	stw	r3,132(sp)
81116f4c:	11000005 	stb	r4,0(r2)
81116f50:	d8802117 	ldw	r2,132(sp)
81116f54:	173ffb36 	bltu	r2,fp,81116f44 <__reset+0xfb0f6f44>
81116f58:	1405c83a 	sub	r2,r2,r16
81116f5c:	d8803315 	stw	r2,204(sp)
81116f60:	008011c4 	movi	r2,71
81116f64:	b0817626 	beq	r22,r2,81117540 <___vfprintf_internal_r+0x1d74>
81116f68:	00801944 	movi	r2,101
81116f6c:	1442810e 	bge	r2,r17,81117974 <___vfprintf_internal_r+0x21a8>
81116f70:	d8c02617 	ldw	r3,152(sp)
81116f74:	00801984 	movi	r2,102
81116f78:	d8c03215 	stw	r3,200(sp)
81116f7c:	8881fe26 	beq	r17,r2,81117778 <___vfprintf_internal_r+0x1fac>
81116f80:	d8c03217 	ldw	r3,200(sp)
81116f84:	d9003317 	ldw	r4,204(sp)
81116f88:	1901dd16 	blt	r3,r4,81117700 <___vfprintf_internal_r+0x1f34>
81116f8c:	9480004c 	andi	r18,r18,1
81116f90:	90022b1e 	bne	r18,zero,81117840 <___vfprintf_internal_r+0x2074>
81116f94:	1805883a 	mov	r2,r3
81116f98:	18028016 	blt	r3,zero,8111799c <___vfprintf_internal_r+0x21d0>
81116f9c:	d8c03217 	ldw	r3,200(sp)
81116fa0:	044019c4 	movi	r17,103
81116fa4:	d8c02e15 	stw	r3,184(sp)
81116fa8:	df002a07 	ldb	fp,168(sp)
81116fac:	e001531e 	bne	fp,zero,811174fc <___vfprintf_internal_r+0x1d30>
81116fb0:	df002783 	ldbu	fp,158(sp)
81116fb4:	d8802a15 	stw	r2,168(sp)
81116fb8:	dc802b17 	ldw	r18,172(sp)
81116fbc:	d8002915 	stw	zero,164(sp)
81116fc0:	003bd106 	br	81115f08 <__reset+0xfb0f5f08>
81116fc4:	d8802d17 	ldw	r2,180(sp)
81116fc8:	d8c02d17 	ldw	r3,180(sp)
81116fcc:	d9002d17 	ldw	r4,180(sp)
81116fd0:	10800017 	ldw	r2,0(r2)
81116fd4:	18c00117 	ldw	r3,4(r3)
81116fd8:	21000204 	addi	r4,r4,8
81116fdc:	d8803615 	stw	r2,216(sp)
81116fe0:	d8c03815 	stw	r3,224(sp)
81116fe4:	d9002d15 	stw	r4,180(sp)
81116fe8:	003b7506 	br	81115dc0 <__reset+0xfb0f5dc0>
81116fec:	ac400007 	ldb	r17,0(r21)
81116ff0:	003a5906 	br	81115958 <__reset+0xfb0f5958>
81116ff4:	9080100c 	andi	r2,r18,64
81116ff8:	1000a826 	beq	r2,zero,8111729c <___vfprintf_internal_r+0x1ad0>
81116ffc:	d9002d17 	ldw	r4,180(sp)
81117000:	002d883a 	mov	r22,zero
81117004:	24c0000b 	ldhu	r19,0(r4)
81117008:	21000104 	addi	r4,r4,4
8111700c:	d9002d15 	stw	r4,180(sp)
81117010:	003ccb06 	br	81116340 <__reset+0xfb0f6340>
81117014:	d8c02d17 	ldw	r3,180(sp)
81117018:	d9002917 	ldw	r4,164(sp)
8111701c:	002d883a 	mov	r22,zero
81117020:	18800104 	addi	r2,r3,4
81117024:	1cc00017 	ldw	r19,0(r3)
81117028:	203ebb0e 	bge	r4,zero,81116b18 <__reset+0xfb0f6b18>
8111702c:	003ef106 	br	81116bf4 <__reset+0xfb0f6bf4>
81117030:	9080040c 	andi	r2,r18,16
81117034:	1000921e 	bne	r2,zero,81117280 <___vfprintf_internal_r+0x1ab4>
81117038:	9480100c 	andi	r18,r18,64
8111703c:	90013926 	beq	r18,zero,81117524 <___vfprintf_internal_r+0x1d58>
81117040:	d9002d17 	ldw	r4,180(sp)
81117044:	d9402f17 	ldw	r5,188(sp)
81117048:	20800017 	ldw	r2,0(r4)
8111704c:	21000104 	addi	r4,r4,4
81117050:	d9002d15 	stw	r4,180(sp)
81117054:	1140000d 	sth	r5,0(r2)
81117058:	003a1606 	br	811158b4 <__reset+0xfb0f58b4>
8111705c:	9080100c 	andi	r2,r18,64
81117060:	10008026 	beq	r2,zero,81117264 <___vfprintf_internal_r+0x1a98>
81117064:	d8c02d17 	ldw	r3,180(sp)
81117068:	1cc0000f 	ldh	r19,0(r3)
8111706c:	18c00104 	addi	r3,r3,4
81117070:	d8c02d15 	stw	r3,180(sp)
81117074:	982dd7fa 	srai	r22,r19,31
81117078:	b005883a 	mov	r2,r22
8111707c:	003b1f06 	br	81115cfc <__reset+0xfb0f5cfc>
81117080:	9080100c 	andi	r2,r18,64
81117084:	d8002785 	stb	zero,158(sp)
81117088:	10008a1e 	bne	r2,zero,811172b4 <___vfprintf_internal_r+0x1ae8>
8111708c:	d9402d17 	ldw	r5,180(sp)
81117090:	d8c02917 	ldw	r3,164(sp)
81117094:	002d883a 	mov	r22,zero
81117098:	28800104 	addi	r2,r5,4
8111709c:	2cc00017 	ldw	r19,0(r5)
811170a0:	183e4b0e 	bge	r3,zero,811169d0 <__reset+0xfb0f69d0>
811170a4:	9d86b03a 	or	r3,r19,r22
811170a8:	d8802d15 	stw	r2,180(sp)
811170ac:	183e4c1e 	bne	r3,zero,811169e0 <__reset+0xfb0f69e0>
811170b0:	0039883a 	mov	fp,zero
811170b4:	0005883a 	mov	r2,zero
811170b8:	003d4006 	br	811165bc <__reset+0xfb0f65bc>
811170bc:	01604534 	movhi	r5,33044
811170c0:	29792384 	addi	r5,r5,-7026
811170c4:	d9402b15 	stw	r5,172(sp)
811170c8:	d9402b17 	ldw	r5,172(sp)
811170cc:	1c47883a 	add	r3,r3,r17
811170d0:	10800044 	addi	r2,r2,1
811170d4:	41400015 	stw	r5,0(r8)
811170d8:	44400115 	stw	r17,4(r8)
811170dc:	d8c02015 	stw	r3,128(sp)
811170e0:	d8801f15 	stw	r2,124(sp)
811170e4:	010001c4 	movi	r4,7
811170e8:	20bec816 	blt	r4,r2,81116c0c <__reset+0xfb0f6c0c>
811170ec:	42000204 	addi	r8,r8,8
811170f0:	003ecd06 	br	81116c28 <__reset+0xfb0f6c28>
811170f4:	d9002917 	ldw	r4,164(sp)
811170f8:	d8002785 	stb	zero,158(sp)
811170fc:	203d2d16 	blt	r4,zero,811165b4 <__reset+0xfb0f65b4>
81117100:	00bfdfc4 	movi	r2,-129
81117104:	90a4703a 	and	r18,r18,r2
81117108:	003a9106 	br	81115b50 <__reset+0xfb0f5b50>
8111710c:	01204534 	movhi	r4,33044
81117110:	21392384 	addi	r4,r4,-7026
81117114:	d9002b15 	stw	r4,172(sp)
81117118:	003c0c06 	br	8111614c <__reset+0xfb0f614c>
8111711c:	d9002c17 	ldw	r4,176(sp)
81117120:	d9801e04 	addi	r6,sp,120
81117124:	b80b883a 	mov	r5,r23
81117128:	112185c0 	call	8112185c <__sprint_r>
8111712c:	103aab1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81117130:	d8c02017 	ldw	r3,128(sp)
81117134:	da000404 	addi	r8,sp,16
81117138:	003d4106 	br	81116640 <__reset+0xfb0f6640>
8111713c:	d8801f17 	ldw	r2,124(sp)
81117140:	01604534 	movhi	r5,33044
81117144:	01000044 	movi	r4,1
81117148:	18c00044 	addi	r3,r3,1
8111714c:	10800044 	addi	r2,r2,1
81117150:	29791b04 	addi	r5,r5,-7060
81117154:	41000115 	stw	r4,4(r8)
81117158:	41400015 	stw	r5,0(r8)
8111715c:	d8c02015 	stw	r3,128(sp)
81117160:	d8801f15 	stw	r2,124(sp)
81117164:	010001c4 	movi	r4,7
81117168:	20805c16 	blt	r4,r2,811172dc <___vfprintf_internal_r+0x1b10>
8111716c:	42000204 	addi	r8,r8,8
81117170:	8800041e 	bne	r17,zero,81117184 <___vfprintf_internal_r+0x19b8>
81117174:	d8803317 	ldw	r2,204(sp)
81117178:	1000021e 	bne	r2,zero,81117184 <___vfprintf_internal_r+0x19b8>
8111717c:	9080004c 	andi	r2,r18,1
81117180:	103c0926 	beq	r2,zero,811161a8 <__reset+0xfb0f61a8>
81117184:	d9003717 	ldw	r4,220(sp)
81117188:	d8801f17 	ldw	r2,124(sp)
8111718c:	d9403417 	ldw	r5,208(sp)
81117190:	20c7883a 	add	r3,r4,r3
81117194:	10800044 	addi	r2,r2,1
81117198:	41000115 	stw	r4,4(r8)
8111719c:	41400015 	stw	r5,0(r8)
811171a0:	d8c02015 	stw	r3,128(sp)
811171a4:	d8801f15 	stw	r2,124(sp)
811171a8:	010001c4 	movi	r4,7
811171ac:	20812116 	blt	r4,r2,81117634 <___vfprintf_internal_r+0x1e68>
811171b0:	42000204 	addi	r8,r8,8
811171b4:	0463c83a 	sub	r17,zero,r17
811171b8:	0440730e 	bge	zero,r17,81117388 <___vfprintf_internal_r+0x1bbc>
811171bc:	05800404 	movi	r22,16
811171c0:	b440860e 	bge	r22,r17,811173dc <___vfprintf_internal_r+0x1c10>
811171c4:	01604534 	movhi	r5,33044
811171c8:	29792384 	addi	r5,r5,-7026
811171cc:	d9402b15 	stw	r5,172(sp)
811171d0:	070001c4 	movi	fp,7
811171d4:	dcc02c17 	ldw	r19,176(sp)
811171d8:	00000306 	br	811171e8 <___vfprintf_internal_r+0x1a1c>
811171dc:	42000204 	addi	r8,r8,8
811171e0:	8c7ffc04 	addi	r17,r17,-16
811171e4:	b440800e 	bge	r22,r17,811173e8 <___vfprintf_internal_r+0x1c1c>
811171e8:	18c00404 	addi	r3,r3,16
811171ec:	10800044 	addi	r2,r2,1
811171f0:	45000015 	stw	r20,0(r8)
811171f4:	45800115 	stw	r22,4(r8)
811171f8:	d8c02015 	stw	r3,128(sp)
811171fc:	d8801f15 	stw	r2,124(sp)
81117200:	e0bff60e 	bge	fp,r2,811171dc <__reset+0xfb0f71dc>
81117204:	d9801e04 	addi	r6,sp,120
81117208:	b80b883a 	mov	r5,r23
8111720c:	9809883a 	mov	r4,r19
81117210:	112185c0 	call	8112185c <__sprint_r>
81117214:	103a711e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81117218:	d8c02017 	ldw	r3,128(sp)
8111721c:	d8801f17 	ldw	r2,124(sp)
81117220:	da000404 	addi	r8,sp,16
81117224:	003fee06 	br	811171e0 <__reset+0xfb0f71e0>
81117228:	00bfffc4 	movi	r2,-1
8111722c:	003a6f06 	br	81115bec <__reset+0xfb0f5bec>
81117230:	008011c4 	movi	r2,71
81117234:	1440b816 	blt	r2,r17,81117518 <___vfprintf_internal_r+0x1d4c>
81117238:	04204534 	movhi	r16,33044
8111723c:	84390d04 	addi	r16,r16,-7116
81117240:	00c000c4 	movi	r3,3
81117244:	00bfdfc4 	movi	r2,-129
81117248:	d8c02a15 	stw	r3,168(sp)
8111724c:	90a4703a 	and	r18,r18,r2
81117250:	df002783 	ldbu	fp,158(sp)
81117254:	d8c02e15 	stw	r3,184(sp)
81117258:	d8002915 	stw	zero,164(sp)
8111725c:	d8003215 	stw	zero,200(sp)
81117260:	003b2906 	br	81115f08 <__reset+0xfb0f5f08>
81117264:	d9002d17 	ldw	r4,180(sp)
81117268:	24c00017 	ldw	r19,0(r4)
8111726c:	21000104 	addi	r4,r4,4
81117270:	d9002d15 	stw	r4,180(sp)
81117274:	982dd7fa 	srai	r22,r19,31
81117278:	b005883a 	mov	r2,r22
8111727c:	003a9f06 	br	81115cfc <__reset+0xfb0f5cfc>
81117280:	d9402d17 	ldw	r5,180(sp)
81117284:	d8c02f17 	ldw	r3,188(sp)
81117288:	28800017 	ldw	r2,0(r5)
8111728c:	29400104 	addi	r5,r5,4
81117290:	d9402d15 	stw	r5,180(sp)
81117294:	10c00015 	stw	r3,0(r2)
81117298:	00398606 	br	811158b4 <__reset+0xfb0f58b4>
8111729c:	d9402d17 	ldw	r5,180(sp)
811172a0:	002d883a 	mov	r22,zero
811172a4:	2cc00017 	ldw	r19,0(r5)
811172a8:	29400104 	addi	r5,r5,4
811172ac:	d9402d15 	stw	r5,180(sp)
811172b0:	003c2306 	br	81116340 <__reset+0xfb0f6340>
811172b4:	d8c02d17 	ldw	r3,180(sp)
811172b8:	d9002917 	ldw	r4,164(sp)
811172bc:	002d883a 	mov	r22,zero
811172c0:	18800104 	addi	r2,r3,4
811172c4:	1cc0000b 	ldhu	r19,0(r3)
811172c8:	203dc10e 	bge	r4,zero,811169d0 <__reset+0xfb0f69d0>
811172cc:	003f7506 	br	811170a4 <__reset+0xfb0f70a4>
811172d0:	04204534 	movhi	r16,33044
811172d4:	84390b04 	addi	r16,r16,-7124
811172d8:	003acc06 	br	81115e0c <__reset+0xfb0f5e0c>
811172dc:	d9002c17 	ldw	r4,176(sp)
811172e0:	d9801e04 	addi	r6,sp,120
811172e4:	b80b883a 	mov	r5,r23
811172e8:	112185c0 	call	8112185c <__sprint_r>
811172ec:	103a3b1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
811172f0:	dc402617 	ldw	r17,152(sp)
811172f4:	d8c02017 	ldw	r3,128(sp)
811172f8:	da000404 	addi	r8,sp,16
811172fc:	003f9c06 	br	81117170 <__reset+0xfb0f7170>
81117300:	ac400043 	ldbu	r17,1(r21)
81117304:	94800814 	ori	r18,r18,32
81117308:	ad400044 	addi	r21,r21,1
8111730c:	8c403fcc 	andi	r17,r17,255
81117310:	8c40201c 	xori	r17,r17,128
81117314:	8c7fe004 	addi	r17,r17,-128
81117318:	00398f06 	br	81115958 <__reset+0xfb0f5958>
8111731c:	d8c02d15 	stw	r3,180(sp)
81117320:	0039883a 	mov	fp,zero
81117324:	003e3506 	br	81116bfc <__reset+0xfb0f6bfc>
81117328:	d9002c17 	ldw	r4,176(sp)
8111732c:	d9801e04 	addi	r6,sp,120
81117330:	b80b883a 	mov	r5,r23
81117334:	112185c0 	call	8112185c <__sprint_r>
81117338:	103a281e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
8111733c:	d8c02017 	ldw	r3,128(sp)
81117340:	da000404 	addi	r8,sp,16
81117344:	003cd006 	br	81116688 <__reset+0xfb0f6688>
81117348:	8009883a 	mov	r4,r16
8111734c:	da003d15 	stw	r8,244(sp)
81117350:	11132f80 	call	811132f8 <strlen>
81117354:	d8802e15 	stw	r2,184(sp)
81117358:	da003d17 	ldw	r8,244(sp)
8111735c:	103c340e 	bge	r2,zero,81116430 <__reset+0xfb0f6430>
81117360:	0005883a 	mov	r2,zero
81117364:	003c3206 	br	81116430 <__reset+0xfb0f6430>
81117368:	d9002c17 	ldw	r4,176(sp)
8111736c:	d9801e04 	addi	r6,sp,120
81117370:	b80b883a 	mov	r5,r23
81117374:	112185c0 	call	8112185c <__sprint_r>
81117378:	103a181e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
8111737c:	d8c02017 	ldw	r3,128(sp)
81117380:	d8801f17 	ldw	r2,124(sp)
81117384:	da000404 	addi	r8,sp,16
81117388:	d9403317 	ldw	r5,204(sp)
8111738c:	10800044 	addi	r2,r2,1
81117390:	44000015 	stw	r16,0(r8)
81117394:	28c7883a 	add	r3,r5,r3
81117398:	003b7d06 	br	81116190 <__reset+0xfb0f6190>
8111739c:	01204534 	movhi	r4,33044
811173a0:	21392784 	addi	r4,r4,-7010
811173a4:	d9003515 	stw	r4,212(sp)
811173a8:	003b1406 	br	81115ffc <__reset+0xfb0f5ffc>
811173ac:	013fffc4 	movi	r4,-1
811173b0:	003a3506 	br	81115c88 <__reset+0xfb0f5c88>
811173b4:	0023883a 	mov	r17,zero
811173b8:	003d9d06 	br	81116a30 <__reset+0xfb0f6a30>
811173bc:	d9002c17 	ldw	r4,176(sp)
811173c0:	d9801e04 	addi	r6,sp,120
811173c4:	b80b883a 	mov	r5,r23
811173c8:	112185c0 	call	8112185c <__sprint_r>
811173cc:	103a031e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
811173d0:	d8c02017 	ldw	r3,128(sp)
811173d4:	da000404 	addi	r8,sp,16
811173d8:	003d9406 	br	81116a2c <__reset+0xfb0f6a2c>
811173dc:	01204534 	movhi	r4,33044
811173e0:	21392384 	addi	r4,r4,-7026
811173e4:	d9002b15 	stw	r4,172(sp)
811173e8:	d9002b17 	ldw	r4,172(sp)
811173ec:	1c47883a 	add	r3,r3,r17
811173f0:	10800044 	addi	r2,r2,1
811173f4:	41000015 	stw	r4,0(r8)
811173f8:	44400115 	stw	r17,4(r8)
811173fc:	d8c02015 	stw	r3,128(sp)
81117400:	d8801f15 	stw	r2,124(sp)
81117404:	010001c4 	movi	r4,7
81117408:	20bfd716 	blt	r4,r2,81117368 <__reset+0xfb0f7368>
8111740c:	42000204 	addi	r8,r8,8
81117410:	003fdd06 	br	81117388 <__reset+0xfb0f7388>
81117414:	d9002c17 	ldw	r4,176(sp)
81117418:	d9801e04 	addi	r6,sp,120
8111741c:	b80b883a 	mov	r5,r23
81117420:	112185c0 	call	8112185c <__sprint_r>
81117424:	1039ed1e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81117428:	d8802617 	ldw	r2,152(sp)
8111742c:	d8c02017 	ldw	r3,128(sp)
81117430:	da000404 	addi	r8,sp,16
81117434:	003e1006 	br	81116c78 <__reset+0xfb0f6c78>
81117438:	00800044 	movi	r2,1
8111743c:	10803fcc 	andi	r2,r2,255
81117440:	00c00044 	movi	r3,1
81117444:	10fa3526 	beq	r2,r3,81115d1c <__reset+0xfb0f5d1c>
81117448:	00c00084 	movi	r3,2
8111744c:	10fbcb26 	beq	r2,r3,8111637c <__reset+0xfb0f637c>
81117450:	003a8f06 	br	81115e90 <__reset+0xfb0f5e90>
81117454:	01204534 	movhi	r4,33044
81117458:	21392784 	addi	r4,r4,-7010
8111745c:	d9003515 	stw	r4,212(sp)
81117460:	003b7606 	br	8111623c <__reset+0xfb0f623c>
81117464:	d8802917 	ldw	r2,164(sp)
81117468:	00c00184 	movi	r3,6
8111746c:	1880012e 	bgeu	r3,r2,81117474 <___vfprintf_internal_r+0x1ca8>
81117470:	1805883a 	mov	r2,r3
81117474:	d8802e15 	stw	r2,184(sp)
81117478:	1000ef16 	blt	r2,zero,81117838 <___vfprintf_internal_r+0x206c>
8111747c:	04204534 	movhi	r16,33044
81117480:	d8802a15 	stw	r2,168(sp)
81117484:	dcc02d15 	stw	r19,180(sp)
81117488:	d8002915 	stw	zero,164(sp)
8111748c:	d8003215 	stw	zero,200(sp)
81117490:	84391904 	addi	r16,r16,-7068
81117494:	0039883a 	mov	fp,zero
81117498:	003aa206 	br	81115f24 <__reset+0xfb0f5f24>
8111749c:	0021883a 	mov	r16,zero
811174a0:	003e0706 	br	81116cc0 <__reset+0xfb0f6cc0>
811174a4:	d9002c17 	ldw	r4,176(sp)
811174a8:	d9801e04 	addi	r6,sp,120
811174ac:	b80b883a 	mov	r5,r23
811174b0:	112185c0 	call	8112185c <__sprint_r>
811174b4:	1039c91e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
811174b8:	d8802617 	ldw	r2,152(sp)
811174bc:	d9403317 	ldw	r5,204(sp)
811174c0:	d8c02017 	ldw	r3,128(sp)
811174c4:	da000404 	addi	r8,sp,16
811174c8:	2885c83a 	sub	r2,r5,r2
811174cc:	003dfb06 	br	81116cbc <__reset+0xfb0f6cbc>
811174d0:	9080004c 	andi	r2,r18,1
811174d4:	103e8f1e 	bne	r2,zero,81116f14 <__reset+0xfb0f6f14>
811174d8:	d8802117 	ldw	r2,132(sp)
811174dc:	003e9e06 	br	81116f58 <__reset+0xfb0f6f58>
811174e0:	1025883a 	mov	r18,r2
811174e4:	0039883a 	mov	fp,zero
811174e8:	00800084 	movi	r2,2
811174ec:	003fd306 	br	8111743c <__reset+0xfb0f743c>
811174f0:	07000b44 	movi	fp,45
811174f4:	df002785 	stb	fp,158(sp)
811174f8:	003a4006 	br	81115dfc <__reset+0xfb0f5dfc>
811174fc:	00c00b44 	movi	r3,45
81117500:	d8c02785 	stb	r3,158(sp)
81117504:	d8802a15 	stw	r2,168(sp)
81117508:	dc802b17 	ldw	r18,172(sp)
8111750c:	d8002915 	stw	zero,164(sp)
81117510:	07000b44 	movi	fp,45
81117514:	003a8006 	br	81115f18 <__reset+0xfb0f5f18>
81117518:	04204534 	movhi	r16,33044
8111751c:	84390e04 	addi	r16,r16,-7112
81117520:	003f4706 	br	81117240 <__reset+0xfb0f7240>
81117524:	d8c02d17 	ldw	r3,180(sp)
81117528:	d9002f17 	ldw	r4,188(sp)
8111752c:	18800017 	ldw	r2,0(r3)
81117530:	18c00104 	addi	r3,r3,4
81117534:	d8c02d15 	stw	r3,180(sp)
81117538:	11000015 	stw	r4,0(r2)
8111753c:	0038dd06 	br	811158b4 <__reset+0xfb0f58b4>
81117540:	dd802617 	ldw	r22,152(sp)
81117544:	00bfff44 	movi	r2,-3
81117548:	b0801c16 	blt	r22,r2,811175bc <___vfprintf_internal_r+0x1df0>
8111754c:	d9402917 	ldw	r5,164(sp)
81117550:	2d801a16 	blt	r5,r22,811175bc <___vfprintf_internal_r+0x1df0>
81117554:	dd803215 	stw	r22,200(sp)
81117558:	003e8906 	br	81116f80 <__reset+0xfb0f6f80>
8111755c:	01204534 	movhi	r4,33044
81117560:	21392384 	addi	r4,r4,-7026
81117564:	d9002b15 	stw	r4,172(sp)
81117568:	003c9106 	br	811167b0 <__reset+0xfb0f67b0>
8111756c:	e005883a 	mov	r2,fp
81117570:	003e7906 	br	81116f58 <__reset+0xfb0f6f58>
81117574:	d9402917 	ldw	r5,164(sp)
81117578:	df002783 	ldbu	fp,158(sp)
8111757c:	dcc02d15 	stw	r19,180(sp)
81117580:	d9402a15 	stw	r5,168(sp)
81117584:	d9402e15 	stw	r5,184(sp)
81117588:	d8002915 	stw	zero,164(sp)
8111758c:	d8003215 	stw	zero,200(sp)
81117590:	003a5d06 	br	81115f08 <__reset+0xfb0f5f08>
81117594:	9080004c 	andi	r2,r18,1
81117598:	0039883a 	mov	fp,zero
8111759c:	10000426 	beq	r2,zero,811175b0 <___vfprintf_internal_r+0x1de4>
811175a0:	00800c04 	movi	r2,48
811175a4:	dc001dc4 	addi	r16,sp,119
811175a8:	d8801dc5 	stb	r2,119(sp)
811175ac:	003b8006 	br	811163b0 <__reset+0xfb0f63b0>
811175b0:	d8002e15 	stw	zero,184(sp)
811175b4:	dc001e04 	addi	r16,sp,120
811175b8:	003a4d06 	br	81115ef0 <__reset+0xfb0f5ef0>
811175bc:	8c7fff84 	addi	r17,r17,-2
811175c0:	b5bfffc4 	addi	r22,r22,-1
811175c4:	dd802615 	stw	r22,152(sp)
811175c8:	dc4022c5 	stb	r17,139(sp)
811175cc:	b000bf16 	blt	r22,zero,811178cc <___vfprintf_internal_r+0x2100>
811175d0:	00800ac4 	movi	r2,43
811175d4:	d8802305 	stb	r2,140(sp)
811175d8:	00800244 	movi	r2,9
811175dc:	15807016 	blt	r2,r22,811177a0 <___vfprintf_internal_r+0x1fd4>
811175e0:	00800c04 	movi	r2,48
811175e4:	b5800c04 	addi	r22,r22,48
811175e8:	d8802345 	stb	r2,141(sp)
811175ec:	dd802385 	stb	r22,142(sp)
811175f0:	d88023c4 	addi	r2,sp,143
811175f4:	df0022c4 	addi	fp,sp,139
811175f8:	d8c03317 	ldw	r3,204(sp)
811175fc:	1739c83a 	sub	fp,r2,fp
81117600:	d9003317 	ldw	r4,204(sp)
81117604:	e0c7883a 	add	r3,fp,r3
81117608:	df003a15 	stw	fp,232(sp)
8111760c:	d8c02e15 	stw	r3,184(sp)
81117610:	00800044 	movi	r2,1
81117614:	1100b30e 	bge	r2,r4,811178e4 <___vfprintf_internal_r+0x2118>
81117618:	d8c02e17 	ldw	r3,184(sp)
8111761c:	18c00044 	addi	r3,r3,1
81117620:	d8c02e15 	stw	r3,184(sp)
81117624:	1805883a 	mov	r2,r3
81117628:	1800ac16 	blt	r3,zero,811178dc <___vfprintf_internal_r+0x2110>
8111762c:	d8003215 	stw	zero,200(sp)
81117630:	003e5d06 	br	81116fa8 <__reset+0xfb0f6fa8>
81117634:	d9002c17 	ldw	r4,176(sp)
81117638:	d9801e04 	addi	r6,sp,120
8111763c:	b80b883a 	mov	r5,r23
81117640:	112185c0 	call	8112185c <__sprint_r>
81117644:	1039651e 	bne	r2,zero,81115bdc <__reset+0xfb0f5bdc>
81117648:	dc402617 	ldw	r17,152(sp)
8111764c:	d8c02017 	ldw	r3,128(sp)
81117650:	d8801f17 	ldw	r2,124(sp)
81117654:	da000404 	addi	r8,sp,16
81117658:	003ed606 	br	811171b4 <__reset+0xfb0f71b4>
8111765c:	582b883a 	mov	r21,r11
81117660:	d8002915 	stw	zero,164(sp)
81117664:	0038bd06 	br	8111595c <__reset+0xfb0f595c>
81117668:	d8802917 	ldw	r2,164(sp)
8111766c:	103e071e 	bne	r2,zero,81116e8c <__reset+0xfb0f6e8c>
81117670:	dc002915 	stw	r16,164(sp)
81117674:	003e0506 	br	81116e8c <__reset+0xfb0f6e8c>
81117678:	d9002917 	ldw	r4,164(sp)
8111767c:	20c00044 	addi	r3,r4,1
81117680:	003e0f06 	br	81116ec0 <__reset+0xfb0f6ec0>
81117684:	01400184 	movi	r5,6
81117688:	d9402915 	stw	r5,164(sp)
8111768c:	003dff06 	br	81116e8c <__reset+0xfb0f6e8c>
81117690:	d8802104 	addi	r2,sp,132
81117694:	d8800315 	stw	r2,12(sp)
81117698:	d8802504 	addi	r2,sp,148
8111769c:	d8800215 	stw	r2,8(sp)
811176a0:	d8802604 	addi	r2,sp,152
811176a4:	d8800115 	stw	r2,4(sp)
811176a8:	d8802917 	ldw	r2,164(sp)
811176ac:	d9403617 	ldw	r5,216(sp)
811176b0:	d9002c17 	ldw	r4,176(sp)
811176b4:	d8800015 	stw	r2,0(sp)
811176b8:	01c000c4 	movi	r7,3
811176bc:	980d883a 	mov	r6,r19
811176c0:	da003d15 	stw	r8,244(sp)
811176c4:	11197780 	call	81119778 <_dtoa_r>
811176c8:	d8c02917 	ldw	r3,164(sp)
811176cc:	da003d17 	ldw	r8,244(sp)
811176d0:	1021883a 	mov	r16,r2
811176d4:	10f9883a 	add	fp,r2,r3
811176d8:	81000007 	ldb	r4,0(r16)
811176dc:	00800c04 	movi	r2,48
811176e0:	20805e26 	beq	r4,r2,8111785c <___vfprintf_internal_r+0x2090>
811176e4:	d8c02617 	ldw	r3,152(sp)
811176e8:	e0f9883a 	add	fp,fp,r3
811176ec:	003e0a06 	br	81116f18 <__reset+0xfb0f6f18>
811176f0:	00c00b44 	movi	r3,45
811176f4:	24e0003c 	xorhi	r19,r4,32768
811176f8:	d8c02a05 	stb	r3,168(sp)
811176fc:	003de906 	br	81116ea4 <__reset+0xfb0f6ea4>
81117700:	d8c03217 	ldw	r3,200(sp)
81117704:	00c07a0e 	bge	zero,r3,811178f0 <___vfprintf_internal_r+0x2124>
81117708:	00800044 	movi	r2,1
8111770c:	d9003317 	ldw	r4,204(sp)
81117710:	1105883a 	add	r2,r2,r4
81117714:	d8802e15 	stw	r2,184(sp)
81117718:	10004e16 	blt	r2,zero,81117854 <___vfprintf_internal_r+0x2088>
8111771c:	044019c4 	movi	r17,103
81117720:	003e2106 	br	81116fa8 <__reset+0xfb0f6fa8>
81117724:	d9002917 	ldw	r4,164(sp)
81117728:	d8802104 	addi	r2,sp,132
8111772c:	d8800315 	stw	r2,12(sp)
81117730:	d9000015 	stw	r4,0(sp)
81117734:	d8802504 	addi	r2,sp,148
81117738:	d9403617 	ldw	r5,216(sp)
8111773c:	d9002c17 	ldw	r4,176(sp)
81117740:	d8800215 	stw	r2,8(sp)
81117744:	d8802604 	addi	r2,sp,152
81117748:	d8800115 	stw	r2,4(sp)
8111774c:	01c000c4 	movi	r7,3
81117750:	980d883a 	mov	r6,r19
81117754:	da003d15 	stw	r8,244(sp)
81117758:	11197780 	call	81119778 <_dtoa_r>
8111775c:	d8c02917 	ldw	r3,164(sp)
81117760:	da003d17 	ldw	r8,244(sp)
81117764:	1021883a 	mov	r16,r2
81117768:	00801184 	movi	r2,70
8111776c:	80f9883a 	add	fp,r16,r3
81117770:	88bfd926 	beq	r17,r2,811176d8 <__reset+0xfb0f76d8>
81117774:	003de806 	br	81116f18 <__reset+0xfb0f6f18>
81117778:	d9002917 	ldw	r4,164(sp)
8111777c:	00c04d0e 	bge	zero,r3,811178b4 <___vfprintf_internal_r+0x20e8>
81117780:	2000441e 	bne	r4,zero,81117894 <___vfprintf_internal_r+0x20c8>
81117784:	9480004c 	andi	r18,r18,1
81117788:	9000421e 	bne	r18,zero,81117894 <___vfprintf_internal_r+0x20c8>
8111778c:	1805883a 	mov	r2,r3
81117790:	18007016 	blt	r3,zero,81117954 <___vfprintf_internal_r+0x2188>
81117794:	d8c03217 	ldw	r3,200(sp)
81117798:	d8c02e15 	stw	r3,184(sp)
8111779c:	003e0206 	br	81116fa8 <__reset+0xfb0f6fa8>
811177a0:	df0022c4 	addi	fp,sp,139
811177a4:	dc002915 	stw	r16,164(sp)
811177a8:	4027883a 	mov	r19,r8
811177ac:	e021883a 	mov	r16,fp
811177b0:	b009883a 	mov	r4,r22
811177b4:	01400284 	movi	r5,10
811177b8:	1124d340 	call	81124d34 <__modsi3>
811177bc:	10800c04 	addi	r2,r2,48
811177c0:	843fffc4 	addi	r16,r16,-1
811177c4:	b009883a 	mov	r4,r22
811177c8:	01400284 	movi	r5,10
811177cc:	80800005 	stb	r2,0(r16)
811177d0:	1124cb00 	call	81124cb0 <__divsi3>
811177d4:	102d883a 	mov	r22,r2
811177d8:	00800244 	movi	r2,9
811177dc:	15bff416 	blt	r2,r22,811177b0 <__reset+0xfb0f77b0>
811177e0:	9811883a 	mov	r8,r19
811177e4:	b0800c04 	addi	r2,r22,48
811177e8:	8027883a 	mov	r19,r16
811177ec:	997fffc4 	addi	r5,r19,-1
811177f0:	98bfffc5 	stb	r2,-1(r19)
811177f4:	dc002917 	ldw	r16,164(sp)
811177f8:	2f006a2e 	bgeu	r5,fp,811179a4 <___vfprintf_internal_r+0x21d8>
811177fc:	d9c02384 	addi	r7,sp,142
81117800:	3ccfc83a 	sub	r7,r7,r19
81117804:	d9002344 	addi	r4,sp,141
81117808:	e1cf883a 	add	r7,fp,r7
8111780c:	00000106 	br	81117814 <___vfprintf_internal_r+0x2048>
81117810:	28800003 	ldbu	r2,0(r5)
81117814:	20800005 	stb	r2,0(r4)
81117818:	21000044 	addi	r4,r4,1
8111781c:	29400044 	addi	r5,r5,1
81117820:	393ffb1e 	bne	r7,r4,81117810 <__reset+0xfb0f7810>
81117824:	d8802304 	addi	r2,sp,140
81117828:	14c5c83a 	sub	r2,r2,r19
8111782c:	d8c02344 	addi	r3,sp,141
81117830:	1885883a 	add	r2,r3,r2
81117834:	003f7006 	br	811175f8 <__reset+0xfb0f75f8>
81117838:	0005883a 	mov	r2,zero
8111783c:	003f0f06 	br	8111747c <__reset+0xfb0f747c>
81117840:	d8c03217 	ldw	r3,200(sp)
81117844:	18c00044 	addi	r3,r3,1
81117848:	d8c02e15 	stw	r3,184(sp)
8111784c:	1805883a 	mov	r2,r3
81117850:	183fb20e 	bge	r3,zero,8111771c <__reset+0xfb0f771c>
81117854:	0005883a 	mov	r2,zero
81117858:	003fb006 	br	8111771c <__reset+0xfb0f771c>
8111785c:	d9003617 	ldw	r4,216(sp)
81117860:	000d883a 	mov	r6,zero
81117864:	000f883a 	mov	r7,zero
81117868:	980b883a 	mov	r5,r19
8111786c:	d8c03c15 	stw	r3,240(sp)
81117870:	da003d15 	stw	r8,244(sp)
81117874:	11262040 	call	81126204 <__eqdf2>
81117878:	d8c03c17 	ldw	r3,240(sp)
8111787c:	da003d17 	ldw	r8,244(sp)
81117880:	103f9826 	beq	r2,zero,811176e4 <__reset+0xfb0f76e4>
81117884:	00800044 	movi	r2,1
81117888:	10c7c83a 	sub	r3,r2,r3
8111788c:	d8c02615 	stw	r3,152(sp)
81117890:	003f9506 	br	811176e8 <__reset+0xfb0f76e8>
81117894:	d9002917 	ldw	r4,164(sp)
81117898:	d8c03217 	ldw	r3,200(sp)
8111789c:	20800044 	addi	r2,r4,1
811178a0:	1885883a 	add	r2,r3,r2
811178a4:	d8802e15 	stw	r2,184(sp)
811178a8:	103dbf0e 	bge	r2,zero,81116fa8 <__reset+0xfb0f6fa8>
811178ac:	0005883a 	mov	r2,zero
811178b0:	003dbd06 	br	81116fa8 <__reset+0xfb0f6fa8>
811178b4:	2000211e 	bne	r4,zero,8111793c <___vfprintf_internal_r+0x2170>
811178b8:	9480004c 	andi	r18,r18,1
811178bc:	90001f1e 	bne	r18,zero,8111793c <___vfprintf_internal_r+0x2170>
811178c0:	00800044 	movi	r2,1
811178c4:	d8802e15 	stw	r2,184(sp)
811178c8:	003db706 	br	81116fa8 <__reset+0xfb0f6fa8>
811178cc:	00800b44 	movi	r2,45
811178d0:	05adc83a 	sub	r22,zero,r22
811178d4:	d8802305 	stb	r2,140(sp)
811178d8:	003f3f06 	br	811175d8 <__reset+0xfb0f75d8>
811178dc:	0005883a 	mov	r2,zero
811178e0:	003f5206 	br	8111762c <__reset+0xfb0f762c>
811178e4:	90a4703a 	and	r18,r18,r2
811178e8:	903f4e26 	beq	r18,zero,81117624 <__reset+0xfb0f7624>
811178ec:	003f4a06 	br	81117618 <__reset+0xfb0f7618>
811178f0:	00800084 	movi	r2,2
811178f4:	10c5c83a 	sub	r2,r2,r3
811178f8:	003f8406 	br	8111770c <__reset+0xfb0f770c>
811178fc:	d8802d17 	ldw	r2,180(sp)
81117900:	d9002d17 	ldw	r4,180(sp)
81117904:	ac400043 	ldbu	r17,1(r21)
81117908:	10800017 	ldw	r2,0(r2)
8111790c:	582b883a 	mov	r21,r11
81117910:	d8802915 	stw	r2,164(sp)
81117914:	20800104 	addi	r2,r4,4
81117918:	d9002917 	ldw	r4,164(sp)
8111791c:	d8802d15 	stw	r2,180(sp)
81117920:	203e7a0e 	bge	r4,zero,8111730c <__reset+0xfb0f730c>
81117924:	8c403fcc 	andi	r17,r17,255
81117928:	00bfffc4 	movi	r2,-1
8111792c:	8c40201c 	xori	r17,r17,128
81117930:	d8802915 	stw	r2,164(sp)
81117934:	8c7fe004 	addi	r17,r17,-128
81117938:	00380706 	br	81115958 <__reset+0xfb0f5958>
8111793c:	d8c02917 	ldw	r3,164(sp)
81117940:	18c00084 	addi	r3,r3,2
81117944:	d8c02e15 	stw	r3,184(sp)
81117948:	1805883a 	mov	r2,r3
8111794c:	183d960e 	bge	r3,zero,81116fa8 <__reset+0xfb0f6fa8>
81117950:	003fd606 	br	811178ac <__reset+0xfb0f78ac>
81117954:	0005883a 	mov	r2,zero
81117958:	003f8e06 	br	81117794 <__reset+0xfb0f7794>
8111795c:	9080004c 	andi	r2,r18,1
81117960:	103f811e 	bne	r2,zero,81117768 <__reset+0xfb0f7768>
81117964:	d8802117 	ldw	r2,132(sp)
81117968:	1405c83a 	sub	r2,r2,r16
8111796c:	d8803315 	stw	r2,204(sp)
81117970:	b47ef326 	beq	r22,r17,81117540 <__reset+0xfb0f7540>
81117974:	dd802617 	ldw	r22,152(sp)
81117978:	003f1106 	br	811175c0 <__reset+0xfb0f75c0>
8111797c:	d9c02785 	stb	r7,158(sp)
81117980:	00390406 	br	81115d94 <__reset+0xfb0f5d94>
81117984:	d9c02785 	stb	r7,158(sp)
81117988:	0038d306 	br	81115cd8 <__reset+0xfb0f5cd8>
8111798c:	d9c02785 	stb	r7,158(sp)
81117990:	003a6106 	br	81116318 <__reset+0xfb0f6318>
81117994:	d9c02785 	stb	r7,158(sp)
81117998:	003af806 	br	8111657c <__reset+0xfb0f657c>
8111799c:	0005883a 	mov	r2,zero
811179a0:	003d7e06 	br	81116f9c <__reset+0xfb0f6f9c>
811179a4:	d8802344 	addi	r2,sp,141
811179a8:	003f1306 	br	811175f8 <__reset+0xfb0f75f8>
811179ac:	d9c02785 	stb	r7,158(sp)
811179b0:	00392306 	br	81115e40 <__reset+0xfb0f5e40>
811179b4:	d9c02785 	stb	r7,158(sp)
811179b8:	003aa906 	br	81116460 <__reset+0xfb0f6460>
811179bc:	d9c02785 	stb	r7,158(sp)
811179c0:	003a3d06 	br	811162b8 <__reset+0xfb0f62b8>
811179c4:	d9c02785 	stb	r7,158(sp)
811179c8:	003aca06 	br	811164f4 <__reset+0xfb0f64f4>

811179cc <__vfprintf_internal>:
811179cc:	00a04534 	movhi	r2,33044
811179d0:	10821504 	addi	r2,r2,2132
811179d4:	300f883a 	mov	r7,r6
811179d8:	280d883a 	mov	r6,r5
811179dc:	200b883a 	mov	r5,r4
811179e0:	11000017 	ldw	r4,0(r2)
811179e4:	11157cc1 	jmpi	811157cc <___vfprintf_internal_r>

811179e8 <__sbprintf>:
811179e8:	defee204 	addi	sp,sp,-1144
811179ec:	de00012e 	bgeu	sp,et,811179f4 <__sbprintf+0xc>
811179f0:	003b68fa 	trap	3
811179f4:	2880030b 	ldhu	r2,12(r5)
811179f8:	2ac01917 	ldw	r11,100(r5)
811179fc:	2a80038b 	ldhu	r10,14(r5)
81117a00:	2a400717 	ldw	r9,28(r5)
81117a04:	2a000917 	ldw	r8,36(r5)
81117a08:	00c10004 	movi	r3,1024
81117a0c:	dc011a15 	stw	r16,1128(sp)
81117a10:	10bfff4c 	andi	r2,r2,65533
81117a14:	2821883a 	mov	r16,r5
81117a18:	d8cb883a 	add	r5,sp,r3
81117a1c:	dc811c15 	stw	r18,1136(sp)
81117a20:	dc411b15 	stw	r17,1132(sp)
81117a24:	dfc11d15 	stw	ra,1140(sp)
81117a28:	2025883a 	mov	r18,r4
81117a2c:	d881030d 	sth	r2,1036(sp)
81117a30:	dac11915 	stw	r11,1124(sp)
81117a34:	da81038d 	sth	r10,1038(sp)
81117a38:	da410715 	stw	r9,1052(sp)
81117a3c:	da010915 	stw	r8,1060(sp)
81117a40:	dec10015 	stw	sp,1024(sp)
81117a44:	dec10415 	stw	sp,1040(sp)
81117a48:	d8c10215 	stw	r3,1032(sp)
81117a4c:	d8c10515 	stw	r3,1044(sp)
81117a50:	d8010615 	stw	zero,1048(sp)
81117a54:	11157cc0 	call	811157cc <___vfprintf_internal_r>
81117a58:	1023883a 	mov	r17,r2
81117a5c:	10000416 	blt	r2,zero,81117a70 <__sbprintf+0x88>
81117a60:	d9410004 	addi	r5,sp,1024
81117a64:	9009883a 	mov	r4,r18
81117a68:	111b02c0 	call	8111b02c <_fflush_r>
81117a6c:	10000d1e 	bne	r2,zero,81117aa4 <__sbprintf+0xbc>
81117a70:	d881030b 	ldhu	r2,1036(sp)
81117a74:	1080100c 	andi	r2,r2,64
81117a78:	10000326 	beq	r2,zero,81117a88 <__sbprintf+0xa0>
81117a7c:	8080030b 	ldhu	r2,12(r16)
81117a80:	10801014 	ori	r2,r2,64
81117a84:	8080030d 	sth	r2,12(r16)
81117a88:	8805883a 	mov	r2,r17
81117a8c:	dfc11d17 	ldw	ra,1140(sp)
81117a90:	dc811c17 	ldw	r18,1136(sp)
81117a94:	dc411b17 	ldw	r17,1132(sp)
81117a98:	dc011a17 	ldw	r16,1128(sp)
81117a9c:	dec11e04 	addi	sp,sp,1144
81117aa0:	f800283a 	ret
81117aa4:	047fffc4 	movi	r17,-1
81117aa8:	003ff106 	br	81117a70 <__reset+0xfb0f7a70>

81117aac <__svfscanf_r>:
81117aac:	deff4b04 	addi	sp,sp,-724
81117ab0:	de00012e 	bgeu	sp,et,81117ab8 <__svfscanf_r+0xc>
81117ab4:	003b68fa 	trap	3
81117ab8:	2880030b 	ldhu	r2,12(r5)
81117abc:	df00b315 	stw	fp,716(sp)
81117ac0:	dd80b115 	stw	r22,708(sp)
81117ac4:	dfc0b415 	stw	ra,720(sp)
81117ac8:	ddc0b215 	stw	r23,712(sp)
81117acc:	dd40b015 	stw	r21,704(sp)
81117ad0:	dd00af15 	stw	r20,700(sp)
81117ad4:	dcc0ae15 	stw	r19,696(sp)
81117ad8:	dc80ad15 	stw	r18,692(sp)
81117adc:	dc40ac15 	stw	r17,688(sp)
81117ae0:	dc00ab15 	stw	r16,684(sp)
81117ae4:	10c8000c 	andi	r3,r2,8192
81117ae8:	d9c09c15 	stw	r7,624(sp)
81117aec:	2839883a 	mov	fp,r5
81117af0:	202d883a 	mov	r22,r4
81117af4:	1800061e 	bne	r3,zero,81117b10 <__svfscanf_r+0x64>
81117af8:	29001917 	ldw	r4,100(r5)
81117afc:	00f7ffc4 	movi	r3,-8193
81117b00:	10880014 	ori	r2,r2,8192
81117b04:	20c6703a 	and	r3,r4,r3
81117b08:	2880030d 	sth	r2,12(r5)
81117b0c:	28c01915 	stw	r3,100(r5)
81117b10:	30800003 	ldbu	r2,0(r6)
81117b14:	0021883a 	mov	r16,zero
81117b18:	05e04534 	movhi	r23,33044
81117b1c:	d800a115 	stw	zero,644(sp)
81117b20:	d8009e15 	stw	zero,632(sp)
81117b24:	d800a015 	stw	zero,640(sp)
81117b28:	d8809b15 	stw	r2,620(sp)
81117b2c:	bdc21304 	addi	r23,r23,2124
81117b30:	8025883a 	mov	r18,r16
81117b34:	35000044 	addi	r20,r6,1
81117b38:	10001e26 	beq	r2,zero,81117bb4 <__svfscanf_r+0x108>
81117b3c:	b9c00017 	ldw	r7,0(r23)
81117b40:	3887883a 	add	r3,r7,r2
81117b44:	18c00043 	ldbu	r3,1(r3)
81117b48:	18c0020c 	andi	r3,r3,8
81117b4c:	18001b26 	beq	r3,zero,81117bbc <__svfscanf_r+0x110>
81117b50:	e0800117 	ldw	r2,4(fp)
81117b54:	00800e0e 	bge	zero,r2,81117b90 <__svfscanf_r+0xe4>
81117b58:	e0c00017 	ldw	r3,0(fp)
81117b5c:	b9000017 	ldw	r4,0(r23)
81117b60:	18800003 	ldbu	r2,0(r3)
81117b64:	2085883a 	add	r2,r4,r2
81117b68:	10800043 	ldbu	r2,1(r2)
81117b6c:	1080020c 	andi	r2,r2,8
81117b70:	10000b26 	beq	r2,zero,81117ba0 <__svfscanf_r+0xf4>
81117b74:	e0800117 	ldw	r2,4(fp)
81117b78:	18c00044 	addi	r3,r3,1
81117b7c:	e0c00015 	stw	r3,0(fp)
81117b80:	10bfffc4 	addi	r2,r2,-1
81117b84:	e0800115 	stw	r2,4(fp)
81117b88:	94800044 	addi	r18,r18,1
81117b8c:	00bff216 	blt	zero,r2,81117b58 <__reset+0xfb0f7b58>
81117b90:	e00b883a 	mov	r5,fp
81117b94:	b009883a 	mov	r4,r22
81117b98:	1112dd00 	call	81112dd0 <__srefill_r>
81117b9c:	103fee26 	beq	r2,zero,81117b58 <__reset+0xfb0f7b58>
81117ba0:	a00d883a 	mov	r6,r20
81117ba4:	30800003 	ldbu	r2,0(r6)
81117ba8:	35000044 	addi	r20,r6,1
81117bac:	d8809b15 	stw	r2,620(sp)
81117bb0:	103fe21e 	bne	r2,zero,81117b3c <__reset+0xfb0f7b3c>
81117bb4:	d880a017 	ldw	r2,640(sp)
81117bb8:	00009906 	br	81117e20 <__svfscanf_r+0x374>
81117bbc:	00c00944 	movi	r3,37
81117bc0:	10c0881e 	bne	r2,r3,81117de4 <__svfscanf_r+0x338>
81117bc4:	30c00043 	ldbu	r3,1(r6)
81117bc8:	0023883a 	mov	r17,zero
81117bcc:	0027883a 	mov	r19,zero
81117bd0:	01001e04 	movi	r4,120
81117bd4:	01401b04 	movi	r5,108
81117bd8:	a1800044 	addi	r6,r20,1
81117bdc:	20c0a236 	bltu	r4,r3,81117e68 <__svfscanf_r+0x3bc>
81117be0:	180490ba 	slli	r2,r3,2
81117be4:	02204474 	movhi	r8,33041
81117be8:	421efe04 	addi	r8,r8,31736
81117bec:	1205883a 	add	r2,r2,r8
81117bf0:	10800017 	ldw	r2,0(r2)
81117bf4:	1000683a 	jmp	r2
81117bf8:	81117e1c 	xori	r4,r16,17912
81117bfc:	81117e68 	cmpgeui	r4,r16,17913
81117c00:	81117e68 	cmpgeui	r4,r16,17913
81117c04:	81117e68 	cmpgeui	r4,r16,17913
81117c08:	81117e68 	cmpgeui	r4,r16,17913
81117c0c:	81117e68 	cmpgeui	r4,r16,17913
81117c10:	81117e68 	cmpgeui	r4,r16,17913
81117c14:	81117e68 	cmpgeui	r4,r16,17913
81117c18:	81117e68 	cmpgeui	r4,r16,17913
81117c1c:	81117e68 	cmpgeui	r4,r16,17913
81117c20:	81117e68 	cmpgeui	r4,r16,17913
81117c24:	81117e68 	cmpgeui	r4,r16,17913
81117c28:	81117e68 	cmpgeui	r4,r16,17913
81117c2c:	81117e68 	cmpgeui	r4,r16,17913
81117c30:	81117e68 	cmpgeui	r4,r16,17913
81117c34:	81117e68 	cmpgeui	r4,r16,17913
81117c38:	81117e68 	cmpgeui	r4,r16,17913
81117c3c:	81117e68 	cmpgeui	r4,r16,17913
81117c40:	81117e68 	cmpgeui	r4,r16,17913
81117c44:	81117e68 	cmpgeui	r4,r16,17913
81117c48:	81117e68 	cmpgeui	r4,r16,17913
81117c4c:	81117e68 	cmpgeui	r4,r16,17913
81117c50:	81117e68 	cmpgeui	r4,r16,17913
81117c54:	81117e68 	cmpgeui	r4,r16,17913
81117c58:	81117e68 	cmpgeui	r4,r16,17913
81117c5c:	81117e68 	cmpgeui	r4,r16,17913
81117c60:	81117e68 	cmpgeui	r4,r16,17913
81117c64:	81117e68 	cmpgeui	r4,r16,17913
81117c68:	81117e68 	cmpgeui	r4,r16,17913
81117c6c:	81117e68 	cmpgeui	r4,r16,17913
81117c70:	81117e68 	cmpgeui	r4,r16,17913
81117c74:	81117e68 	cmpgeui	r4,r16,17913
81117c78:	81117e68 	cmpgeui	r4,r16,17913
81117c7c:	81117e68 	cmpgeui	r4,r16,17913
81117c80:	81117e68 	cmpgeui	r4,r16,17913
81117c84:	81117e68 	cmpgeui	r4,r16,17913
81117c88:	81117e68 	cmpgeui	r4,r16,17913
81117c8c:	81117ddc 	xori	r4,r16,17911
81117c90:	81117e68 	cmpgeui	r4,r16,17913
81117c94:	81117e68 	cmpgeui	r4,r16,17913
81117c98:	81117e68 	cmpgeui	r4,r16,17913
81117c9c:	81117e68 	cmpgeui	r4,r16,17913
81117ca0:	81117e50 	cmplti	r4,r16,17913
81117ca4:	81117e68 	cmpgeui	r4,r16,17913
81117ca8:	81117e68 	cmpgeui	r4,r16,17913
81117cac:	81117e68 	cmpgeui	r4,r16,17913
81117cb0:	81117e68 	cmpgeui	r4,r16,17913
81117cb4:	81117e68 	cmpgeui	r4,r16,17913
81117cb8:	81117f84 	addi	r4,r16,17918
81117cbc:	81117f84 	addi	r4,r16,17918
81117cc0:	81117f84 	addi	r4,r16,17918
81117cc4:	81117f84 	addi	r4,r16,17918
81117cc8:	81117f84 	addi	r4,r16,17918
81117ccc:	81117f84 	addi	r4,r16,17918
81117cd0:	81117f84 	addi	r4,r16,17918
81117cd4:	81117f84 	addi	r4,r16,17918
81117cd8:	81117f84 	addi	r4,r16,17918
81117cdc:	81117f84 	addi	r4,r16,17918
81117ce0:	81117e68 	cmpgeui	r4,r16,17913
81117ce4:	81117e68 	cmpgeui	r4,r16,17913
81117ce8:	81117e68 	cmpgeui	r4,r16,17913
81117cec:	81117e68 	cmpgeui	r4,r16,17913
81117cf0:	81117e68 	cmpgeui	r4,r16,17913
81117cf4:	81117e68 	cmpgeui	r4,r16,17913
81117cf8:	81117e68 	cmpgeui	r4,r16,17913
81117cfc:	81117e68 	cmpgeui	r4,r16,17913
81117d00:	81117e68 	cmpgeui	r4,r16,17913
81117d04:	81117e68 	cmpgeui	r4,r16,17913
81117d08:	81117f58 	cmpnei	r4,r16,17917
81117d0c:	81118008 	cmpgei	r4,r16,17920
81117d10:	81117e68 	cmpgeui	r4,r16,17913
81117d14:	81118008 	cmpgei	r4,r16,17920
81117d18:	81117e68 	cmpgeui	r4,r16,17913
81117d1c:	81117e68 	cmpgeui	r4,r16,17913
81117d20:	81117e68 	cmpgeui	r4,r16,17913
81117d24:	81117e68 	cmpgeui	r4,r16,17913
81117d28:	81117ff4 	orhi	r4,r16,17919
81117d2c:	81117e68 	cmpgeui	r4,r16,17913
81117d30:	81117e68 	cmpgeui	r4,r16,17913
81117d34:	81117fc8 	cmpgei	r4,r16,17919
81117d38:	81117e68 	cmpgeui	r4,r16,17913
81117d3c:	81117e68 	cmpgeui	r4,r16,17913
81117d40:	81117e68 	cmpgeui	r4,r16,17913
81117d44:	81117e68 	cmpgeui	r4,r16,17913
81117d48:	81117e68 	cmpgeui	r4,r16,17913
81117d4c:	81117e68 	cmpgeui	r4,r16,17913
81117d50:	81117e68 	cmpgeui	r4,r16,17913
81117d54:	81117e68 	cmpgeui	r4,r16,17913
81117d58:	81117fa0 	cmpeqi	r4,r16,17918
81117d5c:	81117e68 	cmpgeui	r4,r16,17913
81117d60:	81117e68 	cmpgeui	r4,r16,17913
81117d64:	8111813c 	xorhi	r4,r16,17924
81117d68:	81117e68 	cmpgeui	r4,r16,17913
81117d6c:	81117e68 	cmpgeui	r4,r16,17913
81117d70:	81117e68 	cmpgeui	r4,r16,17913
81117d74:	81117e68 	cmpgeui	r4,r16,17913
81117d78:	81117e68 	cmpgeui	r4,r16,17913
81117d7c:	81117e68 	cmpgeui	r4,r16,17913
81117d80:	81117e68 	cmpgeui	r4,r16,17913
81117d84:	811180c0 	call	8811180c <__reset+0x20f180c>
81117d88:	81118098 	cmpnei	r4,r16,17922
81117d8c:	81118008 	cmpgei	r4,r16,17920
81117d90:	81118008 	cmpgei	r4,r16,17920
81117d94:	81118008 	cmpgei	r4,r16,17920
81117d98:	81118084 	addi	r4,r16,17922
81117d9c:	811181c8 	cmpgei	r4,r16,17927
81117da0:	81117e68 	cmpgeui	r4,r16,17913
81117da4:	81117e68 	cmpgeui	r4,r16,17913
81117da8:	81118070 	cmpltui	r4,r16,17921
81117dac:	81117e68 	cmpgeui	r4,r16,17913
81117db0:	81118040 	call	88111804 <__reset+0x20f1804>
81117db4:	8111801c 	xori	r4,r16,17920
81117db8:	81117f2c 	andhi	r4,r16,17916
81117dbc:	81117e68 	cmpgeui	r4,r16,17913
81117dc0:	81117e68 	cmpgeui	r4,r16,17913
81117dc4:	81117f18 	cmpnei	r4,r16,17916
81117dc8:	81117e68 	cmpgeui	r4,r16,17913
81117dcc:	81117ea0 	cmpeqi	r4,r16,17914
81117dd0:	81117e68 	cmpgeui	r4,r16,17913
81117dd4:	81117e68 	cmpgeui	r4,r16,17913
81117dd8:	81117fa0 	cmpeqi	r4,r16,17918
81117ddc:	d9809d15 	stw	r6,628(sp)
81117de0:	3029883a 	mov	r20,r6
81117de4:	e0800117 	ldw	r2,4(fp)
81117de8:	0081aa0e 	bge	zero,r2,81118494 <__svfscanf_r+0x9e8>
81117dec:	e0800017 	ldw	r2,0(fp)
81117df0:	a0ffffc3 	ldbu	r3,-1(r20)
81117df4:	11000003 	ldbu	r4,0(r2)
81117df8:	20ff6e1e 	bne	r4,r3,81117bb4 <__reset+0xfb0f7bb4>
81117dfc:	e0c00117 	ldw	r3,4(fp)
81117e00:	10800044 	addi	r2,r2,1
81117e04:	e0800015 	stw	r2,0(fp)
81117e08:	18bfffc4 	addi	r2,r3,-1
81117e0c:	e0800115 	stw	r2,4(fp)
81117e10:	94800044 	addi	r18,r18,1
81117e14:	a00d883a 	mov	r6,r20
81117e18:	003f6206 	br	81117ba4 <__reset+0xfb0f7ba4>
81117e1c:	00bfffc4 	movi	r2,-1
81117e20:	dfc0b417 	ldw	ra,720(sp)
81117e24:	df00b317 	ldw	fp,716(sp)
81117e28:	ddc0b217 	ldw	r23,712(sp)
81117e2c:	dd80b117 	ldw	r22,708(sp)
81117e30:	dd40b017 	ldw	r21,704(sp)
81117e34:	dd00af17 	ldw	r20,700(sp)
81117e38:	dcc0ae17 	ldw	r19,696(sp)
81117e3c:	dc80ad17 	ldw	r18,692(sp)
81117e40:	dc40ac17 	ldw	r17,688(sp)
81117e44:	dc00ab17 	ldw	r16,684(sp)
81117e48:	dec0b504 	addi	sp,sp,724
81117e4c:	f800283a 	ret
81117e50:	a0800043 	ldbu	r2,1(r20)
81117e54:	3029883a 	mov	r20,r6
81117e58:	8c400414 	ori	r17,r17,16
81117e5c:	10c03fcc 	andi	r3,r2,255
81117e60:	a1800044 	addi	r6,r20,1
81117e64:	20ff5e2e 	bgeu	r4,r3,81117be0 <__reset+0xfb0f7be0>
81117e68:	38c7883a 	add	r3,r7,r3
81117e6c:	18800043 	ldbu	r2,1(r3)
81117e70:	d9809d15 	stw	r6,628(sp)
81117e74:	00c00044 	movi	r3,1
81117e78:	108000cc 	andi	r2,r2,3
81117e7c:	10c18f26 	beq	r2,r3,811184bc <__svfscanf_r+0xa10>
81117e80:	e0800117 	ldw	r2,4(fp)
81117e84:	00808716 	blt	zero,r2,811180a4 <__svfscanf_r+0x5f8>
81117e88:	e00b883a 	mov	r5,fp
81117e8c:	b009883a 	mov	r4,r22
81117e90:	1112dd00 	call	81112dd0 <__srefill_r>
81117e94:	1001431e 	bne	r2,zero,811183a4 <__svfscanf_r+0x8f8>
81117e98:	b9c00017 	ldw	r7,0(r23)
81117e9c:	00008106 	br	811180a4 <__svfscanf_r+0x5f8>
81117ea0:	e0800117 	ldw	r2,4(fp)
81117ea4:	d9809d15 	stw	r6,628(sp)
81117ea8:	0081a30e 	bge	zero,r2,81118538 <__svfscanf_r+0xa8c>
81117eac:	00a044b4 	movhi	r2,33042
81117eb0:	10bed704 	addi	r2,r2,-1188
81117eb4:	02000284 	movi	r8,10
81117eb8:	d880a115 	stw	r2,644(sp)
81117ebc:	da009e15 	stw	r8,632(sp)
81117ec0:	050000c4 	movi	r20,3
81117ec4:	e0c00017 	ldw	r3,0(fp)
81117ec8:	00000206 	br	81117ed4 <__svfscanf_r+0x428>
81117ecc:	18c00044 	addi	r3,r3,1
81117ed0:	e0c00015 	stw	r3,0(fp)
81117ed4:	19000003 	ldbu	r4,0(r3)
81117ed8:	20803fcc 	andi	r2,r4,255
81117edc:	3885883a 	add	r2,r7,r2
81117ee0:	10800043 	ldbu	r2,1(r2)
81117ee4:	1140020c 	andi	r5,r2,8
81117ee8:	2801ab26 	beq	r5,zero,81118598 <__svfscanf_r+0xaec>
81117eec:	e0800117 	ldw	r2,4(fp)
81117ef0:	94800044 	addi	r18,r18,1
81117ef4:	10bfffc4 	addi	r2,r2,-1
81117ef8:	e0800115 	stw	r2,4(fp)
81117efc:	00bff316 	blt	zero,r2,81117ecc <__reset+0xfb0f7ecc>
81117f00:	e00b883a 	mov	r5,fp
81117f04:	b009883a 	mov	r4,r22
81117f08:	1112dd00 	call	81112dd0 <__srefill_r>
81117f0c:	1001251e 	bne	r2,zero,811183a4 <__svfscanf_r+0x8f8>
81117f10:	b9c00017 	ldw	r7,0(r23)
81117f14:	003feb06 	br	81117ec4 <__reset+0xfb0f7ec4>
81117f18:	e0800117 	ldw	r2,4(fp)
81117f1c:	d9809d15 	stw	r6,628(sp)
81117f20:	00818b0e 	bge	zero,r2,81118550 <__svfscanf_r+0xaa4>
81117f24:	05000084 	movi	r20,2
81117f28:	003fe606 	br	81117ec4 <__reset+0xfb0f7ec4>
81117f2c:	e0800117 	ldw	r2,4(fp)
81117f30:	d9809d15 	stw	r6,628(sp)
81117f34:	8c408814 	ori	r17,r17,544
81117f38:	00801d0e 	bge	zero,r2,81117fb0 <__svfscanf_r+0x504>
81117f3c:	00a044b4 	movhi	r2,33042
81117f40:	10bed704 	addi	r2,r2,-1188
81117f44:	02000404 	movi	r8,16
81117f48:	d880a115 	stw	r2,644(sp)
81117f4c:	da009e15 	stw	r8,632(sp)
81117f50:	050000c4 	movi	r20,3
81117f54:	003fdb06 	br	81117ec4 <__reset+0xfb0f7ec4>
81117f58:	e0800117 	ldw	r2,4(fp)
81117f5c:	d9809d15 	stw	r6,628(sp)
81117f60:	8c400054 	ori	r17,r17,1
81117f64:	00bfc80e 	bge	zero,r2,81117e88 <__reset+0xfb0f7e88>
81117f68:	00e04474 	movhi	r3,33041
81117f6c:	18cce404 	addi	r3,r3,13200
81117f70:	02000284 	movi	r8,10
81117f74:	d8c0a115 	stw	r3,644(sp)
81117f78:	da009e15 	stw	r8,632(sp)
81117f7c:	050000c4 	movi	r20,3
81117f80:	003fd006 	br	81117ec4 <__reset+0xfb0f7ec4>
81117f84:	9cc002a4 	muli	r19,r19,10
81117f88:	a0800043 	ldbu	r2,1(r20)
81117f8c:	3029883a 	mov	r20,r6
81117f90:	98e7883a 	add	r19,r19,r3
81117f94:	9cfff404 	addi	r19,r19,-48
81117f98:	10c03fcc 	andi	r3,r2,255
81117f9c:	003f0e06 	br	81117bd8 <__reset+0xfb0f7bd8>
81117fa0:	e0800117 	ldw	r2,4(fp)
81117fa4:	d9809d15 	stw	r6,628(sp)
81117fa8:	8c408014 	ori	r17,r17,512
81117fac:	00bfe316 	blt	zero,r2,81117f3c <__reset+0xfb0f7f3c>
81117fb0:	e00b883a 	mov	r5,fp
81117fb4:	b009883a 	mov	r4,r22
81117fb8:	1112dd00 	call	81112dd0 <__srefill_r>
81117fbc:	1000f91e 	bne	r2,zero,811183a4 <__svfscanf_r+0x8f8>
81117fc0:	b9c00017 	ldw	r7,0(r23)
81117fc4:	003fdd06 	br	81117f3c <__reset+0xfb0f7f3c>
81117fc8:	e0800117 	ldw	r2,4(fp)
81117fcc:	d9809d15 	stw	r6,628(sp)
81117fd0:	8c400054 	ori	r17,r17,1
81117fd4:	0080140e 	bge	zero,r2,81118028 <__svfscanf_r+0x57c>
81117fd8:	00a044b4 	movhi	r2,33042
81117fdc:	10bed704 	addi	r2,r2,-1188
81117fe0:	02000204 	movi	r8,8
81117fe4:	d880a115 	stw	r2,644(sp)
81117fe8:	da009e15 	stw	r8,632(sp)
81117fec:	050000c4 	movi	r20,3
81117ff0:	003fb406 	br	81117ec4 <__reset+0xfb0f7ec4>
81117ff4:	a0800043 	ldbu	r2,1(r20)
81117ff8:	8c400094 	ori	r17,r17,2
81117ffc:	3029883a 	mov	r20,r6
81118000:	10c03fcc 	andi	r3,r2,255
81118004:	003ef406 	br	81117bd8 <__reset+0xfb0f7bd8>
81118008:	e0800117 	ldw	r2,4(fp)
8111800c:	d9809d15 	stw	r6,628(sp)
81118010:	0081420e 	bge	zero,r2,8111851c <__svfscanf_r+0xa70>
81118014:	05000104 	movi	r20,4
81118018:	003faa06 	br	81117ec4 <__reset+0xfb0f7ec4>
8111801c:	e0800117 	ldw	r2,4(fp)
81118020:	d9809d15 	stw	r6,628(sp)
81118024:	00bfec16 	blt	zero,r2,81117fd8 <__reset+0xfb0f7fd8>
81118028:	e00b883a 	mov	r5,fp
8111802c:	b009883a 	mov	r4,r22
81118030:	1112dd00 	call	81112dd0 <__srefill_r>
81118034:	1000db1e 	bne	r2,zero,811183a4 <__svfscanf_r+0x8f8>
81118038:	b9c00017 	ldw	r7,0(r23)
8111803c:	003fe606 	br	81117fd8 <__reset+0xfb0f7fd8>
81118040:	d9809d15 	stw	r6,628(sp)
81118044:	8880040c 	andi	r2,r17,16
81118048:	10009c1e 	bne	r2,zero,811182bc <__svfscanf_r+0x810>
8111804c:	8880010c 	andi	r2,r17,4
81118050:	10011e26 	beq	r2,zero,811184cc <__svfscanf_r+0xa20>
81118054:	da009c17 	ldw	r8,624(sp)
81118058:	3029883a 	mov	r20,r6
8111805c:	40800017 	ldw	r2,0(r8)
81118060:	42000104 	addi	r8,r8,4
81118064:	da009c15 	stw	r8,624(sp)
81118068:	1480000d 	sth	r18,0(r2)
8111806c:	003ecc06 	br	81117ba0 <__reset+0xfb0f7ba0>
81118070:	a0c00043 	ldbu	r3,1(r20)
81118074:	19410c26 	beq	r3,r5,811184a8 <__svfscanf_r+0x9fc>
81118078:	8c400054 	ori	r17,r17,1
8111807c:	3029883a 	mov	r20,r6
81118080:	003ed506 	br	81117bd8 <__reset+0xfb0f7bd8>
81118084:	a0800043 	ldbu	r2,1(r20)
81118088:	8c400114 	ori	r17,r17,4
8111808c:	3029883a 	mov	r20,r6
81118090:	10c03fcc 	andi	r3,r2,255
81118094:	003ed006 	br	81117bd8 <__reset+0xfb0f7bd8>
81118098:	e0800117 	ldw	r2,4(fp)
8111809c:	d9809d15 	stw	r6,628(sp)
811180a0:	00bf790e 	bge	zero,r2,81117e88 <__reset+0xfb0f7e88>
811180a4:	00a04474 	movhi	r2,33041
811180a8:	108ce404 	addi	r2,r2,13200
811180ac:	02000284 	movi	r8,10
811180b0:	d880a115 	stw	r2,644(sp)
811180b4:	da009e15 	stw	r8,632(sp)
811180b8:	050000c4 	movi	r20,3
811180bc:	003f8106 	br	81117ec4 <__reset+0xfb0f7ec4>
811180c0:	e0800117 	ldw	r2,4(fp)
811180c4:	d9809d15 	stw	r6,628(sp)
811180c8:	0080c40e 	bge	zero,r2,811183dc <__svfscanf_r+0x930>
811180cc:	9800011e 	bne	r19,zero,811180d4 <__svfscanf_r+0x628>
811180d0:	04c00044 	movi	r19,1
811180d4:	8880004c 	andi	r2,r17,1
811180d8:	1000441e 	bne	r2,zero,811181ec <__svfscanf_r+0x740>
811180dc:	8c40040c 	andi	r17,r17,16
811180e0:	8800da26 	beq	r17,zero,8111844c <__svfscanf_r+0x9a0>
811180e4:	0021883a 	mov	r16,zero
811180e8:	00000806 	br	8111810c <__svfscanf_r+0x660>
811180ec:	1887883a 	add	r3,r3,r2
811180f0:	e00b883a 	mov	r5,fp
811180f4:	b009883a 	mov	r4,r22
811180f8:	e0c00015 	stw	r3,0(fp)
811180fc:	80a1883a 	add	r16,r16,r2
81118100:	98a7c83a 	sub	r19,r19,r2
81118104:	1112dd00 	call	81112dd0 <__srefill_r>
81118108:	1000ca1e 	bne	r2,zero,81118434 <__svfscanf_r+0x988>
8111810c:	e0800117 	ldw	r2,4(fp)
81118110:	e0c00017 	ldw	r3,0(fp)
81118114:	14fff516 	blt	r2,r19,811180ec <__reset+0xfb0f80ec>
81118118:	14c5c83a 	sub	r2,r2,r19
8111811c:	1cd5883a 	add	r10,r3,r19
81118120:	84e1883a 	add	r16,r16,r19
81118124:	e0800115 	stw	r2,4(fp)
81118128:	e2800015 	stw	r10,0(fp)
8111812c:	dd009d17 	ldw	r20,628(sp)
81118130:	9425883a 	add	r18,r18,r16
81118134:	a00d883a 	mov	r6,r20
81118138:	003e9a06 	br	81117ba4 <__reset+0xfb0f7ba4>
8111813c:	300b883a 	mov	r5,r6
81118140:	d9005884 	addi	r4,sp,354
81118144:	d9809d15 	stw	r6,628(sp)
81118148:	111df340 	call	8111df34 <__sccl>
8111814c:	1029883a 	mov	r20,r2
81118150:	e0800117 	ldw	r2,4(fp)
81118154:	0081050e 	bge	zero,r2,8111856c <__svfscanf_r+0xac0>
81118158:	e1000017 	ldw	r4,0(fp)
8111815c:	20800003 	ldbu	r2,0(r4)
81118160:	98005926 	beq	r19,zero,811182c8 <__svfscanf_r+0x81c>
81118164:	8c40040c 	andi	r17,r17,16
81118168:	88005a26 	beq	r17,zero,811182d4 <__svfscanf_r+0x828>
8111816c:	9823883a 	mov	r17,r19
81118170:	0021883a 	mov	r16,zero
81118174:	00000106 	br	8111817c <__svfscanf_r+0x6d0>
81118178:	20800003 	ldbu	r2,0(r4)
8111817c:	10803fcc 	andi	r2,r2,255
81118180:	d8c05884 	addi	r3,sp,354
81118184:	1885883a 	add	r2,r3,r2
81118188:	10800007 	ldb	r2,0(r2)
8111818c:	1000ad26 	beq	r2,zero,81118444 <__svfscanf_r+0x998>
81118190:	e0800117 	ldw	r2,4(fp)
81118194:	21000044 	addi	r4,r4,1
81118198:	84000044 	addi	r16,r16,1
8111819c:	10bfffc4 	addi	r2,r2,-1
811181a0:	e0800115 	stw	r2,4(fp)
811181a4:	e1000015 	stw	r4,0(fp)
811181a8:	84c0a026 	beq	r16,r19,8111842c <__svfscanf_r+0x980>
811181ac:	00bff216 	blt	zero,r2,81118178 <__reset+0xfb0f8178>
811181b0:	e00b883a 	mov	r5,fp
811181b4:	b009883a 	mov	r4,r22
811181b8:	1112dd00 	call	81112dd0 <__srefill_r>
811181bc:	10009a1e 	bne	r2,zero,81118428 <__svfscanf_r+0x97c>
811181c0:	e1000017 	ldw	r4,0(fp)
811181c4:	003fec06 	br	81118178 <__reset+0xfb0f8178>
811181c8:	e0800117 	ldw	r2,4(fp)
811181cc:	d9809d15 	stw	r6,628(sp)
811181d0:	0080eb0e 	bge	zero,r2,81118580 <__svfscanf_r+0xad4>
811181d4:	00a04474 	movhi	r2,33041
811181d8:	108ce404 	addi	r2,r2,13200
811181dc:	d880a115 	stw	r2,644(sp)
811181e0:	d8009e15 	stw	zero,632(sp)
811181e4:	050000c4 	movi	r20,3
811181e8:	003f3606 	br	81117ec4 <__reset+0xfb0f7ec4>
811181ec:	dd409904 	addi	r21,sp,612
811181f0:	8c40040c 	andi	r17,r17,16
811181f4:	01800204 	movi	r6,8
811181f8:	000b883a 	mov	r5,zero
811181fc:	a809883a 	mov	r4,r21
81118200:	dc409f15 	stw	r17,636(sp)
81118204:	1112acc0 	call	81112acc <memset>
81118208:	dc409f17 	ldw	r17,636(sp)
8111820c:	88006e26 	beq	r17,zero,811183c8 <__svfscanf_r+0x91c>
81118210:	0029883a 	mov	r20,zero
81118214:	0023883a 	mov	r17,zero
81118218:	111c3500 	call	8111c350 <__locale_mb_cur_max>
8111821c:	14406126 	beq	r2,r17,811183a4 <__svfscanf_r+0x8f8>
81118220:	e0800017 	ldw	r2,0(fp)
81118224:	e0c00117 	ldw	r3,4(fp)
81118228:	d9000104 	addi	r4,sp,4
8111822c:	12000003 	ldbu	r8,0(r2)
81118230:	18ffffc4 	addi	r3,r3,-1
81118234:	10800044 	addi	r2,r2,1
81118238:	e0c00115 	stw	r3,4(fp)
8111823c:	e0800015 	stw	r2,0(fp)
81118240:	8c000044 	addi	r16,r17,1
81118244:	dd400015 	stw	r21,0(sp)
81118248:	2463883a 	add	r17,r4,r17
8111824c:	200d883a 	mov	r6,r4
81118250:	a00b883a 	mov	r5,r20
81118254:	800f883a 	mov	r7,r16
81118258:	b009883a 	mov	r4,r22
8111825c:	8a000005 	stb	r8,0(r17)
81118260:	111c40c0 	call	8111c40c <_mbrtowc_r>
81118264:	017fffc4 	movi	r5,-1
81118268:	11404e26 	beq	r2,r5,811183a4 <__svfscanf_r+0x8f8>
8111826c:	1000601e 	bne	r2,zero,811183f0 <__svfscanf_r+0x944>
81118270:	da009f17 	ldw	r8,636(sp)
81118274:	4000641e 	bne	r8,zero,81118408 <__svfscanf_r+0x95c>
81118278:	a0000015 	stw	zero,0(r20)
8111827c:	9425883a 	add	r18,r18,r16
81118280:	9967883a 	add	r19,r19,r5
81118284:	a5000104 	addi	r20,r20,4
81118288:	e0800117 	ldw	r2,4(fp)
8111828c:	0023883a 	mov	r17,zero
81118290:	00804b16 	blt	zero,r2,811183c0 <__svfscanf_r+0x914>
81118294:	e00b883a 	mov	r5,fp
81118298:	b009883a 	mov	r4,r22
8111829c:	1112dd00 	call	81112dd0 <__srefill_r>
811182a0:	10004726 	beq	r2,zero,811183c0 <__svfscanf_r+0x914>
811182a4:	88003f1e 	bne	r17,zero,811183a4 <__svfscanf_r+0x8f8>
811182a8:	d8c09f17 	ldw	r3,636(sp)
811182ac:	1800031e 	bne	r3,zero,811182bc <__svfscanf_r+0x810>
811182b0:	da00a017 	ldw	r8,640(sp)
811182b4:	42000044 	addi	r8,r8,1
811182b8:	da00a015 	stw	r8,640(sp)
811182bc:	dd009d17 	ldw	r20,628(sp)
811182c0:	a00d883a 	mov	r6,r20
811182c4:	003e3706 	br	81117ba4 <__reset+0xfb0f7ba4>
811182c8:	8c40040c 	andi	r17,r17,16
811182cc:	04ffffc4 	movi	r19,-1
811182d0:	883fa61e 	bne	r17,zero,8111816c <__reset+0xfb0f816c>
811182d4:	da009c17 	ldw	r8,624(sp)
811182d8:	9abfffc4 	addi	r10,r19,-1
811182dc:	44000017 	ldw	r16,0(r8)
811182e0:	44400104 	addi	r17,r8,4
811182e4:	8007883a 	mov	r3,r16
811182e8:	82ab883a 	add	r21,r16,r10
811182ec:	00000306 	br	811182fc <__svfscanf_r+0x850>
811182f0:	e1000017 	ldw	r4,0(fp)
811182f4:	9807883a 	mov	r3,r19
811182f8:	20800003 	ldbu	r2,0(r4)
811182fc:	10803fcc 	andi	r2,r2,255
81118300:	d9405884 	addi	r5,sp,354
81118304:	2885883a 	add	r2,r5,r2
81118308:	10800007 	ldb	r2,0(r2)
8111830c:	10004b26 	beq	r2,zero,8111843c <__svfscanf_r+0x990>
81118310:	e0800117 	ldw	r2,4(fp)
81118314:	21400044 	addi	r5,r4,1
81118318:	e1400015 	stw	r5,0(fp)
8111831c:	10bfffc4 	addi	r2,r2,-1
81118320:	e0800115 	stw	r2,4(fp)
81118324:	20800003 	ldbu	r2,0(r4)
81118328:	1cc00044 	addi	r19,r3,1
8111832c:	18800005 	stb	r2,0(r3)
81118330:	1d400726 	beq	r3,r21,81118350 <__svfscanf_r+0x8a4>
81118334:	e0800117 	ldw	r2,4(fp)
81118338:	00bfed16 	blt	zero,r2,811182f0 <__reset+0xfb0f82f0>
8111833c:	e00b883a 	mov	r5,fp
81118340:	b009883a 	mov	r4,r22
81118344:	1112dd00 	call	81112dd0 <__srefill_r>
81118348:	103fe926 	beq	r2,zero,811182f0 <__reset+0xfb0f82f0>
8111834c:	84c01526 	beq	r16,r19,811183a4 <__svfscanf_r+0x8f8>
81118350:	9c21c83a 	sub	r16,r19,r16
81118354:	803e1726 	beq	r16,zero,81117bb4 <__reset+0xfb0f7bb4>
81118358:	da00a017 	ldw	r8,640(sp)
8111835c:	98000005 	stb	zero,0(r19)
81118360:	dc409c15 	stw	r17,624(sp)
81118364:	42000044 	addi	r8,r8,1
81118368:	da00a015 	stw	r8,640(sp)
8111836c:	9425883a 	add	r18,r18,r16
81118370:	a00d883a 	mov	r6,r20
81118374:	003e0b06 	br	81117ba4 <__reset+0xfb0f7ba4>
81118378:	017fff84 	movi	r5,-2
8111837c:	11439b1e 	bne	r2,r5,811191ec <__svfscanf_r+0x1740>
81118380:	8821883a 	mov	r16,r17
81118384:	e0800117 	ldw	r2,4(fp)
81118388:	0082e516 	blt	zero,r2,81118f20 <__svfscanf_r+0x1474>
8111838c:	e00b883a 	mov	r5,fp
81118390:	b009883a 	mov	r4,r22
81118394:	1112dd00 	call	81112dd0 <__srefill_r>
81118398:	1002e126 	beq	r2,zero,81118f20 <__svfscanf_r+0x1474>
8111839c:	dc409f17 	ldw	r17,636(sp)
811183a0:	8002e826 	beq	r16,zero,81118f44 <__svfscanf_r+0x1498>
811183a4:	da00a017 	ldw	r8,640(sp)
811183a8:	403e9c26 	beq	r8,zero,81117e1c <__reset+0xfb0f7e1c>
811183ac:	e080030b 	ldhu	r2,12(fp)
811183b0:	1080100c 	andi	r2,r2,64
811183b4:	103e991e 	bne	r2,zero,81117e1c <__reset+0xfb0f7e1c>
811183b8:	4005883a 	mov	r2,r8
811183bc:	003e9806 	br	81117e20 <__reset+0xfb0f7e20>
811183c0:	983f951e 	bne	r19,zero,81118218 <__reset+0xfb0f8218>
811183c4:	003fb806 	br	811182a8 <__reset+0xfb0f82a8>
811183c8:	da009c17 	ldw	r8,624(sp)
811183cc:	45000017 	ldw	r20,0(r8)
811183d0:	42000104 	addi	r8,r8,4
811183d4:	da009c15 	stw	r8,624(sp)
811183d8:	003f8e06 	br	81118214 <__reset+0xfb0f8214>
811183dc:	e00b883a 	mov	r5,fp
811183e0:	b009883a 	mov	r4,r22
811183e4:	1112dd00 	call	81112dd0 <__srefill_r>
811183e8:	103f3826 	beq	r2,zero,811180cc <__reset+0xfb0f80cc>
811183ec:	003fed06 	br	811183a4 <__reset+0xfb0f83a4>
811183f0:	00ffff84 	movi	r3,-2
811183f4:	10c0071e 	bne	r2,r3,81118414 <__svfscanf_r+0x968>
811183f8:	e0800117 	ldw	r2,4(fp)
811183fc:	8023883a 	mov	r17,r16
81118400:	00bf8516 	blt	zero,r2,81118218 <__reset+0xfb0f8218>
81118404:	003fa306 	br	81118294 <__reset+0xfb0f8294>
81118408:	9425883a 	add	r18,r18,r16
8111840c:	9cffffc4 	addi	r19,r19,-1
81118410:	003f9d06 	br	81118288 <__reset+0xfb0f8288>
81118414:	da009f17 	ldw	r8,636(sp)
81118418:	9425883a 	add	r18,r18,r16
8111841c:	9cffffc4 	addi	r19,r19,-1
81118420:	403f9826 	beq	r8,zero,81118284 <__reset+0xfb0f8284>
81118424:	003f9806 	br	81118288 <__reset+0xfb0f8288>
81118428:	8023883a 	mov	r17,r16
8111842c:	8821883a 	mov	r16,r17
81118430:	003fce06 	br	8111836c <__reset+0xfb0f836c>
81118434:	803f3d1e 	bne	r16,zero,8111812c <__reset+0xfb0f812c>
81118438:	003fda06 	br	811183a4 <__reset+0xfb0f83a4>
8111843c:	1827883a 	mov	r19,r3
81118440:	003fc306 	br	81118350 <__reset+0xfb0f8350>
81118444:	803fc91e 	bne	r16,zero,8111836c <__reset+0xfb0f836c>
81118448:	003dda06 	br	81117bb4 <__reset+0xfb0f7bb4>
8111844c:	da009c17 	ldw	r8,624(sp)
81118450:	df000015 	stw	fp,0(sp)
81118454:	980f883a 	mov	r7,r19
81118458:	41400017 	ldw	r5,0(r8)
8111845c:	01800044 	movi	r6,1
81118460:	b009883a 	mov	r4,r22
81118464:	111b5240 	call	8111b524 <_fread_r>
81118468:	da009c17 	ldw	r8,624(sp)
8111846c:	40c00104 	addi	r3,r8,4
81118470:	103fcc26 	beq	r2,zero,811183a4 <__reset+0xfb0f83a4>
81118474:	da00a017 	ldw	r8,640(sp)
81118478:	dd009d17 	ldw	r20,628(sp)
8111847c:	90a5883a 	add	r18,r18,r2
81118480:	42000044 	addi	r8,r8,1
81118484:	da00a015 	stw	r8,640(sp)
81118488:	d8c09c15 	stw	r3,624(sp)
8111848c:	a00d883a 	mov	r6,r20
81118490:	003dc406 	br	81117ba4 <__reset+0xfb0f7ba4>
81118494:	e00b883a 	mov	r5,fp
81118498:	b009883a 	mov	r4,r22
8111849c:	1112dd00 	call	81112dd0 <__srefill_r>
811184a0:	103e5226 	beq	r2,zero,81117dec <__reset+0xfb0f7dec>
811184a4:	003fbf06 	br	811183a4 <__reset+0xfb0f83a4>
811184a8:	a0800083 	ldbu	r2,2(r20)
811184ac:	8c400094 	ori	r17,r17,2
811184b0:	a5000084 	addi	r20,r20,2
811184b4:	10c03fcc 	andi	r3,r2,255
811184b8:	003dc706 	br	81117bd8 <__reset+0xfb0f7bd8>
811184bc:	e0800117 	ldw	r2,4(fp)
811184c0:	88e2b03a 	or	r17,r17,r3
811184c4:	00bef716 	blt	zero,r2,811180a4 <__reset+0xfb0f80a4>
811184c8:	003e6f06 	br	81117e88 <__reset+0xfb0f7e88>
811184cc:	8880004c 	andi	r2,r17,1
811184d0:	10000b1e 	bne	r2,zero,81118500 <__svfscanf_r+0xa54>
811184d4:	8c40008c 	andi	r17,r17,2
811184d8:	88000926 	beq	r17,zero,81118500 <__svfscanf_r+0xa54>
811184dc:	da009c17 	ldw	r8,624(sp)
811184e0:	9007d7fa 	srai	r3,r18,31
811184e4:	dd009d17 	ldw	r20,628(sp)
811184e8:	40800017 	ldw	r2,0(r8)
811184ec:	42000104 	addi	r8,r8,4
811184f0:	da009c15 	stw	r8,624(sp)
811184f4:	14800015 	stw	r18,0(r2)
811184f8:	10c00115 	stw	r3,4(r2)
811184fc:	003da806 	br	81117ba0 <__reset+0xfb0f7ba0>
81118500:	da009c17 	ldw	r8,624(sp)
81118504:	dd009d17 	ldw	r20,628(sp)
81118508:	40800017 	ldw	r2,0(r8)
8111850c:	42000104 	addi	r8,r8,4
81118510:	da009c15 	stw	r8,624(sp)
81118514:	14800015 	stw	r18,0(r2)
81118518:	003da106 	br	81117ba0 <__reset+0xfb0f7ba0>
8111851c:	e00b883a 	mov	r5,fp
81118520:	b009883a 	mov	r4,r22
81118524:	1112dd00 	call	81112dd0 <__srefill_r>
81118528:	103f9e1e 	bne	r2,zero,811183a4 <__reset+0xfb0f83a4>
8111852c:	b9c00017 	ldw	r7,0(r23)
81118530:	05000104 	movi	r20,4
81118534:	003e6306 	br	81117ec4 <__reset+0xfb0f7ec4>
81118538:	e00b883a 	mov	r5,fp
8111853c:	b009883a 	mov	r4,r22
81118540:	1112dd00 	call	81112dd0 <__srefill_r>
81118544:	103f971e 	bne	r2,zero,811183a4 <__reset+0xfb0f83a4>
81118548:	b9c00017 	ldw	r7,0(r23)
8111854c:	003e5706 	br	81117eac <__reset+0xfb0f7eac>
81118550:	e00b883a 	mov	r5,fp
81118554:	b009883a 	mov	r4,r22
81118558:	1112dd00 	call	81112dd0 <__srefill_r>
8111855c:	103f911e 	bne	r2,zero,811183a4 <__reset+0xfb0f83a4>
81118560:	b9c00017 	ldw	r7,0(r23)
81118564:	05000084 	movi	r20,2
81118568:	003e5606 	br	81117ec4 <__reset+0xfb0f7ec4>
8111856c:	e00b883a 	mov	r5,fp
81118570:	b009883a 	mov	r4,r22
81118574:	1112dd00 	call	81112dd0 <__srefill_r>
81118578:	103ef726 	beq	r2,zero,81118158 <__reset+0xfb0f8158>
8111857c:	003f8906 	br	811183a4 <__reset+0xfb0f83a4>
81118580:	e00b883a 	mov	r5,fp
81118584:	b009883a 	mov	r4,r22
81118588:	1112dd00 	call	81112dd0 <__srefill_r>
8111858c:	103f851e 	bne	r2,zero,811183a4 <__reset+0xfb0f83a4>
81118590:	b9c00017 	ldw	r7,0(r23)
81118594:	003f0f06 	br	811181d4 <__reset+0xfb0f81d4>
81118598:	014000c4 	movi	r5,3
8111859c:	a1414a26 	beq	r20,r5,81118ac8 <__svfscanf_r+0x101c>
811185a0:	01000104 	movi	r4,4
811185a4:	a101f11e 	bne	r20,r4,81118d6c <__svfscanf_r+0x12c0>
811185a8:	b009883a 	mov	r4,r22
811185ac:	111c3740 	call	8111c374 <_localeconv_r>
811185b0:	10800017 	ldw	r2,0(r2)
811185b4:	98ffffc4 	addi	r3,r19,-1
811185b8:	d880a315 	stw	r2,652(sp)
811185bc:	00805704 	movi	r2,348
811185c0:	10c21e2e 	bgeu	r2,r3,81118e3c <__svfscanf_r+0x1390>
811185c4:	9cffa8c4 	addi	r19,r19,-349
811185c8:	dcc0a215 	stw	r19,648(sp)
811185cc:	04c05744 	movi	r19,349
811185d0:	8d01e014 	ori	r20,r17,1920
811185d4:	0023883a 	mov	r17,zero
811185d8:	dc000104 	addi	r16,sp,4
811185dc:	8805883a 	mov	r2,r17
811185e0:	0019883a 	mov	r12,zero
811185e4:	8023883a 	mov	r17,r16
811185e8:	b007883a 	mov	r3,r22
811185ec:	9821883a 	mov	r16,r19
811185f0:	002b883a 	mov	r21,zero
811185f4:	d800a515 	stw	zero,660(sp)
811185f8:	d800a415 	stw	zero,656(sp)
811185fc:	d8009f15 	stw	zero,636(sp)
81118600:	01c01384 	movi	r7,78
81118604:	602d883a 	mov	r22,r12
81118608:	1027883a 	mov	r19,r2
8111860c:	e1000017 	ldw	r4,0(fp)
81118610:	21400003 	ldbu	r5,0(r4)
81118614:	28bff544 	addi	r2,r5,-43
81118618:	10803fcc 	andi	r2,r2,255
8111861c:	38810e36 	bltu	r7,r2,81118a58 <__svfscanf_r+0xfac>
81118620:	100490ba 	slli	r2,r2,2
81118624:	01a044b4 	movhi	r6,33042
81118628:	31a18e04 	addi	r6,r6,-31176
8111862c:	1185883a 	add	r2,r2,r6
81118630:	10800017 	ldw	r2,0(r2)
81118634:	1000683a 	jmp	r2
81118638:	81118930 	cmpltui	r4,r16,17956
8111863c:	81118a58 	cmpnei	r4,r16,17961
81118640:	81118930 	cmpltui	r4,r16,17956
81118644:	81118a58 	cmpnei	r4,r16,17961
81118648:	81118a58 	cmpnei	r4,r16,17961
8111864c:	81118904 	addi	r4,r16,17956
81118650:	81118774 	orhi	r4,r16,17949
81118654:	81118774 	orhi	r4,r16,17949
81118658:	81118774 	orhi	r4,r16,17949
8111865c:	81118774 	orhi	r4,r16,17949
81118660:	81118774 	orhi	r4,r16,17949
81118664:	81118774 	orhi	r4,r16,17949
81118668:	81118774 	orhi	r4,r16,17949
8111866c:	81118774 	orhi	r4,r16,17949
81118670:	81118774 	orhi	r4,r16,17949
81118674:	81118a58 	cmpnei	r4,r16,17961
81118678:	81118a58 	cmpnei	r4,r16,17961
8111867c:	81118a58 	cmpnei	r4,r16,17961
81118680:	81118a58 	cmpnei	r4,r16,17961
81118684:	81118a58 	cmpnei	r4,r16,17961
81118688:	81118a58 	cmpnei	r4,r16,17961
8111868c:	81118a58 	cmpnei	r4,r16,17961
81118690:	81118a48 	cmpgei	r4,r16,17961
81118694:	81118a58 	cmpnei	r4,r16,17961
81118698:	81118a58 	cmpnei	r4,r16,17961
8111869c:	81118a58 	cmpnei	r4,r16,17961
811186a0:	81118a04 	addi	r4,r16,17960
811186a4:	811189e8 	cmpgeui	r4,r16,17959
811186a8:	81118a58 	cmpnei	r4,r16,17961
811186ac:	81118a58 	cmpnei	r4,r16,17961
811186b0:	811189b4 	orhi	r4,r16,17958
811186b4:	81118a58 	cmpnei	r4,r16,17961
811186b8:	81118a58 	cmpnei	r4,r16,17961
811186bc:	81118a58 	cmpnei	r4,r16,17961
811186c0:	81118a58 	cmpnei	r4,r16,17961
811186c4:	8111897c 	xorhi	r4,r16,17957
811186c8:	81118a58 	cmpnei	r4,r16,17961
811186cc:	81118a58 	cmpnei	r4,r16,17961
811186d0:	81118a58 	cmpnei	r4,r16,17961
811186d4:	81118a58 	cmpnei	r4,r16,17961
811186d8:	81118a58 	cmpnei	r4,r16,17961
811186dc:	81118960 	cmpeqi	r4,r16,17957
811186e0:	81118a58 	cmpnei	r4,r16,17961
811186e4:	81118a58 	cmpnei	r4,r16,17961
811186e8:	81118a58 	cmpnei	r4,r16,17961
811186ec:	81118a58 	cmpnei	r4,r16,17961
811186f0:	81118944 	addi	r4,r16,17957
811186f4:	81118a58 	cmpnei	r4,r16,17961
811186f8:	81118a58 	cmpnei	r4,r16,17961
811186fc:	81118a58 	cmpnei	r4,r16,17961
81118700:	81118a58 	cmpnei	r4,r16,17961
81118704:	81118a58 	cmpnei	r4,r16,17961
81118708:	81118a58 	cmpnei	r4,r16,17961
8111870c:	81118a58 	cmpnei	r4,r16,17961
81118710:	81118a48 	cmpgei	r4,r16,17961
81118714:	81118a58 	cmpnei	r4,r16,17961
81118718:	81118a58 	cmpnei	r4,r16,17961
8111871c:	81118a58 	cmpnei	r4,r16,17961
81118720:	81118a04 	addi	r4,r16,17960
81118724:	811189e8 	cmpgeui	r4,r16,17959
81118728:	81118a58 	cmpnei	r4,r16,17961
8111872c:	81118a58 	cmpnei	r4,r16,17961
81118730:	811189b4 	orhi	r4,r16,17958
81118734:	81118a58 	cmpnei	r4,r16,17961
81118738:	81118a58 	cmpnei	r4,r16,17961
8111873c:	81118a58 	cmpnei	r4,r16,17961
81118740:	81118a58 	cmpnei	r4,r16,17961
81118744:	8111897c 	xorhi	r4,r16,17957
81118748:	81118a58 	cmpnei	r4,r16,17961
8111874c:	81118a58 	cmpnei	r4,r16,17961
81118750:	81118a58 	cmpnei	r4,r16,17961
81118754:	81118a58 	cmpnei	r4,r16,17961
81118758:	81118a58 	cmpnei	r4,r16,17961
8111875c:	81118960 	cmpeqi	r4,r16,17957
81118760:	81118a58 	cmpnei	r4,r16,17961
81118764:	81118a58 	cmpnei	r4,r16,17961
81118768:	81118a58 	cmpnei	r4,r16,17961
8111876c:	81118a58 	cmpnei	r4,r16,17961
81118770:	81118944 	addi	r4,r16,17957
81118774:	a8803fcc 	andi	r2,r21,255
81118778:	1080201c 	xori	r2,r2,128
8111877c:	10bfe004 	addi	r2,r2,-128
81118780:	b085883a 	add	r2,r22,r2
81118784:	10000d1e 	bne	r2,zero,811187bc <__svfscanf_r+0xd10>
81118788:	00bf9fc4 	movi	r2,-385
8111878c:	a0a8703a 	and	r20,r20,r2
81118790:	89400005 	stb	r5,0(r17)
81118794:	8c400044 	addi	r17,r17,1
81118798:	e0800117 	ldw	r2,4(fp)
8111879c:	843fffc4 	addi	r16,r16,-1
811187a0:	94800044 	addi	r18,r18,1
811187a4:	10bfffc4 	addi	r2,r2,-1
811187a8:	e0800115 	stw	r2,4(fp)
811187ac:	0080b40e 	bge	zero,r2,81118a80 <__svfscanf_r+0xfd4>
811187b0:	21000044 	addi	r4,r4,1
811187b4:	e1000015 	stw	r4,0(fp)
811187b8:	803f941e 	bne	r16,zero,8111860c <__reset+0xfb0f860c>
811187bc:	8821883a 	mov	r16,r17
811187c0:	b019883a 	mov	r12,r22
811187c4:	9823883a 	mov	r17,r19
811187c8:	182d883a 	mov	r22,r3
811187cc:	9801961e 	bne	r19,zero,81118e28 <__svfscanf_r+0x137c>
811187d0:	633fffc4 	addi	r12,r12,-1
811187d4:	00800044 	movi	r2,1
811187d8:	1302882e 	bgeu	r2,r12,811191fc <__svfscanf_r+0x1750>
811187dc:	a8803fcc 	andi	r2,r21,255
811187e0:	1080201c 	xori	r2,r2,128
811187e4:	10bfe004 	addi	r2,r2,-128
811187e8:	113fffc4 	addi	r4,r2,-1
811187ec:	01400184 	movi	r5,6
811187f0:	29001136 	bltu	r5,r4,81118838 <__svfscanf_r+0xd8c>
811187f4:	01000084 	movi	r4,2
811187f8:	2082900e 	bge	r4,r2,8111923c <__svfscanf_r+0x1790>
811187fc:	00c000c4 	movi	r3,3
81118800:	10c00d26 	beq	r2,r3,81118838 <__svfscanf_r+0xd8c>
81118804:	9425c83a 	sub	r18,r18,r16
81118808:	1827883a 	mov	r19,r3
8111880c:	843fffc4 	addi	r16,r16,-1
81118810:	81400007 	ldb	r5,0(r16)
81118814:	e00d883a 	mov	r6,fp
81118818:	b009883a 	mov	r4,r22
8111881c:	11215a40 	call	811215a4 <_ungetc_r>
81118820:	a8bfffc4 	addi	r2,r21,-1
81118824:	10c03fcc 	andi	r3,r2,255
81118828:	8493883a 	add	r9,r16,r18
8111882c:	102b883a 	mov	r21,r2
81118830:	98fff636 	bltu	r19,r3,8111880c <__reset+0xfb0f880c>
81118834:	4825883a 	mov	r18,r9
81118838:	a080400c 	andi	r2,r20,256
8111883c:	10001426 	beq	r2,zero,81118890 <__svfscanf_r+0xde4>
81118840:	a081000c 	andi	r2,r20,1024
81118844:	1002571e 	bne	r2,zero,811191a4 <__svfscanf_r+0x16f8>
81118848:	817fffc7 	ldb	r5,-1(r16)
8111884c:	00801944 	movi	r2,101
81118850:	84ffffc4 	addi	r19,r16,-1
81118854:	957fffc4 	addi	r21,r18,-1
81118858:	28800826 	beq	r5,r2,8111887c <__svfscanf_r+0xdd0>
8111885c:	00801144 	movi	r2,69
81118860:	28800626 	beq	r5,r2,8111887c <__svfscanf_r+0xdd0>
81118864:	e00d883a 	mov	r6,fp
81118868:	b009883a 	mov	r4,r22
8111886c:	11215a40 	call	811215a4 <_ungetc_r>
81118870:	817fff87 	ldb	r5,-2(r16)
81118874:	84ffff84 	addi	r19,r16,-2
81118878:	957fff84 	addi	r21,r18,-2
8111887c:	e00d883a 	mov	r6,fp
81118880:	b009883a 	mov	r4,r22
81118884:	11215a40 	call	811215a4 <_ungetc_r>
81118888:	a825883a 	mov	r18,r21
8111888c:	9821883a 	mov	r16,r19
81118890:	a080040c 	andi	r2,r20,16
81118894:	103e891e 	bne	r2,zero,811182bc <__reset+0xfb0f82bc>
81118898:	80000005 	stb	zero,0(r16)
8111889c:	a081800c 	andi	r2,r20,1536
811188a0:	01010004 	movi	r4,1024
811188a4:	1101dd26 	beq	r2,r4,8111901c <__svfscanf_r+0x1570>
811188a8:	da00a417 	ldw	r8,656(sp)
811188ac:	4001e71e 	bne	r8,zero,8111904c <__svfscanf_r+0x15a0>
811188b0:	000d883a 	mov	r6,zero
811188b4:	d9400104 	addi	r5,sp,4
811188b8:	b009883a 	mov	r4,r22
811188bc:	111e1540 	call	8111e154 <_strtod_r>
811188c0:	1021883a 	mov	r16,r2
811188c4:	a080004c 	andi	r2,r20,1
811188c8:	1000021e 	bne	r2,zero,811188d4 <__svfscanf_r+0xe28>
811188cc:	a2c0008c 	andi	r11,r20,2
811188d0:	5801e826 	beq	r11,zero,81119074 <__svfscanf_r+0x15c8>
811188d4:	da009c17 	ldw	r8,624(sp)
811188d8:	40800017 	ldw	r2,0(r8)
811188dc:	42000104 	addi	r8,r8,4
811188e0:	da009c15 	stw	r8,624(sp)
811188e4:	14000015 	stw	r16,0(r2)
811188e8:	10c00115 	stw	r3,4(r2)
811188ec:	da00a017 	ldw	r8,640(sp)
811188f0:	dd009d17 	ldw	r20,628(sp)
811188f4:	42000044 	addi	r8,r8,1
811188f8:	da00a015 	stw	r8,640(sp)
811188fc:	a00d883a 	mov	r6,r20
81118900:	003ca806 	br	81117ba4 <__reset+0xfb0f7ba4>
81118904:	a080400c 	andi	r2,r20,256
81118908:	103f9a26 	beq	r2,zero,81118774 <__reset+0xfb0f8774>
8111890c:	da00a217 	ldw	r8,648(sp)
81118910:	00bfdfc4 	movi	r2,-129
81118914:	a0a8703a 	and	r20,r20,r2
81118918:	9cc00044 	addi	r19,r19,1
8111891c:	403f9e26 	beq	r8,zero,81118798 <__reset+0xfb0f8798>
81118920:	423fffc4 	addi	r8,r8,-1
81118924:	da00a215 	stw	r8,648(sp)
81118928:	84000044 	addi	r16,r16,1
8111892c:	003f9a06 	br	81118798 <__reset+0xfb0f8798>
81118930:	a080200c 	andi	r2,r20,128
81118934:	103fa126 	beq	r2,zero,811187bc <__reset+0xfb0f87bc>
81118938:	00bfdfc4 	movi	r2,-129
8111893c:	a0a8703a 	and	r20,r20,r2
81118940:	003f9306 	br	81118790 <__reset+0xfb0f8790>
81118944:	a8803fcc 	andi	r2,r21,255
81118948:	1080201c 	xori	r2,r2,128
8111894c:	10bfe004 	addi	r2,r2,-128
81118950:	020001c4 	movi	r8,7
81118954:	123f991e 	bne	r2,r8,811187bc <__reset+0xfb0f87bc>
81118958:	05400204 	movi	r21,8
8111895c:	003f8c06 	br	81118790 <__reset+0xfb0f8790>
81118960:	a8803fcc 	andi	r2,r21,255
81118964:	1080201c 	xori	r2,r2,128
81118968:	10bfe004 	addi	r2,r2,-128
8111896c:	01800184 	movi	r6,6
81118970:	11bf921e 	bne	r2,r6,811187bc <__reset+0xfb0f87bc>
81118974:	054001c4 	movi	r21,7
81118978:	003f8506 	br	81118790 <__reset+0xfb0f8790>
8111897c:	b000491e 	bne	r22,zero,81118aa4 <__svfscanf_r+0xff8>
81118980:	9800031e 	bne	r19,zero,81118990 <__svfscanf_r+0xee4>
81118984:	a081c00c 	andi	r2,r20,1792
81118988:	0181c004 	movi	r6,1792
8111898c:	11819f26 	beq	r2,r6,8111900c <__svfscanf_r+0x1560>
81118990:	a8803fcc 	andi	r2,r21,255
81118994:	1080201c 	xori	r2,r2,128
81118998:	10bfe004 	addi	r2,r2,-128
8111899c:	01800044 	movi	r6,1
811189a0:	11800226 	beq	r2,r6,811189ac <__svfscanf_r+0xf00>
811189a4:	01800104 	movi	r6,4
811189a8:	11bf841e 	bne	r2,r6,811187bc <__reset+0xfb0f87bc>
811189ac:	ad400044 	addi	r21,r21,1
811189b0:	003f7706 	br	81118790 <__reset+0xfb0f8790>
811189b4:	a8803fcc 	andi	r2,r21,255
811189b8:	1080201c 	xori	r2,r2,128
811189bc:	10bfe004 	addi	r2,r2,-128
811189c0:	10003c1e 	bne	r2,zero,81118ab4 <__svfscanf_r+0x1008>
811189c4:	9801141e 	bne	r19,zero,81118e18 <__svfscanf_r+0x136c>
811189c8:	a081c00c 	andi	r2,r20,1792
811189cc:	0181c004 	movi	r6,1792
811189d0:	11818226 	beq	r2,r6,81118fdc <__svfscanf_r+0x1530>
811189d4:	8821883a 	mov	r16,r17
811189d8:	b019883a 	mov	r12,r22
811189dc:	9823883a 	mov	r17,r19
811189e0:	182d883a 	mov	r22,r3
811189e4:	003f7a06 	br	811187d0 <__reset+0xfb0f87d0>
811189e8:	a8803fcc 	andi	r2,r21,255
811189ec:	1080201c 	xori	r2,r2,128
811189f0:	10bfe004 	addi	r2,r2,-128
811189f4:	01800084 	movi	r6,2
811189f8:	11bf701e 	bne	r2,r6,811187bc <__reset+0xfb0f87bc>
811189fc:	054000c4 	movi	r21,3
81118a00:	003f6306 	br	81118790 <__reset+0xfb0f8790>
81118a04:	a081400c 	andi	r2,r20,1280
81118a08:	01810004 	movi	r6,1024
81118a0c:	11800326 	beq	r2,r6,81118a1c <__svfscanf_r+0xf70>
81118a10:	a184703a 	and	r2,r20,r6
81118a14:	103f6926 	beq	r2,zero,811187bc <__reset+0xfb0f87bc>
81118a18:	983fee26 	beq	r19,zero,811189d4 <__reset+0xfb0f89d4>
81118a1c:	a080800c 	andi	r2,r20,512
81118a20:	1000041e 	bne	r2,zero,81118a34 <__svfscanf_r+0xf88>
81118a24:	da009f17 	ldw	r8,636(sp)
81118a28:	dc40a515 	stw	r17,660(sp)
81118a2c:	9a27c83a 	sub	r19,r19,r8
81118a30:	dcc0a415 	stw	r19,656(sp)
81118a34:	00be1fc4 	movi	r2,-1921
81118a38:	a0a8703a 	and	r20,r20,r2
81118a3c:	a5006014 	ori	r20,r20,384
81118a40:	0027883a 	mov	r19,zero
81118a44:	003f5206 	br	81118790 <__reset+0xfb0f8790>
81118a48:	00800044 	movi	r2,1
81118a4c:	b0bf5b1e 	bne	r22,r2,811187bc <__reset+0xfb0f87bc>
81118a50:	05800084 	movi	r22,2
81118a54:	003f4e06 	br	81118790 <__reset+0xfb0f8790>
81118a58:	d980a317 	ldw	r6,652(sp)
81118a5c:	30800003 	ldbu	r2,0(r6)
81118a60:	29803fcc 	andi	r6,r5,255
81118a64:	30bf551e 	bne	r6,r2,811187bc <__reset+0xfb0f87bc>
81118a68:	a080800c 	andi	r2,r20,512
81118a6c:	103f5326 	beq	r2,zero,811187bc <__reset+0xfb0f87bc>
81118a70:	023f5fc4 	movi	r8,-641
81118a74:	a228703a 	and	r20,r20,r8
81118a78:	dcc09f15 	stw	r19,636(sp)
81118a7c:	003f4406 	br	81118790 <__reset+0xfb0f8790>
81118a80:	1809883a 	mov	r4,r3
81118a84:	e00b883a 	mov	r5,fp
81118a88:	d8c0a615 	stw	r3,664(sp)
81118a8c:	d9c0aa15 	stw	r7,680(sp)
81118a90:	1112dd00 	call	81112dd0 <__srefill_r>
81118a94:	d8c0a617 	ldw	r3,664(sp)
81118a98:	d9c0aa17 	ldw	r7,680(sp)
81118a9c:	103f4626 	beq	r2,zero,811187b8 <__reset+0xfb0f87b8>
81118aa0:	003f4606 	br	811187bc <__reset+0xfb0f87bc>
81118aa4:	00800084 	movi	r2,2
81118aa8:	b0bfb91e 	bne	r22,r2,81118990 <__reset+0xfb0f8990>
81118aac:	058000c4 	movi	r22,3
81118ab0:	003f3706 	br	81118790 <__reset+0xfb0f8790>
81118ab4:	018000c4 	movi	r6,3
81118ab8:	11bfbc26 	beq	r2,r6,811189ac <__reset+0xfb0f89ac>
81118abc:	01800144 	movi	r6,5
81118ac0:	11bfba26 	beq	r2,r6,811189ac <__reset+0xfb0f89ac>
81118ac4:	003f3d06 	br	811187bc <__reset+0xfb0f87bc>
81118ac8:	98bfffc4 	addi	r2,r19,-1
81118acc:	01405704 	movi	r5,348
81118ad0:	2880d82e 	bgeu	r5,r2,81118e34 <__svfscanf_r+0x1388>
81118ad4:	99ffa8c4 	addi	r7,r19,-349
81118ad8:	04c05744 	movi	r19,349
81118adc:	8c436014 	ori	r17,r17,3456
81118ae0:	9013883a 	mov	r9,r18
81118ae4:	8825883a 	mov	r18,r17
81118ae8:	dc409e17 	ldw	r17,632(sp)
81118aec:	0029883a 	mov	r20,zero
81118af0:	dc000104 	addi	r16,sp,4
81118af4:	05401344 	movi	r21,77
81118af8:	02c08004 	movi	r11,512
81118afc:	01bf7fc4 	movi	r6,-513
81118b00:	023fdfc4 	movi	r8,-129
81118b04:	20bff544 	addi	r2,r4,-43
81118b08:	10803fcc 	andi	r2,r2,255
81118b0c:	a8807236 	bltu	r21,r2,81118cd8 <__svfscanf_r+0x122c>
81118b10:	100490ba 	slli	r2,r2,2
81118b14:	016044b4 	movhi	r5,33042
81118b18:	2962ca04 	addi	r5,r5,-29912
81118b1c:	1145883a 	add	r2,r2,r5
81118b20:	10800017 	ldw	r2,0(r2)
81118b24:	1000683a 	jmp	r2
81118b28:	81118d5c 	xori	r4,r16,17973
81118b2c:	81118cd8 	cmpnei	r4,r16,17971
81118b30:	81118d5c 	xori	r4,r16,17973
81118b34:	81118cd8 	cmpnei	r4,r16,17971
81118b38:	81118cd8 	cmpnei	r4,r16,17971
81118b3c:	81118d34 	orhi	r4,r16,17972
81118b40:	81118d14 	ori	r4,r16,17972
81118b44:	81118d14 	ori	r4,r16,17972
81118b48:	81118d14 	ori	r4,r16,17972
81118b4c:	81118d14 	ori	r4,r16,17972
81118b50:	81118d14 	ori	r4,r16,17972
81118b54:	81118d14 	ori	r4,r16,17972
81118b58:	81118d14 	ori	r4,r16,17972
81118b5c:	81118cbc 	xorhi	r4,r16,17970
81118b60:	81118cbc 	xorhi	r4,r16,17970
81118b64:	81118cd8 	cmpnei	r4,r16,17971
81118b68:	81118cd8 	cmpnei	r4,r16,17971
81118b6c:	81118cd8 	cmpnei	r4,r16,17971
81118b70:	81118cd8 	cmpnei	r4,r16,17971
81118b74:	81118cd8 	cmpnei	r4,r16,17971
81118b78:	81118cd8 	cmpnei	r4,r16,17971
81118b7c:	81118cd8 	cmpnei	r4,r16,17971
81118b80:	81118ca8 	cmpgeui	r4,r16,17970
81118b84:	81118ca8 	cmpgeui	r4,r16,17970
81118b88:	81118ca8 	cmpgeui	r4,r16,17970
81118b8c:	81118ca8 	cmpgeui	r4,r16,17970
81118b90:	81118ca8 	cmpgeui	r4,r16,17970
81118b94:	81118ca8 	cmpgeui	r4,r16,17970
81118b98:	81118cd8 	cmpnei	r4,r16,17971
81118b9c:	81118cd8 	cmpnei	r4,r16,17971
81118ba0:	81118cd8 	cmpnei	r4,r16,17971
81118ba4:	81118cd8 	cmpnei	r4,r16,17971
81118ba8:	81118cd8 	cmpnei	r4,r16,17971
81118bac:	81118cd8 	cmpnei	r4,r16,17971
81118bb0:	81118cd8 	cmpnei	r4,r16,17971
81118bb4:	81118cd8 	cmpnei	r4,r16,17971
81118bb8:	81118cd8 	cmpnei	r4,r16,17971
81118bbc:	81118cd8 	cmpnei	r4,r16,17971
81118bc0:	81118cd8 	cmpnei	r4,r16,17971
81118bc4:	81118cd8 	cmpnei	r4,r16,17971
81118bc8:	81118cd8 	cmpnei	r4,r16,17971
81118bcc:	81118cd8 	cmpnei	r4,r16,17971
81118bd0:	81118cd8 	cmpnei	r4,r16,17971
81118bd4:	81118cd8 	cmpnei	r4,r16,17971
81118bd8:	81118cd8 	cmpnei	r4,r16,17971
81118bdc:	81118c60 	cmpeqi	r4,r16,17969
81118be0:	81118cd8 	cmpnei	r4,r16,17971
81118be4:	81118cd8 	cmpnei	r4,r16,17971
81118be8:	81118cd8 	cmpnei	r4,r16,17971
81118bec:	81118cd8 	cmpnei	r4,r16,17971
81118bf0:	81118cd8 	cmpnei	r4,r16,17971
81118bf4:	81118cd8 	cmpnei	r4,r16,17971
81118bf8:	81118cd8 	cmpnei	r4,r16,17971
81118bfc:	81118cd8 	cmpnei	r4,r16,17971
81118c00:	81118ca8 	cmpgeui	r4,r16,17970
81118c04:	81118ca8 	cmpgeui	r4,r16,17970
81118c08:	81118ca8 	cmpgeui	r4,r16,17970
81118c0c:	81118ca8 	cmpgeui	r4,r16,17970
81118c10:	81118ca8 	cmpgeui	r4,r16,17970
81118c14:	81118ca8 	cmpgeui	r4,r16,17970
81118c18:	81118cd8 	cmpnei	r4,r16,17971
81118c1c:	81118cd8 	cmpnei	r4,r16,17971
81118c20:	81118cd8 	cmpnei	r4,r16,17971
81118c24:	81118cd8 	cmpnei	r4,r16,17971
81118c28:	81118cd8 	cmpnei	r4,r16,17971
81118c2c:	81118cd8 	cmpnei	r4,r16,17971
81118c30:	81118cd8 	cmpnei	r4,r16,17971
81118c34:	81118cd8 	cmpnei	r4,r16,17971
81118c38:	81118cd8 	cmpnei	r4,r16,17971
81118c3c:	81118cd8 	cmpnei	r4,r16,17971
81118c40:	81118cd8 	cmpnei	r4,r16,17971
81118c44:	81118cd8 	cmpnei	r4,r16,17971
81118c48:	81118cd8 	cmpnei	r4,r16,17971
81118c4c:	81118cd8 	cmpnei	r4,r16,17971
81118c50:	81118cd8 	cmpnei	r4,r16,17971
81118c54:	81118cd8 	cmpnei	r4,r16,17971
81118c58:	81118cd8 	cmpnei	r4,r16,17971
81118c5c:	81118c60 	cmpeqi	r4,r16,17969
81118c60:	9081800c 	andi	r2,r18,1536
81118c64:	12c01c1e 	bne	r2,r11,81118cd8 <__svfscanf_r+0x122c>
81118c68:	91a4703a 	and	r18,r18,r6
81118c6c:	94814014 	ori	r18,r18,1280
81118c70:	04400404 	movi	r17,16
81118c74:	81000005 	stb	r4,0(r16)
81118c78:	84000044 	addi	r16,r16,1
81118c7c:	e0800117 	ldw	r2,4(fp)
81118c80:	10bfffc4 	addi	r2,r2,-1
81118c84:	e0800115 	stw	r2,4(fp)
81118c88:	0080540e 	bge	zero,r2,81118ddc <__svfscanf_r+0x1330>
81118c8c:	18c00044 	addi	r3,r3,1
81118c90:	e0c00015 	stw	r3,0(fp)
81118c94:	9cffffc4 	addi	r19,r19,-1
81118c98:	98000f26 	beq	r19,zero,81118cd8 <__svfscanf_r+0x122c>
81118c9c:	e0c00017 	ldw	r3,0(fp)
81118ca0:	19000003 	ldbu	r4,0(r3)
81118ca4:	003f9706 	br	81118b04 <__reset+0xfb0f8b04>
81118ca8:	00800284 	movi	r2,10
81118cac:	14400a0e 	bge	r2,r17,81118cd8 <__svfscanf_r+0x122c>
81118cb0:	00bd1fc4 	movi	r2,-2945
81118cb4:	90a4703a 	and	r18,r18,r2
81118cb8:	003fee06 	br	81118c74 <__reset+0xfb0f8c74>
81118cbc:	01604534 	movhi	r5,33044
81118cc0:	8c63883a 	add	r17,r17,r17
81118cc4:	29792d84 	addi	r5,r5,-6986
81118cc8:	2c45883a 	add	r2,r5,r17
81118ccc:	1440000f 	ldh	r17,0(r2)
81118cd0:	00800204 	movi	r2,8
81118cd4:	147ff616 	blt	r2,r17,81118cb0 <__reset+0xfb0f8cb0>
81118cd8:	dc409e15 	stw	r17,632(sp)
81118cdc:	9023883a 	mov	r17,r18
81118ce0:	8880400c 	andi	r2,r17,256
81118ce4:	4825883a 	mov	r18,r9
81118ce8:	10000426 	beq	r2,zero,81118cfc <__svfscanf_r+0x1250>
81118cec:	d9800104 	addi	r6,sp,4
81118cf0:	3400be36 	bltu	r6,r16,81118fec <__svfscanf_r+0x1540>
81118cf4:	da000104 	addi	r8,sp,4
81118cf8:	443bae26 	beq	r8,r16,81117bb4 <__reset+0xfb0f7bb4>
81118cfc:	8880040c 	andi	r2,r17,16
81118d00:	10009326 	beq	r2,zero,81118f50 <__svfscanf_r+0x14a4>
81118d04:	d8800104 	addi	r2,sp,4
81118d08:	80a1c83a 	sub	r16,r16,r2
81118d0c:	8521883a 	add	r16,r16,r20
81118d10:	003d0606 	br	8111812c <__reset+0xfb0f812c>
81118d14:	01604534 	movhi	r5,33044
81118d18:	8c63883a 	add	r17,r17,r17
81118d1c:	29792d84 	addi	r5,r5,-6986
81118d20:	2c45883a 	add	r2,r5,r17
81118d24:	1440000f 	ldh	r17,0(r2)
81118d28:	00bd1fc4 	movi	r2,-2945
81118d2c:	90a4703a 	and	r18,r18,r2
81118d30:	003fd006 	br	81118c74 <__reset+0xfb0f8c74>
81118d34:	9082000c 	andi	r2,r18,2048
81118d38:	103fce26 	beq	r2,zero,81118c74 <__reset+0xfb0f8c74>
81118d3c:	8800021e 	bne	r17,zero,81118d48 <__svfscanf_r+0x129c>
81118d40:	94808014 	ori	r18,r18,512
81118d44:	04400204 	movi	r17,8
81118d48:	9081000c 	andi	r2,r18,1024
81118d4c:	10009426 	beq	r2,zero,81118fa0 <__svfscanf_r+0x14f4>
81118d50:	00be9fc4 	movi	r2,-1409
81118d54:	90a4703a 	and	r18,r18,r2
81118d58:	003fc606 	br	81118c74 <__reset+0xfb0f8c74>
81118d5c:	9080200c 	andi	r2,r18,128
81118d60:	103fdd26 	beq	r2,zero,81118cd8 <__reset+0xfb0f8cd8>
81118d64:	9224703a 	and	r18,r18,r8
81118d68:	003fc206 	br	81118c74 <__reset+0xfb0f8c74>
81118d6c:	9800011e 	bne	r19,zero,81118d74 <__svfscanf_r+0x12c8>
81118d70:	04ffffc4 	movi	r19,-1
81118d74:	8900004c 	andi	r4,r17,1
81118d78:	20005b1e 	bne	r4,zero,81118ee8 <__svfscanf_r+0x143c>
81118d7c:	8c40040c 	andi	r17,r17,16
81118d80:	88003026 	beq	r17,zero,81118e44 <__svfscanf_r+0x1398>
81118d84:	0021883a 	mov	r16,zero
81118d88:	00000306 	br	81118d98 <__svfscanf_r+0x12ec>
81118d8c:	18800003 	ldbu	r2,0(r3)
81118d90:	3885883a 	add	r2,r7,r2
81118d94:	10800043 	ldbu	r2,1(r2)
81118d98:	1080020c 	andi	r2,r2,8
81118d9c:	103ce31e 	bne	r2,zero,8111812c <__reset+0xfb0f812c>
81118da0:	e0800117 	ldw	r2,4(fp)
81118da4:	18c00044 	addi	r3,r3,1
81118da8:	84000044 	addi	r16,r16,1
81118dac:	10bfffc4 	addi	r2,r2,-1
81118db0:	e0800115 	stw	r2,4(fp)
81118db4:	e0c00015 	stw	r3,0(fp)
81118db8:	84fcdc26 	beq	r16,r19,8111812c <__reset+0xfb0f812c>
81118dbc:	00bff316 	blt	zero,r2,81118d8c <__reset+0xfb0f8d8c>
81118dc0:	e00b883a 	mov	r5,fp
81118dc4:	b009883a 	mov	r4,r22
81118dc8:	1112dd00 	call	81112dd0 <__srefill_r>
81118dcc:	103cd71e 	bne	r2,zero,8111812c <__reset+0xfb0f812c>
81118dd0:	b9c00017 	ldw	r7,0(r23)
81118dd4:	e0c00017 	ldw	r3,0(fp)
81118dd8:	003fec06 	br	81118d8c <__reset+0xfb0f8d8c>
81118ddc:	e00b883a 	mov	r5,fp
81118de0:	b009883a 	mov	r4,r22
81118de4:	d980a715 	stw	r6,668(sp)
81118de8:	d9c0aa15 	stw	r7,680(sp)
81118dec:	da00a815 	stw	r8,672(sp)
81118df0:	da40a915 	stw	r9,676(sp)
81118df4:	dac0a615 	stw	r11,664(sp)
81118df8:	1112dd00 	call	81112dd0 <__srefill_r>
81118dfc:	d980a717 	ldw	r6,668(sp)
81118e00:	d9c0aa17 	ldw	r7,680(sp)
81118e04:	da00a817 	ldw	r8,672(sp)
81118e08:	da40a917 	ldw	r9,676(sp)
81118e0c:	dac0a617 	ldw	r11,664(sp)
81118e10:	103fa026 	beq	r2,zero,81118c94 <__reset+0xfb0f8c94>
81118e14:	003fb006 	br	81118cd8 <__reset+0xfb0f8cd8>
81118e18:	8821883a 	mov	r16,r17
81118e1c:	b019883a 	mov	r12,r22
81118e20:	9823883a 	mov	r17,r19
81118e24:	182d883a 	mov	r22,r3
81118e28:	00bfbfc4 	movi	r2,-257
81118e2c:	a0a8703a 	and	r20,r20,r2
81118e30:	003e6706 	br	811187d0 <__reset+0xfb0f87d0>
81118e34:	000f883a 	mov	r7,zero
81118e38:	003f2806 	br	81118adc <__reset+0xfb0f8adc>
81118e3c:	d800a215 	stw	zero,648(sp)
81118e40:	003de306 	br	811185d0 <__reset+0xfb0f85d0>
81118e44:	da009c17 	ldw	r8,624(sp)
81118e48:	9abfffc4 	addi	r10,r19,-1
81118e4c:	44400017 	ldw	r17,0(r8)
81118e50:	44000104 	addi	r16,r8,4
81118e54:	880b883a 	mov	r5,r17
81118e58:	8aa9883a 	add	r20,r17,r10
81118e5c:	00000606 	br	81118e78 <__svfscanf_r+0x13cc>
81118e60:	e0c00017 	ldw	r3,0(fp)
81118e64:	b9000017 	ldw	r4,0(r23)
81118e68:	a80b883a 	mov	r5,r21
81118e6c:	18800003 	ldbu	r2,0(r3)
81118e70:	2085883a 	add	r2,r4,r2
81118e74:	10800043 	ldbu	r2,1(r2)
81118e78:	1080020c 	andi	r2,r2,8
81118e7c:	1000551e 	bne	r2,zero,81118fd4 <__svfscanf_r+0x1528>
81118e80:	e0800117 	ldw	r2,4(fp)
81118e84:	19000044 	addi	r4,r3,1
81118e88:	e1000015 	stw	r4,0(fp)
81118e8c:	10bfffc4 	addi	r2,r2,-1
81118e90:	e0800115 	stw	r2,4(fp)
81118e94:	18800003 	ldbu	r2,0(r3)
81118e98:	2d400044 	addi	r21,r5,1
81118e9c:	a827883a 	mov	r19,r21
81118ea0:	28800005 	stb	r2,0(r5)
81118ea4:	2d000626 	beq	r5,r20,81118ec0 <__svfscanf_r+0x1414>
81118ea8:	e0800117 	ldw	r2,4(fp)
81118eac:	00bfec16 	blt	zero,r2,81118e60 <__reset+0xfb0f8e60>
81118eb0:	e00b883a 	mov	r5,fp
81118eb4:	b009883a 	mov	r4,r22
81118eb8:	1112dd00 	call	81112dd0 <__srefill_r>
81118ebc:	103fe826 	beq	r2,zero,81118e60 <__reset+0xfb0f8e60>
81118ec0:	da00a017 	ldw	r8,640(sp)
81118ec4:	dd009d17 	ldw	r20,628(sp)
81118ec8:	9c63c83a 	sub	r17,r19,r17
81118ecc:	42000044 	addi	r8,r8,1
81118ed0:	98000005 	stb	zero,0(r19)
81118ed4:	9465883a 	add	r18,r18,r17
81118ed8:	da00a015 	stw	r8,640(sp)
81118edc:	dc009c15 	stw	r16,624(sp)
81118ee0:	a00d883a 	mov	r6,r20
81118ee4:	003b2f06 	br	81117ba4 <__reset+0xfb0f7ba4>
81118ee8:	dd409904 	addi	r21,sp,612
81118eec:	8c40040c 	andi	r17,r17,16
81118ef0:	01800204 	movi	r6,8
81118ef4:	000b883a 	mov	r5,zero
81118ef8:	a809883a 	mov	r4,r21
81118efc:	1112acc0 	call	81112acc <memset>
81118f00:	8800401e 	bne	r17,zero,81119004 <__svfscanf_r+0x1558>
81118f04:	da009c17 	ldw	r8,624(sp)
81118f08:	45000017 	ldw	r20,0(r8)
81118f0c:	42000104 	addi	r8,r8,4
81118f10:	da009c15 	stw	r8,624(sp)
81118f14:	000d883a 	mov	r6,zero
81118f18:	3021883a 	mov	r16,r6
81118f1c:	dc409f15 	stw	r17,636(sp)
81118f20:	e0800017 	ldw	r2,0(fp)
81118f24:	b8c00017 	ldw	r3,0(r23)
81118f28:	10800003 	ldbu	r2,0(r2)
81118f2c:	1885883a 	add	r2,r3,r2
81118f30:	10800043 	ldbu	r2,1(r2)
81118f34:	1080020c 	andi	r2,r2,8
81118f38:	1000011e 	bne	r2,zero,81118f40 <__svfscanf_r+0x1494>
81118f3c:	9800701e 	bne	r19,zero,81119100 <__svfscanf_r+0x1654>
81118f40:	dc409f17 	ldw	r17,636(sp)
81118f44:	883cdd1e 	bne	r17,zero,811182bc <__reset+0xfb0f82bc>
81118f48:	a0000015 	stw	zero,0(r20)
81118f4c:	003cd806 	br	811182b0 <__reset+0xfb0f82b0>
81118f50:	d9c09e17 	ldw	r7,632(sp)
81118f54:	da00a117 	ldw	r8,644(sp)
81118f58:	000d883a 	mov	r6,zero
81118f5c:	d9400104 	addi	r5,sp,4
81118f60:	b009883a 	mov	r4,r22
81118f64:	80000005 	stb	zero,0(r16)
81118f68:	403ee83a 	callr	r8
81118f6c:	88c0080c 	andi	r3,r17,32
81118f70:	1800121e 	bne	r3,zero,81118fbc <__svfscanf_r+0x1510>
81118f74:	88c0010c 	andi	r3,r17,4
81118f78:	18004d26 	beq	r3,zero,811190b0 <__svfscanf_r+0x1604>
81118f7c:	da009c17 	ldw	r8,624(sp)
81118f80:	40c00017 	ldw	r3,0(r8)
81118f84:	42000104 	addi	r8,r8,4
81118f88:	da009c15 	stw	r8,624(sp)
81118f8c:	1880000d 	sth	r2,0(r3)
81118f90:	da00a017 	ldw	r8,640(sp)
81118f94:	42000044 	addi	r8,r8,1
81118f98:	da00a015 	stw	r8,640(sp)
81118f9c:	003f5906 	br	81118d04 <__reset+0xfb0f8d04>
81118fa0:	00bf1fc4 	movi	r2,-897
81118fa4:	90a4703a 	and	r18,r18,r2
81118fa8:	38000226 	beq	r7,zero,81118fb4 <__svfscanf_r+0x1508>
81118fac:	39ffffc4 	addi	r7,r7,-1
81118fb0:	9cc00044 	addi	r19,r19,1
81118fb4:	a5000044 	addi	r20,r20,1
81118fb8:	003f3006 	br	81118c7c <__reset+0xfb0f8c7c>
81118fbc:	da009c17 	ldw	r8,624(sp)
81118fc0:	40c00017 	ldw	r3,0(r8)
81118fc4:	42000104 	addi	r8,r8,4
81118fc8:	da009c15 	stw	r8,624(sp)
81118fcc:	18800015 	stw	r2,0(r3)
81118fd0:	003fef06 	br	81118f90 <__reset+0xfb0f8f90>
81118fd4:	2827883a 	mov	r19,r5
81118fd8:	003fb906 	br	81118ec0 <__reset+0xfb0f8ec0>
81118fdc:	01be1fc4 	movi	r6,-1921
81118fe0:	a1a8703a 	and	r20,r20,r6
81118fe4:	05400044 	movi	r21,1
81118fe8:	003de906 	br	81118790 <__reset+0xfb0f8790>
81118fec:	817fffc7 	ldb	r5,-1(r16)
81118ff0:	e00d883a 	mov	r6,fp
81118ff4:	b009883a 	mov	r4,r22
81118ff8:	843fffc4 	addi	r16,r16,-1
81118ffc:	11215a40 	call	811215a4 <_ungetc_r>
81119000:	003f3c06 	br	81118cf4 <__reset+0xfb0f8cf4>
81119004:	dd009b04 	addi	r20,sp,620
81119008:	003fc206 	br	81118f14 <__reset+0xfb0f8f14>
8111900c:	00be1fc4 	movi	r2,-1921
81119010:	a0a8703a 	and	r20,r20,r2
81119014:	05800044 	movi	r22,1
81119018:	003ddd06 	br	81118790 <__reset+0xfb0f8790>
8111901c:	d8c09f17 	ldw	r3,636(sp)
81119020:	88e3c83a 	sub	r17,r17,r3
81119024:	044dc83a 	sub	r6,zero,r17
81119028:	883e2126 	beq	r17,zero,811188b0 <__reset+0xfb0f88b0>
8111902c:	d88055c4 	addi	r2,sp,343
81119030:	80800136 	bltu	r16,r2,81119038 <__svfscanf_r+0x158c>
81119034:	dc005584 	addi	r16,sp,342
81119038:	01604534 	movhi	r5,33044
8111903c:	29792c04 	addi	r5,r5,-6992
81119040:	8009883a 	mov	r4,r16
81119044:	11130e40 	call	811130e4 <sprintf>
81119048:	003e1906 	br	811188b0 <__reset+0xfb0f88b0>
8111904c:	d8c0a517 	ldw	r3,660(sp)
81119050:	000d883a 	mov	r6,zero
81119054:	01c00284 	movi	r7,10
81119058:	19400044 	addi	r5,r3,1
8111905c:	b009883a 	mov	r4,r22
81119060:	11133900 	call	81113390 <_strtol_r>
81119064:	da00a417 	ldw	r8,656(sp)
81119068:	dc00a517 	ldw	r16,660(sp)
8111906c:	120dc83a 	sub	r6,r2,r8
81119070:	003fee06 	br	8111902c <__reset+0xfb0f902c>
81119074:	da009c17 	ldw	r8,624(sp)
81119078:	180b883a 	mov	r5,r3
8111907c:	8009883a 	mov	r4,r16
81119080:	45000017 	ldw	r20,0(r8)
81119084:	44400104 	addi	r17,r8,4
81119088:	d8c0a615 	stw	r3,664(sp)
8111908c:	111dec00 	call	8111dec0 <__fpclassifyd>
81119090:	d8c0a617 	ldw	r3,664(sp)
81119094:	10006426 	beq	r2,zero,81119228 <__svfscanf_r+0x177c>
81119098:	8009883a 	mov	r4,r16
8111909c:	180b883a 	mov	r5,r3
811190a0:	11116140 	call	81111614 <__truncdfsf2>
811190a4:	a0800015 	stw	r2,0(r20)
811190a8:	dc409c15 	stw	r17,624(sp)
811190ac:	003e0f06 	br	811188ec <__reset+0xfb0f88ec>
811190b0:	88c0004c 	andi	r3,r17,1
811190b4:	183fc11e 	bne	r3,zero,81118fbc <__reset+0xfb0f8fbc>
811190b8:	8c40008c 	andi	r17,r17,2
811190bc:	883fbf26 	beq	r17,zero,81118fbc <__reset+0xfb0f8fbc>
811190c0:	da00a117 	ldw	r8,644(sp)
811190c4:	00a044b4 	movhi	r2,33042
811190c8:	10bed704 	addi	r2,r2,-1188
811190cc:	d9c09e17 	ldw	r7,632(sp)
811190d0:	000d883a 	mov	r6,zero
811190d4:	d9400104 	addi	r5,sp,4
811190d8:	b009883a 	mov	r4,r22
811190dc:	40806226 	beq	r8,r2,81119268 <__svfscanf_r+0x17bc>
811190e0:	111f8740 	call	8111f874 <_strtoll_r>
811190e4:	da009c17 	ldw	r8,624(sp)
811190e8:	41000017 	ldw	r4,0(r8)
811190ec:	42000104 	addi	r8,r8,4
811190f0:	da009c15 	stw	r8,624(sp)
811190f4:	20800015 	stw	r2,0(r4)
811190f8:	20c00115 	stw	r3,4(r4)
811190fc:	003fa406 	br	81118f90 <__reset+0xfb0f8f90>
81119100:	111c3500 	call	8111c350 <__locale_mb_cur_max>
81119104:	80bca726 	beq	r16,r2,811183a4 <__reset+0xfb0f83a4>
81119108:	e0800017 	ldw	r2,0(fp)
8111910c:	e1000117 	ldw	r4,4(fp)
81119110:	d8c00104 	addi	r3,sp,4
81119114:	12000003 	ldbu	r8,0(r2)
81119118:	213fffc4 	addi	r4,r4,-1
8111911c:	10800044 	addi	r2,r2,1
81119120:	e1000115 	stw	r4,4(fp)
81119124:	e0800015 	stw	r2,0(fp)
81119128:	84400044 	addi	r17,r16,1
8111912c:	dd400015 	stw	r21,0(sp)
81119130:	1c21883a 	add	r16,r3,r16
81119134:	b009883a 	mov	r4,r22
81119138:	880f883a 	mov	r7,r17
8111913c:	180d883a 	mov	r6,r3
81119140:	a00b883a 	mov	r5,r20
81119144:	82000005 	stb	r8,0(r16)
81119148:	111c40c0 	call	8111c40c <_mbrtowc_r>
8111914c:	013fffc4 	movi	r4,-1
81119150:	113c9426 	beq	r2,r4,811183a4 <__reset+0xfb0f83a4>
81119154:	103c881e 	bne	r2,zero,81118378 <__reset+0xfb0f8378>
81119158:	a0000015 	stw	zero,0(r20)
8111915c:	0009883a 	mov	r4,zero
81119160:	111c2900 	call	8111c290 <iswspace>
81119164:	10001a26 	beq	r2,zero,811191d0 <__svfscanf_r+0x1724>
81119168:	8821883a 	mov	r16,r17
8111916c:	dc409f17 	ldw	r17,636(sp)
81119170:	803f7426 	beq	r16,zero,81118f44 <__reset+0xfb0f8f44>
81119174:	843fffc4 	addi	r16,r16,-1
81119178:	d9800104 	addi	r6,sp,4
8111917c:	342b883a 	add	r21,r6,r16
81119180:	00000106 	br	81119188 <__svfscanf_r+0x16dc>
81119184:	843fffc4 	addi	r16,r16,-1
81119188:	a9400003 	ldbu	r5,0(r21)
8111918c:	e00d883a 	mov	r6,fp
81119190:	b009883a 	mov	r4,r22
81119194:	11215a40 	call	811215a4 <_ungetc_r>
81119198:	ad7fffc4 	addi	r21,r21,-1
8111919c:	803ff91e 	bne	r16,zero,81119184 <__reset+0xfb0f9184>
811191a0:	003f6806 	br	81118f44 <__reset+0xfb0f8f44>
811191a4:	d9800104 	addi	r6,sp,4
811191a8:	802b883a 	mov	r21,r16
811191ac:	343a812e 	bgeu	r6,r16,81117bb4 <__reset+0xfb0f7bb4>
811191b0:	ad7fffc4 	addi	r21,r21,-1
811191b4:	a9400007 	ldb	r5,0(r21)
811191b8:	e00d883a 	mov	r6,fp
811191bc:	b009883a 	mov	r4,r22
811191c0:	11215a40 	call	811215a4 <_ungetc_r>
811191c4:	da000104 	addi	r8,sp,4
811191c8:	457ff91e 	bne	r8,r21,811191b0 <__reset+0xfb0f91b0>
811191cc:	003a7906 	br	81117bb4 <__reset+0xfb0f7bb4>
811191d0:	da009f17 	ldw	r8,636(sp)
811191d4:	9465883a 	add	r18,r18,r17
811191d8:	9cffffc4 	addi	r19,r19,-1
811191dc:	4000051e 	bne	r8,zero,811191f4 <__svfscanf_r+0x1748>
811191e0:	a5000104 	addi	r20,r20,4
811191e4:	0021883a 	mov	r16,zero
811191e8:	003c6606 	br	81118384 <__reset+0xfb0f8384>
811191ec:	a1000017 	ldw	r4,0(r20)
811191f0:	003fdb06 	br	81119160 <__reset+0xfb0f9160>
811191f4:	0021883a 	mov	r16,zero
811191f8:	003c6206 	br	81118384 <__reset+0xfb0f8384>
811191fc:	d8800104 	addi	r2,sp,4
81119200:	802b883a 	mov	r21,r16
81119204:	143a6b2e 	bgeu	r2,r16,81117bb4 <__reset+0xfb0f7bb4>
81119208:	ad7fffc4 	addi	r21,r21,-1
8111920c:	a9400007 	ldb	r5,0(r21)
81119210:	e00d883a 	mov	r6,fp
81119214:	b009883a 	mov	r4,r22
81119218:	11215a40 	call	811215a4 <_ungetc_r>
8111921c:	d8c00104 	addi	r3,sp,4
81119220:	1d7ff91e 	bne	r3,r21,81119208 <__reset+0xfb0f9208>
81119224:	003a6306 	br	81117bb4 <__reset+0xfb0f7bb4>
81119228:	0009883a 	mov	r4,zero
8111922c:	111e0040 	call	8111e004 <nanf>
81119230:	a0800015 	stw	r2,0(r20)
81119234:	dc409c15 	stw	r17,624(sp)
81119238:	003dac06 	br	811188ec <__reset+0xfb0f88ec>
8111923c:	d9000104 	addi	r4,sp,4
81119240:	802b883a 	mov	r21,r16
81119244:	243a5b2e 	bgeu	r4,r16,81117bb4 <__reset+0xfb0f7bb4>
81119248:	ad7fffc4 	addi	r21,r21,-1
8111924c:	a9400007 	ldb	r5,0(r21)
81119250:	e00d883a 	mov	r6,fp
81119254:	b009883a 	mov	r4,r22
81119258:	11215a40 	call	811215a4 <_ungetc_r>
8111925c:	d9400104 	addi	r5,sp,4
81119260:	2d7ff91e 	bne	r5,r21,81119248 <__reset+0xfb0f9248>
81119264:	003a5306 	br	81117bb4 <__reset+0xfb0f7bb4>
81119268:	111fdcc0 	call	8111fdcc <_strtoull_r>
8111926c:	003f9d06 	br	811190e4 <__reset+0xfb0f90e4>

81119270 <vfscanf>:
81119270:	00a04534 	movhi	r2,33044
81119274:	defffb04 	addi	sp,sp,-20
81119278:	10821504 	addi	r2,r2,2132
8111927c:	de00012e 	bgeu	sp,et,81119284 <vfscanf+0x14>
81119280:	003b68fa 	trap	3
81119284:	dc000215 	stw	r16,8(sp)
81119288:	14000017 	ldw	r16,0(r2)
8111928c:	dc400315 	stw	r17,12(sp)
81119290:	dfc00415 	stw	ra,16(sp)
81119294:	2023883a 	mov	r17,r4
81119298:	80000826 	beq	r16,zero,811192bc <vfscanf+0x4c>
8111929c:	80800e17 	ldw	r2,56(r16)
811192a0:	1000061e 	bne	r2,zero,811192bc <vfscanf+0x4c>
811192a4:	8009883a 	mov	r4,r16
811192a8:	d9400015 	stw	r5,0(sp)
811192ac:	d9800115 	stw	r6,4(sp)
811192b0:	111b4280 	call	8111b428 <__sinit>
811192b4:	d9800117 	ldw	r6,4(sp)
811192b8:	d9400017 	ldw	r5,0(sp)
811192bc:	300f883a 	mov	r7,r6
811192c0:	8009883a 	mov	r4,r16
811192c4:	280d883a 	mov	r6,r5
811192c8:	880b883a 	mov	r5,r17
811192cc:	dfc00417 	ldw	ra,16(sp)
811192d0:	dc400317 	ldw	r17,12(sp)
811192d4:	dc000217 	ldw	r16,8(sp)
811192d8:	dec00504 	addi	sp,sp,20
811192dc:	1117aac1 	jmpi	81117aac <__svfscanf_r>

811192e0 <__svfscanf>:
811192e0:	00a04534 	movhi	r2,33044
811192e4:	10821504 	addi	r2,r2,2132
811192e8:	300f883a 	mov	r7,r6
811192ec:	280d883a 	mov	r6,r5
811192f0:	200b883a 	mov	r5,r4
811192f4:	11000017 	ldw	r4,0(r2)
811192f8:	1117aac1 	jmpi	81117aac <__svfscanf_r>

811192fc <_vfscanf_r>:
811192fc:	defffb04 	addi	sp,sp,-20
81119300:	de00012e 	bgeu	sp,et,81119308 <_vfscanf_r+0xc>
81119304:	003b68fa 	trap	3
81119308:	dc000315 	stw	r16,12(sp)
8111930c:	dfc00415 	stw	ra,16(sp)
81119310:	2021883a 	mov	r16,r4
81119314:	20000926 	beq	r4,zero,8111933c <_vfscanf_r+0x40>
81119318:	20800e17 	ldw	r2,56(r4)
8111931c:	1000071e 	bne	r2,zero,8111933c <_vfscanf_r+0x40>
81119320:	d9400015 	stw	r5,0(sp)
81119324:	d9800115 	stw	r6,4(sp)
81119328:	d9c00215 	stw	r7,8(sp)
8111932c:	111b4280 	call	8111b428 <__sinit>
81119330:	d9c00217 	ldw	r7,8(sp)
81119334:	d9800117 	ldw	r6,4(sp)
81119338:	d9400017 	ldw	r5,0(sp)
8111933c:	8009883a 	mov	r4,r16
81119340:	dfc00417 	ldw	ra,16(sp)
81119344:	dc000317 	ldw	r16,12(sp)
81119348:	dec00504 	addi	sp,sp,20
8111934c:	1117aac1 	jmpi	81117aac <__svfscanf_r>

81119350 <_write_r>:
81119350:	defffd04 	addi	sp,sp,-12
81119354:	de00012e 	bgeu	sp,et,8111935c <_write_r+0xc>
81119358:	003b68fa 	trap	3
8111935c:	2805883a 	mov	r2,r5
81119360:	dc000015 	stw	r16,0(sp)
81119364:	04204534 	movhi	r16,33044
81119368:	dc400115 	stw	r17,4(sp)
8111936c:	300b883a 	mov	r5,r6
81119370:	84026e04 	addi	r16,r16,2488
81119374:	2023883a 	mov	r17,r4
81119378:	380d883a 	mov	r6,r7
8111937c:	1009883a 	mov	r4,r2
81119380:	dfc00215 	stw	ra,8(sp)
81119384:	80000015 	stw	zero,0(r16)
81119388:	1127fc40 	call	81127fc4 <write>
8111938c:	00ffffc4 	movi	r3,-1
81119390:	10c00526 	beq	r2,r3,811193a8 <_write_r+0x58>
81119394:	dfc00217 	ldw	ra,8(sp)
81119398:	dc400117 	ldw	r17,4(sp)
8111939c:	dc000017 	ldw	r16,0(sp)
811193a0:	dec00304 	addi	sp,sp,12
811193a4:	f800283a 	ret
811193a8:	80c00017 	ldw	r3,0(r16)
811193ac:	183ff926 	beq	r3,zero,81119394 <__reset+0xfb0f9394>
811193b0:	88c00015 	stw	r3,0(r17)
811193b4:	003ff706 	br	81119394 <__reset+0xfb0f9394>

811193b8 <__swsetup_r>:
811193b8:	00a04534 	movhi	r2,33044
811193bc:	defffd04 	addi	sp,sp,-12
811193c0:	10821504 	addi	r2,r2,2132
811193c4:	de00012e 	bgeu	sp,et,811193cc <__swsetup_r+0x14>
811193c8:	003b68fa 	trap	3
811193cc:	dc400115 	stw	r17,4(sp)
811193d0:	2023883a 	mov	r17,r4
811193d4:	11000017 	ldw	r4,0(r2)
811193d8:	dc000015 	stw	r16,0(sp)
811193dc:	dfc00215 	stw	ra,8(sp)
811193e0:	2821883a 	mov	r16,r5
811193e4:	20000226 	beq	r4,zero,811193f0 <__swsetup_r+0x38>
811193e8:	20800e17 	ldw	r2,56(r4)
811193ec:	10003126 	beq	r2,zero,811194b4 <__swsetup_r+0xfc>
811193f0:	8080030b 	ldhu	r2,12(r16)
811193f4:	10c0020c 	andi	r3,r2,8
811193f8:	1009883a 	mov	r4,r2
811193fc:	18000f26 	beq	r3,zero,8111943c <__swsetup_r+0x84>
81119400:	80c00417 	ldw	r3,16(r16)
81119404:	18001526 	beq	r3,zero,8111945c <__swsetup_r+0xa4>
81119408:	1100004c 	andi	r4,r2,1
8111940c:	20001c1e 	bne	r4,zero,81119480 <__swsetup_r+0xc8>
81119410:	1080008c 	andi	r2,r2,2
81119414:	1000291e 	bne	r2,zero,811194bc <__swsetup_r+0x104>
81119418:	80800517 	ldw	r2,20(r16)
8111941c:	80800215 	stw	r2,8(r16)
81119420:	18001c26 	beq	r3,zero,81119494 <__swsetup_r+0xdc>
81119424:	0005883a 	mov	r2,zero
81119428:	dfc00217 	ldw	ra,8(sp)
8111942c:	dc400117 	ldw	r17,4(sp)
81119430:	dc000017 	ldw	r16,0(sp)
81119434:	dec00304 	addi	sp,sp,12
81119438:	f800283a 	ret
8111943c:	2080040c 	andi	r2,r4,16
81119440:	10002e26 	beq	r2,zero,811194fc <__swsetup_r+0x144>
81119444:	2080010c 	andi	r2,r4,4
81119448:	10001e1e 	bne	r2,zero,811194c4 <__swsetup_r+0x10c>
8111944c:	80c00417 	ldw	r3,16(r16)
81119450:	20800214 	ori	r2,r4,8
81119454:	8080030d 	sth	r2,12(r16)
81119458:	183feb1e 	bne	r3,zero,81119408 <__reset+0xfb0f9408>
8111945c:	1100a00c 	andi	r4,r2,640
81119460:	01408004 	movi	r5,512
81119464:	217fe826 	beq	r4,r5,81119408 <__reset+0xfb0f9408>
81119468:	800b883a 	mov	r5,r16
8111946c:	8809883a 	mov	r4,r17
81119470:	1111fa40 	call	81111fa4 <__smakebuf_r>
81119474:	8080030b 	ldhu	r2,12(r16)
81119478:	80c00417 	ldw	r3,16(r16)
8111947c:	003fe206 	br	81119408 <__reset+0xfb0f9408>
81119480:	80800517 	ldw	r2,20(r16)
81119484:	80000215 	stw	zero,8(r16)
81119488:	0085c83a 	sub	r2,zero,r2
8111948c:	80800615 	stw	r2,24(r16)
81119490:	183fe41e 	bne	r3,zero,81119424 <__reset+0xfb0f9424>
81119494:	80c0030b 	ldhu	r3,12(r16)
81119498:	0005883a 	mov	r2,zero
8111949c:	1900200c 	andi	r4,r3,128
811194a0:	203fe126 	beq	r4,zero,81119428 <__reset+0xfb0f9428>
811194a4:	18c01014 	ori	r3,r3,64
811194a8:	80c0030d 	sth	r3,12(r16)
811194ac:	00bfffc4 	movi	r2,-1
811194b0:	003fdd06 	br	81119428 <__reset+0xfb0f9428>
811194b4:	111b4280 	call	8111b428 <__sinit>
811194b8:	003fcd06 	br	811193f0 <__reset+0xfb0f93f0>
811194bc:	0005883a 	mov	r2,zero
811194c0:	003fd606 	br	8111941c <__reset+0xfb0f941c>
811194c4:	81400c17 	ldw	r5,48(r16)
811194c8:	28000626 	beq	r5,zero,811194e4 <__swsetup_r+0x12c>
811194cc:	80801004 	addi	r2,r16,64
811194d0:	28800326 	beq	r5,r2,811194e0 <__swsetup_r+0x128>
811194d4:	8809883a 	mov	r4,r17
811194d8:	111b8c00 	call	8111b8c0 <_free_r>
811194dc:	8100030b 	ldhu	r4,12(r16)
811194e0:	80000c15 	stw	zero,48(r16)
811194e4:	80c00417 	ldw	r3,16(r16)
811194e8:	00bff6c4 	movi	r2,-37
811194ec:	1108703a 	and	r4,r2,r4
811194f0:	80000115 	stw	zero,4(r16)
811194f4:	80c00015 	stw	r3,0(r16)
811194f8:	003fd506 	br	81119450 <__reset+0xfb0f9450>
811194fc:	00800244 	movi	r2,9
81119500:	88800015 	stw	r2,0(r17)
81119504:	20801014 	ori	r2,r4,64
81119508:	8080030d 	sth	r2,12(r16)
8111950c:	00bfffc4 	movi	r2,-1
81119510:	003fc506 	br	81119428 <__reset+0xfb0f9428>

81119514 <_close_r>:
81119514:	defffd04 	addi	sp,sp,-12
81119518:	de00012e 	bgeu	sp,et,81119520 <_close_r+0xc>
8111951c:	003b68fa 	trap	3
81119520:	dc000015 	stw	r16,0(sp)
81119524:	04204534 	movhi	r16,33044
81119528:	dc400115 	stw	r17,4(sp)
8111952c:	84026e04 	addi	r16,r16,2488
81119530:	2023883a 	mov	r17,r4
81119534:	2809883a 	mov	r4,r5
81119538:	dfc00215 	stw	ra,8(sp)
8111953c:	80000015 	stw	zero,0(r16)
81119540:	11270e80 	call	811270e8 <close>
81119544:	00ffffc4 	movi	r3,-1
81119548:	10c00526 	beq	r2,r3,81119560 <_close_r+0x4c>
8111954c:	dfc00217 	ldw	ra,8(sp)
81119550:	dc400117 	ldw	r17,4(sp)
81119554:	dc000017 	ldw	r16,0(sp)
81119558:	dec00304 	addi	sp,sp,12
8111955c:	f800283a 	ret
81119560:	80c00017 	ldw	r3,0(r16)
81119564:	183ff926 	beq	r3,zero,8111954c <__reset+0xfb0f954c>
81119568:	88c00015 	stw	r3,0(r17)
8111956c:	003ff706 	br	8111954c <__reset+0xfb0f954c>

81119570 <quorem>:
81119570:	defff704 	addi	sp,sp,-36
81119574:	de00012e 	bgeu	sp,et,8111957c <quorem+0xc>
81119578:	003b68fa 	trap	3
8111957c:	dc800215 	stw	r18,8(sp)
81119580:	20800417 	ldw	r2,16(r4)
81119584:	2c800417 	ldw	r18,16(r5)
81119588:	dfc00815 	stw	ra,32(sp)
8111958c:	ddc00715 	stw	r23,28(sp)
81119590:	dd800615 	stw	r22,24(sp)
81119594:	dd400515 	stw	r21,20(sp)
81119598:	dd000415 	stw	r20,16(sp)
8111959c:	dcc00315 	stw	r19,12(sp)
811195a0:	dc400115 	stw	r17,4(sp)
811195a4:	dc000015 	stw	r16,0(sp)
811195a8:	14807116 	blt	r2,r18,81119770 <quorem+0x200>
811195ac:	94bfffc4 	addi	r18,r18,-1
811195b0:	94ad883a 	add	r22,r18,r18
811195b4:	b5ad883a 	add	r22,r22,r22
811195b8:	2c400504 	addi	r17,r5,20
811195bc:	8da9883a 	add	r20,r17,r22
811195c0:	25400504 	addi	r21,r4,20
811195c4:	282f883a 	mov	r23,r5
811195c8:	adad883a 	add	r22,r21,r22
811195cc:	a1400017 	ldw	r5,0(r20)
811195d0:	2021883a 	mov	r16,r4
811195d4:	b1000017 	ldw	r4,0(r22)
811195d8:	29400044 	addi	r5,r5,1
811195dc:	1124da80 	call	81124da8 <__udivsi3>
811195e0:	1027883a 	mov	r19,r2
811195e4:	10002c26 	beq	r2,zero,81119698 <quorem+0x128>
811195e8:	a813883a 	mov	r9,r21
811195ec:	880b883a 	mov	r5,r17
811195f0:	0009883a 	mov	r4,zero
811195f4:	000d883a 	mov	r6,zero
811195f8:	2a000017 	ldw	r8,0(r5)
811195fc:	49c00017 	ldw	r7,0(r9)
81119600:	29400104 	addi	r5,r5,4
81119604:	40bfffcc 	andi	r2,r8,65535
81119608:	14c5383a 	mul	r2,r2,r19
8111960c:	4010d43a 	srli	r8,r8,16
81119610:	38ffffcc 	andi	r3,r7,65535
81119614:	1105883a 	add	r2,r2,r4
81119618:	1008d43a 	srli	r4,r2,16
8111961c:	44d1383a 	mul	r8,r8,r19
81119620:	198d883a 	add	r6,r3,r6
81119624:	10ffffcc 	andi	r3,r2,65535
81119628:	30c7c83a 	sub	r3,r6,r3
8111962c:	380ed43a 	srli	r7,r7,16
81119630:	4105883a 	add	r2,r8,r4
81119634:	180dd43a 	srai	r6,r3,16
81119638:	113fffcc 	andi	r4,r2,65535
8111963c:	390fc83a 	sub	r7,r7,r4
81119640:	398d883a 	add	r6,r7,r6
81119644:	300e943a 	slli	r7,r6,16
81119648:	18ffffcc 	andi	r3,r3,65535
8111964c:	1008d43a 	srli	r4,r2,16
81119650:	38ceb03a 	or	r7,r7,r3
81119654:	49c00015 	stw	r7,0(r9)
81119658:	300dd43a 	srai	r6,r6,16
8111965c:	4a400104 	addi	r9,r9,4
81119660:	a17fe52e 	bgeu	r20,r5,811195f8 <__reset+0xfb0f95f8>
81119664:	b0800017 	ldw	r2,0(r22)
81119668:	10000b1e 	bne	r2,zero,81119698 <quorem+0x128>
8111966c:	b0bfff04 	addi	r2,r22,-4
81119670:	a880082e 	bgeu	r21,r2,81119694 <quorem+0x124>
81119674:	b0ffff17 	ldw	r3,-4(r22)
81119678:	18000326 	beq	r3,zero,81119688 <quorem+0x118>
8111967c:	00000506 	br	81119694 <quorem+0x124>
81119680:	10c00017 	ldw	r3,0(r2)
81119684:	1800031e 	bne	r3,zero,81119694 <quorem+0x124>
81119688:	10bfff04 	addi	r2,r2,-4
8111968c:	94bfffc4 	addi	r18,r18,-1
81119690:	a8bffb36 	bltu	r21,r2,81119680 <__reset+0xfb0f9680>
81119694:	84800415 	stw	r18,16(r16)
81119698:	b80b883a 	mov	r5,r23
8111969c:	8009883a 	mov	r4,r16
811196a0:	111d1900 	call	8111d190 <__mcmp>
811196a4:	10002616 	blt	r2,zero,81119740 <quorem+0x1d0>
811196a8:	9cc00044 	addi	r19,r19,1
811196ac:	a805883a 	mov	r2,r21
811196b0:	000b883a 	mov	r5,zero
811196b4:	11000017 	ldw	r4,0(r2)
811196b8:	89800017 	ldw	r6,0(r17)
811196bc:	10800104 	addi	r2,r2,4
811196c0:	20ffffcc 	andi	r3,r4,65535
811196c4:	194b883a 	add	r5,r3,r5
811196c8:	30ffffcc 	andi	r3,r6,65535
811196cc:	28c7c83a 	sub	r3,r5,r3
811196d0:	300cd43a 	srli	r6,r6,16
811196d4:	2008d43a 	srli	r4,r4,16
811196d8:	180bd43a 	srai	r5,r3,16
811196dc:	18ffffcc 	andi	r3,r3,65535
811196e0:	2189c83a 	sub	r4,r4,r6
811196e4:	2149883a 	add	r4,r4,r5
811196e8:	200c943a 	slli	r6,r4,16
811196ec:	8c400104 	addi	r17,r17,4
811196f0:	200bd43a 	srai	r5,r4,16
811196f4:	30c6b03a 	or	r3,r6,r3
811196f8:	10ffff15 	stw	r3,-4(r2)
811196fc:	a47fed2e 	bgeu	r20,r17,811196b4 <__reset+0xfb0f96b4>
81119700:	9485883a 	add	r2,r18,r18
81119704:	1085883a 	add	r2,r2,r2
81119708:	a887883a 	add	r3,r21,r2
8111970c:	18800017 	ldw	r2,0(r3)
81119710:	10000b1e 	bne	r2,zero,81119740 <quorem+0x1d0>
81119714:	18bfff04 	addi	r2,r3,-4
81119718:	a880082e 	bgeu	r21,r2,8111973c <quorem+0x1cc>
8111971c:	18ffff17 	ldw	r3,-4(r3)
81119720:	18000326 	beq	r3,zero,81119730 <quorem+0x1c0>
81119724:	00000506 	br	8111973c <quorem+0x1cc>
81119728:	10c00017 	ldw	r3,0(r2)
8111972c:	1800031e 	bne	r3,zero,8111973c <quorem+0x1cc>
81119730:	10bfff04 	addi	r2,r2,-4
81119734:	94bfffc4 	addi	r18,r18,-1
81119738:	a8bffb36 	bltu	r21,r2,81119728 <__reset+0xfb0f9728>
8111973c:	84800415 	stw	r18,16(r16)
81119740:	9805883a 	mov	r2,r19
81119744:	dfc00817 	ldw	ra,32(sp)
81119748:	ddc00717 	ldw	r23,28(sp)
8111974c:	dd800617 	ldw	r22,24(sp)
81119750:	dd400517 	ldw	r21,20(sp)
81119754:	dd000417 	ldw	r20,16(sp)
81119758:	dcc00317 	ldw	r19,12(sp)
8111975c:	dc800217 	ldw	r18,8(sp)
81119760:	dc400117 	ldw	r17,4(sp)
81119764:	dc000017 	ldw	r16,0(sp)
81119768:	dec00904 	addi	sp,sp,36
8111976c:	f800283a 	ret
81119770:	0005883a 	mov	r2,zero
81119774:	003ff306 	br	81119744 <__reset+0xfb0f9744>

81119778 <_dtoa_r>:
81119778:	deffde04 	addi	sp,sp,-136
8111977c:	de00012e 	bgeu	sp,et,81119784 <_dtoa_r+0xc>
81119780:	003b68fa 	trap	3
81119784:	20801017 	ldw	r2,64(r4)
81119788:	df002015 	stw	fp,128(sp)
8111978c:	dcc01b15 	stw	r19,108(sp)
81119790:	dc801a15 	stw	r18,104(sp)
81119794:	dc401915 	stw	r17,100(sp)
81119798:	dc001815 	stw	r16,96(sp)
8111979c:	dfc02115 	stw	ra,132(sp)
811197a0:	ddc01f15 	stw	r23,124(sp)
811197a4:	dd801e15 	stw	r22,120(sp)
811197a8:	dd401d15 	stw	r21,116(sp)
811197ac:	dd001c15 	stw	r20,112(sp)
811197b0:	d9c00315 	stw	r7,12(sp)
811197b4:	2039883a 	mov	fp,r4
811197b8:	3023883a 	mov	r17,r6
811197bc:	2825883a 	mov	r18,r5
811197c0:	dc002417 	ldw	r16,144(sp)
811197c4:	3027883a 	mov	r19,r6
811197c8:	10000826 	beq	r2,zero,811197ec <_dtoa_r+0x74>
811197cc:	21801117 	ldw	r6,68(r4)
811197d0:	00c00044 	movi	r3,1
811197d4:	100b883a 	mov	r5,r2
811197d8:	1986983a 	sll	r3,r3,r6
811197dc:	11800115 	stw	r6,4(r2)
811197e0:	10c00215 	stw	r3,8(r2)
811197e4:	111c9400 	call	8111c940 <_Bfree>
811197e8:	e0001015 	stw	zero,64(fp)
811197ec:	88002e16 	blt	r17,zero,811198a8 <_dtoa_r+0x130>
811197f0:	80000015 	stw	zero,0(r16)
811197f4:	889ffc2c 	andhi	r2,r17,32752
811197f8:	00dffc34 	movhi	r3,32752
811197fc:	10c01c26 	beq	r2,r3,81119870 <_dtoa_r+0xf8>
81119800:	000d883a 	mov	r6,zero
81119804:	000f883a 	mov	r7,zero
81119808:	9009883a 	mov	r4,r18
8111980c:	980b883a 	mov	r5,r19
81119810:	11262040 	call	81126204 <__eqdf2>
81119814:	10002b1e 	bne	r2,zero,811198c4 <_dtoa_r+0x14c>
81119818:	d9c02317 	ldw	r7,140(sp)
8111981c:	00800044 	movi	r2,1
81119820:	38800015 	stw	r2,0(r7)
81119824:	d8802517 	ldw	r2,148(sp)
81119828:	10019e26 	beq	r2,zero,81119ea4 <_dtoa_r+0x72c>
8111982c:	d8c02517 	ldw	r3,148(sp)
81119830:	00a04534 	movhi	r2,33044
81119834:	10b91b44 	addi	r2,r2,-7059
81119838:	18800015 	stw	r2,0(r3)
8111983c:	10bfffc4 	addi	r2,r2,-1
81119840:	dfc02117 	ldw	ra,132(sp)
81119844:	df002017 	ldw	fp,128(sp)
81119848:	ddc01f17 	ldw	r23,124(sp)
8111984c:	dd801e17 	ldw	r22,120(sp)
81119850:	dd401d17 	ldw	r21,116(sp)
81119854:	dd001c17 	ldw	r20,112(sp)
81119858:	dcc01b17 	ldw	r19,108(sp)
8111985c:	dc801a17 	ldw	r18,104(sp)
81119860:	dc401917 	ldw	r17,100(sp)
81119864:	dc001817 	ldw	r16,96(sp)
81119868:	dec02204 	addi	sp,sp,136
8111986c:	f800283a 	ret
81119870:	d8c02317 	ldw	r3,140(sp)
81119874:	0089c3c4 	movi	r2,9999
81119878:	18800015 	stw	r2,0(r3)
8111987c:	90017726 	beq	r18,zero,81119e5c <_dtoa_r+0x6e4>
81119880:	00a04534 	movhi	r2,33044
81119884:	10b93904 	addi	r2,r2,-6940
81119888:	d9002517 	ldw	r4,148(sp)
8111988c:	203fec26 	beq	r4,zero,81119840 <__reset+0xfb0f9840>
81119890:	10c000c7 	ldb	r3,3(r2)
81119894:	1801781e 	bne	r3,zero,81119e78 <_dtoa_r+0x700>
81119898:	10c000c4 	addi	r3,r2,3
8111989c:	d9802517 	ldw	r6,148(sp)
811198a0:	30c00015 	stw	r3,0(r6)
811198a4:	003fe606 	br	81119840 <__reset+0xfb0f9840>
811198a8:	04e00034 	movhi	r19,32768
811198ac:	9cffffc4 	addi	r19,r19,-1
811198b0:	00800044 	movi	r2,1
811198b4:	8ce6703a 	and	r19,r17,r19
811198b8:	80800015 	stw	r2,0(r16)
811198bc:	9823883a 	mov	r17,r19
811198c0:	003fcc06 	br	811197f4 <__reset+0xfb0f97f4>
811198c4:	d8800204 	addi	r2,sp,8
811198c8:	d8800015 	stw	r2,0(sp)
811198cc:	d9c00104 	addi	r7,sp,4
811198d0:	900b883a 	mov	r5,r18
811198d4:	980d883a 	mov	r6,r19
811198d8:	e009883a 	mov	r4,fp
811198dc:	8820d53a 	srli	r16,r17,20
811198e0:	111d56c0 	call	8111d56c <__d2b>
811198e4:	d8800915 	stw	r2,36(sp)
811198e8:	8001651e 	bne	r16,zero,81119e80 <_dtoa_r+0x708>
811198ec:	dd800217 	ldw	r22,8(sp)
811198f0:	dc000117 	ldw	r16,4(sp)
811198f4:	00800804 	movi	r2,32
811198f8:	b421883a 	add	r16,r22,r16
811198fc:	80c10c84 	addi	r3,r16,1074
81119900:	10c2d10e 	bge	r2,r3,8111a448 <_dtoa_r+0xcd0>
81119904:	00801004 	movi	r2,64
81119908:	81010484 	addi	r4,r16,1042
8111990c:	10c7c83a 	sub	r3,r2,r3
81119910:	9108d83a 	srl	r4,r18,r4
81119914:	88e2983a 	sll	r17,r17,r3
81119918:	2448b03a 	or	r4,r4,r17
8111991c:	1126ec40 	call	81126ec4 <__floatunsidf>
81119920:	017f8434 	movhi	r5,65040
81119924:	01800044 	movi	r6,1
81119928:	1009883a 	mov	r4,r2
8111992c:	194b883a 	add	r5,r3,r5
81119930:	843fffc4 	addi	r16,r16,-1
81119934:	d9801115 	stw	r6,68(sp)
81119938:	000d883a 	mov	r6,zero
8111993c:	01cffe34 	movhi	r7,16376
81119940:	112645c0 	call	8112645c <__subdf3>
81119944:	0198dbf4 	movhi	r6,25455
81119948:	01cff4f4 	movhi	r7,16339
8111994c:	3190d844 	addi	r6,r6,17249
81119950:	39e1e9c4 	addi	r7,r7,-30809
81119954:	1009883a 	mov	r4,r2
81119958:	180b883a 	mov	r5,r3
8111995c:	1110ddc0 	call	81110ddc <__muldf3>
81119960:	01a2d874 	movhi	r6,35681
81119964:	01cff1f4 	movhi	r7,16327
81119968:	31b22cc4 	addi	r6,r6,-14157
8111996c:	39e28a04 	addi	r7,r7,-30168
81119970:	180b883a 	mov	r5,r3
81119974:	1009883a 	mov	r4,r2
81119978:	11250600 	call	81125060 <__adddf3>
8111997c:	8009883a 	mov	r4,r16
81119980:	1029883a 	mov	r20,r2
81119984:	1823883a 	mov	r17,r3
81119988:	1126de00 	call	81126de0 <__floatsidf>
8111998c:	019427f4 	movhi	r6,20639
81119990:	01cff4f4 	movhi	r7,16339
81119994:	319e7ec4 	addi	r6,r6,31227
81119998:	39d104c4 	addi	r7,r7,17427
8111999c:	1009883a 	mov	r4,r2
811199a0:	180b883a 	mov	r5,r3
811199a4:	1110ddc0 	call	81110ddc <__muldf3>
811199a8:	100d883a 	mov	r6,r2
811199ac:	180f883a 	mov	r7,r3
811199b0:	a009883a 	mov	r4,r20
811199b4:	880b883a 	mov	r5,r17
811199b8:	11250600 	call	81125060 <__adddf3>
811199bc:	1009883a 	mov	r4,r2
811199c0:	180b883a 	mov	r5,r3
811199c4:	1029883a 	mov	r20,r2
811199c8:	1823883a 	mov	r17,r3
811199cc:	1126d600 	call	81126d60 <__fixdfsi>
811199d0:	000d883a 	mov	r6,zero
811199d4:	000f883a 	mov	r7,zero
811199d8:	a009883a 	mov	r4,r20
811199dc:	880b883a 	mov	r5,r17
811199e0:	d8800515 	stw	r2,20(sp)
811199e4:	11263680 	call	81126368 <__ledf2>
811199e8:	10028716 	blt	r2,zero,8111a408 <_dtoa_r+0xc90>
811199ec:	d8c00517 	ldw	r3,20(sp)
811199f0:	00800584 	movi	r2,22
811199f4:	10c27536 	bltu	r2,r3,8111a3cc <_dtoa_r+0xc54>
811199f8:	180490fa 	slli	r2,r3,3
811199fc:	00e04534 	movhi	r3,33044
81119a00:	18f95404 	addi	r3,r3,-6832
81119a04:	1885883a 	add	r2,r3,r2
81119a08:	11000017 	ldw	r4,0(r2)
81119a0c:	11400117 	ldw	r5,4(r2)
81119a10:	900d883a 	mov	r6,r18
81119a14:	980f883a 	mov	r7,r19
81119a18:	112628c0 	call	8112628c <__gedf2>
81119a1c:	00828d0e 	bge	zero,r2,8111a454 <_dtoa_r+0xcdc>
81119a20:	d9000517 	ldw	r4,20(sp)
81119a24:	d8000e15 	stw	zero,56(sp)
81119a28:	213fffc4 	addi	r4,r4,-1
81119a2c:	d9000515 	stw	r4,20(sp)
81119a30:	b42dc83a 	sub	r22,r22,r16
81119a34:	b5bfffc4 	addi	r22,r22,-1
81119a38:	b0026f16 	blt	r22,zero,8111a3f8 <_dtoa_r+0xc80>
81119a3c:	d8000815 	stw	zero,32(sp)
81119a40:	d9c00517 	ldw	r7,20(sp)
81119a44:	38026416 	blt	r7,zero,8111a3d8 <_dtoa_r+0xc60>
81119a48:	b1ed883a 	add	r22,r22,r7
81119a4c:	d9c00d15 	stw	r7,52(sp)
81119a50:	d8000a15 	stw	zero,40(sp)
81119a54:	d9800317 	ldw	r6,12(sp)
81119a58:	00800244 	movi	r2,9
81119a5c:	11811436 	bltu	r2,r6,81119eb0 <_dtoa_r+0x738>
81119a60:	00800144 	movi	r2,5
81119a64:	1184e10e 	bge	r2,r6,8111adec <_dtoa_r+0x1674>
81119a68:	31bfff04 	addi	r6,r6,-4
81119a6c:	d9800315 	stw	r6,12(sp)
81119a70:	0023883a 	mov	r17,zero
81119a74:	d9800317 	ldw	r6,12(sp)
81119a78:	008000c4 	movi	r2,3
81119a7c:	30836726 	beq	r6,r2,8111a81c <_dtoa_r+0x10a4>
81119a80:	1183410e 	bge	r2,r6,8111a788 <_dtoa_r+0x1010>
81119a84:	d9c00317 	ldw	r7,12(sp)
81119a88:	00800104 	movi	r2,4
81119a8c:	38827c26 	beq	r7,r2,8111a480 <_dtoa_r+0xd08>
81119a90:	00800144 	movi	r2,5
81119a94:	3884c41e 	bne	r7,r2,8111ada8 <_dtoa_r+0x1630>
81119a98:	00800044 	movi	r2,1
81119a9c:	d8800b15 	stw	r2,44(sp)
81119aa0:	d8c00517 	ldw	r3,20(sp)
81119aa4:	d9002217 	ldw	r4,136(sp)
81119aa8:	1907883a 	add	r3,r3,r4
81119aac:	19800044 	addi	r6,r3,1
81119ab0:	d8c00c15 	stw	r3,48(sp)
81119ab4:	d9800615 	stw	r6,24(sp)
81119ab8:	0183a40e 	bge	zero,r6,8111a94c <_dtoa_r+0x11d4>
81119abc:	d9800617 	ldw	r6,24(sp)
81119ac0:	3021883a 	mov	r16,r6
81119ac4:	e0001115 	stw	zero,68(fp)
81119ac8:	008005c4 	movi	r2,23
81119acc:	1184c92e 	bgeu	r2,r6,8111adf4 <_dtoa_r+0x167c>
81119ad0:	00c00044 	movi	r3,1
81119ad4:	00800104 	movi	r2,4
81119ad8:	1085883a 	add	r2,r2,r2
81119adc:	11000504 	addi	r4,r2,20
81119ae0:	180b883a 	mov	r5,r3
81119ae4:	18c00044 	addi	r3,r3,1
81119ae8:	313ffb2e 	bgeu	r6,r4,81119ad8 <__reset+0xfb0f9ad8>
81119aec:	e1401115 	stw	r5,68(fp)
81119af0:	e009883a 	mov	r4,fp
81119af4:	111c8900 	call	8111c890 <_Balloc>
81119af8:	d8800715 	stw	r2,28(sp)
81119afc:	e0801015 	stw	r2,64(fp)
81119b00:	00800384 	movi	r2,14
81119b04:	1400f736 	bltu	r2,r16,81119ee4 <_dtoa_r+0x76c>
81119b08:	8800f626 	beq	r17,zero,81119ee4 <_dtoa_r+0x76c>
81119b0c:	d9c00517 	ldw	r7,20(sp)
81119b10:	01c39a0e 	bge	zero,r7,8111a97c <_dtoa_r+0x1204>
81119b14:	388003cc 	andi	r2,r7,15
81119b18:	100490fa 	slli	r2,r2,3
81119b1c:	382bd13a 	srai	r21,r7,4
81119b20:	00e04534 	movhi	r3,33044
81119b24:	18f95404 	addi	r3,r3,-6832
81119b28:	1885883a 	add	r2,r3,r2
81119b2c:	a8c0040c 	andi	r3,r21,16
81119b30:	12400017 	ldw	r9,0(r2)
81119b34:	12000117 	ldw	r8,4(r2)
81119b38:	18037926 	beq	r3,zero,8111a920 <_dtoa_r+0x11a8>
81119b3c:	00a04534 	movhi	r2,33044
81119b40:	10b94a04 	addi	r2,r2,-6872
81119b44:	11800817 	ldw	r6,32(r2)
81119b48:	11c00917 	ldw	r7,36(r2)
81119b4c:	9009883a 	mov	r4,r18
81119b50:	980b883a 	mov	r5,r19
81119b54:	da001715 	stw	r8,92(sp)
81119b58:	da401615 	stw	r9,88(sp)
81119b5c:	11259140 	call	81125914 <__divdf3>
81119b60:	da001717 	ldw	r8,92(sp)
81119b64:	da401617 	ldw	r9,88(sp)
81119b68:	ad4003cc 	andi	r21,r21,15
81119b6c:	040000c4 	movi	r16,3
81119b70:	1023883a 	mov	r17,r2
81119b74:	1829883a 	mov	r20,r3
81119b78:	a8001126 	beq	r21,zero,81119bc0 <_dtoa_r+0x448>
81119b7c:	05e04534 	movhi	r23,33044
81119b80:	bdf94a04 	addi	r23,r23,-6872
81119b84:	4805883a 	mov	r2,r9
81119b88:	4007883a 	mov	r3,r8
81119b8c:	a980004c 	andi	r6,r21,1
81119b90:	1009883a 	mov	r4,r2
81119b94:	a82bd07a 	srai	r21,r21,1
81119b98:	180b883a 	mov	r5,r3
81119b9c:	30000426 	beq	r6,zero,81119bb0 <_dtoa_r+0x438>
81119ba0:	b9800017 	ldw	r6,0(r23)
81119ba4:	b9c00117 	ldw	r7,4(r23)
81119ba8:	84000044 	addi	r16,r16,1
81119bac:	1110ddc0 	call	81110ddc <__muldf3>
81119bb0:	bdc00204 	addi	r23,r23,8
81119bb4:	a83ff51e 	bne	r21,zero,81119b8c <__reset+0xfb0f9b8c>
81119bb8:	1013883a 	mov	r9,r2
81119bbc:	1811883a 	mov	r8,r3
81119bc0:	480d883a 	mov	r6,r9
81119bc4:	400f883a 	mov	r7,r8
81119bc8:	8809883a 	mov	r4,r17
81119bcc:	a00b883a 	mov	r5,r20
81119bd0:	11259140 	call	81125914 <__divdf3>
81119bd4:	d8800f15 	stw	r2,60(sp)
81119bd8:	d8c01015 	stw	r3,64(sp)
81119bdc:	d8c00e17 	ldw	r3,56(sp)
81119be0:	18000626 	beq	r3,zero,81119bfc <_dtoa_r+0x484>
81119be4:	d9000f17 	ldw	r4,60(sp)
81119be8:	d9401017 	ldw	r5,64(sp)
81119bec:	000d883a 	mov	r6,zero
81119bf0:	01cffc34 	movhi	r7,16368
81119bf4:	11263680 	call	81126368 <__ledf2>
81119bf8:	10040b16 	blt	r2,zero,8111ac28 <_dtoa_r+0x14b0>
81119bfc:	8009883a 	mov	r4,r16
81119c00:	1126de00 	call	81126de0 <__floatsidf>
81119c04:	d9800f17 	ldw	r6,60(sp)
81119c08:	d9c01017 	ldw	r7,64(sp)
81119c0c:	1009883a 	mov	r4,r2
81119c10:	180b883a 	mov	r5,r3
81119c14:	1110ddc0 	call	81110ddc <__muldf3>
81119c18:	000d883a 	mov	r6,zero
81119c1c:	01d00734 	movhi	r7,16412
81119c20:	1009883a 	mov	r4,r2
81119c24:	180b883a 	mov	r5,r3
81119c28:	11250600 	call	81125060 <__adddf3>
81119c2c:	1021883a 	mov	r16,r2
81119c30:	d8800617 	ldw	r2,24(sp)
81119c34:	047f3034 	movhi	r17,64704
81119c38:	1c63883a 	add	r17,r3,r17
81119c3c:	10031826 	beq	r2,zero,8111a8a0 <_dtoa_r+0x1128>
81119c40:	d8c00517 	ldw	r3,20(sp)
81119c44:	db000617 	ldw	r12,24(sp)
81119c48:	d8c01315 	stw	r3,76(sp)
81119c4c:	d9000b17 	ldw	r4,44(sp)
81119c50:	20038f26 	beq	r4,zero,8111aa90 <_dtoa_r+0x1318>
81119c54:	60bfffc4 	addi	r2,r12,-1
81119c58:	100490fa 	slli	r2,r2,3
81119c5c:	00e04534 	movhi	r3,33044
81119c60:	18f95404 	addi	r3,r3,-6832
81119c64:	1885883a 	add	r2,r3,r2
81119c68:	11800017 	ldw	r6,0(r2)
81119c6c:	11c00117 	ldw	r7,4(r2)
81119c70:	d8800717 	ldw	r2,28(sp)
81119c74:	0009883a 	mov	r4,zero
81119c78:	014ff834 	movhi	r5,16352
81119c7c:	db001615 	stw	r12,88(sp)
81119c80:	15c00044 	addi	r23,r2,1
81119c84:	11259140 	call	81125914 <__divdf3>
81119c88:	800d883a 	mov	r6,r16
81119c8c:	880f883a 	mov	r7,r17
81119c90:	1009883a 	mov	r4,r2
81119c94:	180b883a 	mov	r5,r3
81119c98:	112645c0 	call	8112645c <__subdf3>
81119c9c:	d9401017 	ldw	r5,64(sp)
81119ca0:	d9000f17 	ldw	r4,60(sp)
81119ca4:	102b883a 	mov	r21,r2
81119ca8:	d8c01215 	stw	r3,72(sp)
81119cac:	1126d600 	call	81126d60 <__fixdfsi>
81119cb0:	1009883a 	mov	r4,r2
81119cb4:	1029883a 	mov	r20,r2
81119cb8:	1126de00 	call	81126de0 <__floatsidf>
81119cbc:	d9000f17 	ldw	r4,60(sp)
81119cc0:	d9401017 	ldw	r5,64(sp)
81119cc4:	100d883a 	mov	r6,r2
81119cc8:	180f883a 	mov	r7,r3
81119ccc:	112645c0 	call	8112645c <__subdf3>
81119cd0:	1823883a 	mov	r17,r3
81119cd4:	d8c00717 	ldw	r3,28(sp)
81119cd8:	d9401217 	ldw	r5,72(sp)
81119cdc:	a2000c04 	addi	r8,r20,48
81119ce0:	1021883a 	mov	r16,r2
81119ce4:	1a000005 	stb	r8,0(r3)
81119ce8:	800d883a 	mov	r6,r16
81119cec:	880f883a 	mov	r7,r17
81119cf0:	a809883a 	mov	r4,r21
81119cf4:	4029883a 	mov	r20,r8
81119cf8:	112628c0 	call	8112628c <__gedf2>
81119cfc:	00841d16 	blt	zero,r2,8111ad74 <_dtoa_r+0x15fc>
81119d00:	800d883a 	mov	r6,r16
81119d04:	880f883a 	mov	r7,r17
81119d08:	0009883a 	mov	r4,zero
81119d0c:	014ffc34 	movhi	r5,16368
81119d10:	112645c0 	call	8112645c <__subdf3>
81119d14:	d9401217 	ldw	r5,72(sp)
81119d18:	100d883a 	mov	r6,r2
81119d1c:	180f883a 	mov	r7,r3
81119d20:	a809883a 	mov	r4,r21
81119d24:	112628c0 	call	8112628c <__gedf2>
81119d28:	db001617 	ldw	r12,88(sp)
81119d2c:	00840e16 	blt	zero,r2,8111ad68 <_dtoa_r+0x15f0>
81119d30:	00800044 	movi	r2,1
81119d34:	13006b0e 	bge	r2,r12,81119ee4 <_dtoa_r+0x76c>
81119d38:	d9000717 	ldw	r4,28(sp)
81119d3c:	dd800f15 	stw	r22,60(sp)
81119d40:	dcc01015 	stw	r19,64(sp)
81119d44:	2319883a 	add	r12,r4,r12
81119d48:	dcc01217 	ldw	r19,72(sp)
81119d4c:	602d883a 	mov	r22,r12
81119d50:	dc801215 	stw	r18,72(sp)
81119d54:	b825883a 	mov	r18,r23
81119d58:	00000906 	br	81119d80 <_dtoa_r+0x608>
81119d5c:	112645c0 	call	8112645c <__subdf3>
81119d60:	a80d883a 	mov	r6,r21
81119d64:	980f883a 	mov	r7,r19
81119d68:	1009883a 	mov	r4,r2
81119d6c:	180b883a 	mov	r5,r3
81119d70:	11263680 	call	81126368 <__ledf2>
81119d74:	1003e816 	blt	r2,zero,8111ad18 <_dtoa_r+0x15a0>
81119d78:	b825883a 	mov	r18,r23
81119d7c:	bd83e926 	beq	r23,r22,8111ad24 <_dtoa_r+0x15ac>
81119d80:	a809883a 	mov	r4,r21
81119d84:	980b883a 	mov	r5,r19
81119d88:	000d883a 	mov	r6,zero
81119d8c:	01d00934 	movhi	r7,16420
81119d90:	1110ddc0 	call	81110ddc <__muldf3>
81119d94:	000d883a 	mov	r6,zero
81119d98:	01d00934 	movhi	r7,16420
81119d9c:	8009883a 	mov	r4,r16
81119da0:	880b883a 	mov	r5,r17
81119da4:	102b883a 	mov	r21,r2
81119da8:	1827883a 	mov	r19,r3
81119dac:	1110ddc0 	call	81110ddc <__muldf3>
81119db0:	180b883a 	mov	r5,r3
81119db4:	1009883a 	mov	r4,r2
81119db8:	1821883a 	mov	r16,r3
81119dbc:	1023883a 	mov	r17,r2
81119dc0:	1126d600 	call	81126d60 <__fixdfsi>
81119dc4:	1009883a 	mov	r4,r2
81119dc8:	1029883a 	mov	r20,r2
81119dcc:	1126de00 	call	81126de0 <__floatsidf>
81119dd0:	8809883a 	mov	r4,r17
81119dd4:	800b883a 	mov	r5,r16
81119dd8:	100d883a 	mov	r6,r2
81119ddc:	180f883a 	mov	r7,r3
81119de0:	112645c0 	call	8112645c <__subdf3>
81119de4:	a5000c04 	addi	r20,r20,48
81119de8:	a80d883a 	mov	r6,r21
81119dec:	980f883a 	mov	r7,r19
81119df0:	1009883a 	mov	r4,r2
81119df4:	180b883a 	mov	r5,r3
81119df8:	95000005 	stb	r20,0(r18)
81119dfc:	1021883a 	mov	r16,r2
81119e00:	1823883a 	mov	r17,r3
81119e04:	11263680 	call	81126368 <__ledf2>
81119e08:	bdc00044 	addi	r23,r23,1
81119e0c:	800d883a 	mov	r6,r16
81119e10:	880f883a 	mov	r7,r17
81119e14:	0009883a 	mov	r4,zero
81119e18:	014ffc34 	movhi	r5,16368
81119e1c:	103fcf0e 	bge	r2,zero,81119d5c <__reset+0xfb0f9d5c>
81119e20:	d8c01317 	ldw	r3,76(sp)
81119e24:	d8c00515 	stw	r3,20(sp)
81119e28:	d9400917 	ldw	r5,36(sp)
81119e2c:	e009883a 	mov	r4,fp
81119e30:	111c9400 	call	8111c940 <_Bfree>
81119e34:	d9000517 	ldw	r4,20(sp)
81119e38:	d9802317 	ldw	r6,140(sp)
81119e3c:	d9c02517 	ldw	r7,148(sp)
81119e40:	b8000005 	stb	zero,0(r23)
81119e44:	20800044 	addi	r2,r4,1
81119e48:	30800015 	stw	r2,0(r6)
81119e4c:	3802aa26 	beq	r7,zero,8111a8f8 <_dtoa_r+0x1180>
81119e50:	3dc00015 	stw	r23,0(r7)
81119e54:	d8800717 	ldw	r2,28(sp)
81119e58:	003e7906 	br	81119840 <__reset+0xfb0f9840>
81119e5c:	00800434 	movhi	r2,16
81119e60:	10bfffc4 	addi	r2,r2,-1
81119e64:	88a2703a 	and	r17,r17,r2
81119e68:	883e851e 	bne	r17,zero,81119880 <__reset+0xfb0f9880>
81119e6c:	00a04534 	movhi	r2,33044
81119e70:	10b93604 	addi	r2,r2,-6952
81119e74:	003e8406 	br	81119888 <__reset+0xfb0f9888>
81119e78:	10c00204 	addi	r3,r2,8
81119e7c:	003e8706 	br	8111989c <__reset+0xfb0f989c>
81119e80:	01400434 	movhi	r5,16
81119e84:	297fffc4 	addi	r5,r5,-1
81119e88:	994a703a 	and	r5,r19,r5
81119e8c:	9009883a 	mov	r4,r18
81119e90:	843f0044 	addi	r16,r16,-1023
81119e94:	294ffc34 	orhi	r5,r5,16368
81119e98:	dd800217 	ldw	r22,8(sp)
81119e9c:	d8001115 	stw	zero,68(sp)
81119ea0:	003ea506 	br	81119938 <__reset+0xfb0f9938>
81119ea4:	00a04534 	movhi	r2,33044
81119ea8:	10b91b04 	addi	r2,r2,-7060
81119eac:	003e6406 	br	81119840 <__reset+0xfb0f9840>
81119eb0:	e0001115 	stw	zero,68(fp)
81119eb4:	000b883a 	mov	r5,zero
81119eb8:	e009883a 	mov	r4,fp
81119ebc:	111c8900 	call	8111c890 <_Balloc>
81119ec0:	01bfffc4 	movi	r6,-1
81119ec4:	01c00044 	movi	r7,1
81119ec8:	d8800715 	stw	r2,28(sp)
81119ecc:	d9800c15 	stw	r6,48(sp)
81119ed0:	e0801015 	stw	r2,64(fp)
81119ed4:	d8000315 	stw	zero,12(sp)
81119ed8:	d9c00b15 	stw	r7,44(sp)
81119edc:	d9800615 	stw	r6,24(sp)
81119ee0:	d8002215 	stw	zero,136(sp)
81119ee4:	d8800117 	ldw	r2,4(sp)
81119ee8:	10008916 	blt	r2,zero,8111a110 <_dtoa_r+0x998>
81119eec:	d9000517 	ldw	r4,20(sp)
81119ef0:	00c00384 	movi	r3,14
81119ef4:	19008616 	blt	r3,r4,8111a110 <_dtoa_r+0x998>
81119ef8:	200490fa 	slli	r2,r4,3
81119efc:	00e04534 	movhi	r3,33044
81119f00:	d9802217 	ldw	r6,136(sp)
81119f04:	18f95404 	addi	r3,r3,-6832
81119f08:	1885883a 	add	r2,r3,r2
81119f0c:	14000017 	ldw	r16,0(r2)
81119f10:	14400117 	ldw	r17,4(r2)
81119f14:	30016316 	blt	r6,zero,8111a4a4 <_dtoa_r+0xd2c>
81119f18:	800d883a 	mov	r6,r16
81119f1c:	880f883a 	mov	r7,r17
81119f20:	9009883a 	mov	r4,r18
81119f24:	980b883a 	mov	r5,r19
81119f28:	11259140 	call	81125914 <__divdf3>
81119f2c:	180b883a 	mov	r5,r3
81119f30:	1009883a 	mov	r4,r2
81119f34:	1126d600 	call	81126d60 <__fixdfsi>
81119f38:	1009883a 	mov	r4,r2
81119f3c:	102b883a 	mov	r21,r2
81119f40:	1126de00 	call	81126de0 <__floatsidf>
81119f44:	800d883a 	mov	r6,r16
81119f48:	880f883a 	mov	r7,r17
81119f4c:	1009883a 	mov	r4,r2
81119f50:	180b883a 	mov	r5,r3
81119f54:	1110ddc0 	call	81110ddc <__muldf3>
81119f58:	100d883a 	mov	r6,r2
81119f5c:	180f883a 	mov	r7,r3
81119f60:	9009883a 	mov	r4,r18
81119f64:	980b883a 	mov	r5,r19
81119f68:	112645c0 	call	8112645c <__subdf3>
81119f6c:	d9c00717 	ldw	r7,28(sp)
81119f70:	1009883a 	mov	r4,r2
81119f74:	a8800c04 	addi	r2,r21,48
81119f78:	38800005 	stb	r2,0(r7)
81119f7c:	3dc00044 	addi	r23,r7,1
81119f80:	d9c00617 	ldw	r7,24(sp)
81119f84:	01800044 	movi	r6,1
81119f88:	180b883a 	mov	r5,r3
81119f8c:	2005883a 	mov	r2,r4
81119f90:	39803826 	beq	r7,r6,8111a074 <_dtoa_r+0x8fc>
81119f94:	000d883a 	mov	r6,zero
81119f98:	01d00934 	movhi	r7,16420
81119f9c:	1110ddc0 	call	81110ddc <__muldf3>
81119fa0:	000d883a 	mov	r6,zero
81119fa4:	000f883a 	mov	r7,zero
81119fa8:	1009883a 	mov	r4,r2
81119fac:	180b883a 	mov	r5,r3
81119fb0:	1025883a 	mov	r18,r2
81119fb4:	1827883a 	mov	r19,r3
81119fb8:	11262040 	call	81126204 <__eqdf2>
81119fbc:	103f9a26 	beq	r2,zero,81119e28 <__reset+0xfb0f9e28>
81119fc0:	d9c00617 	ldw	r7,24(sp)
81119fc4:	d8c00717 	ldw	r3,28(sp)
81119fc8:	b829883a 	mov	r20,r23
81119fcc:	38bfffc4 	addi	r2,r7,-1
81119fd0:	18ad883a 	add	r22,r3,r2
81119fd4:	00000a06 	br	8111a000 <_dtoa_r+0x888>
81119fd8:	1110ddc0 	call	81110ddc <__muldf3>
81119fdc:	000d883a 	mov	r6,zero
81119fe0:	000f883a 	mov	r7,zero
81119fe4:	1009883a 	mov	r4,r2
81119fe8:	180b883a 	mov	r5,r3
81119fec:	1025883a 	mov	r18,r2
81119ff0:	1827883a 	mov	r19,r3
81119ff4:	b829883a 	mov	r20,r23
81119ff8:	11262040 	call	81126204 <__eqdf2>
81119ffc:	103f8a26 	beq	r2,zero,81119e28 <__reset+0xfb0f9e28>
8111a000:	800d883a 	mov	r6,r16
8111a004:	880f883a 	mov	r7,r17
8111a008:	9009883a 	mov	r4,r18
8111a00c:	980b883a 	mov	r5,r19
8111a010:	11259140 	call	81125914 <__divdf3>
8111a014:	180b883a 	mov	r5,r3
8111a018:	1009883a 	mov	r4,r2
8111a01c:	1126d600 	call	81126d60 <__fixdfsi>
8111a020:	1009883a 	mov	r4,r2
8111a024:	102b883a 	mov	r21,r2
8111a028:	1126de00 	call	81126de0 <__floatsidf>
8111a02c:	800d883a 	mov	r6,r16
8111a030:	880f883a 	mov	r7,r17
8111a034:	1009883a 	mov	r4,r2
8111a038:	180b883a 	mov	r5,r3
8111a03c:	1110ddc0 	call	81110ddc <__muldf3>
8111a040:	100d883a 	mov	r6,r2
8111a044:	180f883a 	mov	r7,r3
8111a048:	9009883a 	mov	r4,r18
8111a04c:	980b883a 	mov	r5,r19
8111a050:	112645c0 	call	8112645c <__subdf3>
8111a054:	aa000c04 	addi	r8,r21,48
8111a058:	a2000005 	stb	r8,0(r20)
8111a05c:	000d883a 	mov	r6,zero
8111a060:	01d00934 	movhi	r7,16420
8111a064:	1009883a 	mov	r4,r2
8111a068:	180b883a 	mov	r5,r3
8111a06c:	a5c00044 	addi	r23,r20,1
8111a070:	b53fd91e 	bne	r22,r20,81119fd8 <__reset+0xfb0f9fd8>
8111a074:	100d883a 	mov	r6,r2
8111a078:	180f883a 	mov	r7,r3
8111a07c:	1009883a 	mov	r4,r2
8111a080:	180b883a 	mov	r5,r3
8111a084:	11250600 	call	81125060 <__adddf3>
8111a088:	100d883a 	mov	r6,r2
8111a08c:	180f883a 	mov	r7,r3
8111a090:	8009883a 	mov	r4,r16
8111a094:	880b883a 	mov	r5,r17
8111a098:	1027883a 	mov	r19,r2
8111a09c:	1825883a 	mov	r18,r3
8111a0a0:	11263680 	call	81126368 <__ledf2>
8111a0a4:	10000816 	blt	r2,zero,8111a0c8 <_dtoa_r+0x950>
8111a0a8:	980d883a 	mov	r6,r19
8111a0ac:	900f883a 	mov	r7,r18
8111a0b0:	8009883a 	mov	r4,r16
8111a0b4:	880b883a 	mov	r5,r17
8111a0b8:	11262040 	call	81126204 <__eqdf2>
8111a0bc:	103f5a1e 	bne	r2,zero,81119e28 <__reset+0xfb0f9e28>
8111a0c0:	ad40004c 	andi	r21,r21,1
8111a0c4:	a83f5826 	beq	r21,zero,81119e28 <__reset+0xfb0f9e28>
8111a0c8:	bd3fffc3 	ldbu	r20,-1(r23)
8111a0cc:	b8bfffc4 	addi	r2,r23,-1
8111a0d0:	1007883a 	mov	r3,r2
8111a0d4:	01400e44 	movi	r5,57
8111a0d8:	d9800717 	ldw	r6,28(sp)
8111a0dc:	00000506 	br	8111a0f4 <_dtoa_r+0x97c>
8111a0e0:	18ffffc4 	addi	r3,r3,-1
8111a0e4:	11824726 	beq	r2,r6,8111aa04 <_dtoa_r+0x128c>
8111a0e8:	1d000003 	ldbu	r20,0(r3)
8111a0ec:	102f883a 	mov	r23,r2
8111a0f0:	10bfffc4 	addi	r2,r2,-1
8111a0f4:	a1003fcc 	andi	r4,r20,255
8111a0f8:	2100201c 	xori	r4,r4,128
8111a0fc:	213fe004 	addi	r4,r4,-128
8111a100:	217ff726 	beq	r4,r5,8111a0e0 <__reset+0xfb0fa0e0>
8111a104:	a2000044 	addi	r8,r20,1
8111a108:	12000005 	stb	r8,0(r2)
8111a10c:	003f4606 	br	81119e28 <__reset+0xfb0f9e28>
8111a110:	d9000b17 	ldw	r4,44(sp)
8111a114:	2000c826 	beq	r4,zero,8111a438 <_dtoa_r+0xcc0>
8111a118:	d9800317 	ldw	r6,12(sp)
8111a11c:	00c00044 	movi	r3,1
8111a120:	1980f90e 	bge	r3,r6,8111a508 <_dtoa_r+0xd90>
8111a124:	d8800617 	ldw	r2,24(sp)
8111a128:	d8c00a17 	ldw	r3,40(sp)
8111a12c:	157fffc4 	addi	r21,r2,-1
8111a130:	1d41f316 	blt	r3,r21,8111a900 <_dtoa_r+0x1188>
8111a134:	1d6bc83a 	sub	r21,r3,r21
8111a138:	d9c00617 	ldw	r7,24(sp)
8111a13c:	3802aa16 	blt	r7,zero,8111abe8 <_dtoa_r+0x1470>
8111a140:	dd000817 	ldw	r20,32(sp)
8111a144:	d8800617 	ldw	r2,24(sp)
8111a148:	d8c00817 	ldw	r3,32(sp)
8111a14c:	01400044 	movi	r5,1
8111a150:	e009883a 	mov	r4,fp
8111a154:	1887883a 	add	r3,r3,r2
8111a158:	d8c00815 	stw	r3,32(sp)
8111a15c:	b0ad883a 	add	r22,r22,r2
8111a160:	111ccb40 	call	8111ccb4 <__i2b>
8111a164:	1023883a 	mov	r17,r2
8111a168:	a0000826 	beq	r20,zero,8111a18c <_dtoa_r+0xa14>
8111a16c:	0580070e 	bge	zero,r22,8111a18c <_dtoa_r+0xa14>
8111a170:	a005883a 	mov	r2,r20
8111a174:	b500b916 	blt	r22,r20,8111a45c <_dtoa_r+0xce4>
8111a178:	d9000817 	ldw	r4,32(sp)
8111a17c:	a0a9c83a 	sub	r20,r20,r2
8111a180:	b0adc83a 	sub	r22,r22,r2
8111a184:	2089c83a 	sub	r4,r4,r2
8111a188:	d9000815 	stw	r4,32(sp)
8111a18c:	d9800a17 	ldw	r6,40(sp)
8111a190:	0181810e 	bge	zero,r6,8111a798 <_dtoa_r+0x1020>
8111a194:	d9c00b17 	ldw	r7,44(sp)
8111a198:	3800b326 	beq	r7,zero,8111a468 <_dtoa_r+0xcf0>
8111a19c:	a800b226 	beq	r21,zero,8111a468 <_dtoa_r+0xcf0>
8111a1a0:	880b883a 	mov	r5,r17
8111a1a4:	a80d883a 	mov	r6,r21
8111a1a8:	e009883a 	mov	r4,fp
8111a1ac:	111cef80 	call	8111cef8 <__pow5mult>
8111a1b0:	d9800917 	ldw	r6,36(sp)
8111a1b4:	100b883a 	mov	r5,r2
8111a1b8:	e009883a 	mov	r4,fp
8111a1bc:	1023883a 	mov	r17,r2
8111a1c0:	111ccf80 	call	8111ccf8 <__multiply>
8111a1c4:	1021883a 	mov	r16,r2
8111a1c8:	d8800a17 	ldw	r2,40(sp)
8111a1cc:	d9400917 	ldw	r5,36(sp)
8111a1d0:	e009883a 	mov	r4,fp
8111a1d4:	1545c83a 	sub	r2,r2,r21
8111a1d8:	d8800a15 	stw	r2,40(sp)
8111a1dc:	111c9400 	call	8111c940 <_Bfree>
8111a1e0:	d8c00a17 	ldw	r3,40(sp)
8111a1e4:	18009f1e 	bne	r3,zero,8111a464 <_dtoa_r+0xcec>
8111a1e8:	05c00044 	movi	r23,1
8111a1ec:	e009883a 	mov	r4,fp
8111a1f0:	b80b883a 	mov	r5,r23
8111a1f4:	111ccb40 	call	8111ccb4 <__i2b>
8111a1f8:	d9000d17 	ldw	r4,52(sp)
8111a1fc:	102b883a 	mov	r21,r2
8111a200:	2000ce26 	beq	r4,zero,8111a53c <_dtoa_r+0xdc4>
8111a204:	200d883a 	mov	r6,r4
8111a208:	100b883a 	mov	r5,r2
8111a20c:	e009883a 	mov	r4,fp
8111a210:	111cef80 	call	8111cef8 <__pow5mult>
8111a214:	d9800317 	ldw	r6,12(sp)
8111a218:	102b883a 	mov	r21,r2
8111a21c:	b981810e 	bge	r23,r6,8111a824 <_dtoa_r+0x10ac>
8111a220:	0027883a 	mov	r19,zero
8111a224:	a8800417 	ldw	r2,16(r21)
8111a228:	05c00804 	movi	r23,32
8111a22c:	10800104 	addi	r2,r2,4
8111a230:	1085883a 	add	r2,r2,r2
8111a234:	1085883a 	add	r2,r2,r2
8111a238:	a885883a 	add	r2,r21,r2
8111a23c:	11000017 	ldw	r4,0(r2)
8111a240:	111cb9c0 	call	8111cb9c <__hi0bits>
8111a244:	b885c83a 	sub	r2,r23,r2
8111a248:	1585883a 	add	r2,r2,r22
8111a24c:	108007cc 	andi	r2,r2,31
8111a250:	1000b326 	beq	r2,zero,8111a520 <_dtoa_r+0xda8>
8111a254:	00c00804 	movi	r3,32
8111a258:	1887c83a 	sub	r3,r3,r2
8111a25c:	01000104 	movi	r4,4
8111a260:	20c2cd0e 	bge	r4,r3,8111ad98 <_dtoa_r+0x1620>
8111a264:	00c00704 	movi	r3,28
8111a268:	1885c83a 	sub	r2,r3,r2
8111a26c:	d8c00817 	ldw	r3,32(sp)
8111a270:	a0a9883a 	add	r20,r20,r2
8111a274:	b0ad883a 	add	r22,r22,r2
8111a278:	1887883a 	add	r3,r3,r2
8111a27c:	d8c00815 	stw	r3,32(sp)
8111a280:	d9800817 	ldw	r6,32(sp)
8111a284:	0180040e 	bge	zero,r6,8111a298 <_dtoa_r+0xb20>
8111a288:	800b883a 	mov	r5,r16
8111a28c:	e009883a 	mov	r4,fp
8111a290:	111d0400 	call	8111d040 <__lshift>
8111a294:	1021883a 	mov	r16,r2
8111a298:	0580050e 	bge	zero,r22,8111a2b0 <_dtoa_r+0xb38>
8111a29c:	a80b883a 	mov	r5,r21
8111a2a0:	b00d883a 	mov	r6,r22
8111a2a4:	e009883a 	mov	r4,fp
8111a2a8:	111d0400 	call	8111d040 <__lshift>
8111a2ac:	102b883a 	mov	r21,r2
8111a2b0:	d9c00e17 	ldw	r7,56(sp)
8111a2b4:	3801211e 	bne	r7,zero,8111a73c <_dtoa_r+0xfc4>
8111a2b8:	d9800617 	ldw	r6,24(sp)
8111a2bc:	0181380e 	bge	zero,r6,8111a7a0 <_dtoa_r+0x1028>
8111a2c0:	d8c00b17 	ldw	r3,44(sp)
8111a2c4:	1800ab1e 	bne	r3,zero,8111a574 <_dtoa_r+0xdfc>
8111a2c8:	dc800717 	ldw	r18,28(sp)
8111a2cc:	dcc00617 	ldw	r19,24(sp)
8111a2d0:	9029883a 	mov	r20,r18
8111a2d4:	00000206 	br	8111a2e0 <_dtoa_r+0xb68>
8111a2d8:	111c9680 	call	8111c968 <__multadd>
8111a2dc:	1021883a 	mov	r16,r2
8111a2e0:	a80b883a 	mov	r5,r21
8111a2e4:	8009883a 	mov	r4,r16
8111a2e8:	11195700 	call	81119570 <quorem>
8111a2ec:	10800c04 	addi	r2,r2,48
8111a2f0:	90800005 	stb	r2,0(r18)
8111a2f4:	94800044 	addi	r18,r18,1
8111a2f8:	9507c83a 	sub	r3,r18,r20
8111a2fc:	000f883a 	mov	r7,zero
8111a300:	01800284 	movi	r6,10
8111a304:	800b883a 	mov	r5,r16
8111a308:	e009883a 	mov	r4,fp
8111a30c:	1cfff216 	blt	r3,r19,8111a2d8 <__reset+0xfb0fa2d8>
8111a310:	1011883a 	mov	r8,r2
8111a314:	d8800617 	ldw	r2,24(sp)
8111a318:	0082370e 	bge	zero,r2,8111abf8 <_dtoa_r+0x1480>
8111a31c:	d9000717 	ldw	r4,28(sp)
8111a320:	0025883a 	mov	r18,zero
8111a324:	20af883a 	add	r23,r4,r2
8111a328:	01800044 	movi	r6,1
8111a32c:	800b883a 	mov	r5,r16
8111a330:	e009883a 	mov	r4,fp
8111a334:	da001715 	stw	r8,92(sp)
8111a338:	111d0400 	call	8111d040 <__lshift>
8111a33c:	a80b883a 	mov	r5,r21
8111a340:	1009883a 	mov	r4,r2
8111a344:	d8800915 	stw	r2,36(sp)
8111a348:	111d1900 	call	8111d190 <__mcmp>
8111a34c:	da001717 	ldw	r8,92(sp)
8111a350:	0081800e 	bge	zero,r2,8111a954 <_dtoa_r+0x11dc>
8111a354:	b93fffc3 	ldbu	r4,-1(r23)
8111a358:	b8bfffc4 	addi	r2,r23,-1
8111a35c:	1007883a 	mov	r3,r2
8111a360:	01800e44 	movi	r6,57
8111a364:	d9c00717 	ldw	r7,28(sp)
8111a368:	00000506 	br	8111a380 <_dtoa_r+0xc08>
8111a36c:	18ffffc4 	addi	r3,r3,-1
8111a370:	11c12326 	beq	r2,r7,8111a800 <_dtoa_r+0x1088>
8111a374:	19000003 	ldbu	r4,0(r3)
8111a378:	102f883a 	mov	r23,r2
8111a37c:	10bfffc4 	addi	r2,r2,-1
8111a380:	21403fcc 	andi	r5,r4,255
8111a384:	2940201c 	xori	r5,r5,128
8111a388:	297fe004 	addi	r5,r5,-128
8111a38c:	29bff726 	beq	r5,r6,8111a36c <__reset+0xfb0fa36c>
8111a390:	21000044 	addi	r4,r4,1
8111a394:	11000005 	stb	r4,0(r2)
8111a398:	a80b883a 	mov	r5,r21
8111a39c:	e009883a 	mov	r4,fp
8111a3a0:	111c9400 	call	8111c940 <_Bfree>
8111a3a4:	883ea026 	beq	r17,zero,81119e28 <__reset+0xfb0f9e28>
8111a3a8:	90000426 	beq	r18,zero,8111a3bc <_dtoa_r+0xc44>
8111a3ac:	94400326 	beq	r18,r17,8111a3bc <_dtoa_r+0xc44>
8111a3b0:	900b883a 	mov	r5,r18
8111a3b4:	e009883a 	mov	r4,fp
8111a3b8:	111c9400 	call	8111c940 <_Bfree>
8111a3bc:	880b883a 	mov	r5,r17
8111a3c0:	e009883a 	mov	r4,fp
8111a3c4:	111c9400 	call	8111c940 <_Bfree>
8111a3c8:	003e9706 	br	81119e28 <__reset+0xfb0f9e28>
8111a3cc:	01800044 	movi	r6,1
8111a3d0:	d9800e15 	stw	r6,56(sp)
8111a3d4:	003d9606 	br	81119a30 <__reset+0xfb0f9a30>
8111a3d8:	d8800817 	ldw	r2,32(sp)
8111a3dc:	d8c00517 	ldw	r3,20(sp)
8111a3e0:	d8000d15 	stw	zero,52(sp)
8111a3e4:	10c5c83a 	sub	r2,r2,r3
8111a3e8:	00c9c83a 	sub	r4,zero,r3
8111a3ec:	d8800815 	stw	r2,32(sp)
8111a3f0:	d9000a15 	stw	r4,40(sp)
8111a3f4:	003d9706 	br	81119a54 <__reset+0xfb0f9a54>
8111a3f8:	05adc83a 	sub	r22,zero,r22
8111a3fc:	dd800815 	stw	r22,32(sp)
8111a400:	002d883a 	mov	r22,zero
8111a404:	003d8e06 	br	81119a40 <__reset+0xfb0f9a40>
8111a408:	d9000517 	ldw	r4,20(sp)
8111a40c:	1126de00 	call	81126de0 <__floatsidf>
8111a410:	100d883a 	mov	r6,r2
8111a414:	180f883a 	mov	r7,r3
8111a418:	a009883a 	mov	r4,r20
8111a41c:	880b883a 	mov	r5,r17
8111a420:	11262040 	call	81126204 <__eqdf2>
8111a424:	103d7126 	beq	r2,zero,811199ec <__reset+0xfb0f99ec>
8111a428:	d9c00517 	ldw	r7,20(sp)
8111a42c:	39ffffc4 	addi	r7,r7,-1
8111a430:	d9c00515 	stw	r7,20(sp)
8111a434:	003d6d06 	br	811199ec <__reset+0xfb0f99ec>
8111a438:	dd400a17 	ldw	r21,40(sp)
8111a43c:	dd000817 	ldw	r20,32(sp)
8111a440:	0023883a 	mov	r17,zero
8111a444:	003f4806 	br	8111a168 <__reset+0xfb0fa168>
8111a448:	10e3c83a 	sub	r17,r2,r3
8111a44c:	9448983a 	sll	r4,r18,r17
8111a450:	003d3206 	br	8111991c <__reset+0xfb0f991c>
8111a454:	d8000e15 	stw	zero,56(sp)
8111a458:	003d7506 	br	81119a30 <__reset+0xfb0f9a30>
8111a45c:	b005883a 	mov	r2,r22
8111a460:	003f4506 	br	8111a178 <__reset+0xfb0fa178>
8111a464:	dc000915 	stw	r16,36(sp)
8111a468:	d9800a17 	ldw	r6,40(sp)
8111a46c:	d9400917 	ldw	r5,36(sp)
8111a470:	e009883a 	mov	r4,fp
8111a474:	111cef80 	call	8111cef8 <__pow5mult>
8111a478:	1021883a 	mov	r16,r2
8111a47c:	003f5a06 	br	8111a1e8 <__reset+0xfb0fa1e8>
8111a480:	01c00044 	movi	r7,1
8111a484:	d9c00b15 	stw	r7,44(sp)
8111a488:	d8802217 	ldw	r2,136(sp)
8111a48c:	0081280e 	bge	zero,r2,8111a930 <_dtoa_r+0x11b8>
8111a490:	100d883a 	mov	r6,r2
8111a494:	1021883a 	mov	r16,r2
8111a498:	d8800c15 	stw	r2,48(sp)
8111a49c:	d8800615 	stw	r2,24(sp)
8111a4a0:	003d8806 	br	81119ac4 <__reset+0xfb0f9ac4>
8111a4a4:	d8800617 	ldw	r2,24(sp)
8111a4a8:	00be9b16 	blt	zero,r2,81119f18 <__reset+0xfb0f9f18>
8111a4ac:	10010f1e 	bne	r2,zero,8111a8ec <_dtoa_r+0x1174>
8111a4b0:	880b883a 	mov	r5,r17
8111a4b4:	000d883a 	mov	r6,zero
8111a4b8:	01d00534 	movhi	r7,16404
8111a4bc:	8009883a 	mov	r4,r16
8111a4c0:	1110ddc0 	call	81110ddc <__muldf3>
8111a4c4:	900d883a 	mov	r6,r18
8111a4c8:	980f883a 	mov	r7,r19
8111a4cc:	1009883a 	mov	r4,r2
8111a4d0:	180b883a 	mov	r5,r3
8111a4d4:	112628c0 	call	8112628c <__gedf2>
8111a4d8:	002b883a 	mov	r21,zero
8111a4dc:	0023883a 	mov	r17,zero
8111a4e0:	1000bf16 	blt	r2,zero,8111a7e0 <_dtoa_r+0x1068>
8111a4e4:	d9802217 	ldw	r6,136(sp)
8111a4e8:	ddc00717 	ldw	r23,28(sp)
8111a4ec:	018c303a 	nor	r6,zero,r6
8111a4f0:	d9800515 	stw	r6,20(sp)
8111a4f4:	a80b883a 	mov	r5,r21
8111a4f8:	e009883a 	mov	r4,fp
8111a4fc:	111c9400 	call	8111c940 <_Bfree>
8111a500:	883e4926 	beq	r17,zero,81119e28 <__reset+0xfb0f9e28>
8111a504:	003fad06 	br	8111a3bc <__reset+0xfb0fa3bc>
8111a508:	d9c01117 	ldw	r7,68(sp)
8111a50c:	3801bc26 	beq	r7,zero,8111ac00 <_dtoa_r+0x1488>
8111a510:	10810cc4 	addi	r2,r2,1075
8111a514:	dd400a17 	ldw	r21,40(sp)
8111a518:	dd000817 	ldw	r20,32(sp)
8111a51c:	003f0a06 	br	8111a148 <__reset+0xfb0fa148>
8111a520:	00800704 	movi	r2,28
8111a524:	d9000817 	ldw	r4,32(sp)
8111a528:	a0a9883a 	add	r20,r20,r2
8111a52c:	b0ad883a 	add	r22,r22,r2
8111a530:	2089883a 	add	r4,r4,r2
8111a534:	d9000815 	stw	r4,32(sp)
8111a538:	003f5106 	br	8111a280 <__reset+0xfb0fa280>
8111a53c:	d8c00317 	ldw	r3,12(sp)
8111a540:	b8c1fc0e 	bge	r23,r3,8111ad34 <_dtoa_r+0x15bc>
8111a544:	0027883a 	mov	r19,zero
8111a548:	b805883a 	mov	r2,r23
8111a54c:	003f3e06 	br	8111a248 <__reset+0xfb0fa248>
8111a550:	880b883a 	mov	r5,r17
8111a554:	e009883a 	mov	r4,fp
8111a558:	000f883a 	mov	r7,zero
8111a55c:	01800284 	movi	r6,10
8111a560:	111c9680 	call	8111c968 <__multadd>
8111a564:	d9000c17 	ldw	r4,48(sp)
8111a568:	1023883a 	mov	r17,r2
8111a56c:	0102040e 	bge	zero,r4,8111ad80 <_dtoa_r+0x1608>
8111a570:	d9000615 	stw	r4,24(sp)
8111a574:	0500050e 	bge	zero,r20,8111a58c <_dtoa_r+0xe14>
8111a578:	880b883a 	mov	r5,r17
8111a57c:	a00d883a 	mov	r6,r20
8111a580:	e009883a 	mov	r4,fp
8111a584:	111d0400 	call	8111d040 <__lshift>
8111a588:	1023883a 	mov	r17,r2
8111a58c:	9801241e 	bne	r19,zero,8111aa20 <_dtoa_r+0x12a8>
8111a590:	8829883a 	mov	r20,r17
8111a594:	d9000617 	ldw	r4,24(sp)
8111a598:	dcc00717 	ldw	r19,28(sp)
8111a59c:	9480004c 	andi	r18,r18,1
8111a5a0:	20bfffc4 	addi	r2,r4,-1
8111a5a4:	9885883a 	add	r2,r19,r2
8111a5a8:	d8800415 	stw	r2,16(sp)
8111a5ac:	dc800615 	stw	r18,24(sp)
8111a5b0:	a80b883a 	mov	r5,r21
8111a5b4:	8009883a 	mov	r4,r16
8111a5b8:	11195700 	call	81119570 <quorem>
8111a5bc:	880b883a 	mov	r5,r17
8111a5c0:	8009883a 	mov	r4,r16
8111a5c4:	102f883a 	mov	r23,r2
8111a5c8:	111d1900 	call	8111d190 <__mcmp>
8111a5cc:	a80b883a 	mov	r5,r21
8111a5d0:	a00d883a 	mov	r6,r20
8111a5d4:	e009883a 	mov	r4,fp
8111a5d8:	102d883a 	mov	r22,r2
8111a5dc:	111d1f00 	call	8111d1f0 <__mdiff>
8111a5e0:	1007883a 	mov	r3,r2
8111a5e4:	10800317 	ldw	r2,12(r2)
8111a5e8:	bc800c04 	addi	r18,r23,48
8111a5ec:	180b883a 	mov	r5,r3
8111a5f0:	10004e1e 	bne	r2,zero,8111a72c <_dtoa_r+0xfb4>
8111a5f4:	8009883a 	mov	r4,r16
8111a5f8:	d8c01615 	stw	r3,88(sp)
8111a5fc:	111d1900 	call	8111d190 <__mcmp>
8111a600:	d8c01617 	ldw	r3,88(sp)
8111a604:	e009883a 	mov	r4,fp
8111a608:	d8801615 	stw	r2,88(sp)
8111a60c:	180b883a 	mov	r5,r3
8111a610:	111c9400 	call	8111c940 <_Bfree>
8111a614:	d8801617 	ldw	r2,88(sp)
8111a618:	1000041e 	bne	r2,zero,8111a62c <_dtoa_r+0xeb4>
8111a61c:	d9800317 	ldw	r6,12(sp)
8111a620:	3000021e 	bne	r6,zero,8111a62c <_dtoa_r+0xeb4>
8111a624:	d8c00617 	ldw	r3,24(sp)
8111a628:	18003726 	beq	r3,zero,8111a708 <_dtoa_r+0xf90>
8111a62c:	b0002016 	blt	r22,zero,8111a6b0 <_dtoa_r+0xf38>
8111a630:	b000041e 	bne	r22,zero,8111a644 <_dtoa_r+0xecc>
8111a634:	d9000317 	ldw	r4,12(sp)
8111a638:	2000021e 	bne	r4,zero,8111a644 <_dtoa_r+0xecc>
8111a63c:	d8c00617 	ldw	r3,24(sp)
8111a640:	18001b26 	beq	r3,zero,8111a6b0 <_dtoa_r+0xf38>
8111a644:	00810716 	blt	zero,r2,8111aa64 <_dtoa_r+0x12ec>
8111a648:	d8c00417 	ldw	r3,16(sp)
8111a64c:	9d800044 	addi	r22,r19,1
8111a650:	9c800005 	stb	r18,0(r19)
8111a654:	b02f883a 	mov	r23,r22
8111a658:	98c10626 	beq	r19,r3,8111aa74 <_dtoa_r+0x12fc>
8111a65c:	800b883a 	mov	r5,r16
8111a660:	000f883a 	mov	r7,zero
8111a664:	01800284 	movi	r6,10
8111a668:	e009883a 	mov	r4,fp
8111a66c:	111c9680 	call	8111c968 <__multadd>
8111a670:	1021883a 	mov	r16,r2
8111a674:	000f883a 	mov	r7,zero
8111a678:	01800284 	movi	r6,10
8111a67c:	880b883a 	mov	r5,r17
8111a680:	e009883a 	mov	r4,fp
8111a684:	8d002526 	beq	r17,r20,8111a71c <_dtoa_r+0xfa4>
8111a688:	111c9680 	call	8111c968 <__multadd>
8111a68c:	a00b883a 	mov	r5,r20
8111a690:	000f883a 	mov	r7,zero
8111a694:	01800284 	movi	r6,10
8111a698:	e009883a 	mov	r4,fp
8111a69c:	1023883a 	mov	r17,r2
8111a6a0:	111c9680 	call	8111c968 <__multadd>
8111a6a4:	1029883a 	mov	r20,r2
8111a6a8:	b027883a 	mov	r19,r22
8111a6ac:	003fc006 	br	8111a5b0 <__reset+0xfb0fa5b0>
8111a6b0:	9011883a 	mov	r8,r18
8111a6b4:	00800e0e 	bge	zero,r2,8111a6f0 <_dtoa_r+0xf78>
8111a6b8:	800b883a 	mov	r5,r16
8111a6bc:	01800044 	movi	r6,1
8111a6c0:	e009883a 	mov	r4,fp
8111a6c4:	da001715 	stw	r8,92(sp)
8111a6c8:	111d0400 	call	8111d040 <__lshift>
8111a6cc:	a80b883a 	mov	r5,r21
8111a6d0:	1009883a 	mov	r4,r2
8111a6d4:	1021883a 	mov	r16,r2
8111a6d8:	111d1900 	call	8111d190 <__mcmp>
8111a6dc:	da001717 	ldw	r8,92(sp)
8111a6e0:	0081960e 	bge	zero,r2,8111ad3c <_dtoa_r+0x15c4>
8111a6e4:	00800e44 	movi	r2,57
8111a6e8:	40817026 	beq	r8,r2,8111acac <_dtoa_r+0x1534>
8111a6ec:	ba000c44 	addi	r8,r23,49
8111a6f0:	8825883a 	mov	r18,r17
8111a6f4:	9dc00044 	addi	r23,r19,1
8111a6f8:	9a000005 	stb	r8,0(r19)
8111a6fc:	a023883a 	mov	r17,r20
8111a700:	dc000915 	stw	r16,36(sp)
8111a704:	003f2406 	br	8111a398 <__reset+0xfb0fa398>
8111a708:	00800e44 	movi	r2,57
8111a70c:	9011883a 	mov	r8,r18
8111a710:	90816626 	beq	r18,r2,8111acac <_dtoa_r+0x1534>
8111a714:	05bff516 	blt	zero,r22,8111a6ec <__reset+0xfb0fa6ec>
8111a718:	003ff506 	br	8111a6f0 <__reset+0xfb0fa6f0>
8111a71c:	111c9680 	call	8111c968 <__multadd>
8111a720:	1023883a 	mov	r17,r2
8111a724:	1029883a 	mov	r20,r2
8111a728:	003fdf06 	br	8111a6a8 <__reset+0xfb0fa6a8>
8111a72c:	e009883a 	mov	r4,fp
8111a730:	111c9400 	call	8111c940 <_Bfree>
8111a734:	00800044 	movi	r2,1
8111a738:	003fbc06 	br	8111a62c <__reset+0xfb0fa62c>
8111a73c:	a80b883a 	mov	r5,r21
8111a740:	8009883a 	mov	r4,r16
8111a744:	111d1900 	call	8111d190 <__mcmp>
8111a748:	103edb0e 	bge	r2,zero,8111a2b8 <__reset+0xfb0fa2b8>
8111a74c:	800b883a 	mov	r5,r16
8111a750:	000f883a 	mov	r7,zero
8111a754:	01800284 	movi	r6,10
8111a758:	e009883a 	mov	r4,fp
8111a75c:	111c9680 	call	8111c968 <__multadd>
8111a760:	1021883a 	mov	r16,r2
8111a764:	d8800517 	ldw	r2,20(sp)
8111a768:	d8c00b17 	ldw	r3,44(sp)
8111a76c:	10bfffc4 	addi	r2,r2,-1
8111a770:	d8800515 	stw	r2,20(sp)
8111a774:	183f761e 	bne	r3,zero,8111a550 <__reset+0xfb0fa550>
8111a778:	d9000c17 	ldw	r4,48(sp)
8111a77c:	0101730e 	bge	zero,r4,8111ad4c <_dtoa_r+0x15d4>
8111a780:	d9000615 	stw	r4,24(sp)
8111a784:	003ed006 	br	8111a2c8 <__reset+0xfb0fa2c8>
8111a788:	00800084 	movi	r2,2
8111a78c:	3081861e 	bne	r6,r2,8111ada8 <_dtoa_r+0x1630>
8111a790:	d8000b15 	stw	zero,44(sp)
8111a794:	003f3c06 	br	8111a488 <__reset+0xfb0fa488>
8111a798:	dc000917 	ldw	r16,36(sp)
8111a79c:	003e9206 	br	8111a1e8 <__reset+0xfb0fa1e8>
8111a7a0:	d9c00317 	ldw	r7,12(sp)
8111a7a4:	00800084 	movi	r2,2
8111a7a8:	11fec50e 	bge	r2,r7,8111a2c0 <__reset+0xfb0fa2c0>
8111a7ac:	d9000617 	ldw	r4,24(sp)
8111a7b0:	20013c1e 	bne	r4,zero,8111aca4 <_dtoa_r+0x152c>
8111a7b4:	a80b883a 	mov	r5,r21
8111a7b8:	000f883a 	mov	r7,zero
8111a7bc:	01800144 	movi	r6,5
8111a7c0:	e009883a 	mov	r4,fp
8111a7c4:	111c9680 	call	8111c968 <__multadd>
8111a7c8:	100b883a 	mov	r5,r2
8111a7cc:	8009883a 	mov	r4,r16
8111a7d0:	102b883a 	mov	r21,r2
8111a7d4:	111d1900 	call	8111d190 <__mcmp>
8111a7d8:	dc000915 	stw	r16,36(sp)
8111a7dc:	00bf410e 	bge	zero,r2,8111a4e4 <__reset+0xfb0fa4e4>
8111a7e0:	d9c00717 	ldw	r7,28(sp)
8111a7e4:	00800c44 	movi	r2,49
8111a7e8:	38800005 	stb	r2,0(r7)
8111a7ec:	d8800517 	ldw	r2,20(sp)
8111a7f0:	3dc00044 	addi	r23,r7,1
8111a7f4:	10800044 	addi	r2,r2,1
8111a7f8:	d8800515 	stw	r2,20(sp)
8111a7fc:	003f3d06 	br	8111a4f4 <__reset+0xfb0fa4f4>
8111a800:	d9800517 	ldw	r6,20(sp)
8111a804:	d9c00717 	ldw	r7,28(sp)
8111a808:	00800c44 	movi	r2,49
8111a80c:	31800044 	addi	r6,r6,1
8111a810:	d9800515 	stw	r6,20(sp)
8111a814:	38800005 	stb	r2,0(r7)
8111a818:	003edf06 	br	8111a398 <__reset+0xfb0fa398>
8111a81c:	d8000b15 	stw	zero,44(sp)
8111a820:	003c9f06 	br	81119aa0 <__reset+0xfb0f9aa0>
8111a824:	903e7e1e 	bne	r18,zero,8111a220 <__reset+0xfb0fa220>
8111a828:	00800434 	movhi	r2,16
8111a82c:	10bfffc4 	addi	r2,r2,-1
8111a830:	9884703a 	and	r2,r19,r2
8111a834:	1000ea1e 	bne	r2,zero,8111abe0 <_dtoa_r+0x1468>
8111a838:	9cdffc2c 	andhi	r19,r19,32752
8111a83c:	9800e826 	beq	r19,zero,8111abe0 <_dtoa_r+0x1468>
8111a840:	d9c00817 	ldw	r7,32(sp)
8111a844:	b5800044 	addi	r22,r22,1
8111a848:	04c00044 	movi	r19,1
8111a84c:	39c00044 	addi	r7,r7,1
8111a850:	d9c00815 	stw	r7,32(sp)
8111a854:	d8800d17 	ldw	r2,52(sp)
8111a858:	103e721e 	bne	r2,zero,8111a224 <__reset+0xfb0fa224>
8111a85c:	00800044 	movi	r2,1
8111a860:	003e7906 	br	8111a248 <__reset+0xfb0fa248>
8111a864:	8009883a 	mov	r4,r16
8111a868:	1126de00 	call	81126de0 <__floatsidf>
8111a86c:	d9800f17 	ldw	r6,60(sp)
8111a870:	d9c01017 	ldw	r7,64(sp)
8111a874:	1009883a 	mov	r4,r2
8111a878:	180b883a 	mov	r5,r3
8111a87c:	1110ddc0 	call	81110ddc <__muldf3>
8111a880:	000d883a 	mov	r6,zero
8111a884:	01d00734 	movhi	r7,16412
8111a888:	1009883a 	mov	r4,r2
8111a88c:	180b883a 	mov	r5,r3
8111a890:	11250600 	call	81125060 <__adddf3>
8111a894:	047f3034 	movhi	r17,64704
8111a898:	1021883a 	mov	r16,r2
8111a89c:	1c63883a 	add	r17,r3,r17
8111a8a0:	d9000f17 	ldw	r4,60(sp)
8111a8a4:	d9401017 	ldw	r5,64(sp)
8111a8a8:	000d883a 	mov	r6,zero
8111a8ac:	01d00534 	movhi	r7,16404
8111a8b0:	112645c0 	call	8112645c <__subdf3>
8111a8b4:	800d883a 	mov	r6,r16
8111a8b8:	880f883a 	mov	r7,r17
8111a8bc:	1009883a 	mov	r4,r2
8111a8c0:	180b883a 	mov	r5,r3
8111a8c4:	102b883a 	mov	r21,r2
8111a8c8:	1829883a 	mov	r20,r3
8111a8cc:	112628c0 	call	8112628c <__gedf2>
8111a8d0:	00806c16 	blt	zero,r2,8111aa84 <_dtoa_r+0x130c>
8111a8d4:	89e0003c 	xorhi	r7,r17,32768
8111a8d8:	800d883a 	mov	r6,r16
8111a8dc:	a809883a 	mov	r4,r21
8111a8e0:	a00b883a 	mov	r5,r20
8111a8e4:	11263680 	call	81126368 <__ledf2>
8111a8e8:	103d7e0e 	bge	r2,zero,81119ee4 <__reset+0xfb0f9ee4>
8111a8ec:	002b883a 	mov	r21,zero
8111a8f0:	0023883a 	mov	r17,zero
8111a8f4:	003efb06 	br	8111a4e4 <__reset+0xfb0fa4e4>
8111a8f8:	d8800717 	ldw	r2,28(sp)
8111a8fc:	003bd006 	br	81119840 <__reset+0xfb0f9840>
8111a900:	d9000a17 	ldw	r4,40(sp)
8111a904:	d9800d17 	ldw	r6,52(sp)
8111a908:	dd400a15 	stw	r21,40(sp)
8111a90c:	a905c83a 	sub	r2,r21,r4
8111a910:	308d883a 	add	r6,r6,r2
8111a914:	d9800d15 	stw	r6,52(sp)
8111a918:	002b883a 	mov	r21,zero
8111a91c:	003e0606 	br	8111a138 <__reset+0xfb0fa138>
8111a920:	9023883a 	mov	r17,r18
8111a924:	9829883a 	mov	r20,r19
8111a928:	04000084 	movi	r16,2
8111a92c:	003c9206 	br	81119b78 <__reset+0xfb0f9b78>
8111a930:	04000044 	movi	r16,1
8111a934:	dc000c15 	stw	r16,48(sp)
8111a938:	dc000615 	stw	r16,24(sp)
8111a93c:	dc002215 	stw	r16,136(sp)
8111a940:	e0001115 	stw	zero,68(fp)
8111a944:	000b883a 	mov	r5,zero
8111a948:	003c6906 	br	81119af0 <__reset+0xfb0f9af0>
8111a94c:	3021883a 	mov	r16,r6
8111a950:	003ffb06 	br	8111a940 <__reset+0xfb0fa940>
8111a954:	1000021e 	bne	r2,zero,8111a960 <_dtoa_r+0x11e8>
8111a958:	4200004c 	andi	r8,r8,1
8111a95c:	403e7d1e 	bne	r8,zero,8111a354 <__reset+0xfb0fa354>
8111a960:	01000c04 	movi	r4,48
8111a964:	00000106 	br	8111a96c <_dtoa_r+0x11f4>
8111a968:	102f883a 	mov	r23,r2
8111a96c:	b8bfffc4 	addi	r2,r23,-1
8111a970:	10c00007 	ldb	r3,0(r2)
8111a974:	193ffc26 	beq	r3,r4,8111a968 <__reset+0xfb0fa968>
8111a978:	003e8706 	br	8111a398 <__reset+0xfb0fa398>
8111a97c:	d8800517 	ldw	r2,20(sp)
8111a980:	00a3c83a 	sub	r17,zero,r2
8111a984:	8800a426 	beq	r17,zero,8111ac18 <_dtoa_r+0x14a0>
8111a988:	888003cc 	andi	r2,r17,15
8111a98c:	100490fa 	slli	r2,r2,3
8111a990:	00e04534 	movhi	r3,33044
8111a994:	18f95404 	addi	r3,r3,-6832
8111a998:	1885883a 	add	r2,r3,r2
8111a99c:	11800017 	ldw	r6,0(r2)
8111a9a0:	11c00117 	ldw	r7,4(r2)
8111a9a4:	9009883a 	mov	r4,r18
8111a9a8:	980b883a 	mov	r5,r19
8111a9ac:	8823d13a 	srai	r17,r17,4
8111a9b0:	1110ddc0 	call	81110ddc <__muldf3>
8111a9b4:	d8800f15 	stw	r2,60(sp)
8111a9b8:	d8c01015 	stw	r3,64(sp)
8111a9bc:	8800e826 	beq	r17,zero,8111ad60 <_dtoa_r+0x15e8>
8111a9c0:	05204534 	movhi	r20,33044
8111a9c4:	a5394a04 	addi	r20,r20,-6872
8111a9c8:	04000084 	movi	r16,2
8111a9cc:	8980004c 	andi	r6,r17,1
8111a9d0:	1009883a 	mov	r4,r2
8111a9d4:	8823d07a 	srai	r17,r17,1
8111a9d8:	180b883a 	mov	r5,r3
8111a9dc:	30000426 	beq	r6,zero,8111a9f0 <_dtoa_r+0x1278>
8111a9e0:	a1800017 	ldw	r6,0(r20)
8111a9e4:	a1c00117 	ldw	r7,4(r20)
8111a9e8:	84000044 	addi	r16,r16,1
8111a9ec:	1110ddc0 	call	81110ddc <__muldf3>
8111a9f0:	a5000204 	addi	r20,r20,8
8111a9f4:	883ff51e 	bne	r17,zero,8111a9cc <__reset+0xfb0fa9cc>
8111a9f8:	d8800f15 	stw	r2,60(sp)
8111a9fc:	d8c01015 	stw	r3,64(sp)
8111aa00:	003c7606 	br	81119bdc <__reset+0xfb0f9bdc>
8111aa04:	00c00c04 	movi	r3,48
8111aa08:	10c00005 	stb	r3,0(r2)
8111aa0c:	d8c00517 	ldw	r3,20(sp)
8111aa10:	bd3fffc3 	ldbu	r20,-1(r23)
8111aa14:	18c00044 	addi	r3,r3,1
8111aa18:	d8c00515 	stw	r3,20(sp)
8111aa1c:	003db906 	br	8111a104 <__reset+0xfb0fa104>
8111aa20:	89400117 	ldw	r5,4(r17)
8111aa24:	e009883a 	mov	r4,fp
8111aa28:	111c8900 	call	8111c890 <_Balloc>
8111aa2c:	89800417 	ldw	r6,16(r17)
8111aa30:	89400304 	addi	r5,r17,12
8111aa34:	11000304 	addi	r4,r2,12
8111aa38:	31800084 	addi	r6,r6,2
8111aa3c:	318d883a 	add	r6,r6,r6
8111aa40:	318d883a 	add	r6,r6,r6
8111aa44:	1027883a 	mov	r19,r2
8111aa48:	111297c0 	call	8111297c <memcpy>
8111aa4c:	01800044 	movi	r6,1
8111aa50:	980b883a 	mov	r5,r19
8111aa54:	e009883a 	mov	r4,fp
8111aa58:	111d0400 	call	8111d040 <__lshift>
8111aa5c:	1029883a 	mov	r20,r2
8111aa60:	003ecc06 	br	8111a594 <__reset+0xfb0fa594>
8111aa64:	00800e44 	movi	r2,57
8111aa68:	90809026 	beq	r18,r2,8111acac <_dtoa_r+0x1534>
8111aa6c:	92000044 	addi	r8,r18,1
8111aa70:	003f1f06 	br	8111a6f0 <__reset+0xfb0fa6f0>
8111aa74:	9011883a 	mov	r8,r18
8111aa78:	8825883a 	mov	r18,r17
8111aa7c:	a023883a 	mov	r17,r20
8111aa80:	003e2906 	br	8111a328 <__reset+0xfb0fa328>
8111aa84:	002b883a 	mov	r21,zero
8111aa88:	0023883a 	mov	r17,zero
8111aa8c:	003f5406 	br	8111a7e0 <__reset+0xfb0fa7e0>
8111aa90:	61bfffc4 	addi	r6,r12,-1
8111aa94:	300490fa 	slli	r2,r6,3
8111aa98:	00e04534 	movhi	r3,33044
8111aa9c:	18f95404 	addi	r3,r3,-6832
8111aaa0:	1885883a 	add	r2,r3,r2
8111aaa4:	11000017 	ldw	r4,0(r2)
8111aaa8:	11400117 	ldw	r5,4(r2)
8111aaac:	d8800717 	ldw	r2,28(sp)
8111aab0:	880f883a 	mov	r7,r17
8111aab4:	d9801215 	stw	r6,72(sp)
8111aab8:	800d883a 	mov	r6,r16
8111aabc:	db001615 	stw	r12,88(sp)
8111aac0:	15c00044 	addi	r23,r2,1
8111aac4:	1110ddc0 	call	81110ddc <__muldf3>
8111aac8:	d9401017 	ldw	r5,64(sp)
8111aacc:	d9000f17 	ldw	r4,60(sp)
8111aad0:	d8c01515 	stw	r3,84(sp)
8111aad4:	d8801415 	stw	r2,80(sp)
8111aad8:	1126d600 	call	81126d60 <__fixdfsi>
8111aadc:	1009883a 	mov	r4,r2
8111aae0:	1021883a 	mov	r16,r2
8111aae4:	1126de00 	call	81126de0 <__floatsidf>
8111aae8:	d9000f17 	ldw	r4,60(sp)
8111aaec:	d9401017 	ldw	r5,64(sp)
8111aaf0:	100d883a 	mov	r6,r2
8111aaf4:	180f883a 	mov	r7,r3
8111aaf8:	112645c0 	call	8112645c <__subdf3>
8111aafc:	1829883a 	mov	r20,r3
8111ab00:	d8c00717 	ldw	r3,28(sp)
8111ab04:	84000c04 	addi	r16,r16,48
8111ab08:	1023883a 	mov	r17,r2
8111ab0c:	1c000005 	stb	r16,0(r3)
8111ab10:	db001617 	ldw	r12,88(sp)
8111ab14:	00800044 	movi	r2,1
8111ab18:	60802226 	beq	r12,r2,8111aba4 <_dtoa_r+0x142c>
8111ab1c:	d9c00717 	ldw	r7,28(sp)
8111ab20:	8805883a 	mov	r2,r17
8111ab24:	b82b883a 	mov	r21,r23
8111ab28:	3b19883a 	add	r12,r7,r12
8111ab2c:	6023883a 	mov	r17,r12
8111ab30:	a007883a 	mov	r3,r20
8111ab34:	dc800f15 	stw	r18,60(sp)
8111ab38:	000d883a 	mov	r6,zero
8111ab3c:	01d00934 	movhi	r7,16420
8111ab40:	1009883a 	mov	r4,r2
8111ab44:	180b883a 	mov	r5,r3
8111ab48:	1110ddc0 	call	81110ddc <__muldf3>
8111ab4c:	180b883a 	mov	r5,r3
8111ab50:	1009883a 	mov	r4,r2
8111ab54:	1829883a 	mov	r20,r3
8111ab58:	1025883a 	mov	r18,r2
8111ab5c:	1126d600 	call	81126d60 <__fixdfsi>
8111ab60:	1009883a 	mov	r4,r2
8111ab64:	1021883a 	mov	r16,r2
8111ab68:	1126de00 	call	81126de0 <__floatsidf>
8111ab6c:	100d883a 	mov	r6,r2
8111ab70:	180f883a 	mov	r7,r3
8111ab74:	9009883a 	mov	r4,r18
8111ab78:	a00b883a 	mov	r5,r20
8111ab7c:	84000c04 	addi	r16,r16,48
8111ab80:	112645c0 	call	8112645c <__subdf3>
8111ab84:	ad400044 	addi	r21,r21,1
8111ab88:	ac3fffc5 	stb	r16,-1(r21)
8111ab8c:	ac7fea1e 	bne	r21,r17,8111ab38 <__reset+0xfb0fab38>
8111ab90:	1023883a 	mov	r17,r2
8111ab94:	d8801217 	ldw	r2,72(sp)
8111ab98:	dc800f17 	ldw	r18,60(sp)
8111ab9c:	1829883a 	mov	r20,r3
8111aba0:	b8af883a 	add	r23,r23,r2
8111aba4:	d9001417 	ldw	r4,80(sp)
8111aba8:	d9401517 	ldw	r5,84(sp)
8111abac:	000d883a 	mov	r6,zero
8111abb0:	01cff834 	movhi	r7,16352
8111abb4:	11250600 	call	81125060 <__adddf3>
8111abb8:	880d883a 	mov	r6,r17
8111abbc:	a00f883a 	mov	r7,r20
8111abc0:	1009883a 	mov	r4,r2
8111abc4:	180b883a 	mov	r5,r3
8111abc8:	11263680 	call	81126368 <__ledf2>
8111abcc:	10003e0e 	bge	r2,zero,8111acc8 <_dtoa_r+0x1550>
8111abd0:	d9001317 	ldw	r4,76(sp)
8111abd4:	bd3fffc3 	ldbu	r20,-1(r23)
8111abd8:	d9000515 	stw	r4,20(sp)
8111abdc:	003d3b06 	br	8111a0cc <__reset+0xfb0fa0cc>
8111abe0:	0027883a 	mov	r19,zero
8111abe4:	003f1b06 	br	8111a854 <__reset+0xfb0fa854>
8111abe8:	d8800817 	ldw	r2,32(sp)
8111abec:	11e9c83a 	sub	r20,r2,r7
8111abf0:	0005883a 	mov	r2,zero
8111abf4:	003d5406 	br	8111a148 <__reset+0xfb0fa148>
8111abf8:	00800044 	movi	r2,1
8111abfc:	003dc706 	br	8111a31c <__reset+0xfb0fa31c>
8111ac00:	d8c00217 	ldw	r3,8(sp)
8111ac04:	00800d84 	movi	r2,54
8111ac08:	dd400a17 	ldw	r21,40(sp)
8111ac0c:	10c5c83a 	sub	r2,r2,r3
8111ac10:	dd000817 	ldw	r20,32(sp)
8111ac14:	003d4c06 	br	8111a148 <__reset+0xfb0fa148>
8111ac18:	dc800f15 	stw	r18,60(sp)
8111ac1c:	dcc01015 	stw	r19,64(sp)
8111ac20:	04000084 	movi	r16,2
8111ac24:	003bed06 	br	81119bdc <__reset+0xfb0f9bdc>
8111ac28:	d9000617 	ldw	r4,24(sp)
8111ac2c:	203f0d26 	beq	r4,zero,8111a864 <__reset+0xfb0fa864>
8111ac30:	d9800c17 	ldw	r6,48(sp)
8111ac34:	01bcab0e 	bge	zero,r6,81119ee4 <__reset+0xfb0f9ee4>
8111ac38:	d9401017 	ldw	r5,64(sp)
8111ac3c:	d9000f17 	ldw	r4,60(sp)
8111ac40:	000d883a 	mov	r6,zero
8111ac44:	01d00934 	movhi	r7,16420
8111ac48:	1110ddc0 	call	81110ddc <__muldf3>
8111ac4c:	81000044 	addi	r4,r16,1
8111ac50:	d8800f15 	stw	r2,60(sp)
8111ac54:	d8c01015 	stw	r3,64(sp)
8111ac58:	1126de00 	call	81126de0 <__floatsidf>
8111ac5c:	d9800f17 	ldw	r6,60(sp)
8111ac60:	d9c01017 	ldw	r7,64(sp)
8111ac64:	1009883a 	mov	r4,r2
8111ac68:	180b883a 	mov	r5,r3
8111ac6c:	1110ddc0 	call	81110ddc <__muldf3>
8111ac70:	01d00734 	movhi	r7,16412
8111ac74:	000d883a 	mov	r6,zero
8111ac78:	1009883a 	mov	r4,r2
8111ac7c:	180b883a 	mov	r5,r3
8111ac80:	11250600 	call	81125060 <__adddf3>
8111ac84:	d9c00517 	ldw	r7,20(sp)
8111ac88:	047f3034 	movhi	r17,64704
8111ac8c:	1021883a 	mov	r16,r2
8111ac90:	39ffffc4 	addi	r7,r7,-1
8111ac94:	d9c01315 	stw	r7,76(sp)
8111ac98:	1c63883a 	add	r17,r3,r17
8111ac9c:	db000c17 	ldw	r12,48(sp)
8111aca0:	003bea06 	br	81119c4c <__reset+0xfb0f9c4c>
8111aca4:	dc000915 	stw	r16,36(sp)
8111aca8:	003e0e06 	br	8111a4e4 <__reset+0xfb0fa4e4>
8111acac:	01000e44 	movi	r4,57
8111acb0:	8825883a 	mov	r18,r17
8111acb4:	9dc00044 	addi	r23,r19,1
8111acb8:	99000005 	stb	r4,0(r19)
8111acbc:	a023883a 	mov	r17,r20
8111acc0:	dc000915 	stw	r16,36(sp)
8111acc4:	003da406 	br	8111a358 <__reset+0xfb0fa358>
8111acc8:	d9801417 	ldw	r6,80(sp)
8111accc:	d9c01517 	ldw	r7,84(sp)
8111acd0:	0009883a 	mov	r4,zero
8111acd4:	014ff834 	movhi	r5,16352
8111acd8:	112645c0 	call	8112645c <__subdf3>
8111acdc:	880d883a 	mov	r6,r17
8111ace0:	a00f883a 	mov	r7,r20
8111ace4:	1009883a 	mov	r4,r2
8111ace8:	180b883a 	mov	r5,r3
8111acec:	112628c0 	call	8112628c <__gedf2>
8111acf0:	00bc7c0e 	bge	zero,r2,81119ee4 <__reset+0xfb0f9ee4>
8111acf4:	01000c04 	movi	r4,48
8111acf8:	00000106 	br	8111ad00 <_dtoa_r+0x1588>
8111acfc:	102f883a 	mov	r23,r2
8111ad00:	b8bfffc4 	addi	r2,r23,-1
8111ad04:	10c00007 	ldb	r3,0(r2)
8111ad08:	193ffc26 	beq	r3,r4,8111acfc <__reset+0xfb0facfc>
8111ad0c:	d9801317 	ldw	r6,76(sp)
8111ad10:	d9800515 	stw	r6,20(sp)
8111ad14:	003c4406 	br	81119e28 <__reset+0xfb0f9e28>
8111ad18:	d9801317 	ldw	r6,76(sp)
8111ad1c:	d9800515 	stw	r6,20(sp)
8111ad20:	003cea06 	br	8111a0cc <__reset+0xfb0fa0cc>
8111ad24:	dd800f17 	ldw	r22,60(sp)
8111ad28:	dcc01017 	ldw	r19,64(sp)
8111ad2c:	dc801217 	ldw	r18,72(sp)
8111ad30:	003c6c06 	br	81119ee4 <__reset+0xfb0f9ee4>
8111ad34:	903e031e 	bne	r18,zero,8111a544 <__reset+0xfb0fa544>
8111ad38:	003ebb06 	br	8111a828 <__reset+0xfb0fa828>
8111ad3c:	103e6c1e 	bne	r2,zero,8111a6f0 <__reset+0xfb0fa6f0>
8111ad40:	4080004c 	andi	r2,r8,1
8111ad44:	103e6a26 	beq	r2,zero,8111a6f0 <__reset+0xfb0fa6f0>
8111ad48:	003e6606 	br	8111a6e4 <__reset+0xfb0fa6e4>
8111ad4c:	d8c00317 	ldw	r3,12(sp)
8111ad50:	00800084 	movi	r2,2
8111ad54:	10c02916 	blt	r2,r3,8111adfc <_dtoa_r+0x1684>
8111ad58:	d9000c17 	ldw	r4,48(sp)
8111ad5c:	003e8806 	br	8111a780 <__reset+0xfb0fa780>
8111ad60:	04000084 	movi	r16,2
8111ad64:	003b9d06 	br	81119bdc <__reset+0xfb0f9bdc>
8111ad68:	d9001317 	ldw	r4,76(sp)
8111ad6c:	d9000515 	stw	r4,20(sp)
8111ad70:	003cd606 	br	8111a0cc <__reset+0xfb0fa0cc>
8111ad74:	d8801317 	ldw	r2,76(sp)
8111ad78:	d8800515 	stw	r2,20(sp)
8111ad7c:	003c2a06 	br	81119e28 <__reset+0xfb0f9e28>
8111ad80:	d9800317 	ldw	r6,12(sp)
8111ad84:	00800084 	movi	r2,2
8111ad88:	11801516 	blt	r2,r6,8111ade0 <_dtoa_r+0x1668>
8111ad8c:	d9c00c17 	ldw	r7,48(sp)
8111ad90:	d9c00615 	stw	r7,24(sp)
8111ad94:	003df706 	br	8111a574 <__reset+0xfb0fa574>
8111ad98:	193d3926 	beq	r3,r4,8111a280 <__reset+0xfb0fa280>
8111ad9c:	00c00f04 	movi	r3,60
8111ada0:	1885c83a 	sub	r2,r3,r2
8111ada4:	003ddf06 	br	8111a524 <__reset+0xfb0fa524>
8111ada8:	e009883a 	mov	r4,fp
8111adac:	e0001115 	stw	zero,68(fp)
8111adb0:	000b883a 	mov	r5,zero
8111adb4:	111c8900 	call	8111c890 <_Balloc>
8111adb8:	d8800715 	stw	r2,28(sp)
8111adbc:	d8c00717 	ldw	r3,28(sp)
8111adc0:	00bfffc4 	movi	r2,-1
8111adc4:	01000044 	movi	r4,1
8111adc8:	d8800c15 	stw	r2,48(sp)
8111adcc:	e0c01015 	stw	r3,64(fp)
8111add0:	d9000b15 	stw	r4,44(sp)
8111add4:	d8800615 	stw	r2,24(sp)
8111add8:	d8002215 	stw	zero,136(sp)
8111addc:	003c4106 	br	81119ee4 <__reset+0xfb0f9ee4>
8111ade0:	d8c00c17 	ldw	r3,48(sp)
8111ade4:	d8c00615 	stw	r3,24(sp)
8111ade8:	003e7006 	br	8111a7ac <__reset+0xfb0fa7ac>
8111adec:	04400044 	movi	r17,1
8111adf0:	003b2006 	br	81119a74 <__reset+0xfb0f9a74>
8111adf4:	000b883a 	mov	r5,zero
8111adf8:	003b3d06 	br	81119af0 <__reset+0xfb0f9af0>
8111adfc:	d8800c17 	ldw	r2,48(sp)
8111ae00:	d8800615 	stw	r2,24(sp)
8111ae04:	003e6906 	br	8111a7ac <__reset+0xfb0fa7ac>

8111ae08 <__sflush_r>:
8111ae08:	defffb04 	addi	sp,sp,-20
8111ae0c:	de00012e 	bgeu	sp,et,8111ae14 <__sflush_r+0xc>
8111ae10:	003b68fa 	trap	3
8111ae14:	2880030b 	ldhu	r2,12(r5)
8111ae18:	dcc00315 	stw	r19,12(sp)
8111ae1c:	dc400115 	stw	r17,4(sp)
8111ae20:	dfc00415 	stw	ra,16(sp)
8111ae24:	dc800215 	stw	r18,8(sp)
8111ae28:	dc000015 	stw	r16,0(sp)
8111ae2c:	10c0020c 	andi	r3,r2,8
8111ae30:	2823883a 	mov	r17,r5
8111ae34:	2027883a 	mov	r19,r4
8111ae38:	1800311e 	bne	r3,zero,8111af00 <__sflush_r+0xf8>
8111ae3c:	28c00117 	ldw	r3,4(r5)
8111ae40:	10820014 	ori	r2,r2,2048
8111ae44:	2880030d 	sth	r2,12(r5)
8111ae48:	00c04b0e 	bge	zero,r3,8111af78 <__sflush_r+0x170>
8111ae4c:	8a000a17 	ldw	r8,40(r17)
8111ae50:	40002326 	beq	r8,zero,8111aee0 <__sflush_r+0xd8>
8111ae54:	9c000017 	ldw	r16,0(r19)
8111ae58:	10c4000c 	andi	r3,r2,4096
8111ae5c:	98000015 	stw	zero,0(r19)
8111ae60:	18004826 	beq	r3,zero,8111af84 <__sflush_r+0x17c>
8111ae64:	89801417 	ldw	r6,80(r17)
8111ae68:	10c0010c 	andi	r3,r2,4
8111ae6c:	18000626 	beq	r3,zero,8111ae88 <__sflush_r+0x80>
8111ae70:	88c00117 	ldw	r3,4(r17)
8111ae74:	88800c17 	ldw	r2,48(r17)
8111ae78:	30cdc83a 	sub	r6,r6,r3
8111ae7c:	10000226 	beq	r2,zero,8111ae88 <__sflush_r+0x80>
8111ae80:	88800f17 	ldw	r2,60(r17)
8111ae84:	308dc83a 	sub	r6,r6,r2
8111ae88:	89400717 	ldw	r5,28(r17)
8111ae8c:	000f883a 	mov	r7,zero
8111ae90:	9809883a 	mov	r4,r19
8111ae94:	403ee83a 	callr	r8
8111ae98:	00ffffc4 	movi	r3,-1
8111ae9c:	10c04426 	beq	r2,r3,8111afb0 <__sflush_r+0x1a8>
8111aea0:	88c0030b 	ldhu	r3,12(r17)
8111aea4:	89000417 	ldw	r4,16(r17)
8111aea8:	88000115 	stw	zero,4(r17)
8111aeac:	197dffcc 	andi	r5,r3,63487
8111aeb0:	8940030d 	sth	r5,12(r17)
8111aeb4:	89000015 	stw	r4,0(r17)
8111aeb8:	18c4000c 	andi	r3,r3,4096
8111aebc:	18002c1e 	bne	r3,zero,8111af70 <__sflush_r+0x168>
8111aec0:	89400c17 	ldw	r5,48(r17)
8111aec4:	9c000015 	stw	r16,0(r19)
8111aec8:	28000526 	beq	r5,zero,8111aee0 <__sflush_r+0xd8>
8111aecc:	88801004 	addi	r2,r17,64
8111aed0:	28800226 	beq	r5,r2,8111aedc <__sflush_r+0xd4>
8111aed4:	9809883a 	mov	r4,r19
8111aed8:	111b8c00 	call	8111b8c0 <_free_r>
8111aedc:	88000c15 	stw	zero,48(r17)
8111aee0:	0005883a 	mov	r2,zero
8111aee4:	dfc00417 	ldw	ra,16(sp)
8111aee8:	dcc00317 	ldw	r19,12(sp)
8111aeec:	dc800217 	ldw	r18,8(sp)
8111aef0:	dc400117 	ldw	r17,4(sp)
8111aef4:	dc000017 	ldw	r16,0(sp)
8111aef8:	dec00504 	addi	sp,sp,20
8111aefc:	f800283a 	ret
8111af00:	2c800417 	ldw	r18,16(r5)
8111af04:	903ff626 	beq	r18,zero,8111aee0 <__reset+0xfb0faee0>
8111af08:	2c000017 	ldw	r16,0(r5)
8111af0c:	108000cc 	andi	r2,r2,3
8111af10:	2c800015 	stw	r18,0(r5)
8111af14:	84a1c83a 	sub	r16,r16,r18
8111af18:	1000131e 	bne	r2,zero,8111af68 <__sflush_r+0x160>
8111af1c:	28800517 	ldw	r2,20(r5)
8111af20:	88800215 	stw	r2,8(r17)
8111af24:	04000316 	blt	zero,r16,8111af34 <__sflush_r+0x12c>
8111af28:	003fed06 	br	8111aee0 <__reset+0xfb0faee0>
8111af2c:	90a5883a 	add	r18,r18,r2
8111af30:	043feb0e 	bge	zero,r16,8111aee0 <__reset+0xfb0faee0>
8111af34:	88800917 	ldw	r2,36(r17)
8111af38:	89400717 	ldw	r5,28(r17)
8111af3c:	800f883a 	mov	r7,r16
8111af40:	900d883a 	mov	r6,r18
8111af44:	9809883a 	mov	r4,r19
8111af48:	103ee83a 	callr	r2
8111af4c:	80a1c83a 	sub	r16,r16,r2
8111af50:	00bff616 	blt	zero,r2,8111af2c <__reset+0xfb0faf2c>
8111af54:	88c0030b 	ldhu	r3,12(r17)
8111af58:	00bfffc4 	movi	r2,-1
8111af5c:	18c01014 	ori	r3,r3,64
8111af60:	88c0030d 	sth	r3,12(r17)
8111af64:	003fdf06 	br	8111aee4 <__reset+0xfb0faee4>
8111af68:	0005883a 	mov	r2,zero
8111af6c:	003fec06 	br	8111af20 <__reset+0xfb0faf20>
8111af70:	88801415 	stw	r2,80(r17)
8111af74:	003fd206 	br	8111aec0 <__reset+0xfb0faec0>
8111af78:	28c00f17 	ldw	r3,60(r5)
8111af7c:	00ffb316 	blt	zero,r3,8111ae4c <__reset+0xfb0fae4c>
8111af80:	003fd706 	br	8111aee0 <__reset+0xfb0faee0>
8111af84:	89400717 	ldw	r5,28(r17)
8111af88:	000d883a 	mov	r6,zero
8111af8c:	01c00044 	movi	r7,1
8111af90:	9809883a 	mov	r4,r19
8111af94:	403ee83a 	callr	r8
8111af98:	100d883a 	mov	r6,r2
8111af9c:	00bfffc4 	movi	r2,-1
8111afa0:	30801426 	beq	r6,r2,8111aff4 <__sflush_r+0x1ec>
8111afa4:	8880030b 	ldhu	r2,12(r17)
8111afa8:	8a000a17 	ldw	r8,40(r17)
8111afac:	003fae06 	br	8111ae68 <__reset+0xfb0fae68>
8111afb0:	98c00017 	ldw	r3,0(r19)
8111afb4:	183fba26 	beq	r3,zero,8111aea0 <__reset+0xfb0faea0>
8111afb8:	01000744 	movi	r4,29
8111afbc:	19000626 	beq	r3,r4,8111afd8 <__sflush_r+0x1d0>
8111afc0:	01000584 	movi	r4,22
8111afc4:	19000426 	beq	r3,r4,8111afd8 <__sflush_r+0x1d0>
8111afc8:	88c0030b 	ldhu	r3,12(r17)
8111afcc:	18c01014 	ori	r3,r3,64
8111afd0:	88c0030d 	sth	r3,12(r17)
8111afd4:	003fc306 	br	8111aee4 <__reset+0xfb0faee4>
8111afd8:	8880030b 	ldhu	r2,12(r17)
8111afdc:	88c00417 	ldw	r3,16(r17)
8111afe0:	88000115 	stw	zero,4(r17)
8111afe4:	10bdffcc 	andi	r2,r2,63487
8111afe8:	8880030d 	sth	r2,12(r17)
8111afec:	88c00015 	stw	r3,0(r17)
8111aff0:	003fb306 	br	8111aec0 <__reset+0xfb0faec0>
8111aff4:	98800017 	ldw	r2,0(r19)
8111aff8:	103fea26 	beq	r2,zero,8111afa4 <__reset+0xfb0fafa4>
8111affc:	00c00744 	movi	r3,29
8111b000:	10c00226 	beq	r2,r3,8111b00c <__sflush_r+0x204>
8111b004:	00c00584 	movi	r3,22
8111b008:	10c0031e 	bne	r2,r3,8111b018 <__sflush_r+0x210>
8111b00c:	9c000015 	stw	r16,0(r19)
8111b010:	0005883a 	mov	r2,zero
8111b014:	003fb306 	br	8111aee4 <__reset+0xfb0faee4>
8111b018:	88c0030b 	ldhu	r3,12(r17)
8111b01c:	3005883a 	mov	r2,r6
8111b020:	18c01014 	ori	r3,r3,64
8111b024:	88c0030d 	sth	r3,12(r17)
8111b028:	003fae06 	br	8111aee4 <__reset+0xfb0faee4>

8111b02c <_fflush_r>:
8111b02c:	defffd04 	addi	sp,sp,-12
8111b030:	de00012e 	bgeu	sp,et,8111b038 <_fflush_r+0xc>
8111b034:	003b68fa 	trap	3
8111b038:	dc000115 	stw	r16,4(sp)
8111b03c:	dfc00215 	stw	ra,8(sp)
8111b040:	2021883a 	mov	r16,r4
8111b044:	20000226 	beq	r4,zero,8111b050 <_fflush_r+0x24>
8111b048:	20800e17 	ldw	r2,56(r4)
8111b04c:	10000c26 	beq	r2,zero,8111b080 <_fflush_r+0x54>
8111b050:	2880030f 	ldh	r2,12(r5)
8111b054:	1000051e 	bne	r2,zero,8111b06c <_fflush_r+0x40>
8111b058:	0005883a 	mov	r2,zero
8111b05c:	dfc00217 	ldw	ra,8(sp)
8111b060:	dc000117 	ldw	r16,4(sp)
8111b064:	dec00304 	addi	sp,sp,12
8111b068:	f800283a 	ret
8111b06c:	8009883a 	mov	r4,r16
8111b070:	dfc00217 	ldw	ra,8(sp)
8111b074:	dc000117 	ldw	r16,4(sp)
8111b078:	dec00304 	addi	sp,sp,12
8111b07c:	111ae081 	jmpi	8111ae08 <__sflush_r>
8111b080:	d9400015 	stw	r5,0(sp)
8111b084:	111b4280 	call	8111b428 <__sinit>
8111b088:	d9400017 	ldw	r5,0(sp)
8111b08c:	003ff006 	br	8111b050 <__reset+0xfb0fb050>

8111b090 <fflush>:
8111b090:	20000526 	beq	r4,zero,8111b0a8 <fflush+0x18>
8111b094:	00a04534 	movhi	r2,33044
8111b098:	10821504 	addi	r2,r2,2132
8111b09c:	200b883a 	mov	r5,r4
8111b0a0:	11000017 	ldw	r4,0(r2)
8111b0a4:	111b02c1 	jmpi	8111b02c <_fflush_r>
8111b0a8:	00a04534 	movhi	r2,33044
8111b0ac:	10821404 	addi	r2,r2,2128
8111b0b0:	11000017 	ldw	r4,0(r2)
8111b0b4:	016044b4 	movhi	r5,33042
8111b0b8:	296c0b04 	addi	r5,r5,-20436
8111b0bc:	111c1681 	jmpi	8111c168 <_fwalk_reent>

8111b0c0 <__fp_unlock>:
8111b0c0:	0005883a 	mov	r2,zero
8111b0c4:	f800283a 	ret

8111b0c8 <_cleanup_r>:
8111b0c8:	016044b4 	movhi	r5,33042
8111b0cc:	294ba104 	addi	r5,r5,11908
8111b0d0:	111c1681 	jmpi	8111c168 <_fwalk_reent>

8111b0d4 <__sinit.part.1>:
8111b0d4:	defff704 	addi	sp,sp,-36
8111b0d8:	00e044b4 	movhi	r3,33042
8111b0dc:	de00012e 	bgeu	sp,et,8111b0e4 <__sinit.part.1+0x10>
8111b0e0:	003b68fa 	trap	3
8111b0e4:	18ec3204 	addi	r3,r3,-20280
8111b0e8:	dfc00815 	stw	ra,32(sp)
8111b0ec:	ddc00715 	stw	r23,28(sp)
8111b0f0:	dd800615 	stw	r22,24(sp)
8111b0f4:	dd400515 	stw	r21,20(sp)
8111b0f8:	dd000415 	stw	r20,16(sp)
8111b0fc:	dcc00315 	stw	r19,12(sp)
8111b100:	dc800215 	stw	r18,8(sp)
8111b104:	dc400115 	stw	r17,4(sp)
8111b108:	dc000015 	stw	r16,0(sp)
8111b10c:	24000117 	ldw	r16,4(r4)
8111b110:	20c00f15 	stw	r3,60(r4)
8111b114:	2080bb04 	addi	r2,r4,748
8111b118:	00c000c4 	movi	r3,3
8111b11c:	20c0b915 	stw	r3,740(r4)
8111b120:	2080ba15 	stw	r2,744(r4)
8111b124:	2000b815 	stw	zero,736(r4)
8111b128:	05c00204 	movi	r23,8
8111b12c:	00800104 	movi	r2,4
8111b130:	2025883a 	mov	r18,r4
8111b134:	b80d883a 	mov	r6,r23
8111b138:	81001704 	addi	r4,r16,92
8111b13c:	000b883a 	mov	r5,zero
8111b140:	80000015 	stw	zero,0(r16)
8111b144:	80000115 	stw	zero,4(r16)
8111b148:	80000215 	stw	zero,8(r16)
8111b14c:	8080030d 	sth	r2,12(r16)
8111b150:	80001915 	stw	zero,100(r16)
8111b154:	8000038d 	sth	zero,14(r16)
8111b158:	80000415 	stw	zero,16(r16)
8111b15c:	80000515 	stw	zero,20(r16)
8111b160:	80000615 	stw	zero,24(r16)
8111b164:	1112acc0 	call	81112acc <memset>
8111b168:	05a04474 	movhi	r22,33041
8111b16c:	94400217 	ldw	r17,8(r18)
8111b170:	05604474 	movhi	r21,33041
8111b174:	05204474 	movhi	r20,33041
8111b178:	04e04474 	movhi	r19,33041
8111b17c:	b58c5604 	addi	r22,r22,12632
8111b180:	ad4c6f04 	addi	r21,r21,12732
8111b184:	a50c9004 	addi	r20,r20,12864
8111b188:	9ccca904 	addi	r19,r19,12964
8111b18c:	85800815 	stw	r22,32(r16)
8111b190:	85400915 	stw	r21,36(r16)
8111b194:	85000a15 	stw	r20,40(r16)
8111b198:	84c00b15 	stw	r19,44(r16)
8111b19c:	84000715 	stw	r16,28(r16)
8111b1a0:	00800284 	movi	r2,10
8111b1a4:	8880030d 	sth	r2,12(r17)
8111b1a8:	00800044 	movi	r2,1
8111b1ac:	b80d883a 	mov	r6,r23
8111b1b0:	89001704 	addi	r4,r17,92
8111b1b4:	000b883a 	mov	r5,zero
8111b1b8:	88000015 	stw	zero,0(r17)
8111b1bc:	88000115 	stw	zero,4(r17)
8111b1c0:	88000215 	stw	zero,8(r17)
8111b1c4:	88001915 	stw	zero,100(r17)
8111b1c8:	8880038d 	sth	r2,14(r17)
8111b1cc:	88000415 	stw	zero,16(r17)
8111b1d0:	88000515 	stw	zero,20(r17)
8111b1d4:	88000615 	stw	zero,24(r17)
8111b1d8:	1112acc0 	call	81112acc <memset>
8111b1dc:	94000317 	ldw	r16,12(r18)
8111b1e0:	00800484 	movi	r2,18
8111b1e4:	8c400715 	stw	r17,28(r17)
8111b1e8:	8d800815 	stw	r22,32(r17)
8111b1ec:	8d400915 	stw	r21,36(r17)
8111b1f0:	8d000a15 	stw	r20,40(r17)
8111b1f4:	8cc00b15 	stw	r19,44(r17)
8111b1f8:	8080030d 	sth	r2,12(r16)
8111b1fc:	00800084 	movi	r2,2
8111b200:	80000015 	stw	zero,0(r16)
8111b204:	80000115 	stw	zero,4(r16)
8111b208:	80000215 	stw	zero,8(r16)
8111b20c:	80001915 	stw	zero,100(r16)
8111b210:	8080038d 	sth	r2,14(r16)
8111b214:	80000415 	stw	zero,16(r16)
8111b218:	80000515 	stw	zero,20(r16)
8111b21c:	80000615 	stw	zero,24(r16)
8111b220:	b80d883a 	mov	r6,r23
8111b224:	000b883a 	mov	r5,zero
8111b228:	81001704 	addi	r4,r16,92
8111b22c:	1112acc0 	call	81112acc <memset>
8111b230:	00800044 	movi	r2,1
8111b234:	84000715 	stw	r16,28(r16)
8111b238:	85800815 	stw	r22,32(r16)
8111b23c:	85400915 	stw	r21,36(r16)
8111b240:	85000a15 	stw	r20,40(r16)
8111b244:	84c00b15 	stw	r19,44(r16)
8111b248:	90800e15 	stw	r2,56(r18)
8111b24c:	dfc00817 	ldw	ra,32(sp)
8111b250:	ddc00717 	ldw	r23,28(sp)
8111b254:	dd800617 	ldw	r22,24(sp)
8111b258:	dd400517 	ldw	r21,20(sp)
8111b25c:	dd000417 	ldw	r20,16(sp)
8111b260:	dcc00317 	ldw	r19,12(sp)
8111b264:	dc800217 	ldw	r18,8(sp)
8111b268:	dc400117 	ldw	r17,4(sp)
8111b26c:	dc000017 	ldw	r16,0(sp)
8111b270:	dec00904 	addi	sp,sp,36
8111b274:	f800283a 	ret

8111b278 <__fp_lock>:
8111b278:	0005883a 	mov	r2,zero
8111b27c:	f800283a 	ret

8111b280 <__sfmoreglue>:
8111b280:	defffc04 	addi	sp,sp,-16
8111b284:	de00012e 	bgeu	sp,et,8111b28c <__sfmoreglue+0xc>
8111b288:	003b68fa 	trap	3
8111b28c:	dc400115 	stw	r17,4(sp)
8111b290:	2c7fffc4 	addi	r17,r5,-1
8111b294:	8c401a24 	muli	r17,r17,104
8111b298:	dc800215 	stw	r18,8(sp)
8111b29c:	2825883a 	mov	r18,r5
8111b2a0:	89401d04 	addi	r5,r17,116
8111b2a4:	dc000015 	stw	r16,0(sp)
8111b2a8:	dfc00315 	stw	ra,12(sp)
8111b2ac:	11121680 	call	81112168 <_malloc_r>
8111b2b0:	1021883a 	mov	r16,r2
8111b2b4:	10000726 	beq	r2,zero,8111b2d4 <__sfmoreglue+0x54>
8111b2b8:	11000304 	addi	r4,r2,12
8111b2bc:	10000015 	stw	zero,0(r2)
8111b2c0:	14800115 	stw	r18,4(r2)
8111b2c4:	11000215 	stw	r4,8(r2)
8111b2c8:	89801a04 	addi	r6,r17,104
8111b2cc:	000b883a 	mov	r5,zero
8111b2d0:	1112acc0 	call	81112acc <memset>
8111b2d4:	8005883a 	mov	r2,r16
8111b2d8:	dfc00317 	ldw	ra,12(sp)
8111b2dc:	dc800217 	ldw	r18,8(sp)
8111b2e0:	dc400117 	ldw	r17,4(sp)
8111b2e4:	dc000017 	ldw	r16,0(sp)
8111b2e8:	dec00404 	addi	sp,sp,16
8111b2ec:	f800283a 	ret

8111b2f0 <__sfp>:
8111b2f0:	defffb04 	addi	sp,sp,-20
8111b2f4:	de00012e 	bgeu	sp,et,8111b2fc <__sfp+0xc>
8111b2f8:	003b68fa 	trap	3
8111b2fc:	dc000015 	stw	r16,0(sp)
8111b300:	04204534 	movhi	r16,33044
8111b304:	84021404 	addi	r16,r16,2128
8111b308:	dcc00315 	stw	r19,12(sp)
8111b30c:	2027883a 	mov	r19,r4
8111b310:	81000017 	ldw	r4,0(r16)
8111b314:	dfc00415 	stw	ra,16(sp)
8111b318:	dc800215 	stw	r18,8(sp)
8111b31c:	20800e17 	ldw	r2,56(r4)
8111b320:	dc400115 	stw	r17,4(sp)
8111b324:	1000021e 	bne	r2,zero,8111b330 <__sfp+0x40>
8111b328:	111b0d40 	call	8111b0d4 <__sinit.part.1>
8111b32c:	81000017 	ldw	r4,0(r16)
8111b330:	2480b804 	addi	r18,r4,736
8111b334:	047fffc4 	movi	r17,-1
8111b338:	91000117 	ldw	r4,4(r18)
8111b33c:	94000217 	ldw	r16,8(r18)
8111b340:	213fffc4 	addi	r4,r4,-1
8111b344:	20000a16 	blt	r4,zero,8111b370 <__sfp+0x80>
8111b348:	8080030f 	ldh	r2,12(r16)
8111b34c:	10000c26 	beq	r2,zero,8111b380 <__sfp+0x90>
8111b350:	80c01d04 	addi	r3,r16,116
8111b354:	00000206 	br	8111b360 <__sfp+0x70>
8111b358:	18bfe60f 	ldh	r2,-104(r3)
8111b35c:	10000826 	beq	r2,zero,8111b380 <__sfp+0x90>
8111b360:	213fffc4 	addi	r4,r4,-1
8111b364:	1c3ffd04 	addi	r16,r3,-12
8111b368:	18c01a04 	addi	r3,r3,104
8111b36c:	247ffa1e 	bne	r4,r17,8111b358 <__reset+0xfb0fb358>
8111b370:	90800017 	ldw	r2,0(r18)
8111b374:	10001d26 	beq	r2,zero,8111b3ec <__sfp+0xfc>
8111b378:	1025883a 	mov	r18,r2
8111b37c:	003fee06 	br	8111b338 <__reset+0xfb0fb338>
8111b380:	00bfffc4 	movi	r2,-1
8111b384:	8080038d 	sth	r2,14(r16)
8111b388:	00800044 	movi	r2,1
8111b38c:	8080030d 	sth	r2,12(r16)
8111b390:	80001915 	stw	zero,100(r16)
8111b394:	80000015 	stw	zero,0(r16)
8111b398:	80000215 	stw	zero,8(r16)
8111b39c:	80000115 	stw	zero,4(r16)
8111b3a0:	80000415 	stw	zero,16(r16)
8111b3a4:	80000515 	stw	zero,20(r16)
8111b3a8:	80000615 	stw	zero,24(r16)
8111b3ac:	01800204 	movi	r6,8
8111b3b0:	000b883a 	mov	r5,zero
8111b3b4:	81001704 	addi	r4,r16,92
8111b3b8:	1112acc0 	call	81112acc <memset>
8111b3bc:	8005883a 	mov	r2,r16
8111b3c0:	80000c15 	stw	zero,48(r16)
8111b3c4:	80000d15 	stw	zero,52(r16)
8111b3c8:	80001115 	stw	zero,68(r16)
8111b3cc:	80001215 	stw	zero,72(r16)
8111b3d0:	dfc00417 	ldw	ra,16(sp)
8111b3d4:	dcc00317 	ldw	r19,12(sp)
8111b3d8:	dc800217 	ldw	r18,8(sp)
8111b3dc:	dc400117 	ldw	r17,4(sp)
8111b3e0:	dc000017 	ldw	r16,0(sp)
8111b3e4:	dec00504 	addi	sp,sp,20
8111b3e8:	f800283a 	ret
8111b3ec:	01400104 	movi	r5,4
8111b3f0:	9809883a 	mov	r4,r19
8111b3f4:	111b2800 	call	8111b280 <__sfmoreglue>
8111b3f8:	90800015 	stw	r2,0(r18)
8111b3fc:	103fde1e 	bne	r2,zero,8111b378 <__reset+0xfb0fb378>
8111b400:	00800304 	movi	r2,12
8111b404:	98800015 	stw	r2,0(r19)
8111b408:	0005883a 	mov	r2,zero
8111b40c:	003ff006 	br	8111b3d0 <__reset+0xfb0fb3d0>

8111b410 <_cleanup>:
8111b410:	00a04534 	movhi	r2,33044
8111b414:	10821404 	addi	r2,r2,2128
8111b418:	11000017 	ldw	r4,0(r2)
8111b41c:	016044b4 	movhi	r5,33042
8111b420:	294ba104 	addi	r5,r5,11908
8111b424:	111c1681 	jmpi	8111c168 <_fwalk_reent>

8111b428 <__sinit>:
8111b428:	20800e17 	ldw	r2,56(r4)
8111b42c:	10000126 	beq	r2,zero,8111b434 <__sinit+0xc>
8111b430:	f800283a 	ret
8111b434:	111b0d41 	jmpi	8111b0d4 <__sinit.part.1>

8111b438 <__sfp_lock_acquire>:
8111b438:	f800283a 	ret

8111b43c <__sfp_lock_release>:
8111b43c:	f800283a 	ret

8111b440 <__sinit_lock_acquire>:
8111b440:	f800283a 	ret

8111b444 <__sinit_lock_release>:
8111b444:	f800283a 	ret

8111b448 <__fp_lock_all>:
8111b448:	00a04534 	movhi	r2,33044
8111b44c:	10821504 	addi	r2,r2,2132
8111b450:	11000017 	ldw	r4,0(r2)
8111b454:	016044b4 	movhi	r5,33042
8111b458:	296c9e04 	addi	r5,r5,-19848
8111b45c:	111c09c1 	jmpi	8111c09c <_fwalk>

8111b460 <__fp_unlock_all>:
8111b460:	00a04534 	movhi	r2,33044
8111b464:	10821504 	addi	r2,r2,2132
8111b468:	11000017 	ldw	r4,0(r2)
8111b46c:	016044b4 	movhi	r5,33042
8111b470:	296c3004 	addi	r5,r5,-20288
8111b474:	111c09c1 	jmpi	8111c09c <_fwalk>

8111b478 <__sflags>:
8111b478:	28800007 	ldb	r2,0(r5)
8111b47c:	00c01c84 	movi	r3,114
8111b480:	10c02426 	beq	r2,r3,8111b514 <__sflags+0x9c>
8111b484:	00c01dc4 	movi	r3,119
8111b488:	10c01e26 	beq	r2,r3,8111b504 <__sflags+0x8c>
8111b48c:	00c01844 	movi	r3,97
8111b490:	10c00426 	beq	r2,r3,8111b4a4 <__sflags+0x2c>
8111b494:	00800584 	movi	r2,22
8111b498:	20800015 	stw	r2,0(r4)
8111b49c:	0005883a 	mov	r2,zero
8111b4a0:	f800283a 	ret
8111b4a4:	02c08204 	movi	r11,520
8111b4a8:	01000044 	movi	r4,1
8111b4ac:	00804204 	movi	r2,264
8111b4b0:	01c00ac4 	movi	r7,43
8111b4b4:	02bff8c4 	movi	r10,-29
8111b4b8:	027fff04 	movi	r9,-4
8111b4bc:	02001e04 	movi	r8,120
8111b4c0:	29400044 	addi	r5,r5,1
8111b4c4:	28c00007 	ldb	r3,0(r5)
8111b4c8:	18000626 	beq	r3,zero,8111b4e4 <__sflags+0x6c>
8111b4cc:	19c00826 	beq	r3,r7,8111b4f0 <__sflags+0x78>
8111b4d0:	1a3ffb1e 	bne	r3,r8,8111b4c0 <__reset+0xfb0fb4c0>
8111b4d4:	29400044 	addi	r5,r5,1
8111b4d8:	28c00007 	ldb	r3,0(r5)
8111b4dc:	21020014 	ori	r4,r4,2048
8111b4e0:	183ffa1e 	bne	r3,zero,8111b4cc <__reset+0xfb0fb4cc>
8111b4e4:	22c8b03a 	or	r4,r4,r11
8111b4e8:	31000015 	stw	r4,0(r6)
8111b4ec:	f800283a 	ret
8111b4f0:	1284703a 	and	r2,r2,r10
8111b4f4:	2248703a 	and	r4,r4,r9
8111b4f8:	10800414 	ori	r2,r2,16
8111b4fc:	21000094 	ori	r4,r4,2
8111b500:	003fef06 	br	8111b4c0 <__reset+0xfb0fb4c0>
8111b504:	02c18004 	movi	r11,1536
8111b508:	01000044 	movi	r4,1
8111b50c:	00800204 	movi	r2,8
8111b510:	003fe706 	br	8111b4b0 <__reset+0xfb0fb4b0>
8111b514:	0017883a 	mov	r11,zero
8111b518:	0009883a 	mov	r4,zero
8111b51c:	00800104 	movi	r2,4
8111b520:	003fe306 	br	8111b4b0 <__reset+0xfb0fb4b0>

8111b524 <_fread_r>:
8111b524:	defff404 	addi	sp,sp,-48
8111b528:	de00012e 	bgeu	sp,et,8111b530 <_fread_r+0xc>
8111b52c:	003b68fa 	trap	3
8111b530:	dd800815 	stw	r22,32(sp)
8111b534:	39ad383a 	mul	r22,r7,r6
8111b538:	dc000215 	stw	r16,8(sp)
8111b53c:	dfc00b15 	stw	ra,44(sp)
8111b540:	df000a15 	stw	fp,40(sp)
8111b544:	ddc00915 	stw	r23,36(sp)
8111b548:	dd400715 	stw	r21,28(sp)
8111b54c:	dd000615 	stw	r20,24(sp)
8111b550:	dcc00515 	stw	r19,20(sp)
8111b554:	dc800415 	stw	r18,16(sp)
8111b558:	dc400315 	stw	r17,12(sp)
8111b55c:	dc000c17 	ldw	r16,48(sp)
8111b560:	b0003b26 	beq	r22,zero,8111b650 <_fread_r+0x12c>
8111b564:	302f883a 	mov	r23,r6
8111b568:	382b883a 	mov	r21,r7
8111b56c:	2029883a 	mov	r20,r4
8111b570:	2827883a 	mov	r19,r5
8111b574:	20000226 	beq	r4,zero,8111b580 <_fread_r+0x5c>
8111b578:	20800e17 	ldw	r2,56(r4)
8111b57c:	10006e26 	beq	r2,zero,8111b738 <_fread_r+0x214>
8111b580:	8080030b 	ldhu	r2,12(r16)
8111b584:	10c8000c 	andi	r3,r2,8192
8111b588:	1800061e 	bne	r3,zero,8111b5a4 <_fread_r+0x80>
8111b58c:	81001917 	ldw	r4,100(r16)
8111b590:	00f7ffc4 	movi	r3,-8193
8111b594:	10880014 	ori	r2,r2,8192
8111b598:	20c6703a 	and	r3,r4,r3
8111b59c:	8080030d 	sth	r2,12(r16)
8111b5a0:	80c01915 	stw	r3,100(r16)
8111b5a4:	84400117 	ldw	r17,4(r16)
8111b5a8:	88005f16 	blt	r17,zero,8111b728 <_fread_r+0x204>
8111b5ac:	8809883a 	mov	r4,r17
8111b5b0:	1080008c 	andi	r2,r2,2
8111b5b4:	1000281e 	bne	r2,zero,8111b658 <_fread_r+0x134>
8111b5b8:	b025883a 	mov	r18,r22
8111b5bc:	00000b06 	br	8111b5ec <_fread_r+0xc8>
8111b5c0:	111297c0 	call	8111297c <memcpy>
8111b5c4:	80800017 	ldw	r2,0(r16)
8111b5c8:	9c67883a 	add	r19,r19,r17
8111b5cc:	9465c83a 	sub	r18,r18,r17
8111b5d0:	1463883a 	add	r17,r2,r17
8111b5d4:	800b883a 	mov	r5,r16
8111b5d8:	a009883a 	mov	r4,r20
8111b5dc:	84400015 	stw	r17,0(r16)
8111b5e0:	1112dd00 	call	81112dd0 <__srefill_r>
8111b5e4:	10004c1e 	bne	r2,zero,8111b718 <_fread_r+0x1f4>
8111b5e8:	84400117 	ldw	r17,4(r16)
8111b5ec:	880d883a 	mov	r6,r17
8111b5f0:	9809883a 	mov	r4,r19
8111b5f4:	81400017 	ldw	r5,0(r16)
8111b5f8:	8cbff136 	bltu	r17,r18,8111b5c0 <__reset+0xfb0fb5c0>
8111b5fc:	900d883a 	mov	r6,r18
8111b600:	111297c0 	call	8111297c <memcpy>
8111b604:	80c00117 	ldw	r3,4(r16)
8111b608:	81000017 	ldw	r4,0(r16)
8111b60c:	a805883a 	mov	r2,r21
8111b610:	1c87c83a 	sub	r3,r3,r18
8111b614:	24a5883a 	add	r18,r4,r18
8111b618:	80c00115 	stw	r3,4(r16)
8111b61c:	84800015 	stw	r18,0(r16)
8111b620:	dfc00b17 	ldw	ra,44(sp)
8111b624:	df000a17 	ldw	fp,40(sp)
8111b628:	ddc00917 	ldw	r23,36(sp)
8111b62c:	dd800817 	ldw	r22,32(sp)
8111b630:	dd400717 	ldw	r21,28(sp)
8111b634:	dd000617 	ldw	r20,24(sp)
8111b638:	dcc00517 	ldw	r19,20(sp)
8111b63c:	dc800417 	ldw	r18,16(sp)
8111b640:	dc400317 	ldw	r17,12(sp)
8111b644:	dc000217 	ldw	r16,8(sp)
8111b648:	dec00c04 	addi	sp,sp,48
8111b64c:	f800283a 	ret
8111b650:	0005883a 	mov	r2,zero
8111b654:	003ff206 	br	8111b620 <__reset+0xfb0fb620>
8111b658:	b007883a 	mov	r3,r22
8111b65c:	2580012e 	bgeu	r4,r22,8111b664 <_fread_r+0x140>
8111b660:	2007883a 	mov	r3,r4
8111b664:	81400017 	ldw	r5,0(r16)
8111b668:	180d883a 	mov	r6,r3
8111b66c:	9809883a 	mov	r4,r19
8111b670:	d8c00115 	stw	r3,4(sp)
8111b674:	111297c0 	call	8111297c <memcpy>
8111b678:	d8c00117 	ldw	r3,4(sp)
8111b67c:	84400017 	ldw	r17,0(r16)
8111b680:	80800117 	ldw	r2,4(r16)
8111b684:	81400c17 	ldw	r5,48(r16)
8111b688:	88e3883a 	add	r17,r17,r3
8111b68c:	10c5c83a 	sub	r2,r2,r3
8111b690:	84400015 	stw	r17,0(r16)
8111b694:	80800115 	stw	r2,4(r16)
8111b698:	b0e5c83a 	sub	r18,r22,r3
8111b69c:	28002b26 	beq	r5,zero,8111b74c <_fread_r+0x228>
8111b6a0:	90002b26 	beq	r18,zero,8111b750 <_fread_r+0x22c>
8111b6a4:	80801004 	addi	r2,r16,64
8111b6a8:	28800526 	beq	r5,r2,8111b6c0 <_fread_r+0x19c>
8111b6ac:	a009883a 	mov	r4,r20
8111b6b0:	d8c00115 	stw	r3,4(sp)
8111b6b4:	111b8c00 	call	8111b8c0 <_free_r>
8111b6b8:	d8c00117 	ldw	r3,4(sp)
8111b6bc:	84400017 	ldw	r17,0(r16)
8111b6c0:	80000c15 	stw	zero,48(r16)
8111b6c4:	80800517 	ldw	r2,20(r16)
8111b6c8:	87000417 	ldw	fp,16(r16)
8111b6cc:	98e7883a 	add	r19,r19,r3
8111b6d0:	d8800015 	stw	r2,0(sp)
8111b6d4:	00000106 	br	8111b6dc <_fread_r+0x1b8>
8111b6d8:	90001d26 	beq	r18,zero,8111b750 <_fread_r+0x22c>
8111b6dc:	84c00415 	stw	r19,16(r16)
8111b6e0:	84800515 	stw	r18,20(r16)
8111b6e4:	84c00015 	stw	r19,0(r16)
8111b6e8:	a009883a 	mov	r4,r20
8111b6ec:	800b883a 	mov	r5,r16
8111b6f0:	1112dd00 	call	81112dd0 <__srefill_r>
8111b6f4:	d9000017 	ldw	r4,0(sp)
8111b6f8:	80c00117 	ldw	r3,4(r16)
8111b6fc:	87000415 	stw	fp,16(r16)
8111b700:	81000515 	stw	r4,20(r16)
8111b704:	84400015 	stw	r17,0(r16)
8111b708:	80000115 	stw	zero,4(r16)
8111b70c:	90e5c83a 	sub	r18,r18,r3
8111b710:	98e7883a 	add	r19,r19,r3
8111b714:	103ff026 	beq	r2,zero,8111b6d8 <__reset+0xfb0fb6d8>
8111b718:	b80b883a 	mov	r5,r23
8111b71c:	b489c83a 	sub	r4,r22,r18
8111b720:	1124da80 	call	81124da8 <__udivsi3>
8111b724:	003fbe06 	br	8111b620 <__reset+0xfb0fb620>
8111b728:	80000115 	stw	zero,4(r16)
8111b72c:	0009883a 	mov	r4,zero
8111b730:	0023883a 	mov	r17,zero
8111b734:	003f9e06 	br	8111b5b0 <__reset+0xfb0fb5b0>
8111b738:	111b4280 	call	8111b428 <__sinit>
8111b73c:	8080030b 	ldhu	r2,12(r16)
8111b740:	10c8000c 	andi	r3,r2,8192
8111b744:	183f971e 	bne	r3,zero,8111b5a4 <__reset+0xfb0fb5a4>
8111b748:	003f9006 	br	8111b58c <__reset+0xfb0fb58c>
8111b74c:	903fdd1e 	bne	r18,zero,8111b6c4 <__reset+0xfb0fb6c4>
8111b750:	a805883a 	mov	r2,r21
8111b754:	003fb206 	br	8111b620 <__reset+0xfb0fb620>

8111b758 <fread>:
8111b758:	defffe04 	addi	sp,sp,-8
8111b75c:	00a04534 	movhi	r2,33044
8111b760:	de00012e 	bgeu	sp,et,8111b768 <fread+0x10>
8111b764:	003b68fa 	trap	3
8111b768:	10821504 	addi	r2,r2,2132
8111b76c:	d9c00015 	stw	r7,0(sp)
8111b770:	300f883a 	mov	r7,r6
8111b774:	280d883a 	mov	r6,r5
8111b778:	200b883a 	mov	r5,r4
8111b77c:	11000017 	ldw	r4,0(r2)
8111b780:	dfc00115 	stw	ra,4(sp)
8111b784:	111b5240 	call	8111b524 <_fread_r>
8111b788:	dfc00117 	ldw	ra,4(sp)
8111b78c:	dec00204 	addi	sp,sp,8
8111b790:	f800283a 	ret

8111b794 <_malloc_trim_r>:
8111b794:	defffb04 	addi	sp,sp,-20
8111b798:	de00012e 	bgeu	sp,et,8111b7a0 <_malloc_trim_r+0xc>
8111b79c:	003b68fa 	trap	3
8111b7a0:	dcc00315 	stw	r19,12(sp)
8111b7a4:	04e04534 	movhi	r19,33044
8111b7a8:	dc800215 	stw	r18,8(sp)
8111b7ac:	dc400115 	stw	r17,4(sp)
8111b7b0:	dc000015 	stw	r16,0(sp)
8111b7b4:	dfc00415 	stw	ra,16(sp)
8111b7b8:	2821883a 	mov	r16,r5
8111b7bc:	9cfbfa04 	addi	r19,r19,-4120
8111b7c0:	2025883a 	mov	r18,r4
8111b7c4:	11281f80 	call	811281f8 <__malloc_lock>
8111b7c8:	98800217 	ldw	r2,8(r19)
8111b7cc:	14400117 	ldw	r17,4(r2)
8111b7d0:	00bfff04 	movi	r2,-4
8111b7d4:	88a2703a 	and	r17,r17,r2
8111b7d8:	8c21c83a 	sub	r16,r17,r16
8111b7dc:	8403fbc4 	addi	r16,r16,4079
8111b7e0:	8020d33a 	srli	r16,r16,12
8111b7e4:	0083ffc4 	movi	r2,4095
8111b7e8:	843fffc4 	addi	r16,r16,-1
8111b7ec:	8020933a 	slli	r16,r16,12
8111b7f0:	1400060e 	bge	r2,r16,8111b80c <_malloc_trim_r+0x78>
8111b7f4:	000b883a 	mov	r5,zero
8111b7f8:	9009883a 	mov	r4,r18
8111b7fc:	1112fac0 	call	81112fac <_sbrk_r>
8111b800:	98c00217 	ldw	r3,8(r19)
8111b804:	1c47883a 	add	r3,r3,r17
8111b808:	10c00a26 	beq	r2,r3,8111b834 <_malloc_trim_r+0xa0>
8111b80c:	9009883a 	mov	r4,r18
8111b810:	11283200 	call	81128320 <__malloc_unlock>
8111b814:	0005883a 	mov	r2,zero
8111b818:	dfc00417 	ldw	ra,16(sp)
8111b81c:	dcc00317 	ldw	r19,12(sp)
8111b820:	dc800217 	ldw	r18,8(sp)
8111b824:	dc400117 	ldw	r17,4(sp)
8111b828:	dc000017 	ldw	r16,0(sp)
8111b82c:	dec00504 	addi	sp,sp,20
8111b830:	f800283a 	ret
8111b834:	040bc83a 	sub	r5,zero,r16
8111b838:	9009883a 	mov	r4,r18
8111b83c:	1112fac0 	call	81112fac <_sbrk_r>
8111b840:	00ffffc4 	movi	r3,-1
8111b844:	10c00d26 	beq	r2,r3,8111b87c <_malloc_trim_r+0xe8>
8111b848:	00e04534 	movhi	r3,33044
8111b84c:	18c2d004 	addi	r3,r3,2880
8111b850:	18800017 	ldw	r2,0(r3)
8111b854:	99000217 	ldw	r4,8(r19)
8111b858:	8c23c83a 	sub	r17,r17,r16
8111b85c:	8c400054 	ori	r17,r17,1
8111b860:	1421c83a 	sub	r16,r2,r16
8111b864:	24400115 	stw	r17,4(r4)
8111b868:	9009883a 	mov	r4,r18
8111b86c:	1c000015 	stw	r16,0(r3)
8111b870:	11283200 	call	81128320 <__malloc_unlock>
8111b874:	00800044 	movi	r2,1
8111b878:	003fe706 	br	8111b818 <__reset+0xfb0fb818>
8111b87c:	000b883a 	mov	r5,zero
8111b880:	9009883a 	mov	r4,r18
8111b884:	1112fac0 	call	81112fac <_sbrk_r>
8111b888:	99000217 	ldw	r4,8(r19)
8111b88c:	014003c4 	movi	r5,15
8111b890:	1107c83a 	sub	r3,r2,r4
8111b894:	28ffdd0e 	bge	r5,r3,8111b80c <__reset+0xfb0fb80c>
8111b898:	01604534 	movhi	r5,33044
8111b89c:	29421604 	addi	r5,r5,2136
8111b8a0:	29400017 	ldw	r5,0(r5)
8111b8a4:	18c00054 	ori	r3,r3,1
8111b8a8:	20c00115 	stw	r3,4(r4)
8111b8ac:	00e04534 	movhi	r3,33044
8111b8b0:	1145c83a 	sub	r2,r2,r5
8111b8b4:	18c2d004 	addi	r3,r3,2880
8111b8b8:	18800015 	stw	r2,0(r3)
8111b8bc:	003fd306 	br	8111b80c <__reset+0xfb0fb80c>

8111b8c0 <_free_r>:
8111b8c0:	28004326 	beq	r5,zero,8111b9d0 <_free_r+0x110>
8111b8c4:	defffd04 	addi	sp,sp,-12
8111b8c8:	de00012e 	bgeu	sp,et,8111b8d0 <_free_r+0x10>
8111b8cc:	003b68fa 	trap	3
8111b8d0:	dc400115 	stw	r17,4(sp)
8111b8d4:	dc000015 	stw	r16,0(sp)
8111b8d8:	2023883a 	mov	r17,r4
8111b8dc:	2821883a 	mov	r16,r5
8111b8e0:	dfc00215 	stw	ra,8(sp)
8111b8e4:	11281f80 	call	811281f8 <__malloc_lock>
8111b8e8:	81ffff17 	ldw	r7,-4(r16)
8111b8ec:	00bfff84 	movi	r2,-2
8111b8f0:	01204534 	movhi	r4,33044
8111b8f4:	81bffe04 	addi	r6,r16,-8
8111b8f8:	3884703a 	and	r2,r7,r2
8111b8fc:	213bfa04 	addi	r4,r4,-4120
8111b900:	308b883a 	add	r5,r6,r2
8111b904:	2a400117 	ldw	r9,4(r5)
8111b908:	22000217 	ldw	r8,8(r4)
8111b90c:	00ffff04 	movi	r3,-4
8111b910:	48c6703a 	and	r3,r9,r3
8111b914:	2a005726 	beq	r5,r8,8111ba74 <_free_r+0x1b4>
8111b918:	28c00115 	stw	r3,4(r5)
8111b91c:	39c0004c 	andi	r7,r7,1
8111b920:	3800091e 	bne	r7,zero,8111b948 <_free_r+0x88>
8111b924:	823ffe17 	ldw	r8,-8(r16)
8111b928:	22400204 	addi	r9,r4,8
8111b92c:	320dc83a 	sub	r6,r6,r8
8111b930:	31c00217 	ldw	r7,8(r6)
8111b934:	1205883a 	add	r2,r2,r8
8111b938:	3a406526 	beq	r7,r9,8111bad0 <_free_r+0x210>
8111b93c:	32000317 	ldw	r8,12(r6)
8111b940:	3a000315 	stw	r8,12(r7)
8111b944:	41c00215 	stw	r7,8(r8)
8111b948:	28cf883a 	add	r7,r5,r3
8111b94c:	39c00117 	ldw	r7,4(r7)
8111b950:	39c0004c 	andi	r7,r7,1
8111b954:	38003a26 	beq	r7,zero,8111ba40 <_free_r+0x180>
8111b958:	10c00054 	ori	r3,r2,1
8111b95c:	30c00115 	stw	r3,4(r6)
8111b960:	3087883a 	add	r3,r6,r2
8111b964:	18800015 	stw	r2,0(r3)
8111b968:	00c07fc4 	movi	r3,511
8111b96c:	18801936 	bltu	r3,r2,8111b9d4 <_free_r+0x114>
8111b970:	1004d0fa 	srli	r2,r2,3
8111b974:	01c00044 	movi	r7,1
8111b978:	21400117 	ldw	r5,4(r4)
8111b97c:	10c00044 	addi	r3,r2,1
8111b980:	18c7883a 	add	r3,r3,r3
8111b984:	1005d0ba 	srai	r2,r2,2
8111b988:	18c7883a 	add	r3,r3,r3
8111b98c:	18c7883a 	add	r3,r3,r3
8111b990:	1907883a 	add	r3,r3,r4
8111b994:	3884983a 	sll	r2,r7,r2
8111b998:	19c00017 	ldw	r7,0(r3)
8111b99c:	1a3ffe04 	addi	r8,r3,-8
8111b9a0:	1144b03a 	or	r2,r2,r5
8111b9a4:	32000315 	stw	r8,12(r6)
8111b9a8:	31c00215 	stw	r7,8(r6)
8111b9ac:	20800115 	stw	r2,4(r4)
8111b9b0:	19800015 	stw	r6,0(r3)
8111b9b4:	39800315 	stw	r6,12(r7)
8111b9b8:	8809883a 	mov	r4,r17
8111b9bc:	dfc00217 	ldw	ra,8(sp)
8111b9c0:	dc400117 	ldw	r17,4(sp)
8111b9c4:	dc000017 	ldw	r16,0(sp)
8111b9c8:	dec00304 	addi	sp,sp,12
8111b9cc:	11283201 	jmpi	81128320 <__malloc_unlock>
8111b9d0:	f800283a 	ret
8111b9d4:	100ad27a 	srli	r5,r2,9
8111b9d8:	00c00104 	movi	r3,4
8111b9dc:	19404a36 	bltu	r3,r5,8111bb08 <_free_r+0x248>
8111b9e0:	100ad1ba 	srli	r5,r2,6
8111b9e4:	28c00e44 	addi	r3,r5,57
8111b9e8:	18c7883a 	add	r3,r3,r3
8111b9ec:	29400e04 	addi	r5,r5,56
8111b9f0:	18c7883a 	add	r3,r3,r3
8111b9f4:	18c7883a 	add	r3,r3,r3
8111b9f8:	1909883a 	add	r4,r3,r4
8111b9fc:	20c00017 	ldw	r3,0(r4)
8111ba00:	01e04534 	movhi	r7,33044
8111ba04:	213ffe04 	addi	r4,r4,-8
8111ba08:	39fbfa04 	addi	r7,r7,-4120
8111ba0c:	20c04426 	beq	r4,r3,8111bb20 <_free_r+0x260>
8111ba10:	01ffff04 	movi	r7,-4
8111ba14:	19400117 	ldw	r5,4(r3)
8111ba18:	29ca703a 	and	r5,r5,r7
8111ba1c:	1140022e 	bgeu	r2,r5,8111ba28 <_free_r+0x168>
8111ba20:	18c00217 	ldw	r3,8(r3)
8111ba24:	20fffb1e 	bne	r4,r3,8111ba14 <__reset+0xfb0fba14>
8111ba28:	19000317 	ldw	r4,12(r3)
8111ba2c:	31000315 	stw	r4,12(r6)
8111ba30:	30c00215 	stw	r3,8(r6)
8111ba34:	21800215 	stw	r6,8(r4)
8111ba38:	19800315 	stw	r6,12(r3)
8111ba3c:	003fde06 	br	8111b9b8 <__reset+0xfb0fb9b8>
8111ba40:	29c00217 	ldw	r7,8(r5)
8111ba44:	10c5883a 	add	r2,r2,r3
8111ba48:	00e04534 	movhi	r3,33044
8111ba4c:	18fbfc04 	addi	r3,r3,-4112
8111ba50:	38c03b26 	beq	r7,r3,8111bb40 <_free_r+0x280>
8111ba54:	2a000317 	ldw	r8,12(r5)
8111ba58:	11400054 	ori	r5,r2,1
8111ba5c:	3087883a 	add	r3,r6,r2
8111ba60:	3a000315 	stw	r8,12(r7)
8111ba64:	41c00215 	stw	r7,8(r8)
8111ba68:	31400115 	stw	r5,4(r6)
8111ba6c:	18800015 	stw	r2,0(r3)
8111ba70:	003fbd06 	br	8111b968 <__reset+0xfb0fb968>
8111ba74:	39c0004c 	andi	r7,r7,1
8111ba78:	10c5883a 	add	r2,r2,r3
8111ba7c:	3800071e 	bne	r7,zero,8111ba9c <_free_r+0x1dc>
8111ba80:	81fffe17 	ldw	r7,-8(r16)
8111ba84:	31cdc83a 	sub	r6,r6,r7
8111ba88:	30c00317 	ldw	r3,12(r6)
8111ba8c:	31400217 	ldw	r5,8(r6)
8111ba90:	11c5883a 	add	r2,r2,r7
8111ba94:	28c00315 	stw	r3,12(r5)
8111ba98:	19400215 	stw	r5,8(r3)
8111ba9c:	10c00054 	ori	r3,r2,1
8111baa0:	30c00115 	stw	r3,4(r6)
8111baa4:	00e04534 	movhi	r3,33044
8111baa8:	18c21704 	addi	r3,r3,2140
8111baac:	18c00017 	ldw	r3,0(r3)
8111bab0:	21800215 	stw	r6,8(r4)
8111bab4:	10ffc036 	bltu	r2,r3,8111b9b8 <__reset+0xfb0fb9b8>
8111bab8:	00a04534 	movhi	r2,33044
8111babc:	10827104 	addi	r2,r2,2500
8111bac0:	11400017 	ldw	r5,0(r2)
8111bac4:	8809883a 	mov	r4,r17
8111bac8:	111b7940 	call	8111b794 <_malloc_trim_r>
8111bacc:	003fba06 	br	8111b9b8 <__reset+0xfb0fb9b8>
8111bad0:	28c9883a 	add	r4,r5,r3
8111bad4:	21000117 	ldw	r4,4(r4)
8111bad8:	2100004c 	andi	r4,r4,1
8111badc:	2000391e 	bne	r4,zero,8111bbc4 <_free_r+0x304>
8111bae0:	29c00217 	ldw	r7,8(r5)
8111bae4:	29000317 	ldw	r4,12(r5)
8111bae8:	1885883a 	add	r2,r3,r2
8111baec:	10c00054 	ori	r3,r2,1
8111baf0:	39000315 	stw	r4,12(r7)
8111baf4:	21c00215 	stw	r7,8(r4)
8111baf8:	30c00115 	stw	r3,4(r6)
8111bafc:	308d883a 	add	r6,r6,r2
8111bb00:	30800015 	stw	r2,0(r6)
8111bb04:	003fac06 	br	8111b9b8 <__reset+0xfb0fb9b8>
8111bb08:	00c00504 	movi	r3,20
8111bb0c:	19401536 	bltu	r3,r5,8111bb64 <_free_r+0x2a4>
8111bb10:	28c01704 	addi	r3,r5,92
8111bb14:	18c7883a 	add	r3,r3,r3
8111bb18:	294016c4 	addi	r5,r5,91
8111bb1c:	003fb406 	br	8111b9f0 <__reset+0xfb0fb9f0>
8111bb20:	280bd0ba 	srai	r5,r5,2
8111bb24:	00c00044 	movi	r3,1
8111bb28:	38800117 	ldw	r2,4(r7)
8111bb2c:	194a983a 	sll	r5,r3,r5
8111bb30:	2007883a 	mov	r3,r4
8111bb34:	2884b03a 	or	r2,r5,r2
8111bb38:	38800115 	stw	r2,4(r7)
8111bb3c:	003fbb06 	br	8111ba2c <__reset+0xfb0fba2c>
8111bb40:	21800515 	stw	r6,20(r4)
8111bb44:	21800415 	stw	r6,16(r4)
8111bb48:	10c00054 	ori	r3,r2,1
8111bb4c:	31c00315 	stw	r7,12(r6)
8111bb50:	31c00215 	stw	r7,8(r6)
8111bb54:	30c00115 	stw	r3,4(r6)
8111bb58:	308d883a 	add	r6,r6,r2
8111bb5c:	30800015 	stw	r2,0(r6)
8111bb60:	003f9506 	br	8111b9b8 <__reset+0xfb0fb9b8>
8111bb64:	00c01504 	movi	r3,84
8111bb68:	19400536 	bltu	r3,r5,8111bb80 <_free_r+0x2c0>
8111bb6c:	100ad33a 	srli	r5,r2,12
8111bb70:	28c01bc4 	addi	r3,r5,111
8111bb74:	18c7883a 	add	r3,r3,r3
8111bb78:	29401b84 	addi	r5,r5,110
8111bb7c:	003f9c06 	br	8111b9f0 <__reset+0xfb0fb9f0>
8111bb80:	00c05504 	movi	r3,340
8111bb84:	19400536 	bltu	r3,r5,8111bb9c <_free_r+0x2dc>
8111bb88:	100ad3fa 	srli	r5,r2,15
8111bb8c:	28c01e04 	addi	r3,r5,120
8111bb90:	18c7883a 	add	r3,r3,r3
8111bb94:	29401dc4 	addi	r5,r5,119
8111bb98:	003f9506 	br	8111b9f0 <__reset+0xfb0fb9f0>
8111bb9c:	00c15504 	movi	r3,1364
8111bba0:	19400536 	bltu	r3,r5,8111bbb8 <_free_r+0x2f8>
8111bba4:	100ad4ba 	srli	r5,r2,18
8111bba8:	28c01f44 	addi	r3,r5,125
8111bbac:	18c7883a 	add	r3,r3,r3
8111bbb0:	29401f04 	addi	r5,r5,124
8111bbb4:	003f8e06 	br	8111b9f0 <__reset+0xfb0fb9f0>
8111bbb8:	00c03f84 	movi	r3,254
8111bbbc:	01401f84 	movi	r5,126
8111bbc0:	003f8b06 	br	8111b9f0 <__reset+0xfb0fb9f0>
8111bbc4:	10c00054 	ori	r3,r2,1
8111bbc8:	30c00115 	stw	r3,4(r6)
8111bbcc:	308d883a 	add	r6,r6,r2
8111bbd0:	30800015 	stw	r2,0(r6)
8111bbd4:	003f7806 	br	8111b9b8 <__reset+0xfb0fb9b8>

8111bbd8 <__sfvwrite_r>:
8111bbd8:	30800217 	ldw	r2,8(r6)
8111bbdc:	10006926 	beq	r2,zero,8111bd84 <__sfvwrite_r+0x1ac>
8111bbe0:	defff404 	addi	sp,sp,-48
8111bbe4:	de00012e 	bgeu	sp,et,8111bbec <__sfvwrite_r+0x14>
8111bbe8:	003b68fa 	trap	3
8111bbec:	28c0030b 	ldhu	r3,12(r5)
8111bbf0:	dd400715 	stw	r21,28(sp)
8111bbf4:	dd000615 	stw	r20,24(sp)
8111bbf8:	dc000215 	stw	r16,8(sp)
8111bbfc:	dfc00b15 	stw	ra,44(sp)
8111bc00:	df000a15 	stw	fp,40(sp)
8111bc04:	ddc00915 	stw	r23,36(sp)
8111bc08:	dd800815 	stw	r22,32(sp)
8111bc0c:	dcc00515 	stw	r19,20(sp)
8111bc10:	dc800415 	stw	r18,16(sp)
8111bc14:	dc400315 	stw	r17,12(sp)
8111bc18:	1880020c 	andi	r2,r3,8
8111bc1c:	2821883a 	mov	r16,r5
8111bc20:	202b883a 	mov	r21,r4
8111bc24:	3029883a 	mov	r20,r6
8111bc28:	10002726 	beq	r2,zero,8111bcc8 <__sfvwrite_r+0xf0>
8111bc2c:	28800417 	ldw	r2,16(r5)
8111bc30:	10002526 	beq	r2,zero,8111bcc8 <__sfvwrite_r+0xf0>
8111bc34:	1880008c 	andi	r2,r3,2
8111bc38:	a4400017 	ldw	r17,0(r20)
8111bc3c:	10002a26 	beq	r2,zero,8111bce8 <__sfvwrite_r+0x110>
8111bc40:	05a00034 	movhi	r22,32768
8111bc44:	0027883a 	mov	r19,zero
8111bc48:	0025883a 	mov	r18,zero
8111bc4c:	b5bf0004 	addi	r22,r22,-1024
8111bc50:	980d883a 	mov	r6,r19
8111bc54:	a809883a 	mov	r4,r21
8111bc58:	90004626 	beq	r18,zero,8111bd74 <__sfvwrite_r+0x19c>
8111bc5c:	900f883a 	mov	r7,r18
8111bc60:	b480022e 	bgeu	r22,r18,8111bc6c <__sfvwrite_r+0x94>
8111bc64:	01e00034 	movhi	r7,32768
8111bc68:	39ff0004 	addi	r7,r7,-1024
8111bc6c:	80800917 	ldw	r2,36(r16)
8111bc70:	81400717 	ldw	r5,28(r16)
8111bc74:	103ee83a 	callr	r2
8111bc78:	0080570e 	bge	zero,r2,8111bdd8 <__sfvwrite_r+0x200>
8111bc7c:	a0c00217 	ldw	r3,8(r20)
8111bc80:	98a7883a 	add	r19,r19,r2
8111bc84:	90a5c83a 	sub	r18,r18,r2
8111bc88:	1885c83a 	sub	r2,r3,r2
8111bc8c:	a0800215 	stw	r2,8(r20)
8111bc90:	103fef1e 	bne	r2,zero,8111bc50 <__reset+0xfb0fbc50>
8111bc94:	0005883a 	mov	r2,zero
8111bc98:	dfc00b17 	ldw	ra,44(sp)
8111bc9c:	df000a17 	ldw	fp,40(sp)
8111bca0:	ddc00917 	ldw	r23,36(sp)
8111bca4:	dd800817 	ldw	r22,32(sp)
8111bca8:	dd400717 	ldw	r21,28(sp)
8111bcac:	dd000617 	ldw	r20,24(sp)
8111bcb0:	dcc00517 	ldw	r19,20(sp)
8111bcb4:	dc800417 	ldw	r18,16(sp)
8111bcb8:	dc400317 	ldw	r17,12(sp)
8111bcbc:	dc000217 	ldw	r16,8(sp)
8111bcc0:	dec00c04 	addi	sp,sp,48
8111bcc4:	f800283a 	ret
8111bcc8:	800b883a 	mov	r5,r16
8111bccc:	a809883a 	mov	r4,r21
8111bcd0:	11193b80 	call	811193b8 <__swsetup_r>
8111bcd4:	1000eb1e 	bne	r2,zero,8111c084 <__sfvwrite_r+0x4ac>
8111bcd8:	80c0030b 	ldhu	r3,12(r16)
8111bcdc:	a4400017 	ldw	r17,0(r20)
8111bce0:	1880008c 	andi	r2,r3,2
8111bce4:	103fd61e 	bne	r2,zero,8111bc40 <__reset+0xfb0fbc40>
8111bce8:	1880004c 	andi	r2,r3,1
8111bcec:	10003f1e 	bne	r2,zero,8111bdec <__sfvwrite_r+0x214>
8111bcf0:	0039883a 	mov	fp,zero
8111bcf4:	0025883a 	mov	r18,zero
8111bcf8:	90001a26 	beq	r18,zero,8111bd64 <__sfvwrite_r+0x18c>
8111bcfc:	1880800c 	andi	r2,r3,512
8111bd00:	84c00217 	ldw	r19,8(r16)
8111bd04:	10002126 	beq	r2,zero,8111bd8c <__sfvwrite_r+0x1b4>
8111bd08:	982f883a 	mov	r23,r19
8111bd0c:	94c09336 	bltu	r18,r19,8111bf5c <__sfvwrite_r+0x384>
8111bd10:	1881200c 	andi	r2,r3,1152
8111bd14:	10009e1e 	bne	r2,zero,8111bf90 <__sfvwrite_r+0x3b8>
8111bd18:	81000017 	ldw	r4,0(r16)
8111bd1c:	b80d883a 	mov	r6,r23
8111bd20:	e00b883a 	mov	r5,fp
8111bd24:	111c7340 	call	8111c734 <memmove>
8111bd28:	80c00217 	ldw	r3,8(r16)
8111bd2c:	81000017 	ldw	r4,0(r16)
8111bd30:	9005883a 	mov	r2,r18
8111bd34:	1ce7c83a 	sub	r19,r3,r19
8111bd38:	25cf883a 	add	r7,r4,r23
8111bd3c:	84c00215 	stw	r19,8(r16)
8111bd40:	81c00015 	stw	r7,0(r16)
8111bd44:	a0c00217 	ldw	r3,8(r20)
8111bd48:	e0b9883a 	add	fp,fp,r2
8111bd4c:	90a5c83a 	sub	r18,r18,r2
8111bd50:	18a7c83a 	sub	r19,r3,r2
8111bd54:	a4c00215 	stw	r19,8(r20)
8111bd58:	983fce26 	beq	r19,zero,8111bc94 <__reset+0xfb0fbc94>
8111bd5c:	80c0030b 	ldhu	r3,12(r16)
8111bd60:	903fe61e 	bne	r18,zero,8111bcfc <__reset+0xfb0fbcfc>
8111bd64:	8f000017 	ldw	fp,0(r17)
8111bd68:	8c800117 	ldw	r18,4(r17)
8111bd6c:	8c400204 	addi	r17,r17,8
8111bd70:	003fe106 	br	8111bcf8 <__reset+0xfb0fbcf8>
8111bd74:	8cc00017 	ldw	r19,0(r17)
8111bd78:	8c800117 	ldw	r18,4(r17)
8111bd7c:	8c400204 	addi	r17,r17,8
8111bd80:	003fb306 	br	8111bc50 <__reset+0xfb0fbc50>
8111bd84:	0005883a 	mov	r2,zero
8111bd88:	f800283a 	ret
8111bd8c:	81000017 	ldw	r4,0(r16)
8111bd90:	80800417 	ldw	r2,16(r16)
8111bd94:	11005736 	bltu	r2,r4,8111bef4 <__sfvwrite_r+0x31c>
8111bd98:	85c00517 	ldw	r23,20(r16)
8111bd9c:	95c05536 	bltu	r18,r23,8111bef4 <__sfvwrite_r+0x31c>
8111bda0:	00a00034 	movhi	r2,32768
8111bda4:	10bfffc4 	addi	r2,r2,-1
8111bda8:	9009883a 	mov	r4,r18
8111bdac:	1480012e 	bgeu	r2,r18,8111bdb4 <__sfvwrite_r+0x1dc>
8111bdb0:	1009883a 	mov	r4,r2
8111bdb4:	b80b883a 	mov	r5,r23
8111bdb8:	1124cb00 	call	81124cb0 <__divsi3>
8111bdbc:	15cf383a 	mul	r7,r2,r23
8111bdc0:	81400717 	ldw	r5,28(r16)
8111bdc4:	80800917 	ldw	r2,36(r16)
8111bdc8:	e00d883a 	mov	r6,fp
8111bdcc:	a809883a 	mov	r4,r21
8111bdd0:	103ee83a 	callr	r2
8111bdd4:	00bfdb16 	blt	zero,r2,8111bd44 <__reset+0xfb0fbd44>
8111bdd8:	8080030b 	ldhu	r2,12(r16)
8111bddc:	10801014 	ori	r2,r2,64
8111bde0:	8080030d 	sth	r2,12(r16)
8111bde4:	00bfffc4 	movi	r2,-1
8111bde8:	003fab06 	br	8111bc98 <__reset+0xfb0fbc98>
8111bdec:	0027883a 	mov	r19,zero
8111bdf0:	0011883a 	mov	r8,zero
8111bdf4:	0039883a 	mov	fp,zero
8111bdf8:	0025883a 	mov	r18,zero
8111bdfc:	90001f26 	beq	r18,zero,8111be7c <__sfvwrite_r+0x2a4>
8111be00:	40005a26 	beq	r8,zero,8111bf6c <__sfvwrite_r+0x394>
8111be04:	982d883a 	mov	r22,r19
8111be08:	94c0012e 	bgeu	r18,r19,8111be10 <__sfvwrite_r+0x238>
8111be0c:	902d883a 	mov	r22,r18
8111be10:	81000017 	ldw	r4,0(r16)
8111be14:	80800417 	ldw	r2,16(r16)
8111be18:	b02f883a 	mov	r23,r22
8111be1c:	81c00517 	ldw	r7,20(r16)
8111be20:	1100032e 	bgeu	r2,r4,8111be30 <__sfvwrite_r+0x258>
8111be24:	80c00217 	ldw	r3,8(r16)
8111be28:	38c7883a 	add	r3,r7,r3
8111be2c:	1d801816 	blt	r3,r22,8111be90 <__sfvwrite_r+0x2b8>
8111be30:	b1c03e16 	blt	r22,r7,8111bf2c <__sfvwrite_r+0x354>
8111be34:	80800917 	ldw	r2,36(r16)
8111be38:	81400717 	ldw	r5,28(r16)
8111be3c:	e00d883a 	mov	r6,fp
8111be40:	da000115 	stw	r8,4(sp)
8111be44:	a809883a 	mov	r4,r21
8111be48:	103ee83a 	callr	r2
8111be4c:	102f883a 	mov	r23,r2
8111be50:	da000117 	ldw	r8,4(sp)
8111be54:	00bfe00e 	bge	zero,r2,8111bdd8 <__reset+0xfb0fbdd8>
8111be58:	9de7c83a 	sub	r19,r19,r23
8111be5c:	98001f26 	beq	r19,zero,8111bedc <__sfvwrite_r+0x304>
8111be60:	a0800217 	ldw	r2,8(r20)
8111be64:	e5f9883a 	add	fp,fp,r23
8111be68:	95e5c83a 	sub	r18,r18,r23
8111be6c:	15efc83a 	sub	r23,r2,r23
8111be70:	a5c00215 	stw	r23,8(r20)
8111be74:	b83f8726 	beq	r23,zero,8111bc94 <__reset+0xfb0fbc94>
8111be78:	903fe11e 	bne	r18,zero,8111be00 <__reset+0xfb0fbe00>
8111be7c:	8f000017 	ldw	fp,0(r17)
8111be80:	8c800117 	ldw	r18,4(r17)
8111be84:	0011883a 	mov	r8,zero
8111be88:	8c400204 	addi	r17,r17,8
8111be8c:	003fdb06 	br	8111bdfc <__reset+0xfb0fbdfc>
8111be90:	180d883a 	mov	r6,r3
8111be94:	e00b883a 	mov	r5,fp
8111be98:	da000115 	stw	r8,4(sp)
8111be9c:	d8c00015 	stw	r3,0(sp)
8111bea0:	111c7340 	call	8111c734 <memmove>
8111bea4:	d8c00017 	ldw	r3,0(sp)
8111bea8:	80800017 	ldw	r2,0(r16)
8111beac:	800b883a 	mov	r5,r16
8111beb0:	a809883a 	mov	r4,r21
8111beb4:	10c5883a 	add	r2,r2,r3
8111beb8:	80800015 	stw	r2,0(r16)
8111bebc:	d8c00015 	stw	r3,0(sp)
8111bec0:	111b02c0 	call	8111b02c <_fflush_r>
8111bec4:	d8c00017 	ldw	r3,0(sp)
8111bec8:	da000117 	ldw	r8,4(sp)
8111becc:	103fc21e 	bne	r2,zero,8111bdd8 <__reset+0xfb0fbdd8>
8111bed0:	182f883a 	mov	r23,r3
8111bed4:	9de7c83a 	sub	r19,r19,r23
8111bed8:	983fe11e 	bne	r19,zero,8111be60 <__reset+0xfb0fbe60>
8111bedc:	800b883a 	mov	r5,r16
8111bee0:	a809883a 	mov	r4,r21
8111bee4:	111b02c0 	call	8111b02c <_fflush_r>
8111bee8:	103fbb1e 	bne	r2,zero,8111bdd8 <__reset+0xfb0fbdd8>
8111beec:	0011883a 	mov	r8,zero
8111bef0:	003fdb06 	br	8111be60 <__reset+0xfb0fbe60>
8111bef4:	94c0012e 	bgeu	r18,r19,8111befc <__sfvwrite_r+0x324>
8111bef8:	9027883a 	mov	r19,r18
8111befc:	980d883a 	mov	r6,r19
8111bf00:	e00b883a 	mov	r5,fp
8111bf04:	111c7340 	call	8111c734 <memmove>
8111bf08:	80800217 	ldw	r2,8(r16)
8111bf0c:	80c00017 	ldw	r3,0(r16)
8111bf10:	14c5c83a 	sub	r2,r2,r19
8111bf14:	1cc7883a 	add	r3,r3,r19
8111bf18:	80800215 	stw	r2,8(r16)
8111bf1c:	80c00015 	stw	r3,0(r16)
8111bf20:	10004326 	beq	r2,zero,8111c030 <__sfvwrite_r+0x458>
8111bf24:	9805883a 	mov	r2,r19
8111bf28:	003f8606 	br	8111bd44 <__reset+0xfb0fbd44>
8111bf2c:	b00d883a 	mov	r6,r22
8111bf30:	e00b883a 	mov	r5,fp
8111bf34:	da000115 	stw	r8,4(sp)
8111bf38:	111c7340 	call	8111c734 <memmove>
8111bf3c:	80800217 	ldw	r2,8(r16)
8111bf40:	80c00017 	ldw	r3,0(r16)
8111bf44:	da000117 	ldw	r8,4(sp)
8111bf48:	1585c83a 	sub	r2,r2,r22
8111bf4c:	1dad883a 	add	r22,r3,r22
8111bf50:	80800215 	stw	r2,8(r16)
8111bf54:	85800015 	stw	r22,0(r16)
8111bf58:	003fbf06 	br	8111be58 <__reset+0xfb0fbe58>
8111bf5c:	81000017 	ldw	r4,0(r16)
8111bf60:	9027883a 	mov	r19,r18
8111bf64:	902f883a 	mov	r23,r18
8111bf68:	003f6c06 	br	8111bd1c <__reset+0xfb0fbd1c>
8111bf6c:	900d883a 	mov	r6,r18
8111bf70:	01400284 	movi	r5,10
8111bf74:	e009883a 	mov	r4,fp
8111bf78:	111c6500 	call	8111c650 <memchr>
8111bf7c:	10003e26 	beq	r2,zero,8111c078 <__sfvwrite_r+0x4a0>
8111bf80:	10800044 	addi	r2,r2,1
8111bf84:	1727c83a 	sub	r19,r2,fp
8111bf88:	02000044 	movi	r8,1
8111bf8c:	003f9d06 	br	8111be04 <__reset+0xfb0fbe04>
8111bf90:	80800517 	ldw	r2,20(r16)
8111bf94:	81400417 	ldw	r5,16(r16)
8111bf98:	81c00017 	ldw	r7,0(r16)
8111bf9c:	10a7883a 	add	r19,r2,r2
8111bfa0:	9885883a 	add	r2,r19,r2
8111bfa4:	1026d7fa 	srli	r19,r2,31
8111bfa8:	396dc83a 	sub	r22,r7,r5
8111bfac:	b1000044 	addi	r4,r22,1
8111bfb0:	9885883a 	add	r2,r19,r2
8111bfb4:	1027d07a 	srai	r19,r2,1
8111bfb8:	2485883a 	add	r2,r4,r18
8111bfbc:	980d883a 	mov	r6,r19
8111bfc0:	9880022e 	bgeu	r19,r2,8111bfcc <__sfvwrite_r+0x3f4>
8111bfc4:	1027883a 	mov	r19,r2
8111bfc8:	100d883a 	mov	r6,r2
8111bfcc:	18c1000c 	andi	r3,r3,1024
8111bfd0:	18001c26 	beq	r3,zero,8111c044 <__sfvwrite_r+0x46c>
8111bfd4:	300b883a 	mov	r5,r6
8111bfd8:	a809883a 	mov	r4,r21
8111bfdc:	11121680 	call	81112168 <_malloc_r>
8111bfe0:	102f883a 	mov	r23,r2
8111bfe4:	10002926 	beq	r2,zero,8111c08c <__sfvwrite_r+0x4b4>
8111bfe8:	81400417 	ldw	r5,16(r16)
8111bfec:	b00d883a 	mov	r6,r22
8111bff0:	1009883a 	mov	r4,r2
8111bff4:	111297c0 	call	8111297c <memcpy>
8111bff8:	8080030b 	ldhu	r2,12(r16)
8111bffc:	00fedfc4 	movi	r3,-1153
8111c000:	10c4703a 	and	r2,r2,r3
8111c004:	10802014 	ori	r2,r2,128
8111c008:	8080030d 	sth	r2,12(r16)
8111c00c:	bd89883a 	add	r4,r23,r22
8111c010:	9d8fc83a 	sub	r7,r19,r22
8111c014:	85c00415 	stw	r23,16(r16)
8111c018:	84c00515 	stw	r19,20(r16)
8111c01c:	81000015 	stw	r4,0(r16)
8111c020:	9027883a 	mov	r19,r18
8111c024:	81c00215 	stw	r7,8(r16)
8111c028:	902f883a 	mov	r23,r18
8111c02c:	003f3b06 	br	8111bd1c <__reset+0xfb0fbd1c>
8111c030:	800b883a 	mov	r5,r16
8111c034:	a809883a 	mov	r4,r21
8111c038:	111b02c0 	call	8111b02c <_fflush_r>
8111c03c:	103fb926 	beq	r2,zero,8111bf24 <__reset+0xfb0fbf24>
8111c040:	003f6506 	br	8111bdd8 <__reset+0xfb0fbdd8>
8111c044:	a809883a 	mov	r4,r21
8111c048:	111d9540 	call	8111d954 <_realloc_r>
8111c04c:	102f883a 	mov	r23,r2
8111c050:	103fee1e 	bne	r2,zero,8111c00c <__reset+0xfb0fc00c>
8111c054:	81400417 	ldw	r5,16(r16)
8111c058:	a809883a 	mov	r4,r21
8111c05c:	111b8c00 	call	8111b8c0 <_free_r>
8111c060:	8080030b 	ldhu	r2,12(r16)
8111c064:	00ffdfc4 	movi	r3,-129
8111c068:	1884703a 	and	r2,r3,r2
8111c06c:	00c00304 	movi	r3,12
8111c070:	a8c00015 	stw	r3,0(r21)
8111c074:	003f5906 	br	8111bddc <__reset+0xfb0fbddc>
8111c078:	94c00044 	addi	r19,r18,1
8111c07c:	02000044 	movi	r8,1
8111c080:	003f6006 	br	8111be04 <__reset+0xfb0fbe04>
8111c084:	00bfffc4 	movi	r2,-1
8111c088:	003f0306 	br	8111bc98 <__reset+0xfb0fbc98>
8111c08c:	00800304 	movi	r2,12
8111c090:	a8800015 	stw	r2,0(r21)
8111c094:	8080030b 	ldhu	r2,12(r16)
8111c098:	003f5006 	br	8111bddc <__reset+0xfb0fbddc>

8111c09c <_fwalk>:
8111c09c:	defff704 	addi	sp,sp,-36
8111c0a0:	de00012e 	bgeu	sp,et,8111c0a8 <_fwalk+0xc>
8111c0a4:	003b68fa 	trap	3
8111c0a8:	dd000415 	stw	r20,16(sp)
8111c0ac:	dfc00815 	stw	ra,32(sp)
8111c0b0:	ddc00715 	stw	r23,28(sp)
8111c0b4:	dd800615 	stw	r22,24(sp)
8111c0b8:	dd400515 	stw	r21,20(sp)
8111c0bc:	dcc00315 	stw	r19,12(sp)
8111c0c0:	dc800215 	stw	r18,8(sp)
8111c0c4:	dc400115 	stw	r17,4(sp)
8111c0c8:	dc000015 	stw	r16,0(sp)
8111c0cc:	2500b804 	addi	r20,r4,736
8111c0d0:	a0002326 	beq	r20,zero,8111c160 <_fwalk+0xc4>
8111c0d4:	282b883a 	mov	r21,r5
8111c0d8:	002f883a 	mov	r23,zero
8111c0dc:	05800044 	movi	r22,1
8111c0e0:	04ffffc4 	movi	r19,-1
8111c0e4:	a4400117 	ldw	r17,4(r20)
8111c0e8:	a4800217 	ldw	r18,8(r20)
8111c0ec:	8c7fffc4 	addi	r17,r17,-1
8111c0f0:	88000d16 	blt	r17,zero,8111c128 <_fwalk+0x8c>
8111c0f4:	94000304 	addi	r16,r18,12
8111c0f8:	94800384 	addi	r18,r18,14
8111c0fc:	8080000b 	ldhu	r2,0(r16)
8111c100:	8c7fffc4 	addi	r17,r17,-1
8111c104:	813ffd04 	addi	r4,r16,-12
8111c108:	b080042e 	bgeu	r22,r2,8111c11c <_fwalk+0x80>
8111c10c:	9080000f 	ldh	r2,0(r18)
8111c110:	14c00226 	beq	r2,r19,8111c11c <_fwalk+0x80>
8111c114:	a83ee83a 	callr	r21
8111c118:	b8aeb03a 	or	r23,r23,r2
8111c11c:	84001a04 	addi	r16,r16,104
8111c120:	94801a04 	addi	r18,r18,104
8111c124:	8cfff51e 	bne	r17,r19,8111c0fc <__reset+0xfb0fc0fc>
8111c128:	a5000017 	ldw	r20,0(r20)
8111c12c:	a03fed1e 	bne	r20,zero,8111c0e4 <__reset+0xfb0fc0e4>
8111c130:	b805883a 	mov	r2,r23
8111c134:	dfc00817 	ldw	ra,32(sp)
8111c138:	ddc00717 	ldw	r23,28(sp)
8111c13c:	dd800617 	ldw	r22,24(sp)
8111c140:	dd400517 	ldw	r21,20(sp)
8111c144:	dd000417 	ldw	r20,16(sp)
8111c148:	dcc00317 	ldw	r19,12(sp)
8111c14c:	dc800217 	ldw	r18,8(sp)
8111c150:	dc400117 	ldw	r17,4(sp)
8111c154:	dc000017 	ldw	r16,0(sp)
8111c158:	dec00904 	addi	sp,sp,36
8111c15c:	f800283a 	ret
8111c160:	002f883a 	mov	r23,zero
8111c164:	003ff206 	br	8111c130 <__reset+0xfb0fc130>

8111c168 <_fwalk_reent>:
8111c168:	defff704 	addi	sp,sp,-36
8111c16c:	de00012e 	bgeu	sp,et,8111c174 <_fwalk_reent+0xc>
8111c170:	003b68fa 	trap	3
8111c174:	dd000415 	stw	r20,16(sp)
8111c178:	dfc00815 	stw	ra,32(sp)
8111c17c:	ddc00715 	stw	r23,28(sp)
8111c180:	dd800615 	stw	r22,24(sp)
8111c184:	dd400515 	stw	r21,20(sp)
8111c188:	dcc00315 	stw	r19,12(sp)
8111c18c:	dc800215 	stw	r18,8(sp)
8111c190:	dc400115 	stw	r17,4(sp)
8111c194:	dc000015 	stw	r16,0(sp)
8111c198:	2500b804 	addi	r20,r4,736
8111c19c:	a0002326 	beq	r20,zero,8111c22c <_fwalk_reent+0xc4>
8111c1a0:	282b883a 	mov	r21,r5
8111c1a4:	2027883a 	mov	r19,r4
8111c1a8:	002f883a 	mov	r23,zero
8111c1ac:	05800044 	movi	r22,1
8111c1b0:	04bfffc4 	movi	r18,-1
8111c1b4:	a4400117 	ldw	r17,4(r20)
8111c1b8:	a4000217 	ldw	r16,8(r20)
8111c1bc:	8c7fffc4 	addi	r17,r17,-1
8111c1c0:	88000c16 	blt	r17,zero,8111c1f4 <_fwalk_reent+0x8c>
8111c1c4:	84000304 	addi	r16,r16,12
8111c1c8:	8080000b 	ldhu	r2,0(r16)
8111c1cc:	8c7fffc4 	addi	r17,r17,-1
8111c1d0:	817ffd04 	addi	r5,r16,-12
8111c1d4:	b080052e 	bgeu	r22,r2,8111c1ec <_fwalk_reent+0x84>
8111c1d8:	8080008f 	ldh	r2,2(r16)
8111c1dc:	9809883a 	mov	r4,r19
8111c1e0:	14800226 	beq	r2,r18,8111c1ec <_fwalk_reent+0x84>
8111c1e4:	a83ee83a 	callr	r21
8111c1e8:	b8aeb03a 	or	r23,r23,r2
8111c1ec:	84001a04 	addi	r16,r16,104
8111c1f0:	8cbff51e 	bne	r17,r18,8111c1c8 <__reset+0xfb0fc1c8>
8111c1f4:	a5000017 	ldw	r20,0(r20)
8111c1f8:	a03fee1e 	bne	r20,zero,8111c1b4 <__reset+0xfb0fc1b4>
8111c1fc:	b805883a 	mov	r2,r23
8111c200:	dfc00817 	ldw	ra,32(sp)
8111c204:	ddc00717 	ldw	r23,28(sp)
8111c208:	dd800617 	ldw	r22,24(sp)
8111c20c:	dd400517 	ldw	r21,20(sp)
8111c210:	dd000417 	ldw	r20,16(sp)
8111c214:	dcc00317 	ldw	r19,12(sp)
8111c218:	dc800217 	ldw	r18,8(sp)
8111c21c:	dc400117 	ldw	r17,4(sp)
8111c220:	dc000017 	ldw	r16,0(sp)
8111c224:	dec00904 	addi	sp,sp,36
8111c228:	f800283a 	ret
8111c22c:	002f883a 	mov	r23,zero
8111c230:	003ff206 	br	8111c1fc <__reset+0xfb0fc1fc>

8111c234 <_isatty_r>:
8111c234:	defffd04 	addi	sp,sp,-12
8111c238:	de00012e 	bgeu	sp,et,8111c240 <_isatty_r+0xc>
8111c23c:	003b68fa 	trap	3
8111c240:	dc000015 	stw	r16,0(sp)
8111c244:	04204534 	movhi	r16,33044
8111c248:	dc400115 	stw	r17,4(sp)
8111c24c:	84026e04 	addi	r16,r16,2488
8111c250:	2023883a 	mov	r17,r4
8111c254:	2809883a 	mov	r4,r5
8111c258:	dfc00215 	stw	ra,8(sp)
8111c25c:	80000015 	stw	zero,0(r16)
8111c260:	11274e40 	call	811274e4 <isatty>
8111c264:	00ffffc4 	movi	r3,-1
8111c268:	10c00526 	beq	r2,r3,8111c280 <_isatty_r+0x4c>
8111c26c:	dfc00217 	ldw	ra,8(sp)
8111c270:	dc400117 	ldw	r17,4(sp)
8111c274:	dc000017 	ldw	r16,0(sp)
8111c278:	dec00304 	addi	sp,sp,12
8111c27c:	f800283a 	ret
8111c280:	80c00017 	ldw	r3,0(r16)
8111c284:	183ff926 	beq	r3,zero,8111c26c <__reset+0xfb0fc26c>
8111c288:	88c00015 	stw	r3,0(r17)
8111c28c:	003ff706 	br	8111c26c <__reset+0xfb0fc26c>

8111c290 <iswspace>:
8111c290:	00803fc4 	movi	r2,255
8111c294:	11000836 	bltu	r2,r4,8111c2b8 <iswspace+0x28>
8111c298:	00a04534 	movhi	r2,33044
8111c29c:	10821304 	addi	r2,r2,2124
8111c2a0:	10800017 	ldw	r2,0(r2)
8111c2a4:	1109883a 	add	r4,r2,r4
8111c2a8:	20800043 	ldbu	r2,1(r4)
8111c2ac:	1080020c 	andi	r2,r2,8
8111c2b0:	10803fcc 	andi	r2,r2,255
8111c2b4:	f800283a 	ret
8111c2b8:	0005883a 	mov	r2,zero
8111c2bc:	f800283a 	ret

8111c2c0 <_setlocale_r>:
8111c2c0:	30001d26 	beq	r6,zero,8111c338 <_setlocale_r+0x78>
8111c2c4:	01604534 	movhi	r5,33044
8111c2c8:	defffe04 	addi	sp,sp,-8
8111c2cc:	29793a04 	addi	r5,r5,-6936
8111c2d0:	3009883a 	mov	r4,r6
8111c2d4:	de00012e 	bgeu	sp,et,8111c2dc <_setlocale_r+0x1c>
8111c2d8:	003b68fa 	trap	3
8111c2dc:	dc000015 	stw	r16,0(sp)
8111c2e0:	dfc00115 	stw	ra,4(sp)
8111c2e4:	3021883a 	mov	r16,r6
8111c2e8:	111e00c0 	call	8111e00c <strcmp>
8111c2ec:	1000061e 	bne	r2,zero,8111c308 <_setlocale_r+0x48>
8111c2f0:	00a04534 	movhi	r2,33044
8111c2f4:	10b90904 	addi	r2,r2,-7132
8111c2f8:	dfc00117 	ldw	ra,4(sp)
8111c2fc:	dc000017 	ldw	r16,0(sp)
8111c300:	dec00204 	addi	sp,sp,8
8111c304:	f800283a 	ret
8111c308:	01604534 	movhi	r5,33044
8111c30c:	29790904 	addi	r5,r5,-7132
8111c310:	8009883a 	mov	r4,r16
8111c314:	111e00c0 	call	8111e00c <strcmp>
8111c318:	103ff526 	beq	r2,zero,8111c2f0 <__reset+0xfb0fc2f0>
8111c31c:	01604534 	movhi	r5,33044
8111c320:	29791304 	addi	r5,r5,-7092
8111c324:	8009883a 	mov	r4,r16
8111c328:	111e00c0 	call	8111e00c <strcmp>
8111c32c:	103ff026 	beq	r2,zero,8111c2f0 <__reset+0xfb0fc2f0>
8111c330:	0005883a 	mov	r2,zero
8111c334:	003ff006 	br	8111c2f8 <__reset+0xfb0fc2f8>
8111c338:	00a04534 	movhi	r2,33044
8111c33c:	10b90904 	addi	r2,r2,-7132
8111c340:	f800283a 	ret

8111c344 <__locale_charset>:
8111c344:	00a04534 	movhi	r2,33044
8111c348:	10bd0404 	addi	r2,r2,-3056
8111c34c:	f800283a 	ret

8111c350 <__locale_mb_cur_max>:
8111c350:	00a04534 	movhi	r2,33044
8111c354:	10821804 	addi	r2,r2,2144
8111c358:	10800017 	ldw	r2,0(r2)
8111c35c:	f800283a 	ret

8111c360 <__locale_msgcharset>:
8111c360:	00a04534 	movhi	r2,33044
8111c364:	10bcfc04 	addi	r2,r2,-3088
8111c368:	f800283a 	ret

8111c36c <__locale_cjk_lang>:
8111c36c:	0005883a 	mov	r2,zero
8111c370:	f800283a 	ret

8111c374 <_localeconv_r>:
8111c374:	00a04534 	movhi	r2,33044
8111c378:	10bd0c04 	addi	r2,r2,-3024
8111c37c:	f800283a 	ret

8111c380 <setlocale>:
8111c380:	00a04534 	movhi	r2,33044
8111c384:	10821504 	addi	r2,r2,2132
8111c388:	280d883a 	mov	r6,r5
8111c38c:	200b883a 	mov	r5,r4
8111c390:	11000017 	ldw	r4,0(r2)
8111c394:	111c2c01 	jmpi	8111c2c0 <_setlocale_r>

8111c398 <localeconv>:
8111c398:	00a04534 	movhi	r2,33044
8111c39c:	10bd0c04 	addi	r2,r2,-3024
8111c3a0:	f800283a 	ret

8111c3a4 <_lseek_r>:
8111c3a4:	defffd04 	addi	sp,sp,-12
8111c3a8:	de00012e 	bgeu	sp,et,8111c3b0 <_lseek_r+0xc>
8111c3ac:	003b68fa 	trap	3
8111c3b0:	2805883a 	mov	r2,r5
8111c3b4:	dc000015 	stw	r16,0(sp)
8111c3b8:	04204534 	movhi	r16,33044
8111c3bc:	dc400115 	stw	r17,4(sp)
8111c3c0:	300b883a 	mov	r5,r6
8111c3c4:	84026e04 	addi	r16,r16,2488
8111c3c8:	2023883a 	mov	r17,r4
8111c3cc:	380d883a 	mov	r6,r7
8111c3d0:	1009883a 	mov	r4,r2
8111c3d4:	dfc00215 	stw	ra,8(sp)
8111c3d8:	80000015 	stw	zero,0(r16)
8111c3dc:	11275d40 	call	811275d4 <lseek>
8111c3e0:	00ffffc4 	movi	r3,-1
8111c3e4:	10c00526 	beq	r2,r3,8111c3fc <_lseek_r+0x58>
8111c3e8:	dfc00217 	ldw	ra,8(sp)
8111c3ec:	dc400117 	ldw	r17,4(sp)
8111c3f0:	dc000017 	ldw	r16,0(sp)
8111c3f4:	dec00304 	addi	sp,sp,12
8111c3f8:	f800283a 	ret
8111c3fc:	80c00017 	ldw	r3,0(r16)
8111c400:	183ff926 	beq	r3,zero,8111c3e8 <__reset+0xfb0fc3e8>
8111c404:	88c00015 	stw	r3,0(r17)
8111c408:	003ff706 	br	8111c3e8 <__reset+0xfb0fc3e8>

8111c40c <_mbrtowc_r>:
8111c40c:	defff704 	addi	sp,sp,-36
8111c410:	00a04534 	movhi	r2,33044
8111c414:	de00012e 	bgeu	sp,et,8111c41c <_mbrtowc_r+0x10>
8111c418:	003b68fa 	trap	3
8111c41c:	10821904 	addi	r2,r2,2148
8111c420:	dc800715 	stw	r18,28(sp)
8111c424:	dc400615 	stw	r17,24(sp)
8111c428:	dc000515 	stw	r16,20(sp)
8111c42c:	dfc00815 	stw	ra,32(sp)
8111c430:	2021883a 	mov	r16,r4
8111c434:	dc400917 	ldw	r17,36(sp)
8111c438:	14800017 	ldw	r18,0(r2)
8111c43c:	30001626 	beq	r6,zero,8111c498 <_mbrtowc_r+0x8c>
8111c440:	d9400215 	stw	r5,8(sp)
8111c444:	d9800315 	stw	r6,12(sp)
8111c448:	d9c00415 	stw	r7,16(sp)
8111c44c:	111c3440 	call	8111c344 <__locale_charset>
8111c450:	d9c00417 	ldw	r7,16(sp)
8111c454:	d9800317 	ldw	r6,12(sp)
8111c458:	d9400217 	ldw	r5,8(sp)
8111c45c:	d8800015 	stw	r2,0(sp)
8111c460:	dc400115 	stw	r17,4(sp)
8111c464:	8009883a 	mov	r4,r16
8111c468:	903ee83a 	callr	r18
8111c46c:	00ffffc4 	movi	r3,-1
8111c470:	10c0031e 	bne	r2,r3,8111c480 <_mbrtowc_r+0x74>
8111c474:	88000015 	stw	zero,0(r17)
8111c478:	00c02284 	movi	r3,138
8111c47c:	80c00015 	stw	r3,0(r16)
8111c480:	dfc00817 	ldw	ra,32(sp)
8111c484:	dc800717 	ldw	r18,28(sp)
8111c488:	dc400617 	ldw	r17,24(sp)
8111c48c:	dc000517 	ldw	r16,20(sp)
8111c490:	dec00904 	addi	sp,sp,36
8111c494:	f800283a 	ret
8111c498:	111c3440 	call	8111c344 <__locale_charset>
8111c49c:	01a04534 	movhi	r6,33044
8111c4a0:	31b91304 	addi	r6,r6,-7092
8111c4a4:	dc400115 	stw	r17,4(sp)
8111c4a8:	d8800015 	stw	r2,0(sp)
8111c4ac:	01c00044 	movi	r7,1
8111c4b0:	000b883a 	mov	r5,zero
8111c4b4:	8009883a 	mov	r4,r16
8111c4b8:	903ee83a 	callr	r18
8111c4bc:	003feb06 	br	8111c46c <__reset+0xfb0fc46c>

8111c4c0 <mbrtowc>:
8111c4c0:	defff704 	addi	sp,sp,-36
8111c4c4:	00a04534 	movhi	r2,33044
8111c4c8:	de00012e 	bgeu	sp,et,8111c4d0 <mbrtowc+0x10>
8111c4cc:	003b68fa 	trap	3
8111c4d0:	10821504 	addi	r2,r2,2132
8111c4d4:	dc800415 	stw	r18,16(sp)
8111c4d8:	dc400315 	stw	r17,12(sp)
8111c4dc:	dfc00815 	stw	ra,32(sp)
8111c4e0:	dd400715 	stw	r21,28(sp)
8111c4e4:	dd000615 	stw	r20,24(sp)
8111c4e8:	dcc00515 	stw	r19,20(sp)
8111c4ec:	dc000215 	stw	r16,8(sp)
8111c4f0:	3825883a 	mov	r18,r7
8111c4f4:	14400017 	ldw	r17,0(r2)
8111c4f8:	28001c26 	beq	r5,zero,8111c56c <mbrtowc+0xac>
8111c4fc:	00a04534 	movhi	r2,33044
8111c500:	10821904 	addi	r2,r2,2148
8111c504:	15400017 	ldw	r21,0(r2)
8111c508:	2821883a 	mov	r16,r5
8111c50c:	2027883a 	mov	r19,r4
8111c510:	3029883a 	mov	r20,r6
8111c514:	111c3440 	call	8111c344 <__locale_charset>
8111c518:	d8800015 	stw	r2,0(sp)
8111c51c:	dc800115 	stw	r18,4(sp)
8111c520:	a00f883a 	mov	r7,r20
8111c524:	800d883a 	mov	r6,r16
8111c528:	980b883a 	mov	r5,r19
8111c52c:	8809883a 	mov	r4,r17
8111c530:	a83ee83a 	callr	r21
8111c534:	00ffffc4 	movi	r3,-1
8111c538:	10c0031e 	bne	r2,r3,8111c548 <mbrtowc+0x88>
8111c53c:	90000015 	stw	zero,0(r18)
8111c540:	00c02284 	movi	r3,138
8111c544:	88c00015 	stw	r3,0(r17)
8111c548:	dfc00817 	ldw	ra,32(sp)
8111c54c:	dd400717 	ldw	r21,28(sp)
8111c550:	dd000617 	ldw	r20,24(sp)
8111c554:	dcc00517 	ldw	r19,20(sp)
8111c558:	dc800417 	ldw	r18,16(sp)
8111c55c:	dc400317 	ldw	r17,12(sp)
8111c560:	dc000217 	ldw	r16,8(sp)
8111c564:	dec00904 	addi	sp,sp,36
8111c568:	f800283a 	ret
8111c56c:	00a04534 	movhi	r2,33044
8111c570:	10821904 	addi	r2,r2,2148
8111c574:	14000017 	ldw	r16,0(r2)
8111c578:	111c3440 	call	8111c344 <__locale_charset>
8111c57c:	01a04534 	movhi	r6,33044
8111c580:	31b91304 	addi	r6,r6,-7092
8111c584:	dc800115 	stw	r18,4(sp)
8111c588:	d8800015 	stw	r2,0(sp)
8111c58c:	01c00044 	movi	r7,1
8111c590:	000b883a 	mov	r5,zero
8111c594:	8809883a 	mov	r4,r17
8111c598:	803ee83a 	callr	r16
8111c59c:	003fe506 	br	8111c534 <__reset+0xfb0fc534>

8111c5a0 <__ascii_mbtowc>:
8111c5a0:	deffff04 	addi	sp,sp,-4
8111c5a4:	de00012e 	bgeu	sp,et,8111c5ac <__ascii_mbtowc+0xc>
8111c5a8:	003b68fa 	trap	3
8111c5ac:	28000826 	beq	r5,zero,8111c5d0 <__ascii_mbtowc+0x30>
8111c5b0:	30000926 	beq	r6,zero,8111c5d8 <__ascii_mbtowc+0x38>
8111c5b4:	38000b26 	beq	r7,zero,8111c5e4 <__ascii_mbtowc+0x44>
8111c5b8:	30800003 	ldbu	r2,0(r6)
8111c5bc:	28800015 	stw	r2,0(r5)
8111c5c0:	30800003 	ldbu	r2,0(r6)
8111c5c4:	1004c03a 	cmpne	r2,r2,zero
8111c5c8:	dec00104 	addi	sp,sp,4
8111c5cc:	f800283a 	ret
8111c5d0:	d80b883a 	mov	r5,sp
8111c5d4:	303ff71e 	bne	r6,zero,8111c5b4 <__reset+0xfb0fc5b4>
8111c5d8:	0005883a 	mov	r2,zero
8111c5dc:	dec00104 	addi	sp,sp,4
8111c5e0:	f800283a 	ret
8111c5e4:	00bfff84 	movi	r2,-2
8111c5e8:	003ff706 	br	8111c5c8 <__reset+0xfb0fc5c8>

8111c5ec <_mbtowc_r>:
8111c5ec:	00a04534 	movhi	r2,33044
8111c5f0:	defff804 	addi	sp,sp,-32
8111c5f4:	10821904 	addi	r2,r2,2148
8111c5f8:	de00012e 	bgeu	sp,et,8111c600 <_mbtowc_r+0x14>
8111c5fc:	003b68fa 	trap	3
8111c600:	dfc00715 	stw	ra,28(sp)
8111c604:	dc000615 	stw	r16,24(sp)
8111c608:	14000017 	ldw	r16,0(r2)
8111c60c:	d9000215 	stw	r4,8(sp)
8111c610:	d9400315 	stw	r5,12(sp)
8111c614:	d9800415 	stw	r6,16(sp)
8111c618:	d9c00515 	stw	r7,20(sp)
8111c61c:	111c3440 	call	8111c344 <__locale_charset>
8111c620:	d8800015 	stw	r2,0(sp)
8111c624:	d8800817 	ldw	r2,32(sp)
8111c628:	d9c00517 	ldw	r7,20(sp)
8111c62c:	d9800417 	ldw	r6,16(sp)
8111c630:	d9400317 	ldw	r5,12(sp)
8111c634:	d9000217 	ldw	r4,8(sp)
8111c638:	d8800115 	stw	r2,4(sp)
8111c63c:	803ee83a 	callr	r16
8111c640:	dfc00717 	ldw	ra,28(sp)
8111c644:	dc000617 	ldw	r16,24(sp)
8111c648:	dec00804 	addi	sp,sp,32
8111c64c:	f800283a 	ret

8111c650 <memchr>:
8111c650:	208000cc 	andi	r2,r4,3
8111c654:	280f883a 	mov	r7,r5
8111c658:	10003426 	beq	r2,zero,8111c72c <memchr+0xdc>
8111c65c:	30bfffc4 	addi	r2,r6,-1
8111c660:	30001a26 	beq	r6,zero,8111c6cc <memchr+0x7c>
8111c664:	20c00003 	ldbu	r3,0(r4)
8111c668:	29803fcc 	andi	r6,r5,255
8111c66c:	30c0051e 	bne	r6,r3,8111c684 <memchr+0x34>
8111c670:	00001806 	br	8111c6d4 <memchr+0x84>
8111c674:	10001526 	beq	r2,zero,8111c6cc <memchr+0x7c>
8111c678:	20c00003 	ldbu	r3,0(r4)
8111c67c:	10bfffc4 	addi	r2,r2,-1
8111c680:	30c01426 	beq	r6,r3,8111c6d4 <memchr+0x84>
8111c684:	21000044 	addi	r4,r4,1
8111c688:	20c000cc 	andi	r3,r4,3
8111c68c:	183ff91e 	bne	r3,zero,8111c674 <__reset+0xfb0fc674>
8111c690:	020000c4 	movi	r8,3
8111c694:	40801136 	bltu	r8,r2,8111c6dc <memchr+0x8c>
8111c698:	10000c26 	beq	r2,zero,8111c6cc <memchr+0x7c>
8111c69c:	20c00003 	ldbu	r3,0(r4)
8111c6a0:	29403fcc 	andi	r5,r5,255
8111c6a4:	28c00b26 	beq	r5,r3,8111c6d4 <memchr+0x84>
8111c6a8:	20c00044 	addi	r3,r4,1
8111c6ac:	39803fcc 	andi	r6,r7,255
8111c6b0:	2089883a 	add	r4,r4,r2
8111c6b4:	00000306 	br	8111c6c4 <memchr+0x74>
8111c6b8:	18c00044 	addi	r3,r3,1
8111c6bc:	197fffc3 	ldbu	r5,-1(r3)
8111c6c0:	31400526 	beq	r6,r5,8111c6d8 <memchr+0x88>
8111c6c4:	1805883a 	mov	r2,r3
8111c6c8:	20fffb1e 	bne	r4,r3,8111c6b8 <__reset+0xfb0fc6b8>
8111c6cc:	0005883a 	mov	r2,zero
8111c6d0:	f800283a 	ret
8111c6d4:	2005883a 	mov	r2,r4
8111c6d8:	f800283a 	ret
8111c6dc:	28c03fcc 	andi	r3,r5,255
8111c6e0:	1812923a 	slli	r9,r3,8
8111c6e4:	02ffbff4 	movhi	r11,65279
8111c6e8:	02a02074 	movhi	r10,32897
8111c6ec:	48d2b03a 	or	r9,r9,r3
8111c6f0:	4806943a 	slli	r3,r9,16
8111c6f4:	5affbfc4 	addi	r11,r11,-257
8111c6f8:	52a02004 	addi	r10,r10,-32640
8111c6fc:	48d2b03a 	or	r9,r9,r3
8111c700:	20c00017 	ldw	r3,0(r4)
8111c704:	48c6f03a 	xor	r3,r9,r3
8111c708:	1acd883a 	add	r6,r3,r11
8111c70c:	00c6303a 	nor	r3,zero,r3
8111c710:	30c6703a 	and	r3,r6,r3
8111c714:	1a86703a 	and	r3,r3,r10
8111c718:	183fe01e 	bne	r3,zero,8111c69c <__reset+0xfb0fc69c>
8111c71c:	10bfff04 	addi	r2,r2,-4
8111c720:	21000104 	addi	r4,r4,4
8111c724:	40bff636 	bltu	r8,r2,8111c700 <__reset+0xfb0fc700>
8111c728:	003fdb06 	br	8111c698 <__reset+0xfb0fc698>
8111c72c:	3005883a 	mov	r2,r6
8111c730:	003fd706 	br	8111c690 <__reset+0xfb0fc690>

8111c734 <memmove>:
8111c734:	2005883a 	mov	r2,r4
8111c738:	29000b2e 	bgeu	r5,r4,8111c768 <memmove+0x34>
8111c73c:	298f883a 	add	r7,r5,r6
8111c740:	21c0092e 	bgeu	r4,r7,8111c768 <memmove+0x34>
8111c744:	2187883a 	add	r3,r4,r6
8111c748:	198bc83a 	sub	r5,r3,r6
8111c74c:	30004826 	beq	r6,zero,8111c870 <memmove+0x13c>
8111c750:	39ffffc4 	addi	r7,r7,-1
8111c754:	39000003 	ldbu	r4,0(r7)
8111c758:	18ffffc4 	addi	r3,r3,-1
8111c75c:	19000005 	stb	r4,0(r3)
8111c760:	28fffb1e 	bne	r5,r3,8111c750 <__reset+0xfb0fc750>
8111c764:	f800283a 	ret
8111c768:	00c003c4 	movi	r3,15
8111c76c:	1980412e 	bgeu	r3,r6,8111c874 <memmove+0x140>
8111c770:	2886b03a 	or	r3,r5,r2
8111c774:	18c000cc 	andi	r3,r3,3
8111c778:	1800401e 	bne	r3,zero,8111c87c <memmove+0x148>
8111c77c:	33fffc04 	addi	r15,r6,-16
8111c780:	781ed13a 	srli	r15,r15,4
8111c784:	28c00104 	addi	r3,r5,4
8111c788:	13400104 	addi	r13,r2,4
8111c78c:	781c913a 	slli	r14,r15,4
8111c790:	2b000204 	addi	r12,r5,8
8111c794:	12c00204 	addi	r11,r2,8
8111c798:	73800504 	addi	r14,r14,20
8111c79c:	2a800304 	addi	r10,r5,12
8111c7a0:	12400304 	addi	r9,r2,12
8111c7a4:	2b9d883a 	add	r14,r5,r14
8111c7a8:	2811883a 	mov	r8,r5
8111c7ac:	100f883a 	mov	r7,r2
8111c7b0:	41000017 	ldw	r4,0(r8)
8111c7b4:	39c00404 	addi	r7,r7,16
8111c7b8:	18c00404 	addi	r3,r3,16
8111c7bc:	393ffc15 	stw	r4,-16(r7)
8111c7c0:	193ffc17 	ldw	r4,-16(r3)
8111c7c4:	6b400404 	addi	r13,r13,16
8111c7c8:	5ac00404 	addi	r11,r11,16
8111c7cc:	693ffc15 	stw	r4,-16(r13)
8111c7d0:	61000017 	ldw	r4,0(r12)
8111c7d4:	4a400404 	addi	r9,r9,16
8111c7d8:	42000404 	addi	r8,r8,16
8111c7dc:	593ffc15 	stw	r4,-16(r11)
8111c7e0:	51000017 	ldw	r4,0(r10)
8111c7e4:	63000404 	addi	r12,r12,16
8111c7e8:	52800404 	addi	r10,r10,16
8111c7ec:	493ffc15 	stw	r4,-16(r9)
8111c7f0:	1bbfef1e 	bne	r3,r14,8111c7b0 <__reset+0xfb0fc7b0>
8111c7f4:	79000044 	addi	r4,r15,1
8111c7f8:	2008913a 	slli	r4,r4,4
8111c7fc:	328003cc 	andi	r10,r6,15
8111c800:	02c000c4 	movi	r11,3
8111c804:	1107883a 	add	r3,r2,r4
8111c808:	290b883a 	add	r5,r5,r4
8111c80c:	5a801e2e 	bgeu	r11,r10,8111c888 <memmove+0x154>
8111c810:	1813883a 	mov	r9,r3
8111c814:	2811883a 	mov	r8,r5
8111c818:	500f883a 	mov	r7,r10
8111c81c:	41000017 	ldw	r4,0(r8)
8111c820:	4a400104 	addi	r9,r9,4
8111c824:	39ffff04 	addi	r7,r7,-4
8111c828:	493fff15 	stw	r4,-4(r9)
8111c82c:	42000104 	addi	r8,r8,4
8111c830:	59fffa36 	bltu	r11,r7,8111c81c <__reset+0xfb0fc81c>
8111c834:	513fff04 	addi	r4,r10,-4
8111c838:	2008d0ba 	srli	r4,r4,2
8111c83c:	318000cc 	andi	r6,r6,3
8111c840:	21000044 	addi	r4,r4,1
8111c844:	2109883a 	add	r4,r4,r4
8111c848:	2109883a 	add	r4,r4,r4
8111c84c:	1907883a 	add	r3,r3,r4
8111c850:	290b883a 	add	r5,r5,r4
8111c854:	30000b26 	beq	r6,zero,8111c884 <memmove+0x150>
8111c858:	198d883a 	add	r6,r3,r6
8111c85c:	29c00003 	ldbu	r7,0(r5)
8111c860:	18c00044 	addi	r3,r3,1
8111c864:	29400044 	addi	r5,r5,1
8111c868:	19ffffc5 	stb	r7,-1(r3)
8111c86c:	19bffb1e 	bne	r3,r6,8111c85c <__reset+0xfb0fc85c>
8111c870:	f800283a 	ret
8111c874:	1007883a 	mov	r3,r2
8111c878:	003ff606 	br	8111c854 <__reset+0xfb0fc854>
8111c87c:	1007883a 	mov	r3,r2
8111c880:	003ff506 	br	8111c858 <__reset+0xfb0fc858>
8111c884:	f800283a 	ret
8111c888:	500d883a 	mov	r6,r10
8111c88c:	003ff106 	br	8111c854 <__reset+0xfb0fc854>

8111c890 <_Balloc>:
8111c890:	defffc04 	addi	sp,sp,-16
8111c894:	de00012e 	bgeu	sp,et,8111c89c <_Balloc+0xc>
8111c898:	003b68fa 	trap	3
8111c89c:	20801317 	ldw	r2,76(r4)
8111c8a0:	dc400115 	stw	r17,4(sp)
8111c8a4:	dc000015 	stw	r16,0(sp)
8111c8a8:	dfc00315 	stw	ra,12(sp)
8111c8ac:	dc800215 	stw	r18,8(sp)
8111c8b0:	2023883a 	mov	r17,r4
8111c8b4:	2821883a 	mov	r16,r5
8111c8b8:	10000f26 	beq	r2,zero,8111c8f8 <_Balloc+0x68>
8111c8bc:	8407883a 	add	r3,r16,r16
8111c8c0:	18c7883a 	add	r3,r3,r3
8111c8c4:	10c7883a 	add	r3,r2,r3
8111c8c8:	18800017 	ldw	r2,0(r3)
8111c8cc:	10001126 	beq	r2,zero,8111c914 <_Balloc+0x84>
8111c8d0:	11000017 	ldw	r4,0(r2)
8111c8d4:	19000015 	stw	r4,0(r3)
8111c8d8:	10000415 	stw	zero,16(r2)
8111c8dc:	10000315 	stw	zero,12(r2)
8111c8e0:	dfc00317 	ldw	ra,12(sp)
8111c8e4:	dc800217 	ldw	r18,8(sp)
8111c8e8:	dc400117 	ldw	r17,4(sp)
8111c8ec:	dc000017 	ldw	r16,0(sp)
8111c8f0:	dec00404 	addi	sp,sp,16
8111c8f4:	f800283a 	ret
8111c8f8:	01800844 	movi	r6,33
8111c8fc:	01400104 	movi	r5,4
8111c900:	1122db80 	call	81122db8 <_calloc_r>
8111c904:	88801315 	stw	r2,76(r17)
8111c908:	103fec1e 	bne	r2,zero,8111c8bc <__reset+0xfb0fc8bc>
8111c90c:	0005883a 	mov	r2,zero
8111c910:	003ff306 	br	8111c8e0 <__reset+0xfb0fc8e0>
8111c914:	01400044 	movi	r5,1
8111c918:	2c24983a 	sll	r18,r5,r16
8111c91c:	8809883a 	mov	r4,r17
8111c920:	91800144 	addi	r6,r18,5
8111c924:	318d883a 	add	r6,r6,r6
8111c928:	318d883a 	add	r6,r6,r6
8111c92c:	1122db80 	call	81122db8 <_calloc_r>
8111c930:	103ff626 	beq	r2,zero,8111c90c <__reset+0xfb0fc90c>
8111c934:	14000115 	stw	r16,4(r2)
8111c938:	14800215 	stw	r18,8(r2)
8111c93c:	003fe606 	br	8111c8d8 <__reset+0xfb0fc8d8>

8111c940 <_Bfree>:
8111c940:	28000826 	beq	r5,zero,8111c964 <_Bfree+0x24>
8111c944:	28c00117 	ldw	r3,4(r5)
8111c948:	20801317 	ldw	r2,76(r4)
8111c94c:	18c7883a 	add	r3,r3,r3
8111c950:	18c7883a 	add	r3,r3,r3
8111c954:	10c5883a 	add	r2,r2,r3
8111c958:	10c00017 	ldw	r3,0(r2)
8111c95c:	28c00015 	stw	r3,0(r5)
8111c960:	11400015 	stw	r5,0(r2)
8111c964:	f800283a 	ret

8111c968 <__multadd>:
8111c968:	defffa04 	addi	sp,sp,-24
8111c96c:	de00012e 	bgeu	sp,et,8111c974 <__multadd+0xc>
8111c970:	003b68fa 	trap	3
8111c974:	0011883a 	mov	r8,zero
8111c978:	dc800315 	stw	r18,12(sp)
8111c97c:	dc400215 	stw	r17,8(sp)
8111c980:	dc000115 	stw	r16,4(sp)
8111c984:	2823883a 	mov	r17,r5
8111c988:	2c000417 	ldw	r16,16(r5)
8111c98c:	dfc00515 	stw	ra,20(sp)
8111c990:	dcc00415 	stw	r19,16(sp)
8111c994:	2025883a 	mov	r18,r4
8111c998:	29400504 	addi	r5,r5,20
8111c99c:	28c00017 	ldw	r3,0(r5)
8111c9a0:	29400104 	addi	r5,r5,4
8111c9a4:	42000044 	addi	r8,r8,1
8111c9a8:	18bfffcc 	andi	r2,r3,65535
8111c9ac:	1185383a 	mul	r2,r2,r6
8111c9b0:	1806d43a 	srli	r3,r3,16
8111c9b4:	11cf883a 	add	r7,r2,r7
8111c9b8:	3808d43a 	srli	r4,r7,16
8111c9bc:	1987383a 	mul	r3,r3,r6
8111c9c0:	38bfffcc 	andi	r2,r7,65535
8111c9c4:	1907883a 	add	r3,r3,r4
8111c9c8:	1808943a 	slli	r4,r3,16
8111c9cc:	180ed43a 	srli	r7,r3,16
8111c9d0:	2085883a 	add	r2,r4,r2
8111c9d4:	28bfff15 	stw	r2,-4(r5)
8111c9d8:	443ff016 	blt	r8,r16,8111c99c <__reset+0xfb0fc99c>
8111c9dc:	38000926 	beq	r7,zero,8111ca04 <__multadd+0x9c>
8111c9e0:	88800217 	ldw	r2,8(r17)
8111c9e4:	80800f0e 	bge	r16,r2,8111ca24 <__multadd+0xbc>
8111c9e8:	80800144 	addi	r2,r16,5
8111c9ec:	1085883a 	add	r2,r2,r2
8111c9f0:	1085883a 	add	r2,r2,r2
8111c9f4:	8885883a 	add	r2,r17,r2
8111c9f8:	11c00015 	stw	r7,0(r2)
8111c9fc:	84000044 	addi	r16,r16,1
8111ca00:	8c000415 	stw	r16,16(r17)
8111ca04:	8805883a 	mov	r2,r17
8111ca08:	dfc00517 	ldw	ra,20(sp)
8111ca0c:	dcc00417 	ldw	r19,16(sp)
8111ca10:	dc800317 	ldw	r18,12(sp)
8111ca14:	dc400217 	ldw	r17,8(sp)
8111ca18:	dc000117 	ldw	r16,4(sp)
8111ca1c:	dec00604 	addi	sp,sp,24
8111ca20:	f800283a 	ret
8111ca24:	89400117 	ldw	r5,4(r17)
8111ca28:	9009883a 	mov	r4,r18
8111ca2c:	d9c00015 	stw	r7,0(sp)
8111ca30:	29400044 	addi	r5,r5,1
8111ca34:	111c8900 	call	8111c890 <_Balloc>
8111ca38:	89800417 	ldw	r6,16(r17)
8111ca3c:	89400304 	addi	r5,r17,12
8111ca40:	11000304 	addi	r4,r2,12
8111ca44:	31800084 	addi	r6,r6,2
8111ca48:	318d883a 	add	r6,r6,r6
8111ca4c:	318d883a 	add	r6,r6,r6
8111ca50:	1027883a 	mov	r19,r2
8111ca54:	111297c0 	call	8111297c <memcpy>
8111ca58:	d9c00017 	ldw	r7,0(sp)
8111ca5c:	88000a26 	beq	r17,zero,8111ca88 <__multadd+0x120>
8111ca60:	88c00117 	ldw	r3,4(r17)
8111ca64:	90801317 	ldw	r2,76(r18)
8111ca68:	18c7883a 	add	r3,r3,r3
8111ca6c:	18c7883a 	add	r3,r3,r3
8111ca70:	10c5883a 	add	r2,r2,r3
8111ca74:	10c00017 	ldw	r3,0(r2)
8111ca78:	88c00015 	stw	r3,0(r17)
8111ca7c:	14400015 	stw	r17,0(r2)
8111ca80:	9823883a 	mov	r17,r19
8111ca84:	003fd806 	br	8111c9e8 <__reset+0xfb0fc9e8>
8111ca88:	9823883a 	mov	r17,r19
8111ca8c:	003fd606 	br	8111c9e8 <__reset+0xfb0fc9e8>

8111ca90 <__s2b>:
8111ca90:	defff904 	addi	sp,sp,-28
8111ca94:	de00012e 	bgeu	sp,et,8111ca9c <__s2b+0xc>
8111ca98:	003b68fa 	trap	3
8111ca9c:	dc400115 	stw	r17,4(sp)
8111caa0:	dc000015 	stw	r16,0(sp)
8111caa4:	2023883a 	mov	r17,r4
8111caa8:	2821883a 	mov	r16,r5
8111caac:	39000204 	addi	r4,r7,8
8111cab0:	01400244 	movi	r5,9
8111cab4:	dcc00315 	stw	r19,12(sp)
8111cab8:	dc800215 	stw	r18,8(sp)
8111cabc:	dfc00615 	stw	ra,24(sp)
8111cac0:	dd400515 	stw	r21,20(sp)
8111cac4:	dd000415 	stw	r20,16(sp)
8111cac8:	3825883a 	mov	r18,r7
8111cacc:	3027883a 	mov	r19,r6
8111cad0:	1124cb00 	call	81124cb0 <__divsi3>
8111cad4:	00c00044 	movi	r3,1
8111cad8:	000b883a 	mov	r5,zero
8111cadc:	1880030e 	bge	r3,r2,8111caec <__s2b+0x5c>
8111cae0:	18c7883a 	add	r3,r3,r3
8111cae4:	29400044 	addi	r5,r5,1
8111cae8:	18bffd16 	blt	r3,r2,8111cae0 <__reset+0xfb0fcae0>
8111caec:	8809883a 	mov	r4,r17
8111caf0:	111c8900 	call	8111c890 <_Balloc>
8111caf4:	d8c00717 	ldw	r3,28(sp)
8111caf8:	10c00515 	stw	r3,20(r2)
8111cafc:	00c00044 	movi	r3,1
8111cb00:	10c00415 	stw	r3,16(r2)
8111cb04:	00c00244 	movi	r3,9
8111cb08:	1cc0210e 	bge	r3,r19,8111cb90 <__s2b+0x100>
8111cb0c:	80eb883a 	add	r21,r16,r3
8111cb10:	a829883a 	mov	r20,r21
8111cb14:	84e1883a 	add	r16,r16,r19
8111cb18:	a1c00007 	ldb	r7,0(r20)
8111cb1c:	01800284 	movi	r6,10
8111cb20:	a5000044 	addi	r20,r20,1
8111cb24:	100b883a 	mov	r5,r2
8111cb28:	39fff404 	addi	r7,r7,-48
8111cb2c:	8809883a 	mov	r4,r17
8111cb30:	111c9680 	call	8111c968 <__multadd>
8111cb34:	a43ff81e 	bne	r20,r16,8111cb18 <__reset+0xfb0fcb18>
8111cb38:	ace1883a 	add	r16,r21,r19
8111cb3c:	843ffe04 	addi	r16,r16,-8
8111cb40:	9c800a0e 	bge	r19,r18,8111cb6c <__s2b+0xdc>
8111cb44:	94e5c83a 	sub	r18,r18,r19
8111cb48:	84a5883a 	add	r18,r16,r18
8111cb4c:	81c00007 	ldb	r7,0(r16)
8111cb50:	01800284 	movi	r6,10
8111cb54:	84000044 	addi	r16,r16,1
8111cb58:	100b883a 	mov	r5,r2
8111cb5c:	39fff404 	addi	r7,r7,-48
8111cb60:	8809883a 	mov	r4,r17
8111cb64:	111c9680 	call	8111c968 <__multadd>
8111cb68:	84bff81e 	bne	r16,r18,8111cb4c <__reset+0xfb0fcb4c>
8111cb6c:	dfc00617 	ldw	ra,24(sp)
8111cb70:	dd400517 	ldw	r21,20(sp)
8111cb74:	dd000417 	ldw	r20,16(sp)
8111cb78:	dcc00317 	ldw	r19,12(sp)
8111cb7c:	dc800217 	ldw	r18,8(sp)
8111cb80:	dc400117 	ldw	r17,4(sp)
8111cb84:	dc000017 	ldw	r16,0(sp)
8111cb88:	dec00704 	addi	sp,sp,28
8111cb8c:	f800283a 	ret
8111cb90:	84000284 	addi	r16,r16,10
8111cb94:	1827883a 	mov	r19,r3
8111cb98:	003fe906 	br	8111cb40 <__reset+0xfb0fcb40>

8111cb9c <__hi0bits>:
8111cb9c:	20bfffec 	andhi	r2,r4,65535
8111cba0:	1000141e 	bne	r2,zero,8111cbf4 <__hi0bits+0x58>
8111cba4:	2008943a 	slli	r4,r4,16
8111cba8:	00800404 	movi	r2,16
8111cbac:	20ffc02c 	andhi	r3,r4,65280
8111cbb0:	1800021e 	bne	r3,zero,8111cbbc <__hi0bits+0x20>
8111cbb4:	2008923a 	slli	r4,r4,8
8111cbb8:	10800204 	addi	r2,r2,8
8111cbbc:	20fc002c 	andhi	r3,r4,61440
8111cbc0:	1800021e 	bne	r3,zero,8111cbcc <__hi0bits+0x30>
8111cbc4:	2008913a 	slli	r4,r4,4
8111cbc8:	10800104 	addi	r2,r2,4
8111cbcc:	20f0002c 	andhi	r3,r4,49152
8111cbd0:	1800031e 	bne	r3,zero,8111cbe0 <__hi0bits+0x44>
8111cbd4:	2109883a 	add	r4,r4,r4
8111cbd8:	10800084 	addi	r2,r2,2
8111cbdc:	2109883a 	add	r4,r4,r4
8111cbe0:	20000316 	blt	r4,zero,8111cbf0 <__hi0bits+0x54>
8111cbe4:	2110002c 	andhi	r4,r4,16384
8111cbe8:	2000041e 	bne	r4,zero,8111cbfc <__hi0bits+0x60>
8111cbec:	00800804 	movi	r2,32
8111cbf0:	f800283a 	ret
8111cbf4:	0005883a 	mov	r2,zero
8111cbf8:	003fec06 	br	8111cbac <__reset+0xfb0fcbac>
8111cbfc:	10800044 	addi	r2,r2,1
8111cc00:	f800283a 	ret

8111cc04 <__lo0bits>:
8111cc04:	20c00017 	ldw	r3,0(r4)
8111cc08:	188001cc 	andi	r2,r3,7
8111cc0c:	10000826 	beq	r2,zero,8111cc30 <__lo0bits+0x2c>
8111cc10:	1880004c 	andi	r2,r3,1
8111cc14:	1000211e 	bne	r2,zero,8111cc9c <__lo0bits+0x98>
8111cc18:	1880008c 	andi	r2,r3,2
8111cc1c:	1000211e 	bne	r2,zero,8111cca4 <__lo0bits+0xa0>
8111cc20:	1806d0ba 	srli	r3,r3,2
8111cc24:	00800084 	movi	r2,2
8111cc28:	20c00015 	stw	r3,0(r4)
8111cc2c:	f800283a 	ret
8111cc30:	18bfffcc 	andi	r2,r3,65535
8111cc34:	10001326 	beq	r2,zero,8111cc84 <__lo0bits+0x80>
8111cc38:	0005883a 	mov	r2,zero
8111cc3c:	19403fcc 	andi	r5,r3,255
8111cc40:	2800021e 	bne	r5,zero,8111cc4c <__lo0bits+0x48>
8111cc44:	1806d23a 	srli	r3,r3,8
8111cc48:	10800204 	addi	r2,r2,8
8111cc4c:	194003cc 	andi	r5,r3,15
8111cc50:	2800021e 	bne	r5,zero,8111cc5c <__lo0bits+0x58>
8111cc54:	1806d13a 	srli	r3,r3,4
8111cc58:	10800104 	addi	r2,r2,4
8111cc5c:	194000cc 	andi	r5,r3,3
8111cc60:	2800021e 	bne	r5,zero,8111cc6c <__lo0bits+0x68>
8111cc64:	1806d0ba 	srli	r3,r3,2
8111cc68:	10800084 	addi	r2,r2,2
8111cc6c:	1940004c 	andi	r5,r3,1
8111cc70:	2800081e 	bne	r5,zero,8111cc94 <__lo0bits+0x90>
8111cc74:	1806d07a 	srli	r3,r3,1
8111cc78:	1800051e 	bne	r3,zero,8111cc90 <__lo0bits+0x8c>
8111cc7c:	00800804 	movi	r2,32
8111cc80:	f800283a 	ret
8111cc84:	1806d43a 	srli	r3,r3,16
8111cc88:	00800404 	movi	r2,16
8111cc8c:	003feb06 	br	8111cc3c <__reset+0xfb0fcc3c>
8111cc90:	10800044 	addi	r2,r2,1
8111cc94:	20c00015 	stw	r3,0(r4)
8111cc98:	f800283a 	ret
8111cc9c:	0005883a 	mov	r2,zero
8111cca0:	f800283a 	ret
8111cca4:	1806d07a 	srli	r3,r3,1
8111cca8:	00800044 	movi	r2,1
8111ccac:	20c00015 	stw	r3,0(r4)
8111ccb0:	f800283a 	ret

8111ccb4 <__i2b>:
8111ccb4:	defffd04 	addi	sp,sp,-12
8111ccb8:	de00012e 	bgeu	sp,et,8111ccc0 <__i2b+0xc>
8111ccbc:	003b68fa 	trap	3
8111ccc0:	dc000015 	stw	r16,0(sp)
8111ccc4:	04000044 	movi	r16,1
8111ccc8:	dc400115 	stw	r17,4(sp)
8111cccc:	2823883a 	mov	r17,r5
8111ccd0:	800b883a 	mov	r5,r16
8111ccd4:	dfc00215 	stw	ra,8(sp)
8111ccd8:	111c8900 	call	8111c890 <_Balloc>
8111ccdc:	14400515 	stw	r17,20(r2)
8111cce0:	14000415 	stw	r16,16(r2)
8111cce4:	dfc00217 	ldw	ra,8(sp)
8111cce8:	dc400117 	ldw	r17,4(sp)
8111ccec:	dc000017 	ldw	r16,0(sp)
8111ccf0:	dec00304 	addi	sp,sp,12
8111ccf4:	f800283a 	ret

8111ccf8 <__multiply>:
8111ccf8:	defffa04 	addi	sp,sp,-24
8111ccfc:	de00012e 	bgeu	sp,et,8111cd04 <__multiply+0xc>
8111cd00:	003b68fa 	trap	3
8111cd04:	dcc00315 	stw	r19,12(sp)
8111cd08:	dc800215 	stw	r18,8(sp)
8111cd0c:	34c00417 	ldw	r19,16(r6)
8111cd10:	2c800417 	ldw	r18,16(r5)
8111cd14:	dd000415 	stw	r20,16(sp)
8111cd18:	dc400115 	stw	r17,4(sp)
8111cd1c:	dfc00515 	stw	ra,20(sp)
8111cd20:	dc000015 	stw	r16,0(sp)
8111cd24:	2829883a 	mov	r20,r5
8111cd28:	3023883a 	mov	r17,r6
8111cd2c:	94c0050e 	bge	r18,r19,8111cd44 <__multiply+0x4c>
8111cd30:	9007883a 	mov	r3,r18
8111cd34:	3029883a 	mov	r20,r6
8111cd38:	9825883a 	mov	r18,r19
8111cd3c:	2823883a 	mov	r17,r5
8111cd40:	1827883a 	mov	r19,r3
8111cd44:	a0800217 	ldw	r2,8(r20)
8111cd48:	94e1883a 	add	r16,r18,r19
8111cd4c:	a1400117 	ldw	r5,4(r20)
8111cd50:	1400010e 	bge	r2,r16,8111cd58 <__multiply+0x60>
8111cd54:	29400044 	addi	r5,r5,1
8111cd58:	111c8900 	call	8111c890 <_Balloc>
8111cd5c:	8415883a 	add	r10,r16,r16
8111cd60:	12c00504 	addi	r11,r2,20
8111cd64:	5295883a 	add	r10,r10,r10
8111cd68:	5a95883a 	add	r10,r11,r10
8111cd6c:	5807883a 	mov	r3,r11
8111cd70:	5a80032e 	bgeu	r11,r10,8111cd80 <__multiply+0x88>
8111cd74:	18000015 	stw	zero,0(r3)
8111cd78:	18c00104 	addi	r3,r3,4
8111cd7c:	1abffd36 	bltu	r3,r10,8111cd74 <__reset+0xfb0fcd74>
8111cd80:	9ce7883a 	add	r19,r19,r19
8111cd84:	94a5883a 	add	r18,r18,r18
8111cd88:	89800504 	addi	r6,r17,20
8111cd8c:	9ce7883a 	add	r19,r19,r19
8111cd90:	a3400504 	addi	r13,r20,20
8111cd94:	94a5883a 	add	r18,r18,r18
8111cd98:	34d9883a 	add	r12,r6,r19
8111cd9c:	6c93883a 	add	r9,r13,r18
8111cda0:	3300422e 	bgeu	r6,r12,8111ceac <__multiply+0x1b4>
8111cda4:	37c00017 	ldw	ra,0(r6)
8111cda8:	fbffffcc 	andi	r15,ra,65535
8111cdac:	78001b26 	beq	r15,zero,8111ce1c <__multiply+0x124>
8111cdb0:	5811883a 	mov	r8,r11
8111cdb4:	681d883a 	mov	r14,r13
8111cdb8:	000f883a 	mov	r7,zero
8111cdbc:	71000017 	ldw	r4,0(r14)
8111cdc0:	40c00017 	ldw	r3,0(r8)
8111cdc4:	73800104 	addi	r14,r14,4
8111cdc8:	217fffcc 	andi	r5,r4,65535
8111cdcc:	2bcb383a 	mul	r5,r5,r15
8111cdd0:	2008d43a 	srli	r4,r4,16
8111cdd4:	1c7fffcc 	andi	r17,r3,65535
8111cdd8:	2c4b883a 	add	r5,r5,r17
8111cddc:	29cb883a 	add	r5,r5,r7
8111cde0:	23c9383a 	mul	r4,r4,r15
8111cde4:	1806d43a 	srli	r3,r3,16
8111cde8:	280ed43a 	srli	r7,r5,16
8111cdec:	297fffcc 	andi	r5,r5,65535
8111cdf0:	20c7883a 	add	r3,r4,r3
8111cdf4:	19c7883a 	add	r3,r3,r7
8111cdf8:	1808943a 	slli	r4,r3,16
8111cdfc:	4023883a 	mov	r17,r8
8111ce00:	180ed43a 	srli	r7,r3,16
8111ce04:	214ab03a 	or	r5,r4,r5
8111ce08:	41400015 	stw	r5,0(r8)
8111ce0c:	42000104 	addi	r8,r8,4
8111ce10:	727fea36 	bltu	r14,r9,8111cdbc <__reset+0xfb0fcdbc>
8111ce14:	89c00115 	stw	r7,4(r17)
8111ce18:	37c00017 	ldw	ra,0(r6)
8111ce1c:	f83ed43a 	srli	ra,ra,16
8111ce20:	f8001f26 	beq	ra,zero,8111cea0 <__multiply+0x1a8>
8111ce24:	58c00017 	ldw	r3,0(r11)
8111ce28:	681d883a 	mov	r14,r13
8111ce2c:	581f883a 	mov	r15,r11
8111ce30:	1811883a 	mov	r8,r3
8111ce34:	5825883a 	mov	r18,r11
8111ce38:	000f883a 	mov	r7,zero
8111ce3c:	00000106 	br	8111ce44 <__multiply+0x14c>
8111ce40:	8825883a 	mov	r18,r17
8111ce44:	7140000b 	ldhu	r5,0(r14)
8111ce48:	4010d43a 	srli	r8,r8,16
8111ce4c:	193fffcc 	andi	r4,r3,65535
8111ce50:	2fcb383a 	mul	r5,r5,ra
8111ce54:	7bc00104 	addi	r15,r15,4
8111ce58:	73800104 	addi	r14,r14,4
8111ce5c:	2a0b883a 	add	r5,r5,r8
8111ce60:	29cb883a 	add	r5,r5,r7
8111ce64:	2806943a 	slli	r3,r5,16
8111ce68:	94400104 	addi	r17,r18,4
8111ce6c:	280ad43a 	srli	r5,r5,16
8111ce70:	1908b03a 	or	r4,r3,r4
8111ce74:	793fff15 	stw	r4,-4(r15)
8111ce78:	70ffff17 	ldw	r3,-4(r14)
8111ce7c:	8a000017 	ldw	r8,0(r17)
8111ce80:	1806d43a 	srli	r3,r3,16
8111ce84:	413fffcc 	andi	r4,r8,65535
8111ce88:	1fc7383a 	mul	r3,r3,ra
8111ce8c:	1907883a 	add	r3,r3,r4
8111ce90:	1947883a 	add	r3,r3,r5
8111ce94:	180ed43a 	srli	r7,r3,16
8111ce98:	727fe936 	bltu	r14,r9,8111ce40 <__reset+0xfb0fce40>
8111ce9c:	90c00115 	stw	r3,4(r18)
8111cea0:	31800104 	addi	r6,r6,4
8111cea4:	5ac00104 	addi	r11,r11,4
8111cea8:	333fbe36 	bltu	r6,r12,8111cda4 <__reset+0xfb0fcda4>
8111ceac:	0400090e 	bge	zero,r16,8111ced4 <__multiply+0x1dc>
8111ceb0:	50ffff17 	ldw	r3,-4(r10)
8111ceb4:	52bfff04 	addi	r10,r10,-4
8111ceb8:	18000326 	beq	r3,zero,8111cec8 <__multiply+0x1d0>
8111cebc:	00000506 	br	8111ced4 <__multiply+0x1dc>
8111cec0:	50c00017 	ldw	r3,0(r10)
8111cec4:	1800031e 	bne	r3,zero,8111ced4 <__multiply+0x1dc>
8111cec8:	843fffc4 	addi	r16,r16,-1
8111cecc:	52bfff04 	addi	r10,r10,-4
8111ced0:	803ffb1e 	bne	r16,zero,8111cec0 <__reset+0xfb0fcec0>
8111ced4:	14000415 	stw	r16,16(r2)
8111ced8:	dfc00517 	ldw	ra,20(sp)
8111cedc:	dd000417 	ldw	r20,16(sp)
8111cee0:	dcc00317 	ldw	r19,12(sp)
8111cee4:	dc800217 	ldw	r18,8(sp)
8111cee8:	dc400117 	ldw	r17,4(sp)
8111ceec:	dc000017 	ldw	r16,0(sp)
8111cef0:	dec00604 	addi	sp,sp,24
8111cef4:	f800283a 	ret

8111cef8 <__pow5mult>:
8111cef8:	defffa04 	addi	sp,sp,-24
8111cefc:	de00012e 	bgeu	sp,et,8111cf04 <__pow5mult+0xc>
8111cf00:	003b68fa 	trap	3
8111cf04:	308000cc 	andi	r2,r6,3
8111cf08:	dcc00315 	stw	r19,12(sp)
8111cf0c:	dc000015 	stw	r16,0(sp)
8111cf10:	dfc00515 	stw	ra,20(sp)
8111cf14:	dd000415 	stw	r20,16(sp)
8111cf18:	dc800215 	stw	r18,8(sp)
8111cf1c:	dc400115 	stw	r17,4(sp)
8111cf20:	3021883a 	mov	r16,r6
8111cf24:	2027883a 	mov	r19,r4
8111cf28:	10002f1e 	bne	r2,zero,8111cfe8 <__pow5mult+0xf0>
8111cf2c:	2825883a 	mov	r18,r5
8111cf30:	8021d0ba 	srai	r16,r16,2
8111cf34:	80001a26 	beq	r16,zero,8111cfa0 <__pow5mult+0xa8>
8111cf38:	9c401217 	ldw	r17,72(r19)
8111cf3c:	8800061e 	bne	r17,zero,8111cf58 <__pow5mult+0x60>
8111cf40:	00003406 	br	8111d014 <__pow5mult+0x11c>
8111cf44:	8021d07a 	srai	r16,r16,1
8111cf48:	80001526 	beq	r16,zero,8111cfa0 <__pow5mult+0xa8>
8111cf4c:	88800017 	ldw	r2,0(r17)
8111cf50:	10001c26 	beq	r2,zero,8111cfc4 <__pow5mult+0xcc>
8111cf54:	1023883a 	mov	r17,r2
8111cf58:	8080004c 	andi	r2,r16,1
8111cf5c:	103ff926 	beq	r2,zero,8111cf44 <__reset+0xfb0fcf44>
8111cf60:	880d883a 	mov	r6,r17
8111cf64:	900b883a 	mov	r5,r18
8111cf68:	9809883a 	mov	r4,r19
8111cf6c:	111ccf80 	call	8111ccf8 <__multiply>
8111cf70:	90001b26 	beq	r18,zero,8111cfe0 <__pow5mult+0xe8>
8111cf74:	91000117 	ldw	r4,4(r18)
8111cf78:	98c01317 	ldw	r3,76(r19)
8111cf7c:	8021d07a 	srai	r16,r16,1
8111cf80:	2109883a 	add	r4,r4,r4
8111cf84:	2109883a 	add	r4,r4,r4
8111cf88:	1907883a 	add	r3,r3,r4
8111cf8c:	19000017 	ldw	r4,0(r3)
8111cf90:	91000015 	stw	r4,0(r18)
8111cf94:	1c800015 	stw	r18,0(r3)
8111cf98:	1025883a 	mov	r18,r2
8111cf9c:	803feb1e 	bne	r16,zero,8111cf4c <__reset+0xfb0fcf4c>
8111cfa0:	9005883a 	mov	r2,r18
8111cfa4:	dfc00517 	ldw	ra,20(sp)
8111cfa8:	dd000417 	ldw	r20,16(sp)
8111cfac:	dcc00317 	ldw	r19,12(sp)
8111cfb0:	dc800217 	ldw	r18,8(sp)
8111cfb4:	dc400117 	ldw	r17,4(sp)
8111cfb8:	dc000017 	ldw	r16,0(sp)
8111cfbc:	dec00604 	addi	sp,sp,24
8111cfc0:	f800283a 	ret
8111cfc4:	880d883a 	mov	r6,r17
8111cfc8:	880b883a 	mov	r5,r17
8111cfcc:	9809883a 	mov	r4,r19
8111cfd0:	111ccf80 	call	8111ccf8 <__multiply>
8111cfd4:	88800015 	stw	r2,0(r17)
8111cfd8:	10000015 	stw	zero,0(r2)
8111cfdc:	003fdd06 	br	8111cf54 <__reset+0xfb0fcf54>
8111cfe0:	1025883a 	mov	r18,r2
8111cfe4:	003fd706 	br	8111cf44 <__reset+0xfb0fcf44>
8111cfe8:	10bfffc4 	addi	r2,r2,-1
8111cfec:	1085883a 	add	r2,r2,r2
8111cff0:	00e04534 	movhi	r3,33044
8111cff4:	18f93d04 	addi	r3,r3,-6924
8111cff8:	1085883a 	add	r2,r2,r2
8111cffc:	1885883a 	add	r2,r3,r2
8111d000:	11800017 	ldw	r6,0(r2)
8111d004:	000f883a 	mov	r7,zero
8111d008:	111c9680 	call	8111c968 <__multadd>
8111d00c:	1025883a 	mov	r18,r2
8111d010:	003fc706 	br	8111cf30 <__reset+0xfb0fcf30>
8111d014:	05000044 	movi	r20,1
8111d018:	a00b883a 	mov	r5,r20
8111d01c:	9809883a 	mov	r4,r19
8111d020:	111c8900 	call	8111c890 <_Balloc>
8111d024:	1023883a 	mov	r17,r2
8111d028:	00809c44 	movi	r2,625
8111d02c:	88800515 	stw	r2,20(r17)
8111d030:	8d000415 	stw	r20,16(r17)
8111d034:	9c401215 	stw	r17,72(r19)
8111d038:	88000015 	stw	zero,0(r17)
8111d03c:	003fc606 	br	8111cf58 <__reset+0xfb0fcf58>

8111d040 <__lshift>:
8111d040:	defff904 	addi	sp,sp,-28
8111d044:	de00012e 	bgeu	sp,et,8111d04c <__lshift+0xc>
8111d048:	003b68fa 	trap	3
8111d04c:	dd400515 	stw	r21,20(sp)
8111d050:	dcc00315 	stw	r19,12(sp)
8111d054:	302bd17a 	srai	r21,r6,5
8111d058:	2cc00417 	ldw	r19,16(r5)
8111d05c:	28800217 	ldw	r2,8(r5)
8111d060:	dd000415 	stw	r20,16(sp)
8111d064:	ace7883a 	add	r19,r21,r19
8111d068:	dc800215 	stw	r18,8(sp)
8111d06c:	dc400115 	stw	r17,4(sp)
8111d070:	dc000015 	stw	r16,0(sp)
8111d074:	dfc00615 	stw	ra,24(sp)
8111d078:	9c000044 	addi	r16,r19,1
8111d07c:	2823883a 	mov	r17,r5
8111d080:	3029883a 	mov	r20,r6
8111d084:	2025883a 	mov	r18,r4
8111d088:	29400117 	ldw	r5,4(r5)
8111d08c:	1400030e 	bge	r2,r16,8111d09c <__lshift+0x5c>
8111d090:	1085883a 	add	r2,r2,r2
8111d094:	29400044 	addi	r5,r5,1
8111d098:	143ffd16 	blt	r2,r16,8111d090 <__reset+0xfb0fd090>
8111d09c:	9009883a 	mov	r4,r18
8111d0a0:	111c8900 	call	8111c890 <_Balloc>
8111d0a4:	10c00504 	addi	r3,r2,20
8111d0a8:	0540070e 	bge	zero,r21,8111d0c8 <__lshift+0x88>
8111d0ac:	ad6b883a 	add	r21,r21,r21
8111d0b0:	ad6b883a 	add	r21,r21,r21
8111d0b4:	1809883a 	mov	r4,r3
8111d0b8:	1d47883a 	add	r3,r3,r21
8111d0bc:	20000015 	stw	zero,0(r4)
8111d0c0:	21000104 	addi	r4,r4,4
8111d0c4:	193ffd1e 	bne	r3,r4,8111d0bc <__reset+0xfb0fd0bc>
8111d0c8:	8a000417 	ldw	r8,16(r17)
8111d0cc:	89000504 	addi	r4,r17,20
8111d0d0:	a18007cc 	andi	r6,r20,31
8111d0d4:	4211883a 	add	r8,r8,r8
8111d0d8:	4211883a 	add	r8,r8,r8
8111d0dc:	2211883a 	add	r8,r4,r8
8111d0e0:	30002326 	beq	r6,zero,8111d170 <__lshift+0x130>
8111d0e4:	02400804 	movi	r9,32
8111d0e8:	4993c83a 	sub	r9,r9,r6
8111d0ec:	000b883a 	mov	r5,zero
8111d0f0:	21c00017 	ldw	r7,0(r4)
8111d0f4:	1815883a 	mov	r10,r3
8111d0f8:	18c00104 	addi	r3,r3,4
8111d0fc:	398e983a 	sll	r7,r7,r6
8111d100:	21000104 	addi	r4,r4,4
8111d104:	394ab03a 	or	r5,r7,r5
8111d108:	197fff15 	stw	r5,-4(r3)
8111d10c:	217fff17 	ldw	r5,-4(r4)
8111d110:	2a4ad83a 	srl	r5,r5,r9
8111d114:	223ff636 	bltu	r4,r8,8111d0f0 <__reset+0xfb0fd0f0>
8111d118:	51400115 	stw	r5,4(r10)
8111d11c:	28001a1e 	bne	r5,zero,8111d188 <__lshift+0x148>
8111d120:	843fffc4 	addi	r16,r16,-1
8111d124:	14000415 	stw	r16,16(r2)
8111d128:	88000826 	beq	r17,zero,8111d14c <__lshift+0x10c>
8111d12c:	89000117 	ldw	r4,4(r17)
8111d130:	90c01317 	ldw	r3,76(r18)
8111d134:	2109883a 	add	r4,r4,r4
8111d138:	2109883a 	add	r4,r4,r4
8111d13c:	1907883a 	add	r3,r3,r4
8111d140:	19000017 	ldw	r4,0(r3)
8111d144:	89000015 	stw	r4,0(r17)
8111d148:	1c400015 	stw	r17,0(r3)
8111d14c:	dfc00617 	ldw	ra,24(sp)
8111d150:	dd400517 	ldw	r21,20(sp)
8111d154:	dd000417 	ldw	r20,16(sp)
8111d158:	dcc00317 	ldw	r19,12(sp)
8111d15c:	dc800217 	ldw	r18,8(sp)
8111d160:	dc400117 	ldw	r17,4(sp)
8111d164:	dc000017 	ldw	r16,0(sp)
8111d168:	dec00704 	addi	sp,sp,28
8111d16c:	f800283a 	ret
8111d170:	21400017 	ldw	r5,0(r4)
8111d174:	18c00104 	addi	r3,r3,4
8111d178:	21000104 	addi	r4,r4,4
8111d17c:	197fff15 	stw	r5,-4(r3)
8111d180:	223ffb36 	bltu	r4,r8,8111d170 <__reset+0xfb0fd170>
8111d184:	003fe606 	br	8111d120 <__reset+0xfb0fd120>
8111d188:	9c000084 	addi	r16,r19,2
8111d18c:	003fe406 	br	8111d120 <__reset+0xfb0fd120>

8111d190 <__mcmp>:
8111d190:	20800417 	ldw	r2,16(r4)
8111d194:	28c00417 	ldw	r3,16(r5)
8111d198:	10c5c83a 	sub	r2,r2,r3
8111d19c:	1000111e 	bne	r2,zero,8111d1e4 <__mcmp+0x54>
8111d1a0:	18c7883a 	add	r3,r3,r3
8111d1a4:	18c7883a 	add	r3,r3,r3
8111d1a8:	21000504 	addi	r4,r4,20
8111d1ac:	29400504 	addi	r5,r5,20
8111d1b0:	20c5883a 	add	r2,r4,r3
8111d1b4:	28cb883a 	add	r5,r5,r3
8111d1b8:	00000106 	br	8111d1c0 <__mcmp+0x30>
8111d1bc:	20800a2e 	bgeu	r4,r2,8111d1e8 <__mcmp+0x58>
8111d1c0:	10bfff04 	addi	r2,r2,-4
8111d1c4:	297fff04 	addi	r5,r5,-4
8111d1c8:	11800017 	ldw	r6,0(r2)
8111d1cc:	28c00017 	ldw	r3,0(r5)
8111d1d0:	30fffa26 	beq	r6,r3,8111d1bc <__reset+0xfb0fd1bc>
8111d1d4:	30c00236 	bltu	r6,r3,8111d1e0 <__mcmp+0x50>
8111d1d8:	00800044 	movi	r2,1
8111d1dc:	f800283a 	ret
8111d1e0:	00bfffc4 	movi	r2,-1
8111d1e4:	f800283a 	ret
8111d1e8:	0005883a 	mov	r2,zero
8111d1ec:	f800283a 	ret

8111d1f0 <__mdiff>:
8111d1f0:	defffa04 	addi	sp,sp,-24
8111d1f4:	de00012e 	bgeu	sp,et,8111d1fc <__mdiff+0xc>
8111d1f8:	003b68fa 	trap	3
8111d1fc:	28c00417 	ldw	r3,16(r5)
8111d200:	30800417 	ldw	r2,16(r6)
8111d204:	dcc00315 	stw	r19,12(sp)
8111d208:	dc800215 	stw	r18,8(sp)
8111d20c:	dfc00515 	stw	ra,20(sp)
8111d210:	dd000415 	stw	r20,16(sp)
8111d214:	dc400115 	stw	r17,4(sp)
8111d218:	dc000015 	stw	r16,0(sp)
8111d21c:	1887c83a 	sub	r3,r3,r2
8111d220:	2825883a 	mov	r18,r5
8111d224:	3027883a 	mov	r19,r6
8111d228:	1800141e 	bne	r3,zero,8111d27c <__mdiff+0x8c>
8111d22c:	1085883a 	add	r2,r2,r2
8111d230:	1085883a 	add	r2,r2,r2
8111d234:	2a000504 	addi	r8,r5,20
8111d238:	34000504 	addi	r16,r6,20
8111d23c:	4087883a 	add	r3,r8,r2
8111d240:	8085883a 	add	r2,r16,r2
8111d244:	00000106 	br	8111d24c <__mdiff+0x5c>
8111d248:	40c0592e 	bgeu	r8,r3,8111d3b0 <__mdiff+0x1c0>
8111d24c:	18ffff04 	addi	r3,r3,-4
8111d250:	10bfff04 	addi	r2,r2,-4
8111d254:	19c00017 	ldw	r7,0(r3)
8111d258:	11400017 	ldw	r5,0(r2)
8111d25c:	397ffa26 	beq	r7,r5,8111d248 <__reset+0xfb0fd248>
8111d260:	3940592e 	bgeu	r7,r5,8111d3c8 <__mdiff+0x1d8>
8111d264:	9005883a 	mov	r2,r18
8111d268:	4023883a 	mov	r17,r8
8111d26c:	9825883a 	mov	r18,r19
8111d270:	05000044 	movi	r20,1
8111d274:	1027883a 	mov	r19,r2
8111d278:	00000406 	br	8111d28c <__mdiff+0x9c>
8111d27c:	18005616 	blt	r3,zero,8111d3d8 <__mdiff+0x1e8>
8111d280:	34400504 	addi	r17,r6,20
8111d284:	2c000504 	addi	r16,r5,20
8111d288:	0029883a 	mov	r20,zero
8111d28c:	91400117 	ldw	r5,4(r18)
8111d290:	111c8900 	call	8111c890 <_Balloc>
8111d294:	92400417 	ldw	r9,16(r18)
8111d298:	9b000417 	ldw	r12,16(r19)
8111d29c:	12c00504 	addi	r11,r2,20
8111d2a0:	4a51883a 	add	r8,r9,r9
8111d2a4:	6319883a 	add	r12,r12,r12
8111d2a8:	4211883a 	add	r8,r8,r8
8111d2ac:	6319883a 	add	r12,r12,r12
8111d2b0:	15000315 	stw	r20,12(r2)
8111d2b4:	8211883a 	add	r8,r16,r8
8111d2b8:	8b19883a 	add	r12,r17,r12
8111d2bc:	0007883a 	mov	r3,zero
8111d2c0:	81400017 	ldw	r5,0(r16)
8111d2c4:	89c00017 	ldw	r7,0(r17)
8111d2c8:	59800104 	addi	r6,r11,4
8111d2cc:	293fffcc 	andi	r4,r5,65535
8111d2d0:	20c7883a 	add	r3,r4,r3
8111d2d4:	393fffcc 	andi	r4,r7,65535
8111d2d8:	1909c83a 	sub	r4,r3,r4
8111d2dc:	280ad43a 	srli	r5,r5,16
8111d2e0:	380ed43a 	srli	r7,r7,16
8111d2e4:	2007d43a 	srai	r3,r4,16
8111d2e8:	213fffcc 	andi	r4,r4,65535
8111d2ec:	29cbc83a 	sub	r5,r5,r7
8111d2f0:	28c7883a 	add	r3,r5,r3
8111d2f4:	180a943a 	slli	r5,r3,16
8111d2f8:	8c400104 	addi	r17,r17,4
8111d2fc:	84000104 	addi	r16,r16,4
8111d300:	2908b03a 	or	r4,r5,r4
8111d304:	59000015 	stw	r4,0(r11)
8111d308:	1807d43a 	srai	r3,r3,16
8111d30c:	3015883a 	mov	r10,r6
8111d310:	3017883a 	mov	r11,r6
8111d314:	8b3fea36 	bltu	r17,r12,8111d2c0 <__reset+0xfb0fd2c0>
8111d318:	8200162e 	bgeu	r16,r8,8111d374 <__mdiff+0x184>
8111d31c:	8017883a 	mov	r11,r16
8111d320:	59400017 	ldw	r5,0(r11)
8111d324:	31800104 	addi	r6,r6,4
8111d328:	5ac00104 	addi	r11,r11,4
8111d32c:	293fffcc 	andi	r4,r5,65535
8111d330:	20c7883a 	add	r3,r4,r3
8111d334:	280ed43a 	srli	r7,r5,16
8111d338:	180bd43a 	srai	r5,r3,16
8111d33c:	193fffcc 	andi	r4,r3,65535
8111d340:	3947883a 	add	r3,r7,r5
8111d344:	180a943a 	slli	r5,r3,16
8111d348:	1807d43a 	srai	r3,r3,16
8111d34c:	2908b03a 	or	r4,r5,r4
8111d350:	313fff15 	stw	r4,-4(r6)
8111d354:	5a3ff236 	bltu	r11,r8,8111d320 <__reset+0xfb0fd320>
8111d358:	0406303a 	nor	r3,zero,r16
8111d35c:	1a07883a 	add	r3,r3,r8
8111d360:	1806d0ba 	srli	r3,r3,2
8111d364:	18c00044 	addi	r3,r3,1
8111d368:	18c7883a 	add	r3,r3,r3
8111d36c:	18c7883a 	add	r3,r3,r3
8111d370:	50d5883a 	add	r10,r10,r3
8111d374:	50ffff04 	addi	r3,r10,-4
8111d378:	2000041e 	bne	r4,zero,8111d38c <__mdiff+0x19c>
8111d37c:	18ffff04 	addi	r3,r3,-4
8111d380:	19000017 	ldw	r4,0(r3)
8111d384:	4a7fffc4 	addi	r9,r9,-1
8111d388:	203ffc26 	beq	r4,zero,8111d37c <__reset+0xfb0fd37c>
8111d38c:	12400415 	stw	r9,16(r2)
8111d390:	dfc00517 	ldw	ra,20(sp)
8111d394:	dd000417 	ldw	r20,16(sp)
8111d398:	dcc00317 	ldw	r19,12(sp)
8111d39c:	dc800217 	ldw	r18,8(sp)
8111d3a0:	dc400117 	ldw	r17,4(sp)
8111d3a4:	dc000017 	ldw	r16,0(sp)
8111d3a8:	dec00604 	addi	sp,sp,24
8111d3ac:	f800283a 	ret
8111d3b0:	000b883a 	mov	r5,zero
8111d3b4:	111c8900 	call	8111c890 <_Balloc>
8111d3b8:	00c00044 	movi	r3,1
8111d3bc:	10c00415 	stw	r3,16(r2)
8111d3c0:	10000515 	stw	zero,20(r2)
8111d3c4:	003ff206 	br	8111d390 <__reset+0xfb0fd390>
8111d3c8:	8023883a 	mov	r17,r16
8111d3cc:	0029883a 	mov	r20,zero
8111d3d0:	4021883a 	mov	r16,r8
8111d3d4:	003fad06 	br	8111d28c <__reset+0xfb0fd28c>
8111d3d8:	9005883a 	mov	r2,r18
8111d3dc:	94400504 	addi	r17,r18,20
8111d3e0:	9c000504 	addi	r16,r19,20
8111d3e4:	9825883a 	mov	r18,r19
8111d3e8:	05000044 	movi	r20,1
8111d3ec:	1027883a 	mov	r19,r2
8111d3f0:	003fa606 	br	8111d28c <__reset+0xfb0fd28c>

8111d3f4 <__ulp>:
8111d3f4:	295ffc2c 	andhi	r5,r5,32752
8111d3f8:	00bf3034 	movhi	r2,64704
8111d3fc:	2887883a 	add	r3,r5,r2
8111d400:	00c0020e 	bge	zero,r3,8111d40c <__ulp+0x18>
8111d404:	0005883a 	mov	r2,zero
8111d408:	f800283a 	ret
8111d40c:	00c7c83a 	sub	r3,zero,r3
8111d410:	1807d53a 	srai	r3,r3,20
8111d414:	008004c4 	movi	r2,19
8111d418:	10c00b0e 	bge	r2,r3,8111d448 <__ulp+0x54>
8111d41c:	18bffb04 	addi	r2,r3,-20
8111d420:	01000784 	movi	r4,30
8111d424:	0007883a 	mov	r3,zero
8111d428:	20800516 	blt	r4,r2,8111d440 <__ulp+0x4c>
8111d42c:	010007c4 	movi	r4,31
8111d430:	2089c83a 	sub	r4,r4,r2
8111d434:	00800044 	movi	r2,1
8111d438:	1104983a 	sll	r2,r2,r4
8111d43c:	f800283a 	ret
8111d440:	00800044 	movi	r2,1
8111d444:	f800283a 	ret
8111d448:	01400234 	movhi	r5,8
8111d44c:	28c7d83a 	sra	r3,r5,r3
8111d450:	0005883a 	mov	r2,zero
8111d454:	f800283a 	ret

8111d458 <__b2d>:
8111d458:	defffa04 	addi	sp,sp,-24
8111d45c:	de00012e 	bgeu	sp,et,8111d464 <__b2d+0xc>
8111d460:	003b68fa 	trap	3
8111d464:	dc000015 	stw	r16,0(sp)
8111d468:	24000417 	ldw	r16,16(r4)
8111d46c:	dc400115 	stw	r17,4(sp)
8111d470:	24400504 	addi	r17,r4,20
8111d474:	8421883a 	add	r16,r16,r16
8111d478:	8421883a 	add	r16,r16,r16
8111d47c:	8c21883a 	add	r16,r17,r16
8111d480:	dc800215 	stw	r18,8(sp)
8111d484:	84bfff17 	ldw	r18,-4(r16)
8111d488:	dd000415 	stw	r20,16(sp)
8111d48c:	dcc00315 	stw	r19,12(sp)
8111d490:	9009883a 	mov	r4,r18
8111d494:	2829883a 	mov	r20,r5
8111d498:	dfc00515 	stw	ra,20(sp)
8111d49c:	111cb9c0 	call	8111cb9c <__hi0bits>
8111d4a0:	00c00804 	movi	r3,32
8111d4a4:	1889c83a 	sub	r4,r3,r2
8111d4a8:	a1000015 	stw	r4,0(r20)
8111d4ac:	01000284 	movi	r4,10
8111d4b0:	84ffff04 	addi	r19,r16,-4
8111d4b4:	20801216 	blt	r4,r2,8111d500 <__b2d+0xa8>
8111d4b8:	018002c4 	movi	r6,11
8111d4bc:	308dc83a 	sub	r6,r6,r2
8111d4c0:	9186d83a 	srl	r3,r18,r6
8111d4c4:	18cffc34 	orhi	r3,r3,16368
8111d4c8:	8cc0212e 	bgeu	r17,r19,8111d550 <__b2d+0xf8>
8111d4cc:	813ffe17 	ldw	r4,-8(r16)
8111d4d0:	218cd83a 	srl	r6,r4,r6
8111d4d4:	10800544 	addi	r2,r2,21
8111d4d8:	9084983a 	sll	r2,r18,r2
8111d4dc:	1184b03a 	or	r2,r2,r6
8111d4e0:	dfc00517 	ldw	ra,20(sp)
8111d4e4:	dd000417 	ldw	r20,16(sp)
8111d4e8:	dcc00317 	ldw	r19,12(sp)
8111d4ec:	dc800217 	ldw	r18,8(sp)
8111d4f0:	dc400117 	ldw	r17,4(sp)
8111d4f4:	dc000017 	ldw	r16,0(sp)
8111d4f8:	dec00604 	addi	sp,sp,24
8111d4fc:	f800283a 	ret
8111d500:	8cc00f2e 	bgeu	r17,r19,8111d540 <__b2d+0xe8>
8111d504:	117ffd44 	addi	r5,r2,-11
8111d508:	80bffe17 	ldw	r2,-8(r16)
8111d50c:	28000e26 	beq	r5,zero,8111d548 <__b2d+0xf0>
8111d510:	1949c83a 	sub	r4,r3,r5
8111d514:	9164983a 	sll	r18,r18,r5
8111d518:	1106d83a 	srl	r3,r2,r4
8111d51c:	81bffe04 	addi	r6,r16,-8
8111d520:	948ffc34 	orhi	r18,r18,16368
8111d524:	90c6b03a 	or	r3,r18,r3
8111d528:	89800e2e 	bgeu	r17,r6,8111d564 <__b2d+0x10c>
8111d52c:	81bffd17 	ldw	r6,-12(r16)
8111d530:	1144983a 	sll	r2,r2,r5
8111d534:	310ad83a 	srl	r5,r6,r4
8111d538:	2884b03a 	or	r2,r5,r2
8111d53c:	003fe806 	br	8111d4e0 <__reset+0xfb0fd4e0>
8111d540:	10bffd44 	addi	r2,r2,-11
8111d544:	1000041e 	bne	r2,zero,8111d558 <__b2d+0x100>
8111d548:	90cffc34 	orhi	r3,r18,16368
8111d54c:	003fe406 	br	8111d4e0 <__reset+0xfb0fd4e0>
8111d550:	000d883a 	mov	r6,zero
8111d554:	003fdf06 	br	8111d4d4 <__reset+0xfb0fd4d4>
8111d558:	90a4983a 	sll	r18,r18,r2
8111d55c:	0005883a 	mov	r2,zero
8111d560:	003ff906 	br	8111d548 <__reset+0xfb0fd548>
8111d564:	1144983a 	sll	r2,r2,r5
8111d568:	003fdd06 	br	8111d4e0 <__reset+0xfb0fd4e0>

8111d56c <__d2b>:
8111d56c:	defff804 	addi	sp,sp,-32
8111d570:	de00012e 	bgeu	sp,et,8111d578 <__d2b+0xc>
8111d574:	003b68fa 	trap	3
8111d578:	dc000215 	stw	r16,8(sp)
8111d57c:	3021883a 	mov	r16,r6
8111d580:	dc400315 	stw	r17,12(sp)
8111d584:	8022907a 	slli	r17,r16,1
8111d588:	dd000615 	stw	r20,24(sp)
8111d58c:	2829883a 	mov	r20,r5
8111d590:	01400044 	movi	r5,1
8111d594:	dcc00515 	stw	r19,20(sp)
8111d598:	dc800415 	stw	r18,16(sp)
8111d59c:	dfc00715 	stw	ra,28(sp)
8111d5a0:	3825883a 	mov	r18,r7
8111d5a4:	8822d57a 	srli	r17,r17,21
8111d5a8:	111c8900 	call	8111c890 <_Balloc>
8111d5ac:	1027883a 	mov	r19,r2
8111d5b0:	00800434 	movhi	r2,16
8111d5b4:	10bfffc4 	addi	r2,r2,-1
8111d5b8:	808c703a 	and	r6,r16,r2
8111d5bc:	88000126 	beq	r17,zero,8111d5c4 <__d2b+0x58>
8111d5c0:	31800434 	orhi	r6,r6,16
8111d5c4:	d9800015 	stw	r6,0(sp)
8111d5c8:	a0002426 	beq	r20,zero,8111d65c <__d2b+0xf0>
8111d5cc:	d9000104 	addi	r4,sp,4
8111d5d0:	dd000115 	stw	r20,4(sp)
8111d5d4:	111cc040 	call	8111cc04 <__lo0bits>
8111d5d8:	d8c00017 	ldw	r3,0(sp)
8111d5dc:	10002f1e 	bne	r2,zero,8111d69c <__d2b+0x130>
8111d5e0:	d9000117 	ldw	r4,4(sp)
8111d5e4:	99000515 	stw	r4,20(r19)
8111d5e8:	1821003a 	cmpeq	r16,r3,zero
8111d5ec:	01000084 	movi	r4,2
8111d5f0:	2421c83a 	sub	r16,r4,r16
8111d5f4:	98c00615 	stw	r3,24(r19)
8111d5f8:	9c000415 	stw	r16,16(r19)
8111d5fc:	88001f1e 	bne	r17,zero,8111d67c <__d2b+0x110>
8111d600:	10bef384 	addi	r2,r2,-1074
8111d604:	90800015 	stw	r2,0(r18)
8111d608:	00900034 	movhi	r2,16384
8111d60c:	10bfffc4 	addi	r2,r2,-1
8111d610:	8085883a 	add	r2,r16,r2
8111d614:	1085883a 	add	r2,r2,r2
8111d618:	1085883a 	add	r2,r2,r2
8111d61c:	9885883a 	add	r2,r19,r2
8111d620:	11000517 	ldw	r4,20(r2)
8111d624:	8020917a 	slli	r16,r16,5
8111d628:	111cb9c0 	call	8111cb9c <__hi0bits>
8111d62c:	d8c00817 	ldw	r3,32(sp)
8111d630:	8085c83a 	sub	r2,r16,r2
8111d634:	18800015 	stw	r2,0(r3)
8111d638:	9805883a 	mov	r2,r19
8111d63c:	dfc00717 	ldw	ra,28(sp)
8111d640:	dd000617 	ldw	r20,24(sp)
8111d644:	dcc00517 	ldw	r19,20(sp)
8111d648:	dc800417 	ldw	r18,16(sp)
8111d64c:	dc400317 	ldw	r17,12(sp)
8111d650:	dc000217 	ldw	r16,8(sp)
8111d654:	dec00804 	addi	sp,sp,32
8111d658:	f800283a 	ret
8111d65c:	d809883a 	mov	r4,sp
8111d660:	111cc040 	call	8111cc04 <__lo0bits>
8111d664:	d8c00017 	ldw	r3,0(sp)
8111d668:	04000044 	movi	r16,1
8111d66c:	9c000415 	stw	r16,16(r19)
8111d670:	98c00515 	stw	r3,20(r19)
8111d674:	10800804 	addi	r2,r2,32
8111d678:	883fe126 	beq	r17,zero,8111d600 <__reset+0xfb0fd600>
8111d67c:	00c00d44 	movi	r3,53
8111d680:	8c7ef344 	addi	r17,r17,-1075
8111d684:	88a3883a 	add	r17,r17,r2
8111d688:	1885c83a 	sub	r2,r3,r2
8111d68c:	d8c00817 	ldw	r3,32(sp)
8111d690:	94400015 	stw	r17,0(r18)
8111d694:	18800015 	stw	r2,0(r3)
8111d698:	003fe706 	br	8111d638 <__reset+0xfb0fd638>
8111d69c:	01000804 	movi	r4,32
8111d6a0:	2089c83a 	sub	r4,r4,r2
8111d6a4:	1908983a 	sll	r4,r3,r4
8111d6a8:	d9400117 	ldw	r5,4(sp)
8111d6ac:	1886d83a 	srl	r3,r3,r2
8111d6b0:	2148b03a 	or	r4,r4,r5
8111d6b4:	99000515 	stw	r4,20(r19)
8111d6b8:	d8c00015 	stw	r3,0(sp)
8111d6bc:	003fca06 	br	8111d5e8 <__reset+0xfb0fd5e8>

8111d6c0 <__ratio>:
8111d6c0:	defff904 	addi	sp,sp,-28
8111d6c4:	de00012e 	bgeu	sp,et,8111d6cc <__ratio+0xc>
8111d6c8:	003b68fa 	trap	3
8111d6cc:	dc400315 	stw	r17,12(sp)
8111d6d0:	2823883a 	mov	r17,r5
8111d6d4:	d9400104 	addi	r5,sp,4
8111d6d8:	dfc00615 	stw	ra,24(sp)
8111d6dc:	dcc00515 	stw	r19,20(sp)
8111d6e0:	dc800415 	stw	r18,16(sp)
8111d6e4:	2027883a 	mov	r19,r4
8111d6e8:	dc000215 	stw	r16,8(sp)
8111d6ec:	111d4580 	call	8111d458 <__b2d>
8111d6f0:	d80b883a 	mov	r5,sp
8111d6f4:	8809883a 	mov	r4,r17
8111d6f8:	1025883a 	mov	r18,r2
8111d6fc:	1821883a 	mov	r16,r3
8111d700:	111d4580 	call	8111d458 <__b2d>
8111d704:	8a000417 	ldw	r8,16(r17)
8111d708:	99000417 	ldw	r4,16(r19)
8111d70c:	d9400117 	ldw	r5,4(sp)
8111d710:	2209c83a 	sub	r4,r4,r8
8111d714:	2010917a 	slli	r8,r4,5
8111d718:	d9000017 	ldw	r4,0(sp)
8111d71c:	2909c83a 	sub	r4,r5,r4
8111d720:	4109883a 	add	r4,r8,r4
8111d724:	01000e0e 	bge	zero,r4,8111d760 <__ratio+0xa0>
8111d728:	2008953a 	slli	r4,r4,20
8111d72c:	2421883a 	add	r16,r4,r16
8111d730:	100d883a 	mov	r6,r2
8111d734:	180f883a 	mov	r7,r3
8111d738:	9009883a 	mov	r4,r18
8111d73c:	800b883a 	mov	r5,r16
8111d740:	11259140 	call	81125914 <__divdf3>
8111d744:	dfc00617 	ldw	ra,24(sp)
8111d748:	dcc00517 	ldw	r19,20(sp)
8111d74c:	dc800417 	ldw	r18,16(sp)
8111d750:	dc400317 	ldw	r17,12(sp)
8111d754:	dc000217 	ldw	r16,8(sp)
8111d758:	dec00704 	addi	sp,sp,28
8111d75c:	f800283a 	ret
8111d760:	2008953a 	slli	r4,r4,20
8111d764:	1907c83a 	sub	r3,r3,r4
8111d768:	003ff106 	br	8111d730 <__reset+0xfb0fd730>

8111d76c <_mprec_log10>:
8111d76c:	defffe04 	addi	sp,sp,-8
8111d770:	de00012e 	bgeu	sp,et,8111d778 <_mprec_log10+0xc>
8111d774:	003b68fa 	trap	3
8111d778:	008005c4 	movi	r2,23
8111d77c:	dc000015 	stw	r16,0(sp)
8111d780:	dfc00115 	stw	ra,4(sp)
8111d784:	2021883a 	mov	r16,r4
8111d788:	11000d0e 	bge	r2,r4,8111d7c0 <_mprec_log10+0x54>
8111d78c:	0005883a 	mov	r2,zero
8111d790:	00cffc34 	movhi	r3,16368
8111d794:	843fffc4 	addi	r16,r16,-1
8111d798:	000d883a 	mov	r6,zero
8111d79c:	01d00934 	movhi	r7,16420
8111d7a0:	1009883a 	mov	r4,r2
8111d7a4:	180b883a 	mov	r5,r3
8111d7a8:	1110ddc0 	call	81110ddc <__muldf3>
8111d7ac:	803ff91e 	bne	r16,zero,8111d794 <__reset+0xfb0fd794>
8111d7b0:	dfc00117 	ldw	ra,4(sp)
8111d7b4:	dc000017 	ldw	r16,0(sp)
8111d7b8:	dec00204 	addi	sp,sp,8
8111d7bc:	f800283a 	ret
8111d7c0:	202090fa 	slli	r16,r4,3
8111d7c4:	00a04534 	movhi	r2,33044
8111d7c8:	10b95404 	addi	r2,r2,-6832
8111d7cc:	1421883a 	add	r16,r2,r16
8111d7d0:	80800017 	ldw	r2,0(r16)
8111d7d4:	80c00117 	ldw	r3,4(r16)
8111d7d8:	dfc00117 	ldw	ra,4(sp)
8111d7dc:	dc000017 	ldw	r16,0(sp)
8111d7e0:	dec00204 	addi	sp,sp,8
8111d7e4:	f800283a 	ret

8111d7e8 <__copybits>:
8111d7e8:	297fffc4 	addi	r5,r5,-1
8111d7ec:	280fd17a 	srai	r7,r5,5
8111d7f0:	30c00417 	ldw	r3,16(r6)
8111d7f4:	30800504 	addi	r2,r6,20
8111d7f8:	39c00044 	addi	r7,r7,1
8111d7fc:	18c7883a 	add	r3,r3,r3
8111d800:	39cf883a 	add	r7,r7,r7
8111d804:	18c7883a 	add	r3,r3,r3
8111d808:	39cf883a 	add	r7,r7,r7
8111d80c:	10c7883a 	add	r3,r2,r3
8111d810:	21cf883a 	add	r7,r4,r7
8111d814:	10c00d2e 	bgeu	r2,r3,8111d84c <__copybits+0x64>
8111d818:	200b883a 	mov	r5,r4
8111d81c:	12000017 	ldw	r8,0(r2)
8111d820:	29400104 	addi	r5,r5,4
8111d824:	10800104 	addi	r2,r2,4
8111d828:	2a3fff15 	stw	r8,-4(r5)
8111d82c:	10fffb36 	bltu	r2,r3,8111d81c <__reset+0xfb0fd81c>
8111d830:	1985c83a 	sub	r2,r3,r6
8111d834:	10bffac4 	addi	r2,r2,-21
8111d838:	1004d0ba 	srli	r2,r2,2
8111d83c:	10800044 	addi	r2,r2,1
8111d840:	1085883a 	add	r2,r2,r2
8111d844:	1085883a 	add	r2,r2,r2
8111d848:	2089883a 	add	r4,r4,r2
8111d84c:	21c0032e 	bgeu	r4,r7,8111d85c <__copybits+0x74>
8111d850:	20000015 	stw	zero,0(r4)
8111d854:	21000104 	addi	r4,r4,4
8111d858:	21fffd36 	bltu	r4,r7,8111d850 <__reset+0xfb0fd850>
8111d85c:	f800283a 	ret

8111d860 <__any_on>:
8111d860:	20c00417 	ldw	r3,16(r4)
8111d864:	2805d17a 	srai	r2,r5,5
8111d868:	21000504 	addi	r4,r4,20
8111d86c:	18800d0e 	bge	r3,r2,8111d8a4 <__any_on+0x44>
8111d870:	18c7883a 	add	r3,r3,r3
8111d874:	18c7883a 	add	r3,r3,r3
8111d878:	20c7883a 	add	r3,r4,r3
8111d87c:	20c0192e 	bgeu	r4,r3,8111d8e4 <__any_on+0x84>
8111d880:	18bfff17 	ldw	r2,-4(r3)
8111d884:	18ffff04 	addi	r3,r3,-4
8111d888:	1000041e 	bne	r2,zero,8111d89c <__any_on+0x3c>
8111d88c:	20c0142e 	bgeu	r4,r3,8111d8e0 <__any_on+0x80>
8111d890:	18ffff04 	addi	r3,r3,-4
8111d894:	19400017 	ldw	r5,0(r3)
8111d898:	283ffc26 	beq	r5,zero,8111d88c <__reset+0xfb0fd88c>
8111d89c:	00800044 	movi	r2,1
8111d8a0:	f800283a 	ret
8111d8a4:	10c00a0e 	bge	r2,r3,8111d8d0 <__any_on+0x70>
8111d8a8:	1085883a 	add	r2,r2,r2
8111d8ac:	1085883a 	add	r2,r2,r2
8111d8b0:	294007cc 	andi	r5,r5,31
8111d8b4:	2087883a 	add	r3,r4,r2
8111d8b8:	283ff026 	beq	r5,zero,8111d87c <__reset+0xfb0fd87c>
8111d8bc:	19800017 	ldw	r6,0(r3)
8111d8c0:	3144d83a 	srl	r2,r6,r5
8111d8c4:	114a983a 	sll	r5,r2,r5
8111d8c8:	317ff41e 	bne	r6,r5,8111d89c <__reset+0xfb0fd89c>
8111d8cc:	003feb06 	br	8111d87c <__reset+0xfb0fd87c>
8111d8d0:	1085883a 	add	r2,r2,r2
8111d8d4:	1085883a 	add	r2,r2,r2
8111d8d8:	2087883a 	add	r3,r4,r2
8111d8dc:	003fe706 	br	8111d87c <__reset+0xfb0fd87c>
8111d8e0:	f800283a 	ret
8111d8e4:	0005883a 	mov	r2,zero
8111d8e8:	f800283a 	ret

8111d8ec <_read_r>:
8111d8ec:	defffd04 	addi	sp,sp,-12
8111d8f0:	de00012e 	bgeu	sp,et,8111d8f8 <_read_r+0xc>
8111d8f4:	003b68fa 	trap	3
8111d8f8:	2805883a 	mov	r2,r5
8111d8fc:	dc000015 	stw	r16,0(sp)
8111d900:	04204534 	movhi	r16,33044
8111d904:	dc400115 	stw	r17,4(sp)
8111d908:	300b883a 	mov	r5,r6
8111d90c:	84026e04 	addi	r16,r16,2488
8111d910:	2023883a 	mov	r17,r4
8111d914:	380d883a 	mov	r6,r7
8111d918:	1009883a 	mov	r4,r2
8111d91c:	dfc00215 	stw	ra,8(sp)
8111d920:	80000015 	stw	zero,0(r16)
8111d924:	1127a240 	call	81127a24 <read>
8111d928:	00ffffc4 	movi	r3,-1
8111d92c:	10c00526 	beq	r2,r3,8111d944 <_read_r+0x58>
8111d930:	dfc00217 	ldw	ra,8(sp)
8111d934:	dc400117 	ldw	r17,4(sp)
8111d938:	dc000017 	ldw	r16,0(sp)
8111d93c:	dec00304 	addi	sp,sp,12
8111d940:	f800283a 	ret
8111d944:	80c00017 	ldw	r3,0(r16)
8111d948:	183ff926 	beq	r3,zero,8111d930 <__reset+0xfb0fd930>
8111d94c:	88c00015 	stw	r3,0(r17)
8111d950:	003ff706 	br	8111d930 <__reset+0xfb0fd930>

8111d954 <_realloc_r>:
8111d954:	defff604 	addi	sp,sp,-40
8111d958:	de00012e 	bgeu	sp,et,8111d960 <_realloc_r+0xc>
8111d95c:	003b68fa 	trap	3
8111d960:	dc800215 	stw	r18,8(sp)
8111d964:	dfc00915 	stw	ra,36(sp)
8111d968:	df000815 	stw	fp,32(sp)
8111d96c:	ddc00715 	stw	r23,28(sp)
8111d970:	dd800615 	stw	r22,24(sp)
8111d974:	dd400515 	stw	r21,20(sp)
8111d978:	dd000415 	stw	r20,16(sp)
8111d97c:	dcc00315 	stw	r19,12(sp)
8111d980:	dc400115 	stw	r17,4(sp)
8111d984:	dc000015 	stw	r16,0(sp)
8111d988:	3025883a 	mov	r18,r6
8111d98c:	2800b726 	beq	r5,zero,8111dc6c <_realloc_r+0x318>
8111d990:	282b883a 	mov	r21,r5
8111d994:	2029883a 	mov	r20,r4
8111d998:	11281f80 	call	811281f8 <__malloc_lock>
8111d99c:	a8bfff17 	ldw	r2,-4(r21)
8111d9a0:	043fff04 	movi	r16,-4
8111d9a4:	90c002c4 	addi	r3,r18,11
8111d9a8:	01000584 	movi	r4,22
8111d9ac:	acfffe04 	addi	r19,r21,-8
8111d9b0:	1420703a 	and	r16,r2,r16
8111d9b4:	20c0332e 	bgeu	r4,r3,8111da84 <_realloc_r+0x130>
8111d9b8:	047ffe04 	movi	r17,-8
8111d9bc:	1c62703a 	and	r17,r3,r17
8111d9c0:	8807883a 	mov	r3,r17
8111d9c4:	88005816 	blt	r17,zero,8111db28 <_realloc_r+0x1d4>
8111d9c8:	8c805736 	bltu	r17,r18,8111db28 <_realloc_r+0x1d4>
8111d9cc:	80c0300e 	bge	r16,r3,8111da90 <_realloc_r+0x13c>
8111d9d0:	07204534 	movhi	fp,33044
8111d9d4:	e73bfa04 	addi	fp,fp,-4120
8111d9d8:	e1c00217 	ldw	r7,8(fp)
8111d9dc:	9c09883a 	add	r4,r19,r16
8111d9e0:	22000117 	ldw	r8,4(r4)
8111d9e4:	21c06326 	beq	r4,r7,8111db74 <_realloc_r+0x220>
8111d9e8:	017fff84 	movi	r5,-2
8111d9ec:	414a703a 	and	r5,r8,r5
8111d9f0:	214b883a 	add	r5,r4,r5
8111d9f4:	29800117 	ldw	r6,4(r5)
8111d9f8:	3180004c 	andi	r6,r6,1
8111d9fc:	30003f26 	beq	r6,zero,8111dafc <_realloc_r+0x1a8>
8111da00:	1080004c 	andi	r2,r2,1
8111da04:	10008326 	beq	r2,zero,8111dc14 <_realloc_r+0x2c0>
8111da08:	900b883a 	mov	r5,r18
8111da0c:	a009883a 	mov	r4,r20
8111da10:	11121680 	call	81112168 <_malloc_r>
8111da14:	1025883a 	mov	r18,r2
8111da18:	10011e26 	beq	r2,zero,8111de94 <_realloc_r+0x540>
8111da1c:	a93fff17 	ldw	r4,-4(r21)
8111da20:	10fffe04 	addi	r3,r2,-8
8111da24:	00bfff84 	movi	r2,-2
8111da28:	2084703a 	and	r2,r4,r2
8111da2c:	9885883a 	add	r2,r19,r2
8111da30:	1880ee26 	beq	r3,r2,8111ddec <_realloc_r+0x498>
8111da34:	81bfff04 	addi	r6,r16,-4
8111da38:	00800904 	movi	r2,36
8111da3c:	1180b836 	bltu	r2,r6,8111dd20 <_realloc_r+0x3cc>
8111da40:	00c004c4 	movi	r3,19
8111da44:	19809636 	bltu	r3,r6,8111dca0 <_realloc_r+0x34c>
8111da48:	9005883a 	mov	r2,r18
8111da4c:	a807883a 	mov	r3,r21
8111da50:	19000017 	ldw	r4,0(r3)
8111da54:	11000015 	stw	r4,0(r2)
8111da58:	19000117 	ldw	r4,4(r3)
8111da5c:	11000115 	stw	r4,4(r2)
8111da60:	18c00217 	ldw	r3,8(r3)
8111da64:	10c00215 	stw	r3,8(r2)
8111da68:	a80b883a 	mov	r5,r21
8111da6c:	a009883a 	mov	r4,r20
8111da70:	111b8c00 	call	8111b8c0 <_free_r>
8111da74:	a009883a 	mov	r4,r20
8111da78:	11283200 	call	81128320 <__malloc_unlock>
8111da7c:	9005883a 	mov	r2,r18
8111da80:	00001206 	br	8111dacc <_realloc_r+0x178>
8111da84:	00c00404 	movi	r3,16
8111da88:	1823883a 	mov	r17,r3
8111da8c:	003fce06 	br	8111d9c8 <__reset+0xfb0fd9c8>
8111da90:	a825883a 	mov	r18,r21
8111da94:	8445c83a 	sub	r2,r16,r17
8111da98:	00c003c4 	movi	r3,15
8111da9c:	18802636 	bltu	r3,r2,8111db38 <_realloc_r+0x1e4>
8111daa0:	99800117 	ldw	r6,4(r19)
8111daa4:	9c07883a 	add	r3,r19,r16
8111daa8:	3180004c 	andi	r6,r6,1
8111daac:	3420b03a 	or	r16,r6,r16
8111dab0:	9c000115 	stw	r16,4(r19)
8111dab4:	18800117 	ldw	r2,4(r3)
8111dab8:	10800054 	ori	r2,r2,1
8111dabc:	18800115 	stw	r2,4(r3)
8111dac0:	a009883a 	mov	r4,r20
8111dac4:	11283200 	call	81128320 <__malloc_unlock>
8111dac8:	9005883a 	mov	r2,r18
8111dacc:	dfc00917 	ldw	ra,36(sp)
8111dad0:	df000817 	ldw	fp,32(sp)
8111dad4:	ddc00717 	ldw	r23,28(sp)
8111dad8:	dd800617 	ldw	r22,24(sp)
8111dadc:	dd400517 	ldw	r21,20(sp)
8111dae0:	dd000417 	ldw	r20,16(sp)
8111dae4:	dcc00317 	ldw	r19,12(sp)
8111dae8:	dc800217 	ldw	r18,8(sp)
8111daec:	dc400117 	ldw	r17,4(sp)
8111daf0:	dc000017 	ldw	r16,0(sp)
8111daf4:	dec00a04 	addi	sp,sp,40
8111daf8:	f800283a 	ret
8111dafc:	017fff04 	movi	r5,-4
8111db00:	414a703a 	and	r5,r8,r5
8111db04:	814d883a 	add	r6,r16,r5
8111db08:	30c01f16 	blt	r6,r3,8111db88 <_realloc_r+0x234>
8111db0c:	20800317 	ldw	r2,12(r4)
8111db10:	20c00217 	ldw	r3,8(r4)
8111db14:	a825883a 	mov	r18,r21
8111db18:	3021883a 	mov	r16,r6
8111db1c:	18800315 	stw	r2,12(r3)
8111db20:	10c00215 	stw	r3,8(r2)
8111db24:	003fdb06 	br	8111da94 <__reset+0xfb0fda94>
8111db28:	00800304 	movi	r2,12
8111db2c:	a0800015 	stw	r2,0(r20)
8111db30:	0005883a 	mov	r2,zero
8111db34:	003fe506 	br	8111dacc <__reset+0xfb0fdacc>
8111db38:	98c00117 	ldw	r3,4(r19)
8111db3c:	9c4b883a 	add	r5,r19,r17
8111db40:	11000054 	ori	r4,r2,1
8111db44:	18c0004c 	andi	r3,r3,1
8111db48:	1c62b03a 	or	r17,r3,r17
8111db4c:	9c400115 	stw	r17,4(r19)
8111db50:	29000115 	stw	r4,4(r5)
8111db54:	2885883a 	add	r2,r5,r2
8111db58:	10c00117 	ldw	r3,4(r2)
8111db5c:	29400204 	addi	r5,r5,8
8111db60:	a009883a 	mov	r4,r20
8111db64:	18c00054 	ori	r3,r3,1
8111db68:	10c00115 	stw	r3,4(r2)
8111db6c:	111b8c00 	call	8111b8c0 <_free_r>
8111db70:	003fd306 	br	8111dac0 <__reset+0xfb0fdac0>
8111db74:	017fff04 	movi	r5,-4
8111db78:	414a703a 	and	r5,r8,r5
8111db7c:	89800404 	addi	r6,r17,16
8111db80:	8151883a 	add	r8,r16,r5
8111db84:	4180590e 	bge	r8,r6,8111dcec <_realloc_r+0x398>
8111db88:	1080004c 	andi	r2,r2,1
8111db8c:	103f9e1e 	bne	r2,zero,8111da08 <__reset+0xfb0fda08>
8111db90:	adbffe17 	ldw	r22,-8(r21)
8111db94:	00bfff04 	movi	r2,-4
8111db98:	9dadc83a 	sub	r22,r19,r22
8111db9c:	b1800117 	ldw	r6,4(r22)
8111dba0:	3084703a 	and	r2,r6,r2
8111dba4:	20002026 	beq	r4,zero,8111dc28 <_realloc_r+0x2d4>
8111dba8:	80af883a 	add	r23,r16,r2
8111dbac:	b96f883a 	add	r23,r23,r5
8111dbb0:	21c05f26 	beq	r4,r7,8111dd30 <_realloc_r+0x3dc>
8111dbb4:	b8c01c16 	blt	r23,r3,8111dc28 <_realloc_r+0x2d4>
8111dbb8:	20800317 	ldw	r2,12(r4)
8111dbbc:	20c00217 	ldw	r3,8(r4)
8111dbc0:	81bfff04 	addi	r6,r16,-4
8111dbc4:	01000904 	movi	r4,36
8111dbc8:	18800315 	stw	r2,12(r3)
8111dbcc:	10c00215 	stw	r3,8(r2)
8111dbd0:	b0c00217 	ldw	r3,8(r22)
8111dbd4:	b0800317 	ldw	r2,12(r22)
8111dbd8:	b4800204 	addi	r18,r22,8
8111dbdc:	18800315 	stw	r2,12(r3)
8111dbe0:	10c00215 	stw	r3,8(r2)
8111dbe4:	21801b36 	bltu	r4,r6,8111dc54 <_realloc_r+0x300>
8111dbe8:	008004c4 	movi	r2,19
8111dbec:	1180352e 	bgeu	r2,r6,8111dcc4 <_realloc_r+0x370>
8111dbf0:	a8800017 	ldw	r2,0(r21)
8111dbf4:	b0800215 	stw	r2,8(r22)
8111dbf8:	a8800117 	ldw	r2,4(r21)
8111dbfc:	b0800315 	stw	r2,12(r22)
8111dc00:	008006c4 	movi	r2,27
8111dc04:	11807f36 	bltu	r2,r6,8111de04 <_realloc_r+0x4b0>
8111dc08:	b0800404 	addi	r2,r22,16
8111dc0c:	ad400204 	addi	r21,r21,8
8111dc10:	00002d06 	br	8111dcc8 <_realloc_r+0x374>
8111dc14:	adbffe17 	ldw	r22,-8(r21)
8111dc18:	00bfff04 	movi	r2,-4
8111dc1c:	9dadc83a 	sub	r22,r19,r22
8111dc20:	b1000117 	ldw	r4,4(r22)
8111dc24:	2084703a 	and	r2,r4,r2
8111dc28:	b03f7726 	beq	r22,zero,8111da08 <__reset+0xfb0fda08>
8111dc2c:	80af883a 	add	r23,r16,r2
8111dc30:	b8ff7516 	blt	r23,r3,8111da08 <__reset+0xfb0fda08>
8111dc34:	b0800317 	ldw	r2,12(r22)
8111dc38:	b0c00217 	ldw	r3,8(r22)
8111dc3c:	81bfff04 	addi	r6,r16,-4
8111dc40:	01000904 	movi	r4,36
8111dc44:	18800315 	stw	r2,12(r3)
8111dc48:	10c00215 	stw	r3,8(r2)
8111dc4c:	b4800204 	addi	r18,r22,8
8111dc50:	21bfe52e 	bgeu	r4,r6,8111dbe8 <__reset+0xfb0fdbe8>
8111dc54:	a80b883a 	mov	r5,r21
8111dc58:	9009883a 	mov	r4,r18
8111dc5c:	111c7340 	call	8111c734 <memmove>
8111dc60:	b821883a 	mov	r16,r23
8111dc64:	b027883a 	mov	r19,r22
8111dc68:	003f8a06 	br	8111da94 <__reset+0xfb0fda94>
8111dc6c:	300b883a 	mov	r5,r6
8111dc70:	dfc00917 	ldw	ra,36(sp)
8111dc74:	df000817 	ldw	fp,32(sp)
8111dc78:	ddc00717 	ldw	r23,28(sp)
8111dc7c:	dd800617 	ldw	r22,24(sp)
8111dc80:	dd400517 	ldw	r21,20(sp)
8111dc84:	dd000417 	ldw	r20,16(sp)
8111dc88:	dcc00317 	ldw	r19,12(sp)
8111dc8c:	dc800217 	ldw	r18,8(sp)
8111dc90:	dc400117 	ldw	r17,4(sp)
8111dc94:	dc000017 	ldw	r16,0(sp)
8111dc98:	dec00a04 	addi	sp,sp,40
8111dc9c:	11121681 	jmpi	81112168 <_malloc_r>
8111dca0:	a8c00017 	ldw	r3,0(r21)
8111dca4:	90c00015 	stw	r3,0(r18)
8111dca8:	a8c00117 	ldw	r3,4(r21)
8111dcac:	90c00115 	stw	r3,4(r18)
8111dcb0:	00c006c4 	movi	r3,27
8111dcb4:	19804536 	bltu	r3,r6,8111ddcc <_realloc_r+0x478>
8111dcb8:	90800204 	addi	r2,r18,8
8111dcbc:	a8c00204 	addi	r3,r21,8
8111dcc0:	003f6306 	br	8111da50 <__reset+0xfb0fda50>
8111dcc4:	9005883a 	mov	r2,r18
8111dcc8:	a8c00017 	ldw	r3,0(r21)
8111dccc:	b821883a 	mov	r16,r23
8111dcd0:	b027883a 	mov	r19,r22
8111dcd4:	10c00015 	stw	r3,0(r2)
8111dcd8:	a8c00117 	ldw	r3,4(r21)
8111dcdc:	10c00115 	stw	r3,4(r2)
8111dce0:	a8c00217 	ldw	r3,8(r21)
8111dce4:	10c00215 	stw	r3,8(r2)
8111dce8:	003f6a06 	br	8111da94 <__reset+0xfb0fda94>
8111dcec:	9c67883a 	add	r19,r19,r17
8111dcf0:	4445c83a 	sub	r2,r8,r17
8111dcf4:	e4c00215 	stw	r19,8(fp)
8111dcf8:	10800054 	ori	r2,r2,1
8111dcfc:	98800115 	stw	r2,4(r19)
8111dd00:	a8bfff17 	ldw	r2,-4(r21)
8111dd04:	a009883a 	mov	r4,r20
8111dd08:	1080004c 	andi	r2,r2,1
8111dd0c:	1462b03a 	or	r17,r2,r17
8111dd10:	ac7fff15 	stw	r17,-4(r21)
8111dd14:	11283200 	call	81128320 <__malloc_unlock>
8111dd18:	a805883a 	mov	r2,r21
8111dd1c:	003f6b06 	br	8111dacc <__reset+0xfb0fdacc>
8111dd20:	a80b883a 	mov	r5,r21
8111dd24:	9009883a 	mov	r4,r18
8111dd28:	111c7340 	call	8111c734 <memmove>
8111dd2c:	003f4e06 	br	8111da68 <__reset+0xfb0fda68>
8111dd30:	89000404 	addi	r4,r17,16
8111dd34:	b93fbc16 	blt	r23,r4,8111dc28 <__reset+0xfb0fdc28>
8111dd38:	b0800317 	ldw	r2,12(r22)
8111dd3c:	b0c00217 	ldw	r3,8(r22)
8111dd40:	81bfff04 	addi	r6,r16,-4
8111dd44:	01000904 	movi	r4,36
8111dd48:	18800315 	stw	r2,12(r3)
8111dd4c:	10c00215 	stw	r3,8(r2)
8111dd50:	b4800204 	addi	r18,r22,8
8111dd54:	21804336 	bltu	r4,r6,8111de64 <_realloc_r+0x510>
8111dd58:	008004c4 	movi	r2,19
8111dd5c:	11803f2e 	bgeu	r2,r6,8111de5c <_realloc_r+0x508>
8111dd60:	a8800017 	ldw	r2,0(r21)
8111dd64:	b0800215 	stw	r2,8(r22)
8111dd68:	a8800117 	ldw	r2,4(r21)
8111dd6c:	b0800315 	stw	r2,12(r22)
8111dd70:	008006c4 	movi	r2,27
8111dd74:	11803f36 	bltu	r2,r6,8111de74 <_realloc_r+0x520>
8111dd78:	b0800404 	addi	r2,r22,16
8111dd7c:	ad400204 	addi	r21,r21,8
8111dd80:	a8c00017 	ldw	r3,0(r21)
8111dd84:	10c00015 	stw	r3,0(r2)
8111dd88:	a8c00117 	ldw	r3,4(r21)
8111dd8c:	10c00115 	stw	r3,4(r2)
8111dd90:	a8c00217 	ldw	r3,8(r21)
8111dd94:	10c00215 	stw	r3,8(r2)
8111dd98:	b447883a 	add	r3,r22,r17
8111dd9c:	bc45c83a 	sub	r2,r23,r17
8111dda0:	e0c00215 	stw	r3,8(fp)
8111dda4:	10800054 	ori	r2,r2,1
8111dda8:	18800115 	stw	r2,4(r3)
8111ddac:	b0800117 	ldw	r2,4(r22)
8111ddb0:	a009883a 	mov	r4,r20
8111ddb4:	1080004c 	andi	r2,r2,1
8111ddb8:	1462b03a 	or	r17,r2,r17
8111ddbc:	b4400115 	stw	r17,4(r22)
8111ddc0:	11283200 	call	81128320 <__malloc_unlock>
8111ddc4:	9005883a 	mov	r2,r18
8111ddc8:	003f4006 	br	8111dacc <__reset+0xfb0fdacc>
8111ddcc:	a8c00217 	ldw	r3,8(r21)
8111ddd0:	90c00215 	stw	r3,8(r18)
8111ddd4:	a8c00317 	ldw	r3,12(r21)
8111ddd8:	90c00315 	stw	r3,12(r18)
8111dddc:	30801126 	beq	r6,r2,8111de24 <_realloc_r+0x4d0>
8111dde0:	90800404 	addi	r2,r18,16
8111dde4:	a8c00404 	addi	r3,r21,16
8111dde8:	003f1906 	br	8111da50 <__reset+0xfb0fda50>
8111ddec:	90ffff17 	ldw	r3,-4(r18)
8111ddf0:	00bfff04 	movi	r2,-4
8111ddf4:	a825883a 	mov	r18,r21
8111ddf8:	1884703a 	and	r2,r3,r2
8111ddfc:	80a1883a 	add	r16,r16,r2
8111de00:	003f2406 	br	8111da94 <__reset+0xfb0fda94>
8111de04:	a8800217 	ldw	r2,8(r21)
8111de08:	b0800415 	stw	r2,16(r22)
8111de0c:	a8800317 	ldw	r2,12(r21)
8111de10:	b0800515 	stw	r2,20(r22)
8111de14:	31000a26 	beq	r6,r4,8111de40 <_realloc_r+0x4ec>
8111de18:	b0800604 	addi	r2,r22,24
8111de1c:	ad400404 	addi	r21,r21,16
8111de20:	003fa906 	br	8111dcc8 <__reset+0xfb0fdcc8>
8111de24:	a9000417 	ldw	r4,16(r21)
8111de28:	90800604 	addi	r2,r18,24
8111de2c:	a8c00604 	addi	r3,r21,24
8111de30:	91000415 	stw	r4,16(r18)
8111de34:	a9000517 	ldw	r4,20(r21)
8111de38:	91000515 	stw	r4,20(r18)
8111de3c:	003f0406 	br	8111da50 <__reset+0xfb0fda50>
8111de40:	a8c00417 	ldw	r3,16(r21)
8111de44:	ad400604 	addi	r21,r21,24
8111de48:	b0800804 	addi	r2,r22,32
8111de4c:	b0c00615 	stw	r3,24(r22)
8111de50:	a8ffff17 	ldw	r3,-4(r21)
8111de54:	b0c00715 	stw	r3,28(r22)
8111de58:	003f9b06 	br	8111dcc8 <__reset+0xfb0fdcc8>
8111de5c:	9005883a 	mov	r2,r18
8111de60:	003fc706 	br	8111dd80 <__reset+0xfb0fdd80>
8111de64:	a80b883a 	mov	r5,r21
8111de68:	9009883a 	mov	r4,r18
8111de6c:	111c7340 	call	8111c734 <memmove>
8111de70:	003fc906 	br	8111dd98 <__reset+0xfb0fdd98>
8111de74:	a8800217 	ldw	r2,8(r21)
8111de78:	b0800415 	stw	r2,16(r22)
8111de7c:	a8800317 	ldw	r2,12(r21)
8111de80:	b0800515 	stw	r2,20(r22)
8111de84:	31000726 	beq	r6,r4,8111dea4 <_realloc_r+0x550>
8111de88:	b0800604 	addi	r2,r22,24
8111de8c:	ad400404 	addi	r21,r21,16
8111de90:	003fbb06 	br	8111dd80 <__reset+0xfb0fdd80>
8111de94:	a009883a 	mov	r4,r20
8111de98:	11283200 	call	81128320 <__malloc_unlock>
8111de9c:	0005883a 	mov	r2,zero
8111dea0:	003f0a06 	br	8111dacc <__reset+0xfb0fdacc>
8111dea4:	a8c00417 	ldw	r3,16(r21)
8111dea8:	ad400604 	addi	r21,r21,24
8111deac:	b0800804 	addi	r2,r22,32
8111deb0:	b0c00615 	stw	r3,24(r22)
8111deb4:	a8ffff17 	ldw	r3,-4(r21)
8111deb8:	b0c00715 	stw	r3,28(r22)
8111debc:	003fb006 	br	8111dd80 <__reset+0xfb0fdd80>

8111dec0 <__fpclassifyd>:
8111dec0:	00a00034 	movhi	r2,32768
8111dec4:	10bfffc4 	addi	r2,r2,-1
8111dec8:	2884703a 	and	r2,r5,r2
8111decc:	10000726 	beq	r2,zero,8111deec <__fpclassifyd+0x2c>
8111ded0:	00fffc34 	movhi	r3,65520
8111ded4:	019ff834 	movhi	r6,32736
8111ded8:	28c7883a 	add	r3,r5,r3
8111dedc:	31bfffc4 	addi	r6,r6,-1
8111dee0:	30c00536 	bltu	r6,r3,8111def8 <__fpclassifyd+0x38>
8111dee4:	00800104 	movi	r2,4
8111dee8:	f800283a 	ret
8111deec:	2000021e 	bne	r4,zero,8111def8 <__fpclassifyd+0x38>
8111def0:	00800084 	movi	r2,2
8111def4:	f800283a 	ret
8111def8:	00dffc34 	movhi	r3,32752
8111defc:	019ff834 	movhi	r6,32736
8111df00:	28cb883a 	add	r5,r5,r3
8111df04:	31bfffc4 	addi	r6,r6,-1
8111df08:	317ff62e 	bgeu	r6,r5,8111dee4 <__reset+0xfb0fdee4>
8111df0c:	01400434 	movhi	r5,16
8111df10:	297fffc4 	addi	r5,r5,-1
8111df14:	28800236 	bltu	r5,r2,8111df20 <__fpclassifyd+0x60>
8111df18:	008000c4 	movi	r2,3
8111df1c:	f800283a 	ret
8111df20:	10c00226 	beq	r2,r3,8111df2c <__fpclassifyd+0x6c>
8111df24:	0005883a 	mov	r2,zero
8111df28:	f800283a 	ret
8111df2c:	2005003a 	cmpeq	r2,r4,zero
8111df30:	f800283a 	ret

8111df34 <__sccl>:
8111df34:	2a000003 	ldbu	r8,0(r5)
8111df38:	00801784 	movi	r2,94
8111df3c:	40802a26 	beq	r8,r2,8111dfe8 <__sccl+0xb4>
8111df40:	29400044 	addi	r5,r5,1
8111df44:	000f883a 	mov	r7,zero
8111df48:	0013883a 	mov	r9,zero
8111df4c:	2007883a 	mov	r3,r4
8111df50:	21804004 	addi	r6,r4,256
8111df54:	19c00005 	stb	r7,0(r3)
8111df58:	18c00044 	addi	r3,r3,1
8111df5c:	19bffd1e 	bne	r3,r6,8111df54 <__reset+0xfb0fdf54>
8111df60:	40001126 	beq	r8,zero,8111dfa8 <__sccl+0x74>
8111df64:	00800044 	movi	r2,1
8111df68:	124fc83a 	sub	r7,r2,r9
8111df6c:	02800b44 	movi	r10,45
8111df70:	02c01744 	movi	r11,93
8111df74:	2205883a 	add	r2,r4,r8
8111df78:	11c00005 	stb	r7,0(r2)
8111df7c:	28800044 	addi	r2,r5,1
8111df80:	28c00003 	ldbu	r3,0(r5)
8111df84:	1a800a26 	beq	r3,r10,8111dfb0 <__sccl+0x7c>
8111df88:	1ac00426 	beq	r3,r11,8111df9c <__sccl+0x68>
8111df8c:	18000426 	beq	r3,zero,8111dfa0 <__sccl+0x6c>
8111df90:	1811883a 	mov	r8,r3
8111df94:	100b883a 	mov	r5,r2
8111df98:	003ff606 	br	8111df74 <__reset+0xfb0fdf74>
8111df9c:	f800283a 	ret
8111dfa0:	2805883a 	mov	r2,r5
8111dfa4:	f800283a 	ret
8111dfa8:	28bfffc4 	addi	r2,r5,-1
8111dfac:	f800283a 	ret
8111dfb0:	12400003 	ldbu	r9,0(r2)
8111dfb4:	4ac01126 	beq	r9,r11,8111dffc <__sccl+0xc8>
8111dfb8:	4a001016 	blt	r9,r8,8111dffc <__sccl+0xc8>
8111dfbc:	41800044 	addi	r6,r8,1
8111dfc0:	29400084 	addi	r5,r5,2
8111dfc4:	2187883a 	add	r3,r4,r6
8111dfc8:	00000106 	br	8111dfd0 <__sccl+0x9c>
8111dfcc:	31800044 	addi	r6,r6,1
8111dfd0:	19c00005 	stb	r7,0(r3)
8111dfd4:	3011883a 	mov	r8,r6
8111dfd8:	18c00044 	addi	r3,r3,1
8111dfdc:	327ffb16 	blt	r6,r9,8111dfcc <__reset+0xfb0fdfcc>
8111dfe0:	10800084 	addi	r2,r2,2
8111dfe4:	003fe606 	br	8111df80 <__reset+0xfb0fdf80>
8111dfe8:	2a000043 	ldbu	r8,1(r5)
8111dfec:	01c00044 	movi	r7,1
8111dff0:	29400084 	addi	r5,r5,2
8111dff4:	02400044 	movi	r9,1
8111dff8:	003fd406 	br	8111df4c <__reset+0xfb0fdf4c>
8111dffc:	5011883a 	mov	r8,r10
8111e000:	003fe406 	br	8111df94 <__reset+0xfb0fdf94>

8111e004 <nanf>:
8111e004:	009ff034 	movhi	r2,32704
8111e008:	f800283a 	ret

8111e00c <strcmp>:
8111e00c:	2144b03a 	or	r2,r4,r5
8111e010:	108000cc 	andi	r2,r2,3
8111e014:	1000171e 	bne	r2,zero,8111e074 <strcmp+0x68>
8111e018:	20800017 	ldw	r2,0(r4)
8111e01c:	28c00017 	ldw	r3,0(r5)
8111e020:	10c0141e 	bne	r2,r3,8111e074 <strcmp+0x68>
8111e024:	027fbff4 	movhi	r9,65279
8111e028:	4a7fbfc4 	addi	r9,r9,-257
8111e02c:	0086303a 	nor	r3,zero,r2
8111e030:	02202074 	movhi	r8,32897
8111e034:	1245883a 	add	r2,r2,r9
8111e038:	42202004 	addi	r8,r8,-32640
8111e03c:	10c4703a 	and	r2,r2,r3
8111e040:	1204703a 	and	r2,r2,r8
8111e044:	10000226 	beq	r2,zero,8111e050 <strcmp+0x44>
8111e048:	00002306 	br	8111e0d8 <strcmp+0xcc>
8111e04c:	1000221e 	bne	r2,zero,8111e0d8 <strcmp+0xcc>
8111e050:	21000104 	addi	r4,r4,4
8111e054:	20c00017 	ldw	r3,0(r4)
8111e058:	29400104 	addi	r5,r5,4
8111e05c:	29800017 	ldw	r6,0(r5)
8111e060:	1a4f883a 	add	r7,r3,r9
8111e064:	00c4303a 	nor	r2,zero,r3
8111e068:	3884703a 	and	r2,r7,r2
8111e06c:	1204703a 	and	r2,r2,r8
8111e070:	19bff626 	beq	r3,r6,8111e04c <__reset+0xfb0fe04c>
8111e074:	20800003 	ldbu	r2,0(r4)
8111e078:	10c03fcc 	andi	r3,r2,255
8111e07c:	18c0201c 	xori	r3,r3,128
8111e080:	18ffe004 	addi	r3,r3,-128
8111e084:	18000c26 	beq	r3,zero,8111e0b8 <strcmp+0xac>
8111e088:	29800007 	ldb	r6,0(r5)
8111e08c:	19800326 	beq	r3,r6,8111e09c <strcmp+0x90>
8111e090:	00001306 	br	8111e0e0 <strcmp+0xd4>
8111e094:	29800007 	ldb	r6,0(r5)
8111e098:	11800b1e 	bne	r2,r6,8111e0c8 <strcmp+0xbc>
8111e09c:	21000044 	addi	r4,r4,1
8111e0a0:	20c00003 	ldbu	r3,0(r4)
8111e0a4:	29400044 	addi	r5,r5,1
8111e0a8:	18803fcc 	andi	r2,r3,255
8111e0ac:	1080201c 	xori	r2,r2,128
8111e0b0:	10bfe004 	addi	r2,r2,-128
8111e0b4:	103ff71e 	bne	r2,zero,8111e094 <__reset+0xfb0fe094>
8111e0b8:	0007883a 	mov	r3,zero
8111e0bc:	28800003 	ldbu	r2,0(r5)
8111e0c0:	1885c83a 	sub	r2,r3,r2
8111e0c4:	f800283a 	ret
8111e0c8:	28800003 	ldbu	r2,0(r5)
8111e0cc:	18c03fcc 	andi	r3,r3,255
8111e0d0:	1885c83a 	sub	r2,r3,r2
8111e0d4:	f800283a 	ret
8111e0d8:	0005883a 	mov	r2,zero
8111e0dc:	f800283a 	ret
8111e0e0:	10c03fcc 	andi	r3,r2,255
8111e0e4:	003ff506 	br	8111e0bc <__reset+0xfb0fe0bc>

8111e0e8 <sulp>:
8111e0e8:	defffd04 	addi	sp,sp,-12
8111e0ec:	de00012e 	bgeu	sp,et,8111e0f4 <sulp+0xc>
8111e0f0:	003b68fa 	trap	3
8111e0f4:	dc400115 	stw	r17,4(sp)
8111e0f8:	3023883a 	mov	r17,r6
8111e0fc:	dc000015 	stw	r16,0(sp)
8111e100:	dfc00215 	stw	ra,8(sp)
8111e104:	2821883a 	mov	r16,r5
8111e108:	111d3f40 	call	8111d3f4 <__ulp>
8111e10c:	88000c26 	beq	r17,zero,8111e140 <sulp+0x58>
8111e110:	841ffc2c 	andhi	r16,r16,32752
8111e114:	8020d53a 	srli	r16,r16,20
8111e118:	01c01ac4 	movi	r7,107
8111e11c:	3c21c83a 	sub	r16,r7,r16
8111e120:	0400070e 	bge	zero,r16,8111e140 <sulp+0x58>
8111e124:	8020953a 	slli	r16,r16,20
8111e128:	01cffc34 	movhi	r7,16368
8111e12c:	000d883a 	mov	r6,zero
8111e130:	81cf883a 	add	r7,r16,r7
8111e134:	1009883a 	mov	r4,r2
8111e138:	180b883a 	mov	r5,r3
8111e13c:	1110ddc0 	call	81110ddc <__muldf3>
8111e140:	dfc00217 	ldw	ra,8(sp)
8111e144:	dc400117 	ldw	r17,4(sp)
8111e148:	dc000017 	ldw	r16,0(sp)
8111e14c:	dec00304 	addi	sp,sp,12
8111e150:	f800283a 	ret

8111e154 <_strtod_r>:
8111e154:	deffe204 	addi	sp,sp,-120
8111e158:	de00012e 	bgeu	sp,et,8111e160 <_strtod_r+0xc>
8111e15c:	003b68fa 	trap	3
8111e160:	ddc01b15 	stw	r23,108(sp)
8111e164:	dd001815 	stw	r20,96(sp)
8111e168:	dc801615 	stw	r18,88(sp)
8111e16c:	dc401515 	stw	r17,84(sp)
8111e170:	dc001415 	stw	r16,80(sp)
8111e174:	d9400615 	stw	r5,24(sp)
8111e178:	dfc01d15 	stw	ra,116(sp)
8111e17c:	df001c15 	stw	fp,112(sp)
8111e180:	dd801a15 	stw	r22,104(sp)
8111e184:	dd401915 	stw	r21,100(sp)
8111e188:	dcc01715 	stw	r19,92(sp)
8111e18c:	2021883a 	mov	r16,r4
8111e190:	d8000515 	stw	zero,20(sp)
8111e194:	2809883a 	mov	r4,r5
8111e198:	20800003 	ldbu	r2,0(r4)
8111e19c:	01e044b4 	movhi	r7,33042
8111e1a0:	282f883a 	mov	r23,r5
8111e1a4:	10c03fcc 	andi	r3,r2,255
8111e1a8:	01400b44 	movi	r5,45
8111e1ac:	39f87404 	addi	r7,r7,-7728
8111e1b0:	3029883a 	mov	r20,r6
8111e1b4:	0025883a 	mov	r18,zero
8111e1b8:	0023883a 	mov	r17,zero
8111e1bc:	28c0ba36 	bltu	r5,r3,8111e4a8 <_strtod_r+0x354>
8111e1c0:	180690ba 	slli	r3,r3,2
8111e1c4:	19c7883a 	add	r3,r3,r7
8111e1c8:	18c00017 	ldw	r3,0(r3)
8111e1cc:	1800683a 	jmp	r3
8111e1d0:	8111e290 	cmplti	r4,r16,18314
8111e1d4:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1d8:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1dc:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1e0:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1e4:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1e8:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1ec:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1f0:	8111e4a8 	cmpgeui	r4,r16,18322
8111e1f4:	8111e494 	ori	r4,r16,18322
8111e1f8:	8111e494 	ori	r4,r16,18322
8111e1fc:	8111e494 	ori	r4,r16,18322
8111e200:	8111e494 	ori	r4,r16,18322
8111e204:	8111e494 	ori	r4,r16,18322
8111e208:	8111e4a8 	cmpgeui	r4,r16,18322
8111e20c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e210:	8111e4a8 	cmpgeui	r4,r16,18322
8111e214:	8111e4a8 	cmpgeui	r4,r16,18322
8111e218:	8111e4a8 	cmpgeui	r4,r16,18322
8111e21c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e220:	8111e4a8 	cmpgeui	r4,r16,18322
8111e224:	8111e4a8 	cmpgeui	r4,r16,18322
8111e228:	8111e4a8 	cmpgeui	r4,r16,18322
8111e22c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e230:	8111e4a8 	cmpgeui	r4,r16,18322
8111e234:	8111e4a8 	cmpgeui	r4,r16,18322
8111e238:	8111e4a8 	cmpgeui	r4,r16,18322
8111e23c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e240:	8111e4a8 	cmpgeui	r4,r16,18322
8111e244:	8111e4a8 	cmpgeui	r4,r16,18322
8111e248:	8111e4a8 	cmpgeui	r4,r16,18322
8111e24c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e250:	8111e494 	ori	r4,r16,18322
8111e254:	8111e4a8 	cmpgeui	r4,r16,18322
8111e258:	8111e4a8 	cmpgeui	r4,r16,18322
8111e25c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e260:	8111e4a8 	cmpgeui	r4,r16,18322
8111e264:	8111e4a8 	cmpgeui	r4,r16,18322
8111e268:	8111e4a8 	cmpgeui	r4,r16,18322
8111e26c:	8111e4a8 	cmpgeui	r4,r16,18322
8111e270:	8111e4a8 	cmpgeui	r4,r16,18322
8111e274:	8111e4a8 	cmpgeui	r4,r16,18322
8111e278:	8111e4a8 	cmpgeui	r4,r16,18322
8111e27c:	8111e2e8 	cmpgeui	r4,r16,18315
8111e280:	8111e4a8 	cmpgeui	r4,r16,18322
8111e284:	8111e488 	cmpgei	r4,r16,18322
8111e288:	00801244 	movi	r2,73
8111e28c:	88843526 	beq	r17,r2,8111f364 <_strtod_r+0x1210>
8111e290:	002b883a 	mov	r21,zero
8111e294:	002d883a 	mov	r22,zero
8111e298:	a0000526 	beq	r20,zero,8111e2b0 <_strtod_r+0x15c>
8111e29c:	d8000715 	stw	zero,28(sp)
8111e2a0:	a5c00015 	stw	r23,0(r20)
8111e2a4:	d9000717 	ldw	r4,28(sp)
8111e2a8:	20000126 	beq	r4,zero,8111e2b0 <_strtod_r+0x15c>
8111e2ac:	b5a0003c 	xorhi	r22,r22,32768
8111e2b0:	a805883a 	mov	r2,r21
8111e2b4:	b007883a 	mov	r3,r22
8111e2b8:	dfc01d17 	ldw	ra,116(sp)
8111e2bc:	df001c17 	ldw	fp,112(sp)
8111e2c0:	ddc01b17 	ldw	r23,108(sp)
8111e2c4:	dd801a17 	ldw	r22,104(sp)
8111e2c8:	dd401917 	ldw	r21,100(sp)
8111e2cc:	dd001817 	ldw	r20,96(sp)
8111e2d0:	dcc01717 	ldw	r19,92(sp)
8111e2d4:	dc801617 	ldw	r18,88(sp)
8111e2d8:	dc401517 	ldw	r17,84(sp)
8111e2dc:	dc001417 	ldw	r16,80(sp)
8111e2e0:	dec01e04 	addi	sp,sp,120
8111e2e4:	f800283a 	ret
8111e2e8:	d8000715 	stw	zero,28(sp)
8111e2ec:	24c00044 	addi	r19,r4,1
8111e2f0:	dcc00615 	stw	r19,24(sp)
8111e2f4:	20800043 	ldbu	r2,1(r4)
8111e2f8:	10c03fcc 	andi	r3,r2,255
8111e2fc:	18c0201c 	xori	r3,r3,128
8111e300:	18ffe004 	addi	r3,r3,-128
8111e304:	183fe226 	beq	r3,zero,8111e290 <__reset+0xfb0fe290>
8111e308:	11403fcc 	andi	r5,r2,255
8111e30c:	2940201c 	xori	r5,r5,128
8111e310:	297fe004 	addi	r5,r5,-128
8111e314:	00c00c04 	movi	r3,48
8111e318:	28c0e526 	beq	r5,r3,8111e6b0 <_strtod_r+0x55c>
8111e31c:	dcc00815 	stw	r19,32(sp)
8111e320:	0025883a 	mov	r18,zero
8111e324:	10fff404 	addi	r3,r2,-48
8111e328:	18c03fcc 	andi	r3,r3,255
8111e32c:	01000244 	movi	r4,9
8111e330:	20c37536 	bltu	r4,r3,8111f108 <_strtod_r+0xfb4>
8111e334:	dd400817 	ldw	r21,32(sp)
8111e338:	0027883a 	mov	r19,zero
8111e33c:	0039883a 	mov	fp,zero
8111e340:	002d883a 	mov	r22,zero
8111e344:	01400204 	movi	r5,8
8111e348:	2d805a16 	blt	r5,r22,8111e4b4 <_strtod_r+0x360>
8111e34c:	e70002a4 	muli	fp,fp,10
8111e350:	10c03fcc 	andi	r3,r2,255
8111e354:	18c0201c 	xori	r3,r3,128
8111e358:	18ffe004 	addi	r3,r3,-128
8111e35c:	e0f9883a 	add	fp,fp,r3
8111e360:	e73ff404 	addi	fp,fp,-48
8111e364:	ad400044 	addi	r21,r21,1
8111e368:	dd400615 	stw	r21,24(sp)
8111e36c:	a8800003 	ldbu	r2,0(r21)
8111e370:	b5800044 	addi	r22,r22,1
8111e374:	10fff404 	addi	r3,r2,-48
8111e378:	18c03fcc 	andi	r3,r3,255
8111e37c:	20fff22e 	bgeu	r4,r3,8111e348 <__reset+0xfb0fe348>
8111e380:	14403fcc 	andi	r17,r2,255
8111e384:	8c40201c 	xori	r17,r17,128
8111e388:	8c7fe004 	addi	r17,r17,-128
8111e38c:	8009883a 	mov	r4,r16
8111e390:	111c3740 	call	8111c374 <_localeconv_r>
8111e394:	11400017 	ldw	r5,0(r2)
8111e398:	8009883a 	mov	r4,r16
8111e39c:	d9401315 	stw	r5,76(sp)
8111e3a0:	111c3740 	call	8111c374 <_localeconv_r>
8111e3a4:	11000017 	ldw	r4,0(r2)
8111e3a8:	11132f80 	call	811132f8 <strlen>
8111e3ac:	d9401317 	ldw	r5,76(sp)
8111e3b0:	100d883a 	mov	r6,r2
8111e3b4:	a809883a 	mov	r4,r21
8111e3b8:	1123d440 	call	81123d44 <strncmp>
8111e3bc:	1000ce26 	beq	r2,zero,8111e6f8 <_strtod_r+0x5a4>
8111e3c0:	b013883a 	mov	r9,r22
8111e3c4:	000b883a 	mov	r5,zero
8111e3c8:	0015883a 	mov	r10,zero
8111e3cc:	0017883a 	mov	r11,zero
8111e3d0:	00801944 	movi	r2,101
8111e3d4:	88807826 	beq	r17,r2,8111e5b8 <_strtod_r+0x464>
8111e3d8:	00801144 	movi	r2,69
8111e3dc:	88807626 	beq	r17,r2,8111e5b8 <_strtod_r+0x464>
8111e3e0:	002b883a 	mov	r21,zero
8111e3e4:	48003d1e 	bne	r9,zero,8111e4dc <_strtod_r+0x388>
8111e3e8:	2800391e 	bne	r5,zero,8111e4d0 <_strtod_r+0x37c>
8111e3ec:	9000381e 	bne	r18,zero,8111e4d0 <_strtod_r+0x37c>
8111e3f0:	583fa71e 	bne	r11,zero,8111e290 <__reset+0xfb0fe290>
8111e3f4:	00801384 	movi	r2,78
8111e3f8:	88800526 	beq	r17,r2,8111e410 <_strtod_r+0x2bc>
8111e3fc:	147fa20e 	bge	r2,r17,8111e288 <__reset+0xfb0fe288>
8111e400:	00801a44 	movi	r2,105
8111e404:	8883d726 	beq	r17,r2,8111f364 <_strtod_r+0x1210>
8111e408:	00801b84 	movi	r2,110
8111e40c:	88bfa01e 	bne	r17,r2,8111e290 <__reset+0xfb0fe290>
8111e410:	01604534 	movhi	r5,33044
8111e414:	d9000617 	ldw	r4,24(sp)
8111e418:	29798904 	addi	r5,r5,-6620
8111e41c:	01c00644 	movi	r7,25
8111e420:	00000b06 	br	8111e450 <_strtod_r+0x2fc>
8111e424:	21000044 	addi	r4,r4,1
8111e428:	20800003 	ldbu	r2,0(r4)
8111e42c:	10ffefc4 	addi	r3,r2,-65
8111e430:	10803fcc 	andi	r2,r2,255
8111e434:	1080201c 	xori	r2,r2,128
8111e438:	18c03fcc 	andi	r3,r3,255
8111e43c:	10bfe004 	addi	r2,r2,-128
8111e440:	38c00136 	bltu	r7,r3,8111e448 <_strtod_r+0x2f4>
8111e444:	10800804 	addi	r2,r2,32
8111e448:	29400044 	addi	r5,r5,1
8111e44c:	11bf901e 	bne	r2,r6,8111e290 <__reset+0xfb0fe290>
8111e450:	29800007 	ldb	r6,0(r5)
8111e454:	303ff31e 	bne	r6,zero,8111e424 <__reset+0xfb0fe424>
8111e458:	20800044 	addi	r2,r4,1
8111e45c:	d8800615 	stw	r2,24(sp)
8111e460:	20c00047 	ldb	r3,1(r4)
8111e464:	00800a04 	movi	r2,40
8111e468:	18849d26 	beq	r3,r2,8111f6e0 <_strtod_r+0x158c>
8111e46c:	047ffe34 	movhi	r17,65528
8111e470:	0025883a 	mov	r18,zero
8111e474:	902b883a 	mov	r21,r18
8111e478:	882d883a 	mov	r22,r17
8111e47c:	a03f8926 	beq	r20,zero,8111e2a4 <__reset+0xfb0fe2a4>
8111e480:	ddc00617 	ldw	r23,24(sp)
8111e484:	003f8606 	br	8111e2a0 <__reset+0xfb0fe2a0>
8111e488:	00800044 	movi	r2,1
8111e48c:	d8800715 	stw	r2,28(sp)
8111e490:	003f9606 	br	8111e2ec <__reset+0xfb0fe2ec>
8111e494:	21000044 	addi	r4,r4,1
8111e498:	d9000615 	stw	r4,24(sp)
8111e49c:	20800003 	ldbu	r2,0(r4)
8111e4a0:	10c03fcc 	andi	r3,r2,255
8111e4a4:	28ff462e 	bgeu	r5,r3,8111e1c0 <__reset+0xfb0fe1c0>
8111e4a8:	2027883a 	mov	r19,r4
8111e4ac:	d8000715 	stw	zero,28(sp)
8111e4b0:	003f9506 	br	8111e308 <__reset+0xfb0fe308>
8111e4b4:	9cc002a4 	muli	r19,r19,10
8111e4b8:	10803fcc 	andi	r2,r2,255
8111e4bc:	1080201c 	xori	r2,r2,128
8111e4c0:	10bfe004 	addi	r2,r2,-128
8111e4c4:	9885883a 	add	r2,r19,r2
8111e4c8:	14fff404 	addi	r19,r2,-48
8111e4cc:	003fa506 	br	8111e364 <__reset+0xfb0fe364>
8111e4d0:	002b883a 	mov	r21,zero
8111e4d4:	002d883a 	mov	r22,zero
8111e4d8:	003fe806 	br	8111e47c <__reset+0xfb0fe47c>
8111e4dc:	aaabc83a 	sub	r21,r21,r10
8111e4e0:	b000011e 	bne	r22,zero,8111e4e8 <_strtod_r+0x394>
8111e4e4:	482d883a 	mov	r22,r9
8111e4e8:	00800404 	movi	r2,16
8111e4ec:	482f883a 	mov	r23,r9
8111e4f0:	1240010e 	bge	r2,r9,8111e4f8 <_strtod_r+0x3a4>
8111e4f4:	102f883a 	mov	r23,r2
8111e4f8:	e009883a 	mov	r4,fp
8111e4fc:	da401315 	stw	r9,76(sp)
8111e500:	1126ec40 	call	81126ec4 <__floatunsidf>
8111e504:	1025883a 	mov	r18,r2
8111e508:	00800244 	movi	r2,9
8111e50c:	1823883a 	mov	r17,r3
8111e510:	da401317 	ldw	r9,76(sp)
8111e514:	15c0160e 	bge	r2,r23,8111e570 <_strtod_r+0x41c>
8111e518:	b8bffdc4 	addi	r2,r23,-9
8111e51c:	100490fa 	slli	r2,r2,3
8111e520:	180b883a 	mov	r5,r3
8111e524:	00e04534 	movhi	r3,33044
8111e528:	18f95404 	addi	r3,r3,-6832
8111e52c:	1885883a 	add	r2,r3,r2
8111e530:	11800017 	ldw	r6,0(r2)
8111e534:	11c00117 	ldw	r7,4(r2)
8111e538:	9009883a 	mov	r4,r18
8111e53c:	1110ddc0 	call	81110ddc <__muldf3>
8111e540:	9809883a 	mov	r4,r19
8111e544:	1025883a 	mov	r18,r2
8111e548:	1823883a 	mov	r17,r3
8111e54c:	1126ec40 	call	81126ec4 <__floatunsidf>
8111e550:	9009883a 	mov	r4,r18
8111e554:	880b883a 	mov	r5,r17
8111e558:	100d883a 	mov	r6,r2
8111e55c:	180f883a 	mov	r7,r3
8111e560:	11250600 	call	81125060 <__adddf3>
8111e564:	da401317 	ldw	r9,76(sp)
8111e568:	1025883a 	mov	r18,r2
8111e56c:	1823883a 	mov	r17,r3
8111e570:	008003c4 	movi	r2,15
8111e574:	12407b16 	blt	r2,r9,8111e764 <_strtod_r+0x610>
8111e578:	a83fbe26 	beq	r21,zero,8111e474 <__reset+0xfb0fe474>
8111e57c:	0543670e 	bge	zero,r21,8111f31c <_strtod_r+0x11c8>
8111e580:	00c00584 	movi	r3,22
8111e584:	1d42e816 	blt	r3,r21,8111f128 <_strtod_r+0xfd4>
8111e588:	a82a90fa 	slli	r21,r21,3
8111e58c:	00a04534 	movhi	r2,33044
8111e590:	10b95404 	addi	r2,r2,-6832
8111e594:	1545883a 	add	r2,r2,r21
8111e598:	11000017 	ldw	r4,0(r2)
8111e59c:	11400117 	ldw	r5,4(r2)
8111e5a0:	900d883a 	mov	r6,r18
8111e5a4:	880f883a 	mov	r7,r17
8111e5a8:	1110ddc0 	call	81110ddc <__muldf3>
8111e5ac:	102b883a 	mov	r21,r2
8111e5b0:	182d883a 	mov	r22,r3
8111e5b4:	003fb106 	br	8111e47c <__reset+0xfb0fe47c>
8111e5b8:	4801b526 	beq	r9,zero,8111ec90 <_strtod_r+0xb3c>
8111e5bc:	ddc00617 	ldw	r23,24(sp)
8111e5c0:	00c00ac4 	movi	r3,43
8111e5c4:	b8800044 	addi	r2,r23,1
8111e5c8:	d8800615 	stw	r2,24(sp)
8111e5cc:	b8800047 	ldb	r2,1(r23)
8111e5d0:	10c1e926 	beq	r2,r3,8111ed78 <_strtod_r+0xc24>
8111e5d4:	00c00b44 	movi	r3,45
8111e5d8:	10c1ec26 	beq	r2,r3,8111ed8c <_strtod_r+0xc38>
8111e5dc:	1023883a 	mov	r17,r2
8111e5e0:	0019883a 	mov	r12,zero
8111e5e4:	88bff404 	addi	r2,r17,-48
8111e5e8:	00c00244 	movi	r3,9
8111e5ec:	1881b736 	bltu	r3,r2,8111eccc <_strtod_r+0xb78>
8111e5f0:	00800c04 	movi	r2,48
8111e5f4:	8880071e 	bne	r17,r2,8111e614 <_strtod_r+0x4c0>
8111e5f8:	d8800617 	ldw	r2,24(sp)
8111e5fc:	8807883a 	mov	r3,r17
8111e600:	10800044 	addi	r2,r2,1
8111e604:	d8800615 	stw	r2,24(sp)
8111e608:	14400007 	ldb	r17,0(r2)
8111e60c:	10800044 	addi	r2,r2,1
8111e610:	88fffc26 	beq	r17,r3,8111e604 <__reset+0xfb0fe604>
8111e614:	88bff3c4 	addi	r2,r17,-49
8111e618:	00c00204 	movi	r3,8
8111e61c:	18bf7036 	bltu	r3,r2,8111e3e0 <__reset+0xfb0fe3e0>
8111e620:	db800617 	ldw	r14,24(sp)
8111e624:	88bff404 	addi	r2,r17,-48
8111e628:	03400244 	movi	r13,9
8111e62c:	71c00044 	addi	r7,r14,1
8111e630:	d9c00615 	stw	r7,24(sp)
8111e634:	74400043 	ldbu	r17,1(r14)
8111e638:	88fff404 	addi	r3,r17,-48
8111e63c:	8c403fcc 	andi	r17,r17,255
8111e640:	8c40201c 	xori	r17,r17,128
8111e644:	18c03fcc 	andi	r3,r3,255
8111e648:	8c7fe004 	addi	r17,r17,-128
8111e64c:	68c00e36 	bltu	r13,r3,8111e688 <_strtod_r+0x534>
8111e650:	71000084 	addi	r4,r14,2
8111e654:	d9000615 	stw	r4,24(sp)
8111e658:	108002a4 	muli	r2,r2,10
8111e65c:	21800003 	ldbu	r6,0(r4)
8111e660:	200f883a 	mov	r7,r4
8111e664:	1463883a 	add	r17,r2,r17
8111e668:	30fff404 	addi	r3,r6,-48
8111e66c:	88bff404 	addi	r2,r17,-48
8111e670:	34403fcc 	andi	r17,r6,255
8111e674:	8c40201c 	xori	r17,r17,128
8111e678:	18c03fcc 	andi	r3,r3,255
8111e67c:	8c7fe004 	addi	r17,r17,-128
8111e680:	21000044 	addi	r4,r4,1
8111e684:	68fff32e 	bgeu	r13,r3,8111e654 <__reset+0xfb0fe654>
8111e688:	3b8fc83a 	sub	r7,r7,r14
8111e68c:	00c00204 	movi	r3,8
8111e690:	19c29716 	blt	r3,r7,8111f0f0 <_strtod_r+0xf9c>
8111e694:	102b883a 	mov	r21,r2
8111e698:	009387c4 	movi	r2,19999
8111e69c:	1540010e 	bge	r2,r21,8111e6a4 <_strtod_r+0x550>
8111e6a0:	102b883a 	mov	r21,r2
8111e6a4:	603f4f26 	beq	r12,zero,8111e3e4 <__reset+0xfb0fe3e4>
8111e6a8:	056bc83a 	sub	r21,zero,r21
8111e6ac:	003f4d06 	br	8111e3e4 <__reset+0xfb0fe3e4>
8111e6b0:	98800047 	ldb	r2,1(r19)
8111e6b4:	00c01604 	movi	r3,88
8111e6b8:	10c1de26 	beq	r2,r3,8111ee34 <_strtod_r+0xce0>
8111e6bc:	00c01e04 	movi	r3,120
8111e6c0:	10c1dc26 	beq	r2,r3,8111ee34 <_strtod_r+0xce0>
8111e6c4:	98c00044 	addi	r3,r19,1
8111e6c8:	1827883a 	mov	r19,r3
8111e6cc:	d8c00615 	stw	r3,24(sp)
8111e6d0:	18c00044 	addi	r3,r3,1
8111e6d4:	18bfffc3 	ldbu	r2,-1(r3)
8111e6d8:	11003fcc 	andi	r4,r2,255
8111e6dc:	2100201c 	xori	r4,r4,128
8111e6e0:	213fe004 	addi	r4,r4,-128
8111e6e4:	217ff826 	beq	r4,r5,8111e6c8 <__reset+0xfb0fe6c8>
8111e6e8:	203f7926 	beq	r4,zero,8111e4d0 <__reset+0xfb0fe4d0>
8111e6ec:	dcc00815 	stw	r19,32(sp)
8111e6f0:	04800044 	movi	r18,1
8111e6f4:	003f0b06 	br	8111e324 <__reset+0xfb0fe324>
8111e6f8:	8009883a 	mov	r4,r16
8111e6fc:	111c3740 	call	8111c374 <_localeconv_r>
8111e700:	11000017 	ldw	r4,0(r2)
8111e704:	11132f80 	call	811132f8 <strlen>
8111e708:	d8c00617 	ldw	r3,24(sp)
8111e70c:	1885883a 	add	r2,r3,r2
8111e710:	d8800615 	stw	r2,24(sp)
8111e714:	14400007 	ldb	r17,0(r2)
8111e718:	b001881e 	bne	r22,zero,8111ed3c <_strtod_r+0xbe8>
8111e71c:	00c00c04 	movi	r3,48
8111e720:	88c3391e 	bne	r17,r3,8111f408 <_strtod_r+0x12b4>
8111e724:	10c00044 	addi	r3,r2,1
8111e728:	8809883a 	mov	r4,r17
8111e72c:	d8c00615 	stw	r3,24(sp)
8111e730:	1c400007 	ldb	r17,0(r3)
8111e734:	188bc83a 	sub	r5,r3,r2
8111e738:	18c00044 	addi	r3,r3,1
8111e73c:	893ffb26 	beq	r17,r4,8111e72c <__reset+0xfb0fe72c>
8111e740:	88bff3c4 	addi	r2,r17,-49
8111e744:	00c00204 	movi	r3,8
8111e748:	1882e72e 	bgeu	r3,r2,8111f2e8 <_strtod_r+0x1194>
8111e74c:	00801944 	movi	r2,101
8111e750:	88814d26 	beq	r17,r2,8111ec88 <_strtod_r+0xb34>
8111e754:	0013883a 	mov	r9,zero
8111e758:	0015883a 	mov	r10,zero
8111e75c:	02c00044 	movi	r11,1
8111e760:	003f1d06 	br	8111e3d8 <__reset+0xfb0fe3d8>
8111e764:	4defc83a 	sub	r23,r9,r23
8111e768:	bd6f883a 	add	r23,r23,r21
8111e76c:	05c21e0e 	bge	zero,r23,8111efe8 <_strtod_r+0xe94>
8111e770:	b88003cc 	andi	r2,r23,15
8111e774:	10000d26 	beq	r2,zero,8111e7ac <_strtod_r+0x658>
8111e778:	100490fa 	slli	r2,r2,3
8111e77c:	00e04534 	movhi	r3,33044
8111e780:	18f95404 	addi	r3,r3,-6832
8111e784:	1885883a 	add	r2,r3,r2
8111e788:	11000017 	ldw	r4,0(r2)
8111e78c:	11400117 	ldw	r5,4(r2)
8111e790:	900d883a 	mov	r6,r18
8111e794:	880f883a 	mov	r7,r17
8111e798:	da401315 	stw	r9,76(sp)
8111e79c:	1110ddc0 	call	81110ddc <__muldf3>
8111e7a0:	da401317 	ldw	r9,76(sp)
8111e7a4:	1025883a 	mov	r18,r2
8111e7a8:	1823883a 	mov	r17,r3
8111e7ac:	023ffc04 	movi	r8,-16
8111e7b0:	ba10703a 	and	r8,r23,r8
8111e7b4:	40003c26 	beq	r8,zero,8111e8a8 <_strtod_r+0x754>
8111e7b8:	00804d04 	movi	r2,308
8111e7bc:	1201cd16 	blt	r2,r8,8111eef4 <_strtod_r+0xda0>
8111e7c0:	4011d13a 	srai	r8,r8,4
8111e7c4:	03000044 	movi	r12,1
8111e7c8:	62037c0e 	bge	r12,r8,8111f5bc <_strtod_r+0x1468>
8111e7cc:	01204534 	movhi	r4,33044
8111e7d0:	21394a04 	addi	r4,r4,-6872
8111e7d4:	2015883a 	mov	r10,r4
8111e7d8:	0027883a 	mov	r19,zero
8111e7dc:	d9000915 	stw	r4,36(sp)
8111e7e0:	9005883a 	mov	r2,r18
8111e7e4:	8807883a 	mov	r3,r17
8111e7e8:	dc000c15 	stw	r16,48(sp)
8111e7ec:	dc800e15 	stw	r18,56(sp)
8111e7f0:	9821883a 	mov	r16,r19
8111e7f4:	0009883a 	mov	r4,zero
8111e7f8:	8827883a 	mov	r19,r17
8111e7fc:	602f883a 	mov	r23,r12
8111e800:	da400a15 	stw	r9,40(sp)
8111e804:	5025883a 	mov	r18,r10
8111e808:	4023883a 	mov	r17,r8
8111e80c:	8980004c 	andi	r6,r17,1
8111e810:	30000626 	beq	r6,zero,8111e82c <_strtod_r+0x6d8>
8111e814:	91800017 	ldw	r6,0(r18)
8111e818:	91c00117 	ldw	r7,4(r18)
8111e81c:	1009883a 	mov	r4,r2
8111e820:	180b883a 	mov	r5,r3
8111e824:	1110ddc0 	call	81110ddc <__muldf3>
8111e828:	01000044 	movi	r4,1
8111e82c:	8823d07a 	srai	r17,r17,1
8111e830:	84000044 	addi	r16,r16,1
8111e834:	94800204 	addi	r18,r18,8
8111e838:	8dfff41e 	bne	r17,r23,8111e80c <__reset+0xfb0fe80c>
8111e83c:	21003fcc 	andi	r4,r4,255
8111e840:	9823883a 	mov	r17,r19
8111e844:	da400a17 	ldw	r9,40(sp)
8111e848:	8027883a 	mov	r19,r16
8111e84c:	dc800e17 	ldw	r18,56(sp)
8111e850:	dc000c17 	ldw	r16,48(sp)
8111e854:	2003b11e 	bne	r4,zero,8111f71c <_strtod_r+0x15c8>
8111e858:	981690fa 	slli	r11,r19,3
8111e85c:	d8800917 	ldw	r2,36(sp)
8111e860:	01ff2c34 	movhi	r7,64688
8111e864:	900d883a 	mov	r6,r18
8111e868:	12ef883a 	add	r23,r2,r11
8111e86c:	b9000017 	ldw	r4,0(r23)
8111e870:	b9400117 	ldw	r5,4(r23)
8111e874:	89cf883a 	add	r7,r17,r7
8111e878:	da401315 	stw	r9,76(sp)
8111e87c:	1110ddc0 	call	81110ddc <__muldf3>
8111e880:	1025883a 	mov	r18,r2
8111e884:	011f2834 	movhi	r4,31904
8111e888:	189ffc2c 	andhi	r2,r3,32752
8111e88c:	da401317 	ldw	r9,76(sp)
8111e890:	20819836 	bltu	r4,r2,8111eef4 <_strtod_r+0xda0>
8111e894:	011f2434 	movhi	r4,31888
8111e898:	2083382e 	bgeu	r4,r2,8111f57c <_strtod_r+0x1428>
8111e89c:	045ffc34 	movhi	r17,32752
8111e8a0:	8c7fffc4 	addi	r17,r17,-1
8111e8a4:	04bfffc4 	movi	r18,-1
8111e8a8:	d8000915 	stw	zero,36(sp)
8111e8ac:	d9400817 	ldw	r5,32(sp)
8111e8b0:	df000015 	stw	fp,0(sp)
8111e8b4:	480f883a 	mov	r7,r9
8111e8b8:	b00d883a 	mov	r6,r22
8111e8bc:	8009883a 	mov	r4,r16
8111e8c0:	111ca900 	call	8111ca90 <__s2b>
8111e8c4:	d8800815 	stw	r2,32(sp)
8111e8c8:	10018a26 	beq	r2,zero,8111eef4 <_strtod_r+0xda0>
8111e8cc:	a807d7fa 	srai	r3,r21,31
8111e8d0:	0545c83a 	sub	r2,zero,r21
8111e8d4:	dd400a15 	stw	r21,40(sp)
8111e8d8:	1886703a 	and	r3,r3,r2
8111e8dc:	d8c00c15 	stw	r3,48(sp)
8111e8e0:	a8013516 	blt	r21,zero,8111edb8 <_strtod_r+0xc64>
8111e8e4:	d9400817 	ldw	r5,32(sp)
8111e8e8:	0011883a 	mov	r8,zero
8111e8ec:	0027883a 	mov	r19,zero
8111e8f0:	29400304 	addi	r5,r5,12
8111e8f4:	d9400f15 	stw	r5,60(sp)
8111e8f8:	402b883a 	mov	r21,r8
8111e8fc:	dd001215 	stw	r20,72(sp)
8111e900:	d8800817 	ldw	r2,32(sp)
8111e904:	8009883a 	mov	r4,r16
8111e908:	11400117 	ldw	r5,4(r2)
8111e90c:	111c8900 	call	8111c890 <_Balloc>
8111e910:	1029883a 	mov	r20,r2
8111e914:	10012d26 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111e918:	d8c00817 	ldw	r3,32(sp)
8111e91c:	d9400f17 	ldw	r5,60(sp)
8111e920:	11000304 	addi	r4,r2,12
8111e924:	19800417 	ldw	r6,16(r3)
8111e928:	31800084 	addi	r6,r6,2
8111e92c:	318d883a 	add	r6,r6,r6
8111e930:	318d883a 	add	r6,r6,r6
8111e934:	111297c0 	call	8111297c <memcpy>
8111e938:	d9000204 	addi	r4,sp,8
8111e93c:	d9000015 	stw	r4,0(sp)
8111e940:	d9c00404 	addi	r7,sp,16
8111e944:	900b883a 	mov	r5,r18
8111e948:	880d883a 	mov	r6,r17
8111e94c:	8009883a 	mov	r4,r16
8111e950:	111d56c0 	call	8111d56c <__d2b>
8111e954:	d8800515 	stw	r2,20(sp)
8111e958:	dc801115 	stw	r18,68(sp)
8111e95c:	dc401015 	stw	r17,64(sp)
8111e960:	10027c26 	beq	r2,zero,8111f354 <_strtod_r+0x1200>
8111e964:	01400044 	movi	r5,1
8111e968:	8009883a 	mov	r4,r16
8111e96c:	111ccb40 	call	8111ccb4 <__i2b>
8111e970:	1027883a 	mov	r19,r2
8111e974:	10011526 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111e978:	d8800417 	ldw	r2,16(sp)
8111e97c:	1000c816 	blt	r2,zero,8111eca0 <_strtod_r+0xb4c>
8111e980:	d9400c17 	ldw	r5,48(sp)
8111e984:	d9000a17 	ldw	r4,40(sp)
8111e988:	28ad883a 	add	r22,r5,r2
8111e98c:	d9400917 	ldw	r5,36(sp)
8111e990:	df000217 	ldw	fp,8(sp)
8111e994:	05ff0084 	movi	r23,-1022
8111e998:	1147c83a 	sub	r3,r2,r5
8111e99c:	1f07883a 	add	r3,r3,fp
8111e9a0:	00800d84 	movi	r2,54
8111e9a4:	18ffffc4 	addi	r3,r3,-1
8111e9a8:	1739c83a 	sub	fp,r2,fp
8111e9ac:	1dc0a50e 	bge	r3,r23,8111ec44 <_strtod_r+0xaf0>
8111e9b0:	b8efc83a 	sub	r23,r23,r3
8111e9b4:	008007c4 	movi	r2,31
8111e9b8:	e5f9c83a 	sub	fp,fp,r23
8111e9bc:	15c0bc16 	blt	r2,r23,8111ecb0 <_strtod_r+0xb5c>
8111e9c0:	00800044 	movi	r2,1
8111e9c4:	15c4983a 	sll	r2,r2,r23
8111e9c8:	d8000b15 	stw	zero,44(sp)
8111e9cc:	d8800d15 	stw	r2,52(sp)
8111e9d0:	2707883a 	add	r3,r4,fp
8111e9d4:	d9000917 	ldw	r4,36(sp)
8111e9d8:	b739883a 	add	fp,r22,fp
8111e9dc:	20ef883a 	add	r23,r4,r3
8111e9e0:	b009883a 	mov	r4,r22
8111e9e4:	e580010e 	bge	fp,r22,8111e9ec <_strtod_r+0x898>
8111e9e8:	e009883a 	mov	r4,fp
8111e9ec:	b805883a 	mov	r2,r23
8111e9f0:	25c0010e 	bge	r4,r23,8111e9f8 <_strtod_r+0x8a4>
8111e9f4:	2005883a 	mov	r2,r4
8111e9f8:	0080030e 	bge	zero,r2,8111ea08 <_strtod_r+0x8b4>
8111e9fc:	e0b9c83a 	sub	fp,fp,r2
8111ea00:	b8afc83a 	sub	r23,r23,r2
8111ea04:	b0adc83a 	sub	r22,r22,r2
8111ea08:	d9400c17 	ldw	r5,48(sp)
8111ea0c:	28001126 	beq	r5,zero,8111ea54 <_strtod_r+0x900>
8111ea10:	280d883a 	mov	r6,r5
8111ea14:	8009883a 	mov	r4,r16
8111ea18:	980b883a 	mov	r5,r19
8111ea1c:	111cef80 	call	8111cef8 <__pow5mult>
8111ea20:	1027883a 	mov	r19,r2
8111ea24:	1000e926 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111ea28:	d9800517 	ldw	r6,20(sp)
8111ea2c:	100b883a 	mov	r5,r2
8111ea30:	8009883a 	mov	r4,r16
8111ea34:	111ccf80 	call	8111ccf8 <__multiply>
8111ea38:	1000e426 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111ea3c:	d9400517 	ldw	r5,20(sp)
8111ea40:	8009883a 	mov	r4,r16
8111ea44:	d8801315 	stw	r2,76(sp)
8111ea48:	111c9400 	call	8111c940 <_Bfree>
8111ea4c:	d8801317 	ldw	r2,76(sp)
8111ea50:	d8800515 	stw	r2,20(sp)
8111ea54:	0700060e 	bge	zero,fp,8111ea70 <_strtod_r+0x91c>
8111ea58:	d9400517 	ldw	r5,20(sp)
8111ea5c:	e00d883a 	mov	r6,fp
8111ea60:	8009883a 	mov	r4,r16
8111ea64:	111d0400 	call	8111d040 <__lshift>
8111ea68:	d8800515 	stw	r2,20(sp)
8111ea6c:	10023926 	beq	r2,zero,8111f354 <_strtod_r+0x1200>
8111ea70:	d8800a17 	ldw	r2,40(sp)
8111ea74:	10000626 	beq	r2,zero,8111ea90 <_strtod_r+0x93c>
8111ea78:	d9800a17 	ldw	r6,40(sp)
8111ea7c:	a00b883a 	mov	r5,r20
8111ea80:	8009883a 	mov	r4,r16
8111ea84:	111cef80 	call	8111cef8 <__pow5mult>
8111ea88:	1029883a 	mov	r20,r2
8111ea8c:	1000cf26 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111ea90:	05c0060e 	bge	zero,r23,8111eaac <_strtod_r+0x958>
8111ea94:	a00b883a 	mov	r5,r20
8111ea98:	b80d883a 	mov	r6,r23
8111ea9c:	8009883a 	mov	r4,r16
8111eaa0:	111d0400 	call	8111d040 <__lshift>
8111eaa4:	1029883a 	mov	r20,r2
8111eaa8:	1000c826 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111eaac:	0580060e 	bge	zero,r22,8111eac8 <_strtod_r+0x974>
8111eab0:	980b883a 	mov	r5,r19
8111eab4:	b00d883a 	mov	r6,r22
8111eab8:	8009883a 	mov	r4,r16
8111eabc:	111d0400 	call	8111d040 <__lshift>
8111eac0:	1027883a 	mov	r19,r2
8111eac4:	1000c126 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111eac8:	d9400517 	ldw	r5,20(sp)
8111eacc:	a00d883a 	mov	r6,r20
8111ead0:	8009883a 	mov	r4,r16
8111ead4:	111d1f00 	call	8111d1f0 <__mdiff>
8111ead8:	102b883a 	mov	r21,r2
8111eadc:	1000bb26 	beq	r2,zero,8111edcc <_strtod_r+0xc78>
8111eae0:	10c00317 	ldw	r3,12(r2)
8111eae4:	980b883a 	mov	r5,r19
8111eae8:	10000315 	stw	zero,12(r2)
8111eaec:	1009883a 	mov	r4,r2
8111eaf0:	d8c00e15 	stw	r3,56(sp)
8111eaf4:	111d1900 	call	8111d190 <__mcmp>
8111eaf8:	10027616 	blt	r2,zero,8111f4d4 <_strtod_r+0x1380>
8111eafc:	10024426 	beq	r2,zero,8111f410 <_strtod_r+0x12bc>
8111eb00:	980b883a 	mov	r5,r19
8111eb04:	a809883a 	mov	r4,r21
8111eb08:	111d6c00 	call	8111d6c0 <__ratio>
8111eb0c:	000d883a 	mov	r6,zero
8111eb10:	01d00034 	movhi	r7,16384
8111eb14:	1009883a 	mov	r4,r2
8111eb18:	180b883a 	mov	r5,r3
8111eb1c:	102f883a 	mov	r23,r2
8111eb20:	182d883a 	mov	r22,r3
8111eb24:	11263680 	call	81126368 <__ledf2>
8111eb28:	00804a16 	blt	zero,r2,8111ec54 <_strtod_r+0xb00>
8111eb2c:	d9400e17 	ldw	r5,56(sp)
8111eb30:	28006b26 	beq	r5,zero,8111ece0 <_strtod_r+0xb8c>
8111eb34:	058ffc34 	movhi	r22,16368
8111eb38:	d8000b15 	stw	zero,44(sp)
8111eb3c:	d8000d15 	stw	zero,52(sp)
8111eb40:	b02f883a 	mov	r23,r22
8111eb44:	8f1ffc2c 	andhi	fp,r17,32752
8111eb48:	009ff834 	movhi	r2,32736
8111eb4c:	e080cd26 	beq	fp,r2,8111ee84 <_strtod_r+0xd30>
8111eb50:	d9400917 	ldw	r5,36(sp)
8111eb54:	28001a26 	beq	r5,zero,8111ebc0 <_strtod_r+0xa6c>
8111eb58:	0081a834 	movhi	r2,1696
8111eb5c:	17001836 	bltu	r2,fp,8111ebc0 <_strtod_r+0xa6c>
8111eb60:	d9000d17 	ldw	r4,52(sp)
8111eb64:	01d07834 	movhi	r7,16864
8111eb68:	39ffffc4 	addi	r7,r7,-1
8111eb6c:	01bff034 	movhi	r6,65472
8111eb70:	b80b883a 	mov	r5,r23
8111eb74:	11263680 	call	81126368 <__ledf2>
8111eb78:	00800e16 	blt	zero,r2,8111ebb4 <_strtod_r+0xa60>
8111eb7c:	d9000d17 	ldw	r4,52(sp)
8111eb80:	b80b883a 	mov	r5,r23
8111eb84:	11241740 	call	81124174 <__fixunsdfsi>
8111eb88:	10018126 	beq	r2,zero,8111f190 <_strtod_r+0x103c>
8111eb8c:	1009883a 	mov	r4,r2
8111eb90:	1126ec40 	call	81126ec4 <__floatunsidf>
8111eb94:	d8800d15 	stw	r2,52(sp)
8111eb98:	182f883a 	mov	r23,r3
8111eb9c:	d8800e17 	ldw	r2,56(sp)
8111eba0:	1001791e 	bne	r2,zero,8111f188 <_strtod_r+0x1034>
8111eba4:	ba20003c 	xorhi	r8,r23,32768
8111eba8:	d8c00d17 	ldw	r3,52(sp)
8111ebac:	402d883a 	mov	r22,r8
8111ebb0:	d8c00b15 	stw	r3,44(sp)
8111ebb4:	0081ac34 	movhi	r2,1712
8111ebb8:	b091883a 	add	r8,r22,r2
8111ebbc:	472dc83a 	sub	r22,r8,fp
8111ebc0:	9009883a 	mov	r4,r18
8111ebc4:	880b883a 	mov	r5,r17
8111ebc8:	111d3f40 	call	8111d3f4 <__ulp>
8111ebcc:	d9000b17 	ldw	r4,44(sp)
8111ebd0:	b00b883a 	mov	r5,r22
8111ebd4:	100d883a 	mov	r6,r2
8111ebd8:	180f883a 	mov	r7,r3
8111ebdc:	1110ddc0 	call	81110ddc <__muldf3>
8111ebe0:	900d883a 	mov	r6,r18
8111ebe4:	880f883a 	mov	r7,r17
8111ebe8:	1009883a 	mov	r4,r2
8111ebec:	180b883a 	mov	r5,r3
8111ebf0:	11250600 	call	81125060 <__adddf3>
8111ebf4:	1025883a 	mov	r18,r2
8111ebf8:	1823883a 	mov	r17,r3
8111ebfc:	182d883a 	mov	r22,r3
8111ec00:	d9000917 	ldw	r4,36(sp)
8111ec04:	2000021e 	bne	r4,zero,8111ec10 <_strtod_r+0xabc>
8111ec08:	b09ffc2c 	andhi	r2,r22,32752
8111ec0c:	e080be26 	beq	fp,r2,8111ef08 <_strtod_r+0xdb4>
8111ec10:	d9400517 	ldw	r5,20(sp)
8111ec14:	8009883a 	mov	r4,r16
8111ec18:	111c9400 	call	8111c940 <_Bfree>
8111ec1c:	a00b883a 	mov	r5,r20
8111ec20:	8009883a 	mov	r4,r16
8111ec24:	111c9400 	call	8111c940 <_Bfree>
8111ec28:	980b883a 	mov	r5,r19
8111ec2c:	8009883a 	mov	r4,r16
8111ec30:	111c9400 	call	8111c940 <_Bfree>
8111ec34:	a80b883a 	mov	r5,r21
8111ec38:	8009883a 	mov	r4,r16
8111ec3c:	111c9400 	call	8111c940 <_Bfree>
8111ec40:	003f2f06 	br	8111e900 <__reset+0xfb0fe900>
8111ec44:	00c00044 	movi	r3,1
8111ec48:	d8000b15 	stw	zero,44(sp)
8111ec4c:	d8c00d15 	stw	r3,52(sp)
8111ec50:	003f5f06 	br	8111e9d0 <__reset+0xfb0fe9d0>
8111ec54:	b809883a 	mov	r4,r23
8111ec58:	000d883a 	mov	r6,zero
8111ec5c:	01cff834 	movhi	r7,16352
8111ec60:	b00b883a 	mov	r5,r22
8111ec64:	1110ddc0 	call	81110ddc <__muldf3>
8111ec68:	d9000e17 	ldw	r4,56(sp)
8111ec6c:	d8800d15 	stw	r2,52(sp)
8111ec70:	182f883a 	mov	r23,r3
8111ec74:	2000181e 	bne	r4,zero,8111ecd8 <_strtod_r+0xb84>
8111ec78:	1a20003c 	xorhi	r8,r3,32768
8111ec7c:	d8800b15 	stw	r2,44(sp)
8111ec80:	402d883a 	mov	r22,r8
8111ec84:	003faf06 	br	8111eb44 <__reset+0xfb0feb44>
8111ec88:	0015883a 	mov	r10,zero
8111ec8c:	02c00044 	movi	r11,1
8111ec90:	2800011e 	bne	r5,zero,8111ec98 <_strtod_r+0xb44>
8111ec94:	903d7e26 	beq	r18,zero,8111e290 <__reset+0xfb0fe290>
8111ec98:	0013883a 	mov	r9,zero
8111ec9c:	003e4706 	br	8111e5bc <__reset+0xfb0fe5bc>
8111eca0:	d8c00a17 	ldw	r3,40(sp)
8111eca4:	dd800c17 	ldw	r22,48(sp)
8111eca8:	1889c83a 	sub	r4,r3,r2
8111ecac:	003f3706 	br	8111e98c <__reset+0xfb0fe98c>
8111ecb0:	00bef884 	movi	r2,-1054
8111ecb4:	05c00044 	movi	r23,1
8111ecb8:	10c5c83a 	sub	r2,r2,r3
8111ecbc:	b884983a 	sll	r2,r23,r2
8111ecc0:	ddc00d15 	stw	r23,52(sp)
8111ecc4:	d8800b15 	stw	r2,44(sp)
8111ecc8:	003f4106 	br	8111e9d0 <__reset+0xfb0fe9d0>
8111eccc:	ddc00615 	stw	r23,24(sp)
8111ecd0:	002b883a 	mov	r21,zero
8111ecd4:	003dc306 	br	8111e3e4 <__reset+0xfb0fe3e4>
8111ecd8:	1811883a 	mov	r8,r3
8111ecdc:	003fe706 	br	8111ec7c <__reset+0xfb0fec7c>
8111ece0:	90002e1e 	bne	r18,zero,8111ed9c <_strtod_r+0xc48>
8111ece4:	00c00434 	movhi	r3,16
8111ece8:	18ffffc4 	addi	r3,r3,-1
8111ecec:	88c4703a 	and	r2,r17,r3
8111ecf0:	10002c1e 	bne	r2,zero,8111eda4 <_strtod_r+0xc50>
8111ecf4:	000d883a 	mov	r6,zero
8111ecf8:	01cffc34 	movhi	r7,16368
8111ecfc:	b809883a 	mov	r4,r23
8111ed00:	b00b883a 	mov	r5,r22
8111ed04:	11263680 	call	81126368 <__ledf2>
8111ed08:	10021716 	blt	r2,zero,8111f568 <_strtod_r+0x1414>
8111ed0c:	b809883a 	mov	r4,r23
8111ed10:	b00b883a 	mov	r5,r22
8111ed14:	000d883a 	mov	r6,zero
8111ed18:	01cff834 	movhi	r7,16352
8111ed1c:	1110ddc0 	call	81110ddc <__muldf3>
8111ed20:	d8800d15 	stw	r2,52(sp)
8111ed24:	182f883a 	mov	r23,r3
8111ed28:	102d883a 	mov	r22,r2
8111ed2c:	1a20003c 	xorhi	r8,r3,32768
8111ed30:	dd800b15 	stw	r22,44(sp)
8111ed34:	402d883a 	mov	r22,r8
8111ed38:	003f8206 	br	8111eb44 <__reset+0xfb0feb44>
8111ed3c:	b013883a 	mov	r9,r22
8111ed40:	000b883a 	mov	r5,zero
8111ed44:	0015883a 	mov	r10,zero
8111ed48:	893ff404 	addi	r4,r17,-48
8111ed4c:	00800244 	movi	r2,9
8111ed50:	11001036 	bltu	r2,r4,8111ed94 <_strtod_r+0xc40>
8111ed54:	28c00044 	addi	r3,r5,1
8111ed58:	2023883a 	mov	r17,r4
8111ed5c:	20014d1e 	bne	r4,zero,8111f294 <_strtod_r+0x1140>
8111ed60:	d9800617 	ldw	r6,24(sp)
8111ed64:	180b883a 	mov	r5,r3
8111ed68:	30800044 	addi	r2,r6,1
8111ed6c:	d8800615 	stw	r2,24(sp)
8111ed70:	34400047 	ldb	r17,1(r6)
8111ed74:	003ff406 	br	8111ed48 <__reset+0xfb0fed48>
8111ed78:	0019883a 	mov	r12,zero
8111ed7c:	b8800084 	addi	r2,r23,2
8111ed80:	d8800615 	stw	r2,24(sp)
8111ed84:	bc400087 	ldb	r17,2(r23)
8111ed88:	003e1606 	br	8111e5e4 <__reset+0xfb0fe5e4>
8111ed8c:	03000044 	movi	r12,1
8111ed90:	003ffa06 	br	8111ed7c <__reset+0xfb0fed7c>
8111ed94:	02c00044 	movi	r11,1
8111ed98:	003d8d06 	br	8111e3d0 <__reset+0xfb0fe3d0>
8111ed9c:	00800044 	movi	r2,1
8111eda0:	9080fe26 	beq	r18,r2,8111f19c <_strtod_r+0x1048>
8111eda4:	d8000b15 	stw	zero,44(sp)
8111eda8:	05affc34 	movhi	r22,49136
8111edac:	d8000d15 	stw	zero,52(sp)
8111edb0:	05cffc34 	movhi	r23,16368
8111edb4:	003f6306 	br	8111eb44 <__reset+0xfb0feb44>
8111edb8:	d8000a15 	stw	zero,40(sp)
8111edbc:	003ec906 	br	8111e8e4 <__reset+0xfb0fe8e4>
8111edc0:	d9001117 	ldw	r4,68(sp)
8111edc4:	00bfffc4 	movi	r2,-1
8111edc8:	2080461e 	bne	r4,r2,8111eee4 <_strtod_r+0xd90>
8111edcc:	dd000a15 	stw	r20,40(sp)
8111edd0:	dd001217 	ldw	r20,72(sp)
8111edd4:	a811883a 	mov	r8,r21
8111edd8:	d8800517 	ldw	r2,20(sp)
8111eddc:	00c00884 	movi	r3,34
8111ede0:	80c00015 	stw	r3,0(r16)
8111ede4:	002b883a 	mov	r21,zero
8111ede8:	059ffc34 	movhi	r22,32752
8111edec:	100b883a 	mov	r5,r2
8111edf0:	8009883a 	mov	r4,r16
8111edf4:	da001315 	stw	r8,76(sp)
8111edf8:	111c9400 	call	8111c940 <_Bfree>
8111edfc:	d9400a17 	ldw	r5,40(sp)
8111ee00:	8009883a 	mov	r4,r16
8111ee04:	111c9400 	call	8111c940 <_Bfree>
8111ee08:	980b883a 	mov	r5,r19
8111ee0c:	8009883a 	mov	r4,r16
8111ee10:	111c9400 	call	8111c940 <_Bfree>
8111ee14:	d9400817 	ldw	r5,32(sp)
8111ee18:	8009883a 	mov	r4,r16
8111ee1c:	111c9400 	call	8111c940 <_Bfree>
8111ee20:	da001317 	ldw	r8,76(sp)
8111ee24:	8009883a 	mov	r4,r16
8111ee28:	400b883a 	mov	r5,r8
8111ee2c:	111c9400 	call	8111c940 <_Bfree>
8111ee30:	003d9206 	br	8111e47c <__reset+0xfb0fe47c>
8111ee34:	d8c00717 	ldw	r3,28(sp)
8111ee38:	d8800504 	addi	r2,sp,20
8111ee3c:	01a04534 	movhi	r6,33044
8111ee40:	31b98f04 	addi	r6,r6,-6596
8111ee44:	d8c00115 	stw	r3,4(sp)
8111ee48:	d8800015 	stw	r2,0(sp)
8111ee4c:	d9c00404 	addi	r7,sp,16
8111ee50:	d9400604 	addi	r5,sp,24
8111ee54:	8009883a 	mov	r4,r16
8111ee58:	11232a80 	call	811232a8 <__gethex>
8111ee5c:	154001cc 	andi	r21,r2,7
8111ee60:	a83d9b26 	beq	r21,zero,8111e4d0 <__reset+0xfb0fe4d0>
8111ee64:	00c00184 	movi	r3,6
8111ee68:	a8c0d61e 	bne	r21,r3,8111f1c4 <_strtod_r+0x1070>
8111ee6c:	9cc00044 	addi	r19,r19,1
8111ee70:	dcc00615 	stw	r19,24(sp)
8111ee74:	002b883a 	mov	r21,zero
8111ee78:	002d883a 	mov	r22,zero
8111ee7c:	d8000715 	stw	zero,28(sp)
8111ee80:	003d7e06 	br	8111e47c <__reset+0xfb0fe47c>
8111ee84:	00bf2c34 	movhi	r2,64688
8111ee88:	88a3883a 	add	r17,r17,r2
8111ee8c:	9009883a 	mov	r4,r18
8111ee90:	880b883a 	mov	r5,r17
8111ee94:	111d3f40 	call	8111d3f4 <__ulp>
8111ee98:	d9000b17 	ldw	r4,44(sp)
8111ee9c:	100d883a 	mov	r6,r2
8111eea0:	180f883a 	mov	r7,r3
8111eea4:	b00b883a 	mov	r5,r22
8111eea8:	1110ddc0 	call	81110ddc <__muldf3>
8111eeac:	900d883a 	mov	r6,r18
8111eeb0:	180b883a 	mov	r5,r3
8111eeb4:	880f883a 	mov	r7,r17
8111eeb8:	1009883a 	mov	r4,r2
8111eebc:	11250600 	call	81125060 <__adddf3>
8111eec0:	015f2834 	movhi	r5,31904
8111eec4:	1025883a 	mov	r18,r2
8111eec8:	297fffc4 	addi	r5,r5,-1
8111eecc:	189ffc2c 	andhi	r2,r3,32752
8111eed0:	2880892e 	bgeu	r5,r2,8111f0f8 <_strtod_r+0xfa4>
8111eed4:	d8801017 	ldw	r2,64(sp)
8111eed8:	00dffc34 	movhi	r3,32752
8111eedc:	18ffffc4 	addi	r3,r3,-1
8111eee0:	10ffb726 	beq	r2,r3,8111edc0 <__reset+0xfb0fedc0>
8111eee4:	045ffc34 	movhi	r17,32752
8111eee8:	8c7fffc4 	addi	r17,r17,-1
8111eeec:	04bfffc4 	movi	r18,-1
8111eef0:	003f4706 	br	8111ec10 <__reset+0xfb0fec10>
8111eef4:	00800884 	movi	r2,34
8111eef8:	80800015 	stw	r2,0(r16)
8111eefc:	002b883a 	mov	r21,zero
8111ef00:	059ffc34 	movhi	r22,32752
8111ef04:	003d5d06 	br	8111e47c <__reset+0xfb0fe47c>
8111ef08:	d9000d17 	ldw	r4,52(sp)
8111ef0c:	b80b883a 	mov	r5,r23
8111ef10:	1126d600 	call	81126d60 <__fixdfsi>
8111ef14:	1009883a 	mov	r4,r2
8111ef18:	1126de00 	call	81126de0 <__floatsidf>
8111ef1c:	d9000d17 	ldw	r4,52(sp)
8111ef20:	b80b883a 	mov	r5,r23
8111ef24:	100d883a 	mov	r6,r2
8111ef28:	180f883a 	mov	r7,r3
8111ef2c:	112645c0 	call	8112645c <__subdf3>
8111ef30:	d9400e17 	ldw	r5,56(sp)
8111ef34:	1039883a 	mov	fp,r2
8111ef38:	182f883a 	mov	r23,r3
8111ef3c:	2800141e 	bne	r5,zero,8111ef90 <_strtod_r+0xe3c>
8111ef40:	9000131e 	bne	r18,zero,8111ef90 <_strtod_r+0xe3c>
8111ef44:	00800434 	movhi	r2,16
8111ef48:	10bfffc4 	addi	r2,r2,-1
8111ef4c:	b0ac703a 	and	r22,r22,r2
8111ef50:	b0000f1e 	bne	r22,zero,8111ef90 <_strtod_r+0xe3c>
8111ef54:	01a52834 	movhi	r6,38048
8111ef58:	01cff434 	movhi	r7,16336
8111ef5c:	318d6544 	addi	r6,r6,13717
8111ef60:	39ffffc4 	addi	r7,r7,-1
8111ef64:	e009883a 	mov	r4,fp
8111ef68:	180b883a 	mov	r5,r3
8111ef6c:	11263680 	call	81126368 <__ledf2>
8111ef70:	103f270e 	bge	r2,zero,8111ec10 <__reset+0xfb0fec10>
8111ef74:	dd000a15 	stw	r20,40(sp)
8111ef78:	a811883a 	mov	r8,r21
8111ef7c:	dd001217 	ldw	r20,72(sp)
8111ef80:	d8800517 	ldw	r2,20(sp)
8111ef84:	002b883a 	mov	r21,zero
8111ef88:	882d883a 	mov	r22,r17
8111ef8c:	003f9706 	br	8111edec <__reset+0xfb0fedec>
8111ef90:	01a52834 	movhi	r6,38048
8111ef94:	01cff834 	movhi	r7,16352
8111ef98:	318d6544 	addi	r6,r6,13717
8111ef9c:	39ffffc4 	addi	r7,r7,-1
8111efa0:	e009883a 	mov	r4,fp
8111efa4:	b80b883a 	mov	r5,r23
8111efa8:	11263680 	call	81126368 <__ledf2>
8111efac:	10000716 	blt	r2,zero,8111efcc <_strtod_r+0xe78>
8111efb0:	018d6c34 	movhi	r6,13744
8111efb4:	31b94d44 	addi	r6,r6,-6859
8111efb8:	01cff834 	movhi	r7,16352
8111efbc:	e009883a 	mov	r4,fp
8111efc0:	b80b883a 	mov	r5,r23
8111efc4:	112628c0 	call	8112628c <__gedf2>
8111efc8:	00bf110e 	bge	zero,r2,8111ec10 <__reset+0xfb0fec10>
8111efcc:	dd000a15 	stw	r20,40(sp)
8111efd0:	a811883a 	mov	r8,r21
8111efd4:	dd001217 	ldw	r20,72(sp)
8111efd8:	d8800517 	ldw	r2,20(sp)
8111efdc:	902b883a 	mov	r21,r18
8111efe0:	882d883a 	mov	r22,r17
8111efe4:	003f8106 	br	8111edec <__reset+0xfb0fedec>
8111efe8:	b83e2f26 	beq	r23,zero,8111e8a8 <__reset+0xfb0fe8a8>
8111efec:	05efc83a 	sub	r23,zero,r23
8111eff0:	b88003cc 	andi	r2,r23,15
8111eff4:	10000d26 	beq	r2,zero,8111f02c <_strtod_r+0xed8>
8111eff8:	100490fa 	slli	r2,r2,3
8111effc:	00e04534 	movhi	r3,33044
8111f000:	18f95404 	addi	r3,r3,-6832
8111f004:	1885883a 	add	r2,r3,r2
8111f008:	11800017 	ldw	r6,0(r2)
8111f00c:	11c00117 	ldw	r7,4(r2)
8111f010:	9009883a 	mov	r4,r18
8111f014:	880b883a 	mov	r5,r17
8111f018:	da401315 	stw	r9,76(sp)
8111f01c:	11259140 	call	81125914 <__divdf3>
8111f020:	da401317 	ldw	r9,76(sp)
8111f024:	1025883a 	mov	r18,r2
8111f028:	1823883a 	mov	r17,r3
8111f02c:	b82fd13a 	srai	r23,r23,4
8111f030:	b83e1d26 	beq	r23,zero,8111e8a8 <__reset+0xfb0fe8a8>
8111f034:	008007c4 	movi	r2,31
8111f038:	15c02816 	blt	r2,r23,8111f0dc <_strtod_r+0xf88>
8111f03c:	b880040c 	andi	r2,r23,16
8111f040:	10019726 	beq	r2,zero,8111f6a0 <_strtod_r+0x154c>
8111f044:	05c1880e 	bge	zero,r23,8111f668 <_strtod_r+0x1514>
8111f048:	00c01a84 	movi	r3,106
8111f04c:	d8c00915 	stw	r3,36(sp)
8111f050:	04e04534 	movhi	r19,33044
8111f054:	9cf99404 	addi	r19,r19,-6576
8111f058:	8807883a 	mov	r3,r17
8111f05c:	9005883a 	mov	r2,r18
8111f060:	8023883a 	mov	r17,r16
8111f064:	0009883a 	mov	r4,zero
8111f068:	9821883a 	mov	r16,r19
8111f06c:	da400a15 	stw	r9,40(sp)
8111f070:	1827883a 	mov	r19,r3
8111f074:	b980004c 	andi	r6,r23,1
8111f078:	30000626 	beq	r6,zero,8111f094 <_strtod_r+0xf40>
8111f07c:	81800017 	ldw	r6,0(r16)
8111f080:	81c00117 	ldw	r7,4(r16)
8111f084:	1009883a 	mov	r4,r2
8111f088:	180b883a 	mov	r5,r3
8111f08c:	1110ddc0 	call	81110ddc <__muldf3>
8111f090:	01000044 	movi	r4,1
8111f094:	b82fd07a 	srai	r23,r23,1
8111f098:	84000204 	addi	r16,r16,8
8111f09c:	b83ff51e 	bne	r23,zero,8111f074 <__reset+0xfb0ff074>
8111f0a0:	21003fcc 	andi	r4,r4,255
8111f0a4:	8821883a 	mov	r16,r17
8111f0a8:	da400a17 	ldw	r9,40(sp)
8111f0ac:	9823883a 	mov	r17,r19
8111f0b0:	2001a51e 	bne	r4,zero,8111f748 <_strtod_r+0x15f4>
8111f0b4:	d9000917 	ldw	r4,36(sp)
8111f0b8:	20016d1e 	bne	r4,zero,8111f670 <_strtod_r+0x151c>
8111f0bc:	000d883a 	mov	r6,zero
8111f0c0:	000f883a 	mov	r7,zero
8111f0c4:	9009883a 	mov	r4,r18
8111f0c8:	880b883a 	mov	r5,r17
8111f0cc:	da401315 	stw	r9,76(sp)
8111f0d0:	11262040 	call	81126204 <__eqdf2>
8111f0d4:	da401317 	ldw	r9,76(sp)
8111f0d8:	103df41e 	bne	r2,zero,8111e8ac <__reset+0xfb0fe8ac>
8111f0dc:	00800884 	movi	r2,34
8111f0e0:	80800015 	stw	r2,0(r16)
8111f0e4:	002b883a 	mov	r21,zero
8111f0e8:	002d883a 	mov	r22,zero
8111f0ec:	003ce306 	br	8111e47c <__reset+0xfb0fe47c>
8111f0f0:	055387c4 	movi	r21,19999
8111f0f4:	003d6b06 	br	8111e6a4 <__reset+0xfb0fe6a4>
8111f0f8:	0440d434 	movhi	r17,848
8111f0fc:	1c63883a 	add	r17,r3,r17
8111f100:	882d883a 	mov	r22,r17
8111f104:	003ebe06 	br	8111ec00 <__reset+0xfb0fec00>
8111f108:	14403fcc 	andi	r17,r2,255
8111f10c:	8c40201c 	xori	r17,r17,128
8111f110:	8c7fe004 	addi	r17,r17,-128
8111f114:	dd400817 	ldw	r21,32(sp)
8111f118:	0027883a 	mov	r19,zero
8111f11c:	0039883a 	mov	fp,zero
8111f120:	002d883a 	mov	r22,zero
8111f124:	003c9906 	br	8111e38c <__reset+0xfb0fe38c>
8111f128:	00c00944 	movi	r3,37
8111f12c:	1a47c83a 	sub	r3,r3,r9
8111f130:	1d7d8c16 	blt	r3,r21,8111e764 <__reset+0xfb0fe764>
8111f134:	1261c83a 	sub	r16,r2,r9
8111f138:	800490fa 	slli	r2,r16,3
8111f13c:	04e04534 	movhi	r19,33044
8111f140:	9cf95404 	addi	r19,r19,-6832
8111f144:	9885883a 	add	r2,r19,r2
8111f148:	11000017 	ldw	r4,0(r2)
8111f14c:	11400117 	ldw	r5,4(r2)
8111f150:	900d883a 	mov	r6,r18
8111f154:	880f883a 	mov	r7,r17
8111f158:	1110ddc0 	call	81110ddc <__muldf3>
8111f15c:	ac0dc83a 	sub	r6,r21,r16
8111f160:	300c90fa 	slli	r6,r6,3
8111f164:	1009883a 	mov	r4,r2
8111f168:	180b883a 	mov	r5,r3
8111f16c:	9985883a 	add	r2,r19,r6
8111f170:	11800017 	ldw	r6,0(r2)
8111f174:	11c00117 	ldw	r7,4(r2)
8111f178:	1110ddc0 	call	81110ddc <__muldf3>
8111f17c:	102b883a 	mov	r21,r2
8111f180:	182d883a 	mov	r22,r3
8111f184:	003cbd06 	br	8111e47c <__reset+0xfb0fe47c>
8111f188:	b811883a 	mov	r8,r23
8111f18c:	003e8606 	br	8111eba8 <__reset+0xfb0feba8>
8111f190:	d8000d15 	stw	zero,52(sp)
8111f194:	05cffc34 	movhi	r23,16368
8111f198:	003e8006 	br	8111eb9c <__reset+0xfb0feb9c>
8111f19c:	883f011e 	bne	r17,zero,8111eda4 <__reset+0xfb0feda4>
8111f1a0:	dd000a15 	stw	r20,40(sp)
8111f1a4:	dd001217 	ldw	r20,72(sp)
8111f1a8:	a811883a 	mov	r8,r21
8111f1ac:	00800884 	movi	r2,34
8111f1b0:	80800015 	stw	r2,0(r16)
8111f1b4:	002b883a 	mov	r21,zero
8111f1b8:	d8800517 	ldw	r2,20(sp)
8111f1bc:	002d883a 	mov	r22,zero
8111f1c0:	003f0a06 	br	8111edec <__reset+0xfb0fedec>
8111f1c4:	d9800517 	ldw	r6,20(sp)
8111f1c8:	30000826 	beq	r6,zero,8111f1ec <_strtod_r+0x1098>
8111f1cc:	01400d44 	movi	r5,53
8111f1d0:	d9000204 	addi	r4,sp,8
8111f1d4:	d8801315 	stw	r2,76(sp)
8111f1d8:	111d7e80 	call	8111d7e8 <__copybits>
8111f1dc:	d9400517 	ldw	r5,20(sp)
8111f1e0:	8009883a 	mov	r4,r16
8111f1e4:	111c9400 	call	8111c940 <_Bfree>
8111f1e8:	d8801317 	ldw	r2,76(sp)
8111f1ec:	00c00184 	movi	r3,6
8111f1f0:	1d400f36 	bltu	r3,r21,8111f230 <_strtod_r+0x10dc>
8111f1f4:	a82a90ba 	slli	r21,r21,2
8111f1f8:	00e044b4 	movhi	r3,33042
8111f1fc:	18fc8304 	addi	r3,r3,-3572
8111f200:	a8eb883a 	add	r21,r21,r3
8111f204:	a8c00017 	ldw	r3,0(r21)
8111f208:	1800683a 	jmp	r3
8111f20c:	8111f288 	cmpgei	r4,r16,18378
8111f210:	8111f260 	cmpeqi	r4,r16,18377
8111f214:	8111f244 	addi	r4,r16,18377
8111f218:	8111f228 	cmpgeui	r4,r16,18376
8111f21c:	8111f250 	cmplti	r4,r16,18377
8111f220:	8111f260 	cmpeqi	r4,r16,18377
8111f224:	8111f288 	cmpgei	r4,r16,18378
8111f228:	045ffc34 	movhi	r17,32752
8111f22c:	0025883a 	mov	r18,zero
8111f230:	1080020c 	andi	r2,r2,8
8111f234:	902b883a 	mov	r21,r18
8111f238:	103c8f26 	beq	r2,zero,8111e478 <__reset+0xfb0fe478>
8111f23c:	8da00034 	orhi	r22,r17,32768
8111f240:	003c8e06 	br	8111e47c <__reset+0xfb0fe47c>
8111f244:	dc800217 	ldw	r18,8(sp)
8111f248:	dc400317 	ldw	r17,12(sp)
8111f24c:	003ff806 	br	8111f230 <__reset+0xfb0ff230>
8111f250:	04600034 	movhi	r17,32768
8111f254:	8c7fffc4 	addi	r17,r17,-1
8111f258:	04bfffc4 	movi	r18,-1
8111f25c:	003ff406 	br	8111f230 <__reset+0xfb0ff230>
8111f260:	d8c00417 	ldw	r3,16(sp)
8111f264:	dc400317 	ldw	r17,12(sp)
8111f268:	013ffc34 	movhi	r4,65520
8111f26c:	18c10cc4 	addi	r3,r3,1075
8111f270:	1806953a 	slli	r3,r3,20
8111f274:	213fffc4 	addi	r4,r4,-1
8111f278:	8922703a 	and	r17,r17,r4
8111f27c:	dc800217 	ldw	r18,8(sp)
8111f280:	88e2b03a 	or	r17,r17,r3
8111f284:	003fea06 	br	8111f230 <__reset+0xfb0ff230>
8111f288:	0023883a 	mov	r17,zero
8111f28c:	0025883a 	mov	r18,zero
8111f290:	003fe706 	br	8111f230 <__reset+0xfb0ff230>
8111f294:	01800044 	movi	r6,1
8111f298:	50d5883a 	add	r10,r10,r3
8111f29c:	2a4b883a 	add	r5,r5,r9
8111f2a0:	19811a26 	beq	r3,r6,8111f70c <_strtod_r+0x15b8>
8111f2a4:	01800204 	movi	r6,8
8111f2a8:	01c00404 	movi	r7,16
8111f2ac:	4a400044 	addi	r9,r9,1
8111f2b0:	48bfffc4 	addi	r2,r9,-1
8111f2b4:	30801616 	blt	r6,r2,8111f310 <_strtod_r+0x11bc>
8111f2b8:	e70002a4 	muli	fp,fp,10
8111f2bc:	497ffb1e 	bne	r9,r5,8111f2ac <__reset+0xfb0ff2ac>
8111f2c0:	d9800617 	ldw	r6,24(sp)
8111f2c4:	4a400044 	addi	r9,r9,1
8111f2c8:	00c00204 	movi	r3,8
8111f2cc:	19400c0e 	bge	r3,r5,8111f300 <_strtod_r+0x11ac>
8111f2d0:	00800404 	movi	r2,16
8111f2d4:	000b883a 	mov	r5,zero
8111f2d8:	127ea316 	blt	r2,r9,8111ed68 <__reset+0xfb0fed68>
8111f2dc:	988002a4 	muli	r2,r19,10
8111f2e0:	20a7883a 	add	r19,r4,r2
8111f2e4:	003ea006 	br	8111ed68 <__reset+0xfb0fed68>
8111f2e8:	d8800617 	ldw	r2,24(sp)
8111f2ec:	8c7ff404 	addi	r17,r17,-48
8111f2f0:	2a800044 	addi	r10,r5,1
8111f2f4:	d8800815 	stw	r2,32(sp)
8111f2f8:	100d883a 	mov	r6,r2
8111f2fc:	02400044 	movi	r9,1
8111f300:	e08002a4 	muli	r2,fp,10
8111f304:	000b883a 	mov	r5,zero
8111f308:	88b9883a 	add	fp,r17,r2
8111f30c:	003e9606 	br	8111ed68 <__reset+0xfb0fed68>
8111f310:	3a7fea16 	blt	r7,r9,8111f2bc <__reset+0xfb0ff2bc>
8111f314:	9cc002a4 	muli	r19,r19,10
8111f318:	003fe806 	br	8111f2bc <__reset+0xfb0ff2bc>
8111f31c:	00bffa84 	movi	r2,-22
8111f320:	a8bd1016 	blt	r21,r2,8111e764 <__reset+0xfb0fe764>
8111f324:	a82a90fa 	slli	r21,r21,3
8111f328:	00a04534 	movhi	r2,33044
8111f32c:	10b95404 	addi	r2,r2,-6832
8111f330:	1545c83a 	sub	r2,r2,r21
8111f334:	11800017 	ldw	r6,0(r2)
8111f338:	11c00117 	ldw	r7,4(r2)
8111f33c:	9009883a 	mov	r4,r18
8111f340:	880b883a 	mov	r5,r17
8111f344:	11259140 	call	81125914 <__divdf3>
8111f348:	102b883a 	mov	r21,r2
8111f34c:	182d883a 	mov	r22,r3
8111f350:	003c4a06 	br	8111e47c <__reset+0xfb0fe47c>
8111f354:	dd000a15 	stw	r20,40(sp)
8111f358:	a811883a 	mov	r8,r21
8111f35c:	dd001217 	ldw	r20,72(sp)
8111f360:	003e9e06 	br	8111eddc <__reset+0xfb0feddc>
8111f364:	01604534 	movhi	r5,33044
8111f368:	d9000617 	ldw	r4,24(sp)
8111f36c:	29798604 	addi	r5,r5,-6632
8111f370:	01c00644 	movi	r7,25
8111f374:	00000b06 	br	8111f3a4 <_strtod_r+0x1250>
8111f378:	21000044 	addi	r4,r4,1
8111f37c:	20800003 	ldbu	r2,0(r4)
8111f380:	10ffefc4 	addi	r3,r2,-65
8111f384:	10803fcc 	andi	r2,r2,255
8111f388:	1080201c 	xori	r2,r2,128
8111f38c:	18c03fcc 	andi	r3,r3,255
8111f390:	10bfe004 	addi	r2,r2,-128
8111f394:	38c00136 	bltu	r7,r3,8111f39c <_strtod_r+0x1248>
8111f398:	10800804 	addi	r2,r2,32
8111f39c:	29400044 	addi	r5,r5,1
8111f3a0:	11bbbb1e 	bne	r2,r6,8111e290 <__reset+0xfb0fe290>
8111f3a4:	29800007 	ldb	r6,0(r5)
8111f3a8:	303ff31e 	bne	r6,zero,8111f378 <__reset+0xfb0ff378>
8111f3ac:	01a04534 	movhi	r6,33044
8111f3b0:	d9000615 	stw	r4,24(sp)
8111f3b4:	31b98704 	addi	r6,r6,-6628
8111f3b8:	200b883a 	mov	r5,r4
8111f3bc:	02000644 	movi	r8,25
8111f3c0:	00000a06 	br	8111f3ec <_strtod_r+0x1298>
8111f3c4:	28800003 	ldbu	r2,0(r5)
8111f3c8:	10ffefc4 	addi	r3,r2,-65
8111f3cc:	10803fcc 	andi	r2,r2,255
8111f3d0:	1080201c 	xori	r2,r2,128
8111f3d4:	18c03fcc 	andi	r3,r3,255
8111f3d8:	10bfe004 	addi	r2,r2,-128
8111f3dc:	40c00136 	bltu	r8,r3,8111f3e4 <_strtod_r+0x1290>
8111f3e0:	10800804 	addi	r2,r2,32
8111f3e4:	31800044 	addi	r6,r6,1
8111f3e8:	11c0711e 	bne	r2,r7,8111f5b0 <_strtod_r+0x145c>
8111f3ec:	31c00007 	ldb	r7,0(r6)
8111f3f0:	29400044 	addi	r5,r5,1
8111f3f4:	383ff31e 	bne	r7,zero,8111f3c4 <__reset+0xfb0ff3c4>
8111f3f8:	d9400615 	stw	r5,24(sp)
8111f3fc:	045ffc34 	movhi	r17,32752
8111f400:	0025883a 	mov	r18,zero
8111f404:	003c1b06 	br	8111e474 <__reset+0xfb0fe474>
8111f408:	000b883a 	mov	r5,zero
8111f40c:	003ccc06 	br	8111e740 <__reset+0xfb0fe740>
8111f410:	d9400e17 	ldw	r5,56(sp)
8111f414:	dd000a15 	stw	r20,40(sp)
8111f418:	00800434 	movhi	r2,16
8111f41c:	a811883a 	mov	r8,r21
8111f420:	dd001217 	ldw	r20,72(sp)
8111f424:	dd401117 	ldw	r21,68(sp)
8111f428:	dd801017 	ldw	r22,64(sp)
8111f42c:	10bfffc4 	addi	r2,r2,-1
8111f430:	28005626 	beq	r5,zero,8111f58c <_strtod_r+0x1438>
8111f434:	8886703a 	and	r3,r17,r2
8111f438:	18807826 	beq	r3,r2,8111f61c <_strtod_r+0x14c8>
8111f43c:	d8c00b17 	ldw	r3,44(sp)
8111f440:	18005726 	beq	r3,zero,8111f5a0 <_strtod_r+0x144c>
8111f444:	1c44703a 	and	r2,r3,r17
8111f448:	10000f26 	beq	r2,zero,8111f488 <_strtod_r+0x1334>
8111f44c:	d9000e17 	ldw	r4,56(sp)
8111f450:	d9800917 	ldw	r6,36(sp)
8111f454:	20005e26 	beq	r4,zero,8111f5d0 <_strtod_r+0x147c>
8111f458:	9009883a 	mov	r4,r18
8111f45c:	880b883a 	mov	r5,r17
8111f460:	da001315 	stw	r8,76(sp)
8111f464:	111e0e80 	call	8111e0e8 <sulp>
8111f468:	100d883a 	mov	r6,r2
8111f46c:	180f883a 	mov	r7,r3
8111f470:	9009883a 	mov	r4,r18
8111f474:	880b883a 	mov	r5,r17
8111f478:	11250600 	call	81125060 <__adddf3>
8111f47c:	da001317 	ldw	r8,76(sp)
8111f480:	102b883a 	mov	r21,r2
8111f484:	182d883a 	mov	r22,r3
8111f488:	d8c00917 	ldw	r3,36(sp)
8111f48c:	18000f26 	beq	r3,zero,8111f4cc <_strtod_r+0x1378>
8111f490:	a809883a 	mov	r4,r21
8111f494:	b00b883a 	mov	r5,r22
8111f498:	000d883a 	mov	r6,zero
8111f49c:	01ce5434 	movhi	r7,14672
8111f4a0:	da001315 	stw	r8,76(sp)
8111f4a4:	1110ddc0 	call	81110ddc <__muldf3>
8111f4a8:	102b883a 	mov	r21,r2
8111f4ac:	182d883a 	mov	r22,r3
8111f4b0:	da001317 	ldw	r8,76(sp)
8111f4b4:	1800051e 	bne	r3,zero,8111f4cc <_strtod_r+0x1378>
8111f4b8:	d8800517 	ldw	r2,20(sp)
8111f4bc:	a83e4b1e 	bne	r21,zero,8111edec <__reset+0xfb0fedec>
8111f4c0:	00c00884 	movi	r3,34
8111f4c4:	80c00015 	stw	r3,0(r16)
8111f4c8:	003e4806 	br	8111edec <__reset+0xfb0fedec>
8111f4cc:	d8800517 	ldw	r2,20(sp)
8111f4d0:	003e4606 	br	8111edec <__reset+0xfb0fedec>
8111f4d4:	d9000e17 	ldw	r4,56(sp)
8111f4d8:	dd000a15 	stw	r20,40(sp)
8111f4dc:	a811883a 	mov	r8,r21
8111f4e0:	dd001217 	ldw	r20,72(sp)
8111f4e4:	dd401117 	ldw	r21,68(sp)
8111f4e8:	dd801017 	ldw	r22,64(sp)
8111f4ec:	203fe61e 	bne	r4,zero,8111f488 <__reset+0xfb0ff488>
8111f4f0:	903fe51e 	bne	r18,zero,8111f488 <__reset+0xfb0ff488>
8111f4f4:	00800434 	movhi	r2,16
8111f4f8:	10bfffc4 	addi	r2,r2,-1
8111f4fc:	8884703a 	and	r2,r17,r2
8111f500:	103fe11e 	bne	r2,zero,8111f488 <__reset+0xfb0ff488>
8111f504:	8ddffc2c 	andhi	r23,r17,32752
8111f508:	0081ac34 	movhi	r2,1712
8111f50c:	15ffde2e 	bgeu	r2,r23,8111f488 <__reset+0xfb0ff488>
8111f510:	40800517 	ldw	r2,20(r8)
8111f514:	1000031e 	bne	r2,zero,8111f524 <_strtod_r+0x13d0>
8111f518:	40800417 	ldw	r2,16(r8)
8111f51c:	00c00044 	movi	r3,1
8111f520:	18bfd90e 	bge	r3,r2,8111f488 <__reset+0xfb0ff488>
8111f524:	400b883a 	mov	r5,r8
8111f528:	01800044 	movi	r6,1
8111f52c:	8009883a 	mov	r4,r16
8111f530:	111d0400 	call	8111d040 <__lshift>
8111f534:	980b883a 	mov	r5,r19
8111f538:	1009883a 	mov	r4,r2
8111f53c:	d8801315 	stw	r2,76(sp)
8111f540:	111d1900 	call	8111d190 <__mcmp>
8111f544:	da001317 	ldw	r8,76(sp)
8111f548:	00bfcf0e 	bge	zero,r2,8111f488 <__reset+0xfb0ff488>
8111f54c:	d8c00917 	ldw	r3,36(sp)
8111f550:	18005c26 	beq	r3,zero,8111f6c4 <_strtod_r+0x1570>
8111f554:	0081ac34 	movhi	r2,1712
8111f558:	15c05a16 	blt	r2,r23,8111f6c4 <_strtod_r+0x1570>
8111f55c:	0080dc34 	movhi	r2,880
8111f560:	15ffcb16 	blt	r2,r23,8111f490 <__reset+0xfb0ff490>
8111f564:	003f1106 	br	8111f1ac <__reset+0xfb0ff1ac>
8111f568:	002d883a 	mov	r22,zero
8111f56c:	022ff834 	movhi	r8,49120
8111f570:	d8000d15 	stw	zero,52(sp)
8111f574:	05cff834 	movhi	r23,16352
8111f578:	003ded06 	br	8111ed30 <__reset+0xfb0fed30>
8111f57c:	0440d434 	movhi	r17,848
8111f580:	1c63883a 	add	r17,r3,r17
8111f584:	d8000915 	stw	zero,36(sp)
8111f588:	003cc806 	br	8111e8ac <__reset+0xfb0fe8ac>
8111f58c:	8884703a 	and	r2,r17,r2
8111f590:	103faa1e 	bne	r2,zero,8111f43c <__reset+0xfb0ff43c>
8111f594:	903fa91e 	bne	r18,zero,8111f43c <__reset+0xfb0ff43c>
8111f598:	8ddffc2c 	andhi	r23,r17,32752
8111f59c:	003feb06 	br	8111f54c <__reset+0xfb0ff54c>
8111f5a0:	d8c00d17 	ldw	r3,52(sp)
8111f5a4:	1cae703a 	and	r23,r3,r18
8111f5a8:	b83fb726 	beq	r23,zero,8111f488 <__reset+0xfb0ff488>
8111f5ac:	003fa706 	br	8111f44c <__reset+0xfb0ff44c>
8111f5b0:	21000044 	addi	r4,r4,1
8111f5b4:	d9000615 	stw	r4,24(sp)
8111f5b8:	003f9006 	br	8111f3fc <__reset+0xfb0ff3fc>
8111f5bc:	01604534 	movhi	r5,33044
8111f5c0:	29794a04 	addi	r5,r5,-6872
8111f5c4:	d9400915 	stw	r5,36(sp)
8111f5c8:	0027883a 	mov	r19,zero
8111f5cc:	003ca206 	br	8111e858 <__reset+0xfb0fe858>
8111f5d0:	9009883a 	mov	r4,r18
8111f5d4:	880b883a 	mov	r5,r17
8111f5d8:	da001315 	stw	r8,76(sp)
8111f5dc:	111e0e80 	call	8111e0e8 <sulp>
8111f5e0:	100d883a 	mov	r6,r2
8111f5e4:	180f883a 	mov	r7,r3
8111f5e8:	9009883a 	mov	r4,r18
8111f5ec:	880b883a 	mov	r5,r17
8111f5f0:	112645c0 	call	8112645c <__subdf3>
8111f5f4:	000d883a 	mov	r6,zero
8111f5f8:	000f883a 	mov	r7,zero
8111f5fc:	1009883a 	mov	r4,r2
8111f600:	180b883a 	mov	r5,r3
8111f604:	102b883a 	mov	r21,r2
8111f608:	182d883a 	mov	r22,r3
8111f60c:	11262040 	call	81126204 <__eqdf2>
8111f610:	da001317 	ldw	r8,76(sp)
8111f614:	103ee526 	beq	r2,zero,8111f1ac <__reset+0xfb0ff1ac>
8111f618:	003f9b06 	br	8111f488 <__reset+0xfb0ff488>
8111f61c:	d8800917 	ldw	r2,36(sp)
8111f620:	10002226 	beq	r2,zero,8111f6ac <_strtod_r+0x1558>
8111f624:	889ffc2c 	andhi	r2,r17,32752
8111f628:	00c1a834 	movhi	r3,1696
8111f62c:	18801f36 	bltu	r3,r2,8111f6ac <_strtod_r+0x1558>
8111f630:	1004d53a 	srli	r2,r2,20
8111f634:	00c01ac4 	movi	r3,107
8111f638:	1887c83a 	sub	r3,r3,r2
8111f63c:	00bfffc4 	movi	r2,-1
8111f640:	10c4983a 	sll	r2,r2,r3
8111f644:	14bf7d1e 	bne	r2,r18,8111f43c <__reset+0xfb0ff43c>
8111f648:	00dffc34 	movhi	r3,32752
8111f64c:	18ffffc4 	addi	r3,r3,-1
8111f650:	88c03526 	beq	r17,r3,8111f728 <_strtod_r+0x15d4>
8111f654:	8c5ffc2c 	andhi	r17,r17,32752
8111f658:	00800434 	movhi	r2,16
8111f65c:	002b883a 	mov	r21,zero
8111f660:	88ad883a 	add	r22,r17,r2
8111f664:	003f8806 	br	8111f488 <__reset+0xfb0ff488>
8111f668:	01401a84 	movi	r5,106
8111f66c:	d9400915 	stw	r5,36(sp)
8111f670:	8ddffc2c 	andhi	r23,r17,32752
8111f674:	b82ed53a 	srli	r23,r23,20
8111f678:	00801ac4 	movi	r2,107
8111f67c:	15c5c83a 	sub	r2,r2,r23
8111f680:	00be8e0e 	bge	zero,r2,8111f0bc <__reset+0xfb0ff0bc>
8111f684:	00c007c4 	movi	r3,31
8111f688:	18800a0e 	bge	r3,r2,8111f6b4 <_strtod_r+0x1560>
8111f68c:	00c00d04 	movi	r3,52
8111f690:	0025883a 	mov	r18,zero
8111f694:	1880270e 	bge	r3,r2,8111f734 <_strtod_r+0x15e0>
8111f698:	0440dc34 	movhi	r17,880
8111f69c:	003e8706 	br	8111f0bc <__reset+0xfb0ff0bc>
8111f6a0:	d8000915 	stw	zero,36(sp)
8111f6a4:	05fe6a16 	blt	zero,r23,8111f050 <__reset+0xfb0ff050>
8111f6a8:	003e8406 	br	8111f0bc <__reset+0xfb0ff0bc>
8111f6ac:	00bfffc4 	movi	r2,-1
8111f6b0:	003fe406 	br	8111f644 <__reset+0xfb0ff644>
8111f6b4:	00ffffc4 	movi	r3,-1
8111f6b8:	1884983a 	sll	r2,r3,r2
8111f6bc:	14a4703a 	and	r18,r2,r18
8111f6c0:	003e7e06 	br	8111f0bc <__reset+0xfb0ff0bc>
8111f6c4:	00bffc34 	movhi	r2,65520
8111f6c8:	b8af883a 	add	r23,r23,r2
8111f6cc:	057fffc4 	movi	r21,-1
8111f6d0:	00800434 	movhi	r2,16
8111f6d4:	1545883a 	add	r2,r2,r21
8111f6d8:	b8acb03a 	or	r22,r23,r2
8111f6dc:	003f6a06 	br	8111f488 <__reset+0xfb0ff488>
8111f6e0:	01604534 	movhi	r5,33044
8111f6e4:	29798a04 	addi	r5,r5,-6616
8111f6e8:	d9800204 	addi	r6,sp,8
8111f6ec:	d9000604 	addi	r4,sp,24
8111f6f0:	1123ae00 	call	81123ae0 <__hexnan>
8111f6f4:	00c00144 	movi	r3,5
8111f6f8:	10fb5c1e 	bne	r2,r3,8111e46c <__reset+0xfb0fe46c>
8111f6fc:	dc400317 	ldw	r17,12(sp)
8111f700:	dc800217 	ldw	r18,8(sp)
8111f704:	8c5ffc34 	orhi	r17,r17,32752
8111f708:	003b5a06 	br	8111e474 <__reset+0xfb0fe474>
8111f70c:	480b883a 	mov	r5,r9
8111f710:	d9800617 	ldw	r6,24(sp)
8111f714:	4a400044 	addi	r9,r9,1
8111f718:	003eeb06 	br	8111f2c8 <__reset+0xfb0ff2c8>
8111f71c:	1025883a 	mov	r18,r2
8111f720:	1823883a 	mov	r17,r3
8111f724:	003c4c06 	br	8111e858 <__reset+0xfb0fe858>
8111f728:	00ffffc4 	movi	r3,-1
8111f72c:	10ffc91e 	bne	r2,r3,8111f654 <__reset+0xfb0ff654>
8111f730:	003da906 	br	8111edd8 <__reset+0xfb0fedd8>
8111f734:	10bff804 	addi	r2,r2,-32
8111f738:	00ffffc4 	movi	r3,-1
8111f73c:	1884983a 	sll	r2,r3,r2
8111f740:	1462703a 	and	r17,r2,r17
8111f744:	003e5d06 	br	8111f0bc <__reset+0xfb0ff0bc>
8111f748:	1025883a 	mov	r18,r2
8111f74c:	1823883a 	mov	r17,r3
8111f750:	003e5806 	br	8111f0b4 <__reset+0xfb0ff0b4>

8111f754 <strtod>:
8111f754:	00a04534 	movhi	r2,33044
8111f758:	10821504 	addi	r2,r2,2132
8111f75c:	280d883a 	mov	r6,r5
8111f760:	200b883a 	mov	r5,r4
8111f764:	11000017 	ldw	r4,0(r2)
8111f768:	111e1541 	jmpi	8111e154 <_strtod_r>

8111f76c <strtof>:
8111f76c:	defffb04 	addi	sp,sp,-20
8111f770:	de00012e 	bgeu	sp,et,8111f778 <strtof+0xc>
8111f774:	003b68fa 	trap	3
8111f778:	dcc00315 	stw	r19,12(sp)
8111f77c:	04e04534 	movhi	r19,33044
8111f780:	9cc21504 	addi	r19,r19,2132
8111f784:	280d883a 	mov	r6,r5
8111f788:	200b883a 	mov	r5,r4
8111f78c:	99000017 	ldw	r4,0(r19)
8111f790:	dfc00415 	stw	ra,16(sp)
8111f794:	dc800215 	stw	r18,8(sp)
8111f798:	dc400115 	stw	r17,4(sp)
8111f79c:	dc000015 	stw	r16,0(sp)
8111f7a0:	111e1540 	call	8111e154 <_strtod_r>
8111f7a4:	1009883a 	mov	r4,r2
8111f7a8:	180b883a 	mov	r5,r3
8111f7ac:	1025883a 	mov	r18,r2
8111f7b0:	1823883a 	mov	r17,r3
8111f7b4:	11116140 	call	81111614 <__truncdfsf2>
8111f7b8:	000b883a 	mov	r5,zero
8111f7bc:	1009883a 	mov	r4,r2
8111f7c0:	1021883a 	mov	r16,r2
8111f7c4:	1124e640 	call	81124e64 <__eqsf2>
8111f7c8:	1000111e 	bne	r2,zero,8111f810 <strtof+0xa4>
8111f7cc:	000d883a 	mov	r6,zero
8111f7d0:	000f883a 	mov	r7,zero
8111f7d4:	9009883a 	mov	r4,r18
8111f7d8:	880b883a 	mov	r5,r17
8111f7dc:	11262040 	call	81126204 <__eqdf2>
8111f7e0:	10000b26 	beq	r2,zero,8111f810 <strtof+0xa4>
8111f7e4:	98800017 	ldw	r2,0(r19)
8111f7e8:	00c00884 	movi	r3,34
8111f7ec:	10c00015 	stw	r3,0(r2)
8111f7f0:	8005883a 	mov	r2,r16
8111f7f4:	dfc00417 	ldw	ra,16(sp)
8111f7f8:	dcc00317 	ldw	r19,12(sp)
8111f7fc:	dc800217 	ldw	r18,8(sp)
8111f800:	dc400117 	ldw	r17,4(sp)
8111f804:	dc000017 	ldw	r16,0(sp)
8111f808:	dec00504 	addi	sp,sp,20
8111f80c:	f800283a 	ret
8111f810:	015fe034 	movhi	r5,32640
8111f814:	297fffc4 	addi	r5,r5,-1
8111f818:	8009883a 	mov	r4,r16
8111f81c:	1124edc0 	call	81124edc <__gesf2>
8111f820:	0080070e 	bge	zero,r2,8111f840 <strtof+0xd4>
8111f824:	01dffc34 	movhi	r7,32752
8111f828:	39ffffc4 	addi	r7,r7,-1
8111f82c:	01bfffc4 	movi	r6,-1
8111f830:	9009883a 	mov	r4,r18
8111f834:	880b883a 	mov	r5,r17
8111f838:	112628c0 	call	8112628c <__gedf2>
8111f83c:	00bfe90e 	bge	zero,r2,8111f7e4 <__reset+0xfb0ff7e4>
8111f840:	017fe034 	movhi	r5,65408
8111f844:	297fffc4 	addi	r5,r5,-1
8111f848:	8009883a 	mov	r4,r16
8111f84c:	1124f980 	call	81124f98 <__lesf2>
8111f850:	103fe70e 	bge	r2,zero,8111f7f0 <__reset+0xfb0ff7f0>
8111f854:	01fffc34 	movhi	r7,65520
8111f858:	39ffffc4 	addi	r7,r7,-1
8111f85c:	01bfffc4 	movi	r6,-1
8111f860:	9009883a 	mov	r4,r18
8111f864:	880b883a 	mov	r5,r17
8111f868:	11263680 	call	81126368 <__ledf2>
8111f86c:	103fdd0e 	bge	r2,zero,8111f7e4 <__reset+0xfb0ff7e4>
8111f870:	003fdf06 	br	8111f7f0 <__reset+0xfb0ff7f0>

8111f874 <_strtoll_r>:
8111f874:	00a04534 	movhi	r2,33044
8111f878:	defff304 	addi	sp,sp,-52
8111f87c:	10821304 	addi	r2,r2,2124
8111f880:	de00012e 	bgeu	sp,et,8111f888 <_strtoll_r+0x14>
8111f884:	003b68fa 	trap	3
8111f888:	dc800515 	stw	r18,20(sp)
8111f88c:	14800017 	ldw	r18,0(r2)
8111f890:	dd800915 	stw	r22,36(sp)
8111f894:	dd400815 	stw	r21,32(sp)
8111f898:	dcc00615 	stw	r19,24(sp)
8111f89c:	d9000015 	stw	r4,0(sp)
8111f8a0:	dfc00c15 	stw	ra,48(sp)
8111f8a4:	df000b15 	stw	fp,44(sp)
8111f8a8:	ddc00a15 	stw	r23,40(sp)
8111f8ac:	dd000715 	stw	r20,28(sp)
8111f8b0:	dc400415 	stw	r17,16(sp)
8111f8b4:	dc000315 	stw	r16,12(sp)
8111f8b8:	282d883a 	mov	r22,r5
8111f8bc:	302b883a 	mov	r21,r6
8111f8c0:	3827883a 	mov	r19,r7
8111f8c4:	2809883a 	mov	r4,r5
8111f8c8:	24000003 	ldbu	r16,0(r4)
8111f8cc:	24400044 	addi	r17,r4,1
8111f8d0:	2007883a 	mov	r3,r4
8111f8d4:	9405883a 	add	r2,r18,r16
8111f8d8:	10800043 	ldbu	r2,1(r2)
8111f8dc:	8809883a 	mov	r4,r17
8111f8e0:	1080020c 	andi	r2,r2,8
8111f8e4:	103ff81e 	bne	r2,zero,8111f8c8 <__reset+0xfb0ff8c8>
8111f8e8:	00800b44 	movi	r2,45
8111f8ec:	80807826 	beq	r16,r2,8111fad0 <_strtoll_r+0x25c>
8111f8f0:	00800ac4 	movi	r2,43
8111f8f4:	80807a26 	beq	r16,r2,8111fae0 <_strtoll_r+0x26c>
8111f8f8:	0039883a 	mov	fp,zero
8111f8fc:	98004e26 	beq	r19,zero,8111fa38 <_strtoll_r+0x1c4>
8111f900:	00800404 	movi	r2,16
8111f904:	98808226 	beq	r19,r2,8111fb10 <_strtoll_r+0x29c>
8111f908:	982fd7fa 	srai	r23,r19,31
8111f90c:	9829883a 	mov	r20,r19
8111f910:	e0004f26 	beq	fp,zero,8111fa50 <_strtoll_r+0x1dc>
8111f914:	0017883a 	mov	r11,zero
8111f918:	02a00034 	movhi	r10,32768
8111f91c:	5809883a 	mov	r4,r11
8111f920:	500b883a 	mov	r5,r10
8111f924:	a00d883a 	mov	r6,r20
8111f928:	b80f883a 	mov	r7,r23
8111f92c:	da800215 	stw	r10,8(sp)
8111f930:	dac00115 	stw	r11,4(sp)
8111f934:	11247700 	call	81124770 <__umoddi3>
8111f938:	dac00117 	ldw	r11,4(sp)
8111f93c:	da800217 	ldw	r10,8(sp)
8111f940:	a00d883a 	mov	r6,r20
8111f944:	5809883a 	mov	r4,r11
8111f948:	500b883a 	mov	r5,r10
8111f94c:	b80f883a 	mov	r7,r23
8111f950:	d8800115 	stw	r2,4(sp)
8111f954:	11241f00 	call	811241f0 <__udivdi3>
8111f958:	9409883a 	add	r4,r18,r16
8111f95c:	21000043 	ldbu	r4,1(r4)
8111f960:	1019883a 	mov	r12,r2
8111f964:	880b883a 	mov	r5,r17
8111f968:	2240010c 	andi	r9,r4,4
8111f96c:	0015883a 	mov	r10,zero
8111f970:	000d883a 	mov	r6,zero
8111f974:	000f883a 	mov	r7,zero
8111f978:	03400044 	movi	r13,1
8111f97c:	02ffffc4 	movi	r11,-1
8111f980:	da000117 	ldw	r8,4(sp)
8111f984:	48000d26 	beq	r9,zero,8111f9bc <_strtoll_r+0x148>
8111f988:	843ff404 	addi	r16,r16,-48
8111f98c:	84c0110e 	bge	r16,r19,8111f9d4 <_strtoll_r+0x160>
8111f990:	52c00426 	beq	r10,r11,8111f9a4 <_strtoll_r+0x130>
8111f994:	19c00236 	bltu	r3,r7,8111f9a0 <_strtoll_r+0x12c>
8111f998:	38c0311e 	bne	r7,r3,8111fa60 <_strtoll_r+0x1ec>
8111f99c:	6180302e 	bgeu	r12,r6,8111fa60 <_strtoll_r+0x1ec>
8111f9a0:	02bfffc4 	movi	r10,-1
8111f9a4:	2c000003 	ldbu	r16,0(r5)
8111f9a8:	29400044 	addi	r5,r5,1
8111f9ac:	9409883a 	add	r4,r18,r16
8111f9b0:	21000043 	ldbu	r4,1(r4)
8111f9b4:	2240010c 	andi	r9,r4,4
8111f9b8:	483ff31e 	bne	r9,zero,8111f988 <__reset+0xfb0ff988>
8111f9bc:	210000cc 	andi	r4,r4,3
8111f9c0:	20000426 	beq	r4,zero,8111f9d4 <_strtoll_r+0x160>
8111f9c4:	23403426 	beq	r4,r13,8111fa98 <_strtoll_r+0x224>
8111f9c8:	008015c4 	movi	r2,87
8111f9cc:	80a1c83a 	sub	r16,r16,r2
8111f9d0:	84ffef16 	blt	r16,r19,8111f990 <__reset+0xfb0ff990>
8111f9d4:	00bfffc4 	movi	r2,-1
8111f9d8:	50803426 	beq	r10,r2,8111faac <_strtoll_r+0x238>
8111f9dc:	e0000426 	beq	fp,zero,8111f9f0 <_strtoll_r+0x17c>
8111f9e0:	018dc83a 	sub	r6,zero,r6
8111f9e4:	3004c03a 	cmpne	r2,r6,zero
8111f9e8:	01e1c83a 	sub	r16,zero,r7
8111f9ec:	808fc83a 	sub	r7,r16,r2
8111f9f0:	3005883a 	mov	r2,r6
8111f9f4:	3807883a 	mov	r3,r7
8111f9f8:	a8000326 	beq	r21,zero,8111fa08 <_strtoll_r+0x194>
8111f9fc:	5000321e 	bne	r10,zero,8111fac8 <_strtoll_r+0x254>
8111fa00:	b00b883a 	mov	r5,r22
8111fa04:	a9400015 	stw	r5,0(r21)
8111fa08:	dfc00c17 	ldw	ra,48(sp)
8111fa0c:	df000b17 	ldw	fp,44(sp)
8111fa10:	ddc00a17 	ldw	r23,40(sp)
8111fa14:	dd800917 	ldw	r22,36(sp)
8111fa18:	dd400817 	ldw	r21,32(sp)
8111fa1c:	dd000717 	ldw	r20,28(sp)
8111fa20:	dcc00617 	ldw	r19,24(sp)
8111fa24:	dc800517 	ldw	r18,20(sp)
8111fa28:	dc400417 	ldw	r17,16(sp)
8111fa2c:	dc000317 	ldw	r16,12(sp)
8111fa30:	dec00d04 	addi	sp,sp,52
8111fa34:	f800283a 	ret
8111fa38:	00800c04 	movi	r2,48
8111fa3c:	80802c26 	beq	r16,r2,8111faf0 <_strtoll_r+0x27c>
8111fa40:	05000284 	movi	r20,10
8111fa44:	002f883a 	mov	r23,zero
8111fa48:	a027883a 	mov	r19,r20
8111fa4c:	e03fb11e 	bne	fp,zero,8111f914 <__reset+0xfb0ff914>
8111fa50:	02a00034 	movhi	r10,32768
8111fa54:	52bfffc4 	addi	r10,r10,-1
8111fa58:	02ffffc4 	movi	r11,-1
8111fa5c:	003faf06 	br	8111f91c <__reset+0xfb0ff91c>
8111fa60:	33000f26 	beq	r6,r12,8111faa0 <_strtoll_r+0x22c>
8111fa64:	b985383a 	mul	r2,r23,r6
8111fa68:	3d0f383a 	mul	r7,r7,r20
8111fa6c:	3508383a 	mulxuu	r4,r6,r20
8111fa70:	350d383a 	mul	r6,r6,r20
8111fa74:	8013d7fa 	srai	r9,r16,31
8111fa78:	388f883a 	add	r7,r7,r2
8111fa7c:	818d883a 	add	r6,r16,r6
8111fa80:	390f883a 	add	r7,r7,r4
8111fa84:	3421803a 	cmpltu	r16,r6,r16
8111fa88:	49cf883a 	add	r7,r9,r7
8111fa8c:	81cf883a 	add	r7,r16,r7
8111fa90:	02800044 	movi	r10,1
8111fa94:	003fc306 	br	8111f9a4 <__reset+0xfb0ff9a4>
8111fa98:	00800dc4 	movi	r2,55
8111fa9c:	003fcb06 	br	8111f9cc <__reset+0xfb0ff9cc>
8111faa0:	38fff01e 	bne	r7,r3,8111fa64 <__reset+0xfb0ffa64>
8111faa4:	443fbe16 	blt	r8,r16,8111f9a0 <__reset+0xfb0ff9a0>
8111faa8:	003fee06 	br	8111fa64 <__reset+0xfb0ffa64>
8111faac:	e0002426 	beq	fp,zero,8111fb40 <_strtoll_r+0x2cc>
8111fab0:	0005883a 	mov	r2,zero
8111fab4:	00e00034 	movhi	r3,32768
8111fab8:	d9800017 	ldw	r6,0(sp)
8111fabc:	01000884 	movi	r4,34
8111fac0:	31000015 	stw	r4,0(r6)
8111fac4:	a83fd026 	beq	r21,zero,8111fa08 <__reset+0xfb0ffa08>
8111fac8:	297fffc4 	addi	r5,r5,-1
8111facc:	003fcd06 	br	8111fa04 <__reset+0xfb0ffa04>
8111fad0:	1c400084 	addi	r17,r3,2
8111fad4:	1c000043 	ldbu	r16,1(r3)
8111fad8:	07000044 	movi	fp,1
8111fadc:	003f8706 	br	8111f8fc <__reset+0xfb0ff8fc>
8111fae0:	1c400084 	addi	r17,r3,2
8111fae4:	1c000043 	ldbu	r16,1(r3)
8111fae8:	0039883a 	mov	fp,zero
8111faec:	003f8306 	br	8111f8fc <__reset+0xfb0ff8fc>
8111faf0:	88800003 	ldbu	r2,0(r17)
8111faf4:	00c01604 	movi	r3,88
8111faf8:	108037cc 	andi	r2,r2,223
8111fafc:	10c00a26 	beq	r2,r3,8111fb28 <_strtoll_r+0x2b4>
8111fb00:	05000204 	movi	r20,8
8111fb04:	002f883a 	mov	r23,zero
8111fb08:	a027883a 	mov	r19,r20
8111fb0c:	003f8006 	br	8111f910 <__reset+0xfb0ff910>
8111fb10:	00800c04 	movi	r2,48
8111fb14:	80800e1e 	bne	r16,r2,8111fb50 <_strtoll_r+0x2dc>
8111fb18:	88800003 	ldbu	r2,0(r17)
8111fb1c:	00c01604 	movi	r3,88
8111fb20:	108037cc 	andi	r2,r2,223
8111fb24:	10c00a1e 	bne	r2,r3,8111fb50 <_strtoll_r+0x2dc>
8111fb28:	05000404 	movi	r20,16
8111fb2c:	8c000043 	ldbu	r16,1(r17)
8111fb30:	002f883a 	mov	r23,zero
8111fb34:	8c400084 	addi	r17,r17,2
8111fb38:	a027883a 	mov	r19,r20
8111fb3c:	003f7406 	br	8111f910 <__reset+0xfb0ff910>
8111fb40:	00e00034 	movhi	r3,32768
8111fb44:	18ffffc4 	addi	r3,r3,-1
8111fb48:	5005883a 	mov	r2,r10
8111fb4c:	003fda06 	br	8111fab8 <__reset+0xfb0ffab8>
8111fb50:	9829883a 	mov	r20,r19
8111fb54:	002f883a 	mov	r23,zero
8111fb58:	003f6d06 	br	8111f910 <__reset+0xfb0ff910>

8111fb5c <_strtoul_r>:
8111fb5c:	00a04534 	movhi	r2,33044
8111fb60:	defff604 	addi	sp,sp,-40
8111fb64:	10821304 	addi	r2,r2,2124
8111fb68:	de00012e 	bgeu	sp,et,8111fb70 <_strtoul_r+0x14>
8111fb6c:	003b68fa 	trap	3
8111fb70:	dc800315 	stw	r18,12(sp)
8111fb74:	14800017 	ldw	r18,0(r2)
8111fb78:	dd400615 	stw	r21,24(sp)
8111fb7c:	dd000515 	stw	r20,20(sp)
8111fb80:	dcc00415 	stw	r19,16(sp)
8111fb84:	2029883a 	mov	r20,r4
8111fb88:	dfc00915 	stw	ra,36(sp)
8111fb8c:	ddc00815 	stw	r23,32(sp)
8111fb90:	dd800715 	stw	r22,28(sp)
8111fb94:	dc400215 	stw	r17,8(sp)
8111fb98:	dc000115 	stw	r16,4(sp)
8111fb9c:	2827883a 	mov	r19,r5
8111fba0:	382b883a 	mov	r21,r7
8111fba4:	2809883a 	mov	r4,r5
8111fba8:	24000003 	ldbu	r16,0(r4)
8111fbac:	24400044 	addi	r17,r4,1
8111fbb0:	2007883a 	mov	r3,r4
8111fbb4:	9405883a 	add	r2,r18,r16
8111fbb8:	10800043 	ldbu	r2,1(r2)
8111fbbc:	8809883a 	mov	r4,r17
8111fbc0:	1080020c 	andi	r2,r2,8
8111fbc4:	103ff81e 	bne	r2,zero,8111fba8 <__reset+0xfb0ffba8>
8111fbc8:	00800b44 	movi	r2,45
8111fbcc:	80805326 	beq	r16,r2,8111fd1c <_strtoul_r+0x1c0>
8111fbd0:	00800ac4 	movi	r2,43
8111fbd4:	80805526 	beq	r16,r2,8111fd2c <_strtoul_r+0x1d0>
8111fbd8:	002f883a 	mov	r23,zero
8111fbdc:	a8000f26 	beq	r21,zero,8111fc1c <_strtoul_r+0xc0>
8111fbe0:	00800404 	movi	r2,16
8111fbe4:	a8805f26 	beq	r21,r2,8111fd64 <_strtoul_r+0x208>
8111fbe8:	013fffc4 	movi	r4,-1
8111fbec:	a80b883a 	mov	r5,r21
8111fbf0:	d9800015 	stw	r6,0(sp)
8111fbf4:	1124da80 	call	81124da8 <__udivsi3>
8111fbf8:	a80b883a 	mov	r5,r21
8111fbfc:	013fffc4 	movi	r4,-1
8111fc00:	102d883a 	mov	r22,r2
8111fc04:	1124e0c0 	call	81124e0c <__umodsi3>
8111fc08:	d9800017 	ldw	r6,0(sp)
8111fc0c:	1019883a 	mov	r12,r2
8111fc10:	a817883a 	mov	r11,r21
8111fc14:	b00f883a 	mov	r7,r22
8111fc18:	00000706 	br	8111fc38 <_strtoul_r+0xdc>
8111fc1c:	00800c04 	movi	r2,48
8111fc20:	80804626 	beq	r16,r2,8111fd3c <_strtoul_r+0x1e0>
8111fc24:	05400284 	movi	r21,10
8111fc28:	01c666b4 	movhi	r7,6554
8111fc2c:	03000144 	movi	r12,5
8111fc30:	39e66644 	addi	r7,r7,-26215
8111fc34:	a817883a 	mov	r11,r21
8111fc38:	9407883a 	add	r3,r18,r16
8111fc3c:	18c00043 	ldbu	r3,1(r3)
8111fc40:	8809883a 	mov	r4,r17
8111fc44:	0011883a 	mov	r8,zero
8111fc48:	1940010c 	andi	r5,r3,4
8111fc4c:	0005883a 	mov	r2,zero
8111fc50:	02800044 	movi	r10,1
8111fc54:	027fffc4 	movi	r9,-1
8111fc58:	28000e26 	beq	r5,zero,8111fc94 <_strtoul_r+0x138>
8111fc5c:	843ff404 	addi	r16,r16,-48
8111fc60:	8540120e 	bge	r16,r21,8111fcac <_strtoul_r+0x150>
8111fc64:	42400526 	beq	r8,r9,8111fc7c <_strtoul_r+0x120>
8111fc68:	38802236 	bltu	r7,r2,8111fcf4 <_strtoul_r+0x198>
8111fc6c:	11c02026 	beq	r2,r7,8111fcf0 <_strtoul_r+0x194>
8111fc70:	12c5383a 	mul	r2,r2,r11
8111fc74:	02000044 	movi	r8,1
8111fc78:	8085883a 	add	r2,r16,r2
8111fc7c:	24000003 	ldbu	r16,0(r4)
8111fc80:	21000044 	addi	r4,r4,1
8111fc84:	9407883a 	add	r3,r18,r16
8111fc88:	18c00043 	ldbu	r3,1(r3)
8111fc8c:	1940010c 	andi	r5,r3,4
8111fc90:	283ff21e 	bne	r5,zero,8111fc5c <__reset+0xfb0ffc5c>
8111fc94:	18c000cc 	andi	r3,r3,3
8111fc98:	18000426 	beq	r3,zero,8111fcac <_strtoul_r+0x150>
8111fc9c:	1a801726 	beq	r3,r10,8111fcfc <_strtoul_r+0x1a0>
8111fca0:	00c015c4 	movi	r3,87
8111fca4:	80e1c83a 	sub	r16,r16,r3
8111fca8:	857fee16 	blt	r16,r21,8111fc64 <__reset+0xfb0ffc64>
8111fcac:	40001516 	blt	r8,zero,8111fd04 <_strtoul_r+0x1a8>
8111fcb0:	b8000126 	beq	r23,zero,8111fcb8 <_strtoul_r+0x15c>
8111fcb4:	0085c83a 	sub	r2,zero,r2
8111fcb8:	30000226 	beq	r6,zero,8111fcc4 <_strtoul_r+0x168>
8111fcbc:	4000151e 	bne	r8,zero,8111fd14 <_strtoul_r+0x1b8>
8111fcc0:	34c00015 	stw	r19,0(r6)
8111fcc4:	dfc00917 	ldw	ra,36(sp)
8111fcc8:	ddc00817 	ldw	r23,32(sp)
8111fccc:	dd800717 	ldw	r22,28(sp)
8111fcd0:	dd400617 	ldw	r21,24(sp)
8111fcd4:	dd000517 	ldw	r20,20(sp)
8111fcd8:	dcc00417 	ldw	r19,16(sp)
8111fcdc:	dc800317 	ldw	r18,12(sp)
8111fce0:	dc400217 	ldw	r17,8(sp)
8111fce4:	dc000117 	ldw	r16,4(sp)
8111fce8:	dec00a04 	addi	sp,sp,40
8111fcec:	f800283a 	ret
8111fcf0:	643fdf0e 	bge	r12,r16,8111fc70 <__reset+0xfb0ffc70>
8111fcf4:	023fffc4 	movi	r8,-1
8111fcf8:	003fe006 	br	8111fc7c <__reset+0xfb0ffc7c>
8111fcfc:	00c00dc4 	movi	r3,55
8111fd00:	003fe806 	br	8111fca4 <__reset+0xfb0ffca4>
8111fd04:	00800884 	movi	r2,34
8111fd08:	a0800015 	stw	r2,0(r20)
8111fd0c:	00bfffc4 	movi	r2,-1
8111fd10:	303fec26 	beq	r6,zero,8111fcc4 <__reset+0xfb0ffcc4>
8111fd14:	24ffffc4 	addi	r19,r4,-1
8111fd18:	003fe906 	br	8111fcc0 <__reset+0xfb0ffcc0>
8111fd1c:	1c400084 	addi	r17,r3,2
8111fd20:	1c000043 	ldbu	r16,1(r3)
8111fd24:	05c00044 	movi	r23,1
8111fd28:	003fac06 	br	8111fbdc <__reset+0xfb0ffbdc>
8111fd2c:	1c400084 	addi	r17,r3,2
8111fd30:	1c000043 	ldbu	r16,1(r3)
8111fd34:	002f883a 	mov	r23,zero
8111fd38:	003fa806 	br	8111fbdc <__reset+0xfb0ffbdc>
8111fd3c:	88800003 	ldbu	r2,0(r17)
8111fd40:	00c01604 	movi	r3,88
8111fd44:	108037cc 	andi	r2,r2,223
8111fd48:	10c00c26 	beq	r2,r3,8111fd7c <_strtoul_r+0x220>
8111fd4c:	05400204 	movi	r21,8
8111fd50:	01c80034 	movhi	r7,8192
8111fd54:	030001c4 	movi	r12,7
8111fd58:	39ffffc4 	addi	r7,r7,-1
8111fd5c:	a817883a 	mov	r11,r21
8111fd60:	003fb506 	br	8111fc38 <__reset+0xfb0ffc38>
8111fd64:	00800c04 	movi	r2,48
8111fd68:	80800c1e 	bne	r16,r2,8111fd9c <_strtoul_r+0x240>
8111fd6c:	88800003 	ldbu	r2,0(r17)
8111fd70:	00c01604 	movi	r3,88
8111fd74:	108037cc 	andi	r2,r2,223
8111fd78:	10c0081e 	bne	r2,r3,8111fd9c <_strtoul_r+0x240>
8111fd7c:	02c00404 	movi	r11,16
8111fd80:	05840034 	movhi	r22,4096
8111fd84:	8c000043 	ldbu	r16,1(r17)
8111fd88:	030003c4 	movi	r12,15
8111fd8c:	8c400084 	addi	r17,r17,2
8111fd90:	b5bfffc4 	addi	r22,r22,-1
8111fd94:	582b883a 	mov	r21,r11
8111fd98:	003f9e06 	br	8111fc14 <__reset+0xfb0ffc14>
8111fd9c:	01c40034 	movhi	r7,4096
8111fda0:	030003c4 	movi	r12,15
8111fda4:	39ffffc4 	addi	r7,r7,-1
8111fda8:	a817883a 	mov	r11,r21
8111fdac:	003fa206 	br	8111fc38 <__reset+0xfb0ffc38>

8111fdb0 <strtoul>:
8111fdb0:	00a04534 	movhi	r2,33044
8111fdb4:	10821504 	addi	r2,r2,2132
8111fdb8:	300f883a 	mov	r7,r6
8111fdbc:	280d883a 	mov	r6,r5
8111fdc0:	200b883a 	mov	r5,r4
8111fdc4:	11000017 	ldw	r4,0(r2)
8111fdc8:	111fb5c1 	jmpi	8111fb5c <_strtoul_r>

8111fdcc <_strtoull_r>:
8111fdcc:	00a04534 	movhi	r2,33044
8111fdd0:	defff404 	addi	sp,sp,-48
8111fdd4:	10821304 	addi	r2,r2,2124
8111fdd8:	de00012e 	bgeu	sp,et,8111fde0 <_strtoull_r+0x14>
8111fddc:	003b68fa 	trap	3
8111fde0:	dc400315 	stw	r17,12(sp)
8111fde4:	14400017 	ldw	r17,0(r2)
8111fde8:	dd400715 	stw	r21,28(sp)
8111fdec:	dd000615 	stw	r20,24(sp)
8111fdf0:	dcc00515 	stw	r19,20(sp)
8111fdf4:	dc800415 	stw	r18,16(sp)
8111fdf8:	dfc00b15 	stw	ra,44(sp)
8111fdfc:	df000a15 	stw	fp,40(sp)
8111fe00:	ddc00915 	stw	r23,36(sp)
8111fe04:	dd800815 	stw	r22,32(sp)
8111fe08:	dc000215 	stw	r16,8(sp)
8111fe0c:	2827883a 	mov	r19,r5
8111fe10:	202b883a 	mov	r21,r4
8111fe14:	3029883a 	mov	r20,r6
8111fe18:	3825883a 	mov	r18,r7
8111fe1c:	2807883a 	mov	r3,r5
8111fe20:	1c000003 	ldbu	r16,0(r3)
8111fe24:	1f000044 	addi	fp,r3,1
8111fe28:	1809883a 	mov	r4,r3
8111fe2c:	8c05883a 	add	r2,r17,r16
8111fe30:	10800043 	ldbu	r2,1(r2)
8111fe34:	e007883a 	mov	r3,fp
8111fe38:	1080020c 	andi	r2,r2,8
8111fe3c:	103ff81e 	bne	r2,zero,8111fe20 <__reset+0xfb0ffe20>
8111fe40:	00800b44 	movi	r2,45
8111fe44:	80806e26 	beq	r16,r2,81120000 <_strtoull_r+0x234>
8111fe48:	00800ac4 	movi	r2,43
8111fe4c:	80807026 	beq	r16,r2,81120010 <_strtoull_r+0x244>
8111fe50:	002f883a 	mov	r23,zero
8111fe54:	90001426 	beq	r18,zero,8111fea8 <_strtoull_r+0xdc>
8111fe58:	00800404 	movi	r2,16
8111fe5c:	90807c26 	beq	r18,r2,81120050 <_strtoull_r+0x284>
8111fe60:	902dd7fa 	srai	r22,r18,31
8111fe64:	013fffc4 	movi	r4,-1
8111fe68:	200b883a 	mov	r5,r4
8111fe6c:	900d883a 	mov	r6,r18
8111fe70:	b00f883a 	mov	r7,r22
8111fe74:	11241f00 	call	811241f0 <__udivdi3>
8111fe78:	013fffc4 	movi	r4,-1
8111fe7c:	900d883a 	mov	r6,r18
8111fe80:	b00f883a 	mov	r7,r22
8111fe84:	200b883a 	mov	r5,r4
8111fe88:	d8c00115 	stw	r3,4(sp)
8111fe8c:	d8800015 	stw	r2,0(sp)
8111fe90:	11247700 	call	81124770 <__umoddi3>
8111fe94:	101b883a 	mov	r13,r2
8111fe98:	9015883a 	mov	r10,r18
8111fe9c:	dac00017 	ldw	r11,0(sp)
8111fea0:	da000117 	ldw	r8,4(sp)
8111fea4:	00000a06 	br	8111fed0 <_strtoull_r+0x104>
8111fea8:	00800c04 	movi	r2,48
8111feac:	80805c26 	beq	r16,r2,81120020 <_strtoull_r+0x254>
8111feb0:	02800284 	movi	r10,10
8111feb4:	02e666b4 	movhi	r11,39322
8111feb8:	020666b4 	movhi	r8,6554
8111febc:	03400144 	movi	r13,5
8111fec0:	5ae66644 	addi	r11,r11,-26215
8111fec4:	42266644 	addi	r8,r8,-26215
8111fec8:	002d883a 	mov	r22,zero
8111fecc:	5025883a 	mov	r18,r10
8111fed0:	8c0b883a 	add	r5,r17,r16
8111fed4:	29400043 	ldbu	r5,1(r5)
8111fed8:	e009883a 	mov	r4,fp
8111fedc:	000f883a 	mov	r7,zero
8111fee0:	2980010c 	andi	r6,r5,4
8111fee4:	0005883a 	mov	r2,zero
8111fee8:	0007883a 	mov	r3,zero
8111feec:	03000044 	movi	r12,1
8111fef0:	027fffc4 	movi	r9,-1
8111fef4:	30000d26 	beq	r6,zero,8111ff2c <_strtoull_r+0x160>
8111fef8:	843ff404 	addi	r16,r16,-48
8111fefc:	8480110e 	bge	r16,r18,8111ff44 <_strtoull_r+0x178>
8111ff00:	3a400426 	beq	r7,r9,8111ff14 <_strtoull_r+0x148>
8111ff04:	40c00236 	bltu	r8,r3,8111ff10 <_strtoull_r+0x144>
8111ff08:	1a00231e 	bne	r3,r8,8111ff98 <_strtoull_r+0x1cc>
8111ff0c:	5880222e 	bgeu	r11,r2,8111ff98 <_strtoull_r+0x1cc>
8111ff10:	01ffffc4 	movi	r7,-1
8111ff14:	24000003 	ldbu	r16,0(r4)
8111ff18:	21000044 	addi	r4,r4,1
8111ff1c:	8c0b883a 	add	r5,r17,r16
8111ff20:	29400043 	ldbu	r5,1(r5)
8111ff24:	2980010c 	andi	r6,r5,4
8111ff28:	303ff31e 	bne	r6,zero,8111fef8 <__reset+0xfb0ffef8>
8111ff2c:	294000cc 	andi	r5,r5,3
8111ff30:	28000426 	beq	r5,zero,8111ff44 <_strtoull_r+0x178>
8111ff34:	2b002626 	beq	r5,r12,8111ffd0 <_strtoull_r+0x204>
8111ff38:	014015c4 	movi	r5,87
8111ff3c:	8161c83a 	sub	r16,r16,r5
8111ff40:	84bfef16 	blt	r16,r18,8111ff00 <__reset+0xfb0fff00>
8111ff44:	38002716 	blt	r7,zero,8111ffe4 <_strtoull_r+0x218>
8111ff48:	b8000426 	beq	r23,zero,8111ff5c <_strtoull_r+0x190>
8111ff4c:	0085c83a 	sub	r2,zero,r2
8111ff50:	100ac03a 	cmpne	r5,r2,zero
8111ff54:	00e1c83a 	sub	r16,zero,r3
8111ff58:	8147c83a 	sub	r3,r16,r5
8111ff5c:	a0000226 	beq	r20,zero,8111ff68 <_strtoull_r+0x19c>
8111ff60:	3800251e 	bne	r7,zero,8111fff8 <_strtoull_r+0x22c>
8111ff64:	a4c00015 	stw	r19,0(r20)
8111ff68:	dfc00b17 	ldw	ra,44(sp)
8111ff6c:	df000a17 	ldw	fp,40(sp)
8111ff70:	ddc00917 	ldw	r23,36(sp)
8111ff74:	dd800817 	ldw	r22,32(sp)
8111ff78:	dd400717 	ldw	r21,28(sp)
8111ff7c:	dd000617 	ldw	r20,24(sp)
8111ff80:	dcc00517 	ldw	r19,20(sp)
8111ff84:	dc800417 	ldw	r18,16(sp)
8111ff88:	dc400317 	ldw	r17,12(sp)
8111ff8c:	dc000217 	ldw	r16,8(sp)
8111ff90:	dec00c04 	addi	sp,sp,48
8111ff94:	f800283a 	ret
8111ff98:	12c00f26 	beq	r2,r11,8111ffd8 <_strtoull_r+0x20c>
8111ff9c:	b08d383a 	mul	r6,r22,r2
8111ffa0:	1a87383a 	mul	r3,r3,r10
8111ffa4:	128a383a 	mulxuu	r5,r2,r10
8111ffa8:	1285383a 	mul	r2,r2,r10
8111ffac:	800fd7fa 	srai	r7,r16,31
8111ffb0:	1987883a 	add	r3,r3,r6
8111ffb4:	8085883a 	add	r2,r16,r2
8111ffb8:	1947883a 	add	r3,r3,r5
8111ffbc:	38c7883a 	add	r3,r7,r3
8111ffc0:	1421803a 	cmpltu	r16,r2,r16
8111ffc4:	80c7883a 	add	r3,r16,r3
8111ffc8:	01c00044 	movi	r7,1
8111ffcc:	003fd106 	br	8111ff14 <__reset+0xfb0fff14>
8111ffd0:	01400dc4 	movi	r5,55
8111ffd4:	003fd906 	br	8111ff3c <__reset+0xfb0fff3c>
8111ffd8:	1a3ff01e 	bne	r3,r8,8111ff9c <__reset+0xfb0fff9c>
8111ffdc:	6c3fcc16 	blt	r13,r16,8111ff10 <__reset+0xfb0fff10>
8111ffe0:	003fee06 	br	8111ff9c <__reset+0xfb0fff9c>
8111ffe4:	00800884 	movi	r2,34
8111ffe8:	a8800015 	stw	r2,0(r21)
8111ffec:	00bfffc4 	movi	r2,-1
8111fff0:	1007883a 	mov	r3,r2
8111fff4:	a03fdc26 	beq	r20,zero,8111ff68 <__reset+0xfb0fff68>
8111fff8:	24ffffc4 	addi	r19,r4,-1
8111fffc:	003fd906 	br	8111ff64 <__reset+0xfb0fff64>
81120000:	27000084 	addi	fp,r4,2
81120004:	24000043 	ldbu	r16,1(r4)
81120008:	05c00044 	movi	r23,1
8112000c:	003f9106 	br	8111fe54 <__reset+0xfb0ffe54>
81120010:	27000084 	addi	fp,r4,2
81120014:	24000043 	ldbu	r16,1(r4)
81120018:	002f883a 	mov	r23,zero
8112001c:	003f8d06 	br	8111fe54 <__reset+0xfb0ffe54>
81120020:	e0800003 	ldbu	r2,0(fp)
81120024:	00c01604 	movi	r3,88
81120028:	108037cc 	andi	r2,r2,223
8112002c:	10c00e26 	beq	r2,r3,81120068 <_strtoull_r+0x29c>
81120030:	02800204 	movi	r10,8
81120034:	02ffffc4 	movi	r11,-1
81120038:	02080034 	movhi	r8,8192
8112003c:	034001c4 	movi	r13,7
81120040:	42d1883a 	add	r8,r8,r11
81120044:	002d883a 	mov	r22,zero
81120048:	5025883a 	mov	r18,r10
8112004c:	003fa006 	br	8111fed0 <__reset+0xfb0ffed0>
81120050:	00800c04 	movi	r2,48
81120054:	80800e1e 	bne	r16,r2,81120090 <_strtoull_r+0x2c4>
81120058:	e0800003 	ldbu	r2,0(fp)
8112005c:	00c01604 	movi	r3,88
81120060:	108037cc 	andi	r2,r2,223
81120064:	10c00a1e 	bne	r2,r3,81120090 <_strtoull_r+0x2c4>
81120068:	02800404 	movi	r10,16
8112006c:	02ffffc4 	movi	r11,-1
81120070:	02040034 	movhi	r8,4096
81120074:	e4000043 	ldbu	r16,1(fp)
81120078:	034003c4 	movi	r13,15
8112007c:	e7000084 	addi	fp,fp,2
81120080:	42d1883a 	add	r8,r8,r11
81120084:	002d883a 	mov	r22,zero
81120088:	5025883a 	mov	r18,r10
8112008c:	003f9006 	br	8111fed0 <__reset+0xfb0ffed0>
81120090:	02ffffc4 	movi	r11,-1
81120094:	02040034 	movhi	r8,4096
81120098:	034003c4 	movi	r13,15
8112009c:	42d1883a 	add	r8,r8,r11
811200a0:	9015883a 	mov	r10,r18
811200a4:	002d883a 	mov	r22,zero
811200a8:	003f8906 	br	8111fed0 <__reset+0xfb0ffed0>

811200ac <__ssprint_r>:
811200ac:	defff604 	addi	sp,sp,-40
811200b0:	de00012e 	bgeu	sp,et,811200b8 <__ssprint_r+0xc>
811200b4:	003b68fa 	trap	3
811200b8:	30800217 	ldw	r2,8(r6)
811200bc:	dc800215 	stw	r18,8(sp)
811200c0:	dfc00915 	stw	ra,36(sp)
811200c4:	df000815 	stw	fp,32(sp)
811200c8:	ddc00715 	stw	r23,28(sp)
811200cc:	dd800615 	stw	r22,24(sp)
811200d0:	dd400515 	stw	r21,20(sp)
811200d4:	dd000415 	stw	r20,16(sp)
811200d8:	dcc00315 	stw	r19,12(sp)
811200dc:	dc400115 	stw	r17,4(sp)
811200e0:	dc000015 	stw	r16,0(sp)
811200e4:	3025883a 	mov	r18,r6
811200e8:	10005826 	beq	r2,zero,8112024c <__ssprint_r+0x1a0>
811200ec:	2027883a 	mov	r19,r4
811200f0:	35c00017 	ldw	r23,0(r6)
811200f4:	29000017 	ldw	r4,0(r5)
811200f8:	28800217 	ldw	r2,8(r5)
811200fc:	2823883a 	mov	r17,r5
81120100:	0039883a 	mov	fp,zero
81120104:	0021883a 	mov	r16,zero
81120108:	80003926 	beq	r16,zero,811201f0 <__ssprint_r+0x144>
8112010c:	102b883a 	mov	r21,r2
81120110:	102d883a 	mov	r22,r2
81120114:	80803a36 	bltu	r16,r2,81120200 <__ssprint_r+0x154>
81120118:	88c0030b 	ldhu	r3,12(r17)
8112011c:	1881200c 	andi	r2,r3,1152
81120120:	10002626 	beq	r2,zero,811201bc <__ssprint_r+0x110>
81120124:	88800517 	ldw	r2,20(r17)
81120128:	89400417 	ldw	r5,16(r17)
8112012c:	81800044 	addi	r6,r16,1
81120130:	108f883a 	add	r7,r2,r2
81120134:	3885883a 	add	r2,r7,r2
81120138:	100ed7fa 	srli	r7,r2,31
8112013c:	216dc83a 	sub	r22,r4,r5
81120140:	3589883a 	add	r4,r6,r22
81120144:	3885883a 	add	r2,r7,r2
81120148:	102bd07a 	srai	r21,r2,1
8112014c:	a80d883a 	mov	r6,r21
81120150:	a900022e 	bgeu	r21,r4,8112015c <__ssprint_r+0xb0>
81120154:	202b883a 	mov	r21,r4
81120158:	200d883a 	mov	r6,r4
8112015c:	18c1000c 	andi	r3,r3,1024
81120160:	18002a26 	beq	r3,zero,8112020c <__ssprint_r+0x160>
81120164:	300b883a 	mov	r5,r6
81120168:	9809883a 	mov	r4,r19
8112016c:	11121680 	call	81112168 <_malloc_r>
81120170:	1029883a 	mov	r20,r2
81120174:	10002c26 	beq	r2,zero,81120228 <__ssprint_r+0x17c>
81120178:	89400417 	ldw	r5,16(r17)
8112017c:	b00d883a 	mov	r6,r22
81120180:	1009883a 	mov	r4,r2
81120184:	111297c0 	call	8111297c <memcpy>
81120188:	8880030b 	ldhu	r2,12(r17)
8112018c:	00fedfc4 	movi	r3,-1153
81120190:	10c4703a 	and	r2,r2,r3
81120194:	10802014 	ori	r2,r2,128
81120198:	8880030d 	sth	r2,12(r17)
8112019c:	a589883a 	add	r4,r20,r22
811201a0:	adadc83a 	sub	r22,r21,r22
811201a4:	8d400515 	stw	r21,20(r17)
811201a8:	8d800215 	stw	r22,8(r17)
811201ac:	8d000415 	stw	r20,16(r17)
811201b0:	89000015 	stw	r4,0(r17)
811201b4:	802b883a 	mov	r21,r16
811201b8:	802d883a 	mov	r22,r16
811201bc:	b00d883a 	mov	r6,r22
811201c0:	e00b883a 	mov	r5,fp
811201c4:	111c7340 	call	8111c734 <memmove>
811201c8:	88800217 	ldw	r2,8(r17)
811201cc:	89000017 	ldw	r4,0(r17)
811201d0:	90c00217 	ldw	r3,8(r18)
811201d4:	1545c83a 	sub	r2,r2,r21
811201d8:	2589883a 	add	r4,r4,r22
811201dc:	88800215 	stw	r2,8(r17)
811201e0:	89000015 	stw	r4,0(r17)
811201e4:	1c21c83a 	sub	r16,r3,r16
811201e8:	94000215 	stw	r16,8(r18)
811201ec:	80001726 	beq	r16,zero,8112024c <__ssprint_r+0x1a0>
811201f0:	bf000017 	ldw	fp,0(r23)
811201f4:	bc000117 	ldw	r16,4(r23)
811201f8:	bdc00204 	addi	r23,r23,8
811201fc:	003fc206 	br	81120108 <__reset+0xfb100108>
81120200:	802b883a 	mov	r21,r16
81120204:	802d883a 	mov	r22,r16
81120208:	003fec06 	br	811201bc <__reset+0xfb1001bc>
8112020c:	9809883a 	mov	r4,r19
81120210:	111d9540 	call	8111d954 <_realloc_r>
81120214:	1029883a 	mov	r20,r2
81120218:	103fe01e 	bne	r2,zero,8112019c <__reset+0xfb10019c>
8112021c:	89400417 	ldw	r5,16(r17)
81120220:	9809883a 	mov	r4,r19
81120224:	111b8c00 	call	8111b8c0 <_free_r>
81120228:	88c0030b 	ldhu	r3,12(r17)
8112022c:	00800304 	movi	r2,12
81120230:	98800015 	stw	r2,0(r19)
81120234:	18c01014 	ori	r3,r3,64
81120238:	88c0030d 	sth	r3,12(r17)
8112023c:	00bfffc4 	movi	r2,-1
81120240:	90000215 	stw	zero,8(r18)
81120244:	90000115 	stw	zero,4(r18)
81120248:	00000206 	br	81120254 <__ssprint_r+0x1a8>
8112024c:	90000115 	stw	zero,4(r18)
81120250:	0005883a 	mov	r2,zero
81120254:	dfc00917 	ldw	ra,36(sp)
81120258:	df000817 	ldw	fp,32(sp)
8112025c:	ddc00717 	ldw	r23,28(sp)
81120260:	dd800617 	ldw	r22,24(sp)
81120264:	dd400517 	ldw	r21,20(sp)
81120268:	dd000417 	ldw	r20,16(sp)
8112026c:	dcc00317 	ldw	r19,12(sp)
81120270:	dc800217 	ldw	r18,8(sp)
81120274:	dc400117 	ldw	r17,4(sp)
81120278:	dc000017 	ldw	r16,0(sp)
8112027c:	dec00a04 	addi	sp,sp,40
81120280:	f800283a 	ret

81120284 <___svfiprintf_internal_r>:
81120284:	deffc804 	addi	sp,sp,-224
81120288:	de00012e 	bgeu	sp,et,81120290 <___svfiprintf_internal_r+0xc>
8112028c:	003b68fa 	trap	3
81120290:	2880030b 	ldhu	r2,12(r5)
81120294:	dcc03115 	stw	r19,196(sp)
81120298:	dfc03715 	stw	ra,220(sp)
8112029c:	df003615 	stw	fp,216(sp)
811202a0:	ddc03515 	stw	r23,212(sp)
811202a4:	dd803415 	stw	r22,208(sp)
811202a8:	dd403315 	stw	r21,204(sp)
811202ac:	dd003215 	stw	r20,200(sp)
811202b0:	dc803015 	stw	r18,192(sp)
811202b4:	dc402f15 	stw	r17,188(sp)
811202b8:	dc002e15 	stw	r16,184(sp)
811202bc:	d9402715 	stw	r5,156(sp)
811202c0:	d9002a15 	stw	r4,168(sp)
811202c4:	1080200c 	andi	r2,r2,128
811202c8:	d9c02315 	stw	r7,140(sp)
811202cc:	3027883a 	mov	r19,r6
811202d0:	10000226 	beq	r2,zero,811202dc <___svfiprintf_internal_r+0x58>
811202d4:	28800417 	ldw	r2,16(r5)
811202d8:	10041d26 	beq	r2,zero,81121350 <___svfiprintf_internal_r+0x10cc>
811202dc:	dac01a04 	addi	r11,sp,104
811202e0:	dac01e15 	stw	r11,120(sp)
811202e4:	d8801e17 	ldw	r2,120(sp)
811202e8:	dac019c4 	addi	r11,sp,103
811202ec:	dd402a17 	ldw	r21,168(sp)
811202f0:	ddc02717 	ldw	r23,156(sp)
811202f4:	05a04534 	movhi	r22,33044
811202f8:	05204534 	movhi	r20,33044
811202fc:	dac01f15 	stw	r11,124(sp)
81120300:	12d7c83a 	sub	r11,r2,r11
81120304:	b5b9a204 	addi	r22,r22,-6520
81120308:	a5399e04 	addi	r20,r20,-6536
8112030c:	dec01a15 	stw	sp,104(sp)
81120310:	d8001c15 	stw	zero,112(sp)
81120314:	d8001b15 	stw	zero,108(sp)
81120318:	d811883a 	mov	r8,sp
8112031c:	d8002915 	stw	zero,164(sp)
81120320:	d8002515 	stw	zero,148(sp)
81120324:	dac02b15 	stw	r11,172(sp)
81120328:	98800007 	ldb	r2,0(r19)
8112032c:	1002dd26 	beq	r2,zero,81120ea4 <___svfiprintf_internal_r+0xc20>
81120330:	00c00944 	movi	r3,37
81120334:	9823883a 	mov	r17,r19
81120338:	10c0021e 	bne	r2,r3,81120344 <___svfiprintf_internal_r+0xc0>
8112033c:	00001406 	br	81120390 <___svfiprintf_internal_r+0x10c>
81120340:	10c00326 	beq	r2,r3,81120350 <___svfiprintf_internal_r+0xcc>
81120344:	8c400044 	addi	r17,r17,1
81120348:	88800007 	ldb	r2,0(r17)
8112034c:	103ffc1e 	bne	r2,zero,81120340 <__reset+0xfb100340>
81120350:	8ce1c83a 	sub	r16,r17,r19
81120354:	80000e26 	beq	r16,zero,81120390 <___svfiprintf_internal_r+0x10c>
81120358:	d8c01c17 	ldw	r3,112(sp)
8112035c:	d8801b17 	ldw	r2,108(sp)
81120360:	44c00015 	stw	r19,0(r8)
81120364:	1c07883a 	add	r3,r3,r16
81120368:	10800044 	addi	r2,r2,1
8112036c:	d8c01c15 	stw	r3,112(sp)
81120370:	44000115 	stw	r16,4(r8)
81120374:	d8801b15 	stw	r2,108(sp)
81120378:	00c001c4 	movi	r3,7
8112037c:	18831e16 	blt	r3,r2,81120ff8 <___svfiprintf_internal_r+0xd74>
81120380:	42000204 	addi	r8,r8,8
81120384:	dac02517 	ldw	r11,148(sp)
81120388:	5c17883a 	add	r11,r11,r16
8112038c:	dac02515 	stw	r11,148(sp)
81120390:	88800007 	ldb	r2,0(r17)
81120394:	1002c526 	beq	r2,zero,81120eac <___svfiprintf_internal_r+0xc28>
81120398:	88c00047 	ldb	r3,1(r17)
8112039c:	8cc00044 	addi	r19,r17,1
811203a0:	d8001d85 	stb	zero,118(sp)
811203a4:	0009883a 	mov	r4,zero
811203a8:	000f883a 	mov	r7,zero
811203ac:	043fffc4 	movi	r16,-1
811203b0:	d8002415 	stw	zero,144(sp)
811203b4:	0025883a 	mov	r18,zero
811203b8:	01401604 	movi	r5,88
811203bc:	01800244 	movi	r6,9
811203c0:	02800a84 	movi	r10,42
811203c4:	02401b04 	movi	r9,108
811203c8:	9cc00044 	addi	r19,r19,1
811203cc:	18bff804 	addi	r2,r3,-32
811203d0:	2881dd36 	bltu	r5,r2,81120b48 <___svfiprintf_internal_r+0x8c4>
811203d4:	100490ba 	slli	r2,r2,2
811203d8:	02e044b4 	movhi	r11,33042
811203dc:	5ac0fb04 	addi	r11,r11,1004
811203e0:	12c5883a 	add	r2,r2,r11
811203e4:	10800017 	ldw	r2,0(r2)
811203e8:	1000683a 	jmp	r2
811203ec:	811205e8 	cmpgeui	r4,r16,18455
811203f0:	81120b48 	cmpgei	r4,r16,18477
811203f4:	81120b48 	cmpgei	r4,r16,18477
811203f8:	811205dc 	xori	r4,r16,18455
811203fc:	81120b48 	cmpgei	r4,r16,18477
81120400:	81120b48 	cmpgei	r4,r16,18477
81120404:	81120b48 	cmpgei	r4,r16,18477
81120408:	81120b48 	cmpgei	r4,r16,18477
8112040c:	81120b48 	cmpgei	r4,r16,18477
81120410:	81120b48 	cmpgei	r4,r16,18477
81120414:	81120550 	cmplti	r4,r16,18453
81120418:	8112072c 	andhi	r4,r16,18460
8112041c:	81120b48 	cmpgei	r4,r16,18477
81120420:	8112057c 	xorhi	r4,r16,18453
81120424:	81120b7c 	xorhi	r4,r16,18477
81120428:	81120b48 	cmpgei	r4,r16,18477
8112042c:	81120b70 	cmpltui	r4,r16,18477
81120430:	81120b10 	cmplti	r4,r16,18476
81120434:	81120b10 	cmplti	r4,r16,18476
81120438:	81120b10 	cmplti	r4,r16,18476
8112043c:	81120b10 	cmplti	r4,r16,18476
81120440:	81120b10 	cmplti	r4,r16,18476
81120444:	81120b10 	cmplti	r4,r16,18476
81120448:	81120b10 	cmplti	r4,r16,18476
8112044c:	81120b10 	cmplti	r4,r16,18476
81120450:	81120b10 	cmplti	r4,r16,18476
81120454:	81120b48 	cmpgei	r4,r16,18477
81120458:	81120b48 	cmpgei	r4,r16,18477
8112045c:	81120b48 	cmpgei	r4,r16,18477
81120460:	81120b48 	cmpgei	r4,r16,18477
81120464:	81120b48 	cmpgei	r4,r16,18477
81120468:	81120b48 	cmpgei	r4,r16,18477
8112046c:	81120b48 	cmpgei	r4,r16,18477
81120470:	81120b48 	cmpgei	r4,r16,18477
81120474:	81120b48 	cmpgei	r4,r16,18477
81120478:	81120b48 	cmpgei	r4,r16,18477
8112047c:	81120aac 	andhi	r4,r16,18474
81120480:	81120b48 	cmpgei	r4,r16,18477
81120484:	81120b48 	cmpgei	r4,r16,18477
81120488:	81120b48 	cmpgei	r4,r16,18477
8112048c:	81120b48 	cmpgei	r4,r16,18477
81120490:	81120b48 	cmpgei	r4,r16,18477
81120494:	81120b48 	cmpgei	r4,r16,18477
81120498:	81120b48 	cmpgei	r4,r16,18477
8112049c:	81120b48 	cmpgei	r4,r16,18477
811204a0:	81120b48 	cmpgei	r4,r16,18477
811204a4:	81120b48 	cmpgei	r4,r16,18477
811204a8:	81120c24 	muli	r4,r16,18480
811204ac:	81120b48 	cmpgei	r4,r16,18477
811204b0:	81120b48 	cmpgei	r4,r16,18477
811204b4:	81120b48 	cmpgei	r4,r16,18477
811204b8:	81120b48 	cmpgei	r4,r16,18477
811204bc:	81120b48 	cmpgei	r4,r16,18477
811204c0:	81120bbc 	xorhi	r4,r16,18478
811204c4:	81120b48 	cmpgei	r4,r16,18477
811204c8:	81120b48 	cmpgei	r4,r16,18477
811204cc:	811208f0 	cmpltui	r4,r16,18467
811204d0:	81120b48 	cmpgei	r4,r16,18477
811204d4:	81120b48 	cmpgei	r4,r16,18477
811204d8:	81120b48 	cmpgei	r4,r16,18477
811204dc:	81120b48 	cmpgei	r4,r16,18477
811204e0:	81120b48 	cmpgei	r4,r16,18477
811204e4:	81120b48 	cmpgei	r4,r16,18477
811204e8:	81120b48 	cmpgei	r4,r16,18477
811204ec:	81120b48 	cmpgei	r4,r16,18477
811204f0:	81120b48 	cmpgei	r4,r16,18477
811204f4:	81120b48 	cmpgei	r4,r16,18477
811204f8:	811207e0 	cmpeqi	r4,r16,18463
811204fc:	8112098c 	andi	r4,r16,18470
81120500:	81120b48 	cmpgei	r4,r16,18477
81120504:	81120b48 	cmpgei	r4,r16,18477
81120508:	81120b48 	cmpgei	r4,r16,18477
8112050c:	81120980 	call	88112098 <__reset+0x20f2098>
81120510:	8112098c 	andi	r4,r16,18470
81120514:	81120b48 	cmpgei	r4,r16,18477
81120518:	81120b48 	cmpgei	r4,r16,18477
8112051c:	81120970 	cmpltui	r4,r16,18469
81120520:	81120b48 	cmpgei	r4,r16,18477
81120524:	81120934 	orhi	r4,r16,18468
81120528:	8112073c 	xorhi	r4,r16,18460
8112052c:	81120588 	cmpgei	r4,r16,18454
81120530:	81120aa0 	cmpeqi	r4,r16,18474
81120534:	81120b48 	cmpgei	r4,r16,18477
81120538:	81120a54 	ori	r4,r16,18473
8112053c:	81120b48 	cmpgei	r4,r16,18477
81120540:	811206ac 	andhi	r4,r16,18458
81120544:	81120b48 	cmpgei	r4,r16,18477
81120548:	81120b48 	cmpgei	r4,r16,18477
8112054c:	81120608 	cmpgei	r4,r16,18456
81120550:	dac02317 	ldw	r11,140(sp)
81120554:	5ac00017 	ldw	r11,0(r11)
81120558:	dac02415 	stw	r11,144(sp)
8112055c:	dac02317 	ldw	r11,140(sp)
81120560:	58800104 	addi	r2,r11,4
81120564:	dac02417 	ldw	r11,144(sp)
81120568:	5802e90e 	bge	r11,zero,81121110 <___svfiprintf_internal_r+0xe8c>
8112056c:	dac02417 	ldw	r11,144(sp)
81120570:	d8802315 	stw	r2,140(sp)
81120574:	02d7c83a 	sub	r11,zero,r11
81120578:	dac02415 	stw	r11,144(sp)
8112057c:	94800114 	ori	r18,r18,4
81120580:	98c00007 	ldb	r3,0(r19)
81120584:	003f9006 	br	811203c8 <__reset+0xfb1003c8>
81120588:	00800c04 	movi	r2,48
8112058c:	dac02317 	ldw	r11,140(sp)
81120590:	d8801d05 	stb	r2,116(sp)
81120594:	00801e04 	movi	r2,120
81120598:	d8801d45 	stb	r2,117(sp)
8112059c:	d8001d85 	stb	zero,118(sp)
811205a0:	58c00104 	addi	r3,r11,4
811205a4:	5f000017 	ldw	fp,0(r11)
811205a8:	0013883a 	mov	r9,zero
811205ac:	90800094 	ori	r2,r18,2
811205b0:	80032b16 	blt	r16,zero,81121260 <___svfiprintf_internal_r+0xfdc>
811205b4:	00bfdfc4 	movi	r2,-129
811205b8:	90a4703a 	and	r18,r18,r2
811205bc:	d8c02315 	stw	r3,140(sp)
811205c0:	94800094 	ori	r18,r18,2
811205c4:	e002dc26 	beq	fp,zero,81121138 <___svfiprintf_internal_r+0xeb4>
811205c8:	01204534 	movhi	r4,33044
811205cc:	21391404 	addi	r4,r4,-7088
811205d0:	0015883a 	mov	r10,zero
811205d4:	d9002915 	stw	r4,164(sp)
811205d8:	00002306 	br	81120668 <___svfiprintf_internal_r+0x3e4>
811205dc:	94800054 	ori	r18,r18,1
811205e0:	98c00007 	ldb	r3,0(r19)
811205e4:	003f7806 	br	811203c8 <__reset+0xfb1003c8>
811205e8:	38803fcc 	andi	r2,r7,255
811205ec:	1080201c 	xori	r2,r2,128
811205f0:	10bfe004 	addi	r2,r2,-128
811205f4:	1002f31e 	bne	r2,zero,811211c4 <___svfiprintf_internal_r+0xf40>
811205f8:	01000044 	movi	r4,1
811205fc:	01c00804 	movi	r7,32
81120600:	98c00007 	ldb	r3,0(r19)
81120604:	003f7006 	br	811203c8 <__reset+0xfb1003c8>
81120608:	21003fcc 	andi	r4,r4,255
8112060c:	2003aa1e 	bne	r4,zero,811214b8 <___svfiprintf_internal_r+0x1234>
81120610:	00a04534 	movhi	r2,33044
81120614:	10b91404 	addi	r2,r2,-7088
81120618:	d8802915 	stw	r2,164(sp)
8112061c:	9080080c 	andi	r2,r18,32
81120620:	1000ba26 	beq	r2,zero,8112090c <___svfiprintf_internal_r+0x688>
81120624:	dac02317 	ldw	r11,140(sp)
81120628:	5f000017 	ldw	fp,0(r11)
8112062c:	5a400117 	ldw	r9,4(r11)
81120630:	5ac00204 	addi	r11,r11,8
81120634:	dac02315 	stw	r11,140(sp)
81120638:	9080004c 	andi	r2,r18,1
8112063c:	10029026 	beq	r2,zero,81121080 <___svfiprintf_internal_r+0xdfc>
81120640:	e244b03a 	or	r2,fp,r9
81120644:	1002d41e 	bne	r2,zero,81121198 <___svfiprintf_internal_r+0xf14>
81120648:	d8001d85 	stb	zero,118(sp)
8112064c:	80030b16 	blt	r16,zero,8112127c <___svfiprintf_internal_r+0xff8>
81120650:	00bfdfc4 	movi	r2,-129
81120654:	90a4703a 	and	r18,r18,r2
81120658:	0015883a 	mov	r10,zero
8112065c:	80002426 	beq	r16,zero,811206f0 <___svfiprintf_internal_r+0x46c>
81120660:	0039883a 	mov	fp,zero
81120664:	0013883a 	mov	r9,zero
81120668:	d9002917 	ldw	r4,164(sp)
8112066c:	dc401a04 	addi	r17,sp,104
81120670:	e08003cc 	andi	r2,fp,15
81120674:	4806973a 	slli	r3,r9,28
81120678:	2085883a 	add	r2,r4,r2
8112067c:	e038d13a 	srli	fp,fp,4
81120680:	10800003 	ldbu	r2,0(r2)
81120684:	4812d13a 	srli	r9,r9,4
81120688:	8c7fffc4 	addi	r17,r17,-1
8112068c:	1f38b03a 	or	fp,r3,fp
81120690:	88800005 	stb	r2,0(r17)
81120694:	e244b03a 	or	r2,fp,r9
81120698:	103ff51e 	bne	r2,zero,81120670 <__reset+0xfb100670>
8112069c:	dac01e17 	ldw	r11,120(sp)
811206a0:	5c57c83a 	sub	r11,r11,r17
811206a4:	dac02115 	stw	r11,132(sp)
811206a8:	00001406 	br	811206fc <___svfiprintf_internal_r+0x478>
811206ac:	21003fcc 	andi	r4,r4,255
811206b0:	2003741e 	bne	r4,zero,81121484 <___svfiprintf_internal_r+0x1200>
811206b4:	9080080c 	andi	r2,r18,32
811206b8:	10014526 	beq	r2,zero,81120bd0 <___svfiprintf_internal_r+0x94c>
811206bc:	dac02317 	ldw	r11,140(sp)
811206c0:	d8001d85 	stb	zero,118(sp)
811206c4:	58c00204 	addi	r3,r11,8
811206c8:	5f000017 	ldw	fp,0(r11)
811206cc:	5a400117 	ldw	r9,4(r11)
811206d0:	8002d916 	blt	r16,zero,81121238 <___svfiprintf_internal_r+0xfb4>
811206d4:	013fdfc4 	movi	r4,-129
811206d8:	e244b03a 	or	r2,fp,r9
811206dc:	d8c02315 	stw	r3,140(sp)
811206e0:	9124703a 	and	r18,r18,r4
811206e4:	0015883a 	mov	r10,zero
811206e8:	1000b91e 	bne	r2,zero,811209d0 <___svfiprintf_internal_r+0x74c>
811206ec:	8002e61e 	bne	r16,zero,81121288 <___svfiprintf_internal_r+0x1004>
811206f0:	0021883a 	mov	r16,zero
811206f4:	d8002115 	stw	zero,132(sp)
811206f8:	dc401a04 	addi	r17,sp,104
811206fc:	d8c02117 	ldw	r3,132(sp)
81120700:	dc002015 	stw	r16,128(sp)
81120704:	80c0010e 	bge	r16,r3,8112070c <___svfiprintf_internal_r+0x488>
81120708:	d8c02015 	stw	r3,128(sp)
8112070c:	52803fcc 	andi	r10,r10,255
81120710:	5280201c 	xori	r10,r10,128
81120714:	52bfe004 	addi	r10,r10,-128
81120718:	50003c26 	beq	r10,zero,8112080c <___svfiprintf_internal_r+0x588>
8112071c:	dac02017 	ldw	r11,128(sp)
81120720:	5ac00044 	addi	r11,r11,1
81120724:	dac02015 	stw	r11,128(sp)
81120728:	00003806 	br	8112080c <___svfiprintf_internal_r+0x588>
8112072c:	01000044 	movi	r4,1
81120730:	01c00ac4 	movi	r7,43
81120734:	98c00007 	ldb	r3,0(r19)
81120738:	003f2306 	br	811203c8 <__reset+0xfb1003c8>
8112073c:	21003fcc 	andi	r4,r4,255
81120740:	2003481e 	bne	r4,zero,81121464 <___svfiprintf_internal_r+0x11e0>
81120744:	9080080c 	andi	r2,r18,32
81120748:	10013b26 	beq	r2,zero,81120c38 <___svfiprintf_internal_r+0x9b4>
8112074c:	dac02317 	ldw	r11,140(sp)
81120750:	d8001d85 	stb	zero,118(sp)
81120754:	58800204 	addi	r2,r11,8
81120758:	5f000017 	ldw	fp,0(r11)
8112075c:	5a400117 	ldw	r9,4(r11)
81120760:	8002a816 	blt	r16,zero,81121204 <___svfiprintf_internal_r+0xf80>
81120764:	013fdfc4 	movi	r4,-129
81120768:	e246b03a 	or	r3,fp,r9
8112076c:	d8802315 	stw	r2,140(sp)
81120770:	9124703a 	and	r18,r18,r4
81120774:	18013c26 	beq	r3,zero,81120c68 <___svfiprintf_internal_r+0x9e4>
81120778:	0015883a 	mov	r10,zero
8112077c:	dc401a04 	addi	r17,sp,104
81120780:	e006d0fa 	srli	r3,fp,3
81120784:	4808977a 	slli	r4,r9,29
81120788:	4812d0fa 	srli	r9,r9,3
8112078c:	e70001cc 	andi	fp,fp,7
81120790:	e0800c04 	addi	r2,fp,48
81120794:	8c7fffc4 	addi	r17,r17,-1
81120798:	20f8b03a 	or	fp,r4,r3
8112079c:	88800005 	stb	r2,0(r17)
811207a0:	e246b03a 	or	r3,fp,r9
811207a4:	183ff61e 	bne	r3,zero,81120780 <__reset+0xfb100780>
811207a8:	90c0004c 	andi	r3,r18,1
811207ac:	1800a526 	beq	r3,zero,81120a44 <___svfiprintf_internal_r+0x7c0>
811207b0:	10803fcc 	andi	r2,r2,255
811207b4:	1080201c 	xori	r2,r2,128
811207b8:	10bfe004 	addi	r2,r2,-128
811207bc:	00c00c04 	movi	r3,48
811207c0:	10ffb626 	beq	r2,r3,8112069c <__reset+0xfb10069c>
811207c4:	88ffffc5 	stb	r3,-1(r17)
811207c8:	d8c01e17 	ldw	r3,120(sp)
811207cc:	88bfffc4 	addi	r2,r17,-1
811207d0:	1023883a 	mov	r17,r2
811207d4:	1887c83a 	sub	r3,r3,r2
811207d8:	d8c02115 	stw	r3,132(sp)
811207dc:	003fc706 	br	811206fc <__reset+0xfb1006fc>
811207e0:	dac02317 	ldw	r11,140(sp)
811207e4:	00c00044 	movi	r3,1
811207e8:	d8c02015 	stw	r3,128(sp)
811207ec:	58800017 	ldw	r2,0(r11)
811207f0:	5ac00104 	addi	r11,r11,4
811207f4:	d8001d85 	stb	zero,118(sp)
811207f8:	d8801005 	stb	r2,64(sp)
811207fc:	dac02315 	stw	r11,140(sp)
81120800:	d8c02115 	stw	r3,132(sp)
81120804:	dc401004 	addi	r17,sp,64
81120808:	0021883a 	mov	r16,zero
8112080c:	90c0008c 	andi	r3,r18,2
81120810:	d8c02215 	stw	r3,136(sp)
81120814:	18000326 	beq	r3,zero,81120824 <___svfiprintf_internal_r+0x5a0>
81120818:	dac02017 	ldw	r11,128(sp)
8112081c:	5ac00084 	addi	r11,r11,2
81120820:	dac02015 	stw	r11,128(sp)
81120824:	90c0210c 	andi	r3,r18,132
81120828:	d8c02615 	stw	r3,152(sp)
8112082c:	1801131e 	bne	r3,zero,81120c7c <___svfiprintf_internal_r+0x9f8>
81120830:	dac02417 	ldw	r11,144(sp)
81120834:	d8c02017 	ldw	r3,128(sp)
81120838:	58f9c83a 	sub	fp,r11,r3
8112083c:	07010f0e 	bge	zero,fp,81120c7c <___svfiprintf_internal_r+0x9f8>
81120840:	02400404 	movi	r9,16
81120844:	d8c01c17 	ldw	r3,112(sp)
81120848:	d8801b17 	ldw	r2,108(sp)
8112084c:	4f02d60e 	bge	r9,fp,811213a8 <___svfiprintf_internal_r+0x1124>
81120850:	01604534 	movhi	r5,33044
81120854:	2979a204 	addi	r5,r5,-6520
81120858:	d9402815 	stw	r5,160(sp)
8112085c:	028001c4 	movi	r10,7
81120860:	00000306 	br	81120870 <___svfiprintf_internal_r+0x5ec>
81120864:	e73ffc04 	addi	fp,fp,-16
81120868:	42000204 	addi	r8,r8,8
8112086c:	4f00150e 	bge	r9,fp,811208c4 <___svfiprintf_internal_r+0x640>
81120870:	18c00404 	addi	r3,r3,16
81120874:	10800044 	addi	r2,r2,1
81120878:	45800015 	stw	r22,0(r8)
8112087c:	42400115 	stw	r9,4(r8)
81120880:	d8c01c15 	stw	r3,112(sp)
81120884:	d8801b15 	stw	r2,108(sp)
81120888:	50bff60e 	bge	r10,r2,81120864 <__reset+0xfb100864>
8112088c:	d9801a04 	addi	r6,sp,104
81120890:	b80b883a 	mov	r5,r23
81120894:	a809883a 	mov	r4,r21
81120898:	da402c15 	stw	r9,176(sp)
8112089c:	da802d15 	stw	r10,180(sp)
811208a0:	11200ac0 	call	811200ac <__ssprint_r>
811208a4:	da402c17 	ldw	r9,176(sp)
811208a8:	da802d17 	ldw	r10,180(sp)
811208ac:	1001851e 	bne	r2,zero,81120ec4 <___svfiprintf_internal_r+0xc40>
811208b0:	e73ffc04 	addi	fp,fp,-16
811208b4:	d8c01c17 	ldw	r3,112(sp)
811208b8:	d8801b17 	ldw	r2,108(sp)
811208bc:	d811883a 	mov	r8,sp
811208c0:	4f3feb16 	blt	r9,fp,81120870 <__reset+0xfb100870>
811208c4:	dac02817 	ldw	r11,160(sp)
811208c8:	e0c7883a 	add	r3,fp,r3
811208cc:	10800044 	addi	r2,r2,1
811208d0:	42c00015 	stw	r11,0(r8)
811208d4:	47000115 	stw	fp,4(r8)
811208d8:	d8c01c15 	stw	r3,112(sp)
811208dc:	d8801b15 	stw	r2,108(sp)
811208e0:	010001c4 	movi	r4,7
811208e4:	2081ee16 	blt	r4,r2,811210a0 <___svfiprintf_internal_r+0xe1c>
811208e8:	42000204 	addi	r8,r8,8
811208ec:	0000e506 	br	81120c84 <___svfiprintf_internal_r+0xa00>
811208f0:	21003fcc 	andi	r4,r4,255
811208f4:	2002dd1e 	bne	r4,zero,8112146c <___svfiprintf_internal_r+0x11e8>
811208f8:	00a04534 	movhi	r2,33044
811208fc:	10b90f04 	addi	r2,r2,-7108
81120900:	d8802915 	stw	r2,164(sp)
81120904:	9080080c 	andi	r2,r18,32
81120908:	103f461e 	bne	r2,zero,81120624 <__reset+0xfb100624>
8112090c:	9080040c 	andi	r2,r18,16
81120910:	10022e1e 	bne	r2,zero,811211cc <___svfiprintf_internal_r+0xf48>
81120914:	9080100c 	andi	r2,r18,64
81120918:	dac02317 	ldw	r11,140(sp)
8112091c:	10027326 	beq	r2,zero,811212ec <___svfiprintf_internal_r+0x1068>
81120920:	5f00000b 	ldhu	fp,0(r11)
81120924:	5ac00104 	addi	r11,r11,4
81120928:	0013883a 	mov	r9,zero
8112092c:	dac02315 	stw	r11,140(sp)
81120930:	003f4106 	br	81120638 <__reset+0xfb100638>
81120934:	21003fcc 	andi	r4,r4,255
81120938:	2002e11e 	bne	r4,zero,811214c0 <___svfiprintf_internal_r+0x123c>
8112093c:	9080080c 	andi	r2,r18,32
81120940:	1002011e 	bne	r2,zero,81121148 <___svfiprintf_internal_r+0xec4>
81120944:	9080040c 	andi	r2,r18,16
81120948:	10023e1e 	bne	r2,zero,81121244 <___svfiprintf_internal_r+0xfc0>
8112094c:	9480100c 	andi	r18,r18,64
81120950:	90023c26 	beq	r18,zero,81121244 <___svfiprintf_internal_r+0xfc0>
81120954:	dac02317 	ldw	r11,140(sp)
81120958:	58800017 	ldw	r2,0(r11)
8112095c:	5ac00104 	addi	r11,r11,4
81120960:	dac02315 	stw	r11,140(sp)
81120964:	dac02517 	ldw	r11,148(sp)
81120968:	12c0000d 	sth	r11,0(r2)
8112096c:	003e6e06 	br	81120328 <__reset+0xfb100328>
81120970:	98c00007 	ldb	r3,0(r19)
81120974:	1a422926 	beq	r3,r9,8112121c <___svfiprintf_internal_r+0xf98>
81120978:	94800414 	ori	r18,r18,16
8112097c:	003e9206 	br	811203c8 <__reset+0xfb1003c8>
81120980:	94801014 	ori	r18,r18,64
81120984:	98c00007 	ldb	r3,0(r19)
81120988:	003e8f06 	br	811203c8 <__reset+0xfb1003c8>
8112098c:	21003fcc 	andi	r4,r4,255
81120990:	2002c71e 	bne	r4,zero,811214b0 <___svfiprintf_internal_r+0x122c>
81120994:	9080080c 	andi	r2,r18,32
81120998:	10004926 	beq	r2,zero,81120ac0 <___svfiprintf_internal_r+0x83c>
8112099c:	dac02317 	ldw	r11,140(sp)
811209a0:	58800117 	ldw	r2,4(r11)
811209a4:	5f000017 	ldw	fp,0(r11)
811209a8:	5ac00204 	addi	r11,r11,8
811209ac:	dac02315 	stw	r11,140(sp)
811209b0:	1013883a 	mov	r9,r2
811209b4:	10004b16 	blt	r2,zero,81120ae4 <___svfiprintf_internal_r+0x860>
811209b8:	da801d83 	ldbu	r10,118(sp)
811209bc:	8001cb16 	blt	r16,zero,811210ec <___svfiprintf_internal_r+0xe68>
811209c0:	00ffdfc4 	movi	r3,-129
811209c4:	e244b03a 	or	r2,fp,r9
811209c8:	90e4703a 	and	r18,r18,r3
811209cc:	103f4726 	beq	r2,zero,811206ec <__reset+0xfb1006ec>
811209d0:	48008c26 	beq	r9,zero,81120c04 <___svfiprintf_internal_r+0x980>
811209d4:	dc802015 	stw	r18,128(sp)
811209d8:	dc002115 	stw	r16,132(sp)
811209dc:	dc401a04 	addi	r17,sp,104
811209e0:	e021883a 	mov	r16,fp
811209e4:	da002215 	stw	r8,136(sp)
811209e8:	5039883a 	mov	fp,r10
811209ec:	4825883a 	mov	r18,r9
811209f0:	8009883a 	mov	r4,r16
811209f4:	900b883a 	mov	r5,r18
811209f8:	01800284 	movi	r6,10
811209fc:	000f883a 	mov	r7,zero
81120a00:	11247700 	call	81124770 <__umoddi3>
81120a04:	10800c04 	addi	r2,r2,48
81120a08:	8c7fffc4 	addi	r17,r17,-1
81120a0c:	8009883a 	mov	r4,r16
81120a10:	900b883a 	mov	r5,r18
81120a14:	88800005 	stb	r2,0(r17)
81120a18:	01800284 	movi	r6,10
81120a1c:	000f883a 	mov	r7,zero
81120a20:	11241f00 	call	811241f0 <__udivdi3>
81120a24:	1021883a 	mov	r16,r2
81120a28:	10c4b03a 	or	r2,r2,r3
81120a2c:	1825883a 	mov	r18,r3
81120a30:	103fef1e 	bne	r2,zero,811209f0 <__reset+0xfb1009f0>
81120a34:	dc802017 	ldw	r18,128(sp)
81120a38:	dc002117 	ldw	r16,132(sp)
81120a3c:	da002217 	ldw	r8,136(sp)
81120a40:	e015883a 	mov	r10,fp
81120a44:	d8c01e17 	ldw	r3,120(sp)
81120a48:	1c47c83a 	sub	r3,r3,r17
81120a4c:	d8c02115 	stw	r3,132(sp)
81120a50:	003f2a06 	br	811206fc <__reset+0xfb1006fc>
81120a54:	dac02317 	ldw	r11,140(sp)
81120a58:	d8001d85 	stb	zero,118(sp)
81120a5c:	5c400017 	ldw	r17,0(r11)
81120a60:	5f000104 	addi	fp,r11,4
81120a64:	88022f26 	beq	r17,zero,81121324 <___svfiprintf_internal_r+0x10a0>
81120a68:	80022516 	blt	r16,zero,81121300 <___svfiprintf_internal_r+0x107c>
81120a6c:	800d883a 	mov	r6,r16
81120a70:	000b883a 	mov	r5,zero
81120a74:	8809883a 	mov	r4,r17
81120a78:	da002c15 	stw	r8,176(sp)
81120a7c:	111c6500 	call	8111c650 <memchr>
81120a80:	da002c17 	ldw	r8,176(sp)
81120a84:	10026426 	beq	r2,zero,81121418 <___svfiprintf_internal_r+0x1194>
81120a88:	1445c83a 	sub	r2,r2,r17
81120a8c:	d8802115 	stw	r2,132(sp)
81120a90:	da801d83 	ldbu	r10,118(sp)
81120a94:	df002315 	stw	fp,140(sp)
81120a98:	0021883a 	mov	r16,zero
81120a9c:	003f1706 	br	811206fc <__reset+0xfb1006fc>
81120aa0:	94800814 	ori	r18,r18,32
81120aa4:	98c00007 	ldb	r3,0(r19)
81120aa8:	003e4706 	br	811203c8 <__reset+0xfb1003c8>
81120aac:	21003fcc 	andi	r4,r4,255
81120ab0:	2002701e 	bne	r4,zero,81121474 <___svfiprintf_internal_r+0x11f0>
81120ab4:	94800414 	ori	r18,r18,16
81120ab8:	9080080c 	andi	r2,r18,32
81120abc:	103fb71e 	bne	r2,zero,8112099c <__reset+0xfb10099c>
81120ac0:	9080040c 	andi	r2,r18,16
81120ac4:	1001ab26 	beq	r2,zero,81121174 <___svfiprintf_internal_r+0xef0>
81120ac8:	dac02317 	ldw	r11,140(sp)
81120acc:	5f000017 	ldw	fp,0(r11)
81120ad0:	5ac00104 	addi	r11,r11,4
81120ad4:	dac02315 	stw	r11,140(sp)
81120ad8:	e013d7fa 	srai	r9,fp,31
81120adc:	4805883a 	mov	r2,r9
81120ae0:	103fb50e 	bge	r2,zero,811209b8 <__reset+0xfb1009b8>
81120ae4:	0739c83a 	sub	fp,zero,fp
81120ae8:	02800b44 	movi	r10,45
81120aec:	e004c03a 	cmpne	r2,fp,zero
81120af0:	0253c83a 	sub	r9,zero,r9
81120af4:	da801d85 	stb	r10,118(sp)
81120af8:	4893c83a 	sub	r9,r9,r2
81120afc:	80023016 	blt	r16,zero,811213c0 <___svfiprintf_internal_r+0x113c>
81120b00:	00bfdfc4 	movi	r2,-129
81120b04:	90a4703a 	and	r18,r18,r2
81120b08:	483fb21e 	bne	r9,zero,811209d4 <__reset+0xfb1009d4>
81120b0c:	00003d06 	br	81120c04 <___svfiprintf_internal_r+0x980>
81120b10:	9817883a 	mov	r11,r19
81120b14:	d8002415 	stw	zero,144(sp)
81120b18:	18bff404 	addi	r2,r3,-48
81120b1c:	0019883a 	mov	r12,zero
81120b20:	58c00007 	ldb	r3,0(r11)
81120b24:	630002a4 	muli	r12,r12,10
81120b28:	9cc00044 	addi	r19,r19,1
81120b2c:	9817883a 	mov	r11,r19
81120b30:	1319883a 	add	r12,r2,r12
81120b34:	18bff404 	addi	r2,r3,-48
81120b38:	30bff92e 	bgeu	r6,r2,81120b20 <__reset+0xfb100b20>
81120b3c:	db002415 	stw	r12,144(sp)
81120b40:	18bff804 	addi	r2,r3,-32
81120b44:	28be232e 	bgeu	r5,r2,811203d4 <__reset+0xfb1003d4>
81120b48:	21003fcc 	andi	r4,r4,255
81120b4c:	20024b1e 	bne	r4,zero,8112147c <___svfiprintf_internal_r+0x11f8>
81120b50:	1800d626 	beq	r3,zero,81120eac <___svfiprintf_internal_r+0xc28>
81120b54:	02c00044 	movi	r11,1
81120b58:	dac02015 	stw	r11,128(sp)
81120b5c:	d8c01005 	stb	r3,64(sp)
81120b60:	d8001d85 	stb	zero,118(sp)
81120b64:	dac02115 	stw	r11,132(sp)
81120b68:	dc401004 	addi	r17,sp,64
81120b6c:	003f2606 	br	81120808 <__reset+0xfb100808>
81120b70:	94802014 	ori	r18,r18,128
81120b74:	98c00007 	ldb	r3,0(r19)
81120b78:	003e1306 	br	811203c8 <__reset+0xfb1003c8>
81120b7c:	98c00007 	ldb	r3,0(r19)
81120b80:	9ac00044 	addi	r11,r19,1
81120b84:	1a822b26 	beq	r3,r10,81121434 <___svfiprintf_internal_r+0x11b0>
81120b88:	18bff404 	addi	r2,r3,-48
81120b8c:	0021883a 	mov	r16,zero
81120b90:	30821e36 	bltu	r6,r2,8112140c <___svfiprintf_internal_r+0x1188>
81120b94:	58c00007 	ldb	r3,0(r11)
81120b98:	840002a4 	muli	r16,r16,10
81120b9c:	5cc00044 	addi	r19,r11,1
81120ba0:	9817883a 	mov	r11,r19
81120ba4:	80a1883a 	add	r16,r16,r2
81120ba8:	18bff404 	addi	r2,r3,-48
81120bac:	30bff92e 	bgeu	r6,r2,81120b94 <__reset+0xfb100b94>
81120bb0:	803e060e 	bge	r16,zero,811203cc <__reset+0xfb1003cc>
81120bb4:	043fffc4 	movi	r16,-1
81120bb8:	003e0406 	br	811203cc <__reset+0xfb1003cc>
81120bbc:	21003fcc 	andi	r4,r4,255
81120bc0:	2002371e 	bne	r4,zero,811214a0 <___svfiprintf_internal_r+0x121c>
81120bc4:	94800414 	ori	r18,r18,16
81120bc8:	9080080c 	andi	r2,r18,32
81120bcc:	103ebb1e 	bne	r2,zero,811206bc <__reset+0xfb1006bc>
81120bd0:	9080040c 	andi	r2,r18,16
81120bd4:	10013b26 	beq	r2,zero,811210c4 <___svfiprintf_internal_r+0xe40>
81120bd8:	dac02317 	ldw	r11,140(sp)
81120bdc:	d8001d85 	stb	zero,118(sp)
81120be0:	0013883a 	mov	r9,zero
81120be4:	58800104 	addi	r2,r11,4
81120be8:	5f000017 	ldw	fp,0(r11)
81120bec:	80013d16 	blt	r16,zero,811210e4 <___svfiprintf_internal_r+0xe60>
81120bf0:	00ffdfc4 	movi	r3,-129
81120bf4:	d8802315 	stw	r2,140(sp)
81120bf8:	90e4703a 	and	r18,r18,r3
81120bfc:	0015883a 	mov	r10,zero
81120c00:	e03eba26 	beq	fp,zero,811206ec <__reset+0xfb1006ec>
81120c04:	00800244 	movi	r2,9
81120c08:	173f7236 	bltu	r2,fp,811209d4 <__reset+0xfb1009d4>
81120c0c:	dac02b17 	ldw	r11,172(sp)
81120c10:	e7000c04 	addi	fp,fp,48
81120c14:	df0019c5 	stb	fp,103(sp)
81120c18:	dac02115 	stw	r11,132(sp)
81120c1c:	dc4019c4 	addi	r17,sp,103
81120c20:	003eb606 	br	811206fc <__reset+0xfb1006fc>
81120c24:	21003fcc 	andi	r4,r4,255
81120c28:	20021f1e 	bne	r4,zero,811214a8 <___svfiprintf_internal_r+0x1224>
81120c2c:	94800414 	ori	r18,r18,16
81120c30:	9080080c 	andi	r2,r18,32
81120c34:	103ec51e 	bne	r2,zero,8112074c <__reset+0xfb10074c>
81120c38:	9080040c 	andi	r2,r18,16
81120c3c:	10016926 	beq	r2,zero,811211e4 <___svfiprintf_internal_r+0xf60>
81120c40:	dac02317 	ldw	r11,140(sp)
81120c44:	d8001d85 	stb	zero,118(sp)
81120c48:	0013883a 	mov	r9,zero
81120c4c:	58800104 	addi	r2,r11,4
81120c50:	5f000017 	ldw	fp,0(r11)
81120c54:	80016b16 	blt	r16,zero,81121204 <___svfiprintf_internal_r+0xf80>
81120c58:	00ffdfc4 	movi	r3,-129
81120c5c:	d8802315 	stw	r2,140(sp)
81120c60:	90e4703a 	and	r18,r18,r3
81120c64:	e03ec41e 	bne	fp,zero,81120778 <__reset+0xfb100778>
81120c68:	0015883a 	mov	r10,zero
81120c6c:	8001c226 	beq	r16,zero,81121378 <___svfiprintf_internal_r+0x10f4>
81120c70:	0039883a 	mov	fp,zero
81120c74:	0013883a 	mov	r9,zero
81120c78:	003ec006 	br	8112077c <__reset+0xfb10077c>
81120c7c:	d8c01c17 	ldw	r3,112(sp)
81120c80:	d8801b17 	ldw	r2,108(sp)
81120c84:	d9001d87 	ldb	r4,118(sp)
81120c88:	20000b26 	beq	r4,zero,81120cb8 <___svfiprintf_internal_r+0xa34>
81120c8c:	d9001d84 	addi	r4,sp,118
81120c90:	18c00044 	addi	r3,r3,1
81120c94:	10800044 	addi	r2,r2,1
81120c98:	41000015 	stw	r4,0(r8)
81120c9c:	01000044 	movi	r4,1
81120ca0:	41000115 	stw	r4,4(r8)
81120ca4:	d8c01c15 	stw	r3,112(sp)
81120ca8:	d8801b15 	stw	r2,108(sp)
81120cac:	010001c4 	movi	r4,7
81120cb0:	2080e116 	blt	r4,r2,81121038 <___svfiprintf_internal_r+0xdb4>
81120cb4:	42000204 	addi	r8,r8,8
81120cb8:	dac02217 	ldw	r11,136(sp)
81120cbc:	58000b26 	beq	r11,zero,81120cec <___svfiprintf_internal_r+0xa68>
81120cc0:	d9001d04 	addi	r4,sp,116
81120cc4:	18c00084 	addi	r3,r3,2
81120cc8:	10800044 	addi	r2,r2,1
81120ccc:	41000015 	stw	r4,0(r8)
81120cd0:	01000084 	movi	r4,2
81120cd4:	41000115 	stw	r4,4(r8)
81120cd8:	d8c01c15 	stw	r3,112(sp)
81120cdc:	d8801b15 	stw	r2,108(sp)
81120ce0:	010001c4 	movi	r4,7
81120ce4:	2080dd16 	blt	r4,r2,8112105c <___svfiprintf_internal_r+0xdd8>
81120ce8:	42000204 	addi	r8,r8,8
81120cec:	dac02617 	ldw	r11,152(sp)
81120cf0:	01002004 	movi	r4,128
81120cf4:	59008426 	beq	r11,r4,81120f08 <___svfiprintf_internal_r+0xc84>
81120cf8:	dac02117 	ldw	r11,132(sp)
81120cfc:	82e1c83a 	sub	r16,r16,r11
81120d00:	0400270e 	bge	zero,r16,81120da0 <___svfiprintf_internal_r+0xb1c>
81120d04:	01c00404 	movi	r7,16
81120d08:	3c016a0e 	bge	r7,r16,811212b4 <___svfiprintf_internal_r+0x1030>
81120d0c:	01604534 	movhi	r5,33044
81120d10:	29799e04 	addi	r5,r5,-6536
81120d14:	d9402215 	stw	r5,136(sp)
81120d18:	070001c4 	movi	fp,7
81120d1c:	00000306 	br	81120d2c <___svfiprintf_internal_r+0xaa8>
81120d20:	843ffc04 	addi	r16,r16,-16
81120d24:	42000204 	addi	r8,r8,8
81120d28:	3c00130e 	bge	r7,r16,81120d78 <___svfiprintf_internal_r+0xaf4>
81120d2c:	18c00404 	addi	r3,r3,16
81120d30:	10800044 	addi	r2,r2,1
81120d34:	45000015 	stw	r20,0(r8)
81120d38:	41c00115 	stw	r7,4(r8)
81120d3c:	d8c01c15 	stw	r3,112(sp)
81120d40:	d8801b15 	stw	r2,108(sp)
81120d44:	e0bff60e 	bge	fp,r2,81120d20 <__reset+0xfb100d20>
81120d48:	d9801a04 	addi	r6,sp,104
81120d4c:	b80b883a 	mov	r5,r23
81120d50:	a809883a 	mov	r4,r21
81120d54:	d9c02c15 	stw	r7,176(sp)
81120d58:	11200ac0 	call	811200ac <__ssprint_r>
81120d5c:	d9c02c17 	ldw	r7,176(sp)
81120d60:	1000581e 	bne	r2,zero,81120ec4 <___svfiprintf_internal_r+0xc40>
81120d64:	843ffc04 	addi	r16,r16,-16
81120d68:	d8c01c17 	ldw	r3,112(sp)
81120d6c:	d8801b17 	ldw	r2,108(sp)
81120d70:	d811883a 	mov	r8,sp
81120d74:	3c3fed16 	blt	r7,r16,81120d2c <__reset+0xfb100d2c>
81120d78:	dac02217 	ldw	r11,136(sp)
81120d7c:	1c07883a 	add	r3,r3,r16
81120d80:	10800044 	addi	r2,r2,1
81120d84:	42c00015 	stw	r11,0(r8)
81120d88:	44000115 	stw	r16,4(r8)
81120d8c:	d8c01c15 	stw	r3,112(sp)
81120d90:	d8801b15 	stw	r2,108(sp)
81120d94:	010001c4 	movi	r4,7
81120d98:	20809e16 	blt	r4,r2,81121014 <___svfiprintf_internal_r+0xd90>
81120d9c:	42000204 	addi	r8,r8,8
81120da0:	dac02117 	ldw	r11,132(sp)
81120da4:	10800044 	addi	r2,r2,1
81120da8:	44400015 	stw	r17,0(r8)
81120dac:	58c7883a 	add	r3,r11,r3
81120db0:	42c00115 	stw	r11,4(r8)
81120db4:	d8c01c15 	stw	r3,112(sp)
81120db8:	d8801b15 	stw	r2,108(sp)
81120dbc:	010001c4 	movi	r4,7
81120dc0:	20807f16 	blt	r4,r2,81120fc0 <___svfiprintf_internal_r+0xd3c>
81120dc4:	42000204 	addi	r8,r8,8
81120dc8:	9480010c 	andi	r18,r18,4
81120dcc:	90002926 	beq	r18,zero,81120e74 <___svfiprintf_internal_r+0xbf0>
81120dd0:	dac02417 	ldw	r11,144(sp)
81120dd4:	d8802017 	ldw	r2,128(sp)
81120dd8:	58a1c83a 	sub	r16,r11,r2
81120ddc:	0400250e 	bge	zero,r16,81120e74 <___svfiprintf_internal_r+0xbf0>
81120de0:	04400404 	movi	r17,16
81120de4:	d8801b17 	ldw	r2,108(sp)
81120de8:	8c017c0e 	bge	r17,r16,811213dc <___svfiprintf_internal_r+0x1158>
81120dec:	01604534 	movhi	r5,33044
81120df0:	2979a204 	addi	r5,r5,-6520
81120df4:	d9402815 	stw	r5,160(sp)
81120df8:	048001c4 	movi	r18,7
81120dfc:	00000306 	br	81120e0c <___svfiprintf_internal_r+0xb88>
81120e00:	843ffc04 	addi	r16,r16,-16
81120e04:	42000204 	addi	r8,r8,8
81120e08:	8c00110e 	bge	r17,r16,81120e50 <___svfiprintf_internal_r+0xbcc>
81120e0c:	18c00404 	addi	r3,r3,16
81120e10:	10800044 	addi	r2,r2,1
81120e14:	45800015 	stw	r22,0(r8)
81120e18:	44400115 	stw	r17,4(r8)
81120e1c:	d8c01c15 	stw	r3,112(sp)
81120e20:	d8801b15 	stw	r2,108(sp)
81120e24:	90bff60e 	bge	r18,r2,81120e00 <__reset+0xfb100e00>
81120e28:	d9801a04 	addi	r6,sp,104
81120e2c:	b80b883a 	mov	r5,r23
81120e30:	a809883a 	mov	r4,r21
81120e34:	11200ac0 	call	811200ac <__ssprint_r>
81120e38:	1000221e 	bne	r2,zero,81120ec4 <___svfiprintf_internal_r+0xc40>
81120e3c:	843ffc04 	addi	r16,r16,-16
81120e40:	d8c01c17 	ldw	r3,112(sp)
81120e44:	d8801b17 	ldw	r2,108(sp)
81120e48:	d811883a 	mov	r8,sp
81120e4c:	8c3fef16 	blt	r17,r16,81120e0c <__reset+0xfb100e0c>
81120e50:	dac02817 	ldw	r11,160(sp)
81120e54:	1c07883a 	add	r3,r3,r16
81120e58:	10800044 	addi	r2,r2,1
81120e5c:	42c00015 	stw	r11,0(r8)
81120e60:	44000115 	stw	r16,4(r8)
81120e64:	d8c01c15 	stw	r3,112(sp)
81120e68:	d8801b15 	stw	r2,108(sp)
81120e6c:	010001c4 	movi	r4,7
81120e70:	2080aa16 	blt	r4,r2,8112111c <___svfiprintf_internal_r+0xe98>
81120e74:	d8802417 	ldw	r2,144(sp)
81120e78:	dac02017 	ldw	r11,128(sp)
81120e7c:	12c0010e 	bge	r2,r11,81120e84 <___svfiprintf_internal_r+0xc00>
81120e80:	5805883a 	mov	r2,r11
81120e84:	dac02517 	ldw	r11,148(sp)
81120e88:	5897883a 	add	r11,r11,r2
81120e8c:	dac02515 	stw	r11,148(sp)
81120e90:	1800531e 	bne	r3,zero,81120fe0 <___svfiprintf_internal_r+0xd5c>
81120e94:	98800007 	ldb	r2,0(r19)
81120e98:	d8001b15 	stw	zero,108(sp)
81120e9c:	d811883a 	mov	r8,sp
81120ea0:	103d231e 	bne	r2,zero,81120330 <__reset+0xfb100330>
81120ea4:	9823883a 	mov	r17,r19
81120ea8:	003d3906 	br	81120390 <__reset+0xfb100390>
81120eac:	d8801c17 	ldw	r2,112(sp)
81120eb0:	10000426 	beq	r2,zero,81120ec4 <___svfiprintf_internal_r+0xc40>
81120eb4:	d9402717 	ldw	r5,156(sp)
81120eb8:	d9002a17 	ldw	r4,168(sp)
81120ebc:	d9801a04 	addi	r6,sp,104
81120ec0:	11200ac0 	call	811200ac <__ssprint_r>
81120ec4:	dac02717 	ldw	r11,156(sp)
81120ec8:	d8802517 	ldw	r2,148(sp)
81120ecc:	58c0030b 	ldhu	r3,12(r11)
81120ed0:	18c0100c 	andi	r3,r3,64
81120ed4:	1801381e 	bne	r3,zero,811213b8 <___svfiprintf_internal_r+0x1134>
81120ed8:	dfc03717 	ldw	ra,220(sp)
81120edc:	df003617 	ldw	fp,216(sp)
81120ee0:	ddc03517 	ldw	r23,212(sp)
81120ee4:	dd803417 	ldw	r22,208(sp)
81120ee8:	dd403317 	ldw	r21,204(sp)
81120eec:	dd003217 	ldw	r20,200(sp)
81120ef0:	dcc03117 	ldw	r19,196(sp)
81120ef4:	dc803017 	ldw	r18,192(sp)
81120ef8:	dc402f17 	ldw	r17,188(sp)
81120efc:	dc002e17 	ldw	r16,184(sp)
81120f00:	dec03804 	addi	sp,sp,224
81120f04:	f800283a 	ret
81120f08:	dac02417 	ldw	r11,144(sp)
81120f0c:	d9002017 	ldw	r4,128(sp)
81120f10:	5939c83a 	sub	fp,r11,r4
81120f14:	073f780e 	bge	zero,fp,81120cf8 <__reset+0xfb100cf8>
81120f18:	02400404 	movi	r9,16
81120f1c:	4f01370e 	bge	r9,fp,811213fc <___svfiprintf_internal_r+0x1178>
81120f20:	02e04534 	movhi	r11,33044
81120f24:	5af99e04 	addi	r11,r11,-6536
81120f28:	dac02215 	stw	r11,136(sp)
81120f2c:	028001c4 	movi	r10,7
81120f30:	00000306 	br	81120f40 <___svfiprintf_internal_r+0xcbc>
81120f34:	e73ffc04 	addi	fp,fp,-16
81120f38:	42000204 	addi	r8,r8,8
81120f3c:	4f00150e 	bge	r9,fp,81120f94 <___svfiprintf_internal_r+0xd10>
81120f40:	18c00404 	addi	r3,r3,16
81120f44:	10800044 	addi	r2,r2,1
81120f48:	45000015 	stw	r20,0(r8)
81120f4c:	42400115 	stw	r9,4(r8)
81120f50:	d8c01c15 	stw	r3,112(sp)
81120f54:	d8801b15 	stw	r2,108(sp)
81120f58:	50bff60e 	bge	r10,r2,81120f34 <__reset+0xfb100f34>
81120f5c:	d9801a04 	addi	r6,sp,104
81120f60:	b80b883a 	mov	r5,r23
81120f64:	a809883a 	mov	r4,r21
81120f68:	da402c15 	stw	r9,176(sp)
81120f6c:	da802d15 	stw	r10,180(sp)
81120f70:	11200ac0 	call	811200ac <__ssprint_r>
81120f74:	da402c17 	ldw	r9,176(sp)
81120f78:	da802d17 	ldw	r10,180(sp)
81120f7c:	103fd11e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
81120f80:	e73ffc04 	addi	fp,fp,-16
81120f84:	d8c01c17 	ldw	r3,112(sp)
81120f88:	d8801b17 	ldw	r2,108(sp)
81120f8c:	d811883a 	mov	r8,sp
81120f90:	4f3feb16 	blt	r9,fp,81120f40 <__reset+0xfb100f40>
81120f94:	dac02217 	ldw	r11,136(sp)
81120f98:	1f07883a 	add	r3,r3,fp
81120f9c:	10800044 	addi	r2,r2,1
81120fa0:	42c00015 	stw	r11,0(r8)
81120fa4:	47000115 	stw	fp,4(r8)
81120fa8:	d8c01c15 	stw	r3,112(sp)
81120fac:	d8801b15 	stw	r2,108(sp)
81120fb0:	010001c4 	movi	r4,7
81120fb4:	2080b616 	blt	r4,r2,81121290 <___svfiprintf_internal_r+0x100c>
81120fb8:	42000204 	addi	r8,r8,8
81120fbc:	003f4e06 	br	81120cf8 <__reset+0xfb100cf8>
81120fc0:	d9801a04 	addi	r6,sp,104
81120fc4:	b80b883a 	mov	r5,r23
81120fc8:	a809883a 	mov	r4,r21
81120fcc:	11200ac0 	call	811200ac <__ssprint_r>
81120fd0:	103fbc1e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
81120fd4:	d8c01c17 	ldw	r3,112(sp)
81120fd8:	d811883a 	mov	r8,sp
81120fdc:	003f7a06 	br	81120dc8 <__reset+0xfb100dc8>
81120fe0:	d9801a04 	addi	r6,sp,104
81120fe4:	b80b883a 	mov	r5,r23
81120fe8:	a809883a 	mov	r4,r21
81120fec:	11200ac0 	call	811200ac <__ssprint_r>
81120ff0:	103fa826 	beq	r2,zero,81120e94 <__reset+0xfb100e94>
81120ff4:	003fb306 	br	81120ec4 <__reset+0xfb100ec4>
81120ff8:	d9801a04 	addi	r6,sp,104
81120ffc:	b80b883a 	mov	r5,r23
81121000:	a809883a 	mov	r4,r21
81121004:	11200ac0 	call	811200ac <__ssprint_r>
81121008:	103fae1e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
8112100c:	d811883a 	mov	r8,sp
81121010:	003cdc06 	br	81120384 <__reset+0xfb100384>
81121014:	d9801a04 	addi	r6,sp,104
81121018:	b80b883a 	mov	r5,r23
8112101c:	a809883a 	mov	r4,r21
81121020:	11200ac0 	call	811200ac <__ssprint_r>
81121024:	103fa71e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
81121028:	d8c01c17 	ldw	r3,112(sp)
8112102c:	d8801b17 	ldw	r2,108(sp)
81121030:	d811883a 	mov	r8,sp
81121034:	003f5a06 	br	81120da0 <__reset+0xfb100da0>
81121038:	d9801a04 	addi	r6,sp,104
8112103c:	b80b883a 	mov	r5,r23
81121040:	a809883a 	mov	r4,r21
81121044:	11200ac0 	call	811200ac <__ssprint_r>
81121048:	103f9e1e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
8112104c:	d8c01c17 	ldw	r3,112(sp)
81121050:	d8801b17 	ldw	r2,108(sp)
81121054:	d811883a 	mov	r8,sp
81121058:	003f1706 	br	81120cb8 <__reset+0xfb100cb8>
8112105c:	d9801a04 	addi	r6,sp,104
81121060:	b80b883a 	mov	r5,r23
81121064:	a809883a 	mov	r4,r21
81121068:	11200ac0 	call	811200ac <__ssprint_r>
8112106c:	103f951e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
81121070:	d8c01c17 	ldw	r3,112(sp)
81121074:	d8801b17 	ldw	r2,108(sp)
81121078:	d811883a 	mov	r8,sp
8112107c:	003f1b06 	br	81120cec <__reset+0xfb100cec>
81121080:	d8001d85 	stb	zero,118(sp)
81121084:	80007b16 	blt	r16,zero,81121274 <___svfiprintf_internal_r+0xff0>
81121088:	00ffdfc4 	movi	r3,-129
8112108c:	e244b03a 	or	r2,fp,r9
81121090:	90e4703a 	and	r18,r18,r3
81121094:	103d7026 	beq	r2,zero,81120658 <__reset+0xfb100658>
81121098:	0015883a 	mov	r10,zero
8112109c:	003d7206 	br	81120668 <__reset+0xfb100668>
811210a0:	d9801a04 	addi	r6,sp,104
811210a4:	b80b883a 	mov	r5,r23
811210a8:	a809883a 	mov	r4,r21
811210ac:	11200ac0 	call	811200ac <__ssprint_r>
811210b0:	103f841e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
811210b4:	d8c01c17 	ldw	r3,112(sp)
811210b8:	d8801b17 	ldw	r2,108(sp)
811210bc:	d811883a 	mov	r8,sp
811210c0:	003ef006 	br	81120c84 <__reset+0xfb100c84>
811210c4:	9080100c 	andi	r2,r18,64
811210c8:	d8001d85 	stb	zero,118(sp)
811210cc:	dac02317 	ldw	r11,140(sp)
811210d0:	10008126 	beq	r2,zero,811212d8 <___svfiprintf_internal_r+0x1054>
811210d4:	58800104 	addi	r2,r11,4
811210d8:	5f00000b 	ldhu	fp,0(r11)
811210dc:	0013883a 	mov	r9,zero
811210e0:	803ec30e 	bge	r16,zero,81120bf0 <__reset+0xfb100bf0>
811210e4:	d8802315 	stw	r2,140(sp)
811210e8:	0015883a 	mov	r10,zero
811210ec:	e244b03a 	or	r2,fp,r9
811210f0:	103e371e 	bne	r2,zero,811209d0 <__reset+0xfb1009d0>
811210f4:	00800044 	movi	r2,1
811210f8:	10803fcc 	andi	r2,r2,255
811210fc:	00c00044 	movi	r3,1
81121100:	10c06126 	beq	r2,r3,81121288 <___svfiprintf_internal_r+0x1004>
81121104:	00c00084 	movi	r3,2
81121108:	10fd5526 	beq	r2,r3,81120660 <__reset+0xfb100660>
8112110c:	003ed806 	br	81120c70 <__reset+0xfb100c70>
81121110:	d8802315 	stw	r2,140(sp)
81121114:	98c00007 	ldb	r3,0(r19)
81121118:	003cab06 	br	811203c8 <__reset+0xfb1003c8>
8112111c:	d9801a04 	addi	r6,sp,104
81121120:	b80b883a 	mov	r5,r23
81121124:	a809883a 	mov	r4,r21
81121128:	11200ac0 	call	811200ac <__ssprint_r>
8112112c:	103f651e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
81121130:	d8c01c17 	ldw	r3,112(sp)
81121134:	003f4f06 	br	81120e74 <__reset+0xfb100e74>
81121138:	00a04534 	movhi	r2,33044
8112113c:	10b91404 	addi	r2,r2,-7088
81121140:	d8802915 	stw	r2,164(sp)
81121144:	003d4406 	br	81120658 <__reset+0xfb100658>
81121148:	dac02317 	ldw	r11,140(sp)
8112114c:	58800017 	ldw	r2,0(r11)
81121150:	dac02517 	ldw	r11,148(sp)
81121154:	5807d7fa 	srai	r3,r11,31
81121158:	dac02317 	ldw	r11,140(sp)
8112115c:	10c00115 	stw	r3,4(r2)
81121160:	5ac00104 	addi	r11,r11,4
81121164:	dac02315 	stw	r11,140(sp)
81121168:	dac02517 	ldw	r11,148(sp)
8112116c:	12c00015 	stw	r11,0(r2)
81121170:	003c6d06 	br	81120328 <__reset+0xfb100328>
81121174:	9080100c 	andi	r2,r18,64
81121178:	dac02317 	ldw	r11,140(sp)
8112117c:	103e5326 	beq	r2,zero,81120acc <__reset+0xfb100acc>
81121180:	5f00000f 	ldh	fp,0(r11)
81121184:	5ac00104 	addi	r11,r11,4
81121188:	dac02315 	stw	r11,140(sp)
8112118c:	e013d7fa 	srai	r9,fp,31
81121190:	4805883a 	mov	r2,r9
81121194:	003e0706 	br	811209b4 <__reset+0xfb1009b4>
81121198:	00800c04 	movi	r2,48
8112119c:	d8801d05 	stb	r2,116(sp)
811211a0:	d8c01d45 	stb	r3,117(sp)
811211a4:	d8001d85 	stb	zero,118(sp)
811211a8:	90800094 	ori	r2,r18,2
811211ac:	80008f16 	blt	r16,zero,811213ec <___svfiprintf_internal_r+0x1168>
811211b0:	00bfdfc4 	movi	r2,-129
811211b4:	90a4703a 	and	r18,r18,r2
811211b8:	94800094 	ori	r18,r18,2
811211bc:	0015883a 	mov	r10,zero
811211c0:	003d2906 	br	81120668 <__reset+0xfb100668>
811211c4:	98c00007 	ldb	r3,0(r19)
811211c8:	003c7f06 	br	811203c8 <__reset+0xfb1003c8>
811211cc:	dac02317 	ldw	r11,140(sp)
811211d0:	0013883a 	mov	r9,zero
811211d4:	5f000017 	ldw	fp,0(r11)
811211d8:	5ac00104 	addi	r11,r11,4
811211dc:	dac02315 	stw	r11,140(sp)
811211e0:	003d1506 	br	81120638 <__reset+0xfb100638>
811211e4:	9080100c 	andi	r2,r18,64
811211e8:	d8001d85 	stb	zero,118(sp)
811211ec:	dac02317 	ldw	r11,140(sp)
811211f0:	10003426 	beq	r2,zero,811212c4 <___svfiprintf_internal_r+0x1040>
811211f4:	58800104 	addi	r2,r11,4
811211f8:	5f00000b 	ldhu	fp,0(r11)
811211fc:	0013883a 	mov	r9,zero
81121200:	803e950e 	bge	r16,zero,81120c58 <__reset+0xfb100c58>
81121204:	e246b03a 	or	r3,fp,r9
81121208:	d8802315 	stw	r2,140(sp)
8112120c:	183d5a1e 	bne	r3,zero,81120778 <__reset+0xfb100778>
81121210:	0015883a 	mov	r10,zero
81121214:	0005883a 	mov	r2,zero
81121218:	003fb706 	br	811210f8 <__reset+0xfb1010f8>
8112121c:	98c00043 	ldbu	r3,1(r19)
81121220:	94800814 	ori	r18,r18,32
81121224:	9cc00044 	addi	r19,r19,1
81121228:	18c03fcc 	andi	r3,r3,255
8112122c:	18c0201c 	xori	r3,r3,128
81121230:	18ffe004 	addi	r3,r3,-128
81121234:	003c6406 	br	811203c8 <__reset+0xfb1003c8>
81121238:	d8c02315 	stw	r3,140(sp)
8112123c:	0015883a 	mov	r10,zero
81121240:	003faa06 	br	811210ec <__reset+0xfb1010ec>
81121244:	dac02317 	ldw	r11,140(sp)
81121248:	58800017 	ldw	r2,0(r11)
8112124c:	5ac00104 	addi	r11,r11,4
81121250:	dac02315 	stw	r11,140(sp)
81121254:	dac02517 	ldw	r11,148(sp)
81121258:	12c00015 	stw	r11,0(r2)
8112125c:	003c3206 	br	81120328 <__reset+0xfb100328>
81121260:	01204534 	movhi	r4,33044
81121264:	21391404 	addi	r4,r4,-7088
81121268:	d9002915 	stw	r4,164(sp)
8112126c:	d8c02315 	stw	r3,140(sp)
81121270:	1025883a 	mov	r18,r2
81121274:	e244b03a 	or	r2,fp,r9
81121278:	103f871e 	bne	r2,zero,81121098 <__reset+0xfb101098>
8112127c:	0015883a 	mov	r10,zero
81121280:	00800084 	movi	r2,2
81121284:	003f9c06 	br	811210f8 <__reset+0xfb1010f8>
81121288:	0039883a 	mov	fp,zero
8112128c:	003e5f06 	br	81120c0c <__reset+0xfb100c0c>
81121290:	d9801a04 	addi	r6,sp,104
81121294:	b80b883a 	mov	r5,r23
81121298:	a809883a 	mov	r4,r21
8112129c:	11200ac0 	call	811200ac <__ssprint_r>
811212a0:	103f081e 	bne	r2,zero,81120ec4 <__reset+0xfb100ec4>
811212a4:	d8c01c17 	ldw	r3,112(sp)
811212a8:	d8801b17 	ldw	r2,108(sp)
811212ac:	d811883a 	mov	r8,sp
811212b0:	003e9106 	br	81120cf8 <__reset+0xfb100cf8>
811212b4:	01204534 	movhi	r4,33044
811212b8:	21399e04 	addi	r4,r4,-6536
811212bc:	d9002215 	stw	r4,136(sp)
811212c0:	003ead06 	br	81120d78 <__reset+0xfb100d78>
811212c4:	58800104 	addi	r2,r11,4
811212c8:	5f000017 	ldw	fp,0(r11)
811212cc:	0013883a 	mov	r9,zero
811212d0:	803e610e 	bge	r16,zero,81120c58 <__reset+0xfb100c58>
811212d4:	003fcb06 	br	81121204 <__reset+0xfb101204>
811212d8:	58800104 	addi	r2,r11,4
811212dc:	5f000017 	ldw	fp,0(r11)
811212e0:	0013883a 	mov	r9,zero
811212e4:	803e420e 	bge	r16,zero,81120bf0 <__reset+0xfb100bf0>
811212e8:	003f7e06 	br	811210e4 <__reset+0xfb1010e4>
811212ec:	5f000017 	ldw	fp,0(r11)
811212f0:	5ac00104 	addi	r11,r11,4
811212f4:	0013883a 	mov	r9,zero
811212f8:	dac02315 	stw	r11,140(sp)
811212fc:	003cce06 	br	81120638 <__reset+0xfb100638>
81121300:	8809883a 	mov	r4,r17
81121304:	da002c15 	stw	r8,176(sp)
81121308:	11132f80 	call	811132f8 <strlen>
8112130c:	d8802115 	stw	r2,132(sp)
81121310:	da801d83 	ldbu	r10,118(sp)
81121314:	df002315 	stw	fp,140(sp)
81121318:	0021883a 	mov	r16,zero
8112131c:	da002c17 	ldw	r8,176(sp)
81121320:	003cf606 	br	811206fc <__reset+0xfb1006fc>
81121324:	00800184 	movi	r2,6
81121328:	1400012e 	bgeu	r2,r16,81121330 <___svfiprintf_internal_r+0x10ac>
8112132c:	1021883a 	mov	r16,r2
81121330:	dc002115 	stw	r16,132(sp)
81121334:	8005883a 	mov	r2,r16
81121338:	80003c16 	blt	r16,zero,8112142c <___svfiprintf_internal_r+0x11a8>
8112133c:	04604534 	movhi	r17,33044
81121340:	d8802015 	stw	r2,128(sp)
81121344:	df002315 	stw	fp,140(sp)
81121348:	8c791904 	addi	r17,r17,-7068
8112134c:	003d2e06 	br	81120808 <__reset+0xfb100808>
81121350:	04001004 	movi	r16,64
81121354:	800b883a 	mov	r5,r16
81121358:	11121680 	call	81112168 <_malloc_r>
8112135c:	dac02717 	ldw	r11,156(sp)
81121360:	58800015 	stw	r2,0(r11)
81121364:	58800415 	stw	r2,16(r11)
81121368:	10004826 	beq	r2,zero,8112148c <___svfiprintf_internal_r+0x1208>
8112136c:	dac02717 	ldw	r11,156(sp)
81121370:	5c000515 	stw	r16,20(r11)
81121374:	003bd906 	br	811202dc <__reset+0xfb1002dc>
81121378:	9080004c 	andi	r2,r18,1
8112137c:	0015883a 	mov	r10,zero
81121380:	10000626 	beq	r2,zero,8112139c <___svfiprintf_internal_r+0x1118>
81121384:	dac02b17 	ldw	r11,172(sp)
81121388:	00800c04 	movi	r2,48
8112138c:	d88019c5 	stb	r2,103(sp)
81121390:	dac02115 	stw	r11,132(sp)
81121394:	dc4019c4 	addi	r17,sp,103
81121398:	003cd806 	br	811206fc <__reset+0xfb1006fc>
8112139c:	d8002115 	stw	zero,132(sp)
811213a0:	dc401a04 	addi	r17,sp,104
811213a4:	003cd506 	br	811206fc <__reset+0xfb1006fc>
811213a8:	01204534 	movhi	r4,33044
811213ac:	2139a204 	addi	r4,r4,-6520
811213b0:	d9002815 	stw	r4,160(sp)
811213b4:	003d4306 	br	811208c4 <__reset+0xfb1008c4>
811213b8:	00bfffc4 	movi	r2,-1
811213bc:	003ec606 	br	81120ed8 <__reset+0xfb100ed8>
811213c0:	00800044 	movi	r2,1
811213c4:	10803fcc 	andi	r2,r2,255
811213c8:	00c00044 	movi	r3,1
811213cc:	10fd8026 	beq	r2,r3,811209d0 <__reset+0xfb1009d0>
811213d0:	00c00084 	movi	r3,2
811213d4:	10fca426 	beq	r2,r3,81120668 <__reset+0xfb100668>
811213d8:	003ce806 	br	8112077c <__reset+0xfb10077c>
811213dc:	01204534 	movhi	r4,33044
811213e0:	2139a204 	addi	r4,r4,-6520
811213e4:	d9002815 	stw	r4,160(sp)
811213e8:	003e9906 	br	81120e50 <__reset+0xfb100e50>
811213ec:	1025883a 	mov	r18,r2
811213f0:	0015883a 	mov	r10,zero
811213f4:	00800084 	movi	r2,2
811213f8:	003ff206 	br	811213c4 <__reset+0xfb1013c4>
811213fc:	01604534 	movhi	r5,33044
81121400:	29799e04 	addi	r5,r5,-6536
81121404:	d9402215 	stw	r5,136(sp)
81121408:	003ee206 	br	81120f94 <__reset+0xfb100f94>
8112140c:	5827883a 	mov	r19,r11
81121410:	0021883a 	mov	r16,zero
81121414:	003bed06 	br	811203cc <__reset+0xfb1003cc>
81121418:	dc002115 	stw	r16,132(sp)
8112141c:	da801d83 	ldbu	r10,118(sp)
81121420:	df002315 	stw	fp,140(sp)
81121424:	0021883a 	mov	r16,zero
81121428:	003cb406 	br	811206fc <__reset+0xfb1006fc>
8112142c:	0005883a 	mov	r2,zero
81121430:	003fc206 	br	8112133c <__reset+0xfb10133c>
81121434:	d8802317 	ldw	r2,140(sp)
81121438:	98c00043 	ldbu	r3,1(r19)
8112143c:	5827883a 	mov	r19,r11
81121440:	14000017 	ldw	r16,0(r2)
81121444:	10800104 	addi	r2,r2,4
81121448:	d8802315 	stw	r2,140(sp)
8112144c:	803f760e 	bge	r16,zero,81121228 <__reset+0xfb101228>
81121450:	18c03fcc 	andi	r3,r3,255
81121454:	18c0201c 	xori	r3,r3,128
81121458:	043fffc4 	movi	r16,-1
8112145c:	18ffe004 	addi	r3,r3,-128
81121460:	003bd906 	br	811203c8 <__reset+0xfb1003c8>
81121464:	d9c01d85 	stb	r7,118(sp)
81121468:	003cb606 	br	81120744 <__reset+0xfb100744>
8112146c:	d9c01d85 	stb	r7,118(sp)
81121470:	003d2106 	br	811208f8 <__reset+0xfb1008f8>
81121474:	d9c01d85 	stb	r7,118(sp)
81121478:	003d8e06 	br	81120ab4 <__reset+0xfb100ab4>
8112147c:	d9c01d85 	stb	r7,118(sp)
81121480:	003db306 	br	81120b50 <__reset+0xfb100b50>
81121484:	d9c01d85 	stb	r7,118(sp)
81121488:	003c8a06 	br	811206b4 <__reset+0xfb1006b4>
8112148c:	dac02a17 	ldw	r11,168(sp)
81121490:	00800304 	movi	r2,12
81121494:	58800015 	stw	r2,0(r11)
81121498:	00bfffc4 	movi	r2,-1
8112149c:	003e8e06 	br	81120ed8 <__reset+0xfb100ed8>
811214a0:	d9c01d85 	stb	r7,118(sp)
811214a4:	003dc706 	br	81120bc4 <__reset+0xfb100bc4>
811214a8:	d9c01d85 	stb	r7,118(sp)
811214ac:	003ddf06 	br	81120c2c <__reset+0xfb100c2c>
811214b0:	d9c01d85 	stb	r7,118(sp)
811214b4:	003d3706 	br	81120994 <__reset+0xfb100994>
811214b8:	d9c01d85 	stb	r7,118(sp)
811214bc:	003c5406 	br	81120610 <__reset+0xfb100610>
811214c0:	d9c01d85 	stb	r7,118(sp)
811214c4:	003d1d06 	br	8112093c <__reset+0xfb10093c>

811214c8 <__submore>:
811214c8:	defffa04 	addi	sp,sp,-24
811214cc:	de00012e 	bgeu	sp,et,811214d4 <__submore+0xc>
811214d0:	003b68fa 	trap	3
811214d4:	dc000015 	stw	r16,0(sp)
811214d8:	2821883a 	mov	r16,r5
811214dc:	29400c17 	ldw	r5,48(r5)
811214e0:	dfc00515 	stw	ra,20(sp)
811214e4:	dd000415 	stw	r20,16(sp)
811214e8:	dcc00315 	stw	r19,12(sp)
811214ec:	dc800215 	stw	r18,8(sp)
811214f0:	dc400115 	stw	r17,4(sp)
811214f4:	80801004 	addi	r2,r16,64
811214f8:	28801726 	beq	r5,r2,81121558 <__submore+0x90>
811214fc:	84400d17 	ldw	r17,52(r16)
81121500:	8c67883a 	add	r19,r17,r17
81121504:	980d883a 	mov	r6,r19
81121508:	111d9540 	call	8111d954 <_realloc_r>
8112150c:	1025883a 	mov	r18,r2
81121510:	10002226 	beq	r2,zero,8112159c <__submore+0xd4>
81121514:	1469883a 	add	r20,r2,r17
81121518:	880d883a 	mov	r6,r17
8112151c:	100b883a 	mov	r5,r2
81121520:	a009883a 	mov	r4,r20
81121524:	111297c0 	call	8111297c <memcpy>
81121528:	0005883a 	mov	r2,zero
8112152c:	85000015 	stw	r20,0(r16)
81121530:	84800c15 	stw	r18,48(r16)
81121534:	84c00d15 	stw	r19,52(r16)
81121538:	dfc00517 	ldw	ra,20(sp)
8112153c:	dd000417 	ldw	r20,16(sp)
81121540:	dcc00317 	ldw	r19,12(sp)
81121544:	dc800217 	ldw	r18,8(sp)
81121548:	dc400117 	ldw	r17,4(sp)
8112154c:	dc000017 	ldw	r16,0(sp)
81121550:	dec00604 	addi	sp,sp,24
81121554:	f800283a 	ret
81121558:	04410004 	movi	r17,1024
8112155c:	880b883a 	mov	r5,r17
81121560:	11121680 	call	81112168 <_malloc_r>
81121564:	1007883a 	mov	r3,r2
81121568:	10000c26 	beq	r2,zero,8112159c <__submore+0xd4>
8112156c:	80801083 	ldbu	r2,66(r16)
81121570:	80c00c15 	stw	r3,48(r16)
81121574:	84400d15 	stw	r17,52(r16)
81121578:	1880ffc5 	stb	r2,1023(r3)
8112157c:	81401043 	ldbu	r5,65(r16)
81121580:	1900ff44 	addi	r4,r3,1021
81121584:	0005883a 	mov	r2,zero
81121588:	1940ff85 	stb	r5,1022(r3)
8112158c:	81401003 	ldbu	r5,64(r16)
81121590:	1940ff45 	stb	r5,1021(r3)
81121594:	81000015 	stw	r4,0(r16)
81121598:	003fe706 	br	81121538 <__reset+0xfb101538>
8112159c:	00bfffc4 	movi	r2,-1
811215a0:	003fe506 	br	81121538 <__reset+0xfb101538>

811215a4 <_ungetc_r>:
811215a4:	00bfffc4 	movi	r2,-1
811215a8:	28806326 	beq	r5,r2,81121738 <_ungetc_r+0x194>
811215ac:	defffb04 	addi	sp,sp,-20
811215b0:	de00012e 	bgeu	sp,et,811215b8 <_ungetc_r+0x14>
811215b4:	003b68fa 	trap	3
811215b8:	dcc00315 	stw	r19,12(sp)
811215bc:	dc400115 	stw	r17,4(sp)
811215c0:	dc000015 	stw	r16,0(sp)
811215c4:	dfc00415 	stw	ra,16(sp)
811215c8:	dc800215 	stw	r18,8(sp)
811215cc:	2023883a 	mov	r17,r4
811215d0:	3021883a 	mov	r16,r6
811215d4:	2827883a 	mov	r19,r5
811215d8:	20000226 	beq	r4,zero,811215e4 <_ungetc_r+0x40>
811215dc:	20800e17 	ldw	r2,56(r4)
811215e0:	10002e26 	beq	r2,zero,8112169c <_ungetc_r+0xf8>
811215e4:	80c0030b 	ldhu	r3,12(r16)
811215e8:	1888000c 	andi	r2,r3,8192
811215ec:	1000051e 	bne	r2,zero,81121604 <_ungetc_r+0x60>
811215f0:	81001917 	ldw	r4,100(r16)
811215f4:	00b7ffc4 	movi	r2,-8193
811215f8:	18c80014 	ori	r3,r3,8192
811215fc:	2084703a 	and	r2,r4,r2
81121600:	80801915 	stw	r2,100(r16)
81121604:	00bff7c4 	movi	r2,-33
81121608:	1884703a 	and	r2,r3,r2
8112160c:	8080030d 	sth	r2,12(r16)
81121610:	1900010c 	andi	r4,r3,4
81121614:	2000061e 	bne	r4,zero,81121630 <_ungetc_r+0x8c>
81121618:	1900040c 	andi	r4,r3,16
8112161c:	20001d26 	beq	r4,zero,81121694 <_ungetc_r+0xf0>
81121620:	18c0020c 	andi	r3,r3,8
81121624:	1800331e 	bne	r3,zero,811216f4 <_ungetc_r+0x150>
81121628:	10800114 	ori	r2,r2,4
8112162c:	8080030d 	sth	r2,12(r16)
81121630:	80800c17 	ldw	r2,48(r16)
81121634:	9c803fcc 	andi	r18,r19,255
81121638:	10001a26 	beq	r2,zero,811216a4 <_ungetc_r+0x100>
8112163c:	80c00117 	ldw	r3,4(r16)
81121640:	80800d17 	ldw	r2,52(r16)
81121644:	18800f0e 	bge	r3,r2,81121684 <_ungetc_r+0xe0>
81121648:	80c00017 	ldw	r3,0(r16)
8112164c:	9005883a 	mov	r2,r18
81121650:	193fffc4 	addi	r4,r3,-1
81121654:	81000015 	stw	r4,0(r16)
81121658:	1cffffc5 	stb	r19,-1(r3)
8112165c:	80c00117 	ldw	r3,4(r16)
81121660:	18c00044 	addi	r3,r3,1
81121664:	80c00115 	stw	r3,4(r16)
81121668:	dfc00417 	ldw	ra,16(sp)
8112166c:	dcc00317 	ldw	r19,12(sp)
81121670:	dc800217 	ldw	r18,8(sp)
81121674:	dc400117 	ldw	r17,4(sp)
81121678:	dc000017 	ldw	r16,0(sp)
8112167c:	dec00504 	addi	sp,sp,20
81121680:	f800283a 	ret
81121684:	800b883a 	mov	r5,r16
81121688:	8809883a 	mov	r4,r17
8112168c:	11214c80 	call	811214c8 <__submore>
81121690:	103fed26 	beq	r2,zero,81121648 <__reset+0xfb101648>
81121694:	00bfffc4 	movi	r2,-1
81121698:	003ff306 	br	81121668 <__reset+0xfb101668>
8112169c:	111b4280 	call	8111b428 <__sinit>
811216a0:	003fd006 	br	811215e4 <__reset+0xfb1015e4>
811216a4:	80c00417 	ldw	r3,16(r16)
811216a8:	80800017 	ldw	r2,0(r16)
811216ac:	18000326 	beq	r3,zero,811216bc <_ungetc_r+0x118>
811216b0:	1880022e 	bgeu	r3,r2,811216bc <_ungetc_r+0x118>
811216b4:	10ffffc3 	ldbu	r3,-1(r2)
811216b8:	90c01826 	beq	r18,r3,8112171c <_ungetc_r+0x178>
811216bc:	81400117 	ldw	r5,4(r16)
811216c0:	80800e15 	stw	r2,56(r16)
811216c4:	008000c4 	movi	r2,3
811216c8:	81001004 	addi	r4,r16,64
811216cc:	80c01084 	addi	r3,r16,66
811216d0:	80800d15 	stw	r2,52(r16)
811216d4:	00800044 	movi	r2,1
811216d8:	80800115 	stw	r2,4(r16)
811216dc:	81400f15 	stw	r5,60(r16)
811216e0:	81000c15 	stw	r4,48(r16)
811216e4:	84c01085 	stb	r19,66(r16)
811216e8:	80c00015 	stw	r3,0(r16)
811216ec:	9005883a 	mov	r2,r18
811216f0:	003fdd06 	br	81121668 <__reset+0xfb101668>
811216f4:	800b883a 	mov	r5,r16
811216f8:	8809883a 	mov	r4,r17
811216fc:	111b02c0 	call	8111b02c <_fflush_r>
81121700:	103fe41e 	bne	r2,zero,81121694 <__reset+0xfb101694>
81121704:	8080030b 	ldhu	r2,12(r16)
81121708:	00fffdc4 	movi	r3,-9
8112170c:	80000215 	stw	zero,8(r16)
81121710:	1884703a 	and	r2,r3,r2
81121714:	80000615 	stw	zero,24(r16)
81121718:	003fc306 	br	81121628 <__reset+0xfb101628>
8112171c:	80c00117 	ldw	r3,4(r16)
81121720:	10bfffc4 	addi	r2,r2,-1
81121724:	80800015 	stw	r2,0(r16)
81121728:	18800044 	addi	r2,r3,1
8112172c:	80800115 	stw	r2,4(r16)
81121730:	9005883a 	mov	r2,r18
81121734:	003fcc06 	br	81121668 <__reset+0xfb101668>
81121738:	00bfffc4 	movi	r2,-1
8112173c:	f800283a 	ret

81121740 <ungetc>:
81121740:	00a04534 	movhi	r2,33044
81121744:	10821504 	addi	r2,r2,2132
81121748:	280d883a 	mov	r6,r5
8112174c:	200b883a 	mov	r5,r4
81121750:	11000017 	ldw	r4,0(r2)
81121754:	11215a41 	jmpi	811215a4 <_ungetc_r>

81121758 <__sprint_r.part.0>:
81121758:	defff604 	addi	sp,sp,-40
8112175c:	de00012e 	bgeu	sp,et,81121764 <__sprint_r.part.0+0xc>
81121760:	003b68fa 	trap	3
81121764:	28801917 	ldw	r2,100(r5)
81121768:	dd400515 	stw	r21,20(sp)
8112176c:	dfc00915 	stw	ra,36(sp)
81121770:	df000815 	stw	fp,32(sp)
81121774:	ddc00715 	stw	r23,28(sp)
81121778:	dd800615 	stw	r22,24(sp)
8112177c:	dd000415 	stw	r20,16(sp)
81121780:	dcc00315 	stw	r19,12(sp)
81121784:	dc800215 	stw	r18,8(sp)
81121788:	dc400115 	stw	r17,4(sp)
8112178c:	dc000015 	stw	r16,0(sp)
81121790:	1088000c 	andi	r2,r2,8192
81121794:	302b883a 	mov	r21,r6
81121798:	10002e26 	beq	r2,zero,81121854 <__sprint_r.part.0+0xfc>
8112179c:	30800217 	ldw	r2,8(r6)
811217a0:	35800017 	ldw	r22,0(r6)
811217a4:	10002926 	beq	r2,zero,8112184c <__sprint_r.part.0+0xf4>
811217a8:	2827883a 	mov	r19,r5
811217ac:	2029883a 	mov	r20,r4
811217b0:	b5c00104 	addi	r23,r22,4
811217b4:	04bfffc4 	movi	r18,-1
811217b8:	bc400017 	ldw	r17,0(r23)
811217bc:	b4000017 	ldw	r16,0(r22)
811217c0:	0039883a 	mov	fp,zero
811217c4:	8822d0ba 	srli	r17,r17,2
811217c8:	8800031e 	bne	r17,zero,811217d8 <__sprint_r.part.0+0x80>
811217cc:	00001806 	br	81121830 <__sprint_r.part.0+0xd8>
811217d0:	84000104 	addi	r16,r16,4
811217d4:	8f001526 	beq	r17,fp,8112182c <__sprint_r.part.0+0xd4>
811217d8:	81400017 	ldw	r5,0(r16)
811217dc:	980d883a 	mov	r6,r19
811217e0:	a009883a 	mov	r4,r20
811217e4:	11230fc0 	call	811230fc <_fputwc_r>
811217e8:	e7000044 	addi	fp,fp,1
811217ec:	14bff81e 	bne	r2,r18,811217d0 <__reset+0xfb1017d0>
811217f0:	9005883a 	mov	r2,r18
811217f4:	a8000215 	stw	zero,8(r21)
811217f8:	a8000115 	stw	zero,4(r21)
811217fc:	dfc00917 	ldw	ra,36(sp)
81121800:	df000817 	ldw	fp,32(sp)
81121804:	ddc00717 	ldw	r23,28(sp)
81121808:	dd800617 	ldw	r22,24(sp)
8112180c:	dd400517 	ldw	r21,20(sp)
81121810:	dd000417 	ldw	r20,16(sp)
81121814:	dcc00317 	ldw	r19,12(sp)
81121818:	dc800217 	ldw	r18,8(sp)
8112181c:	dc400117 	ldw	r17,4(sp)
81121820:	dc000017 	ldw	r16,0(sp)
81121824:	dec00a04 	addi	sp,sp,40
81121828:	f800283a 	ret
8112182c:	a8800217 	ldw	r2,8(r21)
81121830:	8c63883a 	add	r17,r17,r17
81121834:	8c63883a 	add	r17,r17,r17
81121838:	1445c83a 	sub	r2,r2,r17
8112183c:	a8800215 	stw	r2,8(r21)
81121840:	b5800204 	addi	r22,r22,8
81121844:	bdc00204 	addi	r23,r23,8
81121848:	103fdb1e 	bne	r2,zero,811217b8 <__reset+0xfb1017b8>
8112184c:	0005883a 	mov	r2,zero
81121850:	003fe806 	br	811217f4 <__reset+0xfb1017f4>
81121854:	111bbd80 	call	8111bbd8 <__sfvwrite_r>
81121858:	003fe606 	br	811217f4 <__reset+0xfb1017f4>

8112185c <__sprint_r>:
8112185c:	30c00217 	ldw	r3,8(r6)
81121860:	18000126 	beq	r3,zero,81121868 <__sprint_r+0xc>
81121864:	11217581 	jmpi	81121758 <__sprint_r.part.0>
81121868:	30000115 	stw	zero,4(r6)
8112186c:	0005883a 	mov	r2,zero
81121870:	f800283a 	ret

81121874 <___vfiprintf_internal_r>:
81121874:	deffc904 	addi	sp,sp,-220
81121878:	de00012e 	bgeu	sp,et,81121880 <___vfiprintf_internal_r+0xc>
8112187c:	003b68fa 	trap	3
81121880:	df003515 	stw	fp,212(sp)
81121884:	dd003115 	stw	r20,196(sp)
81121888:	dfc03615 	stw	ra,216(sp)
8112188c:	ddc03415 	stw	r23,208(sp)
81121890:	dd803315 	stw	r22,204(sp)
81121894:	dd403215 	stw	r21,200(sp)
81121898:	dcc03015 	stw	r19,192(sp)
8112189c:	dc802f15 	stw	r18,188(sp)
811218a0:	dc402e15 	stw	r17,184(sp)
811218a4:	dc002d15 	stw	r16,180(sp)
811218a8:	d9002015 	stw	r4,128(sp)
811218ac:	d9c02215 	stw	r7,136(sp)
811218b0:	2829883a 	mov	r20,r5
811218b4:	3039883a 	mov	fp,r6
811218b8:	20000226 	beq	r4,zero,811218c4 <___vfiprintf_internal_r+0x50>
811218bc:	20800e17 	ldw	r2,56(r4)
811218c0:	1000cf26 	beq	r2,zero,81121c00 <___vfiprintf_internal_r+0x38c>
811218c4:	a080030b 	ldhu	r2,12(r20)
811218c8:	10c8000c 	andi	r3,r2,8192
811218cc:	1800061e 	bne	r3,zero,811218e8 <___vfiprintf_internal_r+0x74>
811218d0:	a1001917 	ldw	r4,100(r20)
811218d4:	00f7ffc4 	movi	r3,-8193
811218d8:	10880014 	ori	r2,r2,8192
811218dc:	20c6703a 	and	r3,r4,r3
811218e0:	a080030d 	sth	r2,12(r20)
811218e4:	a0c01915 	stw	r3,100(r20)
811218e8:	10c0020c 	andi	r3,r2,8
811218ec:	1800a926 	beq	r3,zero,81121b94 <___vfiprintf_internal_r+0x320>
811218f0:	a0c00417 	ldw	r3,16(r20)
811218f4:	1800a726 	beq	r3,zero,81121b94 <___vfiprintf_internal_r+0x320>
811218f8:	1080068c 	andi	r2,r2,26
811218fc:	00c00284 	movi	r3,10
81121900:	10c0ac26 	beq	r2,r3,81121bb4 <___vfiprintf_internal_r+0x340>
81121904:	da801a04 	addi	r10,sp,104
81121908:	da801e15 	stw	r10,120(sp)
8112190c:	d8801e17 	ldw	r2,120(sp)
81121910:	da8019c4 	addi	r10,sp,103
81121914:	05a04534 	movhi	r22,33044
81121918:	05e04534 	movhi	r23,33044
8112191c:	da801f15 	stw	r10,124(sp)
81121920:	1295c83a 	sub	r10,r2,r10
81121924:	b5b9aa04 	addi	r22,r22,-6488
81121928:	bdf9a604 	addi	r23,r23,-6504
8112192c:	dec01a15 	stw	sp,104(sp)
81121930:	d8001c15 	stw	zero,112(sp)
81121934:	d8001b15 	stw	zero,108(sp)
81121938:	d8002615 	stw	zero,152(sp)
8112193c:	d8002315 	stw	zero,140(sp)
81121940:	da802715 	stw	r10,156(sp)
81121944:	d811883a 	mov	r8,sp
81121948:	dd002115 	stw	r20,132(sp)
8112194c:	e021883a 	mov	r16,fp
81121950:	80800007 	ldb	r2,0(r16)
81121954:	1003ea26 	beq	r2,zero,81122900 <___vfiprintf_internal_r+0x108c>
81121958:	00c00944 	movi	r3,37
8112195c:	8025883a 	mov	r18,r16
81121960:	10c0021e 	bne	r2,r3,8112196c <___vfiprintf_internal_r+0xf8>
81121964:	00001606 	br	811219c0 <___vfiprintf_internal_r+0x14c>
81121968:	10c00326 	beq	r2,r3,81121978 <___vfiprintf_internal_r+0x104>
8112196c:	94800044 	addi	r18,r18,1
81121970:	90800007 	ldb	r2,0(r18)
81121974:	103ffc1e 	bne	r2,zero,81121968 <__reset+0xfb101968>
81121978:	9423c83a 	sub	r17,r18,r16
8112197c:	88001026 	beq	r17,zero,811219c0 <___vfiprintf_internal_r+0x14c>
81121980:	d8c01c17 	ldw	r3,112(sp)
81121984:	d8801b17 	ldw	r2,108(sp)
81121988:	44000015 	stw	r16,0(r8)
8112198c:	88c7883a 	add	r3,r17,r3
81121990:	10800044 	addi	r2,r2,1
81121994:	44400115 	stw	r17,4(r8)
81121998:	d8c01c15 	stw	r3,112(sp)
8112199c:	d8801b15 	stw	r2,108(sp)
811219a0:	010001c4 	movi	r4,7
811219a4:	2080760e 	bge	r4,r2,81121b80 <___vfiprintf_internal_r+0x30c>
811219a8:	1803821e 	bne	r3,zero,811227b4 <___vfiprintf_internal_r+0xf40>
811219ac:	da802317 	ldw	r10,140(sp)
811219b0:	d8001b15 	stw	zero,108(sp)
811219b4:	d811883a 	mov	r8,sp
811219b8:	5455883a 	add	r10,r10,r17
811219bc:	da802315 	stw	r10,140(sp)
811219c0:	90800007 	ldb	r2,0(r18)
811219c4:	10044626 	beq	r2,zero,81122ae0 <___vfiprintf_internal_r+0x126c>
811219c8:	90c00047 	ldb	r3,1(r18)
811219cc:	94000044 	addi	r16,r18,1
811219d0:	d8001d85 	stb	zero,118(sp)
811219d4:	0009883a 	mov	r4,zero
811219d8:	000f883a 	mov	r7,zero
811219dc:	027fffc4 	movi	r9,-1
811219e0:	0023883a 	mov	r17,zero
811219e4:	0029883a 	mov	r20,zero
811219e8:	01401604 	movi	r5,88
811219ec:	01800244 	movi	r6,9
811219f0:	03400a84 	movi	r13,42
811219f4:	03001b04 	movi	r12,108
811219f8:	84000044 	addi	r16,r16,1
811219fc:	18bff804 	addi	r2,r3,-32
81121a00:	28827336 	bltu	r5,r2,811223d0 <___vfiprintf_internal_r+0xb5c>
81121a04:	100490ba 	slli	r2,r2,2
81121a08:	02a044b4 	movhi	r10,33042
81121a0c:	52868704 	addi	r10,r10,6684
81121a10:	1285883a 	add	r2,r2,r10
81121a14:	10800017 	ldw	r2,0(r2)
81121a18:	1000683a 	jmp	r2
81121a1c:	81122104 	addi	r4,r16,18564
81121a20:	811223d0 	cmplti	r4,r16,18575
81121a24:	811223d0 	cmplti	r4,r16,18575
81121a28:	81122124 	muli	r4,r16,18564
81121a2c:	811223d0 	cmplti	r4,r16,18575
81121a30:	811223d0 	cmplti	r4,r16,18575
81121a34:	811223d0 	cmplti	r4,r16,18575
81121a38:	811223d0 	cmplti	r4,r16,18575
81121a3c:	811223d0 	cmplti	r4,r16,18575
81121a40:	811223d0 	cmplti	r4,r16,18575
81121a44:	8112230c 	andi	r4,r16,18572
81121a48:	81122328 	cmpgeui	r4,r16,18572
81121a4c:	811223d0 	cmplti	r4,r16,18575
81121a50:	81121c10 	cmplti	r4,r16,18544
81121a54:	81122338 	rdprs	r4,r16,18572
81121a58:	811223d0 	cmplti	r4,r16,18575
81121a5c:	81122130 	cmpltui	r4,r16,18564
81121a60:	8112213c 	xorhi	r4,r16,18564
81121a64:	8112213c 	xorhi	r4,r16,18564
81121a68:	8112213c 	xorhi	r4,r16,18564
81121a6c:	8112213c 	xorhi	r4,r16,18564
81121a70:	8112213c 	xorhi	r4,r16,18564
81121a74:	8112213c 	xorhi	r4,r16,18564
81121a78:	8112213c 	xorhi	r4,r16,18564
81121a7c:	8112213c 	xorhi	r4,r16,18564
81121a80:	8112213c 	xorhi	r4,r16,18564
81121a84:	811223d0 	cmplti	r4,r16,18575
81121a88:	811223d0 	cmplti	r4,r16,18575
81121a8c:	811223d0 	cmplti	r4,r16,18575
81121a90:	811223d0 	cmplti	r4,r16,18575
81121a94:	811223d0 	cmplti	r4,r16,18575
81121a98:	811223d0 	cmplti	r4,r16,18575
81121a9c:	811223d0 	cmplti	r4,r16,18575
81121aa0:	811223d0 	cmplti	r4,r16,18575
81121aa4:	811223d0 	cmplti	r4,r16,18575
81121aa8:	811223d0 	cmplti	r4,r16,18575
81121aac:	81122168 	cmpgeui	r4,r16,18565
81121ab0:	811223d0 	cmplti	r4,r16,18575
81121ab4:	811223d0 	cmplti	r4,r16,18575
81121ab8:	811223d0 	cmplti	r4,r16,18575
81121abc:	811223d0 	cmplti	r4,r16,18575
81121ac0:	811223d0 	cmplti	r4,r16,18575
81121ac4:	811223d0 	cmplti	r4,r16,18575
81121ac8:	811223d0 	cmplti	r4,r16,18575
81121acc:	811223d0 	cmplti	r4,r16,18575
81121ad0:	811223d0 	cmplti	r4,r16,18575
81121ad4:	811223d0 	cmplti	r4,r16,18575
81121ad8:	811221a0 	cmpeqi	r4,r16,18566
81121adc:	811223d0 	cmplti	r4,r16,18575
81121ae0:	811223d0 	cmplti	r4,r16,18575
81121ae4:	811223d0 	cmplti	r4,r16,18575
81121ae8:	811223d0 	cmplti	r4,r16,18575
81121aec:	811223d0 	cmplti	r4,r16,18575
81121af0:	811221f8 	rdprs	r4,r16,18567
81121af4:	811223d0 	cmplti	r4,r16,18575
81121af8:	811223d0 	cmplti	r4,r16,18575
81121afc:	81122268 	cmpgeui	r4,r16,18569
81121b00:	811223d0 	cmplti	r4,r16,18575
81121b04:	811223d0 	cmplti	r4,r16,18575
81121b08:	811223d0 	cmplti	r4,r16,18575
81121b0c:	811223d0 	cmplti	r4,r16,18575
81121b10:	811223d0 	cmplti	r4,r16,18575
81121b14:	811223d0 	cmplti	r4,r16,18575
81121b18:	811223d0 	cmplti	r4,r16,18575
81121b1c:	811223d0 	cmplti	r4,r16,18575
81121b20:	811223d0 	cmplti	r4,r16,18575
81121b24:	811223d0 	cmplti	r4,r16,18575
81121b28:	81122014 	ori	r4,r16,18560
81121b2c:	81122040 	call	88112204 <__reset+0x20f2204>
81121b30:	811223d0 	cmplti	r4,r16,18575
81121b34:	811223d0 	cmplti	r4,r16,18575
81121b38:	811223d0 	cmplti	r4,r16,18575
81121b3c:	81122378 	rdprs	r4,r16,18573
81121b40:	81122040 	call	88112204 <__reset+0x20f2204>
81121b44:	811223d0 	cmplti	r4,r16,18575
81121b48:	811223d0 	cmplti	r4,r16,18575
81121b4c:	81121ed4 	ori	r4,r16,18555
81121b50:	811223d0 	cmplti	r4,r16,18575
81121b54:	81121ee4 	muli	r4,r16,18555
81121b58:	81121f20 	cmpeqi	r4,r16,18556
81121b5c:	81121c1c 	xori	r4,r16,18544
81121b60:	81121ec8 	cmpgei	r4,r16,18555
81121b64:	811223d0 	cmplti	r4,r16,18575
81121b68:	811222a4 	muli	r4,r16,18570
81121b6c:	811223d0 	cmplti	r4,r16,18575
81121b70:	811222fc 	xorhi	r4,r16,18571
81121b74:	811223d0 	cmplti	r4,r16,18575
81121b78:	811223d0 	cmplti	r4,r16,18575
81121b7c:	81121fc0 	call	881121fc <__reset+0x20f21fc>
81121b80:	42000204 	addi	r8,r8,8
81121b84:	da802317 	ldw	r10,140(sp)
81121b88:	5455883a 	add	r10,r10,r17
81121b8c:	da802315 	stw	r10,140(sp)
81121b90:	003f8b06 	br	811219c0 <__reset+0xfb1019c0>
81121b94:	d9002017 	ldw	r4,128(sp)
81121b98:	a00b883a 	mov	r5,r20
81121b9c:	11193b80 	call	811193b8 <__swsetup_r>
81121ba0:	1003b11e 	bne	r2,zero,81122a68 <___vfiprintf_internal_r+0x11f4>
81121ba4:	a080030b 	ldhu	r2,12(r20)
81121ba8:	00c00284 	movi	r3,10
81121bac:	1080068c 	andi	r2,r2,26
81121bb0:	10ff541e 	bne	r2,r3,81121904 <__reset+0xfb101904>
81121bb4:	a080038f 	ldh	r2,14(r20)
81121bb8:	103f5216 	blt	r2,zero,81121904 <__reset+0xfb101904>
81121bbc:	d9c02217 	ldw	r7,136(sp)
81121bc0:	d9002017 	ldw	r4,128(sp)
81121bc4:	e00d883a 	mov	r6,fp
81121bc8:	a00b883a 	mov	r5,r20
81121bcc:	1122cf40 	call	81122cf4 <__sbprintf>
81121bd0:	dfc03617 	ldw	ra,216(sp)
81121bd4:	df003517 	ldw	fp,212(sp)
81121bd8:	ddc03417 	ldw	r23,208(sp)
81121bdc:	dd803317 	ldw	r22,204(sp)
81121be0:	dd403217 	ldw	r21,200(sp)
81121be4:	dd003117 	ldw	r20,196(sp)
81121be8:	dcc03017 	ldw	r19,192(sp)
81121bec:	dc802f17 	ldw	r18,188(sp)
81121bf0:	dc402e17 	ldw	r17,184(sp)
81121bf4:	dc002d17 	ldw	r16,180(sp)
81121bf8:	dec03704 	addi	sp,sp,220
81121bfc:	f800283a 	ret
81121c00:	111b4280 	call	8111b428 <__sinit>
81121c04:	003f2f06 	br	811218c4 <__reset+0xfb1018c4>
81121c08:	0463c83a 	sub	r17,zero,r17
81121c0c:	d8802215 	stw	r2,136(sp)
81121c10:	a5000114 	ori	r20,r20,4
81121c14:	80c00007 	ldb	r3,0(r16)
81121c18:	003f7706 	br	811219f8 <__reset+0xfb1019f8>
81121c1c:	00800c04 	movi	r2,48
81121c20:	da802217 	ldw	r10,136(sp)
81121c24:	d8801d05 	stb	r2,116(sp)
81121c28:	00801e04 	movi	r2,120
81121c2c:	d8801d45 	stb	r2,117(sp)
81121c30:	d8001d85 	stb	zero,118(sp)
81121c34:	50c00104 	addi	r3,r10,4
81121c38:	54800017 	ldw	r18,0(r10)
81121c3c:	0027883a 	mov	r19,zero
81121c40:	a0800094 	ori	r2,r20,2
81121c44:	48030b16 	blt	r9,zero,81122874 <___vfiprintf_internal_r+0x1000>
81121c48:	00bfdfc4 	movi	r2,-129
81121c4c:	a096703a 	and	r11,r20,r2
81121c50:	d8c02215 	stw	r3,136(sp)
81121c54:	5d000094 	ori	r20,r11,2
81121c58:	90032b1e 	bne	r18,zero,81122908 <___vfiprintf_internal_r+0x1094>
81121c5c:	00a04534 	movhi	r2,33044
81121c60:	10b91404 	addi	r2,r2,-7088
81121c64:	d8802615 	stw	r2,152(sp)
81121c68:	0039883a 	mov	fp,zero
81121c6c:	48017b1e 	bne	r9,zero,8112225c <___vfiprintf_internal_r+0x9e8>
81121c70:	0013883a 	mov	r9,zero
81121c74:	0027883a 	mov	r19,zero
81121c78:	dd401a04 	addi	r21,sp,104
81121c7c:	4825883a 	mov	r18,r9
81121c80:	4cc0010e 	bge	r9,r19,81121c88 <___vfiprintf_internal_r+0x414>
81121c84:	9825883a 	mov	r18,r19
81121c88:	e7003fcc 	andi	fp,fp,255
81121c8c:	e700201c 	xori	fp,fp,128
81121c90:	e73fe004 	addi	fp,fp,-128
81121c94:	e0000126 	beq	fp,zero,81121c9c <___vfiprintf_internal_r+0x428>
81121c98:	94800044 	addi	r18,r18,1
81121c9c:	a380008c 	andi	r14,r20,2
81121ca0:	70000126 	beq	r14,zero,81121ca8 <___vfiprintf_internal_r+0x434>
81121ca4:	94800084 	addi	r18,r18,2
81121ca8:	a700210c 	andi	fp,r20,132
81121cac:	e001df1e 	bne	fp,zero,8112242c <___vfiprintf_internal_r+0xbb8>
81121cb0:	8c87c83a 	sub	r3,r17,r18
81121cb4:	00c1dd0e 	bge	zero,r3,8112242c <___vfiprintf_internal_r+0xbb8>
81121cb8:	01c00404 	movi	r7,16
81121cbc:	d8801c17 	ldw	r2,112(sp)
81121cc0:	38c3ad0e 	bge	r7,r3,81122b78 <___vfiprintf_internal_r+0x1304>
81121cc4:	02a04534 	movhi	r10,33044
81121cc8:	52b9aa04 	addi	r10,r10,-6488
81121ccc:	dc002915 	stw	r16,164(sp)
81121cd0:	d9801b17 	ldw	r6,108(sp)
81121cd4:	da802415 	stw	r10,144(sp)
81121cd8:	03c001c4 	movi	r15,7
81121cdc:	da402515 	stw	r9,148(sp)
81121ce0:	db802815 	stw	r14,160(sp)
81121ce4:	1821883a 	mov	r16,r3
81121ce8:	00000506 	br	81121d00 <___vfiprintf_internal_r+0x48c>
81121cec:	31400084 	addi	r5,r6,2
81121cf0:	42000204 	addi	r8,r8,8
81121cf4:	200d883a 	mov	r6,r4
81121cf8:	843ffc04 	addi	r16,r16,-16
81121cfc:	3c000d0e 	bge	r7,r16,81121d34 <___vfiprintf_internal_r+0x4c0>
81121d00:	10800404 	addi	r2,r2,16
81121d04:	31000044 	addi	r4,r6,1
81121d08:	45800015 	stw	r22,0(r8)
81121d0c:	41c00115 	stw	r7,4(r8)
81121d10:	d8801c15 	stw	r2,112(sp)
81121d14:	d9001b15 	stw	r4,108(sp)
81121d18:	793ff40e 	bge	r15,r4,81121cec <__reset+0xfb101cec>
81121d1c:	1001b51e 	bne	r2,zero,811223f4 <___vfiprintf_internal_r+0xb80>
81121d20:	843ffc04 	addi	r16,r16,-16
81121d24:	000d883a 	mov	r6,zero
81121d28:	01400044 	movi	r5,1
81121d2c:	d811883a 	mov	r8,sp
81121d30:	3c3ff316 	blt	r7,r16,81121d00 <__reset+0xfb101d00>
81121d34:	8007883a 	mov	r3,r16
81121d38:	da402517 	ldw	r9,148(sp)
81121d3c:	db802817 	ldw	r14,160(sp)
81121d40:	dc002917 	ldw	r16,164(sp)
81121d44:	da802417 	ldw	r10,144(sp)
81121d48:	1885883a 	add	r2,r3,r2
81121d4c:	40c00115 	stw	r3,4(r8)
81121d50:	42800015 	stw	r10,0(r8)
81121d54:	d8801c15 	stw	r2,112(sp)
81121d58:	d9401b15 	stw	r5,108(sp)
81121d5c:	00c001c4 	movi	r3,7
81121d60:	19426016 	blt	r3,r5,811226e4 <___vfiprintf_internal_r+0xe70>
81121d64:	d8c01d87 	ldb	r3,118(sp)
81121d68:	42000204 	addi	r8,r8,8
81121d6c:	29000044 	addi	r4,r5,1
81121d70:	1801b31e 	bne	r3,zero,81122440 <___vfiprintf_internal_r+0xbcc>
81121d74:	7001c026 	beq	r14,zero,81122478 <___vfiprintf_internal_r+0xc04>
81121d78:	d8c01d04 	addi	r3,sp,116
81121d7c:	10800084 	addi	r2,r2,2
81121d80:	40c00015 	stw	r3,0(r8)
81121d84:	00c00084 	movi	r3,2
81121d88:	40c00115 	stw	r3,4(r8)
81121d8c:	d8801c15 	stw	r2,112(sp)
81121d90:	d9001b15 	stw	r4,108(sp)
81121d94:	00c001c4 	movi	r3,7
81121d98:	1902650e 	bge	r3,r4,81122730 <___vfiprintf_internal_r+0xebc>
81121d9c:	10029a1e 	bne	r2,zero,81122808 <___vfiprintf_internal_r+0xf94>
81121da0:	00c02004 	movi	r3,128
81121da4:	01000044 	movi	r4,1
81121da8:	000b883a 	mov	r5,zero
81121dac:	d811883a 	mov	r8,sp
81121db0:	e0c1b31e 	bne	fp,r3,81122480 <___vfiprintf_internal_r+0xc0c>
81121db4:	8cb9c83a 	sub	fp,r17,r18
81121db8:	0701b10e 	bge	zero,fp,81122480 <___vfiprintf_internal_r+0xc0c>
81121dbc:	01c00404 	movi	r7,16
81121dc0:	3f03890e 	bge	r7,fp,81122be8 <___vfiprintf_internal_r+0x1374>
81121dc4:	00e04534 	movhi	r3,33044
81121dc8:	18f9a604 	addi	r3,r3,-6504
81121dcc:	d8c02415 	stw	r3,144(sp)
81121dd0:	8007883a 	mov	r3,r16
81121dd4:	034001c4 	movi	r13,7
81121dd8:	e021883a 	mov	r16,fp
81121ddc:	da402515 	stw	r9,148(sp)
81121de0:	1839883a 	mov	fp,r3
81121de4:	00000506 	br	81121dfc <___vfiprintf_internal_r+0x588>
81121de8:	29800084 	addi	r6,r5,2
81121dec:	42000204 	addi	r8,r8,8
81121df0:	180b883a 	mov	r5,r3
81121df4:	843ffc04 	addi	r16,r16,-16
81121df8:	3c000d0e 	bge	r7,r16,81121e30 <___vfiprintf_internal_r+0x5bc>
81121dfc:	10800404 	addi	r2,r2,16
81121e00:	28c00044 	addi	r3,r5,1
81121e04:	45c00015 	stw	r23,0(r8)
81121e08:	41c00115 	stw	r7,4(r8)
81121e0c:	d8801c15 	stw	r2,112(sp)
81121e10:	d8c01b15 	stw	r3,108(sp)
81121e14:	68fff40e 	bge	r13,r3,81121de8 <__reset+0xfb101de8>
81121e18:	1002241e 	bne	r2,zero,811226ac <___vfiprintf_internal_r+0xe38>
81121e1c:	843ffc04 	addi	r16,r16,-16
81121e20:	01800044 	movi	r6,1
81121e24:	000b883a 	mov	r5,zero
81121e28:	d811883a 	mov	r8,sp
81121e2c:	3c3ff316 	blt	r7,r16,81121dfc <__reset+0xfb101dfc>
81121e30:	da402517 	ldw	r9,148(sp)
81121e34:	e007883a 	mov	r3,fp
81121e38:	8039883a 	mov	fp,r16
81121e3c:	1821883a 	mov	r16,r3
81121e40:	d8c02417 	ldw	r3,144(sp)
81121e44:	1705883a 	add	r2,r2,fp
81121e48:	47000115 	stw	fp,4(r8)
81121e4c:	40c00015 	stw	r3,0(r8)
81121e50:	d8801c15 	stw	r2,112(sp)
81121e54:	d9801b15 	stw	r6,108(sp)
81121e58:	00c001c4 	movi	r3,7
81121e5c:	19827616 	blt	r3,r6,81122838 <___vfiprintf_internal_r+0xfc4>
81121e60:	4cf9c83a 	sub	fp,r9,r19
81121e64:	42000204 	addi	r8,r8,8
81121e68:	31000044 	addi	r4,r6,1
81121e6c:	300b883a 	mov	r5,r6
81121e70:	07018516 	blt	zero,fp,81122488 <___vfiprintf_internal_r+0xc14>
81121e74:	9885883a 	add	r2,r19,r2
81121e78:	45400015 	stw	r21,0(r8)
81121e7c:	44c00115 	stw	r19,4(r8)
81121e80:	d8801c15 	stw	r2,112(sp)
81121e84:	d9001b15 	stw	r4,108(sp)
81121e88:	00c001c4 	movi	r3,7
81121e8c:	1901dd0e 	bge	r3,r4,81122604 <___vfiprintf_internal_r+0xd90>
81121e90:	1002401e 	bne	r2,zero,81122794 <___vfiprintf_internal_r+0xf20>
81121e94:	d8001b15 	stw	zero,108(sp)
81121e98:	a2c0010c 	andi	r11,r20,4
81121e9c:	58000226 	beq	r11,zero,81121ea8 <___vfiprintf_internal_r+0x634>
81121ea0:	8ca7c83a 	sub	r19,r17,r18
81121ea4:	04c2f216 	blt	zero,r19,81122a70 <___vfiprintf_internal_r+0x11fc>
81121ea8:	8c80010e 	bge	r17,r18,81121eb0 <___vfiprintf_internal_r+0x63c>
81121eac:	9023883a 	mov	r17,r18
81121eb0:	da802317 	ldw	r10,140(sp)
81121eb4:	5455883a 	add	r10,r10,r17
81121eb8:	da802315 	stw	r10,140(sp)
81121ebc:	d8001b15 	stw	zero,108(sp)
81121ec0:	d811883a 	mov	r8,sp
81121ec4:	003ea206 	br	81121950 <__reset+0xfb101950>
81121ec8:	a5000814 	ori	r20,r20,32
81121ecc:	80c00007 	ldb	r3,0(r16)
81121ed0:	003ec906 	br	811219f8 <__reset+0xfb1019f8>
81121ed4:	80c00007 	ldb	r3,0(r16)
81121ed8:	1b030926 	beq	r3,r12,81122b00 <___vfiprintf_internal_r+0x128c>
81121edc:	a5000414 	ori	r20,r20,16
81121ee0:	003ec506 	br	811219f8 <__reset+0xfb1019f8>
81121ee4:	21003fcc 	andi	r4,r4,255
81121ee8:	20035e1e 	bne	r4,zero,81122c64 <___vfiprintf_internal_r+0x13f0>
81121eec:	a080080c 	andi	r2,r20,32
81121ef0:	1002a526 	beq	r2,zero,81122988 <___vfiprintf_internal_r+0x1114>
81121ef4:	da802217 	ldw	r10,136(sp)
81121ef8:	50800017 	ldw	r2,0(r10)
81121efc:	da802317 	ldw	r10,140(sp)
81121f00:	5007d7fa 	srai	r3,r10,31
81121f04:	da802217 	ldw	r10,136(sp)
81121f08:	10c00115 	stw	r3,4(r2)
81121f0c:	52800104 	addi	r10,r10,4
81121f10:	da802215 	stw	r10,136(sp)
81121f14:	da802317 	ldw	r10,140(sp)
81121f18:	12800015 	stw	r10,0(r2)
81121f1c:	003e8c06 	br	81121950 <__reset+0xfb101950>
81121f20:	21003fcc 	andi	r4,r4,255
81121f24:	2003511e 	bne	r4,zero,81122c6c <___vfiprintf_internal_r+0x13f8>
81121f28:	a080080c 	andi	r2,r20,32
81121f2c:	1000a126 	beq	r2,zero,811221b4 <___vfiprintf_internal_r+0x940>
81121f30:	da802217 	ldw	r10,136(sp)
81121f34:	d8001d85 	stb	zero,118(sp)
81121f38:	50800204 	addi	r2,r10,8
81121f3c:	54800017 	ldw	r18,0(r10)
81121f40:	54c00117 	ldw	r19,4(r10)
81121f44:	4802b416 	blt	r9,zero,81122a18 <___vfiprintf_internal_r+0x11a4>
81121f48:	013fdfc4 	movi	r4,-129
81121f4c:	94c6b03a 	or	r3,r18,r19
81121f50:	d8802215 	stw	r2,136(sp)
81121f54:	a128703a 	and	r20,r20,r4
81121f58:	1800a226 	beq	r3,zero,811221e4 <___vfiprintf_internal_r+0x970>
81121f5c:	0039883a 	mov	fp,zero
81121f60:	dd401a04 	addi	r21,sp,104
81121f64:	9006d0fa 	srli	r3,r18,3
81121f68:	9808977a 	slli	r4,r19,29
81121f6c:	9826d0fa 	srli	r19,r19,3
81121f70:	948001cc 	andi	r18,r18,7
81121f74:	90800c04 	addi	r2,r18,48
81121f78:	ad7fffc4 	addi	r21,r21,-1
81121f7c:	20e4b03a 	or	r18,r4,r3
81121f80:	a8800005 	stb	r2,0(r21)
81121f84:	94c6b03a 	or	r3,r18,r19
81121f88:	183ff61e 	bne	r3,zero,81121f64 <__reset+0xfb101f64>
81121f8c:	a0c0004c 	andi	r3,r20,1
81121f90:	18005926 	beq	r3,zero,811220f8 <___vfiprintf_internal_r+0x884>
81121f94:	10803fcc 	andi	r2,r2,255
81121f98:	1080201c 	xori	r2,r2,128
81121f9c:	10bfe004 	addi	r2,r2,-128
81121fa0:	00c00c04 	movi	r3,48
81121fa4:	10c05426 	beq	r2,r3,811220f8 <___vfiprintf_internal_r+0x884>
81121fa8:	da801e17 	ldw	r10,120(sp)
81121fac:	a8bfffc4 	addi	r2,r21,-1
81121fb0:	a8ffffc5 	stb	r3,-1(r21)
81121fb4:	50a7c83a 	sub	r19,r10,r2
81121fb8:	102b883a 	mov	r21,r2
81121fbc:	003f2f06 	br	81121c7c <__reset+0xfb101c7c>
81121fc0:	21003fcc 	andi	r4,r4,255
81121fc4:	2003421e 	bne	r4,zero,81122cd0 <___vfiprintf_internal_r+0x145c>
81121fc8:	00a04534 	movhi	r2,33044
81121fcc:	10b91404 	addi	r2,r2,-7088
81121fd0:	d8802615 	stw	r2,152(sp)
81121fd4:	a080080c 	andi	r2,r20,32
81121fd8:	1000aa26 	beq	r2,zero,81122284 <___vfiprintf_internal_r+0xa10>
81121fdc:	da802217 	ldw	r10,136(sp)
81121fe0:	54800017 	ldw	r18,0(r10)
81121fe4:	54c00117 	ldw	r19,4(r10)
81121fe8:	52800204 	addi	r10,r10,8
81121fec:	da802215 	stw	r10,136(sp)
81121ff0:	a080004c 	andi	r2,r20,1
81121ff4:	1001d226 	beq	r2,zero,81122740 <___vfiprintf_internal_r+0xecc>
81121ff8:	94c4b03a 	or	r2,r18,r19
81121ffc:	1002351e 	bne	r2,zero,811228d4 <___vfiprintf_internal_r+0x1060>
81122000:	d8001d85 	stb	zero,118(sp)
81122004:	48022216 	blt	r9,zero,81122890 <___vfiprintf_internal_r+0x101c>
81122008:	00bfdfc4 	movi	r2,-129
8112200c:	a0a8703a 	and	r20,r20,r2
81122010:	003f1506 	br	81121c68 <__reset+0xfb101c68>
81122014:	da802217 	ldw	r10,136(sp)
81122018:	04800044 	movi	r18,1
8112201c:	d8001d85 	stb	zero,118(sp)
81122020:	50800017 	ldw	r2,0(r10)
81122024:	52800104 	addi	r10,r10,4
81122028:	da802215 	stw	r10,136(sp)
8112202c:	d8801005 	stb	r2,64(sp)
81122030:	9027883a 	mov	r19,r18
81122034:	dd401004 	addi	r21,sp,64
81122038:	0013883a 	mov	r9,zero
8112203c:	003f1706 	br	81121c9c <__reset+0xfb101c9c>
81122040:	21003fcc 	andi	r4,r4,255
81122044:	2003201e 	bne	r4,zero,81122cc8 <___vfiprintf_internal_r+0x1454>
81122048:	a080080c 	andi	r2,r20,32
8112204c:	10004b26 	beq	r2,zero,8112217c <___vfiprintf_internal_r+0x908>
81122050:	da802217 	ldw	r10,136(sp)
81122054:	50800117 	ldw	r2,4(r10)
81122058:	54800017 	ldw	r18,0(r10)
8112205c:	52800204 	addi	r10,r10,8
81122060:	da802215 	stw	r10,136(sp)
81122064:	1027883a 	mov	r19,r2
81122068:	10022c16 	blt	r2,zero,8112291c <___vfiprintf_internal_r+0x10a8>
8112206c:	df001d83 	ldbu	fp,118(sp)
81122070:	48007216 	blt	r9,zero,8112223c <___vfiprintf_internal_r+0x9c8>
81122074:	00ffdfc4 	movi	r3,-129
81122078:	94c4b03a 	or	r2,r18,r19
8112207c:	a0e8703a 	and	r20,r20,r3
81122080:	1000cc26 	beq	r2,zero,811223b4 <___vfiprintf_internal_r+0xb40>
81122084:	98021026 	beq	r19,zero,811228c8 <___vfiprintf_internal_r+0x1054>
81122088:	dc402415 	stw	r17,144(sp)
8112208c:	dc002515 	stw	r16,148(sp)
81122090:	9823883a 	mov	r17,r19
81122094:	9021883a 	mov	r16,r18
81122098:	dd401a04 	addi	r21,sp,104
8112209c:	4825883a 	mov	r18,r9
811220a0:	4027883a 	mov	r19,r8
811220a4:	8009883a 	mov	r4,r16
811220a8:	880b883a 	mov	r5,r17
811220ac:	01800284 	movi	r6,10
811220b0:	000f883a 	mov	r7,zero
811220b4:	11247700 	call	81124770 <__umoddi3>
811220b8:	10800c04 	addi	r2,r2,48
811220bc:	ad7fffc4 	addi	r21,r21,-1
811220c0:	8009883a 	mov	r4,r16
811220c4:	880b883a 	mov	r5,r17
811220c8:	a8800005 	stb	r2,0(r21)
811220cc:	01800284 	movi	r6,10
811220d0:	000f883a 	mov	r7,zero
811220d4:	11241f00 	call	811241f0 <__udivdi3>
811220d8:	1021883a 	mov	r16,r2
811220dc:	10c4b03a 	or	r2,r2,r3
811220e0:	1823883a 	mov	r17,r3
811220e4:	103fef1e 	bne	r2,zero,811220a4 <__reset+0xfb1020a4>
811220e8:	dc402417 	ldw	r17,144(sp)
811220ec:	dc002517 	ldw	r16,148(sp)
811220f0:	9013883a 	mov	r9,r18
811220f4:	9811883a 	mov	r8,r19
811220f8:	da801e17 	ldw	r10,120(sp)
811220fc:	5567c83a 	sub	r19,r10,r21
81122100:	003ede06 	br	81121c7c <__reset+0xfb101c7c>
81122104:	38803fcc 	andi	r2,r7,255
81122108:	1080201c 	xori	r2,r2,128
8112210c:	10bfe004 	addi	r2,r2,-128
81122110:	1002371e 	bne	r2,zero,811229f0 <___vfiprintf_internal_r+0x117c>
81122114:	01000044 	movi	r4,1
81122118:	01c00804 	movi	r7,32
8112211c:	80c00007 	ldb	r3,0(r16)
81122120:	003e3506 	br	811219f8 <__reset+0xfb1019f8>
81122124:	a5000054 	ori	r20,r20,1
81122128:	80c00007 	ldb	r3,0(r16)
8112212c:	003e3206 	br	811219f8 <__reset+0xfb1019f8>
81122130:	a5002014 	ori	r20,r20,128
81122134:	80c00007 	ldb	r3,0(r16)
81122138:	003e2f06 	br	811219f8 <__reset+0xfb1019f8>
8112213c:	8015883a 	mov	r10,r16
81122140:	0023883a 	mov	r17,zero
81122144:	18bff404 	addi	r2,r3,-48
81122148:	50c00007 	ldb	r3,0(r10)
8112214c:	8c4002a4 	muli	r17,r17,10
81122150:	84000044 	addi	r16,r16,1
81122154:	8015883a 	mov	r10,r16
81122158:	1463883a 	add	r17,r2,r17
8112215c:	18bff404 	addi	r2,r3,-48
81122160:	30bff92e 	bgeu	r6,r2,81122148 <__reset+0xfb102148>
81122164:	003e2506 	br	811219fc <__reset+0xfb1019fc>
81122168:	21003fcc 	andi	r4,r4,255
8112216c:	2002d41e 	bne	r4,zero,81122cc0 <___vfiprintf_internal_r+0x144c>
81122170:	a5000414 	ori	r20,r20,16
81122174:	a080080c 	andi	r2,r20,32
81122178:	103fb51e 	bne	r2,zero,81122050 <__reset+0xfb102050>
8112217c:	a080040c 	andi	r2,r20,16
81122180:	1001f826 	beq	r2,zero,81122964 <___vfiprintf_internal_r+0x10f0>
81122184:	da802217 	ldw	r10,136(sp)
81122188:	54800017 	ldw	r18,0(r10)
8112218c:	52800104 	addi	r10,r10,4
81122190:	da802215 	stw	r10,136(sp)
81122194:	9027d7fa 	srai	r19,r18,31
81122198:	9805883a 	mov	r2,r19
8112219c:	003fb206 	br	81122068 <__reset+0xfb102068>
811221a0:	21003fcc 	andi	r4,r4,255
811221a4:	2002c41e 	bne	r4,zero,81122cb8 <___vfiprintf_internal_r+0x1444>
811221a8:	a5000414 	ori	r20,r20,16
811221ac:	a080080c 	andi	r2,r20,32
811221b0:	103f5f1e 	bne	r2,zero,81121f30 <__reset+0xfb101f30>
811221b4:	a080040c 	andi	r2,r20,16
811221b8:	10020f26 	beq	r2,zero,811229f8 <___vfiprintf_internal_r+0x1184>
811221bc:	da802217 	ldw	r10,136(sp)
811221c0:	d8001d85 	stb	zero,118(sp)
811221c4:	0027883a 	mov	r19,zero
811221c8:	50800104 	addi	r2,r10,4
811221cc:	54800017 	ldw	r18,0(r10)
811221d0:	48021116 	blt	r9,zero,81122a18 <___vfiprintf_internal_r+0x11a4>
811221d4:	00ffdfc4 	movi	r3,-129
811221d8:	d8802215 	stw	r2,136(sp)
811221dc:	a0e8703a 	and	r20,r20,r3
811221e0:	903f5e1e 	bne	r18,zero,81121f5c <__reset+0xfb101f5c>
811221e4:	0039883a 	mov	fp,zero
811221e8:	4802a626 	beq	r9,zero,81122c84 <___vfiprintf_internal_r+0x1410>
811221ec:	0025883a 	mov	r18,zero
811221f0:	0027883a 	mov	r19,zero
811221f4:	003f5a06 	br	81121f60 <__reset+0xfb101f60>
811221f8:	21003fcc 	andi	r4,r4,255
811221fc:	20029f1e 	bne	r4,zero,81122c7c <___vfiprintf_internal_r+0x1408>
81122200:	a5000414 	ori	r20,r20,16
81122204:	a080080c 	andi	r2,r20,32
81122208:	10005e1e 	bne	r2,zero,81122384 <___vfiprintf_internal_r+0xb10>
8112220c:	a080040c 	andi	r2,r20,16
81122210:	1001a21e 	bne	r2,zero,8112289c <___vfiprintf_internal_r+0x1028>
81122214:	a080100c 	andi	r2,r20,64
81122218:	d8001d85 	stb	zero,118(sp)
8112221c:	da802217 	ldw	r10,136(sp)
81122220:	1002231e 	bne	r2,zero,81122ab0 <___vfiprintf_internal_r+0x123c>
81122224:	50800104 	addi	r2,r10,4
81122228:	54800017 	ldw	r18,0(r10)
8112222c:	0027883a 	mov	r19,zero
81122230:	4801a00e 	bge	r9,zero,811228b4 <___vfiprintf_internal_r+0x1040>
81122234:	d8802215 	stw	r2,136(sp)
81122238:	0039883a 	mov	fp,zero
8112223c:	94c4b03a 	or	r2,r18,r19
81122240:	103f901e 	bne	r2,zero,81122084 <__reset+0xfb102084>
81122244:	00800044 	movi	r2,1
81122248:	10803fcc 	andi	r2,r2,255
8112224c:	00c00044 	movi	r3,1
81122250:	10c05926 	beq	r2,r3,811223b8 <___vfiprintf_internal_r+0xb44>
81122254:	00c00084 	movi	r3,2
81122258:	10ffe41e 	bne	r2,r3,811221ec <__reset+0xfb1021ec>
8112225c:	0025883a 	mov	r18,zero
81122260:	0027883a 	mov	r19,zero
81122264:	00013d06 	br	8112275c <___vfiprintf_internal_r+0xee8>
81122268:	21003fcc 	andi	r4,r4,255
8112226c:	2002811e 	bne	r4,zero,81122c74 <___vfiprintf_internal_r+0x1400>
81122270:	00a04534 	movhi	r2,33044
81122274:	10b90f04 	addi	r2,r2,-7108
81122278:	d8802615 	stw	r2,152(sp)
8112227c:	a080080c 	andi	r2,r20,32
81122280:	103f561e 	bne	r2,zero,81121fdc <__reset+0xfb101fdc>
81122284:	a080040c 	andi	r2,r20,16
81122288:	1001d126 	beq	r2,zero,811229d0 <___vfiprintf_internal_r+0x115c>
8112228c:	da802217 	ldw	r10,136(sp)
81122290:	0027883a 	mov	r19,zero
81122294:	54800017 	ldw	r18,0(r10)
81122298:	52800104 	addi	r10,r10,4
8112229c:	da802215 	stw	r10,136(sp)
811222a0:	003f5306 	br	81121ff0 <__reset+0xfb101ff0>
811222a4:	da802217 	ldw	r10,136(sp)
811222a8:	d8001d85 	stb	zero,118(sp)
811222ac:	55400017 	ldw	r21,0(r10)
811222b0:	50c00104 	addi	r3,r10,4
811222b4:	a8024226 	beq	r21,zero,81122bc0 <___vfiprintf_internal_r+0x134c>
811222b8:	48021816 	blt	r9,zero,81122b1c <___vfiprintf_internal_r+0x12a8>
811222bc:	480d883a 	mov	r6,r9
811222c0:	000b883a 	mov	r5,zero
811222c4:	a809883a 	mov	r4,r21
811222c8:	d8c02a15 	stw	r3,168(sp)
811222cc:	da002b15 	stw	r8,172(sp)
811222d0:	da402c15 	stw	r9,176(sp)
811222d4:	111c6500 	call	8111c650 <memchr>
811222d8:	d8c02a17 	ldw	r3,168(sp)
811222dc:	da002b17 	ldw	r8,172(sp)
811222e0:	da402c17 	ldw	r9,176(sp)
811222e4:	10024826 	beq	r2,zero,81122c08 <___vfiprintf_internal_r+0x1394>
811222e8:	1567c83a 	sub	r19,r2,r21
811222ec:	df001d83 	ldbu	fp,118(sp)
811222f0:	d8c02215 	stw	r3,136(sp)
811222f4:	0013883a 	mov	r9,zero
811222f8:	003e6006 	br	81121c7c <__reset+0xfb101c7c>
811222fc:	21003fcc 	andi	r4,r4,255
81122300:	203fc026 	beq	r4,zero,81122204 <__reset+0xfb102204>
81122304:	d9c01d85 	stb	r7,118(sp)
81122308:	003fbe06 	br	81122204 <__reset+0xfb102204>
8112230c:	da802217 	ldw	r10,136(sp)
81122310:	54400017 	ldw	r17,0(r10)
81122314:	50800104 	addi	r2,r10,4
81122318:	883e3b16 	blt	r17,zero,81121c08 <__reset+0xfb101c08>
8112231c:	d8802215 	stw	r2,136(sp)
81122320:	80c00007 	ldb	r3,0(r16)
81122324:	003db406 	br	811219f8 <__reset+0xfb1019f8>
81122328:	01000044 	movi	r4,1
8112232c:	01c00ac4 	movi	r7,43
81122330:	80c00007 	ldb	r3,0(r16)
81122334:	003db006 	br	811219f8 <__reset+0xfb1019f8>
81122338:	80c00007 	ldb	r3,0(r16)
8112233c:	82800044 	addi	r10,r16,1
81122340:	1b423c26 	beq	r3,r13,81122c34 <___vfiprintf_internal_r+0x13c0>
81122344:	18bff404 	addi	r2,r3,-48
81122348:	0013883a 	mov	r9,zero
8112234c:	30822b36 	bltu	r6,r2,81122bfc <___vfiprintf_internal_r+0x1388>
81122350:	50c00007 	ldb	r3,0(r10)
81122354:	4a4002a4 	muli	r9,r9,10
81122358:	54000044 	addi	r16,r10,1
8112235c:	8015883a 	mov	r10,r16
81122360:	4893883a 	add	r9,r9,r2
81122364:	18bff404 	addi	r2,r3,-48
81122368:	30bff92e 	bgeu	r6,r2,81122350 <__reset+0xfb102350>
8112236c:	483da30e 	bge	r9,zero,811219fc <__reset+0xfb1019fc>
81122370:	027fffc4 	movi	r9,-1
81122374:	003da106 	br	811219fc <__reset+0xfb1019fc>
81122378:	a5001014 	ori	r20,r20,64
8112237c:	80c00007 	ldb	r3,0(r16)
81122380:	003d9d06 	br	811219f8 <__reset+0xfb1019f8>
81122384:	da802217 	ldw	r10,136(sp)
81122388:	d8001d85 	stb	zero,118(sp)
8112238c:	50c00204 	addi	r3,r10,8
81122390:	54800017 	ldw	r18,0(r10)
81122394:	54c00117 	ldw	r19,4(r10)
81122398:	4801ca16 	blt	r9,zero,81122ac4 <___vfiprintf_internal_r+0x1250>
8112239c:	013fdfc4 	movi	r4,-129
811223a0:	94c4b03a 	or	r2,r18,r19
811223a4:	d8c02215 	stw	r3,136(sp)
811223a8:	a128703a 	and	r20,r20,r4
811223ac:	0039883a 	mov	fp,zero
811223b0:	103f341e 	bne	r2,zero,81122084 <__reset+0xfb102084>
811223b4:	483e2e26 	beq	r9,zero,81121c70 <__reset+0xfb101c70>
811223b8:	0025883a 	mov	r18,zero
811223bc:	94800c04 	addi	r18,r18,48
811223c0:	dc8019c5 	stb	r18,103(sp)
811223c4:	dcc02717 	ldw	r19,156(sp)
811223c8:	dd4019c4 	addi	r21,sp,103
811223cc:	003e2b06 	br	81121c7c <__reset+0xfb101c7c>
811223d0:	21003fcc 	andi	r4,r4,255
811223d4:	2002361e 	bne	r4,zero,81122cb0 <___vfiprintf_internal_r+0x143c>
811223d8:	1801c126 	beq	r3,zero,81122ae0 <___vfiprintf_internal_r+0x126c>
811223dc:	04800044 	movi	r18,1
811223e0:	d8c01005 	stb	r3,64(sp)
811223e4:	d8001d85 	stb	zero,118(sp)
811223e8:	9027883a 	mov	r19,r18
811223ec:	dd401004 	addi	r21,sp,64
811223f0:	003f1106 	br	81122038 <__reset+0xfb102038>
811223f4:	d9402117 	ldw	r5,132(sp)
811223f8:	d9002017 	ldw	r4,128(sp)
811223fc:	d9801a04 	addi	r6,sp,104
81122400:	d9c02b15 	stw	r7,172(sp)
81122404:	dbc02a15 	stw	r15,168(sp)
81122408:	11217580 	call	81121758 <__sprint_r.part.0>
8112240c:	d9c02b17 	ldw	r7,172(sp)
81122410:	dbc02a17 	ldw	r15,168(sp)
81122414:	10006d1e 	bne	r2,zero,811225cc <___vfiprintf_internal_r+0xd58>
81122418:	d9801b17 	ldw	r6,108(sp)
8112241c:	d8801c17 	ldw	r2,112(sp)
81122420:	d811883a 	mov	r8,sp
81122424:	31400044 	addi	r5,r6,1
81122428:	003e3306 	br	81121cf8 <__reset+0xfb101cf8>
8112242c:	d9401b17 	ldw	r5,108(sp)
81122430:	d8801c17 	ldw	r2,112(sp)
81122434:	29000044 	addi	r4,r5,1
81122438:	d8c01d87 	ldb	r3,118(sp)
8112243c:	183e4d26 	beq	r3,zero,81121d74 <__reset+0xfb101d74>
81122440:	00c00044 	movi	r3,1
81122444:	d9401d84 	addi	r5,sp,118
81122448:	10c5883a 	add	r2,r2,r3
8112244c:	41400015 	stw	r5,0(r8)
81122450:	40c00115 	stw	r3,4(r8)
81122454:	d8801c15 	stw	r2,112(sp)
81122458:	d9001b15 	stw	r4,108(sp)
8112245c:	014001c4 	movi	r5,7
81122460:	2900a90e 	bge	r5,r4,81122708 <___vfiprintf_internal_r+0xe94>
81122464:	1000da1e 	bne	r2,zero,811227d0 <___vfiprintf_internal_r+0xf5c>
81122468:	7000ab1e 	bne	r14,zero,81122718 <___vfiprintf_internal_r+0xea4>
8112246c:	000b883a 	mov	r5,zero
81122470:	1809883a 	mov	r4,r3
81122474:	d811883a 	mov	r8,sp
81122478:	00c02004 	movi	r3,128
8112247c:	e0fe4d26 	beq	fp,r3,81121db4 <__reset+0xfb101db4>
81122480:	4cf9c83a 	sub	fp,r9,r19
81122484:	073e7b0e 	bge	zero,fp,81121e74 <__reset+0xfb101e74>
81122488:	01c00404 	movi	r7,16
8112248c:	3f01900e 	bge	r7,fp,81122ad0 <___vfiprintf_internal_r+0x125c>
81122490:	00e04534 	movhi	r3,33044
81122494:	18f9a604 	addi	r3,r3,-6504
81122498:	d8c02415 	stw	r3,144(sp)
8112249c:	034001c4 	movi	r13,7
811224a0:	00000506 	br	811224b8 <___vfiprintf_internal_r+0xc44>
811224a4:	29000084 	addi	r4,r5,2
811224a8:	42000204 	addi	r8,r8,8
811224ac:	180b883a 	mov	r5,r3
811224b0:	e73ffc04 	addi	fp,fp,-16
811224b4:	3f000d0e 	bge	r7,fp,811224ec <___vfiprintf_internal_r+0xc78>
811224b8:	10800404 	addi	r2,r2,16
811224bc:	28c00044 	addi	r3,r5,1
811224c0:	45c00015 	stw	r23,0(r8)
811224c4:	41c00115 	stw	r7,4(r8)
811224c8:	d8801c15 	stw	r2,112(sp)
811224cc:	d8c01b15 	stw	r3,108(sp)
811224d0:	68fff40e 	bge	r13,r3,811224a4 <__reset+0xfb1024a4>
811224d4:	1000101e 	bne	r2,zero,81122518 <___vfiprintf_internal_r+0xca4>
811224d8:	e73ffc04 	addi	fp,fp,-16
811224dc:	01000044 	movi	r4,1
811224e0:	000b883a 	mov	r5,zero
811224e4:	d811883a 	mov	r8,sp
811224e8:	3f3ff316 	blt	r7,fp,811224b8 <__reset+0xfb1024b8>
811224ec:	da802417 	ldw	r10,144(sp)
811224f0:	1705883a 	add	r2,r2,fp
811224f4:	47000115 	stw	fp,4(r8)
811224f8:	42800015 	stw	r10,0(r8)
811224fc:	d8801c15 	stw	r2,112(sp)
81122500:	d9001b15 	stw	r4,108(sp)
81122504:	00c001c4 	movi	r3,7
81122508:	19003616 	blt	r3,r4,811225e4 <___vfiprintf_internal_r+0xd70>
8112250c:	42000204 	addi	r8,r8,8
81122510:	21000044 	addi	r4,r4,1
81122514:	003e5706 	br	81121e74 <__reset+0xfb101e74>
81122518:	d9402117 	ldw	r5,132(sp)
8112251c:	d9002017 	ldw	r4,128(sp)
81122520:	d9801a04 	addi	r6,sp,104
81122524:	d9c02b15 	stw	r7,172(sp)
81122528:	db402a15 	stw	r13,168(sp)
8112252c:	11217580 	call	81121758 <__sprint_r.part.0>
81122530:	d9c02b17 	ldw	r7,172(sp)
81122534:	db402a17 	ldw	r13,168(sp)
81122538:	1000241e 	bne	r2,zero,811225cc <___vfiprintf_internal_r+0xd58>
8112253c:	d9401b17 	ldw	r5,108(sp)
81122540:	d8801c17 	ldw	r2,112(sp)
81122544:	d811883a 	mov	r8,sp
81122548:	29000044 	addi	r4,r5,1
8112254c:	003fd806 	br	811224b0 <__reset+0xfb1024b0>
81122550:	d9401b17 	ldw	r5,108(sp)
81122554:	00e04534 	movhi	r3,33044
81122558:	18f9aa04 	addi	r3,r3,-6488
8112255c:	d8c02415 	stw	r3,144(sp)
81122560:	29400044 	addi	r5,r5,1
81122564:	d8c02417 	ldw	r3,144(sp)
81122568:	14c5883a 	add	r2,r2,r19
8112256c:	44c00115 	stw	r19,4(r8)
81122570:	40c00015 	stw	r3,0(r8)
81122574:	d8801c15 	stw	r2,112(sp)
81122578:	d9401b15 	stw	r5,108(sp)
8112257c:	00c001c4 	movi	r3,7
81122580:	1940070e 	bge	r3,r5,811225a0 <___vfiprintf_internal_r+0xd2c>
81122584:	103e4826 	beq	r2,zero,81121ea8 <__reset+0xfb101ea8>
81122588:	d9402117 	ldw	r5,132(sp)
8112258c:	d9002017 	ldw	r4,128(sp)
81122590:	d9801a04 	addi	r6,sp,104
81122594:	11217580 	call	81121758 <__sprint_r.part.0>
81122598:	10000c1e 	bne	r2,zero,811225cc <___vfiprintf_internal_r+0xd58>
8112259c:	d8801c17 	ldw	r2,112(sp)
811225a0:	8c80010e 	bge	r17,r18,811225a8 <___vfiprintf_internal_r+0xd34>
811225a4:	9023883a 	mov	r17,r18
811225a8:	da802317 	ldw	r10,140(sp)
811225ac:	5455883a 	add	r10,r10,r17
811225b0:	da802315 	stw	r10,140(sp)
811225b4:	103e4126 	beq	r2,zero,81121ebc <__reset+0xfb101ebc>
811225b8:	d9402117 	ldw	r5,132(sp)
811225bc:	d9002017 	ldw	r4,128(sp)
811225c0:	d9801a04 	addi	r6,sp,104
811225c4:	11217580 	call	81121758 <__sprint_r.part.0>
811225c8:	103e3c26 	beq	r2,zero,81121ebc <__reset+0xfb101ebc>
811225cc:	dd002117 	ldw	r20,132(sp)
811225d0:	a080030b 	ldhu	r2,12(r20)
811225d4:	1080100c 	andi	r2,r2,64
811225d8:	1001231e 	bne	r2,zero,81122a68 <___vfiprintf_internal_r+0x11f4>
811225dc:	d8802317 	ldw	r2,140(sp)
811225e0:	003d7b06 	br	81121bd0 <__reset+0xfb101bd0>
811225e4:	1000991e 	bne	r2,zero,8112284c <___vfiprintf_internal_r+0xfd8>
811225e8:	00c00044 	movi	r3,1
811225ec:	9805883a 	mov	r2,r19
811225f0:	dd400015 	stw	r21,0(sp)
811225f4:	dcc00115 	stw	r19,4(sp)
811225f8:	dcc01c15 	stw	r19,112(sp)
811225fc:	d8c01b15 	stw	r3,108(sp)
81122600:	d811883a 	mov	r8,sp
81122604:	42000204 	addi	r8,r8,8
81122608:	a2c0010c 	andi	r11,r20,4
8112260c:	583fe426 	beq	r11,zero,811225a0 <__reset+0xfb1025a0>
81122610:	8ca7c83a 	sub	r19,r17,r18
81122614:	04ffe20e 	bge	zero,r19,811225a0 <__reset+0xfb1025a0>
81122618:	01c00404 	movi	r7,16
8112261c:	3cffcc0e 	bge	r7,r19,81122550 <__reset+0xfb102550>
81122620:	02a04534 	movhi	r10,33044
81122624:	52b9aa04 	addi	r10,r10,-6488
81122628:	d9001b17 	ldw	r4,108(sp)
8112262c:	da802415 	stw	r10,144(sp)
81122630:	382b883a 	mov	r21,r7
81122634:	050001c4 	movi	r20,7
81122638:	df002017 	ldw	fp,128(sp)
8112263c:	00000506 	br	81122654 <___vfiprintf_internal_r+0xde0>
81122640:	21400084 	addi	r5,r4,2
81122644:	42000204 	addi	r8,r8,8
81122648:	1809883a 	mov	r4,r3
8112264c:	9cfffc04 	addi	r19,r19,-16
81122650:	acffc40e 	bge	r21,r19,81122564 <__reset+0xfb102564>
81122654:	10800404 	addi	r2,r2,16
81122658:	20c00044 	addi	r3,r4,1
8112265c:	45800015 	stw	r22,0(r8)
81122660:	45400115 	stw	r21,4(r8)
81122664:	d8801c15 	stw	r2,112(sp)
81122668:	d8c01b15 	stw	r3,108(sp)
8112266c:	a0fff40e 	bge	r20,r3,81122640 <__reset+0xfb102640>
81122670:	1000041e 	bne	r2,zero,81122684 <___vfiprintf_internal_r+0xe10>
81122674:	01400044 	movi	r5,1
81122678:	0009883a 	mov	r4,zero
8112267c:	d811883a 	mov	r8,sp
81122680:	003ff206 	br	8112264c <__reset+0xfb10264c>
81122684:	d9402117 	ldw	r5,132(sp)
81122688:	d9801a04 	addi	r6,sp,104
8112268c:	e009883a 	mov	r4,fp
81122690:	11217580 	call	81121758 <__sprint_r.part.0>
81122694:	103fcd1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
81122698:	d9001b17 	ldw	r4,108(sp)
8112269c:	d8801c17 	ldw	r2,112(sp)
811226a0:	d811883a 	mov	r8,sp
811226a4:	21400044 	addi	r5,r4,1
811226a8:	003fe806 	br	8112264c <__reset+0xfb10264c>
811226ac:	d9402117 	ldw	r5,132(sp)
811226b0:	d9002017 	ldw	r4,128(sp)
811226b4:	d9801a04 	addi	r6,sp,104
811226b8:	d9c02b15 	stw	r7,172(sp)
811226bc:	db402a15 	stw	r13,168(sp)
811226c0:	11217580 	call	81121758 <__sprint_r.part.0>
811226c4:	d9c02b17 	ldw	r7,172(sp)
811226c8:	db402a17 	ldw	r13,168(sp)
811226cc:	103fbf1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
811226d0:	d9401b17 	ldw	r5,108(sp)
811226d4:	d8801c17 	ldw	r2,112(sp)
811226d8:	d811883a 	mov	r8,sp
811226dc:	29800044 	addi	r6,r5,1
811226e0:	003dc406 	br	81121df4 <__reset+0xfb101df4>
811226e4:	1000d21e 	bne	r2,zero,81122a30 <___vfiprintf_internal_r+0x11bc>
811226e8:	d8c01d87 	ldb	r3,118(sp)
811226ec:	18009526 	beq	r3,zero,81122944 <___vfiprintf_internal_r+0x10d0>
811226f0:	00800044 	movi	r2,1
811226f4:	d8c01d84 	addi	r3,sp,118
811226f8:	1009883a 	mov	r4,r2
811226fc:	d8c00015 	stw	r3,0(sp)
81122700:	d8800115 	stw	r2,4(sp)
81122704:	d811883a 	mov	r8,sp
81122708:	200b883a 	mov	r5,r4
8112270c:	42000204 	addi	r8,r8,8
81122710:	21000044 	addi	r4,r4,1
81122714:	003d9706 	br	81121d74 <__reset+0xfb101d74>
81122718:	d9001d04 	addi	r4,sp,116
8112271c:	00800084 	movi	r2,2
81122720:	d9000015 	stw	r4,0(sp)
81122724:	d8800115 	stw	r2,4(sp)
81122728:	1809883a 	mov	r4,r3
8112272c:	d811883a 	mov	r8,sp
81122730:	200b883a 	mov	r5,r4
81122734:	42000204 	addi	r8,r8,8
81122738:	21000044 	addi	r4,r4,1
8112273c:	003f4e06 	br	81122478 <__reset+0xfb102478>
81122740:	d8001d85 	stb	zero,118(sp)
81122744:	48005016 	blt	r9,zero,81122888 <___vfiprintf_internal_r+0x1014>
81122748:	00ffdfc4 	movi	r3,-129
8112274c:	94c4b03a 	or	r2,r18,r19
81122750:	a0e8703a 	and	r20,r20,r3
81122754:	103d4426 	beq	r2,zero,81121c68 <__reset+0xfb101c68>
81122758:	0039883a 	mov	fp,zero
8112275c:	d9002617 	ldw	r4,152(sp)
81122760:	dd401a04 	addi	r21,sp,104
81122764:	908003cc 	andi	r2,r18,15
81122768:	9806973a 	slli	r3,r19,28
8112276c:	2085883a 	add	r2,r4,r2
81122770:	9024d13a 	srli	r18,r18,4
81122774:	10800003 	ldbu	r2,0(r2)
81122778:	9826d13a 	srli	r19,r19,4
8112277c:	ad7fffc4 	addi	r21,r21,-1
81122780:	1ca4b03a 	or	r18,r3,r18
81122784:	a8800005 	stb	r2,0(r21)
81122788:	94c4b03a 	or	r2,r18,r19
8112278c:	103ff51e 	bne	r2,zero,81122764 <__reset+0xfb102764>
81122790:	003e5906 	br	811220f8 <__reset+0xfb1020f8>
81122794:	d9402117 	ldw	r5,132(sp)
81122798:	d9002017 	ldw	r4,128(sp)
8112279c:	d9801a04 	addi	r6,sp,104
811227a0:	11217580 	call	81121758 <__sprint_r.part.0>
811227a4:	103f891e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
811227a8:	d8801c17 	ldw	r2,112(sp)
811227ac:	d811883a 	mov	r8,sp
811227b0:	003f9506 	br	81122608 <__reset+0xfb102608>
811227b4:	d9402117 	ldw	r5,132(sp)
811227b8:	d9002017 	ldw	r4,128(sp)
811227bc:	d9801a04 	addi	r6,sp,104
811227c0:	11217580 	call	81121758 <__sprint_r.part.0>
811227c4:	103f811e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
811227c8:	d811883a 	mov	r8,sp
811227cc:	003ced06 	br	81121b84 <__reset+0xfb101b84>
811227d0:	d9402117 	ldw	r5,132(sp)
811227d4:	d9002017 	ldw	r4,128(sp)
811227d8:	d9801a04 	addi	r6,sp,104
811227dc:	da402c15 	stw	r9,176(sp)
811227e0:	db802a15 	stw	r14,168(sp)
811227e4:	11217580 	call	81121758 <__sprint_r.part.0>
811227e8:	da402c17 	ldw	r9,176(sp)
811227ec:	db802a17 	ldw	r14,168(sp)
811227f0:	103f761e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
811227f4:	d9401b17 	ldw	r5,108(sp)
811227f8:	d8801c17 	ldw	r2,112(sp)
811227fc:	d811883a 	mov	r8,sp
81122800:	29000044 	addi	r4,r5,1
81122804:	003d5b06 	br	81121d74 <__reset+0xfb101d74>
81122808:	d9402117 	ldw	r5,132(sp)
8112280c:	d9002017 	ldw	r4,128(sp)
81122810:	d9801a04 	addi	r6,sp,104
81122814:	da402c15 	stw	r9,176(sp)
81122818:	11217580 	call	81121758 <__sprint_r.part.0>
8112281c:	da402c17 	ldw	r9,176(sp)
81122820:	103f6a1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
81122824:	d9401b17 	ldw	r5,108(sp)
81122828:	d8801c17 	ldw	r2,112(sp)
8112282c:	d811883a 	mov	r8,sp
81122830:	29000044 	addi	r4,r5,1
81122834:	003f1006 	br	81122478 <__reset+0xfb102478>
81122838:	1000c31e 	bne	r2,zero,81122b48 <___vfiprintf_internal_r+0x12d4>
8112283c:	01000044 	movi	r4,1
81122840:	000b883a 	mov	r5,zero
81122844:	d811883a 	mov	r8,sp
81122848:	003f0d06 	br	81122480 <__reset+0xfb102480>
8112284c:	d9402117 	ldw	r5,132(sp)
81122850:	d9002017 	ldw	r4,128(sp)
81122854:	d9801a04 	addi	r6,sp,104
81122858:	11217580 	call	81121758 <__sprint_r.part.0>
8112285c:	103f5b1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
81122860:	d9001b17 	ldw	r4,108(sp)
81122864:	d8801c17 	ldw	r2,112(sp)
81122868:	d811883a 	mov	r8,sp
8112286c:	21000044 	addi	r4,r4,1
81122870:	003d8006 	br	81121e74 <__reset+0xfb101e74>
81122874:	01204534 	movhi	r4,33044
81122878:	21391404 	addi	r4,r4,-7088
8112287c:	d9002615 	stw	r4,152(sp)
81122880:	d8c02215 	stw	r3,136(sp)
81122884:	1029883a 	mov	r20,r2
81122888:	94c4b03a 	or	r2,r18,r19
8112288c:	103fb21e 	bne	r2,zero,81122758 <__reset+0xfb102758>
81122890:	0039883a 	mov	fp,zero
81122894:	00800084 	movi	r2,2
81122898:	003e6b06 	br	81122248 <__reset+0xfb102248>
8112289c:	da802217 	ldw	r10,136(sp)
811228a0:	d8001d85 	stb	zero,118(sp)
811228a4:	0027883a 	mov	r19,zero
811228a8:	50800104 	addi	r2,r10,4
811228ac:	54800017 	ldw	r18,0(r10)
811228b0:	483e6016 	blt	r9,zero,81122234 <__reset+0xfb102234>
811228b4:	00ffdfc4 	movi	r3,-129
811228b8:	d8802215 	stw	r2,136(sp)
811228bc:	a0e8703a 	and	r20,r20,r3
811228c0:	0039883a 	mov	fp,zero
811228c4:	903ebb26 	beq	r18,zero,811223b4 <__reset+0xfb1023b4>
811228c8:	00800244 	movi	r2,9
811228cc:	14bdee36 	bltu	r2,r18,81122088 <__reset+0xfb102088>
811228d0:	003eba06 	br	811223bc <__reset+0xfb1023bc>
811228d4:	00800c04 	movi	r2,48
811228d8:	d8c01d45 	stb	r3,117(sp)
811228dc:	d8801d05 	stb	r2,116(sp)
811228e0:	d8001d85 	stb	zero,118(sp)
811228e4:	a0c00094 	ori	r3,r20,2
811228e8:	4800a916 	blt	r9,zero,81122b90 <___vfiprintf_internal_r+0x131c>
811228ec:	00bfdfc4 	movi	r2,-129
811228f0:	a096703a 	and	r11,r20,r2
811228f4:	5d000094 	ori	r20,r11,2
811228f8:	0039883a 	mov	fp,zero
811228fc:	003f9706 	br	8112275c <__reset+0xfb10275c>
81122900:	8025883a 	mov	r18,r16
81122904:	003c2e06 	br	811219c0 <__reset+0xfb1019c0>
81122908:	00a04534 	movhi	r2,33044
8112290c:	10b91404 	addi	r2,r2,-7088
81122910:	0039883a 	mov	fp,zero
81122914:	d8802615 	stw	r2,152(sp)
81122918:	003f9006 	br	8112275c <__reset+0xfb10275c>
8112291c:	04a5c83a 	sub	r18,zero,r18
81122920:	07000b44 	movi	fp,45
81122924:	9004c03a 	cmpne	r2,r18,zero
81122928:	04e7c83a 	sub	r19,zero,r19
8112292c:	df001d85 	stb	fp,118(sp)
81122930:	98a7c83a 	sub	r19,r19,r2
81122934:	48009f16 	blt	r9,zero,81122bb4 <___vfiprintf_internal_r+0x1340>
81122938:	00bfdfc4 	movi	r2,-129
8112293c:	a0a8703a 	and	r20,r20,r2
81122940:	003dd006 	br	81122084 <__reset+0xfb102084>
81122944:	70004c26 	beq	r14,zero,81122a78 <___vfiprintf_internal_r+0x1204>
81122948:	00800084 	movi	r2,2
8112294c:	d8c01d04 	addi	r3,sp,116
81122950:	d8c00015 	stw	r3,0(sp)
81122954:	d8800115 	stw	r2,4(sp)
81122958:	01000044 	movi	r4,1
8112295c:	d811883a 	mov	r8,sp
81122960:	003f7306 	br	81122730 <__reset+0xfb102730>
81122964:	a080100c 	andi	r2,r20,64
81122968:	da802217 	ldw	r10,136(sp)
8112296c:	103e0626 	beq	r2,zero,81122188 <__reset+0xfb102188>
81122970:	5480000f 	ldh	r18,0(r10)
81122974:	52800104 	addi	r10,r10,4
81122978:	da802215 	stw	r10,136(sp)
8112297c:	9027d7fa 	srai	r19,r18,31
81122980:	9805883a 	mov	r2,r19
81122984:	003db806 	br	81122068 <__reset+0xfb102068>
81122988:	a080040c 	andi	r2,r20,16
8112298c:	1000091e 	bne	r2,zero,811229b4 <___vfiprintf_internal_r+0x1140>
81122990:	a2c0100c 	andi	r11,r20,64
81122994:	58000726 	beq	r11,zero,811229b4 <___vfiprintf_internal_r+0x1140>
81122998:	da802217 	ldw	r10,136(sp)
8112299c:	50800017 	ldw	r2,0(r10)
811229a0:	52800104 	addi	r10,r10,4
811229a4:	da802215 	stw	r10,136(sp)
811229a8:	da802317 	ldw	r10,140(sp)
811229ac:	1280000d 	sth	r10,0(r2)
811229b0:	003be706 	br	81121950 <__reset+0xfb101950>
811229b4:	da802217 	ldw	r10,136(sp)
811229b8:	50800017 	ldw	r2,0(r10)
811229bc:	52800104 	addi	r10,r10,4
811229c0:	da802215 	stw	r10,136(sp)
811229c4:	da802317 	ldw	r10,140(sp)
811229c8:	12800015 	stw	r10,0(r2)
811229cc:	003be006 	br	81121950 <__reset+0xfb101950>
811229d0:	a080100c 	andi	r2,r20,64
811229d4:	da802217 	ldw	r10,136(sp)
811229d8:	10003026 	beq	r2,zero,81122a9c <___vfiprintf_internal_r+0x1228>
811229dc:	5480000b 	ldhu	r18,0(r10)
811229e0:	52800104 	addi	r10,r10,4
811229e4:	0027883a 	mov	r19,zero
811229e8:	da802215 	stw	r10,136(sp)
811229ec:	003d8006 	br	81121ff0 <__reset+0xfb101ff0>
811229f0:	80c00007 	ldb	r3,0(r16)
811229f4:	003c0006 	br	811219f8 <__reset+0xfb1019f8>
811229f8:	a080100c 	andi	r2,r20,64
811229fc:	d8001d85 	stb	zero,118(sp)
81122a00:	da802217 	ldw	r10,136(sp)
81122a04:	1000201e 	bne	r2,zero,81122a88 <___vfiprintf_internal_r+0x1214>
81122a08:	50800104 	addi	r2,r10,4
81122a0c:	54800017 	ldw	r18,0(r10)
81122a10:	0027883a 	mov	r19,zero
81122a14:	483def0e 	bge	r9,zero,811221d4 <__reset+0xfb1021d4>
81122a18:	94c6b03a 	or	r3,r18,r19
81122a1c:	d8802215 	stw	r2,136(sp)
81122a20:	183d4e1e 	bne	r3,zero,81121f5c <__reset+0xfb101f5c>
81122a24:	0039883a 	mov	fp,zero
81122a28:	0005883a 	mov	r2,zero
81122a2c:	003e0606 	br	81122248 <__reset+0xfb102248>
81122a30:	d9402117 	ldw	r5,132(sp)
81122a34:	d9002017 	ldw	r4,128(sp)
81122a38:	d9801a04 	addi	r6,sp,104
81122a3c:	da402c15 	stw	r9,176(sp)
81122a40:	db802a15 	stw	r14,168(sp)
81122a44:	11217580 	call	81121758 <__sprint_r.part.0>
81122a48:	da402c17 	ldw	r9,176(sp)
81122a4c:	db802a17 	ldw	r14,168(sp)
81122a50:	103ede1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
81122a54:	d9401b17 	ldw	r5,108(sp)
81122a58:	d8801c17 	ldw	r2,112(sp)
81122a5c:	d811883a 	mov	r8,sp
81122a60:	29000044 	addi	r4,r5,1
81122a64:	003e7406 	br	81122438 <__reset+0xfb102438>
81122a68:	00bfffc4 	movi	r2,-1
81122a6c:	003c5806 	br	81121bd0 <__reset+0xfb101bd0>
81122a70:	d811883a 	mov	r8,sp
81122a74:	003ee806 	br	81122618 <__reset+0xfb102618>
81122a78:	000b883a 	mov	r5,zero
81122a7c:	01000044 	movi	r4,1
81122a80:	d811883a 	mov	r8,sp
81122a84:	003e7c06 	br	81122478 <__reset+0xfb102478>
81122a88:	50800104 	addi	r2,r10,4
81122a8c:	5480000b 	ldhu	r18,0(r10)
81122a90:	0027883a 	mov	r19,zero
81122a94:	483dcf0e 	bge	r9,zero,811221d4 <__reset+0xfb1021d4>
81122a98:	003fdf06 	br	81122a18 <__reset+0xfb102a18>
81122a9c:	54800017 	ldw	r18,0(r10)
81122aa0:	52800104 	addi	r10,r10,4
81122aa4:	0027883a 	mov	r19,zero
81122aa8:	da802215 	stw	r10,136(sp)
81122aac:	003d5006 	br	81121ff0 <__reset+0xfb101ff0>
81122ab0:	50800104 	addi	r2,r10,4
81122ab4:	5480000b 	ldhu	r18,0(r10)
81122ab8:	0027883a 	mov	r19,zero
81122abc:	483f7d0e 	bge	r9,zero,811228b4 <__reset+0xfb1028b4>
81122ac0:	003ddc06 	br	81122234 <__reset+0xfb102234>
81122ac4:	d8c02215 	stw	r3,136(sp)
81122ac8:	0039883a 	mov	fp,zero
81122acc:	003ddb06 	br	8112223c <__reset+0xfb10223c>
81122ad0:	02a04534 	movhi	r10,33044
81122ad4:	52b9a604 	addi	r10,r10,-6504
81122ad8:	da802415 	stw	r10,144(sp)
81122adc:	003e8306 	br	811224ec <__reset+0xfb1024ec>
81122ae0:	d8801c17 	ldw	r2,112(sp)
81122ae4:	dd002117 	ldw	r20,132(sp)
81122ae8:	103eb926 	beq	r2,zero,811225d0 <__reset+0xfb1025d0>
81122aec:	d9002017 	ldw	r4,128(sp)
81122af0:	d9801a04 	addi	r6,sp,104
81122af4:	a00b883a 	mov	r5,r20
81122af8:	11217580 	call	81121758 <__sprint_r.part.0>
81122afc:	003eb406 	br	811225d0 <__reset+0xfb1025d0>
81122b00:	80c00043 	ldbu	r3,1(r16)
81122b04:	a5000814 	ori	r20,r20,32
81122b08:	84000044 	addi	r16,r16,1
81122b0c:	18c03fcc 	andi	r3,r3,255
81122b10:	18c0201c 	xori	r3,r3,128
81122b14:	18ffe004 	addi	r3,r3,-128
81122b18:	003bb706 	br	811219f8 <__reset+0xfb1019f8>
81122b1c:	a809883a 	mov	r4,r21
81122b20:	d8c02a15 	stw	r3,168(sp)
81122b24:	da002b15 	stw	r8,172(sp)
81122b28:	11132f80 	call	811132f8 <strlen>
81122b2c:	d8c02a17 	ldw	r3,168(sp)
81122b30:	1027883a 	mov	r19,r2
81122b34:	df001d83 	ldbu	fp,118(sp)
81122b38:	d8c02215 	stw	r3,136(sp)
81122b3c:	0013883a 	mov	r9,zero
81122b40:	da002b17 	ldw	r8,172(sp)
81122b44:	003c4d06 	br	81121c7c <__reset+0xfb101c7c>
81122b48:	d9402117 	ldw	r5,132(sp)
81122b4c:	d9002017 	ldw	r4,128(sp)
81122b50:	d9801a04 	addi	r6,sp,104
81122b54:	da402c15 	stw	r9,176(sp)
81122b58:	11217580 	call	81121758 <__sprint_r.part.0>
81122b5c:	da402c17 	ldw	r9,176(sp)
81122b60:	103e9a1e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
81122b64:	d9401b17 	ldw	r5,108(sp)
81122b68:	d8801c17 	ldw	r2,112(sp)
81122b6c:	d811883a 	mov	r8,sp
81122b70:	29000044 	addi	r4,r5,1
81122b74:	003e4206 	br	81122480 <__reset+0xfb102480>
81122b78:	d9401b17 	ldw	r5,108(sp)
81122b7c:	01204534 	movhi	r4,33044
81122b80:	2139aa04 	addi	r4,r4,-6488
81122b84:	d9002415 	stw	r4,144(sp)
81122b88:	29400044 	addi	r5,r5,1
81122b8c:	003c6d06 	br	81121d44 <__reset+0xfb101d44>
81122b90:	0039883a 	mov	fp,zero
81122b94:	00800084 	movi	r2,2
81122b98:	10803fcc 	andi	r2,r2,255
81122b9c:	01000044 	movi	r4,1
81122ba0:	11001e26 	beq	r2,r4,81122c1c <___vfiprintf_internal_r+0x13a8>
81122ba4:	01000084 	movi	r4,2
81122ba8:	11001e1e 	bne	r2,r4,81122c24 <___vfiprintf_internal_r+0x13b0>
81122bac:	1829883a 	mov	r20,r3
81122bb0:	003eea06 	br	8112275c <__reset+0xfb10275c>
81122bb4:	a007883a 	mov	r3,r20
81122bb8:	00800044 	movi	r2,1
81122bbc:	003ff606 	br	81122b98 <__reset+0xfb102b98>
81122bc0:	00800184 	movi	r2,6
81122bc4:	1240012e 	bgeu	r2,r9,81122bcc <___vfiprintf_internal_r+0x1358>
81122bc8:	1013883a 	mov	r9,r2
81122bcc:	4827883a 	mov	r19,r9
81122bd0:	4825883a 	mov	r18,r9
81122bd4:	48001516 	blt	r9,zero,81122c2c <___vfiprintf_internal_r+0x13b8>
81122bd8:	05604534 	movhi	r21,33044
81122bdc:	d8c02215 	stw	r3,136(sp)
81122be0:	ad791904 	addi	r21,r21,-7068
81122be4:	003d1406 	br	81122038 <__reset+0xfb102038>
81122be8:	02a04534 	movhi	r10,33044
81122bec:	52b9a604 	addi	r10,r10,-6504
81122bf0:	da802415 	stw	r10,144(sp)
81122bf4:	200d883a 	mov	r6,r4
81122bf8:	003c9106 	br	81121e40 <__reset+0xfb101e40>
81122bfc:	5021883a 	mov	r16,r10
81122c00:	0013883a 	mov	r9,zero
81122c04:	003b7d06 	br	811219fc <__reset+0xfb1019fc>
81122c08:	4827883a 	mov	r19,r9
81122c0c:	df001d83 	ldbu	fp,118(sp)
81122c10:	d8c02215 	stw	r3,136(sp)
81122c14:	0013883a 	mov	r9,zero
81122c18:	003c1806 	br	81121c7c <__reset+0xfb101c7c>
81122c1c:	1829883a 	mov	r20,r3
81122c20:	003d1806 	br	81122084 <__reset+0xfb102084>
81122c24:	1829883a 	mov	r20,r3
81122c28:	003ccd06 	br	81121f60 <__reset+0xfb101f60>
81122c2c:	0025883a 	mov	r18,zero
81122c30:	003fe906 	br	81122bd8 <__reset+0xfb102bd8>
81122c34:	d8802217 	ldw	r2,136(sp)
81122c38:	80c00043 	ldbu	r3,1(r16)
81122c3c:	5021883a 	mov	r16,r10
81122c40:	12400017 	ldw	r9,0(r2)
81122c44:	10800104 	addi	r2,r2,4
81122c48:	d8802215 	stw	r2,136(sp)
81122c4c:	483faf0e 	bge	r9,zero,81122b0c <__reset+0xfb102b0c>
81122c50:	18c03fcc 	andi	r3,r3,255
81122c54:	18c0201c 	xori	r3,r3,128
81122c58:	027fffc4 	movi	r9,-1
81122c5c:	18ffe004 	addi	r3,r3,-128
81122c60:	003b6506 	br	811219f8 <__reset+0xfb1019f8>
81122c64:	d9c01d85 	stb	r7,118(sp)
81122c68:	003ca006 	br	81121eec <__reset+0xfb101eec>
81122c6c:	d9c01d85 	stb	r7,118(sp)
81122c70:	003cad06 	br	81121f28 <__reset+0xfb101f28>
81122c74:	d9c01d85 	stb	r7,118(sp)
81122c78:	003d7d06 	br	81122270 <__reset+0xfb102270>
81122c7c:	d9c01d85 	stb	r7,118(sp)
81122c80:	003d5f06 	br	81122200 <__reset+0xfb102200>
81122c84:	a080004c 	andi	r2,r20,1
81122c88:	0039883a 	mov	fp,zero
81122c8c:	10000526 	beq	r2,zero,81122ca4 <___vfiprintf_internal_r+0x1430>
81122c90:	00800c04 	movi	r2,48
81122c94:	d88019c5 	stb	r2,103(sp)
81122c98:	dcc02717 	ldw	r19,156(sp)
81122c9c:	dd4019c4 	addi	r21,sp,103
81122ca0:	003bf606 	br	81121c7c <__reset+0xfb101c7c>
81122ca4:	0027883a 	mov	r19,zero
81122ca8:	dd401a04 	addi	r21,sp,104
81122cac:	003bf306 	br	81121c7c <__reset+0xfb101c7c>
81122cb0:	d9c01d85 	stb	r7,118(sp)
81122cb4:	003dc806 	br	811223d8 <__reset+0xfb1023d8>
81122cb8:	d9c01d85 	stb	r7,118(sp)
81122cbc:	003d3a06 	br	811221a8 <__reset+0xfb1021a8>
81122cc0:	d9c01d85 	stb	r7,118(sp)
81122cc4:	003d2a06 	br	81122170 <__reset+0xfb102170>
81122cc8:	d9c01d85 	stb	r7,118(sp)
81122ccc:	003cde06 	br	81122048 <__reset+0xfb102048>
81122cd0:	d9c01d85 	stb	r7,118(sp)
81122cd4:	003cbc06 	br	81121fc8 <__reset+0xfb101fc8>

81122cd8 <__vfiprintf_internal>:
81122cd8:	00a04534 	movhi	r2,33044
81122cdc:	10821504 	addi	r2,r2,2132
81122ce0:	300f883a 	mov	r7,r6
81122ce4:	280d883a 	mov	r6,r5
81122ce8:	200b883a 	mov	r5,r4
81122cec:	11000017 	ldw	r4,0(r2)
81122cf0:	11218741 	jmpi	81121874 <___vfiprintf_internal_r>

81122cf4 <__sbprintf>:
81122cf4:	defee204 	addi	sp,sp,-1144
81122cf8:	de00012e 	bgeu	sp,et,81122d00 <__sbprintf+0xc>
81122cfc:	003b68fa 	trap	3
81122d00:	2880030b 	ldhu	r2,12(r5)
81122d04:	2ac01917 	ldw	r11,100(r5)
81122d08:	2a80038b 	ldhu	r10,14(r5)
81122d0c:	2a400717 	ldw	r9,28(r5)
81122d10:	2a000917 	ldw	r8,36(r5)
81122d14:	00c10004 	movi	r3,1024
81122d18:	dc011a15 	stw	r16,1128(sp)
81122d1c:	10bfff4c 	andi	r2,r2,65533
81122d20:	2821883a 	mov	r16,r5
81122d24:	d8cb883a 	add	r5,sp,r3
81122d28:	dc811c15 	stw	r18,1136(sp)
81122d2c:	dc411b15 	stw	r17,1132(sp)
81122d30:	dfc11d15 	stw	ra,1140(sp)
81122d34:	2025883a 	mov	r18,r4
81122d38:	d881030d 	sth	r2,1036(sp)
81122d3c:	dac11915 	stw	r11,1124(sp)
81122d40:	da81038d 	sth	r10,1038(sp)
81122d44:	da410715 	stw	r9,1052(sp)
81122d48:	da010915 	stw	r8,1060(sp)
81122d4c:	dec10015 	stw	sp,1024(sp)
81122d50:	dec10415 	stw	sp,1040(sp)
81122d54:	d8c10215 	stw	r3,1032(sp)
81122d58:	d8c10515 	stw	r3,1044(sp)
81122d5c:	d8010615 	stw	zero,1048(sp)
81122d60:	11218740 	call	81121874 <___vfiprintf_internal_r>
81122d64:	1023883a 	mov	r17,r2
81122d68:	10000416 	blt	r2,zero,81122d7c <__sbprintf+0x88>
81122d6c:	d9410004 	addi	r5,sp,1024
81122d70:	9009883a 	mov	r4,r18
81122d74:	111b02c0 	call	8111b02c <_fflush_r>
81122d78:	10000d1e 	bne	r2,zero,81122db0 <__sbprintf+0xbc>
81122d7c:	d881030b 	ldhu	r2,1036(sp)
81122d80:	1080100c 	andi	r2,r2,64
81122d84:	10000326 	beq	r2,zero,81122d94 <__sbprintf+0xa0>
81122d88:	8080030b 	ldhu	r2,12(r16)
81122d8c:	10801014 	ori	r2,r2,64
81122d90:	8080030d 	sth	r2,12(r16)
81122d94:	8805883a 	mov	r2,r17
81122d98:	dfc11d17 	ldw	ra,1140(sp)
81122d9c:	dc811c17 	ldw	r18,1136(sp)
81122da0:	dc411b17 	ldw	r17,1132(sp)
81122da4:	dc011a17 	ldw	r16,1128(sp)
81122da8:	dec11e04 	addi	sp,sp,1144
81122dac:	f800283a 	ret
81122db0:	047fffc4 	movi	r17,-1
81122db4:	003ff106 	br	81122d7c <__reset+0xfb102d7c>

81122db8 <_calloc_r>:
81122db8:	298b383a 	mul	r5,r5,r6
81122dbc:	defffe04 	addi	sp,sp,-8
81122dc0:	de00012e 	bgeu	sp,et,81122dc8 <_calloc_r+0x10>
81122dc4:	003b68fa 	trap	3
81122dc8:	dfc00115 	stw	ra,4(sp)
81122dcc:	dc000015 	stw	r16,0(sp)
81122dd0:	11121680 	call	81112168 <_malloc_r>
81122dd4:	10002926 	beq	r2,zero,81122e7c <_calloc_r+0xc4>
81122dd8:	11bfff17 	ldw	r6,-4(r2)
81122ddc:	1021883a 	mov	r16,r2
81122de0:	00bfff04 	movi	r2,-4
81122de4:	308c703a 	and	r6,r6,r2
81122de8:	00c00904 	movi	r3,36
81122dec:	308d883a 	add	r6,r6,r2
81122df0:	19801636 	bltu	r3,r6,81122e4c <_calloc_r+0x94>
81122df4:	008004c4 	movi	r2,19
81122df8:	11800b2e 	bgeu	r2,r6,81122e28 <_calloc_r+0x70>
81122dfc:	80000015 	stw	zero,0(r16)
81122e00:	80000115 	stw	zero,4(r16)
81122e04:	008006c4 	movi	r2,27
81122e08:	11801a2e 	bgeu	r2,r6,81122e74 <_calloc_r+0xbc>
81122e0c:	80000215 	stw	zero,8(r16)
81122e10:	80000315 	stw	zero,12(r16)
81122e14:	30c0151e 	bne	r6,r3,81122e6c <_calloc_r+0xb4>
81122e18:	80000415 	stw	zero,16(r16)
81122e1c:	80800604 	addi	r2,r16,24
81122e20:	80000515 	stw	zero,20(r16)
81122e24:	00000106 	br	81122e2c <_calloc_r+0x74>
81122e28:	8005883a 	mov	r2,r16
81122e2c:	10000015 	stw	zero,0(r2)
81122e30:	10000115 	stw	zero,4(r2)
81122e34:	10000215 	stw	zero,8(r2)
81122e38:	8005883a 	mov	r2,r16
81122e3c:	dfc00117 	ldw	ra,4(sp)
81122e40:	dc000017 	ldw	r16,0(sp)
81122e44:	dec00204 	addi	sp,sp,8
81122e48:	f800283a 	ret
81122e4c:	000b883a 	mov	r5,zero
81122e50:	8009883a 	mov	r4,r16
81122e54:	1112acc0 	call	81112acc <memset>
81122e58:	8005883a 	mov	r2,r16
81122e5c:	dfc00117 	ldw	ra,4(sp)
81122e60:	dc000017 	ldw	r16,0(sp)
81122e64:	dec00204 	addi	sp,sp,8
81122e68:	f800283a 	ret
81122e6c:	80800404 	addi	r2,r16,16
81122e70:	003fee06 	br	81122e2c <__reset+0xfb102e2c>
81122e74:	80800204 	addi	r2,r16,8
81122e78:	003fec06 	br	81122e2c <__reset+0xfb102e2c>
81122e7c:	0005883a 	mov	r2,zero
81122e80:	003fee06 	br	81122e3c <__reset+0xfb102e3c>

81122e84 <_fclose_r>:
81122e84:	28003b26 	beq	r5,zero,81122f74 <_fclose_r+0xf0>
81122e88:	defffc04 	addi	sp,sp,-16
81122e8c:	de00012e 	bgeu	sp,et,81122e94 <_fclose_r+0x10>
81122e90:	003b68fa 	trap	3
81122e94:	dc400115 	stw	r17,4(sp)
81122e98:	dc000015 	stw	r16,0(sp)
81122e9c:	dfc00315 	stw	ra,12(sp)
81122ea0:	dc800215 	stw	r18,8(sp)
81122ea4:	2023883a 	mov	r17,r4
81122ea8:	2821883a 	mov	r16,r5
81122eac:	20000226 	beq	r4,zero,81122eb8 <_fclose_r+0x34>
81122eb0:	20800e17 	ldw	r2,56(r4)
81122eb4:	10002726 	beq	r2,zero,81122f54 <_fclose_r+0xd0>
81122eb8:	8080030f 	ldh	r2,12(r16)
81122ebc:	1000071e 	bne	r2,zero,81122edc <_fclose_r+0x58>
81122ec0:	0005883a 	mov	r2,zero
81122ec4:	dfc00317 	ldw	ra,12(sp)
81122ec8:	dc800217 	ldw	r18,8(sp)
81122ecc:	dc400117 	ldw	r17,4(sp)
81122ed0:	dc000017 	ldw	r16,0(sp)
81122ed4:	dec00404 	addi	sp,sp,16
81122ed8:	f800283a 	ret
81122edc:	800b883a 	mov	r5,r16
81122ee0:	8809883a 	mov	r4,r17
81122ee4:	111ae080 	call	8111ae08 <__sflush_r>
81122ee8:	1025883a 	mov	r18,r2
81122eec:	80800b17 	ldw	r2,44(r16)
81122ef0:	10000426 	beq	r2,zero,81122f04 <_fclose_r+0x80>
81122ef4:	81400717 	ldw	r5,28(r16)
81122ef8:	8809883a 	mov	r4,r17
81122efc:	103ee83a 	callr	r2
81122f00:	10001616 	blt	r2,zero,81122f5c <_fclose_r+0xd8>
81122f04:	8080030b 	ldhu	r2,12(r16)
81122f08:	1080200c 	andi	r2,r2,128
81122f0c:	1000151e 	bne	r2,zero,81122f64 <_fclose_r+0xe0>
81122f10:	81400c17 	ldw	r5,48(r16)
81122f14:	28000526 	beq	r5,zero,81122f2c <_fclose_r+0xa8>
81122f18:	80801004 	addi	r2,r16,64
81122f1c:	28800226 	beq	r5,r2,81122f28 <_fclose_r+0xa4>
81122f20:	8809883a 	mov	r4,r17
81122f24:	111b8c00 	call	8111b8c0 <_free_r>
81122f28:	80000c15 	stw	zero,48(r16)
81122f2c:	81401117 	ldw	r5,68(r16)
81122f30:	28000326 	beq	r5,zero,81122f40 <_fclose_r+0xbc>
81122f34:	8809883a 	mov	r4,r17
81122f38:	111b8c00 	call	8111b8c0 <_free_r>
81122f3c:	80001115 	stw	zero,68(r16)
81122f40:	111b4380 	call	8111b438 <__sfp_lock_acquire>
81122f44:	8000030d 	sth	zero,12(r16)
81122f48:	111b43c0 	call	8111b43c <__sfp_lock_release>
81122f4c:	9005883a 	mov	r2,r18
81122f50:	003fdc06 	br	81122ec4 <__reset+0xfb102ec4>
81122f54:	111b4280 	call	8111b428 <__sinit>
81122f58:	003fd706 	br	81122eb8 <__reset+0xfb102eb8>
81122f5c:	04bfffc4 	movi	r18,-1
81122f60:	003fe806 	br	81122f04 <__reset+0xfb102f04>
81122f64:	81400417 	ldw	r5,16(r16)
81122f68:	8809883a 	mov	r4,r17
81122f6c:	111b8c00 	call	8111b8c0 <_free_r>
81122f70:	003fe706 	br	81122f10 <__reset+0xfb102f10>
81122f74:	0005883a 	mov	r2,zero
81122f78:	f800283a 	ret

81122f7c <fclose>:
81122f7c:	00a04534 	movhi	r2,33044
81122f80:	10821504 	addi	r2,r2,2132
81122f84:	200b883a 	mov	r5,r4
81122f88:	11000017 	ldw	r4,0(r2)
81122f8c:	1122e841 	jmpi	81122e84 <_fclose_r>

81122f90 <__fputwc>:
81122f90:	defff804 	addi	sp,sp,-32
81122f94:	de00012e 	bgeu	sp,et,81122f9c <__fputwc+0xc>
81122f98:	003b68fa 	trap	3
81122f9c:	dcc00415 	stw	r19,16(sp)
81122fa0:	dc800315 	stw	r18,12(sp)
81122fa4:	dc000115 	stw	r16,4(sp)
81122fa8:	dfc00715 	stw	ra,28(sp)
81122fac:	dd400615 	stw	r21,24(sp)
81122fb0:	dd000515 	stw	r20,20(sp)
81122fb4:	dc400215 	stw	r17,8(sp)
81122fb8:	2027883a 	mov	r19,r4
81122fbc:	2825883a 	mov	r18,r5
81122fc0:	3021883a 	mov	r16,r6
81122fc4:	111c3500 	call	8111c350 <__locale_mb_cur_max>
81122fc8:	00c00044 	movi	r3,1
81122fcc:	10c03e26 	beq	r2,r3,811230c8 <__fputwc+0x138>
81122fd0:	81c01704 	addi	r7,r16,92
81122fd4:	900d883a 	mov	r6,r18
81122fd8:	d80b883a 	mov	r5,sp
81122fdc:	9809883a 	mov	r4,r19
81122fe0:	1123f740 	call	81123f74 <_wcrtomb_r>
81122fe4:	1029883a 	mov	r20,r2
81122fe8:	00bfffc4 	movi	r2,-1
81122fec:	a0802026 	beq	r20,r2,81123070 <__fputwc+0xe0>
81122ff0:	d9400003 	ldbu	r5,0(sp)
81122ff4:	a0001c26 	beq	r20,zero,81123068 <__fputwc+0xd8>
81122ff8:	0023883a 	mov	r17,zero
81122ffc:	05400284 	movi	r21,10
81123000:	00000906 	br	81123028 <__fputwc+0x98>
81123004:	80800017 	ldw	r2,0(r16)
81123008:	11400005 	stb	r5,0(r2)
8112300c:	80c00017 	ldw	r3,0(r16)
81123010:	18c00044 	addi	r3,r3,1
81123014:	80c00015 	stw	r3,0(r16)
81123018:	8c400044 	addi	r17,r17,1
8112301c:	dc45883a 	add	r2,sp,r17
81123020:	8d00112e 	bgeu	r17,r20,81123068 <__fputwc+0xd8>
81123024:	11400003 	ldbu	r5,0(r2)
81123028:	80c00217 	ldw	r3,8(r16)
8112302c:	18ffffc4 	addi	r3,r3,-1
81123030:	80c00215 	stw	r3,8(r16)
81123034:	183ff30e 	bge	r3,zero,81123004 <__reset+0xfb103004>
81123038:	80800617 	ldw	r2,24(r16)
8112303c:	18801916 	blt	r3,r2,811230a4 <__fputwc+0x114>
81123040:	80800017 	ldw	r2,0(r16)
81123044:	11400005 	stb	r5,0(r2)
81123048:	80800017 	ldw	r2,0(r16)
8112304c:	10c00003 	ldbu	r3,0(r2)
81123050:	10800044 	addi	r2,r2,1
81123054:	1d402326 	beq	r3,r21,811230e4 <__fputwc+0x154>
81123058:	80800015 	stw	r2,0(r16)
8112305c:	8c400044 	addi	r17,r17,1
81123060:	dc45883a 	add	r2,sp,r17
81123064:	8d3fef36 	bltu	r17,r20,81123024 <__reset+0xfb103024>
81123068:	9005883a 	mov	r2,r18
8112306c:	00000406 	br	81123080 <__fputwc+0xf0>
81123070:	80c0030b 	ldhu	r3,12(r16)
81123074:	a005883a 	mov	r2,r20
81123078:	18c01014 	ori	r3,r3,64
8112307c:	80c0030d 	sth	r3,12(r16)
81123080:	dfc00717 	ldw	ra,28(sp)
81123084:	dd400617 	ldw	r21,24(sp)
81123088:	dd000517 	ldw	r20,20(sp)
8112308c:	dcc00417 	ldw	r19,16(sp)
81123090:	dc800317 	ldw	r18,12(sp)
81123094:	dc400217 	ldw	r17,8(sp)
81123098:	dc000117 	ldw	r16,4(sp)
8112309c:	dec00804 	addi	sp,sp,32
811230a0:	f800283a 	ret
811230a4:	800d883a 	mov	r6,r16
811230a8:	29403fcc 	andi	r5,r5,255
811230ac:	9809883a 	mov	r4,r19
811230b0:	1123e140 	call	81123e14 <__swbuf_r>
811230b4:	10bfffe0 	cmpeqi	r2,r2,-1
811230b8:	10803fcc 	andi	r2,r2,255
811230bc:	103fd626 	beq	r2,zero,81123018 <__reset+0xfb103018>
811230c0:	00bfffc4 	movi	r2,-1
811230c4:	003fee06 	br	81123080 <__reset+0xfb103080>
811230c8:	90ffffc4 	addi	r3,r18,-1
811230cc:	01003f84 	movi	r4,254
811230d0:	20ffbf36 	bltu	r4,r3,81122fd0 <__reset+0xfb102fd0>
811230d4:	900b883a 	mov	r5,r18
811230d8:	dc800005 	stb	r18,0(sp)
811230dc:	1029883a 	mov	r20,r2
811230e0:	003fc506 	br	81122ff8 <__reset+0xfb102ff8>
811230e4:	800d883a 	mov	r6,r16
811230e8:	a80b883a 	mov	r5,r21
811230ec:	9809883a 	mov	r4,r19
811230f0:	1123e140 	call	81123e14 <__swbuf_r>
811230f4:	10bfffe0 	cmpeqi	r2,r2,-1
811230f8:	003fef06 	br	811230b8 <__reset+0xfb1030b8>

811230fc <_fputwc_r>:
811230fc:	3080030b 	ldhu	r2,12(r6)
81123100:	10c8000c 	andi	r3,r2,8192
81123104:	1800051e 	bne	r3,zero,8112311c <_fputwc_r+0x20>
81123108:	30c01917 	ldw	r3,100(r6)
8112310c:	10880014 	ori	r2,r2,8192
81123110:	3080030d 	sth	r2,12(r6)
81123114:	18880014 	ori	r2,r3,8192
81123118:	30801915 	stw	r2,100(r6)
8112311c:	1122f901 	jmpi	81122f90 <__fputwc>

81123120 <fputwc>:
81123120:	00a04534 	movhi	r2,33044
81123124:	defffc04 	addi	sp,sp,-16
81123128:	10821504 	addi	r2,r2,2132
8112312c:	de00012e 	bgeu	sp,et,81123134 <fputwc+0x14>
81123130:	003b68fa 	trap	3
81123134:	dc000115 	stw	r16,4(sp)
81123138:	14000017 	ldw	r16,0(r2)
8112313c:	dc400215 	stw	r17,8(sp)
81123140:	dfc00315 	stw	ra,12(sp)
81123144:	2023883a 	mov	r17,r4
81123148:	80000226 	beq	r16,zero,81123154 <fputwc+0x34>
8112314c:	80800e17 	ldw	r2,56(r16)
81123150:	10001026 	beq	r2,zero,81123194 <fputwc+0x74>
81123154:	2880030b 	ldhu	r2,12(r5)
81123158:	10c8000c 	andi	r3,r2,8192
8112315c:	1800051e 	bne	r3,zero,81123174 <fputwc+0x54>
81123160:	28c01917 	ldw	r3,100(r5)
81123164:	10880014 	ori	r2,r2,8192
81123168:	2880030d 	sth	r2,12(r5)
8112316c:	18880014 	ori	r2,r3,8192
81123170:	28801915 	stw	r2,100(r5)
81123174:	280d883a 	mov	r6,r5
81123178:	8009883a 	mov	r4,r16
8112317c:	880b883a 	mov	r5,r17
81123180:	dfc00317 	ldw	ra,12(sp)
81123184:	dc400217 	ldw	r17,8(sp)
81123188:	dc000117 	ldw	r16,4(sp)
8112318c:	dec00404 	addi	sp,sp,16
81123190:	1122f901 	jmpi	81122f90 <__fputwc>
81123194:	8009883a 	mov	r4,r16
81123198:	d9400015 	stw	r5,0(sp)
8112319c:	111b4280 	call	8111b428 <__sinit>
811231a0:	d9400017 	ldw	r5,0(sp)
811231a4:	003feb06 	br	81123154 <__reset+0xfb103154>

811231a8 <rshift>:
811231a8:	2807d17a 	srai	r3,r5,5
811231ac:	20800417 	ldw	r2,16(r4)
811231b0:	22000504 	addi	r8,r4,20
811231b4:	1880250e 	bge	r3,r2,8112324c <rshift+0xa4>
811231b8:	1085883a 	add	r2,r2,r2
811231bc:	18c7883a 	add	r3,r3,r3
811231c0:	1085883a 	add	r2,r2,r2
811231c4:	18c7883a 	add	r3,r3,r3
811231c8:	294007cc 	andi	r5,r5,31
811231cc:	4085883a 	add	r2,r8,r2
811231d0:	40c7883a 	add	r3,r8,r3
811231d4:	28002026 	beq	r5,zero,81123258 <rshift+0xb0>
811231d8:	19800017 	ldw	r6,0(r3)
811231dc:	02c00804 	movi	r11,32
811231e0:	19c00104 	addi	r7,r3,4
811231e4:	5957c83a 	sub	r11,r11,r5
811231e8:	314cd83a 	srl	r6,r6,r5
811231ec:	38802c2e 	bgeu	r7,r2,811232a0 <rshift+0xf8>
811231f0:	4015883a 	mov	r10,r8
811231f4:	3a400017 	ldw	r9,0(r7)
811231f8:	52800104 	addi	r10,r10,4
811231fc:	39c00104 	addi	r7,r7,4
81123200:	4ad2983a 	sll	r9,r9,r11
81123204:	498cb03a 	or	r6,r9,r6
81123208:	51bfff15 	stw	r6,-4(r10)
8112320c:	39bfff17 	ldw	r6,-4(r7)
81123210:	314cd83a 	srl	r6,r6,r5
81123214:	38bff736 	bltu	r7,r2,811231f4 <__reset+0xfb1031f4>
81123218:	10c7c83a 	sub	r3,r2,r3
8112321c:	18fffec4 	addi	r3,r3,-5
81123220:	1806d0ba 	srli	r3,r3,2
81123224:	18c00044 	addi	r3,r3,1
81123228:	18c7883a 	add	r3,r3,r3
8112322c:	18c7883a 	add	r3,r3,r3
81123230:	40c7883a 	add	r3,r8,r3
81123234:	19800015 	stw	r6,0(r3)
81123238:	30000126 	beq	r6,zero,81123240 <rshift+0x98>
8112323c:	18c00104 	addi	r3,r3,4
81123240:	1a05c83a 	sub	r2,r3,r8
81123244:	1005d0ba 	srai	r2,r2,2
81123248:	00001206 	br	81123294 <rshift+0xec>
8112324c:	20000415 	stw	zero,16(r4)
81123250:	20000515 	stw	zero,20(r4)
81123254:	f800283a 	ret
81123258:	18bffc2e 	bgeu	r3,r2,8112324c <__reset+0xfb10324c>
8112325c:	180d883a 	mov	r6,r3
81123260:	400b883a 	mov	r5,r8
81123264:	31c00017 	ldw	r7,0(r6)
81123268:	29400104 	addi	r5,r5,4
8112326c:	31800104 	addi	r6,r6,4
81123270:	29ffff15 	stw	r7,-4(r5)
81123274:	30bffb36 	bltu	r6,r2,81123264 <__reset+0xfb103264>
81123278:	00c6303a 	nor	r3,zero,r3
8112327c:	1885883a 	add	r2,r3,r2
81123280:	1004d0ba 	srli	r2,r2,2
81123284:	10800044 	addi	r2,r2,1
81123288:	1085883a 	add	r2,r2,r2
8112328c:	1085883a 	add	r2,r2,r2
81123290:	1005d0ba 	srai	r2,r2,2
81123294:	20800415 	stw	r2,16(r4)
81123298:	103fed26 	beq	r2,zero,81123250 <__reset+0xfb103250>
8112329c:	f800283a 	ret
811232a0:	4007883a 	mov	r3,r8
811232a4:	003fe306 	br	81123234 <__reset+0xfb103234>

811232a8 <__gethex>:
811232a8:	deffeb04 	addi	sp,sp,-84
811232ac:	de00012e 	bgeu	sp,et,811232b4 <__gethex+0xc>
811232b0:	003b68fa 	trap	3
811232b4:	dfc01415 	stw	ra,80(sp)
811232b8:	dd801115 	stw	r22,68(sp)
811232bc:	dcc00e15 	stw	r19,56(sp)
811232c0:	dc800d15 	stw	r18,52(sp)
811232c4:	2827883a 	mov	r19,r5
811232c8:	d9000115 	stw	r4,4(sp)
811232cc:	d9800015 	stw	r6,0(sp)
811232d0:	d9c00415 	stw	r7,16(sp)
811232d4:	df001315 	stw	fp,76(sp)
811232d8:	ddc01215 	stw	r23,72(sp)
811232dc:	dd401015 	stw	r21,64(sp)
811232e0:	dd000f15 	stw	r20,60(sp)
811232e4:	dc400c15 	stw	r17,48(sp)
811232e8:	dc000b15 	stw	r16,44(sp)
811232ec:	111c3740 	call	8111c374 <_localeconv_r>
811232f0:	14800017 	ldw	r18,0(r2)
811232f4:	9009883a 	mov	r4,r18
811232f8:	11132f80 	call	811132f8 <strlen>
811232fc:	98c00017 	ldw	r3,0(r19)
81123300:	102d883a 	mov	r22,r2
81123304:	9085883a 	add	r2,r18,r2
81123308:	10bfffc3 	ldbu	r2,-1(r2)
8112330c:	19000083 	ldbu	r4,2(r3)
81123310:	d8800305 	stb	r2,12(sp)
81123314:	00800c04 	movi	r2,48
81123318:	2081521e 	bne	r4,r2,81123864 <__gethex+0x5bc>
8112331c:	017fff84 	movi	r5,-2
81123320:	188000c4 	addi	r2,r3,3
81123324:	28cbc83a 	sub	r5,r5,r3
81123328:	200d883a 	mov	r6,r4
8112332c:	28a3883a 	add	r17,r5,r2
81123330:	102b883a 	mov	r21,r2
81123334:	10800044 	addi	r2,r2,1
81123338:	113fffc3 	ldbu	r4,-1(r2)
8112333c:	21bffb26 	beq	r4,r6,8112332c <__reset+0xfb10332c>
81123340:	05204534 	movhi	r20,33044
81123344:	a539ae04 	addi	r20,r20,-6472
81123348:	a109883a 	add	r4,r20,r4
8112334c:	20800003 	ldbu	r2,0(r4)
81123350:	10008826 	beq	r2,zero,81123574 <__gethex+0x2cc>
81123354:	a8800003 	ldbu	r2,0(r21)
81123358:	0015883a 	mov	r10,zero
8112335c:	002f883a 	mov	r23,zero
81123360:	a085883a 	add	r2,r20,r2
81123364:	10800003 	ldbu	r2,0(r2)
81123368:	a821883a 	mov	r16,r21
8112336c:	10000526 	beq	r2,zero,81123384 <__gethex+0xdc>
81123370:	84000044 	addi	r16,r16,1
81123374:	80800003 	ldbu	r2,0(r16)
81123378:	a085883a 	add	r2,r20,r2
8112337c:	10800003 	ldbu	r2,0(r2)
81123380:	103ffb1e 	bne	r2,zero,81123370 <__reset+0xfb103370>
81123384:	b00d883a 	mov	r6,r22
81123388:	900b883a 	mov	r5,r18
8112338c:	8009883a 	mov	r4,r16
81123390:	da800a15 	stw	r10,40(sp)
81123394:	1123d440 	call	81123d44 <strncmp>
81123398:	da800a17 	ldw	r10,40(sp)
8112339c:	1000031e 	bne	r2,zero,811233ac <__gethex+0x104>
811233a0:	b8015226 	beq	r23,zero,811238ec <__gethex+0x644>
811233a4:	80800003 	ldbu	r2,0(r16)
811233a8:	00000206 	br	811233b4 <__gethex+0x10c>
811233ac:	80800003 	ldbu	r2,0(r16)
811233b0:	b8011f26 	beq	r23,zero,81123830 <__gethex+0x588>
811233b4:	85efc83a 	sub	r23,r16,r23
811233b8:	bdef883a 	add	r23,r23,r23
811233bc:	bdef883a 	add	r23,r23,r23
811233c0:	05efc83a 	sub	r23,zero,r23
811233c4:	10803fcc 	andi	r2,r2,255
811233c8:	01001404 	movi	r4,80
811233cc:	11008626 	beq	r2,r4,811235e8 <__gethex+0x340>
811233d0:	01001c04 	movi	r4,112
811233d4:	11008426 	beq	r2,r4,811235e8 <__gethex+0x340>
811233d8:	8039883a 	mov	fp,r16
811233dc:	9c000015 	stw	r16,0(r19)
811233e0:	5000711e 	bne	r10,zero,811235a8 <__gethex+0x300>
811233e4:	e545c83a 	sub	r2,fp,r21
811233e8:	10bfffc4 	addi	r2,r2,-1
811233ec:	010001c4 	movi	r4,7
811233f0:	000b883a 	mov	r5,zero
811233f4:	2080030e 	bge	r4,r2,81123404 <__gethex+0x15c>
811233f8:	1005d07a 	srai	r2,r2,1
811233fc:	29400044 	addi	r5,r5,1
81123400:	20bffd16 	blt	r4,r2,811233f8 <__reset+0xfb1033f8>
81123404:	d9000117 	ldw	r4,4(sp)
81123408:	111c8900 	call	8111c890 <_Balloc>
8112340c:	10c00504 	addi	r3,r2,20
81123410:	d8c00215 	stw	r3,8(sp)
81123414:	1021883a 	mov	r16,r2
81123418:	af01732e 	bgeu	r21,fp,811239e8 <__gethex+0x740>
8112341c:	dc400303 	ldbu	r17,12(sp)
81123420:	03400044 	movi	r13,1
81123424:	1815883a 	mov	r10,r3
81123428:	0013883a 	mov	r9,zero
8112342c:	0027883a 	mov	r19,zero
81123430:	6d9bc83a 	sub	r13,r13,r22
81123434:	02c00804 	movi	r11,32
81123438:	e0bfffc3 	ldbu	r2,-1(fp)
8112343c:	e3bfffc4 	addi	r14,fp,-1
81123440:	88803026 	beq	r17,r2,81123504 <__gethex+0x25c>
81123444:	9ac04526 	beq	r19,r11,8112355c <__gethex+0x2b4>
81123448:	980b883a 	mov	r5,r19
8112344c:	9cc00104 	addi	r19,r19,4
81123450:	e13fffc3 	ldbu	r4,-1(fp)
81123454:	7039883a 	mov	fp,r14
81123458:	a109883a 	add	r4,r20,r4
8112345c:	20800003 	ldbu	r2,0(r4)
81123460:	108003cc 	andi	r2,r2,15
81123464:	1144983a 	sll	r2,r2,r5
81123468:	4892b03a 	or	r9,r9,r2
8112346c:	af3ff236 	bltu	r21,fp,81123438 <__reset+0xfb103438>
81123470:	d8c00217 	ldw	r3,8(sp)
81123474:	50800104 	addi	r2,r10,4
81123478:	52400015 	stw	r9,0(r10)
8112347c:	10c5c83a 	sub	r2,r2,r3
81123480:	1005d0ba 	srai	r2,r2,2
81123484:	4809883a 	mov	r4,r9
81123488:	80800415 	stw	r2,16(r16)
8112348c:	1022917a 	slli	r17,r2,5
81123490:	111cb9c0 	call	8111cb9c <__hi0bits>
81123494:	d8c00017 	ldw	r3,0(sp)
81123498:	8885c83a 	sub	r2,r17,r2
8112349c:	1c800017 	ldw	r18,0(r3)
811234a0:	9080c716 	blt	r18,r2,811237c0 <__gethex+0x518>
811234a4:	1480e416 	blt	r2,r18,81123838 <__gethex+0x590>
811234a8:	0027883a 	mov	r19,zero
811234ac:	d8c00017 	ldw	r3,0(sp)
811234b0:	18800217 	ldw	r2,8(r3)
811234b4:	15c08d16 	blt	r2,r23,811236ec <__gethex+0x444>
811234b8:	d8c00017 	ldw	r3,0(sp)
811234bc:	18800117 	ldw	r2,4(r3)
811234c0:	b880aa0e 	bge	r23,r2,8112376c <__gethex+0x4c4>
811234c4:	15efc83a 	sub	r23,r2,r23
811234c8:	bc80ed16 	blt	r23,r18,81123880 <__gethex+0x5d8>
811234cc:	18c00317 	ldw	r3,12(r3)
811234d0:	01000084 	movi	r4,2
811234d4:	19014926 	beq	r3,r4,811239fc <__gethex+0x754>
811234d8:	010000c4 	movi	r4,3
811234dc:	19012e26 	beq	r3,r4,81123998 <__gethex+0x6f0>
811234e0:	01000044 	movi	r4,1
811234e4:	19014826 	beq	r3,r4,81123a08 <__gethex+0x760>
811234e8:	d9000117 	ldw	r4,4(sp)
811234ec:	800b883a 	mov	r5,r16
811234f0:	111c9400 	call	8111c940 <_Bfree>
811234f4:	d8801517 	ldw	r2,84(sp)
811234f8:	10000015 	stw	zero,0(r2)
811234fc:	00801404 	movi	r2,80
81123500:	00002b06 	br	811235b0 <__gethex+0x308>
81123504:	735f883a 	add	r15,r14,r13
81123508:	7d7fce36 	bltu	r15,r21,81123444 <__reset+0xfb103444>
8112350c:	7809883a 	mov	r4,r15
81123510:	b00d883a 	mov	r6,r22
81123514:	900b883a 	mov	r5,r18
81123518:	da400515 	stw	r9,20(sp)
8112351c:	da800a15 	stw	r10,40(sp)
81123520:	dac00915 	stw	r11,36(sp)
81123524:	db400815 	stw	r13,32(sp)
81123528:	db800615 	stw	r14,24(sp)
8112352c:	dbc00715 	stw	r15,28(sp)
81123530:	1123d440 	call	81123d44 <strncmp>
81123534:	da400517 	ldw	r9,20(sp)
81123538:	da800a17 	ldw	r10,40(sp)
8112353c:	dac00917 	ldw	r11,36(sp)
81123540:	db400817 	ldw	r13,32(sp)
81123544:	db800617 	ldw	r14,24(sp)
81123548:	dbc00717 	ldw	r15,28(sp)
8112354c:	103fbd1e 	bne	r2,zero,81123444 <__reset+0xfb103444>
81123550:	7839883a 	mov	fp,r15
81123554:	af3fb836 	bltu	r21,fp,81123438 <__reset+0xfb103438>
81123558:	003fc506 	br	81123470 <__reset+0xfb103470>
8112355c:	04c00104 	movi	r19,4
81123560:	52400015 	stw	r9,0(r10)
81123564:	000b883a 	mov	r5,zero
81123568:	54d5883a 	add	r10,r10,r19
8112356c:	0013883a 	mov	r9,zero
81123570:	003fb706 	br	81123450 <__reset+0xfb103450>
81123574:	b00d883a 	mov	r6,r22
81123578:	900b883a 	mov	r5,r18
8112357c:	a809883a 	mov	r4,r21
81123580:	1123d440 	call	81123d44 <strncmp>
81123584:	10006426 	beq	r2,zero,81123718 <__gethex+0x470>
81123588:	a8800003 	ldbu	r2,0(r21)
8112358c:	a821883a 	mov	r16,r21
81123590:	10803fcc 	andi	r2,r2,255
81123594:	01001404 	movi	r4,80
81123598:	11001126 	beq	r2,r4,811235e0 <__gethex+0x338>
8112359c:	01001c04 	movi	r4,112
811235a0:	11000f26 	beq	r2,r4,811235e0 <__gethex+0x338>
811235a4:	9c000015 	stw	r16,0(r19)
811235a8:	8800831e 	bne	r17,zero,811237b8 <__gethex+0x510>
811235ac:	00800184 	movi	r2,6
811235b0:	dfc01417 	ldw	ra,80(sp)
811235b4:	df001317 	ldw	fp,76(sp)
811235b8:	ddc01217 	ldw	r23,72(sp)
811235bc:	dd801117 	ldw	r22,68(sp)
811235c0:	dd401017 	ldw	r21,64(sp)
811235c4:	dd000f17 	ldw	r20,60(sp)
811235c8:	dcc00e17 	ldw	r19,56(sp)
811235cc:	dc800d17 	ldw	r18,52(sp)
811235d0:	dc400c17 	ldw	r17,48(sp)
811235d4:	dc000b17 	ldw	r16,44(sp)
811235d8:	dec01504 	addi	sp,sp,84
811235dc:	f800283a 	ret
811235e0:	002f883a 	mov	r23,zero
811235e4:	02800044 	movi	r10,1
811235e8:	80800043 	ldbu	r2,1(r16)
811235ec:	01400ac4 	movi	r5,43
811235f0:	11003fcc 	andi	r4,r2,255
811235f4:	21406e26 	beq	r4,r5,811237b0 <__gethex+0x508>
811235f8:	01400b44 	movi	r5,45
811235fc:	21404226 	beq	r4,r5,81123708 <__gethex+0x460>
81123600:	81400044 	addi	r5,r16,1
81123604:	000d883a 	mov	r6,zero
81123608:	10803fcc 	andi	r2,r2,255
8112360c:	a085883a 	add	r2,r20,r2
81123610:	11000003 	ldbu	r4,0(r2)
81123614:	03000604 	movi	r12,24
81123618:	20bfffc4 	addi	r2,r4,-1
8112361c:	10803fcc 	andi	r2,r2,255
81123620:	60bf6d36 	bltu	r12,r2,811233d8 <__reset+0xfb1033d8>
81123624:	2ac00043 	ldbu	r11,1(r5)
81123628:	20803fcc 	andi	r2,r4,255
8112362c:	01204534 	movhi	r4,33044
81123630:	2139ae04 	addi	r4,r4,-6472
81123634:	22c9883a 	add	r4,r4,r11
81123638:	23400003 	ldbu	r13,0(r4)
8112363c:	10bffc04 	addi	r2,r2,-16
81123640:	29400044 	addi	r5,r5,1
81123644:	693fffc4 	addi	r4,r13,-1
81123648:	21003fcc 	andi	r4,r4,255
8112364c:	6b403fcc 	andi	r13,r13,255
81123650:	61000b36 	bltu	r12,r4,81123680 <__gethex+0x3d8>
81123654:	29400044 	addi	r5,r5,1
81123658:	29000003 	ldbu	r4,0(r5)
8112365c:	108002a4 	muli	r2,r2,10
81123660:	a109883a 	add	r4,r20,r4
81123664:	22c00003 	ldbu	r11,0(r4)
81123668:	1345883a 	add	r2,r2,r13
8112366c:	10bffc04 	addi	r2,r2,-16
81123670:	593fffc4 	addi	r4,r11,-1
81123674:	21003fcc 	andi	r4,r4,255
81123678:	5b403fcc 	andi	r13,r11,255
8112367c:	613ff52e 	bgeu	r12,r4,81123654 <__reset+0xfb103654>
81123680:	30000126 	beq	r6,zero,81123688 <__gethex+0x3e0>
81123684:	0085c83a 	sub	r2,zero,r2
81123688:	8039883a 	mov	fp,r16
8112368c:	b8af883a 	add	r23,r23,r2
81123690:	2821883a 	mov	r16,r5
81123694:	003f5106 	br	811233dc <__reset+0xfb1033dc>
81123698:	80800217 	ldw	r2,8(r16)
8112369c:	e080f00e 	bge	fp,r2,81123a60 <__gethex+0x7b8>
811236a0:	e007883a 	mov	r3,fp
811236a4:	18800144 	addi	r2,r3,5
811236a8:	1085883a 	add	r2,r2,r2
811236ac:	18c00044 	addi	r3,r3,1
811236b0:	1085883a 	add	r2,r2,r2
811236b4:	8085883a 	add	r2,r16,r2
811236b8:	80c00415 	stw	r3,16(r16)
811236bc:	01000044 	movi	r4,1
811236c0:	11000015 	stw	r4,0(r2)
811236c4:	00800084 	movi	r2,2
811236c8:	8880d826 	beq	r17,r2,81123a2c <__gethex+0x784>
811236cc:	e0c0ac0e 	bge	fp,r3,81123980 <__gethex+0x6d8>
811236d0:	01400044 	movi	r5,1
811236d4:	8009883a 	mov	r4,r16
811236d8:	11231a80 	call	811231a8 <rshift>
811236dc:	d8c00017 	ldw	r3,0(sp)
811236e0:	bdc00044 	addi	r23,r23,1
811236e4:	18800217 	ldw	r2,8(r3)
811236e8:	15c0a70e 	bge	r2,r23,81123988 <__gethex+0x6e0>
811236ec:	d9000117 	ldw	r4,4(sp)
811236f0:	800b883a 	mov	r5,r16
811236f4:	111c9400 	call	8111c940 <_Bfree>
811236f8:	d9001517 	ldw	r4,84(sp)
811236fc:	008028c4 	movi	r2,163
81123700:	20000015 	stw	zero,0(r4)
81123704:	003faa06 	br	811235b0 <__reset+0xfb1035b0>
81123708:	01800044 	movi	r6,1
8112370c:	80800083 	ldbu	r2,2(r16)
81123710:	81400084 	addi	r5,r16,2
81123714:	003fbc06 	br	81123608 <__reset+0xfb103608>
81123718:	ada1883a 	add	r16,r21,r22
8112371c:	81000003 	ldbu	r4,0(r16)
81123720:	21403fcc 	andi	r5,r4,255
81123724:	a145883a 	add	r2,r20,r5
81123728:	10800003 	ldbu	r2,0(r2)
8112372c:	11803fcc 	andi	r6,r2,255
81123730:	30004f26 	beq	r6,zero,81123870 <__gethex+0x5c8>
81123734:	00c00c04 	movi	r3,48
81123738:	802b883a 	mov	r21,r16
8112373c:	28c0061e 	bne	r5,r3,81123758 <__gethex+0x4b0>
81123740:	2809883a 	mov	r4,r5
81123744:	ad400044 	addi	r21,r21,1
81123748:	a8800003 	ldbu	r2,0(r21)
8112374c:	113ffd26 	beq	r2,r4,81123744 <__reset+0xfb103744>
81123750:	a085883a 	add	r2,r20,r2
81123754:	10800003 	ldbu	r2,0(r2)
81123758:	10803fcc 	andi	r2,r2,255
8112375c:	1015003a 	cmpeq	r10,r2,zero
81123760:	802f883a 	mov	r23,r16
81123764:	04400044 	movi	r17,1
81123768:	003eff06 	br	81123368 <__reset+0xfb103368>
8112376c:	04400044 	movi	r17,1
81123770:	98000926 	beq	r19,zero,81123798 <__gethex+0x4f0>
81123774:	d8c00017 	ldw	r3,0(sp)
81123778:	18800317 	ldw	r2,12(r3)
8112377c:	00c00084 	movi	r3,2
81123780:	10c06826 	beq	r2,r3,81123924 <__gethex+0x67c>
81123784:	00c000c4 	movi	r3,3
81123788:	10c06a26 	beq	r2,r3,81123934 <__gethex+0x68c>
8112378c:	00c00044 	movi	r3,1
81123790:	10c08d26 	beq	r2,r3,811239c8 <__gethex+0x720>
81123794:	8c400414 	ori	r17,r17,16
81123798:	d9001517 	ldw	r4,84(sp)
8112379c:	d8c00417 	ldw	r3,16(sp)
811237a0:	8805883a 	mov	r2,r17
811237a4:	24000015 	stw	r16,0(r4)
811237a8:	1dc00015 	stw	r23,0(r3)
811237ac:	003f8006 	br	811235b0 <__reset+0xfb1035b0>
811237b0:	000d883a 	mov	r6,zero
811237b4:	003fd506 	br	8112370c <__reset+0xfb10370c>
811237b8:	0005883a 	mov	r2,zero
811237bc:	003f7c06 	br	811235b0 <__reset+0xfb1035b0>
811237c0:	14a3c83a 	sub	r17,r2,r18
811237c4:	880b883a 	mov	r5,r17
811237c8:	8009883a 	mov	r4,r16
811237cc:	111d8600 	call	8111d860 <__any_on>
811237d0:	10002926 	beq	r2,zero,81123878 <__gethex+0x5d0>
811237d4:	897fffc4 	addi	r5,r17,-1
811237d8:	2807d17a 	srai	r3,r5,5
811237dc:	d8800217 	ldw	r2,8(sp)
811237e0:	290007cc 	andi	r4,r5,31
811237e4:	18c7883a 	add	r3,r3,r3
811237e8:	18c7883a 	add	r3,r3,r3
811237ec:	04c00044 	movi	r19,1
811237f0:	10c7883a 	add	r3,r2,r3
811237f4:	9908983a 	sll	r4,r19,r4
811237f8:	18c00017 	ldw	r3,0(r3)
811237fc:	20c6703a 	and	r3,r4,r3
81123800:	18000626 	beq	r3,zero,8112381c <__gethex+0x574>
81123804:	99407b0e 	bge	r19,r5,811239f4 <__gethex+0x74c>
81123808:	897fff84 	addi	r5,r17,-2
8112380c:	8009883a 	mov	r4,r16
81123810:	111d8600 	call	8111d860 <__any_on>
81123814:	10007726 	beq	r2,zero,811239f4 <__gethex+0x74c>
81123818:	04c000c4 	movi	r19,3
8112381c:	880b883a 	mov	r5,r17
81123820:	8009883a 	mov	r4,r16
81123824:	11231a80 	call	811231a8 <rshift>
81123828:	bc6f883a 	add	r23,r23,r17
8112382c:	003f1f06 	br	811234ac <__reset+0xfb1034ac>
81123830:	002f883a 	mov	r23,zero
81123834:	003ee306 	br	811233c4 <__reset+0xfb1033c4>
81123838:	d9000117 	ldw	r4,4(sp)
8112383c:	90a3c83a 	sub	r17,r18,r2
81123840:	800b883a 	mov	r5,r16
81123844:	880d883a 	mov	r6,r17
81123848:	111d0400 	call	8111d040 <__lshift>
8112384c:	10c00504 	addi	r3,r2,20
81123850:	1021883a 	mov	r16,r2
81123854:	bc6fc83a 	sub	r23,r23,r17
81123858:	d8c00215 	stw	r3,8(sp)
8112385c:	0027883a 	mov	r19,zero
81123860:	003f1206 	br	811234ac <__reset+0xfb1034ac>
81123864:	1d400084 	addi	r21,r3,2
81123868:	0023883a 	mov	r17,zero
8112386c:	003eb406 	br	81123340 <__reset+0xfb103340>
81123870:	2005883a 	mov	r2,r4
81123874:	003f4606 	br	81123590 <__reset+0xfb103590>
81123878:	0027883a 	mov	r19,zero
8112387c:	003fe706 	br	8112381c <__reset+0xfb10381c>
81123880:	bc7fffc4 	addi	r17,r23,-1
81123884:	9800421e 	bne	r19,zero,81123990 <__gethex+0x6e8>
81123888:	88000426 	beq	r17,zero,8112389c <__gethex+0x5f4>
8112388c:	880b883a 	mov	r5,r17
81123890:	8009883a 	mov	r4,r16
81123894:	111d8600 	call	8111d860 <__any_on>
81123898:	1027883a 	mov	r19,r2
8112389c:	8805d17a 	srai	r2,r17,5
811238a0:	d8c00217 	ldw	r3,8(sp)
811238a4:	8c4007cc 	andi	r17,r17,31
811238a8:	1085883a 	add	r2,r2,r2
811238ac:	1085883a 	add	r2,r2,r2
811238b0:	1885883a 	add	r2,r3,r2
811238b4:	00c00044 	movi	r3,1
811238b8:	1c62983a 	sll	r17,r3,r17
811238bc:	10800017 	ldw	r2,0(r2)
811238c0:	8884703a 	and	r2,r17,r2
811238c4:	10000126 	beq	r2,zero,811238cc <__gethex+0x624>
811238c8:	9cc00094 	ori	r19,r19,2
811238cc:	b80b883a 	mov	r5,r23
811238d0:	8009883a 	mov	r4,r16
811238d4:	11231a80 	call	811231a8 <rshift>
811238d8:	d8c00017 	ldw	r3,0(sp)
811238dc:	95e5c83a 	sub	r18,r18,r23
811238e0:	04400084 	movi	r17,2
811238e4:	1dc00117 	ldw	r23,4(r3)
811238e8:	003fa106 	br	81123770 <__reset+0xfb103770>
811238ec:	85af883a 	add	r23,r16,r22
811238f0:	b8800003 	ldbu	r2,0(r23)
811238f4:	b821883a 	mov	r16,r23
811238f8:	11003fcc 	andi	r4,r2,255
811238fc:	a109883a 	add	r4,r20,r4
81123900:	21000003 	ldbu	r4,0(r4)
81123904:	203eaa26 	beq	r4,zero,811233b0 <__reset+0xfb1033b0>
81123908:	84000044 	addi	r16,r16,1
8112390c:	80800003 	ldbu	r2,0(r16)
81123910:	11003fcc 	andi	r4,r2,255
81123914:	a109883a 	add	r4,r20,r4
81123918:	21000003 	ldbu	r4,0(r4)
8112391c:	203ffa1e 	bne	r4,zero,81123908 <__reset+0xfb103908>
81123920:	003ea306 	br	811233b0 <__reset+0xfb1033b0>
81123924:	d9001617 	ldw	r4,88(sp)
81123928:	00800044 	movi	r2,1
8112392c:	1109c83a 	sub	r4,r2,r4
81123930:	d9001615 	stw	r4,88(sp)
81123934:	d8801617 	ldw	r2,88(sp)
81123938:	103f9626 	beq	r2,zero,81123794 <__reset+0xfb103794>
8112393c:	87000417 	ldw	fp,16(r16)
81123940:	d9800217 	ldw	r6,8(sp)
81123944:	013fffc4 	movi	r4,-1
81123948:	e727883a 	add	r19,fp,fp
8112394c:	9ce7883a 	add	r19,r19,r19
81123950:	3005883a 	mov	r2,r6
81123954:	34cb883a 	add	r5,r6,r19
81123958:	00000306 	br	81123968 <__gethex+0x6c0>
8112395c:	10000015 	stw	zero,0(r2)
81123960:	10800104 	addi	r2,r2,4
81123964:	117f4c2e 	bgeu	r2,r5,81123698 <__reset+0xfb103698>
81123968:	10c00017 	ldw	r3,0(r2)
8112396c:	193ffb26 	beq	r3,r4,8112395c <__reset+0xfb10395c>
81123970:	18c00044 	addi	r3,r3,1
81123974:	10c00015 	stw	r3,0(r2)
81123978:	00800084 	movi	r2,2
8112397c:	88802b26 	beq	r17,r2,81123a2c <__gethex+0x784>
81123980:	948007cc 	andi	r18,r18,31
81123984:	90002f1e 	bne	r18,zero,81123a44 <__gethex+0x79c>
81123988:	04400844 	movi	r17,33
8112398c:	003f8206 	br	81123798 <__reset+0xfb103798>
81123990:	04c00044 	movi	r19,1
81123994:	003fc106 	br	8112389c <__reset+0xfb10389c>
81123998:	d8c01617 	ldw	r3,88(sp)
8112399c:	183ed226 	beq	r3,zero,811234e8 <__reset+0xfb1034e8>
811239a0:	d8c00417 	ldw	r3,16(sp)
811239a4:	d9001517 	ldw	r4,84(sp)
811239a8:	18800015 	stw	r2,0(r3)
811239ac:	d8c00217 	ldw	r3,8(sp)
811239b0:	00800044 	movi	r2,1
811239b4:	80800415 	stw	r2,16(r16)
811239b8:	18800015 	stw	r2,0(r3)
811239bc:	24000015 	stw	r16,0(r4)
811239c0:	00801884 	movi	r2,98
811239c4:	003efa06 	br	811235b0 <__reset+0xfb1035b0>
811239c8:	9880008c 	andi	r2,r19,2
811239cc:	103f7126 	beq	r2,zero,81123794 <__reset+0xfb103794>
811239d0:	d8c00217 	ldw	r3,8(sp)
811239d4:	18800017 	ldw	r2,0(r3)
811239d8:	9884b03a 	or	r2,r19,r2
811239dc:	1080004c 	andi	r2,r2,1
811239e0:	103fd61e 	bne	r2,zero,8112393c <__reset+0xfb10393c>
811239e4:	003f6b06 	br	81123794 <__reset+0xfb103794>
811239e8:	da800217 	ldw	r10,8(sp)
811239ec:	0013883a 	mov	r9,zero
811239f0:	003e9f06 	br	81123470 <__reset+0xfb103470>
811239f4:	04c00084 	movi	r19,2
811239f8:	003f8806 	br	8112381c <__reset+0xfb10381c>
811239fc:	d9001617 	ldw	r4,88(sp)
81123a00:	203fe726 	beq	r4,zero,811239a0 <__reset+0xfb1039a0>
81123a04:	003eb806 	br	811234e8 <__reset+0xfb1034e8>
81123a08:	95feb71e 	bne	r18,r23,811234e8 <__reset+0xfb1034e8>
81123a0c:	1cbfe40e 	bge	r3,r18,811239a0 <__reset+0xfb1039a0>
81123a10:	917fffc4 	addi	r5,r18,-1
81123a14:	8009883a 	mov	r4,r16
81123a18:	111d8600 	call	8111d860 <__any_on>
81123a1c:	103eb226 	beq	r2,zero,811234e8 <__reset+0xfb1034e8>
81123a20:	d8c00017 	ldw	r3,0(sp)
81123a24:	18800117 	ldw	r2,4(r3)
81123a28:	003fdd06 	br	811239a0 <__reset+0xfb1039a0>
81123a2c:	d8c00017 	ldw	r3,0(sp)
81123a30:	18800017 	ldw	r2,0(r3)
81123a34:	10bfffc4 	addi	r2,r2,-1
81123a38:	90801c26 	beq	r18,r2,81123aac <__gethex+0x804>
81123a3c:	04400884 	movi	r17,34
81123a40:	003f5506 	br	81123798 <__reset+0xfb103798>
81123a44:	34c5883a 	add	r2,r6,r19
81123a48:	113fff17 	ldw	r4,-4(r2)
81123a4c:	111cb9c0 	call	8111cb9c <__hi0bits>
81123a50:	00c00804 	movi	r3,32
81123a54:	1ca5c83a 	sub	r18,r3,r18
81123a58:	14bfcb0e 	bge	r2,r18,81123988 <__reset+0xfb103988>
81123a5c:	003f1c06 	br	811236d0 <__reset+0xfb1036d0>
81123a60:	81400117 	ldw	r5,4(r16)
81123a64:	d9000117 	ldw	r4,4(sp)
81123a68:	29400044 	addi	r5,r5,1
81123a6c:	111c8900 	call	8111c890 <_Balloc>
81123a70:	81800417 	ldw	r6,16(r16)
81123a74:	81400304 	addi	r5,r16,12
81123a78:	11000304 	addi	r4,r2,12
81123a7c:	31800084 	addi	r6,r6,2
81123a80:	318d883a 	add	r6,r6,r6
81123a84:	318d883a 	add	r6,r6,r6
81123a88:	1029883a 	mov	r20,r2
81123a8c:	111297c0 	call	8111297c <memcpy>
81123a90:	d9000117 	ldw	r4,4(sp)
81123a94:	800b883a 	mov	r5,r16
81123a98:	a021883a 	mov	r16,r20
81123a9c:	111c9400 	call	8111c940 <_Bfree>
81123aa0:	a0c00417 	ldw	r3,16(r20)
81123aa4:	a1800504 	addi	r6,r20,20
81123aa8:	003efe06 	br	811236a4 <__reset+0xfb1036a4>
81123aac:	9005d17a 	srai	r2,r18,5
81123ab0:	944007cc 	andi	r17,r18,31
81123ab4:	1085883a 	add	r2,r2,r2
81123ab8:	1085883a 	add	r2,r2,r2
81123abc:	3087883a 	add	r3,r6,r2
81123ac0:	00800044 	movi	r2,1
81123ac4:	1462983a 	sll	r17,r2,r17
81123ac8:	18800017 	ldw	r2,0(r3)
81123acc:	8884703a 	and	r2,r17,r2
81123ad0:	1022c03a 	cmpne	r17,r2,zero
81123ad4:	00800884 	movi	r2,34
81123ad8:	1463c83a 	sub	r17,r2,r17
81123adc:	003f2e06 	br	81123798 <__reset+0xfb103798>

81123ae0 <__hexnan>:
81123ae0:	defff904 	addi	sp,sp,-28
81123ae4:	de00012e 	bgeu	sp,et,81123aec <__hexnan+0xc>
81123ae8:	003b68fa 	trap	3
81123aec:	dc800215 	stw	r18,8(sp)
81123af0:	2c800017 	ldw	r18,0(r5)
81123af4:	dfc00615 	stw	ra,24(sp)
81123af8:	dd400515 	stw	r21,20(sp)
81123afc:	901fd17a 	srai	r15,r18,5
81123b00:	dd000415 	stw	r20,16(sp)
81123b04:	dcc00315 	stw	r19,12(sp)
81123b08:	7bdf883a 	add	r15,r15,r15
81123b0c:	7bdf883a 	add	r15,r15,r15
81123b10:	dc400115 	stw	r17,4(sp)
81123b14:	dc000015 	stw	r16,0(sp)
81123b18:	948007cc 	andi	r18,r18,31
81123b1c:	33df883a 	add	r15,r6,r15
81123b20:	90000126 	beq	r18,zero,81123b28 <__hexnan+0x48>
81123b24:	7bc00104 	addi	r15,r15,4
81123b28:	22000017 	ldw	r8,0(r4)
81123b2c:	7affff04 	addi	r11,r15,-4
81123b30:	03a04534 	movhi	r14,33044
81123b34:	783fff15 	stw	zero,-4(r15)
81123b38:	581b883a 	mov	r13,r11
81123b3c:	580b883a 	mov	r5,r11
81123b40:	000f883a 	mov	r7,zero
81123b44:	003f883a 	mov	ra,zero
81123b48:	0019883a 	mov	r12,zero
81123b4c:	73b9ae04 	addi	r14,r14,-6472
81123b50:	04400204 	movi	r17,8
81123b54:	04000804 	movi	r16,32
81123b58:	04c001c4 	movi	r19,7
81123b5c:	42000044 	addi	r8,r8,1
81123b60:	40c00003 	ldbu	r3,0(r8)
81123b64:	18001d26 	beq	r3,zero,81123bdc <__hexnan+0xfc>
81123b68:	70c5883a 	add	r2,r14,r3
81123b6c:	10800003 	ldbu	r2,0(r2)
81123b70:	12403fcc 	andi	r9,r2,255
81123b74:	4800301e 	bne	r9,zero,81123c38 <__hexnan+0x158>
81123b78:	80c04236 	bltu	r16,r3,81123c84 <__hexnan+0x1a4>
81123b7c:	fb3ff70e 	bge	ra,r12,81123b5c <__reset+0xfb103b5c>
81123b80:	2b40112e 	bgeu	r5,r13,81123bc8 <__hexnan+0xe8>
81123b84:	99c01016 	blt	r19,r7,81123bc8 <__hexnan+0xe8>
81123b88:	89e9c83a 	sub	r20,r17,r7
81123b8c:	a529883a 	add	r20,r20,r20
81123b90:	2a800017 	ldw	r10,0(r5)
81123b94:	a529883a 	add	r20,r20,r20
81123b98:	852bc83a 	sub	r21,r16,r20
81123b9c:	28c00104 	addi	r3,r5,4
81123ba0:	2805883a 	mov	r2,r5
81123ba4:	19c00017 	ldw	r7,0(r3)
81123ba8:	10800104 	addi	r2,r2,4
81123bac:	18c00104 	addi	r3,r3,4
81123bb0:	3d52983a 	sll	r9,r7,r21
81123bb4:	4a92b03a 	or	r9,r9,r10
81123bb8:	3d14d83a 	srl	r10,r7,r20
81123bbc:	127fff15 	stw	r9,-4(r2)
81123bc0:	1abfff15 	stw	r10,-4(r3)
81123bc4:	137ff736 	bltu	r2,r13,81123ba4 <__reset+0xfb103ba4>
81123bc8:	31402836 	bltu	r6,r5,81123c6c <__hexnan+0x18c>
81123bcc:	42000044 	addi	r8,r8,1
81123bd0:	40c00003 	ldbu	r3,0(r8)
81123bd4:	01c00204 	movi	r7,8
81123bd8:	183fe31e 	bne	r3,zero,81123b68 <__reset+0xfb103b68>
81123bdc:	60002b26 	beq	r12,zero,81123c8c <__hexnan+0x1ac>
81123be0:	2b40022e 	bgeu	r5,r13,81123bec <__hexnan+0x10c>
81123be4:	008001c4 	movi	r2,7
81123be8:	11c0430e 	bge	r2,r7,81123cf8 <__hexnan+0x218>
81123bec:	3140312e 	bgeu	r6,r5,81123cb4 <__hexnan+0x1d4>
81123bf0:	3007883a 	mov	r3,r6
81123bf4:	29000017 	ldw	r4,0(r5)
81123bf8:	18800104 	addi	r2,r3,4
81123bfc:	29400104 	addi	r5,r5,4
81123c00:	19000015 	stw	r4,0(r3)
81123c04:	1007883a 	mov	r3,r2
81123c08:	597ffa2e 	bgeu	r11,r5,81123bf4 <__reset+0xfb103bf4>
81123c0c:	10000015 	stw	zero,0(r2)
81123c10:	10800104 	addi	r2,r2,4
81123c14:	58bffd2e 	bgeu	r11,r2,81123c0c <__reset+0xfb103c0c>
81123c18:	78bfff17 	ldw	r2,-4(r15)
81123c1c:	1000041e 	bne	r2,zero,81123c30 <__hexnan+0x150>
81123c20:	32c02d26 	beq	r6,r11,81123cd8 <__hexnan+0x1f8>
81123c24:	5affff04 	addi	r11,r11,-4
81123c28:	58800017 	ldw	r2,0(r11)
81123c2c:	103ffc26 	beq	r2,zero,81123c20 <__reset+0xfb103c20>
81123c30:	00800144 	movi	r2,5
81123c34:	00001606 	br	81123c90 <__hexnan+0x1b0>
81123c38:	39c00044 	addi	r7,r7,1
81123c3c:	63000044 	addi	r12,r12,1
81123c40:	89c0040e 	bge	r17,r7,81123c54 <__hexnan+0x174>
81123c44:	317fc52e 	bgeu	r6,r5,81123b5c <__reset+0xfb103b5c>
81123c48:	283fff15 	stw	zero,-4(r5)
81123c4c:	01c00044 	movi	r7,1
81123c50:	297fff04 	addi	r5,r5,-4
81123c54:	28c00017 	ldw	r3,0(r5)
81123c58:	108003cc 	andi	r2,r2,15
81123c5c:	1806913a 	slli	r3,r3,4
81123c60:	1884b03a 	or	r2,r3,r2
81123c64:	28800015 	stw	r2,0(r5)
81123c68:	003fbc06 	br	81123b5c <__reset+0xfb103b5c>
81123c6c:	2b7fff04 	addi	r13,r5,-4
81123c70:	283fff15 	stw	zero,-4(r5)
81123c74:	603f883a 	mov	ra,r12
81123c78:	680b883a 	mov	r5,r13
81123c7c:	000f883a 	mov	r7,zero
81123c80:	003fb606 	br	81123b5c <__reset+0xfb103b5c>
81123c84:	00800a44 	movi	r2,41
81123c88:	18801726 	beq	r3,r2,81123ce8 <__hexnan+0x208>
81123c8c:	00800104 	movi	r2,4
81123c90:	dfc00617 	ldw	ra,24(sp)
81123c94:	dd400517 	ldw	r21,20(sp)
81123c98:	dd000417 	ldw	r20,16(sp)
81123c9c:	dcc00317 	ldw	r19,12(sp)
81123ca0:	dc800217 	ldw	r18,8(sp)
81123ca4:	dc400117 	ldw	r17,4(sp)
81123ca8:	dc000017 	ldw	r16,0(sp)
81123cac:	dec00704 	addi	sp,sp,28
81123cb0:	f800283a 	ret
81123cb4:	903fd826 	beq	r18,zero,81123c18 <__reset+0xfb103c18>
81123cb8:	00c00804 	movi	r3,32
81123cbc:	1ca5c83a 	sub	r18,r3,r18
81123cc0:	00ffffc4 	movi	r3,-1
81123cc4:	78bfff17 	ldw	r2,-4(r15)
81123cc8:	1c86d83a 	srl	r3,r3,r18
81123ccc:	1884703a 	and	r2,r3,r2
81123cd0:	78bfff15 	stw	r2,-4(r15)
81123cd4:	003fd106 	br	81123c1c <__reset+0xfb103c1c>
81123cd8:	00800044 	movi	r2,1
81123cdc:	58800015 	stw	r2,0(r11)
81123ce0:	00800144 	movi	r2,5
81123ce4:	003fea06 	br	81123c90 <__reset+0xfb103c90>
81123ce8:	42000044 	addi	r8,r8,1
81123cec:	22000015 	stw	r8,0(r4)
81123cf0:	603fbb1e 	bne	r12,zero,81123be0 <__reset+0xfb103be0>
81123cf4:	003fe506 	br	81123c8c <__reset+0xfb103c8c>
81123cf8:	02400204 	movi	r9,8
81123cfc:	49d3c83a 	sub	r9,r9,r7
81123d00:	4a53883a 	add	r9,r9,r9
81123d04:	2a000017 	ldw	r8,0(r5)
81123d08:	4a53883a 	add	r9,r9,r9
81123d0c:	02800804 	movi	r10,32
81123d10:	5255c83a 	sub	r10,r10,r9
81123d14:	28c00104 	addi	r3,r5,4
81123d18:	2805883a 	mov	r2,r5
81123d1c:	19c00017 	ldw	r7,0(r3)
81123d20:	10800104 	addi	r2,r2,4
81123d24:	18c00104 	addi	r3,r3,4
81123d28:	3a88983a 	sll	r4,r7,r10
81123d2c:	2208b03a 	or	r4,r4,r8
81123d30:	3a50d83a 	srl	r8,r7,r9
81123d34:	113fff15 	stw	r4,-4(r2)
81123d38:	1a3fff15 	stw	r8,-4(r3)
81123d3c:	137ff736 	bltu	r2,r13,81123d1c <__reset+0xfb103d1c>
81123d40:	003faa06 	br	81123bec <__reset+0xfb103bec>

81123d44 <strncmp>:
81123d44:	30003126 	beq	r6,zero,81123e0c <strncmp+0xc8>
81123d48:	2144b03a 	or	r2,r4,r5
81123d4c:	108000cc 	andi	r2,r2,3
81123d50:	10001e1e 	bne	r2,zero,81123dcc <strncmp+0x88>
81123d54:	024000c4 	movi	r9,3
81123d58:	49801c2e 	bgeu	r9,r6,81123dcc <strncmp+0x88>
81123d5c:	20800017 	ldw	r2,0(r4)
81123d60:	28c00017 	ldw	r3,0(r5)
81123d64:	10c0191e 	bne	r2,r3,81123dcc <strncmp+0x88>
81123d68:	31bfff04 	addi	r6,r6,-4
81123d6c:	30002726 	beq	r6,zero,81123e0c <strncmp+0xc8>
81123d70:	02ffbff4 	movhi	r11,65279
81123d74:	5affbfc4 	addi	r11,r11,-257
81123d78:	0086303a 	nor	r3,zero,r2
81123d7c:	02a02074 	movhi	r10,32897
81123d80:	12c5883a 	add	r2,r2,r11
81123d84:	52a02004 	addi	r10,r10,-32640
81123d88:	10c4703a 	and	r2,r2,r3
81123d8c:	1284703a 	and	r2,r2,r10
81123d90:	10000b26 	beq	r2,zero,81123dc0 <strncmp+0x7c>
81123d94:	00001d06 	br	81123e0c <strncmp+0xc8>
81123d98:	20c00017 	ldw	r3,0(r4)
81123d9c:	29c00017 	ldw	r7,0(r5)
81123da0:	1ad1883a 	add	r8,r3,r11
81123da4:	00c4303a 	nor	r2,zero,r3
81123da8:	4084703a 	and	r2,r8,r2
81123dac:	1284703a 	and	r2,r2,r10
81123db0:	19c0061e 	bne	r3,r7,81123dcc <strncmp+0x88>
81123db4:	31bfff04 	addi	r6,r6,-4
81123db8:	30001426 	beq	r6,zero,81123e0c <strncmp+0xc8>
81123dbc:	1000131e 	bne	r2,zero,81123e0c <strncmp+0xc8>
81123dc0:	21000104 	addi	r4,r4,4
81123dc4:	29400104 	addi	r5,r5,4
81123dc8:	49bff336 	bltu	r9,r6,81123d98 <__reset+0xfb103d98>
81123dcc:	28800007 	ldb	r2,0(r5)
81123dd0:	20c00007 	ldb	r3,0(r4)
81123dd4:	31bfffc4 	addi	r6,r6,-1
81123dd8:	10c0081e 	bne	r2,r3,81123dfc <strncmp+0xb8>
81123ddc:	30000b26 	beq	r6,zero,81123e0c <strncmp+0xc8>
81123de0:	10000a26 	beq	r2,zero,81123e0c <strncmp+0xc8>
81123de4:	21000044 	addi	r4,r4,1
81123de8:	29400044 	addi	r5,r5,1
81123dec:	20800007 	ldb	r2,0(r4)
81123df0:	28c00007 	ldb	r3,0(r5)
81123df4:	31bfffc4 	addi	r6,r6,-1
81123df8:	10fff826 	beq	r2,r3,81123ddc <__reset+0xfb103ddc>
81123dfc:	20800003 	ldbu	r2,0(r4)
81123e00:	28c00003 	ldbu	r3,0(r5)
81123e04:	10c5c83a 	sub	r2,r2,r3
81123e08:	f800283a 	ret
81123e0c:	0005883a 	mov	r2,zero
81123e10:	f800283a 	ret

81123e14 <__swbuf_r>:
81123e14:	defffb04 	addi	sp,sp,-20
81123e18:	de00012e 	bgeu	sp,et,81123e20 <__swbuf_r+0xc>
81123e1c:	003b68fa 	trap	3
81123e20:	dcc00315 	stw	r19,12(sp)
81123e24:	dc800215 	stw	r18,8(sp)
81123e28:	dc000015 	stw	r16,0(sp)
81123e2c:	dfc00415 	stw	ra,16(sp)
81123e30:	dc400115 	stw	r17,4(sp)
81123e34:	2025883a 	mov	r18,r4
81123e38:	2827883a 	mov	r19,r5
81123e3c:	3021883a 	mov	r16,r6
81123e40:	20000226 	beq	r4,zero,81123e4c <__swbuf_r+0x38>
81123e44:	20800e17 	ldw	r2,56(r4)
81123e48:	10004226 	beq	r2,zero,81123f54 <__swbuf_r+0x140>
81123e4c:	80800617 	ldw	r2,24(r16)
81123e50:	8100030b 	ldhu	r4,12(r16)
81123e54:	80800215 	stw	r2,8(r16)
81123e58:	2080020c 	andi	r2,r4,8
81123e5c:	10003626 	beq	r2,zero,81123f38 <__swbuf_r+0x124>
81123e60:	80c00417 	ldw	r3,16(r16)
81123e64:	18003426 	beq	r3,zero,81123f38 <__swbuf_r+0x124>
81123e68:	2088000c 	andi	r2,r4,8192
81123e6c:	9c403fcc 	andi	r17,r19,255
81123e70:	10001a26 	beq	r2,zero,81123edc <__swbuf_r+0xc8>
81123e74:	80800017 	ldw	r2,0(r16)
81123e78:	81000517 	ldw	r4,20(r16)
81123e7c:	10c7c83a 	sub	r3,r2,r3
81123e80:	1900200e 	bge	r3,r4,81123f04 <__swbuf_r+0xf0>
81123e84:	18c00044 	addi	r3,r3,1
81123e88:	81000217 	ldw	r4,8(r16)
81123e8c:	11400044 	addi	r5,r2,1
81123e90:	81400015 	stw	r5,0(r16)
81123e94:	213fffc4 	addi	r4,r4,-1
81123e98:	81000215 	stw	r4,8(r16)
81123e9c:	14c00005 	stb	r19,0(r2)
81123ea0:	80800517 	ldw	r2,20(r16)
81123ea4:	10c01e26 	beq	r2,r3,81123f20 <__swbuf_r+0x10c>
81123ea8:	8080030b 	ldhu	r2,12(r16)
81123eac:	1080004c 	andi	r2,r2,1
81123eb0:	10000226 	beq	r2,zero,81123ebc <__swbuf_r+0xa8>
81123eb4:	00800284 	movi	r2,10
81123eb8:	88801926 	beq	r17,r2,81123f20 <__swbuf_r+0x10c>
81123ebc:	8805883a 	mov	r2,r17
81123ec0:	dfc00417 	ldw	ra,16(sp)
81123ec4:	dcc00317 	ldw	r19,12(sp)
81123ec8:	dc800217 	ldw	r18,8(sp)
81123ecc:	dc400117 	ldw	r17,4(sp)
81123ed0:	dc000017 	ldw	r16,0(sp)
81123ed4:	dec00504 	addi	sp,sp,20
81123ed8:	f800283a 	ret
81123edc:	81401917 	ldw	r5,100(r16)
81123ee0:	00b7ffc4 	movi	r2,-8193
81123ee4:	21080014 	ori	r4,r4,8192
81123ee8:	2884703a 	and	r2,r5,r2
81123eec:	80801915 	stw	r2,100(r16)
81123ef0:	80800017 	ldw	r2,0(r16)
81123ef4:	8100030d 	sth	r4,12(r16)
81123ef8:	81000517 	ldw	r4,20(r16)
81123efc:	10c7c83a 	sub	r3,r2,r3
81123f00:	193fe016 	blt	r3,r4,81123e84 <__reset+0xfb103e84>
81123f04:	800b883a 	mov	r5,r16
81123f08:	9009883a 	mov	r4,r18
81123f0c:	111b02c0 	call	8111b02c <_fflush_r>
81123f10:	1000071e 	bne	r2,zero,81123f30 <__swbuf_r+0x11c>
81123f14:	80800017 	ldw	r2,0(r16)
81123f18:	00c00044 	movi	r3,1
81123f1c:	003fda06 	br	81123e88 <__reset+0xfb103e88>
81123f20:	800b883a 	mov	r5,r16
81123f24:	9009883a 	mov	r4,r18
81123f28:	111b02c0 	call	8111b02c <_fflush_r>
81123f2c:	103fe326 	beq	r2,zero,81123ebc <__reset+0xfb103ebc>
81123f30:	00bfffc4 	movi	r2,-1
81123f34:	003fe206 	br	81123ec0 <__reset+0xfb103ec0>
81123f38:	800b883a 	mov	r5,r16
81123f3c:	9009883a 	mov	r4,r18
81123f40:	11193b80 	call	811193b8 <__swsetup_r>
81123f44:	103ffa1e 	bne	r2,zero,81123f30 <__reset+0xfb103f30>
81123f48:	8100030b 	ldhu	r4,12(r16)
81123f4c:	80c00417 	ldw	r3,16(r16)
81123f50:	003fc506 	br	81123e68 <__reset+0xfb103e68>
81123f54:	111b4280 	call	8111b428 <__sinit>
81123f58:	003fbc06 	br	81123e4c <__reset+0xfb103e4c>

81123f5c <__swbuf>:
81123f5c:	00a04534 	movhi	r2,33044
81123f60:	10821504 	addi	r2,r2,2132
81123f64:	280d883a 	mov	r6,r5
81123f68:	200b883a 	mov	r5,r4
81123f6c:	11000017 	ldw	r4,0(r2)
81123f70:	1123e141 	jmpi	81123e14 <__swbuf_r>

81123f74 <_wcrtomb_r>:
81123f74:	defff604 	addi	sp,sp,-40
81123f78:	00a04534 	movhi	r2,33044
81123f7c:	de00012e 	bgeu	sp,et,81123f84 <_wcrtomb_r+0x10>
81123f80:	003b68fa 	trap	3
81123f84:	10821a04 	addi	r2,r2,2152
81123f88:	dc800815 	stw	r18,32(sp)
81123f8c:	dc400715 	stw	r17,28(sp)
81123f90:	dc000615 	stw	r16,24(sp)
81123f94:	dfc00915 	stw	ra,36(sp)
81123f98:	2021883a 	mov	r16,r4
81123f9c:	3823883a 	mov	r17,r7
81123fa0:	14800017 	ldw	r18,0(r2)
81123fa4:	28001426 	beq	r5,zero,81123ff8 <_wcrtomb_r+0x84>
81123fa8:	d9400415 	stw	r5,16(sp)
81123fac:	d9800515 	stw	r6,20(sp)
81123fb0:	111c3440 	call	8111c344 <__locale_charset>
81123fb4:	d9800517 	ldw	r6,20(sp)
81123fb8:	d9400417 	ldw	r5,16(sp)
81123fbc:	100f883a 	mov	r7,r2
81123fc0:	dc400015 	stw	r17,0(sp)
81123fc4:	8009883a 	mov	r4,r16
81123fc8:	903ee83a 	callr	r18
81123fcc:	00ffffc4 	movi	r3,-1
81123fd0:	10c0031e 	bne	r2,r3,81123fe0 <_wcrtomb_r+0x6c>
81123fd4:	88000015 	stw	zero,0(r17)
81123fd8:	00c02284 	movi	r3,138
81123fdc:	80c00015 	stw	r3,0(r16)
81123fe0:	dfc00917 	ldw	ra,36(sp)
81123fe4:	dc800817 	ldw	r18,32(sp)
81123fe8:	dc400717 	ldw	r17,28(sp)
81123fec:	dc000617 	ldw	r16,24(sp)
81123ff0:	dec00a04 	addi	sp,sp,40
81123ff4:	f800283a 	ret
81123ff8:	111c3440 	call	8111c344 <__locale_charset>
81123ffc:	100f883a 	mov	r7,r2
81124000:	dc400015 	stw	r17,0(sp)
81124004:	000d883a 	mov	r6,zero
81124008:	d9400104 	addi	r5,sp,4
8112400c:	8009883a 	mov	r4,r16
81124010:	903ee83a 	callr	r18
81124014:	003fed06 	br	81123fcc <__reset+0xfb103fcc>

81124018 <wcrtomb>:
81124018:	defff604 	addi	sp,sp,-40
8112401c:	00a04534 	movhi	r2,33044
81124020:	de00012e 	bgeu	sp,et,81124028 <wcrtomb+0x10>
81124024:	003b68fa 	trap	3
81124028:	10821504 	addi	r2,r2,2132
8112402c:	dc800615 	stw	r18,24(sp)
81124030:	dc400515 	stw	r17,20(sp)
81124034:	dfc00915 	stw	ra,36(sp)
81124038:	dd000815 	stw	r20,32(sp)
8112403c:	dcc00715 	stw	r19,28(sp)
81124040:	dc000415 	stw	r16,16(sp)
81124044:	3025883a 	mov	r18,r6
81124048:	14400017 	ldw	r17,0(r2)
8112404c:	20001926 	beq	r4,zero,811240b4 <wcrtomb+0x9c>
81124050:	00a04534 	movhi	r2,33044
81124054:	10821a04 	addi	r2,r2,2152
81124058:	15000017 	ldw	r20,0(r2)
8112405c:	2021883a 	mov	r16,r4
81124060:	2827883a 	mov	r19,r5
81124064:	111c3440 	call	8111c344 <__locale_charset>
81124068:	100f883a 	mov	r7,r2
8112406c:	dc800015 	stw	r18,0(sp)
81124070:	980d883a 	mov	r6,r19
81124074:	800b883a 	mov	r5,r16
81124078:	8809883a 	mov	r4,r17
8112407c:	a03ee83a 	callr	r20
81124080:	00ffffc4 	movi	r3,-1
81124084:	10c0031e 	bne	r2,r3,81124094 <wcrtomb+0x7c>
81124088:	90000015 	stw	zero,0(r18)
8112408c:	00c02284 	movi	r3,138
81124090:	88c00015 	stw	r3,0(r17)
81124094:	dfc00917 	ldw	ra,36(sp)
81124098:	dd000817 	ldw	r20,32(sp)
8112409c:	dcc00717 	ldw	r19,28(sp)
811240a0:	dc800617 	ldw	r18,24(sp)
811240a4:	dc400517 	ldw	r17,20(sp)
811240a8:	dc000417 	ldw	r16,16(sp)
811240ac:	dec00a04 	addi	sp,sp,40
811240b0:	f800283a 	ret
811240b4:	00a04534 	movhi	r2,33044
811240b8:	10821a04 	addi	r2,r2,2152
811240bc:	14000017 	ldw	r16,0(r2)
811240c0:	111c3440 	call	8111c344 <__locale_charset>
811240c4:	100f883a 	mov	r7,r2
811240c8:	dc800015 	stw	r18,0(sp)
811240cc:	000d883a 	mov	r6,zero
811240d0:	d9400104 	addi	r5,sp,4
811240d4:	8809883a 	mov	r4,r17
811240d8:	803ee83a 	callr	r16
811240dc:	003fe806 	br	81124080 <__reset+0xfb104080>

811240e0 <__ascii_wctomb>:
811240e0:	28000526 	beq	r5,zero,811240f8 <__ascii_wctomb+0x18>
811240e4:	00803fc4 	movi	r2,255
811240e8:	11800536 	bltu	r2,r6,81124100 <__ascii_wctomb+0x20>
811240ec:	29800005 	stb	r6,0(r5)
811240f0:	00800044 	movi	r2,1
811240f4:	f800283a 	ret
811240f8:	0005883a 	mov	r2,zero
811240fc:	f800283a 	ret
81124100:	00802284 	movi	r2,138
81124104:	20800015 	stw	r2,0(r4)
81124108:	00bfffc4 	movi	r2,-1
8112410c:	f800283a 	ret

81124110 <_wctomb_r>:
81124110:	00a04534 	movhi	r2,33044
81124114:	defff904 	addi	sp,sp,-28
81124118:	10821a04 	addi	r2,r2,2152
8112411c:	de00012e 	bgeu	sp,et,81124124 <_wctomb_r+0x14>
81124120:	003b68fa 	trap	3
81124124:	dfc00615 	stw	ra,24(sp)
81124128:	dc400515 	stw	r17,20(sp)
8112412c:	dc000415 	stw	r16,16(sp)
81124130:	3823883a 	mov	r17,r7
81124134:	14000017 	ldw	r16,0(r2)
81124138:	d9000115 	stw	r4,4(sp)
8112413c:	d9400215 	stw	r5,8(sp)
81124140:	d9800315 	stw	r6,12(sp)
81124144:	111c3440 	call	8111c344 <__locale_charset>
81124148:	d9800317 	ldw	r6,12(sp)
8112414c:	d9400217 	ldw	r5,8(sp)
81124150:	d9000117 	ldw	r4,4(sp)
81124154:	100f883a 	mov	r7,r2
81124158:	dc400015 	stw	r17,0(sp)
8112415c:	803ee83a 	callr	r16
81124160:	dfc00617 	ldw	ra,24(sp)
81124164:	dc400517 	ldw	r17,20(sp)
81124168:	dc000417 	ldw	r16,16(sp)
8112416c:	dec00704 	addi	sp,sp,28
81124170:	f800283a 	ret

81124174 <__fixunsdfsi>:
81124174:	defffd04 	addi	sp,sp,-12
81124178:	000d883a 	mov	r6,zero
8112417c:	01d07834 	movhi	r7,16864
81124180:	de00012e 	bgeu	sp,et,81124188 <__fixunsdfsi+0x14>
81124184:	003b68fa 	trap	3
81124188:	dc400115 	stw	r17,4(sp)
8112418c:	dc000015 	stw	r16,0(sp)
81124190:	dfc00215 	stw	ra,8(sp)
81124194:	2023883a 	mov	r17,r4
81124198:	2821883a 	mov	r16,r5
8112419c:	112628c0 	call	8112628c <__gedf2>
811241a0:	1000080e 	bge	r2,zero,811241c4 <__fixunsdfsi+0x50>
811241a4:	8809883a 	mov	r4,r17
811241a8:	800b883a 	mov	r5,r16
811241ac:	1126d600 	call	81126d60 <__fixdfsi>
811241b0:	dfc00217 	ldw	ra,8(sp)
811241b4:	dc400117 	ldw	r17,4(sp)
811241b8:	dc000017 	ldw	r16,0(sp)
811241bc:	dec00304 	addi	sp,sp,12
811241c0:	f800283a 	ret
811241c4:	000d883a 	mov	r6,zero
811241c8:	01d07834 	movhi	r7,16864
811241cc:	8809883a 	mov	r4,r17
811241d0:	800b883a 	mov	r5,r16
811241d4:	112645c0 	call	8112645c <__subdf3>
811241d8:	180b883a 	mov	r5,r3
811241dc:	1009883a 	mov	r4,r2
811241e0:	1126d600 	call	81126d60 <__fixdfsi>
811241e4:	00e00034 	movhi	r3,32768
811241e8:	10c5883a 	add	r2,r2,r3
811241ec:	003ff006 	br	811241b0 <__reset+0xfb1041b0>

811241f0 <__udivdi3>:
811241f0:	defff504 	addi	sp,sp,-44
811241f4:	de00012e 	bgeu	sp,et,811241fc <__udivdi3+0xc>
811241f8:	003b68fa 	trap	3
811241fc:	dcc00415 	stw	r19,16(sp)
81124200:	dc000115 	stw	r16,4(sp)
81124204:	dfc00a15 	stw	ra,40(sp)
81124208:	df000915 	stw	fp,36(sp)
8112420c:	ddc00815 	stw	r23,32(sp)
81124210:	dd800715 	stw	r22,28(sp)
81124214:	dd400615 	stw	r21,24(sp)
81124218:	dd000515 	stw	r20,20(sp)
8112421c:	dc800315 	stw	r18,12(sp)
81124220:	dc400215 	stw	r17,8(sp)
81124224:	2027883a 	mov	r19,r4
81124228:	2821883a 	mov	r16,r5
8112422c:	3800411e 	bne	r7,zero,81124334 <__udivdi3+0x144>
81124230:	3023883a 	mov	r17,r6
81124234:	2025883a 	mov	r18,r4
81124238:	2980522e 	bgeu	r5,r6,81124384 <__udivdi3+0x194>
8112423c:	00bfffd4 	movui	r2,65535
81124240:	282d883a 	mov	r22,r5
81124244:	1180a836 	bltu	r2,r6,811244e8 <__udivdi3+0x2f8>
81124248:	00803fc4 	movi	r2,255
8112424c:	1185803a 	cmpltu	r2,r2,r6
81124250:	100490fa 	slli	r2,r2,3
81124254:	3086d83a 	srl	r3,r6,r2
81124258:	01204534 	movhi	r4,33044
8112425c:	21382804 	addi	r4,r4,-8032
81124260:	20c7883a 	add	r3,r4,r3
81124264:	18c00003 	ldbu	r3,0(r3)
81124268:	1885883a 	add	r2,r3,r2
8112426c:	00c00804 	movi	r3,32
81124270:	1887c83a 	sub	r3,r3,r2
81124274:	18000526 	beq	r3,zero,8112428c <__udivdi3+0x9c>
81124278:	80e0983a 	sll	r16,r16,r3
8112427c:	9884d83a 	srl	r2,r19,r2
81124280:	30e2983a 	sll	r17,r6,r3
81124284:	98e4983a 	sll	r18,r19,r3
81124288:	142cb03a 	or	r22,r2,r16
8112428c:	882ad43a 	srli	r21,r17,16
81124290:	b009883a 	mov	r4,r22
81124294:	8d3fffcc 	andi	r20,r17,65535
81124298:	a80b883a 	mov	r5,r21
8112429c:	1124e0c0 	call	81124e0c <__umodsi3>
811242a0:	b009883a 	mov	r4,r22
811242a4:	a80b883a 	mov	r5,r21
811242a8:	1027883a 	mov	r19,r2
811242ac:	1124da80 	call	81124da8 <__udivsi3>
811242b0:	102d883a 	mov	r22,r2
811242b4:	9826943a 	slli	r19,r19,16
811242b8:	9004d43a 	srli	r2,r18,16
811242bc:	a5a1383a 	mul	r16,r20,r22
811242c0:	14c4b03a 	or	r2,r2,r19
811242c4:	1400052e 	bgeu	r2,r16,811242dc <__udivdi3+0xec>
811242c8:	1445883a 	add	r2,r2,r17
811242cc:	b0ffffc4 	addi	r3,r22,-1
811242d0:	14400136 	bltu	r2,r17,811242d8 <__udivdi3+0xe8>
811242d4:	14012336 	bltu	r2,r16,81124764 <__udivdi3+0x574>
811242d8:	182d883a 	mov	r22,r3
811242dc:	1421c83a 	sub	r16,r2,r16
811242e0:	a80b883a 	mov	r5,r21
811242e4:	8009883a 	mov	r4,r16
811242e8:	1124e0c0 	call	81124e0c <__umodsi3>
811242ec:	1027883a 	mov	r19,r2
811242f0:	a80b883a 	mov	r5,r21
811242f4:	8009883a 	mov	r4,r16
811242f8:	1124da80 	call	81124da8 <__udivsi3>
811242fc:	9826943a 	slli	r19,r19,16
81124300:	a0a9383a 	mul	r20,r20,r2
81124304:	94bfffcc 	andi	r18,r18,65535
81124308:	94e4b03a 	or	r18,r18,r19
8112430c:	9500052e 	bgeu	r18,r20,81124324 <__udivdi3+0x134>
81124310:	8ca5883a 	add	r18,r17,r18
81124314:	10ffffc4 	addi	r3,r2,-1
81124318:	9440f136 	bltu	r18,r17,811246e0 <__udivdi3+0x4f0>
8112431c:	9500f02e 	bgeu	r18,r20,811246e0 <__udivdi3+0x4f0>
81124320:	10bfff84 	addi	r2,r2,-2
81124324:	b00c943a 	slli	r6,r22,16
81124328:	0007883a 	mov	r3,zero
8112432c:	3084b03a 	or	r2,r6,r2
81124330:	00005906 	br	81124498 <__udivdi3+0x2a8>
81124334:	29c05636 	bltu	r5,r7,81124490 <__udivdi3+0x2a0>
81124338:	00bfffd4 	movui	r2,65535
8112433c:	11c0622e 	bgeu	r2,r7,811244c8 <__udivdi3+0x2d8>
81124340:	00804034 	movhi	r2,256
81124344:	10bfffc4 	addi	r2,r2,-1
81124348:	11c0ee36 	bltu	r2,r7,81124704 <__udivdi3+0x514>
8112434c:	00800404 	movi	r2,16
81124350:	3886d83a 	srl	r3,r7,r2
81124354:	01204534 	movhi	r4,33044
81124358:	21382804 	addi	r4,r4,-8032
8112435c:	20c7883a 	add	r3,r4,r3
81124360:	18c00003 	ldbu	r3,0(r3)
81124364:	05400804 	movi	r21,32
81124368:	1885883a 	add	r2,r3,r2
8112436c:	a8abc83a 	sub	r21,r21,r2
81124370:	a800621e 	bne	r21,zero,811244fc <__udivdi3+0x30c>
81124374:	3c00e936 	bltu	r7,r16,8112471c <__udivdi3+0x52c>
81124378:	9985403a 	cmpgeu	r2,r19,r6
8112437c:	0007883a 	mov	r3,zero
81124380:	00004506 	br	81124498 <__udivdi3+0x2a8>
81124384:	3000041e 	bne	r6,zero,81124398 <__udivdi3+0x1a8>
81124388:	000b883a 	mov	r5,zero
8112438c:	01000044 	movi	r4,1
81124390:	1124da80 	call	81124da8 <__udivsi3>
81124394:	1023883a 	mov	r17,r2
81124398:	00bfffd4 	movui	r2,65535
8112439c:	14404e2e 	bgeu	r2,r17,811244d8 <__udivdi3+0x2e8>
811243a0:	00804034 	movhi	r2,256
811243a4:	10bfffc4 	addi	r2,r2,-1
811243a8:	1440d836 	bltu	r2,r17,8112470c <__udivdi3+0x51c>
811243ac:	00800404 	movi	r2,16
811243b0:	8886d83a 	srl	r3,r17,r2
811243b4:	01204534 	movhi	r4,33044
811243b8:	21382804 	addi	r4,r4,-8032
811243bc:	20c7883a 	add	r3,r4,r3
811243c0:	18c00003 	ldbu	r3,0(r3)
811243c4:	1885883a 	add	r2,r3,r2
811243c8:	00c00804 	movi	r3,32
811243cc:	1887c83a 	sub	r3,r3,r2
811243d0:	18008f1e 	bne	r3,zero,81124610 <__udivdi3+0x420>
811243d4:	882ad43a 	srli	r21,r17,16
811243d8:	8461c83a 	sub	r16,r16,r17
811243dc:	8d3fffcc 	andi	r20,r17,65535
811243e0:	00c00044 	movi	r3,1
811243e4:	8009883a 	mov	r4,r16
811243e8:	a80b883a 	mov	r5,r21
811243ec:	d8c00015 	stw	r3,0(sp)
811243f0:	1124e0c0 	call	81124e0c <__umodsi3>
811243f4:	8009883a 	mov	r4,r16
811243f8:	a80b883a 	mov	r5,r21
811243fc:	1027883a 	mov	r19,r2
81124400:	1124da80 	call	81124da8 <__udivsi3>
81124404:	9826943a 	slli	r19,r19,16
81124408:	9008d43a 	srli	r4,r18,16
8112440c:	1521383a 	mul	r16,r2,r20
81124410:	102d883a 	mov	r22,r2
81124414:	24c8b03a 	or	r4,r4,r19
81124418:	d8c00017 	ldw	r3,0(sp)
8112441c:	2400052e 	bgeu	r4,r16,81124434 <__udivdi3+0x244>
81124420:	2449883a 	add	r4,r4,r17
81124424:	b0bfffc4 	addi	r2,r22,-1
81124428:	24400136 	bltu	r4,r17,81124430 <__udivdi3+0x240>
8112442c:	2400ca36 	bltu	r4,r16,81124758 <__udivdi3+0x568>
81124430:	102d883a 	mov	r22,r2
81124434:	2421c83a 	sub	r16,r4,r16
81124438:	a80b883a 	mov	r5,r21
8112443c:	8009883a 	mov	r4,r16
81124440:	d8c00015 	stw	r3,0(sp)
81124444:	1124e0c0 	call	81124e0c <__umodsi3>
81124448:	1027883a 	mov	r19,r2
8112444c:	a80b883a 	mov	r5,r21
81124450:	8009883a 	mov	r4,r16
81124454:	1124da80 	call	81124da8 <__udivsi3>
81124458:	9826943a 	slli	r19,r19,16
8112445c:	1529383a 	mul	r20,r2,r20
81124460:	94bfffcc 	andi	r18,r18,65535
81124464:	94e4b03a 	or	r18,r18,r19
81124468:	d8c00017 	ldw	r3,0(sp)
8112446c:	9500052e 	bgeu	r18,r20,81124484 <__udivdi3+0x294>
81124470:	8ca5883a 	add	r18,r17,r18
81124474:	113fffc4 	addi	r4,r2,-1
81124478:	94409736 	bltu	r18,r17,811246d8 <__udivdi3+0x4e8>
8112447c:	9500962e 	bgeu	r18,r20,811246d8 <__udivdi3+0x4e8>
81124480:	10bfff84 	addi	r2,r2,-2
81124484:	b00c943a 	slli	r6,r22,16
81124488:	3084b03a 	or	r2,r6,r2
8112448c:	00000206 	br	81124498 <__udivdi3+0x2a8>
81124490:	0007883a 	mov	r3,zero
81124494:	0005883a 	mov	r2,zero
81124498:	dfc00a17 	ldw	ra,40(sp)
8112449c:	df000917 	ldw	fp,36(sp)
811244a0:	ddc00817 	ldw	r23,32(sp)
811244a4:	dd800717 	ldw	r22,28(sp)
811244a8:	dd400617 	ldw	r21,24(sp)
811244ac:	dd000517 	ldw	r20,20(sp)
811244b0:	dcc00417 	ldw	r19,16(sp)
811244b4:	dc800317 	ldw	r18,12(sp)
811244b8:	dc400217 	ldw	r17,8(sp)
811244bc:	dc000117 	ldw	r16,4(sp)
811244c0:	dec00b04 	addi	sp,sp,44
811244c4:	f800283a 	ret
811244c8:	00803fc4 	movi	r2,255
811244cc:	11c5803a 	cmpltu	r2,r2,r7
811244d0:	100490fa 	slli	r2,r2,3
811244d4:	003f9e06 	br	81124350 <__reset+0xfb104350>
811244d8:	00803fc4 	movi	r2,255
811244dc:	1445803a 	cmpltu	r2,r2,r17
811244e0:	100490fa 	slli	r2,r2,3
811244e4:	003fb206 	br	811243b0 <__reset+0xfb1043b0>
811244e8:	00804034 	movhi	r2,256
811244ec:	10bfffc4 	addi	r2,r2,-1
811244f0:	11808836 	bltu	r2,r6,81124714 <__udivdi3+0x524>
811244f4:	00800404 	movi	r2,16
811244f8:	003f5606 	br	81124254 <__reset+0xfb104254>
811244fc:	30aed83a 	srl	r23,r6,r2
81124500:	3d4e983a 	sll	r7,r7,r21
81124504:	80acd83a 	srl	r22,r16,r2
81124508:	9884d83a 	srl	r2,r19,r2
8112450c:	3deeb03a 	or	r23,r7,r23
81124510:	b824d43a 	srli	r18,r23,16
81124514:	8560983a 	sll	r16,r16,r21
81124518:	b009883a 	mov	r4,r22
8112451c:	900b883a 	mov	r5,r18
81124520:	3568983a 	sll	r20,r6,r21
81124524:	1420b03a 	or	r16,r2,r16
81124528:	1124e0c0 	call	81124e0c <__umodsi3>
8112452c:	b009883a 	mov	r4,r22
81124530:	900b883a 	mov	r5,r18
81124534:	1023883a 	mov	r17,r2
81124538:	1124da80 	call	81124da8 <__udivsi3>
8112453c:	8808943a 	slli	r4,r17,16
81124540:	bf3fffcc 	andi	fp,r23,65535
81124544:	8006d43a 	srli	r3,r16,16
81124548:	e0a3383a 	mul	r17,fp,r2
8112454c:	100d883a 	mov	r6,r2
81124550:	1906b03a 	or	r3,r3,r4
81124554:	1c40042e 	bgeu	r3,r17,81124568 <__udivdi3+0x378>
81124558:	1dc7883a 	add	r3,r3,r23
8112455c:	10bfffc4 	addi	r2,r2,-1
81124560:	1dc0752e 	bgeu	r3,r23,81124738 <__udivdi3+0x548>
81124564:	100d883a 	mov	r6,r2
81124568:	1c63c83a 	sub	r17,r3,r17
8112456c:	900b883a 	mov	r5,r18
81124570:	8809883a 	mov	r4,r17
81124574:	d9800015 	stw	r6,0(sp)
81124578:	1124e0c0 	call	81124e0c <__umodsi3>
8112457c:	102d883a 	mov	r22,r2
81124580:	8809883a 	mov	r4,r17
81124584:	900b883a 	mov	r5,r18
81124588:	1124da80 	call	81124da8 <__udivsi3>
8112458c:	b02c943a 	slli	r22,r22,16
81124590:	e089383a 	mul	r4,fp,r2
81124594:	843fffcc 	andi	r16,r16,65535
81124598:	85a0b03a 	or	r16,r16,r22
8112459c:	d9800017 	ldw	r6,0(sp)
811245a0:	8100042e 	bgeu	r16,r4,811245b4 <__udivdi3+0x3c4>
811245a4:	85e1883a 	add	r16,r16,r23
811245a8:	10ffffc4 	addi	r3,r2,-1
811245ac:	85c05e2e 	bgeu	r16,r23,81124728 <__udivdi3+0x538>
811245b0:	1805883a 	mov	r2,r3
811245b4:	300c943a 	slli	r6,r6,16
811245b8:	a17fffcc 	andi	r5,r20,65535
811245bc:	a028d43a 	srli	r20,r20,16
811245c0:	3084b03a 	or	r2,r6,r2
811245c4:	10ffffcc 	andi	r3,r2,65535
811245c8:	100cd43a 	srli	r6,r2,16
811245cc:	194f383a 	mul	r7,r3,r5
811245d0:	1d07383a 	mul	r3,r3,r20
811245d4:	314b383a 	mul	r5,r6,r5
811245d8:	3810d43a 	srli	r8,r7,16
811245dc:	8121c83a 	sub	r16,r16,r4
811245e0:	1947883a 	add	r3,r3,r5
811245e4:	40c7883a 	add	r3,r8,r3
811245e8:	350d383a 	mul	r6,r6,r20
811245ec:	1940022e 	bgeu	r3,r5,811245f8 <__udivdi3+0x408>
811245f0:	01000074 	movhi	r4,1
811245f4:	310d883a 	add	r6,r6,r4
811245f8:	1828d43a 	srli	r20,r3,16
811245fc:	a18d883a 	add	r6,r20,r6
81124600:	81803e36 	bltu	r16,r6,811246fc <__udivdi3+0x50c>
81124604:	81803826 	beq	r16,r6,811246e8 <__udivdi3+0x4f8>
81124608:	0007883a 	mov	r3,zero
8112460c:	003fa206 	br	81124498 <__reset+0xfb104498>
81124610:	88e2983a 	sll	r17,r17,r3
81124614:	80a8d83a 	srl	r20,r16,r2
81124618:	80e0983a 	sll	r16,r16,r3
8112461c:	882ad43a 	srli	r21,r17,16
81124620:	9884d83a 	srl	r2,r19,r2
81124624:	a009883a 	mov	r4,r20
81124628:	a80b883a 	mov	r5,r21
8112462c:	142eb03a 	or	r23,r2,r16
81124630:	98e4983a 	sll	r18,r19,r3
81124634:	1124e0c0 	call	81124e0c <__umodsi3>
81124638:	a009883a 	mov	r4,r20
8112463c:	a80b883a 	mov	r5,r21
81124640:	1021883a 	mov	r16,r2
81124644:	1124da80 	call	81124da8 <__udivsi3>
81124648:	1039883a 	mov	fp,r2
8112464c:	8d3fffcc 	andi	r20,r17,65535
81124650:	8020943a 	slli	r16,r16,16
81124654:	b804d43a 	srli	r2,r23,16
81124658:	a72d383a 	mul	r22,r20,fp
8112465c:	1404b03a 	or	r2,r2,r16
81124660:	1580062e 	bgeu	r2,r22,8112467c <__udivdi3+0x48c>
81124664:	1445883a 	add	r2,r2,r17
81124668:	e0ffffc4 	addi	r3,fp,-1
8112466c:	14403836 	bltu	r2,r17,81124750 <__udivdi3+0x560>
81124670:	1580372e 	bgeu	r2,r22,81124750 <__udivdi3+0x560>
81124674:	e73fff84 	addi	fp,fp,-2
81124678:	1445883a 	add	r2,r2,r17
8112467c:	15adc83a 	sub	r22,r2,r22
81124680:	a80b883a 	mov	r5,r21
81124684:	b009883a 	mov	r4,r22
81124688:	1124e0c0 	call	81124e0c <__umodsi3>
8112468c:	1027883a 	mov	r19,r2
81124690:	b009883a 	mov	r4,r22
81124694:	a80b883a 	mov	r5,r21
81124698:	1124da80 	call	81124da8 <__udivsi3>
8112469c:	9826943a 	slli	r19,r19,16
811246a0:	a0a1383a 	mul	r16,r20,r2
811246a4:	b93fffcc 	andi	r4,r23,65535
811246a8:	24c8b03a 	or	r4,r4,r19
811246ac:	2400062e 	bgeu	r4,r16,811246c8 <__udivdi3+0x4d8>
811246b0:	2449883a 	add	r4,r4,r17
811246b4:	10ffffc4 	addi	r3,r2,-1
811246b8:	24402336 	bltu	r4,r17,81124748 <__udivdi3+0x558>
811246bc:	2400222e 	bgeu	r4,r16,81124748 <__udivdi3+0x558>
811246c0:	10bfff84 	addi	r2,r2,-2
811246c4:	2449883a 	add	r4,r4,r17
811246c8:	e038943a 	slli	fp,fp,16
811246cc:	2421c83a 	sub	r16,r4,r16
811246d0:	e086b03a 	or	r3,fp,r2
811246d4:	003f4306 	br	811243e4 <__reset+0xfb1043e4>
811246d8:	2005883a 	mov	r2,r4
811246dc:	003f6906 	br	81124484 <__reset+0xfb104484>
811246e0:	1805883a 	mov	r2,r3
811246e4:	003f0f06 	br	81124324 <__reset+0xfb104324>
811246e8:	1806943a 	slli	r3,r3,16
811246ec:	9d66983a 	sll	r19,r19,r21
811246f0:	39ffffcc 	andi	r7,r7,65535
811246f4:	19c7883a 	add	r3,r3,r7
811246f8:	98ffc32e 	bgeu	r19,r3,81124608 <__reset+0xfb104608>
811246fc:	10bfffc4 	addi	r2,r2,-1
81124700:	003fc106 	br	81124608 <__reset+0xfb104608>
81124704:	00800604 	movi	r2,24
81124708:	003f1106 	br	81124350 <__reset+0xfb104350>
8112470c:	00800604 	movi	r2,24
81124710:	003f2706 	br	811243b0 <__reset+0xfb1043b0>
81124714:	00800604 	movi	r2,24
81124718:	003ece06 	br	81124254 <__reset+0xfb104254>
8112471c:	0007883a 	mov	r3,zero
81124720:	00800044 	movi	r2,1
81124724:	003f5c06 	br	81124498 <__reset+0xfb104498>
81124728:	813fa12e 	bgeu	r16,r4,811245b0 <__reset+0xfb1045b0>
8112472c:	10bfff84 	addi	r2,r2,-2
81124730:	85e1883a 	add	r16,r16,r23
81124734:	003f9f06 	br	811245b4 <__reset+0xfb1045b4>
81124738:	1c7f8a2e 	bgeu	r3,r17,81124564 <__reset+0xfb104564>
8112473c:	31bfff84 	addi	r6,r6,-2
81124740:	1dc7883a 	add	r3,r3,r23
81124744:	003f8806 	br	81124568 <__reset+0xfb104568>
81124748:	1805883a 	mov	r2,r3
8112474c:	003fde06 	br	811246c8 <__reset+0xfb1046c8>
81124750:	1839883a 	mov	fp,r3
81124754:	003fc906 	br	8112467c <__reset+0xfb10467c>
81124758:	b5bfff84 	addi	r22,r22,-2
8112475c:	2449883a 	add	r4,r4,r17
81124760:	003f3406 	br	81124434 <__reset+0xfb104434>
81124764:	b5bfff84 	addi	r22,r22,-2
81124768:	1445883a 	add	r2,r2,r17
8112476c:	003edb06 	br	811242dc <__reset+0xfb1042dc>

81124770 <__umoddi3>:
81124770:	defff404 	addi	sp,sp,-48
81124774:	de00012e 	bgeu	sp,et,8112477c <__umoddi3+0xc>
81124778:	003b68fa 	trap	3
8112477c:	df000a15 	stw	fp,40(sp)
81124780:	dc400315 	stw	r17,12(sp)
81124784:	dc000215 	stw	r16,8(sp)
81124788:	dfc00b15 	stw	ra,44(sp)
8112478c:	ddc00915 	stw	r23,36(sp)
81124790:	dd800815 	stw	r22,32(sp)
81124794:	dd400715 	stw	r21,28(sp)
81124798:	dd000615 	stw	r20,24(sp)
8112479c:	dcc00515 	stw	r19,20(sp)
811247a0:	dc800415 	stw	r18,16(sp)
811247a4:	2021883a 	mov	r16,r4
811247a8:	2823883a 	mov	r17,r5
811247ac:	2839883a 	mov	fp,r5
811247b0:	38003c1e 	bne	r7,zero,811248a4 <__umoddi3+0x134>
811247b4:	3027883a 	mov	r19,r6
811247b8:	2029883a 	mov	r20,r4
811247bc:	2980512e 	bgeu	r5,r6,81124904 <__umoddi3+0x194>
811247c0:	00bfffd4 	movui	r2,65535
811247c4:	11809a36 	bltu	r2,r6,81124a30 <__umoddi3+0x2c0>
811247c8:	01003fc4 	movi	r4,255
811247cc:	2189803a 	cmpltu	r4,r4,r6
811247d0:	200890fa 	slli	r4,r4,3
811247d4:	3104d83a 	srl	r2,r6,r4
811247d8:	00e04534 	movhi	r3,33044
811247dc:	18f82804 	addi	r3,r3,-8032
811247e0:	1885883a 	add	r2,r3,r2
811247e4:	10c00003 	ldbu	r3,0(r2)
811247e8:	00800804 	movi	r2,32
811247ec:	1909883a 	add	r4,r3,r4
811247f0:	1125c83a 	sub	r18,r2,r4
811247f4:	90000526 	beq	r18,zero,8112480c <__umoddi3+0x9c>
811247f8:	8ca2983a 	sll	r17,r17,r18
811247fc:	8108d83a 	srl	r4,r16,r4
81124800:	34a6983a 	sll	r19,r6,r18
81124804:	84a8983a 	sll	r20,r16,r18
81124808:	2478b03a 	or	fp,r4,r17
8112480c:	982ed43a 	srli	r23,r19,16
81124810:	e009883a 	mov	r4,fp
81124814:	9dbfffcc 	andi	r22,r19,65535
81124818:	b80b883a 	mov	r5,r23
8112481c:	1124e0c0 	call	81124e0c <__umodsi3>
81124820:	e009883a 	mov	r4,fp
81124824:	b80b883a 	mov	r5,r23
81124828:	102b883a 	mov	r21,r2
8112482c:	1124da80 	call	81124da8 <__udivsi3>
81124830:	a806943a 	slli	r3,r21,16
81124834:	a008d43a 	srli	r4,r20,16
81124838:	b085383a 	mul	r2,r22,r2
8112483c:	20c8b03a 	or	r4,r4,r3
81124840:	2080032e 	bgeu	r4,r2,81124850 <__umoddi3+0xe0>
81124844:	24c9883a 	add	r4,r4,r19
81124848:	24c00136 	bltu	r4,r19,81124850 <__umoddi3+0xe0>
8112484c:	20811036 	bltu	r4,r2,81124c90 <__umoddi3+0x520>
81124850:	20abc83a 	sub	r21,r4,r2
81124854:	b80b883a 	mov	r5,r23
81124858:	a809883a 	mov	r4,r21
8112485c:	1124e0c0 	call	81124e0c <__umodsi3>
81124860:	1023883a 	mov	r17,r2
81124864:	b80b883a 	mov	r5,r23
81124868:	a809883a 	mov	r4,r21
8112486c:	1124da80 	call	81124da8 <__udivsi3>
81124870:	8822943a 	slli	r17,r17,16
81124874:	b085383a 	mul	r2,r22,r2
81124878:	a0ffffcc 	andi	r3,r20,65535
8112487c:	1c46b03a 	or	r3,r3,r17
81124880:	1880042e 	bgeu	r3,r2,81124894 <__umoddi3+0x124>
81124884:	1cc7883a 	add	r3,r3,r19
81124888:	1cc00236 	bltu	r3,r19,81124894 <__umoddi3+0x124>
8112488c:	1880012e 	bgeu	r3,r2,81124894 <__umoddi3+0x124>
81124890:	1cc7883a 	add	r3,r3,r19
81124894:	1885c83a 	sub	r2,r3,r2
81124898:	1484d83a 	srl	r2,r2,r18
8112489c:	0007883a 	mov	r3,zero
811248a0:	00004f06 	br	811249e0 <__umoddi3+0x270>
811248a4:	29c04c36 	bltu	r5,r7,811249d8 <__umoddi3+0x268>
811248a8:	00bfffd4 	movui	r2,65535
811248ac:	11c0582e 	bgeu	r2,r7,81124a10 <__umoddi3+0x2a0>
811248b0:	00804034 	movhi	r2,256
811248b4:	10bfffc4 	addi	r2,r2,-1
811248b8:	11c0e736 	bltu	r2,r7,81124c58 <__umoddi3+0x4e8>
811248bc:	01000404 	movi	r4,16
811248c0:	3904d83a 	srl	r2,r7,r4
811248c4:	00e04534 	movhi	r3,33044
811248c8:	18f82804 	addi	r3,r3,-8032
811248cc:	1885883a 	add	r2,r3,r2
811248d0:	14c00003 	ldbu	r19,0(r2)
811248d4:	00c00804 	movi	r3,32
811248d8:	9927883a 	add	r19,r19,r4
811248dc:	1ce9c83a 	sub	r20,r3,r19
811248e0:	a000581e 	bne	r20,zero,81124a44 <__umoddi3+0x2d4>
811248e4:	3c400136 	bltu	r7,r17,811248ec <__umoddi3+0x17c>
811248e8:	8180eb36 	bltu	r16,r6,81124c98 <__umoddi3+0x528>
811248ec:	8185c83a 	sub	r2,r16,r6
811248f0:	89e3c83a 	sub	r17,r17,r7
811248f4:	8089803a 	cmpltu	r4,r16,r2
811248f8:	8939c83a 	sub	fp,r17,r4
811248fc:	e007883a 	mov	r3,fp
81124900:	00003706 	br	811249e0 <__umoddi3+0x270>
81124904:	3000041e 	bne	r6,zero,81124918 <__umoddi3+0x1a8>
81124908:	000b883a 	mov	r5,zero
8112490c:	01000044 	movi	r4,1
81124910:	1124da80 	call	81124da8 <__udivsi3>
81124914:	1027883a 	mov	r19,r2
81124918:	00bfffd4 	movui	r2,65535
8112491c:	14c0402e 	bgeu	r2,r19,81124a20 <__umoddi3+0x2b0>
81124920:	00804034 	movhi	r2,256
81124924:	10bfffc4 	addi	r2,r2,-1
81124928:	14c0cd36 	bltu	r2,r19,81124c60 <__umoddi3+0x4f0>
8112492c:	00800404 	movi	r2,16
81124930:	9886d83a 	srl	r3,r19,r2
81124934:	01204534 	movhi	r4,33044
81124938:	21382804 	addi	r4,r4,-8032
8112493c:	20c7883a 	add	r3,r4,r3
81124940:	18c00003 	ldbu	r3,0(r3)
81124944:	1887883a 	add	r3,r3,r2
81124948:	00800804 	movi	r2,32
8112494c:	10e5c83a 	sub	r18,r2,r3
81124950:	9000901e 	bne	r18,zero,81124b94 <__umoddi3+0x424>
81124954:	982cd43a 	srli	r22,r19,16
81124958:	8ce3c83a 	sub	r17,r17,r19
8112495c:	9d7fffcc 	andi	r21,r19,65535
81124960:	b00b883a 	mov	r5,r22
81124964:	8809883a 	mov	r4,r17
81124968:	1124e0c0 	call	81124e0c <__umodsi3>
8112496c:	8809883a 	mov	r4,r17
81124970:	b00b883a 	mov	r5,r22
81124974:	1021883a 	mov	r16,r2
81124978:	1124da80 	call	81124da8 <__udivsi3>
8112497c:	8006943a 	slli	r3,r16,16
81124980:	a008d43a 	srli	r4,r20,16
81124984:	1545383a 	mul	r2,r2,r21
81124988:	20c8b03a 	or	r4,r4,r3
8112498c:	2080042e 	bgeu	r4,r2,811249a0 <__umoddi3+0x230>
81124990:	24c9883a 	add	r4,r4,r19
81124994:	24c00236 	bltu	r4,r19,811249a0 <__umoddi3+0x230>
81124998:	2080012e 	bgeu	r4,r2,811249a0 <__umoddi3+0x230>
8112499c:	24c9883a 	add	r4,r4,r19
811249a0:	20a1c83a 	sub	r16,r4,r2
811249a4:	b00b883a 	mov	r5,r22
811249a8:	8009883a 	mov	r4,r16
811249ac:	1124e0c0 	call	81124e0c <__umodsi3>
811249b0:	1023883a 	mov	r17,r2
811249b4:	b00b883a 	mov	r5,r22
811249b8:	8009883a 	mov	r4,r16
811249bc:	1124da80 	call	81124da8 <__udivsi3>
811249c0:	8822943a 	slli	r17,r17,16
811249c4:	1545383a 	mul	r2,r2,r21
811249c8:	a53fffcc 	andi	r20,r20,65535
811249cc:	a446b03a 	or	r3,r20,r17
811249d0:	18bfb02e 	bgeu	r3,r2,81124894 <__reset+0xfb104894>
811249d4:	003fab06 	br	81124884 <__reset+0xfb104884>
811249d8:	2005883a 	mov	r2,r4
811249dc:	2807883a 	mov	r3,r5
811249e0:	dfc00b17 	ldw	ra,44(sp)
811249e4:	df000a17 	ldw	fp,40(sp)
811249e8:	ddc00917 	ldw	r23,36(sp)
811249ec:	dd800817 	ldw	r22,32(sp)
811249f0:	dd400717 	ldw	r21,28(sp)
811249f4:	dd000617 	ldw	r20,24(sp)
811249f8:	dcc00517 	ldw	r19,20(sp)
811249fc:	dc800417 	ldw	r18,16(sp)
81124a00:	dc400317 	ldw	r17,12(sp)
81124a04:	dc000217 	ldw	r16,8(sp)
81124a08:	dec00c04 	addi	sp,sp,48
81124a0c:	f800283a 	ret
81124a10:	04c03fc4 	movi	r19,255
81124a14:	99c9803a 	cmpltu	r4,r19,r7
81124a18:	200890fa 	slli	r4,r4,3
81124a1c:	003fa806 	br	811248c0 <__reset+0xfb1048c0>
81124a20:	00803fc4 	movi	r2,255
81124a24:	14c5803a 	cmpltu	r2,r2,r19
81124a28:	100490fa 	slli	r2,r2,3
81124a2c:	003fc006 	br	81124930 <__reset+0xfb104930>
81124a30:	00804034 	movhi	r2,256
81124a34:	10bfffc4 	addi	r2,r2,-1
81124a38:	11808b36 	bltu	r2,r6,81124c68 <__umoddi3+0x4f8>
81124a3c:	01000404 	movi	r4,16
81124a40:	003f6406 	br	811247d4 <__reset+0xfb1047d4>
81124a44:	34c4d83a 	srl	r2,r6,r19
81124a48:	3d0e983a 	sll	r7,r7,r20
81124a4c:	8cf8d83a 	srl	fp,r17,r19
81124a50:	8d10983a 	sll	r8,r17,r20
81124a54:	38aab03a 	or	r21,r7,r2
81124a58:	a82cd43a 	srli	r22,r21,16
81124a5c:	84e2d83a 	srl	r17,r16,r19
81124a60:	e009883a 	mov	r4,fp
81124a64:	b00b883a 	mov	r5,r22
81124a68:	8a22b03a 	or	r17,r17,r8
81124a6c:	3524983a 	sll	r18,r6,r20
81124a70:	1124e0c0 	call	81124e0c <__umodsi3>
81124a74:	e009883a 	mov	r4,fp
81124a78:	b00b883a 	mov	r5,r22
81124a7c:	102f883a 	mov	r23,r2
81124a80:	1124da80 	call	81124da8 <__udivsi3>
81124a84:	100d883a 	mov	r6,r2
81124a88:	b808943a 	slli	r4,r23,16
81124a8c:	aa3fffcc 	andi	r8,r21,65535
81124a90:	8804d43a 	srli	r2,r17,16
81124a94:	41af383a 	mul	r23,r8,r6
81124a98:	8520983a 	sll	r16,r16,r20
81124a9c:	1104b03a 	or	r2,r2,r4
81124aa0:	15c0042e 	bgeu	r2,r23,81124ab4 <__umoddi3+0x344>
81124aa4:	1545883a 	add	r2,r2,r21
81124aa8:	30ffffc4 	addi	r3,r6,-1
81124aac:	1540742e 	bgeu	r2,r21,81124c80 <__umoddi3+0x510>
81124ab0:	180d883a 	mov	r6,r3
81124ab4:	15efc83a 	sub	r23,r2,r23
81124ab8:	b00b883a 	mov	r5,r22
81124abc:	b809883a 	mov	r4,r23
81124ac0:	d9800115 	stw	r6,4(sp)
81124ac4:	da000015 	stw	r8,0(sp)
81124ac8:	1124e0c0 	call	81124e0c <__umodsi3>
81124acc:	b00b883a 	mov	r5,r22
81124ad0:	b809883a 	mov	r4,r23
81124ad4:	1039883a 	mov	fp,r2
81124ad8:	1124da80 	call	81124da8 <__udivsi3>
81124adc:	da000017 	ldw	r8,0(sp)
81124ae0:	e038943a 	slli	fp,fp,16
81124ae4:	100b883a 	mov	r5,r2
81124ae8:	4089383a 	mul	r4,r8,r2
81124aec:	8a3fffcc 	andi	r8,r17,65535
81124af0:	4710b03a 	or	r8,r8,fp
81124af4:	d9800117 	ldw	r6,4(sp)
81124af8:	4100042e 	bgeu	r8,r4,81124b0c <__umoddi3+0x39c>
81124afc:	4551883a 	add	r8,r8,r21
81124b00:	10bfffc4 	addi	r2,r2,-1
81124b04:	45405a2e 	bgeu	r8,r21,81124c70 <__umoddi3+0x500>
81124b08:	100b883a 	mov	r5,r2
81124b0c:	300c943a 	slli	r6,r6,16
81124b10:	91ffffcc 	andi	r7,r18,65535
81124b14:	9004d43a 	srli	r2,r18,16
81124b18:	314cb03a 	or	r6,r6,r5
81124b1c:	317fffcc 	andi	r5,r6,65535
81124b20:	300cd43a 	srli	r6,r6,16
81124b24:	29d3383a 	mul	r9,r5,r7
81124b28:	288b383a 	mul	r5,r5,r2
81124b2c:	31cf383a 	mul	r7,r6,r7
81124b30:	4806d43a 	srli	r3,r9,16
81124b34:	4111c83a 	sub	r8,r8,r4
81124b38:	29cb883a 	add	r5,r5,r7
81124b3c:	194b883a 	add	r5,r3,r5
81124b40:	3085383a 	mul	r2,r6,r2
81124b44:	29c0022e 	bgeu	r5,r7,81124b50 <__umoddi3+0x3e0>
81124b48:	00c00074 	movhi	r3,1
81124b4c:	10c5883a 	add	r2,r2,r3
81124b50:	2808d43a 	srli	r4,r5,16
81124b54:	280a943a 	slli	r5,r5,16
81124b58:	4a7fffcc 	andi	r9,r9,65535
81124b5c:	2085883a 	add	r2,r4,r2
81124b60:	2a4b883a 	add	r5,r5,r9
81124b64:	40803636 	bltu	r8,r2,81124c40 <__umoddi3+0x4d0>
81124b68:	40804d26 	beq	r8,r2,81124ca0 <__umoddi3+0x530>
81124b6c:	4089c83a 	sub	r4,r8,r2
81124b70:	280f883a 	mov	r7,r5
81124b74:	81cfc83a 	sub	r7,r16,r7
81124b78:	81c7803a 	cmpltu	r3,r16,r7
81124b7c:	20c7c83a 	sub	r3,r4,r3
81124b80:	1cc4983a 	sll	r2,r3,r19
81124b84:	3d0ed83a 	srl	r7,r7,r20
81124b88:	1d06d83a 	srl	r3,r3,r20
81124b8c:	11c4b03a 	or	r2,r2,r7
81124b90:	003f9306 	br	811249e0 <__reset+0xfb1049e0>
81124b94:	9ca6983a 	sll	r19,r19,r18
81124b98:	88e8d83a 	srl	r20,r17,r3
81124b9c:	80c4d83a 	srl	r2,r16,r3
81124ba0:	982cd43a 	srli	r22,r19,16
81124ba4:	8ca2983a 	sll	r17,r17,r18
81124ba8:	a009883a 	mov	r4,r20
81124bac:	b00b883a 	mov	r5,r22
81124bb0:	1478b03a 	or	fp,r2,r17
81124bb4:	1124e0c0 	call	81124e0c <__umodsi3>
81124bb8:	a009883a 	mov	r4,r20
81124bbc:	b00b883a 	mov	r5,r22
81124bc0:	1023883a 	mov	r17,r2
81124bc4:	1124da80 	call	81124da8 <__udivsi3>
81124bc8:	9d7fffcc 	andi	r21,r19,65535
81124bcc:	880a943a 	slli	r5,r17,16
81124bd0:	e008d43a 	srli	r4,fp,16
81124bd4:	a885383a 	mul	r2,r21,r2
81124bd8:	84a8983a 	sll	r20,r16,r18
81124bdc:	2148b03a 	or	r4,r4,r5
81124be0:	2080042e 	bgeu	r4,r2,81124bf4 <__umoddi3+0x484>
81124be4:	24c9883a 	add	r4,r4,r19
81124be8:	24c00236 	bltu	r4,r19,81124bf4 <__umoddi3+0x484>
81124bec:	2080012e 	bgeu	r4,r2,81124bf4 <__umoddi3+0x484>
81124bf0:	24c9883a 	add	r4,r4,r19
81124bf4:	20a3c83a 	sub	r17,r4,r2
81124bf8:	b00b883a 	mov	r5,r22
81124bfc:	8809883a 	mov	r4,r17
81124c00:	1124e0c0 	call	81124e0c <__umodsi3>
81124c04:	102f883a 	mov	r23,r2
81124c08:	8809883a 	mov	r4,r17
81124c0c:	b00b883a 	mov	r5,r22
81124c10:	1124da80 	call	81124da8 <__udivsi3>
81124c14:	b82e943a 	slli	r23,r23,16
81124c18:	a885383a 	mul	r2,r21,r2
81124c1c:	e13fffcc 	andi	r4,fp,65535
81124c20:	25c8b03a 	or	r4,r4,r23
81124c24:	2080042e 	bgeu	r4,r2,81124c38 <__umoddi3+0x4c8>
81124c28:	24c9883a 	add	r4,r4,r19
81124c2c:	24c00236 	bltu	r4,r19,81124c38 <__umoddi3+0x4c8>
81124c30:	2080012e 	bgeu	r4,r2,81124c38 <__umoddi3+0x4c8>
81124c34:	24c9883a 	add	r4,r4,r19
81124c38:	20a3c83a 	sub	r17,r4,r2
81124c3c:	003f4806 	br	81124960 <__reset+0xfb104960>
81124c40:	2c8fc83a 	sub	r7,r5,r18
81124c44:	1545c83a 	sub	r2,r2,r21
81124c48:	29cb803a 	cmpltu	r5,r5,r7
81124c4c:	1145c83a 	sub	r2,r2,r5
81124c50:	4089c83a 	sub	r4,r8,r2
81124c54:	003fc706 	br	81124b74 <__reset+0xfb104b74>
81124c58:	01000604 	movi	r4,24
81124c5c:	003f1806 	br	811248c0 <__reset+0xfb1048c0>
81124c60:	00800604 	movi	r2,24
81124c64:	003f3206 	br	81124930 <__reset+0xfb104930>
81124c68:	01000604 	movi	r4,24
81124c6c:	003ed906 	br	811247d4 <__reset+0xfb1047d4>
81124c70:	413fa52e 	bgeu	r8,r4,81124b08 <__reset+0xfb104b08>
81124c74:	297fff84 	addi	r5,r5,-2
81124c78:	4551883a 	add	r8,r8,r21
81124c7c:	003fa306 	br	81124b0c <__reset+0xfb104b0c>
81124c80:	15ff8b2e 	bgeu	r2,r23,81124ab0 <__reset+0xfb104ab0>
81124c84:	31bfff84 	addi	r6,r6,-2
81124c88:	1545883a 	add	r2,r2,r21
81124c8c:	003f8906 	br	81124ab4 <__reset+0xfb104ab4>
81124c90:	24c9883a 	add	r4,r4,r19
81124c94:	003eee06 	br	81124850 <__reset+0xfb104850>
81124c98:	8005883a 	mov	r2,r16
81124c9c:	003f1706 	br	811248fc <__reset+0xfb1048fc>
81124ca0:	817fe736 	bltu	r16,r5,81124c40 <__reset+0xfb104c40>
81124ca4:	280f883a 	mov	r7,r5
81124ca8:	0009883a 	mov	r4,zero
81124cac:	003fb106 	br	81124b74 <__reset+0xfb104b74>

81124cb0 <__divsi3>:
81124cb0:	20001b16 	blt	r4,zero,81124d20 <__divsi3+0x70>
81124cb4:	000f883a 	mov	r7,zero
81124cb8:	28001616 	blt	r5,zero,81124d14 <__divsi3+0x64>
81124cbc:	200d883a 	mov	r6,r4
81124cc0:	29001a2e 	bgeu	r5,r4,81124d2c <__divsi3+0x7c>
81124cc4:	00800804 	movi	r2,32
81124cc8:	00c00044 	movi	r3,1
81124ccc:	00000106 	br	81124cd4 <__divsi3+0x24>
81124cd0:	10000d26 	beq	r2,zero,81124d08 <__divsi3+0x58>
81124cd4:	294b883a 	add	r5,r5,r5
81124cd8:	10bfffc4 	addi	r2,r2,-1
81124cdc:	18c7883a 	add	r3,r3,r3
81124ce0:	293ffb36 	bltu	r5,r4,81124cd0 <__reset+0xfb104cd0>
81124ce4:	0005883a 	mov	r2,zero
81124ce8:	18000726 	beq	r3,zero,81124d08 <__divsi3+0x58>
81124cec:	0005883a 	mov	r2,zero
81124cf0:	31400236 	bltu	r6,r5,81124cfc <__divsi3+0x4c>
81124cf4:	314dc83a 	sub	r6,r6,r5
81124cf8:	10c4b03a 	or	r2,r2,r3
81124cfc:	1806d07a 	srli	r3,r3,1
81124d00:	280ad07a 	srli	r5,r5,1
81124d04:	183ffa1e 	bne	r3,zero,81124cf0 <__reset+0xfb104cf0>
81124d08:	38000126 	beq	r7,zero,81124d10 <__divsi3+0x60>
81124d0c:	0085c83a 	sub	r2,zero,r2
81124d10:	f800283a 	ret
81124d14:	014bc83a 	sub	r5,zero,r5
81124d18:	39c0005c 	xori	r7,r7,1
81124d1c:	003fe706 	br	81124cbc <__reset+0xfb104cbc>
81124d20:	0109c83a 	sub	r4,zero,r4
81124d24:	01c00044 	movi	r7,1
81124d28:	003fe306 	br	81124cb8 <__reset+0xfb104cb8>
81124d2c:	00c00044 	movi	r3,1
81124d30:	003fee06 	br	81124cec <__reset+0xfb104cec>

81124d34 <__modsi3>:
81124d34:	20001716 	blt	r4,zero,81124d94 <__modsi3+0x60>
81124d38:	000f883a 	mov	r7,zero
81124d3c:	2005883a 	mov	r2,r4
81124d40:	28001216 	blt	r5,zero,81124d8c <__modsi3+0x58>
81124d44:	2900162e 	bgeu	r5,r4,81124da0 <__modsi3+0x6c>
81124d48:	01800804 	movi	r6,32
81124d4c:	00c00044 	movi	r3,1
81124d50:	00000106 	br	81124d58 <__modsi3+0x24>
81124d54:	30000a26 	beq	r6,zero,81124d80 <__modsi3+0x4c>
81124d58:	294b883a 	add	r5,r5,r5
81124d5c:	31bfffc4 	addi	r6,r6,-1
81124d60:	18c7883a 	add	r3,r3,r3
81124d64:	293ffb36 	bltu	r5,r4,81124d54 <__reset+0xfb104d54>
81124d68:	18000526 	beq	r3,zero,81124d80 <__modsi3+0x4c>
81124d6c:	1806d07a 	srli	r3,r3,1
81124d70:	11400136 	bltu	r2,r5,81124d78 <__modsi3+0x44>
81124d74:	1145c83a 	sub	r2,r2,r5
81124d78:	280ad07a 	srli	r5,r5,1
81124d7c:	183ffb1e 	bne	r3,zero,81124d6c <__reset+0xfb104d6c>
81124d80:	38000126 	beq	r7,zero,81124d88 <__modsi3+0x54>
81124d84:	0085c83a 	sub	r2,zero,r2
81124d88:	f800283a 	ret
81124d8c:	014bc83a 	sub	r5,zero,r5
81124d90:	003fec06 	br	81124d44 <__reset+0xfb104d44>
81124d94:	0109c83a 	sub	r4,zero,r4
81124d98:	01c00044 	movi	r7,1
81124d9c:	003fe706 	br	81124d3c <__reset+0xfb104d3c>
81124da0:	00c00044 	movi	r3,1
81124da4:	003ff106 	br	81124d6c <__reset+0xfb104d6c>

81124da8 <__udivsi3>:
81124da8:	200d883a 	mov	r6,r4
81124dac:	2900152e 	bgeu	r5,r4,81124e04 <__udivsi3+0x5c>
81124db0:	28001416 	blt	r5,zero,81124e04 <__udivsi3+0x5c>
81124db4:	00800804 	movi	r2,32
81124db8:	00c00044 	movi	r3,1
81124dbc:	00000206 	br	81124dc8 <__udivsi3+0x20>
81124dc0:	10000e26 	beq	r2,zero,81124dfc <__udivsi3+0x54>
81124dc4:	28000516 	blt	r5,zero,81124ddc <__udivsi3+0x34>
81124dc8:	294b883a 	add	r5,r5,r5
81124dcc:	10bfffc4 	addi	r2,r2,-1
81124dd0:	18c7883a 	add	r3,r3,r3
81124dd4:	293ffa36 	bltu	r5,r4,81124dc0 <__reset+0xfb104dc0>
81124dd8:	18000826 	beq	r3,zero,81124dfc <__udivsi3+0x54>
81124ddc:	0005883a 	mov	r2,zero
81124de0:	31400236 	bltu	r6,r5,81124dec <__udivsi3+0x44>
81124de4:	314dc83a 	sub	r6,r6,r5
81124de8:	10c4b03a 	or	r2,r2,r3
81124dec:	1806d07a 	srli	r3,r3,1
81124df0:	280ad07a 	srli	r5,r5,1
81124df4:	183ffa1e 	bne	r3,zero,81124de0 <__reset+0xfb104de0>
81124df8:	f800283a 	ret
81124dfc:	0005883a 	mov	r2,zero
81124e00:	f800283a 	ret
81124e04:	00c00044 	movi	r3,1
81124e08:	003ff406 	br	81124ddc <__reset+0xfb104ddc>

81124e0c <__umodsi3>:
81124e0c:	2005883a 	mov	r2,r4
81124e10:	2900122e 	bgeu	r5,r4,81124e5c <__umodsi3+0x50>
81124e14:	28001116 	blt	r5,zero,81124e5c <__umodsi3+0x50>
81124e18:	01800804 	movi	r6,32
81124e1c:	00c00044 	movi	r3,1
81124e20:	00000206 	br	81124e2c <__umodsi3+0x20>
81124e24:	30000c26 	beq	r6,zero,81124e58 <__umodsi3+0x4c>
81124e28:	28000516 	blt	r5,zero,81124e40 <__umodsi3+0x34>
81124e2c:	294b883a 	add	r5,r5,r5
81124e30:	31bfffc4 	addi	r6,r6,-1
81124e34:	18c7883a 	add	r3,r3,r3
81124e38:	293ffa36 	bltu	r5,r4,81124e24 <__reset+0xfb104e24>
81124e3c:	18000626 	beq	r3,zero,81124e58 <__umodsi3+0x4c>
81124e40:	1806d07a 	srli	r3,r3,1
81124e44:	11400136 	bltu	r2,r5,81124e4c <__umodsi3+0x40>
81124e48:	1145c83a 	sub	r2,r2,r5
81124e4c:	280ad07a 	srli	r5,r5,1
81124e50:	183ffb1e 	bne	r3,zero,81124e40 <__reset+0xfb104e40>
81124e54:	f800283a 	ret
81124e58:	f800283a 	ret
81124e5c:	00c00044 	movi	r3,1
81124e60:	003ff706 	br	81124e40 <__reset+0xfb104e40>

81124e64 <__eqsf2>:
81124e64:	2006d5fa 	srli	r3,r4,23
81124e68:	280cd5fa 	srli	r6,r5,23
81124e6c:	01c02034 	movhi	r7,128
81124e70:	39ffffc4 	addi	r7,r7,-1
81124e74:	18c03fcc 	andi	r3,r3,255
81124e78:	02003fc4 	movi	r8,255
81124e7c:	3904703a 	and	r2,r7,r4
81124e80:	31803fcc 	andi	r6,r6,255
81124e84:	394e703a 	and	r7,r7,r5
81124e88:	2008d7fa 	srli	r4,r4,31
81124e8c:	280ad7fa 	srli	r5,r5,31
81124e90:	1a000d26 	beq	r3,r8,81124ec8 <__eqsf2+0x64>
81124e94:	02003fc4 	movi	r8,255
81124e98:	32000826 	beq	r6,r8,81124ebc <__eqsf2+0x58>
81124e9c:	19800226 	beq	r3,r6,81124ea8 <__eqsf2+0x44>
81124ea0:	00800044 	movi	r2,1
81124ea4:	f800283a 	ret
81124ea8:	11fffd1e 	bne	r2,r7,81124ea0 <__reset+0xfb104ea0>
81124eac:	21400926 	beq	r4,r5,81124ed4 <__eqsf2+0x70>
81124eb0:	183ffb1e 	bne	r3,zero,81124ea0 <__reset+0xfb104ea0>
81124eb4:	1004c03a 	cmpne	r2,r2,zero
81124eb8:	f800283a 	ret
81124ebc:	383ff726 	beq	r7,zero,81124e9c <__reset+0xfb104e9c>
81124ec0:	00800044 	movi	r2,1
81124ec4:	f800283a 	ret
81124ec8:	103ff226 	beq	r2,zero,81124e94 <__reset+0xfb104e94>
81124ecc:	00800044 	movi	r2,1
81124ed0:	f800283a 	ret
81124ed4:	0005883a 	mov	r2,zero
81124ed8:	f800283a 	ret

81124edc <__gesf2>:
81124edc:	2004d5fa 	srli	r2,r4,23
81124ee0:	2806d5fa 	srli	r3,r5,23
81124ee4:	01802034 	movhi	r6,128
81124ee8:	31bfffc4 	addi	r6,r6,-1
81124eec:	10803fcc 	andi	r2,r2,255
81124ef0:	01c03fc4 	movi	r7,255
81124ef4:	3110703a 	and	r8,r6,r4
81124ef8:	18c03fcc 	andi	r3,r3,255
81124efc:	314c703a 	and	r6,r6,r5
81124f00:	2008d7fa 	srli	r4,r4,31
81124f04:	280ad7fa 	srli	r5,r5,31
81124f08:	11c01926 	beq	r2,r7,81124f70 <__gesf2+0x94>
81124f0c:	01c03fc4 	movi	r7,255
81124f10:	19c00f26 	beq	r3,r7,81124f50 <__gesf2+0x74>
81124f14:	1000061e 	bne	r2,zero,81124f30 <__gesf2+0x54>
81124f18:	400f003a 	cmpeq	r7,r8,zero
81124f1c:	1800071e 	bne	r3,zero,81124f3c <__gesf2+0x60>
81124f20:	3000061e 	bne	r6,zero,81124f3c <__gesf2+0x60>
81124f24:	0005883a 	mov	r2,zero
81124f28:	40000e1e 	bne	r8,zero,81124f64 <__gesf2+0x88>
81124f2c:	f800283a 	ret
81124f30:	18000a1e 	bne	r3,zero,81124f5c <__gesf2+0x80>
81124f34:	30000b26 	beq	r6,zero,81124f64 <__gesf2+0x88>
81124f38:	000f883a 	mov	r7,zero
81124f3c:	29403fcc 	andi	r5,r5,255
81124f40:	38000726 	beq	r7,zero,81124f60 <__gesf2+0x84>
81124f44:	28000826 	beq	r5,zero,81124f68 <__gesf2+0x8c>
81124f48:	00800044 	movi	r2,1
81124f4c:	f800283a 	ret
81124f50:	303ff026 	beq	r6,zero,81124f14 <__reset+0xfb104f14>
81124f54:	00bfff84 	movi	r2,-2
81124f58:	f800283a 	ret
81124f5c:	29403fcc 	andi	r5,r5,255
81124f60:	21400526 	beq	r4,r5,81124f78 <__gesf2+0x9c>
81124f64:	203ff826 	beq	r4,zero,81124f48 <__reset+0xfb104f48>
81124f68:	00bfffc4 	movi	r2,-1
81124f6c:	f800283a 	ret
81124f70:	403fe626 	beq	r8,zero,81124f0c <__reset+0xfb104f0c>
81124f74:	003ff706 	br	81124f54 <__reset+0xfb104f54>
81124f78:	18bffa16 	blt	r3,r2,81124f64 <__reset+0xfb104f64>
81124f7c:	10c00216 	blt	r2,r3,81124f88 <__gesf2+0xac>
81124f80:	323ff836 	bltu	r6,r8,81124f64 <__reset+0xfb104f64>
81124f84:	4180022e 	bgeu	r8,r6,81124f90 <__gesf2+0xb4>
81124f88:	203fef1e 	bne	r4,zero,81124f48 <__reset+0xfb104f48>
81124f8c:	003ff606 	br	81124f68 <__reset+0xfb104f68>
81124f90:	0005883a 	mov	r2,zero
81124f94:	f800283a 	ret

81124f98 <__lesf2>:
81124f98:	2004d5fa 	srli	r2,r4,23
81124f9c:	280cd5fa 	srli	r6,r5,23
81124fa0:	00c02034 	movhi	r3,128
81124fa4:	18ffffc4 	addi	r3,r3,-1
81124fa8:	10803fcc 	andi	r2,r2,255
81124fac:	01c03fc4 	movi	r7,255
81124fb0:	1910703a 	and	r8,r3,r4
81124fb4:	31803fcc 	andi	r6,r6,255
81124fb8:	1946703a 	and	r3,r3,r5
81124fbc:	2008d7fa 	srli	r4,r4,31
81124fc0:	280ad7fa 	srli	r5,r5,31
81124fc4:	11c01b26 	beq	r2,r7,81125034 <__lesf2+0x9c>
81124fc8:	01c03fc4 	movi	r7,255
81124fcc:	31c01126 	beq	r6,r7,81125014 <__lesf2+0x7c>
81124fd0:	1000071e 	bne	r2,zero,81124ff0 <__lesf2+0x58>
81124fd4:	400f003a 	cmpeq	r7,r8,zero
81124fd8:	21003fcc 	andi	r4,r4,255
81124fdc:	3000081e 	bne	r6,zero,81125000 <__lesf2+0x68>
81124fe0:	1800071e 	bne	r3,zero,81125000 <__lesf2+0x68>
81124fe4:	0005883a 	mov	r2,zero
81124fe8:	40000f1e 	bne	r8,zero,81125028 <__lesf2+0x90>
81124fec:	f800283a 	ret
81124ff0:	21003fcc 	andi	r4,r4,255
81124ff4:	30000a1e 	bne	r6,zero,81125020 <__lesf2+0x88>
81124ff8:	18000b26 	beq	r3,zero,81125028 <__lesf2+0x90>
81124ffc:	000f883a 	mov	r7,zero
81125000:	29403fcc 	andi	r5,r5,255
81125004:	38000726 	beq	r7,zero,81125024 <__lesf2+0x8c>
81125008:	28000826 	beq	r5,zero,8112502c <__lesf2+0x94>
8112500c:	00800044 	movi	r2,1
81125010:	f800283a 	ret
81125014:	183fee26 	beq	r3,zero,81124fd0 <__reset+0xfb104fd0>
81125018:	00800084 	movi	r2,2
8112501c:	f800283a 	ret
81125020:	29403fcc 	andi	r5,r5,255
81125024:	21400626 	beq	r4,r5,81125040 <__lesf2+0xa8>
81125028:	203ff826 	beq	r4,zero,8112500c <__reset+0xfb10500c>
8112502c:	00bfffc4 	movi	r2,-1
81125030:	f800283a 	ret
81125034:	403fe426 	beq	r8,zero,81124fc8 <__reset+0xfb104fc8>
81125038:	00800084 	movi	r2,2
8112503c:	f800283a 	ret
81125040:	30bff916 	blt	r6,r2,81125028 <__reset+0xfb105028>
81125044:	11800216 	blt	r2,r6,81125050 <__lesf2+0xb8>
81125048:	1a3ff736 	bltu	r3,r8,81125028 <__reset+0xfb105028>
8112504c:	40c0022e 	bgeu	r8,r3,81125058 <__lesf2+0xc0>
81125050:	203fee1e 	bne	r4,zero,8112500c <__reset+0xfb10500c>
81125054:	003ff506 	br	8112502c <__reset+0xfb10502c>
81125058:	0005883a 	mov	r2,zero
8112505c:	f800283a 	ret

81125060 <__adddf3>:
81125060:	02c00434 	movhi	r11,16
81125064:	5affffc4 	addi	r11,r11,-1
81125068:	2806d7fa 	srli	r3,r5,31
8112506c:	2ad4703a 	and	r10,r5,r11
81125070:	3ad2703a 	and	r9,r7,r11
81125074:	3804d53a 	srli	r2,r7,20
81125078:	3018d77a 	srli	r12,r6,29
8112507c:	280ad53a 	srli	r5,r5,20
81125080:	501490fa 	slli	r10,r10,3
81125084:	2010d77a 	srli	r8,r4,29
81125088:	481290fa 	slli	r9,r9,3
8112508c:	380ed7fa 	srli	r7,r7,31
81125090:	defffb04 	addi	sp,sp,-20
81125094:	de00012e 	bgeu	sp,et,8112509c <__adddf3+0x3c>
81125098:	003b68fa 	trap	3
8112509c:	dc800215 	stw	r18,8(sp)
811250a0:	dc400115 	stw	r17,4(sp)
811250a4:	dc000015 	stw	r16,0(sp)
811250a8:	dfc00415 	stw	ra,16(sp)
811250ac:	dcc00315 	stw	r19,12(sp)
811250b0:	1c803fcc 	andi	r18,r3,255
811250b4:	2c01ffcc 	andi	r16,r5,2047
811250b8:	5210b03a 	or	r8,r10,r8
811250bc:	202290fa 	slli	r17,r4,3
811250c0:	1081ffcc 	andi	r2,r2,2047
811250c4:	4b12b03a 	or	r9,r9,r12
811250c8:	300c90fa 	slli	r6,r6,3
811250cc:	91c07526 	beq	r18,r7,811252a4 <__adddf3+0x244>
811250d0:	8087c83a 	sub	r3,r16,r2
811250d4:	00c0ab0e 	bge	zero,r3,81125384 <__adddf3+0x324>
811250d8:	10002a1e 	bne	r2,zero,81125184 <__adddf3+0x124>
811250dc:	4984b03a 	or	r2,r9,r6
811250e0:	1000961e 	bne	r2,zero,8112533c <__adddf3+0x2dc>
811250e4:	888001cc 	andi	r2,r17,7
811250e8:	10000726 	beq	r2,zero,81125108 <__adddf3+0xa8>
811250ec:	888003cc 	andi	r2,r17,15
811250f0:	00c00104 	movi	r3,4
811250f4:	10c00426 	beq	r2,r3,81125108 <__adddf3+0xa8>
811250f8:	88c7883a 	add	r3,r17,r3
811250fc:	1c63803a 	cmpltu	r17,r3,r17
81125100:	4451883a 	add	r8,r8,r17
81125104:	1823883a 	mov	r17,r3
81125108:	4080202c 	andhi	r2,r8,128
8112510c:	10005926 	beq	r2,zero,81125274 <__adddf3+0x214>
81125110:	84000044 	addi	r16,r16,1
81125114:	0081ffc4 	movi	r2,2047
81125118:	8080ba26 	beq	r16,r2,81125404 <__adddf3+0x3a4>
8112511c:	00bfe034 	movhi	r2,65408
81125120:	10bfffc4 	addi	r2,r2,-1
81125124:	4090703a 	and	r8,r8,r2
81125128:	4004977a 	slli	r2,r8,29
8112512c:	4010927a 	slli	r8,r8,9
81125130:	8822d0fa 	srli	r17,r17,3
81125134:	8401ffcc 	andi	r16,r16,2047
81125138:	4010d33a 	srli	r8,r8,12
8112513c:	9007883a 	mov	r3,r18
81125140:	1444b03a 	or	r2,r2,r17
81125144:	8401ffcc 	andi	r16,r16,2047
81125148:	8020953a 	slli	r16,r16,20
8112514c:	18c03fcc 	andi	r3,r3,255
81125150:	01000434 	movhi	r4,16
81125154:	213fffc4 	addi	r4,r4,-1
81125158:	180697fa 	slli	r3,r3,31
8112515c:	4110703a 	and	r8,r8,r4
81125160:	4410b03a 	or	r8,r8,r16
81125164:	40c6b03a 	or	r3,r8,r3
81125168:	dfc00417 	ldw	ra,16(sp)
8112516c:	dcc00317 	ldw	r19,12(sp)
81125170:	dc800217 	ldw	r18,8(sp)
81125174:	dc400117 	ldw	r17,4(sp)
81125178:	dc000017 	ldw	r16,0(sp)
8112517c:	dec00504 	addi	sp,sp,20
81125180:	f800283a 	ret
81125184:	0081ffc4 	movi	r2,2047
81125188:	80bfd626 	beq	r16,r2,811250e4 <__reset+0xfb1050e4>
8112518c:	4a402034 	orhi	r9,r9,128
81125190:	00800e04 	movi	r2,56
81125194:	10c09f16 	blt	r2,r3,81125414 <__adddf3+0x3b4>
81125198:	008007c4 	movi	r2,31
8112519c:	10c0c216 	blt	r2,r3,811254a8 <__adddf3+0x448>
811251a0:	00800804 	movi	r2,32
811251a4:	10c5c83a 	sub	r2,r2,r3
811251a8:	488a983a 	sll	r5,r9,r2
811251ac:	30c8d83a 	srl	r4,r6,r3
811251b0:	3084983a 	sll	r2,r6,r2
811251b4:	48c6d83a 	srl	r3,r9,r3
811251b8:	290cb03a 	or	r6,r5,r4
811251bc:	1004c03a 	cmpne	r2,r2,zero
811251c0:	308cb03a 	or	r6,r6,r2
811251c4:	898dc83a 	sub	r6,r17,r6
811251c8:	89a3803a 	cmpltu	r17,r17,r6
811251cc:	40d1c83a 	sub	r8,r8,r3
811251d0:	4451c83a 	sub	r8,r8,r17
811251d4:	3023883a 	mov	r17,r6
811251d8:	4080202c 	andhi	r2,r8,128
811251dc:	10002326 	beq	r2,zero,8112526c <__adddf3+0x20c>
811251e0:	04c02034 	movhi	r19,128
811251e4:	9cffffc4 	addi	r19,r19,-1
811251e8:	44e6703a 	and	r19,r8,r19
811251ec:	98007626 	beq	r19,zero,811253c8 <__adddf3+0x368>
811251f0:	9809883a 	mov	r4,r19
811251f4:	11117bc0 	call	811117bc <__clzsi2>
811251f8:	10fffe04 	addi	r3,r2,-8
811251fc:	010007c4 	movi	r4,31
81125200:	20c07716 	blt	r4,r3,811253e0 <__adddf3+0x380>
81125204:	00800804 	movi	r2,32
81125208:	10c5c83a 	sub	r2,r2,r3
8112520c:	8884d83a 	srl	r2,r17,r2
81125210:	98d0983a 	sll	r8,r19,r3
81125214:	88e2983a 	sll	r17,r17,r3
81125218:	1204b03a 	or	r2,r2,r8
8112521c:	1c007416 	blt	r3,r16,811253f0 <__adddf3+0x390>
81125220:	1c21c83a 	sub	r16,r3,r16
81125224:	82000044 	addi	r8,r16,1
81125228:	00c007c4 	movi	r3,31
8112522c:	1a009116 	blt	r3,r8,81125474 <__adddf3+0x414>
81125230:	00c00804 	movi	r3,32
81125234:	1a07c83a 	sub	r3,r3,r8
81125238:	8a08d83a 	srl	r4,r17,r8
8112523c:	88e2983a 	sll	r17,r17,r3
81125240:	10c6983a 	sll	r3,r2,r3
81125244:	1210d83a 	srl	r8,r2,r8
81125248:	8804c03a 	cmpne	r2,r17,zero
8112524c:	1906b03a 	or	r3,r3,r4
81125250:	18a2b03a 	or	r17,r3,r2
81125254:	0021883a 	mov	r16,zero
81125258:	003fa206 	br	811250e4 <__reset+0xfb1050e4>
8112525c:	1890b03a 	or	r8,r3,r2
81125260:	40017d26 	beq	r8,zero,81125858 <__adddf3+0x7f8>
81125264:	1011883a 	mov	r8,r2
81125268:	1823883a 	mov	r17,r3
8112526c:	888001cc 	andi	r2,r17,7
81125270:	103f9e1e 	bne	r2,zero,811250ec <__reset+0xfb1050ec>
81125274:	4004977a 	slli	r2,r8,29
81125278:	8822d0fa 	srli	r17,r17,3
8112527c:	4010d0fa 	srli	r8,r8,3
81125280:	9007883a 	mov	r3,r18
81125284:	1444b03a 	or	r2,r2,r17
81125288:	0101ffc4 	movi	r4,2047
8112528c:	81002426 	beq	r16,r4,81125320 <__adddf3+0x2c0>
81125290:	8120703a 	and	r16,r16,r4
81125294:	01000434 	movhi	r4,16
81125298:	213fffc4 	addi	r4,r4,-1
8112529c:	4110703a 	and	r8,r8,r4
811252a0:	003fa806 	br	81125144 <__reset+0xfb105144>
811252a4:	8089c83a 	sub	r4,r16,r2
811252a8:	01005e0e 	bge	zero,r4,81125424 <__adddf3+0x3c4>
811252ac:	10002b26 	beq	r2,zero,8112535c <__adddf3+0x2fc>
811252b0:	0081ffc4 	movi	r2,2047
811252b4:	80bf8b26 	beq	r16,r2,811250e4 <__reset+0xfb1050e4>
811252b8:	4a402034 	orhi	r9,r9,128
811252bc:	00800e04 	movi	r2,56
811252c0:	1100a40e 	bge	r2,r4,81125554 <__adddf3+0x4f4>
811252c4:	498cb03a 	or	r6,r9,r6
811252c8:	300ac03a 	cmpne	r5,r6,zero
811252cc:	0013883a 	mov	r9,zero
811252d0:	2c4b883a 	add	r5,r5,r17
811252d4:	2c63803a 	cmpltu	r17,r5,r17
811252d8:	4a11883a 	add	r8,r9,r8
811252dc:	8a11883a 	add	r8,r17,r8
811252e0:	2823883a 	mov	r17,r5
811252e4:	4080202c 	andhi	r2,r8,128
811252e8:	103fe026 	beq	r2,zero,8112526c <__reset+0xfb10526c>
811252ec:	84000044 	addi	r16,r16,1
811252f0:	0081ffc4 	movi	r2,2047
811252f4:	8080d226 	beq	r16,r2,81125640 <__adddf3+0x5e0>
811252f8:	00bfe034 	movhi	r2,65408
811252fc:	10bfffc4 	addi	r2,r2,-1
81125300:	4090703a 	and	r8,r8,r2
81125304:	880ad07a 	srli	r5,r17,1
81125308:	400897fa 	slli	r4,r8,31
8112530c:	88c0004c 	andi	r3,r17,1
81125310:	28e2b03a 	or	r17,r5,r3
81125314:	4010d07a 	srli	r8,r8,1
81125318:	2462b03a 	or	r17,r4,r17
8112531c:	003f7106 	br	811250e4 <__reset+0xfb1050e4>
81125320:	4088b03a 	or	r4,r8,r2
81125324:	20014526 	beq	r4,zero,8112583c <__adddf3+0x7dc>
81125328:	01000434 	movhi	r4,16
8112532c:	42000234 	orhi	r8,r8,8
81125330:	213fffc4 	addi	r4,r4,-1
81125334:	4110703a 	and	r8,r8,r4
81125338:	003f8206 	br	81125144 <__reset+0xfb105144>
8112533c:	18ffffc4 	addi	r3,r3,-1
81125340:	1800491e 	bne	r3,zero,81125468 <__adddf3+0x408>
81125344:	898bc83a 	sub	r5,r17,r6
81125348:	8963803a 	cmpltu	r17,r17,r5
8112534c:	4251c83a 	sub	r8,r8,r9
81125350:	4451c83a 	sub	r8,r8,r17
81125354:	2823883a 	mov	r17,r5
81125358:	003f9f06 	br	811251d8 <__reset+0xfb1051d8>
8112535c:	4984b03a 	or	r2,r9,r6
81125360:	103f6026 	beq	r2,zero,811250e4 <__reset+0xfb1050e4>
81125364:	213fffc4 	addi	r4,r4,-1
81125368:	2000931e 	bne	r4,zero,811255b8 <__adddf3+0x558>
8112536c:	898d883a 	add	r6,r17,r6
81125370:	3463803a 	cmpltu	r17,r6,r17
81125374:	4251883a 	add	r8,r8,r9
81125378:	8a11883a 	add	r8,r17,r8
8112537c:	3023883a 	mov	r17,r6
81125380:	003fd806 	br	811252e4 <__reset+0xfb1052e4>
81125384:	1800541e 	bne	r3,zero,811254d8 <__adddf3+0x478>
81125388:	80800044 	addi	r2,r16,1
8112538c:	1081ffcc 	andi	r2,r2,2047
81125390:	00c00044 	movi	r3,1
81125394:	1880a00e 	bge	r3,r2,81125618 <__adddf3+0x5b8>
81125398:	8989c83a 	sub	r4,r17,r6
8112539c:	8905803a 	cmpltu	r2,r17,r4
811253a0:	4267c83a 	sub	r19,r8,r9
811253a4:	98a7c83a 	sub	r19,r19,r2
811253a8:	9880202c 	andhi	r2,r19,128
811253ac:	10006326 	beq	r2,zero,8112553c <__adddf3+0x4dc>
811253b0:	3463c83a 	sub	r17,r6,r17
811253b4:	4a07c83a 	sub	r3,r9,r8
811253b8:	344d803a 	cmpltu	r6,r6,r17
811253bc:	19a7c83a 	sub	r19,r3,r6
811253c0:	3825883a 	mov	r18,r7
811253c4:	983f8a1e 	bne	r19,zero,811251f0 <__reset+0xfb1051f0>
811253c8:	8809883a 	mov	r4,r17
811253cc:	11117bc0 	call	811117bc <__clzsi2>
811253d0:	10800804 	addi	r2,r2,32
811253d4:	10fffe04 	addi	r3,r2,-8
811253d8:	010007c4 	movi	r4,31
811253dc:	20ff890e 	bge	r4,r3,81125204 <__reset+0xfb105204>
811253e0:	10bff604 	addi	r2,r2,-40
811253e4:	8884983a 	sll	r2,r17,r2
811253e8:	0023883a 	mov	r17,zero
811253ec:	1c3f8c0e 	bge	r3,r16,81125220 <__reset+0xfb105220>
811253f0:	023fe034 	movhi	r8,65408
811253f4:	423fffc4 	addi	r8,r8,-1
811253f8:	80e1c83a 	sub	r16,r16,r3
811253fc:	1210703a 	and	r8,r2,r8
81125400:	003f3806 	br	811250e4 <__reset+0xfb1050e4>
81125404:	9007883a 	mov	r3,r18
81125408:	0011883a 	mov	r8,zero
8112540c:	0005883a 	mov	r2,zero
81125410:	003f4c06 	br	81125144 <__reset+0xfb105144>
81125414:	498cb03a 	or	r6,r9,r6
81125418:	300cc03a 	cmpne	r6,r6,zero
8112541c:	0007883a 	mov	r3,zero
81125420:	003f6806 	br	811251c4 <__reset+0xfb1051c4>
81125424:	20009c1e 	bne	r4,zero,81125698 <__adddf3+0x638>
81125428:	80800044 	addi	r2,r16,1
8112542c:	1141ffcc 	andi	r5,r2,2047
81125430:	01000044 	movi	r4,1
81125434:	2140670e 	bge	r4,r5,811255d4 <__adddf3+0x574>
81125438:	0101ffc4 	movi	r4,2047
8112543c:	11007f26 	beq	r2,r4,8112563c <__adddf3+0x5dc>
81125440:	898d883a 	add	r6,r17,r6
81125444:	4247883a 	add	r3,r8,r9
81125448:	3451803a 	cmpltu	r8,r6,r17
8112544c:	40d1883a 	add	r8,r8,r3
81125450:	402297fa 	slli	r17,r8,31
81125454:	300cd07a 	srli	r6,r6,1
81125458:	4010d07a 	srli	r8,r8,1
8112545c:	1021883a 	mov	r16,r2
81125460:	89a2b03a 	or	r17,r17,r6
81125464:	003f1f06 	br	811250e4 <__reset+0xfb1050e4>
81125468:	0081ffc4 	movi	r2,2047
8112546c:	80bf481e 	bne	r16,r2,81125190 <__reset+0xfb105190>
81125470:	003f1c06 	br	811250e4 <__reset+0xfb1050e4>
81125474:	843ff844 	addi	r16,r16,-31
81125478:	01000804 	movi	r4,32
8112547c:	1406d83a 	srl	r3,r2,r16
81125480:	41005026 	beq	r8,r4,811255c4 <__adddf3+0x564>
81125484:	01001004 	movi	r4,64
81125488:	2211c83a 	sub	r8,r4,r8
8112548c:	1204983a 	sll	r2,r2,r8
81125490:	88a2b03a 	or	r17,r17,r2
81125494:	8822c03a 	cmpne	r17,r17,zero
81125498:	1c62b03a 	or	r17,r3,r17
8112549c:	0011883a 	mov	r8,zero
811254a0:	0021883a 	mov	r16,zero
811254a4:	003f7106 	br	8112526c <__reset+0xfb10526c>
811254a8:	193ff804 	addi	r4,r3,-32
811254ac:	00800804 	movi	r2,32
811254b0:	4908d83a 	srl	r4,r9,r4
811254b4:	18804526 	beq	r3,r2,811255cc <__adddf3+0x56c>
811254b8:	00801004 	movi	r2,64
811254bc:	10c5c83a 	sub	r2,r2,r3
811254c0:	4886983a 	sll	r3,r9,r2
811254c4:	198cb03a 	or	r6,r3,r6
811254c8:	300cc03a 	cmpne	r6,r6,zero
811254cc:	218cb03a 	or	r6,r4,r6
811254d0:	0007883a 	mov	r3,zero
811254d4:	003f3b06 	br	811251c4 <__reset+0xfb1051c4>
811254d8:	80002a26 	beq	r16,zero,81125584 <__adddf3+0x524>
811254dc:	0101ffc4 	movi	r4,2047
811254e0:	11006826 	beq	r2,r4,81125684 <__adddf3+0x624>
811254e4:	00c7c83a 	sub	r3,zero,r3
811254e8:	42002034 	orhi	r8,r8,128
811254ec:	01000e04 	movi	r4,56
811254f0:	20c07c16 	blt	r4,r3,811256e4 <__adddf3+0x684>
811254f4:	010007c4 	movi	r4,31
811254f8:	20c0da16 	blt	r4,r3,81125864 <__adddf3+0x804>
811254fc:	01000804 	movi	r4,32
81125500:	20c9c83a 	sub	r4,r4,r3
81125504:	4114983a 	sll	r10,r8,r4
81125508:	88cad83a 	srl	r5,r17,r3
8112550c:	8908983a 	sll	r4,r17,r4
81125510:	40c6d83a 	srl	r3,r8,r3
81125514:	5162b03a 	or	r17,r10,r5
81125518:	2008c03a 	cmpne	r4,r4,zero
8112551c:	8922b03a 	or	r17,r17,r4
81125520:	3463c83a 	sub	r17,r6,r17
81125524:	48c7c83a 	sub	r3,r9,r3
81125528:	344d803a 	cmpltu	r6,r6,r17
8112552c:	1991c83a 	sub	r8,r3,r6
81125530:	1021883a 	mov	r16,r2
81125534:	3825883a 	mov	r18,r7
81125538:	003f2706 	br	811251d8 <__reset+0xfb1051d8>
8112553c:	24d0b03a 	or	r8,r4,r19
81125540:	40001b1e 	bne	r8,zero,811255b0 <__adddf3+0x550>
81125544:	0005883a 	mov	r2,zero
81125548:	0007883a 	mov	r3,zero
8112554c:	0021883a 	mov	r16,zero
81125550:	003f4d06 	br	81125288 <__reset+0xfb105288>
81125554:	008007c4 	movi	r2,31
81125558:	11003c16 	blt	r2,r4,8112564c <__adddf3+0x5ec>
8112555c:	00800804 	movi	r2,32
81125560:	1105c83a 	sub	r2,r2,r4
81125564:	488e983a 	sll	r7,r9,r2
81125568:	310ad83a 	srl	r5,r6,r4
8112556c:	3084983a 	sll	r2,r6,r2
81125570:	4912d83a 	srl	r9,r9,r4
81125574:	394ab03a 	or	r5,r7,r5
81125578:	1004c03a 	cmpne	r2,r2,zero
8112557c:	288ab03a 	or	r5,r5,r2
81125580:	003f5306 	br	811252d0 <__reset+0xfb1052d0>
81125584:	4448b03a 	or	r4,r8,r17
81125588:	20003e26 	beq	r4,zero,81125684 <__adddf3+0x624>
8112558c:	00c6303a 	nor	r3,zero,r3
81125590:	18003a1e 	bne	r3,zero,8112567c <__adddf3+0x61c>
81125594:	3463c83a 	sub	r17,r6,r17
81125598:	4a07c83a 	sub	r3,r9,r8
8112559c:	344d803a 	cmpltu	r6,r6,r17
811255a0:	1991c83a 	sub	r8,r3,r6
811255a4:	1021883a 	mov	r16,r2
811255a8:	3825883a 	mov	r18,r7
811255ac:	003f0a06 	br	811251d8 <__reset+0xfb1051d8>
811255b0:	2023883a 	mov	r17,r4
811255b4:	003f0d06 	br	811251ec <__reset+0xfb1051ec>
811255b8:	0081ffc4 	movi	r2,2047
811255bc:	80bf3f1e 	bne	r16,r2,811252bc <__reset+0xfb1052bc>
811255c0:	003ec806 	br	811250e4 <__reset+0xfb1050e4>
811255c4:	0005883a 	mov	r2,zero
811255c8:	003fb106 	br	81125490 <__reset+0xfb105490>
811255cc:	0007883a 	mov	r3,zero
811255d0:	003fbc06 	br	811254c4 <__reset+0xfb1054c4>
811255d4:	4444b03a 	or	r2,r8,r17
811255d8:	8000871e 	bne	r16,zero,811257f8 <__adddf3+0x798>
811255dc:	1000ba26 	beq	r2,zero,811258c8 <__adddf3+0x868>
811255e0:	4984b03a 	or	r2,r9,r6
811255e4:	103ebf26 	beq	r2,zero,811250e4 <__reset+0xfb1050e4>
811255e8:	8985883a 	add	r2,r17,r6
811255ec:	4247883a 	add	r3,r8,r9
811255f0:	1451803a 	cmpltu	r8,r2,r17
811255f4:	40d1883a 	add	r8,r8,r3
811255f8:	40c0202c 	andhi	r3,r8,128
811255fc:	1023883a 	mov	r17,r2
81125600:	183f1a26 	beq	r3,zero,8112526c <__reset+0xfb10526c>
81125604:	00bfe034 	movhi	r2,65408
81125608:	10bfffc4 	addi	r2,r2,-1
8112560c:	2021883a 	mov	r16,r4
81125610:	4090703a 	and	r8,r8,r2
81125614:	003eb306 	br	811250e4 <__reset+0xfb1050e4>
81125618:	4444b03a 	or	r2,r8,r17
8112561c:	8000291e 	bne	r16,zero,811256c4 <__adddf3+0x664>
81125620:	10004b1e 	bne	r2,zero,81125750 <__adddf3+0x6f0>
81125624:	4990b03a 	or	r8,r9,r6
81125628:	40008b26 	beq	r8,zero,81125858 <__adddf3+0x7f8>
8112562c:	4811883a 	mov	r8,r9
81125630:	3023883a 	mov	r17,r6
81125634:	3825883a 	mov	r18,r7
81125638:	003eaa06 	br	811250e4 <__reset+0xfb1050e4>
8112563c:	1021883a 	mov	r16,r2
81125640:	0011883a 	mov	r8,zero
81125644:	0005883a 	mov	r2,zero
81125648:	003f0f06 	br	81125288 <__reset+0xfb105288>
8112564c:	217ff804 	addi	r5,r4,-32
81125650:	00800804 	movi	r2,32
81125654:	494ad83a 	srl	r5,r9,r5
81125658:	20807d26 	beq	r4,r2,81125850 <__adddf3+0x7f0>
8112565c:	00801004 	movi	r2,64
81125660:	1109c83a 	sub	r4,r2,r4
81125664:	4912983a 	sll	r9,r9,r4
81125668:	498cb03a 	or	r6,r9,r6
8112566c:	300cc03a 	cmpne	r6,r6,zero
81125670:	298ab03a 	or	r5,r5,r6
81125674:	0013883a 	mov	r9,zero
81125678:	003f1506 	br	811252d0 <__reset+0xfb1052d0>
8112567c:	0101ffc4 	movi	r4,2047
81125680:	113f9a1e 	bne	r2,r4,811254ec <__reset+0xfb1054ec>
81125684:	4811883a 	mov	r8,r9
81125688:	3023883a 	mov	r17,r6
8112568c:	1021883a 	mov	r16,r2
81125690:	3825883a 	mov	r18,r7
81125694:	003e9306 	br	811250e4 <__reset+0xfb1050e4>
81125698:	8000161e 	bne	r16,zero,811256f4 <__adddf3+0x694>
8112569c:	444ab03a 	or	r5,r8,r17
811256a0:	28005126 	beq	r5,zero,811257e8 <__adddf3+0x788>
811256a4:	0108303a 	nor	r4,zero,r4
811256a8:	20004d1e 	bne	r4,zero,811257e0 <__adddf3+0x780>
811256ac:	89a3883a 	add	r17,r17,r6
811256b0:	4253883a 	add	r9,r8,r9
811256b4:	898d803a 	cmpltu	r6,r17,r6
811256b8:	3251883a 	add	r8,r6,r9
811256bc:	1021883a 	mov	r16,r2
811256c0:	003f0806 	br	811252e4 <__reset+0xfb1052e4>
811256c4:	1000301e 	bne	r2,zero,81125788 <__adddf3+0x728>
811256c8:	4984b03a 	or	r2,r9,r6
811256cc:	10007126 	beq	r2,zero,81125894 <__adddf3+0x834>
811256d0:	4811883a 	mov	r8,r9
811256d4:	3023883a 	mov	r17,r6
811256d8:	3825883a 	mov	r18,r7
811256dc:	0401ffc4 	movi	r16,2047
811256e0:	003e8006 	br	811250e4 <__reset+0xfb1050e4>
811256e4:	4462b03a 	or	r17,r8,r17
811256e8:	8822c03a 	cmpne	r17,r17,zero
811256ec:	0007883a 	mov	r3,zero
811256f0:	003f8b06 	br	81125520 <__reset+0xfb105520>
811256f4:	0141ffc4 	movi	r5,2047
811256f8:	11403b26 	beq	r2,r5,811257e8 <__adddf3+0x788>
811256fc:	0109c83a 	sub	r4,zero,r4
81125700:	42002034 	orhi	r8,r8,128
81125704:	01400e04 	movi	r5,56
81125708:	29006716 	blt	r5,r4,811258a8 <__adddf3+0x848>
8112570c:	014007c4 	movi	r5,31
81125710:	29007016 	blt	r5,r4,811258d4 <__adddf3+0x874>
81125714:	01400804 	movi	r5,32
81125718:	290bc83a 	sub	r5,r5,r4
8112571c:	4154983a 	sll	r10,r8,r5
81125720:	890ed83a 	srl	r7,r17,r4
81125724:	894a983a 	sll	r5,r17,r5
81125728:	4108d83a 	srl	r4,r8,r4
8112572c:	51e2b03a 	or	r17,r10,r7
81125730:	280ac03a 	cmpne	r5,r5,zero
81125734:	8962b03a 	or	r17,r17,r5
81125738:	89a3883a 	add	r17,r17,r6
8112573c:	2253883a 	add	r9,r4,r9
81125740:	898d803a 	cmpltu	r6,r17,r6
81125744:	3251883a 	add	r8,r6,r9
81125748:	1021883a 	mov	r16,r2
8112574c:	003ee506 	br	811252e4 <__reset+0xfb1052e4>
81125750:	4984b03a 	or	r2,r9,r6
81125754:	103e6326 	beq	r2,zero,811250e4 <__reset+0xfb1050e4>
81125758:	8987c83a 	sub	r3,r17,r6
8112575c:	88c9803a 	cmpltu	r4,r17,r3
81125760:	4245c83a 	sub	r2,r8,r9
81125764:	1105c83a 	sub	r2,r2,r4
81125768:	1100202c 	andhi	r4,r2,128
8112576c:	203ebb26 	beq	r4,zero,8112525c <__reset+0xfb10525c>
81125770:	3463c83a 	sub	r17,r6,r17
81125774:	4a07c83a 	sub	r3,r9,r8
81125778:	344d803a 	cmpltu	r6,r6,r17
8112577c:	1991c83a 	sub	r8,r3,r6
81125780:	3825883a 	mov	r18,r7
81125784:	003e5706 	br	811250e4 <__reset+0xfb1050e4>
81125788:	4984b03a 	or	r2,r9,r6
8112578c:	10002e26 	beq	r2,zero,81125848 <__adddf3+0x7e8>
81125790:	4004d0fa 	srli	r2,r8,3
81125794:	8822d0fa 	srli	r17,r17,3
81125798:	4010977a 	slli	r8,r8,29
8112579c:	10c0022c 	andhi	r3,r2,8
811257a0:	4462b03a 	or	r17,r8,r17
811257a4:	18000826 	beq	r3,zero,811257c8 <__adddf3+0x768>
811257a8:	4808d0fa 	srli	r4,r9,3
811257ac:	20c0022c 	andhi	r3,r4,8
811257b0:	1800051e 	bne	r3,zero,811257c8 <__adddf3+0x768>
811257b4:	300cd0fa 	srli	r6,r6,3
811257b8:	4806977a 	slli	r3,r9,29
811257bc:	2005883a 	mov	r2,r4
811257c0:	3825883a 	mov	r18,r7
811257c4:	19a2b03a 	or	r17,r3,r6
811257c8:	8810d77a 	srli	r8,r17,29
811257cc:	100490fa 	slli	r2,r2,3
811257d0:	882290fa 	slli	r17,r17,3
811257d4:	0401ffc4 	movi	r16,2047
811257d8:	4090b03a 	or	r8,r8,r2
811257dc:	003e4106 	br	811250e4 <__reset+0xfb1050e4>
811257e0:	0141ffc4 	movi	r5,2047
811257e4:	117fc71e 	bne	r2,r5,81125704 <__reset+0xfb105704>
811257e8:	4811883a 	mov	r8,r9
811257ec:	3023883a 	mov	r17,r6
811257f0:	1021883a 	mov	r16,r2
811257f4:	003e3b06 	br	811250e4 <__reset+0xfb1050e4>
811257f8:	10002f26 	beq	r2,zero,811258b8 <__adddf3+0x858>
811257fc:	4984b03a 	or	r2,r9,r6
81125800:	10001126 	beq	r2,zero,81125848 <__adddf3+0x7e8>
81125804:	4004d0fa 	srli	r2,r8,3
81125808:	8822d0fa 	srli	r17,r17,3
8112580c:	4010977a 	slli	r8,r8,29
81125810:	10c0022c 	andhi	r3,r2,8
81125814:	4462b03a 	or	r17,r8,r17
81125818:	183feb26 	beq	r3,zero,811257c8 <__reset+0xfb1057c8>
8112581c:	4808d0fa 	srli	r4,r9,3
81125820:	20c0022c 	andhi	r3,r4,8
81125824:	183fe81e 	bne	r3,zero,811257c8 <__reset+0xfb1057c8>
81125828:	300cd0fa 	srli	r6,r6,3
8112582c:	4806977a 	slli	r3,r9,29
81125830:	2005883a 	mov	r2,r4
81125834:	19a2b03a 	or	r17,r3,r6
81125838:	003fe306 	br	811257c8 <__reset+0xfb1057c8>
8112583c:	0011883a 	mov	r8,zero
81125840:	0005883a 	mov	r2,zero
81125844:	003e3f06 	br	81125144 <__reset+0xfb105144>
81125848:	0401ffc4 	movi	r16,2047
8112584c:	003e2506 	br	811250e4 <__reset+0xfb1050e4>
81125850:	0013883a 	mov	r9,zero
81125854:	003f8406 	br	81125668 <__reset+0xfb105668>
81125858:	0005883a 	mov	r2,zero
8112585c:	0007883a 	mov	r3,zero
81125860:	003e8906 	br	81125288 <__reset+0xfb105288>
81125864:	197ff804 	addi	r5,r3,-32
81125868:	01000804 	movi	r4,32
8112586c:	414ad83a 	srl	r5,r8,r5
81125870:	19002426 	beq	r3,r4,81125904 <__adddf3+0x8a4>
81125874:	01001004 	movi	r4,64
81125878:	20c7c83a 	sub	r3,r4,r3
8112587c:	40c6983a 	sll	r3,r8,r3
81125880:	1c46b03a 	or	r3,r3,r17
81125884:	1806c03a 	cmpne	r3,r3,zero
81125888:	28e2b03a 	or	r17,r5,r3
8112588c:	0007883a 	mov	r3,zero
81125890:	003f2306 	br	81125520 <__reset+0xfb105520>
81125894:	0007883a 	mov	r3,zero
81125898:	5811883a 	mov	r8,r11
8112589c:	00bfffc4 	movi	r2,-1
811258a0:	0401ffc4 	movi	r16,2047
811258a4:	003e7806 	br	81125288 <__reset+0xfb105288>
811258a8:	4462b03a 	or	r17,r8,r17
811258ac:	8822c03a 	cmpne	r17,r17,zero
811258b0:	0009883a 	mov	r4,zero
811258b4:	003fa006 	br	81125738 <__reset+0xfb105738>
811258b8:	4811883a 	mov	r8,r9
811258bc:	3023883a 	mov	r17,r6
811258c0:	0401ffc4 	movi	r16,2047
811258c4:	003e0706 	br	811250e4 <__reset+0xfb1050e4>
811258c8:	4811883a 	mov	r8,r9
811258cc:	3023883a 	mov	r17,r6
811258d0:	003e0406 	br	811250e4 <__reset+0xfb1050e4>
811258d4:	21fff804 	addi	r7,r4,-32
811258d8:	01400804 	movi	r5,32
811258dc:	41ced83a 	srl	r7,r8,r7
811258e0:	21400a26 	beq	r4,r5,8112590c <__adddf3+0x8ac>
811258e4:	01401004 	movi	r5,64
811258e8:	2909c83a 	sub	r4,r5,r4
811258ec:	4108983a 	sll	r4,r8,r4
811258f0:	2448b03a 	or	r4,r4,r17
811258f4:	2008c03a 	cmpne	r4,r4,zero
811258f8:	3922b03a 	or	r17,r7,r4
811258fc:	0009883a 	mov	r4,zero
81125900:	003f8d06 	br	81125738 <__reset+0xfb105738>
81125904:	0007883a 	mov	r3,zero
81125908:	003fdd06 	br	81125880 <__reset+0xfb105880>
8112590c:	0009883a 	mov	r4,zero
81125910:	003ff706 	br	811258f0 <__reset+0xfb1058f0>

81125914 <__divdf3>:
81125914:	defff204 	addi	sp,sp,-56
81125918:	de00012e 	bgeu	sp,et,81125920 <__divdf3+0xc>
8112591c:	003b68fa 	trap	3
81125920:	dd400915 	stw	r21,36(sp)
81125924:	282ad53a 	srli	r21,r5,20
81125928:	dd000815 	stw	r20,32(sp)
8112592c:	2828d7fa 	srli	r20,r5,31
81125930:	dc000415 	stw	r16,16(sp)
81125934:	04000434 	movhi	r16,16
81125938:	df000c15 	stw	fp,48(sp)
8112593c:	843fffc4 	addi	r16,r16,-1
81125940:	dfc00d15 	stw	ra,52(sp)
81125944:	ddc00b15 	stw	r23,44(sp)
81125948:	dd800a15 	stw	r22,40(sp)
8112594c:	dcc00715 	stw	r19,28(sp)
81125950:	dc800615 	stw	r18,24(sp)
81125954:	dc400515 	stw	r17,20(sp)
81125958:	ad41ffcc 	andi	r21,r21,2047
8112595c:	2c20703a 	and	r16,r5,r16
81125960:	a7003fcc 	andi	fp,r20,255
81125964:	a8006126 	beq	r21,zero,81125aec <__divdf3+0x1d8>
81125968:	0081ffc4 	movi	r2,2047
8112596c:	2025883a 	mov	r18,r4
81125970:	a8803726 	beq	r21,r2,81125a50 <__divdf3+0x13c>
81125974:	80800434 	orhi	r2,r16,16
81125978:	100490fa 	slli	r2,r2,3
8112597c:	2020d77a 	srli	r16,r4,29
81125980:	202490fa 	slli	r18,r4,3
81125984:	ad7f0044 	addi	r21,r21,-1023
81125988:	80a0b03a 	or	r16,r16,r2
8112598c:	0027883a 	mov	r19,zero
81125990:	0013883a 	mov	r9,zero
81125994:	3804d53a 	srli	r2,r7,20
81125998:	382cd7fa 	srli	r22,r7,31
8112599c:	04400434 	movhi	r17,16
811259a0:	8c7fffc4 	addi	r17,r17,-1
811259a4:	1081ffcc 	andi	r2,r2,2047
811259a8:	3011883a 	mov	r8,r6
811259ac:	3c62703a 	and	r17,r7,r17
811259b0:	b5c03fcc 	andi	r23,r22,255
811259b4:	10006c26 	beq	r2,zero,81125b68 <__divdf3+0x254>
811259b8:	00c1ffc4 	movi	r3,2047
811259bc:	10c06426 	beq	r2,r3,81125b50 <__divdf3+0x23c>
811259c0:	88c00434 	orhi	r3,r17,16
811259c4:	180690fa 	slli	r3,r3,3
811259c8:	3022d77a 	srli	r17,r6,29
811259cc:	301090fa 	slli	r8,r6,3
811259d0:	10bf0044 	addi	r2,r2,-1023
811259d4:	88e2b03a 	or	r17,r17,r3
811259d8:	000f883a 	mov	r7,zero
811259dc:	a58cf03a 	xor	r6,r20,r22
811259e0:	3cc8b03a 	or	r4,r7,r19
811259e4:	a8abc83a 	sub	r21,r21,r2
811259e8:	008003c4 	movi	r2,15
811259ec:	3007883a 	mov	r3,r6
811259f0:	34c03fcc 	andi	r19,r6,255
811259f4:	11009036 	bltu	r2,r4,81125c38 <__divdf3+0x324>
811259f8:	200890ba 	slli	r4,r4,2
811259fc:	00a044b4 	movhi	r2,33042
81125a00:	10968404 	addi	r2,r2,23056
81125a04:	2089883a 	add	r4,r4,r2
81125a08:	20800017 	ldw	r2,0(r4)
81125a0c:	1000683a 	jmp	r2
81125a10:	81125c38 	rdprs	r4,r16,18800
81125a14:	81125a88 	cmpgei	r4,r16,18794
81125a18:	81125c28 	cmpgeui	r4,r16,18800
81125a1c:	81125a7c 	xorhi	r4,r16,18793
81125a20:	81125c28 	cmpgeui	r4,r16,18800
81125a24:	81125bfc 	xorhi	r4,r16,18799
81125a28:	81125c28 	cmpgeui	r4,r16,18800
81125a2c:	81125a7c 	xorhi	r4,r16,18793
81125a30:	81125a88 	cmpgei	r4,r16,18794
81125a34:	81125a88 	cmpgei	r4,r16,18794
81125a38:	81125bfc 	xorhi	r4,r16,18799
81125a3c:	81125a7c 	xorhi	r4,r16,18793
81125a40:	81125a6c 	andhi	r4,r16,18793
81125a44:	81125a6c 	andhi	r4,r16,18793
81125a48:	81125a6c 	andhi	r4,r16,18793
81125a4c:	81125f1c 	xori	r4,r16,18812
81125a50:	2404b03a 	or	r2,r4,r16
81125a54:	1000661e 	bne	r2,zero,81125bf0 <__divdf3+0x2dc>
81125a58:	04c00204 	movi	r19,8
81125a5c:	0021883a 	mov	r16,zero
81125a60:	0025883a 	mov	r18,zero
81125a64:	02400084 	movi	r9,2
81125a68:	003fca06 	br	81125994 <__reset+0xfb105994>
81125a6c:	8023883a 	mov	r17,r16
81125a70:	9011883a 	mov	r8,r18
81125a74:	e02f883a 	mov	r23,fp
81125a78:	480f883a 	mov	r7,r9
81125a7c:	00800084 	movi	r2,2
81125a80:	3881311e 	bne	r7,r2,81125f48 <__divdf3+0x634>
81125a84:	b827883a 	mov	r19,r23
81125a88:	98c0004c 	andi	r3,r19,1
81125a8c:	0081ffc4 	movi	r2,2047
81125a90:	000b883a 	mov	r5,zero
81125a94:	0025883a 	mov	r18,zero
81125a98:	1004953a 	slli	r2,r2,20
81125a9c:	18c03fcc 	andi	r3,r3,255
81125aa0:	04400434 	movhi	r17,16
81125aa4:	8c7fffc4 	addi	r17,r17,-1
81125aa8:	180697fa 	slli	r3,r3,31
81125aac:	2c4a703a 	and	r5,r5,r17
81125ab0:	288ab03a 	or	r5,r5,r2
81125ab4:	28c6b03a 	or	r3,r5,r3
81125ab8:	9005883a 	mov	r2,r18
81125abc:	dfc00d17 	ldw	ra,52(sp)
81125ac0:	df000c17 	ldw	fp,48(sp)
81125ac4:	ddc00b17 	ldw	r23,44(sp)
81125ac8:	dd800a17 	ldw	r22,40(sp)
81125acc:	dd400917 	ldw	r21,36(sp)
81125ad0:	dd000817 	ldw	r20,32(sp)
81125ad4:	dcc00717 	ldw	r19,28(sp)
81125ad8:	dc800617 	ldw	r18,24(sp)
81125adc:	dc400517 	ldw	r17,20(sp)
81125ae0:	dc000417 	ldw	r16,16(sp)
81125ae4:	dec00e04 	addi	sp,sp,56
81125ae8:	f800283a 	ret
81125aec:	2404b03a 	or	r2,r4,r16
81125af0:	2027883a 	mov	r19,r4
81125af4:	10003926 	beq	r2,zero,81125bdc <__divdf3+0x2c8>
81125af8:	80012e26 	beq	r16,zero,81125fb4 <__divdf3+0x6a0>
81125afc:	8009883a 	mov	r4,r16
81125b00:	d9800315 	stw	r6,12(sp)
81125b04:	d9c00215 	stw	r7,8(sp)
81125b08:	11117bc0 	call	811117bc <__clzsi2>
81125b0c:	d9800317 	ldw	r6,12(sp)
81125b10:	d9c00217 	ldw	r7,8(sp)
81125b14:	113ffd44 	addi	r4,r2,-11
81125b18:	00c00704 	movi	r3,28
81125b1c:	19012116 	blt	r3,r4,81125fa4 <__divdf3+0x690>
81125b20:	00c00744 	movi	r3,29
81125b24:	147ffe04 	addi	r17,r2,-8
81125b28:	1907c83a 	sub	r3,r3,r4
81125b2c:	8460983a 	sll	r16,r16,r17
81125b30:	98c6d83a 	srl	r3,r19,r3
81125b34:	9c64983a 	sll	r18,r19,r17
81125b38:	1c20b03a 	or	r16,r3,r16
81125b3c:	1080fcc4 	addi	r2,r2,1011
81125b40:	00abc83a 	sub	r21,zero,r2
81125b44:	0027883a 	mov	r19,zero
81125b48:	0013883a 	mov	r9,zero
81125b4c:	003f9106 	br	81125994 <__reset+0xfb105994>
81125b50:	3446b03a 	or	r3,r6,r17
81125b54:	18001f1e 	bne	r3,zero,81125bd4 <__divdf3+0x2c0>
81125b58:	0023883a 	mov	r17,zero
81125b5c:	0011883a 	mov	r8,zero
81125b60:	01c00084 	movi	r7,2
81125b64:	003f9d06 	br	811259dc <__reset+0xfb1059dc>
81125b68:	3446b03a 	or	r3,r6,r17
81125b6c:	18001526 	beq	r3,zero,81125bc4 <__divdf3+0x2b0>
81125b70:	88011b26 	beq	r17,zero,81125fe0 <__divdf3+0x6cc>
81125b74:	8809883a 	mov	r4,r17
81125b78:	d9800315 	stw	r6,12(sp)
81125b7c:	da400115 	stw	r9,4(sp)
81125b80:	11117bc0 	call	811117bc <__clzsi2>
81125b84:	d9800317 	ldw	r6,12(sp)
81125b88:	da400117 	ldw	r9,4(sp)
81125b8c:	113ffd44 	addi	r4,r2,-11
81125b90:	00c00704 	movi	r3,28
81125b94:	19010e16 	blt	r3,r4,81125fd0 <__divdf3+0x6bc>
81125b98:	00c00744 	movi	r3,29
81125b9c:	123ffe04 	addi	r8,r2,-8
81125ba0:	1907c83a 	sub	r3,r3,r4
81125ba4:	8a22983a 	sll	r17,r17,r8
81125ba8:	30c6d83a 	srl	r3,r6,r3
81125bac:	3210983a 	sll	r8,r6,r8
81125bb0:	1c62b03a 	or	r17,r3,r17
81125bb4:	1080fcc4 	addi	r2,r2,1011
81125bb8:	0085c83a 	sub	r2,zero,r2
81125bbc:	000f883a 	mov	r7,zero
81125bc0:	003f8606 	br	811259dc <__reset+0xfb1059dc>
81125bc4:	0023883a 	mov	r17,zero
81125bc8:	0011883a 	mov	r8,zero
81125bcc:	01c00044 	movi	r7,1
81125bd0:	003f8206 	br	811259dc <__reset+0xfb1059dc>
81125bd4:	01c000c4 	movi	r7,3
81125bd8:	003f8006 	br	811259dc <__reset+0xfb1059dc>
81125bdc:	04c00104 	movi	r19,4
81125be0:	0021883a 	mov	r16,zero
81125be4:	0025883a 	mov	r18,zero
81125be8:	02400044 	movi	r9,1
81125bec:	003f6906 	br	81125994 <__reset+0xfb105994>
81125bf0:	04c00304 	movi	r19,12
81125bf4:	024000c4 	movi	r9,3
81125bf8:	003f6606 	br	81125994 <__reset+0xfb105994>
81125bfc:	01400434 	movhi	r5,16
81125c00:	0007883a 	mov	r3,zero
81125c04:	297fffc4 	addi	r5,r5,-1
81125c08:	04bfffc4 	movi	r18,-1
81125c0c:	0081ffc4 	movi	r2,2047
81125c10:	003fa106 	br	81125a98 <__reset+0xfb105a98>
81125c14:	00c00044 	movi	r3,1
81125c18:	1887c83a 	sub	r3,r3,r2
81125c1c:	01000e04 	movi	r4,56
81125c20:	20c1210e 	bge	r4,r3,811260a8 <__divdf3+0x794>
81125c24:	98c0004c 	andi	r3,r19,1
81125c28:	0005883a 	mov	r2,zero
81125c2c:	000b883a 	mov	r5,zero
81125c30:	0025883a 	mov	r18,zero
81125c34:	003f9806 	br	81125a98 <__reset+0xfb105a98>
81125c38:	8c00fd36 	bltu	r17,r16,81126030 <__divdf3+0x71c>
81125c3c:	8440fb26 	beq	r16,r17,8112602c <__divdf3+0x718>
81125c40:	8007883a 	mov	r3,r16
81125c44:	ad7fffc4 	addi	r21,r21,-1
81125c48:	0021883a 	mov	r16,zero
81125c4c:	4004d63a 	srli	r2,r8,24
81125c50:	8822923a 	slli	r17,r17,8
81125c54:	1809883a 	mov	r4,r3
81125c58:	402c923a 	slli	r22,r8,8
81125c5c:	88b8b03a 	or	fp,r17,r2
81125c60:	e028d43a 	srli	r20,fp,16
81125c64:	d8c00015 	stw	r3,0(sp)
81125c68:	e5ffffcc 	andi	r23,fp,65535
81125c6c:	a00b883a 	mov	r5,r20
81125c70:	1124da80 	call	81124da8 <__udivsi3>
81125c74:	d8c00017 	ldw	r3,0(sp)
81125c78:	a00b883a 	mov	r5,r20
81125c7c:	d8800315 	stw	r2,12(sp)
81125c80:	1809883a 	mov	r4,r3
81125c84:	1124e0c0 	call	81124e0c <__umodsi3>
81125c88:	d9800317 	ldw	r6,12(sp)
81125c8c:	1006943a 	slli	r3,r2,16
81125c90:	9004d43a 	srli	r2,r18,16
81125c94:	b9a3383a 	mul	r17,r23,r6
81125c98:	10c4b03a 	or	r2,r2,r3
81125c9c:	1440062e 	bgeu	r2,r17,81125cb8 <__divdf3+0x3a4>
81125ca0:	1705883a 	add	r2,r2,fp
81125ca4:	30ffffc4 	addi	r3,r6,-1
81125ca8:	1700ee36 	bltu	r2,fp,81126064 <__divdf3+0x750>
81125cac:	1440ed2e 	bgeu	r2,r17,81126064 <__divdf3+0x750>
81125cb0:	31bfff84 	addi	r6,r6,-2
81125cb4:	1705883a 	add	r2,r2,fp
81125cb8:	1463c83a 	sub	r17,r2,r17
81125cbc:	a00b883a 	mov	r5,r20
81125cc0:	8809883a 	mov	r4,r17
81125cc4:	d9800315 	stw	r6,12(sp)
81125cc8:	1124da80 	call	81124da8 <__udivsi3>
81125ccc:	a00b883a 	mov	r5,r20
81125cd0:	8809883a 	mov	r4,r17
81125cd4:	d8800215 	stw	r2,8(sp)
81125cd8:	1124e0c0 	call	81124e0c <__umodsi3>
81125cdc:	d9c00217 	ldw	r7,8(sp)
81125ce0:	1004943a 	slli	r2,r2,16
81125ce4:	94bfffcc 	andi	r18,r18,65535
81125ce8:	b9d1383a 	mul	r8,r23,r7
81125cec:	90a4b03a 	or	r18,r18,r2
81125cf0:	d9800317 	ldw	r6,12(sp)
81125cf4:	9200062e 	bgeu	r18,r8,81125d10 <__divdf3+0x3fc>
81125cf8:	9725883a 	add	r18,r18,fp
81125cfc:	38bfffc4 	addi	r2,r7,-1
81125d00:	9700d636 	bltu	r18,fp,8112605c <__divdf3+0x748>
81125d04:	9200d52e 	bgeu	r18,r8,8112605c <__divdf3+0x748>
81125d08:	39ffff84 	addi	r7,r7,-2
81125d0c:	9725883a 	add	r18,r18,fp
81125d10:	3004943a 	slli	r2,r6,16
81125d14:	b012d43a 	srli	r9,r22,16
81125d18:	b1bfffcc 	andi	r6,r22,65535
81125d1c:	11e2b03a 	or	r17,r2,r7
81125d20:	8806d43a 	srli	r3,r17,16
81125d24:	893fffcc 	andi	r4,r17,65535
81125d28:	218b383a 	mul	r5,r4,r6
81125d2c:	30c5383a 	mul	r2,r6,r3
81125d30:	2249383a 	mul	r4,r4,r9
81125d34:	280ed43a 	srli	r7,r5,16
81125d38:	9225c83a 	sub	r18,r18,r8
81125d3c:	2089883a 	add	r4,r4,r2
81125d40:	3909883a 	add	r4,r7,r4
81125d44:	1a47383a 	mul	r3,r3,r9
81125d48:	2080022e 	bgeu	r4,r2,81125d54 <__divdf3+0x440>
81125d4c:	00800074 	movhi	r2,1
81125d50:	1887883a 	add	r3,r3,r2
81125d54:	2004d43a 	srli	r2,r4,16
81125d58:	2008943a 	slli	r4,r4,16
81125d5c:	297fffcc 	andi	r5,r5,65535
81125d60:	10c7883a 	add	r3,r2,r3
81125d64:	2149883a 	add	r4,r4,r5
81125d68:	90c0a536 	bltu	r18,r3,81126000 <__divdf3+0x6ec>
81125d6c:	90c0bf26 	beq	r18,r3,8112606c <__divdf3+0x758>
81125d70:	90c7c83a 	sub	r3,r18,r3
81125d74:	810fc83a 	sub	r7,r16,r4
81125d78:	81e5803a 	cmpltu	r18,r16,r7
81125d7c:	1ca5c83a 	sub	r18,r3,r18
81125d80:	e480c126 	beq	fp,r18,81126088 <__divdf3+0x774>
81125d84:	a00b883a 	mov	r5,r20
81125d88:	9009883a 	mov	r4,r18
81125d8c:	d9800315 	stw	r6,12(sp)
81125d90:	d9c00215 	stw	r7,8(sp)
81125d94:	da400115 	stw	r9,4(sp)
81125d98:	1124da80 	call	81124da8 <__udivsi3>
81125d9c:	a00b883a 	mov	r5,r20
81125da0:	9009883a 	mov	r4,r18
81125da4:	d8800015 	stw	r2,0(sp)
81125da8:	1124e0c0 	call	81124e0c <__umodsi3>
81125dac:	d9c00217 	ldw	r7,8(sp)
81125db0:	da000017 	ldw	r8,0(sp)
81125db4:	1006943a 	slli	r3,r2,16
81125db8:	3804d43a 	srli	r2,r7,16
81125dbc:	ba21383a 	mul	r16,r23,r8
81125dc0:	d9800317 	ldw	r6,12(sp)
81125dc4:	10c4b03a 	or	r2,r2,r3
81125dc8:	da400117 	ldw	r9,4(sp)
81125dcc:	1400062e 	bgeu	r2,r16,81125de8 <__divdf3+0x4d4>
81125dd0:	1705883a 	add	r2,r2,fp
81125dd4:	40ffffc4 	addi	r3,r8,-1
81125dd8:	1700ad36 	bltu	r2,fp,81126090 <__divdf3+0x77c>
81125ddc:	1400ac2e 	bgeu	r2,r16,81126090 <__divdf3+0x77c>
81125de0:	423fff84 	addi	r8,r8,-2
81125de4:	1705883a 	add	r2,r2,fp
81125de8:	1421c83a 	sub	r16,r2,r16
81125dec:	a00b883a 	mov	r5,r20
81125df0:	8009883a 	mov	r4,r16
81125df4:	d9800315 	stw	r6,12(sp)
81125df8:	d9c00215 	stw	r7,8(sp)
81125dfc:	da000015 	stw	r8,0(sp)
81125e00:	da400115 	stw	r9,4(sp)
81125e04:	1124da80 	call	81124da8 <__udivsi3>
81125e08:	8009883a 	mov	r4,r16
81125e0c:	a00b883a 	mov	r5,r20
81125e10:	1025883a 	mov	r18,r2
81125e14:	1124e0c0 	call	81124e0c <__umodsi3>
81125e18:	d9c00217 	ldw	r7,8(sp)
81125e1c:	1004943a 	slli	r2,r2,16
81125e20:	bcaf383a 	mul	r23,r23,r18
81125e24:	393fffcc 	andi	r4,r7,65535
81125e28:	2088b03a 	or	r4,r4,r2
81125e2c:	d9800317 	ldw	r6,12(sp)
81125e30:	da000017 	ldw	r8,0(sp)
81125e34:	da400117 	ldw	r9,4(sp)
81125e38:	25c0062e 	bgeu	r4,r23,81125e54 <__divdf3+0x540>
81125e3c:	2709883a 	add	r4,r4,fp
81125e40:	90bfffc4 	addi	r2,r18,-1
81125e44:	27009436 	bltu	r4,fp,81126098 <__divdf3+0x784>
81125e48:	25c0932e 	bgeu	r4,r23,81126098 <__divdf3+0x784>
81125e4c:	94bfff84 	addi	r18,r18,-2
81125e50:	2709883a 	add	r4,r4,fp
81125e54:	4004943a 	slli	r2,r8,16
81125e58:	25efc83a 	sub	r23,r4,r23
81125e5c:	1490b03a 	or	r8,r2,r18
81125e60:	4008d43a 	srli	r4,r8,16
81125e64:	40ffffcc 	andi	r3,r8,65535
81125e68:	30c5383a 	mul	r2,r6,r3
81125e6c:	1a47383a 	mul	r3,r3,r9
81125e70:	310d383a 	mul	r6,r6,r4
81125e74:	100ad43a 	srli	r5,r2,16
81125e78:	4913383a 	mul	r9,r9,r4
81125e7c:	1987883a 	add	r3,r3,r6
81125e80:	28c7883a 	add	r3,r5,r3
81125e84:	1980022e 	bgeu	r3,r6,81125e90 <__divdf3+0x57c>
81125e88:	01000074 	movhi	r4,1
81125e8c:	4913883a 	add	r9,r9,r4
81125e90:	1808d43a 	srli	r4,r3,16
81125e94:	1806943a 	slli	r3,r3,16
81125e98:	10bfffcc 	andi	r2,r2,65535
81125e9c:	2253883a 	add	r9,r4,r9
81125ea0:	1887883a 	add	r3,r3,r2
81125ea4:	ba403836 	bltu	r23,r9,81125f88 <__divdf3+0x674>
81125ea8:	ba403626 	beq	r23,r9,81125f84 <__divdf3+0x670>
81125eac:	42000054 	ori	r8,r8,1
81125eb0:	a880ffc4 	addi	r2,r21,1023
81125eb4:	00bf570e 	bge	zero,r2,81125c14 <__reset+0xfb105c14>
81125eb8:	40c001cc 	andi	r3,r8,7
81125ebc:	18000726 	beq	r3,zero,81125edc <__divdf3+0x5c8>
81125ec0:	40c003cc 	andi	r3,r8,15
81125ec4:	01000104 	movi	r4,4
81125ec8:	19000426 	beq	r3,r4,81125edc <__divdf3+0x5c8>
81125ecc:	4107883a 	add	r3,r8,r4
81125ed0:	1a11803a 	cmpltu	r8,r3,r8
81125ed4:	8a23883a 	add	r17,r17,r8
81125ed8:	1811883a 	mov	r8,r3
81125edc:	88c0402c 	andhi	r3,r17,256
81125ee0:	18000426 	beq	r3,zero,81125ef4 <__divdf3+0x5e0>
81125ee4:	00ffc034 	movhi	r3,65280
81125ee8:	18ffffc4 	addi	r3,r3,-1
81125eec:	a8810004 	addi	r2,r21,1024
81125ef0:	88e2703a 	and	r17,r17,r3
81125ef4:	00c1ff84 	movi	r3,2046
81125ef8:	18bee316 	blt	r3,r2,81125a88 <__reset+0xfb105a88>
81125efc:	8824977a 	slli	r18,r17,29
81125f00:	4010d0fa 	srli	r8,r8,3
81125f04:	8822927a 	slli	r17,r17,9
81125f08:	1081ffcc 	andi	r2,r2,2047
81125f0c:	9224b03a 	or	r18,r18,r8
81125f10:	880ad33a 	srli	r5,r17,12
81125f14:	98c0004c 	andi	r3,r19,1
81125f18:	003edf06 	br	81125a98 <__reset+0xfb105a98>
81125f1c:	8080022c 	andhi	r2,r16,8
81125f20:	10001226 	beq	r2,zero,81125f6c <__divdf3+0x658>
81125f24:	8880022c 	andhi	r2,r17,8
81125f28:	1000101e 	bne	r2,zero,81125f6c <__divdf3+0x658>
81125f2c:	00800434 	movhi	r2,16
81125f30:	89400234 	orhi	r5,r17,8
81125f34:	10bfffc4 	addi	r2,r2,-1
81125f38:	b007883a 	mov	r3,r22
81125f3c:	288a703a 	and	r5,r5,r2
81125f40:	4025883a 	mov	r18,r8
81125f44:	003f3106 	br	81125c0c <__reset+0xfb105c0c>
81125f48:	008000c4 	movi	r2,3
81125f4c:	3880a626 	beq	r7,r2,811261e8 <__divdf3+0x8d4>
81125f50:	00800044 	movi	r2,1
81125f54:	3880521e 	bne	r7,r2,811260a0 <__divdf3+0x78c>
81125f58:	b807883a 	mov	r3,r23
81125f5c:	0005883a 	mov	r2,zero
81125f60:	000b883a 	mov	r5,zero
81125f64:	0025883a 	mov	r18,zero
81125f68:	003ecb06 	br	81125a98 <__reset+0xfb105a98>
81125f6c:	00800434 	movhi	r2,16
81125f70:	81400234 	orhi	r5,r16,8
81125f74:	10bfffc4 	addi	r2,r2,-1
81125f78:	a007883a 	mov	r3,r20
81125f7c:	288a703a 	and	r5,r5,r2
81125f80:	003f2206 	br	81125c0c <__reset+0xfb105c0c>
81125f84:	183fca26 	beq	r3,zero,81125eb0 <__reset+0xfb105eb0>
81125f88:	e5ef883a 	add	r23,fp,r23
81125f8c:	40bfffc4 	addi	r2,r8,-1
81125f90:	bf00392e 	bgeu	r23,fp,81126078 <__divdf3+0x764>
81125f94:	1011883a 	mov	r8,r2
81125f98:	ba7fc41e 	bne	r23,r9,81125eac <__reset+0xfb105eac>
81125f9c:	b0ffc31e 	bne	r22,r3,81125eac <__reset+0xfb105eac>
81125fa0:	003fc306 	br	81125eb0 <__reset+0xfb105eb0>
81125fa4:	143ff604 	addi	r16,r2,-40
81125fa8:	9c20983a 	sll	r16,r19,r16
81125fac:	0025883a 	mov	r18,zero
81125fb0:	003ee206 	br	81125b3c <__reset+0xfb105b3c>
81125fb4:	d9800315 	stw	r6,12(sp)
81125fb8:	d9c00215 	stw	r7,8(sp)
81125fbc:	11117bc0 	call	811117bc <__clzsi2>
81125fc0:	10800804 	addi	r2,r2,32
81125fc4:	d9c00217 	ldw	r7,8(sp)
81125fc8:	d9800317 	ldw	r6,12(sp)
81125fcc:	003ed106 	br	81125b14 <__reset+0xfb105b14>
81125fd0:	147ff604 	addi	r17,r2,-40
81125fd4:	3462983a 	sll	r17,r6,r17
81125fd8:	0011883a 	mov	r8,zero
81125fdc:	003ef506 	br	81125bb4 <__reset+0xfb105bb4>
81125fe0:	3009883a 	mov	r4,r6
81125fe4:	d9800315 	stw	r6,12(sp)
81125fe8:	da400115 	stw	r9,4(sp)
81125fec:	11117bc0 	call	811117bc <__clzsi2>
81125ff0:	10800804 	addi	r2,r2,32
81125ff4:	da400117 	ldw	r9,4(sp)
81125ff8:	d9800317 	ldw	r6,12(sp)
81125ffc:	003ee306 	br	81125b8c <__reset+0xfb105b8c>
81126000:	85a1883a 	add	r16,r16,r22
81126004:	8585803a 	cmpltu	r2,r16,r22
81126008:	1705883a 	add	r2,r2,fp
8112600c:	14a5883a 	add	r18,r2,r18
81126010:	88bfffc4 	addi	r2,r17,-1
81126014:	e4800c2e 	bgeu	fp,r18,81126048 <__divdf3+0x734>
81126018:	90c03e36 	bltu	r18,r3,81126114 <__divdf3+0x800>
8112601c:	1c806926 	beq	r3,r18,811261c4 <__divdf3+0x8b0>
81126020:	90c7c83a 	sub	r3,r18,r3
81126024:	1023883a 	mov	r17,r2
81126028:	003f5206 	br	81125d74 <__reset+0xfb105d74>
8112602c:	923f0436 	bltu	r18,r8,81125c40 <__reset+0xfb105c40>
81126030:	800897fa 	slli	r4,r16,31
81126034:	9004d07a 	srli	r2,r18,1
81126038:	8006d07a 	srli	r3,r16,1
8112603c:	902097fa 	slli	r16,r18,31
81126040:	20a4b03a 	or	r18,r4,r2
81126044:	003f0106 	br	81125c4c <__reset+0xfb105c4c>
81126048:	e4bff51e 	bne	fp,r18,81126020 <__reset+0xfb106020>
8112604c:	85bff22e 	bgeu	r16,r22,81126018 <__reset+0xfb106018>
81126050:	e0c7c83a 	sub	r3,fp,r3
81126054:	1023883a 	mov	r17,r2
81126058:	003f4606 	br	81125d74 <__reset+0xfb105d74>
8112605c:	100f883a 	mov	r7,r2
81126060:	003f2b06 	br	81125d10 <__reset+0xfb105d10>
81126064:	180d883a 	mov	r6,r3
81126068:	003f1306 	br	81125cb8 <__reset+0xfb105cb8>
8112606c:	813fe436 	bltu	r16,r4,81126000 <__reset+0xfb106000>
81126070:	0007883a 	mov	r3,zero
81126074:	003f3f06 	br	81125d74 <__reset+0xfb105d74>
81126078:	ba402c36 	bltu	r23,r9,8112612c <__divdf3+0x818>
8112607c:	4dc05426 	beq	r9,r23,811261d0 <__divdf3+0x8bc>
81126080:	1011883a 	mov	r8,r2
81126084:	003f8906 	br	81125eac <__reset+0xfb105eac>
81126088:	023fffc4 	movi	r8,-1
8112608c:	003f8806 	br	81125eb0 <__reset+0xfb105eb0>
81126090:	1811883a 	mov	r8,r3
81126094:	003f5406 	br	81125de8 <__reset+0xfb105de8>
81126098:	1025883a 	mov	r18,r2
8112609c:	003f6d06 	br	81125e54 <__reset+0xfb105e54>
811260a0:	b827883a 	mov	r19,r23
811260a4:	003f8206 	br	81125eb0 <__reset+0xfb105eb0>
811260a8:	010007c4 	movi	r4,31
811260ac:	20c02616 	blt	r4,r3,81126148 <__divdf3+0x834>
811260b0:	00800804 	movi	r2,32
811260b4:	10c5c83a 	sub	r2,r2,r3
811260b8:	888a983a 	sll	r5,r17,r2
811260bc:	40c8d83a 	srl	r4,r8,r3
811260c0:	4084983a 	sll	r2,r8,r2
811260c4:	88e2d83a 	srl	r17,r17,r3
811260c8:	2906b03a 	or	r3,r5,r4
811260cc:	1004c03a 	cmpne	r2,r2,zero
811260d0:	1886b03a 	or	r3,r3,r2
811260d4:	188001cc 	andi	r2,r3,7
811260d8:	10000726 	beq	r2,zero,811260f8 <__divdf3+0x7e4>
811260dc:	188003cc 	andi	r2,r3,15
811260e0:	01000104 	movi	r4,4
811260e4:	11000426 	beq	r2,r4,811260f8 <__divdf3+0x7e4>
811260e8:	1805883a 	mov	r2,r3
811260ec:	10c00104 	addi	r3,r2,4
811260f0:	1885803a 	cmpltu	r2,r3,r2
811260f4:	88a3883a 	add	r17,r17,r2
811260f8:	8880202c 	andhi	r2,r17,128
811260fc:	10002726 	beq	r2,zero,8112619c <__divdf3+0x888>
81126100:	98c0004c 	andi	r3,r19,1
81126104:	00800044 	movi	r2,1
81126108:	000b883a 	mov	r5,zero
8112610c:	0025883a 	mov	r18,zero
81126110:	003e6106 	br	81125a98 <__reset+0xfb105a98>
81126114:	85a1883a 	add	r16,r16,r22
81126118:	8585803a 	cmpltu	r2,r16,r22
8112611c:	1705883a 	add	r2,r2,fp
81126120:	14a5883a 	add	r18,r2,r18
81126124:	8c7fff84 	addi	r17,r17,-2
81126128:	003f1106 	br	81125d70 <__reset+0xfb105d70>
8112612c:	b589883a 	add	r4,r22,r22
81126130:	25ad803a 	cmpltu	r22,r4,r22
81126134:	b739883a 	add	fp,r22,fp
81126138:	40bfff84 	addi	r2,r8,-2
8112613c:	bf2f883a 	add	r23,r23,fp
81126140:	202d883a 	mov	r22,r4
81126144:	003f9306 	br	81125f94 <__reset+0xfb105f94>
81126148:	013ff844 	movi	r4,-31
8112614c:	2085c83a 	sub	r2,r4,r2
81126150:	8888d83a 	srl	r4,r17,r2
81126154:	00800804 	movi	r2,32
81126158:	18802126 	beq	r3,r2,811261e0 <__divdf3+0x8cc>
8112615c:	00801004 	movi	r2,64
81126160:	10c5c83a 	sub	r2,r2,r3
81126164:	8884983a 	sll	r2,r17,r2
81126168:	1204b03a 	or	r2,r2,r8
8112616c:	1004c03a 	cmpne	r2,r2,zero
81126170:	2084b03a 	or	r2,r4,r2
81126174:	144001cc 	andi	r17,r2,7
81126178:	88000d1e 	bne	r17,zero,811261b0 <__divdf3+0x89c>
8112617c:	000b883a 	mov	r5,zero
81126180:	1024d0fa 	srli	r18,r2,3
81126184:	98c0004c 	andi	r3,r19,1
81126188:	0005883a 	mov	r2,zero
8112618c:	9464b03a 	or	r18,r18,r17
81126190:	003e4106 	br	81125a98 <__reset+0xfb105a98>
81126194:	1007883a 	mov	r3,r2
81126198:	0023883a 	mov	r17,zero
8112619c:	880a927a 	slli	r5,r17,9
811261a0:	1805883a 	mov	r2,r3
811261a4:	8822977a 	slli	r17,r17,29
811261a8:	280ad33a 	srli	r5,r5,12
811261ac:	003ff406 	br	81126180 <__reset+0xfb106180>
811261b0:	10c003cc 	andi	r3,r2,15
811261b4:	01000104 	movi	r4,4
811261b8:	193ff626 	beq	r3,r4,81126194 <__reset+0xfb106194>
811261bc:	0023883a 	mov	r17,zero
811261c0:	003fca06 	br	811260ec <__reset+0xfb1060ec>
811261c4:	813fd336 	bltu	r16,r4,81126114 <__reset+0xfb106114>
811261c8:	1023883a 	mov	r17,r2
811261cc:	003fa806 	br	81126070 <__reset+0xfb106070>
811261d0:	b0ffd636 	bltu	r22,r3,8112612c <__reset+0xfb10612c>
811261d4:	1011883a 	mov	r8,r2
811261d8:	b0ff341e 	bne	r22,r3,81125eac <__reset+0xfb105eac>
811261dc:	003f3406 	br	81125eb0 <__reset+0xfb105eb0>
811261e0:	0005883a 	mov	r2,zero
811261e4:	003fe006 	br	81126168 <__reset+0xfb106168>
811261e8:	00800434 	movhi	r2,16
811261ec:	89400234 	orhi	r5,r17,8
811261f0:	10bfffc4 	addi	r2,r2,-1
811261f4:	b807883a 	mov	r3,r23
811261f8:	288a703a 	and	r5,r5,r2
811261fc:	4025883a 	mov	r18,r8
81126200:	003e8206 	br	81125c0c <__reset+0xfb105c0c>

81126204 <__eqdf2>:
81126204:	2804d53a 	srli	r2,r5,20
81126208:	3806d53a 	srli	r3,r7,20
8112620c:	02000434 	movhi	r8,16
81126210:	423fffc4 	addi	r8,r8,-1
81126214:	1081ffcc 	andi	r2,r2,2047
81126218:	0281ffc4 	movi	r10,2047
8112621c:	2a12703a 	and	r9,r5,r8
81126220:	18c1ffcc 	andi	r3,r3,2047
81126224:	3a10703a 	and	r8,r7,r8
81126228:	280ad7fa 	srli	r5,r5,31
8112622c:	380ed7fa 	srli	r7,r7,31
81126230:	12801026 	beq	r2,r10,81126274 <__eqdf2+0x70>
81126234:	0281ffc4 	movi	r10,2047
81126238:	1a800a26 	beq	r3,r10,81126264 <__eqdf2+0x60>
8112623c:	10c00226 	beq	r2,r3,81126248 <__eqdf2+0x44>
81126240:	00800044 	movi	r2,1
81126244:	f800283a 	ret
81126248:	4a3ffd1e 	bne	r9,r8,81126240 <__reset+0xfb106240>
8112624c:	21bffc1e 	bne	r4,r6,81126240 <__reset+0xfb106240>
81126250:	29c00c26 	beq	r5,r7,81126284 <__eqdf2+0x80>
81126254:	103ffa1e 	bne	r2,zero,81126240 <__reset+0xfb106240>
81126258:	2244b03a 	or	r2,r4,r9
8112625c:	1004c03a 	cmpne	r2,r2,zero
81126260:	f800283a 	ret
81126264:	3214b03a 	or	r10,r6,r8
81126268:	503ff426 	beq	r10,zero,8112623c <__reset+0xfb10623c>
8112626c:	00800044 	movi	r2,1
81126270:	f800283a 	ret
81126274:	2254b03a 	or	r10,r4,r9
81126278:	503fee26 	beq	r10,zero,81126234 <__reset+0xfb106234>
8112627c:	00800044 	movi	r2,1
81126280:	f800283a 	ret
81126284:	0005883a 	mov	r2,zero
81126288:	f800283a 	ret

8112628c <__gedf2>:
8112628c:	2804d53a 	srli	r2,r5,20
81126290:	3806d53a 	srli	r3,r7,20
81126294:	02000434 	movhi	r8,16
81126298:	423fffc4 	addi	r8,r8,-1
8112629c:	1081ffcc 	andi	r2,r2,2047
811262a0:	0241ffc4 	movi	r9,2047
811262a4:	2a14703a 	and	r10,r5,r8
811262a8:	18c1ffcc 	andi	r3,r3,2047
811262ac:	3a10703a 	and	r8,r7,r8
811262b0:	280ad7fa 	srli	r5,r5,31
811262b4:	380ed7fa 	srli	r7,r7,31
811262b8:	12401d26 	beq	r2,r9,81126330 <__gedf2+0xa4>
811262bc:	0241ffc4 	movi	r9,2047
811262c0:	1a401226 	beq	r3,r9,8112630c <__gedf2+0x80>
811262c4:	1000081e 	bne	r2,zero,811262e8 <__gedf2+0x5c>
811262c8:	2296b03a 	or	r11,r4,r10
811262cc:	5813003a 	cmpeq	r9,r11,zero
811262d0:	1800091e 	bne	r3,zero,811262f8 <__gedf2+0x6c>
811262d4:	3218b03a 	or	r12,r6,r8
811262d8:	6000071e 	bne	r12,zero,811262f8 <__gedf2+0x6c>
811262dc:	0005883a 	mov	r2,zero
811262e0:	5800101e 	bne	r11,zero,81126324 <__gedf2+0x98>
811262e4:	f800283a 	ret
811262e8:	18000c1e 	bne	r3,zero,8112631c <__gedf2+0x90>
811262ec:	3212b03a 	or	r9,r6,r8
811262f0:	48000c26 	beq	r9,zero,81126324 <__gedf2+0x98>
811262f4:	0013883a 	mov	r9,zero
811262f8:	39c03fcc 	andi	r7,r7,255
811262fc:	48000826 	beq	r9,zero,81126320 <__gedf2+0x94>
81126300:	38000926 	beq	r7,zero,81126328 <__gedf2+0x9c>
81126304:	00800044 	movi	r2,1
81126308:	f800283a 	ret
8112630c:	3212b03a 	or	r9,r6,r8
81126310:	483fec26 	beq	r9,zero,811262c4 <__reset+0xfb1062c4>
81126314:	00bfff84 	movi	r2,-2
81126318:	f800283a 	ret
8112631c:	39c03fcc 	andi	r7,r7,255
81126320:	29c00626 	beq	r5,r7,8112633c <__gedf2+0xb0>
81126324:	283ff726 	beq	r5,zero,81126304 <__reset+0xfb106304>
81126328:	00bfffc4 	movi	r2,-1
8112632c:	f800283a 	ret
81126330:	2292b03a 	or	r9,r4,r10
81126334:	483fe126 	beq	r9,zero,811262bc <__reset+0xfb1062bc>
81126338:	003ff606 	br	81126314 <__reset+0xfb106314>
8112633c:	18bff916 	blt	r3,r2,81126324 <__reset+0xfb106324>
81126340:	10c00316 	blt	r2,r3,81126350 <__gedf2+0xc4>
81126344:	42bff736 	bltu	r8,r10,81126324 <__reset+0xfb106324>
81126348:	52000326 	beq	r10,r8,81126358 <__gedf2+0xcc>
8112634c:	5200042e 	bgeu	r10,r8,81126360 <__gedf2+0xd4>
81126350:	283fec1e 	bne	r5,zero,81126304 <__reset+0xfb106304>
81126354:	003ff406 	br	81126328 <__reset+0xfb106328>
81126358:	313ff236 	bltu	r6,r4,81126324 <__reset+0xfb106324>
8112635c:	21bffc36 	bltu	r4,r6,81126350 <__reset+0xfb106350>
81126360:	0005883a 	mov	r2,zero
81126364:	f800283a 	ret

81126368 <__ledf2>:
81126368:	2804d53a 	srli	r2,r5,20
8112636c:	3810d53a 	srli	r8,r7,20
81126370:	00c00434 	movhi	r3,16
81126374:	18ffffc4 	addi	r3,r3,-1
81126378:	1081ffcc 	andi	r2,r2,2047
8112637c:	0241ffc4 	movi	r9,2047
81126380:	28d4703a 	and	r10,r5,r3
81126384:	4201ffcc 	andi	r8,r8,2047
81126388:	38c6703a 	and	r3,r7,r3
8112638c:	280ad7fa 	srli	r5,r5,31
81126390:	380ed7fa 	srli	r7,r7,31
81126394:	12401f26 	beq	r2,r9,81126414 <__ledf2+0xac>
81126398:	0241ffc4 	movi	r9,2047
8112639c:	42401426 	beq	r8,r9,811263f0 <__ledf2+0x88>
811263a0:	1000091e 	bne	r2,zero,811263c8 <__ledf2+0x60>
811263a4:	2296b03a 	or	r11,r4,r10
811263a8:	5813003a 	cmpeq	r9,r11,zero
811263ac:	29403fcc 	andi	r5,r5,255
811263b0:	40000a1e 	bne	r8,zero,811263dc <__ledf2+0x74>
811263b4:	30d8b03a 	or	r12,r6,r3
811263b8:	6000081e 	bne	r12,zero,811263dc <__ledf2+0x74>
811263bc:	0005883a 	mov	r2,zero
811263c0:	5800111e 	bne	r11,zero,81126408 <__ledf2+0xa0>
811263c4:	f800283a 	ret
811263c8:	29403fcc 	andi	r5,r5,255
811263cc:	40000c1e 	bne	r8,zero,81126400 <__ledf2+0x98>
811263d0:	30d2b03a 	or	r9,r6,r3
811263d4:	48000c26 	beq	r9,zero,81126408 <__ledf2+0xa0>
811263d8:	0013883a 	mov	r9,zero
811263dc:	39c03fcc 	andi	r7,r7,255
811263e0:	48000826 	beq	r9,zero,81126404 <__ledf2+0x9c>
811263e4:	38001126 	beq	r7,zero,8112642c <__ledf2+0xc4>
811263e8:	00800044 	movi	r2,1
811263ec:	f800283a 	ret
811263f0:	30d2b03a 	or	r9,r6,r3
811263f4:	483fea26 	beq	r9,zero,811263a0 <__reset+0xfb1063a0>
811263f8:	00800084 	movi	r2,2
811263fc:	f800283a 	ret
81126400:	39c03fcc 	andi	r7,r7,255
81126404:	39400726 	beq	r7,r5,81126424 <__ledf2+0xbc>
81126408:	2800081e 	bne	r5,zero,8112642c <__ledf2+0xc4>
8112640c:	00800044 	movi	r2,1
81126410:	f800283a 	ret
81126414:	2292b03a 	or	r9,r4,r10
81126418:	483fdf26 	beq	r9,zero,81126398 <__reset+0xfb106398>
8112641c:	00800084 	movi	r2,2
81126420:	f800283a 	ret
81126424:	4080030e 	bge	r8,r2,81126434 <__ledf2+0xcc>
81126428:	383fef26 	beq	r7,zero,811263e8 <__reset+0xfb1063e8>
8112642c:	00bfffc4 	movi	r2,-1
81126430:	f800283a 	ret
81126434:	123feb16 	blt	r2,r8,811263e4 <__reset+0xfb1063e4>
81126438:	1abff336 	bltu	r3,r10,81126408 <__reset+0xfb106408>
8112643c:	50c00326 	beq	r10,r3,8112644c <__ledf2+0xe4>
81126440:	50c0042e 	bgeu	r10,r3,81126454 <__ledf2+0xec>
81126444:	283fe81e 	bne	r5,zero,811263e8 <__reset+0xfb1063e8>
81126448:	003ff806 	br	8112642c <__reset+0xfb10642c>
8112644c:	313fee36 	bltu	r6,r4,81126408 <__reset+0xfb106408>
81126450:	21bffc36 	bltu	r4,r6,81126444 <__reset+0xfb106444>
81126454:	0005883a 	mov	r2,zero
81126458:	f800283a 	ret

8112645c <__subdf3>:
8112645c:	02000434 	movhi	r8,16
81126460:	423fffc4 	addi	r8,r8,-1
81126464:	defffb04 	addi	sp,sp,-20
81126468:	2a14703a 	and	r10,r5,r8
8112646c:	3812d53a 	srli	r9,r7,20
81126470:	3a10703a 	and	r8,r7,r8
81126474:	de00012e 	bgeu	sp,et,8112647c <__subdf3+0x20>
81126478:	003b68fa 	trap	3
8112647c:	2006d77a 	srli	r3,r4,29
81126480:	3004d77a 	srli	r2,r6,29
81126484:	dc000015 	stw	r16,0(sp)
81126488:	501490fa 	slli	r10,r10,3
8112648c:	2820d53a 	srli	r16,r5,20
81126490:	401090fa 	slli	r8,r8,3
81126494:	dc800215 	stw	r18,8(sp)
81126498:	dc400115 	stw	r17,4(sp)
8112649c:	dfc00415 	stw	ra,16(sp)
811264a0:	202290fa 	slli	r17,r4,3
811264a4:	dcc00315 	stw	r19,12(sp)
811264a8:	4a41ffcc 	andi	r9,r9,2047
811264ac:	0101ffc4 	movi	r4,2047
811264b0:	2824d7fa 	srli	r18,r5,31
811264b4:	8401ffcc 	andi	r16,r16,2047
811264b8:	50c6b03a 	or	r3,r10,r3
811264bc:	380ed7fa 	srli	r7,r7,31
811264c0:	408ab03a 	or	r5,r8,r2
811264c4:	300c90fa 	slli	r6,r6,3
811264c8:	49009626 	beq	r9,r4,81126724 <__subdf3+0x2c8>
811264cc:	39c0005c 	xori	r7,r7,1
811264d0:	8245c83a 	sub	r2,r16,r9
811264d4:	3c807426 	beq	r7,r18,811266a8 <__subdf3+0x24c>
811264d8:	0080af0e 	bge	zero,r2,81126798 <__subdf3+0x33c>
811264dc:	48002a1e 	bne	r9,zero,81126588 <__subdf3+0x12c>
811264e0:	2988b03a 	or	r4,r5,r6
811264e4:	20009a1e 	bne	r4,zero,81126750 <__subdf3+0x2f4>
811264e8:	888001cc 	andi	r2,r17,7
811264ec:	10000726 	beq	r2,zero,8112650c <__subdf3+0xb0>
811264f0:	888003cc 	andi	r2,r17,15
811264f4:	01000104 	movi	r4,4
811264f8:	11000426 	beq	r2,r4,8112650c <__subdf3+0xb0>
811264fc:	890b883a 	add	r5,r17,r4
81126500:	2c63803a 	cmpltu	r17,r5,r17
81126504:	1c47883a 	add	r3,r3,r17
81126508:	2823883a 	mov	r17,r5
8112650c:	1880202c 	andhi	r2,r3,128
81126510:	10005926 	beq	r2,zero,81126678 <__subdf3+0x21c>
81126514:	84000044 	addi	r16,r16,1
81126518:	0081ffc4 	movi	r2,2047
8112651c:	8080be26 	beq	r16,r2,81126818 <__subdf3+0x3bc>
81126520:	017fe034 	movhi	r5,65408
81126524:	297fffc4 	addi	r5,r5,-1
81126528:	1946703a 	and	r3,r3,r5
8112652c:	1804977a 	slli	r2,r3,29
81126530:	1806927a 	slli	r3,r3,9
81126534:	8822d0fa 	srli	r17,r17,3
81126538:	8401ffcc 	andi	r16,r16,2047
8112653c:	180ad33a 	srli	r5,r3,12
81126540:	9100004c 	andi	r4,r18,1
81126544:	1444b03a 	or	r2,r2,r17
81126548:	80c1ffcc 	andi	r3,r16,2047
8112654c:	1820953a 	slli	r16,r3,20
81126550:	20c03fcc 	andi	r3,r4,255
81126554:	180897fa 	slli	r4,r3,31
81126558:	00c00434 	movhi	r3,16
8112655c:	18ffffc4 	addi	r3,r3,-1
81126560:	28c6703a 	and	r3,r5,r3
81126564:	1c06b03a 	or	r3,r3,r16
81126568:	1906b03a 	or	r3,r3,r4
8112656c:	dfc00417 	ldw	ra,16(sp)
81126570:	dcc00317 	ldw	r19,12(sp)
81126574:	dc800217 	ldw	r18,8(sp)
81126578:	dc400117 	ldw	r17,4(sp)
8112657c:	dc000017 	ldw	r16,0(sp)
81126580:	dec00504 	addi	sp,sp,20
81126584:	f800283a 	ret
81126588:	0101ffc4 	movi	r4,2047
8112658c:	813fd626 	beq	r16,r4,811264e8 <__reset+0xfb1064e8>
81126590:	29402034 	orhi	r5,r5,128
81126594:	01000e04 	movi	r4,56
81126598:	2080a316 	blt	r4,r2,81126828 <__subdf3+0x3cc>
8112659c:	010007c4 	movi	r4,31
811265a0:	2080c616 	blt	r4,r2,811268bc <__subdf3+0x460>
811265a4:	01000804 	movi	r4,32
811265a8:	2089c83a 	sub	r4,r4,r2
811265ac:	2910983a 	sll	r8,r5,r4
811265b0:	308ed83a 	srl	r7,r6,r2
811265b4:	3108983a 	sll	r4,r6,r4
811265b8:	2884d83a 	srl	r2,r5,r2
811265bc:	41ccb03a 	or	r6,r8,r7
811265c0:	2008c03a 	cmpne	r4,r4,zero
811265c4:	310cb03a 	or	r6,r6,r4
811265c8:	898dc83a 	sub	r6,r17,r6
811265cc:	89a3803a 	cmpltu	r17,r17,r6
811265d0:	1887c83a 	sub	r3,r3,r2
811265d4:	1c47c83a 	sub	r3,r3,r17
811265d8:	3023883a 	mov	r17,r6
811265dc:	1880202c 	andhi	r2,r3,128
811265e0:	10002326 	beq	r2,zero,81126670 <__subdf3+0x214>
811265e4:	04c02034 	movhi	r19,128
811265e8:	9cffffc4 	addi	r19,r19,-1
811265ec:	1ce6703a 	and	r19,r3,r19
811265f0:	98007a26 	beq	r19,zero,811267dc <__subdf3+0x380>
811265f4:	9809883a 	mov	r4,r19
811265f8:	11117bc0 	call	811117bc <__clzsi2>
811265fc:	113ffe04 	addi	r4,r2,-8
81126600:	00c007c4 	movi	r3,31
81126604:	19007b16 	blt	r3,r4,811267f4 <__subdf3+0x398>
81126608:	00800804 	movi	r2,32
8112660c:	1105c83a 	sub	r2,r2,r4
81126610:	8884d83a 	srl	r2,r17,r2
81126614:	9906983a 	sll	r3,r19,r4
81126618:	8922983a 	sll	r17,r17,r4
8112661c:	10c4b03a 	or	r2,r2,r3
81126620:	24007816 	blt	r4,r16,81126804 <__subdf3+0x3a8>
81126624:	2421c83a 	sub	r16,r4,r16
81126628:	80c00044 	addi	r3,r16,1
8112662c:	010007c4 	movi	r4,31
81126630:	20c09516 	blt	r4,r3,81126888 <__subdf3+0x42c>
81126634:	01400804 	movi	r5,32
81126638:	28cbc83a 	sub	r5,r5,r3
8112663c:	88c8d83a 	srl	r4,r17,r3
81126640:	8962983a 	sll	r17,r17,r5
81126644:	114a983a 	sll	r5,r2,r5
81126648:	10c6d83a 	srl	r3,r2,r3
8112664c:	8804c03a 	cmpne	r2,r17,zero
81126650:	290ab03a 	or	r5,r5,r4
81126654:	28a2b03a 	or	r17,r5,r2
81126658:	0021883a 	mov	r16,zero
8112665c:	003fa206 	br	811264e8 <__reset+0xfb1064e8>
81126660:	2090b03a 	or	r8,r4,r2
81126664:	40018e26 	beq	r8,zero,81126ca0 <__subdf3+0x844>
81126668:	1007883a 	mov	r3,r2
8112666c:	2023883a 	mov	r17,r4
81126670:	888001cc 	andi	r2,r17,7
81126674:	103f9e1e 	bne	r2,zero,811264f0 <__reset+0xfb1064f0>
81126678:	1804977a 	slli	r2,r3,29
8112667c:	8822d0fa 	srli	r17,r17,3
81126680:	1810d0fa 	srli	r8,r3,3
81126684:	9100004c 	andi	r4,r18,1
81126688:	1444b03a 	or	r2,r2,r17
8112668c:	00c1ffc4 	movi	r3,2047
81126690:	80c02826 	beq	r16,r3,81126734 <__subdf3+0x2d8>
81126694:	01400434 	movhi	r5,16
81126698:	297fffc4 	addi	r5,r5,-1
8112669c:	80e0703a 	and	r16,r16,r3
811266a0:	414a703a 	and	r5,r8,r5
811266a4:	003fa806 	br	81126548 <__reset+0xfb106548>
811266a8:	0080630e 	bge	zero,r2,81126838 <__subdf3+0x3dc>
811266ac:	48003026 	beq	r9,zero,81126770 <__subdf3+0x314>
811266b0:	0101ffc4 	movi	r4,2047
811266b4:	813f8c26 	beq	r16,r4,811264e8 <__reset+0xfb1064e8>
811266b8:	29402034 	orhi	r5,r5,128
811266bc:	01000e04 	movi	r4,56
811266c0:	2080a90e 	bge	r4,r2,81126968 <__subdf3+0x50c>
811266c4:	298cb03a 	or	r6,r5,r6
811266c8:	3012c03a 	cmpne	r9,r6,zero
811266cc:	0005883a 	mov	r2,zero
811266d0:	4c53883a 	add	r9,r9,r17
811266d4:	4c63803a 	cmpltu	r17,r9,r17
811266d8:	10c7883a 	add	r3,r2,r3
811266dc:	88c7883a 	add	r3,r17,r3
811266e0:	4823883a 	mov	r17,r9
811266e4:	1880202c 	andhi	r2,r3,128
811266e8:	1000d026 	beq	r2,zero,81126a2c <__subdf3+0x5d0>
811266ec:	84000044 	addi	r16,r16,1
811266f0:	0081ffc4 	movi	r2,2047
811266f4:	8080fe26 	beq	r16,r2,81126af0 <__subdf3+0x694>
811266f8:	00bfe034 	movhi	r2,65408
811266fc:	10bfffc4 	addi	r2,r2,-1
81126700:	1886703a 	and	r3,r3,r2
81126704:	880ad07a 	srli	r5,r17,1
81126708:	180497fa 	slli	r2,r3,31
8112670c:	8900004c 	andi	r4,r17,1
81126710:	2922b03a 	or	r17,r5,r4
81126714:	1806d07a 	srli	r3,r3,1
81126718:	1462b03a 	or	r17,r2,r17
8112671c:	3825883a 	mov	r18,r7
81126720:	003f7106 	br	811264e8 <__reset+0xfb1064e8>
81126724:	2984b03a 	or	r2,r5,r6
81126728:	103f6826 	beq	r2,zero,811264cc <__reset+0xfb1064cc>
8112672c:	39c03fcc 	andi	r7,r7,255
81126730:	003f6706 	br	811264d0 <__reset+0xfb1064d0>
81126734:	4086b03a 	or	r3,r8,r2
81126738:	18015226 	beq	r3,zero,81126c84 <__subdf3+0x828>
8112673c:	00c00434 	movhi	r3,16
81126740:	41400234 	orhi	r5,r8,8
81126744:	18ffffc4 	addi	r3,r3,-1
81126748:	28ca703a 	and	r5,r5,r3
8112674c:	003f7e06 	br	81126548 <__reset+0xfb106548>
81126750:	10bfffc4 	addi	r2,r2,-1
81126754:	1000491e 	bne	r2,zero,8112687c <__subdf3+0x420>
81126758:	898fc83a 	sub	r7,r17,r6
8112675c:	89e3803a 	cmpltu	r17,r17,r7
81126760:	1947c83a 	sub	r3,r3,r5
81126764:	1c47c83a 	sub	r3,r3,r17
81126768:	3823883a 	mov	r17,r7
8112676c:	003f9b06 	br	811265dc <__reset+0xfb1065dc>
81126770:	2988b03a 	or	r4,r5,r6
81126774:	203f5c26 	beq	r4,zero,811264e8 <__reset+0xfb1064e8>
81126778:	10bfffc4 	addi	r2,r2,-1
8112677c:	1000931e 	bne	r2,zero,811269cc <__subdf3+0x570>
81126780:	898d883a 	add	r6,r17,r6
81126784:	3463803a 	cmpltu	r17,r6,r17
81126788:	1947883a 	add	r3,r3,r5
8112678c:	88c7883a 	add	r3,r17,r3
81126790:	3023883a 	mov	r17,r6
81126794:	003fd306 	br	811266e4 <__reset+0xfb1066e4>
81126798:	1000541e 	bne	r2,zero,811268ec <__subdf3+0x490>
8112679c:	80800044 	addi	r2,r16,1
811267a0:	1081ffcc 	andi	r2,r2,2047
811267a4:	01000044 	movi	r4,1
811267a8:	2080a20e 	bge	r4,r2,81126a34 <__subdf3+0x5d8>
811267ac:	8989c83a 	sub	r4,r17,r6
811267b0:	8905803a 	cmpltu	r2,r17,r4
811267b4:	1967c83a 	sub	r19,r3,r5
811267b8:	98a7c83a 	sub	r19,r19,r2
811267bc:	9880202c 	andhi	r2,r19,128
811267c0:	10006326 	beq	r2,zero,81126950 <__subdf3+0x4f4>
811267c4:	3463c83a 	sub	r17,r6,r17
811267c8:	28c7c83a 	sub	r3,r5,r3
811267cc:	344d803a 	cmpltu	r6,r6,r17
811267d0:	19a7c83a 	sub	r19,r3,r6
811267d4:	3825883a 	mov	r18,r7
811267d8:	983f861e 	bne	r19,zero,811265f4 <__reset+0xfb1065f4>
811267dc:	8809883a 	mov	r4,r17
811267e0:	11117bc0 	call	811117bc <__clzsi2>
811267e4:	10800804 	addi	r2,r2,32
811267e8:	113ffe04 	addi	r4,r2,-8
811267ec:	00c007c4 	movi	r3,31
811267f0:	193f850e 	bge	r3,r4,81126608 <__reset+0xfb106608>
811267f4:	10bff604 	addi	r2,r2,-40
811267f8:	8884983a 	sll	r2,r17,r2
811267fc:	0023883a 	mov	r17,zero
81126800:	243f880e 	bge	r4,r16,81126624 <__reset+0xfb106624>
81126804:	00ffe034 	movhi	r3,65408
81126808:	18ffffc4 	addi	r3,r3,-1
8112680c:	8121c83a 	sub	r16,r16,r4
81126810:	10c6703a 	and	r3,r2,r3
81126814:	003f3406 	br	811264e8 <__reset+0xfb1064e8>
81126818:	9100004c 	andi	r4,r18,1
8112681c:	000b883a 	mov	r5,zero
81126820:	0005883a 	mov	r2,zero
81126824:	003f4806 	br	81126548 <__reset+0xfb106548>
81126828:	298cb03a 	or	r6,r5,r6
8112682c:	300cc03a 	cmpne	r6,r6,zero
81126830:	0005883a 	mov	r2,zero
81126834:	003f6406 	br	811265c8 <__reset+0xfb1065c8>
81126838:	10009a1e 	bne	r2,zero,81126aa4 <__subdf3+0x648>
8112683c:	82400044 	addi	r9,r16,1
81126840:	4881ffcc 	andi	r2,r9,2047
81126844:	02800044 	movi	r10,1
81126848:	5080670e 	bge	r10,r2,811269e8 <__subdf3+0x58c>
8112684c:	0081ffc4 	movi	r2,2047
81126850:	4880af26 	beq	r9,r2,81126b10 <__subdf3+0x6b4>
81126854:	898d883a 	add	r6,r17,r6
81126858:	1945883a 	add	r2,r3,r5
8112685c:	3447803a 	cmpltu	r3,r6,r17
81126860:	1887883a 	add	r3,r3,r2
81126864:	182297fa 	slli	r17,r3,31
81126868:	300cd07a 	srli	r6,r6,1
8112686c:	1806d07a 	srli	r3,r3,1
81126870:	4821883a 	mov	r16,r9
81126874:	89a2b03a 	or	r17,r17,r6
81126878:	003f1b06 	br	811264e8 <__reset+0xfb1064e8>
8112687c:	0101ffc4 	movi	r4,2047
81126880:	813f441e 	bne	r16,r4,81126594 <__reset+0xfb106594>
81126884:	003f1806 	br	811264e8 <__reset+0xfb1064e8>
81126888:	843ff844 	addi	r16,r16,-31
8112688c:	01400804 	movi	r5,32
81126890:	1408d83a 	srl	r4,r2,r16
81126894:	19405026 	beq	r3,r5,811269d8 <__subdf3+0x57c>
81126898:	01401004 	movi	r5,64
8112689c:	28c7c83a 	sub	r3,r5,r3
811268a0:	10c4983a 	sll	r2,r2,r3
811268a4:	88a2b03a 	or	r17,r17,r2
811268a8:	8822c03a 	cmpne	r17,r17,zero
811268ac:	2462b03a 	or	r17,r4,r17
811268b0:	0007883a 	mov	r3,zero
811268b4:	0021883a 	mov	r16,zero
811268b8:	003f6d06 	br	81126670 <__reset+0xfb106670>
811268bc:	11fff804 	addi	r7,r2,-32
811268c0:	01000804 	movi	r4,32
811268c4:	29ced83a 	srl	r7,r5,r7
811268c8:	11004526 	beq	r2,r4,811269e0 <__subdf3+0x584>
811268cc:	01001004 	movi	r4,64
811268d0:	2089c83a 	sub	r4,r4,r2
811268d4:	2904983a 	sll	r2,r5,r4
811268d8:	118cb03a 	or	r6,r2,r6
811268dc:	300cc03a 	cmpne	r6,r6,zero
811268e0:	398cb03a 	or	r6,r7,r6
811268e4:	0005883a 	mov	r2,zero
811268e8:	003f3706 	br	811265c8 <__reset+0xfb1065c8>
811268ec:	80002a26 	beq	r16,zero,81126998 <__subdf3+0x53c>
811268f0:	0101ffc4 	movi	r4,2047
811268f4:	49006626 	beq	r9,r4,81126a90 <__subdf3+0x634>
811268f8:	0085c83a 	sub	r2,zero,r2
811268fc:	18c02034 	orhi	r3,r3,128
81126900:	01000e04 	movi	r4,56
81126904:	20807e16 	blt	r4,r2,81126b00 <__subdf3+0x6a4>
81126908:	010007c4 	movi	r4,31
8112690c:	2080e716 	blt	r4,r2,81126cac <__subdf3+0x850>
81126910:	01000804 	movi	r4,32
81126914:	2089c83a 	sub	r4,r4,r2
81126918:	1914983a 	sll	r10,r3,r4
8112691c:	8890d83a 	srl	r8,r17,r2
81126920:	8908983a 	sll	r4,r17,r4
81126924:	1884d83a 	srl	r2,r3,r2
81126928:	5222b03a 	or	r17,r10,r8
8112692c:	2006c03a 	cmpne	r3,r4,zero
81126930:	88e2b03a 	or	r17,r17,r3
81126934:	3463c83a 	sub	r17,r6,r17
81126938:	2885c83a 	sub	r2,r5,r2
8112693c:	344d803a 	cmpltu	r6,r6,r17
81126940:	1187c83a 	sub	r3,r2,r6
81126944:	4821883a 	mov	r16,r9
81126948:	3825883a 	mov	r18,r7
8112694c:	003f2306 	br	811265dc <__reset+0xfb1065dc>
81126950:	24d0b03a 	or	r8,r4,r19
81126954:	40001b1e 	bne	r8,zero,811269c4 <__subdf3+0x568>
81126958:	0005883a 	mov	r2,zero
8112695c:	0009883a 	mov	r4,zero
81126960:	0021883a 	mov	r16,zero
81126964:	003f4906 	br	8112668c <__reset+0xfb10668c>
81126968:	010007c4 	movi	r4,31
8112696c:	20803a16 	blt	r4,r2,81126a58 <__subdf3+0x5fc>
81126970:	01000804 	movi	r4,32
81126974:	2089c83a 	sub	r4,r4,r2
81126978:	2912983a 	sll	r9,r5,r4
8112697c:	3090d83a 	srl	r8,r6,r2
81126980:	3108983a 	sll	r4,r6,r4
81126984:	2884d83a 	srl	r2,r5,r2
81126988:	4a12b03a 	or	r9,r9,r8
8112698c:	2008c03a 	cmpne	r4,r4,zero
81126990:	4912b03a 	or	r9,r9,r4
81126994:	003f4e06 	br	811266d0 <__reset+0xfb1066d0>
81126998:	1c48b03a 	or	r4,r3,r17
8112699c:	20003c26 	beq	r4,zero,81126a90 <__subdf3+0x634>
811269a0:	0084303a 	nor	r2,zero,r2
811269a4:	1000381e 	bne	r2,zero,81126a88 <__subdf3+0x62c>
811269a8:	3463c83a 	sub	r17,r6,r17
811269ac:	28c5c83a 	sub	r2,r5,r3
811269b0:	344d803a 	cmpltu	r6,r6,r17
811269b4:	1187c83a 	sub	r3,r2,r6
811269b8:	4821883a 	mov	r16,r9
811269bc:	3825883a 	mov	r18,r7
811269c0:	003f0606 	br	811265dc <__reset+0xfb1065dc>
811269c4:	2023883a 	mov	r17,r4
811269c8:	003f0906 	br	811265f0 <__reset+0xfb1065f0>
811269cc:	0101ffc4 	movi	r4,2047
811269d0:	813f3a1e 	bne	r16,r4,811266bc <__reset+0xfb1066bc>
811269d4:	003ec406 	br	811264e8 <__reset+0xfb1064e8>
811269d8:	0005883a 	mov	r2,zero
811269dc:	003fb106 	br	811268a4 <__reset+0xfb1068a4>
811269e0:	0005883a 	mov	r2,zero
811269e4:	003fbc06 	br	811268d8 <__reset+0xfb1068d8>
811269e8:	1c44b03a 	or	r2,r3,r17
811269ec:	80008e1e 	bne	r16,zero,81126c28 <__subdf3+0x7cc>
811269f0:	1000c826 	beq	r2,zero,81126d14 <__subdf3+0x8b8>
811269f4:	2984b03a 	or	r2,r5,r6
811269f8:	103ebb26 	beq	r2,zero,811264e8 <__reset+0xfb1064e8>
811269fc:	8989883a 	add	r4,r17,r6
81126a00:	1945883a 	add	r2,r3,r5
81126a04:	2447803a 	cmpltu	r3,r4,r17
81126a08:	1887883a 	add	r3,r3,r2
81126a0c:	1880202c 	andhi	r2,r3,128
81126a10:	2023883a 	mov	r17,r4
81126a14:	103f1626 	beq	r2,zero,81126670 <__reset+0xfb106670>
81126a18:	00bfe034 	movhi	r2,65408
81126a1c:	10bfffc4 	addi	r2,r2,-1
81126a20:	5021883a 	mov	r16,r10
81126a24:	1886703a 	and	r3,r3,r2
81126a28:	003eaf06 	br	811264e8 <__reset+0xfb1064e8>
81126a2c:	3825883a 	mov	r18,r7
81126a30:	003f0f06 	br	81126670 <__reset+0xfb106670>
81126a34:	1c44b03a 	or	r2,r3,r17
81126a38:	8000251e 	bne	r16,zero,81126ad0 <__subdf3+0x674>
81126a3c:	1000661e 	bne	r2,zero,81126bd8 <__subdf3+0x77c>
81126a40:	2990b03a 	or	r8,r5,r6
81126a44:	40009626 	beq	r8,zero,81126ca0 <__subdf3+0x844>
81126a48:	2807883a 	mov	r3,r5
81126a4c:	3023883a 	mov	r17,r6
81126a50:	3825883a 	mov	r18,r7
81126a54:	003ea406 	br	811264e8 <__reset+0xfb1064e8>
81126a58:	127ff804 	addi	r9,r2,-32
81126a5c:	01000804 	movi	r4,32
81126a60:	2a52d83a 	srl	r9,r5,r9
81126a64:	11008c26 	beq	r2,r4,81126c98 <__subdf3+0x83c>
81126a68:	01001004 	movi	r4,64
81126a6c:	2085c83a 	sub	r2,r4,r2
81126a70:	2884983a 	sll	r2,r5,r2
81126a74:	118cb03a 	or	r6,r2,r6
81126a78:	300cc03a 	cmpne	r6,r6,zero
81126a7c:	4992b03a 	or	r9,r9,r6
81126a80:	0005883a 	mov	r2,zero
81126a84:	003f1206 	br	811266d0 <__reset+0xfb1066d0>
81126a88:	0101ffc4 	movi	r4,2047
81126a8c:	493f9c1e 	bne	r9,r4,81126900 <__reset+0xfb106900>
81126a90:	2807883a 	mov	r3,r5
81126a94:	3023883a 	mov	r17,r6
81126a98:	4821883a 	mov	r16,r9
81126a9c:	3825883a 	mov	r18,r7
81126aa0:	003e9106 	br	811264e8 <__reset+0xfb1064e8>
81126aa4:	80001f1e 	bne	r16,zero,81126b24 <__subdf3+0x6c8>
81126aa8:	1c48b03a 	or	r4,r3,r17
81126aac:	20005a26 	beq	r4,zero,81126c18 <__subdf3+0x7bc>
81126ab0:	0084303a 	nor	r2,zero,r2
81126ab4:	1000561e 	bne	r2,zero,81126c10 <__subdf3+0x7b4>
81126ab8:	89a3883a 	add	r17,r17,r6
81126abc:	1945883a 	add	r2,r3,r5
81126ac0:	898d803a 	cmpltu	r6,r17,r6
81126ac4:	3087883a 	add	r3,r6,r2
81126ac8:	4821883a 	mov	r16,r9
81126acc:	003f0506 	br	811266e4 <__reset+0xfb1066e4>
81126ad0:	10002b1e 	bne	r2,zero,81126b80 <__subdf3+0x724>
81126ad4:	2984b03a 	or	r2,r5,r6
81126ad8:	10008026 	beq	r2,zero,81126cdc <__subdf3+0x880>
81126adc:	2807883a 	mov	r3,r5
81126ae0:	3023883a 	mov	r17,r6
81126ae4:	3825883a 	mov	r18,r7
81126ae8:	0401ffc4 	movi	r16,2047
81126aec:	003e7e06 	br	811264e8 <__reset+0xfb1064e8>
81126af0:	3809883a 	mov	r4,r7
81126af4:	0011883a 	mov	r8,zero
81126af8:	0005883a 	mov	r2,zero
81126afc:	003ee306 	br	8112668c <__reset+0xfb10668c>
81126b00:	1c62b03a 	or	r17,r3,r17
81126b04:	8822c03a 	cmpne	r17,r17,zero
81126b08:	0005883a 	mov	r2,zero
81126b0c:	003f8906 	br	81126934 <__reset+0xfb106934>
81126b10:	3809883a 	mov	r4,r7
81126b14:	4821883a 	mov	r16,r9
81126b18:	0011883a 	mov	r8,zero
81126b1c:	0005883a 	mov	r2,zero
81126b20:	003eda06 	br	8112668c <__reset+0xfb10668c>
81126b24:	0101ffc4 	movi	r4,2047
81126b28:	49003b26 	beq	r9,r4,81126c18 <__subdf3+0x7bc>
81126b2c:	0085c83a 	sub	r2,zero,r2
81126b30:	18c02034 	orhi	r3,r3,128
81126b34:	01000e04 	movi	r4,56
81126b38:	20806e16 	blt	r4,r2,81126cf4 <__subdf3+0x898>
81126b3c:	010007c4 	movi	r4,31
81126b40:	20807716 	blt	r4,r2,81126d20 <__subdf3+0x8c4>
81126b44:	01000804 	movi	r4,32
81126b48:	2089c83a 	sub	r4,r4,r2
81126b4c:	1914983a 	sll	r10,r3,r4
81126b50:	8890d83a 	srl	r8,r17,r2
81126b54:	8908983a 	sll	r4,r17,r4
81126b58:	1884d83a 	srl	r2,r3,r2
81126b5c:	5222b03a 	or	r17,r10,r8
81126b60:	2006c03a 	cmpne	r3,r4,zero
81126b64:	88e2b03a 	or	r17,r17,r3
81126b68:	89a3883a 	add	r17,r17,r6
81126b6c:	1145883a 	add	r2,r2,r5
81126b70:	898d803a 	cmpltu	r6,r17,r6
81126b74:	3087883a 	add	r3,r6,r2
81126b78:	4821883a 	mov	r16,r9
81126b7c:	003ed906 	br	811266e4 <__reset+0xfb1066e4>
81126b80:	2984b03a 	or	r2,r5,r6
81126b84:	10004226 	beq	r2,zero,81126c90 <__subdf3+0x834>
81126b88:	1808d0fa 	srli	r4,r3,3
81126b8c:	8822d0fa 	srli	r17,r17,3
81126b90:	1806977a 	slli	r3,r3,29
81126b94:	2080022c 	andhi	r2,r4,8
81126b98:	1c62b03a 	or	r17,r3,r17
81126b9c:	10000826 	beq	r2,zero,81126bc0 <__subdf3+0x764>
81126ba0:	2812d0fa 	srli	r9,r5,3
81126ba4:	4880022c 	andhi	r2,r9,8
81126ba8:	1000051e 	bne	r2,zero,81126bc0 <__subdf3+0x764>
81126bac:	300cd0fa 	srli	r6,r6,3
81126bb0:	2804977a 	slli	r2,r5,29
81126bb4:	4809883a 	mov	r4,r9
81126bb8:	3825883a 	mov	r18,r7
81126bbc:	11a2b03a 	or	r17,r2,r6
81126bc0:	8806d77a 	srli	r3,r17,29
81126bc4:	200890fa 	slli	r4,r4,3
81126bc8:	882290fa 	slli	r17,r17,3
81126bcc:	0401ffc4 	movi	r16,2047
81126bd0:	1906b03a 	or	r3,r3,r4
81126bd4:	003e4406 	br	811264e8 <__reset+0xfb1064e8>
81126bd8:	2984b03a 	or	r2,r5,r6
81126bdc:	103e4226 	beq	r2,zero,811264e8 <__reset+0xfb1064e8>
81126be0:	8989c83a 	sub	r4,r17,r6
81126be4:	8911803a 	cmpltu	r8,r17,r4
81126be8:	1945c83a 	sub	r2,r3,r5
81126bec:	1205c83a 	sub	r2,r2,r8
81126bf0:	1200202c 	andhi	r8,r2,128
81126bf4:	403e9a26 	beq	r8,zero,81126660 <__reset+0xfb106660>
81126bf8:	3463c83a 	sub	r17,r6,r17
81126bfc:	28c5c83a 	sub	r2,r5,r3
81126c00:	344d803a 	cmpltu	r6,r6,r17
81126c04:	1187c83a 	sub	r3,r2,r6
81126c08:	3825883a 	mov	r18,r7
81126c0c:	003e3606 	br	811264e8 <__reset+0xfb1064e8>
81126c10:	0101ffc4 	movi	r4,2047
81126c14:	493fc71e 	bne	r9,r4,81126b34 <__reset+0xfb106b34>
81126c18:	2807883a 	mov	r3,r5
81126c1c:	3023883a 	mov	r17,r6
81126c20:	4821883a 	mov	r16,r9
81126c24:	003e3006 	br	811264e8 <__reset+0xfb1064e8>
81126c28:	10003626 	beq	r2,zero,81126d04 <__subdf3+0x8a8>
81126c2c:	2984b03a 	or	r2,r5,r6
81126c30:	10001726 	beq	r2,zero,81126c90 <__subdf3+0x834>
81126c34:	1808d0fa 	srli	r4,r3,3
81126c38:	8822d0fa 	srli	r17,r17,3
81126c3c:	1806977a 	slli	r3,r3,29
81126c40:	2080022c 	andhi	r2,r4,8
81126c44:	1c62b03a 	or	r17,r3,r17
81126c48:	10000726 	beq	r2,zero,81126c68 <__subdf3+0x80c>
81126c4c:	2812d0fa 	srli	r9,r5,3
81126c50:	4880022c 	andhi	r2,r9,8
81126c54:	1000041e 	bne	r2,zero,81126c68 <__subdf3+0x80c>
81126c58:	300cd0fa 	srli	r6,r6,3
81126c5c:	2804977a 	slli	r2,r5,29
81126c60:	4809883a 	mov	r4,r9
81126c64:	11a2b03a 	or	r17,r2,r6
81126c68:	8806d77a 	srli	r3,r17,29
81126c6c:	200890fa 	slli	r4,r4,3
81126c70:	882290fa 	slli	r17,r17,3
81126c74:	3825883a 	mov	r18,r7
81126c78:	1906b03a 	or	r3,r3,r4
81126c7c:	0401ffc4 	movi	r16,2047
81126c80:	003e1906 	br	811264e8 <__reset+0xfb1064e8>
81126c84:	000b883a 	mov	r5,zero
81126c88:	0005883a 	mov	r2,zero
81126c8c:	003e2e06 	br	81126548 <__reset+0xfb106548>
81126c90:	0401ffc4 	movi	r16,2047
81126c94:	003e1406 	br	811264e8 <__reset+0xfb1064e8>
81126c98:	0005883a 	mov	r2,zero
81126c9c:	003f7506 	br	81126a74 <__reset+0xfb106a74>
81126ca0:	0005883a 	mov	r2,zero
81126ca4:	0009883a 	mov	r4,zero
81126ca8:	003e7806 	br	8112668c <__reset+0xfb10668c>
81126cac:	123ff804 	addi	r8,r2,-32
81126cb0:	01000804 	movi	r4,32
81126cb4:	1a10d83a 	srl	r8,r3,r8
81126cb8:	11002526 	beq	r2,r4,81126d50 <__subdf3+0x8f4>
81126cbc:	01001004 	movi	r4,64
81126cc0:	2085c83a 	sub	r2,r4,r2
81126cc4:	1884983a 	sll	r2,r3,r2
81126cc8:	1444b03a 	or	r2,r2,r17
81126ccc:	1004c03a 	cmpne	r2,r2,zero
81126cd0:	40a2b03a 	or	r17,r8,r2
81126cd4:	0005883a 	mov	r2,zero
81126cd8:	003f1606 	br	81126934 <__reset+0xfb106934>
81126cdc:	02000434 	movhi	r8,16
81126ce0:	0009883a 	mov	r4,zero
81126ce4:	423fffc4 	addi	r8,r8,-1
81126ce8:	00bfffc4 	movi	r2,-1
81126cec:	0401ffc4 	movi	r16,2047
81126cf0:	003e6606 	br	8112668c <__reset+0xfb10668c>
81126cf4:	1c62b03a 	or	r17,r3,r17
81126cf8:	8822c03a 	cmpne	r17,r17,zero
81126cfc:	0005883a 	mov	r2,zero
81126d00:	003f9906 	br	81126b68 <__reset+0xfb106b68>
81126d04:	2807883a 	mov	r3,r5
81126d08:	3023883a 	mov	r17,r6
81126d0c:	0401ffc4 	movi	r16,2047
81126d10:	003df506 	br	811264e8 <__reset+0xfb1064e8>
81126d14:	2807883a 	mov	r3,r5
81126d18:	3023883a 	mov	r17,r6
81126d1c:	003df206 	br	811264e8 <__reset+0xfb1064e8>
81126d20:	123ff804 	addi	r8,r2,-32
81126d24:	01000804 	movi	r4,32
81126d28:	1a10d83a 	srl	r8,r3,r8
81126d2c:	11000a26 	beq	r2,r4,81126d58 <__subdf3+0x8fc>
81126d30:	01001004 	movi	r4,64
81126d34:	2085c83a 	sub	r2,r4,r2
81126d38:	1884983a 	sll	r2,r3,r2
81126d3c:	1444b03a 	or	r2,r2,r17
81126d40:	1004c03a 	cmpne	r2,r2,zero
81126d44:	40a2b03a 	or	r17,r8,r2
81126d48:	0005883a 	mov	r2,zero
81126d4c:	003f8606 	br	81126b68 <__reset+0xfb106b68>
81126d50:	0005883a 	mov	r2,zero
81126d54:	003fdc06 	br	81126cc8 <__reset+0xfb106cc8>
81126d58:	0005883a 	mov	r2,zero
81126d5c:	003ff706 	br	81126d3c <__reset+0xfb106d3c>

81126d60 <__fixdfsi>:
81126d60:	280cd53a 	srli	r6,r5,20
81126d64:	00c00434 	movhi	r3,16
81126d68:	18ffffc4 	addi	r3,r3,-1
81126d6c:	3181ffcc 	andi	r6,r6,2047
81126d70:	01c0ff84 	movi	r7,1022
81126d74:	28c6703a 	and	r3,r5,r3
81126d78:	280ad7fa 	srli	r5,r5,31
81126d7c:	3980120e 	bge	r7,r6,81126dc8 <__fixdfsi+0x68>
81126d80:	00810744 	movi	r2,1053
81126d84:	11800c16 	blt	r2,r6,81126db8 <__fixdfsi+0x58>
81126d88:	00810cc4 	movi	r2,1075
81126d8c:	1185c83a 	sub	r2,r2,r6
81126d90:	01c007c4 	movi	r7,31
81126d94:	18c00434 	orhi	r3,r3,16
81126d98:	38800d16 	blt	r7,r2,81126dd0 <__fixdfsi+0x70>
81126d9c:	31befb44 	addi	r6,r6,-1043
81126da0:	2084d83a 	srl	r2,r4,r2
81126da4:	1986983a 	sll	r3,r3,r6
81126da8:	1884b03a 	or	r2,r3,r2
81126dac:	28000726 	beq	r5,zero,81126dcc <__fixdfsi+0x6c>
81126db0:	0085c83a 	sub	r2,zero,r2
81126db4:	f800283a 	ret
81126db8:	00a00034 	movhi	r2,32768
81126dbc:	10bfffc4 	addi	r2,r2,-1
81126dc0:	2885883a 	add	r2,r5,r2
81126dc4:	f800283a 	ret
81126dc8:	0005883a 	mov	r2,zero
81126dcc:	f800283a 	ret
81126dd0:	008104c4 	movi	r2,1043
81126dd4:	1185c83a 	sub	r2,r2,r6
81126dd8:	1884d83a 	srl	r2,r3,r2
81126ddc:	003ff306 	br	81126dac <__reset+0xfb106dac>

81126de0 <__floatsidf>:
81126de0:	defffd04 	addi	sp,sp,-12
81126de4:	de00012e 	bgeu	sp,et,81126dec <__floatsidf+0xc>
81126de8:	003b68fa 	trap	3
81126dec:	dfc00215 	stw	ra,8(sp)
81126df0:	dc400115 	stw	r17,4(sp)
81126df4:	dc000015 	stw	r16,0(sp)
81126df8:	20002b26 	beq	r4,zero,81126ea8 <__floatsidf+0xc8>
81126dfc:	2023883a 	mov	r17,r4
81126e00:	2020d7fa 	srli	r16,r4,31
81126e04:	20002d16 	blt	r4,zero,81126ebc <__floatsidf+0xdc>
81126e08:	8809883a 	mov	r4,r17
81126e0c:	11117bc0 	call	811117bc <__clzsi2>
81126e10:	01410784 	movi	r5,1054
81126e14:	288bc83a 	sub	r5,r5,r2
81126e18:	01010cc4 	movi	r4,1075
81126e1c:	2149c83a 	sub	r4,r4,r5
81126e20:	00c007c4 	movi	r3,31
81126e24:	1900160e 	bge	r3,r4,81126e80 <__floatsidf+0xa0>
81126e28:	00c104c4 	movi	r3,1043
81126e2c:	1947c83a 	sub	r3,r3,r5
81126e30:	88c6983a 	sll	r3,r17,r3
81126e34:	00800434 	movhi	r2,16
81126e38:	10bfffc4 	addi	r2,r2,-1
81126e3c:	1886703a 	and	r3,r3,r2
81126e40:	2941ffcc 	andi	r5,r5,2047
81126e44:	800d883a 	mov	r6,r16
81126e48:	0005883a 	mov	r2,zero
81126e4c:	280a953a 	slli	r5,r5,20
81126e50:	31803fcc 	andi	r6,r6,255
81126e54:	01000434 	movhi	r4,16
81126e58:	300c97fa 	slli	r6,r6,31
81126e5c:	213fffc4 	addi	r4,r4,-1
81126e60:	1906703a 	and	r3,r3,r4
81126e64:	1946b03a 	or	r3,r3,r5
81126e68:	1986b03a 	or	r3,r3,r6
81126e6c:	dfc00217 	ldw	ra,8(sp)
81126e70:	dc400117 	ldw	r17,4(sp)
81126e74:	dc000017 	ldw	r16,0(sp)
81126e78:	dec00304 	addi	sp,sp,12
81126e7c:	f800283a 	ret
81126e80:	00c002c4 	movi	r3,11
81126e84:	1887c83a 	sub	r3,r3,r2
81126e88:	88c6d83a 	srl	r3,r17,r3
81126e8c:	8904983a 	sll	r2,r17,r4
81126e90:	01000434 	movhi	r4,16
81126e94:	213fffc4 	addi	r4,r4,-1
81126e98:	2941ffcc 	andi	r5,r5,2047
81126e9c:	1906703a 	and	r3,r3,r4
81126ea0:	800d883a 	mov	r6,r16
81126ea4:	003fe906 	br	81126e4c <__reset+0xfb106e4c>
81126ea8:	000d883a 	mov	r6,zero
81126eac:	000b883a 	mov	r5,zero
81126eb0:	0007883a 	mov	r3,zero
81126eb4:	0005883a 	mov	r2,zero
81126eb8:	003fe406 	br	81126e4c <__reset+0xfb106e4c>
81126ebc:	0123c83a 	sub	r17,zero,r4
81126ec0:	003fd106 	br	81126e08 <__reset+0xfb106e08>

81126ec4 <__floatunsidf>:
81126ec4:	defffe04 	addi	sp,sp,-8
81126ec8:	de00012e 	bgeu	sp,et,81126ed0 <__floatunsidf+0xc>
81126ecc:	003b68fa 	trap	3
81126ed0:	dc000015 	stw	r16,0(sp)
81126ed4:	dfc00115 	stw	ra,4(sp)
81126ed8:	2021883a 	mov	r16,r4
81126edc:	20002226 	beq	r4,zero,81126f68 <__floatunsidf+0xa4>
81126ee0:	11117bc0 	call	811117bc <__clzsi2>
81126ee4:	01010784 	movi	r4,1054
81126ee8:	2089c83a 	sub	r4,r4,r2
81126eec:	01810cc4 	movi	r6,1075
81126ef0:	310dc83a 	sub	r6,r6,r4
81126ef4:	00c007c4 	movi	r3,31
81126ef8:	1980120e 	bge	r3,r6,81126f44 <__floatunsidf+0x80>
81126efc:	00c104c4 	movi	r3,1043
81126f00:	1907c83a 	sub	r3,r3,r4
81126f04:	80ca983a 	sll	r5,r16,r3
81126f08:	00800434 	movhi	r2,16
81126f0c:	10bfffc4 	addi	r2,r2,-1
81126f10:	2101ffcc 	andi	r4,r4,2047
81126f14:	0021883a 	mov	r16,zero
81126f18:	288a703a 	and	r5,r5,r2
81126f1c:	2008953a 	slli	r4,r4,20
81126f20:	00c00434 	movhi	r3,16
81126f24:	18ffffc4 	addi	r3,r3,-1
81126f28:	28c6703a 	and	r3,r5,r3
81126f2c:	8005883a 	mov	r2,r16
81126f30:	1906b03a 	or	r3,r3,r4
81126f34:	dfc00117 	ldw	ra,4(sp)
81126f38:	dc000017 	ldw	r16,0(sp)
81126f3c:	dec00204 	addi	sp,sp,8
81126f40:	f800283a 	ret
81126f44:	00c002c4 	movi	r3,11
81126f48:	188bc83a 	sub	r5,r3,r2
81126f4c:	814ad83a 	srl	r5,r16,r5
81126f50:	00c00434 	movhi	r3,16
81126f54:	18ffffc4 	addi	r3,r3,-1
81126f58:	81a0983a 	sll	r16,r16,r6
81126f5c:	2101ffcc 	andi	r4,r4,2047
81126f60:	28ca703a 	and	r5,r5,r3
81126f64:	003fed06 	br	81126f1c <__reset+0xfb106f1c>
81126f68:	0009883a 	mov	r4,zero
81126f6c:	000b883a 	mov	r5,zero
81126f70:	003fea06 	br	81126f1c <__reset+0xfb106f1c>

81126f74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81126f74:	defffb04 	addi	sp,sp,-20
81126f78:	de00012e 	bgeu	sp,et,81126f80 <alt_busy_sleep+0xc>
81126f7c:	003b68fa 	trap	3
81126f80:	df000415 	stw	fp,16(sp)
81126f84:	df000404 	addi	fp,sp,16
81126f88:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81126f8c:	008000c4 	movi	r2,3
81126f90:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81126f94:	e0fffd17 	ldw	r3,-12(fp)
81126f98:	008003f4 	movhi	r2,15
81126f9c:	10909004 	addi	r2,r2,16960
81126fa0:	1887383a 	mul	r3,r3,r2
81126fa4:	00817db4 	movhi	r2,1526
81126fa8:	10b84004 	addi	r2,r2,-7936
81126fac:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81126fb0:	00a00034 	movhi	r2,32768
81126fb4:	10bfffc4 	addi	r2,r2,-1
81126fb8:	10c5203a 	divu	r2,r2,r3
81126fbc:	e0ffff17 	ldw	r3,-4(fp)
81126fc0:	1885203a 	divu	r2,r3,r2
81126fc4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81126fc8:	e0bffe17 	ldw	r2,-8(fp)
81126fcc:	10002526 	beq	r2,zero,81127064 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81126fd0:	e03ffc15 	stw	zero,-16(fp)
81126fd4:	00001406 	br	81127028 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81126fd8:	00a00034 	movhi	r2,32768
81126fdc:	10bfffc4 	addi	r2,r2,-1
81126fe0:	10bfffc4 	addi	r2,r2,-1
81126fe4:	103ffe1e 	bne	r2,zero,81126fe0 <__reset+0xfb106fe0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81126fe8:	e0fffd17 	ldw	r3,-12(fp)
81126fec:	008003f4 	movhi	r2,15
81126ff0:	10909004 	addi	r2,r2,16960
81126ff4:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81126ff8:	00817db4 	movhi	r2,1526
81126ffc:	10b84004 	addi	r2,r2,-7936
81127000:	10c7203a 	divu	r3,r2,r3
81127004:	00a00034 	movhi	r2,32768
81127008:	10bfffc4 	addi	r2,r2,-1
8112700c:	10c5203a 	divu	r2,r2,r3
81127010:	e0ffff17 	ldw	r3,-4(fp)
81127014:	1885c83a 	sub	r2,r3,r2
81127018:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
8112701c:	e0bffc17 	ldw	r2,-16(fp)
81127020:	10800044 	addi	r2,r2,1
81127024:	e0bffc15 	stw	r2,-16(fp)
81127028:	e0fffc17 	ldw	r3,-16(fp)
8112702c:	e0bffe17 	ldw	r2,-8(fp)
81127030:	18bfe916 	blt	r3,r2,81126fd8 <__reset+0xfb106fd8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81127034:	e0fffd17 	ldw	r3,-12(fp)
81127038:	008003f4 	movhi	r2,15
8112703c:	10909004 	addi	r2,r2,16960
81127040:	1887383a 	mul	r3,r3,r2
81127044:	00817db4 	movhi	r2,1526
81127048:	10b84004 	addi	r2,r2,-7936
8112704c:	10c7203a 	divu	r3,r2,r3
81127050:	e0bfff17 	ldw	r2,-4(fp)
81127054:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81127058:	10bfffc4 	addi	r2,r2,-1
8112705c:	103ffe1e 	bne	r2,zero,81127058 <__reset+0xfb107058>
81127060:	00000b06 	br	81127090 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81127064:	e0fffd17 	ldw	r3,-12(fp)
81127068:	008003f4 	movhi	r2,15
8112706c:	10909004 	addi	r2,r2,16960
81127070:	1887383a 	mul	r3,r3,r2
81127074:	00817db4 	movhi	r2,1526
81127078:	10b84004 	addi	r2,r2,-7936
8112707c:	10c7203a 	divu	r3,r2,r3
81127080:	e0bfff17 	ldw	r2,-4(fp)
81127084:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81127088:	10bfffc4 	addi	r2,r2,-1
8112708c:	00bffe16 	blt	zero,r2,81127088 <__reset+0xfb107088>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81127090:	0005883a 	mov	r2,zero
}
81127094:	e037883a 	mov	sp,fp
81127098:	df000017 	ldw	fp,0(sp)
8112709c:	dec00104 	addi	sp,sp,4
811270a0:	f800283a 	ret

811270a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811270a4:	defffe04 	addi	sp,sp,-8
811270a8:	de00012e 	bgeu	sp,et,811270b0 <alt_get_errno+0xc>
811270ac:	003b68fa 	trap	3
811270b0:	dfc00115 	stw	ra,4(sp)
811270b4:	df000015 	stw	fp,0(sp)
811270b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811270bc:	d0a01017 	ldw	r2,-32704(gp)
811270c0:	10000326 	beq	r2,zero,811270d0 <alt_get_errno+0x2c>
811270c4:	d0a01017 	ldw	r2,-32704(gp)
811270c8:	103ee83a 	callr	r2
811270cc:	00000106 	br	811270d4 <alt_get_errno+0x30>
811270d0:	d0a05e04 	addi	r2,gp,-32392
}
811270d4:	e037883a 	mov	sp,fp
811270d8:	dfc00117 	ldw	ra,4(sp)
811270dc:	df000017 	ldw	fp,0(sp)
811270e0:	dec00204 	addi	sp,sp,8
811270e4:	f800283a 	ret

811270e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811270e8:	defffb04 	addi	sp,sp,-20
811270ec:	de00012e 	bgeu	sp,et,811270f4 <close+0xc>
811270f0:	003b68fa 	trap	3
811270f4:	dfc00415 	stw	ra,16(sp)
811270f8:	df000315 	stw	fp,12(sp)
811270fc:	df000304 	addi	fp,sp,12
81127100:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81127104:	e0bfff17 	ldw	r2,-4(fp)
81127108:	10000616 	blt	r2,zero,81127124 <close+0x3c>
8112710c:	e0bfff17 	ldw	r2,-4(fp)
81127110:	10c00324 	muli	r3,r2,12
81127114:	00a04534 	movhi	r2,33044
81127118:	10bd2404 	addi	r2,r2,-2928
8112711c:	1885883a 	add	r2,r3,r2
81127120:	00000106 	br	81127128 <close+0x40>
81127124:	0005883a 	mov	r2,zero
81127128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8112712c:	e0bffd17 	ldw	r2,-12(fp)
81127130:	10001926 	beq	r2,zero,81127198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81127134:	e0bffd17 	ldw	r2,-12(fp)
81127138:	10800017 	ldw	r2,0(r2)
8112713c:	10800417 	ldw	r2,16(r2)
81127140:	10000626 	beq	r2,zero,8112715c <close+0x74>
81127144:	e0bffd17 	ldw	r2,-12(fp)
81127148:	10800017 	ldw	r2,0(r2)
8112714c:	10800417 	ldw	r2,16(r2)
81127150:	e13ffd17 	ldw	r4,-12(fp)
81127154:	103ee83a 	callr	r2
81127158:	00000106 	br	81127160 <close+0x78>
8112715c:	0005883a 	mov	r2,zero
81127160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81127164:	e13fff17 	ldw	r4,-4(fp)
81127168:	1127b280 	call	81127b28 <alt_release_fd>
    if (rval < 0)
8112716c:	e0bffe17 	ldw	r2,-8(fp)
81127170:	1000070e 	bge	r2,zero,81127190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81127174:	11270a40 	call	811270a4 <alt_get_errno>
81127178:	1007883a 	mov	r3,r2
8112717c:	e0bffe17 	ldw	r2,-8(fp)
81127180:	0085c83a 	sub	r2,zero,r2
81127184:	18800015 	stw	r2,0(r3)
      return -1;
81127188:	00bfffc4 	movi	r2,-1
8112718c:	00000706 	br	811271ac <close+0xc4>
    }
    return 0;
81127190:	0005883a 	mov	r2,zero
81127194:	00000506 	br	811271ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127198:	11270a40 	call	811270a4 <alt_get_errno>
8112719c:	1007883a 	mov	r3,r2
811271a0:	00801444 	movi	r2,81
811271a4:	18800015 	stw	r2,0(r3)
    return -1;
811271a8:	00bfffc4 	movi	r2,-1
  }
}
811271ac:	e037883a 	mov	sp,fp
811271b0:	dfc00117 	ldw	ra,4(sp)
811271b4:	df000017 	ldw	fp,0(sp)
811271b8:	dec00204 	addi	sp,sp,8
811271bc:	f800283a 	ret

811271c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
811271c0:	deffff04 	addi	sp,sp,-4
811271c4:	de00012e 	bgeu	sp,et,811271cc <alt_dcache_flush_all+0xc>
811271c8:	003b68fa 	trap	3
811271cc:	df000015 	stw	fp,0(sp)
811271d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811271d4:	0001883a 	nop
811271d8:	e037883a 	mov	sp,fp
811271dc:	df000017 	ldw	fp,0(sp)
811271e0:	dec00104 	addi	sp,sp,4
811271e4:	f800283a 	ret

811271e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811271e8:	defffc04 	addi	sp,sp,-16
811271ec:	de00012e 	bgeu	sp,et,811271f4 <alt_dev_null_write+0xc>
811271f0:	003b68fa 	trap	3
811271f4:	df000315 	stw	fp,12(sp)
811271f8:	df000304 	addi	fp,sp,12
811271fc:	e13ffd15 	stw	r4,-12(fp)
81127200:	e17ffe15 	stw	r5,-8(fp)
81127204:	e1bfff15 	stw	r6,-4(fp)
  return len;
81127208:	e0bfff17 	ldw	r2,-4(fp)
}
8112720c:	e037883a 	mov	sp,fp
81127210:	df000017 	ldw	fp,0(sp)
81127214:	dec00104 	addi	sp,sp,4
81127218:	f800283a 	ret

8112721c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112721c:	defffe04 	addi	sp,sp,-8
81127220:	de00012e 	bgeu	sp,et,81127228 <alt_get_errno+0xc>
81127224:	003b68fa 	trap	3
81127228:	dfc00115 	stw	ra,4(sp)
8112722c:	df000015 	stw	fp,0(sp)
81127230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127234:	d0a01017 	ldw	r2,-32704(gp)
81127238:	10000326 	beq	r2,zero,81127248 <alt_get_errno+0x2c>
8112723c:	d0a01017 	ldw	r2,-32704(gp)
81127240:	103ee83a 	callr	r2
81127244:	00000106 	br	8112724c <alt_get_errno+0x30>
81127248:	d0a05e04 	addi	r2,gp,-32392
}
8112724c:	e037883a 	mov	sp,fp
81127250:	dfc00117 	ldw	ra,4(sp)
81127254:	df000017 	ldw	fp,0(sp)
81127258:	dec00204 	addi	sp,sp,8
8112725c:	f800283a 	ret

81127260 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81127260:	defffb04 	addi	sp,sp,-20
81127264:	de00012e 	bgeu	sp,et,8112726c <fstat+0xc>
81127268:	003b68fa 	trap	3
8112726c:	dfc00415 	stw	ra,16(sp)
81127270:	df000315 	stw	fp,12(sp)
81127274:	df000304 	addi	fp,sp,12
81127278:	e13ffe15 	stw	r4,-8(fp)
8112727c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127280:	e0bffe17 	ldw	r2,-8(fp)
81127284:	10000616 	blt	r2,zero,811272a0 <fstat+0x40>
81127288:	e0bffe17 	ldw	r2,-8(fp)
8112728c:	10c00324 	muli	r3,r2,12
81127290:	00a04534 	movhi	r2,33044
81127294:	10bd2404 	addi	r2,r2,-2928
81127298:	1885883a 	add	r2,r3,r2
8112729c:	00000106 	br	811272a4 <fstat+0x44>
811272a0:	0005883a 	mov	r2,zero
811272a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
811272a8:	e0bffd17 	ldw	r2,-12(fp)
811272ac:	10001026 	beq	r2,zero,811272f0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
811272b0:	e0bffd17 	ldw	r2,-12(fp)
811272b4:	10800017 	ldw	r2,0(r2)
811272b8:	10800817 	ldw	r2,32(r2)
811272bc:	10000726 	beq	r2,zero,811272dc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
811272c0:	e0bffd17 	ldw	r2,-12(fp)
811272c4:	10800017 	ldw	r2,0(r2)
811272c8:	10800817 	ldw	r2,32(r2)
811272cc:	e17fff17 	ldw	r5,-4(fp)
811272d0:	e13ffd17 	ldw	r4,-12(fp)
811272d4:	103ee83a 	callr	r2
811272d8:	00000a06 	br	81127304 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811272dc:	e0bfff17 	ldw	r2,-4(fp)
811272e0:	00c80004 	movi	r3,8192
811272e4:	10c00115 	stw	r3,4(r2)
      return 0;
811272e8:	0005883a 	mov	r2,zero
811272ec:	00000506 	br	81127304 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811272f0:	112721c0 	call	8112721c <alt_get_errno>
811272f4:	1007883a 	mov	r3,r2
811272f8:	00801444 	movi	r2,81
811272fc:	18800015 	stw	r2,0(r3)
    return -1;
81127300:	00bfffc4 	movi	r2,-1
  }
}
81127304:	e037883a 	mov	sp,fp
81127308:	dfc00117 	ldw	ra,4(sp)
8112730c:	df000017 	ldw	fp,0(sp)
81127310:	dec00204 	addi	sp,sp,8
81127314:	f800283a 	ret

81127318 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
81127318:	defff004 	addi	sp,sp,-64
8112731c:	de00012e 	bgeu	sp,et,81127324 <alt_irq_register+0xc>
81127320:	003b68fa 	trap	3
81127324:	df000f15 	stw	fp,60(sp)
81127328:	df000f04 	addi	fp,sp,60
8112732c:	e13ffd15 	stw	r4,-12(fp)
81127330:	e17ffe15 	stw	r5,-8(fp)
81127334:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81127338:	00bffa84 	movi	r2,-22
8112733c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81127340:	e0bffd17 	ldw	r2,-12(fp)
81127344:	10800828 	cmpgeui	r2,r2,32
81127348:	1000501e 	bne	r2,zero,8112748c <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112734c:	0005303a 	rdctl	r2,status
81127350:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127354:	e0fff617 	ldw	r3,-40(fp)
81127358:	00bfff84 	movi	r2,-2
8112735c:	1884703a 	and	r2,r3,r2
81127360:	1001703a 	wrctl	status,r2
  
  return context;
81127364:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81127368:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
8112736c:	00a04574 	movhi	r2,33045
81127370:	10915204 	addi	r2,r2,17736
81127374:	e0fffd17 	ldw	r3,-12(fp)
81127378:	180690fa 	slli	r3,r3,3
8112737c:	10c5883a 	add	r2,r2,r3
81127380:	e0ffff17 	ldw	r3,-4(fp)
81127384:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81127388:	00a04574 	movhi	r2,33045
8112738c:	10915204 	addi	r2,r2,17736
81127390:	e0fffd17 	ldw	r3,-12(fp)
81127394:	180690fa 	slli	r3,r3,3
81127398:	10c5883a 	add	r2,r2,r3
8112739c:	10800104 	addi	r2,r2,4
811273a0:	e0fffe17 	ldw	r3,-8(fp)
811273a4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
811273a8:	e0bfff17 	ldw	r2,-4(fp)
811273ac:	10001926 	beq	r2,zero,81127414 <alt_irq_register+0xfc>
811273b0:	e0bffd17 	ldw	r2,-12(fp)
811273b4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811273b8:	0005303a 	rdctl	r2,status
811273bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811273c0:	e0fff717 	ldw	r3,-36(fp)
811273c4:	00bfff84 	movi	r2,-2
811273c8:	1884703a 	and	r2,r3,r2
811273cc:	1001703a 	wrctl	status,r2
  
  return context;
811273d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811273d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
811273d8:	00c00044 	movi	r3,1
811273dc:	e0bff217 	ldw	r2,-56(fp)
811273e0:	1884983a 	sll	r2,r3,r2
811273e4:	1007883a 	mov	r3,r2
811273e8:	d0a06617 	ldw	r2,-32360(gp)
811273ec:	1884b03a 	or	r2,r3,r2
811273f0:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811273f4:	d0a06617 	ldw	r2,-32360(gp)
811273f8:	100170fa 	wrctl	ienable,r2
811273fc:	e0bff817 	ldw	r2,-32(fp)
81127400:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127404:	e0bff917 	ldw	r2,-28(fp)
81127408:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8112740c:	0005883a 	mov	r2,zero
81127410:	00001906 	br	81127478 <alt_irq_register+0x160>
81127414:	e0bffd17 	ldw	r2,-12(fp)
81127418:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112741c:	0005303a 	rdctl	r2,status
81127420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127424:	e0fffa17 	ldw	r3,-24(fp)
81127428:	00bfff84 	movi	r2,-2
8112742c:	1884703a 	and	r2,r3,r2
81127430:	1001703a 	wrctl	status,r2
  
  return context;
81127434:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81127438:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
8112743c:	00c00044 	movi	r3,1
81127440:	e0bff417 	ldw	r2,-48(fp)
81127444:	1884983a 	sll	r2,r3,r2
81127448:	0084303a 	nor	r2,zero,r2
8112744c:	1007883a 	mov	r3,r2
81127450:	d0a06617 	ldw	r2,-32360(gp)
81127454:	1884703a 	and	r2,r3,r2
81127458:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112745c:	d0a06617 	ldw	r2,-32360(gp)
81127460:	100170fa 	wrctl	ienable,r2
81127464:	e0bffb17 	ldw	r2,-20(fp)
81127468:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112746c:	e0bffc17 	ldw	r2,-16(fp)
81127470:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81127474:	0005883a 	mov	r2,zero
81127478:	e0bff115 	stw	r2,-60(fp)
8112747c:	e0bff317 	ldw	r2,-52(fp)
81127480:	e0bff515 	stw	r2,-44(fp)
81127484:	e0bff517 	ldw	r2,-44(fp)
81127488:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
8112748c:	e0bff117 	ldw	r2,-60(fp)
}
81127490:	e037883a 	mov	sp,fp
81127494:	df000017 	ldw	fp,0(sp)
81127498:	dec00104 	addi	sp,sp,4
8112749c:	f800283a 	ret

811274a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811274a0:	defffe04 	addi	sp,sp,-8
811274a4:	de00012e 	bgeu	sp,et,811274ac <alt_get_errno+0xc>
811274a8:	003b68fa 	trap	3
811274ac:	dfc00115 	stw	ra,4(sp)
811274b0:	df000015 	stw	fp,0(sp)
811274b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811274b8:	d0a01017 	ldw	r2,-32704(gp)
811274bc:	10000326 	beq	r2,zero,811274cc <alt_get_errno+0x2c>
811274c0:	d0a01017 	ldw	r2,-32704(gp)
811274c4:	103ee83a 	callr	r2
811274c8:	00000106 	br	811274d0 <alt_get_errno+0x30>
811274cc:	d0a05e04 	addi	r2,gp,-32392
}
811274d0:	e037883a 	mov	sp,fp
811274d4:	dfc00117 	ldw	ra,4(sp)
811274d8:	df000017 	ldw	fp,0(sp)
811274dc:	dec00204 	addi	sp,sp,8
811274e0:	f800283a 	ret

811274e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811274e4:	deffed04 	addi	sp,sp,-76
811274e8:	de00012e 	bgeu	sp,et,811274f0 <isatty+0xc>
811274ec:	003b68fa 	trap	3
811274f0:	dfc01215 	stw	ra,72(sp)
811274f4:	df001115 	stw	fp,68(sp)
811274f8:	df001104 	addi	fp,sp,68
811274fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127500:	e0bfff17 	ldw	r2,-4(fp)
81127504:	10000616 	blt	r2,zero,81127520 <isatty+0x3c>
81127508:	e0bfff17 	ldw	r2,-4(fp)
8112750c:	10c00324 	muli	r3,r2,12
81127510:	00a04534 	movhi	r2,33044
81127514:	10bd2404 	addi	r2,r2,-2928
81127518:	1885883a 	add	r2,r3,r2
8112751c:	00000106 	br	81127524 <isatty+0x40>
81127520:	0005883a 	mov	r2,zero
81127524:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81127528:	e0bfef17 	ldw	r2,-68(fp)
8112752c:	10000e26 	beq	r2,zero,81127568 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81127530:	e0bfef17 	ldw	r2,-68(fp)
81127534:	10800017 	ldw	r2,0(r2)
81127538:	10800817 	ldw	r2,32(r2)
8112753c:	1000021e 	bne	r2,zero,81127548 <isatty+0x64>
    {
      return 1;
81127540:	00800044 	movi	r2,1
81127544:	00000d06 	br	8112757c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81127548:	e0bff004 	addi	r2,fp,-64
8112754c:	100b883a 	mov	r5,r2
81127550:	e13fff17 	ldw	r4,-4(fp)
81127554:	11272600 	call	81127260 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81127558:	e0bff117 	ldw	r2,-60(fp)
8112755c:	10880020 	cmpeqi	r2,r2,8192
81127560:	10803fcc 	andi	r2,r2,255
81127564:	00000506 	br	8112757c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127568:	11274a00 	call	811274a0 <alt_get_errno>
8112756c:	1007883a 	mov	r3,r2
81127570:	00801444 	movi	r2,81
81127574:	18800015 	stw	r2,0(r3)
    return 0;
81127578:	0005883a 	mov	r2,zero
  }
}
8112757c:	e037883a 	mov	sp,fp
81127580:	dfc00117 	ldw	ra,4(sp)
81127584:	df000017 	ldw	fp,0(sp)
81127588:	dec00204 	addi	sp,sp,8
8112758c:	f800283a 	ret

81127590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127590:	defffe04 	addi	sp,sp,-8
81127594:	de00012e 	bgeu	sp,et,8112759c <alt_get_errno+0xc>
81127598:	003b68fa 	trap	3
8112759c:	dfc00115 	stw	ra,4(sp)
811275a0:	df000015 	stw	fp,0(sp)
811275a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811275a8:	d0a01017 	ldw	r2,-32704(gp)
811275ac:	10000326 	beq	r2,zero,811275bc <alt_get_errno+0x2c>
811275b0:	d0a01017 	ldw	r2,-32704(gp)
811275b4:	103ee83a 	callr	r2
811275b8:	00000106 	br	811275c0 <alt_get_errno+0x30>
811275bc:	d0a05e04 	addi	r2,gp,-32392
}
811275c0:	e037883a 	mov	sp,fp
811275c4:	dfc00117 	ldw	ra,4(sp)
811275c8:	df000017 	ldw	fp,0(sp)
811275cc:	dec00204 	addi	sp,sp,8
811275d0:	f800283a 	ret

811275d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
811275d4:	defff904 	addi	sp,sp,-28
811275d8:	de00012e 	bgeu	sp,et,811275e0 <lseek+0xc>
811275dc:	003b68fa 	trap	3
811275e0:	dfc00615 	stw	ra,24(sp)
811275e4:	df000515 	stw	fp,20(sp)
811275e8:	df000504 	addi	fp,sp,20
811275ec:	e13ffd15 	stw	r4,-12(fp)
811275f0:	e17ffe15 	stw	r5,-8(fp)
811275f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811275f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811275fc:	e0bffd17 	ldw	r2,-12(fp)
81127600:	10000616 	blt	r2,zero,8112761c <lseek+0x48>
81127604:	e0bffd17 	ldw	r2,-12(fp)
81127608:	10c00324 	muli	r3,r2,12
8112760c:	00a04534 	movhi	r2,33044
81127610:	10bd2404 	addi	r2,r2,-2928
81127614:	1885883a 	add	r2,r3,r2
81127618:	00000106 	br	81127620 <lseek+0x4c>
8112761c:	0005883a 	mov	r2,zero
81127620:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81127624:	e0bffc17 	ldw	r2,-16(fp)
81127628:	10001026 	beq	r2,zero,8112766c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8112762c:	e0bffc17 	ldw	r2,-16(fp)
81127630:	10800017 	ldw	r2,0(r2)
81127634:	10800717 	ldw	r2,28(r2)
81127638:	10000926 	beq	r2,zero,81127660 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8112763c:	e0bffc17 	ldw	r2,-16(fp)
81127640:	10800017 	ldw	r2,0(r2)
81127644:	10800717 	ldw	r2,28(r2)
81127648:	e1bfff17 	ldw	r6,-4(fp)
8112764c:	e17ffe17 	ldw	r5,-8(fp)
81127650:	e13ffc17 	ldw	r4,-16(fp)
81127654:	103ee83a 	callr	r2
81127658:	e0bffb15 	stw	r2,-20(fp)
8112765c:	00000506 	br	81127674 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81127660:	00bfde84 	movi	r2,-134
81127664:	e0bffb15 	stw	r2,-20(fp)
81127668:	00000206 	br	81127674 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
8112766c:	00bfebc4 	movi	r2,-81
81127670:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81127674:	e0bffb17 	ldw	r2,-20(fp)
81127678:	1000070e 	bge	r2,zero,81127698 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
8112767c:	11275900 	call	81127590 <alt_get_errno>
81127680:	1007883a 	mov	r3,r2
81127684:	e0bffb17 	ldw	r2,-20(fp)
81127688:	0085c83a 	sub	r2,zero,r2
8112768c:	18800015 	stw	r2,0(r3)
    rc = -1;
81127690:	00bfffc4 	movi	r2,-1
81127694:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81127698:	e0bffb17 	ldw	r2,-20(fp)
}
8112769c:	e037883a 	mov	sp,fp
811276a0:	dfc00117 	ldw	ra,4(sp)
811276a4:	df000017 	ldw	fp,0(sp)
811276a8:	dec00204 	addi	sp,sp,8
811276ac:	f800283a 	ret

811276b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
811276b0:	defff904 	addi	sp,sp,-28
811276b4:	de00012e 	bgeu	sp,et,811276bc <alt_main+0xc>
811276b8:	003b68fa 	trap	3
811276bc:	dfc00615 	stw	ra,24(sp)
811276c0:	df000515 	stw	fp,20(sp)
811276c4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
811276c8:	0009883a 	mov	r4,zero
811276cc:	11321e80 	call	811321e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
811276d0:	1128c7c0 	call	81128c7c <OSInit>
811276d4:	01000044 	movi	r4,1
811276d8:	112e9980 	call	8112e998 <OSSemCreate>
811276dc:	d0a06d15 	stw	r2,-32332(gp)
811276e0:	01000044 	movi	r4,1
811276e4:	112e9980 	call	8112e998 <OSSemCreate>
811276e8:	d0a06f15 	stw	r2,-32324(gp)
811276ec:	d0a06504 	addi	r2,gp,-32364
811276f0:	e0bffc15 	stw	r2,-16(fp)
811276f4:	00800044 	movi	r2,1
811276f8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
811276fc:	e0bffd0b 	ldhu	r2,-12(fp)
81127700:	1009883a 	mov	r4,r2
81127704:	112e9980 	call	8112e998 <OSSemCreate>
81127708:	1007883a 	mov	r3,r2
8112770c:	e0bffc17 	ldw	r2,-16(fp)
81127710:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81127714:	11322280 	call	81132228 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81127718:	01a04534 	movhi	r6,33044
8112771c:	31b9f104 	addi	r6,r6,-6204
81127720:	01604534 	movhi	r5,33044
81127724:	2979f604 	addi	r5,r5,-6184
81127728:	01204534 	movhi	r4,33044
8112772c:	2139f604 	addi	r4,r4,-6184
81127730:	113ab540 	call	8113ab54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81127734:	113a4640 	call	8113a464 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81127738:	01204534 	movhi	r4,33044
8112773c:	21293304 	addi	r4,r4,-23348
81127740:	113b3080 	call	8113b308 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81127744:	d0a06717 	ldw	r2,-32356(gp)
81127748:	d0e06817 	ldw	r3,-32352(gp)
8112774c:	d1206917 	ldw	r4,-32348(gp)
81127750:	200d883a 	mov	r6,r4
81127754:	180b883a 	mov	r5,r3
81127758:	1009883a 	mov	r4,r2
8112775c:	110b6b80 	call	8110b6b8 <main>
81127760:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
81127764:	01000044 	movi	r4,1
81127768:	11270e80 	call	811270e8 <close>
  exit (result);
8112776c:	e13ffb17 	ldw	r4,-20(fp)
81127770:	113b31c0 	call	8113b31c <exit>

81127774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127774:	defffe04 	addi	sp,sp,-8
81127778:	de00012e 	bgeu	sp,et,81127780 <alt_get_errno+0xc>
8112777c:	003b68fa 	trap	3
81127780:	dfc00115 	stw	ra,4(sp)
81127784:	df000015 	stw	fp,0(sp)
81127788:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112778c:	d0a01017 	ldw	r2,-32704(gp)
81127790:	10000326 	beq	r2,zero,811277a0 <alt_get_errno+0x2c>
81127794:	d0a01017 	ldw	r2,-32704(gp)
81127798:	103ee83a 	callr	r2
8112779c:	00000106 	br	811277a4 <alt_get_errno+0x30>
811277a0:	d0a05e04 	addi	r2,gp,-32392
}
811277a4:	e037883a 	mov	sp,fp
811277a8:	dfc00117 	ldw	ra,4(sp)
811277ac:	df000017 	ldw	fp,0(sp)
811277b0:	dec00204 	addi	sp,sp,8
811277b4:	f800283a 	ret

811277b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
811277b8:	defffd04 	addi	sp,sp,-12
811277bc:	de00012e 	bgeu	sp,et,811277c4 <alt_file_locked+0xc>
811277c0:	003b68fa 	trap	3
811277c4:	df000215 	stw	fp,8(sp)
811277c8:	df000204 	addi	fp,sp,8
811277cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
811277d0:	e0bfff17 	ldw	r2,-4(fp)
811277d4:	10800217 	ldw	r2,8(r2)
811277d8:	10d00034 	orhi	r3,r2,16384
811277dc:	e0bfff17 	ldw	r2,-4(fp)
811277e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
811277e4:	e03ffe15 	stw	zero,-8(fp)
811277e8:	00001d06 	br	81127860 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811277ec:	00a04534 	movhi	r2,33044
811277f0:	10bd2404 	addi	r2,r2,-2928
811277f4:	e0fffe17 	ldw	r3,-8(fp)
811277f8:	18c00324 	muli	r3,r3,12
811277fc:	10c5883a 	add	r2,r2,r3
81127800:	10c00017 	ldw	r3,0(r2)
81127804:	e0bfff17 	ldw	r2,-4(fp)
81127808:	10800017 	ldw	r2,0(r2)
8112780c:	1880111e 	bne	r3,r2,81127854 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81127810:	00a04534 	movhi	r2,33044
81127814:	10bd2404 	addi	r2,r2,-2928
81127818:	e0fffe17 	ldw	r3,-8(fp)
8112781c:	18c00324 	muli	r3,r3,12
81127820:	10c5883a 	add	r2,r2,r3
81127824:	10800204 	addi	r2,r2,8
81127828:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112782c:	1000090e 	bge	r2,zero,81127854 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81127830:	e0bffe17 	ldw	r2,-8(fp)
81127834:	10c00324 	muli	r3,r2,12
81127838:	00a04534 	movhi	r2,33044
8112783c:	10bd2404 	addi	r2,r2,-2928
81127840:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81127844:	e0bfff17 	ldw	r2,-4(fp)
81127848:	18800226 	beq	r3,r2,81127854 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8112784c:	00bffcc4 	movi	r2,-13
81127850:	00000806 	br	81127874 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81127854:	e0bffe17 	ldw	r2,-8(fp)
81127858:	10800044 	addi	r2,r2,1
8112785c:	e0bffe15 	stw	r2,-8(fp)
81127860:	d0a00f17 	ldw	r2,-32708(gp)
81127864:	1007883a 	mov	r3,r2
81127868:	e0bffe17 	ldw	r2,-8(fp)
8112786c:	18bfdf2e 	bgeu	r3,r2,811277ec <__reset+0xfb1077ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81127870:	0005883a 	mov	r2,zero
}
81127874:	e037883a 	mov	sp,fp
81127878:	df000017 	ldw	fp,0(sp)
8112787c:	dec00104 	addi	sp,sp,4
81127880:	f800283a 	ret

81127884 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81127884:	defff604 	addi	sp,sp,-40
81127888:	de00012e 	bgeu	sp,et,81127890 <open+0xc>
8112788c:	003b68fa 	trap	3
81127890:	dfc00915 	stw	ra,36(sp)
81127894:	df000815 	stw	fp,32(sp)
81127898:	df000804 	addi	fp,sp,32
8112789c:	e13ffd15 	stw	r4,-12(fp)
811278a0:	e17ffe15 	stw	r5,-8(fp)
811278a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
811278a8:	00bfffc4 	movi	r2,-1
811278ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
811278b0:	00bffb44 	movi	r2,-19
811278b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
811278b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
811278bc:	d1600d04 	addi	r5,gp,-32716
811278c0:	e13ffd17 	ldw	r4,-12(fp)
811278c4:	113a5340 	call	8113a534 <alt_find_dev>
811278c8:	e0bff815 	stw	r2,-32(fp)
811278cc:	e0bff817 	ldw	r2,-32(fp)
811278d0:	1000051e 	bne	r2,zero,811278e8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
811278d4:	e13ffd17 	ldw	r4,-12(fp)
811278d8:	113a5cc0 	call	8113a5cc <alt_find_file>
811278dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
811278e0:	00800044 	movi	r2,1
811278e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
811278e8:	e0bff817 	ldw	r2,-32(fp)
811278ec:	10002926 	beq	r2,zero,81127994 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
811278f0:	e13ff817 	ldw	r4,-32(fp)
811278f4:	113a6dc0 	call	8113a6dc <alt_get_fd>
811278f8:	e0bff915 	stw	r2,-28(fp)
811278fc:	e0bff917 	ldw	r2,-28(fp)
81127900:	1000030e 	bge	r2,zero,81127910 <open+0x8c>
    {
      status = index;
81127904:	e0bff917 	ldw	r2,-28(fp)
81127908:	e0bffa15 	stw	r2,-24(fp)
8112790c:	00002306 	br	8112799c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81127910:	e0bff917 	ldw	r2,-28(fp)
81127914:	10c00324 	muli	r3,r2,12
81127918:	00a04534 	movhi	r2,33044
8112791c:	10bd2404 	addi	r2,r2,-2928
81127920:	1885883a 	add	r2,r3,r2
81127924:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81127928:	e0fffe17 	ldw	r3,-8(fp)
8112792c:	00900034 	movhi	r2,16384
81127930:	10bfffc4 	addi	r2,r2,-1
81127934:	1886703a 	and	r3,r3,r2
81127938:	e0bffc17 	ldw	r2,-16(fp)
8112793c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81127940:	e0bffb17 	ldw	r2,-20(fp)
81127944:	1000051e 	bne	r2,zero,8112795c <open+0xd8>
81127948:	e13ffc17 	ldw	r4,-16(fp)
8112794c:	11277b80 	call	811277b8 <alt_file_locked>
81127950:	e0bffa15 	stw	r2,-24(fp)
81127954:	e0bffa17 	ldw	r2,-24(fp)
81127958:	10001016 	blt	r2,zero,8112799c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8112795c:	e0bff817 	ldw	r2,-32(fp)
81127960:	10800317 	ldw	r2,12(r2)
81127964:	10000826 	beq	r2,zero,81127988 <open+0x104>
81127968:	e0bff817 	ldw	r2,-32(fp)
8112796c:	10800317 	ldw	r2,12(r2)
81127970:	e1ffff17 	ldw	r7,-4(fp)
81127974:	e1bffe17 	ldw	r6,-8(fp)
81127978:	e17ffd17 	ldw	r5,-12(fp)
8112797c:	e13ffc17 	ldw	r4,-16(fp)
81127980:	103ee83a 	callr	r2
81127984:	00000106 	br	8112798c <open+0x108>
81127988:	0005883a 	mov	r2,zero
8112798c:	e0bffa15 	stw	r2,-24(fp)
81127990:	00000206 	br	8112799c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81127994:	00bffb44 	movi	r2,-19
81127998:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8112799c:	e0bffa17 	ldw	r2,-24(fp)
811279a0:	1000090e 	bge	r2,zero,811279c8 <open+0x144>
  {
    alt_release_fd (index);  
811279a4:	e13ff917 	ldw	r4,-28(fp)
811279a8:	1127b280 	call	81127b28 <alt_release_fd>
    ALT_ERRNO = -status;
811279ac:	11277740 	call	81127774 <alt_get_errno>
811279b0:	1007883a 	mov	r3,r2
811279b4:	e0bffa17 	ldw	r2,-24(fp)
811279b8:	0085c83a 	sub	r2,zero,r2
811279bc:	18800015 	stw	r2,0(r3)
    return -1;
811279c0:	00bfffc4 	movi	r2,-1
811279c4:	00000106 	br	811279cc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
811279c8:	e0bff917 	ldw	r2,-28(fp)
}
811279cc:	e037883a 	mov	sp,fp
811279d0:	dfc00117 	ldw	ra,4(sp)
811279d4:	df000017 	ldw	fp,0(sp)
811279d8:	dec00204 	addi	sp,sp,8
811279dc:	f800283a 	ret

811279e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811279e0:	defffe04 	addi	sp,sp,-8
811279e4:	de00012e 	bgeu	sp,et,811279ec <alt_get_errno+0xc>
811279e8:	003b68fa 	trap	3
811279ec:	dfc00115 	stw	ra,4(sp)
811279f0:	df000015 	stw	fp,0(sp)
811279f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811279f8:	d0a01017 	ldw	r2,-32704(gp)
811279fc:	10000326 	beq	r2,zero,81127a0c <alt_get_errno+0x2c>
81127a00:	d0a01017 	ldw	r2,-32704(gp)
81127a04:	103ee83a 	callr	r2
81127a08:	00000106 	br	81127a10 <alt_get_errno+0x30>
81127a0c:	d0a05e04 	addi	r2,gp,-32392
}
81127a10:	e037883a 	mov	sp,fp
81127a14:	dfc00117 	ldw	ra,4(sp)
81127a18:	df000017 	ldw	fp,0(sp)
81127a1c:	dec00204 	addi	sp,sp,8
81127a20:	f800283a 	ret

81127a24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81127a24:	defff904 	addi	sp,sp,-28
81127a28:	de00012e 	bgeu	sp,et,81127a30 <read+0xc>
81127a2c:	003b68fa 	trap	3
81127a30:	dfc00615 	stw	ra,24(sp)
81127a34:	df000515 	stw	fp,20(sp)
81127a38:	df000504 	addi	fp,sp,20
81127a3c:	e13ffd15 	stw	r4,-12(fp)
81127a40:	e17ffe15 	stw	r5,-8(fp)
81127a44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127a48:	e0bffd17 	ldw	r2,-12(fp)
81127a4c:	10000616 	blt	r2,zero,81127a68 <read+0x44>
81127a50:	e0bffd17 	ldw	r2,-12(fp)
81127a54:	10c00324 	muli	r3,r2,12
81127a58:	00a04534 	movhi	r2,33044
81127a5c:	10bd2404 	addi	r2,r2,-2928
81127a60:	1885883a 	add	r2,r3,r2
81127a64:	00000106 	br	81127a6c <read+0x48>
81127a68:	0005883a 	mov	r2,zero
81127a6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81127a70:	e0bffb17 	ldw	r2,-20(fp)
81127a74:	10002226 	beq	r2,zero,81127b00 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81127a78:	e0bffb17 	ldw	r2,-20(fp)
81127a7c:	10800217 	ldw	r2,8(r2)
81127a80:	108000cc 	andi	r2,r2,3
81127a84:	10800060 	cmpeqi	r2,r2,1
81127a88:	1000181e 	bne	r2,zero,81127aec <read+0xc8>
        (fd->dev->read))
81127a8c:	e0bffb17 	ldw	r2,-20(fp)
81127a90:	10800017 	ldw	r2,0(r2)
81127a94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81127a98:	10001426 	beq	r2,zero,81127aec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81127a9c:	e0bffb17 	ldw	r2,-20(fp)
81127aa0:	10800017 	ldw	r2,0(r2)
81127aa4:	10800517 	ldw	r2,20(r2)
81127aa8:	e0ffff17 	ldw	r3,-4(fp)
81127aac:	180d883a 	mov	r6,r3
81127ab0:	e17ffe17 	ldw	r5,-8(fp)
81127ab4:	e13ffb17 	ldw	r4,-20(fp)
81127ab8:	103ee83a 	callr	r2
81127abc:	e0bffc15 	stw	r2,-16(fp)
81127ac0:	e0bffc17 	ldw	r2,-16(fp)
81127ac4:	1000070e 	bge	r2,zero,81127ae4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
81127ac8:	11279e00 	call	811279e0 <alt_get_errno>
81127acc:	1007883a 	mov	r3,r2
81127ad0:	e0bffc17 	ldw	r2,-16(fp)
81127ad4:	0085c83a 	sub	r2,zero,r2
81127ad8:	18800015 	stw	r2,0(r3)
          return -1;
81127adc:	00bfffc4 	movi	r2,-1
81127ae0:	00000c06 	br	81127b14 <read+0xf0>
        }
        return rval;
81127ae4:	e0bffc17 	ldw	r2,-16(fp)
81127ae8:	00000a06 	br	81127b14 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81127aec:	11279e00 	call	811279e0 <alt_get_errno>
81127af0:	1007883a 	mov	r3,r2
81127af4:	00800344 	movi	r2,13
81127af8:	18800015 	stw	r2,0(r3)
81127afc:	00000406 	br	81127b10 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81127b00:	11279e00 	call	811279e0 <alt_get_errno>
81127b04:	1007883a 	mov	r3,r2
81127b08:	00801444 	movi	r2,81
81127b0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81127b10:	00bfffc4 	movi	r2,-1
}
81127b14:	e037883a 	mov	sp,fp
81127b18:	dfc00117 	ldw	ra,4(sp)
81127b1c:	df000017 	ldw	fp,0(sp)
81127b20:	dec00204 	addi	sp,sp,8
81127b24:	f800283a 	ret

81127b28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81127b28:	defffe04 	addi	sp,sp,-8
81127b2c:	de00012e 	bgeu	sp,et,81127b34 <alt_release_fd+0xc>
81127b30:	003b68fa 	trap	3
81127b34:	df000115 	stw	fp,4(sp)
81127b38:	df000104 	addi	fp,sp,4
81127b3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81127b40:	e0bfff17 	ldw	r2,-4(fp)
81127b44:	108000d0 	cmplti	r2,r2,3
81127b48:	10000d1e 	bne	r2,zero,81127b80 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
81127b4c:	00a04534 	movhi	r2,33044
81127b50:	10bd2404 	addi	r2,r2,-2928
81127b54:	e0ffff17 	ldw	r3,-4(fp)
81127b58:	18c00324 	muli	r3,r3,12
81127b5c:	10c5883a 	add	r2,r2,r3
81127b60:	10800204 	addi	r2,r2,8
81127b64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81127b68:	00a04534 	movhi	r2,33044
81127b6c:	10bd2404 	addi	r2,r2,-2928
81127b70:	e0ffff17 	ldw	r3,-4(fp)
81127b74:	18c00324 	muli	r3,r3,12
81127b78:	10c5883a 	add	r2,r2,r3
81127b7c:	10000015 	stw	zero,0(r2)
  }
}
81127b80:	0001883a 	nop
81127b84:	e037883a 	mov	sp,fp
81127b88:	df000017 	ldw	fp,0(sp)
81127b8c:	dec00104 	addi	sp,sp,4
81127b90:	f800283a 	ret

81127b94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81127b94:	defff604 	addi	sp,sp,-40
81127b98:	de00012e 	bgeu	sp,et,81127ba0 <sbrk+0xc>
81127b9c:	003b68fa 	trap	3
81127ba0:	df000915 	stw	fp,36(sp)
81127ba4:	df000904 	addi	fp,sp,36
81127ba8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127bac:	0005303a 	rdctl	r2,status
81127bb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127bb4:	e0fffe17 	ldw	r3,-8(fp)
81127bb8:	00bfff84 	movi	r2,-2
81127bbc:	1884703a 	and	r2,r3,r2
81127bc0:	1001703a 	wrctl	status,r2
  
  return context;
81127bc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81127bc8:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81127bcc:	d0a01217 	ldw	r2,-32696(gp)
81127bd0:	10c000c4 	addi	r3,r2,3
81127bd4:	00bfff04 	movi	r2,-4
81127bd8:	1884703a 	and	r2,r3,r2
81127bdc:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81127be0:	d0e01217 	ldw	r3,-32696(gp)
81127be4:	e0bfff17 	ldw	r2,-4(fp)
81127be8:	1887883a 	add	r3,r3,r2
81127bec:	00a04834 	movhi	r2,33056
81127bf0:	10a80004 	addi	r2,r2,-24576
81127bf4:	10c0062e 	bgeu	r2,r3,81127c10 <sbrk+0x7c>
81127bf8:	e0bff817 	ldw	r2,-32(fp)
81127bfc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127c00:	e0bff717 	ldw	r2,-36(fp)
81127c04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81127c08:	00bfffc4 	movi	r2,-1
81127c0c:	00001c06 	br	81127c80 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
81127c10:	d0a01217 	ldw	r2,-32696(gp)
81127c14:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
81127c18:	d0e01217 	ldw	r3,-32696(gp)
81127c1c:	e0bfff17 	ldw	r2,-4(fp)
81127c20:	1885883a 	add	r2,r3,r2
81127c24:	d0a01215 	stw	r2,-32696(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
81127c28:	c005883a 	mov	r2,et
81127c2c:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81127c30:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
81127c34:	e0bffa17 	ldw	r2,-24(fp)
81127c38:	18800c1e 	bne	r3,r2,81127c6c <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
81127c3c:	d805883a 	mov	r2,sp
81127c40:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
81127c44:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81127c48:	d0e01217 	ldw	r3,-32696(gp)
81127c4c:	18800136 	bltu	r3,r2,81127c54 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81127c50:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
81127c54:	d0a01217 	ldw	r2,-32696(gp)
81127c58:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
81127c5c:	e0bffc17 	ldw	r2,-16(fp)
81127c60:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
81127c64:	e0bffc17 	ldw	r2,-16(fp)
81127c68:	1031883a 	mov	et,r2
81127c6c:	e0bff817 	ldw	r2,-32(fp)
81127c70:	e0bffd15 	stw	r2,-12(fp)
81127c74:	e0bffd17 	ldw	r2,-12(fp)
81127c78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81127c7c:	e0bffa17 	ldw	r2,-24(fp)
} 
81127c80:	e037883a 	mov	sp,fp
81127c84:	df000017 	ldw	fp,0(sp)
81127c88:	dec00104 	addi	sp,sp,4
81127c8c:	f800283a 	ret

81127c90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81127c90:	defffa04 	addi	sp,sp,-24
81127c94:	de00012e 	bgeu	sp,et,81127c9c <alt_alarm_stop+0xc>
81127c98:	003b68fa 	trap	3
81127c9c:	df000515 	stw	fp,20(sp)
81127ca0:	df000504 	addi	fp,sp,20
81127ca4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ca8:	0005303a 	rdctl	r2,status
81127cac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127cb0:	e0fffc17 	ldw	r3,-16(fp)
81127cb4:	00bfff84 	movi	r2,-2
81127cb8:	1884703a 	and	r2,r3,r2
81127cbc:	1001703a 	wrctl	status,r2
  
  return context;
81127cc0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81127cc4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81127cc8:	e0bfff17 	ldw	r2,-4(fp)
81127ccc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81127cd0:	e0bffd17 	ldw	r2,-12(fp)
81127cd4:	10800017 	ldw	r2,0(r2)
81127cd8:	e0fffd17 	ldw	r3,-12(fp)
81127cdc:	18c00117 	ldw	r3,4(r3)
81127ce0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81127ce4:	e0bffd17 	ldw	r2,-12(fp)
81127ce8:	10800117 	ldw	r2,4(r2)
81127cec:	e0fffd17 	ldw	r3,-12(fp)
81127cf0:	18c00017 	ldw	r3,0(r3)
81127cf4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81127cf8:	e0bffd17 	ldw	r2,-12(fp)
81127cfc:	e0fffd17 	ldw	r3,-12(fp)
81127d00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81127d04:	e0bffd17 	ldw	r2,-12(fp)
81127d08:	e0fffd17 	ldw	r3,-12(fp)
81127d0c:	10c00015 	stw	r3,0(r2)
81127d10:	e0bffb17 	ldw	r2,-20(fp)
81127d14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127d18:	e0bffe17 	ldw	r2,-8(fp)
81127d1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81127d20:	0001883a 	nop
81127d24:	e037883a 	mov	sp,fp
81127d28:	df000017 	ldw	fp,0(sp)
81127d2c:	dec00104 	addi	sp,sp,4
81127d30:	f800283a 	ret

81127d34 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81127d34:	defffb04 	addi	sp,sp,-20
81127d38:	de00012e 	bgeu	sp,et,81127d40 <alt_tick+0xc>
81127d3c:	003b68fa 	trap	3
81127d40:	dfc00415 	stw	ra,16(sp)
81127d44:	df000315 	stw	fp,12(sp)
81127d48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81127d4c:	d0a01317 	ldw	r2,-32692(gp)
81127d50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81127d54:	d0a06b17 	ldw	r2,-32340(gp)
81127d58:	10800044 	addi	r2,r2,1
81127d5c:	d0a06b15 	stw	r2,-32340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81127d60:	00002e06 	br	81127e1c <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
81127d64:	e0bffd17 	ldw	r2,-12(fp)
81127d68:	10800017 	ldw	r2,0(r2)
81127d6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81127d70:	e0bffd17 	ldw	r2,-12(fp)
81127d74:	10800403 	ldbu	r2,16(r2)
81127d78:	10803fcc 	andi	r2,r2,255
81127d7c:	10000426 	beq	r2,zero,81127d90 <alt_tick+0x5c>
81127d80:	d0a06b17 	ldw	r2,-32340(gp)
81127d84:	1000021e 	bne	r2,zero,81127d90 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81127d88:	e0bffd17 	ldw	r2,-12(fp)
81127d8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81127d90:	e0bffd17 	ldw	r2,-12(fp)
81127d94:	10800217 	ldw	r2,8(r2)
81127d98:	d0e06b17 	ldw	r3,-32340(gp)
81127d9c:	18801d36 	bltu	r3,r2,81127e14 <alt_tick+0xe0>
81127da0:	e0bffd17 	ldw	r2,-12(fp)
81127da4:	10800403 	ldbu	r2,16(r2)
81127da8:	10803fcc 	andi	r2,r2,255
81127dac:	1000191e 	bne	r2,zero,81127e14 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81127db0:	e0bffd17 	ldw	r2,-12(fp)
81127db4:	10800317 	ldw	r2,12(r2)
81127db8:	e0fffd17 	ldw	r3,-12(fp)
81127dbc:	18c00517 	ldw	r3,20(r3)
81127dc0:	1809883a 	mov	r4,r3
81127dc4:	103ee83a 	callr	r2
81127dc8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81127dcc:	e0bfff17 	ldw	r2,-4(fp)
81127dd0:	1000031e 	bne	r2,zero,81127de0 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
81127dd4:	e13ffd17 	ldw	r4,-12(fp)
81127dd8:	1127c900 	call	81127c90 <alt_alarm_stop>
81127ddc:	00000d06 	br	81127e14 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
81127de0:	e0bffd17 	ldw	r2,-12(fp)
81127de4:	10c00217 	ldw	r3,8(r2)
81127de8:	e0bfff17 	ldw	r2,-4(fp)
81127dec:	1887883a 	add	r3,r3,r2
81127df0:	e0bffd17 	ldw	r2,-12(fp)
81127df4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81127df8:	e0bffd17 	ldw	r2,-12(fp)
81127dfc:	10c00217 	ldw	r3,8(r2)
81127e00:	d0a06b17 	ldw	r2,-32340(gp)
81127e04:	1880032e 	bgeu	r3,r2,81127e14 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
81127e08:	e0bffd17 	ldw	r2,-12(fp)
81127e0c:	00c00044 	movi	r3,1
81127e10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81127e14:	e0bffe17 	ldw	r2,-8(fp)
81127e18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81127e1c:	e0fffd17 	ldw	r3,-12(fp)
81127e20:	d0a01304 	addi	r2,gp,-32692
81127e24:	18bfcf1e 	bne	r3,r2,81127d64 <__reset+0xfb107d64>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81127e28:	11290dc0 	call	811290dc <OSTimeTick>
}
81127e2c:	0001883a 	nop
81127e30:	e037883a 	mov	sp,fp
81127e34:	dfc00117 	ldw	ra,4(sp)
81127e38:	df000017 	ldw	fp,0(sp)
81127e3c:	dec00204 	addi	sp,sp,8
81127e40:	f800283a 	ret

81127e44 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81127e44:	defffb04 	addi	sp,sp,-20
81127e48:	de00012e 	bgeu	sp,et,81127e50 <usleep+0xc>
81127e4c:	003b68fa 	trap	3
81127e50:	dfc00415 	stw	ra,16(sp)
81127e54:	df000315 	stw	fp,12(sp)
81127e58:	df000304 	addi	fp,sp,12
81127e5c:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81127e60:	d0a07303 	ldbu	r2,-32308(gp)
81127e64:	10803fcc 	andi	r2,r2,255
81127e68:	1000031e 	bne	r2,zero,81127e78 <usleep+0x34>
  {
    return alt_busy_sleep (us);
81127e6c:	e13fff17 	ldw	r4,-4(fp)
81127e70:	1126f740 	call	81126f74 <alt_busy_sleep>
81127e74:	00003d06 	br	81127f6c <usleep+0x128>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81127e78:	d0a06a17 	ldw	r2,-32344(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81127e7c:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81127e80:	e0ffff17 	ldw	r3,-4(fp)
81127e84:	0090c734 	movhi	r2,17180
81127e88:	10b7a0c4 	addi	r2,r2,-8573
81127e8c:	1888383a 	mulxuu	r4,r3,r2
81127e90:	1885383a 	mul	r2,r3,r2
81127e94:	1013883a 	mov	r9,r2
81127e98:	2015883a 	mov	r10,r4
81127e9c:	5006d4ba 	srli	r3,r10,18
81127ea0:	e0bffe17 	ldw	r2,-8(fp)
81127ea4:	1893383a 	mul	r9,r3,r2
81127ea8:	e0ffff17 	ldw	r3,-4(fp)
81127eac:	0090c734 	movhi	r2,17180
81127eb0:	10b7a0c4 	addi	r2,r2,-8573
81127eb4:	1888383a 	mulxuu	r4,r3,r2
81127eb8:	1885383a 	mul	r2,r3,r2
81127ebc:	100f883a 	mov	r7,r2
81127ec0:	2011883a 	mov	r8,r4
81127ec4:	4004d4ba 	srli	r2,r8,18
81127ec8:	010003f4 	movhi	r4,15
81127ecc:	21109004 	addi	r4,r4,16960
81127ed0:	1105383a 	mul	r2,r2,r4
81127ed4:	1885c83a 	sub	r2,r3,r2
81127ed8:	e0fffe17 	ldw	r3,-8(fp)
81127edc:	10c7383a 	mul	r3,r2,r3
81127ee0:	0090c734 	movhi	r2,17180
81127ee4:	10b7a0c4 	addi	r2,r2,-8573
81127ee8:	1888383a 	mulxuu	r4,r3,r2
81127eec:	1885383a 	mul	r2,r3,r2
81127ef0:	100b883a 	mov	r5,r2
81127ef4:	200d883a 	mov	r6,r4
81127ef8:	3004d4ba 	srli	r2,r6,18
81127efc:	4885883a 	add	r2,r9,r2
81127f00:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81127f04:	00000706 	br	81127f24 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
81127f08:	013fffd4 	movui	r4,65535
81127f0c:	1130b4c0 	call	81130b4c <OSTimeDly>
    ticks -= 0xffff;
81127f10:	e0fffd17 	ldw	r3,-12(fp)
81127f14:	00bffff4 	movhi	r2,65535
81127f18:	10800044 	addi	r2,r2,1
81127f1c:	1885883a 	add	r2,r3,r2
81127f20:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81127f24:	e0bffd17 	ldw	r2,-12(fp)
81127f28:	00ffffd4 	movui	r3,65535
81127f2c:	18bff636 	bltu	r3,r2,81127f08 <__reset+0xfb107f08>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81127f30:	e0bffd17 	ldw	r2,-12(fp)
81127f34:	10bfffcc 	andi	r2,r2,65535
81127f38:	1009883a 	mov	r4,r2
81127f3c:	1130b4c0 	call	81130b4c <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81127f40:	008003f4 	movhi	r2,15
81127f44:	10909004 	addi	r2,r2,16960
81127f48:	e0fffe17 	ldw	r3,-8(fp)
81127f4c:	10c7203a 	divu	r3,r2,r3
81127f50:	e0bfff17 	ldw	r2,-4(fp)
81127f54:	10c9203a 	divu	r4,r2,r3
81127f58:	20c7383a 	mul	r3,r4,r3
81127f5c:	10c5c83a 	sub	r2,r2,r3
81127f60:	1009883a 	mov	r4,r2
81127f64:	1126f740 	call	81126f74 <alt_busy_sleep>

  return 0;  
81127f68:	0005883a 	mov	r2,zero
}
81127f6c:	e037883a 	mov	sp,fp
81127f70:	dfc00117 	ldw	ra,4(sp)
81127f74:	df000017 	ldw	fp,0(sp)
81127f78:	dec00204 	addi	sp,sp,8
81127f7c:	f800283a 	ret

81127f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127f80:	defffe04 	addi	sp,sp,-8
81127f84:	de00012e 	bgeu	sp,et,81127f8c <alt_get_errno+0xc>
81127f88:	003b68fa 	trap	3
81127f8c:	dfc00115 	stw	ra,4(sp)
81127f90:	df000015 	stw	fp,0(sp)
81127f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127f98:	d0a01017 	ldw	r2,-32704(gp)
81127f9c:	10000326 	beq	r2,zero,81127fac <alt_get_errno+0x2c>
81127fa0:	d0a01017 	ldw	r2,-32704(gp)
81127fa4:	103ee83a 	callr	r2
81127fa8:	00000106 	br	81127fb0 <alt_get_errno+0x30>
81127fac:	d0a05e04 	addi	r2,gp,-32392
}
81127fb0:	e037883a 	mov	sp,fp
81127fb4:	dfc00117 	ldw	ra,4(sp)
81127fb8:	df000017 	ldw	fp,0(sp)
81127fbc:	dec00204 	addi	sp,sp,8
81127fc0:	f800283a 	ret

81127fc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81127fc4:	defff904 	addi	sp,sp,-28
81127fc8:	de00012e 	bgeu	sp,et,81127fd0 <write+0xc>
81127fcc:	003b68fa 	trap	3
81127fd0:	dfc00615 	stw	ra,24(sp)
81127fd4:	df000515 	stw	fp,20(sp)
81127fd8:	df000504 	addi	fp,sp,20
81127fdc:	e13ffd15 	stw	r4,-12(fp)
81127fe0:	e17ffe15 	stw	r5,-8(fp)
81127fe4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127fe8:	e0bffd17 	ldw	r2,-12(fp)
81127fec:	10000616 	blt	r2,zero,81128008 <write+0x44>
81127ff0:	e0bffd17 	ldw	r2,-12(fp)
81127ff4:	10c00324 	muli	r3,r2,12
81127ff8:	00a04534 	movhi	r2,33044
81127ffc:	10bd2404 	addi	r2,r2,-2928
81128000:	1885883a 	add	r2,r3,r2
81128004:	00000106 	br	8112800c <write+0x48>
81128008:	0005883a 	mov	r2,zero
8112800c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81128010:	e0bffb17 	ldw	r2,-20(fp)
81128014:	10002126 	beq	r2,zero,8112809c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81128018:	e0bffb17 	ldw	r2,-20(fp)
8112801c:	10800217 	ldw	r2,8(r2)
81128020:	108000cc 	andi	r2,r2,3
81128024:	10001826 	beq	r2,zero,81128088 <write+0xc4>
81128028:	e0bffb17 	ldw	r2,-20(fp)
8112802c:	10800017 	ldw	r2,0(r2)
81128030:	10800617 	ldw	r2,24(r2)
81128034:	10001426 	beq	r2,zero,81128088 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81128038:	e0bffb17 	ldw	r2,-20(fp)
8112803c:	10800017 	ldw	r2,0(r2)
81128040:	10800617 	ldw	r2,24(r2)
81128044:	e0ffff17 	ldw	r3,-4(fp)
81128048:	180d883a 	mov	r6,r3
8112804c:	e17ffe17 	ldw	r5,-8(fp)
81128050:	e13ffb17 	ldw	r4,-20(fp)
81128054:	103ee83a 	callr	r2
81128058:	e0bffc15 	stw	r2,-16(fp)
8112805c:	e0bffc17 	ldw	r2,-16(fp)
81128060:	1000070e 	bge	r2,zero,81128080 <write+0xbc>
      {
        ALT_ERRNO = -rval;
81128064:	1127f800 	call	81127f80 <alt_get_errno>
81128068:	1007883a 	mov	r3,r2
8112806c:	e0bffc17 	ldw	r2,-16(fp)
81128070:	0085c83a 	sub	r2,zero,r2
81128074:	18800015 	stw	r2,0(r3)
        return -1;
81128078:	00bfffc4 	movi	r2,-1
8112807c:	00000c06 	br	811280b0 <write+0xec>
      }
      return rval;
81128080:	e0bffc17 	ldw	r2,-16(fp)
81128084:	00000a06 	br	811280b0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
81128088:	1127f800 	call	81127f80 <alt_get_errno>
8112808c:	1007883a 	mov	r3,r2
81128090:	00800344 	movi	r2,13
81128094:	18800015 	stw	r2,0(r3)
81128098:	00000406 	br	811280ac <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8112809c:	1127f800 	call	81127f80 <alt_get_errno>
811280a0:	1007883a 	mov	r3,r2
811280a4:	00801444 	movi	r2,81
811280a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
811280ac:	00bfffc4 	movi	r2,-1
}
811280b0:	e037883a 	mov	sp,fp
811280b4:	dfc00117 	ldw	ra,4(sp)
811280b8:	df000017 	ldw	fp,0(sp)
811280bc:	dec00204 	addi	sp,sp,8
811280c0:	f800283a 	ret

811280c4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
811280c4:	deffde04 	addi	sp,sp,-136
811280c8:	de00012e 	bgeu	sp,et,811280d0 <__env_lock+0xc>
811280cc:	003b68fa 	trap	3
811280d0:	dfc02115 	stw	ra,132(sp)
811280d4:	df002015 	stw	fp,128(sp)
811280d8:	df002004 	addi	fp,sp,128
811280dc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811280e0:	e0bfe104 	addi	r2,fp,-124
811280e4:	100b883a 	mov	r5,r2
811280e8:	01003fc4 	movi	r4,255
811280ec:	11309a80 	call	811309a8 <OSTaskQuery>
811280f0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811280f4:	e0bffe83 	ldbu	r2,-6(fp)
811280f8:	10803fcc 	andi	r2,r2,255
811280fc:	10001e1e 	bne	r2,zero,81128178 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
81128100:	e0bfed83 	ldbu	r2,-74(fp)
81128104:	10803fcc 	andi	r2,r2,255
81128108:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
8112810c:	d0a06d17 	ldw	r2,-32332(gp)
81128110:	e0fffc04 	addi	r3,fp,-16
81128114:	180b883a 	mov	r5,r3
81128118:	1009883a 	mov	r4,r2
8112811c:	112f1600 	call	8112f160 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81128120:	e0bffe03 	ldbu	r2,-8(fp)
81128124:	10803fcc 	andi	r2,r2,255
81128128:	10000726 	beq	r2,zero,81128148 <__env_lock+0x84>
8112812c:	d0a01517 	ldw	r2,-32684(gp)
81128130:	e0ffe017 	ldw	r3,-128(fp)
81128134:	1880041e 	bne	r3,r2,81128148 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
81128138:	d0a06c17 	ldw	r2,-32336(gp)
8112813c:	10800044 	addi	r2,r2,1
81128140:	d0a06c15 	stw	r2,-32336(gp)
81128144:	00000a06 	br	81128170 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81128148:	d0a06d17 	ldw	r2,-32332(gp)
8112814c:	e0fffe84 	addi	r3,fp,-6
81128150:	180d883a 	mov	r6,r3
81128154:	000b883a 	mov	r5,zero
81128158:	1009883a 	mov	r4,r2
8112815c:	112ecc00 	call	8112ecc0 <OSSemPend>
    locks  = 1;
81128160:	00800044 	movi	r2,1
81128164:	d0a06c15 	stw	r2,-32336(gp)
    lockid = id;
81128168:	e0bfe017 	ldw	r2,-128(fp)
8112816c:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81128170:	0001883a 	nop
81128174:	00000106 	br	8112817c <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81128178:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112817c:	e037883a 	mov	sp,fp
81128180:	dfc00117 	ldw	ra,4(sp)
81128184:	df000017 	ldw	fp,0(sp)
81128188:	dec00204 	addi	sp,sp,8
8112818c:	f800283a 	ret

81128190 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81128190:	defffd04 	addi	sp,sp,-12
81128194:	de00012e 	bgeu	sp,et,8112819c <__env_unlock+0xc>
81128198:	003b68fa 	trap	3
8112819c:	dfc00215 	stw	ra,8(sp)
811281a0:	df000115 	stw	fp,4(sp)
811281a4:	df000104 	addi	fp,sp,4
811281a8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
811281ac:	d0a06c17 	ldw	r2,-32336(gp)
811281b0:	10000b26 	beq	r2,zero,811281e0 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
811281b4:	d0a06c17 	ldw	r2,-32336(gp)
811281b8:	10bfffc4 	addi	r2,r2,-1
811281bc:	d0a06c15 	stw	r2,-32336(gp)
811281c0:	d0a06c17 	ldw	r2,-32336(gp)
811281c4:	1000071e 	bne	r2,zero,811281e4 <__env_unlock+0x54>
  {
    lockid = -1;
811281c8:	00bfffc4 	movi	r2,-1
811281cc:	d0a01515 	stw	r2,-32684(gp)
    OSSemPost( alt_envsem );
811281d0:	d0a06d17 	ldw	r2,-32332(gp)
811281d4:	1009883a 	mov	r4,r2
811281d8:	112f0480 	call	8112f048 <OSSemPost>
811281dc:	00000106 	br	811281e4 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
811281e0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811281e4:	e037883a 	mov	sp,fp
811281e8:	dfc00117 	ldw	ra,4(sp)
811281ec:	df000017 	ldw	fp,0(sp)
811281f0:	dec00204 	addi	sp,sp,8
811281f4:	f800283a 	ret

811281f8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811281f8:	deffda04 	addi	sp,sp,-152
811281fc:	de00012e 	bgeu	sp,et,81128204 <__malloc_lock+0xc>
81128200:	003b68fa 	trap	3
81128204:	dfc02515 	stw	ra,148(sp)
81128208:	df002415 	stw	fp,144(sp)
8112820c:	df002404 	addi	fp,sp,144
81128210:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128214:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
81128218:	d0a07303 	ldbu	r2,-32308(gp)
8112821c:	10803fcc 	andi	r2,r2,255
81128220:	10800060 	cmpeqi	r2,r2,1
81128224:	10003626 	beq	r2,zero,81128300 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81128228:	e0bfe104 	addi	r2,fp,-124
8112822c:	100b883a 	mov	r5,r2
81128230:	01003fc4 	movi	r4,255
81128234:	11309a80 	call	811309a8 <OSTaskQuery>
81128238:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112823c:	e0bffe83 	ldbu	r2,-6(fp)
81128240:	10803fcc 	andi	r2,r2,255
81128244:	1000301e 	bne	r2,zero,81128308 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
81128248:	e0bfed83 	ldbu	r2,-74(fp)
8112824c:	10803fcc 	andi	r2,r2,255
81128250:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81128254:	d0a06f17 	ldw	r2,-32324(gp)
81128258:	e0fffc04 	addi	r3,fp,-16
8112825c:	180b883a 	mov	r5,r3
81128260:	1009883a 	mov	r4,r2
81128264:	112f1600 	call	8112f160 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128268:	0005303a 	rdctl	r2,status
8112826c:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128270:	e0ffe017 	ldw	r3,-128(fp)
81128274:	00bfff84 	movi	r2,-2
81128278:	1884703a 	and	r2,r3,r2
8112827c:	1001703a 	wrctl	status,r2
  
  return context;
81128280:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81128284:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81128288:	e0bffc0b 	ldhu	r2,-16(fp)
8112828c:	10bfffcc 	andi	r2,r2,65535
81128290:	10000b1e 	bne	r2,zero,811282c0 <__malloc_lock+0xc8>
81128294:	d0a01617 	ldw	r2,-32680(gp)
81128298:	e0ffdd17 	ldw	r3,-140(fp)
8112829c:	1880081e 	bne	r3,r2,811282c0 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
811282a0:	d0a06e17 	ldw	r2,-32328(gp)
811282a4:	10800044 	addi	r2,r2,1
811282a8:	d0a06e15 	stw	r2,-32328(gp)
811282ac:	e0bfdc17 	ldw	r2,-144(fp)
811282b0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811282b4:	e0bfde17 	ldw	r2,-136(fp)
811282b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
811282bc:	00000e06 	br	811282f8 <__malloc_lock+0x100>
811282c0:	e0bfdc17 	ldw	r2,-144(fp)
811282c4:	e0bfdf15 	stw	r2,-132(fp)
811282c8:	e0bfdf17 	ldw	r2,-132(fp)
811282cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
811282d0:	d0a06f17 	ldw	r2,-32324(gp)
811282d4:	e0fffe84 	addi	r3,fp,-6
811282d8:	180d883a 	mov	r6,r3
811282dc:	000b883a 	mov	r5,zero
811282e0:	1009883a 	mov	r4,r2
811282e4:	112ecc00 	call	8112ecc0 <OSSemPend>
    locks  = 1;
811282e8:	00800044 	movi	r2,1
811282ec:	d0a06e15 	stw	r2,-32328(gp)
    lockid = id;
811282f0:	e0bfdd17 	ldw	r2,-140(fp)
811282f4:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811282f8:	0001883a 	nop
811282fc:	00000306 	br	8112830c <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
81128300:	0001883a 	nop
81128304:	00000106 	br	8112830c <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81128308:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112830c:	e037883a 	mov	sp,fp
81128310:	dfc00117 	ldw	ra,4(sp)
81128314:	df000017 	ldw	fp,0(sp)
81128318:	dec00204 	addi	sp,sp,8
8112831c:	f800283a 	ret

81128320 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81128320:	defff804 	addi	sp,sp,-32
81128324:	de00012e 	bgeu	sp,et,8112832c <__malloc_unlock+0xc>
81128328:	003b68fa 	trap	3
8112832c:	dfc00715 	stw	ra,28(sp)
81128330:	df000615 	stw	fp,24(sp)
81128334:	df000604 	addi	fp,sp,24
81128338:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112833c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81128340:	d0a07303 	ldbu	r2,-32308(gp)
81128344:	10803fcc 	andi	r2,r2,255
81128348:	10800060 	cmpeqi	r2,r2,1
8112834c:	10002326 	beq	r2,zero,811283dc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128350:	0005303a 	rdctl	r2,status
81128354:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128358:	e0fffe17 	ldw	r3,-8(fp)
8112835c:	00bfff84 	movi	r2,-2
81128360:	1884703a 	and	r2,r3,r2
81128364:	1001703a 	wrctl	status,r2
  
  return context;
81128368:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
8112836c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81128370:	d0a06e17 	ldw	r2,-32328(gp)
81128374:	1000051e 	bne	r2,zero,8112838c <__malloc_unlock+0x6c>
81128378:	e0bffa17 	ldw	r2,-24(fp)
8112837c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128380:	e0bffb17 	ldw	r2,-20(fp)
81128384:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81128388:	00001506 	br	811283e0 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
8112838c:	d0a06e17 	ldw	r2,-32328(gp)
81128390:	10bfffc4 	addi	r2,r2,-1
81128394:	d0a06e15 	stw	r2,-32328(gp)
81128398:	d0a06e17 	ldw	r2,-32328(gp)
8112839c:	10000a1e 	bne	r2,zero,811283c8 <__malloc_unlock+0xa8>
  {
    lockid = -1;
811283a0:	00bfffc4 	movi	r2,-1
811283a4:	d0a01615 	stw	r2,-32680(gp)
811283a8:	e0bffa17 	ldw	r2,-24(fp)
811283ac:	e0bffc15 	stw	r2,-16(fp)
811283b0:	e0bffc17 	ldw	r2,-16(fp)
811283b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
811283b8:	d0a06f17 	ldw	r2,-32324(gp)
811283bc:	1009883a 	mov	r4,r2
811283c0:	112f0480 	call	8112f048 <OSSemPost>
811283c4:	00000606 	br	811283e0 <__malloc_unlock+0xc0>
811283c8:	e0bffa17 	ldw	r2,-24(fp)
811283cc:	e0bffd15 	stw	r2,-12(fp)
811283d0:	e0bffd17 	ldw	r2,-12(fp)
811283d4:	1001703a 	wrctl	status,r2
811283d8:	00000106 	br	811283e0 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
811283dc:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811283e0:	e037883a 	mov	sp,fp
811283e4:	dfc00117 	ldw	ra,4(sp)
811283e8:	df000017 	ldw	fp,0(sp)
811283ec:	dec00204 	addi	sp,sp,8
811283f0:	f800283a 	ret

811283f4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811283f4:	defff704 	addi	sp,sp,-36
811283f8:	de00012e 	bgeu	sp,et,81128400 <OSEventNameGet+0xc>
811283fc:	003b68fa 	trap	3
81128400:	dfc00815 	stw	ra,32(sp)
81128404:	df000715 	stw	fp,28(sp)
81128408:	df000704 	addi	fp,sp,28
8112840c:	e13ffd15 	stw	r4,-12(fp)
81128410:	e17ffe15 	stw	r5,-8(fp)
81128414:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128418:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112841c:	e0bfff17 	ldw	r2,-4(fp)
81128420:	1000021e 	bne	r2,zero,8112842c <OSEventNameGet+0x38>
        return (0);
81128424:	0005883a 	mov	r2,zero
81128428:	00003706 	br	81128508 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112842c:	e0bffd17 	ldw	r2,-12(fp)
81128430:	1000051e 	bne	r2,zero,81128448 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
81128434:	e0bfff17 	ldw	r2,-4(fp)
81128438:	00c00104 	movi	r3,4
8112843c:	10c00005 	stb	r3,0(r2)
        return (0);
81128440:	0005883a 	mov	r2,zero
81128444:	00003006 	br	81128508 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128448:	e0bffe17 	ldw	r2,-8(fp)
8112844c:	1000051e 	bne	r2,zero,81128464 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81128450:	e0bfff17 	ldw	r2,-4(fp)
81128454:	00c00304 	movi	r3,12
81128458:	10c00005 	stb	r3,0(r2)
        return (0);
8112845c:	0005883a 	mov	r2,zero
81128460:	00002906 	br	81128508 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128464:	d0a08303 	ldbu	r2,-32244(gp)
81128468:	10803fcc 	andi	r2,r2,255
8112846c:	10000526 	beq	r2,zero,81128484 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81128470:	e0bfff17 	ldw	r2,-4(fp)
81128474:	00c00444 	movi	r3,17
81128478:	10c00005 	stb	r3,0(r2)
        return (0);
8112847c:	0005883a 	mov	r2,zero
81128480:	00002106 	br	81128508 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
81128484:	e0bffd17 	ldw	r2,-12(fp)
81128488:	10800003 	ldbu	r2,0(r2)
8112848c:	10803fcc 	andi	r2,r2,255
81128490:	10bfffc4 	addi	r2,r2,-1
81128494:	10800128 	cmpgeui	r2,r2,4
81128498:	10000526 	beq	r2,zero,811284b0 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112849c:	e0bfff17 	ldw	r2,-4(fp)
811284a0:	00c00044 	movi	r3,1
811284a4:	10c00005 	stb	r3,0(r2)
             return (0);
811284a8:	0005883a 	mov	r2,zero
811284ac:	00001606 	br	81128508 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
811284b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811284b4:	0005303a 	rdctl	r2,status
811284b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811284bc:	e0fffb17 	ldw	r3,-20(fp)
811284c0:	00bfff84 	movi	r2,-2
811284c4:	1884703a 	and	r2,r3,r2
811284c8:	1001703a 	wrctl	status,r2
  
  return context;
811284cc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
811284d0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
811284d4:	e0bffd17 	ldw	r2,-12(fp)
811284d8:	10800444 	addi	r2,r2,17
811284dc:	100b883a 	mov	r5,r2
811284e0:	e13ffe17 	ldw	r4,-8(fp)
811284e4:	1129f640 	call	81129f64 <OS_StrCopy>
811284e8:	e0bffa05 	stb	r2,-24(fp)
811284ec:	e0bff917 	ldw	r2,-28(fp)
811284f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811284f4:	e0bffc17 	ldw	r2,-16(fp)
811284f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811284fc:	e0bfff17 	ldw	r2,-4(fp)
81128500:	10000005 	stb	zero,0(r2)
    return (len);
81128504:	e0bffa03 	ldbu	r2,-24(fp)
}
81128508:	e037883a 	mov	sp,fp
8112850c:	dfc00117 	ldw	ra,4(sp)
81128510:	df000017 	ldw	fp,0(sp)
81128514:	dec00204 	addi	sp,sp,8
81128518:	f800283a 	ret

8112851c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112851c:	defff604 	addi	sp,sp,-40
81128520:	de00012e 	bgeu	sp,et,81128528 <OSEventNameSet+0xc>
81128524:	003b68fa 	trap	3
81128528:	dfc00915 	stw	ra,36(sp)
8112852c:	df000815 	stw	fp,32(sp)
81128530:	df000804 	addi	fp,sp,32
81128534:	e13ffd15 	stw	r4,-12(fp)
81128538:	e17ffe15 	stw	r5,-8(fp)
8112853c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128540:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81128544:	e0bfff17 	ldw	r2,-4(fp)
81128548:	10004026 	beq	r2,zero,8112864c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112854c:	e0bffd17 	ldw	r2,-12(fp)
81128550:	1000041e 	bne	r2,zero,81128564 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81128554:	e0bfff17 	ldw	r2,-4(fp)
81128558:	00c00104 	movi	r3,4
8112855c:	10c00005 	stb	r3,0(r2)
        return;
81128560:	00003b06 	br	81128650 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128564:	e0bffe17 	ldw	r2,-8(fp)
81128568:	1000041e 	bne	r2,zero,8112857c <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112856c:	e0bfff17 	ldw	r2,-4(fp)
81128570:	00c00304 	movi	r3,12
81128574:	10c00005 	stb	r3,0(r2)
        return;
81128578:	00003506 	br	81128650 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112857c:	d0a08303 	ldbu	r2,-32244(gp)
81128580:	10803fcc 	andi	r2,r2,255
81128584:	10000426 	beq	r2,zero,81128598 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81128588:	e0bfff17 	ldw	r2,-4(fp)
8112858c:	00c00484 	movi	r3,18
81128590:	10c00005 	stb	r3,0(r2)
        return;
81128594:	00002e06 	br	81128650 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
81128598:	e0bffd17 	ldw	r2,-12(fp)
8112859c:	10800003 	ldbu	r2,0(r2)
811285a0:	10803fcc 	andi	r2,r2,255
811285a4:	10bfffc4 	addi	r2,r2,-1
811285a8:	10800128 	cmpgeui	r2,r2,4
811285ac:	10000426 	beq	r2,zero,811285c0 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
811285b0:	e0bfff17 	ldw	r2,-4(fp)
811285b4:	00c00044 	movi	r3,1
811285b8:	10c00005 	stb	r3,0(r2)
             return;
811285bc:	00002406 	br	81128650 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
811285c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811285c4:	0005303a 	rdctl	r2,status
811285c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811285cc:	e0fffc17 	ldw	r3,-16(fp)
811285d0:	00bfff84 	movi	r2,-2
811285d4:	1884703a 	and	r2,r3,r2
811285d8:	1001703a 	wrctl	status,r2
  
  return context;
811285dc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
811285e0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
811285e4:	e13ffe17 	ldw	r4,-8(fp)
811285e8:	1129fe00 	call	81129fe0 <OS_StrLen>
811285ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
811285f0:	e0bffa03 	ldbu	r2,-24(fp)
811285f4:	10800830 	cmpltui	r2,r2,32
811285f8:	1000081e 	bne	r2,zero,8112861c <OSEventNameSet+0x100>
811285fc:	e0bff817 	ldw	r2,-32(fp)
81128600:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128604:	e0bff917 	ldw	r2,-28(fp)
81128608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
8112860c:	e0bfff17 	ldw	r2,-4(fp)
81128610:	00c002c4 	movi	r3,11
81128614:	10c00005 	stb	r3,0(r2)
        return;
81128618:	00000d06 	br	81128650 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
8112861c:	e0bffd17 	ldw	r2,-12(fp)
81128620:	10800444 	addi	r2,r2,17
81128624:	e17ffe17 	ldw	r5,-8(fp)
81128628:	1009883a 	mov	r4,r2
8112862c:	1129f640 	call	81129f64 <OS_StrCopy>
81128630:	e0bff817 	ldw	r2,-32(fp)
81128634:	e0bffb15 	stw	r2,-20(fp)
81128638:	e0bffb17 	ldw	r2,-20(fp)
8112863c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128640:	e0bfff17 	ldw	r2,-4(fp)
81128644:	10000005 	stb	zero,0(r2)
81128648:	00000106 	br	81128650 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112864c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81128650:	e037883a 	mov	sp,fp
81128654:	dfc00117 	ldw	ra,4(sp)
81128658:	df000017 	ldw	fp,0(sp)
8112865c:	dec00204 	addi	sp,sp,8
81128660:	f800283a 	ret

81128664 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81128664:	deffed04 	addi	sp,sp,-76
81128668:	de00012e 	bgeu	sp,et,81128670 <OSEventPendMulti+0xc>
8112866c:	003b68fa 	trap	3
81128670:	dfc01215 	stw	ra,72(sp)
81128674:	df001115 	stw	fp,68(sp)
81128678:	df001104 	addi	fp,sp,68
8112867c:	e13ffc15 	stw	r4,-16(fp)
81128680:	e17ffd15 	stw	r5,-12(fp)
81128684:	e1bffe15 	stw	r6,-8(fp)
81128688:	3805883a 	mov	r2,r7
8112868c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81128690:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81128694:	e0800217 	ldw	r2,8(fp)
81128698:	1000021e 	bne	r2,zero,811286a4 <OSEventPendMulti+0x40>
        return (0);
8112869c:	0005883a 	mov	r2,zero
811286a0:	00017106 	br	81128c68 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
811286a4:	e0bffc17 	ldw	r2,-16(fp)
811286a8:	1000051e 	bne	r2,zero,811286c0 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
811286ac:	e0800217 	ldw	r2,8(fp)
811286b0:	00c00104 	movi	r3,4
811286b4:	10c00005 	stb	r3,0(r2)
        return (0);
811286b8:	0005883a 	mov	r2,zero
811286bc:	00016a06 	br	81128c68 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
811286c0:	e0bffd17 	ldw	r2,-12(fp)
811286c4:	1000051e 	bne	r2,zero,811286dc <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
811286c8:	e0800217 	ldw	r2,8(fp)
811286cc:	00c00104 	movi	r3,4
811286d0:	10c00005 	stb	r3,0(r2)
        return (0);
811286d4:	0005883a 	mov	r2,zero
811286d8:	00016306 	br	81128c68 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
811286dc:	e0bffe17 	ldw	r2,-8(fp)
811286e0:	1000051e 	bne	r2,zero,811286f8 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
811286e4:	e0800217 	ldw	r2,8(fp)
811286e8:	00c00104 	movi	r3,4
811286ec:	10c00005 	stb	r3,0(r2)
        return (0);
811286f0:	0005883a 	mov	r2,zero
811286f4:	00015c06 	br	81128c68 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
811286f8:	e0bffd17 	ldw	r2,-12(fp)
811286fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81128700:	e0bffc17 	ldw	r2,-16(fp)
81128704:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81128708:	e0bfef17 	ldw	r2,-68(fp)
8112870c:	10800017 	ldw	r2,0(r2)
81128710:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81128714:	00001906 	br	8112877c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81128718:	e0bff017 	ldw	r2,-64(fp)
8112871c:	10800003 	ldbu	r2,0(r2)
81128720:	10803fcc 	andi	r2,r2,255
81128724:	10c000a0 	cmpeqi	r3,r2,2
81128728:	1800091e 	bne	r3,zero,81128750 <OSEventPendMulti+0xec>
8112872c:	10c000e0 	cmpeqi	r3,r2,3
81128730:	1800091e 	bne	r3,zero,81128758 <OSEventPendMulti+0xf4>
81128734:	10800060 	cmpeqi	r2,r2,1
81128738:	1000091e 	bne	r2,zero,81128760 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
8112873c:	e0800217 	ldw	r2,8(fp)
81128740:	00c00044 	movi	r3,1
81128744:	10c00005 	stb	r3,0(r2)
                 return (0);
81128748:	0005883a 	mov	r2,zero
8112874c:	00014606 	br	81128c68 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81128750:	0001883a 	nop
81128754:	00000306 	br	81128764 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81128758:	0001883a 	nop
8112875c:	00000106 	br	81128764 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81128760:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81128764:	e0bfef17 	ldw	r2,-68(fp)
81128768:	10800104 	addi	r2,r2,4
8112876c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81128770:	e0bfef17 	ldw	r2,-68(fp)
81128774:	10800017 	ldw	r2,0(r2)
81128778:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
8112877c:	e0bff017 	ldw	r2,-64(fp)
81128780:	103fe51e 	bne	r2,zero,81128718 <__reset+0xfb108718>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81128784:	d0a08303 	ldbu	r2,-32244(gp)
81128788:	10803fcc 	andi	r2,r2,255
8112878c:	10000526 	beq	r2,zero,811287a4 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81128790:	e0800217 	ldw	r2,8(fp)
81128794:	00c00084 	movi	r3,2
81128798:	10c00005 	stb	r3,0(r2)
        return (0);
8112879c:	0005883a 	mov	r2,zero
811287a0:	00013106 	br	81128c68 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
811287a4:	d0a07103 	ldbu	r2,-32316(gp)
811287a8:	10803fcc 	andi	r2,r2,255
811287ac:	10000526 	beq	r2,zero,811287c4 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
811287b0:	e0800217 	ldw	r2,8(fp)
811287b4:	00c00344 	movi	r3,13
811287b8:	10c00005 	stb	r3,0(r2)
        return (0);
811287bc:	0005883a 	mov	r2,zero
811287c0:	00012906 	br	81128c68 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811287c4:	0005303a 	rdctl	r2,status
811287c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811287cc:	e0fffb17 	ldw	r3,-20(fp)
811287d0:	00bfff84 	movi	r2,-2
811287d4:	1884703a 	and	r2,r3,r2
811287d8:	1001703a 	wrctl	status,r2
  
  return context;
811287dc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
811287e0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
811287e4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
811287e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
811287ec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
811287f0:	e0bffc17 	ldw	r2,-16(fp)
811287f4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
811287f8:	e0bfef17 	ldw	r2,-68(fp)
811287fc:	10800017 	ldw	r2,0(r2)
81128800:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81128804:	00008106 	br	81128a0c <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
81128808:	e0bff017 	ldw	r2,-64(fp)
8112880c:	10800003 	ldbu	r2,0(r2)
81128810:	10803fcc 	andi	r2,r2,255
81128814:	10c000a0 	cmpeqi	r3,r2,2
81128818:	18003c1e 	bne	r3,zero,8112890c <OSEventPendMulti+0x2a8>
8112881c:	10c000e0 	cmpeqi	r3,r2,3
81128820:	1800031e 	bne	r3,zero,81128830 <OSEventPendMulti+0x1cc>
81128824:	10800060 	cmpeqi	r2,r2,1
81128828:	10001e1e 	bne	r2,zero,811288a4 <OSEventPendMulti+0x240>
8112882c:	00006606 	br	811289c8 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81128830:	e0bff017 	ldw	r2,-64(fp)
81128834:	1080020b 	ldhu	r2,8(r2)
81128838:	10bfffcc 	andi	r2,r2,65535
8112883c:	10001526 	beq	r2,zero,81128894 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81128840:	e0bff017 	ldw	r2,-64(fp)
81128844:	1080020b 	ldhu	r2,8(r2)
81128848:	10bfffc4 	addi	r2,r2,-1
8112884c:	1007883a 	mov	r3,r2
81128850:	e0bff017 	ldw	r2,-64(fp)
81128854:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81128858:	e0bffd17 	ldw	r2,-12(fp)
8112885c:	10c00104 	addi	r3,r2,4
81128860:	e0fffd15 	stw	r3,-12(fp)
81128864:	e0fff017 	ldw	r3,-64(fp)
81128868:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
8112886c:	00800044 	movi	r2,1
81128870:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81128874:	e0bffe17 	ldw	r2,-8(fp)
81128878:	10c00104 	addi	r3,r2,4
8112887c:	e0fffe15 	stw	r3,-8(fp)
81128880:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81128884:	e0bff18b 	ldhu	r2,-58(fp)
81128888:	10800044 	addi	r2,r2,1
8112888c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81128890:	00005806 	br	811289f4 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81128894:	e0bff203 	ldbu	r2,-56(fp)
81128898:	10800054 	ori	r2,r2,1
8112889c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
811288a0:	00005406 	br	811289f4 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
811288a4:	e0bff017 	ldw	r2,-64(fp)
811288a8:	10800117 	ldw	r2,4(r2)
811288ac:	10001326 	beq	r2,zero,811288fc <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
811288b0:	e0bffe17 	ldw	r2,-8(fp)
811288b4:	10c00104 	addi	r3,r2,4
811288b8:	e0fffe15 	stw	r3,-8(fp)
811288bc:	e0fff017 	ldw	r3,-64(fp)
811288c0:	18c00117 	ldw	r3,4(r3)
811288c4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
811288c8:	e0bff017 	ldw	r2,-64(fp)
811288cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
811288d0:	e0bffd17 	ldw	r2,-12(fp)
811288d4:	10c00104 	addi	r3,r2,4
811288d8:	e0fffd15 	stw	r3,-12(fp)
811288dc:	e0fff017 	ldw	r3,-64(fp)
811288e0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
811288e4:	00800044 	movi	r2,1
811288e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
811288ec:	e0bff18b 	ldhu	r2,-58(fp)
811288f0:	10800044 	addi	r2,r2,1
811288f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
811288f8:	00003e06 	br	811289f4 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
811288fc:	e0bff203 	ldbu	r2,-56(fp)
81128900:	10800094 	ori	r2,r2,2
81128904:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81128908:	00003a06 	br	811289f4 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
8112890c:	e0bff017 	ldw	r2,-64(fp)
81128910:	10800117 	ldw	r2,4(r2)
81128914:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81128918:	e0bff517 	ldw	r2,-44(fp)
8112891c:	1080058b 	ldhu	r2,22(r2)
81128920:	10bfffcc 	andi	r2,r2,65535
81128924:	10002426 	beq	r2,zero,811289b8 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81128928:	e0bffe17 	ldw	r2,-8(fp)
8112892c:	10c00104 	addi	r3,r2,4
81128930:	e0fffe15 	stw	r3,-8(fp)
81128934:	e0fff517 	ldw	r3,-44(fp)
81128938:	18c00417 	ldw	r3,16(r3)
8112893c:	19400104 	addi	r5,r3,4
81128940:	e13ff517 	ldw	r4,-44(fp)
81128944:	21400415 	stw	r5,16(r4)
81128948:	18c00017 	ldw	r3,0(r3)
8112894c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81128950:	e0bff517 	ldw	r2,-44(fp)
81128954:	10c00417 	ldw	r3,16(r2)
81128958:	e0bff517 	ldw	r2,-44(fp)
8112895c:	10800217 	ldw	r2,8(r2)
81128960:	1880041e 	bne	r3,r2,81128974 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81128964:	e0bff517 	ldw	r2,-44(fp)
81128968:	10c00117 	ldw	r3,4(r2)
8112896c:	e0bff517 	ldw	r2,-44(fp)
81128970:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81128974:	e0bff517 	ldw	r2,-44(fp)
81128978:	1080058b 	ldhu	r2,22(r2)
8112897c:	10bfffc4 	addi	r2,r2,-1
81128980:	1007883a 	mov	r3,r2
81128984:	e0bff517 	ldw	r2,-44(fp)
81128988:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
8112898c:	e0bffd17 	ldw	r2,-12(fp)
81128990:	10c00104 	addi	r3,r2,4
81128994:	e0fffd15 	stw	r3,-12(fp)
81128998:	e0fff017 	ldw	r3,-64(fp)
8112899c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
811289a0:	00800044 	movi	r2,1
811289a4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
811289a8:	e0bff18b 	ldhu	r2,-58(fp)
811289ac:	10800044 	addi	r2,r2,1
811289b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
811289b4:	00000f06 	br	811289f4 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
811289b8:	e0bff203 	ldbu	r2,-56(fp)
811289bc:	10800114 	ori	r2,r2,4
811289c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
811289c4:	00000b06 	br	811289f4 <OSEventPendMulti+0x390>
811289c8:	e0bff317 	ldw	r2,-52(fp)
811289cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811289d0:	e0bff417 	ldw	r2,-48(fp)
811289d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
811289d8:	e0bffd17 	ldw	r2,-12(fp)
811289dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
811289e0:	e0800217 	ldw	r2,8(fp)
811289e4:	00c00044 	movi	r3,1
811289e8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
811289ec:	e0bff18b 	ldhu	r2,-58(fp)
811289f0:	00009d06 	br	81128c68 <OSEventPendMulti+0x604>
        }
        pevents++;
811289f4:	e0bfef17 	ldw	r2,-68(fp)
811289f8:	10800104 	addi	r2,r2,4
811289fc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81128a00:	e0bfef17 	ldw	r2,-68(fp)
81128a04:	10800017 	ldw	r2,0(r2)
81128a08:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81128a0c:	e0bff017 	ldw	r2,-64(fp)
81128a10:	103f7d1e 	bne	r2,zero,81128808 <__reset+0xfb108808>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81128a14:	e0bff103 	ldbu	r2,-60(fp)
81128a18:	10800058 	cmpnei	r2,r2,1
81128a1c:	10000a1e 	bne	r2,zero,81128a48 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81128a20:	e0bffd17 	ldw	r2,-12(fp)
81128a24:	10000015 	stw	zero,0(r2)
81128a28:	e0bff317 	ldw	r2,-52(fp)
81128a2c:	e0bff615 	stw	r2,-40(fp)
81128a30:	e0bff617 	ldw	r2,-40(fp)
81128a34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81128a38:	e0800217 	ldw	r2,8(fp)
81128a3c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81128a40:	e0bff18b 	ldhu	r2,-58(fp)
81128a44:	00008806 	br	81128c68 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81128a48:	d0a08417 	ldw	r2,-32240(gp)
81128a4c:	d0e08417 	ldw	r3,-32240(gp)
81128a50:	19000c03 	ldbu	r4,48(r3)
81128a54:	e0fff203 	ldbu	r3,-56(fp)
81128a58:	20c6b03a 	or	r3,r4,r3
81128a5c:	1809883a 	mov	r4,r3
81128a60:	00ffe004 	movi	r3,-128
81128a64:	20c6b03a 	or	r3,r4,r3
81128a68:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81128a6c:	d0a08417 	ldw	r2,-32240(gp)
81128a70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81128a74:	d0a08417 	ldw	r2,-32240(gp)
81128a78:	e0ffff0b 	ldhu	r3,-4(fp)
81128a7c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81128a80:	e13ffc17 	ldw	r4,-16(fp)
81128a84:	112960c0 	call	8112960c <OS_EventTaskWaitMulti>
81128a88:	e0bff317 	ldw	r2,-52(fp)
81128a8c:	e0bff915 	stw	r2,-28(fp)
81128a90:	e0bff917 	ldw	r2,-28(fp)
81128a94:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81128a98:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128a9c:	0005303a 	rdctl	r2,status
81128aa0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128aa4:	e0fff717 	ldw	r3,-36(fp)
81128aa8:	00bfff84 	movi	r2,-2
81128aac:	1884703a 	and	r2,r3,r2
81128ab0:	1001703a 	wrctl	status,r2
  
  return context;
81128ab4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81128ab8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81128abc:	d0a08417 	ldw	r2,-32240(gp)
81128ac0:	10800c43 	ldbu	r2,49(r2)
81128ac4:	10803fcc 	andi	r2,r2,255
81128ac8:	10000226 	beq	r2,zero,81128ad4 <OSEventPendMulti+0x470>
81128acc:	108000a0 	cmpeqi	r2,r2,2
81128ad0:	10001826 	beq	r2,zero,81128b34 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81128ad4:	d0a08417 	ldw	r2,-32240(gp)
81128ad8:	10800717 	ldw	r2,28(r2)
81128adc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81128ae0:	e0bff017 	ldw	r2,-64(fp)
81128ae4:	10000b26 	beq	r2,zero,81128b14 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81128ae8:	e0bffd17 	ldw	r2,-12(fp)
81128aec:	10c00104 	addi	r3,r2,4
81128af0:	e0fffd15 	stw	r3,-12(fp)
81128af4:	e0fff017 	ldw	r3,-64(fp)
81128af8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81128afc:	e0bffd17 	ldw	r2,-12(fp)
81128b00:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81128b04:	e0bff18b 	ldhu	r2,-58(fp)
81128b08:	10800044 	addi	r2,r2,1
81128b0c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81128b10:	00000d06 	br	81128b48 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81128b14:	d0a08417 	ldw	r2,-32240(gp)
81128b18:	00c00044 	movi	r3,1
81128b1c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81128b20:	d0a08417 	ldw	r2,-32240(gp)
81128b24:	e17ffc17 	ldw	r5,-16(fp)
81128b28:	1009883a 	mov	r4,r2
81128b2c:	11298240 	call	81129824 <OS_EventTaskRemoveMulti>
             }
			 break;
81128b30:	00000506 	br	81128b48 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81128b34:	d0a08417 	ldw	r2,-32240(gp)
81128b38:	e17ffc17 	ldw	r5,-16(fp)
81128b3c:	1009883a 	mov	r4,r2
81128b40:	11298240 	call	81129824 <OS_EventTaskRemoveMulti>
             break;
81128b44:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81128b48:	d0a08417 	ldw	r2,-32240(gp)
81128b4c:	10800c43 	ldbu	r2,49(r2)
81128b50:	10803fcc 	andi	r2,r2,255
81128b54:	10000326 	beq	r2,zero,81128b64 <OSEventPendMulti+0x500>
81128b58:	108000a0 	cmpeqi	r2,r2,2
81128b5c:	1000231e 	bne	r2,zero,81128bec <OSEventPendMulti+0x588>
81128b60:	00002a06 	br	81128c0c <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81128b64:	e0bff017 	ldw	r2,-64(fp)
81128b68:	10800003 	ldbu	r2,0(r2)
81128b6c:	10803fcc 	andi	r2,r2,255
81128b70:	0080100e 	bge	zero,r2,81128bb4 <OSEventPendMulti+0x550>
81128b74:	10c000d0 	cmplti	r3,r2,3
81128b78:	1800071e 	bne	r3,zero,81128b98 <OSEventPendMulti+0x534>
81128b7c:	108000e0 	cmpeqi	r2,r2,3
81128b80:	10000c26 	beq	r2,zero,81128bb4 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81128b84:	e0bffe17 	ldw	r2,-8(fp)
81128b88:	10c00104 	addi	r3,r2,4
81128b8c:	e0fffe15 	stw	r3,-8(fp)
81128b90:	10000015 	stw	zero,0(r2)
                      break;
81128b94:	00001206 	br	81128be0 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81128b98:	e0bffe17 	ldw	r2,-8(fp)
81128b9c:	10c00104 	addi	r3,r2,4
81128ba0:	e0fffe15 	stw	r3,-8(fp)
81128ba4:	d0e08417 	ldw	r3,-32240(gp)
81128ba8:	18c00917 	ldw	r3,36(r3)
81128bac:	10c00015 	stw	r3,0(r2)
                      break;
81128bb0:	00000b06 	br	81128be0 <OSEventPendMulti+0x57c>
81128bb4:	e0bff317 	ldw	r2,-52(fp)
81128bb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128bbc:	e0bff817 	ldw	r2,-32(fp)
81128bc0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81128bc4:	e0bffd17 	ldw	r2,-12(fp)
81128bc8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81128bcc:	e0800217 	ldw	r2,8(fp)
81128bd0:	00c00044 	movi	r3,1
81128bd4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81128bd8:	e0bff18b 	ldhu	r2,-58(fp)
81128bdc:	00002206 	br	81128c68 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
81128be0:	e0800217 	ldw	r2,8(fp)
81128be4:	10000005 	stb	zero,0(r2)
             break;
81128be8:	00001006 	br	81128c2c <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81128bec:	e0bffe17 	ldw	r2,-8(fp)
81128bf0:	10c00104 	addi	r3,r2,4
81128bf4:	e0fffe15 	stw	r3,-8(fp)
81128bf8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
81128bfc:	e0800217 	ldw	r2,8(fp)
81128c00:	00c00384 	movi	r3,14
81128c04:	10c00005 	stb	r3,0(r2)
             break;
81128c08:	00000806 	br	81128c2c <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
81128c0c:	e0bffe17 	ldw	r2,-8(fp)
81128c10:	10c00104 	addi	r3,r2,4
81128c14:	e0fffe15 	stw	r3,-8(fp)
81128c18:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
81128c1c:	e0800217 	ldw	r2,8(fp)
81128c20:	00c00284 	movi	r3,10
81128c24:	10c00005 	stb	r3,0(r2)
             break;
81128c28:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
81128c2c:	d0a08417 	ldw	r2,-32240(gp)
81128c30:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81128c34:	d0a08417 	ldw	r2,-32240(gp)
81128c38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
81128c3c:	d0a08417 	ldw	r2,-32240(gp)
81128c40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81128c44:	d0a08417 	ldw	r2,-32240(gp)
81128c48:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
81128c4c:	d0a08417 	ldw	r2,-32240(gp)
81128c50:	10000915 	stw	zero,36(r2)
81128c54:	e0bff317 	ldw	r2,-52(fp)
81128c58:	e0bffa15 	stw	r2,-24(fp)
81128c5c:	e0bffa17 	ldw	r2,-24(fp)
81128c60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81128c64:	e0bff18b 	ldhu	r2,-58(fp)
}
81128c68:	e037883a 	mov	sp,fp
81128c6c:	dfc00117 	ldw	ra,4(sp)
81128c70:	df000017 	ldw	fp,0(sp)
81128c74:	dec00204 	addi	sp,sp,8
81128c78:	f800283a 	ret

81128c7c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81128c7c:	defffe04 	addi	sp,sp,-8
81128c80:	de00012e 	bgeu	sp,et,81128c88 <OSInit+0xc>
81128c84:	003b68fa 	trap	3
81128c88:	dfc00115 	stw	ra,4(sp)
81128c8c:	df000015 	stw	fp,0(sp)
81128c90:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81128c94:	113b1bc0 	call	8113b1bc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81128c98:	1129a840 	call	81129a84 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81128c9c:	1129ad40 	call	81129ad4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81128ca0:	1129c580 	call	81129c58 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81128ca4:	112999c0 	call	8112999c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81128ca8:	112bc180 	call	8112bc18 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81128cac:	112c5600 	call	8112c560 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81128cb0:	112e8300 	call	8112e830 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81128cb4:	1129b480 	call	81129b48 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81128cb8:	1129bd00 	call	81129bd0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
81128cbc:	1131bd40 	call	81131bd4 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81128cc0:	113b1e80 	call	8113b1e8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81128cc4:	112a5340 	call	8112a534 <OSDebugInit>
#endif
}
81128cc8:	0001883a 	nop
81128ccc:	e037883a 	mov	sp,fp
81128cd0:	dfc00117 	ldw	ra,4(sp)
81128cd4:	df000017 	ldw	fp,0(sp)
81128cd8:	dec00204 	addi	sp,sp,8
81128cdc:	f800283a 	ret

81128ce0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81128ce0:	deffff04 	addi	sp,sp,-4
81128ce4:	de00012e 	bgeu	sp,et,81128cec <OSIntEnter+0xc>
81128ce8:	003b68fa 	trap	3
81128cec:	df000015 	stw	fp,0(sp)
81128cf0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81128cf4:	d0a07303 	ldbu	r2,-32308(gp)
81128cf8:	10803fcc 	andi	r2,r2,255
81128cfc:	10800058 	cmpnei	r2,r2,1
81128d00:	1000071e 	bne	r2,zero,81128d20 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
81128d04:	d0a08303 	ldbu	r2,-32244(gp)
81128d08:	10803fcc 	andi	r2,r2,255
81128d0c:	10803fe0 	cmpeqi	r2,r2,255
81128d10:	1000031e 	bne	r2,zero,81128d20 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
81128d14:	d0a08303 	ldbu	r2,-32244(gp)
81128d18:	10800044 	addi	r2,r2,1
81128d1c:	d0a08305 	stb	r2,-32244(gp)
        }
    }
}
81128d20:	0001883a 	nop
81128d24:	e037883a 	mov	sp,fp
81128d28:	df000017 	ldw	fp,0(sp)
81128d2c:	dec00104 	addi	sp,sp,4
81128d30:	f800283a 	ret

81128d34 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
81128d34:	defffb04 	addi	sp,sp,-20
81128d38:	de00012e 	bgeu	sp,et,81128d40 <OSIntExit+0xc>
81128d3c:	003b68fa 	trap	3
81128d40:	dfc00415 	stw	ra,16(sp)
81128d44:	df000315 	stw	fp,12(sp)
81128d48:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128d4c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
81128d50:	d0a07303 	ldbu	r2,-32308(gp)
81128d54:	10803fcc 	andi	r2,r2,255
81128d58:	10800058 	cmpnei	r2,r2,1
81128d5c:	10002f1e 	bne	r2,zero,81128e1c <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128d60:	0005303a 	rdctl	r2,status
81128d64:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128d68:	e0ffff17 	ldw	r3,-4(fp)
81128d6c:	00bfff84 	movi	r2,-2
81128d70:	1884703a 	and	r2,r3,r2
81128d74:	1001703a 	wrctl	status,r2
  
  return context;
81128d78:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81128d7c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81128d80:	d0a08303 	ldbu	r2,-32244(gp)
81128d84:	10803fcc 	andi	r2,r2,255
81128d88:	10000326 	beq	r2,zero,81128d98 <OSIntExit+0x64>
            OSIntNesting--;
81128d8c:	d0a08303 	ldbu	r2,-32244(gp)
81128d90:	10bfffc4 	addi	r2,r2,-1
81128d94:	d0a08305 	stb	r2,-32244(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81128d98:	d0a08303 	ldbu	r2,-32244(gp)
81128d9c:	10803fcc 	andi	r2,r2,255
81128da0:	10001a1e 	bne	r2,zero,81128e0c <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81128da4:	d0a07103 	ldbu	r2,-32316(gp)
81128da8:	10803fcc 	andi	r2,r2,255
81128dac:	1000171e 	bne	r2,zero,81128e0c <OSIntExit+0xd8>
                OS_SchedNew();
81128db0:	1129ee80 	call	81129ee8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81128db4:	d0e07583 	ldbu	r3,-32298(gp)
81128db8:	d0a075c3 	ldbu	r2,-32297(gp)
81128dbc:	18c03fcc 	andi	r3,r3,255
81128dc0:	10803fcc 	andi	r2,r2,255
81128dc4:	18801126 	beq	r3,r2,81128e0c <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81128dc8:	d0a07583 	ldbu	r2,-32298(gp)
81128dcc:	10c03fcc 	andi	r3,r2,255
81128dd0:	00a04574 	movhi	r2,33045
81128dd4:	108fcf04 	addi	r2,r2,16188
81128dd8:	18c7883a 	add	r3,r3,r3
81128ddc:	18c7883a 	add	r3,r3,r3
81128de0:	10c5883a 	add	r2,r2,r3
81128de4:	10800017 	ldw	r2,0(r2)
81128de8:	d0a07e15 	stw	r2,-32264(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
81128dec:	d0a07e17 	ldw	r2,-32264(gp)
81128df0:	10c00e17 	ldw	r3,56(r2)
81128df4:	18c00044 	addi	r3,r3,1
81128df8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
81128dfc:	d0a07817 	ldw	r2,-32288(gp)
81128e00:	10800044 	addi	r2,r2,1
81128e04:	d0a07815 	stw	r2,-32288(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
81128e08:	113ae7c0 	call	8113ae7c <OSCtxSw>
81128e0c:	e0bffd17 	ldw	r2,-12(fp)
81128e10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128e14:	e0bffe17 	ldw	r2,-8(fp)
81128e18:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81128e1c:	0001883a 	nop
81128e20:	e037883a 	mov	sp,fp
81128e24:	dfc00117 	ldw	ra,4(sp)
81128e28:	df000017 	ldw	fp,0(sp)
81128e2c:	dec00204 	addi	sp,sp,8
81128e30:	f800283a 	ret

81128e34 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
81128e34:	defffc04 	addi	sp,sp,-16
81128e38:	de00012e 	bgeu	sp,et,81128e40 <OSSchedLock+0xc>
81128e3c:	003b68fa 	trap	3
81128e40:	df000315 	stw	fp,12(sp)
81128e44:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128e48:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
81128e4c:	d0a07303 	ldbu	r2,-32308(gp)
81128e50:	10803fcc 	andi	r2,r2,255
81128e54:	10800058 	cmpnei	r2,r2,1
81128e58:	1000161e 	bne	r2,zero,81128eb4 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128e5c:	0005303a 	rdctl	r2,status
81128e60:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128e64:	e0ffff17 	ldw	r3,-4(fp)
81128e68:	00bfff84 	movi	r2,-2
81128e6c:	1884703a 	and	r2,r3,r2
81128e70:	1001703a 	wrctl	status,r2
  
  return context;
81128e74:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81128e78:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
81128e7c:	d0a08303 	ldbu	r2,-32244(gp)
81128e80:	10803fcc 	andi	r2,r2,255
81128e84:	1000071e 	bne	r2,zero,81128ea4 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81128e88:	d0a07103 	ldbu	r2,-32316(gp)
81128e8c:	10803fcc 	andi	r2,r2,255
81128e90:	10803fe0 	cmpeqi	r2,r2,255
81128e94:	1000031e 	bne	r2,zero,81128ea4 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81128e98:	d0a07103 	ldbu	r2,-32316(gp)
81128e9c:	10800044 	addi	r2,r2,1
81128ea0:	d0a07105 	stb	r2,-32316(gp)
81128ea4:	e0bffd17 	ldw	r2,-12(fp)
81128ea8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128eac:	e0bffe17 	ldw	r2,-8(fp)
81128eb0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81128eb4:	0001883a 	nop
81128eb8:	e037883a 	mov	sp,fp
81128ebc:	df000017 	ldw	fp,0(sp)
81128ec0:	dec00104 	addi	sp,sp,4
81128ec4:	f800283a 	ret

81128ec8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81128ec8:	defff804 	addi	sp,sp,-32
81128ecc:	de00012e 	bgeu	sp,et,81128ed4 <OSSchedUnlock+0xc>
81128ed0:	003b68fa 	trap	3
81128ed4:	dfc00715 	stw	ra,28(sp)
81128ed8:	df000615 	stw	fp,24(sp)
81128edc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128ee0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
81128ee4:	d0a07303 	ldbu	r2,-32308(gp)
81128ee8:	10803fcc 	andi	r2,r2,255
81128eec:	10800058 	cmpnei	r2,r2,1
81128ef0:	1000281e 	bne	r2,zero,81128f94 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128ef4:	0005303a 	rdctl	r2,status
81128ef8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128efc:	e0ffff17 	ldw	r3,-4(fp)
81128f00:	00bfff84 	movi	r2,-2
81128f04:	1884703a 	and	r2,r3,r2
81128f08:	1001703a 	wrctl	status,r2
  
  return context;
81128f0c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81128f10:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
81128f14:	d0a07103 	ldbu	r2,-32316(gp)
81128f18:	10803fcc 	andi	r2,r2,255
81128f1c:	10001926 	beq	r2,zero,81128f84 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
81128f20:	d0a07103 	ldbu	r2,-32316(gp)
81128f24:	10bfffc4 	addi	r2,r2,-1
81128f28:	d0a07105 	stb	r2,-32316(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
81128f2c:	d0a07103 	ldbu	r2,-32316(gp)
81128f30:	10803fcc 	andi	r2,r2,255
81128f34:	10000e1e 	bne	r2,zero,81128f70 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
81128f38:	d0a08303 	ldbu	r2,-32244(gp)
81128f3c:	10803fcc 	andi	r2,r2,255
81128f40:	1000061e 	bne	r2,zero,81128f5c <OSSchedUnlock+0x94>
81128f44:	e0bffa17 	ldw	r2,-24(fp)
81128f48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128f4c:	e0bffb17 	ldw	r2,-20(fp)
81128f50:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
81128f54:	1129e100 	call	81129e10 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
81128f58:	00000e06 	br	81128f94 <OSSchedUnlock+0xcc>
81128f5c:	e0bffa17 	ldw	r2,-24(fp)
81128f60:	e0bffc15 	stw	r2,-16(fp)
81128f64:	e0bffc17 	ldw	r2,-16(fp)
81128f68:	1001703a 	wrctl	status,r2
81128f6c:	00000906 	br	81128f94 <OSSchedUnlock+0xcc>
81128f70:	e0bffa17 	ldw	r2,-24(fp)
81128f74:	e0bffd15 	stw	r2,-12(fp)
81128f78:	e0bffd17 	ldw	r2,-12(fp)
81128f7c:	1001703a 	wrctl	status,r2
81128f80:	00000406 	br	81128f94 <OSSchedUnlock+0xcc>
81128f84:	e0bffa17 	ldw	r2,-24(fp)
81128f88:	e0bffe15 	stw	r2,-8(fp)
81128f8c:	e0bffe17 	ldw	r2,-8(fp)
81128f90:	1001703a 	wrctl	status,r2
81128f94:	0001883a 	nop
81128f98:	e037883a 	mov	sp,fp
81128f9c:	dfc00117 	ldw	ra,4(sp)
81128fa0:	df000017 	ldw	fp,0(sp)
81128fa4:	dec00204 	addi	sp,sp,8
81128fa8:	f800283a 	ret

81128fac <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81128fac:	defffe04 	addi	sp,sp,-8
81128fb0:	de00012e 	bgeu	sp,et,81128fb8 <OSStart+0xc>
81128fb4:	003b68fa 	trap	3
81128fb8:	dfc00115 	stw	ra,4(sp)
81128fbc:	df000015 	stw	fp,0(sp)
81128fc0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81128fc4:	d0a07303 	ldbu	r2,-32308(gp)
81128fc8:	10803fcc 	andi	r2,r2,255
81128fcc:	10000f1e 	bne	r2,zero,8112900c <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81128fd0:	1129ee80 	call	81129ee8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
81128fd4:	d0a07583 	ldbu	r2,-32298(gp)
81128fd8:	d0a075c5 	stb	r2,-32297(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81128fdc:	d0a07583 	ldbu	r2,-32298(gp)
81128fe0:	10c03fcc 	andi	r3,r2,255
81128fe4:	00a04574 	movhi	r2,33045
81128fe8:	108fcf04 	addi	r2,r2,16188
81128fec:	18c7883a 	add	r3,r3,r3
81128ff0:	18c7883a 	add	r3,r3,r3
81128ff4:	10c5883a 	add	r2,r2,r3
81128ff8:	10800017 	ldw	r2,0(r2)
81128ffc:	d0a07e15 	stw	r2,-32264(gp)
        OSTCBCur      = OSTCBHighRdy;
81129000:	d0a07e17 	ldw	r2,-32264(gp)
81129004:	d0a08415 	stw	r2,-32240(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
81129008:	113af180 	call	8113af18 <OSStartHighRdy>
    }
}
8112900c:	0001883a 	nop
81129010:	e037883a 	mov	sp,fp
81129014:	dfc00117 	ldw	ra,4(sp)
81129018:	df000017 	ldw	fp,0(sp)
8112901c:	dec00204 	addi	sp,sp,8
81129020:	f800283a 	ret

81129024 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
81129024:	defff904 	addi	sp,sp,-28
81129028:	de00012e 	bgeu	sp,et,81129030 <OSStatInit+0xc>
8112902c:	003b68fa 	trap	3
81129030:	dfc00615 	stw	ra,24(sp)
81129034:	df000515 	stw	fp,20(sp)
81129038:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112903c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
81129040:	01000084 	movi	r4,2
81129044:	1130b4c0 	call	81130b4c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129048:	0005303a 	rdctl	r2,status
8112904c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129050:	e0fffc17 	ldw	r3,-16(fp)
81129054:	00bfff84 	movi	r2,-2
81129058:	1884703a 	and	r2,r3,r2
8112905c:	1001703a 	wrctl	status,r2
  
  return context;
81129060:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
81129064:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81129068:	d0207415 	stw	zero,-32304(gp)
8112906c:	e0bffb17 	ldw	r2,-20(fp)
81129070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129074:	e0bffd17 	ldw	r2,-12(fp)
81129078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112907c:	01001904 	movi	r4,100
81129080:	1130b4c0 	call	81130b4c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129084:	0005303a 	rdctl	r2,status
81129088:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112908c:	e0fffe17 	ldw	r3,-8(fp)
81129090:	00bfff84 	movi	r2,-2
81129094:	1884703a 	and	r2,r3,r2
81129098:	1001703a 	wrctl	status,r2
  
  return context;
8112909c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
811290a0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
811290a4:	d0a07417 	ldw	r2,-32304(gp)
811290a8:	d0a07a15 	stw	r2,-32280(gp)
    OSStatRdy    = OS_TRUE;
811290ac:	00800044 	movi	r2,1
811290b0:	d0a08905 	stb	r2,-32220(gp)
811290b4:	e0bffb17 	ldw	r2,-20(fp)
811290b8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811290bc:	e0bfff17 	ldw	r2,-4(fp)
811290c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
811290c4:	0001883a 	nop
811290c8:	e037883a 	mov	sp,fp
811290cc:	dfc00117 	ldw	ra,4(sp)
811290d0:	df000017 	ldw	fp,0(sp)
811290d4:	dec00204 	addi	sp,sp,8
811290d8:	f800283a 	ret

811290dc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
811290dc:	defff704 	addi	sp,sp,-36
811290e0:	de00012e 	bgeu	sp,et,811290e8 <OSTimeTick+0xc>
811290e4:	003b68fa 	trap	3
811290e8:	dfc00815 	stw	ra,32(sp)
811290ec:	df000715 	stw	fp,28(sp)
811290f0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811290f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
811290f8:	113b1680 	call	8113b168 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811290fc:	0005303a 	rdctl	r2,status
81129100:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129104:	e0fffd17 	ldw	r3,-12(fp)
81129108:	00bfff84 	movi	r2,-2
8112910c:	1884703a 	and	r2,r3,r2
81129110:	1001703a 	wrctl	status,r2
  
  return context;
81129114:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
81129118:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
8112911c:	d0a08617 	ldw	r2,-32232(gp)
81129120:	10800044 	addi	r2,r2,1
81129124:	d0a08615 	stw	r2,-32232(gp)
81129128:	e0bffb17 	ldw	r2,-20(fp)
8112912c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129130:	e0bfff17 	ldw	r2,-4(fp)
81129134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
81129138:	d0a07303 	ldbu	r2,-32308(gp)
8112913c:	10803fcc 	andi	r2,r2,255
81129140:	10800058 	cmpnei	r2,r2,1
81129144:	10006a1e 	bne	r2,zero,811292f0 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81129148:	d0a07703 	ldbu	r2,-32292(gp)
8112914c:	10803fcc 	andi	r2,r2,255
81129150:	10c00060 	cmpeqi	r3,r2,1
81129154:	1800061e 	bne	r3,zero,81129170 <OSTimeTick+0x94>
81129158:	10c000a0 	cmpeqi	r3,r2,2
8112915c:	1800061e 	bne	r3,zero,81129178 <OSTimeTick+0x9c>
81129160:	10000a1e 	bne	r2,zero,8112918c <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
81129164:	00800044 	movi	r2,1
81129168:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112916c:	00000b06 	br	8112919c <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81129170:	e03ffa05 	stb	zero,-24(fp)
                 break;
81129174:	00000906 	br	8112919c <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81129178:	00800044 	movi	r2,1
8112917c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81129180:	00800044 	movi	r2,1
81129184:	d0a07705 	stb	r2,-32292(gp)
                 break;
81129188:	00000406 	br	8112919c <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112918c:	00800044 	movi	r2,1
81129190:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81129194:	d0207705 	stb	zero,-32292(gp)
                 break;
81129198:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112919c:	e0bffa03 	ldbu	r2,-24(fp)
811291a0:	10005226 	beq	r2,zero,811292ec <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
811291a4:	d0a07617 	ldw	r2,-32296(gp)
811291a8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
811291ac:	00004906 	br	811292d4 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811291b0:	0005303a 	rdctl	r2,status
811291b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811291b8:	e0fffc17 	ldw	r3,-16(fp)
811291bc:	00bfff84 	movi	r2,-2
811291c0:	1884703a 	and	r2,r3,r2
811291c4:	1001703a 	wrctl	status,r2
  
  return context;
811291c8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
811291cc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
811291d0:	e0bff917 	ldw	r2,-28(fp)
811291d4:	10800b8b 	ldhu	r2,46(r2)
811291d8:	10bfffcc 	andi	r2,r2,65535
811291dc:	10003626 	beq	r2,zero,811292b8 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
811291e0:	e0bff917 	ldw	r2,-28(fp)
811291e4:	10800b8b 	ldhu	r2,46(r2)
811291e8:	10bfffc4 	addi	r2,r2,-1
811291ec:	1007883a 	mov	r3,r2
811291f0:	e0bff917 	ldw	r2,-28(fp)
811291f4:	10c00b8d 	sth	r3,46(r2)
811291f8:	e0bff917 	ldw	r2,-28(fp)
811291fc:	10800b8b 	ldhu	r2,46(r2)
81129200:	10bfffcc 	andi	r2,r2,65535
81129204:	10002c1e 	bne	r2,zero,811292b8 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81129208:	e0bff917 	ldw	r2,-28(fp)
8112920c:	10800c03 	ldbu	r2,48(r2)
81129210:	10803fcc 	andi	r2,r2,255
81129214:	10800dcc 	andi	r2,r2,55
81129218:	10000b26 	beq	r2,zero,81129248 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
8112921c:	e0bff917 	ldw	r2,-28(fp)
81129220:	10c00c03 	ldbu	r3,48(r2)
81129224:	00bff204 	movi	r2,-56
81129228:	1884703a 	and	r2,r3,r2
8112922c:	1007883a 	mov	r3,r2
81129230:	e0bff917 	ldw	r2,-28(fp)
81129234:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
81129238:	e0bff917 	ldw	r2,-28(fp)
8112923c:	00c00044 	movi	r3,1
81129240:	10c00c45 	stb	r3,49(r2)
81129244:	00000206 	br	81129250 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81129248:	e0bff917 	ldw	r2,-28(fp)
8112924c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81129250:	e0bff917 	ldw	r2,-28(fp)
81129254:	10800c03 	ldbu	r2,48(r2)
81129258:	10803fcc 	andi	r2,r2,255
8112925c:	1080020c 	andi	r2,r2,8
81129260:	1000151e 	bne	r2,zero,811292b8 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
81129264:	e0bff917 	ldw	r2,-28(fp)
81129268:	10c00d83 	ldbu	r3,54(r2)
8112926c:	d0a08003 	ldbu	r2,-32256(gp)
81129270:	1884b03a 	or	r2,r3,r2
81129274:	d0a08005 	stb	r2,-32256(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81129278:	e0bff917 	ldw	r2,-28(fp)
8112927c:	10800d03 	ldbu	r2,52(r2)
81129280:	10c03fcc 	andi	r3,r2,255
81129284:	e0bff917 	ldw	r2,-28(fp)
81129288:	10800d03 	ldbu	r2,52(r2)
8112928c:	11003fcc 	andi	r4,r2,255
81129290:	d0a08044 	addi	r2,gp,-32255
81129294:	2085883a 	add	r2,r4,r2
81129298:	11000003 	ldbu	r4,0(r2)
8112929c:	e0bff917 	ldw	r2,-28(fp)
811292a0:	10800d43 	ldbu	r2,53(r2)
811292a4:	2084b03a 	or	r2,r4,r2
811292a8:	1009883a 	mov	r4,r2
811292ac:	d0a08044 	addi	r2,gp,-32255
811292b0:	1885883a 	add	r2,r3,r2
811292b4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
811292b8:	e0bff917 	ldw	r2,-28(fp)
811292bc:	10800517 	ldw	r2,20(r2)
811292c0:	e0bff915 	stw	r2,-28(fp)
811292c4:	e0bffb17 	ldw	r2,-20(fp)
811292c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811292cc:	e0bffe17 	ldw	r2,-8(fp)
811292d0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
811292d4:	e0bff917 	ldw	r2,-28(fp)
811292d8:	10800c83 	ldbu	r2,50(r2)
811292dc:	10803fcc 	andi	r2,r2,255
811292e0:	10800a18 	cmpnei	r2,r2,40
811292e4:	103fb21e 	bne	r2,zero,811291b0 <__reset+0xfb1091b0>
811292e8:	00000106 	br	811292f0 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
811292ec:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
811292f0:	e037883a 	mov	sp,fp
811292f4:	dfc00117 	ldw	ra,4(sp)
811292f8:	df000017 	ldw	fp,0(sp)
811292fc:	dec00204 	addi	sp,sp,8
81129300:	f800283a 	ret

81129304 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
81129304:	deffff04 	addi	sp,sp,-4
81129308:	de00012e 	bgeu	sp,et,81129310 <OSVersion+0xc>
8112930c:	003b68fa 	trap	3
81129310:	df000015 	stw	fp,0(sp)
81129314:	d839883a 	mov	fp,sp
    return (OS_VERSION);
81129318:	00804784 	movi	r2,286
}
8112931c:	e037883a 	mov	sp,fp
81129320:	df000017 	ldw	fp,0(sp)
81129324:	dec00104 	addi	sp,sp,4
81129328:	f800283a 	ret

8112932c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112932c:	deffff04 	addi	sp,sp,-4
81129330:	de00012e 	bgeu	sp,et,81129338 <OS_Dummy+0xc>
81129334:	003b68fa 	trap	3
81129338:	df000015 	stw	fp,0(sp)
8112933c:	d839883a 	mov	fp,sp
}
81129340:	0001883a 	nop
81129344:	e037883a 	mov	sp,fp
81129348:	df000017 	ldw	fp,0(sp)
8112934c:	dec00104 	addi	sp,sp,4
81129350:	f800283a 	ret

81129354 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
81129354:	defff804 	addi	sp,sp,-32
81129358:	de00012e 	bgeu	sp,et,81129360 <OS_EventTaskRdy+0xc>
8112935c:	003b68fa 	trap	3
81129360:	dfc00715 	stw	ra,28(sp)
81129364:	df000615 	stw	fp,24(sp)
81129368:	df000604 	addi	fp,sp,24
8112936c:	e13ffc15 	stw	r4,-16(fp)
81129370:	e17ffd15 	stw	r5,-12(fp)
81129374:	3007883a 	mov	r3,r6
81129378:	3805883a 	mov	r2,r7
8112937c:	e0fffe05 	stb	r3,-8(fp)
81129380:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
81129384:	e0bffc17 	ldw	r2,-16(fp)
81129388:	10800283 	ldbu	r2,10(r2)
8112938c:	10c03fcc 	andi	r3,r2,255
81129390:	00a04534 	movhi	r2,33044
81129394:	10b9fa04 	addi	r2,r2,-6168
81129398:	10c5883a 	add	r2,r2,r3
8112939c:	10800003 	ldbu	r2,0(r2)
811293a0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
811293a4:	e0bffa03 	ldbu	r2,-24(fp)
811293a8:	e0fffc17 	ldw	r3,-16(fp)
811293ac:	1885883a 	add	r2,r3,r2
811293b0:	108002c4 	addi	r2,r2,11
811293b4:	10800003 	ldbu	r2,0(r2)
811293b8:	10c03fcc 	andi	r3,r2,255
811293bc:	00a04534 	movhi	r2,33044
811293c0:	10b9fa04 	addi	r2,r2,-6168
811293c4:	10c5883a 	add	r2,r2,r3
811293c8:	10800003 	ldbu	r2,0(r2)
811293cc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
811293d0:	e0bffa03 	ldbu	r2,-24(fp)
811293d4:	100490fa 	slli	r2,r2,3
811293d8:	1007883a 	mov	r3,r2
811293dc:	e0bffa43 	ldbu	r2,-23(fp)
811293e0:	1885883a 	add	r2,r3,r2
811293e4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
811293e8:	e0fffa83 	ldbu	r3,-22(fp)
811293ec:	00a04574 	movhi	r2,33045
811293f0:	108fcf04 	addi	r2,r2,16188
811293f4:	18c7883a 	add	r3,r3,r3
811293f8:	18c7883a 	add	r3,r3,r3
811293fc:	10c5883a 	add	r2,r2,r3
81129400:	10800017 	ldw	r2,0(r2)
81129404:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
81129408:	e0bffb17 	ldw	r2,-20(fp)
8112940c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81129410:	e0bffb17 	ldw	r2,-20(fp)
81129414:	e0fffd17 	ldw	r3,-12(fp)
81129418:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112941c:	e0bffb17 	ldw	r2,-20(fp)
81129420:	10800c03 	ldbu	r2,48(r2)
81129424:	1007883a 	mov	r3,r2
81129428:	e0bffe03 	ldbu	r2,-8(fp)
8112942c:	0084303a 	nor	r2,zero,r2
81129430:	1884703a 	and	r2,r3,r2
81129434:	1007883a 	mov	r3,r2
81129438:	e0bffb17 	ldw	r2,-20(fp)
8112943c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
81129440:	e0bffb17 	ldw	r2,-20(fp)
81129444:	e0ffff03 	ldbu	r3,-4(fp)
81129448:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112944c:	e0bffb17 	ldw	r2,-20(fp)
81129450:	10800c03 	ldbu	r2,48(r2)
81129454:	10803fcc 	andi	r2,r2,255
81129458:	1080020c 	andi	r2,r2,8
8112945c:	1000111e 	bne	r2,zero,811294a4 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
81129460:	e0bffb17 	ldw	r2,-20(fp)
81129464:	10c00d83 	ldbu	r3,54(r2)
81129468:	d0a08003 	ldbu	r2,-32256(gp)
8112946c:	1884b03a 	or	r2,r3,r2
81129470:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
81129474:	e0fffa03 	ldbu	r3,-24(fp)
81129478:	e13ffa03 	ldbu	r4,-24(fp)
8112947c:	d0a08044 	addi	r2,gp,-32255
81129480:	2085883a 	add	r2,r4,r2
81129484:	11000003 	ldbu	r4,0(r2)
81129488:	e0bffb17 	ldw	r2,-20(fp)
8112948c:	10800d43 	ldbu	r2,53(r2)
81129490:	2084b03a 	or	r2,r4,r2
81129494:	1009883a 	mov	r4,r2
81129498:	d0a08044 	addi	r2,gp,-32255
8112949c:	1885883a 	add	r2,r3,r2
811294a0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
811294a4:	e17ffc17 	ldw	r5,-16(fp)
811294a8:	e13ffb17 	ldw	r4,-20(fp)
811294ac:	11297640 	call	81129764 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
811294b0:	e0bffb17 	ldw	r2,-20(fp)
811294b4:	10800817 	ldw	r2,32(r2)
811294b8:	10000826 	beq	r2,zero,811294dc <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
811294bc:	e0bffb17 	ldw	r2,-20(fp)
811294c0:	10800817 	ldw	r2,32(r2)
811294c4:	100b883a 	mov	r5,r2
811294c8:	e13ffb17 	ldw	r4,-20(fp)
811294cc:	11298240 	call	81129824 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
811294d0:	e0bffb17 	ldw	r2,-20(fp)
811294d4:	e0fffc17 	ldw	r3,-16(fp)
811294d8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
811294dc:	e0bffa83 	ldbu	r2,-22(fp)
}
811294e0:	e037883a 	mov	sp,fp
811294e4:	dfc00117 	ldw	ra,4(sp)
811294e8:	df000017 	ldw	fp,0(sp)
811294ec:	dec00204 	addi	sp,sp,8
811294f0:	f800283a 	ret

811294f4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
811294f4:	defffd04 	addi	sp,sp,-12
811294f8:	de00012e 	bgeu	sp,et,81129500 <OS_EventTaskWait+0xc>
811294fc:	003b68fa 	trap	3
81129500:	df000215 	stw	fp,8(sp)
81129504:	df000204 	addi	fp,sp,8
81129508:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112950c:	d0a08417 	ldw	r2,-32240(gp)
81129510:	e0ffff17 	ldw	r3,-4(fp)
81129514:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
81129518:	d0a08417 	ldw	r2,-32240(gp)
8112951c:	10800d03 	ldbu	r2,52(r2)
81129520:	10803fcc 	andi	r2,r2,255
81129524:	d0e08417 	ldw	r3,-32240(gp)
81129528:	18c00d03 	ldbu	r3,52(r3)
8112952c:	18c03fcc 	andi	r3,r3,255
81129530:	e13fff17 	ldw	r4,-4(fp)
81129534:	20c7883a 	add	r3,r4,r3
81129538:	18c002c4 	addi	r3,r3,11
8112953c:	19000003 	ldbu	r4,0(r3)
81129540:	d0e08417 	ldw	r3,-32240(gp)
81129544:	18c00d43 	ldbu	r3,53(r3)
81129548:	20c6b03a 	or	r3,r4,r3
8112954c:	1809883a 	mov	r4,r3
81129550:	e0ffff17 	ldw	r3,-4(fp)
81129554:	1885883a 	add	r2,r3,r2
81129558:	108002c4 	addi	r2,r2,11
8112955c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81129560:	e0bfff17 	ldw	r2,-4(fp)
81129564:	10c00283 	ldbu	r3,10(r2)
81129568:	d0a08417 	ldw	r2,-32240(gp)
8112956c:	10800d83 	ldbu	r2,54(r2)
81129570:	1884b03a 	or	r2,r3,r2
81129574:	1007883a 	mov	r3,r2
81129578:	e0bfff17 	ldw	r2,-4(fp)
8112957c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81129580:	d0a08417 	ldw	r2,-32240(gp)
81129584:	10800d03 	ldbu	r2,52(r2)
81129588:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112958c:	e0fffe03 	ldbu	r3,-8(fp)
81129590:	e13ffe03 	ldbu	r4,-8(fp)
81129594:	d0a08044 	addi	r2,gp,-32255
81129598:	2085883a 	add	r2,r4,r2
8112959c:	10800003 	ldbu	r2,0(r2)
811295a0:	1009883a 	mov	r4,r2
811295a4:	d0a08417 	ldw	r2,-32240(gp)
811295a8:	10800d43 	ldbu	r2,53(r2)
811295ac:	0084303a 	nor	r2,zero,r2
811295b0:	2084703a 	and	r2,r4,r2
811295b4:	1009883a 	mov	r4,r2
811295b8:	d0a08044 	addi	r2,gp,-32255
811295bc:	1885883a 	add	r2,r3,r2
811295c0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
811295c4:	e0fffe03 	ldbu	r3,-8(fp)
811295c8:	d0a08044 	addi	r2,gp,-32255
811295cc:	1885883a 	add	r2,r3,r2
811295d0:	10800003 	ldbu	r2,0(r2)
811295d4:	10803fcc 	andi	r2,r2,255
811295d8:	1000071e 	bne	r2,zero,811295f8 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
811295dc:	d0a08417 	ldw	r2,-32240(gp)
811295e0:	10800d83 	ldbu	r2,54(r2)
811295e4:	0084303a 	nor	r2,zero,r2
811295e8:	1007883a 	mov	r3,r2
811295ec:	d0a08003 	ldbu	r2,-32256(gp)
811295f0:	1884703a 	and	r2,r3,r2
811295f4:	d0a08005 	stb	r2,-32256(gp)
    }
}
811295f8:	0001883a 	nop
811295fc:	e037883a 	mov	sp,fp
81129600:	df000017 	ldw	fp,0(sp)
81129604:	dec00104 	addi	sp,sp,4
81129608:	f800283a 	ret

8112960c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112960c:	defffb04 	addi	sp,sp,-20
81129610:	de00012e 	bgeu	sp,et,81129618 <OS_EventTaskWaitMulti+0xc>
81129614:	003b68fa 	trap	3
81129618:	df000415 	stw	fp,16(sp)
8112961c:	df000404 	addi	fp,sp,16
81129620:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
81129624:	d0a08417 	ldw	r2,-32240(gp)
81129628:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112962c:	d0a08417 	ldw	r2,-32240(gp)
81129630:	e0ffff17 	ldw	r3,-4(fp)
81129634:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
81129638:	e0bfff17 	ldw	r2,-4(fp)
8112963c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81129640:	e0bffc17 	ldw	r2,-16(fp)
81129644:	10800017 	ldw	r2,0(r2)
81129648:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112964c:	00002006 	br	811296d0 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81129650:	d0a08417 	ldw	r2,-32240(gp)
81129654:	10800d03 	ldbu	r2,52(r2)
81129658:	10803fcc 	andi	r2,r2,255
8112965c:	d0e08417 	ldw	r3,-32240(gp)
81129660:	18c00d03 	ldbu	r3,52(r3)
81129664:	18c03fcc 	andi	r3,r3,255
81129668:	e13ffd17 	ldw	r4,-12(fp)
8112966c:	20c7883a 	add	r3,r4,r3
81129670:	18c002c4 	addi	r3,r3,11
81129674:	19000003 	ldbu	r4,0(r3)
81129678:	d0e08417 	ldw	r3,-32240(gp)
8112967c:	18c00d43 	ldbu	r3,53(r3)
81129680:	20c6b03a 	or	r3,r4,r3
81129684:	1809883a 	mov	r4,r3
81129688:	e0fffd17 	ldw	r3,-12(fp)
8112968c:	1885883a 	add	r2,r3,r2
81129690:	108002c4 	addi	r2,r2,11
81129694:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81129698:	e0bffd17 	ldw	r2,-12(fp)
8112969c:	10c00283 	ldbu	r3,10(r2)
811296a0:	d0a08417 	ldw	r2,-32240(gp)
811296a4:	10800d83 	ldbu	r2,54(r2)
811296a8:	1884b03a 	or	r2,r3,r2
811296ac:	1007883a 	mov	r3,r2
811296b0:	e0bffd17 	ldw	r2,-12(fp)
811296b4:	10c00285 	stb	r3,10(r2)
        pevents++;
811296b8:	e0bffc17 	ldw	r2,-16(fp)
811296bc:	10800104 	addi	r2,r2,4
811296c0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
811296c4:	e0bffc17 	ldw	r2,-16(fp)
811296c8:	10800017 	ldw	r2,0(r2)
811296cc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
811296d0:	e0bffd17 	ldw	r2,-12(fp)
811296d4:	103fde1e 	bne	r2,zero,81129650 <__reset+0xfb109650>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
811296d8:	d0a08417 	ldw	r2,-32240(gp)
811296dc:	10800d03 	ldbu	r2,52(r2)
811296e0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
811296e4:	e0fffe03 	ldbu	r3,-8(fp)
811296e8:	e13ffe03 	ldbu	r4,-8(fp)
811296ec:	d0a08044 	addi	r2,gp,-32255
811296f0:	2085883a 	add	r2,r4,r2
811296f4:	10800003 	ldbu	r2,0(r2)
811296f8:	1009883a 	mov	r4,r2
811296fc:	d0a08417 	ldw	r2,-32240(gp)
81129700:	10800d43 	ldbu	r2,53(r2)
81129704:	0084303a 	nor	r2,zero,r2
81129708:	2084703a 	and	r2,r4,r2
8112970c:	1009883a 	mov	r4,r2
81129710:	d0a08044 	addi	r2,gp,-32255
81129714:	1885883a 	add	r2,r3,r2
81129718:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112971c:	e0fffe03 	ldbu	r3,-8(fp)
81129720:	d0a08044 	addi	r2,gp,-32255
81129724:	1885883a 	add	r2,r3,r2
81129728:	10800003 	ldbu	r2,0(r2)
8112972c:	10803fcc 	andi	r2,r2,255
81129730:	1000071e 	bne	r2,zero,81129750 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81129734:	d0a08417 	ldw	r2,-32240(gp)
81129738:	10800d83 	ldbu	r2,54(r2)
8112973c:	0084303a 	nor	r2,zero,r2
81129740:	1007883a 	mov	r3,r2
81129744:	d0a08003 	ldbu	r2,-32256(gp)
81129748:	1884703a 	and	r2,r3,r2
8112974c:	d0a08005 	stb	r2,-32256(gp)
    }
}
81129750:	0001883a 	nop
81129754:	e037883a 	mov	sp,fp
81129758:	df000017 	ldw	fp,0(sp)
8112975c:	dec00104 	addi	sp,sp,4
81129760:	f800283a 	ret

81129764 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
81129764:	defffc04 	addi	sp,sp,-16
81129768:	de00012e 	bgeu	sp,et,81129770 <OS_EventTaskRemove+0xc>
8112976c:	003b68fa 	trap	3
81129770:	df000315 	stw	fp,12(sp)
81129774:	df000304 	addi	fp,sp,12
81129778:	e13ffe15 	stw	r4,-8(fp)
8112977c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81129780:	e0bffe17 	ldw	r2,-8(fp)
81129784:	10800d03 	ldbu	r2,52(r2)
81129788:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112978c:	e0bffd03 	ldbu	r2,-12(fp)
81129790:	e0fffd03 	ldbu	r3,-12(fp)
81129794:	e13fff17 	ldw	r4,-4(fp)
81129798:	20c7883a 	add	r3,r4,r3
8112979c:	18c002c4 	addi	r3,r3,11
811297a0:	18c00003 	ldbu	r3,0(r3)
811297a4:	1809883a 	mov	r4,r3
811297a8:	e0fffe17 	ldw	r3,-8(fp)
811297ac:	18c00d43 	ldbu	r3,53(r3)
811297b0:	00c6303a 	nor	r3,zero,r3
811297b4:	20c6703a 	and	r3,r4,r3
811297b8:	1809883a 	mov	r4,r3
811297bc:	e0ffff17 	ldw	r3,-4(fp)
811297c0:	1885883a 	add	r2,r3,r2
811297c4:	108002c4 	addi	r2,r2,11
811297c8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
811297cc:	e0bffd03 	ldbu	r2,-12(fp)
811297d0:	e0ffff17 	ldw	r3,-4(fp)
811297d4:	1885883a 	add	r2,r3,r2
811297d8:	108002c4 	addi	r2,r2,11
811297dc:	10800003 	ldbu	r2,0(r2)
811297e0:	10803fcc 	andi	r2,r2,255
811297e4:	10000a1e 	bne	r2,zero,81129810 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
811297e8:	e0bfff17 	ldw	r2,-4(fp)
811297ec:	10800283 	ldbu	r2,10(r2)
811297f0:	1007883a 	mov	r3,r2
811297f4:	e0bffe17 	ldw	r2,-8(fp)
811297f8:	10800d83 	ldbu	r2,54(r2)
811297fc:	0084303a 	nor	r2,zero,r2
81129800:	1884703a 	and	r2,r3,r2
81129804:	1007883a 	mov	r3,r2
81129808:	e0bfff17 	ldw	r2,-4(fp)
8112980c:	10c00285 	stb	r3,10(r2)
    }
}
81129810:	0001883a 	nop
81129814:	e037883a 	mov	sp,fp
81129818:	df000017 	ldw	fp,0(sp)
8112981c:	dec00104 	addi	sp,sp,4
81129820:	f800283a 	ret

81129824 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81129824:	defffa04 	addi	sp,sp,-24
81129828:	de00012e 	bgeu	sp,et,81129830 <OS_EventTaskRemoveMulti+0xc>
8112982c:	003b68fa 	trap	3
81129830:	df000515 	stw	fp,20(sp)
81129834:	df000504 	addi	fp,sp,20
81129838:	e13ffe15 	stw	r4,-8(fp)
8112983c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81129840:	e0bffe17 	ldw	r2,-8(fp)
81129844:	10800d03 	ldbu	r2,52(r2)
81129848:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
8112984c:	e0bffe17 	ldw	r2,-8(fp)
81129850:	10800d83 	ldbu	r2,54(r2)
81129854:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81129858:	e0bffe17 	ldw	r2,-8(fp)
8112985c:	10800d43 	ldbu	r2,53(r2)
81129860:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
81129864:	e0bfff17 	ldw	r2,-4(fp)
81129868:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
8112986c:	e0bffb17 	ldw	r2,-20(fp)
81129870:	10800017 	ldw	r2,0(r2)
81129874:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81129878:	00002506 	br	81129910 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
8112987c:	e0bffd03 	ldbu	r2,-12(fp)
81129880:	e0fffd03 	ldbu	r3,-12(fp)
81129884:	e13ffc17 	ldw	r4,-16(fp)
81129888:	20c7883a 	add	r3,r4,r3
8112988c:	18c002c4 	addi	r3,r3,11
81129890:	18c00003 	ldbu	r3,0(r3)
81129894:	1809883a 	mov	r4,r3
81129898:	e0fffd83 	ldbu	r3,-10(fp)
8112989c:	00c6303a 	nor	r3,zero,r3
811298a0:	20c6703a 	and	r3,r4,r3
811298a4:	1809883a 	mov	r4,r3
811298a8:	e0fffc17 	ldw	r3,-16(fp)
811298ac:	1885883a 	add	r2,r3,r2
811298b0:	108002c4 	addi	r2,r2,11
811298b4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
811298b8:	e0bffd03 	ldbu	r2,-12(fp)
811298bc:	e0fffc17 	ldw	r3,-16(fp)
811298c0:	1885883a 	add	r2,r3,r2
811298c4:	108002c4 	addi	r2,r2,11
811298c8:	10800003 	ldbu	r2,0(r2)
811298cc:	10803fcc 	andi	r2,r2,255
811298d0:	1000091e 	bne	r2,zero,811298f8 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
811298d4:	e0bffc17 	ldw	r2,-16(fp)
811298d8:	10800283 	ldbu	r2,10(r2)
811298dc:	1007883a 	mov	r3,r2
811298e0:	e0bffd43 	ldbu	r2,-11(fp)
811298e4:	0084303a 	nor	r2,zero,r2
811298e8:	1884703a 	and	r2,r3,r2
811298ec:	1007883a 	mov	r3,r2
811298f0:	e0bffc17 	ldw	r2,-16(fp)
811298f4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
811298f8:	e0bffb17 	ldw	r2,-20(fp)
811298fc:	10800104 	addi	r2,r2,4
81129900:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81129904:	e0bffb17 	ldw	r2,-20(fp)
81129908:	10800017 	ldw	r2,0(r2)
8112990c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81129910:	e0bffc17 	ldw	r2,-16(fp)
81129914:	103fd91e 	bne	r2,zero,8112987c <__reset+0xfb10987c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81129918:	0001883a 	nop
8112991c:	e037883a 	mov	sp,fp
81129920:	df000017 	ldw	fp,0(sp)
81129924:	dec00104 	addi	sp,sp,4
81129928:	f800283a 	ret

8112992c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
8112992c:	defffc04 	addi	sp,sp,-16
81129930:	de00012e 	bgeu	sp,et,81129938 <OS_EventWaitListInit+0xc>
81129934:	003b68fa 	trap	3
81129938:	df000315 	stw	fp,12(sp)
8112993c:	df000304 	addi	fp,sp,12
81129940:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81129944:	e0bfff17 	ldw	r2,-4(fp)
81129948:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8112994c:	e0bfff17 	ldw	r2,-4(fp)
81129950:	108002c4 	addi	r2,r2,11
81129954:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129958:	e03ffe05 	stb	zero,-8(fp)
8112995c:	00000706 	br	8112997c <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
81129960:	e0bffd17 	ldw	r2,-12(fp)
81129964:	10c00044 	addi	r3,r2,1
81129968:	e0fffd15 	stw	r3,-12(fp)
8112996c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129970:	e0bffe03 	ldbu	r2,-8(fp)
81129974:	10800044 	addi	r2,r2,1
81129978:	e0bffe05 	stb	r2,-8(fp)
8112997c:	e0bffe03 	ldbu	r2,-8(fp)
81129980:	108001b0 	cmpltui	r2,r2,6
81129984:	103ff61e 	bne	r2,zero,81129960 <__reset+0xfb109960>
        *ptbl++ = 0;
    }
}
81129988:	0001883a 	nop
8112998c:	e037883a 	mov	sp,fp
81129990:	df000017 	ldw	fp,0(sp)
81129994:	dec00104 	addi	sp,sp,4
81129998:	f800283a 	ret

8112999c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112999c:	defffb04 	addi	sp,sp,-20
811299a0:	de00012e 	bgeu	sp,et,811299a8 <OS_InitEventList+0xc>
811299a4:	003b68fa 	trap	3
811299a8:	dfc00415 	stw	ra,16(sp)
811299ac:	df000315 	stw	fp,12(sp)
811299b0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
811299b4:	01430c04 	movi	r5,3120
811299b8:	01204574 	movhi	r4,33045
811299bc:	21092d04 	addi	r4,r4,9396
811299c0:	1129d440 	call	81129d44 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
811299c4:	00a04574 	movhi	r2,33045
811299c8:	10892d04 	addi	r2,r2,9396
811299cc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
811299d0:	00a04574 	movhi	r2,33045
811299d4:	10893a04 	addi	r2,r2,9448
811299d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
811299dc:	e03ffd0d 	sth	zero,-12(fp)
811299e0:	00001306 	br	81129a30 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
811299e4:	e0bffe17 	ldw	r2,-8(fp)
811299e8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
811299ec:	e0bffe17 	ldw	r2,-8(fp)
811299f0:	e0ffff17 	ldw	r3,-4(fp)
811299f4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
811299f8:	e0bffe17 	ldw	r2,-8(fp)
811299fc:	00c00fc4 	movi	r3,63
81129a00:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81129a04:	e0bffe17 	ldw	r2,-8(fp)
81129a08:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
81129a0c:	e0bffe17 	ldw	r2,-8(fp)
81129a10:	10800d04 	addi	r2,r2,52
81129a14:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81129a18:	e0bfff17 	ldw	r2,-4(fp)
81129a1c:	10800d04 	addi	r2,r2,52
81129a20:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81129a24:	e0bffd0b 	ldhu	r2,-12(fp)
81129a28:	10800044 	addi	r2,r2,1
81129a2c:	e0bffd0d 	sth	r2,-12(fp)
81129a30:	e0bffd0b 	ldhu	r2,-12(fp)
81129a34:	10800ef0 	cmpltui	r2,r2,59
81129a38:	103fea1e 	bne	r2,zero,811299e4 <__reset+0xfb1099e4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81129a3c:	e0bffe17 	ldw	r2,-8(fp)
81129a40:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81129a44:	e0bffe17 	ldw	r2,-8(fp)
81129a48:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81129a4c:	e0bffe17 	ldw	r2,-8(fp)
81129a50:	00c00fc4 	movi	r3,63
81129a54:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81129a58:	e0bffe17 	ldw	r2,-8(fp)
81129a5c:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81129a60:	00a04574 	movhi	r2,33045
81129a64:	10892d04 	addi	r2,r2,9396
81129a68:	d0a08215 	stw	r2,-32248(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81129a6c:	0001883a 	nop
81129a70:	e037883a 	mov	sp,fp
81129a74:	dfc00117 	ldw	ra,4(sp)
81129a78:	df000017 	ldw	fp,0(sp)
81129a7c:	dec00204 	addi	sp,sp,8
81129a80:	f800283a 	ret

81129a84 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81129a84:	deffff04 	addi	sp,sp,-4
81129a88:	de00012e 	bgeu	sp,et,81129a90 <OS_InitMisc+0xc>
81129a8c:	003b68fa 	trap	3
81129a90:	df000015 	stw	fp,0(sp)
81129a94:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81129a98:	d0208615 	stw	zero,-32232(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
81129a9c:	d0208305 	stb	zero,-32244(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81129aa0:	d0207105 	stb	zero,-32316(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81129aa4:	d0207c45 	stb	zero,-32271(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81129aa8:	d0207305 	stb	zero,-32308(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
81129aac:	d0207815 	stw	zero,-32288(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81129ab0:	d0207415 	stw	zero,-32304(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81129ab4:	d0208a15 	stw	zero,-32216(gp)
    OSIdleCtrMax  = 0L;
81129ab8:	d0207a15 	stw	zero,-32280(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81129abc:	d0208905 	stb	zero,-32220(gp)
#endif
}
81129ac0:	0001883a 	nop
81129ac4:	e037883a 	mov	sp,fp
81129ac8:	df000017 	ldw	fp,0(sp)
81129acc:	dec00104 	addi	sp,sp,4
81129ad0:	f800283a 	ret

81129ad4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81129ad4:	defffd04 	addi	sp,sp,-12
81129ad8:	de00012e 	bgeu	sp,et,81129ae0 <OS_InitRdyList+0xc>
81129adc:	003b68fa 	trap	3
81129ae0:	df000215 	stw	fp,8(sp)
81129ae4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
81129ae8:	d0208005 	stb	zero,-32256(gp)
    prdytbl       = &OSRdyTbl[0];
81129aec:	d0a08044 	addi	r2,gp,-32255
81129af0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81129af4:	e03ffe05 	stb	zero,-8(fp)
81129af8:	00000706 	br	81129b18 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
81129afc:	e0bfff17 	ldw	r2,-4(fp)
81129b00:	10c00044 	addi	r3,r2,1
81129b04:	e0ffff15 	stw	r3,-4(fp)
81129b08:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81129b0c:	e0bffe03 	ldbu	r2,-8(fp)
81129b10:	10800044 	addi	r2,r2,1
81129b14:	e0bffe05 	stb	r2,-8(fp)
81129b18:	e0bffe03 	ldbu	r2,-8(fp)
81129b1c:	108001b0 	cmpltui	r2,r2,6
81129b20:	103ff61e 	bne	r2,zero,81129afc <__reset+0xfb109afc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81129b24:	d02075c5 	stb	zero,-32297(gp)
    OSPrioHighRdy = 0;
81129b28:	d0207585 	stb	zero,-32298(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81129b2c:	d0207e15 	stw	zero,-32264(gp)
    OSTCBCur      = (OS_TCB *)0;
81129b30:	d0208415 	stw	zero,-32240(gp)
}
81129b34:	0001883a 	nop
81129b38:	e037883a 	mov	sp,fp
81129b3c:	df000017 	ldw	fp,0(sp)
81129b40:	dec00104 	addi	sp,sp,4
81129b44:	f800283a 	ret

81129b48 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
81129b48:	defff804 	addi	sp,sp,-32
81129b4c:	de00012e 	bgeu	sp,et,81129b54 <OS_InitTaskIdle+0xc>
81129b50:	003b68fa 	trap	3
81129b54:	dfc00715 	stw	ra,28(sp)
81129b58:	df000615 	stw	fp,24(sp)
81129b5c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
81129b60:	008000c4 	movi	r2,3
81129b64:	d8800415 	stw	r2,16(sp)
81129b68:	d8000315 	stw	zero,12(sp)
81129b6c:	00808004 	movi	r2,512
81129b70:	d8800215 	stw	r2,8(sp)
81129b74:	00a04574 	movhi	r2,33045
81129b78:	10872d04 	addi	r2,r2,7348
81129b7c:	d8800115 	stw	r2,4(sp)
81129b80:	00bfffd4 	movui	r2,65535
81129b84:	d8800015 	stw	r2,0(sp)
81129b88:	01c00a04 	movi	r7,40
81129b8c:	01a04574 	movhi	r6,33045
81129b90:	31892c04 	addi	r6,r6,9392
81129b94:	000b883a 	mov	r5,zero
81129b98:	012044f4 	movhi	r4,33043
81129b9c:	21280f04 	addi	r4,r4,-24516
81129ba0:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
81129ba4:	e1bfff04 	addi	r6,fp,-4
81129ba8:	01604534 	movhi	r5,33044
81129bac:	297a3a04 	addi	r5,r5,-5912
81129bb0:	01000a04 	movi	r4,40
81129bb4:	113025c0 	call	8113025c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
81129bb8:	0001883a 	nop
81129bbc:	e037883a 	mov	sp,fp
81129bc0:	dfc00117 	ldw	ra,4(sp)
81129bc4:	df000017 	ldw	fp,0(sp)
81129bc8:	dec00204 	addi	sp,sp,8
81129bcc:	f800283a 	ret

81129bd0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
81129bd0:	defff804 	addi	sp,sp,-32
81129bd4:	de00012e 	bgeu	sp,et,81129bdc <OS_InitTaskStat+0xc>
81129bd8:	003b68fa 	trap	3
81129bdc:	dfc00715 	stw	ra,28(sp)
81129be0:	df000615 	stw	fp,24(sp)
81129be4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
81129be8:	008000c4 	movi	r2,3
81129bec:	d8800415 	stw	r2,16(sp)
81129bf0:	d8000315 	stw	zero,12(sp)
81129bf4:	00808004 	movi	r2,512
81129bf8:	d8800215 	stw	r2,8(sp)
81129bfc:	00a04574 	movhi	r2,33045
81129c00:	1082b504 	addi	r2,r2,2772
81129c04:	d8800115 	stw	r2,4(sp)
81129c08:	00bfff94 	movui	r2,65534
81129c0c:	d8800015 	stw	r2,0(sp)
81129c10:	01c009c4 	movi	r7,39
81129c14:	01a04574 	movhi	r6,33045
81129c18:	3184b404 	addi	r6,r6,4816
81129c1c:	000b883a 	mov	r5,zero
81129c20:	012044f4 	movhi	r4,33043
81129c24:	21282804 	addi	r4,r4,-24416
81129c28:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81129c2c:	e1bfff04 	addi	r6,fp,-4
81129c30:	01604534 	movhi	r5,33044
81129c34:	297a3e04 	addi	r5,r5,-5896
81129c38:	010009c4 	movi	r4,39
81129c3c:	113025c0 	call	8113025c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81129c40:	0001883a 	nop
81129c44:	e037883a 	mov	sp,fp
81129c48:	dfc00117 	ldw	ra,4(sp)
81129c4c:	df000017 	ldw	fp,0(sp)
81129c50:	dec00204 	addi	sp,sp,8
81129c54:	f800283a 	ret

81129c58 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81129c58:	defffb04 	addi	sp,sp,-20
81129c5c:	de00012e 	bgeu	sp,et,81129c64 <OS_InitTCBList+0xc>
81129c60:	003b68fa 	trap	3
81129c64:	dfc00415 	stw	ra,16(sp)
81129c68:	df000315 	stw	fp,12(sp)
81129c6c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81129c70:	01439604 	movi	r5,3672
81129c74:	01204574 	movhi	r4,33045
81129c78:	210c3904 	addi	r4,r4,12516
81129c7c:	1129d440 	call	81129d44 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81129c80:	01402904 	movi	r5,164
81129c84:	01204574 	movhi	r4,33045
81129c88:	210fcf04 	addi	r4,r4,16188
81129c8c:	1129d440 	call	81129d44 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81129c90:	00a04574 	movhi	r2,33045
81129c94:	108c3904 	addi	r2,r2,12516
81129c98:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
81129c9c:	00a04574 	movhi	r2,33045
81129ca0:	108c5404 	addi	r2,r2,12624
81129ca4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81129ca8:	e03ffd05 	stb	zero,-12(fp)
81129cac:	00001106 	br	81129cf4 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
81129cb0:	e0bffe17 	ldw	r2,-8(fp)
81129cb4:	e0ffff17 	ldw	r3,-4(fp)
81129cb8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
81129cbc:	e0bffe17 	ldw	r2,-8(fp)
81129cc0:	00c00fc4 	movi	r3,63
81129cc4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81129cc8:	e0bffe17 	ldw	r2,-8(fp)
81129ccc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
81129cd0:	e0bffe17 	ldw	r2,-8(fp)
81129cd4:	10801b04 	addi	r2,r2,108
81129cd8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
81129cdc:	e0bfff17 	ldw	r2,-4(fp)
81129ce0:	10801b04 	addi	r2,r2,108
81129ce4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81129ce8:	e0bffd03 	ldbu	r2,-12(fp)
81129cec:	10800044 	addi	r2,r2,1
81129cf0:	e0bffd05 	stb	r2,-12(fp)
81129cf4:	e0bffd03 	ldbu	r2,-12(fp)
81129cf8:	10800870 	cmpltui	r2,r2,33
81129cfc:	103fec1e 	bne	r2,zero,81129cb0 <__reset+0xfb109cb0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
81129d00:	e0bffe17 	ldw	r2,-8(fp)
81129d04:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81129d08:	e0bffe17 	ldw	r2,-8(fp)
81129d0c:	00c00fc4 	movi	r3,63
81129d10:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81129d14:	e0bffe17 	ldw	r2,-8(fp)
81129d18:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
81129d1c:	d0207615 	stw	zero,-32296(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
81129d20:	00a04574 	movhi	r2,33045
81129d24:	108c3904 	addi	r2,r2,12516
81129d28:	d0a07b15 	stw	r2,-32276(gp)
}
81129d2c:	0001883a 	nop
81129d30:	e037883a 	mov	sp,fp
81129d34:	dfc00117 	ldw	ra,4(sp)
81129d38:	df000017 	ldw	fp,0(sp)
81129d3c:	dec00204 	addi	sp,sp,8
81129d40:	f800283a 	ret

81129d44 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81129d44:	defffd04 	addi	sp,sp,-12
81129d48:	de00012e 	bgeu	sp,et,81129d50 <OS_MemClr+0xc>
81129d4c:	003b68fa 	trap	3
81129d50:	df000215 	stw	fp,8(sp)
81129d54:	df000204 	addi	fp,sp,8
81129d58:	e13ffe15 	stw	r4,-8(fp)
81129d5c:	2805883a 	mov	r2,r5
81129d60:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81129d64:	00000706 	br	81129d84 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
81129d68:	e0bffe17 	ldw	r2,-8(fp)
81129d6c:	10c00044 	addi	r3,r2,1
81129d70:	e0fffe15 	stw	r3,-8(fp)
81129d74:	10000005 	stb	zero,0(r2)
        size--;
81129d78:	e0bfff0b 	ldhu	r2,-4(fp)
81129d7c:	10bfffc4 	addi	r2,r2,-1
81129d80:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81129d84:	e0bfff0b 	ldhu	r2,-4(fp)
81129d88:	103ff71e 	bne	r2,zero,81129d68 <__reset+0xfb109d68>
        *pdest++ = (INT8U)0;
        size--;
    }
}
81129d8c:	0001883a 	nop
81129d90:	e037883a 	mov	sp,fp
81129d94:	df000017 	ldw	fp,0(sp)
81129d98:	dec00104 	addi	sp,sp,4
81129d9c:	f800283a 	ret

81129da0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81129da0:	defffc04 	addi	sp,sp,-16
81129da4:	de00012e 	bgeu	sp,et,81129dac <OS_MemCopy+0xc>
81129da8:	003b68fa 	trap	3
81129dac:	df000315 	stw	fp,12(sp)
81129db0:	df000304 	addi	fp,sp,12
81129db4:	e13ffd15 	stw	r4,-12(fp)
81129db8:	e17ffe15 	stw	r5,-8(fp)
81129dbc:	3005883a 	mov	r2,r6
81129dc0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81129dc4:	00000b06 	br	81129df4 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
81129dc8:	e0bffd17 	ldw	r2,-12(fp)
81129dcc:	10c00044 	addi	r3,r2,1
81129dd0:	e0fffd15 	stw	r3,-12(fp)
81129dd4:	e0fffe17 	ldw	r3,-8(fp)
81129dd8:	19000044 	addi	r4,r3,1
81129ddc:	e13ffe15 	stw	r4,-8(fp)
81129de0:	18c00003 	ldbu	r3,0(r3)
81129de4:	10c00005 	stb	r3,0(r2)
        size--;
81129de8:	e0bfff0b 	ldhu	r2,-4(fp)
81129dec:	10bfffc4 	addi	r2,r2,-1
81129df0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
81129df4:	e0bfff0b 	ldhu	r2,-4(fp)
81129df8:	103ff31e 	bne	r2,zero,81129dc8 <__reset+0xfb109dc8>
        *pdest++ = *psrc++;
        size--;
    }
}
81129dfc:	0001883a 	nop
81129e00:	e037883a 	mov	sp,fp
81129e04:	df000017 	ldw	fp,0(sp)
81129e08:	dec00104 	addi	sp,sp,4
81129e0c:	f800283a 	ret

81129e10 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
81129e10:	defffb04 	addi	sp,sp,-20
81129e14:	de00012e 	bgeu	sp,et,81129e1c <OS_Sched+0xc>
81129e18:	003b68fa 	trap	3
81129e1c:	dfc00415 	stw	ra,16(sp)
81129e20:	df000315 	stw	fp,12(sp)
81129e24:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81129e28:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129e2c:	0005303a 	rdctl	r2,status
81129e30:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129e34:	e0ffff17 	ldw	r3,-4(fp)
81129e38:	00bfff84 	movi	r2,-2
81129e3c:	1884703a 	and	r2,r3,r2
81129e40:	1001703a 	wrctl	status,r2
  
  return context;
81129e44:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
81129e48:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
81129e4c:	d0a08303 	ldbu	r2,-32244(gp)
81129e50:	10803fcc 	andi	r2,r2,255
81129e54:	10001a1e 	bne	r2,zero,81129ec0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
81129e58:	d0a07103 	ldbu	r2,-32316(gp)
81129e5c:	10803fcc 	andi	r2,r2,255
81129e60:	1000171e 	bne	r2,zero,81129ec0 <OS_Sched+0xb0>
            OS_SchedNew();
81129e64:	1129ee80 	call	81129ee8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
81129e68:	d0e07583 	ldbu	r3,-32298(gp)
81129e6c:	d0a075c3 	ldbu	r2,-32297(gp)
81129e70:	18c03fcc 	andi	r3,r3,255
81129e74:	10803fcc 	andi	r2,r2,255
81129e78:	18801126 	beq	r3,r2,81129ec0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
81129e7c:	d0a07583 	ldbu	r2,-32298(gp)
81129e80:	10c03fcc 	andi	r3,r2,255
81129e84:	00a04574 	movhi	r2,33045
81129e88:	108fcf04 	addi	r2,r2,16188
81129e8c:	18c7883a 	add	r3,r3,r3
81129e90:	18c7883a 	add	r3,r3,r3
81129e94:	10c5883a 	add	r2,r2,r3
81129e98:	10800017 	ldw	r2,0(r2)
81129e9c:	d0a07e15 	stw	r2,-32264(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81129ea0:	d0a07e17 	ldw	r2,-32264(gp)
81129ea4:	10c00e17 	ldw	r3,56(r2)
81129ea8:	18c00044 	addi	r3,r3,1
81129eac:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
81129eb0:	d0a07817 	ldw	r2,-32288(gp)
81129eb4:	10800044 	addi	r2,r2,1
81129eb8:	d0a07815 	stw	r2,-32288(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
81129ebc:	113ae7c0 	call	8113ae7c <OSCtxSw>
81129ec0:	e0bffd17 	ldw	r2,-12(fp)
81129ec4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129ec8:	e0bffe17 	ldw	r2,-8(fp)
81129ecc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
81129ed0:	0001883a 	nop
81129ed4:	e037883a 	mov	sp,fp
81129ed8:	dfc00117 	ldw	ra,4(sp)
81129edc:	df000017 	ldw	fp,0(sp)
81129ee0:	dec00204 	addi	sp,sp,8
81129ee4:	f800283a 	ret

81129ee8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
81129ee8:	defffe04 	addi	sp,sp,-8
81129eec:	de00012e 	bgeu	sp,et,81129ef4 <OS_SchedNew+0xc>
81129ef0:	003b68fa 	trap	3
81129ef4:	df000115 	stw	fp,4(sp)
81129ef8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
81129efc:	d0a08003 	ldbu	r2,-32256(gp)
81129f00:	10c03fcc 	andi	r3,r2,255
81129f04:	00a04534 	movhi	r2,33044
81129f08:	10b9fa04 	addi	r2,r2,-6168
81129f0c:	10c5883a 	add	r2,r2,r3
81129f10:	10800003 	ldbu	r2,0(r2)
81129f14:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
81129f18:	e0bfff03 	ldbu	r2,-4(fp)
81129f1c:	100490fa 	slli	r2,r2,3
81129f20:	1009883a 	mov	r4,r2
81129f24:	e0ffff03 	ldbu	r3,-4(fp)
81129f28:	d0a08044 	addi	r2,gp,-32255
81129f2c:	1885883a 	add	r2,r3,r2
81129f30:	10800003 	ldbu	r2,0(r2)
81129f34:	10c03fcc 	andi	r3,r2,255
81129f38:	00a04534 	movhi	r2,33044
81129f3c:	10b9fa04 	addi	r2,r2,-6168
81129f40:	10c5883a 	add	r2,r2,r3
81129f44:	10800003 	ldbu	r2,0(r2)
81129f48:	2085883a 	add	r2,r4,r2
81129f4c:	d0a07585 	stb	r2,-32298(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81129f50:	0001883a 	nop
81129f54:	e037883a 	mov	sp,fp
81129f58:	df000017 	ldw	fp,0(sp)
81129f5c:	dec00104 	addi	sp,sp,4
81129f60:	f800283a 	ret

81129f64 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81129f64:	defffc04 	addi	sp,sp,-16
81129f68:	de00012e 	bgeu	sp,et,81129f70 <OS_StrCopy+0xc>
81129f6c:	003b68fa 	trap	3
81129f70:	df000315 	stw	fp,12(sp)
81129f74:	df000304 	addi	fp,sp,12
81129f78:	e13ffe15 	stw	r4,-8(fp)
81129f7c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81129f80:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81129f84:	00000b06 	br	81129fb4 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
81129f88:	e0bffe17 	ldw	r2,-8(fp)
81129f8c:	10c00044 	addi	r3,r2,1
81129f90:	e0fffe15 	stw	r3,-8(fp)
81129f94:	e0ffff17 	ldw	r3,-4(fp)
81129f98:	19000044 	addi	r4,r3,1
81129f9c:	e13fff15 	stw	r4,-4(fp)
81129fa0:	18c00003 	ldbu	r3,0(r3)
81129fa4:	10c00005 	stb	r3,0(r2)
        len++;
81129fa8:	e0bffd03 	ldbu	r2,-12(fp)
81129fac:	10800044 	addi	r2,r2,1
81129fb0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81129fb4:	e0bfff17 	ldw	r2,-4(fp)
81129fb8:	10800003 	ldbu	r2,0(r2)
81129fbc:	10803fcc 	andi	r2,r2,255
81129fc0:	103ff11e 	bne	r2,zero,81129f88 <__reset+0xfb109f88>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
81129fc4:	e0bffe17 	ldw	r2,-8(fp)
81129fc8:	10000005 	stb	zero,0(r2)
    return (len);
81129fcc:	e0bffd03 	ldbu	r2,-12(fp)
}
81129fd0:	e037883a 	mov	sp,fp
81129fd4:	df000017 	ldw	fp,0(sp)
81129fd8:	dec00104 	addi	sp,sp,4
81129fdc:	f800283a 	ret

81129fe0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
81129fe0:	defffd04 	addi	sp,sp,-12
81129fe4:	de00012e 	bgeu	sp,et,81129fec <OS_StrLen+0xc>
81129fe8:	003b68fa 	trap	3
81129fec:	df000215 	stw	fp,8(sp)
81129ff0:	df000204 	addi	fp,sp,8
81129ff4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
81129ff8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
81129ffc:	00000606 	br	8112a018 <OS_StrLen+0x38>
        psrc++;
8112a000:	e0bfff17 	ldw	r2,-4(fp)
8112a004:	10800044 	addi	r2,r2,1
8112a008:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112a00c:	e0bffe03 	ldbu	r2,-8(fp)
8112a010:	10800044 	addi	r2,r2,1
8112a014:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112a018:	e0bfff17 	ldw	r2,-4(fp)
8112a01c:	10800003 	ldbu	r2,0(r2)
8112a020:	10803fcc 	andi	r2,r2,255
8112a024:	103ff61e 	bne	r2,zero,8112a000 <__reset+0xfb10a000>
        psrc++;
        len++;
    }
    return (len);
8112a028:	e0bffe03 	ldbu	r2,-8(fp)
}
8112a02c:	e037883a 	mov	sp,fp
8112a030:	df000017 	ldw	fp,0(sp)
8112a034:	dec00104 	addi	sp,sp,4
8112a038:	f800283a 	ret

8112a03c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112a03c:	defffa04 	addi	sp,sp,-24
8112a040:	de00012e 	bgeu	sp,et,8112a048 <OS_TaskIdle+0xc>
8112a044:	003b68fa 	trap	3
8112a048:	dfc00515 	stw	ra,20(sp)
8112a04c:	df000415 	stw	fp,16(sp)
8112a050:	df000404 	addi	fp,sp,16
8112a054:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a058:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a05c:	0005303a 	rdctl	r2,status
8112a060:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a064:	e0fffd17 	ldw	r3,-12(fp)
8112a068:	00bfff84 	movi	r2,-2
8112a06c:	1884703a 	and	r2,r3,r2
8112a070:	1001703a 	wrctl	status,r2
  
  return context;
8112a074:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112a078:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112a07c:	d0a07417 	ldw	r2,-32304(gp)
8112a080:	10800044 	addi	r2,r2,1
8112a084:	d0a07415 	stw	r2,-32304(gp)
8112a088:	e0bffc17 	ldw	r2,-16(fp)
8112a08c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a090:	e0bffe17 	ldw	r2,-8(fp)
8112a094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112a098:	113b2100 	call	8113b210 <OSTaskIdleHook>
    }
8112a09c:	003fef06 	br	8112a05c <__reset+0xfb10a05c>

8112a0a0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112a0a0:	defff804 	addi	sp,sp,-32
8112a0a4:	de00012e 	bgeu	sp,et,8112a0ac <OS_TaskStat+0xc>
8112a0a8:	003b68fa 	trap	3
8112a0ac:	dfc00715 	stw	ra,28(sp)
8112a0b0:	df000615 	stw	fp,24(sp)
8112a0b4:	dc400515 	stw	r17,20(sp)
8112a0b8:	dc000415 	stw	r16,16(sp)
8112a0bc:	df000604 	addi	fp,sp,24
8112a0c0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a0c4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112a0c8:	00000206 	br	8112a0d4 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112a0cc:	01003204 	movi	r4,200
8112a0d0:	1130b4c0 	call	81130b4c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112a0d4:	d0a08903 	ldbu	r2,-32220(gp)
8112a0d8:	10803fcc 	andi	r2,r2,255
8112a0dc:	103ffb26 	beq	r2,zero,8112a0cc <__reset+0xfb10a0cc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112a0e0:	d0e07a17 	ldw	r3,-32280(gp)
8112a0e4:	00947b34 	movhi	r2,20972
8112a0e8:	10a147c4 	addi	r2,r2,-31457
8112a0ec:	1888383a 	mulxuu	r4,r3,r2
8112a0f0:	1885383a 	mul	r2,r3,r2
8112a0f4:	1021883a 	mov	r16,r2
8112a0f8:	2023883a 	mov	r17,r4
8112a0fc:	8804d17a 	srli	r2,r17,5
8112a100:	d0a07a15 	stw	r2,-32280(gp)
    if (OSIdleCtrMax == 0L) {
8112a104:	d0a07a17 	ldw	r2,-32280(gp)
8112a108:	1000031e 	bne	r2,zero,8112a118 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112a10c:	d0207c05 	stb	zero,-32272(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112a110:	01003fc4 	movi	r4,255
8112a114:	11307bc0 	call	811307bc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a118:	0005303a 	rdctl	r2,status
8112a11c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a120:	e0fffb17 	ldw	r3,-20(fp)
8112a124:	00bfff84 	movi	r2,-2
8112a128:	1884703a 	and	r2,r3,r2
8112a12c:	1001703a 	wrctl	status,r2
  
  return context;
8112a130:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112a134:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112a138:	d0a07417 	ldw	r2,-32304(gp)
8112a13c:	d0a08a15 	stw	r2,-32216(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112a140:	d0207415 	stw	zero,-32304(gp)
8112a144:	e0bffa17 	ldw	r2,-24(fp)
8112a148:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a14c:	e0bffc17 	ldw	r2,-16(fp)
8112a150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112a154:	d0e08a17 	ldw	r3,-32216(gp)
8112a158:	d0a07a17 	ldw	r2,-32280(gp)
8112a15c:	1885203a 	divu	r2,r3,r2
8112a160:	1007883a 	mov	r3,r2
8112a164:	00801904 	movi	r2,100
8112a168:	10c5c83a 	sub	r2,r2,r3
8112a16c:	d0a07c05 	stb	r2,-32272(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112a170:	113b1400 	call	8113b140 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112a174:	112a1840 	call	8112a184 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112a178:	01001904 	movi	r4,100
8112a17c:	1130b4c0 	call	81130b4c <OSTimeDly>
    }
8112a180:	003fe506 	br	8112a118 <__reset+0xfb10a118>

8112a184 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112a184:	defffa04 	addi	sp,sp,-24
8112a188:	de00012e 	bgeu	sp,et,8112a190 <OS_TaskStatStkChk+0xc>
8112a18c:	003b68fa 	trap	3
8112a190:	dfc00515 	stw	ra,20(sp)
8112a194:	df000415 	stw	fp,16(sp)
8112a198:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112a19c:	e03ffc05 	stb	zero,-16(fp)
8112a1a0:	00002406 	br	8112a234 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112a1a4:	e0bffc03 	ldbu	r2,-16(fp)
8112a1a8:	e0fffe04 	addi	r3,fp,-8
8112a1ac:	180b883a 	mov	r5,r3
8112a1b0:	1009883a 	mov	r4,r2
8112a1b4:	11305f40 	call	811305f4 <OSTaskStkChk>
8112a1b8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112a1bc:	e0bffc43 	ldbu	r2,-15(fp)
8112a1c0:	1000191e 	bne	r2,zero,8112a228 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112a1c4:	e0fffc03 	ldbu	r3,-16(fp)
8112a1c8:	00a04574 	movhi	r2,33045
8112a1cc:	108fcf04 	addi	r2,r2,16188
8112a1d0:	18c7883a 	add	r3,r3,r3
8112a1d4:	18c7883a 	add	r3,r3,r3
8112a1d8:	10c5883a 	add	r2,r2,r3
8112a1dc:	10800017 	ldw	r2,0(r2)
8112a1e0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112a1e4:	e0bffd17 	ldw	r2,-12(fp)
8112a1e8:	10000f26 	beq	r2,zero,8112a228 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112a1ec:	e0bffd17 	ldw	r2,-12(fp)
8112a1f0:	10800060 	cmpeqi	r2,r2,1
8112a1f4:	10000c1e 	bne	r2,zero,8112a228 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112a1f8:	e0bffd17 	ldw	r2,-12(fp)
8112a1fc:	10c00217 	ldw	r3,8(r2)
8112a200:	e0bffd17 	ldw	r2,-12(fp)
8112a204:	10800317 	ldw	r2,12(r2)
8112a208:	1085883a 	add	r2,r2,r2
8112a20c:	1085883a 	add	r2,r2,r2
8112a210:	1887883a 	add	r3,r3,r2
8112a214:	e0bffd17 	ldw	r2,-12(fp)
8112a218:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112a21c:	e0ffff17 	ldw	r3,-4(fp)
8112a220:	e0bffd17 	ldw	r2,-12(fp)
8112a224:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112a228:	e0bffc03 	ldbu	r2,-16(fp)
8112a22c:	10800044 	addi	r2,r2,1
8112a230:	e0bffc05 	stb	r2,-16(fp)
8112a234:	e0bffc03 	ldbu	r2,-16(fp)
8112a238:	10800a70 	cmpltui	r2,r2,41
8112a23c:	103fd91e 	bne	r2,zero,8112a1a4 <__reset+0xfb10a1a4>
#endif
                }
            }
        }
    }
}
8112a240:	0001883a 	nop
8112a244:	e037883a 	mov	sp,fp
8112a248:	dfc00117 	ldw	ra,4(sp)
8112a24c:	df000017 	ldw	fp,0(sp)
8112a250:	dec00204 	addi	sp,sp,8
8112a254:	f800283a 	ret

8112a258 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112a258:	defff204 	addi	sp,sp,-56
8112a25c:	de00012e 	bgeu	sp,et,8112a264 <OS_TCBInit+0xc>
8112a260:	003b68fa 	trap	3
8112a264:	dfc00d15 	stw	ra,52(sp)
8112a268:	df000c15 	stw	fp,48(sp)
8112a26c:	df000c04 	addi	fp,sp,48
8112a270:	e17ffc15 	stw	r5,-16(fp)
8112a274:	e1bffd15 	stw	r6,-12(fp)
8112a278:	3807883a 	mov	r3,r7
8112a27c:	e0800417 	ldw	r2,16(fp)
8112a280:	e13ffb05 	stb	r4,-20(fp)
8112a284:	e0fffe0d 	sth	r3,-8(fp)
8112a288:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a28c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a290:	0005303a 	rdctl	r2,status
8112a294:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a298:	e0fffa17 	ldw	r3,-24(fp)
8112a29c:	00bfff84 	movi	r2,-2
8112a2a0:	1884703a 	and	r2,r3,r2
8112a2a4:	1001703a 	wrctl	status,r2
  
  return context;
8112a2a8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112a2ac:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112a2b0:	d0a07b17 	ldw	r2,-32276(gp)
8112a2b4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112a2b8:	e0bff617 	ldw	r2,-40(fp)
8112a2bc:	10009326 	beq	r2,zero,8112a50c <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112a2c0:	e0bff617 	ldw	r2,-40(fp)
8112a2c4:	10800517 	ldw	r2,20(r2)
8112a2c8:	d0a07b15 	stw	r2,-32276(gp)
8112a2cc:	e0bff417 	ldw	r2,-48(fp)
8112a2d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a2d4:	e0bff817 	ldw	r2,-32(fp)
8112a2d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112a2dc:	e0bff617 	ldw	r2,-40(fp)
8112a2e0:	e0fffc17 	ldw	r3,-16(fp)
8112a2e4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112a2e8:	e0bff617 	ldw	r2,-40(fp)
8112a2ec:	e0fffb03 	ldbu	r3,-20(fp)
8112a2f0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112a2f4:	e0bff617 	ldw	r2,-40(fp)
8112a2f8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112a2fc:	e0bff617 	ldw	r2,-40(fp)
8112a300:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112a304:	e0bff617 	ldw	r2,-40(fp)
8112a308:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112a30c:	e0bff617 	ldw	r2,-40(fp)
8112a310:	e0c00317 	ldw	r3,12(fp)
8112a314:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112a318:	e0bff617 	ldw	r2,-40(fp)
8112a31c:	e0c00217 	ldw	r3,8(fp)
8112a320:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112a324:	e0bff617 	ldw	r2,-40(fp)
8112a328:	e0fffd17 	ldw	r3,-12(fp)
8112a32c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112a330:	e0bff617 	ldw	r2,-40(fp)
8112a334:	e0ffff0b 	ldhu	r3,-4(fp)
8112a338:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112a33c:	e0bff617 	ldw	r2,-40(fp)
8112a340:	e0fffe0b 	ldhu	r3,-8(fp)
8112a344:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112a348:	e0bff617 	ldw	r2,-40(fp)
8112a34c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112a350:	e0bffb03 	ldbu	r2,-20(fp)
8112a354:	1004d0fa 	srli	r2,r2,3
8112a358:	1007883a 	mov	r3,r2
8112a35c:	e0bff617 	ldw	r2,-40(fp)
8112a360:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112a364:	e0bffb03 	ldbu	r2,-20(fp)
8112a368:	108001cc 	andi	r2,r2,7
8112a36c:	1007883a 	mov	r3,r2
8112a370:	e0bff617 	ldw	r2,-40(fp)
8112a374:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112a378:	e0bff617 	ldw	r2,-40(fp)
8112a37c:	10800d03 	ldbu	r2,52(r2)
8112a380:	10803fcc 	andi	r2,r2,255
8112a384:	00c00044 	movi	r3,1
8112a388:	1884983a 	sll	r2,r3,r2
8112a38c:	1007883a 	mov	r3,r2
8112a390:	e0bff617 	ldw	r2,-40(fp)
8112a394:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112a398:	e0bff617 	ldw	r2,-40(fp)
8112a39c:	10800cc3 	ldbu	r2,51(r2)
8112a3a0:	10803fcc 	andi	r2,r2,255
8112a3a4:	00c00044 	movi	r3,1
8112a3a8:	1884983a 	sll	r2,r3,r2
8112a3ac:	1007883a 	mov	r3,r2
8112a3b0:	e0bff617 	ldw	r2,-40(fp)
8112a3b4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112a3b8:	e0bff617 	ldw	r2,-40(fp)
8112a3bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112a3c0:	e0bff617 	ldw	r2,-40(fp)
8112a3c4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112a3c8:	e0bff617 	ldw	r2,-40(fp)
8112a3cc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112a3d0:	e0bff617 	ldw	r2,-40(fp)
8112a3d4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112a3d8:	e0bff617 	ldw	r2,-40(fp)
8112a3dc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112a3e0:	e0bff617 	ldw	r2,-40(fp)
8112a3e4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112a3e8:	e0bff617 	ldw	r2,-40(fp)
8112a3ec:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112a3f0:	e0bff617 	ldw	r2,-40(fp)
8112a3f4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112a3f8:	e0bff617 	ldw	r2,-40(fp)
8112a3fc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112a400:	e0bff617 	ldw	r2,-40(fp)
8112a404:	00c00fc4 	movi	r3,63
8112a408:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112a40c:	e0bff617 	ldw	r2,-40(fp)
8112a410:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112a414:	e13ff617 	ldw	r4,-40(fp)
8112a418:	113b2380 	call	8113b238 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112a41c:	e13ff617 	ldw	r4,-40(fp)
8112a420:	113b0c00 	call	8113b0c0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a424:	0005303a 	rdctl	r2,status
8112a428:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a42c:	e0fff517 	ldw	r3,-44(fp)
8112a430:	00bfff84 	movi	r2,-2
8112a434:	1884703a 	and	r2,r3,r2
8112a438:	1001703a 	wrctl	status,r2
  
  return context;
8112a43c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112a440:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112a444:	e0fffb03 	ldbu	r3,-20(fp)
8112a448:	00a04574 	movhi	r2,33045
8112a44c:	108fcf04 	addi	r2,r2,16188
8112a450:	18c7883a 	add	r3,r3,r3
8112a454:	18c7883a 	add	r3,r3,r3
8112a458:	10c5883a 	add	r2,r2,r3
8112a45c:	e0fff617 	ldw	r3,-40(fp)
8112a460:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112a464:	d0e07617 	ldw	r3,-32296(gp)
8112a468:	e0bff617 	ldw	r2,-40(fp)
8112a46c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112a470:	e0bff617 	ldw	r2,-40(fp)
8112a474:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112a478:	d0a07617 	ldw	r2,-32296(gp)
8112a47c:	10000326 	beq	r2,zero,8112a48c <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112a480:	d0a07617 	ldw	r2,-32296(gp)
8112a484:	e0fff617 	ldw	r3,-40(fp)
8112a488:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112a48c:	e0bff617 	ldw	r2,-40(fp)
8112a490:	d0a07615 	stw	r2,-32296(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112a494:	e0bff617 	ldw	r2,-40(fp)
8112a498:	10c00d83 	ldbu	r3,54(r2)
8112a49c:	d0a08003 	ldbu	r2,-32256(gp)
8112a4a0:	1884b03a 	or	r2,r3,r2
8112a4a4:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a4a8:	e0bff617 	ldw	r2,-40(fp)
8112a4ac:	10800d03 	ldbu	r2,52(r2)
8112a4b0:	10c03fcc 	andi	r3,r2,255
8112a4b4:	e0bff617 	ldw	r2,-40(fp)
8112a4b8:	10800d03 	ldbu	r2,52(r2)
8112a4bc:	11003fcc 	andi	r4,r2,255
8112a4c0:	d0a08044 	addi	r2,gp,-32255
8112a4c4:	2085883a 	add	r2,r4,r2
8112a4c8:	11000003 	ldbu	r4,0(r2)
8112a4cc:	e0bff617 	ldw	r2,-40(fp)
8112a4d0:	10800d43 	ldbu	r2,53(r2)
8112a4d4:	2084b03a 	or	r2,r4,r2
8112a4d8:	1009883a 	mov	r4,r2
8112a4dc:	d0a08044 	addi	r2,gp,-32255
8112a4e0:	1885883a 	add	r2,r3,r2
8112a4e4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112a4e8:	d0a07c43 	ldbu	r2,-32271(gp)
8112a4ec:	10800044 	addi	r2,r2,1
8112a4f0:	d0a07c45 	stb	r2,-32271(gp)
8112a4f4:	e0bff417 	ldw	r2,-48(fp)
8112a4f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a4fc:	e0bff717 	ldw	r2,-36(fp)
8112a500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112a504:	0005883a 	mov	r2,zero
8112a508:	00000506 	br	8112a520 <OS_TCBInit+0x2c8>
8112a50c:	e0bff417 	ldw	r2,-48(fp)
8112a510:	e0bff915 	stw	r2,-28(fp)
8112a514:	e0bff917 	ldw	r2,-28(fp)
8112a518:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112a51c:	00801084 	movi	r2,66
}
8112a520:	e037883a 	mov	sp,fp
8112a524:	dfc00117 	ldw	ra,4(sp)
8112a528:	df000017 	ldw	fp,0(sp)
8112a52c:	dec00204 	addi	sp,sp,8
8112a530:	f800283a 	ret

8112a534 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112a534:	defffe04 	addi	sp,sp,-8
8112a538:	de00012e 	bgeu	sp,et,8112a540 <OSDebugInit+0xc>
8112a53c:	003b68fa 	trap	3
8112a540:	df000115 	stw	fp,4(sp)
8112a544:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112a548:	d0a01704 	addi	r2,gp,-32676
8112a54c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112a550:	d0a01804 	addi	r2,gp,-32672
8112a554:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112a558:	d0a01984 	addi	r2,gp,-32666
8112a55c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112a560:	d0a01a04 	addi	r2,gp,-32664
8112a564:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112a568:	d0a01904 	addi	r2,gp,-32668
8112a56c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112a570:	d0a01a84 	addi	r2,gp,-32662
8112a574:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112a578:	d0a01b04 	addi	r2,gp,-32660
8112a57c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112a580:	d0a01b84 	addi	r2,gp,-32658
8112a584:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112a588:	d0a01c04 	addi	r2,gp,-32656
8112a58c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112a590:	d0a01c84 	addi	r2,gp,-32654
8112a594:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112a598:	d0a01d04 	addi	r2,gp,-32652
8112a59c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112a5a0:	d0a01d84 	addi	r2,gp,-32650
8112a5a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112a5a8:	d0a01e04 	addi	r2,gp,-32648
8112a5ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112a5b0:	d0a01e84 	addi	r2,gp,-32646
8112a5b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112a5b8:	d0a01f04 	addi	r2,gp,-32644
8112a5bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112a5c0:	d0a01f84 	addi	r2,gp,-32642
8112a5c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112a5c8:	d0a02004 	addi	r2,gp,-32640
8112a5cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112a5d0:	d0a02084 	addi	r2,gp,-32638
8112a5d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112a5d8:	d0a02104 	addi	r2,gp,-32636
8112a5dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112a5e0:	d0a02184 	addi	r2,gp,-32634
8112a5e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112a5e8:	d0a02204 	addi	r2,gp,-32632
8112a5ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112a5f0:	d0a02284 	addi	r2,gp,-32630
8112a5f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112a5f8:	d0a02304 	addi	r2,gp,-32628
8112a5fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112a600:	d0a02384 	addi	r2,gp,-32626
8112a604:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112a608:	d0a02404 	addi	r2,gp,-32624
8112a60c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112a610:	d0a02484 	addi	r2,gp,-32622
8112a614:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112a618:	d0a02504 	addi	r2,gp,-32620
8112a61c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112a620:	d0a02584 	addi	r2,gp,-32618
8112a624:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112a628:	d0a02604 	addi	r2,gp,-32616
8112a62c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112a630:	d0a02684 	addi	r2,gp,-32614
8112a634:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112a638:	d0a02704 	addi	r2,gp,-32612
8112a63c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112a640:	d0a02784 	addi	r2,gp,-32610
8112a644:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112a648:	d0a02804 	addi	r2,gp,-32608
8112a64c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112a650:	d0a02884 	addi	r2,gp,-32606
8112a654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112a658:	d0a02904 	addi	r2,gp,-32604
8112a65c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112a660:	d0a02984 	addi	r2,gp,-32602
8112a664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112a668:	d0a02a04 	addi	r2,gp,-32600
8112a66c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112a670:	d0a02a84 	addi	r2,gp,-32598
8112a674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112a678:	d0a02b04 	addi	r2,gp,-32596
8112a67c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112a680:	d0a02b84 	addi	r2,gp,-32594
8112a684:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112a688:	d0a02c04 	addi	r2,gp,-32592
8112a68c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112a690:	d0a02c84 	addi	r2,gp,-32590
8112a694:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112a698:	d0a02d04 	addi	r2,gp,-32588
8112a69c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112a6a0:	d0a02d84 	addi	r2,gp,-32586
8112a6a4:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112a6a8:	00a04574 	movhi	r2,33045
8112a6ac:	10bf4104 	addi	r2,r2,-764
8112a6b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112a6b4:	00a04574 	movhi	r2,33045
8112a6b8:	10be6104 	addi	r2,r2,-1660
8112a6bc:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112a6c0:	d0a02e84 	addi	r2,gp,-32582
8112a6c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112a6c8:	d0a02f04 	addi	r2,gp,-32580
8112a6cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112a6d0:	d0a02f84 	addi	r2,gp,-32578
8112a6d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112a6d8:	d0a03004 	addi	r2,gp,-32576
8112a6dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112a6e0:	d0a03084 	addi	r2,gp,-32574
8112a6e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112a6e8:	d0a03104 	addi	r2,gp,-32572
8112a6ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112a6f0:	d0a03184 	addi	r2,gp,-32570
8112a6f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112a6f8:	d0a03204 	addi	r2,gp,-32568
8112a6fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112a700:	d0a03284 	addi	r2,gp,-32566
8112a704:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112a708:	d0a02e04 	addi	r2,gp,-32584
8112a70c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112a710:	d0a03304 	addi	r2,gp,-32564
8112a714:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112a718:	0001883a 	nop
8112a71c:	e037883a 	mov	sp,fp
8112a720:	df000017 	ldw	fp,0(sp)
8112a724:	dec00104 	addi	sp,sp,4
8112a728:	f800283a 	ret

8112a72c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112a72c:	defff204 	addi	sp,sp,-56
8112a730:	de00012e 	bgeu	sp,et,8112a738 <OSFlagAccept+0xc>
8112a734:	003b68fa 	trap	3
8112a738:	df000d15 	stw	fp,52(sp)
8112a73c:	df000d04 	addi	fp,sp,52
8112a740:	e13ffc15 	stw	r4,-16(fp)
8112a744:	2807883a 	mov	r3,r5
8112a748:	3005883a 	mov	r2,r6
8112a74c:	e1ffff15 	stw	r7,-4(fp)
8112a750:	e0fffd0d 	sth	r3,-12(fp)
8112a754:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112a758:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112a75c:	e0bfff17 	ldw	r2,-4(fp)
8112a760:	1000021e 	bne	r2,zero,8112a76c <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112a764:	0005883a 	mov	r2,zero
8112a768:	0000b006 	br	8112aa2c <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112a76c:	e0bffc17 	ldw	r2,-16(fp)
8112a770:	1000051e 	bne	r2,zero,8112a788 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112a774:	e0bfff17 	ldw	r2,-4(fp)
8112a778:	00c01b84 	movi	r3,110
8112a77c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112a780:	0005883a 	mov	r2,zero
8112a784:	0000a906 	br	8112aa2c <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112a788:	e0bffc17 	ldw	r2,-16(fp)
8112a78c:	10800003 	ldbu	r2,0(r2)
8112a790:	10803fcc 	andi	r2,r2,255
8112a794:	10800160 	cmpeqi	r2,r2,5
8112a798:	1000051e 	bne	r2,zero,8112a7b0 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112a79c:	e0bfff17 	ldw	r2,-4(fp)
8112a7a0:	00c00044 	movi	r3,1
8112a7a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112a7a8:	0005883a 	mov	r2,zero
8112a7ac:	00009f06 	br	8112aa2c <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112a7b0:	e0fffe03 	ldbu	r3,-8(fp)
8112a7b4:	00bfe004 	movi	r2,-128
8112a7b8:	1884703a 	and	r2,r3,r2
8112a7bc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112a7c0:	e0bff503 	ldbu	r2,-44(fp)
8112a7c4:	10000626 	beq	r2,zero,8112a7e0 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112a7c8:	e0bffe03 	ldbu	r2,-8(fp)
8112a7cc:	10801fcc 	andi	r2,r2,127
8112a7d0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112a7d4:	00800044 	movi	r2,1
8112a7d8:	e0bff385 	stb	r2,-50(fp)
8112a7dc:	00000106 	br	8112a7e4 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112a7e0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112a7e4:	e0bfff17 	ldw	r2,-4(fp)
8112a7e8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a7ec:	0005303a 	rdctl	r2,status
8112a7f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a7f4:	e0fffb17 	ldw	r3,-20(fp)
8112a7f8:	00bfff84 	movi	r2,-2
8112a7fc:	1884703a 	and	r2,r3,r2
8112a800:	1001703a 	wrctl	status,r2
  
  return context;
8112a804:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112a808:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112a80c:	e0bffe03 	ldbu	r2,-8(fp)
8112a810:	10c00060 	cmpeqi	r3,r2,1
8112a814:	18005f1e 	bne	r3,zero,8112a994 <OSFlagAccept+0x268>
8112a818:	10c00088 	cmpgei	r3,r2,2
8112a81c:	1800021e 	bne	r3,zero,8112a828 <OSFlagAccept+0xfc>
8112a820:	10003f26 	beq	r2,zero,8112a920 <OSFlagAccept+0x1f4>
8112a824:	00007706 	br	8112aa04 <OSFlagAccept+0x2d8>
8112a828:	10c000a0 	cmpeqi	r3,r2,2
8112a82c:	1800031e 	bne	r3,zero,8112a83c <OSFlagAccept+0x110>
8112a830:	108000e0 	cmpeqi	r2,r2,3
8112a834:	10001e1e 	bne	r2,zero,8112a8b0 <OSFlagAccept+0x184>
8112a838:	00007206 	br	8112aa04 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112a83c:	e0bffc17 	ldw	r2,-16(fp)
8112a840:	10c0020b 	ldhu	r3,8(r2)
8112a844:	e0bffd0b 	ldhu	r2,-12(fp)
8112a848:	1884703a 	and	r2,r3,r2
8112a84c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112a850:	e0fff30b 	ldhu	r3,-52(fp)
8112a854:	e0bffd0b 	ldhu	r2,-12(fp)
8112a858:	18800d1e 	bne	r3,r2,8112a890 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112a85c:	e0bff383 	ldbu	r2,-50(fp)
8112a860:	10800058 	cmpnei	r2,r2,1
8112a864:	10000d1e 	bne	r2,zero,8112a89c <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112a868:	e0bffc17 	ldw	r2,-16(fp)
8112a86c:	1080020b 	ldhu	r2,8(r2)
8112a870:	1007883a 	mov	r3,r2
8112a874:	e0bff30b 	ldhu	r2,-52(fp)
8112a878:	0084303a 	nor	r2,zero,r2
8112a87c:	1884703a 	and	r2,r3,r2
8112a880:	1007883a 	mov	r3,r2
8112a884:	e0bffc17 	ldw	r2,-16(fp)
8112a888:	10c0020d 	sth	r3,8(r2)
8112a88c:	00000306 	br	8112a89c <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112a890:	e0bfff17 	ldw	r2,-4(fp)
8112a894:	00c01c04 	movi	r3,112
8112a898:	10c00005 	stb	r3,0(r2)
8112a89c:	e0bff417 	ldw	r2,-48(fp)
8112a8a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a8a4:	e0bff617 	ldw	r2,-40(fp)
8112a8a8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112a8ac:	00005e06 	br	8112aa28 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112a8b0:	e0bffc17 	ldw	r2,-16(fp)
8112a8b4:	10c0020b 	ldhu	r3,8(r2)
8112a8b8:	e0bffd0b 	ldhu	r2,-12(fp)
8112a8bc:	1884703a 	and	r2,r3,r2
8112a8c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112a8c4:	e0bff30b 	ldhu	r2,-52(fp)
8112a8c8:	10000d26 	beq	r2,zero,8112a900 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112a8cc:	e0bff383 	ldbu	r2,-50(fp)
8112a8d0:	10800058 	cmpnei	r2,r2,1
8112a8d4:	10000d1e 	bne	r2,zero,8112a90c <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112a8d8:	e0bffc17 	ldw	r2,-16(fp)
8112a8dc:	1080020b 	ldhu	r2,8(r2)
8112a8e0:	1007883a 	mov	r3,r2
8112a8e4:	e0bff30b 	ldhu	r2,-52(fp)
8112a8e8:	0084303a 	nor	r2,zero,r2
8112a8ec:	1884703a 	and	r2,r3,r2
8112a8f0:	1007883a 	mov	r3,r2
8112a8f4:	e0bffc17 	ldw	r2,-16(fp)
8112a8f8:	10c0020d 	sth	r3,8(r2)
8112a8fc:	00000306 	br	8112a90c <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112a900:	e0bfff17 	ldw	r2,-4(fp)
8112a904:	00c01c04 	movi	r3,112
8112a908:	10c00005 	stb	r3,0(r2)
8112a90c:	e0bff417 	ldw	r2,-48(fp)
8112a910:	e0bff715 	stw	r2,-36(fp)
8112a914:	e0bff717 	ldw	r2,-36(fp)
8112a918:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112a91c:	00004206 	br	8112aa28 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112a920:	e0bffc17 	ldw	r2,-16(fp)
8112a924:	1080020b 	ldhu	r2,8(r2)
8112a928:	0084303a 	nor	r2,zero,r2
8112a92c:	1007883a 	mov	r3,r2
8112a930:	e0bffd0b 	ldhu	r2,-12(fp)
8112a934:	1884703a 	and	r2,r3,r2
8112a938:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112a93c:	e0fff30b 	ldhu	r3,-52(fp)
8112a940:	e0bffd0b 	ldhu	r2,-12(fp)
8112a944:	18800b1e 	bne	r3,r2,8112a974 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112a948:	e0bff383 	ldbu	r2,-50(fp)
8112a94c:	10800058 	cmpnei	r2,r2,1
8112a950:	10000b1e 	bne	r2,zero,8112a980 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112a954:	e0bffc17 	ldw	r2,-16(fp)
8112a958:	10c0020b 	ldhu	r3,8(r2)
8112a95c:	e0bff30b 	ldhu	r2,-52(fp)
8112a960:	1884b03a 	or	r2,r3,r2
8112a964:	1007883a 	mov	r3,r2
8112a968:	e0bffc17 	ldw	r2,-16(fp)
8112a96c:	10c0020d 	sth	r3,8(r2)
8112a970:	00000306 	br	8112a980 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112a974:	e0bfff17 	ldw	r2,-4(fp)
8112a978:	00c01c04 	movi	r3,112
8112a97c:	10c00005 	stb	r3,0(r2)
8112a980:	e0bff417 	ldw	r2,-48(fp)
8112a984:	e0bff815 	stw	r2,-32(fp)
8112a988:	e0bff817 	ldw	r2,-32(fp)
8112a98c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112a990:	00002506 	br	8112aa28 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112a994:	e0bffc17 	ldw	r2,-16(fp)
8112a998:	1080020b 	ldhu	r2,8(r2)
8112a99c:	0084303a 	nor	r2,zero,r2
8112a9a0:	1007883a 	mov	r3,r2
8112a9a4:	e0bffd0b 	ldhu	r2,-12(fp)
8112a9a8:	1884703a 	and	r2,r3,r2
8112a9ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112a9b0:	e0bff30b 	ldhu	r2,-52(fp)
8112a9b4:	10000b26 	beq	r2,zero,8112a9e4 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112a9b8:	e0bff383 	ldbu	r2,-50(fp)
8112a9bc:	10800058 	cmpnei	r2,r2,1
8112a9c0:	10000b1e 	bne	r2,zero,8112a9f0 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112a9c4:	e0bffc17 	ldw	r2,-16(fp)
8112a9c8:	10c0020b 	ldhu	r3,8(r2)
8112a9cc:	e0bff30b 	ldhu	r2,-52(fp)
8112a9d0:	1884b03a 	or	r2,r3,r2
8112a9d4:	1007883a 	mov	r3,r2
8112a9d8:	e0bffc17 	ldw	r2,-16(fp)
8112a9dc:	10c0020d 	sth	r3,8(r2)
8112a9e0:	00000306 	br	8112a9f0 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112a9e4:	e0bfff17 	ldw	r2,-4(fp)
8112a9e8:	00c01c04 	movi	r3,112
8112a9ec:	10c00005 	stb	r3,0(r2)
8112a9f0:	e0bff417 	ldw	r2,-48(fp)
8112a9f4:	e0bff915 	stw	r2,-28(fp)
8112a9f8:	e0bff917 	ldw	r2,-28(fp)
8112a9fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112aa00:	00000906 	br	8112aa28 <OSFlagAccept+0x2fc>
8112aa04:	e0bff417 	ldw	r2,-48(fp)
8112aa08:	e0bffa15 	stw	r2,-24(fp)
8112aa0c:	e0bffa17 	ldw	r2,-24(fp)
8112aa10:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112aa14:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112aa18:	e0bfff17 	ldw	r2,-4(fp)
8112aa1c:	00c01bc4 	movi	r3,111
8112aa20:	10c00005 	stb	r3,0(r2)
             break;
8112aa24:	0001883a 	nop
    }
    return (flags_rdy);
8112aa28:	e0bff30b 	ldhu	r2,-52(fp)
}
8112aa2c:	e037883a 	mov	sp,fp
8112aa30:	df000017 	ldw	fp,0(sp)
8112aa34:	dec00104 	addi	sp,sp,4
8112aa38:	f800283a 	ret

8112aa3c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112aa3c:	defff804 	addi	sp,sp,-32
8112aa40:	de00012e 	bgeu	sp,et,8112aa48 <OSFlagCreate+0xc>
8112aa44:	003b68fa 	trap	3
8112aa48:	df000715 	stw	fp,28(sp)
8112aa4c:	df000704 	addi	fp,sp,28
8112aa50:	2005883a 	mov	r2,r4
8112aa54:	e17fff15 	stw	r5,-4(fp)
8112aa58:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112aa5c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112aa60:	e0bfff17 	ldw	r2,-4(fp)
8112aa64:	1000021e 	bne	r2,zero,8112aa70 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112aa68:	0005883a 	mov	r2,zero
8112aa6c:	00003306 	br	8112ab3c <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112aa70:	d0a08303 	ldbu	r2,-32244(gp)
8112aa74:	10803fcc 	andi	r2,r2,255
8112aa78:	10000526 	beq	r2,zero,8112aa90 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112aa7c:	e0bfff17 	ldw	r2,-4(fp)
8112aa80:	00c00404 	movi	r3,16
8112aa84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112aa88:	0005883a 	mov	r2,zero
8112aa8c:	00002b06 	br	8112ab3c <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aa90:	0005303a 	rdctl	r2,status
8112aa94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aa98:	e0fffd17 	ldw	r3,-12(fp)
8112aa9c:	00bfff84 	movi	r2,-2
8112aaa0:	1884703a 	and	r2,r3,r2
8112aaa4:	1001703a 	wrctl	status,r2
  
  return context;
8112aaa8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112aaac:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112aab0:	d0a08817 	ldw	r2,-32224(gp)
8112aab4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112aab8:	e0bffb17 	ldw	r2,-20(fp)
8112aabc:	10001726 	beq	r2,zero,8112ab1c <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112aac0:	d0a08817 	ldw	r2,-32224(gp)
8112aac4:	10800117 	ldw	r2,4(r2)
8112aac8:	d0a08815 	stw	r2,-32224(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112aacc:	e0bffb17 	ldw	r2,-20(fp)
8112aad0:	00c00144 	movi	r3,5
8112aad4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112aad8:	e0bffb17 	ldw	r2,-20(fp)
8112aadc:	e0fffe0b 	ldhu	r3,-8(fp)
8112aae0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112aae4:	e0bffb17 	ldw	r2,-20(fp)
8112aae8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112aaec:	e0bffb17 	ldw	r2,-20(fp)
8112aaf0:	00c00fc4 	movi	r3,63
8112aaf4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112aaf8:	e0bffb17 	ldw	r2,-20(fp)
8112aafc:	100002c5 	stb	zero,11(r2)
8112ab00:	e0bff917 	ldw	r2,-28(fp)
8112ab04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ab08:	e0bffa17 	ldw	r2,-24(fp)
8112ab0c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112ab10:	e0bfff17 	ldw	r2,-4(fp)
8112ab14:	10000005 	stb	zero,0(r2)
8112ab18:	00000706 	br	8112ab38 <OSFlagCreate+0xfc>
8112ab1c:	e0bff917 	ldw	r2,-28(fp)
8112ab20:	e0bffc15 	stw	r2,-16(fp)
8112ab24:	e0bffc17 	ldw	r2,-16(fp)
8112ab28:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112ab2c:	e0bfff17 	ldw	r2,-4(fp)
8112ab30:	00c01c84 	movi	r3,114
8112ab34:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112ab38:	e0bffb17 	ldw	r2,-20(fp)
}
8112ab3c:	e037883a 	mov	sp,fp
8112ab40:	df000017 	ldw	fp,0(sp)
8112ab44:	dec00104 	addi	sp,sp,4
8112ab48:	f800283a 	ret

8112ab4c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112ab4c:	defff204 	addi	sp,sp,-56
8112ab50:	de00012e 	bgeu	sp,et,8112ab58 <OSFlagDel+0xc>
8112ab54:	003b68fa 	trap	3
8112ab58:	dfc00d15 	stw	ra,52(sp)
8112ab5c:	df000c15 	stw	fp,48(sp)
8112ab60:	df000c04 	addi	fp,sp,48
8112ab64:	e13ffd15 	stw	r4,-12(fp)
8112ab68:	2805883a 	mov	r2,r5
8112ab6c:	e1bfff15 	stw	r6,-4(fp)
8112ab70:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112ab74:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ab78:	e0bfff17 	ldw	r2,-4(fp)
8112ab7c:	1000021e 	bne	r2,zero,8112ab88 <OSFlagDel+0x3c>
        return (pgrp);
8112ab80:	e0bffd17 	ldw	r2,-12(fp)
8112ab84:	00008006 	br	8112ad88 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112ab88:	e0bffd17 	ldw	r2,-12(fp)
8112ab8c:	1000051e 	bne	r2,zero,8112aba4 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ab90:	e0bfff17 	ldw	r2,-4(fp)
8112ab94:	00c01b84 	movi	r3,110
8112ab98:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112ab9c:	e0bffd17 	ldw	r2,-12(fp)
8112aba0:	00007906 	br	8112ad88 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112aba4:	d0a08303 	ldbu	r2,-32244(gp)
8112aba8:	10803fcc 	andi	r2,r2,255
8112abac:	10000526 	beq	r2,zero,8112abc4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112abb0:	e0bfff17 	ldw	r2,-4(fp)
8112abb4:	00c003c4 	movi	r3,15
8112abb8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112abbc:	e0bffd17 	ldw	r2,-12(fp)
8112abc0:	00007106 	br	8112ad88 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112abc4:	e0bffd17 	ldw	r2,-12(fp)
8112abc8:	10800003 	ldbu	r2,0(r2)
8112abcc:	10803fcc 	andi	r2,r2,255
8112abd0:	10800160 	cmpeqi	r2,r2,5
8112abd4:	1000051e 	bne	r2,zero,8112abec <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112abd8:	e0bfff17 	ldw	r2,-4(fp)
8112abdc:	00c00044 	movi	r3,1
8112abe0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112abe4:	e0bffd17 	ldw	r2,-12(fp)
8112abe8:	00006706 	br	8112ad88 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112abec:	0005303a 	rdctl	r2,status
8112abf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112abf4:	e0fffc17 	ldw	r3,-16(fp)
8112abf8:	00bfff84 	movi	r2,-2
8112abfc:	1884703a 	and	r2,r3,r2
8112ac00:	1001703a 	wrctl	status,r2
  
  return context;
8112ac04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ac08:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112ac0c:	e0bffd17 	ldw	r2,-12(fp)
8112ac10:	10800117 	ldw	r2,4(r2)
8112ac14:	10000326 	beq	r2,zero,8112ac24 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112ac18:	00800044 	movi	r2,1
8112ac1c:	e0bff405 	stb	r2,-48(fp)
8112ac20:	00000106 	br	8112ac28 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112ac24:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112ac28:	e0bffe03 	ldbu	r2,-8(fp)
8112ac2c:	10000326 	beq	r2,zero,8112ac3c <OSFlagDel+0xf0>
8112ac30:	10800060 	cmpeqi	r2,r2,1
8112ac34:	1000231e 	bne	r2,zero,8112acc4 <OSFlagDel+0x178>
8112ac38:	00004806 	br	8112ad5c <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112ac3c:	e0bff403 	ldbu	r2,-48(fp)
8112ac40:	1000161e 	bne	r2,zero,8112ac9c <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112ac44:	e0bffd17 	ldw	r2,-12(fp)
8112ac48:	00c00fc4 	movi	r3,63
8112ac4c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112ac50:	e0bffd17 	ldw	r2,-12(fp)
8112ac54:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112ac58:	e0bffd17 	ldw	r2,-12(fp)
8112ac5c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112ac60:	d0e08817 	ldw	r3,-32224(gp)
8112ac64:	e0bffd17 	ldw	r2,-12(fp)
8112ac68:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112ac6c:	e0bffd17 	ldw	r2,-12(fp)
8112ac70:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112ac74:	e0bffd17 	ldw	r2,-12(fp)
8112ac78:	d0a08815 	stw	r2,-32224(gp)
8112ac7c:	e0bff717 	ldw	r2,-36(fp)
8112ac80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ac84:	e0bff817 	ldw	r2,-32(fp)
8112ac88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112ac8c:	e0bfff17 	ldw	r2,-4(fp)
8112ac90:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112ac94:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112ac98:	00003a06 	br	8112ad84 <OSFlagDel+0x238>
8112ac9c:	e0bff717 	ldw	r2,-36(fp)
8112aca0:	e0bff915 	stw	r2,-28(fp)
8112aca4:	e0bff917 	ldw	r2,-28(fp)
8112aca8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112acac:	e0bfff17 	ldw	r2,-4(fp)
8112acb0:	00c01244 	movi	r3,73
8112acb4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112acb8:	e0bffd17 	ldw	r2,-12(fp)
8112acbc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112acc0:	00003006 	br	8112ad84 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112acc4:	e0bffd17 	ldw	r2,-12(fp)
8112acc8:	10800117 	ldw	r2,4(r2)
8112accc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112acd0:	00000606 	br	8112acec <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112acd4:	000b883a 	mov	r5,zero
8112acd8:	e13ff517 	ldw	r4,-44(fp)
8112acdc:	112bd000 	call	8112bd00 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112ace0:	e0bff517 	ldw	r2,-44(fp)
8112ace4:	10800017 	ldw	r2,0(r2)
8112ace8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112acec:	e0bff517 	ldw	r2,-44(fp)
8112acf0:	103ff81e 	bne	r2,zero,8112acd4 <__reset+0xfb10acd4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112acf4:	e0bffd17 	ldw	r2,-12(fp)
8112acf8:	00c00fc4 	movi	r3,63
8112acfc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112ad00:	e0bffd17 	ldw	r2,-12(fp)
8112ad04:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112ad08:	e0bffd17 	ldw	r2,-12(fp)
8112ad0c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112ad10:	d0e08817 	ldw	r3,-32224(gp)
8112ad14:	e0bffd17 	ldw	r2,-12(fp)
8112ad18:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112ad1c:	e0bffd17 	ldw	r2,-12(fp)
8112ad20:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112ad24:	e0bffd17 	ldw	r2,-12(fp)
8112ad28:	d0a08815 	stw	r2,-32224(gp)
8112ad2c:	e0bff717 	ldw	r2,-36(fp)
8112ad30:	e0bffa15 	stw	r2,-24(fp)
8112ad34:	e0bffa17 	ldw	r2,-24(fp)
8112ad38:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ad3c:	e0bff403 	ldbu	r2,-48(fp)
8112ad40:	10800058 	cmpnei	r2,r2,1
8112ad44:	1000011e 	bne	r2,zero,8112ad4c <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ad48:	1129e100 	call	81129e10 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112ad4c:	e0bfff17 	ldw	r2,-4(fp)
8112ad50:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112ad54:	e03ff615 	stw	zero,-40(fp)
             break;
8112ad58:	00000a06 	br	8112ad84 <OSFlagDel+0x238>
8112ad5c:	e0bff717 	ldw	r2,-36(fp)
8112ad60:	e0bffb15 	stw	r2,-20(fp)
8112ad64:	e0bffb17 	ldw	r2,-20(fp)
8112ad68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112ad6c:	e0bfff17 	ldw	r2,-4(fp)
8112ad70:	00c001c4 	movi	r3,7
8112ad74:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112ad78:	e0bffd17 	ldw	r2,-12(fp)
8112ad7c:	e0bff615 	stw	r2,-40(fp)
             break;
8112ad80:	0001883a 	nop
    }
    return (pgrp_return);
8112ad84:	e0bff617 	ldw	r2,-40(fp)
}
8112ad88:	e037883a 	mov	sp,fp
8112ad8c:	dfc00117 	ldw	ra,4(sp)
8112ad90:	df000017 	ldw	fp,0(sp)
8112ad94:	dec00204 	addi	sp,sp,8
8112ad98:	f800283a 	ret

8112ad9c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112ad9c:	defff604 	addi	sp,sp,-40
8112ada0:	de00012e 	bgeu	sp,et,8112ada8 <OSFlagNameGet+0xc>
8112ada4:	003b68fa 	trap	3
8112ada8:	dfc00915 	stw	ra,36(sp)
8112adac:	df000815 	stw	fp,32(sp)
8112adb0:	df000804 	addi	fp,sp,32
8112adb4:	e13ffd15 	stw	r4,-12(fp)
8112adb8:	e17ffe15 	stw	r5,-8(fp)
8112adbc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112adc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112adc4:	e0bfff17 	ldw	r2,-4(fp)
8112adc8:	1000021e 	bne	r2,zero,8112add4 <OSFlagNameGet+0x38>
        return (0);
8112adcc:	0005883a 	mov	r2,zero
8112add0:	00003906 	br	8112aeb8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112add4:	e0bffd17 	ldw	r2,-12(fp)
8112add8:	1000051e 	bne	r2,zero,8112adf0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112addc:	e0bfff17 	ldw	r2,-4(fp)
8112ade0:	00c01b84 	movi	r3,110
8112ade4:	10c00005 	stb	r3,0(r2)
        return (0);
8112ade8:	0005883a 	mov	r2,zero
8112adec:	00003206 	br	8112aeb8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112adf0:	e0bffe17 	ldw	r2,-8(fp)
8112adf4:	1000051e 	bne	r2,zero,8112ae0c <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112adf8:	e0bfff17 	ldw	r2,-4(fp)
8112adfc:	00c00304 	movi	r3,12
8112ae00:	10c00005 	stb	r3,0(r2)
        return (0);
8112ae04:	0005883a 	mov	r2,zero
8112ae08:	00002b06 	br	8112aeb8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112ae0c:	d0a08303 	ldbu	r2,-32244(gp)
8112ae10:	10803fcc 	andi	r2,r2,255
8112ae14:	10000526 	beq	r2,zero,8112ae2c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112ae18:	e0bfff17 	ldw	r2,-4(fp)
8112ae1c:	00c00444 	movi	r3,17
8112ae20:	10c00005 	stb	r3,0(r2)
        return (0);
8112ae24:	0005883a 	mov	r2,zero
8112ae28:	00002306 	br	8112aeb8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ae2c:	0005303a 	rdctl	r2,status
8112ae30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ae34:	e0fffc17 	ldw	r3,-16(fp)
8112ae38:	00bfff84 	movi	r2,-2
8112ae3c:	1884703a 	and	r2,r3,r2
8112ae40:	1001703a 	wrctl	status,r2
  
  return context;
8112ae44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ae48:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112ae4c:	e0bffd17 	ldw	r2,-12(fp)
8112ae50:	10800003 	ldbu	r2,0(r2)
8112ae54:	10803fcc 	andi	r2,r2,255
8112ae58:	10800160 	cmpeqi	r2,r2,5
8112ae5c:	1000091e 	bne	r2,zero,8112ae84 <OSFlagNameGet+0xe8>
8112ae60:	e0bff817 	ldw	r2,-32(fp)
8112ae64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ae68:	e0bff917 	ldw	r2,-28(fp)
8112ae6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112ae70:	e0bfff17 	ldw	r2,-4(fp)
8112ae74:	00c00044 	movi	r3,1
8112ae78:	10c00005 	stb	r3,0(r2)
        return (0);
8112ae7c:	0005883a 	mov	r2,zero
8112ae80:	00000d06 	br	8112aeb8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112ae84:	e0bffd17 	ldw	r2,-12(fp)
8112ae88:	10800284 	addi	r2,r2,10
8112ae8c:	100b883a 	mov	r5,r2
8112ae90:	e13ffe17 	ldw	r4,-8(fp)
8112ae94:	1129f640 	call	81129f64 <OS_StrCopy>
8112ae98:	e0bffb05 	stb	r2,-20(fp)
8112ae9c:	e0bff817 	ldw	r2,-32(fp)
8112aea0:	e0bffa15 	stw	r2,-24(fp)
8112aea4:	e0bffa17 	ldw	r2,-24(fp)
8112aea8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112aeac:	e0bfff17 	ldw	r2,-4(fp)
8112aeb0:	10000005 	stb	zero,0(r2)
    return (len);
8112aeb4:	e0bffb03 	ldbu	r2,-20(fp)
}
8112aeb8:	e037883a 	mov	sp,fp
8112aebc:	dfc00117 	ldw	ra,4(sp)
8112aec0:	df000017 	ldw	fp,0(sp)
8112aec4:	dec00204 	addi	sp,sp,8
8112aec8:	f800283a 	ret

8112aecc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112aecc:	defff504 	addi	sp,sp,-44
8112aed0:	de00012e 	bgeu	sp,et,8112aed8 <OSFlagNameSet+0xc>
8112aed4:	003b68fa 	trap	3
8112aed8:	dfc00a15 	stw	ra,40(sp)
8112aedc:	df000915 	stw	fp,36(sp)
8112aee0:	df000904 	addi	fp,sp,36
8112aee4:	e13ffd15 	stw	r4,-12(fp)
8112aee8:	e17ffe15 	stw	r5,-8(fp)
8112aeec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112aef0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112aef4:	e0bfff17 	ldw	r2,-4(fp)
8112aef8:	10004326 	beq	r2,zero,8112b008 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112aefc:	e0bffd17 	ldw	r2,-12(fp)
8112af00:	1000041e 	bne	r2,zero,8112af14 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112af04:	e0bfff17 	ldw	r2,-4(fp)
8112af08:	00c01b84 	movi	r3,110
8112af0c:	10c00005 	stb	r3,0(r2)
        return;
8112af10:	00003e06 	br	8112b00c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112af14:	e0bffe17 	ldw	r2,-8(fp)
8112af18:	1000041e 	bne	r2,zero,8112af2c <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112af1c:	e0bfff17 	ldw	r2,-4(fp)
8112af20:	00c00304 	movi	r3,12
8112af24:	10c00005 	stb	r3,0(r2)
        return;
8112af28:	00003806 	br	8112b00c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112af2c:	d0a08303 	ldbu	r2,-32244(gp)
8112af30:	10803fcc 	andi	r2,r2,255
8112af34:	10000426 	beq	r2,zero,8112af48 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112af38:	e0bfff17 	ldw	r2,-4(fp)
8112af3c:	00c00484 	movi	r3,18
8112af40:	10c00005 	stb	r3,0(r2)
        return;
8112af44:	00003106 	br	8112b00c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112af48:	0005303a 	rdctl	r2,status
8112af4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112af50:	e0fffc17 	ldw	r3,-16(fp)
8112af54:	00bfff84 	movi	r2,-2
8112af58:	1884703a 	and	r2,r3,r2
8112af5c:	1001703a 	wrctl	status,r2
  
  return context;
8112af60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112af64:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112af68:	e0bffd17 	ldw	r2,-12(fp)
8112af6c:	10800003 	ldbu	r2,0(r2)
8112af70:	10803fcc 	andi	r2,r2,255
8112af74:	10800160 	cmpeqi	r2,r2,5
8112af78:	1000081e 	bne	r2,zero,8112af9c <OSFlagNameSet+0xd0>
8112af7c:	e0bff717 	ldw	r2,-36(fp)
8112af80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112af84:	e0bff817 	ldw	r2,-32(fp)
8112af88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112af8c:	e0bfff17 	ldw	r2,-4(fp)
8112af90:	00c00044 	movi	r3,1
8112af94:	10c00005 	stb	r3,0(r2)
        return;
8112af98:	00001c06 	br	8112b00c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112af9c:	e13ffe17 	ldw	r4,-8(fp)
8112afa0:	1129fe00 	call	81129fe0 <OS_StrLen>
8112afa4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112afa8:	e0bffa03 	ldbu	r2,-24(fp)
8112afac:	10800830 	cmpltui	r2,r2,32
8112afb0:	1000081e 	bne	r2,zero,8112afd4 <OSFlagNameSet+0x108>
8112afb4:	e0bff717 	ldw	r2,-36(fp)
8112afb8:	e0bff915 	stw	r2,-28(fp)
8112afbc:	e0bff917 	ldw	r2,-28(fp)
8112afc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112afc4:	e0bfff17 	ldw	r2,-4(fp)
8112afc8:	00c01cc4 	movi	r3,115
8112afcc:	10c00005 	stb	r3,0(r2)
        return;
8112afd0:	00000e06 	br	8112b00c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112afd4:	e0bffd17 	ldw	r2,-12(fp)
8112afd8:	10800284 	addi	r2,r2,10
8112afdc:	e17ffe17 	ldw	r5,-8(fp)
8112afe0:	1009883a 	mov	r4,r2
8112afe4:	1129f640 	call	81129f64 <OS_StrCopy>
8112afe8:	e0bff717 	ldw	r2,-36(fp)
8112afec:	e0bffb15 	stw	r2,-20(fp)
8112aff0:	e0bffb17 	ldw	r2,-20(fp)
8112aff4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112aff8:	e0bfff17 	ldw	r2,-4(fp)
8112affc:	10000005 	stb	zero,0(r2)
    return;
8112b000:	0001883a 	nop
8112b004:	00000106 	br	8112b00c <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112b008:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112b00c:	e037883a 	mov	sp,fp
8112b010:	dfc00117 	ldw	ra,4(sp)
8112b014:	df000017 	ldw	fp,0(sp)
8112b018:	dec00204 	addi	sp,sp,8
8112b01c:	f800283a 	ret

8112b020 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112b020:	deffe104 	addi	sp,sp,-124
8112b024:	de00012e 	bgeu	sp,et,8112b02c <OSFlagPend+0xc>
8112b028:	003b68fa 	trap	3
8112b02c:	dfc01e15 	stw	ra,120(sp)
8112b030:	df001d15 	stw	fp,116(sp)
8112b034:	df001d04 	addi	fp,sp,116
8112b038:	e13ffc15 	stw	r4,-16(fp)
8112b03c:	2809883a 	mov	r4,r5
8112b040:	3007883a 	mov	r3,r6
8112b044:	3805883a 	mov	r2,r7
8112b048:	e13ffd0d 	sth	r4,-12(fp)
8112b04c:	e0fffe05 	stb	r3,-8(fp)
8112b050:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112b054:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112b058:	e0800217 	ldw	r2,8(fp)
8112b05c:	1000021e 	bne	r2,zero,8112b068 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112b060:	0005883a 	mov	r2,zero
8112b064:	00015906 	br	8112b5cc <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112b068:	e0bffc17 	ldw	r2,-16(fp)
8112b06c:	1000051e 	bne	r2,zero,8112b084 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112b070:	e0800217 	ldw	r2,8(fp)
8112b074:	00c01b84 	movi	r3,110
8112b078:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b07c:	0005883a 	mov	r2,zero
8112b080:	00015206 	br	8112b5cc <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b084:	d0a08303 	ldbu	r2,-32244(gp)
8112b088:	10803fcc 	andi	r2,r2,255
8112b08c:	10000526 	beq	r2,zero,8112b0a4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112b090:	e0800217 	ldw	r2,8(fp)
8112b094:	00c00084 	movi	r3,2
8112b098:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b09c:	0005883a 	mov	r2,zero
8112b0a0:	00014a06 	br	8112b5cc <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112b0a4:	d0a07103 	ldbu	r2,-32316(gp)
8112b0a8:	10803fcc 	andi	r2,r2,255
8112b0ac:	10000526 	beq	r2,zero,8112b0c4 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112b0b0:	e0800217 	ldw	r2,8(fp)
8112b0b4:	00c00344 	movi	r3,13
8112b0b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b0bc:	0005883a 	mov	r2,zero
8112b0c0:	00014206 	br	8112b5cc <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112b0c4:	e0bffc17 	ldw	r2,-16(fp)
8112b0c8:	10800003 	ldbu	r2,0(r2)
8112b0cc:	10803fcc 	andi	r2,r2,255
8112b0d0:	10800160 	cmpeqi	r2,r2,5
8112b0d4:	1000051e 	bne	r2,zero,8112b0ec <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112b0d8:	e0800217 	ldw	r2,8(fp)
8112b0dc:	00c00044 	movi	r3,1
8112b0e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b0e4:	0005883a 	mov	r2,zero
8112b0e8:	00013806 	br	8112b5cc <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112b0ec:	e0fffe03 	ldbu	r3,-8(fp)
8112b0f0:	00bfe004 	movi	r2,-128
8112b0f4:	1884703a 	and	r2,r3,r2
8112b0f8:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112b0fc:	e0bfe603 	ldbu	r2,-104(fp)
8112b100:	10000626 	beq	r2,zero,8112b11c <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112b104:	e0bffe03 	ldbu	r2,-8(fp)
8112b108:	10801fcc 	andi	r2,r2,127
8112b10c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112b110:	00800044 	movi	r2,1
8112b114:	e0bfe405 	stb	r2,-112(fp)
8112b118:	00000106 	br	8112b120 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112b11c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b120:	0005303a 	rdctl	r2,status
8112b124:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b128:	e0fff617 	ldw	r3,-40(fp)
8112b12c:	00bfff84 	movi	r2,-2
8112b130:	1884703a 	and	r2,r3,r2
8112b134:	1001703a 	wrctl	status,r2
  
  return context;
8112b138:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b13c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112b140:	e0bffe03 	ldbu	r2,-8(fp)
8112b144:	10c00060 	cmpeqi	r3,r2,1
8112b148:	1800921e 	bne	r3,zero,8112b394 <OSFlagPend+0x374>
8112b14c:	10c00088 	cmpgei	r3,r2,2
8112b150:	1800021e 	bne	r3,zero,8112b15c <OSFlagPend+0x13c>
8112b154:	10006126 	beq	r2,zero,8112b2dc <OSFlagPend+0x2bc>
8112b158:	0000bb06 	br	8112b448 <OSFlagPend+0x428>
8112b15c:	10c000a0 	cmpeqi	r3,r2,2
8112b160:	1800031e 	bne	r3,zero,8112b170 <OSFlagPend+0x150>
8112b164:	108000e0 	cmpeqi	r2,r2,3
8112b168:	10002f1e 	bne	r2,zero,8112b228 <OSFlagPend+0x208>
8112b16c:	0000b606 	br	8112b448 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112b170:	e0bffc17 	ldw	r2,-16(fp)
8112b174:	10c0020b 	ldhu	r3,8(r2)
8112b178:	e0bffd0b 	ldhu	r2,-12(fp)
8112b17c:	1884703a 	and	r2,r3,r2
8112b180:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112b184:	e0ffe80b 	ldhu	r3,-96(fp)
8112b188:	e0bffd0b 	ldhu	r2,-12(fp)
8112b18c:	1880171e 	bne	r3,r2,8112b1ec <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b190:	e0bfe403 	ldbu	r2,-112(fp)
8112b194:	10800058 	cmpnei	r2,r2,1
8112b198:	1000091e 	bne	r2,zero,8112b1c0 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112b19c:	e0bffc17 	ldw	r2,-16(fp)
8112b1a0:	1080020b 	ldhu	r2,8(r2)
8112b1a4:	1007883a 	mov	r3,r2
8112b1a8:	e0bfe80b 	ldhu	r2,-96(fp)
8112b1ac:	0084303a 	nor	r2,zero,r2
8112b1b0:	1884703a 	and	r2,r3,r2
8112b1b4:	1007883a 	mov	r3,r2
8112b1b8:	e0bffc17 	ldw	r2,-16(fp)
8112b1bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b1c0:	d0a08417 	ldw	r2,-32240(gp)
8112b1c4:	e0ffe80b 	ldhu	r3,-96(fp)
8112b1c8:	10c00b0d 	sth	r3,44(r2)
8112b1cc:	e0bfe517 	ldw	r2,-108(fp)
8112b1d0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b1d4:	e0bfe717 	ldw	r2,-100(fp)
8112b1d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b1dc:	e0800217 	ldw	r2,8(fp)
8112b1e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b1e4:	e0bfe80b 	ldhu	r2,-96(fp)
8112b1e8:	0000f806 	br	8112b5cc <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b1ec:	e13ffd0b 	ldhu	r4,-12(fp)
8112b1f0:	e17ffe03 	ldbu	r5,-8(fp)
8112b1f4:	e0bfff0b 	ldhu	r2,-4(fp)
8112b1f8:	e0fff704 	addi	r3,fp,-36
8112b1fc:	d8800015 	stw	r2,0(sp)
8112b200:	280f883a 	mov	r7,r5
8112b204:	200d883a 	mov	r6,r4
8112b208:	180b883a 	mov	r5,r3
8112b20c:	e13ffc17 	ldw	r4,-16(fp)
8112b210:	112bab00 	call	8112bab0 <OS_FlagBlock>
8112b214:	e0bfe517 	ldw	r2,-108(fp)
8112b218:	e0bfe915 	stw	r2,-92(fp)
8112b21c:	e0bfe917 	ldw	r2,-92(fp)
8112b220:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b224:	00009206 	br	8112b470 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112b228:	e0bffc17 	ldw	r2,-16(fp)
8112b22c:	10c0020b 	ldhu	r3,8(r2)
8112b230:	e0bffd0b 	ldhu	r2,-12(fp)
8112b234:	1884703a 	and	r2,r3,r2
8112b238:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112b23c:	e0bfe80b 	ldhu	r2,-96(fp)
8112b240:	10001726 	beq	r2,zero,8112b2a0 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b244:	e0bfe403 	ldbu	r2,-112(fp)
8112b248:	10800058 	cmpnei	r2,r2,1
8112b24c:	1000091e 	bne	r2,zero,8112b274 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112b250:	e0bffc17 	ldw	r2,-16(fp)
8112b254:	1080020b 	ldhu	r2,8(r2)
8112b258:	1007883a 	mov	r3,r2
8112b25c:	e0bfe80b 	ldhu	r2,-96(fp)
8112b260:	0084303a 	nor	r2,zero,r2
8112b264:	1884703a 	and	r2,r3,r2
8112b268:	1007883a 	mov	r3,r2
8112b26c:	e0bffc17 	ldw	r2,-16(fp)
8112b270:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b274:	d0a08417 	ldw	r2,-32240(gp)
8112b278:	e0ffe80b 	ldhu	r3,-96(fp)
8112b27c:	10c00b0d 	sth	r3,44(r2)
8112b280:	e0bfe517 	ldw	r2,-108(fp)
8112b284:	e0bfea15 	stw	r2,-88(fp)
8112b288:	e0bfea17 	ldw	r2,-88(fp)
8112b28c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b290:	e0800217 	ldw	r2,8(fp)
8112b294:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b298:	e0bfe80b 	ldhu	r2,-96(fp)
8112b29c:	0000cb06 	br	8112b5cc <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b2a0:	e13ffd0b 	ldhu	r4,-12(fp)
8112b2a4:	e17ffe03 	ldbu	r5,-8(fp)
8112b2a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112b2ac:	e0fff704 	addi	r3,fp,-36
8112b2b0:	d8800015 	stw	r2,0(sp)
8112b2b4:	280f883a 	mov	r7,r5
8112b2b8:	200d883a 	mov	r6,r4
8112b2bc:	180b883a 	mov	r5,r3
8112b2c0:	e13ffc17 	ldw	r4,-16(fp)
8112b2c4:	112bab00 	call	8112bab0 <OS_FlagBlock>
8112b2c8:	e0bfe517 	ldw	r2,-108(fp)
8112b2cc:	e0bfeb15 	stw	r2,-84(fp)
8112b2d0:	e0bfeb17 	ldw	r2,-84(fp)
8112b2d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b2d8:	00006506 	br	8112b470 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112b2dc:	e0bffc17 	ldw	r2,-16(fp)
8112b2e0:	1080020b 	ldhu	r2,8(r2)
8112b2e4:	0084303a 	nor	r2,zero,r2
8112b2e8:	1007883a 	mov	r3,r2
8112b2ec:	e0bffd0b 	ldhu	r2,-12(fp)
8112b2f0:	1884703a 	and	r2,r3,r2
8112b2f4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112b2f8:	e0ffe80b 	ldhu	r3,-96(fp)
8112b2fc:	e0bffd0b 	ldhu	r2,-12(fp)
8112b300:	1880151e 	bne	r3,r2,8112b358 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b304:	e0bfe403 	ldbu	r2,-112(fp)
8112b308:	10800058 	cmpnei	r2,r2,1
8112b30c:	1000071e 	bne	r2,zero,8112b32c <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112b310:	e0bffc17 	ldw	r2,-16(fp)
8112b314:	10c0020b 	ldhu	r3,8(r2)
8112b318:	e0bfe80b 	ldhu	r2,-96(fp)
8112b31c:	1884b03a 	or	r2,r3,r2
8112b320:	1007883a 	mov	r3,r2
8112b324:	e0bffc17 	ldw	r2,-16(fp)
8112b328:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b32c:	d0a08417 	ldw	r2,-32240(gp)
8112b330:	e0ffe80b 	ldhu	r3,-96(fp)
8112b334:	10c00b0d 	sth	r3,44(r2)
8112b338:	e0bfe517 	ldw	r2,-108(fp)
8112b33c:	e0bfec15 	stw	r2,-80(fp)
8112b340:	e0bfec17 	ldw	r2,-80(fp)
8112b344:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b348:	e0800217 	ldw	r2,8(fp)
8112b34c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b350:	e0bfe80b 	ldhu	r2,-96(fp)
8112b354:	00009d06 	br	8112b5cc <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b358:	e13ffd0b 	ldhu	r4,-12(fp)
8112b35c:	e17ffe03 	ldbu	r5,-8(fp)
8112b360:	e0bfff0b 	ldhu	r2,-4(fp)
8112b364:	e0fff704 	addi	r3,fp,-36
8112b368:	d8800015 	stw	r2,0(sp)
8112b36c:	280f883a 	mov	r7,r5
8112b370:	200d883a 	mov	r6,r4
8112b374:	180b883a 	mov	r5,r3
8112b378:	e13ffc17 	ldw	r4,-16(fp)
8112b37c:	112bab00 	call	8112bab0 <OS_FlagBlock>
8112b380:	e0bfe517 	ldw	r2,-108(fp)
8112b384:	e0bfed15 	stw	r2,-76(fp)
8112b388:	e0bfed17 	ldw	r2,-76(fp)
8112b38c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b390:	00003706 	br	8112b470 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112b394:	e0bffc17 	ldw	r2,-16(fp)
8112b398:	1080020b 	ldhu	r2,8(r2)
8112b39c:	0084303a 	nor	r2,zero,r2
8112b3a0:	1007883a 	mov	r3,r2
8112b3a4:	e0bffd0b 	ldhu	r2,-12(fp)
8112b3a8:	1884703a 	and	r2,r3,r2
8112b3ac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112b3b0:	e0bfe80b 	ldhu	r2,-96(fp)
8112b3b4:	10001526 	beq	r2,zero,8112b40c <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112b3b8:	e0bfe403 	ldbu	r2,-112(fp)
8112b3bc:	10800058 	cmpnei	r2,r2,1
8112b3c0:	1000071e 	bne	r2,zero,8112b3e0 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112b3c4:	e0bffc17 	ldw	r2,-16(fp)
8112b3c8:	10c0020b 	ldhu	r3,8(r2)
8112b3cc:	e0bfe80b 	ldhu	r2,-96(fp)
8112b3d0:	1884b03a 	or	r2,r3,r2
8112b3d4:	1007883a 	mov	r3,r2
8112b3d8:	e0bffc17 	ldw	r2,-16(fp)
8112b3dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112b3e0:	d0a08417 	ldw	r2,-32240(gp)
8112b3e4:	e0ffe80b 	ldhu	r3,-96(fp)
8112b3e8:	10c00b0d 	sth	r3,44(r2)
8112b3ec:	e0bfe517 	ldw	r2,-108(fp)
8112b3f0:	e0bfee15 	stw	r2,-72(fp)
8112b3f4:	e0bfee17 	ldw	r2,-72(fp)
8112b3f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112b3fc:	e0800217 	ldw	r2,8(fp)
8112b400:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112b404:	e0bfe80b 	ldhu	r2,-96(fp)
8112b408:	00007006 	br	8112b5cc <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112b40c:	e13ffd0b 	ldhu	r4,-12(fp)
8112b410:	e17ffe03 	ldbu	r5,-8(fp)
8112b414:	e0bfff0b 	ldhu	r2,-4(fp)
8112b418:	e0fff704 	addi	r3,fp,-36
8112b41c:	d8800015 	stw	r2,0(sp)
8112b420:	280f883a 	mov	r7,r5
8112b424:	200d883a 	mov	r6,r4
8112b428:	180b883a 	mov	r5,r3
8112b42c:	e13ffc17 	ldw	r4,-16(fp)
8112b430:	112bab00 	call	8112bab0 <OS_FlagBlock>
8112b434:	e0bfe517 	ldw	r2,-108(fp)
8112b438:	e0bfef15 	stw	r2,-68(fp)
8112b43c:	e0bfef17 	ldw	r2,-68(fp)
8112b440:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112b444:	00000a06 	br	8112b470 <OSFlagPend+0x450>
8112b448:	e0bfe517 	ldw	r2,-108(fp)
8112b44c:	e0bff015 	stw	r2,-64(fp)
8112b450:	e0bff017 	ldw	r2,-64(fp)
8112b454:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112b458:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112b45c:	e0800217 	ldw	r2,8(fp)
8112b460:	00c01bc4 	movi	r3,111
8112b464:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112b468:	e0bfe80b 	ldhu	r2,-96(fp)
8112b46c:	00005706 	br	8112b5cc <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112b470:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b474:	0005303a 	rdctl	r2,status
8112b478:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b47c:	e0fff117 	ldw	r3,-60(fp)
8112b480:	00bfff84 	movi	r2,-2
8112b484:	1884703a 	and	r2,r3,r2
8112b488:	1001703a 	wrctl	status,r2
  
  return context;
8112b48c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112b490:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112b494:	d0a08417 	ldw	r2,-32240(gp)
8112b498:	10800c43 	ldbu	r2,49(r2)
8112b49c:	10803fcc 	andi	r2,r2,255
8112b4a0:	10001c26 	beq	r2,zero,8112b514 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112b4a4:	d0a08417 	ldw	r2,-32240(gp)
8112b4a8:	10800c43 	ldbu	r2,49(r2)
8112b4ac:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b4b0:	d0a08417 	ldw	r2,-32240(gp)
8112b4b4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112b4b8:	e0bff704 	addi	r2,fp,-36
8112b4bc:	1009883a 	mov	r4,r2
8112b4c0:	112bdfc0 	call	8112bdfc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112b4c4:	d0a08417 	ldw	r2,-32240(gp)
8112b4c8:	10000c05 	stb	zero,48(r2)
8112b4cc:	e0bfe517 	ldw	r2,-108(fp)
8112b4d0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b4d4:	e0bff217 	ldw	r2,-56(fp)
8112b4d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112b4dc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112b4e0:	e0bff303 	ldbu	r2,-52(fp)
8112b4e4:	108000a0 	cmpeqi	r2,r2,2
8112b4e8:	10000426 	beq	r2,zero,8112b4fc <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112b4ec:	e0800217 	ldw	r2,8(fp)
8112b4f0:	00c00384 	movi	r3,14
8112b4f4:	10c00005 	stb	r3,0(r2)
                 break;
8112b4f8:	00000406 	br	8112b50c <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112b4fc:	e0800217 	ldw	r2,8(fp)
8112b500:	00c00284 	movi	r3,10
8112b504:	10c00005 	stb	r3,0(r2)
                 break;
8112b508:	0001883a 	nop
        }
        return (flags_rdy);
8112b50c:	e0bfe80b 	ldhu	r2,-96(fp)
8112b510:	00002e06 	br	8112b5cc <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112b514:	d0a08417 	ldw	r2,-32240(gp)
8112b518:	10800b0b 	ldhu	r2,44(r2)
8112b51c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112b520:	e0bfe403 	ldbu	r2,-112(fp)
8112b524:	10800058 	cmpnei	r2,r2,1
8112b528:	1000211e 	bne	r2,zero,8112b5b0 <OSFlagPend+0x590>
        switch (wait_type) {
8112b52c:	e0bffe03 	ldbu	r2,-8(fp)
8112b530:	10001616 	blt	r2,zero,8112b58c <OSFlagPend+0x56c>
8112b534:	10c00090 	cmplti	r3,r2,2
8112b538:	18000c1e 	bne	r3,zero,8112b56c <OSFlagPend+0x54c>
8112b53c:	10800108 	cmpgei	r2,r2,4
8112b540:	1000121e 	bne	r2,zero,8112b58c <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112b544:	e0bffc17 	ldw	r2,-16(fp)
8112b548:	1080020b 	ldhu	r2,8(r2)
8112b54c:	1007883a 	mov	r3,r2
8112b550:	e0bfe80b 	ldhu	r2,-96(fp)
8112b554:	0084303a 	nor	r2,zero,r2
8112b558:	1884703a 	and	r2,r3,r2
8112b55c:	1007883a 	mov	r3,r2
8112b560:	e0bffc17 	ldw	r2,-16(fp)
8112b564:	10c0020d 	sth	r3,8(r2)
                 break;
8112b568:	00001106 	br	8112b5b0 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112b56c:	e0bffc17 	ldw	r2,-16(fp)
8112b570:	10c0020b 	ldhu	r3,8(r2)
8112b574:	e0bfe80b 	ldhu	r2,-96(fp)
8112b578:	1884b03a 	or	r2,r3,r2
8112b57c:	1007883a 	mov	r3,r2
8112b580:	e0bffc17 	ldw	r2,-16(fp)
8112b584:	10c0020d 	sth	r3,8(r2)
                 break;
8112b588:	00000906 	br	8112b5b0 <OSFlagPend+0x590>
8112b58c:	e0bfe517 	ldw	r2,-108(fp)
8112b590:	e0bff415 	stw	r2,-48(fp)
8112b594:	e0bff417 	ldw	r2,-48(fp)
8112b598:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112b59c:	e0800217 	ldw	r2,8(fp)
8112b5a0:	00c01bc4 	movi	r3,111
8112b5a4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112b5a8:	0005883a 	mov	r2,zero
8112b5ac:	00000706 	br	8112b5cc <OSFlagPend+0x5ac>
8112b5b0:	e0bfe517 	ldw	r2,-108(fp)
8112b5b4:	e0bff515 	stw	r2,-44(fp)
8112b5b8:	e0bff517 	ldw	r2,-44(fp)
8112b5bc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112b5c0:	e0800217 	ldw	r2,8(fp)
8112b5c4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112b5c8:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112b5cc:	e037883a 	mov	sp,fp
8112b5d0:	dfc00117 	ldw	ra,4(sp)
8112b5d4:	df000017 	ldw	fp,0(sp)
8112b5d8:	dec00204 	addi	sp,sp,8
8112b5dc:	f800283a 	ret

8112b5e0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112b5e0:	defffb04 	addi	sp,sp,-20
8112b5e4:	de00012e 	bgeu	sp,et,8112b5ec <OSFlagPendGetFlagsRdy+0xc>
8112b5e8:	003b68fa 	trap	3
8112b5ec:	df000415 	stw	fp,16(sp)
8112b5f0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112b5f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b5f8:	0005303a 	rdctl	r2,status
8112b5fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b600:	e0fffe17 	ldw	r3,-8(fp)
8112b604:	00bfff84 	movi	r2,-2
8112b608:	1884703a 	and	r2,r3,r2
8112b60c:	1001703a 	wrctl	status,r2
  
  return context;
8112b610:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112b614:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112b618:	d0a08417 	ldw	r2,-32240(gp)
8112b61c:	10800b0b 	ldhu	r2,44(r2)
8112b620:	e0bffd0d 	sth	r2,-12(fp)
8112b624:	e0bffc17 	ldw	r2,-16(fp)
8112b628:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b62c:	e0bfff17 	ldw	r2,-4(fp)
8112b630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112b634:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112b638:	e037883a 	mov	sp,fp
8112b63c:	df000017 	ldw	fp,0(sp)
8112b640:	dec00104 	addi	sp,sp,4
8112b644:	f800283a 	ret

8112b648 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112b648:	deffef04 	addi	sp,sp,-68
8112b64c:	de00012e 	bgeu	sp,et,8112b654 <OSFlagPost+0xc>
8112b650:	003b68fa 	trap	3
8112b654:	dfc01015 	stw	ra,64(sp)
8112b658:	df000f15 	stw	fp,60(sp)
8112b65c:	df000f04 	addi	fp,sp,60
8112b660:	e13ffc15 	stw	r4,-16(fp)
8112b664:	2807883a 	mov	r3,r5
8112b668:	3005883a 	mov	r2,r6
8112b66c:	e1ffff15 	stw	r7,-4(fp)
8112b670:	e0fffd0d 	sth	r3,-12(fp)
8112b674:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112b678:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112b67c:	e0bfff17 	ldw	r2,-4(fp)
8112b680:	1000021e 	bne	r2,zero,8112b68c <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112b684:	0005883a 	mov	r2,zero
8112b688:	0000d106 	br	8112b9d0 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112b68c:	e0bffc17 	ldw	r2,-16(fp)
8112b690:	1000051e 	bne	r2,zero,8112b6a8 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112b694:	e0bfff17 	ldw	r2,-4(fp)
8112b698:	00c01b84 	movi	r3,110
8112b69c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b6a0:	0005883a 	mov	r2,zero
8112b6a4:	0000ca06 	br	8112b9d0 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112b6a8:	e0bffc17 	ldw	r2,-16(fp)
8112b6ac:	10800003 	ldbu	r2,0(r2)
8112b6b0:	10803fcc 	andi	r2,r2,255
8112b6b4:	10800160 	cmpeqi	r2,r2,5
8112b6b8:	1000051e 	bne	r2,zero,8112b6d0 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112b6bc:	e0bfff17 	ldw	r2,-4(fp)
8112b6c0:	00c00044 	movi	r3,1
8112b6c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112b6c8:	0005883a 	mov	r2,zero
8112b6cc:	0000c006 	br	8112b9d0 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b6d0:	0005303a 	rdctl	r2,status
8112b6d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b6d8:	e0fffb17 	ldw	r3,-20(fp)
8112b6dc:	00bfff84 	movi	r2,-2
8112b6e0:	1884703a 	and	r2,r3,r2
8112b6e4:	1001703a 	wrctl	status,r2
  
  return context;
8112b6e8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b6ec:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112b6f0:	e0bffe03 	ldbu	r2,-8(fp)
8112b6f4:	10000326 	beq	r2,zero,8112b704 <OSFlagPost+0xbc>
8112b6f8:	10800060 	cmpeqi	r2,r2,1
8112b6fc:	10000b1e 	bne	r2,zero,8112b72c <OSFlagPost+0xe4>
8112b700:	00001206 	br	8112b74c <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112b704:	e0bffc17 	ldw	r2,-16(fp)
8112b708:	1080020b 	ldhu	r2,8(r2)
8112b70c:	1007883a 	mov	r3,r2
8112b710:	e0bffd0b 	ldhu	r2,-12(fp)
8112b714:	0084303a 	nor	r2,zero,r2
8112b718:	1884703a 	and	r2,r3,r2
8112b71c:	1007883a 	mov	r3,r2
8112b720:	e0bffc17 	ldw	r2,-16(fp)
8112b724:	10c0020d 	sth	r3,8(r2)
             break;
8112b728:	00001106 	br	8112b770 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112b72c:	e0bffc17 	ldw	r2,-16(fp)
8112b730:	10c0020b 	ldhu	r3,8(r2)
8112b734:	e0bffd0b 	ldhu	r2,-12(fp)
8112b738:	1884b03a 	or	r2,r3,r2
8112b73c:	1007883a 	mov	r3,r2
8112b740:	e0bffc17 	ldw	r2,-16(fp)
8112b744:	10c0020d 	sth	r3,8(r2)
             break;
8112b748:	00000906 	br	8112b770 <OSFlagPost+0x128>
8112b74c:	e0bff317 	ldw	r2,-52(fp)
8112b750:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b754:	e0bff417 	ldw	r2,-48(fp)
8112b758:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112b75c:	e0bfff17 	ldw	r2,-4(fp)
8112b760:	00c01c44 	movi	r3,113
8112b764:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112b768:	0005883a 	mov	r2,zero
8112b76c:	00009806 	br	8112b9d0 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112b770:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112b774:	e0bffc17 	ldw	r2,-16(fp)
8112b778:	10800117 	ldw	r2,4(r2)
8112b77c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112b780:	00007706 	br	8112b960 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112b784:	e0bff117 	ldw	r2,-60(fp)
8112b788:	10800483 	ldbu	r2,18(r2)
8112b78c:	10803fcc 	andi	r2,r2,255
8112b790:	10c00060 	cmpeqi	r3,r2,1
8112b794:	18004a1e 	bne	r3,zero,8112b8c0 <OSFlagPost+0x278>
8112b798:	10c00088 	cmpgei	r3,r2,2
8112b79c:	1800021e 	bne	r3,zero,8112b7a8 <OSFlagPost+0x160>
8112b7a0:	10002f26 	beq	r2,zero,8112b860 <OSFlagPost+0x218>
8112b7a4:	00005b06 	br	8112b914 <OSFlagPost+0x2cc>
8112b7a8:	10c000a0 	cmpeqi	r3,r2,2
8112b7ac:	1800031e 	bne	r3,zero,8112b7bc <OSFlagPost+0x174>
8112b7b0:	108000e0 	cmpeqi	r2,r2,3
8112b7b4:	1000171e 	bne	r2,zero,8112b814 <OSFlagPost+0x1cc>
8112b7b8:	00005606 	br	8112b914 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b7bc:	e0bffc17 	ldw	r2,-16(fp)
8112b7c0:	10c0020b 	ldhu	r3,8(r2)
8112b7c4:	e0bff117 	ldw	r2,-60(fp)
8112b7c8:	1080040b 	ldhu	r2,16(r2)
8112b7cc:	1884703a 	and	r2,r3,r2
8112b7d0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112b7d4:	e0bff117 	ldw	r2,-60(fp)
8112b7d8:	1080040b 	ldhu	r2,16(r2)
8112b7dc:	10ffffcc 	andi	r3,r2,65535
8112b7e0:	e0bff60b 	ldhu	r2,-40(fp)
8112b7e4:	1880541e 	bne	r3,r2,8112b938 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b7e8:	e0bff60b 	ldhu	r2,-40(fp)
8112b7ec:	100b883a 	mov	r5,r2
8112b7f0:	e13ff117 	ldw	r4,-60(fp)
8112b7f4:	112bd000 	call	8112bd00 <OS_FlagTaskRdy>
8112b7f8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112b7fc:	e0bff683 	ldbu	r2,-38(fp)
8112b800:	10800058 	cmpnei	r2,r2,1
8112b804:	10004c1e 	bne	r2,zero,8112b938 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112b808:	00800044 	movi	r2,1
8112b80c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112b810:	00004906 	br	8112b938 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b814:	e0bffc17 	ldw	r2,-16(fp)
8112b818:	10c0020b 	ldhu	r3,8(r2)
8112b81c:	e0bff117 	ldw	r2,-60(fp)
8112b820:	1080040b 	ldhu	r2,16(r2)
8112b824:	1884703a 	and	r2,r3,r2
8112b828:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112b82c:	e0bff60b 	ldhu	r2,-40(fp)
8112b830:	10004326 	beq	r2,zero,8112b940 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b834:	e0bff60b 	ldhu	r2,-40(fp)
8112b838:	100b883a 	mov	r5,r2
8112b83c:	e13ff117 	ldw	r4,-60(fp)
8112b840:	112bd000 	call	8112bd00 <OS_FlagTaskRdy>
8112b844:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112b848:	e0bff683 	ldbu	r2,-38(fp)
8112b84c:	10800058 	cmpnei	r2,r2,1
8112b850:	10003b1e 	bne	r2,zero,8112b940 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112b854:	00800044 	movi	r2,1
8112b858:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112b85c:	00003806 	br	8112b940 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b860:	e0bffc17 	ldw	r2,-16(fp)
8112b864:	1080020b 	ldhu	r2,8(r2)
8112b868:	0084303a 	nor	r2,zero,r2
8112b86c:	1007883a 	mov	r3,r2
8112b870:	e0bff117 	ldw	r2,-60(fp)
8112b874:	1080040b 	ldhu	r2,16(r2)
8112b878:	1884703a 	and	r2,r3,r2
8112b87c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112b880:	e0bff117 	ldw	r2,-60(fp)
8112b884:	1080040b 	ldhu	r2,16(r2)
8112b888:	10ffffcc 	andi	r3,r2,65535
8112b88c:	e0bff60b 	ldhu	r2,-40(fp)
8112b890:	18802d1e 	bne	r3,r2,8112b948 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b894:	e0bff60b 	ldhu	r2,-40(fp)
8112b898:	100b883a 	mov	r5,r2
8112b89c:	e13ff117 	ldw	r4,-60(fp)
8112b8a0:	112bd000 	call	8112bd00 <OS_FlagTaskRdy>
8112b8a4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112b8a8:	e0bff683 	ldbu	r2,-38(fp)
8112b8ac:	10800058 	cmpnei	r2,r2,1
8112b8b0:	1000251e 	bne	r2,zero,8112b948 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112b8b4:	00800044 	movi	r2,1
8112b8b8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112b8bc:	00002206 	br	8112b948 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112b8c0:	e0bffc17 	ldw	r2,-16(fp)
8112b8c4:	1080020b 	ldhu	r2,8(r2)
8112b8c8:	0084303a 	nor	r2,zero,r2
8112b8cc:	1007883a 	mov	r3,r2
8112b8d0:	e0bff117 	ldw	r2,-60(fp)
8112b8d4:	1080040b 	ldhu	r2,16(r2)
8112b8d8:	1884703a 	and	r2,r3,r2
8112b8dc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112b8e0:	e0bff60b 	ldhu	r2,-40(fp)
8112b8e4:	10001a26 	beq	r2,zero,8112b950 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112b8e8:	e0bff60b 	ldhu	r2,-40(fp)
8112b8ec:	100b883a 	mov	r5,r2
8112b8f0:	e13ff117 	ldw	r4,-60(fp)
8112b8f4:	112bd000 	call	8112bd00 <OS_FlagTaskRdy>
8112b8f8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112b8fc:	e0bff683 	ldbu	r2,-38(fp)
8112b900:	10800058 	cmpnei	r2,r2,1
8112b904:	1000121e 	bne	r2,zero,8112b950 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112b908:	00800044 	movi	r2,1
8112b90c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112b910:	00000f06 	br	8112b950 <OSFlagPost+0x308>
8112b914:	e0bff317 	ldw	r2,-52(fp)
8112b918:	e0bff515 	stw	r2,-44(fp)
8112b91c:	e0bff517 	ldw	r2,-44(fp)
8112b920:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112b924:	e0bfff17 	ldw	r2,-4(fp)
8112b928:	00c01bc4 	movi	r3,111
8112b92c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112b930:	0005883a 	mov	r2,zero
8112b934:	00002606 	br	8112b9d0 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112b938:	0001883a 	nop
8112b93c:	00000506 	br	8112b954 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112b940:	0001883a 	nop
8112b944:	00000306 	br	8112b954 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112b948:	0001883a 	nop
8112b94c:	00000106 	br	8112b954 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112b950:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112b954:	e0bff117 	ldw	r2,-60(fp)
8112b958:	10800017 	ldw	r2,0(r2)
8112b95c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112b960:	e0bff117 	ldw	r2,-60(fp)
8112b964:	103f871e 	bne	r2,zero,8112b784 <__reset+0xfb10b784>
8112b968:	e0bff317 	ldw	r2,-52(fp)
8112b96c:	e0bff715 	stw	r2,-36(fp)
8112b970:	e0bff717 	ldw	r2,-36(fp)
8112b974:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112b978:	e0bff203 	ldbu	r2,-56(fp)
8112b97c:	10800058 	cmpnei	r2,r2,1
8112b980:	1000011e 	bne	r2,zero,8112b988 <OSFlagPost+0x340>
        OS_Sched();
8112b984:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b988:	0005303a 	rdctl	r2,status
8112b98c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b990:	e0fffa17 	ldw	r3,-24(fp)
8112b994:	00bfff84 	movi	r2,-2
8112b998:	1884703a 	and	r2,r3,r2
8112b99c:	1001703a 	wrctl	status,r2
  
  return context;
8112b9a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112b9a4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112b9a8:	e0bffc17 	ldw	r2,-16(fp)
8112b9ac:	1080020b 	ldhu	r2,8(r2)
8112b9b0:	e0bff90d 	sth	r2,-28(fp)
8112b9b4:	e0bff317 	ldw	r2,-52(fp)
8112b9b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b9bc:	e0bff817 	ldw	r2,-32(fp)
8112b9c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112b9c4:	e0bfff17 	ldw	r2,-4(fp)
8112b9c8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112b9cc:	e0bff90b 	ldhu	r2,-28(fp)
}
8112b9d0:	e037883a 	mov	sp,fp
8112b9d4:	dfc00117 	ldw	ra,4(sp)
8112b9d8:	df000017 	ldw	fp,0(sp)
8112b9dc:	dec00204 	addi	sp,sp,8
8112b9e0:	f800283a 	ret

8112b9e4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112b9e4:	defff904 	addi	sp,sp,-28
8112b9e8:	de00012e 	bgeu	sp,et,8112b9f0 <OSFlagQuery+0xc>
8112b9ec:	003b68fa 	trap	3
8112b9f0:	df000615 	stw	fp,24(sp)
8112b9f4:	df000604 	addi	fp,sp,24
8112b9f8:	e13ffe15 	stw	r4,-8(fp)
8112b9fc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112ba00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112ba04:	e0bfff17 	ldw	r2,-4(fp)
8112ba08:	1000021e 	bne	r2,zero,8112ba14 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112ba0c:	0005883a 	mov	r2,zero
8112ba10:	00002306 	br	8112baa0 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112ba14:	e0bffe17 	ldw	r2,-8(fp)
8112ba18:	1000051e 	bne	r2,zero,8112ba30 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ba1c:	e0bfff17 	ldw	r2,-4(fp)
8112ba20:	00c01b84 	movi	r3,110
8112ba24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112ba28:	0005883a 	mov	r2,zero
8112ba2c:	00001c06 	br	8112baa0 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112ba30:	e0bffe17 	ldw	r2,-8(fp)
8112ba34:	10800003 	ldbu	r2,0(r2)
8112ba38:	10803fcc 	andi	r2,r2,255
8112ba3c:	10800160 	cmpeqi	r2,r2,5
8112ba40:	1000051e 	bne	r2,zero,8112ba58 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112ba44:	e0bfff17 	ldw	r2,-4(fp)
8112ba48:	00c00044 	movi	r3,1
8112ba4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112ba50:	0005883a 	mov	r2,zero
8112ba54:	00001206 	br	8112baa0 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ba58:	0005303a 	rdctl	r2,status
8112ba5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ba60:	e0fffc17 	ldw	r3,-16(fp)
8112ba64:	00bfff84 	movi	r2,-2
8112ba68:	1884703a 	and	r2,r3,r2
8112ba6c:	1001703a 	wrctl	status,r2
  
  return context;
8112ba70:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ba74:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112ba78:	e0bffe17 	ldw	r2,-8(fp)
8112ba7c:	1080020b 	ldhu	r2,8(r2)
8112ba80:	e0bffb0d 	sth	r2,-20(fp)
8112ba84:	e0bffa17 	ldw	r2,-24(fp)
8112ba88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ba8c:	e0bffd17 	ldw	r2,-12(fp)
8112ba90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112ba94:	e0bfff17 	ldw	r2,-4(fp)
8112ba98:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112ba9c:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112baa0:	e037883a 	mov	sp,fp
8112baa4:	df000017 	ldw	fp,0(sp)
8112baa8:	dec00104 	addi	sp,sp,4
8112baac:	f800283a 	ret

8112bab0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112bab0:	defff804 	addi	sp,sp,-32
8112bab4:	de00012e 	bgeu	sp,et,8112babc <OS_FlagBlock+0xc>
8112bab8:	003b68fa 	trap	3
8112babc:	df000715 	stw	fp,28(sp)
8112bac0:	df000704 	addi	fp,sp,28
8112bac4:	e13ffb15 	stw	r4,-20(fp)
8112bac8:	e17ffc15 	stw	r5,-16(fp)
8112bacc:	3009883a 	mov	r4,r6
8112bad0:	3807883a 	mov	r3,r7
8112bad4:	e0800117 	ldw	r2,4(fp)
8112bad8:	e13ffd0d 	sth	r4,-12(fp)
8112badc:	e0fffe05 	stb	r3,-8(fp)
8112bae0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112bae4:	d0a08417 	ldw	r2,-32240(gp)
8112bae8:	d0e08417 	ldw	r3,-32240(gp)
8112baec:	18c00c03 	ldbu	r3,48(r3)
8112baf0:	18c00814 	ori	r3,r3,32
8112baf4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112baf8:	d0a08417 	ldw	r2,-32240(gp)
8112bafc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112bb00:	d0a08417 	ldw	r2,-32240(gp)
8112bb04:	e0ffff0b 	ldhu	r3,-4(fp)
8112bb08:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112bb0c:	d0a08417 	ldw	r2,-32240(gp)
8112bb10:	e0fffc17 	ldw	r3,-16(fp)
8112bb14:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112bb18:	e0bffc17 	ldw	r2,-16(fp)
8112bb1c:	e0fffd0b 	ldhu	r3,-12(fp)
8112bb20:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112bb24:	e0bffc17 	ldw	r2,-16(fp)
8112bb28:	e0fffe03 	ldbu	r3,-8(fp)
8112bb2c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112bb30:	d0e08417 	ldw	r3,-32240(gp)
8112bb34:	e0bffc17 	ldw	r2,-16(fp)
8112bb38:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112bb3c:	e0bffb17 	ldw	r2,-20(fp)
8112bb40:	10c00117 	ldw	r3,4(r2)
8112bb44:	e0bffc17 	ldw	r2,-16(fp)
8112bb48:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112bb4c:	e0bffc17 	ldw	r2,-16(fp)
8112bb50:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112bb54:	e0bffc17 	ldw	r2,-16(fp)
8112bb58:	e0fffb17 	ldw	r3,-20(fp)
8112bb5c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112bb60:	e0bffb17 	ldw	r2,-20(fp)
8112bb64:	10800117 	ldw	r2,4(r2)
8112bb68:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112bb6c:	e0bff917 	ldw	r2,-28(fp)
8112bb70:	10000326 	beq	r2,zero,8112bb80 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112bb74:	e0bff917 	ldw	r2,-28(fp)
8112bb78:	e0fffc17 	ldw	r3,-16(fp)
8112bb7c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112bb80:	e0bffb17 	ldw	r2,-20(fp)
8112bb84:	e0fffc17 	ldw	r3,-16(fp)
8112bb88:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112bb8c:	d0a08417 	ldw	r2,-32240(gp)
8112bb90:	10800d03 	ldbu	r2,52(r2)
8112bb94:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112bb98:	e0fffa03 	ldbu	r3,-24(fp)
8112bb9c:	e13ffa03 	ldbu	r4,-24(fp)
8112bba0:	d0a08044 	addi	r2,gp,-32255
8112bba4:	2085883a 	add	r2,r4,r2
8112bba8:	10800003 	ldbu	r2,0(r2)
8112bbac:	1009883a 	mov	r4,r2
8112bbb0:	d0a08417 	ldw	r2,-32240(gp)
8112bbb4:	10800d43 	ldbu	r2,53(r2)
8112bbb8:	0084303a 	nor	r2,zero,r2
8112bbbc:	2084703a 	and	r2,r4,r2
8112bbc0:	1009883a 	mov	r4,r2
8112bbc4:	d0a08044 	addi	r2,gp,-32255
8112bbc8:	1885883a 	add	r2,r3,r2
8112bbcc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112bbd0:	e0fffa03 	ldbu	r3,-24(fp)
8112bbd4:	d0a08044 	addi	r2,gp,-32255
8112bbd8:	1885883a 	add	r2,r3,r2
8112bbdc:	10800003 	ldbu	r2,0(r2)
8112bbe0:	10803fcc 	andi	r2,r2,255
8112bbe4:	1000071e 	bne	r2,zero,8112bc04 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112bbe8:	d0a08417 	ldw	r2,-32240(gp)
8112bbec:	10800d83 	ldbu	r2,54(r2)
8112bbf0:	0084303a 	nor	r2,zero,r2
8112bbf4:	1007883a 	mov	r3,r2
8112bbf8:	d0a08003 	ldbu	r2,-32256(gp)
8112bbfc:	1884703a 	and	r2,r3,r2
8112bc00:	d0a08005 	stb	r2,-32256(gp)
    }
}
8112bc04:	0001883a 	nop
8112bc08:	e037883a 	mov	sp,fp
8112bc0c:	df000017 	ldw	fp,0(sp)
8112bc10:	dec00104 	addi	sp,sp,4
8112bc14:	f800283a 	ret

8112bc18 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112bc18:	defffb04 	addi	sp,sp,-20
8112bc1c:	de00012e 	bgeu	sp,et,8112bc24 <OS_FlagInit+0xc>
8112bc20:	003b68fa 	trap	3
8112bc24:	dfc00415 	stw	ra,16(sp)
8112bc28:	df000315 	stw	fp,12(sp)
8112bc2c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112bc30:	0140dc04 	movi	r5,880
8112bc34:	01204574 	movhi	r4,33045
8112bc38:	213e6504 	addi	r4,r4,-1644
8112bc3c:	1129d440 	call	81129d44 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112bc40:	00a04574 	movhi	r2,33045
8112bc44:	10be6504 	addi	r2,r2,-1644
8112bc48:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112bc4c:	00a04574 	movhi	r2,33045
8112bc50:	10be7004 	addi	r2,r2,-1600
8112bc54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112bc58:	e03ffd0d 	sth	zero,-12(fp)
8112bc5c:	00001306 	br	8112bcac <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112bc60:	e0bffe17 	ldw	r2,-8(fp)
8112bc64:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112bc68:	e0bffe17 	ldw	r2,-8(fp)
8112bc6c:	e0ffff17 	ldw	r3,-4(fp)
8112bc70:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112bc74:	e0bffe17 	ldw	r2,-8(fp)
8112bc78:	00c00fc4 	movi	r3,63
8112bc7c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112bc80:	e0bffe17 	ldw	r2,-8(fp)
8112bc84:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112bc88:	e0bffe17 	ldw	r2,-8(fp)
8112bc8c:	10800b04 	addi	r2,r2,44
8112bc90:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112bc94:	e0bfff17 	ldw	r2,-4(fp)
8112bc98:	10800b04 	addi	r2,r2,44
8112bc9c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112bca0:	e0bffd0b 	ldhu	r2,-12(fp)
8112bca4:	10800044 	addi	r2,r2,1
8112bca8:	e0bffd0d 	sth	r2,-12(fp)
8112bcac:	e0bffd0b 	ldhu	r2,-12(fp)
8112bcb0:	108004f0 	cmpltui	r2,r2,19
8112bcb4:	103fea1e 	bne	r2,zero,8112bc60 <__reset+0xfb10bc60>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112bcb8:	e0bffe17 	ldw	r2,-8(fp)
8112bcbc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112bcc0:	e0bffe17 	ldw	r2,-8(fp)
8112bcc4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112bcc8:	e0bffe17 	ldw	r2,-8(fp)
8112bccc:	00c00fc4 	movi	r3,63
8112bcd0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112bcd4:	e0bffe17 	ldw	r2,-8(fp)
8112bcd8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112bcdc:	00a04574 	movhi	r2,33045
8112bce0:	10be6504 	addi	r2,r2,-1644
8112bce4:	d0a08815 	stw	r2,-32224(gp)
#endif
}
8112bce8:	0001883a 	nop
8112bcec:	e037883a 	mov	sp,fp
8112bcf0:	dfc00117 	ldw	ra,4(sp)
8112bcf4:	df000017 	ldw	fp,0(sp)
8112bcf8:	dec00204 	addi	sp,sp,8
8112bcfc:	f800283a 	ret

8112bd00 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112bd00:	defffa04 	addi	sp,sp,-24
8112bd04:	de00012e 	bgeu	sp,et,8112bd0c <OS_FlagTaskRdy+0xc>
8112bd08:	003b68fa 	trap	3
8112bd0c:	dfc00515 	stw	ra,20(sp)
8112bd10:	df000415 	stw	fp,16(sp)
8112bd14:	df000404 	addi	fp,sp,16
8112bd18:	e13ffe15 	stw	r4,-8(fp)
8112bd1c:	2805883a 	mov	r2,r5
8112bd20:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112bd24:	e0bffe17 	ldw	r2,-8(fp)
8112bd28:	10800217 	ldw	r2,8(r2)
8112bd2c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112bd30:	e0bffd17 	ldw	r2,-12(fp)
8112bd34:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112bd38:	e0bffd17 	ldw	r2,-12(fp)
8112bd3c:	e0ffff0b 	ldhu	r3,-4(fp)
8112bd40:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112bd44:	e0bffd17 	ldw	r2,-12(fp)
8112bd48:	10c00c03 	ldbu	r3,48(r2)
8112bd4c:	00bff7c4 	movi	r2,-33
8112bd50:	1884703a 	and	r2,r3,r2
8112bd54:	1007883a 	mov	r3,r2
8112bd58:	e0bffd17 	ldw	r2,-12(fp)
8112bd5c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112bd60:	e0bffd17 	ldw	r2,-12(fp)
8112bd64:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112bd68:	e0bffd17 	ldw	r2,-12(fp)
8112bd6c:	10800c03 	ldbu	r2,48(r2)
8112bd70:	10803fcc 	andi	r2,r2,255
8112bd74:	1000181e 	bne	r2,zero,8112bdd8 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112bd78:	e0bffd17 	ldw	r2,-12(fp)
8112bd7c:	10c00d83 	ldbu	r3,54(r2)
8112bd80:	d0a08003 	ldbu	r2,-32256(gp)
8112bd84:	1884b03a 	or	r2,r3,r2
8112bd88:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112bd8c:	e0bffd17 	ldw	r2,-12(fp)
8112bd90:	10800d03 	ldbu	r2,52(r2)
8112bd94:	10c03fcc 	andi	r3,r2,255
8112bd98:	e0bffd17 	ldw	r2,-12(fp)
8112bd9c:	10800d03 	ldbu	r2,52(r2)
8112bda0:	11003fcc 	andi	r4,r2,255
8112bda4:	d0a08044 	addi	r2,gp,-32255
8112bda8:	2085883a 	add	r2,r4,r2
8112bdac:	11000003 	ldbu	r4,0(r2)
8112bdb0:	e0bffd17 	ldw	r2,-12(fp)
8112bdb4:	10800d43 	ldbu	r2,53(r2)
8112bdb8:	2084b03a 	or	r2,r4,r2
8112bdbc:	1009883a 	mov	r4,r2
8112bdc0:	d0a08044 	addi	r2,gp,-32255
8112bdc4:	1885883a 	add	r2,r3,r2
8112bdc8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112bdcc:	00800044 	movi	r2,1
8112bdd0:	e0bffc05 	stb	r2,-16(fp)
8112bdd4:	00000106 	br	8112bddc <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112bdd8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112bddc:	e13ffe17 	ldw	r4,-8(fp)
8112bde0:	112bdfc0 	call	8112bdfc <OS_FlagUnlink>
    return (sched);
8112bde4:	e0bffc03 	ldbu	r2,-16(fp)
}
8112bde8:	e037883a 	mov	sp,fp
8112bdec:	dfc00117 	ldw	ra,4(sp)
8112bdf0:	df000017 	ldw	fp,0(sp)
8112bdf4:	dec00204 	addi	sp,sp,8
8112bdf8:	f800283a 	ret

8112bdfc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112bdfc:	defffa04 	addi	sp,sp,-24
8112be00:	de00012e 	bgeu	sp,et,8112be08 <OS_FlagUnlink+0xc>
8112be04:	003b68fa 	trap	3
8112be08:	df000515 	stw	fp,20(sp)
8112be0c:	df000504 	addi	fp,sp,20
8112be10:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112be14:	e0bfff17 	ldw	r2,-4(fp)
8112be18:	10800117 	ldw	r2,4(r2)
8112be1c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112be20:	e0bfff17 	ldw	r2,-4(fp)
8112be24:	10800017 	ldw	r2,0(r2)
8112be28:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112be2c:	e0bffb17 	ldw	r2,-20(fp)
8112be30:	10000b1e 	bne	r2,zero,8112be60 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112be34:	e0bfff17 	ldw	r2,-4(fp)
8112be38:	10800317 	ldw	r2,12(r2)
8112be3c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112be40:	e0bffd17 	ldw	r2,-12(fp)
8112be44:	e0fffc17 	ldw	r3,-16(fp)
8112be48:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112be4c:	e0bffc17 	ldw	r2,-16(fp)
8112be50:	10000b26 	beq	r2,zero,8112be80 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112be54:	e0bffc17 	ldw	r2,-16(fp)
8112be58:	10000115 	stw	zero,4(r2)
8112be5c:	00000806 	br	8112be80 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112be60:	e0bffb17 	ldw	r2,-20(fp)
8112be64:	e0fffc17 	ldw	r3,-16(fp)
8112be68:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112be6c:	e0bffc17 	ldw	r2,-16(fp)
8112be70:	10000326 	beq	r2,zero,8112be80 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112be74:	e0bffc17 	ldw	r2,-16(fp)
8112be78:	e0fffb17 	ldw	r3,-20(fp)
8112be7c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112be80:	e0bfff17 	ldw	r2,-4(fp)
8112be84:	10800217 	ldw	r2,8(r2)
8112be88:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112be8c:	e0bffe17 	ldw	r2,-8(fp)
8112be90:	10000a15 	stw	zero,40(r2)
#endif
}
8112be94:	0001883a 	nop
8112be98:	e037883a 	mov	sp,fp
8112be9c:	df000017 	ldw	fp,0(sp)
8112bea0:	dec00104 	addi	sp,sp,4
8112bea4:	f800283a 	ret

8112bea8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112bea8:	defff404 	addi	sp,sp,-48
8112beac:	de00012e 	bgeu	sp,et,8112beb4 <OSMemCreate+0xc>
8112beb0:	003b68fa 	trap	3
8112beb4:	df000b15 	stw	fp,44(sp)
8112beb8:	df000b04 	addi	fp,sp,44
8112bebc:	e13ffc15 	stw	r4,-16(fp)
8112bec0:	e17ffd15 	stw	r5,-12(fp)
8112bec4:	e1bffe15 	stw	r6,-8(fp)
8112bec8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112becc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112bed0:	e0bfff17 	ldw	r2,-4(fp)
8112bed4:	1000021e 	bne	r2,zero,8112bee0 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112bed8:	0005883a 	mov	r2,zero
8112bedc:	00006506 	br	8112c074 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112bee0:	e0bffc17 	ldw	r2,-16(fp)
8112bee4:	1000051e 	bne	r2,zero,8112befc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112bee8:	e0bfff17 	ldw	r2,-4(fp)
8112beec:	00c01884 	movi	r3,98
8112bef0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112bef4:	0005883a 	mov	r2,zero
8112bef8:	00005e06 	br	8112c074 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112befc:	e0bffc17 	ldw	r2,-16(fp)
8112bf00:	108000cc 	andi	r2,r2,3
8112bf04:	10000526 	beq	r2,zero,8112bf1c <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112bf08:	e0bfff17 	ldw	r2,-4(fp)
8112bf0c:	00c01884 	movi	r3,98
8112bf10:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112bf14:	0005883a 	mov	r2,zero
8112bf18:	00005606 	br	8112c074 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112bf1c:	e0bffd17 	ldw	r2,-12(fp)
8112bf20:	108000a8 	cmpgeui	r2,r2,2
8112bf24:	1000051e 	bne	r2,zero,8112bf3c <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112bf28:	e0bfff17 	ldw	r2,-4(fp)
8112bf2c:	00c016c4 	movi	r3,91
8112bf30:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112bf34:	0005883a 	mov	r2,zero
8112bf38:	00004e06 	br	8112c074 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112bf3c:	e0bffe17 	ldw	r2,-8(fp)
8112bf40:	10800128 	cmpgeui	r2,r2,4
8112bf44:	1000051e 	bne	r2,zero,8112bf5c <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112bf48:	e0bfff17 	ldw	r2,-4(fp)
8112bf4c:	00c01704 	movi	r3,92
8112bf50:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112bf54:	0005883a 	mov	r2,zero
8112bf58:	00004606 	br	8112c074 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bf5c:	0005303a 	rdctl	r2,status
8112bf60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bf64:	e0fffb17 	ldw	r3,-20(fp)
8112bf68:	00bfff84 	movi	r2,-2
8112bf6c:	1884703a 	and	r2,r3,r2
8112bf70:	1001703a 	wrctl	status,r2
  
  return context;
8112bf74:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112bf78:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112bf7c:	d0a07d17 	ldw	r2,-32268(gp)
8112bf80:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112bf84:	d0a07d17 	ldw	r2,-32268(gp)
8112bf88:	10000326 	beq	r2,zero,8112bf98 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112bf8c:	d0a07d17 	ldw	r2,-32268(gp)
8112bf90:	10800117 	ldw	r2,4(r2)
8112bf94:	d0a07d15 	stw	r2,-32268(gp)
8112bf98:	e0bff817 	ldw	r2,-32(fp)
8112bf9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bfa0:	e0bff917 	ldw	r2,-28(fp)
8112bfa4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112bfa8:	e0bffa17 	ldw	r2,-24(fp)
8112bfac:	1000051e 	bne	r2,zero,8112bfc4 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112bfb0:	e0bfff17 	ldw	r2,-4(fp)
8112bfb4:	00c01684 	movi	r3,90
8112bfb8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112bfbc:	0005883a 	mov	r2,zero
8112bfc0:	00002c06 	br	8112c074 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112bfc4:	e0bffc17 	ldw	r2,-16(fp)
8112bfc8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112bfcc:	e0fffc17 	ldw	r3,-16(fp)
8112bfd0:	e0bffe17 	ldw	r2,-8(fp)
8112bfd4:	1885883a 	add	r2,r3,r2
8112bfd8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112bfdc:	e03ff715 	stw	zero,-36(fp)
8112bfe0:	00000c06 	br	8112c014 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112bfe4:	e0bff617 	ldw	r2,-40(fp)
8112bfe8:	e0fff517 	ldw	r3,-44(fp)
8112bfec:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112bff0:	e0bff517 	ldw	r2,-44(fp)
8112bff4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112bff8:	e0fff517 	ldw	r3,-44(fp)
8112bffc:	e0bffe17 	ldw	r2,-8(fp)
8112c000:	1885883a 	add	r2,r3,r2
8112c004:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112c008:	e0bff717 	ldw	r2,-36(fp)
8112c00c:	10800044 	addi	r2,r2,1
8112c010:	e0bff715 	stw	r2,-36(fp)
8112c014:	e0bffd17 	ldw	r2,-12(fp)
8112c018:	10bfffc4 	addi	r2,r2,-1
8112c01c:	e0fff717 	ldw	r3,-36(fp)
8112c020:	18bff036 	bltu	r3,r2,8112bfe4 <__reset+0xfb10bfe4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112c024:	e0bff617 	ldw	r2,-40(fp)
8112c028:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112c02c:	e0bffa17 	ldw	r2,-24(fp)
8112c030:	e0fffc17 	ldw	r3,-16(fp)
8112c034:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112c038:	e0bffa17 	ldw	r2,-24(fp)
8112c03c:	e0fffc17 	ldw	r3,-16(fp)
8112c040:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112c044:	e0bffa17 	ldw	r2,-24(fp)
8112c048:	e0fffd17 	ldw	r3,-12(fp)
8112c04c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112c050:	e0bffa17 	ldw	r2,-24(fp)
8112c054:	e0fffd17 	ldw	r3,-12(fp)
8112c058:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112c05c:	e0bffa17 	ldw	r2,-24(fp)
8112c060:	e0fffe17 	ldw	r3,-8(fp)
8112c064:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112c068:	e0bfff17 	ldw	r2,-4(fp)
8112c06c:	10000005 	stb	zero,0(r2)
    return (pmem);
8112c070:	e0bffa17 	ldw	r2,-24(fp)
}
8112c074:	e037883a 	mov	sp,fp
8112c078:	df000017 	ldw	fp,0(sp)
8112c07c:	dec00104 	addi	sp,sp,4
8112c080:	f800283a 	ret

8112c084 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112c084:	defff804 	addi	sp,sp,-32
8112c088:	de00012e 	bgeu	sp,et,8112c090 <OSMemGet+0xc>
8112c08c:	003b68fa 	trap	3
8112c090:	df000715 	stw	fp,28(sp)
8112c094:	df000704 	addi	fp,sp,28
8112c098:	e13ffe15 	stw	r4,-8(fp)
8112c09c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c0a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112c0a4:	e0bfff17 	ldw	r2,-4(fp)
8112c0a8:	1000021e 	bne	r2,zero,8112c0b4 <OSMemGet+0x30>
        return ((void *)0);
8112c0ac:	0005883a 	mov	r2,zero
8112c0b0:	00002e06 	br	8112c16c <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112c0b4:	e0bffe17 	ldw	r2,-8(fp)
8112c0b8:	1000051e 	bne	r2,zero,8112c0d0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c0bc:	e0bfff17 	ldw	r2,-4(fp)
8112c0c0:	00c01804 	movi	r3,96
8112c0c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c0c8:	0005883a 	mov	r2,zero
8112c0cc:	00002706 	br	8112c16c <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c0d0:	0005303a 	rdctl	r2,status
8112c0d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c0d8:	e0fffd17 	ldw	r3,-12(fp)
8112c0dc:	00bfff84 	movi	r2,-2
8112c0e0:	1884703a 	and	r2,r3,r2
8112c0e4:	1001703a 	wrctl	status,r2
  
  return context;
8112c0e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c0ec:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112c0f0:	e0bffe17 	ldw	r2,-8(fp)
8112c0f4:	10800417 	ldw	r2,16(r2)
8112c0f8:	10001426 	beq	r2,zero,8112c14c <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112c0fc:	e0bffe17 	ldw	r2,-8(fp)
8112c100:	10800117 	ldw	r2,4(r2)
8112c104:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112c108:	e0bffb17 	ldw	r2,-20(fp)
8112c10c:	10c00017 	ldw	r3,0(r2)
8112c110:	e0bffe17 	ldw	r2,-8(fp)
8112c114:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112c118:	e0bffe17 	ldw	r2,-8(fp)
8112c11c:	10800417 	ldw	r2,16(r2)
8112c120:	10ffffc4 	addi	r3,r2,-1
8112c124:	e0bffe17 	ldw	r2,-8(fp)
8112c128:	10c00415 	stw	r3,16(r2)
8112c12c:	e0bff917 	ldw	r2,-28(fp)
8112c130:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c134:	e0bffa17 	ldw	r2,-24(fp)
8112c138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112c13c:	e0bfff17 	ldw	r2,-4(fp)
8112c140:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112c144:	e0bffb17 	ldw	r2,-20(fp)
8112c148:	00000806 	br	8112c16c <OSMemGet+0xe8>
8112c14c:	e0bff917 	ldw	r2,-28(fp)
8112c150:	e0bffc15 	stw	r2,-16(fp)
8112c154:	e0bffc17 	ldw	r2,-16(fp)
8112c158:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112c15c:	e0bfff17 	ldw	r2,-4(fp)
8112c160:	00c01744 	movi	r3,93
8112c164:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112c168:	0005883a 	mov	r2,zero
}
8112c16c:	e037883a 	mov	sp,fp
8112c170:	df000017 	ldw	fp,0(sp)
8112c174:	dec00104 	addi	sp,sp,4
8112c178:	f800283a 	ret

8112c17c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112c17c:	defff704 	addi	sp,sp,-36
8112c180:	de00012e 	bgeu	sp,et,8112c188 <OSMemNameGet+0xc>
8112c184:	003b68fa 	trap	3
8112c188:	dfc00815 	stw	ra,32(sp)
8112c18c:	df000715 	stw	fp,28(sp)
8112c190:	df000704 	addi	fp,sp,28
8112c194:	e13ffd15 	stw	r4,-12(fp)
8112c198:	e17ffe15 	stw	r5,-8(fp)
8112c19c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c1a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c1a4:	e0bfff17 	ldw	r2,-4(fp)
8112c1a8:	1000021e 	bne	r2,zero,8112c1b4 <OSMemNameGet+0x38>
        return (0);
8112c1ac:	0005883a 	mov	r2,zero
8112c1b0:	00002b06 	br	8112c260 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112c1b4:	e0bffd17 	ldw	r2,-12(fp)
8112c1b8:	1000051e 	bne	r2,zero,8112c1d0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c1bc:	e0bfff17 	ldw	r2,-4(fp)
8112c1c0:	00c01804 	movi	r3,96
8112c1c4:	10c00005 	stb	r3,0(r2)
        return (0);
8112c1c8:	0005883a 	mov	r2,zero
8112c1cc:	00002406 	br	8112c260 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c1d0:	e0bffe17 	ldw	r2,-8(fp)
8112c1d4:	1000051e 	bne	r2,zero,8112c1ec <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112c1d8:	e0bfff17 	ldw	r2,-4(fp)
8112c1dc:	00c00304 	movi	r3,12
8112c1e0:	10c00005 	stb	r3,0(r2)
        return (0);
8112c1e4:	0005883a 	mov	r2,zero
8112c1e8:	00001d06 	br	8112c260 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c1ec:	d0a08303 	ldbu	r2,-32244(gp)
8112c1f0:	10803fcc 	andi	r2,r2,255
8112c1f4:	10000526 	beq	r2,zero,8112c20c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112c1f8:	e0bfff17 	ldw	r2,-4(fp)
8112c1fc:	00c00444 	movi	r3,17
8112c200:	10c00005 	stb	r3,0(r2)
        return (0);
8112c204:	0005883a 	mov	r2,zero
8112c208:	00001506 	br	8112c260 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c20c:	0005303a 	rdctl	r2,status
8112c210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c214:	e0fffb17 	ldw	r3,-20(fp)
8112c218:	00bfff84 	movi	r2,-2
8112c21c:	1884703a 	and	r2,r3,r2
8112c220:	1001703a 	wrctl	status,r2
  
  return context;
8112c224:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112c228:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112c22c:	e0bffd17 	ldw	r2,-12(fp)
8112c230:	10800504 	addi	r2,r2,20
8112c234:	100b883a 	mov	r5,r2
8112c238:	e13ffe17 	ldw	r4,-8(fp)
8112c23c:	1129f640 	call	81129f64 <OS_StrCopy>
8112c240:	e0bffa05 	stb	r2,-24(fp)
8112c244:	e0bff917 	ldw	r2,-28(fp)
8112c248:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c24c:	e0bffc17 	ldw	r2,-16(fp)
8112c250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c254:	e0bfff17 	ldw	r2,-4(fp)
8112c258:	10000005 	stb	zero,0(r2)
    return (len);
8112c25c:	e0bffa03 	ldbu	r2,-24(fp)
}
8112c260:	e037883a 	mov	sp,fp
8112c264:	dfc00117 	ldw	ra,4(sp)
8112c268:	df000017 	ldw	fp,0(sp)
8112c26c:	dec00204 	addi	sp,sp,8
8112c270:	f800283a 	ret

8112c274 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112c274:	defff604 	addi	sp,sp,-40
8112c278:	de00012e 	bgeu	sp,et,8112c280 <OSMemNameSet+0xc>
8112c27c:	003b68fa 	trap	3
8112c280:	dfc00915 	stw	ra,36(sp)
8112c284:	df000815 	stw	fp,32(sp)
8112c288:	df000804 	addi	fp,sp,32
8112c28c:	e13ffd15 	stw	r4,-12(fp)
8112c290:	e17ffe15 	stw	r5,-8(fp)
8112c294:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c298:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c29c:	e0bfff17 	ldw	r2,-4(fp)
8112c2a0:	10003526 	beq	r2,zero,8112c378 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112c2a4:	e0bffd17 	ldw	r2,-12(fp)
8112c2a8:	1000041e 	bne	r2,zero,8112c2bc <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112c2ac:	e0bfff17 	ldw	r2,-4(fp)
8112c2b0:	00c01804 	movi	r3,96
8112c2b4:	10c00005 	stb	r3,0(r2)
        return;
8112c2b8:	00003006 	br	8112c37c <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c2bc:	e0bffe17 	ldw	r2,-8(fp)
8112c2c0:	1000041e 	bne	r2,zero,8112c2d4 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112c2c4:	e0bfff17 	ldw	r2,-4(fp)
8112c2c8:	00c00304 	movi	r3,12
8112c2cc:	10c00005 	stb	r3,0(r2)
        return;
8112c2d0:	00002a06 	br	8112c37c <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c2d4:	d0a08303 	ldbu	r2,-32244(gp)
8112c2d8:	10803fcc 	andi	r2,r2,255
8112c2dc:	10000426 	beq	r2,zero,8112c2f0 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112c2e0:	e0bfff17 	ldw	r2,-4(fp)
8112c2e4:	00c00484 	movi	r3,18
8112c2e8:	10c00005 	stb	r3,0(r2)
        return;
8112c2ec:	00002306 	br	8112c37c <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c2f0:	0005303a 	rdctl	r2,status
8112c2f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c2f8:	e0fffc17 	ldw	r3,-16(fp)
8112c2fc:	00bfff84 	movi	r2,-2
8112c300:	1884703a 	and	r2,r3,r2
8112c304:	1001703a 	wrctl	status,r2
  
  return context;
8112c308:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c30c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112c310:	e13ffe17 	ldw	r4,-8(fp)
8112c314:	1129fe00 	call	81129fe0 <OS_StrLen>
8112c318:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112c31c:	e0bffa03 	ldbu	r2,-24(fp)
8112c320:	10800830 	cmpltui	r2,r2,32
8112c324:	1000081e 	bne	r2,zero,8112c348 <OSMemNameSet+0xd4>
8112c328:	e0bff817 	ldw	r2,-32(fp)
8112c32c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c330:	e0bff917 	ldw	r2,-28(fp)
8112c334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112c338:	e0bfff17 	ldw	r2,-4(fp)
8112c33c:	00c018c4 	movi	r3,99
8112c340:	10c00005 	stb	r3,0(r2)
        return;
8112c344:	00000d06 	br	8112c37c <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112c348:	e0bffd17 	ldw	r2,-12(fp)
8112c34c:	10800504 	addi	r2,r2,20
8112c350:	e17ffe17 	ldw	r5,-8(fp)
8112c354:	1009883a 	mov	r4,r2
8112c358:	1129f640 	call	81129f64 <OS_StrCopy>
8112c35c:	e0bff817 	ldw	r2,-32(fp)
8112c360:	e0bffb15 	stw	r2,-20(fp)
8112c364:	e0bffb17 	ldw	r2,-20(fp)
8112c368:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c36c:	e0bfff17 	ldw	r2,-4(fp)
8112c370:	10000005 	stb	zero,0(r2)
8112c374:	00000106 	br	8112c37c <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112c378:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112c37c:	e037883a 	mov	sp,fp
8112c380:	dfc00117 	ldw	ra,4(sp)
8112c384:	df000017 	ldw	fp,0(sp)
8112c388:	dec00204 	addi	sp,sp,8
8112c38c:	f800283a 	ret

8112c390 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112c390:	defff904 	addi	sp,sp,-28
8112c394:	de00012e 	bgeu	sp,et,8112c39c <OSMemPut+0xc>
8112c398:	003b68fa 	trap	3
8112c39c:	df000615 	stw	fp,24(sp)
8112c3a0:	df000604 	addi	fp,sp,24
8112c3a4:	e13ffe15 	stw	r4,-8(fp)
8112c3a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c3ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112c3b0:	e0bffe17 	ldw	r2,-8(fp)
8112c3b4:	1000021e 	bne	r2,zero,8112c3c0 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112c3b8:	00801804 	movi	r2,96
8112c3bc:	00002806 	br	8112c460 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112c3c0:	e0bfff17 	ldw	r2,-4(fp)
8112c3c4:	1000021e 	bne	r2,zero,8112c3d0 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112c3c8:	008017c4 	movi	r2,95
8112c3cc:	00002406 	br	8112c460 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c3d0:	0005303a 	rdctl	r2,status
8112c3d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c3d8:	e0fffd17 	ldw	r3,-12(fp)
8112c3dc:	00bfff84 	movi	r2,-2
8112c3e0:	1884703a 	and	r2,r3,r2
8112c3e4:	1001703a 	wrctl	status,r2
  
  return context;
8112c3e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c3ec:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112c3f0:	e0bffe17 	ldw	r2,-8(fp)
8112c3f4:	10c00417 	ldw	r3,16(r2)
8112c3f8:	e0bffe17 	ldw	r2,-8(fp)
8112c3fc:	10800317 	ldw	r2,12(r2)
8112c400:	18800636 	bltu	r3,r2,8112c41c <OSMemPut+0x8c>
8112c404:	e0bffa17 	ldw	r2,-24(fp)
8112c408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c40c:	e0bffb17 	ldw	r2,-20(fp)
8112c410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112c414:	00801784 	movi	r2,94
8112c418:	00001106 	br	8112c460 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112c41c:	e0bffe17 	ldw	r2,-8(fp)
8112c420:	10c00117 	ldw	r3,4(r2)
8112c424:	e0bfff17 	ldw	r2,-4(fp)
8112c428:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112c42c:	e0bffe17 	ldw	r2,-8(fp)
8112c430:	e0ffff17 	ldw	r3,-4(fp)
8112c434:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112c438:	e0bffe17 	ldw	r2,-8(fp)
8112c43c:	10800417 	ldw	r2,16(r2)
8112c440:	10c00044 	addi	r3,r2,1
8112c444:	e0bffe17 	ldw	r2,-8(fp)
8112c448:	10c00415 	stw	r3,16(r2)
8112c44c:	e0bffa17 	ldw	r2,-24(fp)
8112c450:	e0bffc15 	stw	r2,-16(fp)
8112c454:	e0bffc17 	ldw	r2,-16(fp)
8112c458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112c45c:	0005883a 	mov	r2,zero
}
8112c460:	e037883a 	mov	sp,fp
8112c464:	df000017 	ldw	fp,0(sp)
8112c468:	dec00104 	addi	sp,sp,4
8112c46c:	f800283a 	ret

8112c470 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112c470:	defffa04 	addi	sp,sp,-24
8112c474:	de00012e 	bgeu	sp,et,8112c47c <OSMemQuery+0xc>
8112c478:	003b68fa 	trap	3
8112c47c:	df000515 	stw	fp,20(sp)
8112c480:	df000504 	addi	fp,sp,20
8112c484:	e13ffe15 	stw	r4,-8(fp)
8112c488:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c48c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112c490:	e0bffe17 	ldw	r2,-8(fp)
8112c494:	1000021e 	bne	r2,zero,8112c4a0 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112c498:	00801804 	movi	r2,96
8112c49c:	00002c06 	br	8112c550 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112c4a0:	e0bfff17 	ldw	r2,-4(fp)
8112c4a4:	1000021e 	bne	r2,zero,8112c4b0 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112c4a8:	00801844 	movi	r2,97
8112c4ac:	00002806 	br	8112c550 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c4b0:	0005303a 	rdctl	r2,status
8112c4b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c4b8:	e0fffc17 	ldw	r3,-16(fp)
8112c4bc:	00bfff84 	movi	r2,-2
8112c4c0:	1884703a 	and	r2,r3,r2
8112c4c4:	1001703a 	wrctl	status,r2
  
  return context;
8112c4c8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c4cc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112c4d0:	e0bffe17 	ldw	r2,-8(fp)
8112c4d4:	10c00017 	ldw	r3,0(r2)
8112c4d8:	e0bfff17 	ldw	r2,-4(fp)
8112c4dc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112c4e0:	e0bffe17 	ldw	r2,-8(fp)
8112c4e4:	10c00117 	ldw	r3,4(r2)
8112c4e8:	e0bfff17 	ldw	r2,-4(fp)
8112c4ec:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112c4f0:	e0bffe17 	ldw	r2,-8(fp)
8112c4f4:	10c00217 	ldw	r3,8(r2)
8112c4f8:	e0bfff17 	ldw	r2,-4(fp)
8112c4fc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112c500:	e0bffe17 	ldw	r2,-8(fp)
8112c504:	10c00317 	ldw	r3,12(r2)
8112c508:	e0bfff17 	ldw	r2,-4(fp)
8112c50c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112c510:	e0bffe17 	ldw	r2,-8(fp)
8112c514:	10c00417 	ldw	r3,16(r2)
8112c518:	e0bfff17 	ldw	r2,-4(fp)
8112c51c:	10c00415 	stw	r3,16(r2)
8112c520:	e0bffb17 	ldw	r2,-20(fp)
8112c524:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c528:	e0bffd17 	ldw	r2,-12(fp)
8112c52c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112c530:	e0bfff17 	ldw	r2,-4(fp)
8112c534:	10c00317 	ldw	r3,12(r2)
8112c538:	e0bfff17 	ldw	r2,-4(fp)
8112c53c:	10800417 	ldw	r2,16(r2)
8112c540:	1887c83a 	sub	r3,r3,r2
8112c544:	e0bfff17 	ldw	r2,-4(fp)
8112c548:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112c54c:	0005883a 	mov	r2,zero
}
8112c550:	e037883a 	mov	sp,fp
8112c554:	df000017 	ldw	fp,0(sp)
8112c558:	dec00104 	addi	sp,sp,4
8112c55c:	f800283a 	ret

8112c560 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112c560:	defffc04 	addi	sp,sp,-16
8112c564:	de00012e 	bgeu	sp,et,8112c56c <OS_MemInit+0xc>
8112c568:	003b68fa 	trap	3
8112c56c:	dfc00315 	stw	ra,12(sp)
8112c570:	df000215 	stw	fp,8(sp)
8112c574:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112c578:	01430c04 	movi	r5,3120
8112c57c:	01204574 	movhi	r4,33045
8112c580:	213fa904 	addi	r4,r4,-348
8112c584:	1129d440 	call	81129d44 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112c588:	00a04574 	movhi	r2,33045
8112c58c:	10bfa904 	addi	r2,r2,-348
8112c590:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112c594:	e03fff0d 	sth	zero,-4(fp)
8112c598:	00001306 	br	8112c5e8 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112c59c:	e0bfff0b 	ldhu	r2,-4(fp)
8112c5a0:	10800044 	addi	r2,r2,1
8112c5a4:	10c00d24 	muli	r3,r2,52
8112c5a8:	00a04574 	movhi	r2,33045
8112c5ac:	10bfa904 	addi	r2,r2,-348
8112c5b0:	1887883a 	add	r3,r3,r2
8112c5b4:	e0bffe17 	ldw	r2,-8(fp)
8112c5b8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112c5bc:	e0bffe17 	ldw	r2,-8(fp)
8112c5c0:	00c00fc4 	movi	r3,63
8112c5c4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112c5c8:	e0bffe17 	ldw	r2,-8(fp)
8112c5cc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112c5d0:	e0bffe17 	ldw	r2,-8(fp)
8112c5d4:	10800d04 	addi	r2,r2,52
8112c5d8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112c5dc:	e0bfff0b 	ldhu	r2,-4(fp)
8112c5e0:	10800044 	addi	r2,r2,1
8112c5e4:	e0bfff0d 	sth	r2,-4(fp)
8112c5e8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c5ec:	10800ef0 	cmpltui	r2,r2,59
8112c5f0:	103fea1e 	bne	r2,zero,8112c59c <__reset+0xfb10c59c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112c5f4:	e0bffe17 	ldw	r2,-8(fp)
8112c5f8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112c5fc:	e0bffe17 	ldw	r2,-8(fp)
8112c600:	00c00fc4 	movi	r3,63
8112c604:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112c608:	e0bffe17 	ldw	r2,-8(fp)
8112c60c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112c610:	00a04574 	movhi	r2,33045
8112c614:	10bfa904 	addi	r2,r2,-348
8112c618:	d0a07d15 	stw	r2,-32268(gp)
#endif
}
8112c61c:	0001883a 	nop
8112c620:	e037883a 	mov	sp,fp
8112c624:	dfc00117 	ldw	ra,4(sp)
8112c628:	df000017 	ldw	fp,0(sp)
8112c62c:	dec00204 	addi	sp,sp,8
8112c630:	f800283a 	ret

8112c634 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112c634:	defff704 	addi	sp,sp,-36
8112c638:	de00012e 	bgeu	sp,et,8112c640 <OSMutexAccept+0xc>
8112c63c:	003b68fa 	trap	3
8112c640:	df000815 	stw	fp,32(sp)
8112c644:	df000804 	addi	fp,sp,32
8112c648:	e13ffe15 	stw	r4,-8(fp)
8112c64c:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112c650:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112c654:	e0bfff17 	ldw	r2,-4(fp)
8112c658:	1000021e 	bne	r2,zero,8112c664 <OSMutexAccept+0x30>
        return (OS_FALSE);
8112c65c:	0005883a 	mov	r2,zero
8112c660:	00005b06 	br	8112c7d0 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112c664:	e0bffe17 	ldw	r2,-8(fp)
8112c668:	1000051e 	bne	r2,zero,8112c680 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112c66c:	e0bfff17 	ldw	r2,-4(fp)
8112c670:	00c00104 	movi	r3,4
8112c674:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c678:	0005883a 	mov	r2,zero
8112c67c:	00005406 	br	8112c7d0 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112c680:	e0bffe17 	ldw	r2,-8(fp)
8112c684:	10800003 	ldbu	r2,0(r2)
8112c688:	10803fcc 	andi	r2,r2,255
8112c68c:	10800120 	cmpeqi	r2,r2,4
8112c690:	1000051e 	bne	r2,zero,8112c6a8 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112c694:	e0bfff17 	ldw	r2,-4(fp)
8112c698:	00c00044 	movi	r3,1
8112c69c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c6a0:	0005883a 	mov	r2,zero
8112c6a4:	00004a06 	br	8112c7d0 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112c6a8:	d0a08303 	ldbu	r2,-32244(gp)
8112c6ac:	10803fcc 	andi	r2,r2,255
8112c6b0:	10000526 	beq	r2,zero,8112c6c8 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112c6b4:	e0bfff17 	ldw	r2,-4(fp)
8112c6b8:	00c00084 	movi	r3,2
8112c6bc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112c6c0:	0005883a 	mov	r2,zero
8112c6c4:	00004206 	br	8112c7d0 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c6c8:	0005303a 	rdctl	r2,status
8112c6cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c6d0:	e0fffd17 	ldw	r3,-12(fp)
8112c6d4:	00bfff84 	movi	r2,-2
8112c6d8:	1884703a 	and	r2,r3,r2
8112c6dc:	1001703a 	wrctl	status,r2
  
  return context;
8112c6e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112c6e4:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112c6e8:	e0bffe17 	ldw	r2,-8(fp)
8112c6ec:	1080020b 	ldhu	r2,8(r2)
8112c6f0:	10bfffcc 	andi	r2,r2,65535
8112c6f4:	1004d23a 	srli	r2,r2,8
8112c6f8:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112c6fc:	e0bffe17 	ldw	r2,-8(fp)
8112c700:	1080020b 	ldhu	r2,8(r2)
8112c704:	10bfffcc 	andi	r2,r2,65535
8112c708:	10803fcc 	andi	r2,r2,255
8112c70c:	10803fd8 	cmpnei	r2,r2,255
8112c710:	1000281e 	bne	r2,zero,8112c7b4 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112c714:	e0bffe17 	ldw	r2,-8(fp)
8112c718:	10c0020b 	ldhu	r3,8(r2)
8112c71c:	00bfc004 	movi	r2,-256
8112c720:	1884703a 	and	r2,r3,r2
8112c724:	1007883a 	mov	r3,r2
8112c728:	e0bffe17 	ldw	r2,-8(fp)
8112c72c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112c730:	e0bffe17 	ldw	r2,-8(fp)
8112c734:	10c0020b 	ldhu	r3,8(r2)
8112c738:	d0a08417 	ldw	r2,-32240(gp)
8112c73c:	10800c83 	ldbu	r2,50(r2)
8112c740:	10803fcc 	andi	r2,r2,255
8112c744:	1884b03a 	or	r2,r3,r2
8112c748:	1007883a 	mov	r3,r2
8112c74c:	e0bffe17 	ldw	r2,-8(fp)
8112c750:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112c754:	d0e08417 	ldw	r3,-32240(gp)
8112c758:	e0bffe17 	ldw	r2,-8(fp)
8112c75c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112c760:	d0a08417 	ldw	r2,-32240(gp)
8112c764:	10800c83 	ldbu	r2,50(r2)
8112c768:	10803fcc 	andi	r2,r2,255
8112c76c:	e0fffa03 	ldbu	r3,-24(fp)
8112c770:	18800836 	bltu	r3,r2,8112c794 <OSMutexAccept+0x160>
8112c774:	e0bff817 	ldw	r2,-32(fp)
8112c778:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c77c:	e0bff917 	ldw	r2,-28(fp)
8112c780:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112c784:	e0bfff17 	ldw	r2,-4(fp)
8112c788:	00c01e04 	movi	r3,120
8112c78c:	10c00005 	stb	r3,0(r2)
8112c790:	00000606 	br	8112c7ac <OSMutexAccept+0x178>
8112c794:	e0bff817 	ldw	r2,-32(fp)
8112c798:	e0bffb15 	stw	r2,-20(fp)
8112c79c:	e0bffb17 	ldw	r2,-20(fp)
8112c7a0:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112c7a4:	e0bfff17 	ldw	r2,-4(fp)
8112c7a8:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112c7ac:	00800044 	movi	r2,1
8112c7b0:	00000706 	br	8112c7d0 <OSMutexAccept+0x19c>
8112c7b4:	e0bff817 	ldw	r2,-32(fp)
8112c7b8:	e0bffc15 	stw	r2,-16(fp)
8112c7bc:	e0bffc17 	ldw	r2,-16(fp)
8112c7c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c7c4:	e0bfff17 	ldw	r2,-4(fp)
8112c7c8:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112c7cc:	0005883a 	mov	r2,zero
}
8112c7d0:	e037883a 	mov	sp,fp
8112c7d4:	df000017 	ldw	fp,0(sp)
8112c7d8:	dec00104 	addi	sp,sp,4
8112c7dc:	f800283a 	ret

8112c7e0 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112c7e0:	defff604 	addi	sp,sp,-40
8112c7e4:	de00012e 	bgeu	sp,et,8112c7ec <OSMutexCreate+0xc>
8112c7e8:	003b68fa 	trap	3
8112c7ec:	dfc00915 	stw	ra,36(sp)
8112c7f0:	df000815 	stw	fp,32(sp)
8112c7f4:	df000804 	addi	fp,sp,32
8112c7f8:	2005883a 	mov	r2,r4
8112c7fc:	e17fff15 	stw	r5,-4(fp)
8112c800:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112c804:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c808:	e0bfff17 	ldw	r2,-4(fp)
8112c80c:	1000021e 	bne	r2,zero,8112c818 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112c810:	0005883a 	mov	r2,zero
8112c814:	00006106 	br	8112c99c <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112c818:	e0bffe03 	ldbu	r2,-8(fp)
8112c81c:	10800a30 	cmpltui	r2,r2,40
8112c820:	1000051e 	bne	r2,zero,8112c838 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112c824:	e0bfff17 	ldw	r2,-4(fp)
8112c828:	00c00a84 	movi	r3,42
8112c82c:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112c830:	0005883a 	mov	r2,zero
8112c834:	00005906 	br	8112c99c <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112c838:	d0a08303 	ldbu	r2,-32244(gp)
8112c83c:	10803fcc 	andi	r2,r2,255
8112c840:	10000526 	beq	r2,zero,8112c858 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112c844:	e0bfff17 	ldw	r2,-4(fp)
8112c848:	00c00404 	movi	r3,16
8112c84c:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112c850:	0005883a 	mov	r2,zero
8112c854:	00005106 	br	8112c99c <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c858:	0005303a 	rdctl	r2,status
8112c85c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c860:	e0fffd17 	ldw	r3,-12(fp)
8112c864:	00bfff84 	movi	r2,-2
8112c868:	1884703a 	and	r2,r3,r2
8112c86c:	1001703a 	wrctl	status,r2
  
  return context;
8112c870:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112c874:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112c878:	e0fffe03 	ldbu	r3,-8(fp)
8112c87c:	00a04574 	movhi	r2,33045
8112c880:	108fcf04 	addi	r2,r2,16188
8112c884:	18c7883a 	add	r3,r3,r3
8112c888:	18c7883a 	add	r3,r3,r3
8112c88c:	10c5883a 	add	r2,r2,r3
8112c890:	10800017 	ldw	r2,0(r2)
8112c894:	10000926 	beq	r2,zero,8112c8bc <OSMutexCreate+0xdc>
8112c898:	e0bff817 	ldw	r2,-32(fp)
8112c89c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c8a0:	e0bff917 	ldw	r2,-28(fp)
8112c8a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112c8a8:	e0bfff17 	ldw	r2,-4(fp)
8112c8ac:	00c00a04 	movi	r3,40
8112c8b0:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112c8b4:	0005883a 	mov	r2,zero
8112c8b8:	00003806 	br	8112c99c <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112c8bc:	e0fffe03 	ldbu	r3,-8(fp)
8112c8c0:	00a04574 	movhi	r2,33045
8112c8c4:	108fcf04 	addi	r2,r2,16188
8112c8c8:	18c7883a 	add	r3,r3,r3
8112c8cc:	18c7883a 	add	r3,r3,r3
8112c8d0:	10c5883a 	add	r2,r2,r3
8112c8d4:	00c00044 	movi	r3,1
8112c8d8:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112c8dc:	d0a08217 	ldw	r2,-32248(gp)
8112c8e0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112c8e4:	e0bffb17 	ldw	r2,-20(fp)
8112c8e8:	1000101e 	bne	r2,zero,8112c92c <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112c8ec:	e0fffe03 	ldbu	r3,-8(fp)
8112c8f0:	00a04574 	movhi	r2,33045
8112c8f4:	108fcf04 	addi	r2,r2,16188
8112c8f8:	18c7883a 	add	r3,r3,r3
8112c8fc:	18c7883a 	add	r3,r3,r3
8112c900:	10c5883a 	add	r2,r2,r3
8112c904:	10000015 	stw	zero,0(r2)
8112c908:	e0bff817 	ldw	r2,-32(fp)
8112c90c:	e0bffa15 	stw	r2,-24(fp)
8112c910:	e0bffa17 	ldw	r2,-24(fp)
8112c914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112c918:	e0bfff17 	ldw	r2,-4(fp)
8112c91c:	00c00104 	movi	r3,4
8112c920:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112c924:	e0bffb17 	ldw	r2,-20(fp)
8112c928:	00001c06 	br	8112c99c <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112c92c:	d0a08217 	ldw	r2,-32248(gp)
8112c930:	10800117 	ldw	r2,4(r2)
8112c934:	d0a08215 	stw	r2,-32248(gp)
8112c938:	e0bff817 	ldw	r2,-32(fp)
8112c93c:	e0bffc15 	stw	r2,-16(fp)
8112c940:	e0bffc17 	ldw	r2,-16(fp)
8112c944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112c948:	e0bffb17 	ldw	r2,-20(fp)
8112c94c:	00c00104 	movi	r3,4
8112c950:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112c954:	e0bffe03 	ldbu	r2,-8(fp)
8112c958:	1004923a 	slli	r2,r2,8
8112c95c:	10803fd4 	ori	r2,r2,255
8112c960:	1007883a 	mov	r3,r2
8112c964:	e0bffb17 	ldw	r2,-20(fp)
8112c968:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112c96c:	e0bffb17 	ldw	r2,-20(fp)
8112c970:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112c974:	e0bffb17 	ldw	r2,-20(fp)
8112c978:	00c00fc4 	movi	r3,63
8112c97c:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112c980:	e0bffb17 	ldw	r2,-20(fp)
8112c984:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112c988:	e13ffb17 	ldw	r4,-20(fp)
8112c98c:	112992c0 	call	8112992c <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112c990:	e0bfff17 	ldw	r2,-4(fp)
8112c994:	10000005 	stb	zero,0(r2)
    return (pevent);
8112c998:	e0bffb17 	ldw	r2,-20(fp)
}
8112c99c:	e037883a 	mov	sp,fp
8112c9a0:	dfc00117 	ldw	ra,4(sp)
8112c9a4:	df000017 	ldw	fp,0(sp)
8112c9a8:	dec00204 	addi	sp,sp,8
8112c9ac:	f800283a 	ret

8112c9b0 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112c9b0:	defff004 	addi	sp,sp,-64
8112c9b4:	de00012e 	bgeu	sp,et,8112c9bc <OSMutexDel+0xc>
8112c9b8:	003b68fa 	trap	3
8112c9bc:	dfc00f15 	stw	ra,60(sp)
8112c9c0:	df000e15 	stw	fp,56(sp)
8112c9c4:	df000e04 	addi	fp,sp,56
8112c9c8:	e13ffd15 	stw	r4,-12(fp)
8112c9cc:	2805883a 	mov	r2,r5
8112c9d0:	e1bfff15 	stw	r6,-4(fp)
8112c9d4:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112c9d8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c9dc:	e0bfff17 	ldw	r2,-4(fp)
8112c9e0:	1000021e 	bne	r2,zero,8112c9ec <OSMutexDel+0x3c>
        return (pevent);
8112c9e4:	e0bffd17 	ldw	r2,-12(fp)
8112c9e8:	0000ad06 	br	8112cca0 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112c9ec:	e0bffd17 	ldw	r2,-12(fp)
8112c9f0:	1000051e 	bne	r2,zero,8112ca08 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112c9f4:	e0bfff17 	ldw	r2,-4(fp)
8112c9f8:	00c00104 	movi	r3,4
8112c9fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ca00:	e0bffd17 	ldw	r2,-12(fp)
8112ca04:	0000a606 	br	8112cca0 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112ca08:	e0bffd17 	ldw	r2,-12(fp)
8112ca0c:	10800003 	ldbu	r2,0(r2)
8112ca10:	10803fcc 	andi	r2,r2,255
8112ca14:	10800120 	cmpeqi	r2,r2,4
8112ca18:	1000051e 	bne	r2,zero,8112ca30 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ca1c:	e0bfff17 	ldw	r2,-4(fp)
8112ca20:	00c00044 	movi	r3,1
8112ca24:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ca28:	e0bffd17 	ldw	r2,-12(fp)
8112ca2c:	00009c06 	br	8112cca0 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ca30:	d0a08303 	ldbu	r2,-32244(gp)
8112ca34:	10803fcc 	andi	r2,r2,255
8112ca38:	10000526 	beq	r2,zero,8112ca50 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112ca3c:	e0bfff17 	ldw	r2,-4(fp)
8112ca40:	00c003c4 	movi	r3,15
8112ca44:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ca48:	e0bffd17 	ldw	r2,-12(fp)
8112ca4c:	00009406 	br	8112cca0 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ca50:	0005303a 	rdctl	r2,status
8112ca54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ca58:	e0fffc17 	ldw	r3,-16(fp)
8112ca5c:	00bfff84 	movi	r2,-2
8112ca60:	1884703a 	and	r2,r3,r2
8112ca64:	1001703a 	wrctl	status,r2
  
  return context;
8112ca68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ca6c:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112ca70:	e0bffd17 	ldw	r2,-12(fp)
8112ca74:	10800283 	ldbu	r2,10(r2)
8112ca78:	10803fcc 	andi	r2,r2,255
8112ca7c:	10000326 	beq	r2,zero,8112ca8c <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112ca80:	00800044 	movi	r2,1
8112ca84:	e0bff205 	stb	r2,-56(fp)
8112ca88:	00000106 	br	8112ca90 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112ca8c:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112ca90:	e0bffe03 	ldbu	r2,-8(fp)
8112ca94:	10000326 	beq	r2,zero,8112caa4 <OSMutexDel+0xf4>
8112ca98:	10800060 	cmpeqi	r2,r2,1
8112ca9c:	10002f1e 	bne	r2,zero,8112cb5c <OSMutexDel+0x1ac>
8112caa0:	00007406 	br	8112cc74 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112caa4:	e0bff203 	ldbu	r2,-56(fp)
8112caa8:	1000221e 	bne	r2,zero,8112cb34 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112caac:	e0bffd17 	ldw	r2,-12(fp)
8112cab0:	00c00fc4 	movi	r3,63
8112cab4:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112cab8:	e0bffd17 	ldw	r2,-12(fp)
8112cabc:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112cac0:	e0bffd17 	ldw	r2,-12(fp)
8112cac4:	1080020b 	ldhu	r2,8(r2)
8112cac8:	10bfffcc 	andi	r2,r2,65535
8112cacc:	1004d23a 	srli	r2,r2,8
8112cad0:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112cad4:	e0fff603 	ldbu	r3,-40(fp)
8112cad8:	00a04574 	movhi	r2,33045
8112cadc:	108fcf04 	addi	r2,r2,16188
8112cae0:	18c7883a 	add	r3,r3,r3
8112cae4:	18c7883a 	add	r3,r3,r3
8112cae8:	10c5883a 	add	r2,r2,r3
8112caec:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112caf0:	e0bffd17 	ldw	r2,-12(fp)
8112caf4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112caf8:	d0e08217 	ldw	r3,-32248(gp)
8112cafc:	e0bffd17 	ldw	r2,-12(fp)
8112cb00:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112cb04:	e0bffd17 	ldw	r2,-12(fp)
8112cb08:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112cb0c:	e0bffd17 	ldw	r2,-12(fp)
8112cb10:	d0a08215 	stw	r2,-32248(gp)
8112cb14:	e0bff417 	ldw	r2,-48(fp)
8112cb18:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cb1c:	e0bff517 	ldw	r2,-44(fp)
8112cb20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112cb24:	e0bfff17 	ldw	r2,-4(fp)
8112cb28:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112cb2c:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112cb30:	00005a06 	br	8112cc9c <OSMutexDel+0x2ec>
8112cb34:	e0bff417 	ldw	r2,-48(fp)
8112cb38:	e0bff715 	stw	r2,-36(fp)
8112cb3c:	e0bff717 	ldw	r2,-36(fp)
8112cb40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112cb44:	e0bfff17 	ldw	r2,-4(fp)
8112cb48:	00c01244 	movi	r3,73
8112cb4c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112cb50:	e0bffd17 	ldw	r2,-12(fp)
8112cb54:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112cb58:	00005006 	br	8112cc9c <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112cb5c:	e0bffd17 	ldw	r2,-12(fp)
8112cb60:	1080020b 	ldhu	r2,8(r2)
8112cb64:	10bfffcc 	andi	r2,r2,65535
8112cb68:	1004d23a 	srli	r2,r2,8
8112cb6c:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112cb70:	e0bffd17 	ldw	r2,-12(fp)
8112cb74:	1080020b 	ldhu	r2,8(r2)
8112cb78:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112cb7c:	e0bffd17 	ldw	r2,-12(fp)
8112cb80:	10800117 	ldw	r2,4(r2)
8112cb84:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112cb88:	e0bffa17 	ldw	r2,-24(fp)
8112cb8c:	10000f26 	beq	r2,zero,8112cbcc <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112cb90:	e0bffa17 	ldw	r2,-24(fp)
8112cb94:	10800c83 	ldbu	r2,50(r2)
8112cb98:	10c03fcc 	andi	r3,r2,255
8112cb9c:	e0bff603 	ldbu	r2,-40(fp)
8112cba0:	18800a1e 	bne	r3,r2,8112cbcc <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112cba4:	e0bff903 	ldbu	r2,-28(fp)
8112cba8:	100b883a 	mov	r5,r2
8112cbac:	e13ffa17 	ldw	r4,-24(fp)
8112cbb0:	112d5ec0 	call	8112d5ec <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112cbb4:	00000506 	br	8112cbcc <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112cbb8:	000f883a 	mov	r7,zero
8112cbbc:	01800404 	movi	r6,16
8112cbc0:	000b883a 	mov	r5,zero
8112cbc4:	e13ffd17 	ldw	r4,-12(fp)
8112cbc8:	11293540 	call	81129354 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112cbcc:	e0bffd17 	ldw	r2,-12(fp)
8112cbd0:	10800283 	ldbu	r2,10(r2)
8112cbd4:	10803fcc 	andi	r2,r2,255
8112cbd8:	103ff71e 	bne	r2,zero,8112cbb8 <__reset+0xfb10cbb8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112cbdc:	e0bffd17 	ldw	r2,-12(fp)
8112cbe0:	00c00fc4 	movi	r3,63
8112cbe4:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112cbe8:	e0bffd17 	ldw	r2,-12(fp)
8112cbec:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112cbf0:	e0bffd17 	ldw	r2,-12(fp)
8112cbf4:	1080020b 	ldhu	r2,8(r2)
8112cbf8:	10bfffcc 	andi	r2,r2,65535
8112cbfc:	1004d23a 	srli	r2,r2,8
8112cc00:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112cc04:	e0fff603 	ldbu	r3,-40(fp)
8112cc08:	00a04574 	movhi	r2,33045
8112cc0c:	108fcf04 	addi	r2,r2,16188
8112cc10:	18c7883a 	add	r3,r3,r3
8112cc14:	18c7883a 	add	r3,r3,r3
8112cc18:	10c5883a 	add	r2,r2,r3
8112cc1c:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112cc20:	e0bffd17 	ldw	r2,-12(fp)
8112cc24:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112cc28:	d0e08217 	ldw	r3,-32248(gp)
8112cc2c:	e0bffd17 	ldw	r2,-12(fp)
8112cc30:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112cc34:	e0bffd17 	ldw	r2,-12(fp)
8112cc38:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112cc3c:	e0bffd17 	ldw	r2,-12(fp)
8112cc40:	d0a08215 	stw	r2,-32248(gp)
8112cc44:	e0bff417 	ldw	r2,-48(fp)
8112cc48:	e0bff815 	stw	r2,-32(fp)
8112cc4c:	e0bff817 	ldw	r2,-32(fp)
8112cc50:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112cc54:	e0bff203 	ldbu	r2,-56(fp)
8112cc58:	10800058 	cmpnei	r2,r2,1
8112cc5c:	1000011e 	bne	r2,zero,8112cc64 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112cc60:	1129e100 	call	81129e10 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112cc64:	e0bfff17 	ldw	r2,-4(fp)
8112cc68:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112cc6c:	e03ff315 	stw	zero,-52(fp)
             break;
8112cc70:	00000a06 	br	8112cc9c <OSMutexDel+0x2ec>
8112cc74:	e0bff417 	ldw	r2,-48(fp)
8112cc78:	e0bffb15 	stw	r2,-20(fp)
8112cc7c:	e0bffb17 	ldw	r2,-20(fp)
8112cc80:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112cc84:	e0bfff17 	ldw	r2,-4(fp)
8112cc88:	00c001c4 	movi	r3,7
8112cc8c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112cc90:	e0bffd17 	ldw	r2,-12(fp)
8112cc94:	e0bff315 	stw	r2,-52(fp)
             break;
8112cc98:	0001883a 	nop
    }
    return (pevent_return);
8112cc9c:	e0bff317 	ldw	r2,-52(fp)
}
8112cca0:	e037883a 	mov	sp,fp
8112cca4:	dfc00117 	ldw	ra,4(sp)
8112cca8:	df000017 	ldw	fp,0(sp)
8112ccac:	dec00204 	addi	sp,sp,8
8112ccb0:	f800283a 	ret

8112ccb4 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ccb4:	deffee04 	addi	sp,sp,-72
8112ccb8:	de00012e 	bgeu	sp,et,8112ccc0 <OSMutexPend+0xc>
8112ccbc:	003b68fa 	trap	3
8112ccc0:	dfc01115 	stw	ra,68(sp)
8112ccc4:	df001015 	stw	fp,64(sp)
8112ccc8:	df001004 	addi	fp,sp,64
8112cccc:	e13ffd15 	stw	r4,-12(fp)
8112ccd0:	2805883a 	mov	r2,r5
8112ccd4:	e1bfff15 	stw	r6,-4(fp)
8112ccd8:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ccdc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112cce0:	e0bfff17 	ldw	r2,-4(fp)
8112cce4:	10015626 	beq	r2,zero,8112d240 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112cce8:	e0bffd17 	ldw	r2,-12(fp)
8112ccec:	1000041e 	bne	r2,zero,8112cd00 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ccf0:	e0bfff17 	ldw	r2,-4(fp)
8112ccf4:	00c00104 	movi	r3,4
8112ccf8:	10c00005 	stb	r3,0(r2)
        return;
8112ccfc:	00015106 	br	8112d244 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112cd00:	e0bffd17 	ldw	r2,-12(fp)
8112cd04:	10800003 	ldbu	r2,0(r2)
8112cd08:	10803fcc 	andi	r2,r2,255
8112cd0c:	10800120 	cmpeqi	r2,r2,4
8112cd10:	1000041e 	bne	r2,zero,8112cd24 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112cd14:	e0bfff17 	ldw	r2,-4(fp)
8112cd18:	00c00044 	movi	r3,1
8112cd1c:	10c00005 	stb	r3,0(r2)
        return;
8112cd20:	00014806 	br	8112d244 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112cd24:	d0a08303 	ldbu	r2,-32244(gp)
8112cd28:	10803fcc 	andi	r2,r2,255
8112cd2c:	10000426 	beq	r2,zero,8112cd40 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112cd30:	e0bfff17 	ldw	r2,-4(fp)
8112cd34:	00c00084 	movi	r3,2
8112cd38:	10c00005 	stb	r3,0(r2)
        return;
8112cd3c:	00014106 	br	8112d244 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112cd40:	d0a07103 	ldbu	r2,-32316(gp)
8112cd44:	10803fcc 	andi	r2,r2,255
8112cd48:	10000426 	beq	r2,zero,8112cd5c <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112cd4c:	e0bfff17 	ldw	r2,-4(fp)
8112cd50:	00c00344 	movi	r3,13
8112cd54:	10c00005 	stb	r3,0(r2)
        return;
8112cd58:	00013a06 	br	8112d244 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cd5c:	0005303a 	rdctl	r2,status
8112cd60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cd64:	e0fffc17 	ldw	r3,-16(fp)
8112cd68:	00bfff84 	movi	r2,-2
8112cd6c:	1884703a 	and	r2,r3,r2
8112cd70:	1001703a 	wrctl	status,r2
  
  return context;
8112cd74:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112cd78:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112cd7c:	e0bffd17 	ldw	r2,-12(fp)
8112cd80:	1080020b 	ldhu	r2,8(r2)
8112cd84:	10bfffcc 	andi	r2,r2,65535
8112cd88:	1004d23a 	srli	r2,r2,8
8112cd8c:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112cd90:	e0bffd17 	ldw	r2,-12(fp)
8112cd94:	1080020b 	ldhu	r2,8(r2)
8112cd98:	10803fcc 	andi	r2,r2,255
8112cd9c:	10803fd8 	cmpnei	r2,r2,255
8112cda0:	1000271e 	bne	r2,zero,8112ce40 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112cda4:	e0bffd17 	ldw	r2,-12(fp)
8112cda8:	10c0020b 	ldhu	r3,8(r2)
8112cdac:	00bfc004 	movi	r2,-256
8112cdb0:	1884703a 	and	r2,r3,r2
8112cdb4:	1007883a 	mov	r3,r2
8112cdb8:	e0bffd17 	ldw	r2,-12(fp)
8112cdbc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112cdc0:	e0bffd17 	ldw	r2,-12(fp)
8112cdc4:	10c0020b 	ldhu	r3,8(r2)
8112cdc8:	d0a08417 	ldw	r2,-32240(gp)
8112cdcc:	10800c83 	ldbu	r2,50(r2)
8112cdd0:	10803fcc 	andi	r2,r2,255
8112cdd4:	1884b03a 	or	r2,r3,r2
8112cdd8:	1007883a 	mov	r3,r2
8112cddc:	e0bffd17 	ldw	r2,-12(fp)
8112cde0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112cde4:	d0e08417 	ldw	r3,-32240(gp)
8112cde8:	e0bffd17 	ldw	r2,-12(fp)
8112cdec:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112cdf0:	d0a08417 	ldw	r2,-32240(gp)
8112cdf4:	10800c83 	ldbu	r2,50(r2)
8112cdf8:	10803fcc 	andi	r2,r2,255
8112cdfc:	e0fff303 	ldbu	r3,-52(fp)
8112ce00:	18800836 	bltu	r3,r2,8112ce24 <OSMutexPend+0x170>
8112ce04:	e0bff117 	ldw	r2,-60(fp)
8112ce08:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ce0c:	e0bff217 	ldw	r2,-56(fp)
8112ce10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112ce14:	e0bfff17 	ldw	r2,-4(fp)
8112ce18:	00c01e04 	movi	r3,120
8112ce1c:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112ce20:	00010806 	br	8112d244 <OSMutexPend+0x590>
8112ce24:	e0bff117 	ldw	r2,-60(fp)
8112ce28:	e0bff415 	stw	r2,-48(fp)
8112ce2c:	e0bff417 	ldw	r2,-48(fp)
8112ce30:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112ce34:	e0bfff17 	ldw	r2,-4(fp)
8112ce38:	10000005 	stb	zero,0(r2)
        }
        return;
8112ce3c:	00010106 	br	8112d244 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112ce40:	e0bffd17 	ldw	r2,-12(fp)
8112ce44:	1080020b 	ldhu	r2,8(r2)
8112ce48:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112ce4c:	e0bffd17 	ldw	r2,-12(fp)
8112ce50:	10800117 	ldw	r2,4(r2)
8112ce54:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112ce58:	e0bff717 	ldw	r2,-36(fp)
8112ce5c:	10800c83 	ldbu	r2,50(r2)
8112ce60:	10803fcc 	andi	r2,r2,255
8112ce64:	e0fff303 	ldbu	r3,-52(fp)
8112ce68:	1880b92e 	bgeu	r3,r2,8112d150 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112ce6c:	d0a08417 	ldw	r2,-32240(gp)
8112ce70:	10800c83 	ldbu	r2,50(r2)
8112ce74:	10c03fcc 	andi	r3,r2,255
8112ce78:	e0bff603 	ldbu	r2,-40(fp)
8112ce7c:	1880b42e 	bgeu	r3,r2,8112d150 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112ce80:	e0bff717 	ldw	r2,-36(fp)
8112ce84:	10800d03 	ldbu	r2,52(r2)
8112ce88:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112ce8c:	e0fff803 	ldbu	r3,-32(fp)
8112ce90:	d0a08044 	addi	r2,gp,-32255
8112ce94:	1885883a 	add	r2,r3,r2
8112ce98:	10c00003 	ldbu	r3,0(r2)
8112ce9c:	e0bff717 	ldw	r2,-36(fp)
8112cea0:	10800d43 	ldbu	r2,53(r2)
8112cea4:	1884703a 	and	r2,r3,r2
8112cea8:	10803fcc 	andi	r2,r2,255
8112ceac:	10001e26 	beq	r2,zero,8112cf28 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112ceb0:	e0fff803 	ldbu	r3,-32(fp)
8112ceb4:	e13ff803 	ldbu	r4,-32(fp)
8112ceb8:	d0a08044 	addi	r2,gp,-32255
8112cebc:	2085883a 	add	r2,r4,r2
8112cec0:	10800003 	ldbu	r2,0(r2)
8112cec4:	1009883a 	mov	r4,r2
8112cec8:	e0bff717 	ldw	r2,-36(fp)
8112cecc:	10800d43 	ldbu	r2,53(r2)
8112ced0:	0084303a 	nor	r2,zero,r2
8112ced4:	2084703a 	and	r2,r4,r2
8112ced8:	1009883a 	mov	r4,r2
8112cedc:	d0a08044 	addi	r2,gp,-32255
8112cee0:	1885883a 	add	r2,r3,r2
8112cee4:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112cee8:	e0fff803 	ldbu	r3,-32(fp)
8112ceec:	d0a08044 	addi	r2,gp,-32255
8112cef0:	1885883a 	add	r2,r3,r2
8112cef4:	10800003 	ldbu	r2,0(r2)
8112cef8:	10803fcc 	andi	r2,r2,255
8112cefc:	1000071e 	bne	r2,zero,8112cf1c <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112cf00:	e0bff717 	ldw	r2,-36(fp)
8112cf04:	10800d83 	ldbu	r2,54(r2)
8112cf08:	0084303a 	nor	r2,zero,r2
8112cf0c:	1007883a 	mov	r3,r2
8112cf10:	d0a08003 	ldbu	r2,-32256(gp)
8112cf14:	1884703a 	and	r2,r3,r2
8112cf18:	d0a08005 	stb	r2,-32256(gp)
                }
                rdy = OS_TRUE;
8112cf1c:	00800044 	movi	r2,1
8112cf20:	e0bff005 	stb	r2,-64(fp)
8112cf24:	00002a06 	br	8112cfd0 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112cf28:	e0bff717 	ldw	r2,-36(fp)
8112cf2c:	10800717 	ldw	r2,28(r2)
8112cf30:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112cf34:	e0bff917 	ldw	r2,-28(fp)
8112cf38:	10002426 	beq	r2,zero,8112cfcc <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112cf3c:	e0bff717 	ldw	r2,-36(fp)
8112cf40:	10800d03 	ldbu	r2,52(r2)
8112cf44:	10803fcc 	andi	r2,r2,255
8112cf48:	e0fff717 	ldw	r3,-36(fp)
8112cf4c:	18c00d03 	ldbu	r3,52(r3)
8112cf50:	18c03fcc 	andi	r3,r3,255
8112cf54:	e13ff917 	ldw	r4,-28(fp)
8112cf58:	20c7883a 	add	r3,r4,r3
8112cf5c:	18c002c4 	addi	r3,r3,11
8112cf60:	18c00003 	ldbu	r3,0(r3)
8112cf64:	1809883a 	mov	r4,r3
8112cf68:	e0fff717 	ldw	r3,-36(fp)
8112cf6c:	18c00d43 	ldbu	r3,53(r3)
8112cf70:	00c6303a 	nor	r3,zero,r3
8112cf74:	20c6703a 	and	r3,r4,r3
8112cf78:	1809883a 	mov	r4,r3
8112cf7c:	e0fff917 	ldw	r3,-28(fp)
8112cf80:	1887883a 	add	r3,r3,r2
8112cf84:	18c002c4 	addi	r3,r3,11
8112cf88:	19000005 	stb	r4,0(r3)
8112cf8c:	e0fff917 	ldw	r3,-28(fp)
8112cf90:	1885883a 	add	r2,r3,r2
8112cf94:	108002c4 	addi	r2,r2,11
8112cf98:	10800003 	ldbu	r2,0(r2)
8112cf9c:	10803fcc 	andi	r2,r2,255
8112cfa0:	10000a1e 	bne	r2,zero,8112cfcc <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112cfa4:	e0bff917 	ldw	r2,-28(fp)
8112cfa8:	10800283 	ldbu	r2,10(r2)
8112cfac:	1007883a 	mov	r3,r2
8112cfb0:	e0bff717 	ldw	r2,-36(fp)
8112cfb4:	10800d83 	ldbu	r2,54(r2)
8112cfb8:	0084303a 	nor	r2,zero,r2
8112cfbc:	1884703a 	and	r2,r3,r2
8112cfc0:	1007883a 	mov	r3,r2
8112cfc4:	e0bff917 	ldw	r2,-28(fp)
8112cfc8:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112cfcc:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112cfd0:	e0bff717 	ldw	r2,-36(fp)
8112cfd4:	e0fff303 	ldbu	r3,-52(fp)
8112cfd8:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112cfdc:	e0bff717 	ldw	r2,-36(fp)
8112cfe0:	10800c83 	ldbu	r2,50(r2)
8112cfe4:	10803fcc 	andi	r2,r2,255
8112cfe8:	1004d0fa 	srli	r2,r2,3
8112cfec:	1007883a 	mov	r3,r2
8112cff0:	e0bff717 	ldw	r2,-36(fp)
8112cff4:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112cff8:	e0bff717 	ldw	r2,-36(fp)
8112cffc:	10800c83 	ldbu	r2,50(r2)
8112d000:	108001cc 	andi	r2,r2,7
8112d004:	1007883a 	mov	r3,r2
8112d008:	e0bff717 	ldw	r2,-36(fp)
8112d00c:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112d010:	e0bff717 	ldw	r2,-36(fp)
8112d014:	10800d03 	ldbu	r2,52(r2)
8112d018:	10803fcc 	andi	r2,r2,255
8112d01c:	00c00044 	movi	r3,1
8112d020:	1884983a 	sll	r2,r3,r2
8112d024:	1007883a 	mov	r3,r2
8112d028:	e0bff717 	ldw	r2,-36(fp)
8112d02c:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112d030:	e0bff717 	ldw	r2,-36(fp)
8112d034:	10800cc3 	ldbu	r2,51(r2)
8112d038:	10803fcc 	andi	r2,r2,255
8112d03c:	00c00044 	movi	r3,1
8112d040:	1884983a 	sll	r2,r3,r2
8112d044:	1007883a 	mov	r3,r2
8112d048:	e0bff717 	ldw	r2,-36(fp)
8112d04c:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112d050:	e0bff003 	ldbu	r2,-64(fp)
8112d054:	10800058 	cmpnei	r2,r2,1
8112d058:	1000161e 	bne	r2,zero,8112d0b4 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112d05c:	e0bff717 	ldw	r2,-36(fp)
8112d060:	10c00d83 	ldbu	r3,54(r2)
8112d064:	d0a08003 	ldbu	r2,-32256(gp)
8112d068:	1884b03a 	or	r2,r3,r2
8112d06c:	d0a08005 	stb	r2,-32256(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d070:	e0bff717 	ldw	r2,-36(fp)
8112d074:	10800d03 	ldbu	r2,52(r2)
8112d078:	10c03fcc 	andi	r3,r2,255
8112d07c:	e0bff717 	ldw	r2,-36(fp)
8112d080:	10800d03 	ldbu	r2,52(r2)
8112d084:	11003fcc 	andi	r4,r2,255
8112d088:	d0a08044 	addi	r2,gp,-32255
8112d08c:	2085883a 	add	r2,r4,r2
8112d090:	11000003 	ldbu	r4,0(r2)
8112d094:	e0bff717 	ldw	r2,-36(fp)
8112d098:	10800d43 	ldbu	r2,53(r2)
8112d09c:	2084b03a 	or	r2,r4,r2
8112d0a0:	1009883a 	mov	r4,r2
8112d0a4:	d0a08044 	addi	r2,gp,-32255
8112d0a8:	1885883a 	add	r2,r3,r2
8112d0ac:	11000005 	stb	r4,0(r2)
8112d0b0:	00001f06 	br	8112d130 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112d0b4:	e0bff717 	ldw	r2,-36(fp)
8112d0b8:	10800717 	ldw	r2,28(r2)
8112d0bc:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112d0c0:	e0bff917 	ldw	r2,-28(fp)
8112d0c4:	10001a26 	beq	r2,zero,8112d130 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112d0c8:	e0bff917 	ldw	r2,-28(fp)
8112d0cc:	10c00283 	ldbu	r3,10(r2)
8112d0d0:	e0bff717 	ldw	r2,-36(fp)
8112d0d4:	10800d83 	ldbu	r2,54(r2)
8112d0d8:	1884b03a 	or	r2,r3,r2
8112d0dc:	1007883a 	mov	r3,r2
8112d0e0:	e0bff917 	ldw	r2,-28(fp)
8112d0e4:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d0e8:	e0bff717 	ldw	r2,-36(fp)
8112d0ec:	10800d03 	ldbu	r2,52(r2)
8112d0f0:	10803fcc 	andi	r2,r2,255
8112d0f4:	e0fff717 	ldw	r3,-36(fp)
8112d0f8:	18c00d03 	ldbu	r3,52(r3)
8112d0fc:	18c03fcc 	andi	r3,r3,255
8112d100:	e13ff917 	ldw	r4,-28(fp)
8112d104:	20c7883a 	add	r3,r4,r3
8112d108:	18c002c4 	addi	r3,r3,11
8112d10c:	19000003 	ldbu	r4,0(r3)
8112d110:	e0fff717 	ldw	r3,-36(fp)
8112d114:	18c00d43 	ldbu	r3,53(r3)
8112d118:	20c6b03a 	or	r3,r4,r3
8112d11c:	1809883a 	mov	r4,r3
8112d120:	e0fff917 	ldw	r3,-28(fp)
8112d124:	1885883a 	add	r2,r3,r2
8112d128:	108002c4 	addi	r2,r2,11
8112d12c:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112d130:	e0fff303 	ldbu	r3,-52(fp)
8112d134:	00a04574 	movhi	r2,33045
8112d138:	108fcf04 	addi	r2,r2,16188
8112d13c:	18c7883a 	add	r3,r3,r3
8112d140:	18c7883a 	add	r3,r3,r3
8112d144:	10c5883a 	add	r2,r2,r3
8112d148:	e0fff717 	ldw	r3,-36(fp)
8112d14c:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112d150:	d0a08417 	ldw	r2,-32240(gp)
8112d154:	d0e08417 	ldw	r3,-32240(gp)
8112d158:	18c00c03 	ldbu	r3,48(r3)
8112d15c:	18c00414 	ori	r3,r3,16
8112d160:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112d164:	d0a08417 	ldw	r2,-32240(gp)
8112d168:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112d16c:	d0a08417 	ldw	r2,-32240(gp)
8112d170:	e0fffe0b 	ldhu	r3,-8(fp)
8112d174:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112d178:	e13ffd17 	ldw	r4,-12(fp)
8112d17c:	11294f40 	call	811294f4 <OS_EventTaskWait>
8112d180:	e0bff117 	ldw	r2,-60(fp)
8112d184:	e0bffb15 	stw	r2,-20(fp)
8112d188:	e0bffb17 	ldw	r2,-20(fp)
8112d18c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112d190:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d194:	0005303a 	rdctl	r2,status
8112d198:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d19c:	e0fff517 	ldw	r3,-44(fp)
8112d1a0:	00bfff84 	movi	r2,-2
8112d1a4:	1884703a 	and	r2,r3,r2
8112d1a8:	1001703a 	wrctl	status,r2
  
  return context;
8112d1ac:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112d1b0:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112d1b4:	d0a08417 	ldw	r2,-32240(gp)
8112d1b8:	10800c43 	ldbu	r2,49(r2)
8112d1bc:	10803fcc 	andi	r2,r2,255
8112d1c0:	10000326 	beq	r2,zero,8112d1d0 <OSMutexPend+0x51c>
8112d1c4:	108000a0 	cmpeqi	r2,r2,2
8112d1c8:	1000041e 	bne	r2,zero,8112d1dc <OSMutexPend+0x528>
8112d1cc:	00000706 	br	8112d1ec <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112d1d0:	e0bfff17 	ldw	r2,-4(fp)
8112d1d4:	10000005 	stb	zero,0(r2)
             break;
8112d1d8:	00000c06 	br	8112d20c <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112d1dc:	e0bfff17 	ldw	r2,-4(fp)
8112d1e0:	00c00384 	movi	r3,14
8112d1e4:	10c00005 	stb	r3,0(r2)
             break;
8112d1e8:	00000806 	br	8112d20c <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112d1ec:	d0a08417 	ldw	r2,-32240(gp)
8112d1f0:	e17ffd17 	ldw	r5,-12(fp)
8112d1f4:	1009883a 	mov	r4,r2
8112d1f8:	11297640 	call	81129764 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112d1fc:	e0bfff17 	ldw	r2,-4(fp)
8112d200:	00c00284 	movi	r3,10
8112d204:	10c00005 	stb	r3,0(r2)
             break;
8112d208:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112d20c:	d0a08417 	ldw	r2,-32240(gp)
8112d210:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112d214:	d0a08417 	ldw	r2,-32240(gp)
8112d218:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112d21c:	d0a08417 	ldw	r2,-32240(gp)
8112d220:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112d224:	d0a08417 	ldw	r2,-32240(gp)
8112d228:	10000815 	stw	zero,32(r2)
8112d22c:	e0bff117 	ldw	r2,-60(fp)
8112d230:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d234:	e0bffa17 	ldw	r2,-24(fp)
8112d238:	1001703a 	wrctl	status,r2
8112d23c:	00000106 	br	8112d244 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112d240:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112d244:	e037883a 	mov	sp,fp
8112d248:	dfc00117 	ldw	ra,4(sp)
8112d24c:	df000017 	ldw	fp,0(sp)
8112d250:	dec00204 	addi	sp,sp,8
8112d254:	f800283a 	ret

8112d258 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112d258:	defff604 	addi	sp,sp,-40
8112d25c:	de00012e 	bgeu	sp,et,8112d264 <OSMutexPost+0xc>
8112d260:	003b68fa 	trap	3
8112d264:	dfc00915 	stw	ra,36(sp)
8112d268:	df000815 	stw	fp,32(sp)
8112d26c:	df000804 	addi	fp,sp,32
8112d270:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d274:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112d278:	d0a08303 	ldbu	r2,-32244(gp)
8112d27c:	10803fcc 	andi	r2,r2,255
8112d280:	10000226 	beq	r2,zero,8112d28c <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112d284:	00800144 	movi	r2,5
8112d288:	00007606 	br	8112d464 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d28c:	e0bfff17 	ldw	r2,-4(fp)
8112d290:	1000021e 	bne	r2,zero,8112d29c <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112d294:	00800104 	movi	r2,4
8112d298:	00007206 	br	8112d464 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112d29c:	e0bfff17 	ldw	r2,-4(fp)
8112d2a0:	10800003 	ldbu	r2,0(r2)
8112d2a4:	10803fcc 	andi	r2,r2,255
8112d2a8:	10800120 	cmpeqi	r2,r2,4
8112d2ac:	1000021e 	bne	r2,zero,8112d2b8 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112d2b0:	00800044 	movi	r2,1
8112d2b4:	00006b06 	br	8112d464 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d2b8:	0005303a 	rdctl	r2,status
8112d2bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d2c0:	e0fffe17 	ldw	r3,-8(fp)
8112d2c4:	00bfff84 	movi	r2,-2
8112d2c8:	1884703a 	and	r2,r3,r2
8112d2cc:	1001703a 	wrctl	status,r2
  
  return context;
8112d2d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112d2d4:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112d2d8:	e0bfff17 	ldw	r2,-4(fp)
8112d2dc:	1080020b 	ldhu	r2,8(r2)
8112d2e0:	10bfffcc 	andi	r2,r2,65535
8112d2e4:	1004d23a 	srli	r2,r2,8
8112d2e8:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112d2ec:	e0bfff17 	ldw	r2,-4(fp)
8112d2f0:	1080020b 	ldhu	r2,8(r2)
8112d2f4:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112d2f8:	e0bfff17 	ldw	r2,-4(fp)
8112d2fc:	10c00117 	ldw	r3,4(r2)
8112d300:	d0a08417 	ldw	r2,-32240(gp)
8112d304:	18800626 	beq	r3,r2,8112d320 <OSMutexPost+0xc8>
8112d308:	e0bff817 	ldw	r2,-32(fp)
8112d30c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d310:	e0bff917 	ldw	r2,-28(fp)
8112d314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112d318:	00801904 	movi	r2,100
8112d31c:	00005106 	br	8112d464 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112d320:	d0a08417 	ldw	r2,-32240(gp)
8112d324:	10800c83 	ldbu	r2,50(r2)
8112d328:	10c03fcc 	andi	r3,r2,255
8112d32c:	e0bffa03 	ldbu	r2,-24(fp)
8112d330:	1880051e 	bne	r3,r2,8112d348 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112d334:	d0a08417 	ldw	r2,-32240(gp)
8112d338:	e0fffa43 	ldbu	r3,-23(fp)
8112d33c:	180b883a 	mov	r5,r3
8112d340:	1009883a 	mov	r4,r2
8112d344:	112d5ec0 	call	8112d5ec <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112d348:	e0fffa03 	ldbu	r3,-24(fp)
8112d34c:	00a04574 	movhi	r2,33045
8112d350:	108fcf04 	addi	r2,r2,16188
8112d354:	18c7883a 	add	r3,r3,r3
8112d358:	18c7883a 	add	r3,r3,r3
8112d35c:	10c5883a 	add	r2,r2,r3
8112d360:	00c00044 	movi	r3,1
8112d364:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112d368:	e0bfff17 	ldw	r2,-4(fp)
8112d36c:	10800283 	ldbu	r2,10(r2)
8112d370:	10803fcc 	andi	r2,r2,255
8112d374:	10002e26 	beq	r2,zero,8112d430 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112d378:	000f883a 	mov	r7,zero
8112d37c:	01800404 	movi	r6,16
8112d380:	000b883a 	mov	r5,zero
8112d384:	e13fff17 	ldw	r4,-4(fp)
8112d388:	11293540 	call	81129354 <OS_EventTaskRdy>
8112d38c:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112d390:	e0bfff17 	ldw	r2,-4(fp)
8112d394:	10c0020b 	ldhu	r3,8(r2)
8112d398:	00bfc004 	movi	r2,-256
8112d39c:	1884703a 	and	r2,r3,r2
8112d3a0:	1007883a 	mov	r3,r2
8112d3a4:	e0bfff17 	ldw	r2,-4(fp)
8112d3a8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112d3ac:	e0bfff17 	ldw	r2,-4(fp)
8112d3b0:	10c0020b 	ldhu	r3,8(r2)
8112d3b4:	e0bffa43 	ldbu	r2,-23(fp)
8112d3b8:	1884b03a 	or	r2,r3,r2
8112d3bc:	1007883a 	mov	r3,r2
8112d3c0:	e0bfff17 	ldw	r2,-4(fp)
8112d3c4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112d3c8:	e0fffa43 	ldbu	r3,-23(fp)
8112d3cc:	00a04574 	movhi	r2,33045
8112d3d0:	108fcf04 	addi	r2,r2,16188
8112d3d4:	18c7883a 	add	r3,r3,r3
8112d3d8:	18c7883a 	add	r3,r3,r3
8112d3dc:	10c5883a 	add	r2,r2,r3
8112d3e0:	10c00017 	ldw	r3,0(r2)
8112d3e4:	e0bfff17 	ldw	r2,-4(fp)
8112d3e8:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112d3ec:	e0bffa43 	ldbu	r2,-23(fp)
8112d3f0:	e0fffa03 	ldbu	r3,-24(fp)
8112d3f4:	18800736 	bltu	r3,r2,8112d414 <OSMutexPost+0x1bc>
8112d3f8:	e0bff817 	ldw	r2,-32(fp)
8112d3fc:	e0bffb15 	stw	r2,-20(fp)
8112d400:	e0bffb17 	ldw	r2,-20(fp)
8112d404:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112d408:	1129e100 	call	81129e10 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112d40c:	00801e04 	movi	r2,120
8112d410:	00001406 	br	8112d464 <OSMutexPost+0x20c>
8112d414:	e0bff817 	ldw	r2,-32(fp)
8112d418:	e0bffc15 	stw	r2,-16(fp)
8112d41c:	e0bffc17 	ldw	r2,-16(fp)
8112d420:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112d424:	1129e100 	call	81129e10 <OS_Sched>
            return (OS_ERR_NONE);
8112d428:	0005883a 	mov	r2,zero
8112d42c:	00000d06 	br	8112d464 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112d430:	e0bfff17 	ldw	r2,-4(fp)
8112d434:	1080020b 	ldhu	r2,8(r2)
8112d438:	10803fd4 	ori	r2,r2,255
8112d43c:	1007883a 	mov	r3,r2
8112d440:	e0bfff17 	ldw	r2,-4(fp)
8112d444:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112d448:	e0bfff17 	ldw	r2,-4(fp)
8112d44c:	10000115 	stw	zero,4(r2)
8112d450:	e0bff817 	ldw	r2,-32(fp)
8112d454:	e0bffd15 	stw	r2,-12(fp)
8112d458:	e0bffd17 	ldw	r2,-12(fp)
8112d45c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d460:	0005883a 	mov	r2,zero
}
8112d464:	e037883a 	mov	sp,fp
8112d468:	dfc00117 	ldw	ra,4(sp)
8112d46c:	df000017 	ldw	fp,0(sp)
8112d470:	dec00204 	addi	sp,sp,8
8112d474:	f800283a 	ret

8112d478 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112d478:	defff704 	addi	sp,sp,-36
8112d47c:	de00012e 	bgeu	sp,et,8112d484 <OSMutexQuery+0xc>
8112d480:	003b68fa 	trap	3
8112d484:	df000815 	stw	fp,32(sp)
8112d488:	df000804 	addi	fp,sp,32
8112d48c:	e13ffe15 	stw	r4,-8(fp)
8112d490:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d494:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112d498:	d0a08303 	ldbu	r2,-32244(gp)
8112d49c:	10803fcc 	andi	r2,r2,255
8112d4a0:	10000226 	beq	r2,zero,8112d4ac <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112d4a4:	00800184 	movi	r2,6
8112d4a8:	00004c06 	br	8112d5dc <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112d4ac:	e0bffe17 	ldw	r2,-8(fp)
8112d4b0:	1000021e 	bne	r2,zero,8112d4bc <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112d4b4:	00800104 	movi	r2,4
8112d4b8:	00004806 	br	8112d5dc <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112d4bc:	e0bfff17 	ldw	r2,-4(fp)
8112d4c0:	1000021e 	bne	r2,zero,8112d4cc <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112d4c4:	00800244 	movi	r2,9
8112d4c8:	00004406 	br	8112d5dc <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112d4cc:	e0bffe17 	ldw	r2,-8(fp)
8112d4d0:	10800003 	ldbu	r2,0(r2)
8112d4d4:	10803fcc 	andi	r2,r2,255
8112d4d8:	10800120 	cmpeqi	r2,r2,4
8112d4dc:	1000021e 	bne	r2,zero,8112d4e8 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112d4e0:	00800044 	movi	r2,1
8112d4e4:	00003d06 	br	8112d5dc <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d4e8:	0005303a 	rdctl	r2,status
8112d4ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d4f0:	e0fffd17 	ldw	r3,-12(fp)
8112d4f4:	00bfff84 	movi	r2,-2
8112d4f8:	1884703a 	and	r2,r3,r2
8112d4fc:	1001703a 	wrctl	status,r2
  
  return context;
8112d500:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d504:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112d508:	e0bffe17 	ldw	r2,-8(fp)
8112d50c:	1080020b 	ldhu	r2,8(r2)
8112d510:	10bfffcc 	andi	r2,r2,65535
8112d514:	1004d23a 	srli	r2,r2,8
8112d518:	1007883a 	mov	r3,r2
8112d51c:	e0bfff17 	ldw	r2,-4(fp)
8112d520:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112d524:	e0bffe17 	ldw	r2,-8(fp)
8112d528:	1080020b 	ldhu	r2,8(r2)
8112d52c:	1007883a 	mov	r3,r2
8112d530:	e0bfff17 	ldw	r2,-4(fp)
8112d534:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112d538:	e0bfff17 	ldw	r2,-4(fp)
8112d53c:	10800203 	ldbu	r2,8(r2)
8112d540:	10803fcc 	andi	r2,r2,255
8112d544:	10803fd8 	cmpnei	r2,r2,255
8112d548:	1000041e 	bne	r2,zero,8112d55c <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112d54c:	e0bfff17 	ldw	r2,-4(fp)
8112d550:	00c00044 	movi	r3,1
8112d554:	10c001c5 	stb	r3,7(r2)
8112d558:	00000206 	br	8112d564 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112d55c:	e0bfff17 	ldw	r2,-4(fp)
8112d560:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112d564:	e0bffe17 	ldw	r2,-8(fp)
8112d568:	10c00283 	ldbu	r3,10(r2)
8112d56c:	e0bfff17 	ldw	r2,-4(fp)
8112d570:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112d574:	e0bffe17 	ldw	r2,-8(fp)
8112d578:	108002c4 	addi	r2,r2,11
8112d57c:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112d580:	e0bfff17 	ldw	r2,-4(fp)
8112d584:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d588:	e03ff805 	stb	zero,-32(fp)
8112d58c:	00000b06 	br	8112d5bc <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112d590:	e0bffa17 	ldw	r2,-24(fp)
8112d594:	10c00044 	addi	r3,r2,1
8112d598:	e0fffa15 	stw	r3,-24(fp)
8112d59c:	e0fff917 	ldw	r3,-28(fp)
8112d5a0:	19000044 	addi	r4,r3,1
8112d5a4:	e13ff915 	stw	r4,-28(fp)
8112d5a8:	18c00003 	ldbu	r3,0(r3)
8112d5ac:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d5b0:	e0bff803 	ldbu	r2,-32(fp)
8112d5b4:	10800044 	addi	r2,r2,1
8112d5b8:	e0bff805 	stb	r2,-32(fp)
8112d5bc:	e0bff803 	ldbu	r2,-32(fp)
8112d5c0:	108001b0 	cmpltui	r2,r2,6
8112d5c4:	103ff21e 	bne	r2,zero,8112d590 <__reset+0xfb10d590>
8112d5c8:	e0bffb17 	ldw	r2,-20(fp)
8112d5cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d5d0:	e0bffc17 	ldw	r2,-16(fp)
8112d5d4:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d5d8:	0005883a 	mov	r2,zero
}
8112d5dc:	e037883a 	mov	sp,fp
8112d5e0:	df000017 	ldw	fp,0(sp)
8112d5e4:	dec00104 	addi	sp,sp,4
8112d5e8:	f800283a 	ret

8112d5ec <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112d5ec:	defffc04 	addi	sp,sp,-16
8112d5f0:	de00012e 	bgeu	sp,et,8112d5f8 <OSMutex_RdyAtPrio+0xc>
8112d5f4:	003b68fa 	trap	3
8112d5f8:	df000315 	stw	fp,12(sp)
8112d5fc:	df000304 	addi	fp,sp,12
8112d600:	e13ffe15 	stw	r4,-8(fp)
8112d604:	2805883a 	mov	r2,r5
8112d608:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112d60c:	e0bffe17 	ldw	r2,-8(fp)
8112d610:	10800d03 	ldbu	r2,52(r2)
8112d614:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112d618:	e0fffd03 	ldbu	r3,-12(fp)
8112d61c:	e13ffd03 	ldbu	r4,-12(fp)
8112d620:	d0a08044 	addi	r2,gp,-32255
8112d624:	2085883a 	add	r2,r4,r2
8112d628:	10800003 	ldbu	r2,0(r2)
8112d62c:	1009883a 	mov	r4,r2
8112d630:	e0bffe17 	ldw	r2,-8(fp)
8112d634:	10800d43 	ldbu	r2,53(r2)
8112d638:	0084303a 	nor	r2,zero,r2
8112d63c:	2084703a 	and	r2,r4,r2
8112d640:	1009883a 	mov	r4,r2
8112d644:	d0a08044 	addi	r2,gp,-32255
8112d648:	1885883a 	add	r2,r3,r2
8112d64c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112d650:	e0fffd03 	ldbu	r3,-12(fp)
8112d654:	d0a08044 	addi	r2,gp,-32255
8112d658:	1885883a 	add	r2,r3,r2
8112d65c:	10800003 	ldbu	r2,0(r2)
8112d660:	10803fcc 	andi	r2,r2,255
8112d664:	1000071e 	bne	r2,zero,8112d684 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112d668:	e0bffe17 	ldw	r2,-8(fp)
8112d66c:	10800d83 	ldbu	r2,54(r2)
8112d670:	0084303a 	nor	r2,zero,r2
8112d674:	1007883a 	mov	r3,r2
8112d678:	d0a08003 	ldbu	r2,-32256(gp)
8112d67c:	1884703a 	and	r2,r3,r2
8112d680:	d0a08005 	stb	r2,-32256(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112d684:	e0bffe17 	ldw	r2,-8(fp)
8112d688:	e0ffff03 	ldbu	r3,-4(fp)
8112d68c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112d690:	e0bfff03 	ldbu	r2,-4(fp)
8112d694:	1004d0fa 	srli	r2,r2,3
8112d698:	108001cc 	andi	r2,r2,7
8112d69c:	1007883a 	mov	r3,r2
8112d6a0:	e0bffe17 	ldw	r2,-8(fp)
8112d6a4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112d6a8:	e0bfff03 	ldbu	r2,-4(fp)
8112d6ac:	108001cc 	andi	r2,r2,7
8112d6b0:	1007883a 	mov	r3,r2
8112d6b4:	e0bffe17 	ldw	r2,-8(fp)
8112d6b8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112d6bc:	e0bffe17 	ldw	r2,-8(fp)
8112d6c0:	10800d03 	ldbu	r2,52(r2)
8112d6c4:	10803fcc 	andi	r2,r2,255
8112d6c8:	00c00044 	movi	r3,1
8112d6cc:	1884983a 	sll	r2,r3,r2
8112d6d0:	1007883a 	mov	r3,r2
8112d6d4:	e0bffe17 	ldw	r2,-8(fp)
8112d6d8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112d6dc:	e0bffe17 	ldw	r2,-8(fp)
8112d6e0:	10800cc3 	ldbu	r2,51(r2)
8112d6e4:	10803fcc 	andi	r2,r2,255
8112d6e8:	00c00044 	movi	r3,1
8112d6ec:	1884983a 	sll	r2,r3,r2
8112d6f0:	1007883a 	mov	r3,r2
8112d6f4:	e0bffe17 	ldw	r2,-8(fp)
8112d6f8:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112d6fc:	e0bffe17 	ldw	r2,-8(fp)
8112d700:	10c00d83 	ldbu	r3,54(r2)
8112d704:	d0a08003 	ldbu	r2,-32256(gp)
8112d708:	1884b03a 	or	r2,r3,r2
8112d70c:	d0a08005 	stb	r2,-32256(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d710:	e0bffe17 	ldw	r2,-8(fp)
8112d714:	10800d03 	ldbu	r2,52(r2)
8112d718:	10c03fcc 	andi	r3,r2,255
8112d71c:	e0bffe17 	ldw	r2,-8(fp)
8112d720:	10800d03 	ldbu	r2,52(r2)
8112d724:	11003fcc 	andi	r4,r2,255
8112d728:	d0a08044 	addi	r2,gp,-32255
8112d72c:	2085883a 	add	r2,r4,r2
8112d730:	11000003 	ldbu	r4,0(r2)
8112d734:	e0bffe17 	ldw	r2,-8(fp)
8112d738:	10800d43 	ldbu	r2,53(r2)
8112d73c:	2084b03a 	or	r2,r4,r2
8112d740:	1009883a 	mov	r4,r2
8112d744:	d0a08044 	addi	r2,gp,-32255
8112d748:	1885883a 	add	r2,r3,r2
8112d74c:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112d750:	e0ffff03 	ldbu	r3,-4(fp)
8112d754:	00a04574 	movhi	r2,33045
8112d758:	108fcf04 	addi	r2,r2,16188
8112d75c:	18c7883a 	add	r3,r3,r3
8112d760:	18c7883a 	add	r3,r3,r3
8112d764:	10c5883a 	add	r2,r2,r3
8112d768:	e0fffe17 	ldw	r3,-8(fp)
8112d76c:	10c00015 	stw	r3,0(r2)
}
8112d770:	0001883a 	nop
8112d774:	e037883a 	mov	sp,fp
8112d778:	df000017 	ldw	fp,0(sp)
8112d77c:	dec00104 	addi	sp,sp,4
8112d780:	f800283a 	ret

8112d784 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112d784:	defff804 	addi	sp,sp,-32
8112d788:	de00012e 	bgeu	sp,et,8112d790 <OSQAccept+0xc>
8112d78c:	003b68fa 	trap	3
8112d790:	df000715 	stw	fp,28(sp)
8112d794:	df000704 	addi	fp,sp,28
8112d798:	e13ffe15 	stw	r4,-8(fp)
8112d79c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d7a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d7a4:	e0bfff17 	ldw	r2,-4(fp)
8112d7a8:	1000021e 	bne	r2,zero,8112d7b4 <OSQAccept+0x30>
        return ((void *)0);
8112d7ac:	0005883a 	mov	r2,zero
8112d7b0:	00004206 	br	8112d8bc <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112d7b4:	e0bffe17 	ldw	r2,-8(fp)
8112d7b8:	1000051e 	bne	r2,zero,8112d7d0 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112d7bc:	e0bfff17 	ldw	r2,-4(fp)
8112d7c0:	00c00104 	movi	r3,4
8112d7c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d7c8:	0005883a 	mov	r2,zero
8112d7cc:	00003b06 	br	8112d8bc <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112d7d0:	e0bffe17 	ldw	r2,-8(fp)
8112d7d4:	10800003 	ldbu	r2,0(r2)
8112d7d8:	10803fcc 	andi	r2,r2,255
8112d7dc:	108000a0 	cmpeqi	r2,r2,2
8112d7e0:	1000051e 	bne	r2,zero,8112d7f8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112d7e4:	e0bfff17 	ldw	r2,-4(fp)
8112d7e8:	00c00044 	movi	r3,1
8112d7ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d7f0:	0005883a 	mov	r2,zero
8112d7f4:	00003106 	br	8112d8bc <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d7f8:	0005303a 	rdctl	r2,status
8112d7fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d800:	e0fffd17 	ldw	r3,-12(fp)
8112d804:	00bfff84 	movi	r2,-2
8112d808:	1884703a 	and	r2,r3,r2
8112d80c:	1001703a 	wrctl	status,r2
  
  return context;
8112d810:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d814:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112d818:	e0bffe17 	ldw	r2,-8(fp)
8112d81c:	10800117 	ldw	r2,4(r2)
8112d820:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112d824:	e0bffc17 	ldw	r2,-16(fp)
8112d828:	1080058b 	ldhu	r2,22(r2)
8112d82c:	10bfffcc 	andi	r2,r2,65535
8112d830:	10001926 	beq	r2,zero,8112d898 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112d834:	e0bffc17 	ldw	r2,-16(fp)
8112d838:	10800417 	ldw	r2,16(r2)
8112d83c:	11000104 	addi	r4,r2,4
8112d840:	e0fffc17 	ldw	r3,-16(fp)
8112d844:	19000415 	stw	r4,16(r3)
8112d848:	10800017 	ldw	r2,0(r2)
8112d84c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112d850:	e0bffc17 	ldw	r2,-16(fp)
8112d854:	1080058b 	ldhu	r2,22(r2)
8112d858:	10bfffc4 	addi	r2,r2,-1
8112d85c:	1007883a 	mov	r3,r2
8112d860:	e0bffc17 	ldw	r2,-16(fp)
8112d864:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112d868:	e0bffc17 	ldw	r2,-16(fp)
8112d86c:	10c00417 	ldw	r3,16(r2)
8112d870:	e0bffc17 	ldw	r2,-16(fp)
8112d874:	10800217 	ldw	r2,8(r2)
8112d878:	1880041e 	bne	r3,r2,8112d88c <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112d87c:	e0bffc17 	ldw	r2,-16(fp)
8112d880:	10c00117 	ldw	r3,4(r2)
8112d884:	e0bffc17 	ldw	r2,-16(fp)
8112d888:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112d88c:	e0bfff17 	ldw	r2,-4(fp)
8112d890:	10000005 	stb	zero,0(r2)
8112d894:	00000406 	br	8112d8a8 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112d898:	e0bfff17 	ldw	r2,-4(fp)
8112d89c:	00c007c4 	movi	r3,31
8112d8a0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112d8a4:	e03ff915 	stw	zero,-28(fp)
8112d8a8:	e0bffa17 	ldw	r2,-24(fp)
8112d8ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d8b0:	e0bffb17 	ldw	r2,-20(fp)
8112d8b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112d8b8:	e0bff917 	ldw	r2,-28(fp)
}
8112d8bc:	e037883a 	mov	sp,fp
8112d8c0:	df000017 	ldw	fp,0(sp)
8112d8c4:	dec00104 	addi	sp,sp,4
8112d8c8:	f800283a 	ret

8112d8cc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112d8cc:	defff404 	addi	sp,sp,-48
8112d8d0:	de00012e 	bgeu	sp,et,8112d8d8 <OSQCreate+0xc>
8112d8d4:	003b68fa 	trap	3
8112d8d8:	dfc00b15 	stw	ra,44(sp)
8112d8dc:	df000a15 	stw	fp,40(sp)
8112d8e0:	df000a04 	addi	fp,sp,40
8112d8e4:	e13ffe15 	stw	r4,-8(fp)
8112d8e8:	2805883a 	mov	r2,r5
8112d8ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d8f0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112d8f4:	d0a08303 	ldbu	r2,-32244(gp)
8112d8f8:	10803fcc 	andi	r2,r2,255
8112d8fc:	10000226 	beq	r2,zero,8112d908 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112d900:	0005883a 	mov	r2,zero
8112d904:	00005906 	br	8112da6c <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d908:	0005303a 	rdctl	r2,status
8112d90c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d910:	e0fffd17 	ldw	r3,-12(fp)
8112d914:	00bfff84 	movi	r2,-2
8112d918:	1884703a 	and	r2,r3,r2
8112d91c:	1001703a 	wrctl	status,r2
  
  return context;
8112d920:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d924:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112d928:	d0a08217 	ldw	r2,-32248(gp)
8112d92c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112d930:	d0a08217 	ldw	r2,-32248(gp)
8112d934:	10000326 	beq	r2,zero,8112d944 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112d938:	d0a08217 	ldw	r2,-32248(gp)
8112d93c:	10800117 	ldw	r2,4(r2)
8112d940:	d0a08215 	stw	r2,-32248(gp)
8112d944:	e0bff717 	ldw	r2,-36(fp)
8112d948:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d94c:	e0bff817 	ldw	r2,-32(fp)
8112d950:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112d954:	e0bff617 	ldw	r2,-40(fp)
8112d958:	10004326 	beq	r2,zero,8112da68 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d95c:	0005303a 	rdctl	r2,status
8112d960:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d964:	e0fff917 	ldw	r3,-28(fp)
8112d968:	00bfff84 	movi	r2,-2
8112d96c:	1884703a 	and	r2,r3,r2
8112d970:	1001703a 	wrctl	status,r2
  
  return context;
8112d974:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112d978:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112d97c:	d0a07f17 	ldw	r2,-32260(gp)
8112d980:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112d984:	e0bffb17 	ldw	r2,-20(fp)
8112d988:	10002d26 	beq	r2,zero,8112da40 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112d98c:	d0a07f17 	ldw	r2,-32260(gp)
8112d990:	10800017 	ldw	r2,0(r2)
8112d994:	d0a07f15 	stw	r2,-32260(gp)
8112d998:	e0bff717 	ldw	r2,-36(fp)
8112d99c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d9a0:	e0bffa17 	ldw	r2,-24(fp)
8112d9a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112d9a8:	e0bffb17 	ldw	r2,-20(fp)
8112d9ac:	e0fffe17 	ldw	r3,-8(fp)
8112d9b0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112d9b4:	e0bfff0b 	ldhu	r2,-4(fp)
8112d9b8:	1085883a 	add	r2,r2,r2
8112d9bc:	1085883a 	add	r2,r2,r2
8112d9c0:	1007883a 	mov	r3,r2
8112d9c4:	e0bffe17 	ldw	r2,-8(fp)
8112d9c8:	10c7883a 	add	r3,r2,r3
8112d9cc:	e0bffb17 	ldw	r2,-20(fp)
8112d9d0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112d9d4:	e0bffb17 	ldw	r2,-20(fp)
8112d9d8:	e0fffe17 	ldw	r3,-8(fp)
8112d9dc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112d9e0:	e0bffb17 	ldw	r2,-20(fp)
8112d9e4:	e0fffe17 	ldw	r3,-8(fp)
8112d9e8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112d9ec:	e0bffb17 	ldw	r2,-20(fp)
8112d9f0:	e0ffff0b 	ldhu	r3,-4(fp)
8112d9f4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112d9f8:	e0bffb17 	ldw	r2,-20(fp)
8112d9fc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112da00:	e0bff617 	ldw	r2,-40(fp)
8112da04:	00c00084 	movi	r3,2
8112da08:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112da0c:	e0bff617 	ldw	r2,-40(fp)
8112da10:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112da14:	e0bff617 	ldw	r2,-40(fp)
8112da18:	e0fffb17 	ldw	r3,-20(fp)
8112da1c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112da20:	e0bff617 	ldw	r2,-40(fp)
8112da24:	00c00fc4 	movi	r3,63
8112da28:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112da2c:	e0bff617 	ldw	r2,-40(fp)
8112da30:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112da34:	e13ff617 	ldw	r4,-40(fp)
8112da38:	112992c0 	call	8112992c <OS_EventWaitListInit>
8112da3c:	00000a06 	br	8112da68 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112da40:	d0e08217 	ldw	r3,-32248(gp)
8112da44:	e0bff617 	ldw	r2,-40(fp)
8112da48:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112da4c:	e0bff617 	ldw	r2,-40(fp)
8112da50:	d0a08215 	stw	r2,-32248(gp)
8112da54:	e0bff717 	ldw	r2,-36(fp)
8112da58:	e0bffc15 	stw	r2,-16(fp)
8112da5c:	e0bffc17 	ldw	r2,-16(fp)
8112da60:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112da64:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112da68:	e0bff617 	ldw	r2,-40(fp)
}
8112da6c:	e037883a 	mov	sp,fp
8112da70:	dfc00117 	ldw	ra,4(sp)
8112da74:	df000017 	ldw	fp,0(sp)
8112da78:	dec00204 	addi	sp,sp,8
8112da7c:	f800283a 	ret

8112da80 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112da80:	defff204 	addi	sp,sp,-56
8112da84:	de00012e 	bgeu	sp,et,8112da8c <OSQDel+0xc>
8112da88:	003b68fa 	trap	3
8112da8c:	dfc00d15 	stw	ra,52(sp)
8112da90:	df000c15 	stw	fp,48(sp)
8112da94:	df000c04 	addi	fp,sp,48
8112da98:	e13ffd15 	stw	r4,-12(fp)
8112da9c:	2805883a 	mov	r2,r5
8112daa0:	e1bfff15 	stw	r6,-4(fp)
8112daa4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112daa8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112daac:	e0bfff17 	ldw	r2,-4(fp)
8112dab0:	1000021e 	bne	r2,zero,8112dabc <OSQDel+0x3c>
        return (pevent);
8112dab4:	e0bffd17 	ldw	r2,-12(fp)
8112dab8:	00008e06 	br	8112dcf4 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112dabc:	e0bffd17 	ldw	r2,-12(fp)
8112dac0:	1000051e 	bne	r2,zero,8112dad8 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112dac4:	e0bfff17 	ldw	r2,-4(fp)
8112dac8:	00c00104 	movi	r3,4
8112dacc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dad0:	e0bffd17 	ldw	r2,-12(fp)
8112dad4:	00008706 	br	8112dcf4 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112dad8:	e0bffd17 	ldw	r2,-12(fp)
8112dadc:	10800003 	ldbu	r2,0(r2)
8112dae0:	10803fcc 	andi	r2,r2,255
8112dae4:	108000a0 	cmpeqi	r2,r2,2
8112dae8:	1000051e 	bne	r2,zero,8112db00 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112daec:	e0bfff17 	ldw	r2,-4(fp)
8112daf0:	00c00044 	movi	r3,1
8112daf4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112daf8:	e0bffd17 	ldw	r2,-12(fp)
8112dafc:	00007d06 	br	8112dcf4 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112db00:	d0a08303 	ldbu	r2,-32244(gp)
8112db04:	10803fcc 	andi	r2,r2,255
8112db08:	10000526 	beq	r2,zero,8112db20 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112db0c:	e0bfff17 	ldw	r2,-4(fp)
8112db10:	00c003c4 	movi	r3,15
8112db14:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112db18:	e0bffd17 	ldw	r2,-12(fp)
8112db1c:	00007506 	br	8112dcf4 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db20:	0005303a 	rdctl	r2,status
8112db24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112db28:	e0fffc17 	ldw	r3,-16(fp)
8112db2c:	00bfff84 	movi	r2,-2
8112db30:	1884703a 	and	r2,r3,r2
8112db34:	1001703a 	wrctl	status,r2
  
  return context;
8112db38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112db3c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112db40:	e0bffd17 	ldw	r2,-12(fp)
8112db44:	10800283 	ldbu	r2,10(r2)
8112db48:	10803fcc 	andi	r2,r2,255
8112db4c:	10000326 	beq	r2,zero,8112db5c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112db50:	00800044 	movi	r2,1
8112db54:	e0bff405 	stb	r2,-48(fp)
8112db58:	00000106 	br	8112db60 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112db5c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112db60:	e0bffe03 	ldbu	r2,-8(fp)
8112db64:	10000326 	beq	r2,zero,8112db74 <OSQDel+0xf4>
8112db68:	10800060 	cmpeqi	r2,r2,1
8112db6c:	1000301e 	bne	r2,zero,8112dc30 <OSQDel+0x1b0>
8112db70:	00005506 	br	8112dcc8 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112db74:	e0bff403 	ldbu	r2,-48(fp)
8112db78:	10001e1e 	bne	r2,zero,8112dbf4 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112db7c:	e0bffd17 	ldw	r2,-12(fp)
8112db80:	00c00fc4 	movi	r3,63
8112db84:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112db88:	e0bffd17 	ldw	r2,-12(fp)
8112db8c:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112db90:	e0bffd17 	ldw	r2,-12(fp)
8112db94:	10800117 	ldw	r2,4(r2)
8112db98:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112db9c:	d0e07f17 	ldw	r3,-32260(gp)
8112dba0:	e0bff817 	ldw	r2,-32(fp)
8112dba4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112dba8:	e0bff817 	ldw	r2,-32(fp)
8112dbac:	d0a07f15 	stw	r2,-32260(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112dbb0:	e0bffd17 	ldw	r2,-12(fp)
8112dbb4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112dbb8:	d0e08217 	ldw	r3,-32248(gp)
8112dbbc:	e0bffd17 	ldw	r2,-12(fp)
8112dbc0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112dbc4:	e0bffd17 	ldw	r2,-12(fp)
8112dbc8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112dbcc:	e0bffd17 	ldw	r2,-12(fp)
8112dbd0:	d0a08215 	stw	r2,-32248(gp)
8112dbd4:	e0bff617 	ldw	r2,-40(fp)
8112dbd8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dbdc:	e0bff717 	ldw	r2,-36(fp)
8112dbe0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112dbe4:	e0bfff17 	ldw	r2,-4(fp)
8112dbe8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112dbec:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112dbf0:	00003f06 	br	8112dcf0 <OSQDel+0x270>
8112dbf4:	e0bff617 	ldw	r2,-40(fp)
8112dbf8:	e0bff915 	stw	r2,-28(fp)
8112dbfc:	e0bff917 	ldw	r2,-28(fp)
8112dc00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112dc04:	e0bfff17 	ldw	r2,-4(fp)
8112dc08:	00c01244 	movi	r3,73
8112dc0c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112dc10:	e0bffd17 	ldw	r2,-12(fp)
8112dc14:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112dc18:	00003506 	br	8112dcf0 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112dc1c:	000f883a 	mov	r7,zero
8112dc20:	01800104 	movi	r6,4
8112dc24:	000b883a 	mov	r5,zero
8112dc28:	e13ffd17 	ldw	r4,-12(fp)
8112dc2c:	11293540 	call	81129354 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112dc30:	e0bffd17 	ldw	r2,-12(fp)
8112dc34:	10800283 	ldbu	r2,10(r2)
8112dc38:	10803fcc 	andi	r2,r2,255
8112dc3c:	103ff71e 	bne	r2,zero,8112dc1c <__reset+0xfb10dc1c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112dc40:	e0bffd17 	ldw	r2,-12(fp)
8112dc44:	00c00fc4 	movi	r3,63
8112dc48:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112dc4c:	e0bffd17 	ldw	r2,-12(fp)
8112dc50:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112dc54:	e0bffd17 	ldw	r2,-12(fp)
8112dc58:	10800117 	ldw	r2,4(r2)
8112dc5c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112dc60:	d0e07f17 	ldw	r3,-32260(gp)
8112dc64:	e0bff817 	ldw	r2,-32(fp)
8112dc68:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112dc6c:	e0bff817 	ldw	r2,-32(fp)
8112dc70:	d0a07f15 	stw	r2,-32260(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112dc74:	e0bffd17 	ldw	r2,-12(fp)
8112dc78:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112dc7c:	d0e08217 	ldw	r3,-32248(gp)
8112dc80:	e0bffd17 	ldw	r2,-12(fp)
8112dc84:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112dc88:	e0bffd17 	ldw	r2,-12(fp)
8112dc8c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112dc90:	e0bffd17 	ldw	r2,-12(fp)
8112dc94:	d0a08215 	stw	r2,-32248(gp)
8112dc98:	e0bff617 	ldw	r2,-40(fp)
8112dc9c:	e0bffa15 	stw	r2,-24(fp)
8112dca0:	e0bffa17 	ldw	r2,-24(fp)
8112dca4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112dca8:	e0bff403 	ldbu	r2,-48(fp)
8112dcac:	10800058 	cmpnei	r2,r2,1
8112dcb0:	1000011e 	bne	r2,zero,8112dcb8 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112dcb4:	1129e100 	call	81129e10 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112dcb8:	e0bfff17 	ldw	r2,-4(fp)
8112dcbc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112dcc0:	e03ff515 	stw	zero,-44(fp)
             break;
8112dcc4:	00000a06 	br	8112dcf0 <OSQDel+0x270>
8112dcc8:	e0bff617 	ldw	r2,-40(fp)
8112dccc:	e0bffb15 	stw	r2,-20(fp)
8112dcd0:	e0bffb17 	ldw	r2,-20(fp)
8112dcd4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112dcd8:	e0bfff17 	ldw	r2,-4(fp)
8112dcdc:	00c001c4 	movi	r3,7
8112dce0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112dce4:	e0bffd17 	ldw	r2,-12(fp)
8112dce8:	e0bff515 	stw	r2,-44(fp)
             break;
8112dcec:	0001883a 	nop
    }
    return (pevent_return);
8112dcf0:	e0bff517 	ldw	r2,-44(fp)
}
8112dcf4:	e037883a 	mov	sp,fp
8112dcf8:	dfc00117 	ldw	ra,4(sp)
8112dcfc:	df000017 	ldw	fp,0(sp)
8112dd00:	dec00204 	addi	sp,sp,8
8112dd04:	f800283a 	ret

8112dd08 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112dd08:	defffa04 	addi	sp,sp,-24
8112dd0c:	de00012e 	bgeu	sp,et,8112dd14 <OSQFlush+0xc>
8112dd10:	003b68fa 	trap	3
8112dd14:	df000515 	stw	fp,20(sp)
8112dd18:	df000504 	addi	fp,sp,20
8112dd1c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112dd20:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112dd24:	e0bfff17 	ldw	r2,-4(fp)
8112dd28:	1000021e 	bne	r2,zero,8112dd34 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112dd2c:	00800104 	movi	r2,4
8112dd30:	00002106 	br	8112ddb8 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112dd34:	e0bfff17 	ldw	r2,-4(fp)
8112dd38:	10800003 	ldbu	r2,0(r2)
8112dd3c:	10803fcc 	andi	r2,r2,255
8112dd40:	108000a0 	cmpeqi	r2,r2,2
8112dd44:	1000021e 	bne	r2,zero,8112dd50 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112dd48:	00800044 	movi	r2,1
8112dd4c:	00001a06 	br	8112ddb8 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dd50:	0005303a 	rdctl	r2,status
8112dd54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dd58:	e0fffd17 	ldw	r3,-12(fp)
8112dd5c:	00bfff84 	movi	r2,-2
8112dd60:	1884703a 	and	r2,r3,r2
8112dd64:	1001703a 	wrctl	status,r2
  
  return context;
8112dd68:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112dd6c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112dd70:	e0bfff17 	ldw	r2,-4(fp)
8112dd74:	10800117 	ldw	r2,4(r2)
8112dd78:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112dd7c:	e0bffc17 	ldw	r2,-16(fp)
8112dd80:	10c00117 	ldw	r3,4(r2)
8112dd84:	e0bffc17 	ldw	r2,-16(fp)
8112dd88:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112dd8c:	e0bffc17 	ldw	r2,-16(fp)
8112dd90:	10c00117 	ldw	r3,4(r2)
8112dd94:	e0bffc17 	ldw	r2,-16(fp)
8112dd98:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112dd9c:	e0bffc17 	ldw	r2,-16(fp)
8112dda0:	1000058d 	sth	zero,22(r2)
8112dda4:	e0bffb17 	ldw	r2,-20(fp)
8112dda8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ddac:	e0bffe17 	ldw	r2,-8(fp)
8112ddb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112ddb4:	0005883a 	mov	r2,zero
}
8112ddb8:	e037883a 	mov	sp,fp
8112ddbc:	df000017 	ldw	fp,0(sp)
8112ddc0:	dec00104 	addi	sp,sp,4
8112ddc4:	f800283a 	ret

8112ddc8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ddc8:	defff304 	addi	sp,sp,-52
8112ddcc:	de00012e 	bgeu	sp,et,8112ddd4 <OSQPend+0xc>
8112ddd0:	003b68fa 	trap	3
8112ddd4:	dfc00c15 	stw	ra,48(sp)
8112ddd8:	df000b15 	stw	fp,44(sp)
8112dddc:	df000b04 	addi	fp,sp,44
8112dde0:	e13ffd15 	stw	r4,-12(fp)
8112dde4:	2805883a 	mov	r2,r5
8112dde8:	e1bfff15 	stw	r6,-4(fp)
8112ddec:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ddf0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ddf4:	e0bfff17 	ldw	r2,-4(fp)
8112ddf8:	1000021e 	bne	r2,zero,8112de04 <OSQPend+0x3c>
        return ((void *)0);
8112ddfc:	0005883a 	mov	r2,zero
8112de00:	00009106 	br	8112e048 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112de04:	e0bffd17 	ldw	r2,-12(fp)
8112de08:	1000051e 	bne	r2,zero,8112de20 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112de0c:	e0bfff17 	ldw	r2,-4(fp)
8112de10:	00c00104 	movi	r3,4
8112de14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112de18:	0005883a 	mov	r2,zero
8112de1c:	00008a06 	br	8112e048 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112de20:	e0bffd17 	ldw	r2,-12(fp)
8112de24:	10800003 	ldbu	r2,0(r2)
8112de28:	10803fcc 	andi	r2,r2,255
8112de2c:	108000a0 	cmpeqi	r2,r2,2
8112de30:	1000051e 	bne	r2,zero,8112de48 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112de34:	e0bfff17 	ldw	r2,-4(fp)
8112de38:	00c00044 	movi	r3,1
8112de3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112de40:	0005883a 	mov	r2,zero
8112de44:	00008006 	br	8112e048 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112de48:	d0a08303 	ldbu	r2,-32244(gp)
8112de4c:	10803fcc 	andi	r2,r2,255
8112de50:	10000526 	beq	r2,zero,8112de68 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112de54:	e0bfff17 	ldw	r2,-4(fp)
8112de58:	00c00084 	movi	r3,2
8112de5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112de60:	0005883a 	mov	r2,zero
8112de64:	00007806 	br	8112e048 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112de68:	d0a07103 	ldbu	r2,-32316(gp)
8112de6c:	10803fcc 	andi	r2,r2,255
8112de70:	10000526 	beq	r2,zero,8112de88 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112de74:	e0bfff17 	ldw	r2,-4(fp)
8112de78:	00c00344 	movi	r3,13
8112de7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112de80:	0005883a 	mov	r2,zero
8112de84:	00007006 	br	8112e048 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112de88:	0005303a 	rdctl	r2,status
8112de8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112de90:	e0fffc17 	ldw	r3,-16(fp)
8112de94:	00bfff84 	movi	r2,-2
8112de98:	1884703a 	and	r2,r3,r2
8112de9c:	1001703a 	wrctl	status,r2
  
  return context;
8112dea0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112dea4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112dea8:	e0bffd17 	ldw	r2,-12(fp)
8112deac:	10800117 	ldw	r2,4(r2)
8112deb0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112deb4:	e0bff817 	ldw	r2,-32(fp)
8112deb8:	1080058b 	ldhu	r2,22(r2)
8112debc:	10bfffcc 	andi	r2,r2,65535
8112dec0:	10001e26 	beq	r2,zero,8112df3c <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112dec4:	e0bff817 	ldw	r2,-32(fp)
8112dec8:	10800417 	ldw	r2,16(r2)
8112decc:	11000104 	addi	r4,r2,4
8112ded0:	e0fff817 	ldw	r3,-32(fp)
8112ded4:	19000415 	stw	r4,16(r3)
8112ded8:	10800017 	ldw	r2,0(r2)
8112dedc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112dee0:	e0bff817 	ldw	r2,-32(fp)
8112dee4:	1080058b 	ldhu	r2,22(r2)
8112dee8:	10bfffc4 	addi	r2,r2,-1
8112deec:	1007883a 	mov	r3,r2
8112def0:	e0bff817 	ldw	r2,-32(fp)
8112def4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112def8:	e0bff817 	ldw	r2,-32(fp)
8112defc:	10c00417 	ldw	r3,16(r2)
8112df00:	e0bff817 	ldw	r2,-32(fp)
8112df04:	10800217 	ldw	r2,8(r2)
8112df08:	1880041e 	bne	r3,r2,8112df1c <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112df0c:	e0bff817 	ldw	r2,-32(fp)
8112df10:	10c00117 	ldw	r3,4(r2)
8112df14:	e0bff817 	ldw	r2,-32(fp)
8112df18:	10c00415 	stw	r3,16(r2)
8112df1c:	e0bff617 	ldw	r2,-40(fp)
8112df20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112df24:	e0bff717 	ldw	r2,-36(fp)
8112df28:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112df2c:	e0bfff17 	ldw	r2,-4(fp)
8112df30:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112df34:	e0bff517 	ldw	r2,-44(fp)
8112df38:	00004306 	br	8112e048 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112df3c:	d0a08417 	ldw	r2,-32240(gp)
8112df40:	d0e08417 	ldw	r3,-32240(gp)
8112df44:	18c00c03 	ldbu	r3,48(r3)
8112df48:	18c00114 	ori	r3,r3,4
8112df4c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112df50:	d0a08417 	ldw	r2,-32240(gp)
8112df54:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112df58:	d0a08417 	ldw	r2,-32240(gp)
8112df5c:	e0fffe0b 	ldhu	r3,-8(fp)
8112df60:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112df64:	e13ffd17 	ldw	r4,-12(fp)
8112df68:	11294f40 	call	811294f4 <OS_EventTaskWait>
8112df6c:	e0bff617 	ldw	r2,-40(fp)
8112df70:	e0bffb15 	stw	r2,-20(fp)
8112df74:	e0bffb17 	ldw	r2,-20(fp)
8112df78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112df7c:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112df80:	0005303a 	rdctl	r2,status
8112df84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112df88:	e0fff917 	ldw	r3,-28(fp)
8112df8c:	00bfff84 	movi	r2,-2
8112df90:	1884703a 	and	r2,r3,r2
8112df94:	1001703a 	wrctl	status,r2
  
  return context;
8112df98:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112df9c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112dfa0:	d0a08417 	ldw	r2,-32240(gp)
8112dfa4:	10800c43 	ldbu	r2,49(r2)
8112dfa8:	10803fcc 	andi	r2,r2,255
8112dfac:	10000326 	beq	r2,zero,8112dfbc <OSQPend+0x1f4>
8112dfb0:	108000a0 	cmpeqi	r2,r2,2
8112dfb4:	1000071e 	bne	r2,zero,8112dfd4 <OSQPend+0x20c>
8112dfb8:	00000b06 	br	8112dfe8 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112dfbc:	d0a08417 	ldw	r2,-32240(gp)
8112dfc0:	10800917 	ldw	r2,36(r2)
8112dfc4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112dfc8:	e0bfff17 	ldw	r2,-4(fp)
8112dfcc:	10000005 	stb	zero,0(r2)
             break;
8112dfd0:	00000e06 	br	8112e00c <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112dfd4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112dfd8:	e0bfff17 	ldw	r2,-4(fp)
8112dfdc:	00c00384 	movi	r3,14
8112dfe0:	10c00005 	stb	r3,0(r2)
             break;
8112dfe4:	00000906 	br	8112e00c <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112dfe8:	d0a08417 	ldw	r2,-32240(gp)
8112dfec:	e17ffd17 	ldw	r5,-12(fp)
8112dff0:	1009883a 	mov	r4,r2
8112dff4:	11297640 	call	81129764 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112dff8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112dffc:	e0bfff17 	ldw	r2,-4(fp)
8112e000:	00c00284 	movi	r3,10
8112e004:	10c00005 	stb	r3,0(r2)
             break;
8112e008:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112e00c:	d0a08417 	ldw	r2,-32240(gp)
8112e010:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112e014:	d0a08417 	ldw	r2,-32240(gp)
8112e018:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112e01c:	d0a08417 	ldw	r2,-32240(gp)
8112e020:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112e024:	d0a08417 	ldw	r2,-32240(gp)
8112e028:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112e02c:	d0a08417 	ldw	r2,-32240(gp)
8112e030:	10000915 	stw	zero,36(r2)
8112e034:	e0bff617 	ldw	r2,-40(fp)
8112e038:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e03c:	e0bffa17 	ldw	r2,-24(fp)
8112e040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112e044:	e0bff517 	ldw	r2,-44(fp)
}
8112e048:	e037883a 	mov	sp,fp
8112e04c:	dfc00117 	ldw	ra,4(sp)
8112e050:	df000017 	ldw	fp,0(sp)
8112e054:	dec00204 	addi	sp,sp,8
8112e058:	f800283a 	ret

8112e05c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112e05c:	defff604 	addi	sp,sp,-40
8112e060:	de00012e 	bgeu	sp,et,8112e068 <OSQPendAbort+0xc>
8112e064:	003b68fa 	trap	3
8112e068:	dfc00915 	stw	ra,36(sp)
8112e06c:	df000815 	stw	fp,32(sp)
8112e070:	df000804 	addi	fp,sp,32
8112e074:	e13ffd15 	stw	r4,-12(fp)
8112e078:	2805883a 	mov	r2,r5
8112e07c:	e1bfff15 	stw	r6,-4(fp)
8112e080:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112e084:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112e088:	e0bfff17 	ldw	r2,-4(fp)
8112e08c:	1000021e 	bne	r2,zero,8112e098 <OSQPendAbort+0x3c>
        return (0);
8112e090:	0005883a 	mov	r2,zero
8112e094:	00004906 	br	8112e1bc <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112e098:	e0bffd17 	ldw	r2,-12(fp)
8112e09c:	1000051e 	bne	r2,zero,8112e0b4 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112e0a0:	e0bfff17 	ldw	r2,-4(fp)
8112e0a4:	00c00104 	movi	r3,4
8112e0a8:	10c00005 	stb	r3,0(r2)
        return (0);
8112e0ac:	0005883a 	mov	r2,zero
8112e0b0:	00004206 	br	8112e1bc <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112e0b4:	e0bffd17 	ldw	r2,-12(fp)
8112e0b8:	10800003 	ldbu	r2,0(r2)
8112e0bc:	10803fcc 	andi	r2,r2,255
8112e0c0:	108000a0 	cmpeqi	r2,r2,2
8112e0c4:	1000051e 	bne	r2,zero,8112e0dc <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112e0c8:	e0bfff17 	ldw	r2,-4(fp)
8112e0cc:	00c00044 	movi	r3,1
8112e0d0:	10c00005 	stb	r3,0(r2)
        return (0);
8112e0d4:	0005883a 	mov	r2,zero
8112e0d8:	00003806 	br	8112e1bc <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e0dc:	0005303a 	rdctl	r2,status
8112e0e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e0e4:	e0fffc17 	ldw	r3,-16(fp)
8112e0e8:	00bfff84 	movi	r2,-2
8112e0ec:	1884703a 	and	r2,r3,r2
8112e0f0:	1001703a 	wrctl	status,r2
  
  return context;
8112e0f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e0f8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112e0fc:	e0bffd17 	ldw	r2,-12(fp)
8112e100:	10800283 	ldbu	r2,10(r2)
8112e104:	10803fcc 	andi	r2,r2,255
8112e108:	10002526 	beq	r2,zero,8112e1a0 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112e10c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112e110:	e0bffe03 	ldbu	r2,-8(fp)
8112e114:	10800060 	cmpeqi	r2,r2,1
8112e118:	10000e26 	beq	r2,zero,8112e154 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112e11c:	00000806 	br	8112e140 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112e120:	01c00084 	movi	r7,2
8112e124:	01800104 	movi	r6,4
8112e128:	000b883a 	mov	r5,zero
8112e12c:	e13ffd17 	ldw	r4,-12(fp)
8112e130:	11293540 	call	81129354 <OS_EventTaskRdy>
                     nbr_tasks++;
8112e134:	e0bff803 	ldbu	r2,-32(fp)
8112e138:	10800044 	addi	r2,r2,1
8112e13c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112e140:	e0bffd17 	ldw	r2,-12(fp)
8112e144:	10800283 	ldbu	r2,10(r2)
8112e148:	10803fcc 	andi	r2,r2,255
8112e14c:	103ff41e 	bne	r2,zero,8112e120 <__reset+0xfb10e120>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112e150:	00000906 	br	8112e178 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112e154:	01c00084 	movi	r7,2
8112e158:	01800104 	movi	r6,4
8112e15c:	000b883a 	mov	r5,zero
8112e160:	e13ffd17 	ldw	r4,-12(fp)
8112e164:	11293540 	call	81129354 <OS_EventTaskRdy>
                 nbr_tasks++;
8112e168:	e0bff803 	ldbu	r2,-32(fp)
8112e16c:	10800044 	addi	r2,r2,1
8112e170:	e0bff805 	stb	r2,-32(fp)
                 break;
8112e174:	0001883a 	nop
8112e178:	e0bff917 	ldw	r2,-28(fp)
8112e17c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e180:	e0bffa17 	ldw	r2,-24(fp)
8112e184:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112e188:	1129e100 	call	81129e10 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112e18c:	e0bfff17 	ldw	r2,-4(fp)
8112e190:	00c00384 	movi	r3,14
8112e194:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112e198:	e0bff803 	ldbu	r2,-32(fp)
8112e19c:	00000706 	br	8112e1bc <OSQPendAbort+0x160>
8112e1a0:	e0bff917 	ldw	r2,-28(fp)
8112e1a4:	e0bffb15 	stw	r2,-20(fp)
8112e1a8:	e0bffb17 	ldw	r2,-20(fp)
8112e1ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e1b0:	e0bfff17 	ldw	r2,-4(fp)
8112e1b4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112e1b8:	0005883a 	mov	r2,zero
}
8112e1bc:	e037883a 	mov	sp,fp
8112e1c0:	dfc00117 	ldw	ra,4(sp)
8112e1c4:	df000017 	ldw	fp,0(sp)
8112e1c8:	dec00204 	addi	sp,sp,8
8112e1cc:	f800283a 	ret

8112e1d0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112e1d0:	defff604 	addi	sp,sp,-40
8112e1d4:	de00012e 	bgeu	sp,et,8112e1dc <OSQPost+0xc>
8112e1d8:	003b68fa 	trap	3
8112e1dc:	dfc00915 	stw	ra,36(sp)
8112e1e0:	df000815 	stw	fp,32(sp)
8112e1e4:	df000804 	addi	fp,sp,32
8112e1e8:	e13ffe15 	stw	r4,-8(fp)
8112e1ec:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112e1f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112e1f4:	e0bffe17 	ldw	r2,-8(fp)
8112e1f8:	1000021e 	bne	r2,zero,8112e204 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112e1fc:	00800104 	movi	r2,4
8112e200:	00004a06 	br	8112e32c <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112e204:	e0bffe17 	ldw	r2,-8(fp)
8112e208:	10800003 	ldbu	r2,0(r2)
8112e20c:	10803fcc 	andi	r2,r2,255
8112e210:	108000a0 	cmpeqi	r2,r2,2
8112e214:	1000021e 	bne	r2,zero,8112e220 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112e218:	00800044 	movi	r2,1
8112e21c:	00004306 	br	8112e32c <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e220:	0005303a 	rdctl	r2,status
8112e224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e228:	e0fffd17 	ldw	r3,-12(fp)
8112e22c:	00bfff84 	movi	r2,-2
8112e230:	1884703a 	and	r2,r3,r2
8112e234:	1001703a 	wrctl	status,r2
  
  return context;
8112e238:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e23c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112e240:	e0bffe17 	ldw	r2,-8(fp)
8112e244:	10800283 	ldbu	r2,10(r2)
8112e248:	10803fcc 	andi	r2,r2,255
8112e24c:	10000c26 	beq	r2,zero,8112e280 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e250:	000f883a 	mov	r7,zero
8112e254:	01800104 	movi	r6,4
8112e258:	e17fff17 	ldw	r5,-4(fp)
8112e25c:	e13ffe17 	ldw	r4,-8(fp)
8112e260:	11293540 	call	81129354 <OS_EventTaskRdy>
8112e264:	e0bff817 	ldw	r2,-32(fp)
8112e268:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e26c:	e0bff917 	ldw	r2,-28(fp)
8112e270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112e274:	1129e100 	call	81129e10 <OS_Sched>
        return (OS_ERR_NONE);
8112e278:	0005883a 	mov	r2,zero
8112e27c:	00002b06 	br	8112e32c <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112e280:	e0bffe17 	ldw	r2,-8(fp)
8112e284:	10800117 	ldw	r2,4(r2)
8112e288:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112e28c:	e0bffb17 	ldw	r2,-20(fp)
8112e290:	10c0058b 	ldhu	r3,22(r2)
8112e294:	e0bffb17 	ldw	r2,-20(fp)
8112e298:	1080050b 	ldhu	r2,20(r2)
8112e29c:	18ffffcc 	andi	r3,r3,65535
8112e2a0:	10bfffcc 	andi	r2,r2,65535
8112e2a4:	18800636 	bltu	r3,r2,8112e2c0 <OSQPost+0xf0>
8112e2a8:	e0bff817 	ldw	r2,-32(fp)
8112e2ac:	e0bffa15 	stw	r2,-24(fp)
8112e2b0:	e0bffa17 	ldw	r2,-24(fp)
8112e2b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e2b8:	00800784 	movi	r2,30
8112e2bc:	00001b06 	br	8112e32c <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112e2c0:	e0bffb17 	ldw	r2,-20(fp)
8112e2c4:	10800317 	ldw	r2,12(r2)
8112e2c8:	11000104 	addi	r4,r2,4
8112e2cc:	e0fffb17 	ldw	r3,-20(fp)
8112e2d0:	19000315 	stw	r4,12(r3)
8112e2d4:	e0ffff17 	ldw	r3,-4(fp)
8112e2d8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112e2dc:	e0bffb17 	ldw	r2,-20(fp)
8112e2e0:	1080058b 	ldhu	r2,22(r2)
8112e2e4:	10800044 	addi	r2,r2,1
8112e2e8:	1007883a 	mov	r3,r2
8112e2ec:	e0bffb17 	ldw	r2,-20(fp)
8112e2f0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112e2f4:	e0bffb17 	ldw	r2,-20(fp)
8112e2f8:	10c00317 	ldw	r3,12(r2)
8112e2fc:	e0bffb17 	ldw	r2,-20(fp)
8112e300:	10800217 	ldw	r2,8(r2)
8112e304:	1880041e 	bne	r3,r2,8112e318 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112e308:	e0bffb17 	ldw	r2,-20(fp)
8112e30c:	10c00117 	ldw	r3,4(r2)
8112e310:	e0bffb17 	ldw	r2,-20(fp)
8112e314:	10c00315 	stw	r3,12(r2)
8112e318:	e0bff817 	ldw	r2,-32(fp)
8112e31c:	e0bffc15 	stw	r2,-16(fp)
8112e320:	e0bffc17 	ldw	r2,-16(fp)
8112e324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e328:	0005883a 	mov	r2,zero
}
8112e32c:	e037883a 	mov	sp,fp
8112e330:	dfc00117 	ldw	ra,4(sp)
8112e334:	df000017 	ldw	fp,0(sp)
8112e338:	dec00204 	addi	sp,sp,8
8112e33c:	f800283a 	ret

8112e340 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112e340:	defff604 	addi	sp,sp,-40
8112e344:	de00012e 	bgeu	sp,et,8112e34c <OSQPostFront+0xc>
8112e348:	003b68fa 	trap	3
8112e34c:	dfc00915 	stw	ra,36(sp)
8112e350:	df000815 	stw	fp,32(sp)
8112e354:	df000804 	addi	fp,sp,32
8112e358:	e13ffe15 	stw	r4,-8(fp)
8112e35c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e360:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e364:	e0bffe17 	ldw	r2,-8(fp)
8112e368:	1000021e 	bne	r2,zero,8112e374 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112e36c:	00800104 	movi	r2,4
8112e370:	00004c06 	br	8112e4a4 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112e374:	e0bffe17 	ldw	r2,-8(fp)
8112e378:	10800003 	ldbu	r2,0(r2)
8112e37c:	10803fcc 	andi	r2,r2,255
8112e380:	108000a0 	cmpeqi	r2,r2,2
8112e384:	1000021e 	bne	r2,zero,8112e390 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112e388:	00800044 	movi	r2,1
8112e38c:	00004506 	br	8112e4a4 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e390:	0005303a 	rdctl	r2,status
8112e394:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e398:	e0fffd17 	ldw	r3,-12(fp)
8112e39c:	00bfff84 	movi	r2,-2
8112e3a0:	1884703a 	and	r2,r3,r2
8112e3a4:	1001703a 	wrctl	status,r2
  
  return context;
8112e3a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e3ac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112e3b0:	e0bffe17 	ldw	r2,-8(fp)
8112e3b4:	10800283 	ldbu	r2,10(r2)
8112e3b8:	10803fcc 	andi	r2,r2,255
8112e3bc:	10000c26 	beq	r2,zero,8112e3f0 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e3c0:	000f883a 	mov	r7,zero
8112e3c4:	01800104 	movi	r6,4
8112e3c8:	e17fff17 	ldw	r5,-4(fp)
8112e3cc:	e13ffe17 	ldw	r4,-8(fp)
8112e3d0:	11293540 	call	81129354 <OS_EventTaskRdy>
8112e3d4:	e0bff817 	ldw	r2,-32(fp)
8112e3d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e3dc:	e0bff917 	ldw	r2,-28(fp)
8112e3e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112e3e4:	1129e100 	call	81129e10 <OS_Sched>
        return (OS_ERR_NONE);
8112e3e8:	0005883a 	mov	r2,zero
8112e3ec:	00002d06 	br	8112e4a4 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112e3f0:	e0bffe17 	ldw	r2,-8(fp)
8112e3f4:	10800117 	ldw	r2,4(r2)
8112e3f8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112e3fc:	e0bffb17 	ldw	r2,-20(fp)
8112e400:	10c0058b 	ldhu	r3,22(r2)
8112e404:	e0bffb17 	ldw	r2,-20(fp)
8112e408:	1080050b 	ldhu	r2,20(r2)
8112e40c:	18ffffcc 	andi	r3,r3,65535
8112e410:	10bfffcc 	andi	r2,r2,65535
8112e414:	18800636 	bltu	r3,r2,8112e430 <OSQPostFront+0xf0>
8112e418:	e0bff817 	ldw	r2,-32(fp)
8112e41c:	e0bffa15 	stw	r2,-24(fp)
8112e420:	e0bffa17 	ldw	r2,-24(fp)
8112e424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e428:	00800784 	movi	r2,30
8112e42c:	00001d06 	br	8112e4a4 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112e430:	e0bffb17 	ldw	r2,-20(fp)
8112e434:	10c00417 	ldw	r3,16(r2)
8112e438:	e0bffb17 	ldw	r2,-20(fp)
8112e43c:	10800117 	ldw	r2,4(r2)
8112e440:	1880041e 	bne	r3,r2,8112e454 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112e444:	e0bffb17 	ldw	r2,-20(fp)
8112e448:	10c00217 	ldw	r3,8(r2)
8112e44c:	e0bffb17 	ldw	r2,-20(fp)
8112e450:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112e454:	e0bffb17 	ldw	r2,-20(fp)
8112e458:	10800417 	ldw	r2,16(r2)
8112e45c:	10ffff04 	addi	r3,r2,-4
8112e460:	e0bffb17 	ldw	r2,-20(fp)
8112e464:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112e468:	e0bffb17 	ldw	r2,-20(fp)
8112e46c:	10800417 	ldw	r2,16(r2)
8112e470:	e0ffff17 	ldw	r3,-4(fp)
8112e474:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112e478:	e0bffb17 	ldw	r2,-20(fp)
8112e47c:	1080058b 	ldhu	r2,22(r2)
8112e480:	10800044 	addi	r2,r2,1
8112e484:	1007883a 	mov	r3,r2
8112e488:	e0bffb17 	ldw	r2,-20(fp)
8112e48c:	10c0058d 	sth	r3,22(r2)
8112e490:	e0bff817 	ldw	r2,-32(fp)
8112e494:	e0bffc15 	stw	r2,-16(fp)
8112e498:	e0bffc17 	ldw	r2,-16(fp)
8112e49c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e4a0:	0005883a 	mov	r2,zero
}
8112e4a4:	e037883a 	mov	sp,fp
8112e4a8:	dfc00117 	ldw	ra,4(sp)
8112e4ac:	df000017 	ldw	fp,0(sp)
8112e4b0:	dec00204 	addi	sp,sp,8
8112e4b4:	f800283a 	ret

8112e4b8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112e4b8:	defff504 	addi	sp,sp,-44
8112e4bc:	de00012e 	bgeu	sp,et,8112e4c4 <OSQPostOpt+0xc>
8112e4c0:	003b68fa 	trap	3
8112e4c4:	dfc00a15 	stw	ra,40(sp)
8112e4c8:	df000915 	stw	fp,36(sp)
8112e4cc:	df000904 	addi	fp,sp,36
8112e4d0:	e13ffd15 	stw	r4,-12(fp)
8112e4d4:	e17ffe15 	stw	r5,-8(fp)
8112e4d8:	3005883a 	mov	r2,r6
8112e4dc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e4e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e4e4:	e0bffd17 	ldw	r2,-12(fp)
8112e4e8:	1000021e 	bne	r2,zero,8112e4f4 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112e4ec:	00800104 	movi	r2,4
8112e4f0:	00007106 	br	8112e6b8 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112e4f4:	e0bffd17 	ldw	r2,-12(fp)
8112e4f8:	10800003 	ldbu	r2,0(r2)
8112e4fc:	10803fcc 	andi	r2,r2,255
8112e500:	108000a0 	cmpeqi	r2,r2,2
8112e504:	1000021e 	bne	r2,zero,8112e510 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112e508:	00800044 	movi	r2,1
8112e50c:	00006a06 	br	8112e6b8 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e510:	0005303a 	rdctl	r2,status
8112e514:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e518:	e0fffc17 	ldw	r3,-16(fp)
8112e51c:	00bfff84 	movi	r2,-2
8112e520:	1884703a 	and	r2,r3,r2
8112e524:	1001703a 	wrctl	status,r2
  
  return context;
8112e528:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e52c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112e530:	e0bffd17 	ldw	r2,-12(fp)
8112e534:	10800283 	ldbu	r2,10(r2)
8112e538:	10803fcc 	andi	r2,r2,255
8112e53c:	10001d26 	beq	r2,zero,8112e5b4 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112e540:	e0bfff03 	ldbu	r2,-4(fp)
8112e544:	1080004c 	andi	r2,r2,1
8112e548:	10000b26 	beq	r2,zero,8112e578 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112e54c:	00000506 	br	8112e564 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e550:	000f883a 	mov	r7,zero
8112e554:	01800104 	movi	r6,4
8112e558:	e17ffe17 	ldw	r5,-8(fp)
8112e55c:	e13ffd17 	ldw	r4,-12(fp)
8112e560:	11293540 	call	81129354 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112e564:	e0bffd17 	ldw	r2,-12(fp)
8112e568:	10800283 	ldbu	r2,10(r2)
8112e56c:	10803fcc 	andi	r2,r2,255
8112e570:	103ff71e 	bne	r2,zero,8112e550 <__reset+0xfb10e550>
8112e574:	00000506 	br	8112e58c <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112e578:	000f883a 	mov	r7,zero
8112e57c:	01800104 	movi	r6,4
8112e580:	e17ffe17 	ldw	r5,-8(fp)
8112e584:	e13ffd17 	ldw	r4,-12(fp)
8112e588:	11293540 	call	81129354 <OS_EventTaskRdy>
8112e58c:	e0bff717 	ldw	r2,-36(fp)
8112e590:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e594:	e0bff817 	ldw	r2,-32(fp)
8112e598:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112e59c:	e0bfff03 	ldbu	r2,-4(fp)
8112e5a0:	1080010c 	andi	r2,r2,4
8112e5a4:	1000011e 	bne	r2,zero,8112e5ac <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112e5a8:	1129e100 	call	81129e10 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112e5ac:	0005883a 	mov	r2,zero
8112e5b0:	00004106 	br	8112e6b8 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112e5b4:	e0bffd17 	ldw	r2,-12(fp)
8112e5b8:	10800117 	ldw	r2,4(r2)
8112e5bc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112e5c0:	e0bffa17 	ldw	r2,-24(fp)
8112e5c4:	10c0058b 	ldhu	r3,22(r2)
8112e5c8:	e0bffa17 	ldw	r2,-24(fp)
8112e5cc:	1080050b 	ldhu	r2,20(r2)
8112e5d0:	18ffffcc 	andi	r3,r3,65535
8112e5d4:	10bfffcc 	andi	r2,r2,65535
8112e5d8:	18800636 	bltu	r3,r2,8112e5f4 <OSQPostOpt+0x13c>
8112e5dc:	e0bff717 	ldw	r2,-36(fp)
8112e5e0:	e0bff915 	stw	r2,-28(fp)
8112e5e4:	e0bff917 	ldw	r2,-28(fp)
8112e5e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112e5ec:	00800784 	movi	r2,30
8112e5f0:	00003106 	br	8112e6b8 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112e5f4:	e0bfff03 	ldbu	r2,-4(fp)
8112e5f8:	1080008c 	andi	r2,r2,2
8112e5fc:	10001326 	beq	r2,zero,8112e64c <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112e600:	e0bffa17 	ldw	r2,-24(fp)
8112e604:	10c00417 	ldw	r3,16(r2)
8112e608:	e0bffa17 	ldw	r2,-24(fp)
8112e60c:	10800117 	ldw	r2,4(r2)
8112e610:	1880041e 	bne	r3,r2,8112e624 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112e614:	e0bffa17 	ldw	r2,-24(fp)
8112e618:	10c00217 	ldw	r3,8(r2)
8112e61c:	e0bffa17 	ldw	r2,-24(fp)
8112e620:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112e624:	e0bffa17 	ldw	r2,-24(fp)
8112e628:	10800417 	ldw	r2,16(r2)
8112e62c:	10ffff04 	addi	r3,r2,-4
8112e630:	e0bffa17 	ldw	r2,-24(fp)
8112e634:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112e638:	e0bffa17 	ldw	r2,-24(fp)
8112e63c:	10800417 	ldw	r2,16(r2)
8112e640:	e0fffe17 	ldw	r3,-8(fp)
8112e644:	10c00015 	stw	r3,0(r2)
8112e648:	00001006 	br	8112e68c <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112e64c:	e0bffa17 	ldw	r2,-24(fp)
8112e650:	10800317 	ldw	r2,12(r2)
8112e654:	11000104 	addi	r4,r2,4
8112e658:	e0fffa17 	ldw	r3,-24(fp)
8112e65c:	19000315 	stw	r4,12(r3)
8112e660:	e0fffe17 	ldw	r3,-8(fp)
8112e664:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112e668:	e0bffa17 	ldw	r2,-24(fp)
8112e66c:	10c00317 	ldw	r3,12(r2)
8112e670:	e0bffa17 	ldw	r2,-24(fp)
8112e674:	10800217 	ldw	r2,8(r2)
8112e678:	1880041e 	bne	r3,r2,8112e68c <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112e67c:	e0bffa17 	ldw	r2,-24(fp)
8112e680:	10c00117 	ldw	r3,4(r2)
8112e684:	e0bffa17 	ldw	r2,-24(fp)
8112e688:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112e68c:	e0bffa17 	ldw	r2,-24(fp)
8112e690:	1080058b 	ldhu	r2,22(r2)
8112e694:	10800044 	addi	r2,r2,1
8112e698:	1007883a 	mov	r3,r2
8112e69c:	e0bffa17 	ldw	r2,-24(fp)
8112e6a0:	10c0058d 	sth	r3,22(r2)
8112e6a4:	e0bff717 	ldw	r2,-36(fp)
8112e6a8:	e0bffb15 	stw	r2,-20(fp)
8112e6ac:	e0bffb17 	ldw	r2,-20(fp)
8112e6b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e6b4:	0005883a 	mov	r2,zero
}
8112e6b8:	e037883a 	mov	sp,fp
8112e6bc:	dfc00117 	ldw	ra,4(sp)
8112e6c0:	df000017 	ldw	fp,0(sp)
8112e6c4:	dec00204 	addi	sp,sp,8
8112e6c8:	f800283a 	ret

8112e6cc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112e6cc:	defff604 	addi	sp,sp,-40
8112e6d0:	de00012e 	bgeu	sp,et,8112e6d8 <OSQQuery+0xc>
8112e6d4:	003b68fa 	trap	3
8112e6d8:	df000915 	stw	fp,36(sp)
8112e6dc:	df000904 	addi	fp,sp,36
8112e6e0:	e13ffe15 	stw	r4,-8(fp)
8112e6e4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112e6e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112e6ec:	e0bffe17 	ldw	r2,-8(fp)
8112e6f0:	1000021e 	bne	r2,zero,8112e6fc <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112e6f4:	00800104 	movi	r2,4
8112e6f8:	00004906 	br	8112e820 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112e6fc:	e0bfff17 	ldw	r2,-4(fp)
8112e700:	1000021e 	bne	r2,zero,8112e70c <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112e704:	00800244 	movi	r2,9
8112e708:	00004506 	br	8112e820 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112e70c:	e0bffe17 	ldw	r2,-8(fp)
8112e710:	10800003 	ldbu	r2,0(r2)
8112e714:	10803fcc 	andi	r2,r2,255
8112e718:	108000a0 	cmpeqi	r2,r2,2
8112e71c:	1000021e 	bne	r2,zero,8112e728 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112e720:	00800044 	movi	r2,1
8112e724:	00003e06 	br	8112e820 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e728:	0005303a 	rdctl	r2,status
8112e72c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e730:	e0fffd17 	ldw	r3,-12(fp)
8112e734:	00bfff84 	movi	r2,-2
8112e738:	1884703a 	and	r2,r3,r2
8112e73c:	1001703a 	wrctl	status,r2
  
  return context;
8112e740:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e744:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112e748:	e0bffe17 	ldw	r2,-8(fp)
8112e74c:	10c00283 	ldbu	r3,10(r2)
8112e750:	e0bfff17 	ldw	r2,-4(fp)
8112e754:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112e758:	e0bffe17 	ldw	r2,-8(fp)
8112e75c:	108002c4 	addi	r2,r2,11
8112e760:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112e764:	e0bfff17 	ldw	r2,-4(fp)
8112e768:	10800204 	addi	r2,r2,8
8112e76c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e770:	e03ff705 	stb	zero,-36(fp)
8112e774:	00000b06 	br	8112e7a4 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112e778:	e0bff917 	ldw	r2,-28(fp)
8112e77c:	10c00044 	addi	r3,r2,1
8112e780:	e0fff915 	stw	r3,-28(fp)
8112e784:	e0fff817 	ldw	r3,-32(fp)
8112e788:	19000044 	addi	r4,r3,1
8112e78c:	e13ff815 	stw	r4,-32(fp)
8112e790:	18c00003 	ldbu	r3,0(r3)
8112e794:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e798:	e0bff703 	ldbu	r2,-36(fp)
8112e79c:	10800044 	addi	r2,r2,1
8112e7a0:	e0bff705 	stb	r2,-36(fp)
8112e7a4:	e0bff703 	ldbu	r2,-36(fp)
8112e7a8:	108001b0 	cmpltui	r2,r2,6
8112e7ac:	103ff21e 	bne	r2,zero,8112e778 <__reset+0xfb10e778>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112e7b0:	e0bffe17 	ldw	r2,-8(fp)
8112e7b4:	10800117 	ldw	r2,4(r2)
8112e7b8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112e7bc:	e0bffc17 	ldw	r2,-16(fp)
8112e7c0:	1080058b 	ldhu	r2,22(r2)
8112e7c4:	10bfffcc 	andi	r2,r2,65535
8112e7c8:	10000626 	beq	r2,zero,8112e7e4 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112e7cc:	e0bffc17 	ldw	r2,-16(fp)
8112e7d0:	10800417 	ldw	r2,16(r2)
8112e7d4:	10c00017 	ldw	r3,0(r2)
8112e7d8:	e0bfff17 	ldw	r2,-4(fp)
8112e7dc:	10c00015 	stw	r3,0(r2)
8112e7e0:	00000206 	br	8112e7ec <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112e7e4:	e0bfff17 	ldw	r2,-4(fp)
8112e7e8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112e7ec:	e0bffc17 	ldw	r2,-16(fp)
8112e7f0:	10c0058b 	ldhu	r3,22(r2)
8112e7f4:	e0bfff17 	ldw	r2,-4(fp)
8112e7f8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112e7fc:	e0bffc17 	ldw	r2,-16(fp)
8112e800:	10c0050b 	ldhu	r3,20(r2)
8112e804:	e0bfff17 	ldw	r2,-4(fp)
8112e808:	10c0018d 	sth	r3,6(r2)
8112e80c:	e0bffa17 	ldw	r2,-24(fp)
8112e810:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e814:	e0bffb17 	ldw	r2,-20(fp)
8112e818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e81c:	0005883a 	mov	r2,zero
}
8112e820:	e037883a 	mov	sp,fp
8112e824:	df000017 	ldw	fp,0(sp)
8112e828:	dec00104 	addi	sp,sp,4
8112e82c:	f800283a 	ret

8112e830 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112e830:	defffb04 	addi	sp,sp,-20
8112e834:	de00012e 	bgeu	sp,et,8112e83c <OS_QInit+0xc>
8112e838:	003b68fa 	trap	3
8112e83c:	dfc00415 	stw	ra,16(sp)
8112e840:	df000315 	stw	fp,12(sp)
8112e844:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112e848:	01407804 	movi	r5,480
8112e84c:	01204574 	movhi	r4,33045
8112e850:	2104b504 	addi	r4,r4,4820
8112e854:	1129d440 	call	81129d44 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112e858:	00a04574 	movhi	r2,33045
8112e85c:	1084b504 	addi	r2,r2,4820
8112e860:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112e864:	00a04574 	movhi	r2,33045
8112e868:	1084bb04 	addi	r2,r2,4844
8112e86c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112e870:	e03ffd0d 	sth	zero,-12(fp)
8112e874:	00000c06 	br	8112e8a8 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112e878:	e0bffe17 	ldw	r2,-8(fp)
8112e87c:	e0ffff17 	ldw	r3,-4(fp)
8112e880:	10c00015 	stw	r3,0(r2)
        pq1++;
8112e884:	e0bffe17 	ldw	r2,-8(fp)
8112e888:	10800604 	addi	r2,r2,24
8112e88c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112e890:	e0bfff17 	ldw	r2,-4(fp)
8112e894:	10800604 	addi	r2,r2,24
8112e898:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112e89c:	e0bffd0b 	ldhu	r2,-12(fp)
8112e8a0:	10800044 	addi	r2,r2,1
8112e8a4:	e0bffd0d 	sth	r2,-12(fp)
8112e8a8:	e0bffd0b 	ldhu	r2,-12(fp)
8112e8ac:	108004f0 	cmpltui	r2,r2,19
8112e8b0:	103ff11e 	bne	r2,zero,8112e878 <__reset+0xfb10e878>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112e8b4:	e0bffe17 	ldw	r2,-8(fp)
8112e8b8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112e8bc:	00a04574 	movhi	r2,33045
8112e8c0:	1084b504 	addi	r2,r2,4820
8112e8c4:	d0a07f15 	stw	r2,-32260(gp)
#endif
}
8112e8c8:	0001883a 	nop
8112e8cc:	e037883a 	mov	sp,fp
8112e8d0:	dfc00117 	ldw	ra,4(sp)
8112e8d4:	df000017 	ldw	fp,0(sp)
8112e8d8:	dec00204 	addi	sp,sp,8
8112e8dc:	f800283a 	ret

8112e8e0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112e8e0:	defffa04 	addi	sp,sp,-24
8112e8e4:	de00012e 	bgeu	sp,et,8112e8ec <OSSemAccept+0xc>
8112e8e8:	003b68fa 	trap	3
8112e8ec:	df000515 	stw	fp,20(sp)
8112e8f0:	df000504 	addi	fp,sp,20
8112e8f4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e8f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e8fc:	e0bfff17 	ldw	r2,-4(fp)
8112e900:	1000021e 	bne	r2,zero,8112e90c <OSSemAccept+0x2c>
        return (0);
8112e904:	0005883a 	mov	r2,zero
8112e908:	00001f06 	br	8112e988 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112e90c:	e0bfff17 	ldw	r2,-4(fp)
8112e910:	10800003 	ldbu	r2,0(r2)
8112e914:	10803fcc 	andi	r2,r2,255
8112e918:	108000e0 	cmpeqi	r2,r2,3
8112e91c:	1000021e 	bne	r2,zero,8112e928 <OSSemAccept+0x48>
        return (0);
8112e920:	0005883a 	mov	r2,zero
8112e924:	00001806 	br	8112e988 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e928:	0005303a 	rdctl	r2,status
8112e92c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e930:	e0fffe17 	ldw	r3,-8(fp)
8112e934:	00bfff84 	movi	r2,-2
8112e938:	1884703a 	and	r2,r3,r2
8112e93c:	1001703a 	wrctl	status,r2
  
  return context;
8112e940:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112e944:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112e948:	e0bfff17 	ldw	r2,-4(fp)
8112e94c:	1080020b 	ldhu	r2,8(r2)
8112e950:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112e954:	e0bffd0b 	ldhu	r2,-12(fp)
8112e958:	10000626 	beq	r2,zero,8112e974 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112e95c:	e0bfff17 	ldw	r2,-4(fp)
8112e960:	1080020b 	ldhu	r2,8(r2)
8112e964:	10bfffc4 	addi	r2,r2,-1
8112e968:	1007883a 	mov	r3,r2
8112e96c:	e0bfff17 	ldw	r2,-4(fp)
8112e970:	10c0020d 	sth	r3,8(r2)
8112e974:	e0bffb17 	ldw	r2,-20(fp)
8112e978:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e97c:	e0bffc17 	ldw	r2,-16(fp)
8112e980:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112e984:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112e988:	e037883a 	mov	sp,fp
8112e98c:	df000017 	ldw	fp,0(sp)
8112e990:	dec00104 	addi	sp,sp,4
8112e994:	f800283a 	ret

8112e998 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112e998:	defff904 	addi	sp,sp,-28
8112e99c:	de00012e 	bgeu	sp,et,8112e9a4 <OSSemCreate+0xc>
8112e9a0:	003b68fa 	trap	3
8112e9a4:	dfc00615 	stw	ra,24(sp)
8112e9a8:	df000515 	stw	fp,20(sp)
8112e9ac:	df000504 	addi	fp,sp,20
8112e9b0:	2005883a 	mov	r2,r4
8112e9b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112e9b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112e9bc:	d0a08303 	ldbu	r2,-32244(gp)
8112e9c0:	10803fcc 	andi	r2,r2,255
8112e9c4:	10000226 	beq	r2,zero,8112e9d0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112e9c8:	0005883a 	mov	r2,zero
8112e9cc:	00002506 	br	8112ea64 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e9d0:	0005303a 	rdctl	r2,status
8112e9d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e9d8:	e0fffe17 	ldw	r3,-8(fp)
8112e9dc:	00bfff84 	movi	r2,-2
8112e9e0:	1884703a 	and	r2,r3,r2
8112e9e4:	1001703a 	wrctl	status,r2
  
  return context;
8112e9e8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112e9ec:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112e9f0:	d0a08217 	ldw	r2,-32248(gp)
8112e9f4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112e9f8:	d0a08217 	ldw	r2,-32248(gp)
8112e9fc:	10000326 	beq	r2,zero,8112ea0c <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112ea00:	d0a08217 	ldw	r2,-32248(gp)
8112ea04:	10800117 	ldw	r2,4(r2)
8112ea08:	d0a08215 	stw	r2,-32248(gp)
8112ea0c:	e0bffb17 	ldw	r2,-20(fp)
8112ea10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ea14:	e0bffc17 	ldw	r2,-16(fp)
8112ea18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112ea1c:	e0bffd17 	ldw	r2,-12(fp)
8112ea20:	10000f26 	beq	r2,zero,8112ea60 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112ea24:	e0bffd17 	ldw	r2,-12(fp)
8112ea28:	00c000c4 	movi	r3,3
8112ea2c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112ea30:	e0bffd17 	ldw	r2,-12(fp)
8112ea34:	e0ffff0b 	ldhu	r3,-4(fp)
8112ea38:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112ea3c:	e0bffd17 	ldw	r2,-12(fp)
8112ea40:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112ea44:	e0bffd17 	ldw	r2,-12(fp)
8112ea48:	00c00fc4 	movi	r3,63
8112ea4c:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112ea50:	e0bffd17 	ldw	r2,-12(fp)
8112ea54:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112ea58:	e13ffd17 	ldw	r4,-12(fp)
8112ea5c:	112992c0 	call	8112992c <OS_EventWaitListInit>
    }
    return (pevent);
8112ea60:	e0bffd17 	ldw	r2,-12(fp)
}
8112ea64:	e037883a 	mov	sp,fp
8112ea68:	dfc00117 	ldw	ra,4(sp)
8112ea6c:	df000017 	ldw	fp,0(sp)
8112ea70:	dec00204 	addi	sp,sp,8
8112ea74:	f800283a 	ret

8112ea78 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ea78:	defff304 	addi	sp,sp,-52
8112ea7c:	de00012e 	bgeu	sp,et,8112ea84 <OSSemDel+0xc>
8112ea80:	003b68fa 	trap	3
8112ea84:	dfc00c15 	stw	ra,48(sp)
8112ea88:	df000b15 	stw	fp,44(sp)
8112ea8c:	df000b04 	addi	fp,sp,44
8112ea90:	e13ffd15 	stw	r4,-12(fp)
8112ea94:	2805883a 	mov	r2,r5
8112ea98:	e1bfff15 	stw	r6,-4(fp)
8112ea9c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112eaa0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112eaa4:	e0bfff17 	ldw	r2,-4(fp)
8112eaa8:	1000021e 	bne	r2,zero,8112eab4 <OSSemDel+0x3c>
        return (pevent);
8112eaac:	e0bffd17 	ldw	r2,-12(fp)
8112eab0:	00007e06 	br	8112ecac <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112eab4:	e0bffd17 	ldw	r2,-12(fp)
8112eab8:	1000051e 	bne	r2,zero,8112ead0 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112eabc:	e0bfff17 	ldw	r2,-4(fp)
8112eac0:	00c00104 	movi	r3,4
8112eac4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112eac8:	e0bffd17 	ldw	r2,-12(fp)
8112eacc:	00007706 	br	8112ecac <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112ead0:	e0bffd17 	ldw	r2,-12(fp)
8112ead4:	10800003 	ldbu	r2,0(r2)
8112ead8:	10803fcc 	andi	r2,r2,255
8112eadc:	108000e0 	cmpeqi	r2,r2,3
8112eae0:	1000051e 	bne	r2,zero,8112eaf8 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112eae4:	e0bfff17 	ldw	r2,-4(fp)
8112eae8:	00c00044 	movi	r3,1
8112eaec:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112eaf0:	e0bffd17 	ldw	r2,-12(fp)
8112eaf4:	00006d06 	br	8112ecac <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112eaf8:	d0a08303 	ldbu	r2,-32244(gp)
8112eafc:	10803fcc 	andi	r2,r2,255
8112eb00:	10000526 	beq	r2,zero,8112eb18 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112eb04:	e0bfff17 	ldw	r2,-4(fp)
8112eb08:	00c003c4 	movi	r3,15
8112eb0c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112eb10:	e0bffd17 	ldw	r2,-12(fp)
8112eb14:	00006506 	br	8112ecac <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eb18:	0005303a 	rdctl	r2,status
8112eb1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eb20:	e0fffc17 	ldw	r3,-16(fp)
8112eb24:	00bfff84 	movi	r2,-2
8112eb28:	1884703a 	and	r2,r3,r2
8112eb2c:	1001703a 	wrctl	status,r2
  
  return context;
8112eb30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112eb34:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112eb38:	e0bffd17 	ldw	r2,-12(fp)
8112eb3c:	10800283 	ldbu	r2,10(r2)
8112eb40:	10803fcc 	andi	r2,r2,255
8112eb44:	10000326 	beq	r2,zero,8112eb54 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112eb48:	00800044 	movi	r2,1
8112eb4c:	e0bff505 	stb	r2,-44(fp)
8112eb50:	00000106 	br	8112eb58 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112eb54:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112eb58:	e0bffe03 	ldbu	r2,-8(fp)
8112eb5c:	10000326 	beq	r2,zero,8112eb6c <OSSemDel+0xf4>
8112eb60:	10800060 	cmpeqi	r2,r2,1
8112eb64:	1000281e 	bne	r2,zero,8112ec08 <OSSemDel+0x190>
8112eb68:	00004506 	br	8112ec80 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112eb6c:	e0bff503 	ldbu	r2,-44(fp)
8112eb70:	1000161e 	bne	r2,zero,8112ebcc <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112eb74:	e0bffd17 	ldw	r2,-12(fp)
8112eb78:	00c00fc4 	movi	r3,63
8112eb7c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112eb80:	e0bffd17 	ldw	r2,-12(fp)
8112eb84:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112eb88:	e0bffd17 	ldw	r2,-12(fp)
8112eb8c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112eb90:	d0e08217 	ldw	r3,-32248(gp)
8112eb94:	e0bffd17 	ldw	r2,-12(fp)
8112eb98:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112eb9c:	e0bffd17 	ldw	r2,-12(fp)
8112eba0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112eba4:	e0bffd17 	ldw	r2,-12(fp)
8112eba8:	d0a08215 	stw	r2,-32248(gp)
8112ebac:	e0bff717 	ldw	r2,-36(fp)
8112ebb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ebb4:	e0bff817 	ldw	r2,-32(fp)
8112ebb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112ebbc:	e0bfff17 	ldw	r2,-4(fp)
8112ebc0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112ebc4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112ebc8:	00003706 	br	8112eca8 <OSSemDel+0x230>
8112ebcc:	e0bff717 	ldw	r2,-36(fp)
8112ebd0:	e0bff915 	stw	r2,-28(fp)
8112ebd4:	e0bff917 	ldw	r2,-28(fp)
8112ebd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112ebdc:	e0bfff17 	ldw	r2,-4(fp)
8112ebe0:	00c01244 	movi	r3,73
8112ebe4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112ebe8:	e0bffd17 	ldw	r2,-12(fp)
8112ebec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112ebf0:	00002d06 	br	8112eca8 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112ebf4:	000f883a 	mov	r7,zero
8112ebf8:	01800044 	movi	r6,1
8112ebfc:	000b883a 	mov	r5,zero
8112ec00:	e13ffd17 	ldw	r4,-12(fp)
8112ec04:	11293540 	call	81129354 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112ec08:	e0bffd17 	ldw	r2,-12(fp)
8112ec0c:	10800283 	ldbu	r2,10(r2)
8112ec10:	10803fcc 	andi	r2,r2,255
8112ec14:	103ff71e 	bne	r2,zero,8112ebf4 <__reset+0xfb10ebf4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112ec18:	e0bffd17 	ldw	r2,-12(fp)
8112ec1c:	00c00fc4 	movi	r3,63
8112ec20:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112ec24:	e0bffd17 	ldw	r2,-12(fp)
8112ec28:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ec2c:	e0bffd17 	ldw	r2,-12(fp)
8112ec30:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112ec34:	d0e08217 	ldw	r3,-32248(gp)
8112ec38:	e0bffd17 	ldw	r2,-12(fp)
8112ec3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112ec40:	e0bffd17 	ldw	r2,-12(fp)
8112ec44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112ec48:	e0bffd17 	ldw	r2,-12(fp)
8112ec4c:	d0a08215 	stw	r2,-32248(gp)
8112ec50:	e0bff717 	ldw	r2,-36(fp)
8112ec54:	e0bffa15 	stw	r2,-24(fp)
8112ec58:	e0bffa17 	ldw	r2,-24(fp)
8112ec5c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ec60:	e0bff503 	ldbu	r2,-44(fp)
8112ec64:	10800058 	cmpnei	r2,r2,1
8112ec68:	1000011e 	bne	r2,zero,8112ec70 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ec6c:	1129e100 	call	81129e10 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112ec70:	e0bfff17 	ldw	r2,-4(fp)
8112ec74:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112ec78:	e03ff615 	stw	zero,-40(fp)
             break;
8112ec7c:	00000a06 	br	8112eca8 <OSSemDel+0x230>
8112ec80:	e0bff717 	ldw	r2,-36(fp)
8112ec84:	e0bffb15 	stw	r2,-20(fp)
8112ec88:	e0bffb17 	ldw	r2,-20(fp)
8112ec8c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112ec90:	e0bfff17 	ldw	r2,-4(fp)
8112ec94:	00c001c4 	movi	r3,7
8112ec98:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112ec9c:	e0bffd17 	ldw	r2,-12(fp)
8112eca0:	e0bff615 	stw	r2,-40(fp)
             break;
8112eca4:	0001883a 	nop
    }
    return (pevent_return);
8112eca8:	e0bff617 	ldw	r2,-40(fp)
}
8112ecac:	e037883a 	mov	sp,fp
8112ecb0:	dfc00117 	ldw	ra,4(sp)
8112ecb4:	df000017 	ldw	fp,0(sp)
8112ecb8:	dec00204 	addi	sp,sp,8
8112ecbc:	f800283a 	ret

8112ecc0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ecc0:	defff504 	addi	sp,sp,-44
8112ecc4:	de00012e 	bgeu	sp,et,8112eccc <OSSemPend+0xc>
8112ecc8:	003b68fa 	trap	3
8112eccc:	dfc00a15 	stw	ra,40(sp)
8112ecd0:	df000915 	stw	fp,36(sp)
8112ecd4:	df000904 	addi	fp,sp,36
8112ecd8:	e13ffd15 	stw	r4,-12(fp)
8112ecdc:	2805883a 	mov	r2,r5
8112ece0:	e1bfff15 	stw	r6,-4(fp)
8112ece4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ece8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ecec:	e0bfff17 	ldw	r2,-4(fp)
8112ecf0:	10007226 	beq	r2,zero,8112eebc <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ecf4:	e0bffd17 	ldw	r2,-12(fp)
8112ecf8:	1000041e 	bne	r2,zero,8112ed0c <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ecfc:	e0bfff17 	ldw	r2,-4(fp)
8112ed00:	00c00104 	movi	r3,4
8112ed04:	10c00005 	stb	r3,0(r2)
        return;
8112ed08:	00006d06 	br	8112eec0 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112ed0c:	e0bffd17 	ldw	r2,-12(fp)
8112ed10:	10800003 	ldbu	r2,0(r2)
8112ed14:	10803fcc 	andi	r2,r2,255
8112ed18:	108000e0 	cmpeqi	r2,r2,3
8112ed1c:	1000041e 	bne	r2,zero,8112ed30 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112ed20:	e0bfff17 	ldw	r2,-4(fp)
8112ed24:	00c00044 	movi	r3,1
8112ed28:	10c00005 	stb	r3,0(r2)
        return;
8112ed2c:	00006406 	br	8112eec0 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112ed30:	d0a08303 	ldbu	r2,-32244(gp)
8112ed34:	10803fcc 	andi	r2,r2,255
8112ed38:	10000426 	beq	r2,zero,8112ed4c <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112ed3c:	e0bfff17 	ldw	r2,-4(fp)
8112ed40:	00c00084 	movi	r3,2
8112ed44:	10c00005 	stb	r3,0(r2)
        return;
8112ed48:	00005d06 	br	8112eec0 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8112ed4c:	d0a07103 	ldbu	r2,-32316(gp)
8112ed50:	10803fcc 	andi	r2,r2,255
8112ed54:	10000426 	beq	r2,zero,8112ed68 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112ed58:	e0bfff17 	ldw	r2,-4(fp)
8112ed5c:	00c00344 	movi	r3,13
8112ed60:	10c00005 	stb	r3,0(r2)
        return;
8112ed64:	00005606 	br	8112eec0 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ed68:	0005303a 	rdctl	r2,status
8112ed6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ed70:	e0fffc17 	ldw	r3,-16(fp)
8112ed74:	00bfff84 	movi	r2,-2
8112ed78:	1884703a 	and	r2,r3,r2
8112ed7c:	1001703a 	wrctl	status,r2
  
  return context;
8112ed80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ed84:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112ed88:	e0bffd17 	ldw	r2,-12(fp)
8112ed8c:	1080020b 	ldhu	r2,8(r2)
8112ed90:	10bfffcc 	andi	r2,r2,65535
8112ed94:	10000d26 	beq	r2,zero,8112edcc <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8112ed98:	e0bffd17 	ldw	r2,-12(fp)
8112ed9c:	1080020b 	ldhu	r2,8(r2)
8112eda0:	10bfffc4 	addi	r2,r2,-1
8112eda4:	1007883a 	mov	r3,r2
8112eda8:	e0bffd17 	ldw	r2,-12(fp)
8112edac:	10c0020d 	sth	r3,8(r2)
8112edb0:	e0bff717 	ldw	r2,-36(fp)
8112edb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112edb8:	e0bff817 	ldw	r2,-32(fp)
8112edbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112edc0:	e0bfff17 	ldw	r2,-4(fp)
8112edc4:	10000005 	stb	zero,0(r2)
        return;
8112edc8:	00003d06 	br	8112eec0 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8112edcc:	d0a08417 	ldw	r2,-32240(gp)
8112edd0:	d0e08417 	ldw	r3,-32240(gp)
8112edd4:	18c00c03 	ldbu	r3,48(r3)
8112edd8:	18c00054 	ori	r3,r3,1
8112eddc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112ede0:	d0a08417 	ldw	r2,-32240(gp)
8112ede4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8112ede8:	d0a08417 	ldw	r2,-32240(gp)
8112edec:	e0fffe0b 	ldhu	r3,-8(fp)
8112edf0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112edf4:	e13ffd17 	ldw	r4,-12(fp)
8112edf8:	11294f40 	call	811294f4 <OS_EventTaskWait>
8112edfc:	e0bff717 	ldw	r2,-36(fp)
8112ee00:	e0bffb15 	stw	r2,-20(fp)
8112ee04:	e0bffb17 	ldw	r2,-20(fp)
8112ee08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112ee0c:	1129e100 	call	81129e10 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ee10:	0005303a 	rdctl	r2,status
8112ee14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ee18:	e0fff917 	ldw	r3,-28(fp)
8112ee1c:	00bfff84 	movi	r2,-2
8112ee20:	1884703a 	and	r2,r3,r2
8112ee24:	1001703a 	wrctl	status,r2
  
  return context;
8112ee28:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112ee2c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112ee30:	d0a08417 	ldw	r2,-32240(gp)
8112ee34:	10800c43 	ldbu	r2,49(r2)
8112ee38:	10803fcc 	andi	r2,r2,255
8112ee3c:	10000326 	beq	r2,zero,8112ee4c <OSSemPend+0x18c>
8112ee40:	108000a0 	cmpeqi	r2,r2,2
8112ee44:	1000041e 	bne	r2,zero,8112ee58 <OSSemPend+0x198>
8112ee48:	00000706 	br	8112ee68 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112ee4c:	e0bfff17 	ldw	r2,-4(fp)
8112ee50:	10000005 	stb	zero,0(r2)
             break;
8112ee54:	00000c06 	br	8112ee88 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112ee58:	e0bfff17 	ldw	r2,-4(fp)
8112ee5c:	00c00384 	movi	r3,14
8112ee60:	10c00005 	stb	r3,0(r2)
             break;
8112ee64:	00000806 	br	8112ee88 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112ee68:	d0a08417 	ldw	r2,-32240(gp)
8112ee6c:	e17ffd17 	ldw	r5,-12(fp)
8112ee70:	1009883a 	mov	r4,r2
8112ee74:	11297640 	call	81129764 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112ee78:	e0bfff17 	ldw	r2,-4(fp)
8112ee7c:	00c00284 	movi	r3,10
8112ee80:	10c00005 	stb	r3,0(r2)
             break;
8112ee84:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112ee88:	d0a08417 	ldw	r2,-32240(gp)
8112ee8c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112ee90:	d0a08417 	ldw	r2,-32240(gp)
8112ee94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112ee98:	d0a08417 	ldw	r2,-32240(gp)
8112ee9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112eea0:	d0a08417 	ldw	r2,-32240(gp)
8112eea4:	10000815 	stw	zero,32(r2)
8112eea8:	e0bff717 	ldw	r2,-36(fp)
8112eeac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eeb0:	e0bffa17 	ldw	r2,-24(fp)
8112eeb4:	1001703a 	wrctl	status,r2
8112eeb8:	00000106 	br	8112eec0 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112eebc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112eec0:	e037883a 	mov	sp,fp
8112eec4:	dfc00117 	ldw	ra,4(sp)
8112eec8:	df000017 	ldw	fp,0(sp)
8112eecc:	dec00204 	addi	sp,sp,8
8112eed0:	f800283a 	ret

8112eed4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112eed4:	defff604 	addi	sp,sp,-40
8112eed8:	de00012e 	bgeu	sp,et,8112eee0 <OSSemPendAbort+0xc>
8112eedc:	003b68fa 	trap	3
8112eee0:	dfc00915 	stw	ra,36(sp)
8112eee4:	df000815 	stw	fp,32(sp)
8112eee8:	df000804 	addi	fp,sp,32
8112eeec:	e13ffd15 	stw	r4,-12(fp)
8112eef0:	2805883a 	mov	r2,r5
8112eef4:	e1bfff15 	stw	r6,-4(fp)
8112eef8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112eefc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ef00:	e0bfff17 	ldw	r2,-4(fp)
8112ef04:	1000021e 	bne	r2,zero,8112ef10 <OSSemPendAbort+0x3c>
        return (0);
8112ef08:	0005883a 	mov	r2,zero
8112ef0c:	00004906 	br	8112f034 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ef10:	e0bffd17 	ldw	r2,-12(fp)
8112ef14:	1000051e 	bne	r2,zero,8112ef2c <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ef18:	e0bfff17 	ldw	r2,-4(fp)
8112ef1c:	00c00104 	movi	r3,4
8112ef20:	10c00005 	stb	r3,0(r2)
        return (0);
8112ef24:	0005883a 	mov	r2,zero
8112ef28:	00004206 	br	8112f034 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112ef2c:	e0bffd17 	ldw	r2,-12(fp)
8112ef30:	10800003 	ldbu	r2,0(r2)
8112ef34:	10803fcc 	andi	r2,r2,255
8112ef38:	108000e0 	cmpeqi	r2,r2,3
8112ef3c:	1000051e 	bne	r2,zero,8112ef54 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ef40:	e0bfff17 	ldw	r2,-4(fp)
8112ef44:	00c00044 	movi	r3,1
8112ef48:	10c00005 	stb	r3,0(r2)
        return (0);
8112ef4c:	0005883a 	mov	r2,zero
8112ef50:	00003806 	br	8112f034 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ef54:	0005303a 	rdctl	r2,status
8112ef58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ef5c:	e0fffc17 	ldw	r3,-16(fp)
8112ef60:	00bfff84 	movi	r2,-2
8112ef64:	1884703a 	and	r2,r3,r2
8112ef68:	1001703a 	wrctl	status,r2
  
  return context;
8112ef6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ef70:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8112ef74:	e0bffd17 	ldw	r2,-12(fp)
8112ef78:	10800283 	ldbu	r2,10(r2)
8112ef7c:	10803fcc 	andi	r2,r2,255
8112ef80:	10002526 	beq	r2,zero,8112f018 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
8112ef84:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112ef88:	e0bffe03 	ldbu	r2,-8(fp)
8112ef8c:	10800060 	cmpeqi	r2,r2,1
8112ef90:	10000e26 	beq	r2,zero,8112efcc <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112ef94:	00000806 	br	8112efb8 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112ef98:	01c00084 	movi	r7,2
8112ef9c:	01800044 	movi	r6,1
8112efa0:	000b883a 	mov	r5,zero
8112efa4:	e13ffd17 	ldw	r4,-12(fp)
8112efa8:	11293540 	call	81129354 <OS_EventTaskRdy>
                     nbr_tasks++;
8112efac:	e0bff803 	ldbu	r2,-32(fp)
8112efb0:	10800044 	addi	r2,r2,1
8112efb4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112efb8:	e0bffd17 	ldw	r2,-12(fp)
8112efbc:	10800283 	ldbu	r2,10(r2)
8112efc0:	10803fcc 	andi	r2,r2,255
8112efc4:	103ff41e 	bne	r2,zero,8112ef98 <__reset+0xfb10ef98>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112efc8:	00000906 	br	8112eff0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112efcc:	01c00084 	movi	r7,2
8112efd0:	01800044 	movi	r6,1
8112efd4:	000b883a 	mov	r5,zero
8112efd8:	e13ffd17 	ldw	r4,-12(fp)
8112efdc:	11293540 	call	81129354 <OS_EventTaskRdy>
                 nbr_tasks++;
8112efe0:	e0bff803 	ldbu	r2,-32(fp)
8112efe4:	10800044 	addi	r2,r2,1
8112efe8:	e0bff805 	stb	r2,-32(fp)
                 break;
8112efec:	0001883a 	nop
8112eff0:	e0bff917 	ldw	r2,-28(fp)
8112eff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eff8:	e0bffa17 	ldw	r2,-24(fp)
8112effc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112f000:	1129e100 	call	81129e10 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112f004:	e0bfff17 	ldw	r2,-4(fp)
8112f008:	00c00384 	movi	r3,14
8112f00c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112f010:	e0bff803 	ldbu	r2,-32(fp)
8112f014:	00000706 	br	8112f034 <OSSemPendAbort+0x160>
8112f018:	e0bff917 	ldw	r2,-28(fp)
8112f01c:	e0bffb15 	stw	r2,-20(fp)
8112f020:	e0bffb17 	ldw	r2,-20(fp)
8112f024:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f028:	e0bfff17 	ldw	r2,-4(fp)
8112f02c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112f030:	0005883a 	mov	r2,zero
}
8112f034:	e037883a 	mov	sp,fp
8112f038:	dfc00117 	ldw	ra,4(sp)
8112f03c:	df000017 	ldw	fp,0(sp)
8112f040:	dec00204 	addi	sp,sp,8
8112f044:	f800283a 	ret

8112f048 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8112f048:	defff804 	addi	sp,sp,-32
8112f04c:	de00012e 	bgeu	sp,et,8112f054 <OSSemPost+0xc>
8112f050:	003b68fa 	trap	3
8112f054:	dfc00715 	stw	ra,28(sp)
8112f058:	df000615 	stw	fp,24(sp)
8112f05c:	df000604 	addi	fp,sp,24
8112f060:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f064:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f068:	e0bfff17 	ldw	r2,-4(fp)
8112f06c:	1000021e 	bne	r2,zero,8112f078 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
8112f070:	00800104 	movi	r2,4
8112f074:	00003506 	br	8112f14c <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112f078:	e0bfff17 	ldw	r2,-4(fp)
8112f07c:	10800003 	ldbu	r2,0(r2)
8112f080:	10803fcc 	andi	r2,r2,255
8112f084:	108000e0 	cmpeqi	r2,r2,3
8112f088:	1000021e 	bne	r2,zero,8112f094 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
8112f08c:	00800044 	movi	r2,1
8112f090:	00002e06 	br	8112f14c <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f094:	0005303a 	rdctl	r2,status
8112f098:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f09c:	e0fffe17 	ldw	r3,-8(fp)
8112f0a0:	00bfff84 	movi	r2,-2
8112f0a4:	1884703a 	and	r2,r3,r2
8112f0a8:	1001703a 	wrctl	status,r2
  
  return context;
8112f0ac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112f0b0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112f0b4:	e0bfff17 	ldw	r2,-4(fp)
8112f0b8:	10800283 	ldbu	r2,10(r2)
8112f0bc:	10803fcc 	andi	r2,r2,255
8112f0c0:	10000c26 	beq	r2,zero,8112f0f4 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112f0c4:	000f883a 	mov	r7,zero
8112f0c8:	01800044 	movi	r6,1
8112f0cc:	000b883a 	mov	r5,zero
8112f0d0:	e13fff17 	ldw	r4,-4(fp)
8112f0d4:	11293540 	call	81129354 <OS_EventTaskRdy>
8112f0d8:	e0bffa17 	ldw	r2,-24(fp)
8112f0dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f0e0:	e0bffb17 	ldw	r2,-20(fp)
8112f0e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112f0e8:	1129e100 	call	81129e10 <OS_Sched>
        return (OS_ERR_NONE);
8112f0ec:	0005883a 	mov	r2,zero
8112f0f0:	00001606 	br	8112f14c <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8112f0f4:	e0bfff17 	ldw	r2,-4(fp)
8112f0f8:	1080020b 	ldhu	r2,8(r2)
8112f0fc:	10ffffcc 	andi	r3,r2,65535
8112f100:	00bfffd4 	movui	r2,65535
8112f104:	18800c26 	beq	r3,r2,8112f138 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112f108:	e0bfff17 	ldw	r2,-4(fp)
8112f10c:	1080020b 	ldhu	r2,8(r2)
8112f110:	10800044 	addi	r2,r2,1
8112f114:	1007883a 	mov	r3,r2
8112f118:	e0bfff17 	ldw	r2,-4(fp)
8112f11c:	10c0020d 	sth	r3,8(r2)
8112f120:	e0bffa17 	ldw	r2,-24(fp)
8112f124:	e0bffc15 	stw	r2,-16(fp)
8112f128:	e0bffc17 	ldw	r2,-16(fp)
8112f12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112f130:	0005883a 	mov	r2,zero
8112f134:	00000506 	br	8112f14c <OSSemPost+0x104>
8112f138:	e0bffa17 	ldw	r2,-24(fp)
8112f13c:	e0bffd15 	stw	r2,-12(fp)
8112f140:	e0bffd17 	ldw	r2,-12(fp)
8112f144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112f148:	00800c84 	movi	r2,50
}
8112f14c:	e037883a 	mov	sp,fp
8112f150:	dfc00117 	ldw	ra,4(sp)
8112f154:	df000017 	ldw	fp,0(sp)
8112f158:	dec00204 	addi	sp,sp,8
8112f15c:	f800283a 	ret

8112f160 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8112f160:	defff704 	addi	sp,sp,-36
8112f164:	de00012e 	bgeu	sp,et,8112f16c <OSSemQuery+0xc>
8112f168:	003b68fa 	trap	3
8112f16c:	df000815 	stw	fp,32(sp)
8112f170:	df000804 	addi	fp,sp,32
8112f174:	e13ffe15 	stw	r4,-8(fp)
8112f178:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f17c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f180:	e0bffe17 	ldw	r2,-8(fp)
8112f184:	1000021e 	bne	r2,zero,8112f190 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112f188:	00800104 	movi	r2,4
8112f18c:	00003606 	br	8112f268 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112f190:	e0bfff17 	ldw	r2,-4(fp)
8112f194:	1000021e 	bne	r2,zero,8112f1a0 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112f198:	00800244 	movi	r2,9
8112f19c:	00003206 	br	8112f268 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112f1a0:	e0bffe17 	ldw	r2,-8(fp)
8112f1a4:	10800003 	ldbu	r2,0(r2)
8112f1a8:	10803fcc 	andi	r2,r2,255
8112f1ac:	108000e0 	cmpeqi	r2,r2,3
8112f1b0:	1000021e 	bne	r2,zero,8112f1bc <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112f1b4:	00800044 	movi	r2,1
8112f1b8:	00002b06 	br	8112f268 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f1bc:	0005303a 	rdctl	r2,status
8112f1c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f1c4:	e0fffd17 	ldw	r3,-12(fp)
8112f1c8:	00bfff84 	movi	r2,-2
8112f1cc:	1884703a 	and	r2,r3,r2
8112f1d0:	1001703a 	wrctl	status,r2
  
  return context;
8112f1d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f1d8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8112f1dc:	e0bffe17 	ldw	r2,-8(fp)
8112f1e0:	10c00283 	ldbu	r3,10(r2)
8112f1e4:	e0bfff17 	ldw	r2,-4(fp)
8112f1e8:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
8112f1ec:	e0bffe17 	ldw	r2,-8(fp)
8112f1f0:	108002c4 	addi	r2,r2,11
8112f1f4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8112f1f8:	e0bfff17 	ldw	r2,-4(fp)
8112f1fc:	10800084 	addi	r2,r2,2
8112f200:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112f204:	e03ffa05 	stb	zero,-24(fp)
8112f208:	00000b06 	br	8112f238 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
8112f20c:	e0bff917 	ldw	r2,-28(fp)
8112f210:	10c00044 	addi	r3,r2,1
8112f214:	e0fff915 	stw	r3,-28(fp)
8112f218:	e0fff817 	ldw	r3,-32(fp)
8112f21c:	19000044 	addi	r4,r3,1
8112f220:	e13ff815 	stw	r4,-32(fp)
8112f224:	18c00003 	ldbu	r3,0(r3)
8112f228:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112f22c:	e0bffa03 	ldbu	r2,-24(fp)
8112f230:	10800044 	addi	r2,r2,1
8112f234:	e0bffa05 	stb	r2,-24(fp)
8112f238:	e0bffa03 	ldbu	r2,-24(fp)
8112f23c:	108001b0 	cmpltui	r2,r2,6
8112f240:	103ff21e 	bne	r2,zero,8112f20c <__reset+0xfb10f20c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8112f244:	e0bffe17 	ldw	r2,-8(fp)
8112f248:	10c0020b 	ldhu	r3,8(r2)
8112f24c:	e0bfff17 	ldw	r2,-4(fp)
8112f250:	10c0000d 	sth	r3,0(r2)
8112f254:	e0bffb17 	ldw	r2,-20(fp)
8112f258:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f25c:	e0bffc17 	ldw	r2,-16(fp)
8112f260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f264:	0005883a 	mov	r2,zero
}
8112f268:	e037883a 	mov	sp,fp
8112f26c:	df000017 	ldw	fp,0(sp)
8112f270:	dec00104 	addi	sp,sp,4
8112f274:	f800283a 	ret

8112f278 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8112f278:	defff904 	addi	sp,sp,-28
8112f27c:	de00012e 	bgeu	sp,et,8112f284 <OSSemSet+0xc>
8112f280:	003b68fa 	trap	3
8112f284:	df000615 	stw	fp,24(sp)
8112f288:	df000604 	addi	fp,sp,24
8112f28c:	e13ffd15 	stw	r4,-12(fp)
8112f290:	2805883a 	mov	r2,r5
8112f294:	e1bfff15 	stw	r6,-4(fp)
8112f298:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f29c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112f2a0:	e0bfff17 	ldw	r2,-4(fp)
8112f2a4:	10003126 	beq	r2,zero,8112f36c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f2a8:	e0bffd17 	ldw	r2,-12(fp)
8112f2ac:	1000041e 	bne	r2,zero,8112f2c0 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112f2b0:	e0bfff17 	ldw	r2,-4(fp)
8112f2b4:	00c00104 	movi	r3,4
8112f2b8:	10c00005 	stb	r3,0(r2)
        return;
8112f2bc:	00002c06 	br	8112f370 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112f2c0:	e0bffd17 	ldw	r2,-12(fp)
8112f2c4:	10800003 	ldbu	r2,0(r2)
8112f2c8:	10803fcc 	andi	r2,r2,255
8112f2cc:	108000e0 	cmpeqi	r2,r2,3
8112f2d0:	1000041e 	bne	r2,zero,8112f2e4 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112f2d4:	e0bfff17 	ldw	r2,-4(fp)
8112f2d8:	00c00044 	movi	r3,1
8112f2dc:	10c00005 	stb	r3,0(r2)
        return;
8112f2e0:	00002306 	br	8112f370 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f2e4:	0005303a 	rdctl	r2,status
8112f2e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f2ec:	e0fffc17 	ldw	r3,-16(fp)
8112f2f0:	00bfff84 	movi	r2,-2
8112f2f4:	1884703a 	and	r2,r3,r2
8112f2f8:	1001703a 	wrctl	status,r2
  
  return context;
8112f2fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f300:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8112f304:	e0bfff17 	ldw	r2,-4(fp)
8112f308:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8112f30c:	e0bffd17 	ldw	r2,-12(fp)
8112f310:	1080020b 	ldhu	r2,8(r2)
8112f314:	10bfffcc 	andi	r2,r2,65535
8112f318:	10000426 	beq	r2,zero,8112f32c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8112f31c:	e0bffd17 	ldw	r2,-12(fp)
8112f320:	e0fffe0b 	ldhu	r3,-8(fp)
8112f324:	10c0020d 	sth	r3,8(r2)
8112f328:	00000b06 	br	8112f358 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8112f32c:	e0bffd17 	ldw	r2,-12(fp)
8112f330:	10800283 	ldbu	r2,10(r2)
8112f334:	10803fcc 	andi	r2,r2,255
8112f338:	1000041e 	bne	r2,zero,8112f34c <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8112f33c:	e0bffd17 	ldw	r2,-12(fp)
8112f340:	e0fffe0b 	ldhu	r3,-8(fp)
8112f344:	10c0020d 	sth	r3,8(r2)
8112f348:	00000306 	br	8112f358 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8112f34c:	e0bfff17 	ldw	r2,-4(fp)
8112f350:	00c01244 	movi	r3,73
8112f354:	10c00005 	stb	r3,0(r2)
8112f358:	e0bffa17 	ldw	r2,-24(fp)
8112f35c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f360:	e0bffb17 	ldw	r2,-20(fp)
8112f364:	1001703a 	wrctl	status,r2
8112f368:	00000106 	br	8112f370 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112f36c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8112f370:	e037883a 	mov	sp,fp
8112f374:	df000017 	ldw	fp,0(sp)
8112f378:	dec00104 	addi	sp,sp,4
8112f37c:	f800283a 	ret

8112f380 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8112f380:	defff104 	addi	sp,sp,-60
8112f384:	de00012e 	bgeu	sp,et,8112f38c <OSTaskChangePrio+0xc>
8112f388:	003b68fa 	trap	3
8112f38c:	dfc00e15 	stw	ra,56(sp)
8112f390:	df000d15 	stw	fp,52(sp)
8112f394:	df000d04 	addi	fp,sp,52
8112f398:	2007883a 	mov	r3,r4
8112f39c:	2805883a 	mov	r2,r5
8112f3a0:	e0fffe05 	stb	r3,-8(fp)
8112f3a4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8112f3a8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112f3ac:	e0bffe03 	ldbu	r2,-8(fp)
8112f3b0:	10800a30 	cmpltui	r2,r2,40
8112f3b4:	1000051e 	bne	r2,zero,8112f3cc <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8112f3b8:	e0bffe03 	ldbu	r2,-8(fp)
8112f3bc:	10803fe0 	cmpeqi	r2,r2,255
8112f3c0:	1000021e 	bne	r2,zero,8112f3cc <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112f3c4:	00800a84 	movi	r2,42
8112f3c8:	00012606 	br	8112f864 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112f3cc:	e0bfff03 	ldbu	r2,-4(fp)
8112f3d0:	10800a30 	cmpltui	r2,r2,40
8112f3d4:	1000021e 	bne	r2,zero,8112f3e0 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8112f3d8:	00800a84 	movi	r2,42
8112f3dc:	00012106 	br	8112f864 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f3e0:	0005303a 	rdctl	r2,status
8112f3e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f3e8:	e0fffd17 	ldw	r3,-12(fp)
8112f3ec:	00bfff84 	movi	r2,-2
8112f3f0:	1884703a 	and	r2,r3,r2
8112f3f4:	1001703a 	wrctl	status,r2
  
  return context;
8112f3f8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f3fc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8112f400:	e0ffff03 	ldbu	r3,-4(fp)
8112f404:	00a04574 	movhi	r2,33045
8112f408:	108fcf04 	addi	r2,r2,16188
8112f40c:	18c7883a 	add	r3,r3,r3
8112f410:	18c7883a 	add	r3,r3,r3
8112f414:	10c5883a 	add	r2,r2,r3
8112f418:	10800017 	ldw	r2,0(r2)
8112f41c:	10000626 	beq	r2,zero,8112f438 <OSTaskChangePrio+0xb8>
8112f420:	e0bff517 	ldw	r2,-44(fp)
8112f424:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f428:	e0bff617 	ldw	r2,-40(fp)
8112f42c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112f430:	00800a04 	movi	r2,40
8112f434:	00010b06 	br	8112f864 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8112f438:	e0bffe03 	ldbu	r2,-8(fp)
8112f43c:	10803fd8 	cmpnei	r2,r2,255
8112f440:	1000031e 	bne	r2,zero,8112f450 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8112f444:	d0a08417 	ldw	r2,-32240(gp)
8112f448:	10800c83 	ldbu	r2,50(r2)
8112f44c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112f450:	e0fffe03 	ldbu	r3,-8(fp)
8112f454:	00a04574 	movhi	r2,33045
8112f458:	108fcf04 	addi	r2,r2,16188
8112f45c:	18c7883a 	add	r3,r3,r3
8112f460:	18c7883a 	add	r3,r3,r3
8112f464:	10c5883a 	add	r2,r2,r3
8112f468:	10800017 	ldw	r2,0(r2)
8112f46c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112f470:	e0bff817 	ldw	r2,-32(fp)
8112f474:	1000061e 	bne	r2,zero,8112f490 <OSTaskChangePrio+0x110>
8112f478:	e0bff517 	ldw	r2,-44(fp)
8112f47c:	e0bff715 	stw	r2,-36(fp)
8112f480:	e0bff717 	ldw	r2,-36(fp)
8112f484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8112f488:	00800a44 	movi	r2,41
8112f48c:	0000f506 	br	8112f864 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112f490:	e0bff817 	ldw	r2,-32(fp)
8112f494:	10800058 	cmpnei	r2,r2,1
8112f498:	1000061e 	bne	r2,zero,8112f4b4 <OSTaskChangePrio+0x134>
8112f49c:	e0bff517 	ldw	r2,-44(fp)
8112f4a0:	e0bff915 	stw	r2,-28(fp)
8112f4a4:	e0bff917 	ldw	r2,-28(fp)
8112f4a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112f4ac:	008010c4 	movi	r2,67
8112f4b0:	0000ec06 	br	8112f864 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8112f4b4:	e0bfff03 	ldbu	r2,-4(fp)
8112f4b8:	1004d0fa 	srli	r2,r2,3
8112f4bc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8112f4c0:	e0bfff03 	ldbu	r2,-4(fp)
8112f4c4:	108001cc 	andi	r2,r2,7
8112f4c8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112f4cc:	e0bffb03 	ldbu	r2,-20(fp)
8112f4d0:	00c00044 	movi	r3,1
8112f4d4:	1884983a 	sll	r2,r3,r2
8112f4d8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112f4dc:	e0bffb43 	ldbu	r2,-19(fp)
8112f4e0:	00c00044 	movi	r3,1
8112f4e4:	1884983a 	sll	r2,r3,r2
8112f4e8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8112f4ec:	e0fffe03 	ldbu	r3,-8(fp)
8112f4f0:	00a04574 	movhi	r2,33045
8112f4f4:	108fcf04 	addi	r2,r2,16188
8112f4f8:	18c7883a 	add	r3,r3,r3
8112f4fc:	18c7883a 	add	r3,r3,r3
8112f500:	10c5883a 	add	r2,r2,r3
8112f504:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8112f508:	e0ffff03 	ldbu	r3,-4(fp)
8112f50c:	00a04574 	movhi	r2,33045
8112f510:	108fcf04 	addi	r2,r2,16188
8112f514:	18c7883a 	add	r3,r3,r3
8112f518:	18c7883a 	add	r3,r3,r3
8112f51c:	10c5883a 	add	r2,r2,r3
8112f520:	e0fff817 	ldw	r3,-32(fp)
8112f524:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8112f528:	e0bff817 	ldw	r2,-32(fp)
8112f52c:	10800d03 	ldbu	r2,52(r2)
8112f530:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8112f534:	e0bff817 	ldw	r2,-32(fp)
8112f538:	10800d83 	ldbu	r2,54(r2)
8112f53c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112f540:	e0bff817 	ldw	r2,-32(fp)
8112f544:	10800d43 	ldbu	r2,53(r2)
8112f548:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112f54c:	e0fffc03 	ldbu	r3,-16(fp)
8112f550:	d0a08044 	addi	r2,gp,-32255
8112f554:	1885883a 	add	r2,r3,r2
8112f558:	10c00003 	ldbu	r3,0(r2)
8112f55c:	e0bffc83 	ldbu	r2,-14(fp)
8112f560:	1884703a 	and	r2,r3,r2
8112f564:	10803fcc 	andi	r2,r2,255
8112f568:	10002826 	beq	r2,zero,8112f60c <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8112f56c:	e0fffc03 	ldbu	r3,-16(fp)
8112f570:	e13ffc03 	ldbu	r4,-16(fp)
8112f574:	d0a08044 	addi	r2,gp,-32255
8112f578:	2085883a 	add	r2,r4,r2
8112f57c:	10800003 	ldbu	r2,0(r2)
8112f580:	1009883a 	mov	r4,r2
8112f584:	e0bffc83 	ldbu	r2,-14(fp)
8112f588:	0084303a 	nor	r2,zero,r2
8112f58c:	2084703a 	and	r2,r4,r2
8112f590:	1009883a 	mov	r4,r2
8112f594:	d0a08044 	addi	r2,gp,-32255
8112f598:	1885883a 	add	r2,r3,r2
8112f59c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112f5a0:	e0fffc03 	ldbu	r3,-16(fp)
8112f5a4:	d0a08044 	addi	r2,gp,-32255
8112f5a8:	1885883a 	add	r2,r3,r2
8112f5ac:	10800003 	ldbu	r2,0(r2)
8112f5b0:	10803fcc 	andi	r2,r2,255
8112f5b4:	1000061e 	bne	r2,zero,8112f5d0 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8112f5b8:	e0bffc43 	ldbu	r2,-15(fp)
8112f5bc:	0084303a 	nor	r2,zero,r2
8112f5c0:	1007883a 	mov	r3,r2
8112f5c4:	d0a08003 	ldbu	r2,-32256(gp)
8112f5c8:	1884703a 	and	r2,r3,r2
8112f5cc:	d0a08005 	stb	r2,-32256(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8112f5d0:	d0e08003 	ldbu	r3,-32256(gp)
8112f5d4:	e0bffb83 	ldbu	r2,-18(fp)
8112f5d8:	1884b03a 	or	r2,r3,r2
8112f5dc:	d0a08005 	stb	r2,-32256(gp)
         OSRdyTbl[y_new] |= bitx_new;
8112f5e0:	e0fffb03 	ldbu	r3,-20(fp)
8112f5e4:	e13ffb03 	ldbu	r4,-20(fp)
8112f5e8:	d0a08044 	addi	r2,gp,-32255
8112f5ec:	2085883a 	add	r2,r4,r2
8112f5f0:	11000003 	ldbu	r4,0(r2)
8112f5f4:	e0bffbc3 	ldbu	r2,-17(fp)
8112f5f8:	2084b03a 	or	r2,r4,r2
8112f5fc:	1009883a 	mov	r4,r2
8112f600:	d0a08044 	addi	r2,gp,-32255
8112f604:	1885883a 	add	r2,r3,r2
8112f608:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8112f60c:	e0bff817 	ldw	r2,-32(fp)
8112f610:	10800717 	ldw	r2,28(r2)
8112f614:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8112f618:	e0bff317 	ldw	r2,-52(fp)
8112f61c:	10003326 	beq	r2,zero,8112f6ec <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112f620:	e0bffc03 	ldbu	r2,-16(fp)
8112f624:	e0fffc03 	ldbu	r3,-16(fp)
8112f628:	e13ff317 	ldw	r4,-52(fp)
8112f62c:	20c7883a 	add	r3,r4,r3
8112f630:	18c002c4 	addi	r3,r3,11
8112f634:	18c00003 	ldbu	r3,0(r3)
8112f638:	1809883a 	mov	r4,r3
8112f63c:	e0fffc83 	ldbu	r3,-14(fp)
8112f640:	00c6303a 	nor	r3,zero,r3
8112f644:	20c6703a 	and	r3,r4,r3
8112f648:	1809883a 	mov	r4,r3
8112f64c:	e0fff317 	ldw	r3,-52(fp)
8112f650:	1885883a 	add	r2,r3,r2
8112f654:	108002c4 	addi	r2,r2,11
8112f658:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112f65c:	e0bffc03 	ldbu	r2,-16(fp)
8112f660:	e0fff317 	ldw	r3,-52(fp)
8112f664:	1885883a 	add	r2,r3,r2
8112f668:	108002c4 	addi	r2,r2,11
8112f66c:	10800003 	ldbu	r2,0(r2)
8112f670:	10803fcc 	andi	r2,r2,255
8112f674:	1000091e 	bne	r2,zero,8112f69c <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8112f678:	e0bff317 	ldw	r2,-52(fp)
8112f67c:	10800283 	ldbu	r2,10(r2)
8112f680:	1007883a 	mov	r3,r2
8112f684:	e0bffc43 	ldbu	r2,-15(fp)
8112f688:	0084303a 	nor	r2,zero,r2
8112f68c:	1884703a 	and	r2,r3,r2
8112f690:	1007883a 	mov	r3,r2
8112f694:	e0bff317 	ldw	r2,-52(fp)
8112f698:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112f69c:	e0bff317 	ldw	r2,-52(fp)
8112f6a0:	10c00283 	ldbu	r3,10(r2)
8112f6a4:	e0bffb83 	ldbu	r2,-18(fp)
8112f6a8:	1884b03a 	or	r2,r3,r2
8112f6ac:	1007883a 	mov	r3,r2
8112f6b0:	e0bff317 	ldw	r2,-52(fp)
8112f6b4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8112f6b8:	e0bffb03 	ldbu	r2,-20(fp)
8112f6bc:	e0fffb03 	ldbu	r3,-20(fp)
8112f6c0:	e13ff317 	ldw	r4,-52(fp)
8112f6c4:	20c7883a 	add	r3,r4,r3
8112f6c8:	18c002c4 	addi	r3,r3,11
8112f6cc:	19000003 	ldbu	r4,0(r3)
8112f6d0:	e0fffbc3 	ldbu	r3,-17(fp)
8112f6d4:	20c6b03a 	or	r3,r4,r3
8112f6d8:	1809883a 	mov	r4,r3
8112f6dc:	e0fff317 	ldw	r3,-52(fp)
8112f6e0:	1885883a 	add	r2,r3,r2
8112f6e4:	108002c4 	addi	r2,r2,11
8112f6e8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8112f6ec:	e0bff817 	ldw	r2,-32(fp)
8112f6f0:	10800817 	ldw	r2,32(r2)
8112f6f4:	10004226 	beq	r2,zero,8112f800 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
8112f6f8:	e0bff817 	ldw	r2,-32(fp)
8112f6fc:	10800817 	ldw	r2,32(r2)
8112f700:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8112f704:	e0bff417 	ldw	r2,-48(fp)
8112f708:	10800017 	ldw	r2,0(r2)
8112f70c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8112f710:	00003906 	br	8112f7f8 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8112f714:	e0bffc03 	ldbu	r2,-16(fp)
8112f718:	e0fffc03 	ldbu	r3,-16(fp)
8112f71c:	e13ff317 	ldw	r4,-52(fp)
8112f720:	20c7883a 	add	r3,r4,r3
8112f724:	18c002c4 	addi	r3,r3,11
8112f728:	18c00003 	ldbu	r3,0(r3)
8112f72c:	1809883a 	mov	r4,r3
8112f730:	e0fffc83 	ldbu	r3,-14(fp)
8112f734:	00c6303a 	nor	r3,zero,r3
8112f738:	20c6703a 	and	r3,r4,r3
8112f73c:	1809883a 	mov	r4,r3
8112f740:	e0fff317 	ldw	r3,-52(fp)
8112f744:	1885883a 	add	r2,r3,r2
8112f748:	108002c4 	addi	r2,r2,11
8112f74c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8112f750:	e0bffc03 	ldbu	r2,-16(fp)
8112f754:	e0fff317 	ldw	r3,-52(fp)
8112f758:	1885883a 	add	r2,r3,r2
8112f75c:	108002c4 	addi	r2,r2,11
8112f760:	10800003 	ldbu	r2,0(r2)
8112f764:	10803fcc 	andi	r2,r2,255
8112f768:	1000091e 	bne	r2,zero,8112f790 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8112f76c:	e0bff317 	ldw	r2,-52(fp)
8112f770:	10800283 	ldbu	r2,10(r2)
8112f774:	1007883a 	mov	r3,r2
8112f778:	e0bffc43 	ldbu	r2,-15(fp)
8112f77c:	0084303a 	nor	r2,zero,r2
8112f780:	1884703a 	and	r2,r3,r2
8112f784:	1007883a 	mov	r3,r2
8112f788:	e0bff317 	ldw	r2,-52(fp)
8112f78c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8112f790:	e0bff317 	ldw	r2,-52(fp)
8112f794:	10c00283 	ldbu	r3,10(r2)
8112f798:	e0bffb83 	ldbu	r2,-18(fp)
8112f79c:	1884b03a 	or	r2,r3,r2
8112f7a0:	1007883a 	mov	r3,r2
8112f7a4:	e0bff317 	ldw	r2,-52(fp)
8112f7a8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112f7ac:	e0bffb03 	ldbu	r2,-20(fp)
8112f7b0:	e0fffb03 	ldbu	r3,-20(fp)
8112f7b4:	e13ff317 	ldw	r4,-52(fp)
8112f7b8:	20c7883a 	add	r3,r4,r3
8112f7bc:	18c002c4 	addi	r3,r3,11
8112f7c0:	19000003 	ldbu	r4,0(r3)
8112f7c4:	e0fffbc3 	ldbu	r3,-17(fp)
8112f7c8:	20c6b03a 	or	r3,r4,r3
8112f7cc:	1809883a 	mov	r4,r3
8112f7d0:	e0fff317 	ldw	r3,-52(fp)
8112f7d4:	1885883a 	add	r2,r3,r2
8112f7d8:	108002c4 	addi	r2,r2,11
8112f7dc:	11000005 	stb	r4,0(r2)
            pevents++;
8112f7e0:	e0bff417 	ldw	r2,-48(fp)
8112f7e4:	10800104 	addi	r2,r2,4
8112f7e8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8112f7ec:	e0bff417 	ldw	r2,-48(fp)
8112f7f0:	10800017 	ldw	r2,0(r2)
8112f7f4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8112f7f8:	e0bff317 	ldw	r2,-52(fp)
8112f7fc:	103fc51e 	bne	r2,zero,8112f714 <__reset+0xfb10f714>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8112f800:	e0bff817 	ldw	r2,-32(fp)
8112f804:	e0ffff03 	ldbu	r3,-4(fp)
8112f808:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8112f80c:	e0bff817 	ldw	r2,-32(fp)
8112f810:	e0fffb03 	ldbu	r3,-20(fp)
8112f814:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8112f818:	e0bff817 	ldw	r2,-32(fp)
8112f81c:	e0fffb43 	ldbu	r3,-19(fp)
8112f820:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8112f824:	e0bff817 	ldw	r2,-32(fp)
8112f828:	e0fffb83 	ldbu	r3,-18(fp)
8112f82c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8112f830:	e0bff817 	ldw	r2,-32(fp)
8112f834:	e0fffbc3 	ldbu	r3,-17(fp)
8112f838:	10c00d45 	stb	r3,53(r2)
8112f83c:	e0bff517 	ldw	r2,-44(fp)
8112f840:	e0bffa15 	stw	r2,-24(fp)
8112f844:	e0bffa17 	ldw	r2,-24(fp)
8112f848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112f84c:	d0a07303 	ldbu	r2,-32308(gp)
8112f850:	10803fcc 	andi	r2,r2,255
8112f854:	10800058 	cmpnei	r2,r2,1
8112f858:	1000011e 	bne	r2,zero,8112f860 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8112f85c:	1129e100 	call	81129e10 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112f860:	0005883a 	mov	r2,zero
}
8112f864:	e037883a 	mov	sp,fp
8112f868:	dfc00117 	ldw	ra,4(sp)
8112f86c:	df000017 	ldw	fp,0(sp)
8112f870:	dec00204 	addi	sp,sp,8
8112f874:	f800283a 	ret

8112f878 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8112f878:	deffee04 	addi	sp,sp,-72
8112f87c:	de00012e 	bgeu	sp,et,8112f884 <OSTaskCreate+0xc>
8112f880:	003b68fa 	trap	3
8112f884:	dfc01115 	stw	ra,68(sp)
8112f888:	df001015 	stw	fp,64(sp)
8112f88c:	df001004 	addi	fp,sp,64
8112f890:	e13ffc15 	stw	r4,-16(fp)
8112f894:	e17ffd15 	stw	r5,-12(fp)
8112f898:	e1bffe15 	stw	r6,-8(fp)
8112f89c:	3805883a 	mov	r2,r7
8112f8a0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112f8a4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112f8a8:	e0bfff03 	ldbu	r2,-4(fp)
8112f8ac:	10800a70 	cmpltui	r2,r2,41
8112f8b0:	1000021e 	bne	r2,zero,8112f8bc <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
8112f8b4:	00800a84 	movi	r2,42
8112f8b8:	00005706 	br	8112fa18 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f8bc:	0005303a 	rdctl	r2,status
8112f8c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f8c4:	e0fffb17 	ldw	r3,-20(fp)
8112f8c8:	00bfff84 	movi	r2,-2
8112f8cc:	1884703a 	and	r2,r3,r2
8112f8d0:	1001703a 	wrctl	status,r2
  
  return context;
8112f8d4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f8d8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112f8dc:	d0a08303 	ldbu	r2,-32244(gp)
8112f8e0:	10803fcc 	andi	r2,r2,255
8112f8e4:	10000626 	beq	r2,zero,8112f900 <OSTaskCreate+0x88>
8112f8e8:	e0bff317 	ldw	r2,-52(fp)
8112f8ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f8f0:	e0bff417 	ldw	r2,-48(fp)
8112f8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112f8f8:	00800f04 	movi	r2,60
8112f8fc:	00004606 	br	8112fa18 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112f900:	e0ffff03 	ldbu	r3,-4(fp)
8112f904:	00a04574 	movhi	r2,33045
8112f908:	108fcf04 	addi	r2,r2,16188
8112f90c:	18c7883a 	add	r3,r3,r3
8112f910:	18c7883a 	add	r3,r3,r3
8112f914:	10c5883a 	add	r2,r2,r3
8112f918:	10800017 	ldw	r2,0(r2)
8112f91c:	1000391e 	bne	r2,zero,8112fa04 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112f920:	e0ffff03 	ldbu	r3,-4(fp)
8112f924:	00a04574 	movhi	r2,33045
8112f928:	108fcf04 	addi	r2,r2,16188
8112f92c:	18c7883a 	add	r3,r3,r3
8112f930:	18c7883a 	add	r3,r3,r3
8112f934:	10c5883a 	add	r2,r2,r3
8112f938:	00c00044 	movi	r3,1
8112f93c:	10c00015 	stw	r3,0(r2)
8112f940:	e0bff317 	ldw	r2,-52(fp)
8112f944:	e0bff515 	stw	r2,-44(fp)
8112f948:	e0bff517 	ldw	r2,-44(fp)
8112f94c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8112f950:	000f883a 	mov	r7,zero
8112f954:	e1bffe17 	ldw	r6,-8(fp)
8112f958:	e17ffd17 	ldw	r5,-12(fp)
8112f95c:	e13ffc17 	ldw	r4,-16(fp)
8112f960:	113af5c0 	call	8113af5c <OSTaskStkInit>
8112f964:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8112f968:	e0bfff03 	ldbu	r2,-4(fp)
8112f96c:	d8000215 	stw	zero,8(sp)
8112f970:	d8000115 	stw	zero,4(sp)
8112f974:	d8000015 	stw	zero,0(sp)
8112f978:	000f883a 	mov	r7,zero
8112f97c:	000d883a 	mov	r6,zero
8112f980:	e17ff717 	ldw	r5,-36(fp)
8112f984:	1009883a 	mov	r4,r2
8112f988:	112a2580 	call	8112a258 <OS_TCBInit>
8112f98c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8112f990:	e0bff803 	ldbu	r2,-32(fp)
8112f994:	1000061e 	bne	r2,zero,8112f9b0 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8112f998:	d0a07303 	ldbu	r2,-32308(gp)
8112f99c:	10803fcc 	andi	r2,r2,255
8112f9a0:	10800058 	cmpnei	r2,r2,1
8112f9a4:	1000151e 	bne	r2,zero,8112f9fc <OSTaskCreate+0x184>
                OS_Sched();
8112f9a8:	1129e100 	call	81129e10 <OS_Sched>
8112f9ac:	00001306 	br	8112f9fc <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f9b0:	0005303a 	rdctl	r2,status
8112f9b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f9b8:	e0fffa17 	ldw	r3,-24(fp)
8112f9bc:	00bfff84 	movi	r2,-2
8112f9c0:	1884703a 	and	r2,r3,r2
8112f9c4:	1001703a 	wrctl	status,r2
  
  return context;
8112f9c8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112f9cc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8112f9d0:	e0ffff03 	ldbu	r3,-4(fp)
8112f9d4:	00a04574 	movhi	r2,33045
8112f9d8:	108fcf04 	addi	r2,r2,16188
8112f9dc:	18c7883a 	add	r3,r3,r3
8112f9e0:	18c7883a 	add	r3,r3,r3
8112f9e4:	10c5883a 	add	r2,r2,r3
8112f9e8:	10000015 	stw	zero,0(r2)
8112f9ec:	e0bff317 	ldw	r2,-52(fp)
8112f9f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f9f4:	e0bff617 	ldw	r2,-40(fp)
8112f9f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112f9fc:	e0bff803 	ldbu	r2,-32(fp)
8112fa00:	00000506 	br	8112fa18 <OSTaskCreate+0x1a0>
8112fa04:	e0bff317 	ldw	r2,-52(fp)
8112fa08:	e0bff915 	stw	r2,-28(fp)
8112fa0c:	e0bff917 	ldw	r2,-28(fp)
8112fa10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112fa14:	00800a04 	movi	r2,40
}
8112fa18:	e037883a 	mov	sp,fp
8112fa1c:	dfc00117 	ldw	ra,4(sp)
8112fa20:	df000017 	ldw	fp,0(sp)
8112fa24:	dec00204 	addi	sp,sp,8
8112fa28:	f800283a 	ret

8112fa2c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8112fa2c:	deffec04 	addi	sp,sp,-80
8112fa30:	de00012e 	bgeu	sp,et,8112fa38 <OSTaskCreateExt+0xc>
8112fa34:	003b68fa 	trap	3
8112fa38:	dfc01315 	stw	ra,76(sp)
8112fa3c:	df001215 	stw	fp,72(sp)
8112fa40:	df001204 	addi	fp,sp,72
8112fa44:	e13ffa15 	stw	r4,-24(fp)
8112fa48:	e17ffb15 	stw	r5,-20(fp)
8112fa4c:	e1bffc15 	stw	r6,-16(fp)
8112fa50:	3809883a 	mov	r4,r7
8112fa54:	e0c00217 	ldw	r3,8(fp)
8112fa58:	e0800617 	ldw	r2,24(fp)
8112fa5c:	e13ffd05 	stb	r4,-12(fp)
8112fa60:	e0fffe0d 	sth	r3,-8(fp)
8112fa64:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112fa68:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112fa6c:	e0bffd03 	ldbu	r2,-12(fp)
8112fa70:	10800a70 	cmpltui	r2,r2,41
8112fa74:	1000021e 	bne	r2,zero,8112fa80 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
8112fa78:	00800a84 	movi	r2,42
8112fa7c:	00006106 	br	8112fc04 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fa80:	0005303a 	rdctl	r2,status
8112fa84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fa88:	e0fff917 	ldw	r3,-28(fp)
8112fa8c:	00bfff84 	movi	r2,-2
8112fa90:	1884703a 	and	r2,r3,r2
8112fa94:	1001703a 	wrctl	status,r2
  
  return context;
8112fa98:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112fa9c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112faa0:	d0a08303 	ldbu	r2,-32244(gp)
8112faa4:	10803fcc 	andi	r2,r2,255
8112faa8:	10000626 	beq	r2,zero,8112fac4 <OSTaskCreateExt+0x98>
8112faac:	e0bff117 	ldw	r2,-60(fp)
8112fab0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fab4:	e0bff217 	ldw	r2,-56(fp)
8112fab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112fabc:	00800f04 	movi	r2,60
8112fac0:	00005006 	br	8112fc04 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112fac4:	e0fffd03 	ldbu	r3,-12(fp)
8112fac8:	00a04574 	movhi	r2,33045
8112facc:	108fcf04 	addi	r2,r2,16188
8112fad0:	18c7883a 	add	r3,r3,r3
8112fad4:	18c7883a 	add	r3,r3,r3
8112fad8:	10c5883a 	add	r2,r2,r3
8112fadc:	10800017 	ldw	r2,0(r2)
8112fae0:	1000431e 	bne	r2,zero,8112fbf0 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112fae4:	e0fffd03 	ldbu	r3,-12(fp)
8112fae8:	00a04574 	movhi	r2,33045
8112faec:	108fcf04 	addi	r2,r2,16188
8112faf0:	18c7883a 	add	r3,r3,r3
8112faf4:	18c7883a 	add	r3,r3,r3
8112faf8:	10c5883a 	add	r2,r2,r3
8112fafc:	00c00044 	movi	r3,1
8112fb00:	10c00015 	stw	r3,0(r2)
8112fb04:	e0bff117 	ldw	r2,-60(fp)
8112fb08:	e0bff315 	stw	r2,-52(fp)
8112fb0c:	e0bff317 	ldw	r2,-52(fp)
8112fb10:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8112fb14:	e0bfff0b 	ldhu	r2,-4(fp)
8112fb18:	100d883a 	mov	r6,r2
8112fb1c:	e1400417 	ldw	r5,16(fp)
8112fb20:	e1000317 	ldw	r4,12(fp)
8112fb24:	1130ad40 	call	81130ad4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8112fb28:	e0bfff0b 	ldhu	r2,-4(fp)
8112fb2c:	100f883a 	mov	r7,r2
8112fb30:	e1bffc17 	ldw	r6,-16(fp)
8112fb34:	e17ffb17 	ldw	r5,-20(fp)
8112fb38:	e13ffa17 	ldw	r4,-24(fp)
8112fb3c:	113af5c0 	call	8113af5c <OSTaskStkInit>
8112fb40:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8112fb44:	e0fffd03 	ldbu	r3,-12(fp)
8112fb48:	e13ffe0b 	ldhu	r4,-8(fp)
8112fb4c:	e0bfff0b 	ldhu	r2,-4(fp)
8112fb50:	d8800215 	stw	r2,8(sp)
8112fb54:	e0800517 	ldw	r2,20(fp)
8112fb58:	d8800115 	stw	r2,4(sp)
8112fb5c:	e0800417 	ldw	r2,16(fp)
8112fb60:	d8800015 	stw	r2,0(sp)
8112fb64:	200f883a 	mov	r7,r4
8112fb68:	e1800317 	ldw	r6,12(fp)
8112fb6c:	e17ff517 	ldw	r5,-44(fp)
8112fb70:	1809883a 	mov	r4,r3
8112fb74:	112a2580 	call	8112a258 <OS_TCBInit>
8112fb78:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8112fb7c:	e0bff603 	ldbu	r2,-40(fp)
8112fb80:	1000061e 	bne	r2,zero,8112fb9c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8112fb84:	d0a07303 	ldbu	r2,-32308(gp)
8112fb88:	10803fcc 	andi	r2,r2,255
8112fb8c:	10800058 	cmpnei	r2,r2,1
8112fb90:	1000151e 	bne	r2,zero,8112fbe8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
8112fb94:	1129e100 	call	81129e10 <OS_Sched>
8112fb98:	00001306 	br	8112fbe8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fb9c:	0005303a 	rdctl	r2,status
8112fba0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fba4:	e0fff817 	ldw	r3,-32(fp)
8112fba8:	00bfff84 	movi	r2,-2
8112fbac:	1884703a 	and	r2,r3,r2
8112fbb0:	1001703a 	wrctl	status,r2
  
  return context;
8112fbb4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112fbb8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8112fbbc:	e0fffd03 	ldbu	r3,-12(fp)
8112fbc0:	00a04574 	movhi	r2,33045
8112fbc4:	108fcf04 	addi	r2,r2,16188
8112fbc8:	18c7883a 	add	r3,r3,r3
8112fbcc:	18c7883a 	add	r3,r3,r3
8112fbd0:	10c5883a 	add	r2,r2,r3
8112fbd4:	10000015 	stw	zero,0(r2)
8112fbd8:	e0bff117 	ldw	r2,-60(fp)
8112fbdc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fbe0:	e0bff417 	ldw	r2,-48(fp)
8112fbe4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112fbe8:	e0bff603 	ldbu	r2,-40(fp)
8112fbec:	00000506 	br	8112fc04 <OSTaskCreateExt+0x1d8>
8112fbf0:	e0bff117 	ldw	r2,-60(fp)
8112fbf4:	e0bff715 	stw	r2,-36(fp)
8112fbf8:	e0bff717 	ldw	r2,-36(fp)
8112fbfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112fc00:	00800a04 	movi	r2,40
}
8112fc04:	e037883a 	mov	sp,fp
8112fc08:	dfc00117 	ldw	ra,4(sp)
8112fc0c:	df000017 	ldw	fp,0(sp)
8112fc10:	dec00204 	addi	sp,sp,8
8112fc14:	f800283a 	ret

8112fc18 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8112fc18:	defff404 	addi	sp,sp,-48
8112fc1c:	de00012e 	bgeu	sp,et,8112fc24 <OSTaskDel+0xc>
8112fc20:	003b68fa 	trap	3
8112fc24:	dfc00b15 	stw	ra,44(sp)
8112fc28:	df000a15 	stw	fp,40(sp)
8112fc2c:	df000a04 	addi	fp,sp,40
8112fc30:	2005883a 	mov	r2,r4
8112fc34:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8112fc38:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8112fc3c:	d0a08303 	ldbu	r2,-32244(gp)
8112fc40:	10803fcc 	andi	r2,r2,255
8112fc44:	10000226 	beq	r2,zero,8112fc50 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8112fc48:	00801004 	movi	r2,64
8112fc4c:	0000c006 	br	8112ff50 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8112fc50:	e0bfff03 	ldbu	r2,-4(fp)
8112fc54:	10800a18 	cmpnei	r2,r2,40
8112fc58:	1000021e 	bne	r2,zero,8112fc64 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
8112fc5c:	00800f84 	movi	r2,62
8112fc60:	0000bb06 	br	8112ff50 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8112fc64:	e0bfff03 	ldbu	r2,-4(fp)
8112fc68:	10800a30 	cmpltui	r2,r2,40
8112fc6c:	1000051e 	bne	r2,zero,8112fc84 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
8112fc70:	e0bfff03 	ldbu	r2,-4(fp)
8112fc74:	10803fe0 	cmpeqi	r2,r2,255
8112fc78:	1000021e 	bne	r2,zero,8112fc84 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
8112fc7c:	00800a84 	movi	r2,42
8112fc80:	0000b306 	br	8112ff50 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fc84:	0005303a 	rdctl	r2,status
8112fc88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fc8c:	e0fffe17 	ldw	r3,-8(fp)
8112fc90:	00bfff84 	movi	r2,-2
8112fc94:	1884703a 	and	r2,r3,r2
8112fc98:	1001703a 	wrctl	status,r2
  
  return context;
8112fc9c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112fca0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8112fca4:	e0bfff03 	ldbu	r2,-4(fp)
8112fca8:	10803fd8 	cmpnei	r2,r2,255
8112fcac:	1000031e 	bne	r2,zero,8112fcbc <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8112fcb0:	d0a08417 	ldw	r2,-32240(gp)
8112fcb4:	10800c83 	ldbu	r2,50(r2)
8112fcb8:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112fcbc:	e0ffff03 	ldbu	r3,-4(fp)
8112fcc0:	00a04574 	movhi	r2,33045
8112fcc4:	108fcf04 	addi	r2,r2,16188
8112fcc8:	18c7883a 	add	r3,r3,r3
8112fccc:	18c7883a 	add	r3,r3,r3
8112fcd0:	10c5883a 	add	r2,r2,r3
8112fcd4:	10800017 	ldw	r2,0(r2)
8112fcd8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8112fcdc:	e0bff817 	ldw	r2,-32(fp)
8112fce0:	1000061e 	bne	r2,zero,8112fcfc <OSTaskDel+0xe4>
8112fce4:	e0bff617 	ldw	r2,-40(fp)
8112fce8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fcec:	e0bff717 	ldw	r2,-36(fp)
8112fcf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112fcf4:	008010c4 	movi	r2,67
8112fcf8:	00009506 	br	8112ff50 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8112fcfc:	e0bff817 	ldw	r2,-32(fp)
8112fd00:	10800058 	cmpnei	r2,r2,1
8112fd04:	1000061e 	bne	r2,zero,8112fd20 <OSTaskDel+0x108>
8112fd08:	e0bff617 	ldw	r2,-40(fp)
8112fd0c:	e0bff915 	stw	r2,-28(fp)
8112fd10:	e0bff917 	ldw	r2,-28(fp)
8112fd14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112fd18:	00800f44 	movi	r2,61
8112fd1c:	00008c06 	br	8112ff50 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8112fd20:	e0bff817 	ldw	r2,-32(fp)
8112fd24:	10800d03 	ldbu	r2,52(r2)
8112fd28:	10c03fcc 	andi	r3,r2,255
8112fd2c:	e0bff817 	ldw	r2,-32(fp)
8112fd30:	10800d03 	ldbu	r2,52(r2)
8112fd34:	11003fcc 	andi	r4,r2,255
8112fd38:	d0a08044 	addi	r2,gp,-32255
8112fd3c:	2085883a 	add	r2,r4,r2
8112fd40:	10800003 	ldbu	r2,0(r2)
8112fd44:	1009883a 	mov	r4,r2
8112fd48:	e0bff817 	ldw	r2,-32(fp)
8112fd4c:	10800d43 	ldbu	r2,53(r2)
8112fd50:	0084303a 	nor	r2,zero,r2
8112fd54:	2084703a 	and	r2,r4,r2
8112fd58:	1009883a 	mov	r4,r2
8112fd5c:	d0a08044 	addi	r2,gp,-32255
8112fd60:	1885883a 	add	r2,r3,r2
8112fd64:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112fd68:	e0bff817 	ldw	r2,-32(fp)
8112fd6c:	10800d03 	ldbu	r2,52(r2)
8112fd70:	10c03fcc 	andi	r3,r2,255
8112fd74:	d0a08044 	addi	r2,gp,-32255
8112fd78:	1885883a 	add	r2,r3,r2
8112fd7c:	10800003 	ldbu	r2,0(r2)
8112fd80:	10803fcc 	andi	r2,r2,255
8112fd84:	1000071e 	bne	r2,zero,8112fda4 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112fd88:	e0bff817 	ldw	r2,-32(fp)
8112fd8c:	10800d83 	ldbu	r2,54(r2)
8112fd90:	0084303a 	nor	r2,zero,r2
8112fd94:	1007883a 	mov	r3,r2
8112fd98:	d0a08003 	ldbu	r2,-32256(gp)
8112fd9c:	1884703a 	and	r2,r3,r2
8112fda0:	d0a08005 	stb	r2,-32256(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112fda4:	e0bff817 	ldw	r2,-32(fp)
8112fda8:	10800717 	ldw	r2,28(r2)
8112fdac:	10000526 	beq	r2,zero,8112fdc4 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112fdb0:	e0bff817 	ldw	r2,-32(fp)
8112fdb4:	10800717 	ldw	r2,28(r2)
8112fdb8:	100b883a 	mov	r5,r2
8112fdbc:	e13ff817 	ldw	r4,-32(fp)
8112fdc0:	11297640 	call	81129764 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112fdc4:	e0bff817 	ldw	r2,-32(fp)
8112fdc8:	10800817 	ldw	r2,32(r2)
8112fdcc:	10000526 	beq	r2,zero,8112fde4 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112fdd0:	e0bff817 	ldw	r2,-32(fp)
8112fdd4:	10800817 	ldw	r2,32(r2)
8112fdd8:	100b883a 	mov	r5,r2
8112fddc:	e13ff817 	ldw	r4,-32(fp)
8112fde0:	11298240 	call	81129824 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112fde4:	e0bff817 	ldw	r2,-32(fp)
8112fde8:	10800a17 	ldw	r2,40(r2)
8112fdec:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112fdf0:	e0bffb17 	ldw	r2,-20(fp)
8112fdf4:	10000226 	beq	r2,zero,8112fe00 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112fdf8:	e13ffb17 	ldw	r4,-20(fp)
8112fdfc:	112bdfc0 	call	8112bdfc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112fe00:	e0bff817 	ldw	r2,-32(fp)
8112fe04:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112fe08:	e0bff817 	ldw	r2,-32(fp)
8112fe0c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112fe10:	e0bff817 	ldw	r2,-32(fp)
8112fe14:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112fe18:	d0a07103 	ldbu	r2,-32316(gp)
8112fe1c:	10803fcc 	andi	r2,r2,255
8112fe20:	10803fe0 	cmpeqi	r2,r2,255
8112fe24:	1000031e 	bne	r2,zero,8112fe34 <OSTaskDel+0x21c>
        OSLockNesting++;
8112fe28:	d0a07103 	ldbu	r2,-32316(gp)
8112fe2c:	10800044 	addi	r2,r2,1
8112fe30:	d0a07105 	stb	r2,-32316(gp)
8112fe34:	e0bff617 	ldw	r2,-40(fp)
8112fe38:	e0bffd15 	stw	r2,-12(fp)
8112fe3c:	e0bffd17 	ldw	r2,-12(fp)
8112fe40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112fe44:	112932c0 	call	8112932c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fe48:	0005303a 	rdctl	r2,status
8112fe4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fe50:	e0fffa17 	ldw	r3,-24(fp)
8112fe54:	00bfff84 	movi	r2,-2
8112fe58:	1884703a 	and	r2,r3,r2
8112fe5c:	1001703a 	wrctl	status,r2
  
  return context;
8112fe60:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8112fe64:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8112fe68:	d0a07103 	ldbu	r2,-32316(gp)
8112fe6c:	10803fcc 	andi	r2,r2,255
8112fe70:	10000326 	beq	r2,zero,8112fe80 <OSTaskDel+0x268>
        OSLockNesting--;
8112fe74:	d0a07103 	ldbu	r2,-32316(gp)
8112fe78:	10bfffc4 	addi	r2,r2,-1
8112fe7c:	d0a07105 	stb	r2,-32316(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8112fe80:	e13ff817 	ldw	r4,-32(fp)
8112fe84:	113b0ec0 	call	8113b0ec <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8112fe88:	d0a07c43 	ldbu	r2,-32271(gp)
8112fe8c:	10bfffc4 	addi	r2,r2,-1
8112fe90:	d0a07c45 	stb	r2,-32271(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8112fe94:	e0ffff03 	ldbu	r3,-4(fp)
8112fe98:	00a04574 	movhi	r2,33045
8112fe9c:	108fcf04 	addi	r2,r2,16188
8112fea0:	18c7883a 	add	r3,r3,r3
8112fea4:	18c7883a 	add	r3,r3,r3
8112fea8:	10c5883a 	add	r2,r2,r3
8112feac:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8112feb0:	e0bff817 	ldw	r2,-32(fp)
8112feb4:	10800617 	ldw	r2,24(r2)
8112feb8:	1000071e 	bne	r2,zero,8112fed8 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8112febc:	e0bff817 	ldw	r2,-32(fp)
8112fec0:	10800517 	ldw	r2,20(r2)
8112fec4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8112fec8:	e0bff817 	ldw	r2,-32(fp)
8112fecc:	10800517 	ldw	r2,20(r2)
8112fed0:	d0a07615 	stw	r2,-32296(gp)
8112fed4:	00000a06 	br	8112ff00 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8112fed8:	e0bff817 	ldw	r2,-32(fp)
8112fedc:	10800617 	ldw	r2,24(r2)
8112fee0:	e0fff817 	ldw	r3,-32(fp)
8112fee4:	18c00517 	ldw	r3,20(r3)
8112fee8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8112feec:	e0bff817 	ldw	r2,-32(fp)
8112fef0:	10800517 	ldw	r2,20(r2)
8112fef4:	e0fff817 	ldw	r3,-32(fp)
8112fef8:	18c00617 	ldw	r3,24(r3)
8112fefc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8112ff00:	d0e07b17 	ldw	r3,-32276(gp)
8112ff04:	e0bff817 	ldw	r2,-32(fp)
8112ff08:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8112ff0c:	e0bff817 	ldw	r2,-32(fp)
8112ff10:	d0a07b15 	stw	r2,-32276(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8112ff14:	e0bff817 	ldw	r2,-32(fp)
8112ff18:	00c00fc4 	movi	r3,63
8112ff1c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112ff20:	e0bff817 	ldw	r2,-32(fp)
8112ff24:	10001345 	stb	zero,77(r2)
8112ff28:	e0bff617 	ldw	r2,-40(fp)
8112ff2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ff30:	e0bffc17 	ldw	r2,-16(fp)
8112ff34:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112ff38:	d0a07303 	ldbu	r2,-32308(gp)
8112ff3c:	10803fcc 	andi	r2,r2,255
8112ff40:	10800058 	cmpnei	r2,r2,1
8112ff44:	1000011e 	bne	r2,zero,8112ff4c <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
8112ff48:	1129e100 	call	81129e10 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112ff4c:	0005883a 	mov	r2,zero
}
8112ff50:	e037883a 	mov	sp,fp
8112ff54:	dfc00117 	ldw	ra,4(sp)
8112ff58:	df000017 	ldw	fp,0(sp)
8112ff5c:	dec00204 	addi	sp,sp,8
8112ff60:	f800283a 	ret

8112ff64 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8112ff64:	defff504 	addi	sp,sp,-44
8112ff68:	de00012e 	bgeu	sp,et,8112ff70 <OSTaskDelReq+0xc>
8112ff6c:	003b68fa 	trap	3
8112ff70:	df000a15 	stw	fp,40(sp)
8112ff74:	df000a04 	addi	fp,sp,40
8112ff78:	2005883a 	mov	r2,r4
8112ff7c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ff80:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8112ff84:	e0bfff03 	ldbu	r2,-4(fp)
8112ff88:	10800a18 	cmpnei	r2,r2,40
8112ff8c:	1000021e 	bne	r2,zero,8112ff98 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
8112ff90:	00800f84 	movi	r2,62
8112ff94:	00004506 	br	811300ac <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112ff98:	e0bfff03 	ldbu	r2,-4(fp)
8112ff9c:	10800a30 	cmpltui	r2,r2,40
8112ffa0:	1000051e 	bne	r2,zero,8112ffb8 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
8112ffa4:	e0bfff03 	ldbu	r2,-4(fp)
8112ffa8:	10803fe0 	cmpeqi	r2,r2,255
8112ffac:	1000021e 	bne	r2,zero,8112ffb8 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
8112ffb0:	00800a84 	movi	r2,42
8112ffb4:	00003d06 	br	811300ac <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8112ffb8:	e0bfff03 	ldbu	r2,-4(fp)
8112ffbc:	10803fd8 	cmpnei	r2,r2,255
8112ffc0:	1000111e 	bne	r2,zero,81130008 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ffc4:	0005303a 	rdctl	r2,status
8112ffc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ffcc:	e0fff917 	ldw	r3,-28(fp)
8112ffd0:	00bfff84 	movi	r2,-2
8112ffd4:	1884703a 	and	r2,r3,r2
8112ffd8:	1001703a 	wrctl	status,r2
  
  return context;
8112ffdc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8112ffe0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8112ffe4:	d0a08417 	ldw	r2,-32240(gp)
8112ffe8:	10800dc3 	ldbu	r2,55(r2)
8112ffec:	e0bff805 	stb	r2,-32(fp)
8112fff0:	e0bff617 	ldw	r2,-40(fp)
8112fff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fff8:	e0bffe17 	ldw	r2,-8(fp)
8112fffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
81130000:	e0bff803 	ldbu	r2,-32(fp)
81130004:	00002906 	br	811300ac <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130008:	0005303a 	rdctl	r2,status
8113000c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130010:	e0fff717 	ldw	r3,-36(fp)
81130014:	00bfff84 	movi	r2,-2
81130018:	1884703a 	and	r2,r3,r2
8113001c:	1001703a 	wrctl	status,r2
  
  return context;
81130020:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
81130024:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81130028:	e0ffff03 	ldbu	r3,-4(fp)
8113002c:	00a04574 	movhi	r2,33045
81130030:	108fcf04 	addi	r2,r2,16188
81130034:	18c7883a 	add	r3,r3,r3
81130038:	18c7883a 	add	r3,r3,r3
8113003c:	10c5883a 	add	r2,r2,r3
81130040:	10800017 	ldw	r2,0(r2)
81130044:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
81130048:	e0bffb17 	ldw	r2,-20(fp)
8113004c:	1000061e 	bne	r2,zero,81130068 <OSTaskDelReq+0x104>
81130050:	e0bff617 	ldw	r2,-40(fp)
81130054:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130058:	e0bffa17 	ldw	r2,-24(fp)
8113005c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81130060:	008010c4 	movi	r2,67
81130064:	00001106 	br	811300ac <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
81130068:	e0bffb17 	ldw	r2,-20(fp)
8113006c:	10800058 	cmpnei	r2,r2,1
81130070:	1000061e 	bne	r2,zero,8113008c <OSTaskDelReq+0x128>
81130074:	e0bff617 	ldw	r2,-40(fp)
81130078:	e0bffc15 	stw	r2,-16(fp)
8113007c:	e0bffc17 	ldw	r2,-16(fp)
81130080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81130084:	00800f44 	movi	r2,61
81130088:	00000806 	br	811300ac <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8113008c:	e0bffb17 	ldw	r2,-20(fp)
81130090:	00c00fc4 	movi	r3,63
81130094:	10c00dc5 	stb	r3,55(r2)
81130098:	e0bff617 	ldw	r2,-40(fp)
8113009c:	e0bffd15 	stw	r2,-12(fp)
811300a0:	e0bffd17 	ldw	r2,-12(fp)
811300a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811300a8:	0005883a 	mov	r2,zero
}
811300ac:	e037883a 	mov	sp,fp
811300b0:	df000017 	ldw	fp,0(sp)
811300b4:	dec00104 	addi	sp,sp,4
811300b8:	f800283a 	ret

811300bc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
811300bc:	defff404 	addi	sp,sp,-48
811300c0:	de00012e 	bgeu	sp,et,811300c8 <OSTaskNameGet+0xc>
811300c4:	003b68fa 	trap	3
811300c8:	dfc00b15 	stw	ra,44(sp)
811300cc:	df000a15 	stw	fp,40(sp)
811300d0:	df000a04 	addi	fp,sp,40
811300d4:	2005883a 	mov	r2,r4
811300d8:	e17ffe15 	stw	r5,-8(fp)
811300dc:	e1bfff15 	stw	r6,-4(fp)
811300e0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
811300e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
811300e8:	e0bfff17 	ldw	r2,-4(fp)
811300ec:	1000021e 	bne	r2,zero,811300f8 <OSTaskNameGet+0x3c>
        return (0);
811300f0:	0005883a 	mov	r2,zero
811300f4:	00005406 	br	81130248 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
811300f8:	e0bffd03 	ldbu	r2,-12(fp)
811300fc:	10800a70 	cmpltui	r2,r2,41
81130100:	1000081e 	bne	r2,zero,81130124 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
81130104:	e0bffd03 	ldbu	r2,-12(fp)
81130108:	10803fe0 	cmpeqi	r2,r2,255
8113010c:	1000051e 	bne	r2,zero,81130124 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
81130110:	e0bfff17 	ldw	r2,-4(fp)
81130114:	00c00a84 	movi	r3,42
81130118:	10c00005 	stb	r3,0(r2)
            return (0);
8113011c:	0005883a 	mov	r2,zero
81130120:	00004906 	br	81130248 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
81130124:	e0bffe17 	ldw	r2,-8(fp)
81130128:	1000051e 	bne	r2,zero,81130140 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8113012c:	e0bfff17 	ldw	r2,-4(fp)
81130130:	00c00304 	movi	r3,12
81130134:	10c00005 	stb	r3,0(r2)
        return (0);
81130138:	0005883a 	mov	r2,zero
8113013c:	00004206 	br	81130248 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
81130140:	d0a08303 	ldbu	r2,-32244(gp)
81130144:	10803fcc 	andi	r2,r2,255
81130148:	10000526 	beq	r2,zero,81130160 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
8113014c:	e0bfff17 	ldw	r2,-4(fp)
81130150:	00c00444 	movi	r3,17
81130154:	10c00005 	stb	r3,0(r2)
        return (0);
81130158:	0005883a 	mov	r2,zero
8113015c:	00003a06 	br	81130248 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130160:	0005303a 	rdctl	r2,status
81130164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130168:	e0fffc17 	ldw	r3,-16(fp)
8113016c:	00bfff84 	movi	r2,-2
81130170:	1884703a 	and	r2,r3,r2
81130174:	1001703a 	wrctl	status,r2
  
  return context;
81130178:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8113017c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81130180:	e0bffd03 	ldbu	r2,-12(fp)
81130184:	10803fd8 	cmpnei	r2,r2,255
81130188:	1000031e 	bne	r2,zero,81130198 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
8113018c:	d0a08417 	ldw	r2,-32240(gp)
81130190:	10800c83 	ldbu	r2,50(r2)
81130194:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130198:	e0fffd03 	ldbu	r3,-12(fp)
8113019c:	00a04574 	movhi	r2,33045
811301a0:	108fcf04 	addi	r2,r2,16188
811301a4:	18c7883a 	add	r3,r3,r3
811301a8:	18c7883a 	add	r3,r3,r3
811301ac:	10c5883a 	add	r2,r2,r3
811301b0:	10800017 	ldw	r2,0(r2)
811301b4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
811301b8:	e0bff817 	ldw	r2,-32(fp)
811301bc:	1000091e 	bne	r2,zero,811301e4 <OSTaskNameGet+0x128>
811301c0:	e0bff617 	ldw	r2,-40(fp)
811301c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811301c8:	e0bff717 	ldw	r2,-36(fp)
811301cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
811301d0:	e0bfff17 	ldw	r2,-4(fp)
811301d4:	00c010c4 	movi	r3,67
811301d8:	10c00005 	stb	r3,0(r2)
        return (0);
811301dc:	0005883a 	mov	r2,zero
811301e0:	00001906 	br	81130248 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
811301e4:	e0bff817 	ldw	r2,-32(fp)
811301e8:	10800058 	cmpnei	r2,r2,1
811301ec:	1000091e 	bne	r2,zero,81130214 <OSTaskNameGet+0x158>
811301f0:	e0bff617 	ldw	r2,-40(fp)
811301f4:	e0bff915 	stw	r2,-28(fp)
811301f8:	e0bff917 	ldw	r2,-28(fp)
811301fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
81130200:	e0bfff17 	ldw	r2,-4(fp)
81130204:	00c010c4 	movi	r3,67
81130208:	10c00005 	stb	r3,0(r2)
        return (0);
8113020c:	0005883a 	mov	r2,zero
81130210:	00000d06 	br	81130248 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
81130214:	e0bff817 	ldw	r2,-32(fp)
81130218:	10801304 	addi	r2,r2,76
8113021c:	100b883a 	mov	r5,r2
81130220:	e13ffe17 	ldw	r4,-8(fp)
81130224:	1129f640 	call	81129f64 <OS_StrCopy>
81130228:	e0bffb05 	stb	r2,-20(fp)
8113022c:	e0bff617 	ldw	r2,-40(fp)
81130230:	e0bffa15 	stw	r2,-24(fp)
81130234:	e0bffa17 	ldw	r2,-24(fp)
81130238:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8113023c:	e0bfff17 	ldw	r2,-4(fp)
81130240:	10000005 	stb	zero,0(r2)
    return (len);
81130244:	e0bffb03 	ldbu	r2,-20(fp)
}
81130248:	e037883a 	mov	sp,fp
8113024c:	dfc00117 	ldw	ra,4(sp)
81130250:	df000017 	ldw	fp,0(sp)
81130254:	dec00204 	addi	sp,sp,8
81130258:	f800283a 	ret

8113025c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8113025c:	defff304 	addi	sp,sp,-52
81130260:	de00012e 	bgeu	sp,et,81130268 <OSTaskNameSet+0xc>
81130264:	003b68fa 	trap	3
81130268:	dfc00c15 	stw	ra,48(sp)
8113026c:	df000b15 	stw	fp,44(sp)
81130270:	df000b04 	addi	fp,sp,44
81130274:	2005883a 	mov	r2,r4
81130278:	e17ffe15 	stw	r5,-8(fp)
8113027c:	e1bfff15 	stw	r6,-4(fp)
81130280:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81130284:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81130288:	e0bfff17 	ldw	r2,-4(fp)
8113028c:	10005c26 	beq	r2,zero,81130400 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81130290:	e0bffd03 	ldbu	r2,-12(fp)
81130294:	10800a70 	cmpltui	r2,r2,41
81130298:	1000071e 	bne	r2,zero,811302b8 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
8113029c:	e0bffd03 	ldbu	r2,-12(fp)
811302a0:	10803fe0 	cmpeqi	r2,r2,255
811302a4:	1000041e 	bne	r2,zero,811302b8 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
811302a8:	e0bfff17 	ldw	r2,-4(fp)
811302ac:	00c00a84 	movi	r3,42
811302b0:	10c00005 	stb	r3,0(r2)
            return;
811302b4:	00005306 	br	81130404 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
811302b8:	e0bffe17 	ldw	r2,-8(fp)
811302bc:	1000041e 	bne	r2,zero,811302d0 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
811302c0:	e0bfff17 	ldw	r2,-4(fp)
811302c4:	00c00304 	movi	r3,12
811302c8:	10c00005 	stb	r3,0(r2)
        return;
811302cc:	00004d06 	br	81130404 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
811302d0:	d0a08303 	ldbu	r2,-32244(gp)
811302d4:	10803fcc 	andi	r2,r2,255
811302d8:	10000426 	beq	r2,zero,811302ec <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
811302dc:	e0bfff17 	ldw	r2,-4(fp)
811302e0:	00c00484 	movi	r3,18
811302e4:	10c00005 	stb	r3,0(r2)
        return;
811302e8:	00004606 	br	81130404 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811302ec:	0005303a 	rdctl	r2,status
811302f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811302f4:	e0fffc17 	ldw	r3,-16(fp)
811302f8:	00bfff84 	movi	r2,-2
811302fc:	1884703a 	and	r2,r3,r2
81130300:	1001703a 	wrctl	status,r2
  
  return context;
81130304:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130308:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8113030c:	e0bffd03 	ldbu	r2,-12(fp)
81130310:	10803fd8 	cmpnei	r2,r2,255
81130314:	1000031e 	bne	r2,zero,81130324 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
81130318:	d0a08417 	ldw	r2,-32240(gp)
8113031c:	10800c83 	ldbu	r2,50(r2)
81130320:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130324:	e0fffd03 	ldbu	r3,-12(fp)
81130328:	00a04574 	movhi	r2,33045
8113032c:	108fcf04 	addi	r2,r2,16188
81130330:	18c7883a 	add	r3,r3,r3
81130334:	18c7883a 	add	r3,r3,r3
81130338:	10c5883a 	add	r2,r2,r3
8113033c:	10800017 	ldw	r2,0(r2)
81130340:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
81130344:	e0bff717 	ldw	r2,-36(fp)
81130348:	1000081e 	bne	r2,zero,8113036c <OSTaskNameSet+0x110>
8113034c:	e0bff517 	ldw	r2,-44(fp)
81130350:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130354:	e0bff617 	ldw	r2,-40(fp)
81130358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8113035c:	e0bfff17 	ldw	r2,-4(fp)
81130360:	00c010c4 	movi	r3,67
81130364:	10c00005 	stb	r3,0(r2)
        return;
81130368:	00002606 	br	81130404 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8113036c:	e0bff717 	ldw	r2,-36(fp)
81130370:	10800058 	cmpnei	r2,r2,1
81130374:	1000081e 	bne	r2,zero,81130398 <OSTaskNameSet+0x13c>
81130378:	e0bff517 	ldw	r2,-44(fp)
8113037c:	e0bff815 	stw	r2,-32(fp)
81130380:	e0bff817 	ldw	r2,-32(fp)
81130384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
81130388:	e0bfff17 	ldw	r2,-4(fp)
8113038c:	00c010c4 	movi	r3,67
81130390:	10c00005 	stb	r3,0(r2)
        return;
81130394:	00001b06 	br	81130404 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
81130398:	e13ffe17 	ldw	r4,-8(fp)
8113039c:	1129fe00 	call	81129fe0 <OS_StrLen>
811303a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
811303a4:	e0bffa03 	ldbu	r2,-24(fp)
811303a8:	10800830 	cmpltui	r2,r2,32
811303ac:	1000081e 	bne	r2,zero,811303d0 <OSTaskNameSet+0x174>
811303b0:	e0bff517 	ldw	r2,-44(fp)
811303b4:	e0bff915 	stw	r2,-28(fp)
811303b8:	e0bff917 	ldw	r2,-28(fp)
811303bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
811303c0:	e0bfff17 	ldw	r2,-4(fp)
811303c4:	00c01044 	movi	r3,65
811303c8:	10c00005 	stb	r3,0(r2)
        return;
811303cc:	00000d06 	br	81130404 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
811303d0:	e0bff717 	ldw	r2,-36(fp)
811303d4:	10801304 	addi	r2,r2,76
811303d8:	e17ffe17 	ldw	r5,-8(fp)
811303dc:	1009883a 	mov	r4,r2
811303e0:	1129f640 	call	81129f64 <OS_StrCopy>
811303e4:	e0bff517 	ldw	r2,-44(fp)
811303e8:	e0bffb15 	stw	r2,-20(fp)
811303ec:	e0bffb17 	ldw	r2,-20(fp)
811303f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811303f4:	e0bfff17 	ldw	r2,-4(fp)
811303f8:	10000005 	stb	zero,0(r2)
811303fc:	00000106 	br	81130404 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
81130400:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81130404:	e037883a 	mov	sp,fp
81130408:	dfc00117 	ldw	ra,4(sp)
8113040c:	df000017 	ldw	fp,0(sp)
81130410:	dec00204 	addi	sp,sp,8
81130414:	f800283a 	ret

81130418 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
81130418:	defff404 	addi	sp,sp,-48
8113041c:	de00012e 	bgeu	sp,et,81130424 <OSTaskResume+0xc>
81130420:	003b68fa 	trap	3
81130424:	dfc00b15 	stw	ra,44(sp)
81130428:	df000a15 	stw	fp,40(sp)
8113042c:	df000a04 	addi	fp,sp,40
81130430:	2005883a 	mov	r2,r4
81130434:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81130438:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8113043c:	e0bfff03 	ldbu	r2,-4(fp)
81130440:	10800a30 	cmpltui	r2,r2,40
81130444:	1000021e 	bne	r2,zero,81130450 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81130448:	00800a84 	movi	r2,42
8113044c:	00006406 	br	811305e0 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130450:	0005303a 	rdctl	r2,status
81130454:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130458:	e0fffe17 	ldw	r3,-8(fp)
8113045c:	00bfff84 	movi	r2,-2
81130460:	1884703a 	and	r2,r3,r2
81130464:	1001703a 	wrctl	status,r2
  
  return context;
81130468:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8113046c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81130470:	e0ffff03 	ldbu	r3,-4(fp)
81130474:	00a04574 	movhi	r2,33045
81130478:	108fcf04 	addi	r2,r2,16188
8113047c:	18c7883a 	add	r3,r3,r3
81130480:	18c7883a 	add	r3,r3,r3
81130484:	10c5883a 	add	r2,r2,r3
81130488:	10800017 	ldw	r2,0(r2)
8113048c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81130490:	e0bff817 	ldw	r2,-32(fp)
81130494:	1000061e 	bne	r2,zero,811304b0 <OSTaskResume+0x98>
81130498:	e0bff617 	ldw	r2,-40(fp)
8113049c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811304a0:	e0bff717 	ldw	r2,-36(fp)
811304a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
811304a8:	00801184 	movi	r2,70
811304ac:	00004c06 	br	811305e0 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
811304b0:	e0bff817 	ldw	r2,-32(fp)
811304b4:	10800058 	cmpnei	r2,r2,1
811304b8:	1000061e 	bne	r2,zero,811304d4 <OSTaskResume+0xbc>
811304bc:	e0bff617 	ldw	r2,-40(fp)
811304c0:	e0bff915 	stw	r2,-28(fp)
811304c4:	e0bff917 	ldw	r2,-28(fp)
811304c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811304cc:	008010c4 	movi	r2,67
811304d0:	00004306 	br	811305e0 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
811304d4:	e0bff817 	ldw	r2,-32(fp)
811304d8:	10800c03 	ldbu	r2,48(r2)
811304dc:	10803fcc 	andi	r2,r2,255
811304e0:	1080020c 	andi	r2,r2,8
811304e4:	10003926 	beq	r2,zero,811305cc <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
811304e8:	e0bff817 	ldw	r2,-32(fp)
811304ec:	10c00c03 	ldbu	r3,48(r2)
811304f0:	00bffdc4 	movi	r2,-9
811304f4:	1884703a 	and	r2,r3,r2
811304f8:	1007883a 	mov	r3,r2
811304fc:	e0bff817 	ldw	r2,-32(fp)
81130500:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
81130504:	e0bff817 	ldw	r2,-32(fp)
81130508:	10800c03 	ldbu	r2,48(r2)
8113050c:	10803fcc 	andi	r2,r2,255
81130510:	1000281e 	bne	r2,zero,811305b4 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
81130514:	e0bff817 	ldw	r2,-32(fp)
81130518:	10800b8b 	ldhu	r2,46(r2)
8113051c:	10bfffcc 	andi	r2,r2,65535
81130520:	10001f1e 	bne	r2,zero,811305a0 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
81130524:	e0bff817 	ldw	r2,-32(fp)
81130528:	10c00d83 	ldbu	r3,54(r2)
8113052c:	d0a08003 	ldbu	r2,-32256(gp)
81130530:	1884b03a 	or	r2,r3,r2
81130534:	d0a08005 	stb	r2,-32256(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81130538:	e0bff817 	ldw	r2,-32(fp)
8113053c:	10800d03 	ldbu	r2,52(r2)
81130540:	10c03fcc 	andi	r3,r2,255
81130544:	e0bff817 	ldw	r2,-32(fp)
81130548:	10800d03 	ldbu	r2,52(r2)
8113054c:	11003fcc 	andi	r4,r2,255
81130550:	d0a08044 	addi	r2,gp,-32255
81130554:	2085883a 	add	r2,r4,r2
81130558:	11000003 	ldbu	r4,0(r2)
8113055c:	e0bff817 	ldw	r2,-32(fp)
81130560:	10800d43 	ldbu	r2,53(r2)
81130564:	2084b03a 	or	r2,r4,r2
81130568:	1009883a 	mov	r4,r2
8113056c:	d0a08044 	addi	r2,gp,-32255
81130570:	1885883a 	add	r2,r3,r2
81130574:	11000005 	stb	r4,0(r2)
81130578:	e0bff617 	ldw	r2,-40(fp)
8113057c:	e0bffa15 	stw	r2,-24(fp)
81130580:	e0bffa17 	ldw	r2,-24(fp)
81130584:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81130588:	d0a07303 	ldbu	r2,-32308(gp)
8113058c:	10803fcc 	andi	r2,r2,255
81130590:	10800058 	cmpnei	r2,r2,1
81130594:	10000b1e 	bne	r2,zero,811305c4 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
81130598:	1129e100 	call	81129e10 <OS_Sched>
8113059c:	00000906 	br	811305c4 <OSTaskResume+0x1ac>
811305a0:	e0bff617 	ldw	r2,-40(fp)
811305a4:	e0bffb15 	stw	r2,-20(fp)
811305a8:	e0bffb17 	ldw	r2,-20(fp)
811305ac:	1001703a 	wrctl	status,r2
811305b0:	00000406 	br	811305c4 <OSTaskResume+0x1ac>
811305b4:	e0bff617 	ldw	r2,-40(fp)
811305b8:	e0bffc15 	stw	r2,-16(fp)
811305bc:	e0bffc17 	ldw	r2,-16(fp)
811305c0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
811305c4:	0005883a 	mov	r2,zero
811305c8:	00000506 	br	811305e0 <OSTaskResume+0x1c8>
811305cc:	e0bff617 	ldw	r2,-40(fp)
811305d0:	e0bffd15 	stw	r2,-12(fp)
811305d4:	e0bffd17 	ldw	r2,-12(fp)
811305d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
811305dc:	00801104 	movi	r2,68
}
811305e0:	e037883a 	mov	sp,fp
811305e4:	dfc00117 	ldw	ra,4(sp)
811305e8:	df000017 	ldw	fp,0(sp)
811305ec:	dec00204 	addi	sp,sp,8
811305f0:	f800283a 	ret

811305f4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
811305f4:	defff304 	addi	sp,sp,-52
811305f8:	de00012e 	bgeu	sp,et,81130600 <OSTaskStkChk+0xc>
811305fc:	003b68fa 	trap	3
81130600:	df000c15 	stw	fp,48(sp)
81130604:	df000c04 	addi	fp,sp,48
81130608:	2005883a 	mov	r2,r4
8113060c:	e17fff15 	stw	r5,-4(fp)
81130610:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81130614:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
81130618:	e0bffe03 	ldbu	r2,-8(fp)
8113061c:	10800a70 	cmpltui	r2,r2,41
81130620:	1000051e 	bne	r2,zero,81130638 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
81130624:	e0bffe03 	ldbu	r2,-8(fp)
81130628:	10803fe0 	cmpeqi	r2,r2,255
8113062c:	1000021e 	bne	r2,zero,81130638 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
81130630:	00800a84 	movi	r2,42
81130634:	00005d06 	br	811307ac <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
81130638:	e0bfff17 	ldw	r2,-4(fp)
8113063c:	1000021e 	bne	r2,zero,81130648 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
81130640:	00800244 	movi	r2,9
81130644:	00005906 	br	811307ac <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
81130648:	e0bfff17 	ldw	r2,-4(fp)
8113064c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81130650:	e0bfff17 	ldw	r2,-4(fp)
81130654:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130658:	0005303a 	rdctl	r2,status
8113065c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130660:	e0fffd17 	ldw	r3,-12(fp)
81130664:	00bfff84 	movi	r2,-2
81130668:	1884703a 	and	r2,r3,r2
8113066c:	1001703a 	wrctl	status,r2
  
  return context;
81130670:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
81130674:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
81130678:	e0bffe03 	ldbu	r2,-8(fp)
8113067c:	10803fd8 	cmpnei	r2,r2,255
81130680:	1000031e 	bne	r2,zero,81130690 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81130684:	d0a08417 	ldw	r2,-32240(gp)
81130688:	10800c83 	ldbu	r2,50(r2)
8113068c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130690:	e0fffe03 	ldbu	r3,-8(fp)
81130694:	00a04574 	movhi	r2,33045
81130698:	108fcf04 	addi	r2,r2,16188
8113069c:	18c7883a 	add	r3,r3,r3
811306a0:	18c7883a 	add	r3,r3,r3
811306a4:	10c5883a 	add	r2,r2,r3
811306a8:	10800017 	ldw	r2,0(r2)
811306ac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
811306b0:	e0bff817 	ldw	r2,-32(fp)
811306b4:	1000061e 	bne	r2,zero,811306d0 <OSTaskStkChk+0xdc>
811306b8:	e0bff617 	ldw	r2,-40(fp)
811306bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811306c0:	e0bff717 	ldw	r2,-36(fp)
811306c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811306c8:	008010c4 	movi	r2,67
811306cc:	00003706 	br	811307ac <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
811306d0:	e0bff817 	ldw	r2,-32(fp)
811306d4:	10800058 	cmpnei	r2,r2,1
811306d8:	1000061e 	bne	r2,zero,811306f4 <OSTaskStkChk+0x100>
811306dc:	e0bff617 	ldw	r2,-40(fp)
811306e0:	e0bff915 	stw	r2,-28(fp)
811306e4:	e0bff917 	ldw	r2,-28(fp)
811306e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811306ec:	008010c4 	movi	r2,67
811306f0:	00002e06 	br	811307ac <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
811306f4:	e0bff817 	ldw	r2,-32(fp)
811306f8:	1080040b 	ldhu	r2,16(r2)
811306fc:	10bfffcc 	andi	r2,r2,65535
81130700:	1080004c 	andi	r2,r2,1
81130704:	1000061e 	bne	r2,zero,81130720 <OSTaskStkChk+0x12c>
81130708:	e0bff617 	ldw	r2,-40(fp)
8113070c:	e0bffa15 	stw	r2,-24(fp)
81130710:	e0bffa17 	ldw	r2,-24(fp)
81130714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
81130718:	00801144 	movi	r2,69
8113071c:	00002306 	br	811307ac <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
81130720:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
81130724:	e0bff817 	ldw	r2,-32(fp)
81130728:	10800317 	ldw	r2,12(r2)
8113072c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
81130730:	e0bff817 	ldw	r2,-32(fp)
81130734:	10800217 	ldw	r2,8(r2)
81130738:	e0bff415 	stw	r2,-48(fp)
8113073c:	e0bff617 	ldw	r2,-40(fp)
81130740:	e0bffb15 	stw	r2,-20(fp)
81130744:	e0bffb17 	ldw	r2,-20(fp)
81130748:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8113074c:	00000306 	br	8113075c <OSTaskStkChk+0x168>
        nfree++;
81130750:	e0bff517 	ldw	r2,-44(fp)
81130754:	10800044 	addi	r2,r2,1
81130758:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8113075c:	e0bff417 	ldw	r2,-48(fp)
81130760:	10c00104 	addi	r3,r2,4
81130764:	e0fff415 	stw	r3,-48(fp)
81130768:	10800017 	ldw	r2,0(r2)
8113076c:	103ff826 	beq	r2,zero,81130750 <__reset+0xfb110750>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
81130770:	e0bff517 	ldw	r2,-44(fp)
81130774:	1085883a 	add	r2,r2,r2
81130778:	1085883a 	add	r2,r2,r2
8113077c:	1007883a 	mov	r3,r2
81130780:	e0bfff17 	ldw	r2,-4(fp)
81130784:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81130788:	e0fffc17 	ldw	r3,-16(fp)
8113078c:	e0bff517 	ldw	r2,-44(fp)
81130790:	1885c83a 	sub	r2,r3,r2
81130794:	1085883a 	add	r2,r2,r2
81130798:	1085883a 	add	r2,r2,r2
8113079c:	1007883a 	mov	r3,r2
811307a0:	e0bfff17 	ldw	r2,-4(fp)
811307a4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
811307a8:	0005883a 	mov	r2,zero
}
811307ac:	e037883a 	mov	sp,fp
811307b0:	df000017 	ldw	fp,0(sp)
811307b4:	dec00104 	addi	sp,sp,4
811307b8:	f800283a 	ret

811307bc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
811307bc:	defff504 	addi	sp,sp,-44
811307c0:	de00012e 	bgeu	sp,et,811307c8 <OSTaskSuspend+0xc>
811307c4:	003b68fa 	trap	3
811307c8:	dfc00a15 	stw	ra,40(sp)
811307cc:	df000915 	stw	fp,36(sp)
811307d0:	df000904 	addi	fp,sp,36
811307d4:	2005883a 	mov	r2,r4
811307d8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811307dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
811307e0:	e0bfff03 	ldbu	r2,-4(fp)
811307e4:	10800a18 	cmpnei	r2,r2,40
811307e8:	1000021e 	bne	r2,zero,811307f4 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
811307ec:	008011c4 	movi	r2,71
811307f0:	00006806 	br	81130994 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
811307f4:	e0bfff03 	ldbu	r2,-4(fp)
811307f8:	10800a30 	cmpltui	r2,r2,40
811307fc:	1000051e 	bne	r2,zero,81130814 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
81130800:	e0bfff03 	ldbu	r2,-4(fp)
81130804:	10803fe0 	cmpeqi	r2,r2,255
81130808:	1000021e 	bne	r2,zero,81130814 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
8113080c:	00800a84 	movi	r2,42
81130810:	00006006 	br	81130994 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130814:	0005303a 	rdctl	r2,status
81130818:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113081c:	e0fffe17 	ldw	r3,-8(fp)
81130820:	00bfff84 	movi	r2,-2
81130824:	1884703a 	and	r2,r3,r2
81130828:	1001703a 	wrctl	status,r2
  
  return context;
8113082c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
81130830:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
81130834:	e0bfff03 	ldbu	r2,-4(fp)
81130838:	10803fd8 	cmpnei	r2,r2,255
8113083c:	1000061e 	bne	r2,zero,81130858 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81130840:	d0a08417 	ldw	r2,-32240(gp)
81130844:	10800c83 	ldbu	r2,50(r2)
81130848:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8113084c:	00800044 	movi	r2,1
81130850:	e0bff705 	stb	r2,-36(fp)
81130854:	00000906 	br	8113087c <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
81130858:	d0a08417 	ldw	r2,-32240(gp)
8113085c:	10800c83 	ldbu	r2,50(r2)
81130860:	10c03fcc 	andi	r3,r2,255
81130864:	e0bfff03 	ldbu	r2,-4(fp)
81130868:	1880031e 	bne	r3,r2,81130878 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
8113086c:	00800044 	movi	r2,1
81130870:	e0bff705 	stb	r2,-36(fp)
81130874:	00000106 	br	8113087c <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
81130878:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8113087c:	e0ffff03 	ldbu	r3,-4(fp)
81130880:	00a04574 	movhi	r2,33045
81130884:	108fcf04 	addi	r2,r2,16188
81130888:	18c7883a 	add	r3,r3,r3
8113088c:	18c7883a 	add	r3,r3,r3
81130890:	10c5883a 	add	r2,r2,r3
81130894:	10800017 	ldw	r2,0(r2)
81130898:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8113089c:	e0bffa17 	ldw	r2,-24(fp)
811308a0:	1000061e 	bne	r2,zero,811308bc <OSTaskSuspend+0x100>
811308a4:	e0bff817 	ldw	r2,-32(fp)
811308a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811308ac:	e0bff917 	ldw	r2,-28(fp)
811308b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
811308b4:	00801204 	movi	r2,72
811308b8:	00003606 	br	81130994 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
811308bc:	e0bffa17 	ldw	r2,-24(fp)
811308c0:	10800058 	cmpnei	r2,r2,1
811308c4:	1000061e 	bne	r2,zero,811308e0 <OSTaskSuspend+0x124>
811308c8:	e0bff817 	ldw	r2,-32(fp)
811308cc:	e0bffb15 	stw	r2,-20(fp)
811308d0:	e0bffb17 	ldw	r2,-20(fp)
811308d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811308d8:	008010c4 	movi	r2,67
811308dc:	00002d06 	br	81130994 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
811308e0:	e0bffa17 	ldw	r2,-24(fp)
811308e4:	10800d03 	ldbu	r2,52(r2)
811308e8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
811308ec:	e0fffd03 	ldbu	r3,-12(fp)
811308f0:	e13ffd03 	ldbu	r4,-12(fp)
811308f4:	d0a08044 	addi	r2,gp,-32255
811308f8:	2085883a 	add	r2,r4,r2
811308fc:	10800003 	ldbu	r2,0(r2)
81130900:	1009883a 	mov	r4,r2
81130904:	e0bffa17 	ldw	r2,-24(fp)
81130908:	10800d43 	ldbu	r2,53(r2)
8113090c:	0084303a 	nor	r2,zero,r2
81130910:	2084703a 	and	r2,r4,r2
81130914:	1009883a 	mov	r4,r2
81130918:	d0a08044 	addi	r2,gp,-32255
8113091c:	1885883a 	add	r2,r3,r2
81130920:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81130924:	e0fffd03 	ldbu	r3,-12(fp)
81130928:	d0a08044 	addi	r2,gp,-32255
8113092c:	1885883a 	add	r2,r3,r2
81130930:	10800003 	ldbu	r2,0(r2)
81130934:	10803fcc 	andi	r2,r2,255
81130938:	1000071e 	bne	r2,zero,81130958 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8113093c:	e0bffa17 	ldw	r2,-24(fp)
81130940:	10800d83 	ldbu	r2,54(r2)
81130944:	0084303a 	nor	r2,zero,r2
81130948:	1007883a 	mov	r3,r2
8113094c:	d0a08003 	ldbu	r2,-32256(gp)
81130950:	1884703a 	and	r2,r3,r2
81130954:	d0a08005 	stb	r2,-32256(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
81130958:	e0bffa17 	ldw	r2,-24(fp)
8113095c:	10800c03 	ldbu	r2,48(r2)
81130960:	10800214 	ori	r2,r2,8
81130964:	1007883a 	mov	r3,r2
81130968:	e0bffa17 	ldw	r2,-24(fp)
8113096c:	10c00c05 	stb	r3,48(r2)
81130970:	e0bff817 	ldw	r2,-32(fp)
81130974:	e0bffc15 	stw	r2,-16(fp)
81130978:	e0bffc17 	ldw	r2,-16(fp)
8113097c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
81130980:	e0bff703 	ldbu	r2,-36(fp)
81130984:	10800058 	cmpnei	r2,r2,1
81130988:	1000011e 	bne	r2,zero,81130990 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
8113098c:	1129e100 	call	81129e10 <OS_Sched>
    }
    return (OS_ERR_NONE);
81130990:	0005883a 	mov	r2,zero
}
81130994:	e037883a 	mov	sp,fp
81130998:	dfc00117 	ldw	ra,4(sp)
8113099c:	df000017 	ldw	fp,0(sp)
811309a0:	dec00204 	addi	sp,sp,8
811309a4:	f800283a 	ret

811309a8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
811309a8:	defff604 	addi	sp,sp,-40
811309ac:	de00012e 	bgeu	sp,et,811309b4 <OSTaskQuery+0xc>
811309b0:	003b68fa 	trap	3
811309b4:	dfc00915 	stw	ra,36(sp)
811309b8:	df000815 	stw	fp,32(sp)
811309bc:	df000804 	addi	fp,sp,32
811309c0:	2005883a 	mov	r2,r4
811309c4:	e17fff15 	stw	r5,-4(fp)
811309c8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811309cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
811309d0:	e0bffe03 	ldbu	r2,-8(fp)
811309d4:	10800a70 	cmpltui	r2,r2,41
811309d8:	1000051e 	bne	r2,zero,811309f0 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
811309dc:	e0bffe03 	ldbu	r2,-8(fp)
811309e0:	10803fe0 	cmpeqi	r2,r2,255
811309e4:	1000021e 	bne	r2,zero,811309f0 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
811309e8:	00800a84 	movi	r2,42
811309ec:	00003406 	br	81130ac0 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
811309f0:	e0bfff17 	ldw	r2,-4(fp)
811309f4:	1000021e 	bne	r2,zero,81130a00 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
811309f8:	00800244 	movi	r2,9
811309fc:	00003006 	br	81130ac0 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130a00:	0005303a 	rdctl	r2,status
81130a04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130a08:	e0fffd17 	ldw	r3,-12(fp)
81130a0c:	00bfff84 	movi	r2,-2
81130a10:	1884703a 	and	r2,r3,r2
81130a14:	1001703a 	wrctl	status,r2
  
  return context;
81130a18:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130a1c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81130a20:	e0bffe03 	ldbu	r2,-8(fp)
81130a24:	10803fd8 	cmpnei	r2,r2,255
81130a28:	1000031e 	bne	r2,zero,81130a38 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
81130a2c:	d0a08417 	ldw	r2,-32240(gp)
81130a30:	10800c83 	ldbu	r2,50(r2)
81130a34:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130a38:	e0fffe03 	ldbu	r3,-8(fp)
81130a3c:	00a04574 	movhi	r2,33045
81130a40:	108fcf04 	addi	r2,r2,16188
81130a44:	18c7883a 	add	r3,r3,r3
81130a48:	18c7883a 	add	r3,r3,r3
81130a4c:	10c5883a 	add	r2,r2,r3
81130a50:	10800017 	ldw	r2,0(r2)
81130a54:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
81130a58:	e0bffa17 	ldw	r2,-24(fp)
81130a5c:	1000061e 	bne	r2,zero,81130a78 <OSTaskQuery+0xd0>
81130a60:	e0bff817 	ldw	r2,-32(fp)
81130a64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130a68:	e0bff917 	ldw	r2,-28(fp)
81130a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
81130a70:	00800a44 	movi	r2,41
81130a74:	00001206 	br	81130ac0 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
81130a78:	e0bffa17 	ldw	r2,-24(fp)
81130a7c:	10800058 	cmpnei	r2,r2,1
81130a80:	1000061e 	bne	r2,zero,81130a9c <OSTaskQuery+0xf4>
81130a84:	e0bff817 	ldw	r2,-32(fp)
81130a88:	e0bffb15 	stw	r2,-20(fp)
81130a8c:	e0bffb17 	ldw	r2,-20(fp)
81130a90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130a94:	008010c4 	movi	r2,67
81130a98:	00000906 	br	81130ac0 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
81130a9c:	01801b04 	movi	r6,108
81130aa0:	e17ffa17 	ldw	r5,-24(fp)
81130aa4:	e13fff17 	ldw	r4,-4(fp)
81130aa8:	1129da00 	call	81129da0 <OS_MemCopy>
81130aac:	e0bff817 	ldw	r2,-32(fp)
81130ab0:	e0bffc15 	stw	r2,-16(fp)
81130ab4:	e0bffc17 	ldw	r2,-16(fp)
81130ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130abc:	0005883a 	mov	r2,zero
}
81130ac0:	e037883a 	mov	sp,fp
81130ac4:	dfc00117 	ldw	ra,4(sp)
81130ac8:	df000017 	ldw	fp,0(sp)
81130acc:	dec00204 	addi	sp,sp,8
81130ad0:	f800283a 	ret

81130ad4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81130ad4:	defffc04 	addi	sp,sp,-16
81130ad8:	de00012e 	bgeu	sp,et,81130ae0 <OS_TaskStkClr+0xc>
81130adc:	003b68fa 	trap	3
81130ae0:	df000315 	stw	fp,12(sp)
81130ae4:	df000304 	addi	fp,sp,12
81130ae8:	e13ffd15 	stw	r4,-12(fp)
81130aec:	e17ffe15 	stw	r5,-8(fp)
81130af0:	3005883a 	mov	r2,r6
81130af4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81130af8:	e0bfff0b 	ldhu	r2,-4(fp)
81130afc:	1080004c 	andi	r2,r2,1
81130b00:	10000d26 	beq	r2,zero,81130b38 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
81130b04:	e0bfff0b 	ldhu	r2,-4(fp)
81130b08:	1080008c 	andi	r2,r2,2
81130b0c:	10000a26 	beq	r2,zero,81130b38 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81130b10:	00000706 	br	81130b30 <OS_TaskStkClr+0x5c>
                size--;
81130b14:	e0bffe17 	ldw	r2,-8(fp)
81130b18:	10bfffc4 	addi	r2,r2,-1
81130b1c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81130b20:	e0bffd17 	ldw	r2,-12(fp)
81130b24:	10c00104 	addi	r3,r2,4
81130b28:	e0fffd15 	stw	r3,-12(fp)
81130b2c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81130b30:	e0bffe17 	ldw	r2,-8(fp)
81130b34:	103ff71e 	bne	r2,zero,81130b14 <__reset+0xfb110b14>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
81130b38:	0001883a 	nop
81130b3c:	e037883a 	mov	sp,fp
81130b40:	df000017 	ldw	fp,0(sp)
81130b44:	dec00104 	addi	sp,sp,4
81130b48:	f800283a 	ret

81130b4c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81130b4c:	defff904 	addi	sp,sp,-28
81130b50:	de00012e 	bgeu	sp,et,81130b58 <OSTimeDly+0xc>
81130b54:	003b68fa 	trap	3
81130b58:	dfc00615 	stw	ra,24(sp)
81130b5c:	df000515 	stw	fp,20(sp)
81130b60:	df000504 	addi	fp,sp,20
81130b64:	2005883a 	mov	r2,r4
81130b68:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130b6c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81130b70:	d0a08303 	ldbu	r2,-32244(gp)
81130b74:	10803fcc 	andi	r2,r2,255
81130b78:	1000311e 	bne	r2,zero,81130c40 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81130b7c:	e0bfff0b 	ldhu	r2,-4(fp)
81130b80:	10003026 	beq	r2,zero,81130c44 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130b84:	0005303a 	rdctl	r2,status
81130b88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130b8c:	e0fffe17 	ldw	r3,-8(fp)
81130b90:	00bfff84 	movi	r2,-2
81130b94:	1884703a 	and	r2,r3,r2
81130b98:	1001703a 	wrctl	status,r2
  
  return context;
81130b9c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81130ba0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81130ba4:	d0a08417 	ldw	r2,-32240(gp)
81130ba8:	10800d03 	ldbu	r2,52(r2)
81130bac:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81130bb0:	e0fffd03 	ldbu	r3,-12(fp)
81130bb4:	e13ffd03 	ldbu	r4,-12(fp)
81130bb8:	d0a08044 	addi	r2,gp,-32255
81130bbc:	2085883a 	add	r2,r4,r2
81130bc0:	10800003 	ldbu	r2,0(r2)
81130bc4:	1009883a 	mov	r4,r2
81130bc8:	d0a08417 	ldw	r2,-32240(gp)
81130bcc:	10800d43 	ldbu	r2,53(r2)
81130bd0:	0084303a 	nor	r2,zero,r2
81130bd4:	2084703a 	and	r2,r4,r2
81130bd8:	1009883a 	mov	r4,r2
81130bdc:	d0a08044 	addi	r2,gp,-32255
81130be0:	1885883a 	add	r2,r3,r2
81130be4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81130be8:	e0fffd03 	ldbu	r3,-12(fp)
81130bec:	d0a08044 	addi	r2,gp,-32255
81130bf0:	1885883a 	add	r2,r3,r2
81130bf4:	10800003 	ldbu	r2,0(r2)
81130bf8:	10803fcc 	andi	r2,r2,255
81130bfc:	1000071e 	bne	r2,zero,81130c1c <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81130c00:	d0a08417 	ldw	r2,-32240(gp)
81130c04:	10800d83 	ldbu	r2,54(r2)
81130c08:	0084303a 	nor	r2,zero,r2
81130c0c:	1007883a 	mov	r3,r2
81130c10:	d0a08003 	ldbu	r2,-32256(gp)
81130c14:	1884703a 	and	r2,r3,r2
81130c18:	d0a08005 	stb	r2,-32256(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81130c1c:	d0a08417 	ldw	r2,-32240(gp)
81130c20:	e0ffff0b 	ldhu	r3,-4(fp)
81130c24:	10c00b8d 	sth	r3,46(r2)
81130c28:	e0bffb17 	ldw	r2,-20(fp)
81130c2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130c30:	e0bffc17 	ldw	r2,-16(fp)
81130c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81130c38:	1129e100 	call	81129e10 <OS_Sched>
81130c3c:	00000106 	br	81130c44 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81130c40:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81130c44:	e037883a 	mov	sp,fp
81130c48:	dfc00117 	ldw	ra,4(sp)
81130c4c:	df000017 	ldw	fp,0(sp)
81130c50:	dec00204 	addi	sp,sp,8
81130c54:	f800283a 	ret

81130c58 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
81130c58:	defff804 	addi	sp,sp,-32
81130c5c:	de00012e 	bgeu	sp,et,81130c64 <OSTimeDlyHMSM+0xc>
81130c60:	003b68fa 	trap	3
81130c64:	dfc00715 	stw	ra,28(sp)
81130c68:	df000615 	stw	fp,24(sp)
81130c6c:	df000604 	addi	fp,sp,24
81130c70:	2015883a 	mov	r10,r4
81130c74:	2809883a 	mov	r4,r5
81130c78:	3007883a 	mov	r3,r6
81130c7c:	3805883a 	mov	r2,r7
81130c80:	e2bffc05 	stb	r10,-16(fp)
81130c84:	e13ffd05 	stb	r4,-12(fp)
81130c88:	e0fffe05 	stb	r3,-8(fp)
81130c8c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81130c90:	d0a08303 	ldbu	r2,-32244(gp)
81130c94:	10803fcc 	andi	r2,r2,255
81130c98:	10000226 	beq	r2,zero,81130ca4 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
81130c9c:	00801544 	movi	r2,85
81130ca0:	00004106 	br	81130da8 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81130ca4:	e0bffc03 	ldbu	r2,-16(fp)
81130ca8:	1000081e 	bne	r2,zero,81130ccc <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
81130cac:	e0bffd03 	ldbu	r2,-12(fp)
81130cb0:	1000061e 	bne	r2,zero,81130ccc <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
81130cb4:	e0bffe03 	ldbu	r2,-8(fp)
81130cb8:	1000041e 	bne	r2,zero,81130ccc <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
81130cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81130cc0:	1000021e 	bne	r2,zero,81130ccc <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
81130cc4:	00801504 	movi	r2,84
81130cc8:	00003706 	br	81130da8 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
81130ccc:	e0bffd03 	ldbu	r2,-12(fp)
81130cd0:	10800f30 	cmpltui	r2,r2,60
81130cd4:	1000021e 	bne	r2,zero,81130ce0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81130cd8:	00801444 	movi	r2,81
81130cdc:	00003206 	br	81130da8 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
81130ce0:	e0bffe03 	ldbu	r2,-8(fp)
81130ce4:	10800f30 	cmpltui	r2,r2,60
81130ce8:	1000021e 	bne	r2,zero,81130cf4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
81130cec:	00801484 	movi	r2,82
81130cf0:	00002d06 	br	81130da8 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
81130cf4:	e0bfff0b 	ldhu	r2,-4(fp)
81130cf8:	1080fa30 	cmpltui	r2,r2,1000
81130cfc:	1000021e 	bne	r2,zero,81130d08 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
81130d00:	008014c4 	movi	r2,83
81130d04:	00002806 	br	81130da8 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81130d08:	e0bffc03 	ldbu	r2,-16(fp)
81130d0c:	10c38424 	muli	r3,r2,3600
81130d10:	e0bffd03 	ldbu	r2,-12(fp)
81130d14:	10800f24 	muli	r2,r2,60
81130d18:	1887883a 	add	r3,r3,r2
81130d1c:	e0bffe03 	ldbu	r2,-8(fp)
81130d20:	1885883a 	add	r2,r3,r2
81130d24:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81130d28:	e0bfff0b 	ldhu	r2,-4(fp)
81130d2c:	10c0fa24 	muli	r3,r2,1000
81130d30:	008418b4 	movhi	r2,4194
81130d34:	109374c4 	addi	r2,r2,19923
81130d38:	188a383a 	mulxuu	r5,r3,r2
81130d3c:	1885383a 	mul	r2,r3,r2
81130d40:	1011883a 	mov	r8,r2
81130d44:	2813883a 	mov	r9,r5
81130d48:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81130d4c:	2085883a 	add	r2,r4,r2
81130d50:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81130d54:	e0bffb17 	ldw	r2,-20(fp)
81130d58:	1004d43a 	srli	r2,r2,16
81130d5c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81130d60:	e0bffb17 	ldw	r2,-20(fp)
81130d64:	10bfffcc 	andi	r2,r2,65535
81130d68:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81130d6c:	e0bffb17 	ldw	r2,-20(fp)
81130d70:	10bfffcc 	andi	r2,r2,65535
81130d74:	1009883a 	mov	r4,r2
81130d78:	1130b4c0 	call	81130b4c <OSTimeDly>
    while (loops > 0) {
81130d7c:	00000706 	br	81130d9c <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
81130d80:	01200014 	movui	r4,32768
81130d84:	1130b4c0 	call	81130b4c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
81130d88:	01200014 	movui	r4,32768
81130d8c:	1130b4c0 	call	81130b4c <OSTimeDly>
        loops--;
81130d90:	e0bffa0b 	ldhu	r2,-24(fp)
81130d94:	10bfffc4 	addi	r2,r2,-1
81130d98:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81130d9c:	e0bffa0b 	ldhu	r2,-24(fp)
81130da0:	103ff71e 	bne	r2,zero,81130d80 <__reset+0xfb110d80>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81130da4:	0005883a 	mov	r2,zero
}
81130da8:	e037883a 	mov	sp,fp
81130dac:	dfc00117 	ldw	ra,4(sp)
81130db0:	df000017 	ldw	fp,0(sp)
81130db4:	dec00204 	addi	sp,sp,8
81130db8:	f800283a 	ret

81130dbc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81130dbc:	defff504 	addi	sp,sp,-44
81130dc0:	de00012e 	bgeu	sp,et,81130dc8 <OSTimeDlyResume+0xc>
81130dc4:	003b68fa 	trap	3
81130dc8:	dfc00a15 	stw	ra,40(sp)
81130dcc:	df000915 	stw	fp,36(sp)
81130dd0:	df000904 	addi	fp,sp,36
81130dd4:	2005883a 	mov	r2,r4
81130dd8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130ddc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81130de0:	e0bfff03 	ldbu	r2,-4(fp)
81130de4:	10800a30 	cmpltui	r2,r2,40
81130de8:	1000021e 	bne	r2,zero,81130df4 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81130dec:	00800a84 	movi	r2,42
81130df0:	00006406 	br	81130f84 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130df4:	0005303a 	rdctl	r2,status
81130df8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130dfc:	e0fffe17 	ldw	r3,-8(fp)
81130e00:	00bfff84 	movi	r2,-2
81130e04:	1884703a 	and	r2,r3,r2
81130e08:	1001703a 	wrctl	status,r2
  
  return context;
81130e0c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81130e10:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
81130e14:	e0ffff03 	ldbu	r3,-4(fp)
81130e18:	00a04574 	movhi	r2,33045
81130e1c:	108fcf04 	addi	r2,r2,16188
81130e20:	18c7883a 	add	r3,r3,r3
81130e24:	18c7883a 	add	r3,r3,r3
81130e28:	10c5883a 	add	r2,r2,r3
81130e2c:	10800017 	ldw	r2,0(r2)
81130e30:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
81130e34:	e0bff917 	ldw	r2,-28(fp)
81130e38:	1000061e 	bne	r2,zero,81130e54 <OSTimeDlyResume+0x98>
81130e3c:	e0bff717 	ldw	r2,-36(fp)
81130e40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130e44:	e0bff817 	ldw	r2,-32(fp)
81130e48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81130e4c:	008010c4 	movi	r2,67
81130e50:	00004c06 	br	81130f84 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81130e54:	e0bff917 	ldw	r2,-28(fp)
81130e58:	10800058 	cmpnei	r2,r2,1
81130e5c:	1000061e 	bne	r2,zero,81130e78 <OSTimeDlyResume+0xbc>
81130e60:	e0bff717 	ldw	r2,-36(fp)
81130e64:	e0bffa15 	stw	r2,-24(fp)
81130e68:	e0bffa17 	ldw	r2,-24(fp)
81130e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81130e70:	008010c4 	movi	r2,67
81130e74:	00004306 	br	81130f84 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
81130e78:	e0bff917 	ldw	r2,-28(fp)
81130e7c:	10800b8b 	ldhu	r2,46(r2)
81130e80:	10bfffcc 	andi	r2,r2,65535
81130e84:	1000061e 	bne	r2,zero,81130ea0 <OSTimeDlyResume+0xe4>
81130e88:	e0bff717 	ldw	r2,-36(fp)
81130e8c:	e0bffb15 	stw	r2,-20(fp)
81130e90:	e0bffb17 	ldw	r2,-20(fp)
81130e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
81130e98:	00801404 	movi	r2,80
81130e9c:	00003906 	br	81130f84 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81130ea0:	e0bff917 	ldw	r2,-28(fp)
81130ea4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81130ea8:	e0bff917 	ldw	r2,-28(fp)
81130eac:	10800c03 	ldbu	r2,48(r2)
81130eb0:	10803fcc 	andi	r2,r2,255
81130eb4:	10800dcc 	andi	r2,r2,55
81130eb8:	10000b26 	beq	r2,zero,81130ee8 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81130ebc:	e0bff917 	ldw	r2,-28(fp)
81130ec0:	10c00c03 	ldbu	r3,48(r2)
81130ec4:	00bff204 	movi	r2,-56
81130ec8:	1884703a 	and	r2,r3,r2
81130ecc:	1007883a 	mov	r3,r2
81130ed0:	e0bff917 	ldw	r2,-28(fp)
81130ed4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
81130ed8:	e0bff917 	ldw	r2,-28(fp)
81130edc:	00c00044 	movi	r3,1
81130ee0:	10c00c45 	stb	r3,49(r2)
81130ee4:	00000206 	br	81130ef0 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
81130ee8:	e0bff917 	ldw	r2,-28(fp)
81130eec:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
81130ef0:	e0bff917 	ldw	r2,-28(fp)
81130ef4:	10800c03 	ldbu	r2,48(r2)
81130ef8:	10803fcc 	andi	r2,r2,255
81130efc:	1080020c 	andi	r2,r2,8
81130f00:	10001b1e 	bne	r2,zero,81130f70 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
81130f04:	e0bff917 	ldw	r2,-28(fp)
81130f08:	10c00d83 	ldbu	r3,54(r2)
81130f0c:	d0a08003 	ldbu	r2,-32256(gp)
81130f10:	1884b03a 	or	r2,r3,r2
81130f14:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81130f18:	e0bff917 	ldw	r2,-28(fp)
81130f1c:	10800d03 	ldbu	r2,52(r2)
81130f20:	10c03fcc 	andi	r3,r2,255
81130f24:	e0bff917 	ldw	r2,-28(fp)
81130f28:	10800d03 	ldbu	r2,52(r2)
81130f2c:	11003fcc 	andi	r4,r2,255
81130f30:	d0a08044 	addi	r2,gp,-32255
81130f34:	2085883a 	add	r2,r4,r2
81130f38:	11000003 	ldbu	r4,0(r2)
81130f3c:	e0bff917 	ldw	r2,-28(fp)
81130f40:	10800d43 	ldbu	r2,53(r2)
81130f44:	2084b03a 	or	r2,r4,r2
81130f48:	1009883a 	mov	r4,r2
81130f4c:	d0a08044 	addi	r2,gp,-32255
81130f50:	1885883a 	add	r2,r3,r2
81130f54:	11000005 	stb	r4,0(r2)
81130f58:	e0bff717 	ldw	r2,-36(fp)
81130f5c:	e0bffc15 	stw	r2,-16(fp)
81130f60:	e0bffc17 	ldw	r2,-16(fp)
81130f64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
81130f68:	1129e100 	call	81129e10 <OS_Sched>
81130f6c:	00000406 	br	81130f80 <OSTimeDlyResume+0x1c4>
81130f70:	e0bff717 	ldw	r2,-36(fp)
81130f74:	e0bffd15 	stw	r2,-12(fp)
81130f78:	e0bffd17 	ldw	r2,-12(fp)
81130f7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81130f80:	0005883a 	mov	r2,zero
}
81130f84:	e037883a 	mov	sp,fp
81130f88:	dfc00117 	ldw	ra,4(sp)
81130f8c:	df000017 	ldw	fp,0(sp)
81130f90:	dec00204 	addi	sp,sp,8
81130f94:	f800283a 	ret

81130f98 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
81130f98:	defffb04 	addi	sp,sp,-20
81130f9c:	de00012e 	bgeu	sp,et,81130fa4 <OSTimeGet+0xc>
81130fa0:	003b68fa 	trap	3
81130fa4:	df000415 	stw	fp,16(sp)
81130fa8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130fac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130fb0:	0005303a 	rdctl	r2,status
81130fb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130fb8:	e0fffe17 	ldw	r3,-8(fp)
81130fbc:	00bfff84 	movi	r2,-2
81130fc0:	1884703a 	and	r2,r3,r2
81130fc4:	1001703a 	wrctl	status,r2
  
  return context;
81130fc8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81130fcc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81130fd0:	d0a08617 	ldw	r2,-32232(gp)
81130fd4:	e0bffd15 	stw	r2,-12(fp)
81130fd8:	e0bffc17 	ldw	r2,-16(fp)
81130fdc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130fe0:	e0bfff17 	ldw	r2,-4(fp)
81130fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
81130fe8:	e0bffd17 	ldw	r2,-12(fp)
}
81130fec:	e037883a 	mov	sp,fp
81130ff0:	df000017 	ldw	fp,0(sp)
81130ff4:	dec00104 	addi	sp,sp,4
81130ff8:	f800283a 	ret

81130ffc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
81130ffc:	defffb04 	addi	sp,sp,-20
81131000:	de00012e 	bgeu	sp,et,81131008 <OSTimeSet+0xc>
81131004:	003b68fa 	trap	3
81131008:	df000415 	stw	fp,16(sp)
8113100c:	df000404 	addi	fp,sp,16
81131010:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131014:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131018:	0005303a 	rdctl	r2,status
8113101c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131020:	e0fffd17 	ldw	r3,-12(fp)
81131024:	00bfff84 	movi	r2,-2
81131028:	1884703a 	and	r2,r3,r2
8113102c:	1001703a 	wrctl	status,r2
  
  return context;
81131030:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
81131034:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
81131038:	e0bfff17 	ldw	r2,-4(fp)
8113103c:	d0a08615 	stw	r2,-32232(gp)
81131040:	e0bffc17 	ldw	r2,-16(fp)
81131044:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131048:	e0bffe17 	ldw	r2,-8(fp)
8113104c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81131050:	0001883a 	nop
81131054:	e037883a 	mov	sp,fp
81131058:	df000017 	ldw	fp,0(sp)
8113105c:	dec00104 	addi	sp,sp,4
81131060:	f800283a 	ret

81131064 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
81131064:	defff804 	addi	sp,sp,-32
81131068:	de00012e 	bgeu	sp,et,81131070 <OSTmrCreate+0xc>
8113106c:	003b68fa 	trap	3
81131070:	dfc00715 	stw	ra,28(sp)
81131074:	df000615 	stw	fp,24(sp)
81131078:	df000604 	addi	fp,sp,24
8113107c:	e13ffc15 	stw	r4,-16(fp)
81131080:	e17ffd15 	stw	r5,-12(fp)
81131084:	3005883a 	mov	r2,r6
81131088:	e1ffff15 	stw	r7,-4(fp)
8113108c:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81131090:	e0800417 	ldw	r2,16(fp)
81131094:	1000021e 	bne	r2,zero,811310a0 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
81131098:	0005883a 	mov	r2,zero
8113109c:	00005d06 	br	81131214 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
811310a0:	e0bffe03 	ldbu	r2,-8(fp)
811310a4:	10c00060 	cmpeqi	r3,r2,1
811310a8:	1800091e 	bne	r3,zero,811310d0 <OSTmrCreate+0x6c>
811310ac:	108000a0 	cmpeqi	r2,r2,2
811310b0:	10000e26 	beq	r2,zero,811310ec <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
811310b4:	e0bffd17 	ldw	r2,-12(fp)
811310b8:	1000111e 	bne	r2,zero,81131100 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
811310bc:	e0800417 	ldw	r2,16(fp)
811310c0:	00ffe0c4 	movi	r3,-125
811310c4:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
811310c8:	0005883a 	mov	r2,zero
811310cc:	00005106 	br	81131214 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
811310d0:	e0bffc17 	ldw	r2,-16(fp)
811310d4:	10000c1e 	bne	r2,zero,81131108 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
811310d8:	e0800417 	ldw	r2,16(fp)
811310dc:	00ffe084 	movi	r3,-126
811310e0:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
811310e4:	0005883a 	mov	r2,zero
811310e8:	00004a06 	br	81131214 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
811310ec:	e0800417 	ldw	r2,16(fp)
811310f0:	00ffe104 	movi	r3,-124
811310f4:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
811310f8:	0005883a 	mov	r2,zero
811310fc:	00004506 	br	81131214 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
81131100:	0001883a 	nop
81131104:	00000106 	br	8113110c <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
81131108:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8113110c:	d0a08303 	ldbu	r2,-32244(gp)
81131110:	10803fcc 	andi	r2,r2,255
81131114:	10000526 	beq	r2,zero,8113112c <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
81131118:	e0800417 	ldw	r2,16(fp)
8113111c:	00ffe2c4 	movi	r3,-117
81131120:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81131124:	0005883a 	mov	r2,zero
81131128:	00003a06 	br	81131214 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
8113112c:	113201c0 	call	8113201c <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
81131130:	1131abc0 	call	81131abc <OSTmr_Alloc>
81131134:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
81131138:	e0bffa17 	ldw	r2,-24(fp)
8113113c:	1000061e 	bne	r2,zero,81131158 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
81131140:	11320600 	call	81132060 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
81131144:	e0800417 	ldw	r2,16(fp)
81131148:	00ffe184 	movi	r3,-122
8113114c:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81131150:	0005883a 	mov	r2,zero
81131154:	00002f06 	br	81131214 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
81131158:	e0bffa17 	ldw	r2,-24(fp)
8113115c:	00c00044 	movi	r3,1
81131160:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
81131164:	e0bffa17 	ldw	r2,-24(fp)
81131168:	e0fffc17 	ldw	r3,-16(fp)
8113116c:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81131170:	e0bffa17 	ldw	r2,-24(fp)
81131174:	e0fffd17 	ldw	r3,-12(fp)
81131178:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
8113117c:	e0bffa17 	ldw	r2,-24(fp)
81131180:	e0fffe03 	ldbu	r3,-8(fp)
81131184:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
81131188:	e0bffa17 	ldw	r2,-24(fp)
8113118c:	e0ffff17 	ldw	r3,-4(fp)
81131190:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
81131194:	e0bffa17 	ldw	r2,-24(fp)
81131198:	e0c00217 	ldw	r3,8(fp)
8113119c:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
811311a0:	e0800317 	ldw	r2,12(fp)
811311a4:	10001726 	beq	r2,zero,81131204 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
811311a8:	e1000317 	ldw	r4,12(fp)
811311ac:	1129fe00 	call	81129fe0 <OS_StrLen>
811311b0:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
811311b4:	e0bffb03 	ldbu	r2,-20(fp)
811311b8:	10800428 	cmpgeui	r2,r2,16
811311bc:	1000061e 	bne	r2,zero,811311d8 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
811311c0:	e0bffa17 	ldw	r2,-24(fp)
811311c4:	10800804 	addi	r2,r2,32
811311c8:	e1400317 	ldw	r5,12(fp)
811311cc:	1009883a 	mov	r4,r2
811311d0:	1129f640 	call	81129f64 <OS_StrCopy>
811311d4:	00000b06 	br	81131204 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
811311d8:	e0bffa17 	ldw	r2,-24(fp)
811311dc:	00c008c4 	movi	r3,35
811311e0:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
811311e4:	e0bffa17 	ldw	r2,-24(fp)
811311e8:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
811311ec:	e0800417 	ldw	r2,16(fp)
811311f0:	00ffe304 	movi	r3,-116
811311f4:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
811311f8:	11320600 	call	81132060 <OSTmr_Unlock>
            return (ptmr);
811311fc:	e0bffa17 	ldw	r2,-24(fp)
81131200:	00000406 	br	81131214 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
81131204:	11320600 	call	81132060 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
81131208:	e0800417 	ldw	r2,16(fp)
8113120c:	10000005 	stb	zero,0(r2)
    return (ptmr);
81131210:	e0bffa17 	ldw	r2,-24(fp)
}
81131214:	e037883a 	mov	sp,fp
81131218:	dfc00117 	ldw	ra,4(sp)
8113121c:	df000017 	ldw	fp,0(sp)
81131220:	dec00204 	addi	sp,sp,8
81131224:	f800283a 	ret

81131228 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
81131228:	defffc04 	addi	sp,sp,-16
8113122c:	de00012e 	bgeu	sp,et,81131234 <OSTmrDel+0xc>
81131230:	003b68fa 	trap	3
81131234:	dfc00315 	stw	ra,12(sp)
81131238:	df000215 	stw	fp,8(sp)
8113123c:	df000204 	addi	fp,sp,8
81131240:	e13ffe15 	stw	r4,-8(fp)
81131244:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81131248:	e0bfff17 	ldw	r2,-4(fp)
8113124c:	1000021e 	bne	r2,zero,81131258 <OSTmrDel+0x30>
        return (OS_FALSE);
81131250:	0005883a 	mov	r2,zero
81131254:	00003f06 	br	81131354 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81131258:	e0bffe17 	ldw	r2,-8(fp)
8113125c:	1000051e 	bne	r2,zero,81131274 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131260:	e0bfff17 	ldw	r2,-4(fp)
81131264:	00ffe284 	movi	r3,-118
81131268:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113126c:	0005883a 	mov	r2,zero
81131270:	00003806 	br	81131354 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81131274:	e0bffe17 	ldw	r2,-8(fp)
81131278:	10800003 	ldbu	r2,0(r2)
8113127c:	10803fcc 	andi	r2,r2,255
81131280:	10801920 	cmpeqi	r2,r2,100
81131284:	1000051e 	bne	r2,zero,8113129c <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131288:	e0bfff17 	ldw	r2,-4(fp)
8113128c:	00ffe244 	movi	r3,-119
81131290:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131294:	0005883a 	mov	r2,zero
81131298:	00002e06 	br	81131354 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8113129c:	d0a08303 	ldbu	r2,-32244(gp)
811312a0:	10803fcc 	andi	r2,r2,255
811312a4:	10000526 	beq	r2,zero,811312bc <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
811312a8:	e0bfff17 	ldw	r2,-4(fp)
811312ac:	00ffe2c4 	movi	r3,-117
811312b0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811312b4:	0005883a 	mov	r2,zero
811312b8:	00002606 	br	81131354 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
811312bc:	113201c0 	call	8113201c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811312c0:	e0bffe17 	ldw	r2,-8(fp)
811312c4:	10800c43 	ldbu	r2,49(r2)
811312c8:	10803fcc 	andi	r2,r2,255
811312cc:	10c000c8 	cmpgei	r3,r2,3
811312d0:	1800031e 	bne	r3,zero,811312e0 <OSTmrDel+0xb8>
811312d4:	00800d16 	blt	zero,r2,8113130c <OSTmrDel+0xe4>
811312d8:	10001326 	beq	r2,zero,81131328 <OSTmrDel+0x100>
811312dc:	00001806 	br	81131340 <OSTmrDel+0x118>
811312e0:	108000e0 	cmpeqi	r2,r2,3
811312e4:	10001626 	beq	r2,zero,81131340 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
811312e8:	e13ffe17 	ldw	r4,-8(fp)
811312ec:	1131f200 	call	81131f20 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811312f0:	e13ffe17 	ldw	r4,-8(fp)
811312f4:	1131b300 	call	81131b30 <OSTmr_Free>
             OSTmr_Unlock();
811312f8:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811312fc:	e0bfff17 	ldw	r2,-4(fp)
81131300:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81131304:	00800044 	movi	r2,1
81131308:	00001206 	br	81131354 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8113130c:	e13ffe17 	ldw	r4,-8(fp)
81131310:	1131b300 	call	81131b30 <OSTmr_Free>
             OSTmr_Unlock();
81131314:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131318:	e0bfff17 	ldw	r2,-4(fp)
8113131c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81131320:	00800044 	movi	r2,1
81131324:	00000b06 	br	81131354 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
81131328:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8113132c:	e0bfff17 	ldw	r2,-4(fp)
81131330:	00ffe1c4 	movi	r3,-121
81131334:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131338:	0005883a 	mov	r2,zero
8113133c:	00000506 	br	81131354 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
81131340:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131344:	e0bfff17 	ldw	r2,-4(fp)
81131348:	00ffe344 	movi	r3,-115
8113134c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131350:	0005883a 	mov	r2,zero
    }
}
81131354:	e037883a 	mov	sp,fp
81131358:	dfc00117 	ldw	ra,4(sp)
8113135c:	df000017 	ldw	fp,0(sp)
81131360:	dec00204 	addi	sp,sp,8
81131364:	f800283a 	ret

81131368 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
81131368:	defffa04 	addi	sp,sp,-24
8113136c:	de00012e 	bgeu	sp,et,81131374 <OSTmrNameGet+0xc>
81131370:	003b68fa 	trap	3
81131374:	dfc00515 	stw	ra,20(sp)
81131378:	df000415 	stw	fp,16(sp)
8113137c:	df000404 	addi	fp,sp,16
81131380:	e13ffd15 	stw	r4,-12(fp)
81131384:	e17ffe15 	stw	r5,-8(fp)
81131388:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8113138c:	e0bfff17 	ldw	r2,-4(fp)
81131390:	1000021e 	bne	r2,zero,8113139c <OSTmrNameGet+0x34>
        return (0);
81131394:	0005883a 	mov	r2,zero
81131398:	00003e06 	br	81131494 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
8113139c:	e0bffe17 	ldw	r2,-8(fp)
811313a0:	1000051e 	bne	r2,zero,811313b8 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
811313a4:	e0bfff17 	ldw	r2,-4(fp)
811313a8:	00ffe204 	movi	r3,-120
811313ac:	10c00005 	stb	r3,0(r2)
        return (0);
811313b0:	0005883a 	mov	r2,zero
811313b4:	00003706 	br	81131494 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
811313b8:	e0bffd17 	ldw	r2,-12(fp)
811313bc:	1000051e 	bne	r2,zero,811313d4 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
811313c0:	e0bfff17 	ldw	r2,-4(fp)
811313c4:	00ffe284 	movi	r3,-118
811313c8:	10c00005 	stb	r3,0(r2)
        return (0);
811313cc:	0005883a 	mov	r2,zero
811313d0:	00003006 	br	81131494 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811313d4:	e0bffd17 	ldw	r2,-12(fp)
811313d8:	10800003 	ldbu	r2,0(r2)
811313dc:	10803fcc 	andi	r2,r2,255
811313e0:	10801920 	cmpeqi	r2,r2,100
811313e4:	1000051e 	bne	r2,zero,811313fc <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811313e8:	e0bfff17 	ldw	r2,-4(fp)
811313ec:	00ffe244 	movi	r3,-119
811313f0:	10c00005 	stb	r3,0(r2)
        return (0);
811313f4:	0005883a 	mov	r2,zero
811313f8:	00002606 	br	81131494 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811313fc:	d0a08303 	ldbu	r2,-32244(gp)
81131400:	10803fcc 	andi	r2,r2,255
81131404:	10000526 	beq	r2,zero,8113141c <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
81131408:	e0bfff17 	ldw	r2,-4(fp)
8113140c:	00c00444 	movi	r3,17
81131410:	10c00005 	stb	r3,0(r2)
        return (0);
81131414:	0005883a 	mov	r2,zero
81131418:	00001e06 	br	81131494 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
8113141c:	113201c0 	call	8113201c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81131420:	e0bffd17 	ldw	r2,-12(fp)
81131424:	10800c43 	ldbu	r2,49(r2)
81131428:	10803fcc 	andi	r2,r2,255
8113142c:	10000e26 	beq	r2,zero,81131468 <OSTmrNameGet+0x100>
81131430:	10001316 	blt	r2,zero,81131480 <OSTmrNameGet+0x118>
81131434:	10800108 	cmpgei	r2,r2,4
81131438:	1000111e 	bne	r2,zero,81131480 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
8113143c:	e0bffd17 	ldw	r2,-12(fp)
81131440:	10800804 	addi	r2,r2,32
81131444:	100b883a 	mov	r5,r2
81131448:	e13ffe17 	ldw	r4,-8(fp)
8113144c:	1129f640 	call	81129f64 <OS_StrCopy>
81131450:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
81131454:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131458:	e0bfff17 	ldw	r2,-4(fp)
8113145c:	10000005 	stb	zero,0(r2)
             return (len);
81131460:	e0bffc03 	ldbu	r2,-16(fp)
81131464:	00000b06 	br	81131494 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
81131468:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8113146c:	e0bfff17 	ldw	r2,-4(fp)
81131470:	00ffe1c4 	movi	r3,-121
81131474:	10c00005 	stb	r3,0(r2)
             return (0);
81131478:	0005883a 	mov	r2,zero
8113147c:	00000506 	br	81131494 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81131480:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131484:	e0bfff17 	ldw	r2,-4(fp)
81131488:	00ffe344 	movi	r3,-115
8113148c:	10c00005 	stb	r3,0(r2)
             return (0);
81131490:	0005883a 	mov	r2,zero
    }
}
81131494:	e037883a 	mov	sp,fp
81131498:	dfc00117 	ldw	ra,4(sp)
8113149c:	df000017 	ldw	fp,0(sp)
811314a0:	dec00204 	addi	sp,sp,8
811314a4:	f800283a 	ret

811314a8 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
811314a8:	defffb04 	addi	sp,sp,-20
811314ac:	de00012e 	bgeu	sp,et,811314b4 <OSTmrRemainGet+0xc>
811314b0:	003b68fa 	trap	3
811314b4:	dfc00415 	stw	ra,16(sp)
811314b8:	df000315 	stw	fp,12(sp)
811314bc:	df000304 	addi	fp,sp,12
811314c0:	e13ffe15 	stw	r4,-8(fp)
811314c4:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
811314c8:	e0bfff17 	ldw	r2,-4(fp)
811314cc:	1000021e 	bne	r2,zero,811314d8 <OSTmrRemainGet+0x30>
        return (0);
811314d0:	0005883a 	mov	r2,zero
811314d4:	00005d06 	br	8113164c <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
811314d8:	e0bffe17 	ldw	r2,-8(fp)
811314dc:	1000051e 	bne	r2,zero,811314f4 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
811314e0:	e0bfff17 	ldw	r2,-4(fp)
811314e4:	00ffe284 	movi	r3,-118
811314e8:	10c00005 	stb	r3,0(r2)
        return (0);
811314ec:	0005883a 	mov	r2,zero
811314f0:	00005606 	br	8113164c <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811314f4:	e0bffe17 	ldw	r2,-8(fp)
811314f8:	10800003 	ldbu	r2,0(r2)
811314fc:	10803fcc 	andi	r2,r2,255
81131500:	10801920 	cmpeqi	r2,r2,100
81131504:	1000051e 	bne	r2,zero,8113151c <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131508:	e0bfff17 	ldw	r2,-4(fp)
8113150c:	00ffe244 	movi	r3,-119
81131510:	10c00005 	stb	r3,0(r2)
        return (0);
81131514:	0005883a 	mov	r2,zero
81131518:	00004c06 	br	8113164c <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8113151c:	d0a08303 	ldbu	r2,-32244(gp)
81131520:	10803fcc 	andi	r2,r2,255
81131524:	10000526 	beq	r2,zero,8113153c <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81131528:	e0bfff17 	ldw	r2,-4(fp)
8113152c:	00ffe2c4 	movi	r3,-117
81131530:	10c00005 	stb	r3,0(r2)
        return (0);
81131534:	0005883a 	mov	r2,zero
81131538:	00004406 	br	8113164c <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
8113153c:	113201c0 	call	8113201c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81131540:	e0bffe17 	ldw	r2,-8(fp)
81131544:	10800c43 	ldbu	r2,49(r2)
81131548:	10803fcc 	andi	r2,r2,255
8113154c:	10c00060 	cmpeqi	r3,r2,1
81131550:	1800121e 	bne	r3,zero,8113159c <OSTmrRemainGet+0xf4>
81131554:	10c00088 	cmpgei	r3,r2,2
81131558:	1800021e 	bne	r3,zero,81131564 <OSTmrRemainGet+0xbc>
8113155c:	10003026 	beq	r2,zero,81131620 <OSTmrRemainGet+0x178>
81131560:	00003506 	br	81131638 <OSTmrRemainGet+0x190>
81131564:	10c000a0 	cmpeqi	r3,r2,2
81131568:	1800281e 	bne	r3,zero,8113160c <OSTmrRemainGet+0x164>
8113156c:	108000e0 	cmpeqi	r2,r2,3
81131570:	10003126 	beq	r2,zero,81131638 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
81131574:	e0bffe17 	ldw	r2,-8(fp)
81131578:	10c00517 	ldw	r3,20(r2)
8113157c:	d0a08517 	ldw	r2,-32236(gp)
81131580:	1885c83a 	sub	r2,r3,r2
81131584:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
81131588:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
8113158c:	e0bfff17 	ldw	r2,-4(fp)
81131590:	10000005 	stb	zero,0(r2)
             return (remain);
81131594:	e0bffd17 	ldw	r2,-12(fp)
81131598:	00002c06 	br	8113164c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
8113159c:	e0bffe17 	ldw	r2,-8(fp)
811315a0:	10800c03 	ldbu	r2,48(r2)
811315a4:	10803fcc 	andi	r2,r2,255
811315a8:	108000a0 	cmpeqi	r2,r2,2
811315ac:	10000e26 	beq	r2,zero,811315e8 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
811315b0:	e0bffe17 	ldw	r2,-8(fp)
811315b4:	10800617 	ldw	r2,24(r2)
811315b8:	1000041e 	bne	r2,zero,811315cc <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
811315bc:	e0bffe17 	ldw	r2,-8(fp)
811315c0:	10800717 	ldw	r2,28(r2)
811315c4:	e0bffd15 	stw	r2,-12(fp)
811315c8:	00000306 	br	811315d8 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
811315cc:	e0bffe17 	ldw	r2,-8(fp)
811315d0:	10800617 	ldw	r2,24(r2)
811315d4:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
811315d8:	11320600 	call	81132060 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
811315dc:	e0bfff17 	ldw	r2,-4(fp)
811315e0:	10000005 	stb	zero,0(r2)
                      break;
811315e4:	00000706 	br	81131604 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
811315e8:	e0bffe17 	ldw	r2,-8(fp)
811315ec:	10800617 	ldw	r2,24(r2)
811315f0:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
811315f4:	11320600 	call	81132060 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
811315f8:	e0bfff17 	ldw	r2,-4(fp)
811315fc:	10000005 	stb	zero,0(r2)
                      break;
81131600:	0001883a 	nop
             }
             return (remain);
81131604:	e0bffd17 	ldw	r2,-12(fp)
81131608:	00001006 	br	8113164c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
8113160c:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	10000005 	stb	zero,0(r2)
             return (0);
81131618:	0005883a 	mov	r2,zero
8113161c:	00000b06 	br	8113164c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
81131620:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131624:	e0bfff17 	ldw	r2,-4(fp)
81131628:	00ffe1c4 	movi	r3,-121
8113162c:	10c00005 	stb	r3,0(r2)
             return (0);
81131630:	0005883a 	mov	r2,zero
81131634:	00000506 	br	8113164c <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
81131638:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8113163c:	e0bfff17 	ldw	r2,-4(fp)
81131640:	00ffe344 	movi	r3,-115
81131644:	10c00005 	stb	r3,0(r2)
             return (0);
81131648:	0005883a 	mov	r2,zero
    }
}
8113164c:	e037883a 	mov	sp,fp
81131650:	dfc00117 	ldw	ra,4(sp)
81131654:	df000017 	ldw	fp,0(sp)
81131658:	dec00204 	addi	sp,sp,8
8113165c:	f800283a 	ret

81131660 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
81131660:	defffb04 	addi	sp,sp,-20
81131664:	de00012e 	bgeu	sp,et,8113166c <OSTmrStateGet+0xc>
81131668:	003b68fa 	trap	3
8113166c:	dfc00415 	stw	ra,16(sp)
81131670:	df000315 	stw	fp,12(sp)
81131674:	df000304 	addi	fp,sp,12
81131678:	e13ffe15 	stw	r4,-8(fp)
8113167c:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81131680:	e0bfff17 	ldw	r2,-4(fp)
81131684:	1000021e 	bne	r2,zero,81131690 <OSTmrStateGet+0x30>
        return (0);
81131688:	0005883a 	mov	r2,zero
8113168c:	00002a06 	br	81131738 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
81131690:	e0bffe17 	ldw	r2,-8(fp)
81131694:	1000051e 	bne	r2,zero,811316ac <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131698:	e0bfff17 	ldw	r2,-4(fp)
8113169c:	00ffe284 	movi	r3,-118
811316a0:	10c00005 	stb	r3,0(r2)
        return (0);
811316a4:	0005883a 	mov	r2,zero
811316a8:	00002306 	br	81131738 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811316ac:	e0bffe17 	ldw	r2,-8(fp)
811316b0:	10800003 	ldbu	r2,0(r2)
811316b4:	10803fcc 	andi	r2,r2,255
811316b8:	10801920 	cmpeqi	r2,r2,100
811316bc:	1000051e 	bne	r2,zero,811316d4 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811316c0:	e0bfff17 	ldw	r2,-4(fp)
811316c4:	00ffe244 	movi	r3,-119
811316c8:	10c00005 	stb	r3,0(r2)
        return (0);
811316cc:	0005883a 	mov	r2,zero
811316d0:	00001906 	br	81131738 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811316d4:	d0a08303 	ldbu	r2,-32244(gp)
811316d8:	10803fcc 	andi	r2,r2,255
811316dc:	10000526 	beq	r2,zero,811316f4 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
811316e0:	e0bfff17 	ldw	r2,-4(fp)
811316e4:	00ffe2c4 	movi	r3,-117
811316e8:	10c00005 	stb	r3,0(r2)
        return (0);
811316ec:	0005883a 	mov	r2,zero
811316f0:	00001106 	br	81131738 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
811316f4:	113201c0 	call	8113201c <OSTmr_Lock>
    state = ptmr->OSTmrState;
811316f8:	e0bffe17 	ldw	r2,-8(fp)
811316fc:	10800c43 	ldbu	r2,49(r2)
81131700:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
81131704:	e0bffd03 	ldbu	r2,-12(fp)
81131708:	1005883a 	mov	r2,r2
8113170c:	10800128 	cmpgeui	r2,r2,4
81131710:	1000031e 	bne	r2,zero,81131720 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
81131714:	e0bfff17 	ldw	r2,-4(fp)
81131718:	10000005 	stb	zero,0(r2)
             break;
8113171c:	00000406 	br	81131730 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
81131720:	e0bfff17 	ldw	r2,-4(fp)
81131724:	00ffe344 	movi	r3,-115
81131728:	10c00005 	stb	r3,0(r2)
             break;
8113172c:	0001883a 	nop
    }
    OSTmr_Unlock();
81131730:	11320600 	call	81132060 <OSTmr_Unlock>
    return (state);
81131734:	e0bffd03 	ldbu	r2,-12(fp)
}
81131738:	e037883a 	mov	sp,fp
8113173c:	dfc00117 	ldw	ra,4(sp)
81131740:	df000017 	ldw	fp,0(sp)
81131744:	dec00204 	addi	sp,sp,8
81131748:	f800283a 	ret

8113174c <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
8113174c:	defffc04 	addi	sp,sp,-16
81131750:	de00012e 	bgeu	sp,et,81131758 <OSTmrStart+0xc>
81131754:	003b68fa 	trap	3
81131758:	dfc00315 	stw	ra,12(sp)
8113175c:	df000215 	stw	fp,8(sp)
81131760:	df000204 	addi	fp,sp,8
81131764:	e13ffe15 	stw	r4,-8(fp)
81131768:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8113176c:	e0bfff17 	ldw	r2,-4(fp)
81131770:	1000021e 	bne	r2,zero,8113177c <OSTmrStart+0x30>
        return (OS_FALSE);
81131774:	0005883a 	mov	r2,zero
81131778:	00004106 	br	81131880 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
8113177c:	e0bffe17 	ldw	r2,-8(fp)
81131780:	1000051e 	bne	r2,zero,81131798 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81131784:	e0bfff17 	ldw	r2,-4(fp)
81131788:	00ffe284 	movi	r3,-118
8113178c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81131790:	0005883a 	mov	r2,zero
81131794:	00003a06 	br	81131880 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81131798:	e0bffe17 	ldw	r2,-8(fp)
8113179c:	10800003 	ldbu	r2,0(r2)
811317a0:	10803fcc 	andi	r2,r2,255
811317a4:	10801920 	cmpeqi	r2,r2,100
811317a8:	1000051e 	bne	r2,zero,811317c0 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811317ac:	e0bfff17 	ldw	r2,-4(fp)
811317b0:	00ffe244 	movi	r3,-119
811317b4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811317b8:	0005883a 	mov	r2,zero
811317bc:	00003006 	br	81131880 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
811317c0:	d0a08303 	ldbu	r2,-32244(gp)
811317c4:	10803fcc 	andi	r2,r2,255
811317c8:	10000526 	beq	r2,zero,811317e0 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
811317cc:	e0bfff17 	ldw	r2,-4(fp)
811317d0:	00ffe2c4 	movi	r3,-117
811317d4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811317d8:	0005883a 	mov	r2,zero
811317dc:	00002806 	br	81131880 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
811317e0:	113201c0 	call	8113201c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811317e4:	e0bffe17 	ldw	r2,-8(fp)
811317e8:	10800c43 	ldbu	r2,49(r2)
811317ec:	10803fcc 	andi	r2,r2,255
811317f0:	10c000c8 	cmpgei	r3,r2,3
811317f4:	1800031e 	bne	r3,zero,81131804 <OSTmrStart+0xb8>
811317f8:	00800e16 	blt	zero,r2,81131834 <OSTmrStart+0xe8>
811317fc:	10001526 	beq	r2,zero,81131854 <OSTmrStart+0x108>
81131800:	00001a06 	br	8113186c <OSTmrStart+0x120>
81131804:	108000e0 	cmpeqi	r2,r2,3
81131808:	10001826 	beq	r2,zero,8113186c <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
8113180c:	e13ffe17 	ldw	r4,-8(fp)
81131810:	1131f200 	call	81131f20 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81131814:	000b883a 	mov	r5,zero
81131818:	e13ffe17 	ldw	r4,-8(fp)
8113181c:	1131dd00 	call	81131dd0 <OSTmr_Link>
             OSTmr_Unlock();
81131820:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131824:	e0bfff17 	ldw	r2,-4(fp)
81131828:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8113182c:	00800044 	movi	r2,1
81131830:	00001306 	br	81131880 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81131834:	000b883a 	mov	r5,zero
81131838:	e13ffe17 	ldw	r4,-8(fp)
8113183c:	1131dd00 	call	81131dd0 <OSTmr_Link>
             OSTmr_Unlock();
81131840:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81131844:	e0bfff17 	ldw	r2,-4(fp)
81131848:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8113184c:	00800044 	movi	r2,1
81131850:	00000b06 	br	81131880 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
81131854:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131858:	e0bfff17 	ldw	r2,-4(fp)
8113185c:	00ffe1c4 	movi	r3,-121
81131860:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131864:	0005883a 	mov	r2,zero
81131868:	00000506 	br	81131880 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
8113186c:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131870:	e0bfff17 	ldw	r2,-4(fp)
81131874:	00ffe344 	movi	r3,-115
81131878:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8113187c:	0005883a 	mov	r2,zero
    }
}
81131880:	e037883a 	mov	sp,fp
81131884:	dfc00117 	ldw	ra,4(sp)
81131888:	df000017 	ldw	fp,0(sp)
8113188c:	dec00204 	addi	sp,sp,8
81131890:	f800283a 	ret

81131894 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
81131894:	defff904 	addi	sp,sp,-28
81131898:	de00012e 	bgeu	sp,et,811318a0 <OSTmrStop+0xc>
8113189c:	003b68fa 	trap	3
811318a0:	dfc00615 	stw	ra,24(sp)
811318a4:	df000515 	stw	fp,20(sp)
811318a8:	df000504 	addi	fp,sp,20
811318ac:	e13ffc15 	stw	r4,-16(fp)
811318b0:	2805883a 	mov	r2,r5
811318b4:	e1bffe15 	stw	r6,-8(fp)
811318b8:	e1ffff15 	stw	r7,-4(fp)
811318bc:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
811318c0:	e0bfff17 	ldw	r2,-4(fp)
811318c4:	1000021e 	bne	r2,zero,811318d0 <OSTmrStop+0x3c>
        return (OS_FALSE);
811318c8:	0005883a 	mov	r2,zero
811318cc:	00006606 	br	81131a68 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
811318d0:	e0bffc17 	ldw	r2,-16(fp)
811318d4:	1000051e 	bne	r2,zero,811318ec <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
811318d8:	e0bfff17 	ldw	r2,-4(fp)
811318dc:	00ffe284 	movi	r3,-118
811318e0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811318e4:	0005883a 	mov	r2,zero
811318e8:	00005f06 	br	81131a68 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
811318ec:	e0bffc17 	ldw	r2,-16(fp)
811318f0:	10800003 	ldbu	r2,0(r2)
811318f4:	10803fcc 	andi	r2,r2,255
811318f8:	10801920 	cmpeqi	r2,r2,100
811318fc:	1000051e 	bne	r2,zero,81131914 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81131900:	e0bfff17 	ldw	r2,-4(fp)
81131904:	00ffe244 	movi	r3,-119
81131908:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113190c:	0005883a 	mov	r2,zero
81131910:	00005506 	br	81131a68 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
81131914:	d0a08303 	ldbu	r2,-32244(gp)
81131918:	10803fcc 	andi	r2,r2,255
8113191c:	10000526 	beq	r2,zero,81131934 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
81131920:	e0bfff17 	ldw	r2,-4(fp)
81131924:	00ffe2c4 	movi	r3,-117
81131928:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113192c:	0005883a 	mov	r2,zero
81131930:	00004d06 	br	81131a68 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
81131934:	113201c0 	call	8113201c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81131938:	e0bffc17 	ldw	r2,-16(fp)
8113193c:	10800c43 	ldbu	r2,49(r2)
81131940:	10803fcc 	andi	r2,r2,255
81131944:	10c000c8 	cmpgei	r3,r2,3
81131948:	1800031e 	bne	r3,zero,81131958 <OSTmrStop+0xc4>
8113194c:	00803516 	blt	zero,r2,81131a24 <OSTmrStop+0x190>
81131950:	10003a26 	beq	r2,zero,81131a3c <OSTmrStop+0x1a8>
81131954:	00003f06 	br	81131a54 <OSTmrStop+0x1c0>
81131958:	108000e0 	cmpeqi	r2,r2,3
8113195c:	10003d26 	beq	r2,zero,81131a54 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
81131960:	e13ffc17 	ldw	r4,-16(fp)
81131964:	1131f200 	call	81131f20 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
81131968:	e0bfff17 	ldw	r2,-4(fp)
8113196c:	10000005 	stb	zero,0(r2)
             switch (opt) {
81131970:	e0bffd03 	ldbu	r2,-12(fp)
81131974:	10c000e0 	cmpeqi	r3,r2,3
81131978:	1800041e 	bne	r3,zero,8113198c <OSTmrStop+0xf8>
8113197c:	10c00120 	cmpeqi	r3,r2,4
81131980:	1800121e 	bne	r3,zero,811319cc <OSTmrStop+0x138>
81131984:	10002326 	beq	r2,zero,81131a14 <OSTmrStop+0x180>
81131988:	00001e06 	br	81131a04 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8113198c:	e0bffc17 	ldw	r2,-16(fp)
81131990:	10800117 	ldw	r2,4(r2)
81131994:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81131998:	e0bffb17 	ldw	r2,-20(fp)
8113199c:	10000726 	beq	r2,zero,811319bc <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
811319a0:	e0bffc17 	ldw	r2,-16(fp)
811319a4:	10c00217 	ldw	r3,8(r2)
811319a8:	e0bffb17 	ldw	r2,-20(fp)
811319ac:	180b883a 	mov	r5,r3
811319b0:	e13ffc17 	ldw	r4,-16(fp)
811319b4:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
811319b8:	00001706 	br	81131a18 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
811319bc:	e0bfff17 	ldw	r2,-4(fp)
811319c0:	00ffe3c4 	movi	r3,-113
811319c4:	10c00005 	stb	r3,0(r2)
                      }
                      break;
811319c8:	00001306 	br	81131a18 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
811319cc:	e0bffc17 	ldw	r2,-16(fp)
811319d0:	10800117 	ldw	r2,4(r2)
811319d4:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
811319d8:	e0bffb17 	ldw	r2,-20(fp)
811319dc:	10000526 	beq	r2,zero,811319f4 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
811319e0:	e0bffb17 	ldw	r2,-20(fp)
811319e4:	e17ffe17 	ldw	r5,-8(fp)
811319e8:	e13ffc17 	ldw	r4,-16(fp)
811319ec:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
811319f0:	00000906 	br	81131a18 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
811319f4:	e0bfff17 	ldw	r2,-4(fp)
811319f8:	00ffe3c4 	movi	r3,-113
811319fc:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81131a00:	00000506 	br	81131a18 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
81131a04:	e0bfff17 	ldw	r2,-4(fp)
81131a08:	00ffe104 	movi	r3,-124
81131a0c:	10c00005 	stb	r3,0(r2)
                     break;
81131a10:	00000106 	br	81131a18 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
81131a14:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
81131a18:	11320600 	call	81132060 <OSTmr_Unlock>
             return (OS_TRUE);
81131a1c:	00800044 	movi	r2,1
81131a20:	00001106 	br	81131a68 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
81131a24:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
81131a28:	e0bfff17 	ldw	r2,-4(fp)
81131a2c:	00ffe384 	movi	r3,-114
81131a30:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
81131a34:	00800044 	movi	r2,1
81131a38:	00000b06 	br	81131a68 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
81131a3c:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81131a40:	e0bfff17 	ldw	r2,-4(fp)
81131a44:	00ffe1c4 	movi	r3,-121
81131a48:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131a4c:	0005883a 	mov	r2,zero
81131a50:	00000506 	br	81131a68 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
81131a54:	11320600 	call	81132060 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81131a58:	e0bfff17 	ldw	r2,-4(fp)
81131a5c:	00ffe344 	movi	r3,-115
81131a60:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81131a64:	0005883a 	mov	r2,zero
    }
}
81131a68:	e037883a 	mov	sp,fp
81131a6c:	dfc00117 	ldw	ra,4(sp)
81131a70:	df000017 	ldw	fp,0(sp)
81131a74:	dec00204 	addi	sp,sp,8
81131a78:	f800283a 	ret

81131a7c <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
81131a7c:	defffd04 	addi	sp,sp,-12
81131a80:	de00012e 	bgeu	sp,et,81131a88 <OSTmrSignal+0xc>
81131a84:	003b68fa 	trap	3
81131a88:	dfc00215 	stw	ra,8(sp)
81131a8c:	df000115 	stw	fp,4(sp)
81131a90:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
81131a94:	d0a07217 	ldw	r2,-32312(gp)
81131a98:	1009883a 	mov	r4,r2
81131a9c:	112f0480 	call	8112f048 <OSSemPost>
81131aa0:	e0bfff05 	stb	r2,-4(fp)
    return (err);
81131aa4:	e0bfff03 	ldbu	r2,-4(fp)
}
81131aa8:	e037883a 	mov	sp,fp
81131aac:	dfc00117 	ldw	ra,4(sp)
81131ab0:	df000017 	ldw	fp,0(sp)
81131ab4:	dec00204 	addi	sp,sp,8
81131ab8:	f800283a 	ret

81131abc <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
81131abc:	defffe04 	addi	sp,sp,-8
81131ac0:	de00012e 	bgeu	sp,et,81131ac8 <OSTmr_Alloc+0xc>
81131ac4:	003b68fa 	trap	3
81131ac8:	df000115 	stw	fp,4(sp)
81131acc:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81131ad0:	d0a07017 	ldw	r2,-32320(gp)
81131ad4:	1000021e 	bne	r2,zero,81131ae0 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81131ad8:	0005883a 	mov	r2,zero
81131adc:	00001006 	br	81131b20 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
81131ae0:	d0a07017 	ldw	r2,-32320(gp)
81131ae4:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
81131ae8:	e0bfff17 	ldw	r2,-4(fp)
81131aec:	10800317 	ldw	r2,12(r2)
81131af0:	d0a07015 	stw	r2,-32320(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
81131af4:	e0bfff17 	ldw	r2,-4(fp)
81131af8:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
81131afc:	e0bfff17 	ldw	r2,-4(fp)
81131b00:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
81131b04:	d0a0750b 	ldhu	r2,-32300(gp)
81131b08:	10800044 	addi	r2,r2,1
81131b0c:	d0a0750d 	sth	r2,-32300(gp)
    OSTmrFree--;
81131b10:	d0a0790b 	ldhu	r2,-32284(gp)
81131b14:	10bfffc4 	addi	r2,r2,-1
81131b18:	d0a0790d 	sth	r2,-32284(gp)
    return (ptmr);
81131b1c:	e0bfff17 	ldw	r2,-4(fp)
}
81131b20:	e037883a 	mov	sp,fp
81131b24:	df000017 	ldw	fp,0(sp)
81131b28:	dec00104 	addi	sp,sp,4
81131b2c:	f800283a 	ret

81131b30 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81131b30:	defffe04 	addi	sp,sp,-8
81131b34:	de00012e 	bgeu	sp,et,81131b3c <OSTmr_Free+0xc>
81131b38:	003b68fa 	trap	3
81131b3c:	df000115 	stw	fp,4(sp)
81131b40:	df000104 	addi	fp,sp,4
81131b44:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81131b48:	e0bfff17 	ldw	r2,-4(fp)
81131b4c:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81131b50:	e0bfff17 	ldw	r2,-4(fp)
81131b54:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
81131b58:	e0bfff17 	ldw	r2,-4(fp)
81131b5c:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81131b60:	e0bfff17 	ldw	r2,-4(fp)
81131b64:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
81131b68:	e0bfff17 	ldw	r2,-4(fp)
81131b6c:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81131b70:	e0bfff17 	ldw	r2,-4(fp)
81131b74:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
81131b78:	e0bfff17 	ldw	r2,-4(fp)
81131b7c:	00c00fc4 	movi	r3,63
81131b80:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81131b84:	e0bfff17 	ldw	r2,-4(fp)
81131b88:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
81131b8c:	e0bfff17 	ldw	r2,-4(fp)
81131b90:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81131b94:	d0e07017 	ldw	r3,-32320(gp)
81131b98:	e0bfff17 	ldw	r2,-4(fp)
81131b9c:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81131ba0:	e0bfff17 	ldw	r2,-4(fp)
81131ba4:	d0a07015 	stw	r2,-32320(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
81131ba8:	d0a0750b 	ldhu	r2,-32300(gp)
81131bac:	10bfffc4 	addi	r2,r2,-1
81131bb0:	d0a0750d 	sth	r2,-32300(gp)
    OSTmrFree++;
81131bb4:	d0a0790b 	ldhu	r2,-32284(gp)
81131bb8:	10800044 	addi	r2,r2,1
81131bbc:	d0a0790d 	sth	r2,-32284(gp)
}
81131bc0:	0001883a 	nop
81131bc4:	e037883a 	mov	sp,fp
81131bc8:	df000017 	ldw	fp,0(sp)
81131bcc:	dec00104 	addi	sp,sp,4
81131bd0:	f800283a 	ret

81131bd4 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
81131bd4:	defffa04 	addi	sp,sp,-24
81131bd8:	de00012e 	bgeu	sp,et,81131be0 <OSTmr_Init+0xc>
81131bdc:	003b68fa 	trap	3
81131be0:	dfc00515 	stw	ra,20(sp)
81131be4:	df000415 	stw	fp,16(sp)
81131be8:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
81131bec:	01406804 	movi	r5,416
81131bf0:	01204574 	movhi	r4,33045
81131bf4:	213f4104 	addi	r4,r4,-764
81131bf8:	1129d440 	call	81129d44 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
81131bfc:	01400404 	movi	r5,16
81131c00:	01204574 	movhi	r4,33045
81131c04:	213e6104 	addi	r4,r4,-1660
81131c08:	1129d440 	call	81129d44 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
81131c0c:	00a04574 	movhi	r2,33045
81131c10:	10bf4104 	addi	r2,r2,-764
81131c14:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
81131c18:	00a04574 	movhi	r2,33045
81131c1c:	10bf4e04 	addi	r2,r2,-712
81131c20:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81131c24:	e03ffc0d 	sth	zero,-16(fp)
81131c28:	00001606 	br	81131c84 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81131c2c:	e0bffd17 	ldw	r2,-12(fp)
81131c30:	00c01904 	movi	r3,100
81131c34:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81131c38:	e0bffd17 	ldw	r2,-12(fp)
81131c3c:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81131c40:	e0bffd17 	ldw	r2,-12(fp)
81131c44:	e0fffe17 	ldw	r3,-8(fp)
81131c48:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81131c4c:	e0bffd17 	ldw	r2,-12(fp)
81131c50:	00c00fc4 	movi	r3,63
81131c54:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81131c58:	e0bffd17 	ldw	r2,-12(fp)
81131c5c:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81131c60:	e0bffd17 	ldw	r2,-12(fp)
81131c64:	10800d04 	addi	r2,r2,52
81131c68:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
81131c6c:	e0bffe17 	ldw	r2,-8(fp)
81131c70:	10800d04 	addi	r2,r2,52
81131c74:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81131c78:	e0bffc0b 	ldhu	r2,-16(fp)
81131c7c:	10800044 	addi	r2,r2,1
81131c80:	e0bffc0d 	sth	r2,-16(fp)
81131c84:	e0bffc0b 	ldhu	r2,-16(fp)
81131c88:	108001f0 	cmpltui	r2,r2,7
81131c8c:	103fe71e 	bne	r2,zero,81131c2c <__reset+0xfb111c2c>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81131c90:	e0bffd17 	ldw	r2,-12(fp)
81131c94:	00c01904 	movi	r3,100
81131c98:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
81131c9c:	e0bffd17 	ldw	r2,-12(fp)
81131ca0:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81131ca4:	e0bffd17 	ldw	r2,-12(fp)
81131ca8:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
81131cac:	e0bffd17 	ldw	r2,-12(fp)
81131cb0:	00c00fc4 	movi	r3,63
81131cb4:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81131cb8:	e0bffd17 	ldw	r2,-12(fp)
81131cbc:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81131cc0:	d0208515 	stw	zero,-32236(gp)
    OSTmrUsed           = 0;
81131cc4:	d020750d 	sth	zero,-32300(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81131cc8:	00800204 	movi	r2,8
81131ccc:	d0a0790d 	sth	r2,-32284(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
81131cd0:	00a04574 	movhi	r2,33045
81131cd4:	10bf4104 	addi	r2,r2,-764
81131cd8:	d0a07015 	stw	r2,-32320(gp)
    OSTmrSem            = OSSemCreate(1);
81131cdc:	01000044 	movi	r4,1
81131ce0:	112e9980 	call	8112e998 <OSSemCreate>
81131ce4:	d0a08715 	stw	r2,-32228(gp)
    OSTmrSemSignal      = OSSemCreate(0);
81131ce8:	0009883a 	mov	r4,zero
81131cec:	112e9980 	call	8112e998 <OSSemCreate>
81131cf0:	d0a07215 	stw	r2,-32312(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
81131cf4:	d0a08717 	ldw	r2,-32228(gp)
81131cf8:	e0ffff04 	addi	r3,fp,-4
81131cfc:	180d883a 	mov	r6,r3
81131d00:	01604534 	movhi	r5,33044
81131d04:	297a4204 	addi	r5,r5,-5880
81131d08:	1009883a 	mov	r4,r2
81131d0c:	112851c0 	call	8112851c <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
81131d10:	d0a07217 	ldw	r2,-32312(gp)
81131d14:	e0ffff04 	addi	r3,fp,-4
81131d18:	180d883a 	mov	r6,r3
81131d1c:	01604534 	movhi	r5,33044
81131d20:	297a4704 	addi	r5,r5,-5860
81131d24:	1009883a 	mov	r4,r2
81131d28:	112851c0 	call	8112851c <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81131d2c:	1131d480 	call	81131d48 <OSTmr_InitTask>
}
81131d30:	0001883a 	nop
81131d34:	e037883a 	mov	sp,fp
81131d38:	dfc00117 	ldw	ra,4(sp)
81131d3c:	df000017 	ldw	fp,0(sp)
81131d40:	dec00204 	addi	sp,sp,8
81131d44:	f800283a 	ret

81131d48 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81131d48:	defff804 	addi	sp,sp,-32
81131d4c:	de00012e 	bgeu	sp,et,81131d54 <OSTmr_InitTask+0xc>
81131d50:	003b68fa 	trap	3
81131d54:	dfc00715 	stw	ra,28(sp)
81131d58:	df000615 	stw	fp,24(sp)
81131d5c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81131d60:	008000c4 	movi	r2,3
81131d64:	d8800415 	stw	r2,16(sp)
81131d68:	d8000315 	stw	zero,12(sp)
81131d6c:	00808004 	movi	r2,512
81131d70:	d8800215 	stw	r2,8(sp)
81131d74:	00a04574 	movhi	r2,33045
81131d78:	10852d04 	addi	r2,r2,5300
81131d7c:	d8800115 	stw	r2,4(sp)
81131d80:	00bfff54 	movui	r2,65533
81131d84:	d8800015 	stw	r2,0(sp)
81131d88:	01c00484 	movi	r7,18
81131d8c:	01a04574 	movhi	r6,33045
81131d90:	31872c04 	addi	r6,r6,7344
81131d94:	000b883a 	mov	r5,zero
81131d98:	012044f4 	movhi	r4,33043
81131d9c:	21082704 	addi	r4,r4,8348
81131da0:	112fa2c0 	call	8112fa2c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81131da4:	e1bfff04 	addi	r6,fp,-4
81131da8:	01604534 	movhi	r5,33044
81131dac:	297a4c04 	addi	r5,r5,-5840
81131db0:	01000484 	movi	r4,18
81131db4:	113025c0 	call	8113025c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
81131db8:	0001883a 	nop
81131dbc:	e037883a 	mov	sp,fp
81131dc0:	dfc00117 	ldw	ra,4(sp)
81131dc4:	df000017 	ldw	fp,0(sp)
81131dc8:	dec00204 	addi	sp,sp,8
81131dcc:	f800283a 	ret

81131dd0 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
81131dd0:	defffa04 	addi	sp,sp,-24
81131dd4:	de00012e 	bgeu	sp,et,81131ddc <OSTmr_Link+0xc>
81131dd8:	003b68fa 	trap	3
81131ddc:	df000515 	stw	fp,20(sp)
81131de0:	df000504 	addi	fp,sp,20
81131de4:	e13ffe15 	stw	r4,-8(fp)
81131de8:	2805883a 	mov	r2,r5
81131dec:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
81131df0:	e0bffe17 	ldw	r2,-8(fp)
81131df4:	00c000c4 	movi	r3,3
81131df8:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
81131dfc:	e0bfff03 	ldbu	r2,-4(fp)
81131e00:	10800058 	cmpnei	r2,r2,1
81131e04:	1000071e 	bne	r2,zero,81131e24 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81131e08:	e0bffe17 	ldw	r2,-8(fp)
81131e0c:	10c00717 	ldw	r3,28(r2)
81131e10:	d0a08517 	ldw	r2,-32236(gp)
81131e14:	1887883a 	add	r3,r3,r2
81131e18:	e0bffe17 	ldw	r2,-8(fp)
81131e1c:	10c00515 	stw	r3,20(r2)
81131e20:	00001006 	br	81131e64 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
81131e24:	e0bffe17 	ldw	r2,-8(fp)
81131e28:	10800617 	ldw	r2,24(r2)
81131e2c:	1000071e 	bne	r2,zero,81131e4c <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81131e30:	e0bffe17 	ldw	r2,-8(fp)
81131e34:	10c00717 	ldw	r3,28(r2)
81131e38:	d0a08517 	ldw	r2,-32236(gp)
81131e3c:	1887883a 	add	r3,r3,r2
81131e40:	e0bffe17 	ldw	r2,-8(fp)
81131e44:	10c00515 	stw	r3,20(r2)
81131e48:	00000606 	br	81131e64 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81131e4c:	e0bffe17 	ldw	r2,-8(fp)
81131e50:	10c00617 	ldw	r3,24(r2)
81131e54:	d0a08517 	ldw	r2,-32236(gp)
81131e58:	1887883a 	add	r3,r3,r2
81131e5c:	e0bffe17 	ldw	r2,-8(fp)
81131e60:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81131e64:	e0bffe17 	ldw	r2,-8(fp)
81131e68:	10800517 	ldw	r2,20(r2)
81131e6c:	1080004c 	andi	r2,r2,1
81131e70:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81131e74:	e0bffb0b 	ldhu	r2,-20(fp)
81131e78:	100690fa 	slli	r3,r2,3
81131e7c:	00a04574 	movhi	r2,33045
81131e80:	10be6104 	addi	r2,r2,-1660
81131e84:	1885883a 	add	r2,r3,r2
81131e88:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
81131e8c:	e0bffc17 	ldw	r2,-16(fp)
81131e90:	10800017 	ldw	r2,0(r2)
81131e94:	1000091e 	bne	r2,zero,81131ebc <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
81131e98:	e0bffc17 	ldw	r2,-16(fp)
81131e9c:	e0fffe17 	ldw	r3,-8(fp)
81131ea0:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
81131ea4:	e0bffe17 	ldw	r2,-8(fp)
81131ea8:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
81131eac:	e0bffc17 	ldw	r2,-16(fp)
81131eb0:	00c00044 	movi	r3,1
81131eb4:	10c0010d 	sth	r3,4(r2)
81131eb8:	00001206 	br	81131f04 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
81131ebc:	e0bffc17 	ldw	r2,-16(fp)
81131ec0:	10800017 	ldw	r2,0(r2)
81131ec4:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
81131ec8:	e0bffc17 	ldw	r2,-16(fp)
81131ecc:	e0fffe17 	ldw	r3,-8(fp)
81131ed0:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
81131ed4:	e0bffe17 	ldw	r2,-8(fp)
81131ed8:	e0fffd17 	ldw	r3,-12(fp)
81131edc:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
81131ee0:	e0bffd17 	ldw	r2,-12(fp)
81131ee4:	e0fffe17 	ldw	r3,-8(fp)
81131ee8:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
81131eec:	e0bffc17 	ldw	r2,-16(fp)
81131ef0:	1080010b 	ldhu	r2,4(r2)
81131ef4:	10800044 	addi	r2,r2,1
81131ef8:	1007883a 	mov	r3,r2
81131efc:	e0bffc17 	ldw	r2,-16(fp)
81131f00:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
81131f04:	e0bffe17 	ldw	r2,-8(fp)
81131f08:	10000415 	stw	zero,16(r2)
}
81131f0c:	0001883a 	nop
81131f10:	e037883a 	mov	sp,fp
81131f14:	df000017 	ldw	fp,0(sp)
81131f18:	dec00104 	addi	sp,sp,4
81131f1c:	f800283a 	ret

81131f20 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
81131f20:	defffa04 	addi	sp,sp,-24
81131f24:	de00012e 	bgeu	sp,et,81131f2c <OSTmr_Unlink+0xc>
81131f28:	003b68fa 	trap	3
81131f2c:	df000515 	stw	fp,20(sp)
81131f30:	df000504 	addi	fp,sp,20
81131f34:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81131f38:	e0bfff17 	ldw	r2,-4(fp)
81131f3c:	10800517 	ldw	r2,20(r2)
81131f40:	1080004c 	andi	r2,r2,1
81131f44:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81131f48:	e0bffb0b 	ldhu	r2,-20(fp)
81131f4c:	100690fa 	slli	r3,r2,3
81131f50:	00a04574 	movhi	r2,33045
81131f54:	10be6104 	addi	r2,r2,-1660
81131f58:	1885883a 	add	r2,r3,r2
81131f5c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81131f60:	e0bffc17 	ldw	r2,-16(fp)
81131f64:	10c00017 	ldw	r3,0(r2)
81131f68:	e0bfff17 	ldw	r2,-4(fp)
81131f6c:	18800b1e 	bne	r3,r2,81131f9c <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81131f70:	e0bfff17 	ldw	r2,-4(fp)
81131f74:	10800317 	ldw	r2,12(r2)
81131f78:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
81131f7c:	e0bffc17 	ldw	r2,-16(fp)
81131f80:	e0fffd17 	ldw	r3,-12(fp)
81131f84:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
81131f88:	e0bffd17 	ldw	r2,-12(fp)
81131f8c:	10001126 	beq	r2,zero,81131fd4 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81131f90:	e0bffd17 	ldw	r2,-12(fp)
81131f94:	10000415 	stw	zero,16(r2)
81131f98:	00000e06 	br	81131fd4 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
81131f9c:	e0bfff17 	ldw	r2,-4(fp)
81131fa0:	10800417 	ldw	r2,16(r2)
81131fa4:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
81131fa8:	e0bfff17 	ldw	r2,-4(fp)
81131fac:	10800317 	ldw	r2,12(r2)
81131fb0:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
81131fb4:	e0bffd17 	ldw	r2,-12(fp)
81131fb8:	e0fffe17 	ldw	r3,-8(fp)
81131fbc:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81131fc0:	e0bffe17 	ldw	r2,-8(fp)
81131fc4:	10000326 	beq	r2,zero,81131fd4 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
81131fc8:	e0bffe17 	ldw	r2,-8(fp)
81131fcc:	e0fffd17 	ldw	r3,-12(fp)
81131fd0:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
81131fd4:	e0bfff17 	ldw	r2,-4(fp)
81131fd8:	00c00044 	movi	r3,1
81131fdc:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
81131fe0:	e0bfff17 	ldw	r2,-4(fp)
81131fe4:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
81131fe8:	e0bfff17 	ldw	r2,-4(fp)
81131fec:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
81131ff0:	e0bffc17 	ldw	r2,-16(fp)
81131ff4:	1080010b 	ldhu	r2,4(r2)
81131ff8:	10bfffc4 	addi	r2,r2,-1
81131ffc:	1007883a 	mov	r3,r2
81132000:	e0bffc17 	ldw	r2,-16(fp)
81132004:	10c0010d 	sth	r3,4(r2)
}
81132008:	0001883a 	nop
8113200c:	e037883a 	mov	sp,fp
81132010:	df000017 	ldw	fp,0(sp)
81132014:	dec00104 	addi	sp,sp,4
81132018:	f800283a 	ret

8113201c <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
8113201c:	defffd04 	addi	sp,sp,-12
81132020:	de00012e 	bgeu	sp,et,81132028 <OSTmr_Lock+0xc>
81132024:	003b68fa 	trap	3
81132028:	dfc00215 	stw	ra,8(sp)
8113202c:	df000115 	stw	fp,4(sp)
81132030:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
81132034:	d0a08717 	ldw	r2,-32228(gp)
81132038:	e1bfff04 	addi	r6,fp,-4
8113203c:	000b883a 	mov	r5,zero
81132040:	1009883a 	mov	r4,r2
81132044:	112ecc00 	call	8112ecc0 <OSSemPend>
    (void)err;
}
81132048:	0001883a 	nop
8113204c:	e037883a 	mov	sp,fp
81132050:	dfc00117 	ldw	ra,4(sp)
81132054:	df000017 	ldw	fp,0(sp)
81132058:	dec00204 	addi	sp,sp,8
8113205c:	f800283a 	ret

81132060 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81132060:	defffe04 	addi	sp,sp,-8
81132064:	de00012e 	bgeu	sp,et,8113206c <OSTmr_Unlock+0xc>
81132068:	003b68fa 	trap	3
8113206c:	dfc00115 	stw	ra,4(sp)
81132070:	df000015 	stw	fp,0(sp)
81132074:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
81132078:	d0a08717 	ldw	r2,-32228(gp)
8113207c:	1009883a 	mov	r4,r2
81132080:	112f0480 	call	8112f048 <OSSemPost>
}
81132084:	0001883a 	nop
81132088:	e037883a 	mov	sp,fp
8113208c:	dfc00117 	ldw	ra,4(sp)
81132090:	df000017 	ldw	fp,0(sp)
81132094:	dec00204 	addi	sp,sp,8
81132098:	f800283a 	ret

8113209c <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
8113209c:	defff704 	addi	sp,sp,-36
811320a0:	de00012e 	bgeu	sp,et,811320a8 <OSTmr_Task+0xc>
811320a4:	003b68fa 	trap	3
811320a8:	dfc00815 	stw	ra,32(sp)
811320ac:	df000715 	stw	fp,28(sp)
811320b0:	df000704 	addi	fp,sp,28
811320b4:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
811320b8:	d0a07217 	ldw	r2,-32312(gp)
811320bc:	e0fffe04 	addi	r3,fp,-8
811320c0:	180d883a 	mov	r6,r3
811320c4:	000b883a 	mov	r5,zero
811320c8:	1009883a 	mov	r4,r2
811320cc:	112ecc00 	call	8112ecc0 <OSSemPend>
        OSTmr_Lock();
811320d0:	113201c0 	call	8113201c <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
811320d4:	d0a08517 	ldw	r2,-32236(gp)
811320d8:	10800044 	addi	r2,r2,1
811320dc:	d0a08515 	stw	r2,-32236(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
811320e0:	d0a08517 	ldw	r2,-32236(gp)
811320e4:	1080004c 	andi	r2,r2,1
811320e8:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
811320ec:	e0bffa0b 	ldhu	r2,-24(fp)
811320f0:	100690fa 	slli	r3,r2,3
811320f4:	00a04574 	movhi	r2,33045
811320f8:	10be6104 	addi	r2,r2,-1660
811320fc:	1885883a 	add	r2,r3,r2
81132100:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
81132104:	e0bffb17 	ldw	r2,-20(fp)
81132108:	10800017 	ldw	r2,0(r2)
8113210c:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
81132110:	00002206 	br	8113219c <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
81132114:	e0bff917 	ldw	r2,-28(fp)
81132118:	10800317 	ldw	r2,12(r2)
8113211c:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
81132120:	e0bff917 	ldw	r2,-28(fp)
81132124:	10c00517 	ldw	r3,20(r2)
81132128:	d0a08517 	ldw	r2,-32236(gp)
8113212c:	1880191e 	bne	r3,r2,81132194 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
81132130:	e0bff917 	ldw	r2,-28(fp)
81132134:	10800117 	ldw	r2,4(r2)
81132138:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
8113213c:	e0bffd17 	ldw	r2,-12(fp)
81132140:	10000626 	beq	r2,zero,8113215c <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
81132144:	e0bff917 	ldw	r2,-28(fp)
81132148:	10c00217 	ldw	r3,8(r2)
8113214c:	e0bffd17 	ldw	r2,-12(fp)
81132150:	180b883a 	mov	r5,r3
81132154:	e13ff917 	ldw	r4,-28(fp)
81132158:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
8113215c:	e13ff917 	ldw	r4,-28(fp)
81132160:	1131f200 	call	81131f20 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81132164:	e0bff917 	ldw	r2,-28(fp)
81132168:	10800c03 	ldbu	r2,48(r2)
8113216c:	10803fcc 	andi	r2,r2,255
81132170:	10800098 	cmpnei	r2,r2,2
81132174:	1000041e 	bne	r2,zero,81132188 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
81132178:	01400044 	movi	r5,1
8113217c:	e13ff917 	ldw	r4,-28(fp)
81132180:	1131dd00 	call	81131dd0 <OSTmr_Link>
81132184:	00000306 	br	81132194 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
81132188:	e0bff917 	ldw	r2,-28(fp)
8113218c:	00c00084 	movi	r3,2
81132190:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81132194:	e0bffc17 	ldw	r2,-16(fp)
81132198:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
8113219c:	e0bff917 	ldw	r2,-28(fp)
811321a0:	103fdc1e 	bne	r2,zero,81132114 <__reset+0xfb112114>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
811321a4:	11320600 	call	81132060 <OSTmr_Unlock>
    }
811321a8:	003fc306 	br	811320b8 <__reset+0xfb1120b8>

811321ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
811321ac:	defffd04 	addi	sp,sp,-12
811321b0:	de00012e 	bgeu	sp,et,811321b8 <alt_dev_reg+0xc>
811321b4:	003b68fa 	trap	3
811321b8:	dfc00215 	stw	ra,8(sp)
811321bc:	df000115 	stw	fp,4(sp)
811321c0:	df000104 	addi	fp,sp,4
811321c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
811321c8:	d1600d04 	addi	r5,gp,-32716
811321cc:	e13fff17 	ldw	r4,-4(fp)
811321d0:	113a3b80 	call	8113a3b8 <alt_dev_llist_insert>
}
811321d4:	e037883a 	mov	sp,fp
811321d8:	dfc00117 	ldw	ra,4(sp)
811321dc:	df000017 	ldw	fp,0(sp)
811321e0:	dec00204 	addi	sp,sp,8
811321e4:	f800283a 	ret

811321e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811321e8:	defffd04 	addi	sp,sp,-12
811321ec:	de00012e 	bgeu	sp,et,811321f4 <alt_irq_init+0xc>
811321f0:	003b68fa 	trap	3
811321f4:	dfc00215 	stw	ra,8(sp)
811321f8:	df000115 	stw	fp,4(sp)
811321fc:	df000104 	addi	fp,sp,4
81132200:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81132204:	113ae500 	call	8113ae50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81132208:	00800044 	movi	r2,1
8113220c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81132210:	0001883a 	nop
81132214:	e037883a 	mov	sp,fp
81132218:	dfc00117 	ldw	ra,4(sp)
8113221c:	df000017 	ldw	fp,0(sp)
81132220:	dec00204 	addi	sp,sp,8
81132224:	f800283a 	ret

81132228 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81132228:	defffe04 	addi	sp,sp,-8
8113222c:	de00012e 	bgeu	sp,et,81132234 <alt_sys_init+0xc>
81132230:	003b68fa 	trap	3
81132234:	dfc00115 	stw	ra,4(sp)
81132238:	df000015 	stw	fp,0(sp)
8113223c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81132240:	01c0fa04 	movi	r7,1000
81132244:	01800304 	movi	r6,12
81132248:	000b883a 	mov	r5,zero
8113224c:	01200034 	movhi	r4,32768
81132250:	21022004 	addi	r4,r4,2176
81132254:	11374ec0 	call	811374ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81132258:	018002c4 	movi	r6,11
8113225c:	000b883a 	mov	r5,zero
81132260:	01204534 	movhi	r4,33044
81132264:	213d8e04 	addi	r4,r4,-2504
81132268:	113686c0 	call	8113686c <altera_avalon_jtag_uart_init>
8113226c:	01204534 	movhi	r4,33044
81132270:	213d8404 	addi	r4,r4,-2544
81132274:	11321ac0 	call	811321ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81132278:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8113227c:	018003c4 	movi	r6,15
81132280:	000b883a 	mov	r5,zero
81132284:	01204534 	movhi	r4,33044
81132288:	2101a904 	addi	r4,r4,1700
8113228c:	11376980 	call	81137698 <altera_avalon_uart_init>
81132290:	01204534 	movhi	r4,33044
81132294:	21019f04 	addi	r4,r4,1660
81132298:	11321ac0 	call	811321ac <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8113229c:	00a04534 	movhi	r2,33044
811322a0:	1081d304 	addi	r2,r2,1868
811322a4:	10c00717 	ldw	r3,28(r2)
811322a8:	00a04534 	movhi	r2,33044
811322ac:	1081d304 	addi	r2,r2,1868
811322b0:	10800817 	ldw	r2,32(r2)
811322b4:	100d883a 	mov	r6,r2
811322b8:	180b883a 	mov	r5,r3
811322bc:	01204534 	movhi	r4,33044
811322c0:	2101d304 	addi	r4,r4,1868
811322c4:	1139f200 	call	81139f20 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
811322c8:	00a04534 	movhi	r2,33044
811322cc:	1081ec04 	addi	r2,r2,1968
811322d0:	10c00717 	ldw	r3,28(r2)
811322d4:	00a04534 	movhi	r2,33044
811322d8:	1081ec04 	addi	r2,r2,1968
811322dc:	10800817 	ldw	r2,32(r2)
811322e0:	100d883a 	mov	r6,r2
811322e4:	180b883a 	mov	r5,r3
811322e8:	01204534 	movhi	r4,33044
811322ec:	2101ec04 	addi	r4,r4,1968
811322f0:	1139f200 	call	81139f20 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811322f4:	01204534 	movhi	r4,33044
811322f8:	21020504 	addi	r4,r4,2068
811322fc:	11321ac0 	call	811321ac <alt_dev_reg>
}
81132300:	0001883a 	nop
81132304:	e037883a 	mov	sp,fp
81132308:	dfc00117 	ldw	ra,4(sp)
8113230c:	df000017 	ldw	fp,0(sp)
81132310:	dec00204 	addi	sp,sp,8
81132314:	f800283a 	ret

81132318 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
81132318:	defffa04 	addi	sp,sp,-24
8113231c:	de00012e 	bgeu	sp,et,81132324 <Write_Sector_Data+0xc>
81132320:	003b68fa 	trap	3
81132324:	dfc00515 	stw	ra,20(sp)
81132328:	df000415 	stw	fp,16(sp)
8113232c:	df000404 	addi	fp,sp,16
81132330:	e13ffe15 	stw	r4,-8(fp)
81132334:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81132338:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
8113233c:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81132340:	10001e26 	beq	r2,zero,811323bc <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
81132344:	00803fc4 	movi	r2,255
81132348:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8113234c:	d0a09117 	ldw	r2,-32188(gp)
81132350:	e13ffe17 	ldw	r4,-8(fp)
81132354:	e0ffff17 	ldw	r3,-4(fp)
81132358:	20c7883a 	add	r3,r4,r3
8113235c:	1806927a 	slli	r3,r3,9
81132360:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81132364:	d0a09017 	ldw	r2,-32192(gp)
81132368:	00c00604 	movi	r3,24
8113236c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81132370:	d0a08d17 	ldw	r2,-32204(gp)
81132374:	1080002b 	ldhuio	r2,0(r2)
81132378:	10bfffcc 	andi	r2,r2,65535
8113237c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81132380:	e0bffd0b 	ldhu	r2,-12(fp)
81132384:	10bfffcc 	andi	r2,r2,65535
81132388:	1080010c 	andi	r2,r2,4
8113238c:	103ff81e 	bne	r2,zero,81132370 <__reset+0xfb112370>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81132390:	e0bffd0b 	ldhu	r2,-12(fp)
81132394:	10bfffcc 	andi	r2,r2,65535
81132398:	1080040c 	andi	r2,r2,16
8113239c:	1000071e 	bne	r2,zero,811323bc <Write_Sector_Data+0xa4>
        {
            result = true;
811323a0:	00800044 	movi	r2,1
811323a4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
811323a8:	d0209615 	stw	zero,-32168(gp)
            current_sector_index = sector_index+partition_offset;
811323ac:	e0fffe17 	ldw	r3,-8(fp)
811323b0:	e0bfff17 	ldw	r2,-4(fp)
811323b4:	1885883a 	add	r2,r3,r2
811323b8:	d0a09715 	stw	r2,-32164(gp)
        }
    }
    return result;
811323bc:	e0bffc17 	ldw	r2,-16(fp)
}
811323c0:	e037883a 	mov	sp,fp
811323c4:	dfc00117 	ldw	ra,4(sp)
811323c8:	df000017 	ldw	fp,0(sp)
811323cc:	dec00204 	addi	sp,sp,8
811323d0:	f800283a 	ret

811323d4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
811323d4:	defffd04 	addi	sp,sp,-12
811323d8:	de00012e 	bgeu	sp,et,811323e0 <Save_Modified_Sector+0xc>
811323dc:	003b68fa 	trap	3
811323e0:	dfc00215 	stw	ra,8(sp)
811323e4:	df000115 	stw	fp,4(sp)
811323e8:	df000104 	addi	fp,sp,4
    bool result = true;
811323ec:	00800044 	movi	r2,1
811323f0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811323f4:	d0a09617 	ldw	r2,-32168(gp)
811323f8:	10000526 	beq	r2,zero,81132410 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811323fc:	d0a09717 	ldw	r2,-32164(gp)
81132400:	000b883a 	mov	r5,zero
81132404:	1009883a 	mov	r4,r2
81132408:	11323180 	call	81132318 <Write_Sector_Data>
8113240c:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
81132410:	e0bfff17 	ldw	r2,-4(fp)
}
81132414:	e037883a 	mov	sp,fp
81132418:	dfc00117 	ldw	ra,4(sp)
8113241c:	df000017 	ldw	fp,0(sp)
81132420:	dec00204 	addi	sp,sp,8
81132424:	f800283a 	ret

81132428 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
81132428:	defffa04 	addi	sp,sp,-24
8113242c:	de00012e 	bgeu	sp,et,81132434 <Read_Sector_Data+0xc>
81132430:	003b68fa 	trap	3
81132434:	dfc00515 	stw	ra,20(sp)
81132438:	df000415 	stw	fp,16(sp)
8113243c:	df000404 	addi	fp,sp,16
81132440:	e13ffe15 	stw	r4,-8(fp)
81132444:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81132448:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8113244c:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81132450:	10002726 	beq	r2,zero,811324f0 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81132454:	00803fc4 	movi	r2,255
81132458:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8113245c:	d0a09617 	ldw	r2,-32168(gp)
81132460:	10000726 	beq	r2,zero,81132480 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81132464:	d0a09717 	ldw	r2,-32164(gp)
81132468:	000b883a 	mov	r5,zero
8113246c:	1009883a 	mov	r4,r2
81132470:	11323180 	call	81132318 <Write_Sector_Data>
81132474:	1000021e 	bne	r2,zero,81132480 <Read_Sector_Data+0x58>
            {
                return false;
81132478:	0005883a 	mov	r2,zero
8113247c:	00001d06 	br	811324f4 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81132480:	d0a09117 	ldw	r2,-32188(gp)
81132484:	e13ffe17 	ldw	r4,-8(fp)
81132488:	e0ffff17 	ldw	r3,-4(fp)
8113248c:	20c7883a 	add	r3,r4,r3
81132490:	1806927a 	slli	r3,r3,9
81132494:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81132498:	d0a09017 	ldw	r2,-32192(gp)
8113249c:	00c00444 	movi	r3,17
811324a0:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
811324a4:	d0a08d17 	ldw	r2,-32204(gp)
811324a8:	1080002b 	ldhuio	r2,0(r2)
811324ac:	10bfffcc 	andi	r2,r2,65535
811324b0:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
811324b4:	e0bffd0b 	ldhu	r2,-12(fp)
811324b8:	10bfffcc 	andi	r2,r2,65535
811324bc:	1080010c 	andi	r2,r2,4
811324c0:	103ff81e 	bne	r2,zero,811324a4 <__reset+0xfb1124a4>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
811324c4:	e0bffd0b 	ldhu	r2,-12(fp)
811324c8:	10bfffcc 	andi	r2,r2,65535
811324cc:	1080040c 	andi	r2,r2,16
811324d0:	1000071e 	bne	r2,zero,811324f0 <Read_Sector_Data+0xc8>
		{
			result = true;
811324d4:	00800044 	movi	r2,1
811324d8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
811324dc:	d0209615 	stw	zero,-32168(gp)
            current_sector_index = sector_index+partition_offset;
811324e0:	e0fffe17 	ldw	r3,-8(fp)
811324e4:	e0bfff17 	ldw	r2,-4(fp)
811324e8:	1885883a 	add	r2,r3,r2
811324ec:	d0a09715 	stw	r2,-32164(gp)
		}
	}
	return result;
811324f0:	e0bffc17 	ldw	r2,-16(fp)
}
811324f4:	e037883a 	mov	sp,fp
811324f8:	dfc00117 	ldw	ra,4(sp)
811324fc:	df000017 	ldw	fp,0(sp)
81132500:	dec00204 	addi	sp,sp,8
81132504:	f800283a 	ret

81132508 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
81132508:	defffb04 	addi	sp,sp,-20
8113250c:	de00012e 	bgeu	sp,et,81132514 <get_cluster_flag+0xc>
81132510:	003b68fa 	trap	3
81132514:	dfc00415 	stw	ra,16(sp)
81132518:	df000315 	stw	fp,12(sp)
8113251c:	df000304 	addi	fp,sp,12
81132520:	e13ffe15 	stw	r4,-8(fp)
81132524:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
81132528:	e0bffe17 	ldw	r2,-8(fp)
8113252c:	1004d23a 	srli	r2,r2,8
81132530:	d0e09317 	ldw	r3,-32180(gp)
81132534:	10c5883a 	add	r2,r2,r3
81132538:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8113253c:	00a04574 	movhi	r2,33045
81132540:	108ffd04 	addi	r2,r2,16372
81132544:	10801117 	ldw	r2,68(r2)
81132548:	e0fffd17 	ldw	r3,-12(fp)
8113254c:	1885883a 	add	r2,r3,r2
81132550:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81132554:	d0a09717 	ldw	r2,-32164(gp)
81132558:	e0fffd17 	ldw	r3,-12(fp)
8113255c:	18800726 	beq	r3,r2,8113257c <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81132560:	e0bffd17 	ldw	r2,-12(fp)
81132564:	000b883a 	mov	r5,zero
81132568:	1009883a 	mov	r4,r2
8113256c:	11324280 	call	81132428 <Read_Sector_Data>
81132570:	1000021e 	bne	r2,zero,8113257c <get_cluster_flag+0x74>
        {
            return false;
81132574:	0005883a 	mov	r2,zero
81132578:	00000d06 	br	811325b0 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8113257c:	e0bffe17 	ldw	r2,-8(fp)
81132580:	10803fcc 	andi	r2,r2,255
81132584:	1085883a 	add	r2,r2,r2
81132588:	1007883a 	mov	r3,r2
8113258c:	d0a09517 	ldw	r2,-32172(gp)
81132590:	10800a17 	ldw	r2,40(r2)
81132594:	1885883a 	add	r2,r3,r2
81132598:	1080002b 	ldhuio	r2,0(r2)
8113259c:	10bfffcc 	andi	r2,r2,65535
811325a0:	1007883a 	mov	r3,r2
811325a4:	e0bfff17 	ldw	r2,-4(fp)
811325a8:	10c0000d 	sth	r3,0(r2)
    return true;
811325ac:	00800044 	movi	r2,1
}
811325b0:	e037883a 	mov	sp,fp
811325b4:	dfc00117 	ldw	ra,4(sp)
811325b8:	df000017 	ldw	fp,0(sp)
811325bc:	dec00204 	addi	sp,sp,8
811325c0:	f800283a 	ret

811325c4 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
811325c4:	defffa04 	addi	sp,sp,-24
811325c8:	de00012e 	bgeu	sp,et,811325d0 <mark_cluster+0xc>
811325cc:	003b68fa 	trap	3
811325d0:	dfc00515 	stw	ra,20(sp)
811325d4:	df000415 	stw	fp,16(sp)
811325d8:	df000404 	addi	fp,sp,16
811325dc:	e13ffd15 	stw	r4,-12(fp)
811325e0:	2805883a 	mov	r2,r5
811325e4:	e1bfff15 	stw	r6,-4(fp)
811325e8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
811325ec:	e0bffd17 	ldw	r2,-12(fp)
811325f0:	1004d23a 	srli	r2,r2,8
811325f4:	d0e09317 	ldw	r3,-32180(gp)
811325f8:	10c5883a 	add	r2,r2,r3
811325fc:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
81132600:	e0bfff17 	ldw	r2,-4(fp)
81132604:	10000726 	beq	r2,zero,81132624 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81132608:	00a04574 	movhi	r2,33045
8113260c:	108ffd04 	addi	r2,r2,16372
81132610:	10801117 	ldw	r2,68(r2)
81132614:	e0fffc17 	ldw	r3,-16(fp)
81132618:	1885883a 	add	r2,r3,r2
8113261c:	e0bffc15 	stw	r2,-16(fp)
81132620:	00000606 	br	8113263c <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
81132624:	00a04574 	movhi	r2,33045
81132628:	108ffd04 	addi	r2,r2,16372
8113262c:	10801217 	ldw	r2,72(r2)
81132630:	e0fffc17 	ldw	r3,-16(fp)
81132634:	1885883a 	add	r2,r3,r2
81132638:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
8113263c:	d0a09717 	ldw	r2,-32164(gp)
81132640:	e0fffc17 	ldw	r3,-16(fp)
81132644:	18800726 	beq	r3,r2,81132664 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81132648:	e0bffc17 	ldw	r2,-16(fp)
8113264c:	000b883a 	mov	r5,zero
81132650:	1009883a 	mov	r4,r2
81132654:	11324280 	call	81132428 <Read_Sector_Data>
81132658:	1000021e 	bne	r2,zero,81132664 <mark_cluster+0xa0>
        {
            return false;
8113265c:	0005883a 	mov	r2,zero
81132660:	00000d06 	br	81132698 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
81132664:	e0bffd17 	ldw	r2,-12(fp)
81132668:	10803fcc 	andi	r2,r2,255
8113266c:	1085883a 	add	r2,r2,r2
81132670:	1007883a 	mov	r3,r2
81132674:	d0a09517 	ldw	r2,-32172(gp)
81132678:	10800a17 	ldw	r2,40(r2)
8113267c:	1885883a 	add	r2,r3,r2
81132680:	1007883a 	mov	r3,r2
81132684:	e0bffe0f 	ldh	r2,-8(fp)
81132688:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
8113268c:	00800044 	movi	r2,1
81132690:	d0a09615 	stw	r2,-32168(gp)
    return true;
81132694:	00800044 	movi	r2,1
}
81132698:	e037883a 	mov	sp,fp
8113269c:	dfc00117 	ldw	ra,4(sp)
811326a0:	df000017 	ldw	fp,0(sp)
811326a4:	dec00204 	addi	sp,sp,8
811326a8:	f800283a 	ret

811326ac <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
811326ac:	defff704 	addi	sp,sp,-36
811326b0:	de00012e 	bgeu	sp,et,811326b8 <Check_for_Master_Boot_Record+0xc>
811326b4:	003b68fa 	trap	3
811326b8:	dfc00815 	stw	ra,32(sp)
811326bc:	df000715 	stw	fp,28(sp)
811326c0:	df000704 	addi	fp,sp,28
	bool result = false;
811326c4:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
811326c8:	000b883a 	mov	r5,zero
811326cc:	0009883a 	mov	r4,zero
811326d0:	11324280 	call	81132428 <Read_Sector_Data>
811326d4:	10005a26 	beq	r2,zero,81132840 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
811326d8:	d0a09517 	ldw	r2,-32172(gp)
811326dc:	10800a17 	ldw	r2,40(r2)
811326e0:	10807f84 	addi	r2,r2,510
811326e4:	1080002b 	ldhuio	r2,0(r2)
811326e8:	10bfffcc 	andi	r2,r2,65535
811326ec:	10bfffcc 	andi	r2,r2,65535
811326f0:	10a0001c 	xori	r2,r2,32768
811326f4:	10a00004 	addi	r2,r2,-32768
811326f8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
811326fc:	e0bffb17 	ldw	r2,-20(fp)
81132700:	10ffffcc 	andi	r3,r2,65535
81132704:	00aa9554 	movui	r2,43605
81132708:	18804d1e 	bne	r3,r2,81132840 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8113270c:	e03ffa15 	stw	zero,-24(fp)
81132710:	00004806 	br	81132834 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
81132714:	e0bffa17 	ldw	r2,-24(fp)
81132718:	1004913a 	slli	r2,r2,4
8113271c:	10806f84 	addi	r2,r2,446
81132720:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
81132724:	d0a09517 	ldw	r2,-32172(gp)
81132728:	10c00a17 	ldw	r3,40(r2)
8113272c:	e0bffc17 	ldw	r2,-16(fp)
81132730:	1885883a 	add	r2,r3,r2
81132734:	10800104 	addi	r2,r2,4
81132738:	10800023 	ldbuio	r2,0(r2)
8113273c:	10803fcc 	andi	r2,r2,255
81132740:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
81132744:	e0bffd07 	ldb	r2,-12(fp)
81132748:	10800060 	cmpeqi	r2,r2,1
8113274c:	1000091e 	bne	r2,zero,81132774 <Check_for_Master_Boot_Record+0xc8>
81132750:	e0bffd07 	ldb	r2,-12(fp)
81132754:	10800120 	cmpeqi	r2,r2,4
81132758:	1000061e 	bne	r2,zero,81132774 <Check_for_Master_Boot_Record+0xc8>
8113275c:	e0bffd07 	ldb	r2,-12(fp)
81132760:	108001a0 	cmpeqi	r2,r2,6
81132764:	1000031e 	bne	r2,zero,81132774 <Check_for_Master_Boot_Record+0xc8>
81132768:	e0bffd07 	ldb	r2,-12(fp)
8113276c:	10800398 	cmpnei	r2,r2,14
81132770:	10002d1e 	bne	r2,zero,81132828 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81132774:	d0a09517 	ldw	r2,-32172(gp)
81132778:	10c00a17 	ldw	r3,40(r2)
8113277c:	e0bffc17 	ldw	r2,-16(fp)
81132780:	1885883a 	add	r2,r3,r2
81132784:	10800284 	addi	r2,r2,10
81132788:	1080002b 	ldhuio	r2,0(r2)
8113278c:	10bfffcc 	andi	r2,r2,65535
81132790:	1006943a 	slli	r3,r2,16
81132794:	d0a09517 	ldw	r2,-32172(gp)
81132798:	11000a17 	ldw	r4,40(r2)
8113279c:	e0bffc17 	ldw	r2,-16(fp)
811327a0:	2085883a 	add	r2,r4,r2
811327a4:	10800204 	addi	r2,r2,8
811327a8:	1080002b 	ldhuio	r2,0(r2)
811327ac:	10bfffcc 	andi	r2,r2,65535
811327b0:	10bfffcc 	andi	r2,r2,65535
811327b4:	1884b03a 	or	r2,r3,r2
811327b8:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
811327bc:	d0a09517 	ldw	r2,-32172(gp)
811327c0:	10c00a17 	ldw	r3,40(r2)
811327c4:	e0bffc17 	ldw	r2,-16(fp)
811327c8:	1885883a 	add	r2,r3,r2
811327cc:	10800384 	addi	r2,r2,14
811327d0:	1080002b 	ldhuio	r2,0(r2)
811327d4:	10bfffcc 	andi	r2,r2,65535
811327d8:	1006943a 	slli	r3,r2,16
811327dc:	d0a09517 	ldw	r2,-32172(gp)
811327e0:	11000a17 	ldw	r4,40(r2)
811327e4:	e0bffc17 	ldw	r2,-16(fp)
811327e8:	2085883a 	add	r2,r4,r2
811327ec:	10800304 	addi	r2,r2,12
811327f0:	1080002b 	ldhuio	r2,0(r2)
811327f4:	10bfffcc 	andi	r2,r2,65535
811327f8:	10bfffcc 	andi	r2,r2,65535
811327fc:	1884b03a 	or	r2,r3,r2
81132800:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
81132804:	e0bfff17 	ldw	r2,-4(fp)
81132808:	0080070e 	bge	zero,r2,81132828 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
8113280c:	00800044 	movi	r2,1
81132810:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
81132814:	e0bfff17 	ldw	r2,-4(fp)
81132818:	d0a09415 	stw	r2,-32176(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
8113281c:	e0bffe17 	ldw	r2,-8(fp)
81132820:	d0a09315 	stw	r2,-32180(gp)
						break;
81132824:	00000606 	br	81132840 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81132828:	e0bffa17 	ldw	r2,-24(fp)
8113282c:	10800044 	addi	r2,r2,1
81132830:	e0bffa15 	stw	r2,-24(fp)
81132834:	e0bffa17 	ldw	r2,-24(fp)
81132838:	10800110 	cmplti	r2,r2,4
8113283c:	103fb51e 	bne	r2,zero,81132714 <__reset+0xfb112714>
				}
			}
		}
	}

	return result;
81132840:	e0bff917 	ldw	r2,-28(fp)
}
81132844:	e037883a 	mov	sp,fp
81132848:	dfc00117 	ldw	ra,4(sp)
8113284c:	df000017 	ldw	fp,0(sp)
81132850:	dec00204 	addi	sp,sp,8
81132854:	f800283a 	ret

81132858 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81132858:	defff804 	addi	sp,sp,-32
8113285c:	de00012e 	bgeu	sp,et,81132864 <Read_File_Record_At_Offset+0xc>
81132860:	003b68fa 	trap	3
81132864:	dfc00715 	stw	ra,28(sp)
81132868:	df000615 	stw	fp,24(sp)
8113286c:	df000604 	addi	fp,sp,24
81132870:	e13ffc15 	stw	r4,-16(fp)
81132874:	e17ffd15 	stw	r5,-12(fp)
81132878:	e1bffe15 	stw	r6,-8(fp)
8113287c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81132880:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81132884:	e0bffc17 	ldw	r2,-16(fp)
81132888:	108007cc 	andi	r2,r2,31
8113288c:	10008d1e 	bne	r2,zero,81132ac4 <Read_File_Record_At_Offset+0x26c>
81132890:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81132894:	10008b26 	beq	r2,zero,81132ac4 <Read_File_Record_At_Offset+0x26c>
81132898:	d0a08c17 	ldw	r2,-32208(gp)
8113289c:	10008926 	beq	r2,zero,81132ac4 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
811328a0:	e03ffb15 	stw	zero,-20(fp)
811328a4:	00001106 	br	811328ec <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
811328a8:	e0fffc17 	ldw	r3,-16(fp)
811328ac:	e0bffb17 	ldw	r2,-20(fp)
811328b0:	1885883a 	add	r2,r3,r2
811328b4:	1007883a 	mov	r3,r2
811328b8:	d0a09517 	ldw	r2,-32172(gp)
811328bc:	10800a17 	ldw	r2,40(r2)
811328c0:	1885883a 	add	r2,r3,r2
811328c4:	10800023 	ldbuio	r2,0(r2)
811328c8:	10803fcc 	andi	r2,r2,255
811328cc:	1009883a 	mov	r4,r2
811328d0:	e0fffd17 	ldw	r3,-12(fp)
811328d4:	e0bffb17 	ldw	r2,-20(fp)
811328d8:	1885883a 	add	r2,r3,r2
811328dc:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
811328e0:	e0bffb17 	ldw	r2,-20(fp)
811328e4:	10800044 	addi	r2,r2,1
811328e8:	e0bffb15 	stw	r2,-20(fp)
811328ec:	e0bffb17 	ldw	r2,-20(fp)
811328f0:	10800210 	cmplti	r2,r2,8
811328f4:	103fec1e 	bne	r2,zero,811328a8 <__reset+0xfb1128a8>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
811328f8:	e03ffb15 	stw	zero,-20(fp)
811328fc:	00001306 	br	8113294c <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81132900:	e0fffc17 	ldw	r3,-16(fp)
81132904:	e0bffb17 	ldw	r2,-20(fp)
81132908:	1885883a 	add	r2,r3,r2
8113290c:	1007883a 	mov	r3,r2
81132910:	d0a09517 	ldw	r2,-32172(gp)
81132914:	10800a17 	ldw	r2,40(r2)
81132918:	1885883a 	add	r2,r3,r2
8113291c:	10800204 	addi	r2,r2,8
81132920:	10800023 	ldbuio	r2,0(r2)
81132924:	10803fcc 	andi	r2,r2,255
81132928:	1009883a 	mov	r4,r2
8113292c:	e0fffd17 	ldw	r3,-12(fp)
81132930:	e0bffb17 	ldw	r2,-20(fp)
81132934:	1885883a 	add	r2,r3,r2
81132938:	10800204 	addi	r2,r2,8
8113293c:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81132940:	e0bffb17 	ldw	r2,-20(fp)
81132944:	10800044 	addi	r2,r2,1
81132948:	e0bffb15 	stw	r2,-20(fp)
8113294c:	e0bffb17 	ldw	r2,-20(fp)
81132950:	108000d0 	cmplti	r2,r2,3
81132954:	103fea1e 	bne	r2,zero,81132900 <__reset+0xfb112900>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81132958:	d0a09517 	ldw	r2,-32172(gp)
8113295c:	10c00a17 	ldw	r3,40(r2)
81132960:	e0bffc17 	ldw	r2,-16(fp)
81132964:	1885883a 	add	r2,r3,r2
81132968:	108002c4 	addi	r2,r2,11
8113296c:	10800023 	ldbuio	r2,0(r2)
81132970:	10803fcc 	andi	r2,r2,255
81132974:	1007883a 	mov	r3,r2
81132978:	e0bffd17 	ldw	r2,-12(fp)
8113297c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81132980:	d0a09517 	ldw	r2,-32172(gp)
81132984:	10c00a17 	ldw	r3,40(r2)
81132988:	e0bffc17 	ldw	r2,-16(fp)
8113298c:	1885883a 	add	r2,r3,r2
81132990:	10800384 	addi	r2,r2,14
81132994:	1080002b 	ldhuio	r2,0(r2)
81132998:	10bfffcc 	andi	r2,r2,65535
8113299c:	1007883a 	mov	r3,r2
811329a0:	e0bffd17 	ldw	r2,-12(fp)
811329a4:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
811329a8:	d0a09517 	ldw	r2,-32172(gp)
811329ac:	10c00a17 	ldw	r3,40(r2)
811329b0:	e0bffc17 	ldw	r2,-16(fp)
811329b4:	1885883a 	add	r2,r3,r2
811329b8:	10800404 	addi	r2,r2,16
811329bc:	1080002b 	ldhuio	r2,0(r2)
811329c0:	10bfffcc 	andi	r2,r2,65535
811329c4:	1007883a 	mov	r3,r2
811329c8:	e0bffd17 	ldw	r2,-12(fp)
811329cc:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
811329d0:	d0a09517 	ldw	r2,-32172(gp)
811329d4:	10c00a17 	ldw	r3,40(r2)
811329d8:	e0bffc17 	ldw	r2,-16(fp)
811329dc:	1885883a 	add	r2,r3,r2
811329e0:	10800484 	addi	r2,r2,18
811329e4:	1080002b 	ldhuio	r2,0(r2)
811329e8:	10bfffcc 	andi	r2,r2,65535
811329ec:	1007883a 	mov	r3,r2
811329f0:	e0bffd17 	ldw	r2,-12(fp)
811329f4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
811329f8:	d0a09517 	ldw	r2,-32172(gp)
811329fc:	10c00a17 	ldw	r3,40(r2)
81132a00:	e0bffc17 	ldw	r2,-16(fp)
81132a04:	1885883a 	add	r2,r3,r2
81132a08:	10800584 	addi	r2,r2,22
81132a0c:	1080002b 	ldhuio	r2,0(r2)
81132a10:	10bfffcc 	andi	r2,r2,65535
81132a14:	1007883a 	mov	r3,r2
81132a18:	e0bffd17 	ldw	r2,-12(fp)
81132a1c:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81132a20:	d0a09517 	ldw	r2,-32172(gp)
81132a24:	10c00a17 	ldw	r3,40(r2)
81132a28:	e0bffc17 	ldw	r2,-16(fp)
81132a2c:	1885883a 	add	r2,r3,r2
81132a30:	10800604 	addi	r2,r2,24
81132a34:	1080002b 	ldhuio	r2,0(r2)
81132a38:	10bfffcc 	andi	r2,r2,65535
81132a3c:	1007883a 	mov	r3,r2
81132a40:	e0bffd17 	ldw	r2,-12(fp)
81132a44:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81132a48:	d0a09517 	ldw	r2,-32172(gp)
81132a4c:	10c00a17 	ldw	r3,40(r2)
81132a50:	e0bffc17 	ldw	r2,-16(fp)
81132a54:	1885883a 	add	r2,r3,r2
81132a58:	10800684 	addi	r2,r2,26
81132a5c:	1080002b 	ldhuio	r2,0(r2)
81132a60:	10bfffcc 	andi	r2,r2,65535
81132a64:	1007883a 	mov	r3,r2
81132a68:	e0bffd17 	ldw	r2,-12(fp)
81132a6c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81132a70:	d0a09517 	ldw	r2,-32172(gp)
81132a74:	10c00a17 	ldw	r3,40(r2)
81132a78:	e0bffc17 	ldw	r2,-16(fp)
81132a7c:	1885883a 	add	r2,r3,r2
81132a80:	10800704 	addi	r2,r2,28
81132a84:	10800037 	ldwio	r2,0(r2)
81132a88:	1007883a 	mov	r3,r2
81132a8c:	e0bffd17 	ldw	r2,-12(fp)
81132a90:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81132a94:	e0bffd17 	ldw	r2,-12(fp)
81132a98:	e0fffe17 	ldw	r3,-8(fp)
81132a9c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81132aa0:	e0bffd17 	ldw	r2,-12(fp)
81132aa4:	e0ffff17 	ldw	r3,-4(fp)
81132aa8:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81132aac:	e0bffc17 	ldw	r2,-16(fp)
81132ab0:	1007883a 	mov	r3,r2
81132ab4:	e0bffd17 	ldw	r2,-12(fp)
81132ab8:	10c00c0d 	sth	r3,48(r2)
		result = true;
81132abc:	00800044 	movi	r2,1
81132ac0:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81132ac4:	e0bffa17 	ldw	r2,-24(fp)
}
81132ac8:	e037883a 	mov	sp,fp
81132acc:	dfc00117 	ldw	ra,4(sp)
81132ad0:	df000017 	ldw	fp,0(sp)
81132ad4:	dec00204 	addi	sp,sp,8
81132ad8:	f800283a 	ret

81132adc <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81132adc:	defff904 	addi	sp,sp,-28
81132ae0:	de00012e 	bgeu	sp,et,81132ae8 <Write_File_Record_At_Offset+0xc>
81132ae4:	003b68fa 	trap	3
81132ae8:	dfc00615 	stw	ra,24(sp)
81132aec:	df000515 	stw	fp,20(sp)
81132af0:	df000504 	addi	fp,sp,20
81132af4:	e13ffe15 	stw	r4,-8(fp)
81132af8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81132afc:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81132b00:	e0bffe17 	ldw	r2,-8(fp)
81132b04:	108007cc 	andi	r2,r2,31
81132b08:	1000931e 	bne	r2,zero,81132d58 <Write_File_Record_At_Offset+0x27c>
81132b0c:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81132b10:	10009126 	beq	r2,zero,81132d58 <Write_File_Record_At_Offset+0x27c>
81132b14:	d0a08c17 	ldw	r2,-32208(gp)
81132b18:	10008f26 	beq	r2,zero,81132d58 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81132b1c:	e03ffc15 	stw	zero,-16(fp)
81132b20:	00001f06 	br	81132ba0 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
81132b24:	e0bffc17 	ldw	r2,-16(fp)
81132b28:	10800044 	addi	r2,r2,1
81132b2c:	e0ffff17 	ldw	r3,-4(fp)
81132b30:	1885883a 	add	r2,r3,r2
81132b34:	10800003 	ldbu	r2,0(r2)
81132b38:	10803fcc 	andi	r2,r2,255
81132b3c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81132b40:	e0bffd0f 	ldh	r2,-12(fp)
81132b44:	1004923a 	slli	r2,r2,8
81132b48:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81132b4c:	e0ffff17 	ldw	r3,-4(fp)
81132b50:	e0bffc17 	ldw	r2,-16(fp)
81132b54:	1885883a 	add	r2,r3,r2
81132b58:	10800003 	ldbu	r2,0(r2)
81132b5c:	10c03fcc 	andi	r3,r2,255
81132b60:	e0bffd0b 	ldhu	r2,-12(fp)
81132b64:	1884b03a 	or	r2,r3,r2
81132b68:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
81132b6c:	e0fffe17 	ldw	r3,-8(fp)
81132b70:	e0bffc17 	ldw	r2,-16(fp)
81132b74:	1885883a 	add	r2,r3,r2
81132b78:	1007883a 	mov	r3,r2
81132b7c:	d0a09517 	ldw	r2,-32172(gp)
81132b80:	10800a17 	ldw	r2,40(r2)
81132b84:	1885883a 	add	r2,r3,r2
81132b88:	1007883a 	mov	r3,r2
81132b8c:	e0bffd0f 	ldh	r2,-12(fp)
81132b90:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81132b94:	e0bffc17 	ldw	r2,-16(fp)
81132b98:	10800084 	addi	r2,r2,2
81132b9c:	e0bffc15 	stw	r2,-16(fp)
81132ba0:	e0bffc17 	ldw	r2,-16(fp)
81132ba4:	10800210 	cmplti	r2,r2,8
81132ba8:	103fde1e 	bne	r2,zero,81132b24 <__reset+0xfb112b24>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81132bac:	e03ffc15 	stw	zero,-16(fp)
81132bb0:	00001306 	br	81132c00 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81132bb4:	e0fffe17 	ldw	r3,-8(fp)
81132bb8:	e0bffc17 	ldw	r2,-16(fp)
81132bbc:	1885883a 	add	r2,r3,r2
81132bc0:	1007883a 	mov	r3,r2
81132bc4:	d0a09517 	ldw	r2,-32172(gp)
81132bc8:	10800a17 	ldw	r2,40(r2)
81132bcc:	1885883a 	add	r2,r3,r2
81132bd0:	10800204 	addi	r2,r2,8
81132bd4:	1009883a 	mov	r4,r2
81132bd8:	e0ffff17 	ldw	r3,-4(fp)
81132bdc:	e0bffc17 	ldw	r2,-16(fp)
81132be0:	1885883a 	add	r2,r3,r2
81132be4:	10800204 	addi	r2,r2,8
81132be8:	10800003 	ldbu	r2,0(r2)
81132bec:	10803fcc 	andi	r2,r2,255
81132bf0:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81132bf4:	e0bffc17 	ldw	r2,-16(fp)
81132bf8:	10800044 	addi	r2,r2,1
81132bfc:	e0bffc15 	stw	r2,-16(fp)
81132c00:	e0bffc17 	ldw	r2,-16(fp)
81132c04:	108000d0 	cmplti	r2,r2,3
81132c08:	103fea1e 	bne	r2,zero,81132bb4 <__reset+0xfb112bb4>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
81132c0c:	d0a09517 	ldw	r2,-32172(gp)
81132c10:	10c00a17 	ldw	r3,40(r2)
81132c14:	e0bffe17 	ldw	r2,-8(fp)
81132c18:	1885883a 	add	r2,r3,r2
81132c1c:	108002c4 	addi	r2,r2,11
81132c20:	1007883a 	mov	r3,r2
81132c24:	e0bfff17 	ldw	r2,-4(fp)
81132c28:	108002c3 	ldbu	r2,11(r2)
81132c2c:	10803fcc 	andi	r2,r2,255
81132c30:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81132c34:	d0a09517 	ldw	r2,-32172(gp)
81132c38:	10c00a17 	ldw	r3,40(r2)
81132c3c:	e0bffe17 	ldw	r2,-8(fp)
81132c40:	1885883a 	add	r2,r3,r2
81132c44:	10800384 	addi	r2,r2,14
81132c48:	1007883a 	mov	r3,r2
81132c4c:	e0bfff17 	ldw	r2,-4(fp)
81132c50:	1080030b 	ldhu	r2,12(r2)
81132c54:	10bfffcc 	andi	r2,r2,65535
81132c58:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
81132c5c:	d0a09517 	ldw	r2,-32172(gp)
81132c60:	10c00a17 	ldw	r3,40(r2)
81132c64:	e0bffe17 	ldw	r2,-8(fp)
81132c68:	1885883a 	add	r2,r3,r2
81132c6c:	10800404 	addi	r2,r2,16
81132c70:	1007883a 	mov	r3,r2
81132c74:	e0bfff17 	ldw	r2,-4(fp)
81132c78:	1080038b 	ldhu	r2,14(r2)
81132c7c:	10bfffcc 	andi	r2,r2,65535
81132c80:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81132c84:	d0a09517 	ldw	r2,-32172(gp)
81132c88:	10c00a17 	ldw	r3,40(r2)
81132c8c:	e0bffe17 	ldw	r2,-8(fp)
81132c90:	1885883a 	add	r2,r3,r2
81132c94:	10800484 	addi	r2,r2,18
81132c98:	1007883a 	mov	r3,r2
81132c9c:	e0bfff17 	ldw	r2,-4(fp)
81132ca0:	1080040b 	ldhu	r2,16(r2)
81132ca4:	10bfffcc 	andi	r2,r2,65535
81132ca8:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81132cac:	d0a09517 	ldw	r2,-32172(gp)
81132cb0:	10c00a17 	ldw	r3,40(r2)
81132cb4:	e0bffe17 	ldw	r2,-8(fp)
81132cb8:	1885883a 	add	r2,r3,r2
81132cbc:	10800584 	addi	r2,r2,22
81132cc0:	1007883a 	mov	r3,r2
81132cc4:	e0bfff17 	ldw	r2,-4(fp)
81132cc8:	1080048b 	ldhu	r2,18(r2)
81132ccc:	10bfffcc 	andi	r2,r2,65535
81132cd0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
81132cd4:	d0a09517 	ldw	r2,-32172(gp)
81132cd8:	10c00a17 	ldw	r3,40(r2)
81132cdc:	e0bffe17 	ldw	r2,-8(fp)
81132ce0:	1885883a 	add	r2,r3,r2
81132ce4:	10800604 	addi	r2,r2,24
81132ce8:	1007883a 	mov	r3,r2
81132cec:	e0bfff17 	ldw	r2,-4(fp)
81132cf0:	1080050b 	ldhu	r2,20(r2)
81132cf4:	10bfffcc 	andi	r2,r2,65535
81132cf8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81132cfc:	d0a09517 	ldw	r2,-32172(gp)
81132d00:	10c00a17 	ldw	r3,40(r2)
81132d04:	e0bffe17 	ldw	r2,-8(fp)
81132d08:	1885883a 	add	r2,r3,r2
81132d0c:	10800684 	addi	r2,r2,26
81132d10:	1007883a 	mov	r3,r2
81132d14:	e0bfff17 	ldw	r2,-4(fp)
81132d18:	1080058b 	ldhu	r2,22(r2)
81132d1c:	10bfffcc 	andi	r2,r2,65535
81132d20:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81132d24:	d0a09517 	ldw	r2,-32172(gp)
81132d28:	10c00a17 	ldw	r3,40(r2)
81132d2c:	e0bffe17 	ldw	r2,-8(fp)
81132d30:	1885883a 	add	r2,r3,r2
81132d34:	10800704 	addi	r2,r2,28
81132d38:	1007883a 	mov	r3,r2
81132d3c:	e0bfff17 	ldw	r2,-4(fp)
81132d40:	10800617 	ldw	r2,24(r2)
81132d44:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81132d48:	00800044 	movi	r2,1
81132d4c:	d0a09615 	stw	r2,-32168(gp)
        result = true;
81132d50:	00800044 	movi	r2,1
81132d54:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
81132d58:	e0bffb17 	ldw	r2,-20(fp)
}
81132d5c:	e037883a 	mov	sp,fp
81132d60:	dfc00117 	ldw	ra,4(sp)
81132d64:	df000017 	ldw	fp,0(sp)
81132d68:	dec00204 	addi	sp,sp,8
81132d6c:	f800283a 	ret

81132d70 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81132d70:	defff904 	addi	sp,sp,-28
81132d74:	de00012e 	bgeu	sp,et,81132d7c <Check_for_DOS_FAT+0xc>
81132d78:	003b68fa 	trap	3
81132d7c:	dfc00615 	stw	ra,24(sp)
81132d80:	df000515 	stw	fp,20(sp)
81132d84:	df000504 	addi	fp,sp,20
81132d88:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81132d8c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81132d90:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81132d94:	e17fff17 	ldw	r5,-4(fp)
81132d98:	0009883a 	mov	r4,zero
81132d9c:	11324280 	call	81132428 <Read_Sector_Data>
81132da0:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81132da4:	d0a09517 	ldw	r2,-32172(gp)
81132da8:	10800a17 	ldw	r2,40(r2)
81132dac:	10807f84 	addi	r2,r2,510
81132db0:	1080002b 	ldhuio	r2,0(r2)
81132db4:	10bfffcc 	andi	r2,r2,65535
81132db8:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81132dbc:	e0bffe0f 	ldh	r2,-8(fp)
81132dc0:	10ffffcc 	andi	r3,r2,65535
81132dc4:	00aa9554 	movui	r2,43605
81132dc8:	1881841e 	bne	r3,r2,811333dc <Check_for_DOS_FAT+0x66c>
81132dcc:	e0bffb17 	ldw	r2,-20(fp)
81132dd0:	10018226 	beq	r2,zero,811333dc <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
81132dd4:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
81132dd8:	d0a09517 	ldw	r2,-32172(gp)
81132ddc:	10800a17 	ldw	r2,40(r2)
81132de0:	10800023 	ldbuio	r2,0(r2)
81132de4:	10803fcc 	andi	r2,r2,255
81132de8:	1007883a 	mov	r3,r2
81132dec:	00a04574 	movhi	r2,33045
81132df0:	108ffd04 	addi	r2,r2,16372
81132df4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
81132df8:	d0a09517 	ldw	r2,-32172(gp)
81132dfc:	10800a17 	ldw	r2,40(r2)
81132e00:	10800044 	addi	r2,r2,1
81132e04:	10800023 	ldbuio	r2,0(r2)
81132e08:	10803fcc 	andi	r2,r2,255
81132e0c:	1007883a 	mov	r3,r2
81132e10:	00a04574 	movhi	r2,33045
81132e14:	108ffd04 	addi	r2,r2,16372
81132e18:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81132e1c:	d0a09517 	ldw	r2,-32172(gp)
81132e20:	10800a17 	ldw	r2,40(r2)
81132e24:	10800084 	addi	r2,r2,2
81132e28:	10800023 	ldbuio	r2,0(r2)
81132e2c:	10803fcc 	andi	r2,r2,255
81132e30:	1007883a 	mov	r3,r2
81132e34:	00a04574 	movhi	r2,33045
81132e38:	108ffd04 	addi	r2,r2,16372
81132e3c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81132e40:	e03ffc15 	stw	zero,-16(fp)
81132e44:	00001106 	br	81132e8c <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81132e48:	d0a09517 	ldw	r2,-32172(gp)
81132e4c:	10c00a17 	ldw	r3,40(r2)
81132e50:	e0bffc17 	ldw	r2,-16(fp)
81132e54:	1885883a 	add	r2,r3,r2
81132e58:	108000c4 	addi	r2,r2,3
81132e5c:	10800023 	ldbuio	r2,0(r2)
81132e60:	10803fcc 	andi	r2,r2,255
81132e64:	1009883a 	mov	r4,r2
81132e68:	00a04574 	movhi	r2,33045
81132e6c:	108ffd04 	addi	r2,r2,16372
81132e70:	e0fffc17 	ldw	r3,-16(fp)
81132e74:	10c5883a 	add	r2,r2,r3
81132e78:	108000c4 	addi	r2,r2,3
81132e7c:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81132e80:	e0bffc17 	ldw	r2,-16(fp)
81132e84:	10800044 	addi	r2,r2,1
81132e88:	e0bffc15 	stw	r2,-16(fp)
81132e8c:	e0bffc17 	ldw	r2,-16(fp)
81132e90:	10800210 	cmplti	r2,r2,8
81132e94:	103fec1e 	bne	r2,zero,81132e48 <__reset+0xfb112e48>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
81132e98:	d0a09517 	ldw	r2,-32172(gp)
81132e9c:	10800a17 	ldw	r2,40(r2)
81132ea0:	10800304 	addi	r2,r2,12
81132ea4:	10800023 	ldbuio	r2,0(r2)
81132ea8:	10803fcc 	andi	r2,r2,255
81132eac:	1004923a 	slli	r2,r2,8
81132eb0:	1007883a 	mov	r3,r2
81132eb4:	d0a09517 	ldw	r2,-32172(gp)
81132eb8:	10800a17 	ldw	r2,40(r2)
81132ebc:	108002c4 	addi	r2,r2,11
81132ec0:	10800023 	ldbuio	r2,0(r2)
81132ec4:	10803fcc 	andi	r2,r2,255
81132ec8:	10803fcc 	andi	r2,r2,255
81132ecc:	1080201c 	xori	r2,r2,128
81132ed0:	10bfe004 	addi	r2,r2,-128
81132ed4:	1884b03a 	or	r2,r3,r2
81132ed8:	1007883a 	mov	r3,r2
81132edc:	00a04574 	movhi	r2,33045
81132ee0:	108ffd04 	addi	r2,r2,16372
81132ee4:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
81132ee8:	d0a09517 	ldw	r2,-32172(gp)
81132eec:	10800a17 	ldw	r2,40(r2)
81132ef0:	10800344 	addi	r2,r2,13
81132ef4:	10800023 	ldbuio	r2,0(r2)
81132ef8:	10803fcc 	andi	r2,r2,255
81132efc:	1007883a 	mov	r3,r2
81132f00:	00a04574 	movhi	r2,33045
81132f04:	108ffd04 	addi	r2,r2,16372
81132f08:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
81132f0c:	d0a09517 	ldw	r2,-32172(gp)
81132f10:	10800a17 	ldw	r2,40(r2)
81132f14:	10800384 	addi	r2,r2,14
81132f18:	1080002b 	ldhuio	r2,0(r2)
81132f1c:	10bfffcc 	andi	r2,r2,65535
81132f20:	1007883a 	mov	r3,r2
81132f24:	00a04574 	movhi	r2,33045
81132f28:	108ffd04 	addi	r2,r2,16372
81132f2c:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81132f30:	d0a09517 	ldw	r2,-32172(gp)
81132f34:	10800a17 	ldw	r2,40(r2)
81132f38:	10800404 	addi	r2,r2,16
81132f3c:	10800023 	ldbuio	r2,0(r2)
81132f40:	10803fcc 	andi	r2,r2,255
81132f44:	1007883a 	mov	r3,r2
81132f48:	00a04574 	movhi	r2,33045
81132f4c:	108ffd04 	addi	r2,r2,16372
81132f50:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81132f54:	d0a09517 	ldw	r2,-32172(gp)
81132f58:	10800a17 	ldw	r2,40(r2)
81132f5c:	10800484 	addi	r2,r2,18
81132f60:	10800023 	ldbuio	r2,0(r2)
81132f64:	10803fcc 	andi	r2,r2,255
81132f68:	1004923a 	slli	r2,r2,8
81132f6c:	1007883a 	mov	r3,r2
81132f70:	d0a09517 	ldw	r2,-32172(gp)
81132f74:	10800a17 	ldw	r2,40(r2)
81132f78:	10800444 	addi	r2,r2,17
81132f7c:	10800023 	ldbuio	r2,0(r2)
81132f80:	10803fcc 	andi	r2,r2,255
81132f84:	10803fcc 	andi	r2,r2,255
81132f88:	1884b03a 	or	r2,r3,r2
81132f8c:	1007883a 	mov	r3,r2
81132f90:	00a04574 	movhi	r2,33045
81132f94:	108ffd04 	addi	r2,r2,16372
81132f98:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81132f9c:	d0a09517 	ldw	r2,-32172(gp)
81132fa0:	10800a17 	ldw	r2,40(r2)
81132fa4:	10800504 	addi	r2,r2,20
81132fa8:	10800023 	ldbuio	r2,0(r2)
81132fac:	10803fcc 	andi	r2,r2,255
81132fb0:	1004923a 	slli	r2,r2,8
81132fb4:	1007883a 	mov	r3,r2
81132fb8:	d0a09517 	ldw	r2,-32172(gp)
81132fbc:	10800a17 	ldw	r2,40(r2)
81132fc0:	108004c4 	addi	r2,r2,19
81132fc4:	10800023 	ldbuio	r2,0(r2)
81132fc8:	10803fcc 	andi	r2,r2,255
81132fcc:	10803fcc 	andi	r2,r2,255
81132fd0:	1884b03a 	or	r2,r3,r2
81132fd4:	1007883a 	mov	r3,r2
81132fd8:	00a04574 	movhi	r2,33045
81132fdc:	108ffd04 	addi	r2,r2,16372
81132fe0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
81132fe4:	d0a09517 	ldw	r2,-32172(gp)
81132fe8:	10800a17 	ldw	r2,40(r2)
81132fec:	10800544 	addi	r2,r2,21
81132ff0:	10800023 	ldbuio	r2,0(r2)
81132ff4:	10803fcc 	andi	r2,r2,255
81132ff8:	1007883a 	mov	r3,r2
81132ffc:	00a04574 	movhi	r2,33045
81133000:	108ffd04 	addi	r2,r2,16372
81133004:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
81133008:	d0a09517 	ldw	r2,-32172(gp)
8113300c:	10800a17 	ldw	r2,40(r2)
81133010:	10800584 	addi	r2,r2,22
81133014:	1080002b 	ldhuio	r2,0(r2)
81133018:	10bfffcc 	andi	r2,r2,65535
8113301c:	1007883a 	mov	r3,r2
81133020:	00a04574 	movhi	r2,33045
81133024:	108ffd04 	addi	r2,r2,16372
81133028:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
8113302c:	d0a09517 	ldw	r2,-32172(gp)
81133030:	10800a17 	ldw	r2,40(r2)
81133034:	10800604 	addi	r2,r2,24
81133038:	1080002b 	ldhuio	r2,0(r2)
8113303c:	10bfffcc 	andi	r2,r2,65535
81133040:	1007883a 	mov	r3,r2
81133044:	00a04574 	movhi	r2,33045
81133048:	108ffd04 	addi	r2,r2,16372
8113304c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81133050:	d0a09517 	ldw	r2,-32172(gp)
81133054:	10800a17 	ldw	r2,40(r2)
81133058:	10800684 	addi	r2,r2,26
8113305c:	1080002b 	ldhuio	r2,0(r2)
81133060:	10bfffcc 	andi	r2,r2,65535
81133064:	1007883a 	mov	r3,r2
81133068:	00a04574 	movhi	r2,33045
8113306c:	108ffd04 	addi	r2,r2,16372
81133070:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81133074:	d0a09517 	ldw	r2,-32172(gp)
81133078:	10800a17 	ldw	r2,40(r2)
8113307c:	10800704 	addi	r2,r2,28
81133080:	10800037 	ldwio	r2,0(r2)
81133084:	1007883a 	mov	r3,r2
81133088:	00a04574 	movhi	r2,33045
8113308c:	108ffd04 	addi	r2,r2,16372
81133090:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81133094:	d0a09517 	ldw	r2,-32172(gp)
81133098:	10800a17 	ldw	r2,40(r2)
8113309c:	10800804 	addi	r2,r2,32
811330a0:	10800037 	ldwio	r2,0(r2)
811330a4:	1007883a 	mov	r3,r2
811330a8:	00a04574 	movhi	r2,33045
811330ac:	108ffd04 	addi	r2,r2,16372
811330b0:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
811330b4:	d0a09517 	ldw	r2,-32172(gp)
811330b8:	10800a17 	ldw	r2,40(r2)
811330bc:	10800904 	addi	r2,r2,36
811330c0:	10800023 	ldbuio	r2,0(r2)
811330c4:	10803fcc 	andi	r2,r2,255
811330c8:	1007883a 	mov	r3,r2
811330cc:	00a04574 	movhi	r2,33045
811330d0:	108ffd04 	addi	r2,r2,16372
811330d4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
811330d8:	d0a09517 	ldw	r2,-32172(gp)
811330dc:	10800a17 	ldw	r2,40(r2)
811330e0:	10800944 	addi	r2,r2,37
811330e4:	10800023 	ldbuio	r2,0(r2)
811330e8:	10803fcc 	andi	r2,r2,255
811330ec:	1007883a 	mov	r3,r2
811330f0:	00a04574 	movhi	r2,33045
811330f4:	108ffd04 	addi	r2,r2,16372
811330f8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
811330fc:	d0a09517 	ldw	r2,-32172(gp)
81133100:	10800a17 	ldw	r2,40(r2)
81133104:	10800984 	addi	r2,r2,38
81133108:	10800023 	ldbuio	r2,0(r2)
8113310c:	10803fcc 	andi	r2,r2,255
81133110:	1007883a 	mov	r3,r2
81133114:	00a04574 	movhi	r2,33045
81133118:	108ffd04 	addi	r2,r2,16372
8113311c:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
81133120:	00a04574 	movhi	r2,33045
81133124:	108ffd04 	addi	r2,r2,16372
81133128:	1080040b 	ldhu	r2,16(r2)
8113312c:	10ffffcc 	andi	r3,r2,65535
81133130:	00a04574 	movhi	r2,33045
81133134:	108ffd04 	addi	r2,r2,16372
81133138:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
8113313c:	00a04574 	movhi	r2,33045
81133140:	108ffd04 	addi	r2,r2,16372
81133144:	10c01117 	ldw	r3,68(r2)
81133148:	00a04574 	movhi	r2,33045
8113314c:	108ffd04 	addi	r2,r2,16372
81133150:	1080068b 	ldhu	r2,26(r2)
81133154:	10bfffcc 	andi	r2,r2,65535
81133158:	1887883a 	add	r3,r3,r2
8113315c:	00a04574 	movhi	r2,33045
81133160:	108ffd04 	addi	r2,r2,16372
81133164:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81133168:	00a04574 	movhi	r2,33045
8113316c:	108ffd04 	addi	r2,r2,16372
81133170:	10c01217 	ldw	r3,72(r2)
81133174:	00a04574 	movhi	r2,33045
81133178:	108ffd04 	addi	r2,r2,16372
8113317c:	1080068b 	ldhu	r2,26(r2)
81133180:	10bfffcc 	andi	r2,r2,65535
81133184:	1887883a 	add	r3,r3,r2
81133188:	00a04574 	movhi	r2,33045
8113318c:	108ffd04 	addi	r2,r2,16372
81133190:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81133194:	00a04574 	movhi	r2,33045
81133198:	108ffd04 	addi	r2,r2,16372
8113319c:	10c01317 	ldw	r3,76(r2)
811331a0:	00a04574 	movhi	r2,33045
811331a4:	108ffd04 	addi	r2,r2,16372
811331a8:	1080050b 	ldhu	r2,20(r2)
811331ac:	10bfffcc 	andi	r2,r2,65535
811331b0:	1008917a 	slli	r4,r2,5
811331b4:	00a04574 	movhi	r2,33045
811331b8:	108ffd04 	addi	r2,r2,16372
811331bc:	1080030b 	ldhu	r2,12(r2)
811331c0:	10bfffcc 	andi	r2,r2,65535
811331c4:	2085283a 	div	r2,r4,r2
811331c8:	1887883a 	add	r3,r3,r2
811331cc:	00a04574 	movhi	r2,33045
811331d0:	108ffd04 	addi	r2,r2,16372
811331d4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
811331d8:	00a04574 	movhi	r2,33045
811331dc:	108ffd04 	addi	r2,r2,16372
811331e0:	1080058b 	ldhu	r2,22(r2)
811331e4:	10bfffcc 	andi	r2,r2,65535
811331e8:	10000b26 	beq	r2,zero,81133218 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811331ec:	00a04574 	movhi	r2,33045
811331f0:	108ffd04 	addi	r2,r2,16372
811331f4:	1080058b 	ldhu	r2,22(r2)
811331f8:	10ffffcc 	andi	r3,r2,65535
811331fc:	00a04574 	movhi	r2,33045
81133200:	108ffd04 	addi	r2,r2,16372
81133204:	10800383 	ldbu	r2,14(r2)
81133208:	10803fcc 	andi	r2,r2,255
8113320c:	1885283a 	div	r2,r3,r2
81133210:	e0bffd15 	stw	r2,-12(fp)
81133214:	00000906 	br	8113323c <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
81133218:	00a04574 	movhi	r2,33045
8113321c:	108ffd04 	addi	r2,r2,16372
81133220:	10c00917 	ldw	r3,36(r2)
81133224:	00a04574 	movhi	r2,33045
81133228:	108ffd04 	addi	r2,r2,16372
8113322c:	10800383 	ldbu	r2,14(r2)
81133230:	10803fcc 	andi	r2,r2,255
81133234:	1885203a 	divu	r2,r3,r2
81133238:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
8113323c:	e0bffd17 	ldw	r2,-12(fp)
81133240:	1083fdc8 	cmpgei	r2,r2,4087
81133244:	1000051e 	bne	r2,zero,8113325c <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81133248:	00a04574 	movhi	r2,33045
8113324c:	108ffd04 	addi	r2,r2,16372
81133250:	00c00304 	movi	r3,12
81133254:	10c01085 	stb	r3,66(r2)
81133258:	00000c06 	br	8113328c <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
8113325c:	e0bffd17 	ldw	r2,-12(fp)
81133260:	00fffb54 	movui	r3,65517
81133264:	18800516 	blt	r3,r2,8113327c <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81133268:	00a04574 	movhi	r2,33045
8113326c:	108ffd04 	addi	r2,r2,16372
81133270:	00c00404 	movi	r3,16
81133274:	10c01085 	stb	r3,66(r2)
81133278:	00000406 	br	8113328c <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8113327c:	00a04574 	movhi	r2,33045
81133280:	108ffd04 	addi	r2,r2,16372
81133284:	00c00804 	movi	r3,32
81133288:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8113328c:	e03ffc15 	stw	zero,-16(fp)
81133290:	00001106 	br	811332d8 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81133294:	d0a09517 	ldw	r2,-32172(gp)
81133298:	10c00a17 	ldw	r3,40(r2)
8113329c:	e0bffc17 	ldw	r2,-16(fp)
811332a0:	1885883a 	add	r2,r3,r2
811332a4:	108009c4 	addi	r2,r2,39
811332a8:	10800023 	ldbuio	r2,0(r2)
811332ac:	10803fcc 	andi	r2,r2,255
811332b0:	1009883a 	mov	r4,r2
811332b4:	00a04574 	movhi	r2,33045
811332b8:	108ffd04 	addi	r2,r2,16372
811332bc:	e0fffc17 	ldw	r3,-16(fp)
811332c0:	10c5883a 	add	r2,r2,r3
811332c4:	10800ac4 	addi	r2,r2,43
811332c8:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
811332cc:	e0bffc17 	ldw	r2,-16(fp)
811332d0:	10800044 	addi	r2,r2,1
811332d4:	e0bffc15 	stw	r2,-16(fp)
811332d8:	e0bffc17 	ldw	r2,-16(fp)
811332dc:	10800110 	cmplti	r2,r2,4
811332e0:	103fec1e 	bne	r2,zero,81133294 <__reset+0xfb113294>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811332e4:	e03ffc15 	stw	zero,-16(fp)
811332e8:	00001106 	br	81133330 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811332ec:	d0a09517 	ldw	r2,-32172(gp)
811332f0:	10c00a17 	ldw	r3,40(r2)
811332f4:	e0bffc17 	ldw	r2,-16(fp)
811332f8:	1885883a 	add	r2,r3,r2
811332fc:	10800ac4 	addi	r2,r2,43
81133300:	10800023 	ldbuio	r2,0(r2)
81133304:	10803fcc 	andi	r2,r2,255
81133308:	1009883a 	mov	r4,r2
8113330c:	00a04574 	movhi	r2,33045
81133310:	108ffd04 	addi	r2,r2,16372
81133314:	e0fffc17 	ldw	r3,-16(fp)
81133318:	10c5883a 	add	r2,r2,r3
8113331c:	10800bc4 	addi	r2,r2,47
81133320:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
81133324:	e0bffc17 	ldw	r2,-16(fp)
81133328:	10800044 	addi	r2,r2,1
8113332c:	e0bffc15 	stw	r2,-16(fp)
81133330:	e0bffc17 	ldw	r2,-16(fp)
81133334:	108002d0 	cmplti	r2,r2,11
81133338:	103fec1e 	bne	r2,zero,811332ec <__reset+0xfb1132ec>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8113333c:	e03ffc15 	stw	zero,-16(fp)
81133340:	00001106 	br	81133388 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
81133344:	d0a09517 	ldw	r2,-32172(gp)
81133348:	10c00a17 	ldw	r3,40(r2)
8113334c:	e0bffc17 	ldw	r2,-16(fp)
81133350:	1885883a 	add	r2,r3,r2
81133354:	10800d84 	addi	r2,r2,54
81133358:	10800023 	ldbuio	r2,0(r2)
8113335c:	10803fcc 	andi	r2,r2,255
81133360:	1009883a 	mov	r4,r2
81133364:	00a04574 	movhi	r2,33045
81133368:	108ffd04 	addi	r2,r2,16372
8113336c:	e0fffc17 	ldw	r3,-16(fp)
81133370:	10c5883a 	add	r2,r2,r3
81133374:	10800e84 	addi	r2,r2,58
81133378:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8113337c:	e0bffc17 	ldw	r2,-16(fp)
81133380:	10800044 	addi	r2,r2,1
81133384:	e0bffc15 	stw	r2,-16(fp)
81133388:	e0bffc17 	ldw	r2,-16(fp)
8113338c:	10800210 	cmplti	r2,r2,8
81133390:	103fec1e 	bne	r2,zero,81133344 <__reset+0xfb113344>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81133394:	e03ffc15 	stw	zero,-16(fp)
81133398:	00000a06 	br	811333c4 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
8113339c:	00a04574 	movhi	r2,33045
811333a0:	10901204 	addi	r2,r2,16456
811333a4:	e0fffc17 	ldw	r3,-16(fp)
811333a8:	180691ba 	slli	r3,r3,6
811333ac:	10c5883a 	add	r2,r2,r3
811333b0:	10800f04 	addi	r2,r2,60
811333b4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
811333b8:	e0bffc17 	ldw	r2,-16(fp)
811333bc:	10800044 	addi	r2,r2,1
811333c0:	e0bffc15 	stw	r2,-16(fp)
811333c4:	e0bffc17 	ldw	r2,-16(fp)
811333c8:	10800510 	cmplti	r2,r2,20
811333cc:	103ff31e 	bne	r2,zero,8113339c <__reset+0xfb11339c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
811333d0:	00800044 	movi	r2,1
811333d4:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
811333d8:	00000106 	br	811333e0 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
811333dc:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
811333e0:	e0bffb17 	ldw	r2,-20(fp)
}
811333e4:	e037883a 	mov	sp,fp
811333e8:	dfc00117 	ldw	ra,4(sp)
811333ec:	df000017 	ldw	fp,0(sp)
811333f0:	dec00204 	addi	sp,sp,8
811333f4:	f800283a 	ret

811333f8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811333f8:	defffc04 	addi	sp,sp,-16
811333fc:	de00012e 	bgeu	sp,et,81133404 <Look_for_FAT16+0xc>
81133400:	003b68fa 	trap	3
81133404:	dfc00315 	stw	ra,12(sp)
81133408:	df000215 	stw	fp,8(sp)
8113340c:	df000204 	addi	fp,sp,8
	bool result = false;
81133410:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
81133414:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81133418:	10002e26 	beq	r2,zero,811334d4 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
8113341c:	d0a08f17 	ldw	r2,-32196(gp)
81133420:	1080000b 	ldhu	r2,0(r2)
81133424:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
81133428:	d0209315 	stw	zero,-32180(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
8113342c:	d0209415 	stw	zero,-32176(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
81133430:	e0bfff0f 	ldh	r2,-4(fp)
81133434:	10002716 	blt	r2,zero,811334d4 <Look_for_FAT16+0xdc>
81133438:	e0bfff0b 	ldhu	r2,-4(fp)
8113343c:	10bfffcc 	andi	r2,r2,65535
81133440:	1083000c 	andi	r2,r2,3072
81133444:	10830020 	cmpeqi	r2,r2,3072
81133448:	1000221e 	bne	r2,zero,811334d4 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8113344c:	e0bfff0b 	ldhu	r2,-4(fp)
81133450:	10bfffcc 	andi	r2,r2,65535
81133454:	1083000c 	andi	r2,r2,3072
81133458:	10810018 	cmpnei	r2,r2,1024
8113345c:	1000031e 	bne	r2,zero,8113346c <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81133460:	0009883a 	mov	r4,zero
81133464:	1132d700 	call	81132d70 <Check_for_DOS_FAT>
81133468:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8113346c:	e0bfff0b 	ldhu	r2,-4(fp)
81133470:	10bfffcc 	andi	r2,r2,65535
81133474:	1083000c 	andi	r2,r2,3072
81133478:	1000061e 	bne	r2,zero,81133494 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8113347c:	11326ac0 	call	811326ac <Check_for_Master_Boot_Record>
81133480:	10000426 	beq	r2,zero,81133494 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81133484:	d0a09317 	ldw	r2,-32180(gp)
81133488:	1009883a 	mov	r4,r2
8113348c:	1132d700 	call	81132d70 <Check_for_DOS_FAT>
81133490:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81133494:	e0bffe17 	ldw	r2,-8(fp)
81133498:	10800058 	cmpnei	r2,r2,1
8113349c:	10000d1e 	bne	r2,zero,811334d4 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
811334a0:	00a04574 	movhi	r2,33045
811334a4:	108ffd04 	addi	r2,r2,16372
811334a8:	10801083 	ldbu	r2,66(r2)
811334ac:	10803fcc 	andi	r2,r2,255
811334b0:	10800420 	cmpeqi	r2,r2,16
811334b4:	1000021e 	bne	r2,zero,811334c0 <Look_for_FAT16+0xc8>
				{
					result = false;
811334b8:	e03ffe15 	stw	zero,-8(fp)
811334bc:	00000506 	br	811334d4 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
811334c0:	00a04574 	movhi	r2,33045
811334c4:	108ffd04 	addi	r2,r2,16372
811334c8:	1080058b 	ldhu	r2,22(r2)
811334cc:	10bfffcc 	andi	r2,r2,65535
811334d0:	d0a09415 	stw	r2,-32176(gp)
				}
			}
		}
	}
	return result;
811334d4:	e0bffe17 	ldw	r2,-8(fp)
}
811334d8:	e037883a 	mov	sp,fp
811334dc:	dfc00117 	ldw	ra,4(sp)
811334e0:	df000017 	ldw	fp,0(sp)
811334e4:	dec00204 	addi	sp,sp,8
811334e8:	f800283a 	ret

811334ec <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811334ec:	defffb04 	addi	sp,sp,-20
811334f0:	de00012e 	bgeu	sp,et,811334f8 <filename_to_upper_case+0xc>
811334f4:	003b68fa 	trap	3
811334f8:	dfc00415 	stw	ra,16(sp)
811334fc:	df000315 	stw	fp,12(sp)
81133500:	df000304 	addi	fp,sp,12
81133504:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
81133508:	e13fff17 	ldw	r4,-4(fp)
8113350c:	11132f80 	call	811132f8 <strlen>
81133510:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
81133514:	e03ffd15 	stw	zero,-12(fp)
81133518:	00001e06 	br	81133594 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
8113351c:	e0bffd17 	ldw	r2,-12(fp)
81133520:	e0ffff17 	ldw	r3,-4(fp)
81133524:	1885883a 	add	r2,r3,r2
81133528:	10800003 	ldbu	r2,0(r2)
8113352c:	10803fcc 	andi	r2,r2,255
81133530:	1080201c 	xori	r2,r2,128
81133534:	10bfe004 	addi	r2,r2,-128
81133538:	10801850 	cmplti	r2,r2,97
8113353c:	1000121e 	bne	r2,zero,81133588 <filename_to_upper_case+0x9c>
81133540:	e0bffd17 	ldw	r2,-12(fp)
81133544:	e0ffff17 	ldw	r3,-4(fp)
81133548:	1885883a 	add	r2,r3,r2
8113354c:	10800003 	ldbu	r2,0(r2)
81133550:	10803fcc 	andi	r2,r2,255
81133554:	1080201c 	xori	r2,r2,128
81133558:	10bfe004 	addi	r2,r2,-128
8113355c:	10801ec8 	cmpgei	r2,r2,123
81133560:	1000091e 	bne	r2,zero,81133588 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81133564:	e0bffd17 	ldw	r2,-12(fp)
81133568:	e0ffff17 	ldw	r3,-4(fp)
8113356c:	1885883a 	add	r2,r3,r2
81133570:	e0fffd17 	ldw	r3,-12(fp)
81133574:	e13fff17 	ldw	r4,-4(fp)
81133578:	20c7883a 	add	r3,r4,r3
8113357c:	18c00003 	ldbu	r3,0(r3)
81133580:	18fff804 	addi	r3,r3,-32
81133584:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81133588:	e0bffd17 	ldw	r2,-12(fp)
8113358c:	10800044 	addi	r2,r2,1
81133590:	e0bffd15 	stw	r2,-12(fp)
81133594:	e0fffd17 	ldw	r3,-12(fp)
81133598:	e0bffe17 	ldw	r2,-8(fp)
8113359c:	18bfdf16 	blt	r3,r2,8113351c <__reset+0xfb11351c>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
811335a0:	0001883a 	nop
811335a4:	e037883a 	mov	sp,fp
811335a8:	dfc00117 	ldw	ra,4(sp)
811335ac:	df000017 	ldw	fp,0(sp)
811335b0:	dec00204 	addi	sp,sp,8
811335b4:	f800283a 	ret

811335b8 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
811335b8:	defff804 	addi	sp,sp,-32
811335bc:	de00012e 	bgeu	sp,et,811335c4 <check_file_name_for_FAT16_compliance+0xc>
811335c0:	003b68fa 	trap	3
811335c4:	dfc00715 	stw	ra,28(sp)
811335c8:	df000615 	stw	fp,24(sp)
811335cc:	df000604 	addi	fp,sp,24
811335d0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
811335d4:	e13fff17 	ldw	r4,-4(fp)
811335d8:	11132f80 	call	811132f8 <strlen>
811335dc:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
811335e0:	00bfffc4 	movi	r2,-1
811335e4:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
811335e8:	00bfffc4 	movi	r2,-1
811335ec:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
811335f0:	00800044 	movi	r2,1
811335f4:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
811335f8:	e03ffa15 	stw	zero,-24(fp)
811335fc:	00006d06 	br	811337b4 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
81133600:	e0bffa17 	ldw	r2,-24(fp)
81133604:	e0ffff17 	ldw	r3,-4(fp)
81133608:	1885883a 	add	r2,r3,r2
8113360c:	10800003 	ldbu	r2,0(r2)
81133610:	10803fcc 	andi	r2,r2,255
81133614:	1080201c 	xori	r2,r2,128
81133618:	10bfe004 	addi	r2,r2,-128
8113361c:	10800820 	cmpeqi	r2,r2,32
81133620:	10003e1e 	bne	r2,zero,8113371c <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81133624:	e0bffa17 	ldw	r2,-24(fp)
81133628:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
8113362c:	e0bffb17 	ldw	r2,-20(fp)
81133630:	1880121e 	bne	r3,r2,8113367c <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81133634:	e0bffa17 	ldw	r2,-24(fp)
81133638:	e0ffff17 	ldw	r3,-4(fp)
8113363c:	1885883a 	add	r2,r3,r2
81133640:	10800003 	ldbu	r2,0(r2)
81133644:	10803fcc 	andi	r2,r2,255
81133648:	1080201c 	xori	r2,r2,128
8113364c:	10bfe004 	addi	r2,r2,-128
81133650:	10801720 	cmpeqi	r2,r2,92
81133654:	1000311e 	bne	r2,zero,8113371c <check_file_name_for_FAT16_compliance+0x164>
81133658:	e0bffa17 	ldw	r2,-24(fp)
8113365c:	e0ffff17 	ldw	r3,-4(fp)
81133660:	1885883a 	add	r2,r3,r2
81133664:	10800003 	ldbu	r2,0(r2)
81133668:	10803fcc 	andi	r2,r2,255
8113366c:	1080201c 	xori	r2,r2,128
81133670:	10bfe004 	addi	r2,r2,-128
81133674:	10800be0 	cmpeqi	r2,r2,47
81133678:	1000281e 	bne	r2,zero,8113371c <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8113367c:	e0fffa17 	ldw	r3,-24(fp)
81133680:	e0bffc17 	ldw	r2,-16(fp)
81133684:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81133688:	10800258 	cmpnei	r2,r2,9
8113368c:	1000091e 	bne	r2,zero,811336b4 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81133690:	e0bffa17 	ldw	r2,-24(fp)
81133694:	e0ffff17 	ldw	r3,-4(fp)
81133698:	1885883a 	add	r2,r3,r2
8113369c:	10800003 	ldbu	r2,0(r2)
811336a0:	10803fcc 	andi	r2,r2,255
811336a4:	1080201c 	xori	r2,r2,128
811336a8:	10bfe004 	addi	r2,r2,-128
811336ac:	10800b98 	cmpnei	r2,r2,46
811336b0:	10001a1e 	bne	r2,zero,8113371c <check_file_name_for_FAT16_compliance+0x164>
811336b4:	e0fffb17 	ldw	r3,-20(fp)
811336b8:	e0bffc17 	ldw	r2,-16(fp)
811336bc:	18801926 	beq	r3,r2,81133724 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
811336c0:	e0fffa17 	ldw	r3,-24(fp)
811336c4:	e0bffc17 	ldw	r2,-16(fp)
811336c8:	1885c83a 	sub	r2,r3,r2
811336cc:	10800110 	cmplti	r2,r2,4
811336d0:	1000141e 	bne	r2,zero,81133724 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
811336d4:	e0bffa17 	ldw	r2,-24(fp)
811336d8:	e0ffff17 	ldw	r3,-4(fp)
811336dc:	1885883a 	add	r2,r3,r2
811336e0:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
811336e4:	10803fcc 	andi	r2,r2,255
811336e8:	1080201c 	xori	r2,r2,128
811336ec:	10bfe004 	addi	r2,r2,-128
811336f0:	10801720 	cmpeqi	r2,r2,92
811336f4:	10000b1e 	bne	r2,zero,81133724 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
811336f8:	e0bffa17 	ldw	r2,-24(fp)
811336fc:	e0ffff17 	ldw	r3,-4(fp)
81133700:	1885883a 	add	r2,r3,r2
81133704:	10800003 	ldbu	r2,0(r2)
81133708:	10803fcc 	andi	r2,r2,255
8113370c:	1080201c 	xori	r2,r2,128
81133710:	10bfe004 	addi	r2,r2,-128
81133714:	10800be0 	cmpeqi	r2,r2,47
81133718:	1000021e 	bne	r2,zero,81133724 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
8113371c:	e03ffd15 	stw	zero,-12(fp)
            break;
81133720:	00002706 	br	811337c0 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
81133724:	e0bffa17 	ldw	r2,-24(fp)
81133728:	e0ffff17 	ldw	r3,-4(fp)
8113372c:	1885883a 	add	r2,r3,r2
81133730:	10800003 	ldbu	r2,0(r2)
81133734:	10803fcc 	andi	r2,r2,255
81133738:	1080201c 	xori	r2,r2,128
8113373c:	10bfe004 	addi	r2,r2,-128
81133740:	10801720 	cmpeqi	r2,r2,92
81133744:	1000091e 	bne	r2,zero,8113376c <check_file_name_for_FAT16_compliance+0x1b4>
81133748:	e0bffa17 	ldw	r2,-24(fp)
8113374c:	e0ffff17 	ldw	r3,-4(fp)
81133750:	1885883a 	add	r2,r3,r2
81133754:	10800003 	ldbu	r2,0(r2)
81133758:	10803fcc 	andi	r2,r2,255
8113375c:	1080201c 	xori	r2,r2,128
81133760:	10bfe004 	addi	r2,r2,-128
81133764:	10800bd8 	cmpnei	r2,r2,47
81133768:	1000041e 	bne	r2,zero,8113377c <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
8113376c:	e0bffa17 	ldw	r2,-24(fp)
81133770:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
81133774:	e0bffa17 	ldw	r2,-24(fp)
81133778:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
8113377c:	e0bffa17 	ldw	r2,-24(fp)
81133780:	e0ffff17 	ldw	r3,-4(fp)
81133784:	1885883a 	add	r2,r3,r2
81133788:	10800003 	ldbu	r2,0(r2)
8113378c:	10803fcc 	andi	r2,r2,255
81133790:	1080201c 	xori	r2,r2,128
81133794:	10bfe004 	addi	r2,r2,-128
81133798:	10800b98 	cmpnei	r2,r2,46
8113379c:	1000021e 	bne	r2,zero,811337a8 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
811337a0:	e0bffa17 	ldw	r2,-24(fp)
811337a4:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
811337a8:	e0bffa17 	ldw	r2,-24(fp)
811337ac:	10800044 	addi	r2,r2,1
811337b0:	e0bffa15 	stw	r2,-24(fp)
811337b4:	e0fffa17 	ldw	r3,-24(fp)
811337b8:	e0bffe17 	ldw	r2,-8(fp)
811337bc:	18bf9016 	blt	r3,r2,81133600 <__reset+0xfb113600>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
811337c0:	e0bffe17 	ldw	r2,-8(fp)
811337c4:	10bfffc4 	addi	r2,r2,-1
811337c8:	e0ffff17 	ldw	r3,-4(fp)
811337cc:	1885883a 	add	r2,r3,r2
811337d0:	10800003 	ldbu	r2,0(r2)
811337d4:	10803fcc 	andi	r2,r2,255
811337d8:	1080201c 	xori	r2,r2,128
811337dc:	10bfe004 	addi	r2,r2,-128
811337e0:	10801720 	cmpeqi	r2,r2,92
811337e4:	10000a1e 	bne	r2,zero,81133810 <check_file_name_for_FAT16_compliance+0x258>
811337e8:	e0bffe17 	ldw	r2,-8(fp)
811337ec:	10bfffc4 	addi	r2,r2,-1
811337f0:	e0ffff17 	ldw	r3,-4(fp)
811337f4:	1885883a 	add	r2,r3,r2
811337f8:	10800003 	ldbu	r2,0(r2)
811337fc:	10803fcc 	andi	r2,r2,255
81133800:	1080201c 	xori	r2,r2,128
81133804:	10bfe004 	addi	r2,r2,-128
81133808:	10800bd8 	cmpnei	r2,r2,47
8113380c:	1000011e 	bne	r2,zero,81133814 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81133810:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81133814:	e0bffd17 	ldw	r2,-12(fp)
}
81133818:	e037883a 	mov	sp,fp
8113381c:	dfc00117 	ldw	ra,4(sp)
81133820:	df000017 	ldw	fp,0(sp)
81133824:	dec00204 	addi	sp,sp,8
81133828:	f800283a 	ret

8113382c <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
8113382c:	defffb04 	addi	sp,sp,-20
81133830:	de00012e 	bgeu	sp,et,81133838 <get_dir_divider_location+0xc>
81133834:	003b68fa 	trap	3
81133838:	dfc00415 	stw	ra,16(sp)
8113383c:	df000315 	stw	fp,12(sp)
81133840:	df000304 	addi	fp,sp,12
81133844:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81133848:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
8113384c:	e13fff17 	ldw	r4,-4(fp)
81133850:	11132f80 	call	811132f8 <strlen>
81133854:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81133858:	e03ffd15 	stw	zero,-12(fp)
8113385c:	00001506 	br	811338b4 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81133860:	e0bffd17 	ldw	r2,-12(fp)
81133864:	e0ffff17 	ldw	r3,-4(fp)
81133868:	1885883a 	add	r2,r3,r2
8113386c:	10800003 	ldbu	r2,0(r2)
81133870:	10803fcc 	andi	r2,r2,255
81133874:	1080201c 	xori	r2,r2,128
81133878:	10bfe004 	addi	r2,r2,-128
8113387c:	10801720 	cmpeqi	r2,r2,92
81133880:	10000f1e 	bne	r2,zero,811338c0 <get_dir_divider_location+0x94>
81133884:	e0bffd17 	ldw	r2,-12(fp)
81133888:	e0ffff17 	ldw	r3,-4(fp)
8113388c:	1885883a 	add	r2,r3,r2
81133890:	10800003 	ldbu	r2,0(r2)
81133894:	10803fcc 	andi	r2,r2,255
81133898:	1080201c 	xori	r2,r2,128
8113389c:	10bfe004 	addi	r2,r2,-128
811338a0:	10800be0 	cmpeqi	r2,r2,47
811338a4:	1000061e 	bne	r2,zero,811338c0 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
811338a8:	e0bffd17 	ldw	r2,-12(fp)
811338ac:	10800044 	addi	r2,r2,1
811338b0:	e0bffd15 	stw	r2,-12(fp)
811338b4:	e0fffd17 	ldw	r3,-12(fp)
811338b8:	e0bffe17 	ldw	r2,-8(fp)
811338bc:	18bfe816 	blt	r3,r2,81133860 <__reset+0xfb113860>
        {
            break;
        }
    }
    
    if (index == length)
811338c0:	e0fffd17 	ldw	r3,-12(fp)
811338c4:	e0bffe17 	ldw	r2,-8(fp)
811338c8:	1880021e 	bne	r3,r2,811338d4 <get_dir_divider_location+0xa8>
    {
        index = -1;
811338cc:	00bfffc4 	movi	r2,-1
811338d0:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
811338d4:	e0bffd17 	ldw	r2,-12(fp)
}
811338d8:	e037883a 	mov	sp,fp
811338dc:	dfc00117 	ldw	ra,4(sp)
811338e0:	df000017 	ldw	fp,0(sp)
811338e4:	dec00204 	addi	sp,sp,8
811338e8:	f800283a 	ret

811338ec <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
811338ec:	defffa04 	addi	sp,sp,-24
811338f0:	de00012e 	bgeu	sp,et,811338f8 <match_file_record_to_name_ext+0xc>
811338f4:	003b68fa 	trap	3
811338f8:	df000515 	stw	fp,20(sp)
811338fc:	df000504 	addi	fp,sp,20
81133900:	e13ffd15 	stw	r4,-12(fp)
81133904:	e17ffe15 	stw	r5,-8(fp)
81133908:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
8113390c:	00800044 	movi	r2,1
81133910:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81133914:	e03ffc15 	stw	zero,-16(fp)
81133918:	00004606 	br	81133a34 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
8113391c:	e0fffd17 	ldw	r3,-12(fp)
81133920:	e0bffc17 	ldw	r2,-16(fp)
81133924:	1885883a 	add	r2,r3,r2
81133928:	10800003 	ldbu	r2,0(r2)
8113392c:	10803fcc 	andi	r2,r2,255
81133930:	10801870 	cmpltui	r2,r2,97
81133934:	1000101e 	bne	r2,zero,81133978 <match_file_record_to_name_ext+0x8c>
81133938:	e0fffd17 	ldw	r3,-12(fp)
8113393c:	e0bffc17 	ldw	r2,-16(fp)
81133940:	1885883a 	add	r2,r3,r2
81133944:	10800003 	ldbu	r2,0(r2)
81133948:	10803fcc 	andi	r2,r2,255
8113394c:	10801ee8 	cmpgeui	r2,r2,123
81133950:	1000091e 	bne	r2,zero,81133978 <match_file_record_to_name_ext+0x8c>
81133954:	e0fffd17 	ldw	r3,-12(fp)
81133958:	e0bffc17 	ldw	r2,-16(fp)
8113395c:	1885883a 	add	r2,r3,r2
81133960:	10800003 	ldbu	r2,0(r2)
81133964:	10bff804 	addi	r2,r2,-32
81133968:	10c03fcc 	andi	r3,r2,255
8113396c:	18c0201c 	xori	r3,r3,128
81133970:	18ffe004 	addi	r3,r3,-128
81133974:	00000706 	br	81133994 <match_file_record_to_name_ext+0xa8>
81133978:	e0fffd17 	ldw	r3,-12(fp)
8113397c:	e0bffc17 	ldw	r2,-16(fp)
81133980:	1885883a 	add	r2,r3,r2
81133984:	10800003 	ldbu	r2,0(r2)
81133988:	10c03fcc 	andi	r3,r2,255
8113398c:	18c0201c 	xori	r3,r3,128
81133990:	18ffe004 	addi	r3,r3,-128
81133994:	e0bffc17 	ldw	r2,-16(fp)
81133998:	e13ffe17 	ldw	r4,-8(fp)
8113399c:	2085883a 	add	r2,r4,r2
811339a0:	10800003 	ldbu	r2,0(r2)
811339a4:	10803fcc 	andi	r2,r2,255
811339a8:	1080201c 	xori	r2,r2,128
811339ac:	10bfe004 	addi	r2,r2,-128
811339b0:	10801850 	cmplti	r2,r2,97
811339b4:	1000121e 	bne	r2,zero,81133a00 <match_file_record_to_name_ext+0x114>
811339b8:	e0bffc17 	ldw	r2,-16(fp)
811339bc:	e13ffe17 	ldw	r4,-8(fp)
811339c0:	2085883a 	add	r2,r4,r2
811339c4:	10800003 	ldbu	r2,0(r2)
811339c8:	10803fcc 	andi	r2,r2,255
811339cc:	1080201c 	xori	r2,r2,128
811339d0:	10bfe004 	addi	r2,r2,-128
811339d4:	10801ec8 	cmpgei	r2,r2,123
811339d8:	1000091e 	bne	r2,zero,81133a00 <match_file_record_to_name_ext+0x114>
811339dc:	e0bffc17 	ldw	r2,-16(fp)
811339e0:	e13ffe17 	ldw	r4,-8(fp)
811339e4:	2085883a 	add	r2,r4,r2
811339e8:	10800003 	ldbu	r2,0(r2)
811339ec:	10bff804 	addi	r2,r2,-32
811339f0:	10803fcc 	andi	r2,r2,255
811339f4:	1080201c 	xori	r2,r2,128
811339f8:	10bfe004 	addi	r2,r2,-128
811339fc:	00000706 	br	81133a1c <match_file_record_to_name_ext+0x130>
81133a00:	e0bffc17 	ldw	r2,-16(fp)
81133a04:	e13ffe17 	ldw	r4,-8(fp)
81133a08:	2085883a 	add	r2,r4,r2
81133a0c:	10800003 	ldbu	r2,0(r2)
81133a10:	10803fcc 	andi	r2,r2,255
81133a14:	1080201c 	xori	r2,r2,128
81133a18:	10bfe004 	addi	r2,r2,-128
81133a1c:	18800226 	beq	r3,r2,81133a28 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81133a20:	e03ffb15 	stw	zero,-20(fp)
			break;
81133a24:	00000606 	br	81133a40 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81133a28:	e0bffc17 	ldw	r2,-16(fp)
81133a2c:	10800044 	addi	r2,r2,1
81133a30:	e0bffc15 	stw	r2,-16(fp)
81133a34:	e0bffc17 	ldw	r2,-16(fp)
81133a38:	10800210 	cmplti	r2,r2,8
81133a3c:	103fb71e 	bne	r2,zero,8113391c <__reset+0xfb11391c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81133a40:	e03ffc15 	stw	zero,-16(fp)
81133a44:	00004a06 	br	81133b70 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81133a48:	e0fffd17 	ldw	r3,-12(fp)
81133a4c:	e0bffc17 	ldw	r2,-16(fp)
81133a50:	1885883a 	add	r2,r3,r2
81133a54:	10800204 	addi	r2,r2,8
81133a58:	10800003 	ldbu	r2,0(r2)
81133a5c:	10803fcc 	andi	r2,r2,255
81133a60:	10801870 	cmpltui	r2,r2,97
81133a64:	1000121e 	bne	r2,zero,81133ab0 <match_file_record_to_name_ext+0x1c4>
81133a68:	e0fffd17 	ldw	r3,-12(fp)
81133a6c:	e0bffc17 	ldw	r2,-16(fp)
81133a70:	1885883a 	add	r2,r3,r2
81133a74:	10800204 	addi	r2,r2,8
81133a78:	10800003 	ldbu	r2,0(r2)
81133a7c:	10803fcc 	andi	r2,r2,255
81133a80:	10801ee8 	cmpgeui	r2,r2,123
81133a84:	10000a1e 	bne	r2,zero,81133ab0 <match_file_record_to_name_ext+0x1c4>
81133a88:	e0fffd17 	ldw	r3,-12(fp)
81133a8c:	e0bffc17 	ldw	r2,-16(fp)
81133a90:	1885883a 	add	r2,r3,r2
81133a94:	10800204 	addi	r2,r2,8
81133a98:	10800003 	ldbu	r2,0(r2)
81133a9c:	10bff804 	addi	r2,r2,-32
81133aa0:	10c03fcc 	andi	r3,r2,255
81133aa4:	18c0201c 	xori	r3,r3,128
81133aa8:	18ffe004 	addi	r3,r3,-128
81133aac:	00000806 	br	81133ad0 <match_file_record_to_name_ext+0x1e4>
81133ab0:	e0fffd17 	ldw	r3,-12(fp)
81133ab4:	e0bffc17 	ldw	r2,-16(fp)
81133ab8:	1885883a 	add	r2,r3,r2
81133abc:	10800204 	addi	r2,r2,8
81133ac0:	10800003 	ldbu	r2,0(r2)
81133ac4:	10c03fcc 	andi	r3,r2,255
81133ac8:	18c0201c 	xori	r3,r3,128
81133acc:	18ffe004 	addi	r3,r3,-128
81133ad0:	e0bffc17 	ldw	r2,-16(fp)
81133ad4:	e13fff17 	ldw	r4,-4(fp)
81133ad8:	2085883a 	add	r2,r4,r2
81133adc:	10800003 	ldbu	r2,0(r2)
81133ae0:	10803fcc 	andi	r2,r2,255
81133ae4:	1080201c 	xori	r2,r2,128
81133ae8:	10bfe004 	addi	r2,r2,-128
81133aec:	10801850 	cmplti	r2,r2,97
81133af0:	1000121e 	bne	r2,zero,81133b3c <match_file_record_to_name_ext+0x250>
81133af4:	e0bffc17 	ldw	r2,-16(fp)
81133af8:	e13fff17 	ldw	r4,-4(fp)
81133afc:	2085883a 	add	r2,r4,r2
81133b00:	10800003 	ldbu	r2,0(r2)
81133b04:	10803fcc 	andi	r2,r2,255
81133b08:	1080201c 	xori	r2,r2,128
81133b0c:	10bfe004 	addi	r2,r2,-128
81133b10:	10801ec8 	cmpgei	r2,r2,123
81133b14:	1000091e 	bne	r2,zero,81133b3c <match_file_record_to_name_ext+0x250>
81133b18:	e0bffc17 	ldw	r2,-16(fp)
81133b1c:	e13fff17 	ldw	r4,-4(fp)
81133b20:	2085883a 	add	r2,r4,r2
81133b24:	10800003 	ldbu	r2,0(r2)
81133b28:	10bff804 	addi	r2,r2,-32
81133b2c:	10803fcc 	andi	r2,r2,255
81133b30:	1080201c 	xori	r2,r2,128
81133b34:	10bfe004 	addi	r2,r2,-128
81133b38:	00000706 	br	81133b58 <match_file_record_to_name_ext+0x26c>
81133b3c:	e0bffc17 	ldw	r2,-16(fp)
81133b40:	e13fff17 	ldw	r4,-4(fp)
81133b44:	2085883a 	add	r2,r4,r2
81133b48:	10800003 	ldbu	r2,0(r2)
81133b4c:	10803fcc 	andi	r2,r2,255
81133b50:	1080201c 	xori	r2,r2,128
81133b54:	10bfe004 	addi	r2,r2,-128
81133b58:	18800226 	beq	r3,r2,81133b64 <match_file_record_to_name_ext+0x278>
        {
            match = false;
81133b5c:	e03ffb15 	stw	zero,-20(fp)
			break;
81133b60:	00000606 	br	81133b7c <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81133b64:	e0bffc17 	ldw	r2,-16(fp)
81133b68:	10800044 	addi	r2,r2,1
81133b6c:	e0bffc15 	stw	r2,-16(fp)
81133b70:	e0bffc17 	ldw	r2,-16(fp)
81133b74:	108000d0 	cmplti	r2,r2,3
81133b78:	103fb31e 	bne	r2,zero,81133a48 <__reset+0xfb113a48>
        {
            match = false;
			break;
        }
    }
	return match;
81133b7c:	e0bffb17 	ldw	r2,-20(fp)
}
81133b80:	e037883a 	mov	sp,fp
81133b84:	df000017 	ldw	fp,0(sp)
81133b88:	dec00104 	addi	sp,sp,4
81133b8c:	f800283a 	ret

81133b90 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81133b90:	deffe704 	addi	sp,sp,-100
81133b94:	de00012e 	bgeu	sp,et,81133b9c <get_home_directory_cluster_for_file+0xc>
81133b98:	003b68fa 	trap	3
81133b9c:	dfc01815 	stw	ra,96(sp)
81133ba0:	df001715 	stw	fp,92(sp)
81133ba4:	df001704 	addi	fp,sp,92
81133ba8:	e13ffd15 	stw	r4,-12(fp)
81133bac:	e17ffe15 	stw	r5,-8(fp)
81133bb0:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81133bb4:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81133bb8:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81133bbc:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81133bc0:	e13ffd17 	ldw	r4,-12(fp)
81133bc4:	113382c0 	call	8113382c <get_dir_divider_location>
81133bc8:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81133bcc:	00012f06 	br	8113408c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81133bd0:	00800804 	movi	r2,32
81133bd4:	e0bff905 	stb	r2,-28(fp)
81133bd8:	00800804 	movi	r2,32
81133bdc:	e0bff945 	stb	r2,-27(fp)
81133be0:	00800804 	movi	r2,32
81133be4:	e0bff985 	stb	r2,-26(fp)
81133be8:	00800804 	movi	r2,32
81133bec:	e0bff9c5 	stb	r2,-25(fp)
81133bf0:	00800804 	movi	r2,32
81133bf4:	e0bffa05 	stb	r2,-24(fp)
81133bf8:	00800804 	movi	r2,32
81133bfc:	e0bffa45 	stb	r2,-23(fp)
81133c00:	00800804 	movi	r2,32
81133c04:	e0bffa85 	stb	r2,-22(fp)
81133c08:	00800804 	movi	r2,32
81133c0c:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81133c10:	00800804 	movi	r2,32
81133c14:	e0bffb05 	stb	r2,-20(fp)
81133c18:	00800804 	movi	r2,32
81133c1c:	e0bffb45 	stb	r2,-19(fp)
81133c20:	00800804 	movi	r2,32
81133c24:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81133c28:	00bfffc4 	movi	r2,-1
81133c2c:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81133c30:	e0bfea17 	ldw	r2,-88(fp)
81133c34:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81133c38:	e03fec15 	stw	zero,-80(fp)
81133c3c:	00002d06 	br	81133cf4 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81133c40:	e0ffec17 	ldw	r3,-80(fp)
81133c44:	e0bfed17 	ldw	r2,-76(fp)
81133c48:	1885883a 	add	r2,r3,r2
81133c4c:	1007883a 	mov	r3,r2
81133c50:	e0bffd17 	ldw	r2,-12(fp)
81133c54:	10c5883a 	add	r2,r2,r3
81133c58:	10800003 	ldbu	r2,0(r2)
81133c5c:	10803fcc 	andi	r2,r2,255
81133c60:	1080201c 	xori	r2,r2,128
81133c64:	10bfe004 	addi	r2,r2,-128
81133c68:	10800b98 	cmpnei	r2,r2,46
81133c6c:	1000031e 	bne	r2,zero,81133c7c <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81133c70:	e0bfec17 	ldw	r2,-80(fp)
81133c74:	e0bfee15 	stw	r2,-72(fp)
81133c78:	00001b06 	br	81133ce8 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
81133c7c:	e0bfee17 	ldw	r2,-72(fp)
81133c80:	10000c0e 	bge	r2,zero,81133cb4 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81133c84:	e0ffec17 	ldw	r3,-80(fp)
81133c88:	e0bfed17 	ldw	r2,-76(fp)
81133c8c:	1885883a 	add	r2,r3,r2
81133c90:	1007883a 	mov	r3,r2
81133c94:	e0bffd17 	ldw	r2,-12(fp)
81133c98:	10c5883a 	add	r2,r2,r3
81133c9c:	10c00003 	ldbu	r3,0(r2)
81133ca0:	e13ff904 	addi	r4,fp,-28
81133ca4:	e0bfec17 	ldw	r2,-80(fp)
81133ca8:	2085883a 	add	r2,r4,r2
81133cac:	10c00005 	stb	r3,0(r2)
81133cb0:	00000d06 	br	81133ce8 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81133cb4:	e0ffec17 	ldw	r3,-80(fp)
81133cb8:	e0bfee17 	ldw	r2,-72(fp)
81133cbc:	1885c83a 	sub	r2,r3,r2
81133cc0:	e13fec17 	ldw	r4,-80(fp)
81133cc4:	e0ffed17 	ldw	r3,-76(fp)
81133cc8:	20c7883a 	add	r3,r4,r3
81133ccc:	1809883a 	mov	r4,r3
81133cd0:	e0fffd17 	ldw	r3,-12(fp)
81133cd4:	1907883a 	add	r3,r3,r4
81133cd8:	18c00003 	ldbu	r3,0(r3)
81133cdc:	e13ffb04 	addi	r4,fp,-20
81133ce0:	2085883a 	add	r2,r4,r2
81133ce4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81133ce8:	e0bfec17 	ldw	r2,-80(fp)
81133cec:	10800044 	addi	r2,r2,1
81133cf0:	e0bfec15 	stw	r2,-80(fp)
81133cf4:	e0ffec17 	ldw	r3,-80(fp)
81133cf8:	e0bfeb17 	ldw	r2,-84(fp)
81133cfc:	18bfd016 	blt	r3,r2,81133c40 <__reset+0xfb113c40>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81133d00:	e0bfea17 	ldw	r2,-88(fp)
81133d04:	10005c1e 	bne	r2,zero,81133e78 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81133d08:	00a04574 	movhi	r2,33045
81133d0c:	108ffd04 	addi	r2,r2,16372
81133d10:	1080050b 	ldhu	r2,20(r2)
81133d14:	10bfffcc 	andi	r2,r2,65535
81133d18:	1006917a 	slli	r3,r2,5
81133d1c:	00a04574 	movhi	r2,33045
81133d20:	108ffd04 	addi	r2,r2,16372
81133d24:	1080030b 	ldhu	r2,12(r2)
81133d28:	10bfffcc 	andi	r2,r2,65535
81133d2c:	1885283a 	div	r2,r3,r2
81133d30:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81133d34:	e03ff015 	stw	zero,-64(fp)
81133d38:	00003b06 	br	81133e28 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81133d3c:	00a04574 	movhi	r2,33045
81133d40:	108ffd04 	addi	r2,r2,16372
81133d44:	10c01317 	ldw	r3,76(r2)
81133d48:	e0bff017 	ldw	r2,-64(fp)
81133d4c:	1885883a 	add	r2,r3,r2
81133d50:	1007883a 	mov	r3,r2
81133d54:	d0a09317 	ldw	r2,-32180(gp)
81133d58:	100b883a 	mov	r5,r2
81133d5c:	1809883a 	mov	r4,r3
81133d60:	11324280 	call	81132428 <Read_Sector_Data>
81133d64:	10003426 	beq	r2,zero,81133e38 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81133d68:	e03ff115 	stw	zero,-60(fp)
81133d6c:	00002506 	br	81133e04 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81133d70:	e0bff117 	ldw	r2,-60(fp)
81133d74:	1004917a 	slli	r2,r2,5
81133d78:	e0fff017 	ldw	r3,-64(fp)
81133d7c:	180f883a 	mov	r7,r3
81133d80:	000d883a 	mov	r6,zero
81133d84:	e17fff17 	ldw	r5,-4(fp)
81133d88:	1009883a 	mov	r4,r2
81133d8c:	11328580 	call	81132858 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81133d90:	e0bfff17 	ldw	r2,-4(fp)
81133d94:	10800003 	ldbu	r2,0(r2)
81133d98:	10803fcc 	andi	r2,r2,255
81133d9c:	10803960 	cmpeqi	r2,r2,229
81133da0:	1000151e 	bne	r2,zero,81133df8 <get_home_directory_cluster_for_file+0x268>
81133da4:	e0bfff17 	ldw	r2,-4(fp)
81133da8:	10800003 	ldbu	r2,0(r2)
81133dac:	10803fcc 	andi	r2,r2,255
81133db0:	10001126 	beq	r2,zero,81133df8 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81133db4:	e0fffb04 	addi	r3,fp,-20
81133db8:	e0bff904 	addi	r2,fp,-28
81133dbc:	180d883a 	mov	r6,r3
81133dc0:	100b883a 	mov	r5,r2
81133dc4:	e13fff17 	ldw	r4,-4(fp)
81133dc8:	11338ec0 	call	811338ec <match_file_record_to_name_ext>
81133dcc:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81133dd0:	e0bff817 	ldw	r2,-32(fp)
81133dd4:	10000826 	beq	r2,zero,81133df8 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
81133dd8:	e0bfff17 	ldw	r2,-4(fp)
81133ddc:	1080058b 	ldhu	r2,22(r2)
81133de0:	10bfffcc 	andi	r2,r2,65535
81133de4:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81133de8:	e0bfff17 	ldw	r2,-4(fp)
81133dec:	00c00044 	movi	r3,1
81133df0:	10c00a15 	stw	r3,40(r2)
                                break;
81133df4:	00000606 	br	81133e10 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81133df8:	e0bff117 	ldw	r2,-60(fp)
81133dfc:	10800044 	addi	r2,r2,1
81133e00:	e0bff115 	stw	r2,-60(fp)
81133e04:	e0bff117 	ldw	r2,-60(fp)
81133e08:	10800410 	cmplti	r2,r2,16
81133e0c:	103fd81e 	bne	r2,zero,81133d70 <__reset+0xfb113d70>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81133e10:	e0ffef17 	ldw	r3,-68(fp)
81133e14:	e0bfea17 	ldw	r2,-88(fp)
81133e18:	1880091e 	bne	r3,r2,81133e40 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81133e1c:	e0bff017 	ldw	r2,-64(fp)
81133e20:	10800044 	addi	r2,r2,1
81133e24:	e0bff015 	stw	r2,-64(fp)
81133e28:	e0fff017 	ldw	r3,-64(fp)
81133e2c:	e0bff717 	ldw	r2,-36(fp)
81133e30:	18bfc216 	blt	r3,r2,81133d3c <__reset+0xfb113d3c>
81133e34:	00000306 	br	81133e44 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
81133e38:	0001883a 	nop
81133e3c:	00000106 	br	81133e44 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81133e40:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81133e44:	e0ffef17 	ldw	r3,-68(fp)
81133e48:	e0bfea17 	ldw	r2,-88(fp)
81133e4c:	18800826 	beq	r3,r2,81133e70 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81133e50:	e0bfef17 	ldw	r2,-68(fp)
81133e54:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81133e58:	e0ffed17 	ldw	r3,-76(fp)
81133e5c:	e0bfeb17 	ldw	r2,-84(fp)
81133e60:	1885883a 	add	r2,r3,r2
81133e64:	10800044 	addi	r2,r2,1
81133e68:	e0bfed15 	stw	r2,-76(fp)
81133e6c:	00007d06 	br	81134064 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81133e70:	0005883a 	mov	r2,zero
81133e74:	00009106 	br	811340bc <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
81133e78:	e0bfea17 	ldw	r2,-88(fp)
81133e7c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81133e80:	e0bff417 	ldw	r2,-48(fp)
81133e84:	10ffff84 	addi	r3,r2,-2
81133e88:	00a04574 	movhi	r2,33045
81133e8c:	108ffd04 	addi	r2,r2,16372
81133e90:	10800383 	ldbu	r2,14(r2)
81133e94:	10803fcc 	andi	r2,r2,255
81133e98:	1885383a 	mul	r2,r3,r2
81133e9c:	1007883a 	mov	r3,r2
81133ea0:	00a04574 	movhi	r2,33045
81133ea4:	108ffd04 	addi	r2,r2,16372
81133ea8:	10801417 	ldw	r2,80(r2)
81133eac:	1885883a 	add	r2,r3,r2
81133eb0:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81133eb4:	e03ff215 	stw	zero,-56(fp)
81133eb8:	00003606 	br	81133f94 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81133ebc:	e0fff217 	ldw	r3,-56(fp)
81133ec0:	e0bff517 	ldw	r2,-44(fp)
81133ec4:	1885883a 	add	r2,r3,r2
81133ec8:	d0e09317 	ldw	r3,-32180(gp)
81133ecc:	180b883a 	mov	r5,r3
81133ed0:	1009883a 	mov	r4,r2
81133ed4:	11324280 	call	81132428 <Read_Sector_Data>
81133ed8:	10003526 	beq	r2,zero,81133fb0 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81133edc:	e03ff315 	stw	zero,-52(fp)
81133ee0:	00002306 	br	81133f70 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81133ee4:	e0bff317 	ldw	r2,-52(fp)
81133ee8:	1004917a 	slli	r2,r2,5
81133eec:	e0fff417 	ldw	r3,-48(fp)
81133ef0:	e13ff217 	ldw	r4,-56(fp)
81133ef4:	200f883a 	mov	r7,r4
81133ef8:	180d883a 	mov	r6,r3
81133efc:	e17fff17 	ldw	r5,-4(fp)
81133f00:	1009883a 	mov	r4,r2
81133f04:	11328580 	call	81132858 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81133f08:	e0bfff17 	ldw	r2,-4(fp)
81133f0c:	10800003 	ldbu	r2,0(r2)
81133f10:	10803fcc 	andi	r2,r2,255
81133f14:	10803960 	cmpeqi	r2,r2,229
81133f18:	1000121e 	bne	r2,zero,81133f64 <get_home_directory_cluster_for_file+0x3d4>
81133f1c:	e0bfff17 	ldw	r2,-4(fp)
81133f20:	10800003 	ldbu	r2,0(r2)
81133f24:	10803fcc 	andi	r2,r2,255
81133f28:	10000e26 	beq	r2,zero,81133f64 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81133f2c:	e0fffb04 	addi	r3,fp,-20
81133f30:	e0bff904 	addi	r2,fp,-28
81133f34:	180d883a 	mov	r6,r3
81133f38:	100b883a 	mov	r5,r2
81133f3c:	e13fff17 	ldw	r4,-4(fp)
81133f40:	11338ec0 	call	811338ec <match_file_record_to_name_ext>
81133f44:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81133f48:	e0bff617 	ldw	r2,-40(fp)
81133f4c:	10000526 	beq	r2,zero,81133f64 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81133f50:	e0bfff17 	ldw	r2,-4(fp)
81133f54:	1080058b 	ldhu	r2,22(r2)
81133f58:	10bfffcc 	andi	r2,r2,65535
81133f5c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81133f60:	00000606 	br	81133f7c <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81133f64:	e0bff317 	ldw	r2,-52(fp)
81133f68:	10800044 	addi	r2,r2,1
81133f6c:	e0bff315 	stw	r2,-52(fp)
81133f70:	e0bff317 	ldw	r2,-52(fp)
81133f74:	10800410 	cmplti	r2,r2,16
81133f78:	103fda1e 	bne	r2,zero,81133ee4 <__reset+0xfb113ee4>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81133f7c:	e0ffef17 	ldw	r3,-68(fp)
81133f80:	e0bfea17 	ldw	r2,-88(fp)
81133f84:	18800c1e 	bne	r3,r2,81133fb8 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81133f88:	e0bff217 	ldw	r2,-56(fp)
81133f8c:	10800044 	addi	r2,r2,1
81133f90:	e0bff215 	stw	r2,-56(fp)
81133f94:	00a04574 	movhi	r2,33045
81133f98:	108ffd04 	addi	r2,r2,16372
81133f9c:	10800383 	ldbu	r2,14(r2)
81133fa0:	10803fcc 	andi	r2,r2,255
81133fa4:	e0fff217 	ldw	r3,-56(fp)
81133fa8:	18bfc416 	blt	r3,r2,81133ebc <__reset+0xfb113ebc>
81133fac:	00000306 	br	81133fbc <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81133fb0:	0001883a 	nop
81133fb4:	00000106 	br	81133fbc <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81133fb8:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81133fbc:	e0ffef17 	ldw	r3,-68(fp)
81133fc0:	e0bfea17 	ldw	r2,-88(fp)
81133fc4:	1880141e 	bne	r3,r2,81134018 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81133fc8:	e0bfef17 	ldw	r2,-68(fp)
81133fcc:	e0fffc04 	addi	r3,fp,-16
81133fd0:	180b883a 	mov	r5,r3
81133fd4:	1009883a 	mov	r4,r2
81133fd8:	11325080 	call	81132508 <get_cluster_flag>
81133fdc:	10000c26 	beq	r2,zero,81134010 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81133fe0:	e0bffc0b 	ldhu	r2,-16(fp)
81133fe4:	10bfffcc 	andi	r2,r2,65535
81133fe8:	10fffe0c 	andi	r3,r2,65528
81133fec:	00bffe14 	movui	r2,65528
81133ff0:	1880021e 	bne	r3,r2,81133ffc <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
81133ff4:	0005883a 	mov	r2,zero
81133ff8:	00003006 	br	811340bc <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
81133ffc:	e0bffc0b 	ldhu	r2,-16(fp)
81134000:	10bfffcc 	andi	r2,r2,65535
81134004:	10bffe0c 	andi	r2,r2,65528
81134008:	e0bfef15 	stw	r2,-68(fp)
8113400c:	00000206 	br	81134018 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
81134010:	0005883a 	mov	r2,zero
81134014:	00002906 	br	811340bc <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
81134018:	e0bff417 	ldw	r2,-48(fp)
8113401c:	00fffdd4 	movui	r3,65527
81134020:	18800316 	blt	r3,r2,81134030 <get_home_directory_cluster_for_file+0x4a0>
81134024:	e0ffef17 	ldw	r3,-68(fp)
81134028:	e0bfea17 	ldw	r2,-88(fp)
8113402c:	18bf9426 	beq	r3,r2,81133e80 <__reset+0xfb113e80>
            if (new_cluster != home_dir_cluster)
81134030:	e0ffef17 	ldw	r3,-68(fp)
81134034:	e0bfea17 	ldw	r2,-88(fp)
81134038:	18800826 	beq	r3,r2,8113405c <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8113403c:	e0bfef17 	ldw	r2,-68(fp)
81134040:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81134044:	e0ffed17 	ldw	r3,-76(fp)
81134048:	e0bfeb17 	ldw	r2,-84(fp)
8113404c:	1885883a 	add	r2,r3,r2
81134050:	10800044 	addi	r2,r2,1
81134054:	e0bfed15 	stw	r2,-76(fp)
81134058:	00000206 	br	81134064 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8113405c:	0005883a 	mov	r2,zero
81134060:	00001606 	br	811340bc <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81134064:	e0bfed17 	ldw	r2,-76(fp)
81134068:	e0fffd17 	ldw	r3,-12(fp)
8113406c:	1885883a 	add	r2,r3,r2
81134070:	1009883a 	mov	r4,r2
81134074:	113382c0 	call	8113382c <get_dir_divider_location>
81134078:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
8113407c:	e0bfeb17 	ldw	r2,-84(fp)
81134080:	1000020e 	bge	r2,zero,8113408c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81134084:	00800044 	movi	r2,1
81134088:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
8113408c:	e0bfeb17 	ldw	r2,-84(fp)
81134090:	00becf16 	blt	zero,r2,81133bd0 <__reset+0xfb113bd0>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81134094:	e0bffe17 	ldw	r2,-8(fp)
81134098:	e0ffea17 	ldw	r3,-88(fp)
8113409c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
811340a0:	e0bfea17 	ldw	r2,-88(fp)
811340a4:	1000041e 	bne	r2,zero,811340b8 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
811340a8:	e0bfff17 	ldw	r2,-4(fp)
811340ac:	10000a15 	stw	zero,40(r2)
		result = true;
811340b0:	00800044 	movi	r2,1
811340b4:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
811340b8:	e0bfe917 	ldw	r2,-92(fp)
}
811340bc:	e037883a 	mov	sp,fp
811340c0:	dfc00117 	ldw	ra,4(sp)
811340c4:	df000017 	ldw	fp,0(sp)
811340c8:	dec00204 	addi	sp,sp,8
811340cc:	f800283a 	ret

811340d0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
811340d0:	deffe804 	addi	sp,sp,-96
811340d4:	de00012e 	bgeu	sp,et,811340dc <find_file_in_directory+0xc>
811340d8:	003b68fa 	trap	3
811340dc:	dfc01715 	stw	ra,92(sp)
811340e0:	df001615 	stw	fp,88(sp)
811340e4:	df001604 	addi	fp,sp,88
811340e8:	e13ffd15 	stw	r4,-12(fp)
811340ec:	e17ffe15 	stw	r5,-8(fp)
811340f0:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
811340f4:	e13ffe17 	ldw	r4,-8(fp)
811340f8:	113382c0 	call	8113382c <get_dir_divider_location>
811340fc:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
81134100:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81134104:	00800804 	movi	r2,32
81134108:	e0bff905 	stb	r2,-28(fp)
8113410c:	00800804 	movi	r2,32
81134110:	e0bff945 	stb	r2,-27(fp)
81134114:	00800804 	movi	r2,32
81134118:	e0bff985 	stb	r2,-26(fp)
8113411c:	00800804 	movi	r2,32
81134120:	e0bff9c5 	stb	r2,-25(fp)
81134124:	00800804 	movi	r2,32
81134128:	e0bffa05 	stb	r2,-24(fp)
8113412c:	00800804 	movi	r2,32
81134130:	e0bffa45 	stb	r2,-23(fp)
81134134:	00800804 	movi	r2,32
81134138:	e0bffa85 	stb	r2,-22(fp)
8113413c:	00800804 	movi	r2,32
81134140:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81134144:	00800804 	movi	r2,32
81134148:	e0bffb05 	stb	r2,-20(fp)
8113414c:	00800804 	movi	r2,32
81134150:	e0bffb45 	stb	r2,-19(fp)
81134154:	00800804 	movi	r2,32
81134158:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
8113415c:	00bfffc4 	movi	r2,-1
81134160:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81134164:	e0bffd17 	ldw	r2,-12(fp)
81134168:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
8113416c:	e13ffe17 	ldw	r4,-8(fp)
81134170:	11132f80 	call	811132f8 <strlen>
81134174:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81134178:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
8113417c:	00000b06 	br	811341ac <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81134180:	e0ffeb17 	ldw	r3,-84(fp)
81134184:	e0bfea17 	ldw	r2,-88(fp)
81134188:	1885883a 	add	r2,r3,r2
8113418c:	10800044 	addi	r2,r2,1
81134190:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81134194:	e0bfeb17 	ldw	r2,-84(fp)
81134198:	e0fffe17 	ldw	r3,-8(fp)
8113419c:	1885883a 	add	r2,r3,r2
811341a0:	1009883a 	mov	r4,r2
811341a4:	113382c0 	call	8113382c <get_dir_divider_location>
811341a8:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
811341ac:	e0bfea17 	ldw	r2,-88(fp)
811341b0:	00bff316 	blt	zero,r2,81134180 <__reset+0xfb114180>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
811341b4:	e0bfeb17 	ldw	r2,-84(fp)
811341b8:	e0bfee15 	stw	r2,-72(fp)
811341bc:	00002706 	br	8113425c <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
811341c0:	e0bfee17 	ldw	r2,-72(fp)
811341c4:	e0fffe17 	ldw	r3,-8(fp)
811341c8:	1885883a 	add	r2,r3,r2
811341cc:	10800003 	ldbu	r2,0(r2)
811341d0:	10803fcc 	andi	r2,r2,255
811341d4:	1080201c 	xori	r2,r2,128
811341d8:	10bfe004 	addi	r2,r2,-128
811341dc:	10800b98 	cmpnei	r2,r2,46
811341e0:	1000031e 	bne	r2,zero,811341f0 <find_file_in_directory+0x120>
        {
            ext_index = index;
811341e4:	e0bfee17 	ldw	r2,-72(fp)
811341e8:	e0bfec15 	stw	r2,-80(fp)
811341ec:	00001806 	br	81134250 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811341f0:	e0bfec17 	ldw	r2,-80(fp)
811341f4:	10000b0e 	bge	r2,zero,81134224 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811341f8:	e0ffee17 	ldw	r3,-72(fp)
811341fc:	e0bfeb17 	ldw	r2,-84(fp)
81134200:	1885c83a 	sub	r2,r3,r2
81134204:	e0ffee17 	ldw	r3,-72(fp)
81134208:	e13ffe17 	ldw	r4,-8(fp)
8113420c:	20c7883a 	add	r3,r4,r3
81134210:	18c00003 	ldbu	r3,0(r3)
81134214:	e13ff904 	addi	r4,fp,-28
81134218:	2085883a 	add	r2,r4,r2
8113421c:	10c00005 	stb	r3,0(r2)
81134220:	00000b06 	br	81134250 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81134224:	e0ffee17 	ldw	r3,-72(fp)
81134228:	e0bfec17 	ldw	r2,-80(fp)
8113422c:	1885c83a 	sub	r2,r3,r2
81134230:	10bfffc4 	addi	r2,r2,-1
81134234:	e0ffee17 	ldw	r3,-72(fp)
81134238:	e13ffe17 	ldw	r4,-8(fp)
8113423c:	20c7883a 	add	r3,r4,r3
81134240:	18c00003 	ldbu	r3,0(r3)
81134244:	e13ffb04 	addi	r4,fp,-20
81134248:	2085883a 	add	r2,r4,r2
8113424c:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81134250:	e0bfee17 	ldw	r2,-72(fp)
81134254:	10800044 	addi	r2,r2,1
81134258:	e0bfee15 	stw	r2,-72(fp)
8113425c:	e0ffee17 	ldw	r3,-72(fp)
81134260:	e0bff417 	ldw	r2,-48(fp)
81134264:	18bfd616 	blt	r3,r2,811341c0 <__reset+0xfb1141c0>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81134268:	e0bffd17 	ldw	r2,-12(fp)
8113426c:	1000461e 	bne	r2,zero,81134388 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81134270:	00a04574 	movhi	r2,33045
81134274:	108ffd04 	addi	r2,r2,16372
81134278:	1080050b 	ldhu	r2,20(r2)
8113427c:	10bfffcc 	andi	r2,r2,65535
81134280:	1006917a 	slli	r3,r2,5
81134284:	00a04574 	movhi	r2,33045
81134288:	108ffd04 	addi	r2,r2,16372
8113428c:	1080030b 	ldhu	r2,12(r2)
81134290:	10bfffcc 	andi	r2,r2,65535
81134294:	1885283a 	div	r2,r3,r2
81134298:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113429c:	e03ff015 	stw	zero,-64(fp)
811342a0:	00003506 	br	81134378 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811342a4:	00a04574 	movhi	r2,33045
811342a8:	108ffd04 	addi	r2,r2,16372
811342ac:	10c01317 	ldw	r3,76(r2)
811342b0:	e0bff017 	ldw	r2,-64(fp)
811342b4:	1885883a 	add	r2,r3,r2
811342b8:	1007883a 	mov	r3,r2
811342bc:	d0a09317 	ldw	r2,-32180(gp)
811342c0:	100b883a 	mov	r5,r2
811342c4:	1809883a 	mov	r4,r3
811342c8:	11324280 	call	81132428 <Read_Sector_Data>
811342cc:	10009626 	beq	r2,zero,81134528 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811342d0:	e03ff115 	stw	zero,-60(fp)
811342d4:	00002006 	br	81134358 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
811342d8:	e0bff117 	ldw	r2,-60(fp)
811342dc:	1004917a 	slli	r2,r2,5
811342e0:	e0fff017 	ldw	r3,-64(fp)
811342e4:	180f883a 	mov	r7,r3
811342e8:	000d883a 	mov	r6,zero
811342ec:	e17fff17 	ldw	r5,-4(fp)
811342f0:	1009883a 	mov	r4,r2
811342f4:	11328580 	call	81132858 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811342f8:	e0bfff17 	ldw	r2,-4(fp)
811342fc:	10800003 	ldbu	r2,0(r2)
81134300:	10803fcc 	andi	r2,r2,255
81134304:	10803960 	cmpeqi	r2,r2,229
81134308:	1000101e 	bne	r2,zero,8113434c <find_file_in_directory+0x27c>
8113430c:	e0bfff17 	ldw	r2,-4(fp)
81134310:	10800003 	ldbu	r2,0(r2)
81134314:	10803fcc 	andi	r2,r2,255
81134318:	10000c26 	beq	r2,zero,8113434c <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
8113431c:	e0fffb04 	addi	r3,fp,-20
81134320:	e0bff904 	addi	r2,fp,-28
81134324:	180d883a 	mov	r6,r3
81134328:	100b883a 	mov	r5,r2
8113432c:	e13fff17 	ldw	r4,-4(fp)
81134330:	11338ec0 	call	811338ec <match_file_record_to_name_ext>
81134334:	e0bff815 	stw	r2,-32(fp)

                        if (match)
81134338:	e0bff817 	ldw	r2,-32(fp)
8113433c:	10000326 	beq	r2,zero,8113434c <find_file_in_directory+0x27c>
                        {
                            result = true;
81134340:	00800044 	movi	r2,1
81134344:	e0bfef15 	stw	r2,-68(fp)
                            break;
81134348:	00000606 	br	81134364 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8113434c:	e0bff117 	ldw	r2,-60(fp)
81134350:	10800044 	addi	r2,r2,1
81134354:	e0bff115 	stw	r2,-60(fp)
81134358:	e0bff117 	ldw	r2,-60(fp)
8113435c:	10800410 	cmplti	r2,r2,16
81134360:	103fdd1e 	bne	r2,zero,811342d8 <__reset+0xfb1142d8>
            }
            else
            {
                break;
            }
            if (result)
81134364:	e0bfef17 	ldw	r2,-68(fp)
81134368:	1000711e 	bne	r2,zero,81134530 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113436c:	e0bff017 	ldw	r2,-64(fp)
81134370:	10800044 	addi	r2,r2,1
81134374:	e0bff015 	stw	r2,-64(fp)
81134378:	e0fff017 	ldw	r3,-64(fp)
8113437c:	e0bff717 	ldw	r2,-36(fp)
81134380:	18bfc816 	blt	r3,r2,811342a4 <__reset+0xfb1142a4>
81134384:	00006b06 	br	81134534 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81134388:	e0bfed17 	ldw	r2,-76(fp)
8113438c:	10ffff84 	addi	r3,r2,-2
81134390:	00a04574 	movhi	r2,33045
81134394:	108ffd04 	addi	r2,r2,16372
81134398:	10800383 	ldbu	r2,14(r2)
8113439c:	10803fcc 	andi	r2,r2,255
811343a0:	1885383a 	mul	r2,r3,r2
811343a4:	1007883a 	mov	r3,r2
811343a8:	00a04574 	movhi	r2,33045
811343ac:	108ffd04 	addi	r2,r2,16372
811343b0:	10801417 	ldw	r2,80(r2)
811343b4:	1885883a 	add	r2,r3,r2
811343b8:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811343bc:	e03ff215 	stw	zero,-56(fp)
811343c0:	00003306 	br	81134490 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811343c4:	e0fff217 	ldw	r3,-56(fp)
811343c8:	e0bff517 	ldw	r2,-44(fp)
811343cc:	1885883a 	add	r2,r3,r2
811343d0:	d0e09317 	ldw	r3,-32180(gp)
811343d4:	180b883a 	mov	r5,r3
811343d8:	1009883a 	mov	r4,r2
811343dc:	11324280 	call	81132428 <Read_Sector_Data>
811343e0:	10003226 	beq	r2,zero,811344ac <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811343e4:	e03ff315 	stw	zero,-52(fp)
811343e8:	00002106 	br	81134470 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811343ec:	e0bff317 	ldw	r2,-52(fp)
811343f0:	1004917a 	slli	r2,r2,5
811343f4:	e0ffed17 	ldw	r3,-76(fp)
811343f8:	e13ff217 	ldw	r4,-56(fp)
811343fc:	200f883a 	mov	r7,r4
81134400:	180d883a 	mov	r6,r3
81134404:	e17fff17 	ldw	r5,-4(fp)
81134408:	1009883a 	mov	r4,r2
8113440c:	11328580 	call	81132858 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81134410:	e0bfff17 	ldw	r2,-4(fp)
81134414:	10800003 	ldbu	r2,0(r2)
81134418:	10803fcc 	andi	r2,r2,255
8113441c:	10803960 	cmpeqi	r2,r2,229
81134420:	1000101e 	bne	r2,zero,81134464 <find_file_in_directory+0x394>
81134424:	e0bfff17 	ldw	r2,-4(fp)
81134428:	10800003 	ldbu	r2,0(r2)
8113442c:	10803fcc 	andi	r2,r2,255
81134430:	10000c26 	beq	r2,zero,81134464 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81134434:	e0fffb04 	addi	r3,fp,-20
81134438:	e0bff904 	addi	r2,fp,-28
8113443c:	180d883a 	mov	r6,r3
81134440:	100b883a 	mov	r5,r2
81134444:	e13fff17 	ldw	r4,-4(fp)
81134448:	11338ec0 	call	811338ec <match_file_record_to_name_ext>
8113444c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81134450:	e0bff617 	ldw	r2,-40(fp)
81134454:	10000326 	beq	r2,zero,81134464 <find_file_in_directory+0x394>
                            {                               
                                result = true;
81134458:	00800044 	movi	r2,1
8113445c:	e0bfef15 	stw	r2,-68(fp)
                                break;
81134460:	00000606 	br	8113447c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81134464:	e0bff317 	ldw	r2,-52(fp)
81134468:	10800044 	addi	r2,r2,1
8113446c:	e0bff315 	stw	r2,-52(fp)
81134470:	e0bff317 	ldw	r2,-52(fp)
81134474:	10800410 	cmplti	r2,r2,16
81134478:	103fdc1e 	bne	r2,zero,811343ec <__reset+0xfb1143ec>
                }
                else
                {
                    break;
                }
                if (result)
8113447c:	e0bfef17 	ldw	r2,-68(fp)
81134480:	10000c1e 	bne	r2,zero,811344b4 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81134484:	e0bff217 	ldw	r2,-56(fp)
81134488:	10800044 	addi	r2,r2,1
8113448c:	e0bff215 	stw	r2,-56(fp)
81134490:	00a04574 	movhi	r2,33045
81134494:	108ffd04 	addi	r2,r2,16372
81134498:	10800383 	ldbu	r2,14(r2)
8113449c:	10803fcc 	andi	r2,r2,255
811344a0:	e0fff217 	ldw	r3,-56(fp)
811344a4:	18bfc716 	blt	r3,r2,811343c4 <__reset+0xfb1143c4>
811344a8:	00000306 	br	811344b8 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
811344ac:	0001883a 	nop
811344b0:	00000106 	br	811344b8 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
811344b4:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
811344b8:	e0bfef17 	ldw	r2,-68(fp)
811344bc:	1000141e 	bne	r2,zero,81134510 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
811344c0:	e0bfed17 	ldw	r2,-76(fp)
811344c4:	e0fffc04 	addi	r3,fp,-16
811344c8:	180b883a 	mov	r5,r3
811344cc:	1009883a 	mov	r4,r2
811344d0:	11325080 	call	81132508 <get_cluster_flag>
811344d4:	10000c26 	beq	r2,zero,81134508 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811344d8:	e0bffc0b 	ldhu	r2,-16(fp)
811344dc:	10bfffcc 	andi	r2,r2,65535
811344e0:	10fffe0c 	andi	r3,r2,65528
811344e4:	00bffe14 	movui	r2,65528
811344e8:	1880021e 	bne	r3,r2,811344f4 <find_file_in_directory+0x424>
					{
						return false;
811344ec:	0005883a 	mov	r2,zero
811344f0:	00001106 	br	81134538 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811344f4:	e0bffc0b 	ldhu	r2,-16(fp)
811344f8:	10bfffcc 	andi	r2,r2,65535
811344fc:	10bffe0c 	andi	r2,r2,65528
81134500:	e0bfed15 	stw	r2,-76(fp)
81134504:	00000206 	br	81134510 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
81134508:	0005883a 	mov	r2,zero
8113450c:	00000a06 	br	81134538 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
81134510:	e0bfed17 	ldw	r2,-76(fp)
81134514:	00fffdd4 	movui	r3,65527
81134518:	18800616 	blt	r3,r2,81134534 <find_file_in_directory+0x464>
8113451c:	e0bfef17 	ldw	r2,-68(fp)
81134520:	103f9926 	beq	r2,zero,81134388 <__reset+0xfb114388>
81134524:	00000306 	br	81134534 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
81134528:	0001883a 	nop
8113452c:	00000106 	br	81134534 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
81134530:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
81134534:	e0bfef17 	ldw	r2,-68(fp)
}
81134538:	e037883a 	mov	sp,fp
8113453c:	dfc00117 	ldw	ra,4(sp)
81134540:	df000017 	ldw	fp,0(sp)
81134544:	dec00204 	addi	sp,sp,8
81134548:	f800283a 	ret

8113454c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
8113454c:	defff504 	addi	sp,sp,-44
81134550:	de00012e 	bgeu	sp,et,81134558 <find_first_empty_cluster+0xc>
81134554:	003b68fa 	trap	3
81134558:	dfc00a15 	stw	ra,40(sp)
8113455c:	df000915 	stw	fp,36(sp)
81134560:	df000904 	addi	fp,sp,36
81134564:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81134568:	00a04574 	movhi	r2,33045
8113456c:	108ffd04 	addi	r2,r2,16372
81134570:	10801117 	ldw	r2,68(r2)
81134574:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81134578:	00800084 	movi	r2,2
8113457c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81134580:	00bfffc4 	movi	r2,-1
81134584:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81134588:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
8113458c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81134590:	00a04574 	movhi	r2,33045
81134594:	108ffd04 	addi	r2,r2,16372
81134598:	10801417 	ldw	r2,80(r2)
8113459c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
811345a0:	00a04574 	movhi	r2,33045
811345a4:	108ffd04 	addi	r2,r2,16372
811345a8:	1080058b 	ldhu	r2,22(r2)
811345ac:	10bfffcc 	andi	r2,r2,65535
811345b0:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
811345b4:	00a04574 	movhi	r2,33045
811345b8:	108ffd04 	addi	r2,r2,16372
811345bc:	10800917 	ldw	r2,36(r2)
811345c0:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
811345c4:	e0bffd17 	ldw	r2,-12(fp)
811345c8:	e0fffe17 	ldw	r3,-8(fp)
811345cc:	18800b2e 	bgeu	r3,r2,811345fc <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
811345d0:	e0fffd17 	ldw	r3,-12(fp)
811345d4:	e0bffc17 	ldw	r2,-16(fp)
811345d8:	1887c83a 	sub	r3,r3,r2
811345dc:	00a04574 	movhi	r2,33045
811345e0:	108ffd04 	addi	r2,r2,16372
811345e4:	10800383 	ldbu	r2,14(r2)
811345e8:	10803fcc 	andi	r2,r2,255
811345ec:	1885203a 	divu	r2,r3,r2
811345f0:	10800044 	addi	r2,r2,1
811345f4:	e0bffb15 	stw	r2,-20(fp)
811345f8:	00002a06 	br	811346a4 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
811345fc:	e0fffe17 	ldw	r3,-8(fp)
81134600:	e0bffc17 	ldw	r2,-16(fp)
81134604:	1887c83a 	sub	r3,r3,r2
81134608:	00a04574 	movhi	r2,33045
8113460c:	108ffd04 	addi	r2,r2,16372
81134610:	10800383 	ldbu	r2,14(r2)
81134614:	10803fcc 	andi	r2,r2,255
81134618:	1885203a 	divu	r2,r3,r2
8113461c:	10800044 	addi	r2,r2,1
81134620:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81134624:	00001f06 	br	811346a4 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
81134628:	e0bff717 	ldw	r2,-36(fp)
8113462c:	d0e09317 	ldw	r3,-32180(gp)
81134630:	180b883a 	mov	r5,r3
81134634:	1009883a 	mov	r4,r2
81134638:	11324280 	call	81132428 <Read_Sector_Data>
8113463c:	10001426 	beq	r2,zero,81134690 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81134640:	e0bff817 	ldw	r2,-32(fp)
81134644:	10803fcc 	andi	r2,r2,255
81134648:	1085883a 	add	r2,r2,r2
8113464c:	1007883a 	mov	r3,r2
81134650:	d0a09517 	ldw	r2,-32172(gp)
81134654:	10800a17 	ldw	r2,40(r2)
81134658:	1885883a 	add	r2,r3,r2
8113465c:	1080002b 	ldhuio	r2,0(r2)
81134660:	10bfffcc 	andi	r2,r2,65535
81134664:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
81134668:	e0bff90f 	ldh	r2,-28(fp)
8113466c:	10000726 	beq	r2,zero,8113468c <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81134670:	e0bff817 	ldw	r2,-32(fp)
81134674:	10800044 	addi	r2,r2,1
81134678:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
8113467c:	e0bff817 	ldw	r2,-32(fp)
81134680:	10803fcc 	andi	r2,r2,255
81134684:	103fee1e 	bne	r2,zero,81134640 <__reset+0xfb114640>
81134688:	00000106 	br	81134690 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
8113468c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81134690:	e0bff90f 	ldh	r2,-28(fp)
81134694:	10000926 	beq	r2,zero,811346bc <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81134698:	e0bff717 	ldw	r2,-36(fp)
8113469c:	10800044 	addi	r2,r2,1
811346a0:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811346a4:	00a04574 	movhi	r2,33045
811346a8:	108ffd04 	addi	r2,r2,16372
811346ac:	10c01217 	ldw	r3,72(r2)
811346b0:	e0bff717 	ldw	r2,-36(fp)
811346b4:	18bfdc1e 	bne	r3,r2,81134628 <__reset+0xfb114628>
811346b8:	00000106 	br	811346c0 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
811346bc:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
811346c0:	e0bff90f 	ldh	r2,-28(fp)
811346c4:	1000081e 	bne	r2,zero,811346e8 <find_first_empty_cluster+0x19c>
811346c8:	e0bff90f 	ldh	r2,-28(fp)
811346cc:	e0fffb17 	ldw	r3,-20(fp)
811346d0:	18800536 	bltu	r3,r2,811346e8 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
811346d4:	e0bfff17 	ldw	r2,-4(fp)
811346d8:	e0fff817 	ldw	r3,-32(fp)
811346dc:	10c00015 	stw	r3,0(r2)
		result = true;
811346e0:	00800044 	movi	r2,1
811346e4:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
811346e8:	e0bffa17 	ldw	r2,-24(fp)
}
811346ec:	e037883a 	mov	sp,fp
811346f0:	dfc00117 	ldw	ra,4(sp)
811346f4:	df000017 	ldw	fp,0(sp)
811346f8:	dec00204 	addi	sp,sp,8
811346fc:	f800283a 	ret

81134700 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81134700:	defff604 	addi	sp,sp,-40
81134704:	de00012e 	bgeu	sp,et,8113470c <find_first_empty_record_in_a_subdirectory+0xc>
81134708:	003b68fa 	trap	3
8113470c:	dfc00915 	stw	ra,36(sp)
81134710:	df000815 	stw	fp,32(sp)
81134714:	df000804 	addi	fp,sp,32
81134718:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
8113471c:	00bfffc4 	movi	r2,-1
81134720:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
81134724:	e0bfff17 	ldw	r2,-4(fp)
81134728:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8113472c:	e0bff917 	ldw	r2,-28(fp)
81134730:	10ffff84 	addi	r3,r2,-2
81134734:	00a04574 	movhi	r2,33045
81134738:	108ffd04 	addi	r2,r2,16372
8113473c:	10800383 	ldbu	r2,14(r2)
81134740:	10803fcc 	andi	r2,r2,255
81134744:	1885383a 	mul	r2,r3,r2
81134748:	1007883a 	mov	r3,r2
8113474c:	00a04574 	movhi	r2,33045
81134750:	108ffd04 	addi	r2,r2,16372
81134754:	10801417 	ldw	r2,80(r2)
81134758:	1885883a 	add	r2,r3,r2
8113475c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81134760:	e03ffa15 	stw	zero,-24(fp)
81134764:	00002c06 	br	81134818 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81134768:	e0fffa17 	ldw	r3,-24(fp)
8113476c:	e0bffc17 	ldw	r2,-16(fp)
81134770:	1885883a 	add	r2,r3,r2
81134774:	d0e09317 	ldw	r3,-32180(gp)
81134778:	180b883a 	mov	r5,r3
8113477c:	1009883a 	mov	r4,r2
81134780:	11324280 	call	81132428 <Read_Sector_Data>
81134784:	10002b26 	beq	r2,zero,81134834 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81134788:	e03ffb15 	stw	zero,-20(fp)
8113478c:	00001c06 	br	81134800 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81134790:	e0bffb17 	ldw	r2,-20(fp)
81134794:	1004917a 	slli	r2,r2,5
81134798:	1007883a 	mov	r3,r2
8113479c:	d0a09517 	ldw	r2,-32172(gp)
811347a0:	10800a17 	ldw	r2,40(r2)
811347a4:	1885883a 	add	r2,r3,r2
811347a8:	10800023 	ldbuio	r2,0(r2)
811347ac:	10803fcc 	andi	r2,r2,255
811347b0:	10803fcc 	andi	r2,r2,255
811347b4:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
811347b8:	e0bffd0b 	ldhu	r2,-12(fp)
811347bc:	10803960 	cmpeqi	r2,r2,229
811347c0:	1000021e 	bne	r2,zero,811347cc <find_first_empty_record_in_a_subdirectory+0xcc>
811347c4:	e0bffd0b 	ldhu	r2,-12(fp)
811347c8:	10000a1e 	bne	r2,zero,811347f4 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
811347cc:	e0bffa17 	ldw	r2,-24(fp)
811347d0:	1006913a 	slli	r3,r2,4
811347d4:	e0bffb17 	ldw	r2,-20(fp)
811347d8:	1885883a 	add	r2,r3,r2
811347dc:	1006943a 	slli	r3,r2,16
811347e0:	e0bff917 	ldw	r2,-28(fp)
811347e4:	1884b03a 	or	r2,r3,r2
811347e8:	e0bff815 	stw	r2,-32(fp)
                        return result;
811347ec:	e0bff817 	ldw	r2,-32(fp)
811347f0:	00005306 	br	81134940 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811347f4:	e0bffb17 	ldw	r2,-20(fp)
811347f8:	10800044 	addi	r2,r2,1
811347fc:	e0bffb15 	stw	r2,-20(fp)
81134800:	e0bffb17 	ldw	r2,-20(fp)
81134804:	10800410 	cmplti	r2,r2,16
81134808:	103fe11e 	bne	r2,zero,81134790 <__reset+0xfb114790>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113480c:	e0bffa17 	ldw	r2,-24(fp)
81134810:	10800044 	addi	r2,r2,1
81134814:	e0bffa15 	stw	r2,-24(fp)
81134818:	00a04574 	movhi	r2,33045
8113481c:	108ffd04 	addi	r2,r2,16372
81134820:	10800383 	ldbu	r2,14(r2)
81134824:	10803fcc 	andi	r2,r2,255
81134828:	e0fffa17 	ldw	r3,-24(fp)
8113482c:	18bfce16 	blt	r3,r2,81134768 <__reset+0xfb114768>
81134830:	00000106 	br	81134838 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
81134834:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
81134838:	e0bff817 	ldw	r2,-32(fp)
8113483c:	1000390e 	bge	r2,zero,81134924 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81134840:	e0bff917 	ldw	r2,-28(fp)
81134844:	e0fffd84 	addi	r3,fp,-10
81134848:	180b883a 	mov	r5,r3
8113484c:	1009883a 	mov	r4,r2
81134850:	11325080 	call	81132508 <get_cluster_flag>
81134854:	10003126 	beq	r2,zero,8113491c <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81134858:	e0bffd8b 	ldhu	r2,-10(fp)
8113485c:	10bfffcc 	andi	r2,r2,65535
81134860:	10fffe0c 	andi	r3,r2,65528
81134864:	00bffe14 	movui	r2,65528
81134868:	18802e1e 	bne	r3,r2,81134924 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
8113486c:	e0bffe04 	addi	r2,fp,-8
81134870:	1009883a 	mov	r4,r2
81134874:	113454c0 	call	8113454c <find_first_empty_cluster>
81134878:	10002326 	beq	r2,zero,81134908 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8113487c:	e0bff917 	ldw	r2,-28(fp)
81134880:	e0fffe17 	ldw	r3,-8(fp)
81134884:	18ffffcc 	andi	r3,r3,65535
81134888:	18e0001c 	xori	r3,r3,32768
8113488c:	18e00004 	addi	r3,r3,-32768
81134890:	01800044 	movi	r6,1
81134894:	180b883a 	mov	r5,r3
81134898:	1009883a 	mov	r4,r2
8113489c:	11325c40 	call	811325c4 <mark_cluster>
811348a0:	10001926 	beq	r2,zero,81134908 <find_first_empty_record_in_a_subdirectory+0x208>
811348a4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
811348a8:	01800044 	movi	r6,1
811348ac:	017fffc4 	movi	r5,-1
811348b0:	1009883a 	mov	r4,r2
811348b4:	11325c40 	call	811325c4 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
811348b8:	10001326 	beq	r2,zero,81134908 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
811348bc:	e0bff917 	ldw	r2,-28(fp)
811348c0:	e0fffe17 	ldw	r3,-8(fp)
811348c4:	18ffffcc 	andi	r3,r3,65535
811348c8:	18e0001c 	xori	r3,r3,32768
811348cc:	18e00004 	addi	r3,r3,-32768
811348d0:	000d883a 	mov	r6,zero
811348d4:	180b883a 	mov	r5,r3
811348d8:	1009883a 	mov	r4,r2
811348dc:	11325c40 	call	811325c4 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
811348e0:	10000926 	beq	r2,zero,81134908 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
811348e4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
811348e8:	000d883a 	mov	r6,zero
811348ec:	017fffc4 	movi	r5,-1
811348f0:	1009883a 	mov	r4,r2
811348f4:	11325c40 	call	811325c4 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
811348f8:	10000326 	beq	r2,zero,81134908 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
811348fc:	11323d40 	call	811323d4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81134900:	e0bffe17 	ldw	r2,-8(fp)
81134904:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81134908:	e0bffd8b 	ldhu	r2,-10(fp)
8113490c:	10bfffcc 	andi	r2,r2,65535
81134910:	10bffe0c 	andi	r2,r2,65528
81134914:	e0bff915 	stw	r2,-28(fp)
81134918:	00000206 	br	81134924 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
8113491c:	00bfffc4 	movi	r2,-1
81134920:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81134924:	e0bff917 	ldw	r2,-28(fp)
81134928:	00fffdd4 	movui	r3,65527
8113492c:	18800316 	blt	r3,r2,8113493c <find_first_empty_record_in_a_subdirectory+0x23c>
81134930:	e0bff817 	ldw	r2,-32(fp)
81134934:	10bfffe0 	cmpeqi	r2,r2,-1
81134938:	103f7c1e 	bne	r2,zero,8113472c <__reset+0xfb11472c>
    return result; 
8113493c:	e0bff817 	ldw	r2,-32(fp)
}
81134940:	e037883a 	mov	sp,fp
81134944:	dfc00117 	ldw	ra,4(sp)
81134948:	df000017 	ldw	fp,0(sp)
8113494c:	dec00204 	addi	sp,sp,8
81134950:	f800283a 	ret

81134954 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81134954:	defff904 	addi	sp,sp,-28
81134958:	de00012e 	bgeu	sp,et,81134960 <find_first_empty_record_in_root_directory+0xc>
8113495c:	003b68fa 	trap	3
81134960:	dfc00615 	stw	ra,24(sp)
81134964:	df000515 	stw	fp,20(sp)
81134968:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8113496c:	00a04574 	movhi	r2,33045
81134970:	108ffd04 	addi	r2,r2,16372
81134974:	1080050b 	ldhu	r2,20(r2)
81134978:	10bfffcc 	andi	r2,r2,65535
8113497c:	1006917a 	slli	r3,r2,5
81134980:	00a04574 	movhi	r2,33045
81134984:	108ffd04 	addi	r2,r2,16372
81134988:	1080030b 	ldhu	r2,12(r2)
8113498c:	10bfffcc 	andi	r2,r2,65535
81134990:	1885283a 	div	r2,r3,r2
81134994:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81134998:	00bfffc4 	movi	r2,-1
8113499c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811349a0:	e03ffb15 	stw	zero,-20(fp)
811349a4:	00002d06 	br	81134a5c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811349a8:	00a04574 	movhi	r2,33045
811349ac:	108ffd04 	addi	r2,r2,16372
811349b0:	10c01317 	ldw	r3,76(r2)
811349b4:	e0bffb17 	ldw	r2,-20(fp)
811349b8:	1885883a 	add	r2,r3,r2
811349bc:	1007883a 	mov	r3,r2
811349c0:	d0a09317 	ldw	r2,-32180(gp)
811349c4:	100b883a 	mov	r5,r2
811349c8:	1809883a 	mov	r4,r3
811349cc:	11324280 	call	81132428 <Read_Sector_Data>
811349d0:	10002626 	beq	r2,zero,81134a6c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
811349d4:	e03ffc15 	stw	zero,-16(fp)
811349d8:	00001a06 	br	81134a44 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
811349dc:	e0bffc17 	ldw	r2,-16(fp)
811349e0:	1004917a 	slli	r2,r2,5
811349e4:	1007883a 	mov	r3,r2
811349e8:	d0a09517 	ldw	r2,-32172(gp)
811349ec:	10800a17 	ldw	r2,40(r2)
811349f0:	1885883a 	add	r2,r3,r2
811349f4:	10800023 	ldbuio	r2,0(r2)
811349f8:	10803fcc 	andi	r2,r2,255
811349fc:	10803fcc 	andi	r2,r2,255
81134a00:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81134a04:	e0bfff0b 	ldhu	r2,-4(fp)
81134a08:	10803960 	cmpeqi	r2,r2,229
81134a0c:	1000021e 	bne	r2,zero,81134a18 <find_first_empty_record_in_root_directory+0xc4>
81134a10:	e0bfff0b 	ldhu	r2,-4(fp)
81134a14:	1000081e 	bne	r2,zero,81134a38 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81134a18:	e0bffb17 	ldw	r2,-20(fp)
81134a1c:	1006913a 	slli	r3,r2,4
81134a20:	e0bffc17 	ldw	r2,-16(fp)
81134a24:	1885883a 	add	r2,r3,r2
81134a28:	1004943a 	slli	r2,r2,16
81134a2c:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81134a30:	e0bffe17 	ldw	r2,-8(fp)
81134a34:	00000f06 	br	81134a74 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81134a38:	e0bffc17 	ldw	r2,-16(fp)
81134a3c:	10800044 	addi	r2,r2,1
81134a40:	e0bffc15 	stw	r2,-16(fp)
81134a44:	e0bffc17 	ldw	r2,-16(fp)
81134a48:	10800410 	cmplti	r2,r2,16
81134a4c:	103fe31e 	bne	r2,zero,811349dc <__reset+0xfb1149dc>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134a50:	e0bffb17 	ldw	r2,-20(fp)
81134a54:	10800044 	addi	r2,r2,1
81134a58:	e0bffb15 	stw	r2,-20(fp)
81134a5c:	e0fffb17 	ldw	r3,-20(fp)
81134a60:	e0bffd17 	ldw	r2,-12(fp)
81134a64:	18bfd016 	blt	r3,r2,811349a8 <__reset+0xfb1149a8>
81134a68:	00000106 	br	81134a70 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
81134a6c:	0001883a 	nop
        }
    }
    return result;
81134a70:	e0bffe17 	ldw	r2,-8(fp)
}
81134a74:	e037883a 	mov	sp,fp
81134a78:	dfc00117 	ldw	ra,4(sp)
81134a7c:	df000017 	ldw	fp,0(sp)
81134a80:	dec00204 	addi	sp,sp,8
81134a84:	f800283a 	ret

81134a88 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81134a88:	defffa04 	addi	sp,sp,-24
81134a8c:	de00012e 	bgeu	sp,et,81134a94 <convert_filename_to_name_extension+0xc>
81134a90:	003b68fa 	trap	3
81134a94:	df000515 	stw	fp,20(sp)
81134a98:	df000504 	addi	fp,sp,20
81134a9c:	e13ffd15 	stw	r4,-12(fp)
81134aa0:	e17ffe15 	stw	r5,-8(fp)
81134aa4:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81134aa8:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
81134aac:	e03ffb15 	stw	zero,-20(fp)
81134ab0:	00002506 	br	81134b48 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81134ab4:	e0bffc17 	ldw	r2,-16(fp)
81134ab8:	e0fffd17 	ldw	r3,-12(fp)
81134abc:	1885883a 	add	r2,r3,r2
81134ac0:	10800003 	ldbu	r2,0(r2)
81134ac4:	10803fcc 	andi	r2,r2,255
81134ac8:	1080201c 	xori	r2,r2,128
81134acc:	10bfe004 	addi	r2,r2,-128
81134ad0:	10800ba0 	cmpeqi	r2,r2,46
81134ad4:	1000141e 	bne	r2,zero,81134b28 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81134ad8:	e0bffb17 	ldw	r2,-20(fp)
81134adc:	e0fffe17 	ldw	r3,-8(fp)
81134ae0:	1885883a 	add	r2,r3,r2
81134ae4:	e0fffc17 	ldw	r3,-16(fp)
81134ae8:	e13ffd17 	ldw	r4,-12(fp)
81134aec:	20c7883a 	add	r3,r4,r3
81134af0:	18c00003 	ldbu	r3,0(r3)
81134af4:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81134af8:	e0bffc17 	ldw	r2,-16(fp)
81134afc:	e0fffd17 	ldw	r3,-12(fp)
81134b00:	1885883a 	add	r2,r3,r2
81134b04:	10800003 	ldbu	r2,0(r2)
81134b08:	10803fcc 	andi	r2,r2,255
81134b0c:	1080201c 	xori	r2,r2,128
81134b10:	10bfe004 	addi	r2,r2,-128
81134b14:	10000926 	beq	r2,zero,81134b3c <convert_filename_to_name_extension+0xb4>
81134b18:	e0bffc17 	ldw	r2,-16(fp)
81134b1c:	10800044 	addi	r2,r2,1
81134b20:	e0bffc15 	stw	r2,-16(fp)
81134b24:	00000506 	br	81134b3c <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
81134b28:	e0bffb17 	ldw	r2,-20(fp)
81134b2c:	e0fffe17 	ldw	r3,-8(fp)
81134b30:	1885883a 	add	r2,r3,r2
81134b34:	00c00804 	movi	r3,32
81134b38:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81134b3c:	e0bffb17 	ldw	r2,-20(fp)
81134b40:	10800044 	addi	r2,r2,1
81134b44:	e0bffb15 	stw	r2,-20(fp)
81134b48:	e0bffb17 	ldw	r2,-20(fp)
81134b4c:	10800210 	cmplti	r2,r2,8
81134b50:	103fd81e 	bne	r2,zero,81134ab4 <__reset+0xfb114ab4>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81134b54:	e0bffc17 	ldw	r2,-16(fp)
81134b58:	e0fffd17 	ldw	r3,-12(fp)
81134b5c:	1885883a 	add	r2,r3,r2
81134b60:	10800003 	ldbu	r2,0(r2)
81134b64:	10803fcc 	andi	r2,r2,255
81134b68:	1080201c 	xori	r2,r2,128
81134b6c:	10bfe004 	addi	r2,r2,-128
81134b70:	10800b98 	cmpnei	r2,r2,46
81134b74:	1000031e 	bne	r2,zero,81134b84 <convert_filename_to_name_extension+0xfc>
81134b78:	e0bffc17 	ldw	r2,-16(fp)
81134b7c:	10800044 	addi	r2,r2,1
81134b80:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81134b84:	e03ffb15 	stw	zero,-20(fp)
81134b88:	00001c06 	br	81134bfc <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
81134b8c:	e0bffc17 	ldw	r2,-16(fp)
81134b90:	e0fffd17 	ldw	r3,-12(fp)
81134b94:	1885883a 	add	r2,r3,r2
81134b98:	10800003 	ldbu	r2,0(r2)
81134b9c:	10803fcc 	andi	r2,r2,255
81134ba0:	1080201c 	xori	r2,r2,128
81134ba4:	10bfe004 	addi	r2,r2,-128
81134ba8:	10000c26 	beq	r2,zero,81134bdc <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
81134bac:	e0bffb17 	ldw	r2,-20(fp)
81134bb0:	e0ffff17 	ldw	r3,-4(fp)
81134bb4:	1885883a 	add	r2,r3,r2
81134bb8:	e0fffc17 	ldw	r3,-16(fp)
81134bbc:	e13ffd17 	ldw	r4,-12(fp)
81134bc0:	20c7883a 	add	r3,r4,r3
81134bc4:	18c00003 	ldbu	r3,0(r3)
81134bc8:	10c00005 	stb	r3,0(r2)
            local++;
81134bcc:	e0bffc17 	ldw	r2,-16(fp)
81134bd0:	10800044 	addi	r2,r2,1
81134bd4:	e0bffc15 	stw	r2,-16(fp)
81134bd8:	00000506 	br	81134bf0 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81134bdc:	e0bffb17 	ldw	r2,-20(fp)
81134be0:	e0ffff17 	ldw	r3,-4(fp)
81134be4:	1885883a 	add	r2,r3,r2
81134be8:	00c00804 	movi	r3,32
81134bec:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81134bf0:	e0bffb17 	ldw	r2,-20(fp)
81134bf4:	10800044 	addi	r2,r2,1
81134bf8:	e0bffb15 	stw	r2,-20(fp)
81134bfc:	e0bffb17 	ldw	r2,-20(fp)
81134c00:	108000d0 	cmplti	r2,r2,3
81134c04:	103fe11e 	bne	r2,zero,81134b8c <__reset+0xfb114b8c>
        {
            extension[counter] = ' ';
        }
    }

}
81134c08:	0001883a 	nop
81134c0c:	e037883a 	mov	sp,fp
81134c10:	df000017 	ldw	fp,0(sp)
81134c14:	dec00104 	addi	sp,sp,4
81134c18:	f800283a 	ret

81134c1c <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81134c1c:	defff504 	addi	sp,sp,-44
81134c20:	de00012e 	bgeu	sp,et,81134c28 <create_file+0xc>
81134c24:	003b68fa 	trap	3
81134c28:	dfc00a15 	stw	ra,40(sp)
81134c2c:	df000915 	stw	fp,36(sp)
81134c30:	df000904 	addi	fp,sp,36
81134c34:	e13ffd15 	stw	r4,-12(fp)
81134c38:	e17ffe15 	stw	r5,-8(fp)
81134c3c:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81134c40:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81134c44:	e0bffc04 	addi	r2,fp,-16
81134c48:	1009883a 	mov	r4,r2
81134c4c:	113454c0 	call	8113454c <find_first_empty_cluster>
81134c50:	1000a026 	beq	r2,zero,81134ed4 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81134c54:	e0bfff17 	ldw	r2,-4(fp)
81134c58:	10800a17 	ldw	r2,40(r2)
81134c5c:	1000031e 	bne	r2,zero,81134c6c <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81134c60:	11349540 	call	81134954 <find_first_empty_record_in_root_directory>
81134c64:	e0bff815 	stw	r2,-32(fp)
81134c68:	00000606 	br	81134c84 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81134c6c:	e0bfff17 	ldw	r2,-4(fp)
81134c70:	1080058b 	ldhu	r2,22(r2)
81134c74:	10bfffcc 	andi	r2,r2,65535
81134c78:	1009883a 	mov	r4,r2
81134c7c:	11347000 	call	81134700 <find_first_empty_record_in_a_subdirectory>
81134c80:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81134c84:	e0bff817 	ldw	r2,-32(fp)
81134c88:	10009216 	blt	r2,zero,81134ed4 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81134c8c:	e13ffd17 	ldw	r4,-12(fp)
81134c90:	113382c0 	call	8113382c <get_dir_divider_location>
81134c94:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81134c98:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81134c9c:	00000b06 	br	81134ccc <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81134ca0:	e0fffa17 	ldw	r3,-24(fp)
81134ca4:	e0bff917 	ldw	r2,-28(fp)
81134ca8:	1885883a 	add	r2,r3,r2
81134cac:	10800044 	addi	r2,r2,1
81134cb0:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81134cb4:	e0bffa17 	ldw	r2,-24(fp)
81134cb8:	e0fffd17 	ldw	r3,-12(fp)
81134cbc:	1885883a 	add	r2,r3,r2
81134cc0:	1009883a 	mov	r4,r2
81134cc4:	113382c0 	call	8113382c <get_dir_divider_location>
81134cc8:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81134ccc:	e0bff917 	ldw	r2,-28(fp)
81134cd0:	00bff316 	blt	zero,r2,81134ca0 <__reset+0xfb114ca0>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81134cd4:	e0bffa17 	ldw	r2,-24(fp)
81134cd8:	e0fffd17 	ldw	r3,-12(fp)
81134cdc:	1887883a 	add	r3,r3,r2
81134ce0:	e13ffe17 	ldw	r4,-8(fp)
81134ce4:	e0bffe17 	ldw	r2,-8(fp)
81134ce8:	10800204 	addi	r2,r2,8
81134cec:	100d883a 	mov	r6,r2
81134cf0:	200b883a 	mov	r5,r4
81134cf4:	1809883a 	mov	r4,r3
81134cf8:	1134a880 	call	81134a88 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81134cfc:	e0bffe17 	ldw	r2,-8(fp)
81134d00:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81134d04:	e0bffe17 	ldw	r2,-8(fp)
81134d08:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81134d0c:	e0bffe17 	ldw	r2,-8(fp)
81134d10:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81134d14:	e0bffe17 	ldw	r2,-8(fp)
81134d18:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81134d1c:	e0bffe17 	ldw	r2,-8(fp)
81134d20:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81134d24:	e0bffe17 	ldw	r2,-8(fp)
81134d28:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81134d2c:	e0bffc17 	ldw	r2,-16(fp)
81134d30:	1007883a 	mov	r3,r2
81134d34:	e0bffe17 	ldw	r2,-8(fp)
81134d38:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81134d3c:	e0bffe17 	ldw	r2,-8(fp)
81134d40:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81134d44:	e0fffc17 	ldw	r3,-16(fp)
81134d48:	e0bffe17 	ldw	r2,-8(fp)
81134d4c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81134d50:	e0bffe17 	ldw	r2,-8(fp)
81134d54:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
81134d58:	e0bffe17 	ldw	r2,-8(fp)
81134d5c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81134d60:	e0bff817 	ldw	r2,-32(fp)
81134d64:	10ffffcc 	andi	r3,r2,65535
81134d68:	e0bffe17 	ldw	r2,-8(fp)
81134d6c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81134d70:	e0bff817 	ldw	r2,-32(fp)
81134d74:	1004d43a 	srli	r2,r2,16
81134d78:	1000010e 	bge	r2,zero,81134d80 <create_file+0x164>
81134d7c:	108003c4 	addi	r2,r2,15
81134d80:	1005d13a 	srai	r2,r2,4
81134d84:	1007883a 	mov	r3,r2
81134d88:	e0bffe17 	ldw	r2,-8(fp)
81134d8c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81134d90:	e0bff817 	ldw	r2,-32(fp)
81134d94:	1004d43a 	srli	r2,r2,16
81134d98:	1007883a 	mov	r3,r2
81134d9c:	00a00034 	movhi	r2,32768
81134da0:	108003c4 	addi	r2,r2,15
81134da4:	1884703a 	and	r2,r3,r2
81134da8:	1000040e 	bge	r2,zero,81134dbc <create_file+0x1a0>
81134dac:	10bfffc4 	addi	r2,r2,-1
81134db0:	00fffc04 	movi	r3,-16
81134db4:	10c4b03a 	or	r2,r2,r3
81134db8:	10800044 	addi	r2,r2,1
81134dbc:	1004917a 	slli	r2,r2,5
81134dc0:	1007883a 	mov	r3,r2
81134dc4:	e0bffe17 	ldw	r2,-8(fp)
81134dc8:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81134dcc:	e0bfff17 	ldw	r2,-4(fp)
81134dd0:	1080058b 	ldhu	r2,22(r2)
81134dd4:	10ffffcc 	andi	r3,r2,65535
81134dd8:	e0bffe17 	ldw	r2,-8(fp)
81134ddc:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81134de0:	e0bffe17 	ldw	r2,-8(fp)
81134de4:	00c00044 	movi	r3,1
81134de8:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
81134dec:	e0bffe17 	ldw	r2,-8(fp)
81134df0:	00c00044 	movi	r3,1
81134df4:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81134df8:	e0bffe17 	ldw	r2,-8(fp)
81134dfc:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81134e00:	1000071e 	bne	r2,zero,81134e20 <create_file+0x204>
81134e04:	00a04574 	movhi	r2,33045
81134e08:	108ffd04 	addi	r2,r2,16372
81134e0c:	10c01317 	ldw	r3,76(r2)
81134e10:	e0bffe17 	ldw	r2,-8(fp)
81134e14:	10800b17 	ldw	r2,44(r2)
81134e18:	1885883a 	add	r2,r3,r2
81134e1c:	00000f06 	br	81134e5c <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81134e20:	00a04574 	movhi	r2,33045
81134e24:	108ffd04 	addi	r2,r2,16372
81134e28:	10c01417 	ldw	r3,80(r2)
81134e2c:	e0bffe17 	ldw	r2,-8(fp)
81134e30:	10800a17 	ldw	r2,40(r2)
81134e34:	113fff84 	addi	r4,r2,-2
81134e38:	00a04574 	movhi	r2,33045
81134e3c:	108ffd04 	addi	r2,r2,16372
81134e40:	10800383 	ldbu	r2,14(r2)
81134e44:	10803fcc 	andi	r2,r2,255
81134e48:	2085383a 	mul	r2,r4,r2
81134e4c:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81134e50:	e0bffe17 	ldw	r2,-8(fp)
81134e54:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81134e58:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81134e5c:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81134e60:	e0bffb17 	ldw	r2,-20(fp)
81134e64:	d0e09317 	ldw	r3,-32180(gp)
81134e68:	180b883a 	mov	r5,r3
81134e6c:	1009883a 	mov	r4,r2
81134e70:	11324280 	call	81132428 <Read_Sector_Data>
81134e74:	10001726 	beq	r2,zero,81134ed4 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
81134e78:	e0bffe17 	ldw	r2,-8(fp)
81134e7c:	10800c0b 	ldhu	r2,48(r2)
81134e80:	10bfffcc 	andi	r2,r2,65535
81134e84:	10a0001c 	xori	r2,r2,32768
81134e88:	10a00004 	addi	r2,r2,-32768
81134e8c:	e17ffe17 	ldw	r5,-8(fp)
81134e90:	1009883a 	mov	r4,r2
81134e94:	1132adc0 	call	81132adc <Write_File_Record_At_Offset>
81134e98:	10000e26 	beq	r2,zero,81134ed4 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81134e9c:	11323d40 	call	811323d4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81134ea0:	e0bffc17 	ldw	r2,-16(fp)
81134ea4:	01800044 	movi	r6,1
81134ea8:	017fffc4 	movi	r5,-1
81134eac:	1009883a 	mov	r4,r2
81134eb0:	11325c40 	call	811325c4 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81134eb4:	e0bffc17 	ldw	r2,-16(fp)
81134eb8:	000d883a 	mov	r6,zero
81134ebc:	017fffc4 	movi	r5,-1
81134ec0:	1009883a 	mov	r4,r2
81134ec4:	11325c40 	call	811325c4 <mark_cluster>
81134ec8:	10000226 	beq	r2,zero,81134ed4 <create_file+0x2b8>
                    {
                        result = true;
81134ecc:	00800044 	movi	r2,1
81134ed0:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
81134ed4:	e0bff717 	ldw	r2,-36(fp)
}
81134ed8:	e037883a 	mov	sp,fp
81134edc:	dfc00117 	ldw	ra,4(sp)
81134ee0:	df000017 	ldw	fp,0(sp)
81134ee4:	dec00204 	addi	sp,sp,8
81134ee8:	f800283a 	ret

81134eec <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
81134eec:	defffb04 	addi	sp,sp,-20
81134ef0:	de00012e 	bgeu	sp,et,81134ef8 <copy_file_record_name_to_string+0xc>
81134ef4:	003b68fa 	trap	3
81134ef8:	df000415 	stw	fp,16(sp)
81134efc:	df000404 	addi	fp,sp,16
81134f00:	e13ffe15 	stw	r4,-8(fp)
81134f04:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
81134f08:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81134f0c:	e03ffc15 	stw	zero,-16(fp)
81134f10:	00001506 	br	81134f68 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
81134f14:	e0fffe17 	ldw	r3,-8(fp)
81134f18:	e0bffc17 	ldw	r2,-16(fp)
81134f1c:	1885883a 	add	r2,r3,r2
81134f20:	10800003 	ldbu	r2,0(r2)
81134f24:	10803fcc 	andi	r2,r2,255
81134f28:	10800820 	cmpeqi	r2,r2,32
81134f2c:	10000b1e 	bne	r2,zero,81134f5c <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81134f30:	e0bffd17 	ldw	r2,-12(fp)
81134f34:	e0ffff17 	ldw	r3,-4(fp)
81134f38:	1885883a 	add	r2,r3,r2
81134f3c:	e13ffe17 	ldw	r4,-8(fp)
81134f40:	e0fffc17 	ldw	r3,-16(fp)
81134f44:	20c7883a 	add	r3,r4,r3
81134f48:	18c00003 	ldbu	r3,0(r3)
81134f4c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81134f50:	e0bffd17 	ldw	r2,-12(fp)
81134f54:	10800044 	addi	r2,r2,1
81134f58:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81134f5c:	e0bffc17 	ldw	r2,-16(fp)
81134f60:	10800044 	addi	r2,r2,1
81134f64:	e0bffc15 	stw	r2,-16(fp)
81134f68:	e0bffc17 	ldw	r2,-16(fp)
81134f6c:	10800210 	cmplti	r2,r2,8
81134f70:	103fe81e 	bne	r2,zero,81134f14 <__reset+0xfb114f14>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81134f74:	e0bffe17 	ldw	r2,-8(fp)
81134f78:	10800203 	ldbu	r2,8(r2)
81134f7c:	10803fcc 	andi	r2,r2,255
81134f80:	10800820 	cmpeqi	r2,r2,32
81134f84:	1000241e 	bne	r2,zero,81135018 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81134f88:	e0bffd17 	ldw	r2,-12(fp)
81134f8c:	e0ffff17 	ldw	r3,-4(fp)
81134f90:	1885883a 	add	r2,r3,r2
81134f94:	00c00b84 	movi	r3,46
81134f98:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81134f9c:	e0bffd17 	ldw	r2,-12(fp)
81134fa0:	10800044 	addi	r2,r2,1
81134fa4:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81134fa8:	e03ffc15 	stw	zero,-16(fp)
81134fac:	00001706 	br	8113500c <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81134fb0:	e0fffe17 	ldw	r3,-8(fp)
81134fb4:	e0bffc17 	ldw	r2,-16(fp)
81134fb8:	1885883a 	add	r2,r3,r2
81134fbc:	10800204 	addi	r2,r2,8
81134fc0:	10800003 	ldbu	r2,0(r2)
81134fc4:	10803fcc 	andi	r2,r2,255
81134fc8:	10800820 	cmpeqi	r2,r2,32
81134fcc:	10000c1e 	bne	r2,zero,81135000 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81134fd0:	e0bffd17 	ldw	r2,-12(fp)
81134fd4:	e0ffff17 	ldw	r3,-4(fp)
81134fd8:	1885883a 	add	r2,r3,r2
81134fdc:	e13ffe17 	ldw	r4,-8(fp)
81134fe0:	e0fffc17 	ldw	r3,-16(fp)
81134fe4:	20c7883a 	add	r3,r4,r3
81134fe8:	18c00204 	addi	r3,r3,8
81134fec:	18c00003 	ldbu	r3,0(r3)
81134ff0:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
81134ff4:	e0bffd17 	ldw	r2,-12(fp)
81134ff8:	10800044 	addi	r2,r2,1
81134ffc:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
81135000:	e0bffc17 	ldw	r2,-16(fp)
81135004:	10800044 	addi	r2,r2,1
81135008:	e0bffc15 	stw	r2,-16(fp)
8113500c:	e0bffc17 	ldw	r2,-16(fp)
81135010:	108000d0 	cmplti	r2,r2,3
81135014:	103fe61e 	bne	r2,zero,81134fb0 <__reset+0xfb114fb0>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
81135018:	e0bffd17 	ldw	r2,-12(fp)
8113501c:	e0ffff17 	ldw	r3,-4(fp)
81135020:	1885883a 	add	r2,r3,r2
81135024:	10000005 	stb	zero,0(r2)
}
81135028:	0001883a 	nop
8113502c:	e037883a 	mov	sp,fp
81135030:	df000017 	ldw	fp,0(sp)
81135034:	dec00104 	addi	sp,sp,4
81135038:	f800283a 	ret

8113503c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
8113503c:	defffc04 	addi	sp,sp,-16
81135040:	de00012e 	bgeu	sp,et,81135048 <alt_up_sd_card_open_dev+0xc>
81135044:	003b68fa 	trap	3
81135048:	dfc00315 	stw	ra,12(sp)
8113504c:	df000215 	stw	fp,8(sp)
81135050:	df000204 	addi	fp,sp,8
81135054:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81135058:	d1600d04 	addi	r5,gp,-32716
8113505c:	e13fff17 	ldw	r4,-4(fp)
81135060:	113a5340 	call	8113a534 <alt_find_dev>
81135064:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81135068:	e0bffe17 	ldw	r2,-8(fp)
8113506c:	10001e26 	beq	r2,zero,811350e8 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81135070:	e0bffe17 	ldw	r2,-8(fp)
81135074:	10800a17 	ldw	r2,40(r2)
81135078:	10808d04 	addi	r2,r2,564
8113507c:	d0a08d15 	stw	r2,-32204(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81135080:	e0bffe17 	ldw	r2,-8(fp)
81135084:	10800a17 	ldw	r2,40(r2)
81135088:	10808904 	addi	r2,r2,548
8113508c:	d0a08e15 	stw	r2,-32200(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81135090:	e0bffe17 	ldw	r2,-8(fp)
81135094:	10800a17 	ldw	r2,40(r2)
81135098:	10808404 	addi	r2,r2,528
8113509c:	d0a08f15 	stw	r2,-32196(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
811350a0:	e0bffe17 	ldw	r2,-8(fp)
811350a4:	10800a17 	ldw	r2,40(r2)
811350a8:	10808c04 	addi	r2,r2,560
811350ac:	d0a09015 	stw	r2,-32192(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
811350b0:	e0bffe17 	ldw	r2,-8(fp)
811350b4:	10800a17 	ldw	r2,40(r2)
811350b8:	10808b04 	addi	r2,r2,556
811350bc:	d0a09115 	stw	r2,-32188(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
811350c0:	e0bffe17 	ldw	r2,-8(fp)
811350c4:	10800a17 	ldw	r2,40(r2)
811350c8:	d0a09215 	stw	r2,-32184(gp)
		device_pointer = dev;
811350cc:	e0bffe17 	ldw	r2,-8(fp)
811350d0:	d0a09515 	stw	r2,-32172(gp)
		initialized = false;
811350d4:	d0208b15 	stw	zero,-32212(gp)
		is_sd_card_formated_as_FAT16 = false;
811350d8:	d0208c15 	stw	zero,-32208(gp)
		search_data.valid = false;
811350dc:	00a04574 	movhi	r2,33045
811350e0:	108ff804 	addi	r2,r2,16352
811350e4:	10000415 	stw	zero,16(r2)
	}
	return dev;
811350e8:	e0bffe17 	ldw	r2,-8(fp)
}
811350ec:	e037883a 	mov	sp,fp
811350f0:	dfc00117 	ldw	ra,4(sp)
811350f4:	df000017 	ldw	fp,0(sp)
811350f8:	dec00204 	addi	sp,sp,8
811350fc:	f800283a 	ret

81135100 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
81135100:	defffd04 	addi	sp,sp,-12
81135104:	de00012e 	bgeu	sp,et,8113510c <alt_up_sd_card_is_Present+0xc>
81135108:	003b68fa 	trap	3
8113510c:	df000215 	stw	fp,8(sp)
81135110:	df000204 	addi	fp,sp,8
    bool result = false;
81135114:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
81135118:	d0a09517 	ldw	r2,-32172(gp)
8113511c:	10000826 	beq	r2,zero,81135140 <alt_up_sd_card_is_Present+0x40>
81135120:	d0a08d17 	ldw	r2,-32204(gp)
81135124:	1080002b 	ldhuio	r2,0(r2)
81135128:	10bfffcc 	andi	r2,r2,65535
8113512c:	1080008c 	andi	r2,r2,2
81135130:	10000326 	beq	r2,zero,81135140 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81135134:	00800044 	movi	r2,1
81135138:	e0bffe15 	stw	r2,-8(fp)
8113513c:	00001e06 	br	811351b8 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81135140:	d0a08b17 	ldw	r2,-32212(gp)
81135144:	10800058 	cmpnei	r2,r2,1
81135148:	10001b1e 	bne	r2,zero,811351b8 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
8113514c:	d0208b15 	stw	zero,-32212(gp)
		search_data.valid = false;
81135150:	00a04574 	movhi	r2,33045
81135154:	108ff804 	addi	r2,r2,16352
81135158:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
8113515c:	d0208c15 	stw	zero,-32208(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81135160:	e03fff15 	stw	zero,-4(fp)
81135164:	00001106 	br	811351ac <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81135168:	00a04574 	movhi	r2,33045
8113516c:	10901204 	addi	r2,r2,16456
81135170:	e0ffff17 	ldw	r3,-4(fp)
81135174:	180691ba 	slli	r3,r3,6
81135178:	10c5883a 	add	r2,r2,r3
8113517c:	10800f04 	addi	r2,r2,60
81135180:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81135184:	00a04574 	movhi	r2,33045
81135188:	10901204 	addi	r2,r2,16456
8113518c:	e0ffff17 	ldw	r3,-4(fp)
81135190:	180691ba 	slli	r3,r3,6
81135194:	10c5883a 	add	r2,r2,r3
81135198:	10800e04 	addi	r2,r2,56
8113519c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
811351a0:	e0bfff17 	ldw	r2,-4(fp)
811351a4:	10800044 	addi	r2,r2,1
811351a8:	e0bfff15 	stw	r2,-4(fp)
811351ac:	e0bfff17 	ldw	r2,-4(fp)
811351b0:	10800510 	cmplti	r2,r2,20
811351b4:	103fec1e 	bne	r2,zero,81135168 <__reset+0xfb115168>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
811351b8:	e0bffe17 	ldw	r2,-8(fp)
}
811351bc:	e037883a 	mov	sp,fp
811351c0:	df000017 	ldw	fp,0(sp)
811351c4:	dec00104 	addi	sp,sp,4
811351c8:	f800283a 	ret

811351cc <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
811351cc:	defffd04 	addi	sp,sp,-12
811351d0:	de00012e 	bgeu	sp,et,811351d8 <alt_up_sd_card_is_FAT16+0xc>
811351d4:	003b68fa 	trap	3
811351d8:	dfc00215 	stw	ra,8(sp)
811351dc:	df000115 	stw	fp,4(sp)
811351e0:	df000104 	addi	fp,sp,4
	bool result = false;
811351e4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
811351e8:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
811351ec:	10000c26 	beq	r2,zero,81135220 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811351f0:	d0a08b17 	ldw	r2,-32212(gp)
811351f4:	1000071e 	bne	r2,zero,81135214 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811351f8:	11333f80 	call	811333f8 <Look_for_FAT16>
811351fc:	d0a08c15 	stw	r2,-32208(gp)
			initialized = is_sd_card_formated_as_FAT16;
81135200:	d0a08c17 	ldw	r2,-32208(gp)
81135204:	d0a08b15 	stw	r2,-32212(gp)
			search_data.valid = false;
81135208:	00a04574 	movhi	r2,33045
8113520c:	108ff804 	addi	r2,r2,16352
81135210:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
81135214:	d0a08c17 	ldw	r2,-32208(gp)
81135218:	e0bfff15 	stw	r2,-4(fp)
8113521c:	00000206 	br	81135228 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
81135220:	d0208b15 	stw	zero,-32212(gp)
		is_sd_card_formated_as_FAT16 = false;
81135224:	d0208c15 	stw	zero,-32208(gp)
	}

	return result;
81135228:	e0bfff17 	ldw	r2,-4(fp)
}
8113522c:	e037883a 	mov	sp,fp
81135230:	dfc00117 	ldw	ra,4(sp)
81135234:	df000017 	ldw	fp,0(sp)
81135238:	dec00204 	addi	sp,sp,8
8113523c:	f800283a 	ret

81135240 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81135240:	deffea04 	addi	sp,sp,-88
81135244:	de00012e 	bgeu	sp,et,8113524c <alt_up_sd_card_find_first+0xc>
81135248:	003b68fa 	trap	3
8113524c:	dfc01515 	stw	ra,84(sp)
81135250:	df001415 	stw	fp,80(sp)
81135254:	df001404 	addi	fp,sp,80
81135258:	e13ffe15 	stw	r4,-8(fp)
8113525c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81135260:	00800084 	movi	r2,2
81135264:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81135268:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
8113526c:	10002426 	beq	r2,zero,81135300 <alt_up_sd_card_find_first+0xc0>
81135270:	d0a08c17 	ldw	r2,-32208(gp)
81135274:	10002226 	beq	r2,zero,81135300 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81135278:	e0ffee04 	addi	r3,fp,-72
8113527c:	e0bfed04 	addi	r2,fp,-76
81135280:	180d883a 	mov	r6,r3
81135284:	100b883a 	mov	r5,r2
81135288:	e13ffe17 	ldw	r4,-8(fp)
8113528c:	1133b900 	call	81133b90 <get_home_directory_cluster_for_file>
81135290:	10001926 	beq	r2,zero,811352f8 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81135294:	e0bfed17 	ldw	r2,-76(fp)
81135298:	1007883a 	mov	r3,r2
8113529c:	00a04574 	movhi	r2,33045
811352a0:	108ff804 	addi	r2,r2,16352
811352a4:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
811352a8:	e0bfed17 	ldw	r2,-76(fp)
811352ac:	1007883a 	mov	r3,r2
811352b0:	00a04574 	movhi	r2,33045
811352b4:	108ff804 	addi	r2,r2,16352
811352b8:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
811352bc:	00a04574 	movhi	r2,33045
811352c0:	108ff804 	addi	r2,r2,16352
811352c4:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
811352c8:	00a04574 	movhi	r2,33045
811352cc:	108ff804 	addi	r2,r2,16352
811352d0:	00ffffc4 	movi	r3,-1
811352d4:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
811352d8:	00a04574 	movhi	r2,33045
811352dc:	108ff804 	addi	r2,r2,16352
811352e0:	00c00044 	movi	r3,1
811352e4:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
811352e8:	e13fff17 	ldw	r4,-4(fp)
811352ec:	11353180 	call	81135318 <alt_up_sd_card_find_next>
811352f0:	e0bfec0d 	sth	r2,-80(fp)
811352f4:	00000206 	br	81135300 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811352f8:	00800044 	movi	r2,1
811352fc:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
81135300:	e0bfec0b 	ldhu	r2,-80(fp)
}
81135304:	e037883a 	mov	sp,fp
81135308:	dfc00117 	ldw	ra,4(sp)
8113530c:	df000017 	ldw	fp,0(sp)
81135310:	dec00204 	addi	sp,sp,8
81135314:	f800283a 	ret

81135318 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
81135318:	deffe404 	addi	sp,sp,-112
8113531c:	de00012e 	bgeu	sp,et,81135324 <alt_up_sd_card_find_next+0xc>
81135320:	003b68fa 	trap	3
81135324:	dfc01b15 	stw	ra,108(sp)
81135328:	df001a15 	stw	fp,104(sp)
8113532c:	df001a04 	addi	fp,sp,104
81135330:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81135334:	00800084 	movi	r2,2
81135338:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8113533c:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81135340:	1000df26 	beq	r2,zero,811356c0 <alt_up_sd_card_find_next+0x3a8>
81135344:	d0a08c17 	ldw	r2,-32208(gp)
81135348:	1000dd26 	beq	r2,zero,811356c0 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
8113534c:	00a04574 	movhi	r2,33045
81135350:	108ff804 	addi	r2,r2,16352
81135354:	10800417 	ldw	r2,16(r2)
81135358:	1000d726 	beq	r2,zero,811356b8 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
8113535c:	00a04574 	movhi	r2,33045
81135360:	108ff804 	addi	r2,r2,16352
81135364:	10800117 	ldw	r2,4(r2)
81135368:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
8113536c:	e0bfe717 	ldw	r2,-100(fp)
81135370:	1000561e 	bne	r2,zero,811354cc <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81135374:	00a04574 	movhi	r2,33045
81135378:	108ffd04 	addi	r2,r2,16372
8113537c:	1080050b 	ldhu	r2,20(r2)
81135380:	10bfffcc 	andi	r2,r2,65535
81135384:	1006917a 	slli	r3,r2,5
81135388:	00a04574 	movhi	r2,33045
8113538c:	108ffd04 	addi	r2,r2,16372
81135390:	1080030b 	ldhu	r2,12(r2)
81135394:	10bfffcc 	andi	r2,r2,65535
81135398:	1885283a 	div	r2,r3,r2
8113539c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
811353a0:	00a04574 	movhi	r2,33045
811353a4:	108ff804 	addi	r2,r2,16352
811353a8:	10800217 	ldw	r2,8(r2)
811353ac:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
811353b0:	00a04574 	movhi	r2,33045
811353b4:	108ff804 	addi	r2,r2,16352
811353b8:	1080030b 	ldhu	r2,12(r2)
811353bc:	10bfffcc 	andi	r2,r2,65535
811353c0:	10a0001c 	xori	r2,r2,32768
811353c4:	10a00004 	addi	r2,r2,-32768
811353c8:	10800044 	addi	r2,r2,1
811353cc:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
811353d0:	00003606 	br	811354ac <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811353d4:	00a04574 	movhi	r2,33045
811353d8:	108ffd04 	addi	r2,r2,16372
811353dc:	10c01317 	ldw	r3,76(r2)
811353e0:	e0bfe817 	ldw	r2,-96(fp)
811353e4:	1885883a 	add	r2,r3,r2
811353e8:	1007883a 	mov	r3,r2
811353ec:	d0a09317 	ldw	r2,-32180(gp)
811353f0:	100b883a 	mov	r5,r2
811353f4:	1809883a 	mov	r4,r3
811353f8:	11324280 	call	81132428 <Read_Sector_Data>
811353fc:	10002f26 	beq	r2,zero,811354bc <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81135400:	00002306 	br	81135490 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
81135404:	e0bfe917 	ldw	r2,-92(fp)
81135408:	1004917a 	slli	r2,r2,5
8113540c:	e13fe817 	ldw	r4,-96(fp)
81135410:	e0ffef04 	addi	r3,fp,-68
81135414:	200f883a 	mov	r7,r4
81135418:	000d883a 	mov	r6,zero
8113541c:	180b883a 	mov	r5,r3
81135420:	1009883a 	mov	r4,r2
81135424:	11328580 	call	81132858 <Read_File_Record_At_Offset>
81135428:	10001626 	beq	r2,zero,81135484 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8113542c:	e0bfef03 	ldbu	r2,-68(fp)
81135430:	10803fcc 	andi	r2,r2,255
81135434:	10001326 	beq	r2,zero,81135484 <alt_up_sd_card_find_next+0x16c>
81135438:	e0bfef03 	ldbu	r2,-68(fp)
8113543c:	10803fcc 	andi	r2,r2,255
81135440:	10803960 	cmpeqi	r2,r2,229
81135444:	10000f1e 	bne	r2,zero,81135484 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81135448:	e0bfe917 	ldw	r2,-92(fp)
8113544c:	1007883a 	mov	r3,r2
81135450:	00a04574 	movhi	r2,33045
81135454:	108ff804 	addi	r2,r2,16352
81135458:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
8113545c:	e0ffe817 	ldw	r3,-96(fp)
81135460:	00a04574 	movhi	r2,33045
81135464:	108ff804 	addi	r2,r2,16352
81135468:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
8113546c:	e0bfef04 	addi	r2,fp,-68
81135470:	e17fff17 	ldw	r5,-4(fp)
81135474:	1009883a 	mov	r4,r2
81135478:	1134eec0 	call	81134eec <copy_file_record_name_to_string>
									return 0;
8113547c:	0005883a 	mov	r2,zero
81135480:	00009006 	br	811356c4 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81135484:	e0bfe917 	ldw	r2,-92(fp)
81135488:	10800044 	addi	r2,r2,1
8113548c:	e0bfe915 	stw	r2,-92(fp)
81135490:	e0bfe917 	ldw	r2,-92(fp)
81135494:	10800410 	cmplti	r2,r2,16
81135498:	103fda1e 	bne	r2,zero,81135404 <__reset+0xfb115404>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8113549c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
811354a0:	e0bfe817 	ldw	r2,-96(fp)
811354a4:	10800044 	addi	r2,r2,1
811354a8:	e0bfe815 	stw	r2,-96(fp)
811354ac:	e0ffe817 	ldw	r3,-96(fp)
811354b0:	e0bfec17 	ldw	r2,-80(fp)
811354b4:	18bfc716 	blt	r3,r2,811353d4 <__reset+0xfb1153d4>
811354b8:	00000106 	br	811354c0 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
811354bc:	0001883a 	nop
					}
				}
				result = -1;
811354c0:	00bfffc4 	movi	r2,-1
811354c4:	e0bfe60d 	sth	r2,-104(fp)
811354c8:	00007d06 	br	811356c0 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
811354cc:	00a04574 	movhi	r2,33045
811354d0:	108ff804 	addi	r2,r2,16352
811354d4:	1080030b 	ldhu	r2,12(r2)
811354d8:	10bfffcc 	andi	r2,r2,65535
811354dc:	10a0001c 	xori	r2,r2,32768
811354e0:	10a00004 	addi	r2,r2,-32768
811354e4:	10800044 	addi	r2,r2,1
811354e8:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811354ec:	e0bfe717 	ldw	r2,-100(fp)
811354f0:	10ffff84 	addi	r3,r2,-2
811354f4:	00a04574 	movhi	r2,33045
811354f8:	108ffd04 	addi	r2,r2,16372
811354fc:	10800383 	ldbu	r2,14(r2)
81135500:	10803fcc 	andi	r2,r2,255
81135504:	1885383a 	mul	r2,r3,r2
81135508:	1007883a 	mov	r3,r2
8113550c:	00a04574 	movhi	r2,33045
81135510:	108ffd04 	addi	r2,r2,16372
81135514:	10801417 	ldw	r2,80(r2)
81135518:	1885883a 	add	r2,r3,r2
8113551c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
81135520:	00a04574 	movhi	r2,33045
81135524:	108ff804 	addi	r2,r2,16352
81135528:	10800217 	ldw	r2,8(r2)
8113552c:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135530:	00003806 	br	81135614 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81135534:	e0ffeb17 	ldw	r3,-84(fp)
81135538:	e0bfed17 	ldw	r2,-76(fp)
8113553c:	1885883a 	add	r2,r3,r2
81135540:	d0e09317 	ldw	r3,-32180(gp)
81135544:	180b883a 	mov	r5,r3
81135548:	1009883a 	mov	r4,r2
8113554c:	11324280 	call	81132428 <Read_Sector_Data>
81135550:	10003726 	beq	r2,zero,81135630 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81135554:	00002806 	br	811355f8 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81135558:	e0bfea17 	ldw	r2,-88(fp)
8113555c:	1004917a 	slli	r2,r2,5
81135560:	e13fe717 	ldw	r4,-100(fp)
81135564:	e17feb17 	ldw	r5,-84(fp)
81135568:	e0ffef04 	addi	r3,fp,-68
8113556c:	280f883a 	mov	r7,r5
81135570:	200d883a 	mov	r6,r4
81135574:	180b883a 	mov	r5,r3
81135578:	1009883a 	mov	r4,r2
8113557c:	11328580 	call	81132858 <Read_File_Record_At_Offset>
81135580:	10001a26 	beq	r2,zero,811355ec <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81135584:	e0bfef03 	ldbu	r2,-68(fp)
81135588:	10803fcc 	andi	r2,r2,255
8113558c:	10001726 	beq	r2,zero,811355ec <alt_up_sd_card_find_next+0x2d4>
81135590:	e0bfef03 	ldbu	r2,-68(fp)
81135594:	10803fcc 	andi	r2,r2,255
81135598:	10803960 	cmpeqi	r2,r2,229
8113559c:	1000131e 	bne	r2,zero,811355ec <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
811355a0:	e0ffe717 	ldw	r3,-100(fp)
811355a4:	00a04574 	movhi	r2,33045
811355a8:	108ff804 	addi	r2,r2,16352
811355ac:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
811355b0:	e0bfea17 	ldw	r2,-88(fp)
811355b4:	1007883a 	mov	r3,r2
811355b8:	00a04574 	movhi	r2,33045
811355bc:	108ff804 	addi	r2,r2,16352
811355c0:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
811355c4:	e0ffeb17 	ldw	r3,-84(fp)
811355c8:	00a04574 	movhi	r2,33045
811355cc:	108ff804 	addi	r2,r2,16352
811355d0:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
811355d4:	e0bfef04 	addi	r2,fp,-68
811355d8:	e17fff17 	ldw	r5,-4(fp)
811355dc:	1009883a 	mov	r4,r2
811355e0:	1134eec0 	call	81134eec <copy_file_record_name_to_string>
										return 0;
811355e4:	0005883a 	mov	r2,zero
811355e8:	00003606 	br	811356c4 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
811355ec:	e0bfea17 	ldw	r2,-88(fp)
811355f0:	10800044 	addi	r2,r2,1
811355f4:	e0bfea15 	stw	r2,-88(fp)
811355f8:	e0bfea17 	ldw	r2,-88(fp)
811355fc:	10800410 	cmplti	r2,r2,16
81135600:	103fd51e 	bne	r2,zero,81135558 <__reset+0xfb115558>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
81135604:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135608:	e0bfeb17 	ldw	r2,-84(fp)
8113560c:	10800044 	addi	r2,r2,1
81135610:	e0bfeb15 	stw	r2,-84(fp)
81135614:	00a04574 	movhi	r2,33045
81135618:	108ffd04 	addi	r2,r2,16372
8113561c:	10800383 	ldbu	r2,14(r2)
81135620:	10803fcc 	andi	r2,r2,255
81135624:	e0ffeb17 	ldw	r3,-84(fp)
81135628:	18bfc216 	blt	r3,r2,81135534 <__reset+0xfb115534>
8113562c:	00000106 	br	81135634 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
81135630:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
81135634:	00a04574 	movhi	r2,33045
81135638:	108ffd04 	addi	r2,r2,16372
8113563c:	10800383 	ldbu	r2,14(r2)
81135640:	10803fcc 	andi	r2,r2,255
81135644:	e0ffeb17 	ldw	r3,-84(fp)
81135648:	18801716 	blt	r3,r2,811356a8 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
8113564c:	e0bfe717 	ldw	r2,-100(fp)
81135650:	e0ffee04 	addi	r3,fp,-72
81135654:	180b883a 	mov	r5,r3
81135658:	1009883a 	mov	r4,r2
8113565c:	11325080 	call	81132508 <get_cluster_flag>
81135660:	10000f26 	beq	r2,zero,811356a0 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81135664:	e0bfee0b 	ldhu	r2,-72(fp)
81135668:	10bfffcc 	andi	r2,r2,65535
8113566c:	10fffe0c 	andi	r3,r2,65528
81135670:	00bffe14 	movui	r2,65528
81135674:	1880051e 	bne	r3,r2,8113568c <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
81135678:	00bfffc4 	movi	r2,-1
8113567c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81135680:	00a04574 	movhi	r2,33045
81135684:	108ff804 	addi	r2,r2,16352
81135688:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
8113568c:	e0bfee0b 	ldhu	r2,-72(fp)
81135690:	10bfffcc 	andi	r2,r2,65535
81135694:	10bffe0c 	andi	r2,r2,65528
81135698:	e0bfe715 	stw	r2,-100(fp)
8113569c:	00000206 	br	811356a8 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
811356a0:	00bfffc4 	movi	r2,-1
811356a4:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
811356a8:	e0bfe717 	ldw	r2,-100(fp)
811356ac:	00fffdd4 	movui	r3,65527
811356b0:	18bf8e0e 	bge	r3,r2,811354ec <__reset+0xfb1154ec>
811356b4:	00000206 	br	811356c0 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
811356b8:	008000c4 	movi	r2,3
811356bc:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
811356c0:	e0bfe60b 	ldhu	r2,-104(fp)
}
811356c4:	e037883a 	mov	sp,fp
811356c8:	dfc00117 	ldw	ra,4(sp)
811356cc:	df000017 	ldw	fp,0(sp)
811356d0:	dec00204 	addi	sp,sp,8
811356d4:	f800283a 	ret

811356d8 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
811356d8:	deffe904 	addi	sp,sp,-92
811356dc:	de00012e 	bgeu	sp,et,811356e4 <alt_up_sd_card_fopen+0xc>
811356e0:	003b68fa 	trap	3
811356e4:	dfc01615 	stw	ra,88(sp)
811356e8:	df001515 	stw	fp,84(sp)
811356ec:	df001504 	addi	fp,sp,84
811356f0:	e13ffe15 	stw	r4,-8(fp)
811356f4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
811356f8:	00bfffc4 	movi	r2,-1
811356fc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81135700:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
81135704:	1000cf26 	beq	r2,zero,81135a44 <alt_up_sd_card_fopen+0x36c>
81135708:	d0a08c17 	ldw	r2,-32208(gp)
8113570c:	1000cd26 	beq	r2,zero,81135a44 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81135710:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
81135714:	e13ffe17 	ldw	r4,-8(fp)
81135718:	11334ec0 	call	811334ec <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
8113571c:	e13ffe17 	ldw	r4,-8(fp)
81135720:	11335b80 	call	811335b8 <check_file_name_for_FAT16_compliance>
81135724:	1000c726 	beq	r2,zero,81135a44 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
81135728:	e0ffee04 	addi	r3,fp,-72
8113572c:	e0bfed04 	addi	r2,fp,-76
81135730:	180d883a 	mov	r6,r3
81135734:	100b883a 	mov	r5,r2
81135738:	e13ffe17 	ldw	r4,-8(fp)
8113573c:	1133b900 	call	81133b90 <get_home_directory_cluster_for_file>
81135740:	1000021e 	bne	r2,zero,8113574c <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
81135744:	e0bfeb0b 	ldhu	r2,-84(fp)
81135748:	0000bf06 	br	81135a48 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8113574c:	e03fec15 	stw	zero,-80(fp)
81135750:	00000e06 	br	8113578c <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81135754:	00a04574 	movhi	r2,33045
81135758:	10901204 	addi	r2,r2,16456
8113575c:	e0ffec17 	ldw	r3,-80(fp)
81135760:	180691ba 	slli	r3,r3,6
81135764:	10c5883a 	add	r2,r2,r3
81135768:	10800f04 	addi	r2,r2,60
8113576c:	10800017 	ldw	r2,0(r2)
81135770:	1000031e 	bne	r2,zero,81135780 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
81135774:	e0bfec17 	ldw	r2,-80(fp)
81135778:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
8113577c:	00000606 	br	81135798 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81135780:	e0bfec17 	ldw	r2,-80(fp)
81135784:	10800044 	addi	r2,r2,1
81135788:	e0bfec15 	stw	r2,-80(fp)
8113578c:	e0bfec17 	ldw	r2,-80(fp)
81135790:	10800510 	cmplti	r2,r2,20
81135794:	103fef1e 	bne	r2,zero,81135754 <__reset+0xfb115754>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81135798:	e0bfeb0f 	ldh	r2,-84(fp)
8113579c:	1000a916 	blt	r2,zero,81135a44 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
811357a0:	e0bfed17 	ldw	r2,-76(fp)
811357a4:	1009883a 	mov	r4,r2
811357a8:	e0bfeb0f 	ldh	r2,-84(fp)
811357ac:	100691ba 	slli	r3,r2,6
811357b0:	00a04574 	movhi	r2,33045
811357b4:	10901204 	addi	r2,r2,16456
811357b8:	1885883a 	add	r2,r3,r2
811357bc:	100d883a 	mov	r6,r2
811357c0:	e17ffe17 	ldw	r5,-8(fp)
811357c4:	11340d00 	call	811340d0 <find_file_in_directory>
811357c8:	10007b26 	beq	r2,zero,811359b8 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
811357cc:	e0bfff17 	ldw	r2,-4(fp)
811357d0:	10000226 	beq	r2,zero,811357dc <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
811357d4:	00bfffc4 	movi	r2,-1
811357d8:	00009b06 	br	81135a48 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
811357dc:	e13feb0f 	ldh	r4,-84(fp)
811357e0:	e0ffeb0f 	ldh	r3,-84(fp)
811357e4:	00a04574 	movhi	r2,33045
811357e8:	10901204 	addi	r2,r2,16456
811357ec:	180691ba 	slli	r3,r3,6
811357f0:	10c5883a 	add	r2,r2,r3
811357f4:	10800584 	addi	r2,r2,22
811357f8:	1080000b 	ldhu	r2,0(r2)
811357fc:	10ffffcc 	andi	r3,r2,65535
81135800:	00a04574 	movhi	r2,33045
81135804:	10901204 	addi	r2,r2,16456
81135808:	200891ba 	slli	r4,r4,6
8113580c:	1105883a 	add	r2,r2,r4
81135810:	10800704 	addi	r2,r2,28
81135814:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81135818:	e0ffeb0f 	ldh	r3,-84(fp)
8113581c:	00a04574 	movhi	r2,33045
81135820:	10901204 	addi	r2,r2,16456
81135824:	180691ba 	slli	r3,r3,6
81135828:	10c5883a 	add	r2,r2,r3
8113582c:	10800804 	addi	r2,r2,32
81135830:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
81135834:	e0ffeb0f 	ldh	r3,-84(fp)
81135838:	00a04574 	movhi	r2,33045
8113583c:	10901204 	addi	r2,r2,16456
81135840:	180691ba 	slli	r3,r3,6
81135844:	10c5883a 	add	r2,r2,r3
81135848:	10800904 	addi	r2,r2,36
8113584c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81135850:	e0ffeb0f 	ldh	r3,-84(fp)
81135854:	00a04574 	movhi	r2,33045
81135858:	10901204 	addi	r2,r2,16456
8113585c:	180691ba 	slli	r3,r3,6
81135860:	10c5883a 	add	r2,r2,r3
81135864:	10800f04 	addi	r2,r2,60
81135868:	00c00044 	movi	r3,1
8113586c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81135870:	e0ffeb0f 	ldh	r3,-84(fp)
81135874:	00a04574 	movhi	r2,33045
81135878:	10901204 	addi	r2,r2,16456
8113587c:	180691ba 	slli	r3,r3,6
81135880:	10c5883a 	add	r2,r2,r3
81135884:	10800e04 	addi	r2,r2,56
81135888:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113588c:	e03fec15 	stw	zero,-80(fp)
81135890:	00004506 	br	811359a8 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81135894:	e0ffeb0f 	ldh	r3,-84(fp)
81135898:	e0bfec17 	ldw	r2,-80(fp)
8113589c:	18803f26 	beq	r3,r2,8113599c <alt_up_sd_card_fopen+0x2c4>
811358a0:	00a04574 	movhi	r2,33045
811358a4:	10901204 	addi	r2,r2,16456
811358a8:	e0ffec17 	ldw	r3,-80(fp)
811358ac:	180691ba 	slli	r3,r3,6
811358b0:	10c5883a 	add	r2,r2,r3
811358b4:	10800f04 	addi	r2,r2,60
811358b8:	10800017 	ldw	r2,0(r2)
811358bc:	10800058 	cmpnei	r2,r2,1
811358c0:	1000361e 	bne	r2,zero,8113599c <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
811358c4:	e0ffeb0f 	ldh	r3,-84(fp)
811358c8:	00a04574 	movhi	r2,33045
811358cc:	10901204 	addi	r2,r2,16456
811358d0:	180691ba 	slli	r3,r3,6
811358d4:	10c5883a 	add	r2,r2,r3
811358d8:	10800a04 	addi	r2,r2,40
811358dc:	10c00017 	ldw	r3,0(r2)
811358e0:	00a04574 	movhi	r2,33045
811358e4:	10901204 	addi	r2,r2,16456
811358e8:	e13fec17 	ldw	r4,-80(fp)
811358ec:	200891ba 	slli	r4,r4,6
811358f0:	1105883a 	add	r2,r2,r4
811358f4:	10800a04 	addi	r2,r2,40
811358f8:	10800017 	ldw	r2,0(r2)
811358fc:	1880271e 	bne	r3,r2,8113599c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81135900:	e0ffeb0f 	ldh	r3,-84(fp)
81135904:	00a04574 	movhi	r2,33045
81135908:	10901204 	addi	r2,r2,16456
8113590c:	180691ba 	slli	r3,r3,6
81135910:	10c5883a 	add	r2,r2,r3
81135914:	10800b04 	addi	r2,r2,44
81135918:	10c00017 	ldw	r3,0(r2)
8113591c:	00a04574 	movhi	r2,33045
81135920:	10901204 	addi	r2,r2,16456
81135924:	e13fec17 	ldw	r4,-80(fp)
81135928:	200891ba 	slli	r4,r4,6
8113592c:	1105883a 	add	r2,r2,r4
81135930:	10800b04 	addi	r2,r2,44
81135934:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81135938:	1880181e 	bne	r3,r2,8113599c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
8113593c:	e0ffeb0f 	ldh	r3,-84(fp)
81135940:	00a04574 	movhi	r2,33045
81135944:	10901204 	addi	r2,r2,16456
81135948:	180691ba 	slli	r3,r3,6
8113594c:	10c5883a 	add	r2,r2,r3
81135950:	10800c04 	addi	r2,r2,48
81135954:	1100000b 	ldhu	r4,0(r2)
81135958:	00a04574 	movhi	r2,33045
8113595c:	10901204 	addi	r2,r2,16456
81135960:	e0ffec17 	ldw	r3,-80(fp)
81135964:	180691ba 	slli	r3,r3,6
81135968:	10c5883a 	add	r2,r2,r3
8113596c:	10800c04 	addi	r2,r2,48
81135970:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81135974:	20ffffcc 	andi	r3,r4,65535
81135978:	18e0001c 	xori	r3,r3,32768
8113597c:	18e00004 	addi	r3,r3,-32768
81135980:	10bfffcc 	andi	r2,r2,65535
81135984:	10a0001c 	xori	r2,r2,32768
81135988:	10a00004 	addi	r2,r2,-32768
8113598c:	1880031e 	bne	r3,r2,8113599c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81135990:	00bfff84 	movi	r2,-2
81135994:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81135998:	00002a06 	br	81135a44 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113599c:	e0bfec17 	ldw	r2,-80(fp)
811359a0:	10800044 	addi	r2,r2,1
811359a4:	e0bfec15 	stw	r2,-80(fp)
811359a8:	e0bfec17 	ldw	r2,-80(fp)
811359ac:	10800510 	cmplti	r2,r2,20
811359b0:	103fb81e 	bne	r2,zero,81135894 <__reset+0xfb115894>
811359b4:	00002306 	br	81135a44 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
811359b8:	e0bfff17 	ldw	r2,-4(fp)
811359bc:	10001f26 	beq	r2,zero,81135a3c <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
811359c0:	e0bfeb0f 	ldh	r2,-84(fp)
811359c4:	100691ba 	slli	r3,r2,6
811359c8:	00a04574 	movhi	r2,33045
811359cc:	10901204 	addi	r2,r2,16456
811359d0:	1885883a 	add	r2,r3,r2
811359d4:	e0ffee04 	addi	r3,fp,-72
811359d8:	180d883a 	mov	r6,r3
811359dc:	100b883a 	mov	r5,r2
811359e0:	e13ffe17 	ldw	r4,-8(fp)
811359e4:	1134c1c0 	call	81134c1c <create_file>
811359e8:	10001126 	beq	r2,zero,81135a30 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
811359ec:	e0ffeb0f 	ldh	r3,-84(fp)
811359f0:	00a04574 	movhi	r2,33045
811359f4:	10901204 	addi	r2,r2,16456
811359f8:	180691ba 	slli	r3,r3,6
811359fc:	10c5883a 	add	r2,r2,r3
81135a00:	10800f04 	addi	r2,r2,60
81135a04:	00c00044 	movi	r3,1
81135a08:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81135a0c:	e0ffeb0f 	ldh	r3,-84(fp)
81135a10:	00a04574 	movhi	r2,33045
81135a14:	10901204 	addi	r2,r2,16456
81135a18:	180691ba 	slli	r3,r3,6
81135a1c:	10c5883a 	add	r2,r2,r3
81135a20:	10800e04 	addi	r2,r2,56
81135a24:	00c00044 	movi	r3,1
81135a28:	10c00015 	stw	r3,0(r2)
81135a2c:	00000506 	br	81135a44 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81135a30:	00bfffc4 	movi	r2,-1
81135a34:	e0bfeb0d 	sth	r2,-84(fp)
81135a38:	00000206 	br	81135a44 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81135a3c:	00bfffc4 	movi	r2,-1
81135a40:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81135a44:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81135a48:	e037883a 	mov	sp,fp
81135a4c:	dfc00117 	ldw	ra,4(sp)
81135a50:	df000017 	ldw	fp,0(sp)
81135a54:	dec00204 	addi	sp,sp,8
81135a58:	f800283a 	ret

81135a5c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81135a5c:	defffd04 	addi	sp,sp,-12
81135a60:	de00012e 	bgeu	sp,et,81135a68 <alt_up_sd_card_set_attributes+0xc>
81135a64:	003b68fa 	trap	3
81135a68:	df000215 	stw	fp,8(sp)
81135a6c:	df000204 	addi	fp,sp,8
81135a70:	2007883a 	mov	r3,r4
81135a74:	2805883a 	mov	r2,r5
81135a78:	e0fffe0d 	sth	r3,-8(fp)
81135a7c:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135a80:	e0bffe0f 	ldh	r2,-8(fp)
81135a84:	10001416 	blt	r2,zero,81135ad8 <alt_up_sd_card_set_attributes+0x7c>
81135a88:	e0bffe0f 	ldh	r2,-8(fp)
81135a8c:	10800508 	cmpgei	r2,r2,20
81135a90:	1000111e 	bne	r2,zero,81135ad8 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81135a94:	e0fffe0f 	ldh	r3,-8(fp)
81135a98:	00a04574 	movhi	r2,33045
81135a9c:	10901204 	addi	r2,r2,16456
81135aa0:	180691ba 	slli	r3,r3,6
81135aa4:	10c5883a 	add	r2,r2,r3
81135aa8:	10800f04 	addi	r2,r2,60
81135aac:	10800017 	ldw	r2,0(r2)
81135ab0:	10000926 	beq	r2,zero,81135ad8 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81135ab4:	e0fffe0f 	ldh	r3,-8(fp)
81135ab8:	e0bfff0b 	ldhu	r2,-4(fp)
81135abc:	1009883a 	mov	r4,r2
81135ac0:	00a04574 	movhi	r2,33045
81135ac4:	10901204 	addi	r2,r2,16456
81135ac8:	180691ba 	slli	r3,r3,6
81135acc:	10c5883a 	add	r2,r2,r3
81135ad0:	108002c4 	addi	r2,r2,11
81135ad4:	11000005 	stb	r4,0(r2)
        }
    }
}
81135ad8:	0001883a 	nop
81135adc:	e037883a 	mov	sp,fp
81135ae0:	df000017 	ldw	fp,0(sp)
81135ae4:	dec00104 	addi	sp,sp,4
81135ae8:	f800283a 	ret

81135aec <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81135aec:	defffd04 	addi	sp,sp,-12
81135af0:	de00012e 	bgeu	sp,et,81135af8 <alt_up_sd_card_get_attributes+0xc>
81135af4:	003b68fa 	trap	3
81135af8:	df000215 	stw	fp,8(sp)
81135afc:	df000204 	addi	fp,sp,8
81135b00:	2005883a 	mov	r2,r4
81135b04:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81135b08:	00bfffc4 	movi	r2,-1
81135b0c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135b10:	e0bfff0f 	ldh	r2,-4(fp)
81135b14:	10001416 	blt	r2,zero,81135b68 <alt_up_sd_card_get_attributes+0x7c>
81135b18:	e0bfff0f 	ldh	r2,-4(fp)
81135b1c:	10800508 	cmpgei	r2,r2,20
81135b20:	1000111e 	bne	r2,zero,81135b68 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81135b24:	e0ffff0f 	ldh	r3,-4(fp)
81135b28:	00a04574 	movhi	r2,33045
81135b2c:	10901204 	addi	r2,r2,16456
81135b30:	180691ba 	slli	r3,r3,6
81135b34:	10c5883a 	add	r2,r2,r3
81135b38:	10800f04 	addi	r2,r2,60
81135b3c:	10800017 	ldw	r2,0(r2)
81135b40:	10000926 	beq	r2,zero,81135b68 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81135b44:	e0ffff0f 	ldh	r3,-4(fp)
81135b48:	00a04574 	movhi	r2,33045
81135b4c:	10901204 	addi	r2,r2,16456
81135b50:	180691ba 	slli	r3,r3,6
81135b54:	10c5883a 	add	r2,r2,r3
81135b58:	108002c4 	addi	r2,r2,11
81135b5c:	10800003 	ldbu	r2,0(r2)
81135b60:	10803fcc 	andi	r2,r2,255
81135b64:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
81135b68:	e0bffe0b 	ldhu	r2,-8(fp)
}
81135b6c:	e037883a 	mov	sp,fp
81135b70:	df000017 	ldw	fp,0(sp)
81135b74:	dec00104 	addi	sp,sp,4
81135b78:	f800283a 	ret

81135b7c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
81135b7c:	defffa04 	addi	sp,sp,-24
81135b80:	de00012e 	bgeu	sp,et,81135b88 <alt_up_sd_card_read+0xc>
81135b84:	003b68fa 	trap	3
81135b88:	dfc00515 	stw	ra,20(sp)
81135b8c:	df000415 	stw	fp,16(sp)
81135b90:	df000404 	addi	fp,sp,16
81135b94:	2005883a 	mov	r2,r4
81135b98:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
81135b9c:	00bfffc4 	movi	r2,-1
81135ba0:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135ba4:	e0bfff0f 	ldh	r2,-4(fp)
81135ba8:	1000ce16 	blt	r2,zero,81135ee4 <alt_up_sd_card_read+0x368>
81135bac:	e0bfff0f 	ldh	r2,-4(fp)
81135bb0:	10800508 	cmpgei	r2,r2,20
81135bb4:	1000cb1e 	bne	r2,zero,81135ee4 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81135bb8:	e0ffff0f 	ldh	r3,-4(fp)
81135bbc:	00a04574 	movhi	r2,33045
81135bc0:	10901204 	addi	r2,r2,16456
81135bc4:	180691ba 	slli	r3,r3,6
81135bc8:	10c5883a 	add	r2,r2,r3
81135bcc:	10800f04 	addi	r2,r2,60
81135bd0:	10800017 	ldw	r2,0(r2)
81135bd4:	1000c326 	beq	r2,zero,81135ee4 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81135bd8:	e0ffff0f 	ldh	r3,-4(fp)
81135bdc:	00a04574 	movhi	r2,33045
81135be0:	10901204 	addi	r2,r2,16456
81135be4:	180691ba 	slli	r3,r3,6
81135be8:	10c5883a 	add	r2,r2,r3
81135bec:	10800904 	addi	r2,r2,36
81135bf0:	10c00017 	ldw	r3,0(r2)
81135bf4:	e13fff0f 	ldh	r4,-4(fp)
81135bf8:	00a04574 	movhi	r2,33045
81135bfc:	10901204 	addi	r2,r2,16456
81135c00:	200891ba 	slli	r4,r4,6
81135c04:	1105883a 	add	r2,r2,r4
81135c08:	10800604 	addi	r2,r2,24
81135c0c:	10800017 	ldw	r2,0(r2)
81135c10:	1880b42e 	bgeu	r3,r2,81135ee4 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135c14:	00a04574 	movhi	r2,33045
81135c18:	108ffd04 	addi	r2,r2,16372
81135c1c:	10c01417 	ldw	r3,80(r2)
81135c20:	e13fff0f 	ldh	r4,-4(fp)
81135c24:	00a04574 	movhi	r2,33045
81135c28:	10901204 	addi	r2,r2,16456
81135c2c:	200891ba 	slli	r4,r4,6
81135c30:	1105883a 	add	r2,r2,r4
81135c34:	10800704 	addi	r2,r2,28
81135c38:	10800017 	ldw	r2,0(r2)
81135c3c:	113fff84 	addi	r4,r2,-2
81135c40:	00a04574 	movhi	r2,33045
81135c44:	108ffd04 	addi	r2,r2,16372
81135c48:	10800383 	ldbu	r2,14(r2)
81135c4c:	10803fcc 	andi	r2,r2,255
81135c50:	2085383a 	mul	r2,r4,r2
81135c54:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81135c58:	e13fff0f 	ldh	r4,-4(fp)
81135c5c:	00a04574 	movhi	r2,33045
81135c60:	10901204 	addi	r2,r2,16456
81135c64:	200891ba 	slli	r4,r4,6
81135c68:	1105883a 	add	r2,r2,r4
81135c6c:	10800804 	addi	r2,r2,32
81135c70:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135c74:	1885883a 	add	r2,r3,r2
81135c78:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81135c7c:	e0ffff0f 	ldh	r3,-4(fp)
81135c80:	00a04574 	movhi	r2,33045
81135c84:	10901204 	addi	r2,r2,16456
81135c88:	180691ba 	slli	r3,r3,6
81135c8c:	10c5883a 	add	r2,r2,r3
81135c90:	10800904 	addi	r2,r2,36
81135c94:	10800017 	ldw	r2,0(r2)
81135c98:	10006826 	beq	r2,zero,81135e3c <alt_up_sd_card_read+0x2c0>
81135c9c:	e0ffff0f 	ldh	r3,-4(fp)
81135ca0:	00a04574 	movhi	r2,33045
81135ca4:	10901204 	addi	r2,r2,16456
81135ca8:	180691ba 	slli	r3,r3,6
81135cac:	10c5883a 	add	r2,r2,r3
81135cb0:	10800904 	addi	r2,r2,36
81135cb4:	10800017 	ldw	r2,0(r2)
81135cb8:	10807fcc 	andi	r2,r2,511
81135cbc:	10005f1e 	bne	r2,zero,81135e3c <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81135cc0:	e0ffff0f 	ldh	r3,-4(fp)
81135cc4:	00a04574 	movhi	r2,33045
81135cc8:	10901204 	addi	r2,r2,16456
81135ccc:	180691ba 	slli	r3,r3,6
81135cd0:	10c5883a 	add	r2,r2,r3
81135cd4:	10800804 	addi	r2,r2,32
81135cd8:	10c00017 	ldw	r3,0(r2)
81135cdc:	00a04574 	movhi	r2,33045
81135ce0:	108ffd04 	addi	r2,r2,16372
81135ce4:	10800383 	ldbu	r2,14(r2)
81135ce8:	10803fcc 	andi	r2,r2,255
81135cec:	10bfffc4 	addi	r2,r2,-1
81135cf0:	1880401e 	bne	r3,r2,81135df4 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81135cf4:	e0ffff0f 	ldh	r3,-4(fp)
81135cf8:	00a04574 	movhi	r2,33045
81135cfc:	10901204 	addi	r2,r2,16456
81135d00:	180691ba 	slli	r3,r3,6
81135d04:	10c5883a 	add	r2,r2,r3
81135d08:	10800704 	addi	r2,r2,28
81135d0c:	10800017 	ldw	r2,0(r2)
81135d10:	e0fffe04 	addi	r3,fp,-8
81135d14:	180b883a 	mov	r5,r3
81135d18:	1009883a 	mov	r4,r2
81135d1c:	11325080 	call	81132508 <get_cluster_flag>
81135d20:	10003226 	beq	r2,zero,81135dec <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81135d24:	e0bffe0b 	ldhu	r2,-8(fp)
81135d28:	10bfffcc 	andi	r2,r2,65535
81135d2c:	10fffe0c 	andi	r3,r2,65528
81135d30:	00bffe14 	movui	r2,65528
81135d34:	1880021e 	bne	r3,r2,81135d40 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81135d38:	00bfffc4 	movi	r2,-1
81135d3c:	00006a06 	br	81135ee8 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81135d40:	e13fff0f 	ldh	r4,-4(fp)
81135d44:	e0bffe0b 	ldhu	r2,-8(fp)
81135d48:	10ffffcc 	andi	r3,r2,65535
81135d4c:	00a04574 	movhi	r2,33045
81135d50:	10901204 	addi	r2,r2,16456
81135d54:	200891ba 	slli	r4,r4,6
81135d58:	1105883a 	add	r2,r2,r4
81135d5c:	10800704 	addi	r2,r2,28
81135d60:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81135d64:	e0ffff0f 	ldh	r3,-4(fp)
81135d68:	00a04574 	movhi	r2,33045
81135d6c:	10901204 	addi	r2,r2,16456
81135d70:	180691ba 	slli	r3,r3,6
81135d74:	10c5883a 	add	r2,r2,r3
81135d78:	10800804 	addi	r2,r2,32
81135d7c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135d80:	00a04574 	movhi	r2,33045
81135d84:	108ffd04 	addi	r2,r2,16372
81135d88:	10c01417 	ldw	r3,80(r2)
81135d8c:	e13fff0f 	ldh	r4,-4(fp)
81135d90:	00a04574 	movhi	r2,33045
81135d94:	10901204 	addi	r2,r2,16456
81135d98:	200891ba 	slli	r4,r4,6
81135d9c:	1105883a 	add	r2,r2,r4
81135da0:	10800704 	addi	r2,r2,28
81135da4:	10800017 	ldw	r2,0(r2)
81135da8:	113fff84 	addi	r4,r2,-2
81135dac:	00a04574 	movhi	r2,33045
81135db0:	108ffd04 	addi	r2,r2,16372
81135db4:	10800383 	ldbu	r2,14(r2)
81135db8:	10803fcc 	andi	r2,r2,255
81135dbc:	2085383a 	mul	r2,r4,r2
81135dc0:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81135dc4:	e13fff0f 	ldh	r4,-4(fp)
81135dc8:	00a04574 	movhi	r2,33045
81135dcc:	10901204 	addi	r2,r2,16456
81135dd0:	200891ba 	slli	r4,r4,6
81135dd4:	1105883a 	add	r2,r2,r4
81135dd8:	10800804 	addi	r2,r2,32
81135ddc:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135de0:	1885883a 	add	r2,r3,r2
81135de4:	e0bffd15 	stw	r2,-12(fp)
81135de8:	00001406 	br	81135e3c <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
81135dec:	00bfff84 	movi	r2,-2
81135df0:	00003d06 	br	81135ee8 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81135df4:	e13fff0f 	ldh	r4,-4(fp)
81135df8:	e0ffff0f 	ldh	r3,-4(fp)
81135dfc:	00a04574 	movhi	r2,33045
81135e00:	10901204 	addi	r2,r2,16456
81135e04:	180691ba 	slli	r3,r3,6
81135e08:	10c5883a 	add	r2,r2,r3
81135e0c:	10800804 	addi	r2,r2,32
81135e10:	10800017 	ldw	r2,0(r2)
81135e14:	10c00044 	addi	r3,r2,1
81135e18:	00a04574 	movhi	r2,33045
81135e1c:	10901204 	addi	r2,r2,16456
81135e20:	200891ba 	slli	r4,r4,6
81135e24:	1105883a 	add	r2,r2,r4
81135e28:	10800804 	addi	r2,r2,32
81135e2c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81135e30:	e0bffd17 	ldw	r2,-12(fp)
81135e34:	10800044 	addi	r2,r2,1
81135e38:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81135e3c:	d0e09317 	ldw	r3,-32180(gp)
81135e40:	e0bffd17 	ldw	r2,-12(fp)
81135e44:	1885883a 	add	r2,r3,r2
81135e48:	1007883a 	mov	r3,r2
81135e4c:	d0a09717 	ldw	r2,-32164(gp)
81135e50:	18800726 	beq	r3,r2,81135e70 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81135e54:	d0a09317 	ldw	r2,-32180(gp)
81135e58:	100b883a 	mov	r5,r2
81135e5c:	e13ffd17 	ldw	r4,-12(fp)
81135e60:	11324280 	call	81132428 <Read_Sector_Data>
81135e64:	1000021e 	bne	r2,zero,81135e70 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
81135e68:	00bfff84 	movi	r2,-2
81135e6c:	00001e06 	br	81135ee8 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81135e70:	d0e09217 	ldw	r3,-32184(gp)
81135e74:	e13fff0f 	ldh	r4,-4(fp)
81135e78:	00a04574 	movhi	r2,33045
81135e7c:	10901204 	addi	r2,r2,16456
81135e80:	200891ba 	slli	r4,r4,6
81135e84:	1105883a 	add	r2,r2,r4
81135e88:	10800904 	addi	r2,r2,36
81135e8c:	10800017 	ldw	r2,0(r2)
81135e90:	10807fcc 	andi	r2,r2,511
81135e94:	1885883a 	add	r2,r3,r2
81135e98:	10800023 	ldbuio	r2,0(r2)
81135e9c:	10803fcc 	andi	r2,r2,255
81135ea0:	10803fcc 	andi	r2,r2,255
81135ea4:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81135ea8:	e13fff0f 	ldh	r4,-4(fp)
81135eac:	e0ffff0f 	ldh	r3,-4(fp)
81135eb0:	00a04574 	movhi	r2,33045
81135eb4:	10901204 	addi	r2,r2,16456
81135eb8:	180691ba 	slli	r3,r3,6
81135ebc:	10c5883a 	add	r2,r2,r3
81135ec0:	10800904 	addi	r2,r2,36
81135ec4:	10800017 	ldw	r2,0(r2)
81135ec8:	10c00044 	addi	r3,r2,1
81135ecc:	00a04574 	movhi	r2,33045
81135ed0:	10901204 	addi	r2,r2,16456
81135ed4:	200891ba 	slli	r4,r4,6
81135ed8:	1105883a 	add	r2,r2,r4
81135edc:	10800904 	addi	r2,r2,36
81135ee0:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
81135ee4:	e0bffc0b 	ldhu	r2,-16(fp)
}
81135ee8:	e037883a 	mov	sp,fp
81135eec:	dfc00117 	ldw	ra,4(sp)
81135ef0:	df000017 	ldw	fp,0(sp)
81135ef4:	dec00204 	addi	sp,sp,8
81135ef8:	f800283a 	ret

81135efc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
81135efc:	defff804 	addi	sp,sp,-32
81135f00:	de00012e 	bgeu	sp,et,81135f08 <alt_up_sd_card_write+0xc>
81135f04:	003b68fa 	trap	3
81135f08:	dfc00715 	stw	ra,28(sp)
81135f0c:	df000615 	stw	fp,24(sp)
81135f10:	df000604 	addi	fp,sp,24
81135f14:	2007883a 	mov	r3,r4
81135f18:	2805883a 	mov	r2,r5
81135f1c:	e0fffe0d 	sth	r3,-8(fp)
81135f20:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
81135f24:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81135f28:	e0bffe0f 	ldh	r2,-8(fp)
81135f2c:	10017716 	blt	r2,zero,8113650c <alt_up_sd_card_write+0x610>
81135f30:	e0bffe0f 	ldh	r2,-8(fp)
81135f34:	10800508 	cmpgei	r2,r2,20
81135f38:	1001741e 	bne	r2,zero,8113650c <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81135f3c:	e0fffe0f 	ldh	r3,-8(fp)
81135f40:	00a04574 	movhi	r2,33045
81135f44:	10901204 	addi	r2,r2,16456
81135f48:	180691ba 	slli	r3,r3,6
81135f4c:	10c5883a 	add	r2,r2,r3
81135f50:	10800f04 	addi	r2,r2,60
81135f54:	10800017 	ldw	r2,0(r2)
81135f58:	10016c26 	beq	r2,zero,8113650c <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135f5c:	00a04574 	movhi	r2,33045
81135f60:	108ffd04 	addi	r2,r2,16372
81135f64:	10c01417 	ldw	r3,80(r2)
81135f68:	e13ffe0f 	ldh	r4,-8(fp)
81135f6c:	00a04574 	movhi	r2,33045
81135f70:	10901204 	addi	r2,r2,16456
81135f74:	200891ba 	slli	r4,r4,6
81135f78:	1105883a 	add	r2,r2,r4
81135f7c:	10800704 	addi	r2,r2,28
81135f80:	10800017 	ldw	r2,0(r2)
81135f84:	113fff84 	addi	r4,r2,-2
81135f88:	00a04574 	movhi	r2,33045
81135f8c:	108ffd04 	addi	r2,r2,16372
81135f90:	10800383 	ldbu	r2,14(r2)
81135f94:	10803fcc 	andi	r2,r2,255
81135f98:	2085383a 	mul	r2,r4,r2
81135f9c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81135fa0:	e13ffe0f 	ldh	r4,-8(fp)
81135fa4:	00a04574 	movhi	r2,33045
81135fa8:	10901204 	addi	r2,r2,16456
81135fac:	200891ba 	slli	r4,r4,6
81135fb0:	1105883a 	add	r2,r2,r4
81135fb4:	10800804 	addi	r2,r2,32
81135fb8:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81135fbc:	1885883a 	add	r2,r3,r2
81135fc0:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81135fc4:	e0fffe0f 	ldh	r3,-8(fp)
81135fc8:	00a04574 	movhi	r2,33045
81135fcc:	10901204 	addi	r2,r2,16456
81135fd0:	180691ba 	slli	r3,r3,6
81135fd4:	10c5883a 	add	r2,r2,r3
81135fd8:	10800904 	addi	r2,r2,36
81135fdc:	10c00017 	ldw	r3,0(r2)
81135fe0:	00a04574 	movhi	r2,33045
81135fe4:	108ffd04 	addi	r2,r2,16372
81135fe8:	1080030b 	ldhu	r2,12(r2)
81135fec:	10bfffcc 	andi	r2,r2,65535
81135ff0:	1889203a 	divu	r4,r3,r2
81135ff4:	2085383a 	mul	r2,r4,r2
81135ff8:	1885c83a 	sub	r2,r3,r2
81135ffc:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81136000:	e0fffe0f 	ldh	r3,-8(fp)
81136004:	00a04574 	movhi	r2,33045
81136008:	10901204 	addi	r2,r2,16456
8113600c:	180691ba 	slli	r3,r3,6
81136010:	10c5883a 	add	r2,r2,r3
81136014:	10800904 	addi	r2,r2,36
81136018:	10c00017 	ldw	r3,0(r2)
8113601c:	e13ffe0f 	ldh	r4,-8(fp)
81136020:	00a04574 	movhi	r2,33045
81136024:	10901204 	addi	r2,r2,16456
81136028:	200891ba 	slli	r4,r4,6
8113602c:	1105883a 	add	r2,r2,r4
81136030:	10800604 	addi	r2,r2,24
81136034:	10800017 	ldw	r2,0(r2)
81136038:	1880672e 	bgeu	r3,r2,811361d8 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8113603c:	e0fffe0f 	ldh	r3,-8(fp)
81136040:	00a04574 	movhi	r2,33045
81136044:	10901204 	addi	r2,r2,16456
81136048:	180691ba 	slli	r3,r3,6
8113604c:	10c5883a 	add	r2,r2,r3
81136050:	10800904 	addi	r2,r2,36
81136054:	10800017 	ldw	r2,0(r2)
81136058:	1000e126 	beq	r2,zero,811363e0 <alt_up_sd_card_write+0x4e4>
8113605c:	e0bffc0f 	ldh	r2,-16(fp)
81136060:	1000df1e 	bne	r2,zero,811363e0 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81136064:	e0fffe0f 	ldh	r3,-8(fp)
81136068:	00a04574 	movhi	r2,33045
8113606c:	10901204 	addi	r2,r2,16456
81136070:	180691ba 	slli	r3,r3,6
81136074:	10c5883a 	add	r2,r2,r3
81136078:	10800804 	addi	r2,r2,32
8113607c:	10c00017 	ldw	r3,0(r2)
81136080:	00a04574 	movhi	r2,33045
81136084:	108ffd04 	addi	r2,r2,16372
81136088:	10800383 	ldbu	r2,14(r2)
8113608c:	10803fcc 	andi	r2,r2,255
81136090:	10bfffc4 	addi	r2,r2,-1
81136094:	18803d1e 	bne	r3,r2,8113618c <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81136098:	e0fffe0f 	ldh	r3,-8(fp)
8113609c:	00a04574 	movhi	r2,33045
811360a0:	10901204 	addi	r2,r2,16456
811360a4:	180691ba 	slli	r3,r3,6
811360a8:	10c5883a 	add	r2,r2,r3
811360ac:	10800704 	addi	r2,r2,28
811360b0:	10800017 	ldw	r2,0(r2)
811360b4:	e0fffc84 	addi	r3,fp,-14
811360b8:	180b883a 	mov	r5,r3
811360bc:	1009883a 	mov	r4,r2
811360c0:	11325080 	call	81132508 <get_cluster_flag>
811360c4:	10002f26 	beq	r2,zero,81136184 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
811360c8:	e0bffc8b 	ldhu	r2,-14(fp)
811360cc:	10bfffcc 	andi	r2,r2,65535
811360d0:	10bffe28 	cmpgeui	r2,r2,65528
811360d4:	1000c21e 	bne	r2,zero,811363e0 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
811360d8:	e13ffe0f 	ldh	r4,-8(fp)
811360dc:	e0bffc8b 	ldhu	r2,-14(fp)
811360e0:	10ffffcc 	andi	r3,r2,65535
811360e4:	00a04574 	movhi	r2,33045
811360e8:	10901204 	addi	r2,r2,16456
811360ec:	200891ba 	slli	r4,r4,6
811360f0:	1105883a 	add	r2,r2,r4
811360f4:	10800704 	addi	r2,r2,28
811360f8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811360fc:	e0fffe0f 	ldh	r3,-8(fp)
81136100:	00a04574 	movhi	r2,33045
81136104:	10901204 	addi	r2,r2,16456
81136108:	180691ba 	slli	r3,r3,6
8113610c:	10c5883a 	add	r2,r2,r3
81136110:	10800804 	addi	r2,r2,32
81136114:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136118:	00a04574 	movhi	r2,33045
8113611c:	108ffd04 	addi	r2,r2,16372
81136120:	10c01417 	ldw	r3,80(r2)
81136124:	e13ffe0f 	ldh	r4,-8(fp)
81136128:	00a04574 	movhi	r2,33045
8113612c:	10901204 	addi	r2,r2,16456
81136130:	200891ba 	slli	r4,r4,6
81136134:	1105883a 	add	r2,r2,r4
81136138:	10800704 	addi	r2,r2,28
8113613c:	10800017 	ldw	r2,0(r2)
81136140:	113fff84 	addi	r4,r2,-2
81136144:	00a04574 	movhi	r2,33045
81136148:	108ffd04 	addi	r2,r2,16372
8113614c:	10800383 	ldbu	r2,14(r2)
81136150:	10803fcc 	andi	r2,r2,255
81136154:	2085383a 	mul	r2,r4,r2
81136158:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8113615c:	e13ffe0f 	ldh	r4,-8(fp)
81136160:	00a04574 	movhi	r2,33045
81136164:	10901204 	addi	r2,r2,16456
81136168:	200891ba 	slli	r4,r4,6
8113616c:	1105883a 	add	r2,r2,r4
81136170:	10800804 	addi	r2,r2,32
81136174:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136178:	1885883a 	add	r2,r3,r2
8113617c:	e0bffb15 	stw	r2,-20(fp)
81136180:	00009706 	br	811363e0 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81136184:	0005883a 	mov	r2,zero
81136188:	0000e106 	br	81136510 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8113618c:	e13ffe0f 	ldh	r4,-8(fp)
81136190:	e0fffe0f 	ldh	r3,-8(fp)
81136194:	00a04574 	movhi	r2,33045
81136198:	10901204 	addi	r2,r2,16456
8113619c:	180691ba 	slli	r3,r3,6
811361a0:	10c5883a 	add	r2,r2,r3
811361a4:	10800804 	addi	r2,r2,32
811361a8:	10800017 	ldw	r2,0(r2)
811361ac:	10c00044 	addi	r3,r2,1
811361b0:	00a04574 	movhi	r2,33045
811361b4:	10901204 	addi	r2,r2,16456
811361b8:	200891ba 	slli	r4,r4,6
811361bc:	1105883a 	add	r2,r2,r4
811361c0:	10800804 	addi	r2,r2,32
811361c4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
811361c8:	e0bffb17 	ldw	r2,-20(fp)
811361cc:	10800044 	addi	r2,r2,1
811361d0:	e0bffb15 	stw	r2,-20(fp)
811361d4:	00008206 	br	811363e0 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
811361d8:	e0fffe0f 	ldh	r3,-8(fp)
811361dc:	00a04574 	movhi	r2,33045
811361e0:	10901204 	addi	r2,r2,16456
811361e4:	180691ba 	slli	r3,r3,6
811361e8:	10c5883a 	add	r2,r2,r3
811361ec:	10800904 	addi	r2,r2,36
811361f0:	10800017 	ldw	r2,0(r2)
811361f4:	10007a26 	beq	r2,zero,811363e0 <alt_up_sd_card_write+0x4e4>
811361f8:	e0bffc0f 	ldh	r2,-16(fp)
811361fc:	1000781e 	bne	r2,zero,811363e0 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81136200:	e0fffe0f 	ldh	r3,-8(fp)
81136204:	00a04574 	movhi	r2,33045
81136208:	10901204 	addi	r2,r2,16456
8113620c:	180691ba 	slli	r3,r3,6
81136210:	10c5883a 	add	r2,r2,r3
81136214:	10800804 	addi	r2,r2,32
81136218:	10c00017 	ldw	r3,0(r2)
8113621c:	00a04574 	movhi	r2,33045
81136220:	108ffd04 	addi	r2,r2,16372
81136224:	10800383 	ldbu	r2,14(r2)
81136228:	10803fcc 	andi	r2,r2,255
8113622c:	10bfffc4 	addi	r2,r2,-1
81136230:	18803e1e 	bne	r3,r2,8113632c <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81136234:	e0bffd04 	addi	r2,fp,-12
81136238:	1009883a 	mov	r4,r2
8113623c:	113454c0 	call	8113454c <find_first_empty_cluster>
81136240:	10003826 	beq	r2,zero,81136324 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81136244:	e0fffe0f 	ldh	r3,-8(fp)
81136248:	00a04574 	movhi	r2,33045
8113624c:	10901204 	addi	r2,r2,16456
81136250:	180691ba 	slli	r3,r3,6
81136254:	10c5883a 	add	r2,r2,r3
81136258:	10800704 	addi	r2,r2,28
8113625c:	10800017 	ldw	r2,0(r2)
81136260:	e0fffd17 	ldw	r3,-12(fp)
81136264:	18ffffcc 	andi	r3,r3,65535
81136268:	18e0001c 	xori	r3,r3,32768
8113626c:	18e00004 	addi	r3,r3,-32768
81136270:	01800044 	movi	r6,1
81136274:	180b883a 	mov	r5,r3
81136278:	1009883a 	mov	r4,r2
8113627c:	11325c40 	call	811325c4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81136280:	e0bffd17 	ldw	r2,-12(fp)
81136284:	01800044 	movi	r6,1
81136288:	017fffc4 	movi	r5,-1
8113628c:	1009883a 	mov	r4,r2
81136290:	11325c40 	call	811325c4 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81136294:	e0fffe0f 	ldh	r3,-8(fp)
81136298:	00a04574 	movhi	r2,33045
8113629c:	10901204 	addi	r2,r2,16456
811362a0:	180691ba 	slli	r3,r3,6
811362a4:	10c5883a 	add	r2,r2,r3
811362a8:	10800704 	addi	r2,r2,28
811362ac:	10800017 	ldw	r2,0(r2)
811362b0:	e0fffd17 	ldw	r3,-12(fp)
811362b4:	18ffffcc 	andi	r3,r3,65535
811362b8:	18e0001c 	xori	r3,r3,32768
811362bc:	18e00004 	addi	r3,r3,-32768
811362c0:	000d883a 	mov	r6,zero
811362c4:	180b883a 	mov	r5,r3
811362c8:	1009883a 	mov	r4,r2
811362cc:	11325c40 	call	811325c4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
811362d0:	e0bffd17 	ldw	r2,-12(fp)
811362d4:	000d883a 	mov	r6,zero
811362d8:	017fffc4 	movi	r5,-1
811362dc:	1009883a 	mov	r4,r2
811362e0:	11325c40 	call	811325c4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
811362e4:	e13ffe0f 	ldh	r4,-8(fp)
811362e8:	e0fffd17 	ldw	r3,-12(fp)
811362ec:	00a04574 	movhi	r2,33045
811362f0:	10901204 	addi	r2,r2,16456
811362f4:	200891ba 	slli	r4,r4,6
811362f8:	1105883a 	add	r2,r2,r4
811362fc:	10800704 	addi	r2,r2,28
81136300:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
81136304:	e0fffe0f 	ldh	r3,-8(fp)
81136308:	00a04574 	movhi	r2,33045
8113630c:	10901204 	addi	r2,r2,16456
81136310:	180691ba 	slli	r3,r3,6
81136314:	10c5883a 	add	r2,r2,r3
81136318:	10800804 	addi	r2,r2,32
8113631c:	10000015 	stw	zero,0(r2)
81136320:	00001506 	br	81136378 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
81136324:	0005883a 	mov	r2,zero
81136328:	00007906 	br	81136510 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
8113632c:	e13ffe0f 	ldh	r4,-8(fp)
81136330:	e0fffe0f 	ldh	r3,-8(fp)
81136334:	00a04574 	movhi	r2,33045
81136338:	10901204 	addi	r2,r2,16456
8113633c:	180691ba 	slli	r3,r3,6
81136340:	10c5883a 	add	r2,r2,r3
81136344:	10800904 	addi	r2,r2,36
81136348:	10c00017 	ldw	r3,0(r2)
8113634c:	00a04574 	movhi	r2,33045
81136350:	108ffd04 	addi	r2,r2,16372
81136354:	1080030b 	ldhu	r2,12(r2)
81136358:	10bfffcc 	andi	r2,r2,65535
8113635c:	1887203a 	divu	r3,r3,r2
81136360:	00a04574 	movhi	r2,33045
81136364:	10901204 	addi	r2,r2,16456
81136368:	200891ba 	slli	r4,r4,6
8113636c:	1105883a 	add	r2,r2,r4
81136370:	10800804 	addi	r2,r2,32
81136374:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136378:	00a04574 	movhi	r2,33045
8113637c:	108ffd04 	addi	r2,r2,16372
81136380:	10c01417 	ldw	r3,80(r2)
81136384:	e13ffe0f 	ldh	r4,-8(fp)
81136388:	00a04574 	movhi	r2,33045
8113638c:	10901204 	addi	r2,r2,16456
81136390:	200891ba 	slli	r4,r4,6
81136394:	1105883a 	add	r2,r2,r4
81136398:	10800704 	addi	r2,r2,28
8113639c:	10800017 	ldw	r2,0(r2)
811363a0:	113fff84 	addi	r4,r2,-2
811363a4:	00a04574 	movhi	r2,33045
811363a8:	108ffd04 	addi	r2,r2,16372
811363ac:	10800383 	ldbu	r2,14(r2)
811363b0:	10803fcc 	andi	r2,r2,255
811363b4:	2085383a 	mul	r2,r4,r2
811363b8:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
811363bc:	e13ffe0f 	ldh	r4,-8(fp)
811363c0:	00a04574 	movhi	r2,33045
811363c4:	10901204 	addi	r2,r2,16456
811363c8:	200891ba 	slli	r4,r4,6
811363cc:	1105883a 	add	r2,r2,r4
811363d0:	10800804 	addi	r2,r2,32
811363d4:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811363d8:	1885883a 	add	r2,r3,r2
811363dc:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
811363e0:	d0e09317 	ldw	r3,-32180(gp)
811363e4:	e0bffb17 	ldw	r2,-20(fp)
811363e8:	1885883a 	add	r2,r3,r2
811363ec:	1007883a 	mov	r3,r2
811363f0:	d0a09717 	ldw	r2,-32164(gp)
811363f4:	18800726 	beq	r3,r2,81136414 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811363f8:	d0a09317 	ldw	r2,-32180(gp)
811363fc:	100b883a 	mov	r5,r2
81136400:	e13ffb17 	ldw	r4,-20(fp)
81136404:	11324280 	call	81132428 <Read_Sector_Data>
81136408:	1000021e 	bne	r2,zero,81136414 <alt_up_sd_card_write+0x518>
                {
					return false;
8113640c:	0005883a 	mov	r2,zero
81136410:	00003f06 	br	81136510 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
81136414:	d0e09217 	ldw	r3,-32184(gp)
81136418:	e0bffc0f 	ldh	r2,-16(fp)
8113641c:	1885883a 	add	r2,r3,r2
81136420:	e0ffff07 	ldb	r3,-4(fp)
81136424:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81136428:	e13ffe0f 	ldh	r4,-8(fp)
8113642c:	e0fffe0f 	ldh	r3,-8(fp)
81136430:	00a04574 	movhi	r2,33045
81136434:	10901204 	addi	r2,r2,16456
81136438:	180691ba 	slli	r3,r3,6
8113643c:	10c5883a 	add	r2,r2,r3
81136440:	10800904 	addi	r2,r2,36
81136444:	10800017 	ldw	r2,0(r2)
81136448:	10c00044 	addi	r3,r2,1
8113644c:	00a04574 	movhi	r2,33045
81136450:	10901204 	addi	r2,r2,16456
81136454:	200891ba 	slli	r4,r4,6
81136458:	1105883a 	add	r2,r2,r4
8113645c:	10800904 	addi	r2,r2,36
81136460:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81136464:	e0fffe0f 	ldh	r3,-8(fp)
81136468:	00a04574 	movhi	r2,33045
8113646c:	10901204 	addi	r2,r2,16456
81136470:	180691ba 	slli	r3,r3,6
81136474:	10c5883a 	add	r2,r2,r3
81136478:	10800904 	addi	r2,r2,36
8113647c:	10c00017 	ldw	r3,0(r2)
81136480:	e13ffe0f 	ldh	r4,-8(fp)
81136484:	00a04574 	movhi	r2,33045
81136488:	10901204 	addi	r2,r2,16456
8113648c:	200891ba 	slli	r4,r4,6
81136490:	1105883a 	add	r2,r2,r4
81136494:	10800604 	addi	r2,r2,24
81136498:	10800017 	ldw	r2,0(r2)
8113649c:	18801736 	bltu	r3,r2,811364fc <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
811364a0:	e13ffe0f 	ldh	r4,-8(fp)
811364a4:	e0fffe0f 	ldh	r3,-8(fp)
811364a8:	00a04574 	movhi	r2,33045
811364ac:	10901204 	addi	r2,r2,16456
811364b0:	180691ba 	slli	r3,r3,6
811364b4:	10c5883a 	add	r2,r2,r3
811364b8:	10800604 	addi	r2,r2,24
811364bc:	10800017 	ldw	r2,0(r2)
811364c0:	10c00044 	addi	r3,r2,1
811364c4:	00a04574 	movhi	r2,33045
811364c8:	10901204 	addi	r2,r2,16456
811364cc:	200891ba 	slli	r4,r4,6
811364d0:	1105883a 	add	r2,r2,r4
811364d4:	10800604 	addi	r2,r2,24
811364d8:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
811364dc:	e0fffe0f 	ldh	r3,-8(fp)
811364e0:	00a04574 	movhi	r2,33045
811364e4:	10901204 	addi	r2,r2,16456
811364e8:	180691ba 	slli	r3,r3,6
811364ec:	10c5883a 	add	r2,r2,r3
811364f0:	10800e04 	addi	r2,r2,56
811364f4:	00c00044 	movi	r3,1
811364f8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811364fc:	00800044 	movi	r2,1
81136500:	d0a09615 	stw	r2,-32168(gp)
			result = true;
81136504:	00800044 	movi	r2,1
81136508:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
8113650c:	e0bffa17 	ldw	r2,-24(fp)
}
81136510:	e037883a 	mov	sp,fp
81136514:	dfc00117 	ldw	ra,4(sp)
81136518:	df000017 	ldw	fp,0(sp)
8113651c:	dec00204 	addi	sp,sp,8
81136520:	f800283a 	ret

81136524 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
81136524:	defffb04 	addi	sp,sp,-20
81136528:	de00012e 	bgeu	sp,et,81136530 <alt_up_sd_card_fclose+0xc>
8113652c:	003b68fa 	trap	3
81136530:	dfc00415 	stw	ra,16(sp)
81136534:	df000315 	stw	fp,12(sp)
81136538:	df000304 	addi	fp,sp,12
8113653c:	2005883a 	mov	r2,r4
81136540:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81136544:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81136548:	11351000 	call	81135100 <alt_up_sd_card_is_Present>
8113654c:	10006026 	beq	r2,zero,811366d0 <alt_up_sd_card_fclose+0x1ac>
81136550:	d0a08c17 	ldw	r2,-32208(gp)
81136554:	10005e26 	beq	r2,zero,811366d0 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81136558:	e0ffff0f 	ldh	r3,-4(fp)
8113655c:	00a04574 	movhi	r2,33045
81136560:	10901204 	addi	r2,r2,16456
81136564:	180691ba 	slli	r3,r3,6
81136568:	10c5883a 	add	r2,r2,r3
8113656c:	10800f04 	addi	r2,r2,60
81136570:	10800017 	ldw	r2,0(r2)
81136574:	10005626 	beq	r2,zero,811366d0 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81136578:	e0ffff0f 	ldh	r3,-4(fp)
8113657c:	00a04574 	movhi	r2,33045
81136580:	10901204 	addi	r2,r2,16456
81136584:	180691ba 	slli	r3,r3,6
81136588:	10c5883a 	add	r2,r2,r3
8113658c:	10800e04 	addi	r2,r2,56
81136590:	10800017 	ldw	r2,0(r2)
81136594:	10004526 	beq	r2,zero,811366ac <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81136598:	e0ffff0f 	ldh	r3,-4(fp)
8113659c:	00a04574 	movhi	r2,33045
811365a0:	10901204 	addi	r2,r2,16456
811365a4:	180691ba 	slli	r3,r3,6
811365a8:	10c5883a 	add	r2,r2,r3
811365ac:	10800b04 	addi	r2,r2,44
811365b0:	10800017 	ldw	r2,0(r2)
811365b4:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
811365b8:	e0ffff0f 	ldh	r3,-4(fp)
811365bc:	00a04574 	movhi	r2,33045
811365c0:	10901204 	addi	r2,r2,16456
811365c4:	180691ba 	slli	r3,r3,6
811365c8:	10c5883a 	add	r2,r2,r3
811365cc:	10800a04 	addi	r2,r2,40
811365d0:	10800017 	ldw	r2,0(r2)
811365d4:	1000071e 	bne	r2,zero,811365f4 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
811365d8:	00a04574 	movhi	r2,33045
811365dc:	108ffd04 	addi	r2,r2,16372
811365e0:	10801317 	ldw	r2,76(r2)
811365e4:	e0fffe17 	ldw	r3,-8(fp)
811365e8:	1885883a 	add	r2,r3,r2
811365ec:	e0bffe15 	stw	r2,-8(fp)
811365f0:	00001406 	br	81136644 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811365f4:	00a04574 	movhi	r2,33045
811365f8:	108ffd04 	addi	r2,r2,16372
811365fc:	10c01417 	ldw	r3,80(r2)
81136600:	e0bffe17 	ldw	r2,-8(fp)
81136604:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
81136608:	e13fff0f 	ldh	r4,-4(fp)
8113660c:	00a04574 	movhi	r2,33045
81136610:	10901204 	addi	r2,r2,16456
81136614:	200891ba 	slli	r4,r4,6
81136618:	1105883a 	add	r2,r2,r4
8113661c:	10800a04 	addi	r2,r2,40
81136620:	10800017 	ldw	r2,0(r2)
81136624:	113fff84 	addi	r4,r2,-2
81136628:	00a04574 	movhi	r2,33045
8113662c:	108ffd04 	addi	r2,r2,16372
81136630:	10800383 	ldbu	r2,14(r2)
81136634:	10803fcc 	andi	r2,r2,255
81136638:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8113663c:	1885883a 	add	r2,r3,r2
81136640:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
81136644:	e0bffe17 	ldw	r2,-8(fp)
81136648:	d0e09317 	ldw	r3,-32180(gp)
8113664c:	180b883a 	mov	r5,r3
81136650:	1009883a 	mov	r4,r2
81136654:	11324280 	call	81132428 <Read_Sector_Data>
81136658:	10001426 	beq	r2,zero,811366ac <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
8113665c:	e0ffff0f 	ldh	r3,-4(fp)
81136660:	00a04574 	movhi	r2,33045
81136664:	10901204 	addi	r2,r2,16456
81136668:	180691ba 	slli	r3,r3,6
8113666c:	10c5883a 	add	r2,r2,r3
81136670:	10800c04 	addi	r2,r2,48
81136674:	1080000b 	ldhu	r2,0(r2)
81136678:	113fffcc 	andi	r4,r2,65535
8113667c:	2120001c 	xori	r4,r4,32768
81136680:	21200004 	addi	r4,r4,-32768
81136684:	e0bfff0f 	ldh	r2,-4(fp)
81136688:	100691ba 	slli	r3,r2,6
8113668c:	00a04574 	movhi	r2,33045
81136690:	10901204 	addi	r2,r2,16456
81136694:	1885883a 	add	r2,r3,r2
81136698:	100b883a 	mov	r5,r2
8113669c:	1132adc0 	call	81132adc <Write_File_Record_At_Offset>
811366a0:	10000226 	beq	r2,zero,811366ac <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
811366a4:	11323d40 	call	811323d4 <Save_Modified_Sector>
811366a8:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
811366ac:	e0ffff0f 	ldh	r3,-4(fp)
811366b0:	00a04574 	movhi	r2,33045
811366b4:	10901204 	addi	r2,r2,16456
811366b8:	180691ba 	slli	r3,r3,6
811366bc:	10c5883a 	add	r2,r2,r3
811366c0:	10800f04 	addi	r2,r2,60
811366c4:	10000015 	stw	zero,0(r2)
			result = true;
811366c8:	00800044 	movi	r2,1
811366cc:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
811366d0:	e0bffd17 	ldw	r2,-12(fp)
}
811366d4:	e037883a 	mov	sp,fp
811366d8:	dfc00117 	ldw	ra,4(sp)
811366dc:	df000017 	ldw	fp,0(sp)
811366e0:	dec00204 	addi	sp,sp,8
811366e4:	f800283a 	ret

811366e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811366e8:	defffa04 	addi	sp,sp,-24
811366ec:	de00012e 	bgeu	sp,et,811366f4 <altera_avalon_jtag_uart_read_fd+0xc>
811366f0:	003b68fa 	trap	3
811366f4:	dfc00515 	stw	ra,20(sp)
811366f8:	df000415 	stw	fp,16(sp)
811366fc:	df000404 	addi	fp,sp,16
81136700:	e13ffd15 	stw	r4,-12(fp)
81136704:	e17ffe15 	stw	r5,-8(fp)
81136708:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8113670c:	e0bffd17 	ldw	r2,-12(fp)
81136710:	10800017 	ldw	r2,0(r2)
81136714:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81136718:	e0bffc17 	ldw	r2,-16(fp)
8113671c:	10c00a04 	addi	r3,r2,40
81136720:	e0bffd17 	ldw	r2,-12(fp)
81136724:	10800217 	ldw	r2,8(r2)
81136728:	100f883a 	mov	r7,r2
8113672c:	e1bfff17 	ldw	r6,-4(fp)
81136730:	e17ffe17 	ldw	r5,-8(fp)
81136734:	1809883a 	mov	r4,r3
81136738:	1136edc0 	call	81136edc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8113673c:	e037883a 	mov	sp,fp
81136740:	dfc00117 	ldw	ra,4(sp)
81136744:	df000017 	ldw	fp,0(sp)
81136748:	dec00204 	addi	sp,sp,8
8113674c:	f800283a 	ret

81136750 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81136750:	defffa04 	addi	sp,sp,-24
81136754:	de00012e 	bgeu	sp,et,8113675c <altera_avalon_jtag_uart_write_fd+0xc>
81136758:	003b68fa 	trap	3
8113675c:	dfc00515 	stw	ra,20(sp)
81136760:	df000415 	stw	fp,16(sp)
81136764:	df000404 	addi	fp,sp,16
81136768:	e13ffd15 	stw	r4,-12(fp)
8113676c:	e17ffe15 	stw	r5,-8(fp)
81136770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81136774:	e0bffd17 	ldw	r2,-12(fp)
81136778:	10800017 	ldw	r2,0(r2)
8113677c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81136780:	e0bffc17 	ldw	r2,-16(fp)
81136784:	10c00a04 	addi	r3,r2,40
81136788:	e0bffd17 	ldw	r2,-12(fp)
8113678c:	10800217 	ldw	r2,8(r2)
81136790:	100f883a 	mov	r7,r2
81136794:	e1bfff17 	ldw	r6,-4(fp)
81136798:	e17ffe17 	ldw	r5,-8(fp)
8113679c:	1809883a 	mov	r4,r3
811367a0:	11371a00 	call	811371a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811367a4:	e037883a 	mov	sp,fp
811367a8:	dfc00117 	ldw	ra,4(sp)
811367ac:	df000017 	ldw	fp,0(sp)
811367b0:	dec00204 	addi	sp,sp,8
811367b4:	f800283a 	ret

811367b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
811367b8:	defffc04 	addi	sp,sp,-16
811367bc:	de00012e 	bgeu	sp,et,811367c4 <altera_avalon_jtag_uart_close_fd+0xc>
811367c0:	003b68fa 	trap	3
811367c4:	dfc00315 	stw	ra,12(sp)
811367c8:	df000215 	stw	fp,8(sp)
811367cc:	df000204 	addi	fp,sp,8
811367d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811367d4:	e0bfff17 	ldw	r2,-4(fp)
811367d8:	10800017 	ldw	r2,0(r2)
811367dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
811367e0:	e0bffe17 	ldw	r2,-8(fp)
811367e4:	10c00a04 	addi	r3,r2,40
811367e8:	e0bfff17 	ldw	r2,-4(fp)
811367ec:	10800217 	ldw	r2,8(r2)
811367f0:	100b883a 	mov	r5,r2
811367f4:	1809883a 	mov	r4,r3
811367f8:	1136d740 	call	81136d74 <altera_avalon_jtag_uart_close>
}
811367fc:	e037883a 	mov	sp,fp
81136800:	dfc00117 	ldw	ra,4(sp)
81136804:	df000017 	ldw	fp,0(sp)
81136808:	dec00204 	addi	sp,sp,8
8113680c:	f800283a 	ret

81136810 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81136810:	defffa04 	addi	sp,sp,-24
81136814:	de00012e 	bgeu	sp,et,8113681c <altera_avalon_jtag_uart_ioctl_fd+0xc>
81136818:	003b68fa 	trap	3
8113681c:	dfc00515 	stw	ra,20(sp)
81136820:	df000415 	stw	fp,16(sp)
81136824:	df000404 	addi	fp,sp,16
81136828:	e13ffd15 	stw	r4,-12(fp)
8113682c:	e17ffe15 	stw	r5,-8(fp)
81136830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81136834:	e0bffd17 	ldw	r2,-12(fp)
81136838:	10800017 	ldw	r2,0(r2)
8113683c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81136840:	e0bffc17 	ldw	r2,-16(fp)
81136844:	10800a04 	addi	r2,r2,40
81136848:	e1bfff17 	ldw	r6,-4(fp)
8113684c:	e17ffe17 	ldw	r5,-8(fp)
81136850:	1009883a 	mov	r4,r2
81136854:	1136de40 	call	81136de4 <altera_avalon_jtag_uart_ioctl>
}
81136858:	e037883a 	mov	sp,fp
8113685c:	dfc00117 	ldw	ra,4(sp)
81136860:	df000017 	ldw	fp,0(sp)
81136864:	dec00204 	addi	sp,sp,8
81136868:	f800283a 	ret

8113686c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8113686c:	defff104 	addi	sp,sp,-60
81136870:	de00012e 	bgeu	sp,et,81136878 <altera_avalon_jtag_uart_init+0xc>
81136874:	003b68fa 	trap	3
81136878:	dfc00e15 	stw	ra,56(sp)
8113687c:	df000d15 	stw	fp,52(sp)
81136880:	df000d04 	addi	fp,sp,52
81136884:	e13ff915 	stw	r4,-28(fp)
81136888:	e17ffa15 	stw	r5,-24(fp)
8113688c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81136890:	e0bff917 	ldw	r2,-28(fp)
81136894:	10800c04 	addi	r2,r2,48
81136898:	e0bff415 	stw	r2,-48(fp)
8113689c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811368a0:	e0bff80b 	ldhu	r2,-32(fp)
811368a4:	e0fff884 	addi	r3,fp,-30
811368a8:	180b883a 	mov	r5,r3
811368ac:	1009883a 	mov	r4,r2
811368b0:	112aa3c0 	call	8112aa3c <OSFlagCreate>
811368b4:	1007883a 	mov	r3,r2
811368b8:	e0bff417 	ldw	r2,-48(fp)
811368bc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
811368c0:	e0bff917 	ldw	r2,-28(fp)
811368c4:	10800a04 	addi	r2,r2,40
811368c8:	e0bff515 	stw	r2,-44(fp)
811368cc:	00800044 	movi	r2,1
811368d0:	e0bff78d 	sth	r2,-34(fp)
811368d4:	e0bff78b 	ldhu	r2,-34(fp)
811368d8:	1009883a 	mov	r4,r2
811368dc:	112e9980 	call	8112e998 <OSSemCreate>
811368e0:	1007883a 	mov	r3,r2
811368e4:	e0bff517 	ldw	r2,-44(fp)
811368e8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
811368ec:	e0bff917 	ldw	r2,-28(fp)
811368f0:	10800b04 	addi	r2,r2,44
811368f4:	e0bff615 	stw	r2,-40(fp)
811368f8:	00800044 	movi	r2,1
811368fc:	e0bff70d 	sth	r2,-36(fp)
81136900:	e0bff70b 	ldhu	r2,-36(fp)
81136904:	1009883a 	mov	r4,r2
81136908:	112e9980 	call	8112e998 <OSSemCreate>
8113690c:	1007883a 	mov	r3,r2
81136910:	e0bff617 	ldw	r2,-40(fp)
81136914:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81136918:	e0bff917 	ldw	r2,-28(fp)
8113691c:	00c00044 	movi	r3,1
81136920:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81136924:	e0bff917 	ldw	r2,-28(fp)
81136928:	10800017 	ldw	r2,0(r2)
8113692c:	10800104 	addi	r2,r2,4
81136930:	1007883a 	mov	r3,r2
81136934:	e0bff917 	ldw	r2,-28(fp)
81136938:	10800817 	ldw	r2,32(r2)
8113693c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81136940:	e0bffa17 	ldw	r2,-24(fp)
81136944:	e0fffb17 	ldw	r3,-20(fp)
81136948:	d8000015 	stw	zero,0(sp)
8113694c:	e1fff917 	ldw	r7,-28(fp)
81136950:	01a044f4 	movhi	r6,33043
81136954:	319a6f04 	addi	r6,r6,27068
81136958:	180b883a 	mov	r5,r3
8113695c:	1009883a 	mov	r4,r2
81136960:	113a7c00 	call	8113a7c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81136964:	e0bff917 	ldw	r2,-28(fp)
81136968:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8113696c:	e0bff917 	ldw	r2,-28(fp)
81136970:	10800204 	addi	r2,r2,8
81136974:	d0e06a17 	ldw	r3,-32344(gp)
81136978:	e1fff917 	ldw	r7,-28(fp)
8113697c:	01a044f4 	movhi	r6,33043
81136980:	319b1a04 	addi	r6,r6,27752
81136984:	180b883a 	mov	r5,r3
81136988:	1009883a 	mov	r4,r2
8113698c:	113a2400 	call	8113a240 <alt_alarm_start>
81136990:	1000040e 	bge	r2,zero,811369a4 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81136994:	e0fff917 	ldw	r3,-28(fp)
81136998:	00a00034 	movhi	r2,32768
8113699c:	10bfffc4 	addi	r2,r2,-1
811369a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
811369a4:	0001883a 	nop
811369a8:	e037883a 	mov	sp,fp
811369ac:	dfc00117 	ldw	ra,4(sp)
811369b0:	df000017 	ldw	fp,0(sp)
811369b4:	dec00204 	addi	sp,sp,8
811369b8:	f800283a 	ret

811369bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
811369bc:	defff204 	addi	sp,sp,-56
811369c0:	de00012e 	bgeu	sp,et,811369c8 <altera_avalon_jtag_uart_irq+0xc>
811369c4:	003b68fa 	trap	3
811369c8:	dfc00d15 	stw	ra,52(sp)
811369cc:	df000c15 	stw	fp,48(sp)
811369d0:	df000c04 	addi	fp,sp,48
811369d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
811369d8:	e0bfff17 	ldw	r2,-4(fp)
811369dc:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
811369e0:	e0bff617 	ldw	r2,-40(fp)
811369e4:	10800017 	ldw	r2,0(r2)
811369e8:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811369ec:	e0bff717 	ldw	r2,-36(fp)
811369f0:	10800104 	addi	r2,r2,4
811369f4:	10800037 	ldwio	r2,0(r2)
811369f8:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
811369fc:	e0bff817 	ldw	r2,-32(fp)
81136a00:	1080c00c 	andi	r2,r2,768
81136a04:	10009126 	beq	r2,zero,81136c4c <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81136a08:	e0bff817 	ldw	r2,-32(fp)
81136a0c:	1080400c 	andi	r2,r2,256
81136a10:	10004726 	beq	r2,zero,81136b30 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81136a14:	00800074 	movhi	r2,1
81136a18:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136a1c:	e0bff617 	ldw	r2,-40(fp)
81136a20:	10800d17 	ldw	r2,52(r2)
81136a24:	10800044 	addi	r2,r2,1
81136a28:	1081ffcc 	andi	r2,r2,2047
81136a2c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81136a30:	e0bff617 	ldw	r2,-40(fp)
81136a34:	10c00e17 	ldw	r3,56(r2)
81136a38:	e0bff917 	ldw	r2,-28(fp)
81136a3c:	18802726 	beq	r3,r2,81136adc <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81136a40:	e0bff717 	ldw	r2,-36(fp)
81136a44:	10800037 	ldwio	r2,0(r2)
81136a48:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81136a4c:	e0bff417 	ldw	r2,-48(fp)
81136a50:	10a0000c 	andi	r2,r2,32768
81136a54:	10002326 	beq	r2,zero,81136ae4 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81136a58:	e0bff617 	ldw	r2,-40(fp)
81136a5c:	10800d17 	ldw	r2,52(r2)
81136a60:	e0fff417 	ldw	r3,-48(fp)
81136a64:	1809883a 	mov	r4,r3
81136a68:	e0fff617 	ldw	r3,-40(fp)
81136a6c:	1885883a 	add	r2,r3,r2
81136a70:	10801104 	addi	r2,r2,68
81136a74:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136a78:	e0bff617 	ldw	r2,-40(fp)
81136a7c:	10800d17 	ldw	r2,52(r2)
81136a80:	10800044 	addi	r2,r2,1
81136a84:	10c1ffcc 	andi	r3,r2,2047
81136a88:	e0bff617 	ldw	r2,-40(fp)
81136a8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81136a90:	e0bff617 	ldw	r2,-40(fp)
81136a94:	10800c17 	ldw	r2,48(r2)
81136a98:	e0bffb15 	stw	r2,-20(fp)
81136a9c:	00800044 	movi	r2,1
81136aa0:	e0bffc0d 	sth	r2,-16(fp)
81136aa4:	00800044 	movi	r2,1
81136aa8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136aac:	d0a07303 	ldbu	r2,-32308(gp)
81136ab0:	10803fcc 	andi	r2,r2,255
81136ab4:	103fd926 	beq	r2,zero,81136a1c <__reset+0xfb116a1c>
  {
    OSFlagPost (group, flags, opt, &err);
81136ab8:	e0bffc0b 	ldhu	r2,-16(fp)
81136abc:	e0fffc83 	ldbu	r3,-14(fp)
81136ac0:	e13ffdc4 	addi	r4,fp,-9
81136ac4:	200f883a 	mov	r7,r4
81136ac8:	180d883a 	mov	r6,r3
81136acc:	100b883a 	mov	r5,r2
81136ad0:	e13ffb17 	ldw	r4,-20(fp)
81136ad4:	112b6480 	call	8112b648 <OSFlagPost>
      }
81136ad8:	003fd006 	br	81136a1c <__reset+0xfb116a1c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81136adc:	0001883a 	nop
81136ae0:	00000106 	br	81136ae8 <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81136ae4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81136ae8:	e0bff417 	ldw	r2,-48(fp)
81136aec:	10bfffec 	andhi	r2,r2,65535
81136af0:	10000f26 	beq	r2,zero,81136b30 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81136af4:	e0bff617 	ldw	r2,-40(fp)
81136af8:	10c00817 	ldw	r3,32(r2)
81136afc:	00bfff84 	movi	r2,-2
81136b00:	1886703a 	and	r3,r3,r2
81136b04:	e0bff617 	ldw	r2,-40(fp)
81136b08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81136b0c:	e0bff717 	ldw	r2,-36(fp)
81136b10:	10800104 	addi	r2,r2,4
81136b14:	1007883a 	mov	r3,r2
81136b18:	e0bff617 	ldw	r2,-40(fp)
81136b1c:	10800817 	ldw	r2,32(r2)
81136b20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81136b24:	e0bff717 	ldw	r2,-36(fp)
81136b28:	10800104 	addi	r2,r2,4
81136b2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81136b30:	e0bff817 	ldw	r2,-32(fp)
81136b34:	1080800c 	andi	r2,r2,512
81136b38:	103fac26 	beq	r2,zero,811369ec <__reset+0xfb1169ec>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81136b3c:	e0bff817 	ldw	r2,-32(fp)
81136b40:	1004d43a 	srli	r2,r2,16
81136b44:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81136b48:	00002606 	br	81136be4 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81136b4c:	e0bff717 	ldw	r2,-36(fp)
81136b50:	e0fff617 	ldw	r3,-40(fp)
81136b54:	18c01017 	ldw	r3,64(r3)
81136b58:	e13ff617 	ldw	r4,-40(fp)
81136b5c:	20c7883a 	add	r3,r4,r3
81136b60:	18c21104 	addi	r3,r3,2116
81136b64:	18c00003 	ldbu	r3,0(r3)
81136b68:	18c03fcc 	andi	r3,r3,255
81136b6c:	18c0201c 	xori	r3,r3,128
81136b70:	18ffe004 	addi	r3,r3,-128
81136b74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136b78:	e0bff617 	ldw	r2,-40(fp)
81136b7c:	10801017 	ldw	r2,64(r2)
81136b80:	10800044 	addi	r2,r2,1
81136b84:	10c1ffcc 	andi	r3,r2,2047
81136b88:	e0bff617 	ldw	r2,-40(fp)
81136b8c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81136b90:	e0bff617 	ldw	r2,-40(fp)
81136b94:	10800c17 	ldw	r2,48(r2)
81136b98:	e0bffa15 	stw	r2,-24(fp)
81136b9c:	00800084 	movi	r2,2
81136ba0:	e0bffd0d 	sth	r2,-12(fp)
81136ba4:	00800044 	movi	r2,1
81136ba8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136bac:	d0a07303 	ldbu	r2,-32308(gp)
81136bb0:	10803fcc 	andi	r2,r2,255
81136bb4:	10000826 	beq	r2,zero,81136bd8 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
81136bb8:	e0bffd0b 	ldhu	r2,-12(fp)
81136bbc:	e0fffd83 	ldbu	r3,-10(fp)
81136bc0:	e13ffe04 	addi	r4,fp,-8
81136bc4:	200f883a 	mov	r7,r4
81136bc8:	180d883a 	mov	r6,r3
81136bcc:	100b883a 	mov	r5,r2
81136bd0:	e13ffa17 	ldw	r4,-24(fp)
81136bd4:	112b6480 	call	8112b648 <OSFlagPost>

        space--;
81136bd8:	e0bff517 	ldw	r2,-44(fp)
81136bdc:	10bfffc4 	addi	r2,r2,-1
81136be0:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81136be4:	e0bff517 	ldw	r2,-44(fp)
81136be8:	10000526 	beq	r2,zero,81136c00 <altera_avalon_jtag_uart_irq+0x244>
81136bec:	e0bff617 	ldw	r2,-40(fp)
81136bf0:	10c01017 	ldw	r3,64(r2)
81136bf4:	e0bff617 	ldw	r2,-40(fp)
81136bf8:	10800f17 	ldw	r2,60(r2)
81136bfc:	18bfd31e 	bne	r3,r2,81136b4c <__reset+0xfb116b4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81136c00:	e0bff517 	ldw	r2,-44(fp)
81136c04:	103f7926 	beq	r2,zero,811369ec <__reset+0xfb1169ec>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81136c08:	e0bff617 	ldw	r2,-40(fp)
81136c0c:	10c00817 	ldw	r3,32(r2)
81136c10:	00bfff44 	movi	r2,-3
81136c14:	1886703a 	and	r3,r3,r2
81136c18:	e0bff617 	ldw	r2,-40(fp)
81136c1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81136c20:	e0bff617 	ldw	r2,-40(fp)
81136c24:	10800017 	ldw	r2,0(r2)
81136c28:	10800104 	addi	r2,r2,4
81136c2c:	1007883a 	mov	r3,r2
81136c30:	e0bff617 	ldw	r2,-40(fp)
81136c34:	10800817 	ldw	r2,32(r2)
81136c38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81136c3c:	e0bff717 	ldw	r2,-36(fp)
81136c40:	10800104 	addi	r2,r2,4
81136c44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81136c48:	003f6806 	br	811369ec <__reset+0xfb1169ec>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81136c4c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81136c50:	0001883a 	nop
81136c54:	e037883a 	mov	sp,fp
81136c58:	dfc00117 	ldw	ra,4(sp)
81136c5c:	df000017 	ldw	fp,0(sp)
81136c60:	dec00204 	addi	sp,sp,8
81136c64:	f800283a 	ret

81136c68 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81136c68:	defff904 	addi	sp,sp,-28
81136c6c:	de00012e 	bgeu	sp,et,81136c74 <altera_avalon_jtag_uart_timeout+0xc>
81136c70:	003b68fa 	trap	3
81136c74:	dfc00615 	stw	ra,24(sp)
81136c78:	df000515 	stw	fp,20(sp)
81136c7c:	df000504 	addi	fp,sp,20
81136c80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81136c84:	e0bfff17 	ldw	r2,-4(fp)
81136c88:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81136c8c:	e0bffb17 	ldw	r2,-20(fp)
81136c90:	10800017 	ldw	r2,0(r2)
81136c94:	10800104 	addi	r2,r2,4
81136c98:	10800037 	ldwio	r2,0(r2)
81136c9c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81136ca0:	e0bffc17 	ldw	r2,-16(fp)
81136ca4:	1081000c 	andi	r2,r2,1024
81136ca8:	10000b26 	beq	r2,zero,81136cd8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81136cac:	e0bffb17 	ldw	r2,-20(fp)
81136cb0:	10800017 	ldw	r2,0(r2)
81136cb4:	10800104 	addi	r2,r2,4
81136cb8:	1007883a 	mov	r3,r2
81136cbc:	e0bffb17 	ldw	r2,-20(fp)
81136cc0:	10800817 	ldw	r2,32(r2)
81136cc4:	10810014 	ori	r2,r2,1024
81136cc8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81136ccc:	e0bffb17 	ldw	r2,-20(fp)
81136cd0:	10000915 	stw	zero,36(r2)
81136cd4:	00002106 	br	81136d5c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81136cd8:	e0bffb17 	ldw	r2,-20(fp)
81136cdc:	10c00917 	ldw	r3,36(r2)
81136ce0:	00a00034 	movhi	r2,32768
81136ce4:	10bfff04 	addi	r2,r2,-4
81136ce8:	10c01c36 	bltu	r2,r3,81136d5c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81136cec:	e0bffb17 	ldw	r2,-20(fp)
81136cf0:	10800917 	ldw	r2,36(r2)
81136cf4:	10c00044 	addi	r3,r2,1
81136cf8:	e0bffb17 	ldw	r2,-20(fp)
81136cfc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81136d00:	e0bffb17 	ldw	r2,-20(fp)
81136d04:	10c00917 	ldw	r3,36(r2)
81136d08:	e0bffb17 	ldw	r2,-20(fp)
81136d0c:	10800117 	ldw	r2,4(r2)
81136d10:	18801236 	bltu	r3,r2,81136d5c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81136d14:	e0bffb17 	ldw	r2,-20(fp)
81136d18:	10800c17 	ldw	r2,48(r2)
81136d1c:	e0bffd15 	stw	r2,-12(fp)
81136d20:	00800104 	movi	r2,4
81136d24:	e0bffe0d 	sth	r2,-8(fp)
81136d28:	00800044 	movi	r2,1
81136d2c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81136d30:	d0a07303 	ldbu	r2,-32308(gp)
81136d34:	10803fcc 	andi	r2,r2,255
81136d38:	10000826 	beq	r2,zero,81136d5c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81136d3c:	e0bffe0b 	ldhu	r2,-8(fp)
81136d40:	e0fffe83 	ldbu	r3,-6(fp)
81136d44:	e13ffec4 	addi	r4,fp,-5
81136d48:	200f883a 	mov	r7,r4
81136d4c:	180d883a 	mov	r6,r3
81136d50:	100b883a 	mov	r5,r2
81136d54:	e13ffd17 	ldw	r4,-12(fp)
81136d58:	112b6480 	call	8112b648 <OSFlagPost>
81136d5c:	d0a06a17 	ldw	r2,-32344(gp)
    }
  }

  return alt_ticks_per_second();
}
81136d60:	e037883a 	mov	sp,fp
81136d64:	dfc00117 	ldw	ra,4(sp)
81136d68:	df000017 	ldw	fp,0(sp)
81136d6c:	dec00204 	addi	sp,sp,8
81136d70:	f800283a 	ret

81136d74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81136d74:	defffd04 	addi	sp,sp,-12
81136d78:	de00012e 	bgeu	sp,et,81136d80 <altera_avalon_jtag_uart_close+0xc>
81136d7c:	003b68fa 	trap	3
81136d80:	df000215 	stw	fp,8(sp)
81136d84:	df000204 	addi	fp,sp,8
81136d88:	e13ffe15 	stw	r4,-8(fp)
81136d8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81136d90:	00000506 	br	81136da8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81136d94:	e0bfff17 	ldw	r2,-4(fp)
81136d98:	1090000c 	andi	r2,r2,16384
81136d9c:	10000226 	beq	r2,zero,81136da8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81136da0:	00bffd44 	movi	r2,-11
81136da4:	00000b06 	br	81136dd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81136da8:	e0bffe17 	ldw	r2,-8(fp)
81136dac:	10c01017 	ldw	r3,64(r2)
81136db0:	e0bffe17 	ldw	r2,-8(fp)
81136db4:	10800f17 	ldw	r2,60(r2)
81136db8:	18800526 	beq	r3,r2,81136dd0 <altera_avalon_jtag_uart_close+0x5c>
81136dbc:	e0bffe17 	ldw	r2,-8(fp)
81136dc0:	10c00917 	ldw	r3,36(r2)
81136dc4:	e0bffe17 	ldw	r2,-8(fp)
81136dc8:	10800117 	ldw	r2,4(r2)
81136dcc:	18bff136 	bltu	r3,r2,81136d94 <__reset+0xfb116d94>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81136dd0:	0005883a 	mov	r2,zero
}
81136dd4:	e037883a 	mov	sp,fp
81136dd8:	df000017 	ldw	fp,0(sp)
81136ddc:	dec00104 	addi	sp,sp,4
81136de0:	f800283a 	ret

81136de4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81136de4:	defffa04 	addi	sp,sp,-24
81136de8:	de00012e 	bgeu	sp,et,81136df0 <altera_avalon_jtag_uart_ioctl+0xc>
81136dec:	003b68fa 	trap	3
81136df0:	df000515 	stw	fp,20(sp)
81136df4:	df000504 	addi	fp,sp,20
81136df8:	e13ffd15 	stw	r4,-12(fp)
81136dfc:	e17ffe15 	stw	r5,-8(fp)
81136e00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81136e04:	00bff9c4 	movi	r2,-25
81136e08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81136e0c:	e0bffe17 	ldw	r2,-8(fp)
81136e10:	10da8060 	cmpeqi	r3,r2,27137
81136e14:	1800031e 	bne	r3,zero,81136e24 <altera_avalon_jtag_uart_ioctl+0x40>
81136e18:	109a80a0 	cmpeqi	r2,r2,27138
81136e1c:	1000181e 	bne	r2,zero,81136e80 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81136e20:	00002906 	br	81136ec8 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81136e24:	e0bffd17 	ldw	r2,-12(fp)
81136e28:	10c00117 	ldw	r3,4(r2)
81136e2c:	00a00034 	movhi	r2,32768
81136e30:	10bfffc4 	addi	r2,r2,-1
81136e34:	18802126 	beq	r3,r2,81136ebc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81136e38:	e0bfff17 	ldw	r2,-4(fp)
81136e3c:	10800017 	ldw	r2,0(r2)
81136e40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81136e44:	e0bffc17 	ldw	r2,-16(fp)
81136e48:	10800090 	cmplti	r2,r2,2
81136e4c:	1000061e 	bne	r2,zero,81136e68 <altera_avalon_jtag_uart_ioctl+0x84>
81136e50:	e0fffc17 	ldw	r3,-16(fp)
81136e54:	00a00034 	movhi	r2,32768
81136e58:	10bfffc4 	addi	r2,r2,-1
81136e5c:	18800226 	beq	r3,r2,81136e68 <altera_avalon_jtag_uart_ioctl+0x84>
81136e60:	e0bffc17 	ldw	r2,-16(fp)
81136e64:	00000206 	br	81136e70 <altera_avalon_jtag_uart_ioctl+0x8c>
81136e68:	00a00034 	movhi	r2,32768
81136e6c:	10bfff84 	addi	r2,r2,-2
81136e70:	e0fffd17 	ldw	r3,-12(fp)
81136e74:	18800115 	stw	r2,4(r3)
      rc = 0;
81136e78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81136e7c:	00000f06 	br	81136ebc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81136e80:	e0bffd17 	ldw	r2,-12(fp)
81136e84:	10c00117 	ldw	r3,4(r2)
81136e88:	00a00034 	movhi	r2,32768
81136e8c:	10bfffc4 	addi	r2,r2,-1
81136e90:	18800c26 	beq	r3,r2,81136ec4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81136e94:	e0bffd17 	ldw	r2,-12(fp)
81136e98:	10c00917 	ldw	r3,36(r2)
81136e9c:	e0bffd17 	ldw	r2,-12(fp)
81136ea0:	10800117 	ldw	r2,4(r2)
81136ea4:	1885803a 	cmpltu	r2,r3,r2
81136ea8:	10c03fcc 	andi	r3,r2,255
81136eac:	e0bfff17 	ldw	r2,-4(fp)
81136eb0:	10c00015 	stw	r3,0(r2)
      rc = 0;
81136eb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81136eb8:	00000206 	br	81136ec4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81136ebc:	0001883a 	nop
81136ec0:	00000106 	br	81136ec8 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81136ec4:	0001883a 	nop

  default:
    break;
  }

  return rc;
81136ec8:	e0bffb17 	ldw	r2,-20(fp)
}
81136ecc:	e037883a 	mov	sp,fp
81136ed0:	df000017 	ldw	fp,0(sp)
81136ed4:	dec00104 	addi	sp,sp,4
81136ed8:	f800283a 	ret

81136edc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81136edc:	deffed04 	addi	sp,sp,-76
81136ee0:	de00012e 	bgeu	sp,et,81136ee8 <altera_avalon_jtag_uart_read+0xc>
81136ee4:	003b68fa 	trap	3
81136ee8:	dfc01215 	stw	ra,72(sp)
81136eec:	df001115 	stw	fp,68(sp)
81136ef0:	df001104 	addi	fp,sp,68
81136ef4:	e13ffc15 	stw	r4,-16(fp)
81136ef8:	e17ffd15 	stw	r5,-12(fp)
81136efc:	e1bffe15 	stw	r6,-8(fp)
81136f00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81136f04:	e0bffd17 	ldw	r2,-12(fp)
81136f08:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81136f0c:	e0bffc17 	ldw	r2,-16(fp)
81136f10:	10800a17 	ldw	r2,40(r2)
81136f14:	e0bff815 	stw	r2,-32(fp)
81136f18:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81136f1c:	e0bff90b 	ldhu	r2,-28(fp)
81136f20:	e0fffb04 	addi	r3,fp,-20
81136f24:	180d883a 	mov	r6,r3
81136f28:	100b883a 	mov	r5,r2
81136f2c:	e13ff817 	ldw	r4,-32(fp)
81136f30:	112ecc00 	call	8112ecc0 <OSSemPend>

  while (space > 0)
81136f34:	00006106 	br	811370bc <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81136f38:	e0bffc17 	ldw	r2,-16(fp)
81136f3c:	10800d17 	ldw	r2,52(r2)
81136f40:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81136f44:	e0bffc17 	ldw	r2,-16(fp)
81136f48:	10800e17 	ldw	r2,56(r2)
81136f4c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81136f50:	e0fff317 	ldw	r3,-52(fp)
81136f54:	e0bff417 	ldw	r2,-48(fp)
81136f58:	18800536 	bltu	r3,r2,81136f70 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81136f5c:	e0fff317 	ldw	r3,-52(fp)
81136f60:	e0bff417 	ldw	r2,-48(fp)
81136f64:	1885c83a 	sub	r2,r3,r2
81136f68:	e0bff115 	stw	r2,-60(fp)
81136f6c:	00000406 	br	81136f80 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81136f70:	00c20004 	movi	r3,2048
81136f74:	e0bff417 	ldw	r2,-48(fp)
81136f78:	1885c83a 	sub	r2,r3,r2
81136f7c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81136f80:	e0bff117 	ldw	r2,-60(fp)
81136f84:	10001e26 	beq	r2,zero,81137000 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81136f88:	e0fffe17 	ldw	r3,-8(fp)
81136f8c:	e0bff117 	ldw	r2,-60(fp)
81136f90:	1880022e 	bgeu	r3,r2,81136f9c <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81136f94:	e0bffe17 	ldw	r2,-8(fp)
81136f98:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81136f9c:	e0bffc17 	ldw	r2,-16(fp)
81136fa0:	10c01104 	addi	r3,r2,68
81136fa4:	e0bff417 	ldw	r2,-48(fp)
81136fa8:	1885883a 	add	r2,r3,r2
81136fac:	e1bff117 	ldw	r6,-60(fp)
81136fb0:	100b883a 	mov	r5,r2
81136fb4:	e13ff017 	ldw	r4,-64(fp)
81136fb8:	111297c0 	call	8111297c <memcpy>
      ptr   += n;
81136fbc:	e0fff017 	ldw	r3,-64(fp)
81136fc0:	e0bff117 	ldw	r2,-60(fp)
81136fc4:	1885883a 	add	r2,r3,r2
81136fc8:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81136fcc:	e0fffe17 	ldw	r3,-8(fp)
81136fd0:	e0bff117 	ldw	r2,-60(fp)
81136fd4:	1885c83a 	sub	r2,r3,r2
81136fd8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81136fdc:	e0fff417 	ldw	r3,-48(fp)
81136fe0:	e0bff117 	ldw	r2,-60(fp)
81136fe4:	1885883a 	add	r2,r3,r2
81136fe8:	10c1ffcc 	andi	r3,r2,2047
81136fec:	e0bffc17 	ldw	r2,-16(fp)
81136ff0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81136ff4:	e0bffe17 	ldw	r2,-8(fp)
81136ff8:	00bfcf16 	blt	zero,r2,81136f38 <__reset+0xfb116f38>
81136ffc:	00000106 	br	81137004 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81137000:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81137004:	e0fff017 	ldw	r3,-64(fp)
81137008:	e0bffd17 	ldw	r2,-12(fp)
8113700c:	18802e1e 	bne	r3,r2,811370c8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81137010:	e0bfff17 	ldw	r2,-4(fp)
81137014:	1090000c 	andi	r2,r2,16384
81137018:	10002d1e 	bne	r2,zero,811370d0 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
8113701c:	d0a07303 	ldbu	r2,-32308(gp)
81137020:	10803fcc 	andi	r2,r2,255
81137024:	10800058 	cmpnei	r2,r2,1
81137028:	1000161e 	bne	r2,zero,81137084 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
8113702c:	e0bffc17 	ldw	r2,-16(fp)
81137030:	10800c17 	ldw	r2,48(r2)
81137034:	e0bff215 	stw	r2,-56(fp)
81137038:	00800144 	movi	r2,5
8113703c:	e0bff98d 	sth	r2,-26(fp)
81137040:	00bfe0c4 	movi	r2,-125
81137044:	e0bffa05 	stb	r2,-24(fp)
81137048:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113704c:	d0a07303 	ldbu	r2,-32308(gp)
81137050:	10803fcc 	andi	r2,r2,255
81137054:	10001526 	beq	r2,zero,811370ac <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81137058:	e0fff98b 	ldhu	r3,-26(fp)
8113705c:	e13ffa03 	ldbu	r4,-24(fp)
81137060:	e17ffa8b 	ldhu	r5,-22(fp)
81137064:	e0bffb44 	addi	r2,fp,-19
81137068:	d8800015 	stw	r2,0(sp)
8113706c:	280f883a 	mov	r7,r5
81137070:	200d883a 	mov	r6,r4
81137074:	180b883a 	mov	r5,r3
81137078:	e13ff217 	ldw	r4,-56(fp)
8113707c:	112b0200 	call	8112b020 <OSFlagPend>
81137080:	00000a06 	br	811370ac <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81137084:	0001883a 	nop
81137088:	e0bffc17 	ldw	r2,-16(fp)
8113708c:	10c00d17 	ldw	r3,52(r2)
81137090:	e0bff317 	ldw	r2,-52(fp)
81137094:	1880051e 	bne	r3,r2,811370ac <altera_avalon_jtag_uart_read+0x1d0>
81137098:	e0bffc17 	ldw	r2,-16(fp)
8113709c:	10c00917 	ldw	r3,36(r2)
811370a0:	e0bffc17 	ldw	r2,-16(fp)
811370a4:	10800117 	ldw	r2,4(r2)
811370a8:	18bff736 	bltu	r3,r2,81137088 <__reset+0xfb117088>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
811370ac:	e0bffc17 	ldw	r2,-16(fp)
811370b0:	10c00d17 	ldw	r3,52(r2)
811370b4:	e0bff317 	ldw	r2,-52(fp)
811370b8:	18800726 	beq	r3,r2,811370d8 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
811370bc:	e0bffe17 	ldw	r2,-8(fp)
811370c0:	00bf9d16 	blt	zero,r2,81136f38 <__reset+0xfb116f38>
811370c4:	00000506 	br	811370dc <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
811370c8:	0001883a 	nop
811370cc:	00000306 	br	811370dc <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
811370d0:	0001883a 	nop
811370d4:	00000106 	br	811370dc <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
811370d8:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
811370dc:	e0bffc17 	ldw	r2,-16(fp)
811370e0:	10800a17 	ldw	r2,40(r2)
811370e4:	1009883a 	mov	r4,r2
811370e8:	112f0480 	call	8112f048 <OSSemPost>

  if (ptr != buffer)
811370ec:	e0fff017 	ldw	r3,-64(fp)
811370f0:	e0bffd17 	ldw	r2,-12(fp)
811370f4:	18801826 	beq	r3,r2,81137158 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811370f8:	0005303a 	rdctl	r2,status
811370fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137100:	e0fff717 	ldw	r3,-36(fp)
81137104:	00bfff84 	movi	r2,-2
81137108:	1884703a 	and	r2,r3,r2
8113710c:	1001703a 	wrctl	status,r2
  
  return context;
81137110:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81137114:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81137118:	e0bffc17 	ldw	r2,-16(fp)
8113711c:	10800817 	ldw	r2,32(r2)
81137120:	10c00054 	ori	r3,r2,1
81137124:	e0bffc17 	ldw	r2,-16(fp)
81137128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8113712c:	e0bffc17 	ldw	r2,-16(fp)
81137130:	10800017 	ldw	r2,0(r2)
81137134:	10800104 	addi	r2,r2,4
81137138:	1007883a 	mov	r3,r2
8113713c:	e0bffc17 	ldw	r2,-16(fp)
81137140:	10800817 	ldw	r2,32(r2)
81137144:	18800035 	stwio	r2,0(r3)
81137148:	e0bff617 	ldw	r2,-40(fp)
8113714c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137150:	e0bff517 	ldw	r2,-44(fp)
81137154:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81137158:	e0fff017 	ldw	r3,-64(fp)
8113715c:	e0bffd17 	ldw	r2,-12(fp)
81137160:	18800426 	beq	r3,r2,81137174 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
81137164:	e0fff017 	ldw	r3,-64(fp)
81137168:	e0bffd17 	ldw	r2,-12(fp)
8113716c:	1885c83a 	sub	r2,r3,r2
81137170:	00000606 	br	8113718c <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
81137174:	e0bfff17 	ldw	r2,-4(fp)
81137178:	1090000c 	andi	r2,r2,16384
8113717c:	10000226 	beq	r2,zero,81137188 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81137180:	00bffd44 	movi	r2,-11
81137184:	00000106 	br	8113718c <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81137188:	00bffec4 	movi	r2,-5
}
8113718c:	e037883a 	mov	sp,fp
81137190:	dfc00117 	ldw	ra,4(sp)
81137194:	df000017 	ldw	fp,0(sp)
81137198:	dec00204 	addi	sp,sp,8
8113719c:	f800283a 	ret

811371a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
811371a0:	deffed04 	addi	sp,sp,-76
811371a4:	de00012e 	bgeu	sp,et,811371ac <altera_avalon_jtag_uart_write+0xc>
811371a8:	003b68fa 	trap	3
811371ac:	dfc01215 	stw	ra,72(sp)
811371b0:	df001115 	stw	fp,68(sp)
811371b4:	df001104 	addi	fp,sp,68
811371b8:	e13ffc15 	stw	r4,-16(fp)
811371bc:	e17ffd15 	stw	r5,-12(fp)
811371c0:	e1bffe15 	stw	r6,-8(fp)
811371c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
811371c8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
811371cc:	e0bffd17 	ldw	r2,-12(fp)
811371d0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
811371d4:	e0bffc17 	ldw	r2,-16(fp)
811371d8:	10800b17 	ldw	r2,44(r2)
811371dc:	e0bff815 	stw	r2,-32(fp)
811371e0:	e03ff90d 	sth	zero,-28(fp)
811371e4:	e0bff90b 	ldhu	r2,-28(fp)
811371e8:	e0fffb44 	addi	r3,fp,-19
811371ec:	180d883a 	mov	r6,r3
811371f0:	100b883a 	mov	r5,r2
811371f4:	e13ff817 	ldw	r4,-32(fp)
811371f8:	112ecc00 	call	8112ecc0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811371fc:	00003706 	br	811372dc <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81137200:	e0bffc17 	ldw	r2,-16(fp)
81137204:	10800f17 	ldw	r2,60(r2)
81137208:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
8113720c:	e0bffc17 	ldw	r2,-16(fp)
81137210:	10801017 	ldw	r2,64(r2)
81137214:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
81137218:	e0fff417 	ldw	r3,-48(fp)
8113721c:	e0bff017 	ldw	r2,-64(fp)
81137220:	1880062e 	bgeu	r3,r2,8113723c <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81137224:	e0fff017 	ldw	r3,-64(fp)
81137228:	e0bff417 	ldw	r2,-48(fp)
8113722c:	1885c83a 	sub	r2,r3,r2
81137230:	10bfffc4 	addi	r2,r2,-1
81137234:	e0bff115 	stw	r2,-60(fp)
81137238:	00000b06 	br	81137268 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
8113723c:	e0bff017 	ldw	r2,-64(fp)
81137240:	10000526 	beq	r2,zero,81137258 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81137244:	00c20004 	movi	r3,2048
81137248:	e0bff417 	ldw	r2,-48(fp)
8113724c:	1885c83a 	sub	r2,r3,r2
81137250:	e0bff115 	stw	r2,-60(fp)
81137254:	00000406 	br	81137268 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81137258:	00c1ffc4 	movi	r3,2047
8113725c:	e0bff417 	ldw	r2,-48(fp)
81137260:	1885c83a 	sub	r2,r3,r2
81137264:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81137268:	e0bff117 	ldw	r2,-60(fp)
8113726c:	10001e26 	beq	r2,zero,811372e8 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
81137270:	e0fffe17 	ldw	r3,-8(fp)
81137274:	e0bff117 	ldw	r2,-60(fp)
81137278:	1880022e 	bgeu	r3,r2,81137284 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
8113727c:	e0bffe17 	ldw	r2,-8(fp)
81137280:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81137284:	e0bffc17 	ldw	r2,-16(fp)
81137288:	10c21104 	addi	r3,r2,2116
8113728c:	e0bff417 	ldw	r2,-48(fp)
81137290:	1885883a 	add	r2,r3,r2
81137294:	e1bff117 	ldw	r6,-60(fp)
81137298:	e17ffd17 	ldw	r5,-12(fp)
8113729c:	1009883a 	mov	r4,r2
811372a0:	111297c0 	call	8111297c <memcpy>
      ptr   += n;
811372a4:	e0fffd17 	ldw	r3,-12(fp)
811372a8:	e0bff117 	ldw	r2,-60(fp)
811372ac:	1885883a 	add	r2,r3,r2
811372b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
811372b4:	e0fffe17 	ldw	r3,-8(fp)
811372b8:	e0bff117 	ldw	r2,-60(fp)
811372bc:	1885c83a 	sub	r2,r3,r2
811372c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811372c4:	e0fff417 	ldw	r3,-48(fp)
811372c8:	e0bff117 	ldw	r2,-60(fp)
811372cc:	1885883a 	add	r2,r3,r2
811372d0:	10c1ffcc 	andi	r3,r2,2047
811372d4:	e0bffc17 	ldw	r2,-16(fp)
811372d8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811372dc:	e0bffe17 	ldw	r2,-8(fp)
811372e0:	00bfc716 	blt	zero,r2,81137200 <__reset+0xfb117200>
811372e4:	00000106 	br	811372ec <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
811372e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811372ec:	0005303a 	rdctl	r2,status
811372f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811372f4:	e0fff717 	ldw	r3,-36(fp)
811372f8:	00bfff84 	movi	r2,-2
811372fc:	1884703a 	and	r2,r3,r2
81137300:	1001703a 	wrctl	status,r2
  
  return context;
81137304:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81137308:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8113730c:	e0bffc17 	ldw	r2,-16(fp)
81137310:	10800817 	ldw	r2,32(r2)
81137314:	10c00094 	ori	r3,r2,2
81137318:	e0bffc17 	ldw	r2,-16(fp)
8113731c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81137320:	e0bffc17 	ldw	r2,-16(fp)
81137324:	10800017 	ldw	r2,0(r2)
81137328:	10800104 	addi	r2,r2,4
8113732c:	1007883a 	mov	r3,r2
81137330:	e0bffc17 	ldw	r2,-16(fp)
81137334:	10800817 	ldw	r2,32(r2)
81137338:	18800035 	stwio	r2,0(r3)
8113733c:	e0bff617 	ldw	r2,-40(fp)
81137340:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137344:	e0bff317 	ldw	r2,-52(fp)
81137348:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8113734c:	e0bffe17 	ldw	r2,-8(fp)
81137350:	00802a0e 	bge	zero,r2,811373fc <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81137354:	e0bfff17 	ldw	r2,-4(fp)
81137358:	1090000c 	andi	r2,r2,16384
8113735c:	10002a1e 	bne	r2,zero,81137408 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
81137360:	d0a07303 	ldbu	r2,-32308(gp)
81137364:	10803fcc 	andi	r2,r2,255
81137368:	10800058 	cmpnei	r2,r2,1
8113736c:	1000161e 	bne	r2,zero,811373c8 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
81137370:	e0bffc17 	ldw	r2,-16(fp)
81137374:	10800c17 	ldw	r2,48(r2)
81137378:	e0bff515 	stw	r2,-44(fp)
8113737c:	00800184 	movi	r2,6
81137380:	e0bff98d 	sth	r2,-26(fp)
81137384:	00bfe0c4 	movi	r2,-125
81137388:	e0bffa05 	stb	r2,-24(fp)
8113738c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81137390:	d0a07303 	ldbu	r2,-32308(gp)
81137394:	10803fcc 	andi	r2,r2,255
81137398:	10001526 	beq	r2,zero,811373f0 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113739c:	e0fff98b 	ldhu	r3,-26(fp)
811373a0:	e13ffa03 	ldbu	r4,-24(fp)
811373a4:	e17ffa8b 	ldhu	r5,-22(fp)
811373a8:	e0bffb04 	addi	r2,fp,-20
811373ac:	d8800015 	stw	r2,0(sp)
811373b0:	280f883a 	mov	r7,r5
811373b4:	200d883a 	mov	r6,r4
811373b8:	180b883a 	mov	r5,r3
811373bc:	e13ff517 	ldw	r4,-44(fp)
811373c0:	112b0200 	call	8112b020 <OSFlagPend>
811373c4:	00000a06 	br	811373f0 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
811373c8:	0001883a 	nop
811373cc:	e0bffc17 	ldw	r2,-16(fp)
811373d0:	10c01017 	ldw	r3,64(r2)
811373d4:	e0bff017 	ldw	r2,-64(fp)
811373d8:	1880051e 	bne	r3,r2,811373f0 <altera_avalon_jtag_uart_write+0x250>
811373dc:	e0bffc17 	ldw	r2,-16(fp)
811373e0:	10c00917 	ldw	r3,36(r2)
811373e4:	e0bffc17 	ldw	r2,-16(fp)
811373e8:	10800117 	ldw	r2,4(r2)
811373ec:	18bff736 	bltu	r3,r2,811373cc <__reset+0xfb1173cc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
811373f0:	e0bffc17 	ldw	r2,-16(fp)
811373f4:	10800917 	ldw	r2,36(r2)
811373f8:	1000051e 	bne	r2,zero,81137410 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
811373fc:	e0bffe17 	ldw	r2,-8(fp)
81137400:	00bfb616 	blt	zero,r2,811372dc <__reset+0xfb1172dc>
81137404:	00000306 	br	81137414 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81137408:	0001883a 	nop
8113740c:	00000106 	br	81137414 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81137410:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81137414:	e0bffc17 	ldw	r2,-16(fp)
81137418:	10800b17 	ldw	r2,44(r2)
8113741c:	1009883a 	mov	r4,r2
81137420:	112f0480 	call	8112f048 <OSSemPost>

  if (ptr != start)
81137424:	e0fffd17 	ldw	r3,-12(fp)
81137428:	e0bff217 	ldw	r2,-56(fp)
8113742c:	18800426 	beq	r3,r2,81137440 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81137430:	e0fffd17 	ldw	r3,-12(fp)
81137434:	e0bff217 	ldw	r2,-56(fp)
81137438:	1885c83a 	sub	r2,r3,r2
8113743c:	00000606 	br	81137458 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81137440:	e0bfff17 	ldw	r2,-4(fp)
81137444:	1090000c 	andi	r2,r2,16384
81137448:	10000226 	beq	r2,zero,81137454 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
8113744c:	00bffd44 	movi	r2,-11
81137450:	00000106 	br	81137458 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81137454:	00bffec4 	movi	r2,-5
}
81137458:	e037883a 	mov	sp,fp
8113745c:	dfc00117 	ldw	ra,4(sp)
81137460:	df000017 	ldw	fp,0(sp)
81137464:	dec00204 	addi	sp,sp,8
81137468:	f800283a 	ret

8113746c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8113746c:	defffa04 	addi	sp,sp,-24
81137470:	de00012e 	bgeu	sp,et,81137478 <alt_avalon_timer_sc_irq+0xc>
81137474:	003b68fa 	trap	3
81137478:	dfc00515 	stw	ra,20(sp)
8113747c:	df000415 	stw	fp,16(sp)
81137480:	df000404 	addi	fp,sp,16
81137484:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81137488:	0007883a 	mov	r3,zero
8113748c:	e0bfff17 	ldw	r2,-4(fp)
81137490:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81137494:	e0bfff17 	ldw	r2,-4(fp)
81137498:	10800104 	addi	r2,r2,4
8113749c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811374a0:	0005303a 	rdctl	r2,status
811374a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811374a8:	e0fffd17 	ldw	r3,-12(fp)
811374ac:	00bfff84 	movi	r2,-2
811374b0:	1884703a 	and	r2,r3,r2
811374b4:	1001703a 	wrctl	status,r2
  
  return context;
811374b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
811374bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
811374c0:	1127d340 	call	81127d34 <alt_tick>
811374c4:	e0bffc17 	ldw	r2,-16(fp)
811374c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811374cc:	e0bffe17 	ldw	r2,-8(fp)
811374d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
811374d4:	0001883a 	nop
811374d8:	e037883a 	mov	sp,fp
811374dc:	dfc00117 	ldw	ra,4(sp)
811374e0:	df000017 	ldw	fp,0(sp)
811374e4:	dec00204 	addi	sp,sp,8
811374e8:	f800283a 	ret

811374ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
811374ec:	defff804 	addi	sp,sp,-32
811374f0:	de00012e 	bgeu	sp,et,811374f8 <alt_avalon_timer_sc_init+0xc>
811374f4:	003b68fa 	trap	3
811374f8:	dfc00715 	stw	ra,28(sp)
811374fc:	df000615 	stw	fp,24(sp)
81137500:	df000604 	addi	fp,sp,24
81137504:	e13ffc15 	stw	r4,-16(fp)
81137508:	e17ffd15 	stw	r5,-12(fp)
8113750c:	e1bffe15 	stw	r6,-8(fp)
81137510:	e1ffff15 	stw	r7,-4(fp)
81137514:	e0bfff17 	ldw	r2,-4(fp)
81137518:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8113751c:	d0a06a17 	ldw	r2,-32344(gp)
81137520:	1000021e 	bne	r2,zero,8113752c <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
81137524:	e0bffb17 	ldw	r2,-20(fp)
81137528:	d0a06a15 	stw	r2,-32344(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8113752c:	e0bffc17 	ldw	r2,-16(fp)
81137530:	10800104 	addi	r2,r2,4
81137534:	00c001c4 	movi	r3,7
81137538:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8113753c:	d8000015 	stw	zero,0(sp)
81137540:	e1fffc17 	ldw	r7,-16(fp)
81137544:	01a044f4 	movhi	r6,33043
81137548:	319d1b04 	addi	r6,r6,29804
8113754c:	e17ffe17 	ldw	r5,-8(fp)
81137550:	e13ffd17 	ldw	r4,-12(fp)
81137554:	113a7c00 	call	8113a7c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81137558:	0001883a 	nop
8113755c:	e037883a 	mov	sp,fp
81137560:	dfc00117 	ldw	ra,4(sp)
81137564:	df000017 	ldw	fp,0(sp)
81137568:	dec00204 	addi	sp,sp,8
8113756c:	f800283a 	ret

81137570 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81137570:	defffa04 	addi	sp,sp,-24
81137574:	de00012e 	bgeu	sp,et,8113757c <altera_avalon_uart_read_fd+0xc>
81137578:	003b68fa 	trap	3
8113757c:	dfc00515 	stw	ra,20(sp)
81137580:	df000415 	stw	fp,16(sp)
81137584:	df000404 	addi	fp,sp,16
81137588:	e13ffd15 	stw	r4,-12(fp)
8113758c:	e17ffe15 	stw	r5,-8(fp)
81137590:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81137594:	e0bffd17 	ldw	r2,-12(fp)
81137598:	10800017 	ldw	r2,0(r2)
8113759c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
811375a0:	e0bffc17 	ldw	r2,-16(fp)
811375a4:	10c00a04 	addi	r3,r2,40
811375a8:	e0bffd17 	ldw	r2,-12(fp)
811375ac:	10800217 	ldw	r2,8(r2)
811375b0:	100f883a 	mov	r7,r2
811375b4:	e1bfff17 	ldw	r6,-4(fp)
811375b8:	e17ffe17 	ldw	r5,-8(fp)
811375bc:	1809883a 	mov	r4,r3
811375c0:	1137c300 	call	81137c30 <altera_avalon_uart_read>
      fd->fd_flags);
}
811375c4:	e037883a 	mov	sp,fp
811375c8:	dfc00117 	ldw	ra,4(sp)
811375cc:	df000017 	ldw	fp,0(sp)
811375d0:	dec00204 	addi	sp,sp,8
811375d4:	f800283a 	ret

811375d8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
811375d8:	defffa04 	addi	sp,sp,-24
811375dc:	de00012e 	bgeu	sp,et,811375e4 <altera_avalon_uart_write_fd+0xc>
811375e0:	003b68fa 	trap	3
811375e4:	dfc00515 	stw	ra,20(sp)
811375e8:	df000415 	stw	fp,16(sp)
811375ec:	df000404 	addi	fp,sp,16
811375f0:	e13ffd15 	stw	r4,-12(fp)
811375f4:	e17ffe15 	stw	r5,-8(fp)
811375f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811375fc:	e0bffd17 	ldw	r2,-12(fp)
81137600:	10800017 	ldw	r2,0(r2)
81137604:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81137608:	e0bffc17 	ldw	r2,-16(fp)
8113760c:	10c00a04 	addi	r3,r2,40
81137610:	e0bffd17 	ldw	r2,-12(fp)
81137614:	10800217 	ldw	r2,8(r2)
81137618:	100f883a 	mov	r7,r2
8113761c:	e1bfff17 	ldw	r6,-4(fp)
81137620:	e17ffe17 	ldw	r5,-8(fp)
81137624:	1809883a 	mov	r4,r3
81137628:	1137ee40 	call	81137ee4 <altera_avalon_uart_write>
      fd->fd_flags);
}
8113762c:	e037883a 	mov	sp,fp
81137630:	dfc00117 	ldw	ra,4(sp)
81137634:	df000017 	ldw	fp,0(sp)
81137638:	dec00204 	addi	sp,sp,8
8113763c:	f800283a 	ret

81137640 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81137640:	defffc04 	addi	sp,sp,-16
81137644:	de00012e 	bgeu	sp,et,8113764c <altera_avalon_uart_close_fd+0xc>
81137648:	003b68fa 	trap	3
8113764c:	dfc00315 	stw	ra,12(sp)
81137650:	df000215 	stw	fp,8(sp)
81137654:	df000204 	addi	fp,sp,8
81137658:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113765c:	e0bfff17 	ldw	r2,-4(fp)
81137660:	10800017 	ldw	r2,0(r2)
81137664:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81137668:	e0bffe17 	ldw	r2,-8(fp)
8113766c:	10c00a04 	addi	r3,r2,40
81137670:	e0bfff17 	ldw	r2,-4(fp)
81137674:	10800217 	ldw	r2,8(r2)
81137678:	100b883a 	mov	r5,r2
8113767c:	1809883a 	mov	r4,r3
81137680:	1137b900 	call	81137b90 <altera_avalon_uart_close>
}
81137684:	e037883a 	mov	sp,fp
81137688:	dfc00117 	ldw	ra,4(sp)
8113768c:	df000017 	ldw	fp,0(sp)
81137690:	dec00204 	addi	sp,sp,8
81137694:	f800283a 	ret

81137698 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81137698:	defff304 	addi	sp,sp,-52
8113769c:	de00012e 	bgeu	sp,et,811376a4 <altera_avalon_uart_init+0xc>
811376a0:	003b68fa 	trap	3
811376a4:	dfc00c15 	stw	ra,48(sp)
811376a8:	df000b15 	stw	fp,44(sp)
811376ac:	df000b04 	addi	fp,sp,44
811376b0:	e13ffd15 	stw	r4,-12(fp)
811376b4:	e17ffe15 	stw	r5,-8(fp)
811376b8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
811376bc:	e0bffd17 	ldw	r2,-12(fp)
811376c0:	10800017 	ldw	r2,0(r2)
811376c4:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811376c8:	e0bffd17 	ldw	r2,-12(fp)
811376cc:	10800704 	addi	r2,r2,28
811376d0:	e0bffa15 	stw	r2,-24(fp)
811376d4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811376d8:	e0bffb0b 	ldhu	r2,-20(fp)
811376dc:	e0fffc84 	addi	r3,fp,-14
811376e0:	180b883a 	mov	r5,r3
811376e4:	1009883a 	mov	r4,r2
811376e8:	112aa3c0 	call	8112aa3c <OSFlagCreate>
811376ec:	1007883a 	mov	r3,r2
811376f0:	e0bffa17 	ldw	r2,-24(fp)
811376f4:	10c00015 	stw	r3,0(r2)
  return err;
811376f8:	e0bffc83 	ldbu	r2,-14(fp)
811376fc:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81137700:	1000241e 	bne	r2,zero,81137794 <altera_avalon_uart_init+0xfc>
81137704:	e0bffd17 	ldw	r2,-12(fp)
81137708:	10800804 	addi	r2,r2,32
8113770c:	e0bff715 	stw	r2,-36(fp)
81137710:	00800044 	movi	r2,1
81137714:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81137718:	e0bffb8b 	ldhu	r2,-18(fp)
8113771c:	1009883a 	mov	r4,r2
81137720:	112e9980 	call	8112e998 <OSSemCreate>
81137724:	1007883a 	mov	r3,r2
81137728:	e0bff717 	ldw	r2,-36(fp)
8113772c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81137730:	e0bff717 	ldw	r2,-36(fp)
81137734:	10800017 	ldw	r2,0(r2)
81137738:	10000226 	beq	r2,zero,81137744 <altera_avalon_uart_init+0xac>
8113773c:	0005883a 	mov	r2,zero
81137740:	00000106 	br	81137748 <altera_avalon_uart_init+0xb0>
81137744:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81137748:	1000121e 	bne	r2,zero,81137794 <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
8113774c:	e0bffd17 	ldw	r2,-12(fp)
81137750:	10800904 	addi	r2,r2,36
81137754:	e0bff815 	stw	r2,-32(fp)
81137758:	00800044 	movi	r2,1
8113775c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81137760:	e0bffc0b 	ldhu	r2,-16(fp)
81137764:	1009883a 	mov	r4,r2
81137768:	112e9980 	call	8112e998 <OSSemCreate>
8113776c:	1007883a 	mov	r3,r2
81137770:	e0bff817 	ldw	r2,-32(fp)
81137774:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81137778:	e0bff817 	ldw	r2,-32(fp)
8113777c:	10800017 	ldw	r2,0(r2)
81137780:	10000226 	beq	r2,zero,8113778c <altera_avalon_uart_init+0xf4>
81137784:	0005883a 	mov	r2,zero
81137788:	00000106 	br	81137790 <altera_avalon_uart_init+0xf8>
8113778c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81137790:	10000226 	beq	r2,zero,8113779c <altera_avalon_uart_init+0x104>
81137794:	00800044 	movi	r2,1
81137798:	00000106 	br	811377a0 <altera_avalon_uart_init+0x108>
8113779c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811377a0:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
811377a4:	e0bff917 	ldw	r2,-28(fp)
811377a8:	10000f1e 	bne	r2,zero,811377e8 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
811377ac:	e0bffd17 	ldw	r2,-12(fp)
811377b0:	00c32004 	movi	r3,3200
811377b4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
811377b8:	e0bff617 	ldw	r2,-40(fp)
811377bc:	10800304 	addi	r2,r2,12
811377c0:	e0fffd17 	ldw	r3,-12(fp)
811377c4:	18c00117 	ldw	r3,4(r3)
811377c8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
811377cc:	d8000015 	stw	zero,0(sp)
811377d0:	e1fffd17 	ldw	r7,-12(fp)
811377d4:	01a044f4 	movhi	r6,33043
811377d8:	319e0004 	addi	r6,r6,30720
811377dc:	e17fff17 	ldw	r5,-4(fp)
811377e0:	e13ffe17 	ldw	r4,-8(fp)
811377e4:	113a7c00 	call	8113a7c0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
811377e8:	0001883a 	nop
811377ec:	e037883a 	mov	sp,fp
811377f0:	dfc00117 	ldw	ra,4(sp)
811377f4:	df000017 	ldw	fp,0(sp)
811377f8:	dec00204 	addi	sp,sp,8
811377fc:	f800283a 	ret

81137800 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81137800:	defffa04 	addi	sp,sp,-24
81137804:	de00012e 	bgeu	sp,et,8113780c <altera_avalon_uart_irq+0xc>
81137808:	003b68fa 	trap	3
8113780c:	dfc00515 	stw	ra,20(sp)
81137810:	df000415 	stw	fp,16(sp)
81137814:	df000404 	addi	fp,sp,16
81137818:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8113781c:	e0bfff17 	ldw	r2,-4(fp)
81137820:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81137824:	e0bffc17 	ldw	r2,-16(fp)
81137828:	10800017 	ldw	r2,0(r2)
8113782c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81137830:	e0bffd17 	ldw	r2,-12(fp)
81137834:	10800204 	addi	r2,r2,8
81137838:	10800037 	ldwio	r2,0(r2)
8113783c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81137840:	e0bffd17 	ldw	r2,-12(fp)
81137844:	10800204 	addi	r2,r2,8
81137848:	0007883a 	mov	r3,zero
8113784c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81137850:	e0bffd17 	ldw	r2,-12(fp)
81137854:	10800204 	addi	r2,r2,8
81137858:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8113785c:	e0bffe17 	ldw	r2,-8(fp)
81137860:	1080200c 	andi	r2,r2,128
81137864:	10000326 	beq	r2,zero,81137874 <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
81137868:	e17ffe17 	ldw	r5,-8(fp)
8113786c:	e13ffc17 	ldw	r4,-16(fp)
81137870:	11378a40 	call	811378a4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81137874:	e0bffe17 	ldw	r2,-8(fp)
81137878:	1081100c 	andi	r2,r2,1088
8113787c:	10000326 	beq	r2,zero,8113788c <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81137880:	e17ffe17 	ldw	r5,-8(fp)
81137884:	e13ffc17 	ldw	r4,-16(fp)
81137888:	11379e40 	call	811379e4 <altera_avalon_uart_txirq>
  }
  

}
8113788c:	0001883a 	nop
81137890:	e037883a 	mov	sp,fp
81137894:	dfc00117 	ldw	ra,4(sp)
81137898:	df000017 	ldw	fp,0(sp)
8113789c:	dec00204 	addi	sp,sp,8
811378a0:	f800283a 	ret

811378a4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811378a4:	defff904 	addi	sp,sp,-28
811378a8:	de00012e 	bgeu	sp,et,811378b0 <altera_avalon_uart_rxirq+0xc>
811378ac:	003b68fa 	trap	3
811378b0:	dfc00615 	stw	ra,24(sp)
811378b4:	df000515 	stw	fp,20(sp)
811378b8:	df000504 	addi	fp,sp,20
811378bc:	e13ffe15 	stw	r4,-8(fp)
811378c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
811378c4:	e0bfff17 	ldw	r2,-4(fp)
811378c8:	108000cc 	andi	r2,r2,3
811378cc:	10003f1e 	bne	r2,zero,811379cc <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
811378d0:	e0bffe17 	ldw	r2,-8(fp)
811378d4:	10c00317 	ldw	r3,12(r2)
811378d8:	e0bffe17 	ldw	r2,-8(fp)
811378dc:	10800217 	ldw	r2,8(r2)
811378e0:	1880121e 	bne	r3,r2,8113792c <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
811378e4:	e0bffe17 	ldw	r2,-8(fp)
811378e8:	10800717 	ldw	r2,28(r2)
811378ec:	e0bffc15 	stw	r2,-16(fp)
811378f0:	00800044 	movi	r2,1
811378f4:	e0bffd0d 	sth	r2,-12(fp)
811378f8:	00800044 	movi	r2,1
811378fc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137900:	d0a07303 	ldbu	r2,-32308(gp)
81137904:	10803fcc 	andi	r2,r2,255
81137908:	10000826 	beq	r2,zero,8113792c <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
8113790c:	e0bffd0b 	ldhu	r2,-12(fp)
81137910:	e0fffd83 	ldbu	r3,-10(fp)
81137914:	e13ffdc4 	addi	r4,fp,-9
81137918:	200f883a 	mov	r7,r4
8113791c:	180d883a 	mov	r6,r3
81137920:	100b883a 	mov	r5,r2
81137924:	e13ffc17 	ldw	r4,-16(fp)
81137928:	112b6480 	call	8112b648 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113792c:	e0bffe17 	ldw	r2,-8(fp)
81137930:	10800317 	ldw	r2,12(r2)
81137934:	10800044 	addi	r2,r2,1
81137938:	10800fcc 	andi	r2,r2,63
8113793c:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81137940:	e0bffe17 	ldw	r2,-8(fp)
81137944:	10800317 	ldw	r2,12(r2)
81137948:	e0fffe17 	ldw	r3,-8(fp)
8113794c:	18c00017 	ldw	r3,0(r3)
81137950:	18c00037 	ldwio	r3,0(r3)
81137954:	1809883a 	mov	r4,r3
81137958:	e0fffe17 	ldw	r3,-8(fp)
8113795c:	1885883a 	add	r2,r3,r2
81137960:	10800a04 	addi	r2,r2,40
81137964:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81137968:	e0bffe17 	ldw	r2,-8(fp)
8113796c:	e0fffb17 	ldw	r3,-20(fp)
81137970:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81137974:	e0bffe17 	ldw	r2,-8(fp)
81137978:	10800317 	ldw	r2,12(r2)
8113797c:	10800044 	addi	r2,r2,1
81137980:	10800fcc 	andi	r2,r2,63
81137984:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81137988:	e0bffe17 	ldw	r2,-8(fp)
8113798c:	10c00217 	ldw	r3,8(r2)
81137990:	e0bffb17 	ldw	r2,-20(fp)
81137994:	18800e1e 	bne	r3,r2,811379d0 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137998:	e0bffe17 	ldw	r2,-8(fp)
8113799c:	10c00117 	ldw	r3,4(r2)
811379a0:	00bfdfc4 	movi	r2,-129
811379a4:	1886703a 	and	r3,r3,r2
811379a8:	e0bffe17 	ldw	r2,-8(fp)
811379ac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
811379b0:	e0bffe17 	ldw	r2,-8(fp)
811379b4:	10800017 	ldw	r2,0(r2)
811379b8:	10800304 	addi	r2,r2,12
811379bc:	e0fffe17 	ldw	r3,-8(fp)
811379c0:	18c00117 	ldw	r3,4(r3)
811379c4:	10c00035 	stwio	r3,0(r2)
811379c8:	00000106 	br	811379d0 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
811379cc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
811379d0:	e037883a 	mov	sp,fp
811379d4:	dfc00117 	ldw	ra,4(sp)
811379d8:	df000017 	ldw	fp,0(sp)
811379dc:	dec00204 	addi	sp,sp,8
811379e0:	f800283a 	ret

811379e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811379e4:	defffa04 	addi	sp,sp,-24
811379e8:	de00012e 	bgeu	sp,et,811379f0 <altera_avalon_uart_txirq+0xc>
811379ec:	003b68fa 	trap	3
811379f0:	dfc00515 	stw	ra,20(sp)
811379f4:	df000415 	stw	fp,16(sp)
811379f8:	df000404 	addi	fp,sp,16
811379fc:	e13ffe15 	stw	r4,-8(fp)
81137a00:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81137a04:	e0bffe17 	ldw	r2,-8(fp)
81137a08:	10c00417 	ldw	r3,16(r2)
81137a0c:	e0bffe17 	ldw	r2,-8(fp)
81137a10:	10800517 	ldw	r2,20(r2)
81137a14:	18804726 	beq	r3,r2,81137b34 <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81137a18:	e0bffe17 	ldw	r2,-8(fp)
81137a1c:	10800617 	ldw	r2,24(r2)
81137a20:	1080008c 	andi	r2,r2,2
81137a24:	10000326 	beq	r2,zero,81137a34 <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81137a28:	e0bfff17 	ldw	r2,-4(fp)
81137a2c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81137a30:	10003226 	beq	r2,zero,81137afc <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81137a34:	e0bffe17 	ldw	r2,-8(fp)
81137a38:	10c00417 	ldw	r3,16(r2)
81137a3c:	e0bffe17 	ldw	r2,-8(fp)
81137a40:	10800517 	ldw	r2,20(r2)
81137a44:	10800044 	addi	r2,r2,1
81137a48:	10800fcc 	andi	r2,r2,63
81137a4c:	1880121e 	bne	r3,r2,81137a98 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81137a50:	e0bffe17 	ldw	r2,-8(fp)
81137a54:	10800717 	ldw	r2,28(r2)
81137a58:	e0bffc15 	stw	r2,-16(fp)
81137a5c:	00800084 	movi	r2,2
81137a60:	e0bffd0d 	sth	r2,-12(fp)
81137a64:	00800044 	movi	r2,1
81137a68:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137a6c:	d0a07303 	ldbu	r2,-32308(gp)
81137a70:	10803fcc 	andi	r2,r2,255
81137a74:	10000826 	beq	r2,zero,81137a98 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
81137a78:	e0bffd0b 	ldhu	r2,-12(fp)
81137a7c:	e0fffd83 	ldbu	r3,-10(fp)
81137a80:	e13ffdc4 	addi	r4,fp,-9
81137a84:	200f883a 	mov	r7,r4
81137a88:	180d883a 	mov	r6,r3
81137a8c:	100b883a 	mov	r5,r2
81137a90:	e13ffc17 	ldw	r4,-16(fp)
81137a94:	112b6480 	call	8112b648 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81137a98:	e0bffe17 	ldw	r2,-8(fp)
81137a9c:	10800017 	ldw	r2,0(r2)
81137aa0:	10800104 	addi	r2,r2,4
81137aa4:	e0fffe17 	ldw	r3,-8(fp)
81137aa8:	18c00417 	ldw	r3,16(r3)
81137aac:	e13ffe17 	ldw	r4,-8(fp)
81137ab0:	20c7883a 	add	r3,r4,r3
81137ab4:	18c01a04 	addi	r3,r3,104
81137ab8:	18c00003 	ldbu	r3,0(r3)
81137abc:	18c03fcc 	andi	r3,r3,255
81137ac0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81137ac4:	e0bffe17 	ldw	r2,-8(fp)
81137ac8:	10800417 	ldw	r2,16(r2)
81137acc:	10800044 	addi	r2,r2,1
81137ad0:	e0fffe17 	ldw	r3,-8(fp)
81137ad4:	18800415 	stw	r2,16(r3)
81137ad8:	10c00fcc 	andi	r3,r2,63
81137adc:	e0bffe17 	ldw	r2,-8(fp)
81137ae0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81137ae4:	e0bffe17 	ldw	r2,-8(fp)
81137ae8:	10800117 	ldw	r2,4(r2)
81137aec:	10c01014 	ori	r3,r2,64
81137af0:	e0bffe17 	ldw	r2,-8(fp)
81137af4:	10c00115 	stw	r3,4(r2)
81137af8:	00000e06 	br	81137b34 <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81137afc:	e0bffe17 	ldw	r2,-8(fp)
81137b00:	10800017 	ldw	r2,0(r2)
81137b04:	10800204 	addi	r2,r2,8
81137b08:	10800037 	ldwio	r2,0(r2)
81137b0c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81137b10:	e0bfff17 	ldw	r2,-4(fp)
81137b14:	1082000c 	andi	r2,r2,2048
81137b18:	1000061e 	bne	r2,zero,81137b34 <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81137b1c:	e0bffe17 	ldw	r2,-8(fp)
81137b20:	10c00117 	ldw	r3,4(r2)
81137b24:	00bfefc4 	movi	r2,-65
81137b28:	1886703a 	and	r3,r3,r2
81137b2c:	e0bffe17 	ldw	r2,-8(fp)
81137b30:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81137b34:	e0bffe17 	ldw	r2,-8(fp)
81137b38:	10c00417 	ldw	r3,16(r2)
81137b3c:	e0bffe17 	ldw	r2,-8(fp)
81137b40:	10800517 	ldw	r2,20(r2)
81137b44:	1880061e 	bne	r3,r2,81137b60 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81137b48:	e0bffe17 	ldw	r2,-8(fp)
81137b4c:	10c00117 	ldw	r3,4(r2)
81137b50:	00beefc4 	movi	r2,-1089
81137b54:	1886703a 	and	r3,r3,r2
81137b58:	e0bffe17 	ldw	r2,-8(fp)
81137b5c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137b60:	e0bffe17 	ldw	r2,-8(fp)
81137b64:	10800017 	ldw	r2,0(r2)
81137b68:	10800304 	addi	r2,r2,12
81137b6c:	e0fffe17 	ldw	r3,-8(fp)
81137b70:	18c00117 	ldw	r3,4(r3)
81137b74:	10c00035 	stwio	r3,0(r2)
}
81137b78:	0001883a 	nop
81137b7c:	e037883a 	mov	sp,fp
81137b80:	dfc00117 	ldw	ra,4(sp)
81137b84:	df000017 	ldw	fp,0(sp)
81137b88:	dec00204 	addi	sp,sp,8
81137b8c:	f800283a 	ret

81137b90 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81137b90:	defffd04 	addi	sp,sp,-12
81137b94:	de00012e 	bgeu	sp,et,81137b9c <altera_avalon_uart_close+0xc>
81137b98:	003b68fa 	trap	3
81137b9c:	df000215 	stw	fp,8(sp)
81137ba0:	df000204 	addi	fp,sp,8
81137ba4:	e13ffe15 	stw	r4,-8(fp)
81137ba8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81137bac:	00000506 	br	81137bc4 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81137bb0:	e0bfff17 	ldw	r2,-4(fp)
81137bb4:	1090000c 	andi	r2,r2,16384
81137bb8:	10000226 	beq	r2,zero,81137bc4 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81137bbc:	00bffd44 	movi	r2,-11
81137bc0:	00000606 	br	81137bdc <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81137bc4:	e0bffe17 	ldw	r2,-8(fp)
81137bc8:	10c00417 	ldw	r3,16(r2)
81137bcc:	e0bffe17 	ldw	r2,-8(fp)
81137bd0:	10800517 	ldw	r2,20(r2)
81137bd4:	18bff61e 	bne	r3,r2,81137bb0 <__reset+0xfb117bb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81137bd8:	0005883a 	mov	r2,zero
}
81137bdc:	e037883a 	mov	sp,fp
81137be0:	df000017 	ldw	fp,0(sp)
81137be4:	dec00104 	addi	sp,sp,4
81137be8:	f800283a 	ret

81137bec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81137bec:	defffe04 	addi	sp,sp,-8
81137bf0:	de00012e 	bgeu	sp,et,81137bf8 <alt_get_errno+0xc>
81137bf4:	003b68fa 	trap	3
81137bf8:	dfc00115 	stw	ra,4(sp)
81137bfc:	df000015 	stw	fp,0(sp)
81137c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81137c04:	d0a01017 	ldw	r2,-32704(gp)
81137c08:	10000326 	beq	r2,zero,81137c18 <alt_get_errno+0x2c>
81137c0c:	d0a01017 	ldw	r2,-32704(gp)
81137c10:	103ee83a 	callr	r2
81137c14:	00000106 	br	81137c1c <alt_get_errno+0x30>
81137c18:	d0a05e04 	addi	r2,gp,-32392
}
81137c1c:	e037883a 	mov	sp,fp
81137c20:	dfc00117 	ldw	ra,4(sp)
81137c24:	df000017 	ldw	fp,0(sp)
81137c28:	dec00204 	addi	sp,sp,8
81137c2c:	f800283a 	ret

81137c30 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81137c30:	deffec04 	addi	sp,sp,-80
81137c34:	de00012e 	bgeu	sp,et,81137c3c <altera_avalon_uart_read+0xc>
81137c38:	003b68fa 	trap	3
81137c3c:	dfc01315 	stw	ra,76(sp)
81137c40:	df001215 	stw	fp,72(sp)
81137c44:	df001204 	addi	fp,sp,72
81137c48:	e13ffc15 	stw	r4,-16(fp)
81137c4c:	e17ffd15 	stw	r5,-12(fp)
81137c50:	e1bffe15 	stw	r6,-8(fp)
81137c54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81137c58:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
81137c5c:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81137c60:	e0bfff17 	ldw	r2,-4(fp)
81137c64:	1090000c 	andi	r2,r2,16384
81137c68:	1005003a 	cmpeq	r2,r2,zero
81137c6c:	10803fcc 	andi	r2,r2,255
81137c70:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81137c74:	e0bffc17 	ldw	r2,-16(fp)
81137c78:	10800817 	ldw	r2,32(r2)
81137c7c:	e0bff815 	stw	r2,-32(fp)
81137c80:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81137c84:	e0bff90b 	ldhu	r2,-28(fp)
81137c88:	e0fffb44 	addi	r3,fp,-19
81137c8c:	180d883a 	mov	r6,r3
81137c90:	100b883a 	mov	r5,r2
81137c94:	e13ff817 	ldw	r4,-32(fp)
81137c98:	112ecc00 	call	8112ecc0 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81137c9c:	00001306 	br	81137cec <altera_avalon_uart_read+0xbc>
    {
      count++;
81137ca0:	e0bff017 	ldw	r2,-64(fp)
81137ca4:	10800044 	addi	r2,r2,1
81137ca8:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81137cac:	e0bffd17 	ldw	r2,-12(fp)
81137cb0:	10c00044 	addi	r3,r2,1
81137cb4:	e0fffd15 	stw	r3,-12(fp)
81137cb8:	e0fffc17 	ldw	r3,-16(fp)
81137cbc:	18c00217 	ldw	r3,8(r3)
81137cc0:	e13ffc17 	ldw	r4,-16(fp)
81137cc4:	20c7883a 	add	r3,r4,r3
81137cc8:	18c00a04 	addi	r3,r3,40
81137ccc:	18c00003 	ldbu	r3,0(r3)
81137cd0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
81137cd4:	e0bffc17 	ldw	r2,-16(fp)
81137cd8:	10800217 	ldw	r2,8(r2)
81137cdc:	10800044 	addi	r2,r2,1
81137ce0:	10c00fcc 	andi	r3,r2,63
81137ce4:	e0bffc17 	ldw	r2,-16(fp)
81137ce8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81137cec:	e0fff017 	ldw	r3,-64(fp)
81137cf0:	e0bffe17 	ldw	r2,-8(fp)
81137cf4:	1880050e 	bge	r3,r2,81137d0c <altera_avalon_uart_read+0xdc>
81137cf8:	e0bffc17 	ldw	r2,-16(fp)
81137cfc:	10c00217 	ldw	r3,8(r2)
81137d00:	e0bffc17 	ldw	r2,-16(fp)
81137d04:	10800317 	ldw	r2,12(r2)
81137d08:	18bfe51e 	bne	r3,r2,81137ca0 <__reset+0xfb117ca0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81137d0c:	e0bff017 	ldw	r2,-64(fp)
81137d10:	10003a1e 	bne	r2,zero,81137dfc <altera_avalon_uart_read+0x1cc>
81137d14:	e0bffc17 	ldw	r2,-16(fp)
81137d18:	10c00217 	ldw	r3,8(r2)
81137d1c:	e0bffc17 	ldw	r2,-16(fp)
81137d20:	10800317 	ldw	r2,12(r2)
81137d24:	1880351e 	bne	r3,r2,81137dfc <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
81137d28:	e0bff117 	ldw	r2,-60(fp)
81137d2c:	1000071e 	bne	r2,zero,81137d4c <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81137d30:	1137bec0 	call	81137bec <alt_get_errno>
81137d34:	1007883a 	mov	r3,r2
81137d38:	008002c4 	movi	r2,11
81137d3c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81137d40:	00800044 	movi	r2,1
81137d44:	e0bfef05 	stb	r2,-68(fp)
        break;
81137d48:	00003006 	br	81137e0c <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137d4c:	0005303a 	rdctl	r2,status
81137d50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137d54:	e0fff517 	ldw	r3,-44(fp)
81137d58:	00bfff84 	movi	r2,-2
81137d5c:	1884703a 	and	r2,r3,r2
81137d60:	1001703a 	wrctl	status,r2
  
  return context;
81137d64:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81137d68:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137d6c:	e0bffc17 	ldw	r2,-16(fp)
81137d70:	10800117 	ldw	r2,4(r2)
81137d74:	10c02014 	ori	r3,r2,128
81137d78:	e0bffc17 	ldw	r2,-16(fp)
81137d7c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137d80:	e0bffc17 	ldw	r2,-16(fp)
81137d84:	10800017 	ldw	r2,0(r2)
81137d88:	10800304 	addi	r2,r2,12
81137d8c:	e0fffc17 	ldw	r3,-16(fp)
81137d90:	18c00117 	ldw	r3,4(r3)
81137d94:	10c00035 	stwio	r3,0(r2)
81137d98:	e0bff417 	ldw	r2,-48(fp)
81137d9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137da0:	e0bff617 	ldw	r2,-40(fp)
81137da4:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81137da8:	e0bffc17 	ldw	r2,-16(fp)
81137dac:	10800717 	ldw	r2,28(r2)
81137db0:	e0bff215 	stw	r2,-56(fp)
81137db4:	00800044 	movi	r2,1
81137db8:	e0bff98d 	sth	r2,-26(fp)
81137dbc:	00bfe0c4 	movi	r2,-125
81137dc0:	e0bffa05 	stb	r2,-24(fp)
81137dc4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81137dc8:	d0a07303 	ldbu	r2,-32308(gp)
81137dcc:	10803fcc 	andi	r2,r2,255
81137dd0:	10000a26 	beq	r2,zero,81137dfc <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81137dd4:	e0fff98b 	ldhu	r3,-26(fp)
81137dd8:	e13ffa03 	ldbu	r4,-24(fp)
81137ddc:	e17ffa8b 	ldhu	r5,-22(fp)
81137de0:	e0bffb04 	addi	r2,fp,-20
81137de4:	d8800015 	stw	r2,0(sp)
81137de8:	280f883a 	mov	r7,r5
81137dec:	200d883a 	mov	r6,r4
81137df0:	180b883a 	mov	r5,r3
81137df4:	e13ff217 	ldw	r4,-56(fp)
81137df8:	112b0200 	call	8112b020 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81137dfc:	e0bff017 	ldw	r2,-64(fp)
81137e00:	1000021e 	bne	r2,zero,81137e0c <altera_avalon_uart_read+0x1dc>
81137e04:	e0bffe17 	ldw	r2,-8(fp)
81137e08:	103fb81e 	bne	r2,zero,81137cec <__reset+0xfb117cec>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81137e0c:	e0bffc17 	ldw	r2,-16(fp)
81137e10:	10800817 	ldw	r2,32(r2)
81137e14:	1009883a 	mov	r4,r2
81137e18:	112f0480 	call	8112f048 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137e1c:	0005303a 	rdctl	r2,status
81137e20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137e24:	e0fff717 	ldw	r3,-36(fp)
81137e28:	00bfff84 	movi	r2,-2
81137e2c:	1884703a 	and	r2,r3,r2
81137e30:	1001703a 	wrctl	status,r2
  
  return context;
81137e34:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81137e38:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81137e3c:	e0bffc17 	ldw	r2,-16(fp)
81137e40:	10800117 	ldw	r2,4(r2)
81137e44:	10c02014 	ori	r3,r2,128
81137e48:	e0bffc17 	ldw	r2,-16(fp)
81137e4c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137e50:	e0bffc17 	ldw	r2,-16(fp)
81137e54:	10800017 	ldw	r2,0(r2)
81137e58:	10800304 	addi	r2,r2,12
81137e5c:	e0fffc17 	ldw	r3,-16(fp)
81137e60:	18c00117 	ldw	r3,4(r3)
81137e64:	10c00035 	stwio	r3,0(r2)
81137e68:	e0bff417 	ldw	r2,-48(fp)
81137e6c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137e70:	e0bff317 	ldw	r2,-52(fp)
81137e74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81137e78:	e0bfef03 	ldbu	r2,-68(fp)
81137e7c:	10000226 	beq	r2,zero,81137e88 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
81137e80:	00bffd44 	movi	r2,-11
81137e84:	00000106 	br	81137e8c <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
81137e88:	e0bff017 	ldw	r2,-64(fp)
  }
}
81137e8c:	e037883a 	mov	sp,fp
81137e90:	dfc00117 	ldw	ra,4(sp)
81137e94:	df000017 	ldw	fp,0(sp)
81137e98:	dec00204 	addi	sp,sp,8
81137e9c:	f800283a 	ret

81137ea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81137ea0:	defffe04 	addi	sp,sp,-8
81137ea4:	de00012e 	bgeu	sp,et,81137eac <alt_get_errno+0xc>
81137ea8:	003b68fa 	trap	3
81137eac:	dfc00115 	stw	ra,4(sp)
81137eb0:	df000015 	stw	fp,0(sp)
81137eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81137eb8:	d0a01017 	ldw	r2,-32704(gp)
81137ebc:	10000326 	beq	r2,zero,81137ecc <alt_get_errno+0x2c>
81137ec0:	d0a01017 	ldw	r2,-32704(gp)
81137ec4:	103ee83a 	callr	r2
81137ec8:	00000106 	br	81137ed0 <alt_get_errno+0x30>
81137ecc:	d0a05e04 	addi	r2,gp,-32392
}
81137ed0:	e037883a 	mov	sp,fp
81137ed4:	dfc00117 	ldw	ra,4(sp)
81137ed8:	df000017 	ldw	fp,0(sp)
81137edc:	dec00204 	addi	sp,sp,8
81137ee0:	f800283a 	ret

81137ee4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
81137ee4:	deffec04 	addi	sp,sp,-80
81137ee8:	de00012e 	bgeu	sp,et,81137ef0 <altera_avalon_uart_write+0xc>
81137eec:	003b68fa 	trap	3
81137ef0:	dfc01315 	stw	ra,76(sp)
81137ef4:	df001215 	stw	fp,72(sp)
81137ef8:	df001204 	addi	fp,sp,72
81137efc:	e13ffc15 	stw	r4,-16(fp)
81137f00:	e17ffd15 	stw	r5,-12(fp)
81137f04:	e1bffe15 	stw	r6,-8(fp)
81137f08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81137f0c:	e0bffe17 	ldw	r2,-8(fp)
81137f10:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
81137f14:	e0bfff17 	ldw	r2,-4(fp)
81137f18:	1090000c 	andi	r2,r2,16384
81137f1c:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81137f20:	e0bffc17 	ldw	r2,-16(fp)
81137f24:	10800917 	ldw	r2,36(r2)
81137f28:	e0bff815 	stw	r2,-32(fp)
81137f2c:	e03ff90d 	sth	zero,-28(fp)
81137f30:	e0bff90b 	ldhu	r2,-28(fp)
81137f34:	e0fffb44 	addi	r3,fp,-19
81137f38:	180d883a 	mov	r6,r3
81137f3c:	100b883a 	mov	r5,r2
81137f40:	e13ff817 	ldw	r4,-32(fp)
81137f44:	112ecc00 	call	8112ecc0 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81137f48:	00005106 	br	81138090 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81137f4c:	e0bffc17 	ldw	r2,-16(fp)
81137f50:	10800517 	ldw	r2,20(r2)
81137f54:	10800044 	addi	r2,r2,1
81137f58:	10800fcc 	andi	r2,r2,63
81137f5c:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81137f60:	e0bffc17 	ldw	r2,-16(fp)
81137f64:	10c00417 	ldw	r3,16(r2)
81137f68:	e0bff217 	ldw	r2,-56(fp)
81137f6c:	1880371e 	bne	r3,r2,8113804c <altera_avalon_uart_write+0x168>
    {
      if (no_block)
81137f70:	e0bff017 	ldw	r2,-64(fp)
81137f74:	10000526 	beq	r2,zero,81137f8c <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81137f78:	1137ea00 	call	81137ea0 <alt_get_errno>
81137f7c:	1007883a 	mov	r3,r2
81137f80:	008002c4 	movi	r2,11
81137f84:	18800015 	stw	r2,0(r3)
        break;
81137f88:	00004306 	br	81138098 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137f8c:	0005303a 	rdctl	r2,status
81137f90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137f94:	e0fff517 	ldw	r3,-44(fp)
81137f98:	00bfff84 	movi	r2,-2
81137f9c:	1884703a 	and	r2,r3,r2
81137fa0:	1001703a 	wrctl	status,r2
  
  return context;
81137fa4:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81137fa8:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81137fac:	e0bffc17 	ldw	r2,-16(fp)
81137fb0:	10800117 	ldw	r2,4(r2)
81137fb4:	10c11014 	ori	r3,r2,1088
81137fb8:	e0bffc17 	ldw	r2,-16(fp)
81137fbc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81137fc0:	e0bffc17 	ldw	r2,-16(fp)
81137fc4:	10800017 	ldw	r2,0(r2)
81137fc8:	10800304 	addi	r2,r2,12
81137fcc:	e0fffc17 	ldw	r3,-16(fp)
81137fd0:	18c00117 	ldw	r3,4(r3)
81137fd4:	10c00035 	stwio	r3,0(r2)
81137fd8:	e0bff417 	ldw	r2,-48(fp)
81137fdc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137fe0:	e0bff117 	ldw	r2,-60(fp)
81137fe4:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81137fe8:	e0bffc17 	ldw	r2,-16(fp)
81137fec:	10800717 	ldw	r2,28(r2)
81137ff0:	e0bff315 	stw	r2,-52(fp)
81137ff4:	00800084 	movi	r2,2
81137ff8:	e0bff98d 	sth	r2,-26(fp)
81137ffc:	00bfe0c4 	movi	r2,-125
81138000:	e0bffa05 	stb	r2,-24(fp)
81138004:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81138008:	d0a07303 	ldbu	r2,-32308(gp)
8113800c:	10803fcc 	andi	r2,r2,255
81138010:	10000a26 	beq	r2,zero,8113803c <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81138014:	e0fff98b 	ldhu	r3,-26(fp)
81138018:	e13ffa03 	ldbu	r4,-24(fp)
8113801c:	e17ffa8b 	ldhu	r5,-22(fp)
81138020:	e0bffb04 	addi	r2,fp,-20
81138024:	d8800015 	stw	r2,0(sp)
81138028:	280f883a 	mov	r7,r5
8113802c:	200d883a 	mov	r6,r4
81138030:	180b883a 	mov	r5,r3
81138034:	e13ff317 	ldw	r4,-52(fp)
81138038:	112b0200 	call	8112b020 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8113803c:	e0bffc17 	ldw	r2,-16(fp)
81138040:	10c00417 	ldw	r3,16(r2)
81138044:	e0bff217 	ldw	r2,-56(fp)
81138048:	18bfe726 	beq	r3,r2,81137fe8 <__reset+0xfb117fe8>
      }
    }

    count--;
8113804c:	e0bfef17 	ldw	r2,-68(fp)
81138050:	10bfffc4 	addi	r2,r2,-1
81138054:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81138058:	e0bffc17 	ldw	r2,-16(fp)
8113805c:	10c00517 	ldw	r3,20(r2)
81138060:	e0bffd17 	ldw	r2,-12(fp)
81138064:	11000044 	addi	r4,r2,1
81138068:	e13ffd15 	stw	r4,-12(fp)
8113806c:	10800003 	ldbu	r2,0(r2)
81138070:	1009883a 	mov	r4,r2
81138074:	e0bffc17 	ldw	r2,-16(fp)
81138078:	10c5883a 	add	r2,r2,r3
8113807c:	10801a04 	addi	r2,r2,104
81138080:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81138084:	e0bffc17 	ldw	r2,-16(fp)
81138088:	e0fff217 	ldw	r3,-56(fp)
8113808c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81138090:	e0bfef17 	ldw	r2,-68(fp)
81138094:	103fad1e 	bne	r2,zero,81137f4c <__reset+0xfb117f4c>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81138098:	e0bffc17 	ldw	r2,-16(fp)
8113809c:	10800917 	ldw	r2,36(r2)
811380a0:	1009883a 	mov	r4,r2
811380a4:	112f0480 	call	8112f048 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811380a8:	0005303a 	rdctl	r2,status
811380ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811380b0:	e0fff717 	ldw	r3,-36(fp)
811380b4:	00bfff84 	movi	r2,-2
811380b8:	1884703a 	and	r2,r3,r2
811380bc:	1001703a 	wrctl	status,r2
  
  return context;
811380c0:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
811380c4:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811380c8:	e0bffc17 	ldw	r2,-16(fp)
811380cc:	10800117 	ldw	r2,4(r2)
811380d0:	10c11014 	ori	r3,r2,1088
811380d4:	e0bffc17 	ldw	r2,-16(fp)
811380d8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811380dc:	e0bffc17 	ldw	r2,-16(fp)
811380e0:	10800017 	ldw	r2,0(r2)
811380e4:	10800304 	addi	r2,r2,12
811380e8:	e0fffc17 	ldw	r3,-16(fp)
811380ec:	18c00117 	ldw	r3,4(r3)
811380f0:	10c00035 	stwio	r3,0(r2)
811380f4:	e0bff417 	ldw	r2,-48(fp)
811380f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811380fc:	e0bff617 	ldw	r2,-40(fp)
81138100:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81138104:	e0fffe17 	ldw	r3,-8(fp)
81138108:	e0bfef17 	ldw	r2,-68(fp)
8113810c:	1885c83a 	sub	r2,r3,r2
}
81138110:	e037883a 	mov	sp,fp
81138114:	dfc00117 	ldw	ra,4(sp)
81138118:	df000017 	ldw	fp,0(sp)
8113811c:	dec00204 	addi	sp,sp,8
81138120:	f800283a 	ret

81138124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81138124:	defffe04 	addi	sp,sp,-8
81138128:	de00012e 	bgeu	sp,et,81138130 <alt_get_errno+0xc>
8113812c:	003b68fa 	trap	3
81138130:	dfc00115 	stw	ra,4(sp)
81138134:	df000015 	stw	fp,0(sp)
81138138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113813c:	d0a01017 	ldw	r2,-32704(gp)
81138140:	10000326 	beq	r2,zero,81138150 <alt_get_errno+0x2c>
81138144:	d0a01017 	ldw	r2,-32704(gp)
81138148:	103ee83a 	callr	r2
8113814c:	00000106 	br	81138154 <alt_get_errno+0x30>
81138150:	d0a05e04 	addi	r2,gp,-32392
}
81138154:	e037883a 	mov	sp,fp
81138158:	dfc00117 	ldw	ra,4(sp)
8113815c:	df000017 	ldw	fp,0(sp)
81138160:	dec00204 	addi	sp,sp,8
81138164:	f800283a 	ret

81138168 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81138168:	defffc04 	addi	sp,sp,-16
8113816c:	de00012e 	bgeu	sp,et,81138174 <alt_msgdma_write_standard_descriptor+0xc>
81138170:	003b68fa 	trap	3
81138174:	df000315 	stw	fp,12(sp)
81138178:	df000304 	addi	fp,sp,12
8113817c:	e13ffd15 	stw	r4,-12(fp)
81138180:	e17ffe15 	stw	r5,-8(fp)
81138184:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81138188:	e0bffd17 	ldw	r2,-12(fp)
8113818c:	10800037 	ldwio	r2,0(r2)
81138190:	1080010c 	andi	r2,r2,4
81138194:	10000226 	beq	r2,zero,811381a0 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81138198:	00bff904 	movi	r2,-28
8113819c:	00001506 	br	811381f4 <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
811381a0:	e0bfff17 	ldw	r2,-4(fp)
811381a4:	10800017 	ldw	r2,0(r2)
811381a8:	1007883a 	mov	r3,r2
811381ac:	e0bffe17 	ldw	r2,-8(fp)
811381b0:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
811381b4:	e0bffe17 	ldw	r2,-8(fp)
811381b8:	10800104 	addi	r2,r2,4
811381bc:	e0ffff17 	ldw	r3,-4(fp)
811381c0:	18c00117 	ldw	r3,4(r3)
811381c4:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
811381c8:	e0bffe17 	ldw	r2,-8(fp)
811381cc:	10800204 	addi	r2,r2,8
811381d0:	e0ffff17 	ldw	r3,-4(fp)
811381d4:	18c00217 	ldw	r3,8(r3)
811381d8:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
811381dc:	e0bffe17 	ldw	r2,-8(fp)
811381e0:	10800304 	addi	r2,r2,12
811381e4:	e0ffff17 	ldw	r3,-4(fp)
811381e8:	18c00317 	ldw	r3,12(r3)
811381ec:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
811381f0:	0005883a 	mov	r2,zero
}
811381f4:	e037883a 	mov	sp,fp
811381f8:	df000017 	ldw	fp,0(sp)
811381fc:	dec00104 	addi	sp,sp,4
81138200:	f800283a 	ret

81138204 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81138204:	defffc04 	addi	sp,sp,-16
81138208:	de00012e 	bgeu	sp,et,81138210 <alt_msgdma_write_extended_descriptor+0xc>
8113820c:	003b68fa 	trap	3
81138210:	df000315 	stw	fp,12(sp)
81138214:	df000304 	addi	fp,sp,12
81138218:	e13ffd15 	stw	r4,-12(fp)
8113821c:	e17ffe15 	stw	r5,-8(fp)
81138220:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81138224:	e0bffd17 	ldw	r2,-12(fp)
81138228:	10800037 	ldwio	r2,0(r2)
8113822c:	1080010c 	andi	r2,r2,4
81138230:	10000226 	beq	r2,zero,8113823c <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81138234:	00bff904 	movi	r2,-28
81138238:	00003b06 	br	81138328 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8113823c:	e0bfff17 	ldw	r2,-4(fp)
81138240:	10800017 	ldw	r2,0(r2)
81138244:	1007883a 	mov	r3,r2
81138248:	e0bffe17 	ldw	r2,-8(fp)
8113824c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81138250:	e0bffe17 	ldw	r2,-8(fp)
81138254:	10800104 	addi	r2,r2,4
81138258:	e0ffff17 	ldw	r3,-4(fp)
8113825c:	18c00117 	ldw	r3,4(r3)
81138260:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81138264:	e0bffe17 	ldw	r2,-8(fp)
81138268:	10800204 	addi	r2,r2,8
8113826c:	e0ffff17 	ldw	r3,-4(fp)
81138270:	18c00217 	ldw	r3,8(r3)
81138274:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81138278:	e0bffe17 	ldw	r2,-8(fp)
8113827c:	10800304 	addi	r2,r2,12
81138280:	e0ffff17 	ldw	r3,-4(fp)
81138284:	18c0030b 	ldhu	r3,12(r3)
81138288:	18ffffcc 	andi	r3,r3,65535
8113828c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81138290:	e0bffe17 	ldw	r2,-8(fp)
81138294:	10800384 	addi	r2,r2,14
81138298:	e0ffff17 	ldw	r3,-4(fp)
8113829c:	18c00383 	ldbu	r3,14(r3)
811382a0:	18c03fcc 	andi	r3,r3,255
811382a4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
811382a8:	e0bffe17 	ldw	r2,-8(fp)
811382ac:	108003c4 	addi	r2,r2,15
811382b0:	e0ffff17 	ldw	r3,-4(fp)
811382b4:	18c003c3 	ldbu	r3,15(r3)
811382b8:	18c03fcc 	andi	r3,r3,255
811382bc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
811382c0:	e0bffe17 	ldw	r2,-8(fp)
811382c4:	10800404 	addi	r2,r2,16
811382c8:	e0ffff17 	ldw	r3,-4(fp)
811382cc:	18c0040b 	ldhu	r3,16(r3)
811382d0:	18ffffcc 	andi	r3,r3,65535
811382d4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
811382d8:	e0bffe17 	ldw	r2,-8(fp)
811382dc:	10800484 	addi	r2,r2,18
811382e0:	e0ffff17 	ldw	r3,-4(fp)
811382e4:	18c0048b 	ldhu	r3,18(r3)
811382e8:	18ffffcc 	andi	r3,r3,65535
811382ec:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
811382f0:	e0bffe17 	ldw	r2,-8(fp)
811382f4:	10800504 	addi	r2,r2,20
811382f8:	0007883a 	mov	r3,zero
811382fc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81138300:	e0bffe17 	ldw	r2,-8(fp)
81138304:	10800604 	addi	r2,r2,24
81138308:	0007883a 	mov	r3,zero
8113830c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81138310:	e0bffe17 	ldw	r2,-8(fp)
81138314:	10800704 	addi	r2,r2,28
81138318:	e0ffff17 	ldw	r3,-4(fp)
8113831c:	18c00717 	ldw	r3,28(r3)
81138320:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81138324:	0005883a 	mov	r2,zero
}
81138328:	e037883a 	mov	sp,fp
8113832c:	df000017 	ldw	fp,0(sp)
81138330:	dec00104 	addi	sp,sp,4
81138334:	f800283a 	ret

81138338 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81138338:	defff804 	addi	sp,sp,-32
8113833c:	de00012e 	bgeu	sp,et,81138344 <alt_msgdma_irq+0xc>
81138340:	003b68fa 	trap	3
81138344:	dfc00715 	stw	ra,28(sp)
81138348:	df000615 	stw	fp,24(sp)
8113834c:	df000604 	addi	fp,sp,24
81138350:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81138354:	e0bfff17 	ldw	r2,-4(fp)
81138358:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8113835c:	e0bffa17 	ldw	r2,-24(fp)
81138360:	10801783 	ldbu	r2,94(r2)
81138364:	10803fcc 	andi	r2,r2,255
81138368:	10001126 	beq	r2,zero,811383b0 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113836c:	e0bffa17 	ldw	r2,-24(fp)
81138370:	10800617 	ldw	r2,24(r2)
81138374:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81138378:	1007883a 	mov	r3,r2
8113837c:	00bffdc4 	movi	r2,-9
81138380:	1884703a 	and	r2,r3,r2
81138384:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81138388:	e0bffa17 	ldw	r2,-24(fp)
8113838c:	10800617 	ldw	r2,24(r2)
81138390:	e0fffb17 	ldw	r3,-20(fp)
81138394:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81138398:	e0bffa17 	ldw	r2,-24(fp)
8113839c:	10800617 	ldw	r2,24(r2)
811383a0:	10800404 	addi	r2,r2,16
811383a4:	00c00044 	movi	r3,1
811383a8:	10c00035 	stwio	r3,0(r2)
811383ac:	00001106 	br	811383f4 <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
811383b0:	e0bffa17 	ldw	r2,-24(fp)
811383b4:	10800317 	ldw	r2,12(r2)
811383b8:	10800104 	addi	r2,r2,4
811383bc:	10800037 	ldwio	r2,0(r2)
811383c0:	1007883a 	mov	r3,r2
811383c4:	00bffbc4 	movi	r2,-17
811383c8:	1884703a 	and	r2,r3,r2
811383cc:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811383d0:	e0bffa17 	ldw	r2,-24(fp)
811383d4:	10800317 	ldw	r2,12(r2)
811383d8:	10800104 	addi	r2,r2,4
811383dc:	e0fffb17 	ldw	r3,-20(fp)
811383e0:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811383e4:	e0bffa17 	ldw	r2,-24(fp)
811383e8:	10800317 	ldw	r2,12(r2)
811383ec:	00c08004 	movi	r3,512
811383f0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
811383f4:	e0bffa17 	ldw	r2,-24(fp)
811383f8:	10800b17 	ldw	r2,44(r2)
811383fc:	10001226 	beq	r2,zero,81138448 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138400:	0005303a 	rdctl	r2,status
81138404:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138408:	e0fffd17 	ldw	r3,-12(fp)
8113840c:	00bfff84 	movi	r2,-2
81138410:	1884703a 	and	r2,r3,r2
81138414:	1001703a 	wrctl	status,r2
  
  return context;
81138418:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8113841c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81138420:	e0bffa17 	ldw	r2,-24(fp)
81138424:	10800b17 	ldw	r2,44(r2)
81138428:	e0fffa17 	ldw	r3,-24(fp)
8113842c:	18c00c17 	ldw	r3,48(r3)
81138430:	1809883a 	mov	r4,r3
81138434:	103ee83a 	callr	r2
81138438:	e0bffc17 	ldw	r2,-16(fp)
8113843c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138440:	e0bffe17 	ldw	r2,-8(fp)
81138444:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81138448:	e0bffa17 	ldw	r2,-24(fp)
8113844c:	10801783 	ldbu	r2,94(r2)
81138450:	10803fcc 	andi	r2,r2,255
81138454:	10000a26 	beq	r2,zero,81138480 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81138458:	e0bffa17 	ldw	r2,-24(fp)
8113845c:	10800617 	ldw	r2,24(r2)
81138460:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81138464:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81138468:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113846c:	e0bffa17 	ldw	r2,-24(fp)
81138470:	10800617 	ldw	r2,24(r2)
81138474:	e0fffb17 	ldw	r3,-20(fp)
81138478:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8113847c:	00000c06 	br	811384b0 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81138480:	e0bffa17 	ldw	r2,-24(fp)
81138484:	10800317 	ldw	r2,12(r2)
81138488:	10800104 	addi	r2,r2,4
8113848c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81138490:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81138494:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81138498:	e0bffa17 	ldw	r2,-24(fp)
8113849c:	10800317 	ldw	r2,12(r2)
811384a0:	10800104 	addi	r2,r2,4
811384a4:	e0fffb17 	ldw	r3,-20(fp)
811384a8:	10c00035 	stwio	r3,0(r2)
    }

    return;
811384ac:	0001883a 	nop
}
811384b0:	e037883a 	mov	sp,fp
811384b4:	dfc00117 	ldw	ra,4(sp)
811384b8:	df000017 	ldw	fp,0(sp)
811384bc:	dec00204 	addi	sp,sp,8
811384c0:	f800283a 	ret

811384c4 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811384c4:	defffb04 	addi	sp,sp,-20
811384c8:	de00012e 	bgeu	sp,et,811384d0 <alt_msgdma_construct_standard_descriptor+0xc>
811384cc:	003b68fa 	trap	3
811384d0:	df000415 	stw	fp,16(sp)
811384d4:	df000404 	addi	fp,sp,16
811384d8:	e13ffc15 	stw	r4,-16(fp)
811384dc:	e17ffd15 	stw	r5,-12(fp)
811384e0:	e1bffe15 	stw	r6,-8(fp)
811384e4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811384e8:	e0bffc17 	ldw	r2,-16(fp)
811384ec:	10c01217 	ldw	r3,72(r2)
811384f0:	e0800117 	ldw	r2,4(fp)
811384f4:	18800436 	bltu	r3,r2,81138508 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
811384f8:	e0bffc17 	ldw	r2,-16(fp)
811384fc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81138500:	10803fcc 	andi	r2,r2,255
81138504:	10000226 	beq	r2,zero,81138510 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81138508:	00bffa84 	movi	r2,-22
8113850c:	00000e06 	br	81138548 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
81138510:	e0bffd17 	ldw	r2,-12(fp)
81138514:	e0fffe17 	ldw	r3,-8(fp)
81138518:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113851c:	e0bffd17 	ldw	r2,-12(fp)
81138520:	e0ffff17 	ldw	r3,-4(fp)
81138524:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81138528:	e0bffd17 	ldw	r2,-12(fp)
8113852c:	e0c00117 	ldw	r3,4(fp)
81138530:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81138534:	e0800217 	ldw	r2,8(fp)
81138538:	10e00034 	orhi	r3,r2,32768
8113853c:	e0bffd17 	ldw	r2,-12(fp)
81138540:	10c00315 	stw	r3,12(r2)
    
    return 0;
81138544:	0005883a 	mov	r2,zero
}
81138548:	e037883a 	mov	sp,fp
8113854c:	df000017 	ldw	fp,0(sp)
81138550:	dec00104 	addi	sp,sp,4
81138554:	f800283a 	ret

81138558 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81138558:	defff604 	addi	sp,sp,-40
8113855c:	de00012e 	bgeu	sp,et,81138564 <alt_msgdma_construct_extended_descriptor+0xc>
81138560:	003b68fa 	trap	3
81138564:	df000915 	stw	fp,36(sp)
81138568:	df000904 	addi	fp,sp,36
8113856c:	e13ff715 	stw	r4,-36(fp)
81138570:	e17ff815 	stw	r5,-32(fp)
81138574:	e1bff915 	stw	r6,-28(fp)
81138578:	e1fffa15 	stw	r7,-24(fp)
8113857c:	e1800317 	ldw	r6,12(fp)
81138580:	e1400417 	ldw	r5,16(fp)
81138584:	e1000517 	ldw	r4,20(fp)
81138588:	e0c00617 	ldw	r3,24(fp)
8113858c:	e0800717 	ldw	r2,28(fp)
81138590:	e1bffb0d 	sth	r6,-20(fp)
81138594:	e17ffc05 	stb	r5,-16(fp)
81138598:	e13ffd05 	stb	r4,-12(fp)
8113859c:	e0fffe0d 	sth	r3,-8(fp)
811385a0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
811385a4:	e0bff717 	ldw	r2,-36(fp)
811385a8:	10c01217 	ldw	r3,72(r2)
811385ac:	e0800117 	ldw	r2,4(fp)
811385b0:	18801936 	bltu	r3,r2,81138618 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
811385b4:	e13ff717 	ldw	r4,-36(fp)
811385b8:	20801317 	ldw	r2,76(r4)
811385bc:	20c01417 	ldw	r3,80(r4)
811385c0:	e13ffe0b 	ldhu	r4,-8(fp)
811385c4:	213fffcc 	andi	r4,r4,65535
811385c8:	2015883a 	mov	r10,r4
811385cc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
811385d0:	1ac01136 	bltu	r3,r11,81138618 <alt_msgdma_construct_extended_descriptor+0xc0>
811385d4:	58c0011e 	bne	r11,r3,811385dc <alt_msgdma_construct_extended_descriptor+0x84>
811385d8:	12800f36 	bltu	r2,r10,81138618 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811385dc:	e13ff717 	ldw	r4,-36(fp)
811385e0:	20801317 	ldw	r2,76(r4)
811385e4:	20c01417 	ldw	r3,80(r4)
811385e8:	e13fff0b 	ldhu	r4,-4(fp)
811385ec:	213fffcc 	andi	r4,r4,65535
811385f0:	2011883a 	mov	r8,r4
811385f4:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
811385f8:	1a400736 	bltu	r3,r9,81138618 <alt_msgdma_construct_extended_descriptor+0xc0>
811385fc:	48c0011e 	bne	r9,r3,81138604 <alt_msgdma_construct_extended_descriptor+0xac>
81138600:	12000536 	bltu	r2,r8,81138618 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81138604:	e0bff717 	ldw	r2,-36(fp)
81138608:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113860c:	10803fcc 	andi	r2,r2,255
81138610:	10800060 	cmpeqi	r2,r2,1
81138614:	1000021e 	bne	r2,zero,81138620 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81138618:	00bffa84 	movi	r2,-22
8113861c:	00002106 	br	811386a4 <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81138620:	e0bff817 	ldw	r2,-32(fp)
81138624:	e0fff917 	ldw	r3,-28(fp)
81138628:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8113862c:	e0bff817 	ldw	r2,-32(fp)
81138630:	e0fffa17 	ldw	r3,-24(fp)
81138634:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81138638:	e0bff817 	ldw	r2,-32(fp)
8113863c:	e0c00117 	ldw	r3,4(fp)
81138640:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81138644:	e0bff817 	ldw	r2,-32(fp)
81138648:	e0fffb0b 	ldhu	r3,-20(fp)
8113864c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81138650:	e0bff817 	ldw	r2,-32(fp)
81138654:	e0fffc03 	ldbu	r3,-16(fp)
81138658:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8113865c:	e0bff817 	ldw	r2,-32(fp)
81138660:	e0fffd03 	ldbu	r3,-12(fp)
81138664:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81138668:	e0bff817 	ldw	r2,-32(fp)
8113866c:	e0fffe0b 	ldhu	r3,-8(fp)
81138670:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81138674:	e0bff817 	ldw	r2,-32(fp)
81138678:	e0ffff0b 	ldhu	r3,-4(fp)
8113867c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81138680:	e0bff817 	ldw	r2,-32(fp)
81138684:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81138688:	e0bff817 	ldw	r2,-32(fp)
8113868c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81138690:	e0800217 	ldw	r2,8(fp)
81138694:	10e00034 	orhi	r3,r2,32768
81138698:	e0bff817 	ldw	r2,-32(fp)
8113869c:	10c00715 	stw	r3,28(r2)

  return 0 ;
811386a0:	0005883a 	mov	r2,zero

}
811386a4:	e037883a 	mov	sp,fp
811386a8:	df000017 	ldw	fp,0(sp)
811386ac:	dec00104 	addi	sp,sp,4
811386b0:	f800283a 	ret

811386b4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
811386b4:	deffee04 	addi	sp,sp,-72
811386b8:	de00012e 	bgeu	sp,et,811386c0 <alt_msgdma_descriptor_async_transfer+0xc>
811386bc:	003b68fa 	trap	3
811386c0:	dfc01115 	stw	ra,68(sp)
811386c4:	df001015 	stw	fp,64(sp)
811386c8:	df001004 	addi	fp,sp,64
811386cc:	e13ffd15 	stw	r4,-12(fp)
811386d0:	e17ffe15 	stw	r5,-8(fp)
811386d4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
811386d8:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
811386dc:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
811386e0:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811386e4:	e0bffd17 	ldw	r2,-12(fp)
811386e8:	10800317 	ldw	r2,12(r2)
811386ec:	10800204 	addi	r2,r2,8
811386f0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811386f4:	10bfffcc 	andi	r2,r2,65535
811386f8:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811386fc:	e0bffd17 	ldw	r2,-12(fp)
81138700:	10800317 	ldw	r2,12(r2)
81138704:	10800204 	addi	r2,r2,8
81138708:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8113870c:	1004d43a 	srli	r2,r2,16
81138710:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138714:	e0bffd17 	ldw	r2,-12(fp)
81138718:	10800917 	ldw	r2,36(r2)
8113871c:	e0fff417 	ldw	r3,-48(fp)
81138720:	1880042e 	bgeu	r3,r2,81138734 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81138724:	e0bffd17 	ldw	r2,-12(fp)
81138728:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113872c:	e0fff317 	ldw	r3,-52(fp)
81138730:	18800236 	bltu	r3,r2,8113873c <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81138734:	00bff904 	movi	r2,-28
81138738:	0000a906 	br	811389e0 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
8113873c:	e0bffd17 	ldw	r2,-12(fp)
81138740:	10801817 	ldw	r2,96(r2)
81138744:	e0bff615 	stw	r2,-40(fp)
81138748:	e03ffc0d 	sth	zero,-16(fp)
8113874c:	e0bffc0b 	ldhu	r2,-16(fp)
81138750:	e0fffc84 	addi	r3,fp,-14
81138754:	180d883a 	mov	r6,r3
81138758:	100b883a 	mov	r5,r2
8113875c:	e13ff617 	ldw	r4,-40(fp)
81138760:	112ecc00 	call	8112ecc0 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81138764:	00800804 	movi	r2,32
81138768:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113876c:	0005303a 	rdctl	r2,status
81138770:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138774:	e0fff717 	ldw	r3,-36(fp)
81138778:	00bfff84 	movi	r2,-2
8113877c:	1884703a 	and	r2,r3,r2
81138780:	1001703a 	wrctl	status,r2
  
  return context;
81138784:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81138788:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113878c:	e0bffd17 	ldw	r2,-12(fp)
81138790:	10800317 	ldw	r2,12(r2)
81138794:	10800104 	addi	r2,r2,4
81138798:	e0fff117 	ldw	r3,-60(fp)
8113879c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
811387a0:	e0bffd17 	ldw	r2,-12(fp)
811387a4:	10800317 	ldw	r2,12(r2)
811387a8:	e0fffd17 	ldw	r3,-12(fp)
811387ac:	18c00317 	ldw	r3,12(r3)
811387b0:	18c00037 	ldwio	r3,0(r3)
811387b4:	10c00035 	stwio	r3,0(r2)
811387b8:	e0bff217 	ldw	r2,-56(fp)
811387bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811387c0:	e0bffb17 	ldw	r2,-20(fp)
811387c4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811387c8:	e0bffe17 	ldw	r2,-8(fp)
811387cc:	10001e26 	beq	r2,zero,81138848 <alt_msgdma_descriptor_async_transfer+0x194>
811387d0:	e0bfff17 	ldw	r2,-4(fp)
811387d4:	10001c1e 	bne	r2,zero,81138848 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811387d8:	00001106 	br	81138820 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811387dc:	01000044 	movi	r4,1
811387e0:	1126f740 	call	81126f74 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811387e4:	e0bff00b 	ldhu	r2,-64(fp)
811387e8:	1084e230 	cmpltui	r2,r2,5000
811387ec:	1000091e 	bne	r2,zero,81138814 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
811387f0:	01204534 	movhi	r4,33044
811387f4:	213a7404 	addi	r4,r4,-5680
811387f8:	113abd80 	call	8113abd8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811387fc:	e0bffd17 	ldw	r2,-12(fp)
81138800:	10801817 	ldw	r2,96(r2)
81138804:	1009883a 	mov	r4,r2
81138808:	112f0480 	call	8112f048 <OSSemPost>
				
                return -ETIME;
8113880c:	00bff084 	movi	r2,-62
81138810:	00007306 	br	811389e0 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81138814:	e0bff00b 	ldhu	r2,-64(fp)
81138818:	10800044 	addi	r2,r2,1
8113881c:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138820:	e0bffd17 	ldw	r2,-12(fp)
81138824:	10c00317 	ldw	r3,12(r2)
81138828:	e0bffd17 	ldw	r2,-12(fp)
8113882c:	10800417 	ldw	r2,16(r2)
81138830:	e1bffe17 	ldw	r6,-8(fp)
81138834:	100b883a 	mov	r5,r2
81138838:	1809883a 	mov	r4,r3
8113883c:	11381680 	call	81138168 <alt_msgdma_write_standard_descriptor>
81138840:	103fe61e 	bne	r2,zero,811387dc <__reset+0xfb1187dc>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81138844:	00002706 	br	811388e4 <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138848:	e0bffe17 	ldw	r2,-8(fp)
8113884c:	10001f1e 	bne	r2,zero,811388cc <alt_msgdma_descriptor_async_transfer+0x218>
81138850:	e0bfff17 	ldw	r2,-4(fp)
81138854:	10001d26 	beq	r2,zero,811388cc <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
81138858:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113885c:	00001106 	br	811388a4 <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81138860:	01000044 	movi	r4,1
81138864:	1126f740 	call	81126f74 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138868:	e0bff00b 	ldhu	r2,-64(fp)
8113886c:	1084e230 	cmpltui	r2,r2,5000
81138870:	1000091e 	bne	r2,zero,81138898 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81138874:	01204534 	movhi	r4,33044
81138878:	213a8a04 	addi	r4,r4,-5592
8113887c:	113abd80 	call	8113abd8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138880:	e0bffd17 	ldw	r2,-12(fp)
81138884:	10801817 	ldw	r2,96(r2)
81138888:	1009883a 	mov	r4,r2
8113888c:	112f0480 	call	8112f048 <OSSemPost>
				
                return -ETIME;
81138890:	00bff084 	movi	r2,-62
81138894:	00005206 	br	811389e0 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81138898:	e0bff00b 	ldhu	r2,-64(fp)
8113889c:	10800044 	addi	r2,r2,1
811388a0:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811388a4:	e0bffd17 	ldw	r2,-12(fp)
811388a8:	10c00317 	ldw	r3,12(r2)
811388ac:	e0bffd17 	ldw	r2,-12(fp)
811388b0:	10800417 	ldw	r2,16(r2)
811388b4:	e1bfff17 	ldw	r6,-4(fp)
811388b8:	100b883a 	mov	r5,r2
811388bc:	1809883a 	mov	r4,r3
811388c0:	11382040 	call	81138204 <alt_msgdma_write_extended_descriptor>
811388c4:	103fe61e 	bne	r2,zero,81138860 <__reset+0xfb118860>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811388c8:	00000606 	br	811388e4 <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811388cc:	e0bffd17 	ldw	r2,-12(fp)
811388d0:	10801817 	ldw	r2,96(r2)
811388d4:	1009883a 	mov	r4,r2
811388d8:	112f0480 	call	8112f048 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
811388dc:	00bfffc4 	movi	r2,-1
811388e0:	00003f06 	br	811389e0 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
811388e4:	e0bffd17 	ldw	r2,-12(fp)
811388e8:	10800b17 	ldw	r2,44(r2)
811388ec:	10001c26 	beq	r2,zero,81138960 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
811388f0:	e0bffd17 	ldw	r2,-12(fp)
811388f4:	10c00d17 	ldw	r3,52(r2)
811388f8:	e0bff117 	ldw	r2,-60(fp)
811388fc:	1884b03a 	or	r2,r3,r2
81138900:	10800514 	ori	r2,r2,20
81138904:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81138908:	e0fff117 	ldw	r3,-60(fp)
8113890c:	00bff7c4 	movi	r2,-33
81138910:	1884703a 	and	r2,r3,r2
81138914:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138918:	0005303a 	rdctl	r2,status
8113891c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138920:	e0fff917 	ldw	r3,-28(fp)
81138924:	00bfff84 	movi	r2,-2
81138928:	1884703a 	and	r2,r3,r2
8113892c:	1001703a 	wrctl	status,r2
  
  return context;
81138930:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81138934:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138938:	e0bffd17 	ldw	r2,-12(fp)
8113893c:	10800317 	ldw	r2,12(r2)
81138940:	10800104 	addi	r2,r2,4
81138944:	e0fff117 	ldw	r3,-60(fp)
81138948:	10c00035 	stwio	r3,0(r2)
8113894c:	e0bff217 	ldw	r2,-56(fp)
81138950:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138954:	e0bff517 	ldw	r2,-44(fp)
81138958:	1001703a 	wrctl	status,r2
8113895c:	00001b06 	br	811389cc <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81138960:	e0bffd17 	ldw	r2,-12(fp)
81138964:	10c00d17 	ldw	r3,52(r2)
81138968:	e0bff117 	ldw	r2,-60(fp)
8113896c:	1884b03a 	or	r2,r3,r2
81138970:	10800114 	ori	r2,r2,4
81138974:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81138978:	e0fff117 	ldw	r3,-60(fp)
8113897c:	00bff3c4 	movi	r2,-49
81138980:	1884703a 	and	r2,r3,r2
81138984:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138988:	0005303a 	rdctl	r2,status
8113898c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138990:	e0fffa17 	ldw	r3,-24(fp)
81138994:	00bfff84 	movi	r2,-2
81138998:	1884703a 	and	r2,r3,r2
8113899c:	1001703a 	wrctl	status,r2
  
  return context;
811389a0:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
811389a4:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811389a8:	e0bffd17 	ldw	r2,-12(fp)
811389ac:	10800317 	ldw	r2,12(r2)
811389b0:	10800104 	addi	r2,r2,4
811389b4:	e0fff117 	ldw	r3,-60(fp)
811389b8:	10c00035 	stwio	r3,0(r2)
811389bc:	e0bff217 	ldw	r2,-56(fp)
811389c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811389c4:	e0bff817 	ldw	r2,-32(fp)
811389c8:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
811389cc:	e0bffd17 	ldw	r2,-12(fp)
811389d0:	10801817 	ldw	r2,96(r2)
811389d4:	1009883a 	mov	r4,r2
811389d8:	112f0480 	call	8112f048 <OSSemPost>
    
    return 0;
811389dc:	0005883a 	mov	r2,zero
}
811389e0:	e037883a 	mov	sp,fp
811389e4:	dfc00117 	ldw	ra,4(sp)
811389e8:	df000017 	ldw	fp,0(sp)
811389ec:	dec00204 	addi	sp,sp,8
811389f0:	f800283a 	ret

811389f4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
811389f4:	deffee04 	addi	sp,sp,-72
811389f8:	de00012e 	bgeu	sp,et,81138a00 <alt_msgdma_descriptor_sync_transfer+0xc>
811389fc:	003b68fa 	trap	3
81138a00:	dfc01115 	stw	ra,68(sp)
81138a04:	df001015 	stw	fp,64(sp)
81138a08:	df001004 	addi	fp,sp,64
81138a0c:	e13ffd15 	stw	r4,-12(fp)
81138a10:	e17ffe15 	stw	r5,-8(fp)
81138a14:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81138a18:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81138a1c:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81138a20:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
81138a24:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138a28:	e0bffd17 	ldw	r2,-12(fp)
81138a2c:	10800317 	ldw	r2,12(r2)
81138a30:	10800204 	addi	r2,r2,8
81138a34:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81138a38:	10bfffcc 	andi	r2,r2,65535
81138a3c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138a40:	e0bffd17 	ldw	r2,-12(fp)
81138a44:	10800317 	ldw	r2,12(r2)
81138a48:	10800204 	addi	r2,r2,8
81138a4c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81138a50:	1004d43a 	srli	r2,r2,16
81138a54:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81138a58:	00807804 	movi	r2,480
81138a5c:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138a60:	00001906 	br	81138ac8 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81138a64:	01000044 	movi	r4,1
81138a68:	1126f740 	call	81126f74 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138a6c:	e0bff10b 	ldhu	r2,-60(fp)
81138a70:	1084e230 	cmpltui	r2,r2,5000
81138a74:	1000051e 	bne	r2,zero,81138a8c <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81138a78:	01204534 	movhi	r4,33044
81138a7c:	213aa004 	addi	r4,r4,-5504
81138a80:	113abd80 	call	8113abd8 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81138a84:	00bff084 	movi	r2,-62
81138a88:	0000d706 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81138a8c:	e0bff10b 	ldhu	r2,-60(fp)
81138a90:	10800044 	addi	r2,r2,1
81138a94:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138a98:	e0bffd17 	ldw	r2,-12(fp)
81138a9c:	10800317 	ldw	r2,12(r2)
81138aa0:	10800204 	addi	r2,r2,8
81138aa4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81138aa8:	10bfffcc 	andi	r2,r2,65535
81138aac:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81138ab0:	e0bffd17 	ldw	r2,-12(fp)
81138ab4:	10800317 	ldw	r2,12(r2)
81138ab8:	10800204 	addi	r2,r2,8
81138abc:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81138ac0:	1004d43a 	srli	r2,r2,16
81138ac4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138ac8:	e0bffd17 	ldw	r2,-12(fp)
81138acc:	10800917 	ldw	r2,36(r2)
81138ad0:	e0fff317 	ldw	r3,-52(fp)
81138ad4:	18bfe32e 	bgeu	r3,r2,81138a64 <__reset+0xfb118a64>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81138ad8:	e0bffd17 	ldw	r2,-12(fp)
81138adc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81138ae0:	e0fff217 	ldw	r3,-56(fp)
81138ae4:	18bfdf2e 	bgeu	r3,r2,81138a64 <__reset+0xfb118a64>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81138ae8:	e0bffd17 	ldw	r2,-12(fp)
81138aec:	10801817 	ldw	r2,96(r2)
81138af0:	e0bff815 	stw	r2,-32(fp)
81138af4:	e03ffc0d 	sth	zero,-16(fp)
81138af8:	e0bffc0b 	ldhu	r2,-16(fp)
81138afc:	e0fffc84 	addi	r3,fp,-14
81138b00:	180d883a 	mov	r6,r3
81138b04:	100b883a 	mov	r5,r2
81138b08:	e13ff817 	ldw	r4,-32(fp)
81138b0c:	112ecc00 	call	8112ecc0 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138b10:	0005303a 	rdctl	r2,status
81138b14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138b18:	e0fffb17 	ldw	r3,-20(fp)
81138b1c:	00bfff84 	movi	r2,-2
81138b20:	1884703a 	and	r2,r3,r2
81138b24:	1001703a 	wrctl	status,r2
  
  return context;
81138b28:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81138b2c:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81138b30:	e0bffd17 	ldw	r2,-12(fp)
81138b34:	10800317 	ldw	r2,12(r2)
81138b38:	10800104 	addi	r2,r2,4
81138b3c:	00c00804 	movi	r3,32
81138b40:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81138b44:	e0bffd17 	ldw	r2,-12(fp)
81138b48:	10800317 	ldw	r2,12(r2)
81138b4c:	e0fffd17 	ldw	r3,-12(fp)
81138b50:	18c00317 	ldw	r3,12(r3)
81138b54:	18c00037 	ldwio	r3,0(r3)
81138b58:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81138b5c:	e0bffe17 	ldw	r2,-8(fp)
81138b60:	10001f26 	beq	r2,zero,81138be0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
81138b64:	e0bfff17 	ldw	r2,-4(fp)
81138b68:	10001d1e 	bne	r2,zero,81138be0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
81138b6c:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138b70:	00001106 	br	81138bb8 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81138b74:	01000044 	movi	r4,1
81138b78:	1126f740 	call	81126f74 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138b7c:	e0bff10b 	ldhu	r2,-60(fp)
81138b80:	1084e230 	cmpltui	r2,r2,5000
81138b84:	1000091e 	bne	r2,zero,81138bac <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
81138b88:	01204534 	movhi	r4,33044
81138b8c:	213ab404 	addi	r4,r4,-5424
81138b90:	113abd80 	call	8113abd8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138b94:	e0bffd17 	ldw	r2,-12(fp)
81138b98:	10801817 	ldw	r2,96(r2)
81138b9c:	1009883a 	mov	r4,r2
81138ba0:	112f0480 	call	8112f048 <OSSemPost>
				
                return -ETIME;
81138ba4:	00bff084 	movi	r2,-62
81138ba8:	00008f06 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
81138bac:	e0bff10b 	ldhu	r2,-60(fp)
81138bb0:	10800044 	addi	r2,r2,1
81138bb4:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81138bb8:	e0bffd17 	ldw	r2,-12(fp)
81138bbc:	10c00317 	ldw	r3,12(r2)
81138bc0:	e0bffd17 	ldw	r2,-12(fp)
81138bc4:	10800417 	ldw	r2,16(r2)
81138bc8:	e1bffe17 	ldw	r6,-8(fp)
81138bcc:	100b883a 	mov	r5,r2
81138bd0:	1809883a 	mov	r4,r3
81138bd4:	11381680 	call	81138168 <alt_msgdma_write_standard_descriptor>
81138bd8:	103fe61e 	bne	r2,zero,81138b74 <__reset+0xfb118b74>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81138bdc:	00002706 	br	81138c7c <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138be0:	e0bffe17 	ldw	r2,-8(fp)
81138be4:	10001f1e 	bne	r2,zero,81138c64 <alt_msgdma_descriptor_sync_transfer+0x270>
81138be8:	e0bfff17 	ldw	r2,-4(fp)
81138bec:	10001d26 	beq	r2,zero,81138c64 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
81138bf0:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138bf4:	00001106 	br	81138c3c <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81138bf8:	01000044 	movi	r4,1
81138bfc:	1126f740 	call	81126f74 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138c00:	e0bff10b 	ldhu	r2,-60(fp)
81138c04:	1084e230 	cmpltui	r2,r2,5000
81138c08:	1000091e 	bne	r2,zero,81138c30 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
81138c0c:	01204534 	movhi	r4,33044
81138c10:	213ac504 	addi	r4,r4,-5356
81138c14:	113abd80 	call	8113abd8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81138c18:	e0bffd17 	ldw	r2,-12(fp)
81138c1c:	10801817 	ldw	r2,96(r2)
81138c20:	1009883a 	mov	r4,r2
81138c24:	112f0480 	call	8112f048 <OSSemPost>
				
                return -ETIME;
81138c28:	00bff084 	movi	r2,-62
81138c2c:	00006e06 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
81138c30:	e0bff10b 	ldhu	r2,-60(fp)
81138c34:	10800044 	addi	r2,r2,1
81138c38:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81138c3c:	e0bffd17 	ldw	r2,-12(fp)
81138c40:	10c00317 	ldw	r3,12(r2)
81138c44:	e0bffd17 	ldw	r2,-12(fp)
81138c48:	10800417 	ldw	r2,16(r2)
81138c4c:	e1bfff17 	ldw	r6,-4(fp)
81138c50:	100b883a 	mov	r5,r2
81138c54:	1809883a 	mov	r4,r3
81138c58:	11382040 	call	81138204 <alt_msgdma_write_extended_descriptor>
81138c5c:	103fe61e 	bne	r2,zero,81138bf8 <__reset+0xfb118bf8>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81138c60:	00000606 	br	81138c7c <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81138c64:	e0bffd17 	ldw	r2,-12(fp)
81138c68:	10801817 	ldw	r2,96(r2)
81138c6c:	1009883a 	mov	r4,r2
81138c70:	112f0480 	call	8112f048 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81138c74:	00bfffc4 	movi	r2,-1
81138c78:	00005b06 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81138c7c:	e0bffd17 	ldw	r2,-12(fp)
81138c80:	10800317 	ldw	r2,12(r2)
81138c84:	10800104 	addi	r2,r2,4
81138c88:	e0fffd17 	ldw	r3,-12(fp)
81138c8c:	19000d17 	ldw	r4,52(r3)
81138c90:	00fff2c4 	movi	r3,-53
81138c94:	20c6703a 	and	r3,r4,r3
81138c98:	18c00114 	ori	r3,r3,4
81138c9c:	10c00035 	stwio	r3,0(r2)
81138ca0:	e0bff517 	ldw	r2,-44(fp)
81138ca4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138ca8:	e0bff717 	ldw	r2,-36(fp)
81138cac:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81138cb0:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81138cb4:	e0bffd17 	ldw	r2,-12(fp)
81138cb8:	10800317 	ldw	r2,12(r2)
81138cbc:	10800037 	ldwio	r2,0(r2)
81138cc0:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81138cc4:	00001506 	br	81138d1c <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
81138cc8:	01000044 	movi	r4,1
81138ccc:	1126f740 	call	81126f74 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81138cd0:	e0bff10b 	ldhu	r2,-60(fp)
81138cd4:	1084e230 	cmpltui	r2,r2,5000
81138cd8:	1000091e 	bne	r2,zero,81138d00 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81138cdc:	01204534 	movhi	r4,33044
81138ce0:	213ad604 	addi	r4,r4,-5288
81138ce4:	113abd80 	call	8113abd8 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
81138ce8:	e0bffd17 	ldw	r2,-12(fp)
81138cec:	10801817 	ldw	r2,96(r2)
81138cf0:	1009883a 	mov	r4,r2
81138cf4:	112f0480 	call	8112f048 <OSSemPost>
			
            return -ETIME;
81138cf8:	00bff084 	movi	r2,-62
81138cfc:	00003a06 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
81138d00:	e0bff10b 	ldhu	r2,-60(fp)
81138d04:	10800044 	addi	r2,r2,1
81138d08:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81138d0c:	e0bffd17 	ldw	r2,-12(fp)
81138d10:	10800317 	ldw	r2,12(r2)
81138d14:	10800037 	ldwio	r2,0(r2)
81138d18:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81138d1c:	e0fff017 	ldw	r3,-64(fp)
81138d20:	e0bff617 	ldw	r2,-40(fp)
81138d24:	1884703a 	and	r2,r3,r2
81138d28:	1000031e 	bne	r2,zero,81138d38 <alt_msgdma_descriptor_sync_transfer+0x344>
81138d2c:	e0bff017 	ldw	r2,-64(fp)
81138d30:	1080004c 	andi	r2,r2,1
81138d34:	103fe41e 	bne	r2,zero,81138cc8 <__reset+0xfb118cc8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81138d38:	e0fff017 	ldw	r3,-64(fp)
81138d3c:	e0bff617 	ldw	r2,-40(fp)
81138d40:	1884703a 	and	r2,r3,r2
81138d44:	10000626 	beq	r2,zero,81138d60 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81138d48:	e0bffd17 	ldw	r2,-12(fp)
81138d4c:	10801817 	ldw	r2,96(r2)
81138d50:	1009883a 	mov	r4,r2
81138d54:	112f0480 	call	8112f048 <OSSemPost>
		
        return error;
81138d58:	e0bff617 	ldw	r2,-40(fp)
81138d5c:	00002206 	br	81138de8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81138d60:	e0bffd17 	ldw	r2,-12(fp)
81138d64:	10800317 	ldw	r2,12(r2)
81138d68:	10800104 	addi	r2,r2,4
81138d6c:	10800037 	ldwio	r2,0(r2)
81138d70:	10800814 	ori	r2,r2,32
81138d74:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138d78:	0005303a 	rdctl	r2,status
81138d7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138d80:	e0fffa17 	ldw	r3,-24(fp)
81138d84:	00bfff84 	movi	r2,-2
81138d88:	1884703a 	and	r2,r3,r2
81138d8c:	1001703a 	wrctl	status,r2
  
  return context;
81138d90:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81138d94:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81138d98:	e0bffd17 	ldw	r2,-12(fp)
81138d9c:	10800317 	ldw	r2,12(r2)
81138da0:	10800104 	addi	r2,r2,4
81138da4:	e0fff417 	ldw	r3,-48(fp)
81138da8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81138dac:	e0bffd17 	ldw	r2,-12(fp)
81138db0:	10800317 	ldw	r2,12(r2)
81138db4:	e0fffd17 	ldw	r3,-12(fp)
81138db8:	18c00317 	ldw	r3,12(r3)
81138dbc:	18c00037 	ldwio	r3,0(r3)
81138dc0:	10c00035 	stwio	r3,0(r2)
81138dc4:	e0bff517 	ldw	r2,-44(fp)
81138dc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138dcc:	e0bff917 	ldw	r2,-28(fp)
81138dd0:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81138dd4:	e0bffd17 	ldw	r2,-12(fp)
81138dd8:	10801817 	ldw	r2,96(r2)
81138ddc:	1009883a 	mov	r4,r2
81138de0:	112f0480 	call	8112f048 <OSSemPost>
    
    return 0;
81138de4:	0005883a 	mov	r2,zero

}
81138de8:	e037883a 	mov	sp,fp
81138dec:	dfc00117 	ldw	ra,4(sp)
81138df0:	df000017 	ldw	fp,0(sp)
81138df4:	dec00204 	addi	sp,sp,8
81138df8:	f800283a 	ret

81138dfc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81138dfc:	defff804 	addi	sp,sp,-32
81138e00:	de00012e 	bgeu	sp,et,81138e08 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
81138e04:	003b68fa 	trap	3
81138e08:	dfc00715 	stw	ra,28(sp)
81138e0c:	df000615 	stw	fp,24(sp)
81138e10:	df000604 	addi	fp,sp,24
81138e14:	e13ffc15 	stw	r4,-16(fp)
81138e18:	e17ffd15 	stw	r5,-12(fp)
81138e1c:	e1bffe15 	stw	r6,-8(fp)
81138e20:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81138e24:	e0800217 	ldw	r2,8(fp)
81138e28:	d8800115 	stw	r2,4(sp)
81138e2c:	e0bfff17 	ldw	r2,-4(fp)
81138e30:	d8800015 	stw	r2,0(sp)
81138e34:	e1fffe17 	ldw	r7,-8(fp)
81138e38:	000d883a 	mov	r6,zero
81138e3c:	e17ffd17 	ldw	r5,-12(fp)
81138e40:	e13ffc17 	ldw	r4,-16(fp)
81138e44:	11384c40 	call	811384c4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81138e48:	e037883a 	mov	sp,fp
81138e4c:	dfc00117 	ldw	ra,4(sp)
81138e50:	df000017 	ldw	fp,0(sp)
81138e54:	dec00204 	addi	sp,sp,8
81138e58:	f800283a 	ret

81138e5c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81138e5c:	defff804 	addi	sp,sp,-32
81138e60:	de00012e 	bgeu	sp,et,81138e68 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
81138e64:	003b68fa 	trap	3
81138e68:	dfc00715 	stw	ra,28(sp)
81138e6c:	df000615 	stw	fp,24(sp)
81138e70:	df000604 	addi	fp,sp,24
81138e74:	e13ffc15 	stw	r4,-16(fp)
81138e78:	e17ffd15 	stw	r5,-12(fp)
81138e7c:	e1bffe15 	stw	r6,-8(fp)
81138e80:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81138e84:	e0800217 	ldw	r2,8(fp)
81138e88:	d8800115 	stw	r2,4(sp)
81138e8c:	e0bfff17 	ldw	r2,-4(fp)
81138e90:	d8800015 	stw	r2,0(sp)
81138e94:	000f883a 	mov	r7,zero
81138e98:	e1bffe17 	ldw	r6,-8(fp)
81138e9c:	e17ffd17 	ldw	r5,-12(fp)
81138ea0:	e13ffc17 	ldw	r4,-16(fp)
81138ea4:	11384c40 	call	811384c4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81138ea8:	e037883a 	mov	sp,fp
81138eac:	dfc00117 	ldw	ra,4(sp)
81138eb0:	df000017 	ldw	fp,0(sp)
81138eb4:	dec00204 	addi	sp,sp,8
81138eb8:	f800283a 	ret

81138ebc <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81138ebc:	defff804 	addi	sp,sp,-32
81138ec0:	de00012e 	bgeu	sp,et,81138ec8 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
81138ec4:	003b68fa 	trap	3
81138ec8:	dfc00715 	stw	ra,28(sp)
81138ecc:	df000615 	stw	fp,24(sp)
81138ed0:	df000604 	addi	fp,sp,24
81138ed4:	e13ffc15 	stw	r4,-16(fp)
81138ed8:	e17ffd15 	stw	r5,-12(fp)
81138edc:	e1bffe15 	stw	r6,-8(fp)
81138ee0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81138ee4:	e0800317 	ldw	r2,12(fp)
81138ee8:	d8800115 	stw	r2,4(sp)
81138eec:	e0800217 	ldw	r2,8(fp)
81138ef0:	d8800015 	stw	r2,0(sp)
81138ef4:	e1ffff17 	ldw	r7,-4(fp)
81138ef8:	e1bffe17 	ldw	r6,-8(fp)
81138efc:	e17ffd17 	ldw	r5,-12(fp)
81138f00:	e13ffc17 	ldw	r4,-16(fp)
81138f04:	11384c40 	call	811384c4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81138f08:	e037883a 	mov	sp,fp
81138f0c:	dfc00117 	ldw	ra,4(sp)
81138f10:	df000017 	ldw	fp,0(sp)
81138f14:	dec00204 	addi	sp,sp,8
81138f18:	f800283a 	ret

81138f1c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81138f1c:	defff004 	addi	sp,sp,-64
81138f20:	de00012e 	bgeu	sp,et,81138f28 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
81138f24:	003b68fa 	trap	3
81138f28:	dfc00f15 	stw	ra,60(sp)
81138f2c:	df000e15 	stw	fp,56(sp)
81138f30:	df000e04 	addi	fp,sp,56
81138f34:	e13ff915 	stw	r4,-28(fp)
81138f38:	e17ffa15 	stw	r5,-24(fp)
81138f3c:	e1bffb15 	stw	r6,-20(fp)
81138f40:	e1fffc15 	stw	r7,-16(fp)
81138f44:	e1000317 	ldw	r4,12(fp)
81138f48:	e0c00417 	ldw	r3,16(fp)
81138f4c:	e0800517 	ldw	r2,20(fp)
81138f50:	e13ffd0d 	sth	r4,-12(fp)
81138f54:	e0fffe05 	stb	r3,-8(fp)
81138f58:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81138f5c:	e0bffd0b 	ldhu	r2,-12(fp)
81138f60:	e0fffe03 	ldbu	r3,-8(fp)
81138f64:	e13fff0b 	ldhu	r4,-4(fp)
81138f68:	d9000615 	stw	r4,24(sp)
81138f6c:	d8000515 	stw	zero,20(sp)
81138f70:	d8c00415 	stw	r3,16(sp)
81138f74:	d8000315 	stw	zero,12(sp)
81138f78:	d8800215 	stw	r2,8(sp)
81138f7c:	e0800217 	ldw	r2,8(fp)
81138f80:	d8800115 	stw	r2,4(sp)
81138f84:	e0bffc17 	ldw	r2,-16(fp)
81138f88:	d8800015 	stw	r2,0(sp)
81138f8c:	e1fffb17 	ldw	r7,-20(fp)
81138f90:	000d883a 	mov	r6,zero
81138f94:	e17ffa17 	ldw	r5,-24(fp)
81138f98:	e13ff917 	ldw	r4,-28(fp)
81138f9c:	11385580 	call	81138558 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81138fa0:	e037883a 	mov	sp,fp
81138fa4:	dfc00117 	ldw	ra,4(sp)
81138fa8:	df000017 	ldw	fp,0(sp)
81138fac:	dec00204 	addi	sp,sp,8
81138fb0:	f800283a 	ret

81138fb4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81138fb4:	defff004 	addi	sp,sp,-64
81138fb8:	de00012e 	bgeu	sp,et,81138fc0 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
81138fbc:	003b68fa 	trap	3
81138fc0:	dfc00f15 	stw	ra,60(sp)
81138fc4:	df000e15 	stw	fp,56(sp)
81138fc8:	df000e04 	addi	fp,sp,56
81138fcc:	e13ff915 	stw	r4,-28(fp)
81138fd0:	e17ffa15 	stw	r5,-24(fp)
81138fd4:	e1bffb15 	stw	r6,-20(fp)
81138fd8:	e1fffc15 	stw	r7,-16(fp)
81138fdc:	e1000317 	ldw	r4,12(fp)
81138fe0:	e0c00417 	ldw	r3,16(fp)
81138fe4:	e0800517 	ldw	r2,20(fp)
81138fe8:	e13ffd0d 	sth	r4,-12(fp)
81138fec:	e0fffe05 	stb	r3,-8(fp)
81138ff0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81138ff4:	e0bffd0b 	ldhu	r2,-12(fp)
81138ff8:	e0fffe03 	ldbu	r3,-8(fp)
81138ffc:	e13fff0b 	ldhu	r4,-4(fp)
81139000:	d8000615 	stw	zero,24(sp)
81139004:	d9000515 	stw	r4,20(sp)
81139008:	d8000415 	stw	zero,16(sp)
8113900c:	d8c00315 	stw	r3,12(sp)
81139010:	d8800215 	stw	r2,8(sp)
81139014:	e0800217 	ldw	r2,8(fp)
81139018:	d8800115 	stw	r2,4(sp)
8113901c:	e0bffc17 	ldw	r2,-16(fp)
81139020:	d8800015 	stw	r2,0(sp)
81139024:	000f883a 	mov	r7,zero
81139028:	e1bffb17 	ldw	r6,-20(fp)
8113902c:	e17ffa17 	ldw	r5,-24(fp)
81139030:	e13ff917 	ldw	r4,-28(fp)
81139034:	11385580 	call	81138558 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81139038:	e037883a 	mov	sp,fp
8113903c:	dfc00117 	ldw	ra,4(sp)
81139040:	df000017 	ldw	fp,0(sp)
81139044:	dec00204 	addi	sp,sp,8
81139048:	f800283a 	ret

8113904c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113904c:	deffee04 	addi	sp,sp,-72
81139050:	de00012e 	bgeu	sp,et,81139058 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
81139054:	003b68fa 	trap	3
81139058:	dfc01115 	stw	ra,68(sp)
8113905c:	df001015 	stw	fp,64(sp)
81139060:	df001004 	addi	fp,sp,64
81139064:	e13ff715 	stw	r4,-36(fp)
81139068:	e17ff815 	stw	r5,-32(fp)
8113906c:	e1bff915 	stw	r6,-28(fp)
81139070:	e1fffa15 	stw	r7,-24(fp)
81139074:	e1800417 	ldw	r6,16(fp)
81139078:	e1400517 	ldw	r5,20(fp)
8113907c:	e1000617 	ldw	r4,24(fp)
81139080:	e0c00717 	ldw	r3,28(fp)
81139084:	e0800817 	ldw	r2,32(fp)
81139088:	e1bffb0d 	sth	r6,-20(fp)
8113908c:	e17ffc05 	stb	r5,-16(fp)
81139090:	e13ffd05 	stb	r4,-12(fp)
81139094:	e0fffe0d 	sth	r3,-8(fp)
81139098:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113909c:	e0bffb0b 	ldhu	r2,-20(fp)
811390a0:	e0fffc03 	ldbu	r3,-16(fp)
811390a4:	e13ffd03 	ldbu	r4,-12(fp)
811390a8:	e17ffe0b 	ldhu	r5,-8(fp)
811390ac:	e1bfff0b 	ldhu	r6,-4(fp)
811390b0:	d9800615 	stw	r6,24(sp)
811390b4:	d9400515 	stw	r5,20(sp)
811390b8:	d9000415 	stw	r4,16(sp)
811390bc:	d8c00315 	stw	r3,12(sp)
811390c0:	d8800215 	stw	r2,8(sp)
811390c4:	e0800317 	ldw	r2,12(fp)
811390c8:	d8800115 	stw	r2,4(sp)
811390cc:	e0800217 	ldw	r2,8(fp)
811390d0:	d8800015 	stw	r2,0(sp)
811390d4:	e1fffa17 	ldw	r7,-24(fp)
811390d8:	e1bff917 	ldw	r6,-28(fp)
811390dc:	e17ff817 	ldw	r5,-32(fp)
811390e0:	e13ff717 	ldw	r4,-36(fp)
811390e4:	11385580 	call	81138558 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
811390e8:	e037883a 	mov	sp,fp
811390ec:	dfc00117 	ldw	ra,4(sp)
811390f0:	df000017 	ldw	fp,0(sp)
811390f4:	dec00204 	addi	sp,sp,8
811390f8:	f800283a 	ret

811390fc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811390fc:	defffb04 	addi	sp,sp,-20
81139100:	de00012e 	bgeu	sp,et,81139108 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
81139104:	003b68fa 	trap	3
81139108:	df000415 	stw	fp,16(sp)
8113910c:	df000404 	addi	fp,sp,16
81139110:	e13ffc15 	stw	r4,-16(fp)
81139114:	e17ffd15 	stw	r5,-12(fp)
81139118:	e1bffe15 	stw	r6,-8(fp)
8113911c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81139120:	e0bffc17 	ldw	r2,-16(fp)
81139124:	10c01217 	ldw	r3,72(r2)
81139128:	e0800117 	ldw	r2,4(fp)
8113912c:	18800436 	bltu	r3,r2,81139140 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
81139130:	e0bffc17 	ldw	r2,-16(fp)
81139134:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81139138:	10803fcc 	andi	r2,r2,255
8113913c:	10000226 	beq	r2,zero,81139148 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81139140:	00bffa84 	movi	r2,-22
81139144:	00001406 	br	81139198 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
81139148:	e0bffd17 	ldw	r2,-12(fp)
8113914c:	e0fffe17 	ldw	r3,-8(fp)
81139150:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81139154:	e0bffd17 	ldw	r2,-12(fp)
81139158:	e0ffff17 	ldw	r3,-4(fp)
8113915c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139160:	e0bffd17 	ldw	r2,-12(fp)
81139164:	e0c00117 	ldw	r3,4(fp)
81139168:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113916c:	e0fffd17 	ldw	r3,-12(fp)
81139170:	e0bffd17 	ldw	r2,-12(fp)
81139174:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81139178:	e0c00217 	ldw	r3,8(fp)
8113917c:	00900034 	movhi	r2,16384
81139180:	10bfffc4 	addi	r2,r2,-1
81139184:	1884703a 	and	r2,r3,r2
81139188:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113918c:	e0bffd17 	ldw	r2,-12(fp)
81139190:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81139194:	0005883a 	mov	r2,zero
}
81139198:	e037883a 	mov	sp,fp
8113919c:	df000017 	ldw	fp,0(sp)
811391a0:	dec00104 	addi	sp,sp,4
811391a4:	f800283a 	ret

811391a8 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811391a8:	defff404 	addi	sp,sp,-48
811391ac:	de00012e 	bgeu	sp,et,811391b4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
811391b0:	003b68fa 	trap	3
811391b4:	df000b15 	stw	fp,44(sp)
811391b8:	df000b04 	addi	fp,sp,44
811391bc:	e13ff715 	stw	r4,-36(fp)
811391c0:	e17ff815 	stw	r5,-32(fp)
811391c4:	e1bff915 	stw	r6,-28(fp)
811391c8:	e1fffa15 	stw	r7,-24(fp)
811391cc:	e1800517 	ldw	r6,20(fp)
811391d0:	e1400617 	ldw	r5,24(fp)
811391d4:	e1000717 	ldw	r4,28(fp)
811391d8:	e0c00817 	ldw	r3,32(fp)
811391dc:	e0800917 	ldw	r2,36(fp)
811391e0:	e1bffb0d 	sth	r6,-20(fp)
811391e4:	e17ffc05 	stb	r5,-16(fp)
811391e8:	e13ffd05 	stb	r4,-12(fp)
811391ec:	e0fffe0d 	sth	r3,-8(fp)
811391f0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811391f4:	e0bff717 	ldw	r2,-36(fp)
811391f8:	10c01217 	ldw	r3,72(r2)
811391fc:	e0800317 	ldw	r2,12(fp)
81139200:	18801936 	bltu	r3,r2,81139268 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81139204:	e13ff717 	ldw	r4,-36(fp)
81139208:	20801317 	ldw	r2,76(r4)
8113920c:	20c01417 	ldw	r3,80(r4)
81139210:	e13ffe0b 	ldhu	r4,-8(fp)
81139214:	213fffcc 	andi	r4,r4,65535
81139218:	2015883a 	mov	r10,r4
8113921c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81139220:	1ac01136 	bltu	r3,r11,81139268 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81139224:	58c0011e 	bne	r11,r3,8113922c <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
81139228:	12800f36 	bltu	r2,r10,81139268 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113922c:	e13ff717 	ldw	r4,-36(fp)
81139230:	20801317 	ldw	r2,76(r4)
81139234:	20c01417 	ldw	r3,80(r4)
81139238:	e13fff0b 	ldhu	r4,-4(fp)
8113923c:	213fffcc 	andi	r4,r4,65535
81139240:	2011883a 	mov	r8,r4
81139244:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81139248:	1a400736 	bltu	r3,r9,81139268 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113924c:	48c0011e 	bne	r9,r3,81139254 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81139250:	12000536 	bltu	r2,r8,81139268 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81139254:	e0bff717 	ldw	r2,-36(fp)
81139258:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113925c:	10803fcc 	andi	r2,r2,255
81139260:	10800060 	cmpeqi	r2,r2,1
81139264:	1000021e 	bne	r2,zero,81139270 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81139268:	00bffa84 	movi	r2,-22
8113926c:	00003106 	br	81139334 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
81139270:	e0bff817 	ldw	r2,-32(fp)
81139274:	e0fff917 	ldw	r3,-28(fp)
81139278:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113927c:	e0bff817 	ldw	r2,-32(fp)
81139280:	e0fffa17 	ldw	r3,-24(fp)
81139284:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81139288:	e0bff817 	ldw	r2,-32(fp)
8113928c:	e0c00117 	ldw	r3,4(fp)
81139290:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81139294:	e0bff817 	ldw	r2,-32(fp)
81139298:	e0c00217 	ldw	r3,8(fp)
8113929c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811392a0:	e0bff817 	ldw	r2,-32(fp)
811392a4:	e0c00317 	ldw	r3,12(fp)
811392a8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811392ac:	e0bff817 	ldw	r2,-32(fp)
811392b0:	e0fffb0b 	ldhu	r3,-20(fp)
811392b4:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
811392b8:	e0bff817 	ldw	r2,-32(fp)
811392bc:	e0fffc03 	ldbu	r3,-16(fp)
811392c0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
811392c4:	e0bff817 	ldw	r2,-32(fp)
811392c8:	e0fffd03 	ldbu	r3,-12(fp)
811392cc:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
811392d0:	e0bff817 	ldw	r2,-32(fp)
811392d4:	e0fffe0b 	ldhu	r3,-8(fp)
811392d8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
811392dc:	e0bff817 	ldw	r2,-32(fp)
811392e0:	e0ffff0b 	ldhu	r3,-4(fp)
811392e4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
811392e8:	e0bff817 	ldw	r2,-32(fp)
811392ec:	1019883a 	mov	r12,r2
811392f0:	001b883a 	mov	r13,zero
811392f4:	e33ff515 	stw	r12,-44(fp)
811392f8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
811392fc:	e0fff517 	ldw	r3,-44(fp)
81139300:	e0bff817 	ldw	r2,-32(fp)
81139304:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81139308:	e0fff617 	ldw	r3,-40(fp)
8113930c:	e0bff817 	ldw	r2,-32(fp)
81139310:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81139314:	e0c00417 	ldw	r3,16(fp)
81139318:	00900034 	movhi	r2,16384
8113931c:	10bfffc4 	addi	r2,r2,-1
81139320:	1884703a 	and	r2,r3,r2
81139324:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81139328:	e0bff817 	ldw	r2,-32(fp)
8113932c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81139330:	0005883a 	mov	r2,zero
}
81139334:	e037883a 	mov	sp,fp
81139338:	df000017 	ldw	fp,0(sp)
8113933c:	dec00104 	addi	sp,sp,4
81139340:	f800283a 	ret

81139344 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81139344:	defff804 	addi	sp,sp,-32
81139348:	de00012e 	bgeu	sp,et,81139350 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113934c:	003b68fa 	trap	3
81139350:	dfc00715 	stw	ra,28(sp)
81139354:	df000615 	stw	fp,24(sp)
81139358:	df000604 	addi	fp,sp,24
8113935c:	e13ffc15 	stw	r4,-16(fp)
81139360:	e17ffd15 	stw	r5,-12(fp)
81139364:	e1bffe15 	stw	r6,-8(fp)
81139368:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113936c:	e0800317 	ldw	r2,12(fp)
81139370:	d8800115 	stw	r2,4(sp)
81139374:	e0800217 	ldw	r2,8(fp)
81139378:	d8800015 	stw	r2,0(sp)
8113937c:	e1ffff17 	ldw	r7,-4(fp)
81139380:	e1bffe17 	ldw	r6,-8(fp)
81139384:	e17ffd17 	ldw	r5,-12(fp)
81139388:	e13ffc17 	ldw	r4,-16(fp)
8113938c:	11390fc0 	call	811390fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81139390:	e037883a 	mov	sp,fp
81139394:	dfc00117 	ldw	ra,4(sp)
81139398:	df000017 	ldw	fp,0(sp)
8113939c:	dec00204 	addi	sp,sp,8
811393a0:	f800283a 	ret

811393a4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811393a4:	defff804 	addi	sp,sp,-32
811393a8:	de00012e 	bgeu	sp,et,811393b0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
811393ac:	003b68fa 	trap	3
811393b0:	dfc00715 	stw	ra,28(sp)
811393b4:	df000615 	stw	fp,24(sp)
811393b8:	df000604 	addi	fp,sp,24
811393bc:	e13ffc15 	stw	r4,-16(fp)
811393c0:	e17ffd15 	stw	r5,-12(fp)
811393c4:	e1bffe15 	stw	r6,-8(fp)
811393c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811393cc:	e0800217 	ldw	r2,8(fp)
811393d0:	d8800115 	stw	r2,4(sp)
811393d4:	e0bfff17 	ldw	r2,-4(fp)
811393d8:	d8800015 	stw	r2,0(sp)
811393dc:	e1fffe17 	ldw	r7,-8(fp)
811393e0:	000d883a 	mov	r6,zero
811393e4:	e17ffd17 	ldw	r5,-12(fp)
811393e8:	e13ffc17 	ldw	r4,-16(fp)
811393ec:	11390fc0 	call	811390fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
811393f0:	e037883a 	mov	sp,fp
811393f4:	dfc00117 	ldw	ra,4(sp)
811393f8:	df000017 	ldw	fp,0(sp)
811393fc:	dec00204 	addi	sp,sp,8
81139400:	f800283a 	ret

81139404 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81139404:	defff804 	addi	sp,sp,-32
81139408:	de00012e 	bgeu	sp,et,81139410 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
8113940c:	003b68fa 	trap	3
81139410:	dfc00715 	stw	ra,28(sp)
81139414:	df000615 	stw	fp,24(sp)
81139418:	df000604 	addi	fp,sp,24
8113941c:	e13ffc15 	stw	r4,-16(fp)
81139420:	e17ffd15 	stw	r5,-12(fp)
81139424:	e1bffe15 	stw	r6,-8(fp)
81139428:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113942c:	e0800217 	ldw	r2,8(fp)
81139430:	d8800115 	stw	r2,4(sp)
81139434:	e0bfff17 	ldw	r2,-4(fp)
81139438:	d8800015 	stw	r2,0(sp)
8113943c:	000f883a 	mov	r7,zero
81139440:	e1bffe17 	ldw	r6,-8(fp)
81139444:	e17ffd17 	ldw	r5,-12(fp)
81139448:	e13ffc17 	ldw	r4,-16(fp)
8113944c:	11390fc0 	call	811390fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81139450:	e037883a 	mov	sp,fp
81139454:	dfc00117 	ldw	ra,4(sp)
81139458:	df000017 	ldw	fp,0(sp)
8113945c:	dec00204 	addi	sp,sp,8
81139460:	f800283a 	ret

81139464 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81139464:	deffee04 	addi	sp,sp,-72
81139468:	de00012e 	bgeu	sp,et,81139470 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113946c:	003b68fa 	trap	3
81139470:	dfc01115 	stw	ra,68(sp)
81139474:	df001015 	stw	fp,64(sp)
81139478:	df001004 	addi	fp,sp,64
8113947c:	e13ff915 	stw	r4,-28(fp)
81139480:	e17ffa15 	stw	r5,-24(fp)
81139484:	e1bffb15 	stw	r6,-20(fp)
81139488:	e1fffc15 	stw	r7,-16(fp)
8113948c:	e1000417 	ldw	r4,16(fp)
81139490:	e0c00517 	ldw	r3,20(fp)
81139494:	e0800617 	ldw	r2,24(fp)
81139498:	e13ffd0d 	sth	r4,-12(fp)
8113949c:	e0fffe05 	stb	r3,-8(fp)
811394a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
811394a4:	e0bffd0b 	ldhu	r2,-12(fp)
811394a8:	e0fffe03 	ldbu	r3,-8(fp)
811394ac:	e13fff0b 	ldhu	r4,-4(fp)
811394b0:	d9000815 	stw	r4,32(sp)
811394b4:	d8000715 	stw	zero,28(sp)
811394b8:	d8c00615 	stw	r3,24(sp)
811394bc:	d8000515 	stw	zero,20(sp)
811394c0:	d8800415 	stw	r2,16(sp)
811394c4:	e0800317 	ldw	r2,12(fp)
811394c8:	d8800315 	stw	r2,12(sp)
811394cc:	e0800217 	ldw	r2,8(fp)
811394d0:	d8800215 	stw	r2,8(sp)
811394d4:	e0bffc17 	ldw	r2,-16(fp)
811394d8:	d8800115 	stw	r2,4(sp)
811394dc:	e0bffb17 	ldw	r2,-20(fp)
811394e0:	d8800015 	stw	r2,0(sp)
811394e4:	000f883a 	mov	r7,zero
811394e8:	000d883a 	mov	r6,zero
811394ec:	e17ffa17 	ldw	r5,-24(fp)
811394f0:	e13ff917 	ldw	r4,-28(fp)
811394f4:	11391a80 	call	811391a8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
811394f8:	e037883a 	mov	sp,fp
811394fc:	dfc00117 	ldw	ra,4(sp)
81139500:	df000017 	ldw	fp,0(sp)
81139504:	dec00204 	addi	sp,sp,8
81139508:	f800283a 	ret

8113950c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113950c:	deffee04 	addi	sp,sp,-72
81139510:	de00012e 	bgeu	sp,et,81139518 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
81139514:	003b68fa 	trap	3
81139518:	dfc01115 	stw	ra,68(sp)
8113951c:	df001015 	stw	fp,64(sp)
81139520:	df001004 	addi	fp,sp,64
81139524:	e13ff915 	stw	r4,-28(fp)
81139528:	e17ffa15 	stw	r5,-24(fp)
8113952c:	e1bffb15 	stw	r6,-20(fp)
81139530:	e1fffc15 	stw	r7,-16(fp)
81139534:	e1000417 	ldw	r4,16(fp)
81139538:	e0c00517 	ldw	r3,20(fp)
8113953c:	e0800617 	ldw	r2,24(fp)
81139540:	e13ffd0d 	sth	r4,-12(fp)
81139544:	e0fffe05 	stb	r3,-8(fp)
81139548:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113954c:	e0bffd0b 	ldhu	r2,-12(fp)
81139550:	e0fffe03 	ldbu	r3,-8(fp)
81139554:	e13fff0b 	ldhu	r4,-4(fp)
81139558:	d8000815 	stw	zero,32(sp)
8113955c:	d9000715 	stw	r4,28(sp)
81139560:	d8000615 	stw	zero,24(sp)
81139564:	d8c00515 	stw	r3,20(sp)
81139568:	d8800415 	stw	r2,16(sp)
8113956c:	e0800317 	ldw	r2,12(fp)
81139570:	d8800315 	stw	r2,12(sp)
81139574:	e0800217 	ldw	r2,8(fp)
81139578:	d8800215 	stw	r2,8(sp)
8113957c:	d8000115 	stw	zero,4(sp)
81139580:	d8000015 	stw	zero,0(sp)
81139584:	e1fffc17 	ldw	r7,-16(fp)
81139588:	e1bffb17 	ldw	r6,-20(fp)
8113958c:	e17ffa17 	ldw	r5,-24(fp)
81139590:	e13ff917 	ldw	r4,-28(fp)
81139594:	11391a80 	call	811391a8 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81139598:	e037883a 	mov	sp,fp
8113959c:	dfc00117 	ldw	ra,4(sp)
811395a0:	df000017 	ldw	fp,0(sp)
811395a4:	dec00204 	addi	sp,sp,8
811395a8:	f800283a 	ret

811395ac <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811395ac:	deffec04 	addi	sp,sp,-80
811395b0:	de00012e 	bgeu	sp,et,811395b8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
811395b4:	003b68fa 	trap	3
811395b8:	dfc01315 	stw	ra,76(sp)
811395bc:	df001215 	stw	fp,72(sp)
811395c0:	df001204 	addi	fp,sp,72
811395c4:	e13ff715 	stw	r4,-36(fp)
811395c8:	e17ff815 	stw	r5,-32(fp)
811395cc:	e1bff915 	stw	r6,-28(fp)
811395d0:	e1fffa15 	stw	r7,-24(fp)
811395d4:	e1800617 	ldw	r6,24(fp)
811395d8:	e1400717 	ldw	r5,28(fp)
811395dc:	e1000817 	ldw	r4,32(fp)
811395e0:	e0c00917 	ldw	r3,36(fp)
811395e4:	e0800a17 	ldw	r2,40(fp)
811395e8:	e1bffb0d 	sth	r6,-20(fp)
811395ec:	e17ffc05 	stb	r5,-16(fp)
811395f0:	e13ffd05 	stb	r4,-12(fp)
811395f4:	e0fffe0d 	sth	r3,-8(fp)
811395f8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
811395fc:	e0bffb0b 	ldhu	r2,-20(fp)
81139600:	e0fffc03 	ldbu	r3,-16(fp)
81139604:	e13ffd03 	ldbu	r4,-12(fp)
81139608:	e17ffe0b 	ldhu	r5,-8(fp)
8113960c:	e1bfff0b 	ldhu	r6,-4(fp)
81139610:	d9800815 	stw	r6,32(sp)
81139614:	d9400715 	stw	r5,28(sp)
81139618:	d9000615 	stw	r4,24(sp)
8113961c:	d8c00515 	stw	r3,20(sp)
81139620:	d8800415 	stw	r2,16(sp)
81139624:	e0800517 	ldw	r2,20(fp)
81139628:	d8800315 	stw	r2,12(sp)
8113962c:	e0800417 	ldw	r2,16(fp)
81139630:	d8800215 	stw	r2,8(sp)
81139634:	e0800317 	ldw	r2,12(fp)
81139638:	d8800115 	stw	r2,4(sp)
8113963c:	e0800217 	ldw	r2,8(fp)
81139640:	d8800015 	stw	r2,0(sp)
81139644:	e1fffa17 	ldw	r7,-24(fp)
81139648:	e1bff917 	ldw	r6,-28(fp)
8113964c:	e17ff817 	ldw	r5,-32(fp)
81139650:	e13ff717 	ldw	r4,-36(fp)
81139654:	11391a80 	call	811391a8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81139658:	e037883a 	mov	sp,fp
8113965c:	dfc00117 	ldw	ra,4(sp)
81139660:	df000017 	ldw	fp,0(sp)
81139664:	dec00204 	addi	sp,sp,8
81139668:	f800283a 	ret

8113966c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113966c:	defffc04 	addi	sp,sp,-16
81139670:	de00012e 	bgeu	sp,et,81139678 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
81139674:	003b68fa 	trap	3
81139678:	df000315 	stw	fp,12(sp)
8113967c:	df000304 	addi	fp,sp,12
81139680:	e13ffe15 	stw	r4,-8(fp)
81139684:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81139688:	e0bfff17 	ldw	r2,-4(fp)
8113968c:	1000021e 	bne	r2,zero,81139698 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81139690:	00bffa84 	movi	r2,-22
81139694:	00002f06 	br	81139754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81139698:	e0bfff17 	ldw	r2,-4(fp)
8113969c:	10c00317 	ldw	r3,12(r2)
811396a0:	e0bfff17 	ldw	r2,-4(fp)
811396a4:	18800226 	beq	r3,r2,811396b0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811396a8:	00bffa84 	movi	r2,-22
811396ac:	00002906 	br	81139754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
811396b0:	e0bffe17 	ldw	r2,-8(fp)
811396b4:	10800017 	ldw	r2,0(r2)
811396b8:	1000051e 	bne	r2,zero,811396d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
811396bc:	e0bffe17 	ldw	r2,-8(fp)
811396c0:	e0ffff17 	ldw	r3,-4(fp)
811396c4:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
811396c8:	0005883a 	mov	r2,zero
811396cc:	00002106 	br	81139754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
811396d0:	e0bffe17 	ldw	r2,-8(fp)
811396d4:	10c00017 	ldw	r3,0(r2)
811396d8:	e0bfff17 	ldw	r2,-4(fp)
811396dc:	1880021e 	bne	r3,r2,811396e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811396e0:	00bffa84 	movi	r2,-22
811396e4:	00001b06 	br	81139754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811396e8:	e0bffe17 	ldw	r2,-8(fp)
811396ec:	10800017 	ldw	r2,0(r2)
811396f0:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
811396f4:	00000906 	br	8113971c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
811396f8:	e0bffd17 	ldw	r2,-12(fp)
811396fc:	10c00317 	ldw	r3,12(r2)
81139700:	e0bfff17 	ldw	r2,-4(fp)
81139704:	1880021e 	bne	r3,r2,81139710 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81139708:	00bffa84 	movi	r2,-22
8113970c:	00001106 	br	81139754 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81139710:	e0bffd17 	ldw	r2,-12(fp)
81139714:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81139718:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113971c:	e0bffd17 	ldw	r2,-12(fp)
81139720:	10800317 	ldw	r2,12(r2)
81139724:	e0fffe17 	ldw	r3,-8(fp)
81139728:	18c00017 	ldw	r3,0(r3)
8113972c:	10fff21e 	bne	r2,r3,811396f8 <__reset+0xfb1196f8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81139730:	e0ffff17 	ldw	r3,-4(fp)
81139734:	e0bffd17 	ldw	r2,-12(fp)
81139738:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8113973c:	e0bffe17 	ldw	r2,-8(fp)
81139740:	10800017 	ldw	r2,0(r2)
81139744:	1007883a 	mov	r3,r2
81139748:	e0bfff17 	ldw	r2,-4(fp)
8113974c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81139750:	0005883a 	mov	r2,zero
}
81139754:	e037883a 	mov	sp,fp
81139758:	df000017 	ldw	fp,0(sp)
8113975c:	dec00104 	addi	sp,sp,4
81139760:	f800283a 	ret

81139764 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81139764:	defff804 	addi	sp,sp,-32
81139768:	de00012e 	bgeu	sp,et,81139770 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
8113976c:	003b68fa 	trap	3
81139770:	df000715 	stw	fp,28(sp)
81139774:	df000704 	addi	fp,sp,28
81139778:	e13ffe15 	stw	r4,-8(fp)
8113977c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81139780:	e13fff17 	ldw	r4,-4(fp)
81139784:	2000021e 	bne	r4,zero,81139790 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81139788:	00bffa84 	movi	r2,-22
8113978c:	00005906 	br	811398f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81139790:	e13fff17 	ldw	r4,-4(fp)
81139794:	2015883a 	mov	r10,r4
81139798:	0017883a 	mov	r11,zero
8113979c:	e2bffc15 	stw	r10,-16(fp)
811397a0:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811397a4:	e13fff17 	ldw	r4,-4(fp)
811397a8:	21400317 	ldw	r5,12(r4)
811397ac:	e13ffc17 	ldw	r4,-16(fp)
811397b0:	29000626 	beq	r5,r4,811397cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811397b4:	e13fff17 	ldw	r4,-4(fp)
811397b8:	21400b17 	ldw	r5,44(r4)
811397bc:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811397c0:	29000226 	beq	r5,r4,811397cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811397c4:	00bffa84 	movi	r2,-22
811397c8:	00004a06 	br	811398f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
811397cc:	e13ffe17 	ldw	r4,-8(fp)
811397d0:	21000017 	ldw	r4,0(r4)
811397d4:	2000051e 	bne	r4,zero,811397ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
811397d8:	e0bffe17 	ldw	r2,-8(fp)
811397dc:	e0ffff17 	ldw	r3,-4(fp)
811397e0:	10c00015 	stw	r3,0(r2)
		return 0;
811397e4:	0005883a 	mov	r2,zero
811397e8:	00004206 	br	811398f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
811397ec:	e13ffe17 	ldw	r4,-8(fp)
811397f0:	21400017 	ldw	r5,0(r4)
811397f4:	e13fff17 	ldw	r4,-4(fp)
811397f8:	2900021e 	bne	r5,r4,81139804 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811397fc:	00bffa84 	movi	r2,-22
81139800:	00003c06 	br	811398f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81139804:	e13ffe17 	ldw	r4,-8(fp)
81139808:	21000017 	ldw	r4,0(r4)
8113980c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81139810:	e13ffe17 	ldw	r4,-8(fp)
81139814:	21000017 	ldw	r4,0(r4)
81139818:	2011883a 	mov	r8,r4
8113981c:	0013883a 	mov	r9,zero
81139820:	e23ffa15 	stw	r8,-24(fp)
81139824:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81139828:	00001806 	br	8113988c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113982c:	e13fff17 	ldw	r4,-4(fp)
81139830:	200d883a 	mov	r6,r4
81139834:	000f883a 	mov	r7,zero
81139838:	e1bffc15 	stw	r6,-16(fp)
8113983c:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81139840:	e13ff917 	ldw	r4,-28(fp)
81139844:	21400317 	ldw	r5,12(r4)
81139848:	e13ffc17 	ldw	r4,-16(fp)
8113984c:	2900061e 	bne	r5,r4,81139868 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81139850:	e13ff917 	ldw	r4,-28(fp)
81139854:	21400b17 	ldw	r5,44(r4)
81139858:	e13ffd17 	ldw	r4,-12(fp)
8113985c:	2900021e 	bne	r5,r4,81139868 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81139860:	00bffa84 	movi	r2,-22
81139864:	00002306 	br	811398f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81139868:	e13ff917 	ldw	r4,-28(fp)
8113986c:	21000317 	ldw	r4,12(r4)
81139870:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81139874:	e13ff917 	ldw	r4,-28(fp)
81139878:	21000b17 	ldw	r4,44(r4)
8113987c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81139880:	e13ffc17 	ldw	r4,-16(fp)
81139884:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81139888:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113988c:	e13ff917 	ldw	r4,-28(fp)
81139890:	21400317 	ldw	r5,12(r4)
81139894:	e13ffa17 	ldw	r4,-24(fp)
81139898:	29000426 	beq	r5,r4,811398ac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113989c:	e13ff917 	ldw	r4,-28(fp)
811398a0:	21400b17 	ldw	r5,44(r4)
811398a4:	e13ffb17 	ldw	r4,-20(fp)
811398a8:	293fe01e 	bne	r5,r4,8113982c <__reset+0xfb11982c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811398ac:	e13fff17 	ldw	r4,-4(fp)
811398b0:	2005883a 	mov	r2,r4
811398b4:	0007883a 	mov	r3,zero
811398b8:	e0bffc15 	stw	r2,-16(fp)
811398bc:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811398c0:	e0fffc17 	ldw	r3,-16(fp)
811398c4:	e0bff917 	ldw	r2,-28(fp)
811398c8:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811398cc:	e0fffd17 	ldw	r3,-12(fp)
811398d0:	e0bff917 	ldw	r2,-28(fp)
811398d4:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
811398d8:	e0fffa17 	ldw	r3,-24(fp)
811398dc:	e0bfff17 	ldw	r2,-4(fp)
811398e0:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
811398e4:	e0fffb17 	ldw	r3,-20(fp)
811398e8:	e0bfff17 	ldw	r2,-4(fp)
811398ec:	10c00b15 	stw	r3,44(r2)
	return 0;
811398f0:	0005883a 	mov	r2,zero
}
811398f4:	e037883a 	mov	sp,fp
811398f8:	df000017 	ldw	fp,0(sp)
811398fc:	dec00104 	addi	sp,sp,4
81139900:	f800283a 	ret

81139904 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81139904:	defffc04 	addi	sp,sp,-16
81139908:	de00012e 	bgeu	sp,et,81139910 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
8113990c:	003b68fa 	trap	3
81139910:	df000315 	stw	fp,12(sp)
81139914:	df000304 	addi	fp,sp,12
81139918:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113991c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81139920:	e0bfff17 	ldw	r2,-4(fp)
81139924:	1000021e 	bne	r2,zero,81139930 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81139928:	00bffa84 	movi	r2,-22
8113992c:	00001906 	br	81139994 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81139930:	e0bfff17 	ldw	r2,-4(fp)
81139934:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81139938:	00000a06 	br	81139964 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8113993c:	e0bffd17 	ldw	r2,-12(fp)
81139940:	10800717 	ldw	r2,28(r2)
81139944:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139948:	e0bffe17 	ldw	r2,-8(fp)
8113994c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81139950:	e0bffd17 	ldw	r2,-12(fp)
81139954:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81139958:	e0bffd17 	ldw	r2,-12(fp)
8113995c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81139960:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81139964:	e0bffd17 	ldw	r2,-12(fp)
81139968:	10c00317 	ldw	r3,12(r2)
8113996c:	e0bfff17 	ldw	r2,-4(fp)
81139970:	18bff21e 	bne	r3,r2,8113993c <__reset+0xfb11993c>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81139974:	e0bffd17 	ldw	r2,-12(fp)
81139978:	10800717 	ldw	r2,28(r2)
8113997c:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139980:	e0bffe17 	ldw	r2,-8(fp)
81139984:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81139988:	e0bffd17 	ldw	r2,-12(fp)
8113998c:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81139990:	0005883a 	mov	r2,zero
}
81139994:	e037883a 	mov	sp,fp
81139998:	df000017 	ldw	fp,0(sp)
8113999c:	dec00104 	addi	sp,sp,4
811399a0:	f800283a 	ret

811399a4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811399a4:	defff804 	addi	sp,sp,-32
811399a8:	de00012e 	bgeu	sp,et,811399b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
811399ac:	003b68fa 	trap	3
811399b0:	df000715 	stw	fp,28(sp)
811399b4:	df000704 	addi	fp,sp,28
811399b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811399bc:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811399c0:	e13fff17 	ldw	r4,-4(fp)
811399c4:	2000021e 	bne	r4,zero,811399d0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
811399c8:	00bffa84 	movi	r2,-22
811399cc:	00002806 	br	81139a70 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811399d0:	e13fff17 	ldw	r4,-4(fp)
811399d4:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811399d8:	e13fff17 	ldw	r4,-4(fp)
811399dc:	2005883a 	mov	r2,r4
811399e0:	0007883a 	mov	r3,zero
811399e4:	e0bffb15 	stw	r2,-20(fp)
811399e8:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811399ec:	00001006 	br	81139a30 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811399f0:	e0bff917 	ldw	r2,-28(fp)
811399f4:	10800f17 	ldw	r2,60(r2)
811399f8:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811399fc:	e0bffa17 	ldw	r2,-24(fp)
81139a00:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81139a04:	e0bff917 	ldw	r2,-28(fp)
81139a08:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81139a0c:	e0bff917 	ldw	r2,-28(fp)
81139a10:	10800317 	ldw	r2,12(r2)
81139a14:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81139a18:	e0bff917 	ldw	r2,-28(fp)
81139a1c:	10800b17 	ldw	r2,44(r2)
81139a20:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81139a24:	e0bffd17 	ldw	r2,-12(fp)
81139a28:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81139a2c:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81139a30:	e0bff917 	ldw	r2,-28(fp)
81139a34:	10c00317 	ldw	r3,12(r2)
81139a38:	e0bffb17 	ldw	r2,-20(fp)
81139a3c:	18800426 	beq	r3,r2,81139a50 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81139a40:	e0bff917 	ldw	r2,-28(fp)
81139a44:	10c00b17 	ldw	r3,44(r2)
81139a48:	e0bffc17 	ldw	r2,-16(fp)
81139a4c:	18bfe81e 	bne	r3,r2,811399f0 <__reset+0xfb1199f0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81139a50:	e0bff917 	ldw	r2,-28(fp)
81139a54:	10800f17 	ldw	r2,60(r2)
81139a58:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81139a5c:	e0bffa17 	ldw	r2,-24(fp)
81139a60:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81139a64:	e0bff917 	ldw	r2,-28(fp)
81139a68:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81139a6c:	0005883a 	mov	r2,zero
}
81139a70:	e037883a 	mov	sp,fp
81139a74:	df000017 	ldw	fp,0(sp)
81139a78:	dec00104 	addi	sp,sp,4
81139a7c:	f800283a 	ret

81139a80 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81139a80:	deffeb04 	addi	sp,sp,-84
81139a84:	de00012e 	bgeu	sp,et,81139a8c <alt_msgdma_start_prefetcher_with_list_addr+0xc>
81139a88:	003b68fa 	trap	3
81139a8c:	dfc01415 	stw	ra,80(sp)
81139a90:	df001315 	stw	fp,76(sp)
81139a94:	df001304 	addi	fp,sp,76
81139a98:	e13ffb15 	stw	r4,-20(fp)
81139a9c:	e17ffc15 	stw	r5,-16(fp)
81139aa0:	e1bffd15 	stw	r6,-12(fp)
81139aa4:	3807883a 	mov	r3,r7
81139aa8:	e0800217 	ldw	r2,8(fp)
81139aac:	e0fffe05 	stb	r3,-8(fp)
81139ab0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81139ab4:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
81139ab8:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81139abc:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81139ac0:	e0bffc17 	ldw	r2,-16(fp)
81139ac4:	e0bff815 	stw	r2,-32(fp)
81139ac8:	e0bffd17 	ldw	r2,-12(fp)
81139acc:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
81139ad0:	e0bffb17 	ldw	r2,-20(fp)
81139ad4:	10801817 	ldw	r2,96(r2)
81139ad8:	e0bff615 	stw	r2,-40(fp)
81139adc:	e03ff70d 	sth	zero,-36(fp)
81139ae0:	e0bff70b 	ldhu	r2,-36(fp)
81139ae4:	e0fffa04 	addi	r3,fp,-24
81139ae8:	180d883a 	mov	r6,r3
81139aec:	100b883a 	mov	r5,r2
81139af0:	e13ff617 	ldw	r4,-40(fp)
81139af4:	112ecc00 	call	8112ecc0 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81139af8:	e0bffb17 	ldw	r2,-20(fp)
81139afc:	10800617 	ldw	r2,24(r2)
81139b00:	10800037 	ldwio	r2,0(r2)
81139b04:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81139b08:	e0bfed17 	ldw	r2,-76(fp)
81139b0c:	1080004c 	andi	r2,r2,1
81139b10:	10000626 	beq	r2,zero,81139b2c <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
81139b14:	e0bffb17 	ldw	r2,-20(fp)
81139b18:	10801817 	ldw	r2,96(r2)
81139b1c:	1009883a 	mov	r4,r2
81139b20:	112f0480 	call	8112f048 <OSSemPost>
		return -EBUSY;
81139b24:	00bffc04 	movi	r2,-16
81139b28:	00009606 	br	81139d84 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81139b2c:	00800804 	movi	r2,32
81139b30:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139b34:	0005303a 	rdctl	r2,status
81139b38:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139b3c:	e0fff217 	ldw	r3,-56(fp)
81139b40:	00bfff84 	movi	r2,-2
81139b44:	1884703a 	and	r2,r3,r2
81139b48:	1001703a 	wrctl	status,r2
  
  return context;
81139b4c:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81139b50:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139b54:	e0bffb17 	ldw	r2,-20(fp)
81139b58:	10800317 	ldw	r2,12(r2)
81139b5c:	10800104 	addi	r2,r2,4
81139b60:	e0ffee17 	ldw	r3,-72(fp)
81139b64:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81139b68:	e0bffb17 	ldw	r2,-20(fp)
81139b6c:	10800317 	ldw	r2,12(r2)
81139b70:	e0fffb17 	ldw	r3,-20(fp)
81139b74:	18c00317 	ldw	r3,12(r3)
81139b78:	18c00037 	ldwio	r3,0(r3)
81139b7c:	10c00035 	stwio	r3,0(r2)
81139b80:	e0bfef17 	ldw	r2,-68(fp)
81139b84:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139b88:	e0bff017 	ldw	r2,-64(fp)
81139b8c:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81139b90:	e0bffb17 	ldw	r2,-20(fp)
81139b94:	10800b17 	ldw	r2,44(r2)
81139b98:	10002326 	beq	r2,zero,81139c28 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81139b9c:	e0bffb17 	ldw	r2,-20(fp)
81139ba0:	10c00d17 	ldw	r3,52(r2)
81139ba4:	e0bfee17 	ldw	r2,-72(fp)
81139ba8:	1884b03a 	or	r2,r3,r2
81139bac:	10800514 	ori	r2,r2,20
81139bb0:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81139bb4:	e0ffee17 	ldw	r3,-72(fp)
81139bb8:	00bff7c4 	movi	r2,-33
81139bbc:	1884703a 	and	r2,r3,r2
81139bc0:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81139bc4:	e0bfed17 	ldw	r2,-76(fp)
81139bc8:	10800214 	ori	r2,r2,8
81139bcc:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139bd0:	0005303a 	rdctl	r2,status
81139bd4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139bd8:	e0fff417 	ldw	r3,-48(fp)
81139bdc:	00bfff84 	movi	r2,-2
81139be0:	1884703a 	and	r2,r3,r2
81139be4:	1001703a 	wrctl	status,r2
  
  return context;
81139be8:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81139bec:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139bf0:	e0bffb17 	ldw	r2,-20(fp)
81139bf4:	10800317 	ldw	r2,12(r2)
81139bf8:	10800104 	addi	r2,r2,4
81139bfc:	e0ffee17 	ldw	r3,-72(fp)
81139c00:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139c04:	e0bffb17 	ldw	r2,-20(fp)
81139c08:	10800617 	ldw	r2,24(r2)
81139c0c:	e0ffed17 	ldw	r3,-76(fp)
81139c10:	10c00035 	stwio	r3,0(r2)
81139c14:	e0bfef17 	ldw	r2,-68(fp)
81139c18:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139c1c:	e0bff117 	ldw	r2,-60(fp)
81139c20:	1001703a 	wrctl	status,r2
81139c24:	00002306 	br	81139cb4 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81139c28:	e0bffb17 	ldw	r2,-20(fp)
81139c2c:	10c00d17 	ldw	r3,52(r2)
81139c30:	e0bfee17 	ldw	r2,-72(fp)
81139c34:	1884b03a 	or	r2,r3,r2
81139c38:	10800114 	ori	r2,r2,4
81139c3c:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81139c40:	e0ffee17 	ldw	r3,-72(fp)
81139c44:	00bff3c4 	movi	r2,-49
81139c48:	1884703a 	and	r2,r3,r2
81139c4c:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81139c50:	e0ffed17 	ldw	r3,-76(fp)
81139c54:	00bffdc4 	movi	r2,-9
81139c58:	1884703a 	and	r2,r3,r2
81139c5c:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139c60:	0005303a 	rdctl	r2,status
81139c64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139c68:	e0fff517 	ldw	r3,-44(fp)
81139c6c:	00bfff84 	movi	r2,-2
81139c70:	1884703a 	and	r2,r3,r2
81139c74:	1001703a 	wrctl	status,r2
  
  return context;
81139c78:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81139c7c:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81139c80:	e0bffb17 	ldw	r2,-20(fp)
81139c84:	10800317 	ldw	r2,12(r2)
81139c88:	10800104 	addi	r2,r2,4
81139c8c:	e0ffee17 	ldw	r3,-72(fp)
81139c90:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139c94:	e0bffb17 	ldw	r2,-20(fp)
81139c98:	10800617 	ldw	r2,24(r2)
81139c9c:	e0ffed17 	ldw	r3,-76(fp)
81139ca0:	10c00035 	stwio	r3,0(r2)
81139ca4:	e0bfef17 	ldw	r2,-68(fp)
81139ca8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139cac:	e0bff317 	ldw	r2,-52(fp)
81139cb0:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81139cb4:	e0bffb17 	ldw	r2,-20(fp)
81139cb8:	10800617 	ldw	r2,24(r2)
81139cbc:	10800104 	addi	r2,r2,4
81139cc0:	e0fff817 	ldw	r3,-32(fp)
81139cc4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81139cc8:	e0bffb17 	ldw	r2,-20(fp)
81139ccc:	10800617 	ldw	r2,24(r2)
81139cd0:	10800204 	addi	r2,r2,8
81139cd4:	e0fff917 	ldw	r3,-28(fp)
81139cd8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81139cdc:	e0bffe03 	ldbu	r2,-8(fp)
81139ce0:	10000426 	beq	r2,zero,81139cf4 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81139ce4:	e0bfed17 	ldw	r2,-76(fp)
81139ce8:	10800414 	ori	r2,r2,16
81139cec:	e0bfed15 	stw	r2,-76(fp)
81139cf0:	00000406 	br	81139d04 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
81139cf4:	e0ffed17 	ldw	r3,-76(fp)
81139cf8:	00bffbc4 	movi	r2,-17
81139cfc:	1884703a 	and	r2,r3,r2
81139d00:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
81139d04:	e0bfff03 	ldbu	r2,-4(fp)
81139d08:	10000e26 	beq	r2,zero,81139d44 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81139d0c:	e0bfed17 	ldw	r2,-76(fp)
81139d10:	10800094 	ori	r2,r2,2
81139d14:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81139d18:	e0bffb17 	ldw	r2,-20(fp)
81139d1c:	10800617 	ldw	r2,24(r2)
81139d20:	10800304 	addi	r2,r2,12
81139d24:	10800037 	ldwio	r2,0(r2)
81139d28:	10000a1e 	bne	r2,zero,81139d54 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81139d2c:	e0bffb17 	ldw	r2,-20(fp)
81139d30:	10800617 	ldw	r2,24(r2)
81139d34:	10800304 	addi	r2,r2,12
81139d38:	00c03fc4 	movi	r3,255
81139d3c:	10c00035 	stwio	r3,0(r2)
81139d40:	00000406 	br	81139d54 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81139d44:	e0ffed17 	ldw	r3,-76(fp)
81139d48:	00bfff44 	movi	r2,-3
81139d4c:	1884703a 	and	r2,r3,r2
81139d50:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81139d54:	e0bfed17 	ldw	r2,-76(fp)
81139d58:	10800054 	ori	r2,r2,1
81139d5c:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81139d60:	e0bffb17 	ldw	r2,-20(fp)
81139d64:	10800617 	ldw	r2,24(r2)
81139d68:	e0ffed17 	ldw	r3,-76(fp)
81139d6c:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81139d70:	e0bffb17 	ldw	r2,-20(fp)
81139d74:	10801817 	ldw	r2,96(r2)
81139d78:	1009883a 	mov	r4,r2
81139d7c:	112f0480 	call	8112f048 <OSSemPost>
	 
	 return 0;
81139d80:	0005883a 	mov	r2,zero
}
81139d84:	e037883a 	mov	sp,fp
81139d88:	dfc00117 	ldw	ra,4(sp)
81139d8c:	df000017 	ldw	fp,0(sp)
81139d90:	dec00204 	addi	sp,sp,8
81139d94:	f800283a 	ret

81139d98 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81139d98:	defff704 	addi	sp,sp,-36
81139d9c:	de00012e 	bgeu	sp,et,81139da4 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
81139da0:	003b68fa 	trap	3
81139da4:	dfc00815 	stw	ra,32(sp)
81139da8:	df000715 	stw	fp,28(sp)
81139dac:	dc400615 	stw	r17,24(sp)
81139db0:	dc000515 	stw	r16,20(sp)
81139db4:	df000704 	addi	fp,sp,28
81139db8:	e13ffa15 	stw	r4,-24(fp)
81139dbc:	e17ffb15 	stw	r5,-20(fp)
81139dc0:	3007883a 	mov	r3,r6
81139dc4:	3805883a 	mov	r2,r7
81139dc8:	e0fffc05 	stb	r3,-16(fp)
81139dcc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81139dd0:	e13ffb17 	ldw	r4,-20(fp)
81139dd4:	11399040 	call	81139904 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81139dd8:	10000226 	beq	r2,zero,81139de4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
81139ddc:	00bffa84 	movi	r2,-22
81139de0:	00000b06 	br	81139e10 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81139de4:	e0bffb17 	ldw	r2,-20(fp)
81139de8:	1021883a 	mov	r16,r2
81139dec:	0023883a 	mov	r17,zero
81139df0:	e0fffc03 	ldbu	r3,-16(fp)
81139df4:	e0bffd03 	ldbu	r2,-12(fp)
81139df8:	d8800015 	stw	r2,0(sp)
81139dfc:	180f883a 	mov	r7,r3
81139e00:	800b883a 	mov	r5,r16
81139e04:	880d883a 	mov	r6,r17
81139e08:	e13ffa17 	ldw	r4,-24(fp)
81139e0c:	1139a800 	call	81139a80 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81139e10:	e6fffe04 	addi	sp,fp,-8
81139e14:	dfc00317 	ldw	ra,12(sp)
81139e18:	df000217 	ldw	fp,8(sp)
81139e1c:	dc400117 	ldw	r17,4(sp)
81139e20:	dc000017 	ldw	r16,0(sp)
81139e24:	dec00404 	addi	sp,sp,16
81139e28:	f800283a 	ret

81139e2c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81139e2c:	defff704 	addi	sp,sp,-36
81139e30:	de00012e 	bgeu	sp,et,81139e38 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
81139e34:	003b68fa 	trap	3
81139e38:	dfc00815 	stw	ra,32(sp)
81139e3c:	df000715 	stw	fp,28(sp)
81139e40:	dc400615 	stw	r17,24(sp)
81139e44:	dc000515 	stw	r16,20(sp)
81139e48:	df000704 	addi	fp,sp,28
81139e4c:	e13ffa15 	stw	r4,-24(fp)
81139e50:	e17ffb15 	stw	r5,-20(fp)
81139e54:	3007883a 	mov	r3,r6
81139e58:	3805883a 	mov	r2,r7
81139e5c:	e0fffc05 	stb	r3,-16(fp)
81139e60:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81139e64:	e13ffb17 	ldw	r4,-20(fp)
81139e68:	11399a40 	call	811399a4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81139e6c:	10000226 	beq	r2,zero,81139e78 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
81139e70:	00bffa84 	movi	r2,-22
81139e74:	00000b06 	br	81139ea4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81139e78:	e0bffb17 	ldw	r2,-20(fp)
81139e7c:	1021883a 	mov	r16,r2
81139e80:	0023883a 	mov	r17,zero
81139e84:	e0fffc03 	ldbu	r3,-16(fp)
81139e88:	e0bffd03 	ldbu	r2,-12(fp)
81139e8c:	d8800015 	stw	r2,0(sp)
81139e90:	180f883a 	mov	r7,r3
81139e94:	800b883a 	mov	r5,r16
81139e98:	880d883a 	mov	r6,r17
81139e9c:	e13ffa17 	ldw	r4,-24(fp)
81139ea0:	1139a800 	call	81139a80 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81139ea4:	e6fffe04 	addi	sp,fp,-8
81139ea8:	dfc00317 	ldw	ra,12(sp)
81139eac:	df000217 	ldw	fp,8(sp)
81139eb0:	dc400117 	ldw	r17,4(sp)
81139eb4:	dc000017 	ldw	r16,0(sp)
81139eb8:	dec00404 	addi	sp,sp,16
81139ebc:	f800283a 	ret

81139ec0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81139ec0:	defffc04 	addi	sp,sp,-16
81139ec4:	de00012e 	bgeu	sp,et,81139ecc <alt_msgdma_open+0xc>
81139ec8:	003b68fa 	trap	3
81139ecc:	dfc00315 	stw	ra,12(sp)
81139ed0:	df000215 	stw	fp,8(sp)
81139ed4:	df000204 	addi	fp,sp,8
81139ed8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81139edc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81139ee0:	d1603404 	addi	r5,gp,-32560
81139ee4:	e13fff17 	ldw	r4,-4(fp)
81139ee8:	113a5340 	call	8113a534 <alt_find_dev>
81139eec:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81139ef0:	e0bffe17 	ldw	r2,-8(fp)
81139ef4:	1000041e 	bne	r2,zero,81139f08 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
81139ef8:	11381240 	call	81138124 <alt_get_errno>
81139efc:	1007883a 	mov	r3,r2
81139f00:	008004c4 	movi	r2,19
81139f04:	18800015 	stw	r2,0(r3)
    }

    return dev;
81139f08:	e0bffe17 	ldw	r2,-8(fp)
}
81139f0c:	e037883a 	mov	sp,fp
81139f10:	dfc00117 	ldw	ra,4(sp)
81139f14:	df000017 	ldw	fp,0(sp)
81139f18:	dec00204 	addi	sp,sp,8
81139f1c:	f800283a 	ret

81139f20 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81139f20:	defff604 	addi	sp,sp,-40
81139f24:	de00012e 	bgeu	sp,et,81139f2c <alt_msgdma_init+0xc>
81139f28:	003b68fa 	trap	3
81139f2c:	dfc00915 	stw	ra,36(sp)
81139f30:	df000815 	stw	fp,32(sp)
81139f34:	df000804 	addi	fp,sp,32
81139f38:	e13ffd15 	stw	r4,-12(fp)
81139f3c:	e17ffe15 	stw	r5,-8(fp)
81139f40:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81139f44:	e0bffd17 	ldw	r2,-12(fp)
81139f48:	10801783 	ldbu	r2,94(r2)
81139f4c:	10803fcc 	andi	r2,r2,255
81139f50:	10000b26 	beq	r2,zero,81139f80 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81139f54:	e0bffd17 	ldw	r2,-12(fp)
81139f58:	10800617 	ldw	r2,24(r2)
81139f5c:	00c00104 	movi	r3,4
81139f60:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81139f64:	0001883a 	nop
81139f68:	e0bffd17 	ldw	r2,-12(fp)
81139f6c:	10800617 	ldw	r2,24(r2)
81139f70:	10800037 	ldwio	r2,0(r2)
81139f74:	1080010c 	andi	r2,r2,4
81139f78:	1005d0ba 	srai	r2,r2,2
81139f7c:	103ffa1e 	bne	r2,zero,81139f68 <__reset+0xfb119f68>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81139f80:	e0bffd17 	ldw	r2,-12(fp)
81139f84:	10800317 	ldw	r2,12(r2)
81139f88:	10800104 	addi	r2,r2,4
81139f8c:	00c00084 	movi	r3,2
81139f90:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81139f94:	0001883a 	nop
81139f98:	e0bffd17 	ldw	r2,-12(fp)
81139f9c:	10800317 	ldw	r2,12(r2)
81139fa0:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81139fa4:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81139fa8:	103ffb1e 	bne	r2,zero,81139f98 <__reset+0xfb119f98>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81139fac:	e0bffd17 	ldw	r2,-12(fp)
81139fb0:	10800317 	ldw	r2,12(r2)
81139fb4:	10800104 	addi	r2,r2,4
81139fb8:	10800037 	ldwio	r2,0(r2)
81139fbc:	1007883a 	mov	r3,r2
81139fc0:	00bffbc4 	movi	r2,-17
81139fc4:	1884703a 	and	r2,r3,r2
81139fc8:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81139fcc:	e0bff917 	ldw	r2,-28(fp)
81139fd0:	10800814 	ori	r2,r2,32
81139fd4:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81139fd8:	e0bffd17 	ldw	r2,-12(fp)
81139fdc:	10800317 	ldw	r2,12(r2)
81139fe0:	10800104 	addi	r2,r2,4
81139fe4:	e0fff917 	ldw	r3,-28(fp)
81139fe8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81139fec:	e0bffd17 	ldw	r2,-12(fp)
81139ff0:	10800317 	ldw	r2,12(r2)
81139ff4:	e0fffd17 	ldw	r3,-12(fp)
81139ff8:	18c00317 	ldw	r3,12(r3)
81139ffc:	18c00037 	ldwio	r3,0(r3)
8113a000:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113a004:	e0bffd17 	ldw	r2,-12(fp)
8113a008:	10801783 	ldbu	r2,94(r2)
8113a00c:	10803fcc 	andi	r2,r2,255
8113a010:	10000826 	beq	r2,zero,8113a034 <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113a014:	e0bffd17 	ldw	r2,-12(fp)
8113a018:	10800617 	ldw	r2,24(r2)
8113a01c:	10800404 	addi	r2,r2,16
8113a020:	e0fffd17 	ldw	r3,-12(fp)
8113a024:	18c00617 	ldw	r3,24(r3)
8113a028:	18c00404 	addi	r3,r3,16
8113a02c:	18c00037 	ldwio	r3,0(r3)
8113a030:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113a034:	d1603404 	addi	r5,gp,-32560
8113a038:	e13ffd17 	ldw	r4,-12(fp)
8113a03c:	113a3b80 	call	8113a3b8 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113a040:	e0bffd17 	ldw	r2,-12(fp)
8113a044:	10801804 	addi	r2,r2,96
8113a048:	e0bffb15 	stw	r2,-20(fp)
8113a04c:	00800044 	movi	r2,1
8113a050:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a054:	e0bffc0b 	ldhu	r2,-16(fp)
8113a058:	1009883a 	mov	r4,r2
8113a05c:	112e9980 	call	8112e998 <OSSemCreate>
8113a060:	1007883a 	mov	r3,r2
8113a064:	e0bffb17 	ldw	r2,-20(fp)
8113a068:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a06c:	e0bffb17 	ldw	r2,-20(fp)
8113a070:	10800017 	ldw	r2,0(r2)
8113a074:	10000226 	beq	r2,zero,8113a080 <alt_msgdma_init+0x160>
8113a078:	0005883a 	mov	r2,zero
8113a07c:	00000106 	br	8113a084 <alt_msgdma_init+0x164>
8113a080:	00bfffc4 	movi	r2,-1
8113a084:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113a088:	e0bffa17 	ldw	r2,-24(fp)
8113a08c:	1000081e 	bne	r2,zero,8113a0b0 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113a090:	d8000015 	stw	zero,0(sp)
8113a094:	e1fffd17 	ldw	r7,-12(fp)
8113a098:	01a04534 	movhi	r6,33044
8113a09c:	31a0ce04 	addi	r6,r6,-31944
8113a0a0:	e17fff17 	ldw	r5,-4(fp)
8113a0a4:	e13ffe17 	ldw	r4,-8(fp)
8113a0a8:	113a7c00 	call	8113a7c0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113a0ac:	00000406 	br	8113a0c0 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113a0b0:	01204534 	movhi	r4,33044
8113a0b4:	213ae804 	addi	r4,r4,-5216
8113a0b8:	113abd80 	call	8113abd8 <alt_printf>
    }
    
    return;
8113a0bc:	0001883a 	nop

}
8113a0c0:	e037883a 	mov	sp,fp
8113a0c4:	dfc00117 	ldw	ra,4(sp)
8113a0c8:	df000017 	ldw	fp,0(sp)
8113a0cc:	dec00204 	addi	sp,sp,8
8113a0d0:	f800283a 	ret

8113a0d4 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113a0d4:	defffb04 	addi	sp,sp,-20
8113a0d8:	de00012e 	bgeu	sp,et,8113a0e0 <alt_msgdma_register_callback+0xc>
8113a0dc:	003b68fa 	trap	3
8113a0e0:	df000415 	stw	fp,16(sp)
8113a0e4:	df000404 	addi	fp,sp,16
8113a0e8:	e13ffc15 	stw	r4,-16(fp)
8113a0ec:	e17ffd15 	stw	r5,-12(fp)
8113a0f0:	e1bffe15 	stw	r6,-8(fp)
8113a0f4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113a0f8:	e0bffc17 	ldw	r2,-16(fp)
8113a0fc:	e0fffd17 	ldw	r3,-12(fp)
8113a100:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113a104:	e0bffc17 	ldw	r2,-16(fp)
8113a108:	e0ffff17 	ldw	r3,-4(fp)
8113a10c:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113a110:	e0bffc17 	ldw	r2,-16(fp)
8113a114:	e0fffe17 	ldw	r3,-8(fp)
8113a118:	10c00d15 	stw	r3,52(r2)

    return ;
8113a11c:	0001883a 	nop
}
8113a120:	e037883a 	mov	sp,fp
8113a124:	df000017 	ldw	fp,0(sp)
8113a128:	dec00104 	addi	sp,sp,4
8113a12c:	f800283a 	ret

8113a130 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113a130:	defffc04 	addi	sp,sp,-16
8113a134:	de00012e 	bgeu	sp,et,8113a13c <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113a138:	003b68fa 	trap	3
8113a13c:	dfc00315 	stw	ra,12(sp)
8113a140:	df000215 	stw	fp,8(sp)
8113a144:	df000204 	addi	fp,sp,8
8113a148:	e13ffe15 	stw	r4,-8(fp)
8113a14c:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113a150:	000d883a 	mov	r6,zero
8113a154:	e17fff17 	ldw	r5,-4(fp)
8113a158:	e13ffe17 	ldw	r4,-8(fp)
8113a15c:	11386b40 	call	811386b4 <alt_msgdma_descriptor_async_transfer>

}
8113a160:	e037883a 	mov	sp,fp
8113a164:	dfc00117 	ldw	ra,4(sp)
8113a168:	df000017 	ldw	fp,0(sp)
8113a16c:	dec00204 	addi	sp,sp,8
8113a170:	f800283a 	ret

8113a174 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113a174:	defffc04 	addi	sp,sp,-16
8113a178:	de00012e 	bgeu	sp,et,8113a180 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113a17c:	003b68fa 	trap	3
8113a180:	dfc00315 	stw	ra,12(sp)
8113a184:	df000215 	stw	fp,8(sp)
8113a188:	df000204 	addi	fp,sp,8
8113a18c:	e13ffe15 	stw	r4,-8(fp)
8113a190:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113a194:	e1bfff17 	ldw	r6,-4(fp)
8113a198:	000b883a 	mov	r5,zero
8113a19c:	e13ffe17 	ldw	r4,-8(fp)
8113a1a0:	11386b40 	call	811386b4 <alt_msgdma_descriptor_async_transfer>
}
8113a1a4:	e037883a 	mov	sp,fp
8113a1a8:	dfc00117 	ldw	ra,4(sp)
8113a1ac:	df000017 	ldw	fp,0(sp)
8113a1b0:	dec00204 	addi	sp,sp,8
8113a1b4:	f800283a 	ret

8113a1b8 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113a1b8:	defffc04 	addi	sp,sp,-16
8113a1bc:	de00012e 	bgeu	sp,et,8113a1c4 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113a1c0:	003b68fa 	trap	3
8113a1c4:	dfc00315 	stw	ra,12(sp)
8113a1c8:	df000215 	stw	fp,8(sp)
8113a1cc:	df000204 	addi	fp,sp,8
8113a1d0:	e13ffe15 	stw	r4,-8(fp)
8113a1d4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113a1d8:	000d883a 	mov	r6,zero
8113a1dc:	e17fff17 	ldw	r5,-4(fp)
8113a1e0:	e13ffe17 	ldw	r4,-8(fp)
8113a1e4:	11389f40 	call	811389f4 <alt_msgdma_descriptor_sync_transfer>
}
8113a1e8:	e037883a 	mov	sp,fp
8113a1ec:	dfc00117 	ldw	ra,4(sp)
8113a1f0:	df000017 	ldw	fp,0(sp)
8113a1f4:	dec00204 	addi	sp,sp,8
8113a1f8:	f800283a 	ret

8113a1fc <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113a1fc:	defffc04 	addi	sp,sp,-16
8113a200:	de00012e 	bgeu	sp,et,8113a208 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113a204:	003b68fa 	trap	3
8113a208:	dfc00315 	stw	ra,12(sp)
8113a20c:	df000215 	stw	fp,8(sp)
8113a210:	df000204 	addi	fp,sp,8
8113a214:	e13ffe15 	stw	r4,-8(fp)
8113a218:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113a21c:	e1bfff17 	ldw	r6,-4(fp)
8113a220:	000b883a 	mov	r5,zero
8113a224:	e13ffe17 	ldw	r4,-8(fp)
8113a228:	11389f40 	call	811389f4 <alt_msgdma_descriptor_sync_transfer>
}
8113a22c:	e037883a 	mov	sp,fp
8113a230:	dfc00117 	ldw	ra,4(sp)
8113a234:	df000017 	ldw	fp,0(sp)
8113a238:	dec00204 	addi	sp,sp,8
8113a23c:	f800283a 	ret

8113a240 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113a240:	defff504 	addi	sp,sp,-44
8113a244:	de00012e 	bgeu	sp,et,8113a24c <alt_alarm_start+0xc>
8113a248:	003b68fa 	trap	3
8113a24c:	df000a15 	stw	fp,40(sp)
8113a250:	df000a04 	addi	fp,sp,40
8113a254:	e13ffc15 	stw	r4,-16(fp)
8113a258:	e17ffd15 	stw	r5,-12(fp)
8113a25c:	e1bffe15 	stw	r6,-8(fp)
8113a260:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113a264:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113a268:	d0a06a17 	ldw	r2,-32344(gp)
  
  if (alt_ticks_per_second ())
8113a26c:	10003c26 	beq	r2,zero,8113a360 <alt_alarm_start+0x120>
  {
    if (alarm)
8113a270:	e0bffc17 	ldw	r2,-16(fp)
8113a274:	10003826 	beq	r2,zero,8113a358 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113a278:	e0bffc17 	ldw	r2,-16(fp)
8113a27c:	e0fffe17 	ldw	r3,-8(fp)
8113a280:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113a284:	e0bffc17 	ldw	r2,-16(fp)
8113a288:	e0ffff17 	ldw	r3,-4(fp)
8113a28c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a290:	0005303a 	rdctl	r2,status
8113a294:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a298:	e0fff917 	ldw	r3,-28(fp)
8113a29c:	00bfff84 	movi	r2,-2
8113a2a0:	1884703a 	and	r2,r3,r2
8113a2a4:	1001703a 	wrctl	status,r2
  
  return context;
8113a2a8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113a2ac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113a2b0:	d0a06b17 	ldw	r2,-32340(gp)
      
      current_nticks = alt_nticks();
8113a2b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113a2b8:	e0fffd17 	ldw	r3,-12(fp)
8113a2bc:	e0bff617 	ldw	r2,-40(fp)
8113a2c0:	1885883a 	add	r2,r3,r2
8113a2c4:	10c00044 	addi	r3,r2,1
8113a2c8:	e0bffc17 	ldw	r2,-16(fp)
8113a2cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113a2d0:	e0bffc17 	ldw	r2,-16(fp)
8113a2d4:	10c00217 	ldw	r3,8(r2)
8113a2d8:	e0bff617 	ldw	r2,-40(fp)
8113a2dc:	1880042e 	bgeu	r3,r2,8113a2f0 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113a2e0:	e0bffc17 	ldw	r2,-16(fp)
8113a2e4:	00c00044 	movi	r3,1
8113a2e8:	10c00405 	stb	r3,16(r2)
8113a2ec:	00000206 	br	8113a2f8 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113a2f0:	e0bffc17 	ldw	r2,-16(fp)
8113a2f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113a2f8:	e0bffc17 	ldw	r2,-16(fp)
8113a2fc:	d0e01304 	addi	r3,gp,-32692
8113a300:	e0fffa15 	stw	r3,-24(fp)
8113a304:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113a308:	e0bffb17 	ldw	r2,-20(fp)
8113a30c:	e0fffa17 	ldw	r3,-24(fp)
8113a310:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113a314:	e0bffa17 	ldw	r2,-24(fp)
8113a318:	10c00017 	ldw	r3,0(r2)
8113a31c:	e0bffb17 	ldw	r2,-20(fp)
8113a320:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113a324:	e0bffa17 	ldw	r2,-24(fp)
8113a328:	10800017 	ldw	r2,0(r2)
8113a32c:	e0fffb17 	ldw	r3,-20(fp)
8113a330:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113a334:	e0bffa17 	ldw	r2,-24(fp)
8113a338:	e0fffb17 	ldw	r3,-20(fp)
8113a33c:	10c00015 	stw	r3,0(r2)
8113a340:	e0bff817 	ldw	r2,-32(fp)
8113a344:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a348:	e0bff717 	ldw	r2,-36(fp)
8113a34c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113a350:	0005883a 	mov	r2,zero
8113a354:	00000306 	br	8113a364 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113a358:	00bffa84 	movi	r2,-22
8113a35c:	00000106 	br	8113a364 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113a360:	00bfde84 	movi	r2,-134
  }
}
8113a364:	e037883a 	mov	sp,fp
8113a368:	df000017 	ldw	fp,0(sp)
8113a36c:	dec00104 	addi	sp,sp,4
8113a370:	f800283a 	ret

8113a374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113a374:	defffe04 	addi	sp,sp,-8
8113a378:	de00012e 	bgeu	sp,et,8113a380 <alt_get_errno+0xc>
8113a37c:	003b68fa 	trap	3
8113a380:	dfc00115 	stw	ra,4(sp)
8113a384:	df000015 	stw	fp,0(sp)
8113a388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113a38c:	d0a01017 	ldw	r2,-32704(gp)
8113a390:	10000326 	beq	r2,zero,8113a3a0 <alt_get_errno+0x2c>
8113a394:	d0a01017 	ldw	r2,-32704(gp)
8113a398:	103ee83a 	callr	r2
8113a39c:	00000106 	br	8113a3a4 <alt_get_errno+0x30>
8113a3a0:	d0a05e04 	addi	r2,gp,-32392
}
8113a3a4:	e037883a 	mov	sp,fp
8113a3a8:	dfc00117 	ldw	ra,4(sp)
8113a3ac:	df000017 	ldw	fp,0(sp)
8113a3b0:	dec00204 	addi	sp,sp,8
8113a3b4:	f800283a 	ret

8113a3b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113a3b8:	defffa04 	addi	sp,sp,-24
8113a3bc:	de00012e 	bgeu	sp,et,8113a3c4 <alt_dev_llist_insert+0xc>
8113a3c0:	003b68fa 	trap	3
8113a3c4:	dfc00515 	stw	ra,20(sp)
8113a3c8:	df000415 	stw	fp,16(sp)
8113a3cc:	df000404 	addi	fp,sp,16
8113a3d0:	e13ffe15 	stw	r4,-8(fp)
8113a3d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113a3d8:	e0bffe17 	ldw	r2,-8(fp)
8113a3dc:	10000326 	beq	r2,zero,8113a3ec <alt_dev_llist_insert+0x34>
8113a3e0:	e0bffe17 	ldw	r2,-8(fp)
8113a3e4:	10800217 	ldw	r2,8(r2)
8113a3e8:	1000061e 	bne	r2,zero,8113a404 <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113a3ec:	113a3740 	call	8113a374 <alt_get_errno>
8113a3f0:	1007883a 	mov	r3,r2
8113a3f4:	00800584 	movi	r2,22
8113a3f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113a3fc:	00bffa84 	movi	r2,-22
8113a400:	00001306 	br	8113a450 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113a404:	e0bffe17 	ldw	r2,-8(fp)
8113a408:	e0ffff17 	ldw	r3,-4(fp)
8113a40c:	e0fffc15 	stw	r3,-16(fp)
8113a410:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113a414:	e0bffd17 	ldw	r2,-12(fp)
8113a418:	e0fffc17 	ldw	r3,-16(fp)
8113a41c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113a420:	e0bffc17 	ldw	r2,-16(fp)
8113a424:	10c00017 	ldw	r3,0(r2)
8113a428:	e0bffd17 	ldw	r2,-12(fp)
8113a42c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113a430:	e0bffc17 	ldw	r2,-16(fp)
8113a434:	10800017 	ldw	r2,0(r2)
8113a438:	e0fffd17 	ldw	r3,-12(fp)
8113a43c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113a440:	e0bffc17 	ldw	r2,-16(fp)
8113a444:	e0fffd17 	ldw	r3,-12(fp)
8113a448:	10c00015 	stw	r3,0(r2)

  return 0;  
8113a44c:	0005883a 	mov	r2,zero
}
8113a450:	e037883a 	mov	sp,fp
8113a454:	dfc00117 	ldw	ra,4(sp)
8113a458:	df000017 	ldw	fp,0(sp)
8113a45c:	dec00204 	addi	sp,sp,8
8113a460:	f800283a 	ret

8113a464 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113a464:	defffd04 	addi	sp,sp,-12
8113a468:	de00012e 	bgeu	sp,et,8113a470 <_do_ctors+0xc>
8113a46c:	003b68fa 	trap	3
8113a470:	dfc00215 	stw	ra,8(sp)
8113a474:	df000115 	stw	fp,4(sp)
8113a478:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113a47c:	00a04534 	movhi	r2,33044
8113a480:	10ae0c04 	addi	r2,r2,-18384
8113a484:	e0bfff15 	stw	r2,-4(fp)
8113a488:	00000606 	br	8113a4a4 <_do_ctors+0x40>
        (*ctor) (); 
8113a48c:	e0bfff17 	ldw	r2,-4(fp)
8113a490:	10800017 	ldw	r2,0(r2)
8113a494:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113a498:	e0bfff17 	ldw	r2,-4(fp)
8113a49c:	10bfff04 	addi	r2,r2,-4
8113a4a0:	e0bfff15 	stw	r2,-4(fp)
8113a4a4:	e0ffff17 	ldw	r3,-4(fp)
8113a4a8:	00a04534 	movhi	r2,33044
8113a4ac:	10ae0d04 	addi	r2,r2,-18380
8113a4b0:	18bff62e 	bgeu	r3,r2,8113a48c <__reset+0xfb11a48c>
        (*ctor) (); 
}
8113a4b4:	0001883a 	nop
8113a4b8:	e037883a 	mov	sp,fp
8113a4bc:	dfc00117 	ldw	ra,4(sp)
8113a4c0:	df000017 	ldw	fp,0(sp)
8113a4c4:	dec00204 	addi	sp,sp,8
8113a4c8:	f800283a 	ret

8113a4cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113a4cc:	defffd04 	addi	sp,sp,-12
8113a4d0:	de00012e 	bgeu	sp,et,8113a4d8 <_do_dtors+0xc>
8113a4d4:	003b68fa 	trap	3
8113a4d8:	dfc00215 	stw	ra,8(sp)
8113a4dc:	df000115 	stw	fp,4(sp)
8113a4e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113a4e4:	00a04534 	movhi	r2,33044
8113a4e8:	10ae0c04 	addi	r2,r2,-18384
8113a4ec:	e0bfff15 	stw	r2,-4(fp)
8113a4f0:	00000606 	br	8113a50c <_do_dtors+0x40>
        (*dtor) (); 
8113a4f4:	e0bfff17 	ldw	r2,-4(fp)
8113a4f8:	10800017 	ldw	r2,0(r2)
8113a4fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113a500:	e0bfff17 	ldw	r2,-4(fp)
8113a504:	10bfff04 	addi	r2,r2,-4
8113a508:	e0bfff15 	stw	r2,-4(fp)
8113a50c:	e0ffff17 	ldw	r3,-4(fp)
8113a510:	00a04534 	movhi	r2,33044
8113a514:	10ae0d04 	addi	r2,r2,-18380
8113a518:	18bff62e 	bgeu	r3,r2,8113a4f4 <__reset+0xfb11a4f4>
        (*dtor) (); 
}
8113a51c:	0001883a 	nop
8113a520:	e037883a 	mov	sp,fp
8113a524:	dfc00117 	ldw	ra,4(sp)
8113a528:	df000017 	ldw	fp,0(sp)
8113a52c:	dec00204 	addi	sp,sp,8
8113a530:	f800283a 	ret

8113a534 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113a534:	defffa04 	addi	sp,sp,-24
8113a538:	de00012e 	bgeu	sp,et,8113a540 <alt_find_dev+0xc>
8113a53c:	003b68fa 	trap	3
8113a540:	dfc00515 	stw	ra,20(sp)
8113a544:	df000415 	stw	fp,16(sp)
8113a548:	df000404 	addi	fp,sp,16
8113a54c:	e13ffe15 	stw	r4,-8(fp)
8113a550:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113a554:	e0bfff17 	ldw	r2,-4(fp)
8113a558:	10800017 	ldw	r2,0(r2)
8113a55c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113a560:	e13ffe17 	ldw	r4,-8(fp)
8113a564:	11132f80 	call	811132f8 <strlen>
8113a568:	10800044 	addi	r2,r2,1
8113a56c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113a570:	00000d06 	br	8113a5a8 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113a574:	e0bffc17 	ldw	r2,-16(fp)
8113a578:	10800217 	ldw	r2,8(r2)
8113a57c:	e0fffd17 	ldw	r3,-12(fp)
8113a580:	180d883a 	mov	r6,r3
8113a584:	e17ffe17 	ldw	r5,-8(fp)
8113a588:	1009883a 	mov	r4,r2
8113a58c:	113b35c0 	call	8113b35c <memcmp>
8113a590:	1000021e 	bne	r2,zero,8113a59c <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113a594:	e0bffc17 	ldw	r2,-16(fp)
8113a598:	00000706 	br	8113a5b8 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113a59c:	e0bffc17 	ldw	r2,-16(fp)
8113a5a0:	10800017 	ldw	r2,0(r2)
8113a5a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113a5a8:	e0fffc17 	ldw	r3,-16(fp)
8113a5ac:	e0bfff17 	ldw	r2,-4(fp)
8113a5b0:	18bff01e 	bne	r3,r2,8113a574 <__reset+0xfb11a574>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113a5b4:	0005883a 	mov	r2,zero
}
8113a5b8:	e037883a 	mov	sp,fp
8113a5bc:	dfc00117 	ldw	ra,4(sp)
8113a5c0:	df000017 	ldw	fp,0(sp)
8113a5c4:	dec00204 	addi	sp,sp,8
8113a5c8:	f800283a 	ret

8113a5cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113a5cc:	defffb04 	addi	sp,sp,-20
8113a5d0:	de00012e 	bgeu	sp,et,8113a5d8 <alt_find_file+0xc>
8113a5d4:	003b68fa 	trap	3
8113a5d8:	dfc00415 	stw	ra,16(sp)
8113a5dc:	df000315 	stw	fp,12(sp)
8113a5e0:	df000304 	addi	fp,sp,12
8113a5e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113a5e8:	d0a00b17 	ldw	r2,-32724(gp)
8113a5ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113a5f0:	00003106 	br	8113a6b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113a5f4:	e0bffd17 	ldw	r2,-12(fp)
8113a5f8:	10800217 	ldw	r2,8(r2)
8113a5fc:	1009883a 	mov	r4,r2
8113a600:	11132f80 	call	811132f8 <strlen>
8113a604:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113a608:	e0bffd17 	ldw	r2,-12(fp)
8113a60c:	10c00217 	ldw	r3,8(r2)
8113a610:	e0bffe17 	ldw	r2,-8(fp)
8113a614:	10bfffc4 	addi	r2,r2,-1
8113a618:	1885883a 	add	r2,r3,r2
8113a61c:	10800003 	ldbu	r2,0(r2)
8113a620:	10803fcc 	andi	r2,r2,255
8113a624:	1080201c 	xori	r2,r2,128
8113a628:	10bfe004 	addi	r2,r2,-128
8113a62c:	10800bd8 	cmpnei	r2,r2,47
8113a630:	1000031e 	bne	r2,zero,8113a640 <alt_find_file+0x74>
    {
      len -= 1;
8113a634:	e0bffe17 	ldw	r2,-8(fp)
8113a638:	10bfffc4 	addi	r2,r2,-1
8113a63c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113a640:	e0bffe17 	ldw	r2,-8(fp)
8113a644:	e0ffff17 	ldw	r3,-4(fp)
8113a648:	1885883a 	add	r2,r3,r2
8113a64c:	10800003 	ldbu	r2,0(r2)
8113a650:	10803fcc 	andi	r2,r2,255
8113a654:	1080201c 	xori	r2,r2,128
8113a658:	10bfe004 	addi	r2,r2,-128
8113a65c:	10800be0 	cmpeqi	r2,r2,47
8113a660:	1000081e 	bne	r2,zero,8113a684 <alt_find_file+0xb8>
8113a664:	e0bffe17 	ldw	r2,-8(fp)
8113a668:	e0ffff17 	ldw	r3,-4(fp)
8113a66c:	1885883a 	add	r2,r3,r2
8113a670:	10800003 	ldbu	r2,0(r2)
8113a674:	10803fcc 	andi	r2,r2,255
8113a678:	1080201c 	xori	r2,r2,128
8113a67c:	10bfe004 	addi	r2,r2,-128
8113a680:	10000a1e 	bne	r2,zero,8113a6ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113a684:	e0bffd17 	ldw	r2,-12(fp)
8113a688:	10800217 	ldw	r2,8(r2)
8113a68c:	e0fffe17 	ldw	r3,-8(fp)
8113a690:	180d883a 	mov	r6,r3
8113a694:	e17fff17 	ldw	r5,-4(fp)
8113a698:	1009883a 	mov	r4,r2
8113a69c:	113b35c0 	call	8113b35c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113a6a0:	1000021e 	bne	r2,zero,8113a6ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113a6a4:	e0bffd17 	ldw	r2,-12(fp)
8113a6a8:	00000706 	br	8113a6c8 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113a6ac:	e0bffd17 	ldw	r2,-12(fp)
8113a6b0:	10800017 	ldw	r2,0(r2)
8113a6b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113a6b8:	e0fffd17 	ldw	r3,-12(fp)
8113a6bc:	d0a00b04 	addi	r2,gp,-32724
8113a6c0:	18bfcc1e 	bne	r3,r2,8113a5f4 <__reset+0xfb11a5f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113a6c4:	0005883a 	mov	r2,zero
}
8113a6c8:	e037883a 	mov	sp,fp
8113a6cc:	dfc00117 	ldw	ra,4(sp)
8113a6d0:	df000017 	ldw	fp,0(sp)
8113a6d4:	dec00204 	addi	sp,sp,8
8113a6d8:	f800283a 	ret

8113a6dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113a6dc:	defff904 	addi	sp,sp,-28
8113a6e0:	de00012e 	bgeu	sp,et,8113a6e8 <alt_get_fd+0xc>
8113a6e4:	003b68fa 	trap	3
8113a6e8:	dfc00615 	stw	ra,24(sp)
8113a6ec:	df000515 	stw	fp,20(sp)
8113a6f0:	df000504 	addi	fp,sp,20
8113a6f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113a6f8:	00bffa04 	movi	r2,-24
8113a6fc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113a700:	d0a06517 	ldw	r2,-32364(gp)
8113a704:	e0bffd15 	stw	r2,-12(fp)
8113a708:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113a70c:	e0bffe0b 	ldhu	r2,-8(fp)
8113a710:	e0fffe84 	addi	r3,fp,-6
8113a714:	180d883a 	mov	r6,r3
8113a718:	100b883a 	mov	r5,r2
8113a71c:	e13ffd17 	ldw	r4,-12(fp)
8113a720:	112ecc00 	call	8112ecc0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113a724:	e03ffb15 	stw	zero,-20(fp)
8113a728:	00001906 	br	8113a790 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113a72c:	00a04534 	movhi	r2,33044
8113a730:	10bd2404 	addi	r2,r2,-2928
8113a734:	e0fffb17 	ldw	r3,-20(fp)
8113a738:	18c00324 	muli	r3,r3,12
8113a73c:	10c5883a 	add	r2,r2,r3
8113a740:	10800017 	ldw	r2,0(r2)
8113a744:	10000f1e 	bne	r2,zero,8113a784 <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113a748:	00a04534 	movhi	r2,33044
8113a74c:	10bd2404 	addi	r2,r2,-2928
8113a750:	e0fffb17 	ldw	r3,-20(fp)
8113a754:	18c00324 	muli	r3,r3,12
8113a758:	10c5883a 	add	r2,r2,r3
8113a75c:	e0ffff17 	ldw	r3,-4(fp)
8113a760:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113a764:	d0e00f17 	ldw	r3,-32708(gp)
8113a768:	e0bffb17 	ldw	r2,-20(fp)
8113a76c:	1880020e 	bge	r3,r2,8113a778 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113a770:	e0bffb17 	ldw	r2,-20(fp)
8113a774:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113a778:	e0bffb17 	ldw	r2,-20(fp)
8113a77c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113a780:	00000606 	br	8113a79c <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113a784:	e0bffb17 	ldw	r2,-20(fp)
8113a788:	10800044 	addi	r2,r2,1
8113a78c:	e0bffb15 	stw	r2,-20(fp)
8113a790:	e0bffb17 	ldw	r2,-20(fp)
8113a794:	10800810 	cmplti	r2,r2,32
8113a798:	103fe41e 	bne	r2,zero,8113a72c <__reset+0xfb11a72c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113a79c:	d0a06517 	ldw	r2,-32364(gp)
8113a7a0:	1009883a 	mov	r4,r2
8113a7a4:	112f0480 	call	8112f048 <OSSemPost>

  return rc;
8113a7a8:	e0bffc17 	ldw	r2,-16(fp)
}
8113a7ac:	e037883a 	mov	sp,fp
8113a7b0:	dfc00117 	ldw	ra,4(sp)
8113a7b4:	df000017 	ldw	fp,0(sp)
8113a7b8:	dec00204 	addi	sp,sp,8
8113a7bc:	f800283a 	ret

8113a7c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113a7c0:	defff904 	addi	sp,sp,-28
8113a7c4:	de00012e 	bgeu	sp,et,8113a7cc <alt_ic_isr_register+0xc>
8113a7c8:	003b68fa 	trap	3
8113a7cc:	dfc00615 	stw	ra,24(sp)
8113a7d0:	df000515 	stw	fp,20(sp)
8113a7d4:	df000504 	addi	fp,sp,20
8113a7d8:	e13ffc15 	stw	r4,-16(fp)
8113a7dc:	e17ffd15 	stw	r5,-12(fp)
8113a7e0:	e1bffe15 	stw	r6,-8(fp)
8113a7e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113a7e8:	e0800217 	ldw	r2,8(fp)
8113a7ec:	d8800015 	stw	r2,0(sp)
8113a7f0:	e1ffff17 	ldw	r7,-4(fp)
8113a7f4:	e1bffe17 	ldw	r6,-8(fp)
8113a7f8:	e17ffd17 	ldw	r5,-12(fp)
8113a7fc:	e13ffc17 	ldw	r4,-16(fp)
8113a800:	113a9900 	call	8113a990 <alt_iic_isr_register>
}  
8113a804:	e037883a 	mov	sp,fp
8113a808:	dfc00117 	ldw	ra,4(sp)
8113a80c:	df000017 	ldw	fp,0(sp)
8113a810:	dec00204 	addi	sp,sp,8
8113a814:	f800283a 	ret

8113a818 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113a818:	defff904 	addi	sp,sp,-28
8113a81c:	de00012e 	bgeu	sp,et,8113a824 <alt_ic_irq_enable+0xc>
8113a820:	003b68fa 	trap	3
8113a824:	df000615 	stw	fp,24(sp)
8113a828:	df000604 	addi	fp,sp,24
8113a82c:	e13ffe15 	stw	r4,-8(fp)
8113a830:	e17fff15 	stw	r5,-4(fp)
8113a834:	e0bfff17 	ldw	r2,-4(fp)
8113a838:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a83c:	0005303a 	rdctl	r2,status
8113a840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a844:	e0fffb17 	ldw	r3,-20(fp)
8113a848:	00bfff84 	movi	r2,-2
8113a84c:	1884703a 	and	r2,r3,r2
8113a850:	1001703a 	wrctl	status,r2
  
  return context;
8113a854:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113a858:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113a85c:	00c00044 	movi	r3,1
8113a860:	e0bffa17 	ldw	r2,-24(fp)
8113a864:	1884983a 	sll	r2,r3,r2
8113a868:	1007883a 	mov	r3,r2
8113a86c:	d0a06617 	ldw	r2,-32360(gp)
8113a870:	1884b03a 	or	r2,r3,r2
8113a874:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113a878:	d0a06617 	ldw	r2,-32360(gp)
8113a87c:	100170fa 	wrctl	ienable,r2
8113a880:	e0bffc17 	ldw	r2,-16(fp)
8113a884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a888:	e0bffd17 	ldw	r2,-12(fp)
8113a88c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113a890:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113a894:	0001883a 	nop
}
8113a898:	e037883a 	mov	sp,fp
8113a89c:	df000017 	ldw	fp,0(sp)
8113a8a0:	dec00104 	addi	sp,sp,4
8113a8a4:	f800283a 	ret

8113a8a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113a8a8:	defff904 	addi	sp,sp,-28
8113a8ac:	de00012e 	bgeu	sp,et,8113a8b4 <alt_ic_irq_disable+0xc>
8113a8b0:	003b68fa 	trap	3
8113a8b4:	df000615 	stw	fp,24(sp)
8113a8b8:	df000604 	addi	fp,sp,24
8113a8bc:	e13ffe15 	stw	r4,-8(fp)
8113a8c0:	e17fff15 	stw	r5,-4(fp)
8113a8c4:	e0bfff17 	ldw	r2,-4(fp)
8113a8c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a8cc:	0005303a 	rdctl	r2,status
8113a8d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a8d4:	e0fffb17 	ldw	r3,-20(fp)
8113a8d8:	00bfff84 	movi	r2,-2
8113a8dc:	1884703a 	and	r2,r3,r2
8113a8e0:	1001703a 	wrctl	status,r2
  
  return context;
8113a8e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113a8e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113a8ec:	00c00044 	movi	r3,1
8113a8f0:	e0bffa17 	ldw	r2,-24(fp)
8113a8f4:	1884983a 	sll	r2,r3,r2
8113a8f8:	0084303a 	nor	r2,zero,r2
8113a8fc:	1007883a 	mov	r3,r2
8113a900:	d0a06617 	ldw	r2,-32360(gp)
8113a904:	1884703a 	and	r2,r3,r2
8113a908:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113a90c:	d0a06617 	ldw	r2,-32360(gp)
8113a910:	100170fa 	wrctl	ienable,r2
8113a914:	e0bffc17 	ldw	r2,-16(fp)
8113a918:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a91c:	e0bffd17 	ldw	r2,-12(fp)
8113a920:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113a924:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113a928:	0001883a 	nop
}
8113a92c:	e037883a 	mov	sp,fp
8113a930:	df000017 	ldw	fp,0(sp)
8113a934:	dec00104 	addi	sp,sp,4
8113a938:	f800283a 	ret

8113a93c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113a93c:	defffc04 	addi	sp,sp,-16
8113a940:	de00012e 	bgeu	sp,et,8113a948 <alt_ic_irq_enabled+0xc>
8113a944:	003b68fa 	trap	3
8113a948:	df000315 	stw	fp,12(sp)
8113a94c:	df000304 	addi	fp,sp,12
8113a950:	e13ffe15 	stw	r4,-8(fp)
8113a954:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113a958:	000530fa 	rdctl	r2,ienable
8113a95c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113a960:	00c00044 	movi	r3,1
8113a964:	e0bfff17 	ldw	r2,-4(fp)
8113a968:	1884983a 	sll	r2,r3,r2
8113a96c:	1007883a 	mov	r3,r2
8113a970:	e0bffd17 	ldw	r2,-12(fp)
8113a974:	1884703a 	and	r2,r3,r2
8113a978:	1004c03a 	cmpne	r2,r2,zero
8113a97c:	10803fcc 	andi	r2,r2,255
}
8113a980:	e037883a 	mov	sp,fp
8113a984:	df000017 	ldw	fp,0(sp)
8113a988:	dec00104 	addi	sp,sp,4
8113a98c:	f800283a 	ret

8113a990 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113a990:	defff504 	addi	sp,sp,-44
8113a994:	de00012e 	bgeu	sp,et,8113a99c <alt_iic_isr_register+0xc>
8113a998:	003b68fa 	trap	3
8113a99c:	dfc00a15 	stw	ra,40(sp)
8113a9a0:	df000915 	stw	fp,36(sp)
8113a9a4:	df000904 	addi	fp,sp,36
8113a9a8:	e13ffc15 	stw	r4,-16(fp)
8113a9ac:	e17ffd15 	stw	r5,-12(fp)
8113a9b0:	e1bffe15 	stw	r6,-8(fp)
8113a9b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113a9b8:	00bffa84 	movi	r2,-22
8113a9bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113a9c0:	e0bffd17 	ldw	r2,-12(fp)
8113a9c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113a9c8:	e0bff817 	ldw	r2,-32(fp)
8113a9cc:	10800808 	cmpgei	r2,r2,32
8113a9d0:	1000271e 	bne	r2,zero,8113aa70 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a9d4:	0005303a 	rdctl	r2,status
8113a9d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a9dc:	e0fffb17 	ldw	r3,-20(fp)
8113a9e0:	00bfff84 	movi	r2,-2
8113a9e4:	1884703a 	and	r2,r3,r2
8113a9e8:	1001703a 	wrctl	status,r2
  
  return context;
8113a9ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113a9f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113a9f4:	00a04574 	movhi	r2,33045
8113a9f8:	10915204 	addi	r2,r2,17736
8113a9fc:	e0fff817 	ldw	r3,-32(fp)
8113aa00:	180690fa 	slli	r3,r3,3
8113aa04:	10c5883a 	add	r2,r2,r3
8113aa08:	e0fffe17 	ldw	r3,-8(fp)
8113aa0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113aa10:	00a04574 	movhi	r2,33045
8113aa14:	10915204 	addi	r2,r2,17736
8113aa18:	e0fff817 	ldw	r3,-32(fp)
8113aa1c:	180690fa 	slli	r3,r3,3
8113aa20:	10c5883a 	add	r2,r2,r3
8113aa24:	10800104 	addi	r2,r2,4
8113aa28:	e0ffff17 	ldw	r3,-4(fp)
8113aa2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113aa30:	e0bffe17 	ldw	r2,-8(fp)
8113aa34:	10000526 	beq	r2,zero,8113aa4c <alt_iic_isr_register+0xbc>
8113aa38:	e0bff817 	ldw	r2,-32(fp)
8113aa3c:	100b883a 	mov	r5,r2
8113aa40:	e13ffc17 	ldw	r4,-16(fp)
8113aa44:	113a8180 	call	8113a818 <alt_ic_irq_enable>
8113aa48:	00000406 	br	8113aa5c <alt_iic_isr_register+0xcc>
8113aa4c:	e0bff817 	ldw	r2,-32(fp)
8113aa50:	100b883a 	mov	r5,r2
8113aa54:	e13ffc17 	ldw	r4,-16(fp)
8113aa58:	113a8a80 	call	8113a8a8 <alt_ic_irq_disable>
8113aa5c:	e0bff715 	stw	r2,-36(fp)
8113aa60:	e0bffa17 	ldw	r2,-24(fp)
8113aa64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aa68:	e0bff917 	ldw	r2,-28(fp)
8113aa6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113aa70:	e0bff717 	ldw	r2,-36(fp)
}
8113aa74:	e037883a 	mov	sp,fp
8113aa78:	dfc00117 	ldw	ra,4(sp)
8113aa7c:	df000017 	ldw	fp,0(sp)
8113aa80:	dec00204 	addi	sp,sp,8
8113aa84:	f800283a 	ret

8113aa88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113aa88:	defff904 	addi	sp,sp,-28
8113aa8c:	de00012e 	bgeu	sp,et,8113aa94 <alt_open_fd+0xc>
8113aa90:	003b68fa 	trap	3
8113aa94:	dfc00615 	stw	ra,24(sp)
8113aa98:	df000515 	stw	fp,20(sp)
8113aa9c:	df000504 	addi	fp,sp,20
8113aaa0:	e13ffc15 	stw	r4,-16(fp)
8113aaa4:	e17ffd15 	stw	r5,-12(fp)
8113aaa8:	e1bffe15 	stw	r6,-8(fp)
8113aaac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113aab0:	e1bfff17 	ldw	r6,-4(fp)
8113aab4:	e17ffe17 	ldw	r5,-8(fp)
8113aab8:	e13ffd17 	ldw	r4,-12(fp)
8113aabc:	11278840 	call	81127884 <open>
8113aac0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113aac4:	e0bffb17 	ldw	r2,-20(fp)
8113aac8:	10001c16 	blt	r2,zero,8113ab3c <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113aacc:	00a04534 	movhi	r2,33044
8113aad0:	10bd2404 	addi	r2,r2,-2928
8113aad4:	e0fffb17 	ldw	r3,-20(fp)
8113aad8:	18c00324 	muli	r3,r3,12
8113aadc:	10c5883a 	add	r2,r2,r3
8113aae0:	10c00017 	ldw	r3,0(r2)
8113aae4:	e0bffc17 	ldw	r2,-16(fp)
8113aae8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113aaec:	00a04534 	movhi	r2,33044
8113aaf0:	10bd2404 	addi	r2,r2,-2928
8113aaf4:	e0fffb17 	ldw	r3,-20(fp)
8113aaf8:	18c00324 	muli	r3,r3,12
8113aafc:	10c5883a 	add	r2,r2,r3
8113ab00:	10800104 	addi	r2,r2,4
8113ab04:	10c00017 	ldw	r3,0(r2)
8113ab08:	e0bffc17 	ldw	r2,-16(fp)
8113ab0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113ab10:	00a04534 	movhi	r2,33044
8113ab14:	10bd2404 	addi	r2,r2,-2928
8113ab18:	e0fffb17 	ldw	r3,-20(fp)
8113ab1c:	18c00324 	muli	r3,r3,12
8113ab20:	10c5883a 	add	r2,r2,r3
8113ab24:	10800204 	addi	r2,r2,8
8113ab28:	10c00017 	ldw	r3,0(r2)
8113ab2c:	e0bffc17 	ldw	r2,-16(fp)
8113ab30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113ab34:	e13ffb17 	ldw	r4,-20(fp)
8113ab38:	1127b280 	call	81127b28 <alt_release_fd>
  }
} 
8113ab3c:	0001883a 	nop
8113ab40:	e037883a 	mov	sp,fp
8113ab44:	dfc00117 	ldw	ra,4(sp)
8113ab48:	df000017 	ldw	fp,0(sp)
8113ab4c:	dec00204 	addi	sp,sp,8
8113ab50:	f800283a 	ret

8113ab54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113ab54:	defffb04 	addi	sp,sp,-20
8113ab58:	de00012e 	bgeu	sp,et,8113ab60 <alt_io_redirect+0xc>
8113ab5c:	003b68fa 	trap	3
8113ab60:	dfc00415 	stw	ra,16(sp)
8113ab64:	df000315 	stw	fp,12(sp)
8113ab68:	df000304 	addi	fp,sp,12
8113ab6c:	e13ffd15 	stw	r4,-12(fp)
8113ab70:	e17ffe15 	stw	r5,-8(fp)
8113ab74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113ab78:	01c07fc4 	movi	r7,511
8113ab7c:	01800044 	movi	r6,1
8113ab80:	e17ffd17 	ldw	r5,-12(fp)
8113ab84:	01204534 	movhi	r4,33044
8113ab88:	213d2704 	addi	r4,r4,-2916
8113ab8c:	113aa880 	call	8113aa88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113ab90:	01c07fc4 	movi	r7,511
8113ab94:	000d883a 	mov	r6,zero
8113ab98:	e17ffe17 	ldw	r5,-8(fp)
8113ab9c:	01204534 	movhi	r4,33044
8113aba0:	213d2404 	addi	r4,r4,-2928
8113aba4:	113aa880 	call	8113aa88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113aba8:	01c07fc4 	movi	r7,511
8113abac:	01800044 	movi	r6,1
8113abb0:	e17fff17 	ldw	r5,-4(fp)
8113abb4:	01204534 	movhi	r4,33044
8113abb8:	213d2a04 	addi	r4,r4,-2904
8113abbc:	113aa880 	call	8113aa88 <alt_open_fd>
}  
8113abc0:	0001883a 	nop
8113abc4:	e037883a 	mov	sp,fp
8113abc8:	dfc00117 	ldw	ra,4(sp)
8113abcc:	df000017 	ldw	fp,0(sp)
8113abd0:	dec00204 	addi	sp,sp,8
8113abd4:	f800283a 	ret

8113abd8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113abd8:	defff204 	addi	sp,sp,-56
8113abdc:	de00012e 	bgeu	sp,et,8113abe4 <alt_printf+0xc>
8113abe0:	003b68fa 	trap	3
8113abe4:	dfc00a15 	stw	ra,40(sp)
8113abe8:	df000915 	stw	fp,36(sp)
8113abec:	df000904 	addi	fp,sp,36
8113abf0:	e13fff15 	stw	r4,-4(fp)
8113abf4:	e1400215 	stw	r5,8(fp)
8113abf8:	e1800315 	stw	r6,12(fp)
8113abfc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113ac00:	e0800204 	addi	r2,fp,8
8113ac04:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113ac08:	e0bfff17 	ldw	r2,-4(fp)
8113ac0c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113ac10:	00006f06 	br	8113add0 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113ac14:	e0bff807 	ldb	r2,-32(fp)
8113ac18:	10800960 	cmpeqi	r2,r2,37
8113ac1c:	1000041e 	bne	r2,zero,8113ac30 <alt_printf+0x58>
        {
            alt_putchar(c);
8113ac20:	e0bff807 	ldb	r2,-32(fp)
8113ac24:	1009883a 	mov	r4,r2
8113ac28:	113ae0c0 	call	8113ae0c <alt_putchar>
8113ac2c:	00006806 	br	8113add0 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113ac30:	e0bff717 	ldw	r2,-36(fp)
8113ac34:	10c00044 	addi	r3,r2,1
8113ac38:	e0fff715 	stw	r3,-36(fp)
8113ac3c:	10800003 	ldbu	r2,0(r2)
8113ac40:	e0bff805 	stb	r2,-32(fp)
8113ac44:	e0bff807 	ldb	r2,-32(fp)
8113ac48:	10006926 	beq	r2,zero,8113adf0 <alt_printf+0x218>
            {
                if (c == '%')
8113ac4c:	e0bff807 	ldb	r2,-32(fp)
8113ac50:	10800958 	cmpnei	r2,r2,37
8113ac54:	1000041e 	bne	r2,zero,8113ac68 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113ac58:	e0bff807 	ldb	r2,-32(fp)
8113ac5c:	1009883a 	mov	r4,r2
8113ac60:	113ae0c0 	call	8113ae0c <alt_putchar>
8113ac64:	00005a06 	br	8113add0 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113ac68:	e0bff807 	ldb	r2,-32(fp)
8113ac6c:	108018d8 	cmpnei	r2,r2,99
8113ac70:	1000081e 	bne	r2,zero,8113ac94 <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113ac74:	e0bffe17 	ldw	r2,-8(fp)
8113ac78:	10c00104 	addi	r3,r2,4
8113ac7c:	e0fffe15 	stw	r3,-8(fp)
8113ac80:	10800017 	ldw	r2,0(r2)
8113ac84:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113ac88:	e13ffd17 	ldw	r4,-12(fp)
8113ac8c:	113ae0c0 	call	8113ae0c <alt_putchar>
8113ac90:	00004f06 	br	8113add0 <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113ac94:	e0bff807 	ldb	r2,-32(fp)
8113ac98:	10801e18 	cmpnei	r2,r2,120
8113ac9c:	1000341e 	bne	r2,zero,8113ad70 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113aca0:	e0bffe17 	ldw	r2,-8(fp)
8113aca4:	10c00104 	addi	r3,r2,4
8113aca8:	e0fffe15 	stw	r3,-8(fp)
8113acac:	10800017 	ldw	r2,0(r2)
8113acb0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113acb4:	e0bffb17 	ldw	r2,-20(fp)
8113acb8:	1000031e 	bne	r2,zero,8113acc8 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113acbc:	01000c04 	movi	r4,48
8113acc0:	113ae0c0 	call	8113ae0c <alt_putchar>
                        continue;
8113acc4:	00004206 	br	8113add0 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113acc8:	00800704 	movi	r2,28
8113accc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113acd0:	00000306 	br	8113ace0 <alt_printf+0x108>
                        digit_shift -= 4;
8113acd4:	e0bff917 	ldw	r2,-28(fp)
8113acd8:	10bfff04 	addi	r2,r2,-4
8113acdc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113ace0:	00c003c4 	movi	r3,15
8113ace4:	e0bff917 	ldw	r2,-28(fp)
8113ace8:	1884983a 	sll	r2,r3,r2
8113acec:	1007883a 	mov	r3,r2
8113acf0:	e0bffb17 	ldw	r2,-20(fp)
8113acf4:	1884703a 	and	r2,r3,r2
8113acf8:	103ff626 	beq	r2,zero,8113acd4 <__reset+0xfb11acd4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113acfc:	00001906 	br	8113ad64 <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113ad00:	00c003c4 	movi	r3,15
8113ad04:	e0bff917 	ldw	r2,-28(fp)
8113ad08:	1884983a 	sll	r2,r3,r2
8113ad0c:	1007883a 	mov	r3,r2
8113ad10:	e0bffb17 	ldw	r2,-20(fp)
8113ad14:	1886703a 	and	r3,r3,r2
8113ad18:	e0bff917 	ldw	r2,-28(fp)
8113ad1c:	1884d83a 	srl	r2,r3,r2
8113ad20:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113ad24:	e0bffc17 	ldw	r2,-16(fp)
8113ad28:	108002a8 	cmpgeui	r2,r2,10
8113ad2c:	1000041e 	bne	r2,zero,8113ad40 <alt_printf+0x168>
                            c = '0' + digit;
8113ad30:	e0bffc17 	ldw	r2,-16(fp)
8113ad34:	10800c04 	addi	r2,r2,48
8113ad38:	e0bff805 	stb	r2,-32(fp)
8113ad3c:	00000306 	br	8113ad4c <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113ad40:	e0bffc17 	ldw	r2,-16(fp)
8113ad44:	108015c4 	addi	r2,r2,87
8113ad48:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113ad4c:	e0bff807 	ldb	r2,-32(fp)
8113ad50:	1009883a 	mov	r4,r2
8113ad54:	113ae0c0 	call	8113ae0c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113ad58:	e0bff917 	ldw	r2,-28(fp)
8113ad5c:	10bfff04 	addi	r2,r2,-4
8113ad60:	e0bff915 	stw	r2,-28(fp)
8113ad64:	e0bff917 	ldw	r2,-28(fp)
8113ad68:	103fe50e 	bge	r2,zero,8113ad00 <__reset+0xfb11ad00>
8113ad6c:	00001806 	br	8113add0 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113ad70:	e0bff807 	ldb	r2,-32(fp)
8113ad74:	10801cd8 	cmpnei	r2,r2,115
8113ad78:	1000151e 	bne	r2,zero,8113add0 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113ad7c:	e0bffe17 	ldw	r2,-8(fp)
8113ad80:	10c00104 	addi	r3,r2,4
8113ad84:	e0fffe15 	stw	r3,-8(fp)
8113ad88:	10800017 	ldw	r2,0(r2)
8113ad8c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113ad90:	00000906 	br	8113adb8 <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113ad94:	e0bffa17 	ldw	r2,-24(fp)
8113ad98:	10c00044 	addi	r3,r2,1
8113ad9c:	e0fffa15 	stw	r3,-24(fp)
8113ada0:	10800003 	ldbu	r2,0(r2)
8113ada4:	10803fcc 	andi	r2,r2,255
8113ada8:	1080201c 	xori	r2,r2,128
8113adac:	10bfe004 	addi	r2,r2,-128
8113adb0:	1009883a 	mov	r4,r2
8113adb4:	113ae0c0 	call	8113ae0c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113adb8:	e0bffa17 	ldw	r2,-24(fp)
8113adbc:	10800003 	ldbu	r2,0(r2)
8113adc0:	10803fcc 	andi	r2,r2,255
8113adc4:	1080201c 	xori	r2,r2,128
8113adc8:	10bfe004 	addi	r2,r2,-128
8113adcc:	103ff11e 	bne	r2,zero,8113ad94 <__reset+0xfb11ad94>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113add0:	e0bff717 	ldw	r2,-36(fp)
8113add4:	10c00044 	addi	r3,r2,1
8113add8:	e0fff715 	stw	r3,-36(fp)
8113addc:	10800003 	ldbu	r2,0(r2)
8113ade0:	e0bff805 	stb	r2,-32(fp)
8113ade4:	e0bff807 	ldb	r2,-32(fp)
8113ade8:	103f8a1e 	bne	r2,zero,8113ac14 <__reset+0xfb11ac14>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113adec:	00000106 	br	8113adf4 <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113adf0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113adf4:	0001883a 	nop
8113adf8:	e037883a 	mov	sp,fp
8113adfc:	dfc00117 	ldw	ra,4(sp)
8113ae00:	df000017 	ldw	fp,0(sp)
8113ae04:	dec00504 	addi	sp,sp,20
8113ae08:	f800283a 	ret

8113ae0c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113ae0c:	defffd04 	addi	sp,sp,-12
8113ae10:	de00012e 	bgeu	sp,et,8113ae18 <alt_putchar+0xc>
8113ae14:	003b68fa 	trap	3
8113ae18:	dfc00215 	stw	ra,8(sp)
8113ae1c:	df000115 	stw	fp,4(sp)
8113ae20:	df000104 	addi	fp,sp,4
8113ae24:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113ae28:	d0a00517 	ldw	r2,-32748(gp)
8113ae2c:	10800217 	ldw	r2,8(r2)
8113ae30:	100b883a 	mov	r5,r2
8113ae34:	e13fff17 	ldw	r4,-4(fp)
8113ae38:	113b4800 	call	8113b480 <putc>
#endif
#endif
}
8113ae3c:	e037883a 	mov	sp,fp
8113ae40:	dfc00117 	ldw	ra,4(sp)
8113ae44:	df000017 	ldw	fp,0(sp)
8113ae48:	dec00204 	addi	sp,sp,8
8113ae4c:	f800283a 	ret

8113ae50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113ae50:	deffff04 	addi	sp,sp,-4
8113ae54:	de00012e 	bgeu	sp,et,8113ae5c <altera_nios2_gen2_irq_init+0xc>
8113ae58:	003b68fa 	trap	3
8113ae5c:	df000015 	stw	fp,0(sp)
8113ae60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113ae64:	000170fa 	wrctl	ienable,zero
}
8113ae68:	0001883a 	nop
8113ae6c:	e037883a 	mov	sp,fp
8113ae70:	df000017 	ldw	fp,0(sp)
8113ae74:	dec00104 	addi	sp,sp,4
8113ae78:	f800283a 	ret

8113ae7c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113ae7c:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113ae80:	de002436 	bltu	sp,et,8113af14 <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113ae84:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113ae88:	d1208417 	ldw	r4,-32240(gp)

      stw ra,  0(sp)
8113ae8c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113ae90:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113ae94:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113ae98:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113ae9c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113aea0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113aea4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113aea8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113aeac:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113aeb0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113aeb4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113aeb8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113aebc:	113b1180 	call	8113b118 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113aec0:	d1207e17 	ldw	r4,-32264(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113aec4:	d1607587 	ldb	r5,-32298(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113aec8:	d1208415 	stw	r4,-32240(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113aecc:	d16075c5 	stb	r5,-32297(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113aed0:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113aed4:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113aed8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113aedc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113aee0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113aee4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113aee8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113aeec:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113aef0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113aef4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113aef8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113aefc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113af00:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113af04:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113af08:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113af0c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113af10:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113af14:	003da0fa 	break	3

8113af18 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113af18:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113af1c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113af20:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113af24:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113af28:	113b1180 	call	8113b118 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113af2c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113af30:	d4a07305 	stb	r18,-32308(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113af34:	003fe206 	br	8113aec0 <__reset+0xfb11aec0>

8113af38 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113af38:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113af3c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113af40:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113af44:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113af48:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113af4c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113af50:	dec00204 	addi	sp,sp,8

      callr r2
8113af54:	103ee83a 	callr	r2

      nop
8113af58:	0001883a 	nop

8113af5c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113af5c:	defff704 	addi	sp,sp,-36
8113af60:	de00012e 	bgeu	sp,et,8113af68 <OSTaskStkInit+0xc>
8113af64:	003b68fa 	trap	3
8113af68:	dfc00815 	stw	ra,32(sp)
8113af6c:	df000715 	stw	fp,28(sp)
8113af70:	df000704 	addi	fp,sp,28
8113af74:	e13ffc15 	stw	r4,-16(fp)
8113af78:	e17ffd15 	stw	r5,-12(fp)
8113af7c:	e1bffe15 	stw	r6,-8(fp)
8113af80:	3805883a 	mov	r2,r7
8113af84:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113af88:	e0fffe17 	ldw	r3,-8(fp)
8113af8c:	00bfff04 	movi	r2,-4
8113af90:	1884703a 	and	r2,r3,r2
8113af94:	10bef704 	addi	r2,r2,-1060
8113af98:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113af9c:	01810904 	movi	r6,1060
8113afa0:	000b883a 	mov	r5,zero
8113afa4:	e13ff917 	ldw	r4,-28(fp)
8113afa8:	1112acc0 	call	81112acc <memset>
8113afac:	e0bff917 	ldw	r2,-28(fp)
8113afb0:	10c0bb04 	addi	r3,r2,748
8113afb4:	e0bff917 	ldw	r2,-28(fp)
8113afb8:	10c00115 	stw	r3,4(r2)
8113afbc:	e0bff917 	ldw	r2,-28(fp)
8113afc0:	10c0d504 	addi	r3,r2,852
8113afc4:	e0bff917 	ldw	r2,-28(fp)
8113afc8:	10c00215 	stw	r3,8(r2)
8113afcc:	e0bff917 	ldw	r2,-28(fp)
8113afd0:	10c0ef04 	addi	r3,r2,956
8113afd4:	e0bff917 	ldw	r2,-28(fp)
8113afd8:	10c00315 	stw	r3,12(r2)
8113afdc:	e0fff917 	ldw	r3,-28(fp)
8113afe0:	00a04534 	movhi	r2,33044
8113afe4:	10baf004 	addi	r2,r2,-5184
8113afe8:	18800d15 	stw	r2,52(r3)
8113afec:	e0bff917 	ldw	r2,-28(fp)
8113aff0:	00c00044 	movi	r3,1
8113aff4:	10c02915 	stw	r3,164(r2)
8113aff8:	10002a15 	stw	zero,168(r2)
8113affc:	e0bff917 	ldw	r2,-28(fp)
8113b000:	00ccc384 	movi	r3,13070
8113b004:	10c02b0d 	sth	r3,172(r2)
8113b008:	e0bff917 	ldw	r2,-28(fp)
8113b00c:	00eaf344 	movi	r3,-21555
8113b010:	10c02b8d 	sth	r3,174(r2)
8113b014:	e0bff917 	ldw	r2,-28(fp)
8113b018:	00c48d04 	movi	r3,4660
8113b01c:	10c02c0d 	sth	r3,176(r2)
8113b020:	e0bff917 	ldw	r2,-28(fp)
8113b024:	00f99b44 	movi	r3,-6547
8113b028:	10c02c8d 	sth	r3,178(r2)
8113b02c:	e0bff917 	ldw	r2,-28(fp)
8113b030:	00f7bb04 	movi	r3,-8468
8113b034:	10c02d0d 	sth	r3,180(r2)
8113b038:	e0bff917 	ldw	r2,-28(fp)
8113b03c:	00c00144 	movi	r3,5
8113b040:	10c02d8d 	sth	r3,182(r2)
8113b044:	e0bff917 	ldw	r2,-28(fp)
8113b048:	00c002c4 	movi	r3,11
8113b04c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113b050:	e0bff917 	ldw	r2,-28(fp)
8113b054:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113b058:	e0bffa17 	ldw	r2,-24(fp)
8113b05c:	10bff304 	addi	r2,r2,-52
8113b060:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113b064:	e0bffb17 	ldw	r2,-20(fp)
8113b068:	10800c04 	addi	r2,r2,48
8113b06c:	e0fffc17 	ldw	r3,-16(fp)
8113b070:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113b074:	e0bffb17 	ldw	r2,-20(fp)
8113b078:	10800b04 	addi	r2,r2,44
8113b07c:	e0fffd17 	ldw	r3,-12(fp)
8113b080:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113b084:	e0bffb17 	ldw	r2,-20(fp)
8113b088:	10800a04 	addi	r2,r2,40
8113b08c:	e0fff917 	ldw	r3,-28(fp)
8113b090:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113b094:	00a04534 	movhi	r2,33044
8113b098:	10abce04 	addi	r2,r2,-20680
8113b09c:	10c00104 	addi	r3,r2,4
8113b0a0:	e0bffb17 	ldw	r2,-20(fp)
8113b0a4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113b0a8:	e0bffb17 	ldw	r2,-20(fp)
}
8113b0ac:	e037883a 	mov	sp,fp
8113b0b0:	dfc00117 	ldw	ra,4(sp)
8113b0b4:	df000017 	ldw	fp,0(sp)
8113b0b8:	dec00204 	addi	sp,sp,8
8113b0bc:	f800283a 	ret

8113b0c0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113b0c0:	defffe04 	addi	sp,sp,-8
8113b0c4:	de00012e 	bgeu	sp,et,8113b0cc <OSTaskCreateHook+0xc>
8113b0c8:	003b68fa 	trap	3
8113b0cc:	df000115 	stw	fp,4(sp)
8113b0d0:	df000104 	addi	fp,sp,4
8113b0d4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113b0d8:	0001883a 	nop
8113b0dc:	e037883a 	mov	sp,fp
8113b0e0:	df000017 	ldw	fp,0(sp)
8113b0e4:	dec00104 	addi	sp,sp,4
8113b0e8:	f800283a 	ret

8113b0ec <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113b0ec:	defffe04 	addi	sp,sp,-8
8113b0f0:	de00012e 	bgeu	sp,et,8113b0f8 <OSTaskDelHook+0xc>
8113b0f4:	003b68fa 	trap	3
8113b0f8:	df000115 	stw	fp,4(sp)
8113b0fc:	df000104 	addi	fp,sp,4
8113b100:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113b104:	0001883a 	nop
8113b108:	e037883a 	mov	sp,fp
8113b10c:	df000017 	ldw	fp,0(sp)
8113b110:	dec00104 	addi	sp,sp,4
8113b114:	f800283a 	ret

8113b118 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113b118:	deffff04 	addi	sp,sp,-4
8113b11c:	de00012e 	bgeu	sp,et,8113b124 <OSTaskSwHook+0xc>
8113b120:	003b68fa 	trap	3
8113b124:	df000015 	stw	fp,0(sp)
8113b128:	d839883a 	mov	fp,sp
}
8113b12c:	0001883a 	nop
8113b130:	e037883a 	mov	sp,fp
8113b134:	df000017 	ldw	fp,0(sp)
8113b138:	dec00104 	addi	sp,sp,4
8113b13c:	f800283a 	ret

8113b140 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113b140:	deffff04 	addi	sp,sp,-4
8113b144:	de00012e 	bgeu	sp,et,8113b14c <OSTaskStatHook+0xc>
8113b148:	003b68fa 	trap	3
8113b14c:	df000015 	stw	fp,0(sp)
8113b150:	d839883a 	mov	fp,sp
}
8113b154:	0001883a 	nop
8113b158:	e037883a 	mov	sp,fp
8113b15c:	df000017 	ldw	fp,0(sp)
8113b160:	dec00104 	addi	sp,sp,4
8113b164:	f800283a 	ret

8113b168 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113b168:	defffe04 	addi	sp,sp,-8
8113b16c:	de00012e 	bgeu	sp,et,8113b174 <OSTimeTickHook+0xc>
8113b170:	003b68fa 	trap	3
8113b174:	dfc00115 	stw	ra,4(sp)
8113b178:	df000015 	stw	fp,0(sp)
8113b17c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113b180:	d0a0980b 	ldhu	r2,-32160(gp)
8113b184:	10800044 	addi	r2,r2,1
8113b188:	d0a0980d 	sth	r2,-32160(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113b18c:	d0a0980b 	ldhu	r2,-32160(gp)
8113b190:	10bfffcc 	andi	r2,r2,65535
8113b194:	10803230 	cmpltui	r2,r2,200
8113b198:	1000021e 	bne	r2,zero,8113b1a4 <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113b19c:	d020980d 	sth	zero,-32160(gp)
        OSTmrSignal();
8113b1a0:	1131a7c0 	call	81131a7c <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113b1a4:	0001883a 	nop
8113b1a8:	e037883a 	mov	sp,fp
8113b1ac:	dfc00117 	ldw	ra,4(sp)
8113b1b0:	df000017 	ldw	fp,0(sp)
8113b1b4:	dec00204 	addi	sp,sp,8
8113b1b8:	f800283a 	ret

8113b1bc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113b1bc:	deffff04 	addi	sp,sp,-4
8113b1c0:	de00012e 	bgeu	sp,et,8113b1c8 <OSInitHookBegin+0xc>
8113b1c4:	003b68fa 	trap	3
8113b1c8:	df000015 	stw	fp,0(sp)
8113b1cc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113b1d0:	d020980d 	sth	zero,-32160(gp)
#endif
}
8113b1d4:	0001883a 	nop
8113b1d8:	e037883a 	mov	sp,fp
8113b1dc:	df000017 	ldw	fp,0(sp)
8113b1e0:	dec00104 	addi	sp,sp,4
8113b1e4:	f800283a 	ret

8113b1e8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113b1e8:	deffff04 	addi	sp,sp,-4
8113b1ec:	de00012e 	bgeu	sp,et,8113b1f4 <OSInitHookEnd+0xc>
8113b1f0:	003b68fa 	trap	3
8113b1f4:	df000015 	stw	fp,0(sp)
8113b1f8:	d839883a 	mov	fp,sp
}
8113b1fc:	0001883a 	nop
8113b200:	e037883a 	mov	sp,fp
8113b204:	df000017 	ldw	fp,0(sp)
8113b208:	dec00104 	addi	sp,sp,4
8113b20c:	f800283a 	ret

8113b210 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113b210:	deffff04 	addi	sp,sp,-4
8113b214:	de00012e 	bgeu	sp,et,8113b21c <OSTaskIdleHook+0xc>
8113b218:	003b68fa 	trap	3
8113b21c:	df000015 	stw	fp,0(sp)
8113b220:	d839883a 	mov	fp,sp
}
8113b224:	0001883a 	nop
8113b228:	e037883a 	mov	sp,fp
8113b22c:	df000017 	ldw	fp,0(sp)
8113b230:	dec00104 	addi	sp,sp,4
8113b234:	f800283a 	ret

8113b238 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113b238:	defffe04 	addi	sp,sp,-8
8113b23c:	de00012e 	bgeu	sp,et,8113b244 <OSTCBInitHook+0xc>
8113b240:	003b68fa 	trap	3
8113b244:	df000115 	stw	fp,4(sp)
8113b248:	df000104 	addi	fp,sp,4
8113b24c:	e13fff15 	stw	r4,-4(fp)
}
8113b250:	0001883a 	nop
8113b254:	e037883a 	mov	sp,fp
8113b258:	df000017 	ldw	fp,0(sp)
8113b25c:	dec00104 	addi	sp,sp,4
8113b260:	f800283a 	ret

8113b264 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113b264:	defffe04 	addi	sp,sp,-8
8113b268:	de00012e 	bgeu	sp,et,8113b270 <alt_exception_cause_generated_bad_addr+0xc>
8113b26c:	003b68fa 	trap	3
8113b270:	df000115 	stw	fp,4(sp)
8113b274:	df000104 	addi	fp,sp,4
8113b278:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113b27c:	e0bfff17 	ldw	r2,-4(fp)
8113b280:	10bffe84 	addi	r2,r2,-6
8113b284:	10c00428 	cmpgeui	r3,r2,16
8113b288:	18001a1e 	bne	r3,zero,8113b2f4 <alt_exception_cause_generated_bad_addr+0x90>
8113b28c:	100690ba 	slli	r3,r2,2
8113b290:	00a04534 	movhi	r2,33044
8113b294:	10aca904 	addi	r2,r2,-19804
8113b298:	1885883a 	add	r2,r3,r2
8113b29c:	10800017 	ldw	r2,0(r2)
8113b2a0:	1000683a 	jmp	r2
8113b2a4:	8113b2e4 	muli	r4,r16,20171
8113b2a8:	8113b2e4 	muli	r4,r16,20171
8113b2ac:	8113b2f4 	orhi	r4,r16,20171
8113b2b0:	8113b2f4 	orhi	r4,r16,20171
8113b2b4:	8113b2f4 	orhi	r4,r16,20171
8113b2b8:	8113b2e4 	muli	r4,r16,20171
8113b2bc:	8113b2ec 	andhi	r4,r16,20171
8113b2c0:	8113b2f4 	orhi	r4,r16,20171
8113b2c4:	8113b2e4 	muli	r4,r16,20171
8113b2c8:	8113b2e4 	muli	r4,r16,20171
8113b2cc:	8113b2f4 	orhi	r4,r16,20171
8113b2d0:	8113b2e4 	muli	r4,r16,20171
8113b2d4:	8113b2ec 	andhi	r4,r16,20171
8113b2d8:	8113b2f4 	orhi	r4,r16,20171
8113b2dc:	8113b2f4 	orhi	r4,r16,20171
8113b2e0:	8113b2e4 	muli	r4,r16,20171
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113b2e4:	00800044 	movi	r2,1
8113b2e8:	00000306 	br	8113b2f8 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113b2ec:	0005883a 	mov	r2,zero
8113b2f0:	00000106 	br	8113b2f8 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113b2f4:	0005883a 	mov	r2,zero
  }
}
8113b2f8:	e037883a 	mov	sp,fp
8113b2fc:	df000017 	ldw	fp,0(sp)
8113b300:	dec00104 	addi	sp,sp,4
8113b304:	f800283a 	ret

8113b308 <atexit>:
8113b308:	200b883a 	mov	r5,r4
8113b30c:	000f883a 	mov	r7,zero
8113b310:	000d883a 	mov	r6,zero
8113b314:	0009883a 	mov	r4,zero
8113b318:	113b5501 	jmpi	8113b550 <__register_exitproc>

8113b31c <exit>:
8113b31c:	defffe04 	addi	sp,sp,-8
8113b320:	000b883a 	mov	r5,zero
8113b324:	de00012e 	bgeu	sp,et,8113b32c <exit+0x10>
8113b328:	003b68fa 	trap	3
8113b32c:	dc000015 	stw	r16,0(sp)
8113b330:	dfc00115 	stw	ra,4(sp)
8113b334:	2021883a 	mov	r16,r4
8113b338:	113b6700 	call	8113b670 <__call_exitprocs>
8113b33c:	00a04534 	movhi	r2,33044
8113b340:	10821404 	addi	r2,r2,2128
8113b344:	11000017 	ldw	r4,0(r2)
8113b348:	20800f17 	ldw	r2,60(r4)
8113b34c:	10000126 	beq	r2,zero,8113b354 <exit+0x38>
8113b350:	103ee83a 	callr	r2
8113b354:	8009883a 	mov	r4,r16
8113b358:	113b7f80 	call	8113b7f8 <_exit>

8113b35c <memcmp>:
8113b35c:	01c000c4 	movi	r7,3
8113b360:	3980192e 	bgeu	r7,r6,8113b3c8 <memcmp+0x6c>
8113b364:	2144b03a 	or	r2,r4,r5
8113b368:	11c4703a 	and	r2,r2,r7
8113b36c:	10000f26 	beq	r2,zero,8113b3ac <memcmp+0x50>
8113b370:	20800003 	ldbu	r2,0(r4)
8113b374:	28c00003 	ldbu	r3,0(r5)
8113b378:	10c0151e 	bne	r2,r3,8113b3d0 <memcmp+0x74>
8113b37c:	31bfff84 	addi	r6,r6,-2
8113b380:	01ffffc4 	movi	r7,-1
8113b384:	00000406 	br	8113b398 <memcmp+0x3c>
8113b388:	20800003 	ldbu	r2,0(r4)
8113b38c:	28c00003 	ldbu	r3,0(r5)
8113b390:	31bfffc4 	addi	r6,r6,-1
8113b394:	10c00e1e 	bne	r2,r3,8113b3d0 <memcmp+0x74>
8113b398:	21000044 	addi	r4,r4,1
8113b39c:	29400044 	addi	r5,r5,1
8113b3a0:	31fff91e 	bne	r6,r7,8113b388 <__reset+0xfb11b388>
8113b3a4:	0005883a 	mov	r2,zero
8113b3a8:	f800283a 	ret
8113b3ac:	20c00017 	ldw	r3,0(r4)
8113b3b0:	28800017 	ldw	r2,0(r5)
8113b3b4:	18bfee1e 	bne	r3,r2,8113b370 <__reset+0xfb11b370>
8113b3b8:	31bfff04 	addi	r6,r6,-4
8113b3bc:	21000104 	addi	r4,r4,4
8113b3c0:	29400104 	addi	r5,r5,4
8113b3c4:	39bff936 	bltu	r7,r6,8113b3ac <__reset+0xfb11b3ac>
8113b3c8:	303fe91e 	bne	r6,zero,8113b370 <__reset+0xfb11b370>
8113b3cc:	003ff506 	br	8113b3a4 <__reset+0xfb11b3a4>
8113b3d0:	10c5c83a 	sub	r2,r2,r3
8113b3d4:	f800283a 	ret

8113b3d8 <_putc_r>:
8113b3d8:	defffc04 	addi	sp,sp,-16
8113b3dc:	de00012e 	bgeu	sp,et,8113b3e4 <_putc_r+0xc>
8113b3e0:	003b68fa 	trap	3
8113b3e4:	dc000215 	stw	r16,8(sp)
8113b3e8:	dfc00315 	stw	ra,12(sp)
8113b3ec:	2021883a 	mov	r16,r4
8113b3f0:	20000226 	beq	r4,zero,8113b3fc <_putc_r+0x24>
8113b3f4:	20800e17 	ldw	r2,56(r4)
8113b3f8:	10001b26 	beq	r2,zero,8113b468 <_putc_r+0x90>
8113b3fc:	30800217 	ldw	r2,8(r6)
8113b400:	10bfffc4 	addi	r2,r2,-1
8113b404:	30800215 	stw	r2,8(r6)
8113b408:	10000a16 	blt	r2,zero,8113b434 <_putc_r+0x5c>
8113b40c:	30800017 	ldw	r2,0(r6)
8113b410:	11400005 	stb	r5,0(r2)
8113b414:	30800017 	ldw	r2,0(r6)
8113b418:	10c00044 	addi	r3,r2,1
8113b41c:	30c00015 	stw	r3,0(r6)
8113b420:	10800003 	ldbu	r2,0(r2)
8113b424:	dfc00317 	ldw	ra,12(sp)
8113b428:	dc000217 	ldw	r16,8(sp)
8113b42c:	dec00404 	addi	sp,sp,16
8113b430:	f800283a 	ret
8113b434:	30c00617 	ldw	r3,24(r6)
8113b438:	10c00616 	blt	r2,r3,8113b454 <_putc_r+0x7c>
8113b43c:	30800017 	ldw	r2,0(r6)
8113b440:	00c00284 	movi	r3,10
8113b444:	11400005 	stb	r5,0(r2)
8113b448:	30800017 	ldw	r2,0(r6)
8113b44c:	11400003 	ldbu	r5,0(r2)
8113b450:	28fff11e 	bne	r5,r3,8113b418 <__reset+0xfb11b418>
8113b454:	8009883a 	mov	r4,r16
8113b458:	dfc00317 	ldw	ra,12(sp)
8113b45c:	dc000217 	ldw	r16,8(sp)
8113b460:	dec00404 	addi	sp,sp,16
8113b464:	1123e141 	jmpi	81123e14 <__swbuf_r>
8113b468:	d9400015 	stw	r5,0(sp)
8113b46c:	d9800115 	stw	r6,4(sp)
8113b470:	111b4280 	call	8111b428 <__sinit>
8113b474:	d9800117 	ldw	r6,4(sp)
8113b478:	d9400017 	ldw	r5,0(sp)
8113b47c:	003fdf06 	br	8113b3fc <__reset+0xfb11b3fc>

8113b480 <putc>:
8113b480:	00a04534 	movhi	r2,33044
8113b484:	defffc04 	addi	sp,sp,-16
8113b488:	10821504 	addi	r2,r2,2132
8113b48c:	de00012e 	bgeu	sp,et,8113b494 <putc+0x14>
8113b490:	003b68fa 	trap	3
8113b494:	dc000115 	stw	r16,4(sp)
8113b498:	14000017 	ldw	r16,0(r2)
8113b49c:	dc400215 	stw	r17,8(sp)
8113b4a0:	dfc00315 	stw	ra,12(sp)
8113b4a4:	2023883a 	mov	r17,r4
8113b4a8:	80000226 	beq	r16,zero,8113b4b4 <putc+0x34>
8113b4ac:	80800e17 	ldw	r2,56(r16)
8113b4b0:	10001a26 	beq	r2,zero,8113b51c <putc+0x9c>
8113b4b4:	28800217 	ldw	r2,8(r5)
8113b4b8:	10bfffc4 	addi	r2,r2,-1
8113b4bc:	28800215 	stw	r2,8(r5)
8113b4c0:	10000b16 	blt	r2,zero,8113b4f0 <putc+0x70>
8113b4c4:	28800017 	ldw	r2,0(r5)
8113b4c8:	14400005 	stb	r17,0(r2)
8113b4cc:	28800017 	ldw	r2,0(r5)
8113b4d0:	10c00044 	addi	r3,r2,1
8113b4d4:	28c00015 	stw	r3,0(r5)
8113b4d8:	10800003 	ldbu	r2,0(r2)
8113b4dc:	dfc00317 	ldw	ra,12(sp)
8113b4e0:	dc400217 	ldw	r17,8(sp)
8113b4e4:	dc000117 	ldw	r16,4(sp)
8113b4e8:	dec00404 	addi	sp,sp,16
8113b4ec:	f800283a 	ret
8113b4f0:	28c00617 	ldw	r3,24(r5)
8113b4f4:	10c00e16 	blt	r2,r3,8113b530 <putc+0xb0>
8113b4f8:	28800017 	ldw	r2,0(r5)
8113b4fc:	01000284 	movi	r4,10
8113b500:	14400005 	stb	r17,0(r2)
8113b504:	28800017 	ldw	r2,0(r5)
8113b508:	10c00003 	ldbu	r3,0(r2)
8113b50c:	193ff01e 	bne	r3,r4,8113b4d0 <__reset+0xfb11b4d0>
8113b510:	280d883a 	mov	r6,r5
8113b514:	180b883a 	mov	r5,r3
8113b518:	00000706 	br	8113b538 <putc+0xb8>
8113b51c:	8009883a 	mov	r4,r16
8113b520:	d9400015 	stw	r5,0(sp)
8113b524:	111b4280 	call	8111b428 <__sinit>
8113b528:	d9400017 	ldw	r5,0(sp)
8113b52c:	003fe106 	br	8113b4b4 <__reset+0xfb11b4b4>
8113b530:	280d883a 	mov	r6,r5
8113b534:	880b883a 	mov	r5,r17
8113b538:	8009883a 	mov	r4,r16
8113b53c:	dfc00317 	ldw	ra,12(sp)
8113b540:	dc400217 	ldw	r17,8(sp)
8113b544:	dc000117 	ldw	r16,4(sp)
8113b548:	dec00404 	addi	sp,sp,16
8113b54c:	1123e141 	jmpi	81123e14 <__swbuf_r>

8113b550 <__register_exitproc>:
8113b550:	defffa04 	addi	sp,sp,-24
8113b554:	de00012e 	bgeu	sp,et,8113b55c <__register_exitproc+0xc>
8113b558:	003b68fa 	trap	3
8113b55c:	dc000315 	stw	r16,12(sp)
8113b560:	04204534 	movhi	r16,33044
8113b564:	84021404 	addi	r16,r16,2128
8113b568:	80c00017 	ldw	r3,0(r16)
8113b56c:	dc400415 	stw	r17,16(sp)
8113b570:	dfc00515 	stw	ra,20(sp)
8113b574:	18805217 	ldw	r2,328(r3)
8113b578:	2023883a 	mov	r17,r4
8113b57c:	10003726 	beq	r2,zero,8113b65c <__register_exitproc+0x10c>
8113b580:	10c00117 	ldw	r3,4(r2)
8113b584:	010007c4 	movi	r4,31
8113b588:	20c00e16 	blt	r4,r3,8113b5c4 <__register_exitproc+0x74>
8113b58c:	1a000044 	addi	r8,r3,1
8113b590:	8800221e 	bne	r17,zero,8113b61c <__register_exitproc+0xcc>
8113b594:	18c00084 	addi	r3,r3,2
8113b598:	18c7883a 	add	r3,r3,r3
8113b59c:	18c7883a 	add	r3,r3,r3
8113b5a0:	12000115 	stw	r8,4(r2)
8113b5a4:	10c7883a 	add	r3,r2,r3
8113b5a8:	19400015 	stw	r5,0(r3)
8113b5ac:	0005883a 	mov	r2,zero
8113b5b0:	dfc00517 	ldw	ra,20(sp)
8113b5b4:	dc400417 	ldw	r17,16(sp)
8113b5b8:	dc000317 	ldw	r16,12(sp)
8113b5bc:	dec00604 	addi	sp,sp,24
8113b5c0:	f800283a 	ret
8113b5c4:	00800034 	movhi	r2,0
8113b5c8:	10800004 	addi	r2,r2,0
8113b5cc:	10002626 	beq	r2,zero,8113b668 <__register_exitproc+0x118>
8113b5d0:	01006404 	movi	r4,400
8113b5d4:	d9400015 	stw	r5,0(sp)
8113b5d8:	d9800115 	stw	r6,4(sp)
8113b5dc:	d9c00215 	stw	r7,8(sp)
8113b5e0:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113b5e4:	d9400017 	ldw	r5,0(sp)
8113b5e8:	d9800117 	ldw	r6,4(sp)
8113b5ec:	d9c00217 	ldw	r7,8(sp)
8113b5f0:	10001d26 	beq	r2,zero,8113b668 <__register_exitproc+0x118>
8113b5f4:	81000017 	ldw	r4,0(r16)
8113b5f8:	10000115 	stw	zero,4(r2)
8113b5fc:	02000044 	movi	r8,1
8113b600:	22405217 	ldw	r9,328(r4)
8113b604:	0007883a 	mov	r3,zero
8113b608:	12400015 	stw	r9,0(r2)
8113b60c:	20805215 	stw	r2,328(r4)
8113b610:	10006215 	stw	zero,392(r2)
8113b614:	10006315 	stw	zero,396(r2)
8113b618:	883fde26 	beq	r17,zero,8113b594 <__reset+0xfb11b594>
8113b61c:	18c9883a 	add	r4,r3,r3
8113b620:	2109883a 	add	r4,r4,r4
8113b624:	1109883a 	add	r4,r2,r4
8113b628:	21802215 	stw	r6,136(r4)
8113b62c:	01800044 	movi	r6,1
8113b630:	12406217 	ldw	r9,392(r2)
8113b634:	30cc983a 	sll	r6,r6,r3
8113b638:	4992b03a 	or	r9,r9,r6
8113b63c:	12406215 	stw	r9,392(r2)
8113b640:	21c04215 	stw	r7,264(r4)
8113b644:	01000084 	movi	r4,2
8113b648:	893fd21e 	bne	r17,r4,8113b594 <__reset+0xfb11b594>
8113b64c:	11006317 	ldw	r4,396(r2)
8113b650:	218cb03a 	or	r6,r4,r6
8113b654:	11806315 	stw	r6,396(r2)
8113b658:	003fce06 	br	8113b594 <__reset+0xfb11b594>
8113b65c:	18805304 	addi	r2,r3,332
8113b660:	18805215 	stw	r2,328(r3)
8113b664:	003fc606 	br	8113b580 <__reset+0xfb11b580>
8113b668:	00bfffc4 	movi	r2,-1
8113b66c:	003fd006 	br	8113b5b0 <__reset+0xfb11b5b0>

8113b670 <__call_exitprocs>:
8113b670:	defff504 	addi	sp,sp,-44
8113b674:	de00012e 	bgeu	sp,et,8113b67c <__call_exitprocs+0xc>
8113b678:	003b68fa 	trap	3
8113b67c:	df000915 	stw	fp,36(sp)
8113b680:	dd400615 	stw	r21,24(sp)
8113b684:	dc800315 	stw	r18,12(sp)
8113b688:	dfc00a15 	stw	ra,40(sp)
8113b68c:	ddc00815 	stw	r23,32(sp)
8113b690:	dd800715 	stw	r22,28(sp)
8113b694:	dd000515 	stw	r20,20(sp)
8113b698:	dcc00415 	stw	r19,16(sp)
8113b69c:	dc400215 	stw	r17,8(sp)
8113b6a0:	dc000115 	stw	r16,4(sp)
8113b6a4:	d9000015 	stw	r4,0(sp)
8113b6a8:	2839883a 	mov	fp,r5
8113b6ac:	04800044 	movi	r18,1
8113b6b0:	057fffc4 	movi	r21,-1
8113b6b4:	00a04534 	movhi	r2,33044
8113b6b8:	10821404 	addi	r2,r2,2128
8113b6bc:	12000017 	ldw	r8,0(r2)
8113b6c0:	45005217 	ldw	r20,328(r8)
8113b6c4:	44c05204 	addi	r19,r8,328
8113b6c8:	a0001c26 	beq	r20,zero,8113b73c <__call_exitprocs+0xcc>
8113b6cc:	a0800117 	ldw	r2,4(r20)
8113b6d0:	15ffffc4 	addi	r23,r2,-1
8113b6d4:	b8000d16 	blt	r23,zero,8113b70c <__call_exitprocs+0x9c>
8113b6d8:	14000044 	addi	r16,r2,1
8113b6dc:	8421883a 	add	r16,r16,r16
8113b6e0:	8421883a 	add	r16,r16,r16
8113b6e4:	84402004 	addi	r17,r16,128
8113b6e8:	a463883a 	add	r17,r20,r17
8113b6ec:	a421883a 	add	r16,r20,r16
8113b6f0:	e0001e26 	beq	fp,zero,8113b76c <__call_exitprocs+0xfc>
8113b6f4:	80804017 	ldw	r2,256(r16)
8113b6f8:	e0801c26 	beq	fp,r2,8113b76c <__call_exitprocs+0xfc>
8113b6fc:	bdffffc4 	addi	r23,r23,-1
8113b700:	843fff04 	addi	r16,r16,-4
8113b704:	8c7fff04 	addi	r17,r17,-4
8113b708:	bd7ff91e 	bne	r23,r21,8113b6f0 <__reset+0xfb11b6f0>
8113b70c:	00800034 	movhi	r2,0
8113b710:	10800004 	addi	r2,r2,0
8113b714:	10000926 	beq	r2,zero,8113b73c <__call_exitprocs+0xcc>
8113b718:	a0800117 	ldw	r2,4(r20)
8113b71c:	1000301e 	bne	r2,zero,8113b7e0 <__call_exitprocs+0x170>
8113b720:	a0800017 	ldw	r2,0(r20)
8113b724:	10003226 	beq	r2,zero,8113b7f0 <__call_exitprocs+0x180>
8113b728:	a009883a 	mov	r4,r20
8113b72c:	98800015 	stw	r2,0(r19)
8113b730:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113b734:	9d000017 	ldw	r20,0(r19)
8113b738:	a03fe41e 	bne	r20,zero,8113b6cc <__reset+0xfb11b6cc>
8113b73c:	dfc00a17 	ldw	ra,40(sp)
8113b740:	df000917 	ldw	fp,36(sp)
8113b744:	ddc00817 	ldw	r23,32(sp)
8113b748:	dd800717 	ldw	r22,28(sp)
8113b74c:	dd400617 	ldw	r21,24(sp)
8113b750:	dd000517 	ldw	r20,20(sp)
8113b754:	dcc00417 	ldw	r19,16(sp)
8113b758:	dc800317 	ldw	r18,12(sp)
8113b75c:	dc400217 	ldw	r17,8(sp)
8113b760:	dc000117 	ldw	r16,4(sp)
8113b764:	dec00b04 	addi	sp,sp,44
8113b768:	f800283a 	ret
8113b76c:	a0800117 	ldw	r2,4(r20)
8113b770:	80c00017 	ldw	r3,0(r16)
8113b774:	10bfffc4 	addi	r2,r2,-1
8113b778:	15c01426 	beq	r2,r23,8113b7cc <__call_exitprocs+0x15c>
8113b77c:	80000015 	stw	zero,0(r16)
8113b780:	183fde26 	beq	r3,zero,8113b6fc <__reset+0xfb11b6fc>
8113b784:	95c8983a 	sll	r4,r18,r23
8113b788:	a0806217 	ldw	r2,392(r20)
8113b78c:	a5800117 	ldw	r22,4(r20)
8113b790:	2084703a 	and	r2,r4,r2
8113b794:	10000b26 	beq	r2,zero,8113b7c4 <__call_exitprocs+0x154>
8113b798:	a0806317 	ldw	r2,396(r20)
8113b79c:	2088703a 	and	r4,r4,r2
8113b7a0:	20000c1e 	bne	r4,zero,8113b7d4 <__call_exitprocs+0x164>
8113b7a4:	89400017 	ldw	r5,0(r17)
8113b7a8:	d9000017 	ldw	r4,0(sp)
8113b7ac:	183ee83a 	callr	r3
8113b7b0:	a0800117 	ldw	r2,4(r20)
8113b7b4:	15bfbf1e 	bne	r2,r22,8113b6b4 <__reset+0xfb11b6b4>
8113b7b8:	98800017 	ldw	r2,0(r19)
8113b7bc:	153fcf26 	beq	r2,r20,8113b6fc <__reset+0xfb11b6fc>
8113b7c0:	003fbc06 	br	8113b6b4 <__reset+0xfb11b6b4>
8113b7c4:	183ee83a 	callr	r3
8113b7c8:	003ff906 	br	8113b7b0 <__reset+0xfb11b7b0>
8113b7cc:	a5c00115 	stw	r23,4(r20)
8113b7d0:	003feb06 	br	8113b780 <__reset+0xfb11b780>
8113b7d4:	89000017 	ldw	r4,0(r17)
8113b7d8:	183ee83a 	callr	r3
8113b7dc:	003ff406 	br	8113b7b0 <__reset+0xfb11b7b0>
8113b7e0:	a0800017 	ldw	r2,0(r20)
8113b7e4:	a027883a 	mov	r19,r20
8113b7e8:	1029883a 	mov	r20,r2
8113b7ec:	003fb606 	br	8113b6c8 <__reset+0xfb11b6c8>
8113b7f0:	0005883a 	mov	r2,zero
8113b7f4:	003ffb06 	br	8113b7e4 <__reset+0xfb11b7e4>

8113b7f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113b7f8:	defffd04 	addi	sp,sp,-12
8113b7fc:	de00012e 	bgeu	sp,et,8113b804 <_exit+0xc>
8113b800:	003b68fa 	trap	3
8113b804:	df000215 	stw	fp,8(sp)
8113b808:	df000204 	addi	fp,sp,8
8113b80c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8113b810:	d0207305 	stb	zero,-32308(gp)
8113b814:	e0bfff17 	ldw	r2,-4(fp)
8113b818:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113b81c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113b820:	10000226 	beq	r2,zero,8113b82c <_exit+0x34>
    ALT_SIM_FAIL();
8113b824:	002af070 	cmpltui	zero,zero,43969
8113b828:	00000106 	br	8113b830 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
8113b82c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8113b830:	003fff06 	br	8113b830 <__reset+0xfb11b830>
